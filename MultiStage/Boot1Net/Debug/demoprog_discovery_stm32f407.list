
demoprog_discovery_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111dc  08004190  08004190  00004190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c64  0801536c  0801536c  0001536c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017fd0  08017fd0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08017fd0  08017fd0  00017fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017fd8  08017fd8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017fd8  08017fd8  00017fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017fdc  08017fdc  00017fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08017fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007f48  20000080  08018060  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007fc8  08018060  00027fc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00054ce8  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000097f4  00000000  00000000  00074d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001808  00000000  00000000  0007e590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002068  00000000  00000000  0007fd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035932  00000000  00000000  00081e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00041490  00000000  00000000  000b7732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5cec  00000000  00000000  000f8bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ee8ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000507c  00000000  00000000  001ee904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0001e58c  00000000  00000000  001f3980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004190 <__do_global_dtors_aux>:
 8004190:	b510      	push	{r4, lr}
 8004192:	4c05      	ldr	r4, [pc, #20]	; (80041a8 <__do_global_dtors_aux+0x18>)
 8004194:	7823      	ldrb	r3, [r4, #0]
 8004196:	b933      	cbnz	r3, 80041a6 <__do_global_dtors_aux+0x16>
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <__do_global_dtors_aux+0x1c>)
 800419a:	b113      	cbz	r3, 80041a2 <__do_global_dtors_aux+0x12>
 800419c:	4804      	ldr	r0, [pc, #16]	; (80041b0 <__do_global_dtors_aux+0x20>)
 800419e:	f3af 8000 	nop.w
 80041a2:	2301      	movs	r3, #1
 80041a4:	7023      	strb	r3, [r4, #0]
 80041a6:	bd10      	pop	{r4, pc}
 80041a8:	20000080 	.word	0x20000080
 80041ac:	00000000 	.word	0x00000000
 80041b0:	08015354 	.word	0x08015354

080041b4 <frame_dummy>:
 80041b4:	b508      	push	{r3, lr}
 80041b6:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <frame_dummy+0x10>)
 80041b8:	b11b      	cbz	r3, 80041c2 <frame_dummy+0xe>
 80041ba:	4903      	ldr	r1, [pc, #12]	; (80041c8 <frame_dummy+0x14>)
 80041bc:	4803      	ldr	r0, [pc, #12]	; (80041cc <frame_dummy+0x18>)
 80041be:	f3af 8000 	nop.w
 80041c2:	bd08      	pop	{r3, pc}
 80041c4:	00000000 	.word	0x00000000
 80041c8:	20000084 	.word	0x20000084
 80041cc:	08015354 	.word	0x08015354

080041d0 <strlen>:
 80041d0:	4603      	mov	r3, r0
 80041d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041d6:	2a00      	cmp	r2, #0
 80041d8:	d1fb      	bne.n	80041d2 <strlen+0x2>
 80041da:	1a18      	subs	r0, r3, r0
 80041dc:	3801      	subs	r0, #1
 80041de:	4770      	bx	lr

080041e0 <memchr>:
 80041e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80041e4:	2a10      	cmp	r2, #16
 80041e6:	db2b      	blt.n	8004240 <memchr+0x60>
 80041e8:	f010 0f07 	tst.w	r0, #7
 80041ec:	d008      	beq.n	8004200 <memchr+0x20>
 80041ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80041f2:	3a01      	subs	r2, #1
 80041f4:	428b      	cmp	r3, r1
 80041f6:	d02d      	beq.n	8004254 <memchr+0x74>
 80041f8:	f010 0f07 	tst.w	r0, #7
 80041fc:	b342      	cbz	r2, 8004250 <memchr+0x70>
 80041fe:	d1f6      	bne.n	80041ee <memchr+0xe>
 8004200:	b4f0      	push	{r4, r5, r6, r7}
 8004202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8004206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800420a:	f022 0407 	bic.w	r4, r2, #7
 800420e:	f07f 0700 	mvns.w	r7, #0
 8004212:	2300      	movs	r3, #0
 8004214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004218:	3c08      	subs	r4, #8
 800421a:	ea85 0501 	eor.w	r5, r5, r1
 800421e:	ea86 0601 	eor.w	r6, r6, r1
 8004222:	fa85 f547 	uadd8	r5, r5, r7
 8004226:	faa3 f587 	sel	r5, r3, r7
 800422a:	fa86 f647 	uadd8	r6, r6, r7
 800422e:	faa5 f687 	sel	r6, r5, r7
 8004232:	b98e      	cbnz	r6, 8004258 <memchr+0x78>
 8004234:	d1ee      	bne.n	8004214 <memchr+0x34>
 8004236:	bcf0      	pop	{r4, r5, r6, r7}
 8004238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800423c:	f002 0207 	and.w	r2, r2, #7
 8004240:	b132      	cbz	r2, 8004250 <memchr+0x70>
 8004242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004246:	3a01      	subs	r2, #1
 8004248:	ea83 0301 	eor.w	r3, r3, r1
 800424c:	b113      	cbz	r3, 8004254 <memchr+0x74>
 800424e:	d1f8      	bne.n	8004242 <memchr+0x62>
 8004250:	2000      	movs	r0, #0
 8004252:	4770      	bx	lr
 8004254:	3801      	subs	r0, #1
 8004256:	4770      	bx	lr
 8004258:	2d00      	cmp	r5, #0
 800425a:	bf06      	itte	eq
 800425c:	4635      	moveq	r5, r6
 800425e:	3803      	subeq	r0, #3
 8004260:	3807      	subne	r0, #7
 8004262:	f015 0f01 	tst.w	r5, #1
 8004266:	d107      	bne.n	8004278 <memchr+0x98>
 8004268:	3001      	adds	r0, #1
 800426a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800426e:	bf02      	ittt	eq
 8004270:	3001      	addeq	r0, #1
 8004272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004276:	3001      	addeq	r0, #1
 8004278:	bcf0      	pop	{r4, r5, r6, r7}
 800427a:	3801      	subs	r0, #1
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop

08004280 <__aeabi_uldivmod>:
 8004280:	b953      	cbnz	r3, 8004298 <__aeabi_uldivmod+0x18>
 8004282:	b94a      	cbnz	r2, 8004298 <__aeabi_uldivmod+0x18>
 8004284:	2900      	cmp	r1, #0
 8004286:	bf08      	it	eq
 8004288:	2800      	cmpeq	r0, #0
 800428a:	bf1c      	itt	ne
 800428c:	f04f 31ff 	movne.w	r1, #4294967295
 8004290:	f04f 30ff 	movne.w	r0, #4294967295
 8004294:	f000 b96e 	b.w	8004574 <__aeabi_idiv0>
 8004298:	f1ad 0c08 	sub.w	ip, sp, #8
 800429c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80042a0:	f000 f806 	bl	80042b0 <__udivmoddi4>
 80042a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80042a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042ac:	b004      	add	sp, #16
 80042ae:	4770      	bx	lr

080042b0 <__udivmoddi4>:
 80042b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042b4:	9d08      	ldr	r5, [sp, #32]
 80042b6:	4604      	mov	r4, r0
 80042b8:	468c      	mov	ip, r1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f040 8083 	bne.w	80043c6 <__udivmoddi4+0x116>
 80042c0:	428a      	cmp	r2, r1
 80042c2:	4617      	mov	r7, r2
 80042c4:	d947      	bls.n	8004356 <__udivmoddi4+0xa6>
 80042c6:	fab2 f282 	clz	r2, r2
 80042ca:	b142      	cbz	r2, 80042de <__udivmoddi4+0x2e>
 80042cc:	f1c2 0020 	rsb	r0, r2, #32
 80042d0:	fa24 f000 	lsr.w	r0, r4, r0
 80042d4:	4091      	lsls	r1, r2
 80042d6:	4097      	lsls	r7, r2
 80042d8:	ea40 0c01 	orr.w	ip, r0, r1
 80042dc:	4094      	lsls	r4, r2
 80042de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80042e2:	0c23      	lsrs	r3, r4, #16
 80042e4:	fbbc f6f8 	udiv	r6, ip, r8
 80042e8:	fa1f fe87 	uxth.w	lr, r7
 80042ec:	fb08 c116 	mls	r1, r8, r6, ip
 80042f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80042f4:	fb06 f10e 	mul.w	r1, r6, lr
 80042f8:	4299      	cmp	r1, r3
 80042fa:	d909      	bls.n	8004310 <__udivmoddi4+0x60>
 80042fc:	18fb      	adds	r3, r7, r3
 80042fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8004302:	f080 8119 	bcs.w	8004538 <__udivmoddi4+0x288>
 8004306:	4299      	cmp	r1, r3
 8004308:	f240 8116 	bls.w	8004538 <__udivmoddi4+0x288>
 800430c:	3e02      	subs	r6, #2
 800430e:	443b      	add	r3, r7
 8004310:	1a5b      	subs	r3, r3, r1
 8004312:	b2a4      	uxth	r4, r4
 8004314:	fbb3 f0f8 	udiv	r0, r3, r8
 8004318:	fb08 3310 	mls	r3, r8, r0, r3
 800431c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004320:	fb00 fe0e 	mul.w	lr, r0, lr
 8004324:	45a6      	cmp	lr, r4
 8004326:	d909      	bls.n	800433c <__udivmoddi4+0x8c>
 8004328:	193c      	adds	r4, r7, r4
 800432a:	f100 33ff 	add.w	r3, r0, #4294967295
 800432e:	f080 8105 	bcs.w	800453c <__udivmoddi4+0x28c>
 8004332:	45a6      	cmp	lr, r4
 8004334:	f240 8102 	bls.w	800453c <__udivmoddi4+0x28c>
 8004338:	3802      	subs	r0, #2
 800433a:	443c      	add	r4, r7
 800433c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004340:	eba4 040e 	sub.w	r4, r4, lr
 8004344:	2600      	movs	r6, #0
 8004346:	b11d      	cbz	r5, 8004350 <__udivmoddi4+0xa0>
 8004348:	40d4      	lsrs	r4, r2
 800434a:	2300      	movs	r3, #0
 800434c:	e9c5 4300 	strd	r4, r3, [r5]
 8004350:	4631      	mov	r1, r6
 8004352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004356:	b902      	cbnz	r2, 800435a <__udivmoddi4+0xaa>
 8004358:	deff      	udf	#255	; 0xff
 800435a:	fab2 f282 	clz	r2, r2
 800435e:	2a00      	cmp	r2, #0
 8004360:	d150      	bne.n	8004404 <__udivmoddi4+0x154>
 8004362:	1bcb      	subs	r3, r1, r7
 8004364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8004368:	fa1f f887 	uxth.w	r8, r7
 800436c:	2601      	movs	r6, #1
 800436e:	fbb3 fcfe 	udiv	ip, r3, lr
 8004372:	0c21      	lsrs	r1, r4, #16
 8004374:	fb0e 331c 	mls	r3, lr, ip, r3
 8004378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800437c:	fb08 f30c 	mul.w	r3, r8, ip
 8004380:	428b      	cmp	r3, r1
 8004382:	d907      	bls.n	8004394 <__udivmoddi4+0xe4>
 8004384:	1879      	adds	r1, r7, r1
 8004386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800438a:	d202      	bcs.n	8004392 <__udivmoddi4+0xe2>
 800438c:	428b      	cmp	r3, r1
 800438e:	f200 80e9 	bhi.w	8004564 <__udivmoddi4+0x2b4>
 8004392:	4684      	mov	ip, r0
 8004394:	1ac9      	subs	r1, r1, r3
 8004396:	b2a3      	uxth	r3, r4
 8004398:	fbb1 f0fe 	udiv	r0, r1, lr
 800439c:	fb0e 1110 	mls	r1, lr, r0, r1
 80043a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80043a4:	fb08 f800 	mul.w	r8, r8, r0
 80043a8:	45a0      	cmp	r8, r4
 80043aa:	d907      	bls.n	80043bc <__udivmoddi4+0x10c>
 80043ac:	193c      	adds	r4, r7, r4
 80043ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80043b2:	d202      	bcs.n	80043ba <__udivmoddi4+0x10a>
 80043b4:	45a0      	cmp	r8, r4
 80043b6:	f200 80d9 	bhi.w	800456c <__udivmoddi4+0x2bc>
 80043ba:	4618      	mov	r0, r3
 80043bc:	eba4 0408 	sub.w	r4, r4, r8
 80043c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80043c4:	e7bf      	b.n	8004346 <__udivmoddi4+0x96>
 80043c6:	428b      	cmp	r3, r1
 80043c8:	d909      	bls.n	80043de <__udivmoddi4+0x12e>
 80043ca:	2d00      	cmp	r5, #0
 80043cc:	f000 80b1 	beq.w	8004532 <__udivmoddi4+0x282>
 80043d0:	2600      	movs	r6, #0
 80043d2:	e9c5 0100 	strd	r0, r1, [r5]
 80043d6:	4630      	mov	r0, r6
 80043d8:	4631      	mov	r1, r6
 80043da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043de:	fab3 f683 	clz	r6, r3
 80043e2:	2e00      	cmp	r6, #0
 80043e4:	d14a      	bne.n	800447c <__udivmoddi4+0x1cc>
 80043e6:	428b      	cmp	r3, r1
 80043e8:	d302      	bcc.n	80043f0 <__udivmoddi4+0x140>
 80043ea:	4282      	cmp	r2, r0
 80043ec:	f200 80b8 	bhi.w	8004560 <__udivmoddi4+0x2b0>
 80043f0:	1a84      	subs	r4, r0, r2
 80043f2:	eb61 0103 	sbc.w	r1, r1, r3
 80043f6:	2001      	movs	r0, #1
 80043f8:	468c      	mov	ip, r1
 80043fa:	2d00      	cmp	r5, #0
 80043fc:	d0a8      	beq.n	8004350 <__udivmoddi4+0xa0>
 80043fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8004402:	e7a5      	b.n	8004350 <__udivmoddi4+0xa0>
 8004404:	f1c2 0320 	rsb	r3, r2, #32
 8004408:	fa20 f603 	lsr.w	r6, r0, r3
 800440c:	4097      	lsls	r7, r2
 800440e:	fa01 f002 	lsl.w	r0, r1, r2
 8004412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8004416:	40d9      	lsrs	r1, r3
 8004418:	4330      	orrs	r0, r6
 800441a:	0c03      	lsrs	r3, r0, #16
 800441c:	fbb1 f6fe 	udiv	r6, r1, lr
 8004420:	fa1f f887 	uxth.w	r8, r7
 8004424:	fb0e 1116 	mls	r1, lr, r6, r1
 8004428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800442c:	fb06 f108 	mul.w	r1, r6, r8
 8004430:	4299      	cmp	r1, r3
 8004432:	fa04 f402 	lsl.w	r4, r4, r2
 8004436:	d909      	bls.n	800444c <__udivmoddi4+0x19c>
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	f106 3cff 	add.w	ip, r6, #4294967295
 800443e:	f080 808d 	bcs.w	800455c <__udivmoddi4+0x2ac>
 8004442:	4299      	cmp	r1, r3
 8004444:	f240 808a 	bls.w	800455c <__udivmoddi4+0x2ac>
 8004448:	3e02      	subs	r6, #2
 800444a:	443b      	add	r3, r7
 800444c:	1a5b      	subs	r3, r3, r1
 800444e:	b281      	uxth	r1, r0
 8004450:	fbb3 f0fe 	udiv	r0, r3, lr
 8004454:	fb0e 3310 	mls	r3, lr, r0, r3
 8004458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800445c:	fb00 f308 	mul.w	r3, r0, r8
 8004460:	428b      	cmp	r3, r1
 8004462:	d907      	bls.n	8004474 <__udivmoddi4+0x1c4>
 8004464:	1879      	adds	r1, r7, r1
 8004466:	f100 3cff 	add.w	ip, r0, #4294967295
 800446a:	d273      	bcs.n	8004554 <__udivmoddi4+0x2a4>
 800446c:	428b      	cmp	r3, r1
 800446e:	d971      	bls.n	8004554 <__udivmoddi4+0x2a4>
 8004470:	3802      	subs	r0, #2
 8004472:	4439      	add	r1, r7
 8004474:	1acb      	subs	r3, r1, r3
 8004476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800447a:	e778      	b.n	800436e <__udivmoddi4+0xbe>
 800447c:	f1c6 0c20 	rsb	ip, r6, #32
 8004480:	fa03 f406 	lsl.w	r4, r3, r6
 8004484:	fa22 f30c 	lsr.w	r3, r2, ip
 8004488:	431c      	orrs	r4, r3
 800448a:	fa20 f70c 	lsr.w	r7, r0, ip
 800448e:	fa01 f306 	lsl.w	r3, r1, r6
 8004492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8004496:	fa21 f10c 	lsr.w	r1, r1, ip
 800449a:	431f      	orrs	r7, r3
 800449c:	0c3b      	lsrs	r3, r7, #16
 800449e:	fbb1 f9fe 	udiv	r9, r1, lr
 80044a2:	fa1f f884 	uxth.w	r8, r4
 80044a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80044aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80044ae:	fb09 fa08 	mul.w	sl, r9, r8
 80044b2:	458a      	cmp	sl, r1
 80044b4:	fa02 f206 	lsl.w	r2, r2, r6
 80044b8:	fa00 f306 	lsl.w	r3, r0, r6
 80044bc:	d908      	bls.n	80044d0 <__udivmoddi4+0x220>
 80044be:	1861      	adds	r1, r4, r1
 80044c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80044c4:	d248      	bcs.n	8004558 <__udivmoddi4+0x2a8>
 80044c6:	458a      	cmp	sl, r1
 80044c8:	d946      	bls.n	8004558 <__udivmoddi4+0x2a8>
 80044ca:	f1a9 0902 	sub.w	r9, r9, #2
 80044ce:	4421      	add	r1, r4
 80044d0:	eba1 010a 	sub.w	r1, r1, sl
 80044d4:	b2bf      	uxth	r7, r7
 80044d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80044da:	fb0e 1110 	mls	r1, lr, r0, r1
 80044de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80044e2:	fb00 f808 	mul.w	r8, r0, r8
 80044e6:	45b8      	cmp	r8, r7
 80044e8:	d907      	bls.n	80044fa <__udivmoddi4+0x24a>
 80044ea:	19e7      	adds	r7, r4, r7
 80044ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80044f0:	d22e      	bcs.n	8004550 <__udivmoddi4+0x2a0>
 80044f2:	45b8      	cmp	r8, r7
 80044f4:	d92c      	bls.n	8004550 <__udivmoddi4+0x2a0>
 80044f6:	3802      	subs	r0, #2
 80044f8:	4427      	add	r7, r4
 80044fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80044fe:	eba7 0708 	sub.w	r7, r7, r8
 8004502:	fba0 8902 	umull	r8, r9, r0, r2
 8004506:	454f      	cmp	r7, r9
 8004508:	46c6      	mov	lr, r8
 800450a:	4649      	mov	r1, r9
 800450c:	d31a      	bcc.n	8004544 <__udivmoddi4+0x294>
 800450e:	d017      	beq.n	8004540 <__udivmoddi4+0x290>
 8004510:	b15d      	cbz	r5, 800452a <__udivmoddi4+0x27a>
 8004512:	ebb3 020e 	subs.w	r2, r3, lr
 8004516:	eb67 0701 	sbc.w	r7, r7, r1
 800451a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800451e:	40f2      	lsrs	r2, r6
 8004520:	ea4c 0202 	orr.w	r2, ip, r2
 8004524:	40f7      	lsrs	r7, r6
 8004526:	e9c5 2700 	strd	r2, r7, [r5]
 800452a:	2600      	movs	r6, #0
 800452c:	4631      	mov	r1, r6
 800452e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004532:	462e      	mov	r6, r5
 8004534:	4628      	mov	r0, r5
 8004536:	e70b      	b.n	8004350 <__udivmoddi4+0xa0>
 8004538:	4606      	mov	r6, r0
 800453a:	e6e9      	b.n	8004310 <__udivmoddi4+0x60>
 800453c:	4618      	mov	r0, r3
 800453e:	e6fd      	b.n	800433c <__udivmoddi4+0x8c>
 8004540:	4543      	cmp	r3, r8
 8004542:	d2e5      	bcs.n	8004510 <__udivmoddi4+0x260>
 8004544:	ebb8 0e02 	subs.w	lr, r8, r2
 8004548:	eb69 0104 	sbc.w	r1, r9, r4
 800454c:	3801      	subs	r0, #1
 800454e:	e7df      	b.n	8004510 <__udivmoddi4+0x260>
 8004550:	4608      	mov	r0, r1
 8004552:	e7d2      	b.n	80044fa <__udivmoddi4+0x24a>
 8004554:	4660      	mov	r0, ip
 8004556:	e78d      	b.n	8004474 <__udivmoddi4+0x1c4>
 8004558:	4681      	mov	r9, r0
 800455a:	e7b9      	b.n	80044d0 <__udivmoddi4+0x220>
 800455c:	4666      	mov	r6, ip
 800455e:	e775      	b.n	800444c <__udivmoddi4+0x19c>
 8004560:	4630      	mov	r0, r6
 8004562:	e74a      	b.n	80043fa <__udivmoddi4+0x14a>
 8004564:	f1ac 0c02 	sub.w	ip, ip, #2
 8004568:	4439      	add	r1, r7
 800456a:	e713      	b.n	8004394 <__udivmoddi4+0xe4>
 800456c:	3802      	subs	r0, #2
 800456e:	443c      	add	r4, r7
 8004570:	e724      	b.n	80043bc <__udivmoddi4+0x10c>
 8004572:	bf00      	nop

08004574 <__aeabi_idiv0>:
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop

08004578 <AppInit>:
**            software program initialization.
** \return    none.
**
****************************************************************************************/
void AppInit(void)
{
 8004578:	b508      	push	{r3, lr}
  /* Initialize the timer driver. */
  TimerInit();
 800457a:	f000 f887 	bl	800468c <TimerInit>
  /* Initialize the led driver. */
  LedInit();
 800457e:	f000 f82d 	bl	80045dc <LedInit>
  /* initialize the bootloader interface */
  //BootComInit();
} /*** end of AppInit ***/
 8004582:	bd08      	pop	{r3, pc}

08004584 <AppTask>:
**            continuously in the program loop.
** \return    none.
**
****************************************************************************************/
void AppTask(void)
{
 8004584:	b508      	push	{r3, lr}
  /* Toggle LED with a fixed frequency. */
  LedToggle();
 8004586:	f000 f849 	bl	800461c <LedToggle>
  /* check for bootloader activation request */
  BootComCheckActivationRequest();
 800458a:	f000 f823 	bl	80045d4 <BootComCheckActivationRequest>
} /*** end of AppTask ***/
 800458e:	bd08      	pop	{r3, pc}

08004590 <BootActivate>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004590:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004594:	4905      	ldr	r1, [pc, #20]	; (80045ac <BootActivate+0x1c>)
 8004596:	68ca      	ldr	r2, [r1, #12]
 8004598:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800459c:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <BootActivate+0x20>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	60cb      	str	r3, [r1, #12]
 80045a2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80045a6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80045a8:	e7fd      	b.n	80045a6 <BootActivate+0x16>
 80045aa:	bf00      	nop
 80045ac:	e000ed00 	.word	0xe000ed00
 80045b0:	05fa0004 	.word	0x05fa0004

080045b4 <BootComRs232CheckActivationRequest>:
**            bootloader should be activated and, if so, activates it.
** \return    none.
**
****************************************************************************************/
static void BootComRs232CheckActivationRequest(void)
{
 80045b4:	b508      	push	{r3, lr}
  static unsigned char xcpCtoReqPacket[BOOT_COM_RS232_RX_MAX_DATA+1];
  static unsigned char xcpCtoRxLength;

  if (Rs232ReceivePacket(xcpCtoReqPacket, &xcpCtoRxLength)) {
 80045b6:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <BootComRs232CheckActivationRequest+0x14>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4904      	ldr	r1, [pc, #16]	; (80045cc <BootComRs232CheckActivationRequest+0x18>)
 80045bc:	4804      	ldr	r0, [pc, #16]	; (80045d0 <BootComRs232CheckActivationRequest+0x1c>)
 80045be:	4798      	blx	r3
 80045c0:	b900      	cbnz	r0, 80045c4 <BootComRs232CheckActivationRequest+0x10>
//         */
//        xcpCtoRxInProgress = 0;
//      }
//    }
//  }
} /*** end of BootComRs232CheckActivationRequest ***/
 80045c2:	bd08      	pop	{r3, pc}
    BootActivate();
 80045c4:	f7ff ffe4 	bl	8004590 <BootActivate>
 80045c8:	08000194 	.word	0x08000194
 80045cc:	200000dd 	.word	0x200000dd
 80045d0:	2000009c 	.word	0x2000009c

080045d4 <BootComCheckActivationRequest>:
{
 80045d4:	b508      	push	{r3, lr}
  BootComRs232CheckActivationRequest();
 80045d6:	f7ff ffed 	bl	80045b4 <BootComRs232CheckActivationRequest>
} /*** end of BootComCheckActivationRequest ***/
 80045da:	bd08      	pop	{r3, pc}

080045dc <LedInit>:
** \brief     Initializes the LED.
** \return    none.
**
****************************************************************************************/
void LedInit(void)
{
 80045dc:	b510      	push	{r4, lr}
  /* Note that the initialization of the LED GPIO pin is done in HAL_MspInit(). All that
   * is left to do here is to make sure the LED is turned off after initialization.
   */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80045de:	2201      	movs	r2, #1
 80045e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045e4:	480b      	ldr	r0, [pc, #44]	; (8004614 <LedInit+0x38>)
 80045e6:	f001 f93f 	bl	8005868 <HAL_GPIO_WritePin>

  //SET_LED3_ORANGE(GPIO_PIN_SET);
  SET_LED4_GREEN(GPIO_PIN_SET);
 80045ea:	4c0b      	ldr	r4, [pc, #44]	; (8004618 <LedInit+0x3c>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80045f2:	4620      	mov	r0, r4
 80045f4:	f001 f938 	bl	8005868 <HAL_GPIO_WritePin>
  SET_LED5_RED(GPIO_PIN_SET);
 80045f8:	2201      	movs	r2, #1
 80045fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045fe:	4620      	mov	r0, r4
 8004600:	f001 f932 	bl	8005868 <HAL_GPIO_WritePin>
  SET_LED6_BLUE(GPIO_PIN_SET);
 8004604:	2201      	movs	r2, #1
 8004606:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800460a:	4620      	mov	r0, r4
 800460c:	f001 f92c 	bl	8005868 <HAL_GPIO_WritePin>
} /*** end of LedInit ***/
 8004610:	bd10      	pop	{r4, pc}
 8004612:	bf00      	nop
 8004614:	40020800 	.word	0x40020800
 8004618:	40020c00 	.word	0x40020c00

0800461c <LedToggle>:
** \brief     Toggles the LED at a fixed time interval.
** \return    none.
**
****************************************************************************************/
void LedToggle(void)
{
 800461c:	b570      	push	{r4, r5, r6, lr}
  static unsigned char led_toggle_state = 0;
  static unsigned long timer_counter_last = 0;
  unsigned long timer_counter_now;

  /* check if toggle interval time passed */
  timer_counter_now = TimerGet();
 800461e:	f000 f836 	bl	800468e <TimerGet>
  if ( (timer_counter_now - timer_counter_last) < LED_TOGGLE_MS)
 8004622:	4b17      	ldr	r3, [pc, #92]	; (8004680 <LedToggle+0x64>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	1ac3      	subs	r3, r0, r3
 8004628:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800462c:	d315      	bcc.n	800465a <LedToggle+0x3e>
 800462e:	4604      	mov	r4, r0
    /* not yet time to toggle */
    return;
  }

  /* determine toggle action */
  if (led_toggle_state == 0)
 8004630:	4b14      	ldr	r3, [pc, #80]	; (8004684 <LedToggle+0x68>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	b993      	cbnz	r3, 800465c <LedToggle+0x40>
  {
    led_toggle_state = 1;
 8004636:	2501      	movs	r5, #1
 8004638:	4b12      	ldr	r3, [pc, #72]	; (8004684 <LedToggle+0x68>)
 800463a:	701d      	strb	r5, [r3, #0]
    /* turn the LED on */
    //SET_LED3_ORANGE(GPIO_PIN_RESET);
    SET_LED4_GREEN(GPIO_PIN_SET);
 800463c:	4e12      	ldr	r6, [pc, #72]	; (8004688 <LedToggle+0x6c>)
 800463e:	462a      	mov	r2, r5
 8004640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004644:	4630      	mov	r0, r6
 8004646:	f001 f90f 	bl	8005868 <HAL_GPIO_WritePin>
    //SET_LED5_RED(GPIO_PIN_RESET);
    SET_LED6_BLUE(GPIO_PIN_SET);
 800464a:	462a      	mov	r2, r5
 800464c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004650:	4630      	mov	r0, r6
 8004652:	f001 f909 	bl	8005868 <HAL_GPIO_WritePin>
    //SET_LED5_RED(GPIO_PIN_SET);
    SET_LED6_BLUE(GPIO_PIN_RESET);
  }

  /* store toggle time to determine next toggle interval */
  timer_counter_last = timer_counter_now;
 8004656:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <LedToggle+0x64>)
 8004658:	601c      	str	r4, [r3, #0]
} /*** end of LedToggle ***/
 800465a:	bd70      	pop	{r4, r5, r6, pc}
    led_toggle_state = 0;
 800465c:	2500      	movs	r5, #0
 800465e:	4b09      	ldr	r3, [pc, #36]	; (8004684 <LedToggle+0x68>)
 8004660:	701d      	strb	r5, [r3, #0]
    SET_LED4_GREEN(GPIO_PIN_RESET);
 8004662:	4e09      	ldr	r6, [pc, #36]	; (8004688 <LedToggle+0x6c>)
 8004664:	462a      	mov	r2, r5
 8004666:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800466a:	4630      	mov	r0, r6
 800466c:	f001 f8fc 	bl	8005868 <HAL_GPIO_WritePin>
    SET_LED6_BLUE(GPIO_PIN_RESET);
 8004670:	462a      	mov	r2, r5
 8004672:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004676:	4630      	mov	r0, r6
 8004678:	f001 f8f6 	bl	8005868 <HAL_GPIO_WritePin>
 800467c:	e7eb      	b.n	8004656 <LedToggle+0x3a>
 800467e:	bf00      	nop
 8004680:	200000e0 	.word	0x200000e0
 8004684:	200000de 	.word	0x200000de
 8004688:	40020c00 	.word	0x40020c00

0800468c <TimerInit>:
void TimerInit(void)
{
  /* The HAL initialization already configured the Systick interrupt to generate an
   * interrupt every 1 millisecond. Nothing more needs to be done here.
   */
} /*** end of TimerInit ***/
 800468c:	4770      	bx	lr

0800468e <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
unsigned long TimerGet(void)
{
 800468e:	b508      	push	{r3, lr}
  /* Read and return the tick counter value. */
  return HAL_GetTick();
 8004690:	f000 fa7c 	bl	8004b8c <HAL_GetTick>
} /*** end of TimerGet ***/
 8004694:	bd08      	pop	{r3, pc}
	...

08004698 <VectorBase_Config>:
   * c-startup code.
   */
  extern const unsigned long g_pfnVectors[];

  /* Remap the vector table to where the vector table is located for this program. */
  SCB->VTOR = (unsigned long)&g_pfnVectors[0];
 8004698:	4a01      	ldr	r2, [pc, #4]	; (80046a0 <VectorBase_Config+0x8>)
 800469a:	4b02      	ldr	r3, [pc, #8]	; (80046a4 <VectorBase_Config+0xc>)
 800469c:	609a      	str	r2, [r3, #8]
}
 800469e:	4770      	bx	lr
 80046a0:	08004000 	.word	0x08004000
 80046a4:	e000ed00 	.word	0xe000ed00

080046a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	b08c      	sub	sp, #48	; 0x30
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ac:	2400      	movs	r4, #0
 80046ae:	940b      	str	r4, [sp, #44]	; 0x2c
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80046b0:	4b29      	ldr	r3, [pc, #164]	; (8004758 <MX_GPIO_Init+0xb0>)
 80046b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b4:	f042 0204 	orr.w	r2, r2, #4
 80046b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80046ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046bc:	f002 0204 	and.w	r2, r2, #4
 80046c0:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 80046c2:	9a05      	ldr	r2, [sp, #20]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80046c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80046cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ce:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80046d2:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80046d4:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80046d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d8:	f042 0201 	orr.w	r2, r2, #1
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80046de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e0:	f002 0201 	and.w	r2, r2, #1
 80046e4:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 80046e6:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80046e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ea:	f042 0202 	orr.w	r2, r2, #2
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80046f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f2:	f002 0202 	and.w	r2, r2, #2
 80046f6:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80046f8:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80046fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046fc:	f042 0208 	orr.w	r2, r2, #8
 8004700:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	f003 0308 	and.w	r3, r3, #8
 8004708:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800470a:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800470c:	4813      	ldr	r0, [pc, #76]	; (800475c <MX_GPIO_Init+0xb4>)
 800470e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004712:	6183      	str	r3, [r0, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004714:	4e12      	ldr	r6, [pc, #72]	; (8004760 <MX_GPIO_Init+0xb8>)
 8004716:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800471a:	61b2      	str	r2, [r6, #24]

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800471c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800471e:	2501      	movs	r5, #1
 8004720:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004722:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004724:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004726:	940a      	str	r4, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004728:	a906      	add	r1, sp, #24
 800472a:	f001 f8a9 	bl	8005880 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800472e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004730:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004732:	940a      	str	r4, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004734:	a906      	add	r1, sp, #24
 8004736:	480b      	ldr	r0, [pc, #44]	; (8004764 <MX_GPIO_Init+0xbc>)
 8004738:	f001 f8a2 	bl	8005880 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800473c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004740:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004742:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004744:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004746:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004748:	940a      	str	r4, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800474a:	a906      	add	r1, sp, #24
 800474c:	4630      	mov	r0, r6
 800474e:	f001 f897 	bl	8005880 <LL_GPIO_Init>

}
 8004752:	b00c      	add	sp, #48	; 0x30
 8004754:	bd70      	pop	{r4, r5, r6, pc}
 8004756:	bf00      	nop
 8004758:	40023800 	.word	0x40023800
 800475c:	40020800 	.word	0x40020800
 8004760:	40020c00 	.word	0x40020c00
 8004764:	40020000 	.word	0x40020000

08004768 <MX_USART6_UART_Init>:
{
 8004768:	b510      	push	{r4, lr}
 800476a:	b090      	sub	sp, #64	; 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800476c:	2400      	movs	r4, #0
 800476e:	9409      	str	r4, [sp, #36]	; 0x24
 8004770:	940a      	str	r4, [sp, #40]	; 0x28
 8004772:	940b      	str	r4, [sp, #44]	; 0x2c
 8004774:	940c      	str	r4, [sp, #48]	; 0x30
 8004776:	940d      	str	r4, [sp, #52]	; 0x34
 8004778:	940e      	str	r4, [sp, #56]	; 0x38
 800477a:	940f      	str	r4, [sp, #60]	; 0x3c
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800477c:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <MX_USART6_UART_Init+0x90>)
 800477e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004780:	f042 0220 	orr.w	r2, r2, #32
 8004784:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004786:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004788:	f002 0220 	and.w	r2, r2, #32
 800478c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800478e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004792:	f042 0204 	orr.w	r2, r2, #4
 8004796:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80047a0:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80047a2:	23c0      	movs	r3, #192	; 0xc0
 80047a4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80047a6:	2302      	movs	r3, #2
 80047a8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80047aa:	2303      	movs	r3, #3
 80047ac:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80047ae:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80047b0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80047b2:	2308      	movs	r3, #8
 80047b4:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047b6:	a903      	add	r1, sp, #12
 80047b8:	4810      	ldr	r0, [pc, #64]	; (80047fc <MX_USART6_UART_Init+0x94>)
 80047ba:	f001 f861 	bl	8005880 <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 115200;
 80047be:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80047c2:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80047c4:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80047c6:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80047c8:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80047ca:	230c      	movs	r3, #12
 80047cc:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80047ce:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80047d0:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART6, &USART_InitStruct);
 80047d2:	4c0b      	ldr	r4, [pc, #44]	; (8004800 <MX_USART6_UART_Init+0x98>)
 80047d4:	a909      	add	r1, sp, #36	; 0x24
 80047d6:	4620      	mov	r0, r4
 80047d8:	f001 f95a 	bl	8005a90 <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047dc:	6923      	ldr	r3, [r4, #16]
 80047de:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80047e2:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80047e4:	6963      	ldr	r3, [r4, #20]
 80047e6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80047ea:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80047ec:	68e3      	ldr	r3, [r4, #12]
 80047ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047f2:	60e3      	str	r3, [r4, #12]
}
 80047f4:	b010      	add	sp, #64	; 0x40
 80047f6:	bd10      	pop	{r4, pc}
 80047f8:	40023800 	.word	0x40023800
 80047fc:	40020800 	.word	0x40020800
 8004800:	40011400 	.word	0x40011400

08004804 <__io_putchar>:
{
 8004804:	b510      	push	{r4, lr}
 8004806:	4604      	mov	r4, r0
  Rs232TransmitByte(ch);
 8004808:	4b02      	ldr	r3, [pc, #8]	; (8004814 <__io_putchar+0x10>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	b2c0      	uxtb	r0, r0
 800480e:	4798      	blx	r3
}
 8004810:	4620      	mov	r0, r4
 8004812:	bd10      	pop	{r4, pc}
 8004814:	0800018c 	.word	0x0800018c

08004818 <SystemClock_Config>:
{
 8004818:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800481a:	4a2e      	ldr	r2, [pc, #184]	; (80048d4 <SystemClock_Config+0xbc>)
 800481c:	6813      	ldr	r3, [r2, #0]
 800481e:	f023 0307 	bic.w	r3, r3, #7
 8004822:	f043 0305 	orr.w	r3, r3, #5
 8004826:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004828:	4b2a      	ldr	r3, [pc, #168]	; (80048d4 <SystemClock_Config+0xbc>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0307 	and.w	r3, r3, #7
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8004830:	2b05      	cmp	r3, #5
 8004832:	d1f9      	bne.n	8004828 <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8004834:	4a28      	ldr	r2, [pc, #160]	; (80048d8 <SystemClock_Config+0xc0>)
 8004836:	6813      	ldr	r3, [r2, #0]
 8004838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800483c:	6013      	str	r3, [r2, #0]
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800483e:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8004842:	6813      	ldr	r3, [r2, #0]
 8004844:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800484c:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800484e:	6813      	ldr	r3, [r2, #0]
 8004850:	f043 0301 	orr.w	r3, r3, #1
 8004854:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004856:	4b21      	ldr	r3, [pc, #132]	; (80048dc <SystemClock_Config+0xc4>)
 8004858:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSI_IsReady() != 1)
 800485a:	f013 0f02 	tst.w	r3, #2
 800485e:	d0fa      	beq.n	8004856 <SystemClock_Config+0x3e>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8004860:	4a1e      	ldr	r2, [pc, #120]	; (80048dc <SystemClock_Config+0xc4>)
 8004862:	6851      	ldr	r1, [r2, #4]
 8004864:	4b1e      	ldr	r3, [pc, #120]	; (80048e0 <SystemClock_Config+0xc8>)
 8004866:	400b      	ands	r3, r1
 8004868:	f443 5328 	orr.w	r3, r3, #10752	; 0x2a00
 800486c:	f043 0308 	orr.w	r3, r3, #8
 8004870:	6053      	str	r3, [r2, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8004872:	6853      	ldr	r3, [r2, #4]
 8004874:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004878:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800487a:	6813      	ldr	r3, [r2, #0]
 800487c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004880:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004882:	4b16      	ldr	r3, [pc, #88]	; (80048dc <SystemClock_Config+0xc4>)
 8004884:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 8004886:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800488a:	d0fa      	beq.n	8004882 <SystemClock_Config+0x6a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800488c:	4b13      	ldr	r3, [pc, #76]	; (80048dc <SystemClock_Config+0xc4>)
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004894:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800489c:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80048a0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80048a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ac:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	f022 0203 	bic.w	r2, r2, #3
 80048b4:	f042 0202 	orr.w	r2, r2, #2
 80048b8:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80048ba:	4b08      	ldr	r3, [pc, #32]	; (80048dc <SystemClock_Config+0xc4>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d1f9      	bne.n	80048ba <SystemClock_Config+0xa2>
  LL_SetSystemCoreClock(168000000);
 80048c6:	4807      	ldr	r0, [pc, #28]	; (80048e4 <SystemClock_Config+0xcc>)
 80048c8:	f001 f99e 	bl	8005c08 <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80048cc:	2000      	movs	r0, #0
 80048ce:	f000 f911 	bl	8004af4 <HAL_InitTick>
}
 80048d2:	bd08      	pop	{r3, pc}
 80048d4:	40023c00 	.word	0x40023c00
 80048d8:	40007000 	.word	0x40007000
 80048dc:	40023800 	.word	0x40023800
 80048e0:	ffbf8000 	.word	0xffbf8000
 80048e4:	0a037a00 	.word	0x0a037a00

080048e8 <main>:
{
 80048e8:	b530      	push	{r4, r5, lr}
 80048ea:	b085      	sub	sp, #20
  VectorBase_Config();
 80048ec:	f7ff fed4 	bl	8004698 <VectorBase_Config>
  HAL_Init();
 80048f0:	f000 f926 	bl	8004b40 <HAL_Init>
  SystemClock_Config();
 80048f4:	f7ff ff90 	bl	8004818 <SystemClock_Config>
  MX_GPIO_Init();
 80048f8:	f7ff fed6 	bl	80046a8 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80048fc:	f7ff ff34 	bl	8004768 <MX_USART6_UART_Init>
  MX_LWIP_Init();
 8004900:	f001 f988 	bl	8005c14 <MX_LWIP_Init>
  AppInit();
 8004904:	f7ff fe38 	bl	8004578 <AppInit>
  printf("... Main2 start ... \n");
 8004908:	4816      	ldr	r0, [pc, #88]	; (8004964 <main+0x7c>)
 800490a:	f00f fd19 	bl	8014340 <puts>
  printf("... Mac ... %2.2X:%2.2X:%2.2X:%2.2X:%2.2X:%2.2X\n", gnetif.hwaddr[0], gnetif.hwaddr[1],
 800490e:	4c16      	ldr	r4, [pc, #88]	; (8004968 <main+0x80>)
		  gnetif.hwaddr[2], gnetif.hwaddr[3], gnetif.hwaddr[4], gnetif.hwaddr[5]);
 8004910:	f894 30db 	ldrb.w	r3, [r4, #219]	; 0xdb
 8004914:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
 8004918:	f894 10dd 	ldrb.w	r1, [r4, #221]	; 0xdd
  printf("... Mac ... %2.2X:%2.2X:%2.2X:%2.2X:%2.2X:%2.2X\n", gnetif.hwaddr[0], gnetif.hwaddr[1],
 800491c:	9102      	str	r1, [sp, #8]
 800491e:	9201      	str	r2, [sp, #4]
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	f894 30da 	ldrb.w	r3, [r4, #218]	; 0xda
 8004926:	f894 20d9 	ldrb.w	r2, [r4, #217]	; 0xd9
 800492a:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
 800492e:	480f      	ldr	r0, [pc, #60]	; (800496c <main+0x84>)
 8004930:	f00f fc80 	bl	8014234 <iprintf>
  u32_t ip = gnetif.ip_addr.u_addr.ip4.addr;
 8004934:	6865      	ldr	r5, [r4, #4]
 8004936:	e003      	b.n	8004940 <main+0x58>
    MX_LWIP_Process();
 8004938:	f001 f9b4 	bl	8005ca4 <MX_LWIP_Process>
    AppTask();
 800493c:	f7ff fe22 	bl	8004584 <AppTask>
	if (!ip && gnetif.ip_addr.u_addr.ip4.addr) {
 8004940:	2d00      	cmp	r5, #0
 8004942:	d1f9      	bne.n	8004938 <main+0x50>
 8004944:	4b08      	ldr	r3, [pc, #32]	; (8004968 <main+0x80>)
 8004946:	685c      	ldr	r4, [r3, #4]
 8004948:	2c00      	cmp	r4, #0
 800494a:	d0f5      	beq.n	8004938 <main+0x50>
			  (u8_t)(ip >> 24));
 800494c:	0e23      	lsrs	r3, r4, #24
	  printf("... IP  ... %d.%d.%d.%d\n",
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8004954:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8004958:	b2e1      	uxtb	r1, r4
 800495a:	4805      	ldr	r0, [pc, #20]	; (8004970 <main+0x88>)
 800495c:	f00f fc6a 	bl	8014234 <iprintf>
	  ip = gnetif.ip_addr.u_addr.ip4.addr;
 8004960:	4625      	mov	r5, r4
 8004962:	e7e9      	b.n	8004938 <main+0x50>
 8004964:	0801536c 	.word	0x0801536c
 8004968:	20000804 	.word	0x20000804
 800496c:	08015384 	.word	0x08015384
 8004970:	080153b8 	.word	0x080153b8

08004974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004974:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004976:	2100      	movs	r1, #0
 8004978:	9100      	str	r1, [sp, #0]
 800497a:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <HAL_MspInit+0x34>)
 800497c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800497e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004982:	645a      	str	r2, [r3, #68]	; 0x44
 8004984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004986:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800498a:	9200      	str	r2, [sp, #0]
 800498c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800498e:	9101      	str	r1, [sp, #4]
 8004990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004992:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004996:	641a      	str	r2, [r3, #64]	; 0x40
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049a2:	b002      	add	sp, #8
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40023800 	.word	0x40023800

080049ac <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80049ac:	4770      	bx	lr

080049ae <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049ae:	e7fe      	b.n	80049ae <HardFault_Handler>

080049b0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049b0:	e7fe      	b.n	80049b0 <MemManage_Handler>

080049b2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049b2:	e7fe      	b.n	80049b2 <BusFault_Handler>

080049b4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049b4:	e7fe      	b.n	80049b4 <UsageFault_Handler>

080049b6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049b6:	4770      	bx	lr

080049b8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049b8:	4770      	bx	lr

080049ba <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049ba:	4770      	bx	lr

080049bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049be:	f000 f8d9 	bl	8004b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049c2:	bd08      	pop	{r3, pc}

080049c4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80049c4:	2001      	movs	r0, #1
 80049c6:	4770      	bx	lr

080049c8 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 80049c8:	4b02      	ldr	r3, [pc, #8]	; (80049d4 <_kill+0xc>)
 80049ca:	2216      	movs	r2, #22
 80049cc:	601a      	str	r2, [r3, #0]
	return -1;
}
 80049ce:	f04f 30ff 	mov.w	r0, #4294967295
 80049d2:	4770      	bx	lr
 80049d4:	20007fb8 	.word	0x20007fb8

080049d8 <_exit>:

void _exit (int status)
{
 80049d8:	b508      	push	{r3, lr}
	_kill(status, -1);
 80049da:	f04f 31ff 	mov.w	r1, #4294967295
 80049de:	f7ff fff3 	bl	80049c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80049e2:	e7fe      	b.n	80049e2 <_exit+0xa>

080049e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	460c      	mov	r4, r1
 80049e8:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049ea:	2500      	movs	r5, #0
 80049ec:	42b5      	cmp	r5, r6
 80049ee:	da07      	bge.n	8004a00 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 80049f0:	f3af 8000 	nop.w
 80049f4:	4621      	mov	r1, r4
 80049f6:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049fa:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 80049fc:	460c      	mov	r4, r1
 80049fe:	e7f5      	b.n	80049ec <_read+0x8>
	}

return len;
}
 8004a00:	4630      	mov	r0, r6
 8004a02:	bd70      	pop	{r4, r5, r6, pc}

08004a04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a04:	b570      	push	{r4, r5, r6, lr}
 8004a06:	460c      	mov	r4, r1
 8004a08:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a0a:	2500      	movs	r5, #0
 8004a0c:	42b5      	cmp	r5, r6
 8004a0e:	da05      	bge.n	8004a1c <_write+0x18>
	{
		__io_putchar(*ptr++);
 8004a10:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004a14:	f7ff fef6 	bl	8004804 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a18:	3501      	adds	r5, #1
 8004a1a:	e7f7      	b.n	8004a0c <_write+0x8>
	}
	return len;
}
 8004a1c:	4630      	mov	r0, r6
 8004a1e:	bd70      	pop	{r4, r5, r6, pc}

08004a20 <_close>:

int _close(int file)
{
	return -1;
}
 8004a20:	f04f 30ff 	mov.w	r0, #4294967295
 8004a24:	4770      	bx	lr

08004a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004a26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a2a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	4770      	bx	lr

08004a30 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004a30:	2001      	movs	r0, #1
 8004a32:	4770      	bx	lr

08004a34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004a34:	2000      	movs	r0, #0
 8004a36:	4770      	bx	lr

08004a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a38:	b410      	push	{r4}
 8004a3a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a3c:	4a0c      	ldr	r2, [pc, #48]	; (8004a70 <_sbrk+0x38>)
 8004a3e:	490d      	ldr	r1, [pc, #52]	; (8004a74 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a40:	480d      	ldr	r0, [pc, #52]	; (8004a78 <_sbrk+0x40>)
 8004a42:	6800      	ldr	r0, [r0, #0]
 8004a44:	b150      	cbz	r0, 8004a5c <_sbrk+0x24>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a46:	480c      	ldr	r0, [pc, #48]	; (8004a78 <_sbrk+0x40>)
 8004a48:	6800      	ldr	r0, [r0, #0]
 8004a4a:	4403      	add	r3, r0
 8004a4c:	1a52      	subs	r2, r2, r1
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d808      	bhi.n	8004a64 <_sbrk+0x2c>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004a52:	4a09      	ldr	r2, [pc, #36]	; (8004a78 <_sbrk+0x40>)
 8004a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8004a56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a5a:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8004a5c:	4806      	ldr	r0, [pc, #24]	; (8004a78 <_sbrk+0x40>)
 8004a5e:	4c07      	ldr	r4, [pc, #28]	; (8004a7c <_sbrk+0x44>)
 8004a60:	6004      	str	r4, [r0, #0]
 8004a62:	e7f0      	b.n	8004a46 <_sbrk+0xe>
    errno = ENOMEM;
 8004a64:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <_sbrk+0x48>)
 8004a66:	220c      	movs	r2, #12
 8004a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6e:	e7f2      	b.n	8004a56 <_sbrk+0x1e>
 8004a70:	20020000 	.word	0x20020000
 8004a74:	00000400 	.word	0x00000400
 8004a78:	200000e4 	.word	0x200000e4
 8004a7c:	20007fc8 	.word	0x20007fc8
 8004a80:	20007fb8 	.word	0x20007fb8

08004a84 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a84:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <SystemInit+0x18>)
 8004a86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a8a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004a8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a96:	609a      	str	r2, [r3, #8]
#endif
}
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	e000ed00 	.word	0xe000ed00

08004aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ad8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004aa4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004aa6:	e003      	b.n	8004ab0 <LoopCopyDataInit>

08004aa8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004aa8:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004aaa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004aac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004aae:	3104      	adds	r1, #4

08004ab0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004ab0:	480b      	ldr	r0, [pc, #44]	; (8004ae0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004ab2:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004ab4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004ab6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004ab8:	d3f6      	bcc.n	8004aa8 <CopyDataInit>
  ldr  r2, =_sbss
 8004aba:	4a0b      	ldr	r2, [pc, #44]	; (8004ae8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004abc:	e002      	b.n	8004ac4 <LoopFillZerobss>

08004abe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004abe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004ac0:	f842 3b04 	str.w	r3, [r2], #4

08004ac4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004ac4:	4b09      	ldr	r3, [pc, #36]	; (8004aec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004ac6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004ac8:	d3f9      	bcc.n	8004abe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004aca:	f7ff ffdb 	bl	8004a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ace:	f00f fb4f 	bl	8014170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ad2:	f7ff ff09 	bl	80048e8 <main>
  bx  lr    
 8004ad6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004ad8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004adc:	08017fe0 	.word	0x08017fe0
  ldr  r0, =_sdata
 8004ae0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ae4:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8004ae8:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8004aec:	20007fc8 	.word	0x20007fc8

08004af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004af0:	e7fe      	b.n	8004af0 <ADC_IRQHandler>
	...

08004af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004af4:	b510      	push	{r4, lr}
 8004af6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004af8:	4b0e      	ldr	r3, [pc, #56]	; (8004b34 <HAL_InitTick+0x40>)
 8004afa:	7818      	ldrb	r0, [r3, #0]
 8004afc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b00:	fbb3 f3f0 	udiv	r3, r3, r0
 8004b04:	4a0c      	ldr	r2, [pc, #48]	; (8004b38 <HAL_InitTick+0x44>)
 8004b06:	6810      	ldr	r0, [r2, #0]
 8004b08:	fbb0 f0f3 	udiv	r0, r0, r3
 8004b0c:	f000 f89e 	bl	8004c4c <HAL_SYSTICK_Config>
 8004b10:	b968      	cbnz	r0, 8004b2e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b12:	2c0f      	cmp	r4, #15
 8004b14:	d901      	bls.n	8004b1a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8004b16:	2001      	movs	r0, #1
 8004b18:	e00a      	b.n	8004b30 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b22:	f000 f85f 	bl	8004be4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b26:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <HAL_InitTick+0x48>)
 8004b28:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	e000      	b.n	8004b30 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8004b2e:	2001      	movs	r0, #1
}
 8004b30:	bd10      	pop	{r4, pc}
 8004b32:	bf00      	nop
 8004b34:	20000004 	.word	0x20000004
 8004b38:	20000000 	.word	0x20000000
 8004b3c:	20000008 	.word	0x20000008

08004b40 <HAL_Init>:
{
 8004b40:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b42:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <HAL_Init+0x30>)
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b4a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b52:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b5a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b5c:	2003      	movs	r0, #3
 8004b5e:	f000 f82f 	bl	8004bc0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b62:	2000      	movs	r0, #0
 8004b64:	f7ff ffc6 	bl	8004af4 <HAL_InitTick>
  HAL_MspInit();
 8004b68:	f7ff ff04 	bl	8004974 <HAL_MspInit>
}
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	bd08      	pop	{r3, pc}
 8004b70:	40023c00 	.word	0x40023c00

08004b74 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004b74:	4a03      	ldr	r2, [pc, #12]	; (8004b84 <HAL_IncTick+0x10>)
 8004b76:	6811      	ldr	r1, [r2, #0]
 8004b78:	4b03      	ldr	r3, [pc, #12]	; (8004b88 <HAL_IncTick+0x14>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	440b      	add	r3, r1
 8004b7e:	6013      	str	r3, [r2, #0]
}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	200007ec 	.word	0x200007ec
 8004b88:	20000004 	.word	0x20000004

08004b8c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004b8c:	4b01      	ldr	r3, [pc, #4]	; (8004b94 <HAL_GetTick+0x8>)
 8004b8e:	6818      	ldr	r0, [r3, #0]
}
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	200007ec 	.word	0x200007ec

08004b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b98:	b538      	push	{r3, r4, r5, lr}
 8004b9a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004b9c:	f7ff fff6 	bl	8004b8c <HAL_GetTick>
 8004ba0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ba2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004ba6:	d002      	beq.n	8004bae <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ba8:	4b04      	ldr	r3, [pc, #16]	; (8004bbc <HAL_Delay+0x24>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004bae:	f7ff ffed 	bl	8004b8c <HAL_GetTick>
 8004bb2:	1b40      	subs	r0, r0, r5
 8004bb4:	42a0      	cmp	r0, r4
 8004bb6:	d3fa      	bcc.n	8004bae <HAL_Delay+0x16>
  {
  }
}
 8004bb8:	bd38      	pop	{r3, r4, r5, pc}
 8004bba:	bf00      	nop
 8004bbc:	20000004 	.word	0x20000004

08004bc0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bc0:	4a07      	ldr	r2, [pc, #28]	; (8004be0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004bc2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bc4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004bc8:	041b      	lsls	r3, r3, #16
 8004bca:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bcc:	0200      	lsls	r0, r0, #8
 8004bce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bd2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004bdc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004bde:	4770      	bx	lr
 8004be0:	e000ed00 	.word	0xe000ed00

08004be4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004be4:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004be6:	4b17      	ldr	r3, [pc, #92]	; (8004c44 <HAL_NVIC_SetPriority+0x60>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bee:	f1c3 0407 	rsb	r4, r3, #7
 8004bf2:	2c04      	cmp	r4, #4
 8004bf4:	bf28      	it	cs
 8004bf6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bf8:	1d1d      	adds	r5, r3, #4
 8004bfa:	2d06      	cmp	r5, #6
 8004bfc:	d918      	bls.n	8004c30 <HAL_NVIC_SetPriority+0x4c>
 8004bfe:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c00:	f04f 35ff 	mov.w	r5, #4294967295
 8004c04:	fa05 f404 	lsl.w	r4, r5, r4
 8004c08:	ea21 0104 	bic.w	r1, r1, r4
 8004c0c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c0e:	fa05 f303 	lsl.w	r3, r5, r3
 8004c12:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c16:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	db0b      	blt.n	8004c34 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c1c:	0109      	lsls	r1, r1, #4
 8004c1e:	b2c9      	uxtb	r1, r1
 8004c20:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004c24:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004c28:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004c2c:	bc30      	pop	{r4, r5}
 8004c2e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c30:	2300      	movs	r3, #0
 8004c32:	e7e5      	b.n	8004c00 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c34:	f000 000f 	and.w	r0, r0, #15
 8004c38:	0109      	lsls	r1, r1, #4
 8004c3a:	b2c9      	uxtb	r1, r1
 8004c3c:	4b02      	ldr	r3, [pc, #8]	; (8004c48 <HAL_NVIC_SetPriority+0x64>)
 8004c3e:	5419      	strb	r1, [r3, r0]
 8004c40:	e7f4      	b.n	8004c2c <HAL_NVIC_SetPriority+0x48>
 8004c42:	bf00      	nop
 8004c44:	e000ed00 	.word	0xe000ed00
 8004c48:	e000ed14 	.word	0xe000ed14

08004c4c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c4c:	3801      	subs	r0, #1
 8004c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004c52:	d20a      	bcs.n	8004c6a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c54:	4b06      	ldr	r3, [pc, #24]	; (8004c70 <HAL_SYSTICK_Config+0x24>)
 8004c56:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c58:	4a06      	ldr	r2, [pc, #24]	; (8004c74 <HAL_SYSTICK_Config+0x28>)
 8004c5a:	21f0      	movs	r1, #240	; 0xf0
 8004c5c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c60:	2000      	movs	r0, #0
 8004c62:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c64:	2207      	movs	r2, #7
 8004c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c68:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004c6a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	e000e010 	.word	0xe000e010
 8004c74:	e000ed00 	.word	0xe000ed00

08004c78 <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004c78:	7950      	ldrb	r0, [r2, #5]
 8004c7a:	7913      	ldrb	r3, [r2, #4]
 8004c7c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004c80:	4807      	ldr	r0, [pc, #28]	; (8004ca0 <ETH_MACAddressConfig+0x28>)
 8004c82:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004c84:	78d0      	ldrb	r0, [r2, #3]
 8004c86:	7893      	ldrb	r3, [r2, #2]
 8004c88:	041b      	lsls	r3, r3, #16
 8004c8a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004c8e:	7850      	ldrb	r0, [r2, #1]
 8004c90:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004c94:	7812      	ldrb	r2, [r2, #0]
 8004c96:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004c98:	4a02      	ldr	r2, [pc, #8]	; (8004ca4 <ETH_MACAddressConfig+0x2c>)
 8004c9a:	508b      	str	r3, [r1, r2]
}
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40028040 	.word	0x40028040
 8004ca4:	40028044 	.word	0x40028044

08004ca8 <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004ca8:	6801      	ldr	r1, [r0, #0]
 8004caa:	f241 0218 	movw	r2, #4120	; 0x1018
 8004cae:	588b      	ldr	r3, [r1, r2]
 8004cb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cb4:	508b      	str	r3, [r1, r2]
}
 8004cb6:	4770      	bx	lr

08004cb8 <ETH_DMATransmissionDisable>:
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8004cb8:	6801      	ldr	r1, [r0, #0]
 8004cba:	f241 0218 	movw	r2, #4120	; 0x1018
 8004cbe:	588b      	ldr	r3, [r1, r2]
 8004cc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cc4:	508b      	str	r3, [r1, r2]
}
 8004cc6:	4770      	bx	lr

08004cc8 <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004cc8:	6801      	ldr	r1, [r0, #0]
 8004cca:	f241 0218 	movw	r2, #4120	; 0x1018
 8004cce:	588b      	ldr	r3, [r1, r2]
 8004cd0:	f043 0302 	orr.w	r3, r3, #2
 8004cd4:	508b      	str	r3, [r1, r2]
}
 8004cd6:	4770      	bx	lr

08004cd8 <ETH_DMAReceptionDisable>:
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004cd8:	6801      	ldr	r1, [r0, #0]
 8004cda:	f241 0218 	movw	r2, #4120	; 0x1018
 8004cde:	588b      	ldr	r3, [r1, r2]
 8004ce0:	f023 0302 	bic.w	r3, r3, #2
 8004ce4:	508b      	str	r3, [r1, r2]
}
 8004ce6:	4770      	bx	lr

08004ce8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8004ce8:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004cea:	4b08      	ldr	r3, [pc, #32]	; (8004d0c <ETH_Delay+0x24>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a08      	ldr	r2, [pc, #32]	; (8004d10 <ETH_Delay+0x28>)
 8004cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf4:	0a5b      	lsrs	r3, r3, #9
 8004cf6:	fb00 f303 	mul.w	r3, r0, r3
 8004cfa:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 8004cfc:	bf00      	nop
  } 
  while (Delay --);
 8004cfe:	9b01      	ldr	r3, [sp, #4]
 8004d00:	1e5a      	subs	r2, r3, #1
 8004d02:	9201      	str	r2, [sp, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1f9      	bne.n	8004cfc <ETH_Delay+0x14>
}
 8004d08:	b002      	add	sp, #8
 8004d0a:	4770      	bx	lr
 8004d0c:	20000000 	.word	0x20000000
 8004d10:	10624dd3 	.word	0x10624dd3

08004d14 <ETH_MACTransmissionEnable>:
{ 
 8004d14:	b510      	push	{r4, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004d1e:	6802      	ldr	r2, [r0, #0]
 8004d20:	6813      	ldr	r3, [r2, #0]
 8004d22:	f043 0308 	orr.w	r3, r3, #8
 8004d26:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8004d28:	6803      	ldr	r3, [r0, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004d2e:	2001      	movs	r0, #1
 8004d30:	f7ff ffda 	bl	8004ce8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	9a01      	ldr	r2, [sp, #4]
 8004d38:	601a      	str	r2, [r3, #0]
}
 8004d3a:	b002      	add	sp, #8
 8004d3c:	bd10      	pop	{r4, pc}

08004d3e <ETH_MACReceptionEnable>:
{ 
 8004d3e:	b510      	push	{r4, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004d48:	6802      	ldr	r2, [r0, #0]
 8004d4a:	6813      	ldr	r3, [r2, #0]
 8004d4c:	f043 0304 	orr.w	r3, r3, #4
 8004d50:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8004d52:	6803      	ldr	r3, [r0, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004d58:	2001      	movs	r0, #1
 8004d5a:	f7ff ffc5 	bl	8004ce8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	9a01      	ldr	r2, [sp, #4]
 8004d62:	601a      	str	r2, [r3, #0]
}
 8004d64:	b002      	add	sp, #8
 8004d66:	bd10      	pop	{r4, pc}

08004d68 <ETH_FlushTransmitFIFO>:
{
 8004d68:	b530      	push	{r4, r5, lr}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004d72:	6802      	ldr	r2, [r0, #0]
 8004d74:	f241 0518 	movw	r5, #4120	; 0x1018
 8004d78:	5953      	ldr	r3, [r2, r5]
 8004d7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d7e:	5153      	str	r3, [r2, r5]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004d80:	6803      	ldr	r3, [r0, #0]
 8004d82:	595b      	ldr	r3, [r3, r5]
 8004d84:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004d86:	2001      	movs	r0, #1
 8004d88:	f7ff ffae 	bl	8004ce8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	9a01      	ldr	r2, [sp, #4]
 8004d90:	515a      	str	r2, [r3, r5]
}
 8004d92:	b003      	add	sp, #12
 8004d94:	bd30      	pop	{r4, r5, pc}

08004d96 <ETH_MACReceptionDisable>:
{ 
 8004d96:	b510      	push	{r4, lr}
 8004d98:	b082      	sub	sp, #8
 8004d9a:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8004da0:	6802      	ldr	r2, [r0, #0]
 8004da2:	6813      	ldr	r3, [r2, #0]
 8004da4:	f023 0304 	bic.w	r3, r3, #4
 8004da8:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8004daa:	6803      	ldr	r3, [r0, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004db0:	2001      	movs	r0, #1
 8004db2:	f7ff ff99 	bl	8004ce8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	9a01      	ldr	r2, [sp, #4]
 8004dba:	601a      	str	r2, [r3, #0]
}
 8004dbc:	b002      	add	sp, #8
 8004dbe:	bd10      	pop	{r4, pc}

08004dc0 <ETH_MACTransmissionDisable>:
{ 
 8004dc0:	b510      	push	{r4, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004dca:	6802      	ldr	r2, [r0, #0]
 8004dcc:	6813      	ldr	r3, [r2, #0]
 8004dce:	f023 0308 	bic.w	r3, r3, #8
 8004dd2:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8004dd4:	6803      	ldr	r3, [r0, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004dda:	2001      	movs	r0, #1
 8004ddc:	f7ff ff84 	bl	8004ce8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	9a01      	ldr	r2, [sp, #4]
 8004de4:	601a      	str	r2, [r3, #0]
}
 8004de6:	b002      	add	sp, #8
 8004de8:	bd10      	pop	{r4, pc}
	...

08004dec <ETH_MACDMAConfig>:
{
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	b09e      	sub	sp, #120	; 0x78
 8004df0:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004df2:	b129      	cbz	r1, 8004e00 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004df4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004df8:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8004dfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004dfe:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004e00:	69e3      	ldr	r3, [r4, #28]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d16a      	bne.n	8004edc <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e0a:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8004e0c:	6821      	ldr	r1, [r4, #0]
 8004e0e:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004e10:	4a39      	ldr	r2, [pc, #228]	; (8004ef8 <ETH_MACDMAConfig+0x10c>)
 8004e12:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 8004e14:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 8004e16:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8004e18:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8004e1a:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 8004e1c:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8004e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004e22:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004e24:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e2a:	2001      	movs	r0, #1
 8004e2c:	f7ff feb4 	bl	8004b98 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	2240      	movs	r2, #64	; 0x40
 8004e38:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e3e:	2001      	movs	r0, #1
 8004e40:	f7ff feaa 	bl	8004b98 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	2500      	movs	r5, #0
 8004e4c:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 8004e52:	6822      	ldr	r2, [r4, #0]
 8004e54:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004e56:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 8004e5a:	041b      	lsls	r3, r3, #16
 8004e5c:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004e62:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e68:	2001      	movs	r0, #1
 8004e6a:	f7ff fe95 	bl	8004b98 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e7a:	2001      	movs	r0, #1
 8004e7c:	f7ff fe8c 	bl	8004b98 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004e84:	6822      	ldr	r2, [r4, #0]
 8004e86:	f241 0518 	movw	r5, #4120	; 0x1018
 8004e8a:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004e8c:	4b1b      	ldr	r3, [pc, #108]	; (8004efc <ETH_MACDMAConfig+0x110>)
 8004e8e:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004e90:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8004e94:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004e98:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e9e:	2001      	movs	r0, #1
 8004ea0:	f7ff fe7a 	bl	8004b98 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004ea8:	6823      	ldr	r3, [r4, #0]
 8004eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eae:	4a14      	ldr	r2, [pc, #80]	; (8004f00 <ETH_MACDMAConfig+0x114>)
 8004eb0:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb8:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004eba:	2001      	movs	r0, #1
 8004ebc:	f7ff fe6c 	bl	8004b98 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ec6:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004ec8:	69a3      	ldr	r3, [r4, #24]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d009      	beq.n	8004ee2 <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004ece:	6962      	ldr	r2, [r4, #20]
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	f7ff fed0 	bl	8004c78 <ETH_MACAddressConfig>
}
 8004ed8:	b01e      	add	sp, #120	; 0x78
 8004eda:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004edc:	2300      	movs	r3, #0
 8004ede:	9307      	str	r3, [sp, #28]
 8004ee0:	e794      	b.n	8004e0c <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004ee2:	6821      	ldr	r1, [r4, #0]
 8004ee4:	f241 021c 	movw	r2, #4124	; 0x101c
 8004ee8:	588b      	ldr	r3, [r1, r2]
 8004eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ef2:	508b      	str	r3, [r1, r2]
 8004ef4:	e7eb      	b.n	8004ece <ETH_MACDMAConfig+0xe2>
 8004ef6:	bf00      	nop
 8004ef8:	ff20810f 	.word	0xff20810f
 8004efc:	f8de3f23 	.word	0xf8de3f23
 8004f00:	02c12080 	.word	0x02c12080

08004f04 <HAL_ETH_DMATxDescListInit>:
{
 8004f04:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8004f06:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8004f0a:	2c01      	cmp	r4, #1
 8004f0c:	d032      	beq.n	8004f74 <HAL_ETH_DMATxDescListInit+0x70>
 8004f0e:	2401      	movs	r4, #1
 8004f10:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8004f14:	2402      	movs	r4, #2
 8004f16:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8004f1a:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 8004f1c:	2400      	movs	r4, #0
 8004f1e:	e001      	b.n	8004f24 <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8004f20:	60f1      	str	r1, [r6, #12]
  for(i=0U; i < TxBuffCount; i++)
 8004f22:	3401      	adds	r4, #1
 8004f24:	429c      	cmp	r4, r3
 8004f26:	d218      	bcs.n	8004f5a <HAL_ETH_DMATxDescListInit+0x56>
    dmatxdesc = DMATxDescTab + i;
 8004f28:	0167      	lsls	r7, r4, #5
 8004f2a:	eb01 1644 	add.w	r6, r1, r4, lsl #5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004f2e:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
 8004f32:	51cd      	str	r5, [r1, r7]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8004f34:	f240 55f4 	movw	r5, #1524	; 0x5f4
 8004f38:	fb05 2504 	mla	r5, r5, r4, r2
 8004f3c:	60b5      	str	r5, [r6, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004f3e:	69c5      	ldr	r5, [r0, #28]
 8004f40:	b91d      	cbnz	r5, 8004f4a <HAL_ETH_DMATxDescListInit+0x46>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8004f42:	59cd      	ldr	r5, [r1, r7]
 8004f44:	f445 0540 	orr.w	r5, r5, #12582912	; 0xc00000
 8004f48:	51cd      	str	r5, [r1, r7]
    if(i < (TxBuffCount-1U))
 8004f4a:	1e5d      	subs	r5, r3, #1
 8004f4c:	42a5      	cmp	r5, r4
 8004f4e:	d9e7      	bls.n	8004f20 <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8004f50:	1c65      	adds	r5, r4, #1
 8004f52:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8004f56:	60f5      	str	r5, [r6, #12]
 8004f58:	e7e3      	b.n	8004f22 <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8004f5a:	6802      	ldr	r2, [r0, #0]
 8004f5c:	f241 0310 	movw	r3, #4112	; 0x1010
 8004f60:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8004f68:	2300      	movs	r3, #0
 8004f6a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8004f6e:	4618      	mov	r0, r3
}
 8004f70:	bcf0      	pop	{r4, r5, r6, r7}
 8004f72:	4770      	bx	lr
  __HAL_LOCK(heth);
 8004f74:	2002      	movs	r0, #2
 8004f76:	e7fb      	b.n	8004f70 <HAL_ETH_DMATxDescListInit+0x6c>

08004f78 <HAL_ETH_DMARxDescListInit>:
{
 8004f78:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8004f7a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8004f7e:	2c01      	cmp	r4, #1
 8004f80:	d02f      	beq.n	8004fe2 <HAL_ETH_DMARxDescListInit+0x6a>
 8004f82:	2401      	movs	r4, #1
 8004f84:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8004f88:	2402      	movs	r4, #2
 8004f8a:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8004f8e:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 8004f90:	2400      	movs	r4, #0
 8004f92:	e001      	b.n	8004f98 <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8004f94:	60e9      	str	r1, [r5, #12]
  for(i=0U; i < RxBuffCount; i++)
 8004f96:	3401      	adds	r4, #1
 8004f98:	429c      	cmp	r4, r3
 8004f9a:	d215      	bcs.n	8004fc8 <HAL_ETH_DMARxDescListInit+0x50>
    DMARxDesc = DMARxDescTab+i;
 8004f9c:	0166      	lsls	r6, r4, #5
 8004f9e:	eb01 1544 	add.w	r5, r1, r4, lsl #5
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004fa2:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8004fa6:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8004fa8:	f244 56f4 	movw	r6, #17908	; 0x45f4
 8004fac:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8004fae:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8004fb2:	fb06 2604 	mla	r6, r6, r4, r2
 8004fb6:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1U))
 8004fb8:	1e5e      	subs	r6, r3, #1
 8004fba:	42a6      	cmp	r6, r4
 8004fbc:	d9ea      	bls.n	8004f94 <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8004fbe:	1c66      	adds	r6, r4, #1
 8004fc0:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8004fc4:	60ee      	str	r6, [r5, #12]
 8004fc6:	e7e6      	b.n	8004f96 <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8004fc8:	6802      	ldr	r2, [r0, #0]
 8004fca:	f241 030c 	movw	r3, #4108	; 0x100c
 8004fce:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8004fdc:	4618      	mov	r0, r3
}
 8004fde:	bcf0      	pop	{r4, r5, r6, r7}
 8004fe0:	4770      	bx	lr
  __HAL_LOCK(heth);
 8004fe2:	2002      	movs	r0, #2
 8004fe4:	e7fb      	b.n	8004fde <HAL_ETH_DMARxDescListInit+0x66>
	...

08004fe8 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8004fe8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	f000 8085 	beq.w	80050fc <HAL_ETH_TransmitFrame+0x114>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8004ffe:	b1b1      	cbz	r1, 800502e <HAL_ETH_TransmitFrame+0x46>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005000:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	2a00      	cmp	r2, #0
 8005006:	db1a      	blt.n	800503e <HAL_ETH_TransmitFrame+0x56>
{
 8005008:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 800500a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800500e:	4291      	cmp	r1, r2
 8005010:	d91d      	bls.n	800504e <HAL_ETH_TransmitFrame+0x66>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8005012:	4c3b      	ldr	r4, [pc, #236]	; (8005100 <HAL_ETH_TransmitFrame+0x118>)
 8005014:	fba4 2401 	umull	r2, r4, r4, r1
 8005018:	0aa4      	lsrs	r4, r4, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800501a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800501e:	fb02 1214 	mls	r2, r2, r4, r1
 8005022:	b102      	cbz	r2, 8005026 <HAL_ETH_TransmitFrame+0x3e>
      bufcount++;
 8005024:	3401      	adds	r4, #1
  if (bufcount == 1U)
 8005026:	2c01      	cmp	r4, #1
 8005028:	d011      	beq.n	800504e <HAL_ETH_TransmitFrame+0x66>
    for (i=0U; i< bufcount; i++)
 800502a:	2300      	movs	r3, #0
 800502c:	e048      	b.n	80050c0 <HAL_ETH_TransmitFrame+0xd8>
    heth->State = HAL_ETH_STATE_READY;
 800502e:	2301      	movs	r3, #1
 8005030:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8005034:	2200      	movs	r2, #0
 8005036:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 800503a:	4618      	mov	r0, r3
 800503c:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800503e:	2312      	movs	r3, #18
 8005040:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8005044:	2300      	movs	r3, #0
 8005046:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 800504a:	2001      	movs	r0, #1
 800504c:	4770      	bx	lr
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8005054:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8005056:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005058:	f3c1 010c 	ubfx	r1, r1, #0, #13
 800505c:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800505e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8005060:	6813      	ldr	r3, [r2, #0]
 8005062:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005066:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8005068:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800506e:	6803      	ldr	r3, [r0, #0]
 8005070:	f241 0214 	movw	r2, #4116	; 0x1014
 8005074:	589a      	ldr	r2, [r3, r2]
 8005076:	f012 0f04 	tst.w	r2, #4
 800507a:	d008      	beq.n	800508e <HAL_ETH_TransmitFrame+0xa6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800507c:	f241 0214 	movw	r2, #4116	; 0x1014
 8005080:	2104      	movs	r1, #4
 8005082:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8005084:	6802      	ldr	r2, [r0, #0]
 8005086:	f241 0304 	movw	r3, #4100	; 0x1004
 800508a:	2100      	movs	r1, #0
 800508c:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 800508e:	2301      	movs	r3, #1
 8005090:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8005094:	2300      	movs	r3, #0
 8005096:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800509a:	4618      	mov	r0, r3
}
 800509c:	bc30      	pop	{r4, r5}
 800509e:	4770      	bx	lr
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80050a0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80050a2:	f240 55f4 	movw	r5, #1524	; 0x5f4
 80050a6:	6055      	str	r5, [r2, #4]
      if (i == (bufcount-1U))
 80050a8:	1e62      	subs	r2, r4, #1
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d017      	beq.n	80050de <HAL_ETH_TransmitFrame+0xf6>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80050ae:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80050b0:	682a      	ldr	r2, [r5, #0]
 80050b2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80050b6:	602a      	str	r2, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80050b8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80050ba:	68d2      	ldr	r2, [r2, #12]
 80050bc:	62c2      	str	r2, [r0, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80050be:	3301      	adds	r3, #1
 80050c0:	429c      	cmp	r4, r3
 80050c2:	d9d4      	bls.n	800506e <HAL_ETH_TransmitFrame+0x86>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80050c4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80050c6:	682a      	ldr	r2, [r5, #0]
 80050c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80050cc:	602a      	str	r2, [r5, #0]
      if (i == 0U) 
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e6      	bne.n	80050a0 <HAL_ETH_TransmitFrame+0xb8>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80050d2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80050d4:	682a      	ldr	r2, [r5, #0]
 80050d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80050da:	602a      	str	r2, [r5, #0]
 80050dc:	e7e0      	b.n	80050a0 <HAL_ETH_TransmitFrame+0xb8>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80050de:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80050e0:	682a      	ldr	r2, [r5, #0]
 80050e2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80050e6:	602a      	str	r2, [r5, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80050e8:	4a06      	ldr	r2, [pc, #24]	; (8005104 <HAL_ETH_TransmitFrame+0x11c>)
 80050ea:	fb02 1204 	mla	r2, r2, r4, r1
 80050ee:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80050f2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80050f4:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80050f8:	606a      	str	r2, [r5, #4]
 80050fa:	e7d8      	b.n	80050ae <HAL_ETH_TransmitFrame+0xc6>
  __HAL_LOCK(heth);
 80050fc:	2002      	movs	r0, #2
}
 80050fe:	4770      	bx	lr
 8005100:	ac02b00b 	.word	0xac02b00b
 8005104:	fffffa0c 	.word	0xfffffa0c

08005108 <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 8005108:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800510c:	2b01      	cmp	r3, #1
 800510e:	d040      	beq.n	8005192 <HAL_ETH_GetReceivedFrame+0x8a>
 8005110:	2301      	movs	r3, #1
 8005112:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8005116:	2302      	movs	r3, #2
 8005118:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800511c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	2a00      	cmp	r2, #0
 8005122:	db0e      	blt.n	8005142 <HAL_ETH_GetReceivedFrame+0x3a>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	f412 7f80 	tst.w	r2, #256	; 0x100
 800512a:	d112      	bne.n	8005152 <HAL_ETH_GetReceivedFrame+0x4a>
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005132:	d028      	beq.n	8005186 <HAL_ETH_GetReceivedFrame+0x7e>
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8005134:	6303      	str	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8005136:	2200      	movs	r2, #0
 8005138:	6342      	str	r2, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 800513a:	2201      	movs	r2, #1
 800513c:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	6283      	str	r3, [r0, #40]	; 0x28
  heth->State = HAL_ETH_STATE_READY;
 8005142:	2301      	movs	r3, #1
 8005144:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8005148:	2200      	movs	r2, #0
 800514a:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 800514e:	4618      	mov	r0, r3
 8005150:	4770      	bx	lr
      (heth->RxFrameInfos).SegCount++;
 8005152:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005154:	3201      	adds	r2, #1
 8005156:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos).SegCount == 1U)
 8005158:	2a01      	cmp	r2, #1
 800515a:	d012      	beq.n	8005182 <HAL_ETH_GetReceivedFrame+0x7a>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800515c:	6343      	str	r3, [r0, #52]	; 0x34
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8005164:	3a04      	subs	r2, #4
      heth->RxFrameInfos.length = framelength;
 8005166:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8005168:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800516a:	6892      	ldr	r2, [r2, #8]
 800516c:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8005172:	2301      	movs	r3, #1
 8005174:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8005178:	2300      	movs	r3, #0
 800517a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 800517e:	4618      	mov	r0, r3
 8005180:	4770      	bx	lr
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8005182:	6303      	str	r3, [r0, #48]	; 0x30
 8005184:	e7ea      	b.n	800515c <HAL_ETH_GetReceivedFrame+0x54>
      (heth->RxFrameInfos).SegCount++;
 8005186:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005188:	3201      	adds	r2, #1
 800518a:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	6283      	str	r3, [r0, #40]	; 0x28
 8005190:	e7d7      	b.n	8005142 <HAL_ETH_GetReceivedFrame+0x3a>
  __HAL_LOCK(heth);
 8005192:	2002      	movs	r0, #2
}
 8005194:	4770      	bx	lr

08005196 <HAL_ETH_ReadPHYRegister>:
{
 8005196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8005198:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b82      	cmp	r3, #130	; 0x82
 80051a0:	d033      	beq.n	800520a <HAL_ETH_ReadPHYRegister+0x74>
 80051a2:	4605      	mov	r5, r0
 80051a4:	4616      	mov	r6, r2
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80051a6:	2382      	movs	r3, #130	; 0x82
 80051a8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 80051ac:	6800      	ldr	r0, [r0, #0]
 80051ae:	6902      	ldr	r2, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80051b0:	f002 021c 	and.w	r2, r2, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80051b4:	8a2b      	ldrh	r3, [r5, #16]
 80051b6:	02db      	lsls	r3, r3, #11
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	4313      	orrs	r3, r2
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80051bc:	018c      	lsls	r4, r1, #6
 80051be:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80051c2:	431c      	orrs	r4, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80051c4:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 80051c8:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 80051ca:	f7ff fcdf 	bl	8004b8c <HAL_GetTick>
 80051ce:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80051d0:	f014 0f01 	tst.w	r4, #1
 80051d4:	d010      	beq.n	80051f8 <HAL_ETH_ReadPHYRegister+0x62>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80051d6:	f7ff fcd9 	bl	8004b8c <HAL_GetTick>
 80051da:	1bc3      	subs	r3, r0, r7
 80051dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e0:	d202      	bcs.n	80051e8 <HAL_ETH_ReadPHYRegister+0x52>
    tmpreg1 = heth->Instance->MACMIIAR;
 80051e2:	682b      	ldr	r3, [r5, #0]
 80051e4:	691c      	ldr	r4, [r3, #16]
 80051e6:	e7f3      	b.n	80051d0 <HAL_ETH_ReadPHYRegister+0x3a>
      heth->State= HAL_ETH_STATE_READY;
 80051e8:	2301      	movs	r3, #1
 80051ea:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80051ee:	2300      	movs	r3, #0
 80051f0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80051f4:	2003      	movs	r0, #3
 80051f6:	e007      	b.n	8005208 <HAL_ETH_ReadPHYRegister+0x72>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80051f8:	682b      	ldr	r3, [r5, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8005200:	2301      	movs	r3, #1
 8005202:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 8005206:	2000      	movs	r0, #0
}
 8005208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800520a:	2002      	movs	r0, #2
 800520c:	e7fc      	b.n	8005208 <HAL_ETH_ReadPHYRegister+0x72>

0800520e <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800520e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b42      	cmp	r3, #66	; 0x42
 8005216:	d032      	beq.n	800527e <HAL_ETH_WritePHYRegister+0x70>
{
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800521c:	2342      	movs	r3, #66	; 0x42
 800521e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8005222:	6806      	ldr	r6, [r0, #0]
 8005224:	6930      	ldr	r0, [r6, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005226:	f000 001c 	and.w	r0, r0, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800522a:	8a2b      	ldrh	r3, [r5, #16]
 800522c:	02db      	lsls	r3, r3, #11
 800522e:	b29b      	uxth	r3, r3
 8005230:	4303      	orrs	r3, r0
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8005232:	018c      	lsls	r4, r1, #6
 8005234:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8005238:	431c      	orrs	r4, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800523a:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800523e:	b292      	uxth	r2, r2
 8005240:	6172      	str	r2, [r6, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8005242:	682b      	ldr	r3, [r5, #0]
 8005244:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8005246:	f7ff fca1 	bl	8004b8c <HAL_GetTick>
 800524a:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800524c:	f014 0f01 	tst.w	r4, #1
 8005250:	d010      	beq.n	8005274 <HAL_ETH_WritePHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8005252:	f7ff fc9b 	bl	8004b8c <HAL_GetTick>
 8005256:	1b83      	subs	r3, r0, r6
 8005258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800525c:	d202      	bcs.n	8005264 <HAL_ETH_WritePHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 800525e:	682b      	ldr	r3, [r5, #0]
 8005260:	691c      	ldr	r4, [r3, #16]
 8005262:	e7f3      	b.n	800524c <HAL_ETH_WritePHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8005264:	2301      	movs	r3, #1
 8005266:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800526a:	2300      	movs	r3, #0
 800526c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8005270:	2003      	movs	r0, #3
 8005272:	e003      	b.n	800527c <HAL_ETH_WritePHYRegister+0x6e>
  heth->State = HAL_ETH_STATE_READY;
 8005274:	2301      	movs	r3, #1
 8005276:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 800527a:	2000      	movs	r0, #0
}
 800527c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800527e:	2002      	movs	r0, #2
}
 8005280:	4770      	bx	lr
	...

08005284 <HAL_ETH_Init>:
{
 8005284:	b570      	push	{r4, r5, r6, lr}
 8005286:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 800528c:	2800      	cmp	r0, #0
 800528e:	f000 810f 	beq.w	80054b0 <HAL_ETH_Init+0x22c>
 8005292:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8005294:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8005298:	2b00      	cmp	r3, #0
 800529a:	d034      	beq.n	8005306 <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800529c:	2300      	movs	r3, #0
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	4b84      	ldr	r3, [pc, #528]	; (80054b4 <HAL_ETH_Init+0x230>)
 80052a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052a8:	645a      	str	r2, [r3, #68]	; 0x44
 80052aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80052b4:	4b80      	ldr	r3, [pc, #512]	; (80054b8 <HAL_ETH_Init+0x234>)
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80052bc:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	6a21      	ldr	r1, [r4, #32]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80052d4:	f7ff fc5a 	bl	8004b8c <HAL_GetTick>
 80052d8:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80052e0:	6812      	ldr	r2, [r2, #0]
 80052e2:	f012 0f01 	tst.w	r2, #1
 80052e6:	d013      	beq.n	8005310 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80052e8:	f7ff fc50 	bl	8004b8c <HAL_GetTick>
 80052ec:	1b40      	subs	r0, r0, r5
 80052ee:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80052f2:	d9f2      	bls.n	80052da <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80052f4:	2503      	movs	r5, #3
 80052f6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80052fa:	2300      	movs	r3, #0
 80052fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8005300:	4628      	mov	r0, r5
 8005302:	b002      	add	sp, #8
 8005304:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 8005306:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800530a:	f000 fe13 	bl	8005f34 <HAL_ETH_MspInit>
 800530e:	e7c5      	b.n	800529c <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8005310:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8005312:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8005316:	f000 faad 	bl	8005874 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800531a:	4b68      	ldr	r3, [pc, #416]	; (80054bc <HAL_ETH_Init+0x238>)
 800531c:	4403      	add	r3, r0
 800531e:	4a68      	ldr	r2, [pc, #416]	; (80054c0 <HAL_ETH_Init+0x23c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d256      	bcs.n	80053d2 <HAL_ETH_Init+0x14e>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8005324:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800532c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005330:	2100      	movs	r1, #0
 8005332:	4620      	mov	r0, r4
 8005334:	f7ff ff6b 	bl	800520e <HAL_ETH_WritePHYRegister>
 8005338:	4605      	mov	r5, r0
 800533a:	2800      	cmp	r0, #0
 800533c:	d161      	bne.n	8005402 <HAL_ETH_Init+0x17e>
  HAL_Delay(PHY_RESET_DELAY);
 800533e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8005342:	f7ff fc29 	bl	8004b98 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005346:	6863      	ldr	r3, [r4, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 8091 	beq.w	8005470 <HAL_ETH_Init+0x1ec>
    tickstart = HAL_GetTick();
 800534e:	f7ff fc1d 	bl	8004b8c <HAL_GetTick>
 8005352:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8005354:	aa01      	add	r2, sp, #4
 8005356:	2101      	movs	r1, #1
 8005358:	4620      	mov	r0, r4
 800535a:	f7ff ff1c 	bl	8005196 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800535e:	f7ff fc15 	bl	8004b8c <HAL_GetTick>
 8005362:	1b80      	subs	r0, r0, r6
 8005364:	f241 3388 	movw	r3, #5000	; 0x1388
 8005368:	4298      	cmp	r0, r3
 800536a:	d852      	bhi.n	8005412 <HAL_ETH_Init+0x18e>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800536c:	9b01      	ldr	r3, [sp, #4]
 800536e:	f013 0f04 	tst.w	r3, #4
 8005372:	d0ef      	beq.n	8005354 <HAL_ETH_Init+0xd0>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8005374:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005378:	2100      	movs	r1, #0
 800537a:	4620      	mov	r0, r4
 800537c:	f7ff ff47 	bl	800520e <HAL_ETH_WritePHYRegister>
 8005380:	2800      	cmp	r0, #0
 8005382:	d152      	bne.n	800542a <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 8005384:	f7ff fc02 	bl	8004b8c <HAL_GetTick>
 8005388:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800538a:	aa01      	add	r2, sp, #4
 800538c:	2101      	movs	r1, #1
 800538e:	4620      	mov	r0, r4
 8005390:	f7ff ff01 	bl	8005196 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8005394:	f7ff fbfa 	bl	8004b8c <HAL_GetTick>
 8005398:	1b80      	subs	r0, r0, r6
 800539a:	f241 3388 	movw	r3, #5000	; 0x1388
 800539e:	4298      	cmp	r0, r3
 80053a0:	d84b      	bhi.n	800543a <HAL_ETH_Init+0x1b6>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80053a2:	9b01      	ldr	r3, [sp, #4]
 80053a4:	f013 0f20 	tst.w	r3, #32
 80053a8:	d0ef      	beq.n	800538a <HAL_ETH_Init+0x106>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80053aa:	aa01      	add	r2, sp, #4
 80053ac:	211f      	movs	r1, #31
 80053ae:	4620      	mov	r0, r4
 80053b0:	f7ff fef1 	bl	8005196 <HAL_ETH_ReadPHYRegister>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d14c      	bne.n	8005452 <HAL_ETH_Init+0x1ce>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80053b8:	9b01      	ldr	r3, [sp, #4]
 80053ba:	f013 0f04 	tst.w	r3, #4
 80053be:	d050      	beq.n	8005462 <HAL_ETH_Init+0x1de>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80053c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053c4:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80053c6:	f013 0f02 	tst.w	r3, #2
 80053ca:	d04d      	beq.n	8005468 <HAL_ETH_Init+0x1e4>
      (heth->Init).Speed = ETH_SPEED_10M; 
 80053cc:	2300      	movs	r3, #0
 80053ce:	60a3      	str	r3, [r4, #8]
 80053d0:	e05e      	b.n	8005490 <HAL_ETH_Init+0x20c>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80053d2:	4b3c      	ldr	r3, [pc, #240]	; (80054c4 <HAL_ETH_Init+0x240>)
 80053d4:	4403      	add	r3, r0
 80053d6:	4a3c      	ldr	r2, [pc, #240]	; (80054c8 <HAL_ETH_Init+0x244>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d802      	bhi.n	80053e2 <HAL_ETH_Init+0x15e>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80053dc:	f045 050c 	orr.w	r5, r5, #12
 80053e0:	e7a2      	b.n	8005328 <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80053e2:	4b3a      	ldr	r3, [pc, #232]	; (80054cc <HAL_ETH_Init+0x248>)
 80053e4:	4403      	add	r3, r0
 80053e6:	4a3a      	ldr	r2, [pc, #232]	; (80054d0 <HAL_ETH_Init+0x24c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d39d      	bcc.n	8005328 <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80053ec:	4b39      	ldr	r3, [pc, #228]	; (80054d4 <HAL_ETH_Init+0x250>)
 80053ee:	4403      	add	r3, r0
 80053f0:	4a39      	ldr	r2, [pc, #228]	; (80054d8 <HAL_ETH_Init+0x254>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d802      	bhi.n	80053fc <HAL_ETH_Init+0x178>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80053f6:	f045 0504 	orr.w	r5, r5, #4
 80053fa:	e795      	b.n	8005328 <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80053fc:	f045 0510 	orr.w	r5, r5, #16
 8005400:	e792      	b.n	8005328 <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 8005402:	2101      	movs	r1, #1
 8005404:	4620      	mov	r0, r4
 8005406:	f7ff fcf1 	bl	8004dec <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 800540a:	2501      	movs	r5, #1
 800540c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 8005410:	e776      	b.n	8005300 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8005412:	2101      	movs	r1, #1
 8005414:	4620      	mov	r0, r4
 8005416:	f7ff fce9 	bl	8004dec <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 800541a:	2301      	movs	r3, #1
 800541c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8005420:	2300      	movs	r3, #0
 8005422:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8005426:	2503      	movs	r5, #3
 8005428:	e76a      	b.n	8005300 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 800542a:	2101      	movs	r1, #1
 800542c:	4620      	mov	r0, r4
 800542e:	f7ff fcdd 	bl	8004dec <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8005432:	2501      	movs	r5, #1
 8005434:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8005438:	e762      	b.n	8005300 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 800543a:	2101      	movs	r1, #1
 800543c:	4620      	mov	r0, r4
 800543e:	f7ff fcd5 	bl	8004dec <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8005442:	2301      	movs	r3, #1
 8005444:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8005448:	2300      	movs	r3, #0
 800544a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 800544e:	2503      	movs	r5, #3
 8005450:	e756      	b.n	8005300 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8005452:	2101      	movs	r1, #1
 8005454:	4620      	mov	r0, r4
 8005456:	f7ff fcc9 	bl	8004dec <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800545a:	2501      	movs	r5, #1
 800545c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8005460:	e74e      	b.n	8005300 <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8005462:	2200      	movs	r2, #0
 8005464:	60e2      	str	r2, [r4, #12]
 8005466:	e7ae      	b.n	80053c6 <HAL_ETH_Init+0x142>
      (heth->Init).Speed = ETH_SPEED_100M;
 8005468:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800546c:	60a3      	str	r3, [r4, #8]
 800546e:	e00f      	b.n	8005490 <HAL_ETH_Init+0x20c>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8005470:	68e2      	ldr	r2, [r4, #12]
 8005472:	f3c2 02cf 	ubfx	r2, r2, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8005476:	68a3      	ldr	r3, [r4, #8]
 8005478:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800547c:	431a      	orrs	r2, r3
 800547e:	2100      	movs	r1, #0
 8005480:	4620      	mov	r0, r4
 8005482:	f7ff fec4 	bl	800520e <HAL_ETH_WritePHYRegister>
 8005486:	b958      	cbnz	r0, 80054a0 <HAL_ETH_Init+0x21c>
    HAL_Delay(PHY_CONFIG_DELAY);
 8005488:	f640 70ff 	movw	r0, #4095	; 0xfff
 800548c:	f7ff fb84 	bl	8004b98 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8005490:	2100      	movs	r1, #0
 8005492:	4620      	mov	r0, r4
 8005494:	f7ff fcaa 	bl	8004dec <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8005498:	2301      	movs	r3, #1
 800549a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 800549e:	e72f      	b.n	8005300 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 80054a0:	2101      	movs	r1, #1
 80054a2:	4620      	mov	r0, r4
 80054a4:	f7ff fca2 	bl	8004dec <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80054a8:	2501      	movs	r5, #1
 80054aa:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 80054ae:	e727      	b.n	8005300 <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 80054b0:	2501      	movs	r5, #1
 80054b2:	e725      	b.n	8005300 <HAL_ETH_Init+0x7c>
 80054b4:	40023800 	.word	0x40023800
 80054b8:	40013800 	.word	0x40013800
 80054bc:	feced300 	.word	0xfeced300
 80054c0:	00e4e1c0 	.word	0x00e4e1c0
 80054c4:	fde9f140 	.word	0xfde9f140
 80054c8:	017d783f 	.word	0x017d783f
 80054cc:	fc6c7900 	.word	0xfc6c7900
 80054d0:	02625a00 	.word	0x02625a00
 80054d4:	fa0a1f00 	.word	0xfa0a1f00
 80054d8:	02faf07f 	.word	0x02faf07f

080054dc <HAL_ETH_Start>:
{  
 80054dc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 80054de:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d01a      	beq.n	800551c <HAL_ETH_Start+0x40>
 80054e6:	4604      	mov	r4, r0
 80054e8:	2501      	movs	r5, #1
 80054ea:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80054ee:	2302      	movs	r3, #2
 80054f0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 80054f4:	f7ff fc0e 	bl	8004d14 <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 80054f8:	4620      	mov	r0, r4
 80054fa:	f7ff fc20 	bl	8004d3e <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 80054fe:	4620      	mov	r0, r4
 8005500:	f7ff fc32 	bl	8004d68 <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 8005504:	4620      	mov	r0, r4
 8005506:	f7ff fbcf 	bl	8004ca8 <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 800550a:	4620      	mov	r0, r4
 800550c:	f7ff fbdc 	bl	8004cc8 <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 8005510:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8005514:	2000      	movs	r0, #0
 8005516:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
}
 800551a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(heth);
 800551c:	2002      	movs	r0, #2
 800551e:	e7fc      	b.n	800551a <HAL_ETH_Start+0x3e>

08005520 <HAL_ETH_Stop>:
{  
 8005520:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 8005522:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8005526:	2b01      	cmp	r3, #1
 8005528:	d01a      	beq.n	8005560 <HAL_ETH_Stop+0x40>
 800552a:	4604      	mov	r4, r0
 800552c:	2501      	movs	r5, #1
 800552e:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8005532:	2302      	movs	r3, #2
 8005534:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_DMATransmissionDisable(heth);
 8005538:	f7ff fbbe 	bl	8004cb8 <ETH_DMATransmissionDisable>
  ETH_DMAReceptionDisable(heth);
 800553c:	4620      	mov	r0, r4
 800553e:	f7ff fbcb 	bl	8004cd8 <ETH_DMAReceptionDisable>
  ETH_MACReceptionDisable(heth);
 8005542:	4620      	mov	r0, r4
 8005544:	f7ff fc27 	bl	8004d96 <ETH_MACReceptionDisable>
  ETH_FlushTransmitFIFO(heth);
 8005548:	4620      	mov	r0, r4
 800554a:	f7ff fc0d 	bl	8004d68 <ETH_FlushTransmitFIFO>
  ETH_MACTransmissionDisable(heth);
 800554e:	4620      	mov	r0, r4
 8005550:	f7ff fc36 	bl	8004dc0 <ETH_MACTransmissionDisable>
  heth->State = HAL_ETH_STATE_READY;
 8005554:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8005558:	2000      	movs	r0, #0
 800555a:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
}
 800555e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(heth);
 8005560:	2002      	movs	r0, #2
 8005562:	e7fc      	b.n	800555e <HAL_ETH_Stop+0x3e>

08005564 <HAL_ETH_ConfigMAC>:
  __HAL_LOCK(heth);
 8005564:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8005568:	2b01      	cmp	r3, #1
 800556a:	f000 808e 	beq.w	800568a <HAL_ETH_ConfigMAC+0x126>
{
 800556e:	b570      	push	{r4, r5, r6, lr}
 8005570:	4605      	mov	r5, r0
 8005572:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 8005574:	2301      	movs	r3, #1
 8005576:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State= HAL_ETH_STATE_BUSY;
 800557a:	2302      	movs	r3, #2
 800557c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (macconf != NULL)
 8005580:	2900      	cmp	r1, #0
 8005582:	d071      	beq.n	8005668 <HAL_ETH_ConfigMAC+0x104>
    tmpreg1 = (heth->Instance)->MACCR;
 8005584:	6802      	ldr	r2, [r0, #0]
 8005586:	6813      	ldr	r3, [r2, #0]
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005588:	4941      	ldr	r1, [pc, #260]	; (8005690 <HAL_ETH_ConfigMAC+0x12c>)
 800558a:	4019      	ands	r1, r3
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800558c:	6823      	ldr	r3, [r4, #0]
                         macconf->Jabber | 
 800558e:	6860      	ldr	r0, [r4, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8005590:	4303      	orrs	r3, r0
                         macconf->InterFrameGap |
 8005592:	68a0      	ldr	r0, [r4, #8]
                         macconf->Jabber | 
 8005594:	4303      	orrs	r3, r0
                         macconf->CarrierSense |
 8005596:	68e0      	ldr	r0, [r4, #12]
                         macconf->InterFrameGap |
 8005598:	4303      	orrs	r3, r0
                         (heth->Init).Speed | 
 800559a:	68a8      	ldr	r0, [r5, #8]
                         macconf->CarrierSense |
 800559c:	4303      	orrs	r3, r0
                         macconf->ReceiveOwn |
 800559e:	6920      	ldr	r0, [r4, #16]
                         (heth->Init).Speed | 
 80055a0:	4303      	orrs	r3, r0
                         macconf->LoopbackMode |
 80055a2:	6960      	ldr	r0, [r4, #20]
                         macconf->ReceiveOwn |
 80055a4:	4303      	orrs	r3, r0
                         (heth->Init).DuplexMode | 
 80055a6:	68e8      	ldr	r0, [r5, #12]
                         macconf->LoopbackMode |
 80055a8:	4303      	orrs	r3, r0
                         macconf->ChecksumOffload |    
 80055aa:	69a0      	ldr	r0, [r4, #24]
                         (heth->Init).DuplexMode | 
 80055ac:	4303      	orrs	r3, r0
                         macconf->RetryTransmission | 
 80055ae:	69e0      	ldr	r0, [r4, #28]
                         macconf->ChecksumOffload |    
 80055b0:	4303      	orrs	r3, r0
                         macconf->AutomaticPadCRCStrip | 
 80055b2:	6a20      	ldr	r0, [r4, #32]
                         macconf->RetryTransmission | 
 80055b4:	4303      	orrs	r3, r0
                         macconf->BackOffLimit | 
 80055b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80055b8:	4303      	orrs	r3, r0
                         macconf->DeferralCheck);
 80055ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                         macconf->BackOffLimit | 
 80055bc:	4303      	orrs	r3, r0
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80055be:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80055c0:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80055c2:	682b      	ldr	r3, [r5, #0]
 80055c4:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80055c6:	2001      	movs	r0, #1
 80055c8:	f7ff fae6 	bl	8004b98 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80055cc:	682b      	ldr	r3, [r5, #0]
 80055ce:	601e      	str	r6, [r3, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80055d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80055d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80055d4:	4313      	orrs	r3, r2
                                          macconf->PassControlFrames |
 80055d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80055d8:	4313      	orrs	r3, r2
                                          macconf->BroadcastFramesReception | 
 80055da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
                                          macconf->PassControlFrames |
 80055dc:	4313      	orrs	r3, r2
                                          macconf->DestinationAddrFilter |
 80055de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80055e0:	4313      	orrs	r3, r2
                                          macconf->PromiscuousMode |
 80055e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80055e4:	4313      	orrs	r3, r2
                                          macconf->MulticastFramesFilter |
 80055e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80055e8:	4313      	orrs	r3, r2
                                          macconf->UnicastFramesFilter);
 80055ea:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80055ec:	682a      	ldr	r2, [r5, #0]
                                          macconf->MulticastFramesFilter |
 80055ee:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80055f0:	6053      	str	r3, [r2, #4]
     tmpreg1 = (heth->Instance)->MACFFR;
 80055f2:	682b      	ldr	r3, [r5, #0]
 80055f4:	685e      	ldr	r6, [r3, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80055f6:	2001      	movs	r0, #1
 80055f8:	f7ff face 	bl	8004b98 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80055fc:	682b      	ldr	r3, [r5, #0]
 80055fe:	605e      	str	r6, [r3, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8005600:	682b      	ldr	r3, [r5, #0]
 8005602:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005604:	609a      	str	r2, [r3, #8]
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8005606:	682b      	ldr	r3, [r5, #0]
 8005608:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800560a:	60da      	str	r2, [r3, #12]
     tmpreg1 = (heth->Instance)->MACFCR;
 800560c:	6829      	ldr	r1, [r5, #0]
 800560e:	698a      	ldr	r2, [r1, #24]
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005610:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8005614:	0412      	lsls	r2, r2, #16
 8005616:	0c12      	lsrs	r2, r2, #16
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005618:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ZeroQuantaPause |
 800561a:	6da3      	ldr	r3, [r4, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800561c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                          macconf->PauseLowThreshold |
 8005620:	6de0      	ldr	r0, [r4, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8005622:	4303      	orrs	r3, r0
                          macconf->UnicastPauseFrameDetect | 
 8005624:	6e20      	ldr	r0, [r4, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8005626:	4303      	orrs	r3, r0
                          macconf->ReceiveFlowControl |
 8005628:	6e60      	ldr	r0, [r4, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800562a:	4303      	orrs	r3, r0
                          macconf->TransmitFlowControl); 
 800562c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800562e:	4303      	orrs	r3, r0
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005630:	4313      	orrs	r3, r2
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005632:	618b      	str	r3, [r1, #24]
     tmpreg1 = (heth->Instance)->MACFCR;
 8005634:	682b      	ldr	r3, [r5, #0]
 8005636:	699e      	ldr	r6, [r3, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005638:	2001      	movs	r0, #1
 800563a:	f7ff faad 	bl	8004b98 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800563e:	682b      	ldr	r3, [r5, #0]
 8005640:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005642:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8005644:	6f21      	ldr	r1, [r4, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005646:	682a      	ldr	r2, [r5, #0]
 8005648:	430b      	orrs	r3, r1
 800564a:	61d3      	str	r3, [r2, #28]
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800564c:	682b      	ldr	r3, [r5, #0]
 800564e:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8005650:	2001      	movs	r0, #1
 8005652:	f7ff faa1 	bl	8004b98 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8005656:	682b      	ldr	r3, [r5, #0]
 8005658:	61dc      	str	r4, [r3, #28]
  heth->State= HAL_ETH_STATE_READY;
 800565a:	2301      	movs	r3, #1
 800565c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8005660:	2000      	movs	r0, #0
 8005662:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
}
 8005666:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = (heth->Instance)->MACCR;
 8005668:	6801      	ldr	r1, [r0, #0]
 800566a:	680a      	ldr	r2, [r1, #0]
    tmpreg1 &= ~(0x00004800U);
 800566c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8005670:	6883      	ldr	r3, [r0, #8]
 8005672:	68c0      	ldr	r0, [r0, #12]
 8005674:	4303      	orrs	r3, r0
 8005676:	4313      	orrs	r3, r2
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005678:	600b      	str	r3, [r1, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 800567a:	682b      	ldr	r3, [r5, #0]
 800567c:	681c      	ldr	r4, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800567e:	2001      	movs	r0, #1
 8005680:	f7ff fa8a 	bl	8004b98 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005684:	682b      	ldr	r3, [r5, #0]
 8005686:	601c      	str	r4, [r3, #0]
 8005688:	e7e7      	b.n	800565a <HAL_ETH_ConfigMAC+0xf6>
  __HAL_LOCK(heth);
 800568a:	2002      	movs	r0, #2
}
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	ff20810f 	.word	0xff20810f

08005694 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005694:	2300      	movs	r3, #0
 8005696:	2b0f      	cmp	r3, #15
 8005698:	f200 80dd 	bhi.w	8005856 <HAL_GPIO_Init+0x1c2>
{
 800569c:	b4f0      	push	{r4, r5, r6, r7}
 800569e:	b082      	sub	sp, #8
 80056a0:	e05d      	b.n	800575e <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80056a2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056a4:	005f      	lsls	r7, r3, #1
 80056a6:	2403      	movs	r4, #3
 80056a8:	40bc      	lsls	r4, r7
 80056aa:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056ae:	68cc      	ldr	r4, [r1, #12]
 80056b0:	40bc      	lsls	r4, r7
 80056b2:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80056b4:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056b6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056b8:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80056bc:	684c      	ldr	r4, [r1, #4]
 80056be:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80056c2:	409a      	lsls	r2, r3
 80056c4:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80056c6:	6042      	str	r2, [r0, #4]
 80056c8:	e057      	b.n	800577a <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056ca:	08dc      	lsrs	r4, r3, #3
 80056cc:	3408      	adds	r4, #8
 80056ce:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056d2:	f003 0207 	and.w	r2, r3, #7
 80056d6:	0096      	lsls	r6, r2, #2
 80056d8:	220f      	movs	r2, #15
 80056da:	40b2      	lsls	r2, r6
 80056dc:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056e0:	690a      	ldr	r2, [r1, #16]
 80056e2:	40b2      	lsls	r2, r6
 80056e4:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 80056e6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80056ea:	e05a      	b.n	80057a2 <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80056ec:	2207      	movs	r2, #7
 80056ee:	e000      	b.n	80056f2 <HAL_GPIO_Init+0x5e>
 80056f0:	2200      	movs	r2, #0
 80056f2:	40b2      	lsls	r2, r6
 80056f4:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056f6:	3402      	adds	r4, #2
 80056f8:	4e57      	ldr	r6, [pc, #348]	; (8005858 <HAL_GPIO_Init+0x1c4>)
 80056fa:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056fe:	4a57      	ldr	r2, [pc, #348]	; (800585c <HAL_GPIO_Init+0x1c8>)
 8005700:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8005702:	43ea      	mvns	r2, r5
 8005704:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005708:	684f      	ldr	r7, [r1, #4]
 800570a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800570e:	d001      	beq.n	8005714 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8005710:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8005714:	4c51      	ldr	r4, [pc, #324]	; (800585c <HAL_GPIO_Init+0x1c8>)
 8005716:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8005718:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800571a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800571e:	684f      	ldr	r7, [r1, #4]
 8005720:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8005724:	d001      	beq.n	800572a <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 8005726:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 800572a:	4c4c      	ldr	r4, [pc, #304]	; (800585c <HAL_GPIO_Init+0x1c8>)
 800572c:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800572e:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8005730:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005734:	684f      	ldr	r7, [r1, #4]
 8005736:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800573a:	d001      	beq.n	8005740 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 800573c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8005740:	4c46      	ldr	r4, [pc, #280]	; (800585c <HAL_GPIO_Init+0x1c8>)
 8005742:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8005744:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8005746:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005748:	684e      	ldr	r6, [r1, #4]
 800574a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800574e:	d001      	beq.n	8005754 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8005750:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8005754:	4c41      	ldr	r4, [pc, #260]	; (800585c <HAL_GPIO_Init+0x1c8>)
 8005756:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005758:	3301      	adds	r3, #1
 800575a:	2b0f      	cmp	r3, #15
 800575c:	d878      	bhi.n	8005850 <HAL_GPIO_Init+0x1bc>
    ioposition = 0x01U << position;
 800575e:	2201      	movs	r2, #1
 8005760:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005762:	680c      	ldr	r4, [r1, #0]
 8005764:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8005768:	ea32 0404 	bics.w	r4, r2, r4
 800576c:	d1f4      	bne.n	8005758 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800576e:	684c      	ldr	r4, [r1, #4]
 8005770:	f004 0403 	and.w	r4, r4, #3
 8005774:	3c01      	subs	r4, #1
 8005776:	2c01      	cmp	r4, #1
 8005778:	d993      	bls.n	80056a2 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800577a:	684a      	ldr	r2, [r1, #4]
 800577c:	f002 0203 	and.w	r2, r2, #3
 8005780:	2a03      	cmp	r2, #3
 8005782:	d009      	beq.n	8005798 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 8005784:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005786:	005e      	lsls	r6, r3, #1
 8005788:	2203      	movs	r2, #3
 800578a:	40b2      	lsls	r2, r6
 800578c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005790:	688a      	ldr	r2, [r1, #8]
 8005792:	40b2      	lsls	r2, r6
 8005794:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8005796:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005798:	684a      	ldr	r2, [r1, #4]
 800579a:	f002 0203 	and.w	r2, r2, #3
 800579e:	2a02      	cmp	r2, #2
 80057a0:	d093      	beq.n	80056ca <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 80057a2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057a4:	005e      	lsls	r6, r3, #1
 80057a6:	2203      	movs	r2, #3
 80057a8:	40b2      	lsls	r2, r6
 80057aa:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057ae:	684a      	ldr	r2, [r1, #4]
 80057b0:	f002 0203 	and.w	r2, r2, #3
 80057b4:	40b2      	lsls	r2, r6
 80057b6:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80057b8:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057ba:	684a      	ldr	r2, [r1, #4]
 80057bc:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80057c0:	d0ca      	beq.n	8005758 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057c2:	2200      	movs	r2, #0
 80057c4:	9201      	str	r2, [sp, #4]
 80057c6:	4a26      	ldr	r2, [pc, #152]	; (8005860 <HAL_GPIO_Init+0x1cc>)
 80057c8:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80057ca:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80057ce:	6454      	str	r4, [r2, #68]	; 0x44
 80057d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80057d2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80057d6:	9201      	str	r2, [sp, #4]
 80057d8:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80057da:	089c      	lsrs	r4, r3, #2
 80057dc:	1ca6      	adds	r6, r4, #2
 80057de:	4a1e      	ldr	r2, [pc, #120]	; (8005858 <HAL_GPIO_Init+0x1c4>)
 80057e0:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057e4:	f003 0203 	and.w	r2, r3, #3
 80057e8:	0096      	lsls	r6, r2, #2
 80057ea:	220f      	movs	r2, #15
 80057ec:	40b2      	lsls	r2, r6
 80057ee:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057f2:	4a1c      	ldr	r2, [pc, #112]	; (8005864 <HAL_GPIO_Init+0x1d0>)
 80057f4:	4290      	cmp	r0, r2
 80057f6:	f43f af7b 	beq.w	80056f0 <HAL_GPIO_Init+0x5c>
 80057fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057fe:	4290      	cmp	r0, r2
 8005800:	d01a      	beq.n	8005838 <HAL_GPIO_Init+0x1a4>
 8005802:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005806:	4290      	cmp	r0, r2
 8005808:	d018      	beq.n	800583c <HAL_GPIO_Init+0x1a8>
 800580a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800580e:	4290      	cmp	r0, r2
 8005810:	d016      	beq.n	8005840 <HAL_GPIO_Init+0x1ac>
 8005812:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005816:	4290      	cmp	r0, r2
 8005818:	d014      	beq.n	8005844 <HAL_GPIO_Init+0x1b0>
 800581a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800581e:	4290      	cmp	r0, r2
 8005820:	d012      	beq.n	8005848 <HAL_GPIO_Init+0x1b4>
 8005822:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005826:	4290      	cmp	r0, r2
 8005828:	d010      	beq.n	800584c <HAL_GPIO_Init+0x1b8>
 800582a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800582e:	4290      	cmp	r0, r2
 8005830:	f43f af5c 	beq.w	80056ec <HAL_GPIO_Init+0x58>
 8005834:	2208      	movs	r2, #8
 8005836:	e75c      	b.n	80056f2 <HAL_GPIO_Init+0x5e>
 8005838:	2201      	movs	r2, #1
 800583a:	e75a      	b.n	80056f2 <HAL_GPIO_Init+0x5e>
 800583c:	2202      	movs	r2, #2
 800583e:	e758      	b.n	80056f2 <HAL_GPIO_Init+0x5e>
 8005840:	2203      	movs	r2, #3
 8005842:	e756      	b.n	80056f2 <HAL_GPIO_Init+0x5e>
 8005844:	2204      	movs	r2, #4
 8005846:	e754      	b.n	80056f2 <HAL_GPIO_Init+0x5e>
 8005848:	2205      	movs	r2, #5
 800584a:	e752      	b.n	80056f2 <HAL_GPIO_Init+0x5e>
 800584c:	2206      	movs	r2, #6
 800584e:	e750      	b.n	80056f2 <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 8005850:	b002      	add	sp, #8
 8005852:	bcf0      	pop	{r4, r5, r6, r7}
 8005854:	4770      	bx	lr
 8005856:	4770      	bx	lr
 8005858:	40013800 	.word	0x40013800
 800585c:	40013c00 	.word	0x40013c00
 8005860:	40023800 	.word	0x40023800
 8005864:	40020000 	.word	0x40020000

08005868 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005868:	b10a      	cbz	r2, 800586e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800586a:	6181      	str	r1, [r0, #24]
 800586c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800586e:	0409      	lsls	r1, r1, #16
 8005870:	6181      	str	r1, [r0, #24]
  }
}
 8005872:	4770      	bx	lr

08005874 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005874:	4b01      	ldr	r3, [pc, #4]	; (800587c <HAL_RCC_GetHCLKFreq+0x8>)
 8005876:	6818      	ldr	r0, [r3, #0]
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	20000000 	.word	0x20000000

08005880 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005880:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005882:	680c      	ldr	r4, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005884:	fa94 f4a4 	rbit	r4, r4
 8005888:	fab4 f484 	clz	r4, r4
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800588c:	e04a      	b.n	8005924 <LL_GPIO_Init+0xa4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800588e:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005890:	6882      	ldr	r2, [r0, #8]
 8005892:	fa93 f5a3 	rbit	r5, r3
 8005896:	fab5 f585 	clz	r5, r5
 800589a:	006d      	lsls	r5, r5, #1
 800589c:	2703      	movs	r7, #3
 800589e:	fa07 f505 	lsl.w	r5, r7, r5
 80058a2:	ea22 0205 	bic.w	r2, r2, r5
 80058a6:	fa93 f5a3 	rbit	r5, r3
 80058aa:	fab5 f585 	clz	r5, r5
 80058ae:	006d      	lsls	r5, r5, #1
 80058b0:	fa06 f505 	lsl.w	r5, r6, r5
 80058b4:	432a      	orrs	r2, r5
 80058b6:	6082      	str	r2, [r0, #8]
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80058b8:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80058ba:	6842      	ldr	r2, [r0, #4]
 80058bc:	ea22 0203 	bic.w	r2, r2, r3
 80058c0:	fb03 f505 	mul.w	r5, r3, r5
 80058c4:	432a      	orrs	r2, r5
 80058c6:	6042      	str	r2, [r0, #4]
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80058c8:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80058ca:	68c2      	ldr	r2, [r0, #12]
 80058cc:	fa93 f5a3 	rbit	r5, r3
 80058d0:	fab5 f585 	clz	r5, r5
 80058d4:	006d      	lsls	r5, r5, #1
 80058d6:	2703      	movs	r7, #3
 80058d8:	fa07 f505 	lsl.w	r5, r7, r5
 80058dc:	ea22 0205 	bic.w	r2, r2, r5
 80058e0:	fa93 f5a3 	rbit	r5, r3
 80058e4:	fab5 f585 	clz	r5, r5
 80058e8:	006d      	lsls	r5, r5, #1
 80058ea:	fa06 f505 	lsl.w	r5, r6, r5
 80058ee:	432a      	orrs	r2, r5
 80058f0:	60c2      	str	r2, [r0, #12]
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80058f2:	684a      	ldr	r2, [r1, #4]
 80058f4:	2a02      	cmp	r2, #2
 80058f6:	d022      	beq.n	800593e <LL_GPIO_Init+0xbe>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80058f8:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80058fa:	6805      	ldr	r5, [r0, #0]
 80058fc:	fa93 f6a3 	rbit	r6, r3
 8005900:	fab6 f686 	clz	r6, r6
 8005904:	0076      	lsls	r6, r6, #1
 8005906:	2703      	movs	r7, #3
 8005908:	fa07 f606 	lsl.w	r6, r7, r6
 800590c:	ea25 0506 	bic.w	r5, r5, r6
 8005910:	fa93 f3a3 	rbit	r3, r3
 8005914:	fab3 f383 	clz	r3, r3
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	fa02 f303 	lsl.w	r3, r2, r3
 800591e:	432b      	orrs	r3, r5
 8005920:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8005922:	3401      	adds	r4, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005924:	680b      	ldr	r3, [r1, #0]
 8005926:	fa33 f204 	lsrs.w	r2, r3, r4
 800592a:	d03c      	beq.n	80059a6 <LL_GPIO_Init+0x126>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800592c:	2201      	movs	r2, #1
 800592e:	40a2      	lsls	r2, r4
    if (currentpin)
 8005930:	4013      	ands	r3, r2
 8005932:	d0f6      	beq.n	8005922 <LL_GPIO_Init+0xa2>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005934:	684a      	ldr	r2, [r1, #4]
 8005936:	3a01      	subs	r2, #1
 8005938:	2a01      	cmp	r2, #1
 800593a:	d8c5      	bhi.n	80058c8 <LL_GPIO_Init+0x48>
 800593c:	e7a7      	b.n	800588e <LL_GPIO_Init+0xe>
 800593e:	fa93 f2a3 	rbit	r2, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005942:	fab2 f282 	clz	r2, r2
 8005946:	2a07      	cmp	r2, #7
 8005948:	d815      	bhi.n	8005976 <LL_GPIO_Init+0xf6>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800594a:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800594c:	6a02      	ldr	r2, [r0, #32]
 800594e:	fa93 f5a3 	rbit	r5, r3
 8005952:	fab5 f585 	clz	r5, r5
 8005956:	00ad      	lsls	r5, r5, #2
 8005958:	270f      	movs	r7, #15
 800595a:	fa07 f505 	lsl.w	r5, r7, r5
 800595e:	ea22 0205 	bic.w	r2, r2, r5
 8005962:	fa93 f5a3 	rbit	r5, r3
 8005966:	fab5 f585 	clz	r5, r5
 800596a:	00ad      	lsls	r5, r5, #2
 800596c:	fa06 f505 	lsl.w	r5, r6, r5
 8005970:	432a      	orrs	r2, r5
 8005972:	6202      	str	r2, [r0, #32]
}
 8005974:	e7c0      	b.n	80058f8 <LL_GPIO_Init+0x78>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005976:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005978:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800597a:	0a1a      	lsrs	r2, r3, #8
 800597c:	fa92 f7a2 	rbit	r7, r2
 8005980:	fab7 f787 	clz	r7, r7
 8005984:	00bf      	lsls	r7, r7, #2
 8005986:	f04f 0c0f 	mov.w	ip, #15
 800598a:	fa0c f707 	lsl.w	r7, ip, r7
 800598e:	ea26 0607 	bic.w	r6, r6, r7
 8005992:	fa92 f2a2 	rbit	r2, r2
 8005996:	fab2 f282 	clz	r2, r2
 800599a:	0092      	lsls	r2, r2, #2
 800599c:	fa05 f202 	lsl.w	r2, r5, r2
 80059a0:	4332      	orrs	r2, r6
 80059a2:	6242      	str	r2, [r0, #36]	; 0x24
}
 80059a4:	e7a8      	b.n	80058f8 <LL_GPIO_Init+0x78>
  }

  return (SUCCESS);
}
 80059a6:	2000      	movs	r0, #0
 80059a8:	bcf0      	pop	{r4, r5, r6, r7}
 80059aa:	4770      	bx	lr

080059ac <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80059ac:	4b03      	ldr	r3, [pc, #12]	; (80059bc <RCC_GetHCLKClockFreq+0x10>)
 80059ae:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80059b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80059b4:	4a02      	ldr	r2, [pc, #8]	; (80059c0 <RCC_GetHCLKClockFreq+0x14>)
 80059b6:	5cd3      	ldrb	r3, [r2, r3]
}
 80059b8:	40d8      	lsrs	r0, r3
 80059ba:	4770      	bx	lr
 80059bc:	40023800 	.word	0x40023800
 80059c0:	080153d4 	.word	0x080153d4

080059c4 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80059c4:	4b03      	ldr	r3, [pc, #12]	; (80059d4 <RCC_GetPCLK1ClockFreq+0x10>)
 80059c6:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80059c8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80059cc:	4a02      	ldr	r2, [pc, #8]	; (80059d8 <RCC_GetPCLK1ClockFreq+0x14>)
 80059ce:	5cd3      	ldrb	r3, [r2, r3]
}
 80059d0:	40d8      	lsrs	r0, r3
 80059d2:	4770      	bx	lr
 80059d4:	40023800 	.word	0x40023800
 80059d8:	080153e4 	.word	0x080153e4

080059dc <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80059dc:	4b03      	ldr	r3, [pc, #12]	; (80059ec <RCC_GetPCLK2ClockFreq+0x10>)
 80059de:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80059e0:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80059e4:	4a02      	ldr	r2, [pc, #8]	; (80059f0 <RCC_GetPCLK2ClockFreq+0x14>)
 80059e6:	5cd3      	ldrb	r3, [r2, r3]
}
 80059e8:	40d8      	lsrs	r0, r3
 80059ea:	4770      	bx	lr
 80059ec:	40023800 	.word	0x40023800
 80059f0:	080153e4 	.word	0x080153e4

080059f4 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80059f4:	4b0f      	ldr	r3, [pc, #60]	; (8005a34 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 80059fc:	b923      	cbnz	r3, 8005a08 <RCC_PLL_GetFreqDomain_SYS+0x14>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80059fe:	4b0e      	ldr	r3, [pc, #56]	; (8005a38 <RCC_PLL_GetFreqDomain_SYS+0x44>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005a00:	2808      	cmp	r0, #8
 8005a02:	d003      	beq.n	8005a0c <RCC_PLL_GetFreqDomain_SYS+0x18>
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8005a04:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 8005a06:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 8005a08:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8005a0a:	e7f9      	b.n	8005a00 <RCC_PLL_GetFreqDomain_SYS+0xc>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005a0c:	4a09      	ldr	r2, [pc, #36]	; (8005a34 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8005a0e:	6850      	ldr	r0, [r2, #4]
 8005a10:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005a14:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005a18:	6850      	ldr	r0, [r2, #4]
 8005a1a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8005a1e:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005a22:	6853      	ldr	r3, [r2, #4]
 8005a24:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005a28:	3301      	adds	r3, #1
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40023800 	.word	0x40023800
 8005a38:	00f42400 	.word	0x00f42400
 8005a3c:	007a1200 	.word	0x007a1200

08005a40 <RCC_GetSystemClockFreq>:
{
 8005a40:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005a42:	4b08      	ldr	r3, [pc, #32]	; (8005a64 <RCC_GetSystemClockFreq+0x24>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d005      	beq.n	8005a5a <RCC_GetSystemClockFreq+0x1a>
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d105      	bne.n	8005a5e <RCC_GetSystemClockFreq+0x1e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005a52:	2008      	movs	r0, #8
 8005a54:	f7ff ffce 	bl	80059f4 <RCC_PLL_GetFreqDomain_SYS>
      break;
 8005a58:	e002      	b.n	8005a60 <RCC_GetSystemClockFreq+0x20>
      frequency = HSE_VALUE;
 8005a5a:	4803      	ldr	r0, [pc, #12]	; (8005a68 <RCC_GetSystemClockFreq+0x28>)
 8005a5c:	e000      	b.n	8005a60 <RCC_GetSystemClockFreq+0x20>
  switch (LL_RCC_GetSysClkSource())
 8005a5e:	4803      	ldr	r0, [pc, #12]	; (8005a6c <RCC_GetSystemClockFreq+0x2c>)
}
 8005a60:	bd08      	pop	{r3, pc}
 8005a62:	bf00      	nop
 8005a64:	40023800 	.word	0x40023800
 8005a68:	007a1200 	.word	0x007a1200
 8005a6c:	00f42400 	.word	0x00f42400

08005a70 <LL_RCC_GetSystemClocksFreq>:
{
 8005a70:	b510      	push	{r4, lr}
 8005a72:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005a74:	f7ff ffe4 	bl	8005a40 <RCC_GetSystemClockFreq>
 8005a78:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005a7a:	f7ff ff97 	bl	80059ac <RCC_GetHCLKClockFreq>
 8005a7e:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005a80:	f7ff ffa0 	bl	80059c4 <RCC_GetPCLK1ClockFreq>
 8005a84:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005a86:	6860      	ldr	r0, [r4, #4]
 8005a88:	f7ff ffa8 	bl	80059dc <RCC_GetPCLK2ClockFreq>
 8005a8c:	60e0      	str	r0, [r4, #12]
}
 8005a8e:	bd10      	pop	{r4, pc}

08005a90 <LL_USART_Init>:
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005a90:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005a92:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005a96:	d001      	beq.n	8005a9c <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 8005a98:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8005a9a:	4770      	bx	lr
{
 8005a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	4604      	mov	r4, r0
 8005aa2:	460d      	mov	r5, r1
    MODIFY_REG(USARTx->CR1,
 8005aa4:	68c3      	ldr	r3, [r0, #12]
 8005aa6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005aaa:	f023 030c 	bic.w	r3, r3, #12
 8005aae:	684a      	ldr	r2, [r1, #4]
 8005ab0:	68c9      	ldr	r1, [r1, #12]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	6929      	ldr	r1, [r5, #16]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	69a9      	ldr	r1, [r5, #24]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60c3      	str	r3, [r0, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005ac0:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005ac2:	6902      	ldr	r2, [r0, #16]
 8005ac4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	6103      	str	r3, [r0, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005acc:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005ace:	6942      	ldr	r2, [r0, #20]
 8005ad0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005ad8:	4668      	mov	r0, sp
 8005ada:	f7ff ffc9 	bl	8005a70 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005ade:	4b43      	ldr	r3, [pc, #268]	; (8005bec <LL_USART_Init+0x15c>)
 8005ae0:	429c      	cmp	r4, r3
 8005ae2:	d010      	beq.n	8005b06 <LL_USART_Init+0x76>
    else if (USARTx == USART2)
 8005ae4:	4b42      	ldr	r3, [pc, #264]	; (8005bf0 <LL_USART_Init+0x160>)
 8005ae6:	429c      	cmp	r4, r3
 8005ae8:	d014      	beq.n	8005b14 <LL_USART_Init+0x84>
    else if (USARTx == USART3)
 8005aea:	4b42      	ldr	r3, [pc, #264]	; (8005bf4 <LL_USART_Init+0x164>)
 8005aec:	429c      	cmp	r4, r3
 8005aee:	d013      	beq.n	8005b18 <LL_USART_Init+0x88>
    else if (USARTx == USART6)
 8005af0:	4b41      	ldr	r3, [pc, #260]	; (8005bf8 <LL_USART_Init+0x168>)
 8005af2:	429c      	cmp	r4, r3
 8005af4:	d012      	beq.n	8005b1c <LL_USART_Init+0x8c>
    else if (USARTx == UART4)
 8005af6:	4b41      	ldr	r3, [pc, #260]	; (8005bfc <LL_USART_Init+0x16c>)
 8005af8:	429c      	cmp	r4, r3
 8005afa:	d011      	beq.n	8005b20 <LL_USART_Init+0x90>
    else if (USARTx == UART5)
 8005afc:	4b40      	ldr	r3, [pc, #256]	; (8005c00 <LL_USART_Init+0x170>)
 8005afe:	429c      	cmp	r4, r3
 8005b00:	d010      	beq.n	8005b24 <LL_USART_Init+0x94>
  ErrorStatus status = ERROR;
 8005b02:	2001      	movs	r0, #1
 8005b04:	e070      	b.n	8005be8 <LL_USART_Init+0x158>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005b06:	9803      	ldr	r0, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	d06c      	beq.n	8005be6 <LL_USART_Init+0x156>
        && (USART_InitStruct->BaudRate != 0U))
 8005b0c:	682b      	ldr	r3, [r5, #0]
 8005b0e:	b95b      	cbnz	r3, 8005b28 <LL_USART_Init+0x98>
  ErrorStatus status = ERROR;
 8005b10:	2001      	movs	r0, #1
 8005b12:	e069      	b.n	8005be8 <LL_USART_Init+0x158>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005b14:	9802      	ldr	r0, [sp, #8]
 8005b16:	e7f7      	b.n	8005b08 <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005b18:	9802      	ldr	r0, [sp, #8]
 8005b1a:	e7f5      	b.n	8005b08 <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005b1c:	9803      	ldr	r0, [sp, #12]
 8005b1e:	e7f3      	b.n	8005b08 <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005b20:	9802      	ldr	r0, [sp, #8]
 8005b22:	e7f1      	b.n	8005b08 <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005b24:	9802      	ldr	r0, [sp, #8]
 8005b26:	e7ef      	b.n	8005b08 <LL_USART_Init+0x78>
      LL_USART_SetBaudRate(USARTx,
 8005b28:	69aa      	ldr	r2, [r5, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005b2a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005b2e:	d02c      	beq.n	8005b8a <LL_USART_Init+0xfa>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005b30:	2600      	movs	r6, #0
 8005b32:	1805      	adds	r5, r0, r0
 8005b34:	eb46 0106 	adc.w	r1, r6, r6
 8005b38:	182d      	adds	r5, r5, r0
 8005b3a:	eb46 0101 	adc.w	r1, r6, r1
 8005b3e:	00ca      	lsls	r2, r1, #3
 8005b40:	ea42 7255 	orr.w	r2, r2, r5, lsr #29
 8005b44:	00ef      	lsls	r7, r5, #3
 8005b46:	4611      	mov	r1, r2
 8005b48:	009a      	lsls	r2, r3, #2
 8005b4a:	0f9b      	lsrs	r3, r3, #30
 8005b4c:	1838      	adds	r0, r7, r0
 8005b4e:	eb46 0101 	adc.w	r1, r6, r1
 8005b52:	f7fe fb95 	bl	8004280 <__aeabi_uldivmod>
 8005b56:	492b      	ldr	r1, [pc, #172]	; (8005c04 <LL_USART_Init+0x174>)
 8005b58:	fba1 3200 	umull	r3, r2, r1, r0
 8005b5c:	0953      	lsrs	r3, r2, #5
 8005b5e:	011a      	lsls	r2, r3, #4
 8005b60:	b292      	uxth	r2, r2
 8005b62:	2564      	movs	r5, #100	; 0x64
 8005b64:	fb05 0313 	mls	r3, r5, r3, r0
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	3332      	adds	r3, #50	; 0x32
 8005b6c:	fba1 1303 	umull	r1, r3, r1, r3
 8005b70:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8005b74:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8005b78:	440a      	add	r2, r1
 8005b7a:	b292      	uxth	r2, r2
 8005b7c:	f003 030f 	and.w	r3, r3, #15
 8005b80:	4413      	add	r3, r2
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8005b86:	2000      	movs	r0, #0
}
 8005b88:	e02e      	b.n	8005be8 <LL_USART_Init+0x158>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005b8a:	2600      	movs	r6, #0
 8005b8c:	1805      	adds	r5, r0, r0
 8005b8e:	eb46 0106 	adc.w	r1, r6, r6
 8005b92:	182d      	adds	r5, r5, r0
 8005b94:	eb46 0101 	adc.w	r1, r6, r1
 8005b98:	00ca      	lsls	r2, r1, #3
 8005b9a:	ea42 7255 	orr.w	r2, r2, r5, lsr #29
 8005b9e:	00ef      	lsls	r7, r5, #3
 8005ba0:	4611      	mov	r1, r2
 8005ba2:	18da      	adds	r2, r3, r3
 8005ba4:	eb46 0306 	adc.w	r3, r6, r6
 8005ba8:	1838      	adds	r0, r7, r0
 8005baa:	eb46 0101 	adc.w	r1, r6, r1
 8005bae:	f7fe fb67 	bl	8004280 <__aeabi_uldivmod>
 8005bb2:	4914      	ldr	r1, [pc, #80]	; (8005c04 <LL_USART_Init+0x174>)
 8005bb4:	fba1 3200 	umull	r3, r2, r1, r0
 8005bb8:	0953      	lsrs	r3, r2, #5
 8005bba:	011a      	lsls	r2, r3, #4
 8005bbc:	b292      	uxth	r2, r2
 8005bbe:	2564      	movs	r5, #100	; 0x64
 8005bc0:	fb05 0313 	mls	r3, r5, r3, r0
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	3332      	adds	r3, #50	; 0x32
 8005bc8:	fba1 1303 	umull	r1, r3, r1, r3
 8005bcc:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8005bd0:	0059      	lsls	r1, r3, #1
 8005bd2:	f401 71f8 	and.w	r1, r1, #496	; 0x1f0
 8005bd6:	440a      	add	r2, r1
 8005bd8:	b292      	uxth	r2, r2
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	4413      	add	r3, r2
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	60a3      	str	r3, [r4, #8]
 8005be4:	e7cf      	b.n	8005b86 <LL_USART_Init+0xf6>
  ErrorStatus status = ERROR;
 8005be6:	2001      	movs	r0, #1
}
 8005be8:	b005      	add	sp, #20
 8005bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bec:	40011000 	.word	0x40011000
 8005bf0:	40004400 	.word	0x40004400
 8005bf4:	40004800 	.word	0x40004800
 8005bf8:	40011400 	.word	0x40011400
 8005bfc:	40004c00 	.word	0x40004c00
 8005c00:	40005000 	.word	0x40005000
 8005c04:	51eb851f 	.word	0x51eb851f

08005c08 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005c08:	4b01      	ldr	r3, [pc, #4]	; (8005c10 <LL_SetSystemCoreClock+0x8>)
 8005c0a:	6018      	str	r0, [r3, #0]
}
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	20000000 	.word	0x20000000

08005c14 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005c14:	b530      	push	{r4, r5, lr}
 8005c16:	b085      	sub	sp, #20
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8005c18:	f000 fdec 	bl	80067f4 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8005c1c:	491a      	ldr	r1, [pc, #104]	; (8005c88 <MX_LWIP_Init+0x74>)
 8005c1e:	2500      	movs	r5, #0
 8005c20:	600d      	str	r5, [r1, #0]
  netmask.addr = 0;
 8005c22:	4a1a      	ldr	r2, [pc, #104]	; (8005c8c <MX_LWIP_Init+0x78>)
 8005c24:	6015      	str	r5, [r2, #0]
  gw.addr = 0;
 8005c26:	4b1a      	ldr	r3, [pc, #104]	; (8005c90 <MX_LWIP_Init+0x7c>)
 8005c28:	601d      	str	r5, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005c2a:	4c1a      	ldr	r4, [pc, #104]	; (8005c94 <MX_LWIP_Init+0x80>)
 8005c2c:	481a      	ldr	r0, [pc, #104]	; (8005c98 <MX_LWIP_Init+0x84>)
 8005c2e:	9002      	str	r0, [sp, #8]
 8005c30:	481a      	ldr	r0, [pc, #104]	; (8005c9c <MX_LWIP_Init+0x88>)
 8005c32:	9001      	str	r0, [sp, #4]
 8005c34:	9500      	str	r5, [sp, #0]
 8005c36:	4620      	mov	r0, r4
 8005c38:	f001 fa0e 	bl	8007058 <netif_add>

  /* Create IPv6 local address */
  netif_create_ip6_linklocal_address(&gnetif, 0);
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	4620      	mov	r0, r4
 8005c40:	f001 fc16 	bl	8007470 <netif_create_ip6_linklocal_address>
  netif_ip6_addr_set_state(&gnetif, 0, IP6_ADDR_VALID);
 8005c44:	2210      	movs	r2, #16
 8005c46:	4629      	mov	r1, r5
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f001 fb67 	bl	800731c <netif_ip6_addr_set_state>
  gnetif.ip6_autoconfig_enabled = 1;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f884 30e3 	strb.w	r3, [r4, #227]	; 0xe3

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005c54:	4620      	mov	r0, r4
 8005c56:	f001 fb11 	bl	800727c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005c5a:	f894 30df 	ldrb.w	r3, [r4, #223]	; 0xdf
 8005c5e:	f013 0f04 	tst.w	r3, #4
 8005c62:	d00c      	beq.n	8005c7e <MX_LWIP_Init+0x6a>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005c64:	4620      	mov	r0, r4
 8005c66:	f001 fb0f 	bl	8007288 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005c6a:	4c0a      	ldr	r4, [pc, #40]	; (8005c94 <MX_LWIP_Init+0x80>)
 8005c6c:	490c      	ldr	r1, [pc, #48]	; (8005ca0 <MX_LWIP_Init+0x8c>)
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f001 fb50 	bl	8007314 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8005c74:	4620      	mov	r0, r4
 8005c76:	f008 fb33 	bl	800e2e0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005c7a:	b005      	add	sp, #20
 8005c7c:	bd30      	pop	{r4, r5, pc}
    netif_set_down(&gnetif);
 8005c7e:	4805      	ldr	r0, [pc, #20]	; (8005c94 <MX_LWIP_Init+0x80>)
 8005c80:	f001 fb24 	bl	80072cc <netif_set_down>
 8005c84:	e7f1      	b.n	8005c6a <MX_LWIP_Init+0x56>
 8005c86:	bf00      	nop
 8005c88:	200008f4 	.word	0x200008f4
 8005c8c:	200008f8 	.word	0x200008f8
 8005c90:	200008fc 	.word	0x200008fc
 8005c94:	20000804 	.word	0x20000804
 8005c98:	08014021 	.word	0x08014021
 8005c9c:	08006045 	.word	0x08006045
 8005ca0:	080060a9 	.word	0x080060a9

08005ca4 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005ca4:	b508      	push	{r3, lr}
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005ca6:	4803      	ldr	r0, [pc, #12]	; (8005cb4 <MX_LWIP_Process+0x10>)
 8005ca8:	f000 f9bc 	bl	8006024 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005cac:	f006 f9b4 	bl	800c018 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005cb0:	bd08      	pop	{r3, pc}
 8005cb2:	bf00      	nop
 8005cb4:	20000804 	.word	0x20000804

08005cb8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t payloadoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t i=0;

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8005cbc:	4833      	ldr	r0, [pc, #204]	; (8005d8c <low_level_input+0xd4>)
 8005cbe:	f7ff fa23 	bl	8005108 <HAL_ETH_GetReceivedFrame>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d15e      	bne.n	8005d84 <low_level_input+0xcc>

    return NULL;

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005cc6:	4b31      	ldr	r3, [pc, #196]	; (8005d8c <low_level_input+0xd4>)
 8005cc8:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005cca:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40

  if (len > 0)
 8005cce:	b979      	cbnz	r1, 8005cf0 <low_level_input+0x38>
  struct pbuf *p = NULL;
 8005cd0:	f04f 0a00 	mov.w	sl, #0
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005cd4:	4b2d      	ldr	r3, [pc, #180]	; (8005d8c <low_level_input+0xd4>)
 8005cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005cd8:	2100      	movs	r1, #0
 8005cda:	4a2c      	ldr	r2, [pc, #176]	; (8005d8c <low_level_input+0xd4>)
 8005cdc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cde:	428a      	cmp	r2, r1
 8005ce0:	d93b      	bls.n	8005d5a <low_level_input+0xa2>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005ce8:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005cea:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005cec:	3101      	adds	r1, #1
 8005cee:	e7f4      	b.n	8005cda <low_level_input+0x22>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005cf0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005cf4:	f001 fdb0 	bl	8007858 <pbuf_alloc>
  if (p != NULL)
 8005cf8:	4682      	mov	sl, r0
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d0ea      	beq.n	8005cd4 <low_level_input+0x1c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005cfe:	4b23      	ldr	r3, [pc, #140]	; (8005d8c <low_level_input+0xd4>)
 8005d00:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005d02:	4681      	mov	r9, r0
    bufferoffset = 0;
 8005d04:	2400      	movs	r4, #0
    for(q = p; q != NULL; q = q->next)
 8005d06:	e021      	b.n	8005d4c <low_level_input+0x94>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005d08:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8005d0c:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 8005d10:	3204      	adds	r2, #4
 8005d12:	eb08 0104 	add.w	r1, r8, r4
 8005d16:	4430      	add	r0, r6
 8005d18:	f00e fa5c 	bl	80141d4 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005d1c:	68ff      	ldr	r7, [r7, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005d1e:	f8d7 8008 	ldr.w	r8, [r7, #8]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005d22:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005d26:	1b36      	subs	r6, r6, r4
 8005d28:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
        bufferoffset = 0;
 8005d2c:	2400      	movs	r4, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005d2e:	18a5      	adds	r5, r4, r2
 8005d30:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005d34:	429d      	cmp	r5, r3
 8005d36:	d8e7      	bhi.n	8005d08 <low_level_input+0x50>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005d38:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8005d3c:	eb08 0104 	add.w	r1, r8, r4
 8005d40:	4430      	add	r0, r6
 8005d42:	f00e fa47 	bl	80141d4 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8005d46:	f8d9 9000 	ldr.w	r9, [r9]
      bufferoffset = bufferoffset + byteslefttocopy;
 8005d4a:	462c      	mov	r4, r5
    for(q = p; q != NULL; q = q->next)
 8005d4c:	f1b9 0f00 	cmp.w	r9, #0
 8005d50:	d0c0      	beq.n	8005cd4 <low_level_input+0x1c>
      byteslefttocopy = q->len;
 8005d52:	f8b9 200a 	ldrh.w	r2, [r9, #10]
      payloadoffset = 0;
 8005d56:	2600      	movs	r6, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005d58:	e7e9      	b.n	8005d2e <low_level_input+0x76>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005d5a:	4b0c      	ldr	r3, [pc, #48]	; (8005d8c <low_level_input+0xd4>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f241 0214 	movw	r2, #4116	; 0x1014
 8005d66:	589a      	ldr	r2, [r3, r2]
 8005d68:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005d6c:	d007      	beq.n	8005d7e <low_level_input+0xc6>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005d6e:	f241 0214 	movw	r2, #4116	; 0x1014
 8005d72:	2180      	movs	r1, #128	; 0x80
 8005d74:	5099      	str	r1, [r3, r2]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005d76:	f241 0208 	movw	r2, #4104	; 0x1008
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	5099      	str	r1, [r3, r2]
  }
  return p;
}
 8005d7e:	4650      	mov	r0, sl
 8005d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return NULL;
 8005d84:	f04f 0a00 	mov.w	sl, #0
 8005d88:	e7f9      	b.n	8005d7e <low_level_input+0xc6>
 8005d8a:	bf00      	nop
 8005d8c:	200021d0 	.word	0x200021d0

08005d90 <low_level_output>:
{
 8005d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d94:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005d96:	4b2c      	ldr	r3, [pc, #176]	; (8005e48 <low_level_output+0xb8>)
 8005d98:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8005d9a:	f8d6 a008 	ldr.w	sl, [r6, #8]
  bufferoffset = 0;
 8005d9e:	2400      	movs	r4, #0
  uint32_t framelength = 0;
 8005da0:	4627      	mov	r7, r4
  for(q = p; q != NULL; q = q->next)
 8005da2:	f1bb 0f00 	cmp.w	fp, #0
 8005da6:	d032      	beq.n	8005e0e <low_level_output+0x7e>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005da8:	6833      	ldr	r3, [r6, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	db35      	blt.n	8005e1a <low_level_output+0x8a>
      byteslefttocopy = q->len;
 8005dae:	f8bb 900a 	ldrh.w	r9, [fp, #10]
      payloadoffset = 0;
 8005db2:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005db4:	eb04 0809 	add.w	r8, r4, r9
 8005db8:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005dbc:	4598      	cmp	r8, r3
 8005dbe:	d919      	bls.n	8005df4 <low_level_output+0x64>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005dc0:	f8db 1004 	ldr.w	r1, [fp, #4]
 8005dc4:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 8005dc8:	3204      	adds	r2, #4
 8005dca:	4429      	add	r1, r5
 8005dcc:	eb0a 0004 	add.w	r0, sl, r4
 8005dd0:	f00e fa00 	bl	80141d4 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005dd4:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005dd6:	6833      	ldr	r3, [r6, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	db21      	blt.n	8005e20 <low_level_output+0x90>
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005ddc:	f8d6 a008 	ldr.w	sl, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005de0:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005de4:	1b2d      	subs	r5, r5, r4
 8005de6:	f205 55f4 	addw	r5, r5, #1524	; 0x5f4
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005dea:	1b3f      	subs	r7, r7, r4
 8005dec:	f207 57f4 	addw	r7, r7, #1524	; 0x5f4
        bufferoffset = 0;
 8005df0:	2400      	movs	r4, #0
 8005df2:	e7df      	b.n	8005db4 <low_level_output+0x24>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005df4:	f8db 1004 	ldr.w	r1, [fp, #4]
 8005df8:	464a      	mov	r2, r9
 8005dfa:	4429      	add	r1, r5
 8005dfc:	eb0a 0004 	add.w	r0, sl, r4
 8005e00:	f00e f9e8 	bl	80141d4 <memcpy>
      framelength = framelength + byteslefttocopy;
 8005e04:	444f      	add	r7, r9
  for(q = p; q != NULL; q = q->next)
 8005e06:	f8db b000 	ldr.w	fp, [fp]
      bufferoffset = bufferoffset + byteslefttocopy;
 8005e0a:	4644      	mov	r4, r8
 8005e0c:	e7c9      	b.n	8005da2 <low_level_output+0x12>
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005e0e:	4639      	mov	r1, r7
 8005e10:	480d      	ldr	r0, [pc, #52]	; (8005e48 <low_level_output+0xb8>)
 8005e12:	f7ff f8e9 	bl	8004fe8 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 8005e16:	2000      	movs	r0, #0
 8005e18:	e004      	b.n	8005e24 <low_level_output+0x94>
        errval = ERR_USE;
 8005e1a:	f06f 0007 	mvn.w	r0, #7
 8005e1e:	e001      	b.n	8005e24 <low_level_output+0x94>
          errval = ERR_USE;
 8005e20:	f06f 0007 	mvn.w	r0, #7
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005e24:	4b08      	ldr	r3, [pc, #32]	; (8005e48 <low_level_output+0xb8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f241 0214 	movw	r2, #4116	; 0x1014
 8005e2c:	589a      	ldr	r2, [r3, r2]
 8005e2e:	f012 0f20 	tst.w	r2, #32
 8005e32:	d007      	beq.n	8005e44 <low_level_output+0xb4>
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005e34:	f241 0214 	movw	r2, #4116	; 0x1014
 8005e38:	2120      	movs	r1, #32
 8005e3a:	5099      	str	r1, [r3, r2]
    heth.Instance->DMATPDR = 0;
 8005e3c:	f241 0204 	movw	r2, #4100	; 0x1004
 8005e40:	2100      	movs	r1, #0
 8005e42:	5099      	str	r1, [r3, r2]
}
 8005e44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e48:	200021d0 	.word	0x200021d0

08005e4c <low_level_init>:
{
 8005e4c:	b530      	push	{r4, r5, lr}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	4604      	mov	r4, r0
  heth.Instance = ETH;
 8005e52:	4832      	ldr	r0, [pc, #200]	; (8005f1c <low_level_init+0xd0>)
 8005e54:	4b32      	ldr	r3, [pc, #200]	; (8005f20 <low_level_init+0xd4>)
 8005e56:	6003      	str	r3, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005e58:	2201      	movs	r2, #1
 8005e5a:	6042      	str	r2, [r0, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005e5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e60:	6083      	str	r3, [r0, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005e62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e66:	60c3      	str	r3, [r0, #12]
  heth.Init.PhyAddress = LAN8720_PHY_ADDRESS;
 8005e68:	8202      	strh	r2, [r0, #16]
  MACAddr[0] = 0x00;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	f88d 3000 	strb.w	r3, [sp]
  MACAddr[1] = 0x80;
 8005e70:	2180      	movs	r1, #128	; 0x80
 8005e72:	f88d 1001 	strb.w	r1, [sp, #1]
  MACAddr[2] = 0xE1;
 8005e76:	21e1      	movs	r1, #225	; 0xe1
 8005e78:	f88d 1002 	strb.w	r1, [sp, #2]
  MACAddr[3] = 0x01;
 8005e7c:	f88d 2003 	strb.w	r2, [sp, #3]
  MACAddr[4] = 0x02;
 8005e80:	2202      	movs	r2, #2
 8005e82:	f88d 2004 	strb.w	r2, [sp, #4]
  MACAddr[5] = 0x03;
 8005e86:	2203      	movs	r2, #3
 8005e88:	f88d 2005 	strb.w	r2, [sp, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8005e8c:	f8c0 d014 	str.w	sp, [r0, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8005e90:	6183      	str	r3, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005e92:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005e94:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005e98:	6203      	str	r3, [r0, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005e9a:	f7ff f9f3 	bl	8005284 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 8005e9e:	b928      	cbnz	r0, 8005eac <low_level_init+0x60>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005ea0:	f894 30df 	ldrb.w	r3, [r4, #223]	; 0xdf
 8005ea4:	f043 0304 	orr.w	r3, r3, #4
 8005ea8:	f884 30df 	strb.w	r3, [r4, #223]	; 0xdf
  heth.Instance->MACFFR |= ETH_MULTICASTFRAMESFILTER_NONE;
 8005eac:	4d1b      	ldr	r5, [pc, #108]	; (8005f1c <low_level_init+0xd0>)
 8005eae:	682a      	ldr	r2, [r5, #0]
 8005eb0:	6853      	ldr	r3, [r2, #4]
 8005eb2:	f043 0310 	orr.w	r3, r3, #16
 8005eb6:	6053      	str	r3, [r2, #4]
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005eb8:	2304      	movs	r3, #4
 8005eba:	4a1a      	ldr	r2, [pc, #104]	; (8005f24 <low_level_init+0xd8>)
 8005ebc:	491a      	ldr	r1, [pc, #104]	; (8005f28 <low_level_init+0xdc>)
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	f7ff f820 	bl	8004f04 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005ec4:	2304      	movs	r3, #4
 8005ec6:	4a19      	ldr	r2, [pc, #100]	; (8005f2c <low_level_init+0xe0>)
 8005ec8:	4919      	ldr	r1, [pc, #100]	; (8005f30 <low_level_init+0xe4>)
 8005eca:	4628      	mov	r0, r5
 8005ecc:	f7ff f854 	bl	8004f78 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005ed0:	2306      	movs	r3, #6
 8005ed2:	f884 30de 	strb.w	r3, [r4, #222]	; 0xde
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005ed6:	696b      	ldr	r3, [r5, #20]
 8005ed8:	781a      	ldrb	r2, [r3, #0]
 8005eda:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005ede:	785a      	ldrb	r2, [r3, #1]
 8005ee0:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005ee4:	789a      	ldrb	r2, [r3, #2]
 8005ee6:	f884 20da 	strb.w	r2, [r4, #218]	; 0xda
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005eea:	78da      	ldrb	r2, [r3, #3]
 8005eec:	f884 20db 	strb.w	r2, [r4, #219]	; 0xdb
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005ef0:	791a      	ldrb	r2, [r3, #4]
 8005ef2:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005ef6:	795b      	ldrb	r3, [r3, #5]
 8005ef8:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
  netif->mtu = 1500;
 8005efc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005f00:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005f04:	f894 30df 	ldrb.w	r3, [r4, #223]	; 0xdf
 8005f08:	f043 030a 	orr.w	r3, r3, #10
 8005f0c:	f884 30df 	strb.w	r3, [r4, #223]	; 0xdf
  HAL_ETH_Start(&heth);
 8005f10:	4628      	mov	r0, r5
 8005f12:	f7ff fae3 	bl	80054dc <HAL_ETH_Start>
}
 8005f16:	b003      	add	sp, #12
 8005f18:	bd30      	pop	{r4, r5, pc}
 8005f1a:	bf00      	nop
 8005f1c:	200021d0 	.word	0x200021d0
 8005f20:	40028000 	.word	0x40028000
 8005f24:	20002218 	.word	0x20002218
 8005f28:	20000900 	.word	0x20000900
 8005f2c:	20000980 	.word	0x20000980
 8005f30:	20002150 	.word	0x20002150

08005f34 <HAL_ETH_MspInit>:
{
 8005f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f36:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f38:	2300      	movs	r3, #0
 8005f3a:	9307      	str	r3, [sp, #28]
 8005f3c:	9308      	str	r3, [sp, #32]
 8005f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f40:	930a      	str	r3, [sp, #40]	; 0x28
 8005f42:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8005f44:	6802      	ldr	r2, [r0, #0]
 8005f46:	4b33      	ldr	r3, [pc, #204]	; (8006014 <HAL_ETH_MspInit+0xe0>)
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d001      	beq.n	8005f50 <HAL_ETH_MspInit+0x1c>
}
 8005f4c:	b00d      	add	sp, #52	; 0x34
 8005f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8005f50:	2400      	movs	r4, #0
 8005f52:	9401      	str	r4, [sp, #4]
 8005f54:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8005f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f5a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005f5e:	631a      	str	r2, [r3, #48]	; 0x30
 8005f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f62:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8005f66:	9201      	str	r2, [sp, #4]
 8005f68:	9a01      	ldr	r2, [sp, #4]
 8005f6a:	9402      	str	r4, [sp, #8]
 8005f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f6e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005f72:	631a      	str	r2, [r3, #48]	; 0x30
 8005f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f76:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8005f7a:	9202      	str	r2, [sp, #8]
 8005f7c:	9a02      	ldr	r2, [sp, #8]
 8005f7e:	9403      	str	r4, [sp, #12]
 8005f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f82:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005f86:	631a      	str	r2, [r3, #48]	; 0x30
 8005f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f8a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005f8e:	9203      	str	r2, [sp, #12]
 8005f90:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f92:	9404      	str	r4, [sp, #16]
 8005f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f96:	f042 0204 	orr.w	r2, r2, #4
 8005f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8005f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f9e:	f002 0204 	and.w	r2, r2, #4
 8005fa2:	9204      	str	r2, [sp, #16]
 8005fa4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fa6:	9405      	str	r4, [sp, #20]
 8005fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005faa:	f042 0201 	orr.w	r2, r2, #1
 8005fae:	631a      	str	r2, [r3, #48]	; 0x30
 8005fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fb2:	f002 0201 	and.w	r2, r2, #1
 8005fb6:	9205      	str	r2, [sp, #20]
 8005fb8:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fba:	9406      	str	r4, [sp, #24]
 8005fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fbe:	f042 0202 	orr.w	r2, r2, #2
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	9306      	str	r3, [sp, #24]
 8005fcc:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005fce:	2332      	movs	r3, #50	; 0x32
 8005fd0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fd2:	2702      	movs	r7, #2
 8005fd4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fd6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fd8:	2603      	movs	r6, #3
 8005fda:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005fdc:	250b      	movs	r5, #11
 8005fde:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fe0:	a907      	add	r1, sp, #28
 8005fe2:	480d      	ldr	r0, [pc, #52]	; (8006018 <HAL_ETH_MspInit+0xe4>)
 8005fe4:	f7ff fb56 	bl	8005694 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005fe8:	2386      	movs	r3, #134	; 0x86
 8005fea:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fec:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fee:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ff0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005ff2:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ff4:	a907      	add	r1, sp, #28
 8005ff6:	4809      	ldr	r0, [pc, #36]	; (800601c <HAL_ETH_MspInit+0xe8>)
 8005ff8:	f7ff fb4c 	bl	8005694 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8005ffc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006000:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006002:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006004:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006006:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006008:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800600a:	a907      	add	r1, sp, #28
 800600c:	4804      	ldr	r0, [pc, #16]	; (8006020 <HAL_ETH_MspInit+0xec>)
 800600e:	f7ff fb41 	bl	8005694 <HAL_GPIO_Init>
}
 8006012:	e79b      	b.n	8005f4c <HAL_ETH_MspInit+0x18>
 8006014:	40028000 	.word	0x40028000
 8006018:	40020800 	.word	0x40020800
 800601c:	40020000 	.word	0x40020000
 8006020:	40020400 	.word	0x40020400

08006024 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006024:	b538      	push	{r3, r4, r5, lr}
 8006026:	4604      	mov	r4, r0
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8006028:	f7ff fe46 	bl	8005cb8 <low_level_input>

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800602c:	b128      	cbz	r0, 800603a <ethernetif_input+0x16>
 800602e:	4605      	mov	r5, r0

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8006030:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8006034:	4621      	mov	r1, r4
 8006036:	4798      	blx	r3

  if (err != ERR_OK)
 8006038:	b900      	cbnz	r0, 800603c <ethernetif_input+0x18>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
    p = NULL;
  }
}
 800603a:	bd38      	pop	{r3, r4, r5, pc}
    pbuf_free(p);
 800603c:	4628      	mov	r0, r5
 800603e:	f001 fba9 	bl	8007794 <pbuf_free>
    p = NULL;
 8006042:	e7fa      	b.n	800603a <ethernetif_input+0x16>

08006044 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006044:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006046:	4604      	mov	r4, r0
 8006048:	b198      	cbz	r0, 8006072 <ethernetif_init+0x2e>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800604a:	2373      	movs	r3, #115	; 0x73
 800604c:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
  netif->name[1] = IFNAME1;
 8006050:	2374      	movs	r3, #116	; 0x74
 8006052:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006056:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <ethernetif_init+0x40>)
 8006058:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
#endif /* LWIP_ARP */
#endif /* LWIP_ARP || LWIP_ETHERNET */
#endif /* LWIP_IPV4 */

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
 800605c:	4b0a      	ldr	r3, [pc, #40]	; (8006088 <ethernetif_init+0x44>)
 800605e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006062:	4b0a      	ldr	r3, [pc, #40]	; (800608c <ethernetif_init+0x48>)
 8006064:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8

  /* initialize the hardware */
  low_level_init(netif);
 8006068:	4620      	mov	r0, r4
 800606a:	f7ff feef 	bl	8005e4c <low_level_init>

  return ERR_OK;
}
 800606e:	2000      	movs	r0, #0
 8006070:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006072:	4b07      	ldr	r3, [pc, #28]	; (8006090 <ethernetif_init+0x4c>)
 8006074:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8006078:	4906      	ldr	r1, [pc, #24]	; (8006094 <ethernetif_init+0x50>)
 800607a:	4807      	ldr	r0, [pc, #28]	; (8006098 <ethernetif_init+0x54>)
 800607c:	f00e f8da 	bl	8014234 <iprintf>
 8006080:	e7e3      	b.n	800604a <ethernetif_init+0x6>
 8006082:	bf00      	nop
 8006084:	0800ec9d 	.word	0x0800ec9d
 8006088:	08010119 	.word	0x08010119
 800608c:	08005d91 	.word	0x08005d91
 8006090:	080153ec 	.word	0x080153ec
 8006094:	08015408 	.word	0x08015408
 8006098:	08015418 	.word	0x08015418

0800609c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800609c:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800609e:	f7fe fd75 	bl	8004b8c <HAL_GetTick>
}
 80060a2:	bd08      	pop	{r3, pc}

080060a4 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80060a4:	4770      	bx	lr
	...

080060a8 <ethernetif_update_config>:
{
 80060a8:	b530      	push	{r4, r5, lr}
 80060aa:	b083      	sub	sp, #12
 80060ac:	4604      	mov	r4, r0
  __IO uint32_t tickstart = 0;
 80060ae:	2300      	movs	r3, #0
 80060b0:	9301      	str	r3, [sp, #4]
  uint32_t regvalue = 0;
 80060b2:	9300      	str	r3, [sp, #0]
  if(netif_is_link_up(netif))
 80060b4:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 80060b8:	f013 0f04 	tst.w	r3, #4
 80060bc:	d051      	beq.n	8006162 <ethernetif_update_config+0xba>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80060be:	4b2b      	ldr	r3, [pc, #172]	; (800616c <ethernetif_update_config+0xc4>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d035      	beq.n	8006132 <ethernetif_update_config+0x8a>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80060c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80060ca:	2100      	movs	r1, #0
 80060cc:	4827      	ldr	r0, [pc, #156]	; (800616c <ethernetif_update_config+0xc4>)
 80060ce:	f7ff f89e 	bl	800520e <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 80060d2:	f7fe fd5b 	bl	8004b8c <HAL_GetTick>
 80060d6:	9001      	str	r0, [sp, #4]
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80060d8:	466a      	mov	r2, sp
 80060da:	2101      	movs	r1, #1
 80060dc:	4823      	ldr	r0, [pc, #140]	; (800616c <ethernetif_update_config+0xc4>)
 80060de:	f7ff f85a 	bl	8005196 <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 80060e2:	f7fe fd53 	bl	8004b8c <HAL_GetTick>
 80060e6:	9b01      	ldr	r3, [sp, #4]
 80060e8:	1ac3      	subs	r3, r0, r3
 80060ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060ee:	d820      	bhi.n	8006132 <ethernetif_update_config+0x8a>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80060f0:	9b00      	ldr	r3, [sp, #0]
 80060f2:	f013 0f20 	tst.w	r3, #32
 80060f6:	d0ef      	beq.n	80060d8 <ethernetif_update_config+0x30>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80060f8:	466a      	mov	r2, sp
 80060fa:	211f      	movs	r1, #31
 80060fc:	481b      	ldr	r0, [pc, #108]	; (800616c <ethernetif_update_config+0xc4>)
 80060fe:	f7ff f84a 	bl	8005196 <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006102:	9b00      	ldr	r3, [sp, #0]
 8006104:	f013 0f04 	tst.w	r3, #4
 8006108:	d00a      	beq.n	8006120 <ethernetif_update_config+0x78>
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800610a:	4a18      	ldr	r2, [pc, #96]	; (800616c <ethernetif_update_config+0xc4>)
 800610c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006110:	60d1      	str	r1, [r2, #12]
      if(regvalue & PHY_SPEED_STATUS)
 8006112:	f013 0f02 	tst.w	r3, #2
 8006116:	d007      	beq.n	8006128 <ethernetif_update_config+0x80>
        heth.Init.Speed = ETH_SPEED_10M;
 8006118:	4b14      	ldr	r3, [pc, #80]	; (800616c <ethernetif_update_config+0xc4>)
 800611a:	2200      	movs	r2, #0
 800611c:	609a      	str	r2, [r3, #8]
 800611e:	e013      	b.n	8006148 <ethernetif_update_config+0xa0>
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006120:	4a12      	ldr	r2, [pc, #72]	; (800616c <ethernetif_update_config+0xc4>)
 8006122:	2100      	movs	r1, #0
 8006124:	60d1      	str	r1, [r2, #12]
 8006126:	e7f4      	b.n	8006112 <ethernetif_update_config+0x6a>
        heth.Init.Speed = ETH_SPEED_100M;
 8006128:	4b10      	ldr	r3, [pc, #64]	; (800616c <ethernetif_update_config+0xc4>)
 800612a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800612e:	609a      	str	r2, [r3, #8]
 8006130:	e00a      	b.n	8006148 <ethernetif_update_config+0xa0>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006132:	480e      	ldr	r0, [pc, #56]	; (800616c <ethernetif_update_config+0xc4>)
 8006134:	68c2      	ldr	r2, [r0, #12]
 8006136:	f3c2 02cf 	ubfx	r2, r2, #3, #16
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800613a:	6883      	ldr	r3, [r0, #8]
 800613c:	f3c3 034f 	ubfx	r3, r3, #1, #16
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006140:	431a      	orrs	r2, r3
 8006142:	2100      	movs	r1, #0
 8006144:	f7ff f863 	bl	800520e <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8006148:	4d08      	ldr	r5, [pc, #32]	; (800616c <ethernetif_update_config+0xc4>)
 800614a:	2100      	movs	r1, #0
 800614c:	4628      	mov	r0, r5
 800614e:	f7ff fa09 	bl	8005564 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 8006152:	4628      	mov	r0, r5
 8006154:	f7ff f9c2 	bl	80054dc <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 8006158:	4620      	mov	r0, r4
 800615a:	f7ff ffa3 	bl	80060a4 <ethernetif_notify_conn_changed>
}
 800615e:	b003      	add	sp, #12
 8006160:	bd30      	pop	{r4, r5, pc}
    HAL_ETH_Stop(&heth);
 8006162:	4802      	ldr	r0, [pc, #8]	; (800616c <ethernetif_update_config+0xc4>)
 8006164:	f7ff f9dc 	bl	8005520 <HAL_ETH_Stop>
 8006168:	e7f6      	b.n	8006158 <ethernetif_update_config+0xb0>
 800616a:	bf00      	nop
 800616c:	200021d0 	.word	0x200021d0

08006170 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8006170:	0a03      	lsrs	r3, r0, #8
 8006172:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 8006176:	b280      	uxth	r0, r0
 8006178:	4770      	bx	lr

0800617a <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
 800617a:	0203      	lsls	r3, r0, #8
 800617c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006180:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006184:	0a02      	lsrs	r2, r0, #8
 8006186:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800618a:	4313      	orrs	r3, r2
}
 800618c:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 8006190:	4770      	bx	lr
	...

08006194 <dns_backupserver_available>:
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
  u8_t ret = 0;

  if (pentry) {
 8006194:	2800      	cmp	r0, #0
 8006196:	d036      	beq.n	8006206 <dns_backupserver_available+0x72>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8006198:	7fc0      	ldrb	r0, [r0, #31]
 800619a:	2800      	cmp	r0, #0
 800619c:	d135      	bne.n	800620a <dns_backupserver_available+0x76>
 800619e:	1c43      	adds	r3, r0, #1
 80061a0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80061a4:	4a1b      	ldr	r2, [pc, #108]	; (8006214 <dns_backupserver_available+0x80>)
 80061a6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80061aa:	7d12      	ldrb	r2, [r2, #20]
 80061ac:	2a06      	cmp	r2, #6
 80061ae:	d009      	beq.n	80061c4 <dns_backupserver_available+0x30>
 80061b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80061b4:	4a17      	ldr	r2, [pc, #92]	; (8006214 <dns_backupserver_available+0x80>)
 80061b6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80061ba:	3b00      	subs	r3, #0
 80061bc:	bf18      	it	ne
 80061be:	2301      	movne	r3, #1
 80061c0:	bb2b      	cbnz	r3, 800620e <dns_backupserver_available+0x7a>
 80061c2:	4770      	bx	lr
 80061c4:	460a      	mov	r2, r1
 80061c6:	4913      	ldr	r1, [pc, #76]	; (8006214 <dns_backupserver_available+0x80>)
 80061c8:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 80061cc:	b99a      	cbnz	r2, 80061f6 <dns_backupserver_available+0x62>
 80061ce:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80061d2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80061d6:	6852      	ldr	r2, [r2, #4]
 80061d8:	b97a      	cbnz	r2, 80061fa <dns_backupserver_available+0x66>
 80061da:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80061de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80061e2:	6892      	ldr	r2, [r2, #8]
 80061e4:	b95a      	cbnz	r2, 80061fe <dns_backupserver_available+0x6a>
 80061e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80061ea:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	b13b      	cbz	r3, 8006202 <dns_backupserver_available+0x6e>
 80061f2:	2301      	movs	r3, #1
 80061f4:	e7e4      	b.n	80061c0 <dns_backupserver_available+0x2c>
 80061f6:	2301      	movs	r3, #1
 80061f8:	e7e2      	b.n	80061c0 <dns_backupserver_available+0x2c>
 80061fa:	2301      	movs	r3, #1
 80061fc:	e7e0      	b.n	80061c0 <dns_backupserver_available+0x2c>
 80061fe:	2301      	movs	r3, #1
 8006200:	e7de      	b.n	80061c0 <dns_backupserver_available+0x2c>
 8006202:	2300      	movs	r3, #0
 8006204:	e7dc      	b.n	80061c0 <dns_backupserver_available+0x2c>
  u8_t ret = 0;
 8006206:	2000      	movs	r0, #0
 8006208:	4770      	bx	lr
 800620a:	2000      	movs	r0, #0
 800620c:	4770      	bx	lr
      ret = 1;
 800620e:	2001      	movs	r0, #1
    }
  }

  return ret;
}
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	20000128 	.word	0x20000128

08006218 <dns_create_txid>:
{
 8006218:	b508      	push	{r3, lr}
  txid = (u16_t)DNS_RAND_TXID();
 800621a:	f00e f899 	bl	8014350 <rand>
 800621e:	b280      	uxth	r0, r0
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8006220:	2300      	movs	r3, #0
 8006222:	e001      	b.n	8006228 <dns_create_txid+0x10>
 8006224:	3301      	adds	r3, #1
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b03      	cmp	r3, #3
 800622a:	d80f      	bhi.n	800624c <dns_create_txid+0x34>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800622c:	4908      	ldr	r1, [pc, #32]	; (8006250 <dns_create_txid+0x38>)
 800622e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006232:	fb02 1203 	mla	r2, r2, r3, r1
 8006236:	7f92      	ldrb	r2, [r2, #30]
 8006238:	2a02      	cmp	r2, #2
 800623a:	d1f3      	bne.n	8006224 <dns_create_txid+0xc>
        (dns_table[i].txid == txid)) {
 800623c:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006240:	fb02 1203 	mla	r2, r2, r3, r1
 8006244:	8b92      	ldrh	r2, [r2, #28]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8006246:	4282      	cmp	r2, r0
 8006248:	d1ec      	bne.n	8006224 <dns_create_txid+0xc>
 800624a:	e7e6      	b.n	800621a <dns_create_txid+0x2>
}
 800624c:	bd08      	pop	{r3, pc}
 800624e:	bf00      	nop
 8006250:	20000158 	.word	0x20000158

08006254 <dns_call_found>:
{
 8006254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006258:	4605      	mov	r5, r0
  if (addr != NULL) {
 800625a:	4688      	mov	r8, r1
 800625c:	b1a9      	cbz	r1, 800628a <dns_call_found+0x36>
    if (IP_IS_V6_VAL(*addr)) {
 800625e:	7d0b      	ldrb	r3, [r1, #20]
 8006260:	2b06      	cmp	r3, #6
 8006262:	d014      	beq.n	800628e <dns_call_found+0x3a>
      LWIP_ASSERT("invalid response", !LWIP_DNS_ADDRTYPE_IS_IPV6(dns_table[idx].reqaddrtype));
 8006264:	4a51      	ldr	r2, [pc, #324]	; (80063ac <dns_call_found+0x158>)
 8006266:	f44f 7394 	mov.w	r3, #296	; 0x128
 800626a:	fb03 2300 	mla	r3, r3, r0, r2
 800626e:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8006272:	2b03      	cmp	r3, #3
 8006274:	d027      	beq.n	80062c6 <dns_call_found+0x72>
 8006276:	2b01      	cmp	r3, #1
 8006278:	d025      	beq.n	80062c6 <dns_call_found+0x72>
      dns_table[idx].reqaddrtype = LWIP_DNS_ADDRTYPE_IPV4;
 800627a:	4a4c      	ldr	r2, [pc, #304]	; (80063ac <dns_call_found+0x158>)
 800627c:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006280:	fb03 2305 	mla	r3, r3, r5, r2
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
{
 800628a:	2400      	movs	r4, #0
 800628c:	e025      	b.n	80062da <dns_call_found+0x86>
      LWIP_ASSERT("invalid response", LWIP_DNS_ADDRTYPE_IS_IPV6(dns_table[idx].reqaddrtype));
 800628e:	4a47      	ldr	r2, [pc, #284]	; (80063ac <dns_call_found+0x158>)
 8006290:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006294:	fb03 2300 	mla	r3, r3, r0, r2
 8006298:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800629c:	2b03      	cmp	r3, #3
 800629e:	d001      	beq.n	80062a4 <dns_call_found+0x50>
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d108      	bne.n	80062b6 <dns_call_found+0x62>
      dns_table[idx].reqaddrtype = LWIP_DNS_ADDRTYPE_IPV6;
 80062a4:	4a41      	ldr	r2, [pc, #260]	; (80063ac <dns_call_found+0x158>)
 80062a6:	f44f 7394 	mov.w	r3, #296	; 0x128
 80062aa:	fb03 2305 	mla	r3, r3, r5, r2
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
 80062b4:	e7e9      	b.n	800628a <dns_call_found+0x36>
      LWIP_ASSERT("invalid response", LWIP_DNS_ADDRTYPE_IS_IPV6(dns_table[idx].reqaddrtype));
 80062b6:	4b3e      	ldr	r3, [pc, #248]	; (80063b0 <dns_call_found+0x15c>)
 80062b8:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 80062bc:	493d      	ldr	r1, [pc, #244]	; (80063b4 <dns_call_found+0x160>)
 80062be:	483e      	ldr	r0, [pc, #248]	; (80063b8 <dns_call_found+0x164>)
 80062c0:	f00d ffb8 	bl	8014234 <iprintf>
 80062c4:	e7ee      	b.n	80062a4 <dns_call_found+0x50>
      LWIP_ASSERT("invalid response", !LWIP_DNS_ADDRTYPE_IS_IPV6(dns_table[idx].reqaddrtype));
 80062c6:	4b3a      	ldr	r3, [pc, #232]	; (80063b0 <dns_call_found+0x15c>)
 80062c8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80062cc:	4939      	ldr	r1, [pc, #228]	; (80063b4 <dns_call_found+0x160>)
 80062ce:	483a      	ldr	r0, [pc, #232]	; (80063b8 <dns_call_found+0x164>)
 80062d0:	f00d ffb0 	bl	8014234 <iprintf>
 80062d4:	e7d1      	b.n	800627a <dns_call_found+0x26>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80062d6:	3401      	adds	r4, #1
 80062d8:	b2e4      	uxtb	r4, r4
 80062da:	2c03      	cmp	r4, #3
 80062dc:	d824      	bhi.n	8006328 <dns_call_found+0xd4>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 80062de:	4626      	mov	r6, r4
 80062e0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80062e4:	4a35      	ldr	r2, [pc, #212]	; (80063bc <dns_call_found+0x168>)
 80062e6:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 80062ea:	2f00      	cmp	r7, #0
 80062ec:	d0f3      	beq.n	80062d6 <dns_call_found+0x82>
 80062ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80062f2:	7a1b      	ldrb	r3, [r3, #8]
 80062f4:	42ab      	cmp	r3, r5
 80062f6:	d1ee      	bne.n	80062d6 <dns_call_found+0x82>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80062f8:	f44f 7094 	mov.w	r0, #296	; 0x128
 80062fc:	fb00 f005 	mul.w	r0, r0, r5
 8006300:	3020      	adds	r0, #32
 8006302:	4b2a      	ldr	r3, [pc, #168]	; (80063ac <dns_call_found+0x158>)
 8006304:	4418      	add	r0, r3
 8006306:	4692      	mov	sl, r2
 8006308:	ea4f 0944 	mov.w	r9, r4, lsl #1
 800630c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006310:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	4641      	mov	r1, r8
 8006318:	3004      	adds	r0, #4
 800631a:	47b8      	blx	r7
      dns_requests[i].found = NULL;
 800631c:	444e      	add	r6, r9
 800631e:	00b6      	lsls	r6, r6, #2
 8006320:	2300      	movs	r3, #0
 8006322:	f84a 3006 	str.w	r3, [sl, r6]
 8006326:	e7d6      	b.n	80062d6 <dns_call_found+0x82>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006328:	2300      	movs	r3, #0
 800632a:	e001      	b.n	8006330 <dns_call_found+0xdc>
 800632c:	3301      	adds	r3, #1
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b03      	cmp	r3, #3
 8006332:	d81c      	bhi.n	800636e <dns_call_found+0x11a>
    if (i == idx) {
 8006334:	42ab      	cmp	r3, r5
 8006336:	d0f9      	beq.n	800632c <dns_call_found+0xd8>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8006338:	491c      	ldr	r1, [pc, #112]	; (80063ac <dns_call_found+0x158>)
 800633a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800633e:	fb02 1203 	mla	r2, r2, r3, r1
 8006342:	7f92      	ldrb	r2, [r2, #30]
 8006344:	2a02      	cmp	r2, #2
 8006346:	d1f1      	bne.n	800632c <dns_call_found+0xd8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8006348:	f44f 7294 	mov.w	r2, #296	; 0x128
 800634c:	fb02 1003 	mla	r0, r2, r3, r1
 8006350:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
 8006354:	fb02 1205 	mla	r2, r2, r5, r1
 8006358:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800635c:	4290      	cmp	r0, r2
 800635e:	d1e5      	bne.n	800632c <dns_call_found+0xd8>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8006360:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006364:	fb02 1405 	mla	r4, r2, r5, r1
 8006368:	2304      	movs	r3, #4
 800636a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800636e:	4a0f      	ldr	r2, [pc, #60]	; (80063ac <dns_call_found+0x158>)
 8006370:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006374:	fb03 2305 	mla	r3, r3, r5, r2
 8006378:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800637c:	2b03      	cmp	r3, #3
 800637e:	d901      	bls.n	8006384 <dns_call_found+0x130>
}
 8006380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8006384:	4c0e      	ldr	r4, [pc, #56]	; (80063c0 <dns_call_found+0x16c>)
 8006386:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800638a:	f006 fcfd 	bl	800cd88 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800638e:	4807      	ldr	r0, [pc, #28]	; (80063ac <dns_call_found+0x158>)
 8006390:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006394:	fb03 0505 	mla	r5, r3, r5, r0
 8006398:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 800639c:	2200      	movs	r2, #0
 800639e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80063a2:	2304      	movs	r3, #4
 80063a4:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
}
 80063a8:	e7ea      	b.n	8006380 <dns_call_found+0x12c>
 80063aa:	bf00      	nop
 80063ac:	20000158 	.word	0x20000158
 80063b0:	08015440 	.word	0x08015440
 80063b4:	08015470 	.word	0x08015470
 80063b8:	08015418 	.word	0x08015418
 80063bc:	200000f8 	.word	0x200000f8
 80063c0:	200000e8 	.word	0x200000e8

080063c4 <dns_send>:
{
 80063c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063c8:	b084      	sub	sp, #16
 80063ca:	4606      	mov	r6, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 80063cc:	4a7e      	ldr	r2, [pc, #504]	; (80065c8 <dns_send+0x204>)
 80063ce:	f44f 7394 	mov.w	r3, #296	; 0x128
 80063d2:	fb03 2300 	mla	r3, r3, r0, r2
 80063d6:	7fdb      	ldrb	r3, [r3, #31]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d84c      	bhi.n	8006476 <dns_send+0xb2>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 80063dc:	4a7a      	ldr	r2, [pc, #488]	; (80065c8 <dns_send+0x204>)
 80063de:	f44f 7394 	mov.w	r3, #296	; 0x128
 80063e2:	fb03 2306 	mla	r3, r3, r6, r2
 80063e6:	7fdb      	ldrb	r3, [r3, #31]
 80063e8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80063ec:	4a77      	ldr	r2, [pc, #476]	; (80065cc <dns_send+0x208>)
 80063ee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80063f2:	7d12      	ldrb	r2, [r2, #20]
 80063f4:	2a06      	cmp	r2, #6
 80063f6:	d046      	beq.n	8006486 <dns_send+0xc2>
 80063f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80063fc:	4a73      	ldr	r2, [pc, #460]	; (80065cc <dns_send+0x208>)
 80063fe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006402:	fab3 f383 	clz	r3, r3
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	2b00      	cmp	r3, #0
 800640a:	d15c      	bne.n	80064c6 <dns_send+0x102>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800640c:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006410:	fb03 f306 	mul.w	r3, r3, r6
 8006414:	3320      	adds	r3, #32
 8006416:	4f6c      	ldr	r7, [pc, #432]	; (80065c8 <dns_send+0x204>)
 8006418:	441f      	add	r7, r3
 800641a:	3704      	adds	r7, #4
 800641c:	4638      	mov	r0, r7
 800641e:	f7fd fed7 	bl	80041d0 <strlen>
 8006422:	f100 0112 	add.w	r1, r0, #18
 8006426:	f44f 7220 	mov.w	r2, #640	; 0x280
 800642a:	b289      	uxth	r1, r1
 800642c:	204a      	movs	r0, #74	; 0x4a
 800642e:	f001 fa13 	bl	8007858 <pbuf_alloc>
  if (p != NULL) {
 8006432:	4605      	mov	r5, r0
 8006434:	2800      	cmp	r0, #0
 8006436:	f000 80c3 	beq.w	80065c0 <dns_send+0x1fc>
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800643a:	2300      	movs	r3, #0
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	9302      	str	r3, [sp, #8]
 8006440:	9303      	str	r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 8006442:	4a61      	ldr	r2, [pc, #388]	; (80065c8 <dns_send+0x204>)
 8006444:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006448:	fb03 2306 	mla	r3, r3, r6, r2
 800644c:	8b98      	ldrh	r0, [r3, #28]
 800644e:	f7ff fe8f 	bl	8006170 <lwip_htons>
 8006452:	f8ad 0004 	strh.w	r0, [sp, #4]
    hdr.flags1 = DNS_FLAG1_RD;
 8006456:	2301      	movs	r3, #1
 8006458:	f88d 3006 	strb.w	r3, [sp, #6]
    hdr.numquestions = PP_HTONS(1);
 800645c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006460:	f8ad 3008 	strh.w	r3, [sp, #8]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8006464:	220c      	movs	r2, #12
 8006466:	a901      	add	r1, sp, #4
 8006468:	4628      	mov	r0, r5
 800646a:	f001 fc37 	bl	8007cdc <pbuf_take>
    --hostname;
 800646e:	3f01      	subs	r7, #1
    query_idx = SIZEOF_DNS_HDR;
 8006470:	f04f 080c 	mov.w	r8, #12
 8006474:	e055      	b.n	8006522 <dns_send+0x15e>
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8006476:	4b56      	ldr	r3, [pc, #344]	; (80065d0 <dns_send+0x20c>)
 8006478:	f240 22fa 	movw	r2, #762	; 0x2fa
 800647c:	4955      	ldr	r1, [pc, #340]	; (80065d4 <dns_send+0x210>)
 800647e:	4856      	ldr	r0, [pc, #344]	; (80065d8 <dns_send+0x214>)
 8006480:	f00d fed8 	bl	8014234 <iprintf>
 8006484:	e7aa      	b.n	80063dc <dns_send+0x18>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8006486:	460a      	mov	r2, r1
 8006488:	4950      	ldr	r1, [pc, #320]	; (80065cc <dns_send+0x208>)
 800648a:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 800648e:	b992      	cbnz	r2, 80064b6 <dns_send+0xf2>
 8006490:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8006494:	4a4d      	ldr	r2, [pc, #308]	; (80065cc <dns_send+0x208>)
 8006496:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800649a:	6852      	ldr	r2, [r2, #4]
 800649c:	b96a      	cbnz	r2, 80064ba <dns_send+0xf6>
 800649e:	4a4b      	ldr	r2, [pc, #300]	; (80065cc <dns_send+0x208>)
 80064a0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80064a4:	6892      	ldr	r2, [r2, #8]
 80064a6:	b952      	cbnz	r2, 80064be <dns_send+0xfa>
 80064a8:	4a48      	ldr	r2, [pc, #288]	; (80065cc <dns_send+0x208>)
 80064aa:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	b13b      	cbz	r3, 80064c2 <dns_send+0xfe>
 80064b2:	2300      	movs	r3, #0
 80064b4:	e7a8      	b.n	8006408 <dns_send+0x44>
 80064b6:	2300      	movs	r3, #0
 80064b8:	e7a6      	b.n	8006408 <dns_send+0x44>
 80064ba:	2300      	movs	r3, #0
 80064bc:	e7a4      	b.n	8006408 <dns_send+0x44>
 80064be:	2300      	movs	r3, #0
 80064c0:	e7a2      	b.n	8006408 <dns_send+0x44>
 80064c2:	2301      	movs	r3, #1
 80064c4:	e7a0      	b.n	8006408 <dns_send+0x44>
    dns_call_found(idx, NULL);
 80064c6:	2100      	movs	r1, #0
 80064c8:	4630      	mov	r0, r6
 80064ca:	f7ff fec3 	bl	8006254 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 80064ce:	4a3e      	ldr	r2, [pc, #248]	; (80065c8 <dns_send+0x204>)
 80064d0:	f44f 7394 	mov.w	r3, #296	; 0x128
 80064d4:	fb03 2606 	mla	r6, r3, r6, r2
 80064d8:	2400      	movs	r4, #0
 80064da:	77b4      	strb	r4, [r6, #30]
}
 80064dc:	4620      	mov	r0, r4
 80064de:	b004      	add	sp, #16
 80064e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      copy_len = (u16_t)(hostname - hostname_part);
 80064e4:	eba7 0a09 	sub.w	sl, r7, r9
 80064e8:	fa1f fa8a 	uxth.w	sl, sl
      if (query_idx + n + 1 > 0xFFFF) {
 80064ec:	eb08 0204 	add.w	r2, r8, r4
 80064f0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80064f4:	429a      	cmp	r2, r3
 80064f6:	dc20      	bgt.n	800653a <dns_send+0x176>
      pbuf_put_at(p, query_idx, n);
 80064f8:	4622      	mov	r2, r4
 80064fa:	4641      	mov	r1, r8
 80064fc:	4628      	mov	r0, r5
 80064fe:	f001 fccb 	bl	8007e98 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8006502:	f108 0301 	add.w	r3, r8, #1
 8006506:	b29b      	uxth	r3, r3
 8006508:	4652      	mov	r2, sl
 800650a:	4649      	mov	r1, r9
 800650c:	4628      	mov	r0, r5
 800650e:	f001 fc45 	bl	8007d9c <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8006512:	4444      	add	r4, r8
 8006514:	b2a4      	uxth	r4, r4
 8006516:	f104 0801 	add.w	r8, r4, #1
 800651a:	fa1f f888 	uxth.w	r8, r8
    } while (*hostname != 0);
 800651e:	783b      	ldrb	r3, [r7, #0]
 8006520:	b18b      	cbz	r3, 8006546 <dns_send+0x182>
      ++hostname;
 8006522:	3701      	adds	r7, #1
 8006524:	46b9      	mov	r9, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8006526:	2400      	movs	r4, #0
 8006528:	783b      	ldrb	r3, [r7, #0]
 800652a:	2b2e      	cmp	r3, #46	; 0x2e
 800652c:	d0da      	beq.n	80064e4 <dns_send+0x120>
 800652e:	2b00      	cmp	r3, #0
 8006530:	d0d8      	beq.n	80064e4 <dns_send+0x120>
        ++n;
 8006532:	3401      	adds	r4, #1
 8006534:	b2e4      	uxtb	r4, r4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8006536:	3701      	adds	r7, #1
 8006538:	e7f6      	b.n	8006528 <dns_send+0x164>
  pbuf_free(p);
 800653a:	4628      	mov	r0, r5
 800653c:	f001 f92a 	bl	8007794 <pbuf_free>
  return ERR_VAL;
 8006540:	f06f 0405 	mvn.w	r4, #5
 8006544:	e7ca      	b.n	80064dc <dns_send+0x118>
    pbuf_put_at(p, query_idx, 0);
 8006546:	2200      	movs	r2, #0
 8006548:	4641      	mov	r1, r8
 800654a:	4628      	mov	r0, r5
 800654c:	f001 fca4 	bl	8007e98 <pbuf_put_at>
    query_idx++;
 8006550:	1ca3      	adds	r3, r4, #2
 8006552:	b29b      	uxth	r3, r3
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
 8006554:	491c      	ldr	r1, [pc, #112]	; (80065c8 <dns_send+0x204>)
 8006556:	f44f 7294 	mov.w	r2, #296	; 0x128
 800655a:	fb02 1206 	mla	r2, r2, r6, r1
 800655e:	f892 2124 	ldrb.w	r2, [r2, #292]	; 0x124
 8006562:	2a03      	cmp	r2, #3
 8006564:	d006      	beq.n	8006574 <dns_send+0x1b0>
 8006566:	2a01      	cmp	r2, #1
 8006568:	d004      	beq.n	8006574 <dns_send+0x1b0>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800656a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800656e:	f8ad 2000 	strh.w	r2, [sp]
 8006572:	e003      	b.n	800657c <dns_send+0x1b8>
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
 8006574:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8006578:	f8ad 2000 	strh.w	r2, [sp]
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800657c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006580:	f8ad 2002 	strh.w	r2, [sp, #2]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8006584:	2204      	movs	r2, #4
 8006586:	4669      	mov	r1, sp
 8006588:	4628      	mov	r0, r5
 800658a:	f001 fc07 	bl	8007d9c <pbuf_take_at>
    pcb_idx = entry->pcb_idx;
 800658e:	4b0e      	ldr	r3, [pc, #56]	; (80065c8 <dns_send+0x204>)
 8006590:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006594:	fb02 3606 	mla	r6, r2, r6, r3
 8006598:	f896 4023 	ldrb.w	r4, [r6, #35]	; 0x23
      dst = &dns_servers[entry->server_idx];
 800659c:	7ff2      	ldrb	r2, [r6, #31]
 800659e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 80065a2:	2335      	movs	r3, #53	; 0x35
 80065a4:	4909      	ldr	r1, [pc, #36]	; (80065cc <dns_send+0x208>)
 80065a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80065aa:	4629      	mov	r1, r5
 80065ac:	480b      	ldr	r0, [pc, #44]	; (80065dc <dns_send+0x218>)
 80065ae:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80065b2:	f006 fa99 	bl	800cae8 <udp_sendto>
 80065b6:	4604      	mov	r4, r0
    pbuf_free(p);
 80065b8:	4628      	mov	r0, r5
 80065ba:	f001 f8eb 	bl	8007794 <pbuf_free>
 80065be:	e78d      	b.n	80064dc <dns_send+0x118>
    err = ERR_MEM;
 80065c0:	f04f 34ff 	mov.w	r4, #4294967295
 80065c4:	e78a      	b.n	80064dc <dns_send+0x118>
 80065c6:	bf00      	nop
 80065c8:	20000158 	.word	0x20000158
 80065cc:	20000128 	.word	0x20000128
 80065d0:	08015440 	.word	0x08015440
 80065d4:	08015484 	.word	0x08015484
 80065d8:	08015418 	.word	0x08015418
 80065dc:	200000e8 	.word	0x200000e8

080065e0 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 80065e0:	b538      	push	{r3, r4, r5, lr}
 80065e2:	4604      	mov	r4, r0
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 80065e4:	4d49      	ldr	r5, [pc, #292]	; (800670c <dns_check_entry+0x12c>)
 80065e6:	f44f 7094 	mov.w	r0, #296	; 0x128
 80065ea:	fb00 5504 	mla	r5, r0, r4, r5

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80065ee:	2c03      	cmp	r4, #3
 80065f0:	d80b      	bhi.n	800660a <dns_check_entry+0x2a>

  switch (entry->state) {
 80065f2:	4a46      	ldr	r2, [pc, #280]	; (800670c <dns_check_entry+0x12c>)
 80065f4:	f44f 7394 	mov.w	r3, #296	; 0x128
 80065f8:	fb03 2304 	mla	r3, r3, r4, r2
 80065fc:	7f9b      	ldrb	r3, [r3, #30]
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d87c      	bhi.n	80066fc <dns_check_entry+0x11c>
 8006602:	e8df f003 	tbb	[pc, r3]
 8006606:	0a1e      	.short	0x0a1e
 8006608:	631f      	.short	0x631f
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800660a:	4b41      	ldr	r3, [pc, #260]	; (8006710 <dns_check_entry+0x130>)
 800660c:	f240 421c 	movw	r2, #1052	; 0x41c
 8006610:	4940      	ldr	r1, [pc, #256]	; (8006714 <dns_check_entry+0x134>)
 8006612:	4841      	ldr	r0, [pc, #260]	; (8006718 <dns_check_entry+0x138>)
 8006614:	f00d fe0e 	bl	8014234 <iprintf>
 8006618:	e7eb      	b.n	80065f2 <dns_check_entry+0x12>
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800661a:	f7ff fdfd 	bl	8006218 <dns_create_txid>
 800661e:	4a3b      	ldr	r2, [pc, #236]	; (800670c <dns_check_entry+0x12c>)
 8006620:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006624:	fb03 2304 	mla	r3, r3, r4, r2
 8006628:	8398      	strh	r0, [r3, #28]
      entry->state = DNS_STATE_ASKING;
 800662a:	2202      	movs	r2, #2
 800662c:	779a      	strb	r2, [r3, #30]
      entry->server_idx = 0;
 800662e:	2200      	movs	r2, #0
 8006630:	77da      	strb	r2, [r3, #31]
      entry->tmr = 1;
 8006632:	2101      	movs	r1, #1
 8006634:	f883 1020 	strb.w	r1, [r3, #32]
      entry->retries = 0;
 8006638:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* send DNS packet for this entry */
      err = dns_send(i);
 800663c:	4620      	mov	r0, r4
 800663e:	f7ff fec1 	bl	80063c4 <dns_send>
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 8006642:	bd38      	pop	{r3, r4, r5, pc}
      if (--entry->tmr == 0) {
 8006644:	4b31      	ldr	r3, [pc, #196]	; (800670c <dns_check_entry+0x12c>)
 8006646:	f44f 7294 	mov.w	r2, #296	; 0x128
 800664a:	fb02 3204 	mla	r2, r2, r4, r3
 800664e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8006652:	3b01      	subs	r3, #1
 8006654:	b2db      	uxtb	r3, r3
 8006656:	f882 3020 	strb.w	r3, [r2, #32]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1f1      	bne.n	8006642 <dns_check_entry+0x62>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800665e:	4b2b      	ldr	r3, [pc, #172]	; (800670c <dns_check_entry+0x12c>)
 8006660:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006664:	fb02 3204 	mla	r2, r2, r4, r3
 8006668:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 800666c:	3301      	adds	r3, #1
 800666e:	b2db      	uxtb	r3, r3
 8006670:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8006674:	2b04      	cmp	r3, #4
 8006676:	d00a      	beq.n	800668e <dns_check_entry+0xae>
          entry->tmr = entry->retries;
 8006678:	4924      	ldr	r1, [pc, #144]	; (800670c <dns_check_entry+0x12c>)
 800667a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800667e:	fb02 1204 	mla	r2, r2, r4, r1
 8006682:	f882 3020 	strb.w	r3, [r2, #32]
        err = dns_send(i);
 8006686:	4620      	mov	r0, r4
 8006688:	f7ff fe9c 	bl	80063c4 <dns_send>
        if (err != ERR_OK) {
 800668c:	e7d9      	b.n	8006642 <dns_check_entry+0x62>
          if (dns_backupserver_available(entry)
 800668e:	4628      	mov	r0, r5
 8006690:	f7ff fd80 	bl	8006194 <dns_backupserver_available>
 8006694:	b170      	cbz	r0, 80066b4 <dns_check_entry+0xd4>
            entry->server_idx++;
 8006696:	4a1d      	ldr	r2, [pc, #116]	; (800670c <dns_check_entry+0x12c>)
 8006698:	f44f 7394 	mov.w	r3, #296	; 0x128
 800669c:	fb03 2304 	mla	r3, r3, r4, r2
 80066a0:	7fda      	ldrb	r2, [r3, #31]
 80066a2:	3201      	adds	r2, #1
 80066a4:	77da      	strb	r2, [r3, #31]
            entry->tmr = 1;
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2020 	strb.w	r2, [r3, #32]
            entry->retries = 0;
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80066b2:	e7e8      	b.n	8006686 <dns_check_entry+0xa6>
            dns_call_found(i, NULL);
 80066b4:	2100      	movs	r1, #0
 80066b6:	4620      	mov	r0, r4
 80066b8:	f7ff fdcc 	bl	8006254 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 80066bc:	4a13      	ldr	r2, [pc, #76]	; (800670c <dns_check_entry+0x12c>)
 80066be:	f44f 7394 	mov.w	r3, #296	; 0x128
 80066c2:	fb03 2404 	mla	r4, r3, r4, r2
 80066c6:	2300      	movs	r3, #0
 80066c8:	77a3      	strb	r3, [r4, #30]
            break;
 80066ca:	e7ba      	b.n	8006642 <dns_check_entry+0x62>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 80066cc:	f44f 7394 	mov.w	r3, #296	; 0x128
 80066d0:	fb03 f304 	mul.w	r3, r3, r4
 80066d4:	4a0d      	ldr	r2, [pc, #52]	; (800670c <dns_check_entry+0x12c>)
 80066d6:	58d3      	ldr	r3, [r2, r3]
 80066d8:	b143      	cbz	r3, 80066ec <dns_check_entry+0x10c>
 80066da:	3b01      	subs	r3, #1
 80066dc:	f44f 7294 	mov.w	r2, #296	; 0x128
 80066e0:	fb02 f204 	mul.w	r2, r2, r4
 80066e4:	4909      	ldr	r1, [pc, #36]	; (800670c <dns_check_entry+0x12c>)
 80066e6:	508b      	str	r3, [r1, r2]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1aa      	bne.n	8006642 <dns_check_entry+0x62>
        entry->state = DNS_STATE_UNUSED;
 80066ec:	4807      	ldr	r0, [pc, #28]	; (800670c <dns_check_entry+0x12c>)
 80066ee:	f44f 7394 	mov.w	r3, #296	; 0x128
 80066f2:	fb03 0404 	mla	r4, r3, r4, r0
 80066f6:	2300      	movs	r3, #0
 80066f8:	77a3      	strb	r3, [r4, #30]
 80066fa:	e7a2      	b.n	8006642 <dns_check_entry+0x62>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 80066fc:	4b04      	ldr	r3, [pc, #16]	; (8006710 <dns_check_entry+0x130>)
 80066fe:	f240 425b 	movw	r2, #1115	; 0x45b
 8006702:	4906      	ldr	r1, [pc, #24]	; (800671c <dns_check_entry+0x13c>)
 8006704:	4804      	ldr	r0, [pc, #16]	; (8006718 <dns_check_entry+0x138>)
 8006706:	f00d fd95 	bl	8014234 <iprintf>
}
 800670a:	e79a      	b.n	8006642 <dns_check_entry+0x62>
 800670c:	20000158 	.word	0x20000158
 8006710:	08015440 	.word	0x08015440
 8006714:	0801549c 	.word	0x0801549c
 8006718:	08015418 	.word	0x08015418
 800671c:	080154b8 	.word	0x080154b8

08006720 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8006720:	b510      	push	{r4, lr}
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8006722:	2400      	movs	r4, #0
 8006724:	e004      	b.n	8006730 <dns_check_entries+0x10>
    dns_check_entry(i);
 8006726:	4620      	mov	r0, r4
 8006728:	f7ff ff5a 	bl	80065e0 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800672c:	3401      	adds	r4, #1
 800672e:	b2e4      	uxtb	r4, r4
 8006730:	2c03      	cmp	r4, #3
 8006732:	d9f8      	bls.n	8006726 <dns_check_entries+0x6>
  }
}
 8006734:	bd10      	pop	{r4, pc}

08006736 <dns_init>:
}
 8006736:	4770      	bx	lr

08006738 <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 8006738:	2801      	cmp	r0, #1
 800673a:	d900      	bls.n	800673e <dns_setserver+0x6>
 800673c:	4770      	bx	lr
{
 800673e:	b430      	push	{r4, r5}
    if (dnsserver != NULL) {
 8006740:	b169      	cbz	r1, 800675e <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 8006742:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006746:	4d0c      	ldr	r5, [pc, #48]	; (8006778 <dns_setserver+0x40>)
 8006748:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
 800674c:	460c      	mov	r4, r1
 800674e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006752:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006756:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800675a:	bc30      	pop	{r4, r5}
 800675c:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 800675e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006762:	4c05      	ldr	r4, [pc, #20]	; (8006778 <dns_setserver+0x40>)
 8006764:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 8006768:	4d04      	ldr	r5, [pc, #16]	; (800677c <dns_setserver+0x44>)
 800676a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800676c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800676e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006772:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8006776:	e7f0      	b.n	800675a <dns_setserver+0x22>
 8006778:	20000128 	.word	0x20000128
 800677c:	080178d4 	.word	0x080178d4

08006780 <dns_tmr>:
{
 8006780:	b508      	push	{r3, lr}
  dns_check_entries();
 8006782:	f7ff ffcd 	bl	8006720 <dns_check_entries>
}
 8006786:	bd08      	pop	{r3, pc}

08006788 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8006788:	b410      	push	{r4}
 800678a:	b083      	sub	sp, #12
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	f8ad 3006 	strh.w	r3, [sp, #6]
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8006792:	f010 0401 	ands.w	r4, r0, #1
 8006796:	d006      	beq.n	80067a6 <lwip_standard_chksum+0x1e>
 8006798:	4299      	cmp	r1, r3
 800679a:	dd04      	ble.n	80067a6 <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 800679c:	f810 3b01 	ldrb.w	r3, [r0], #1
 80067a0:	f88d 3007 	strb.w	r3, [sp, #7]
    len--;
 80067a4:	3901      	subs	r1, #1
  u32_t sum = 0;
 80067a6:	2300      	movs	r3, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 80067a8:	2901      	cmp	r1, #1
 80067aa:	dd04      	ble.n	80067b6 <lwip_standard_chksum+0x2e>
    sum += *ps++;
 80067ac:	f830 2b02 	ldrh.w	r2, [r0], #2
 80067b0:	4413      	add	r3, r2
    len -= 2;
 80067b2:	3902      	subs	r1, #2
 80067b4:	e7f8      	b.n	80067a8 <lwip_standard_chksum+0x20>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80067b6:	2900      	cmp	r1, #0
 80067b8:	dd02      	ble.n	80067c0 <lwip_standard_chksum+0x38>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80067ba:	7802      	ldrb	r2, [r0, #0]
 80067bc:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 80067c0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80067c4:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80067c6:	b298      	uxth	r0, r3
 80067c8:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 80067cc:	b298      	uxth	r0, r3
 80067ce:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 80067d2:	b124      	cbz	r4, 80067de <lwip_standard_chksum+0x56>
    sum = SWAP_BYTES_IN_WORD(sum);
 80067d4:	0203      	lsls	r3, r0, #8
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80067dc:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 80067de:	b280      	uxth	r0, r0
 80067e0:	b003      	add	sp, #12
 80067e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80067e8:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80067ea:	f7ff ffcd 	bl	8006788 <lwip_standard_chksum>
 80067ee:	43c0      	mvns	r0, r0
}
 80067f0:	b280      	uxth	r0, r0
 80067f2:	bd08      	pop	{r3, pc}

080067f4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80067f4:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80067f6:	f000 f8cb 	bl	8006990 <mem_init>
  memp_init();
 80067fa:	f000 fafd 	bl	8006df8 <memp_init>
  pbuf_init();
  netif_init();
 80067fe:	f000 fbf3 	bl	8006fe8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006802:	f005 fd07 	bl	800c214 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006806:	f001 fc1b 	bl	8008040 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 800680a:	f008 fcad 	bl	800f168 <igmp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800680e:	f7ff ff92 	bl	8006736 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006812:	f005 fbed 	bl	800bff0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006816:	bd08      	pop	{r3, pc}

08006818 <ptr_to_mem>:
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
  return (struct mem *)(void *)&ram[ptr];
 8006818:	4b01      	ldr	r3, [pc, #4]	; (8006820 <ptr_to_mem+0x8>)
 800681a:	681b      	ldr	r3, [r3, #0]
}
 800681c:	4418      	add	r0, r3
 800681e:	4770      	bx	lr
 8006820:	200005fc 	.word	0x200005fc

08006824 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
  return (mem_size_t)((u8_t *)mem - ram);
 8006824:	4b02      	ldr	r3, [pc, #8]	; (8006830 <mem_to_ptr+0xc>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	1ac0      	subs	r0, r0, r3
}
 800682a:	b280      	uxth	r0, r0
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	200005fc 	.word	0x200005fc

08006834 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006836:	4604      	mov	r4, r0
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006838:	f7ff fff4 	bl	8006824 <mem_to_ptr>
 800683c:	4607      	mov	r7, r0
  nmem = ptr_to_mem(mem->next);
 800683e:	8825      	ldrh	r5, [r4, #0]
 8006840:	4628      	mov	r0, r5
 8006842:	f7ff ffe9 	bl	8006818 <ptr_to_mem>
 8006846:	4606      	mov	r6, r0
  pmem = ptr_to_mem(mem->prev);
 8006848:	8864      	ldrh	r4, [r4, #2]
 800684a:	4620      	mov	r0, r4
 800684c:	f7ff ffe4 	bl	8006818 <ptr_to_mem>
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006850:	f5b5 6f48 	cmp.w	r5, #3200	; 0xc80
 8006854:	d810      	bhi.n	8006878 <mem_link_valid+0x44>
 8006856:	f5b4 6f48 	cmp.w	r4, #3200	; 0xc80
 800685a:	d80f      	bhi.n	800687c <mem_link_valid+0x48>
 800685c:	42bc      	cmp	r4, r7
 800685e:	d002      	beq.n	8006866 <mem_link_valid+0x32>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006860:	8803      	ldrh	r3, [r0, #0]
 8006862:	42bb      	cmp	r3, r7
 8006864:	d10c      	bne.n	8006880 <mem_link_valid+0x4c>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006866:	4b09      	ldr	r3, [pc, #36]	; (800688c <mem_link_valid+0x58>)
 8006868:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800686a:	42b3      	cmp	r3, r6
 800686c:	d00a      	beq.n	8006884 <mem_link_valid+0x50>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800686e:	8873      	ldrh	r3, [r6, #2]
 8006870:	42bb      	cmp	r3, r7
 8006872:	d109      	bne.n	8006888 <mem_link_valid+0x54>
    return 0;
  }
  return 1;
 8006874:	2001      	movs	r0, #1
 8006876:	e000      	b.n	800687a <mem_link_valid+0x46>
    return 0;
 8006878:	2000      	movs	r0, #0
}
 800687a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return 0;
 800687c:	2000      	movs	r0, #0
 800687e:	e7fc      	b.n	800687a <mem_link_valid+0x46>
 8006880:	2000      	movs	r0, #0
 8006882:	e7fa      	b.n	800687a <mem_link_valid+0x46>
  return 1;
 8006884:	2001      	movs	r0, #1
 8006886:	e7f8      	b.n	800687a <mem_link_valid+0x46>
    return 0;
 8006888:	2000      	movs	r0, #0
 800688a:	e7f6      	b.n	800687a <mem_link_valid+0x46>
 800688c:	20000600 	.word	0x20000600

08006890 <plug_holes>:
{
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4604      	mov	r4, r0
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006894:	4b35      	ldr	r3, [pc, #212]	; (800696c <plug_holes+0xdc>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4283      	cmp	r3, r0
 800689a:	d840      	bhi.n	800691e <plug_holes+0x8e>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800689c:	4b34      	ldr	r3, [pc, #208]	; (8006970 <plug_holes+0xe0>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	42a3      	cmp	r3, r4
 80068a2:	d944      	bls.n	800692e <plug_holes+0x9e>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80068a4:	7923      	ldrb	r3, [r4, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d149      	bne.n	800693e <plug_holes+0xae>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80068aa:	8823      	ldrh	r3, [r4, #0]
 80068ac:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 80068b0:	d84d      	bhi.n	800694e <plug_holes+0xbe>
  nmem = ptr_to_mem(mem->next);
 80068b2:	8820      	ldrh	r0, [r4, #0]
 80068b4:	f7ff ffb0 	bl	8006818 <ptr_to_mem>
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80068b8:	4284      	cmp	r4, r0
 80068ba:	d016      	beq.n	80068ea <plug_holes+0x5a>
 80068bc:	7903      	ldrb	r3, [r0, #4]
 80068be:	b9a3      	cbnz	r3, 80068ea <plug_holes+0x5a>
 80068c0:	4b2b      	ldr	r3, [pc, #172]	; (8006970 <plug_holes+0xe0>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4283      	cmp	r3, r0
 80068c6:	d010      	beq.n	80068ea <plug_holes+0x5a>
    if (lfree == nmem) {
 80068c8:	4b2a      	ldr	r3, [pc, #168]	; (8006974 <plug_holes+0xe4>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4283      	cmp	r3, r0
 80068ce:	d046      	beq.n	800695e <plug_holes+0xce>
    mem->next = nmem->next;
 80068d0:	8803      	ldrh	r3, [r0, #0]
 80068d2:	8023      	strh	r3, [r4, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80068d4:	8800      	ldrh	r0, [r0, #0]
 80068d6:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
 80068da:	d006      	beq.n	80068ea <plug_holes+0x5a>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80068dc:	f7ff ff9c 	bl	8006818 <ptr_to_mem>
 80068e0:	4605      	mov	r5, r0
 80068e2:	4620      	mov	r0, r4
 80068e4:	f7ff ff9e 	bl	8006824 <mem_to_ptr>
 80068e8:	8068      	strh	r0, [r5, #2]
  pmem = ptr_to_mem(mem->prev);
 80068ea:	8860      	ldrh	r0, [r4, #2]
 80068ec:	f7ff ff94 	bl	8006818 <ptr_to_mem>
 80068f0:	4605      	mov	r5, r0
  if (pmem != mem && pmem->used == 0) {
 80068f2:	4284      	cmp	r4, r0
 80068f4:	d012      	beq.n	800691c <plug_holes+0x8c>
 80068f6:	7903      	ldrb	r3, [r0, #4]
 80068f8:	b983      	cbnz	r3, 800691c <plug_holes+0x8c>
    if (lfree == mem) {
 80068fa:	4b1e      	ldr	r3, [pc, #120]	; (8006974 <plug_holes+0xe4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	42a3      	cmp	r3, r4
 8006900:	d030      	beq.n	8006964 <plug_holes+0xd4>
    pmem->next = mem->next;
 8006902:	8823      	ldrh	r3, [r4, #0]
 8006904:	802b      	strh	r3, [r5, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006906:	8820      	ldrh	r0, [r4, #0]
 8006908:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
 800690c:	d006      	beq.n	800691c <plug_holes+0x8c>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800690e:	f7ff ff83 	bl	8006818 <ptr_to_mem>
 8006912:	4604      	mov	r4, r0
 8006914:	4628      	mov	r0, r5
 8006916:	f7ff ff85 	bl	8006824 <mem_to_ptr>
 800691a:	8060      	strh	r0, [r4, #2]
}
 800691c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800691e:	4b16      	ldr	r3, [pc, #88]	; (8006978 <plug_holes+0xe8>)
 8006920:	f240 12df 	movw	r2, #479	; 0x1df
 8006924:	4915      	ldr	r1, [pc, #84]	; (800697c <plug_holes+0xec>)
 8006926:	4816      	ldr	r0, [pc, #88]	; (8006980 <plug_holes+0xf0>)
 8006928:	f00d fc84 	bl	8014234 <iprintf>
 800692c:	e7b6      	b.n	800689c <plug_holes+0xc>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800692e:	4b12      	ldr	r3, [pc, #72]	; (8006978 <plug_holes+0xe8>)
 8006930:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006934:	4913      	ldr	r1, [pc, #76]	; (8006984 <plug_holes+0xf4>)
 8006936:	4812      	ldr	r0, [pc, #72]	; (8006980 <plug_holes+0xf0>)
 8006938:	f00d fc7c 	bl	8014234 <iprintf>
 800693c:	e7b2      	b.n	80068a4 <plug_holes+0x14>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800693e:	4b0e      	ldr	r3, [pc, #56]	; (8006978 <plug_holes+0xe8>)
 8006940:	f240 12e1 	movw	r2, #481	; 0x1e1
 8006944:	4910      	ldr	r1, [pc, #64]	; (8006988 <plug_holes+0xf8>)
 8006946:	480e      	ldr	r0, [pc, #56]	; (8006980 <plug_holes+0xf0>)
 8006948:	f00d fc74 	bl	8014234 <iprintf>
 800694c:	e7ad      	b.n	80068aa <plug_holes+0x1a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800694e:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <plug_holes+0xe8>)
 8006950:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8006954:	490d      	ldr	r1, [pc, #52]	; (800698c <plug_holes+0xfc>)
 8006956:	480a      	ldr	r0, [pc, #40]	; (8006980 <plug_holes+0xf0>)
 8006958:	f00d fc6c 	bl	8014234 <iprintf>
 800695c:	e7a9      	b.n	80068b2 <plug_holes+0x22>
      lfree = mem;
 800695e:	4b05      	ldr	r3, [pc, #20]	; (8006974 <plug_holes+0xe4>)
 8006960:	601c      	str	r4, [r3, #0]
 8006962:	e7b5      	b.n	80068d0 <plug_holes+0x40>
      lfree = pmem;
 8006964:	4b03      	ldr	r3, [pc, #12]	; (8006974 <plug_holes+0xe4>)
 8006966:	6018      	str	r0, [r3, #0]
 8006968:	e7cb      	b.n	8006902 <plug_holes+0x72>
 800696a:	bf00      	nop
 800696c:	200005fc 	.word	0x200005fc
 8006970:	20000600 	.word	0x20000600
 8006974:	200005f8 	.word	0x200005f8
 8006978:	080154d8 	.word	0x080154d8
 800697c:	08015508 	.word	0x08015508
 8006980:	08015418 	.word	0x08015418
 8006984:	08015520 	.word	0x08015520
 8006988:	0801553c 	.word	0x0801553c
 800698c:	08015558 	.word	0x08015558

08006990 <mem_init>:
{
 8006990:	b538      	push	{r3, r4, r5, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006992:	4c0b      	ldr	r4, [pc, #44]	; (80069c0 <mem_init+0x30>)
 8006994:	f024 0403 	bic.w	r4, r4, #3
 8006998:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <mem_init+0x34>)
 800699a:	601c      	str	r4, [r3, #0]
  mem->next = MEM_SIZE_ALIGNED;
 800699c:	f44f 6548 	mov.w	r5, #3200	; 0xc80
 80069a0:	8025      	strh	r5, [r4, #0]
  mem->prev = 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	8063      	strh	r3, [r4, #2]
  mem->used = 0;
 80069a6:	7123      	strb	r3, [r4, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80069a8:	4628      	mov	r0, r5
 80069aa:	f7ff ff35 	bl	8006818 <ptr_to_mem>
 80069ae:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <mem_init+0x38>)
 80069b0:	6018      	str	r0, [r3, #0]
  ram_end->used = 1;
 80069b2:	2301      	movs	r3, #1
 80069b4:	7103      	strb	r3, [r0, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80069b6:	8005      	strh	r5, [r0, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80069b8:	8045      	strh	r5, [r0, #2]
  lfree = (struct mem *)(void *)ram;
 80069ba:	4b04      	ldr	r3, [pc, #16]	; (80069cc <mem_init+0x3c>)
 80069bc:	601c      	str	r4, [r3, #0]
}
 80069be:	bd38      	pop	{r3, r4, r5, pc}
 80069c0:	20003a2f 	.word	0x20003a2f
 80069c4:	200005fc 	.word	0x200005fc
 80069c8:	20000600 	.word	0x20000600
 80069cc:	200005f8 	.word	0x200005f8

080069d0 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80069d0:	2800      	cmp	r0, #0
 80069d2:	d044      	beq.n	8006a5e <mem_free+0x8e>
{
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80069d8:	f010 0f03 	tst.w	r0, #3
 80069dc:	d11f      	bne.n	8006a1e <mem_free+0x4e>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80069de:	f1a0 0508 	sub.w	r5, r0, #8

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80069e2:	4b1f      	ldr	r3, [pc, #124]	; (8006a60 <mem_free+0x90>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	42ab      	cmp	r3, r5
 80069e8:	d821      	bhi.n	8006a2e <mem_free+0x5e>
 80069ea:	f100 030c 	add.w	r3, r0, #12
 80069ee:	4a1d      	ldr	r2, [pc, #116]	; (8006a64 <mem_free+0x94>)
 80069f0:	6812      	ldr	r2, [r2, #0]
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d81b      	bhi.n	8006a2e <mem_free+0x5e>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80069f6:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 80069fa:	b303      	cbz	r3, 8006a3e <mem_free+0x6e>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
 80069fc:	4628      	mov	r0, r5
 80069fe:	f7ff ff19 	bl	8006834 <mem_link_valid>
 8006a02:	b320      	cbz	r0, 8006a4e <mem_free+0x7e>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 8006a04:	2300      	movs	r3, #0
 8006a06:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 8006a0a:	4b17      	ldr	r3, [pc, #92]	; (8006a68 <mem_free+0x98>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	42ab      	cmp	r3, r5
 8006a10:	d901      	bls.n	8006a16 <mem_free+0x46>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006a12:	4b15      	ldr	r3, [pc, #84]	; (8006a68 <mem_free+0x98>)
 8006a14:	601d      	str	r5, [r3, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006a16:	4628      	mov	r0, r5
 8006a18:	f7ff ff3a 	bl	8006890 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8006a1c:	e00e      	b.n	8006a3c <mem_free+0x6c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006a1e:	4b13      	ldr	r3, [pc, #76]	; (8006a6c <mem_free+0x9c>)
 8006a20:	f240 2273 	movw	r2, #627	; 0x273
 8006a24:	4912      	ldr	r1, [pc, #72]	; (8006a70 <mem_free+0xa0>)
 8006a26:	4813      	ldr	r0, [pc, #76]	; (8006a74 <mem_free+0xa4>)
 8006a28:	f00d fc04 	bl	8014234 <iprintf>
    return;
 8006a2c:	e006      	b.n	8006a3c <mem_free+0x6c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006a2e:	4b0f      	ldr	r3, [pc, #60]	; (8006a6c <mem_free+0x9c>)
 8006a30:	f240 227f 	movw	r2, #639	; 0x27f
 8006a34:	4910      	ldr	r1, [pc, #64]	; (8006a78 <mem_free+0xa8>)
 8006a36:	480f      	ldr	r0, [pc, #60]	; (8006a74 <mem_free+0xa4>)
 8006a38:	f00d fbfc 	bl	8014234 <iprintf>
}
 8006a3c:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8006a3e:	4b0b      	ldr	r3, [pc, #44]	; (8006a6c <mem_free+0x9c>)
 8006a40:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8006a44:	490d      	ldr	r1, [pc, #52]	; (8006a7c <mem_free+0xac>)
 8006a46:	480b      	ldr	r0, [pc, #44]	; (8006a74 <mem_free+0xa4>)
 8006a48:	f00d fbf4 	bl	8014234 <iprintf>
    return;
 8006a4c:	e7f6      	b.n	8006a3c <mem_free+0x6c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006a4e:	4b07      	ldr	r3, [pc, #28]	; (8006a6c <mem_free+0x9c>)
 8006a50:	f240 2295 	movw	r2, #661	; 0x295
 8006a54:	490a      	ldr	r1, [pc, #40]	; (8006a80 <mem_free+0xb0>)
 8006a56:	4807      	ldr	r0, [pc, #28]	; (8006a74 <mem_free+0xa4>)
 8006a58:	f00d fbec 	bl	8014234 <iprintf>
    return;
 8006a5c:	e7ee      	b.n	8006a3c <mem_free+0x6c>
 8006a5e:	4770      	bx	lr
 8006a60:	200005fc 	.word	0x200005fc
 8006a64:	20000600 	.word	0x20000600
 8006a68:	200005f8 	.word	0x200005f8
 8006a6c:	080154d8 	.word	0x080154d8
 8006a70:	08015584 	.word	0x08015584
 8006a74:	08015418 	.word	0x08015418
 8006a78:	080155a8 	.word	0x080155a8
 8006a7c:	080155c4 	.word	0x080155c4
 8006a80:	080155ec 	.word	0x080155ec

08006a84 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a88:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006a8a:	1ccc      	adds	r4, r1, #3
 8006a8c:	b2a4      	uxth	r4, r4
 8006a8e:	f024 0403 	bic.w	r4, r4, #3
 8006a92:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8006a94:	2c0b      	cmp	r4, #11
 8006a96:	d904      	bls.n	8006aa2 <mem_trim+0x1e>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006a98:	f5b4 6f48 	cmp.w	r4, #3200	; 0xc80
 8006a9c:	d902      	bls.n	8006aa4 <mem_trim+0x20>
    return NULL;
 8006a9e:	2500      	movs	r5, #0
 8006aa0:	e099      	b.n	8006bd6 <mem_trim+0x152>
    newsize = MIN_SIZE_ALIGNED;
 8006aa2:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006aa4:	428c      	cmp	r4, r1
 8006aa6:	f0c0 8095 	bcc.w	8006bd4 <mem_trim+0x150>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006aaa:	4b4d      	ldr	r3, [pc, #308]	; (8006be0 <mem_trim+0x15c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	42ab      	cmp	r3, r5
 8006ab0:	d803      	bhi.n	8006aba <mem_trim+0x36>
 8006ab2:	4b4c      	ldr	r3, [pc, #304]	; (8006be4 <mem_trim+0x160>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	42ab      	cmp	r3, r5
 8006ab8:	d806      	bhi.n	8006ac8 <mem_trim+0x44>
 8006aba:	4b4b      	ldr	r3, [pc, #300]	; (8006be8 <mem_trim+0x164>)
 8006abc:	f240 22d1 	movw	r2, #721	; 0x2d1
 8006ac0:	494a      	ldr	r1, [pc, #296]	; (8006bec <mem_trim+0x168>)
 8006ac2:	484b      	ldr	r0, [pc, #300]	; (8006bf0 <mem_trim+0x16c>)
 8006ac4:	f00d fbb6 	bl	8014234 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006ac8:	4b45      	ldr	r3, [pc, #276]	; (8006be0 <mem_trim+0x15c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	42ab      	cmp	r3, r5
 8006ace:	f200 8082 	bhi.w	8006bd6 <mem_trim+0x152>
 8006ad2:	4b44      	ldr	r3, [pc, #272]	; (8006be4 <mem_trim+0x160>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	42ab      	cmp	r3, r5
 8006ad8:	d97d      	bls.n	8006bd6 <mem_trim+0x152>
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006ada:	f1a5 0008 	sub.w	r0, r5, #8
 8006ade:	f7ff fea1 	bl	8006824 <mem_to_ptr>
 8006ae2:	4606      	mov	r6, r0

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006ae4:	f835 8c08 	ldrh.w	r8, [r5, #-8]
 8006ae8:	eba8 0800 	sub.w	r8, r8, r0
 8006aec:	fa1f f888 	uxth.w	r8, r8
 8006af0:	f1a8 0808 	sub.w	r8, r8, #8
 8006af4:	fa1f f888 	uxth.w	r8, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006af8:	4544      	cmp	r4, r8
 8006afa:	d829      	bhi.n	8006b50 <mem_trim+0xcc>
  if (newsize > size) {
 8006afc:	4544      	cmp	r4, r8
 8006afe:	d86d      	bhi.n	8006bdc <mem_trim+0x158>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8006b00:	d069      	beq.n	8006bd6 <mem_trim+0x152>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006b02:	f835 7c08 	ldrh.w	r7, [r5, #-8]
 8006b06:	4638      	mov	r0, r7
 8006b08:	f7ff fe86 	bl	8006818 <ptr_to_mem>
 8006b0c:	4681      	mov	r9, r0
  if (mem2->used == 0) {
 8006b0e:	7903      	ldrb	r3, [r0, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d133      	bne.n	8006b7c <mem_trim+0xf8>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006b14:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
 8006b18:	d022      	beq.n	8006b60 <mem_trim+0xdc>
    /* remember the old next pointer */
    next = mem2->next;
 8006b1a:	f8b9 7000 	ldrh.w	r7, [r9]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006b1e:	4434      	add	r4, r6
 8006b20:	b2a4      	uxth	r4, r4
 8006b22:	3408      	adds	r4, #8
 8006b24:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 8006b26:	4b33      	ldr	r3, [pc, #204]	; (8006bf4 <mem_trim+0x170>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	454b      	cmp	r3, r9
 8006b2c:	d020      	beq.n	8006b70 <mem_trim+0xec>
      lfree = ptr_to_mem(ptr2);
    }
    mem2 = ptr_to_mem(ptr2);
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f7ff fe72 	bl	8006818 <ptr_to_mem>
    mem2->used = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	7103      	strb	r3, [r0, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006b38:	8007      	strh	r7, [r0, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006b3a:	8046      	strh	r6, [r0, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006b3c:	f825 4c08 	strh.w	r4, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006b40:	8800      	ldrh	r0, [r0, #0]
 8006b42:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
 8006b46:	d046      	beq.n	8006bd6 <mem_trim+0x152>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006b48:	f7ff fe66 	bl	8006818 <ptr_to_mem>
 8006b4c:	8044      	strh	r4, [r0, #2]
 8006b4e:	e042      	b.n	8006bd6 <mem_trim+0x152>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006b50:	4b25      	ldr	r3, [pc, #148]	; (8006be8 <mem_trim+0x164>)
 8006b52:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006b56:	4928      	ldr	r1, [pc, #160]	; (8006bf8 <mem_trim+0x174>)
 8006b58:	4825      	ldr	r0, [pc, #148]	; (8006bf0 <mem_trim+0x16c>)
 8006b5a:	f00d fb6b 	bl	8014234 <iprintf>
 8006b5e:	e7cd      	b.n	8006afc <mem_trim+0x78>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006b60:	4b21      	ldr	r3, [pc, #132]	; (8006be8 <mem_trim+0x164>)
 8006b62:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006b66:	4925      	ldr	r1, [pc, #148]	; (8006bfc <mem_trim+0x178>)
 8006b68:	4821      	ldr	r0, [pc, #132]	; (8006bf0 <mem_trim+0x16c>)
 8006b6a:	f00d fb63 	bl	8014234 <iprintf>
 8006b6e:	e7d4      	b.n	8006b1a <mem_trim+0x96>
      lfree = ptr_to_mem(ptr2);
 8006b70:	4620      	mov	r0, r4
 8006b72:	f7ff fe51 	bl	8006818 <ptr_to_mem>
 8006b76:	4b1f      	ldr	r3, [pc, #124]	; (8006bf4 <mem_trim+0x170>)
 8006b78:	6018      	str	r0, [r3, #0]
 8006b7a:	e7d8      	b.n	8006b2e <mem_trim+0xaa>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006b7c:	f104 0314 	add.w	r3, r4, #20
 8006b80:	4543      	cmp	r3, r8
 8006b82:	d828      	bhi.n	8006bd6 <mem_trim+0x152>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006b84:	4434      	add	r4, r6
 8006b86:	b2a4      	uxth	r4, r4
 8006b88:	3408      	adds	r4, #8
 8006b8a:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006b8c:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
 8006b90:	d018      	beq.n	8006bc4 <mem_trim+0x140>
    mem2 = ptr_to_mem(ptr2);
 8006b92:	4620      	mov	r0, r4
 8006b94:	f7ff fe40 	bl	8006818 <ptr_to_mem>
    if (mem2 < lfree) {
 8006b98:	4b16      	ldr	r3, [pc, #88]	; (8006bf4 <mem_trim+0x170>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4283      	cmp	r3, r0
 8006b9e:	d901      	bls.n	8006ba4 <mem_trim+0x120>
      lfree = mem2;
 8006ba0:	4b14      	ldr	r3, [pc, #80]	; (8006bf4 <mem_trim+0x170>)
 8006ba2:	6018      	str	r0, [r3, #0]
    }
    mem2->used = 0;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	7103      	strb	r3, [r0, #4]
    mem2->next = mem->next;
 8006ba8:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 8006bac:	8003      	strh	r3, [r0, #0]
    mem2->prev = ptr;
 8006bae:	8046      	strh	r6, [r0, #2]
    mem->next = ptr2;
 8006bb0:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006bb4:	8800      	ldrh	r0, [r0, #0]
 8006bb6:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
 8006bba:	d00c      	beq.n	8006bd6 <mem_trim+0x152>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006bbc:	f7ff fe2c 	bl	8006818 <ptr_to_mem>
 8006bc0:	8044      	strh	r4, [r0, #2]
 8006bc2:	e008      	b.n	8006bd6 <mem_trim+0x152>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006bc4:	4b08      	ldr	r3, [pc, #32]	; (8006be8 <mem_trim+0x164>)
 8006bc6:	f240 3216 	movw	r2, #790	; 0x316
 8006bca:	490c      	ldr	r1, [pc, #48]	; (8006bfc <mem_trim+0x178>)
 8006bcc:	4808      	ldr	r0, [pc, #32]	; (8006bf0 <mem_trim+0x16c>)
 8006bce:	f00d fb31 	bl	8014234 <iprintf>
 8006bd2:	e7de      	b.n	8006b92 <mem_trim+0x10e>
    return NULL;
 8006bd4:	2500      	movs	r5, #0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8006bdc:	2500      	movs	r5, #0
 8006bde:	e7fa      	b.n	8006bd6 <mem_trim+0x152>
 8006be0:	200005fc 	.word	0x200005fc
 8006be4:	20000600 	.word	0x20000600
 8006be8:	080154d8 	.word	0x080154d8
 8006bec:	08015620 	.word	0x08015620
 8006bf0:	08015418 	.word	0x08015418
 8006bf4:	200005f8 	.word	0x200005f8
 8006bf8:	08015638 	.word	0x08015638
 8006bfc:	08015658 	.word	0x08015658

08006c00 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006c00:	2800      	cmp	r0, #0
 8006c02:	f000 809a 	beq.w	8006d3a <mem_malloc+0x13a>
{
 8006c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c0a:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006c0c:	1cc6      	adds	r6, r0, #3
 8006c0e:	b2b6      	uxth	r6, r6
 8006c10:	f026 0603 	bic.w	r6, r6, #3
 8006c14:	b2b6      	uxth	r6, r6
  if (size < MIN_SIZE_ALIGNED) {
 8006c16:	2e0b      	cmp	r6, #11
 8006c18:	d904      	bls.n	8006c24 <mem_malloc+0x24>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006c1a:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
 8006c1e:	d902      	bls.n	8006c26 <mem_malloc+0x26>
    return NULL;
 8006c20:	2000      	movs	r0, #0
 8006c22:	e088      	b.n	8006d36 <mem_malloc+0x136>
    size = MIN_SIZE_ALIGNED;
 8006c24:	260c      	movs	r6, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006c26:	429e      	cmp	r6, r3
 8006c28:	f0c0 8089 	bcc.w	8006d3e <mem_malloc+0x13e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006c2c:	4b45      	ldr	r3, [pc, #276]	; (8006d44 <mem_malloc+0x144>)
 8006c2e:	6818      	ldr	r0, [r3, #0]
 8006c30:	f7ff fdf8 	bl	8006824 <mem_to_ptr>
 8006c34:	4605      	mov	r5, r0
 8006c36:	e04c      	b.n	8006cd2 <mem_malloc+0xd2>
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006c38:	4b43      	ldr	r3, [pc, #268]	; (8006d48 <mem_malloc+0x148>)
 8006c3a:	f240 3287 	movw	r2, #903	; 0x387
 8006c3e:	4943      	ldr	r1, [pc, #268]	; (8006d4c <mem_malloc+0x14c>)
 8006c40:	4843      	ldr	r0, [pc, #268]	; (8006d50 <mem_malloc+0x150>)
 8006c42:	f00d faf7 	bl	8014234 <iprintf>
 8006c46:	e062      	b.n	8006d0e <mem_malloc+0x10e>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	7103      	strb	r3, [r0, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006c4c:	4b3d      	ldr	r3, [pc, #244]	; (8006d44 <mem_malloc+0x144>)
 8006c4e:	6818      	ldr	r0, [r3, #0]
 8006c50:	42a0      	cmp	r0, r4
 8006c52:	d00f      	beq.n	8006c74 <mem_malloc+0x74>
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006c54:	4427      	add	r7, r4
 8006c56:	3708      	adds	r7, #8
 8006c58:	4b3e      	ldr	r3, [pc, #248]	; (8006d54 <mem_malloc+0x154>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	429f      	cmp	r7, r3
 8006c5e:	d81f      	bhi.n	8006ca0 <mem_malloc+0xa0>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006c60:	f014 0503 	ands.w	r5, r4, #3
 8006c64:	d124      	bne.n	8006cb0 <mem_malloc+0xb0>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006c66:	bb5d      	cbnz	r5, 8006cc0 <mem_malloc+0xc0>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006c68:	f104 0008 	add.w	r0, r4, #8
 8006c6c:	e063      	b.n	8006d36 <mem_malloc+0x136>
            cur = ptr_to_mem(cur->next);
 8006c6e:	8800      	ldrh	r0, [r0, #0]
 8006c70:	f7ff fdd2 	bl	8006818 <ptr_to_mem>
          while (cur->used && cur != ram_end) {
 8006c74:	7903      	ldrb	r3, [r0, #4]
 8006c76:	b11b      	cbz	r3, 8006c80 <mem_malloc+0x80>
 8006c78:	4a36      	ldr	r2, [pc, #216]	; (8006d54 <mem_malloc+0x154>)
 8006c7a:	6812      	ldr	r2, [r2, #0]
 8006c7c:	4282      	cmp	r2, r0
 8006c7e:	d1f6      	bne.n	8006c6e <mem_malloc+0x6e>
          lfree = cur;
 8006c80:	4a30      	ldr	r2, [pc, #192]	; (8006d44 <mem_malloc+0x144>)
 8006c82:	6010      	str	r0, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006c84:	4a33      	ldr	r2, [pc, #204]	; (8006d54 <mem_malloc+0x154>)
 8006c86:	6812      	ldr	r2, [r2, #0]
 8006c88:	4282      	cmp	r2, r0
 8006c8a:	d0e3      	beq.n	8006c54 <mem_malloc+0x54>
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d0e1      	beq.n	8006c54 <mem_malloc+0x54>
 8006c90:	4b2d      	ldr	r3, [pc, #180]	; (8006d48 <mem_malloc+0x148>)
 8006c92:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006c96:	4930      	ldr	r1, [pc, #192]	; (8006d58 <mem_malloc+0x158>)
 8006c98:	482d      	ldr	r0, [pc, #180]	; (8006d50 <mem_malloc+0x150>)
 8006c9a:	f00d facb 	bl	8014234 <iprintf>
 8006c9e:	e7d9      	b.n	8006c54 <mem_malloc+0x54>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006ca0:	4b29      	ldr	r3, [pc, #164]	; (8006d48 <mem_malloc+0x148>)
 8006ca2:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006ca6:	492d      	ldr	r1, [pc, #180]	; (8006d5c <mem_malloc+0x15c>)
 8006ca8:	4829      	ldr	r0, [pc, #164]	; (8006d50 <mem_malloc+0x150>)
 8006caa:	f00d fac3 	bl	8014234 <iprintf>
 8006cae:	e7d7      	b.n	8006c60 <mem_malloc+0x60>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006cb0:	4b25      	ldr	r3, [pc, #148]	; (8006d48 <mem_malloc+0x148>)
 8006cb2:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006cb6:	492a      	ldr	r1, [pc, #168]	; (8006d60 <mem_malloc+0x160>)
 8006cb8:	4825      	ldr	r0, [pc, #148]	; (8006d50 <mem_malloc+0x150>)
 8006cba:	f00d fabb 	bl	8014234 <iprintf>
 8006cbe:	e7d2      	b.n	8006c66 <mem_malloc+0x66>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006cc0:	4b21      	ldr	r3, [pc, #132]	; (8006d48 <mem_malloc+0x148>)
 8006cc2:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006cc6:	4927      	ldr	r1, [pc, #156]	; (8006d64 <mem_malloc+0x164>)
 8006cc8:	4821      	ldr	r0, [pc, #132]	; (8006d50 <mem_malloc+0x150>)
 8006cca:	f00d fab3 	bl	8014234 <iprintf>
 8006cce:	e7cb      	b.n	8006c68 <mem_malloc+0x68>
         ptr = ptr_to_mem(ptr)->next) {
 8006cd0:	8825      	ldrh	r5, [r4, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006cd2:	46a8      	mov	r8, r5
 8006cd4:	4637      	mov	r7, r6
 8006cd6:	f5c6 6348 	rsb	r3, r6, #3200	; 0xc80
 8006cda:	429d      	cmp	r5, r3
 8006cdc:	d22a      	bcs.n	8006d34 <mem_malloc+0x134>
      mem = ptr_to_mem(ptr);
 8006cde:	4628      	mov	r0, r5
 8006ce0:	f7ff fd9a 	bl	8006818 <ptr_to_mem>
 8006ce4:	4604      	mov	r4, r0
      if ((!mem->used) &&
 8006ce6:	7903      	ldrb	r3, [r0, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1f1      	bne.n	8006cd0 <mem_malloc+0xd0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006cec:	8803      	ldrh	r3, [r0, #0]
 8006cee:	eba3 0308 	sub.w	r3, r3, r8
 8006cf2:	3b08      	subs	r3, #8
      if ((!mem->used) &&
 8006cf4:	42bb      	cmp	r3, r7
 8006cf6:	d3eb      	bcc.n	8006cd0 <mem_malloc+0xd0>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006cf8:	f107 0214 	add.w	r2, r7, #20
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d3a3      	bcc.n	8006c48 <mem_malloc+0x48>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006d00:	442e      	add	r6, r5
 8006d02:	b2b6      	uxth	r6, r6
 8006d04:	3608      	adds	r6, #8
 8006d06:	b2b6      	uxth	r6, r6
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006d08:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
 8006d0c:	d094      	beq.n	8006c38 <mem_malloc+0x38>
          mem2 = ptr_to_mem(ptr2);
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f7ff fd82 	bl	8006818 <ptr_to_mem>
          mem2->used = 0;
 8006d14:	2300      	movs	r3, #0
 8006d16:	7103      	strb	r3, [r0, #4]
          mem2->next = mem->next;
 8006d18:	8823      	ldrh	r3, [r4, #0]
 8006d1a:	8003      	strh	r3, [r0, #0]
          mem2->prev = ptr;
 8006d1c:	8045      	strh	r5, [r0, #2]
          mem->next = ptr2;
 8006d1e:	8026      	strh	r6, [r4, #0]
          mem->used = 1;
 8006d20:	2301      	movs	r3, #1
 8006d22:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006d24:	8800      	ldrh	r0, [r0, #0]
 8006d26:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
 8006d2a:	d08f      	beq.n	8006c4c <mem_malloc+0x4c>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006d2c:	f7ff fd74 	bl	8006818 <ptr_to_mem>
 8006d30:	8046      	strh	r6, [r0, #2]
 8006d32:	e78b      	b.n	8006c4c <mem_malloc+0x4c>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006d34:	2000      	movs	r0, #0
}
 8006d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return NULL;
 8006d3a:	2000      	movs	r0, #0
}
 8006d3c:	4770      	bx	lr
    return NULL;
 8006d3e:	2000      	movs	r0, #0
 8006d40:	e7f9      	b.n	8006d36 <mem_malloc+0x136>
 8006d42:	bf00      	nop
 8006d44:	200005f8 	.word	0x200005f8
 8006d48:	080154d8 	.word	0x080154d8
 8006d4c:	08015658 	.word	0x08015658
 8006d50:	08015418 	.word	0x08015418
 8006d54:	20000600 	.word	0x20000600
 8006d58:	0801566c 	.word	0x0801566c
 8006d5c:	08015688 	.word	0x08015688
 8006d60:	080156b8 	.word	0x080156b8
 8006d64:	080156e8 	.word	0x080156e8

08006d68 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006d68:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006d6a:	6883      	ldr	r3, [r0, #8]
 8006d6c:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006d6e:	b124      	cbz	r4, 8006d7a <do_memp_malloc_pool+0x12>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006d70:	6822      	ldr	r2, [r4, #0]
 8006d72:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006d74:	f014 0f03 	tst.w	r4, #3
 8006d78:	d101      	bne.n	8006d7e <do_memp_malloc_pool+0x16>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006d7e:	4b04      	ldr	r3, [pc, #16]	; (8006d90 <do_memp_malloc_pool+0x28>)
 8006d80:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006d84:	4903      	ldr	r1, [pc, #12]	; (8006d94 <do_memp_malloc_pool+0x2c>)
 8006d86:	4804      	ldr	r0, [pc, #16]	; (8006d98 <do_memp_malloc_pool+0x30>)
 8006d88:	f00d fa54 	bl	8014234 <iprintf>
    return ((u8_t *)memp + MEMP_SIZE);
 8006d8c:	e7f5      	b.n	8006d7a <do_memp_malloc_pool+0x12>
 8006d8e:	bf00      	nop
 8006d90:	0801570c 	.word	0x0801570c
 8006d94:	0801573c 	.word	0x0801573c
 8006d98:	08015418 	.word	0x08015418

08006d9c <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006d9c:	b538      	push	{r3, r4, r5, lr}
 8006d9e:	4605      	mov	r5, r0
 8006da0:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006da2:	f011 0f03 	tst.w	r1, #3
 8006da6:	d105      	bne.n	8006db4 <do_memp_free_pool+0x18>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006da8:	68ab      	ldr	r3, [r5, #8]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 8006dae:	68ab      	ldr	r3, [r5, #8]
 8006db0:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006db2:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8006db4:	4b03      	ldr	r3, [pc, #12]	; (8006dc4 <do_memp_free_pool+0x28>)
 8006db6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006dba:	4903      	ldr	r1, [pc, #12]	; (8006dc8 <do_memp_free_pool+0x2c>)
 8006dbc:	4803      	ldr	r0, [pc, #12]	; (8006dcc <do_memp_free_pool+0x30>)
 8006dbe:	f00d fa39 	bl	8014234 <iprintf>
 8006dc2:	e7f1      	b.n	8006da8 <do_memp_free_pool+0xc>
 8006dc4:	0801570c 	.word	0x0801570c
 8006dc8:	08015760 	.word	0x08015760
 8006dcc:	08015418 	.word	0x08015418

08006dd0 <memp_init_pool>:
  *desc->tab = NULL;
 8006dd0:	6883      	ldr	r3, [r0, #8]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006dd6:	6843      	ldr	r3, [r0, #4]
 8006dd8:	3303      	adds	r3, #3
 8006dda:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8006dde:	8841      	ldrh	r1, [r0, #2]
 8006de0:	4291      	cmp	r1, r2
 8006de2:	dd08      	ble.n	8006df6 <memp_init_pool+0x26>
    memp->next = *desc->tab;
 8006de4:	6881      	ldr	r1, [r0, #8]
 8006de6:	6809      	ldr	r1, [r1, #0]
 8006de8:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8006dea:	6881      	ldr	r1, [r0, #8]
 8006dec:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006dee:	8801      	ldrh	r1, [r0, #0]
 8006df0:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 8006df2:	3201      	adds	r2, #1
 8006df4:	e7f3      	b.n	8006dde <memp_init_pool+0xe>
}
 8006df6:	4770      	bx	lr

08006df8 <memp_init>:
{
 8006df8:	b510      	push	{r4, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006dfa:	2400      	movs	r4, #0
 8006dfc:	e006      	b.n	8006e0c <memp_init+0x14>
    memp_init_pool(memp_pools[i]);
 8006dfe:	4b05      	ldr	r3, [pc, #20]	; (8006e14 <memp_init+0x1c>)
 8006e00:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006e04:	f7ff ffe4 	bl	8006dd0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006e08:	3401      	adds	r4, #1
 8006e0a:	b2a4      	uxth	r4, r4
 8006e0c:	2c0c      	cmp	r4, #12
 8006e0e:	d9f6      	bls.n	8006dfe <memp_init+0x6>
}
 8006e10:	bd10      	pop	{r4, pc}
 8006e12:	bf00      	nop
 8006e14:	08015858 	.word	0x08015858

08006e18 <memp_malloc>:
{
 8006e18:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006e1a:	280c      	cmp	r0, #12
 8006e1c:	d805      	bhi.n	8006e2a <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006e1e:	4b07      	ldr	r3, [pc, #28]	; (8006e3c <memp_malloc+0x24>)
 8006e20:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006e24:	f7ff ffa0 	bl	8006d68 <do_memp_malloc_pool>
}
 8006e28:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006e2a:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <memp_malloc+0x28>)
 8006e2c:	f240 1257 	movw	r2, #343	; 0x157
 8006e30:	4904      	ldr	r1, [pc, #16]	; (8006e44 <memp_malloc+0x2c>)
 8006e32:	4805      	ldr	r0, [pc, #20]	; (8006e48 <memp_malloc+0x30>)
 8006e34:	f00d f9fe 	bl	8014234 <iprintf>
 8006e38:	2000      	movs	r0, #0
 8006e3a:	e7f5      	b.n	8006e28 <memp_malloc+0x10>
 8006e3c:	08015858 	.word	0x08015858
 8006e40:	0801570c 	.word	0x0801570c
 8006e44:	08015780 	.word	0x08015780
 8006e48:	08015418 	.word	0x08015418

08006e4c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006e4c:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006e4e:	280c      	cmp	r0, #12
 8006e50:	d806      	bhi.n	8006e60 <memp_free+0x14>

  if (mem == NULL) {
 8006e52:	b121      	cbz	r1, 8006e5e <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006e54:	4b06      	ldr	r3, [pc, #24]	; (8006e70 <memp_free+0x24>)
 8006e56:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006e5a:	f7ff ff9f 	bl	8006d9c <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006e5e:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006e60:	4b04      	ldr	r3, [pc, #16]	; (8006e74 <memp_free+0x28>)
 8006e62:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006e66:	4904      	ldr	r1, [pc, #16]	; (8006e78 <memp_free+0x2c>)
 8006e68:	4804      	ldr	r0, [pc, #16]	; (8006e7c <memp_free+0x30>)
 8006e6a:	f00d f9e3 	bl	8014234 <iprintf>
 8006e6e:	e7f6      	b.n	8006e5e <memp_free+0x12>
 8006e70:	08015858 	.word	0x08015858
 8006e74:	0801570c 	.word	0x0801570c
 8006e78:	080157a0 	.word	0x080157a0
 8006e7c:	08015418 	.word	0x08015418

08006e80 <netif_do_set_netmask>:

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006e80:	680b      	ldr	r3, [r1, #0]
 8006e82:	69c2      	ldr	r2, [r0, #28]
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d008      	beq.n	8006e9a <netif_do_set_netmask+0x1a>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006e88:	b129      	cbz	r1, 8006e96 <netif_do_set_netmask+0x16>
 8006e8a:	61c3      	str	r3, [r0, #28]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006e92:	2001      	movs	r0, #1
 8006e94:	4770      	bx	lr
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006e96:	2300      	movs	r3, #0
 8006e98:	e7f7      	b.n	8006e8a <netif_do_set_netmask+0xa>
  }
  return 0; /* netmask unchanged */
 8006e9a:	2000      	movs	r0, #0
}
 8006e9c:	4770      	bx	lr

08006e9e <netif_do_set_gw>:

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006e9e:	680b      	ldr	r3, [r1, #0]
 8006ea0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d008      	beq.n	8006eb8 <netif_do_set_gw+0x1a>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006ea6:	b129      	cbz	r1, 8006eb4 <netif_do_set_gw+0x16>
 8006ea8:	6343      	str	r3, [r0, #52]	; 0x34
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
 8006eaa:	2300      	movs	r3, #0
 8006eac:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006eb0:	2001      	movs	r0, #1
 8006eb2:	4770      	bx	lr
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	e7f7      	b.n	8006ea8 <netif_do_set_gw+0xa>
  }
  return 0; /* gateway unchanged */
 8006eb8:	2000      	movs	r0, #0
}
 8006eba:	4770      	bx	lr

08006ebc <netif_null_output_ip6>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8006ebc:	f06f 000b 	mvn.w	r0, #11
 8006ec0:	4770      	bx	lr

08006ec2 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8006ec2:	f06f 000b 	mvn.w	r0, #11
 8006ec6:	4770      	bx	lr

08006ec8 <netif_do_ip_addr_changed>:
{
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	4604      	mov	r4, r0
 8006ecc:	460d      	mov	r5, r1
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006ece:	f001 fbbd 	bl	800864c <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f005 ff93 	bl	800ce00 <udp_netif_ip_addr_changed>
}
 8006eda:	bd38      	pop	{r3, r4, r5, pc}

08006edc <netif_issue_reports>:
{
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	460c      	mov	r4, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	b1b0      	cbz	r0, 8006f12 <netif_issue_reports+0x36>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006ee4:	f895 30df 	ldrb.w	r3, [r5, #223]	; 0xdf
 8006ee8:	f003 0205 	and.w	r2, r3, #5
 8006eec:	2a05      	cmp	r2, #5
 8006eee:	d10f      	bne.n	8006f10 <netif_issue_reports+0x34>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006ef0:	f014 0f01 	tst.w	r4, #1
 8006ef4:	d009      	beq.n	8006f0a <netif_issue_reports+0x2e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006ef6:	686a      	ldr	r2, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006ef8:	b13a      	cbz	r2, 8006f0a <netif_issue_reports+0x2e>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006efa:	f013 0f08 	tst.w	r3, #8
 8006efe:	d110      	bne.n	8006f22 <netif_issue_reports+0x46>
    if (netif->flags & NETIF_FLAG_IGMP) {
 8006f00:	f895 30df 	ldrb.w	r3, [r5, #223]	; 0xdf
 8006f04:	f013 0f20 	tst.w	r3, #32
 8006f08:	d110      	bne.n	8006f2c <netif_issue_reports+0x50>
  if (report_type & NETIF_REPORT_TYPE_IPV6) {
 8006f0a:	f014 0f02 	tst.w	r4, #2
 8006f0e:	d111      	bne.n	8006f34 <netif_issue_reports+0x58>
}
 8006f10:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006f12:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <netif_issue_reports+0x60>)
 8006f14:	f240 326d 	movw	r2, #877	; 0x36d
 8006f18:	4909      	ldr	r1, [pc, #36]	; (8006f40 <netif_issue_reports+0x64>)
 8006f1a:	480a      	ldr	r0, [pc, #40]	; (8006f44 <netif_issue_reports+0x68>)
 8006f1c:	f00d f98a 	bl	8014234 <iprintf>
 8006f20:	e7e0      	b.n	8006ee4 <netif_issue_reports+0x8>
      etharp_gratuitous(netif);
 8006f22:	1d29      	adds	r1, r5, #4
 8006f24:	4628      	mov	r0, r5
 8006f26:	f007 fd25 	bl	800e974 <etharp_request>
 8006f2a:	e7e9      	b.n	8006f00 <netif_issue_reports+0x24>
      igmp_report_groups(netif);
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	f008 f929 	bl	800f184 <igmp_report_groups>
 8006f32:	e7ea      	b.n	8006f0a <netif_issue_reports+0x2e>
    mld6_report_groups(netif);
 8006f34:	4628      	mov	r0, r5
 8006f36:	f00a fd4f 	bl	80119d8 <mld6_report_groups>
 8006f3a:	e7e9      	b.n	8006f10 <netif_issue_reports+0x34>
 8006f3c:	0801588c 	.word	0x0801588c
 8006f40:	080158c0 	.word	0x080158c0
 8006f44:	08015418 	.word	0x08015418

08006f48 <netif_do_set_ipaddr>:
{
 8006f48:	b570      	push	{r4, r5, r6, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006f50:	460e      	mov	r6, r1
 8006f52:	b321      	cbz	r1, 8006f9e <netif_do_set_ipaddr+0x56>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006f54:	b35d      	cbz	r5, 8006fae <netif_do_set_ipaddr+0x66>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006f56:	6832      	ldr	r2, [r6, #0]
 8006f58:	6863      	ldr	r3, [r4, #4]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d03c      	beq.n	8006fd8 <netif_do_set_ipaddr+0x90>
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006f5e:	9200      	str	r2, [sp, #0]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);
 8006f60:	2300      	movs	r3, #0
 8006f62:	f88d 3014 	strb.w	r3, [sp, #20]
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006f66:	7e23      	ldrb	r3, [r4, #24]
 8006f68:	752b      	strb	r3, [r5, #20]
 8006f6a:	7e23      	ldrb	r3, [r4, #24]
 8006f6c:	2b06      	cmp	r3, #6
 8006f6e:	d026      	beq.n	8006fbe <netif_do_set_ipaddr+0x76>
 8006f70:	6863      	ldr	r3, [r4, #4]
 8006f72:	602b      	str	r3, [r5, #0]
 8006f74:	2300      	movs	r3, #0
 8006f76:	60eb      	str	r3, [r5, #12]
 8006f78:	60ab      	str	r3, [r5, #8]
 8006f7a:	606b      	str	r3, [r5, #4]
 8006f7c:	742b      	strb	r3, [r5, #16]
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006f7e:	4669      	mov	r1, sp
 8006f80:	4628      	mov	r0, r5
 8006f82:	f7ff ffa1 	bl	8006ec8 <netif_do_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006f86:	b32e      	cbz	r6, 8006fd4 <netif_do_set_ipaddr+0x8c>
 8006f88:	6833      	ldr	r3, [r6, #0]
 8006f8a:	6063      	str	r3, [r4, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	7623      	strb	r3, [r4, #24]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006f90:	2101      	movs	r1, #1
 8006f92:	4620      	mov	r0, r4
 8006f94:	f7ff ffa2 	bl	8006edc <netif_issue_reports>
    return 1; /* address changed */
 8006f98:	2001      	movs	r0, #1
}
 8006f9a:	b006      	add	sp, #24
 8006f9c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006f9e:	4b0f      	ldr	r3, [pc, #60]	; (8006fdc <netif_do_set_ipaddr+0x94>)
 8006fa0:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006fa4:	490e      	ldr	r1, [pc, #56]	; (8006fe0 <netif_do_set_ipaddr+0x98>)
 8006fa6:	480f      	ldr	r0, [pc, #60]	; (8006fe4 <netif_do_set_ipaddr+0x9c>)
 8006fa8:	f00d f944 	bl	8014234 <iprintf>
 8006fac:	e7d2      	b.n	8006f54 <netif_do_set_ipaddr+0xc>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006fae:	4b0b      	ldr	r3, [pc, #44]	; (8006fdc <netif_do_set_ipaddr+0x94>)
 8006fb0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006fb4:	490a      	ldr	r1, [pc, #40]	; (8006fe0 <netif_do_set_ipaddr+0x98>)
 8006fb6:	480b      	ldr	r0, [pc, #44]	; (8006fe4 <netif_do_set_ipaddr+0x9c>)
 8006fb8:	f00d f93c 	bl	8014234 <iprintf>
 8006fbc:	e7cb      	b.n	8006f56 <netif_do_set_ipaddr+0xe>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006fbe:	6863      	ldr	r3, [r4, #4]
 8006fc0:	602b      	str	r3, [r5, #0]
 8006fc2:	68a3      	ldr	r3, [r4, #8]
 8006fc4:	606b      	str	r3, [r5, #4]
 8006fc6:	68e3      	ldr	r3, [r4, #12]
 8006fc8:	60ab      	str	r3, [r5, #8]
 8006fca:	6923      	ldr	r3, [r4, #16]
 8006fcc:	60eb      	str	r3, [r5, #12]
 8006fce:	7d23      	ldrb	r3, [r4, #20]
 8006fd0:	742b      	strb	r3, [r5, #16]
 8006fd2:	e7d4      	b.n	8006f7e <netif_do_set_ipaddr+0x36>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	e7d8      	b.n	8006f8a <netif_do_set_ipaddr+0x42>
  return 0; /* address unchanged */
 8006fd8:	2000      	movs	r0, #0
 8006fda:	e7de      	b.n	8006f9a <netif_do_set_ipaddr+0x52>
 8006fdc:	0801588c 	.word	0x0801588c
 8006fe0:	080158e4 	.word	0x080158e4
 8006fe4:	08015418 	.word	0x08015418

08006fe8 <netif_init>:
}
 8006fe8:	4770      	bx	lr
	...

08006fec <netif_set_addr>:
{
 8006fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff0:	b086      	sub	sp, #24
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	4616      	mov	r6, r2
 8006ff6:	461d      	mov	r5, r3
  if (ipaddr == NULL) {
 8006ff8:	460f      	mov	r7, r1
 8006ffa:	b1d9      	cbz	r1, 8007034 <netif_set_addr+0x48>
  if (netmask == NULL) {
 8006ffc:	b1e6      	cbz	r6, 8007038 <netif_set_addr+0x4c>
  if (gw == NULL) {
 8006ffe:	b1ed      	cbz	r5, 800703c <netif_set_addr+0x50>
  remove = ip4_addr_isany(ipaddr);
 8007000:	b10f      	cbz	r7, 8007006 <netif_set_addr+0x1a>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	b9e3      	cbnz	r3, 8007040 <netif_set_addr+0x54>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007006:	466a      	mov	r2, sp
 8007008:	4639      	mov	r1, r7
 800700a:	4620      	mov	r0, r4
 800700c:	f7ff ff9c 	bl	8006f48 <netif_do_set_ipaddr>
 8007010:	f04f 0801 	mov.w	r8, #1
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007014:	2200      	movs	r2, #0
 8007016:	4631      	mov	r1, r6
 8007018:	4620      	mov	r0, r4
 800701a:	f7ff ff31 	bl	8006e80 <netif_do_set_netmask>
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800701e:	2200      	movs	r2, #0
 8007020:	4629      	mov	r1, r5
 8007022:	4620      	mov	r0, r4
 8007024:	f7ff ff3b 	bl	8006e9e <netif_do_set_gw>
  if (!remove) {
 8007028:	f1b8 0f00 	cmp.w	r8, #0
 800702c:	d00b      	beq.n	8007046 <netif_set_addr+0x5a>
}
 800702e:	b006      	add	sp, #24
 8007030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ipaddr = IP4_ADDR_ANY4;
 8007034:	4f07      	ldr	r7, [pc, #28]	; (8007054 <netif_set_addr+0x68>)
 8007036:	e7e1      	b.n	8006ffc <netif_set_addr+0x10>
    netmask = IP4_ADDR_ANY4;
 8007038:	4e06      	ldr	r6, [pc, #24]	; (8007054 <netif_set_addr+0x68>)
 800703a:	e7e0      	b.n	8006ffe <netif_set_addr+0x12>
    gw = IP4_ADDR_ANY4;
 800703c:	4d05      	ldr	r5, [pc, #20]	; (8007054 <netif_set_addr+0x68>)
 800703e:	e7df      	b.n	8007000 <netif_set_addr+0x14>
  remove = ip4_addr_isany(ipaddr);
 8007040:	f04f 0800 	mov.w	r8, #0
 8007044:	e7e6      	b.n	8007014 <netif_set_addr+0x28>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007046:	466a      	mov	r2, sp
 8007048:	4639      	mov	r1, r7
 800704a:	4620      	mov	r0, r4
 800704c:	f7ff ff7c 	bl	8006f48 <netif_do_set_ipaddr>
}
 8007050:	e7ed      	b.n	800702e <netif_set_addr+0x42>
 8007052:	bf00      	nop
 8007054:	080178d4 	.word	0x080178d4

08007058 <netif_add>:
{
 8007058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800705c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007060:	4605      	mov	r5, r0
 8007062:	2800      	cmp	r0, #0
 8007064:	d033      	beq.n	80070ce <netif_add+0x76>
 8007066:	460e      	mov	r6, r1
 8007068:	4617      	mov	r7, r2
 800706a:	4698      	mov	r8, r3
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800706c:	f1b9 0f00 	cmp.w	r9, #0
 8007070:	d035      	beq.n	80070de <netif_add+0x86>
  if (ipaddr == NULL) {
 8007072:	2900      	cmp	r1, #0
 8007074:	d03c      	beq.n	80070f0 <netif_add+0x98>
  if (netmask == NULL) {
 8007076:	2f00      	cmp	r7, #0
 8007078:	d03c      	beq.n	80070f4 <netif_add+0x9c>
  if (gw == NULL) {
 800707a:	f1b8 0f00 	cmp.w	r8, #0
 800707e:	d03b      	beq.n	80070f8 <netif_add+0xa0>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007080:	2300      	movs	r3, #0
 8007082:	606b      	str	r3, [r5, #4]
 8007084:	60ab      	str	r3, [r5, #8]
 8007086:	60eb      	str	r3, [r5, #12]
 8007088:	612b      	str	r3, [r5, #16]
 800708a:	752b      	strb	r3, [r5, #20]
 800708c:	f115 0f04 	cmn.w	r5, #4
 8007090:	d000      	beq.n	8007094 <netif_add+0x3c>
 8007092:	762b      	strb	r3, [r5, #24]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007094:	2300      	movs	r3, #0
 8007096:	61eb      	str	r3, [r5, #28]
 8007098:	622b      	str	r3, [r5, #32]
 800709a:	626b      	str	r3, [r5, #36]	; 0x24
 800709c:	62ab      	str	r3, [r5, #40]	; 0x28
 800709e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 80070a2:	f115 0f1c 	cmn.w	r5, #28
 80070a6:	d001      	beq.n	80070ac <netif_add+0x54>
 80070a8:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
  ip_addr_set_zero_ip4(&netif->gw);
 80070ac:	2300      	movs	r3, #0
 80070ae:	636b      	str	r3, [r5, #52]	; 0x34
 80070b0:	63ab      	str	r3, [r5, #56]	; 0x38
 80070b2:	63eb      	str	r3, [r5, #60]	; 0x3c
 80070b4:	642b      	str	r3, [r5, #64]	; 0x40
 80070b6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80070ba:	f115 0f34 	cmn.w	r5, #52	; 0x34
 80070be:	d001      	beq.n	80070c4 <netif_add+0x6c>
 80070c0:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
  netif->output = netif_null_output_ip4;
 80070c4:	4b62      	ldr	r3, [pc, #392]	; (8007250 <netif_add+0x1f8>)
 80070c6:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80070ca:	2000      	movs	r0, #0
 80070cc:	e025      	b.n	800711a <netif_add+0xc2>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80070ce:	4b61      	ldr	r3, [pc, #388]	; (8007254 <netif_add+0x1fc>)
 80070d0:	f240 1227 	movw	r2, #295	; 0x127
 80070d4:	4960      	ldr	r1, [pc, #384]	; (8007258 <netif_add+0x200>)
 80070d6:	4861      	ldr	r0, [pc, #388]	; (800725c <netif_add+0x204>)
 80070d8:	f00d f8ac 	bl	8014234 <iprintf>
 80070dc:	e0aa      	b.n	8007234 <netif_add+0x1dc>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80070de:	4b5d      	ldr	r3, [pc, #372]	; (8007254 <netif_add+0x1fc>)
 80070e0:	f44f 7294 	mov.w	r2, #296	; 0x128
 80070e4:	495e      	ldr	r1, [pc, #376]	; (8007260 <netif_add+0x208>)
 80070e6:	485d      	ldr	r0, [pc, #372]	; (800725c <netif_add+0x204>)
 80070e8:	f00d f8a4 	bl	8014234 <iprintf>
 80070ec:	2500      	movs	r5, #0
 80070ee:	e0a1      	b.n	8007234 <netif_add+0x1dc>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80070f0:	4e5c      	ldr	r6, [pc, #368]	; (8007264 <netif_add+0x20c>)
 80070f2:	e7c0      	b.n	8007076 <netif_add+0x1e>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80070f4:	4f5b      	ldr	r7, [pc, #364]	; (8007264 <netif_add+0x20c>)
 80070f6:	e7c0      	b.n	800707a <netif_add+0x22>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80070f8:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8007264 <netif_add+0x20c>
 80070fc:	e7c0      	b.n	8007080 <netif_add+0x28>
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
 80070fe:	192a      	adds	r2, r5, r4
 8007100:	2300      	movs	r3, #0
 8007102:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
    netif->ip6_addr_valid_life[i] = IP6_ADDR_LIFE_STATIC;
 8007106:	f104 0226 	add.w	r2, r4, #38	; 0x26
 800710a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    netif->ip6_addr_pref_life[i] = IP6_ADDR_LIFE_STATIC;
 800710e:	3428      	adds	r4, #40	; 0x28
 8007110:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8007114:	6063      	str	r3, [r4, #4]
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8007116:	3001      	adds	r0, #1
 8007118:	b240      	sxtb	r0, r0
 800711a:	2802      	cmp	r0, #2
 800711c:	dc1b      	bgt.n	8007156 <netif_add+0xfe>
    ip_addr_set_zero_ip6(&netif->ip6_addr[i]);
 800711e:	4604      	mov	r4, r0
 8007120:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8007124:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007128:	2200      	movs	r2, #0
 800712a:	64da      	str	r2, [r3, #76]	; 0x4c
 800712c:	651a      	str	r2, [r3, #80]	; 0x50
 800712e:	655a      	str	r2, [r3, #84]	; 0x54
 8007130:	659a      	str	r2, [r3, #88]	; 0x58
 8007132:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8007136:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	3348      	adds	r3, #72	; 0x48
 800713e:	442b      	add	r3, r5
 8007140:	f113 0f04 	cmn.w	r3, #4
 8007144:	d0db      	beq.n	80070fe <netif_add+0xa6>
 8007146:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800714a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800714e:	2206      	movs	r2, #6
 8007150:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8007154:	e7d3      	b.n	80070fe <netif_add+0xa6>
  netif->output_ip6 = netif_null_output_ip6;
 8007156:	4b44      	ldr	r3, [pc, #272]	; (8007268 <netif_add+0x210>)
 8007158:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
  netif->mtu = 0;
 800715c:	2400      	movs	r4, #0
 800715e:	f8a5 40d4 	strh.w	r4, [r5, #212]	; 0xd4
  netif->flags = 0;
 8007162:	f885 40df 	strb.w	r4, [r5, #223]	; 0xdf
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8007166:	f8c5 40c8 	str.w	r4, [r5, #200]	; 0xc8
 800716a:	f8c5 40cc 	str.w	r4, [r5, #204]	; 0xcc
 800716e:	f8c5 40d0 	str.w	r4, [r5, #208]	; 0xd0
  netif->ip6_autoconfig_enabled = 0;
 8007172:	f885 40e3 	strb.w	r4, [r5, #227]	; 0xe3
  nd6_restart_netif(netif);
 8007176:	4628      	mov	r0, r5
 8007178:	f00c ff4e 	bl	8014018 <nd6_restart_netif>
  netif->link_callback = NULL;
 800717c:	f8c5 40c0 	str.w	r4, [r5, #192]	; 0xc0
  netif->igmp_mac_filter = NULL;
 8007180:	f8c5 40e8 	str.w	r4, [r5, #232]	; 0xe8
  netif->mld_mac_filter = NULL;
 8007184:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
  netif->state = state;
 8007188:	9b08      	ldr	r3, [sp, #32]
 800718a:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
  netif->num = netif_num;
 800718e:	4b37      	ldr	r3, [pc, #220]	; (800726c <netif_add+0x214>)
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	f885 30e2 	strb.w	r3, [r5, #226]	; 0xe2
  netif->input = input;
 8007196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007198:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
  netif_set_addr(netif, ipaddr, netmask, gw);
 800719c:	4643      	mov	r3, r8
 800719e:	463a      	mov	r2, r7
 80071a0:	4631      	mov	r1, r6
 80071a2:	4628      	mov	r0, r5
 80071a4:	f7ff ff22 	bl	8006fec <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80071a8:	4628      	mov	r0, r5
 80071aa:	47c8      	blx	r9
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d14c      	bne.n	800724a <netif_add+0x1f2>
  netif->mtu6 = netif->mtu;
 80071b0:	f8b5 30d4 	ldrh.w	r3, [r5, #212]	; 0xd4
 80071b4:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
 80071b8:	e024      	b.n	8007204 <netif_add+0x1ac>
        netif->num = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	f885 30e2 	strb.w	r3, [r5, #226]	; 0xe2
 80071c0:	e024      	b.n	800720c <netif_add+0x1b4>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80071c2:	4b24      	ldr	r3, [pc, #144]	; (8007254 <netif_add+0x1fc>)
 80071c4:	f240 128b 	movw	r2, #395	; 0x18b
 80071c8:	4929      	ldr	r1, [pc, #164]	; (8007270 <netif_add+0x218>)
 80071ca:	4824      	ldr	r0, [pc, #144]	; (800725c <netif_add+0x204>)
 80071cc:	f00d f832 	bl	8014234 <iprintf>
 80071d0:	e010      	b.n	80071f4 <netif_add+0x19c>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80071d2:	4b20      	ldr	r3, [pc, #128]	; (8007254 <netif_add+0x1fc>)
 80071d4:	f240 128d 	movw	r2, #397	; 0x18d
 80071d8:	4926      	ldr	r1, [pc, #152]	; (8007274 <netif_add+0x21c>)
 80071da:	4820      	ldr	r0, [pc, #128]	; (800725c <netif_add+0x204>)
 80071dc:	f00d f82a 	bl	8014234 <iprintf>
        if (netif2->num == netif->num) {
 80071e0:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
 80071e4:	f895 30e2 	ldrb.w	r3, [r5, #226]	; 0xe2
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d007      	beq.n	80071fc <netif_add+0x1a4>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80071ec:	6824      	ldr	r4, [r4, #0]
 80071ee:	b144      	cbz	r4, 8007202 <netif_add+0x1aa>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80071f0:	42ac      	cmp	r4, r5
 80071f2:	d0e6      	beq.n	80071c2 <netif_add+0x16a>
        num_netifs++;
 80071f4:	3601      	adds	r6, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80071f6:	2eff      	cmp	r6, #255	; 0xff
 80071f8:	ddf2      	ble.n	80071e0 <netif_add+0x188>
 80071fa:	e7ea      	b.n	80071d2 <netif_add+0x17a>
          netif->num++;
 80071fc:	3301      	adds	r3, #1
 80071fe:	f885 30e2 	strb.w	r3, [r5, #226]	; 0xe2
    } while (netif2 != NULL);
 8007202:	b13c      	cbz	r4, 8007214 <netif_add+0x1bc>
      if (netif->num == 255) {
 8007204:	f895 30e2 	ldrb.w	r3, [r5, #226]	; 0xe2
 8007208:	2bff      	cmp	r3, #255	; 0xff
 800720a:	d0d6      	beq.n	80071ba <netif_add+0x162>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800720c:	4b1a      	ldr	r3, [pc, #104]	; (8007278 <netif_add+0x220>)
 800720e:	681c      	ldr	r4, [r3, #0]
      num_netifs = 0;
 8007210:	2600      	movs	r6, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007212:	e7ec      	b.n	80071ee <netif_add+0x196>
  if (netif->num == 254) {
 8007214:	f895 30e2 	ldrb.w	r3, [r5, #226]	; 0xe2
 8007218:	2bfe      	cmp	r3, #254	; 0xfe
 800721a:	d00e      	beq.n	800723a <netif_add+0x1e2>
    netif_num = (u8_t)(netif->num + 1);
 800721c:	3301      	adds	r3, #1
 800721e:	4a13      	ldr	r2, [pc, #76]	; (800726c <netif_add+0x214>)
 8007220:	7013      	strb	r3, [r2, #0]
  netif->next = netif_list;
 8007222:	4b15      	ldr	r3, [pc, #84]	; (8007278 <netif_add+0x220>)
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	602a      	str	r2, [r5, #0]
  netif_list = netif;
 8007228:	601d      	str	r5, [r3, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
 800722a:	f895 30df 	ldrb.w	r3, [r5, #223]	; 0xdf
 800722e:	f013 0f20 	tst.w	r3, #32
 8007232:	d106      	bne.n	8007242 <netif_add+0x1ea>
}
 8007234:	4628      	mov	r0, r5
 8007236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    netif_num = 0;
 800723a:	4b0c      	ldr	r3, [pc, #48]	; (800726c <netif_add+0x214>)
 800723c:	2200      	movs	r2, #0
 800723e:	701a      	strb	r2, [r3, #0]
 8007240:	e7ef      	b.n	8007222 <netif_add+0x1ca>
    igmp_start(netif);
 8007242:	4628      	mov	r0, r5
 8007244:	f008 f800 	bl	800f248 <igmp_start>
 8007248:	e7f4      	b.n	8007234 <netif_add+0x1dc>
    return NULL;
 800724a:	2500      	movs	r5, #0
 800724c:	e7f2      	b.n	8007234 <netif_add+0x1dc>
 800724e:	bf00      	nop
 8007250:	08006ec3 	.word	0x08006ec3
 8007254:	0801588c 	.word	0x0801588c
 8007258:	080158f4 	.word	0x080158f4
 800725c:	08015418 	.word	0x08015418
 8007260:	08015910 	.word	0x08015910
 8007264:	080178d4 	.word	0x080178d4
 8007268:	08006ebd 	.word	0x08006ebd
 800726c:	20000638 	.word	0x20000638
 8007270:	08015934 	.word	0x08015934
 8007274:	08015948 	.word	0x08015948
 8007278:	20007b10 	.word	0x20007b10

0800727c <netif_set_default>:
  netif_default = netif;
 800727c:	4b01      	ldr	r3, [pc, #4]	; (8007284 <netif_set_default+0x8>)
 800727e:	6018      	str	r0, [r3, #0]
}
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20007b14 	.word	0x20007b14

08007288 <netif_set_up>:
{
 8007288:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800728a:	b130      	cbz	r0, 800729a <netif_set_up+0x12>
 800728c:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800728e:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 8007292:	f013 0f01 	tst.w	r3, #1
 8007296:	d008      	beq.n	80072aa <netif_set_up+0x22>
}
 8007298:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800729a:	4b09      	ldr	r3, [pc, #36]	; (80072c0 <netif_set_up+0x38>)
 800729c:	f44f 7254 	mov.w	r2, #848	; 0x350
 80072a0:	4908      	ldr	r1, [pc, #32]	; (80072c4 <netif_set_up+0x3c>)
 80072a2:	4809      	ldr	r0, [pc, #36]	; (80072c8 <netif_set_up+0x40>)
 80072a4:	f00c ffc6 	bl	8014234 <iprintf>
 80072a8:	e7f6      	b.n	8007298 <netif_set_up+0x10>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80072aa:	f043 0301 	orr.w	r3, r3, #1
 80072ae:	f880 30df 	strb.w	r3, [r0, #223]	; 0xdf
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80072b2:	2103      	movs	r1, #3
 80072b4:	f7ff fe12 	bl	8006edc <netif_issue_reports>
    nd6_restart_netif(netif);
 80072b8:	4620      	mov	r0, r4
 80072ba:	f00c fead 	bl	8014018 <nd6_restart_netif>
 80072be:	e7eb      	b.n	8007298 <netif_set_up+0x10>
 80072c0:	0801588c 	.word	0x0801588c
 80072c4:	08015978 	.word	0x08015978
 80072c8:	08015418 	.word	0x08015418

080072cc <netif_set_down>:
{
 80072cc:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80072ce:	b180      	cbz	r0, 80072f2 <netif_set_down+0x26>
 80072d0:	4604      	mov	r4, r0
  if (netif->flags & NETIF_FLAG_UP) {
 80072d2:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 80072d6:	f013 0f01 	tst.w	r3, #1
 80072da:	d009      	beq.n	80072f0 <netif_set_down+0x24>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80072dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80072e0:	f880 30df 	strb.w	r3, [r0, #223]	; 0xdf
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80072e4:	f013 0f08 	tst.w	r3, #8
 80072e8:	d10b      	bne.n	8007302 <netif_set_down+0x36>
    nd6_cleanup_netif(netif);
 80072ea:	4620      	mov	r0, r4
 80072ec:	f00c fdfe 	bl	8013eec <nd6_cleanup_netif>
}
 80072f0:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80072f2:	4b05      	ldr	r3, [pc, #20]	; (8007308 <netif_set_down+0x3c>)
 80072f4:	f240 329b 	movw	r2, #923	; 0x39b
 80072f8:	4904      	ldr	r1, [pc, #16]	; (800730c <netif_set_down+0x40>)
 80072fa:	4805      	ldr	r0, [pc, #20]	; (8007310 <netif_set_down+0x44>)
 80072fc:	f00c ff9a 	bl	8014234 <iprintf>
 8007300:	e7f6      	b.n	80072f0 <netif_set_down+0x24>
      etharp_cleanup_netif(netif);
 8007302:	f007 fab5 	bl	800e870 <etharp_cleanup_netif>
 8007306:	e7f0      	b.n	80072ea <netif_set_down+0x1e>
 8007308:	0801588c 	.word	0x0801588c
 800730c:	08015994 	.word	0x08015994
 8007310:	08015418 	.word	0x08015418

08007314 <netif_set_link_callback>:
  if (netif) {
 8007314:	b108      	cbz	r0, 800731a <netif_set_link_callback+0x6>
    netif->link_callback = link_callback;
 8007316:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
}
 800731a:	4770      	bx	lr

0800731c <netif_ip6_addr_set_state>:
{
 800731c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007320:	460c      	mov	r4, r1
 8007322:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8007324:	4607      	mov	r7, r0
 8007326:	b1e0      	cbz	r0, 8007362 <netif_ip6_addr_set_state+0x46>
  LWIP_ASSERT("invalid index", addr_idx < LWIP_IPV6_NUM_ADDRESSES);
 8007328:	2c02      	cmp	r4, #2
 800732a:	dc22      	bgt.n	8007372 <netif_ip6_addr_set_state+0x56>
  old_state = netif_ip6_addr_state(netif, addr_idx);
 800732c:	193b      	adds	r3, r7, r4
 800732e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
  if (old_state != state) {
 8007332:	42ab      	cmp	r3, r5
 8007334:	d013      	beq.n	800735e <netif_ip6_addr_set_state+0x42>
    u8_t old_valid = old_state & IP6_ADDR_VALID;
 8007336:	f003 0610 	and.w	r6, r3, #16
    u8_t new_valid = state & IP6_ADDR_VALID;
 800733a:	f005 0810 	and.w	r8, r5, #16
    if (netif->flags & NETIF_FLAG_MLD6) {
 800733e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8007342:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007346:	d11c      	bne.n	8007382 <netif_ip6_addr_set_state+0x66>
    if (old_valid && !new_valid) {
 8007348:	b116      	cbz	r6, 8007350 <netif_ip6_addr_set_state+0x34>
 800734a:	f1b8 0f00 	cmp.w	r8, #0
 800734e:	d01e      	beq.n	800738e <netif_ip6_addr_set_state+0x72>
    netif->ip6_addr_state[addr_idx] = state;
 8007350:	443c      	add	r4, r7
 8007352:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    if (!old_valid && new_valid) {
 8007356:	b916      	cbnz	r6, 800735e <netif_ip6_addr_set_state+0x42>
 8007358:	f1b8 0f00 	cmp.w	r8, #0
 800735c:	d121      	bne.n	80073a2 <netif_ip6_addr_set_state+0x86>
}
 800735e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8007362:	4b12      	ldr	r3, [pc, #72]	; (80073ac <netif_ip6_addr_set_state+0x90>)
 8007364:	f240 5275 	movw	r2, #1397	; 0x575
 8007368:	4911      	ldr	r1, [pc, #68]	; (80073b0 <netif_ip6_addr_set_state+0x94>)
 800736a:	4812      	ldr	r0, [pc, #72]	; (80073b4 <netif_ip6_addr_set_state+0x98>)
 800736c:	f00c ff62 	bl	8014234 <iprintf>
 8007370:	e7da      	b.n	8007328 <netif_ip6_addr_set_state+0xc>
  LWIP_ASSERT("invalid index", addr_idx < LWIP_IPV6_NUM_ADDRESSES);
 8007372:	4b0e      	ldr	r3, [pc, #56]	; (80073ac <netif_ip6_addr_set_state+0x90>)
 8007374:	f240 5276 	movw	r2, #1398	; 0x576
 8007378:	490f      	ldr	r1, [pc, #60]	; (80073b8 <netif_ip6_addr_set_state+0x9c>)
 800737a:	480e      	ldr	r0, [pc, #56]	; (80073b4 <netif_ip6_addr_set_state+0x98>)
 800737c:	f00c ff5a 	bl	8014234 <iprintf>
 8007380:	e7d4      	b.n	800732c <netif_ip6_addr_set_state+0x10>
      nd6_adjust_mld_membership(netif, addr_idx, state);
 8007382:	462a      	mov	r2, r5
 8007384:	4621      	mov	r1, r4
 8007386:	4638      	mov	r0, r7
 8007388:	f00c fe06 	bl	8013f98 <nd6_adjust_mld_membership>
 800738c:	e7dc      	b.n	8007348 <netif_ip6_addr_set_state+0x2c>
      netif_do_ip_addr_changed(netif_ip_addr6(netif, addr_idx), NULL);
 800738e:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8007392:	00c0      	lsls	r0, r0, #3
 8007394:	3048      	adds	r0, #72	; 0x48
 8007396:	4438      	add	r0, r7
 8007398:	2100      	movs	r1, #0
 800739a:	3004      	adds	r0, #4
 800739c:	f7ff fd94 	bl	8006ec8 <netif_do_ip_addr_changed>
 80073a0:	e7d6      	b.n	8007350 <netif_ip6_addr_set_state+0x34>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV6);
 80073a2:	2102      	movs	r1, #2
 80073a4:	4638      	mov	r0, r7
 80073a6:	f7ff fd99 	bl	8006edc <netif_issue_reports>
}
 80073aa:	e7d8      	b.n	800735e <netif_ip6_addr_set_state+0x42>
 80073ac:	0801588c 	.word	0x0801588c
 80073b0:	08015408 	.word	0x08015408
 80073b4:	08015418 	.word	0x08015418
 80073b8:	080159b4 	.word	0x080159b4

080073bc <netif_get_ip6_addr_match>:
{
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	460c      	mov	r4, r1
  LWIP_ASSERT("netif_get_ip6_addr_match: invalid netif", netif != NULL);
 80073c0:	4605      	mov	r5, r0
 80073c2:	b158      	cbz	r0, 80073dc <netif_get_ip6_addr_match+0x20>
  LWIP_ASSERT("netif_get_ip6_addr_match: invalid ip6addr", ip6addr != NULL);
 80073c4:	b194      	cbz	r4, 80073ec <netif_get_ip6_addr_match+0x30>
  if (ip6_addr_has_zone(ip6addr) && !ip6_addr_test_zone(ip6addr, netif)) {
 80073c6:	7c22      	ldrb	r2, [r4, #16]
 80073c8:	2a00      	cmp	r2, #0
 80073ca:	d041      	beq.n	8007450 <netif_get_ip6_addr_match+0x94>
 80073cc:	f895 30e2 	ldrb.w	r3, [r5, #226]	; 0xe2
 80073d0:	3301      	adds	r3, #1
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d140      	bne.n	800745a <netif_get_ip6_addr_match+0x9e>
 80073d8:	2000      	movs	r0, #0
 80073da:	e011      	b.n	8007400 <netif_get_ip6_addr_match+0x44>
  LWIP_ASSERT("netif_get_ip6_addr_match: invalid netif", netif != NULL);
 80073dc:	4b20      	ldr	r3, [pc, #128]	; (8007460 <netif_get_ip6_addr_match+0xa4>)
 80073de:	f240 52be 	movw	r2, #1470	; 0x5be
 80073e2:	4920      	ldr	r1, [pc, #128]	; (8007464 <netif_get_ip6_addr_match+0xa8>)
 80073e4:	4820      	ldr	r0, [pc, #128]	; (8007468 <netif_get_ip6_addr_match+0xac>)
 80073e6:	f00c ff25 	bl	8014234 <iprintf>
 80073ea:	e7eb      	b.n	80073c4 <netif_get_ip6_addr_match+0x8>
  LWIP_ASSERT("netif_get_ip6_addr_match: invalid ip6addr", ip6addr != NULL);
 80073ec:	4b1c      	ldr	r3, [pc, #112]	; (8007460 <netif_get_ip6_addr_match+0xa4>)
 80073ee:	f240 52bf 	movw	r2, #1471	; 0x5bf
 80073f2:	491e      	ldr	r1, [pc, #120]	; (800746c <netif_get_ip6_addr_match+0xb0>)
 80073f4:	481c      	ldr	r0, [pc, #112]	; (8007468 <netif_get_ip6_addr_match+0xac>)
 80073f6:	f00c ff1d 	bl	8014234 <iprintf>
 80073fa:	e7e4      	b.n	80073c6 <netif_get_ip6_addr_match+0xa>
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80073fc:	3001      	adds	r0, #1
 80073fe:	b240      	sxtb	r0, r0
 8007400:	2802      	cmp	r0, #2
 8007402:	dc27      	bgt.n	8007454 <netif_get_ip6_addr_match+0x98>
    if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i)) &&
 8007404:	182b      	adds	r3, r5, r0
 8007406:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800740a:	2b00      	cmp	r3, #0
 800740c:	d0f6      	beq.n	80073fc <netif_get_ip6_addr_match+0x40>
        ip6_addr_cmp_zoneless(netif_ip6_addr(netif, i), ip6addr)) {
 800740e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8007412:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007416:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007418:	6823      	ldr	r3, [r4, #0]
    if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i)) &&
 800741a:	4299      	cmp	r1, r3
 800741c:	d1ee      	bne.n	80073fc <netif_get_ip6_addr_match+0x40>
        ip6_addr_cmp_zoneless(netif_ip6_addr(netif, i), ip6addr)) {
 800741e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8007422:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007426:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007428:	6863      	ldr	r3, [r4, #4]
 800742a:	4299      	cmp	r1, r3
 800742c:	d1e6      	bne.n	80073fc <netif_get_ip6_addr_match+0x40>
 800742e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8007432:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007436:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007438:	68a3      	ldr	r3, [r4, #8]
 800743a:	4299      	cmp	r1, r3
 800743c:	d1de      	bne.n	80073fc <netif_get_ip6_addr_match+0x40>
 800743e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8007442:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
 8007446:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007448:	68e3      	ldr	r3, [r4, #12]
 800744a:	429a      	cmp	r2, r3
 800744c:	d1d6      	bne.n	80073fc <netif_get_ip6_addr_match+0x40>
 800744e:	e003      	b.n	8007458 <netif_get_ip6_addr_match+0x9c>
 8007450:	2000      	movs	r0, #0
 8007452:	e7d5      	b.n	8007400 <netif_get_ip6_addr_match+0x44>
  return -1;
 8007454:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007458:	bd38      	pop	{r3, r4, r5, pc}
    return -1; /* wrong zone, no match */
 800745a:	f04f 30ff 	mov.w	r0, #4294967295
 800745e:	e7fb      	b.n	8007458 <netif_get_ip6_addr_match+0x9c>
 8007460:	0801588c 	.word	0x0801588c
 8007464:	080159c4 	.word	0x080159c4
 8007468:	08015418 	.word	0x08015418
 800746c:	080159ec 	.word	0x080159ec

08007470 <netif_create_ip6_linklocal_address>:
{
 8007470:	b570      	push	{r4, r5, r6, lr}
 8007472:	460c      	mov	r4, r1
  LWIP_ASSERT("netif_create_ip6_linklocal_address: invalid netif", netif != NULL);
 8007474:	4605      	mov	r5, r0
 8007476:	b150      	cbz	r0, 800748e <netif_create_ip6_linklocal_address+0x1e>
  ip_2_ip6(&netif->ip6_addr[0])->addr[0] = PP_HTONL(0xfe800000ul);
 8007478:	f248 03fe 	movw	r3, #33022	; 0x80fe
 800747c:	64eb      	str	r3, [r5, #76]	; 0x4c
  ip_2_ip6(&netif->ip6_addr[0])->addr[1] = 0;
 800747e:	2300      	movs	r3, #0
 8007480:	652b      	str	r3, [r5, #80]	; 0x50
  if (from_mac_48bit) {
 8007482:	b964      	cbnz	r4, 800749e <netif_create_ip6_linklocal_address+0x2e>
    ip_2_ip6(&netif->ip6_addr[0])->addr[2] = 0;
 8007484:	2300      	movs	r3, #0
 8007486:	656b      	str	r3, [r5, #84]	; 0x54
    ip_2_ip6(&netif->ip6_addr[0])->addr[3] = 0;
 8007488:	65ab      	str	r3, [r5, #88]	; 0x58
    addr_index = 3;
 800748a:	2603      	movs	r6, #3
    for (i = 0; (i < 8) && (i < netif->hwaddr_len); i++) {
 800748c:	e050      	b.n	8007530 <netif_create_ip6_linklocal_address+0xc0>
  LWIP_ASSERT("netif_create_ip6_linklocal_address: invalid netif", netif != NULL);
 800748e:	4b2f      	ldr	r3, [pc, #188]	; (800754c <netif_create_ip6_linklocal_address+0xdc>)
 8007490:	f240 52df 	movw	r2, #1503	; 0x5df
 8007494:	492e      	ldr	r1, [pc, #184]	; (8007550 <netif_create_ip6_linklocal_address+0xe0>)
 8007496:	482f      	ldr	r0, [pc, #188]	; (8007554 <netif_create_ip6_linklocal_address+0xe4>)
 8007498:	f00c fecc 	bl	8014234 <iprintf>
 800749c:	e7ec      	b.n	8007478 <netif_create_ip6_linklocal_address+0x8>
    ip_2_ip6(&netif->ip6_addr[0])->addr[2] = lwip_htonl((((u32_t)(netif->hwaddr[0] ^ 0x02)) << 24) |
 800749e:	f895 00d8 	ldrb.w	r0, [r5, #216]	; 0xd8
 80074a2:	f080 0302 	eor.w	r3, r0, #2
        ((u32_t)(netif->hwaddr[1]) << 16) |
 80074a6:	f895 00d9 	ldrb.w	r0, [r5, #217]	; 0xd9
 80074aa:	0400      	lsls	r0, r0, #16
    ip_2_ip6(&netif->ip6_addr[0])->addr[2] = lwip_htonl((((u32_t)(netif->hwaddr[0] ^ 0x02)) << 24) |
 80074ac:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
        ((u32_t)(netif->hwaddr[2]) << 8) |
 80074b0:	f895 30da 	ldrb.w	r3, [r5, #218]	; 0xda
        ((u32_t)(netif->hwaddr[1]) << 16) |
 80074b4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    ip_2_ip6(&netif->ip6_addr[0])->addr[2] = lwip_htonl((((u32_t)(netif->hwaddr[0] ^ 0x02)) << 24) |
 80074b8:	f040 00ff 	orr.w	r0, r0, #255	; 0xff
 80074bc:	f7fe fe5d 	bl	800617a <lwip_htonl>
 80074c0:	6568      	str	r0, [r5, #84]	; 0x54
        ((u32_t)(netif->hwaddr[3]) << 16) |
 80074c2:	f895 30db 	ldrb.w	r3, [r5, #219]	; 0xdb
        ((u32_t)(netif->hwaddr[4]) << 8) |
 80074c6:	f895 00dc 	ldrb.w	r0, [r5, #220]	; 0xdc
 80074ca:	0200      	lsls	r0, r0, #8
        ((u32_t)(netif->hwaddr[3]) << 16) |
 80074cc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
        (netif->hwaddr[5]));
 80074d0:	f895 30dd 	ldrb.w	r3, [r5, #221]	; 0xdd
        ((u32_t)(netif->hwaddr[4]) << 8) |
 80074d4:	4318      	orrs	r0, r3
    ip_2_ip6(&netif->ip6_addr[0])->addr[3] = lwip_htonl((u32_t)(0xfeul << 24) |
 80074d6:	f040 407e 	orr.w	r0, r0, #4261412864	; 0xfe000000
 80074da:	f7fe fe4e 	bl	800617a <lwip_htonl>
 80074de:	65a8      	str	r0, [r5, #88]	; 0x58
  ip6_addr_assign_zone(ip_2_ip6(&netif->ip6_addr[0]), IP6_UNICAST, netif);
 80074e0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80074e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80074e6:	041b      	lsls	r3, r3, #16
 80074e8:	0c1b      	lsrs	r3, r3, #16
 80074ea:	f248 02fe 	movw	r2, #33022	; 0x80fe
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d027      	beq.n	8007542 <netif_create_ip6_linklocal_address+0xd2>
 80074f2:	2300      	movs	r3, #0
 80074f4:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
  netif_ip6_addr_set_state(netif, 0, IP6_ADDR_TENTATIVE);
 80074f8:	2208      	movs	r2, #8
 80074fa:	2100      	movs	r1, #0
 80074fc:	4628      	mov	r0, r5
 80074fe:	f7ff ff0d 	bl	800731c <netif_ip6_addr_set_state>
}
 8007502:	bd70      	pop	{r4, r5, r6, pc}
        addr_index--;
 8007504:	3e01      	subs	r6, #1
 8007506:	b2f6      	uxtb	r6, r6
      ip_2_ip6(&netif->ip6_addr[0])->addr[addr_index] |= lwip_htonl(((u32_t)(netif->hwaddr[netif->hwaddr_len - i - 1])) << (8 * (i & 0x03)));
 8007508:	1b1b      	subs	r3, r3, r4
 800750a:	3b01      	subs	r3, #1
 800750c:	442b      	add	r3, r5
 800750e:	f893 00d8 	ldrb.w	r0, [r3, #216]	; 0xd8
 8007512:	f004 0303 	and.w	r3, r4, #3
 8007516:	00db      	lsls	r3, r3, #3
 8007518:	4098      	lsls	r0, r3
 800751a:	f7fe fe2e 	bl	800617a <lwip_htonl>
 800751e:	f106 0312 	add.w	r3, r6, #18
 8007522:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	4302      	orrs	r2, r0
 800752a:	605a      	str	r2, [r3, #4]
    for (i = 0; (i < 8) && (i < netif->hwaddr_len); i++) {
 800752c:	3401      	adds	r4, #1
 800752e:	b2e4      	uxtb	r4, r4
 8007530:	2c07      	cmp	r4, #7
 8007532:	d8d5      	bhi.n	80074e0 <netif_create_ip6_linklocal_address+0x70>
 8007534:	f895 30de 	ldrb.w	r3, [r5, #222]	; 0xde
 8007538:	42a3      	cmp	r3, r4
 800753a:	d9d1      	bls.n	80074e0 <netif_create_ip6_linklocal_address+0x70>
      if (i == 4) {
 800753c:	2c04      	cmp	r4, #4
 800753e:	d1e3      	bne.n	8007508 <netif_create_ip6_linklocal_address+0x98>
 8007540:	e7e0      	b.n	8007504 <netif_create_ip6_linklocal_address+0x94>
  ip6_addr_assign_zone(ip_2_ip6(&netif->ip6_addr[0]), IP6_UNICAST, netif);
 8007542:	f895 30e2 	ldrb.w	r3, [r5, #226]	; 0xe2
 8007546:	3301      	adds	r3, #1
 8007548:	b2db      	uxtb	r3, r3
 800754a:	e7d3      	b.n	80074f4 <netif_create_ip6_linklocal_address+0x84>
 800754c:	0801588c 	.word	0x0801588c
 8007550:	08015a18 	.word	0x08015a18
 8007554:	08015418 	.word	0x08015418

08007558 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007558:	4602      	mov	r2, r0
 800755a:	b158      	cbz	r0, 8007574 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 800755c:	4b06      	ldr	r3, [pc, #24]	; (8007578 <netif_get_by_index+0x20>)
 800755e:	6818      	ldr	r0, [r3, #0]
 8007560:	b138      	cbz	r0, 8007572 <netif_get_by_index+0x1a>
      if (idx == netif_get_index(netif)) {
 8007562:	f890 30e2 	ldrb.w	r3, [r0, #226]	; 0xe2
 8007566:	3301      	adds	r3, #1
 8007568:	b2db      	uxtb	r3, r3
 800756a:	4293      	cmp	r3, r2
 800756c:	d003      	beq.n	8007576 <netif_get_by_index+0x1e>
    NETIF_FOREACH(netif) {
 800756e:	6800      	ldr	r0, [r0, #0]
 8007570:	e7f6      	b.n	8007560 <netif_get_by_index+0x8>
 8007572:	4770      	bx	lr
        return netif; /* found! */
      }
    }
  }

  return NULL;
 8007574:	2000      	movs	r0, #0
}
 8007576:	4770      	bx	lr
 8007578:	20007b10 	.word	0x20007b10

0800757c <pbuf_pool_is_empty>:
/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800757c:	4b01      	ldr	r3, [pc, #4]	; (8007584 <pbuf_pool_is_empty+0x8>)
 800757e:	2201      	movs	r2, #1
 8007580:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007582:	4770      	bx	lr
 8007584:	20007b18 	.word	0x20007b18

08007588 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007588:	b410      	push	{r4}
  p->next = NULL;
 800758a:	2400      	movs	r4, #0
 800758c:	6004      	str	r4, [r0, #0]
  p->payload = payload;
 800758e:	6041      	str	r1, [r0, #4]
  p->tot_len = tot_len;
 8007590:	8102      	strh	r2, [r0, #8]
  p->len = len;
 8007592:	8143      	strh	r3, [r0, #10]
  p->type_internal = (u8_t)type;
 8007594:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007598:	7303      	strb	r3, [r0, #12]
  p->flags = flags;
 800759a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800759e:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 80075a0:	2301      	movs	r3, #1
 80075a2:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 80075a4:	73c4      	strb	r4, [r0, #15]
}
 80075a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <pbuf_skip_const>:
{
  u16_t offset_left = in_offset;
  const struct pbuf *q = in;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80075ac:	b130      	cbz	r0, 80075bc <pbuf_skip_const+0x10>
 80075ae:	8943      	ldrh	r3, [r0, #10]
 80075b0:	428b      	cmp	r3, r1
 80075b2:	d803      	bhi.n	80075bc <pbuf_skip_const+0x10>
    offset_left = (u16_t)(offset_left - q->len);
 80075b4:	1ac9      	subs	r1, r1, r3
 80075b6:	b289      	uxth	r1, r1
    q = q->next;
 80075b8:	6800      	ldr	r0, [r0, #0]
 80075ba:	e7f7      	b.n	80075ac <pbuf_skip_const>
  }
  if (out_offset != NULL) {
 80075bc:	b102      	cbz	r2, 80075c0 <pbuf_skip_const+0x14>
    *out_offset = offset_left;
 80075be:	8011      	strh	r1, [r2, #0]
  }
  return q;
}
 80075c0:	4770      	bx	lr
	...

080075c4 <pbuf_add_header_impl>:
{
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	460c      	mov	r4, r1
 80075c8:	4616      	mov	r6, r2
  LWIP_ASSERT("p != NULL", p != NULL);
 80075ca:	4605      	mov	r5, r0
 80075cc:	b1c0      	cbz	r0, 8007600 <pbuf_add_header_impl+0x3c>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80075ce:	b33d      	cbz	r5, 8007620 <pbuf_add_header_impl+0x5c>
 80075d0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80075d4:	d226      	bcs.n	8007624 <pbuf_add_header_impl+0x60>
  if (header_size_increment == 0) {
 80075d6:	b33c      	cbz	r4, 8007628 <pbuf_add_header_impl+0x64>
  increment_magnitude = (u16_t)header_size_increment;
 80075d8:	b2a2      	uxth	r2, r4
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80075da:	892b      	ldrh	r3, [r5, #8]
 80075dc:	4413      	add	r3, r2
 80075de:	b29b      	uxth	r3, r3
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d323      	bcc.n	800762c <pbuf_add_header_impl+0x68>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80075e4:	f995 100c 	ldrsb.w	r1, [r5, #12]
 80075e8:	2900      	cmp	r1, #0
 80075ea:	db11      	blt.n	8007610 <pbuf_add_header_impl+0x4c>
    if (force) {
 80075ec:	b306      	cbz	r6, 8007630 <pbuf_add_header_impl+0x6c>
      payload = (u8_t *)p->payload - header_size_increment;
 80075ee:	6869      	ldr	r1, [r5, #4]
 80075f0:	1b0c      	subs	r4, r1, r4
  p->payload = payload;
 80075f2:	606c      	str	r4, [r5, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80075f4:	8969      	ldrh	r1, [r5, #10]
 80075f6:	440a      	add	r2, r1
 80075f8:	816a      	strh	r2, [r5, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80075fa:	812b      	strh	r3, [r5, #8]
  return 0;
 80075fc:	2000      	movs	r0, #0
 80075fe:	e012      	b.n	8007626 <pbuf_add_header_impl+0x62>
  LWIP_ASSERT("p != NULL", p != NULL);
 8007600:	4b0c      	ldr	r3, [pc, #48]	; (8007634 <pbuf_add_header_impl+0x70>)
 8007602:	f240 12df 	movw	r2, #479	; 0x1df
 8007606:	490c      	ldr	r1, [pc, #48]	; (8007638 <pbuf_add_header_impl+0x74>)
 8007608:	480c      	ldr	r0, [pc, #48]	; (800763c <pbuf_add_header_impl+0x78>)
 800760a:	f00c fe13 	bl	8014234 <iprintf>
 800760e:	e7de      	b.n	80075ce <pbuf_add_header_impl+0xa>
    payload = (u8_t *)p->payload - header_size_increment;
 8007610:	6869      	ldr	r1, [r5, #4]
 8007612:	1b0c      	subs	r4, r1, r4
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007614:	f105 0110 	add.w	r1, r5, #16
 8007618:	42a1      	cmp	r1, r4
 800761a:	d9ea      	bls.n	80075f2 <pbuf_add_header_impl+0x2e>
      return 1;
 800761c:	2001      	movs	r0, #1
 800761e:	e002      	b.n	8007626 <pbuf_add_header_impl+0x62>
    return 1;
 8007620:	2001      	movs	r0, #1
 8007622:	e000      	b.n	8007626 <pbuf_add_header_impl+0x62>
 8007624:	2001      	movs	r0, #1
}
 8007626:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8007628:	2000      	movs	r0, #0
 800762a:	e7fc      	b.n	8007626 <pbuf_add_header_impl+0x62>
    return 1;
 800762c:	2001      	movs	r0, #1
 800762e:	e7fa      	b.n	8007626 <pbuf_add_header_impl+0x62>
      return 1;
 8007630:	2001      	movs	r0, #1
 8007632:	e7f8      	b.n	8007626 <pbuf_add_header_impl+0x62>
 8007634:	08015a4c 	.word	0x08015a4c
 8007638:	080172a8 	.word	0x080172a8
 800763c:	08015418 	.word	0x08015418

08007640 <pbuf_free_ooseq>:
{
 8007640:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007642:	4b07      	ldr	r3, [pc, #28]	; (8007660 <pbuf_free_ooseq+0x20>)
 8007644:	2200      	movs	r2, #0
 8007646:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007648:	4b06      	ldr	r3, [pc, #24]	; (8007664 <pbuf_free_ooseq+0x24>)
 800764a:	6818      	ldr	r0, [r3, #0]
 800764c:	b130      	cbz	r0, 800765c <pbuf_free_ooseq+0x1c>
    if (pcb->ooseq != NULL) {
 800764e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8007652:	b90b      	cbnz	r3, 8007658 <pbuf_free_ooseq+0x18>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007654:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007656:	e7f9      	b.n	800764c <pbuf_free_ooseq+0xc>
      tcp_free_ooseq(pcb);
 8007658:	f000 fe22 	bl	80082a0 <tcp_free_ooseq>
}
 800765c:	bd08      	pop	{r3, pc}
 800765e:	bf00      	nop
 8007660:	20007b18 	.word	0x20007b18
 8007664:	20007b20 	.word	0x20007b20

08007668 <pbuf_alloc_reference>:
{
 8007668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800766a:	b083      	sub	sp, #12
 800766c:	4606      	mov	r6, r0
 800766e:	460d      	mov	r5, r1
 8007670:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007672:	2a41      	cmp	r2, #65	; 0x41
 8007674:	d001      	beq.n	800767a <pbuf_alloc_reference+0x12>
 8007676:	2a01      	cmp	r2, #1
 8007678:	d10f      	bne.n	800769a <pbuf_alloc_reference+0x32>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800767a:	200b      	movs	r0, #11
 800767c:	f7ff fbcc 	bl	8006e18 <memp_malloc>
  if (p == NULL) {
 8007680:	4607      	mov	r7, r0
 8007682:	b138      	cbz	r0, 8007694 <pbuf_alloc_reference+0x2c>
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007684:	2300      	movs	r3, #0
 8007686:	9301      	str	r3, [sp, #4]
 8007688:	9400      	str	r4, [sp, #0]
 800768a:	462b      	mov	r3, r5
 800768c:	462a      	mov	r2, r5
 800768e:	4631      	mov	r1, r6
 8007690:	f7ff ff7a 	bl	8007588 <pbuf_init_alloced_pbuf>
}
 8007694:	4638      	mov	r0, r7
 8007696:	b003      	add	sp, #12
 8007698:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800769a:	4b04      	ldr	r3, [pc, #16]	; (80076ac <pbuf_alloc_reference+0x44>)
 800769c:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80076a0:	4903      	ldr	r1, [pc, #12]	; (80076b0 <pbuf_alloc_reference+0x48>)
 80076a2:	4804      	ldr	r0, [pc, #16]	; (80076b4 <pbuf_alloc_reference+0x4c>)
 80076a4:	f00c fdc6 	bl	8014234 <iprintf>
 80076a8:	e7e7      	b.n	800767a <pbuf_alloc_reference+0x12>
 80076aa:	bf00      	nop
 80076ac:	08015a4c 	.word	0x08015a4c
 80076b0:	08015a7c 	.word	0x08015a7c
 80076b4:	08015418 	.word	0x08015418

080076b8 <pbuf_alloced_custom>:
{
 80076b8:	b570      	push	{r4, r5, r6, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	460d      	mov	r5, r1
 80076be:	461e      	mov	r6, r3
 80076c0:	9906      	ldr	r1, [sp, #24]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80076c2:	1cc4      	adds	r4, r0, #3
 80076c4:	f024 0403 	bic.w	r4, r4, #3
 80076c8:	1928      	adds	r0, r5, r4
 80076ca:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80076ce:	4298      	cmp	r0, r3
 80076d0:	d80d      	bhi.n	80076ee <pbuf_alloced_custom+0x36>
  if (payload_mem != NULL) {
 80076d2:	b101      	cbz	r1, 80076d6 <pbuf_alloced_custom+0x1e>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80076d4:	4421      	add	r1, r4
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80076d6:	4634      	mov	r4, r6
 80076d8:	2302      	movs	r3, #2
 80076da:	9301      	str	r3, [sp, #4]
 80076dc:	9200      	str	r2, [sp, #0]
 80076de:	462b      	mov	r3, r5
 80076e0:	462a      	mov	r2, r5
 80076e2:	4630      	mov	r0, r6
 80076e4:	f7ff ff50 	bl	8007588 <pbuf_init_alloced_pbuf>
}
 80076e8:	4620      	mov	r0, r4
 80076ea:	b002      	add	sp, #8
 80076ec:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 80076ee:	2400      	movs	r4, #0
 80076f0:	e7fa      	b.n	80076e8 <pbuf_alloced_custom+0x30>

080076f2 <pbuf_add_header>:
{
 80076f2:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80076f4:	2200      	movs	r2, #0
 80076f6:	f7ff ff65 	bl	80075c4 <pbuf_add_header_impl>
}
 80076fa:	bd08      	pop	{r3, pc}

080076fc <pbuf_add_header_force>:
{
 80076fc:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 1);
 80076fe:	2201      	movs	r2, #1
 8007700:	f7ff ff60 	bl	80075c4 <pbuf_add_header_impl>
}
 8007704:	bd08      	pop	{r3, pc}
	...

08007708 <pbuf_remove_header>:
{
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	460c      	mov	r4, r1
  LWIP_ASSERT("p != NULL", p != NULL);
 800770c:	4605      	mov	r5, r0
 800770e:	b190      	cbz	r0, 8007736 <pbuf_remove_header+0x2e>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007710:	b315      	cbz	r5, 8007758 <pbuf_remove_header+0x50>
 8007712:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8007716:	d221      	bcs.n	800775c <pbuf_remove_header+0x54>
  if (header_size_decrement == 0) {
 8007718:	b314      	cbz	r4, 8007760 <pbuf_remove_header+0x58>
  increment_magnitude = (u16_t)header_size_decrement;
 800771a:	b2a2      	uxth	r2, r4
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800771c:	896b      	ldrh	r3, [r5, #10]
 800771e:	4293      	cmp	r3, r2
 8007720:	d311      	bcc.n	8007746 <pbuf_remove_header+0x3e>
  payload = p->payload;
 8007722:	6869      	ldr	r1, [r5, #4]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007724:	4421      	add	r1, r4
 8007726:	6069      	str	r1, [r5, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 8007728:	1a9b      	subs	r3, r3, r2
 800772a:	816b      	strh	r3, [r5, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800772c:	892b      	ldrh	r3, [r5, #8]
 800772e:	1a9a      	subs	r2, r3, r2
 8007730:	812a      	strh	r2, [r5, #8]
  return 0;
 8007732:	2000      	movs	r0, #0
}
 8007734:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007736:	4b0b      	ldr	r3, [pc, #44]	; (8007764 <pbuf_remove_header+0x5c>)
 8007738:	f240 224b 	movw	r2, #587	; 0x24b
 800773c:	490a      	ldr	r1, [pc, #40]	; (8007768 <pbuf_remove_header+0x60>)
 800773e:	480b      	ldr	r0, [pc, #44]	; (800776c <pbuf_remove_header+0x64>)
 8007740:	f00c fd78 	bl	8014234 <iprintf>
 8007744:	e7e4      	b.n	8007710 <pbuf_remove_header+0x8>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007746:	4b07      	ldr	r3, [pc, #28]	; (8007764 <pbuf_remove_header+0x5c>)
 8007748:	f240 2255 	movw	r2, #597	; 0x255
 800774c:	4908      	ldr	r1, [pc, #32]	; (8007770 <pbuf_remove_header+0x68>)
 800774e:	4807      	ldr	r0, [pc, #28]	; (800776c <pbuf_remove_header+0x64>)
 8007750:	f00c fd70 	bl	8014234 <iprintf>
 8007754:	2001      	movs	r0, #1
 8007756:	e7ed      	b.n	8007734 <pbuf_remove_header+0x2c>
    return 1;
 8007758:	2001      	movs	r0, #1
 800775a:	e7eb      	b.n	8007734 <pbuf_remove_header+0x2c>
 800775c:	2001      	movs	r0, #1
 800775e:	e7e9      	b.n	8007734 <pbuf_remove_header+0x2c>
    return 0;
 8007760:	2000      	movs	r0, #0
 8007762:	e7e7      	b.n	8007734 <pbuf_remove_header+0x2c>
 8007764:	08015a4c 	.word	0x08015a4c
 8007768:	080172a8 	.word	0x080172a8
 800776c:	08015418 	.word	0x08015418
 8007770:	08015a90 	.word	0x08015a90

08007774 <pbuf_header_impl>:
{
 8007774:	b508      	push	{r3, lr}
  if (header_size_increment < 0) {
 8007776:	2900      	cmp	r1, #0
 8007778:	db02      	blt.n	8007780 <pbuf_header_impl+0xc>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800777a:	f7ff ff23 	bl	80075c4 <pbuf_add_header_impl>
}
 800777e:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007780:	4249      	negs	r1, r1
 8007782:	f7ff ffc1 	bl	8007708 <pbuf_remove_header>
 8007786:	e7fa      	b.n	800777e <pbuf_header_impl+0xa>

08007788 <pbuf_header_force>:
{
 8007788:	b508      	push	{r3, lr}
  return pbuf_header_impl(p, header_size_increment, 1);
 800778a:	2201      	movs	r2, #1
 800778c:	f7ff fff2 	bl	8007774 <pbuf_header_impl>
}
 8007790:	bd08      	pop	{r3, pc}
	...

08007794 <pbuf_free>:
{
 8007794:	b570      	push	{r4, r5, r6, lr}
  if (p == NULL) {
 8007796:	b110      	cbz	r0, 800779e <pbuf_free+0xa>
 8007798:	4604      	mov	r4, r0
  count = 0;
 800779a:	2500      	movs	r5, #0
 800779c:	e017      	b.n	80077ce <pbuf_free+0x3a>
    LWIP_ASSERT("p != NULL", p != NULL);
 800779e:	4b28      	ldr	r3, [pc, #160]	; (8007840 <pbuf_free+0xac>)
 80077a0:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80077a4:	4927      	ldr	r1, [pc, #156]	; (8007844 <pbuf_free+0xb0>)
 80077a6:	4828      	ldr	r0, [pc, #160]	; (8007848 <pbuf_free+0xb4>)
 80077a8:	f00c fd44 	bl	8014234 <iprintf>
    return 0;
 80077ac:	2500      	movs	r5, #0
}
 80077ae:	4628      	mov	r0, r5
 80077b0:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80077b2:	4b23      	ldr	r3, [pc, #140]	; (8007840 <pbuf_free+0xac>)
 80077b4:	f240 22f1 	movw	r2, #753	; 0x2f1
 80077b8:	4924      	ldr	r1, [pc, #144]	; (800784c <pbuf_free+0xb8>)
 80077ba:	4823      	ldr	r0, [pc, #140]	; (8007848 <pbuf_free+0xb4>)
 80077bc:	f00c fd3a 	bl	8014234 <iprintf>
 80077c0:	e00a      	b.n	80077d8 <pbuf_free+0x44>
        pc->custom_free_function(p);
 80077c2:	6923      	ldr	r3, [r4, #16]
 80077c4:	4620      	mov	r0, r4
 80077c6:	4798      	blx	r3
      count++;
 80077c8:	3501      	adds	r5, #1
 80077ca:	b2ed      	uxtb	r5, r5
      p = q;
 80077cc:	4634      	mov	r4, r6
  while (p != NULL) {
 80077ce:	2c00      	cmp	r4, #0
 80077d0:	d0ed      	beq.n	80077ae <pbuf_free+0x1a>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80077d2:	7ba3      	ldrb	r3, [r4, #14]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d0ec      	beq.n	80077b2 <pbuf_free+0x1e>
    ref = --(p->ref);
 80077d8:	7ba3      	ldrb	r3, [r4, #14]
 80077da:	3b01      	subs	r3, #1
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e4      	bne.n	80077ae <pbuf_free+0x1a>
      q = p->next;
 80077e4:	6826      	ldr	r6, [r4, #0]
      alloc_src = pbuf_get_allocsrc(p);
 80077e6:	7b23      	ldrb	r3, [r4, #12]
 80077e8:	f003 030f 	and.w	r3, r3, #15
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80077ec:	7b62      	ldrb	r2, [r4, #13]
 80077ee:	f012 0f02 	tst.w	r2, #2
 80077f2:	d00a      	beq.n	800780a <pbuf_free+0x76>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80077f4:	6923      	ldr	r3, [r4, #16]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1e3      	bne.n	80077c2 <pbuf_free+0x2e>
 80077fa:	4b11      	ldr	r3, [pc, #68]	; (8007840 <pbuf_free+0xac>)
 80077fc:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007800:	4913      	ldr	r1, [pc, #76]	; (8007850 <pbuf_free+0xbc>)
 8007802:	4811      	ldr	r0, [pc, #68]	; (8007848 <pbuf_free+0xb4>)
 8007804:	f00c fd16 	bl	8014234 <iprintf>
 8007808:	e7db      	b.n	80077c2 <pbuf_free+0x2e>
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800780a:	2b02      	cmp	r3, #2
 800780c:	d006      	beq.n	800781c <pbuf_free+0x88>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800780e:	2b01      	cmp	r3, #1
 8007810:	d009      	beq.n	8007826 <pbuf_free+0x92>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007812:	b96b      	cbnz	r3, 8007830 <pbuf_free+0x9c>
          mem_free(p);
 8007814:	4620      	mov	r0, r4
 8007816:	f7ff f8db 	bl	80069d0 <mem_free>
 800781a:	e7d5      	b.n	80077c8 <pbuf_free+0x34>
          memp_free(MEMP_PBUF_POOL, p);
 800781c:	4621      	mov	r1, r4
 800781e:	200c      	movs	r0, #12
 8007820:	f7ff fb14 	bl	8006e4c <memp_free>
 8007824:	e7d0      	b.n	80077c8 <pbuf_free+0x34>
          memp_free(MEMP_PBUF, p);
 8007826:	4621      	mov	r1, r4
 8007828:	200b      	movs	r0, #11
 800782a:	f7ff fb0f 	bl	8006e4c <memp_free>
 800782e:	e7cb      	b.n	80077c8 <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 8007830:	4b03      	ldr	r3, [pc, #12]	; (8007840 <pbuf_free+0xac>)
 8007832:	f240 320f 	movw	r2, #783	; 0x30f
 8007836:	4907      	ldr	r1, [pc, #28]	; (8007854 <pbuf_free+0xc0>)
 8007838:	4803      	ldr	r0, [pc, #12]	; (8007848 <pbuf_free+0xb4>)
 800783a:	f00c fcfb 	bl	8014234 <iprintf>
 800783e:	e7c3      	b.n	80077c8 <pbuf_free+0x34>
 8007840:	08015a4c 	.word	0x08015a4c
 8007844:	080172a8 	.word	0x080172a8
 8007848:	08015418 	.word	0x08015418
 800784c:	08015ab0 	.word	0x08015ab0
 8007850:	08015ac8 	.word	0x08015ac8
 8007854:	08015aec 	.word	0x08015aec

08007858 <pbuf_alloc>:
{
 8007858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800785c:	b082      	sub	sp, #8
 800785e:	460e      	mov	r6, r1
 8007860:	4690      	mov	r8, r2
  u16_t offset = (u16_t)layer;
 8007862:	b285      	uxth	r5, r0
  switch (type) {
 8007864:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 8007868:	d046      	beq.n	80078f8 <pbuf_alloc+0xa0>
 800786a:	4607      	mov	r7, r0
 800786c:	d80e      	bhi.n	800788c <pbuf_alloc+0x34>
 800786e:	2a01      	cmp	r2, #1
 8007870:	d002      	beq.n	8007878 <pbuf_alloc+0x20>
 8007872:	2a41      	cmp	r2, #65	; 0x41
 8007874:	f040 8084 	bne.w	8007980 <pbuf_alloc+0x128>
      p = pbuf_alloc_reference(NULL, length, type);
 8007878:	4642      	mov	r2, r8
 800787a:	4631      	mov	r1, r6
 800787c:	2000      	movs	r0, #0
 800787e:	f7ff fef3 	bl	8007668 <pbuf_alloc_reference>
 8007882:	4681      	mov	r9, r0
}
 8007884:	4648      	mov	r0, r9
 8007886:	b002      	add	sp, #8
 8007888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (type) {
 800788c:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8007890:	d176      	bne.n	8007980 <pbuf_alloc+0x128>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007892:	3503      	adds	r5, #3
 8007894:	f025 0503 	bic.w	r5, r5, #3
 8007898:	b2ad      	uxth	r5, r5
 800789a:	1cca      	adds	r2, r1, #3
 800789c:	b293      	uxth	r3, r2
 800789e:	f023 0303 	bic.w	r3, r3, #3
 80078a2:	441d      	add	r5, r3
 80078a4:	b2ad      	uxth	r5, r5
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80078a6:	f105 0010 	add.w	r0, r5, #16
 80078aa:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80078ac:	f022 0203 	bic.w	r2, r2, #3
 80078b0:	4295      	cmp	r5, r2
 80078b2:	d36f      	bcc.n	8007994 <pbuf_alloc+0x13c>
 80078b4:	4282      	cmp	r2, r0
 80078b6:	d870      	bhi.n	800799a <pbuf_alloc+0x142>
      p = (struct pbuf *)mem_malloc(alloc_len);
 80078b8:	f7ff f9a2 	bl	8006c00 <mem_malloc>
      if (p == NULL) {
 80078bc:	4681      	mov	r9, r0
 80078be:	2800      	cmp	r0, #0
 80078c0:	d0e0      	beq.n	8007884 <pbuf_alloc+0x2c>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80078c2:	f107 0110 	add.w	r1, r7, #16
 80078c6:	4401      	add	r1, r0
 80078c8:	3103      	adds	r1, #3
 80078ca:	2300      	movs	r3, #0
 80078cc:	9301      	str	r3, [sp, #4]
 80078ce:	f8cd 8000 	str.w	r8, [sp]
 80078d2:	4633      	mov	r3, r6
 80078d4:	4632      	mov	r2, r6
 80078d6:	f021 0103 	bic.w	r1, r1, #3
 80078da:	f7ff fe55 	bl	8007588 <pbuf_init_alloced_pbuf>
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80078de:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80078e2:	f013 0f03 	tst.w	r3, #3
 80078e6:	d0cd      	beq.n	8007884 <pbuf_alloc+0x2c>
 80078e8:	4b2d      	ldr	r3, [pc, #180]	; (80079a0 <pbuf_alloc+0x148>)
 80078ea:	f44f 7291 	mov.w	r2, #290	; 0x122
 80078ee:	492d      	ldr	r1, [pc, #180]	; (80079a4 <pbuf_alloc+0x14c>)
 80078f0:	482d      	ldr	r0, [pc, #180]	; (80079a8 <pbuf_alloc+0x150>)
 80078f2:	f00c fc9f 	bl	8014234 <iprintf>
 80078f6:	e7c5      	b.n	8007884 <pbuf_alloc+0x2c>
  switch (type) {
 80078f8:	2700      	movs	r7, #0
 80078fa:	46b9      	mov	r9, r7
 80078fc:	e01a      	b.n	8007934 <pbuf_alloc+0xdc>
          PBUF_POOL_IS_EMPTY();
 80078fe:	f7ff fe3d 	bl	800757c <pbuf_pool_is_empty>
          if (p) {
 8007902:	f1b9 0f00 	cmp.w	r9, #0
 8007906:	d002      	beq.n	800790e <pbuf_alloc+0xb6>
            pbuf_free(p);
 8007908:	4648      	mov	r0, r9
 800790a:	f7ff ff43 	bl	8007794 <pbuf_free>
          return NULL;
 800790e:	46b9      	mov	r9, r7
 8007910:	e7b8      	b.n	8007884 <pbuf_alloc+0x2c>
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007912:	4b23      	ldr	r3, [pc, #140]	; (80079a0 <pbuf_alloc+0x148>)
 8007914:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007918:	4924      	ldr	r1, [pc, #144]	; (80079ac <pbuf_alloc+0x154>)
 800791a:	4823      	ldr	r0, [pc, #140]	; (80079a8 <pbuf_alloc+0x150>)
 800791c:	f00c fc8a 	bl	8014234 <iprintf>
        if (p == NULL) {
 8007920:	f1b9 0f00 	cmp.w	r9, #0
 8007924:	d02a      	beq.n	800797c <pbuf_alloc+0x124>
          last->next = q;
 8007926:	f8ca 7000 	str.w	r7, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 800792a:	1b36      	subs	r6, r6, r4
 800792c:	b2b6      	uxth	r6, r6
        offset = 0;
 800792e:	2500      	movs	r5, #0
      } while (rem_len > 0);
 8007930:	2e00      	cmp	r6, #0
 8007932:	d0a7      	beq.n	8007884 <pbuf_alloc+0x2c>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007934:	46ba      	mov	sl, r7
 8007936:	200c      	movs	r0, #12
 8007938:	f7ff fa6e 	bl	8006e18 <memp_malloc>
        if (q == NULL) {
 800793c:	4607      	mov	r7, r0
 800793e:	2800      	cmp	r0, #0
 8007940:	d0dd      	beq.n	80078fe <pbuf_alloc+0xa6>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007942:	1cec      	adds	r4, r5, #3
 8007944:	f024 0403 	bic.w	r4, r4, #3
 8007948:	b2a4      	uxth	r4, r4
 800794a:	f5c4 7414 	rsb	r4, r4, #592	; 0x250
 800794e:	b2a4      	uxth	r4, r4
 8007950:	42b4      	cmp	r4, r6
 8007952:	bf28      	it	cs
 8007954:	4634      	movcs	r4, r6
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007956:	f105 0110 	add.w	r1, r5, #16
 800795a:	4401      	add	r1, r0
 800795c:	3103      	adds	r1, #3
 800795e:	2300      	movs	r3, #0
 8007960:	9301      	str	r3, [sp, #4]
 8007962:	f8cd 8000 	str.w	r8, [sp]
 8007966:	4623      	mov	r3, r4
 8007968:	4632      	mov	r2, r6
 800796a:	f021 0103 	bic.w	r1, r1, #3
 800796e:	f7ff fe0b 	bl	8007588 <pbuf_init_alloced_pbuf>
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f013 0f03 	tst.w	r3, #3
 8007978:	d0d2      	beq.n	8007920 <pbuf_alloc+0xc8>
 800797a:	e7ca      	b.n	8007912 <pbuf_alloc+0xba>
          p = q;
 800797c:	46b9      	mov	r9, r7
 800797e:	e7d4      	b.n	800792a <pbuf_alloc+0xd2>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007980:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <pbuf_alloc+0x148>)
 8007982:	f240 1227 	movw	r2, #295	; 0x127
 8007986:	490a      	ldr	r1, [pc, #40]	; (80079b0 <pbuf_alloc+0x158>)
 8007988:	4807      	ldr	r0, [pc, #28]	; (80079a8 <pbuf_alloc+0x150>)
 800798a:	f00c fc53 	bl	8014234 <iprintf>
      return NULL;
 800798e:	f04f 0900 	mov.w	r9, #0
 8007992:	e777      	b.n	8007884 <pbuf_alloc+0x2c>
        return NULL;
 8007994:	f04f 0900 	mov.w	r9, #0
 8007998:	e774      	b.n	8007884 <pbuf_alloc+0x2c>
 800799a:	f04f 0900 	mov.w	r9, #0
 800799e:	e771      	b.n	8007884 <pbuf_alloc+0x2c>
 80079a0:	08015a4c 	.word	0x08015a4c
 80079a4:	08015b64 	.word	0x08015b64
 80079a8:	08015418 	.word	0x08015418
 80079ac:	08015b00 	.word	0x08015b00
 80079b0:	08015b90 	.word	0x08015b90

080079b4 <pbuf_realloc>:
{
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80079b8:	4604      	mov	r4, r0
 80079ba:	b1b8      	cbz	r0, 80079ec <pbuf_realloc+0x38>
  if (new_len >= p->tot_len) {
 80079bc:	8927      	ldrh	r7, [r4, #8]
 80079be:	42b7      	cmp	r7, r6
 80079c0:	d92e      	bls.n	8007a20 <pbuf_realloc+0x6c>
  rem_len = new_len;
 80079c2:	4635      	mov	r5, r6
  while (rem_len > q->len) {
 80079c4:	8963      	ldrh	r3, [r4, #10]
 80079c6:	42ab      	cmp	r3, r5
 80079c8:	d218      	bcs.n	80079fc <pbuf_realloc+0x48>
    rem_len = (u16_t)(rem_len - q->len);
 80079ca:	1aeb      	subs	r3, r5, r3
 80079cc:	b29d      	uxth	r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80079ce:	8923      	ldrh	r3, [r4, #8]
 80079d0:	1bf2      	subs	r2, r6, r7
 80079d2:	4413      	add	r3, r2
 80079d4:	8123      	strh	r3, [r4, #8]
    q = q->next;
 80079d6:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80079d8:	2c00      	cmp	r4, #0
 80079da:	d1f3      	bne.n	80079c4 <pbuf_realloc+0x10>
 80079dc:	4b1a      	ldr	r3, [pc, #104]	; (8007a48 <pbuf_realloc+0x94>)
 80079de:	f240 12af 	movw	r2, #431	; 0x1af
 80079e2:	491a      	ldr	r1, [pc, #104]	; (8007a4c <pbuf_realloc+0x98>)
 80079e4:	481a      	ldr	r0, [pc, #104]	; (8007a50 <pbuf_realloc+0x9c>)
 80079e6:	f00c fc25 	bl	8014234 <iprintf>
 80079ea:	e7eb      	b.n	80079c4 <pbuf_realloc+0x10>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80079ec:	4b16      	ldr	r3, [pc, #88]	; (8007a48 <pbuf_realloc+0x94>)
 80079ee:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80079f2:	4918      	ldr	r1, [pc, #96]	; (8007a54 <pbuf_realloc+0xa0>)
 80079f4:	4816      	ldr	r0, [pc, #88]	; (8007a50 <pbuf_realloc+0x9c>)
 80079f6:	f00c fc1d 	bl	8014234 <iprintf>
 80079fa:	e7df      	b.n	80079bc <pbuf_realloc+0x8>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80079fc:	7b22      	ldrb	r2, [r4, #12]
 80079fe:	f012 0f0f 	tst.w	r2, #15
 8007a02:	d105      	bne.n	8007a10 <pbuf_realloc+0x5c>
 8007a04:	42ab      	cmp	r3, r5
 8007a06:	d003      	beq.n	8007a10 <pbuf_realloc+0x5c>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007a08:	7b63      	ldrb	r3, [r4, #13]
 8007a0a:	f013 0f02 	tst.w	r3, #2
 8007a0e:	d008      	beq.n	8007a22 <pbuf_realloc+0x6e>
  q->len = rem_len;
 8007a10:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8007a12:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8007a14:	6820      	ldr	r0, [r4, #0]
 8007a16:	b108      	cbz	r0, 8007a1c <pbuf_realloc+0x68>
    pbuf_free(q->next);
 8007a18:	f7ff febc 	bl	8007794 <pbuf_free>
  q->next = NULL;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	6023      	str	r3, [r4, #0]
}
 8007a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007a22:	6863      	ldr	r3, [r4, #4]
 8007a24:	1b1b      	subs	r3, r3, r4
 8007a26:	18e9      	adds	r1, r5, r3
 8007a28:	b289      	uxth	r1, r1
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f7ff f82a 	bl	8006a84 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007a30:	4604      	mov	r4, r0
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d1ec      	bne.n	8007a10 <pbuf_realloc+0x5c>
 8007a36:	4b04      	ldr	r3, [pc, #16]	; (8007a48 <pbuf_realloc+0x94>)
 8007a38:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007a3c:	4906      	ldr	r1, [pc, #24]	; (8007a58 <pbuf_realloc+0xa4>)
 8007a3e:	4804      	ldr	r0, [pc, #16]	; (8007a50 <pbuf_realloc+0x9c>)
 8007a40:	f00c fbf8 	bl	8014234 <iprintf>
 8007a44:	e7e4      	b.n	8007a10 <pbuf_realloc+0x5c>
 8007a46:	bf00      	nop
 8007a48:	08015a4c 	.word	0x08015a4c
 8007a4c:	08015bc4 	.word	0x08015bc4
 8007a50:	08015418 	.word	0x08015418
 8007a54:	08015bac 	.word	0x08015bac
 8007a58:	08015bdc 	.word	0x08015bdc

08007a5c <pbuf_clen>:
{
 8007a5c:	4603      	mov	r3, r0
  len = 0;
 8007a5e:	2000      	movs	r0, #0
  while (p != NULL) {
 8007a60:	b11b      	cbz	r3, 8007a6a <pbuf_clen+0xe>
    ++len;
 8007a62:	3001      	adds	r0, #1
 8007a64:	b280      	uxth	r0, r0
    p = p->next;
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	e7fa      	b.n	8007a60 <pbuf_clen+0x4>
}
 8007a6a:	4770      	bx	lr

08007a6c <pbuf_ref>:
  if (p != NULL) {
 8007a6c:	b170      	cbz	r0, 8007a8c <pbuf_ref+0x20>
{
 8007a6e:	b508      	push	{r3, lr}
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007a70:	7b83      	ldrb	r3, [r0, #14]
 8007a72:	3301      	adds	r3, #1
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007a78:	b103      	cbz	r3, 8007a7c <pbuf_ref+0x10>
}
 8007a7a:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007a7c:	4b04      	ldr	r3, [pc, #16]	; (8007a90 <pbuf_ref+0x24>)
 8007a7e:	f240 3242 	movw	r2, #834	; 0x342
 8007a82:	4904      	ldr	r1, [pc, #16]	; (8007a94 <pbuf_ref+0x28>)
 8007a84:	4804      	ldr	r0, [pc, #16]	; (8007a98 <pbuf_ref+0x2c>)
 8007a86:	f00c fbd5 	bl	8014234 <iprintf>
}
 8007a8a:	e7f6      	b.n	8007a7a <pbuf_ref+0xe>
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	08015a4c 	.word	0x08015a4c
 8007a94:	08015bf8 	.word	0x08015bf8
 8007a98:	08015418 	.word	0x08015418

08007a9c <pbuf_cat>:
{
 8007a9c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007a9e:	b110      	cbz	r0, 8007aa6 <pbuf_cat+0xa>
 8007aa0:	460d      	mov	r5, r1
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	b961      	cbnz	r1, 8007ac0 <pbuf_cat+0x24>
 8007aa6:	4b15      	ldr	r3, [pc, #84]	; (8007afc <pbuf_cat+0x60>)
 8007aa8:	f240 3259 	movw	r2, #857	; 0x359
 8007aac:	4914      	ldr	r1, [pc, #80]	; (8007b00 <pbuf_cat+0x64>)
 8007aae:	4815      	ldr	r0, [pc, #84]	; (8007b04 <pbuf_cat+0x68>)
 8007ab0:	f00c fbc0 	bl	8014234 <iprintf>
 8007ab4:	e019      	b.n	8007aea <pbuf_cat+0x4e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007ab6:	8923      	ldrh	r3, [r4, #8]
 8007ab8:	8928      	ldrh	r0, [r5, #8]
 8007aba:	4403      	add	r3, r0
 8007abc:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007abe:	4614      	mov	r4, r2
 8007ac0:	6822      	ldr	r2, [r4, #0]
 8007ac2:	2a00      	cmp	r2, #0
 8007ac4:	d1f7      	bne.n	8007ab6 <pbuf_cat+0x1a>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007ac6:	8922      	ldrh	r2, [r4, #8]
 8007ac8:	8963      	ldrh	r3, [r4, #10]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d10e      	bne.n	8007aec <pbuf_cat+0x50>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007ace:	6823      	ldr	r3, [r4, #0]
 8007ad0:	b133      	cbz	r3, 8007ae0 <pbuf_cat+0x44>
 8007ad2:	4b0a      	ldr	r3, [pc, #40]	; (8007afc <pbuf_cat+0x60>)
 8007ad4:	f240 3263 	movw	r2, #867	; 0x363
 8007ad8:	490b      	ldr	r1, [pc, #44]	; (8007b08 <pbuf_cat+0x6c>)
 8007ada:	480a      	ldr	r0, [pc, #40]	; (8007b04 <pbuf_cat+0x68>)
 8007adc:	f00c fbaa 	bl	8014234 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007ae0:	8923      	ldrh	r3, [r4, #8]
 8007ae2:	892a      	ldrh	r2, [r5, #8]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	8123      	strh	r3, [r4, #8]
  p->next = t;
 8007ae8:	6025      	str	r5, [r4, #0]
}
 8007aea:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007aec:	4b03      	ldr	r3, [pc, #12]	; (8007afc <pbuf_cat+0x60>)
 8007aee:	f240 3262 	movw	r2, #866	; 0x362
 8007af2:	4906      	ldr	r1, [pc, #24]	; (8007b0c <pbuf_cat+0x70>)
 8007af4:	4803      	ldr	r0, [pc, #12]	; (8007b04 <pbuf_cat+0x68>)
 8007af6:	f00c fb9d 	bl	8014234 <iprintf>
 8007afa:	e7e8      	b.n	8007ace <pbuf_cat+0x32>
 8007afc:	08015a4c 	.word	0x08015a4c
 8007b00:	08015c0c 	.word	0x08015c0c
 8007b04:	08015418 	.word	0x08015418
 8007b08:	08015c74 	.word	0x08015c74
 8007b0c:	08015c44 	.word	0x08015c44

08007b10 <pbuf_chain>:
{
 8007b10:	b510      	push	{r4, lr}
 8007b12:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8007b14:	f7ff ffc2 	bl	8007a9c <pbuf_cat>
  pbuf_ref(t);
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f7ff ffa7 	bl	8007a6c <pbuf_ref>
}
 8007b1e:	bd10      	pop	{r4, pc}

08007b20 <pbuf_copy>:
{
 8007b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007b24:	b148      	cbz	r0, 8007b3a <pbuf_copy+0x1a>
 8007b26:	460c      	mov	r4, r1
 8007b28:	4605      	mov	r5, r0
 8007b2a:	b131      	cbz	r1, 8007b3a <pbuf_copy+0x1a>
 8007b2c:	8902      	ldrh	r2, [r0, #8]
 8007b2e:	890b      	ldrh	r3, [r1, #8]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d302      	bcc.n	8007b3a <pbuf_copy+0x1a>
  size_t offset_to = 0, offset_from = 0, len;
 8007b34:	2700      	movs	r7, #0
 8007b36:	46b8      	mov	r8, r7
 8007b38:	e03a      	b.n	8007bb0 <pbuf_copy+0x90>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007b3a:	4b3a      	ldr	r3, [pc, #232]	; (8007c24 <pbuf_copy+0x104>)
 8007b3c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007b40:	4939      	ldr	r1, [pc, #228]	; (8007c28 <pbuf_copy+0x108>)
 8007b42:	483a      	ldr	r0, [pc, #232]	; (8007c2c <pbuf_copy+0x10c>)
 8007b44:	f00c fb76 	bl	8014234 <iprintf>
 8007b48:	f06f 000f 	mvn.w	r0, #15
 8007b4c:	e068      	b.n	8007c20 <pbuf_copy+0x100>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007b4e:	4b35      	ldr	r3, [pc, #212]	; (8007c24 <pbuf_copy+0x104>)
 8007b50:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007b54:	4936      	ldr	r1, [pc, #216]	; (8007c30 <pbuf_copy+0x110>)
 8007b56:	4835      	ldr	r0, [pc, #212]	; (8007c2c <pbuf_copy+0x10c>)
 8007b58:	f00c fb6c 	bl	8014234 <iprintf>
 8007b5c:	e03c      	b.n	8007bd8 <pbuf_copy+0xb8>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007b5e:	4b31      	ldr	r3, [pc, #196]	; (8007c24 <pbuf_copy+0x104>)
 8007b60:	f240 32da 	movw	r2, #986	; 0x3da
 8007b64:	4933      	ldr	r1, [pc, #204]	; (8007c34 <pbuf_copy+0x114>)
 8007b66:	4831      	ldr	r0, [pc, #196]	; (8007c2c <pbuf_copy+0x10c>)
 8007b68:	f00c fb64 	bl	8014234 <iprintf>
 8007b6c:	e037      	b.n	8007bde <pbuf_copy+0xbe>
      p_to = p_to->next;
 8007b6e:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007b70:	b115      	cbz	r5, 8007b78 <pbuf_copy+0x58>
      offset_to = 0;
 8007b72:	f04f 0800 	mov.w	r8, #0
 8007b76:	e03a      	b.n	8007bee <pbuf_copy+0xce>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007b78:	b914      	cbnz	r4, 8007b80 <pbuf_copy+0x60>
      offset_to = 0;
 8007b7a:	f04f 0800 	mov.w	r8, #0
 8007b7e:	e036      	b.n	8007bee <pbuf_copy+0xce>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007b80:	4b28      	ldr	r3, [pc, #160]	; (8007c24 <pbuf_copy+0x104>)
 8007b82:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007b86:	492c      	ldr	r1, [pc, #176]	; (8007c38 <pbuf_copy+0x118>)
 8007b88:	4828      	ldr	r0, [pc, #160]	; (8007c2c <pbuf_copy+0x10c>)
 8007b8a:	f00c fb53 	bl	8014234 <iprintf>
 8007b8e:	f06f 000f 	mvn.w	r0, #15
 8007b92:	e045      	b.n	8007c20 <pbuf_copy+0x100>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	b37b      	cbz	r3, 8007bf8 <pbuf_copy+0xd8>
 8007b98:	4b22      	ldr	r3, [pc, #136]	; (8007c24 <pbuf_copy+0x104>)
 8007b9a:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007b9e:	4927      	ldr	r1, [pc, #156]	; (8007c3c <pbuf_copy+0x11c>)
 8007ba0:	4822      	ldr	r0, [pc, #136]	; (8007c2c <pbuf_copy+0x10c>)
 8007ba2:	f00c fb47 	bl	8014234 <iprintf>
 8007ba6:	f06f 0005 	mvn.w	r0, #5
 8007baa:	e039      	b.n	8007c20 <pbuf_copy+0x100>
  } while (p_from);
 8007bac:	2c00      	cmp	r4, #0
 8007bae:	d036      	beq.n	8007c1e <pbuf_copy+0xfe>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007bb0:	896e      	ldrh	r6, [r5, #10]
 8007bb2:	eba6 0608 	sub.w	r6, r6, r8
 8007bb6:	8963      	ldrh	r3, [r4, #10]
 8007bb8:	1bdb      	subs	r3, r3, r7
 8007bba:	429e      	cmp	r6, r3
 8007bbc:	d300      	bcc.n	8007bc0 <pbuf_copy+0xa0>
      len = p_from->len - offset_from;
 8007bbe:	461e      	mov	r6, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007bc0:	6868      	ldr	r0, [r5, #4]
 8007bc2:	6861      	ldr	r1, [r4, #4]
 8007bc4:	4632      	mov	r2, r6
 8007bc6:	4439      	add	r1, r7
 8007bc8:	4440      	add	r0, r8
 8007bca:	f00c fb03 	bl	80141d4 <memcpy>
    offset_to += len;
 8007bce:	44b0      	add	r8, r6
    offset_from += len;
 8007bd0:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007bd2:	896b      	ldrh	r3, [r5, #10]
 8007bd4:	4543      	cmp	r3, r8
 8007bd6:	d3ba      	bcc.n	8007b4e <pbuf_copy+0x2e>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007bd8:	8963      	ldrh	r3, [r4, #10]
 8007bda:	42bb      	cmp	r3, r7
 8007bdc:	d3bf      	bcc.n	8007b5e <pbuf_copy+0x3e>
    if (offset_from >= p_from->len) {
 8007bde:	8963      	ldrh	r3, [r4, #10]
 8007be0:	42bb      	cmp	r3, r7
 8007be2:	d801      	bhi.n	8007be8 <pbuf_copy+0xc8>
      p_from = p_from->next;
 8007be4:	6824      	ldr	r4, [r4, #0]
      offset_from = 0;
 8007be6:	2700      	movs	r7, #0
    if (offset_to == p_to->len) {
 8007be8:	896b      	ldrh	r3, [r5, #10]
 8007bea:	4543      	cmp	r3, r8
 8007bec:	d0bf      	beq.n	8007b6e <pbuf_copy+0x4e>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007bee:	b11c      	cbz	r4, 8007bf8 <pbuf_copy+0xd8>
 8007bf0:	8962      	ldrh	r2, [r4, #10]
 8007bf2:	8923      	ldrh	r3, [r4, #8]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d0cd      	beq.n	8007b94 <pbuf_copy+0x74>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007bf8:	2d00      	cmp	r5, #0
 8007bfa:	d0d7      	beq.n	8007bac <pbuf_copy+0x8c>
 8007bfc:	896a      	ldrh	r2, [r5, #10]
 8007bfe:	892b      	ldrh	r3, [r5, #8]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d1d3      	bne.n	8007bac <pbuf_copy+0x8c>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0d0      	beq.n	8007bac <pbuf_copy+0x8c>
 8007c0a:	4b06      	ldr	r3, [pc, #24]	; (8007c24 <pbuf_copy+0x104>)
 8007c0c:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007c10:	490a      	ldr	r1, [pc, #40]	; (8007c3c <pbuf_copy+0x11c>)
 8007c12:	4806      	ldr	r0, [pc, #24]	; (8007c2c <pbuf_copy+0x10c>)
 8007c14:	f00c fb0e 	bl	8014234 <iprintf>
 8007c18:	f06f 0005 	mvn.w	r0, #5
 8007c1c:	e000      	b.n	8007c20 <pbuf_copy+0x100>
  return ERR_OK;
 8007c1e:	2000      	movs	r0, #0
}
 8007c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c24:	08015a4c 	.word	0x08015a4c
 8007c28:	08015c84 	.word	0x08015c84
 8007c2c:	08015418 	.word	0x08015418
 8007c30:	08015cb4 	.word	0x08015cb4
 8007c34:	08015ccc 	.word	0x08015ccc
 8007c38:	08015ce8 	.word	0x08015ce8
 8007c3c:	08015cf8 	.word	0x08015cf8

08007c40 <pbuf_copy_partial>:
{
 8007c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007c44:	b130      	cbz	r0, 8007c54 <pbuf_copy_partial+0x14>
 8007c46:	4688      	mov	r8, r1
 8007c48:	4691      	mov	r9, r2
 8007c4a:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007c4c:	b169      	cbz	r1, 8007c6a <pbuf_copy_partial+0x2a>
  u16_t copied_total = 0;
 8007c4e:	2700      	movs	r7, #0
  u16_t left = 0;
 8007c50:	463e      	mov	r6, r7
 8007c52:	e02a      	b.n	8007caa <pbuf_copy_partial+0x6a>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007c54:	4b1b      	ldr	r3, [pc, #108]	; (8007cc4 <pbuf_copy_partial+0x84>)
 8007c56:	f240 420a 	movw	r2, #1034	; 0x40a
 8007c5a:	491b      	ldr	r1, [pc, #108]	; (8007cc8 <pbuf_copy_partial+0x88>)
 8007c5c:	481b      	ldr	r0, [pc, #108]	; (8007ccc <pbuf_copy_partial+0x8c>)
 8007c5e:	f00c fae9 	bl	8014234 <iprintf>
 8007c62:	2700      	movs	r7, #0
}
 8007c64:	4638      	mov	r0, r7
 8007c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007c6a:	4b16      	ldr	r3, [pc, #88]	; (8007cc4 <pbuf_copy_partial+0x84>)
 8007c6c:	f240 420b 	movw	r2, #1035	; 0x40b
 8007c70:	4917      	ldr	r1, [pc, #92]	; (8007cd0 <pbuf_copy_partial+0x90>)
 8007c72:	4816      	ldr	r0, [pc, #88]	; (8007ccc <pbuf_copy_partial+0x8c>)
 8007c74:	f00c fade 	bl	8014234 <iprintf>
 8007c78:	2700      	movs	r7, #0
 8007c7a:	e7f3      	b.n	8007c64 <pbuf_copy_partial+0x24>
      buf_copy_len = (u16_t)(p->len - offset);
 8007c7c:	896c      	ldrh	r4, [r5, #10]
 8007c7e:	1ae4      	subs	r4, r4, r3
 8007c80:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 8007c82:	45a1      	cmp	r9, r4
 8007c84:	d200      	bcs.n	8007c88 <pbuf_copy_partial+0x48>
        buf_copy_len = len;
 8007c86:	464c      	mov	r4, r9
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007c88:	6869      	ldr	r1, [r5, #4]
 8007c8a:	4622      	mov	r2, r4
 8007c8c:	4419      	add	r1, r3
 8007c8e:	eb08 0006 	add.w	r0, r8, r6
 8007c92:	f00c fa9f 	bl	80141d4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007c96:	4427      	add	r7, r4
 8007c98:	b2bf      	uxth	r7, r7
      left = (u16_t)(left + buf_copy_len);
 8007c9a:	4426      	add	r6, r4
 8007c9c:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 8007c9e:	eba9 0404 	sub.w	r4, r9, r4
 8007ca2:	fa1f f984 	uxth.w	r9, r4
      offset = 0;
 8007ca6:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007ca8:	682d      	ldr	r5, [r5, #0]
 8007caa:	f1b9 0f00 	cmp.w	r9, #0
 8007cae:	d0d9      	beq.n	8007c64 <pbuf_copy_partial+0x24>
 8007cb0:	2d00      	cmp	r5, #0
 8007cb2:	d0d7      	beq.n	8007c64 <pbuf_copy_partial+0x24>
    if ((offset != 0) && (offset >= p->len)) {
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d0e1      	beq.n	8007c7c <pbuf_copy_partial+0x3c>
 8007cb8:	8969      	ldrh	r1, [r5, #10]
 8007cba:	4299      	cmp	r1, r3
 8007cbc:	d8de      	bhi.n	8007c7c <pbuf_copy_partial+0x3c>
      offset = (u16_t)(offset - p->len);
 8007cbe:	1a5b      	subs	r3, r3, r1
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	e7f1      	b.n	8007ca8 <pbuf_copy_partial+0x68>
 8007cc4:	08015a4c 	.word	0x08015a4c
 8007cc8:	08015d24 	.word	0x08015d24
 8007ccc:	08015418 	.word	0x08015418
 8007cd0:	08015d44 	.word	0x08015d44

08007cd4 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8007cd4:	b508      	push	{r3, lr}
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8007cd6:	f7ff fc69 	bl	80075ac <pbuf_skip_const>
  return LWIP_CONST_CAST(struct pbuf *, out);
}
 8007cda:	bd08      	pop	{r3, pc}

08007cdc <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8007cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8007ce0:	b148      	cbz	r0, 8007cf6 <pbuf_take+0x1a>
 8007ce2:	4688      	mov	r8, r1
 8007ce4:	4691      	mov	r9, r2
 8007ce6:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8007ce8:	b179      	cbz	r1, 8007d0a <pbuf_take+0x2e>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8007cea:	8903      	ldrh	r3, [r0, #8]
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d316      	bcc.n	8007d1e <pbuf_take+0x42>
  size_t total_copy_len = len;
 8007cf0:	4616      	mov	r6, r2
  size_t copied_total = 0;
 8007cf2:	2700      	movs	r7, #0
 8007cf4:	e02e      	b.n	8007d54 <pbuf_take+0x78>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8007cf6:	4b22      	ldr	r3, [pc, #136]	; (8007d80 <pbuf_take+0xa4>)
 8007cf8:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8007cfc:	4921      	ldr	r1, [pc, #132]	; (8007d84 <pbuf_take+0xa8>)
 8007cfe:	4822      	ldr	r0, [pc, #136]	; (8007d88 <pbuf_take+0xac>)
 8007d00:	f00c fa98 	bl	8014234 <iprintf>
 8007d04:	f06f 000f 	mvn.w	r0, #15
 8007d08:	e02f      	b.n	8007d6a <pbuf_take+0x8e>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8007d0a:	4b1d      	ldr	r3, [pc, #116]	; (8007d80 <pbuf_take+0xa4>)
 8007d0c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8007d10:	491e      	ldr	r1, [pc, #120]	; (8007d8c <pbuf_take+0xb0>)
 8007d12:	481d      	ldr	r0, [pc, #116]	; (8007d88 <pbuf_take+0xac>)
 8007d14:	f00c fa8e 	bl	8014234 <iprintf>
 8007d18:	f06f 000f 	mvn.w	r0, #15
 8007d1c:	e025      	b.n	8007d6a <pbuf_take+0x8e>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8007d1e:	4b18      	ldr	r3, [pc, #96]	; (8007d80 <pbuf_take+0xa4>)
 8007d20:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8007d24:	491a      	ldr	r1, [pc, #104]	; (8007d90 <pbuf_take+0xb4>)
 8007d26:	4818      	ldr	r0, [pc, #96]	; (8007d88 <pbuf_take+0xac>)
 8007d28:	f00c fa84 	bl	8014234 <iprintf>
 8007d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d30:	e01b      	b.n	8007d6a <pbuf_take+0x8e>
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8007d32:	4b13      	ldr	r3, [pc, #76]	; (8007d80 <pbuf_take+0xa4>)
 8007d34:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8007d38:	4916      	ldr	r1, [pc, #88]	; (8007d94 <pbuf_take+0xb8>)
 8007d3a:	4813      	ldr	r0, [pc, #76]	; (8007d88 <pbuf_take+0xac>)
 8007d3c:	f00c fa7a 	bl	8014234 <iprintf>
 8007d40:	e00b      	b.n	8007d5a <pbuf_take+0x7e>
    if (buf_copy_len > p->len) {
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8007d42:	4622      	mov	r2, r4
 8007d44:	eb08 0107 	add.w	r1, r8, r7
 8007d48:	6868      	ldr	r0, [r5, #4]
 8007d4a:	f00c fa43 	bl	80141d4 <memcpy>
    total_copy_len -= buf_copy_len;
 8007d4e:	1b36      	subs	r6, r6, r4
    copied_total += buf_copy_len;
 8007d50:	4427      	add	r7, r4
  for (p = buf; total_copy_len != 0; p = p->next) {
 8007d52:	682d      	ldr	r5, [r5, #0]
 8007d54:	b136      	cbz	r6, 8007d64 <pbuf_take+0x88>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8007d56:	2d00      	cmp	r5, #0
 8007d58:	d0eb      	beq.n	8007d32 <pbuf_take+0x56>
    if (buf_copy_len > p->len) {
 8007d5a:	896c      	ldrh	r4, [r5, #10]
 8007d5c:	42b4      	cmp	r4, r6
 8007d5e:	d3f0      	bcc.n	8007d42 <pbuf_take+0x66>
    buf_copy_len = total_copy_len;
 8007d60:	4634      	mov	r4, r6
 8007d62:	e7ee      	b.n	8007d42 <pbuf_take+0x66>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8007d64:	454f      	cmp	r7, r9
 8007d66:	d102      	bne.n	8007d6e <pbuf_take+0x92>
  return ERR_OK;
 8007d68:	2000      	movs	r0, #0
}
 8007d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8007d6e:	4b04      	ldr	r3, [pc, #16]	; (8007d80 <pbuf_take+0xa4>)
 8007d70:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8007d74:	4908      	ldr	r1, [pc, #32]	; (8007d98 <pbuf_take+0xbc>)
 8007d76:	4804      	ldr	r0, [pc, #16]	; (8007d88 <pbuf_take+0xac>)
 8007d78:	f00c fa5c 	bl	8014234 <iprintf>
  return ERR_OK;
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	e7f4      	b.n	8007d6a <pbuf_take+0x8e>
 8007d80:	08015a4c 	.word	0x08015a4c
 8007d84:	08015d68 	.word	0x08015d68
 8007d88:	08015418 	.word	0x08015418
 8007d8c:	08015d80 	.word	0x08015d80
 8007d90:	08015d9c 	.word	0x08015d9c
 8007d94:	08015dbc 	.word	0x08015dbc
 8007d98:	08015dd4 	.word	0x08015dd4

08007d9c <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8007d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	460e      	mov	r6, r1
 8007da2:	4614      	mov	r4, r2
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8007da4:	f10d 0206 	add.w	r2, sp, #6
 8007da8:	4619      	mov	r1, r3
 8007daa:	f7ff ff93 	bl	8007cd4 <pbuf_skip>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8007dae:	b358      	cbz	r0, 8007e08 <pbuf_take_at+0x6c>
 8007db0:	4607      	mov	r7, r0
 8007db2:	8901      	ldrh	r1, [r0, #8]
 8007db4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007db8:	191a      	adds	r2, r3, r4
 8007dba:	4291      	cmp	r1, r2
 8007dbc:	db27      	blt.n	8007e0e <pbuf_take_at+0x72>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8007dbe:	8942      	ldrh	r2, [r0, #10]
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d213      	bcs.n	8007dec <pbuf_take_at+0x50>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8007dc4:	897b      	ldrh	r3, [r7, #10]
 8007dc6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8007dca:	1a1a      	subs	r2, r3, r0
 8007dcc:	4294      	cmp	r4, r2
 8007dce:	dd15      	ble.n	8007dfc <pbuf_take_at+0x60>
 8007dd0:	b295      	uxth	r5, r2
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	462a      	mov	r2, r5
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	4418      	add	r0, r3
 8007dda:	f00c f9fb 	bl	80141d4 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8007dde:	1b62      	subs	r2, r4, r5
 8007de0:	b292      	uxth	r2, r2
    src_ptr += first_copy_len;
 8007de2:	1971      	adds	r1, r6, r5
    if (remaining_len > 0) {
 8007de4:	b962      	cbnz	r2, 8007e00 <pbuf_take_at+0x64>
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
 8007de6:	2000      	movs	r0, #0
  }
  return ERR_MEM;
}
 8007de8:	b003      	add	sp, #12
 8007dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8007dec:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <pbuf_take_at+0x78>)
 8007dee:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8007df2:	4909      	ldr	r1, [pc, #36]	; (8007e18 <pbuf_take_at+0x7c>)
 8007df4:	4809      	ldr	r0, [pc, #36]	; (8007e1c <pbuf_take_at+0x80>)
 8007df6:	f00c fa1d 	bl	8014234 <iprintf>
 8007dfa:	e7e3      	b.n	8007dc4 <pbuf_take_at+0x28>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8007dfc:	4625      	mov	r5, r4
 8007dfe:	e7e8      	b.n	8007dd2 <pbuf_take_at+0x36>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8007e00:	6838      	ldr	r0, [r7, #0]
 8007e02:	f7ff ff6b 	bl	8007cdc <pbuf_take>
 8007e06:	e7ef      	b.n	8007de8 <pbuf_take_at+0x4c>
  return ERR_MEM;
 8007e08:	f04f 30ff 	mov.w	r0, #4294967295
 8007e0c:	e7ec      	b.n	8007de8 <pbuf_take_at+0x4c>
 8007e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e12:	e7e9      	b.n	8007de8 <pbuf_take_at+0x4c>
 8007e14:	08015a4c 	.word	0x08015a4c
 8007e18:	08015dec 	.word	0x08015dec
 8007e1c:	08015418 	.word	0x08015418

08007e20 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007e24:	460a      	mov	r2, r1
 8007e26:	8921      	ldrh	r1, [r4, #8]
 8007e28:	f7ff fd16 	bl	8007858 <pbuf_alloc>
  if (q == NULL) {
 8007e2c:	4605      	mov	r5, r0
 8007e2e:	b118      	cbz	r0, 8007e38 <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8007e30:	4621      	mov	r1, r4
 8007e32:	f7ff fe75 	bl	8007b20 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007e36:	b908      	cbnz	r0, 8007e3c <pbuf_clone+0x1c>
  return q;
}
 8007e38:	4628      	mov	r0, r5
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007e3c:	4b03      	ldr	r3, [pc, #12]	; (8007e4c <pbuf_clone+0x2c>)
 8007e3e:	f240 5224 	movw	r2, #1316	; 0x524
 8007e42:	4903      	ldr	r1, [pc, #12]	; (8007e50 <pbuf_clone+0x30>)
 8007e44:	4803      	ldr	r0, [pc, #12]	; (8007e54 <pbuf_clone+0x34>)
 8007e46:	f00c f9f5 	bl	8014234 <iprintf>
 8007e4a:	e7f5      	b.n	8007e38 <pbuf_clone+0x18>
 8007e4c:	08015a4c 	.word	0x08015a4c
 8007e50:	08015e04 	.word	0x08015e04
 8007e54:	08015418 	.word	0x08015418

08007e58 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8007e58:	b500      	push	{lr}
 8007e5a:	b083      	sub	sp, #12
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8007e5c:	f10d 0206 	add.w	r2, sp, #6
 8007e60:	f7ff fba4 	bl	80075ac <pbuf_skip_const>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8007e64:	b148      	cbz	r0, 8007e7a <pbuf_try_get_at+0x22>
 8007e66:	8941      	ldrh	r1, [r0, #10]
 8007e68:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007e6c:	4291      	cmp	r1, r2
 8007e6e:	d907      	bls.n	8007e80 <pbuf_try_get_at+0x28>
    return ((u8_t *)q->payload)[q_idx];
 8007e70:	6843      	ldr	r3, [r0, #4]
 8007e72:	5c98      	ldrb	r0, [r3, r2]
  }
  return -1;
}
 8007e74:	b003      	add	sp, #12
 8007e76:	f85d fb04 	ldr.w	pc, [sp], #4
  return -1;
 8007e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e7e:	e7f9      	b.n	8007e74 <pbuf_try_get_at+0x1c>
 8007e80:	f04f 30ff 	mov.w	r0, #4294967295
 8007e84:	e7f6      	b.n	8007e74 <pbuf_try_get_at+0x1c>

08007e86 <pbuf_get_at>:
{
 8007e86:	b508      	push	{r3, lr}
  int ret = pbuf_try_get_at(p, offset);
 8007e88:	f7ff ffe6 	bl	8007e58 <pbuf_try_get_at>
  if (ret >= 0) {
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	da01      	bge.n	8007e94 <pbuf_get_at+0xe>
  return 0;
 8007e90:	2000      	movs	r0, #0
}
 8007e92:	bd08      	pop	{r3, pc}
    return (u8_t)ret;
 8007e94:	b2c0      	uxtb	r0, r0
 8007e96:	e7fc      	b.n	8007e92 <pbuf_get_at+0xc>

08007e98 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8007e98:	b510      	push	{r4, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	4614      	mov	r4, r2
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8007e9e:	f10d 0206 	add.w	r2, sp, #6
 8007ea2:	f7ff ff17 	bl	8007cd4 <pbuf_skip>

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8007ea6:	b130      	cbz	r0, 8007eb6 <pbuf_put_at+0x1e>
 8007ea8:	8941      	ldrh	r1, [r0, #10]
 8007eaa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007eae:	4291      	cmp	r1, r2
 8007eb0:	d901      	bls.n	8007eb6 <pbuf_put_at+0x1e>
    ((u8_t *)q->payload)[q_idx] = data;
 8007eb2:	6843      	ldr	r3, [r0, #4]
 8007eb4:	549c      	strb	r4, [r3, r2]
  }
}
 8007eb6:	b002      	add	sp, #8
 8007eb8:	bd10      	pop	{r4, pc}
	...

08007ebc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	4604      	mov	r4, r0
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007ec0:	460d      	mov	r5, r1
 8007ec2:	b951      	cbnz	r1, 8007eda <tcp_remove_listener+0x1e>
 8007ec4:	4b08      	ldr	r3, [pc, #32]	; (8007ee8 <tcp_remove_listener+0x2c>)
 8007ec6:	22ff      	movs	r2, #255	; 0xff
 8007ec8:	4908      	ldr	r1, [pc, #32]	; (8007eec <tcp_remove_listener+0x30>)
 8007eca:	4809      	ldr	r0, [pc, #36]	; (8007ef0 <tcp_remove_listener+0x34>)
 8007ecc:	f00c f9b2 	bl	8014234 <iprintf>
 8007ed0:	e003      	b.n	8007eda <tcp_remove_listener+0x1e>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
    if (pcb->listener == lpcb) {
      pcb->listener = NULL;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007ed8:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8007eda:	b124      	cbz	r4, 8007ee6 <tcp_remove_listener+0x2a>
    if (pcb->listener == lpcb) {
 8007edc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8007ee0:	42ab      	cmp	r3, r5
 8007ee2:	d1f9      	bne.n	8007ed8 <tcp_remove_listener+0x1c>
 8007ee4:	e7f5      	b.n	8007ed2 <tcp_remove_listener+0x16>
    }
  }
}
 8007ee6:	bd38      	pop	{r3, r4, r5, pc}
 8007ee8:	08015e18 	.word	0x08015e18
 8007eec:	08015e48 	.word	0x08015e48
 8007ef0:	08015418 	.word	0x08015418

08007ef4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007ef4:	b538      	push	{r3, r4, r5, lr}
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007ef6:	4605      	mov	r5, r0
 8007ef8:	b128      	cbz	r0, 8007f06 <tcp_listen_closed+0x12>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007efa:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d109      	bne.n	8007f16 <tcp_listen_closed+0x22>
{
 8007f02:	2401      	movs	r4, #1
 8007f04:	e017      	b.n	8007f36 <tcp_listen_closed+0x42>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007f06:	4b0d      	ldr	r3, [pc, #52]	; (8007f3c <tcp_listen_closed+0x48>)
 8007f08:	f240 1211 	movw	r2, #273	; 0x111
 8007f0c:	490c      	ldr	r1, [pc, #48]	; (8007f40 <tcp_listen_closed+0x4c>)
 8007f0e:	480d      	ldr	r0, [pc, #52]	; (8007f44 <tcp_listen_closed+0x50>)
 8007f10:	f00c f990 	bl	8014234 <iprintf>
 8007f14:	e7f1      	b.n	8007efa <tcp_listen_closed+0x6>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007f16:	4b09      	ldr	r3, [pc, #36]	; (8007f3c <tcp_listen_closed+0x48>)
 8007f18:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007f1c:	490a      	ldr	r1, [pc, #40]	; (8007f48 <tcp_listen_closed+0x54>)
 8007f1e:	4809      	ldr	r0, [pc, #36]	; (8007f44 <tcp_listen_closed+0x50>)
 8007f20:	f00c f988 	bl	8014234 <iprintf>
 8007f24:	e7ed      	b.n	8007f02 <tcp_listen_closed+0xe>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007f26:	4b09      	ldr	r3, [pc, #36]	; (8007f4c <tcp_listen_closed+0x58>)
 8007f28:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	f7ff ffc4 	bl	8007ebc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007f34:	3401      	adds	r4, #1
 8007f36:	2c03      	cmp	r4, #3
 8007f38:	d9f5      	bls.n	8007f26 <tcp_listen_closed+0x32>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	08015e18 	.word	0x08015e18
 8007f40:	08015e70 	.word	0x08015e70
 8007f44:	08015418 	.word	0x08015418
 8007f48:	08015e7c 	.word	0x08015e7c
 8007f4c:	08016350 	.word	0x08016350

08007f50 <tcp_free_listen>:
{
 8007f50:	b510      	push	{r4, lr}
 8007f52:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007f54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d004      	beq.n	8007f66 <tcp_free_listen+0x16>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007f5c:	4621      	mov	r1, r4
 8007f5e:	2002      	movs	r0, #2
 8007f60:	f7fe ff74 	bl	8006e4c <memp_free>
}
 8007f64:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007f66:	4b03      	ldr	r3, [pc, #12]	; (8007f74 <tcp_free_listen+0x24>)
 8007f68:	22df      	movs	r2, #223	; 0xdf
 8007f6a:	4903      	ldr	r1, [pc, #12]	; (8007f78 <tcp_free_listen+0x28>)
 8007f6c:	4803      	ldr	r0, [pc, #12]	; (8007f7c <tcp_free_listen+0x2c>)
 8007f6e:	f00c f961 	bl	8014234 <iprintf>
 8007f72:	e7f3      	b.n	8007f5c <tcp_free_listen+0xc>
 8007f74:	08015e18 	.word	0x08015e18
 8007f78:	08015e94 	.word	0x08015e94
 8007f7c:	08015418 	.word	0x08015418

08007f80 <tcp_close_shutdown_fin>:
  return ERR_OK;
}

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007f80:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007f82:	4605      	mov	r5, r0
 8007f84:	b150      	cbz	r0, 8007f9c <tcp_close_shutdown_fin+0x1c>

  switch (pcb->state) {
 8007f86:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8007f8a:	2b04      	cmp	r3, #4
 8007f8c:	d022      	beq.n	8007fd4 <tcp_close_shutdown_fin+0x54>
 8007f8e:	2b07      	cmp	r3, #7
 8007f90:	d02a      	beq.n	8007fe8 <tcp_close_shutdown_fin+0x68>
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d00a      	beq.n	8007fac <tcp_close_shutdown_fin+0x2c>
 8007f96:	2400      	movs	r4, #0
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
  }
  return err;
}
 8007f98:	4620      	mov	r0, r4
 8007f9a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007f9c:	4b19      	ldr	r3, [pc, #100]	; (8008004 <tcp_close_shutdown_fin+0x84>)
 8007f9e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007fa2:	4919      	ldr	r1, [pc, #100]	; (8008008 <tcp_close_shutdown_fin+0x88>)
 8007fa4:	4819      	ldr	r0, [pc, #100]	; (800800c <tcp_close_shutdown_fin+0x8c>)
 8007fa6:	f00c f945 	bl	8014234 <iprintf>
 8007faa:	e7ec      	b.n	8007f86 <tcp_close_shutdown_fin+0x6>
      err = tcp_send_fin(pcb);
 8007fac:	4628      	mov	r0, r5
 8007fae:	f003 fb4d 	bl	800b64c <tcp_send_fin>
      if (err == ERR_OK) {
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	b910      	cbnz	r0, 8007fbc <tcp_close_shutdown_fin+0x3c>
        pcb->state = FIN_WAIT_1;
 8007fb6:	2305      	movs	r3, #5
 8007fb8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if (err == ERR_OK) {
 8007fbc:	b1f4      	cbz	r4, 8007ffc <tcp_close_shutdown_fin+0x7c>
  } else if (err == ERR_MEM) {
 8007fbe:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007fc2:	d1e9      	bne.n	8007f98 <tcp_close_shutdown_fin+0x18>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007fc4:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 8007fc8:	f043 0308 	orr.w	r3, r3, #8
 8007fcc:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
    return ERR_OK;
 8007fd0:	2400      	movs	r4, #0
 8007fd2:	e7e1      	b.n	8007f98 <tcp_close_shutdown_fin+0x18>
      err = tcp_send_fin(pcb);
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	f003 fb39 	bl	800b64c <tcp_send_fin>
      if (err == ERR_OK) {
 8007fda:	4604      	mov	r4, r0
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d1ed      	bne.n	8007fbc <tcp_close_shutdown_fin+0x3c>
        pcb->state = FIN_WAIT_1;
 8007fe0:	2305      	movs	r3, #5
 8007fe2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 8007fe6:	e7e9      	b.n	8007fbc <tcp_close_shutdown_fin+0x3c>
      err = tcp_send_fin(pcb);
 8007fe8:	4628      	mov	r0, r5
 8007fea:	f003 fb2f 	bl	800b64c <tcp_send_fin>
      if (err == ERR_OK) {
 8007fee:	4604      	mov	r4, r0
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d1e3      	bne.n	8007fbc <tcp_close_shutdown_fin+0x3c>
        pcb->state = LAST_ACK;
 8007ff4:	2309      	movs	r3, #9
 8007ff6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 8007ffa:	e7df      	b.n	8007fbc <tcp_close_shutdown_fin+0x3c>
    tcp_output(pcb);
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	f003 fcbd 	bl	800b97c <tcp_output>
 8008002:	e7c9      	b.n	8007f98 <tcp_close_shutdown_fin+0x18>
 8008004:	08015e18 	.word	0x08015e18
 8008008:	08015e70 	.word	0x08015e70
 800800c:	08015418 	.word	0x08015418

08008010 <tcp_handle_closepend>:
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008010:	4b0a      	ldr	r3, [pc, #40]	; (800803c <tcp_handle_closepend+0x2c>)
 8008012:	6818      	ldr	r0, [r3, #0]

  while (pcb != NULL) {
 8008014:	b188      	cbz	r0, 800803a <tcp_handle_closepend+0x2a>
{
 8008016:	b510      	push	{r4, lr}
 8008018:	e007      	b.n	800802a <tcp_handle_closepend+0x1a>
    struct tcp_pcb *next = pcb->next;
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800801a:	f023 0308 	bic.w	r3, r3, #8
 800801e:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
      tcp_close_shutdown_fin(pcb);
 8008022:	f7ff ffad 	bl	8007f80 <tcp_close_shutdown_fin>
{
 8008026:	4620      	mov	r0, r4
  while (pcb != NULL) {
 8008028:	b134      	cbz	r4, 8008038 <tcp_handle_closepend+0x28>
    struct tcp_pcb *next = pcb->next;
 800802a:	6b44      	ldr	r4, [r0, #52]	; 0x34
    if (pcb->flags & TF_CLOSEPEND) {
 800802c:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
 8008030:	f013 0f08 	tst.w	r3, #8
 8008034:	d0f7      	beq.n	8008026 <tcp_handle_closepend+0x16>
 8008036:	e7f0      	b.n	800801a <tcp_handle_closepend+0xa>
    }
    pcb = next;
  }
}
 8008038:	bd10      	pop	{r4, pc}
 800803a:	4770      	bx	lr
 800803c:	20007b20 	.word	0x20007b20

08008040 <tcp_init>:
{
 8008040:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008042:	f00c f985 	bl	8014350 <rand>
 8008046:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800804a:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800804e:	4b01      	ldr	r3, [pc, #4]	; (8008054 <tcp_init+0x14>)
 8008050:	8018      	strh	r0, [r3, #0]
}
 8008052:	bd08      	pop	{r3, pc}
 8008054:	20000010 	.word	0x20000010

08008058 <tcp_free>:
{
 8008058:	b510      	push	{r4, lr}
 800805a:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800805c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008060:	2b01      	cmp	r3, #1
 8008062:	d004      	beq.n	800806e <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 8008064:	4621      	mov	r1, r4
 8008066:	2001      	movs	r0, #1
 8008068:	f7fe fef0 	bl	8006e4c <memp_free>
}
 800806c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800806e:	4b03      	ldr	r3, [pc, #12]	; (800807c <tcp_free+0x24>)
 8008070:	22d4      	movs	r2, #212	; 0xd4
 8008072:	4903      	ldr	r1, [pc, #12]	; (8008080 <tcp_free+0x28>)
 8008074:	4803      	ldr	r0, [pc, #12]	; (8008084 <tcp_free+0x2c>)
 8008076:	f00c f8dd 	bl	8014234 <iprintf>
 800807a:	e7f3      	b.n	8008064 <tcp_free+0xc>
 800807c:	08015e18 	.word	0x08015e18
 8008080:	08015eb0 	.word	0x08015eb0
 8008084:	08015418 	.word	0x08015418

08008088 <tcp_update_rcv_ann_wnd>:
{
 8008088:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800808a:	4604      	mov	r4, r0
 800808c:	b198      	cbz	r0, 80080b6 <tcp_update_rcv_ann_wnd+0x2e>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800808e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008090:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8008094:	1868      	adds	r0, r5, r1
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008096:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008098:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800809c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80080a0:	bf94      	ite	ls
 80080a2:	18d3      	addls	r3, r2, r3
 80080a4:	f502 6386 	addhi.w	r3, r2, #1072	; 0x430
 80080a8:	1ac3      	subs	r3, r0, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	db0b      	blt.n	80080c6 <tcp_update_rcv_ann_wnd+0x3e>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80080ae:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    return new_right_edge - pcb->rcv_ann_right_edge;
 80080b2:	1a80      	subs	r0, r0, r2
}
 80080b4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80080b6:	4b0f      	ldr	r3, [pc, #60]	; (80080f4 <tcp_update_rcv_ann_wnd+0x6c>)
 80080b8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80080bc:	490e      	ldr	r1, [pc, #56]	; (80080f8 <tcp_update_rcv_ann_wnd+0x70>)
 80080be:	480f      	ldr	r0, [pc, #60]	; (80080fc <tcp_update_rcv_ann_wnd+0x74>)
 80080c0:	f00c f8b8 	bl	8014234 <iprintf>
 80080c4:	e7e3      	b.n	800808e <tcp_update_rcv_ann_wnd+0x6>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80080c6:	1aab      	subs	r3, r5, r2
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	dd04      	ble.n	80080d6 <tcp_update_rcv_ann_wnd+0x4e>
      pcb->rcv_ann_wnd = 0;
 80080cc:	2300      	movs	r3, #0
 80080ce:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    return 0;
 80080d2:	2000      	movs	r0, #0
 80080d4:	e7ee      	b.n	80080b4 <tcp_update_rcv_ann_wnd+0x2c>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80080d6:	1b55      	subs	r5, r2, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80080d8:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80080dc:	d202      	bcs.n	80080e4 <tcp_update_rcv_ann_wnd+0x5c>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80080de:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 80080e2:	e7f6      	b.n	80080d2 <tcp_update_rcv_ann_wnd+0x4a>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80080e4:	4b03      	ldr	r3, [pc, #12]	; (80080f4 <tcp_update_rcv_ann_wnd+0x6c>)
 80080e6:	f240 32b6 	movw	r2, #950	; 0x3b6
 80080ea:	4905      	ldr	r1, [pc, #20]	; (8008100 <tcp_update_rcv_ann_wnd+0x78>)
 80080ec:	4803      	ldr	r0, [pc, #12]	; (80080fc <tcp_update_rcv_ann_wnd+0x74>)
 80080ee:	f00c f8a1 	bl	8014234 <iprintf>
 80080f2:	e7f4      	b.n	80080de <tcp_update_rcv_ann_wnd+0x56>
 80080f4:	08015e18 	.word	0x08015e18
 80080f8:	08015ec4 	.word	0x08015ec4
 80080fc:	08015418 	.word	0x08015418
 8008100:	08015ee8 	.word	0x08015ee8

08008104 <tcp_recved>:
{
 8008104:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008106:	b1c8      	cbz	r0, 800813c <tcp_recved+0x38>
 8008108:	460c      	mov	r4, r1
 800810a:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800810c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008110:	2b01      	cmp	r3, #1
 8008112:	d01b      	beq.n	800814c <tcp_recved+0x48>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008114:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8008118:	1919      	adds	r1, r3, r4
 800811a:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800811c:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 8008120:	d801      	bhi.n	8008126 <tcp_recved+0x22>
 8008122:	428b      	cmp	r3, r1
 8008124:	d91a      	bls.n	800815c <tcp_recved+0x58>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008126:	f44f 6306 	mov.w	r3, #2144	; 0x860
 800812a:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800812e:	4628      	mov	r0, r5
 8008130:	f7ff ffaa 	bl	8008088 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008134:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8008138:	d213      	bcs.n	8008162 <tcp_recved+0x5e>
}
 800813a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800813c:	4b0e      	ldr	r3, [pc, #56]	; (8008178 <tcp_recved+0x74>)
 800813e:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008142:	490e      	ldr	r1, [pc, #56]	; (800817c <tcp_recved+0x78>)
 8008144:	480e      	ldr	r0, [pc, #56]	; (8008180 <tcp_recved+0x7c>)
 8008146:	f00c f875 	bl	8014234 <iprintf>
 800814a:	e7f6      	b.n	800813a <tcp_recved+0x36>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800814c:	4b0a      	ldr	r3, [pc, #40]	; (8008178 <tcp_recved+0x74>)
 800814e:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008152:	490c      	ldr	r1, [pc, #48]	; (8008184 <tcp_recved+0x80>)
 8008154:	480a      	ldr	r0, [pc, #40]	; (8008180 <tcp_recved+0x7c>)
 8008156:	f00c f86d 	bl	8014234 <iprintf>
 800815a:	e7db      	b.n	8008114 <tcp_recved+0x10>
    pcb->rcv_wnd = rcv_wnd;
 800815c:	f8a5 1050 	strh.w	r1, [r5, #80]	; 0x50
 8008160:	e7e5      	b.n	800812e <tcp_recved+0x2a>
    tcp_ack_now(pcb);
 8008162:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 8008166:	f043 0302 	orr.w	r3, r3, #2
 800816a:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
    tcp_output(pcb);
 800816e:	4628      	mov	r0, r5
 8008170:	f003 fc04 	bl	800b97c <tcp_output>
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
 8008174:	e7e1      	b.n	800813a <tcp_recved+0x36>
 8008176:	bf00      	nop
 8008178:	08015e18 	.word	0x08015e18
 800817c:	08015f04 	.word	0x08015f04
 8008180:	08015418 	.word	0x08015418
 8008184:	08015f1c 	.word	0x08015f1c

08008188 <tcp_seg_free>:
  if (seg != NULL) {
 8008188:	b150      	cbz	r0, 80081a0 <tcp_seg_free+0x18>
{
 800818a:	b510      	push	{r4, lr}
 800818c:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 800818e:	6840      	ldr	r0, [r0, #4]
 8008190:	b108      	cbz	r0, 8008196 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8008192:	f7ff faff 	bl	8007794 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8008196:	4621      	mov	r1, r4
 8008198:	2003      	movs	r0, #3
 800819a:	f7fe fe57 	bl	8006e4c <memp_free>
}
 800819e:	bd10      	pop	{r4, pc}
 80081a0:	4770      	bx	lr

080081a2 <tcp_segs_free>:
  while (seg != NULL) {
 80081a2:	b138      	cbz	r0, 80081b4 <tcp_segs_free+0x12>
{
 80081a4:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 80081a6:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 80081a8:	f7ff ffee 	bl	8008188 <tcp_seg_free>
    seg = next;
 80081ac:	4620      	mov	r0, r4
  while (seg != NULL) {
 80081ae:	2c00      	cmp	r4, #0
 80081b0:	d1f9      	bne.n	80081a6 <tcp_segs_free+0x4>
}
 80081b2:	bd10      	pop	{r4, pc}
 80081b4:	4770      	bx	lr
	...

080081b8 <tcp_seg_copy>:
{
 80081b8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80081ba:	4605      	mov	r5, r0
 80081bc:	b188      	cbz	r0, 80081e2 <tcp_seg_copy+0x2a>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80081be:	2003      	movs	r0, #3
 80081c0:	f7fe fe2a 	bl	8006e18 <memp_malloc>
  if (cseg == NULL) {
 80081c4:	4604      	mov	r4, r0
 80081c6:	b150      	cbz	r0, 80081de <tcp_seg_copy+0x26>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80081c8:	6828      	ldr	r0, [r5, #0]
 80081ca:	6869      	ldr	r1, [r5, #4]
 80081cc:	68aa      	ldr	r2, [r5, #8]
 80081ce:	68eb      	ldr	r3, [r5, #12]
 80081d0:	6020      	str	r0, [r4, #0]
 80081d2:	6061      	str	r1, [r4, #4]
 80081d4:	60a2      	str	r2, [r4, #8]
 80081d6:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 80081d8:	6860      	ldr	r0, [r4, #4]
 80081da:	f7ff fc47 	bl	8007a6c <pbuf_ref>
}
 80081de:	4620      	mov	r0, r4
 80081e0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80081e2:	4b04      	ldr	r3, [pc, #16]	; (80081f4 <tcp_seg_copy+0x3c>)
 80081e4:	f240 6282 	movw	r2, #1666	; 0x682
 80081e8:	4903      	ldr	r1, [pc, #12]	; (80081f8 <tcp_seg_copy+0x40>)
 80081ea:	4804      	ldr	r0, [pc, #16]	; (80081fc <tcp_seg_copy+0x44>)
 80081ec:	f00c f822 	bl	8014234 <iprintf>
 80081f0:	e7e5      	b.n	80081be <tcp_seg_copy+0x6>
 80081f2:	bf00      	nop
 80081f4:	08015e18 	.word	0x08015e18
 80081f8:	08015f44 	.word	0x08015f44
 80081fc:	08015418 	.word	0x08015418

08008200 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008200:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008202:	b130      	cbz	r0, 8008212 <tcp_next_iss+0x12>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008204:	4b07      	ldr	r3, [pc, #28]	; (8008224 <tcp_next_iss+0x24>)
 8008206:	6818      	ldr	r0, [r3, #0]
 8008208:	4a07      	ldr	r2, [pc, #28]	; (8008228 <tcp_next_iss+0x28>)
 800820a:	6812      	ldr	r2, [r2, #0]
 800820c:	4410      	add	r0, r2
 800820e:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008210:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008212:	4b06      	ldr	r3, [pc, #24]	; (800822c <tcp_next_iss+0x2c>)
 8008214:	f640 02af 	movw	r2, #2223	; 0x8af
 8008218:	4905      	ldr	r1, [pc, #20]	; (8008230 <tcp_next_iss+0x30>)
 800821a:	4806      	ldr	r0, [pc, #24]	; (8008234 <tcp_next_iss+0x34>)
 800821c:	f00c f80a 	bl	8014234 <iprintf>
 8008220:	e7f0      	b.n	8008204 <tcp_next_iss+0x4>
 8008222:	bf00      	nop
 8008224:	2000000c 	.word	0x2000000c
 8008228:	20007b24 	.word	0x20007b24
 800822c:	08015e18 	.word	0x08015e18
 8008230:	08015f60 	.word	0x08015f60
 8008234:	08015418 	.word	0x08015418

08008238 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	4604      	mov	r4, r0
 800823c:	460d      	mov	r5, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800823e:	4616      	mov	r6, r2
 8008240:	b1aa      	cbz	r2, 800826e <tcp_eff_send_mss_netif+0x36>

#if LWIP_IPV6
#if LWIP_IPV4
  if (IP_IS_V6(dest))
 8008242:	b116      	cbz	r6, 800824a <tcp_eff_send_mss_netif+0x12>
 8008244:	7d33      	ldrb	r3, [r6, #20]
 8008246:	2b06      	cmp	r3, #6
 8008248:	d019      	beq.n	800827e <tcp_eff_send_mss_netif+0x46>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800824a:	b175      	cbz	r5, 800826a <tcp_eff_send_mss_netif+0x32>
      return sendmss;
    }
    mtu = outif->mtu;
 800824c:	f8b5 00d4 	ldrh.w	r0, [r5, #212]	; 0xd4
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008250:	b158      	cbz	r0, 800826a <tcp_eff_send_mss_netif+0x32>
    u16_t offset;
#if LWIP_IPV6
#if LWIP_IPV4
    if (IP_IS_V6(dest))
 8008252:	b1ce      	cbz	r6, 8008288 <tcp_eff_send_mss_netif+0x50>
 8008254:	7d33      	ldrb	r3, [r6, #20]
 8008256:	2b06      	cmp	r3, #6
 8008258:	d018      	beq.n	800828c <tcp_eff_send_mss_netif+0x54>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800825a:	2328      	movs	r3, #40	; 0x28
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800825c:	4298      	cmp	r0, r3
 800825e:	d917      	bls.n	8008290 <tcp_eff_send_mss_netif+0x58>
 8008260:	1ac0      	subs	r0, r0, r3
 8008262:	b280      	uxth	r0, r0
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008264:	4284      	cmp	r4, r0
 8008266:	bf28      	it	cs
 8008268:	4604      	movcs	r4, r0
  }
  return sendmss;
}
 800826a:	4620      	mov	r0, r4
 800826c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800826e:	4b09      	ldr	r3, [pc, #36]	; (8008294 <tcp_eff_send_mss_netif+0x5c>)
 8008270:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008274:	4908      	ldr	r1, [pc, #32]	; (8008298 <tcp_eff_send_mss_netif+0x60>)
 8008276:	4809      	ldr	r0, [pc, #36]	; (800829c <tcp_eff_send_mss_netif+0x64>)
 8008278:	f00b ffdc 	bl	8014234 <iprintf>
 800827c:	e7e1      	b.n	8008242 <tcp_eff_send_mss_netif+0xa>
    mtu = nd6_get_destination_mtu(ip_2_ip6(dest), outif);
 800827e:	4629      	mov	r1, r5
 8008280:	4630      	mov	r0, r6
 8008282:	f00b fd7f 	bl	8013d84 <nd6_get_destination_mtu>
 8008286:	e7e3      	b.n	8008250 <tcp_eff_send_mss_netif+0x18>
      offset = IP_HLEN + TCP_HLEN;
 8008288:	2328      	movs	r3, #40	; 0x28
 800828a:	e7e7      	b.n	800825c <tcp_eff_send_mss_netif+0x24>
      offset = IP6_HLEN + TCP_HLEN;
 800828c:	233c      	movs	r3, #60	; 0x3c
 800828e:	e7e5      	b.n	800825c <tcp_eff_send_mss_netif+0x24>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008290:	2000      	movs	r0, #0
 8008292:	e7e7      	b.n	8008264 <tcp_eff_send_mss_netif+0x2c>
 8008294:	08015e18 	.word	0x08015e18
 8008298:	08015f7c 	.word	0x08015f7c
 800829c:	08015418 	.word	0x08015418

080082a0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80082a0:	b510      	push	{r4, lr}
 80082a2:	4604      	mov	r4, r0
  if (pcb->ooseq) {
 80082a4:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 80082a8:	b120      	cbz	r0, 80082b4 <tcp_free_ooseq+0x14>
    tcp_segs_free(pcb->ooseq);
 80082aa:	f7ff ff7a 	bl	80081a2 <tcp_segs_free>
    pcb->ooseq = NULL;
 80082ae:	2300      	movs	r3, #0
 80082b0:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80082b4:	bd10      	pop	{r4, pc}
	...

080082b8 <tcp_pcb_purge>:
{
 80082b8:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80082ba:	b348      	cbz	r0, 8008310 <tcp_pcb_purge+0x58>
 80082bc:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 80082be:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80082c2:	b323      	cbz	r3, 800830e <tcp_pcb_purge+0x56>
 80082c4:	2b0a      	cmp	r3, #10
 80082c6:	d022      	beq.n	800830e <tcp_pcb_purge+0x56>
      pcb->state != TIME_WAIT &&
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d020      	beq.n	800830e <tcp_pcb_purge+0x56>
    if (pcb->refused_data != NULL) {
 80082cc:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
 80082d0:	b120      	cbz	r0, 80082dc <tcp_pcb_purge+0x24>
      pbuf_free(pcb->refused_data);
 80082d2:	f7ff fa5f 	bl	8007794 <pbuf_free>
      pcb->refused_data = NULL;
 80082d6:	2300      	movs	r3, #0
 80082d8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    if (pcb->ooseq != NULL) {
 80082dc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80082e0:	b113      	cbz	r3, 80082e8 <tcp_pcb_purge+0x30>
      tcp_free_ooseq(pcb);
 80082e2:	4620      	mov	r0, r4
 80082e4:	f7ff ffdc 	bl	80082a0 <tcp_free_ooseq>
    pcb->rtime = -1;
 80082e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80082ec:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
    tcp_segs_free(pcb->unsent);
 80082f0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80082f4:	f7ff ff55 	bl	80081a2 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80082f8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80082fc:	f7ff ff51 	bl	80081a2 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008300:	2300      	movs	r3, #0
 8008302:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8008306:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    pcb->unsent_oversize = 0;
 800830a:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
}
 800830e:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008310:	4b03      	ldr	r3, [pc, #12]	; (8008320 <tcp_pcb_purge+0x68>)
 8008312:	f640 0251 	movw	r2, #2129	; 0x851
 8008316:	4903      	ldr	r1, [pc, #12]	; (8008324 <tcp_pcb_purge+0x6c>)
 8008318:	4803      	ldr	r0, [pc, #12]	; (8008328 <tcp_pcb_purge+0x70>)
 800831a:	f00b ff8b 	bl	8014234 <iprintf>
 800831e:	e7f6      	b.n	800830e <tcp_pcb_purge+0x56>
 8008320:	08015e18 	.word	0x08015e18
 8008324:	08015fa4 	.word	0x08015fa4
 8008328:	08015418 	.word	0x08015418

0800832c <tcp_pcb_remove>:
{
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008330:	460c      	mov	r4, r1
 8008332:	b149      	cbz	r1, 8008348 <tcp_pcb_remove+0x1c>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008334:	b185      	cbz	r5, 8008358 <tcp_pcb_remove+0x2c>
  TCP_RMV(pcblist, pcb);
 8008336:	682b      	ldr	r3, [r5, #0]
 8008338:	42a3      	cmp	r3, r4
 800833a:	d015      	beq.n	8008368 <tcp_pcb_remove+0x3c>
 800833c:	b1cb      	cbz	r3, 8008372 <tcp_pcb_remove+0x46>
 800833e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008340:	42a2      	cmp	r2, r4
 8008342:	d014      	beq.n	800836e <tcp_pcb_remove+0x42>
 8008344:	4613      	mov	r3, r2
 8008346:	e7f9      	b.n	800833c <tcp_pcb_remove+0x10>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008348:	4b29      	ldr	r3, [pc, #164]	; (80083f0 <tcp_pcb_remove+0xc4>)
 800834a:	f640 0283 	movw	r2, #2179	; 0x883
 800834e:	4929      	ldr	r1, [pc, #164]	; (80083f4 <tcp_pcb_remove+0xc8>)
 8008350:	4829      	ldr	r0, [pc, #164]	; (80083f8 <tcp_pcb_remove+0xcc>)
 8008352:	f00b ff6f 	bl	8014234 <iprintf>
 8008356:	e7ed      	b.n	8008334 <tcp_pcb_remove+0x8>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008358:	4b25      	ldr	r3, [pc, #148]	; (80083f0 <tcp_pcb_remove+0xc4>)
 800835a:	f640 0284 	movw	r2, #2180	; 0x884
 800835e:	4927      	ldr	r1, [pc, #156]	; (80083fc <tcp_pcb_remove+0xd0>)
 8008360:	4825      	ldr	r0, [pc, #148]	; (80083f8 <tcp_pcb_remove+0xcc>)
 8008362:	f00b ff67 	bl	8014234 <iprintf>
 8008366:	e7e6      	b.n	8008336 <tcp_pcb_remove+0xa>
  TCP_RMV(pcblist, pcb);
 8008368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836a:	602b      	str	r3, [r5, #0]
 800836c:	e001      	b.n	8008372 <tcp_pcb_remove+0x46>
 800836e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008370:	635a      	str	r2, [r3, #52]	; 0x34
 8008372:	2300      	movs	r3, #0
 8008374:	6363      	str	r3, [r4, #52]	; 0x34
  tcp_pcb_purge(pcb);
 8008376:	4620      	mov	r0, r4
 8008378:	f7ff ff9e 	bl	80082b8 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 800837c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008380:	2b0a      	cmp	r3, #10
 8008382:	d006      	beq.n	8008392 <tcp_pcb_remove+0x66>
 8008384:	2b01      	cmp	r3, #1
 8008386:	d004      	beq.n	8008392 <tcp_pcb_remove+0x66>
      (pcb->flags & TF_ACK_DELAY)) {
 8008388:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
      (pcb->state != LISTEN) &&
 800838c:	f013 0f01 	tst.w	r3, #1
 8008390:	d126      	bne.n	80083e0 <tcp_pcb_remove+0xb4>
  if (pcb->state != LISTEN) {
 8008392:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008396:	2b01      	cmp	r3, #1
 8008398:	d01d      	beq.n	80083d6 <tcp_pcb_remove+0xaa>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800839a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800839e:	b133      	cbz	r3, 80083ae <tcp_pcb_remove+0x82>
 80083a0:	4b13      	ldr	r3, [pc, #76]	; (80083f0 <tcp_pcb_remove+0xc4>)
 80083a2:	f640 0293 	movw	r2, #2195	; 0x893
 80083a6:	4916      	ldr	r1, [pc, #88]	; (8008400 <tcp_pcb_remove+0xd4>)
 80083a8:	4813      	ldr	r0, [pc, #76]	; (80083f8 <tcp_pcb_remove+0xcc>)
 80083aa:	f00b ff43 	bl	8014234 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80083ae:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80083b2:	b133      	cbz	r3, 80083c2 <tcp_pcb_remove+0x96>
 80083b4:	4b0e      	ldr	r3, [pc, #56]	; (80083f0 <tcp_pcb_remove+0xc4>)
 80083b6:	f640 0294 	movw	r2, #2196	; 0x894
 80083ba:	4912      	ldr	r1, [pc, #72]	; (8008404 <tcp_pcb_remove+0xd8>)
 80083bc:	480e      	ldr	r0, [pc, #56]	; (80083f8 <tcp_pcb_remove+0xcc>)
 80083be:	f00b ff39 	bl	8014234 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80083c2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80083c6:	b133      	cbz	r3, 80083d6 <tcp_pcb_remove+0xaa>
 80083c8:	4b09      	ldr	r3, [pc, #36]	; (80083f0 <tcp_pcb_remove+0xc4>)
 80083ca:	f640 0296 	movw	r2, #2198	; 0x896
 80083ce:	490e      	ldr	r1, [pc, #56]	; (8008408 <tcp_pcb_remove+0xdc>)
 80083d0:	4809      	ldr	r0, [pc, #36]	; (80083f8 <tcp_pcb_remove+0xcc>)
 80083d2:	f00b ff2f 	bl	8014234 <iprintf>
  pcb->state = CLOSED;
 80083d6:	2300      	movs	r3, #0
 80083d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  pcb->local_port = 0;
 80083dc:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
 80083de:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 80083e0:	f043 0302 	orr.w	r3, r3, #2
 80083e4:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    tcp_output(pcb);
 80083e8:	4620      	mov	r0, r4
 80083ea:	f003 fac7 	bl	800b97c <tcp_output>
 80083ee:	e7d0      	b.n	8008392 <tcp_pcb_remove+0x66>
 80083f0:	08015e18 	.word	0x08015e18
 80083f4:	08015fc0 	.word	0x08015fc0
 80083f8:	08015418 	.word	0x08015418
 80083fc:	08015fdc 	.word	0x08015fdc
 8008400:	08015ffc 	.word	0x08015ffc
 8008404:	08016014 	.word	0x08016014
 8008408:	08016030 	.word	0x08016030

0800840c <tcp_abandon>:
{
 800840c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008410:	b084      	sub	sp, #16
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008412:	b308      	cbz	r0, 8008458 <tcp_abandon+0x4c>
 8008414:	460d      	mov	r5, r1
 8008416:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008418:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800841c:	2b01      	cmp	r3, #1
 800841e:	d023      	beq.n	8008468 <tcp_abandon+0x5c>
  if (pcb->state == TIME_WAIT) {
 8008420:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008424:	2b0a      	cmp	r3, #10
 8008426:	d027      	beq.n	8008478 <tcp_abandon+0x6c>
    seqno = pcb->snd_nxt;
 8008428:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
    ackno = pcb->rcv_nxt;
 800842c:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    errf = pcb->errf;
 8008430:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
    errf_arg = pcb->callback_arg;
 8008434:	6ba7      	ldr	r7, [r4, #56]	; 0x38
    if (pcb->state == CLOSED) {
 8008436:	2b00      	cmp	r3, #0
 8008438:	d14a      	bne.n	80084d0 <tcp_abandon+0xc4>
      if (pcb->local_port != 0) {
 800843a:	f8b4 a03e 	ldrh.w	sl, [r4, #62]	; 0x3e
 800843e:	f1ba 0f00 	cmp.w	sl, #0
 8008442:	d04f      	beq.n	80084e4 <tcp_abandon+0xd8>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008444:	4b30      	ldr	r3, [pc, #192]	; (8008508 <tcp_abandon+0xfc>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	42a3      	cmp	r3, r4
 800844a:	d01d      	beq.n	8008488 <tcp_abandon+0x7c>
 800844c:	b313      	cbz	r3, 8008494 <tcp_abandon+0x88>
 800844e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008450:	42a2      	cmp	r2, r4
 8008452:	d01d      	beq.n	8008490 <tcp_abandon+0x84>
 8008454:	4613      	mov	r3, r2
 8008456:	e7f9      	b.n	800844c <tcp_abandon+0x40>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008458:	4b2c      	ldr	r3, [pc, #176]	; (800850c <tcp_abandon+0x100>)
 800845a:	f240 223d 	movw	r2, #573	; 0x23d
 800845e:	492c      	ldr	r1, [pc, #176]	; (8008510 <tcp_abandon+0x104>)
 8008460:	482c      	ldr	r0, [pc, #176]	; (8008514 <tcp_abandon+0x108>)
 8008462:	f00b fee7 	bl	8014234 <iprintf>
 8008466:	e030      	b.n	80084ca <tcp_abandon+0xbe>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008468:	4b28      	ldr	r3, [pc, #160]	; (800850c <tcp_abandon+0x100>)
 800846a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800846e:	492a      	ldr	r1, [pc, #168]	; (8008518 <tcp_abandon+0x10c>)
 8008470:	4828      	ldr	r0, [pc, #160]	; (8008514 <tcp_abandon+0x108>)
 8008472:	f00b fedf 	bl	8014234 <iprintf>
 8008476:	e7d3      	b.n	8008420 <tcp_abandon+0x14>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008478:	4621      	mov	r1, r4
 800847a:	4828      	ldr	r0, [pc, #160]	; (800851c <tcp_abandon+0x110>)
 800847c:	f7ff ff56 	bl	800832c <tcp_pcb_remove>
    tcp_free(pcb);
 8008480:	4620      	mov	r0, r4
 8008482:	f7ff fde9 	bl	8008058 <tcp_free>
 8008486:	e020      	b.n	80084ca <tcp_abandon+0xbe>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800848a:	4b1f      	ldr	r3, [pc, #124]	; (8008508 <tcp_abandon+0xfc>)
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	e001      	b.n	8008494 <tcp_abandon+0x88>
 8008490:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008492:	635a      	str	r2, [r3, #52]	; 0x34
 8008494:	2500      	movs	r5, #0
 8008496:	6365      	str	r5, [r4, #52]	; 0x34
    u16_t local_port = 0;
 8008498:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 800849a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800849e:	b108      	cbz	r0, 80084a4 <tcp_abandon+0x98>
      tcp_segs_free(pcb->unacked);
 80084a0:	f7ff fe7f 	bl	80081a2 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80084a4:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80084a8:	b108      	cbz	r0, 80084ae <tcp_abandon+0xa2>
      tcp_segs_free(pcb->unsent);
 80084aa:	f7ff fe7a 	bl	80081a2 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80084ae:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80084b2:	b108      	cbz	r0, 80084b8 <tcp_abandon+0xac>
      tcp_segs_free(pcb->ooseq);
 80084b4:	f7ff fe75 	bl	80081a2 <tcp_segs_free>
    if (send_rst) {
 80084b8:	b9b5      	cbnz	r5, 80084e8 <tcp_abandon+0xdc>
    tcp_free(pcb);
 80084ba:	4620      	mov	r0, r4
 80084bc:	f7ff fdcc 	bl	8008058 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80084c0:	b11e      	cbz	r6, 80084ca <tcp_abandon+0xbe>
 80084c2:	f06f 010c 	mvn.w	r1, #12
 80084c6:	4638      	mov	r0, r7
 80084c8:	47b0      	blx	r6
}
 80084ca:	b004      	add	sp, #16
 80084cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 80084d0:	f8b4 a03e 	ldrh.w	sl, [r4, #62]	; 0x3e
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80084d4:	4621      	mov	r1, r4
 80084d6:	4812      	ldr	r0, [pc, #72]	; (8008520 <tcp_abandon+0x114>)
 80084d8:	f7ff ff28 	bl	800832c <tcp_pcb_remove>
 80084dc:	4b11      	ldr	r3, [pc, #68]	; (8008524 <tcp_abandon+0x118>)
 80084de:	2201      	movs	r2, #1
 80084e0:	701a      	strb	r2, [r3, #0]
 80084e2:	e7da      	b.n	800849a <tcp_abandon+0x8e>
    int send_rst = 0;
 80084e4:	2500      	movs	r5, #0
 80084e6:	e7d8      	b.n	800849a <tcp_abandon+0x8e>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80084e8:	f104 0318 	add.w	r3, r4, #24
 80084ec:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 80084f0:	9202      	str	r2, [sp, #8]
 80084f2:	f8cd a004 	str.w	sl, [sp, #4]
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	4623      	mov	r3, r4
 80084fa:	464a      	mov	r2, r9
 80084fc:	4641      	mov	r1, r8
 80084fe:	4620      	mov	r0, r4
 8008500:	f003 f9b2 	bl	800b868 <tcp_rst>
 8008504:	e7d9      	b.n	80084ba <tcp_abandon+0xae>
 8008506:	bf00      	nop
 8008508:	20007b2c 	.word	0x20007b2c
 800850c:	08015e18 	.word	0x08015e18
 8008510:	08016048 	.word	0x08016048
 8008514:	08015418 	.word	0x08015418
 8008518:	08016064 	.word	0x08016064
 800851c:	20007b30 	.word	0x20007b30
 8008520:	20007b20 	.word	0x20007b20
 8008524:	20007b1c 	.word	0x20007b1c

08008528 <tcp_abort>:
{
 8008528:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 800852a:	2101      	movs	r1, #1
 800852c:	f7ff ff6e 	bl	800840c <tcp_abandon>
}
 8008530:	bd08      	pop	{r3, pc}
	...

08008534 <tcp_kill_timewait>:
{
 8008534:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008536:	4b0a      	ldr	r3, [pc, #40]	; (8008560 <tcp_kill_timewait+0x2c>)
 8008538:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 800853a:	2400      	movs	r4, #0
  inactive = NULL;
 800853c:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800853e:	e000      	b.n	8008542 <tcp_kill_timewait+0xe>
 8008540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008542:	b143      	cbz	r3, 8008556 <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008544:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8008546:	4a07      	ldr	r2, [pc, #28]	; (8008564 <tcp_kill_timewait+0x30>)
 8008548:	6812      	ldr	r2, [r2, #0]
 800854a:	1a52      	subs	r2, r2, r1
 800854c:	42a2      	cmp	r2, r4
 800854e:	d3f7      	bcc.n	8008540 <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 8008550:	4614      	mov	r4, r2
      inactive = pcb;
 8008552:	4618      	mov	r0, r3
 8008554:	e7f4      	b.n	8008540 <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 8008556:	b108      	cbz	r0, 800855c <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 8008558:	f7ff ffe6 	bl	8008528 <tcp_abort>
}
 800855c:	bd10      	pop	{r4, pc}
 800855e:	bf00      	nop
 8008560:	20007b30 	.word	0x20007b30
 8008564:	20007b24 	.word	0x20007b24

08008568 <tcp_kill_prio>:
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008568:	f010 0f80 	tst.w	r0, #128	; 0x80
 800856c:	d101      	bne.n	8008572 <tcp_kill_prio+0xa>
  if (mprio == 0) {
 800856e:	b908      	cbnz	r0, 8008574 <tcp_kill_prio+0xc>
 8008570:	4770      	bx	lr
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008572:	207f      	movs	r0, #127	; 0x7f
{
 8008574:	b570      	push	{r4, r5, r6, lr}
  mprio--;
 8008576:	3801      	subs	r0, #1
 8008578:	b2c2      	uxtb	r2, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800857a:	4b0e      	ldr	r3, [pc, #56]	; (80085b4 <tcp_kill_prio+0x4c>)
 800857c:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 800857e:	2400      	movs	r4, #0
  inactive = NULL;
 8008580:	4620      	mov	r0, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008582:	e006      	b.n	8008592 <tcp_kill_prio+0x2a>
      inactivity = tcp_ticks - pcb->tmr;
 8008584:	4a0c      	ldr	r2, [pc, #48]	; (80085b8 <tcp_kill_prio+0x50>)
 8008586:	6812      	ldr	r2, [r2, #0]
 8008588:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800858a:	1b14      	subs	r4, r2, r4
      mprio      = pcb->prio;
 800858c:	460a      	mov	r2, r1
      inactive   = pcb;
 800858e:	4618      	mov	r0, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008592:	b15b      	cbz	r3, 80085ac <tcp_kill_prio+0x44>
    if ((pcb->prio < mprio) ||
 8008594:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 8008598:	4291      	cmp	r1, r2
 800859a:	d3f3      	bcc.n	8008584 <tcp_kill_prio+0x1c>
 800859c:	d1f8      	bne.n	8008590 <tcp_kill_prio+0x28>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800859e:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 80085a0:	4d05      	ldr	r5, [pc, #20]	; (80085b8 <tcp_kill_prio+0x50>)
 80085a2:	682d      	ldr	r5, [r5, #0]
 80085a4:	1bad      	subs	r5, r5, r6
 80085a6:	42a5      	cmp	r5, r4
 80085a8:	d3f2      	bcc.n	8008590 <tcp_kill_prio+0x28>
 80085aa:	e7eb      	b.n	8008584 <tcp_kill_prio+0x1c>
  if (inactive != NULL) {
 80085ac:	b108      	cbz	r0, 80085b2 <tcp_kill_prio+0x4a>
    tcp_abort(inactive);
 80085ae:	f7ff ffbb 	bl	8008528 <tcp_abort>
}
 80085b2:	bd70      	pop	{r4, r5, r6, pc}
 80085b4:	20007b20 	.word	0x20007b20
 80085b8:	20007b24 	.word	0x20007b24

080085bc <tcp_netif_ip_addr_changed_pcblist>:
{
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80085c0:	4605      	mov	r5, r0
 80085c2:	bb48      	cbnz	r0, 8008618 <tcp_netif_ip_addr_changed_pcblist+0x5c>
 80085c4:	4b1e      	ldr	r3, [pc, #120]	; (8008640 <tcp_netif_ip_addr_changed_pcblist+0x84>)
 80085c6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80085ca:	491e      	ldr	r1, [pc, #120]	; (8008644 <tcp_netif_ip_addr_changed_pcblist+0x88>)
 80085cc:	481e      	ldr	r0, [pc, #120]	; (8008648 <tcp_netif_ip_addr_changed_pcblist+0x8c>)
 80085ce:	f00b fe31 	bl	8014234 <iprintf>
 80085d2:	e021      	b.n	8008618 <tcp_netif_ip_addr_changed_pcblist+0x5c>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80085d4:	6862      	ldr	r2, [r4, #4]
 80085d6:	686b      	ldr	r3, [r5, #4]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d001      	beq.n	80085e0 <tcp_netif_ip_addr_changed_pcblist+0x24>
 80085dc:	2300      	movs	r3, #0
 80085de:	e019      	b.n	8008614 <tcp_netif_ip_addr_changed_pcblist+0x58>
 80085e0:	68a2      	ldr	r2, [r4, #8]
 80085e2:	68ab      	ldr	r3, [r5, #8]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d001      	beq.n	80085ec <tcp_netif_ip_addr_changed_pcblist+0x30>
 80085e8:	2300      	movs	r3, #0
 80085ea:	e013      	b.n	8008614 <tcp_netif_ip_addr_changed_pcblist+0x58>
 80085ec:	68e2      	ldr	r2, [r4, #12]
 80085ee:	68eb      	ldr	r3, [r5, #12]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d001      	beq.n	80085f8 <tcp_netif_ip_addr_changed_pcblist+0x3c>
 80085f4:	2300      	movs	r3, #0
 80085f6:	e00d      	b.n	8008614 <tcp_netif_ip_addr_changed_pcblist+0x58>
 80085f8:	7c22      	ldrb	r2, [r4, #16]
 80085fa:	7c2b      	ldrb	r3, [r5, #16]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d001      	beq.n	8008604 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008600:	2300      	movs	r3, #0
 8008602:	e007      	b.n	8008614 <tcp_netif_ip_addr_changed_pcblist+0x58>
 8008604:	2301      	movs	r3, #1
 8008606:	e005      	b.n	8008614 <tcp_netif_ip_addr_changed_pcblist+0x58>
 8008608:	6823      	ldr	r3, [r4, #0]
 800860a:	682a      	ldr	r2, [r5, #0]
 800860c:	4293      	cmp	r3, r2
 800860e:	bf14      	ite	ne
 8008610:	2300      	movne	r3, #0
 8008612:	2301      	moveq	r3, #1
 8008614:	b96b      	cbnz	r3, 8008632 <tcp_netif_ip_addr_changed_pcblist+0x76>
      pcb = pcb->next;
 8008616:	6b64      	ldr	r4, [r4, #52]	; 0x34
  while (pcb != NULL) {
 8008618:	b18c      	cbz	r4, 800863e <tcp_netif_ip_addr_changed_pcblist+0x82>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800861a:	7d23      	ldrb	r3, [r4, #20]
 800861c:	7d2a      	ldrb	r2, [r5, #20]
 800861e:	4293      	cmp	r3, r2
 8008620:	d1f9      	bne.n	8008616 <tcp_netif_ip_addr_changed_pcblist+0x5a>
 8008622:	2b06      	cmp	r3, #6
 8008624:	d1f0      	bne.n	8008608 <tcp_netif_ip_addr_changed_pcblist+0x4c>
 8008626:	6822      	ldr	r2, [r4, #0]
 8008628:	682b      	ldr	r3, [r5, #0]
 800862a:	429a      	cmp	r2, r3
 800862c:	d0d2      	beq.n	80085d4 <tcp_netif_ip_addr_changed_pcblist+0x18>
 800862e:	2300      	movs	r3, #0
 8008630:	e7f0      	b.n	8008614 <tcp_netif_ip_addr_changed_pcblist+0x58>
      struct tcp_pcb *next = pcb->next;
 8008632:	6b66      	ldr	r6, [r4, #52]	; 0x34
      tcp_abort(pcb);
 8008634:	4620      	mov	r0, r4
 8008636:	f7ff ff77 	bl	8008528 <tcp_abort>
      pcb = next;
 800863a:	4634      	mov	r4, r6
 800863c:	e7ec      	b.n	8008618 <tcp_netif_ip_addr_changed_pcblist+0x5c>
}
 800863e:	bd70      	pop	{r4, r5, r6, pc}
 8008640:	08015e18 	.word	0x08015e18
 8008644:	08016098 	.word	0x08016098
 8008648:	08015418 	.word	0x08015418

0800864c <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 800864c:	2800      	cmp	r0, #0
 800864e:	f000 8099 	beq.w	8008784 <tcp_netif_ip_addr_changed+0x138>
{
 8008652:	b538      	push	{r3, r4, r5, lr}
 8008654:	460d      	mov	r5, r1
 8008656:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 8008658:	7d03      	ldrb	r3, [r0, #20]
 800865a:	2b06      	cmp	r3, #6
 800865c:	d004      	beq.n	8008668 <tcp_netif_ip_addr_changed+0x1c>
 800865e:	b1b8      	cbz	r0, 8008690 <tcp_netif_ip_addr_changed+0x44>
 8008660:	6803      	ldr	r3, [r0, #0]
 8008662:	b9bb      	cbnz	r3, 8008694 <tcp_netif_ip_addr_changed+0x48>
 8008664:	b9c3      	cbnz	r3, 8008698 <tcp_netif_ip_addr_changed+0x4c>
}
 8008666:	bd38      	pop	{r3, r4, r5, pc}
  if (!ip_addr_isany(old_addr)) {
 8008668:	b150      	cbz	r0, 8008680 <tcp_netif_ip_addr_changed+0x34>
 800866a:	6803      	ldr	r3, [r0, #0]
 800866c:	b953      	cbnz	r3, 8008684 <tcp_netif_ip_addr_changed+0x38>
 800866e:	6843      	ldr	r3, [r0, #4]
 8008670:	b953      	cbnz	r3, 8008688 <tcp_netif_ip_addr_changed+0x3c>
 8008672:	6883      	ldr	r3, [r0, #8]
 8008674:	b953      	cbnz	r3, 800868c <tcp_netif_ip_addr_changed+0x40>
 8008676:	68c3      	ldr	r3, [r0, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d0f3      	beq.n	8008664 <tcp_netif_ip_addr_changed+0x18>
 800867c:	2301      	movs	r3, #1
 800867e:	e7f1      	b.n	8008664 <tcp_netif_ip_addr_changed+0x18>
 8008680:	2300      	movs	r3, #0
 8008682:	e7ef      	b.n	8008664 <tcp_netif_ip_addr_changed+0x18>
 8008684:	2301      	movs	r3, #1
 8008686:	e7ed      	b.n	8008664 <tcp_netif_ip_addr_changed+0x18>
 8008688:	2301      	movs	r3, #1
 800868a:	e7eb      	b.n	8008664 <tcp_netif_ip_addr_changed+0x18>
 800868c:	2301      	movs	r3, #1
 800868e:	e7e9      	b.n	8008664 <tcp_netif_ip_addr_changed+0x18>
 8008690:	2300      	movs	r3, #0
 8008692:	e7e7      	b.n	8008664 <tcp_netif_ip_addr_changed+0x18>
 8008694:	2301      	movs	r3, #1
 8008696:	e7e5      	b.n	8008664 <tcp_netif_ip_addr_changed+0x18>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008698:	4b3b      	ldr	r3, [pc, #236]	; (8008788 <tcp_netif_ip_addr_changed+0x13c>)
 800869a:	6819      	ldr	r1, [r3, #0]
 800869c:	4620      	mov	r0, r4
 800869e:	f7ff ff8d 	bl	80085bc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80086a2:	4b3a      	ldr	r3, [pc, #232]	; (800878c <tcp_netif_ip_addr_changed+0x140>)
 80086a4:	6819      	ldr	r1, [r3, #0]
 80086a6:	4620      	mov	r0, r4
 80086a8:	f7ff ff88 	bl	80085bc <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 80086ac:	2d00      	cmp	r5, #0
 80086ae:	d0da      	beq.n	8008666 <tcp_netif_ip_addr_changed+0x1a>
 80086b0:	7d2b      	ldrb	r3, [r5, #20]
 80086b2:	2b06      	cmp	r3, #6
 80086b4:	d007      	beq.n	80086c6 <tcp_netif_ip_addr_changed+0x7a>
 80086b6:	b1d5      	cbz	r5, 80086ee <tcp_netif_ip_addr_changed+0xa2>
 80086b8:	682b      	ldr	r3, [r5, #0]
 80086ba:	b9d3      	cbnz	r3, 80086f2 <tcp_netif_ip_addr_changed+0xa6>
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d0d2      	beq.n	8008666 <tcp_netif_ip_addr_changed+0x1a>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80086c0:	4b33      	ldr	r3, [pc, #204]	; (8008790 <tcp_netif_ip_addr_changed+0x144>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	e042      	b.n	800874c <tcp_netif_ip_addr_changed+0x100>
    if (!ip_addr_isany(new_addr)) {
 80086c6:	b155      	cbz	r5, 80086de <tcp_netif_ip_addr_changed+0x92>
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	b953      	cbnz	r3, 80086e2 <tcp_netif_ip_addr_changed+0x96>
 80086cc:	686b      	ldr	r3, [r5, #4]
 80086ce:	b953      	cbnz	r3, 80086e6 <tcp_netif_ip_addr_changed+0x9a>
 80086d0:	68ab      	ldr	r3, [r5, #8]
 80086d2:	b953      	cbnz	r3, 80086ea <tcp_netif_ip_addr_changed+0x9e>
 80086d4:	68eb      	ldr	r3, [r5, #12]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0f0      	beq.n	80086bc <tcp_netif_ip_addr_changed+0x70>
 80086da:	2301      	movs	r3, #1
 80086dc:	e7ee      	b.n	80086bc <tcp_netif_ip_addr_changed+0x70>
 80086de:	2300      	movs	r3, #0
 80086e0:	e7ec      	b.n	80086bc <tcp_netif_ip_addr_changed+0x70>
 80086e2:	2301      	movs	r3, #1
 80086e4:	e7ea      	b.n	80086bc <tcp_netif_ip_addr_changed+0x70>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e7e8      	b.n	80086bc <tcp_netif_ip_addr_changed+0x70>
 80086ea:	2301      	movs	r3, #1
 80086ec:	e7e6      	b.n	80086bc <tcp_netif_ip_addr_changed+0x70>
 80086ee:	2300      	movs	r3, #0
 80086f0:	e7e4      	b.n	80086bc <tcp_netif_ip_addr_changed+0x70>
 80086f2:	2301      	movs	r3, #1
 80086f4:	e7e2      	b.n	80086bc <tcp_netif_ip_addr_changed+0x70>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80086f6:	6819      	ldr	r1, [r3, #0]
 80086f8:	6822      	ldr	r2, [r4, #0]
 80086fa:	4291      	cmp	r1, r2
 80086fc:	d001      	beq.n	8008702 <tcp_netif_ip_addr_changed+0xb6>
 80086fe:	2200      	movs	r2, #0
 8008700:	e032      	b.n	8008768 <tcp_netif_ip_addr_changed+0x11c>
 8008702:	6859      	ldr	r1, [r3, #4]
 8008704:	6862      	ldr	r2, [r4, #4]
 8008706:	4291      	cmp	r1, r2
 8008708:	d001      	beq.n	800870e <tcp_netif_ip_addr_changed+0xc2>
 800870a:	2200      	movs	r2, #0
 800870c:	e02c      	b.n	8008768 <tcp_netif_ip_addr_changed+0x11c>
 800870e:	6899      	ldr	r1, [r3, #8]
 8008710:	68a2      	ldr	r2, [r4, #8]
 8008712:	4291      	cmp	r1, r2
 8008714:	d001      	beq.n	800871a <tcp_netif_ip_addr_changed+0xce>
 8008716:	2200      	movs	r2, #0
 8008718:	e026      	b.n	8008768 <tcp_netif_ip_addr_changed+0x11c>
 800871a:	68d9      	ldr	r1, [r3, #12]
 800871c:	68e2      	ldr	r2, [r4, #12]
 800871e:	4291      	cmp	r1, r2
 8008720:	d001      	beq.n	8008726 <tcp_netif_ip_addr_changed+0xda>
 8008722:	2200      	movs	r2, #0
 8008724:	e020      	b.n	8008768 <tcp_netif_ip_addr_changed+0x11c>
 8008726:	7c19      	ldrb	r1, [r3, #16]
 8008728:	7c22      	ldrb	r2, [r4, #16]
 800872a:	4291      	cmp	r1, r2
 800872c:	d001      	beq.n	8008732 <tcp_netif_ip_addr_changed+0xe6>
 800872e:	2200      	movs	r2, #0
 8008730:	e01a      	b.n	8008768 <tcp_netif_ip_addr_changed+0x11c>
 8008732:	2201      	movs	r2, #1
 8008734:	e018      	b.n	8008768 <tcp_netif_ip_addr_changed+0x11c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008736:	682a      	ldr	r2, [r5, #0]
 8008738:	601a      	str	r2, [r3, #0]
 800873a:	686a      	ldr	r2, [r5, #4]
 800873c:	605a      	str	r2, [r3, #4]
 800873e:	68aa      	ldr	r2, [r5, #8]
 8008740:	609a      	str	r2, [r3, #8]
 8008742:	68ea      	ldr	r2, [r5, #12]
 8008744:	60da      	str	r2, [r3, #12]
 8008746:	7c2a      	ldrb	r2, [r5, #16]
 8008748:	741a      	strb	r2, [r3, #16]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800874a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800874c:	2b00      	cmp	r3, #0
 800874e:	d08a      	beq.n	8008666 <tcp_netif_ip_addr_changed+0x1a>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008750:	7d1a      	ldrb	r2, [r3, #20]
 8008752:	7d21      	ldrb	r1, [r4, #20]
 8008754:	428a      	cmp	r2, r1
 8008756:	d1f8      	bne.n	800874a <tcp_netif_ip_addr_changed+0xfe>
 8008758:	2a06      	cmp	r2, #6
 800875a:	d0cc      	beq.n	80086f6 <tcp_netif_ip_addr_changed+0xaa>
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	6821      	ldr	r1, [r4, #0]
 8008760:	428a      	cmp	r2, r1
 8008762:	bf14      	ite	ne
 8008764:	2200      	movne	r2, #0
 8008766:	2201      	moveq	r2, #1
 8008768:	2a00      	cmp	r2, #0
 800876a:	d0ee      	beq.n	800874a <tcp_netif_ip_addr_changed+0xfe>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800876c:	7d2a      	ldrb	r2, [r5, #20]
 800876e:	751a      	strb	r2, [r3, #20]
 8008770:	2a06      	cmp	r2, #6
 8008772:	d0e0      	beq.n	8008736 <tcp_netif_ip_addr_changed+0xea>
 8008774:	682a      	ldr	r2, [r5, #0]
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	2200      	movs	r2, #0
 800877a:	60da      	str	r2, [r3, #12]
 800877c:	609a      	str	r2, [r3, #8]
 800877e:	605a      	str	r2, [r3, #4]
 8008780:	741a      	strb	r2, [r3, #16]
 8008782:	e7e2      	b.n	800874a <tcp_netif_ip_addr_changed+0xfe>
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	20007b20 	.word	0x20007b20
 800878c:	20007b2c 	.word	0x20007b2c
 8008790:	20007b28 	.word	0x20007b28

08008794 <tcp_kill_state>:
{
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008798:	f1a0 0308 	sub.w	r3, r0, #8
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d804      	bhi.n	80087ac <tcp_kill_state+0x18>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80087a2:	4b10      	ldr	r3, [pc, #64]	; (80087e4 <tcp_kill_state+0x50>)
 80087a4:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 80087a6:	2100      	movs	r1, #0
  inactive = NULL;
 80087a8:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80087aa:	e008      	b.n	80087be <tcp_kill_state+0x2a>
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80087ac:	4b0e      	ldr	r3, [pc, #56]	; (80087e8 <tcp_kill_state+0x54>)
 80087ae:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80087b2:	490e      	ldr	r1, [pc, #56]	; (80087ec <tcp_kill_state+0x58>)
 80087b4:	480e      	ldr	r0, [pc, #56]	; (80087f0 <tcp_kill_state+0x5c>)
 80087b6:	f00b fd3d 	bl	8014234 <iprintf>
 80087ba:	e7f2      	b.n	80087a2 <tcp_kill_state+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80087bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087be:	b163      	cbz	r3, 80087da <tcp_kill_state+0x46>
    if (pcb->state == state) {
 80087c0:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80087c4:	42a2      	cmp	r2, r4
 80087c6:	d1f9      	bne.n	80087bc <tcp_kill_state+0x28>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80087c8:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 80087ca:	4a0a      	ldr	r2, [pc, #40]	; (80087f4 <tcp_kill_state+0x60>)
 80087cc:	6812      	ldr	r2, [r2, #0]
 80087ce:	1b52      	subs	r2, r2, r5
 80087d0:	428a      	cmp	r2, r1
 80087d2:	d3f3      	bcc.n	80087bc <tcp_kill_state+0x28>
        inactivity = tcp_ticks - pcb->tmr;
 80087d4:	4611      	mov	r1, r2
        inactive = pcb;
 80087d6:	4618      	mov	r0, r3
 80087d8:	e7f0      	b.n	80087bc <tcp_kill_state+0x28>
  if (inactive != NULL) {
 80087da:	b110      	cbz	r0, 80087e2 <tcp_kill_state+0x4e>
    tcp_abandon(inactive, 0);
 80087dc:	2100      	movs	r1, #0
 80087de:	f7ff fe15 	bl	800840c <tcp_abandon>
}
 80087e2:	bd38      	pop	{r3, r4, r5, pc}
 80087e4:	20007b20 	.word	0x20007b20
 80087e8:	08015e18 	.word	0x08015e18
 80087ec:	080160cc 	.word	0x080160cc
 80087f0:	08015418 	.word	0x08015418
 80087f4:	20007b24 	.word	0x20007b24

080087f8 <tcp_alloc>:
{
 80087f8:	b538      	push	{r3, r4, r5, lr}
 80087fa:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80087fc:	2001      	movs	r0, #1
 80087fe:	f7fe fb0b 	bl	8006e18 <memp_malloc>
  if (pcb == NULL) {
 8008802:	4604      	mov	r4, r0
 8008804:	b3a8      	cbz	r0, 8008872 <tcp_alloc+0x7a>
  if (pcb != NULL) {
 8008806:	b394      	cbz	r4, 800886e <tcp_alloc+0x76>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008808:	22c4      	movs	r2, #196	; 0xc4
 800880a:	2100      	movs	r1, #0
 800880c:	4620      	mov	r0, r4
 800880e:	f00b fd09 	bl	8014224 <memset>
    pcb->prio = prio;
 8008812:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    pcb->snd_buf = TCP_SND_BUF;
 8008816:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800881a:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800881e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008822:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8008826:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    pcb->ttl = TCP_TTL;
 800882a:	22ff      	movs	r2, #255	; 0xff
 800882c:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    pcb->mss = INITIAL_MSS;
 8008830:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008834:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008838:	2206      	movs	r2, #6
 800883a:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800883e:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
    pcb->rtime = -1;
 8008842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008846:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
    pcb->cwnd = 1;
 800884a:	2201      	movs	r2, #1
 800884c:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
    pcb->tmr = tcp_ticks;
 8008850:	4a1a      	ldr	r2, [pc, #104]	; (80088bc <tcp_alloc+0xc4>)
 8008852:	6812      	ldr	r2, [r2, #0]
 8008854:	64a2      	str	r2, [r4, #72]	; 0x48
    pcb->last_timer = tcp_timer_ctr;
 8008856:	4a1a      	ldr	r2, [pc, #104]	; (80088c0 <tcp_alloc+0xc8>)
 8008858:	7812      	ldrb	r2, [r2, #0]
 800885a:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
    pcb->ssthresh = TCP_SND_BUF;
 800885e:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
    pcb->recv = tcp_recv_null;
 8008862:	4b18      	ldr	r3, [pc, #96]	; (80088c4 <tcp_alloc+0xcc>)
 8008864:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008868:	4b17      	ldr	r3, [pc, #92]	; (80088c8 <tcp_alloc+0xd0>)
 800886a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
}
 800886e:	4620      	mov	r0, r4
 8008870:	bd38      	pop	{r3, r4, r5, pc}
    tcp_handle_closepend();
 8008872:	f7ff fbcd 	bl	8008010 <tcp_handle_closepend>
    tcp_kill_timewait();
 8008876:	f7ff fe5d 	bl	8008534 <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800887a:	2001      	movs	r0, #1
 800887c:	f7fe facc 	bl	8006e18 <memp_malloc>
    if (pcb == NULL) {
 8008880:	4604      	mov	r4, r0
 8008882:	2800      	cmp	r0, #0
 8008884:	d1bf      	bne.n	8008806 <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 8008886:	2009      	movs	r0, #9
 8008888:	f7ff ff84 	bl	8008794 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800888c:	2001      	movs	r0, #1
 800888e:	f7fe fac3 	bl	8006e18 <memp_malloc>
      if (pcb == NULL) {
 8008892:	4604      	mov	r4, r0
 8008894:	2800      	cmp	r0, #0
 8008896:	d1b6      	bne.n	8008806 <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 8008898:	2008      	movs	r0, #8
 800889a:	f7ff ff7b 	bl	8008794 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800889e:	2001      	movs	r0, #1
 80088a0:	f7fe faba 	bl	8006e18 <memp_malloc>
        if (pcb == NULL) {
 80088a4:	4604      	mov	r4, r0
 80088a6:	2800      	cmp	r0, #0
 80088a8:	d1ad      	bne.n	8008806 <tcp_alloc+0xe>
          tcp_kill_prio(prio);
 80088aa:	4628      	mov	r0, r5
 80088ac:	f7ff fe5c 	bl	8008568 <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80088b0:	2001      	movs	r0, #1
 80088b2:	f7fe fab1 	bl	8006e18 <memp_malloc>
 80088b6:	4604      	mov	r4, r0
          if (pcb != NULL) {
 80088b8:	e7a5      	b.n	8008806 <tcp_alloc+0xe>
 80088ba:	bf00      	nop
 80088bc:	20007b24 	.word	0x20007b24
 80088c0:	2000063a 	.word	0x2000063a
 80088c4:	08008a69 	.word	0x08008a69
 80088c8:	006ddd00 	.word	0x006ddd00

080088cc <tcp_close_shutdown>:
{
 80088cc:	b530      	push	{r4, r5, lr}
 80088ce:	b085      	sub	sp, #20
 80088d0:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80088d2:	4604      	mov	r4, r0
 80088d4:	b190      	cbz	r0, 80088fc <tcp_close_shutdown+0x30>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80088d6:	b12d      	cbz	r5, 80088e4 <tcp_close_shutdown+0x18>
 80088d8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80088dc:	2b04      	cmp	r3, #4
 80088de:	d015      	beq.n	800890c <tcp_close_shutdown+0x40>
 80088e0:	2b07      	cmp	r3, #7
 80088e2:	d013      	beq.n	800890c <tcp_close_shutdown+0x40>
  switch (pcb->state) {
 80088e4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d071      	beq.n	80089d0 <tcp_close_shutdown+0x104>
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d07b      	beq.n	80089e8 <tcp_close_shutdown+0x11c>
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d054      	beq.n	800899e <tcp_close_shutdown+0xd2>
      return tcp_close_shutdown_fin(pcb);
 80088f4:	4620      	mov	r0, r4
 80088f6:	f7ff fb43 	bl	8007f80 <tcp_close_shutdown_fin>
 80088fa:	e04b      	b.n	8008994 <tcp_close_shutdown+0xc8>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80088fc:	4b40      	ldr	r3, [pc, #256]	; (8008a00 <tcp_close_shutdown+0x134>)
 80088fe:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008902:	4940      	ldr	r1, [pc, #256]	; (8008a04 <tcp_close_shutdown+0x138>)
 8008904:	4840      	ldr	r0, [pc, #256]	; (8008a08 <tcp_close_shutdown+0x13c>)
 8008906:	f00b fc95 	bl	8014234 <iprintf>
 800890a:	e7e4      	b.n	80088d6 <tcp_close_shutdown+0xa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800890c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8008910:	b1fb      	cbz	r3, 8008952 <tcp_close_shutdown+0x86>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008912:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8008916:	f013 0f10 	tst.w	r3, #16
 800891a:	d020      	beq.n	800895e <tcp_close_shutdown+0x92>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800891c:	f104 0318 	add.w	r3, r4, #24
 8008920:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8008924:	9202      	str	r2, [sp, #8]
 8008926:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8008928:	9201      	str	r2, [sp, #4]
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	4623      	mov	r3, r4
 800892e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008930:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8008932:	4620      	mov	r0, r4
 8008934:	f002 ff98 	bl	800b868 <tcp_rst>
      tcp_pcb_purge(pcb);
 8008938:	4620      	mov	r0, r4
 800893a:	f7ff fcbd 	bl	80082b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800893e:	4b33      	ldr	r3, [pc, #204]	; (8008a0c <tcp_close_shutdown+0x140>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	42a3      	cmp	r3, r4
 8008944:	d013      	beq.n	800896e <tcp_close_shutdown+0xa2>
 8008946:	b1c3      	cbz	r3, 800897a <tcp_close_shutdown+0xae>
 8008948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800894a:	42a2      	cmp	r2, r4
 800894c:	d013      	beq.n	8008976 <tcp_close_shutdown+0xaa>
 800894e:	4613      	mov	r3, r2
 8008950:	e7f9      	b.n	8008946 <tcp_close_shutdown+0x7a>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008952:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8008956:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800895a:	d0c3      	beq.n	80088e4 <tcp_close_shutdown+0x18>
 800895c:	e7d9      	b.n	8008912 <tcp_close_shutdown+0x46>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800895e:	4b28      	ldr	r3, [pc, #160]	; (8008a00 <tcp_close_shutdown+0x134>)
 8008960:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008964:	492a      	ldr	r1, [pc, #168]	; (8008a10 <tcp_close_shutdown+0x144>)
 8008966:	4828      	ldr	r0, [pc, #160]	; (8008a08 <tcp_close_shutdown+0x13c>)
 8008968:	f00b fc64 	bl	8014234 <iprintf>
 800896c:	e7d6      	b.n	800891c <tcp_close_shutdown+0x50>
      TCP_RMV_ACTIVE(pcb);
 800896e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008970:	4b26      	ldr	r3, [pc, #152]	; (8008a0c <tcp_close_shutdown+0x140>)
 8008972:	601a      	str	r2, [r3, #0]
 8008974:	e001      	b.n	800897a <tcp_close_shutdown+0xae>
 8008976:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008978:	635a      	str	r2, [r3, #52]	; 0x34
 800897a:	2300      	movs	r3, #0
 800897c:	6363      	str	r3, [r4, #52]	; 0x34
 800897e:	4b25      	ldr	r3, [pc, #148]	; (8008a14 <tcp_close_shutdown+0x148>)
 8008980:	2201      	movs	r2, #1
 8008982:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 8008984:	4b24      	ldr	r3, [pc, #144]	; (8008a18 <tcp_close_shutdown+0x14c>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	42a3      	cmp	r3, r4
 800898a:	d005      	beq.n	8008998 <tcp_close_shutdown+0xcc>
        tcp_free(pcb);
 800898c:	4620      	mov	r0, r4
 800898e:	f7ff fb63 	bl	8008058 <tcp_free>
      return ERR_OK;
 8008992:	2000      	movs	r0, #0
}
 8008994:	b005      	add	sp, #20
 8008996:	bd30      	pop	{r4, r5, pc}
        tcp_trigger_input_pcb_close();
 8008998:	f002 fa70 	bl	800ae7c <tcp_trigger_input_pcb_close>
 800899c:	e7f9      	b.n	8008992 <tcp_close_shutdown+0xc6>
      if (pcb->local_port != 0) {
 800899e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80089a0:	b18b      	cbz	r3, 80089c6 <tcp_close_shutdown+0xfa>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80089a2:	4b1e      	ldr	r3, [pc, #120]	; (8008a1c <tcp_close_shutdown+0x150>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	42a3      	cmp	r3, r4
 80089a8:	d005      	beq.n	80089b6 <tcp_close_shutdown+0xea>
 80089aa:	b153      	cbz	r3, 80089c2 <tcp_close_shutdown+0xf6>
 80089ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089ae:	42a2      	cmp	r2, r4
 80089b0:	d005      	beq.n	80089be <tcp_close_shutdown+0xf2>
 80089b2:	4613      	mov	r3, r2
 80089b4:	e7f9      	b.n	80089aa <tcp_close_shutdown+0xde>
 80089b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089b8:	4b18      	ldr	r3, [pc, #96]	; (8008a1c <tcp_close_shutdown+0x150>)
 80089ba:	601a      	str	r2, [r3, #0]
 80089bc:	e001      	b.n	80089c2 <tcp_close_shutdown+0xf6>
 80089be:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80089c0:	635a      	str	r2, [r3, #52]	; 0x34
 80089c2:	2300      	movs	r3, #0
 80089c4:	6363      	str	r3, [r4, #52]	; 0x34
      tcp_free(pcb);
 80089c6:	4620      	mov	r0, r4
 80089c8:	f7ff fb46 	bl	8008058 <tcp_free>
  return ERR_OK;
 80089cc:	2000      	movs	r0, #0
      break;
 80089ce:	e7e1      	b.n	8008994 <tcp_close_shutdown+0xc8>
      tcp_listen_closed(pcb);
 80089d0:	4620      	mov	r0, r4
 80089d2:	f7ff fa8f 	bl	8007ef4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80089d6:	4621      	mov	r1, r4
 80089d8:	4811      	ldr	r0, [pc, #68]	; (8008a20 <tcp_close_shutdown+0x154>)
 80089da:	f7ff fca7 	bl	800832c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80089de:	4620      	mov	r0, r4
 80089e0:	f7ff fab6 	bl	8007f50 <tcp_free_listen>
  return ERR_OK;
 80089e4:	2000      	movs	r0, #0
      break;
 80089e6:	e7d5      	b.n	8008994 <tcp_close_shutdown+0xc8>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80089e8:	4621      	mov	r1, r4
 80089ea:	4808      	ldr	r0, [pc, #32]	; (8008a0c <tcp_close_shutdown+0x140>)
 80089ec:	f7ff fc9e 	bl	800832c <tcp_pcb_remove>
 80089f0:	4b08      	ldr	r3, [pc, #32]	; (8008a14 <tcp_close_shutdown+0x148>)
 80089f2:	2201      	movs	r2, #1
 80089f4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80089f6:	4620      	mov	r0, r4
 80089f8:	f7ff fb2e 	bl	8008058 <tcp_free>
  return ERR_OK;
 80089fc:	2000      	movs	r0, #0
      break;
 80089fe:	e7c9      	b.n	8008994 <tcp_close_shutdown+0xc8>
 8008a00:	08015e18 	.word	0x08015e18
 8008a04:	080160dc 	.word	0x080160dc
 8008a08:	08015418 	.word	0x08015418
 8008a0c:	20007b20 	.word	0x20007b20
 8008a10:	080160fc 	.word	0x080160fc
 8008a14:	20007b1c 	.word	0x20007b1c
 8008a18:	20007b34 	.word	0x20007b34
 8008a1c:	20007b2c 	.word	0x20007b2c
 8008a20:	20007b28 	.word	0x20007b28

08008a24 <tcp_close>:
{
 8008a24:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008a26:	b178      	cbz	r0, 8008a48 <tcp_close+0x24>
 8008a28:	4603      	mov	r3, r0
  if (pcb->state != LISTEN) {
 8008a2a:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8008a2e:	2a01      	cmp	r2, #1
 8008a30:	d005      	beq.n	8008a3e <tcp_close+0x1a>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008a32:	f8b0 2042 	ldrh.w	r2, [r0, #66]	; 0x42
 8008a36:	f042 0210 	orr.w	r2, r2, #16
 8008a3a:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
  return tcp_close_shutdown(pcb, 1);
 8008a3e:	2101      	movs	r1, #1
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7ff ff43 	bl	80088cc <tcp_close_shutdown>
}
 8008a46:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008a48:	4b04      	ldr	r3, [pc, #16]	; (8008a5c <tcp_close+0x38>)
 8008a4a:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008a4e:	4904      	ldr	r1, [pc, #16]	; (8008a60 <tcp_close+0x3c>)
 8008a50:	4804      	ldr	r0, [pc, #16]	; (8008a64 <tcp_close+0x40>)
 8008a52:	f00b fbef 	bl	8014234 <iprintf>
 8008a56:	f06f 000f 	mvn.w	r0, #15
 8008a5a:	e7f4      	b.n	8008a46 <tcp_close+0x22>
 8008a5c:	08015e18 	.word	0x08015e18
 8008a60:	08016118 	.word	0x08016118
 8008a64:	08015418 	.word	0x08015418

08008a68 <tcp_recv_null>:
{
 8008a68:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008a6a:	b151      	cbz	r1, 8008a82 <tcp_recv_null+0x1a>
 8008a6c:	4614      	mov	r4, r2
 8008a6e:	4608      	mov	r0, r1
  if (p != NULL) {
 8008a70:	b18a      	cbz	r2, 8008a96 <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 8008a72:	8911      	ldrh	r1, [r2, #8]
 8008a74:	f7ff fb46 	bl	8008104 <tcp_recved>
    pbuf_free(p);
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f7fe fe8b 	bl	8007794 <pbuf_free>
  return ERR_OK;
 8008a7e:	2000      	movs	r0, #0
}
 8008a80:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008a82:	4b08      	ldr	r3, [pc, #32]	; (8008aa4 <tcp_recv_null+0x3c>)
 8008a84:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8008a88:	4907      	ldr	r1, [pc, #28]	; (8008aa8 <tcp_recv_null+0x40>)
 8008a8a:	4808      	ldr	r0, [pc, #32]	; (8008aac <tcp_recv_null+0x44>)
 8008a8c:	f00b fbd2 	bl	8014234 <iprintf>
 8008a90:	f06f 000f 	mvn.w	r0, #15
 8008a94:	e7f4      	b.n	8008a80 <tcp_recv_null+0x18>
  } else if (err == ERR_OK) {
 8008a96:	b10b      	cbz	r3, 8008a9c <tcp_recv_null+0x34>
  return ERR_OK;
 8008a98:	2000      	movs	r0, #0
 8008a9a:	e7f1      	b.n	8008a80 <tcp_recv_null+0x18>
    return tcp_close(pcb);
 8008a9c:	f7ff ffc2 	bl	8008a24 <tcp_close>
 8008aa0:	e7ee      	b.n	8008a80 <tcp_recv_null+0x18>
 8008aa2:	bf00      	nop
 8008aa4:	08015e18 	.word	0x08015e18
 8008aa8:	08016130 	.word	0x08016130
 8008aac:	08015418 	.word	0x08015418

08008ab0 <tcp_process_refused_data>:
{
 8008ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008ab2:	b338      	cbz	r0, 8008b04 <tcp_process_refused_data+0x54>
 8008ab4:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8008ab6:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
 8008aba:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8008abc:	2300      	movs	r3, #0
 8008abe:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008ac2:	f8d0 50ac 	ldr.w	r5, [r0, #172]	; 0xac
 8008ac6:	b33d      	cbz	r5, 8008b18 <tcp_process_refused_data+0x68>
 8008ac8:	4632      	mov	r2, r6
 8008aca:	4601      	mov	r1, r0
 8008acc:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008ace:	47a8      	blx	r5
 8008ad0:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8008ad2:	bb4d      	cbnz	r5, 8008b28 <tcp_process_refused_data+0x78>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008ad4:	f017 0f20 	tst.w	r7, #32
 8008ad8:	d02d      	beq.n	8008b36 <tcp_process_refused_data+0x86>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008ada:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8008ade:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008ae2:	d002      	beq.n	8008aea <tcp_process_refused_data+0x3a>
          pcb->rcv_wnd++;
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
        TCP_EVENT_CLOSED(pcb, err);
 8008aea:	f8d4 60ac 	ldr.w	r6, [r4, #172]	; 0xac
 8008aee:	b316      	cbz	r6, 8008b36 <tcp_process_refused_data+0x86>
 8008af0:	2300      	movs	r3, #0
 8008af2:	461a      	mov	r2, r3
 8008af4:	4621      	mov	r1, r4
 8008af6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008af8:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8008afa:	f110 0f0d 	cmn.w	r0, #13
 8008afe:	d11a      	bne.n	8008b36 <tcp_process_refused_data+0x86>
          return ERR_ABRT;
 8008b00:	4605      	mov	r5, r0
 8008b02:	e018      	b.n	8008b36 <tcp_process_refused_data+0x86>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008b04:	4b0d      	ldr	r3, [pc, #52]	; (8008b3c <tcp_process_refused_data+0x8c>)
 8008b06:	f240 6209 	movw	r2, #1545	; 0x609
 8008b0a:	490d      	ldr	r1, [pc, #52]	; (8008b40 <tcp_process_refused_data+0x90>)
 8008b0c:	480d      	ldr	r0, [pc, #52]	; (8008b44 <tcp_process_refused_data+0x94>)
 8008b0e:	f00b fb91 	bl	8014234 <iprintf>
 8008b12:	f06f 050f 	mvn.w	r5, #15
 8008b16:	e00e      	b.n	8008b36 <tcp_process_refused_data+0x86>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008b18:	2300      	movs	r3, #0
 8008b1a:	4632      	mov	r2, r6
 8008b1c:	4601      	mov	r1, r0
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7ff ffa2 	bl	8008a68 <tcp_recv_null>
 8008b24:	4605      	mov	r5, r0
 8008b26:	e7d4      	b.n	8008ad2 <tcp_process_refused_data+0x22>
    } else if (err == ERR_ABRT) {
 8008b28:	f115 0f0d 	cmn.w	r5, #13
 8008b2c:	d003      	beq.n	8008b36 <tcp_process_refused_data+0x86>
      pcb->refused_data = refused_data;
 8008b2e:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
      return ERR_INPROGRESS;
 8008b32:	f06f 0504 	mvn.w	r5, #4
}
 8008b36:	4628      	mov	r0, r5
 8008b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	08015e18 	.word	0x08015e18
 8008b40:	0801614c 	.word	0x0801614c
 8008b44:	08015418 	.word	0x08015418

08008b48 <tcp_fasttmr>:
{
 8008b48:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 8008b4a:	4a21      	ldr	r2, [pc, #132]	; (8008bd0 <tcp_fasttmr+0x88>)
 8008b4c:	7813      	ldrb	r3, [r2, #0]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8008b52:	4b20      	ldr	r3, [pc, #128]	; (8008bd4 <tcp_fasttmr+0x8c>)
 8008b54:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8008b56:	e017      	b.n	8008b88 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8008b58:	f043 0302 	orr.w	r3, r3, #2
 8008b5c:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        tcp_output(pcb);
 8008b60:	4620      	mov	r0, r4
 8008b62:	f002 ff0b 	bl	800b97c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008b66:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8008b6a:	f023 0303 	bic.w	r3, r3, #3
 8008b6e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 8008b72:	e017      	b.n	8008ba4 <tcp_fasttmr+0x5c>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008b74:	f023 0308 	bic.w	r3, r3, #8
 8008b78:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        tcp_close_shutdown_fin(pcb);
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f7ff f9ff 	bl	8007f80 <tcp_close_shutdown_fin>
 8008b82:	e014      	b.n	8008bae <tcp_fasttmr+0x66>
      pcb = pcb->next;
 8008b84:	6b65      	ldr	r5, [r4, #52]	; 0x34
{
 8008b86:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8008b88:	b304      	cbz	r4, 8008bcc <tcp_fasttmr+0x84>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008b8a:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8008b8e:	4b10      	ldr	r3, [pc, #64]	; (8008bd0 <tcp_fasttmr+0x88>)
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d0f6      	beq.n	8008b84 <tcp_fasttmr+0x3c>
      pcb->last_timer = tcp_timer_ctr;
 8008b96:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
      if (pcb->flags & TF_ACK_DELAY) {
 8008b9a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8008b9e:	f013 0f01 	tst.w	r3, #1
 8008ba2:	d1d9      	bne.n	8008b58 <tcp_fasttmr+0x10>
      if (pcb->flags & TF_CLOSEPEND) {
 8008ba4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8008ba8:	f013 0f08 	tst.w	r3, #8
 8008bac:	d1e2      	bne.n	8008b74 <tcp_fasttmr+0x2c>
      next = pcb->next;
 8008bae:	6b65      	ldr	r5, [r4, #52]	; 0x34
      if (pcb->refused_data != NULL) {
 8008bb0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d0e6      	beq.n	8008b86 <tcp_fasttmr+0x3e>
        tcp_active_pcbs_changed = 0;
 8008bb8:	4e07      	ldr	r6, [pc, #28]	; (8008bd8 <tcp_fasttmr+0x90>)
 8008bba:	2300      	movs	r3, #0
 8008bbc:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f7ff ff76 	bl	8008ab0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008bc4:	7833      	ldrb	r3, [r6, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d0dd      	beq.n	8008b86 <tcp_fasttmr+0x3e>
 8008bca:	e7c2      	b.n	8008b52 <tcp_fasttmr+0xa>
}
 8008bcc:	bd70      	pop	{r4, r5, r6, pc}
 8008bce:	bf00      	nop
 8008bd0:	2000063a 	.word	0x2000063a
 8008bd4:	20007b20 	.word	0x20007b20
 8008bd8:	20007b1c 	.word	0x20007b1c

08008bdc <tcp_slowtmr>:
{
 8008bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be0:	b084      	sub	sp, #16
  ++tcp_ticks;
 8008be2:	4ab4      	ldr	r2, [pc, #720]	; (8008eb4 <tcp_slowtmr+0x2d8>)
 8008be4:	6813      	ldr	r3, [r2, #0]
 8008be6:	3301      	adds	r3, #1
 8008be8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008bea:	4ab3      	ldr	r2, [pc, #716]	; (8008eb8 <tcp_slowtmr+0x2dc>)
 8008bec:	7813      	ldrb	r3, [r2, #0]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8008bf2:	4bb2      	ldr	r3, [pc, #712]	; (8008ebc <tcp_slowtmr+0x2e0>)
 8008bf4:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 8008bf6:	2600      	movs	r6, #0
  while (pcb != NULL) {
 8008bf8:	e1a6      	b.n	8008f48 <tcp_slowtmr+0x36c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008bfa:	4bb1      	ldr	r3, [pc, #708]	; (8008ec0 <tcp_slowtmr+0x2e4>)
 8008bfc:	f240 42be 	movw	r2, #1214	; 0x4be
 8008c00:	49b0      	ldr	r1, [pc, #704]	; (8008ec4 <tcp_slowtmr+0x2e8>)
 8008c02:	48b1      	ldr	r0, [pc, #708]	; (8008ec8 <tcp_slowtmr+0x2ec>)
 8008c04:	f00b fb16 	bl	8014234 <iprintf>
 8008c08:	e1a5      	b.n	8008f56 <tcp_slowtmr+0x37a>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008c0a:	4bad      	ldr	r3, [pc, #692]	; (8008ec0 <tcp_slowtmr+0x2e4>)
 8008c0c:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008c10:	49ae      	ldr	r1, [pc, #696]	; (8008ecc <tcp_slowtmr+0x2f0>)
 8008c12:	48ad      	ldr	r0, [pc, #692]	; (8008ec8 <tcp_slowtmr+0x2ec>)
 8008c14:	f00b fb0e 	bl	8014234 <iprintf>
 8008c18:	e1a2      	b.n	8008f60 <tcp_slowtmr+0x384>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008c1a:	4ba9      	ldr	r3, [pc, #676]	; (8008ec0 <tcp_slowtmr+0x2e4>)
 8008c1c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008c20:	49ab      	ldr	r1, [pc, #684]	; (8008ed0 <tcp_slowtmr+0x2f4>)
 8008c22:	48a9      	ldr	r0, [pc, #676]	; (8008ec8 <tcp_slowtmr+0x2ec>)
 8008c24:	f00b fb06 	bl	8014234 <iprintf>
 8008c28:	e19f      	b.n	8008f6a <tcp_slowtmr+0x38e>
      prev = pcb;
 8008c2a:	4626      	mov	r6, r4
      pcb = pcb->next;
 8008c2c:	6b64      	ldr	r4, [r4, #52]	; 0x34
      continue;
 8008c2e:	e18b      	b.n	8008f48 <tcp_slowtmr+0x36c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008c30:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8008c34:	2b05      	cmp	r3, #5
 8008c36:	f240 81a6 	bls.w	8008f86 <tcp_slowtmr+0x3aa>
      ++pcb_remove;
 8008c3a:	2501      	movs	r5, #1
 8008c3c:	e075      	b.n	8008d2a <tcp_slowtmr+0x14e>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008c3e:	4ba0      	ldr	r3, [pc, #640]	; (8008ec0 <tcp_slowtmr+0x2e4>)
 8008c40:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008c44:	49a3      	ldr	r1, [pc, #652]	; (8008ed4 <tcp_slowtmr+0x2f8>)
 8008c46:	48a0      	ldr	r0, [pc, #640]	; (8008ec8 <tcp_slowtmr+0x2ec>)
 8008c48:	f00b faf4 	bl	8014234 <iprintf>
 8008c4c:	e1b4      	b.n	8008fb8 <tcp_slowtmr+0x3dc>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f002 fb60 	bl	800b314 <tcp_split_unsent_seg>
 8008c54:	b160      	cbz	r0, 8008c70 <tcp_slowtmr+0x94>
              pcb->persist_cnt = 0;
 8008c56:	2300      	movs	r3, #0
 8008c58:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008c5c:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 8008c60:	2b06      	cmp	r3, #6
 8008c62:	f200 80ae 	bhi.w	8008dc2 <tcp_slowtmr+0x1e6>
                pcb->persist_backoff++;
 8008c66:	3301      	adds	r3, #1
 8008c68:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
    pcb_remove = 0;
 8008c6c:	2500      	movs	r5, #0
 8008c6e:	e05c      	b.n	8008d2a <tcp_slowtmr+0x14e>
                if (tcp_output(pcb) == ERR_OK) {
 8008c70:	4620      	mov	r0, r4
 8008c72:	f002 fe83 	bl	800b97c <tcp_output>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d1ed      	bne.n	8008c56 <tcp_slowtmr+0x7a>
    pcb_remove = 0;
 8008c7a:	2500      	movs	r5, #0
 8008c7c:	e055      	b.n	8008d2a <tcp_slowtmr+0x14e>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008c7e:	f9b4 3058 	ldrsh.w	r3, [r4, #88]	; 0x58
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d802      	bhi.n	8008c92 <tcp_slowtmr+0xb6>
          ++pcb->rtime;
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
        if (pcb->rtime >= pcb->rto) {
 8008c92:	f9b4 2058 	ldrsh.w	r2, [r4, #88]	; 0x58
 8008c96:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	db45      	blt.n	8008d2a <tcp_slowtmr+0x14e>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f002 fd08 	bl	800b6b4 <tcp_rexmit_rto_prepare>
 8008ca4:	b130      	cbz	r0, 8008cb4 <tcp_slowtmr+0xd8>
 8008ca6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d13d      	bne.n	8008d2a <tcp_slowtmr+0x14e>
 8008cae:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8008cb2:	b3d3      	cbz	r3, 8008d2a <tcp_slowtmr+0x14e>
            if (pcb->state != SYN_SENT) {
 8008cb4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d014      	beq.n	8008ce6 <tcp_slowtmr+0x10a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008cbc:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 8008cc0:	2a0c      	cmp	r2, #12
 8008cc2:	bf28      	it	cs
 8008cc4:	220c      	movcs	r2, #12
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008cc6:	f9b4 1064 	ldrsh.w	r1, [r4, #100]	; 0x64
 8008cca:	f9b4 3066 	ldrsh.w	r3, [r4, #102]	; 0x66
 8008cce:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8008cd2:	4981      	ldr	r1, [pc, #516]	; (8008ed8 <tcp_slowtmr+0x2fc>)
 8008cd4:	5c8a      	ldrb	r2, [r1, r2]
 8008cd6:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008cd8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	dc20      	bgt.n	8008d22 <tcp_slowtmr+0x146>
 8008ce0:	b21b      	sxth	r3, r3
 8008ce2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
            pcb->rtime = 0;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008cec:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 8008cf0:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	bf28      	it	cs
 8008cf8:	4613      	movcs	r3, r2
            pcb->ssthresh = eff_wnd >> 1;
 8008cfa:	085b      	lsrs	r3, r3, #1
 8008cfc:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008d00:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 8008d04:	004a      	lsls	r2, r1, #1
 8008d06:	b292      	uxth	r2, r2
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d201      	bcs.n	8008d10 <tcp_slowtmr+0x134>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008d0c:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
            pcb->cwnd = pcb->mss;
 8008d10:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
            pcb->bytes_acked = 0;
 8008d14:	2300      	movs	r3, #0
 8008d16:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
            tcp_rexmit_rto_commit(pcb);
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f002 ffe6 	bl	800bcec <tcp_rexmit_rto_commit>
 8008d20:	e003      	b.n	8008d2a <tcp_slowtmr+0x14e>
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008d22:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8008d26:	e7dc      	b.n	8008ce2 <tcp_slowtmr+0x106>
      ++pcb_remove;
 8008d28:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 8008d2a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8008d2e:	2a06      	cmp	r2, #6
 8008d30:	d049      	beq.n	8008dc6 <tcp_slowtmr+0x1ea>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008d32:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8008d36:	f013 0708 	ands.w	r7, r3, #8
 8008d3a:	d004      	beq.n	8008d46 <tcp_slowtmr+0x16a>
 8008d3c:	2a04      	cmp	r2, #4
 8008d3e:	d050      	beq.n	8008de2 <tcp_slowtmr+0x206>
        ((pcb->state == ESTABLISHED) ||
 8008d40:	2a07      	cmp	r2, #7
 8008d42:	d04e      	beq.n	8008de2 <tcp_slowtmr+0x206>
    pcb_reset = 0;
 8008d44:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 8008d46:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8008d4a:	b153      	cbz	r3, 8008d62 <tcp_slowtmr+0x186>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008d4c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008d4e:	4a59      	ldr	r2, [pc, #356]	; (8008eb4 <tcp_slowtmr+0x2d8>)
 8008d50:	6812      	ldr	r2, [r2, #0]
 8008d52:	1ad2      	subs	r2, r2, r3
 8008d54:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 8008d58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8008d5c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8008d60:	d26d      	bcs.n	8008e3e <tcp_slowtmr+0x262>
    if (pcb->state == SYN_RCVD) {
 8008d62:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008d66:	2b03      	cmp	r3, #3
 8008d68:	d06d      	beq.n	8008e46 <tcp_slowtmr+0x26a>
    if (pcb->state == LAST_ACK) {
 8008d6a:	2b09      	cmp	r3, #9
 8008d6c:	d074      	beq.n	8008e58 <tcp_slowtmr+0x27c>
    if (pcb_remove) {
 8008d6e:	2d00      	cmp	r5, #0
 8008d70:	d17b      	bne.n	8008e6a <tcp_slowtmr+0x28e>
      pcb = pcb->next;
 8008d72:	6b65      	ldr	r5, [r4, #52]	; 0x34
      ++prev->polltmr;
 8008d74:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008d78:	3301      	adds	r3, #1
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      if (prev->polltmr >= prev->pollinterval) {
 8008d80:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8008d84:	4293      	cmp	r3, r2
 8008d86:	f0c0 80dd 	bcc.w	8008f44 <tcp_slowtmr+0x368>
        prev->polltmr = 0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        tcp_active_pcbs_changed = 0;
 8008d90:	4a52      	ldr	r2, [pc, #328]	; (8008edc <tcp_slowtmr+0x300>)
 8008d92:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 8008d94:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f000 80cb 	beq.w	8008f34 <tcp_slowtmr+0x358>
 8008d9e:	4621      	mov	r1, r4
 8008da0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008da2:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8008da4:	4b4d      	ldr	r3, [pc, #308]	; (8008edc <tcp_slowtmr+0x300>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f47f af22 	bne.w	8008bf2 <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 8008dae:	2800      	cmp	r0, #0
 8008db0:	f000 80c2 	beq.w	8008f38 <tcp_slowtmr+0x35c>
      prev = pcb;
 8008db4:	4626      	mov	r6, r4
      pcb = pcb->next;
 8008db6:	462c      	mov	r4, r5
 8008db8:	e0c6      	b.n	8008f48 <tcp_slowtmr+0x36c>
          ++pcb_remove; /* max probes reached */
 8008dba:	2501      	movs	r5, #1
 8008dbc:	e7b5      	b.n	8008d2a <tcp_slowtmr+0x14e>
    pcb_remove = 0;
 8008dbe:	2500      	movs	r5, #0
 8008dc0:	e7b3      	b.n	8008d2a <tcp_slowtmr+0x14e>
 8008dc2:	2500      	movs	r5, #0
 8008dc4:	e7b1      	b.n	8008d2a <tcp_slowtmr+0x14e>
      if (pcb->flags & TF_RXCLOSED) {
 8008dc6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8008dca:	f013 0f10 	tst.w	r3, #16
 8008dce:	d0b0      	beq.n	8008d32 <tcp_slowtmr+0x156>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008dd0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008dd2:	4b38      	ldr	r3, [pc, #224]	; (8008eb4 <tcp_slowtmr+0x2d8>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	1a5b      	subs	r3, r3, r1
 8008dd8:	2b28      	cmp	r3, #40	; 0x28
 8008dda:	d9aa      	bls.n	8008d32 <tcp_slowtmr+0x156>
          ++pcb_remove;
 8008ddc:	3501      	adds	r5, #1
 8008dde:	b2ed      	uxtb	r5, r5
 8008de0:	e7a7      	b.n	8008d32 <tcp_slowtmr+0x156>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008de2:	4b34      	ldr	r3, [pc, #208]	; (8008eb4 <tcp_slowtmr+0x2d8>)
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008de8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008dea:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 8008dee:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 8008df2:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8008df6:	483a      	ldr	r0, [pc, #232]	; (8008ee0 <tcp_slowtmr+0x304>)
 8008df8:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008dfc:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8008e00:	d903      	bls.n	8008e0a <tcp_slowtmr+0x22e>
        ++pcb_remove;
 8008e02:	3501      	adds	r5, #1
 8008e04:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 8008e06:	2701      	movs	r7, #1
 8008e08:	e79d      	b.n	8008d46 <tcp_slowtmr+0x16a>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008e0a:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 8008e0e:	4835      	ldr	r0, [pc, #212]	; (8008ee4 <tcp_slowtmr+0x308>)
 8008e10:	fb00 1303 	mla	r3, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008e14:	4932      	ldr	r1, [pc, #200]	; (8008ee0 <tcp_slowtmr+0x304>)
 8008e16:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008e1a:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8008e1e:	d801      	bhi.n	8008e24 <tcp_slowtmr+0x248>
    pcb_reset = 0;
 8008e20:	2700      	movs	r7, #0
 8008e22:	e790      	b.n	8008d46 <tcp_slowtmr+0x16a>
        err = tcp_keepalive(pcb);
 8008e24:	4620      	mov	r0, r4
 8008e26:	f002 ff97 	bl	800bd58 <tcp_keepalive>
        if (err == ERR_OK) {
 8008e2a:	b930      	cbnz	r0, 8008e3a <tcp_slowtmr+0x25e>
          pcb->keep_cnt_sent++;
 8008e2c:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 8008e30:	3301      	adds	r3, #1
 8008e32:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
    pcb_reset = 0;
 8008e36:	2700      	movs	r7, #0
 8008e38:	e785      	b.n	8008d46 <tcp_slowtmr+0x16a>
 8008e3a:	2700      	movs	r7, #0
 8008e3c:	e783      	b.n	8008d46 <tcp_slowtmr+0x16a>
      tcp_free_ooseq(pcb);
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f7ff fa2e 	bl	80082a0 <tcp_free_ooseq>
 8008e44:	e78d      	b.n	8008d62 <tcp_slowtmr+0x186>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008e46:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008e48:	4a1a      	ldr	r2, [pc, #104]	; (8008eb4 <tcp_slowtmr+0x2d8>)
 8008e4a:	6812      	ldr	r2, [r2, #0]
 8008e4c:	1a52      	subs	r2, r2, r1
 8008e4e:	2a28      	cmp	r2, #40	; 0x28
 8008e50:	d98b      	bls.n	8008d6a <tcp_slowtmr+0x18e>
        ++pcb_remove;
 8008e52:	3501      	adds	r5, #1
 8008e54:	b2ed      	uxtb	r5, r5
 8008e56:	e788      	b.n	8008d6a <tcp_slowtmr+0x18e>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008e58:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008e5a:	4b16      	ldr	r3, [pc, #88]	; (8008eb4 <tcp_slowtmr+0x2d8>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	1a9b      	subs	r3, r3, r2
 8008e60:	2bf0      	cmp	r3, #240	; 0xf0
 8008e62:	d984      	bls.n	8008d6e <tcp_slowtmr+0x192>
        ++pcb_remove;
 8008e64:	3501      	adds	r5, #1
 8008e66:	b2ed      	uxtb	r5, r5
 8008e68:	e781      	b.n	8008d6e <tcp_slowtmr+0x192>
      tcp_err_fn err_fn = pcb->errf;
 8008e6a:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
      tcp_pcb_purge(pcb);
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f7ff fa22 	bl	80082b8 <tcp_pcb_purge>
      if (prev != NULL) {
 8008e74:	2e00      	cmp	r6, #0
 8008e76:	d03f      	beq.n	8008ef8 <tcp_slowtmr+0x31c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008e78:	4b10      	ldr	r3, [pc, #64]	; (8008ebc <tcp_slowtmr+0x2e0>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	42a3      	cmp	r3, r4
 8008e7e:	d033      	beq.n	8008ee8 <tcp_slowtmr+0x30c>
        prev->next = pcb->next;
 8008e80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e82:	6373      	str	r3, [r6, #52]	; 0x34
      if (pcb_reset) {
 8008e84:	2f00      	cmp	r7, #0
 8008e86:	d146      	bne.n	8008f16 <tcp_slowtmr+0x33a>
      err_arg = pcb->callback_arg;
 8008e88:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
      pcb = pcb->next;
 8008e8c:	6b67      	ldr	r7, [r4, #52]	; 0x34
      tcp_free(pcb2);
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f7ff f8e2 	bl	8008058 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8008e94:	4b11      	ldr	r3, [pc, #68]	; (8008edc <tcp_slowtmr+0x300>)
 8008e96:	2200      	movs	r2, #0
 8008e98:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008e9a:	b11d      	cbz	r5, 8008ea4 <tcp_slowtmr+0x2c8>
 8008e9c:	f06f 010c 	mvn.w	r1, #12
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 8008ea4:	4b0d      	ldr	r3, [pc, #52]	; (8008edc <tcp_slowtmr+0x300>)
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f47f aea2 	bne.w	8008bf2 <tcp_slowtmr+0x16>
      pcb = pcb->next;
 8008eae:	463c      	mov	r4, r7
 8008eb0:	e04a      	b.n	8008f48 <tcp_slowtmr+0x36c>
 8008eb2:	bf00      	nop
 8008eb4:	20007b24 	.word	0x20007b24
 8008eb8:	2000063a 	.word	0x2000063a
 8008ebc:	20007b20 	.word	0x20007b20
 8008ec0:	08015e18 	.word	0x08015e18
 8008ec4:	08016174 	.word	0x08016174
 8008ec8:	08015418 	.word	0x08015418
 8008ecc:	080161a0 	.word	0x080161a0
 8008ed0:	080161cc 	.word	0x080161cc
 8008ed4:	08016230 	.word	0x08016230
 8008ed8:	08016340 	.word	0x08016340
 8008edc:	20007b1c 	.word	0x20007b1c
 8008ee0:	10624dd3 	.word	0x10624dd3
 8008ee4:	000124f8 	.word	0x000124f8
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008ee8:	4b66      	ldr	r3, [pc, #408]	; (8009084 <tcp_slowtmr+0x4a8>)
 8008eea:	f240 526d 	movw	r2, #1389	; 0x56d
 8008eee:	4966      	ldr	r1, [pc, #408]	; (8009088 <tcp_slowtmr+0x4ac>)
 8008ef0:	4866      	ldr	r0, [pc, #408]	; (800908c <tcp_slowtmr+0x4b0>)
 8008ef2:	f00b f99f 	bl	8014234 <iprintf>
 8008ef6:	e7c3      	b.n	8008e80 <tcp_slowtmr+0x2a4>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008ef8:	4b65      	ldr	r3, [pc, #404]	; (8009090 <tcp_slowtmr+0x4b4>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	42a3      	cmp	r3, r4
 8008efe:	d006      	beq.n	8008f0e <tcp_slowtmr+0x332>
 8008f00:	4b60      	ldr	r3, [pc, #384]	; (8009084 <tcp_slowtmr+0x4a8>)
 8008f02:	f240 5271 	movw	r2, #1393	; 0x571
 8008f06:	4963      	ldr	r1, [pc, #396]	; (8009094 <tcp_slowtmr+0x4b8>)
 8008f08:	4860      	ldr	r0, [pc, #384]	; (800908c <tcp_slowtmr+0x4b0>)
 8008f0a:	f00b f993 	bl	8014234 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008f0e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008f10:	4b5f      	ldr	r3, [pc, #380]	; (8009090 <tcp_slowtmr+0x4b4>)
 8008f12:	601a      	str	r2, [r3, #0]
 8008f14:	e7b6      	b.n	8008e84 <tcp_slowtmr+0x2a8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008f16:	f104 0318 	add.w	r3, r4, #24
 8008f1a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008f1c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8008f1e:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 8008f22:	9002      	str	r0, [sp, #8]
 8008f24:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8008f26:	9001      	str	r0, [sp, #4]
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	4623      	mov	r3, r4
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f002 fc9b 	bl	800b868 <tcp_rst>
 8008f32:	e7a9      	b.n	8008e88 <tcp_slowtmr+0x2ac>
        TCP_EVENT_POLL(prev, err);
 8008f34:	2000      	movs	r0, #0
 8008f36:	e735      	b.n	8008da4 <tcp_slowtmr+0x1c8>
          tcp_output(prev);
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f002 fd1f 	bl	800b97c <tcp_output>
      prev = pcb;
 8008f3e:	4626      	mov	r6, r4
      pcb = pcb->next;
 8008f40:	462c      	mov	r4, r5
 8008f42:	e001      	b.n	8008f48 <tcp_slowtmr+0x36c>
      prev = pcb;
 8008f44:	4626      	mov	r6, r4
      pcb = pcb->next;
 8008f46:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8008f48:	2c00      	cmp	r4, #0
 8008f4a:	d058      	beq.n	8008ffe <tcp_slowtmr+0x422>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008f4c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f43f ae52 	beq.w	8008bfa <tcp_slowtmr+0x1e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008f56:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	f43f ae55 	beq.w	8008c0a <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008f60:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008f64:	2b0a      	cmp	r3, #10
 8008f66:	f43f ae58 	beq.w	8008c1a <tcp_slowtmr+0x3e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008f6a:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8008f6e:	4b4a      	ldr	r3, [pc, #296]	; (8009098 <tcp_slowtmr+0x4bc>)
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	f43f ae59 	beq.w	8008c2a <tcp_slowtmr+0x4e>
    pcb->last_timer = tcp_timer_ctr;
 8008f78:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008f7c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	f43f ae55 	beq.w	8008c30 <tcp_slowtmr+0x54>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008f86:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8008f8a:	2b0b      	cmp	r3, #11
 8008f8c:	f63f aecc 	bhi.w	8008d28 <tcp_slowtmr+0x14c>
      if (pcb->persist_backoff > 0) {
 8008f90:	f894 50c1 	ldrb.w	r5, [r4, #193]	; 0xc1
 8008f94:	2d00      	cmp	r5, #0
 8008f96:	f43f ae72 	beq.w	8008c7e <tcp_slowtmr+0xa2>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008f9a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8008f9e:	b133      	cbz	r3, 8008fae <tcp_slowtmr+0x3d2>
 8008fa0:	4b38      	ldr	r3, [pc, #224]	; (8009084 <tcp_slowtmr+0x4a8>)
 8008fa2:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008fa6:	493d      	ldr	r1, [pc, #244]	; (800909c <tcp_slowtmr+0x4c0>)
 8008fa8:	4838      	ldr	r0, [pc, #224]	; (800908c <tcp_slowtmr+0x4b0>)
 8008faa:	f00b f943 	bl	8014234 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008fae:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f43f ae43 	beq.w	8008c3e <tcp_slowtmr+0x62>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008fb8:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
 8008fbc:	2b0b      	cmp	r3, #11
 8008fbe:	f63f aefc 	bhi.w	8008dba <tcp_slowtmr+0x1de>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008fc2:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	4a35      	ldr	r2, [pc, #212]	; (80090a0 <tcp_slowtmr+0x4c4>)
 8008fca:	5cd2      	ldrb	r2, [r2, r3]
          if (pcb->persist_cnt < backoff_cnt) {
 8008fcc:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d202      	bcs.n	8008fda <tcp_slowtmr+0x3fe>
            pcb->persist_cnt++;
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
          if (pcb->persist_cnt >= backoff_cnt) {
 8008fda:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	f4ff aeed 	bcc.w	8008dbe <tcp_slowtmr+0x1e2>
            if (pcb->snd_wnd == 0) {
 8008fe4:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
 8008fe8:	2900      	cmp	r1, #0
 8008fea:	f47f ae30 	bne.w	8008c4e <tcp_slowtmr+0x72>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f002 fee0 	bl	800bdb4 <tcp_zero_window_probe>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	f43f ae2e 	beq.w	8008c56 <tcp_slowtmr+0x7a>
    pcb_remove = 0;
 8008ffa:	2500      	movs	r5, #0
 8008ffc:	e695      	b.n	8008d2a <tcp_slowtmr+0x14e>
  pcb = tcp_tw_pcbs;
 8008ffe:	4b29      	ldr	r3, [pc, #164]	; (80090a4 <tcp_slowtmr+0x4c8>)
 8009000:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 8009002:	e00e      	b.n	8009022 <tcp_slowtmr+0x446>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009004:	4b1f      	ldr	r3, [pc, #124]	; (8009084 <tcp_slowtmr+0x4a8>)
 8009006:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800900a:	4927      	ldr	r1, [pc, #156]	; (80090a8 <tcp_slowtmr+0x4cc>)
 800900c:	481f      	ldr	r0, [pc, #124]	; (800908c <tcp_slowtmr+0x4b0>)
 800900e:	f00b f911 	bl	8014234 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009012:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8009014:	4b25      	ldr	r3, [pc, #148]	; (80090ac <tcp_slowtmr+0x4d0>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	1a9b      	subs	r3, r3, r2
 800901a:	2bf0      	cmp	r3, #240	; 0xf0
 800901c:	d807      	bhi.n	800902e <tcp_slowtmr+0x452>
      prev = pcb;
 800901e:	462c      	mov	r4, r5
      pcb = pcb->next;
 8009020:	6b6d      	ldr	r5, [r5, #52]	; 0x34
  while (pcb != NULL) {
 8009022:	b35d      	cbz	r5, 800907c <tcp_slowtmr+0x4a0>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009024:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8009028:	2b0a      	cmp	r3, #10
 800902a:	d0f2      	beq.n	8009012 <tcp_slowtmr+0x436>
 800902c:	e7ea      	b.n	8009004 <tcp_slowtmr+0x428>
      tcp_pcb_purge(pcb);
 800902e:	4628      	mov	r0, r5
 8009030:	f7ff f942 	bl	80082b8 <tcp_pcb_purge>
      if (prev != NULL) {
 8009034:	b19c      	cbz	r4, 800905e <tcp_slowtmr+0x482>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009036:	4b1b      	ldr	r3, [pc, #108]	; (80090a4 <tcp_slowtmr+0x4c8>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	42ab      	cmp	r3, r5
 800903c:	d007      	beq.n	800904e <tcp_slowtmr+0x472>
        prev->next = pcb->next;
 800903e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009040:	6363      	str	r3, [r4, #52]	; 0x34
      pcb = pcb->next;
 8009042:	6b6e      	ldr	r6, [r5, #52]	; 0x34
      tcp_free(pcb2);
 8009044:	4628      	mov	r0, r5
 8009046:	f7ff f807 	bl	8008058 <tcp_free>
      pcb = pcb->next;
 800904a:	4635      	mov	r5, r6
 800904c:	e7e9      	b.n	8009022 <tcp_slowtmr+0x446>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800904e:	4b0d      	ldr	r3, [pc, #52]	; (8009084 <tcp_slowtmr+0x4a8>)
 8009050:	f240 52af 	movw	r2, #1455	; 0x5af
 8009054:	4916      	ldr	r1, [pc, #88]	; (80090b0 <tcp_slowtmr+0x4d4>)
 8009056:	480d      	ldr	r0, [pc, #52]	; (800908c <tcp_slowtmr+0x4b0>)
 8009058:	f00b f8ec 	bl	8014234 <iprintf>
 800905c:	e7ef      	b.n	800903e <tcp_slowtmr+0x462>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800905e:	4b11      	ldr	r3, [pc, #68]	; (80090a4 <tcp_slowtmr+0x4c8>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	42ab      	cmp	r3, r5
 8009064:	d006      	beq.n	8009074 <tcp_slowtmr+0x498>
 8009066:	4b07      	ldr	r3, [pc, #28]	; (8009084 <tcp_slowtmr+0x4a8>)
 8009068:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800906c:	4911      	ldr	r1, [pc, #68]	; (80090b4 <tcp_slowtmr+0x4d8>)
 800906e:	4807      	ldr	r0, [pc, #28]	; (800908c <tcp_slowtmr+0x4b0>)
 8009070:	f00b f8e0 	bl	8014234 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009074:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8009076:	4b0b      	ldr	r3, [pc, #44]	; (80090a4 <tcp_slowtmr+0x4c8>)
 8009078:	601a      	str	r2, [r3, #0]
 800907a:	e7e2      	b.n	8009042 <tcp_slowtmr+0x466>
}
 800907c:	b004      	add	sp, #16
 800907e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009082:	bf00      	nop
 8009084:	08015e18 	.word	0x08015e18
 8009088:	08016268 	.word	0x08016268
 800908c:	08015418 	.word	0x08015418
 8009090:	20007b20 	.word	0x20007b20
 8009094:	08016294 	.word	0x08016294
 8009098:	2000063a 	.word	0x2000063a
 800909c:	080161fc 	.word	0x080161fc
 80090a0:	08016360 	.word	0x08016360
 80090a4:	20007b30 	.word	0x20007b30
 80090a8:	080162c0 	.word	0x080162c0
 80090ac:	20007b24 	.word	0x20007b24
 80090b0:	080162f0 	.word	0x080162f0
 80090b4:	08016318 	.word	0x08016318

080090b8 <tcp_tmr>:
{
 80090b8:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80090ba:	f7ff fd45 	bl	8008b48 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80090be:	4a06      	ldr	r2, [pc, #24]	; (80090d8 <tcp_tmr+0x20>)
 80090c0:	7813      	ldrb	r3, [r2, #0]
 80090c2:	3301      	adds	r3, #1
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	7013      	strb	r3, [r2, #0]
 80090c8:	f013 0f01 	tst.w	r3, #1
 80090cc:	d100      	bne.n	80090d0 <tcp_tmr+0x18>
}
 80090ce:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 80090d0:	f7ff fd84 	bl	8008bdc <tcp_slowtmr>
}
 80090d4:	e7fb      	b.n	80090ce <tcp_tmr+0x16>
 80090d6:	bf00      	nop
 80090d8:	20000639 	.word	0x20000639

080090dc <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 80090dc:	4a0a      	ldr	r2, [pc, #40]	; (8009108 <tcp_get_next_optbyte+0x2c>)
 80090de:	8813      	ldrh	r3, [r2, #0]
 80090e0:	1c59      	adds	r1, r3, #1
 80090e2:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80090e4:	4a09      	ldr	r2, [pc, #36]	; (800910c <tcp_get_next_optbyte+0x30>)
 80090e6:	6811      	ldr	r1, [r2, #0]
 80090e8:	b119      	cbz	r1, 80090f2 <tcp_get_next_optbyte+0x16>
 80090ea:	4a09      	ldr	r2, [pc, #36]	; (8009110 <tcp_get_next_optbyte+0x34>)
 80090ec:	8812      	ldrh	r2, [r2, #0]
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d204      	bcs.n	80090fc <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80090f2:	4a08      	ldr	r2, [pc, #32]	; (8009114 <tcp_get_next_optbyte+0x38>)
 80090f4:	6812      	ldr	r2, [r2, #0]
    return opts[optidx];
 80090f6:	4413      	add	r3, r2
 80090f8:	7d18      	ldrb	r0, [r3, #20]
 80090fa:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	b2d2      	uxtb	r2, r2
 8009100:	1a9b      	subs	r3, r3, r2
 8009102:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 8009104:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8009106:	4770      	bx	lr
 8009108:	20000664 	.word	0x20000664
 800910c:	20000670 	.word	0x20000670
 8009110:	2000066c 	.word	0x2000066c
 8009114:	20000668 	.word	0x20000668

08009118 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009118:	b538      	push	{r3, r4, r5, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800911a:	4604      	mov	r4, r0
 800911c:	b1e8      	cbz	r0, 800915a <tcp_parseopt+0x42>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800911e:	4b22      	ldr	r3, [pc, #136]	; (80091a8 <tcp_parseopt+0x90>)
 8009120:	881b      	ldrh	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d03f      	beq.n	80091a6 <tcp_parseopt+0x8e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009126:	4b21      	ldr	r3, [pc, #132]	; (80091ac <tcp_parseopt+0x94>)
 8009128:	2200      	movs	r2, #0
 800912a:	801a      	strh	r2, [r3, #0]
 800912c:	4b1f      	ldr	r3, [pc, #124]	; (80091ac <tcp_parseopt+0x94>)
 800912e:	881a      	ldrh	r2, [r3, #0]
 8009130:	4b1d      	ldr	r3, [pc, #116]	; (80091a8 <tcp_parseopt+0x90>)
 8009132:	881b      	ldrh	r3, [r3, #0]
 8009134:	429a      	cmp	r2, r3
 8009136:	d236      	bcs.n	80091a6 <tcp_parseopt+0x8e>
      u8_t opt = tcp_get_next_optbyte();
 8009138:	f7ff ffd0 	bl	80090dc <tcp_get_next_optbyte>
      switch (opt) {
 800913c:	2801      	cmp	r0, #1
 800913e:	d0f5      	beq.n	800912c <tcp_parseopt+0x14>
 8009140:	2802      	cmp	r0, #2
 8009142:	d012      	beq.n	800916a <tcp_parseopt+0x52>
 8009144:	b378      	cbz	r0, 80091a6 <tcp_parseopt+0x8e>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009146:	f7ff ffc9 	bl	80090dc <tcp_get_next_optbyte>
          if (data < 2) {
 800914a:	2801      	cmp	r0, #1
 800914c:	d92b      	bls.n	80091a6 <tcp_parseopt+0x8e>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800914e:	4b17      	ldr	r3, [pc, #92]	; (80091ac <tcp_parseopt+0x94>)
 8009150:	881a      	ldrh	r2, [r3, #0]
 8009152:	4410      	add	r0, r2
 8009154:	3802      	subs	r0, #2
 8009156:	8018      	strh	r0, [r3, #0]
 8009158:	e7e8      	b.n	800912c <tcp_parseopt+0x14>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800915a:	4b15      	ldr	r3, [pc, #84]	; (80091b0 <tcp_parseopt+0x98>)
 800915c:	f240 727d 	movw	r2, #1917	; 0x77d
 8009160:	4914      	ldr	r1, [pc, #80]	; (80091b4 <tcp_parseopt+0x9c>)
 8009162:	4815      	ldr	r0, [pc, #84]	; (80091b8 <tcp_parseopt+0xa0>)
 8009164:	f00b f866 	bl	8014234 <iprintf>
 8009168:	e7d9      	b.n	800911e <tcp_parseopt+0x6>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800916a:	f7ff ffb7 	bl	80090dc <tcp_get_next_optbyte>
 800916e:	2804      	cmp	r0, #4
 8009170:	d119      	bne.n	80091a6 <tcp_parseopt+0x8e>
 8009172:	4b0e      	ldr	r3, [pc, #56]	; (80091ac <tcp_parseopt+0x94>)
 8009174:	881b      	ldrh	r3, [r3, #0]
 8009176:	3301      	adds	r3, #1
 8009178:	4a0b      	ldr	r2, [pc, #44]	; (80091a8 <tcp_parseopt+0x90>)
 800917a:	8812      	ldrh	r2, [r2, #0]
 800917c:	4293      	cmp	r3, r2
 800917e:	da12      	bge.n	80091a6 <tcp_parseopt+0x8e>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009180:	f7ff ffac 	bl	80090dc <tcp_get_next_optbyte>
 8009184:	b285      	uxth	r5, r0
 8009186:	022d      	lsls	r5, r5, #8
 8009188:	b2ad      	uxth	r5, r5
          mss |= tcp_get_next_optbyte();
 800918a:	f7ff ffa7 	bl	80090dc <tcp_get_next_optbyte>
 800918e:	b280      	uxth	r0, r0
 8009190:	4305      	orrs	r5, r0
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009192:	1e6b      	subs	r3, r5, #1
 8009194:	b29b      	uxth	r3, r3
 8009196:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800919a:	d301      	bcc.n	80091a0 <tcp_parseopt+0x88>
 800919c:	f44f 7506 	mov.w	r5, #536	; 0x218
 80091a0:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
          break;
 80091a4:	e7c2      	b.n	800912c <tcp_parseopt+0x14>
      }
    }
  }
}
 80091a6:	bd38      	pop	{r3, r4, r5, pc}
 80091a8:	20000674 	.word	0x20000674
 80091ac:	20000664 	.word	0x20000664
 80091b0:	08016368 	.word	0x08016368
 80091b4:	0801639c 	.word	0x0801639c
 80091b8:	08015418 	.word	0x08015418

080091bc <tcp_input_delayed_close>:
{
 80091bc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80091be:	4604      	mov	r4, r0
 80091c0:	b130      	cbz	r0, 80091d0 <tcp_input_delayed_close+0x14>
  if (recv_flags & TF_CLOSED) {
 80091c2:	4b12      	ldr	r3, [pc, #72]	; (800920c <tcp_input_delayed_close+0x50>)
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	f013 0f10 	tst.w	r3, #16
 80091ca:	d109      	bne.n	80091e0 <tcp_input_delayed_close+0x24>
  return 0;
 80091cc:	2000      	movs	r0, #0
}
 80091ce:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80091d0:	4b0f      	ldr	r3, [pc, #60]	; (8009210 <tcp_input_delayed_close+0x54>)
 80091d2:	f240 225a 	movw	r2, #602	; 0x25a
 80091d6:	490f      	ldr	r1, [pc, #60]	; (8009214 <tcp_input_delayed_close+0x58>)
 80091d8:	480f      	ldr	r0, [pc, #60]	; (8009218 <tcp_input_delayed_close+0x5c>)
 80091da:	f00b f82b 	bl	8014234 <iprintf>
 80091de:	e7f0      	b.n	80091c2 <tcp_input_delayed_close+0x6>
    if (!(pcb->flags & TF_RXCLOSED)) {
 80091e0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80091e4:	f013 0f10 	tst.w	r3, #16
 80091e8:	d106      	bne.n	80091f8 <tcp_input_delayed_close+0x3c>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80091ea:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 80091ee:	b11b      	cbz	r3, 80091f8 <tcp_input_delayed_close+0x3c>
 80091f0:	f06f 010e 	mvn.w	r1, #14
 80091f4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80091f6:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80091f8:	4621      	mov	r1, r4
 80091fa:	4808      	ldr	r0, [pc, #32]	; (800921c <tcp_input_delayed_close+0x60>)
 80091fc:	f7ff f896 	bl	800832c <tcp_pcb_remove>
    tcp_free(pcb);
 8009200:	4620      	mov	r0, r4
 8009202:	f7fe ff29 	bl	8008058 <tcp_free>
    return 1;
 8009206:	2001      	movs	r0, #1
 8009208:	e7e1      	b.n	80091ce <tcp_input_delayed_close+0x12>
 800920a:	bf00      	nop
 800920c:	2000065c 	.word	0x2000065c
 8009210:	08016368 	.word	0x08016368
 8009214:	080163b8 	.word	0x080163b8
 8009218:	08015418 	.word	0x08015418
 800921c:	20007b20 	.word	0x20007b20

08009220 <tcp_timewait_input>:
  if (flags & TCP_RST) {
 8009220:	4b25      	ldr	r3, [pc, #148]	; (80092b8 <tcp_timewait_input+0x98>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	f013 0f04 	tst.w	r3, #4
 8009228:	d145      	bne.n	80092b6 <tcp_timewait_input+0x96>
{
 800922a:	b530      	push	{r4, r5, lr}
 800922c:	b085      	sub	sp, #20
 800922e:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009230:	b1a8      	cbz	r0, 800925e <tcp_timewait_input+0x3e>
  if (flags & TCP_SYN) {
 8009232:	4b21      	ldr	r3, [pc, #132]	; (80092b8 <tcp_timewait_input+0x98>)
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	f013 0f02 	tst.w	r3, #2
 800923a:	d02b      	beq.n	8009294 <tcp_timewait_input+0x74>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800923c:	4b1f      	ldr	r3, [pc, #124]	; (80092bc <tcp_timewait_input+0x9c>)
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009242:	1ad1      	subs	r1, r2, r3
 8009244:	2900      	cmp	r1, #0
 8009246:	db05      	blt.n	8009254 <tcp_timewait_input+0x34>
 8009248:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800924c:	440b      	add	r3, r1
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	2b00      	cmp	r3, #0
 8009252:	dd0c      	ble.n	800926e <tcp_timewait_input+0x4e>
  if ((tcplen > 0)) {
 8009254:	4b1a      	ldr	r3, [pc, #104]	; (80092c0 <tcp_timewait_input+0xa0>)
 8009256:	881b      	ldrh	r3, [r3, #0]
 8009258:	bb1b      	cbnz	r3, 80092a2 <tcp_timewait_input+0x82>
}
 800925a:	b005      	add	sp, #20
 800925c:	bd30      	pop	{r4, r5, pc}
  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800925e:	4b19      	ldr	r3, [pc, #100]	; (80092c4 <tcp_timewait_input+0xa4>)
 8009260:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009264:	4918      	ldr	r1, [pc, #96]	; (80092c8 <tcp_timewait_input+0xa8>)
 8009266:	4819      	ldr	r0, [pc, #100]	; (80092cc <tcp_timewait_input+0xac>)
 8009268:	f00a ffe4 	bl	8014234 <iprintf>
 800926c:	e7e1      	b.n	8009232 <tcp_timewait_input+0x12>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800926e:	4b18      	ldr	r3, [pc, #96]	; (80092d0 <tcp_timewait_input+0xb0>)
 8009270:	6819      	ldr	r1, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009272:	4b18      	ldr	r3, [pc, #96]	; (80092d4 <tcp_timewait_input+0xb4>)
 8009274:	4812      	ldr	r0, [pc, #72]	; (80092c0 <tcp_timewait_input+0xa0>)
 8009276:	8800      	ldrh	r0, [r0, #0]
 8009278:	880d      	ldrh	r5, [r1, #0]
 800927a:	9502      	str	r5, [sp, #8]
 800927c:	8849      	ldrh	r1, [r1, #2]
 800927e:	9101      	str	r1, [sp, #4]
 8009280:	f1a3 0118 	sub.w	r1, r3, #24
 8009284:	9100      	str	r1, [sp, #0]
 8009286:	4402      	add	r2, r0
 8009288:	4913      	ldr	r1, [pc, #76]	; (80092d8 <tcp_timewait_input+0xb8>)
 800928a:	6809      	ldr	r1, [r1, #0]
 800928c:	4620      	mov	r0, r4
 800928e:	f002 faeb 	bl	800b868 <tcp_rst>
      return;
 8009292:	e7e2      	b.n	800925a <tcp_timewait_input+0x3a>
  } else if (flags & TCP_FIN) {
 8009294:	f013 0f01 	tst.w	r3, #1
 8009298:	d0dc      	beq.n	8009254 <tcp_timewait_input+0x34>
    pcb->tmr = tcp_ticks;
 800929a:	4b10      	ldr	r3, [pc, #64]	; (80092dc <tcp_timewait_input+0xbc>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	64a3      	str	r3, [r4, #72]	; 0x48
 80092a0:	e7d8      	b.n	8009254 <tcp_timewait_input+0x34>
    tcp_ack_now(pcb);
 80092a2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80092a6:	f043 0302 	orr.w	r3, r3, #2
 80092aa:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    tcp_output(pcb);
 80092ae:	4620      	mov	r0, r4
 80092b0:	f002 fb64 	bl	800b97c <tcp_output>
 80092b4:	e7d1      	b.n	800925a <tcp_timewait_input+0x3a>
 80092b6:	4770      	bx	lr
 80092b8:	20000640 	.word	0x20000640
 80092bc:	20000660 	.word	0x20000660
 80092c0:	20000676 	.word	0x20000676
 80092c4:	08016368 	.word	0x08016368
 80092c8:	080163e0 	.word	0x080163e0
 80092cc:	08015418 	.word	0x08015418
 80092d0:	20000668 	.word	0x20000668
 80092d4:	20003a14 	.word	0x20003a14
 80092d8:	2000063c 	.word	0x2000063c
 80092dc:	20007b24 	.word	0x20007b24

080092e0 <tcp_listen_input>:
  if (flags & TCP_RST) {
 80092e0:	4b6f      	ldr	r3, [pc, #444]	; (80094a0 <tcp_listen_input+0x1c0>)
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	f013 0f04 	tst.w	r3, #4
 80092e8:	f040 80d9 	bne.w	800949e <tcp_listen_input+0x1be>
{
 80092ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ee:	b085      	sub	sp, #20
 80092f0:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80092f2:	b148      	cbz	r0, 8009308 <tcp_listen_input+0x28>
  if (flags & TCP_ACK) {
 80092f4:	4b6a      	ldr	r3, [pc, #424]	; (80094a0 <tcp_listen_input+0x1c0>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	f013 0f10 	tst.w	r3, #16
 80092fc:	d10c      	bne.n	8009318 <tcp_listen_input+0x38>
  } else if (flags & TCP_SYN) {
 80092fe:	f013 0f02 	tst.w	r3, #2
 8009302:	d11e      	bne.n	8009342 <tcp_listen_input+0x62>
}
 8009304:	b005      	add	sp, #20
 8009306:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009308:	4b66      	ldr	r3, [pc, #408]	; (80094a4 <tcp_listen_input+0x1c4>)
 800930a:	f240 2281 	movw	r2, #641	; 0x281
 800930e:	4966      	ldr	r1, [pc, #408]	; (80094a8 <tcp_listen_input+0x1c8>)
 8009310:	4866      	ldr	r0, [pc, #408]	; (80094ac <tcp_listen_input+0x1cc>)
 8009312:	f00a ff8f 	bl	8014234 <iprintf>
 8009316:	e7ed      	b.n	80092f4 <tcp_listen_input+0x14>
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009318:	4b65      	ldr	r3, [pc, #404]	; (80094b0 <tcp_listen_input+0x1d0>)
 800931a:	6819      	ldr	r1, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800931c:	4b65      	ldr	r3, [pc, #404]	; (80094b4 <tcp_listen_input+0x1d4>)
 800931e:	4a66      	ldr	r2, [pc, #408]	; (80094b8 <tcp_listen_input+0x1d8>)
 8009320:	8810      	ldrh	r0, [r2, #0]
 8009322:	4a66      	ldr	r2, [pc, #408]	; (80094bc <tcp_listen_input+0x1dc>)
 8009324:	6812      	ldr	r2, [r2, #0]
 8009326:	880c      	ldrh	r4, [r1, #0]
 8009328:	9402      	str	r4, [sp, #8]
 800932a:	8849      	ldrh	r1, [r1, #2]
 800932c:	9101      	str	r1, [sp, #4]
 800932e:	f1a3 0118 	sub.w	r1, r3, #24
 8009332:	9100      	str	r1, [sp, #0]
 8009334:	4402      	add	r2, r0
 8009336:	4962      	ldr	r1, [pc, #392]	; (80094c0 <tcp_listen_input+0x1e0>)
 8009338:	6809      	ldr	r1, [r1, #0]
 800933a:	4628      	mov	r0, r5
 800933c:	f002 fa94 	bl	800b868 <tcp_rst>
 8009340:	e7e0      	b.n	8009304 <tcp_listen_input+0x24>
    npcb = tcp_alloc(pcb->prio);
 8009342:	f895 003d 	ldrb.w	r0, [r5, #61]	; 0x3d
 8009346:	f7ff fa57 	bl	80087f8 <tcp_alloc>
    if (npcb == NULL) {
 800934a:	4604      	mov	r4, r0
 800934c:	2800      	cmp	r0, #0
 800934e:	d076      	beq.n	800943e <tcp_listen_input+0x15e>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009350:	4b5c      	ldr	r3, [pc, #368]	; (80094c4 <tcp_listen_input+0x1e4>)
 8009352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009356:	7503      	strb	r3, [r0, #20]
 8009358:	2b06      	cmp	r3, #6
 800935a:	d07a      	beq.n	8009452 <tcp_listen_input+0x172>
 800935c:	4b59      	ldr	r3, [pc, #356]	; (80094c4 <tcp_listen_input+0x1e4>)
 800935e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009360:	6003      	str	r3, [r0, #0]
 8009362:	2300      	movs	r3, #0
 8009364:	60c3      	str	r3, [r0, #12]
 8009366:	6083      	str	r3, [r0, #8]
 8009368:	6043      	str	r3, [r0, #4]
 800936a:	7403      	strb	r3, [r0, #16]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800936c:	4b55      	ldr	r3, [pc, #340]	; (80094c4 <tcp_listen_input+0x1e4>)
 800936e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009372:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8009376:	2b06      	cmp	r3, #6
 8009378:	d078      	beq.n	800946c <tcp_listen_input+0x18c>
 800937a:	4b52      	ldr	r3, [pc, #328]	; (80094c4 <tcp_listen_input+0x1e4>)
 800937c:	695b      	ldr	r3, [r3, #20]
 800937e:	61a3      	str	r3, [r4, #24]
 8009380:	2300      	movs	r3, #0
 8009382:	6263      	str	r3, [r4, #36]	; 0x24
 8009384:	6223      	str	r3, [r4, #32]
 8009386:	61e3      	str	r3, [r4, #28]
 8009388:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    npcb->local_port = pcb->local_port;
 800938c:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
 800938e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    npcb->remote_port = tcphdr->src;
 8009390:	4e47      	ldr	r6, [pc, #284]	; (80094b0 <tcp_listen_input+0x1d0>)
 8009392:	6833      	ldr	r3, [r6, #0]
 8009394:	881b      	ldrh	r3, [r3, #0]
 8009396:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    npcb->state = SYN_RCVD;
 800939a:	2303      	movs	r3, #3
 800939c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    npcb->rcv_nxt = seqno + 1;
 80093a0:	4f46      	ldr	r7, [pc, #280]	; (80094bc <tcp_listen_input+0x1dc>)
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	3301      	adds	r3, #1
 80093a6:	64e3      	str	r3, [r4, #76]	; 0x4c
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80093a8:	6563      	str	r3, [r4, #84]	; 0x54
    iss = tcp_next_iss(npcb);
 80093aa:	4620      	mov	r0, r4
 80093ac:	f7fe ff28 	bl	8008200 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 80093b0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    npcb->snd_nxt = iss;
 80093b4:	67a0      	str	r0, [r4, #120]	; 0x78
    npcb->lastack = iss;
 80093b6:	66e0      	str	r0, [r4, #108]	; 0x6c
    npcb->snd_lbb = iss;
 80093b8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	3b01      	subs	r3, #1
 80093c0:	67e3      	str	r3, [r4, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 80093c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80093c4:	63a3      	str	r3, [r4, #56]	; 0x38
    npcb->listener = pcb;
 80093c6:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80093ca:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 80093ce:	f003 030c 	and.w	r3, r3, #12
 80093d2:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    npcb->netif_idx = pcb->netif_idx;
 80093d6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80093da:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    TCP_REG_ACTIVE(npcb);
 80093de:	4b3a      	ldr	r3, [pc, #232]	; (80094c8 <tcp_listen_input+0x1e8>)
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	6362      	str	r2, [r4, #52]	; 0x34
 80093e4:	601c      	str	r4, [r3, #0]
 80093e6:	f002 fdc9 	bl	800bf7c <tcp_timer_needed>
 80093ea:	4b38      	ldr	r3, [pc, #224]	; (80094cc <tcp_listen_input+0x1ec>)
 80093ec:	2201      	movs	r2, #1
 80093ee:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80093f0:	4620      	mov	r0, r4
 80093f2:	f7ff fe91 	bl	8009118 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80093f6:	6833      	ldr	r3, [r6, #0]
 80093f8:	89db      	ldrh	r3, [r3, #14]
 80093fa:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    npcb->snd_wnd_max = npcb->snd_wnd;
 80093fe:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009402:	f8b4 505a 	ldrh.w	r5, [r4, #90]	; 0x5a
 8009406:	f114 0618 	adds.w	r6, r4, #24
 800940a:	d003      	beq.n	8009414 <tcp_listen_input+0x134>
 800940c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8009410:	2b06      	cmp	r3, #6
 8009412:	d039      	beq.n	8009488 <tcp_listen_input+0x1a8>
 8009414:	f104 0018 	add.w	r0, r4, #24
 8009418:	f005 ffca 	bl	800f3b0 <ip4_route>
 800941c:	4601      	mov	r1, r0
 800941e:	4632      	mov	r2, r6
 8009420:	4628      	mov	r0, r5
 8009422:	f7fe ff09 	bl	8008238 <tcp_eff_send_mss_netif>
 8009426:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800942a:	2112      	movs	r1, #18
 800942c:	4620      	mov	r0, r4
 800942e:	f002 f84f 	bl	800b4d0 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8009432:	2800      	cmp	r0, #0
 8009434:	d12e      	bne.n	8009494 <tcp_listen_input+0x1b4>
    tcp_output(npcb);
 8009436:	4620      	mov	r0, r4
 8009438:	f002 faa0 	bl	800b97c <tcp_output>
 800943c:	e762      	b.n	8009304 <tcp_listen_input+0x24>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800943e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8009440:	2b00      	cmp	r3, #0
 8009442:	f43f af5f 	beq.w	8009304 <tcp_listen_input+0x24>
 8009446:	f04f 32ff 	mov.w	r2, #4294967295
 800944a:	2100      	movs	r1, #0
 800944c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800944e:	4798      	blx	r3
      return;
 8009450:	e758      	b.n	8009304 <tcp_listen_input+0x24>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009452:	4b1c      	ldr	r3, [pc, #112]	; (80094c4 <tcp_listen_input+0x1e4>)
 8009454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009456:	6002      	str	r2, [r0, #0]
 8009458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800945a:	6042      	str	r2, [r0, #4]
 800945c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800945e:	6082      	str	r2, [r0, #8]
 8009460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009462:	60c2      	str	r2, [r0, #12]
 8009464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009468:	7403      	strb	r3, [r0, #16]
 800946a:	e77f      	b.n	800936c <tcp_listen_input+0x8c>
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800946c:	4b15      	ldr	r3, [pc, #84]	; (80094c4 <tcp_listen_input+0x1e4>)
 800946e:	695a      	ldr	r2, [r3, #20]
 8009470:	61a2      	str	r2, [r4, #24]
 8009472:	699a      	ldr	r2, [r3, #24]
 8009474:	61e2      	str	r2, [r4, #28]
 8009476:	69da      	ldr	r2, [r3, #28]
 8009478:	6222      	str	r2, [r4, #32]
 800947a:	6a1a      	ldr	r2, [r3, #32]
 800947c:	6262      	str	r2, [r4, #36]	; 0x24
 800947e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009482:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009486:	e781      	b.n	800938c <tcp_listen_input+0xac>
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009488:	4631      	mov	r1, r6
 800948a:	4620      	mov	r0, r4
 800948c:	f007 f804 	bl	8010498 <ip6_route>
 8009490:	4601      	mov	r1, r0
 8009492:	e7c4      	b.n	800941e <tcp_listen_input+0x13e>
      tcp_abandon(npcb, 0);
 8009494:	2100      	movs	r1, #0
 8009496:	4620      	mov	r0, r4
 8009498:	f7fe ffb8 	bl	800840c <tcp_abandon>
      return;
 800949c:	e732      	b.n	8009304 <tcp_listen_input+0x24>
 800949e:	4770      	bx	lr
 80094a0:	20000640 	.word	0x20000640
 80094a4:	08016368 	.word	0x08016368
 80094a8:	08016400 	.word	0x08016400
 80094ac:	08015418 	.word	0x08015418
 80094b0:	20000668 	.word	0x20000668
 80094b4:	20003a14 	.word	0x20003a14
 80094b8:	20000676 	.word	0x20000676
 80094bc:	20000660 	.word	0x20000660
 80094c0:	2000063c 	.word	0x2000063c
 80094c4:	200039e8 	.word	0x200039e8
 80094c8:	20007b20 	.word	0x20007b20
 80094cc:	20007b1c 	.word	0x20007b1c

080094d0 <tcp_free_acked_segments>:
{
 80094d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094d4:	4606      	mov	r6, r0
 80094d6:	460c      	mov	r4, r1
 80094d8:	4699      	mov	r9, r3
  while (seg_list != NULL &&
 80094da:	e008      	b.n	80094ee <tcp_free_acked_segments+0x1e>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80094dc:	4b26      	ldr	r3, [pc, #152]	; (8009578 <tcp_free_acked_segments+0xa8>)
 80094de:	f240 4257 	movw	r2, #1111	; 0x457
 80094e2:	4926      	ldr	r1, [pc, #152]	; (800957c <tcp_free_acked_segments+0xac>)
 80094e4:	4826      	ldr	r0, [pc, #152]	; (8009580 <tcp_free_acked_segments+0xb0>)
 80094e6:	f00a fea5 	bl	8014234 <iprintf>
 80094ea:	e021      	b.n	8009530 <tcp_free_acked_segments+0x60>
{
 80094ec:	463c      	mov	r4, r7
  while (seg_list != NULL &&
 80094ee:	2c00      	cmp	r4, #0
 80094f0:	d03e      	beq.n	8009570 <tcp_free_acked_segments+0xa0>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80094f2:	68e3      	ldr	r3, [r4, #12]
 80094f4:	6858      	ldr	r0, [r3, #4]
 80094f6:	f7fc fe40 	bl	800617a <lwip_htonl>
 80094fa:	4605      	mov	r5, r0
 80094fc:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 8009500:	68e3      	ldr	r3, [r4, #12]
 8009502:	8998      	ldrh	r0, [r3, #12]
 8009504:	f7fc fe34 	bl	8006170 <lwip_htons>
 8009508:	f010 0f03 	tst.w	r0, #3
 800950c:	d02e      	beq.n	800956c <tcp_free_acked_segments+0x9c>
 800950e:	2001      	movs	r0, #1
 8009510:	4480      	add	r8, r0
 8009512:	4445      	add	r5, r8
 8009514:	4b1b      	ldr	r3, [pc, #108]	; (8009584 <tcp_free_acked_segments+0xb4>)
 8009516:	6818      	ldr	r0, [r3, #0]
 8009518:	1a2d      	subs	r5, r5, r0
  while (seg_list != NULL &&
 800951a:	2d00      	cmp	r5, #0
 800951c:	dc28      	bgt.n	8009570 <tcp_free_acked_segments+0xa0>
    seg_list = seg_list->next;
 800951e:	6827      	ldr	r7, [r4, #0]
    clen = pbuf_clen(next->p);
 8009520:	6860      	ldr	r0, [r4, #4]
 8009522:	f7fe fa9b 	bl	8007a5c <pbuf_clen>
 8009526:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009528:	f8b6 308e 	ldrh.w	r3, [r6, #142]	; 0x8e
 800952c:	4283      	cmp	r3, r0
 800952e:	d3d5      	bcc.n	80094dc <tcp_free_acked_segments+0xc>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009530:	f8b6 008e 	ldrh.w	r0, [r6, #142]	; 0x8e
 8009534:	1b45      	subs	r5, r0, r5
 8009536:	f8a6 508e 	strh.w	r5, [r6, #142]	; 0x8e
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800953a:	8923      	ldrh	r3, [r4, #8]
 800953c:	4a12      	ldr	r2, [pc, #72]	; (8009588 <tcp_free_acked_segments+0xb8>)
 800953e:	8811      	ldrh	r1, [r2, #0]
 8009540:	440b      	add	r3, r1
 8009542:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 8009544:	4620      	mov	r0, r4
 8009546:	f7fe fe1f 	bl	8008188 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800954a:	f8b6 308e 	ldrh.w	r3, [r6, #142]	; 0x8e
 800954e:	2b00      	cmp	r3, #0
 8009550:	d0cc      	beq.n	80094ec <tcp_free_acked_segments+0x1c>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009552:	2f00      	cmp	r7, #0
 8009554:	d1ca      	bne.n	80094ec <tcp_free_acked_segments+0x1c>
 8009556:	f1b9 0f00 	cmp.w	r9, #0
 800955a:	d1c7      	bne.n	80094ec <tcp_free_acked_segments+0x1c>
 800955c:	4b06      	ldr	r3, [pc, #24]	; (8009578 <tcp_free_acked_segments+0xa8>)
 800955e:	f240 4261 	movw	r2, #1121	; 0x461
 8009562:	490a      	ldr	r1, [pc, #40]	; (800958c <tcp_free_acked_segments+0xbc>)
 8009564:	4806      	ldr	r0, [pc, #24]	; (8009580 <tcp_free_acked_segments+0xb0>)
 8009566:	f00a fe65 	bl	8014234 <iprintf>
 800956a:	e7bf      	b.n	80094ec <tcp_free_acked_segments+0x1c>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800956c:	2000      	movs	r0, #0
 800956e:	e7cf      	b.n	8009510 <tcp_free_acked_segments+0x40>
}
 8009570:	4620      	mov	r0, r4
 8009572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009576:	bf00      	nop
 8009578:	08016368 	.word	0x08016368
 800957c:	08016420 	.word	0x08016420
 8009580:	08015418 	.word	0x08015418
 8009584:	2000063c 	.word	0x2000063c
 8009588:	20000654 	.word	0x20000654
 800958c:	08016448 	.word	0x08016448

08009590 <tcp_oos_insert_segment>:
{
 8009590:	b570      	push	{r4, r5, r6, lr}
 8009592:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009594:	4605      	mov	r5, r0
 8009596:	b160      	cbz	r0, 80095b2 <tcp_oos_insert_segment+0x22>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009598:	68eb      	ldr	r3, [r5, #12]
 800959a:	8998      	ldrh	r0, [r3, #12]
 800959c:	f7fc fde8 	bl	8006170 <lwip_htons>
 80095a0:	f010 0f01 	tst.w	r0, #1
 80095a4:	d01a      	beq.n	80095dc <tcp_oos_insert_segment+0x4c>
    tcp_segs_free(next);
 80095a6:	4620      	mov	r0, r4
 80095a8:	f7fe fdfb 	bl	80081a2 <tcp_segs_free>
    next = NULL;
 80095ac:	2400      	movs	r4, #0
  cseg->next = next;
 80095ae:	602c      	str	r4, [r5, #0]
}
 80095b0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80095b2:	4b1d      	ldr	r3, [pc, #116]	; (8009628 <tcp_oos_insert_segment+0x98>)
 80095b4:	f240 421f 	movw	r2, #1055	; 0x41f
 80095b8:	491c      	ldr	r1, [pc, #112]	; (800962c <tcp_oos_insert_segment+0x9c>)
 80095ba:	481d      	ldr	r0, [pc, #116]	; (8009630 <tcp_oos_insert_segment+0xa0>)
 80095bc:	f00a fe3a 	bl	8014234 <iprintf>
 80095c0:	e7ea      	b.n	8009598 <tcp_oos_insert_segment+0x8>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80095c2:	68eb      	ldr	r3, [r5, #12]
 80095c4:	899e      	ldrh	r6, [r3, #12]
 80095c6:	2001      	movs	r0, #1
 80095c8:	f7fc fdd2 	bl	8006170 <lwip_htons>
 80095cc:	68eb      	ldr	r3, [r5, #12]
 80095ce:	4306      	orrs	r6, r0
 80095d0:	819e      	strh	r6, [r3, #12]
      next = next->next;
 80095d2:	6826      	ldr	r6, [r4, #0]
      tcp_seg_free(old_seg);
 80095d4:	4620      	mov	r0, r4
 80095d6:	f7fe fdd7 	bl	8008188 <tcp_seg_free>
      next = next->next;
 80095da:	4634      	mov	r4, r6
    while (next &&
 80095dc:	b18c      	cbz	r4, 8009602 <tcp_oos_insert_segment+0x72>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80095de:	892b      	ldrh	r3, [r5, #8]
 80095e0:	4a14      	ldr	r2, [pc, #80]	; (8009634 <tcp_oos_insert_segment+0xa4>)
 80095e2:	6812      	ldr	r2, [r2, #0]
 80095e4:	4413      	add	r3, r2
 80095e6:	68e1      	ldr	r1, [r4, #12]
 80095e8:	684a      	ldr	r2, [r1, #4]
 80095ea:	8920      	ldrh	r0, [r4, #8]
 80095ec:	4402      	add	r2, r0
 80095ee:	1a9b      	subs	r3, r3, r2
    while (next &&
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	db06      	blt.n	8009602 <tcp_oos_insert_segment+0x72>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80095f4:	8988      	ldrh	r0, [r1, #12]
 80095f6:	f7fc fdbb 	bl	8006170 <lwip_htons>
 80095fa:	f010 0f01 	tst.w	r0, #1
 80095fe:	d0e8      	beq.n	80095d2 <tcp_oos_insert_segment+0x42>
 8009600:	e7df      	b.n	80095c2 <tcp_oos_insert_segment+0x32>
    if (next &&
 8009602:	2c00      	cmp	r4, #0
 8009604:	d0d3      	beq.n	80095ae <tcp_oos_insert_segment+0x1e>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009606:	892b      	ldrh	r3, [r5, #8]
 8009608:	4a0a      	ldr	r2, [pc, #40]	; (8009634 <tcp_oos_insert_segment+0xa4>)
 800960a:	6811      	ldr	r1, [r2, #0]
 800960c:	440b      	add	r3, r1
 800960e:	68e2      	ldr	r2, [r4, #12]
 8009610:	6852      	ldr	r2, [r2, #4]
 8009612:	1a9b      	subs	r3, r3, r2
    if (next &&
 8009614:	2b00      	cmp	r3, #0
 8009616:	ddca      	ble.n	80095ae <tcp_oos_insert_segment+0x1e>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009618:	1a52      	subs	r2, r2, r1
 800961a:	b291      	uxth	r1, r2
 800961c:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800961e:	6868      	ldr	r0, [r5, #4]
 8009620:	f7fe f9c8 	bl	80079b4 <pbuf_realloc>
 8009624:	e7c3      	b.n	80095ae <tcp_oos_insert_segment+0x1e>
 8009626:	bf00      	nop
 8009628:	08016368 	.word	0x08016368
 800962c:	08016468 	.word	0x08016468
 8009630:	08015418 	.word	0x08015418
 8009634:	20000660 	.word	0x20000660

08009638 <tcp_receive>:
{
 8009638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800963a:	4604      	mov	r4, r0
 800963c:	2800      	cmp	r0, #0
 800963e:	d075      	beq.n	800972c <tcp_receive+0xf4>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009640:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009644:	2b03      	cmp	r3, #3
 8009646:	d979      	bls.n	800973c <tcp_receive+0x104>
  if (flags & TCP_ACK) {
 8009648:	4bb9      	ldr	r3, [pc, #740]	; (8009930 <tcp_receive+0x2f8>)
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	f013 0f10 	tst.w	r3, #16
 8009650:	d03f      	beq.n	80096d2 <tcp_receive+0x9a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009652:	f8b4 0088 	ldrh.w	r0, [r4, #136]	; 0x88
 8009656:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800965a:	1886      	adds	r6, r0, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800965c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800965e:	4bb5      	ldr	r3, [pc, #724]	; (8009934 <tcp_receive+0x2fc>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	1acd      	subs	r5, r1, r3
 8009664:	2d00      	cmp	r5, #0
 8009666:	db0a      	blt.n	800967e <tcp_receive+0x46>
 8009668:	4299      	cmp	r1, r3
 800966a:	d06f      	beq.n	800974c <tcp_receive+0x114>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800966c:	49b2      	ldr	r1, [pc, #712]	; (8009938 <tcp_receive+0x300>)
 800966e:	6809      	ldr	r1, [r1, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009670:	428a      	cmp	r2, r1
 8009672:	d115      	bne.n	80096a0 <tcp_receive+0x68>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009674:	4ab1      	ldr	r2, [pc, #708]	; (800993c <tcp_receive+0x304>)
 8009676:	6812      	ldr	r2, [r2, #0]
 8009678:	89d2      	ldrh	r2, [r2, #14]
 800967a:	4290      	cmp	r0, r2
 800967c:	d210      	bcs.n	80096a0 <tcp_receive+0x68>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800967e:	4aaf      	ldr	r2, [pc, #700]	; (800993c <tcp_receive+0x304>)
 8009680:	6812      	ldr	r2, [r2, #0]
 8009682:	89d2      	ldrh	r2, [r2, #14]
 8009684:	b290      	uxth	r0, r2
 8009686:	f8a4 2088 	strh.w	r2, [r4, #136]	; 0x88
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800968a:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 800968e:	4288      	cmp	r0, r1
 8009690:	d901      	bls.n	8009696 <tcp_receive+0x5e>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009692:	f8a4 208a 	strh.w	r2, [r4, #138]	; 0x8a
      pcb->snd_wl1 = seqno;
 8009696:	67e3      	str	r3, [r4, #124]	; 0x7c
      pcb->snd_wl2 = ackno;
 8009698:	4ba7      	ldr	r3, [pc, #668]	; (8009938 <tcp_receive+0x300>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80096a0:	4ba5      	ldr	r3, [pc, #660]	; (8009938 <tcp_receive+0x300>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80096a6:	1a5a      	subs	r2, r3, r1
 80096a8:	2a00      	cmp	r2, #0
 80096aa:	dd55      	ble.n	8009758 <tcp_receive+0x120>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80096ac:	2a01      	cmp	r2, #1
 80096ae:	d404      	bmi.n	80096ba <tcp_receive+0x82>
 80096b0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80096b2:	1a9a      	subs	r2, r3, r2
 80096b4:	2a00      	cmp	r2, #0
 80096b6:	f340 8083 	ble.w	80097c0 <tcp_receive+0x188>
      tcp_send_empty_ack(pcb);
 80096ba:	4620      	mov	r0, r4
 80096bc:	f002 f91c 	bl	800b8f8 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80096c0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80096c2:	b133      	cbz	r3, 80096d2 <tcp_receive+0x9a>
 80096c4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80096c6:	499c      	ldr	r1, [pc, #624]	; (8009938 <tcp_receive+0x300>)
 80096c8:	6809      	ldr	r1, [r1, #0]
 80096ca:	1a52      	subs	r2, r2, r1
 80096cc:	2a00      	cmp	r2, #0
 80096ce:	f2c0 815e 	blt.w	800998e <tcp_receive+0x356>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80096d2:	4b9b      	ldr	r3, [pc, #620]	; (8009940 <tcp_receive+0x308>)
 80096d4:	881b      	ldrh	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f000 8489 	beq.w	8009fee <tcp_receive+0x9b6>
 80096dc:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80096e0:	2a06      	cmp	r2, #6
 80096e2:	f200 8484 	bhi.w	8009fee <tcp_receive+0x9b6>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80096e6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80096e8:	4a92      	ldr	r2, [pc, #584]	; (8009934 <tcp_receive+0x2fc>)
 80096ea:	6812      	ldr	r2, [r2, #0]
 80096ec:	1a8e      	subs	r6, r1, r2
 80096ee:	2e01      	cmp	r6, #1
 80096f0:	d405      	bmi.n	80096fe <tcp_receive+0xc6>
 80096f2:	4413      	add	r3, r2
 80096f4:	1acb      	subs	r3, r1, r3
 80096f6:	3301      	adds	r3, #1
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f340 8170 	ble.w	80099de <tcp_receive+0x3a6>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80096fe:	1a52      	subs	r2, r2, r1
 8009700:	2a00      	cmp	r2, #0
 8009702:	f2c0 81ae 	blt.w	8009a62 <tcp_receive+0x42a>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009706:	4b8b      	ldr	r3, [pc, #556]	; (8009934 <tcp_receive+0x2fc>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800970c:	1a5a      	subs	r2, r3, r1
 800970e:	2a00      	cmp	r2, #0
 8009710:	db07      	blt.n	8009722 <tcp_receive+0xea>
 8009712:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8009716:	440a      	add	r2, r1
 8009718:	1a9a      	subs	r2, r3, r2
 800971a:	3201      	adds	r2, #1
 800971c:	2a00      	cmp	r2, #0
 800971e:	f340 81a7 	ble.w	8009a70 <tcp_receive+0x438>
      tcp_send_empty_ack(pcb);
 8009722:	4620      	mov	r0, r4
 8009724:	f002 f8e8 	bl	800b8f8 <tcp_send_empty_ack>
 8009728:	f000 bc74 	b.w	800a014 <tcp_receive+0x9dc>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800972c:	4b85      	ldr	r3, [pc, #532]	; (8009944 <tcp_receive+0x30c>)
 800972e:	f240 427b 	movw	r2, #1147	; 0x47b
 8009732:	4985      	ldr	r1, [pc, #532]	; (8009948 <tcp_receive+0x310>)
 8009734:	4885      	ldr	r0, [pc, #532]	; (800994c <tcp_receive+0x314>)
 8009736:	f00a fd7d 	bl	8014234 <iprintf>
 800973a:	e781      	b.n	8009640 <tcp_receive+0x8>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800973c:	4b81      	ldr	r3, [pc, #516]	; (8009944 <tcp_receive+0x30c>)
 800973e:	f240 427c 	movw	r2, #1148	; 0x47c
 8009742:	4983      	ldr	r1, [pc, #524]	; (8009950 <tcp_receive+0x318>)
 8009744:	4881      	ldr	r0, [pc, #516]	; (800994c <tcp_receive+0x314>)
 8009746:	f00a fd75 	bl	8014234 <iprintf>
 800974a:	e77d      	b.n	8009648 <tcp_receive+0x10>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800974c:	497a      	ldr	r1, [pc, #488]	; (8009938 <tcp_receive+0x300>)
 800974e:	6809      	ldr	r1, [r1, #0]
 8009750:	1a51      	subs	r1, r2, r1
 8009752:	2900      	cmp	r1, #0
 8009754:	da8a      	bge.n	800966c <tcp_receive+0x34>
 8009756:	e792      	b.n	800967e <tcp_receive+0x46>
      if (tcplen == 0) {
 8009758:	4a79      	ldr	r2, [pc, #484]	; (8009940 <tcp_receive+0x308>)
 800975a:	8812      	ldrh	r2, [r2, #0]
 800975c:	b932      	cbnz	r2, 800976c <tcp_receive+0x134>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800975e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8009762:	f8b4 0088 	ldrh.w	r0, [r4, #136]	; 0x88
 8009766:	4402      	add	r2, r0
 8009768:	42b2      	cmp	r2, r6
 800976a:	d003      	beq.n	8009774 <tcp_receive+0x13c>
        pcb->dupacks = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8009772:	e7a5      	b.n	80096c0 <tcp_receive+0x88>
          if (pcb->rtime >= 0) {
 8009774:	f9b4 2058 	ldrsh.w	r2, [r4, #88]	; 0x58
 8009778:	2a00      	cmp	r2, #0
 800977a:	dbf7      	blt.n	800976c <tcp_receive+0x134>
            if (pcb->lastack == ackno) {
 800977c:	428b      	cmp	r3, r1
 800977e:	d1f5      	bne.n	800976c <tcp_receive+0x134>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009780:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8009784:	2bff      	cmp	r3, #255	; 0xff
 8009786:	d002      	beq.n	800978e <tcp_receive+0x156>
                ++pcb->dupacks;
 8009788:	3301      	adds	r3, #1
 800978a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
              if (pcb->dupacks > 3) {
 800978e:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8009792:	2b03      	cmp	r3, #3
 8009794:	d909      	bls.n	80097aa <tcp_receive+0x172>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009796:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
 800979a:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 800979e:	440a      	add	r2, r1
 80097a0:	b292      	uxth	r2, r2
 80097a2:	4291      	cmp	r1, r2
 80097a4:	d807      	bhi.n	80097b6 <tcp_receive+0x17e>
 80097a6:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
              if (pcb->dupacks >= 3) {
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d988      	bls.n	80096c0 <tcp_receive+0x88>
                tcp_rexmit_fast(pcb);
 80097ae:	4620      	mov	r0, r4
 80097b0:	f002 f818 	bl	800b7e4 <tcp_rexmit_fast>
      if (!found_dupack) {
 80097b4:	e784      	b.n	80096c0 <tcp_receive+0x88>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80097b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097ba:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
 80097be:	e7f4      	b.n	80097aa <tcp_receive+0x172>
      if (pcb->flags & TF_INFR) {
 80097c0:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 80097c4:	f012 0f04 	tst.w	r2, #4
 80097c8:	d00a      	beq.n	80097e0 <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 80097ca:	f022 0204 	bic.w	r2, r2, #4
 80097ce:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
        pcb->cwnd = pcb->ssthresh;
 80097d2:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
 80097d6:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
        pcb->bytes_acked = 0;
 80097da:	2200      	movs	r2, #0
 80097dc:	f8a4 2092 	strh.w	r2, [r4, #146]	; 0x92
      pcb->nrtx = 0;
 80097e0:	2000      	movs	r0, #0
 80097e2:	f884 006a 	strb.w	r0, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80097e6:	f9b4 5064 	ldrsh.w	r5, [r4, #100]	; 0x64
 80097ea:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 80097ee:	eb02 02e5 	add.w	r2, r2, r5, asr #3
 80097f2:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	b289      	uxth	r1, r1
 80097fa:	1a51      	subs	r1, r2, r1
 80097fc:	b289      	uxth	r1, r1
      pcb->dupacks = 0;
 80097fe:	f884 006b 	strb.w	r0, [r4, #107]	; 0x6b
      pcb->lastack = ackno;
 8009802:	66e3      	str	r3, [r4, #108]	; 0x6c
      if (pcb->state >= ESTABLISHED) {
 8009804:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009808:	2b03      	cmp	r3, #3
 800980a:	d919      	bls.n	8009840 <tcp_receive+0x208>
        if (pcb->cwnd < pcb->ssthresh) {
 800980c:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
 8009810:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 8009814:	429a      	cmp	r2, r3
 8009816:	d260      	bcs.n	80098da <tcp_receive+0x2a2>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009818:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800981c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8009820:	d054      	beq.n	80098cc <tcp_receive+0x294>
 8009822:	2301      	movs	r3, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009824:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8009828:	fb13 f300 	smulbb	r3, r3, r0
 800982c:	b29b      	uxth	r3, r3
          TCP_WND_INC(pcb->cwnd, increase);
 800982e:	428b      	cmp	r3, r1
 8009830:	bf94      	ite	ls
 8009832:	18d1      	addls	r1, r2, r3
 8009834:	1851      	addhi	r1, r2, r1
 8009836:	b289      	uxth	r1, r1
 8009838:	428a      	cmp	r2, r1
 800983a:	d849      	bhi.n	80098d0 <tcp_receive+0x298>
 800983c:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009840:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009844:	4a43      	ldr	r2, [pc, #268]	; (8009954 <tcp_receive+0x31c>)
 8009846:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800984a:	4620      	mov	r0, r4
 800984c:	f7ff fe40 	bl	80094d0 <tcp_free_acked_segments>
 8009850:	4603      	mov	r3, r0
 8009852:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009856:	4a40      	ldr	r2, [pc, #256]	; (8009958 <tcp_receive+0x320>)
 8009858:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800985c:	4620      	mov	r0, r4
 800985e:	f7ff fe37 	bl	80094d0 <tcp_free_acked_segments>
 8009862:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
      if (pcb->unacked == NULL) {
 8009866:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800986a:	2b00      	cmp	r3, #0
 800986c:	d057      	beq.n	800991e <tcp_receive+0x2e6>
        pcb->rtime = 0;
 800986e:	2300      	movs	r3, #0
 8009870:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
      pcb->polltmr = 0;
 8009874:	2300      	movs	r3, #0
 8009876:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      if (pcb->unsent == NULL) {
 800987a:	2800      	cmp	r0, #0
 800987c:	d054      	beq.n	8009928 <tcp_receive+0x2f0>
      if (ip_current_is_v6()) {
 800987e:	4b37      	ldr	r3, [pc, #220]	; (800995c <tcp_receive+0x324>)
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	b113      	cbz	r3, 800988a <tcp_receive+0x252>
        nd6_reachability_hint(ip6_current_src_addr());
 8009884:	4836      	ldr	r0, [pc, #216]	; (8009960 <tcp_receive+0x328>)
 8009886:	f00a fa93 	bl	8013db0 <nd6_reachability_hint>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800988a:	f8b4 308c 	ldrh.w	r3, [r4, #140]	; 0x8c
 800988e:	4a35      	ldr	r2, [pc, #212]	; (8009964 <tcp_receive+0x32c>)
 8009890:	8812      	ldrh	r2, [r2, #0]
 8009892:	4413      	add	r3, r2
 8009894:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
      if (pcb->flags & TF_RTO) {
 8009898:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800989c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80098a0:	f43f af0e 	beq.w	80096c0 <tcp_receive+0x88>
        if (pcb->unacked == NULL) {
 80098a4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d05d      	beq.n	8009968 <tcp_receive+0x330>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80098ac:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	6858      	ldr	r0, [r3, #4]
 80098b2:	f7fc fc62 	bl	800617a <lwip_htonl>
 80098b6:	1a2d      	subs	r5, r5, r0
 80098b8:	2d00      	cmp	r5, #0
 80098ba:	f73f af01 	bgt.w	80096c0 <tcp_receive+0x88>
          tcp_clear_flags(pcb, TF_RTO);
 80098be:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80098c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098c6:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 80098ca:	e6f9      	b.n	80096c0 <tcp_receive+0x88>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80098cc:	2302      	movs	r3, #2
 80098ce:	e7a9      	b.n	8009824 <tcp_receive+0x1ec>
          TCP_WND_INC(pcb->cwnd, increase);
 80098d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80098d4:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 80098d8:	e7b2      	b.n	8009840 <tcp_receive+0x208>
          TCP_WND_INC(pcb->bytes_acked, acked);
 80098da:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
 80098de:	4419      	add	r1, r3
 80098e0:	b289      	uxth	r1, r1
 80098e2:	428b      	cmp	r3, r1
 80098e4:	d811      	bhi.n	800990a <tcp_receive+0x2d2>
 80098e6:	f8a4 1092 	strh.w	r1, [r4, #146]	; 0x92
          if (pcb->bytes_acked >= pcb->cwnd) {
 80098ea:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d8a6      	bhi.n	8009840 <tcp_receive+0x208>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80098f2:	1a9b      	subs	r3, r3, r2
 80098f4:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80098f8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80098fc:	4413      	add	r3, r2
 80098fe:	b29b      	uxth	r3, r3
 8009900:	429a      	cmp	r2, r3
 8009902:	d807      	bhi.n	8009914 <tcp_receive+0x2dc>
 8009904:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 8009908:	e79a      	b.n	8009840 <tcp_receive+0x208>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800990a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800990e:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
 8009912:	e7ea      	b.n	80098ea <tcp_receive+0x2b2>
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009914:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009918:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 800991c:	e790      	b.n	8009840 <tcp_receive+0x208>
        pcb->rtime = -1;
 800991e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009922:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 8009926:	e7a5      	b.n	8009874 <tcp_receive+0x23c>
        pcb->unsent_oversize = 0;
 8009928:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
 800992c:	e7a7      	b.n	800987e <tcp_receive+0x246>
 800992e:	bf00      	nop
 8009930:	20000640 	.word	0x20000640
 8009934:	20000660 	.word	0x20000660
 8009938:	2000063c 	.word	0x2000063c
 800993c:	20000668 	.word	0x20000668
 8009940:	20000676 	.word	0x20000676
 8009944:	08016368 	.word	0x08016368
 8009948:	08016490 	.word	0x08016490
 800994c:	08015418 	.word	0x08015418
 8009950:	080164ac 	.word	0x080164ac
 8009954:	080164c8 	.word	0x080164c8
 8009958:	080164d0 	.word	0x080164d0
 800995c:	200039e8 	.word	0x200039e8
 8009960:	200039fc 	.word	0x200039fc
 8009964:	20000654 	.word	0x20000654
          if ((pcb->unsent == NULL) ||
 8009968:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800996c:	b143      	cbz	r3, 8009980 <tcp_receive+0x348>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800996e:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	6858      	ldr	r0, [r3, #4]
 8009974:	f7fc fc01 	bl	800617a <lwip_htonl>
 8009978:	1a2d      	subs	r5, r5, r0
          if ((pcb->unsent == NULL) ||
 800997a:	2d00      	cmp	r5, #0
 800997c:	f73f aea0 	bgt.w	80096c0 <tcp_receive+0x88>
            tcp_clear_flags(pcb, TF_RTO);
 8009980:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8009984:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009988:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 800998c:	e698      	b.n	80096c0 <tcp_receive+0x88>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800998e:	4aac      	ldr	r2, [pc, #688]	; (8009c40 <tcp_receive+0x608>)
 8009990:	8816      	ldrh	r6, [r2, #0]
 8009992:	b29b      	uxth	r3, r3
 8009994:	1af2      	subs	r2, r6, r3
 8009996:	b292      	uxth	r2, r2
      m = (s16_t)(m - (pcb->sa >> 3));
 8009998:	f9b4 0064 	ldrsh.w	r0, [r4, #100]	; 0x64
 800999c:	f3c0 05cf 	ubfx	r5, r0, #3, #16
 80099a0:	1b52      	subs	r2, r2, r5
 80099a2:	b211      	sxth	r1, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 80099a4:	b280      	uxth	r0, r0
 80099a6:	fa10 f282 	uxtah	r2, r0, r2
 80099aa:	b212      	sxth	r2, r2
 80099ac:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
      if (m < 0) {
 80099b0:	2900      	cmp	r1, #0
 80099b2:	db10      	blt.n	80099d6 <tcp_receive+0x39e>
      m = (s16_t)(m - (pcb->sv >> 2));
 80099b4:	f9b4 3066 	ldrsh.w	r3, [r4, #102]	; 0x66
 80099b8:	eba1 01a3 	sub.w	r1, r1, r3, asr #2
      pcb->sv = (s16_t)(pcb->sv + m);
 80099bc:	b29b      	uxth	r3, r3
 80099be:	fa13 f181 	uxtah	r1, r3, r1
 80099c2:	f8a4 1066 	strh.w	r1, [r4, #102]	; 0x66
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80099c6:	10d2      	asrs	r2, r2, #3
 80099c8:	fa12 f281 	uxtah	r2, r2, r1
 80099cc:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
      pcb->rttest = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80099d4:	e67d      	b.n	80096d2 <tcp_receive+0x9a>
        m = (s16_t) - m;
 80099d6:	1b9b      	subs	r3, r3, r6
 80099d8:	442b      	add	r3, r5
 80099da:	b219      	sxth	r1, r3
 80099dc:	e7ea      	b.n	80099b4 <tcp_receive+0x37c>
      struct pbuf *p = inseg.p;
 80099de:	4b99      	ldr	r3, [pc, #612]	; (8009c44 <tcp_receive+0x60c>)
 80099e0:	685d      	ldr	r5, [r3, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80099e2:	b1dd      	cbz	r5, 8009a1c <tcp_receive+0x3e4>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80099e4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80099e8:	429e      	cmp	r6, r3
 80099ea:	d81f      	bhi.n	8009a2c <tcp_receive+0x3f4>
      off = (u16_t)off32;
 80099ec:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80099ee:	4b95      	ldr	r3, [pc, #596]	; (8009c44 <tcp_receive+0x60c>)
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	891b      	ldrh	r3, [r3, #8]
 80099f4:	42b3      	cmp	r3, r6
 80099f6:	d321      	bcc.n	8009a3c <tcp_receive+0x404>
      inseg.len -= off;
 80099f8:	4b92      	ldr	r3, [pc, #584]	; (8009c44 <tcp_receive+0x60c>)
 80099fa:	891a      	ldrh	r2, [r3, #8]
 80099fc:	1b92      	subs	r2, r2, r6
 80099fe:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	891a      	ldrh	r2, [r3, #8]
 8009a04:	1b92      	subs	r2, r2, r6
 8009a06:	b292      	uxth	r2, r2
      while (p->len < off) {
 8009a08:	8969      	ldrh	r1, [r5, #10]
 8009a0a:	42b1      	cmp	r1, r6
 8009a0c:	d21e      	bcs.n	8009a4c <tcp_receive+0x414>
        off -= p->len;
 8009a0e:	1a71      	subs	r1, r6, r1
 8009a10:	b28e      	uxth	r6, r1
        p->tot_len = new_tot_len;
 8009a12:	812a      	strh	r2, [r5, #8]
        p->len = 0;
 8009a14:	2300      	movs	r3, #0
 8009a16:	816b      	strh	r3, [r5, #10]
        p = p->next;
 8009a18:	682d      	ldr	r5, [r5, #0]
 8009a1a:	e7f5      	b.n	8009a08 <tcp_receive+0x3d0>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009a1c:	4b8a      	ldr	r3, [pc, #552]	; (8009c48 <tcp_receive+0x610>)
 8009a1e:	f240 5294 	movw	r2, #1428	; 0x594
 8009a22:	498a      	ldr	r1, [pc, #552]	; (8009c4c <tcp_receive+0x614>)
 8009a24:	488a      	ldr	r0, [pc, #552]	; (8009c50 <tcp_receive+0x618>)
 8009a26:	f00a fc05 	bl	8014234 <iprintf>
 8009a2a:	e7db      	b.n	80099e4 <tcp_receive+0x3ac>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009a2c:	4b86      	ldr	r3, [pc, #536]	; (8009c48 <tcp_receive+0x610>)
 8009a2e:	f240 5295 	movw	r2, #1429	; 0x595
 8009a32:	4988      	ldr	r1, [pc, #544]	; (8009c54 <tcp_receive+0x61c>)
 8009a34:	4886      	ldr	r0, [pc, #536]	; (8009c50 <tcp_receive+0x618>)
 8009a36:	f00a fbfd 	bl	8014234 <iprintf>
 8009a3a:	e7d7      	b.n	80099ec <tcp_receive+0x3b4>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009a3c:	4b82      	ldr	r3, [pc, #520]	; (8009c48 <tcp_receive+0x610>)
 8009a3e:	f240 5297 	movw	r2, #1431	; 0x597
 8009a42:	4985      	ldr	r1, [pc, #532]	; (8009c58 <tcp_receive+0x620>)
 8009a44:	4882      	ldr	r0, [pc, #520]	; (8009c50 <tcp_receive+0x618>)
 8009a46:	f00a fbf5 	bl	8014234 <iprintf>
 8009a4a:	e7d5      	b.n	80099f8 <tcp_receive+0x3c0>
      pbuf_remove_header(p, off);
 8009a4c:	4631      	mov	r1, r6
 8009a4e:	4628      	mov	r0, r5
 8009a50:	f7fd fe5a 	bl	8007708 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009a54:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009a56:	4a81      	ldr	r2, [pc, #516]	; (8009c5c <tcp_receive+0x624>)
 8009a58:	6013      	str	r3, [r2, #0]
 8009a5a:	4a7a      	ldr	r2, [pc, #488]	; (8009c44 <tcp_receive+0x60c>)
 8009a5c:	68d2      	ldr	r2, [r2, #12]
 8009a5e:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009a60:	e651      	b.n	8009706 <tcp_receive+0xce>
        tcp_ack_now(pcb);
 8009a62:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8009a66:	f043 0302 	orr.w	r3, r3, #2
 8009a6a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 8009a6e:	e64a      	b.n	8009706 <tcp_receive+0xce>
      if (pcb->rcv_nxt == seqno) {
 8009a70:	428b      	cmp	r3, r1
 8009a72:	d006      	beq.n	8009a82 <tcp_receive+0x44a>
        if (pcb->ooseq == NULL) {
 8009a74:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
 8009a78:	2d00      	cmp	r5, #0
 8009a7a:	f000 81c7 	beq.w	8009e0c <tcp_receive+0x7d4>
          struct tcp_seg *next, *prev = NULL;
 8009a7e:	2600      	movs	r6, #0
 8009a80:	e1eb      	b.n	8009e5a <tcp_receive+0x822>
        tcplen = TCP_TCPLEN(&inseg);
 8009a82:	4b70      	ldr	r3, [pc, #448]	; (8009c44 <tcp_receive+0x60c>)
 8009a84:	891d      	ldrh	r5, [r3, #8]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	8998      	ldrh	r0, [r3, #12]
 8009a8a:	f7fc fb71 	bl	8006170 <lwip_htons>
 8009a8e:	f010 0f03 	tst.w	r0, #3
 8009a92:	d017      	beq.n	8009ac4 <tcp_receive+0x48c>
 8009a94:	2301      	movs	r3, #1
 8009a96:	442b      	add	r3, r5
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	4a71      	ldr	r2, [pc, #452]	; (8009c60 <tcp_receive+0x628>)
 8009a9c:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 8009a9e:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d810      	bhi.n	8009ac8 <tcp_receive+0x490>
        if (pcb->ooseq != NULL) {
 8009aa6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d063      	beq.n	8009b76 <tcp_receive+0x53e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009aae:	4b65      	ldr	r3, [pc, #404]	; (8009c44 <tcp_receive+0x60c>)
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	8998      	ldrh	r0, [r3, #12]
 8009ab4:	f7fc fb5c 	bl	8006170 <lwip_htons>
 8009ab8:	f010 0f01 	tst.w	r0, #1
 8009abc:	d157      	bne.n	8009b6e <tcp_receive+0x536>
            struct tcp_seg *next = pcb->ooseq;
 8009abe:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
            while (next &&
 8009ac2:	e08e      	b.n	8009be2 <tcp_receive+0x5aa>
        tcplen = TCP_TCPLEN(&inseg);
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	e7e6      	b.n	8009a96 <tcp_receive+0x45e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009ac8:	4b5e      	ldr	r3, [pc, #376]	; (8009c44 <tcp_receive+0x60c>)
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	8998      	ldrh	r0, [r3, #12]
 8009ace:	f7fc fb4f 	bl	8006170 <lwip_htons>
 8009ad2:	f010 0f01 	tst.w	r0, #1
 8009ad6:	d131      	bne.n	8009b3c <tcp_receive+0x504>
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009ad8:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8009adc:	4b59      	ldr	r3, [pc, #356]	; (8009c44 <tcp_receive+0x60c>)
 8009ade:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	8998      	ldrh	r0, [r3, #12]
 8009ae4:	f7fc fb44 	bl	8006170 <lwip_htons>
 8009ae8:	f010 0f02 	tst.w	r0, #2
 8009aec:	d003      	beq.n	8009af6 <tcp_receive+0x4be>
            inseg.len -= 1;
 8009aee:	4a55      	ldr	r2, [pc, #340]	; (8009c44 <tcp_receive+0x60c>)
 8009af0:	8913      	ldrh	r3, [r2, #8]
 8009af2:	3b01      	subs	r3, #1
 8009af4:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8009af6:	4e53      	ldr	r6, [pc, #332]	; (8009c44 <tcp_receive+0x60c>)
 8009af8:	8931      	ldrh	r1, [r6, #8]
 8009afa:	6870      	ldr	r0, [r6, #4]
 8009afc:	f7fd ff5a 	bl	80079b4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009b00:	8935      	ldrh	r5, [r6, #8]
 8009b02:	68f3      	ldr	r3, [r6, #12]
 8009b04:	8998      	ldrh	r0, [r3, #12]
 8009b06:	f7fc fb33 	bl	8006170 <lwip_htons>
 8009b0a:	f010 0f03 	tst.w	r0, #3
 8009b0e:	d027      	beq.n	8009b60 <tcp_receive+0x528>
 8009b10:	2301      	movs	r3, #1
 8009b12:	442b      	add	r3, r5
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	4a52      	ldr	r2, [pc, #328]	; (8009c60 <tcp_receive+0x628>)
 8009b18:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009b1a:	4a50      	ldr	r2, [pc, #320]	; (8009c5c <tcp_receive+0x624>)
 8009b1c:	6812      	ldr	r2, [r2, #0]
 8009b1e:	4413      	add	r3, r2
 8009b20:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009b22:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8009b26:	440a      	add	r2, r1
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d0bc      	beq.n	8009aa6 <tcp_receive+0x46e>
 8009b2c:	4b46      	ldr	r3, [pc, #280]	; (8009c48 <tcp_receive+0x610>)
 8009b2e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009b32:	494c      	ldr	r1, [pc, #304]	; (8009c64 <tcp_receive+0x62c>)
 8009b34:	4846      	ldr	r0, [pc, #280]	; (8009c50 <tcp_receive+0x618>)
 8009b36:	f00a fb7d 	bl	8014234 <iprintf>
 8009b3a:	e7b4      	b.n	8009aa6 <tcp_receive+0x46e>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009b3c:	4e41      	ldr	r6, [pc, #260]	; (8009c44 <tcp_receive+0x60c>)
 8009b3e:	68f3      	ldr	r3, [r6, #12]
 8009b40:	8998      	ldrh	r0, [r3, #12]
 8009b42:	b205      	sxth	r5, r0
 8009b44:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8009b48:	b280      	uxth	r0, r0
 8009b4a:	f7fc fb11 	bl	8006170 <lwip_htons>
 8009b4e:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8009b52:	f7fc fb0d 	bl	8006170 <lwip_htons>
 8009b56:	b203      	sxth	r3, r0
 8009b58:	68f2      	ldr	r2, [r6, #12]
 8009b5a:	431d      	orrs	r5, r3
 8009b5c:	8195      	strh	r5, [r2, #12]
 8009b5e:	e7bb      	b.n	8009ad8 <tcp_receive+0x4a0>
          tcplen = TCP_TCPLEN(&inseg);
 8009b60:	2300      	movs	r3, #0
 8009b62:	e7d6      	b.n	8009b12 <tcp_receive+0x4da>
              pcb->ooseq = pcb->ooseq->next;
 8009b64:	6803      	ldr	r3, [r0, #0]
 8009b66:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
              tcp_seg_free(old_ooseq);
 8009b6a:	f7fe fb0d 	bl	8008188 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009b6e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8009b72:	2800      	cmp	r0, #0
 8009b74:	d1f6      	bne.n	8009b64 <tcp_receive+0x52c>
        pcb->rcv_nxt = seqno + tcplen;
 8009b76:	4b3a      	ldr	r3, [pc, #232]	; (8009c60 <tcp_receive+0x628>)
 8009b78:	881a      	ldrh	r2, [r3, #0]
 8009b7a:	4b38      	ldr	r3, [pc, #224]	; (8009c5c <tcp_receive+0x624>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4413      	add	r3, r2
 8009b80:	64e3      	str	r3, [r4, #76]	; 0x4c
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009b82:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8009b86:	429a      	cmp	r2, r3
 8009b88:	f200 80b1 	bhi.w	8009cee <tcp_receive+0x6b6>
        pcb->rcv_wnd -= tcplen;
 8009b8c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8009b90:	4a33      	ldr	r2, [pc, #204]	; (8009c60 <tcp_receive+0x628>)
 8009b92:	8812      	ldrh	r2, [r2, #0]
 8009b94:	1a9b      	subs	r3, r3, r2
 8009b96:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
        tcp_update_rcv_ann_wnd(pcb);
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	f7fe fa74 	bl	8008088 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8009ba0:	4b28      	ldr	r3, [pc, #160]	; (8009c44 <tcp_receive+0x60c>)
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	891a      	ldrh	r2, [r3, #8]
 8009ba6:	b122      	cbz	r2, 8009bb2 <tcp_receive+0x57a>
          recv_data = inseg.p;
 8009ba8:	4a2f      	ldr	r2, [pc, #188]	; (8009c68 <tcp_receive+0x630>)
 8009baa:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 8009bac:	4b25      	ldr	r3, [pc, #148]	; (8009c44 <tcp_receive+0x60c>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009bb2:	4b24      	ldr	r3, [pc, #144]	; (8009c44 <tcp_receive+0x60c>)
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	8998      	ldrh	r0, [r3, #12]
 8009bb8:	f7fc fada 	bl	8006170 <lwip_htons>
 8009bbc:	f010 0f01 	tst.w	r0, #1
 8009bc0:	f000 80c5 	beq.w	8009d4e <tcp_receive+0x716>
          recv_flags |= TF_GOT_FIN;
 8009bc4:	4a29      	ldr	r2, [pc, #164]	; (8009c6c <tcp_receive+0x634>)
 8009bc6:	7813      	ldrb	r3, [r2, #0]
 8009bc8:	f043 0320 	orr.w	r3, r3, #32
 8009bcc:	7013      	strb	r3, [r2, #0]
 8009bce:	e0be      	b.n	8009d4e <tcp_receive+0x716>
                tcplen = TCP_TCPLEN(&inseg);
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	441f      	add	r7, r3
 8009bd4:	4b22      	ldr	r3, [pc, #136]	; (8009c60 <tcp_receive+0x628>)
 8009bd6:	801f      	strh	r7, [r3, #0]
              next = next->next;
 8009bd8:	682e      	ldr	r6, [r5, #0]
              tcp_seg_free(tmp);
 8009bda:	4628      	mov	r0, r5
 8009bdc:	f7fe fad4 	bl	8008188 <tcp_seg_free>
              next = next->next;
 8009be0:	4635      	mov	r5, r6
            while (next &&
 8009be2:	2d00      	cmp	r5, #0
 8009be4:	d044      	beq.n	8009c70 <tcp_receive+0x638>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009be6:	4b1e      	ldr	r3, [pc, #120]	; (8009c60 <tcp_receive+0x628>)
 8009be8:	881b      	ldrh	r3, [r3, #0]
 8009bea:	4a1c      	ldr	r2, [pc, #112]	; (8009c5c <tcp_receive+0x624>)
 8009bec:	6812      	ldr	r2, [r2, #0]
 8009bee:	4413      	add	r3, r2
 8009bf0:	68e9      	ldr	r1, [r5, #12]
 8009bf2:	684a      	ldr	r2, [r1, #4]
 8009bf4:	8928      	ldrh	r0, [r5, #8]
 8009bf6:	4402      	add	r2, r0
 8009bf8:	1a9b      	subs	r3, r3, r2
            while (next &&
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	db38      	blt.n	8009c70 <tcp_receive+0x638>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009bfe:	8988      	ldrh	r0, [r1, #12]
 8009c00:	f7fc fab6 	bl	8006170 <lwip_htons>
 8009c04:	f010 0f01 	tst.w	r0, #1
 8009c08:	d0e6      	beq.n	8009bd8 <tcp_receive+0x5a0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009c0a:	4b0e      	ldr	r3, [pc, #56]	; (8009c44 <tcp_receive+0x60c>)
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	8998      	ldrh	r0, [r3, #12]
 8009c10:	f7fc faae 	bl	8006170 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009c14:	f010 0f02 	tst.w	r0, #2
 8009c18:	d1de      	bne.n	8009bd8 <tcp_receive+0x5a0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009c1a:	4e0a      	ldr	r6, [pc, #40]	; (8009c44 <tcp_receive+0x60c>)
 8009c1c:	68f3      	ldr	r3, [r6, #12]
 8009c1e:	899f      	ldrh	r7, [r3, #12]
 8009c20:	2001      	movs	r0, #1
 8009c22:	f7fc faa5 	bl	8006170 <lwip_htons>
 8009c26:	68f3      	ldr	r3, [r6, #12]
 8009c28:	4307      	orrs	r7, r0
 8009c2a:	819f      	strh	r7, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009c2c:	8937      	ldrh	r7, [r6, #8]
 8009c2e:	68f3      	ldr	r3, [r6, #12]
 8009c30:	8998      	ldrh	r0, [r3, #12]
 8009c32:	f7fc fa9d 	bl	8006170 <lwip_htons>
 8009c36:	f010 0f03 	tst.w	r0, #3
 8009c3a:	d0c9      	beq.n	8009bd0 <tcp_receive+0x598>
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e7c8      	b.n	8009bd2 <tcp_receive+0x59a>
 8009c40:	20007b24 	.word	0x20007b24
 8009c44:	20000644 	.word	0x20000644
 8009c48:	08016368 	.word	0x08016368
 8009c4c:	080164d8 	.word	0x080164d8
 8009c50:	08015418 	.word	0x08015418
 8009c54:	080164e8 	.word	0x080164e8
 8009c58:	080164f8 	.word	0x080164f8
 8009c5c:	20000660 	.word	0x20000660
 8009c60:	20000676 	.word	0x20000676
 8009c64:	08016508 	.word	0x08016508
 8009c68:	20000658 	.word	0x20000658
 8009c6c:	2000065c 	.word	0x2000065c
            if (next &&
 8009c70:	b14d      	cbz	r5, 8009c86 <tcp_receive+0x64e>
                TCP_SEQ_GT(seqno + tcplen,
 8009c72:	4b98      	ldr	r3, [pc, #608]	; (8009ed4 <tcp_receive+0x89c>)
 8009c74:	6819      	ldr	r1, [r3, #0]
 8009c76:	4b98      	ldr	r3, [pc, #608]	; (8009ed8 <tcp_receive+0x8a0>)
 8009c78:	881b      	ldrh	r3, [r3, #0]
 8009c7a:	440b      	add	r3, r1
 8009c7c:	68ea      	ldr	r2, [r5, #12]
 8009c7e:	6852      	ldr	r2, [r2, #4]
 8009c80:	1a9b      	subs	r3, r3, r2
            if (next &&
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	dc02      	bgt.n	8009c8c <tcp_receive+0x654>
            pcb->ooseq = next;
 8009c86:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
 8009c8a:	e774      	b.n	8009b76 <tcp_receive+0x53e>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009c8c:	1a52      	subs	r2, r2, r1
 8009c8e:	4b93      	ldr	r3, [pc, #588]	; (8009edc <tcp_receive+0x8a4>)
 8009c90:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	8998      	ldrh	r0, [r3, #12]
 8009c96:	f7fc fa6b 	bl	8006170 <lwip_htons>
 8009c9a:	f010 0f02 	tst.w	r0, #2
 8009c9e:	d003      	beq.n	8009ca8 <tcp_receive+0x670>
                inseg.len -= 1;
 8009ca0:	4a8e      	ldr	r2, [pc, #568]	; (8009edc <tcp_receive+0x8a4>)
 8009ca2:	8913      	ldrh	r3, [r2, #8]
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8009ca8:	4f8c      	ldr	r7, [pc, #560]	; (8009edc <tcp_receive+0x8a4>)
 8009caa:	8939      	ldrh	r1, [r7, #8]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7fd fe81 	bl	80079b4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009cb2:	893e      	ldrh	r6, [r7, #8]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	8998      	ldrh	r0, [r3, #12]
 8009cb8:	f7fc fa5a 	bl	8006170 <lwip_htons>
 8009cbc:	f010 0f03 	tst.w	r0, #3
 8009cc0:	d013      	beq.n	8009cea <tcp_receive+0x6b2>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	4433      	add	r3, r6
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	4a83      	ldr	r2, [pc, #524]	; (8009ed8 <tcp_receive+0x8a0>)
 8009cca:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009ccc:	4a81      	ldr	r2, [pc, #516]	; (8009ed4 <tcp_receive+0x89c>)
 8009cce:	6812      	ldr	r2, [r2, #0]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	68ea      	ldr	r2, [r5, #12]
 8009cd4:	6852      	ldr	r2, [r2, #4]
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d0d5      	beq.n	8009c86 <tcp_receive+0x64e>
 8009cda:	4b81      	ldr	r3, [pc, #516]	; (8009ee0 <tcp_receive+0x8a8>)
 8009cdc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009ce0:	4980      	ldr	r1, [pc, #512]	; (8009ee4 <tcp_receive+0x8ac>)
 8009ce2:	4881      	ldr	r0, [pc, #516]	; (8009ee8 <tcp_receive+0x8b0>)
 8009ce4:	f00a faa6 	bl	8014234 <iprintf>
 8009ce8:	e7cd      	b.n	8009c86 <tcp_receive+0x64e>
              tcplen = TCP_TCPLEN(&inseg);
 8009cea:	2300      	movs	r3, #0
 8009cec:	e7ea      	b.n	8009cc4 <tcp_receive+0x68c>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009cee:	4b7c      	ldr	r3, [pc, #496]	; (8009ee0 <tcp_receive+0x8a8>)
 8009cf0:	f240 6207 	movw	r2, #1543	; 0x607
 8009cf4:	497d      	ldr	r1, [pc, #500]	; (8009eec <tcp_receive+0x8b4>)
 8009cf6:	487c      	ldr	r0, [pc, #496]	; (8009ee8 <tcp_receive+0x8b0>)
 8009cf8:	f00a fa9c 	bl	8014234 <iprintf>
 8009cfc:	e746      	b.n	8009b8c <tcp_receive+0x554>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e038      	b.n	8009d74 <tcp_receive+0x73c>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009d02:	2300      	movs	r3, #0
 8009d04:	e045      	b.n	8009d92 <tcp_receive+0x75a>
 8009d06:	4b76      	ldr	r3, [pc, #472]	; (8009ee0 <tcp_receive+0x8a8>)
 8009d08:	f240 622b 	movw	r2, #1579	; 0x62b
 8009d0c:	4978      	ldr	r1, [pc, #480]	; (8009ef0 <tcp_receive+0x8b8>)
 8009d0e:	4876      	ldr	r0, [pc, #472]	; (8009ee8 <tcp_receive+0x8b0>)
 8009d10:	f00a fa90 	bl	8014234 <iprintf>
 8009d14:	e040      	b.n	8009d98 <tcp_receive+0x760>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009d16:	2300      	movs	r3, #0
 8009d18:	e047      	b.n	8009daa <tcp_receive+0x772>
              pbuf_cat(recv_data, cseg->p);
 8009d1a:	f7fd febf 	bl	8007a9c <pbuf_cat>
            cseg->p = NULL;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009d22:	68eb      	ldr	r3, [r5, #12]
 8009d24:	8998      	ldrh	r0, [r3, #12]
 8009d26:	f7fc fa23 	bl	8006170 <lwip_htons>
 8009d2a:	f010 0f01 	tst.w	r0, #1
 8009d2e:	d008      	beq.n	8009d42 <tcp_receive+0x70a>
            recv_flags |= TF_GOT_FIN;
 8009d30:	4a70      	ldr	r2, [pc, #448]	; (8009ef4 <tcp_receive+0x8bc>)
 8009d32:	7813      	ldrb	r3, [r2, #0]
 8009d34:	f043 0320 	orr.w	r3, r3, #32
 8009d38:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009d3a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009d3e:	2b04      	cmp	r3, #4
 8009d40:	d047      	beq.n	8009dd2 <tcp_receive+0x79a>
          pcb->ooseq = cseg->next;
 8009d42:	682b      	ldr	r3, [r5, #0]
 8009d44:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
          tcp_seg_free(cseg);
 8009d48:	4628      	mov	r0, r5
 8009d4a:	f7fe fa1d 	bl	8008188 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009d4e:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
 8009d52:	2d00      	cmp	r5, #0
 8009d54:	d041      	beq.n	8009dda <tcp_receive+0x7a2>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009d56:	68ea      	ldr	r2, [r5, #12]
 8009d58:	6853      	ldr	r3, [r2, #4]
 8009d5a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
        while (pcb->ooseq != NULL &&
 8009d5c:	428b      	cmp	r3, r1
 8009d5e:	d13c      	bne.n	8009dda <tcp_receive+0x7a2>
          seqno = pcb->ooseq->tcphdr->seqno;
 8009d60:	495c      	ldr	r1, [pc, #368]	; (8009ed4 <tcp_receive+0x89c>)
 8009d62:	600b      	str	r3, [r1, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009d64:	892e      	ldrh	r6, [r5, #8]
 8009d66:	8990      	ldrh	r0, [r2, #12]
 8009d68:	f7fc fa02 	bl	8006170 <lwip_htons>
 8009d6c:	f010 0f03 	tst.w	r0, #3
 8009d70:	d0c5      	beq.n	8009cfe <tcp_receive+0x6c6>
 8009d72:	2301      	movs	r3, #1
 8009d74:	441e      	add	r6, r3
 8009d76:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009d78:	4433      	add	r3, r6
 8009d7a:	64e3      	str	r3, [r4, #76]	; 0x4c
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009d7c:	f8b4 7050 	ldrh.w	r7, [r4, #80]	; 0x50
 8009d80:	892e      	ldrh	r6, [r5, #8]
 8009d82:	68eb      	ldr	r3, [r5, #12]
 8009d84:	8998      	ldrh	r0, [r3, #12]
 8009d86:	f7fc f9f3 	bl	8006170 <lwip_htons>
 8009d8a:	f010 0f03 	tst.w	r0, #3
 8009d8e:	d0b8      	beq.n	8009d02 <tcp_receive+0x6ca>
 8009d90:	2301      	movs	r3, #1
 8009d92:	441e      	add	r6, r3
 8009d94:	42b7      	cmp	r7, r6
 8009d96:	d3b6      	bcc.n	8009d06 <tcp_receive+0x6ce>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009d98:	892e      	ldrh	r6, [r5, #8]
 8009d9a:	68eb      	ldr	r3, [r5, #12]
 8009d9c:	8998      	ldrh	r0, [r3, #12]
 8009d9e:	f7fc f9e7 	bl	8006170 <lwip_htons>
 8009da2:	f010 0f03 	tst.w	r0, #3
 8009da6:	d0b6      	beq.n	8009d16 <tcp_receive+0x6de>
 8009da8:	2301      	movs	r3, #1
 8009daa:	441e      	add	r6, r3
 8009dac:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8009db0:	1b9b      	subs	r3, r3, r6
 8009db2:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
          tcp_update_rcv_ann_wnd(pcb);
 8009db6:	4620      	mov	r0, r4
 8009db8:	f7fe f966 	bl	8008088 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8009dbc:	6869      	ldr	r1, [r5, #4]
 8009dbe:	890b      	ldrh	r3, [r1, #8]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d0ae      	beq.n	8009d22 <tcp_receive+0x6ea>
            if (recv_data) {
 8009dc4:	4b4c      	ldr	r3, [pc, #304]	; (8009ef8 <tcp_receive+0x8c0>)
 8009dc6:	6818      	ldr	r0, [r3, #0]
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d1a6      	bne.n	8009d1a <tcp_receive+0x6e2>
              recv_data = cseg->p;
 8009dcc:	4b4a      	ldr	r3, [pc, #296]	; (8009ef8 <tcp_receive+0x8c0>)
 8009dce:	6019      	str	r1, [r3, #0]
 8009dd0:	e7a5      	b.n	8009d1e <tcp_receive+0x6e6>
              pcb->state = CLOSE_WAIT;
 8009dd2:	2307      	movs	r3, #7
 8009dd4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8009dd8:	e7b3      	b.n	8009d42 <tcp_receive+0x70a>
        tcp_ack(pcb);
 8009dda:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8009dde:	f013 0f01 	tst.w	r3, #1
 8009de2:	d00e      	beq.n	8009e02 <tcp_receive+0x7ca>
 8009de4:	f023 0301 	bic.w	r3, r3, #1
 8009de8:	f043 0302 	orr.w	r3, r3, #2
 8009dec:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        if (ip_current_is_v6()) {
 8009df0:	4b42      	ldr	r3, [pc, #264]	; (8009efc <tcp_receive+0x8c4>)
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f000 810d 	beq.w	800a014 <tcp_receive+0x9dc>
          nd6_reachability_hint(ip6_current_src_addr());
 8009dfa:	4841      	ldr	r0, [pc, #260]	; (8009f00 <tcp_receive+0x8c8>)
 8009dfc:	f009 ffd8 	bl	8013db0 <nd6_reachability_hint>
 8009e00:	e108      	b.n	800a014 <tcp_receive+0x9dc>
        tcp_ack(pcb);
 8009e02:	f043 0301 	orr.w	r3, r3, #1
 8009e06:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 8009e0a:	e7f1      	b.n	8009df0 <tcp_receive+0x7b8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009e0c:	4833      	ldr	r0, [pc, #204]	; (8009edc <tcp_receive+0x8a4>)
 8009e0e:	f7fe f9d3 	bl	80081b8 <tcp_seg_copy>
 8009e12:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
 8009e16:	e004      	b.n	8009e22 <tcp_receive+0x7ea>
              if (inseg.len > next->len) {
 8009e18:	4b30      	ldr	r3, [pc, #192]	; (8009edc <tcp_receive+0x8a4>)
 8009e1a:	891a      	ldrh	r2, [r3, #8]
 8009e1c:	892b      	ldrh	r3, [r5, #8]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d803      	bhi.n	8009e2a <tcp_receive+0x7f2>
        tcp_send_empty_ack(pcb);
 8009e22:	4620      	mov	r0, r4
 8009e24:	f001 fd68 	bl	800b8f8 <tcp_send_empty_ack>
 8009e28:	e0f4      	b.n	800a014 <tcp_receive+0x9dc>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009e2a:	482c      	ldr	r0, [pc, #176]	; (8009edc <tcp_receive+0x8a4>)
 8009e2c:	f7fe f9c4 	bl	80081b8 <tcp_seg_copy>
                if (cseg != NULL) {
 8009e30:	4603      	mov	r3, r0
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d0f5      	beq.n	8009e22 <tcp_receive+0x7ea>
                  if (prev != NULL) {
 8009e36:	b12e      	cbz	r6, 8009e44 <tcp_receive+0x80c>
                    prev->next = cseg;
 8009e38:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 8009e3a:	4629      	mov	r1, r5
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7ff fba7 	bl	8009590 <tcp_oos_insert_segment>
 8009e42:	e7ee      	b.n	8009e22 <tcp_receive+0x7ea>
                    pcb->ooseq = cseg;
 8009e44:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
 8009e48:	e7f7      	b.n	8009e3a <tcp_receive+0x802>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009e4a:	1a99      	subs	r1, r3, r2
 8009e4c:	2900      	cmp	r1, #0
 8009e4e:	db2a      	blt.n	8009ea6 <tcp_receive+0x86e>
              if (next->next == NULL &&
 8009e50:	6829      	ldr	r1, [r5, #0]
 8009e52:	462e      	mov	r6, r5
 8009e54:	2900      	cmp	r1, #0
 8009e56:	d038      	beq.n	8009eca <tcp_receive+0x892>
 8009e58:	460d      	mov	r5, r1
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009e5a:	2d00      	cmp	r5, #0
 8009e5c:	d0e1      	beq.n	8009e22 <tcp_receive+0x7ea>
            if (seqno == next->tcphdr->seqno) {
 8009e5e:	68e8      	ldr	r0, [r5, #12]
 8009e60:	6842      	ldr	r2, [r0, #4]
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d0d8      	beq.n	8009e18 <tcp_receive+0x7e0>
              if (prev == NULL) {
 8009e66:	2e00      	cmp	r6, #0
 8009e68:	d0ef      	beq.n	8009e4a <tcp_receive+0x812>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009e6a:	68f1      	ldr	r1, [r6, #12]
 8009e6c:	6849      	ldr	r1, [r1, #4]
 8009e6e:	1a59      	subs	r1, r3, r1
 8009e70:	2901      	cmp	r1, #1
 8009e72:	d4ed      	bmi.n	8009e50 <tcp_receive+0x818>
 8009e74:	1a99      	subs	r1, r3, r2
 8009e76:	3101      	adds	r1, #1
 8009e78:	2900      	cmp	r1, #0
 8009e7a:	dce9      	bgt.n	8009e50 <tcp_receive+0x818>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009e7c:	4817      	ldr	r0, [pc, #92]	; (8009edc <tcp_receive+0x8a4>)
 8009e7e:	f7fe f99b 	bl	80081b8 <tcp_seg_copy>
                  if (cseg != NULL) {
 8009e82:	4607      	mov	r7, r0
 8009e84:	2800      	cmp	r0, #0
 8009e86:	d0cc      	beq.n	8009e22 <tcp_receive+0x7ea>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009e88:	68f3      	ldr	r3, [r6, #12]
 8009e8a:	6859      	ldr	r1, [r3, #4]
 8009e8c:	8933      	ldrh	r3, [r6, #8]
 8009e8e:	440b      	add	r3, r1
 8009e90:	4a10      	ldr	r2, [pc, #64]	; (8009ed4 <tcp_receive+0x89c>)
 8009e92:	6812      	ldr	r2, [r2, #0]
 8009e94:	1a9b      	subs	r3, r3, r2
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	dc10      	bgt.n	8009ebc <tcp_receive+0x884>
                    prev->next = cseg;
 8009e9a:	6037      	str	r7, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009e9c:	4629      	mov	r1, r5
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	f7ff fb76 	bl	8009590 <tcp_oos_insert_segment>
 8009ea4:	e7bd      	b.n	8009e22 <tcp_receive+0x7ea>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009ea6:	480d      	ldr	r0, [pc, #52]	; (8009edc <tcp_receive+0x8a4>)
 8009ea8:	f7fe f986 	bl	80081b8 <tcp_seg_copy>
                  if (cseg != NULL) {
 8009eac:	2800      	cmp	r0, #0
 8009eae:	d0b8      	beq.n	8009e22 <tcp_receive+0x7ea>
                    pcb->ooseq = cseg;
 8009eb0:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
                    tcp_oos_insert_segment(cseg, next);
 8009eb4:	4629      	mov	r1, r5
 8009eb6:	f7ff fb6b 	bl	8009590 <tcp_oos_insert_segment>
 8009eba:	e7b2      	b.n	8009e22 <tcp_receive+0x7ea>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009ebc:	1a52      	subs	r2, r2, r1
 8009ebe:	b291      	uxth	r1, r2
 8009ec0:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009ec2:	6870      	ldr	r0, [r6, #4]
 8009ec4:	f7fd fd76 	bl	80079b4 <pbuf_realloc>
 8009ec8:	e7e7      	b.n	8009e9a <tcp_receive+0x862>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009eca:	1a9a      	subs	r2, r3, r2
              if (next->next == NULL &&
 8009ecc:	2a00      	cmp	r2, #0
 8009ece:	dc19      	bgt.n	8009f04 <tcp_receive+0x8cc>
 8009ed0:	460d      	mov	r5, r1
 8009ed2:	e7c2      	b.n	8009e5a <tcp_receive+0x822>
 8009ed4:	20000660 	.word	0x20000660
 8009ed8:	20000676 	.word	0x20000676
 8009edc:	20000644 	.word	0x20000644
 8009ee0:	08016368 	.word	0x08016368
 8009ee4:	08016540 	.word	0x08016540
 8009ee8:	08015418 	.word	0x08015418
 8009eec:	0801657c 	.word	0x0801657c
 8009ef0:	0801659c 	.word	0x0801659c
 8009ef4:	2000065c 	.word	0x2000065c
 8009ef8:	20000658 	.word	0x20000658
 8009efc:	200039e8 	.word	0x200039e8
 8009f00:	200039fc 	.word	0x200039fc
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009f04:	8980      	ldrh	r0, [r0, #12]
 8009f06:	f7fc f933 	bl	8006170 <lwip_htons>
 8009f0a:	f010 0f01 	tst.w	r0, #1
 8009f0e:	d188      	bne.n	8009e22 <tcp_receive+0x7ea>
                next->next = tcp_seg_copy(&inseg);
 8009f10:	4841      	ldr	r0, [pc, #260]	; (800a018 <tcp_receive+0x9e0>)
 8009f12:	f7fe f951 	bl	80081b8 <tcp_seg_copy>
 8009f16:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	d082      	beq.n	8009e22 <tcp_receive+0x7ea>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009f1c:	68eb      	ldr	r3, [r5, #12]
 8009f1e:	6859      	ldr	r1, [r3, #4]
 8009f20:	892a      	ldrh	r2, [r5, #8]
 8009f22:	440a      	add	r2, r1
 8009f24:	4b3d      	ldr	r3, [pc, #244]	; (800a01c <tcp_receive+0x9e4>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	1ad2      	subs	r2, r2, r3
 8009f2a:	2a00      	cmp	r2, #0
 8009f2c:	dc43      	bgt.n	8009fb6 <tcp_receive+0x97e>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009f2e:	4b3c      	ldr	r3, [pc, #240]	; (800a020 <tcp_receive+0x9e8>)
 8009f30:	881b      	ldrh	r3, [r3, #0]
 8009f32:	4a3a      	ldr	r2, [pc, #232]	; (800a01c <tcp_receive+0x9e4>)
 8009f34:	6812      	ldr	r2, [r2, #0]
 8009f36:	4413      	add	r3, r2
 8009f38:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009f3a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8009f3e:	440a      	add	r2, r1
 8009f40:	1a9b      	subs	r3, r3, r2
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f77f af6d 	ble.w	8009e22 <tcp_receive+0x7ea>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009f48:	682b      	ldr	r3, [r5, #0]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	8998      	ldrh	r0, [r3, #12]
 8009f4e:	f7fc f90f 	bl	8006170 <lwip_htons>
 8009f52:	f010 0f01 	tst.w	r0, #1
 8009f56:	d135      	bne.n	8009fc4 <tcp_receive+0x98c>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009f58:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009f5a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8009f5e:	4413      	add	r3, r2
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	682a      	ldr	r2, [r5, #0]
 8009f64:	492d      	ldr	r1, [pc, #180]	; (800a01c <tcp_receive+0x9e4>)
 8009f66:	6809      	ldr	r1, [r1, #0]
 8009f68:	1a5b      	subs	r3, r3, r1
 8009f6a:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009f6c:	682b      	ldr	r3, [r5, #0]
 8009f6e:	8919      	ldrh	r1, [r3, #8]
 8009f70:	6858      	ldr	r0, [r3, #4]
 8009f72:	f7fd fd1f 	bl	80079b4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009f76:	682b      	ldr	r3, [r5, #0]
 8009f78:	891d      	ldrh	r5, [r3, #8]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	8998      	ldrh	r0, [r3, #12]
 8009f7e:	f7fc f8f7 	bl	8006170 <lwip_htons>
 8009f82:	f010 0f03 	tst.w	r0, #3
 8009f86:	d030      	beq.n	8009fea <tcp_receive+0x9b2>
 8009f88:	2301      	movs	r3, #1
 8009f8a:	442b      	add	r3, r5
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	4a24      	ldr	r2, [pc, #144]	; (800a020 <tcp_receive+0x9e8>)
 8009f90:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009f92:	4a22      	ldr	r2, [pc, #136]	; (800a01c <tcp_receive+0x9e4>)
 8009f94:	6812      	ldr	r2, [r2, #0]
 8009f96:	4413      	add	r3, r2
 8009f98:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009f9a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8009f9e:	440a      	add	r2, r1
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	f43f af3e 	beq.w	8009e22 <tcp_receive+0x7ea>
 8009fa6:	4b1f      	ldr	r3, [pc, #124]	; (800a024 <tcp_receive+0x9ec>)
 8009fa8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009fac:	491e      	ldr	r1, [pc, #120]	; (800a028 <tcp_receive+0x9f0>)
 8009fae:	481f      	ldr	r0, [pc, #124]	; (800a02c <tcp_receive+0x9f4>)
 8009fb0:	f00a f940 	bl	8014234 <iprintf>
 8009fb4:	e735      	b.n	8009e22 <tcp_receive+0x7ea>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009fb6:	1a5b      	subs	r3, r3, r1
 8009fb8:	b299      	uxth	r1, r3
 8009fba:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8009fbc:	6868      	ldr	r0, [r5, #4]
 8009fbe:	f7fd fcf9 	bl	80079b4 <pbuf_realloc>
 8009fc2:	e7b4      	b.n	8009f2e <tcp_receive+0x8f6>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009fc4:	682b      	ldr	r3, [r5, #0]
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	8998      	ldrh	r0, [r3, #12]
 8009fca:	b206      	sxth	r6, r0
 8009fcc:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 8009fd0:	b280      	uxth	r0, r0
 8009fd2:	f7fc f8cd 	bl	8006170 <lwip_htons>
 8009fd6:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8009fda:	f7fc f8c9 	bl	8006170 <lwip_htons>
 8009fde:	b203      	sxth	r3, r0
 8009fe0:	682a      	ldr	r2, [r5, #0]
 8009fe2:	68d2      	ldr	r2, [r2, #12]
 8009fe4:	431e      	orrs	r6, r3
 8009fe6:	8196      	strh	r6, [r2, #12]
 8009fe8:	e7b6      	b.n	8009f58 <tcp_receive+0x920>
                    tcplen = TCP_TCPLEN(next->next);
 8009fea:	2300      	movs	r3, #0
 8009fec:	e7cd      	b.n	8009f8a <tcp_receive+0x952>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009fee:	4b0b      	ldr	r3, [pc, #44]	; (800a01c <tcp_receive+0x9e4>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009ff4:	1a99      	subs	r1, r3, r2
 8009ff6:	2900      	cmp	r1, #0
 8009ff8:	db06      	blt.n	800a008 <tcp_receive+0x9d0>
 8009ffa:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8009ffe:	440a      	add	r2, r1
 800a000:	1a9b      	subs	r3, r3, r2
 800a002:	3301      	adds	r3, #1
 800a004:	2b00      	cmp	r3, #0
 800a006:	dd05      	ble.n	800a014 <tcp_receive+0x9dc>
      tcp_ack_now(pcb);
 800a008:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a00c:	f043 0302 	orr.w	r3, r3, #2
 800a010:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
}
 800a014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a016:	bf00      	nop
 800a018:	20000644 	.word	0x20000644
 800a01c:	20000660 	.word	0x20000660
 800a020:	20000676 	.word	0x20000676
 800a024:	08016368 	.word	0x08016368
 800a028:	08016508 	.word	0x08016508
 800a02c:	08015418 	.word	0x08015418

0800a030 <tcp_process>:
{
 800a030:	b570      	push	{r4, r5, r6, lr}
 800a032:	b084      	sub	sp, #16
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a034:	4604      	mov	r4, r0
 800a036:	b1e8      	cbz	r0, 800a074 <tcp_process+0x44>
  if (flags & TCP_RST) {
 800a038:	4bae      	ldr	r3, [pc, #696]	; (800a2f4 <tcp_process+0x2c4>)
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	f013 0f04 	tst.w	r3, #4
 800a040:	d040      	beq.n	800a0c4 <tcp_process+0x94>
    if (pcb->state == SYN_SENT) {
 800a042:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 800a046:	2902      	cmp	r1, #2
 800a048:	d01c      	beq.n	800a084 <tcp_process+0x54>
      if (seqno == pcb->rcv_nxt) {
 800a04a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a04c:	4baa      	ldr	r3, [pc, #680]	; (800a2f8 <tcp_process+0x2c8>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	429a      	cmp	r2, r3
 800a052:	d020      	beq.n	800a096 <tcp_process+0x66>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a054:	1a99      	subs	r1, r3, r2
 800a056:	2900      	cmp	r1, #0
 800a058:	db19      	blt.n	800a08e <tcp_process+0x5e>
 800a05a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800a05e:	440a      	add	r2, r1
 800a060:	1a9b      	subs	r3, r3, r2
 800a062:	2b00      	cmp	r3, #0
 800a064:	dc13      	bgt.n	800a08e <tcp_process+0x5e>
        tcp_ack_now(pcb);
 800a066:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a06a:	f043 0302 	orr.w	r3, r3, #2
 800a06e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    if (acceptable) {
 800a072:	e00c      	b.n	800a08e <tcp_process+0x5e>
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a074:	4ba1      	ldr	r3, [pc, #644]	; (800a2fc <tcp_process+0x2cc>)
 800a076:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a07a:	49a1      	ldr	r1, [pc, #644]	; (800a300 <tcp_process+0x2d0>)
 800a07c:	48a1      	ldr	r0, [pc, #644]	; (800a304 <tcp_process+0x2d4>)
 800a07e:	f00a f8d9 	bl	8014234 <iprintf>
 800a082:	e7d9      	b.n	800a038 <tcp_process+0x8>
      if (ackno == pcb->snd_nxt) {
 800a084:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a086:	4ba0      	ldr	r3, [pc, #640]	; (800a308 <tcp_process+0x2d8>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d003      	beq.n	800a096 <tcp_process+0x66>
      return ERR_OK;
 800a08e:	2500      	movs	r5, #0
}
 800a090:	4628      	mov	r0, r5
 800a092:	b004      	add	sp, #16
 800a094:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a096:	b169      	cbz	r1, 800a0b4 <tcp_process+0x84>
      recv_flags |= TF_RESET;
 800a098:	4a9c      	ldr	r2, [pc, #624]	; (800a30c <tcp_process+0x2dc>)
 800a09a:	7813      	ldrb	r3, [r2, #0]
 800a09c:	f043 0308 	orr.w	r3, r3, #8
 800a0a0:	7013      	strb	r3, [r2, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a0a2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a0a6:	f023 0301 	bic.w	r3, r3, #1
 800a0aa:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      return ERR_RST;
 800a0ae:	f06f 050d 	mvn.w	r5, #13
 800a0b2:	e7ed      	b.n	800a090 <tcp_process+0x60>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a0b4:	4b91      	ldr	r3, [pc, #580]	; (800a2fc <tcp_process+0x2cc>)
 800a0b6:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a0ba:	4995      	ldr	r1, [pc, #596]	; (800a310 <tcp_process+0x2e0>)
 800a0bc:	4891      	ldr	r0, [pc, #580]	; (800a304 <tcp_process+0x2d4>)
 800a0be:	f00a f8b9 	bl	8014234 <iprintf>
 800a0c2:	e7e9      	b.n	800a098 <tcp_process+0x68>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a0c4:	f013 0f02 	tst.w	r3, #2
 800a0c8:	d005      	beq.n	800a0d6 <tcp_process+0xa6>
 800a0ca:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800a0ce:	3b02      	subs	r3, #2
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d81f      	bhi.n	800a116 <tcp_process+0xe6>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a0d6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a0da:	f013 0f10 	tst.w	r3, #16
 800a0de:	d102      	bne.n	800a0e6 <tcp_process+0xb6>
    pcb->tmr = tcp_ticks;
 800a0e0:	4b8c      	ldr	r3, [pc, #560]	; (800a314 <tcp_process+0x2e4>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	64a3      	str	r3, [r4, #72]	; 0x48
  pcb->keep_cnt_sent = 0;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
  pcb->persist_probe = 0;
 800a0ec:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
  tcp_parseopt(pcb);
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f7ff f811 	bl	8009118 <tcp_parseopt>
  switch (pcb->state) {
 800a0f6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800a0fa:	3b02      	subs	r3, #2
 800a0fc:	2b07      	cmp	r3, #7
 800a0fe:	f200 8277 	bhi.w	800a5f0 <tcp_process+0x5c0>
 800a102:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a106:	0010      	.short	0x0010
 800a108:	018100d2 	.word	0x018100d2
 800a10c:	01f40195 	.word	0x01f40195
 800a110:	02250181 	.word	0x02250181
 800a114:	025a      	.short	0x025a
    tcp_ack_now(pcb);
 800a116:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a11a:	f043 0302 	orr.w	r3, r3, #2
 800a11e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    return ERR_OK;
 800a122:	2500      	movs	r5, #0
 800a124:	e7b4      	b.n	800a090 <tcp_process+0x60>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a126:	4b73      	ldr	r3, [pc, #460]	; (800a2f4 <tcp_process+0x2c4>)
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	f003 0212 	and.w	r2, r3, #18
 800a12e:	2a12      	cmp	r2, #18
 800a130:	d005      	beq.n	800a13e <tcp_process+0x10e>
      else if (flags & TCP_ACK) {
 800a132:	f013 0f10 	tst.w	r3, #16
 800a136:	f040 8097 	bne.w	800a268 <tcp_process+0x238>
  return ERR_OK;
 800a13a:	2500      	movs	r5, #0
 800a13c:	e7a8      	b.n	800a090 <tcp_process+0x60>
          && (ackno == pcb->lastack + 1)) {
 800a13e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800a140:	3201      	adds	r2, #1
 800a142:	4971      	ldr	r1, [pc, #452]	; (800a308 <tcp_process+0x2d8>)
 800a144:	6809      	ldr	r1, [r1, #0]
 800a146:	428a      	cmp	r2, r1
 800a148:	d1f3      	bne.n	800a132 <tcp_process+0x102>
        pcb->rcv_nxt = seqno + 1;
 800a14a:	4b6b      	ldr	r3, [pc, #428]	; (800a2f8 <tcp_process+0x2c8>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	1c5a      	adds	r2, r3, #1
 800a150:	64e2      	str	r2, [r4, #76]	; 0x4c
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a152:	6562      	str	r2, [r4, #84]	; 0x54
        pcb->lastack = ackno;
 800a154:	66e1      	str	r1, [r4, #108]	; 0x6c
        pcb->snd_wnd = tcphdr->wnd;
 800a156:	4a70      	ldr	r2, [pc, #448]	; (800a318 <tcp_process+0x2e8>)
 800a158:	6812      	ldr	r2, [r2, #0]
 800a15a:	89d2      	ldrh	r2, [r2, #14]
 800a15c:	f8a4 2088 	strh.w	r2, [r4, #136]	; 0x88
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a160:	f8a4 208a 	strh.w	r2, [r4, #138]	; 0x8a
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a164:	3b01      	subs	r3, #1
 800a166:	67e3      	str	r3, [r4, #124]	; 0x7c
        pcb->state = ESTABLISHED;
 800a168:	2304      	movs	r3, #4
 800a16a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a16e:	f8b4 505a 	ldrh.w	r5, [r4, #90]	; 0x5a
 800a172:	f114 0618 	adds.w	r6, r4, #24
 800a176:	d003      	beq.n	800a180 <tcp_process+0x150>
 800a178:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a17c:	2b06      	cmp	r3, #6
 800a17e:	d047      	beq.n	800a210 <tcp_process+0x1e0>
 800a180:	f104 0018 	add.w	r0, r4, #24
 800a184:	f005 f914 	bl	800f3b0 <ip4_route>
 800a188:	4601      	mov	r1, r0
 800a18a:	4632      	mov	r2, r6
 800a18c:	4628      	mov	r0, r5
 800a18e:	f7fe f853 	bl	8008238 <tcp_eff_send_mss_netif>
 800a192:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a196:	0042      	lsls	r2, r0, #1
 800a198:	f241 131c 	movw	r3, #4380	; 0x111c
 800a19c:	4293      	cmp	r3, r2
 800a19e:	bf38      	it	cc
 800a1a0:	4613      	movcc	r3, r2
 800a1a2:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
 800a1a6:	d939      	bls.n	800a21c <tcp_process+0x1ec>
 800a1a8:	0083      	lsls	r3, r0, #2
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a1b0:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d03b      	beq.n	800a230 <tcp_process+0x200>
        --pcb->snd_queuelen;
 800a1b8:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
        rseg = pcb->unacked;
 800a1c2:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
        if (rseg == NULL) {
 800a1c6:	2d00      	cmp	r5, #0
 800a1c8:	d03a      	beq.n	800a240 <tcp_process+0x210>
          pcb->unacked = rseg->next;
 800a1ca:	682b      	ldr	r3, [r5, #0]
 800a1cc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
        tcp_seg_free(rseg);
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	f7fd ffd9 	bl	8008188 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800a1d6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d03f      	beq.n	800a25e <tcp_process+0x22e>
          pcb->rtime = 0;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
          pcb->nrtx = 0;
 800a1e4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a1e8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800a1ec:	b143      	cbz	r3, 800a200 <tcp_process+0x1d0>
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	4621      	mov	r1, r4
 800a1f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a1f4:	4798      	blx	r3
 800a1f6:	4605      	mov	r5, r0
        if (err == ERR_ABRT) {
 800a1f8:	f110 0f0d 	cmn.w	r0, #13
 800a1fc:	f43f af48 	beq.w	800a090 <tcp_process+0x60>
        tcp_ack_now(pcb);
 800a200:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a204:	f043 0302 	orr.w	r3, r3, #2
 800a208:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  return ERR_OK;
 800a20c:	2500      	movs	r5, #0
        tcp_ack_now(pcb);
 800a20e:	e73f      	b.n	800a090 <tcp_process+0x60>
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a210:	4631      	mov	r1, r6
 800a212:	4620      	mov	r0, r4
 800a214:	f006 f940 	bl	8010498 <ip6_route>
 800a218:	4601      	mov	r1, r0
 800a21a:	e7b6      	b.n	800a18a <tcp_process+0x15a>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a21c:	f241 131c 	movw	r3, #4380	; 0x111c
 800a220:	429a      	cmp	r2, r3
 800a222:	d902      	bls.n	800a22a <tcp_process+0x1fa>
 800a224:	0043      	lsls	r3, r0, #1
 800a226:	b29b      	uxth	r3, r3
 800a228:	e7c0      	b.n	800a1ac <tcp_process+0x17c>
 800a22a:	f241 131c 	movw	r3, #4380	; 0x111c
 800a22e:	e7bd      	b.n	800a1ac <tcp_process+0x17c>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a230:	4b32      	ldr	r3, [pc, #200]	; (800a2fc <tcp_process+0x2cc>)
 800a232:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a236:	4939      	ldr	r1, [pc, #228]	; (800a31c <tcp_process+0x2ec>)
 800a238:	4832      	ldr	r0, [pc, #200]	; (800a304 <tcp_process+0x2d4>)
 800a23a:	f009 fffb 	bl	8014234 <iprintf>
 800a23e:	e7bb      	b.n	800a1b8 <tcp_process+0x188>
          rseg = pcb->unsent;
 800a240:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a244:	b11d      	cbz	r5, 800a24e <tcp_process+0x21e>
          pcb->unsent = rseg->next;
 800a246:	682b      	ldr	r3, [r5, #0]
 800a248:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800a24c:	e7c0      	b.n	800a1d0 <tcp_process+0x1a0>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a24e:	4b2b      	ldr	r3, [pc, #172]	; (800a2fc <tcp_process+0x2cc>)
 800a250:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a254:	4932      	ldr	r1, [pc, #200]	; (800a320 <tcp_process+0x2f0>)
 800a256:	482b      	ldr	r0, [pc, #172]	; (800a304 <tcp_process+0x2d4>)
 800a258:	f009 ffec 	bl	8014234 <iprintf>
 800a25c:	e7f3      	b.n	800a246 <tcp_process+0x216>
          pcb->rtime = -1;
 800a25e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a262:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 800a266:	e7bf      	b.n	800a1e8 <tcp_process+0x1b8>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a268:	4b2b      	ldr	r3, [pc, #172]	; (800a318 <tcp_process+0x2e8>)
 800a26a:	6819      	ldr	r1, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a26c:	4b2d      	ldr	r3, [pc, #180]	; (800a324 <tcp_process+0x2f4>)
 800a26e:	4a2e      	ldr	r2, [pc, #184]	; (800a328 <tcp_process+0x2f8>)
 800a270:	8810      	ldrh	r0, [r2, #0]
 800a272:	4a21      	ldr	r2, [pc, #132]	; (800a2f8 <tcp_process+0x2c8>)
 800a274:	6812      	ldr	r2, [r2, #0]
 800a276:	880d      	ldrh	r5, [r1, #0]
 800a278:	9502      	str	r5, [sp, #8]
 800a27a:	8849      	ldrh	r1, [r1, #2]
 800a27c:	9101      	str	r1, [sp, #4]
 800a27e:	f1a3 0118 	sub.w	r1, r3, #24
 800a282:	9100      	str	r1, [sp, #0]
 800a284:	4402      	add	r2, r0
 800a286:	4920      	ldr	r1, [pc, #128]	; (800a308 <tcp_process+0x2d8>)
 800a288:	6809      	ldr	r1, [r1, #0]
 800a28a:	4620      	mov	r0, r4
 800a28c:	f001 faec 	bl	800b868 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a290:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 800a294:	2b05      	cmp	r3, #5
 800a296:	d901      	bls.n	800a29c <tcp_process+0x26c>
  return ERR_OK;
 800a298:	2500      	movs	r5, #0
 800a29a:	e6f9      	b.n	800a090 <tcp_process+0x60>
          pcb->rtime = 0;
 800a29c:	2500      	movs	r5, #0
 800a29e:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
          tcp_rexmit_rto(pcb);
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	f001 fd3e 	bl	800bd24 <tcp_rexmit_rto>
 800a2a8:	e6f2      	b.n	800a090 <tcp_process+0x60>
      if (flags & TCP_ACK) {
 800a2aa:	4b12      	ldr	r3, [pc, #72]	; (800a2f4 <tcp_process+0x2c4>)
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	f013 0f10 	tst.w	r3, #16
 800a2b2:	f000 8098 	beq.w	800a3e6 <tcp_process+0x3b6>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a2b6:	4b14      	ldr	r3, [pc, #80]	; (800a308 <tcp_process+0x2d8>)
 800a2b8:	6819      	ldr	r1, [r3, #0]
 800a2ba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a2bc:	1acb      	subs	r3, r1, r3
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d403      	bmi.n	800a2ca <tcp_process+0x29a>
 800a2c2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a2c4:	1acb      	subs	r3, r1, r3
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	dd30      	ble.n	800a32c <tcp_process+0x2fc>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a2ca:	4b13      	ldr	r3, [pc, #76]	; (800a318 <tcp_process+0x2e8>)
 800a2cc:	6818      	ldr	r0, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2ce:	4b15      	ldr	r3, [pc, #84]	; (800a324 <tcp_process+0x2f4>)
 800a2d0:	4a15      	ldr	r2, [pc, #84]	; (800a328 <tcp_process+0x2f8>)
 800a2d2:	8815      	ldrh	r5, [r2, #0]
 800a2d4:	4a08      	ldr	r2, [pc, #32]	; (800a2f8 <tcp_process+0x2c8>)
 800a2d6:	6812      	ldr	r2, [r2, #0]
 800a2d8:	8806      	ldrh	r6, [r0, #0]
 800a2da:	9602      	str	r6, [sp, #8]
 800a2dc:	8840      	ldrh	r0, [r0, #2]
 800a2de:	9001      	str	r0, [sp, #4]
 800a2e0:	f1a3 0018 	sub.w	r0, r3, #24
 800a2e4:	9000      	str	r0, [sp, #0]
 800a2e6:	442a      	add	r2, r5
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f001 fabd 	bl	800b868 <tcp_rst>
  return ERR_OK;
 800a2ee:	2500      	movs	r5, #0
 800a2f0:	e6ce      	b.n	800a090 <tcp_process+0x60>
 800a2f2:	bf00      	nop
 800a2f4:	20000640 	.word	0x20000640
 800a2f8:	20000660 	.word	0x20000660
 800a2fc:	08016368 	.word	0x08016368
 800a300:	080165c4 	.word	0x080165c4
 800a304:	08015418 	.word	0x08015418
 800a308:	2000063c 	.word	0x2000063c
 800a30c:	2000065c 	.word	0x2000065c
 800a310:	080165e0 	.word	0x080165e0
 800a314:	20007b24 	.word	0x20007b24
 800a318:	20000668 	.word	0x20000668
 800a31c:	08016600 	.word	0x08016600
 800a320:	08016618 	.word	0x08016618
 800a324:	20003a14 	.word	0x20003a14
 800a328:	20000676 	.word	0x20000676
          pcb->state = ESTABLISHED;
 800a32c:	2304      	movs	r3, #4
 800a32e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          if (pcb->listener == NULL) {
 800a332:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800a336:	2b00      	cmp	r3, #0
 800a338:	d03c      	beq.n	800a3b4 <tcp_process+0x384>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33c:	b393      	cbz	r3, 800a3a4 <tcp_process+0x374>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a33e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800a342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a344:	2b00      	cmp	r3, #0
 800a346:	d03d      	beq.n	800a3c4 <tcp_process+0x394>
 800a348:	2200      	movs	r2, #0
 800a34a:	4621      	mov	r1, r4
 800a34c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a34e:	4798      	blx	r3
          if (err != ERR_OK) {
 800a350:	4605      	mov	r5, r0
 800a352:	bb88      	cbnz	r0, 800a3b8 <tcp_process+0x388>
          tcp_receive(pcb);
 800a354:	4620      	mov	r0, r4
 800a356:	f7ff f96f 	bl	8009638 <tcp_receive>
          if (recv_acked != 0) {
 800a35a:	4bab      	ldr	r3, [pc, #684]	; (800a608 <tcp_process+0x5d8>)
 800a35c:	881b      	ldrh	r3, [r3, #0]
 800a35e:	b113      	cbz	r3, 800a366 <tcp_process+0x336>
            recv_acked--;
 800a360:	3b01      	subs	r3, #1
 800a362:	4aa9      	ldr	r2, [pc, #676]	; (800a608 <tcp_process+0x5d8>)
 800a364:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a366:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800a36a:	0059      	lsls	r1, r3, #1
 800a36c:	f241 121c 	movw	r2, #4380	; 0x111c
 800a370:	428a      	cmp	r2, r1
 800a372:	bf38      	it	cc
 800a374:	460a      	movcc	r2, r1
 800a376:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800a37a:	d92a      	bls.n	800a3d2 <tcp_process+0x3a2>
 800a37c:	009b      	lsls	r3, r3, #2
 800a37e:	b29b      	uxth	r3, r3
 800a380:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
          if (recv_flags & TF_GOT_FIN) {
 800a384:	4ba1      	ldr	r3, [pc, #644]	; (800a60c <tcp_process+0x5dc>)
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	f013 0f20 	tst.w	r3, #32
 800a38c:	f43f ae80 	beq.w	800a090 <tcp_process+0x60>
            tcp_ack_now(pcb);
 800a390:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a394:	f043 0302 	orr.w	r3, r3, #2
 800a398:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
            pcb->state = CLOSE_WAIT;
 800a39c:	2307      	movs	r3, #7
 800a39e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800a3a2:	e675      	b.n	800a090 <tcp_process+0x60>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a3a4:	4b9a      	ldr	r3, [pc, #616]	; (800a610 <tcp_process+0x5e0>)
 800a3a6:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800a3aa:	499a      	ldr	r1, [pc, #616]	; (800a614 <tcp_process+0x5e4>)
 800a3ac:	489a      	ldr	r0, [pc, #616]	; (800a618 <tcp_process+0x5e8>)
 800a3ae:	f009 ff41 	bl	8014234 <iprintf>
 800a3b2:	e7c4      	b.n	800a33e <tcp_process+0x30e>
            err = ERR_VAL;
 800a3b4:	f06f 0505 	mvn.w	r5, #5
            if (err != ERR_ABRT) {
 800a3b8:	f115 0f0d 	cmn.w	r5, #13
 800a3bc:	d105      	bne.n	800a3ca <tcp_process+0x39a>
            return ERR_ABRT;
 800a3be:	f06f 050c 	mvn.w	r5, #12
 800a3c2:	e665      	b.n	800a090 <tcp_process+0x60>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a3c4:	f06f 050f 	mvn.w	r5, #15
 800a3c8:	e7f6      	b.n	800a3b8 <tcp_process+0x388>
              tcp_abort(pcb);
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f7fe f8ac 	bl	8008528 <tcp_abort>
 800a3d0:	e7f5      	b.n	800a3be <tcp_process+0x38e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a3d2:	f241 121c 	movw	r2, #4380	; 0x111c
 800a3d6:	4291      	cmp	r1, r2
 800a3d8:	d902      	bls.n	800a3e0 <tcp_process+0x3b0>
 800a3da:	005b      	lsls	r3, r3, #1
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	e7cf      	b.n	800a380 <tcp_process+0x350>
 800a3e0:	f241 131c 	movw	r3, #4380	; 0x111c
 800a3e4:	e7cc      	b.n	800a380 <tcp_process+0x350>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a3e6:	f013 0f02 	tst.w	r3, #2
 800a3ea:	f000 8103 	beq.w	800a5f4 <tcp_process+0x5c4>
 800a3ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	4a8a      	ldr	r2, [pc, #552]	; (800a61c <tcp_process+0x5ec>)
 800a3f4:	6812      	ldr	r2, [r2, #0]
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d001      	beq.n	800a3fe <tcp_process+0x3ce>
  return ERR_OK;
 800a3fa:	2500      	movs	r5, #0
 800a3fc:	e648      	b.n	800a090 <tcp_process+0x60>
        tcp_rexmit(pcb);
 800a3fe:	4620      	mov	r0, r4
 800a400:	f001 f9aa 	bl	800b758 <tcp_rexmit>
  return ERR_OK;
 800a404:	2500      	movs	r5, #0
 800a406:	e643      	b.n	800a090 <tcp_process+0x60>
      tcp_receive(pcb);
 800a408:	4620      	mov	r0, r4
 800a40a:	f7ff f915 	bl	8009638 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a40e:	4b7f      	ldr	r3, [pc, #508]	; (800a60c <tcp_process+0x5dc>)
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	f013 0f20 	tst.w	r3, #32
 800a416:	f000 80ef 	beq.w	800a5f8 <tcp_process+0x5c8>
        tcp_ack_now(pcb);
 800a41a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a41e:	f043 0302 	orr.w	r3, r3, #2
 800a422:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        pcb->state = CLOSE_WAIT;
 800a426:	2307      	movs	r3, #7
 800a428:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return ERR_OK;
 800a42c:	2500      	movs	r5, #0
 800a42e:	e62f      	b.n	800a090 <tcp_process+0x60>
      tcp_receive(pcb);
 800a430:	4620      	mov	r0, r4
 800a432:	f7ff f901 	bl	8009638 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a436:	4b75      	ldr	r3, [pc, #468]	; (800a60c <tcp_process+0x5dc>)
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	f013 0f20 	tst.w	r3, #32
 800a43e:	d03f      	beq.n	800a4c0 <tcp_process+0x490>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a440:	4b77      	ldr	r3, [pc, #476]	; (800a620 <tcp_process+0x5f0>)
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	f013 0f10 	tst.w	r3, #16
 800a448:	d004      	beq.n	800a454 <tcp_process+0x424>
 800a44a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a44c:	4b75      	ldr	r3, [pc, #468]	; (800a624 <tcp_process+0x5f4>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	429a      	cmp	r2, r3
 800a452:	d00a      	beq.n	800a46a <tcp_process+0x43a>
          tcp_ack_now(pcb);
 800a454:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a458:	f043 0302 	orr.w	r3, r3, #2
 800a45c:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
          pcb->state = CLOSING;
 800a460:	2308      	movs	r3, #8
 800a462:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return ERR_OK;
 800a466:	2500      	movs	r5, #0
 800a468:	e612      	b.n	800a090 <tcp_process+0x60>
            pcb->unsent == NULL) {
 800a46a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1f0      	bne.n	800a454 <tcp_process+0x424>
          tcp_ack_now(pcb);
 800a472:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a476:	f043 0302 	orr.w	r3, r3, #2
 800a47a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
          tcp_pcb_purge(pcb);
 800a47e:	4620      	mov	r0, r4
 800a480:	f7fd ff1a 	bl	80082b8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a484:	4b68      	ldr	r3, [pc, #416]	; (800a628 <tcp_process+0x5f8>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	42a3      	cmp	r3, r4
 800a48a:	d005      	beq.n	800a498 <tcp_process+0x468>
 800a48c:	b153      	cbz	r3, 800a4a4 <tcp_process+0x474>
 800a48e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a490:	42a2      	cmp	r2, r4
 800a492:	d005      	beq.n	800a4a0 <tcp_process+0x470>
 800a494:	4613      	mov	r3, r2
 800a496:	e7f9      	b.n	800a48c <tcp_process+0x45c>
 800a498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a49a:	4b63      	ldr	r3, [pc, #396]	; (800a628 <tcp_process+0x5f8>)
 800a49c:	601a      	str	r2, [r3, #0]
 800a49e:	e001      	b.n	800a4a4 <tcp_process+0x474>
 800a4a0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a4a2:	635a      	str	r2, [r3, #52]	; 0x34
 800a4a4:	4b61      	ldr	r3, [pc, #388]	; (800a62c <tcp_process+0x5fc>)
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a4aa:	230a      	movs	r3, #10
 800a4ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a4b0:	4b5f      	ldr	r3, [pc, #380]	; (800a630 <tcp_process+0x600>)
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	6362      	str	r2, [r4, #52]	; 0x34
 800a4b6:	601c      	str	r4, [r3, #0]
 800a4b8:	f001 fd60 	bl	800bf7c <tcp_timer_needed>
  return ERR_OK;
 800a4bc:	2500      	movs	r5, #0
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a4be:	e5e7      	b.n	800a090 <tcp_process+0x60>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a4c0:	4b57      	ldr	r3, [pc, #348]	; (800a620 <tcp_process+0x5f0>)
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	f013 0f10 	tst.w	r3, #16
 800a4c8:	f000 8098 	beq.w	800a5fc <tcp_process+0x5cc>
 800a4cc:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a4ce:	4b55      	ldr	r3, [pc, #340]	; (800a624 <tcp_process+0x5f4>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d001      	beq.n	800a4da <tcp_process+0x4aa>
  return ERR_OK;
 800a4d6:	2500      	movs	r5, #0
 800a4d8:	e5da      	b.n	800a090 <tcp_process+0x60>
                 pcb->unsent == NULL) {
 800a4da:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a4de:	b10b      	cbz	r3, 800a4e4 <tcp_process+0x4b4>
  return ERR_OK;
 800a4e0:	2500      	movs	r5, #0
 800a4e2:	e5d5      	b.n	800a090 <tcp_process+0x60>
        pcb->state = FIN_WAIT_2;
 800a4e4:	2306      	movs	r3, #6
 800a4e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return ERR_OK;
 800a4ea:	2500      	movs	r5, #0
 800a4ec:	e5d0      	b.n	800a090 <tcp_process+0x60>
      tcp_receive(pcb);
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f7ff f8a2 	bl	8009638 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a4f4:	4b45      	ldr	r3, [pc, #276]	; (800a60c <tcp_process+0x5dc>)
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	f013 0f20 	tst.w	r3, #32
 800a4fc:	d101      	bne.n	800a502 <tcp_process+0x4d2>
  return ERR_OK;
 800a4fe:	2500      	movs	r5, #0
 800a500:	e5c6      	b.n	800a090 <tcp_process+0x60>
        tcp_ack_now(pcb);
 800a502:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a506:	f043 0302 	orr.w	r3, r3, #2
 800a50a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        tcp_pcb_purge(pcb);
 800a50e:	4620      	mov	r0, r4
 800a510:	f7fd fed2 	bl	80082b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a514:	4b44      	ldr	r3, [pc, #272]	; (800a628 <tcp_process+0x5f8>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	42a3      	cmp	r3, r4
 800a51a:	d005      	beq.n	800a528 <tcp_process+0x4f8>
 800a51c:	b153      	cbz	r3, 800a534 <tcp_process+0x504>
 800a51e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a520:	42a2      	cmp	r2, r4
 800a522:	d005      	beq.n	800a530 <tcp_process+0x500>
 800a524:	4613      	mov	r3, r2
 800a526:	e7f9      	b.n	800a51c <tcp_process+0x4ec>
 800a528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a52a:	4b3f      	ldr	r3, [pc, #252]	; (800a628 <tcp_process+0x5f8>)
 800a52c:	601a      	str	r2, [r3, #0]
 800a52e:	e001      	b.n	800a534 <tcp_process+0x504>
 800a530:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a532:	635a      	str	r2, [r3, #52]	; 0x34
 800a534:	4b3d      	ldr	r3, [pc, #244]	; (800a62c <tcp_process+0x5fc>)
 800a536:	2201      	movs	r2, #1
 800a538:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a53a:	230a      	movs	r3, #10
 800a53c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a540:	4b3b      	ldr	r3, [pc, #236]	; (800a630 <tcp_process+0x600>)
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	6362      	str	r2, [r4, #52]	; 0x34
 800a546:	601c      	str	r4, [r3, #0]
 800a548:	f001 fd18 	bl	800bf7c <tcp_timer_needed>
  return ERR_OK;
 800a54c:	2500      	movs	r5, #0
 800a54e:	e59f      	b.n	800a090 <tcp_process+0x60>
      tcp_receive(pcb);
 800a550:	4620      	mov	r0, r4
 800a552:	f7ff f871 	bl	8009638 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a556:	4b32      	ldr	r3, [pc, #200]	; (800a620 <tcp_process+0x5f0>)
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	f013 0f10 	tst.w	r3, #16
 800a55e:	d04f      	beq.n	800a600 <tcp_process+0x5d0>
 800a560:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a562:	4b30      	ldr	r3, [pc, #192]	; (800a624 <tcp_process+0x5f4>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	429a      	cmp	r2, r3
 800a568:	d001      	beq.n	800a56e <tcp_process+0x53e>
  return ERR_OK;
 800a56a:	2500      	movs	r5, #0
 800a56c:	e590      	b.n	800a090 <tcp_process+0x60>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a56e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a572:	b10b      	cbz	r3, 800a578 <tcp_process+0x548>
  return ERR_OK;
 800a574:	2500      	movs	r5, #0
 800a576:	e58b      	b.n	800a090 <tcp_process+0x60>
        tcp_pcb_purge(pcb);
 800a578:	4620      	mov	r0, r4
 800a57a:	f7fd fe9d 	bl	80082b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a57e:	4b2a      	ldr	r3, [pc, #168]	; (800a628 <tcp_process+0x5f8>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	42a3      	cmp	r3, r4
 800a584:	d005      	beq.n	800a592 <tcp_process+0x562>
 800a586:	b153      	cbz	r3, 800a59e <tcp_process+0x56e>
 800a588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a58a:	42a2      	cmp	r2, r4
 800a58c:	d005      	beq.n	800a59a <tcp_process+0x56a>
 800a58e:	4613      	mov	r3, r2
 800a590:	e7f9      	b.n	800a586 <tcp_process+0x556>
 800a592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a594:	4b24      	ldr	r3, [pc, #144]	; (800a628 <tcp_process+0x5f8>)
 800a596:	601a      	str	r2, [r3, #0]
 800a598:	e001      	b.n	800a59e <tcp_process+0x56e>
 800a59a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a59c:	635a      	str	r2, [r3, #52]	; 0x34
 800a59e:	4b23      	ldr	r3, [pc, #140]	; (800a62c <tcp_process+0x5fc>)
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a5a4:	230a      	movs	r3, #10
 800a5a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a5aa:	4b21      	ldr	r3, [pc, #132]	; (800a630 <tcp_process+0x600>)
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	6362      	str	r2, [r4, #52]	; 0x34
 800a5b0:	601c      	str	r4, [r3, #0]
 800a5b2:	f001 fce3 	bl	800bf7c <tcp_timer_needed>
  return ERR_OK;
 800a5b6:	2500      	movs	r5, #0
 800a5b8:	e56a      	b.n	800a090 <tcp_process+0x60>
      tcp_receive(pcb);
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f7ff f83c 	bl	8009638 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a5c0:	4b17      	ldr	r3, [pc, #92]	; (800a620 <tcp_process+0x5f0>)
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	f013 0f10 	tst.w	r3, #16
 800a5c8:	d01c      	beq.n	800a604 <tcp_process+0x5d4>
 800a5ca:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a5cc:	4b15      	ldr	r3, [pc, #84]	; (800a624 <tcp_process+0x5f4>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d001      	beq.n	800a5d8 <tcp_process+0x5a8>
  return ERR_OK;
 800a5d4:	2500      	movs	r5, #0
 800a5d6:	e55b      	b.n	800a090 <tcp_process+0x60>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a5d8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a5dc:	b10b      	cbz	r3, 800a5e2 <tcp_process+0x5b2>
  return ERR_OK;
 800a5de:	2500      	movs	r5, #0
 800a5e0:	e556      	b.n	800a090 <tcp_process+0x60>
        recv_flags |= TF_CLOSED;
 800a5e2:	4a0a      	ldr	r2, [pc, #40]	; (800a60c <tcp_process+0x5dc>)
 800a5e4:	7813      	ldrb	r3, [r2, #0]
 800a5e6:	f043 0310 	orr.w	r3, r3, #16
 800a5ea:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 800a5ec:	2500      	movs	r5, #0
 800a5ee:	e54f      	b.n	800a090 <tcp_process+0x60>
  switch (pcb->state) {
 800a5f0:	2500      	movs	r5, #0
 800a5f2:	e54d      	b.n	800a090 <tcp_process+0x60>
  return ERR_OK;
 800a5f4:	2500      	movs	r5, #0
 800a5f6:	e54b      	b.n	800a090 <tcp_process+0x60>
 800a5f8:	2500      	movs	r5, #0
 800a5fa:	e549      	b.n	800a090 <tcp_process+0x60>
 800a5fc:	2500      	movs	r5, #0
 800a5fe:	e547      	b.n	800a090 <tcp_process+0x60>
 800a600:	2500      	movs	r5, #0
 800a602:	e545      	b.n	800a090 <tcp_process+0x60>
 800a604:	2500      	movs	r5, #0
 800a606:	e543      	b.n	800a090 <tcp_process+0x60>
 800a608:	20000654 	.word	0x20000654
 800a60c:	2000065c 	.word	0x2000065c
 800a610:	08016368 	.word	0x08016368
 800a614:	0801662c 	.word	0x0801662c
 800a618:	08015418 	.word	0x08015418
 800a61c:	20000660 	.word	0x20000660
 800a620:	20000640 	.word	0x20000640
 800a624:	2000063c 	.word	0x2000063c
 800a628:	20007b20 	.word	0x20007b20
 800a62c:	20007b1c 	.word	0x20007b1c
 800a630:	20007b30 	.word	0x20007b30

0800a634 <tcp_input>:
{
 800a634:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a636:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a638:	4605      	mov	r5, r0
 800a63a:	2800      	cmp	r0, #0
 800a63c:	d05e      	beq.n	800a6fc <tcp_input+0xc8>
  tcphdr = (struct tcp_hdr *)p->payload;
 800a63e:	686a      	ldr	r2, [r5, #4]
 800a640:	4b7c      	ldr	r3, [pc, #496]	; (800a834 <tcp_input+0x200>)
 800a642:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 800a644:	896b      	ldrh	r3, [r5, #10]
 800a646:	2b13      	cmp	r3, #19
 800a648:	d966      	bls.n	800a718 <tcp_input+0xe4>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a64a:	4b7b      	ldr	r3, [pc, #492]	; (800a838 <tcp_input+0x204>)
 800a64c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a650:	2b06      	cmp	r3, #6
 800a652:	d15a      	bne.n	800a70a <tcp_input+0xd6>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a654:	4b78      	ldr	r3, [pc, #480]	; (800a838 <tcp_input+0x204>)
 800a656:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a65a:	2b06      	cmp	r3, #6
 800a65c:	d061      	beq.n	800a722 <tcp_input+0xee>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a65e:	4b76      	ldr	r3, [pc, #472]	; (800a838 <tcp_input+0x204>)
 800a660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a666:	2be0      	cmp	r3, #224	; 0xe0
 800a668:	d056      	beq.n	800a718 <tcp_input+0xe4>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a66a:	4b72      	ldr	r3, [pc, #456]	; (800a834 <tcp_input+0x200>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	8998      	ldrh	r0, [r3, #12]
 800a670:	f7fb fd7e 	bl	8006170 <lwip_htons>
 800a674:	f3c0 3107 	ubfx	r1, r0, #12, #8
 800a678:	0089      	lsls	r1, r1, #2
 800a67a:	b2c9      	uxtb	r1, r1
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a67c:	2913      	cmp	r1, #19
 800a67e:	d94b      	bls.n	800a718 <tcp_input+0xe4>
 800a680:	b28b      	uxth	r3, r1
 800a682:	892a      	ldrh	r2, [r5, #8]
 800a684:	4293      	cmp	r3, r2
 800a686:	d847      	bhi.n	800a718 <tcp_input+0xe4>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a688:	f1a3 0214 	sub.w	r2, r3, #20
 800a68c:	b292      	uxth	r2, r2
 800a68e:	486b      	ldr	r0, [pc, #428]	; (800a83c <tcp_input+0x208>)
 800a690:	8002      	strh	r2, [r0, #0]
  tcphdr_opt2 = NULL;
 800a692:	486b      	ldr	r0, [pc, #428]	; (800a840 <tcp_input+0x20c>)
 800a694:	2400      	movs	r4, #0
 800a696:	6004      	str	r4, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 800a698:	8968      	ldrh	r0, [r5, #10]
 800a69a:	4283      	cmp	r3, r0
 800a69c:	d947      	bls.n	800a72e <tcp_input+0xfa>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a69e:	682b      	ldr	r3, [r5, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d07f      	beq.n	800a7a4 <tcp_input+0x170>
    pbuf_remove_header(p, TCP_HLEN);
 800a6a4:	2114      	movs	r1, #20
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	f7fd f82e 	bl	8007708 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800a6ac:	896c      	ldrh	r4, [r5, #10]
 800a6ae:	4b65      	ldr	r3, [pc, #404]	; (800a844 <tcp_input+0x210>)
 800a6b0:	801c      	strh	r4, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a6b2:	4b62      	ldr	r3, [pc, #392]	; (800a83c <tcp_input+0x208>)
 800a6b4:	881f      	ldrh	r7, [r3, #0]
 800a6b6:	1b3e      	subs	r6, r7, r4
 800a6b8:	b2b6      	uxth	r6, r6
    pbuf_remove_header(p, tcphdr_opt1len);
 800a6ba:	4621      	mov	r1, r4
 800a6bc:	4628      	mov	r0, r5
 800a6be:	f7fd f823 	bl	8007708 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800a6c2:	6828      	ldr	r0, [r5, #0]
 800a6c4:	8943      	ldrh	r3, [r0, #10]
 800a6c6:	42b3      	cmp	r3, r6
 800a6c8:	d326      	bcc.n	800a718 <tcp_input+0xe4>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a6ca:	6842      	ldr	r2, [r0, #4]
 800a6cc:	4b5c      	ldr	r3, [pc, #368]	; (800a840 <tcp_input+0x20c>)
 800a6ce:	601a      	str	r2, [r3, #0]
    pbuf_remove_header(p->next, opt2len);
 800a6d0:	4631      	mov	r1, r6
 800a6d2:	f7fd f819 	bl	8007708 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a6d6:	892b      	ldrh	r3, [r5, #8]
 800a6d8:	1be4      	subs	r4, r4, r7
 800a6da:	441c      	add	r4, r3
 800a6dc:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a6de:	896b      	ldrh	r3, [r5, #10]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d166      	bne.n	800a7b2 <tcp_input+0x17e>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a6e4:	892a      	ldrh	r2, [r5, #8]
 800a6e6:	682b      	ldr	r3, [r5, #0]
 800a6e8:	891b      	ldrh	r3, [r3, #8]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d024      	beq.n	800a738 <tcp_input+0x104>
 800a6ee:	4b56      	ldr	r3, [pc, #344]	; (800a848 <tcp_input+0x214>)
 800a6f0:	22e0      	movs	r2, #224	; 0xe0
 800a6f2:	4956      	ldr	r1, [pc, #344]	; (800a84c <tcp_input+0x218>)
 800a6f4:	4856      	ldr	r0, [pc, #344]	; (800a850 <tcp_input+0x21c>)
 800a6f6:	f009 fd9d 	bl	8014234 <iprintf>
 800a6fa:	e01d      	b.n	800a738 <tcp_input+0x104>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a6fc:	4b52      	ldr	r3, [pc, #328]	; (800a848 <tcp_input+0x214>)
 800a6fe:	2283      	movs	r2, #131	; 0x83
 800a700:	4954      	ldr	r1, [pc, #336]	; (800a854 <tcp_input+0x220>)
 800a702:	4853      	ldr	r0, [pc, #332]	; (800a850 <tcp_input+0x21c>)
 800a704:	f009 fd96 	bl	8014234 <iprintf>
 800a708:	e799      	b.n	800a63e <tcp_input+0xa>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a70a:	4b4b      	ldr	r3, [pc, #300]	; (800a838 <tcp_input+0x204>)
 800a70c:	6819      	ldr	r1, [r3, #0]
 800a70e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a710:	f005 f8a2 	bl	800f858 <ip4_addr_isbroadcast_u32>
 800a714:	2800      	cmp	r0, #0
 800a716:	d09d      	beq.n	800a654 <tcp_input+0x20>
  pbuf_free(p);
 800a718:	4628      	mov	r0, r5
 800a71a:	f7fd f83b 	bl	8007794 <pbuf_free>
}
 800a71e:	b005      	add	sp, #20
 800a720:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a722:	4b45      	ldr	r3, [pc, #276]	; (800a838 <tcp_input+0x204>)
 800a724:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a728:	2bff      	cmp	r3, #255	; 0xff
 800a72a:	d19e      	bne.n	800a66a <tcp_input+0x36>
 800a72c:	e7f4      	b.n	800a718 <tcp_input+0xe4>
    tcphdr_opt1len = tcphdr_optlen;
 800a72e:	4b45      	ldr	r3, [pc, #276]	; (800a844 <tcp_input+0x210>)
 800a730:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a732:	4628      	mov	r0, r5
 800a734:	f7fc ffe8 	bl	8007708 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a738:	4c3e      	ldr	r4, [pc, #248]	; (800a834 <tcp_input+0x200>)
 800a73a:	6826      	ldr	r6, [r4, #0]
 800a73c:	8830      	ldrh	r0, [r6, #0]
 800a73e:	f7fb fd17 	bl	8006170 <lwip_htons>
 800a742:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a744:	6826      	ldr	r6, [r4, #0]
 800a746:	8870      	ldrh	r0, [r6, #2]
 800a748:	f7fb fd12 	bl	8006170 <lwip_htons>
 800a74c:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a74e:	6826      	ldr	r6, [r4, #0]
 800a750:	6870      	ldr	r0, [r6, #4]
 800a752:	f7fb fd12 	bl	800617a <lwip_htonl>
 800a756:	6070      	str	r0, [r6, #4]
 800a758:	4b3f      	ldr	r3, [pc, #252]	; (800a858 <tcp_input+0x224>)
 800a75a:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a75c:	6826      	ldr	r6, [r4, #0]
 800a75e:	68b0      	ldr	r0, [r6, #8]
 800a760:	f7fb fd0b 	bl	800617a <lwip_htonl>
 800a764:	60b0      	str	r0, [r6, #8]
 800a766:	4b3d      	ldr	r3, [pc, #244]	; (800a85c <tcp_input+0x228>)
 800a768:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a76a:	6826      	ldr	r6, [r4, #0]
 800a76c:	89f0      	ldrh	r0, [r6, #14]
 800a76e:	f7fb fcff 	bl	8006170 <lwip_htons>
 800a772:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 800a774:	6823      	ldr	r3, [r4, #0]
 800a776:	8998      	ldrh	r0, [r3, #12]
 800a778:	f7fb fcfa 	bl	8006170 <lwip_htons>
 800a77c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800a780:	4b37      	ldr	r3, [pc, #220]	; (800a860 <tcp_input+0x22c>)
 800a782:	7018      	strb	r0, [r3, #0]
  tcplen = p->tot_len;
 800a784:	892b      	ldrh	r3, [r5, #8]
 800a786:	4a37      	ldr	r2, [pc, #220]	; (800a864 <tcp_input+0x230>)
 800a788:	8013      	strh	r3, [r2, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a78a:	f010 0f03 	tst.w	r0, #3
 800a78e:	d005      	beq.n	800a79c <tcp_input+0x168>
    tcplen++;
 800a790:	1c5a      	adds	r2, r3, #1
 800a792:	b292      	uxth	r2, r2
 800a794:	4933      	ldr	r1, [pc, #204]	; (800a864 <tcp_input+0x230>)
 800a796:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 800a798:	4293      	cmp	r3, r2
 800a79a:	d8bd      	bhi.n	800a718 <tcp_input+0xe4>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a79c:	4b32      	ldr	r3, [pc, #200]	; (800a868 <tcp_input+0x234>)
 800a79e:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 800a7a0:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7a2:	e02b      	b.n	800a7fc <tcp_input+0x1c8>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a7a4:	4b28      	ldr	r3, [pc, #160]	; (800a848 <tcp_input+0x214>)
 800a7a6:	22c2      	movs	r2, #194	; 0xc2
 800a7a8:	4930      	ldr	r1, [pc, #192]	; (800a86c <tcp_input+0x238>)
 800a7aa:	4829      	ldr	r0, [pc, #164]	; (800a850 <tcp_input+0x21c>)
 800a7ac:	f009 fd42 	bl	8014234 <iprintf>
 800a7b0:	e778      	b.n	800a6a4 <tcp_input+0x70>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a7b2:	4b25      	ldr	r3, [pc, #148]	; (800a848 <tcp_input+0x214>)
 800a7b4:	22df      	movs	r2, #223	; 0xdf
 800a7b6:	492e      	ldr	r1, [pc, #184]	; (800a870 <tcp_input+0x23c>)
 800a7b8:	4825      	ldr	r0, [pc, #148]	; (800a850 <tcp_input+0x21c>)
 800a7ba:	f009 fd3b 	bl	8014234 <iprintf>
 800a7be:	e791      	b.n	800a6e4 <tcp_input+0xb0>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a7c0:	4b21      	ldr	r3, [pc, #132]	; (800a848 <tcp_input+0x214>)
 800a7c2:	22fb      	movs	r2, #251	; 0xfb
 800a7c4:	492b      	ldr	r1, [pc, #172]	; (800a874 <tcp_input+0x240>)
 800a7c6:	4822      	ldr	r0, [pc, #136]	; (800a850 <tcp_input+0x21c>)
 800a7c8:	f009 fd34 	bl	8014234 <iprintf>
 800a7cc:	e01c      	b.n	800a808 <tcp_input+0x1d4>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a7ce:	4b1e      	ldr	r3, [pc, #120]	; (800a848 <tcp_input+0x214>)
 800a7d0:	22fc      	movs	r2, #252	; 0xfc
 800a7d2:	4929      	ldr	r1, [pc, #164]	; (800a878 <tcp_input+0x244>)
 800a7d4:	481e      	ldr	r0, [pc, #120]	; (800a850 <tcp_input+0x21c>)
 800a7d6:	f009 fd2d 	bl	8014234 <iprintf>
 800a7da:	e019      	b.n	800a810 <tcp_input+0x1dc>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a7dc:	4b1a      	ldr	r3, [pc, #104]	; (800a848 <tcp_input+0x214>)
 800a7de:	22fd      	movs	r2, #253	; 0xfd
 800a7e0:	4926      	ldr	r1, [pc, #152]	; (800a87c <tcp_input+0x248>)
 800a7e2:	481b      	ldr	r0, [pc, #108]	; (800a850 <tcp_input+0x21c>)
 800a7e4:	f009 fd26 	bl	8014234 <iprintf>
 800a7e8:	e016      	b.n	800a818 <tcp_input+0x1e4>
    if (pcb->remote_port == tcphdr->src &&
 800a7ea:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800a7ee:	4b11      	ldr	r3, [pc, #68]	; (800a834 <tcp_input+0x200>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	881a      	ldrh	r2, [r3, #0]
 800a7f4:	4291      	cmp	r1, r2
 800a7f6:	d043      	beq.n	800a880 <tcp_input+0x24c>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a7f8:	4626      	mov	r6, r4
 800a7fa:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800a7fc:	2c00      	cmp	r4, #0
 800a7fe:	d077      	beq.n	800a8f0 <tcp_input+0x2bc>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a800:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800a804:	2b00      	cmp	r3, #0
 800a806:	d0db      	beq.n	800a7c0 <tcp_input+0x18c>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a808:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800a80c:	2b0a      	cmp	r3, #10
 800a80e:	d0de      	beq.n	800a7ce <tcp_input+0x19a>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a810:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800a814:	2b01      	cmp	r3, #1
 800a816:	d0e1      	beq.n	800a7dc <tcp_input+0x1a8>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a818:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800a81c:	2a00      	cmp	r2, #0
 800a81e:	d0e4      	beq.n	800a7ea <tcp_input+0x1b6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a820:	4b05      	ldr	r3, [pc, #20]	; (800a838 <tcp_input+0x204>)
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 800a828:	3301      	adds	r3, #1
 800a82a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d0dc      	beq.n	800a7ea <tcp_input+0x1b6>
 800a830:	e7e2      	b.n	800a7f8 <tcp_input+0x1c4>
 800a832:	bf00      	nop
 800a834:	20000668 	.word	0x20000668
 800a838:	200039e8 	.word	0x200039e8
 800a83c:	20000674 	.word	0x20000674
 800a840:	20000670 	.word	0x20000670
 800a844:	2000066c 	.word	0x2000066c
 800a848:	08016368 	.word	0x08016368
 800a84c:	08016680 	.word	0x08016680
 800a850:	08015418 	.word	0x08015418
 800a854:	0801664c 	.word	0x0801664c
 800a858:	20000660 	.word	0x20000660
 800a85c:	2000063c 	.word	0x2000063c
 800a860:	20000640 	.word	0x20000640
 800a864:	20000676 	.word	0x20000676
 800a868:	20007b20 	.word	0x20007b20
 800a86c:	08016664 	.word	0x08016664
 800a870:	08016674 	.word	0x08016674
 800a874:	080166a0 	.word	0x080166a0
 800a878:	080166c8 	.word	0x080166c8
 800a87c:	080166f4 	.word	0x080166f4
        pcb->local_port == tcphdr->dest &&
 800a880:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a882:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 800a884:	429a      	cmp	r2, r3
 800a886:	d1b7      	bne.n	800a7f8 <tcp_input+0x1c4>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a888:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a88c:	4a9f      	ldr	r2, [pc, #636]	; (800ab0c <tcp_input+0x4d8>)
 800a88e:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
        pcb->local_port == tcphdr->dest &&
 800a892:	4293      	cmp	r3, r2
 800a894:	d1b0      	bne.n	800a7f8 <tcp_input+0x1c4>
 800a896:	2b06      	cmp	r3, #6
 800a898:	f000 8086 	beq.w	800a9a8 <tcp_input+0x374>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a89c:	69a3      	ldr	r3, [r4, #24]
 800a89e:	4a9b      	ldr	r2, [pc, #620]	; (800ab0c <tcp_input+0x4d8>)
 800a8a0:	6952      	ldr	r2, [r2, #20]
        pcb->local_port == tcphdr->dest &&
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	bf14      	ite	ne
 800a8a6:	2300      	movne	r3, #0
 800a8a8:	2301      	moveq	r3, #1
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d0a4      	beq.n	800a7f8 <tcp_input+0x1c4>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a8ae:	7d23      	ldrb	r3, [r4, #20]
 800a8b0:	4a96      	ldr	r2, [pc, #600]	; (800ab0c <tcp_input+0x4d8>)
 800a8b2:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d19e      	bne.n	800a7f8 <tcp_input+0x1c4>
 800a8ba:	2b06      	cmp	r3, #6
 800a8bc:	f000 809b 	beq.w	800a9f6 <tcp_input+0x3c2>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a8c0:	6823      	ldr	r3, [r4, #0]
 800a8c2:	4a92      	ldr	r2, [pc, #584]	; (800ab0c <tcp_input+0x4d8>)
 800a8c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	bf14      	ite	ne
 800a8ca:	2300      	movne	r3, #0
 800a8cc:	2301      	moveq	r3, #1
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d092      	beq.n	800a7f8 <tcp_input+0x1c4>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a8d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8d4:	42a3      	cmp	r3, r4
 800a8d6:	f000 80b4 	beq.w	800aa42 <tcp_input+0x40e>
      if (prev != NULL) {
 800a8da:	b12e      	cbz	r6, 800a8e8 <tcp_input+0x2b4>
        prev->next = pcb->next;
 800a8dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8de:	6373      	str	r3, [r6, #52]	; 0x34
        pcb->next = tcp_active_pcbs;
 800a8e0:	4b8b      	ldr	r3, [pc, #556]	; (800ab10 <tcp_input+0x4dc>)
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	6362      	str	r2, [r4, #52]	; 0x34
        tcp_active_pcbs = pcb;
 800a8e6:	601c      	str	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a8e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8ea:	42a3      	cmp	r3, r4
 800a8ec:	f000 80b1 	beq.w	800aa52 <tcp_input+0x41e>
  if (pcb == NULL) {
 800a8f0:	2c00      	cmp	r4, #0
 800a8f2:	f000 80b6 	beq.w	800aa62 <tcp_input+0x42e>
  if (pcb != NULL) {
 800a8f6:	2c00      	cmp	r4, #0
 800a8f8:	f000 8293 	beq.w	800ae22 <tcp_input+0x7ee>
    inseg.next = NULL;
 800a8fc:	4a85      	ldr	r2, [pc, #532]	; (800ab14 <tcp_input+0x4e0>)
 800a8fe:	2300      	movs	r3, #0
 800a900:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 800a902:	8929      	ldrh	r1, [r5, #8]
 800a904:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 800a906:	6055      	str	r5, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a908:	4983      	ldr	r1, [pc, #524]	; (800ab18 <tcp_input+0x4e4>)
 800a90a:	6809      	ldr	r1, [r1, #0]
 800a90c:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 800a90e:	4a83      	ldr	r2, [pc, #524]	; (800ab1c <tcp_input+0x4e8>)
 800a910:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 800a912:	4a83      	ldr	r2, [pc, #524]	; (800ab20 <tcp_input+0x4ec>)
 800a914:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 800a916:	4a83      	ldr	r2, [pc, #524]	; (800ab24 <tcp_input+0x4f0>)
 800a918:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 800a91a:	4b83      	ldr	r3, [pc, #524]	; (800ab28 <tcp_input+0x4f4>)
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	f013 0f08 	tst.w	r3, #8
 800a922:	d003      	beq.n	800a92c <tcp_input+0x2f8>
      p->flags |= PBUF_FLAG_PUSH;
 800a924:	7b6b      	ldrb	r3, [r5, #13]
 800a926:	f043 0301 	orr.w	r3, r3, #1
 800a92a:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 800a92c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800a930:	b173      	cbz	r3, 800a950 <tcp_input+0x31c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a932:	4620      	mov	r0, r4
 800a934:	f7fe f8bc 	bl	8008ab0 <tcp_process_refused_data>
 800a938:	f110 0f0d 	cmn.w	r0, #13
 800a93c:	f000 81d9 	beq.w	800acf2 <tcp_input+0x6be>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a940:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a944:	b123      	cbz	r3, 800a950 <tcp_input+0x31c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a946:	4b79      	ldr	r3, [pc, #484]	; (800ab2c <tcp_input+0x4f8>)
 800a948:	881b      	ldrh	r3, [r3, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f040 81d1 	bne.w	800acf2 <tcp_input+0x6be>
    tcp_input_pcb = pcb;
 800a950:	4b77      	ldr	r3, [pc, #476]	; (800ab30 <tcp_input+0x4fc>)
 800a952:	601c      	str	r4, [r3, #0]
    err = tcp_process(pcb);
 800a954:	4620      	mov	r0, r4
 800a956:	f7ff fb6b 	bl	800a030 <tcp_process>
    if (err != ERR_ABRT) {
 800a95a:	f110 0f0d 	cmn.w	r0, #13
 800a95e:	d013      	beq.n	800a988 <tcp_input+0x354>
      if (recv_flags & TF_RESET) {
 800a960:	4b6f      	ldr	r3, [pc, #444]	; (800ab20 <tcp_input+0x4ec>)
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	f013 0f08 	tst.w	r3, #8
 800a968:	f000 81cc 	beq.w	800ad04 <tcp_input+0x6d0>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a96c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800a970:	b11b      	cbz	r3, 800a97a <tcp_input+0x346>
 800a972:	f06f 010d 	mvn.w	r1, #13
 800a976:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a978:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a97a:	4621      	mov	r1, r4
 800a97c:	4864      	ldr	r0, [pc, #400]	; (800ab10 <tcp_input+0x4dc>)
 800a97e:	f7fd fcd5 	bl	800832c <tcp_pcb_remove>
        tcp_free(pcb);
 800a982:	4620      	mov	r0, r4
 800a984:	f7fd fb68 	bl	8008058 <tcp_free>
    tcp_input_pcb = NULL;
 800a988:	2300      	movs	r3, #0
 800a98a:	4a69      	ldr	r2, [pc, #420]	; (800ab30 <tcp_input+0x4fc>)
 800a98c:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 800a98e:	4a63      	ldr	r2, [pc, #396]	; (800ab1c <tcp_input+0x4e8>)
 800a990:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL) {
 800a992:	4b60      	ldr	r3, [pc, #384]	; (800ab14 <tcp_input+0x4e0>)
 800a994:	6858      	ldr	r0, [r3, #4]
 800a996:	2800      	cmp	r0, #0
 800a998:	f43f aec1 	beq.w	800a71e <tcp_input+0xea>
      pbuf_free(inseg.p);
 800a99c:	f7fc fefa 	bl	8007794 <pbuf_free>
      inseg.p = NULL;
 800a9a0:	4b5c      	ldr	r3, [pc, #368]	; (800ab14 <tcp_input+0x4e0>)
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	605a      	str	r2, [r3, #4]
 800a9a6:	e6ba      	b.n	800a71e <tcp_input+0xea>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a9a8:	69a2      	ldr	r2, [r4, #24]
 800a9aa:	4b58      	ldr	r3, [pc, #352]	; (800ab0c <tcp_input+0x4d8>)
 800a9ac:	695b      	ldr	r3, [r3, #20]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d001      	beq.n	800a9b6 <tcp_input+0x382>
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	e779      	b.n	800a8aa <tcp_input+0x276>
 800a9b6:	69e2      	ldr	r2, [r4, #28]
 800a9b8:	4b54      	ldr	r3, [pc, #336]	; (800ab0c <tcp_input+0x4d8>)
 800a9ba:	699b      	ldr	r3, [r3, #24]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d001      	beq.n	800a9c4 <tcp_input+0x390>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	e772      	b.n	800a8aa <tcp_input+0x276>
 800a9c4:	6a22      	ldr	r2, [r4, #32]
 800a9c6:	4b51      	ldr	r3, [pc, #324]	; (800ab0c <tcp_input+0x4d8>)
 800a9c8:	69db      	ldr	r3, [r3, #28]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d001      	beq.n	800a9d2 <tcp_input+0x39e>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	e76b      	b.n	800a8aa <tcp_input+0x276>
 800a9d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a9d4:	4b4d      	ldr	r3, [pc, #308]	; (800ab0c <tcp_input+0x4d8>)
 800a9d6:	6a1b      	ldr	r3, [r3, #32]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d001      	beq.n	800a9e0 <tcp_input+0x3ac>
 800a9dc:	2300      	movs	r3, #0
 800a9de:	e764      	b.n	800a8aa <tcp_input+0x276>
 800a9e0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800a9e4:	4b49      	ldr	r3, [pc, #292]	; (800ab0c <tcp_input+0x4d8>)
 800a9e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d001      	beq.n	800a9f2 <tcp_input+0x3be>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	e75b      	b.n	800a8aa <tcp_input+0x276>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e759      	b.n	800a8aa <tcp_input+0x276>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a9f6:	6822      	ldr	r2, [r4, #0]
 800a9f8:	4b44      	ldr	r3, [pc, #272]	; (800ab0c <tcp_input+0x4d8>)
 800a9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d001      	beq.n	800aa04 <tcp_input+0x3d0>
 800aa00:	2300      	movs	r3, #0
 800aa02:	e764      	b.n	800a8ce <tcp_input+0x29a>
 800aa04:	6862      	ldr	r2, [r4, #4]
 800aa06:	4b41      	ldr	r3, [pc, #260]	; (800ab0c <tcp_input+0x4d8>)
 800aa08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d001      	beq.n	800aa12 <tcp_input+0x3de>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	e75d      	b.n	800a8ce <tcp_input+0x29a>
 800aa12:	68a2      	ldr	r2, [r4, #8]
 800aa14:	4b3d      	ldr	r3, [pc, #244]	; (800ab0c <tcp_input+0x4d8>)
 800aa16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d001      	beq.n	800aa20 <tcp_input+0x3ec>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	e756      	b.n	800a8ce <tcp_input+0x29a>
 800aa20:	68e2      	ldr	r2, [r4, #12]
 800aa22:	4b3a      	ldr	r3, [pc, #232]	; (800ab0c <tcp_input+0x4d8>)
 800aa24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d001      	beq.n	800aa2e <tcp_input+0x3fa>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	e74f      	b.n	800a8ce <tcp_input+0x29a>
 800aa2e:	7c22      	ldrb	r2, [r4, #16]
 800aa30:	4b36      	ldr	r3, [pc, #216]	; (800ab0c <tcp_input+0x4d8>)
 800aa32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d001      	beq.n	800aa3e <tcp_input+0x40a>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	e747      	b.n	800a8ce <tcp_input+0x29a>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e745      	b.n	800a8ce <tcp_input+0x29a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800aa42:	4b3c      	ldr	r3, [pc, #240]	; (800ab34 <tcp_input+0x500>)
 800aa44:	f240 120d 	movw	r2, #269	; 0x10d
 800aa48:	493b      	ldr	r1, [pc, #236]	; (800ab38 <tcp_input+0x504>)
 800aa4a:	483c      	ldr	r0, [pc, #240]	; (800ab3c <tcp_input+0x508>)
 800aa4c:	f009 fbf2 	bl	8014234 <iprintf>
 800aa50:	e743      	b.n	800a8da <tcp_input+0x2a6>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800aa52:	4b38      	ldr	r3, [pc, #224]	; (800ab34 <tcp_input+0x500>)
 800aa54:	f240 1215 	movw	r2, #277	; 0x115
 800aa58:	4939      	ldr	r1, [pc, #228]	; (800ab40 <tcp_input+0x50c>)
 800aa5a:	4838      	ldr	r0, [pc, #224]	; (800ab3c <tcp_input+0x508>)
 800aa5c:	f009 fbea 	bl	8014234 <iprintf>
 800aa60:	e746      	b.n	800a8f0 <tcp_input+0x2bc>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa62:	4b38      	ldr	r3, [pc, #224]	; (800ab44 <tcp_input+0x510>)
 800aa64:	681c      	ldr	r4, [r3, #0]
 800aa66:	e00f      	b.n	800aa88 <tcp_input+0x454>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800aa68:	4b32      	ldr	r3, [pc, #200]	; (800ab34 <tcp_input+0x500>)
 800aa6a:	f240 121f 	movw	r2, #287	; 0x11f
 800aa6e:	4936      	ldr	r1, [pc, #216]	; (800ab48 <tcp_input+0x514>)
 800aa70:	4832      	ldr	r0, [pc, #200]	; (800ab3c <tcp_input+0x508>)
 800aa72:	f009 fbdf 	bl	8014234 <iprintf>
 800aa76:	e00e      	b.n	800aa96 <tcp_input+0x462>
      if (pcb->remote_port == tcphdr->src &&
 800aa78:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800aa7c:	4b26      	ldr	r3, [pc, #152]	; (800ab18 <tcp_input+0x4e4>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	881a      	ldrh	r2, [r3, #0]
 800aa82:	4291      	cmp	r1, r2
 800aa84:	d014      	beq.n	800aab0 <tcp_input+0x47c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aa86:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800aa88:	2c00      	cmp	r4, #0
 800aa8a:	f000 80ac 	beq.w	800abe6 <tcp_input+0x5b2>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800aa8e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800aa92:	2b0a      	cmp	r3, #10
 800aa94:	d1e8      	bne.n	800aa68 <tcp_input+0x434>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800aa96:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800aa9a:	2a00      	cmp	r2, #0
 800aa9c:	d0ec      	beq.n	800aa78 <tcp_input+0x444>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800aa9e:	4b1b      	ldr	r3, [pc, #108]	; (800ab0c <tcp_input+0x4d8>)
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d0e4      	beq.n	800aa78 <tcp_input+0x444>
 800aaae:	e7ea      	b.n	800aa86 <tcp_input+0x452>
          pcb->local_port == tcphdr->dest &&
 800aab0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800aab2:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d1e6      	bne.n	800aa86 <tcp_input+0x452>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800aab8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800aabc:	4a13      	ldr	r2, [pc, #76]	; (800ab0c <tcp_input+0x4d8>)
 800aabe:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
          pcb->local_port == tcphdr->dest &&
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d1df      	bne.n	800aa86 <tcp_input+0x452>
 800aac6:	2b06      	cmp	r3, #6
 800aac8:	d040      	beq.n	800ab4c <tcp_input+0x518>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800aaca:	69a3      	ldr	r3, [r4, #24]
 800aacc:	4a0f      	ldr	r2, [pc, #60]	; (800ab0c <tcp_input+0x4d8>)
 800aace:	6952      	ldr	r2, [r2, #20]
          pcb->local_port == tcphdr->dest &&
 800aad0:	4293      	cmp	r3, r2
 800aad2:	bf14      	ite	ne
 800aad4:	2300      	movne	r3, #0
 800aad6:	2301      	moveq	r3, #1
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d0d4      	beq.n	800aa86 <tcp_input+0x452>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800aadc:	7d23      	ldrb	r3, [r4, #20]
 800aade:	4a0b      	ldr	r2, [pc, #44]	; (800ab0c <tcp_input+0x4d8>)
 800aae0:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d1ce      	bne.n	800aa86 <tcp_input+0x452>
 800aae8:	2b06      	cmp	r3, #6
 800aaea:	d056      	beq.n	800ab9a <tcp_input+0x566>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800aaec:	6823      	ldr	r3, [r4, #0]
 800aaee:	4a07      	ldr	r2, [pc, #28]	; (800ab0c <tcp_input+0x4d8>)
 800aaf0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	bf14      	ite	ne
 800aaf6:	2300      	movne	r3, #0
 800aaf8:	2301      	moveq	r3, #1
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d0c3      	beq.n	800aa86 <tcp_input+0x452>
          tcp_timewait_input(pcb);
 800aafe:	4620      	mov	r0, r4
 800ab00:	f7fe fb8e 	bl	8009220 <tcp_timewait_input>
        pbuf_free(p);
 800ab04:	4628      	mov	r0, r5
 800ab06:	f7fc fe45 	bl	8007794 <pbuf_free>
        return;
 800ab0a:	e608      	b.n	800a71e <tcp_input+0xea>
 800ab0c:	200039e8 	.word	0x200039e8
 800ab10:	20007b20 	.word	0x20007b20
 800ab14:	20000644 	.word	0x20000644
 800ab18:	20000668 	.word	0x20000668
 800ab1c:	20000658 	.word	0x20000658
 800ab20:	2000065c 	.word	0x2000065c
 800ab24:	20000654 	.word	0x20000654
 800ab28:	20000640 	.word	0x20000640
 800ab2c:	20000676 	.word	0x20000676
 800ab30:	20007b34 	.word	0x20007b34
 800ab34:	08016368 	.word	0x08016368
 800ab38:	0801671c 	.word	0x0801671c
 800ab3c:	08015418 	.word	0x08015418
 800ab40:	08016748 	.word	0x08016748
 800ab44:	20007b30 	.word	0x20007b30
 800ab48:	08016774 	.word	0x08016774
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ab4c:	69a2      	ldr	r2, [r4, #24]
 800ab4e:	4b98      	ldr	r3, [pc, #608]	; (800adb0 <tcp_input+0x77c>)
 800ab50:	695b      	ldr	r3, [r3, #20]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d001      	beq.n	800ab5a <tcp_input+0x526>
 800ab56:	2300      	movs	r3, #0
 800ab58:	e7be      	b.n	800aad8 <tcp_input+0x4a4>
 800ab5a:	69e2      	ldr	r2, [r4, #28]
 800ab5c:	4b94      	ldr	r3, [pc, #592]	; (800adb0 <tcp_input+0x77c>)
 800ab5e:	699b      	ldr	r3, [r3, #24]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d001      	beq.n	800ab68 <tcp_input+0x534>
 800ab64:	2300      	movs	r3, #0
 800ab66:	e7b7      	b.n	800aad8 <tcp_input+0x4a4>
 800ab68:	6a22      	ldr	r2, [r4, #32]
 800ab6a:	4b91      	ldr	r3, [pc, #580]	; (800adb0 <tcp_input+0x77c>)
 800ab6c:	69db      	ldr	r3, [r3, #28]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d001      	beq.n	800ab76 <tcp_input+0x542>
 800ab72:	2300      	movs	r3, #0
 800ab74:	e7b0      	b.n	800aad8 <tcp_input+0x4a4>
 800ab76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ab78:	4b8d      	ldr	r3, [pc, #564]	; (800adb0 <tcp_input+0x77c>)
 800ab7a:	6a1b      	ldr	r3, [r3, #32]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d001      	beq.n	800ab84 <tcp_input+0x550>
 800ab80:	2300      	movs	r3, #0
 800ab82:	e7a9      	b.n	800aad8 <tcp_input+0x4a4>
 800ab84:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800ab88:	4b89      	ldr	r3, [pc, #548]	; (800adb0 <tcp_input+0x77c>)
 800ab8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d001      	beq.n	800ab96 <tcp_input+0x562>
 800ab92:	2300      	movs	r3, #0
 800ab94:	e7a0      	b.n	800aad8 <tcp_input+0x4a4>
 800ab96:	2301      	movs	r3, #1
 800ab98:	e79e      	b.n	800aad8 <tcp_input+0x4a4>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ab9a:	6822      	ldr	r2, [r4, #0]
 800ab9c:	4b84      	ldr	r3, [pc, #528]	; (800adb0 <tcp_input+0x77c>)
 800ab9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d001      	beq.n	800aba8 <tcp_input+0x574>
 800aba4:	2300      	movs	r3, #0
 800aba6:	e7a8      	b.n	800aafa <tcp_input+0x4c6>
 800aba8:	6862      	ldr	r2, [r4, #4]
 800abaa:	4b81      	ldr	r3, [pc, #516]	; (800adb0 <tcp_input+0x77c>)
 800abac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abae:	429a      	cmp	r2, r3
 800abb0:	d001      	beq.n	800abb6 <tcp_input+0x582>
 800abb2:	2300      	movs	r3, #0
 800abb4:	e7a1      	b.n	800aafa <tcp_input+0x4c6>
 800abb6:	68a2      	ldr	r2, [r4, #8]
 800abb8:	4b7d      	ldr	r3, [pc, #500]	; (800adb0 <tcp_input+0x77c>)
 800abba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d001      	beq.n	800abc4 <tcp_input+0x590>
 800abc0:	2300      	movs	r3, #0
 800abc2:	e79a      	b.n	800aafa <tcp_input+0x4c6>
 800abc4:	68e2      	ldr	r2, [r4, #12]
 800abc6:	4b7a      	ldr	r3, [pc, #488]	; (800adb0 <tcp_input+0x77c>)
 800abc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abca:	429a      	cmp	r2, r3
 800abcc:	d001      	beq.n	800abd2 <tcp_input+0x59e>
 800abce:	2300      	movs	r3, #0
 800abd0:	e793      	b.n	800aafa <tcp_input+0x4c6>
 800abd2:	7c22      	ldrb	r2, [r4, #16]
 800abd4:	4b76      	ldr	r3, [pc, #472]	; (800adb0 <tcp_input+0x77c>)
 800abd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abda:	429a      	cmp	r2, r3
 800abdc:	d001      	beq.n	800abe2 <tcp_input+0x5ae>
 800abde:	2300      	movs	r3, #0
 800abe0:	e78b      	b.n	800aafa <tcp_input+0x4c6>
 800abe2:	2301      	movs	r3, #1
 800abe4:	e789      	b.n	800aafa <tcp_input+0x4c6>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800abe6:	4b73      	ldr	r3, [pc, #460]	; (800adb4 <tcp_input+0x780>)
 800abe8:	681e      	ldr	r6, [r3, #0]
 800abea:	4630      	mov	r0, r6
    prev = NULL;
 800abec:	4621      	mov	r1, r4
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800abee:	e007      	b.n	800ac00 <tcp_input+0x5cc>
      if (lpcb->local_port == tcphdr->dest) {
 800abf0:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 800abf2:	4b71      	ldr	r3, [pc, #452]	; (800adb8 <tcp_input+0x784>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	885b      	ldrh	r3, [r3, #2]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d00f      	beq.n	800ac1c <tcp_input+0x5e8>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800abfc:	4601      	mov	r1, r0
 800abfe:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800ac00:	b348      	cbz	r0, 800ac56 <tcp_input+0x622>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ac02:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 800ac06:	2a00      	cmp	r2, #0
 800ac08:	d0f2      	beq.n	800abf0 <tcp_input+0x5bc>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ac0a:	4b69      	ldr	r3, [pc, #420]	; (800adb0 <tcp_input+0x77c>)
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 800ac12:	3301      	adds	r3, #1
 800ac14:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d0ea      	beq.n	800abf0 <tcp_input+0x5bc>
 800ac1a:	e7ef      	b.n	800abfc <tcp_input+0x5c8>
        if (IP_IS_ANY_TYPE_VAL(lpcb->local_ip)) {
 800ac1c:	7d03      	ldrb	r3, [r0, #20]
 800ac1e:	2b2e      	cmp	r3, #46	; 0x2e
 800ac20:	d019      	beq.n	800ac56 <tcp_input+0x622>
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
 800ac22:	4a63      	ldr	r2, [pc, #396]	; (800adb0 <tcp_input+0x77c>)
 800ac24:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d1e7      	bne.n	800abfc <tcp_input+0x5c8>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ac2c:	2b06      	cmp	r3, #6
 800ac2e:	d021      	beq.n	800ac74 <tcp_input+0x640>
 800ac30:	6802      	ldr	r2, [r0, #0]
 800ac32:	4f5f      	ldr	r7, [pc, #380]	; (800adb0 <tcp_input+0x77c>)
 800ac34:	6aff      	ldr	r7, [r7, #44]	; 0x2c
 800ac36:	42ba      	cmp	r2, r7
 800ac38:	bf14      	ite	ne
 800ac3a:	2200      	movne	r2, #0
 800ac3c:	2201      	moveq	r2, #1
 800ac3e:	b952      	cbnz	r2, 800ac56 <tcp_input+0x622>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ac40:	b148      	cbz	r0, 800ac56 <tcp_input+0x622>
 800ac42:	2b06      	cmp	r3, #6
 800ac44:	d03c      	beq.n	800acc0 <tcp_input+0x68c>
 800ac46:	2800      	cmp	r0, #0
 800ac48:	d04f      	beq.n	800acea <tcp_input+0x6b6>
 800ac4a:	6803      	ldr	r3, [r0, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d14e      	bne.n	800acee <tcp_input+0x6ba>
 800ac50:	2301      	movs	r3, #1
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d0d2      	beq.n	800abfc <tcp_input+0x5c8>
    if (lpcb != NULL) {
 800ac56:	2800      	cmp	r0, #0
 800ac58:	f43f ae4d 	beq.w	800a8f6 <tcp_input+0x2c2>
      if (prev != NULL) {
 800ac5c:	b121      	cbz	r1, 800ac68 <tcp_input+0x634>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ac5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ac60:	634b      	str	r3, [r1, #52]	; 0x34
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ac62:	6346      	str	r6, [r0, #52]	; 0x34
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ac64:	4b53      	ldr	r3, [pc, #332]	; (800adb4 <tcp_input+0x780>)
 800ac66:	6018      	str	r0, [r3, #0]
        tcp_listen_input(lpcb);
 800ac68:	f7fe fb3a 	bl	80092e0 <tcp_listen_input>
      pbuf_free(p);
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	f7fc fd91 	bl	8007794 <pbuf_free>
      return;
 800ac72:	e554      	b.n	800a71e <tcp_input+0xea>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ac74:	6807      	ldr	r7, [r0, #0]
 800ac76:	4a4e      	ldr	r2, [pc, #312]	; (800adb0 <tcp_input+0x77c>)
 800ac78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ac7a:	4297      	cmp	r7, r2
 800ac7c:	d001      	beq.n	800ac82 <tcp_input+0x64e>
 800ac7e:	2200      	movs	r2, #0
 800ac80:	e7dd      	b.n	800ac3e <tcp_input+0x60a>
 800ac82:	6847      	ldr	r7, [r0, #4]
 800ac84:	4a4a      	ldr	r2, [pc, #296]	; (800adb0 <tcp_input+0x77c>)
 800ac86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ac88:	4297      	cmp	r7, r2
 800ac8a:	d001      	beq.n	800ac90 <tcp_input+0x65c>
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	e7d6      	b.n	800ac3e <tcp_input+0x60a>
 800ac90:	6887      	ldr	r7, [r0, #8]
 800ac92:	4a47      	ldr	r2, [pc, #284]	; (800adb0 <tcp_input+0x77c>)
 800ac94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ac96:	4297      	cmp	r7, r2
 800ac98:	d001      	beq.n	800ac9e <tcp_input+0x66a>
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	e7cf      	b.n	800ac3e <tcp_input+0x60a>
 800ac9e:	68c7      	ldr	r7, [r0, #12]
 800aca0:	4a43      	ldr	r2, [pc, #268]	; (800adb0 <tcp_input+0x77c>)
 800aca2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800aca4:	4297      	cmp	r7, r2
 800aca6:	d001      	beq.n	800acac <tcp_input+0x678>
 800aca8:	2200      	movs	r2, #0
 800acaa:	e7c8      	b.n	800ac3e <tcp_input+0x60a>
 800acac:	7c07      	ldrb	r7, [r0, #16]
 800acae:	4a40      	ldr	r2, [pc, #256]	; (800adb0 <tcp_input+0x77c>)
 800acb0:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 800acb4:	4297      	cmp	r7, r2
 800acb6:	d001      	beq.n	800acbc <tcp_input+0x688>
 800acb8:	2200      	movs	r2, #0
 800acba:	e7c0      	b.n	800ac3e <tcp_input+0x60a>
 800acbc:	2201      	movs	r2, #1
 800acbe:	e7be      	b.n	800ac3e <tcp_input+0x60a>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800acc0:	b148      	cbz	r0, 800acd6 <tcp_input+0x6a2>
 800acc2:	6803      	ldr	r3, [r0, #0]
 800acc4:	b94b      	cbnz	r3, 800acda <tcp_input+0x6a6>
 800acc6:	6843      	ldr	r3, [r0, #4]
 800acc8:	b94b      	cbnz	r3, 800acde <tcp_input+0x6aa>
 800acca:	6883      	ldr	r3, [r0, #8]
 800accc:	b94b      	cbnz	r3, 800ace2 <tcp_input+0x6ae>
 800acce:	68c3      	ldr	r3, [r0, #12]
 800acd0:	b14b      	cbz	r3, 800ace6 <tcp_input+0x6b2>
 800acd2:	2300      	movs	r3, #0
 800acd4:	e7bd      	b.n	800ac52 <tcp_input+0x61e>
 800acd6:	2301      	movs	r3, #1
 800acd8:	e7bb      	b.n	800ac52 <tcp_input+0x61e>
 800acda:	2300      	movs	r3, #0
 800acdc:	e7b9      	b.n	800ac52 <tcp_input+0x61e>
 800acde:	2300      	movs	r3, #0
 800ace0:	e7b7      	b.n	800ac52 <tcp_input+0x61e>
 800ace2:	2300      	movs	r3, #0
 800ace4:	e7b5      	b.n	800ac52 <tcp_input+0x61e>
 800ace6:	2301      	movs	r3, #1
 800ace8:	e7b3      	b.n	800ac52 <tcp_input+0x61e>
 800acea:	2301      	movs	r3, #1
 800acec:	e7b1      	b.n	800ac52 <tcp_input+0x61e>
 800acee:	2300      	movs	r3, #0
 800acf0:	e7af      	b.n	800ac52 <tcp_input+0x61e>
        if (pcb->rcv_ann_wnd == 0) {
 800acf2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f47f ae46 	bne.w	800a988 <tcp_input+0x354>
          tcp_send_empty_ack(pcb);
 800acfc:	4620      	mov	r0, r4
 800acfe:	f000 fdfb 	bl	800b8f8 <tcp_send_empty_ack>
        goto aborted;
 800ad02:	e641      	b.n	800a988 <tcp_input+0x354>
        if (recv_acked > 0) {
 800ad04:	4b2d      	ldr	r3, [pc, #180]	; (800adbc <tcp_input+0x788>)
 800ad06:	881a      	ldrh	r2, [r3, #0]
 800ad08:	b162      	cbz	r2, 800ad24 <tcp_input+0x6f0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ad0a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800ad0e:	b133      	cbz	r3, 800ad1e <tcp_input+0x6ea>
 800ad10:	4621      	mov	r1, r4
 800ad12:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800ad14:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800ad16:	f110 0f0d 	cmn.w	r0, #13
 800ad1a:	f43f ae35 	beq.w	800a988 <tcp_input+0x354>
          recv_acked = 0;
 800ad1e:	4b27      	ldr	r3, [pc, #156]	; (800adbc <tcp_input+0x788>)
 800ad20:	2200      	movs	r2, #0
 800ad22:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ad24:	4620      	mov	r0, r4
 800ad26:	f7fe fa49 	bl	80091bc <tcp_input_delayed_close>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	f47f ae2c 	bne.w	800a988 <tcp_input+0x354>
        if (recv_data != NULL) {
 800ad30:	4b23      	ldr	r3, [pc, #140]	; (800adc0 <tcp_input+0x78c>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	b30b      	cbz	r3, 800ad7a <tcp_input+0x746>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ad36:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800ad3a:	b133      	cbz	r3, 800ad4a <tcp_input+0x716>
 800ad3c:	4b21      	ldr	r3, [pc, #132]	; (800adc4 <tcp_input+0x790>)
 800ad3e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ad42:	4921      	ldr	r1, [pc, #132]	; (800adc8 <tcp_input+0x794>)
 800ad44:	4821      	ldr	r0, [pc, #132]	; (800adcc <tcp_input+0x798>)
 800ad46:	f009 fa75 	bl	8014234 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ad4a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800ad4e:	f013 0f10 	tst.w	r3, #16
 800ad52:	d141      	bne.n	800add8 <tcp_input+0x7a4>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ad54:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 800ad58:	2d00      	cmp	r5, #0
 800ad5a:	d045      	beq.n	800ade8 <tcp_input+0x7b4>
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	4a18      	ldr	r2, [pc, #96]	; (800adc0 <tcp_input+0x78c>)
 800ad60:	6812      	ldr	r2, [r2, #0]
 800ad62:	4621      	mov	r1, r4
 800ad64:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800ad66:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 800ad68:	f110 0f0d 	cmn.w	r0, #13
 800ad6c:	f43f ae0c 	beq.w	800a988 <tcp_input+0x354>
          if (err != ERR_OK) {
 800ad70:	b118      	cbz	r0, 800ad7a <tcp_input+0x746>
            pcb->refused_data = recv_data;
 800ad72:	4b13      	ldr	r3, [pc, #76]	; (800adc0 <tcp_input+0x78c>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        if (recv_flags & TF_GOT_FIN) {
 800ad7a:	4b15      	ldr	r3, [pc, #84]	; (800add0 <tcp_input+0x79c>)
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	f013 0f20 	tst.w	r3, #32
 800ad82:	d007      	beq.n	800ad94 <tcp_input+0x760>
          if (pcb->refused_data != NULL) {
 800ad84:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d035      	beq.n	800adf8 <tcp_input+0x7c4>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ad8c:	7b5a      	ldrb	r2, [r3, #13]
 800ad8e:	f042 0220 	orr.w	r2, r2, #32
 800ad92:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800ad94:	4b0f      	ldr	r3, [pc, #60]	; (800add4 <tcp_input+0x7a0>)
 800ad96:	2200      	movs	r2, #0
 800ad98:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f7fe fa0e 	bl	80091bc <tcp_input_delayed_close>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	f47f adf1 	bne.w	800a988 <tcp_input+0x354>
        tcp_output(pcb);
 800ada6:	4620      	mov	r0, r4
 800ada8:	f000 fde8 	bl	800b97c <tcp_output>
 800adac:	e5ec      	b.n	800a988 <tcp_input+0x354>
 800adae:	bf00      	nop
 800adb0:	200039e8 	.word	0x200039e8
 800adb4:	20007b28 	.word	0x20007b28
 800adb8:	20000668 	.word	0x20000668
 800adbc:	20000654 	.word	0x20000654
 800adc0:	20000658 	.word	0x20000658
 800adc4:	08016368 	.word	0x08016368
 800adc8:	080167a4 	.word	0x080167a4
 800adcc:	08015418 	.word	0x08015418
 800add0:	2000065c 	.word	0x2000065c
 800add4:	20007b34 	.word	0x20007b34
            pbuf_free(recv_data);
 800add8:	4b22      	ldr	r3, [pc, #136]	; (800ae64 <tcp_input+0x830>)
 800adda:	6818      	ldr	r0, [r3, #0]
 800addc:	f7fc fcda 	bl	8007794 <pbuf_free>
            tcp_abort(pcb);
 800ade0:	4620      	mov	r0, r4
 800ade2:	f7fd fba1 	bl	8008528 <tcp_abort>
            goto aborted;
 800ade6:	e5cf      	b.n	800a988 <tcp_input+0x354>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ade8:	2300      	movs	r3, #0
 800adea:	4a1e      	ldr	r2, [pc, #120]	; (800ae64 <tcp_input+0x830>)
 800adec:	6812      	ldr	r2, [r2, #0]
 800adee:	4621      	mov	r1, r4
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7fd fe39 	bl	8008a68 <tcp_recv_null>
 800adf6:	e7b7      	b.n	800ad68 <tcp_input+0x734>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800adf8:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800adfc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ae00:	d002      	beq.n	800ae08 <tcp_input+0x7d4>
              pcb->rcv_wnd++;
 800ae02:	3301      	adds	r3, #1
 800ae04:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
            TCP_EVENT_CLOSED(pcb, err);
 800ae08:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 800ae0c:	2d00      	cmp	r5, #0
 800ae0e:	d0c1      	beq.n	800ad94 <tcp_input+0x760>
 800ae10:	2300      	movs	r3, #0
 800ae12:	461a      	mov	r2, r3
 800ae14:	4621      	mov	r1, r4
 800ae16:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800ae18:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 800ae1a:	f110 0f0d 	cmn.w	r0, #13
 800ae1e:	d1b9      	bne.n	800ad94 <tcp_input+0x760>
 800ae20:	e5b2      	b.n	800a988 <tcp_input+0x354>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ae22:	4b11      	ldr	r3, [pc, #68]	; (800ae68 <tcp_input+0x834>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	8998      	ldrh	r0, [r3, #12]
 800ae28:	f7fb f9a2 	bl	8006170 <lwip_htons>
 800ae2c:	f010 0f04 	tst.w	r0, #4
 800ae30:	d003      	beq.n	800ae3a <tcp_input+0x806>
    pbuf_free(p);
 800ae32:	4628      	mov	r0, r5
 800ae34:	f7fc fcae 	bl	8007794 <pbuf_free>
 800ae38:	e471      	b.n	800a71e <tcp_input+0xea>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ae3a:	4b0b      	ldr	r3, [pc, #44]	; (800ae68 <tcp_input+0x834>)
 800ae3c:	6819      	ldr	r1, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae3e:	4b0b      	ldr	r3, [pc, #44]	; (800ae6c <tcp_input+0x838>)
 800ae40:	4a0b      	ldr	r2, [pc, #44]	; (800ae70 <tcp_input+0x83c>)
 800ae42:	8810      	ldrh	r0, [r2, #0]
 800ae44:	4a0b      	ldr	r2, [pc, #44]	; (800ae74 <tcp_input+0x840>)
 800ae46:	6812      	ldr	r2, [r2, #0]
 800ae48:	880c      	ldrh	r4, [r1, #0]
 800ae4a:	9402      	str	r4, [sp, #8]
 800ae4c:	8849      	ldrh	r1, [r1, #2]
 800ae4e:	9101      	str	r1, [sp, #4]
 800ae50:	f1a3 0118 	sub.w	r1, r3, #24
 800ae54:	9100      	str	r1, [sp, #0]
 800ae56:	4402      	add	r2, r0
 800ae58:	4907      	ldr	r1, [pc, #28]	; (800ae78 <tcp_input+0x844>)
 800ae5a:	6809      	ldr	r1, [r1, #0]
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	f000 fd03 	bl	800b868 <tcp_rst>
 800ae62:	e7e6      	b.n	800ae32 <tcp_input+0x7fe>
 800ae64:	20000658 	.word	0x20000658
 800ae68:	20000668 	.word	0x20000668
 800ae6c:	20003a14 	.word	0x20003a14
 800ae70:	20000676 	.word	0x20000676
 800ae74:	20000660 	.word	0x20000660
 800ae78:	2000063c 	.word	0x2000063c

0800ae7c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800ae7c:	4a02      	ldr	r2, [pc, #8]	; (800ae88 <tcp_trigger_input_pcb_close+0xc>)
 800ae7e:	7813      	ldrb	r3, [r2, #0]
 800ae80:	f043 0310 	orr.w	r3, r3, #16
 800ae84:	7013      	strb	r3, [r2, #0]
}
 800ae86:	4770      	bx	lr
 800ae88:	2000065c 	.word	0x2000065c

0800ae8c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ae8c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ae8e:	4604      	mov	r4, r0
 800ae90:	b128      	cbz	r0, 800ae9e <tcp_output_segment_busy+0x12>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ae92:	6863      	ldr	r3, [r4, #4]
 800ae94:	7b9b      	ldrb	r3, [r3, #14]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d109      	bne.n	800aeae <tcp_output_segment_busy+0x22>
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
 800ae9a:	2000      	movs	r0, #0
}
 800ae9c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ae9e:	4b05      	ldr	r3, [pc, #20]	; (800aeb4 <tcp_output_segment_busy+0x28>)
 800aea0:	f240 529a 	movw	r2, #1434	; 0x59a
 800aea4:	4904      	ldr	r1, [pc, #16]	; (800aeb8 <tcp_output_segment_busy+0x2c>)
 800aea6:	4805      	ldr	r0, [pc, #20]	; (800aebc <tcp_output_segment_busy+0x30>)
 800aea8:	f009 f9c4 	bl	8014234 <iprintf>
 800aeac:	e7f1      	b.n	800ae92 <tcp_output_segment_busy+0x6>
    return 1;
 800aeae:	2001      	movs	r0, #1
 800aeb0:	e7f4      	b.n	800ae9c <tcp_output_segment_busy+0x10>
 800aeb2:	bf00      	nop
 800aeb4:	080167c0 	.word	0x080167c0
 800aeb8:	08016884 	.word	0x08016884
 800aebc:	08015418 	.word	0x08015418

0800aec0 <tcp_output_fill_options>:
}

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800aec0:	b538      	push	{r3, r4, r5, lr}
 800aec2:	4614      	mov	r4, r2
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800aec4:	460d      	mov	r5, r1
 800aec6:	b189      	cbz	r1, 800aeec <tcp_output_fill_options+0x2c>

  tcphdr = (struct tcp_hdr *)p->payload;
 800aec8:	686b      	ldr	r3, [r5, #4]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800aeca:	f103 0214 	add.w	r2, r3, #20
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800aece:	00a4      	lsls	r4, r4, #2
 800aed0:	f004 0404 	and.w	r4, r4, #4
 800aed4:	3414      	adds	r4, #20
 800aed6:	441c      	add	r4, r3
 800aed8:	4294      	cmp	r4, r2
 800aeda:	d006      	beq.n	800aeea <tcp_output_fill_options+0x2a>
 800aedc:	4b07      	ldr	r3, [pc, #28]	; (800aefc <tcp_output_fill_options+0x3c>)
 800aede:	f240 7275 	movw	r2, #1909	; 0x775
 800aee2:	4907      	ldr	r1, [pc, #28]	; (800af00 <tcp_output_fill_options+0x40>)
 800aee4:	4807      	ldr	r0, [pc, #28]	; (800af04 <tcp_output_fill_options+0x44>)
 800aee6:	f009 f9a5 	bl	8014234 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800aeea:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800aeec:	4b03      	ldr	r3, [pc, #12]	; (800aefc <tcp_output_fill_options+0x3c>)
 800aeee:	f240 7256 	movw	r2, #1878	; 0x756
 800aef2:	4905      	ldr	r1, [pc, #20]	; (800af08 <tcp_output_fill_options+0x48>)
 800aef4:	4803      	ldr	r0, [pc, #12]	; (800af04 <tcp_output_fill_options+0x44>)
 800aef6:	f009 f99d 	bl	8014234 <iprintf>
 800aefa:	e7e5      	b.n	800aec8 <tcp_output_fill_options+0x8>
 800aefc:	080167c0 	.word	0x080167c0
 800af00:	080168d4 	.word	0x080168d4
 800af04:	08015418 	.word	0x08015418
 800af08:	080168ac 	.word	0x080168ac

0800af0c <tcp_create_segment>:
{
 800af0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af10:	460e      	mov	r6, r1
 800af12:	4617      	mov	r7, r2
 800af14:	4698      	mov	r8, r3
 800af16:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800af1a:	4681      	mov	r9, r0
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d041      	beq.n	800afa4 <tcp_create_segment+0x98>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800af20:	2e00      	cmp	r6, #0
 800af22:	d046      	beq.n	800afb2 <tcp_create_segment+0xa6>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800af24:	ea4f 058a 	mov.w	r5, sl, lsl #2
 800af28:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800af2c:	2003      	movs	r0, #3
 800af2e:	f7fb ff73 	bl	8006e18 <memp_malloc>
 800af32:	4604      	mov	r4, r0
 800af34:	2800      	cmp	r0, #0
 800af36:	d043      	beq.n	800afc0 <tcp_create_segment+0xb4>
  seg->flags = optflags;
 800af38:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800af3c:	2300      	movs	r3, #0
 800af3e:	6003      	str	r3, [r0, #0]
  seg->p = p;
 800af40:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800af42:	8933      	ldrh	r3, [r6, #8]
 800af44:	fa1f fa85 	uxth.w	sl, r5
 800af48:	4553      	cmp	r3, sl
 800af4a:	d33d      	bcc.n	800afc8 <tcp_create_segment+0xbc>
  seg->len = p->tot_len - optlen;
 800af4c:	8931      	ldrh	r1, [r6, #8]
 800af4e:	eba1 010a 	sub.w	r1, r1, sl
 800af52:	8121      	strh	r1, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800af54:	2114      	movs	r1, #20
 800af56:	4630      	mov	r0, r6
 800af58:	f7fc fbcb 	bl	80076f2 <pbuf_add_header>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d13a      	bne.n	800afd6 <tcp_create_segment+0xca>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800af60:	6863      	ldr	r3, [r4, #4]
 800af62:	685e      	ldr	r6, [r3, #4]
 800af64:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800af66:	f8b9 003e 	ldrh.w	r0, [r9, #62]	; 0x3e
 800af6a:	f7fb f901 	bl	8006170 <lwip_htons>
 800af6e:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800af70:	68e6      	ldr	r6, [r4, #12]
 800af72:	f8b9 0040 	ldrh.w	r0, [r9, #64]	; 0x40
 800af76:	f7fb f8fb 	bl	8006170 <lwip_htons>
 800af7a:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800af7c:	68e6      	ldr	r6, [r4, #12]
 800af7e:	4640      	mov	r0, r8
 800af80:	f7fb f8fb 	bl	800617a <lwip_htonl>
 800af84:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800af86:	08a8      	lsrs	r0, r5, #2
 800af88:	3005      	adds	r0, #5
 800af8a:	68e5      	ldr	r5, [r4, #12]
 800af8c:	ea47 3000 	orr.w	r0, r7, r0, lsl #12
 800af90:	f7fb f8ee 	bl	8006170 <lwip_htons>
 800af94:	81a8      	strh	r0, [r5, #12]
  seg->tcphdr->urgp = 0;
 800af96:	68e3      	ldr	r3, [r4, #12]
 800af98:	2200      	movs	r2, #0
 800af9a:	749a      	strb	r2, [r3, #18]
 800af9c:	74da      	strb	r2, [r3, #19]
}
 800af9e:	4620      	mov	r0, r4
 800afa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800afa4:	4b0e      	ldr	r3, [pc, #56]	; (800afe0 <tcp_create_segment+0xd4>)
 800afa6:	22a3      	movs	r2, #163	; 0xa3
 800afa8:	490e      	ldr	r1, [pc, #56]	; (800afe4 <tcp_create_segment+0xd8>)
 800afaa:	480f      	ldr	r0, [pc, #60]	; (800afe8 <tcp_create_segment+0xdc>)
 800afac:	f009 f942 	bl	8014234 <iprintf>
 800afb0:	e7b6      	b.n	800af20 <tcp_create_segment+0x14>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800afb2:	4b0b      	ldr	r3, [pc, #44]	; (800afe0 <tcp_create_segment+0xd4>)
 800afb4:	22a4      	movs	r2, #164	; 0xa4
 800afb6:	490d      	ldr	r1, [pc, #52]	; (800afec <tcp_create_segment+0xe0>)
 800afb8:	480b      	ldr	r0, [pc, #44]	; (800afe8 <tcp_create_segment+0xdc>)
 800afba:	f009 f93b 	bl	8014234 <iprintf>
 800afbe:	e7b1      	b.n	800af24 <tcp_create_segment+0x18>
    pbuf_free(p);
 800afc0:	4630      	mov	r0, r6
 800afc2:	f7fc fbe7 	bl	8007794 <pbuf_free>
    return NULL;
 800afc6:	e7ea      	b.n	800af9e <tcp_create_segment+0x92>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800afc8:	4b05      	ldr	r3, [pc, #20]	; (800afe0 <tcp_create_segment+0xd4>)
 800afca:	22b0      	movs	r2, #176	; 0xb0
 800afcc:	4908      	ldr	r1, [pc, #32]	; (800aff0 <tcp_create_segment+0xe4>)
 800afce:	4806      	ldr	r0, [pc, #24]	; (800afe8 <tcp_create_segment+0xdc>)
 800afd0:	f009 f930 	bl	8014234 <iprintf>
 800afd4:	e7ba      	b.n	800af4c <tcp_create_segment+0x40>
    tcp_seg_free(seg);
 800afd6:	4620      	mov	r0, r4
 800afd8:	f7fd f8d6 	bl	8008188 <tcp_seg_free>
    return NULL;
 800afdc:	2400      	movs	r4, #0
 800afde:	e7de      	b.n	800af9e <tcp_create_segment+0x92>
 800afe0:	080167c0 	.word	0x080167c0
 800afe4:	080168e8 	.word	0x080168e8
 800afe8:	08015418 	.word	0x08015418
 800afec:	08016908 	.word	0x08016908
 800aff0:	0801692c 	.word	0x0801692c

0800aff4 <tcp_output_alloc_header_common>:
{
 800aff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff8:	4606      	mov	r6, r0
 800affa:	460c      	mov	r4, r1
 800affc:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800affe:	4411      	add	r1, r2
 800b000:	b289      	uxth	r1, r1
 800b002:	3114      	adds	r1, #20
 800b004:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b008:	b289      	uxth	r1, r1
 800b00a:	2036      	movs	r0, #54	; 0x36
 800b00c:	f7fc fc24 	bl	8007858 <pbuf_alloc>
  if (p != NULL) {
 800b010:	4607      	mov	r7, r0
 800b012:	b348      	cbz	r0, 800b068 <tcp_output_alloc_header_common+0x74>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b014:	f104 0313 	add.w	r3, r4, #19
 800b018:	8942      	ldrh	r2, [r0, #10]
 800b01a:	4293      	cmp	r3, r2
 800b01c:	da27      	bge.n	800b06e <tcp_output_alloc_header_common+0x7a>
    tcphdr = (struct tcp_hdr *)p->payload;
 800b01e:	687d      	ldr	r5, [r7, #4]
    tcphdr->src = lwip_htons(src_port);
 800b020:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800b024:	f7fb f8a4 	bl	8006170 <lwip_htons>
 800b028:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b02a:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800b02e:	f7fb f89f 	bl	8006170 <lwip_htons>
 800b032:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 800b034:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b038:	4630      	mov	r0, r6
 800b03a:	f7fb f89e 	bl	800617a <lwip_htonl>
 800b03e:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b040:	08a4      	lsrs	r4, r4, #2
 800b042:	3405      	adds	r4, #5
 800b044:	0324      	lsls	r4, r4, #12
 800b046:	b2a4      	uxth	r4, r4
 800b048:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800b04c:	4320      	orrs	r0, r4
 800b04e:	f7fb f88f 	bl	8006170 <lwip_htons>
 800b052:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b054:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 800b058:	f7fb f88a 	bl	8006170 <lwip_htons>
 800b05c:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 800b05e:	2300      	movs	r3, #0
 800b060:	742b      	strb	r3, [r5, #16]
 800b062:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 800b064:	74ab      	strb	r3, [r5, #18]
 800b066:	74eb      	strb	r3, [r5, #19]
}
 800b068:	4638      	mov	r0, r7
 800b06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b06e:	4b04      	ldr	r3, [pc, #16]	; (800b080 <tcp_output_alloc_header_common+0x8c>)
 800b070:	f240 7223 	movw	r2, #1827	; 0x723
 800b074:	4903      	ldr	r1, [pc, #12]	; (800b084 <tcp_output_alloc_header_common+0x90>)
 800b076:	4804      	ldr	r0, [pc, #16]	; (800b088 <tcp_output_alloc_header_common+0x94>)
 800b078:	f009 f8dc 	bl	8014234 <iprintf>
 800b07c:	e7cf      	b.n	800b01e <tcp_output_alloc_header_common+0x2a>
 800b07e:	bf00      	nop
 800b080:	080167c0 	.word	0x080167c0
 800b084:	08016944 	.word	0x08016944
 800b088:	08015418 	.word	0x08015418

0800b08c <tcp_output_alloc_header>:
{
 800b08c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b08e:	b085      	sub	sp, #20
 800b090:	460d      	mov	r5, r1
 800b092:	4616      	mov	r6, r2
 800b094:	461f      	mov	r7, r3
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b096:	4604      	mov	r4, r0
 800b098:	b1b8      	cbz	r0, 800b0ca <tcp_output_alloc_header+0x3e>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b09a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800b09e:	9303      	str	r3, [sp, #12]
 800b0a0:	2310      	movs	r3, #16
 800b0a2:	9302      	str	r3, [sp, #8]
 800b0a4:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 800b0a8:	9301      	str	r3, [sp, #4]
 800b0aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	463b      	mov	r3, r7
 800b0b0:	4632      	mov	r2, r6
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b0b6:	f7ff ff9d 	bl	800aff4 <tcp_output_alloc_header_common>
  if (p != NULL) {
 800b0ba:	b120      	cbz	r0, 800b0c6 <tcp_output_alloc_header+0x3a>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b0bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b0be:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800b0c2:	4413      	add	r3, r2
 800b0c4:	6563      	str	r3, [r4, #84]	; 0x54
}
 800b0c6:	b005      	add	sp, #20
 800b0c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b0ca:	4b04      	ldr	r3, [pc, #16]	; (800b0dc <tcp_output_alloc_header+0x50>)
 800b0cc:	f240 7242 	movw	r2, #1858	; 0x742
 800b0d0:	4903      	ldr	r1, [pc, #12]	; (800b0e0 <tcp_output_alloc_header+0x54>)
 800b0d2:	4804      	ldr	r0, [pc, #16]	; (800b0e4 <tcp_output_alloc_header+0x58>)
 800b0d4:	f009 f8ae 	bl	8014234 <iprintf>
 800b0d8:	e7df      	b.n	800b09a <tcp_output_alloc_header+0xe>
 800b0da:	bf00      	nop
 800b0dc:	080167c0 	.word	0x080167c0
 800b0e0:	08016974 	.word	0x08016974
 800b0e4:	08015418 	.word	0x08015418

0800b0e8 <tcp_route>:
{
 800b0e8:	b508      	push	{r3, lr}
 800b0ea:	460b      	mov	r3, r1
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b0ec:	b110      	cbz	r0, 800b0f4 <tcp_route+0xc>
 800b0ee:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 800b0f2:	b938      	cbnz	r0, 800b104 <tcp_route+0x1c>
    return ip_route(src, dst);
 800b0f4:	b112      	cbz	r2, 800b0fc <tcp_route+0x14>
 800b0f6:	7d11      	ldrb	r1, [r2, #20]
 800b0f8:	2906      	cmp	r1, #6
 800b0fa:	d006      	beq.n	800b10a <tcp_route+0x22>
 800b0fc:	4610      	mov	r0, r2
 800b0fe:	f004 f957 	bl	800f3b0 <ip4_route>
}
 800b102:	bd08      	pop	{r3, pc}
    return netif_get_by_index(pcb->netif_idx);
 800b104:	f7fc fa28 	bl	8007558 <netif_get_by_index>
 800b108:	e7fb      	b.n	800b102 <tcp_route+0x1a>
    return ip_route(src, dst);
 800b10a:	4611      	mov	r1, r2
 800b10c:	4618      	mov	r0, r3
 800b10e:	f005 f9c3 	bl	8010498 <ip6_route>
 800b112:	e7f6      	b.n	800b102 <tcp_route+0x1a>

0800b114 <tcp_output_segment>:
{
 800b114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b118:	b084      	sub	sp, #16
 800b11a:	460c      	mov	r4, r1
 800b11c:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b11e:	4605      	mov	r5, r0
 800b120:	b148      	cbz	r0, 800b136 <tcp_output_segment+0x22>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b122:	b184      	cbz	r4, 800b146 <tcp_output_segment+0x32>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b124:	b1be      	cbz	r6, 800b156 <tcp_output_segment+0x42>
  if (tcp_output_segment_busy(seg)) {
 800b126:	4628      	mov	r0, r5
 800b128:	f7ff feb0 	bl	800ae8c <tcp_output_segment_busy>
 800b12c:	b1d8      	cbz	r0, 800b166 <tcp_output_segment+0x52>
    return ERR_OK;
 800b12e:	2000      	movs	r0, #0
}
 800b130:	b004      	add	sp, #16
 800b132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b136:	4b4d      	ldr	r3, [pc, #308]	; (800b26c <tcp_output_segment+0x158>)
 800b138:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b13c:	494c      	ldr	r1, [pc, #304]	; (800b270 <tcp_output_segment+0x15c>)
 800b13e:	484d      	ldr	r0, [pc, #308]	; (800b274 <tcp_output_segment+0x160>)
 800b140:	f009 f878 	bl	8014234 <iprintf>
 800b144:	e7ed      	b.n	800b122 <tcp_output_segment+0xe>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b146:	4b49      	ldr	r3, [pc, #292]	; (800b26c <tcp_output_segment+0x158>)
 800b148:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b14c:	494a      	ldr	r1, [pc, #296]	; (800b278 <tcp_output_segment+0x164>)
 800b14e:	4849      	ldr	r0, [pc, #292]	; (800b274 <tcp_output_segment+0x160>)
 800b150:	f009 f870 	bl	8014234 <iprintf>
 800b154:	e7e6      	b.n	800b124 <tcp_output_segment+0x10>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b156:	4b45      	ldr	r3, [pc, #276]	; (800b26c <tcp_output_segment+0x158>)
 800b158:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b15c:	4947      	ldr	r1, [pc, #284]	; (800b27c <tcp_output_segment+0x168>)
 800b15e:	4845      	ldr	r0, [pc, #276]	; (800b274 <tcp_output_segment+0x160>)
 800b160:	f009 f868 	bl	8014234 <iprintf>
 800b164:	e7df      	b.n	800b126 <tcp_output_segment+0x12>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b166:	68ef      	ldr	r7, [r5, #12]
 800b168:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800b16a:	f7fb f806 	bl	800617a <lwip_htonl>
 800b16e:	60b8      	str	r0, [r7, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b170:	68ef      	ldr	r7, [r5, #12]
 800b172:	f8b4 0052 	ldrh.w	r0, [r4, #82]	; 0x52
 800b176:	f7fa fffb 	bl	8006170 <lwip_htons>
 800b17a:	81f8      	strh	r0, [r7, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b17c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b17e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800b182:	4413      	add	r3, r2
 800b184:	6563      	str	r3, [r4, #84]	; 0x54
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b186:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800b18a:	f108 0714 	add.w	r7, r8, #20
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b18e:	7aab      	ldrb	r3, [r5, #10]
 800b190:	f013 0f01 	tst.w	r3, #1
 800b194:	d13e      	bne.n	800b214 <tcp_output_segment+0x100>
  if (pcb->rtime < 0) {
 800b196:	f9b4 3058 	ldrsh.w	r3, [r4, #88]	; 0x58
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	db4a      	blt.n	800b234 <tcp_output_segment+0x120>
  if (pcb->rttest == 0) {
 800b19e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d04b      	beq.n	800b23c <tcp_output_segment+0x128>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b1a4:	68eb      	ldr	r3, [r5, #12]
 800b1a6:	686a      	ldr	r2, [r5, #4]
 800b1a8:	6851      	ldr	r1, [r2, #4]
 800b1aa:	1a5b      	subs	r3, r3, r1
 800b1ac:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800b1ae:	8951      	ldrh	r1, [r2, #10]
 800b1b0:	1ac9      	subs	r1, r1, r3
 800b1b2:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 800b1b4:	6869      	ldr	r1, [r5, #4]
 800b1b6:	890a      	ldrh	r2, [r1, #8]
 800b1b8:	1ad3      	subs	r3, r2, r3
 800b1ba:	810b      	strh	r3, [r1, #8]
  seg->p->payload = seg->tcphdr;
 800b1bc:	686a      	ldr	r2, [r5, #4]
 800b1be:	68eb      	ldr	r3, [r5, #12]
 800b1c0:	6053      	str	r3, [r2, #4]
  seg->tcphdr->chksum = 0;
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	741a      	strb	r2, [r3, #16]
 800b1c6:	745a      	strb	r2, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b1c8:	68ea      	ldr	r2, [r5, #12]
 800b1ca:	7aab      	ldrb	r3, [r5, #10]
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	f003 0304 	and.w	r3, r3, #4
 800b1d2:	3314      	adds	r3, #20
 800b1d4:	4413      	add	r3, r2
 800b1d6:	42bb      	cmp	r3, r7
 800b1d8:	d006      	beq.n	800b1e8 <tcp_output_segment+0xd4>
 800b1da:	4b24      	ldr	r3, [pc, #144]	; (800b26c <tcp_output_segment+0x158>)
 800b1dc:	f240 621c 	movw	r2, #1564	; 0x61c
 800b1e0:	4927      	ldr	r1, [pc, #156]	; (800b280 <tcp_output_segment+0x16c>)
 800b1e2:	4824      	ldr	r0, [pc, #144]	; (800b274 <tcp_output_segment+0x160>)
 800b1e4:	f009 f826 	bl	8014234 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b1e8:	f114 0f18 	cmn.w	r4, #24
 800b1ec:	d003      	beq.n	800b1f6 <tcp_output_segment+0xe2>
 800b1ee:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800b1f2:	2b06      	cmp	r3, #6
 800b1f4:	d02b      	beq.n	800b24e <tcp_output_segment+0x13a>
 800b1f6:	9602      	str	r6, [sp, #8]
 800b1f8:	2306      	movs	r3, #6
 800b1fa:	9301      	str	r3, [sp, #4]
 800b1fc:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800b200:	9300      	str	r3, [sp, #0]
 800b202:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800b206:	f104 0218 	add.w	r2, r4, #24
 800b20a:	4621      	mov	r1, r4
 800b20c:	6868      	ldr	r0, [r5, #4]
 800b20e:	f004 fb01 	bl	800f814 <ip4_output_if>
 800b212:	e78d      	b.n	800b130 <tcp_output_segment+0x1c>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b214:	f104 0218 	add.w	r2, r4, #24
 800b218:	4631      	mov	r1, r6
 800b21a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b21e:	f7fd f80b 	bl	8008238 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b222:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800b226:	f7fa ffa8 	bl	800617a <lwip_htonl>
 800b22a:	f8c8 0014 	str.w	r0, [r8, #20]
    opts += 1;
 800b22e:	f108 0718 	add.w	r7, r8, #24
 800b232:	e7b0      	b.n	800b196 <tcp_output_segment+0x82>
    pcb->rtime = 0;
 800b234:	2300      	movs	r3, #0
 800b236:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 800b23a:	e7b0      	b.n	800b19e <tcp_output_segment+0x8a>
    pcb->rttest = tcp_ticks;
 800b23c:	4b11      	ldr	r3, [pc, #68]	; (800b284 <tcp_output_segment+0x170>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	65e3      	str	r3, [r4, #92]	; 0x5c
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b242:	68eb      	ldr	r3, [r5, #12]
 800b244:	6858      	ldr	r0, [r3, #4]
 800b246:	f7fa ff98 	bl	800617a <lwip_htonl>
 800b24a:	6620      	str	r0, [r4, #96]	; 0x60
 800b24c:	e7aa      	b.n	800b1a4 <tcp_output_segment+0x90>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b24e:	9602      	str	r6, [sp, #8]
 800b250:	9301      	str	r3, [sp, #4]
 800b252:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800b25c:	f104 0218 	add.w	r2, r4, #24
 800b260:	4621      	mov	r1, r4
 800b262:	6868      	ldr	r0, [r5, #4]
 800b264:	f005 fea0 	bl	8010fa8 <ip6_output_if>
 800b268:	e762      	b.n	800b130 <tcp_output_segment+0x1c>
 800b26a:	bf00      	nop
 800b26c:	080167c0 	.word	0x080167c0
 800b270:	0801699c 	.word	0x0801699c
 800b274:	08015418 	.word	0x08015418
 800b278:	080169bc 	.word	0x080169bc
 800b27c:	080169dc 	.word	0x080169dc
 800b280:	080168d4 	.word	0x080168d4
 800b284:	20007b24 	.word	0x20007b24

0800b288 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b28a:	b085      	sub	sp, #20
 800b28c:	4605      	mov	r5, r0
 800b28e:	4617      	mov	r7, r2
 800b290:	461c      	mov	r4, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b292:	460e      	mov	r6, r1
 800b294:	b1f9      	cbz	r1, 800b2d6 <tcp_output_control_segment+0x4e>

  netif = tcp_route(pcb, src, dst);
 800b296:	4622      	mov	r2, r4
 800b298:	4639      	mov	r1, r7
 800b29a:	4628      	mov	r0, r5
 800b29c:	f7ff ff24 	bl	800b0e8 <tcp_route>
  if (netif == NULL) {
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	b370      	cbz	r0, 800b302 <tcp_output_control_segment+0x7a>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b2a4:	b1fd      	cbz	r5, 800b2e6 <tcp_output_control_segment+0x5e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b2a6:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
      tos = pcb->tos;
 800b2aa:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b2ae:	b114      	cbz	r4, 800b2b6 <tcp_output_control_segment+0x2e>
 800b2b0:	7d20      	ldrb	r0, [r4, #20]
 800b2b2:	2806      	cmp	r0, #6
 800b2b4:	d01a      	beq.n	800b2ec <tcp_output_control_segment+0x64>
 800b2b6:	9202      	str	r2, [sp, #8]
 800b2b8:	2206      	movs	r2, #6
 800b2ba:	9201      	str	r2, [sp, #4]
 800b2bc:	9100      	str	r1, [sp, #0]
 800b2be:	4622      	mov	r2, r4
 800b2c0:	4639      	mov	r1, r7
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	f004 faa6 	bl	800f814 <ip4_output_if>
 800b2c8:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	f7fc fa62 	bl	8007794 <pbuf_free>
  return err;
}
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	b005      	add	sp, #20
 800b2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b2d6:	4b0c      	ldr	r3, [pc, #48]	; (800b308 <tcp_output_control_segment+0x80>)
 800b2d8:	f240 7287 	movw	r2, #1927	; 0x787
 800b2dc:	490b      	ldr	r1, [pc, #44]	; (800b30c <tcp_output_control_segment+0x84>)
 800b2de:	480c      	ldr	r0, [pc, #48]	; (800b310 <tcp_output_control_segment+0x88>)
 800b2e0:	f008 ffa8 	bl	8014234 <iprintf>
 800b2e4:	e7d7      	b.n	800b296 <tcp_output_control_segment+0xe>
      tos = 0;
 800b2e6:	2100      	movs	r1, #0
      ttl = TCP_TTL;
 800b2e8:	23ff      	movs	r3, #255	; 0xff
 800b2ea:	e7e0      	b.n	800b2ae <tcp_output_control_segment+0x26>
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b2ec:	9202      	str	r2, [sp, #8]
 800b2ee:	2206      	movs	r2, #6
 800b2f0:	9201      	str	r2, [sp, #4]
 800b2f2:	9100      	str	r1, [sp, #0]
 800b2f4:	4622      	mov	r2, r4
 800b2f6:	4639      	mov	r1, r7
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	f005 fe55 	bl	8010fa8 <ip6_output_if>
 800b2fe:	4604      	mov	r4, r0
 800b300:	e7e3      	b.n	800b2ca <tcp_output_control_segment+0x42>
    err = ERR_RTE;
 800b302:	f06f 0403 	mvn.w	r4, #3
 800b306:	e7e0      	b.n	800b2ca <tcp_output_control_segment+0x42>
 800b308:	080167c0 	.word	0x080167c0
 800b30c:	08016a00 	.word	0x08016a00
 800b310:	08015418 	.word	0x08015418

0800b314 <tcp_split_unsent_seg>:
{
 800b314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b318:	b083      	sub	sp, #12
 800b31a:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b31c:	4607      	mov	r7, r0
 800b31e:	2800      	cmp	r0, #0
 800b320:	d03f      	beq.n	800b3a2 <tcp_split_unsent_seg+0x8e>
  useg = pcb->unsent;
 800b322:	f8d7 5094 	ldr.w	r5, [r7, #148]	; 0x94
  if (useg == NULL) {
 800b326:	2d00      	cmp	r5, #0
 800b328:	f000 80bc 	beq.w	800b4a4 <tcp_split_unsent_seg+0x190>
  if (split == 0) {
 800b32c:	2c00      	cmp	r4, #0
 800b32e:	d040      	beq.n	800b3b2 <tcp_split_unsent_seg+0x9e>
  if (useg->len <= split) {
 800b330:	892b      	ldrh	r3, [r5, #8]
 800b332:	42a3      	cmp	r3, r4
 800b334:	f240 80b9 	bls.w	800b4aa <tcp_split_unsent_seg+0x196>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b338:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b33c:	42a3      	cmp	r3, r4
 800b33e:	d342      	bcc.n	800b3c6 <tcp_split_unsent_seg+0xb2>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b340:	892b      	ldrh	r3, [r5, #8]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d047      	beq.n	800b3d6 <tcp_split_unsent_seg+0xc2>
  optflags = useg->flags;
 800b346:	f895 900a 	ldrb.w	r9, [r5, #10]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b34a:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 800b34e:	f00b 0b04 	and.w	fp, fp, #4
  remainder = useg->len - split;
 800b352:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800b356:	ebaa 0604 	sub.w	r6, sl, r4
 800b35a:	b2b6      	uxth	r6, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b35c:	eb06 010b 	add.w	r1, r6, fp
 800b360:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b364:	b289      	uxth	r1, r1
 800b366:	204a      	movs	r0, #74	; 0x4a
 800b368:	f7fc fa76 	bl	8007858 <pbuf_alloc>
  if (p == NULL) {
 800b36c:	4680      	mov	r8, r0
 800b36e:	b170      	cbz	r0, 800b38e <tcp_split_unsent_seg+0x7a>
  offset = useg->p->tot_len - useg->len + split;
 800b370:	6868      	ldr	r0, [r5, #4]
 800b372:	8903      	ldrh	r3, [r0, #8]
 800b374:	892a      	ldrh	r2, [r5, #8]
 800b376:	1a9b      	subs	r3, r3, r2
 800b378:	fa14 f383 	uxtah	r3, r4, r3
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b37c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b380:	b29b      	uxth	r3, r3
 800b382:	4632      	mov	r2, r6
 800b384:	4459      	add	r1, fp
 800b386:	f7fc fc5b 	bl	8007c40 <pbuf_copy_partial>
 800b38a:	42b0      	cmp	r0, r6
 800b38c:	d02b      	beq.n	800b3e6 <tcp_split_unsent_seg+0xd2>
  if (p != NULL) {
 800b38e:	f1b8 0f00 	cmp.w	r8, #0
 800b392:	f000 808e 	beq.w	800b4b2 <tcp_split_unsent_seg+0x19e>
    pbuf_free(p);
 800b396:	4640      	mov	r0, r8
 800b398:	f7fc f9fc 	bl	8007794 <pbuf_free>
  return ERR_MEM;
 800b39c:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a0:	e084      	b.n	800b4ac <tcp_split_unsent_seg+0x198>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b3a2:	4b45      	ldr	r3, [pc, #276]	; (800b4b8 <tcp_split_unsent_seg+0x1a4>)
 800b3a4:	f240 324b 	movw	r2, #843	; 0x34b
 800b3a8:	4944      	ldr	r1, [pc, #272]	; (800b4bc <tcp_split_unsent_seg+0x1a8>)
 800b3aa:	4845      	ldr	r0, [pc, #276]	; (800b4c0 <tcp_split_unsent_seg+0x1ac>)
 800b3ac:	f008 ff42 	bl	8014234 <iprintf>
 800b3b0:	e7b7      	b.n	800b322 <tcp_split_unsent_seg+0xe>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b3b2:	4b41      	ldr	r3, [pc, #260]	; (800b4b8 <tcp_split_unsent_seg+0x1a4>)
 800b3b4:	f240 3253 	movw	r2, #851	; 0x353
 800b3b8:	4942      	ldr	r1, [pc, #264]	; (800b4c4 <tcp_split_unsent_seg+0x1b0>)
 800b3ba:	4841      	ldr	r0, [pc, #260]	; (800b4c0 <tcp_split_unsent_seg+0x1ac>)
 800b3bc:	f008 ff3a 	bl	8014234 <iprintf>
    return ERR_VAL;
 800b3c0:	f06f 0005 	mvn.w	r0, #5
 800b3c4:	e072      	b.n	800b4ac <tcp_split_unsent_seg+0x198>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b3c6:	4b3c      	ldr	r3, [pc, #240]	; (800b4b8 <tcp_split_unsent_seg+0x1a4>)
 800b3c8:	f240 325b 	movw	r2, #859	; 0x35b
 800b3cc:	493e      	ldr	r1, [pc, #248]	; (800b4c8 <tcp_split_unsent_seg+0x1b4>)
 800b3ce:	483c      	ldr	r0, [pc, #240]	; (800b4c0 <tcp_split_unsent_seg+0x1ac>)
 800b3d0:	f008 ff30 	bl	8014234 <iprintf>
 800b3d4:	e7b4      	b.n	800b340 <tcp_split_unsent_seg+0x2c>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b3d6:	4b38      	ldr	r3, [pc, #224]	; (800b4b8 <tcp_split_unsent_seg+0x1a4>)
 800b3d8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b3dc:	493b      	ldr	r1, [pc, #236]	; (800b4cc <tcp_split_unsent_seg+0x1b8>)
 800b3de:	4838      	ldr	r0, [pc, #224]	; (800b4c0 <tcp_split_unsent_seg+0x1ac>)
 800b3e0:	f008 ff28 	bl	8014234 <iprintf>
 800b3e4:	e7af      	b.n	800b346 <tcp_split_unsent_seg+0x32>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b3e6:	68eb      	ldr	r3, [r5, #12]
 800b3e8:	8998      	ldrh	r0, [r3, #12]
 800b3ea:	f7fa fec1 	bl	8006170 <lwip_htons>
 800b3ee:	b2c3      	uxtb	r3, r0
 800b3f0:	f000 063f 	and.w	r6, r0, #63	; 0x3f
  if (split_flags & TCP_PSH) {
 800b3f4:	f010 0b08 	ands.w	fp, r0, #8
 800b3f8:	d003      	beq.n	800b402 <tcp_split_unsent_seg+0xee>
    split_flags &= ~TCP_PSH;
 800b3fa:	f003 0637 	and.w	r6, r3, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800b3fe:	f04f 0b08 	mov.w	fp, #8
  if (split_flags & TCP_FIN) {
 800b402:	f016 0f01 	tst.w	r6, #1
 800b406:	d003      	beq.n	800b410 <tcp_split_unsent_seg+0xfc>
    split_flags &= ~TCP_FIN;
 800b408:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 800b40c:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b410:	68eb      	ldr	r3, [r5, #12]
 800b412:	6858      	ldr	r0, [r3, #4]
 800b414:	f7fa feb1 	bl	800617a <lwip_htonl>
 800b418:	f8cd 9000 	str.w	r9, [sp]
 800b41c:	1823      	adds	r3, r4, r0
 800b41e:	465a      	mov	r2, fp
 800b420:	4641      	mov	r1, r8
 800b422:	4638      	mov	r0, r7
 800b424:	f7ff fd72 	bl	800af0c <tcp_create_segment>
  if (seg == NULL) {
 800b428:	4681      	mov	r9, r0
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d0af      	beq.n	800b38e <tcp_split_unsent_seg+0x7a>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b42e:	6868      	ldr	r0, [r5, #4]
 800b430:	f7fc fb14 	bl	8007a5c <pbuf_clen>
 800b434:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b438:	1a1b      	subs	r3, r3, r0
 800b43a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b43e:	6868      	ldr	r0, [r5, #4]
 800b440:	8901      	ldrh	r1, [r0, #8]
 800b442:	eba4 040a 	sub.w	r4, r4, sl
 800b446:	b2a4      	uxth	r4, r4
 800b448:	4421      	add	r1, r4
 800b44a:	b289      	uxth	r1, r1
 800b44c:	f7fc fab2 	bl	80079b4 <pbuf_realloc>
  useg->len -= remainder;
 800b450:	892b      	ldrh	r3, [r5, #8]
 800b452:	441c      	add	r4, r3
 800b454:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b456:	68eb      	ldr	r3, [r5, #12]
 800b458:	899c      	ldrh	r4, [r3, #12]
 800b45a:	4630      	mov	r0, r6
 800b45c:	f7fa fe88 	bl	8006170 <lwip_htons>
 800b460:	68eb      	ldr	r3, [r5, #12]
 800b462:	4304      	orrs	r4, r0
 800b464:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b466:	6868      	ldr	r0, [r5, #4]
 800b468:	f7fc faf8 	bl	8007a5c <pbuf_clen>
 800b46c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b470:	4418      	add	r0, r3
 800b472:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b476:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800b47a:	f7fc faef 	bl	8007a5c <pbuf_clen>
 800b47e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b482:	4418      	add	r0, r3
 800b484:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
  seg->next = useg->next;
 800b488:	682b      	ldr	r3, [r5, #0]
 800b48a:	f8c9 3000 	str.w	r3, [r9]
  useg->next = seg;
 800b48e:	f8c5 9000 	str.w	r9, [r5]
  if (seg->next == NULL) {
 800b492:	f8d9 3000 	ldr.w	r3, [r9]
 800b496:	b10b      	cbz	r3, 800b49c <tcp_split_unsent_seg+0x188>
  return ERR_OK;
 800b498:	2000      	movs	r0, #0
 800b49a:	e007      	b.n	800b4ac <tcp_split_unsent_seg+0x198>
    pcb->unsent_oversize = 0;
 800b49c:	2000      	movs	r0, #0
 800b49e:	f8a7 0090 	strh.w	r0, [r7, #144]	; 0x90
 800b4a2:	e003      	b.n	800b4ac <tcp_split_unsent_seg+0x198>
    return ERR_MEM;
 800b4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a8:	e000      	b.n	800b4ac <tcp_split_unsent_seg+0x198>
    return ERR_OK;
 800b4aa:	2000      	movs	r0, #0
}
 800b4ac:	b003      	add	sp, #12
 800b4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 800b4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b6:	e7f9      	b.n	800b4ac <tcp_split_unsent_seg+0x198>
 800b4b8:	080167c0 	.word	0x080167c0
 800b4bc:	08016a2c 	.word	0x08016a2c
 800b4c0:	08015418 	.word	0x08015418
 800b4c4:	08016a50 	.word	0x08016a50
 800b4c8:	08016a74 	.word	0x08016a74
 800b4cc:	08016a84 	.word	0x08016a84

0800b4d0 <tcp_enqueue_flags>:
{
 800b4d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4d4:	b083      	sub	sp, #12
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b4da:	f011 0703 	ands.w	r7, r1, #3
 800b4de:	d055      	beq.n	800b58c <tcp_enqueue_flags+0xbc>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b4e0:	2c00      	cmp	r4, #0
 800b4e2:	d05b      	beq.n	800b59c <tcp_enqueue_flags+0xcc>
  if (flags & TCP_SYN) {
 800b4e4:	f015 0802 	ands.w	r8, r5, #2
 800b4e8:	d001      	beq.n	800b4ee <tcp_enqueue_flags+0x1e>
    optflags = TF_SEG_OPTS_MSS;
 800b4ea:	f04f 0801 	mov.w	r8, #1
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b4ee:	ea4f 0688 	mov.w	r6, r8, lsl #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b4f2:	f006 0604 	and.w	r6, r6, #4
 800b4f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b4fa:	4631      	mov	r1, r6
 800b4fc:	204a      	movs	r0, #74	; 0x4a
 800b4fe:	f7fc f9ab 	bl	8007858 <pbuf_alloc>
 800b502:	4681      	mov	r9, r0
 800b504:	2800      	cmp	r0, #0
 800b506:	d051      	beq.n	800b5ac <tcp_enqueue_flags+0xdc>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b508:	8943      	ldrh	r3, [r0, #10]
 800b50a:	429e      	cmp	r6, r3
 800b50c:	d857      	bhi.n	800b5be <tcp_enqueue_flags+0xee>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b50e:	f8cd 8000 	str.w	r8, [sp]
 800b512:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b516:	462a      	mov	r2, r5
 800b518:	4649      	mov	r1, r9
 800b51a:	4620      	mov	r0, r4
 800b51c:	f7ff fcf6 	bl	800af0c <tcp_create_segment>
 800b520:	4606      	mov	r6, r0
 800b522:	2800      	cmp	r0, #0
 800b524:	d053      	beq.n	800b5ce <tcp_enqueue_flags+0xfe>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b526:	68c3      	ldr	r3, [r0, #12]
 800b528:	f013 0f03 	tst.w	r3, #3
 800b52c:	d158      	bne.n	800b5e0 <tcp_enqueue_flags+0x110>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b52e:	8933      	ldrh	r3, [r6, #8]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d15d      	bne.n	800b5f0 <tcp_enqueue_flags+0x120>
  if (pcb->unsent == NULL) {
 800b534:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d061      	beq.n	800b600 <tcp_enqueue_flags+0x130>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b53c:	461a      	mov	r2, r3
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d1fb      	bne.n	800b53c <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 800b544:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800b546:	2300      	movs	r3, #0
 800b548:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b54c:	b127      	cbz	r7, 800b558 <tcp_enqueue_flags+0x88>
    pcb->snd_lbb++;
 800b54e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b552:	3301      	adds	r3, #1
 800b554:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (flags & TCP_FIN) {
 800b558:	f015 0f01 	tst.w	r5, #1
 800b55c:	d005      	beq.n	800b56a <tcp_enqueue_flags+0x9a>
    tcp_set_flags(pcb, TF_FIN);
 800b55e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b562:	f043 0320 	orr.w	r3, r3, #32
 800b566:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b56a:	6870      	ldr	r0, [r6, #4]
 800b56c:	f7fc fa76 	bl	8007a5c <pbuf_clen>
 800b570:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 800b574:	4418      	add	r0, r3
 800b576:	b280      	uxth	r0, r0
 800b578:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
  if (pcb->snd_queuelen != 0) {
 800b57c:	2800      	cmp	r0, #0
 800b57e:	d050      	beq.n	800b622 <tcp_enqueue_flags+0x152>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b580:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800b584:	2b00      	cmp	r3, #0
 800b586:	d03e      	beq.n	800b606 <tcp_enqueue_flags+0x136>
  return ERR_OK;
 800b588:	2000      	movs	r0, #0
 800b58a:	e04b      	b.n	800b624 <tcp_enqueue_flags+0x154>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b58c:	4b27      	ldr	r3, [pc, #156]	; (800b62c <tcp_enqueue_flags+0x15c>)
 800b58e:	f240 4211 	movw	r2, #1041	; 0x411
 800b592:	4927      	ldr	r1, [pc, #156]	; (800b630 <tcp_enqueue_flags+0x160>)
 800b594:	4827      	ldr	r0, [pc, #156]	; (800b634 <tcp_enqueue_flags+0x164>)
 800b596:	f008 fe4d 	bl	8014234 <iprintf>
 800b59a:	e7a1      	b.n	800b4e0 <tcp_enqueue_flags+0x10>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b59c:	4b23      	ldr	r3, [pc, #140]	; (800b62c <tcp_enqueue_flags+0x15c>)
 800b59e:	f240 4213 	movw	r2, #1043	; 0x413
 800b5a2:	4925      	ldr	r1, [pc, #148]	; (800b638 <tcp_enqueue_flags+0x168>)
 800b5a4:	4823      	ldr	r0, [pc, #140]	; (800b634 <tcp_enqueue_flags+0x164>)
 800b5a6:	f008 fe45 	bl	8014234 <iprintf>
 800b5aa:	e79b      	b.n	800b4e4 <tcp_enqueue_flags+0x14>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b5ac:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b5b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5b4:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    return ERR_MEM;
 800b5b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5bc:	e032      	b.n	800b624 <tcp_enqueue_flags+0x154>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b5be:	4b1b      	ldr	r3, [pc, #108]	; (800b62c <tcp_enqueue_flags+0x15c>)
 800b5c0:	f240 4239 	movw	r2, #1081	; 0x439
 800b5c4:	491d      	ldr	r1, [pc, #116]	; (800b63c <tcp_enqueue_flags+0x16c>)
 800b5c6:	481b      	ldr	r0, [pc, #108]	; (800b634 <tcp_enqueue_flags+0x164>)
 800b5c8:	f008 fe34 	bl	8014234 <iprintf>
 800b5cc:	e79f      	b.n	800b50e <tcp_enqueue_flags+0x3e>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b5ce:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b5d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5d6:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    return ERR_MEM;
 800b5da:	f04f 30ff 	mov.w	r0, #4294967295
 800b5de:	e021      	b.n	800b624 <tcp_enqueue_flags+0x154>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b5e0:	4b12      	ldr	r3, [pc, #72]	; (800b62c <tcp_enqueue_flags+0x15c>)
 800b5e2:	f240 4242 	movw	r2, #1090	; 0x442
 800b5e6:	4916      	ldr	r1, [pc, #88]	; (800b640 <tcp_enqueue_flags+0x170>)
 800b5e8:	4812      	ldr	r0, [pc, #72]	; (800b634 <tcp_enqueue_flags+0x164>)
 800b5ea:	f008 fe23 	bl	8014234 <iprintf>
 800b5ee:	e79e      	b.n	800b52e <tcp_enqueue_flags+0x5e>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b5f0:	4b0e      	ldr	r3, [pc, #56]	; (800b62c <tcp_enqueue_flags+0x15c>)
 800b5f2:	f240 4243 	movw	r2, #1091	; 0x443
 800b5f6:	4913      	ldr	r1, [pc, #76]	; (800b644 <tcp_enqueue_flags+0x174>)
 800b5f8:	480e      	ldr	r0, [pc, #56]	; (800b634 <tcp_enqueue_flags+0x164>)
 800b5fa:	f008 fe1b 	bl	8014234 <iprintf>
 800b5fe:	e799      	b.n	800b534 <tcp_enqueue_flags+0x64>
    pcb->unsent = seg;
 800b600:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
 800b604:	e79f      	b.n	800b546 <tcp_enqueue_flags+0x76>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b606:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b60a:	b10b      	cbz	r3, 800b610 <tcp_enqueue_flags+0x140>
  return ERR_OK;
 800b60c:	2000      	movs	r0, #0
 800b60e:	e009      	b.n	800b624 <tcp_enqueue_flags+0x154>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b610:	4b06      	ldr	r3, [pc, #24]	; (800b62c <tcp_enqueue_flags+0x15c>)
 800b612:	f240 4265 	movw	r2, #1125	; 0x465
 800b616:	490c      	ldr	r1, [pc, #48]	; (800b648 <tcp_enqueue_flags+0x178>)
 800b618:	4806      	ldr	r0, [pc, #24]	; (800b634 <tcp_enqueue_flags+0x164>)
 800b61a:	f008 fe0b 	bl	8014234 <iprintf>
  return ERR_OK;
 800b61e:	2000      	movs	r0, #0
 800b620:	e000      	b.n	800b624 <tcp_enqueue_flags+0x154>
 800b622:	2000      	movs	r0, #0
}
 800b624:	b003      	add	sp, #12
 800b626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b62a:	bf00      	nop
 800b62c:	080167c0 	.word	0x080167c0
 800b630:	08016a94 	.word	0x08016a94
 800b634:	08015418 	.word	0x08015418
 800b638:	08016aec 	.word	0x08016aec
 800b63c:	08016b0c 	.word	0x08016b0c
 800b640:	08016b48 	.word	0x08016b48
 800b644:	08016b60 	.word	0x08016b60
 800b648:	08016b8c 	.word	0x08016b8c

0800b64c <tcp_send_fin>:
{
 800b64c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b64e:	4605      	mov	r5, r0
 800b650:	b190      	cbz	r0, 800b678 <tcp_send_fin+0x2c>
  if (pcb->unsent != NULL) {
 800b652:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800b656:	b153      	cbz	r3, 800b66e <tcp_send_fin+0x22>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b658:	461c      	mov	r4, r3
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1fb      	bne.n	800b658 <tcp_send_fin+0xc>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b660:	68e3      	ldr	r3, [r4, #12]
 800b662:	8998      	ldrh	r0, [r3, #12]
 800b664:	f7fa fd84 	bl	8006170 <lwip_htons>
 800b668:	f010 0f07 	tst.w	r0, #7
 800b66c:	d00c      	beq.n	800b688 <tcp_send_fin+0x3c>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b66e:	2101      	movs	r1, #1
 800b670:	4628      	mov	r0, r5
 800b672:	f7ff ff2d 	bl	800b4d0 <tcp_enqueue_flags>
}
 800b676:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b678:	4b0b      	ldr	r3, [pc, #44]	; (800b6a8 <tcp_send_fin+0x5c>)
 800b67a:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b67e:	490b      	ldr	r1, [pc, #44]	; (800b6ac <tcp_send_fin+0x60>)
 800b680:	480b      	ldr	r0, [pc, #44]	; (800b6b0 <tcp_send_fin+0x64>)
 800b682:	f008 fdd7 	bl	8014234 <iprintf>
 800b686:	e7e4      	b.n	800b652 <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b688:	68e3      	ldr	r3, [r4, #12]
 800b68a:	899e      	ldrh	r6, [r3, #12]
 800b68c:	2001      	movs	r0, #1
 800b68e:	f7fa fd6f 	bl	8006170 <lwip_htons>
 800b692:	68e3      	ldr	r3, [r4, #12]
 800b694:	4306      	orrs	r6, r0
 800b696:	819e      	strh	r6, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b698:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 800b69c:	f043 0320 	orr.w	r3, r3, #32
 800b6a0:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
      return ERR_OK;
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	e7e6      	b.n	800b676 <tcp_send_fin+0x2a>
 800b6a8:	080167c0 	.word	0x080167c0
 800b6ac:	08016bb4 	.word	0x08016bb4
 800b6b0:	08015418 	.word	0x08015418

0800b6b4 <tcp_rexmit_rto_prepare>:
{
 800b6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b6b6:	4605      	mov	r5, r0
 800b6b8:	b160      	cbz	r0, 800b6d4 <tcp_rexmit_rto_prepare+0x20>
  if (pcb->unacked == NULL) {
 800b6ba:	f8d5 4098 	ldr.w	r4, [r5, #152]	; 0x98
 800b6be:	2c00      	cmp	r4, #0
 800b6c0:	d03a      	beq.n	800b738 <tcp_rexmit_rto_prepare+0x84>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b6c2:	6823      	ldr	r3, [r4, #0]
 800b6c4:	b173      	cbz	r3, 800b6e4 <tcp_rexmit_rto_prepare+0x30>
    if (tcp_output_segment_busy(seg)) {
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	f7ff fbe0 	bl	800ae8c <tcp_output_segment_busy>
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	d136      	bne.n	800b73e <tcp_rexmit_rto_prepare+0x8a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b6d0:	6824      	ldr	r4, [r4, #0]
 800b6d2:	e7f6      	b.n	800b6c2 <tcp_rexmit_rto_prepare+0xe>
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b6d4:	4b1d      	ldr	r3, [pc, #116]	; (800b74c <tcp_rexmit_rto_prepare+0x98>)
 800b6d6:	f240 6263 	movw	r2, #1635	; 0x663
 800b6da:	491d      	ldr	r1, [pc, #116]	; (800b750 <tcp_rexmit_rto_prepare+0x9c>)
 800b6dc:	481d      	ldr	r0, [pc, #116]	; (800b754 <tcp_rexmit_rto_prepare+0xa0>)
 800b6de:	f008 fda9 	bl	8014234 <iprintf>
 800b6e2:	e7ea      	b.n	800b6ba <tcp_rexmit_rto_prepare+0x6>
  if (tcp_output_segment_busy(seg)) {
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f7ff fbd1 	bl	800ae8c <tcp_output_segment_busy>
 800b6ea:	bb58      	cbnz	r0, 800b744 <tcp_rexmit_rto_prepare+0x90>
  seg->next = pcb->unsent;
 800b6ec:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800b6f0:	6023      	str	r3, [r4, #0]
  pcb->unsent = pcb->unacked;
 800b6f2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800b6f6:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  pcb->unacked = NULL;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
  tcp_set_flags(pcb, TF_RTO);
 800b700:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 800b704:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b708:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b70c:	68e3      	ldr	r3, [r4, #12]
 800b70e:	6858      	ldr	r0, [r3, #4]
 800b710:	f7fa fd33 	bl	800617a <lwip_htonl>
 800b714:	4606      	mov	r6, r0
 800b716:	8927      	ldrh	r7, [r4, #8]
 800b718:	68e3      	ldr	r3, [r4, #12]
 800b71a:	8998      	ldrh	r0, [r3, #12]
 800b71c:	f7fa fd28 	bl	8006170 <lwip_htons>
 800b720:	f010 0f03 	tst.w	r0, #3
 800b724:	d006      	beq.n	800b734 <tcp_rexmit_rto_prepare+0x80>
 800b726:	2301      	movs	r3, #1
 800b728:	441f      	add	r7, r3
 800b72a:	443e      	add	r6, r7
 800b72c:	676e      	str	r6, [r5, #116]	; 0x74
  pcb->rttest = 0;
 800b72e:	2000      	movs	r0, #0
 800b730:	65e8      	str	r0, [r5, #92]	; 0x5c
}
 800b732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b734:	2300      	movs	r3, #0
 800b736:	e7f7      	b.n	800b728 <tcp_rexmit_rto_prepare+0x74>
    return ERR_VAL;
 800b738:	f06f 0005 	mvn.w	r0, #5
 800b73c:	e7f9      	b.n	800b732 <tcp_rexmit_rto_prepare+0x7e>
      return ERR_VAL;
 800b73e:	f06f 0005 	mvn.w	r0, #5
 800b742:	e7f6      	b.n	800b732 <tcp_rexmit_rto_prepare+0x7e>
    return ERR_VAL;
 800b744:	f06f 0005 	mvn.w	r0, #5
 800b748:	e7f3      	b.n	800b732 <tcp_rexmit_rto_prepare+0x7e>
 800b74a:	bf00      	nop
 800b74c:	080167c0 	.word	0x080167c0
 800b750:	08016bd0 	.word	0x08016bd0
 800b754:	08015418 	.word	0x08015418

0800b758 <tcp_rexmit>:
{
 800b758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b75a:	4607      	mov	r7, r0
 800b75c:	b1d8      	cbz	r0, 800b796 <tcp_rexmit+0x3e>
  if (pcb->unacked == NULL) {
 800b75e:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 800b762:	b396      	cbz	r6, 800b7ca <tcp_rexmit+0x72>
  if (tcp_output_segment_busy(seg)) {
 800b764:	4630      	mov	r0, r6
 800b766:	f7ff fb91 	bl	800ae8c <tcp_output_segment_busy>
 800b76a:	bb88      	cbnz	r0, 800b7d0 <tcp_rexmit+0x78>
  pcb->unacked = seg->next;
 800b76c:	6833      	ldr	r3, [r6, #0]
 800b76e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  cur_seg = &(pcb->unsent);
 800b772:	f107 0594 	add.w	r5, r7, #148	; 0x94
  while (*cur_seg &&
 800b776:	682b      	ldr	r3, [r5, #0]
 800b778:	b1ab      	cbz	r3, 800b7a6 <tcp_rexmit+0x4e>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	6858      	ldr	r0, [r3, #4]
 800b77e:	f7fa fcfc 	bl	800617a <lwip_htonl>
 800b782:	4604      	mov	r4, r0
 800b784:	68f3      	ldr	r3, [r6, #12]
 800b786:	6858      	ldr	r0, [r3, #4]
 800b788:	f7fa fcf7 	bl	800617a <lwip_htonl>
 800b78c:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800b78e:	2c00      	cmp	r4, #0
 800b790:	da09      	bge.n	800b7a6 <tcp_rexmit+0x4e>
    cur_seg = &((*cur_seg)->next );
 800b792:	682d      	ldr	r5, [r5, #0]
 800b794:	e7ef      	b.n	800b776 <tcp_rexmit+0x1e>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b796:	4b10      	ldr	r3, [pc, #64]	; (800b7d8 <tcp_rexmit+0x80>)
 800b798:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b79c:	490f      	ldr	r1, [pc, #60]	; (800b7dc <tcp_rexmit+0x84>)
 800b79e:	4810      	ldr	r0, [pc, #64]	; (800b7e0 <tcp_rexmit+0x88>)
 800b7a0:	f008 fd48 	bl	8014234 <iprintf>
 800b7a4:	e7db      	b.n	800b75e <tcp_rexmit+0x6>
  seg->next = *cur_seg;
 800b7a6:	682b      	ldr	r3, [r5, #0]
 800b7a8:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800b7aa:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800b7ac:	6833      	ldr	r3, [r6, #0]
 800b7ae:	b14b      	cbz	r3, 800b7c4 <tcp_rexmit+0x6c>
  if (pcb->nrtx < 0xFF) {
 800b7b0:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800b7b4:	2bff      	cmp	r3, #255	; 0xff
 800b7b6:	d002      	beq.n	800b7be <tcp_rexmit+0x66>
    ++pcb->nrtx;
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  pcb->rttest = 0;
 800b7be:	2000      	movs	r0, #0
 800b7c0:	65f8      	str	r0, [r7, #92]	; 0x5c
}
 800b7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800b7c4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800b7c8:	e7f2      	b.n	800b7b0 <tcp_rexmit+0x58>
    return ERR_VAL;
 800b7ca:	f06f 0005 	mvn.w	r0, #5
 800b7ce:	e7f8      	b.n	800b7c2 <tcp_rexmit+0x6a>
    return ERR_VAL;
 800b7d0:	f06f 0005 	mvn.w	r0, #5
 800b7d4:	e7f5      	b.n	800b7c2 <tcp_rexmit+0x6a>
 800b7d6:	bf00      	nop
 800b7d8:	080167c0 	.word	0x080167c0
 800b7dc:	08016bf4 	.word	0x08016bf4
 800b7e0:	08015418 	.word	0x08015418

0800b7e4 <tcp_rexmit_fast>:
{
 800b7e4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	b140      	cbz	r0, 800b7fc <tcp_rexmit_fast+0x18>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b7ea:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800b7ee:	b123      	cbz	r3, 800b7fa <tcp_rexmit_fast+0x16>
 800b7f0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b7f4:	f013 0f04 	tst.w	r3, #4
 800b7f8:	d008      	beq.n	800b80c <tcp_rexmit_fast+0x28>
}
 800b7fa:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b7fc:	4b17      	ldr	r3, [pc, #92]	; (800b85c <tcp_rexmit_fast+0x78>)
 800b7fe:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b802:	4917      	ldr	r1, [pc, #92]	; (800b860 <tcp_rexmit_fast+0x7c>)
 800b804:	4817      	ldr	r0, [pc, #92]	; (800b864 <tcp_rexmit_fast+0x80>)
 800b806:	f008 fd15 	bl	8014234 <iprintf>
 800b80a:	e7ee      	b.n	800b7ea <tcp_rexmit_fast+0x6>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b80c:	4620      	mov	r0, r4
 800b80e:	f7ff ffa3 	bl	800b758 <tcp_rexmit>
 800b812:	2800      	cmp	r0, #0
 800b814:	d1f1      	bne.n	800b7fa <tcp_rexmit_fast+0x16>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b816:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 800b81a:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
 800b81e:	4293      	cmp	r3, r2
 800b820:	bf28      	it	cs
 800b822:	4613      	movcs	r3, r2
 800b824:	085b      	lsrs	r3, r3, #1
 800b826:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b82a:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 800b82e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800b832:	d202      	bcs.n	800b83a <tcp_rexmit_fast+0x56>
        pcb->ssthresh = 2 * pcb->mss;
 800b834:	0053      	lsls	r3, r2, #1
 800b836:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b83a:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 800b83e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800b842:	441a      	add	r2, r3
 800b844:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
      tcp_set_flags(pcb, TF_INFR);
 800b848:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b84c:	f043 0304 	orr.w	r3, r3, #4
 800b850:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      pcb->rtime = 0;
 800b854:	2300      	movs	r3, #0
 800b856:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
}
 800b85a:	e7ce      	b.n	800b7fa <tcp_rexmit_fast+0x16>
 800b85c:	080167c0 	.word	0x080167c0
 800b860:	08016c0c 	.word	0x08016c0c
 800b864:	08015418 	.word	0x08015418

0800b868 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b86c:	b084      	sub	sp, #16
 800b86e:	4604      	mov	r4, r0
 800b870:	460e      	mov	r6, r1
 800b872:	4615      	mov	r5, r2
 800b874:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b876:	4698      	mov	r8, r3
 800b878:	b32b      	cbz	r3, 800b8c6 <tcp_rst+0x5e>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b87a:	b367      	cbz	r7, 800b8d6 <tcp_rst+0x6e>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b87c:	4630      	mov	r0, r6
 800b87e:	f7fa fc7c 	bl	800617a <lwip_htonl>
 800b882:	4603      	mov	r3, r0
 800b884:	f246 0208 	movw	r2, #24584	; 0x6008
 800b888:	9203      	str	r2, [sp, #12]
 800b88a:	2214      	movs	r2, #20
 800b88c:	9202      	str	r2, [sp, #8]
 800b88e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 800b892:	9201      	str	r2, [sp, #4]
 800b894:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800b898:	9200      	str	r2, [sp, #0]
 800b89a:	2200      	movs	r2, #0
 800b89c:	4611      	mov	r1, r2
 800b89e:	4628      	mov	r0, r5
 800b8a0:	f7ff fba8 	bl	800aff4 <tcp_output_alloc_header_common>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	b158      	cbz	r0, 800b8c0 <tcp_rst+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	4601      	mov	r1, r0
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f7ff fb06 	bl	800aec0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b8b4:	463b      	mov	r3, r7
 800b8b6:	4642      	mov	r2, r8
 800b8b8:	4629      	mov	r1, r5
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	f7ff fce4 	bl	800b288 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b8c0:	b004      	add	sp, #16
 800b8c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b8c6:	4b08      	ldr	r3, [pc, #32]	; (800b8e8 <tcp_rst+0x80>)
 800b8c8:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b8cc:	4907      	ldr	r1, [pc, #28]	; (800b8ec <tcp_rst+0x84>)
 800b8ce:	4808      	ldr	r0, [pc, #32]	; (800b8f0 <tcp_rst+0x88>)
 800b8d0:	f008 fcb0 	bl	8014234 <iprintf>
 800b8d4:	e7d1      	b.n	800b87a <tcp_rst+0x12>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b8d6:	4b04      	ldr	r3, [pc, #16]	; (800b8e8 <tcp_rst+0x80>)
 800b8d8:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b8dc:	4905      	ldr	r1, [pc, #20]	; (800b8f4 <tcp_rst+0x8c>)
 800b8de:	4804      	ldr	r0, [pc, #16]	; (800b8f0 <tcp_rst+0x88>)
 800b8e0:	f008 fca8 	bl	8014234 <iprintf>
 800b8e4:	e7ca      	b.n	800b87c <tcp_rst+0x14>
 800b8e6:	bf00      	nop
 800b8e8:	080167c0 	.word	0x080167c0
 800b8ec:	08016c2c 	.word	0x08016c2c
 800b8f0:	08015418 	.word	0x08015418
 800b8f4:	08016c48 	.word	0x08016c48

0800b8f8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b8f8:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	b1f8      	cbz	r0, 800b93e <tcp_send_empty_ack+0x46>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b8fe:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b900:	f7fa fc3b 	bl	800617a <lwip_htonl>
 800b904:	4603      	mov	r3, r0
 800b906:	2200      	movs	r2, #0
 800b908:	4611      	mov	r1, r2
 800b90a:	4620      	mov	r0, r4
 800b90c:	f7ff fbbe 	bl	800b08c <tcp_output_alloc_header>
  if (p == NULL) {
 800b910:	4605      	mov	r5, r0
 800b912:	b1e0      	cbz	r0, 800b94e <tcp_send_empty_ack+0x56>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b914:	2300      	movs	r3, #0
 800b916:	461a      	mov	r2, r3
 800b918:	4601      	mov	r1, r0
 800b91a:	4620      	mov	r0, r4
 800b91c:	f7ff fad0 	bl	800aec0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b920:	f104 0318 	add.w	r3, r4, #24
 800b924:	4622      	mov	r2, r4
 800b926:	4629      	mov	r1, r5
 800b928:	4620      	mov	r0, r4
 800b92a:	f7ff fcad 	bl	800b288 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800b92e:	b1b8      	cbz	r0, 800b960 <tcp_send_empty_ack+0x68>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b930:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b934:	f043 0303 	orr.w	r3, r3, #3
 800b938:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800b93c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b93e:	4b0c      	ldr	r3, [pc, #48]	; (800b970 <tcp_send_empty_ack+0x78>)
 800b940:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b944:	490b      	ldr	r1, [pc, #44]	; (800b974 <tcp_send_empty_ack+0x7c>)
 800b946:	480c      	ldr	r0, [pc, #48]	; (800b978 <tcp_send_empty_ack+0x80>)
 800b948:	f008 fc74 	bl	8014234 <iprintf>
 800b94c:	e7d7      	b.n	800b8fe <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b94e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b952:	f043 0303 	orr.w	r3, r3, #3
 800b956:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    return ERR_BUF;
 800b95a:	f06f 0001 	mvn.w	r0, #1
 800b95e:	e7ed      	b.n	800b93c <tcp_send_empty_ack+0x44>
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b960:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b964:	f023 0303 	bic.w	r3, r3, #3
 800b968:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 800b96c:	e7e6      	b.n	800b93c <tcp_send_empty_ack+0x44>
 800b96e:	bf00      	nop
 800b970:	080167c0 	.word	0x080167c0
 800b974:	08016c64 	.word	0x08016c64
 800b978:	08015418 	.word	0x08015418

0800b97c <tcp_output>:
{
 800b97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b980:	4604      	mov	r4, r0
 800b982:	2800      	cmp	r0, #0
 800b984:	d059      	beq.n	800ba3a <tcp_output+0xbe>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b986:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d05d      	beq.n	800ba4a <tcp_output+0xce>
  if (tcp_input_pcb == pcb) {
 800b98e:	4b8c      	ldr	r3, [pc, #560]	; (800bbc0 <tcp_output+0x244>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	42a3      	cmp	r3, r4
 800b994:	f000 81a1 	beq.w	800bcda <tcp_output+0x35e>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b998:	f8b4 6070 	ldrh.w	r6, [r4, #112]	; 0x70
 800b99c:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 800b9a0:	429e      	cmp	r6, r3
 800b9a2:	bf28      	it	cs
 800b9a4:	461e      	movcs	r6, r3
 800b9a6:	4637      	mov	r7, r6
  seg = pcb->unsent;
 800b9a8:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
  if (seg == NULL) {
 800b9ac:	2d00      	cmp	r5, #0
 800b9ae:	d054      	beq.n	800ba5a <tcp_output+0xde>
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b9b0:	f104 0918 	add.w	r9, r4, #24
 800b9b4:	464a      	mov	r2, r9
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f7ff fb95 	bl	800b0e8 <tcp_route>
  if (netif == NULL) {
 800b9be:	4680      	mov	r8, r0
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	f000 818c 	beq.w	800bcde <tcp_output+0x362>
  if (ip_addr_isany(&pcb->local_ip)) {
 800b9c6:	b14c      	cbz	r4, 800b9dc <tcp_output+0x60>
 800b9c8:	7d23      	ldrb	r3, [r4, #20]
 800b9ca:	2b06      	cmp	r3, #6
 800b9cc:	d059      	beq.n	800ba82 <tcp_output+0x106>
 800b9ce:	2c00      	cmp	r4, #0
 800b9d0:	d06c      	beq.n	800baac <tcp_output+0x130>
 800b9d2:	6823      	ldr	r3, [r4, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d16b      	bne.n	800bab0 <tcp_output+0x134>
 800b9d8:	2301      	movs	r3, #1
 800b9da:	b1b3      	cbz	r3, 800ba0a <tcp_output+0x8e>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b9dc:	f1b9 0f00 	cmp.w	r9, #0
 800b9e0:	d003      	beq.n	800b9ea <tcp_output+0x6e>
 800b9e2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800b9e6:	2b06      	cmp	r3, #6
 800b9e8:	d064      	beq.n	800bab4 <tcp_output+0x138>
 800b9ea:	f108 0004 	add.w	r0, r8, #4
    if (local_ip == NULL) {
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	f000 8178 	beq.w	800bce4 <tcp_output+0x368>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b9f4:	7d03      	ldrb	r3, [r0, #20]
 800b9f6:	7523      	strb	r3, [r4, #20]
 800b9f8:	2b06      	cmp	r3, #6
 800b9fa:	d061      	beq.n	800bac0 <tcp_output+0x144>
 800b9fc:	6803      	ldr	r3, [r0, #0]
 800b9fe:	6023      	str	r3, [r4, #0]
 800ba00:	2300      	movs	r3, #0
 800ba02:	60e3      	str	r3, [r4, #12]
 800ba04:	60a3      	str	r3, [r4, #8]
 800ba06:	6063      	str	r3, [r4, #4]
 800ba08:	7423      	strb	r3, [r4, #16]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ba0a:	68eb      	ldr	r3, [r5, #12]
 800ba0c:	6858      	ldr	r0, [r3, #4]
 800ba0e:	f7fa fbb4 	bl	800617a <lwip_htonl>
 800ba12:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ba14:	1ac0      	subs	r0, r0, r3
 800ba16:	892b      	ldrh	r3, [r5, #8]
 800ba18:	4418      	add	r0, r3
 800ba1a:	42b0      	cmp	r0, r6
 800ba1c:	d96b      	bls.n	800baf6 <tcp_output+0x17a>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ba1e:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 800ba22:	429e      	cmp	r6, r3
 800ba24:	d057      	beq.n	800bad6 <tcp_output+0x15a>
    if (pcb->flags & TF_ACK_NOW) {
 800ba26:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800ba2a:	f013 0f02 	tst.w	r3, #2
 800ba2e:	d019      	beq.n	800ba64 <tcp_output+0xe8>
      return tcp_send_empty_ack(pcb);
 800ba30:	4620      	mov	r0, r4
 800ba32:	f7ff ff61 	bl	800b8f8 <tcp_send_empty_ack>
 800ba36:	4603      	mov	r3, r0
 800ba38:	e01b      	b.n	800ba72 <tcp_output+0xf6>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ba3a:	4b62      	ldr	r3, [pc, #392]	; (800bbc4 <tcp_output+0x248>)
 800ba3c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ba40:	4961      	ldr	r1, [pc, #388]	; (800bbc8 <tcp_output+0x24c>)
 800ba42:	4862      	ldr	r0, [pc, #392]	; (800bbcc <tcp_output+0x250>)
 800ba44:	f008 fbf6 	bl	8014234 <iprintf>
 800ba48:	e79d      	b.n	800b986 <tcp_output+0xa>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ba4a:	4b5e      	ldr	r3, [pc, #376]	; (800bbc4 <tcp_output+0x248>)
 800ba4c:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ba50:	495f      	ldr	r1, [pc, #380]	; (800bbd0 <tcp_output+0x254>)
 800ba52:	485e      	ldr	r0, [pc, #376]	; (800bbcc <tcp_output+0x250>)
 800ba54:	f008 fbee 	bl	8014234 <iprintf>
 800ba58:	e799      	b.n	800b98e <tcp_output+0x12>
    if (pcb->flags & TF_ACK_NOW) {
 800ba5a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800ba5e:	f013 0f02 	tst.w	r3, #2
 800ba62:	d109      	bne.n	800ba78 <tcp_output+0xfc>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ba64:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800ba68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba6c:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  return ERR_OK;
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return tcp_send_empty_ack(pcb);
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f7ff ff3d 	bl	800b8f8 <tcp_send_empty_ack>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	e7f7      	b.n	800ba72 <tcp_output+0xf6>
  if (ip_addr_isany(&pcb->local_ip)) {
 800ba82:	b14c      	cbz	r4, 800ba98 <tcp_output+0x11c>
 800ba84:	6823      	ldr	r3, [r4, #0]
 800ba86:	b94b      	cbnz	r3, 800ba9c <tcp_output+0x120>
 800ba88:	6863      	ldr	r3, [r4, #4]
 800ba8a:	b94b      	cbnz	r3, 800baa0 <tcp_output+0x124>
 800ba8c:	68a3      	ldr	r3, [r4, #8]
 800ba8e:	b94b      	cbnz	r3, 800baa4 <tcp_output+0x128>
 800ba90:	68e3      	ldr	r3, [r4, #12]
 800ba92:	b14b      	cbz	r3, 800baa8 <tcp_output+0x12c>
 800ba94:	2300      	movs	r3, #0
 800ba96:	e7a0      	b.n	800b9da <tcp_output+0x5e>
 800ba98:	2301      	movs	r3, #1
 800ba9a:	e79e      	b.n	800b9da <tcp_output+0x5e>
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	e79c      	b.n	800b9da <tcp_output+0x5e>
 800baa0:	2300      	movs	r3, #0
 800baa2:	e79a      	b.n	800b9da <tcp_output+0x5e>
 800baa4:	2300      	movs	r3, #0
 800baa6:	e798      	b.n	800b9da <tcp_output+0x5e>
 800baa8:	2301      	movs	r3, #1
 800baaa:	e796      	b.n	800b9da <tcp_output+0x5e>
 800baac:	2301      	movs	r3, #1
 800baae:	e794      	b.n	800b9da <tcp_output+0x5e>
 800bab0:	2300      	movs	r3, #0
 800bab2:	e792      	b.n	800b9da <tcp_output+0x5e>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800bab4:	f104 0118 	add.w	r1, r4, #24
 800bab8:	4640      	mov	r0, r8
 800baba:	f004 fe3d 	bl	8010738 <ip6_select_source_address>
 800babe:	e796      	b.n	800b9ee <tcp_output+0x72>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bac0:	6803      	ldr	r3, [r0, #0]
 800bac2:	6023      	str	r3, [r4, #0]
 800bac4:	6843      	ldr	r3, [r0, #4]
 800bac6:	6063      	str	r3, [r4, #4]
 800bac8:	6883      	ldr	r3, [r0, #8]
 800baca:	60a3      	str	r3, [r4, #8]
 800bacc:	68c3      	ldr	r3, [r0, #12]
 800bace:	60e3      	str	r3, [r4, #12]
 800bad0:	7c03      	ldrb	r3, [r0, #16]
 800bad2:	7423      	strb	r3, [r4, #16]
 800bad4:	e799      	b.n	800ba0a <tcp_output+0x8e>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800bad6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800bada:	2b00      	cmp	r3, #0
 800badc:	d1a3      	bne.n	800ba26 <tcp_output+0xaa>
 800bade:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d19f      	bne.n	800ba26 <tcp_output+0xaa>
      pcb->persist_cnt = 0;
 800bae6:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
      pcb->persist_backoff = 1;
 800baea:	2201      	movs	r2, #1
 800baec:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
      pcb->persist_probe = 0;
 800baf0:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
 800baf4:	e797      	b.n	800ba26 <tcp_output+0xaa>
  pcb->persist_backoff = 0;
 800baf6:	2300      	movs	r3, #0
 800baf8:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
  useg = pcb->unacked;
 800bafc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
  if (useg != NULL) {
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f000 80e8 	beq.w	800bcd6 <tcp_output+0x35a>
    for (; useg->next != NULL; useg = useg->next);
 800bb06:	461e      	mov	r6, r3
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d1fb      	bne.n	800bb06 <tcp_output+0x18a>
 800bb0e:	e068      	b.n	800bbe2 <tcp_output+0x266>
    LWIP_ASSERT("RST not expected here!",
 800bb10:	4b2c      	ldr	r3, [pc, #176]	; (800bbc4 <tcp_output+0x248>)
 800bb12:	f240 5236 	movw	r2, #1334	; 0x536
 800bb16:	492f      	ldr	r1, [pc, #188]	; (800bbd4 <tcp_output+0x258>)
 800bb18:	482c      	ldr	r0, [pc, #176]	; (800bbcc <tcp_output+0x250>)
 800bb1a:	f008 fb8b 	bl	8014234 <iprintf>
 800bb1e:	e073      	b.n	800bc08 <tcp_output+0x28c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bb20:	8911      	ldrh	r1, [r2, #8]
 800bb22:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 800bb26:	4291      	cmp	r1, r2
 800bb28:	d27e      	bcs.n	800bc28 <tcp_output+0x2ac>
 800bb2a:	f8b4 208c 	ldrh.w	r2, [r4, #140]	; 0x8c
 800bb2e:	2a00      	cmp	r2, #0
 800bb30:	d07a      	beq.n	800bc28 <tcp_output+0x2ac>
 800bb32:	f8b4 208e 	ldrh.w	r2, [r4, #142]	; 0x8e
 800bb36:	2a08      	cmp	r2, #8
 800bb38:	d876      	bhi.n	800bc28 <tcp_output+0x2ac>
 800bb3a:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800bb3e:	d173      	bne.n	800bc28 <tcp_output+0x2ac>
  if (pcb->unsent == NULL) {
 800bb40:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d18d      	bne.n	800ba64 <tcp_output+0xe8>
    pcb->unsent_oversize = 0;
 800bb48:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
 800bb4c:	e78a      	b.n	800ba64 <tcp_output+0xe8>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800bb4e:	68eb      	ldr	r3, [r5, #12]
 800bb50:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800bb54:	2010      	movs	r0, #16
 800bb56:	f7fa fb0b 	bl	8006170 <lwip_htons>
 800bb5a:	68eb      	ldr	r3, [r5, #12]
 800bb5c:	ea49 0900 	orr.w	r9, r9, r0
 800bb60:	f8a3 900c 	strh.w	r9, [r3, #12]
 800bb64:	e064      	b.n	800bc30 <tcp_output+0x2b4>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bb66:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800bb6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bb6e:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
      return err;
 800bb72:	e77e      	b.n	800ba72 <tcp_output+0xf6>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bb74:	2000      	movs	r0, #0
 800bb76:	e080      	b.n	800bc7a <tcp_output+0x2fe>
      pcb->snd_nxt = snd_nxt;
 800bb78:	67a0      	str	r0, [r4, #120]	; 0x78
 800bb7a:	e085      	b.n	800bc88 <tcp_output+0x30c>
    if (TCP_TCPLEN(seg) > 0) {
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	e08e      	b.n	800bc9e <tcp_output+0x322>
        pcb->unacked = seg;
 800bb80:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
        useg = seg;
 800bb84:	462e      	mov	r6, r5
 800bb86:	e02a      	b.n	800bbde <tcp_output+0x262>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bb88:	f104 0a98 	add.w	sl, r4, #152	; 0x98
          while (*cur_seg &&
 800bb8c:	f8da 3000 	ldr.w	r3, [sl]
 800bb90:	b183      	cbz	r3, 800bbb4 <tcp_output+0x238>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	6858      	ldr	r0, [r3, #4]
 800bb96:	f7fa faf0 	bl	800617a <lwip_htonl>
 800bb9a:	4681      	mov	r9, r0
 800bb9c:	68eb      	ldr	r3, [r5, #12]
 800bb9e:	6858      	ldr	r0, [r3, #4]
 800bba0:	f7fa faeb 	bl	800617a <lwip_htonl>
 800bba4:	eba9 0900 	sub.w	r9, r9, r0
          while (*cur_seg &&
 800bba8:	f1b9 0f00 	cmp.w	r9, #0
 800bbac:	da02      	bge.n	800bbb4 <tcp_output+0x238>
            cur_seg = &((*cur_seg)->next );
 800bbae:	f8da a000 	ldr.w	sl, [sl]
 800bbb2:	e7eb      	b.n	800bb8c <tcp_output+0x210>
          seg->next = (*cur_seg);
 800bbb4:	f8da 3000 	ldr.w	r3, [sl]
 800bbb8:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 800bbba:	f8ca 5000 	str.w	r5, [sl]
 800bbbe:	e00e      	b.n	800bbde <tcp_output+0x262>
 800bbc0:	20007b34 	.word	0x20007b34
 800bbc4:	080167c0 	.word	0x080167c0
 800bbc8:	08016c84 	.word	0x08016c84
 800bbcc:	08015418 	.word	0x08015418
 800bbd0:	08016c9c 	.word	0x08016c9c
 800bbd4:	08016cc4 	.word	0x08016cc4
      tcp_seg_free(seg);
 800bbd8:	4628      	mov	r0, r5
 800bbda:	f7fc fad5 	bl	8008188 <tcp_seg_free>
    seg = pcb->unsent;
 800bbde:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
  while (seg != NULL &&
 800bbe2:	2d00      	cmp	r5, #0
 800bbe4:	d0ac      	beq.n	800bb40 <tcp_output+0x1c4>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bbe6:	68eb      	ldr	r3, [r5, #12]
 800bbe8:	6858      	ldr	r0, [r3, #4]
 800bbea:	f7fa fac6 	bl	800617a <lwip_htonl>
 800bbee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bbf0:	1ac0      	subs	r0, r0, r3
 800bbf2:	892b      	ldrh	r3, [r5, #8]
 800bbf4:	4418      	add	r0, r3
  while (seg != NULL &&
 800bbf6:	42b8      	cmp	r0, r7
 800bbf8:	d8a2      	bhi.n	800bb40 <tcp_output+0x1c4>
    LWIP_ASSERT("RST not expected here!",
 800bbfa:	68eb      	ldr	r3, [r5, #12]
 800bbfc:	8998      	ldrh	r0, [r3, #12]
 800bbfe:	f7fa fab7 	bl	8006170 <lwip_htons>
 800bc02:	f010 0f04 	tst.w	r0, #4
 800bc06:	d183      	bne.n	800bb10 <tcp_output+0x194>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bc08:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800bc0c:	b163      	cbz	r3, 800bc28 <tcp_output+0x2ac>
 800bc0e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800bc12:	f013 0f44 	tst.w	r3, #68	; 0x44
 800bc16:	d107      	bne.n	800bc28 <tcp_output+0x2ac>
 800bc18:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800bc1c:	2a00      	cmp	r2, #0
 800bc1e:	d084      	beq.n	800bb2a <tcp_output+0x1ae>
 800bc20:	6811      	ldr	r1, [r2, #0]
 800bc22:	2900      	cmp	r1, #0
 800bc24:	f43f af7c 	beq.w	800bb20 <tcp_output+0x1a4>
    if (pcb->state != SYN_SENT) {
 800bc28:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800bc2c:	2b02      	cmp	r3, #2
 800bc2e:	d18e      	bne.n	800bb4e <tcp_output+0x1d2>
    err = tcp_output_segment(seg, pcb, netif);
 800bc30:	4642      	mov	r2, r8
 800bc32:	4621      	mov	r1, r4
 800bc34:	4628      	mov	r0, r5
 800bc36:	f7ff fa6d 	bl	800b114 <tcp_output_segment>
    if (err != ERR_OK) {
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	d192      	bne.n	800bb66 <tcp_output+0x1ea>
    pcb->unsent = seg->next;
 800bc40:	682b      	ldr	r3, [r5, #0]
 800bc42:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    if (pcb->state != SYN_SENT) {
 800bc46:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800bc4a:	2b02      	cmp	r3, #2
 800bc4c:	d005      	beq.n	800bc5a <tcp_output+0x2de>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bc4e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800bc52:	f023 0303 	bic.w	r3, r3, #3
 800bc56:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bc5a:	68eb      	ldr	r3, [r5, #12]
 800bc5c:	6858      	ldr	r0, [r3, #4]
 800bc5e:	f7fa fa8c 	bl	800617a <lwip_htonl>
 800bc62:	4681      	mov	r9, r0
 800bc64:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800bc68:	68eb      	ldr	r3, [r5, #12]
 800bc6a:	8998      	ldrh	r0, [r3, #12]
 800bc6c:	f7fa fa80 	bl	8006170 <lwip_htons>
 800bc70:	f010 0f03 	tst.w	r0, #3
 800bc74:	f43f af7e 	beq.w	800bb74 <tcp_output+0x1f8>
 800bc78:	2001      	movs	r0, #1
 800bc7a:	4450      	add	r0, sl
 800bc7c:	4448      	add	r0, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bc7e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800bc80:	1a1b      	subs	r3, r3, r0
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	f6ff af78 	blt.w	800bb78 <tcp_output+0x1fc>
    if (TCP_TCPLEN(seg) > 0) {
 800bc88:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800bc8c:	68eb      	ldr	r3, [r5, #12]
 800bc8e:	8998      	ldrh	r0, [r3, #12]
 800bc90:	f7fa fa6e 	bl	8006170 <lwip_htons>
 800bc94:	f010 0f03 	tst.w	r0, #3
 800bc98:	f43f af70 	beq.w	800bb7c <tcp_output+0x200>
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	eb19 0f03 	cmn.w	r9, r3
 800bca2:	d099      	beq.n	800bbd8 <tcp_output+0x25c>
      seg->next = NULL;
 800bca4:	2300      	movs	r3, #0
 800bca6:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800bca8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f43f af67 	beq.w	800bb80 <tcp_output+0x204>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bcb2:	68eb      	ldr	r3, [r5, #12]
 800bcb4:	6858      	ldr	r0, [r3, #4]
 800bcb6:	f7fa fa60 	bl	800617a <lwip_htonl>
 800bcba:	4681      	mov	r9, r0
 800bcbc:	68f3      	ldr	r3, [r6, #12]
 800bcbe:	6858      	ldr	r0, [r3, #4]
 800bcc0:	f7fa fa5b 	bl	800617a <lwip_htonl>
 800bcc4:	eba9 0900 	sub.w	r9, r9, r0
 800bcc8:	f1b9 0f00 	cmp.w	r9, #0
 800bccc:	f6ff af5c 	blt.w	800bb88 <tcp_output+0x20c>
          useg->next = seg;
 800bcd0:	6035      	str	r5, [r6, #0]
          useg = useg->next;
 800bcd2:	462e      	mov	r6, r5
 800bcd4:	e783      	b.n	800bbde <tcp_output+0x262>
  useg = pcb->unacked;
 800bcd6:	461e      	mov	r6, r3
 800bcd8:	e783      	b.n	800bbe2 <tcp_output+0x266>
    return ERR_OK;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	e6c9      	b.n	800ba72 <tcp_output+0xf6>
    return ERR_RTE;
 800bcde:	f06f 0303 	mvn.w	r3, #3
 800bce2:	e6c6      	b.n	800ba72 <tcp_output+0xf6>
      return ERR_RTE;
 800bce4:	f06f 0303 	mvn.w	r3, #3
 800bce8:	e6c3      	b.n	800ba72 <tcp_output+0xf6>
 800bcea:	bf00      	nop

0800bcec <tcp_rexmit_rto_commit>:
{
 800bcec:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bcee:	4604      	mov	r4, r0
 800bcf0:	b150      	cbz	r0, 800bd08 <tcp_rexmit_rto_commit+0x1c>
  if (pcb->nrtx < 0xFF) {
 800bcf2:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 800bcf6:	2bff      	cmp	r3, #255	; 0xff
 800bcf8:	d002      	beq.n	800bd00 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  tcp_output(pcb);
 800bd00:	4620      	mov	r0, r4
 800bd02:	f7ff fe3b 	bl	800b97c <tcp_output>
}
 800bd06:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bd08:	4b03      	ldr	r3, [pc, #12]	; (800bd18 <tcp_rexmit_rto_commit+0x2c>)
 800bd0a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bd0e:	4903      	ldr	r1, [pc, #12]	; (800bd1c <tcp_rexmit_rto_commit+0x30>)
 800bd10:	4803      	ldr	r0, [pc, #12]	; (800bd20 <tcp_rexmit_rto_commit+0x34>)
 800bd12:	f008 fa8f 	bl	8014234 <iprintf>
 800bd16:	e7ec      	b.n	800bcf2 <tcp_rexmit_rto_commit+0x6>
 800bd18:	080167c0 	.word	0x080167c0
 800bd1c:	08016cdc 	.word	0x08016cdc
 800bd20:	08015418 	.word	0x08015418

0800bd24 <tcp_rexmit_rto>:
{
 800bd24:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bd26:	4604      	mov	r4, r0
 800bd28:	b120      	cbz	r0, 800bd34 <tcp_rexmit_rto+0x10>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	f7ff fcc2 	bl	800b6b4 <tcp_rexmit_rto_prepare>
 800bd30:	b140      	cbz	r0, 800bd44 <tcp_rexmit_rto+0x20>
}
 800bd32:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bd34:	4b05      	ldr	r3, [pc, #20]	; (800bd4c <tcp_rexmit_rto+0x28>)
 800bd36:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800bd3a:	4905      	ldr	r1, [pc, #20]	; (800bd50 <tcp_rexmit_rto+0x2c>)
 800bd3c:	4805      	ldr	r0, [pc, #20]	; (800bd54 <tcp_rexmit_rto+0x30>)
 800bd3e:	f008 fa79 	bl	8014234 <iprintf>
 800bd42:	e7f2      	b.n	800bd2a <tcp_rexmit_rto+0x6>
    tcp_rexmit_rto_commit(pcb);
 800bd44:	4620      	mov	r0, r4
 800bd46:	f7ff ffd1 	bl	800bcec <tcp_rexmit_rto_commit>
}
 800bd4a:	e7f2      	b.n	800bd32 <tcp_rexmit_rto+0xe>
 800bd4c:	080167c0 	.word	0x080167c0
 800bd50:	08016d00 	.word	0x08016d00
 800bd54:	08015418 	.word	0x08015418

0800bd58 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800bd58:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	b1c8      	cbz	r0, 800bd92 <tcp_keepalive+0x3a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800bd5e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800bd60:	3801      	subs	r0, #1
 800bd62:	f7fa fa0a 	bl	800617a <lwip_htonl>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2200      	movs	r2, #0
 800bd6a:	4611      	mov	r1, r2
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f7ff f98d 	bl	800b08c <tcp_output_alloc_header>
  if (p == NULL) {
 800bd72:	4605      	mov	r5, r0
 800bd74:	b1a8      	cbz	r0, 800bda2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bd76:	2300      	movs	r3, #0
 800bd78:	461a      	mov	r2, r3
 800bd7a:	4601      	mov	r1, r0
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f7ff f89f 	bl	800aec0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bd82:	f104 0318 	add.w	r3, r4, #24
 800bd86:	4622      	mov	r2, r4
 800bd88:	4629      	mov	r1, r5
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f7ff fa7c 	bl	800b288 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800bd90:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800bd92:	4b05      	ldr	r3, [pc, #20]	; (800bda8 <tcp_keepalive+0x50>)
 800bd94:	f640 0224 	movw	r2, #2084	; 0x824
 800bd98:	4904      	ldr	r1, [pc, #16]	; (800bdac <tcp_keepalive+0x54>)
 800bd9a:	4805      	ldr	r0, [pc, #20]	; (800bdb0 <tcp_keepalive+0x58>)
 800bd9c:	f008 fa4a 	bl	8014234 <iprintf>
 800bda0:	e7dd      	b.n	800bd5e <tcp_keepalive+0x6>
    return ERR_MEM;
 800bda2:	f04f 30ff 	mov.w	r0, #4294967295
 800bda6:	e7f3      	b.n	800bd90 <tcp_keepalive+0x38>
 800bda8:	080167c0 	.word	0x080167c0
 800bdac:	08016d1c 	.word	0x08016d1c
 800bdb0:	08015418 	.word	0x08015418

0800bdb4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800bdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800bdb8:	4604      	mov	r4, r0
 800bdba:	b1b0      	cbz	r0, 800bdea <tcp_zero_window_probe+0x36>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800bdbc:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
  if (seg == NULL) {
 800bdc0:	2d00      	cmp	r5, #0
 800bdc2:	d05c      	beq.n	800be7e <tcp_zero_window_probe+0xca>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800bdc4:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
 800bdc8:	2bff      	cmp	r3, #255	; 0xff
 800bdca:	d002      	beq.n	800bdd2 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 800bdcc:	3301      	adds	r3, #1
 800bdce:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bdd2:	68eb      	ldr	r3, [r5, #12]
 800bdd4:	8998      	ldrh	r0, [r3, #12]
 800bdd6:	f7fa f9cb 	bl	8006170 <lwip_htons>
 800bdda:	f010 0f01 	tst.w	r0, #1
 800bdde:	d00c      	beq.n	800bdfa <tcp_zero_window_probe+0x46>
 800bde0:	892b      	ldrh	r3, [r5, #8]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d03c      	beq.n	800be60 <tcp_zero_window_probe+0xac>
 800bde6:	2200      	movs	r2, #0
 800bde8:	e008      	b.n	800bdfc <tcp_zero_window_probe+0x48>
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800bdea:	4b27      	ldr	r3, [pc, #156]	; (800be88 <tcp_zero_window_probe+0xd4>)
 800bdec:	f640 024f 	movw	r2, #2127	; 0x84f
 800bdf0:	4926      	ldr	r1, [pc, #152]	; (800be8c <tcp_zero_window_probe+0xd8>)
 800bdf2:	4827      	ldr	r0, [pc, #156]	; (800be90 <tcp_zero_window_probe+0xdc>)
 800bdf4:	f008 fa1e 	bl	8014234 <iprintf>
 800bdf8:	e7e0      	b.n	800bdbc <tcp_zero_window_probe+0x8>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bdfa:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800bdfc:	f002 07ff 	and.w	r7, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800be00:	68eb      	ldr	r3, [r5, #12]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	f082 0201 	eor.w	r2, r2, #1
 800be08:	2100      	movs	r1, #0
 800be0a:	4620      	mov	r0, r4
 800be0c:	f7ff f93e 	bl	800b08c <tcp_output_alloc_header>
  if (p == NULL) {
 800be10:	4606      	mov	r6, r0
 800be12:	b3b0      	cbz	r0, 800be82 <tcp_zero_window_probe+0xce>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800be14:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800be18:	b327      	cbz	r7, 800be64 <tcp_zero_window_probe+0xb0>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800be1a:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 800be1e:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800be22:	2011      	movs	r0, #17
 800be24:	f7fa f9a4 	bl	8006170 <lwip_htons>
 800be28:	b200      	sxth	r0, r0
 800be2a:	4307      	orrs	r7, r0
 800be2c:	f8a8 700c 	strh.w	r7, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800be30:	68eb      	ldr	r3, [r5, #12]
 800be32:	6858      	ldr	r0, [r3, #4]
 800be34:	f7fa f9a1 	bl	800617a <lwip_htonl>
 800be38:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800be3a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800be3c:	1a1b      	subs	r3, r3, r0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	db1b      	blt.n	800be7a <tcp_zero_window_probe+0xc6>
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800be42:	2300      	movs	r3, #0
 800be44:	461a      	mov	r2, r3
 800be46:	4631      	mov	r1, r6
 800be48:	4620      	mov	r0, r4
 800be4a:	f7ff f839 	bl	800aec0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800be4e:	f104 0318 	add.w	r3, r4, #24
 800be52:	4622      	mov	r2, r4
 800be54:	4631      	mov	r1, r6
 800be56:	4620      	mov	r0, r4
 800be58:	f7ff fa16 	bl	800b288 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800be5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800be60:	2201      	movs	r2, #1
 800be62:	e7cb      	b.n	800bdfc <tcp_zero_window_probe+0x48>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800be64:	6868      	ldr	r0, [r5, #4]
 800be66:	8903      	ldrh	r3, [r0, #8]
 800be68:	892a      	ldrh	r2, [r5, #8]
 800be6a:	1a9b      	subs	r3, r3, r2
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	2201      	movs	r2, #1
 800be70:	f108 0114 	add.w	r1, r8, #20
 800be74:	f7fb fee4 	bl	8007c40 <pbuf_copy_partial>
 800be78:	e7da      	b.n	800be30 <tcp_zero_window_probe+0x7c>
    pcb->snd_nxt = snd_nxt;
 800be7a:	67a0      	str	r0, [r4, #120]	; 0x78
 800be7c:	e7e1      	b.n	800be42 <tcp_zero_window_probe+0x8e>
    return ERR_OK;
 800be7e:	2000      	movs	r0, #0
 800be80:	e7ec      	b.n	800be5c <tcp_zero_window_probe+0xa8>
    return ERR_MEM;
 800be82:	f04f 30ff 	mov.w	r0, #4294967295
 800be86:	e7e9      	b.n	800be5c <tcp_zero_window_probe+0xa8>
 800be88:	080167c0 	.word	0x080167c0
 800be8c:	08016d38 	.word	0x08016d38
 800be90:	08015418 	.word	0x08015418

0800be94 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800be94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be96:	4604      	mov	r4, r0
 800be98:	460f      	mov	r7, r1
 800be9a:	4616      	mov	r6, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800be9c:	2007      	movs	r0, #7
 800be9e:	f7fa ffbb 	bl	8006e18 <memp_malloc>
  if (timeout == NULL) {
 800bea2:	b180      	cbz	r0, 800bec6 <sys_timeout_abs+0x32>
 800bea4:	4605      	mov	r5, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800bea6:	2300      	movs	r3, #0
 800bea8:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
 800beaa:	6087      	str	r7, [r0, #8]
  timeout->arg = arg;
 800beac:	60c6      	str	r6, [r0, #12]
  timeout->time = abs_time;
 800beae:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800beb0:	4b10      	ldr	r3, [pc, #64]	; (800bef4 <sys_timeout_abs+0x60>)
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	b172      	cbz	r2, 800bed4 <sys_timeout_abs+0x40>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800beb6:	6853      	ldr	r3, [r2, #4]
 800beb8:	1ae3      	subs	r3, r4, r3
 800beba:	2b00      	cmp	r3, #0
 800bebc:	da0f      	bge.n	800bede <sys_timeout_abs+0x4a>
    timeout->next = next_timeout;
 800bebe:	6002      	str	r2, [r0, #0]
    next_timeout = timeout;
 800bec0:	4b0c      	ldr	r3, [pc, #48]	; (800bef4 <sys_timeout_abs+0x60>)
 800bec2:	6018      	str	r0, [r3, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 800bec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bec6:	4b0c      	ldr	r3, [pc, #48]	; (800bef8 <sys_timeout_abs+0x64>)
 800bec8:	22be      	movs	r2, #190	; 0xbe
 800beca:	490c      	ldr	r1, [pc, #48]	; (800befc <sys_timeout_abs+0x68>)
 800becc:	480c      	ldr	r0, [pc, #48]	; (800bf00 <sys_timeout_abs+0x6c>)
 800bece:	f008 f9b1 	bl	8014234 <iprintf>
    return;
 800bed2:	e7f7      	b.n	800bec4 <sys_timeout_abs+0x30>
    next_timeout = timeout;
 800bed4:	6018      	str	r0, [r3, #0]
    return;
 800bed6:	e7f5      	b.n	800bec4 <sys_timeout_abs+0x30>
        timeout->next = t->next;
 800bed8:	602b      	str	r3, [r5, #0]
        t->next = timeout;
 800beda:	6015      	str	r5, [r2, #0]
        break;
 800bedc:	e7f2      	b.n	800bec4 <sys_timeout_abs+0x30>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bede:	2a00      	cmp	r2, #0
 800bee0:	d0f0      	beq.n	800bec4 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bee2:	6813      	ldr	r3, [r2, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d0f7      	beq.n	800bed8 <sys_timeout_abs+0x44>
 800bee8:	6859      	ldr	r1, [r3, #4]
 800beea:	1a61      	subs	r1, r4, r1
 800beec:	2900      	cmp	r1, #0
 800beee:	dbf3      	blt.n	800bed8 <sys_timeout_abs+0x44>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bef0:	461a      	mov	r2, r3
 800bef2:	e7f4      	b.n	800bede <sys_timeout_abs+0x4a>
 800bef4:	2000067c 	.word	0x2000067c
 800bef8:	08016d5c 	.word	0x08016d5c
 800befc:	08016d90 	.word	0x08016d90
 800bf00:	08015418 	.word	0x08015418

0800bf04 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bf04:	b570      	push	{r4, r5, r6, lr}
 800bf06:	4604      	mov	r4, r0
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bf08:	6843      	ldr	r3, [r0, #4]
 800bf0a:	4798      	blx	r3

  now = sys_now();
 800bf0c:	f7fa f8c6 	bl	800609c <sys_now>
 800bf10:	4605      	mov	r5, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bf12:	6826      	ldr	r6, [r4, #0]
 800bf14:	4b08      	ldr	r3, [pc, #32]	; (800bf38 <lwip_cyclic_timer+0x34>)
 800bf16:	6818      	ldr	r0, [r3, #0]
 800bf18:	4430      	add	r0, r6
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bf1a:	1b43      	subs	r3, r0, r5
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	da05      	bge.n	800bf2c <lwip_cyclic_timer+0x28>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bf20:	4622      	mov	r2, r4
 800bf22:	4906      	ldr	r1, [pc, #24]	; (800bf3c <lwip_cyclic_timer+0x38>)
 800bf24:	1970      	adds	r0, r6, r5
 800bf26:	f7ff ffb5 	bl	800be94 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bf2a:	bd70      	pop	{r4, r5, r6, pc}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bf2c:	4622      	mov	r2, r4
 800bf2e:	4903      	ldr	r1, [pc, #12]	; (800bf3c <lwip_cyclic_timer+0x38>)
 800bf30:	f7ff ffb0 	bl	800be94 <sys_timeout_abs>
}
 800bf34:	e7f9      	b.n	800bf2a <lwip_cyclic_timer+0x26>
 800bf36:	bf00      	nop
 800bf38:	20000678 	.word	0x20000678
 800bf3c:	0800bf05 	.word	0x0800bf05

0800bf40 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bf40:	b570      	push	{r4, r5, r6, lr}
 800bf42:	4604      	mov	r4, r0
 800bf44:	460d      	mov	r5, r1
 800bf46:	4616      	mov	r6, r2
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bf48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800bf4c:	d207      	bcs.n	800bf5e <sys_timeout+0x1e>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bf4e:	f7fa f8a5 	bl	800609c <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bf52:	4632      	mov	r2, r6
 800bf54:	4629      	mov	r1, r5
 800bf56:	4420      	add	r0, r4
 800bf58:	f7ff ff9c 	bl	800be94 <sys_timeout_abs>
#endif
}
 800bf5c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bf5e:	4b04      	ldr	r3, [pc, #16]	; (800bf70 <sys_timeout+0x30>)
 800bf60:	f240 1229 	movw	r2, #297	; 0x129
 800bf64:	4903      	ldr	r1, [pc, #12]	; (800bf74 <sys_timeout+0x34>)
 800bf66:	4804      	ldr	r0, [pc, #16]	; (800bf78 <sys_timeout+0x38>)
 800bf68:	f008 f964 	bl	8014234 <iprintf>
 800bf6c:	e7ef      	b.n	800bf4e <sys_timeout+0xe>
 800bf6e:	bf00      	nop
 800bf70:	08016d5c 	.word	0x08016d5c
 800bf74:	08016dd0 	.word	0x08016dd0
 800bf78:	08015418 	.word	0x08015418

0800bf7c <tcp_timer_needed>:
{
 800bf7c:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bf7e:	4b0a      	ldr	r3, [pc, #40]	; (800bfa8 <tcp_timer_needed+0x2c>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	b953      	cbnz	r3, 800bf9a <tcp_timer_needed+0x1e>
 800bf84:	4b09      	ldr	r3, [pc, #36]	; (800bfac <tcp_timer_needed+0x30>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	b143      	cbz	r3, 800bf9c <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800bf8a:	4b07      	ldr	r3, [pc, #28]	; (800bfa8 <tcp_timer_needed+0x2c>)
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bf90:	2200      	movs	r2, #0
 800bf92:	4907      	ldr	r1, [pc, #28]	; (800bfb0 <tcp_timer_needed+0x34>)
 800bf94:	20fa      	movs	r0, #250	; 0xfa
 800bf96:	f7ff ffd3 	bl	800bf40 <sys_timeout>
}
 800bf9a:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bf9c:	4b05      	ldr	r3, [pc, #20]	; (800bfb4 <tcp_timer_needed+0x38>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1f2      	bne.n	800bf8a <tcp_timer_needed+0xe>
 800bfa4:	e7f9      	b.n	800bf9a <tcp_timer_needed+0x1e>
 800bfa6:	bf00      	nop
 800bfa8:	20000680 	.word	0x20000680
 800bfac:	20007b20 	.word	0x20007b20
 800bfb0:	0800bfb9 	.word	0x0800bfb9
 800bfb4:	20007b30 	.word	0x20007b30

0800bfb8 <tcpip_tcp_timer>:
{
 800bfb8:	b508      	push	{r3, lr}
  tcp_tmr();
 800bfba:	f7fd f87d 	bl	80090b8 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bfbe:	4b08      	ldr	r3, [pc, #32]	; (800bfe0 <tcpip_tcp_timer+0x28>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	b12b      	cbz	r3, 800bfd0 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	4907      	ldr	r1, [pc, #28]	; (800bfe4 <tcpip_tcp_timer+0x2c>)
 800bfc8:	20fa      	movs	r0, #250	; 0xfa
 800bfca:	f7ff ffb9 	bl	800bf40 <sys_timeout>
}
 800bfce:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bfd0:	4b05      	ldr	r3, [pc, #20]	; (800bfe8 <tcpip_tcp_timer+0x30>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1f5      	bne.n	800bfc4 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800bfd8:	4b04      	ldr	r3, [pc, #16]	; (800bfec <tcpip_tcp_timer+0x34>)
 800bfda:	2200      	movs	r2, #0
 800bfdc:	601a      	str	r2, [r3, #0]
}
 800bfde:	e7f6      	b.n	800bfce <tcpip_tcp_timer+0x16>
 800bfe0:	20007b20 	.word	0x20007b20
 800bfe4:	0800bfb9 	.word	0x0800bfb9
 800bfe8:	20007b30 	.word	0x20007b30
 800bfec:	20000680 	.word	0x20000680

0800bff0 <sys_timeouts_init>:
{
 800bff0:	b510      	push	{r4, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bff2:	2401      	movs	r4, #1
 800bff4:	e008      	b.n	800c008 <sys_timeouts_init+0x18>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bff6:	4b06      	ldr	r3, [pc, #24]	; (800c010 <sys_timeouts_init+0x20>)
 800bff8:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 800bffc:	4905      	ldr	r1, [pc, #20]	; (800c014 <sys_timeouts_init+0x24>)
 800bffe:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 800c002:	f7ff ff9d 	bl	800bf40 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c006:	3401      	adds	r4, #1
 800c008:	2c09      	cmp	r4, #9
 800c00a:	d9f4      	bls.n	800bff6 <sys_timeouts_init+0x6>
}
 800c00c:	bd10      	pop	{r4, pc}
 800c00e:	bf00      	nop
 800c010:	08016e08 	.word	0x08016e08
 800c014:	0800bf05 	.word	0x0800bf05

0800c018 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c018:	b570      	push	{r4, r5, r6, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c01a:	f7fa f83f 	bl	800609c <sys_now>
 800c01e:	4605      	mov	r5, r0
 800c020:	e013      	b.n	800c04a <sys_check_timeouts+0x32>
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c022:	f7fb fb0d 	bl	8007640 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c026:	4b0d      	ldr	r3, [pc, #52]	; (800c05c <sys_check_timeouts+0x44>)
 800c028:	6819      	ldr	r1, [r3, #0]
    if (tmptimeout == NULL) {
 800c02a:	b1b1      	cbz	r1, 800c05a <sys_check_timeouts+0x42>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c02c:	684b      	ldr	r3, [r1, #4]
 800c02e:	1aea      	subs	r2, r5, r3
 800c030:	2a00      	cmp	r2, #0
 800c032:	db12      	blt.n	800c05a <sys_check_timeouts+0x42>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c034:	6808      	ldr	r0, [r1, #0]
 800c036:	4a09      	ldr	r2, [pc, #36]	; (800c05c <sys_check_timeouts+0x44>)
 800c038:	6010      	str	r0, [r2, #0]
    handler = tmptimeout->h;
 800c03a:	688c      	ldr	r4, [r1, #8]
    arg = tmptimeout->arg;
 800c03c:	68ce      	ldr	r6, [r1, #12]
    current_timeout_due_time = tmptimeout->time;
 800c03e:	4a08      	ldr	r2, [pc, #32]	; (800c060 <sys_check_timeouts+0x48>)
 800c040:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c042:	2007      	movs	r0, #7
 800c044:	f7fa ff02 	bl	8006e4c <memp_free>
    if (handler != NULL) {
 800c048:	b924      	cbnz	r4, 800c054 <sys_check_timeouts+0x3c>
    PBUF_CHECK_FREE_OOSEQ();
 800c04a:	4b06      	ldr	r3, [pc, #24]	; (800c064 <sys_check_timeouts+0x4c>)
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d0e9      	beq.n	800c026 <sys_check_timeouts+0xe>
 800c052:	e7e6      	b.n	800c022 <sys_check_timeouts+0xa>
      handler(arg);
 800c054:	4630      	mov	r0, r6
 800c056:	47a0      	blx	r4
 800c058:	e7f7      	b.n	800c04a <sys_check_timeouts+0x32>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c05a:	bd70      	pop	{r4, r5, r6, pc}
 800c05c:	2000067c 	.word	0x2000067c
 800c060:	20000678 	.word	0x20000678
 800c064:	20007b18 	.word	0x20007b18

0800c068 <udp_new_port>:
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  u16_t n = 0;
 800c068:	2000      	movs	r0, #0
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c06a:	4a10      	ldr	r2, [pc, #64]	; (800c0ac <udp_new_port+0x44>)
 800c06c:	8813      	ldrh	r3, [r2, #0]
 800c06e:	1c59      	adds	r1, r3, #1
 800c070:	8011      	strh	r1, [r2, #0]
 800c072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c076:	4293      	cmp	r3, r2
 800c078:	d009      	beq.n	800c08e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c07a:	4b0d      	ldr	r3, [pc, #52]	; (800c0b0 <udp_new_port+0x48>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	b193      	cbz	r3, 800c0a6 <udp_new_port+0x3e>
    if (pcb->local_port == udp_port) {
 800c080:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 800c082:	4a0a      	ldr	r2, [pc, #40]	; (800c0ac <udp_new_port+0x44>)
 800c084:	8812      	ldrh	r2, [r2, #0]
 800c086:	4291      	cmp	r1, r2
 800c088:	d006      	beq.n	800c098 <udp_new_port+0x30>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c08a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c08c:	e7f7      	b.n	800c07e <udp_new_port+0x16>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c08e:	4b07      	ldr	r3, [pc, #28]	; (800c0ac <udp_new_port+0x44>)
 800c090:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c094:	801a      	strh	r2, [r3, #0]
 800c096:	e7f0      	b.n	800c07a <udp_new_port+0x12>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c098:	3001      	adds	r0, #1
 800c09a:	b280      	uxth	r0, r0
 800c09c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800c0a0:	d3e3      	bcc.n	800c06a <udp_new_port+0x2>
        return 0;
 800c0a2:	2000      	movs	r0, #0
      }
      goto again;
    }
  }
  return udp_port;
}
 800c0a4:	4770      	bx	lr
  return udp_port;
 800c0a6:	4b01      	ldr	r3, [pc, #4]	; (800c0ac <udp_new_port+0x44>)
 800c0a8:	8818      	ldrh	r0, [r3, #0]
 800c0aa:	4770      	bx	lr
 800c0ac:	20000012 	.word	0x20000012
 800c0b0:	20007b38 	.word	0x20007b38

0800c0b4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c0b4:	b570      	push	{r4, r5, r6, lr}
 800c0b6:	460d      	mov	r5, r1
 800c0b8:	4614      	mov	r4, r2
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c0ba:	4606      	mov	r6, r0
 800c0bc:	b1a8      	cbz	r0, 800c0ea <udp_input_local_match+0x36>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c0be:	b1dd      	cbz	r5, 800c0f8 <udp_input_local_match+0x44>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c0c0:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 800c0c4:	b13a      	cbz	r2, 800c0d6 <udp_input_local_match+0x22>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c0c6:	4b4e      	ldr	r3, [pc, #312]	; (800c200 <udp_input_local_match+0x14c>)
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d17f      	bne.n	800c1d6 <udp_input_local_match+0x122>
    return 0;
  }

  /* Dual-stack: PCBs listening to any IP type also listen to any IP address */
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
 800c0d6:	7d33      	ldrb	r3, [r6, #20]
 800c0d8:	2b2e      	cmp	r3, #46	; 0x2e
 800c0da:	d07e      	beq.n	800c1da <udp_input_local_match+0x126>
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST_RECV */
    return 1;
  }

  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
 800c0dc:	4a48      	ldr	r2, [pc, #288]	; (800c200 <udp_input_local_match+0x14c>)
 800c0de:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d00f      	beq.n	800c106 <udp_input_local_match+0x52>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
        return 1;
      }
  }

  return 0;
 800c0e6:	2000      	movs	r0, #0
}
 800c0e8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c0ea:	4b46      	ldr	r3, [pc, #280]	; (800c204 <udp_input_local_match+0x150>)
 800c0ec:	2287      	movs	r2, #135	; 0x87
 800c0ee:	4946      	ldr	r1, [pc, #280]	; (800c208 <udp_input_local_match+0x154>)
 800c0f0:	4846      	ldr	r0, [pc, #280]	; (800c20c <udp_input_local_match+0x158>)
 800c0f2:	f008 f89f 	bl	8014234 <iprintf>
 800c0f6:	e7e2      	b.n	800c0be <udp_input_local_match+0xa>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c0f8:	4b42      	ldr	r3, [pc, #264]	; (800c204 <udp_input_local_match+0x150>)
 800c0fa:	2288      	movs	r2, #136	; 0x88
 800c0fc:	4944      	ldr	r1, [pc, #272]	; (800c210 <udp_input_local_match+0x15c>)
 800c0fe:	4843      	ldr	r0, [pc, #268]	; (800c20c <udp_input_local_match+0x158>)
 800c100:	f008 f898 	bl	8014234 <iprintf>
 800c104:	e7dc      	b.n	800c0c0 <udp_input_local_match+0xc>
    if (broadcast != 0) {
 800c106:	b17c      	cbz	r4, 800c128 <udp_input_local_match+0x74>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c108:	2e00      	cmp	r6, #0
 800c10a:	d068      	beq.n	800c1de <udp_input_local_match+0x12a>
 800c10c:	6833      	ldr	r3, [r6, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d067      	beq.n	800c1e2 <udp_input_local_match+0x12e>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c112:	4a3b      	ldr	r2, [pc, #236]	; (800c200 <udp_input_local_match+0x14c>)
 800c114:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c116:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c11a:	d064      	beq.n	800c1e6 <udp_input_local_match+0x132>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c11c:	69e9      	ldr	r1, [r5, #28]
 800c11e:	4053      	eors	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c120:	420b      	tst	r3, r1
 800c122:	d062      	beq.n	800c1ea <udp_input_local_match+0x136>
  return 0;
 800c124:	2000      	movs	r0, #0
 800c126:	e7df      	b.n	800c0e8 <udp_input_local_match+0x34>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c128:	2e00      	cmp	r6, #0
 800c12a:	d060      	beq.n	800c1ee <udp_input_local_match+0x13a>
 800c12c:	2b06      	cmp	r3, #6
 800c12e:	d00e      	beq.n	800c14e <udp_input_local_match+0x9a>
 800c130:	b32e      	cbz	r6, 800c17e <udp_input_local_match+0xca>
 800c132:	6832      	ldr	r2, [r6, #0]
 800c134:	bb2a      	cbnz	r2, 800c182 <udp_input_local_match+0xce>
 800c136:	2201      	movs	r2, #1
 800c138:	2a00      	cmp	r2, #0
 800c13a:	d15a      	bne.n	800c1f2 <udp_input_local_match+0x13e>
 800c13c:	2b06      	cmp	r3, #6
 800c13e:	d022      	beq.n	800c186 <udp_input_local_match+0xd2>
 800c140:	6832      	ldr	r2, [r6, #0]
 800c142:	4b2f      	ldr	r3, [pc, #188]	; (800c200 <udp_input_local_match+0x14c>)
 800c144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c146:	429a      	cmp	r2, r3
 800c148:	d057      	beq.n	800c1fa <udp_input_local_match+0x146>
  return 0;
 800c14a:	4620      	mov	r0, r4
 800c14c:	e7cc      	b.n	800c0e8 <udp_input_local_match+0x34>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c14e:	b14e      	cbz	r6, 800c164 <udp_input_local_match+0xb0>
 800c150:	6832      	ldr	r2, [r6, #0]
 800c152:	b94a      	cbnz	r2, 800c168 <udp_input_local_match+0xb4>
 800c154:	6872      	ldr	r2, [r6, #4]
 800c156:	b962      	cbnz	r2, 800c172 <udp_input_local_match+0xbe>
 800c158:	68b2      	ldr	r2, [r6, #8]
 800c15a:	b962      	cbnz	r2, 800c176 <udp_input_local_match+0xc2>
 800c15c:	68f2      	ldr	r2, [r6, #12]
 800c15e:	b162      	cbz	r2, 800c17a <udp_input_local_match+0xc6>
 800c160:	2200      	movs	r2, #0
 800c162:	e002      	b.n	800c16a <udp_input_local_match+0xb6>
 800c164:	2201      	movs	r2, #1
 800c166:	e000      	b.n	800c16a <udp_input_local_match+0xb6>
 800c168:	2200      	movs	r2, #0
 800c16a:	2a00      	cmp	r2, #0
 800c16c:	d0e6      	beq.n	800c13c <udp_input_local_match+0x88>
        return 1;
 800c16e:	2001      	movs	r0, #1
 800c170:	e7ba      	b.n	800c0e8 <udp_input_local_match+0x34>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c172:	2200      	movs	r2, #0
 800c174:	e7f9      	b.n	800c16a <udp_input_local_match+0xb6>
 800c176:	2200      	movs	r2, #0
 800c178:	e7f7      	b.n	800c16a <udp_input_local_match+0xb6>
 800c17a:	2201      	movs	r2, #1
 800c17c:	e7f5      	b.n	800c16a <udp_input_local_match+0xb6>
 800c17e:	2201      	movs	r2, #1
 800c180:	e7da      	b.n	800c138 <udp_input_local_match+0x84>
 800c182:	2200      	movs	r2, #0
 800c184:	e7d8      	b.n	800c138 <udp_input_local_match+0x84>
 800c186:	6832      	ldr	r2, [r6, #0]
 800c188:	4b1d      	ldr	r3, [pc, #116]	; (800c200 <udp_input_local_match+0x14c>)
 800c18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d003      	beq.n	800c198 <udp_input_local_match+0xe4>
 800c190:	2300      	movs	r3, #0
 800c192:	bb83      	cbnz	r3, 800c1f6 <udp_input_local_match+0x142>
  return 0;
 800c194:	4620      	mov	r0, r4
 800c196:	e7a7      	b.n	800c0e8 <udp_input_local_match+0x34>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c198:	6872      	ldr	r2, [r6, #4]
 800c19a:	4b19      	ldr	r3, [pc, #100]	; (800c200 <udp_input_local_match+0x14c>)
 800c19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d001      	beq.n	800c1a6 <udp_input_local_match+0xf2>
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	e7f5      	b.n	800c192 <udp_input_local_match+0xde>
 800c1a6:	68b2      	ldr	r2, [r6, #8]
 800c1a8:	4b15      	ldr	r3, [pc, #84]	; (800c200 <udp_input_local_match+0x14c>)
 800c1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d001      	beq.n	800c1b4 <udp_input_local_match+0x100>
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	e7ee      	b.n	800c192 <udp_input_local_match+0xde>
 800c1b4:	68f2      	ldr	r2, [r6, #12]
 800c1b6:	4b12      	ldr	r3, [pc, #72]	; (800c200 <udp_input_local_match+0x14c>)
 800c1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d001      	beq.n	800c1c2 <udp_input_local_match+0x10e>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	e7e7      	b.n	800c192 <udp_input_local_match+0xde>
 800c1c2:	7c32      	ldrb	r2, [r6, #16]
 800c1c4:	4b0e      	ldr	r3, [pc, #56]	; (800c200 <udp_input_local_match+0x14c>)
 800c1c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d001      	beq.n	800c1d2 <udp_input_local_match+0x11e>
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	e7df      	b.n	800c192 <udp_input_local_match+0xde>
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e7dd      	b.n	800c192 <udp_input_local_match+0xde>
    return 0;
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	e786      	b.n	800c0e8 <udp_input_local_match+0x34>
    return 1;
 800c1da:	2001      	movs	r0, #1
 800c1dc:	e784      	b.n	800c0e8 <udp_input_local_match+0x34>
          return 1;
 800c1de:	2001      	movs	r0, #1
 800c1e0:	e782      	b.n	800c0e8 <udp_input_local_match+0x34>
 800c1e2:	2001      	movs	r0, #1
 800c1e4:	e780      	b.n	800c0e8 <udp_input_local_match+0x34>
 800c1e6:	2001      	movs	r0, #1
 800c1e8:	e77e      	b.n	800c0e8 <udp_input_local_match+0x34>
 800c1ea:	2001      	movs	r0, #1
 800c1ec:	e77c      	b.n	800c0e8 <udp_input_local_match+0x34>
        return 1;
 800c1ee:	2001      	movs	r0, #1
 800c1f0:	e77a      	b.n	800c0e8 <udp_input_local_match+0x34>
 800c1f2:	2001      	movs	r0, #1
 800c1f4:	e778      	b.n	800c0e8 <udp_input_local_match+0x34>
 800c1f6:	2001      	movs	r0, #1
 800c1f8:	e776      	b.n	800c0e8 <udp_input_local_match+0x34>
 800c1fa:	2001      	movs	r0, #1
 800c1fc:	e774      	b.n	800c0e8 <udp_input_local_match+0x34>
 800c1fe:	bf00      	nop
 800c200:	200039e8 	.word	0x200039e8
 800c204:	08016e58 	.word	0x08016e58
 800c208:	08016e88 	.word	0x08016e88
 800c20c:	08015418 	.word	0x08015418
 800c210:	08016eac 	.word	0x08016eac

0800c214 <udp_init>:
{
 800c214:	b508      	push	{r3, lr}
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c216:	f008 f89b 	bl	8014350 <rand>
 800c21a:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800c21e:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800c222:	4b01      	ldr	r3, [pc, #4]	; (800c228 <udp_init+0x14>)
 800c224:	8018      	strh	r0, [r3, #0]
}
 800c226:	bd08      	pop	{r3, pc}
 800c228:	20000012 	.word	0x20000012

0800c22c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c230:	b083      	sub	sp, #12
 800c232:	460f      	mov	r7, r1

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c234:	4682      	mov	sl, r0
 800c236:	b1d8      	cbz	r0, 800c270 <udp_input+0x44>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c238:	b30f      	cbz	r7, 800c27e <udp_input+0x52>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c23a:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 800c23e:	2b07      	cmp	r3, #7
 800c240:	d924      	bls.n	800c28c <udp_input+0x60>
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c242:	f8da 4004 	ldr.w	r4, [sl, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c246:	4b97      	ldr	r3, [pc, #604]	; (800c4a4 <udp_input+0x278>)
 800c248:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c24c:	2b06      	cmp	r3, #6
 800c24e:	d121      	bne.n	800c294 <udp_input+0x68>
 800c250:	f04f 0800 	mov.w	r8, #0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c254:	8820      	ldrh	r0, [r4, #0]
 800c256:	f7f9 ff8b 	bl	8006170 <lwip_htons>
 800c25a:	4681      	mov	r9, r0
  dest = lwip_ntohs(udphdr->dest);
 800c25c:	8860      	ldrh	r0, [r4, #2]
 800c25e:	f7f9 ff87 	bl	8006170 <lwip_htons>
 800c262:	4605      	mov	r5, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c264:	4b90      	ldr	r3, [pc, #576]	; (800c4a8 <udp_input+0x27c>)
 800c266:	681c      	ldr	r4, [r3, #0]
  uncon_pcb = NULL;
 800c268:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800c26c:	465e      	mov	r6, fp
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c26e:	e01e      	b.n	800c2ae <udp_input+0x82>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c270:	4b8e      	ldr	r3, [pc, #568]	; (800c4ac <udp_input+0x280>)
 800c272:	22cf      	movs	r2, #207	; 0xcf
 800c274:	498e      	ldr	r1, [pc, #568]	; (800c4b0 <udp_input+0x284>)
 800c276:	488f      	ldr	r0, [pc, #572]	; (800c4b4 <udp_input+0x288>)
 800c278:	f007 ffdc 	bl	8014234 <iprintf>
 800c27c:	e7dc      	b.n	800c238 <udp_input+0xc>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c27e:	4b8b      	ldr	r3, [pc, #556]	; (800c4ac <udp_input+0x280>)
 800c280:	22d0      	movs	r2, #208	; 0xd0
 800c282:	498d      	ldr	r1, [pc, #564]	; (800c4b8 <udp_input+0x28c>)
 800c284:	488b      	ldr	r0, [pc, #556]	; (800c4b4 <udp_input+0x288>)
 800c286:	f007 ffd5 	bl	8014234 <iprintf>
 800c28a:	e7d6      	b.n	800c23a <udp_input+0xe>
    pbuf_free(p);
 800c28c:	4650      	mov	r0, sl
 800c28e:	f7fb fa81 	bl	8007794 <pbuf_free>
    goto end;
 800c292:	e078      	b.n	800c386 <udp_input+0x15a>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c294:	4b83      	ldr	r3, [pc, #524]	; (800c4a4 <udp_input+0x278>)
 800c296:	6819      	ldr	r1, [r3, #0]
 800c298:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c29a:	f003 fadd 	bl	800f858 <ip4_addr_isbroadcast_u32>
 800c29e:	4680      	mov	r8, r0
 800c2a0:	e7d8      	b.n	800c254 <udp_input+0x28>
    if ((pcb->local_port == dest) &&
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
        if (uncon_pcb == NULL) {
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c2a2:	46a3      	mov	fp, r4
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c2a4:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 800c2a6:	454b      	cmp	r3, r9
 800c2a8:	d02e      	beq.n	800c308 <udp_input+0xdc>
        }
        break;
      }
    }

    prev = pcb;
 800c2aa:	4626      	mov	r6, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c2ac:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800c2ae:	2c00      	cmp	r4, #0
 800c2b0:	d053      	beq.n	800c35a <udp_input+0x12e>
    if ((pcb->local_port == dest) &&
 800c2b2:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800c2b4:	42ab      	cmp	r3, r5
 800c2b6:	d1f8      	bne.n	800c2aa <udp_input+0x7e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c2b8:	4642      	mov	r2, r8
 800c2ba:	4639      	mov	r1, r7
 800c2bc:	4620      	mov	r0, r4
 800c2be:	f7ff fef9 	bl	800c0b4 <udp_input_local_match>
    if ((pcb->local_port == dest) &&
 800c2c2:	2800      	cmp	r0, #0
 800c2c4:	d0f1      	beq.n	800c2aa <udp_input+0x7e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c2c6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800c2ca:	f013 0f04 	tst.w	r3, #4
 800c2ce:	d1e9      	bne.n	800c2a4 <udp_input+0x78>
        if (uncon_pcb == NULL) {
 800c2d0:	f1bb 0f00 	cmp.w	fp, #0
 800c2d4:	d0e5      	beq.n	800c2a2 <udp_input+0x76>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c2d6:	f1b8 0f00 	cmp.w	r8, #0
 800c2da:	d0e3      	beq.n	800c2a4 <udp_input+0x78>
 800c2dc:	4b71      	ldr	r3, [pc, #452]	; (800c4a4 <udp_input+0x278>)
 800c2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2e4:	d1de      	bne.n	800c2a4 <udp_input+0x78>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c2e6:	f89b 3014 	ldrb.w	r3, [fp, #20]
 800c2ea:	b923      	cbnz	r3, 800c2f6 <udp_input+0xca>
 800c2ec:	f8db 2000 	ldr.w	r2, [fp]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d0d6      	beq.n	800c2a4 <udp_input+0x78>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c2f6:	7d23      	ldrb	r3, [r4, #20]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d1d3      	bne.n	800c2a4 <udp_input+0x78>
 800c2fc:	6822      	ldr	r2, [r4, #0]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	429a      	cmp	r2, r3
 800c302:	d1cf      	bne.n	800c2a4 <udp_input+0x78>
              uncon_pcb = pcb;
 800c304:	46a3      	mov	fp, r4
 800c306:	e7cd      	b.n	800c2a4 <udp_input+0x78>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c308:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
      if ((pcb->remote_port == src) &&
 800c30c:	2b06      	cmp	r3, #6
 800c30e:	d00e      	beq.n	800c32e <udp_input+0x102>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c310:	69a2      	ldr	r2, [r4, #24]
 800c312:	b1da      	cbz	r2, 800c34c <udp_input+0x120>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c314:	4a63      	ldr	r2, [pc, #396]	; (800c4a4 <udp_input+0x278>)
 800c316:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
      if ((pcb->remote_port == src) &&
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d1c5      	bne.n	800c2aa <udp_input+0x7e>
 800c31e:	2b06      	cmp	r3, #6
 800c320:	d03a      	beq.n	800c398 <udp_input+0x16c>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c322:	69a2      	ldr	r2, [r4, #24]
 800c324:	4b5f      	ldr	r3, [pc, #380]	; (800c4a4 <udp_input+0x278>)
 800c326:	695b      	ldr	r3, [r3, #20]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c328:	429a      	cmp	r2, r3
 800c32a:	d1be      	bne.n	800c2aa <udp_input+0x7e>
 800c32c:	e00e      	b.n	800c34c <udp_input+0x120>
 800c32e:	69a2      	ldr	r2, [r4, #24]
 800c330:	b94a      	cbnz	r2, 800c346 <udp_input+0x11a>
 800c332:	69e2      	ldr	r2, [r4, #28]
 800c334:	2a00      	cmp	r2, #0
 800c336:	d129      	bne.n	800c38c <udp_input+0x160>
 800c338:	6a22      	ldr	r2, [r4, #32]
 800c33a:	2a00      	cmp	r2, #0
 800c33c:	d128      	bne.n	800c390 <udp_input+0x164>
 800c33e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c340:	b342      	cbz	r2, 800c394 <udp_input+0x168>
 800c342:	2200      	movs	r2, #0
 800c344:	e000      	b.n	800c348 <udp_input+0x11c>
 800c346:	2200      	movs	r2, #0
      if ((pcb->remote_port == src) &&
 800c348:	2a00      	cmp	r2, #0
 800c34a:	d0e3      	beq.n	800c314 <udp_input+0xe8>
        if (prev != NULL) {
 800c34c:	b12e      	cbz	r6, 800c35a <udp_input+0x12e>
          prev->next = pcb->next;
 800c34e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c350:	6373      	str	r3, [r6, #52]	; 0x34
          pcb->next = udp_pcbs;
 800c352:	4b55      	ldr	r3, [pc, #340]	; (800c4a8 <udp_input+0x27c>)
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	6362      	str	r2, [r4, #52]	; 0x34
          udp_pcbs = pcb;
 800c358:	601c      	str	r4, [r3, #0]
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c35a:	2c00      	cmp	r4, #0
 800c35c:	d045      	beq.n	800c3ea <udp_input+0x1be>
    pcb = uncon_pcb;
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c35e:	2c00      	cmp	r4, #0
 800c360:	d045      	beq.n	800c3ee <udp_input+0x1c2>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c362:	2108      	movs	r1, #8
 800c364:	4650      	mov	r0, sl
 800c366:	f7fb f9cf 	bl	8007708 <pbuf_remove_header>
 800c36a:	2800      	cmp	r0, #0
 800c36c:	d15c      	bne.n	800c428 <udp_input+0x1fc>
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
      goto end;
    }

    if (pcb != NULL) {
 800c36e:	2c00      	cmp	r4, #0
 800c370:	d069      	beq.n	800c446 <udp_input+0x21a>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c372:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800c374:	2d00      	cmp	r5, #0
 800c376:	d062      	beq.n	800c43e <udp_input+0x212>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c378:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800c37a:	f8cd 9000 	str.w	r9, [sp]
 800c37e:	4b4f      	ldr	r3, [pc, #316]	; (800c4bc <udp_input+0x290>)
 800c380:	4652      	mov	r2, sl
 800c382:	4621      	mov	r1, r4
 800c384:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c386:	b003      	add	sp, #12
 800c388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c38c:	2200      	movs	r2, #0
 800c38e:	e7db      	b.n	800c348 <udp_input+0x11c>
 800c390:	2200      	movs	r2, #0
 800c392:	e7d9      	b.n	800c348 <udp_input+0x11c>
 800c394:	2201      	movs	r2, #1
 800c396:	e7d7      	b.n	800c348 <udp_input+0x11c>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c398:	69a2      	ldr	r2, [r4, #24]
 800c39a:	4b42      	ldr	r3, [pc, #264]	; (800c4a4 <udp_input+0x278>)
 800c39c:	695b      	ldr	r3, [r3, #20]
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d003      	beq.n	800c3aa <udp_input+0x17e>
 800c3a2:	2300      	movs	r3, #0
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d080      	beq.n	800c2aa <udp_input+0x7e>
 800c3a8:	e7d0      	b.n	800c34c <udp_input+0x120>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c3aa:	69e2      	ldr	r2, [r4, #28]
 800c3ac:	4b3d      	ldr	r3, [pc, #244]	; (800c4a4 <udp_input+0x278>)
 800c3ae:	699b      	ldr	r3, [r3, #24]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d001      	beq.n	800c3b8 <udp_input+0x18c>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	e7f5      	b.n	800c3a4 <udp_input+0x178>
 800c3b8:	6a22      	ldr	r2, [r4, #32]
 800c3ba:	4b3a      	ldr	r3, [pc, #232]	; (800c4a4 <udp_input+0x278>)
 800c3bc:	69db      	ldr	r3, [r3, #28]
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d001      	beq.n	800c3c6 <udp_input+0x19a>
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	e7ee      	b.n	800c3a4 <udp_input+0x178>
 800c3c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c3c8:	4b36      	ldr	r3, [pc, #216]	; (800c4a4 <udp_input+0x278>)
 800c3ca:	6a1b      	ldr	r3, [r3, #32]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d001      	beq.n	800c3d4 <udp_input+0x1a8>
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	e7e7      	b.n	800c3a4 <udp_input+0x178>
 800c3d4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800c3d8:	4b32      	ldr	r3, [pc, #200]	; (800c4a4 <udp_input+0x278>)
 800c3da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d001      	beq.n	800c3e6 <udp_input+0x1ba>
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	e7de      	b.n	800c3a4 <udp_input+0x178>
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	e7dc      	b.n	800c3a4 <udp_input+0x178>
    pcb = uncon_pcb;
 800c3ea:	465c      	mov	r4, fp
 800c3ec:	e7b7      	b.n	800c35e <udp_input+0x132>
    if (ip_current_is_v6()) {
 800c3ee:	4b2d      	ldr	r3, [pc, #180]	; (800c4a4 <udp_input+0x278>)
 800c3f0:	68db      	ldr	r3, [r3, #12]
 800c3f2:	b17b      	cbz	r3, 800c414 <udp_input+0x1e8>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
 800c3f4:	4932      	ldr	r1, [pc, #200]	; (800c4c0 <udp_input+0x294>)
 800c3f6:	4638      	mov	r0, r7
 800c3f8:	f7fa ffe0 	bl	80073bc <netif_get_ip6_addr_match>
 800c3fc:	43c3      	mvns	r3, r0
 800c3fe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    if (!ip_current_is_v6()) {
 800c402:	4a28      	ldr	r2, [pc, #160]	; (800c4a4 <udp_input+0x278>)
 800c404:	68d2      	ldr	r2, [r2, #12]
 800c406:	b13a      	cbz	r2, 800c418 <udp_input+0x1ec>
  if (for_us) {
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1aa      	bne.n	800c362 <udp_input+0x136>
    pbuf_free(p);
 800c40c:	4650      	mov	r0, sl
 800c40e:	f7fb f9c1 	bl	8007794 <pbuf_free>
  return;
 800c412:	e7b8      	b.n	800c386 <udp_input+0x15a>
  u8_t for_us = 0;
 800c414:	2300      	movs	r3, #0
 800c416:	e7f4      	b.n	800c402 <udp_input+0x1d6>
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	4a22      	ldr	r2, [pc, #136]	; (800c4a4 <udp_input+0x278>)
 800c41c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c41e:	4293      	cmp	r3, r2
 800c420:	bf14      	ite	ne
 800c422:	2300      	movne	r3, #0
 800c424:	2301      	moveq	r3, #1
 800c426:	e7ef      	b.n	800c408 <udp_input+0x1dc>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c428:	4b20      	ldr	r3, [pc, #128]	; (800c4ac <udp_input+0x280>)
 800c42a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c42e:	4925      	ldr	r1, [pc, #148]	; (800c4c4 <udp_input+0x298>)
 800c430:	4820      	ldr	r0, [pc, #128]	; (800c4b4 <udp_input+0x288>)
 800c432:	f007 feff 	bl	8014234 <iprintf>
      pbuf_free(p);
 800c436:	4650      	mov	r0, sl
 800c438:	f7fb f9ac 	bl	8007794 <pbuf_free>
      goto end;
 800c43c:	e7a3      	b.n	800c386 <udp_input+0x15a>
        pbuf_free(p);
 800c43e:	4650      	mov	r0, sl
 800c440:	f7fb f9a8 	bl	8007794 <pbuf_free>
        goto end;
 800c444:	e79f      	b.n	800c386 <udp_input+0x15a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c446:	f1b8 0f00 	cmp.w	r8, #0
 800c44a:	d10c      	bne.n	800c466 <udp_input+0x23a>
 800c44c:	4b15      	ldr	r3, [pc, #84]	; (800c4a4 <udp_input+0x278>)
 800c44e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c452:	2b06      	cmp	r3, #6
 800c454:	d00b      	beq.n	800c46e <udp_input+0x242>
 800c456:	4b13      	ldr	r3, [pc, #76]	; (800c4a4 <udp_input+0x278>)
 800c458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c45e:	3be0      	subs	r3, #224	; 0xe0
 800c460:	bf18      	it	ne
 800c462:	2301      	movne	r3, #1
 800c464:	b953      	cbnz	r3, 800c47c <udp_input+0x250>
      pbuf_free(p);
 800c466:	4650      	mov	r0, sl
 800c468:	f7fb f994 	bl	8007794 <pbuf_free>
 800c46c:	e78b      	b.n	800c386 <udp_input+0x15a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c46e:	4b0d      	ldr	r3, [pc, #52]	; (800c4a4 <udp_input+0x278>)
 800c470:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c474:	3bff      	subs	r3, #255	; 0xff
 800c476:	bf18      	it	ne
 800c478:	2301      	movne	r3, #1
 800c47a:	e7f3      	b.n	800c464 <udp_input+0x238>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c47c:	4c09      	ldr	r4, [pc, #36]	; (800c4a4 <udp_input+0x278>)
 800c47e:	8a21      	ldrh	r1, [r4, #16]
 800c480:	3108      	adds	r1, #8
 800c482:	b209      	sxth	r1, r1
 800c484:	4650      	mov	r0, sl
 800c486:	f7fb f97f 	bl	8007788 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c48a:	68e3      	ldr	r3, [r4, #12]
 800c48c:	b123      	cbz	r3, 800c498 <udp_input+0x26c>
 800c48e:	2104      	movs	r1, #4
 800c490:	4650      	mov	r0, sl
 800c492:	f003 ff8b 	bl	80103ac <icmp6_dest_unreach>
 800c496:	e7e6      	b.n	800c466 <udp_input+0x23a>
 800c498:	2103      	movs	r1, #3
 800c49a:	4650      	mov	r0, sl
 800c49c:	f002 fdaa 	bl	800eff4 <icmp_dest_unreach>
 800c4a0:	e7e1      	b.n	800c466 <udp_input+0x23a>
 800c4a2:	bf00      	nop
 800c4a4:	200039e8 	.word	0x200039e8
 800c4a8:	20007b38 	.word	0x20007b38
 800c4ac:	08016e58 	.word	0x08016e58
 800c4b0:	08016ed4 	.word	0x08016ed4
 800c4b4:	08015418 	.word	0x08015418
 800c4b8:	08016eec 	.word	0x08016eec
 800c4bc:	200039fc 	.word	0x200039fc
 800c4c0:	20003a14 	.word	0x20003a14
 800c4c4:	08016f08 	.word	0x08016f08

0800c4c8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4cc:	b086      	sub	sp, #24
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	4616      	mov	r6, r2

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c4d2:	460d      	mov	r5, r1
 800c4d4:	b139      	cbz	r1, 800c4e6 <udp_bind+0x1e>
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c4d6:	b144      	cbz	r4, 800c4ea <udp_bind+0x22>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c4d8:	4b91      	ldr	r3, [pc, #580]	; (800c720 <udp_bind+0x258>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	b17b      	cbz	r3, 800c4fe <udp_bind+0x36>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c4de:	42a3      	cmp	r3, r4
 800c4e0:	d018      	beq.n	800c514 <udp_bind+0x4c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c4e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4e4:	e7fa      	b.n	800c4dc <udp_bind+0x14>
    ipaddr = IP4_ADDR_ANY;
 800c4e6:	4d8f      	ldr	r5, [pc, #572]	; (800c724 <udp_bind+0x25c>)
 800c4e8:	e7f5      	b.n	800c4d6 <udp_bind+0xe>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c4ea:	4b8f      	ldr	r3, [pc, #572]	; (800c728 <udp_bind+0x260>)
 800c4ec:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c4f0:	498e      	ldr	r1, [pc, #568]	; (800c72c <udp_bind+0x264>)
 800c4f2:	488f      	ldr	r0, [pc, #572]	; (800c730 <udp_bind+0x268>)
 800c4f4:	f007 fe9e 	bl	8014234 <iprintf>
 800c4f8:	f06f 000f 	mvn.w	r0, #15
 800c4fc:	e082      	b.n	800c604 <udp_bind+0x13c>
  rebind = 0;
 800c4fe:	f04f 0800 	mov.w	r8, #0
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  /* If the given IP address should have a zone but doesn't, assign one now.
   * This is legacy support: scope-aware callers should always provide properly
   * zoned source addresses. Do the zone selection before the address-in-use
   * check below; as such we have to make a temporary copy of the address. */
  if (IP_IS_V6(ipaddr) && ip6_addr_lacks_zone(ip_2_ip6(ipaddr), IP6_UNKNOWN)) {
 800c502:	b115      	cbz	r5, 800c50a <udp_bind+0x42>
 800c504:	7d2b      	ldrb	r3, [r5, #20]
 800c506:	2b06      	cmp	r3, #6
 800c508:	d007      	beq.n	800c51a <udp_bind+0x52>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c50a:	2e00      	cmp	r6, #0
 800c50c:	d059      	beq.n	800c5c2 <udp_bind+0xfa>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c50e:	4b84      	ldr	r3, [pc, #528]	; (800c720 <udp_bind+0x258>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	e0e2      	b.n	800c6da <udp_bind+0x212>
      rebind = 1;
 800c514:	f04f 0801 	mov.w	r8, #1
 800c518:	e7f3      	b.n	800c502 <udp_bind+0x3a>
  if (IP_IS_V6(ipaddr) && ip6_addr_lacks_zone(ip_2_ip6(ipaddr), IP6_UNKNOWN)) {
 800c51a:	7c2f      	ldrb	r7, [r5, #16]
 800c51c:	2f00      	cmp	r7, #0
 800c51e:	d1f4      	bne.n	800c50a <udp_bind+0x42>
 800c520:	682a      	ldr	r2, [r5, #0]
 800c522:	f24c 00ff 	movw	r0, #49407	; 0xc0ff
 800c526:	4010      	ands	r0, r2
 800c528:	f248 01fe 	movw	r1, #33022	; 0x80fe
 800c52c:	4288      	cmp	r0, r1
 800c52e:	d00b      	beq.n	800c548 <udp_bind+0x80>
 800c530:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800c534:	0412      	lsls	r2, r2, #16
 800c536:	0c12      	lsrs	r2, r2, #16
 800c538:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c53c:	428a      	cmp	r2, r1
 800c53e:	d003      	beq.n	800c548 <udp_bind+0x80>
 800c540:	f240 21ff 	movw	r1, #767	; 0x2ff
 800c544:	428a      	cmp	r2, r1
 800c546:	d1e0      	bne.n	800c50a <udp_bind+0x42>
    ip_addr_copy(zoned_ipaddr, *ipaddr);
 800c548:	f88d 3014 	strb.w	r3, [sp, #20]
 800c54c:	7d2b      	ldrb	r3, [r5, #20]
 800c54e:	2b06      	cmp	r3, #6
 800c550:	d029      	beq.n	800c5a6 <udp_bind+0xde>
 800c552:	682b      	ldr	r3, [r5, #0]
 800c554:	9300      	str	r3, [sp, #0]
 800c556:	2300      	movs	r3, #0
 800c558:	9303      	str	r3, [sp, #12]
 800c55a:	9302      	str	r3, [sp, #8]
 800c55c:	9301      	str	r3, [sp, #4]
 800c55e:	f88d 3010 	strb.w	r3, [sp, #16]
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
 800c562:	4669      	mov	r1, sp
 800c564:	4668      	mov	r0, sp
 800c566:	f003 ff97 	bl	8010498 <ip6_route>
 800c56a:	4602      	mov	r2, r0
 800c56c:	b338      	cbz	r0, 800c5be <udp_bind+0xf6>
 800c56e:	9b00      	ldr	r3, [sp, #0]
 800c570:	f24c 00ff 	movw	r0, #49407	; 0xc0ff
 800c574:	4018      	ands	r0, r3
 800c576:	f248 01fe 	movw	r1, #33022	; 0x80fe
 800c57a:	4288      	cmp	r0, r1
 800c57c:	d00b      	beq.n	800c596 <udp_bind+0xce>
 800c57e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c582:	041b      	lsls	r3, r3, #16
 800c584:	0c1b      	lsrs	r3, r3, #16
 800c586:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c58a:	428b      	cmp	r3, r1
 800c58c:	d003      	beq.n	800c596 <udp_bind+0xce>
 800c58e:	f240 21ff 	movw	r1, #767	; 0x2ff
 800c592:	428b      	cmp	r3, r1
 800c594:	d103      	bne.n	800c59e <udp_bind+0xd6>
 800c596:	f892 70e2 	ldrb.w	r7, [r2, #226]	; 0xe2
 800c59a:	3701      	adds	r7, #1
 800c59c:	b2ff      	uxtb	r7, r7
 800c59e:	f88d 7010 	strb.w	r7, [sp, #16]
    ipaddr = &zoned_ipaddr;
 800c5a2:	466d      	mov	r5, sp
 800c5a4:	e7b1      	b.n	800c50a <udp_bind+0x42>
    ip_addr_copy(zoned_ipaddr, *ipaddr);
 800c5a6:	682b      	ldr	r3, [r5, #0]
 800c5a8:	9300      	str	r3, [sp, #0]
 800c5aa:	686b      	ldr	r3, [r5, #4]
 800c5ac:	9301      	str	r3, [sp, #4]
 800c5ae:	68ab      	ldr	r3, [r5, #8]
 800c5b0:	9302      	str	r3, [sp, #8]
 800c5b2:	68eb      	ldr	r3, [r5, #12]
 800c5b4:	9303      	str	r3, [sp, #12]
 800c5b6:	7c2b      	ldrb	r3, [r5, #16]
 800c5b8:	f88d 3010 	strb.w	r3, [sp, #16]
 800c5bc:	e7d1      	b.n	800c562 <udp_bind+0x9a>
    ipaddr = &zoned_ipaddr;
 800c5be:	466d      	mov	r5, sp
 800c5c0:	e7a3      	b.n	800c50a <udp_bind+0x42>
    port = udp_new_port();
 800c5c2:	f7ff fd51 	bl	800c068 <udp_new_port>
    if (port == 0) {
 800c5c6:	4606      	mov	r6, r0
 800c5c8:	2800      	cmp	r0, #0
 800c5ca:	f000 80d0 	beq.w	800c76e <udp_bind+0x2a6>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c5ce:	b10c      	cbz	r4, 800c5d4 <udp_bind+0x10c>
 800c5d0:	7d2b      	ldrb	r3, [r5, #20]
 800c5d2:	7523      	strb	r3, [r4, #20]
 800c5d4:	b11d      	cbz	r5, 800c5de <udp_bind+0x116>
 800c5d6:	7d2b      	ldrb	r3, [r5, #20]
 800c5d8:	2b06      	cmp	r3, #6
 800c5da:	f000 80ab 	beq.w	800c734 <udp_bind+0x26c>
 800c5de:	2d00      	cmp	r5, #0
 800c5e0:	f000 80c3 	beq.w	800c76a <udp_bind+0x2a2>
 800c5e4:	682b      	ldr	r3, [r5, #0]
 800c5e6:	6023      	str	r3, [r4, #0]
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	60e3      	str	r3, [r4, #12]
 800c5ec:	60a3      	str	r3, [r4, #8]
 800c5ee:	6063      	str	r3, [r4, #4]
 800c5f0:	7423      	strb	r3, [r4, #16]

  pcb->local_port = port;
 800c5f2:	8766      	strh	r6, [r4, #58]	; 0x3a
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c5f4:	f1b8 0f00 	cmp.w	r8, #0
 800c5f8:	d103      	bne.n	800c602 <udp_bind+0x13a>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c5fa:	4b49      	ldr	r3, [pc, #292]	; (800c720 <udp_bind+0x258>)
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	6362      	str	r2, [r4, #52]	; 0x34
    udp_pcbs = pcb;
 800c600:	601c      	str	r4, [r3, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c602:	2000      	movs	r0, #0
}
 800c604:	b006      	add	sp, #24
 800c606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if ((ipcb->local_port == port) &&
 800c60a:	2a06      	cmp	r2, #6
 800c60c:	d006      	beq.n	800c61c <udp_bind+0x154>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c60e:	681f      	ldr	r7, [r3, #0]
 800c610:	6828      	ldr	r0, [r5, #0]
 800c612:	4287      	cmp	r7, r0
 800c614:	d16d      	bne.n	800c6f2 <udp_bind+0x22a>
            return ERR_USE;
 800c616:	f06f 0007 	mvn.w	r0, #7
 800c61a:	e7f3      	b.n	800c604 <udp_bind+0x13c>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c61c:	681f      	ldr	r7, [r3, #0]
 800c61e:	6828      	ldr	r0, [r5, #0]
 800c620:	4287      	cmp	r7, r0
 800c622:	d005      	beq.n	800c630 <udp_bind+0x168>
 800c624:	2000      	movs	r0, #0
          if ((ipcb->local_port == port) &&
 800c626:	2800      	cmp	r0, #0
 800c628:	d063      	beq.n	800c6f2 <udp_bind+0x22a>
            return ERR_USE;
 800c62a:	f06f 0007 	mvn.w	r0, #7
 800c62e:	e7e9      	b.n	800c604 <udp_bind+0x13c>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c630:	685f      	ldr	r7, [r3, #4]
 800c632:	6868      	ldr	r0, [r5, #4]
 800c634:	4287      	cmp	r7, r0
 800c636:	d001      	beq.n	800c63c <udp_bind+0x174>
 800c638:	2000      	movs	r0, #0
 800c63a:	e7f4      	b.n	800c626 <udp_bind+0x15e>
 800c63c:	689f      	ldr	r7, [r3, #8]
 800c63e:	68a8      	ldr	r0, [r5, #8]
 800c640:	4287      	cmp	r7, r0
 800c642:	d001      	beq.n	800c648 <udp_bind+0x180>
 800c644:	2000      	movs	r0, #0
 800c646:	e7ee      	b.n	800c626 <udp_bind+0x15e>
 800c648:	68df      	ldr	r7, [r3, #12]
 800c64a:	68e8      	ldr	r0, [r5, #12]
 800c64c:	4287      	cmp	r7, r0
 800c64e:	d001      	beq.n	800c654 <udp_bind+0x18c>
 800c650:	2000      	movs	r0, #0
 800c652:	e7e8      	b.n	800c626 <udp_bind+0x15e>
 800c654:	7c1f      	ldrb	r7, [r3, #16]
 800c656:	7c28      	ldrb	r0, [r5, #16]
 800c658:	4287      	cmp	r7, r0
 800c65a:	d001      	beq.n	800c660 <udp_bind+0x198>
 800c65c:	2000      	movs	r0, #0
 800c65e:	e7e2      	b.n	800c626 <udp_bind+0x15e>
 800c660:	2001      	movs	r0, #1
 800c662:	e7e0      	b.n	800c626 <udp_bind+0x15e>
 800c664:	b14d      	cbz	r5, 800c67a <udp_bind+0x1b2>
 800c666:	6829      	ldr	r1, [r5, #0]
 800c668:	b949      	cbnz	r1, 800c67e <udp_bind+0x1b6>
 800c66a:	6869      	ldr	r1, [r5, #4]
 800c66c:	b969      	cbnz	r1, 800c68a <udp_bind+0x1c2>
 800c66e:	68a9      	ldr	r1, [r5, #8]
 800c670:	b969      	cbnz	r1, 800c68e <udp_bind+0x1c6>
 800c672:	68e9      	ldr	r1, [r5, #12]
 800c674:	b169      	cbz	r1, 800c692 <udp_bind+0x1ca>
 800c676:	2100      	movs	r1, #0
 800c678:	e002      	b.n	800c680 <udp_bind+0x1b8>
 800c67a:	2101      	movs	r1, #1
 800c67c:	e000      	b.n	800c680 <udp_bind+0x1b8>
 800c67e:	2100      	movs	r1, #0
 800c680:	2900      	cmp	r1, #0
 800c682:	d042      	beq.n	800c70a <udp_bind+0x242>
            return ERR_USE;
 800c684:	f06f 0007 	mvn.w	r0, #7
 800c688:	e7bc      	b.n	800c604 <udp_bind+0x13c>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c68a:	2100      	movs	r1, #0
 800c68c:	e7f8      	b.n	800c680 <udp_bind+0x1b8>
 800c68e:	2100      	movs	r1, #0
 800c690:	e7f6      	b.n	800c680 <udp_bind+0x1b8>
 800c692:	2101      	movs	r1, #1
 800c694:	e7f4      	b.n	800c680 <udp_bind+0x1b8>
 800c696:	2101      	movs	r1, #1
 800c698:	e035      	b.n	800c706 <udp_bind+0x23e>
 800c69a:	2100      	movs	r1, #0
 800c69c:	e033      	b.n	800c706 <udp_bind+0x23e>
              ip_addr_isany(&ipcb->local_ip))) {
 800c69e:	b14b      	cbz	r3, 800c6b4 <udp_bind+0x1ec>
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	b94a      	cbnz	r2, 800c6b8 <udp_bind+0x1f0>
 800c6a4:	685a      	ldr	r2, [r3, #4]
 800c6a6:	b962      	cbnz	r2, 800c6c2 <udp_bind+0x1fa>
 800c6a8:	689a      	ldr	r2, [r3, #8]
 800c6aa:	b962      	cbnz	r2, 800c6c6 <udp_bind+0x1fe>
 800c6ac:	68da      	ldr	r2, [r3, #12]
 800c6ae:	b162      	cbz	r2, 800c6ca <udp_bind+0x202>
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	e002      	b.n	800c6ba <udp_bind+0x1f2>
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	e000      	b.n	800c6ba <udp_bind+0x1f2>
 800c6b8:	2200      	movs	r2, #0
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c6ba:	b16a      	cbz	r2, 800c6d8 <udp_bind+0x210>
            return ERR_USE;
 800c6bc:	f06f 0007 	mvn.w	r0, #7
 800c6c0:	e7a0      	b.n	800c604 <udp_bind+0x13c>
              ip_addr_isany(&ipcb->local_ip))) {
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	e7f9      	b.n	800c6ba <udp_bind+0x1f2>
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	e7f7      	b.n	800c6ba <udp_bind+0x1f2>
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	e7f5      	b.n	800c6ba <udp_bind+0x1f2>
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	e000      	b.n	800c6d4 <udp_bind+0x20c>
 800c6d2:	2200      	movs	r2, #0
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c6d4:	2a00      	cmp	r2, #0
 800c6d6:	d156      	bne.n	800c786 <udp_bind+0x2be>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f43f af77 	beq.w	800c5ce <udp_bind+0x106>
      if (pcb != ipcb) {
 800c6e0:	42a3      	cmp	r3, r4
 800c6e2:	d0f9      	beq.n	800c6d8 <udp_bind+0x210>
          if ((ipcb->local_port == port) &&
 800c6e4:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800c6e6:	42b2      	cmp	r2, r6
 800c6e8:	d1f6      	bne.n	800c6d8 <udp_bind+0x210>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c6ea:	7d1a      	ldrb	r2, [r3, #20]
 800c6ec:	7d29      	ldrb	r1, [r5, #20]
          if ((ipcb->local_port == port) &&
 800c6ee:	428a      	cmp	r2, r1
 800c6f0:	d08b      	beq.n	800c60a <udp_bind+0x142>
 800c6f2:	2d00      	cmp	r5, #0
 800c6f4:	d03e      	beq.n	800c774 <udp_bind+0x2ac>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c6f6:	2906      	cmp	r1, #6
 800c6f8:	d0b4      	beq.n	800c664 <udp_bind+0x19c>
 800c6fa:	2d00      	cmp	r5, #0
 800c6fc:	d0cb      	beq.n	800c696 <udp_bind+0x1ce>
 800c6fe:	6829      	ldr	r1, [r5, #0]
 800c700:	2900      	cmp	r1, #0
 800c702:	d1ca      	bne.n	800c69a <udp_bind+0x1d2>
 800c704:	2101      	movs	r1, #1
 800c706:	2900      	cmp	r1, #0
 800c708:	d137      	bne.n	800c77a <udp_bind+0x2b2>
          if ((ipcb->local_port == port) &&
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d038      	beq.n	800c780 <udp_bind+0x2b8>
              ip_addr_isany(&ipcb->local_ip))) {
 800c70e:	2a06      	cmp	r2, #6
 800c710:	d0c5      	beq.n	800c69e <udp_bind+0x1d6>
 800c712:	2b00      	cmp	r3, #0
 800c714:	d0db      	beq.n	800c6ce <udp_bind+0x206>
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	2a00      	cmp	r2, #0
 800c71a:	d1da      	bne.n	800c6d2 <udp_bind+0x20a>
 800c71c:	2201      	movs	r2, #1
 800c71e:	e7d9      	b.n	800c6d4 <udp_bind+0x20c>
 800c720:	20007b38 	.word	0x20007b38
 800c724:	080178d4 	.word	0x080178d4
 800c728:	08016e58 	.word	0x08016e58
 800c72c:	08016f24 	.word	0x08016f24
 800c730:	08015418 	.word	0x08015418
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c734:	462b      	mov	r3, r5
 800c736:	b175      	cbz	r5, 800c756 <udp_bind+0x28e>
 800c738:	682a      	ldr	r2, [r5, #0]
 800c73a:	6022      	str	r2, [r4, #0]
 800c73c:	b16b      	cbz	r3, 800c75a <udp_bind+0x292>
 800c73e:	686a      	ldr	r2, [r5, #4]
 800c740:	6062      	str	r2, [r4, #4]
 800c742:	b163      	cbz	r3, 800c75e <udp_bind+0x296>
 800c744:	68aa      	ldr	r2, [r5, #8]
 800c746:	60a2      	str	r2, [r4, #8]
 800c748:	b15b      	cbz	r3, 800c762 <udp_bind+0x29a>
 800c74a:	68ea      	ldr	r2, [r5, #12]
 800c74c:	60e2      	str	r2, [r4, #12]
 800c74e:	b153      	cbz	r3, 800c766 <udp_bind+0x29e>
 800c750:	7c2b      	ldrb	r3, [r5, #16]
 800c752:	7423      	strb	r3, [r4, #16]
 800c754:	e74d      	b.n	800c5f2 <udp_bind+0x12a>
 800c756:	2200      	movs	r2, #0
 800c758:	e7ef      	b.n	800c73a <udp_bind+0x272>
 800c75a:	2200      	movs	r2, #0
 800c75c:	e7f0      	b.n	800c740 <udp_bind+0x278>
 800c75e:	2200      	movs	r2, #0
 800c760:	e7f1      	b.n	800c746 <udp_bind+0x27e>
 800c762:	2200      	movs	r2, #0
 800c764:	e7f2      	b.n	800c74c <udp_bind+0x284>
 800c766:	2300      	movs	r3, #0
 800c768:	e7f3      	b.n	800c752 <udp_bind+0x28a>
 800c76a:	2300      	movs	r3, #0
 800c76c:	e73b      	b.n	800c5e6 <udp_bind+0x11e>
      return ERR_USE;
 800c76e:	f06f 0007 	mvn.w	r0, #7
 800c772:	e747      	b.n	800c604 <udp_bind+0x13c>
            return ERR_USE;
 800c774:	f06f 0007 	mvn.w	r0, #7
 800c778:	e744      	b.n	800c604 <udp_bind+0x13c>
 800c77a:	f06f 0007 	mvn.w	r0, #7
 800c77e:	e741      	b.n	800c604 <udp_bind+0x13c>
 800c780:	f06f 0007 	mvn.w	r0, #7
 800c784:	e73e      	b.n	800c604 <udp_bind+0x13c>
 800c786:	f06f 0007 	mvn.w	r0, #7
 800c78a:	e73b      	b.n	800c604 <udp_bind+0x13c>

0800c78c <udp_sendto_if_src>:
{
 800c78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c790:	b085      	sub	sp, #20
 800c792:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800c796:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c79a:	2800      	cmp	r0, #0
 800c79c:	f000 8086 	beq.w	800c8ac <udp_sendto_if_src+0x120>
 800c7a0:	460d      	mov	r5, r1
 800c7a2:	4614      	mov	r4, r2
 800c7a4:	469b      	mov	fp, r3
 800c7a6:	4606      	mov	r6, r0
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c7a8:	2900      	cmp	r1, #0
 800c7aa:	f000 8089 	beq.w	800c8c0 <udp_sendto_if_src+0x134>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c7ae:	2a00      	cmp	r2, #0
 800c7b0:	f000 8090 	beq.w	800c8d4 <udp_sendto_if_src+0x148>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c7b4:	f1b9 0f00 	cmp.w	r9, #0
 800c7b8:	f000 8096 	beq.w	800c8e8 <udp_sendto_if_src+0x15c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c7bc:	f1ba 0f00 	cmp.w	sl, #0
 800c7c0:	f000 809c 	beq.w	800c8fc <udp_sendto_if_src+0x170>
  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800c7c4:	7d03      	ldrb	r3, [r0, #20]
 800c7c6:	2b2e      	cmp	r3, #46	; 0x2e
 800c7c8:	d008      	beq.n	800c7dc <udp_sendto_if_src+0x50>
 800c7ca:	f899 2014 	ldrb.w	r2, [r9, #20]
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	f040 80dd 	bne.w	800c98e <udp_sendto_if_src+0x202>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800c7d4:	7d22      	ldrb	r2, [r4, #20]
  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800c7d6:	4293      	cmp	r3, r2
 800c7d8:	f040 80dc 	bne.w	800c994 <udp_sendto_if_src+0x208>
  if (pcb->local_port == 0) {
 800c7dc:	8f72      	ldrh	r2, [r6, #58]	; 0x3a
 800c7de:	2a00      	cmp	r2, #0
 800c7e0:	f000 8096 	beq.w	800c910 <udp_sendto_if_src+0x184>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c7e4:	892a      	ldrh	r2, [r5, #8]
 800c7e6:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	f200 80d5 	bhi.w	800c99a <udp_sendto_if_src+0x20e>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c7f0:	2108      	movs	r1, #8
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	f7fa ff7d 	bl	80076f2 <pbuf_add_header>
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	f040 8092 	bne.w	800c922 <udp_sendto_if_src+0x196>
    q = p;
 800c7fe:	462f      	mov	r7, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c800:	897b      	ldrh	r3, [r7, #10]
 800c802:	2b07      	cmp	r3, #7
 800c804:	f240 809e 	bls.w	800c944 <udp_sendto_if_src+0x1b8>
  udphdr = (struct udp_hdr *)q->payload;
 800c808:	f8d7 8004 	ldr.w	r8, [r7, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800c80c:	8f70      	ldrh	r0, [r6, #58]	; 0x3a
 800c80e:	f7f9 fcaf 	bl	8006170 <lwip_htons>
 800c812:	f8a8 0000 	strh.w	r0, [r8]
  udphdr->dest = lwip_htons(dst_port);
 800c816:	4658      	mov	r0, fp
 800c818:	f7f9 fcaa 	bl	8006170 <lwip_htons>
 800c81c:	f8a8 0002 	strh.w	r0, [r8, #2]
  udphdr->chksum = 0x0000;
 800c820:	2300      	movs	r3, #0
 800c822:	f888 3006 	strb.w	r3, [r8, #6]
 800c826:	f888 3007 	strb.w	r3, [r8, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 800c82a:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 800c82e:	f013 0f08 	tst.w	r3, #8
 800c832:	d00f      	beq.n	800c854 <udp_sendto_if_src+0xc8>
 800c834:	7d23      	ldrb	r3, [r4, #20]
 800c836:	2b06      	cmp	r3, #6
 800c838:	f000 808c 	beq.w	800c954 <udp_sendto_if_src+0x1c8>
 800c83c:	6823      	ldr	r3, [r4, #0]
 800c83e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c842:	2be0      	cmp	r3, #224	; 0xe0
 800c844:	bf14      	ite	ne
 800c846:	2300      	movne	r3, #0
 800c848:	2301      	moveq	r3, #1
 800c84a:	b11b      	cbz	r3, 800c854 <udp_sendto_if_src+0xc8>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 800c84c:	7b7b      	ldrb	r3, [r7, #13]
 800c84e:	f043 0304 	orr.w	r3, r3, #4
 800c852:	737b      	strb	r3, [r7, #13]
    udphdr->len = lwip_htons(q->tot_len);
 800c854:	8938      	ldrh	r0, [r7, #8]
 800c856:	f7f9 fc8b 	bl	8006170 <lwip_htons>
 800c85a:	f8a8 0004 	strh.w	r0, [r8, #4]
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 800c85e:	7d23      	ldrb	r3, [r4, #20]
 800c860:	2b06      	cmp	r3, #6
 800c862:	d07d      	beq.n	800c960 <udp_sendto_if_src+0x1d4>
 800c864:	6823      	ldr	r3, [r4, #0]
 800c866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c86a:	2be0      	cmp	r3, #224	; 0xe0
 800c86c:	bf14      	ite	ne
 800c86e:	2300      	movne	r3, #0
 800c870:	2301      	moveq	r3, #1
 800c872:	2b00      	cmp	r3, #0
 800c874:	d07a      	beq.n	800c96c <udp_sendto_if_src+0x1e0>
 800c876:	f896 3045 	ldrb.w	r3, [r6, #69]	; 0x45
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c87a:	7d22      	ldrb	r2, [r4, #20]
 800c87c:	2a06      	cmp	r2, #6
 800c87e:	d078      	beq.n	800c972 <udp_sendto_if_src+0x1e6>
 800c880:	f8cd a008 	str.w	sl, [sp, #8]
 800c884:	2211      	movs	r2, #17
 800c886:	9201      	str	r2, [sp, #4]
 800c888:	f896 2032 	ldrb.w	r2, [r6, #50]	; 0x32
 800c88c:	9200      	str	r2, [sp, #0]
 800c88e:	4622      	mov	r2, r4
 800c890:	4649      	mov	r1, r9
 800c892:	4638      	mov	r0, r7
 800c894:	f002 ffcf 	bl	800f836 <ip4_output_if_src>
 800c898:	4680      	mov	r8, r0
  if (q != p) {
 800c89a:	42af      	cmp	r7, r5
 800c89c:	d002      	beq.n	800c8a4 <udp_sendto_if_src+0x118>
    pbuf_free(q);
 800c89e:	4638      	mov	r0, r7
 800c8a0:	f7fa ff78 	bl	8007794 <pbuf_free>
}
 800c8a4:	4640      	mov	r0, r8
 800c8a6:	b005      	add	sp, #20
 800c8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c8ac:	4b3e      	ldr	r3, [pc, #248]	; (800c9a8 <udp_sendto_if_src+0x21c>)
 800c8ae:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c8b2:	493e      	ldr	r1, [pc, #248]	; (800c9ac <udp_sendto_if_src+0x220>)
 800c8b4:	483e      	ldr	r0, [pc, #248]	; (800c9b0 <udp_sendto_if_src+0x224>)
 800c8b6:	f007 fcbd 	bl	8014234 <iprintf>
 800c8ba:	f06f 080f 	mvn.w	r8, #15
 800c8be:	e7f1      	b.n	800c8a4 <udp_sendto_if_src+0x118>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c8c0:	4b39      	ldr	r3, [pc, #228]	; (800c9a8 <udp_sendto_if_src+0x21c>)
 800c8c2:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c8c6:	493b      	ldr	r1, [pc, #236]	; (800c9b4 <udp_sendto_if_src+0x228>)
 800c8c8:	4839      	ldr	r0, [pc, #228]	; (800c9b0 <udp_sendto_if_src+0x224>)
 800c8ca:	f007 fcb3 	bl	8014234 <iprintf>
 800c8ce:	f06f 080f 	mvn.w	r8, #15
 800c8d2:	e7e7      	b.n	800c8a4 <udp_sendto_if_src+0x118>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c8d4:	4b34      	ldr	r3, [pc, #208]	; (800c9a8 <udp_sendto_if_src+0x21c>)
 800c8d6:	f240 22d3 	movw	r2, #723	; 0x2d3
 800c8da:	4937      	ldr	r1, [pc, #220]	; (800c9b8 <udp_sendto_if_src+0x22c>)
 800c8dc:	4834      	ldr	r0, [pc, #208]	; (800c9b0 <udp_sendto_if_src+0x224>)
 800c8de:	f007 fca9 	bl	8014234 <iprintf>
 800c8e2:	f06f 080f 	mvn.w	r8, #15
 800c8e6:	e7dd      	b.n	800c8a4 <udp_sendto_if_src+0x118>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c8e8:	4b2f      	ldr	r3, [pc, #188]	; (800c9a8 <udp_sendto_if_src+0x21c>)
 800c8ea:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c8ee:	4933      	ldr	r1, [pc, #204]	; (800c9bc <udp_sendto_if_src+0x230>)
 800c8f0:	482f      	ldr	r0, [pc, #188]	; (800c9b0 <udp_sendto_if_src+0x224>)
 800c8f2:	f007 fc9f 	bl	8014234 <iprintf>
 800c8f6:	f06f 080f 	mvn.w	r8, #15
 800c8fa:	e7d3      	b.n	800c8a4 <udp_sendto_if_src+0x118>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c8fc:	4b2a      	ldr	r3, [pc, #168]	; (800c9a8 <udp_sendto_if_src+0x21c>)
 800c8fe:	f240 22d5 	movw	r2, #725	; 0x2d5
 800c902:	492f      	ldr	r1, [pc, #188]	; (800c9c0 <udp_sendto_if_src+0x234>)
 800c904:	482a      	ldr	r0, [pc, #168]	; (800c9b0 <udp_sendto_if_src+0x224>)
 800c906:	f007 fc95 	bl	8014234 <iprintf>
 800c90a:	f06f 080f 	mvn.w	r8, #15
 800c90e:	e7c9      	b.n	800c8a4 <udp_sendto_if_src+0x118>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c910:	4631      	mov	r1, r6
 800c912:	4630      	mov	r0, r6
 800c914:	f7ff fdd8 	bl	800c4c8 <udp_bind>
    if (err != ERR_OK) {
 800c918:	4680      	mov	r8, r0
 800c91a:	2800      	cmp	r0, #0
 800c91c:	f43f af62 	beq.w	800c7e4 <udp_sendto_if_src+0x58>
 800c920:	e7c0      	b.n	800c8a4 <udp_sendto_if_src+0x118>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c922:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c926:	2108      	movs	r1, #8
 800c928:	2036      	movs	r0, #54	; 0x36
 800c92a:	f7fa ff95 	bl	8007858 <pbuf_alloc>
    if (q == NULL) {
 800c92e:	4607      	mov	r7, r0
 800c930:	2800      	cmp	r0, #0
 800c932:	d035      	beq.n	800c9a0 <udp_sendto_if_src+0x214>
    if (p->tot_len != 0) {
 800c934:	892b      	ldrh	r3, [r5, #8]
 800c936:	2b00      	cmp	r3, #0
 800c938:	f43f af62 	beq.w	800c800 <udp_sendto_if_src+0x74>
      pbuf_chain(q, p);
 800c93c:	4629      	mov	r1, r5
 800c93e:	f7fb f8e7 	bl	8007b10 <pbuf_chain>
 800c942:	e75d      	b.n	800c800 <udp_sendto_if_src+0x74>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c944:	4b18      	ldr	r3, [pc, #96]	; (800c9a8 <udp_sendto_if_src+0x21c>)
 800c946:	f240 320d 	movw	r2, #781	; 0x30d
 800c94a:	491e      	ldr	r1, [pc, #120]	; (800c9c4 <udp_sendto_if_src+0x238>)
 800c94c:	4818      	ldr	r0, [pc, #96]	; (800c9b0 <udp_sendto_if_src+0x224>)
 800c94e:	f007 fc71 	bl	8014234 <iprintf>
 800c952:	e759      	b.n	800c808 <udp_sendto_if_src+0x7c>
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 800c954:	7823      	ldrb	r3, [r4, #0]
 800c956:	2bff      	cmp	r3, #255	; 0xff
 800c958:	bf14      	ite	ne
 800c95a:	2300      	movne	r3, #0
 800c95c:	2301      	moveq	r3, #1
 800c95e:	e774      	b.n	800c84a <udp_sendto_if_src+0xbe>
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 800c960:	7823      	ldrb	r3, [r4, #0]
 800c962:	2bff      	cmp	r3, #255	; 0xff
 800c964:	bf14      	ite	ne
 800c966:	2300      	movne	r3, #0
 800c968:	2301      	moveq	r3, #1
 800c96a:	e782      	b.n	800c872 <udp_sendto_if_src+0xe6>
 800c96c:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
 800c970:	e783      	b.n	800c87a <udp_sendto_if_src+0xee>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c972:	f8cd a008 	str.w	sl, [sp, #8]
 800c976:	2211      	movs	r2, #17
 800c978:	9201      	str	r2, [sp, #4]
 800c97a:	f896 2032 	ldrb.w	r2, [r6, #50]	; 0x32
 800c97e:	9200      	str	r2, [sp, #0]
 800c980:	4622      	mov	r2, r4
 800c982:	4649      	mov	r1, r9
 800c984:	4638      	mov	r0, r7
 800c986:	f004 fa41 	bl	8010e0c <ip6_output_if_src>
 800c98a:	4680      	mov	r8, r0
 800c98c:	e785      	b.n	800c89a <udp_sendto_if_src+0x10e>
    return ERR_VAL;
 800c98e:	f06f 0805 	mvn.w	r8, #5
 800c992:	e787      	b.n	800c8a4 <udp_sendto_if_src+0x118>
 800c994:	f06f 0805 	mvn.w	r8, #5
 800c998:	e784      	b.n	800c8a4 <udp_sendto_if_src+0x118>
    return ERR_MEM;
 800c99a:	f04f 38ff 	mov.w	r8, #4294967295
 800c99e:	e781      	b.n	800c8a4 <udp_sendto_if_src+0x118>
      return ERR_MEM;
 800c9a0:	f04f 38ff 	mov.w	r8, #4294967295
 800c9a4:	e77e      	b.n	800c8a4 <udp_sendto_if_src+0x118>
 800c9a6:	bf00      	nop
 800c9a8:	08016e58 	.word	0x08016e58
 800c9ac:	08016f3c 	.word	0x08016f3c
 800c9b0:	08015418 	.word	0x08015418
 800c9b4:	08016f5c 	.word	0x08016f5c
 800c9b8:	08016f7c 	.word	0x08016f7c
 800c9bc:	08016fa0 	.word	0x08016fa0
 800c9c0:	08016fc4 	.word	0x08016fc4
 800c9c4:	08016fe8 	.word	0x08016fe8

0800c9c8 <udp_sendto_if>:
{
 800c9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9cc:	b082      	sub	sp, #8
 800c9ce:	f8dd 8020 	ldr.w	r8, [sp, #32]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c9d2:	b300      	cbz	r0, 800ca16 <udp_sendto_if+0x4e>
 800c9d4:	460e      	mov	r6, r1
 800c9d6:	4614      	mov	r4, r2
 800c9d8:	461f      	mov	r7, r3
 800c9da:	4605      	mov	r5, r0
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c9dc:	b329      	cbz	r1, 800ca2a <udp_sendto_if+0x62>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c9de:	b372      	cbz	r2, 800ca3e <udp_sendto_if+0x76>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c9e0:	f1b8 0f00 	cmp.w	r8, #0
 800c9e4:	d035      	beq.n	800ca52 <udp_sendto_if+0x8a>
  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800c9e6:	7d02      	ldrb	r2, [r0, #20]
 800c9e8:	2a2e      	cmp	r2, #46	; 0x2e
 800c9ea:	d002      	beq.n	800c9f2 <udp_sendto_if+0x2a>
 800c9ec:	7d23      	ldrb	r3, [r4, #20]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d164      	bne.n	800cabc <udp_sendto_if+0xf4>
  if (IP_IS_V6(dst_ip)) {
 800c9f2:	7d23      	ldrb	r3, [r4, #20]
 800c9f4:	2b06      	cmp	r3, #6
 800c9f6:	d036      	beq.n	800ca66 <udp_sendto_if+0x9e>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c9f8:	2d00      	cmp	r5, #0
 800c9fa:	d051      	beq.n	800caa0 <udp_sendto_if+0xd8>
 800c9fc:	682b      	ldr	r3, [r5, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d04e      	beq.n	800caa0 <udp_sendto_if+0xd8>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800ca02:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ca06:	2ae0      	cmp	r2, #224	; 0xe0
 800ca08:	d04a      	beq.n	800caa0 <udp_sendto_if+0xd8>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800ca0a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d15a      	bne.n	800cac8 <udp_sendto_if+0x100>
      src_ip = &pcb->local_ip;
 800ca12:	462b      	mov	r3, r5
 800ca14:	e046      	b.n	800caa4 <udp_sendto_if+0xdc>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca16:	4b2e      	ldr	r3, [pc, #184]	; (800cad0 <udp_sendto_if+0x108>)
 800ca18:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ca1c:	492d      	ldr	r1, [pc, #180]	; (800cad4 <udp_sendto_if+0x10c>)
 800ca1e:	482e      	ldr	r0, [pc, #184]	; (800cad8 <udp_sendto_if+0x110>)
 800ca20:	f007 fc08 	bl	8014234 <iprintf>
 800ca24:	f06f 000f 	mvn.w	r0, #15
 800ca28:	e045      	b.n	800cab6 <udp_sendto_if+0xee>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800ca2a:	4b29      	ldr	r3, [pc, #164]	; (800cad0 <udp_sendto_if+0x108>)
 800ca2c:	f240 2281 	movw	r2, #641	; 0x281
 800ca30:	492a      	ldr	r1, [pc, #168]	; (800cadc <udp_sendto_if+0x114>)
 800ca32:	4829      	ldr	r0, [pc, #164]	; (800cad8 <udp_sendto_if+0x110>)
 800ca34:	f007 fbfe 	bl	8014234 <iprintf>
 800ca38:	f06f 000f 	mvn.w	r0, #15
 800ca3c:	e03b      	b.n	800cab6 <udp_sendto_if+0xee>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ca3e:	4b24      	ldr	r3, [pc, #144]	; (800cad0 <udp_sendto_if+0x108>)
 800ca40:	f240 2282 	movw	r2, #642	; 0x282
 800ca44:	4926      	ldr	r1, [pc, #152]	; (800cae0 <udp_sendto_if+0x118>)
 800ca46:	4824      	ldr	r0, [pc, #144]	; (800cad8 <udp_sendto_if+0x110>)
 800ca48:	f007 fbf4 	bl	8014234 <iprintf>
 800ca4c:	f06f 000f 	mvn.w	r0, #15
 800ca50:	e031      	b.n	800cab6 <udp_sendto_if+0xee>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800ca52:	4b1f      	ldr	r3, [pc, #124]	; (800cad0 <udp_sendto_if+0x108>)
 800ca54:	f240 2283 	movw	r2, #643	; 0x283
 800ca58:	4922      	ldr	r1, [pc, #136]	; (800cae4 <udp_sendto_if+0x11c>)
 800ca5a:	481f      	ldr	r0, [pc, #124]	; (800cad8 <udp_sendto_if+0x110>)
 800ca5c:	f007 fbea 	bl	8014234 <iprintf>
 800ca60:	f06f 000f 	mvn.w	r0, #15
 800ca64:	e027      	b.n	800cab6 <udp_sendto_if+0xee>
    if (ip6_addr_isany(ip_2_ip6(&pcb->local_ip)) ||
 800ca66:	b155      	cbz	r5, 800ca7e <udp_sendto_if+0xb6>
 800ca68:	682b      	ldr	r3, [r5, #0]
 800ca6a:	b92b      	cbnz	r3, 800ca78 <udp_sendto_if+0xb0>
 800ca6c:	686a      	ldr	r2, [r5, #4]
 800ca6e:	b91a      	cbnz	r2, 800ca78 <udp_sendto_if+0xb0>
 800ca70:	68aa      	ldr	r2, [r5, #8]
 800ca72:	b90a      	cbnz	r2, 800ca78 <udp_sendto_if+0xb0>
 800ca74:	68ea      	ldr	r2, [r5, #12]
 800ca76:	b112      	cbz	r2, 800ca7e <udp_sendto_if+0xb6>
        ip6_addr_ismulticast(ip_2_ip6(&pcb->local_ip))) {
 800ca78:	b2db      	uxtb	r3, r3
    if (ip6_addr_isany(ip_2_ip6(&pcb->local_ip)) ||
 800ca7a:	2bff      	cmp	r3, #255	; 0xff
 800ca7c:	d108      	bne.n	800ca90 <udp_sendto_if+0xc8>
      src_ip = ip6_select_source_address(netif, ip_2_ip6(dst_ip));
 800ca7e:	4621      	mov	r1, r4
 800ca80:	4640      	mov	r0, r8
 800ca82:	f003 fe59 	bl	8010738 <ip6_select_source_address>
      if (src_ip == NULL) {
 800ca86:	4603      	mov	r3, r0
 800ca88:	b960      	cbnz	r0, 800caa4 <udp_sendto_if+0xdc>
        return ERR_RTE;
 800ca8a:	f06f 0003 	mvn.w	r0, #3
 800ca8e:	e012      	b.n	800cab6 <udp_sendto_if+0xee>
      if (netif_get_ip6_addr_match(netif, ip_2_ip6(&pcb->local_ip)) < 0) {
 800ca90:	4629      	mov	r1, r5
 800ca92:	4640      	mov	r0, r8
 800ca94:	f7fa fc92 	bl	80073bc <netif_get_ip6_addr_match>
 800ca98:	2800      	cmp	r0, #0
 800ca9a:	db12      	blt.n	800cac2 <udp_sendto_if+0xfa>
      src_ip = &pcb->local_ip;
 800ca9c:	462b      	mov	r3, r5
 800ca9e:	e001      	b.n	800caa4 <udp_sendto_if+0xdc>
      src_ip = netif_ip_addr4(netif);
 800caa0:	f108 0304 	add.w	r3, r8, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800caa4:	9301      	str	r3, [sp, #4]
 800caa6:	f8cd 8000 	str.w	r8, [sp]
 800caaa:	463b      	mov	r3, r7
 800caac:	4622      	mov	r2, r4
 800caae:	4631      	mov	r1, r6
 800cab0:	4628      	mov	r0, r5
 800cab2:	f7ff fe6b 	bl	800c78c <udp_sendto_if_src>
}
 800cab6:	b002      	add	sp, #8
 800cab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_VAL;
 800cabc:	f06f 0005 	mvn.w	r0, #5
 800cac0:	e7f9      	b.n	800cab6 <udp_sendto_if+0xee>
        return ERR_RTE;
 800cac2:	f06f 0003 	mvn.w	r0, #3
 800cac6:	e7f6      	b.n	800cab6 <udp_sendto_if+0xee>
        return ERR_RTE;
 800cac8:	f06f 0003 	mvn.w	r0, #3
 800cacc:	e7f3      	b.n	800cab6 <udp_sendto_if+0xee>
 800cace:	bf00      	nop
 800cad0:	08016e58 	.word	0x08016e58
 800cad4:	08017018 	.word	0x08017018
 800cad8:	08015418 	.word	0x08015418
 800cadc:	08017034 	.word	0x08017034
 800cae0:	08017050 	.word	0x08017050
 800cae4:	08017070 	.word	0x08017070

0800cae8 <udp_sendto>:
{
 800cae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800caea:	b083      	sub	sp, #12
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800caec:	2800      	cmp	r0, #0
 800caee:	d030      	beq.n	800cb52 <udp_sendto+0x6a>
 800caf0:	460d      	mov	r5, r1
 800caf2:	4614      	mov	r4, r2
 800caf4:	461f      	mov	r7, r3
 800caf6:	4606      	mov	r6, r0
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800caf8:	2900      	cmp	r1, #0
 800cafa:	d034      	beq.n	800cb66 <udp_sendto+0x7e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cafc:	2a00      	cmp	r2, #0
 800cafe:	d03c      	beq.n	800cb7a <udp_sendto+0x92>
  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800cb00:	7d03      	ldrb	r3, [r0, #20]
 800cb02:	2b2e      	cmp	r3, #46	; 0x2e
 800cb04:	d002      	beq.n	800cb0c <udp_sendto+0x24>
 800cb06:	7d12      	ldrb	r2, [r2, #20]
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d161      	bne.n	800cbd0 <udp_sendto+0xe8>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800cb0c:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d13c      	bne.n	800cb8e <udp_sendto+0xa6>
    if (ip_addr_ismulticast(dst_ip)) {
 800cb14:	7d23      	ldrb	r3, [r4, #20]
 800cb16:	2b06      	cmp	r3, #6
 800cb18:	d03c      	beq.n	800cb94 <udp_sendto+0xac>
 800cb1a:	6823      	ldr	r3, [r4, #0]
 800cb1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb20:	2be0      	cmp	r3, #224	; 0xe0
 800cb22:	bf14      	ite	ne
 800cb24:	2300      	movne	r3, #0
 800cb26:	2301      	moveq	r3, #1
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d03c      	beq.n	800cba6 <udp_sendto+0xbe>
      if (pcb->mcast_ifindex != NETIF_NO_INDEX) {
 800cb2c:	f896 0044 	ldrb.w	r0, [r6, #68]	; 0x44
 800cb30:	2800      	cmp	r0, #0
 800cb32:	d135      	bne.n	800cba0 <udp_sendto+0xb8>
        if (IP_IS_V4(dst_ip))
 800cb34:	7d23      	ldrb	r3, [r4, #20]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d135      	bne.n	800cba6 <udp_sendto+0xbe>
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 800cb3a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d032      	beq.n	800cba6 <udp_sendto+0xbe>
              !ip4_addr_cmp(&pcb->mcast_ip4, IP4_ADDR_BROADCAST)) {
 800cb40:	4a26      	ldr	r2, [pc, #152]	; (800cbdc <udp_sendto+0xf4>)
 800cb42:	6812      	ldr	r2, [r2, #0]
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d02e      	beq.n	800cba6 <udp_sendto+0xbe>
            netif = ip4_route_src(ip_2_ip4(&pcb->local_ip), &pcb->mcast_ip4);
 800cb48:	f106 0040 	add.w	r0, r6, #64	; 0x40
 800cb4c:	f002 fc30 	bl	800f3b0 <ip4_route>
 800cb50:	e028      	b.n	800cba4 <udp_sendto+0xbc>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb52:	4b23      	ldr	r3, [pc, #140]	; (800cbe0 <udp_sendto+0xf8>)
 800cb54:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cb58:	4922      	ldr	r1, [pc, #136]	; (800cbe4 <udp_sendto+0xfc>)
 800cb5a:	4823      	ldr	r0, [pc, #140]	; (800cbe8 <udp_sendto+0x100>)
 800cb5c:	f007 fb6a 	bl	8014234 <iprintf>
 800cb60:	f06f 000f 	mvn.w	r0, #15
 800cb64:	e02d      	b.n	800cbc2 <udp_sendto+0xda>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800cb66:	4b1e      	ldr	r3, [pc, #120]	; (800cbe0 <udp_sendto+0xf8>)
 800cb68:	f240 2219 	movw	r2, #537	; 0x219
 800cb6c:	491f      	ldr	r1, [pc, #124]	; (800cbec <udp_sendto+0x104>)
 800cb6e:	481e      	ldr	r0, [pc, #120]	; (800cbe8 <udp_sendto+0x100>)
 800cb70:	f007 fb60 	bl	8014234 <iprintf>
 800cb74:	f06f 000f 	mvn.w	r0, #15
 800cb78:	e023      	b.n	800cbc2 <udp_sendto+0xda>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cb7a:	4b19      	ldr	r3, [pc, #100]	; (800cbe0 <udp_sendto+0xf8>)
 800cb7c:	f240 221a 	movw	r2, #538	; 0x21a
 800cb80:	491b      	ldr	r1, [pc, #108]	; (800cbf0 <udp_sendto+0x108>)
 800cb82:	4819      	ldr	r0, [pc, #100]	; (800cbe8 <udp_sendto+0x100>)
 800cb84:	f007 fb56 	bl	8014234 <iprintf>
 800cb88:	f06f 000f 	mvn.w	r0, #15
 800cb8c:	e019      	b.n	800cbc2 <udp_sendto+0xda>
    netif = netif_get_by_index(pcb->netif_idx);
 800cb8e:	f7fa fce3 	bl	8007558 <netif_get_by_index>
 800cb92:	e00e      	b.n	800cbb2 <udp_sendto+0xca>
    if (ip_addr_ismulticast(dst_ip)) {
 800cb94:	7823      	ldrb	r3, [r4, #0]
 800cb96:	2bff      	cmp	r3, #255	; 0xff
 800cb98:	bf14      	ite	ne
 800cb9a:	2300      	movne	r3, #0
 800cb9c:	2301      	moveq	r3, #1
 800cb9e:	e7c3      	b.n	800cb28 <udp_sendto+0x40>
        netif = netif_get_by_index(pcb->mcast_ifindex);
 800cba0:	f7fa fcda 	bl	8007558 <netif_get_by_index>
    if (netif == NULL)
 800cba4:	b928      	cbnz	r0, 800cbb2 <udp_sendto+0xca>
      netif = ip_route(&pcb->local_ip, dst_ip);
 800cba6:	7d23      	ldrb	r3, [r4, #20]
 800cba8:	2b06      	cmp	r3, #6
 800cbaa:	d00c      	beq.n	800cbc6 <udp_sendto+0xde>
 800cbac:	4620      	mov	r0, r4
 800cbae:	f002 fbff 	bl	800f3b0 <ip4_route>
  if (netif == NULL) {
 800cbb2:	b180      	cbz	r0, 800cbd6 <udp_sendto+0xee>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800cbb4:	9000      	str	r0, [sp, #0]
 800cbb6:	463b      	mov	r3, r7
 800cbb8:	4622      	mov	r2, r4
 800cbba:	4629      	mov	r1, r5
 800cbbc:	4630      	mov	r0, r6
 800cbbe:	f7ff ff03 	bl	800c9c8 <udp_sendto_if>
}
 800cbc2:	b003      	add	sp, #12
 800cbc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 800cbc6:	4621      	mov	r1, r4
 800cbc8:	4630      	mov	r0, r6
 800cbca:	f003 fc65 	bl	8010498 <ip6_route>
 800cbce:	e7f0      	b.n	800cbb2 <udp_sendto+0xca>
    return ERR_VAL;
 800cbd0:	f06f 0005 	mvn.w	r0, #5
 800cbd4:	e7f5      	b.n	800cbc2 <udp_sendto+0xda>
    return ERR_RTE;
 800cbd6:	f06f 0003 	mvn.w	r0, #3
 800cbda:	e7f2      	b.n	800cbc2 <udp_sendto+0xda>
 800cbdc:	080178ec 	.word	0x080178ec
 800cbe0:	08016e58 	.word	0x08016e58
 800cbe4:	08017090 	.word	0x08017090
 800cbe8:	08015418 	.word	0x08015418
 800cbec:	080170a8 	.word	0x080170a8
 800cbf0:	080170c4 	.word	0x080170c4

0800cbf4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800cbf4:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d02f      	beq.n	800cc5a <udp_connect+0x66>
 800cbfa:	460d      	mov	r5, r1
 800cbfc:	4616      	mov	r6, r2
 800cbfe:	4604      	mov	r4, r0
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800cc00:	2900      	cmp	r1, #0
 800cc02:	d034      	beq.n	800cc6e <udp_connect+0x7a>

  if (pcb->local_port == 0) {
 800cc04:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
 800cc06:	2a00      	cmp	r2, #0
 800cc08:	d03b      	beq.n	800cc82 <udp_connect+0x8e>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800cc0a:	f114 0218 	adds.w	r2, r4, #24
 800cc0e:	d002      	beq.n	800cc16 <udp_connect+0x22>
 800cc10:	7d2b      	ldrb	r3, [r5, #20]
 800cc12:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800cc16:	7d2b      	ldrb	r3, [r5, #20]
 800cc18:	2b06      	cmp	r3, #6
 800cc1a:	d038      	beq.n	800cc8e <udp_connect+0x9a>
 800cc1c:	2d00      	cmp	r5, #0
 800cc1e:	d051      	beq.n	800ccc4 <udp_connect+0xd0>
 800cc20:	682b      	ldr	r3, [r5, #0]
 800cc22:	61a3      	str	r3, [r4, #24]
 800cc24:	2300      	movs	r3, #0
 800cc26:	6263      	str	r3, [r4, #36]	; 0x24
 800cc28:	6223      	str	r3, [r4, #32]
 800cc2a:	61e3      	str	r3, [r4, #28]
 800cc2c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  /* If the given IP address should have a zone but doesn't, assign one now,
   * using the bound address to make a more informed decision when possible. */
  if (IP_IS_V6(&pcb->remote_ip) &&
 800cc30:	b11a      	cbz	r2, 800cc3a <udp_connect+0x46>
 800cc32:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800cc36:	2b06      	cmp	r3, #6
 800cc38:	d046      	beq.n	800ccc8 <udp_connect+0xd4>
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800cc3a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800cc3c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800cc40:	f043 0304 	orr.w	r3, r3, #4
 800cc44:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cc48:	4b40      	ldr	r3, [pc, #256]	; (800cd4c <udp_connect+0x158>)
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	4613      	mov	r3, r2
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d075      	beq.n	800cd3e <udp_connect+0x14a>
    if (pcb == ipcb) {
 800cc52:	42a3      	cmp	r3, r4
 800cc54:	d078      	beq.n	800cd48 <udp_connect+0x154>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cc56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc58:	e7f9      	b.n	800cc4e <udp_connect+0x5a>
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc5a:	4b3d      	ldr	r3, [pc, #244]	; (800cd50 <udp_connect+0x15c>)
 800cc5c:	f240 4235 	movw	r2, #1077	; 0x435
 800cc60:	493c      	ldr	r1, [pc, #240]	; (800cd54 <udp_connect+0x160>)
 800cc62:	483d      	ldr	r0, [pc, #244]	; (800cd58 <udp_connect+0x164>)
 800cc64:	f007 fae6 	bl	8014234 <iprintf>
 800cc68:	f06f 000f 	mvn.w	r0, #15
 800cc6c:	e06b      	b.n	800cd46 <udp_connect+0x152>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800cc6e:	4b38      	ldr	r3, [pc, #224]	; (800cd50 <udp_connect+0x15c>)
 800cc70:	f240 4236 	movw	r2, #1078	; 0x436
 800cc74:	4939      	ldr	r1, [pc, #228]	; (800cd5c <udp_connect+0x168>)
 800cc76:	4838      	ldr	r0, [pc, #224]	; (800cd58 <udp_connect+0x164>)
 800cc78:	f007 fadc 	bl	8014234 <iprintf>
 800cc7c:	f06f 000f 	mvn.w	r0, #15
 800cc80:	e061      	b.n	800cd46 <udp_connect+0x152>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800cc82:	4601      	mov	r1, r0
 800cc84:	f7ff fc20 	bl	800c4c8 <udp_bind>
    if (err != ERR_OK) {
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	d0be      	beq.n	800cc0a <udp_connect+0x16>
 800cc8c:	e05b      	b.n	800cd46 <udp_connect+0x152>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800cc8e:	b17d      	cbz	r5, 800ccb0 <udp_connect+0xbc>
 800cc90:	682b      	ldr	r3, [r5, #0]
 800cc92:	61a3      	str	r3, [r4, #24]
 800cc94:	b175      	cbz	r5, 800ccb4 <udp_connect+0xc0>
 800cc96:	686b      	ldr	r3, [r5, #4]
 800cc98:	61e3      	str	r3, [r4, #28]
 800cc9a:	b16d      	cbz	r5, 800ccb8 <udp_connect+0xc4>
 800cc9c:	68ab      	ldr	r3, [r5, #8]
 800cc9e:	6223      	str	r3, [r4, #32]
 800cca0:	b165      	cbz	r5, 800ccbc <udp_connect+0xc8>
 800cca2:	68eb      	ldr	r3, [r5, #12]
 800cca4:	6263      	str	r3, [r4, #36]	; 0x24
 800cca6:	b15d      	cbz	r5, 800ccc0 <udp_connect+0xcc>
 800cca8:	7c2b      	ldrb	r3, [r5, #16]
 800ccaa:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800ccae:	e7bf      	b.n	800cc30 <udp_connect+0x3c>
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	e7ee      	b.n	800cc92 <udp_connect+0x9e>
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	e7ef      	b.n	800cc98 <udp_connect+0xa4>
 800ccb8:	2300      	movs	r3, #0
 800ccba:	e7f0      	b.n	800cc9e <udp_connect+0xaa>
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	e7f1      	b.n	800cca4 <udp_connect+0xb0>
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	e7f2      	b.n	800ccaa <udp_connect+0xb6>
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	e7ac      	b.n	800cc22 <udp_connect+0x2e>
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
 800ccc8:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
  if (IP_IS_V6(&pcb->remote_ip) &&
 800cccc:	2d00      	cmp	r5, #0
 800ccce:	d1b4      	bne.n	800cc3a <udp_connect+0x46>
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
 800ccd0:	69a3      	ldr	r3, [r4, #24]
 800ccd2:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 800ccd6:	4019      	ands	r1, r3
 800ccd8:	f248 02fe 	movw	r2, #33022	; 0x80fe
 800ccdc:	4291      	cmp	r1, r2
 800ccde:	d00b      	beq.n	800ccf8 <udp_connect+0x104>
 800cce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cce4:	041b      	lsls	r3, r3, #16
 800cce6:	0c1b      	lsrs	r3, r3, #16
 800cce8:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d003      	beq.n	800ccf8 <udp_connect+0x104>
 800ccf0:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d1a0      	bne.n	800cc3a <udp_connect+0x46>
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
 800ccf8:	f104 0118 	add.w	r1, r4, #24
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	f003 fbcb 	bl	8010498 <ip6_route>
 800cd02:	4602      	mov	r2, r0
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d098      	beq.n	800cc3a <udp_connect+0x46>
 800cd08:	69a3      	ldr	r3, [r4, #24]
 800cd0a:	f24c 00ff 	movw	r0, #49407	; 0xc0ff
 800cd0e:	4018      	ands	r0, r3
 800cd10:	f248 01fe 	movw	r1, #33022	; 0x80fe
 800cd14:	4288      	cmp	r0, r1
 800cd16:	d00b      	beq.n	800cd30 <udp_connect+0x13c>
 800cd18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd1c:	041b      	lsls	r3, r3, #16
 800cd1e:	0c1b      	lsrs	r3, r3, #16
 800cd20:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cd24:	428b      	cmp	r3, r1
 800cd26:	d003      	beq.n	800cd30 <udp_connect+0x13c>
 800cd28:	f240 21ff 	movw	r1, #767	; 0x2ff
 800cd2c:	428b      	cmp	r3, r1
 800cd2e:	d103      	bne.n	800cd38 <udp_connect+0x144>
 800cd30:	f892 50e2 	ldrb.w	r5, [r2, #226]	; 0xe2
 800cd34:	3501      	adds	r5, #1
 800cd36:	b2ed      	uxtb	r5, r5
 800cd38:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 800cd3c:	e77d      	b.n	800cc3a <udp_connect+0x46>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800cd3e:	6362      	str	r2, [r4, #52]	; 0x34
  udp_pcbs = pcb;
 800cd40:	4b02      	ldr	r3, [pc, #8]	; (800cd4c <udp_connect+0x158>)
 800cd42:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800cd44:	2000      	movs	r0, #0
}
 800cd46:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 800cd48:	2000      	movs	r0, #0
 800cd4a:	e7fc      	b.n	800cd46 <udp_connect+0x152>
 800cd4c:	20007b38 	.word	0x20007b38
 800cd50:	08016e58 	.word	0x08016e58
 800cd54:	080170e0 	.word	0x080170e0
 800cd58:	08015418 	.word	0x08015418
 800cd5c:	080170fc 	.word	0x080170fc

0800cd60 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800cd60:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800cd62:	b110      	cbz	r0, 800cd6a <udp_recv+0xa>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800cd64:	6481      	str	r1, [r0, #72]	; 0x48
  pcb->recv_arg = recv_arg;
 800cd66:	64c2      	str	r2, [r0, #76]	; 0x4c
}
 800cd68:	bd08      	pop	{r3, pc}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800cd6a:	4b04      	ldr	r3, [pc, #16]	; (800cd7c <udp_recv+0x1c>)
 800cd6c:	f240 428a 	movw	r2, #1162	; 0x48a
 800cd70:	4903      	ldr	r1, [pc, #12]	; (800cd80 <udp_recv+0x20>)
 800cd72:	4804      	ldr	r0, [pc, #16]	; (800cd84 <udp_recv+0x24>)
 800cd74:	f007 fa5e 	bl	8014234 <iprintf>
 800cd78:	e7f6      	b.n	800cd68 <udp_recv+0x8>
 800cd7a:	bf00      	nop
 800cd7c:	08016e58 	.word	0x08016e58
 800cd80:	08017118 	.word	0x08017118
 800cd84:	08015418 	.word	0x08015418

0800cd88 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800cd88:	b508      	push	{r3, lr}
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800cd8a:	b150      	cbz	r0, 800cda2 <udp_remove+0x1a>
 800cd8c:	4601      	mov	r1, r0

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800cd8e:	4b0f      	ldr	r3, [pc, #60]	; (800cdcc <udp_remove+0x44>)
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	4282      	cmp	r2, r0
 800cd94:	d111      	bne.n	800cdba <udp_remove+0x32>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800cd96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cd98:	601a      	str	r2, [r3, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800cd9a:	2000      	movs	r0, #0
 800cd9c:	f7fa f856 	bl	8006e4c <memp_free>
}
 800cda0:	bd08      	pop	{r3, pc}
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800cda2:	4b0b      	ldr	r3, [pc, #44]	; (800cdd0 <udp_remove+0x48>)
 800cda4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800cda8:	490a      	ldr	r1, [pc, #40]	; (800cdd4 <udp_remove+0x4c>)
 800cdaa:	480b      	ldr	r0, [pc, #44]	; (800cdd8 <udp_remove+0x50>)
 800cdac:	f007 fa42 	bl	8014234 <iprintf>
 800cdb0:	e7f6      	b.n	800cda0 <udp_remove+0x18>
        pcb2->next = pcb->next;
 800cdb2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800cdb4:	6353      	str	r3, [r2, #52]	; 0x34
        break;
 800cdb6:	e7f0      	b.n	800cd9a <udp_remove+0x12>
 800cdb8:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800cdba:	2a00      	cmp	r2, #0
 800cdbc:	d0ed      	beq.n	800cd9a <udp_remove+0x12>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800cdbe:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d0f9      	beq.n	800cdb8 <udp_remove+0x30>
 800cdc4:	428b      	cmp	r3, r1
 800cdc6:	d0f4      	beq.n	800cdb2 <udp_remove+0x2a>
 800cdc8:	461a      	mov	r2, r3
 800cdca:	e7f6      	b.n	800cdba <udp_remove+0x32>
 800cdcc:	20007b38 	.word	0x20007b38
 800cdd0:	08016e58 	.word	0x08016e58
 800cdd4:	08017130 	.word	0x08017130
 800cdd8:	08015418 	.word	0x08015418

0800cddc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800cddc:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800cdde:	2000      	movs	r0, #0
 800cde0:	f7fa f81a 	bl	8006e18 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800cde4:	4604      	mov	r4, r0
 800cde6:	b140      	cbz	r0, 800cdfa <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800cde8:	2250      	movs	r2, #80	; 0x50
 800cdea:	2100      	movs	r1, #0
 800cdec:	f007 fa1a 	bl	8014224 <memset>
    pcb->ttl = UDP_TTL;
 800cdf0:	23ff      	movs	r3, #255	; 0xff
 800cdf2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 800cdf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800cdfa:	4620      	mov	r0, r4
 800cdfc:	bd10      	pop	{r4, pc}
	...

0800ce00 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ce00:	2800      	cmp	r0, #0
 800ce02:	f000 8098 	beq.w	800cf36 <udp_netif_ip_addr_changed+0x136>
 800ce06:	4602      	mov	r2, r0
 800ce08:	7d03      	ldrb	r3, [r0, #20]
 800ce0a:	2b06      	cmp	r3, #6
 800ce0c:	d019      	beq.n	800ce42 <udp_netif_ip_addr_changed+0x42>
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	d02b      	beq.n	800ce6a <udp_netif_ip_addr_changed+0x6a>
 800ce12:	6803      	ldr	r3, [r0, #0]
 800ce14:	bb5b      	cbnz	r3, 800ce6e <udp_netif_ip_addr_changed+0x6e>
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	f000 808d 	beq.w	800cf36 <udp_netif_ip_addr_changed+0x136>
 800ce1c:	2900      	cmp	r1, #0
 800ce1e:	f000 808a 	beq.w	800cf36 <udp_netif_ip_addr_changed+0x136>
 800ce22:	7d0b      	ldrb	r3, [r1, #20]
 800ce24:	2b06      	cmp	r3, #6
 800ce26:	d024      	beq.n	800ce72 <udp_netif_ip_addr_changed+0x72>
 800ce28:	2900      	cmp	r1, #0
 800ce2a:	d036      	beq.n	800ce9a <udp_netif_ip_addr_changed+0x9a>
 800ce2c:	680b      	ldr	r3, [r1, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d135      	bne.n	800ce9e <udp_netif_ip_addr_changed+0x9e>
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d07f      	beq.n	800cf36 <udp_netif_ip_addr_changed+0x136>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ce36:	4b40      	ldr	r3, [pc, #256]	; (800cf38 <udp_netif_ip_addr_changed+0x138>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d07a      	beq.n	800cf34 <udp_netif_ip_addr_changed+0x134>
{
 800ce3e:	b410      	push	{r4}
 800ce40:	e058      	b.n	800cef4 <udp_netif_ip_addr_changed+0xf4>
  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ce42:	b150      	cbz	r0, 800ce5a <udp_netif_ip_addr_changed+0x5a>
 800ce44:	6803      	ldr	r3, [r0, #0]
 800ce46:	b953      	cbnz	r3, 800ce5e <udp_netif_ip_addr_changed+0x5e>
 800ce48:	6843      	ldr	r3, [r0, #4]
 800ce4a:	b953      	cbnz	r3, 800ce62 <udp_netif_ip_addr_changed+0x62>
 800ce4c:	6883      	ldr	r3, [r0, #8]
 800ce4e:	b953      	cbnz	r3, 800ce66 <udp_netif_ip_addr_changed+0x66>
 800ce50:	68c3      	ldr	r3, [r0, #12]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d0df      	beq.n	800ce16 <udp_netif_ip_addr_changed+0x16>
 800ce56:	2301      	movs	r3, #1
 800ce58:	e7dd      	b.n	800ce16 <udp_netif_ip_addr_changed+0x16>
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	e7db      	b.n	800ce16 <udp_netif_ip_addr_changed+0x16>
 800ce5e:	2301      	movs	r3, #1
 800ce60:	e7d9      	b.n	800ce16 <udp_netif_ip_addr_changed+0x16>
 800ce62:	2301      	movs	r3, #1
 800ce64:	e7d7      	b.n	800ce16 <udp_netif_ip_addr_changed+0x16>
 800ce66:	2301      	movs	r3, #1
 800ce68:	e7d5      	b.n	800ce16 <udp_netif_ip_addr_changed+0x16>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	e7d3      	b.n	800ce16 <udp_netif_ip_addr_changed+0x16>
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e7d1      	b.n	800ce16 <udp_netif_ip_addr_changed+0x16>
 800ce72:	b151      	cbz	r1, 800ce8a <udp_netif_ip_addr_changed+0x8a>
 800ce74:	680b      	ldr	r3, [r1, #0]
 800ce76:	b953      	cbnz	r3, 800ce8e <udp_netif_ip_addr_changed+0x8e>
 800ce78:	684b      	ldr	r3, [r1, #4]
 800ce7a:	b953      	cbnz	r3, 800ce92 <udp_netif_ip_addr_changed+0x92>
 800ce7c:	688b      	ldr	r3, [r1, #8]
 800ce7e:	b953      	cbnz	r3, 800ce96 <udp_netif_ip_addr_changed+0x96>
 800ce80:	68cb      	ldr	r3, [r1, #12]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d0d5      	beq.n	800ce32 <udp_netif_ip_addr_changed+0x32>
 800ce86:	2301      	movs	r3, #1
 800ce88:	e7d3      	b.n	800ce32 <udp_netif_ip_addr_changed+0x32>
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	e7d1      	b.n	800ce32 <udp_netif_ip_addr_changed+0x32>
 800ce8e:	2301      	movs	r3, #1
 800ce90:	e7cf      	b.n	800ce32 <udp_netif_ip_addr_changed+0x32>
 800ce92:	2301      	movs	r3, #1
 800ce94:	e7cd      	b.n	800ce32 <udp_netif_ip_addr_changed+0x32>
 800ce96:	2301      	movs	r3, #1
 800ce98:	e7cb      	b.n	800ce32 <udp_netif_ip_addr_changed+0x32>
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	e7c9      	b.n	800ce32 <udp_netif_ip_addr_changed+0x32>
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e7c7      	b.n	800ce32 <udp_netif_ip_addr_changed+0x32>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cea2:	681c      	ldr	r4, [r3, #0]
 800cea4:	6810      	ldr	r0, [r2, #0]
 800cea6:	4284      	cmp	r4, r0
 800cea8:	d001      	beq.n	800ceae <udp_netif_ip_addr_changed+0xae>
 800ceaa:	2000      	movs	r0, #0
 800ceac:	e02e      	b.n	800cf0c <udp_netif_ip_addr_changed+0x10c>
 800ceae:	685c      	ldr	r4, [r3, #4]
 800ceb0:	6850      	ldr	r0, [r2, #4]
 800ceb2:	4284      	cmp	r4, r0
 800ceb4:	d001      	beq.n	800ceba <udp_netif_ip_addr_changed+0xba>
 800ceb6:	2000      	movs	r0, #0
 800ceb8:	e028      	b.n	800cf0c <udp_netif_ip_addr_changed+0x10c>
 800ceba:	689c      	ldr	r4, [r3, #8]
 800cebc:	6890      	ldr	r0, [r2, #8]
 800cebe:	4284      	cmp	r4, r0
 800cec0:	d001      	beq.n	800cec6 <udp_netif_ip_addr_changed+0xc6>
 800cec2:	2000      	movs	r0, #0
 800cec4:	e022      	b.n	800cf0c <udp_netif_ip_addr_changed+0x10c>
 800cec6:	68dc      	ldr	r4, [r3, #12]
 800cec8:	68d0      	ldr	r0, [r2, #12]
 800ceca:	4284      	cmp	r4, r0
 800cecc:	d001      	beq.n	800ced2 <udp_netif_ip_addr_changed+0xd2>
 800cece:	2000      	movs	r0, #0
 800ced0:	e01c      	b.n	800cf0c <udp_netif_ip_addr_changed+0x10c>
 800ced2:	7c1c      	ldrb	r4, [r3, #16]
 800ced4:	7c10      	ldrb	r0, [r2, #16]
 800ced6:	4284      	cmp	r4, r0
 800ced8:	d001      	beq.n	800cede <udp_netif_ip_addr_changed+0xde>
 800ceda:	2000      	movs	r0, #0
 800cedc:	e016      	b.n	800cf0c <udp_netif_ip_addr_changed+0x10c>
 800cede:	2001      	movs	r0, #1
 800cee0:	e014      	b.n	800cf0c <udp_netif_ip_addr_changed+0x10c>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cee2:	6808      	ldr	r0, [r1, #0]
 800cee4:	6018      	str	r0, [r3, #0]
 800cee6:	2000      	movs	r0, #0
 800cee8:	60d8      	str	r0, [r3, #12]
 800ceea:	6098      	str	r0, [r3, #8]
 800ceec:	6058      	str	r0, [r3, #4]
 800ceee:	7418      	strb	r0, [r3, #16]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef2:	b1e3      	cbz	r3, 800cf2e <udp_netif_ip_addr_changed+0x12e>
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cef4:	7d18      	ldrb	r0, [r3, #20]
 800cef6:	7d14      	ldrb	r4, [r2, #20]
 800cef8:	42a0      	cmp	r0, r4
 800cefa:	d1f9      	bne.n	800cef0 <udp_netif_ip_addr_changed+0xf0>
 800cefc:	2806      	cmp	r0, #6
 800cefe:	d0d0      	beq.n	800cea2 <udp_netif_ip_addr_changed+0xa2>
 800cf00:	6818      	ldr	r0, [r3, #0]
 800cf02:	6814      	ldr	r4, [r2, #0]
 800cf04:	42a0      	cmp	r0, r4
 800cf06:	bf14      	ite	ne
 800cf08:	2000      	movne	r0, #0
 800cf0a:	2001      	moveq	r0, #1
 800cf0c:	2800      	cmp	r0, #0
 800cf0e:	d0ef      	beq.n	800cef0 <udp_netif_ip_addr_changed+0xf0>
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cf10:	7d08      	ldrb	r0, [r1, #20]
 800cf12:	7518      	strb	r0, [r3, #20]
 800cf14:	2806      	cmp	r0, #6
 800cf16:	d1e4      	bne.n	800cee2 <udp_netif_ip_addr_changed+0xe2>
 800cf18:	6808      	ldr	r0, [r1, #0]
 800cf1a:	6018      	str	r0, [r3, #0]
 800cf1c:	6848      	ldr	r0, [r1, #4]
 800cf1e:	6058      	str	r0, [r3, #4]
 800cf20:	6888      	ldr	r0, [r1, #8]
 800cf22:	6098      	str	r0, [r3, #8]
 800cf24:	68c8      	ldr	r0, [r1, #12]
 800cf26:	60d8      	str	r0, [r3, #12]
 800cf28:	7c08      	ldrb	r0, [r1, #16]
 800cf2a:	7418      	strb	r0, [r3, #16]
 800cf2c:	e7e0      	b.n	800cef0 <udp_netif_ip_addr_changed+0xf0>
      }
    }
  }
}
 800cf2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf32:	4770      	bx	lr
 800cf34:	4770      	bx	lr
 800cf36:	4770      	bx	lr
 800cf38:	20007b38 	.word	0x20007b38

0800cf3c <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 800cf3c:	7943      	ldrb	r3, [r0, #5]
 800cf3e:	428b      	cmp	r3, r1
 800cf40:	d003      	beq.n	800cf4a <dhcp_set_state+0xe>
    dhcp->state = new_state;
 800cf42:	7141      	strb	r1, [r0, #5]
    dhcp->tries = 0;
 800cf44:	2300      	movs	r3, #0
 800cf46:	7183      	strb	r3, [r0, #6]
    dhcp->request_timeout = 0;
 800cf48:	8103      	strh	r3, [r0, #8]
  }
}
 800cf4a:	4770      	bx	lr

0800cf4c <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800cf4c:	b570      	push	{r4, r5, r6, lr}
 800cf4e:	4604      	mov	r4, r0
 800cf50:	460d      	mov	r5, r1
 800cf52:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800cf54:	1c83      	adds	r3, r0, #2
 800cf56:	2b44      	cmp	r3, #68	; 0x44
 800cf58:	d807      	bhi.n	800cf6a <dhcp_option_short+0x1e>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800cf5a:	1c63      	adds	r3, r4, #1
 800cf5c:	b29b      	uxth	r3, r3
 800cf5e:	0a32      	lsrs	r2, r6, #8
 800cf60:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800cf62:	1ca0      	adds	r0, r4, #2
 800cf64:	54ee      	strb	r6, [r5, r3]
  return options_out_len;
}
 800cf66:	b280      	uxth	r0, r0
 800cf68:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800cf6a:	4b04      	ldr	r3, [pc, #16]	; (800cf7c <dhcp_option_short+0x30>)
 800cf6c:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800cf70:	4903      	ldr	r1, [pc, #12]	; (800cf80 <dhcp_option_short+0x34>)
 800cf72:	4804      	ldr	r0, [pc, #16]	; (800cf84 <dhcp_option_short+0x38>)
 800cf74:	f007 f95e 	bl	8014234 <iprintf>
 800cf78:	e7ef      	b.n	800cf5a <dhcp_option_short+0xe>
 800cf7a:	bf00      	nop
 800cf7c:	08017148 	.word	0x08017148
 800cf80:	08017180 	.word	0x08017180
 800cf84:	08015418 	.word	0x08015418

0800cf88 <dhcp_option>:
{
 800cf88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf8a:	4604      	mov	r4, r0
 800cf8c:	460d      	mov	r5, r1
 800cf8e:	4617      	mov	r7, r2
 800cf90:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800cf92:	4403      	add	r3, r0
 800cf94:	3302      	adds	r3, #2
 800cf96:	2b44      	cmp	r3, #68	; 0x44
 800cf98:	d806      	bhi.n	800cfa8 <dhcp_option+0x20>
  options[options_out_len++] = option_type;
 800cf9a:	1c63      	adds	r3, r4, #1
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 800cfa0:	1ca0      	adds	r0, r4, #2
 800cfa2:	54ee      	strb	r6, [r5, r3]
}
 800cfa4:	b280      	uxth	r0, r0
 800cfa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800cfa8:	4b03      	ldr	r3, [pc, #12]	; (800cfb8 <dhcp_option+0x30>)
 800cfaa:	f240 529a 	movw	r2, #1434	; 0x59a
 800cfae:	4903      	ldr	r1, [pc, #12]	; (800cfbc <dhcp_option+0x34>)
 800cfb0:	4803      	ldr	r0, [pc, #12]	; (800cfc0 <dhcp_option+0x38>)
 800cfb2:	f007 f93f 	bl	8014234 <iprintf>
 800cfb6:	e7f0      	b.n	800cf9a <dhcp_option+0x12>
 800cfb8:	08017148 	.word	0x08017148
 800cfbc:	080171bc 	.word	0x080171bc
 800cfc0:	08015418 	.word	0x08015418

0800cfc4 <dhcp_option_byte>:
{
 800cfc4:	b570      	push	{r4, r5, r6, lr}
 800cfc6:	4604      	mov	r4, r0
 800cfc8:	460d      	mov	r5, r1
 800cfca:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800cfcc:	2843      	cmp	r0, #67	; 0x43
 800cfce:	d803      	bhi.n	800cfd8 <dhcp_option_byte+0x14>
  options[options_out_len++] = value;
 800cfd0:	1c60      	adds	r0, r4, #1
 800cfd2:	552e      	strb	r6, [r5, r4]
}
 800cfd4:	b280      	uxth	r0, r0
 800cfd6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800cfd8:	4b03      	ldr	r3, [pc, #12]	; (800cfe8 <dhcp_option_byte+0x24>)
 800cfda:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800cfde:	4903      	ldr	r1, [pc, #12]	; (800cfec <dhcp_option_byte+0x28>)
 800cfe0:	4803      	ldr	r0, [pc, #12]	; (800cff0 <dhcp_option_byte+0x2c>)
 800cfe2:	f007 f927 	bl	8014234 <iprintf>
 800cfe6:	e7f3      	b.n	800cfd0 <dhcp_option_byte+0xc>
 800cfe8:	08017148 	.word	0x08017148
 800cfec:	08017200 	.word	0x08017200
 800cff0:	08015418 	.word	0x08015418

0800cff4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800cff4:	b570      	push	{r4, r5, r6, lr}
 800cff6:	4604      	mov	r4, r0
 800cff8:	460d      	mov	r5, r1
 800cffa:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800cffc:	1d03      	adds	r3, r0, #4
 800cffe:	2b44      	cmp	r3, #68	; 0x44
 800d000:	d811      	bhi.n	800d026 <dhcp_option_long+0x32>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800d002:	1c63      	adds	r3, r4, #1
 800d004:	b29b      	uxth	r3, r3
 800d006:	0e32      	lsrs	r2, r6, #24
 800d008:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800d00a:	1ca2      	adds	r2, r4, #2
 800d00c:	b292      	uxth	r2, r2
 800d00e:	f3c6 4107 	ubfx	r1, r6, #16, #8
 800d012:	54e9      	strb	r1, [r5, r3]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800d014:	1ce3      	adds	r3, r4, #3
 800d016:	b29b      	uxth	r3, r3
 800d018:	f3c6 2107 	ubfx	r1, r6, #8, #8
 800d01c:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800d01e:	1d20      	adds	r0, r4, #4
 800d020:	54ee      	strb	r6, [r5, r3]
  return options_out_len;
}
 800d022:	b280      	uxth	r0, r0
 800d024:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800d026:	4b04      	ldr	r3, [pc, #16]	; (800d038 <dhcp_option_long+0x44>)
 800d028:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800d02c:	4903      	ldr	r1, [pc, #12]	; (800d03c <dhcp_option_long+0x48>)
 800d02e:	4804      	ldr	r0, [pc, #16]	; (800d040 <dhcp_option_long+0x4c>)
 800d030:	f007 f900 	bl	8014234 <iprintf>
 800d034:	e7e5      	b.n	800d002 <dhcp_option_long+0xe>
 800d036:	bf00      	nop
 800d038:	08017148 	.word	0x08017148
 800d03c:	08017238 	.word	0x08017238
 800d040:	08015418 	.word	0x08015418

0800d044 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800d044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800d048:	4680      	mov	r8, r0
 800d04a:	2800      	cmp	r0, #0
 800d04c:	d04b      	beq.n	800d0e6 <dhcp_create_msg+0xa2>
 800d04e:	4689      	mov	r9, r1
 800d050:	4615      	mov	r5, r2
 800d052:	461e      	mov	r6, r3
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800d054:	2900      	cmp	r1, #0
 800d056:	d04f      	beq.n	800d0f8 <dhcp_create_msg+0xb4>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800d058:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d05c:	f44f 719a 	mov.w	r1, #308	; 0x134
 800d060:	204a      	movs	r0, #74	; 0x4a
 800d062:	f7fa fbf9 	bl	8007858 <pbuf_alloc>
  if (p_out == NULL) {
 800d066:	4607      	mov	r7, r0
 800d068:	2800      	cmp	r0, #0
 800d06a:	d079      	beq.n	800d160 <dhcp_create_msg+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800d06c:	8943      	ldrh	r3, [r0, #10]
 800d06e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800d072:	d34a      	bcc.n	800d10a <dhcp_create_msg+0xc6>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800d074:	2d03      	cmp	r5, #3
 800d076:	d050      	beq.n	800d11a <dhcp_create_msg+0xd6>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800d078:	f899 3006 	ldrb.w	r3, [r9, #6]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d051      	beq.n	800d124 <dhcp_create_msg+0xe0>
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800d080:	4b39      	ldr	r3, [pc, #228]	; (800d168 <dhcp_create_msg+0x124>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f8c9 3000 	str.w	r3, [r9]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800d088:	687c      	ldr	r4, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800d08a:	f44f 729a 	mov.w	r2, #308	; 0x134
 800d08e:	2100      	movs	r1, #0
 800d090:	4620      	mov	r0, r4
 800d092:	f007 f8c7 	bl	8014224 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800d096:	2301      	movs	r3, #1
 800d098:	7023      	strb	r3, [r4, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800d09a:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 800d09c:	f898 30de 	ldrb.w	r3, [r8, #222]	; 0xde
 800d0a0:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800d0a2:	f8d9 0000 	ldr.w	r0, [r9]
 800d0a6:	f7f9 f868 	bl	800617a <lwip_htonl>
 800d0aa:	6060      	str	r0, [r4, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800d0ac:	2d08      	cmp	r5, #8
 800d0ae:	d00b      	beq.n	800d0c8 <dhcp_create_msg+0x84>
 800d0b0:	2d04      	cmp	r5, #4
 800d0b2:	d009      	beq.n	800d0c8 <dhcp_create_msg+0x84>
 800d0b4:	2d07      	cmp	r5, #7
 800d0b6:	d007      	beq.n	800d0c8 <dhcp_create_msg+0x84>
 800d0b8:	2d03      	cmp	r5, #3
 800d0ba:	d108      	bne.n	800d0ce <dhcp_create_msg+0x8a>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800d0bc:	f899 3005 	ldrb.w	r3, [r9, #5]
 800d0c0:	3b04      	subs	r3, #4
 800d0c2:	b2db      	uxtb	r3, r3
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d802      	bhi.n	800d0ce <dhcp_create_msg+0x8a>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800d0c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d0cc:	60e3      	str	r3, [r4, #12]
{
 800d0ce:	2000      	movs	r0, #0
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d0d0:	2805      	cmp	r0, #5
 800d0d2:	d82c      	bhi.n	800d12e <dhcp_create_msg+0xea>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800d0d4:	eb08 0300 	add.w	r3, r8, r0
 800d0d8:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 800d0dc:	1821      	adds	r1, r4, r0
 800d0de:	770b      	strb	r3, [r1, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d0e0:	3001      	adds	r0, #1
 800d0e2:	b280      	uxth	r0, r0
 800d0e4:	e7f4      	b.n	800d0d0 <dhcp_create_msg+0x8c>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800d0e6:	4b21      	ldr	r3, [pc, #132]	; (800d16c <dhcp_create_msg+0x128>)
 800d0e8:	f240 7269 	movw	r2, #1897	; 0x769
 800d0ec:	4920      	ldr	r1, [pc, #128]	; (800d170 <dhcp_create_msg+0x12c>)
 800d0ee:	4821      	ldr	r0, [pc, #132]	; (800d174 <dhcp_create_msg+0x130>)
 800d0f0:	f007 f8a0 	bl	8014234 <iprintf>
 800d0f4:	4647      	mov	r7, r8
 800d0f6:	e033      	b.n	800d160 <dhcp_create_msg+0x11c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800d0f8:	4b1c      	ldr	r3, [pc, #112]	; (800d16c <dhcp_create_msg+0x128>)
 800d0fa:	f240 726a 	movw	r2, #1898	; 0x76a
 800d0fe:	491e      	ldr	r1, [pc, #120]	; (800d178 <dhcp_create_msg+0x134>)
 800d100:	481c      	ldr	r0, [pc, #112]	; (800d174 <dhcp_create_msg+0x130>)
 800d102:	f007 f897 	bl	8014234 <iprintf>
 800d106:	464f      	mov	r7, r9
 800d108:	e02a      	b.n	800d160 <dhcp_create_msg+0x11c>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800d10a:	4b18      	ldr	r3, [pc, #96]	; (800d16c <dhcp_create_msg+0x128>)
 800d10c:	f240 7271 	movw	r2, #1905	; 0x771
 800d110:	491a      	ldr	r1, [pc, #104]	; (800d17c <dhcp_create_msg+0x138>)
 800d112:	4818      	ldr	r0, [pc, #96]	; (800d174 <dhcp_create_msg+0x130>)
 800d114:	f007 f88e 	bl	8014234 <iprintf>
 800d118:	e7ac      	b.n	800d074 <dhcp_create_msg+0x30>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800d11a:	f899 3005 	ldrb.w	r3, [r9, #5]
 800d11e:	2b03      	cmp	r3, #3
 800d120:	d1b2      	bne.n	800d088 <dhcp_create_msg+0x44>
 800d122:	e7a9      	b.n	800d078 <dhcp_create_msg+0x34>
      xid = LWIP_RAND();
 800d124:	f007 f914 	bl	8014350 <rand>
 800d128:	4b0f      	ldr	r3, [pc, #60]	; (800d168 <dhcp_create_msg+0x124>)
 800d12a:	6018      	str	r0, [r3, #0]
 800d12c:	e7a8      	b.n	800d080 <dhcp_create_msg+0x3c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800d12e:	2363      	movs	r3, #99	; 0x63
 800d130:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 800d134:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800d138:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
 800d13c:	2253      	movs	r2, #83	; 0x53
 800d13e:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
 800d142:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800d146:	34f0      	adds	r4, #240	; 0xf0
 800d148:	2301      	movs	r3, #1
 800d14a:	2235      	movs	r2, #53	; 0x35
 800d14c:	4621      	mov	r1, r4
 800d14e:	2000      	movs	r0, #0
 800d150:	f7ff ff1a 	bl	800cf88 <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800d154:	462a      	mov	r2, r5
 800d156:	4621      	mov	r1, r4
 800d158:	f7ff ff34 	bl	800cfc4 <dhcp_option_byte>
  if (options_out_len) {
 800d15c:	b106      	cbz	r6, 800d160 <dhcp_create_msg+0x11c>
    *options_out_len = options_out_len_loc;
 800d15e:	8030      	strh	r0, [r6, #0]
  }
  return p_out;
}
 800d160:	4638      	mov	r0, r7
 800d162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d166:	bf00      	nop
 800d168:	2000068c 	.word	0x2000068c
 800d16c:	08017148 	.word	0x08017148
 800d170:	08017274 	.word	0x08017274
 800d174:	08015418 	.word	0x08015418
 800d178:	08017294 	.word	0x08017294
 800d17c:	080172b4 	.word	0x080172b4

0800d180 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800d180:	b538      	push	{r3, r4, r5, lr}
 800d182:	4604      	mov	r4, r0
 800d184:	4610      	mov	r0, r2
  options[options_out_len++] = DHCP_OPTION_END;
 800d186:	1c63      	adds	r3, r4, #1
 800d188:	b29b      	uxth	r3, r3
 800d18a:	22ff      	movs	r2, #255	; 0xff
 800d18c:	550a      	strb	r2, [r1, r4]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d18e:	e005      	b.n	800d19c <dhcp_option_trailer+0x1c>
 800d190:	2b43      	cmp	r3, #67	; 0x43
 800d192:	d808      	bhi.n	800d1a6 <dhcp_option_trailer+0x26>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800d194:	1c5c      	adds	r4, r3, #1
 800d196:	2500      	movs	r5, #0
 800d198:	54cd      	strb	r5, [r1, r3]
 800d19a:	b2a3      	uxth	r3, r4
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d19c:	2b43      	cmp	r3, #67	; 0x43
 800d19e:	d9f7      	bls.n	800d190 <dhcp_option_trailer+0x10>
 800d1a0:	f013 0f03 	tst.w	r3, #3
 800d1a4:	d1f4      	bne.n	800d190 <dhcp_option_trailer+0x10>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800d1a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d1aa:	b289      	uxth	r1, r1
 800d1ac:	f7fa fc02 	bl	80079b4 <pbuf_realloc>
}
 800d1b0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d1b4 <dhcp_rebind>:
{
 800d1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1b8:	b084      	sub	sp, #16
 800d1ba:	4680      	mov	r8, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d1bc:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800d1c0:	2104      	movs	r1, #4
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	f7ff feba 	bl	800cf3c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d1c8:	f10d 030e 	add.w	r3, sp, #14
 800d1cc:	2203      	movs	r2, #3
 800d1ce:	4629      	mov	r1, r5
 800d1d0:	4640      	mov	r0, r8
 800d1d2:	f7ff ff37 	bl	800d044 <dhcp_create_msg>
  if (p_out != NULL) {
 800d1d6:	2800      	cmp	r0, #0
 800d1d8:	d04a      	beq.n	800d270 <dhcp_rebind+0xbc>
 800d1da:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d1dc:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d1de:	36f0      	adds	r6, #240	; 0xf0
 800d1e0:	2302      	movs	r3, #2
 800d1e2:	2239      	movs	r2, #57	; 0x39
 800d1e4:	4631      	mov	r1, r6
 800d1e6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d1ea:	f7ff fecd 	bl	800cf88 <dhcp_option>
 800d1ee:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d1f2:	f8b8 20d4 	ldrh.w	r2, [r8, #212]	; 0xd4
 800d1f6:	4631      	mov	r1, r6
 800d1f8:	f7ff fea8 	bl	800cf4c <dhcp_option_short>
 800d1fc:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d200:	2304      	movs	r3, #4
 800d202:	2237      	movs	r2, #55	; 0x37
 800d204:	4631      	mov	r1, r6
 800d206:	f7ff febf 	bl	800cf88 <dhcp_option>
 800d20a:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d20e:	2400      	movs	r4, #0
 800d210:	e00a      	b.n	800d228 <dhcp_rebind+0x74>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d212:	4b20      	ldr	r3, [pc, #128]	; (800d294 <dhcp_rebind+0xe0>)
 800d214:	5d1a      	ldrb	r2, [r3, r4]
 800d216:	4631      	mov	r1, r6
 800d218:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d21c:	f7ff fed2 	bl	800cfc4 <dhcp_option_byte>
 800d220:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d224:	3401      	adds	r4, #1
 800d226:	b2e4      	uxtb	r4, r4
 800d228:	2c03      	cmp	r4, #3
 800d22a:	d9f2      	bls.n	800d212 <dhcp_rebind+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d22c:	463a      	mov	r2, r7
 800d22e:	4631      	mov	r1, r6
 800d230:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d234:	f7ff ffa4 	bl	800d180 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d238:	f8cd 8000 	str.w	r8, [sp]
 800d23c:	2343      	movs	r3, #67	; 0x43
 800d23e:	4a16      	ldr	r2, [pc, #88]	; (800d298 <dhcp_rebind+0xe4>)
 800d240:	4639      	mov	r1, r7
 800d242:	4816      	ldr	r0, [pc, #88]	; (800d29c <dhcp_rebind+0xe8>)
 800d244:	6800      	ldr	r0, [r0, #0]
 800d246:	f7ff fbbf 	bl	800c9c8 <udp_sendto_if>
 800d24a:	4604      	mov	r4, r0
    pbuf_free(p_out);
 800d24c:	4638      	mov	r0, r7
 800d24e:	f7fa faa1 	bl	8007794 <pbuf_free>
  if (dhcp->tries < 255) {
 800d252:	79ab      	ldrb	r3, [r5, #6]
 800d254:	2bff      	cmp	r3, #255	; 0xff
 800d256:	d001      	beq.n	800d25c <dhcp_rebind+0xa8>
    dhcp->tries++;
 800d258:	3301      	adds	r3, #1
 800d25a:	71ab      	strb	r3, [r5, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800d25c:	79ab      	ldrb	r3, [r5, #6]
 800d25e:	2b09      	cmp	r3, #9
 800d260:	d809      	bhi.n	800d276 <dhcp_rebind+0xc2>
 800d262:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800d266:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800d26a:	00db      	lsls	r3, r3, #3
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	e004      	b.n	800d27a <dhcp_rebind+0xc6>
    result = ERR_MEM;
 800d270:	f04f 34ff 	mov.w	r4, #4294967295
 800d274:	e7ed      	b.n	800d252 <dhcp_rebind+0x9e>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800d276:	f242 7310 	movw	r3, #10000	; 0x2710
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d27a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d27e:	4a08      	ldr	r2, [pc, #32]	; (800d2a0 <dhcp_rebind+0xec>)
 800d280:	fb82 1203 	smull	r1, r2, r2, r3
 800d284:	17db      	asrs	r3, r3, #31
 800d286:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800d28a:	812b      	strh	r3, [r5, #8]
}
 800d28c:	4620      	mov	r0, r4
 800d28e:	b004      	add	sp, #16
 800d290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d294:	080174c8 	.word	0x080174c8
 800d298:	080178ec 	.word	0x080178ec
 800d29c:	20000684 	.word	0x20000684
 800d2a0:	10624dd3 	.word	0x10624dd3

0800d2a4 <dhcp_t2_timeout>:
{
 800d2a4:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d2a6:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800d2aa:	7963      	ldrb	r3, [r4, #5]
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	d005      	beq.n	800d2bc <dhcp_t2_timeout+0x18>
 800d2b0:	2b0a      	cmp	r3, #10
 800d2b2:	d003      	beq.n	800d2bc <dhcp_t2_timeout+0x18>
 800d2b4:	2b05      	cmp	r3, #5
 800d2b6:	d001      	beq.n	800d2bc <dhcp_t2_timeout+0x18>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800d2b8:	2b04      	cmp	r3, #4
 800d2ba:	d10b      	bne.n	800d2d4 <dhcp_t2_timeout+0x30>
    dhcp_rebind(netif);
 800d2bc:	f7ff ff7a 	bl	800d1b4 <dhcp_rebind>
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800d2c0:	8aa3      	ldrh	r3, [r4, #20]
 800d2c2:	8a62      	ldrh	r2, [r4, #18]
 800d2c4:	1a9b      	subs	r3, r3, r2
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	dd04      	ble.n	800d2d4 <dhcp_t2_timeout+0x30>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800d2ca:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800d2ce:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800d2d2:	8223      	strh	r3, [r4, #16]
}
 800d2d4:	bd10      	pop	{r4, pc}
	...

0800d2d8 <dhcp_reboot>:
{
 800d2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2dc:	b084      	sub	sp, #16
 800d2de:	4680      	mov	r8, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d2e0:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800d2e4:	2103      	movs	r1, #3
 800d2e6:	4628      	mov	r0, r5
 800d2e8:	f7ff fe28 	bl	800cf3c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d2ec:	f10d 030e 	add.w	r3, sp, #14
 800d2f0:	2203      	movs	r2, #3
 800d2f2:	4629      	mov	r1, r5
 800d2f4:	4640      	mov	r0, r8
 800d2f6:	f7ff fea5 	bl	800d044 <dhcp_create_msg>
  if (p_out != NULL) {
 800d2fa:	2800      	cmp	r0, #0
 800d2fc:	d05c      	beq.n	800d3b8 <dhcp_reboot+0xe0>
 800d2fe:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d300:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d302:	36f0      	adds	r6, #240	; 0xf0
 800d304:	2302      	movs	r3, #2
 800d306:	2239      	movs	r2, #57	; 0x39
 800d308:	4631      	mov	r1, r6
 800d30a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d30e:	f7ff fe3b 	bl	800cf88 <dhcp_option>
 800d312:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800d316:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d31a:	4631      	mov	r1, r6
 800d31c:	f7ff fe16 	bl	800cf4c <dhcp_option_short>
 800d320:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d324:	2304      	movs	r3, #4
 800d326:	2232      	movs	r2, #50	; 0x32
 800d328:	4631      	mov	r1, r6
 800d32a:	f7ff fe2d 	bl	800cf88 <dhcp_option>
 800d32e:	4604      	mov	r4, r0
 800d330:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d334:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800d336:	f7f8 ff20 	bl	800617a <lwip_htonl>
 800d33a:	4602      	mov	r2, r0
 800d33c:	4631      	mov	r1, r6
 800d33e:	4620      	mov	r0, r4
 800d340:	f7ff fe58 	bl	800cff4 <dhcp_option_long>
 800d344:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d348:	2304      	movs	r3, #4
 800d34a:	2237      	movs	r2, #55	; 0x37
 800d34c:	4631      	mov	r1, r6
 800d34e:	f7ff fe1b 	bl	800cf88 <dhcp_option>
 800d352:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d356:	2400      	movs	r4, #0
 800d358:	e00a      	b.n	800d370 <dhcp_reboot+0x98>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d35a:	4b20      	ldr	r3, [pc, #128]	; (800d3dc <dhcp_reboot+0x104>)
 800d35c:	5d1a      	ldrb	r2, [r3, r4]
 800d35e:	4631      	mov	r1, r6
 800d360:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d364:	f7ff fe2e 	bl	800cfc4 <dhcp_option_byte>
 800d368:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d36c:	3401      	adds	r4, #1
 800d36e:	b2e4      	uxtb	r4, r4
 800d370:	2c03      	cmp	r4, #3
 800d372:	d9f2      	bls.n	800d35a <dhcp_reboot+0x82>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d374:	463a      	mov	r2, r7
 800d376:	4631      	mov	r1, r6
 800d378:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d37c:	f7ff ff00 	bl	800d180 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d380:	f8cd 8000 	str.w	r8, [sp]
 800d384:	2343      	movs	r3, #67	; 0x43
 800d386:	4a16      	ldr	r2, [pc, #88]	; (800d3e0 <dhcp_reboot+0x108>)
 800d388:	4639      	mov	r1, r7
 800d38a:	4816      	ldr	r0, [pc, #88]	; (800d3e4 <dhcp_reboot+0x10c>)
 800d38c:	6800      	ldr	r0, [r0, #0]
 800d38e:	f7ff fb1b 	bl	800c9c8 <udp_sendto_if>
 800d392:	4604      	mov	r4, r0
    pbuf_free(p_out);
 800d394:	4638      	mov	r0, r7
 800d396:	f7fa f9fd 	bl	8007794 <pbuf_free>
  if (dhcp->tries < 255) {
 800d39a:	79ab      	ldrb	r3, [r5, #6]
 800d39c:	2bff      	cmp	r3, #255	; 0xff
 800d39e:	d001      	beq.n	800d3a4 <dhcp_reboot+0xcc>
    dhcp->tries++;
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	71ab      	strb	r3, [r5, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800d3a4:	79ab      	ldrb	r3, [r5, #6]
 800d3a6:	2b09      	cmp	r3, #9
 800d3a8:	d809      	bhi.n	800d3be <dhcp_reboot+0xe6>
 800d3aa:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800d3ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800d3b2:	00db      	lsls	r3, r3, #3
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	e004      	b.n	800d3c2 <dhcp_reboot+0xea>
    result = ERR_MEM;
 800d3b8:	f04f 34ff 	mov.w	r4, #4294967295
 800d3bc:	e7ed      	b.n	800d39a <dhcp_reboot+0xc2>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800d3be:	f242 7310 	movw	r3, #10000	; 0x2710
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d3c2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d3c6:	4a08      	ldr	r2, [pc, #32]	; (800d3e8 <dhcp_reboot+0x110>)
 800d3c8:	fb82 1203 	smull	r1, r2, r2, r3
 800d3cc:	17db      	asrs	r3, r3, #31
 800d3ce:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800d3d2:	812b      	strh	r3, [r5, #8]
}
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	b004      	add	sp, #16
 800d3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3dc:	080174c8 	.word	0x080174c8
 800d3e0:	080178ec 	.word	0x080178ec
 800d3e4:	20000684 	.word	0x20000684
 800d3e8:	10624dd3 	.word	0x10624dd3

0800d3ec <dhcp_select>:
{
 800d3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f0:	b084      	sub	sp, #16
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	d052      	beq.n	800d49c <dhcp_select+0xb0>
 800d3f6:	4680      	mov	r8, r0
  dhcp = netif_dhcp_data(netif);
 800d3f8:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800d3fc:	2c00      	cmp	r4, #0
 800d3fe:	d057      	beq.n	800d4b0 <dhcp_select+0xc4>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800d400:	2101      	movs	r1, #1
 800d402:	4620      	mov	r0, r4
 800d404:	f7ff fd9a 	bl	800cf3c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d408:	f10d 030e 	add.w	r3, sp, #14
 800d40c:	2203      	movs	r2, #3
 800d40e:	4621      	mov	r1, r4
 800d410:	4640      	mov	r0, r8
 800d412:	f7ff fe17 	bl	800d044 <dhcp_create_msg>
  if (p_out != NULL) {
 800d416:	4607      	mov	r7, r0
 800d418:	2800      	cmp	r0, #0
 800d41a:	f000 8092 	beq.w	800d542 <dhcp_select+0x156>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d41e:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d420:	36f0      	adds	r6, #240	; 0xf0
 800d422:	2302      	movs	r3, #2
 800d424:	2239      	movs	r2, #57	; 0x39
 800d426:	4631      	mov	r1, r6
 800d428:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d42c:	f7ff fdac 	bl	800cf88 <dhcp_option>
 800d430:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d434:	f8b8 20d4 	ldrh.w	r2, [r8, #212]	; 0xd4
 800d438:	4631      	mov	r1, r6
 800d43a:	f7ff fd87 	bl	800cf4c <dhcp_option_short>
 800d43e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d442:	2304      	movs	r3, #4
 800d444:	2232      	movs	r2, #50	; 0x32
 800d446:	4631      	mov	r1, r6
 800d448:	f7ff fd9e 	bl	800cf88 <dhcp_option>
 800d44c:	4605      	mov	r5, r0
 800d44e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d452:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d454:	f7f8 fe91 	bl	800617a <lwip_htonl>
 800d458:	4602      	mov	r2, r0
 800d45a:	4631      	mov	r1, r6
 800d45c:	4628      	mov	r0, r5
 800d45e:	f7ff fdc9 	bl	800cff4 <dhcp_option_long>
 800d462:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800d466:	2304      	movs	r3, #4
 800d468:	2236      	movs	r2, #54	; 0x36
 800d46a:	4631      	mov	r1, r6
 800d46c:	f7ff fd8c 	bl	800cf88 <dhcp_option>
 800d470:	4605      	mov	r5, r0
 800d472:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800d476:	69a0      	ldr	r0, [r4, #24]
 800d478:	f7f8 fe7f 	bl	800617a <lwip_htonl>
 800d47c:	4602      	mov	r2, r0
 800d47e:	4631      	mov	r1, r6
 800d480:	4628      	mov	r0, r5
 800d482:	f7ff fdb7 	bl	800cff4 <dhcp_option_long>
 800d486:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d48a:	2304      	movs	r3, #4
 800d48c:	2237      	movs	r2, #55	; 0x37
 800d48e:	4631      	mov	r1, r6
 800d490:	f7ff fd7a 	bl	800cf88 <dhcp_option>
 800d494:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d498:	2500      	movs	r5, #0
 800d49a:	e01e      	b.n	800d4da <dhcp_select+0xee>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800d49c:	4b2c      	ldr	r3, [pc, #176]	; (800d550 <dhcp_select+0x164>)
 800d49e:	f240 1277 	movw	r2, #375	; 0x177
 800d4a2:	492c      	ldr	r1, [pc, #176]	; (800d554 <dhcp_select+0x168>)
 800d4a4:	482c      	ldr	r0, [pc, #176]	; (800d558 <dhcp_select+0x16c>)
 800d4a6:	f006 fec5 	bl	8014234 <iprintf>
 800d4aa:	f06f 050f 	mvn.w	r5, #15
 800d4ae:	e044      	b.n	800d53a <dhcp_select+0x14e>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800d4b0:	4b27      	ldr	r3, [pc, #156]	; (800d550 <dhcp_select+0x164>)
 800d4b2:	f240 1279 	movw	r2, #377	; 0x179
 800d4b6:	4929      	ldr	r1, [pc, #164]	; (800d55c <dhcp_select+0x170>)
 800d4b8:	4827      	ldr	r0, [pc, #156]	; (800d558 <dhcp_select+0x16c>)
 800d4ba:	f006 febb 	bl	8014234 <iprintf>
 800d4be:	f06f 0505 	mvn.w	r5, #5
 800d4c2:	e03a      	b.n	800d53a <dhcp_select+0x14e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d4c4:	4b26      	ldr	r3, [pc, #152]	; (800d560 <dhcp_select+0x174>)
 800d4c6:	5d5a      	ldrb	r2, [r3, r5]
 800d4c8:	4631      	mov	r1, r6
 800d4ca:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d4ce:	f7ff fd79 	bl	800cfc4 <dhcp_option_byte>
 800d4d2:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d4d6:	3501      	adds	r5, #1
 800d4d8:	b2ed      	uxtb	r5, r5
 800d4da:	2d03      	cmp	r5, #3
 800d4dc:	d9f2      	bls.n	800d4c4 <dhcp_select+0xd8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d4de:	463a      	mov	r2, r7
 800d4e0:	4631      	mov	r1, r6
 800d4e2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d4e6:	f7ff fe4b 	bl	800d180 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800d4ea:	4b1e      	ldr	r3, [pc, #120]	; (800d564 <dhcp_select+0x178>)
 800d4ec:	9301      	str	r3, [sp, #4]
 800d4ee:	f8cd 8000 	str.w	r8, [sp]
 800d4f2:	2343      	movs	r3, #67	; 0x43
 800d4f4:	4a1c      	ldr	r2, [pc, #112]	; (800d568 <dhcp_select+0x17c>)
 800d4f6:	4639      	mov	r1, r7
 800d4f8:	481c      	ldr	r0, [pc, #112]	; (800d56c <dhcp_select+0x180>)
 800d4fa:	6800      	ldr	r0, [r0, #0]
 800d4fc:	f7ff f946 	bl	800c78c <udp_sendto_if_src>
 800d500:	4605      	mov	r5, r0
    pbuf_free(p_out);
 800d502:	4638      	mov	r0, r7
 800d504:	f7fa f946 	bl	8007794 <pbuf_free>
  if (dhcp->tries < 255) {
 800d508:	79a3      	ldrb	r3, [r4, #6]
 800d50a:	2bff      	cmp	r3, #255	; 0xff
 800d50c:	d001      	beq.n	800d512 <dhcp_select+0x126>
    dhcp->tries++;
 800d50e:	3301      	adds	r3, #1
 800d510:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800d512:	79a2      	ldrb	r2, [r4, #6]
 800d514:	2a05      	cmp	r2, #5
 800d516:	d817      	bhi.n	800d548 <dhcp_select+0x15c>
 800d518:	2301      	movs	r3, #1
 800d51a:	4093      	lsls	r3, r2
 800d51c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800d520:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800d524:	00db      	lsls	r3, r3, #3
 800d526:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d528:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d52c:	4a10      	ldr	r2, [pc, #64]	; (800d570 <dhcp_select+0x184>)
 800d52e:	fb82 1203 	smull	r1, r2, r2, r3
 800d532:	17db      	asrs	r3, r3, #31
 800d534:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800d538:	8123      	strh	r3, [r4, #8]
}
 800d53a:	4628      	mov	r0, r5
 800d53c:	b004      	add	sp, #16
 800d53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 800d542:	f04f 35ff 	mov.w	r5, #4294967295
 800d546:	e7df      	b.n	800d508 <dhcp_select+0x11c>
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800d548:	f64e 2360 	movw	r3, #60000	; 0xea60
 800d54c:	e7ec      	b.n	800d528 <dhcp_select+0x13c>
 800d54e:	bf00      	nop
 800d550:	08017148 	.word	0x08017148
 800d554:	080172f4 	.word	0x080172f4
 800d558:	08015418 	.word	0x08015418
 800d55c:	08017310 	.word	0x08017310
 800d560:	080174c8 	.word	0x080174c8
 800d564:	080178d4 	.word	0x080178d4
 800d568:	080178ec 	.word	0x080178ec
 800d56c:	20000684 	.word	0x20000684
 800d570:	10624dd3 	.word	0x10624dd3

0800d574 <dhcp_handle_offer>:
{
 800d574:	b570      	push	{r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d576:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800d57a:	4b0e      	ldr	r3, [pc, #56]	; (800d5b4 <dhcp_handle_offer+0x40>)
 800d57c:	789b      	ldrb	r3, [r3, #2]
 800d57e:	b1c3      	cbz	r3, 800d5b2 <dhcp_handle_offer+0x3e>
 800d580:	4604      	mov	r4, r0
 800d582:	460e      	mov	r6, r1
    dhcp->request_timeout = 0; /* stop timer */
 800d584:	2300      	movs	r3, #0
 800d586:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800d588:	f115 0f18 	cmn.w	r5, #24
 800d58c:	d00c      	beq.n	800d5a8 <dhcp_handle_offer+0x34>
 800d58e:	4b0a      	ldr	r3, [pc, #40]	; (800d5b8 <dhcp_handle_offer+0x44>)
 800d590:	6898      	ldr	r0, [r3, #8]
 800d592:	f7f8 fdf2 	bl	800617a <lwip_htonl>
 800d596:	61a8      	str	r0, [r5, #24]
 800d598:	2300      	movs	r3, #0
 800d59a:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800d59e:	626b      	str	r3, [r5, #36]	; 0x24
 800d5a0:	622b      	str	r3, [r5, #32]
 800d5a2:	61eb      	str	r3, [r5, #28]
 800d5a4:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800d5a8:	6933      	ldr	r3, [r6, #16]
 800d5aa:	632b      	str	r3, [r5, #48]	; 0x30
    dhcp_select(netif);
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	f7ff ff1d 	bl	800d3ec <dhcp_select>
}
 800d5b2:	bd70      	pop	{r4, r5, r6, pc}
 800d5b4:	20007b3c 	.word	0x20007b3c
 800d5b8:	20007b48 	.word	0x20007b48

0800d5bc <dhcp_discover>:
{
 800d5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c0:	b084      	sub	sp, #16
 800d5c2:	4606      	mov	r6, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d5c4:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	6323      	str	r3, [r4, #48]	; 0x30
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800d5cc:	2106      	movs	r1, #6
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	f7ff fcb4 	bl	800cf3c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800d5d4:	f10d 030e 	add.w	r3, sp, #14
 800d5d8:	2201      	movs	r2, #1
 800d5da:	4621      	mov	r1, r4
 800d5dc:	4630      	mov	r0, r6
 800d5de:	f7ff fd31 	bl	800d044 <dhcp_create_msg>
  if (p_out != NULL) {
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d03b      	beq.n	800d65e <dhcp_discover+0xa2>
 800d5e6:	4680      	mov	r8, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d5e8:	6847      	ldr	r7, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d5ea:	37f0      	adds	r7, #240	; 0xf0
 800d5ec:	2302      	movs	r3, #2
 800d5ee:	2239      	movs	r2, #57	; 0x39
 800d5f0:	4639      	mov	r1, r7
 800d5f2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d5f6:	f7ff fcc7 	bl	800cf88 <dhcp_option>
 800d5fa:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d5fe:	f8b6 20d4 	ldrh.w	r2, [r6, #212]	; 0xd4
 800d602:	4639      	mov	r1, r7
 800d604:	f7ff fca2 	bl	800cf4c <dhcp_option_short>
 800d608:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d60c:	2304      	movs	r3, #4
 800d60e:	2237      	movs	r2, #55	; 0x37
 800d610:	4639      	mov	r1, r7
 800d612:	f7ff fcb9 	bl	800cf88 <dhcp_option>
 800d616:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d61a:	2500      	movs	r5, #0
 800d61c:	e00a      	b.n	800d634 <dhcp_discover+0x78>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d61e:	4b20      	ldr	r3, [pc, #128]	; (800d6a0 <dhcp_discover+0xe4>)
 800d620:	5d5a      	ldrb	r2, [r3, r5]
 800d622:	4639      	mov	r1, r7
 800d624:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d628:	f7ff fccc 	bl	800cfc4 <dhcp_option_byte>
 800d62c:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d630:	3501      	adds	r5, #1
 800d632:	b2ed      	uxtb	r5, r5
 800d634:	2d03      	cmp	r5, #3
 800d636:	d9f2      	bls.n	800d61e <dhcp_discover+0x62>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d638:	4642      	mov	r2, r8
 800d63a:	4639      	mov	r1, r7
 800d63c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d640:	f7ff fd9e 	bl	800d180 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800d644:	4b17      	ldr	r3, [pc, #92]	; (800d6a4 <dhcp_discover+0xe8>)
 800d646:	9301      	str	r3, [sp, #4]
 800d648:	9600      	str	r6, [sp, #0]
 800d64a:	2343      	movs	r3, #67	; 0x43
 800d64c:	4a16      	ldr	r2, [pc, #88]	; (800d6a8 <dhcp_discover+0xec>)
 800d64e:	4641      	mov	r1, r8
 800d650:	4816      	ldr	r0, [pc, #88]	; (800d6ac <dhcp_discover+0xf0>)
 800d652:	6800      	ldr	r0, [r0, #0]
 800d654:	f7ff f89a 	bl	800c78c <udp_sendto_if_src>
    pbuf_free(p_out);
 800d658:	4640      	mov	r0, r8
 800d65a:	f7fa f89b 	bl	8007794 <pbuf_free>
  if (dhcp->tries < 255) {
 800d65e:	79a3      	ldrb	r3, [r4, #6]
 800d660:	2bff      	cmp	r3, #255	; 0xff
 800d662:	d001      	beq.n	800d668 <dhcp_discover+0xac>
    dhcp->tries++;
 800d664:	3301      	adds	r3, #1
 800d666:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800d668:	79a2      	ldrb	r2, [r4, #6]
 800d66a:	2a05      	cmp	r2, #5
 800d66c:	d814      	bhi.n	800d698 <dhcp_discover+0xdc>
 800d66e:	2301      	movs	r3, #1
 800d670:	4093      	lsls	r3, r2
 800d672:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800d676:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800d67a:	00db      	lsls	r3, r3, #3
 800d67c:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d67e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d682:	4a0b      	ldr	r2, [pc, #44]	; (800d6b0 <dhcp_discover+0xf4>)
 800d684:	fb82 1203 	smull	r1, r2, r2, r3
 800d688:	17db      	asrs	r3, r3, #31
 800d68a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800d68e:	8123      	strh	r3, [r4, #8]
}
 800d690:	2000      	movs	r0, #0
 800d692:	b004      	add	sp, #16
 800d694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800d698:	f64e 2360 	movw	r3, #60000	; 0xea60
 800d69c:	e7ef      	b.n	800d67e <dhcp_discover+0xc2>
 800d69e:	bf00      	nop
 800d6a0:	080174c8 	.word	0x080174c8
 800d6a4:	080178d4 	.word	0x080178d4
 800d6a8:	080178ec 	.word	0x080178ec
 800d6ac:	20000684 	.word	0x20000684
 800d6b0:	10624dd3 	.word	0x10624dd3

0800d6b4 <dhcp_decline>:
{
 800d6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6b8:	b084      	sub	sp, #16
 800d6ba:	4605      	mov	r5, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d6bc:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800d6c0:	210c      	movs	r1, #12
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	f7ff fc3a 	bl	800cf3c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800d6c8:	f10d 030e 	add.w	r3, sp, #14
 800d6cc:	2204      	movs	r2, #4
 800d6ce:	4621      	mov	r1, r4
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	f7ff fcb7 	bl	800d044 <dhcp_create_msg>
  if (p_out != NULL) {
 800d6d6:	b398      	cbz	r0, 800d740 <dhcp_decline+0x8c>
 800d6d8:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d6da:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d6dc:	36f0      	adds	r6, #240	; 0xf0
 800d6de:	2304      	movs	r3, #4
 800d6e0:	2232      	movs	r2, #50	; 0x32
 800d6e2:	4631      	mov	r1, r6
 800d6e4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800d6e8:	f7ff fc4e 	bl	800cf88 <dhcp_option>
 800d6ec:	4680      	mov	r8, r0
 800d6ee:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d6f2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d6f4:	f7f8 fd41 	bl	800617a <lwip_htonl>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	4631      	mov	r1, r6
 800d6fc:	4640      	mov	r0, r8
 800d6fe:	f7ff fc79 	bl	800cff4 <dhcp_option_long>
 800d702:	f8ad 000e 	strh.w	r0, [sp, #14]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d706:	463a      	mov	r2, r7
 800d708:	4631      	mov	r1, r6
 800d70a:	f7ff fd39 	bl	800d180 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800d70e:	4b0e      	ldr	r3, [pc, #56]	; (800d748 <dhcp_decline+0x94>)
 800d710:	9301      	str	r3, [sp, #4]
 800d712:	9500      	str	r5, [sp, #0]
 800d714:	2343      	movs	r3, #67	; 0x43
 800d716:	4a0d      	ldr	r2, [pc, #52]	; (800d74c <dhcp_decline+0x98>)
 800d718:	4639      	mov	r1, r7
 800d71a:	480d      	ldr	r0, [pc, #52]	; (800d750 <dhcp_decline+0x9c>)
 800d71c:	6800      	ldr	r0, [r0, #0]
 800d71e:	f7ff f835 	bl	800c78c <udp_sendto_if_src>
 800d722:	4605      	mov	r5, r0
    pbuf_free(p_out);
 800d724:	4638      	mov	r0, r7
 800d726:	f7fa f835 	bl	8007794 <pbuf_free>
  if (dhcp->tries < 255) {
 800d72a:	79a3      	ldrb	r3, [r4, #6]
 800d72c:	2bff      	cmp	r3, #255	; 0xff
 800d72e:	d001      	beq.n	800d734 <dhcp_decline+0x80>
    dhcp->tries++;
 800d730:	3301      	adds	r3, #1
 800d732:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d734:	2314      	movs	r3, #20
 800d736:	8123      	strh	r3, [r4, #8]
}
 800d738:	4628      	mov	r0, r5
 800d73a:	b004      	add	sp, #16
 800d73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 800d740:	f04f 35ff 	mov.w	r5, #4294967295
 800d744:	e7f1      	b.n	800d72a <dhcp_decline+0x76>
 800d746:	bf00      	nop
 800d748:	080178d4 	.word	0x080178d4
 800d74c:	080178ec 	.word	0x080178ec
 800d750:	20000684 	.word	0x20000684

0800d754 <dhcp_check>:
{
 800d754:	b538      	push	{r3, r4, r5, lr}
 800d756:	4605      	mov	r5, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d758:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800d75c:	2108      	movs	r1, #8
 800d75e:	4620      	mov	r0, r4
 800d760:	f7ff fbec 	bl	800cf3c <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800d764:	2200      	movs	r2, #0
 800d766:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d76a:	4628      	mov	r0, r5
 800d76c:	f001 f9bc 	bl	800eae8 <etharp_query>
  if (dhcp->tries < 255) {
 800d770:	79a3      	ldrb	r3, [r4, #6]
 800d772:	2bff      	cmp	r3, #255	; 0xff
 800d774:	d001      	beq.n	800d77a <dhcp_check+0x26>
    dhcp->tries++;
 800d776:	3301      	adds	r3, #1
 800d778:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d77a:	2301      	movs	r3, #1
 800d77c:	8123      	strh	r3, [r4, #8]
}
 800d77e:	bd38      	pop	{r3, r4, r5, pc}

0800d780 <dhcp_bind>:
{
 800d780:	b530      	push	{r4, r5, lr}
 800d782:	b083      	sub	sp, #12
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800d784:	2800      	cmp	r0, #0
 800d786:	d065      	beq.n	800d854 <dhcp_bind+0xd4>
 800d788:	4605      	mov	r5, r0
  dhcp = netif_dhcp_data(netif);
 800d78a:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800d78e:	2c00      	cmp	r4, #0
 800d790:	d068      	beq.n	800d864 <dhcp_bind+0xe4>
  dhcp->lease_used = 0;
 800d792:	2300      	movs	r3, #0
 800d794:	8263      	strh	r3, [r4, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800d796:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d798:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d79c:	d00f      	beq.n	800d7be <dhcp_bind+0x3e>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d79e:	321e      	adds	r2, #30
 800d7a0:	f1a3 3377 	sub.w	r3, r3, #2004318071	; 0x77777777
 800d7a4:	fba3 1302 	umull	r1, r3, r3, r2
 800d7a8:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 800d7aa:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 800d7ae:	d301      	bcc.n	800d7b4 <dhcp_bind+0x34>
      timeout = 0xffff;
 800d7b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t0_timeout = (u16_t)timeout;
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	82a3      	strh	r3, [r4, #20]
    if (dhcp->t0_timeout == 0) {
 800d7b8:	b90b      	cbnz	r3, 800d7be <dhcp_bind+0x3e>
      dhcp->t0_timeout = 1;
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	82a3      	strh	r3, [r4, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800d7be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800d7c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d7c4:	d010      	beq.n	800d7e8 <dhcp_bind+0x68>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d7c6:	321e      	adds	r2, #30
 800d7c8:	4b34      	ldr	r3, [pc, #208]	; (800d89c <dhcp_bind+0x11c>)
 800d7ca:	fba3 1302 	umull	r1, r3, r3, r2
 800d7ce:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 800d7d0:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 800d7d4:	d301      	bcc.n	800d7da <dhcp_bind+0x5a>
      timeout = 0xffff;
 800d7d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t1_timeout = (u16_t)timeout;
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	8163      	strh	r3, [r4, #10]
    if (dhcp->t1_timeout == 0) {
 800d7de:	b90b      	cbnz	r3, 800d7e4 <dhcp_bind+0x64>
      dhcp->t1_timeout = 1;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	8163      	strh	r3, [r4, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800d7e4:	8963      	ldrh	r3, [r4, #10]
 800d7e6:	81e3      	strh	r3, [r4, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800d7e8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800d7ea:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d7ee:	d010      	beq.n	800d812 <dhcp_bind+0x92>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d7f0:	321e      	adds	r2, #30
 800d7f2:	4b2a      	ldr	r3, [pc, #168]	; (800d89c <dhcp_bind+0x11c>)
 800d7f4:	fba3 1302 	umull	r1, r3, r3, r2
 800d7f8:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 800d7fa:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 800d7fe:	d301      	bcc.n	800d804 <dhcp_bind+0x84>
      timeout = 0xffff;
 800d800:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t2_timeout = (u16_t)timeout;
 800d804:	b29b      	uxth	r3, r3
 800d806:	81a3      	strh	r3, [r4, #12]
    if (dhcp->t2_timeout == 0) {
 800d808:	b90b      	cbnz	r3, 800d80e <dhcp_bind+0x8e>
      dhcp->t2_timeout = 1;
 800d80a:	2301      	movs	r3, #1
 800d80c:	81a3      	strh	r3, [r4, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800d80e:	89a3      	ldrh	r3, [r4, #12]
 800d810:	8223      	strh	r3, [r4, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800d812:	8962      	ldrh	r2, [r4, #10]
 800d814:	89a3      	ldrh	r3, [r4, #12]
 800d816:	429a      	cmp	r2, r3
 800d818:	d302      	bcc.n	800d820 <dhcp_bind+0xa0>
 800d81a:	b10b      	cbz	r3, 800d820 <dhcp_bind+0xa0>
    dhcp->t1_timeout = 0;
 800d81c:	2300      	movs	r3, #0
 800d81e:	8163      	strh	r3, [r4, #10]
  if (dhcp->subnet_mask_given) {
 800d820:	79e3      	ldrb	r3, [r4, #7]
 800d822:	b33b      	cbz	r3, 800d874 <dhcp_bind+0xf4>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800d824:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d826:	9301      	str	r3, [sp, #4]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800d828:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d82a:	9300      	str	r3, [sp, #0]
  if (ip4_addr_isany_val(gw_addr)) {
 800d82c:	b92b      	cbnz	r3, 800d83a <dhcp_bind+0xba>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800d82e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d830:	9a01      	ldr	r2, [sp, #4]
 800d832:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800d834:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d838:	9300      	str	r3, [sp, #0]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800d83a:	210a      	movs	r1, #10
 800d83c:	4620      	mov	r0, r4
 800d83e:	f7ff fb7d 	bl	800cf3c <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800d842:	466b      	mov	r3, sp
 800d844:	aa01      	add	r2, sp, #4
 800d846:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d84a:	4628      	mov	r0, r5
 800d84c:	f7f9 fbce 	bl	8006fec <netif_set_addr>
}
 800d850:	b003      	add	sp, #12
 800d852:	bd30      	pop	{r4, r5, pc}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800d854:	4b12      	ldr	r3, [pc, #72]	; (800d8a0 <dhcp_bind+0x120>)
 800d856:	f240 4215 	movw	r2, #1045	; 0x415
 800d85a:	4912      	ldr	r1, [pc, #72]	; (800d8a4 <dhcp_bind+0x124>)
 800d85c:	4812      	ldr	r0, [pc, #72]	; (800d8a8 <dhcp_bind+0x128>)
 800d85e:	f006 fce9 	bl	8014234 <iprintf>
 800d862:	e7f5      	b.n	800d850 <dhcp_bind+0xd0>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800d864:	4b0e      	ldr	r3, [pc, #56]	; (800d8a0 <dhcp_bind+0x120>)
 800d866:	f240 4217 	movw	r2, #1047	; 0x417
 800d86a:	4910      	ldr	r1, [pc, #64]	; (800d8ac <dhcp_bind+0x12c>)
 800d86c:	480e      	ldr	r0, [pc, #56]	; (800d8a8 <dhcp_bind+0x128>)
 800d86e:	f006 fce1 	bl	8014234 <iprintf>
 800d872:	e7ed      	b.n	800d850 <dhcp_bind+0xd0>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800d874:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    if (first_octet <= 127) {
 800d878:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	db02      	blt.n	800d886 <dhcp_bind+0x106>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800d880:	23ff      	movs	r3, #255	; 0xff
 800d882:	9301      	str	r3, [sp, #4]
 800d884:	e7d0      	b.n	800d828 <dhcp_bind+0xa8>
    } else if (first_octet >= 192) {
 800d886:	2abf      	cmp	r2, #191	; 0xbf
 800d888:	d903      	bls.n	800d892 <dhcp_bind+0x112>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800d88a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800d88e:	9301      	str	r3, [sp, #4]
 800d890:	e7ca      	b.n	800d828 <dhcp_bind+0xa8>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800d892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d896:	9301      	str	r3, [sp, #4]
 800d898:	e7c6      	b.n	800d828 <dhcp_bind+0xa8>
 800d89a:	bf00      	nop
 800d89c:	88888889 	.word	0x88888889
 800d8a0:	08017148 	.word	0x08017148
 800d8a4:	0801732c 	.word	0x0801732c
 800d8a8:	08015418 	.word	0x08015418
 800d8ac:	08017348 	.word	0x08017348

0800d8b0 <dhcp_handle_nak>:
{
 800d8b0:	b510      	push	{r4, lr}
 800d8b2:	4604      	mov	r4, r0
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800d8b4:	210c      	movs	r1, #12
 800d8b6:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 800d8ba:	f7ff fb3f 	bl	800cf3c <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800d8be:	4905      	ldr	r1, [pc, #20]	; (800d8d4 <dhcp_handle_nak+0x24>)
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	460a      	mov	r2, r1
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	f7f9 fb91 	bl	8006fec <netif_set_addr>
  dhcp_discover(netif);
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	f7ff fe76 	bl	800d5bc <dhcp_discover>
}
 800d8d0:	bd10      	pop	{r4, pc}
 800d8d2:	bf00      	nop
 800d8d4:	080178d4 	.word	0x080178d4

0800d8d8 <dhcp_dec_pcb_refcount>:
{
 800d8d8:	b510      	push	{r4, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800d8da:	4b0c      	ldr	r3, [pc, #48]	; (800d90c <dhcp_dec_pcb_refcount+0x34>)
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	b133      	cbz	r3, 800d8ee <dhcp_dec_pcb_refcount+0x16>
  dhcp_pcb_refcount--;
 800d8e0:	4a0a      	ldr	r2, [pc, #40]	; (800d90c <dhcp_dec_pcb_refcount+0x34>)
 800d8e2:	7813      	ldrb	r3, [r2, #0]
 800d8e4:	3b01      	subs	r3, #1
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	7013      	strb	r3, [r2, #0]
  if (dhcp_pcb_refcount == 0) {
 800d8ea:	b13b      	cbz	r3, 800d8fc <dhcp_dec_pcb_refcount+0x24>
}
 800d8ec:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800d8ee:	4b08      	ldr	r3, [pc, #32]	; (800d910 <dhcp_dec_pcb_refcount+0x38>)
 800d8f0:	22ff      	movs	r2, #255	; 0xff
 800d8f2:	4908      	ldr	r1, [pc, #32]	; (800d914 <dhcp_dec_pcb_refcount+0x3c>)
 800d8f4:	4808      	ldr	r0, [pc, #32]	; (800d918 <dhcp_dec_pcb_refcount+0x40>)
 800d8f6:	f006 fc9d 	bl	8014234 <iprintf>
 800d8fa:	e7f1      	b.n	800d8e0 <dhcp_dec_pcb_refcount+0x8>
    udp_remove(dhcp_pcb);
 800d8fc:	4c07      	ldr	r4, [pc, #28]	; (800d91c <dhcp_dec_pcb_refcount+0x44>)
 800d8fe:	6820      	ldr	r0, [r4, #0]
 800d900:	f7ff fa42 	bl	800cd88 <udp_remove>
    dhcp_pcb = NULL;
 800d904:	2300      	movs	r3, #0
 800d906:	6023      	str	r3, [r4, #0]
}
 800d908:	e7f0      	b.n	800d8ec <dhcp_dec_pcb_refcount+0x14>
 800d90a:	bf00      	nop
 800d90c:	20000688 	.word	0x20000688
 800d910:	08017148 	.word	0x08017148
 800d914:	08017360 	.word	0x08017360
 800d918:	08015418 	.word	0x08015418
 800d91c:	20000684 	.word	0x20000684

0800d920 <dhcp_inc_pcb_refcount>:
{
 800d920:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 800d922:	4b18      	ldr	r3, [pc, #96]	; (800d984 <dhcp_inc_pcb_refcount+0x64>)
 800d924:	781b      	ldrb	r3, [r3, #0]
 800d926:	bb1b      	cbnz	r3, 800d970 <dhcp_inc_pcb_refcount+0x50>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800d928:	4b17      	ldr	r3, [pc, #92]	; (800d988 <dhcp_inc_pcb_refcount+0x68>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	b12b      	cbz	r3, 800d93a <dhcp_inc_pcb_refcount+0x1a>
 800d92e:	4b17      	ldr	r3, [pc, #92]	; (800d98c <dhcp_inc_pcb_refcount+0x6c>)
 800d930:	22e5      	movs	r2, #229	; 0xe5
 800d932:	4917      	ldr	r1, [pc, #92]	; (800d990 <dhcp_inc_pcb_refcount+0x70>)
 800d934:	4817      	ldr	r0, [pc, #92]	; (800d994 <dhcp_inc_pcb_refcount+0x74>)
 800d936:	f006 fc7d 	bl	8014234 <iprintf>
    dhcp_pcb = udp_new();
 800d93a:	f7ff fa4f 	bl	800cddc <udp_new>
 800d93e:	4b12      	ldr	r3, [pc, #72]	; (800d988 <dhcp_inc_pcb_refcount+0x68>)
 800d940:	6018      	str	r0, [r3, #0]
    if (dhcp_pcb == NULL) {
 800d942:	b1d8      	cbz	r0, 800d97c <dhcp_inc_pcb_refcount+0x5c>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800d944:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800d948:	f043 0320 	orr.w	r3, r3, #32
 800d94c:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800d950:	4d11      	ldr	r5, [pc, #68]	; (800d998 <dhcp_inc_pcb_refcount+0x78>)
 800d952:	2244      	movs	r2, #68	; 0x44
 800d954:	4629      	mov	r1, r5
 800d956:	f7fe fdb7 	bl	800c4c8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800d95a:	4c0b      	ldr	r4, [pc, #44]	; (800d988 <dhcp_inc_pcb_refcount+0x68>)
 800d95c:	2243      	movs	r2, #67	; 0x43
 800d95e:	4629      	mov	r1, r5
 800d960:	6820      	ldr	r0, [r4, #0]
 800d962:	f7ff f947 	bl	800cbf4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800d966:	2200      	movs	r2, #0
 800d968:	490c      	ldr	r1, [pc, #48]	; (800d99c <dhcp_inc_pcb_refcount+0x7c>)
 800d96a:	6820      	ldr	r0, [r4, #0]
 800d96c:	f7ff f9f8 	bl	800cd60 <udp_recv>
  dhcp_pcb_refcount++;
 800d970:	4a04      	ldr	r2, [pc, #16]	; (800d984 <dhcp_inc_pcb_refcount+0x64>)
 800d972:	7813      	ldrb	r3, [r2, #0]
 800d974:	3301      	adds	r3, #1
 800d976:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 800d978:	2000      	movs	r0, #0
}
 800d97a:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 800d97c:	f04f 30ff 	mov.w	r0, #4294967295
 800d980:	e7fb      	b.n	800d97a <dhcp_inc_pcb_refcount+0x5a>
 800d982:	bf00      	nop
 800d984:	20000688 	.word	0x20000688
 800d988:	20000684 	.word	0x20000684
 800d98c:	08017148 	.word	0x08017148
 800d990:	08017384 	.word	0x08017384
 800d994:	08015418 	.word	0x08015418
 800d998:	080178d4 	.word	0x080178d4
 800d99c:	0800df2d 	.word	0x0800df2d

0800d9a0 <dhcp_parse_reply>:
{
 800d9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a4:	b087      	sub	sp, #28
 800d9a6:	9002      	str	r0, [sp, #8]
  dhcp_clear_all_options(dhcp);
 800d9a8:	4b6d      	ldr	r3, [pc, #436]	; (800db60 <dhcp_parse_reply+0x1c0>)
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	601a      	str	r2, [r3, #0]
 800d9ae:	605a      	str	r2, [r3, #4]
 800d9b0:	811a      	strh	r2, [r3, #8]
  if (p->len < DHCP_SNAME_OFS) {
 800d9b2:	8943      	ldrh	r3, [r0, #10]
 800d9b4:	2b2b      	cmp	r3, #43	; 0x2b
 800d9b6:	f240 823a 	bls.w	800de2e <dhcp_parse_reply+0x48e>
  options_idx_max = p->tot_len;
 800d9ba:	8904      	ldrh	r4, [r0, #8]
  int parse_sname_as_options = 0;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	9303      	str	r3, [sp, #12]
  options_idx = DHCP_OPTIONS_OFS;
 800d9c0:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
  q = p;
 800d9c4:	9e02      	ldr	r6, [sp, #8]
  while ((q != NULL) && (options_idx >= q->len)) {
 800d9c6:	b156      	cbz	r6, 800d9de <dhcp_parse_reply+0x3e>
 800d9c8:	8973      	ldrh	r3, [r6, #10]
 800d9ca:	455b      	cmp	r3, fp
 800d9cc:	d807      	bhi.n	800d9de <dhcp_parse_reply+0x3e>
    options_idx = (u16_t)(options_idx - q->len);
 800d9ce:	ebab 0b03 	sub.w	fp, fp, r3
 800d9d2:	fa1f fb8b 	uxth.w	fp, fp
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800d9d6:	1ae4      	subs	r4, r4, r3
 800d9d8:	b2a4      	uxth	r4, r4
    q = q->next;
 800d9da:	6836      	ldr	r6, [r6, #0]
 800d9dc:	e7f3      	b.n	800d9c6 <dhcp_parse_reply+0x26>
  if (q == NULL) {
 800d9de:	2e00      	cmp	r6, #0
 800d9e0:	f000 8228 	beq.w	800de34 <dhcp_parse_reply+0x494>
  options = (u8_t *)q->payload;
 800d9e4:	6873      	ldr	r3, [r6, #4]
 800d9e6:	9301      	str	r3, [sp, #4]
  offset = options_idx;
 800d9e8:	465d      	mov	r5, fp
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800d9ea:	e0e1      	b.n	800dbb0 <dhcp_parse_reply+0x210>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800d9ec:	6833      	ldr	r3, [r6, #0]
 800d9ee:	b113      	cbz	r3, 800d9f6 <dhcp_parse_reply+0x56>
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	e0f8      	b.n	800dbe8 <dhcp_parse_reply+0x248>
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	e0f6      	b.n	800dbe8 <dhcp_parse_reply+0x248>
        decode_len = 0;
 800d9fa:	4617      	mov	r7, r2
 800d9fc:	4613      	mov	r3, r2
 800d9fe:	f04f 39ff 	mov.w	r9, #4294967295
 800da02:	e0c0      	b.n	800db86 <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800da04:	2b04      	cmp	r3, #4
 800da06:	d103      	bne.n	800da10 <dhcp_parse_reply+0x70>
    decode_len = len;
 800da08:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800da0a:	f04f 0906 	mov.w	r9, #6
 800da0e:	e0ba      	b.n	800db86 <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800da10:	4b54      	ldr	r3, [pc, #336]	; (800db64 <dhcp_parse_reply+0x1c4>)
 800da12:	f240 622e 	movw	r2, #1582	; 0x62e
 800da16:	4954      	ldr	r1, [pc, #336]	; (800db68 <dhcp_parse_reply+0x1c8>)
 800da18:	4854      	ldr	r0, [pc, #336]	; (800db6c <dhcp_parse_reply+0x1cc>)
 800da1a:	f006 fc0b 	bl	8014234 <iprintf>
 800da1e:	f06f 0005 	mvn.w	r0, #5
 800da22:	e1d3      	b.n	800ddcc <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800da24:	2b03      	cmp	r3, #3
 800da26:	d903      	bls.n	800da30 <dhcp_parse_reply+0x90>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800da28:	f04f 0907 	mov.w	r9, #7
        decode_len = 4; /* only copy the first given router */
 800da2c:	2704      	movs	r7, #4
 800da2e:	e0aa      	b.n	800db86 <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800da30:	4b4c      	ldr	r3, [pc, #304]	; (800db64 <dhcp_parse_reply+0x1c4>)
 800da32:	f240 6233 	movw	r2, #1587	; 0x633
 800da36:	494e      	ldr	r1, [pc, #312]	; (800db70 <dhcp_parse_reply+0x1d0>)
 800da38:	484c      	ldr	r0, [pc, #304]	; (800db6c <dhcp_parse_reply+0x1cc>)
 800da3a:	f006 fbfb 	bl	8014234 <iprintf>
 800da3e:	f06f 0005 	mvn.w	r0, #5
 800da42:	e1c3      	b.n	800ddcc <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 800da44:	f013 0f03 	tst.w	r3, #3
 800da48:	d109      	bne.n	800da5e <dhcp_parse_reply+0xbe>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 800da4a:	461f      	mov	r7, r3
 800da4c:	2b08      	cmp	r3, #8
 800da4e:	bf28      	it	cs
 800da50:	2708      	movcs	r7, #8
 800da52:	b2ff      	uxtb	r7, r7
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800da54:	42bb      	cmp	r3, r7
 800da56:	d30c      	bcc.n	800da72 <dhcp_parse_reply+0xd2>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 800da58:	f04f 0908 	mov.w	r9, #8
 800da5c:	e093      	b.n	800db86 <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 800da5e:	4b41      	ldr	r3, [pc, #260]	; (800db64 <dhcp_parse_reply+0x1c4>)
 800da60:	f240 6239 	movw	r2, #1593	; 0x639
 800da64:	4943      	ldr	r1, [pc, #268]	; (800db74 <dhcp_parse_reply+0x1d4>)
 800da66:	4841      	ldr	r0, [pc, #260]	; (800db6c <dhcp_parse_reply+0x1cc>)
 800da68:	f006 fbe4 	bl	8014234 <iprintf>
 800da6c:	f06f 0005 	mvn.w	r0, #5
 800da70:	e1ac      	b.n	800ddcc <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800da72:	4b3c      	ldr	r3, [pc, #240]	; (800db64 <dhcp_parse_reply+0x1c4>)
 800da74:	f240 623c 	movw	r2, #1596	; 0x63c
 800da78:	493d      	ldr	r1, [pc, #244]	; (800db70 <dhcp_parse_reply+0x1d0>)
 800da7a:	483c      	ldr	r0, [pc, #240]	; (800db6c <dhcp_parse_reply+0x1cc>)
 800da7c:	f006 fbda 	bl	8014234 <iprintf>
 800da80:	f06f 0005 	mvn.w	r0, #5
 800da84:	e1a2      	b.n	800ddcc <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800da86:	2b04      	cmp	r3, #4
 800da88:	d103      	bne.n	800da92 <dhcp_parse_reply+0xf2>
    decode_len = len;
 800da8a:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800da8c:	f04f 0903 	mov.w	r9, #3
 800da90:	e079      	b.n	800db86 <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800da92:	4b34      	ldr	r3, [pc, #208]	; (800db64 <dhcp_parse_reply+0x1c4>)
 800da94:	f240 6241 	movw	r2, #1601	; 0x641
 800da98:	4933      	ldr	r1, [pc, #204]	; (800db68 <dhcp_parse_reply+0x1c8>)
 800da9a:	4834      	ldr	r0, [pc, #208]	; (800db6c <dhcp_parse_reply+0x1cc>)
 800da9c:	f006 fbca 	bl	8014234 <iprintf>
 800daa0:	f06f 0005 	mvn.w	r0, #5
 800daa4:	e192      	b.n	800ddcc <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d106      	bne.n	800dab8 <dhcp_parse_reply+0x118>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800daaa:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
 800daae:	d10d      	bne.n	800dacc <dhcp_parse_reply+0x12c>
    decode_len = len;
 800dab0:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800dab2:	f04f 0900 	mov.w	r9, #0
 800dab6:	e066      	b.n	800db86 <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800dab8:	4b2a      	ldr	r3, [pc, #168]	; (800db64 <dhcp_parse_reply+0x1c4>)
 800daba:	f240 624f 	movw	r2, #1615	; 0x64f
 800dabe:	492e      	ldr	r1, [pc, #184]	; (800db78 <dhcp_parse_reply+0x1d8>)
 800dac0:	482a      	ldr	r0, [pc, #168]	; (800db6c <dhcp_parse_reply+0x1cc>)
 800dac2:	f006 fbb7 	bl	8014234 <iprintf>
 800dac6:	f06f 0005 	mvn.w	r0, #5
 800daca:	e17f      	b.n	800ddcc <dhcp_parse_reply+0x42c>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800dacc:	4b25      	ldr	r3, [pc, #148]	; (800db64 <dhcp_parse_reply+0x1c4>)
 800dace:	f240 6251 	movw	r2, #1617	; 0x651
 800dad2:	492a      	ldr	r1, [pc, #168]	; (800db7c <dhcp_parse_reply+0x1dc>)
 800dad4:	4825      	ldr	r0, [pc, #148]	; (800db6c <dhcp_parse_reply+0x1cc>)
 800dad6:	f006 fbad 	bl	8014234 <iprintf>
 800dada:	f06f 0005 	mvn.w	r0, #5
 800dade:	e175      	b.n	800ddcc <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d103      	bne.n	800daec <dhcp_parse_reply+0x14c>
    decode_len = len;
 800dae4:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800dae6:	f04f 0901 	mov.w	r9, #1
 800daea:	e04c      	b.n	800db86 <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800daec:	4b1d      	ldr	r3, [pc, #116]	; (800db64 <dhcp_parse_reply+0x1c4>)
 800daee:	f240 6255 	movw	r2, #1621	; 0x655
 800daf2:	4921      	ldr	r1, [pc, #132]	; (800db78 <dhcp_parse_reply+0x1d8>)
 800daf4:	481d      	ldr	r0, [pc, #116]	; (800db6c <dhcp_parse_reply+0x1cc>)
 800daf6:	f006 fb9d 	bl	8014234 <iprintf>
 800dafa:	f06f 0005 	mvn.w	r0, #5
 800dafe:	e165      	b.n	800ddcc <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800db00:	2b04      	cmp	r3, #4
 800db02:	d103      	bne.n	800db0c <dhcp_parse_reply+0x16c>
    decode_len = len;
 800db04:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800db06:	f04f 0902 	mov.w	r9, #2
 800db0a:	e03c      	b.n	800db86 <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800db0c:	4b15      	ldr	r3, [pc, #84]	; (800db64 <dhcp_parse_reply+0x1c4>)
 800db0e:	f240 6259 	movw	r2, #1625	; 0x659
 800db12:	4915      	ldr	r1, [pc, #84]	; (800db68 <dhcp_parse_reply+0x1c8>)
 800db14:	4815      	ldr	r0, [pc, #84]	; (800db6c <dhcp_parse_reply+0x1cc>)
 800db16:	f006 fb8d 	bl	8014234 <iprintf>
 800db1a:	f06f 0005 	mvn.w	r0, #5
 800db1e:	e155      	b.n	800ddcc <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800db20:	2b04      	cmp	r3, #4
 800db22:	d103      	bne.n	800db2c <dhcp_parse_reply+0x18c>
    decode_len = len;
 800db24:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 800db26:	f04f 0904 	mov.w	r9, #4
 800db2a:	e02c      	b.n	800db86 <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800db2c:	4b0d      	ldr	r3, [pc, #52]	; (800db64 <dhcp_parse_reply+0x1c4>)
 800db2e:	f240 625d 	movw	r2, #1629	; 0x65d
 800db32:	490d      	ldr	r1, [pc, #52]	; (800db68 <dhcp_parse_reply+0x1c8>)
 800db34:	480d      	ldr	r0, [pc, #52]	; (800db6c <dhcp_parse_reply+0x1cc>)
 800db36:	f006 fb7d 	bl	8014234 <iprintf>
 800db3a:	f06f 0005 	mvn.w	r0, #5
 800db3e:	e145      	b.n	800ddcc <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800db40:	2b04      	cmp	r3, #4
 800db42:	d103      	bne.n	800db4c <dhcp_parse_reply+0x1ac>
    decode_len = len;
 800db44:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 800db46:	f04f 0905 	mov.w	r9, #5
 800db4a:	e01c      	b.n	800db86 <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800db4c:	4b05      	ldr	r3, [pc, #20]	; (800db64 <dhcp_parse_reply+0x1c4>)
 800db4e:	f240 6261 	movw	r2, #1633	; 0x661
 800db52:	4905      	ldr	r1, [pc, #20]	; (800db68 <dhcp_parse_reply+0x1c8>)
 800db54:	4805      	ldr	r0, [pc, #20]	; (800db6c <dhcp_parse_reply+0x1cc>)
 800db56:	f006 fb6d 	bl	8014234 <iprintf>
 800db5a:	f06f 0005 	mvn.w	r0, #5
 800db5e:	e135      	b.n	800ddcc <dhcp_parse_reply+0x42c>
 800db60:	20007b3c 	.word	0x20007b3c
 800db64:	08017148 	.word	0x08017148
 800db68:	080173ac 	.word	0x080173ac
 800db6c:	08015418 	.word	0x08015418
 800db70:	080173b8 	.word	0x080173b8
 800db74:	080173cc 	.word	0x080173cc
 800db78:	080173dc 	.word	0x080173dc
 800db7c:	080173e8 	.word	0x080173e8
    int decode_idx = -1;
 800db80:	f04f 39ff 	mov.w	r9, #4294967295
        decode_len = 0;
 800db84:	2700      	movs	r7, #0
    if (op == DHCP_OPTION_PAD) {
 800db86:	2a00      	cmp	r2, #0
 800db88:	f040 80ac 	bne.w	800dce4 <dhcp_parse_reply+0x344>
      offset++;
 800db8c:	3501      	adds	r5, #1
 800db8e:	b2ad      	uxth	r5, r5
    if (offset >= q->len) {
 800db90:	8973      	ldrh	r3, [r6, #10]
 800db92:	42ab      	cmp	r3, r5
 800db94:	d80c      	bhi.n	800dbb0 <dhcp_parse_reply+0x210>
      offset = (u16_t)(offset - q->len);
 800db96:	1aed      	subs	r5, r5, r3
 800db98:	b2ad      	uxth	r5, r5
      offset_max = (u16_t)(offset_max - q->len);
 800db9a:	1ae4      	subs	r4, r4, r3
 800db9c:	b2a4      	uxth	r4, r4
      if (offset < offset_max) {
 800db9e:	42a5      	cmp	r5, r4
 800dba0:	f080 8151 	bcs.w	800de46 <dhcp_parse_reply+0x4a6>
        q = q->next;
 800dba4:	6836      	ldr	r6, [r6, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800dba6:	2e00      	cmp	r6, #0
 800dba8:	f000 8116 	beq.w	800ddd8 <dhcp_parse_reply+0x438>
        options = (u8_t *)q->payload;
 800dbac:	6873      	ldr	r3, [r6, #4]
 800dbae:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800dbb0:	2e00      	cmp	r6, #0
 800dbb2:	f000 811b 	beq.w	800ddec <dhcp_parse_reply+0x44c>
 800dbb6:	42a5      	cmp	r5, r4
 800dbb8:	f080 8118 	bcs.w	800ddec <dhcp_parse_reply+0x44c>
 800dbbc:	4629      	mov	r1, r5
 800dbbe:	9b01      	ldr	r3, [sp, #4]
 800dbc0:	5d5a      	ldrb	r2, [r3, r5]
 800dbc2:	2aff      	cmp	r2, #255	; 0xff
 800dbc4:	f000 8112 	beq.w	800ddec <dhcp_parse_reply+0x44c>
    u16_t val_offset = (u16_t)(offset + 2);
 800dbc8:	f105 0802 	add.w	r8, r5, #2
 800dbcc:	fa1f f888 	uxth.w	r8, r8
    if (val_offset < offset) {
 800dbd0:	4545      	cmp	r5, r8
 800dbd2:	f200 8132 	bhi.w	800de3a <dhcp_parse_reply+0x49a>
    if ((offset + 1) < q->len) {
 800dbd6:	4628      	mov	r0, r5
 800dbd8:	1c6b      	adds	r3, r5, #1
 800dbda:	8977      	ldrh	r7, [r6, #10]
 800dbdc:	42bb      	cmp	r3, r7
 800dbde:	f6bf af05 	bge.w	800d9ec <dhcp_parse_reply+0x4c>
      len = options[offset + 1];
 800dbe2:	3101      	adds	r1, #1
 800dbe4:	9b01      	ldr	r3, [sp, #4]
 800dbe6:	5c5b      	ldrb	r3, [r3, r1]
    switch (op) {
 800dbe8:	2a3b      	cmp	r2, #59	; 0x3b
 800dbea:	d8c9      	bhi.n	800db80 <dhcp_parse_reply+0x1e0>
 800dbec:	a101      	add	r1, pc, #4	; (adr r1, 800dbf4 <dhcp_parse_reply+0x254>)
 800dbee:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800dbf2:	bf00      	nop
 800dbf4:	0800d9fb 	.word	0x0800d9fb
 800dbf8:	0800da05 	.word	0x0800da05
 800dbfc:	0800db81 	.word	0x0800db81
 800dc00:	0800da25 	.word	0x0800da25
 800dc04:	0800db81 	.word	0x0800db81
 800dc08:	0800db81 	.word	0x0800db81
 800dc0c:	0800da45 	.word	0x0800da45
 800dc10:	0800db81 	.word	0x0800db81
 800dc14:	0800db81 	.word	0x0800db81
 800dc18:	0800db81 	.word	0x0800db81
 800dc1c:	0800db81 	.word	0x0800db81
 800dc20:	0800db81 	.word	0x0800db81
 800dc24:	0800db81 	.word	0x0800db81
 800dc28:	0800db81 	.word	0x0800db81
 800dc2c:	0800db81 	.word	0x0800db81
 800dc30:	0800db81 	.word	0x0800db81
 800dc34:	0800db81 	.word	0x0800db81
 800dc38:	0800db81 	.word	0x0800db81
 800dc3c:	0800db81 	.word	0x0800db81
 800dc40:	0800db81 	.word	0x0800db81
 800dc44:	0800db81 	.word	0x0800db81
 800dc48:	0800db81 	.word	0x0800db81
 800dc4c:	0800db81 	.word	0x0800db81
 800dc50:	0800db81 	.word	0x0800db81
 800dc54:	0800db81 	.word	0x0800db81
 800dc58:	0800db81 	.word	0x0800db81
 800dc5c:	0800db81 	.word	0x0800db81
 800dc60:	0800db81 	.word	0x0800db81
 800dc64:	0800db81 	.word	0x0800db81
 800dc68:	0800db81 	.word	0x0800db81
 800dc6c:	0800db81 	.word	0x0800db81
 800dc70:	0800db81 	.word	0x0800db81
 800dc74:	0800db81 	.word	0x0800db81
 800dc78:	0800db81 	.word	0x0800db81
 800dc7c:	0800db81 	.word	0x0800db81
 800dc80:	0800db81 	.word	0x0800db81
 800dc84:	0800db81 	.word	0x0800db81
 800dc88:	0800db81 	.word	0x0800db81
 800dc8c:	0800db81 	.word	0x0800db81
 800dc90:	0800db81 	.word	0x0800db81
 800dc94:	0800db81 	.word	0x0800db81
 800dc98:	0800db81 	.word	0x0800db81
 800dc9c:	0800db81 	.word	0x0800db81
 800dca0:	0800db81 	.word	0x0800db81
 800dca4:	0800db81 	.word	0x0800db81
 800dca8:	0800db81 	.word	0x0800db81
 800dcac:	0800db81 	.word	0x0800db81
 800dcb0:	0800db81 	.word	0x0800db81
 800dcb4:	0800db81 	.word	0x0800db81
 800dcb8:	0800db81 	.word	0x0800db81
 800dcbc:	0800db81 	.word	0x0800db81
 800dcc0:	0800da87 	.word	0x0800da87
 800dcc4:	0800daa7 	.word	0x0800daa7
 800dcc8:	0800dae1 	.word	0x0800dae1
 800dccc:	0800db01 	.word	0x0800db01
 800dcd0:	0800db81 	.word	0x0800db81
 800dcd4:	0800db81 	.word	0x0800db81
 800dcd8:	0800db81 	.word	0x0800db81
 800dcdc:	0800db21 	.word	0x0800db21
 800dce0:	0800db41 	.word	0x0800db41
      if (offset + len + 2 > 0xFFFF) {
 800dce4:	4418      	add	r0, r3
 800dce6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800dcea:	4290      	cmp	r0, r2
 800dcec:	f300 80a8 	bgt.w	800de40 <dhcp_parse_reply+0x4a0>
      offset = (u16_t)(offset + len + 2);
 800dcf0:	441d      	add	r5, r3
 800dcf2:	b2ad      	uxth	r5, r5
 800dcf4:	3502      	adds	r5, #2
 800dcf6:	b2ad      	uxth	r5, r5
      if (decode_len > 0) {
 800dcf8:	2f00      	cmp	r7, #0
 800dcfa:	f43f af49 	beq.w	800db90 <dhcp_parse_reply+0x1f0>
        u32_t value = 0;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	9305      	str	r3, [sp, #20]
 800dd02:	e034      	b.n	800dd6e <dhcp_parse_reply+0x3ce>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800dd04:	4b51      	ldr	r3, [pc, #324]	; (800de4c <dhcp_parse_reply+0x4ac>)
 800dd06:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800dd0a:	4951      	ldr	r1, [pc, #324]	; (800de50 <dhcp_parse_reply+0x4b0>)
 800dd0c:	4851      	ldr	r0, [pc, #324]	; (800de54 <dhcp_parse_reply+0x4b4>)
 800dd0e:	f006 fa91 	bl	8014234 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800dd12:	4b51      	ldr	r3, [pc, #324]	; (800de58 <dhcp_parse_reply+0x4b8>)
 800dd14:	f813 3009 	ldrb.w	r3, [r3, r9]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	f47f af39 	bne.w	800db90 <dhcp_parse_reply+0x1f0>
          copy_len = LWIP_MIN(decode_len, 4);
 800dd1e:	46ba      	mov	sl, r7
 800dd20:	2f04      	cmp	r7, #4
 800dd22:	bf28      	it	cs
 800dd24:	f04f 0a04 	movcs.w	sl, #4
 800dd28:	fa5f fa8a 	uxtb.w	sl, sl
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800dd2c:	4643      	mov	r3, r8
 800dd2e:	4652      	mov	r2, sl
 800dd30:	a905      	add	r1, sp, #20
 800dd32:	4630      	mov	r0, r6
 800dd34:	f7f9 ff84 	bl	8007c40 <pbuf_copy_partial>
 800dd38:	4550      	cmp	r0, sl
 800dd3a:	d145      	bne.n	800ddc8 <dhcp_parse_reply+0x428>
          if (decode_len > 4) {
 800dd3c:	2f04      	cmp	r7, #4
 800dd3e:	d924      	bls.n	800dd8a <dhcp_parse_reply+0x3ea>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800dd40:	f017 0f03 	tst.w	r7, #3
 800dd44:	d117      	bne.n	800dd76 <dhcp_parse_reply+0x3d6>
            dhcp_got_option(dhcp, decode_idx);
 800dd46:	4b44      	ldr	r3, [pc, #272]	; (800de58 <dhcp_parse_reply+0x4b8>)
 800dd48:	2201      	movs	r2, #1
 800dd4a:	f803 2009 	strb.w	r2, [r3, r9]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800dd4e:	9805      	ldr	r0, [sp, #20]
 800dd50:	f7f8 fa13 	bl	800617a <lwip_htonl>
 800dd54:	4b41      	ldr	r3, [pc, #260]	; (800de5c <dhcp_parse_reply+0x4bc>)
 800dd56:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800dd5a:	3f04      	subs	r7, #4
 800dd5c:	b2ff      	uxtb	r7, r7
            next_val_offset = (u16_t)(val_offset + 4);
 800dd5e:	f108 0304 	add.w	r3, r8, #4
 800dd62:	b29b      	uxth	r3, r3
            if (next_val_offset < val_offset) {
 800dd64:	4598      	cmp	r8, r3
 800dd66:	d834      	bhi.n	800ddd2 <dhcp_parse_reply+0x432>
            decode_idx++;
 800dd68:	f109 0901 	add.w	r9, r9, #1
            val_offset = next_val_offset;
 800dd6c:	4698      	mov	r8, r3
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800dd6e:	f1b9 0f09 	cmp.w	r9, #9
 800dd72:	d9ce      	bls.n	800dd12 <dhcp_parse_reply+0x372>
 800dd74:	e7c6      	b.n	800dd04 <dhcp_parse_reply+0x364>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800dd76:	4b35      	ldr	r3, [pc, #212]	; (800de4c <dhcp_parse_reply+0x4ac>)
 800dd78:	f240 6281 	movw	r2, #1665	; 0x681
 800dd7c:	4938      	ldr	r1, [pc, #224]	; (800de60 <dhcp_parse_reply+0x4c0>)
 800dd7e:	4835      	ldr	r0, [pc, #212]	; (800de54 <dhcp_parse_reply+0x4b4>)
 800dd80:	f006 fa58 	bl	8014234 <iprintf>
 800dd84:	f06f 0005 	mvn.w	r0, #5
 800dd88:	e020      	b.n	800ddcc <dhcp_parse_reply+0x42c>
          } else if (decode_len == 4) {
 800dd8a:	2f04      	cmp	r7, #4
 800dd8c:	d00d      	beq.n	800ddaa <dhcp_parse_reply+0x40a>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800dd8e:	2f01      	cmp	r7, #1
 800dd90:	d110      	bne.n	800ddb4 <dhcp_parse_reply+0x414>
            value = ((u8_t *)&value)[0];
 800dd92:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800dd96:	9305      	str	r3, [sp, #20]
          dhcp_got_option(dhcp, decode_idx);
 800dd98:	4b2f      	ldr	r3, [pc, #188]	; (800de58 <dhcp_parse_reply+0x4b8>)
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	f803 2009 	strb.w	r2, [r3, r9]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800dda0:	4b2e      	ldr	r3, [pc, #184]	; (800de5c <dhcp_parse_reply+0x4bc>)
 800dda2:	9a05      	ldr	r2, [sp, #20]
 800dda4:	f843 2029 	str.w	r2, [r3, r9, lsl #2]
 800dda8:	e6f2      	b.n	800db90 <dhcp_parse_reply+0x1f0>
            value = lwip_ntohl(value);
 800ddaa:	9805      	ldr	r0, [sp, #20]
 800ddac:	f7f8 f9e5 	bl	800617a <lwip_htonl>
 800ddb0:	9005      	str	r0, [sp, #20]
 800ddb2:	e7f1      	b.n	800dd98 <dhcp_parse_reply+0x3f8>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800ddb4:	4b25      	ldr	r3, [pc, #148]	; (800de4c <dhcp_parse_reply+0x4ac>)
 800ddb6:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800ddba:	492a      	ldr	r1, [pc, #168]	; (800de64 <dhcp_parse_reply+0x4c4>)
 800ddbc:	4825      	ldr	r0, [pc, #148]	; (800de54 <dhcp_parse_reply+0x4b4>)
 800ddbe:	f006 fa39 	bl	8014234 <iprintf>
 800ddc2:	f06f 0005 	mvn.w	r0, #5
 800ddc6:	e001      	b.n	800ddcc <dhcp_parse_reply+0x42c>
            return ERR_BUF;
 800ddc8:	f06f 0001 	mvn.w	r0, #1
}
 800ddcc:	b007      	add	sp, #28
 800ddce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              return ERR_BUF;
 800ddd2:	f06f 0001 	mvn.w	r0, #1
 800ddd6:	e7f9      	b.n	800ddcc <dhcp_parse_reply+0x42c>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800ddd8:	4b1c      	ldr	r3, [pc, #112]	; (800de4c <dhcp_parse_reply+0x4ac>)
 800ddda:	f240 629d 	movw	r2, #1693	; 0x69d
 800ddde:	4922      	ldr	r1, [pc, #136]	; (800de68 <dhcp_parse_reply+0x4c8>)
 800dde0:	481c      	ldr	r0, [pc, #112]	; (800de54 <dhcp_parse_reply+0x4b4>)
 800dde2:	f006 fa27 	bl	8014234 <iprintf>
 800dde6:	f06f 0005 	mvn.w	r0, #5
 800ddea:	e7ef      	b.n	800ddcc <dhcp_parse_reply+0x42c>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800ddec:	4b1a      	ldr	r3, [pc, #104]	; (800de58 <dhcp_parse_reply+0x4b8>)
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	b153      	cbz	r3, 800de08 <dhcp_parse_reply+0x468>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ddf2:	4b1a      	ldr	r3, [pc, #104]	; (800de5c <dhcp_parse_reply+0x4bc>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ddf6:	4a18      	ldr	r2, [pc, #96]	; (800de58 <dhcp_parse_reply+0x4b8>)
 800ddf8:	2100      	movs	r1, #0
 800ddfa:	7011      	strb	r1, [r2, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d012      	beq.n	800de26 <dhcp_parse_reply+0x486>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800de00:	2b02      	cmp	r3, #2
 800de02:	d009      	beq.n	800de18 <dhcp_parse_reply+0x478>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800de04:	2b03      	cmp	r3, #3
 800de06:	d00c      	beq.n	800de22 <dhcp_parse_reply+0x482>
  } else if (parse_sname_as_options) {
 800de08:	9b03      	ldr	r3, [sp, #12]
 800de0a:	b143      	cbz	r3, 800de1e <dhcp_parse_reply+0x47e>
    parse_sname_as_options = 0;
 800de0c:	2300      	movs	r3, #0
 800de0e:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800de10:	246c      	movs	r4, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 800de12:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 800de16:	e5d5      	b.n	800d9c4 <dhcp_parse_reply+0x24>
      parse_sname_as_options = 1;
 800de18:	2301      	movs	r3, #1
 800de1a:	9303      	str	r3, [sp, #12]
 800de1c:	e7f4      	b.n	800de08 <dhcp_parse_reply+0x468>
  return ERR_OK;
 800de1e:	2000      	movs	r0, #0
 800de20:	e7d4      	b.n	800ddcc <dhcp_parse_reply+0x42c>
      parse_sname_as_options = 1;
 800de22:	2301      	movs	r3, #1
 800de24:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800de26:	24ec      	movs	r4, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 800de28:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    goto again;
 800de2c:	e5ca      	b.n	800d9c4 <dhcp_parse_reply+0x24>
    return ERR_BUF;
 800de2e:	f06f 0001 	mvn.w	r0, #1
 800de32:	e7cb      	b.n	800ddcc <dhcp_parse_reply+0x42c>
    return ERR_BUF;
 800de34:	f06f 0001 	mvn.w	r0, #1
 800de38:	e7c8      	b.n	800ddcc <dhcp_parse_reply+0x42c>
      return ERR_BUF;
 800de3a:	f06f 0001 	mvn.w	r0, #1
 800de3e:	e7c5      	b.n	800ddcc <dhcp_parse_reply+0x42c>
        return ERR_BUF;
 800de40:	f06f 0001 	mvn.w	r0, #1
 800de44:	e7c2      	b.n	800ddcc <dhcp_parse_reply+0x42c>
        return ERR_BUF;
 800de46:	f06f 0001 	mvn.w	r0, #1
 800de4a:	e7bf      	b.n	800ddcc <dhcp_parse_reply+0x42c>
 800de4c:	08017148 	.word	0x08017148
 800de50:	08017400 	.word	0x08017400
 800de54:	08015418 	.word	0x08015418
 800de58:	20007b3c 	.word	0x20007b3c
 800de5c:	20007b48 	.word	0x20007b48
 800de60:	08017414 	.word	0x08017414
 800de64:	0801742c 	.word	0x0801742c
 800de68:	08017440 	.word	0x08017440

0800de6c <dhcp_handle_ack>:
{
 800de6c:	b510      	push	{r4, lr}
 800de6e:	b086      	sub	sp, #24
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800de70:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800de74:	2300      	movs	r3, #0
 800de76:	6363      	str	r3, [r4, #52]	; 0x34
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800de78:	63a3      	str	r3, [r4, #56]	; 0x38
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800de7a:	4b2a      	ldr	r3, [pc, #168]	; (800df24 <dhcp_handle_ack+0xb8>)
 800de7c:	78db      	ldrb	r3, [r3, #3]
 800de7e:	b113      	cbz	r3, 800de86 <dhcp_handle_ack+0x1a>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800de80:	4b29      	ldr	r3, [pc, #164]	; (800df28 <dhcp_handle_ack+0xbc>)
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800de86:	4b27      	ldr	r3, [pc, #156]	; (800df24 <dhcp_handle_ack+0xb8>)
 800de88:	791b      	ldrb	r3, [r3, #4]
 800de8a:	b1a3      	cbz	r3, 800deb6 <dhcp_handle_ack+0x4a>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800de8c:	4b26      	ldr	r3, [pc, #152]	; (800df28 <dhcp_handle_ack+0xbc>)
 800de8e:	691b      	ldr	r3, [r3, #16]
 800de90:	6423      	str	r3, [r4, #64]	; 0x40
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800de92:	4b24      	ldr	r3, [pc, #144]	; (800df24 <dhcp_handle_ack+0xb8>)
 800de94:	795b      	ldrb	r3, [r3, #5]
 800de96:	b193      	cbz	r3, 800debe <dhcp_handle_ack+0x52>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800de98:	4b23      	ldr	r3, [pc, #140]	; (800df28 <dhcp_handle_ack+0xbc>)
 800de9a:	695b      	ldr	r3, [r3, #20]
 800de9c:	6463      	str	r3, [r4, #68]	; 0x44
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800de9e:	690b      	ldr	r3, [r1, #16]
 800dea0:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800dea2:	4b20      	ldr	r3, [pc, #128]	; (800df24 <dhcp_handle_ack+0xb8>)
 800dea4:	799b      	ldrb	r3, [r3, #6]
 800dea6:	b983      	cbnz	r3, 800deca <dhcp_handle_ack+0x5e>
    dhcp->subnet_mask_given = 0;
 800dea8:	2300      	movs	r3, #0
 800deaa:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800deac:	4b1d      	ldr	r3, [pc, #116]	; (800df24 <dhcp_handle_ack+0xb8>)
 800deae:	79db      	ldrb	r3, [r3, #7]
 800deb0:	b99b      	cbnz	r3, 800deda <dhcp_handle_ack+0x6e>
{
 800deb2:	2400      	movs	r4, #0
 800deb4:	e02b      	b.n	800df0e <dhcp_handle_ack+0xa2>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800deb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800deb8:	085b      	lsrs	r3, r3, #1
 800deba:	6423      	str	r3, [r4, #64]	; 0x40
 800debc:	e7e9      	b.n	800de92 <dhcp_handle_ack+0x26>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800debe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dec0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800dec4:	08db      	lsrs	r3, r3, #3
 800dec6:	6463      	str	r3, [r4, #68]	; 0x44
 800dec8:	e7e9      	b.n	800de9e <dhcp_handle_ack+0x32>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800deca:	4b17      	ldr	r3, [pc, #92]	; (800df28 <dhcp_handle_ack+0xbc>)
 800decc:	6998      	ldr	r0, [r3, #24]
 800dece:	f7f8 f954 	bl	800617a <lwip_htonl>
 800ded2:	6360      	str	r0, [r4, #52]	; 0x34
    dhcp->subnet_mask_given = 1;
 800ded4:	2301      	movs	r3, #1
 800ded6:	71e3      	strb	r3, [r4, #7]
 800ded8:	e7e8      	b.n	800deac <dhcp_handle_ack+0x40>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800deda:	4b13      	ldr	r3, [pc, #76]	; (800df28 <dhcp_handle_ack+0xbc>)
 800dedc:	69d8      	ldr	r0, [r3, #28]
 800dede:	f7f8 f94c 	bl	800617a <lwip_htonl>
 800dee2:	63a0      	str	r0, [r4, #56]	; 0x38
 800dee4:	e7e5      	b.n	800deb2 <dhcp_handle_ack+0x46>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 800dee6:	4a10      	ldr	r2, [pc, #64]	; (800df28 <dhcp_handle_ack+0xbc>)
 800dee8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800deec:	f7f8 f945 	bl	800617a <lwip_htonl>
 800def0:	9000      	str	r0, [sp, #0]
 800def2:	2300      	movs	r3, #0
 800def4:	f88d 3014 	strb.w	r3, [sp, #20]
 800def8:	9303      	str	r3, [sp, #12]
 800defa:	9302      	str	r3, [sp, #8]
 800defc:	9301      	str	r3, [sp, #4]
 800defe:	f88d 3010 	strb.w	r3, [sp, #16]
    dns_setserver(n, &dns_addr);
 800df02:	4669      	mov	r1, sp
 800df04:	4620      	mov	r0, r4
 800df06:	f7f8 fc17 	bl	8006738 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800df0a:	3401      	adds	r4, #1
 800df0c:	b2e4      	uxtb	r4, r4
 800df0e:	2c01      	cmp	r4, #1
 800df10:	d805      	bhi.n	800df1e <dhcp_handle_ack+0xb2>
 800df12:	f104 0308 	add.w	r3, r4, #8
 800df16:	4a03      	ldr	r2, [pc, #12]	; (800df24 <dhcp_handle_ack+0xb8>)
 800df18:	5cd2      	ldrb	r2, [r2, r3]
 800df1a:	2a00      	cmp	r2, #0
 800df1c:	d1e3      	bne.n	800dee6 <dhcp_handle_ack+0x7a>
}
 800df1e:	b006      	add	sp, #24
 800df20:	bd10      	pop	{r4, pc}
 800df22:	bf00      	nop
 800df24:	20007b3c 	.word	0x20007b3c
 800df28:	20007b48 	.word	0x20007b48

0800df2c <dhcp_recv>:
{
 800df2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df2e:	4614      	mov	r4, r2
  struct netif *netif = ip_current_input_netif();
 800df30:	4a3c      	ldr	r2, [pc, #240]	; (800e024 <dhcp_recv+0xf8>)
 800df32:	6855      	ldr	r5, [r2, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800df34:	f8d5 60c8 	ldr.w	r6, [r5, #200]	; 0xc8
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800df38:	6867      	ldr	r7, [r4, #4]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800df3a:	b356      	cbz	r6, 800df92 <dhcp_recv+0x66>
 800df3c:	7932      	ldrb	r2, [r6, #4]
 800df3e:	b342      	cbz	r2, 800df92 <dhcp_recv+0x66>
  LWIP_ASSERT("invalid server address type", IP_IS_V4(addr));
 800df40:	b10b      	cbz	r3, 800df46 <dhcp_recv+0x1a>
 800df42:	7d1b      	ldrb	r3, [r3, #20]
 800df44:	b93b      	cbnz	r3, 800df56 <dhcp_recv+0x2a>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 800df46:	8963      	ldrh	r3, [r4, #10]
 800df48:	2b2b      	cmp	r3, #43	; 0x2b
 800df4a:	d922      	bls.n	800df92 <dhcp_recv+0x66>
  if (reply_msg->op != DHCP_BOOTREPLY) {
 800df4c:	783b      	ldrb	r3, [r7, #0]
 800df4e:	2b02      	cmp	r3, #2
 800df50:	d11f      	bne.n	800df92 <dhcp_recv+0x66>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800df52:	2300      	movs	r3, #0
 800df54:	e009      	b.n	800df6a <dhcp_recv+0x3e>
  LWIP_ASSERT("invalid server address type", IP_IS_V4(addr));
 800df56:	4b34      	ldr	r3, [pc, #208]	; (800e028 <dhcp_recv+0xfc>)
 800df58:	f240 62ea 	movw	r2, #1770	; 0x6ea
 800df5c:	4933      	ldr	r1, [pc, #204]	; (800e02c <dhcp_recv+0x100>)
 800df5e:	4834      	ldr	r0, [pc, #208]	; (800e030 <dhcp_recv+0x104>)
 800df60:	f006 f968 	bl	8014234 <iprintf>
 800df64:	e7ef      	b.n	800df46 <dhcp_recv+0x1a>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800df66:	3301      	adds	r3, #1
 800df68:	b2db      	uxtb	r3, r3
 800df6a:	f895 20de 	ldrb.w	r2, [r5, #222]	; 0xde
 800df6e:	429a      	cmp	r2, r3
 800df70:	d909      	bls.n	800df86 <dhcp_recv+0x5a>
 800df72:	2b05      	cmp	r3, #5
 800df74:	d807      	bhi.n	800df86 <dhcp_recv+0x5a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800df76:	18ea      	adds	r2, r5, r3
 800df78:	f892 10d8 	ldrb.w	r1, [r2, #216]	; 0xd8
 800df7c:	18fa      	adds	r2, r7, r3
 800df7e:	7f12      	ldrb	r2, [r2, #28]
 800df80:	4291      	cmp	r1, r2
 800df82:	d0f0      	beq.n	800df66 <dhcp_recv+0x3a>
 800df84:	e005      	b.n	800df92 <dhcp_recv+0x66>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f7f8 f8f7 	bl	800617a <lwip_htonl>
 800df8c:	6833      	ldr	r3, [r6, #0]
 800df8e:	4298      	cmp	r0, r3
 800df90:	d003      	beq.n	800df9a <dhcp_recv+0x6e>
  pbuf_free(p);
 800df92:	4620      	mov	r0, r4
 800df94:	f7f9 fbfe 	bl	8007794 <pbuf_free>
}
 800df98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800df9a:	4631      	mov	r1, r6
 800df9c:	4620      	mov	r0, r4
 800df9e:	f7ff fcff 	bl	800d9a0 <dhcp_parse_reply>
 800dfa2:	2800      	cmp	r0, #0
 800dfa4:	d1f5      	bne.n	800df92 <dhcp_recv+0x66>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800dfa6:	4b23      	ldr	r3, [pc, #140]	; (800e034 <dhcp_recv+0x108>)
 800dfa8:	785b      	ldrb	r3, [r3, #1]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d0f1      	beq.n	800df92 <dhcp_recv+0x66>
  msg_in = (struct dhcp_msg *)p->payload;
 800dfae:	6861      	ldr	r1, [r4, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800dfb0:	4b21      	ldr	r3, [pc, #132]	; (800e038 <dhcp_recv+0x10c>)
 800dfb2:	791b      	ldrb	r3, [r3, #4]
  if (msg_type == DHCP_ACK) {
 800dfb4:	2b05      	cmp	r3, #5
 800dfb6:	d00a      	beq.n	800dfce <dhcp_recv+0xa2>
  else if ((msg_type == DHCP_NAK) &&
 800dfb8:	2b06      	cmp	r3, #6
 800dfba:	d026      	beq.n	800e00a <dhcp_recv+0xde>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800dfbc:	2b02      	cmp	r3, #2
 800dfbe:	d1e8      	bne.n	800df92 <dhcp_recv+0x66>
 800dfc0:	7973      	ldrb	r3, [r6, #5]
 800dfc2:	2b06      	cmp	r3, #6
 800dfc4:	d1e5      	bne.n	800df92 <dhcp_recv+0x66>
    dhcp_handle_offer(netif, msg_in);
 800dfc6:	4628      	mov	r0, r5
 800dfc8:	f7ff fad4 	bl	800d574 <dhcp_handle_offer>
 800dfcc:	e7e1      	b.n	800df92 <dhcp_recv+0x66>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800dfce:	7973      	ldrb	r3, [r6, #5]
 800dfd0:	2b01      	cmp	r3, #1
 800dfd2:	d00a      	beq.n	800dfea <dhcp_recv+0xbe>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800dfd4:	3b03      	subs	r3, #3
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	2b02      	cmp	r3, #2
 800dfda:	d8da      	bhi.n	800df92 <dhcp_recv+0x66>
      dhcp_handle_ack(netif, msg_in);
 800dfdc:	4628      	mov	r0, r5
 800dfde:	f7ff ff45 	bl	800de6c <dhcp_handle_ack>
      dhcp_bind(netif);
 800dfe2:	4628      	mov	r0, r5
 800dfe4:	f7ff fbcc 	bl	800d780 <dhcp_bind>
 800dfe8:	e7d3      	b.n	800df92 <dhcp_recv+0x66>
      dhcp_handle_ack(netif, msg_in);
 800dfea:	4628      	mov	r0, r5
 800dfec:	f7ff ff3e 	bl	800de6c <dhcp_handle_ack>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800dff0:	f895 30df 	ldrb.w	r3, [r5, #223]	; 0xdf
 800dff4:	f013 0f08 	tst.w	r3, #8
 800dff8:	d003      	beq.n	800e002 <dhcp_recv+0xd6>
        dhcp_check(netif);
 800dffa:	4628      	mov	r0, r5
 800dffc:	f7ff fbaa 	bl	800d754 <dhcp_check>
 800e000:	e7c7      	b.n	800df92 <dhcp_recv+0x66>
        dhcp_bind(netif);
 800e002:	4628      	mov	r0, r5
 800e004:	f7ff fbbc 	bl	800d780 <dhcp_bind>
 800e008:	e7c3      	b.n	800df92 <dhcp_recv+0x66>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800e00a:	7972      	ldrb	r2, [r6, #5]
  else if ((msg_type == DHCP_NAK) &&
 800e00c:	2a03      	cmp	r2, #3
 800e00e:	d005      	beq.n	800e01c <dhcp_recv+0xf0>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800e010:	2a01      	cmp	r2, #1
 800e012:	d003      	beq.n	800e01c <dhcp_recv+0xf0>
 800e014:	2a04      	cmp	r2, #4
 800e016:	d001      	beq.n	800e01c <dhcp_recv+0xf0>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800e018:	2a05      	cmp	r2, #5
 800e01a:	d1cf      	bne.n	800dfbc <dhcp_recv+0x90>
    dhcp_handle_nak(netif);
 800e01c:	4628      	mov	r0, r5
 800e01e:	f7ff fc47 	bl	800d8b0 <dhcp_handle_nak>
 800e022:	e7b6      	b.n	800df92 <dhcp_recv+0x66>
 800e024:	200039e8 	.word	0x200039e8
 800e028:	08017148 	.word	0x08017148
 800e02c:	08017454 	.word	0x08017454
 800e030:	08015418 	.word	0x08015418
 800e034:	20007b3c 	.word	0x20007b3c
 800e038:	20007b48 	.word	0x20007b48

0800e03c <dhcp_arp_reply>:
{
 800e03c:	b508      	push	{r3, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e03e:	b138      	cbz	r0, 800e050 <dhcp_arp_reply+0x14>
 800e040:	4602      	mov	r2, r0
  dhcp = netif_dhcp_data(netif);
 800e042:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800e046:	b113      	cbz	r3, 800e04e <dhcp_arp_reply+0x12>
 800e048:	7958      	ldrb	r0, [r3, #5]
 800e04a:	2808      	cmp	r0, #8
 800e04c:	d008      	beq.n	800e060 <dhcp_arp_reply+0x24>
}
 800e04e:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e050:	4b07      	ldr	r3, [pc, #28]	; (800e070 <dhcp_arp_reply+0x34>)
 800e052:	f240 328b 	movw	r2, #907	; 0x38b
 800e056:	4907      	ldr	r1, [pc, #28]	; (800e074 <dhcp_arp_reply+0x38>)
 800e058:	4807      	ldr	r0, [pc, #28]	; (800e078 <dhcp_arp_reply+0x3c>)
 800e05a:	f006 f8eb 	bl	8014234 <iprintf>
 800e05e:	e7f6      	b.n	800e04e <dhcp_arp_reply+0x12>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800e060:	6809      	ldr	r1, [r1, #0]
 800e062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e064:	4299      	cmp	r1, r3
 800e066:	d1f2      	bne.n	800e04e <dhcp_arp_reply+0x12>
      dhcp_decline(netif);
 800e068:	4610      	mov	r0, r2
 800e06a:	f7ff fb23 	bl	800d6b4 <dhcp_decline>
 800e06e:	e7ee      	b.n	800e04e <dhcp_arp_reply+0x12>
 800e070:	08017148 	.word	0x08017148
 800e074:	08015408 	.word	0x08015408
 800e078:	08015418 	.word	0x08015418

0800e07c <dhcp_renew>:
{
 800e07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e080:	b084      	sub	sp, #16
 800e082:	4680      	mov	r8, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e084:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800e088:	2105      	movs	r1, #5
 800e08a:	4628      	mov	r0, r5
 800e08c:	f7fe ff56 	bl	800cf3c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e090:	f10d 030e 	add.w	r3, sp, #14
 800e094:	2203      	movs	r2, #3
 800e096:	4629      	mov	r1, r5
 800e098:	4640      	mov	r0, r8
 800e09a:	f7fe ffd3 	bl	800d044 <dhcp_create_msg>
  if (p_out != NULL) {
 800e09e:	2800      	cmp	r0, #0
 800e0a0:	d04b      	beq.n	800e13a <dhcp_renew+0xbe>
 800e0a2:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e0a4:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e0a6:	36f0      	adds	r6, #240	; 0xf0
 800e0a8:	2302      	movs	r3, #2
 800e0aa:	2239      	movs	r2, #57	; 0x39
 800e0ac:	4631      	mov	r1, r6
 800e0ae:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e0b2:	f7fe ff69 	bl	800cf88 <dhcp_option>
 800e0b6:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e0ba:	f8b8 20d4 	ldrh.w	r2, [r8, #212]	; 0xd4
 800e0be:	4631      	mov	r1, r6
 800e0c0:	f7fe ff44 	bl	800cf4c <dhcp_option_short>
 800e0c4:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e0c8:	2304      	movs	r3, #4
 800e0ca:	2237      	movs	r2, #55	; 0x37
 800e0cc:	4631      	mov	r1, r6
 800e0ce:	f7fe ff5b 	bl	800cf88 <dhcp_option>
 800e0d2:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e0d6:	2400      	movs	r4, #0
 800e0d8:	e00a      	b.n	800e0f0 <dhcp_renew+0x74>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e0da:	4b21      	ldr	r3, [pc, #132]	; (800e160 <dhcp_renew+0xe4>)
 800e0dc:	5d1a      	ldrb	r2, [r3, r4]
 800e0de:	4631      	mov	r1, r6
 800e0e0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e0e4:	f7fe ff6e 	bl	800cfc4 <dhcp_option_byte>
 800e0e8:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e0ec:	3401      	adds	r4, #1
 800e0ee:	b2e4      	uxtb	r4, r4
 800e0f0:	2c03      	cmp	r4, #3
 800e0f2:	d9f2      	bls.n	800e0da <dhcp_renew+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e0f4:	463a      	mov	r2, r7
 800e0f6:	4631      	mov	r1, r6
 800e0f8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e0fc:	f7ff f840 	bl	800d180 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e100:	f8cd 8000 	str.w	r8, [sp]
 800e104:	2343      	movs	r3, #67	; 0x43
 800e106:	f105 0218 	add.w	r2, r5, #24
 800e10a:	4639      	mov	r1, r7
 800e10c:	4815      	ldr	r0, [pc, #84]	; (800e164 <dhcp_renew+0xe8>)
 800e10e:	6800      	ldr	r0, [r0, #0]
 800e110:	f7fe fc5a 	bl	800c9c8 <udp_sendto_if>
 800e114:	4604      	mov	r4, r0
    pbuf_free(p_out);
 800e116:	4638      	mov	r0, r7
 800e118:	f7f9 fb3c 	bl	8007794 <pbuf_free>
  if (dhcp->tries < 255) {
 800e11c:	79ab      	ldrb	r3, [r5, #6]
 800e11e:	2bff      	cmp	r3, #255	; 0xff
 800e120:	d001      	beq.n	800e126 <dhcp_renew+0xaa>
    dhcp->tries++;
 800e122:	3301      	adds	r3, #1
 800e124:	71ab      	strb	r3, [r5, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800e126:	79ab      	ldrb	r3, [r5, #6]
 800e128:	2b09      	cmp	r3, #9
 800e12a:	d809      	bhi.n	800e140 <dhcp_renew+0xc4>
 800e12c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800e130:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e134:	011b      	lsls	r3, r3, #4
 800e136:	b29b      	uxth	r3, r3
 800e138:	e004      	b.n	800e144 <dhcp_renew+0xc8>
    result = ERR_MEM;
 800e13a:	f04f 34ff 	mov.w	r4, #4294967295
 800e13e:	e7ed      	b.n	800e11c <dhcp_renew+0xa0>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800e140:	f644 6320 	movw	r3, #20000	; 0x4e20
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e144:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e148:	4a07      	ldr	r2, [pc, #28]	; (800e168 <dhcp_renew+0xec>)
 800e14a:	fb82 1203 	smull	r1, r2, r2, r3
 800e14e:	17db      	asrs	r3, r3, #31
 800e150:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800e154:	812b      	strh	r3, [r5, #8]
}
 800e156:	4620      	mov	r0, r4
 800e158:	b004      	add	sp, #16
 800e15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e15e:	bf00      	nop
 800e160:	080174c8 	.word	0x080174c8
 800e164:	20000684 	.word	0x20000684
 800e168:	10624dd3 	.word	0x10624dd3

0800e16c <dhcp_t1_timeout>:
{
 800e16c:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e16e:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e172:	7963      	ldrb	r3, [r4, #5]
 800e174:	2b01      	cmp	r3, #1
 800e176:	d003      	beq.n	800e180 <dhcp_t1_timeout+0x14>
 800e178:	2b0a      	cmp	r3, #10
 800e17a:	d001      	beq.n	800e180 <dhcp_t1_timeout+0x14>
 800e17c:	2b05      	cmp	r3, #5
 800e17e:	d10b      	bne.n	800e198 <dhcp_t1_timeout+0x2c>
    dhcp_renew(netif);
 800e180:	f7ff ff7c 	bl	800e07c <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800e184:	89a3      	ldrh	r3, [r4, #12]
 800e186:	8a62      	ldrh	r2, [r4, #18]
 800e188:	1a9b      	subs	r3, r3, r2
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	dd04      	ble.n	800e198 <dhcp_t1_timeout+0x2c>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800e18e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800e192:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800e196:	81e3      	strh	r3, [r4, #14]
}
 800e198:	bd10      	pop	{r4, pc}

0800e19a <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800e19a:	b190      	cbz	r0, 800e1c2 <dhcp_supplied_address+0x28>
 800e19c:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 800e1a0:	b18b      	cbz	r3, 800e1c6 <dhcp_supplied_address+0x2c>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800e1a2:	795b      	ldrb	r3, [r3, #5]
 800e1a4:	2b0a      	cmp	r3, #10
 800e1a6:	d007      	beq.n	800e1b8 <dhcp_supplied_address+0x1e>
 800e1a8:	2b05      	cmp	r3, #5
 800e1aa:	d008      	beq.n	800e1be <dhcp_supplied_address+0x24>
 800e1ac:	2b04      	cmp	r3, #4
 800e1ae:	d001      	beq.n	800e1b4 <dhcp_supplied_address+0x1a>
 800e1b0:	2000      	movs	r0, #0
 800e1b2:	e002      	b.n	800e1ba <dhcp_supplied_address+0x20>
 800e1b4:	2001      	movs	r0, #1
 800e1b6:	e000      	b.n	800e1ba <dhcp_supplied_address+0x20>
 800e1b8:	2001      	movs	r0, #1
 800e1ba:	b2c0      	uxtb	r0, r0
 800e1bc:	4770      	bx	lr
 800e1be:	2001      	movs	r0, #1
 800e1c0:	e7fb      	b.n	800e1ba <dhcp_supplied_address+0x20>
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
 800e1c2:	2000      	movs	r0, #0
 800e1c4:	4770      	bx	lr
 800e1c6:	2000      	movs	r0, #0
}
 800e1c8:	4770      	bx	lr
	...

0800e1cc <dhcp_release_and_stop>:
{
 800e1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1d0:	b08a      	sub	sp, #40	; 0x28
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e1d2:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  if (dhcp == NULL) {
 800e1d6:	2c00      	cmp	r4, #0
 800e1d8:	d039      	beq.n	800e24e <dhcp_release_and_stop+0x82>
 800e1da:	4605      	mov	r5, r0
  if (dhcp->state == DHCP_STATE_OFF) {
 800e1dc:	7963      	ldrb	r3, [r4, #5]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d035      	beq.n	800e24e <dhcp_release_and_stop+0x82>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800e1e2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e1e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800e1ea:	2b06      	cmp	r3, #6
 800e1ec:	d032      	beq.n	800e254 <dhcp_release_and_stop+0x88>
 800e1ee:	69a3      	ldr	r3, [r4, #24]
 800e1f0:	9304      	str	r3, [sp, #16]
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	9307      	str	r3, [sp, #28]
 800e1f6:	9306      	str	r3, [sp, #24]
 800e1f8:	9305      	str	r3, [sp, #20]
 800e1fa:	f88d 3020 	strb.w	r3, [sp, #32]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800e1fe:	2300      	movs	r3, #0
 800e200:	61a3      	str	r3, [r4, #24]
 800e202:	61e3      	str	r3, [r4, #28]
 800e204:	6223      	str	r3, [r4, #32]
 800e206:	6263      	str	r3, [r4, #36]	; 0x24
 800e208:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800e20c:	f114 0f18 	cmn.w	r4, #24
 800e210:	d001      	beq.n	800e216 <dhcp_release_and_stop+0x4a>
 800e212:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800e216:	2300      	movs	r3, #0
 800e218:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800e21a:	6363      	str	r3, [r4, #52]	; 0x34
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800e21c:	63a3      	str	r3, [r4, #56]	; 0x38
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800e21e:	6463      	str	r3, [r4, #68]	; 0x44
 800e220:	6423      	str	r3, [r4, #64]	; 0x40
 800e222:	63e3      	str	r3, [r4, #60]	; 0x3c
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800e224:	82a3      	strh	r3, [r4, #20]
 800e226:	8263      	strh	r3, [r4, #18]
 800e228:	8223      	strh	r3, [r4, #16]
 800e22a:	81e3      	strh	r3, [r4, #14]
  if (dhcp_supplied_address(netif)) {
 800e22c:	4628      	mov	r0, r5
 800e22e:	f7ff ffb4 	bl	800e19a <dhcp_supplied_address>
 800e232:	b9e0      	cbnz	r0, 800e26e <dhcp_release_and_stop+0xa2>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e234:	4928      	ldr	r1, [pc, #160]	; (800e2d8 <dhcp_release_and_stop+0x10c>)
 800e236:	460b      	mov	r3, r1
 800e238:	460a      	mov	r2, r1
 800e23a:	4628      	mov	r0, r5
 800e23c:	f7f8 fed6 	bl	8006fec <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800e240:	2100      	movs	r1, #0
 800e242:	4620      	mov	r0, r4
 800e244:	f7fe fe7a 	bl	800cf3c <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 800e248:	7923      	ldrb	r3, [r4, #4]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d13f      	bne.n	800e2ce <dhcp_release_and_stop+0x102>
}
 800e24e:	b00a      	add	sp, #40	; 0x28
 800e250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800e254:	69a3      	ldr	r3, [r4, #24]
 800e256:	9304      	str	r3, [sp, #16]
 800e258:	69e3      	ldr	r3, [r4, #28]
 800e25a:	9305      	str	r3, [sp, #20]
 800e25c:	6a23      	ldr	r3, [r4, #32]
 800e25e:	9306      	str	r3, [sp, #24]
 800e260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e262:	9307      	str	r3, [sp, #28]
 800e264:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e268:	f88d 3020 	strb.w	r3, [sp, #32]
 800e26c:	e7c7      	b.n	800e1fe <dhcp_release_and_stop+0x32>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800e26e:	f10d 030e 	add.w	r3, sp, #14
 800e272:	2207      	movs	r2, #7
 800e274:	4621      	mov	r1, r4
 800e276:	4628      	mov	r0, r5
 800e278:	f7fe fee4 	bl	800d044 <dhcp_create_msg>
    if (p_out != NULL) {
 800e27c:	4607      	mov	r7, r0
 800e27e:	2800      	cmp	r0, #0
 800e280:	d0d8      	beq.n	800e234 <dhcp_release_and_stop+0x68>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e282:	6846      	ldr	r6, [r0, #4]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800e284:	36f0      	adds	r6, #240	; 0xf0
 800e286:	2304      	movs	r3, #4
 800e288:	2236      	movs	r2, #54	; 0x36
 800e28a:	4631      	mov	r1, r6
 800e28c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e290:	f7fe fe7a 	bl	800cf88 <dhcp_option>
 800e294:	4680      	mov	r8, r0
 800e296:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800e29a:	9804      	ldr	r0, [sp, #16]
 800e29c:	f7f7 ff6d 	bl	800617a <lwip_htonl>
 800e2a0:	4602      	mov	r2, r0
 800e2a2:	4631      	mov	r1, r6
 800e2a4:	4640      	mov	r0, r8
 800e2a6:	f7fe fea5 	bl	800cff4 <dhcp_option_long>
 800e2aa:	f8ad 000e 	strh.w	r0, [sp, #14]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e2ae:	463a      	mov	r2, r7
 800e2b0:	4631      	mov	r1, r6
 800e2b2:	f7fe ff65 	bl	800d180 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e2b6:	9500      	str	r5, [sp, #0]
 800e2b8:	2343      	movs	r3, #67	; 0x43
 800e2ba:	aa04      	add	r2, sp, #16
 800e2bc:	4639      	mov	r1, r7
 800e2be:	4807      	ldr	r0, [pc, #28]	; (800e2dc <dhcp_release_and_stop+0x110>)
 800e2c0:	6800      	ldr	r0, [r0, #0]
 800e2c2:	f7fe fb81 	bl	800c9c8 <udp_sendto_if>
      pbuf_free(p_out);
 800e2c6:	4638      	mov	r0, r7
 800e2c8:	f7f9 fa64 	bl	8007794 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
 800e2cc:	e7b2      	b.n	800e234 <dhcp_release_and_stop+0x68>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800e2ce:	f7ff fb03 	bl	800d8d8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	7123      	strb	r3, [r4, #4]
 800e2d6:	e7ba      	b.n	800e24e <dhcp_release_and_stop+0x82>
 800e2d8:	080178d4 	.word	0x080178d4
 800e2dc:	20000684 	.word	0x20000684

0800e2e0 <dhcp_start>:
{
 800e2e0:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800e2e2:	b338      	cbz	r0, 800e334 <dhcp_start+0x54>
 800e2e4:	4604      	mov	r4, r0
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800e2e6:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 800e2ea:	f013 0f01 	tst.w	r3, #1
 800e2ee:	d02b      	beq.n	800e348 <dhcp_start+0x68>
  dhcp = netif_dhcp_data(netif);
 800e2f0:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800e2f4:	f8b0 30d4 	ldrh.w	r3, [r0, #212]	; 0xd4
 800e2f8:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800e2fc:	d344      	bcc.n	800e388 <dhcp_start+0xa8>
  if (dhcp == NULL) {
 800e2fe:	b36d      	cbz	r5, 800e35c <dhcp_start+0x7c>
    if (dhcp->pcb_allocated != 0) {
 800e300:	792b      	ldrb	r3, [r5, #4]
 800e302:	bb9b      	cbnz	r3, 800e36c <dhcp_start+0x8c>
  memset(dhcp, 0, sizeof(struct dhcp));
 800e304:	2248      	movs	r2, #72	; 0x48
 800e306:	2100      	movs	r1, #0
 800e308:	4628      	mov	r0, r5
 800e30a:	f005 ff8b 	bl	8014224 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800e30e:	f7ff fb07 	bl	800d920 <dhcp_inc_pcb_refcount>
 800e312:	4606      	mov	r6, r0
 800e314:	2800      	cmp	r0, #0
 800e316:	d13d      	bne.n	800e394 <dhcp_start+0xb4>
  dhcp->pcb_allocated = 1;
 800e318:	2301      	movs	r3, #1
 800e31a:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 800e31c:	f894 30df 	ldrb.w	r3, [r4, #223]	; 0xdf
 800e320:	f013 0f04 	tst.w	r3, #4
 800e324:	d025      	beq.n	800e372 <dhcp_start+0x92>
  result = dhcp_discover(netif);
 800e326:	4620      	mov	r0, r4
 800e328:	f7ff f948 	bl	800d5bc <dhcp_discover>
  if (result != ERR_OK) {
 800e32c:	4606      	mov	r6, r0
 800e32e:	bb28      	cbnz	r0, 800e37c <dhcp_start+0x9c>
}
 800e330:	4630      	mov	r0, r6
 800e332:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800e334:	4b19      	ldr	r3, [pc, #100]	; (800e39c <dhcp_start+0xbc>)
 800e336:	f240 22e7 	movw	r2, #743	; 0x2e7
 800e33a:	4919      	ldr	r1, [pc, #100]	; (800e3a0 <dhcp_start+0xc0>)
 800e33c:	4819      	ldr	r0, [pc, #100]	; (800e3a4 <dhcp_start+0xc4>)
 800e33e:	f005 ff79 	bl	8014234 <iprintf>
 800e342:	f06f 060f 	mvn.w	r6, #15
 800e346:	e7f3      	b.n	800e330 <dhcp_start+0x50>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800e348:	4b14      	ldr	r3, [pc, #80]	; (800e39c <dhcp_start+0xbc>)
 800e34a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800e34e:	4916      	ldr	r1, [pc, #88]	; (800e3a8 <dhcp_start+0xc8>)
 800e350:	4814      	ldr	r0, [pc, #80]	; (800e3a4 <dhcp_start+0xc4>)
 800e352:	f005 ff6f 	bl	8014234 <iprintf>
 800e356:	f06f 060f 	mvn.w	r6, #15
 800e35a:	e7e9      	b.n	800e330 <dhcp_start+0x50>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800e35c:	2048      	movs	r0, #72	; 0x48
 800e35e:	f7f8 fc4f 	bl	8006c00 <mem_malloc>
    if (dhcp == NULL) {
 800e362:	4605      	mov	r5, r0
 800e364:	b198      	cbz	r0, 800e38e <dhcp_start+0xae>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800e366:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 800e36a:	e7cb      	b.n	800e304 <dhcp_start+0x24>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800e36c:	f7ff fab4 	bl	800d8d8 <dhcp_dec_pcb_refcount>
 800e370:	e7c8      	b.n	800e304 <dhcp_start+0x24>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800e372:	2102      	movs	r1, #2
 800e374:	4628      	mov	r0, r5
 800e376:	f7fe fde1 	bl	800cf3c <dhcp_set_state>
    return ERR_OK;
 800e37a:	e7d9      	b.n	800e330 <dhcp_start+0x50>
    dhcp_release_and_stop(netif);
 800e37c:	4620      	mov	r0, r4
 800e37e:	f7ff ff25 	bl	800e1cc <dhcp_release_and_stop>
    return ERR_MEM;
 800e382:	f04f 36ff 	mov.w	r6, #4294967295
 800e386:	e7d3      	b.n	800e330 <dhcp_start+0x50>
    return ERR_MEM;
 800e388:	f04f 36ff 	mov.w	r6, #4294967295
 800e38c:	e7d0      	b.n	800e330 <dhcp_start+0x50>
      return ERR_MEM;
 800e38e:	f04f 36ff 	mov.w	r6, #4294967295
 800e392:	e7cd      	b.n	800e330 <dhcp_start+0x50>
    return ERR_MEM;
 800e394:	f04f 36ff 	mov.w	r6, #4294967295
 800e398:	e7ca      	b.n	800e330 <dhcp_start+0x50>
 800e39a:	bf00      	nop
 800e39c:	08017148 	.word	0x08017148
 800e3a0:	08015408 	.word	0x08015408
 800e3a4:	08015418 	.word	0x08015418
 800e3a8:	080174a4 	.word	0x080174a4

0800e3ac <dhcp_coarse_tmr>:
{
 800e3ac:	b510      	push	{r4, lr}
  NETIF_FOREACH(netif) {
 800e3ae:	4b18      	ldr	r3, [pc, #96]	; (800e410 <dhcp_coarse_tmr+0x64>)
 800e3b0:	681c      	ldr	r4, [r3, #0]
 800e3b2:	e006      	b.n	800e3c2 <dhcp_coarse_tmr+0x16>
        dhcp_release_and_stop(netif);
 800e3b4:	4620      	mov	r0, r4
 800e3b6:	f7ff ff09 	bl	800e1cc <dhcp_release_and_stop>
        dhcp_start(netif);
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	f7ff ff90 	bl	800e2e0 <dhcp_start>
  NETIF_FOREACH(netif) {
 800e3c0:	6824      	ldr	r4, [r4, #0]
 800e3c2:	b31c      	cbz	r4, 800e40c <dhcp_coarse_tmr+0x60>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e3c4:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d0f9      	beq.n	800e3c0 <dhcp_coarse_tmr+0x14>
 800e3cc:	795a      	ldrb	r2, [r3, #5]
 800e3ce:	2a00      	cmp	r2, #0
 800e3d0:	d0f6      	beq.n	800e3c0 <dhcp_coarse_tmr+0x14>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800e3d2:	8a99      	ldrh	r1, [r3, #20]
 800e3d4:	b129      	cbz	r1, 800e3e2 <dhcp_coarse_tmr+0x36>
 800e3d6:	8a5a      	ldrh	r2, [r3, #18]
 800e3d8:	3201      	adds	r2, #1
 800e3da:	b292      	uxth	r2, r2
 800e3dc:	825a      	strh	r2, [r3, #18]
 800e3de:	4291      	cmp	r1, r2
 800e3e0:	d0e8      	beq.n	800e3b4 <dhcp_coarse_tmr+0x8>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800e3e2:	8a1a      	ldrh	r2, [r3, #16]
 800e3e4:	b11a      	cbz	r2, 800e3ee <dhcp_coarse_tmr+0x42>
 800e3e6:	1e51      	subs	r1, r2, #1
 800e3e8:	8219      	strh	r1, [r3, #16]
 800e3ea:	2a01      	cmp	r2, #1
 800e3ec:	d00a      	beq.n	800e404 <dhcp_coarse_tmr+0x58>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800e3ee:	89da      	ldrh	r2, [r3, #14]
 800e3f0:	2a00      	cmp	r2, #0
 800e3f2:	d0e5      	beq.n	800e3c0 <dhcp_coarse_tmr+0x14>
 800e3f4:	1e51      	subs	r1, r2, #1
 800e3f6:	81d9      	strh	r1, [r3, #14]
 800e3f8:	2a01      	cmp	r2, #1
 800e3fa:	d1e1      	bne.n	800e3c0 <dhcp_coarse_tmr+0x14>
        dhcp_t1_timeout(netif);
 800e3fc:	4620      	mov	r0, r4
 800e3fe:	f7ff feb5 	bl	800e16c <dhcp_t1_timeout>
 800e402:	e7dd      	b.n	800e3c0 <dhcp_coarse_tmr+0x14>
        dhcp_t2_timeout(netif);
 800e404:	4620      	mov	r0, r4
 800e406:	f7fe ff4d 	bl	800d2a4 <dhcp_t2_timeout>
 800e40a:	e7d9      	b.n	800e3c0 <dhcp_coarse_tmr+0x14>
}
 800e40c:	bd10      	pop	{r4, pc}
 800e40e:	bf00      	nop
 800e410:	20007b10 	.word	0x20007b10

0800e414 <dhcp_timeout>:
{
 800e414:	b510      	push	{r4, lr}
 800e416:	4604      	mov	r4, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e418:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800e41c:	7953      	ldrb	r3, [r2, #5]
 800e41e:	2b0c      	cmp	r3, #12
 800e420:	d00d      	beq.n	800e43e <dhcp_timeout+0x2a>
 800e422:	2b06      	cmp	r3, #6
 800e424:	d00b      	beq.n	800e43e <dhcp_timeout+0x2a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800e426:	2b01      	cmp	r3, #1
 800e428:	d00d      	beq.n	800e446 <dhcp_timeout+0x32>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800e42a:	2b08      	cmp	r3, #8
 800e42c:	d017      	beq.n	800e45e <dhcp_timeout+0x4a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800e42e:	2b03      	cmp	r3, #3
 800e430:	d108      	bne.n	800e444 <dhcp_timeout+0x30>
    if (dhcp->tries < REBOOT_TRIES) {
 800e432:	7993      	ldrb	r3, [r2, #6]
 800e434:	2b01      	cmp	r3, #1
 800e436:	d91b      	bls.n	800e470 <dhcp_timeout+0x5c>
      dhcp_discover(netif);
 800e438:	f7ff f8c0 	bl	800d5bc <dhcp_discover>
}
 800e43c:	e002      	b.n	800e444 <dhcp_timeout+0x30>
    dhcp_discover(netif);
 800e43e:	4620      	mov	r0, r4
 800e440:	f7ff f8bc 	bl	800d5bc <dhcp_discover>
}
 800e444:	bd10      	pop	{r4, pc}
    if (dhcp->tries <= 5) {
 800e446:	7993      	ldrb	r3, [r2, #6]
 800e448:	2b05      	cmp	r3, #5
 800e44a:	d802      	bhi.n	800e452 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800e44c:	f7fe ffce 	bl	800d3ec <dhcp_select>
 800e450:	e7f8      	b.n	800e444 <dhcp_timeout+0x30>
      dhcp_release_and_stop(netif);
 800e452:	f7ff febb 	bl	800e1cc <dhcp_release_and_stop>
      dhcp_start(netif);
 800e456:	4620      	mov	r0, r4
 800e458:	f7ff ff42 	bl	800e2e0 <dhcp_start>
 800e45c:	e7f2      	b.n	800e444 <dhcp_timeout+0x30>
    if (dhcp->tries <= 1) {
 800e45e:	7993      	ldrb	r3, [r2, #6]
 800e460:	2b01      	cmp	r3, #1
 800e462:	d902      	bls.n	800e46a <dhcp_timeout+0x56>
      dhcp_bind(netif);
 800e464:	f7ff f98c 	bl	800d780 <dhcp_bind>
 800e468:	e7ec      	b.n	800e444 <dhcp_timeout+0x30>
      dhcp_check(netif);
 800e46a:	f7ff f973 	bl	800d754 <dhcp_check>
 800e46e:	e7e9      	b.n	800e444 <dhcp_timeout+0x30>
      dhcp_reboot(netif);
 800e470:	f7fe ff32 	bl	800d2d8 <dhcp_reboot>
 800e474:	e7e6      	b.n	800e444 <dhcp_timeout+0x30>
	...

0800e478 <dhcp_fine_tmr>:
{
 800e478:	b510      	push	{r4, lr}
  NETIF_FOREACH(netif) {
 800e47a:	4b0c      	ldr	r3, [pc, #48]	; (800e4ac <dhcp_fine_tmr+0x34>)
 800e47c:	681c      	ldr	r4, [r3, #0]
 800e47e:	e002      	b.n	800e486 <dhcp_fine_tmr+0xe>
      } else if (dhcp->request_timeout == 1) {
 800e480:	2a01      	cmp	r2, #1
 800e482:	d00b      	beq.n	800e49c <dhcp_fine_tmr+0x24>
  NETIF_FOREACH(netif) {
 800e484:	6824      	ldr	r4, [r4, #0]
 800e486:	b17c      	cbz	r4, 800e4a8 <dhcp_fine_tmr+0x30>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e488:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    if (dhcp != NULL) {
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d0f9      	beq.n	800e484 <dhcp_fine_tmr+0xc>
      if (dhcp->request_timeout > 1) {
 800e490:	891a      	ldrh	r2, [r3, #8]
 800e492:	2a01      	cmp	r2, #1
 800e494:	d9f4      	bls.n	800e480 <dhcp_fine_tmr+0x8>
        dhcp->request_timeout--;
 800e496:	3a01      	subs	r2, #1
 800e498:	811a      	strh	r2, [r3, #8]
 800e49a:	e7f3      	b.n	800e484 <dhcp_fine_tmr+0xc>
        dhcp->request_timeout--;
 800e49c:	3a01      	subs	r2, #1
 800e49e:	811a      	strh	r2, [r3, #8]
        dhcp_timeout(netif);
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	f7ff ffb7 	bl	800e414 <dhcp_timeout>
 800e4a6:	e7ed      	b.n	800e484 <dhcp_fine_tmr+0xc>
}
 800e4a8:	bd10      	pop	{r4, pc}
 800e4aa:	bf00      	nop
 800e4ac:	20007b10 	.word	0x20007b10

0800e4b0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e4b0:	b510      	push	{r4, lr}
 800e4b2:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e4b4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800e4b8:	4b09      	ldr	r3, [pc, #36]	; (800e4e0 <etharp_free_entry+0x30>)
 800e4ba:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800e4be:	b138      	cbz	r0, 800e4d0 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e4c0:	f7f9 f968 	bl	8007794 <pbuf_free>
    arp_table[i].q = NULL;
 800e4c4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e4c8:	00db      	lsls	r3, r3, #3
 800e4ca:	4a05      	ldr	r2, [pc, #20]	; (800e4e0 <etharp_free_entry+0x30>)
 800e4cc:	2100      	movs	r1, #0
 800e4ce:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e4d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800e4d4:	4802      	ldr	r0, [pc, #8]	; (800e4e0 <etharp_free_entry+0x30>)
 800e4d6:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800e4da:	2300      	movs	r3, #0
 800e4dc:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e4de:	bd10      	pop	{r4, pc}
 800e4e0:	20000690 	.word	0x20000690

0800e4e4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e8:	b083      	sub	sp, #12
 800e4ea:	4607      	mov	r7, r0
 800e4ec:	4690      	mov	r8, r2
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e4ee:	f04f 0e00 	mov.w	lr, #0
 800e4f2:	f8cd e000 	str.w	lr, [sp]
 800e4f6:	46f3      	mov	fp, lr
  s16_t old_queue = ARP_TABLE_SIZE;
 800e4f8:	f04f 0a0a 	mov.w	sl, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e4fc:	4673      	mov	r3, lr
  s16_t empty = ARP_TABLE_SIZE;
 800e4fe:	4656      	mov	r6, sl
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e500:	46d1      	mov	r9, sl
 800e502:	f8cd a004 	str.w	sl, [sp, #4]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e506:	e003      	b.n	800e510 <etharp_find_entry+0x2c>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e508:	b968      	cbnz	r0, 800e526 <etharp_find_entry+0x42>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e50a:	461e      	mov	r6, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e50c:	3301      	adds	r3, #1
 800e50e:	b21b      	sxth	r3, r3
 800e510:	2b09      	cmp	r3, #9
 800e512:	dc4b      	bgt.n	800e5ac <etharp_find_entry+0xc8>
    u8_t state = arp_table[i].state;
 800e514:	461c      	mov	r4, r3
 800e516:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800e51a:	485c      	ldr	r0, [pc, #368]	; (800e68c <etharp_find_entry+0x1a8>)
 800e51c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800e520:	7d10      	ldrb	r0, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e522:	2e0a      	cmp	r6, #10
 800e524:	d0f0      	beq.n	800e508 <etharp_find_entry+0x24>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e526:	2800      	cmp	r0, #0
 800e528:	d0f0      	beq.n	800e50c <etharp_find_entry+0x28>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e52a:	b147      	cbz	r7, 800e53e <etharp_find_entry+0x5a>
 800e52c:	683a      	ldr	r2, [r7, #0]
 800e52e:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
 800e532:	4d56      	ldr	r5, [pc, #344]	; (800e68c <etharp_find_entry+0x1a8>)
 800e534:	eb05 05cc 	add.w	r5, r5, ip, lsl #3
 800e538:	686d      	ldr	r5, [r5, #4]
 800e53a:	42aa      	cmp	r2, r5
 800e53c:	d00e      	beq.n	800e55c <etharp_find_entry+0x78>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e53e:	2801      	cmp	r0, #1
 800e540:	d018      	beq.n	800e574 <etharp_find_entry+0x90>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e542:	2801      	cmp	r0, #1
 800e544:	d9e2      	bls.n	800e50c <etharp_find_entry+0x28>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e546:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800e54a:	4a50      	ldr	r2, [pc, #320]	; (800e68c <etharp_find_entry+0x1a8>)
 800e54c:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 800e550:	8a62      	ldrh	r2, [r4, #18]
 800e552:	4572      	cmp	r2, lr
 800e554:	d3da      	bcc.n	800e50c <etharp_find_entry+0x28>
            old_stable = i;
            age_stable = arp_table[i].ctime;
 800e556:	4696      	mov	lr, r2
            old_stable = i;
 800e558:	4699      	mov	r9, r3
 800e55a:	e7d7      	b.n	800e50c <etharp_find_entry+0x28>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e55c:	f1b8 0f00 	cmp.w	r8, #0
 800e560:	f000 808c 	beq.w	800e67c <etharp_find_entry+0x198>
 800e564:	4d49      	ldr	r5, [pc, #292]	; (800e68c <etharp_find_entry+0x1a8>)
 800e566:	eb05 02cc 	add.w	r2, r5, ip, lsl #3
 800e56a:	6892      	ldr	r2, [r2, #8]
 800e56c:	4542      	cmp	r2, r8
 800e56e:	d1e6      	bne.n	800e53e <etharp_find_entry+0x5a>
        return i;
 800e570:	461e      	mov	r6, r3
 800e572:	e055      	b.n	800e620 <etharp_find_entry+0x13c>
        if (arp_table[i].q != NULL) {
 800e574:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800e578:	4844      	ldr	r0, [pc, #272]	; (800e68c <etharp_find_entry+0x1a8>)
 800e57a:	f850 2032 	ldr.w	r2, [r0, r2, lsl #3]
 800e57e:	b14a      	cbz	r2, 800e594 <etharp_find_entry+0xb0>
          if (arp_table[i].ctime >= age_queue) {
 800e580:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800e584:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800e588:	8a62      	ldrh	r2, [r4, #18]
 800e58a:	455a      	cmp	r2, fp
 800e58c:	d3be      	bcc.n	800e50c <etharp_find_entry+0x28>
            age_queue = arp_table[i].ctime;
 800e58e:	4693      	mov	fp, r2
            old_queue = i;
 800e590:	469a      	mov	sl, r3
 800e592:	e7bb      	b.n	800e50c <etharp_find_entry+0x28>
          if (arp_table[i].ctime >= age_pending) {
 800e594:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800e598:	4a3c      	ldr	r2, [pc, #240]	; (800e68c <etharp_find_entry+0x1a8>)
 800e59a:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 800e59e:	8a62      	ldrh	r2, [r4, #18]
 800e5a0:	9800      	ldr	r0, [sp, #0]
 800e5a2:	4282      	cmp	r2, r0
 800e5a4:	d3b2      	bcc.n	800e50c <etharp_find_entry+0x28>
            age_pending = arp_table[i].ctime;
 800e5a6:	9200      	str	r2, [sp, #0]
            old_pending = i;
 800e5a8:	9301      	str	r3, [sp, #4]
 800e5aa:	e7af      	b.n	800e50c <etharp_find_entry+0x28>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e5ac:	f011 0f02 	tst.w	r1, #2
 800e5b0:	d166      	bne.n	800e680 <etharp_find_entry+0x19c>
 800e5b2:	2e0a      	cmp	r6, #10
 800e5b4:	d038      	beq.n	800e628 <etharp_find_entry+0x144>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e5b6:	2e09      	cmp	r6, #9
 800e5b8:	dd16      	ble.n	800e5e8 <etharp_find_entry+0x104>
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e5ba:	f1b9 0f09 	cmp.w	r9, #9
 800e5be:	dc39      	bgt.n	800e634 <etharp_find_entry+0x150>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e5c0:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 800e5c4:	4a31      	ldr	r2, [pc, #196]	; (800e68c <etharp_find_entry+0x1a8>)
 800e5c6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d03a      	beq.n	800e644 <etharp_find_entry+0x160>
 800e5ce:	4b30      	ldr	r3, [pc, #192]	; (800e690 <etharp_find_entry+0x1ac>)
 800e5d0:	f240 126d 	movw	r2, #365	; 0x16d
 800e5d4:	492f      	ldr	r1, [pc, #188]	; (800e694 <etharp_find_entry+0x1b0>)
 800e5d6:	4830      	ldr	r0, [pc, #192]	; (800e698 <etharp_find_entry+0x1b4>)
 800e5d8:	f005 fe2c 	bl	8014234 <iprintf>
      i = old_stable;
 800e5dc:	464e      	mov	r6, r9
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e5de:	2e09      	cmp	r6, #9
 800e5e0:	dc34      	bgt.n	800e64c <etharp_find_entry+0x168>
    etharp_free_entry(i);
 800e5e2:	4630      	mov	r0, r6
 800e5e4:	f7ff ff64 	bl	800e4b0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e5e8:	2e09      	cmp	r6, #9
 800e5ea:	dc37      	bgt.n	800e65c <etharp_find_entry+0x178>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e5ec:	4634      	mov	r4, r6
 800e5ee:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800e5f2:	4a26      	ldr	r2, [pc, #152]	; (800e68c <etharp_find_entry+0x1a8>)
 800e5f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e5f8:	7d1b      	ldrb	r3, [r3, #20]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d136      	bne.n	800e66c <etharp_find_entry+0x188>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e5fe:	b137      	cbz	r7, 800e60e <etharp_find_entry+0x12a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e600:	6839      	ldr	r1, [r7, #0]
 800e602:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e606:	4a21      	ldr	r2, [pc, #132]	; (800e68c <etharp_find_entry+0x1a8>)
 800e608:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e60c:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800e60e:	4b1f      	ldr	r3, [pc, #124]	; (800e68c <etharp_find_entry+0x1a8>)
 800e610:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800e614:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800e618:	2100      	movs	r1, #0
 800e61a:	8251      	strh	r1, [r2, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e61c:	f8c2 8008 	str.w	r8, [r2, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800e620:	4630      	mov	r0, r6
 800e622:	b003      	add	sp, #12
 800e624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e628:	f011 0f01 	tst.w	r1, #1
 800e62c:	d1c3      	bne.n	800e5b6 <etharp_find_entry+0xd2>
    return (s16_t)ERR_MEM;
 800e62e:	f04f 36ff 	mov.w	r6, #4294967295
 800e632:	e7f5      	b.n	800e620 <etharp_find_entry+0x13c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e634:	9b01      	ldr	r3, [sp, #4]
 800e636:	2b09      	cmp	r3, #9
 800e638:	dd06      	ble.n	800e648 <etharp_find_entry+0x164>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e63a:	f1ba 0f09 	cmp.w	sl, #9
 800e63e:	dc22      	bgt.n	800e686 <etharp_find_entry+0x1a2>
      i = old_queue;
 800e640:	4656      	mov	r6, sl
 800e642:	e7cc      	b.n	800e5de <etharp_find_entry+0xfa>
      i = old_stable;
 800e644:	464e      	mov	r6, r9
 800e646:	e7ca      	b.n	800e5de <etharp_find_entry+0xfa>
      i = old_pending;
 800e648:	9e01      	ldr	r6, [sp, #4]
 800e64a:	e7c8      	b.n	800e5de <etharp_find_entry+0xfa>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e64c:	4b10      	ldr	r3, [pc, #64]	; (800e690 <etharp_find_entry+0x1ac>)
 800e64e:	f240 127f 	movw	r2, #383	; 0x17f
 800e652:	4912      	ldr	r1, [pc, #72]	; (800e69c <etharp_find_entry+0x1b8>)
 800e654:	4810      	ldr	r0, [pc, #64]	; (800e698 <etharp_find_entry+0x1b4>)
 800e656:	f005 fded 	bl	8014234 <iprintf>
 800e65a:	e7c2      	b.n	800e5e2 <etharp_find_entry+0xfe>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e65c:	4b0c      	ldr	r3, [pc, #48]	; (800e690 <etharp_find_entry+0x1ac>)
 800e65e:	f240 1283 	movw	r2, #387	; 0x183
 800e662:	490e      	ldr	r1, [pc, #56]	; (800e69c <etharp_find_entry+0x1b8>)
 800e664:	480c      	ldr	r0, [pc, #48]	; (800e698 <etharp_find_entry+0x1b4>)
 800e666:	f005 fde5 	bl	8014234 <iprintf>
 800e66a:	e7bf      	b.n	800e5ec <etharp_find_entry+0x108>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e66c:	4b08      	ldr	r3, [pc, #32]	; (800e690 <etharp_find_entry+0x1ac>)
 800e66e:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800e672:	490b      	ldr	r1, [pc, #44]	; (800e6a0 <etharp_find_entry+0x1bc>)
 800e674:	4808      	ldr	r0, [pc, #32]	; (800e698 <etharp_find_entry+0x1b4>)
 800e676:	f005 fddd 	bl	8014234 <iprintf>
 800e67a:	e7c0      	b.n	800e5fe <etharp_find_entry+0x11a>
        return i;
 800e67c:	461e      	mov	r6, r3
 800e67e:	e7cf      	b.n	800e620 <etharp_find_entry+0x13c>
    return (s16_t)ERR_MEM;
 800e680:	f04f 36ff 	mov.w	r6, #4294967295
 800e684:	e7cc      	b.n	800e620 <etharp_find_entry+0x13c>
      return (s16_t)ERR_MEM;
 800e686:	f04f 36ff 	mov.w	r6, #4294967295
 800e68a:	e7c9      	b.n	800e620 <etharp_find_entry+0x13c>
 800e68c:	20000690 	.word	0x20000690
 800e690:	080174cc 	.word	0x080174cc
 800e694:	08017504 	.word	0x08017504
 800e698:	08015418 	.word	0x08015418
 800e69c:	0801751c 	.word	0x0801751c
 800e6a0:	08017530 	.word	0x08017530

0800e6a4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	4605      	mov	r5, r0
 800e6aa:	460c      	mov	r4, r1
 800e6ac:	4616      	mov	r6, r2
 800e6ae:	461f      	mov	r7, r3
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e6b0:	f890 20de 	ldrb.w	r2, [r0, #222]	; 0xde
 800e6b4:	2a06      	cmp	r2, #6
 800e6b6:	d13b      	bne.n	800e730 <etharp_update_arp_entry+0x8c>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e6b8:	2c00      	cmp	r4, #0
 800e6ba:	d041      	beq.n	800e740 <etharp_update_arp_entry+0x9c>
 800e6bc:	6820      	ldr	r0, [r4, #0]
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	d03e      	beq.n	800e740 <etharp_update_arp_entry+0x9c>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e6c2:	4629      	mov	r1, r5
 800e6c4:	f001 f8c8 	bl	800f858 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	d139      	bne.n	800e740 <etharp_update_arp_entry+0x9c>
      ip4_addr_ismulticast(ipaddr)) {
 800e6cc:	6822      	ldr	r2, [r4, #0]
 800e6ce:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e6d2:	2ae0      	cmp	r2, #224	; 0xe0
 800e6d4:	d034      	beq.n	800e740 <etharp_update_arp_entry+0x9c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e6d6:	462a      	mov	r2, r5
 800e6d8:	4639      	mov	r1, r7
 800e6da:	4620      	mov	r0, r4
 800e6dc:	f7ff ff02 	bl	800e4e4 <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 800e6e0:	1e03      	subs	r3, r0, #0
 800e6e2:	db30      	blt.n	800e746 <etharp_update_arp_entry+0xa2>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e6e4:	4a1a      	ldr	r2, [pc, #104]	; (800e750 <etharp_update_arp_entry+0xac>)
 800e6e6:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800e6ea:	eb02 00c4 	add.w	r0, r2, r4, lsl #3
 800e6ee:	2102      	movs	r1, #2
 800e6f0:	7501      	strb	r1, [r0, #20]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e6f2:	6085      	str	r5, [r0, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e6f4:	00e1      	lsls	r1, r4, #3
 800e6f6:	3108      	adds	r1, #8
 800e6f8:	4411      	add	r1, r2
 800e6fa:	6837      	ldr	r7, [r6, #0]
 800e6fc:	604f      	str	r7, [r1, #4]
 800e6fe:	88b7      	ldrh	r7, [r6, #4]
 800e700:	810f      	strh	r7, [r1, #8]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e702:	2100      	movs	r1, #0
 800e704:	8241      	strh	r1, [r0, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e706:	f852 7034 	ldr.w	r7, [r2, r4, lsl #3]
 800e70a:	b1ff      	cbz	r7, 800e74c <etharp_update_arp_entry+0xa8>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 800e70c:	00e3      	lsls	r3, r4, #3
 800e70e:	460c      	mov	r4, r1
 800e710:	50d1      	str	r1, [r2, r3]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e712:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e716:	9300      	str	r3, [sp, #0]
 800e718:	4633      	mov	r3, r6
 800e71a:	f105 02d8 	add.w	r2, r5, #216	; 0xd8
 800e71e:	4639      	mov	r1, r7
 800e720:	4628      	mov	r0, r5
 800e722:	f005 fced 	bl	8014100 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e726:	4638      	mov	r0, r7
 800e728:	f7f9 f834 	bl	8007794 <pbuf_free>
  }
  return ERR_OK;
 800e72c:	4620      	mov	r0, r4
 800e72e:	e00b      	b.n	800e748 <etharp_update_arp_entry+0xa4>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e730:	4b08      	ldr	r3, [pc, #32]	; (800e754 <etharp_update_arp_entry+0xb0>)
 800e732:	f240 12a9 	movw	r2, #425	; 0x1a9
 800e736:	4908      	ldr	r1, [pc, #32]	; (800e758 <etharp_update_arp_entry+0xb4>)
 800e738:	4808      	ldr	r0, [pc, #32]	; (800e75c <etharp_update_arp_entry+0xb8>)
 800e73a:	f005 fd7b 	bl	8014234 <iprintf>
 800e73e:	e7bb      	b.n	800e6b8 <etharp_update_arp_entry+0x14>
    return ERR_ARG;
 800e740:	f06f 000f 	mvn.w	r0, #15
 800e744:	e000      	b.n	800e748 <etharp_update_arp_entry+0xa4>
    return (err_t)i;
 800e746:	b258      	sxtb	r0, r3
}
 800e748:	b003      	add	sp, #12
 800e74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ERR_OK;
 800e74c:	2000      	movs	r0, #0
 800e74e:	e7fb      	b.n	800e748 <etharp_update_arp_entry+0xa4>
 800e750:	20000690 	.word	0x20000690
 800e754:	080174cc 	.word	0x080174cc
 800e758:	0801755c 	.word	0x0801755c
 800e75c:	08015418 	.word	0x08015418

0800e760 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e764:	b082      	sub	sp, #8
 800e766:	460f      	mov	r7, r1
 800e768:	4690      	mov	r8, r2
 800e76a:	461d      	mov	r5, r3
 800e76c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e770:	4681      	mov	r9, r0
 800e772:	2800      	cmp	r0, #0
 800e774:	d042      	beq.n	800e7fc <etharp_raw+0x9c>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e776:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e77a:	211c      	movs	r1, #28
 800e77c:	200e      	movs	r0, #14
 800e77e:	f7f9 f86b 	bl	8007858 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e782:	4606      	mov	r6, r0
 800e784:	2800      	cmp	r0, #0
 800e786:	d051      	beq.n	800e82c <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e788:	8943      	ldrh	r3, [r0, #10]
 800e78a:	2b1b      	cmp	r3, #27
 800e78c:	d93e      	bls.n	800e80c <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e78e:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e790:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800e794:	f7f7 fcec 	bl	8006170 <lwip_htons>
 800e798:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e79a:	f899 30de 	ldrb.w	r3, [r9, #222]	; 0xde
 800e79e:	2b06      	cmp	r3, #6
 800e7a0:	d13c      	bne.n	800e81c <etharp_raw+0xbc>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e7a2:	682b      	ldr	r3, [r5, #0]
 800e7a4:	60a3      	str	r3, [r4, #8]
 800e7a6:	88ab      	ldrh	r3, [r5, #4]
 800e7a8:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e7aa:	f8da 3000 	ldr.w	r3, [sl]
 800e7ae:	f8c4 3012 	str.w	r3, [r4, #18]
 800e7b2:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800e7b6:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e7b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e7c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e7c6:	2500      	movs	r5, #0
 800e7c8:	7025      	strb	r5, [r4, #0]
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e7ce:	2308      	movs	r3, #8
 800e7d0:	70a3      	strb	r3, [r4, #2]
 800e7d2:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e7d4:	2306      	movs	r3, #6
 800e7d6:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e7d8:	2304      	movs	r3, #4
 800e7da:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e7dc:	f640 0306 	movw	r3, #2054	; 0x806
 800e7e0:	9300      	str	r3, [sp, #0]
 800e7e2:	4643      	mov	r3, r8
 800e7e4:	463a      	mov	r2, r7
 800e7e6:	4631      	mov	r1, r6
 800e7e8:	4648      	mov	r0, r9
 800e7ea:	f005 fc89 	bl	8014100 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e7ee:	4630      	mov	r0, r6
 800e7f0:	f7f8 ffd0 	bl	8007794 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800e7f4:	4628      	mov	r0, r5
}
 800e7f6:	b002      	add	sp, #8
 800e7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e7fc:	4b0d      	ldr	r3, [pc, #52]	; (800e834 <etharp_raw+0xd4>)
 800e7fe:	f240 4257 	movw	r2, #1111	; 0x457
 800e802:	490d      	ldr	r1, [pc, #52]	; (800e838 <etharp_raw+0xd8>)
 800e804:	480d      	ldr	r0, [pc, #52]	; (800e83c <etharp_raw+0xdc>)
 800e806:	f005 fd15 	bl	8014234 <iprintf>
 800e80a:	e7b4      	b.n	800e776 <etharp_raw+0x16>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e80c:	4b09      	ldr	r3, [pc, #36]	; (800e834 <etharp_raw+0xd4>)
 800e80e:	f240 4262 	movw	r2, #1122	; 0x462
 800e812:	490b      	ldr	r1, [pc, #44]	; (800e840 <etharp_raw+0xe0>)
 800e814:	4809      	ldr	r0, [pc, #36]	; (800e83c <etharp_raw+0xdc>)
 800e816:	f005 fd0d 	bl	8014234 <iprintf>
 800e81a:	e7b8      	b.n	800e78e <etharp_raw+0x2e>
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e81c:	4b05      	ldr	r3, [pc, #20]	; (800e834 <etharp_raw+0xd4>)
 800e81e:	f240 4269 	movw	r2, #1129	; 0x469
 800e822:	4908      	ldr	r1, [pc, #32]	; (800e844 <etharp_raw+0xe4>)
 800e824:	4805      	ldr	r0, [pc, #20]	; (800e83c <etharp_raw+0xdc>)
 800e826:	f005 fd05 	bl	8014234 <iprintf>
 800e82a:	e7ba      	b.n	800e7a2 <etharp_raw+0x42>
    return ERR_MEM;
 800e82c:	f04f 30ff 	mov.w	r0, #4294967295
 800e830:	e7e1      	b.n	800e7f6 <etharp_raw+0x96>
 800e832:	bf00      	nop
 800e834:	080174cc 	.word	0x080174cc
 800e838:	08015408 	.word	0x08015408
 800e83c:	08015418 	.word	0x08015418
 800e840:	08017580 	.word	0x08017580
 800e844:	080175b4 	.word	0x080175b4

0800e848 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e848:	b530      	push	{r4, r5, lr}
 800e84a:	b085      	sub	sp, #20
 800e84c:	4604      	mov	r4, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e84e:	f100 03d8 	add.w	r3, r0, #216	; 0xd8
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e852:	3404      	adds	r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e854:	2501      	movs	r5, #1
 800e856:	9503      	str	r5, [sp, #12]
 800e858:	9102      	str	r1, [sp, #8]
 800e85a:	4904      	ldr	r1, [pc, #16]	; (800e86c <etharp_request_dst+0x24>)
 800e85c:	9101      	str	r1, [sp, #4]
 800e85e:	9400      	str	r4, [sp, #0]
 800e860:	4619      	mov	r1, r3
 800e862:	f7ff ff7d 	bl	800e760 <etharp_raw>
                    ipaddr, ARP_REQUEST);
}
 800e866:	b005      	add	sp, #20
 800e868:	bd30      	pop	{r4, r5, pc}
 800e86a:	bf00      	nop
 800e86c:	08017e7c 	.word	0x08017e7c

0800e870 <etharp_cleanup_netif>:
{
 800e870:	b538      	push	{r3, r4, r5, lr}
 800e872:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e874:	2400      	movs	r4, #0
 800e876:	e000      	b.n	800e87a <etharp_cleanup_netif+0xa>
 800e878:	3401      	adds	r4, #1
 800e87a:	2c09      	cmp	r4, #9
 800e87c:	dc12      	bgt.n	800e8a4 <etharp_cleanup_netif+0x34>
    u8_t state = arp_table[i].state;
 800e87e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e882:	4a09      	ldr	r2, [pc, #36]	; (800e8a8 <etharp_cleanup_netif+0x38>)
 800e884:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e888:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d0f4      	beq.n	800e878 <etharp_cleanup_netif+0x8>
 800e88e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e892:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e896:	689b      	ldr	r3, [r3, #8]
 800e898:	42ab      	cmp	r3, r5
 800e89a:	d1ed      	bne.n	800e878 <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 800e89c:	4620      	mov	r0, r4
 800e89e:	f7ff fe07 	bl	800e4b0 <etharp_free_entry>
 800e8a2:	e7e9      	b.n	800e878 <etharp_cleanup_netif+0x8>
}
 800e8a4:	bd38      	pop	{r3, r4, r5, pc}
 800e8a6:	bf00      	nop
 800e8a8:	20000690 	.word	0x20000690

0800e8ac <etharp_input>:
{
 800e8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b0:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e8b2:	b1a9      	cbz	r1, 800e8e0 <etharp_input+0x34>
 800e8b4:	4604      	mov	r4, r0
 800e8b6:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 800e8b8:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e8ba:	882b      	ldrh	r3, [r5, #0]
 800e8bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8c0:	d108      	bne.n	800e8d4 <etharp_input+0x28>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e8c2:	792b      	ldrb	r3, [r5, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e8c4:	2b06      	cmp	r3, #6
 800e8c6:	d105      	bne.n	800e8d4 <etharp_input+0x28>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e8c8:	796b      	ldrb	r3, [r5, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e8ca:	2b04      	cmp	r3, #4
 800e8cc:	d102      	bne.n	800e8d4 <etharp_input+0x28>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e8ce:	886b      	ldrh	r3, [r5, #2]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e8d0:	2b08      	cmp	r3, #8
 800e8d2:	d00d      	beq.n	800e8f0 <etharp_input+0x44>
    pbuf_free(p);
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	f7f8 ff5d 	bl	8007794 <pbuf_free>
}
 800e8da:	b006      	add	sp, #24
 800e8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e8e0:	4b21      	ldr	r3, [pc, #132]	; (800e968 <etharp_input+0xbc>)
 800e8e2:	f240 228a 	movw	r2, #650	; 0x28a
 800e8e6:	4921      	ldr	r1, [pc, #132]	; (800e96c <etharp_input+0xc0>)
 800e8e8:	4821      	ldr	r0, [pc, #132]	; (800e970 <etharp_input+0xc4>)
 800e8ea:	f005 fca3 	bl	8014234 <iprintf>
 800e8ee:	e7f4      	b.n	800e8da <etharp_input+0x2e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e8f0:	f8d5 300e 	ldr.w	r3, [r5, #14]
 800e8f4:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e8f6:	69af      	ldr	r7, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e8f8:	684b      	ldr	r3, [r1, #4]
 800e8fa:	b99b      	cbnz	r3, 800e924 <etharp_input+0x78>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e8fc:	f105 0808 	add.w	r8, r5, #8
    for_us = 0;
 800e900:	2700      	movs	r7, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e902:	2302      	movs	r3, #2
 800e904:	4642      	mov	r2, r8
 800e906:	a905      	add	r1, sp, #20
 800e908:	4630      	mov	r0, r6
 800e90a:	f7ff fecb 	bl	800e6a4 <etharp_update_arp_entry>
  switch (hdr->opcode) {
 800e90e:	88eb      	ldrh	r3, [r5, #6]
 800e910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e914:	d011      	beq.n	800e93a <etharp_input+0x8e>
 800e916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e91a:	d020      	beq.n	800e95e <etharp_input+0xb2>
  pbuf_free(p);
 800e91c:	4620      	mov	r0, r4
 800e91e:	f7f8 ff39 	bl	8007794 <pbuf_free>
 800e922:	e7da      	b.n	800e8da <etharp_input+0x2e>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e924:	42bb      	cmp	r3, r7
 800e926:	bf14      	ite	ne
 800e928:	2700      	movne	r7, #0
 800e92a:	2701      	moveq	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e92c:	f105 0808 	add.w	r8, r5, #8
 800e930:	b10f      	cbz	r7, 800e936 <etharp_input+0x8a>
 800e932:	2301      	movs	r3, #1
 800e934:	e7e6      	b.n	800e904 <etharp_input+0x58>
 800e936:	2302      	movs	r3, #2
 800e938:	e7e4      	b.n	800e904 <etharp_input+0x58>
      if (for_us) {
 800e93a:	2f00      	cmp	r7, #0
 800e93c:	d0ee      	beq.n	800e91c <etharp_input+0x70>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e93e:	f106 01d8 	add.w	r1, r6, #216	; 0xd8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e942:	1d33      	adds	r3, r6, #4
        etharp_raw(netif,
 800e944:	2202      	movs	r2, #2
 800e946:	9203      	str	r2, [sp, #12]
 800e948:	aa05      	add	r2, sp, #20
 800e94a:	9202      	str	r2, [sp, #8]
 800e94c:	f8cd 8004 	str.w	r8, [sp, #4]
 800e950:	9300      	str	r3, [sp, #0]
 800e952:	460b      	mov	r3, r1
 800e954:	4642      	mov	r2, r8
 800e956:	4630      	mov	r0, r6
 800e958:	f7ff ff02 	bl	800e760 <etharp_raw>
 800e95c:	e7de      	b.n	800e91c <etharp_input+0x70>
      dhcp_arp_reply(netif, &sipaddr);
 800e95e:	a905      	add	r1, sp, #20
 800e960:	4630      	mov	r0, r6
 800e962:	f7ff fb6b 	bl	800e03c <dhcp_arp_reply>
      break;
 800e966:	e7d9      	b.n	800e91c <etharp_input+0x70>
 800e968:	080174cc 	.word	0x080174cc
 800e96c:	08015408 	.word	0x08015408
 800e970:	08015418 	.word	0x08015418

0800e974 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e974:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e976:	4a02      	ldr	r2, [pc, #8]	; (800e980 <etharp_request+0xc>)
 800e978:	f7ff ff66 	bl	800e848 <etharp_request_dst>
}
 800e97c:	bd08      	pop	{r3, pc}
 800e97e:	bf00      	nop
 800e980:	08017e74 	.word	0x08017e74

0800e984 <etharp_tmr>:
{
 800e984:	b510      	push	{r4, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e986:	2400      	movs	r4, #0
 800e988:	e005      	b.n	800e996 <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e98a:	2b04      	cmp	r3, #4
 800e98c:	d91b      	bls.n	800e9c6 <etharp_tmr+0x42>
        etharp_free_entry(i);
 800e98e:	4620      	mov	r0, r4
 800e990:	f7ff fd8e 	bl	800e4b0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e994:	3401      	adds	r4, #1
 800e996:	2c09      	cmp	r4, #9
 800e998:	dc35      	bgt.n	800ea06 <etharp_tmr+0x82>
    u8_t state = arp_table[i].state;
 800e99a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e99e:	00da      	lsls	r2, r3, #3
 800e9a0:	4b19      	ldr	r3, [pc, #100]	; (800ea08 <etharp_tmr+0x84>)
 800e9a2:	4413      	add	r3, r2
 800e9a4:	7d1a      	ldrb	r2, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 800e9a6:	2a00      	cmp	r2, #0
 800e9a8:	d0f4      	beq.n	800e994 <etharp_tmr+0x10>
      arp_table[i].ctime++;
 800e9aa:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800e9ae:	00cb      	lsls	r3, r1, #3
 800e9b0:	4915      	ldr	r1, [pc, #84]	; (800ea08 <etharp_tmr+0x84>)
 800e9b2:	4419      	add	r1, r3
 800e9b4:	8a4b      	ldrh	r3, [r1, #18]
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	b29b      	uxth	r3, r3
 800e9ba:	824b      	strh	r3, [r1, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e9bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e9c0:	d2e5      	bcs.n	800e98e <etharp_tmr+0xa>
 800e9c2:	2a01      	cmp	r2, #1
 800e9c4:	d0e1      	beq.n	800e98a <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e9c6:	2a03      	cmp	r2, #3
 800e9c8:	d00d      	beq.n	800e9e6 <etharp_tmr+0x62>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e9ca:	2a04      	cmp	r2, #4
 800e9cc:	d013      	beq.n	800e9f6 <etharp_tmr+0x72>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e9ce:	2a01      	cmp	r2, #1
 800e9d0:	d1e0      	bne.n	800e994 <etharp_tmr+0x10>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e9d2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e9d6:	00da      	lsls	r2, r3, #3
 800e9d8:	4b0b      	ldr	r3, [pc, #44]	; (800ea08 <etharp_tmr+0x84>)
 800e9da:	4413      	add	r3, r2
 800e9dc:	1d19      	adds	r1, r3, #4
 800e9de:	6898      	ldr	r0, [r3, #8]
 800e9e0:	f7ff ffc8 	bl	800e974 <etharp_request>
 800e9e4:	e7d6      	b.n	800e994 <etharp_tmr+0x10>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e9e6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e9ea:	00da      	lsls	r2, r3, #3
 800e9ec:	4b06      	ldr	r3, [pc, #24]	; (800ea08 <etharp_tmr+0x84>)
 800e9ee:	4413      	add	r3, r2
 800e9f0:	2204      	movs	r2, #4
 800e9f2:	751a      	strb	r2, [r3, #20]
 800e9f4:	e7ce      	b.n	800e994 <etharp_tmr+0x10>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e9f6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e9fa:	00da      	lsls	r2, r3, #3
 800e9fc:	4b02      	ldr	r3, [pc, #8]	; (800ea08 <etharp_tmr+0x84>)
 800e9fe:	4413      	add	r3, r2
 800ea00:	2202      	movs	r2, #2
 800ea02:	751a      	strb	r2, [r3, #20]
 800ea04:	e7c6      	b.n	800e994 <etharp_tmr+0x10>
}
 800ea06:	bd10      	pop	{r4, pc}
 800ea08:	20000690 	.word	0x20000690

0800ea0c <etharp_output_to_arp_index>:
{
 800ea0c:	b570      	push	{r4, r5, r6, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	4605      	mov	r5, r0
 800ea12:	460e      	mov	r6, r1
 800ea14:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ea16:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ea1a:	4b2f      	ldr	r3, [pc, #188]	; (800ead8 <etharp_output_to_arp_index+0xcc>)
 800ea1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea20:	7d1b      	ldrb	r3, [r3, #20]
 800ea22:	2b01      	cmp	r3, #1
 800ea24:	d919      	bls.n	800ea5a <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ea26:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ea2a:	4a2b      	ldr	r2, [pc, #172]	; (800ead8 <etharp_output_to_arp_index+0xcc>)
 800ea2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ea30:	7d1b      	ldrb	r3, [r3, #20]
 800ea32:	2b02      	cmp	r3, #2
 800ea34:	d019      	beq.n	800ea6a <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ea36:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ea3a:	00db      	lsls	r3, r3, #3
 800ea3c:	3308      	adds	r3, #8
 800ea3e:	4c26      	ldr	r4, [pc, #152]	; (800ead8 <etharp_output_to_arp_index+0xcc>)
 800ea40:	4423      	add	r3, r4
 800ea42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea46:	9200      	str	r2, [sp, #0]
 800ea48:	3304      	adds	r3, #4
 800ea4a:	f105 02d8 	add.w	r2, r5, #216	; 0xd8
 800ea4e:	4631      	mov	r1, r6
 800ea50:	4628      	mov	r0, r5
 800ea52:	f005 fb55 	bl	8014100 <ethernet_output>
}
 800ea56:	b002      	add	sp, #8
 800ea58:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ea5a:	4b20      	ldr	r3, [pc, #128]	; (800eadc <etharp_output_to_arp_index+0xd0>)
 800ea5c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ea60:	491f      	ldr	r1, [pc, #124]	; (800eae0 <etharp_output_to_arp_index+0xd4>)
 800ea62:	4820      	ldr	r0, [pc, #128]	; (800eae4 <etharp_output_to_arp_index+0xd8>)
 800ea64:	f005 fbe6 	bl	8014234 <iprintf>
 800ea68:	e7dd      	b.n	800ea26 <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ea6a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ea6e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ea72:	8a5b      	ldrh	r3, [r3, #18]
 800ea74:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800ea78:	d81b      	bhi.n	800eab2 <etharp_output_to_arp_index+0xa6>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ea7a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ea7e:	d3da      	bcc.n	800ea36 <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ea80:	4b15      	ldr	r3, [pc, #84]	; (800ead8 <etharp_output_to_arp_index+0xcc>)
 800ea82:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800ea86:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ea8a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800ea8e:	00d2      	lsls	r2, r2, #3
 800ea90:	3208      	adds	r2, #8
 800ea92:	441a      	add	r2, r3
 800ea94:	3204      	adds	r2, #4
 800ea96:	3104      	adds	r1, #4
 800ea98:	4628      	mov	r0, r5
 800ea9a:	f7ff fed5 	bl	800e848 <etharp_request_dst>
 800ea9e:	2800      	cmp	r0, #0
 800eaa0:	d1c9      	bne.n	800ea36 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800eaa2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800eaa6:	4a0c      	ldr	r2, [pc, #48]	; (800ead8 <etharp_output_to_arp_index+0xcc>)
 800eaa8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eaac:	2203      	movs	r2, #3
 800eaae:	751a      	strb	r2, [r3, #20]
 800eab0:	e7c1      	b.n	800ea36 <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800eab2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800eab6:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800eaba:	3104      	adds	r1, #4
 800eabc:	4628      	mov	r0, r5
 800eabe:	f7ff ff59 	bl	800e974 <etharp_request>
 800eac2:	2800      	cmp	r0, #0
 800eac4:	d1b7      	bne.n	800ea36 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800eac6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800eaca:	4a03      	ldr	r2, [pc, #12]	; (800ead8 <etharp_output_to_arp_index+0xcc>)
 800eacc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ead0:	2203      	movs	r2, #3
 800ead2:	751a      	strb	r2, [r3, #20]
 800ead4:	e7af      	b.n	800ea36 <etharp_output_to_arp_index+0x2a>
 800ead6:	bf00      	nop
 800ead8:	20000690 	.word	0x20000690
 800eadc:	080174cc 	.word	0x080174cc
 800eae0:	08017618 	.word	0x08017618
 800eae4:	08015418 	.word	0x08015418

0800eae8 <etharp_query>:
{
 800eae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eaec:	b083      	sub	sp, #12
 800eaee:	4680      	mov	r8, r0
 800eaf0:	460e      	mov	r6, r1
 800eaf2:	4617      	mov	r7, r2
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800eaf4:	f100 09d8 	add.w	r9, r0, #216	; 0xd8
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800eaf8:	4601      	mov	r1, r0
 800eafa:	6830      	ldr	r0, [r6, #0]
 800eafc:	f000 feac 	bl	800f858 <ip4_addr_isbroadcast_u32>
 800eb00:	2800      	cmp	r0, #0
 800eb02:	f040 80ab 	bne.w	800ec5c <etharp_query+0x174>
      ip4_addr_ismulticast(ipaddr) ||
 800eb06:	6833      	ldr	r3, [r6, #0]
 800eb08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800eb0c:	2ae0      	cmp	r2, #224	; 0xe0
 800eb0e:	f000 80a8 	beq.w	800ec62 <etharp_query+0x17a>
      ip4_addr_ismulticast(ipaddr) ||
 800eb12:	2e00      	cmp	r6, #0
 800eb14:	f000 80a8 	beq.w	800ec68 <etharp_query+0x180>
      ip4_addr_isany(ipaddr)) {
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	f000 80a8 	beq.w	800ec6e <etharp_query+0x186>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800eb1e:	4642      	mov	r2, r8
 800eb20:	2101      	movs	r1, #1
 800eb22:	4630      	mov	r0, r6
 800eb24:	f7ff fcde 	bl	800e4e4 <etharp_find_entry>
  if (i_err < 0) {
 800eb28:	1e05      	subs	r5, r0, #0
 800eb2a:	db13      	blt.n	800eb54 <etharp_query+0x6c>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800eb2c:	b2ab      	uxth	r3, r5
 800eb2e:	2b7e      	cmp	r3, #126	; 0x7e
 800eb30:	d812      	bhi.n	800eb58 <etharp_query+0x70>
  i = (netif_addr_idx_t)i_err;
 800eb32:	b2ed      	uxtb	r5, r5
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800eb34:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800eb38:	4b50      	ldr	r3, [pc, #320]	; (800ec7c <etharp_query+0x194>)
 800eb3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb3e:	7d1b      	ldrb	r3, [r3, #20]
 800eb40:	b993      	cbnz	r3, 800eb68 <etharp_query+0x80>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800eb42:	4613      	mov	r3, r2
 800eb44:	4a4d      	ldr	r2, [pc, #308]	; (800ec7c <etharp_query+0x194>)
 800eb46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eb4a:	2401      	movs	r4, #1
 800eb4c:	751c      	strb	r4, [r3, #20]
    arp_table[i].netif = netif;
 800eb4e:	f8c3 8008 	str.w	r8, [r3, #8]
 800eb52:	e00a      	b.n	800eb6a <etharp_query+0x82>
    return (err_t)i_err;
 800eb54:	b26c      	sxtb	r4, r5
 800eb56:	e049      	b.n	800ebec <etharp_query+0x104>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800eb58:	4b49      	ldr	r3, [pc, #292]	; (800ec80 <etharp_query+0x198>)
 800eb5a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800eb5e:	4949      	ldr	r1, [pc, #292]	; (800ec84 <etharp_query+0x19c>)
 800eb60:	4849      	ldr	r0, [pc, #292]	; (800ec88 <etharp_query+0x1a0>)
 800eb62:	f005 fb67 	bl	8014234 <iprintf>
 800eb66:	e7e4      	b.n	800eb32 <etharp_query+0x4a>
  int is_new_entry = 0;
 800eb68:	2400      	movs	r4, #0
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800eb6a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800eb6e:	4a43      	ldr	r2, [pc, #268]	; (800ec7c <etharp_query+0x194>)
 800eb70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eb74:	7d1b      	ldrb	r3, [r3, #20]
 800eb76:	b183      	cbz	r3, 800eb9a <etharp_query+0xb2>
  if (is_new_entry || (q == NULL)) {
 800eb78:	b9bc      	cbnz	r4, 800ebaa <etharp_query+0xc2>
 800eb7a:	b1b7      	cbz	r7, 800ebaa <etharp_query+0xc2>
  err_t result = ERR_MEM;
 800eb7c:	f04f 34ff 	mov.w	r4, #4294967295
  LWIP_ASSERT("q != NULL", q != NULL);
 800eb80:	b1df      	cbz	r7, 800ebba <etharp_query+0xd2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800eb82:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800eb86:	4a3d      	ldr	r2, [pc, #244]	; (800ec7c <etharp_query+0x194>)
 800eb88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eb8c:	7d1b      	ldrb	r3, [r3, #20]
 800eb8e:	2b01      	cmp	r3, #1
 800eb90:	d81b      	bhi.n	800ebca <etharp_query+0xe2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	d12a      	bne.n	800ebec <etharp_query+0x104>
    p = q;
 800eb96:	463c      	mov	r4, r7
 800eb98:	e038      	b.n	800ec0c <etharp_query+0x124>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800eb9a:	4b39      	ldr	r3, [pc, #228]	; (800ec80 <etharp_query+0x198>)
 800eb9c:	f240 32cd 	movw	r2, #973	; 0x3cd
 800eba0:	493a      	ldr	r1, [pc, #232]	; (800ec8c <etharp_query+0x1a4>)
 800eba2:	4839      	ldr	r0, [pc, #228]	; (800ec88 <etharp_query+0x1a0>)
 800eba4:	f005 fb46 	bl	8014234 <iprintf>
 800eba8:	e7e6      	b.n	800eb78 <etharp_query+0x90>
    result = etharp_request(netif, ipaddr);
 800ebaa:	4631      	mov	r1, r6
 800ebac:	4640      	mov	r0, r8
 800ebae:	f7ff fee1 	bl	800e974 <etharp_request>
 800ebb2:	4604      	mov	r4, r0
    if (q == NULL) {
 800ebb4:	2f00      	cmp	r7, #0
 800ebb6:	d1e3      	bne.n	800eb80 <etharp_query+0x98>
 800ebb8:	e018      	b.n	800ebec <etharp_query+0x104>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ebba:	4b31      	ldr	r3, [pc, #196]	; (800ec80 <etharp_query+0x198>)
 800ebbc:	f240 32e1 	movw	r2, #993	; 0x3e1
 800ebc0:	4933      	ldr	r1, [pc, #204]	; (800ec90 <etharp_query+0x1a8>)
 800ebc2:	4831      	ldr	r0, [pc, #196]	; (800ec88 <etharp_query+0x1a0>)
 800ebc4:	f005 fb36 	bl	8014234 <iprintf>
 800ebc8:	e7db      	b.n	800eb82 <etharp_query+0x9a>
    ETHARP_SET_ADDRHINT(netif, i);
 800ebca:	4b32      	ldr	r3, [pc, #200]	; (800ec94 <etharp_query+0x1ac>)
 800ebcc:	701d      	strb	r5, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ebce:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800ebd2:	00db      	lsls	r3, r3, #3
 800ebd4:	3308      	adds	r3, #8
 800ebd6:	4413      	add	r3, r2
 800ebd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ebdc:	9200      	str	r2, [sp, #0]
 800ebde:	3304      	adds	r3, #4
 800ebe0:	464a      	mov	r2, r9
 800ebe2:	4639      	mov	r1, r7
 800ebe4:	4640      	mov	r0, r8
 800ebe6:	f005 fa8b 	bl	8014100 <ethernet_output>
 800ebea:	4604      	mov	r4, r0
}
 800ebec:	4620      	mov	r0, r4
 800ebee:	b003      	add	sp, #12
 800ebf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ebf4:	4b22      	ldr	r3, [pc, #136]	; (800ec80 <etharp_query+0x198>)
 800ebf6:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ebfa:	4927      	ldr	r1, [pc, #156]	; (800ec98 <etharp_query+0x1b0>)
 800ebfc:	4822      	ldr	r0, [pc, #136]	; (800ec88 <etharp_query+0x1a0>)
 800ebfe:	f005 fb19 	bl	8014234 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ec02:	7b23      	ldrb	r3, [r4, #12]
 800ec04:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ec08:	d122      	bne.n	800ec50 <etharp_query+0x168>
      p = p->next;
 800ec0a:	6824      	ldr	r4, [r4, #0]
    while (p) {
 800ec0c:	b13c      	cbz	r4, 800ec1e <etharp_query+0x136>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ec0e:	8962      	ldrh	r2, [r4, #10]
 800ec10:	8923      	ldrh	r3, [r4, #8]
 800ec12:	429a      	cmp	r2, r3
 800ec14:	d1f5      	bne.n	800ec02 <etharp_query+0x11a>
 800ec16:	6823      	ldr	r3, [r4, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d1eb      	bne.n	800ebf4 <etharp_query+0x10c>
 800ec1c:	e7f1      	b.n	800ec02 <etharp_query+0x11a>
    int copy_needed = 0;
 800ec1e:	2300      	movs	r3, #0
    if (copy_needed) {
 800ec20:	b1c3      	cbz	r3, 800ec54 <etharp_query+0x16c>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ec22:	463a      	mov	r2, r7
 800ec24:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ec28:	200e      	movs	r0, #14
 800ec2a:	f7f9 f8f9 	bl	8007e20 <pbuf_clone>
 800ec2e:	4607      	mov	r7, r0
    if (p != NULL) {
 800ec30:	b307      	cbz	r7, 800ec74 <etharp_query+0x18c>
      if (arp_table[i].q != NULL) {
 800ec32:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800ec36:	4a11      	ldr	r2, [pc, #68]	; (800ec7c <etharp_query+0x194>)
 800ec38:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ec3c:	b108      	cbz	r0, 800ec42 <etharp_query+0x15a>
        pbuf_free(arp_table[i].q);
 800ec3e:	f7f8 fda9 	bl	8007794 <pbuf_free>
      arp_table[i].q = p;
 800ec42:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800ec46:	4a0d      	ldr	r2, [pc, #52]	; (800ec7c <etharp_query+0x194>)
 800ec48:	f842 7033 	str.w	r7, [r2, r3, lsl #3]
      result = ERR_OK;
 800ec4c:	2400      	movs	r4, #0
 800ec4e:	e7cd      	b.n	800ebec <etharp_query+0x104>
        copy_needed = 1;
 800ec50:	2301      	movs	r3, #1
 800ec52:	e7e5      	b.n	800ec20 <etharp_query+0x138>
      pbuf_ref(p);
 800ec54:	4638      	mov	r0, r7
 800ec56:	f7f8 ff09 	bl	8007a6c <pbuf_ref>
 800ec5a:	e7e9      	b.n	800ec30 <etharp_query+0x148>
    return ERR_ARG;
 800ec5c:	f06f 040f 	mvn.w	r4, #15
 800ec60:	e7c4      	b.n	800ebec <etharp_query+0x104>
 800ec62:	f06f 040f 	mvn.w	r4, #15
 800ec66:	e7c1      	b.n	800ebec <etharp_query+0x104>
 800ec68:	f06f 040f 	mvn.w	r4, #15
 800ec6c:	e7be      	b.n	800ebec <etharp_query+0x104>
 800ec6e:	f06f 040f 	mvn.w	r4, #15
 800ec72:	e7bb      	b.n	800ebec <etharp_query+0x104>
      result = ERR_MEM;
 800ec74:	f04f 34ff 	mov.w	r4, #4294967295
 800ec78:	e7b8      	b.n	800ebec <etharp_query+0x104>
 800ec7a:	bf00      	nop
 800ec7c:	20000690 	.word	0x20000690
 800ec80:	080174cc 	.word	0x080174cc
 800ec84:	08017648 	.word	0x08017648
 800ec88:	08015418 	.word	0x08015418
 800ec8c:	08017658 	.word	0x08017658
 800ec90:	08017680 	.word	0x08017680
 800ec94:	20000780 	.word	0x20000780
 800ec98:	0801768c 	.word	0x0801768c

0800ec9c <etharp_output>:
{
 800ec9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec9e:	b085      	sub	sp, #20
 800eca0:	460f      	mov	r7, r1
 800eca2:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800eca4:	4606      	mov	r6, r0
 800eca6:	2800      	cmp	r0, #0
 800eca8:	d03d      	beq.n	800ed26 <etharp_output+0x8a>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ecaa:	2f00      	cmp	r7, #0
 800ecac:	d043      	beq.n	800ed36 <etharp_output+0x9a>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ecae:	2d00      	cmp	r5, #0
 800ecb0:	d049      	beq.n	800ed46 <etharp_output+0xaa>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ecb2:	4631      	mov	r1, r6
 800ecb4:	6828      	ldr	r0, [r5, #0]
 800ecb6:	f000 fdcf 	bl	800f858 <ip4_addr_isbroadcast_u32>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2800      	cmp	r0, #0
 800ecbe:	f040 8081 	bne.w	800edc4 <etharp_output+0x128>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ecc2:	682a      	ldr	r2, [r5, #0]
 800ecc4:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
 800ecc8:	29e0      	cmp	r1, #224	; 0xe0
 800ecca:	d044      	beq.n	800ed56 <etharp_output+0xba>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800eccc:	6871      	ldr	r1, [r6, #4]
 800ecce:	69f0      	ldr	r0, [r6, #28]
 800ecd0:	4051      	eors	r1, r2
 800ecd2:	4201      	tst	r1, r0
 800ecd4:	d009      	beq.n	800ecea <etharp_output+0x4e>
        !ip4_addr_islinklocal(ipaddr)) {
 800ecd6:	b292      	uxth	r2, r2
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ecd8:	f64f 61a9 	movw	r1, #65193	; 0xfea9
 800ecdc:	428a      	cmp	r2, r1
 800ecde:	d004      	beq.n	800ecea <etharp_output+0x4e>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ece0:	6b72      	ldr	r2, [r6, #52]	; 0x34
 800ece2:	2a00      	cmp	r2, #0
 800ece4:	d07a      	beq.n	800eddc <etharp_output+0x140>
            dst_addr = netif_ip4_gw(netif);
 800ece6:	f106 0534 	add.w	r5, r6, #52	; 0x34
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ecea:	4a3e      	ldr	r2, [pc, #248]	; (800ede4 <etharp_output+0x148>)
 800ecec:	7812      	ldrb	r2, [r2, #0]
 800ecee:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 800ecf2:	493d      	ldr	r1, [pc, #244]	; (800ede8 <etharp_output+0x14c>)
 800ecf4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ecf8:	7d09      	ldrb	r1, [r1, #20]
 800ecfa:	2901      	cmp	r1, #1
 800ecfc:	d943      	bls.n	800ed86 <etharp_output+0xea>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ecfe:	4601      	mov	r1, r0
 800ed00:	4839      	ldr	r0, [pc, #228]	; (800ede8 <etharp_output+0x14c>)
 800ed02:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ed06:	6889      	ldr	r1, [r1, #8]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ed08:	42b1      	cmp	r1, r6
 800ed0a:	d13c      	bne.n	800ed86 <etharp_output+0xea>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ed0c:	682c      	ldr	r4, [r5, #0]
 800ed0e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800ed12:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800ed16:	6849      	ldr	r1, [r1, #4]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ed18:	428c      	cmp	r4, r1
 800ed1a:	d134      	bne.n	800ed86 <etharp_output+0xea>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ed1c:	4639      	mov	r1, r7
 800ed1e:	4630      	mov	r0, r6
 800ed20:	f7ff fe74 	bl	800ea0c <etharp_output_to_arp_index>
 800ed24:	e058      	b.n	800edd8 <etharp_output+0x13c>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ed26:	4b31      	ldr	r3, [pc, #196]	; (800edec <etharp_output+0x150>)
 800ed28:	f240 321e 	movw	r2, #798	; 0x31e
 800ed2c:	4930      	ldr	r1, [pc, #192]	; (800edf0 <etharp_output+0x154>)
 800ed2e:	4831      	ldr	r0, [pc, #196]	; (800edf4 <etharp_output+0x158>)
 800ed30:	f005 fa80 	bl	8014234 <iprintf>
 800ed34:	e7b9      	b.n	800ecaa <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ed36:	4b2d      	ldr	r3, [pc, #180]	; (800edec <etharp_output+0x150>)
 800ed38:	f240 321f 	movw	r2, #799	; 0x31f
 800ed3c:	492e      	ldr	r1, [pc, #184]	; (800edf8 <etharp_output+0x15c>)
 800ed3e:	482d      	ldr	r0, [pc, #180]	; (800edf4 <etharp_output+0x158>)
 800ed40:	f005 fa78 	bl	8014234 <iprintf>
 800ed44:	e7b3      	b.n	800ecae <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ed46:	4b29      	ldr	r3, [pc, #164]	; (800edec <etharp_output+0x150>)
 800ed48:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ed4c:	492b      	ldr	r1, [pc, #172]	; (800edfc <etharp_output+0x160>)
 800ed4e:	4829      	ldr	r0, [pc, #164]	; (800edf4 <etharp_output+0x158>)
 800ed50:	f005 fa70 	bl	8014234 <iprintf>
 800ed54:	e7ad      	b.n	800ecb2 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ed56:	2301      	movs	r3, #1
 800ed58:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ed62:	235e      	movs	r3, #94	; 0x5e
 800ed64:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ed68:	786b      	ldrb	r3, [r5, #1]
 800ed6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed6e:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ed72:	78ab      	ldrb	r3, [r5, #2]
 800ed74:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ed78:	78eb      	ldrb	r3, [r5, #3]
 800ed7a:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800ed7e:	ab02      	add	r3, sp, #8
 800ed80:	e021      	b.n	800edc6 <etharp_output+0x12a>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ed82:	3301      	adds	r3, #1
 800ed84:	b2db      	uxtb	r3, r3
 800ed86:	2b09      	cmp	r3, #9
 800ed88:	d816      	bhi.n	800edb8 <etharp_output+0x11c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ed8a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800ed8e:	4c16      	ldr	r4, [pc, #88]	; (800ede8 <etharp_output+0x14c>)
 800ed90:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800ed94:	7d02      	ldrb	r2, [r0, #20]
 800ed96:	2a01      	cmp	r2, #1
 800ed98:	d9f3      	bls.n	800ed82 <etharp_output+0xe6>
          (arp_table[i].netif == netif) &&
 800ed9a:	6882      	ldr	r2, [r0, #8]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ed9c:	42b2      	cmp	r2, r6
 800ed9e:	d1f0      	bne.n	800ed82 <etharp_output+0xe6>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800eda0:	682a      	ldr	r2, [r5, #0]
 800eda2:	6841      	ldr	r1, [r0, #4]
          (arp_table[i].netif == netif) &&
 800eda4:	428a      	cmp	r2, r1
 800eda6:	d1ec      	bne.n	800ed82 <etharp_output+0xe6>
        ETHARP_SET_ADDRHINT(netif, i);
 800eda8:	4a0e      	ldr	r2, [pc, #56]	; (800ede4 <etharp_output+0x148>)
 800edaa:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800edac:	461a      	mov	r2, r3
 800edae:	4639      	mov	r1, r7
 800edb0:	4630      	mov	r0, r6
 800edb2:	f7ff fe2b 	bl	800ea0c <etharp_output_to_arp_index>
 800edb6:	e00f      	b.n	800edd8 <etharp_output+0x13c>
    return etharp_query(netif, dst_addr, q);
 800edb8:	463a      	mov	r2, r7
 800edba:	4629      	mov	r1, r5
 800edbc:	4630      	mov	r0, r6
 800edbe:	f7ff fe93 	bl	800eae8 <etharp_query>
 800edc2:	e009      	b.n	800edd8 <etharp_output+0x13c>
    dest = (const struct eth_addr *)&ethbroadcast;
 800edc4:	4b0e      	ldr	r3, [pc, #56]	; (800ee00 <etharp_output+0x164>)
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800edc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800edca:	9200      	str	r2, [sp, #0]
 800edcc:	f106 02d8 	add.w	r2, r6, #216	; 0xd8
 800edd0:	4639      	mov	r1, r7
 800edd2:	4630      	mov	r0, r6
 800edd4:	f005 f994 	bl	8014100 <ethernet_output>
}
 800edd8:	b005      	add	sp, #20
 800edda:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ERR_RTE;
 800eddc:	f06f 0003 	mvn.w	r0, #3
 800ede0:	e7fa      	b.n	800edd8 <etharp_output+0x13c>
 800ede2:	bf00      	nop
 800ede4:	20000780 	.word	0x20000780
 800ede8:	20000690 	.word	0x20000690
 800edec:	080174cc 	.word	0x080174cc
 800edf0:	08015408 	.word	0x08015408
 800edf4:	08015418 	.word	0x08015418
 800edf8:	08017680 	.word	0x08017680
 800edfc:	080175f8 	.word	0x080175f8
 800ee00:	08017e74 	.word	0x08017e74

0800ee04 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ee04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee08:	b086      	sub	sp, #24
 800ee0a:	4606      	mov	r6, r0
 800ee0c:	4688      	mov	r8, r1
 800ee0e:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ee10:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ee14:	2124      	movs	r1, #36	; 0x24
 800ee16:	2036      	movs	r0, #54	; 0x36
 800ee18:	f7f8 fd1e 	bl	8007858 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800ee1c:	b3a0      	cbz	r0, 800ee88 <icmp_send_response+0x84>
 800ee1e:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ee20:	8943      	ldrh	r3, [r0, #10]
 800ee22:	2b23      	cmp	r3, #35	; 0x23
 800ee24:	d933      	bls.n	800ee8e <icmp_send_response+0x8a>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ee26:	f8d6 c004 	ldr.w	ip, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ee2a:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800ee2c:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 800ee30:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800ee32:	2300      	movs	r3, #0
 800ee34:	7123      	strb	r3, [r4, #4]
 800ee36:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800ee38:	71a3      	strb	r3, [r4, #6]
 800ee3a:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ee3c:	686b      	ldr	r3, [r5, #4]
 800ee3e:	6872      	ldr	r2, [r6, #4]
 800ee40:	6816      	ldr	r6, [r2, #0]
 800ee42:	6850      	ldr	r0, [r2, #4]
 800ee44:	6891      	ldr	r1, [r2, #8]
 800ee46:	68d7      	ldr	r7, [r2, #12]
 800ee48:	609e      	str	r6, [r3, #8]
 800ee4a:	60d8      	str	r0, [r3, #12]
 800ee4c:	6119      	str	r1, [r3, #16]
 800ee4e:	615f      	str	r7, [r3, #20]
 800ee50:	6916      	ldr	r6, [r2, #16]
 800ee52:	6950      	ldr	r0, [r2, #20]
 800ee54:	6991      	ldr	r1, [r2, #24]
 800ee56:	619e      	str	r6, [r3, #24]
 800ee58:	61d8      	str	r0, [r3, #28]
 800ee5a:	6219      	str	r1, [r3, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ee5c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800ee60:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ee62:	a805      	add	r0, sp, #20
 800ee64:	f000 faa4 	bl	800f3b0 <ip4_route>
#endif
  if (netif != NULL) {
 800ee68:	b158      	cbz	r0, 800ee82 <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ee6a:	2100      	movs	r1, #0
 800ee6c:	70a1      	strb	r1, [r4, #2]
 800ee6e:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ee70:	9002      	str	r0, [sp, #8]
 800ee72:	2301      	movs	r3, #1
 800ee74:	9301      	str	r3, [sp, #4]
 800ee76:	9100      	str	r1, [sp, #0]
 800ee78:	23ff      	movs	r3, #255	; 0xff
 800ee7a:	aa05      	add	r2, sp, #20
 800ee7c:	4628      	mov	r0, r5
 800ee7e:	f000 fcc9 	bl	800f814 <ip4_output_if>
  }
  pbuf_free(q);
 800ee82:	4628      	mov	r0, r5
 800ee84:	f7f8 fc86 	bl	8007794 <pbuf_free>
}
 800ee88:	b006      	add	sp, #24
 800ee8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ee8e:	4b04      	ldr	r3, [pc, #16]	; (800eea0 <icmp_send_response+0x9c>)
 800ee90:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ee94:	4903      	ldr	r1, [pc, #12]	; (800eea4 <icmp_send_response+0xa0>)
 800ee96:	4804      	ldr	r0, [pc, #16]	; (800eea8 <icmp_send_response+0xa4>)
 800ee98:	f005 f9cc 	bl	8014234 <iprintf>
 800ee9c:	e7c3      	b.n	800ee26 <icmp_send_response+0x22>
 800ee9e:	bf00      	nop
 800eea0:	080176a8 	.word	0x080176a8
 800eea4:	080176e0 	.word	0x080176e0
 800eea8:	08015418 	.word	0x08015418

0800eeac <icmp_input>:
{
 800eeac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eeb0:	b085      	sub	sp, #20
 800eeb2:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800eeb4:	4b4a      	ldr	r3, [pc, #296]	; (800efe0 <icmp_input+0x134>)
 800eeb6:	689f      	ldr	r7, [r3, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800eeb8:	783b      	ldrb	r3, [r7, #0]
 800eeba:	f003 030f 	and.w	r3, r3, #15
 800eebe:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800eec2:	4644      	mov	r4, r8
  if (hlen < IP_HLEN) {
 800eec4:	2c13      	cmp	r4, #19
 800eec6:	d915      	bls.n	800eef4 <icmp_input+0x48>
 800eec8:	460e      	mov	r6, r1
  if (p->len < sizeof(u16_t) * 2) {
 800eeca:	8943      	ldrh	r3, [r0, #10]
 800eecc:	2b03      	cmp	r3, #3
 800eece:	d911      	bls.n	800eef4 <icmp_input+0x48>
  type = *((u8_t *)p->payload);
 800eed0:	6843      	ldr	r3, [r0, #4]
 800eed2:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 800eed4:	2b08      	cmp	r3, #8
 800eed6:	d161      	bne.n	800ef9c <icmp_input+0xf0>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800eed8:	4b41      	ldr	r3, [pc, #260]	; (800efe0 <icmp_input+0x134>)
 800eeda:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800eedc:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800eee0:	2be0      	cmp	r3, #224	; 0xe0
 800eee2:	d01a      	beq.n	800ef1a <icmp_input+0x6e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800eee4:	4b3e      	ldr	r3, [pc, #248]	; (800efe0 <icmp_input+0x134>)
 800eee6:	6819      	ldr	r1, [r3, #0]
 800eee8:	f000 fcb6 	bl	800f858 <ip4_addr_isbroadcast_u32>
 800eeec:	b9a8      	cbnz	r0, 800ef1a <icmp_input+0x6e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800eeee:	892b      	ldrh	r3, [r5, #8]
 800eef0:	2b07      	cmp	r3, #7
 800eef2:	d805      	bhi.n	800ef00 <icmp_input+0x54>
  pbuf_free(p);
 800eef4:	4628      	mov	r0, r5
 800eef6:	f7f8 fc4d 	bl	8007794 <pbuf_free>
}
 800eefa:	b005      	add	sp, #20
 800eefc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ef00:	f108 090e 	add.w	r9, r8, #14
 800ef04:	4649      	mov	r1, r9
 800ef06:	4628      	mov	r0, r5
 800ef08:	f7f8 fbf3 	bl	80076f2 <pbuf_add_header>
 800ef0c:	2800      	cmp	r0, #0
 800ef0e:	d03a      	beq.n	800ef86 <icmp_input+0xda>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ef10:	892a      	ldrh	r2, [r5, #8]
 800ef12:	1913      	adds	r3, r2, r4
 800ef14:	b299      	uxth	r1, r3
        if (alloc_len < p->tot_len) {
 800ef16:	428a      	cmp	r2, r1
 800ef18:	d903      	bls.n	800ef22 <icmp_input+0x76>
  pbuf_free(p);
 800ef1a:	4628      	mov	r0, r5
 800ef1c:	f7f8 fc3a 	bl	8007794 <pbuf_free>
  return;
 800ef20:	e7eb      	b.n	800eefa <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ef22:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ef26:	200e      	movs	r0, #14
 800ef28:	f7f8 fc96 	bl	8007858 <pbuf_alloc>
        if (r == NULL) {
 800ef2c:	4604      	mov	r4, r0
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	d0f3      	beq.n	800ef1a <icmp_input+0x6e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ef32:	8942      	ldrh	r2, [r0, #10]
 800ef34:	f108 0308 	add.w	r3, r8, #8
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	d313      	bcc.n	800ef64 <icmp_input+0xb8>
        MEMCPY(r->payload, iphdr_in, hlen);
 800ef3c:	4642      	mov	r2, r8
 800ef3e:	4639      	mov	r1, r7
 800ef40:	6840      	ldr	r0, [r0, #4]
 800ef42:	f005 f947 	bl	80141d4 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800ef46:	4641      	mov	r1, r8
 800ef48:	4620      	mov	r0, r4
 800ef4a:	f7f8 fbdd 	bl	8007708 <pbuf_remove_header>
 800ef4e:	b960      	cbnz	r0, 800ef6a <icmp_input+0xbe>
        if (pbuf_copy(r, p) != ERR_OK) {
 800ef50:	4629      	mov	r1, r5
 800ef52:	4620      	mov	r0, r4
 800ef54:	f7f8 fde4 	bl	8007b20 <pbuf_copy>
 800ef58:	b988      	cbnz	r0, 800ef7e <icmp_input+0xd2>
        pbuf_free(p);
 800ef5a:	4628      	mov	r0, r5
 800ef5c:	f7f8 fc1a 	bl	8007794 <pbuf_free>
        p = r;
 800ef60:	4625      	mov	r5, r4
 800ef62:	e015      	b.n	800ef90 <icmp_input+0xe4>
          pbuf_free(r);
 800ef64:	f7f8 fc16 	bl	8007794 <pbuf_free>
          goto icmperr;
 800ef68:	e7d7      	b.n	800ef1a <icmp_input+0x6e>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ef6a:	4b1e      	ldr	r3, [pc, #120]	; (800efe4 <icmp_input+0x138>)
 800ef6c:	22b6      	movs	r2, #182	; 0xb6
 800ef6e:	491e      	ldr	r1, [pc, #120]	; (800efe8 <icmp_input+0x13c>)
 800ef70:	481e      	ldr	r0, [pc, #120]	; (800efec <icmp_input+0x140>)
 800ef72:	f005 f95f 	bl	8014234 <iprintf>
          pbuf_free(r);
 800ef76:	4620      	mov	r0, r4
 800ef78:	f7f8 fc0c 	bl	8007794 <pbuf_free>
          goto icmperr;
 800ef7c:	e7cd      	b.n	800ef1a <icmp_input+0x6e>
          pbuf_free(r);
 800ef7e:	4620      	mov	r0, r4
 800ef80:	f7f8 fc08 	bl	8007794 <pbuf_free>
          goto icmperr;
 800ef84:	e7c9      	b.n	800ef1a <icmp_input+0x6e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ef86:	4649      	mov	r1, r9
 800ef88:	4628      	mov	r0, r5
 800ef8a:	f7f8 fbbd 	bl	8007708 <pbuf_remove_header>
 800ef8e:	b948      	cbnz	r0, 800efa4 <icmp_input+0xf8>
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ef90:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800ef92:	4641      	mov	r1, r8
 800ef94:	4628      	mov	r0, r5
 800ef96:	f7f8 fbac 	bl	80076f2 <pbuf_add_header>
 800ef9a:	b150      	cbz	r0, 800efb2 <icmp_input+0x106>
  pbuf_free(p);
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	f7f8 fbf9 	bl	8007794 <pbuf_free>
  return;
 800efa2:	e7aa      	b.n	800eefa <icmp_input+0x4e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800efa4:	4b0f      	ldr	r3, [pc, #60]	; (800efe4 <icmp_input+0x138>)
 800efa6:	22c7      	movs	r2, #199	; 0xc7
 800efa8:	4911      	ldr	r1, [pc, #68]	; (800eff0 <icmp_input+0x144>)
 800efaa:	4810      	ldr	r0, [pc, #64]	; (800efec <icmp_input+0x140>)
 800efac:	f005 f942 	bl	8014234 <iprintf>
          goto icmperr;
 800efb0:	e7b3      	b.n	800ef1a <icmp_input+0x6e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800efb2:	6868      	ldr	r0, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 800efb4:	490a      	ldr	r1, [pc, #40]	; (800efe0 <icmp_input+0x134>)
 800efb6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800efb8:	60c3      	str	r3, [r0, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800efba:	694b      	ldr	r3, [r1, #20]
 800efbc:	6103      	str	r3, [r0, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800efbe:	2200      	movs	r2, #0
 800efc0:	7022      	strb	r2, [r4, #0]
        iecho->chksum = 0;
 800efc2:	70a2      	strb	r2, [r4, #2]
 800efc4:	70e2      	strb	r2, [r4, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800efc6:	23ff      	movs	r3, #255	; 0xff
 800efc8:	7203      	strb	r3, [r0, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800efca:	7282      	strb	r2, [r0, #10]
 800efcc:	72c2      	strb	r2, [r0, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800efce:	9602      	str	r6, [sp, #8]
 800efd0:	2001      	movs	r0, #1
 800efd2:	9001      	str	r0, [sp, #4]
 800efd4:	9200      	str	r2, [sp, #0]
 800efd6:	312c      	adds	r1, #44	; 0x2c
 800efd8:	4628      	mov	r0, r5
 800efda:	f000 fc1b 	bl	800f814 <ip4_output_if>
        if (ret != ERR_OK) {
 800efde:	e7dd      	b.n	800ef9c <icmp_input+0xf0>
 800efe0:	200039e8 	.word	0x200039e8
 800efe4:	080176a8 	.word	0x080176a8
 800efe8:	0801770c 	.word	0x0801770c
 800efec:	08015418 	.word	0x08015418
 800eff0:	08017744 	.word	0x08017744

0800eff4 <icmp_dest_unreach>:
{
 800eff4:	b508      	push	{r3, lr}
 800eff6:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800eff8:	2103      	movs	r1, #3
 800effa:	f7ff ff03 	bl	800ee04 <icmp_send_response>
}
 800effe:	bd08      	pop	{r3, pc}

0800f000 <icmp_time_exceeded>:
{
 800f000:	b508      	push	{r3, lr}
 800f002:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800f004:	210b      	movs	r1, #11
 800f006:	f7ff fefd 	bl	800ee04 <icmp_send_response>
}
 800f00a:	bd08      	pop	{r3, pc}

0800f00c <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 800f00c:	b538      	push	{r3, r4, r5, lr}
 800f00e:	4605      	mov	r5, r0
#ifdef LWIP_RAND
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 800f010:	2902      	cmp	r1, #2
 800f012:	d805      	bhi.n	800f020 <igmp_start_timer+0x14>
 800f014:	2401      	movs	r4, #1
 800f016:	816c      	strh	r4, [r5, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
 800f018:	b90c      	cbnz	r4, 800f01e <igmp_start_timer+0x12>
    group->timer = 1;
 800f01a:	2301      	movs	r3, #1
 800f01c:	816b      	strh	r3, [r5, #10]
  }
}
 800f01e:	bd38      	pop	{r3, r4, r5, pc}
 800f020:	460c      	mov	r4, r1
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 800f022:	f005 f995 	bl	8014350 <rand>
 800f026:	fbb0 f1f4 	udiv	r1, r0, r4
 800f02a:	fb04 0411 	mls	r4, r4, r1, r0
 800f02e:	b2a4      	uxth	r4, r4
 800f030:	e7f1      	b.n	800f016 <igmp_start_timer+0xa>

0800f032 <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 800f032:	b510      	push	{r4, lr}
 800f034:	4604      	mov	r4, r0
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 800f036:	7a43      	ldrb	r3, [r0, #9]
 800f038:	2b02      	cmp	r3, #2
 800f03a:	d007      	beq.n	800f04c <igmp_delaying_member+0x1a>
 800f03c:	2b01      	cmp	r3, #1
 800f03e:	d000      	beq.n	800f042 <igmp_delaying_member+0x10>
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
       ((group->timer == 0) || (maxresp < group->timer)))) {
    igmp_start_timer(group, maxresp);
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  }
}
 800f040:	bd10      	pop	{r4, pc}
       ((group->timer == 0) || (maxresp < group->timer)))) {
 800f042:	8943      	ldrh	r3, [r0, #10]
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 800f044:	b113      	cbz	r3, 800f04c <igmp_delaying_member+0x1a>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 800f046:	b28a      	uxth	r2, r1
 800f048:	4293      	cmp	r3, r2
 800f04a:	d9f9      	bls.n	800f040 <igmp_delaying_member+0xe>
    igmp_start_timer(group, maxresp);
 800f04c:	4620      	mov	r0, r4
 800f04e:	f7ff ffdd 	bl	800f00c <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 800f052:	2301      	movs	r3, #1
 800f054:	7263      	strb	r3, [r4, #9]
}
 800f056:	e7f3      	b.n	800f040 <igmp_delaying_member+0xe>

0800f058 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
 800f058:	b530      	push	{r4, r5, lr}
 800f05a:	b089      	sub	sp, #36	; 0x24
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 800f05c:	f240 4494 	movw	r4, #1172	; 0x494
 800f060:	f8ad 401c 	strh.w	r4, [sp, #28]
  ra[1] = 0x0000; /* Router shall examine packet */
 800f064:	2400      	movs	r4, #0
 800f066:	f8ad 401e 	strh.w	r4, [sp, #30]
  IGMP_STATS_INC(igmp.xmit);
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 800f06a:	2504      	movs	r5, #4
 800f06c:	9504      	str	r5, [sp, #16]
 800f06e:	ad07      	add	r5, sp, #28
 800f070:	9503      	str	r5, [sp, #12]
 800f072:	9302      	str	r3, [sp, #8]
 800f074:	2302      	movs	r3, #2
 800f076:	9301      	str	r3, [sp, #4]
 800f078:	9400      	str	r4, [sp, #0]
 800f07a:	2301      	movs	r3, #1
 800f07c:	f000 fbb0 	bl	800f7e0 <ip4_output_if_opt>
}
 800f080:	b009      	add	sp, #36	; 0x24
 800f082:	bd30      	pop	{r4, r5, pc}

0800f084 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
 800f084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f088:	b083      	sub	sp, #12
 800f08a:	4605      	mov	r5, r0
 800f08c:	460e      	mov	r6, r1
 800f08e:	4614      	mov	r4, r2
  struct pbuf     *p    = NULL;
  struct igmp_msg *igmp = NULL;
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 800f090:	4b27      	ldr	r3, [pc, #156]	; (800f130 <igmp_send+0xac>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	9301      	str	r3, [sp, #4]
  ip4_addr_t  *dest = NULL;

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 800f096:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f09a:	2108      	movs	r1, #8
 800f09c:	204a      	movs	r0, #74	; 0x4a
 800f09e:	f7f8 fbdb 	bl	8007858 <pbuf_alloc>

  if (p) {
 800f0a2:	b1a8      	cbz	r0, 800f0d0 <igmp_send+0x4c>
 800f0a4:	4607      	mov	r7, r0
    igmp = (struct igmp_msg *)p->payload;
 800f0a6:	f8d0 8004 	ldr.w	r8, [r0, #4]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 800f0aa:	8943      	ldrh	r3, [r0, #10]
 800f0ac:	2b07      	cmp	r3, #7
 800f0ae:	d912      	bls.n	800f0d6 <igmp_send+0x52>
                (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 800f0b0:	686b      	ldr	r3, [r5, #4]
 800f0b2:	9301      	str	r3, [sp, #4]

    if (type == IGMP_V2_MEMB_REPORT) {
 800f0b4:	2c16      	cmp	r4, #22
 800f0b6:	d016      	beq.n	800f0e6 <igmp_send+0x62>
      dest = &(group->group_address);
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
      group->last_reporter_flag = 1; /* Remember we were the last to report */
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 800f0b8:	2c17      	cmp	r4, #23
 800f0ba:	d01c      	beq.n	800f0f6 <igmp_send+0x72>
  ip4_addr_t  *dest = NULL;
 800f0bc:	f04f 0900 	mov.w	r9, #0
        dest = &allrouters;
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 800f0c0:	f1a4 0316 	sub.w	r3, r4, #22
 800f0c4:	b2db      	uxtb	r3, r3
 800f0c6:	2b01      	cmp	r3, #1
 800f0c8:	d91b      	bls.n	800f102 <igmp_send+0x7e>
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);

      igmp_ip_output_if(p, &src, dest, netif);
    }

    pbuf_free(p);
 800f0ca:	4638      	mov	r0, r7
 800f0cc:	f7f8 fb62 	bl	8007794 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 800f0d0:	b003      	add	sp, #12
 800f0d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 800f0d6:	4b17      	ldr	r3, [pc, #92]	; (800f134 <igmp_send+0xb0>)
 800f0d8:	f240 3202 	movw	r2, #770	; 0x302
 800f0dc:	4916      	ldr	r1, [pc, #88]	; (800f138 <igmp_send+0xb4>)
 800f0de:	4817      	ldr	r0, [pc, #92]	; (800f13c <igmp_send+0xb8>)
 800f0e0:	f005 f8a8 	bl	8014234 <iprintf>
 800f0e4:	e7e4      	b.n	800f0b0 <igmp_send+0x2c>
      dest = &(group->group_address);
 800f0e6:	f106 0904 	add.w	r9, r6, #4
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 800f0ea:	6873      	ldr	r3, [r6, #4]
 800f0ec:	f8c8 3004 	str.w	r3, [r8, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	7233      	strb	r3, [r6, #8]
 800f0f4:	e7e4      	b.n	800f0c0 <igmp_send+0x3c>
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 800f0f6:	6873      	ldr	r3, [r6, #4]
 800f0f8:	f8c8 3004 	str.w	r3, [r8, #4]
        dest = &allrouters;
 800f0fc:	f8df 9040 	ldr.w	r9, [pc, #64]	; 800f140 <igmp_send+0xbc>
 800f100:	e7de      	b.n	800f0c0 <igmp_send+0x3c>
      igmp->igmp_msgtype  = type;
 800f102:	f888 4000 	strb.w	r4, [r8]
      igmp->igmp_maxresp  = 0;
 800f106:	2300      	movs	r3, #0
 800f108:	f888 3001 	strb.w	r3, [r8, #1]
      igmp->igmp_checksum = 0;
 800f10c:	f888 3002 	strb.w	r3, [r8, #2]
 800f110:	f888 3003 	strb.w	r3, [r8, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 800f114:	2108      	movs	r1, #8
 800f116:	4640      	mov	r0, r8
 800f118:	f7f7 fb66 	bl	80067e8 <inet_chksum>
 800f11c:	f8a8 0002 	strh.w	r0, [r8, #2]
      igmp_ip_output_if(p, &src, dest, netif);
 800f120:	462b      	mov	r3, r5
 800f122:	464a      	mov	r2, r9
 800f124:	a901      	add	r1, sp, #4
 800f126:	4638      	mov	r0, r7
 800f128:	f7ff ff96 	bl	800f058 <igmp_ip_output_if>
 800f12c:	e7cd      	b.n	800f0ca <igmp_send+0x46>
 800f12e:	bf00      	nop
 800f130:	080178d4 	.word	0x080178d4
 800f134:	08017778 	.word	0x08017778
 800f138:	080177b0 	.word	0x080177b0
 800f13c:	08015418 	.word	0x08015418
 800f140:	20000784 	.word	0x20000784

0800f144 <igmp_timeout>:
{
 800f144:	b508      	push	{r3, lr}
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 800f146:	7a4b      	ldrb	r3, [r1, #9]
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d000      	beq.n	800f14e <igmp_timeout+0xa>
}
 800f14c:	bd08      	pop	{r3, pc}
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 800f14e:	684a      	ldr	r2, [r1, #4]
 800f150:	4b04      	ldr	r3, [pc, #16]	; (800f164 <igmp_timeout+0x20>)
 800f152:	681b      	ldr	r3, [r3, #0]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 800f154:	429a      	cmp	r2, r3
 800f156:	d0f9      	beq.n	800f14c <igmp_timeout+0x8>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 800f158:	2302      	movs	r3, #2
 800f15a:	724b      	strb	r3, [r1, #9]
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 800f15c:	2216      	movs	r2, #22
 800f15e:	f7ff ff91 	bl	800f084 <igmp_send>
}
 800f162:	e7f3      	b.n	800f14c <igmp_timeout+0x8>
 800f164:	20000788 	.word	0x20000788

0800f168 <igmp_init>:
  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 800f168:	4b03      	ldr	r3, [pc, #12]	; (800f178 <igmp_init+0x10>)
 800f16a:	4a04      	ldr	r2, [pc, #16]	; (800f17c <igmp_init+0x14>)
 800f16c:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 800f16e:	4b04      	ldr	r3, [pc, #16]	; (800f180 <igmp_init+0x18>)
 800f170:	f102 7280 	add.w	r2, r2, #16777216	; 0x1000000
 800f174:	601a      	str	r2, [r3, #0]
}
 800f176:	4770      	bx	lr
 800f178:	20000788 	.word	0x20000788
 800f17c:	010000e0 	.word	0x010000e0
 800f180:	20000784 	.word	0x20000784

0800f184 <igmp_report_groups>:
{
 800f184:	b510      	push	{r4, lr}
  struct igmp_group *group = netif_igmp_data(netif);
 800f186:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
  if (group != NULL) {
 800f18a:	b104      	cbz	r4, 800f18e <igmp_report_groups+0xa>
    group = group->next;
 800f18c:	6824      	ldr	r4, [r4, #0]
  while (group != NULL) {
 800f18e:	b12c      	cbz	r4, 800f19c <igmp_report_groups+0x18>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 800f190:	2105      	movs	r1, #5
 800f192:	4620      	mov	r0, r4
 800f194:	f7ff ff4d 	bl	800f032 <igmp_delaying_member>
    group = group->next;
 800f198:	6824      	ldr	r4, [r4, #0]
 800f19a:	e7f8      	b.n	800f18e <igmp_report_groups+0xa>
}
 800f19c:	bd10      	pop	{r4, pc}

0800f19e <igmp_lookfor_group>:
  struct igmp_group *group = netif_igmp_data(ifp);
 800f19e:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
  while (group != NULL) {
 800f1a2:	b128      	cbz	r0, 800f1b0 <igmp_lookfor_group+0x12>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 800f1a4:	6842      	ldr	r2, [r0, #4]
 800f1a6:	680b      	ldr	r3, [r1, #0]
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	d001      	beq.n	800f1b0 <igmp_lookfor_group+0x12>
    group = group->next;
 800f1ac:	6800      	ldr	r0, [r0, #0]
 800f1ae:	e7f8      	b.n	800f1a2 <igmp_lookfor_group+0x4>
}
 800f1b0:	4770      	bx	lr
	...

0800f1b4 <igmp_lookup_group>:
{
 800f1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1b6:	4604      	mov	r4, r0
 800f1b8:	460e      	mov	r6, r1
  struct igmp_group *list_head = netif_igmp_data(ifp);
 800f1ba:	f8d0 70cc 	ldr.w	r7, [r0, #204]	; 0xcc
  group = igmp_lookfor_group(ifp, addr);
 800f1be:	f7ff ffee 	bl	800f19e <igmp_lookfor_group>
  if (group != NULL) {
 800f1c2:	4605      	mov	r5, r0
 800f1c4:	b108      	cbz	r0, 800f1ca <igmp_lookup_group+0x16>
}
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 800f1ca:	2006      	movs	r0, #6
 800f1cc:	f7f7 fe24 	bl	8006e18 <memp_malloc>
  if (group != NULL) {
 800f1d0:	4605      	mov	r5, r0
 800f1d2:	2800      	cmp	r0, #0
 800f1d4:	d0f7      	beq.n	800f1c6 <igmp_lookup_group+0x12>
    ip4_addr_set(&(group->group_address), addr);
 800f1d6:	b186      	cbz	r6, 800f1fa <igmp_lookup_group+0x46>
 800f1d8:	6833      	ldr	r3, [r6, #0]
 800f1da:	606b      	str	r3, [r5, #4]
    group->timer              = 0; /* Not running */
 800f1dc:	2300      	movs	r3, #0
 800f1de:	816b      	strh	r3, [r5, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 800f1e0:	726b      	strb	r3, [r5, #9]
    group->last_reporter_flag = 0;
 800f1e2:	722b      	strb	r3, [r5, #8]
    group->use                = 0;
 800f1e4:	732b      	strb	r3, [r5, #12]
    if (list_head == NULL) {
 800f1e6:	b157      	cbz	r7, 800f1fe <igmp_lookup_group+0x4a>
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 800f1e8:	6832      	ldr	r2, [r6, #0]
 800f1ea:	4b12      	ldr	r3, [pc, #72]	; (800f234 <igmp_lookup_group+0x80>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	d017      	beq.n	800f222 <igmp_lookup_group+0x6e>
      group->next = list_head->next;
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	602b      	str	r3, [r5, #0]
      list_head->next = group;
 800f1f6:	603d      	str	r5, [r7, #0]
 800f1f8:	e7e5      	b.n	800f1c6 <igmp_lookup_group+0x12>
    ip4_addr_set(&(group->group_address), addr);
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	e7ed      	b.n	800f1da <igmp_lookup_group+0x26>
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 800f1fe:	6832      	ldr	r2, [r6, #0]
 800f200:	4b0c      	ldr	r3, [pc, #48]	; (800f234 <igmp_lookup_group+0x80>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	429a      	cmp	r2, r3
 800f206:	d104      	bne.n	800f212 <igmp_lookup_group+0x5e>
      group->next = NULL;
 800f208:	2300      	movs	r3, #0
 800f20a:	602b      	str	r3, [r5, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 800f20c:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
 800f210:	e7d9      	b.n	800f1c6 <igmp_lookup_group+0x12>
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 800f212:	4b09      	ldr	r3, [pc, #36]	; (800f238 <igmp_lookup_group+0x84>)
 800f214:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800f218:	4908      	ldr	r1, [pc, #32]	; (800f23c <igmp_lookup_group+0x88>)
 800f21a:	4809      	ldr	r0, [pc, #36]	; (800f240 <igmp_lookup_group+0x8c>)
 800f21c:	f005 f80a 	bl	8014234 <iprintf>
 800f220:	e7f2      	b.n	800f208 <igmp_lookup_group+0x54>
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 800f222:	4b05      	ldr	r3, [pc, #20]	; (800f238 <igmp_lookup_group+0x84>)
 800f224:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f228:	4906      	ldr	r1, [pc, #24]	; (800f244 <igmp_lookup_group+0x90>)
 800f22a:	4805      	ldr	r0, [pc, #20]	; (800f240 <igmp_lookup_group+0x8c>)
 800f22c:	f005 f802 	bl	8014234 <iprintf>
 800f230:	e7df      	b.n	800f1f2 <igmp_lookup_group+0x3e>
 800f232:	bf00      	nop
 800f234:	20000788 	.word	0x20000788
 800f238:	08017778 	.word	0x08017778
 800f23c:	080177ec 	.word	0x080177ec
 800f240:	08015418 	.word	0x08015418
 800f244:	08017820 	.word	0x08017820

0800f248 <igmp_start>:
{
 800f248:	b510      	push	{r4, lr}
 800f24a:	4604      	mov	r4, r0
  group = igmp_lookup_group(netif, &allsystems);
 800f24c:	490a      	ldr	r1, [pc, #40]	; (800f278 <igmp_start+0x30>)
 800f24e:	f7ff ffb1 	bl	800f1b4 <igmp_lookup_group>
  if (group != NULL) {
 800f252:	b168      	cbz	r0, 800f270 <igmp_start+0x28>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 800f254:	2202      	movs	r2, #2
 800f256:	7242      	strb	r2, [r0, #9]
    group->use++;
 800f258:	7b02      	ldrb	r2, [r0, #12]
 800f25a:	3201      	adds	r2, #1
 800f25c:	7302      	strb	r2, [r0, #12]
    if (netif->igmp_mac_filter != NULL) {
 800f25e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800f262:	b11b      	cbz	r3, 800f26c <igmp_start+0x24>
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 800f264:	2201      	movs	r2, #1
 800f266:	4904      	ldr	r1, [pc, #16]	; (800f278 <igmp_start+0x30>)
 800f268:	4620      	mov	r0, r4
 800f26a:	4798      	blx	r3
    return ERR_OK;
 800f26c:	2000      	movs	r0, #0
}
 800f26e:	bd10      	pop	{r4, pc}
  return ERR_MEM;
 800f270:	f04f 30ff 	mov.w	r0, #4294967295
 800f274:	e7fb      	b.n	800f26e <igmp_start+0x26>
 800f276:	bf00      	nop
 800f278:	20000788 	.word	0x20000788

0800f27c <igmp_input>:
{
 800f27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f27e:	b083      	sub	sp, #12
 800f280:	4604      	mov	r4, r0
 800f282:	460f      	mov	r7, r1
  if (p->len < IGMP_MINLEN) {
 800f284:	8941      	ldrh	r1, [r0, #10]
 800f286:	2907      	cmp	r1, #7
 800f288:	d915      	bls.n	800f2b6 <igmp_input+0x3a>
 800f28a:	4615      	mov	r5, r2
  igmp = (struct igmp_msg *)p->payload;
 800f28c:	6846      	ldr	r6, [r0, #4]
  if (inet_chksum(igmp, p->len)) {
 800f28e:	4630      	mov	r0, r6
 800f290:	f7f7 faaa 	bl	80067e8 <inet_chksum>
 800f294:	b990      	cbnz	r0, 800f2bc <igmp_input+0x40>
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 800f296:	4629      	mov	r1, r5
 800f298:	4638      	mov	r0, r7
 800f29a:	f7ff ff80 	bl	800f19e <igmp_lookfor_group>
  if (!group) {
 800f29e:	4602      	mov	r2, r0
 800f2a0:	b180      	cbz	r0, 800f2c4 <igmp_input+0x48>
  switch (igmp->igmp_msgtype) {
 800f2a2:	7833      	ldrb	r3, [r6, #0]
 800f2a4:	2b11      	cmp	r3, #17
 800f2a6:	d011      	beq.n	800f2cc <igmp_input+0x50>
 800f2a8:	2b16      	cmp	r3, #22
 800f2aa:	d040      	beq.n	800f32e <igmp_input+0xb2>
  pbuf_free(p);
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	f7f8 fa71 	bl	8007794 <pbuf_free>
}
 800f2b2:	b003      	add	sp, #12
 800f2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pbuf_free(p);
 800f2b6:	f7f8 fa6d 	bl	8007794 <pbuf_free>
    return;
 800f2ba:	e7fa      	b.n	800f2b2 <igmp_input+0x36>
    pbuf_free(p);
 800f2bc:	4620      	mov	r0, r4
 800f2be:	f7f8 fa69 	bl	8007794 <pbuf_free>
    return;
 800f2c2:	e7f6      	b.n	800f2b2 <igmp_input+0x36>
    pbuf_free(p);
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	f7f8 fa65 	bl	8007794 <pbuf_free>
    return;
 800f2ca:	e7f2      	b.n	800f2b2 <igmp_input+0x36>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 800f2cc:	6829      	ldr	r1, [r5, #0]
 800f2ce:	4b1c      	ldr	r3, [pc, #112]	; (800f340 <igmp_input+0xc4>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	4299      	cmp	r1, r3
 800f2d4:	d00e      	beq.n	800f2f4 <igmp_input+0x78>
        if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 800f2d6:	f116 0f04 	cmn.w	r6, #4
 800f2da:	d0e7      	beq.n	800f2ac <igmp_input+0x30>
 800f2dc:	6870      	ldr	r0, [r6, #4]
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	d0e4      	beq.n	800f2ac <igmp_input+0x30>
          if (ip4_addr_cmp(dest, &allsystems)) {
 800f2e2:	4299      	cmp	r1, r3
 800f2e4:	d01c      	beq.n	800f320 <igmp_input+0xa4>
          if (group != NULL) {
 800f2e6:	2a00      	cmp	r2, #0
 800f2e8:	d0e0      	beq.n	800f2ac <igmp_input+0x30>
            igmp_delaying_member(group, igmp->igmp_maxresp);
 800f2ea:	7871      	ldrb	r1, [r6, #1]
 800f2ec:	4610      	mov	r0, r2
 800f2ee:	f7ff fea0 	bl	800f032 <igmp_delaying_member>
 800f2f2:	e7db      	b.n	800f2ac <igmp_input+0x30>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 800f2f4:	f116 0f04 	cmn.w	r6, #4
 800f2f8:	d002      	beq.n	800f300 <igmp_input+0x84>
 800f2fa:	6870      	ldr	r0, [r6, #4]
 800f2fc:	2800      	cmp	r0, #0
 800f2fe:	d1ea      	bne.n	800f2d6 <igmp_input+0x5a>
        if (igmp->igmp_maxresp == 0) {
 800f300:	7873      	ldrb	r3, [r6, #1]
 800f302:	b90b      	cbnz	r3, 800f308 <igmp_input+0x8c>
          igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 800f304:	230a      	movs	r3, #10
 800f306:	7073      	strb	r3, [r6, #1]
        groupref = netif_igmp_data(inp);
 800f308:	f8d7 50cc 	ldr.w	r5, [r7, #204]	; 0xcc
        if (groupref != NULL) {
 800f30c:	b105      	cbz	r5, 800f310 <igmp_input+0x94>
          groupref = groupref->next;
 800f30e:	682d      	ldr	r5, [r5, #0]
        while (groupref) {
 800f310:	2d00      	cmp	r5, #0
 800f312:	d0cb      	beq.n	800f2ac <igmp_input+0x30>
          igmp_delaying_member(groupref, igmp->igmp_maxresp);
 800f314:	7871      	ldrb	r1, [r6, #1]
 800f316:	4628      	mov	r0, r5
 800f318:	f7ff fe8b 	bl	800f032 <igmp_delaying_member>
          groupref = groupref->next;
 800f31c:	682d      	ldr	r5, [r5, #0]
 800f31e:	e7f7      	b.n	800f310 <igmp_input+0x94>
            ip4_addr_copy(groupaddr, igmp->igmp_group_address);
 800f320:	9001      	str	r0, [sp, #4]
            group = igmp_lookfor_group(inp, &groupaddr);
 800f322:	a901      	add	r1, sp, #4
 800f324:	4638      	mov	r0, r7
 800f326:	f7ff ff3a 	bl	800f19e <igmp_lookfor_group>
 800f32a:	4602      	mov	r2, r0
 800f32c:	e7db      	b.n	800f2e6 <igmp_input+0x6a>
      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 800f32e:	7a43      	ldrb	r3, [r0, #9]
 800f330:	2b01      	cmp	r3, #1
 800f332:	d1bb      	bne.n	800f2ac <igmp_input+0x30>
        group->timer = 0; /* stopped */
 800f334:	2300      	movs	r3, #0
 800f336:	8143      	strh	r3, [r0, #10]
        group->group_state = IGMP_GROUP_IDLE_MEMBER;
 800f338:	2102      	movs	r1, #2
 800f33a:	7241      	strb	r1, [r0, #9]
        group->last_reporter_flag = 0;
 800f33c:	7203      	strb	r3, [r0, #8]
 800f33e:	e7b5      	b.n	800f2ac <igmp_input+0x30>
 800f340:	20000788 	.word	0x20000788

0800f344 <igmp_tmr>:
{
 800f344:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 800f346:	4b0c      	ldr	r3, [pc, #48]	; (800f378 <igmp_tmr+0x34>)
 800f348:	681d      	ldr	r5, [r3, #0]
 800f34a:	e00f      	b.n	800f36c <igmp_tmr+0x28>
          igmp_timeout(netif, group);
 800f34c:	4621      	mov	r1, r4
 800f34e:	4628      	mov	r0, r5
 800f350:	f7ff fef8 	bl	800f144 <igmp_timeout>
      group = group->next;
 800f354:	6824      	ldr	r4, [r4, #0]
    while (group != NULL) {
 800f356:	b144      	cbz	r4, 800f36a <igmp_tmr+0x26>
      if (group->timer > 0) {
 800f358:	8963      	ldrh	r3, [r4, #10]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d0fa      	beq.n	800f354 <igmp_tmr+0x10>
        group->timer--;
 800f35e:	3b01      	subs	r3, #1
 800f360:	b29b      	uxth	r3, r3
 800f362:	8163      	strh	r3, [r4, #10]
        if (group->timer == 0) {
 800f364:	2b00      	cmp	r3, #0
 800f366:	d1f5      	bne.n	800f354 <igmp_tmr+0x10>
 800f368:	e7f0      	b.n	800f34c <igmp_tmr+0x8>
  NETIF_FOREACH(netif) {
 800f36a:	682d      	ldr	r5, [r5, #0]
 800f36c:	b115      	cbz	r5, 800f374 <igmp_tmr+0x30>
    struct igmp_group *group = netif_igmp_data(netif);
 800f36e:	f8d5 40cc 	ldr.w	r4, [r5, #204]	; 0xcc
    while (group != NULL) {
 800f372:	e7f0      	b.n	800f356 <igmp_tmr+0x12>
}
 800f374:	bd38      	pop	{r3, r4, r5, pc}
 800f376:	bf00      	nop
 800f378:	20007b10 	.word	0x20007b10

0800f37c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f37c:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f37e:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 800f382:	f013 0f01 	tst.w	r3, #1
 800f386:	d00d      	beq.n	800f3a4 <ip4_input_accept+0x28>
 800f388:	4601      	mov	r1, r0
 800f38a:	6843      	ldr	r3, [r0, #4]
 800f38c:	b163      	cbz	r3, 800f3a8 <ip4_input_accept+0x2c>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f38e:	4a07      	ldr	r2, [pc, #28]	; (800f3ac <ip4_input_accept+0x30>)
 800f390:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800f392:	4283      	cmp	r3, r0
 800f394:	d004      	beq.n	800f3a0 <ip4_input_accept+0x24>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f396:	f000 fa5f 	bl	800f858 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f39a:	b908      	cbnz	r0, 800f3a0 <ip4_input_accept+0x24>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f39c:	2000      	movs	r0, #0
 800f39e:	e002      	b.n	800f3a6 <ip4_input_accept+0x2a>
      return 1;
 800f3a0:	2001      	movs	r0, #1
 800f3a2:	e000      	b.n	800f3a6 <ip4_input_accept+0x2a>
  return 0;
 800f3a4:	2000      	movs	r0, #0
}
 800f3a6:	bd08      	pop	{r3, pc}
  return 0;
 800f3a8:	2000      	movs	r0, #0
 800f3aa:	e7fc      	b.n	800f3a6 <ip4_input_accept+0x2a>
 800f3ac:	200039e8 	.word	0x200039e8

0800f3b0 <ip4_route>:
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 800f3b0:	6801      	ldr	r1, [r0, #0]
 800f3b2:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
 800f3b6:	2be0      	cmp	r3, #224	; 0xe0
 800f3b8:	d002      	beq.n	800f3c0 <ip4_route+0x10>
  NETIF_FOREACH(netif) {
 800f3ba:	4b29      	ldr	r3, [pc, #164]	; (800f460 <ip4_route+0xb0>)
 800f3bc:	6818      	ldr	r0, [r3, #0]
 800f3be:	e02f      	b.n	800f420 <ip4_route+0x70>
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 800f3c0:	4b28      	ldr	r3, [pc, #160]	; (800f464 <ip4_route+0xb4>)
 800f3c2:	6818      	ldr	r0, [r3, #0]
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	d0f8      	beq.n	800f3ba <ip4_route+0xa>
}
 800f3c8:	4770      	bx	lr
  NETIF_FOREACH(netif) {
 800f3ca:	6800      	ldr	r0, [r0, #0]
 800f3cc:	b1a8      	cbz	r0, 800f3fa <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f3ce:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 800f3d2:	f013 0f01 	tst.w	r3, #1
 800f3d6:	d0f8      	beq.n	800f3ca <ip4_route+0x1a>
 800f3d8:	f013 0f04 	tst.w	r3, #4
 800f3dc:	d0f5      	beq.n	800f3ca <ip4_route+0x1a>
 800f3de:	6842      	ldr	r2, [r0, #4]
 800f3e0:	2a00      	cmp	r2, #0
 800f3e2:	d0f2      	beq.n	800f3ca <ip4_route+0x1a>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f3e4:	69c4      	ldr	r4, [r0, #28]
 800f3e6:	404a      	eors	r2, r1
 800f3e8:	4222      	tst	r2, r4
 800f3ea:	d015      	beq.n	800f418 <ip4_route+0x68>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f3ec:	f013 0f02 	tst.w	r3, #2
 800f3f0:	d1eb      	bne.n	800f3ca <ip4_route+0x1a>
 800f3f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f3f4:	4299      	cmp	r1, r3
 800f3f6:	d1e8      	bne.n	800f3ca <ip4_route+0x1a>
 800f3f8:	e00e      	b.n	800f418 <ip4_route+0x68>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f3fa:	4b1b      	ldr	r3, [pc, #108]	; (800f468 <ip4_route+0xb8>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	b15b      	cbz	r3, 800f418 <ip4_route+0x68>
 800f400:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
 800f404:	f002 0205 	and.w	r2, r2, #5
 800f408:	2a05      	cmp	r2, #5
 800f40a:	d105      	bne.n	800f418 <ip4_route+0x68>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f40c:	685a      	ldr	r2, [r3, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f40e:	b11a      	cbz	r2, 800f418 <ip4_route+0x68>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f410:	b2c9      	uxtb	r1, r1
 800f412:	297f      	cmp	r1, #127	; 0x7f
 800f414:	d000      	beq.n	800f418 <ip4_route+0x68>
  return netif_default;
 800f416:	4618      	mov	r0, r3
}
 800f418:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f41c:	4770      	bx	lr
  NETIF_FOREACH(netif) {
 800f41e:	6800      	ldr	r0, [r0, #0]
 800f420:	b160      	cbz	r0, 800f43c <ip4_route+0x8c>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f422:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 800f426:	f013 0f01 	tst.w	r3, #1
 800f42a:	d0f8      	beq.n	800f41e <ip4_route+0x6e>
 800f42c:	f013 0f04 	tst.w	r3, #4
 800f430:	d0f5      	beq.n	800f41e <ip4_route+0x6e>
 800f432:	6842      	ldr	r2, [r0, #4]
 800f434:	2a00      	cmp	r2, #0
 800f436:	d0f2      	beq.n	800f41e <ip4_route+0x6e>
{
 800f438:	b410      	push	{r4}
 800f43a:	e7d3      	b.n	800f3e4 <ip4_route+0x34>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f43c:	4b0a      	ldr	r3, [pc, #40]	; (800f468 <ip4_route+0xb8>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d0c1      	beq.n	800f3c8 <ip4_route+0x18>
 800f444:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
 800f448:	f002 0205 	and.w	r2, r2, #5
 800f44c:	2a05      	cmp	r2, #5
 800f44e:	d1bb      	bne.n	800f3c8 <ip4_route+0x18>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f450:	685a      	ldr	r2, [r3, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f452:	2a00      	cmp	r2, #0
 800f454:	d0b8      	beq.n	800f3c8 <ip4_route+0x18>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f456:	b2c9      	uxtb	r1, r1
 800f458:	297f      	cmp	r1, #127	; 0x7f
 800f45a:	d0b5      	beq.n	800f3c8 <ip4_route+0x18>
  return netif_default;
 800f45c:	4618      	mov	r0, r3
 800f45e:	4770      	bx	lr
 800f460:	20007b10 	.word	0x20007b10
 800f464:	2000078c 	.word	0x2000078c
 800f468:	20007b14 	.word	0x20007b14

0800f46c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f470:	4604      	mov	r4, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f472:	6847      	ldr	r7, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800f474:	783b      	ldrb	r3, [r7, #0]
 800f476:	091a      	lsrs	r2, r3, #4
 800f478:	2a04      	cmp	r2, #4
 800f47a:	d004      	beq.n	800f486 <ip4_input+0x1a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f47c:	f7f8 f98a 	bl	8007794 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800f480:	2000      	movs	r0, #0
 800f482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f486:	460e      	mov	r6, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f488:	f003 030f 	and.w	r3, r3, #15
 800f48c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800f490:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f492:	8878      	ldrh	r0, [r7, #2]
 800f494:	f7f6 fe6c 	bl	8006170 <lwip_htons>
 800f498:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 800f49a:	8923      	ldrh	r3, [r4, #8]
 800f49c:	4283      	cmp	r3, r0
 800f49e:	d859      	bhi.n	800f554 <ip4_input+0xe8>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f4a0:	8963      	ldrh	r3, [r4, #10]
 800f4a2:	42ab      	cmp	r3, r5
 800f4a4:	d35b      	bcc.n	800f55e <ip4_input+0xf2>
 800f4a6:	8923      	ldrh	r3, [r4, #8]
 800f4a8:	4543      	cmp	r3, r8
 800f4aa:	d358      	bcc.n	800f55e <ip4_input+0xf2>
 800f4ac:	2d13      	cmp	r5, #19
 800f4ae:	d956      	bls.n	800f55e <ip4_input+0xf2>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f4b0:	6939      	ldr	r1, [r7, #16]
 800f4b2:	4b71      	ldr	r3, [pc, #452]	; (800f678 <ip4_input+0x20c>)
 800f4b4:	62d9      	str	r1, [r3, #44]	; 0x2c
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f4bc:	639a      	str	r2, [r3, #56]	; 0x38
 800f4be:	635a      	str	r2, [r3, #52]	; 0x34
 800f4c0:	631a      	str	r2, [r3, #48]	; 0x30
 800f4c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f4c6:	68f8      	ldr	r0, [r7, #12]
 800f4c8:	6158      	str	r0, [r3, #20]
 800f4ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800f4ce:	621a      	str	r2, [r3, #32]
 800f4d0:	61da      	str	r2, [r3, #28]
 800f4d2:	619a      	str	r2, [r3, #24]
 800f4d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f4d8:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 800f4dc:	29e0      	cmp	r1, #224	; 0xe0
 800f4de:	d157      	bne.n	800f590 <ip4_input+0x124>
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 800f4e0:	f896 30df 	ldrb.w	r3, [r6, #223]	; 0xdf
 800f4e4:	f013 0f20 	tst.w	r3, #32
 800f4e8:	d13d      	bne.n	800f566 <ip4_input+0xfa>
  int check_ip_src = 1;
 800f4ea:	2301      	movs	r3, #1
      netif = NULL;
 800f4ec:	2500      	movs	r5, #0
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800f4ee:	7a7a      	ldrb	r2, [r7, #9]
 800f4f0:	2a11      	cmp	r2, #17
 800f4f2:	d070      	beq.n	800f5d6 <ip4_input+0x16a>
  if (check_ip_src
 800f4f4:	b11b      	cbz	r3, 800f4fe <ip4_input+0x92>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800f4f6:	4b60      	ldr	r3, [pc, #384]	; (800f678 <ip4_input+0x20c>)
 800f4f8:	6958      	ldr	r0, [r3, #20]
 800f4fa:	2800      	cmp	r0, #0
 800f4fc:	d173      	bne.n	800f5e6 <ip4_input+0x17a>
  if (netif == NULL) {
 800f4fe:	2d00      	cmp	r5, #0
 800f500:	d07f      	beq.n	800f602 <ip4_input+0x196>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f502:	88fb      	ldrh	r3, [r7, #6]
 800f504:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f508:	b29b      	uxth	r3, r3
 800f50a:	b133      	cbz	r3, 800f51a <ip4_input+0xae>
    p = ip4_reass(p);
 800f50c:	4620      	mov	r0, r4
 800f50e:	f000 fbf9 	bl	800fd04 <ip4_reass>
    if (p == NULL) {
 800f512:	4604      	mov	r4, r0
 800f514:	2800      	cmp	r0, #0
 800f516:	d0b3      	beq.n	800f480 <ip4_input+0x14>
    iphdr = (const struct ip_hdr *)p->payload;
 800f518:	6847      	ldr	r7, [r0, #4]
  ip_data.current_netif = netif;
 800f51a:	4a57      	ldr	r2, [pc, #348]	; (800f678 <ip4_input+0x20c>)
 800f51c:	6015      	str	r5, [r2, #0]
  ip_data.current_input_netif = inp;
 800f51e:	6056      	str	r6, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f520:	6097      	str	r7, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f522:	783b      	ldrb	r3, [r7, #0]
 800f524:	f003 030f 	and.w	r3, r3, #15
 800f528:	009b      	lsls	r3, r3, #2
 800f52a:	8213      	strh	r3, [r2, #16]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f52c:	4649      	mov	r1, r9
 800f52e:	4620      	mov	r0, r4
 800f530:	f7f8 f8ea 	bl	8007708 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 800f534:	7a7b      	ldrb	r3, [r7, #9]
 800f536:	3b01      	subs	r3, #1
 800f538:	2b10      	cmp	r3, #16
 800f53a:	f200 8083 	bhi.w	800f644 <ip4_input+0x1d8>
 800f53e:	e8df f003 	tbb	[pc, r3]
 800f542:	7b76      	.short	0x7b76
 800f544:	71818181 	.word	0x71818181
 800f548:	81818181 	.word	0x81818181
 800f54c:	81818181 	.word	0x81818181
 800f550:	8181      	.short	0x8181
 800f552:	64          	.byte	0x64
 800f553:	00          	.byte	0x00
    pbuf_realloc(p, iphdr_len);
 800f554:	4601      	mov	r1, r0
 800f556:	4620      	mov	r0, r4
 800f558:	f7f8 fa2c 	bl	80079b4 <pbuf_realloc>
 800f55c:	e7a0      	b.n	800f4a0 <ip4_input+0x34>
    pbuf_free(p);
 800f55e:	4620      	mov	r0, r4
 800f560:	f7f8 f918 	bl	8007794 <pbuf_free>
    return ERR_OK;
 800f564:	e78c      	b.n	800f480 <ip4_input+0x14>
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 800f566:	4945      	ldr	r1, [pc, #276]	; (800f67c <ip4_input+0x210>)
 800f568:	4630      	mov	r0, r6
 800f56a:	f7ff fe18 	bl	800f19e <igmp_lookfor_group>
 800f56e:	4605      	mov	r5, r0
 800f570:	b360      	cbz	r0, 800f5cc <ip4_input+0x160>
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 800f572:	4b41      	ldr	r3, [pc, #260]	; (800f678 <ip4_input+0x20c>)
 800f574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f576:	4b42      	ldr	r3, [pc, #264]	; (800f680 <ip4_input+0x214>)
 800f578:	429a      	cmp	r2, r3
 800f57a:	d002      	beq.n	800f582 <ip4_input+0x116>
  int check_ip_src = 1;
 800f57c:	2301      	movs	r3, #1
      netif = inp;
 800f57e:	4635      	mov	r5, r6
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 800f580:	e021      	b.n	800f5c6 <ip4_input+0x15a>
          ip4_addr_isany(ip4_current_src_addr())) {
 800f582:	4b3d      	ldr	r3, [pc, #244]	; (800f678 <ip4_input+0x20c>)
 800f584:	695b      	ldr	r3, [r3, #20]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 800f586:	b10b      	cbz	r3, 800f58c <ip4_input+0x120>
  int check_ip_src = 1;
 800f588:	2301      	movs	r3, #1
 800f58a:	e7f8      	b.n	800f57e <ip4_input+0x112>
        check_ip_src = 0;
 800f58c:	2300      	movs	r3, #0
 800f58e:	e7f6      	b.n	800f57e <ip4_input+0x112>
    if (ip4_input_accept(inp)) {
 800f590:	4630      	mov	r0, r6
 800f592:	f7ff fef3 	bl	800f37c <ip4_input_accept>
 800f596:	b9a0      	cbnz	r0, 800f5c2 <ip4_input+0x156>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f598:	4b37      	ldr	r3, [pc, #220]	; (800f678 <ip4_input+0x20c>)
 800f59a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f59e:	2b7f      	cmp	r3, #127	; 0x7f
 800f5a0:	d016      	beq.n	800f5d0 <ip4_input+0x164>
        NETIF_FOREACH(netif) {
 800f5a2:	4b38      	ldr	r3, [pc, #224]	; (800f684 <ip4_input+0x218>)
 800f5a4:	681d      	ldr	r5, [r3, #0]
 800f5a6:	e000      	b.n	800f5aa <ip4_input+0x13e>
 800f5a8:	682d      	ldr	r5, [r5, #0]
 800f5aa:	b145      	cbz	r5, 800f5be <ip4_input+0x152>
          if (netif == inp) {
 800f5ac:	42b5      	cmp	r5, r6
 800f5ae:	d0fb      	beq.n	800f5a8 <ip4_input+0x13c>
          if (ip4_input_accept(netif)) {
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	f7ff fee3 	bl	800f37c <ip4_input_accept>
 800f5b6:	2800      	cmp	r0, #0
 800f5b8:	d0f6      	beq.n	800f5a8 <ip4_input+0x13c>
  int check_ip_src = 1;
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	e003      	b.n	800f5c6 <ip4_input+0x15a>
 800f5be:	2301      	movs	r3, #1
 800f5c0:	e001      	b.n	800f5c6 <ip4_input+0x15a>
      netif = inp;
 800f5c2:	4635      	mov	r5, r6
  int check_ip_src = 1;
 800f5c4:	2301      	movs	r3, #1
  if (netif == NULL) {
 800f5c6:	2d00      	cmp	r5, #0
 800f5c8:	d194      	bne.n	800f4f4 <ip4_input+0x88>
 800f5ca:	e790      	b.n	800f4ee <ip4_input+0x82>
  int check_ip_src = 1;
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	e78e      	b.n	800f4ee <ip4_input+0x82>
 800f5d0:	2301      	movs	r3, #1
      netif = NULL;
 800f5d2:	2500      	movs	r5, #0
 800f5d4:	e78b      	b.n	800f4ee <ip4_input+0x82>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800f5d6:	eb07 0209 	add.w	r2, r7, r9
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800f5da:	8852      	ldrh	r2, [r2, #2]
 800f5dc:	f5b2 4f88 	cmp.w	r2, #17408	; 0x4400
 800f5e0:	d188      	bne.n	800f4f4 <ip4_input+0x88>
        netif = inp;
 800f5e2:	4635      	mov	r5, r6
 800f5e4:	e78b      	b.n	800f4fe <ip4_input+0x92>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f5e6:	4631      	mov	r1, r6
 800f5e8:	f000 f936 	bl	800f858 <ip4_addr_isbroadcast_u32>
 800f5ec:	b928      	cbnz	r0, 800f5fa <ip4_input+0x18e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f5ee:	4b22      	ldr	r3, [pc, #136]	; (800f678 <ip4_input+0x20c>)
 800f5f0:	695b      	ldr	r3, [r3, #20]
 800f5f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f5f6:	2be0      	cmp	r3, #224	; 0xe0
 800f5f8:	d181      	bne.n	800f4fe <ip4_input+0x92>
      pbuf_free(p);
 800f5fa:	4620      	mov	r0, r4
 800f5fc:	f7f8 f8ca 	bl	8007794 <pbuf_free>
      return ERR_OK;
 800f600:	e73e      	b.n	800f480 <ip4_input+0x14>
    pbuf_free(p);
 800f602:	4620      	mov	r0, r4
 800f604:	f7f8 f8c6 	bl	8007794 <pbuf_free>
    return ERR_OK;
 800f608:	e73a      	b.n	800f480 <ip4_input+0x14>
        udp_input(p, inp);
 800f60a:	4631      	mov	r1, r6
 800f60c:	4620      	mov	r0, r4
 800f60e:	f7fc fe0d 	bl	800c22c <udp_input>
  ip_data.current_netif = NULL;
 800f612:	4b19      	ldr	r3, [pc, #100]	; (800f678 <ip4_input+0x20c>)
 800f614:	2200      	movs	r2, #0
 800f616:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f618:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f61a:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f61c:	821a      	strh	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_src_addr());
 800f61e:	615a      	str	r2, [r3, #20]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f620:	62da      	str	r2, [r3, #44]	; 0x2c
  return ERR_OK;
 800f622:	e72d      	b.n	800f480 <ip4_input+0x14>
        tcp_input(p, inp);
 800f624:	4631      	mov	r1, r6
 800f626:	4620      	mov	r0, r4
 800f628:	f7fb f804 	bl	800a634 <tcp_input>
        break;
 800f62c:	e7f1      	b.n	800f612 <ip4_input+0x1a6>
        icmp_input(p, inp);
 800f62e:	4631      	mov	r1, r6
 800f630:	4620      	mov	r0, r4
 800f632:	f7ff fc3b 	bl	800eeac <icmp_input>
        break;
 800f636:	e7ec      	b.n	800f612 <ip4_input+0x1a6>
        igmp_input(p, inp, ip4_current_dest_addr());
 800f638:	4a10      	ldr	r2, [pc, #64]	; (800f67c <ip4_input+0x210>)
 800f63a:	4631      	mov	r1, r6
 800f63c:	4620      	mov	r0, r4
 800f63e:	f7ff fe1d 	bl	800f27c <igmp_input>
        break;
 800f642:	e7e6      	b.n	800f612 <ip4_input+0x1a6>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f644:	4629      	mov	r1, r5
 800f646:	4b0c      	ldr	r3, [pc, #48]	; (800f678 <ip4_input+0x20c>)
 800f648:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f64a:	f000 f905 	bl	800f858 <ip4_addr_isbroadcast_u32>
 800f64e:	b928      	cbnz	r0, 800f65c <ip4_input+0x1f0>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f650:	4b09      	ldr	r3, [pc, #36]	; (800f678 <ip4_input+0x20c>)
 800f652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f658:	2be0      	cmp	r3, #224	; 0xe0
 800f65a:	d103      	bne.n	800f664 <ip4_input+0x1f8>
        pbuf_free(p);
 800f65c:	4620      	mov	r0, r4
 800f65e:	f7f8 f899 	bl	8007794 <pbuf_free>
        break;
 800f662:	e7d6      	b.n	800f612 <ip4_input+0x1a6>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f664:	4649      	mov	r1, r9
 800f666:	4620      	mov	r0, r4
 800f668:	f7f8 f88e 	bl	8007788 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f66c:	2102      	movs	r1, #2
 800f66e:	4620      	mov	r0, r4
 800f670:	f7ff fcc0 	bl	800eff4 <icmp_dest_unreach>
 800f674:	e7f2      	b.n	800f65c <ip4_input+0x1f0>
 800f676:	bf00      	nop
 800f678:	200039e8 	.word	0x200039e8
 800f67c:	20003a14 	.word	0x20003a14
 800f680:	010000e0 	.word	0x010000e0
 800f684:	20007b10 	.word	0x20007b10

0800f688 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                      u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                      u16_t optlen)
{
 800f688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f68c:	b083      	sub	sp, #12
 800f68e:	4604      	mov	r4, r0
 800f690:	4688      	mov	r8, r1
 800f692:	4617      	mov	r7, r2
 800f694:	469a      	mov	sl, r3
 800f696:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800f69a:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f69e:	7b83      	ldrb	r3, [r0, #14]
 800f6a0:	2b01      	cmp	r3, #1
 800f6a2:	d159      	bne.n	800f758 <ip4_output_if_opt_src+0xd0>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f6a4:	2f00      	cmp	r7, #0
 800f6a6:	d075      	beq.n	800f794 <ip4_output_if_opt_src+0x10c>
    u16_t ip_hlen = IP_HLEN;
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
    if (optlen != 0) {
 800f6a8:	2d00      	cmp	r5, #0
 800f6aa:	d065      	beq.n	800f778 <ip4_output_if_opt_src+0xf0>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
 800f6ac:	2d28      	cmp	r5, #40	; 0x28
 800f6ae:	d87f      	bhi.n	800f7b0 <ip4_output_if_opt_src+0x128>
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_VAL;
      }
      /* round up to a multiple of 4 */
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
 800f6b0:	1cee      	adds	r6, r5, #3
 800f6b2:	b2b6      	uxth	r6, r6
 800f6b4:	f026 0603 	bic.w	r6, r6, #3
 800f6b8:	fa1f fb86 	uxth.w	fp, r6
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
 800f6bc:	3614      	adds	r6, #20
 800f6be:	b2b6      	uxth	r6, r6
      /* First write in the IP options */
      if (pbuf_add_header(p, optlen_aligned)) {
 800f6c0:	4659      	mov	r1, fp
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	f7f8 f815 	bl	80076f2 <pbuf_add_header>
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	d174      	bne.n	800f7b6 <ip4_output_if_opt_src+0x12e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
      }
      MEMCPY(p->payload, ip_options, optlen);
 800f6cc:	462a      	mov	r2, r5
 800f6ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f6d0:	6860      	ldr	r0, [r4, #4]
 800f6d2:	f004 fd7f 	bl	80141d4 <memcpy>
      if (optlen < optlen_aligned) {
 800f6d6:	455d      	cmp	r5, fp
 800f6d8:	d346      	bcc.n	800f768 <ip4_output_if_opt_src+0xe0>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f6da:	2114      	movs	r1, #20
 800f6dc:	4620      	mov	r0, r4
 800f6de:	f7f8 f808 	bl	80076f2 <pbuf_add_header>
 800f6e2:	2800      	cmp	r0, #0
 800f6e4:	d16a      	bne.n	800f7bc <ip4_output_if_opt_src+0x134>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f6e6:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f6e8:	8963      	ldrh	r3, [r4, #10]
 800f6ea:	2b13      	cmp	r3, #19
 800f6ec:	d946      	bls.n	800f77c <ip4_output_if_opt_src+0xf4>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f6ee:	f885 a008 	strb.w	sl, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f6f2:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 800f6f6:	726b      	strb	r3, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f6fc:	08b6      	lsrs	r6, r6, #2
 800f6fe:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 800f702:	702e      	strb	r6, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800f704:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f708:	706b      	strb	r3, [r5, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f70a:	8920      	ldrh	r0, [r4, #8]
 800f70c:	f7f6 fd30 	bl	8006170 <lwip_htons>
 800f710:	8068      	strh	r0, [r5, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f712:	2300      	movs	r3, #0
 800f714:	71ab      	strb	r3, [r5, #6]
 800f716:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f718:	4e2b      	ldr	r6, [pc, #172]	; (800f7c8 <ip4_output_if_opt_src+0x140>)
 800f71a:	8830      	ldrh	r0, [r6, #0]
 800f71c:	f7f6 fd28 	bl	8006170 <lwip_htons>
 800f720:	80a8      	strh	r0, [r5, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f722:	8833      	ldrh	r3, [r6, #0]
 800f724:	3301      	adds	r3, #1
 800f726:	8033      	strh	r3, [r6, #0]

    if (src == NULL) {
 800f728:	f1b8 0f00 	cmp.w	r8, #0
 800f72c:	d02e      	beq.n	800f78c <ip4_output_if_opt_src+0x104>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f72e:	f8d8 3000 	ldr.w	r3, [r8]
 800f732:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f734:	2300      	movs	r3, #0
 800f736:	72ab      	strb	r3, [r5, #10]
 800f738:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f73a:	f8b9 30d4 	ldrh.w	r3, [r9, #212]	; 0xd4
 800f73e:	b113      	cbz	r3, 800f746 <ip4_output_if_opt_src+0xbe>
 800f740:	8922      	ldrh	r2, [r4, #8]
 800f742:	4293      	cmp	r3, r2
 800f744:	d32e      	bcc.n	800f7a4 <ip4_output_if_opt_src+0x11c>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f746:	f8d9 30b4 	ldr.w	r3, [r9, #180]	; 0xb4
 800f74a:	463a      	mov	r2, r7
 800f74c:	4621      	mov	r1, r4
 800f74e:	4648      	mov	r0, r9
 800f750:	4798      	blx	r3
}
 800f752:	b003      	add	sp, #12
 800f754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f758:	4b1c      	ldr	r3, [pc, #112]	; (800f7cc <ip4_output_if_opt_src+0x144>)
 800f75a:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f75e:	491c      	ldr	r1, [pc, #112]	; (800f7d0 <ip4_output_if_opt_src+0x148>)
 800f760:	481c      	ldr	r0, [pc, #112]	; (800f7d4 <ip4_output_if_opt_src+0x14c>)
 800f762:	f004 fd67 	bl	8014234 <iprintf>
 800f766:	e79d      	b.n	800f6a4 <ip4_output_if_opt_src+0x1c>
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
 800f768:	6860      	ldr	r0, [r4, #4]
 800f76a:	ebab 0205 	sub.w	r2, fp, r5
 800f76e:	2100      	movs	r1, #0
 800f770:	4428      	add	r0, r5
 800f772:	f004 fd57 	bl	8014224 <memset>
 800f776:	e7b0      	b.n	800f6da <ip4_output_if_opt_src+0x52>
    u16_t ip_hlen = IP_HLEN;
 800f778:	2614      	movs	r6, #20
 800f77a:	e7ae      	b.n	800f6da <ip4_output_if_opt_src+0x52>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f77c:	4b13      	ldr	r3, [pc, #76]	; (800f7cc <ip4_output_if_opt_src+0x144>)
 800f77e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800f782:	4915      	ldr	r1, [pc, #84]	; (800f7d8 <ip4_output_if_opt_src+0x150>)
 800f784:	4813      	ldr	r0, [pc, #76]	; (800f7d4 <ip4_output_if_opt_src+0x14c>)
 800f786:	f004 fd55 	bl	8014234 <iprintf>
 800f78a:	e7b0      	b.n	800f6ee <ip4_output_if_opt_src+0x66>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f78c:	4b13      	ldr	r3, [pc, #76]	; (800f7dc <ip4_output_if_opt_src+0x154>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	60eb      	str	r3, [r5, #12]
 800f792:	e7cf      	b.n	800f734 <ip4_output_if_opt_src+0xac>
    if (p->len < IP_HLEN) {
 800f794:	8963      	ldrh	r3, [r4, #10]
 800f796:	2b13      	cmp	r3, #19
 800f798:	d913      	bls.n	800f7c2 <ip4_output_if_opt_src+0x13a>
    iphdr = (struct ip_hdr *)p->payload;
 800f79a:	6863      	ldr	r3, [r4, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f79c:	691b      	ldr	r3, [r3, #16]
 800f79e:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800f7a0:	af01      	add	r7, sp, #4
 800f7a2:	e7ca      	b.n	800f73a <ip4_output_if_opt_src+0xb2>
    return ip4_frag(p, netif, dest);
 800f7a4:	463a      	mov	r2, r7
 800f7a6:	4649      	mov	r1, r9
 800f7a8:	4620      	mov	r0, r4
 800f7aa:	f000 fbb7 	bl	800ff1c <ip4_frag>
 800f7ae:	e7d0      	b.n	800f752 <ip4_output_if_opt_src+0xca>
        return ERR_VAL;
 800f7b0:	f06f 0005 	mvn.w	r0, #5
 800f7b4:	e7cd      	b.n	800f752 <ip4_output_if_opt_src+0xca>
        return ERR_BUF;
 800f7b6:	f06f 0001 	mvn.w	r0, #1
 800f7ba:	e7ca      	b.n	800f752 <ip4_output_if_opt_src+0xca>
      return ERR_BUF;
 800f7bc:	f06f 0001 	mvn.w	r0, #1
 800f7c0:	e7c7      	b.n	800f752 <ip4_output_if_opt_src+0xca>
      return ERR_BUF;
 800f7c2:	f06f 0001 	mvn.w	r0, #1
 800f7c6:	e7c4      	b.n	800f752 <ip4_output_if_opt_src+0xca>
 800f7c8:	20000790 	.word	0x20000790
 800f7cc:	08017864 	.word	0x08017864
 800f7d0:	08017898 	.word	0x08017898
 800f7d4:	08015418 	.word	0x08015418
 800f7d8:	080178a4 	.word	0x080178a4
 800f7dc:	080178d4 	.word	0x080178d4

0800f7e0 <ip4_output_if_opt>:
{
 800f7e0:	b530      	push	{r4, r5, lr}
 800f7e2:	b087      	sub	sp, #28
 800f7e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  if (dest != LWIP_IP_HDRINCL) {
 800f7e6:	4615      	mov	r5, r2
 800f7e8:	b11a      	cbz	r2, 800f7f2 <ip4_output_if_opt+0x12>
    if (ip4_addr_isany(src)) {
 800f7ea:	b109      	cbz	r1, 800f7f0 <ip4_output_if_opt+0x10>
 800f7ec:	680a      	ldr	r2, [r1, #0]
 800f7ee:	b902      	cbnz	r2, 800f7f2 <ip4_output_if_opt+0x12>
      src_used = netif_ip4_addr(netif);
 800f7f0:	1d21      	adds	r1, r4, #4
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 800f7f2:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 800f7f6:	9204      	str	r2, [sp, #16]
 800f7f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f7fa:	9203      	str	r2, [sp, #12]
 800f7fc:	9402      	str	r4, [sp, #8]
 800f7fe:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800f802:	9201      	str	r2, [sp, #4]
 800f804:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 800f808:	9200      	str	r2, [sp, #0]
 800f80a:	462a      	mov	r2, r5
 800f80c:	f7ff ff3c 	bl	800f688 <ip4_output_if_opt_src>
}
 800f810:	b007      	add	sp, #28
 800f812:	bd30      	pop	{r4, r5, pc}

0800f814 <ip4_output_if>:
{
 800f814:	b510      	push	{r4, lr}
 800f816:	b086      	sub	sp, #24
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 800f818:	2400      	movs	r4, #0
 800f81a:	9404      	str	r4, [sp, #16]
 800f81c:	9403      	str	r4, [sp, #12]
 800f81e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f820:	9402      	str	r4, [sp, #8]
 800f822:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800f826:	9401      	str	r4, [sp, #4]
 800f828:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800f82c:	9400      	str	r4, [sp, #0]
 800f82e:	f7ff ffd7 	bl	800f7e0 <ip4_output_if_opt>
}
 800f832:	b006      	add	sp, #24
 800f834:	bd10      	pop	{r4, pc}

0800f836 <ip4_output_if_src>:
{
 800f836:	b510      	push	{r4, lr}
 800f838:	b086      	sub	sp, #24
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 800f83a:	2400      	movs	r4, #0
 800f83c:	9404      	str	r4, [sp, #16]
 800f83e:	9403      	str	r4, [sp, #12]
 800f840:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f842:	9402      	str	r4, [sp, #8]
 800f844:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800f848:	9401      	str	r4, [sp, #4]
 800f84a:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800f84e:	9400      	str	r4, [sp, #0]
 800f850:	f7ff ff1a 	bl	800f688 <ip4_output_if_opt_src>
}
 800f854:	b006      	add	sp, #24
 800f856:	bd10      	pop	{r4, pc}

0800f858 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f858:	4603      	mov	r3, r0
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f85a:	1e42      	subs	r2, r0, #1
 800f85c:	f112 0f03 	cmn.w	r2, #3
 800f860:	d812      	bhi.n	800f888 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f862:	f891 00df 	ldrb.w	r0, [r1, #223]	; 0xdf
 800f866:	f010 0002 	ands.w	r0, r0, #2
 800f86a:	d014      	beq.n	800f896 <ip4_addr_isbroadcast_u32+0x3e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f86c:	684a      	ldr	r2, [r1, #4]
 800f86e:	429a      	cmp	r2, r3
 800f870:	d00c      	beq.n	800f88c <ip4_addr_isbroadcast_u32+0x34>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f872:	69c8      	ldr	r0, [r1, #28]
 800f874:	405a      	eors	r2, r3
 800f876:	4202      	tst	r2, r0
 800f878:	d10a      	bne.n	800f890 <ip4_addr_isbroadcast_u32+0x38>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f87a:	43c2      	mvns	r2, r0
 800f87c:	ea23 0300 	bic.w	r3, r3, r0
 800f880:	429a      	cmp	r2, r3
 800f882:	d007      	beq.n	800f894 <ip4_addr_isbroadcast_u32+0x3c>
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800f884:	2000      	movs	r0, #0
 800f886:	4770      	bx	lr
    return 1;
 800f888:	2001      	movs	r0, #1
 800f88a:	4770      	bx	lr
    return 0;
 800f88c:	2000      	movs	r0, #0
 800f88e:	4770      	bx	lr
    return 0;
 800f890:	2000      	movs	r0, #0
 800f892:	4770      	bx	lr
    return 1;
 800f894:	2001      	movs	r0, #1
  }
}
 800f896:	4770      	bx	lr

0800f898 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f898:	b538      	push	{r3, r4, r5, lr}
 800f89a:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f89c:	4b0c      	ldr	r3, [pc, #48]	; (800f8d0 <ip_reass_dequeue_datagram+0x38>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	4283      	cmp	r3, r0
 800f8a2:	d008      	beq.n	800f8b6 <ip_reass_dequeue_datagram+0x1e>
 800f8a4:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f8a6:	b151      	cbz	r1, 800f8be <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 800f8a8:	6823      	ldr	r3, [r4, #0]
 800f8aa:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f8ac:	4621      	mov	r1, r4
 800f8ae:	2004      	movs	r0, #4
 800f8b0:	f7f7 facc 	bl	8006e4c <memp_free>
}
 800f8b4:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 800f8b6:	6802      	ldr	r2, [r0, #0]
 800f8b8:	4b05      	ldr	r3, [pc, #20]	; (800f8d0 <ip_reass_dequeue_datagram+0x38>)
 800f8ba:	601a      	str	r2, [r3, #0]
 800f8bc:	e7f6      	b.n	800f8ac <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f8be:	4b05      	ldr	r3, [pc, #20]	; (800f8d4 <ip_reass_dequeue_datagram+0x3c>)
 800f8c0:	f240 1245 	movw	r2, #325	; 0x145
 800f8c4:	4904      	ldr	r1, [pc, #16]	; (800f8d8 <ip_reass_dequeue_datagram+0x40>)
 800f8c6:	4805      	ldr	r0, [pc, #20]	; (800f8dc <ip_reass_dequeue_datagram+0x44>)
 800f8c8:	f004 fcb4 	bl	8014234 <iprintf>
 800f8cc:	e7ec      	b.n	800f8a8 <ip_reass_dequeue_datagram+0x10>
 800f8ce:	bf00      	nop
 800f8d0:	20000794 	.word	0x20000794
 800f8d4:	08017904 	.word	0x08017904
 800f8d8:	08017940 	.word	0x08017940
 800f8dc:	08015418 	.word	0x08015418

0800f8e0 <ip_reass_free_complete_datagram>:
{
 800f8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8e4:	4680      	mov	r8, r0
 800f8e6:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f8e8:	4281      	cmp	r1, r0
 800f8ea:	d015      	beq.n	800f918 <ip_reass_free_complete_datagram+0x38>
  if (prev != NULL) {
 800f8ec:	f1b9 0f00 	cmp.w	r9, #0
 800f8f0:	d009      	beq.n	800f906 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f8f2:	f8d9 3000 	ldr.w	r3, [r9]
 800f8f6:	4543      	cmp	r3, r8
 800f8f8:	d005      	beq.n	800f906 <ip_reass_free_complete_datagram+0x26>
 800f8fa:	4b30      	ldr	r3, [pc, #192]	; (800f9bc <ip_reass_free_complete_datagram+0xdc>)
 800f8fc:	22ad      	movs	r2, #173	; 0xad
 800f8fe:	4930      	ldr	r1, [pc, #192]	; (800f9c0 <ip_reass_free_complete_datagram+0xe0>)
 800f900:	4830      	ldr	r0, [pc, #192]	; (800f9c4 <ip_reass_free_complete_datagram+0xe4>)
 800f902:	f004 fc97 	bl	8014234 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f906:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f90a:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 800f90c:	889a      	ldrh	r2, [r3, #4]
 800f90e:	b152      	cbz	r2, 800f926 <ip_reass_free_complete_datagram+0x46>
  u16_t pbufs_freed = 0;
 800f910:	2600      	movs	r6, #0
  p = ipr->p;
 800f912:	f8d8 5004 	ldr.w	r5, [r8, #4]
  while (p != NULL) {
 800f916:	e02e      	b.n	800f976 <ip_reass_free_complete_datagram+0x96>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f918:	4b28      	ldr	r3, [pc, #160]	; (800f9bc <ip_reass_free_complete_datagram+0xdc>)
 800f91a:	22ab      	movs	r2, #171	; 0xab
 800f91c:	492a      	ldr	r1, [pc, #168]	; (800f9c8 <ip_reass_free_complete_datagram+0xe8>)
 800f91e:	4829      	ldr	r0, [pc, #164]	; (800f9c4 <ip_reass_free_complete_datagram+0xe4>)
 800f920:	f004 fc88 	bl	8014234 <iprintf>
 800f924:	e7e2      	b.n	800f8ec <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f92c:	4643      	mov	r3, r8
 800f92e:	686a      	ldr	r2, [r5, #4]
 800f930:	f853 1f08 	ldr.w	r1, [r3, #8]!
 800f934:	685e      	ldr	r6, [r3, #4]
 800f936:	689c      	ldr	r4, [r3, #8]
 800f938:	68d8      	ldr	r0, [r3, #12]
 800f93a:	6011      	str	r1, [r2, #0]
 800f93c:	6056      	str	r6, [r2, #4]
 800f93e:	6094      	str	r4, [r2, #8]
 800f940:	60d0      	str	r0, [r2, #12]
 800f942:	6919      	ldr	r1, [r3, #16]
 800f944:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f946:	2101      	movs	r1, #1
 800f948:	4628      	mov	r0, r5
 800f94a:	f7ff fb59 	bl	800f000 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f94e:	4628      	mov	r0, r5
 800f950:	f7f8 f884 	bl	8007a5c <pbuf_clen>
 800f954:	4606      	mov	r6, r0
    pbuf_free(p);
 800f956:	4628      	mov	r0, r5
 800f958:	f7f7 ff1c 	bl	8007794 <pbuf_free>
 800f95c:	e7d9      	b.n	800f912 <ip_reass_free_complete_datagram+0x32>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f95e:	4b17      	ldr	r3, [pc, #92]	; (800f9bc <ip_reass_free_complete_datagram+0xdc>)
 800f960:	22cc      	movs	r2, #204	; 0xcc
 800f962:	491a      	ldr	r1, [pc, #104]	; (800f9cc <ip_reass_free_complete_datagram+0xec>)
 800f964:	4817      	ldr	r0, [pc, #92]	; (800f9c4 <ip_reass_free_complete_datagram+0xe4>)
 800f966:	f004 fc65 	bl	8014234 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f96a:	4434      	add	r4, r6
 800f96c:	b2a6      	uxth	r6, r4
    pbuf_free(pcur);
 800f96e:	4628      	mov	r0, r5
 800f970:	f7f7 ff10 	bl	8007794 <pbuf_free>
    p = iprh->next_pbuf;
 800f974:	463d      	mov	r5, r7
  while (p != NULL) {
 800f976:	b155      	cbz	r5, 800f98e <ip_reass_free_complete_datagram+0xae>
    iprh = (struct ip_reass_helper *)p->payload;
 800f978:	686b      	ldr	r3, [r5, #4]
    p = iprh->next_pbuf;
 800f97a:	681f      	ldr	r7, [r3, #0]
    clen = pbuf_clen(pcur);
 800f97c:	4628      	mov	r0, r5
 800f97e:	f7f8 f86d 	bl	8007a5c <pbuf_clen>
 800f982:	4604      	mov	r4, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f984:	1833      	adds	r3, r6, r0
 800f986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f98a:	dbee      	blt.n	800f96a <ip_reass_free_complete_datagram+0x8a>
 800f98c:	e7e7      	b.n	800f95e <ip_reass_free_complete_datagram+0x7e>
  ip_reass_dequeue_datagram(ipr, prev);
 800f98e:	4649      	mov	r1, r9
 800f990:	4640      	mov	r0, r8
 800f992:	f7ff ff81 	bl	800f898 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f996:	4b0e      	ldr	r3, [pc, #56]	; (800f9d0 <ip_reass_free_complete_datagram+0xf0>)
 800f998:	881b      	ldrh	r3, [r3, #0]
 800f99a:	42b3      	cmp	r3, r6
 800f99c:	d306      	bcc.n	800f9ac <ip_reass_free_complete_datagram+0xcc>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f99e:	4a0c      	ldr	r2, [pc, #48]	; (800f9d0 <ip_reass_free_complete_datagram+0xf0>)
 800f9a0:	8813      	ldrh	r3, [r2, #0]
 800f9a2:	1b9b      	subs	r3, r3, r6
 800f9a4:	8013      	strh	r3, [r2, #0]
}
 800f9a6:	4630      	mov	r0, r6
 800f9a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f9ac:	4b03      	ldr	r3, [pc, #12]	; (800f9bc <ip_reass_free_complete_datagram+0xdc>)
 800f9ae:	22d2      	movs	r2, #210	; 0xd2
 800f9b0:	4908      	ldr	r1, [pc, #32]	; (800f9d4 <ip_reass_free_complete_datagram+0xf4>)
 800f9b2:	4804      	ldr	r0, [pc, #16]	; (800f9c4 <ip_reass_free_complete_datagram+0xe4>)
 800f9b4:	f004 fc3e 	bl	8014234 <iprintf>
 800f9b8:	e7f1      	b.n	800f99e <ip_reass_free_complete_datagram+0xbe>
 800f9ba:	bf00      	nop
 800f9bc:	08017904 	.word	0x08017904
 800f9c0:	08017968 	.word	0x08017968
 800f9c4:	08015418 	.word	0x08015418
 800f9c8:	0801795c 	.word	0x0801795c
 800f9cc:	0801797c 	.word	0x0801797c
 800f9d0:	20000792 	.word	0x20000792
 800f9d4:	0801799c 	.word	0x0801799c

0800f9d8 <ip_reass_remove_oldest_datagram>:
{
 800f9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9dc:	4606      	mov	r6, r0
 800f9de:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800f9e0:	2700      	movs	r7, #0
 800f9e2:	e02b      	b.n	800fa3c <ip_reass_remove_oldest_datagram+0x64>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f9e4:	699a      	ldr	r2, [r3, #24]
 800f9e6:	f8d6 c010 	ldr.w	ip, [r6, #16]
 800f9ea:	4562      	cmp	r2, ip
 800f9ec:	d111      	bne.n	800fa12 <ip_reass_remove_oldest_datagram+0x3a>
 800f9ee:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 800f9f2:	88b2      	ldrh	r2, [r6, #4]
 800f9f4:	4594      	cmp	ip, r2
 800f9f6:	d10c      	bne.n	800fa12 <ip_reass_remove_oldest_datagram+0x3a>
 800f9f8:	e001      	b.n	800f9fe <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 800f9fa:	4629      	mov	r1, r5
          oldest = r;
 800f9fc:	4618      	mov	r0, r3
      if (r->next != NULL) {
 800f9fe:	681a      	ldr	r2, [r3, #0]
 800fa00:	b192      	cbz	r2, 800fa28 <ip_reass_remove_oldest_datagram+0x50>
 800fa02:	461d      	mov	r5, r3
 800fa04:	4613      	mov	r3, r2
    while (r != NULL) {
 800fa06:	b18b      	cbz	r3, 800fa2c <ip_reass_remove_oldest_datagram+0x54>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800fa08:	695a      	ldr	r2, [r3, #20]
 800fa0a:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800fa0e:	4562      	cmp	r2, ip
 800fa10:	d0e8      	beq.n	800f9e4 <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 800fa12:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800fa14:	2800      	cmp	r0, #0
 800fa16:	d0f0      	beq.n	800f9fa <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 800fa18:	f893 c01f 	ldrb.w	ip, [r3, #31]
 800fa1c:	7fc2      	ldrb	r2, [r0, #31]
 800fa1e:	4594      	cmp	ip, r2
 800fa20:	d8ed      	bhi.n	800f9fe <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 800fa22:	4629      	mov	r1, r5
          oldest = r;
 800fa24:	4618      	mov	r0, r3
 800fa26:	e7ea      	b.n	800f9fe <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 800fa28:	462b      	mov	r3, r5
 800fa2a:	e7ea      	b.n	800fa02 <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 800fa2c:	b110      	cbz	r0, 800fa34 <ip_reass_remove_oldest_datagram+0x5c>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800fa2e:	f7ff ff57 	bl	800f8e0 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800fa32:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800fa34:	4547      	cmp	r7, r8
 800fa36:	da08      	bge.n	800fa4a <ip_reass_remove_oldest_datagram+0x72>
 800fa38:	2c01      	cmp	r4, #1
 800fa3a:	dd06      	ble.n	800fa4a <ip_reass_remove_oldest_datagram+0x72>
    r = reassdatagrams;
 800fa3c:	4b04      	ldr	r3, [pc, #16]	; (800fa50 <ip_reass_remove_oldest_datagram+0x78>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 800fa40:	2400      	movs	r4, #0
    oldest_prev = NULL;
 800fa42:	4621      	mov	r1, r4
    prev = NULL;
 800fa44:	4625      	mov	r5, r4
    oldest = NULL;
 800fa46:	4620      	mov	r0, r4
    while (r != NULL) {
 800fa48:	e7dd      	b.n	800fa06 <ip_reass_remove_oldest_datagram+0x2e>
}
 800fa4a:	4638      	mov	r0, r7
 800fa4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa50:	20000794 	.word	0x20000794

0800fa54 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800fa54:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800fa56:	4604      	mov	r4, r0
 800fa58:	b120      	cbz	r0, 800fa64 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 800fa5a:	4621      	mov	r1, r4
 800fa5c:	2005      	movs	r0, #5
 800fa5e:	f7f7 f9f5 	bl	8006e4c <memp_free>
}
 800fa62:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800fa64:	4b03      	ldr	r3, [pc, #12]	; (800fa74 <ip_frag_free_pbuf_custom_ref+0x20>)
 800fa66:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800fa6a:	4903      	ldr	r1, [pc, #12]	; (800fa78 <ip_frag_free_pbuf_custom_ref+0x24>)
 800fa6c:	4803      	ldr	r0, [pc, #12]	; (800fa7c <ip_frag_free_pbuf_custom_ref+0x28>)
 800fa6e:	f004 fbe1 	bl	8014234 <iprintf>
 800fa72:	e7f2      	b.n	800fa5a <ip_frag_free_pbuf_custom_ref+0x6>
 800fa74:	08017904 	.word	0x08017904
 800fa78:	080172a8 	.word	0x080172a8
 800fa7c:	08015418 	.word	0x08015418

0800fa80 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800fa80:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800fa82:	4604      	mov	r4, r0
 800fa84:	b138      	cbz	r0, 800fa96 <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800fa86:	6960      	ldr	r0, [r4, #20]
 800fa88:	b108      	cbz	r0, 800fa8e <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800fa8a:	f7f7 fe83 	bl	8007794 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800fa8e:	4620      	mov	r0, r4
 800fa90:	f7ff ffe0 	bl	800fa54 <ip_frag_free_pbuf_custom_ref>
}
 800fa94:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800fa96:	4b04      	ldr	r3, [pc, #16]	; (800faa8 <ipfrag_free_pbuf_custom+0x28>)
 800fa98:	f240 22ce 	movw	r2, #718	; 0x2ce
 800fa9c:	4903      	ldr	r1, [pc, #12]	; (800faac <ipfrag_free_pbuf_custom+0x2c>)
 800fa9e:	4804      	ldr	r0, [pc, #16]	; (800fab0 <ipfrag_free_pbuf_custom+0x30>)
 800faa0:	f004 fbc8 	bl	8014234 <iprintf>
 800faa4:	e7ef      	b.n	800fa86 <ipfrag_free_pbuf_custom+0x6>
 800faa6:	bf00      	nop
 800faa8:	08017904 	.word	0x08017904
 800faac:	080179c0 	.word	0x080179c0
 800fab0:	08015418 	.word	0x08015418

0800fab4 <ip_reass_chain_frag_into_datagram_and_validate>:
{
 800fab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fab8:	4681      	mov	r9, r0
 800faba:	460e      	mov	r6, r1
 800fabc:	4692      	mov	sl, r2
  fraghdr = (struct ip_hdr *)new_p->payload;
 800fabe:	684c      	ldr	r4, [r1, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fac0:	8860      	ldrh	r0, [r4, #2]
 800fac2:	f7f6 fb55 	bl	8006170 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800fac6:	7823      	ldrb	r3, [r4, #0]
 800fac8:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800facc:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800fad0:	d203      	bcs.n	800fada <ip_reass_chain_frag_into_datagram_and_validate+0x26>
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fad2:	f04f 30ff 	mov.w	r0, #4294967295
}
 800fad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fada:	009a      	lsls	r2, r3, #2
  len = (u16_t)(len - hlen);
 800fadc:	1a80      	subs	r0, r0, r2
 800fade:	b285      	uxth	r5, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800fae0:	88e0      	ldrh	r0, [r4, #6]
 800fae2:	f7f6 fb45 	bl	8006170 <lwip_htons>
 800fae6:	f3c0 040c 	ubfx	r4, r0, #0, #13
 800faea:	00e4      	lsls	r4, r4, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 800faec:	6877      	ldr	r7, [r6, #4]
  iprh->next_pbuf = NULL;
 800faee:	2300      	movs	r3, #0
 800faf0:	703b      	strb	r3, [r7, #0]
 800faf2:	707b      	strb	r3, [r7, #1]
 800faf4:	70bb      	strb	r3, [r7, #2]
 800faf6:	70fb      	strb	r3, [r7, #3]
  iprh->start = offset;
 800faf8:	80bc      	strh	r4, [r7, #4]
  iprh->end = (u16_t)(offset + len);
 800fafa:	1928      	adds	r0, r5, r4
 800fafc:	fa1f fc80 	uxth.w	ip, r0
 800fb00:	80f8      	strh	r0, [r7, #6]
  if (iprh->end < offset) {
 800fb02:	45a4      	cmp	ip, r4
 800fb04:	f0c0 8092 	bcc.w	800fc2c <ip_reass_chain_frag_into_datagram_and_validate+0x178>
  for (q = ipr->p; q != NULL;) {
 800fb08:	f8d9 1004 	ldr.w	r1, [r9, #4]
  int valid = 1;
 800fb0c:	f04f 0801 	mov.w	r8, #1
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800fb10:	461d      	mov	r5, r3
  for (q = ipr->p; q != NULL;) {
 800fb12:	e022      	b.n	800fb5a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
      iprh->next_pbuf = q;
 800fb14:	6039      	str	r1, [r7, #0]
      if (iprh_prev != NULL) {
 800fb16:	b1c5      	cbz	r5, 800fb4a <ip_reass_chain_frag_into_datagram_and_validate+0x96>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800fb18:	88ea      	ldrh	r2, [r5, #6]
 800fb1a:	42a2      	cmp	r2, r4
 800fb1c:	f200 8089 	bhi.w	800fc32 <ip_reass_chain_frag_into_datagram_and_validate+0x17e>
 800fb20:	889b      	ldrh	r3, [r3, #4]
 800fb22:	459c      	cmp	ip, r3
 800fb24:	f200 8088 	bhi.w	800fc38 <ip_reass_chain_frag_into_datagram_and_validate+0x184>
        iprh_prev->next_pbuf = new_p;
 800fb28:	602e      	str	r6, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 800fb2a:	88bb      	ldrh	r3, [r7, #4]
 800fb2c:	429a      	cmp	r2, r3
 800fb2e:	d001      	beq.n	800fb34 <ip_reass_chain_frag_into_datagram_and_validate+0x80>
          valid = 0;
 800fb30:	f04f 0800 	mov.w	r8, #0
  if (q == NULL) {
 800fb34:	b321      	cbz	r1, 800fb80 <ip_reass_chain_frag_into_datagram_and_validate+0xcc>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800fb36:	f1ba 0f00 	cmp.w	sl, #0
 800fb3a:	d143      	bne.n	800fbc4 <ip_reass_chain_frag_into_datagram_and_validate+0x110>
 800fb3c:	f899 301e 	ldrb.w	r3, [r9, #30]
 800fb40:	f013 0f01 	tst.w	r3, #1
 800fb44:	d13e      	bne.n	800fbc4 <ip_reass_chain_frag_into_datagram_and_validate+0x110>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800fb46:	4650      	mov	r0, sl
 800fb48:	e7c5      	b.n	800fad6 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
        if (iprh->end > iprh_tmp->start) {
 800fb4a:	889b      	ldrh	r3, [r3, #4]
 800fb4c:	459c      	cmp	ip, r3
 800fb4e:	d876      	bhi.n	800fc3e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
        ipr->p = new_p;
 800fb50:	f8c9 6004 	str.w	r6, [r9, #4]
 800fb54:	e7ee      	b.n	800fb34 <ip_reass_chain_frag_into_datagram_and_validate+0x80>
    q = iprh_tmp->next_pbuf;
 800fb56:	6819      	ldr	r1, [r3, #0]
    iprh_prev = iprh_tmp;
 800fb58:	461d      	mov	r5, r3
  for (q = ipr->p; q != NULL;) {
 800fb5a:	2900      	cmp	r1, #0
 800fb5c:	d0ea      	beq.n	800fb34 <ip_reass_chain_frag_into_datagram_and_validate+0x80>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800fb5e:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 800fb60:	889a      	ldrh	r2, [r3, #4]
 800fb62:	42a2      	cmp	r2, r4
 800fb64:	d8d6      	bhi.n	800fb14 <ip_reass_chain_frag_into_datagram_and_validate+0x60>
    } else if (iprh->start == iprh_tmp->start) {
 800fb66:	42a2      	cmp	r2, r4
 800fb68:	d06c      	beq.n	800fc44 <ip_reass_chain_frag_into_datagram_and_validate+0x190>
    } else if (iprh->start < iprh_tmp->end) {
 800fb6a:	88d9      	ldrh	r1, [r3, #6]
 800fb6c:	42a1      	cmp	r1, r4
 800fb6e:	d86c      	bhi.n	800fc4a <ip_reass_chain_frag_into_datagram_and_validate+0x196>
      if (iprh_prev != NULL) {
 800fb70:	2d00      	cmp	r5, #0
 800fb72:	d0f0      	beq.n	800fb56 <ip_reass_chain_frag_into_datagram_and_validate+0xa2>
        if (iprh_prev->end != iprh_tmp->start) {
 800fb74:	88e9      	ldrh	r1, [r5, #6]
 800fb76:	428a      	cmp	r2, r1
 800fb78:	d0ed      	beq.n	800fb56 <ip_reass_chain_frag_into_datagram_and_validate+0xa2>
          valid = 0;
 800fb7a:	f04f 0800 	mov.w	r8, #0
 800fb7e:	e7ea      	b.n	800fb56 <ip_reass_chain_frag_into_datagram_and_validate+0xa2>
    if (iprh_prev != NULL) {
 800fb80:	b19d      	cbz	r5, 800fbaa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800fb82:	88ea      	ldrh	r2, [r5, #6]
 800fb84:	88bb      	ldrh	r3, [r7, #4]
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d807      	bhi.n	800fb9a <ip_reass_chain_frag_into_datagram_and_validate+0xe6>
      iprh_prev->next_pbuf = new_p;
 800fb8a:	602e      	str	r6, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 800fb8c:	88ea      	ldrh	r2, [r5, #6]
 800fb8e:	88bb      	ldrh	r3, [r7, #4]
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d0d0      	beq.n	800fb36 <ip_reass_chain_frag_into_datagram_and_validate+0x82>
        valid = 0;
 800fb94:	f04f 0800 	mov.w	r8, #0
 800fb98:	e7cd      	b.n	800fb36 <ip_reass_chain_frag_into_datagram_and_validate+0x82>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800fb9a:	4b2d      	ldr	r3, [pc, #180]	; (800fc50 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>)
 800fb9c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800fba0:	492c      	ldr	r1, [pc, #176]	; (800fc54 <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>)
 800fba2:	482d      	ldr	r0, [pc, #180]	; (800fc58 <ip_reass_chain_frag_into_datagram_and_validate+0x1a4>)
 800fba4:	f004 fb46 	bl	8014234 <iprintf>
 800fba8:	e7ef      	b.n	800fb8a <ip_reass_chain_frag_into_datagram_and_validate+0xd6>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800fbaa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800fbae:	b133      	cbz	r3, 800fbbe <ip_reass_chain_frag_into_datagram_and_validate+0x10a>
 800fbb0:	4b27      	ldr	r3, [pc, #156]	; (800fc50 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>)
 800fbb2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800fbb6:	4929      	ldr	r1, [pc, #164]	; (800fc5c <ip_reass_chain_frag_into_datagram_and_validate+0x1a8>)
 800fbb8:	4827      	ldr	r0, [pc, #156]	; (800fc58 <ip_reass_chain_frag_into_datagram_and_validate+0x1a4>)
 800fbba:	f004 fb3b 	bl	8014234 <iprintf>
      ipr->p = new_p;
 800fbbe:	f8c9 6004 	str.w	r6, [r9, #4]
 800fbc2:	e7b8      	b.n	800fb36 <ip_reass_chain_frag_into_datagram_and_validate+0x82>
    if (valid) {
 800fbc4:	f1b8 0f00 	cmp.w	r8, #0
 800fbc8:	d02e      	beq.n	800fc28 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800fbca:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800fbce:	b333      	cbz	r3, 800fc1e <ip_reass_chain_frag_into_datagram_and_validate+0x16a>
 800fbd0:	6858      	ldr	r0, [r3, #4]
 800fbd2:	8883      	ldrh	r3, [r0, #4]
 800fbd4:	bb33      	cbnz	r3, 800fc24 <ip_reass_chain_frag_into_datagram_and_validate+0x170>
        q = iprh->next_pbuf;
 800fbd6:	683a      	ldr	r2, [r7, #0]
        while (q != NULL) {
 800fbd8:	b152      	cbz	r2, 800fbf0 <ip_reass_chain_frag_into_datagram_and_validate+0x13c>
          iprh = (struct ip_reass_helper *)q->payload;
 800fbda:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 800fbdc:	88f9      	ldrh	r1, [r7, #6]
 800fbde:	889a      	ldrh	r2, [r3, #4]
 800fbe0:	4291      	cmp	r1, r2
 800fbe2:	d102      	bne.n	800fbea <ip_reass_chain_frag_into_datagram_and_validate+0x136>
          q = iprh->next_pbuf;
 800fbe4:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper *)q->payload;
 800fbe6:	461f      	mov	r7, r3
 800fbe8:	e7f6      	b.n	800fbd8 <ip_reass_chain_frag_into_datagram_and_validate+0x124>
 800fbea:	461f      	mov	r7, r3
            valid = 0;
 800fbec:	f04f 0800 	mov.w	r8, #0
        if (valid) {
 800fbf0:	f1b8 0f00 	cmp.w	r8, #0
 800fbf4:	d018      	beq.n	800fc28 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
          LWIP_ASSERT("sanity check",
 800fbf6:	42b8      	cmp	r0, r7
 800fbf8:	d009      	beq.n	800fc0e <ip_reass_chain_frag_into_datagram_and_validate+0x15a>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	b1a3      	cbz	r3, 800fc28 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
 800fbfe:	4b14      	ldr	r3, [pc, #80]	; (800fc50 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>)
 800fc00:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800fc04:	4916      	ldr	r1, [pc, #88]	; (800fc60 <ip_reass_chain_frag_into_datagram_and_validate+0x1ac>)
 800fc06:	4814      	ldr	r0, [pc, #80]	; (800fc58 <ip_reass_chain_frag_into_datagram_and_validate+0x1a4>)
 800fc08:	f004 fb14 	bl	8014234 <iprintf>
 800fc0c:	e00c      	b.n	800fc28 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
          LWIP_ASSERT("sanity check",
 800fc0e:	4b10      	ldr	r3, [pc, #64]	; (800fc50 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>)
 800fc10:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fc14:	4913      	ldr	r1, [pc, #76]	; (800fc64 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>)
 800fc16:	4810      	ldr	r0, [pc, #64]	; (800fc58 <ip_reass_chain_frag_into_datagram_and_validate+0x1a4>)
 800fc18:	f004 fb0c 	bl	8014234 <iprintf>
 800fc1c:	e7ed      	b.n	800fbfa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
        valid = 0;
 800fc1e:	f04f 0800 	mov.w	r8, #0
 800fc22:	e001      	b.n	800fc28 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
 800fc24:	f04f 0800 	mov.w	r8, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800fc28:	4640      	mov	r0, r8
 800fc2a:	e754      	b.n	800fad6 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc2c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc30:	e751      	b.n	800fad6 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc32:	f04f 30ff 	mov.w	r0, #4294967295
 800fc36:	e74e      	b.n	800fad6 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
 800fc38:	f04f 30ff 	mov.w	r0, #4294967295
 800fc3c:	e74b      	b.n	800fad6 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc3e:	f04f 30ff 	mov.w	r0, #4294967295
 800fc42:	e748      	b.n	800fad6 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc44:	f04f 30ff 	mov.w	r0, #4294967295
 800fc48:	e745      	b.n	800fad6 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc4a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc4e:	e742      	b.n	800fad6 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
 800fc50:	08017904 	.word	0x08017904
 800fc54:	080179cc 	.word	0x080179cc
 800fc58:	08015418 	.word	0x08015418
 800fc5c:	080179ec 	.word	0x080179ec
 800fc60:	08017a34 	.word	0x08017a34
 800fc64:	08017a24 	.word	0x08017a24

0800fc68 <ip_frag_alloc_pbuf_custom_ref>:
{
 800fc68:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800fc6a:	2005      	movs	r0, #5
 800fc6c:	f7f7 f8d4 	bl	8006e18 <memp_malloc>
}
 800fc70:	bd08      	pop	{r3, pc}
	...

0800fc74 <ip_reass_enqueue_new_datagram>:
{
 800fc74:	b570      	push	{r4, r5, r6, lr}
 800fc76:	4605      	mov	r5, r0
 800fc78:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fc7a:	2004      	movs	r0, #4
 800fc7c:	f7f7 f8cc 	bl	8006e18 <memp_malloc>
  if (ipr == NULL) {
 800fc80:	4604      	mov	r4, r0
 800fc82:	b1c8      	cbz	r0, 800fcb8 <ip_reass_enqueue_new_datagram+0x44>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800fc84:	2300      	movs	r3, #0
 800fc86:	6063      	str	r3, [r4, #4]
 800fc88:	60a3      	str	r3, [r4, #8]
 800fc8a:	60e3      	str	r3, [r4, #12]
 800fc8c:	6123      	str	r3, [r4, #16]
 800fc8e:	6163      	str	r3, [r4, #20]
 800fc90:	61a3      	str	r3, [r4, #24]
 800fc92:	61e3      	str	r3, [r4, #28]
  ipr->timer = IP_REASS_MAXAGE;
 800fc94:	230f      	movs	r3, #15
 800fc96:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800fc98:	4b0e      	ldr	r3, [pc, #56]	; (800fcd4 <ip_reass_enqueue_new_datagram+0x60>)
 800fc9a:	681a      	ldr	r2, [r3, #0]
 800fc9c:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 800fc9e:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800fca0:	682b      	ldr	r3, [r5, #0]
 800fca2:	6868      	ldr	r0, [r5, #4]
 800fca4:	68a9      	ldr	r1, [r5, #8]
 800fca6:	68ea      	ldr	r2, [r5, #12]
 800fca8:	60a3      	str	r3, [r4, #8]
 800fcaa:	60e0      	str	r0, [r4, #12]
 800fcac:	6121      	str	r1, [r4, #16]
 800fcae:	6162      	str	r2, [r4, #20]
 800fcb0:	692b      	ldr	r3, [r5, #16]
 800fcb2:	61a3      	str	r3, [r4, #24]
}
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800fcb8:	4631      	mov	r1, r6
 800fcba:	4628      	mov	r0, r5
 800fcbc:	f7ff fe8c 	bl	800f9d8 <ip_reass_remove_oldest_datagram>
 800fcc0:	42b0      	cmp	r0, r6
 800fcc2:	da02      	bge.n	800fcca <ip_reass_enqueue_new_datagram+0x56>
    if (ipr == NULL)
 800fcc4:	2c00      	cmp	r4, #0
 800fcc6:	d1dd      	bne.n	800fc84 <ip_reass_enqueue_new_datagram+0x10>
 800fcc8:	e7f4      	b.n	800fcb4 <ip_reass_enqueue_new_datagram+0x40>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fcca:	2004      	movs	r0, #4
 800fccc:	f7f7 f8a4 	bl	8006e18 <memp_malloc>
 800fcd0:	4604      	mov	r4, r0
 800fcd2:	e7f7      	b.n	800fcc4 <ip_reass_enqueue_new_datagram+0x50>
 800fcd4:	20000794 	.word	0x20000794

0800fcd8 <ip_reass_tmr>:
{
 800fcd8:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800fcda:	4b09      	ldr	r3, [pc, #36]	; (800fd00 <ip_reass_tmr+0x28>)
 800fcdc:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 800fcde:	2400      	movs	r4, #0
  while (r != NULL) {
 800fce0:	e004      	b.n	800fcec <ip_reass_tmr+0x14>
      r = r->next;
 800fce2:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 800fce4:	4621      	mov	r1, r4
 800fce6:	f7ff fdfb 	bl	800f8e0 <ip_reass_free_complete_datagram>
      r = r->next;
 800fcea:	4628      	mov	r0, r5
  while (r != NULL) {
 800fcec:	b138      	cbz	r0, 800fcfe <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 800fcee:	7fc3      	ldrb	r3, [r0, #31]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d0f6      	beq.n	800fce2 <ip_reass_tmr+0xa>
      r->timer--;
 800fcf4:	3b01      	subs	r3, #1
 800fcf6:	77c3      	strb	r3, [r0, #31]
      prev = r;
 800fcf8:	4604      	mov	r4, r0
      r = r->next;
 800fcfa:	6800      	ldr	r0, [r0, #0]
 800fcfc:	e7f6      	b.n	800fcec <ip_reass_tmr+0x14>
}
 800fcfe:	bd38      	pop	{r3, r4, r5, pc}
 800fd00:	20000794 	.word	0x20000794

0800fd04 <ip4_reass>:
{
 800fd04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd08:	4606      	mov	r6, r0
  fraghdr = (struct ip_hdr *)p->payload;
 800fd0a:	6845      	ldr	r5, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800fd0c:	782b      	ldrb	r3, [r5, #0]
 800fd0e:	f003 030f 	and.w	r3, r3, #15
 800fd12:	2b05      	cmp	r3, #5
 800fd14:	f040 80d5 	bne.w	800fec2 <ip4_reass+0x1be>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800fd18:	88e8      	ldrh	r0, [r5, #6]
 800fd1a:	f7f6 fa29 	bl	8006170 <lwip_htons>
 800fd1e:	f3c0 080c 	ubfx	r8, r0, #0, #13
 800fd22:	ea4f 08c8 	mov.w	r8, r8, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fd26:	8868      	ldrh	r0, [r5, #2]
 800fd28:	f7f6 fa22 	bl	8006170 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800fd2c:	782b      	ldrb	r3, [r5, #0]
 800fd2e:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800fd32:	009f      	lsls	r7, r3, #2
 800fd34:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800fd38:	f0c0 80c3 	bcc.w	800fec2 <ip4_reass+0x1be>
  len = (u16_t)(len - hlen);
 800fd3c:	1bc0      	subs	r0, r0, r7
 800fd3e:	b287      	uxth	r7, r0
  clen = pbuf_clen(p);
 800fd40:	4630      	mov	r0, r6
 800fd42:	f7f7 fe8b 	bl	8007a5c <pbuf_clen>
 800fd46:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800fd48:	4b6d      	ldr	r3, [pc, #436]	; (800ff00 <ip4_reass+0x1fc>)
 800fd4a:	881b      	ldrh	r3, [r3, #0]
 800fd4c:	4403      	add	r3, r0
 800fd4e:	2b0a      	cmp	r3, #10
 800fd50:	dc02      	bgt.n	800fd58 <ip4_reass+0x54>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fd52:	4b6c      	ldr	r3, [pc, #432]	; (800ff04 <ip4_reass+0x200>)
 800fd54:	681c      	ldr	r4, [r3, #0]
 800fd56:	e00d      	b.n	800fd74 <ip4_reass+0x70>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fd58:	4601      	mov	r1, r0
 800fd5a:	4628      	mov	r0, r5
 800fd5c:	f7ff fe3c 	bl	800f9d8 <ip_reass_remove_oldest_datagram>
 800fd60:	2800      	cmp	r0, #0
 800fd62:	f000 80ae 	beq.w	800fec2 <ip4_reass+0x1be>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800fd66:	4b66      	ldr	r3, [pc, #408]	; (800ff00 <ip4_reass+0x1fc>)
 800fd68:	881b      	ldrh	r3, [r3, #0]
 800fd6a:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fd6c:	2b0a      	cmp	r3, #10
 800fd6e:	ddf0      	ble.n	800fd52 <ip4_reass+0x4e>
 800fd70:	e0a7      	b.n	800fec2 <ip4_reass+0x1be>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fd72:	6824      	ldr	r4, [r4, #0]
 800fd74:	b15c      	cbz	r4, 800fd8e <ip4_reass+0x8a>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800fd76:	6962      	ldr	r2, [r4, #20]
 800fd78:	68eb      	ldr	r3, [r5, #12]
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d1f9      	bne.n	800fd72 <ip4_reass+0x6e>
 800fd7e:	69a2      	ldr	r2, [r4, #24]
 800fd80:	692b      	ldr	r3, [r5, #16]
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d1f5      	bne.n	800fd72 <ip4_reass+0x6e>
 800fd86:	89a2      	ldrh	r2, [r4, #12]
 800fd88:	88ab      	ldrh	r3, [r5, #4]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d1f1      	bne.n	800fd72 <ip4_reass+0x6e>
  if (ipr == NULL) {
 800fd8e:	b374      	cbz	r4, 800fdee <ip4_reass+0xea>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fd90:	88e8      	ldrh	r0, [r5, #6]
 800fd92:	f7f6 f9ed 	bl	8006170 <lwip_htons>
 800fd96:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800fd9a:	b380      	cbz	r0, 800fdfe <ip4_reass+0xfa>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800fd9c:	88ed      	ldrh	r5, [r5, #6]
 800fd9e:	f005 0520 	and.w	r5, r5, #32
 800fda2:	2d00      	cmp	r5, #0
 800fda4:	bf0c      	ite	eq
 800fda6:	2201      	moveq	r2, #1
 800fda8:	2200      	movne	r2, #0
  if (is_last) {
 800fdaa:	d109      	bne.n	800fdc0 <ip4_reass+0xbc>
    u16_t datagram_len = (u16_t)(offset + len);
 800fdac:	eb08 0307 	add.w	r3, r8, r7
 800fdb0:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800fdb2:	4598      	cmp	r8, r3
 800fdb4:	f200 8082 	bhi.w	800febc <ip4_reass+0x1b8>
 800fdb8:	f64f 71eb 	movw	r1, #65515	; 0xffeb
 800fdbc:	428b      	cmp	r3, r1
 800fdbe:	d87d      	bhi.n	800febc <ip4_reass+0x1b8>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800fdc0:	4631      	mov	r1, r6
 800fdc2:	4620      	mov	r0, r4
 800fdc4:	f7ff fe76 	bl	800fab4 <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800fdc8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fdcc:	d076      	beq.n	800febc <ip4_reass+0x1b8>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800fdce:	4b4c      	ldr	r3, [pc, #304]	; (800ff00 <ip4_reass+0x1fc>)
 800fdd0:	881a      	ldrh	r2, [r3, #0]
 800fdd2:	4491      	add	r9, r2
 800fdd4:	f8a3 9000 	strh.w	r9, [r3]
  if (is_last) {
 800fdd8:	b92d      	cbnz	r5, 800fde6 <ip4_reass+0xe2>
    u16_t datagram_len = (u16_t)(offset + len);
 800fdda:	4447      	add	r7, r8
    ipr->datagram_len = datagram_len;
 800fddc:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800fdde:	7fa3      	ldrb	r3, [r4, #30]
 800fde0:	f043 0301 	orr.w	r3, r3, #1
 800fde4:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800fde6:	2801      	cmp	r0, #1
 800fde8:	d01b      	beq.n	800fe22 <ip4_reass+0x11e>
  return NULL;
 800fdea:	2500      	movs	r5, #0
 800fdec:	e06d      	b.n	800feca <ip4_reass+0x1c6>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800fdee:	4649      	mov	r1, r9
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	f7ff ff3f 	bl	800fc74 <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 800fdf6:	4604      	mov	r4, r0
 800fdf8:	2800      	cmp	r0, #0
 800fdfa:	d1cf      	bne.n	800fd9c <ip4_reass+0x98>
 800fdfc:	e061      	b.n	800fec2 <ip4_reass+0x1be>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800fdfe:	89e0      	ldrh	r0, [r4, #14]
 800fe00:	f7f6 f9b6 	bl	8006170 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fe04:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800fe08:	2800      	cmp	r0, #0
 800fe0a:	d0c7      	beq.n	800fd9c <ip4_reass+0x98>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800fe0c:	682b      	ldr	r3, [r5, #0]
 800fe0e:	6868      	ldr	r0, [r5, #4]
 800fe10:	68a9      	ldr	r1, [r5, #8]
 800fe12:	68ea      	ldr	r2, [r5, #12]
 800fe14:	60a3      	str	r3, [r4, #8]
 800fe16:	60e0      	str	r0, [r4, #12]
 800fe18:	6121      	str	r1, [r4, #16]
 800fe1a:	6162      	str	r2, [r4, #20]
 800fe1c:	692b      	ldr	r3, [r5, #16]
 800fe1e:	61a3      	str	r3, [r4, #24]
 800fe20:	e7bc      	b.n	800fd9c <ip4_reass+0x98>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800fe22:	8ba0      	ldrh	r0, [r4, #28]
 800fe24:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800fe26:	6863      	ldr	r3, [r4, #4]
 800fe28:	685d      	ldr	r5, [r3, #4]
 800fe2a:	682e      	ldr	r6, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800fe2c:	4623      	mov	r3, r4
 800fe2e:	f853 2f08 	ldr.w	r2, [r3, #8]!
 800fe32:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800fe36:	689f      	ldr	r7, [r3, #8]
 800fe38:	68d9      	ldr	r1, [r3, #12]
 800fe3a:	602a      	str	r2, [r5, #0]
 800fe3c:	f8c5 c004 	str.w	ip, [r5, #4]
 800fe40:	60af      	str	r7, [r5, #8]
 800fe42:	60e9      	str	r1, [r5, #12]
 800fe44:	691a      	ldr	r2, [r3, #16]
 800fe46:	612a      	str	r2, [r5, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800fe48:	b280      	uxth	r0, r0
 800fe4a:	f7f6 f991 	bl	8006170 <lwip_htons>
 800fe4e:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800fe50:	2300      	movs	r3, #0
 800fe52:	71ab      	strb	r3, [r5, #6]
 800fe54:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800fe56:	72ab      	strb	r3, [r5, #10]
 800fe58:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 800fe5a:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 800fe5c:	e009      	b.n	800fe72 <ip4_reass+0x16e>
      iprh = (struct ip_reass_helper *)r->payload;
 800fe5e:	6877      	ldr	r7, [r6, #4]
      pbuf_remove_header(r, IP_HLEN);
 800fe60:	2114      	movs	r1, #20
 800fe62:	4630      	mov	r0, r6
 800fe64:	f7f7 fc50 	bl	8007708 <pbuf_remove_header>
      pbuf_cat(p, r);
 800fe68:	4631      	mov	r1, r6
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	f7f7 fe16 	bl	8007a9c <pbuf_cat>
      r = iprh->next_pbuf;
 800fe70:	683e      	ldr	r6, [r7, #0]
    while (r != NULL) {
 800fe72:	2e00      	cmp	r6, #0
 800fe74:	d1f3      	bne.n	800fe5e <ip4_reass+0x15a>
    if (ipr == reassdatagrams) {
 800fe76:	4b23      	ldr	r3, [pc, #140]	; (800ff04 <ip4_reass+0x200>)
 800fe78:	6819      	ldr	r1, [r3, #0]
 800fe7a:	42a1      	cmp	r1, r4
 800fe7c:	d005      	beq.n	800fe8a <ip4_reass+0x186>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fe7e:	b129      	cbz	r1, 800fe8c <ip4_reass+0x188>
        if (ipr_prev->next == ipr) {
 800fe80:	680b      	ldr	r3, [r1, #0]
 800fe82:	42a3      	cmp	r3, r4
 800fe84:	d002      	beq.n	800fe8c <ip4_reass+0x188>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fe86:	4619      	mov	r1, r3
 800fe88:	e7f9      	b.n	800fe7e <ip4_reass+0x17a>
      ipr_prev = NULL;
 800fe8a:	4631      	mov	r1, r6
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800fe8c:	4620      	mov	r0, r4
 800fe8e:	f7ff fd03 	bl	800f898 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 800fe92:	4628      	mov	r0, r5
 800fe94:	f7f7 fde2 	bl	8007a5c <pbuf_clen>
 800fe98:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800fe9a:	4b19      	ldr	r3, [pc, #100]	; (800ff00 <ip4_reass+0x1fc>)
 800fe9c:	881b      	ldrh	r3, [r3, #0]
 800fe9e:	4283      	cmp	r3, r0
 800fea0:	d304      	bcc.n	800feac <ip4_reass+0x1a8>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800fea2:	4a17      	ldr	r2, [pc, #92]	; (800ff00 <ip4_reass+0x1fc>)
 800fea4:	8813      	ldrh	r3, [r2, #0]
 800fea6:	1b1c      	subs	r4, r3, r4
 800fea8:	8014      	strh	r4, [r2, #0]
    return p;
 800feaa:	e00e      	b.n	800feca <ip4_reass+0x1c6>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800feac:	4b16      	ldr	r3, [pc, #88]	; (800ff08 <ip4_reass+0x204>)
 800feae:	f240 229b 	movw	r2, #667	; 0x29b
 800feb2:	4916      	ldr	r1, [pc, #88]	; (800ff0c <ip4_reass+0x208>)
 800feb4:	4816      	ldr	r0, [pc, #88]	; (800ff10 <ip4_reass+0x20c>)
 800feb6:	f004 f9bd 	bl	8014234 <iprintf>
 800feba:	e7f2      	b.n	800fea2 <ip4_reass+0x19e>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800febc:	b144      	cbz	r4, 800fed0 <ip4_reass+0x1cc>
  if (ipr->p == NULL) {
 800febe:	6863      	ldr	r3, [r4, #4]
 800fec0:	b173      	cbz	r3, 800fee0 <ip4_reass+0x1dc>
  pbuf_free(p);
 800fec2:	4630      	mov	r0, r6
 800fec4:	f7f7 fc66 	bl	8007794 <pbuf_free>
  return NULL;
 800fec8:	2500      	movs	r5, #0
}
 800feca:	4628      	mov	r0, r5
 800fecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800fed0:	4b0d      	ldr	r3, [pc, #52]	; (800ff08 <ip4_reass+0x204>)
 800fed2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800fed6:	490f      	ldr	r1, [pc, #60]	; (800ff14 <ip4_reass+0x210>)
 800fed8:	480d      	ldr	r0, [pc, #52]	; (800ff10 <ip4_reass+0x20c>)
 800feda:	f004 f9ab 	bl	8014234 <iprintf>
 800fede:	e7ee      	b.n	800febe <ip4_reass+0x1ba>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800fee0:	4b08      	ldr	r3, [pc, #32]	; (800ff04 <ip4_reass+0x200>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	42a3      	cmp	r3, r4
 800fee6:	d006      	beq.n	800fef6 <ip4_reass+0x1f2>
 800fee8:	4b07      	ldr	r3, [pc, #28]	; (800ff08 <ip4_reass+0x204>)
 800feea:	f240 22ab 	movw	r2, #683	; 0x2ab
 800feee:	490a      	ldr	r1, [pc, #40]	; (800ff18 <ip4_reass+0x214>)
 800fef0:	4807      	ldr	r0, [pc, #28]	; (800ff10 <ip4_reass+0x20c>)
 800fef2:	f004 f99f 	bl	8014234 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800fef6:	2100      	movs	r1, #0
 800fef8:	4620      	mov	r0, r4
 800fefa:	f7ff fccd 	bl	800f898 <ip_reass_dequeue_datagram>
 800fefe:	e7e0      	b.n	800fec2 <ip4_reass+0x1be>
 800ff00:	20000792 	.word	0x20000792
 800ff04:	20000794 	.word	0x20000794
 800ff08:	08017904 	.word	0x08017904
 800ff0c:	08017a58 	.word	0x08017a58
 800ff10:	08015418 	.word	0x08015418
 800ff14:	08017a74 	.word	0x08017a74
 800ff18:	08017a80 	.word	0x08017a80

0800ff1c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ff1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff20:	b08b      	sub	sp, #44	; 0x2c
 800ff22:	4606      	mov	r6, r0
 800ff24:	9106      	str	r1, [sp, #24]
 800ff26:	9208      	str	r2, [sp, #32]
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ff28:	f8b1 30d4 	ldrh.w	r3, [r1, #212]	; 0xd4
 800ff2c:	3b14      	subs	r3, #20
 800ff2e:	d450      	bmi.n	800ffd2 <ip4_frag+0xb6>
 800ff30:	f3c3 03cf 	ubfx	r3, r3, #3, #16
 800ff34:	9304      	str	r3, [sp, #16]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ff36:	f8d6 b004 	ldr.w	fp, [r6, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ff3a:	f89b 3000 	ldrb.w	r3, [fp]
 800ff3e:	f003 030f 	and.w	r3, r3, #15
 800ff42:	2b05      	cmp	r3, #5
 800ff44:	f040 80d5 	bne.w	80100f2 <ip4_frag+0x1d6>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ff48:	8973      	ldrh	r3, [r6, #10]
 800ff4a:	2b13      	cmp	r3, #19
 800ff4c:	d943      	bls.n	800ffd6 <ip4_frag+0xba>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ff4e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800ff52:	f7f6 f90d 	bl	8006170 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800ff56:	f3c0 030c 	ubfx	r3, r0, #0, #13
 800ff5a:	9305      	str	r3, [sp, #20]
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ff5c:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 800ff60:	9309      	str	r3, [sp, #36]	; 0x24

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ff62:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 800ff66:	f1aa 0a14 	sub.w	sl, sl, #20
 800ff6a:	fa1f f38a 	uxth.w	r3, sl
 800ff6e:	9302      	str	r3, [sp, #8]
  u16_t poff = IP_HLEN;
 800ff70:	2714      	movs	r7, #20
  u16_t newpbuflen = 0;
 800ff72:	2400      	movs	r4, #0

  while (left) {
 800ff74:	9b02      	ldr	r3, [sp, #8]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	f000 80b9 	beq.w	80100ee <ip4_frag+0x1d2>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ff7c:	9b04      	ldr	r3, [sp, #16]
 800ff7e:	00db      	lsls	r3, r3, #3
 800ff80:	b29b      	uxth	r3, r3
 800ff82:	9a02      	ldr	r2, [sp, #8]
 800ff84:	4293      	cmp	r3, r2
 800ff86:	bf28      	it	cs
 800ff88:	4613      	movcs	r3, r2
 800ff8a:	9303      	str	r3, [sp, #12]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ff8c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ff90:	2114      	movs	r1, #20
 800ff92:	200e      	movs	r0, #14
 800ff94:	f7f7 fc60 	bl	8007858 <pbuf_alloc>
    if (rambuf == NULL) {
 800ff98:	4682      	mov	sl, r0
 800ff9a:	2800      	cmp	r0, #0
 800ff9c:	f000 80ac 	beq.w	80100f8 <ip4_frag+0x1dc>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ffa0:	8943      	ldrh	r3, [r0, #10]
 800ffa2:	2b13      	cmp	r3, #19
 800ffa4:	d921      	bls.n	800ffea <ip4_frag+0xce>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ffa6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ffaa:	f8db 2000 	ldr.w	r2, [fp]
 800ffae:	f8db 5004 	ldr.w	r5, [fp, #4]
 800ffb2:	f8db 0008 	ldr.w	r0, [fp, #8]
 800ffb6:	f8db 100c 	ldr.w	r1, [fp, #12]
 800ffba:	601a      	str	r2, [r3, #0]
 800ffbc:	605d      	str	r5, [r3, #4]
 800ffbe:	6098      	str	r0, [r3, #8]
 800ffc0:	60d9      	str	r1, [r3, #12]
 800ffc2:	f8db 2010 	ldr.w	r2, [fp, #16]
 800ffc6:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ffc8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ffcc:	9307      	str	r3, [sp, #28]

    left_to_copy = fragsize;
 800ffce:	9d03      	ldr	r5, [sp, #12]
    while (left_to_copy) {
 800ffd0:	e03c      	b.n	801004c <ip4_frag+0x130>
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ffd2:	3307      	adds	r3, #7
 800ffd4:	e7ac      	b.n	800ff30 <ip4_frag+0x14>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ffd6:	4b4a      	ldr	r3, [pc, #296]	; (8010100 <ip4_frag+0x1e4>)
 800ffd8:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ffdc:	4949      	ldr	r1, [pc, #292]	; (8010104 <ip4_frag+0x1e8>)
 800ffde:	484a      	ldr	r0, [pc, #296]	; (8010108 <ip4_frag+0x1ec>)
 800ffe0:	f004 f928 	bl	8014234 <iprintf>
 800ffe4:	f06f 0005 	mvn.w	r0, #5
 800ffe8:	e043      	b.n	8010072 <ip4_frag+0x156>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ffea:	4b45      	ldr	r3, [pc, #276]	; (8010100 <ip4_frag+0x1e4>)
 800ffec:	f44f 7249 	mov.w	r2, #804	; 0x324
 800fff0:	4946      	ldr	r1, [pc, #280]	; (801010c <ip4_frag+0x1f0>)
 800fff2:	4845      	ldr	r0, [pc, #276]	; (8010108 <ip4_frag+0x1ec>)
 800fff4:	f004 f91e 	bl	8014234 <iprintf>
 800fff8:	e7d5      	b.n	800ffa6 <ip4_frag+0x8a>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800fffa:	4b41      	ldr	r3, [pc, #260]	; (8010100 <ip4_frag+0x1e4>)
 800fffc:	f240 322d 	movw	r2, #813	; 0x32d
 8010000:	4943      	ldr	r1, [pc, #268]	; (8010110 <ip4_frag+0x1f4>)
 8010002:	4841      	ldr	r0, [pc, #260]	; (8010108 <ip4_frag+0x1ec>)
 8010004:	f004 f916 	bl	8014234 <iprintf>
 8010008:	e026      	b.n	8010058 <ip4_frag+0x13c>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801000a:	f7ff fe2d 	bl	800fc68 <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 801000e:	4680      	mov	r8, r0
 8010010:	b350      	cbz	r0, 8010068 <ip4_frag+0x14c>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010012:	6873      	ldr	r3, [r6, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010014:	9401      	str	r4, [sp, #4]
 8010016:	443b      	add	r3, r7
 8010018:	9300      	str	r3, [sp, #0]
 801001a:	4603      	mov	r3, r0
 801001c:	2241      	movs	r2, #65	; 0x41
 801001e:	4621      	mov	r1, r4
 8010020:	2000      	movs	r0, #0
 8010022:	f7f7 fb49 	bl	80076b8 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8010026:	4681      	mov	r9, r0
 8010028:	b330      	cbz	r0, 8010078 <ip4_frag+0x15c>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 801002a:	4630      	mov	r0, r6
 801002c:	f7f7 fd1e 	bl	8007a6c <pbuf_ref>
      pcr->original = p;
 8010030:	f8c8 6014 	str.w	r6, [r8, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010034:	4b37      	ldr	r3, [pc, #220]	; (8010114 <ip4_frag+0x1f8>)
 8010036:	f8c8 3010 	str.w	r3, [r8, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801003a:	4649      	mov	r1, r9
 801003c:	4650      	mov	r0, sl
 801003e:	f7f7 fd2d 	bl	8007a9c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010042:	1b2d      	subs	r5, r5, r4
 8010044:	b2ad      	uxth	r5, r5
      if (left_to_copy) {
 8010046:	b10d      	cbz	r5, 801004c <ip4_frag+0x130>
        poff = 0;
        p = p->next;
 8010048:	6836      	ldr	r6, [r6, #0]
        poff = 0;
 801004a:	2700      	movs	r7, #0
    while (left_to_copy) {
 801004c:	b1ed      	cbz	r5, 801008a <ip4_frag+0x16e>
      u16_t plen = (u16_t)(p->len - poff);
 801004e:	8973      	ldrh	r3, [r6, #10]
 8010050:	1bdc      	subs	r4, r3, r7
 8010052:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010054:	42bb      	cmp	r3, r7
 8010056:	d3d0      	bcc.n	800fffa <ip4_frag+0xde>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010058:	42ac      	cmp	r4, r5
 801005a:	bf28      	it	cs
 801005c:	462c      	movcs	r4, r5
      if (!newpbuflen) {
 801005e:	2c00      	cmp	r4, #0
 8010060:	d1d3      	bne.n	801000a <ip4_frag+0xee>
        p = p->next;
 8010062:	6836      	ldr	r6, [r6, #0]
        poff = 0;
 8010064:	4627      	mov	r7, r4
        continue;
 8010066:	e7f1      	b.n	801004c <ip4_frag+0x130>
        pbuf_free(rambuf);
 8010068:	4650      	mov	r0, sl
 801006a:	f7f7 fb93 	bl	8007794 <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801006e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8010072:	b00b      	add	sp, #44	; 0x2c
 8010074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 8010078:	4640      	mov	r0, r8
 801007a:	f7ff fceb 	bl	800fa54 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801007e:	4650      	mov	r0, sl
 8010080:	f7f7 fb88 	bl	8007794 <pbuf_free>
  return ERR_MEM;
 8010084:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 8010088:	e7f3      	b.n	8010072 <ip4_frag+0x156>
    poff = (u16_t)(poff + newpbuflen);
 801008a:	4427      	add	r7, r4
 801008c:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 801008e:	9b06      	ldr	r3, [sp, #24]
 8010090:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 8010094:	3b13      	subs	r3, #19
    tmp = (IP_OFFMASK & (ofo));
 8010096:	9a05      	ldr	r2, [sp, #20]
 8010098:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 801009c:	9a02      	ldr	r2, [sp, #8]
 801009e:	4293      	cmp	r3, r2
 80100a0:	dd01      	ble.n	80100a6 <ip4_frag+0x18a>
 80100a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100a4:	b10b      	cbz	r3, 80100aa <ip4_frag+0x18e>
      tmp = tmp | IP_MF;
 80100a6:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80100aa:	f7f6 f861 	bl	8006170 <lwip_htons>
 80100ae:	9d07      	ldr	r5, [sp, #28]
 80100b0:	80e8      	strh	r0, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80100b2:	9b03      	ldr	r3, [sp, #12]
 80100b4:	f103 0014 	add.w	r0, r3, #20
 80100b8:	b280      	uxth	r0, r0
 80100ba:	f7f6 f859 	bl	8006170 <lwip_htons>
 80100be:	8068      	strh	r0, [r5, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80100c0:	2300      	movs	r3, #0
 80100c2:	72ab      	strb	r3, [r5, #10]
 80100c4:	72eb      	strb	r3, [r5, #11]
    netif->output(netif, rambuf, dest);
 80100c6:	9806      	ldr	r0, [sp, #24]
 80100c8:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 80100cc:	9a08      	ldr	r2, [sp, #32]
 80100ce:	4651      	mov	r1, sl
 80100d0:	4798      	blx	r3
    pbuf_free(rambuf);
 80100d2:	4650      	mov	r0, sl
 80100d4:	f7f7 fb5e 	bl	8007794 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80100d8:	9a02      	ldr	r2, [sp, #8]
 80100da:	9b03      	ldr	r3, [sp, #12]
 80100dc:	1ad3      	subs	r3, r2, r3
 80100de:	b29b      	uxth	r3, r3
 80100e0:	9302      	str	r3, [sp, #8]
    ofo = (u16_t)(ofo + nfb);
 80100e2:	9b05      	ldr	r3, [sp, #20]
 80100e4:	9a04      	ldr	r2, [sp, #16]
 80100e6:	4413      	add	r3, r2
 80100e8:	b29b      	uxth	r3, r3
 80100ea:	9305      	str	r3, [sp, #20]
 80100ec:	e742      	b.n	800ff74 <ip4_frag+0x58>
  return ERR_OK;
 80100ee:	2000      	movs	r0, #0
 80100f0:	e7bf      	b.n	8010072 <ip4_frag+0x156>
    return ERR_VAL;
 80100f2:	f06f 0005 	mvn.w	r0, #5
 80100f6:	e7bc      	b.n	8010072 <ip4_frag+0x156>
  return ERR_MEM;
 80100f8:	f04f 30ff 	mov.w	r0, #4294967295
 80100fc:	e7b9      	b.n	8010072 <ip4_frag+0x156>
 80100fe:	bf00      	nop
 8010100:	08017904 	.word	0x08017904
 8010104:	08017aa0 	.word	0x08017aa0
 8010108:	08015418 	.word	0x08015418
 801010c:	08017abc 	.word	0x08017abc
 8010110:	08017adc 	.word	0x08017adc
 8010114:	0800fa81 	.word	0x0800fa81

08010118 <ethip6_output>:
 * @return
 * - ERR_OK or the return value of @ref nd6_get_next_hop_addr_or_queue.
 */
err_t
ethip6_output(struct netif *netif, struct pbuf *q, const ip6_addr_t *ip6addr)
{
 8010118:	b530      	push	{r4, r5, lr}
 801011a:	b087      	sub	sp, #28
 801011c:	4604      	mov	r4, r0
 801011e:	460d      	mov	r5, r1

  /* The destination IP address must be properly zoned from here on down. */
  IP6_ADDR_ZONECHECK_NETIF(ip6addr, netif);

  /* multicast destination IP address? */
  if (ip6_addr_ismulticast(ip6addr)) {
 8010120:	7813      	ldrb	r3, [r2, #0]
 8010122:	2bff      	cmp	r3, #255	; 0xff
 8010124:	d016      	beq.n	8010154 <ethip6_output+0x3c>

  /* We have a unicast destination IP address */
  /* @todo anycast? */

  /* Ask ND6 what to do with the packet. */
  result = nd6_get_next_hop_addr_or_queue(netif, q, ip6addr, &hwaddr);
 8010126:	ab03      	add	r3, sp, #12
 8010128:	f003 fdf4 	bl	8013d14 <nd6_get_next_hop_addr_or_queue>
  if (result != ERR_OK) {
 801012c:	b980      	cbnz	r0, 8010150 <ethip6_output+0x38>
    return result;
  }

  /* If no hardware address is returned, nd6 has queued the packet for later. */
  if (hwaddr == NULL) {
 801012e:	9b03      	ldr	r3, [sp, #12]
 8010130:	b173      	cbz	r3, 8010150 <ethip6_output+0x38>
    return ERR_OK;
  }

  /* Send out the packet using the returned hardware address. */
  SMEMCPY(dest.addr, hwaddr, 6);
 8010132:	6818      	ldr	r0, [r3, #0]
 8010134:	9004      	str	r0, [sp, #16]
 8010136:	889b      	ldrh	r3, [r3, #4]
 8010138:	f8ad 3014 	strh.w	r3, [sp, #20]
  return ethernet_output(netif, q, (const struct eth_addr*)(netif->hwaddr), &dest, ETHTYPE_IPV6);
 801013c:	f248 63dd 	movw	r3, #34525	; 0x86dd
 8010140:	9300      	str	r3, [sp, #0]
 8010142:	ab04      	add	r3, sp, #16
 8010144:	f104 02d8 	add.w	r2, r4, #216	; 0xd8
 8010148:	4629      	mov	r1, r5
 801014a:	4620      	mov	r0, r4
 801014c:	f003 ffd8 	bl	8014100 <ethernet_output>
}
 8010150:	b007      	add	sp, #28
 8010152:	bd30      	pop	{r4, r5, pc}
    dest.addr[0] = 0x33;
 8010154:	2333      	movs	r3, #51	; 0x33
 8010156:	f88d 3010 	strb.w	r3, [sp, #16]
    dest.addr[1] = 0x33;
 801015a:	f88d 3011 	strb.w	r3, [sp, #17]
    dest.addr[2] = ((const u8_t *)(&(ip6addr->addr[3])))[0];
 801015e:	7b13      	ldrb	r3, [r2, #12]
 8010160:	f88d 3012 	strb.w	r3, [sp, #18]
    dest.addr[3] = ((const u8_t *)(&(ip6addr->addr[3])))[1];
 8010164:	7b53      	ldrb	r3, [r2, #13]
 8010166:	f88d 3013 	strb.w	r3, [sp, #19]
    dest.addr[4] = ((const u8_t *)(&(ip6addr->addr[3])))[2];
 801016a:	7b93      	ldrb	r3, [r2, #14]
 801016c:	f88d 3014 	strb.w	r3, [sp, #20]
    dest.addr[5] = ((const u8_t *)(&(ip6addr->addr[3])))[3];
 8010170:	7bd3      	ldrb	r3, [r2, #15]
 8010172:	f88d 3015 	strb.w	r3, [sp, #21]
    return ethernet_output(netif, q, (const struct eth_addr*)(netif->hwaddr), &dest, ETHTYPE_IPV6);
 8010176:	f248 63dd 	movw	r3, #34525	; 0x86dd
 801017a:	9300      	str	r3, [sp, #0]
 801017c:	ab04      	add	r3, sp, #16
 801017e:	f100 02d8 	add.w	r2, r0, #216	; 0xd8
 8010182:	f003 ffbd 	bl	8014100 <ethernet_output>
 8010186:	e7e3      	b.n	8010150 <ethip6_output+0x38>

08010188 <icmp6_send_response_with_addrs_and_netif>:
 * @param netif netif to send the packet
 */
static void
icmp6_send_response_with_addrs_and_netif(struct pbuf *p, u8_t code, u32_t data, u8_t type,
    const ip6_addr_t *reply_src, const ip6_addr_t *reply_dest, struct netif *netif)
{
 8010188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801018c:	b085      	sub	sp, #20
 801018e:	4606      	mov	r6, r0
 8010190:	4688      	mov	r8, r1
 8010192:	4691      	mov	r9, r2
 8010194:	461f      	mov	r7, r3
  struct pbuf *q;
  struct icmp6_hdr *icmp6hdr;

  /* ICMPv6 header + IPv6 header + data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp6_hdr) + IP6_HLEN + LWIP_ICMP6_DATASIZE,
 8010196:	f44f 7220 	mov.w	r2, #640	; 0x280
 801019a:	2138      	movs	r1, #56	; 0x38
 801019c:	2036      	movs	r0, #54	; 0x36
 801019e:	f7f7 fb5b 	bl	8007858 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 80101a2:	b378      	cbz	r0, 8010204 <icmp6_send_response_with_addrs_and_netif+0x7c>
 80101a4:	4604      	mov	r4, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMPv6 packet.\n"));
    ICMP6_STATS_INC(icmp6.memerr);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp 6message",
 80101a6:	8943      	ldrh	r3, [r0, #10]
 80101a8:	2b37      	cmp	r3, #55	; 0x37
 80101aa:	d92e      	bls.n	801020a <icmp6_send_response_with_addrs_and_netif+0x82>
             (q->len >= (sizeof(struct icmp6_hdr) + IP6_HLEN + LWIP_ICMP6_DATASIZE)));

  icmp6hdr = (struct icmp6_hdr *)q->payload;
 80101ac:	6865      	ldr	r5, [r4, #4]
  icmp6hdr->type = type;
 80101ae:	702f      	strb	r7, [r5, #0]
  icmp6hdr->code = code;
 80101b0:	f885 8001 	strb.w	r8, [r5, #1]
  icmp6hdr->data = lwip_htonl(data);
 80101b4:	4648      	mov	r0, r9
 80101b6:	f7f5 ffe0 	bl	800617a <lwip_htonl>
 80101ba:	6068      	str	r0, [r5, #4]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp6_hdr), (u8_t *)p->payload,
 80101bc:	6863      	ldr	r3, [r4, #4]
 80101be:	6871      	ldr	r1, [r6, #4]
 80101c0:	460a      	mov	r2, r1
 80101c2:	3308      	adds	r3, #8
 80101c4:	3130      	adds	r1, #48	; 0x30
 80101c6:	f8d2 c000 	ldr.w	ip, [r2]
 80101ca:	6857      	ldr	r7, [r2, #4]
 80101cc:	6896      	ldr	r6, [r2, #8]
 80101ce:	68d0      	ldr	r0, [r2, #12]
 80101d0:	f8c3 c000 	str.w	ip, [r3]
 80101d4:	605f      	str	r7, [r3, #4]
 80101d6:	609e      	str	r6, [r3, #8]
 80101d8:	60d8      	str	r0, [r3, #12]
 80101da:	3210      	adds	r2, #16
 80101dc:	3310      	adds	r3, #16
 80101de:	428a      	cmp	r2, r1
 80101e0:	d1f1      	bne.n	80101c6 <icmp6_send_response_with_addrs_and_netif+0x3e>
          IP6_HLEN + LWIP_ICMP6_DATASIZE);

  /* calculate checksum */
  icmp6hdr->chksum = 0;
 80101e2:	2300      	movs	r3, #0
 80101e4:	70ab      	strb	r3, [r5, #2]
 80101e6:	70eb      	strb	r3, [r5, #3]
      reply_src, reply_dest);
  }
#endif /* CHECKSUM_GEN_ICMP6 */

  ICMP6_STATS_INC(icmp6.xmit);
  ip6_output_if(q, reply_src, reply_dest, LWIP_ICMP6_HL, 0, IP6_NEXTH_ICMP6, netif);
 80101e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80101ea:	9202      	str	r2, [sp, #8]
 80101ec:	223a      	movs	r2, #58	; 0x3a
 80101ee:	9201      	str	r2, [sp, #4]
 80101f0:	9300      	str	r3, [sp, #0]
 80101f2:	23ff      	movs	r3, #255	; 0xff
 80101f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80101f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80101f8:	4620      	mov	r0, r4
 80101fa:	f000 fed5 	bl	8010fa8 <ip6_output_if>
  pbuf_free(q);
 80101fe:	4620      	mov	r0, r4
 8010200:	f7f7 fac8 	bl	8007794 <pbuf_free>
}
 8010204:	b005      	add	sp, #20
 8010206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp 6message",
 801020a:	4b04      	ldr	r3, [pc, #16]	; (801021c <icmp6_send_response_with_addrs_and_netif+0x94>)
 801020c:	f240 128f 	movw	r2, #399	; 0x18f
 8010210:	4903      	ldr	r1, [pc, #12]	; (8010220 <icmp6_send_response_with_addrs_and_netif+0x98>)
 8010212:	4804      	ldr	r0, [pc, #16]	; (8010224 <icmp6_send_response_with_addrs_and_netif+0x9c>)
 8010214:	f004 f80e 	bl	8014234 <iprintf>
 8010218:	e7c8      	b.n	80101ac <icmp6_send_response_with_addrs_and_netif+0x24>
 801021a:	bf00      	nop
 801021c:	08017aec 	.word	0x08017aec
 8010220:	08017b24 	.word	0x08017b24
 8010224:	08015418 	.word	0x08015418

08010228 <icmp6_send_response>:
{
 8010228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801022c:	b084      	sub	sp, #16
 801022e:	4604      	mov	r4, r0
 8010230:	460d      	mov	r5, r1
 8010232:	4690      	mov	r8, r2
 8010234:	461f      	mov	r7, r3
  struct netif *netif = ip_current_netif();
 8010236:	490e      	ldr	r1, [pc, #56]	; (8010270 <icmp6_send_response+0x48>)
 8010238:	680e      	ldr	r6, [r1, #0]
  LWIP_ASSERT("icmpv6 packet not a direct response", netif != NULL);
 801023a:	b18e      	cbz	r6, 8010260 <icmp6_send_response+0x38>
  reply_src = ip_2_ip6(ip6_select_source_address(netif, reply_dest));
 801023c:	490d      	ldr	r1, [pc, #52]	; (8010274 <icmp6_send_response+0x4c>)
 801023e:	4630      	mov	r0, r6
 8010240:	f000 fa7a 	bl	8010738 <ip6_select_source_address>
  if (reply_src == NULL) {
 8010244:	b148      	cbz	r0, 801025a <icmp6_send_response+0x32>
  icmp6_send_response_with_addrs_and_netif(p, code, data, type, reply_src, reply_dest, netif);
 8010246:	9602      	str	r6, [sp, #8]
 8010248:	4a0a      	ldr	r2, [pc, #40]	; (8010274 <icmp6_send_response+0x4c>)
 801024a:	9201      	str	r2, [sp, #4]
 801024c:	9000      	str	r0, [sp, #0]
 801024e:	463b      	mov	r3, r7
 8010250:	4642      	mov	r2, r8
 8010252:	4629      	mov	r1, r5
 8010254:	4620      	mov	r0, r4
 8010256:	f7ff ff97 	bl	8010188 <icmp6_send_response_with_addrs_and_netif>
}
 801025a:	b004      	add	sp, #16
 801025c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("icmpv6 packet not a direct response", netif != NULL);
 8010260:	4b05      	ldr	r3, [pc, #20]	; (8010278 <icmp6_send_response+0x50>)
 8010262:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8010266:	4905      	ldr	r1, [pc, #20]	; (801027c <icmp6_send_response+0x54>)
 8010268:	4805      	ldr	r0, [pc, #20]	; (8010280 <icmp6_send_response+0x58>)
 801026a:	f003 ffe3 	bl	8014234 <iprintf>
 801026e:	e7e5      	b.n	801023c <icmp6_send_response+0x14>
 8010270:	200039e8 	.word	0x200039e8
 8010274:	200039fc 	.word	0x200039fc
 8010278:	08017aec 	.word	0x08017aec
 801027c:	08017b54 	.word	0x08017b54
 8010280:	08015418 	.word	0x08015418

08010284 <icmp6_send_response_with_addrs>:
{
 8010284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010288:	b085      	sub	sp, #20
 801028a:	4604      	mov	r4, r0
 801028c:	460d      	mov	r5, r1
 801028e:	4691      	mov	r9, r2
 8010290:	461e      	mov	r6, r3
 8010292:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8010296:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  LWIP_ASSERT("must provide both source and destination", src_addr != NULL);
 8010298:	f1b8 0f00 	cmp.w	r8, #0
 801029c:	d012      	beq.n	80102c4 <icmp6_send_response_with_addrs+0x40>
  LWIP_ASSERT("must provide both source and destination", dest_addr != NULL);
 801029e:	b1cf      	cbz	r7, 80102d4 <icmp6_send_response_with_addrs+0x50>
  netif = ip6_route(reply_src, reply_dest);
 80102a0:	4641      	mov	r1, r8
 80102a2:	4638      	mov	r0, r7
 80102a4:	f000 f8f8 	bl	8010498 <ip6_route>
  if (netif == NULL) {
 80102a8:	b148      	cbz	r0, 80102be <icmp6_send_response_with_addrs+0x3a>
  icmp6_send_response_with_addrs_and_netif(p, code, data, type, reply_src,
 80102aa:	9002      	str	r0, [sp, #8]
 80102ac:	f8cd 8004 	str.w	r8, [sp, #4]
 80102b0:	9700      	str	r7, [sp, #0]
 80102b2:	4633      	mov	r3, r6
 80102b4:	464a      	mov	r2, r9
 80102b6:	4629      	mov	r1, r5
 80102b8:	4620      	mov	r0, r4
 80102ba:	f7ff ff65 	bl	8010188 <icmp6_send_response_with_addrs_and_netif>
}
 80102be:	b005      	add	sp, #20
 80102c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("must provide both source and destination", src_addr != NULL);
 80102c4:	4b07      	ldr	r3, [pc, #28]	; (80102e4 <icmp6_send_response_with_addrs+0x60>)
 80102c6:	f240 1261 	movw	r2, #353	; 0x161
 80102ca:	4907      	ldr	r1, [pc, #28]	; (80102e8 <icmp6_send_response_with_addrs+0x64>)
 80102cc:	4807      	ldr	r0, [pc, #28]	; (80102ec <icmp6_send_response_with_addrs+0x68>)
 80102ce:	f003 ffb1 	bl	8014234 <iprintf>
 80102d2:	e7e4      	b.n	801029e <icmp6_send_response_with_addrs+0x1a>
  LWIP_ASSERT("must provide both source and destination", dest_addr != NULL);
 80102d4:	4b03      	ldr	r3, [pc, #12]	; (80102e4 <icmp6_send_response_with_addrs+0x60>)
 80102d6:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80102da:	4903      	ldr	r1, [pc, #12]	; (80102e8 <icmp6_send_response_with_addrs+0x64>)
 80102dc:	4803      	ldr	r0, [pc, #12]	; (80102ec <icmp6_send_response_with_addrs+0x68>)
 80102de:	f003 ffa9 	bl	8014234 <iprintf>
 80102e2:	e7dd      	b.n	80102a0 <icmp6_send_response_with_addrs+0x1c>
 80102e4:	08017aec 	.word	0x08017aec
 80102e8:	08017b78 	.word	0x08017b78
 80102ec:	08015418 	.word	0x08015418

080102f0 <icmp6_input>:
{
 80102f0:	b570      	push	{r4, r5, r6, lr}
 80102f2:	b084      	sub	sp, #16
 80102f4:	4604      	mov	r4, r0
  if (p->len < sizeof(struct icmp6_hdr)) {
 80102f6:	8943      	ldrh	r3, [r0, #10]
 80102f8:	2b07      	cmp	r3, #7
 80102fa:	d935      	bls.n	8010368 <icmp6_input+0x78>
 80102fc:	460d      	mov	r5, r1
  icmp6hdr = (struct icmp6_hdr *)p->payload;
 80102fe:	6843      	ldr	r3, [r0, #4]
  switch (icmp6hdr->type) {
 8010300:	781b      	ldrb	r3, [r3, #0]
 8010302:	2b84      	cmp	r3, #132	; 0x84
 8010304:	d833      	bhi.n	801036e <icmp6_input+0x7e>
 8010306:	2b82      	cmp	r3, #130	; 0x82
 8010308:	d23a      	bcs.n	8010380 <icmp6_input+0x90>
 801030a:	2b02      	cmp	r3, #2
 801030c:	d033      	beq.n	8010376 <icmp6_input+0x86>
 801030e:	2b80      	cmp	r3, #128	; 0x80
 8010310:	d125      	bne.n	801035e <icmp6_input+0x6e>
    if (ip6_addr_ismulticast(ip6_current_dest_addr())) {
 8010312:	4b24      	ldr	r3, [pc, #144]	; (80103a4 <icmp6_input+0xb4>)
 8010314:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010318:	2bff      	cmp	r3, #255	; 0xff
 801031a:	d034      	beq.n	8010386 <icmp6_input+0x96>
    r = pbuf_alloc(PBUF_IP, p->tot_len, PBUF_RAM);
 801031c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010320:	8901      	ldrh	r1, [r0, #8]
 8010322:	2036      	movs	r0, #54	; 0x36
 8010324:	f7f7 fa98 	bl	8007858 <pbuf_alloc>
    if (r == NULL) {
 8010328:	4606      	mov	r6, r0
 801032a:	b378      	cbz	r0, 801038c <icmp6_input+0x9c>
    if (pbuf_copy(r, p) != ERR_OK) {
 801032c:	4621      	mov	r1, r4
 801032e:	f7f7 fbf7 	bl	8007b20 <pbuf_copy>
 8010332:	bb78      	cbnz	r0, 8010394 <icmp6_input+0xa4>
    ((struct icmp6_echo_hdr *)(r->payload))->type = ICMP6_TYPE_EREP;
 8010334:	6873      	ldr	r3, [r6, #4]
 8010336:	2281      	movs	r2, #129	; 0x81
 8010338:	701a      	strb	r2, [r3, #0]
    ((struct icmp6_echo_hdr *)(r->payload))->chksum = 0;
 801033a:	6872      	ldr	r2, [r6, #4]
 801033c:	2300      	movs	r3, #0
 801033e:	7093      	strb	r3, [r2, #2]
 8010340:	70d3      	strb	r3, [r2, #3]
    ip6_output_if(r, reply_src, ip6_current_src_addr(),
 8010342:	4a19      	ldr	r2, [pc, #100]	; (80103a8 <icmp6_input+0xb8>)
 8010344:	9502      	str	r5, [sp, #8]
 8010346:	213a      	movs	r1, #58	; 0x3a
 8010348:	9101      	str	r1, [sp, #4]
 801034a:	9300      	str	r3, [sp, #0]
 801034c:	23ff      	movs	r3, #255	; 0xff
 801034e:	f102 0118 	add.w	r1, r2, #24
 8010352:	4630      	mov	r0, r6
 8010354:	f000 fe28 	bl	8010fa8 <ip6_output_if>
    pbuf_free(r);
 8010358:	4630      	mov	r0, r6
 801035a:	f7f7 fa1b 	bl	8007794 <pbuf_free>
  pbuf_free(p);
 801035e:	4620      	mov	r0, r4
 8010360:	f7f7 fa18 	bl	8007794 <pbuf_free>
}
 8010364:	b004      	add	sp, #16
 8010366:	bd70      	pop	{r4, r5, r6, pc}
    pbuf_free(p);
 8010368:	f7f7 fa14 	bl	8007794 <pbuf_free>
    return;
 801036c:	e7fa      	b.n	8010364 <icmp6_input+0x74>
  switch (icmp6hdr->type) {
 801036e:	337a      	adds	r3, #122	; 0x7a
 8010370:	b2db      	uxtb	r3, r3
 8010372:	2b03      	cmp	r3, #3
 8010374:	d8f3      	bhi.n	801035e <icmp6_input+0x6e>
    nd6_input(p, inp);
 8010376:	4629      	mov	r1, r5
 8010378:	4620      	mov	r0, r4
 801037a:	f002 fdaf 	bl	8012edc <nd6_input>
    return;
 801037e:	e7f1      	b.n	8010364 <icmp6_input+0x74>
    mld6_input(p, inp);
 8010380:	f001 fb50 	bl	8011a24 <mld6_input>
    return;
 8010384:	e7ee      	b.n	8010364 <icmp6_input+0x74>
      pbuf_free(p);
 8010386:	f7f7 fa05 	bl	8007794 <pbuf_free>
      return;
 801038a:	e7eb      	b.n	8010364 <icmp6_input+0x74>
      pbuf_free(p);
 801038c:	4620      	mov	r0, r4
 801038e:	f7f7 fa01 	bl	8007794 <pbuf_free>
      return;
 8010392:	e7e7      	b.n	8010364 <icmp6_input+0x74>
      pbuf_free(p);
 8010394:	4620      	mov	r0, r4
 8010396:	f7f7 f9fd 	bl	8007794 <pbuf_free>
      pbuf_free(r);
 801039a:	4630      	mov	r0, r6
 801039c:	f7f7 f9fa 	bl	8007794 <pbuf_free>
      return;
 80103a0:	e7e0      	b.n	8010364 <icmp6_input+0x74>
 80103a2:	bf00      	nop
 80103a4:	200039e8 	.word	0x200039e8
 80103a8:	200039fc 	.word	0x200039fc

080103ac <icmp6_dest_unreach>:
{
 80103ac:	b508      	push	{r3, lr}
  icmp6_send_response(p, c, 0, ICMP6_TYPE_DUR);
 80103ae:	2301      	movs	r3, #1
 80103b0:	2200      	movs	r2, #0
 80103b2:	f7ff ff39 	bl	8010228 <icmp6_send_response>
}
 80103b6:	bd08      	pop	{r3, pc}

080103b8 <icmp6_time_exceeded_with_addrs>:
{
 80103b8:	b500      	push	{lr}
 80103ba:	b083      	sub	sp, #12
  icmp6_send_response_with_addrs(p, c, 0, ICMP6_TYPE_TE, src_addr, dest_addr);
 80103bc:	9301      	str	r3, [sp, #4]
 80103be:	9200      	str	r2, [sp, #0]
 80103c0:	2303      	movs	r3, #3
 80103c2:	2200      	movs	r2, #0
 80103c4:	f7ff ff5e 	bl	8010284 <icmp6_send_response_with_addrs>
}
 80103c8:	b003      	add	sp, #12
 80103ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080103d0 <icmp6_param_problem>:
{
 80103d0:	b510      	push	{r4, lr}
  u32_t pointer_u32 = (u32_t)((const u8_t *)pointer - (const u8_t *)ip6_current_header());
 80103d2:	4b03      	ldr	r3, [pc, #12]	; (80103e0 <icmp6_param_problem+0x10>)
 80103d4:	68dc      	ldr	r4, [r3, #12]
  icmp6_send_response(p, c, pointer_u32, ICMP6_TYPE_PP);
 80103d6:	2304      	movs	r3, #4
 80103d8:	1b12      	subs	r2, r2, r4
 80103da:	f7ff ff25 	bl	8010228 <icmp6_send_response>
}
 80103de:	bd10      	pop	{r4, pc}
 80103e0:	200039e8 	.word	0x200039e8

080103e4 <ip6_input_accept>:
/** Return true if the current input packet should be accepted on this netif */
static int
ip6_input_accept(struct netif *netif)
{
  /* interface is up? */
  if (netif_is_up(netif)) {
 80103e4:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 80103e8:	f013 0f01 	tst.w	r3, #1
 80103ec:	d129      	bne.n	8010442 <ip6_input_accept+0x5e>
        /* accept on this netif */
        return 1;
      }
    }
  }
  return 0;
 80103ee:	2000      	movs	r0, #0
 80103f0:	4770      	bx	lr
          ip6_addr_cmp(ip6_current_dest_addr(), netif_ip6_addr(netif, i))
 80103f2:	4a28      	ldr	r2, [pc, #160]	; (8010494 <ip6_input_accept+0xb0>)
 80103f4:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80103f6:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80103fa:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80103fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8010400:	4294      	cmp	r4, r2
 8010402:	d139      	bne.n	8010478 <ip6_input_accept+0x94>
 8010404:	4a23      	ldr	r2, [pc, #140]	; (8010494 <ip6_input_accept+0xb0>)
 8010406:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8010408:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 801040c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8010410:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8010412:	4294      	cmp	r4, r2
 8010414:	d130      	bne.n	8010478 <ip6_input_accept+0x94>
 8010416:	4a1f      	ldr	r2, [pc, #124]	; (8010494 <ip6_input_accept+0xb0>)
 8010418:	6b94      	ldr	r4, [r2, #56]	; 0x38
 801041a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 801041e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8010422:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8010424:	4294      	cmp	r4, r2
 8010426:	d127      	bne.n	8010478 <ip6_input_accept+0x94>
 8010428:	4a1a      	ldr	r2, [pc, #104]	; (8010494 <ip6_input_accept+0xb0>)
 801042a:	f892 403c 	ldrb.w	r4, [r2, #60]	; 0x3c
 801042e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010432:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8010436:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
 801043a:	4294      	cmp	r4, r2
 801043c:	d11c      	bne.n	8010478 <ip6_input_accept+0x94>
        return 1;
 801043e:	2001      	movs	r0, #1
 8010440:	e002      	b.n	8010448 <ip6_input_accept+0x64>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8010442:	2300      	movs	r3, #0
 8010444:	e005      	b.n	8010452 <ip6_input_accept+0x6e>
  return 0;
 8010446:	2000      	movs	r0, #0
}
 8010448:	f85d 4b04 	ldr.w	r4, [sp], #4
 801044c:	4770      	bx	lr
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 801044e:	3301      	adds	r3, #1
 8010450:	b2db      	uxtb	r3, r3
 8010452:	2b02      	cmp	r3, #2
 8010454:	d81c      	bhi.n	8010490 <ip6_input_accept+0xac>
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8010456:	4619      	mov	r1, r3
 8010458:	18c2      	adds	r2, r0, r3
 801045a:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
 801045e:	f012 0f10 	tst.w	r2, #16
 8010462:	d0f4      	beq.n	801044e <ip6_input_accept+0x6a>
{
 8010464:	b410      	push	{r4}
          ip6_addr_cmp(ip6_current_dest_addr(), netif_ip6_addr(netif, i))
 8010466:	4a0b      	ldr	r2, [pc, #44]	; (8010494 <ip6_input_accept+0xb0>)
 8010468:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 801046a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801046e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8010472:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8010474:	4294      	cmp	r4, r2
 8010476:	d0bc      	beq.n	80103f2 <ip6_input_accept+0xe>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8010478:	3301      	adds	r3, #1
 801047a:	b2db      	uxtb	r3, r3
 801047c:	2b02      	cmp	r3, #2
 801047e:	d8e2      	bhi.n	8010446 <ip6_input_accept+0x62>
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8010480:	4619      	mov	r1, r3
 8010482:	18c2      	adds	r2, r0, r3
 8010484:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
 8010488:	f012 0f10 	tst.w	r2, #16
 801048c:	d0f4      	beq.n	8010478 <ip6_input_accept+0x94>
 801048e:	e7ea      	b.n	8010466 <ip6_input_accept+0x82>
  return 0;
 8010490:	2000      	movs	r0, #0
}
 8010492:	4770      	bx	lr
 8010494:	200039e8 	.word	0x200039e8

08010498 <ip6_route>:
{
 8010498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801049a:	4604      	mov	r4, r0
  if ((netif_list != NULL) && (netif_list->next == NULL)) {
 801049c:	4ba4      	ldr	r3, [pc, #656]	; (8010730 <ip6_route+0x298>)
 801049e:	6818      	ldr	r0, [r3, #0]
 80104a0:	b108      	cbz	r0, 80104a6 <ip6_route+0xe>
 80104a2:	6803      	ldr	r3, [r0, #0]
 80104a4:	b383      	cbz	r3, 8010508 <ip6_route+0x70>
  if (ip6_addr_has_zone(dest)) {
 80104a6:	7c0a      	ldrb	r2, [r1, #16]
 80104a8:	2a00      	cmp	r2, #0
 80104aa:	d142      	bne.n	8010532 <ip6_route+0x9a>
  if (ip6_addr_has_scope(dest, IP6_UNKNOWN) ||
 80104ac:	680f      	ldr	r7, [r1, #0]
 80104ae:	f24c 05ff 	movw	r5, #49407	; 0xc0ff
 80104b2:	403d      	ands	r5, r7
 80104b4:	f248 03fe 	movw	r3, #33022	; 0x80fe
 80104b8:	429d      	cmp	r5, r3
 80104ba:	d022      	beq.n	8010502 <ip6_route+0x6a>
 80104bc:	f648 73ff 	movw	r3, #36863	; 0x8fff
 80104c0:	403b      	ands	r3, r7
 80104c2:	f240 15ff 	movw	r5, #511	; 0x1ff
 80104c6:	42ab      	cmp	r3, r5
 80104c8:	d01b      	beq.n	8010502 <ip6_route+0x6a>
 80104ca:	f240 25ff 	movw	r5, #767	; 0x2ff
 80104ce:	42ab      	cmp	r3, r5
 80104d0:	d017      	beq.n	8010502 <ip6_route+0x6a>
      ip6_addr_has_scope(src, IP6_UNICAST) ||
 80104d2:	6823      	ldr	r3, [r4, #0]
 80104d4:	f24c 06ff 	movw	r6, #49407	; 0xc0ff
 80104d8:	401e      	ands	r6, r3
  if (ip6_addr_has_scope(dest, IP6_UNKNOWN) ||
 80104da:	f248 05fe 	movw	r5, #33022	; 0x80fe
 80104de:	42ae      	cmp	r6, r5
 80104e0:	d00f      	beq.n	8010502 <ip6_route+0x6a>
      ip6_addr_has_scope(src, IP6_UNICAST) ||
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	f040 80bc 	bne.w	8010660 <ip6_route+0x1c8>
      ip6_addr_isloopback(src)) {
 80104e8:	6863      	ldr	r3, [r4, #4]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	f040 80b8 	bne.w	8010660 <ip6_route+0x1c8>
 80104f0:	68a3      	ldr	r3, [r4, #8]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	f040 80b4 	bne.w	8010660 <ip6_route+0x1c8>
 80104f8:	68e3      	ldr	r3, [r4, #12]
 80104fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80104fe:	f040 80af 	bne.w	8010660 <ip6_route+0x1c8>
    if (ip6_addr_has_zone(src)) {
 8010502:	7c22      	ldrb	r2, [r4, #16]
 8010504:	bb42      	cbnz	r2, 8010558 <ip6_route+0xc0>
 8010506:	e065      	b.n	80105d4 <ip6_route+0x13c>
    if (!netif_is_up(netif_list) || !netif_is_link_up(netif_list) ||
 8010508:	f890 20df 	ldrb.w	r2, [r0, #223]	; 0xdf
 801050c:	f002 0205 	and.w	r2, r2, #5
 8010510:	2a05      	cmp	r2, #5
 8010512:	f040 810a 	bne.w	801072a <ip6_route+0x292>
        (ip6_addr_has_zone(dest) && !ip6_addr_test_zone(dest, netif_list))) {
 8010516:	7c09      	ldrb	r1, [r1, #16]
    if (!netif_is_up(netif_list) || !netif_is_link_up(netif_list) ||
 8010518:	2900      	cmp	r1, #0
 801051a:	f000 8107 	beq.w	801072c <ip6_route+0x294>
        (ip6_addr_has_zone(dest) && !ip6_addr_test_zone(dest, netif_list))) {
 801051e:	f890 20e2 	ldrb.w	r2, [r0, #226]	; 0xe2
 8010522:	3201      	adds	r2, #1
 8010524:	b2d2      	uxtb	r2, r2
 8010526:	4291      	cmp	r1, r2
 8010528:	f000 8100 	beq.w	801072c <ip6_route+0x294>
      return NULL;
 801052c:	4618      	mov	r0, r3
 801052e:	e0fd      	b.n	801072c <ip6_route+0x294>
    NETIF_FOREACH(netif) {
 8010530:	6800      	ldr	r0, [r0, #0]
 8010532:	2800      	cmp	r0, #0
 8010534:	f000 80fa 	beq.w	801072c <ip6_route+0x294>
      if (ip6_addr_test_zone(dest, netif) &&
 8010538:	f890 30e2 	ldrb.w	r3, [r0, #226]	; 0xe2
 801053c:	3301      	adds	r3, #1
 801053e:	b2db      	uxtb	r3, r3
 8010540:	429a      	cmp	r2, r3
 8010542:	d1f5      	bne.n	8010530 <ip6_route+0x98>
          netif_is_up(netif) && netif_is_link_up(netif)) {
 8010544:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
      if (ip6_addr_test_zone(dest, netif) &&
 8010548:	f013 0f01 	tst.w	r3, #1
 801054c:	d0f0      	beq.n	8010530 <ip6_route+0x98>
          netif_is_up(netif) && netif_is_link_up(netif)) {
 801054e:	f013 0f04 	tst.w	r3, #4
 8010552:	d0ed      	beq.n	8010530 <ip6_route+0x98>
 8010554:	e0ea      	b.n	801072c <ip6_route+0x294>
      NETIF_FOREACH(netif) {
 8010556:	6800      	ldr	r0, [r0, #0]
 8010558:	2800      	cmp	r0, #0
 801055a:	f000 80e7 	beq.w	801072c <ip6_route+0x294>
        if (netif_is_up(netif) && netif_is_link_up(netif) &&
 801055e:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 8010562:	f013 0f01 	tst.w	r3, #1
 8010566:	d0f6      	beq.n	8010556 <ip6_route+0xbe>
 8010568:	f013 0f04 	tst.w	r3, #4
 801056c:	d0f3      	beq.n	8010556 <ip6_route+0xbe>
            ip6_addr_test_zone(src, netif)) {
 801056e:	f890 30e2 	ldrb.w	r3, [r0, #226]	; 0xe2
 8010572:	3301      	adds	r3, #1
 8010574:	b2db      	uxtb	r3, r3
        if (netif_is_up(netif) && netif_is_link_up(netif) &&
 8010576:	429a      	cmp	r2, r3
 8010578:	d1ed      	bne.n	8010556 <ip6_route+0xbe>
 801057a:	e0d7      	b.n	801072c <ip6_route+0x294>
        for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 801057c:	3301      	adds	r3, #1
 801057e:	b25b      	sxtb	r3, r3
 8010580:	2b02      	cmp	r3, #2
 8010582:	dc26      	bgt.n	80105d2 <ip6_route+0x13a>
          if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8010584:	18c2      	adds	r2, r0, r3
 8010586:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
 801058a:	f012 0f10 	tst.w	r2, #16
 801058e:	d0f5      	beq.n	801057c <ip6_route+0xe4>
              ip6_addr_cmp_zoneless(src, netif_ip6_addr(netif, i))) {
 8010590:	6825      	ldr	r5, [r4, #0]
 8010592:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8010596:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 801059a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
          if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 801059c:	4295      	cmp	r5, r2
 801059e:	d1ed      	bne.n	801057c <ip6_route+0xe4>
              ip6_addr_cmp_zoneless(src, netif_ip6_addr(netif, i))) {
 80105a0:	6865      	ldr	r5, [r4, #4]
 80105a2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80105a6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80105aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80105ac:	4295      	cmp	r5, r2
 80105ae:	d1e5      	bne.n	801057c <ip6_route+0xe4>
 80105b0:	68a5      	ldr	r5, [r4, #8]
 80105b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80105b6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80105ba:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80105bc:	4295      	cmp	r5, r2
 80105be:	d1dd      	bne.n	801057c <ip6_route+0xe4>
 80105c0:	68e5      	ldr	r5, [r4, #12]
 80105c2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80105c6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80105ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80105cc:	4295      	cmp	r5, r2
 80105ce:	d1d5      	bne.n	801057c <ip6_route+0xe4>
 80105d0:	e0ac      	b.n	801072c <ip6_route+0x294>
      NETIF_FOREACH(netif) {
 80105d2:	6800      	ldr	r0, [r0, #0]
 80105d4:	2800      	cmp	r0, #0
 80105d6:	f000 80a9 	beq.w	801072c <ip6_route+0x294>
        if (!netif_is_up(netif) || !netif_is_link_up(netif)) {
 80105da:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 80105de:	f003 0305 	and.w	r3, r3, #5
 80105e2:	2b05      	cmp	r3, #5
 80105e4:	d1f5      	bne.n	80105d2 <ip6_route+0x13a>
        for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80105e6:	2300      	movs	r3, #0
 80105e8:	e7ca      	b.n	8010580 <ip6_route+0xe8>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80105ea:	3301      	adds	r3, #1
 80105ec:	b25b      	sxtb	r3, r3
 80105ee:	2b02      	cmp	r3, #2
 80105f0:	dc35      	bgt.n	801065e <ip6_route+0x1c6>
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 80105f2:	18c5      	adds	r5, r0, r3
 80105f4:	f895 5094 	ldrb.w	r5, [r5, #148]	; 0x94
 80105f8:	f015 0f10 	tst.w	r5, #16
 80105fc:	d0f5      	beq.n	80105ea <ip6_route+0x152>
          ip6_addr_netcmp(dest, netif_ip6_addr(netif, i)) &&
 80105fe:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8010602:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8010606:	6ced      	ldr	r5, [r5, #76]	; 0x4c
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8010608:	42af      	cmp	r7, r5
 801060a:	d1ee      	bne.n	80105ea <ip6_route+0x152>
          ip6_addr_netcmp(dest, netif_ip6_addr(netif, i)) &&
 801060c:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8010610:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8010614:	f8dc c050 	ldr.w	ip, [ip, #80]	; 0x50
 8010618:	684d      	ldr	r5, [r1, #4]
 801061a:	4565      	cmp	r5, ip
 801061c:	d1e5      	bne.n	80105ea <ip6_route+0x152>
 801061e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8010622:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8010626:	f895 505c 	ldrb.w	r5, [r5, #92]	; 0x5c
 801062a:	42aa      	cmp	r2, r5
 801062c:	d1dd      	bne.n	80105ea <ip6_route+0x152>
          (netif_ip6_addr_isstatic(netif, i) ||
 801062e:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010632:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 8010636:	2d00      	cmp	r5, #0
 8010638:	d078      	beq.n	801072c <ip6_route+0x294>
          ip6_addr_nethostcmp(dest, netif_ip6_addr(netif, i)))) {
 801063a:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 801063e:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8010642:	f8dc c054 	ldr.w	ip, [ip, #84]	; 0x54
          (netif_ip6_addr_isstatic(netif, i) ||
 8010646:	688d      	ldr	r5, [r1, #8]
 8010648:	4565      	cmp	r5, ip
 801064a:	d1ce      	bne.n	80105ea <ip6_route+0x152>
          ip6_addr_nethostcmp(dest, netif_ip6_addr(netif, i)))) {
 801064c:	68cd      	ldr	r5, [r1, #12]
 801064e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8010652:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8010656:	6db6      	ldr	r6, [r6, #88]	; 0x58
 8010658:	42b5      	cmp	r5, r6
 801065a:	d1c6      	bne.n	80105ea <ip6_route+0x152>
 801065c:	e066      	b.n	801072c <ip6_route+0x294>
  NETIF_FOREACH(netif) {
 801065e:	6800      	ldr	r0, [r0, #0]
 8010660:	b138      	cbz	r0, 8010672 <ip6_route+0x1da>
    if (!netif_is_up(netif) || !netif_is_link_up(netif)) {
 8010662:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 8010666:	f003 0305 	and.w	r3, r3, #5
 801066a:	2b05      	cmp	r3, #5
 801066c:	d1f7      	bne.n	801065e <ip6_route+0x1c6>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 801066e:	2300      	movs	r3, #0
 8010670:	e7bd      	b.n	80105ee <ip6_route+0x156>
  netif = nd6_find_route(dest);
 8010672:	4608      	mov	r0, r1
 8010674:	f003 faf4 	bl	8013c60 <nd6_find_route>
  if (netif != NULL) {
 8010678:	2800      	cmp	r0, #0
 801067a:	d157      	bne.n	801072c <ip6_route+0x294>
  if (!ip6_addr_isany(src)) {
 801067c:	2c00      	cmp	r4, #0
 801067e:	d049      	beq.n	8010714 <ip6_route+0x27c>
 8010680:	6826      	ldr	r6, [r4, #0]
 8010682:	b936      	cbnz	r6, 8010692 <ip6_route+0x1fa>
 8010684:	6863      	ldr	r3, [r4, #4]
 8010686:	b923      	cbnz	r3, 8010692 <ip6_route+0x1fa>
 8010688:	68a3      	ldr	r3, [r4, #8]
 801068a:	b913      	cbnz	r3, 8010692 <ip6_route+0x1fa>
 801068c:	68e3      	ldr	r3, [r4, #12]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d040      	beq.n	8010714 <ip6_route+0x27c>
    NETIF_FOREACH(netif) {
 8010692:	4b27      	ldr	r3, [pc, #156]	; (8010730 <ip6_route+0x298>)
 8010694:	681a      	ldr	r2, [r3, #0]
 8010696:	e034      	b.n	8010702 <ip6_route+0x26a>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8010698:	3301      	adds	r3, #1
 801069a:	b25b      	sxtb	r3, r3
 801069c:	2b02      	cmp	r3, #2
 801069e:	dc2f      	bgt.n	8010700 <ip6_route+0x268>
        if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 80106a0:	18d1      	adds	r1, r2, r3
 80106a2:	f891 1094 	ldrb.w	r1, [r1, #148]	; 0x94
 80106a6:	f011 0f10 	tst.w	r1, #16
 80106aa:	d0f5      	beq.n	8010698 <ip6_route+0x200>
            ip6_addr_cmp(src, netif_ip6_addr(netif, i))) {
 80106ac:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80106b0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80106b4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
        if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 80106b6:	428e      	cmp	r6, r1
 80106b8:	d1ee      	bne.n	8010698 <ip6_route+0x200>
            ip6_addr_cmp(src, netif_ip6_addr(netif, i))) {
 80106ba:	6867      	ldr	r7, [r4, #4]
 80106bc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80106c0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80106c4:	6d09      	ldr	r1, [r1, #80]	; 0x50
 80106c6:	428f      	cmp	r7, r1
 80106c8:	d1e6      	bne.n	8010698 <ip6_route+0x200>
 80106ca:	68a7      	ldr	r7, [r4, #8]
 80106cc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80106d0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80106d4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80106d6:	428f      	cmp	r7, r1
 80106d8:	d1de      	bne.n	8010698 <ip6_route+0x200>
 80106da:	68e7      	ldr	r7, [r4, #12]
 80106dc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80106e0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80106e4:	6d89      	ldr	r1, [r1, #88]	; 0x58
 80106e6:	428f      	cmp	r7, r1
 80106e8:	d1d6      	bne.n	8010698 <ip6_route+0x200>
 80106ea:	7c27      	ldrb	r7, [r4, #16]
 80106ec:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 80106f0:	eb02 01c5 	add.w	r1, r2, r5, lsl #3
 80106f4:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
 80106f8:	428f      	cmp	r7, r1
 80106fa:	d1cd      	bne.n	8010698 <ip6_route+0x200>
          return netif;
 80106fc:	4610      	mov	r0, r2
 80106fe:	e015      	b.n	801072c <ip6_route+0x294>
    NETIF_FOREACH(netif) {
 8010700:	6812      	ldr	r2, [r2, #0]
 8010702:	b13a      	cbz	r2, 8010714 <ip6_route+0x27c>
      if (!netif_is_up(netif) || !netif_is_link_up(netif)) {
 8010704:	f892 30df 	ldrb.w	r3, [r2, #223]	; 0xdf
 8010708:	f003 0305 	and.w	r3, r3, #5
 801070c:	2b05      	cmp	r3, #5
 801070e:	d1f7      	bne.n	8010700 <ip6_route+0x268>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8010710:	2300      	movs	r3, #0
 8010712:	e7c3      	b.n	801069c <ip6_route+0x204>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default)) {
 8010714:	4b07      	ldr	r3, [pc, #28]	; (8010734 <ip6_route+0x29c>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	b143      	cbz	r3, 801072c <ip6_route+0x294>
 801071a:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
 801071e:	f002 0205 	and.w	r2, r2, #5
 8010722:	2a05      	cmp	r2, #5
 8010724:	d102      	bne.n	801072c <ip6_route+0x294>
  return netif_default;
 8010726:	4618      	mov	r0, r3
 8010728:	e000      	b.n	801072c <ip6_route+0x294>
      return NULL;
 801072a:	4618      	mov	r0, r3
}
 801072c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801072e:	bf00      	nop
 8010730:	20007b10 	.word	0x20007b10
 8010734:	20007b14 	.word	0x20007b14

08010738 <ip6_select_source_address>:
{
 8010738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801073c:	4604      	mov	r4, r0
 801073e:	460e      	mov	r6, r1
  if (ip6_addr_isglobal(dest)) {
 8010740:	6808      	ldr	r0, [r1, #0]
 8010742:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 8010746:	2b20      	cmp	r3, #32
 8010748:	d025      	beq.n	8010796 <ip6_select_source_address+0x5e>
  } else if (ip6_addr_islinklocal(dest) || ip6_addr_isloopback(dest)) {
 801074a:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 801074e:	4003      	ands	r3, r0
 8010750:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8010754:	4293      	cmp	r3, r2
 8010756:	d027      	beq.n	80107a8 <ip6_select_source_address+0x70>
 8010758:	b938      	cbnz	r0, 801076a <ip6_select_source_address+0x32>
 801075a:	684a      	ldr	r2, [r1, #4]
 801075c:	b92a      	cbnz	r2, 801076a <ip6_select_source_address+0x32>
 801075e:	688a      	ldr	r2, [r1, #8]
 8010760:	b91a      	cbnz	r2, 801076a <ip6_select_source_address+0x32>
 8010762:	68ca      	ldr	r2, [r1, #12]
 8010764:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8010768:	d021      	beq.n	80107ae <ip6_select_source_address+0x76>
  } else if (ip6_addr_isuniquelocal(dest)) {
 801076a:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 801076e:	2afc      	cmp	r2, #252	; 0xfc
 8010770:	d020      	beq.n	80107b4 <ip6_select_source_address+0x7c>
  } else if (ip6_addr_ismulticast(dest)) {
 8010772:	b2c2      	uxtb	r2, r0
 8010774:	2aff      	cmp	r2, #255	; 0xff
 8010776:	d006      	beq.n	8010786 <ip6_select_source_address+0x4e>
  } else if (ip6_addr_issitelocal(dest)) {
 8010778:	f24c 02fe 	movw	r2, #49406	; 0xc0fe
 801077c:	4293      	cmp	r3, r2
 801077e:	d007      	beq.n	8010790 <ip6_select_source_address+0x58>
    dest_scope = IP6_MULTICAST_SCOPE_GLOBAL;
 8010780:	f04f 080e 	mov.w	r8, #14
 8010784:	e009      	b.n	801079a <ip6_select_source_address+0x62>
    dest_scope = ip6_addr_multicast_scope(dest);
 8010786:	f7f5 fcf8 	bl	800617a <lwip_htonl>
 801078a:	f3c0 4803 	ubfx	r8, r0, #16, #4
 801078e:	e004      	b.n	801079a <ip6_select_source_address+0x62>
    dest_scope = IP6_MULTICAST_SCOPE_SITE_LOCAL;
 8010790:	f04f 0805 	mov.w	r8, #5
 8010794:	e001      	b.n	801079a <ip6_select_source_address+0x62>
    dest_scope = IP6_MULTICAST_SCOPE_GLOBAL;
 8010796:	f04f 080e 	mov.w	r8, #14
  u8_t best_bits = 0;
 801079a:	f04f 0c00 	mov.w	ip, #0
  u8_t best_pref = 0;
 801079e:	46e1      	mov	r9, ip
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80107a0:	4663      	mov	r3, ip
  s8_t best_scope = IP6_MULTICAST_SCOPE_RESERVED;
 80107a2:	46e6      	mov	lr, ip
  best_addr = NULL;
 80107a4:	4660      	mov	r0, ip
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80107a6:	e03b      	b.n	8010820 <ip6_select_source_address+0xe8>
    dest_scope = IP6_MULTICAST_SCOPE_LINK_LOCAL;
 80107a8:	f04f 0802 	mov.w	r8, #2
 80107ac:	e7f5      	b.n	801079a <ip6_select_source_address+0x62>
 80107ae:	f04f 0802 	mov.w	r8, #2
 80107b2:	e7f2      	b.n	801079a <ip6_select_source_address+0x62>
    dest_scope = IP6_MULTICAST_SCOPE_ORGANIZATION_LOCAL;
 80107b4:	f04f 0808 	mov.w	r8, #8
 80107b8:	e7ef      	b.n	801079a <ip6_select_source_address+0x62>
      cand_scope = IP6_MULTICAST_SCOPE_SITE_LOCAL;
 80107ba:	2105      	movs	r1, #5
 80107bc:	e000      	b.n	80107c0 <ip6_select_source_address+0x88>
      cand_scope = IP6_MULTICAST_SCOPE_GLOBAL;
 80107be:	210e      	movs	r1, #14
    cand_pref = ip6_addr_ispreferred(netif_ip6_addr_state(netif, i));
 80107c0:	2a30      	cmp	r2, #48	; 0x30
 80107c2:	bf14      	ite	ne
 80107c4:	f04f 0b00 	movne.w	fp, #0
 80107c8:	f04f 0b01 	moveq.w	fp, #1
    cand_bits = ip6_addr_netcmp_zoneless(cand_addr, dest); /* just 1 or 0 for now */
 80107cc:	6837      	ldr	r7, [r6, #0]
 80107ce:	45ba      	cmp	sl, r7
 80107d0:	d04f      	beq.n	8010872 <ip6_select_source_address+0x13a>
 80107d2:	2700      	movs	r7, #0
    if (cand_bits && ip6_addr_nethostcmp(cand_addr, dest)) {
 80107d4:	f007 0aff 	and.w	sl, r7, #255	; 0xff
 80107d8:	b13f      	cbz	r7, 80107ea <ip6_select_source_address+0xb2>
 80107da:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80107de:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 80107e2:	6d7f      	ldr	r7, [r7, #84]	; 0x54
 80107e4:	68b2      	ldr	r2, [r6, #8]
 80107e6:	4297      	cmp	r7, r2
 80107e8:	d04f      	beq.n	801088a <ip6_select_source_address+0x152>
    if ((best_addr == NULL) || /* no alternative yet */
 80107ea:	b170      	cbz	r0, 801080a <ip6_select_source_address+0xd2>
 80107ec:	4571      	cmp	r1, lr
 80107ee:	da01      	bge.n	80107f4 <ip6_select_source_address+0xbc>
        ((cand_scope < best_scope) && (cand_scope >= dest_scope)) ||
 80107f0:	4588      	cmp	r8, r1
 80107f2:	dd0a      	ble.n	801080a <ip6_select_source_address+0xd2>
 80107f4:	4571      	cmp	r1, lr
 80107f6:	dd01      	ble.n	80107fc <ip6_select_source_address+0xc4>
        ((cand_scope > best_scope) && (best_scope < dest_scope)) || /* Rule 2 */
 80107f8:	45f0      	cmp	r8, lr
 80107fa:	dc06      	bgt.n	801080a <ip6_select_source_address+0xd2>
 80107fc:	4571      	cmp	r1, lr
 80107fe:	d10d      	bne.n	801081c <ip6_select_source_address+0xe4>
        ((cand_scope == best_scope) && ((cand_pref > best_pref) || /* Rule 3 */
 8010800:	45d9      	cmp	r9, fp
 8010802:	d302      	bcc.n	801080a <ip6_select_source_address+0xd2>
 8010804:	d10a      	bne.n	801081c <ip6_select_source_address+0xe4>
        ((cand_pref == best_pref) && (cand_bits > best_bits))))) { /* Rule 8 */
 8010806:	45d4      	cmp	ip, sl
 8010808:	d208      	bcs.n	801081c <ip6_select_source_address+0xe4>
      best_addr = netif_ip_addr6(netif, i);
 801080a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 801080e:	00c0      	lsls	r0, r0, #3
 8010810:	3048      	adds	r0, #72	; 0x48
 8010812:	4420      	add	r0, r4
 8010814:	3004      	adds	r0, #4
      best_bits = cand_bits;
 8010816:	46d4      	mov	ip, sl
      best_pref = cand_pref;
 8010818:	46d9      	mov	r9, fp
      best_scope = cand_scope;
 801081a:	468e      	mov	lr, r1
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 801081c:	3301      	adds	r3, #1
 801081e:	b2db      	uxtb	r3, r3
 8010820:	2b02      	cmp	r3, #2
 8010822:	d840      	bhi.n	80108a6 <ip6_select_source_address+0x16e>
    if (!ip6_addr_isvalid(netif_ip6_addr_state(netif, i))) {
 8010824:	461d      	mov	r5, r3
 8010826:	18e2      	adds	r2, r4, r3
 8010828:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
 801082c:	f012 0f10 	tst.w	r2, #16
 8010830:	d0f4      	beq.n	801081c <ip6_select_source_address+0xe4>
    if (ip6_addr_isglobal(cand_addr)) {
 8010832:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8010836:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 801083a:	f8d1 a04c 	ldr.w	sl, [r1, #76]	; 0x4c
 801083e:	f00a 01e0 	and.w	r1, sl, #224	; 0xe0
 8010842:	2920      	cmp	r1, #32
 8010844:	d0bb      	beq.n	80107be <ip6_select_source_address+0x86>
    } else if (ip6_addr_islinklocal(cand_addr)) {
 8010846:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 801084a:	ea0a 0101 	and.w	r1, sl, r1
 801084e:	f248 07fe 	movw	r7, #33022	; 0x80fe
 8010852:	42b9      	cmp	r1, r7
 8010854:	d009      	beq.n	801086a <ip6_select_source_address+0x132>
    } else if (ip6_addr_isuniquelocal(cand_addr)) {
 8010856:	f00a 07fe 	and.w	r7, sl, #254	; 0xfe
 801085a:	2ffc      	cmp	r7, #252	; 0xfc
 801085c:	d007      	beq.n	801086e <ip6_select_source_address+0x136>
    } else if (ip6_addr_issitelocal(cand_addr)) {
 801085e:	f24c 07fe 	movw	r7, #49406	; 0xc0fe
 8010862:	42b9      	cmp	r1, r7
 8010864:	d0a9      	beq.n	80107ba <ip6_select_source_address+0x82>
      cand_scope = IP6_MULTICAST_SCOPE_RESERVEDF;
 8010866:	210f      	movs	r1, #15
 8010868:	e7aa      	b.n	80107c0 <ip6_select_source_address+0x88>
      cand_scope = IP6_MULTICAST_SCOPE_LINK_LOCAL;
 801086a:	2102      	movs	r1, #2
 801086c:	e7a8      	b.n	80107c0 <ip6_select_source_address+0x88>
      cand_scope = IP6_MULTICAST_SCOPE_ORGANIZATION_LOCAL;
 801086e:	2108      	movs	r1, #8
 8010870:	e7a6      	b.n	80107c0 <ip6_select_source_address+0x88>
    cand_bits = ip6_addr_netcmp_zoneless(cand_addr, dest); /* just 1 or 0 for now */
 8010872:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8010876:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 801087a:	6d3f      	ldr	r7, [r7, #80]	; 0x50
 801087c:	6872      	ldr	r2, [r6, #4]
 801087e:	4297      	cmp	r7, r2
 8010880:	d001      	beq.n	8010886 <ip6_select_source_address+0x14e>
 8010882:	2700      	movs	r7, #0
 8010884:	e7a6      	b.n	80107d4 <ip6_select_source_address+0x9c>
 8010886:	2701      	movs	r7, #1
 8010888:	e7a4      	b.n	80107d4 <ip6_select_source_address+0x9c>
    if (cand_bits && ip6_addr_nethostcmp(cand_addr, dest)) {
 801088a:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801088e:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8010892:	6dbf      	ldr	r7, [r7, #88]	; 0x58
 8010894:	68f2      	ldr	r2, [r6, #12]
 8010896:	4297      	cmp	r7, r2
 8010898:	d1a7      	bne.n	80107ea <ip6_select_source_address+0xb2>
      return netif_ip_addr6(netif, i); /* Rule 1 */
 801089a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801089e:	00db      	lsls	r3, r3, #3
 80108a0:	3348      	adds	r3, #72	; 0x48
 80108a2:	4423      	add	r3, r4
 80108a4:	1d18      	adds	r0, r3, #4
}
 80108a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080108ac <ip6_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip6_input(struct pbuf *p, struct netif *inp)
{
 80108ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108b0:	b087      	sub	sp, #28
 80108b2:	4604      	mov	r4, r0
 80108b4:	460e      	mov	r6, r1
  LWIP_ASSERT_CORE_LOCKED();

  IP6_STATS_INC(ip6.recv);

  /* identify the IP header */
  ip6hdr = (struct ip6_hdr *)p->payload;
 80108b6:	6845      	ldr	r5, [r0, #4]
  if (IP6H_V(ip6hdr) != 6) {
 80108b8:	6828      	ldr	r0, [r5, #0]
 80108ba:	f7f5 fc5e 	bl	800617a <lwip_htonl>
 80108be:	0f00      	lsrs	r0, r0, #28
 80108c0:	2806      	cmp	r0, #6
 80108c2:	d113      	bne.n	80108ec <ip6_input+0x40>
    return ERR_OK;
  }
#endif

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((IP6_HLEN > p->len) || (IP6H_PLEN(ip6hdr) > (p->tot_len - IP6_HLEN))) {
 80108c4:	8963      	ldrh	r3, [r4, #10]
 80108c6:	2b27      	cmp	r3, #39	; 0x27
 80108c8:	d906      	bls.n	80108d8 <ip6_input+0x2c>
 80108ca:	8927      	ldrh	r7, [r4, #8]
 80108cc:	3f27      	subs	r7, #39	; 0x27
 80108ce:	88a8      	ldrh	r0, [r5, #4]
 80108d0:	f7f5 fc4e 	bl	8006170 <lwip_htons>
 80108d4:	4287      	cmp	r7, r0
 80108d6:	dc0d      	bgt.n	80108f4 <ip6_input+0x48>
    if (IP6_HLEN > p->len) {
      LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IPv6 header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n",
            (u16_t)IP6_HLEN, p->len));
    }
    if ((IP6H_PLEN(ip6hdr) + IP6_HLEN) > p->tot_len) {
 80108d8:	88a8      	ldrh	r0, [r5, #4]
 80108da:	f7f5 fc49 	bl	8006170 <lwip_htons>
      LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IPv6 (plen %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
            (u16_t)(IP6H_PLEN(ip6hdr) + IP6_HLEN), p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80108de:	4620      	mov	r0, r4
 80108e0:	f7f6 ff58 	bl	8007794 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip6_addr_set_zero(ip6_current_src_addr());
  ip6_addr_set_zero(ip6_current_dest_addr());

  return ERR_OK;
}
 80108e4:	2000      	movs	r0, #0
 80108e6:	b007      	add	sp, #28
 80108e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pbuf_free(p);
 80108ec:	4620      	mov	r0, r4
 80108ee:	f7f6 ff51 	bl	8007794 <pbuf_free>
    return ERR_OK;
 80108f2:	e7f7      	b.n	80108e4 <ip6_input+0x38>
  pbuf_realloc(p, (u16_t)(IP6_HLEN + IP6H_PLEN(ip6hdr)));
 80108f4:	88a8      	ldrh	r0, [r5, #4]
 80108f6:	f7f5 fc3b 	bl	8006170 <lwip_htons>
 80108fa:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80108fe:	b289      	uxth	r1, r1
 8010900:	4620      	mov	r0, r4
 8010902:	f7f7 f857 	bl	80079b4 <pbuf_realloc>
  ip_addr_copy_from_ip6_packed(ip_data.current_iphdr_dest, ip6hdr->dest);
 8010906:	69af      	ldr	r7, [r5, #24]
 8010908:	4baa      	ldr	r3, [pc, #680]	; (8010bb4 <ip6_input+0x308>)
 801090a:	62df      	str	r7, [r3, #44]	; 0x2c
 801090c:	f8d5 901c 	ldr.w	r9, [r5, #28]
 8010910:	f8c3 9030 	str.w	r9, [r3, #48]	; 0x30
 8010914:	f8d5 b020 	ldr.w	fp, [r5, #32]
 8010918:	f8c3 b034 	str.w	fp, [r3, #52]	; 0x34
 801091c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801091e:	9202      	str	r2, [sp, #8]
 8010920:	639a      	str	r2, [r3, #56]	; 0x38
 8010922:	2100      	movs	r1, #0
 8010924:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 8010928:	2206      	movs	r2, #6
 801092a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  ip_addr_copy_from_ip6_packed(ip_data.current_iphdr_src, ip6hdr->src);
 801092e:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8010932:	f8c3 8014 	str.w	r8, [r3, #20]
 8010936:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 801093a:	f8c3 a018 	str.w	sl, [r3, #24]
 801093e:	6928      	ldr	r0, [r5, #16]
 8010940:	9001      	str	r0, [sp, #4]
 8010942:	61d8      	str	r0, [r3, #28]
 8010944:	6968      	ldr	r0, [r5, #20]
 8010946:	9003      	str	r0, [sp, #12]
 8010948:	6218      	str	r0, [r3, #32]
 801094a:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
 801094e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  if (ip6_addr_isipv4mappedipv6(ip_2_ip6(&ip_data.current_iphdr_dest)) ||
 8010952:	b92f      	cbnz	r7, 8010960 <ip6_input+0xb4>
 8010954:	f1b9 0f00 	cmp.w	r9, #0
 8010958:	d102      	bne.n	8010960 <ip6_input+0xb4>
 801095a:	f51b 3f80 	cmn.w	fp, #65536	; 0x10000
 801095e:	d023      	beq.n	80109a8 <ip6_input+0xfc>
 8010960:	f1b8 0f00 	cmp.w	r8, #0
 8010964:	d106      	bne.n	8010974 <ip6_input+0xc8>
     ip6_addr_isipv4mappedipv6(ip_2_ip6(&ip_data.current_iphdr_src)) ||
 8010966:	f1ba 0f00 	cmp.w	sl, #0
 801096a:	d103      	bne.n	8010974 <ip6_input+0xc8>
 801096c:	9b01      	ldr	r3, [sp, #4]
 801096e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010972:	d019      	beq.n	80109a8 <ip6_input+0xfc>
     ip6_addr_ismulticast(ip_2_ip6(&ip_data.current_iphdr_src))) {
 8010974:	fa5f f388 	uxtb.w	r3, r8
     ip6_addr_isipv4mappedipv6(ip_2_ip6(&ip_data.current_iphdr_src)) ||
 8010978:	2bff      	cmp	r3, #255	; 0xff
 801097a:	d015      	beq.n	80109a8 <ip6_input+0xfc>
  ip6_addr_assign_zone(ip_2_ip6(&ip_data.current_iphdr_dest), IP6_UNKNOWN, inp);
 801097c:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 8010980:	403b      	ands	r3, r7
 8010982:	461a      	mov	r2, r3
 8010984:	9304      	str	r3, [sp, #16]
 8010986:	f248 03fe 	movw	r3, #33022	; 0x80fe
 801098a:	429a      	cmp	r2, r3
 801098c:	d010      	beq.n	80109b0 <ip6_input+0x104>
 801098e:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8010992:	403b      	ands	r3, r7
 8010994:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010998:	4293      	cmp	r3, r2
 801099a:	d009      	beq.n	80109b0 <ip6_input+0x104>
 801099c:	f240 22ff 	movw	r2, #767	; 0x2ff
 80109a0:	4293      	cmp	r3, r2
 80109a2:	d005      	beq.n	80109b0 <ip6_input+0x104>
 80109a4:	2300      	movs	r3, #0
 80109a6:	e007      	b.n	80109b8 <ip6_input+0x10c>
    pbuf_free(p);
 80109a8:	4620      	mov	r0, r4
 80109aa:	f7f6 fef3 	bl	8007794 <pbuf_free>
    return ERR_OK;
 80109ae:	e799      	b.n	80108e4 <ip6_input+0x38>
  ip6_addr_assign_zone(ip_2_ip6(&ip_data.current_iphdr_dest), IP6_UNKNOWN, inp);
 80109b0:	f896 30e2 	ldrb.w	r3, [r6, #226]	; 0xe2
 80109b4:	3301      	adds	r3, #1
 80109b6:	b2db      	uxtb	r3, r3
 80109b8:	4a7e      	ldr	r2, [pc, #504]	; (8010bb4 <ip6_input+0x308>)
 80109ba:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  ip6_addr_assign_zone(ip_2_ip6(&ip_data.current_iphdr_src), IP6_UNICAST, inp);
 80109be:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 80109c2:	ea08 0303 	and.w	r3, r8, r3
 80109c6:	461a      	mov	r2, r3
 80109c8:	9305      	str	r3, [sp, #20]
 80109ca:	f248 03fe 	movw	r3, #33022	; 0x80fe
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d030      	beq.n	8010a34 <ip6_input+0x188>
 80109d2:	2200      	movs	r2, #0
 80109d4:	4b77      	ldr	r3, [pc, #476]	; (8010bb4 <ip6_input+0x308>)
 80109d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ip_data.current_ip6_header = ip6hdr;
 80109da:	60dd      	str	r5, [r3, #12]
  ip_data.current_netif = inp;
 80109dc:	601e      	str	r6, [r3, #0]
  ip_data.current_input_netif = inp;
 80109de:	605e      	str	r6, [r3, #4]
  if (ip6_addr_ismulticast(ip6_current_dest_addr())) {
 80109e0:	b2fb      	uxtb	r3, r7
 80109e2:	2bff      	cmp	r3, #255	; 0xff
 80109e4:	d02b      	beq.n	8010a3e <ip6_input+0x192>
    if (ip6_input_accept(inp)) {
 80109e6:	4630      	mov	r0, r6
 80109e8:	f7ff fcfc 	bl	80103e4 <ip6_input_accept>
 80109ec:	2800      	cmp	r0, #0
 80109ee:	d14c      	bne.n	8010a8a <ip6_input+0x1de>
      if (ip6_addr_islinklocal(ip6_current_dest_addr()) ||
 80109f0:	f248 03fe 	movw	r3, #33022	; 0x80fe
 80109f4:	9a04      	ldr	r2, [sp, #16]
 80109f6:	429a      	cmp	r2, r3
 80109f8:	d068      	beq.n	8010acc <ip6_input+0x220>
 80109fa:	9a05      	ldr	r2, [sp, #20]
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d067      	beq.n	8010ad0 <ip6_input+0x224>
      if (ip6_addr_isloopback(ip6_current_dest_addr()) ||
 8010a00:	b94f      	cbnz	r7, 8010a16 <ip6_input+0x16a>
 8010a02:	f1b9 0f00 	cmp.w	r9, #0
 8010a06:	d106      	bne.n	8010a16 <ip6_input+0x16a>
 8010a08:	f1bb 0f00 	cmp.w	fp, #0
 8010a0c:	d103      	bne.n	8010a16 <ip6_input+0x16a>
 8010a0e:	9b02      	ldr	r3, [sp, #8]
 8010a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010a14:	d05e      	beq.n	8010ad4 <ip6_input+0x228>
 8010a16:	f1b8 0f00 	cmp.w	r8, #0
 8010a1a:	d108      	bne.n	8010a2e <ip6_input+0x182>
          ip6_addr_isloopback(ip6_current_src_addr())) {
 8010a1c:	f1ba 0f00 	cmp.w	sl, #0
 8010a20:	d105      	bne.n	8010a2e <ip6_input+0x182>
 8010a22:	9b01      	ldr	r3, [sp, #4]
 8010a24:	b91b      	cbnz	r3, 8010a2e <ip6_input+0x182>
 8010a26:	9b03      	ldr	r3, [sp, #12]
 8010a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010a2c:	d054      	beq.n	8010ad8 <ip6_input+0x22c>
      NETIF_FOREACH(netif) {
 8010a2e:	4b62      	ldr	r3, [pc, #392]	; (8010bb8 <ip6_input+0x30c>)
 8010a30:	681f      	ldr	r7, [r3, #0]
 8010a32:	e021      	b.n	8010a78 <ip6_input+0x1cc>
  ip6_addr_assign_zone(ip_2_ip6(&ip_data.current_iphdr_src), IP6_UNICAST, inp);
 8010a34:	f896 20e2 	ldrb.w	r2, [r6, #226]	; 0xe2
 8010a38:	3201      	adds	r2, #1
 8010a3a:	b2d2      	uxtb	r2, r2
 8010a3c:	e7ca      	b.n	80109d4 <ip6_input+0x128>
    if (ip6_addr_isallnodes_iflocal(ip6_current_dest_addr()) ||
 8010a3e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8010a42:	429f      	cmp	r7, r3
 8010a44:	d00b      	beq.n	8010a5e <ip6_input+0x1b2>
 8010a46:	f240 23ff 	movw	r3, #767	; 0x2ff
 8010a4a:	429f      	cmp	r7, r3
 8010a4c:	d007      	beq.n	8010a5e <ip6_input+0x1b2>
    else if (mld6_lookfor_group(inp, ip6_current_dest_addr())) {
 8010a4e:	495b      	ldr	r1, [pc, #364]	; (8010bbc <ip6_input+0x310>)
 8010a50:	4630      	mov	r0, r6
 8010a52:	f000 ffcd 	bl	80119f0 <mld6_lookfor_group>
 8010a56:	4607      	mov	r7, r0
 8010a58:	b1c0      	cbz	r0, 8010a8c <ip6_input+0x1e0>
      netif = inp;
 8010a5a:	4637      	mov	r7, r6
 8010a5c:	e016      	b.n	8010a8c <ip6_input+0x1e0>
    if (ip6_addr_isallnodes_iflocal(ip6_current_dest_addr()) ||
 8010a5e:	f1b9 0f00 	cmp.w	r9, #0
 8010a62:	d1f4      	bne.n	8010a4e <ip6_input+0x1a2>
 8010a64:	f1bb 0f00 	cmp.w	fp, #0
 8010a68:	d1f1      	bne.n	8010a4e <ip6_input+0x1a2>
 8010a6a:	9b02      	ldr	r3, [sp, #8]
 8010a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010a70:	d1ed      	bne.n	8010a4e <ip6_input+0x1a2>
      netif = inp;
 8010a72:	4637      	mov	r7, r6
 8010a74:	e00a      	b.n	8010a8c <ip6_input+0x1e0>
      NETIF_FOREACH(netif) {
 8010a76:	683f      	ldr	r7, [r7, #0]
 8010a78:	b147      	cbz	r7, 8010a8c <ip6_input+0x1e0>
        if (netif == inp) {
 8010a7a:	42b7      	cmp	r7, r6
 8010a7c:	d0fb      	beq.n	8010a76 <ip6_input+0x1ca>
        if (ip6_input_accept(netif)) {
 8010a7e:	4638      	mov	r0, r7
 8010a80:	f7ff fcb0 	bl	80103e4 <ip6_input_accept>
 8010a84:	2800      	cmp	r0, #0
 8010a86:	d0f6      	beq.n	8010a76 <ip6_input+0x1ca>
netif_found:
 8010a88:	e000      	b.n	8010a8c <ip6_input+0x1e0>
      netif = inp;
 8010a8a:	4637      	mov	r7, r6
  if (ip6_addr_isany(ip6_current_src_addr()) &&
 8010a8c:	4b49      	ldr	r3, [pc, #292]	; (8010bb4 <ip6_input+0x308>)
 8010a8e:	695b      	ldr	r3, [r3, #20]
 8010a90:	bb23      	cbnz	r3, 8010adc <ip6_input+0x230>
 8010a92:	4b48      	ldr	r3, [pc, #288]	; (8010bb4 <ip6_input+0x308>)
 8010a94:	699b      	ldr	r3, [r3, #24]
 8010a96:	bb0b      	cbnz	r3, 8010adc <ip6_input+0x230>
 8010a98:	4b46      	ldr	r3, [pc, #280]	; (8010bb4 <ip6_input+0x308>)
 8010a9a:	69db      	ldr	r3, [r3, #28]
 8010a9c:	b9f3      	cbnz	r3, 8010adc <ip6_input+0x230>
 8010a9e:	4b45      	ldr	r3, [pc, #276]	; (8010bb4 <ip6_input+0x308>)
 8010aa0:	6a1b      	ldr	r3, [r3, #32]
 8010aa2:	b9db      	cbnz	r3, 8010adc <ip6_input+0x230>
      (!ip6_addr_issolicitednode(ip6_current_dest_addr()))) {
 8010aa4:	4b43      	ldr	r3, [pc, #268]	; (8010bb4 <ip6_input+0x308>)
 8010aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  if (ip6_addr_isany(ip6_current_src_addr()) &&
 8010aa8:	f240 23ff 	movw	r3, #767	; 0x2ff
 8010aac:	429a      	cmp	r2, r3
 8010aae:	d109      	bne.n	8010ac4 <ip6_input+0x218>
      (!ip6_addr_issolicitednode(ip6_current_dest_addr()))) {
 8010ab0:	4b40      	ldr	r3, [pc, #256]	; (8010bb4 <ip6_input+0x308>)
 8010ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010ab8:	d104      	bne.n	8010ac4 <ip6_input+0x218>
 8010aba:	4b3e      	ldr	r3, [pc, #248]	; (8010bb4 <ip6_input+0x308>)
 8010abc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010ac0:	2bff      	cmp	r3, #255	; 0xff
 8010ac2:	d00b      	beq.n	8010adc <ip6_input+0x230>
    pbuf_free(p);
 8010ac4:	4620      	mov	r0, r4
 8010ac6:	f7f6 fe65 	bl	8007794 <pbuf_free>
    goto ip6_input_cleanup;
 8010aca:	e04c      	b.n	8010b66 <ip6_input+0x2ba>
      netif = NULL;
 8010acc:	2700      	movs	r7, #0
 8010ace:	e7dd      	b.n	8010a8c <ip6_input+0x1e0>
 8010ad0:	2700      	movs	r7, #0
 8010ad2:	e7db      	b.n	8010a8c <ip6_input+0x1e0>
 8010ad4:	2700      	movs	r7, #0
 8010ad6:	e7d9      	b.n	8010a8c <ip6_input+0x1e0>
 8010ad8:	2700      	movs	r7, #0
 8010ada:	e7d7      	b.n	8010a8c <ip6_input+0x1e0>
  if (netif == NULL) {
 8010adc:	2f00      	cmp	r7, #0
 8010ade:	d03f      	beq.n	8010b60 <ip6_input+0x2b4>
  ip_data.current_netif = netif;
 8010ae0:	4b34      	ldr	r3, [pc, #208]	; (8010bb4 <ip6_input+0x308>)
 8010ae2:	601f      	str	r7, [r3, #0]
  nexth = &IP6H_NEXTH(ip6hdr);
 8010ae4:	f105 0806 	add.w	r8, r5, #6
  pbuf_remove_header(p, IP6_HLEN);
 8010ae8:	2128      	movs	r1, #40	; 0x28
 8010aea:	4620      	mov	r0, r4
 8010aec:	f7f6 fe0c 	bl	8007708 <pbuf_remove_header>
  hlen = hlen_tot = IP6_HLEN;
 8010af0:	2728      	movs	r7, #40	; 0x28
  while (*nexth != IP6_NEXTH_NONE)
 8010af2:	f898 3000 	ldrb.w	r3, [r8]
 8010af6:	2b3b      	cmp	r3, #59	; 0x3b
 8010af8:	f000 8150 	beq.w	8010d9c <ip6_input+0x4f0>
    switch (*nexth) {
 8010afc:	2b2c      	cmp	r3, #44	; 0x2c
 8010afe:	f000 810f 	beq.w	8010d20 <ip6_input+0x474>
 8010b02:	d843      	bhi.n	8010b8c <ip6_input+0x2e0>
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d05b      	beq.n	8010bc0 <ip6_input+0x314>
 8010b08:	2b2b      	cmp	r3, #43	; 0x2b
 8010b0a:	f040 8147 	bne.w	8010d9c <ip6_input+0x4f0>
      rout_hdr = (struct ip6_rout_hdr *)p->payload;
 8010b0e:	6862      	ldr	r2, [r4, #4]
      nexth = &IP6_ROUT_NEXTH(rout_hdr);
 8010b10:	4690      	mov	r8, r2
      hlen = 8 * (1 + rout_hdr->_hlen);
 8010b12:	7850      	ldrb	r0, [r2, #1]
 8010b14:	1c41      	adds	r1, r0, #1
 8010b16:	00c9      	lsls	r1, r1, #3
      if ((p->len < 8) || (hlen > p->len)) {
 8010b18:	8963      	ldrh	r3, [r4, #10]
 8010b1a:	2b07      	cmp	r3, #7
 8010b1c:	f240 80ea 	bls.w	8010cf4 <ip6_input+0x448>
 8010b20:	428b      	cmp	r3, r1
 8010b22:	f0c0 80e7 	bcc.w	8010cf4 <ip6_input+0x448>
      hlen_tot = (u16_t)(hlen_tot + hlen);
 8010b26:	440f      	add	r7, r1
 8010b28:	b2bf      	uxth	r7, r7
      if (IP6_ROUT_SEG_LEFT(rout_hdr)) {
 8010b2a:	78d3      	ldrb	r3, [r2, #3]
 8010b2c:	b143      	cbz	r3, 8010b40 <ip6_input+0x294>
        if (rout_hdr->_hlen & 0x1) {
 8010b2e:	f010 0f01 	tst.w	r0, #1
 8010b32:	f040 80e3 	bne.w	8010cfc <ip6_input+0x450>
        switch (IP6_ROUT_TYPE(rout_hdr))
 8010b36:	7893      	ldrb	r3, [r2, #2]
 8010b38:	3b02      	subs	r3, #2
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	f200 80e7 	bhi.w	8010d0e <ip6_input+0x462>
      pbuf_remove_header(p, hlen);
 8010b40:	4620      	mov	r0, r4
 8010b42:	f7f6 fde1 	bl	8007708 <pbuf_remove_header>
    if (*nexth == IP6_NEXTH_HOPBYHOP) {
 8010b46:	f898 3000 	ldrb.w	r3, [r8]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d1d1      	bne.n	8010af2 <ip6_input+0x246>
      icmp6_param_problem(p, ICMP6_PP_HEADER, nexth);
 8010b4e:	4642      	mov	r2, r8
 8010b50:	2101      	movs	r1, #1
 8010b52:	4620      	mov	r0, r4
 8010b54:	f7ff fc3c 	bl	80103d0 <icmp6_param_problem>
      pbuf_free(p);
 8010b58:	4620      	mov	r0, r4
 8010b5a:	f7f6 fe1b 	bl	8007794 <pbuf_free>
      goto ip6_input_cleanup;
 8010b5e:	e002      	b.n	8010b66 <ip6_input+0x2ba>
    pbuf_free(p);
 8010b60:	4620      	mov	r0, r4
 8010b62:	f7f6 fe17 	bl	8007794 <pbuf_free>
  ip_data.current_netif = NULL;
 8010b66:	4b13      	ldr	r3, [pc, #76]	; (8010bb4 <ip6_input+0x308>)
 8010b68:	2200      	movs	r2, #0
 8010b6a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010b6c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip6_header = NULL;
 8010b6e:	60da      	str	r2, [r3, #12]
  ip_data.current_ip_header_tot_len = 0;
 8010b70:	821a      	strh	r2, [r3, #16]
  ip6_addr_set_zero(ip6_current_src_addr());
 8010b72:	615a      	str	r2, [r3, #20]
 8010b74:	619a      	str	r2, [r3, #24]
 8010b76:	61da      	str	r2, [r3, #28]
 8010b78:	621a      	str	r2, [r3, #32]
 8010b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ip6_addr_set_zero(ip6_current_dest_addr());
 8010b7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8010b80:	631a      	str	r2, [r3, #48]	; 0x30
 8010b82:	635a      	str	r2, [r3, #52]	; 0x34
 8010b84:	639a      	str	r2, [r3, #56]	; 0x38
 8010b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return ERR_OK;
 8010b8a:	e6ab      	b.n	80108e4 <ip6_input+0x38>
    switch (*nexth) {
 8010b8c:	2b3c      	cmp	r3, #60	; 0x3c
 8010b8e:	f040 8105 	bne.w	8010d9c <ip6_input+0x4f0>
      dest_hdr = (struct ip6_dest_hdr *)p->payload;
 8010b92:	6861      	ldr	r1, [r4, #4]
      nexth = &IP6_DEST_NEXTH(dest_hdr);
 8010b94:	4688      	mov	r8, r1
      hlen = 8 * (1 + dest_hdr->_hlen);
 8010b96:	f891 c001 	ldrb.w	ip, [r1, #1]
 8010b9a:	f10c 0c01 	add.w	ip, ip, #1
 8010b9e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
      if ((p->len < 8) || (hlen > p->len)) {
 8010ba2:	8963      	ldrh	r3, [r4, #10]
 8010ba4:	2b07      	cmp	r3, #7
 8010ba6:	d95f      	bls.n	8010c68 <ip6_input+0x3bc>
 8010ba8:	4563      	cmp	r3, ip
 8010baa:	d35d      	bcc.n	8010c68 <ip6_input+0x3bc>
      hlen_tot = (u16_t)(hlen_tot + hlen);
 8010bac:	4467      	add	r7, ip
 8010bae:	b2bf      	uxth	r7, r7
      opt_offset = IP6_DEST_HLEN;
 8010bb0:	2002      	movs	r0, #2
      while (opt_offset < hlen)
 8010bb2:	e08d      	b.n	8010cd0 <ip6_input+0x424>
 8010bb4:	200039e8 	.word	0x200039e8
 8010bb8:	20007b10 	.word	0x20007b10
 8010bbc:	20003a14 	.word	0x20003a14
      hbh_hdr = (struct ip6_hbh_hdr *)p->payload;
 8010bc0:	6861      	ldr	r1, [r4, #4]
      nexth = &IP6_HBH_NEXTH(hbh_hdr);
 8010bc2:	4688      	mov	r8, r1
      hlen = (u16_t)(8 * (1 + hbh_hdr->_hlen));
 8010bc4:	f891 c001 	ldrb.w	ip, [r1, #1]
 8010bc8:	f10c 0c01 	add.w	ip, ip, #1
 8010bcc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
      if ((p->len < 8) || (hlen > p->len)) {
 8010bd0:	8963      	ldrh	r3, [r4, #10]
 8010bd2:	2b07      	cmp	r3, #7
 8010bd4:	d905      	bls.n	8010be2 <ip6_input+0x336>
 8010bd6:	4563      	cmp	r3, ip
 8010bd8:	d303      	bcc.n	8010be2 <ip6_input+0x336>
      hlen_tot = (u16_t)(hlen_tot + hlen);
 8010bda:	4467      	add	r7, ip
 8010bdc:	b2bf      	uxth	r7, r7
      opt_offset = IP6_HBH_HLEN;
 8010bde:	2002      	movs	r0, #2
      while (opt_offset < hlen)
 8010be0:	e030      	b.n	8010c44 <ip6_input+0x398>
        pbuf_free(p);
 8010be2:	4620      	mov	r0, r4
 8010be4:	f7f6 fdd6 	bl	8007794 <pbuf_free>
        goto ip6_input_cleanup;
 8010be8:	e7bd      	b.n	8010b66 <ip6_input+0x2ba>
 8010bea:	2bc2      	cmp	r3, #194	; 0xc2
 8010bec:	d103      	bne.n	8010bf6 <ip6_input+0x34a>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 8010bee:	7853      	ldrb	r3, [r2, #1]
          break;
 8010bf0:	e026      	b.n	8010c40 <ip6_input+0x394>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 8010bf2:	7853      	ldrb	r3, [r2, #1]
          break;
 8010bf4:	e024      	b.n	8010c40 <ip6_input+0x394>
          switch (IP6_OPT_TYPE_ACTION(opt_hdr)) {
 8010bf6:	099b      	lsrs	r3, r3, #6
 8010bf8:	2b02      	cmp	r3, #2
 8010bfa:	d009      	beq.n	8010c10 <ip6_input+0x364>
 8010bfc:	2b03      	cmp	r3, #3
 8010bfe:	d00f      	beq.n	8010c20 <ip6_input+0x374>
 8010c00:	2b01      	cmp	r3, #1
 8010c02:	d001      	beq.n	8010c08 <ip6_input+0x35c>
            opt_dlen = IP6_OPT_DLEN(opt_hdr);
 8010c04:	7853      	ldrb	r3, [r2, #1]
          break;
 8010c06:	e01b      	b.n	8010c40 <ip6_input+0x394>
            pbuf_free(p);
 8010c08:	4620      	mov	r0, r4
 8010c0a:	f7f6 fdc3 	bl	8007794 <pbuf_free>
            goto ip6_input_cleanup;
 8010c0e:	e7aa      	b.n	8010b66 <ip6_input+0x2ba>
            icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
 8010c10:	2102      	movs	r1, #2
 8010c12:	4620      	mov	r0, r4
 8010c14:	f7ff fbdc 	bl	80103d0 <icmp6_param_problem>
            pbuf_free(p);
 8010c18:	4620      	mov	r0, r4
 8010c1a:	f7f6 fdbb 	bl	8007794 <pbuf_free>
            goto ip6_input_cleanup;
 8010c1e:	e7a2      	b.n	8010b66 <ip6_input+0x2ba>
            if (!ip6_addr_ismulticast(ip6_current_dest_addr())) {
 8010c20:	4b79      	ldr	r3, [pc, #484]	; (8010e08 <ip6_input+0x55c>)
 8010c22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010c26:	2bff      	cmp	r3, #255	; 0xff
 8010c28:	d103      	bne.n	8010c32 <ip6_input+0x386>
            pbuf_free(p);
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	f7f6 fdb2 	bl	8007794 <pbuf_free>
            goto ip6_input_cleanup;
 8010c30:	e799      	b.n	8010b66 <ip6_input+0x2ba>
              icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
 8010c32:	2102      	movs	r1, #2
 8010c34:	4620      	mov	r0, r4
 8010c36:	f7ff fbcb 	bl	80103d0 <icmp6_param_problem>
 8010c3a:	e7f6      	b.n	8010c2a <ip6_input+0x37e>
 8010c3c:	f04f 33ff 	mov.w	r3, #4294967295
        opt_offset = opt_offset + IP6_OPT_HLEN + opt_dlen;
 8010c40:	3002      	adds	r0, #2
 8010c42:	4418      	add	r0, r3
      while (opt_offset < hlen)
 8010c44:	4584      	cmp	ip, r0
 8010c46:	dd0a      	ble.n	8010c5e <ip6_input+0x3b2>
        opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + opt_offset);
 8010c48:	180a      	adds	r2, r1, r0
        switch (IP6_OPT_TYPE(opt_hdr)) {
 8010c4a:	5c0b      	ldrb	r3, [r1, r0]
 8010c4c:	2b05      	cmp	r3, #5
 8010c4e:	d0d0      	beq.n	8010bf2 <ip6_input+0x346>
 8010c50:	d8cb      	bhi.n	8010bea <ip6_input+0x33e>
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d0f2      	beq.n	8010c3c <ip6_input+0x390>
 8010c56:	2b01      	cmp	r3, #1
 8010c58:	d1cd      	bne.n	8010bf6 <ip6_input+0x34a>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 8010c5a:	7853      	ldrb	r3, [r2, #1]
          break;
 8010c5c:	e7f0      	b.n	8010c40 <ip6_input+0x394>
      pbuf_remove_header(p, hlen);
 8010c5e:	4661      	mov	r1, ip
 8010c60:	4620      	mov	r0, r4
 8010c62:	f7f6 fd51 	bl	8007708 <pbuf_remove_header>
      break;
 8010c66:	e76e      	b.n	8010b46 <ip6_input+0x29a>
        pbuf_free(p);
 8010c68:	4620      	mov	r0, r4
 8010c6a:	f7f6 fd93 	bl	8007794 <pbuf_free>
        goto ip6_input_cleanup;
 8010c6e:	e77a      	b.n	8010b66 <ip6_input+0x2ba>
 8010c70:	b353      	cbz	r3, 8010cc8 <ip6_input+0x41c>
 8010c72:	2b01      	cmp	r3, #1
 8010c74:	d105      	bne.n	8010c82 <ip6_input+0x3d6>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 8010c76:	7853      	ldrb	r3, [r2, #1]
          break;
 8010c78:	e028      	b.n	8010ccc <ip6_input+0x420>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 8010c7a:	7853      	ldrb	r3, [r2, #1]
          break;
 8010c7c:	e026      	b.n	8010ccc <ip6_input+0x420>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 8010c7e:	7853      	ldrb	r3, [r2, #1]
          break;
 8010c80:	e024      	b.n	8010ccc <ip6_input+0x420>
          switch (IP6_OPT_TYPE_ACTION(opt_hdr))
 8010c82:	099b      	lsrs	r3, r3, #6
 8010c84:	2b02      	cmp	r3, #2
 8010c86:	d009      	beq.n	8010c9c <ip6_input+0x3f0>
 8010c88:	2b03      	cmp	r3, #3
 8010c8a:	d00f      	beq.n	8010cac <ip6_input+0x400>
 8010c8c:	2b01      	cmp	r3, #1
 8010c8e:	d001      	beq.n	8010c94 <ip6_input+0x3e8>
            opt_dlen = IP6_OPT_DLEN(opt_hdr);
 8010c90:	7853      	ldrb	r3, [r2, #1]
          break;
 8010c92:	e01b      	b.n	8010ccc <ip6_input+0x420>
            pbuf_free(p);
 8010c94:	4620      	mov	r0, r4
 8010c96:	f7f6 fd7d 	bl	8007794 <pbuf_free>
            goto ip6_input_cleanup;
 8010c9a:	e764      	b.n	8010b66 <ip6_input+0x2ba>
            icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
 8010c9c:	2102      	movs	r1, #2
 8010c9e:	4620      	mov	r0, r4
 8010ca0:	f7ff fb96 	bl	80103d0 <icmp6_param_problem>
            pbuf_free(p);
 8010ca4:	4620      	mov	r0, r4
 8010ca6:	f7f6 fd75 	bl	8007794 <pbuf_free>
            goto ip6_input_cleanup;
 8010caa:	e75c      	b.n	8010b66 <ip6_input+0x2ba>
            if (!ip6_addr_ismulticast(ip6_current_dest_addr())) {
 8010cac:	4b56      	ldr	r3, [pc, #344]	; (8010e08 <ip6_input+0x55c>)
 8010cae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010cb2:	2bff      	cmp	r3, #255	; 0xff
 8010cb4:	d103      	bne.n	8010cbe <ip6_input+0x412>
            pbuf_free(p);
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	f7f6 fd6c 	bl	8007794 <pbuf_free>
            goto ip6_input_cleanup;
 8010cbc:	e753      	b.n	8010b66 <ip6_input+0x2ba>
              icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
 8010cbe:	2102      	movs	r1, #2
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f7ff fb85 	bl	80103d0 <icmp6_param_problem>
 8010cc6:	e7f6      	b.n	8010cb6 <ip6_input+0x40a>
 8010cc8:	f04f 33ff 	mov.w	r3, #4294967295
        opt_offset = opt_offset + IP6_OPT_HLEN + opt_dlen;
 8010ccc:	3002      	adds	r0, #2
 8010cce:	4418      	add	r0, r3
      while (opt_offset < hlen)
 8010cd0:	4584      	cmp	ip, r0
 8010cd2:	dd0a      	ble.n	8010cea <ip6_input+0x43e>
        opt_hdr = (struct ip6_opt_hdr *)((u8_t *)dest_hdr + opt_offset);
 8010cd4:	180a      	adds	r2, r1, r0
        switch (IP6_OPT_TYPE(opt_hdr))
 8010cd6:	5c0b      	ldrb	r3, [r1, r0]
 8010cd8:	2b05      	cmp	r3, #5
 8010cda:	d0ce      	beq.n	8010c7a <ip6_input+0x3ce>
 8010cdc:	d9c8      	bls.n	8010c70 <ip6_input+0x3c4>
 8010cde:	2bc2      	cmp	r3, #194	; 0xc2
 8010ce0:	d0cd      	beq.n	8010c7e <ip6_input+0x3d2>
 8010ce2:	2bc9      	cmp	r3, #201	; 0xc9
 8010ce4:	d1cd      	bne.n	8010c82 <ip6_input+0x3d6>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 8010ce6:	7853      	ldrb	r3, [r2, #1]
          break;
 8010ce8:	e7f0      	b.n	8010ccc <ip6_input+0x420>
      pbuf_remove_header(p, hlen);
 8010cea:	4661      	mov	r1, ip
 8010cec:	4620      	mov	r0, r4
 8010cee:	f7f6 fd0b 	bl	8007708 <pbuf_remove_header>
      break;
 8010cf2:	e728      	b.n	8010b46 <ip6_input+0x29a>
        pbuf_free(p);
 8010cf4:	4620      	mov	r0, r4
 8010cf6:	f7f6 fd4d 	bl	8007794 <pbuf_free>
        goto ip6_input_cleanup;
 8010cfa:	e734      	b.n	8010b66 <ip6_input+0x2ba>
          icmp6_param_problem(p, ICMP6_PP_FIELD, &rout_hdr->_hlen);
 8010cfc:	3201      	adds	r2, #1
 8010cfe:	2100      	movs	r1, #0
 8010d00:	4620      	mov	r0, r4
 8010d02:	f7ff fb65 	bl	80103d0 <icmp6_param_problem>
          pbuf_free(p);
 8010d06:	4620      	mov	r0, r4
 8010d08:	f7f6 fd44 	bl	8007794 <pbuf_free>
          goto ip6_input_cleanup;
 8010d0c:	e72b      	b.n	8010b66 <ip6_input+0x2ba>
          icmp6_param_problem(p, ICMP6_PP_FIELD, &IP6_ROUT_TYPE(rout_hdr));
 8010d0e:	3202      	adds	r2, #2
 8010d10:	2100      	movs	r1, #0
 8010d12:	4620      	mov	r0, r4
 8010d14:	f7ff fb5c 	bl	80103d0 <icmp6_param_problem>
          pbuf_free(p);
 8010d18:	4620      	mov	r0, r4
 8010d1a:	f7f6 fd3b 	bl	8007794 <pbuf_free>
          goto ip6_input_cleanup;
 8010d1e:	e722      	b.n	8010b66 <ip6_input+0x2ba>
      frag_hdr = (struct ip6_frag_hdr *)p->payload;
 8010d20:	f8d4 9004 	ldr.w	r9, [r4, #4]
      nexth = &IP6_FRAG_NEXTH(frag_hdr);
 8010d24:	46c8      	mov	r8, r9
      if (hlen > p->len) {
 8010d26:	8963      	ldrh	r3, [r4, #10]
 8010d28:	2b07      	cmp	r3, #7
 8010d2a:	d913      	bls.n	8010d54 <ip6_input+0x4a8>
      hlen_tot = (u16_t)(hlen_tot + hlen);
 8010d2c:	3708      	adds	r7, #8
 8010d2e:	b2bf      	uxth	r7, r7
      if (IP6_FRAG_MBIT(frag_hdr) && (IP6H_PLEN(ip6hdr) & 0x7)) {
 8010d30:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 8010d34:	f7f5 fa1c 	bl	8006170 <lwip_htons>
 8010d38:	f010 0f01 	tst.w	r0, #1
 8010d3c:	d10e      	bne.n	8010d5c <ip6_input+0x4b0>
      if ((frag_hdr->_fragment_offset &
 8010d3e:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8010d42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8010d46:	b29b      	uxth	r3, r3
 8010d48:	b9bb      	cbnz	r3, 8010d7a <ip6_input+0x4ce>
        pbuf_remove_header(p, hlen);
 8010d4a:	2108      	movs	r1, #8
 8010d4c:	4620      	mov	r0, r4
 8010d4e:	f7f6 fcdb 	bl	8007708 <pbuf_remove_header>
 8010d52:	e6f8      	b.n	8010b46 <ip6_input+0x29a>
        pbuf_free(p);
 8010d54:	4620      	mov	r0, r4
 8010d56:	f7f6 fd1d 	bl	8007794 <pbuf_free>
        goto ip6_input_cleanup;
 8010d5a:	e704      	b.n	8010b66 <ip6_input+0x2ba>
      if (IP6_FRAG_MBIT(frag_hdr) && (IP6H_PLEN(ip6hdr) & 0x7)) {
 8010d5c:	88a8      	ldrh	r0, [r5, #4]
 8010d5e:	f7f5 fa07 	bl	8006170 <lwip_htons>
 8010d62:	f010 0f07 	tst.w	r0, #7
 8010d66:	d0ea      	beq.n	8010d3e <ip6_input+0x492>
        icmp6_param_problem(p, ICMP6_PP_FIELD, LWIP_PACKED_CAST(const void *, &ip6hdr->_plen));
 8010d68:	1d2a      	adds	r2, r5, #4
 8010d6a:	2100      	movs	r1, #0
 8010d6c:	4620      	mov	r0, r4
 8010d6e:	f7ff fb2f 	bl	80103d0 <icmp6_param_problem>
        pbuf_free(p);
 8010d72:	4620      	mov	r0, r4
 8010d74:	f7f6 fd0e 	bl	8007794 <pbuf_free>
        goto ip6_input_cleanup;
 8010d78:	e6f5      	b.n	8010b66 <ip6_input+0x2ba>
        ip_data.current_ip_header_tot_len = hlen_tot;
 8010d7a:	4b23      	ldr	r3, [pc, #140]	; (8010e08 <ip6_input+0x55c>)
 8010d7c:	821f      	strh	r7, [r3, #16]
        p = ip6_reass(p);
 8010d7e:	4620      	mov	r0, r4
 8010d80:	f000 fa68 	bl	8011254 <ip6_reass>
        if (p == NULL) {
 8010d84:	4604      	mov	r4, r0
 8010d86:	2800      	cmp	r0, #0
 8010d88:	f43f aeed 	beq.w	8010b66 <ip6_input+0x2ba>
        ip6hdr = (struct ip6_hdr *)p->payload;
 8010d8c:	6845      	ldr	r5, [r0, #4]
        nexth = &IP6H_NEXTH(ip6hdr);
 8010d8e:	f105 0806 	add.w	r8, r5, #6
        pbuf_remove_header(p, IP6_HLEN);
 8010d92:	2128      	movs	r1, #40	; 0x28
 8010d94:	f7f6 fcb8 	bl	8007708 <pbuf_remove_header>
        hlen = hlen_tot = IP6_HLEN;
 8010d98:	2728      	movs	r7, #40	; 0x28
 8010d9a:	e6d4      	b.n	8010b46 <ip6_input+0x29a>
  ip_data.current_ip_header_tot_len = hlen_tot;
 8010d9c:	4b1a      	ldr	r3, [pc, #104]	; (8010e08 <ip6_input+0x55c>)
 8010d9e:	821f      	strh	r7, [r3, #16]
    switch (*nexth) {
 8010da0:	f898 3000 	ldrb.w	r3, [r8]
 8010da4:	2b3a      	cmp	r3, #58	; 0x3a
 8010da6:	d014      	beq.n	8010dd2 <ip6_input+0x526>
 8010da8:	d808      	bhi.n	8010dbc <ip6_input+0x510>
 8010daa:	2b06      	cmp	r3, #6
 8010dac:	d00c      	beq.n	8010dc8 <ip6_input+0x51c>
 8010dae:	2b11      	cmp	r3, #17
 8010db0:	d114      	bne.n	8010ddc <ip6_input+0x530>
      udp_input(p, inp);
 8010db2:	4631      	mov	r1, r6
 8010db4:	4620      	mov	r0, r4
 8010db6:	f7fb fa39 	bl	800c22c <udp_input>
      break;
 8010dba:	e6d4      	b.n	8010b66 <ip6_input+0x2ba>
    switch (*nexth) {
 8010dbc:	2b3b      	cmp	r3, #59	; 0x3b
 8010dbe:	d10d      	bne.n	8010ddc <ip6_input+0x530>
      pbuf_free(p);
 8010dc0:	4620      	mov	r0, r4
 8010dc2:	f7f6 fce7 	bl	8007794 <pbuf_free>
      break;
 8010dc6:	e6ce      	b.n	8010b66 <ip6_input+0x2ba>
      tcp_input(p, inp);
 8010dc8:	4631      	mov	r1, r6
 8010dca:	4620      	mov	r0, r4
 8010dcc:	f7f9 fc32 	bl	800a634 <tcp_input>
      break;
 8010dd0:	e6c9      	b.n	8010b66 <ip6_input+0x2ba>
      icmp6_input(p, inp);
 8010dd2:	4631      	mov	r1, r6
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	f7ff fa8b 	bl	80102f0 <icmp6_input>
      break;
 8010dda:	e6c4      	b.n	8010b66 <ip6_input+0x2ba>
        pbuf_add_header_force(p, hlen_tot);
 8010ddc:	4639      	mov	r1, r7
 8010dde:	4620      	mov	r0, r4
 8010de0:	f7f6 fc8c 	bl	80076fc <pbuf_add_header_force>
        if ((!ip6_addr_ismulticast(ip6_current_dest_addr())) &&
 8010de4:	4b08      	ldr	r3, [pc, #32]	; (8010e08 <ip6_input+0x55c>)
 8010de6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010dea:	2bff      	cmp	r3, #255	; 0xff
 8010dec:	d002      	beq.n	8010df4 <ip6_input+0x548>
            (IP6H_NEXTH(ip6hdr) != IP6_NEXTH_ICMP6)) {
 8010dee:	79ab      	ldrb	r3, [r5, #6]
        if ((!ip6_addr_ismulticast(ip6_current_dest_addr())) &&
 8010df0:	2b3a      	cmp	r3, #58	; 0x3a
 8010df2:	d103      	bne.n	8010dfc <ip6_input+0x550>
      pbuf_free(p);
 8010df4:	4620      	mov	r0, r4
 8010df6:	f7f6 fccd 	bl	8007794 <pbuf_free>
      break;
 8010dfa:	e6b4      	b.n	8010b66 <ip6_input+0x2ba>
          icmp6_param_problem(p, ICMP6_PP_HEADER, nexth);
 8010dfc:	4642      	mov	r2, r8
 8010dfe:	2101      	movs	r1, #1
 8010e00:	4620      	mov	r0, r4
 8010e02:	f7ff fae5 	bl	80103d0 <icmp6_param_problem>
 8010e06:	e7f5      	b.n	8010df4 <ip6_input+0x548>
 8010e08:	200039e8 	.word	0x200039e8

08010e0c <ip6_output_if_src>:
 */
err_t
ip6_output_if_src(struct pbuf *p, const ip6_addr_t *src, const ip6_addr_t *dest,
             u8_t hl, u8_t tc,
             u8_t nexth, struct netif *netif)
{
 8010e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e10:	b087      	sub	sp, #28
 8010e12:	4606      	mov	r6, r0
 8010e14:	460f      	mov	r7, r1
 8010e16:	4614      	mov	r4, r2
 8010e18:	4699      	mov	r9, r3
 8010e1a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  struct ip6_hdr *ip6hdr;
  ip6_addr_t dest_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010e1e:	7b82      	ldrb	r2, [r0, #14]
 8010e20:	2a01      	cmp	r2, #1
 8010e22:	d16f      	bne.n	8010f04 <ip6_output_if_src+0xf8>

  /* Should the IPv6 header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010e24:	2c00      	cmp	r4, #0
 8010e26:	d07f      	beq.n	8010f28 <ip6_output_if_src+0x11c>
     * based on the outgoing interface. The lower layers (e.g., nd6) absolutely
     * require addresses to be properly zoned for correctness. In some cases,
     * earlier attempts will have been made to add a zone to the destination,
     * but this function is the only one that is called in all (other) cases,
     * so we must do this here. */
    if (ip6_addr_lacks_zone(dest, IP6_UNKNOWN)) {
 8010e28:	7c22      	ldrb	r2, [r4, #16]
 8010e2a:	bb82      	cbnz	r2, 8010e8e <ip6_output_if_src+0x82>
 8010e2c:	6823      	ldr	r3, [r4, #0]
 8010e2e:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8010e32:	4019      	ands	r1, r3
 8010e34:	f248 00fe 	movw	r0, #33022	; 0x80fe
 8010e38:	4281      	cmp	r1, r0
 8010e3a:	d00a      	beq.n	8010e52 <ip6_output_if_src+0x46>
 8010e3c:	f648 70ff 	movw	r0, #36863	; 0x8fff
 8010e40:	4018      	ands	r0, r3
 8010e42:	f240 15ff 	movw	r5, #511	; 0x1ff
 8010e46:	42a8      	cmp	r0, r5
 8010e48:	d003      	beq.n	8010e52 <ip6_output_if_src+0x46>
 8010e4a:	f240 25ff 	movw	r5, #767	; 0x2ff
 8010e4e:	42a8      	cmp	r0, r5
 8010e50:	d11d      	bne.n	8010e8e <ip6_output_if_src+0x82>
      ip6_addr_copy(dest_addr, *dest);
 8010e52:	9301      	str	r3, [sp, #4]
 8010e54:	6860      	ldr	r0, [r4, #4]
 8010e56:	9002      	str	r0, [sp, #8]
 8010e58:	68a0      	ldr	r0, [r4, #8]
 8010e5a:	9003      	str	r0, [sp, #12]
 8010e5c:	68e0      	ldr	r0, [r4, #12]
 8010e5e:	9004      	str	r0, [sp, #16]
      ip6_addr_assign_zone(&dest_addr, IP6_UNKNOWN, netif);
 8010e60:	f248 00fe 	movw	r0, #33022	; 0x80fe
 8010e64:	4281      	cmp	r1, r0
 8010e66:	d00b      	beq.n	8010e80 <ip6_output_if_src+0x74>
 8010e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010e6c:	041b      	lsls	r3, r3, #16
 8010e6e:	0c1b      	lsrs	r3, r3, #16
 8010e70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8010e74:	428b      	cmp	r3, r1
 8010e76:	d003      	beq.n	8010e80 <ip6_output_if_src+0x74>
 8010e78:	f240 21ff 	movw	r1, #767	; 0x2ff
 8010e7c:	428b      	cmp	r3, r1
 8010e7e:	d103      	bne.n	8010e88 <ip6_output_if_src+0x7c>
 8010e80:	f898 20e2 	ldrb.w	r2, [r8, #226]	; 0xe2
 8010e84:	3201      	adds	r2, #1
 8010e86:	b2d2      	uxtb	r2, r2
 8010e88:	f88d 2014 	strb.w	r2, [sp, #20]
      dest = &dest_addr;
 8010e8c:	ac01      	add	r4, sp, #4
    }
#endif /* LWIP_IPV6_SCOPES */

    /* generate IPv6 header */
    if (pbuf_add_header(p, IP6_HLEN)) {
 8010e8e:	2128      	movs	r1, #40	; 0x28
 8010e90:	4630      	mov	r0, r6
 8010e92:	f7f6 fc2e 	bl	80076f2 <pbuf_add_header>
 8010e96:	2800      	cmp	r0, #0
 8010e98:	d179      	bne.n	8010f8e <ip6_output_if_src+0x182>
      LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip6_output: not enough room for IPv6 header in pbuf\n"));
      IP6_STATS_INC(ip6.err);
      return ERR_BUF;
    }

    ip6hdr = (struct ip6_hdr *)p->payload;
 8010e9a:	6875      	ldr	r5, [r6, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip6_hdr",
 8010e9c:	8973      	ldrh	r3, [r6, #10]
 8010e9e:	2b27      	cmp	r3, #39	; 0x27
 8010ea0:	d938      	bls.n	8010f14 <ip6_output_if_src+0x108>
               (p->len >= sizeof(struct ip6_hdr)));

    IP6H_HOPLIM_SET(ip6hdr, hl);
 8010ea2:	f885 9007 	strb.w	r9, [r5, #7]
    IP6H_NEXTH_SET(ip6hdr, nexth);
 8010ea6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8010eaa:	71ab      	strb	r3, [r5, #6]

    /* dest cannot be NULL here */
    ip6_addr_copy_to_packed(ip6hdr->dest, *dest);
 8010eac:	6823      	ldr	r3, [r4, #0]
 8010eae:	61ab      	str	r3, [r5, #24]
 8010eb0:	6863      	ldr	r3, [r4, #4]
 8010eb2:	61eb      	str	r3, [r5, #28]
 8010eb4:	68a3      	ldr	r3, [r4, #8]
 8010eb6:	622b      	str	r3, [r5, #32]
 8010eb8:	68e3      	ldr	r3, [r4, #12]
 8010eba:	626b      	str	r3, [r5, #36]	; 0x24

    IP6H_VTCFL_SET(ip6hdr, 6, tc, 0);
 8010ebc:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8010ec0:	0500      	lsls	r0, r0, #20
 8010ec2:	f040 40c0 	orr.w	r0, r0, #1610612736	; 0x60000000
 8010ec6:	f7f5 f958 	bl	800617a <lwip_htonl>
 8010eca:	6028      	str	r0, [r5, #0]
    IP6H_PLEN_SET(ip6hdr, (u16_t)(p->tot_len - IP6_HLEN));
 8010ecc:	8930      	ldrh	r0, [r6, #8]
 8010ece:	3828      	subs	r0, #40	; 0x28
 8010ed0:	b280      	uxth	r0, r0
 8010ed2:	f7f5 f94d 	bl	8006170 <lwip_htons>
 8010ed6:	80a8      	strh	r0, [r5, #4]

    if (src == NULL) {
 8010ed8:	b327      	cbz	r7, 8010f24 <ip6_output_if_src+0x118>
      src = IP6_ADDR_ANY6;
    }
    /* src cannot be NULL here */
    ip6_addr_copy_to_packed(ip6hdr->src, *src);
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	60ab      	str	r3, [r5, #8]
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	60eb      	str	r3, [r5, #12]
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	612b      	str	r3, [r5, #16]
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	616b      	str	r3, [r5, #20]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if LWIP_IPV6_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif_mtu6(netif) && (p->tot_len > nd6_get_destination_mtu(dest, netif))) {
 8010eea:	f8b8 30d6 	ldrh.w	r3, [r8, #214]	; 0xd6
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d140      	bne.n	8010f74 <ip6_output_if_src+0x168>
    return ip6_frag(p, netif, dest);
  }
#endif /* LWIP_IPV6_FRAG */

  LWIP_DEBUGF(IP6_DEBUG, ("netif->output_ip6()\n"));
  return netif->output_ip6(netif, p, dest);
 8010ef2:	f8d8 30bc 	ldr.w	r3, [r8, #188]	; 0xbc
 8010ef6:	4622      	mov	r2, r4
 8010ef8:	4631      	mov	r1, r6
 8010efa:	4640      	mov	r0, r8
 8010efc:	4798      	blx	r3
}
 8010efe:	b007      	add	sp, #28
 8010f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010f04:	4b23      	ldr	r3, [pc, #140]	; (8010f94 <ip6_output_if_src+0x188>)
 8010f06:	f240 429d 	movw	r2, #1181	; 0x49d
 8010f0a:	4923      	ldr	r1, [pc, #140]	; (8010f98 <ip6_output_if_src+0x18c>)
 8010f0c:	4823      	ldr	r0, [pc, #140]	; (8010f9c <ip6_output_if_src+0x190>)
 8010f0e:	f003 f991 	bl	8014234 <iprintf>
 8010f12:	e787      	b.n	8010e24 <ip6_output_if_src+0x18>
    LWIP_ASSERT("check that first pbuf can hold struct ip6_hdr",
 8010f14:	4b1f      	ldr	r3, [pc, #124]	; (8010f94 <ip6_output_if_src+0x188>)
 8010f16:	f240 42b7 	movw	r2, #1207	; 0x4b7
 8010f1a:	4921      	ldr	r1, [pc, #132]	; (8010fa0 <ip6_output_if_src+0x194>)
 8010f1c:	481f      	ldr	r0, [pc, #124]	; (8010f9c <ip6_output_if_src+0x190>)
 8010f1e:	f003 f989 	bl	8014234 <iprintf>
 8010f22:	e7be      	b.n	8010ea2 <ip6_output_if_src+0x96>
      src = IP6_ADDR_ANY6;
 8010f24:	4f1f      	ldr	r7, [pc, #124]	; (8010fa4 <ip6_output_if_src+0x198>)
 8010f26:	e7d8      	b.n	8010eda <ip6_output_if_src+0xce>
    ip6hdr = (struct ip6_hdr *)p->payload;
 8010f28:	6872      	ldr	r2, [r6, #4]
    ip6_addr_copy_from_packed(dest_addr, ip6hdr->dest);
 8010f2a:	6993      	ldr	r3, [r2, #24]
 8010f2c:	9301      	str	r3, [sp, #4]
 8010f2e:	69d1      	ldr	r1, [r2, #28]
 8010f30:	9102      	str	r1, [sp, #8]
 8010f32:	6a11      	ldr	r1, [r2, #32]
 8010f34:	9103      	str	r1, [sp, #12]
 8010f36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010f38:	9204      	str	r2, [sp, #16]
    ip6_addr_assign_zone(&dest_addr, IP6_UNKNOWN, netif);
 8010f3a:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8010f3e:	4019      	ands	r1, r3
 8010f40:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8010f44:	4291      	cmp	r1, r2
 8010f46:	d00d      	beq.n	8010f64 <ip6_output_if_src+0x158>
 8010f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010f4c:	041b      	lsls	r3, r3, #16
 8010f4e:	0c1b      	lsrs	r3, r3, #16
 8010f50:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010f54:	4293      	cmp	r3, r2
 8010f56:	d005      	beq.n	8010f64 <ip6_output_if_src+0x158>
 8010f58:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010f5c:	4293      	cmp	r3, r2
 8010f5e:	d001      	beq.n	8010f64 <ip6_output_if_src+0x158>
 8010f60:	2300      	movs	r3, #0
 8010f62:	e003      	b.n	8010f6c <ip6_output_if_src+0x160>
 8010f64:	f898 30e2 	ldrb.w	r3, [r8, #226]	; 0xe2
 8010f68:	3301      	adds	r3, #1
 8010f6a:	b2db      	uxtb	r3, r3
 8010f6c:	f88d 3014 	strb.w	r3, [sp, #20]
    dest = &dest_addr;
 8010f70:	ac01      	add	r4, sp, #4
 8010f72:	e7ba      	b.n	8010eea <ip6_output_if_src+0xde>
  if (netif_mtu6(netif) && (p->tot_len > nd6_get_destination_mtu(dest, netif))) {
 8010f74:	8935      	ldrh	r5, [r6, #8]
 8010f76:	4641      	mov	r1, r8
 8010f78:	4620      	mov	r0, r4
 8010f7a:	f002 ff03 	bl	8013d84 <nd6_get_destination_mtu>
 8010f7e:	4285      	cmp	r5, r0
 8010f80:	d9b7      	bls.n	8010ef2 <ip6_output_if_src+0xe6>
    return ip6_frag(p, netif, dest);
 8010f82:	4622      	mov	r2, r4
 8010f84:	4641      	mov	r1, r8
 8010f86:	4630      	mov	r0, r6
 8010f88:	f000 fb74 	bl	8011674 <ip6_frag>
 8010f8c:	e7b7      	b.n	8010efe <ip6_output_if_src+0xf2>
      return ERR_BUF;
 8010f8e:	f06f 0001 	mvn.w	r0, #1
 8010f92:	e7b4      	b.n	8010efe <ip6_output_if_src+0xf2>
 8010f94:	08017ba4 	.word	0x08017ba4
 8010f98:	08017898 	.word	0x08017898
 8010f9c:	08015418 	.word	0x08015418
 8010fa0:	08017bd8 	.word	0x08017bd8
 8010fa4:	08017c08 	.word	0x08017c08

08010fa8 <ip6_output_if>:
{
 8010fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010faa:	b085      	sub	sp, #20
 8010fac:	4607      	mov	r7, r0
 8010fae:	461c      	mov	r4, r3
 8010fb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (dest != LWIP_IP_HDRINCL) {
 8010fb2:	4616      	mov	r6, r2
 8010fb4:	b142      	cbz	r2, 8010fc8 <ip6_output_if+0x20>
    if (src != NULL && ip6_addr_isany(src)) {
 8010fb6:	b139      	cbz	r1, 8010fc8 <ip6_output_if+0x20>
 8010fb8:	680b      	ldr	r3, [r1, #0]
 8010fba:	b92b      	cbnz	r3, 8010fc8 <ip6_output_if+0x20>
 8010fbc:	684b      	ldr	r3, [r1, #4]
 8010fbe:	b91b      	cbnz	r3, 8010fc8 <ip6_output_if+0x20>
 8010fc0:	688b      	ldr	r3, [r1, #8]
 8010fc2:	b90b      	cbnz	r3, 8010fc8 <ip6_output_if+0x20>
 8010fc4:	68cb      	ldr	r3, [r1, #12]
 8010fc6:	b16b      	cbz	r3, 8010fe4 <ip6_output_if+0x3c>
  return ip6_output_if_src(p, src_used, dest, hl, tc, nexth, netif);
 8010fc8:	9502      	str	r5, [sp, #8]
 8010fca:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8010fce:	9301      	str	r3, [sp, #4]
 8010fd0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8010fd4:	9300      	str	r3, [sp, #0]
 8010fd6:	4623      	mov	r3, r4
 8010fd8:	4632      	mov	r2, r6
 8010fda:	4638      	mov	r0, r7
 8010fdc:	f7ff ff16 	bl	8010e0c <ip6_output_if_src>
}
 8010fe0:	b005      	add	sp, #20
 8010fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      src_used = ip_2_ip6(ip6_select_source_address(netif, dest));
 8010fe4:	4611      	mov	r1, r2
 8010fe6:	4628      	mov	r0, r5
 8010fe8:	f7ff fba6 	bl	8010738 <ip6_select_source_address>
 8010fec:	4601      	mov	r1, r0
      if ((src_used == NULL) || ip6_addr_isany(src_used)) {
 8010fee:	b170      	cbz	r0, 801100e <ip6_output_if+0x66>
 8010ff0:	6803      	ldr	r3, [r0, #0]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d1e8      	bne.n	8010fc8 <ip6_output_if+0x20>
 8010ff6:	6843      	ldr	r3, [r0, #4]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d1e5      	bne.n	8010fc8 <ip6_output_if+0x20>
 8010ffc:	6883      	ldr	r3, [r0, #8]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d1e2      	bne.n	8010fc8 <ip6_output_if+0x20>
 8011002:	68c3      	ldr	r3, [r0, #12]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d1df      	bne.n	8010fc8 <ip6_output_if+0x20>
        return ERR_RTE;
 8011008:	f06f 0003 	mvn.w	r0, #3
 801100c:	e7e8      	b.n	8010fe0 <ip6_output_if+0x38>
 801100e:	f06f 0003 	mvn.w	r0, #3
 8011012:	e7e5      	b.n	8010fe0 <ip6_output_if+0x38>

08011014 <ip6_options_add_hbh_ra>:
 * @param value the value of the router alert option data (e.g. IP6_ROUTER_ALERT_VALUE_MLD)
 * @return ERR_OK if hop-by-hop header was added, ERR_* otherwise
 */
err_t
ip6_options_add_hbh_ra(struct pbuf *p, u8_t nexth, u8_t value)
{
 8011014:	b570      	push	{r4, r5, r6, lr}
 8011016:	4606      	mov	r6, r0
 8011018:	460d      	mov	r5, r1
 801101a:	4614      	mov	r4, r2
  struct ip6_opt_hdr *opt_hdr;

  /* fixed 4 bytes for router alert option and 2 bytes padding */
  const u8_t hlen = (sizeof(struct ip6_opt_hdr) * 2) + IP6_ROUTER_ALERT_DLEN;
  /* Move pointer to make room for hop-by-hop options header. */
  if (pbuf_add_header(p, sizeof(struct ip6_hbh_hdr) + hlen)) {
 801101c:	2108      	movs	r1, #8
 801101e:	f7f6 fb68 	bl	80076f2 <pbuf_add_header>
 8011022:	b960      	cbnz	r0, 801103e <ip6_options_add_hbh_ra+0x2a>
    IP6_STATS_INC(ip6.err);
    return ERR_BUF;
  }

  /* Set fields of Hop-by-Hop header */
  hbh_hdr = (struct ip6_hbh_hdr *)p->payload;
 8011024:	6873      	ldr	r3, [r6, #4]
  IP6_HBH_NEXTH(hbh_hdr) = nexth;
 8011026:	701d      	strb	r5, [r3, #0]
  hbh_hdr->_hlen = 0;
 8011028:	7058      	strb	r0, [r3, #1]
  offset = IP6_HBH_HLEN;

  /* Set router alert options to Hop-by-Hop extended option header */
  opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + offset);
  IP6_OPT_TYPE(opt_hdr) = IP6_ROUTER_ALERT_OPTION;
 801102a:	2205      	movs	r2, #5
 801102c:	709a      	strb	r2, [r3, #2]
  IP6_OPT_DLEN(opt_hdr) = IP6_ROUTER_ALERT_DLEN;
 801102e:	2202      	movs	r2, #2
 8011030:	70da      	strb	r2, [r3, #3]
  offset += IP6_OPT_HLEN;

  /* Set router alert option data */
  opt_data = (u8_t *)hbh_hdr + offset;
  opt_data[0] = value;
 8011032:	711c      	strb	r4, [r3, #4]
  opt_data[1] = 0;
 8011034:	7158      	strb	r0, [r3, #5]
  offset += IP6_OPT_DLEN(opt_hdr);

  /* add 2 bytes padding to make 8 bytes Hop-by-Hop header length */
  opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + offset);
  IP6_OPT_TYPE(opt_hdr) = IP6_PADN_OPTION;
 8011036:	2101      	movs	r1, #1
 8011038:	7199      	strb	r1, [r3, #6]
  IP6_OPT_DLEN(opt_hdr) = 0;
 801103a:	71d8      	strb	r0, [r3, #7]

  return ERR_OK;
}
 801103c:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_BUF;
 801103e:	f06f 0001 	mvn.w	r0, #1
 8011042:	e7fb      	b.n	801103c <ip6_options_add_hbh_ra+0x28>

08011044 <ip6_reass_free_complete_datagram>:
 *
 * @param ipr datagram to free
 */
static void
ip6_reass_free_complete_datagram(struct ip6_reassdata *ipr)
{
 8011044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011048:	b08a      	sub	sp, #40	; 0x28
 801104a:	4607      	mov	r7, r0
  u16_t clen;
  struct pbuf *p;
  struct ip6_reass_helper *iprh;

#if LWIP_ICMP6
  iprh = (struct ip6_reass_helper *)ipr->p->payload;
 801104c:	6845      	ldr	r5, [r0, #4]
 801104e:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 8011050:	889a      	ldrh	r2, [r3, #4]
 8011052:	b112      	cbz	r2, 801105a <ip6_reass_free_complete_datagram+0x16>
  u16_t pbufs_freed = 0;
 8011054:	2600      	movs	r6, #0
  }
#endif /* LWIP_ICMP6 */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011056:	687d      	ldr	r5, [r7, #4]
  while (p != NULL) {
 8011058:	e044      	b.n	80110e4 <ip6_reass_free_complete_datagram+0xa0>
    ipr->p = iprh->next_pbuf;
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	6043      	str	r3, [r0, #4]
    MEMCPY(p->payload, ipr->orig_hdr, sizeof(iprh));
 801105e:	686b      	ldr	r3, [r5, #4]
 8011060:	68c2      	ldr	r2, [r0, #12]
 8011062:	601a      	str	r2, [r3, #0]
    if (pbuf_header_force(p, (s16_t)((u8_t*)p->payload - (u8_t*)ipr->iphdr))) {
 8011064:	6869      	ldr	r1, [r5, #4]
 8011066:	6883      	ldr	r3, [r0, #8]
 8011068:	1ac9      	subs	r1, r1, r3
 801106a:	b209      	sxth	r1, r1
 801106c:	4628      	mov	r0, r5
 801106e:	f7f6 fb8b 	bl	8007788 <pbuf_header_force>
 8011072:	b168      	cbz	r0, 8011090 <ip6_reass_free_complete_datagram+0x4c>
      LWIP_ASSERT("ip6_reass_free: moving p->payload to ip6 header failed\n", 0);
 8011074:	4b35      	ldr	r3, [pc, #212]	; (801114c <ip6_reass_free_complete_datagram+0x108>)
 8011076:	22a9      	movs	r2, #169	; 0xa9
 8011078:	4935      	ldr	r1, [pc, #212]	; (8011150 <ip6_reass_free_complete_datagram+0x10c>)
 801107a:	4836      	ldr	r0, [pc, #216]	; (8011154 <ip6_reass_free_complete_datagram+0x110>)
 801107c:	f003 f8da 	bl	8014234 <iprintf>
    clen = pbuf_clen(p);
 8011080:	4628      	mov	r0, r5
 8011082:	f7f6 fceb 	bl	8007a5c <pbuf_clen>
 8011086:	4606      	mov	r6, r0
    pbuf_free(p);
 8011088:	4628      	mov	r0, r5
 801108a:	f7f6 fb83 	bl	8007794 <pbuf_free>
 801108e:	e7e2      	b.n	8011056 <ip6_reass_free_complete_datagram+0x12>
      ip6_addr_copy_from_packed(src_addr, IPV6_FRAG_SRC(ipr));
 8011090:	68bb      	ldr	r3, [r7, #8]
 8011092:	689a      	ldr	r2, [r3, #8]
 8011094:	9200      	str	r2, [sp, #0]
 8011096:	68da      	ldr	r2, [r3, #12]
 8011098:	9201      	str	r2, [sp, #4]
 801109a:	691a      	ldr	r2, [r3, #16]
 801109c:	9202      	str	r2, [sp, #8]
 801109e:	695a      	ldr	r2, [r3, #20]
 80110a0:	9203      	str	r2, [sp, #12]
      ip6_addr_set_zone(&src_addr, ipr->src_zone);
 80110a2:	7f3a      	ldrb	r2, [r7, #28]
 80110a4:	f88d 2010 	strb.w	r2, [sp, #16]
      ip6_addr_copy_from_packed(dest_addr, IPV6_FRAG_DEST(ipr));
 80110a8:	699a      	ldr	r2, [r3, #24]
 80110aa:	9205      	str	r2, [sp, #20]
 80110ac:	69da      	ldr	r2, [r3, #28]
 80110ae:	9206      	str	r2, [sp, #24]
 80110b0:	6a1a      	ldr	r2, [r3, #32]
 80110b2:	9207      	str	r2, [sp, #28]
 80110b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110b6:	9308      	str	r3, [sp, #32]
      ip6_addr_set_zone(&dest_addr, ipr->dest_zone);
 80110b8:	7f7b      	ldrb	r3, [r7, #29]
 80110ba:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
      icmp6_time_exceeded_with_addrs(p, ICMP6_TE_FRAG, &src_addr, &dest_addr);
 80110be:	ab05      	add	r3, sp, #20
 80110c0:	466a      	mov	r2, sp
 80110c2:	2101      	movs	r1, #1
 80110c4:	4628      	mov	r0, r5
 80110c6:	f7ff f977 	bl	80103b8 <icmp6_time_exceeded_with_addrs>
 80110ca:	e7d9      	b.n	8011080 <ip6_reass_free_complete_datagram+0x3c>
    iprh = (struct ip6_reass_helper *)p->payload;
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
    clen = pbuf_clen(pcur);
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80110cc:	4b1f      	ldr	r3, [pc, #124]	; (801114c <ip6_reass_free_complete_datagram+0x108>)
 80110ce:	22c7      	movs	r2, #199	; 0xc7
 80110d0:	4921      	ldr	r1, [pc, #132]	; (8011158 <ip6_reass_free_complete_datagram+0x114>)
 80110d2:	4820      	ldr	r0, [pc, #128]	; (8011154 <ip6_reass_free_complete_datagram+0x110>)
 80110d4:	f003 f8ae 	bl	8014234 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80110d8:	4434      	add	r4, r6
 80110da:	b2a6      	uxth	r6, r4
    pbuf_free(pcur);
 80110dc:	4628      	mov	r0, r5
 80110de:	f7f6 fb59 	bl	8007794 <pbuf_free>
    p = iprh->next_pbuf;
 80110e2:	4645      	mov	r5, r8
  while (p != NULL) {
 80110e4:	b15d      	cbz	r5, 80110fe <ip6_reass_free_complete_datagram+0xba>
    iprh = (struct ip6_reass_helper *)p->payload;
 80110e6:	686b      	ldr	r3, [r5, #4]
    p = iprh->next_pbuf;
 80110e8:	f8d3 8000 	ldr.w	r8, [r3]
    clen = pbuf_clen(pcur);
 80110ec:	4628      	mov	r0, r5
 80110ee:	f7f6 fcb5 	bl	8007a5c <pbuf_clen>
 80110f2:	4604      	mov	r4, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80110f4:	1833      	adds	r3, r6, r0
 80110f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80110fa:	dbed      	blt.n	80110d8 <ip6_reass_free_complete_datagram+0x94>
 80110fc:	e7e6      	b.n	80110cc <ip6_reass_free_complete_datagram+0x88>
  }

  /* Then, unchain the struct ip6_reassdata from the list and free it. */
  if (ipr == reassdatagrams) {
 80110fe:	4b17      	ldr	r3, [pc, #92]	; (801115c <ip6_reass_free_complete_datagram+0x118>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	42bb      	cmp	r3, r7
 8011104:	d005      	beq.n	8011112 <ip6_reass_free_complete_datagram+0xce>
    reassdatagrams = ipr->next;
  } else {
    prev = reassdatagrams;
    while (prev != NULL) {
 8011106:	b143      	cbz	r3, 801111a <ip6_reass_free_complete_datagram+0xd6>
      if (prev->next == ipr) {
 8011108:	681a      	ldr	r2, [r3, #0]
 801110a:	42ba      	cmp	r2, r7
 801110c:	d005      	beq.n	801111a <ip6_reass_free_complete_datagram+0xd6>
        break;
      }
      prev = prev->next;
 801110e:	4613      	mov	r3, r2
 8011110:	e7f9      	b.n	8011106 <ip6_reass_free_complete_datagram+0xc2>
    reassdatagrams = ipr->next;
 8011112:	683a      	ldr	r2, [r7, #0]
 8011114:	4b11      	ldr	r3, [pc, #68]	; (801115c <ip6_reass_free_complete_datagram+0x118>)
 8011116:	601a      	str	r2, [r3, #0]
 8011118:	e002      	b.n	8011120 <ip6_reass_free_complete_datagram+0xdc>
    }
    if (prev != NULL) {
 801111a:	b10b      	cbz	r3, 8011120 <ip6_reass_free_complete_datagram+0xdc>
      prev->next = ipr->next;
 801111c:	683a      	ldr	r2, [r7, #0]
 801111e:	601a      	str	r2, [r3, #0]
    }
  }
  memp_free(MEMP_IP6_REASSDATA, ipr);
 8011120:	4639      	mov	r1, r7
 8011122:	2009      	movs	r0, #9
 8011124:	f7f5 fe92 	bl	8006e4c <memp_free>

  /* Finally, update number of pbufs in reassembly queue */
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip6_reass_pbufcount >= pbufs_freed);
 8011128:	4b0d      	ldr	r3, [pc, #52]	; (8011160 <ip6_reass_free_complete_datagram+0x11c>)
 801112a:	881b      	ldrh	r3, [r3, #0]
 801112c:	42b3      	cmp	r3, r6
 801112e:	d306      	bcc.n	801113e <ip6_reass_free_complete_datagram+0xfa>
  ip6_reass_pbufcount = (u16_t)(ip6_reass_pbufcount - pbufs_freed);
 8011130:	4b0b      	ldr	r3, [pc, #44]	; (8011160 <ip6_reass_free_complete_datagram+0x11c>)
 8011132:	881c      	ldrh	r4, [r3, #0]
 8011134:	1ba4      	subs	r4, r4, r6
 8011136:	801c      	strh	r4, [r3, #0]
}
 8011138:	b00a      	add	sp, #40	; 0x28
 801113a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip6_reass_pbufcount >= pbufs_freed);
 801113e:	4b03      	ldr	r3, [pc, #12]	; (801114c <ip6_reass_free_complete_datagram+0x108>)
 8011140:	22de      	movs	r2, #222	; 0xde
 8011142:	4908      	ldr	r1, [pc, #32]	; (8011164 <ip6_reass_free_complete_datagram+0x120>)
 8011144:	4803      	ldr	r0, [pc, #12]	; (8011154 <ip6_reass_free_complete_datagram+0x110>)
 8011146:	f003 f875 	bl	8014234 <iprintf>
 801114a:	e7f1      	b.n	8011130 <ip6_reass_free_complete_datagram+0xec>
 801114c:	08017c20 	.word	0x08017c20
 8011150:	08017c5c 	.word	0x08017c5c
 8011154:	08015418 	.word	0x08015418
 8011158:	0801797c 	.word	0x0801797c
 801115c:	200007a0 	.word	0x200007a0
 8011160:	2000079c 	.word	0x2000079c
 8011164:	08017a58 	.word	0x08017a58

08011168 <ip6_reass_remove_oldest_datagram>:
 * @param pbufs_needed number of pbufs needed to enqueue
 *        (used for freeing other datagrams if not enough space)
 */
static void
ip6_reass_remove_oldest_datagram(struct ip6_reassdata *ipr, int pbufs_needed)
{
 8011168:	b570      	push	{r4, r5, r6, lr}
 801116a:	4605      	mov	r5, r0
 801116c:	460e      	mov	r6, r1
 801116e:	e016      	b.n	801119e <ip6_reass_remove_oldest_datagram+0x36>
        if (r->timer <= oldest->timer) {
          /* older than the previous oldest */
          oldest = r;
        }
      }
      r = r->next;
 8011170:	681b      	ldr	r3, [r3, #0]
    while (r != NULL) {
 8011172:	b13b      	cbz	r3, 8011184 <ip6_reass_remove_oldest_datagram+0x1c>
      if (r != ipr) {
 8011174:	42ab      	cmp	r3, r5
 8011176:	d0fb      	beq.n	8011170 <ip6_reass_remove_oldest_datagram+0x8>
        if (r->timer <= oldest->timer) {
 8011178:	7edc      	ldrb	r4, [r3, #27]
 801117a:	7ec2      	ldrb	r2, [r0, #27]
 801117c:	4294      	cmp	r4, r2
 801117e:	d8f7      	bhi.n	8011170 <ip6_reass_remove_oldest_datagram+0x8>
          oldest = r;
 8011180:	4618      	mov	r0, r3
 8011182:	e7f5      	b.n	8011170 <ip6_reass_remove_oldest_datagram+0x8>
    }
    if (oldest == ipr) {
 8011184:	42a8      	cmp	r0, r5
 8011186:	d00e      	beq.n	80111a6 <ip6_reass_remove_oldest_datagram+0x3e>
      /* nothing to free, ipr is the only element on the list */
      return;
    }
    if (oldest != NULL) {
 8011188:	b108      	cbz	r0, 801118e <ip6_reass_remove_oldest_datagram+0x26>
      ip6_reass_free_complete_datagram(oldest);
 801118a:	f7ff ff5b 	bl	8011044 <ip6_reass_free_complete_datagram>
    }
  } while (((ip6_reass_pbufcount + pbufs_needed) > IP_REASS_MAX_PBUFS) && (reassdatagrams != NULL));
 801118e:	4b06      	ldr	r3, [pc, #24]	; (80111a8 <ip6_reass_remove_oldest_datagram+0x40>)
 8011190:	881b      	ldrh	r3, [r3, #0]
 8011192:	4433      	add	r3, r6
 8011194:	2b0a      	cmp	r3, #10
 8011196:	dd06      	ble.n	80111a6 <ip6_reass_remove_oldest_datagram+0x3e>
 8011198:	4b04      	ldr	r3, [pc, #16]	; (80111ac <ip6_reass_remove_oldest_datagram+0x44>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	b11b      	cbz	r3, 80111a6 <ip6_reass_remove_oldest_datagram+0x3e>
    r = oldest = reassdatagrams;
 801119e:	4b03      	ldr	r3, [pc, #12]	; (80111ac <ip6_reass_remove_oldest_datagram+0x44>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	4618      	mov	r0, r3
    while (r != NULL) {
 80111a4:	e7e5      	b.n	8011172 <ip6_reass_remove_oldest_datagram+0xa>
}
 80111a6:	bd70      	pop	{r4, r5, r6, pc}
 80111a8:	2000079c 	.word	0x2000079c
 80111ac:	200007a0 	.word	0x200007a0

080111b0 <ip6_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip6_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80111b0:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80111b2:	4604      	mov	r4, r0
 80111b4:	b120      	cbz	r0, 80111c0 <ip6_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 80111b6:	4621      	mov	r1, r4
 80111b8:	2005      	movs	r0, #5
 80111ba:	f7f5 fe47 	bl	8006e4c <memp_free>
}
 80111be:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80111c0:	4b03      	ldr	r3, [pc, #12]	; (80111d0 <ip6_frag_free_pbuf_custom_ref+0x20>)
 80111c2:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 80111c6:	4903      	ldr	r1, [pc, #12]	; (80111d4 <ip6_frag_free_pbuf_custom_ref+0x24>)
 80111c8:	4803      	ldr	r0, [pc, #12]	; (80111d8 <ip6_frag_free_pbuf_custom_ref+0x28>)
 80111ca:	f003 f833 	bl	8014234 <iprintf>
 80111ce:	e7f2      	b.n	80111b6 <ip6_frag_free_pbuf_custom_ref+0x6>
 80111d0:	08017c20 	.word	0x08017c20
 80111d4:	080172a8 	.word	0x080172a8
 80111d8:	08015418 	.word	0x08015418

080111dc <ip6_frag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ip6_frag_free_pbuf_custom(struct pbuf *p)
{
 80111dc:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80111de:	4604      	mov	r4, r0
 80111e0:	b138      	cbz	r0, 80111f2 <ip6_frag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 80111e2:	6960      	ldr	r0, [r4, #20]
 80111e4:	b108      	cbz	r0, 80111ea <ip6_frag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 80111e6:	f7f6 fad5 	bl	8007794 <pbuf_free>
  }
  ip6_frag_free_pbuf_custom_ref(pcr);
 80111ea:	4620      	mov	r0, r4
 80111ec:	f7ff ffe0 	bl	80111b0 <ip6_frag_free_pbuf_custom_ref>
}
 80111f0:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80111f2:	4b04      	ldr	r3, [pc, #16]	; (8011204 <ip6_frag_free_pbuf_custom+0x28>)
 80111f4:	f240 22ba 	movw	r2, #698	; 0x2ba
 80111f8:	4903      	ldr	r1, [pc, #12]	; (8011208 <ip6_frag_free_pbuf_custom+0x2c>)
 80111fa:	4804      	ldr	r0, [pc, #16]	; (801120c <ip6_frag_free_pbuf_custom+0x30>)
 80111fc:	f003 f81a 	bl	8014234 <iprintf>
 8011200:	e7ef      	b.n	80111e2 <ip6_frag_free_pbuf_custom+0x6>
 8011202:	bf00      	nop
 8011204:	08017c20 	.word	0x08017c20
 8011208:	080179c0 	.word	0x080179c0
 801120c:	08015418 	.word	0x08015418

08011210 <ip6_frag_alloc_pbuf_custom_ref>:
{
 8011210:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8011212:	2005      	movs	r0, #5
 8011214:	f7f5 fe00 	bl	8006e18 <memp_malloc>
}
 8011218:	bd08      	pop	{r3, pc}
	...

0801121c <ip6_reass_tmr>:
  r = reassdatagrams;
 801121c:	4b0c      	ldr	r3, [pc, #48]	; (8011250 <ip6_reass_tmr+0x34>)
 801121e:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8011220:	b130      	cbz	r0, 8011230 <ip6_reass_tmr+0x14>
    if (r->timer > 0) {
 8011222:	7ec3      	ldrb	r3, [r0, #27]
 8011224:	b12b      	cbz	r3, 8011232 <ip6_reass_tmr+0x16>
      r->timer--;
 8011226:	3b01      	subs	r3, #1
 8011228:	76c3      	strb	r3, [r0, #27]
      r = r->next;
 801122a:	6800      	ldr	r0, [r0, #0]
 801122c:	e7f8      	b.n	8011220 <ip6_reass_tmr+0x4>
}
 801122e:	bd10      	pop	{r4, pc}
 8011230:	4770      	bx	lr
{
 8011232:	b510      	push	{r4, lr}
      r = r->next;
 8011234:	6804      	ldr	r4, [r0, #0]
      ip6_reass_free_complete_datagram(tmp);
 8011236:	f7ff ff05 	bl	8011044 <ip6_reass_free_complete_datagram>
      r = r->next;
 801123a:	4620      	mov	r0, r4
  while (r != NULL) {
 801123c:	2800      	cmp	r0, #0
 801123e:	d0f6      	beq.n	801122e <ip6_reass_tmr+0x12>
    if (r->timer > 0) {
 8011240:	7ec3      	ldrb	r3, [r0, #27]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d0f6      	beq.n	8011234 <ip6_reass_tmr+0x18>
      r->timer--;
 8011246:	3b01      	subs	r3, #1
 8011248:	76c3      	strb	r3, [r0, #27]
      r = r->next;
 801124a:	6800      	ldr	r0, [r0, #0]
 801124c:	e7f6      	b.n	801123c <ip6_reass_tmr+0x20>
 801124e:	bf00      	nop
 8011250:	200007a0 	.word	0x200007a0

08011254 <ip6_reass>:
{
 8011254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011258:	b085      	sub	sp, #20
 801125a:	4680      	mov	r8, r0
  LWIP_ASSERT("IPv6 fragment header does not fit in first pbuf",
 801125c:	8943      	ldrh	r3, [r0, #10]
 801125e:	2b07      	cmp	r3, #7
 8011260:	d92f      	bls.n	80112c2 <ip6_reass+0x6e>
  frag_hdr = (struct ip6_frag_hdr *) p->payload;
 8011262:	f8d8 6004 	ldr.w	r6, [r8, #4]
  clen = pbuf_clen(p);
 8011266:	4640      	mov	r0, r8
 8011268:	f7f6 fbf8 	bl	8007a5c <pbuf_clen>
 801126c:	4682      	mov	sl, r0
  offset = lwip_ntohs(frag_hdr->_fragment_offset);
 801126e:	8870      	ldrh	r0, [r6, #2]
 8011270:	f7f4 ff7e 	bl	8006170 <lwip_htons>
 8011274:	9001      	str	r0, [sp, #4]
  len = lwip_ntohs(ip6_current_header()->_plen);
 8011276:	4da8      	ldr	r5, [pc, #672]	; (8011518 <ip6_reass+0x2c4>)
 8011278:	68eb      	ldr	r3, [r5, #12]
 801127a:	8898      	ldrh	r0, [r3, #4]
 801127c:	f7f4 ff78 	bl	8006170 <lwip_htons>
 8011280:	4681      	mov	r9, r0
  hdrdiff = (u8_t*)p->payload - (const u8_t*)ip6_current_header();
 8011282:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8011286:	68eb      	ldr	r3, [r5, #12]
 8011288:	1ae4      	subs	r4, r4, r3
  LWIP_ASSERT("not a valid pbuf (ip6_input check missing?)", hdrdiff <= 0xFFFF);
 801128a:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 801128e:	da20      	bge.n	80112d2 <ip6_reass+0x7e>
  LWIP_ASSERT("not a valid pbuf (ip6_input check missing?)", hdrdiff >= IP6_HLEN);
 8011290:	2c27      	cmp	r4, #39	; 0x27
 8011292:	dd26      	ble.n	80112e2 <ip6_reass+0x8e>
  hdrdiff += IP6_FRAG_HLEN;
 8011294:	3c20      	subs	r4, #32
  if (hdrdiff > len) {
 8011296:	45a1      	cmp	r9, r4
 8011298:	f2c0 80c7 	blt.w	801142a <ip6_reass+0x1d6>
  len = (u16_t)(len - hdrdiff);
 801129c:	b2a4      	uxth	r4, r4
 801129e:	eba9 0404 	sub.w	r4, r9, r4
 80112a2:	fa1f f984 	uxth.w	r9, r4
  start = (offset & IP6_FRAG_OFFSET_MASK);
 80112a6:	9b01      	ldr	r3, [sp, #4]
 80112a8:	f023 0707 	bic.w	r7, r3, #7
 80112ac:	b2bf      	uxth	r7, r7
  if (start > (0xFFFF - len)) {
 80112ae:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 80112b2:	33ff      	adds	r3, #255	; 0xff
 80112b4:	429f      	cmp	r7, r3
 80112b6:	f300 80b8 	bgt.w	801142a <ip6_reass+0x1d6>
  for (ipr = reassdatagrams, ipr_prev = NULL; ipr != NULL; ipr = ipr->next) {
 80112ba:	4b98      	ldr	r3, [pc, #608]	; (801151c <ip6_reass+0x2c8>)
 80112bc:	681c      	ldr	r4, [r3, #0]
 80112be:	2500      	movs	r5, #0
 80112c0:	e019      	b.n	80112f6 <ip6_reass+0xa2>
  LWIP_ASSERT("IPv6 fragment header does not fit in first pbuf",
 80112c2:	4b97      	ldr	r3, [pc, #604]	; (8011520 <ip6_reass+0x2cc>)
 80112c4:	f44f 728f 	mov.w	r2, #286	; 0x11e
 80112c8:	4996      	ldr	r1, [pc, #600]	; (8011524 <ip6_reass+0x2d0>)
 80112ca:	4897      	ldr	r0, [pc, #604]	; (8011528 <ip6_reass+0x2d4>)
 80112cc:	f002 ffb2 	bl	8014234 <iprintf>
 80112d0:	e7c7      	b.n	8011262 <ip6_reass+0xe>
  LWIP_ASSERT("not a valid pbuf (ip6_input check missing?)", hdrdiff <= 0xFFFF);
 80112d2:	4b93      	ldr	r3, [pc, #588]	; (8011520 <ip6_reass+0x2cc>)
 80112d4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80112d8:	4994      	ldr	r1, [pc, #592]	; (801152c <ip6_reass+0x2d8>)
 80112da:	4893      	ldr	r0, [pc, #588]	; (8011528 <ip6_reass+0x2d4>)
 80112dc:	f002 ffaa 	bl	8014234 <iprintf>
 80112e0:	e7d6      	b.n	8011290 <ip6_reass+0x3c>
  LWIP_ASSERT("not a valid pbuf (ip6_input check missing?)", hdrdiff >= IP6_HLEN);
 80112e2:	4b8f      	ldr	r3, [pc, #572]	; (8011520 <ip6_reass+0x2cc>)
 80112e4:	f240 122d 	movw	r2, #301	; 0x12d
 80112e8:	4990      	ldr	r1, [pc, #576]	; (801152c <ip6_reass+0x2d8>)
 80112ea:	488f      	ldr	r0, [pc, #572]	; (8011528 <ip6_reass+0x2d4>)
 80112ec:	f002 ffa2 	bl	8014234 <iprintf>
 80112f0:	e7d0      	b.n	8011294 <ip6_reass+0x40>
    ipr_prev = ipr;
 80112f2:	4625      	mov	r5, r4
  for (ipr = reassdatagrams, ipr_prev = NULL; ipr != NULL; ipr = ipr->next) {
 80112f4:	6824      	ldr	r4, [r4, #0]
 80112f6:	2c00      	cmp	r4, #0
 80112f8:	d038      	beq.n	801136c <ip6_reass+0x118>
    if ((frag_hdr->_identification == ipr->identification) &&
 80112fa:	6872      	ldr	r2, [r6, #4]
 80112fc:	6963      	ldr	r3, [r4, #20]
 80112fe:	429a      	cmp	r2, r3
 8011300:	d1f7      	bne.n	80112f2 <ip6_reass+0x9e>
        ip6_addr_cmp_packed(ip6_current_src_addr(), &(IPV6_FRAG_SRC(ipr)), ipr->src_zone) &&
 8011302:	4b85      	ldr	r3, [pc, #532]	; (8011518 <ip6_reass+0x2c4>)
 8011304:	6959      	ldr	r1, [r3, #20]
 8011306:	68a3      	ldr	r3, [r4, #8]
 8011308:	689a      	ldr	r2, [r3, #8]
    if ((frag_hdr->_identification == ipr->identification) &&
 801130a:	4291      	cmp	r1, r2
 801130c:	d1f1      	bne.n	80112f2 <ip6_reass+0x9e>
        ip6_addr_cmp_packed(ip6_current_src_addr(), &(IPV6_FRAG_SRC(ipr)), ipr->src_zone) &&
 801130e:	4a82      	ldr	r2, [pc, #520]	; (8011518 <ip6_reass+0x2c4>)
 8011310:	6991      	ldr	r1, [r2, #24]
 8011312:	68da      	ldr	r2, [r3, #12]
 8011314:	4291      	cmp	r1, r2
 8011316:	d1ec      	bne.n	80112f2 <ip6_reass+0x9e>
 8011318:	4a7f      	ldr	r2, [pc, #508]	; (8011518 <ip6_reass+0x2c4>)
 801131a:	69d1      	ldr	r1, [r2, #28]
 801131c:	691a      	ldr	r2, [r3, #16]
 801131e:	4291      	cmp	r1, r2
 8011320:	d1e7      	bne.n	80112f2 <ip6_reass+0x9e>
 8011322:	4a7d      	ldr	r2, [pc, #500]	; (8011518 <ip6_reass+0x2c4>)
 8011324:	6a11      	ldr	r1, [r2, #32]
 8011326:	695a      	ldr	r2, [r3, #20]
 8011328:	4291      	cmp	r1, r2
 801132a:	d1e2      	bne.n	80112f2 <ip6_reass+0x9e>
 801132c:	4a7a      	ldr	r2, [pc, #488]	; (8011518 <ip6_reass+0x2c4>)
 801132e:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
 8011332:	7f22      	ldrb	r2, [r4, #28]
 8011334:	4291      	cmp	r1, r2
 8011336:	d1dc      	bne.n	80112f2 <ip6_reass+0x9e>
        ip6_addr_cmp_packed(ip6_current_dest_addr(), &(IPV6_FRAG_DEST(ipr)), ipr->dest_zone)) {
 8011338:	4a77      	ldr	r2, [pc, #476]	; (8011518 <ip6_reass+0x2c4>)
 801133a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801133c:	699a      	ldr	r2, [r3, #24]
        ip6_addr_cmp_packed(ip6_current_src_addr(), &(IPV6_FRAG_SRC(ipr)), ipr->src_zone) &&
 801133e:	4291      	cmp	r1, r2
 8011340:	d1d7      	bne.n	80112f2 <ip6_reass+0x9e>
        ip6_addr_cmp_packed(ip6_current_dest_addr(), &(IPV6_FRAG_DEST(ipr)), ipr->dest_zone)) {
 8011342:	4a75      	ldr	r2, [pc, #468]	; (8011518 <ip6_reass+0x2c4>)
 8011344:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8011346:	69da      	ldr	r2, [r3, #28]
 8011348:	4291      	cmp	r1, r2
 801134a:	d1d2      	bne.n	80112f2 <ip6_reass+0x9e>
 801134c:	4a72      	ldr	r2, [pc, #456]	; (8011518 <ip6_reass+0x2c4>)
 801134e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8011350:	6a1a      	ldr	r2, [r3, #32]
 8011352:	4291      	cmp	r1, r2
 8011354:	d1cd      	bne.n	80112f2 <ip6_reass+0x9e>
 8011356:	4a70      	ldr	r2, [pc, #448]	; (8011518 <ip6_reass+0x2c4>)
 8011358:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801135a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801135c:	429a      	cmp	r2, r3
 801135e:	d1c8      	bne.n	80112f2 <ip6_reass+0x9e>
 8011360:	4b6d      	ldr	r3, [pc, #436]	; (8011518 <ip6_reass+0x2c4>)
 8011362:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8011366:	7f63      	ldrb	r3, [r4, #29]
 8011368:	429a      	cmp	r2, r3
 801136a:	d1c2      	bne.n	80112f2 <ip6_reass+0x9e>
  if (ipr == NULL) {
 801136c:	b18c      	cbz	r4, 8011392 <ip6_reass+0x13e>
  if ((ip6_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801136e:	4b70      	ldr	r3, [pc, #448]	; (8011530 <ip6_reass+0x2dc>)
 8011370:	881b      	ldrh	r3, [r3, #0]
 8011372:	4453      	add	r3, sl
 8011374:	2b0a      	cmp	r3, #10
 8011376:	dc3e      	bgt.n	80113f6 <ip6_reass+0x1a2>
  iprh = (struct ip6_reass_helper *)p->payload;
 8011378:	f8d8 6004 	ldr.w	r6, [r8, #4]
  end = (u16_t)(start + len);
 801137c:	44b9      	add	r9, r7
 801137e:	fa1f f389 	uxth.w	r3, r9
 8011382:	9302      	str	r3, [sp, #8]
  for (q = ipr->p; q != NULL;) {
 8011384:	6863      	ldr	r3, [r4, #4]
  u8_t valid = 1;
 8011386:	f04f 0901 	mov.w	r9, #1
  struct ip6_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 801138a:	f04f 0b00 	mov.w	fp, #0
 801138e:	4658      	mov	r0, fp
  for (q = ipr->p; q != NULL;) {
 8011390:	e060      	b.n	8011454 <ip6_reass+0x200>
    ipr = (struct ip6_reassdata *)memp_malloc(MEMP_IP6_REASSDATA);
 8011392:	2009      	movs	r0, #9
 8011394:	f7f5 fd40 	bl	8006e18 <memp_malloc>
    if (ipr == NULL) {
 8011398:	4604      	mov	r4, r0
 801139a:	b1d8      	cbz	r0, 80113d4 <ip6_reass+0x180>
    memset(ipr, 0, sizeof(struct ip6_reassdata));
 801139c:	2300      	movs	r3, #0
 801139e:	6063      	str	r3, [r4, #4]
 80113a0:	60a3      	str	r3, [r4, #8]
 80113a2:	60e3      	str	r3, [r4, #12]
 80113a4:	6123      	str	r3, [r4, #16]
 80113a6:	6163      	str	r3, [r4, #20]
 80113a8:	61a3      	str	r3, [r4, #24]
 80113aa:	61e3      	str	r3, [r4, #28]
    ipr->timer = IPV6_REASS_MAXAGE;
 80113ac:	233c      	movs	r3, #60	; 0x3c
 80113ae:	76e3      	strb	r3, [r4, #27]
    ipr->next = reassdatagrams;
 80113b0:	4b5a      	ldr	r3, [pc, #360]	; (801151c <ip6_reass+0x2c8>)
 80113b2:	681a      	ldr	r2, [r3, #0]
 80113b4:	6022      	str	r2, [r4, #0]
    reassdatagrams = ipr;
 80113b6:	601c      	str	r4, [r3, #0]
    ipr->iphdr = ip_data.current_ip6_header;
 80113b8:	4b57      	ldr	r3, [pc, #348]	; (8011518 <ip6_reass+0x2c4>)
 80113ba:	68da      	ldr	r2, [r3, #12]
 80113bc:	60a2      	str	r2, [r4, #8]
    ipr->src_zone = ip6_addr_zone(ip6_current_src_addr());
 80113be:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80113c2:	7722      	strb	r2, [r4, #28]
    ipr->dest_zone = ip6_addr_zone(ip6_current_dest_addr());
 80113c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80113c8:	7763      	strb	r3, [r4, #29]
    ipr->identification = frag_hdr->_identification;
 80113ca:	6873      	ldr	r3, [r6, #4]
 80113cc:	6163      	str	r3, [r4, #20]
    ipr->nexth = frag_hdr->_nexth;
 80113ce:	7833      	ldrb	r3, [r6, #0]
 80113d0:	76a3      	strb	r3, [r4, #26]
 80113d2:	e7cc      	b.n	801136e <ip6_reass+0x11a>
      ip6_reass_remove_oldest_datagram(ipr, clen);
 80113d4:	4651      	mov	r1, sl
 80113d6:	f7ff fec7 	bl	8011168 <ip6_reass_remove_oldest_datagram>
      ipr = (struct ip6_reassdata *)memp_malloc(MEMP_IP6_REASSDATA);
 80113da:	2009      	movs	r0, #9
 80113dc:	f7f5 fd1c 	bl	8006e18 <memp_malloc>
      if (ipr != NULL) {
 80113e0:	4604      	mov	r4, r0
 80113e2:	b310      	cbz	r0, 801142a <ip6_reass+0x1d6>
        for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80113e4:	4b4d      	ldr	r3, [pc, #308]	; (801151c <ip6_reass+0x2c8>)
 80113e6:	681d      	ldr	r5, [r3, #0]
 80113e8:	2d00      	cmp	r5, #0
 80113ea:	d0d7      	beq.n	801139c <ip6_reass+0x148>
          if (ipr_prev->next == ipr) {
 80113ec:	682b      	ldr	r3, [r5, #0]
 80113ee:	42a3      	cmp	r3, r4
 80113f0:	d0d4      	beq.n	801139c <ip6_reass+0x148>
        for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80113f2:	461d      	mov	r5, r3
 80113f4:	e7f8      	b.n	80113e8 <ip6_reass+0x194>
    ip6_reass_remove_oldest_datagram(ipr, clen);
 80113f6:	4651      	mov	r1, sl
 80113f8:	4620      	mov	r0, r4
 80113fa:	f7ff feb5 	bl	8011168 <ip6_reass_remove_oldest_datagram>
    if ((ip6_reass_pbufcount + clen) <= IP_REASS_MAX_PBUFS) {
 80113fe:	4b4c      	ldr	r3, [pc, #304]	; (8011530 <ip6_reass+0x2dc>)
 8011400:	881b      	ldrh	r3, [r3, #0]
 8011402:	4453      	add	r3, sl
 8011404:	2b0a      	cmp	r3, #10
 8011406:	dc10      	bgt.n	801142a <ip6_reass+0x1d6>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011408:	4b44      	ldr	r3, [pc, #272]	; (801151c <ip6_reass+0x2c8>)
 801140a:	681d      	ldr	r5, [r3, #0]
 801140c:	2d00      	cmp	r5, #0
 801140e:	d0b3      	beq.n	8011378 <ip6_reass+0x124>
        if (ipr_prev->next == ipr) {
 8011410:	682b      	ldr	r3, [r5, #0]
 8011412:	42a3      	cmp	r3, r4
 8011414:	d0b0      	beq.n	8011378 <ip6_reass+0x124>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011416:	461d      	mov	r5, r3
 8011418:	e7f8      	b.n	801140c <ip6_reass+0x1b8>
 801141a:	4683      	mov	fp, r0
      if (end > iprh_tmp->start) {
 801141c:	9a02      	ldr	r2, [sp, #8]
 801141e:	4291      	cmp	r1, r2
 8011420:	d303      	bcc.n	801142a <ip6_reass+0x1d6>
      if (iprh_prev != NULL) {
 8011422:	b150      	cbz	r0, 801143a <ip6_reass+0x1e6>
        if (start < iprh_prev->end) {
 8011424:	88c2      	ldrh	r2, [r0, #6]
 8011426:	42ba      	cmp	r2, r7
 8011428:	d907      	bls.n	801143a <ip6_reass+0x1e6>
  pbuf_free(p);
 801142a:	4640      	mov	r0, r8
 801142c:	f7f6 f9b2 	bl	8007794 <pbuf_free>
  return NULL;
 8011430:	2700      	movs	r7, #0
}
 8011432:	4638      	mov	r0, r7
 8011434:	b005      	add	sp, #20
 8011436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev != NULL) {
 801143a:	f1bb 0f00 	cmp.w	fp, #0
 801143e:	d003      	beq.n	8011448 <ip6_reass+0x1f4>
        iprh_prev->next_pbuf = p;
 8011440:	f8cb 8000 	str.w	r8, [fp]
      next_pbuf = q;
 8011444:	9303      	str	r3, [sp, #12]
 8011446:	e019      	b.n	801147c <ip6_reass+0x228>
        ipr->p = p;
 8011448:	f8c4 8004 	str.w	r8, [r4, #4]
      next_pbuf = q;
 801144c:	9303      	str	r3, [sp, #12]
 801144e:	e015      	b.n	801147c <ip6_reass+0x228>
    q = iprh_tmp->next_pbuf;
 8011450:	6813      	ldr	r3, [r2, #0]
    iprh_prev = iprh_tmp;
 8011452:	4610      	mov	r0, r2
  for (q = ipr->p; q != NULL;) {
 8011454:	b183      	cbz	r3, 8011478 <ip6_reass+0x224>
    iprh_tmp = (struct ip6_reass_helper*)q->payload;
 8011456:	685a      	ldr	r2, [r3, #4]
    if (start < iprh_tmp->start) {
 8011458:	8891      	ldrh	r1, [r2, #4]
 801145a:	42b9      	cmp	r1, r7
 801145c:	d8dd      	bhi.n	801141a <ip6_reass+0x1c6>
    } else if (start == iprh_tmp->start) {
 801145e:	42b9      	cmp	r1, r7
 8011460:	d0e3      	beq.n	801142a <ip6_reass+0x1d6>
    } else if (start < iprh_tmp->end) {
 8011462:	88d3      	ldrh	r3, [r2, #6]
 8011464:	42bb      	cmp	r3, r7
 8011466:	d8e0      	bhi.n	801142a <ip6_reass+0x1d6>
      if (iprh_prev != NULL) {
 8011468:	2800      	cmp	r0, #0
 801146a:	d0f1      	beq.n	8011450 <ip6_reass+0x1fc>
        if (iprh_prev->end != iprh_tmp->start) {
 801146c:	88c3      	ldrh	r3, [r0, #6]
 801146e:	4299      	cmp	r1, r3
 8011470:	d0ee      	beq.n	8011450 <ip6_reass+0x1fc>
          valid = 0;
 8011472:	f04f 0900 	mov.w	r9, #0
 8011476:	e7eb      	b.n	8011450 <ip6_reass+0x1fc>
 8011478:	4683      	mov	fp, r0
  next_pbuf = NULL;
 801147a:	9303      	str	r3, [sp, #12]
  if (q == NULL) {
 801147c:	b343      	cbz	r3, 80114d0 <ip6_reass+0x27c>
  ip6_reass_pbufcount = (u16_t)(ip6_reass_pbufcount + clen);
 801147e:	4b2c      	ldr	r3, [pc, #176]	; (8011530 <ip6_reass+0x2dc>)
 8011480:	881a      	ldrh	r2, [r3, #0]
 8011482:	4492      	add	sl, r2
 8011484:	f8a3 a000 	strh.w	sl, [r3]
  if (start == 0) {
 8011488:	2f00      	cmp	r7, #0
 801148a:	d057      	beq.n	801153c <ip6_reass+0x2e8>
  iprh->next_pbuf = next_pbuf;
 801148c:	9b03      	ldr	r3, [sp, #12]
 801148e:	6033      	str	r3, [r6, #0]
  iprh->start = start;
 8011490:	80b7      	strh	r7, [r6, #4]
  iprh->end = end;
 8011492:	9b02      	ldr	r3, [sp, #8]
 8011494:	80f3      	strh	r3, [r6, #6]
  if ((offset & IP6_FRAG_MORE_FLAG) == 0) {
 8011496:	9a01      	ldr	r2, [sp, #4]
 8011498:	f012 0f01 	tst.w	r2, #1
 801149c:	d100      	bne.n	80114a0 <ip6_reass+0x24c>
    ipr->datagram_len = iprh->end;
 801149e:	8323      	strh	r3, [r4, #24]
  iprh_tmp = (struct ip6_reass_helper*)ipr->p->payload;
 80114a0:	6863      	ldr	r3, [r4, #4]
 80114a2:	685f      	ldr	r7, [r3, #4]
  if (iprh_tmp->start != 0) {
 80114a4:	88bb      	ldrh	r3, [r7, #4]
 80114a6:	b10b      	cbz	r3, 80114ac <ip6_reass+0x258>
    valid = 0;
 80114a8:	f04f 0900 	mov.w	r9, #0
  if (ipr->datagram_len == 0) {
 80114ac:	8b23      	ldrh	r3, [r4, #24]
 80114ae:	b90b      	cbnz	r3, 80114b4 <ip6_reass+0x260>
    valid = 0;
 80114b0:	f04f 0900 	mov.w	r9, #0
  q = iprh->next_pbuf;
 80114b4:	6832      	ldr	r2, [r6, #0]
  while ((q != NULL) && valid) {
 80114b6:	4648      	mov	r0, r9
 80114b8:	2a00      	cmp	r2, #0
 80114ba:	d04e      	beq.n	801155a <ip6_reass+0x306>
 80114bc:	2800      	cmp	r0, #0
 80114be:	d047      	beq.n	8011550 <ip6_reass+0x2fc>
    iprh = (struct ip6_reass_helper*)q->payload;
 80114c0:	6853      	ldr	r3, [r2, #4]
    if (iprh_prev->end != iprh->start) {
 80114c2:	88f1      	ldrh	r1, [r6, #6]
 80114c4:	889a      	ldrh	r2, [r3, #4]
 80114c6:	4291      	cmp	r1, r2
 80114c8:	d144      	bne.n	8011554 <ip6_reass+0x300>
    q = iprh->next_pbuf;
 80114ca:	681a      	ldr	r2, [r3, #0]
    iprh_prev = iprh;
 80114cc:	461e      	mov	r6, r3
 80114ce:	e7f3      	b.n	80114b8 <ip6_reass+0x264>
    if (iprh_prev != NULL) {
 80114d0:	f1bb 0f00 	cmp.w	fp, #0
 80114d4:	d014      	beq.n	8011500 <ip6_reass+0x2ac>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= start);
 80114d6:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 80114da:	42bb      	cmp	r3, r7
 80114dc:	d808      	bhi.n	80114f0 <ip6_reass+0x29c>
      iprh_prev->next_pbuf = p;
 80114de:	f8cb 8000 	str.w	r8, [fp]
      if (iprh_prev->end != start) {
 80114e2:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 80114e6:	42bb      	cmp	r3, r7
 80114e8:	d0c9      	beq.n	801147e <ip6_reass+0x22a>
        valid = 0;
 80114ea:	f04f 0900 	mov.w	r9, #0
 80114ee:	e7c6      	b.n	801147e <ip6_reass+0x22a>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= start);
 80114f0:	4b0b      	ldr	r3, [pc, #44]	; (8011520 <ip6_reass+0x2cc>)
 80114f2:	f240 12e9 	movw	r2, #489	; 0x1e9
 80114f6:	490f      	ldr	r1, [pc, #60]	; (8011534 <ip6_reass+0x2e0>)
 80114f8:	480b      	ldr	r0, [pc, #44]	; (8011528 <ip6_reass+0x2d4>)
 80114fa:	f002 fe9b 	bl	8014234 <iprintf>
 80114fe:	e7ee      	b.n	80114de <ip6_reass+0x28a>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011500:	6863      	ldr	r3, [r4, #4]
 8011502:	b133      	cbz	r3, 8011512 <ip6_reass+0x2be>
 8011504:	4b06      	ldr	r3, [pc, #24]	; (8011520 <ip6_reass+0x2cc>)
 8011506:	f240 12f1 	movw	r2, #497	; 0x1f1
 801150a:	490b      	ldr	r1, [pc, #44]	; (8011538 <ip6_reass+0x2e4>)
 801150c:	4806      	ldr	r0, [pc, #24]	; (8011528 <ip6_reass+0x2d4>)
 801150e:	f002 fe91 	bl	8014234 <iprintf>
      ipr->p = p;
 8011512:	f8c4 8004 	str.w	r8, [r4, #4]
 8011516:	e7b2      	b.n	801147e <ip6_reass+0x22a>
 8011518:	200039e8 	.word	0x200039e8
 801151c:	200007a0 	.word	0x200007a0
 8011520:	08017c20 	.word	0x08017c20
 8011524:	08017c94 	.word	0x08017c94
 8011528:	08015418 	.word	0x08015418
 801152c:	08017cc4 	.word	0x08017cc4
 8011530:	2000079c 	.word	0x2000079c
 8011534:	080179cc 	.word	0x080179cc
 8011538:	080179ec 	.word	0x080179ec
    ipr->iphdr = ip_data.current_ip6_header;
 801153c:	4b45      	ldr	r3, [pc, #276]	; (8011654 <ip6_reass+0x400>)
 801153e:	68db      	ldr	r3, [r3, #12]
 8011540:	60a3      	str	r3, [r4, #8]
    MEMCPY(ipr->orig_hdr, p->payload, sizeof(*iprh));
 8011542:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011546:	681a      	ldr	r2, [r3, #0]
 8011548:	685b      	ldr	r3, [r3, #4]
 801154a:	60e2      	str	r2, [r4, #12]
 801154c:	6123      	str	r3, [r4, #16]
 801154e:	e79d      	b.n	801148c <ip6_reass+0x238>
 8011550:	4681      	mov	r9, r0
 8011552:	e003      	b.n	801155c <ip6_reass+0x308>
      valid = 0;
 8011554:	f04f 0900 	mov.w	r9, #0
 8011558:	e000      	b.n	801155c <ip6_reass+0x308>
 801155a:	4681      	mov	r9, r0
  if (valid) {
 801155c:	f1b9 0f00 	cmp.w	r9, #0
 8011560:	d00c      	beq.n	801157c <ip6_reass+0x328>
    while (iprh != NULL) {
 8011562:	b16f      	cbz	r7, 8011580 <ip6_reass+0x32c>
      next_pbuf = iprh->next_pbuf;
 8011564:	683e      	ldr	r6, [r7, #0]
      if (next_pbuf != NULL) {
 8011566:	b15e      	cbz	r6, 8011580 <ip6_reass+0x32c>
        iprh_tmp = (struct ip6_reass_helper*)next_pbuf->payload;
 8011568:	6877      	ldr	r7, [r6, #4]
        pbuf_remove_header(next_pbuf, IP6_FRAG_HLEN);
 801156a:	2108      	movs	r1, #8
 801156c:	4630      	mov	r0, r6
 801156e:	f7f6 f8cb 	bl	8007708 <pbuf_remove_header>
        pbuf_cat(ipr->p, next_pbuf);
 8011572:	4631      	mov	r1, r6
 8011574:	6860      	ldr	r0, [r4, #4]
 8011576:	f7f6 fa91 	bl	8007a9c <pbuf_cat>
      iprh = iprh_tmp;
 801157a:	e7f2      	b.n	8011562 <ip6_reass+0x30e>
  return NULL;
 801157c:	2700      	movs	r7, #0
 801157e:	e758      	b.n	8011432 <ip6_reass+0x1de>
    p = ipr->p;
 8011580:	6867      	ldr	r7, [r4, #4]
    MEMMOVE((u8_t*)ipr->iphdr + sizeof(struct ip6_frag_hdr), ipr->iphdr,
 8011582:	68a1      	ldr	r1, [r4, #8]
 8011584:	687a      	ldr	r2, [r7, #4]
 8011586:	1a52      	subs	r2, r2, r1
 8011588:	f101 0008 	add.w	r0, r1, #8
 801158c:	f002 fe30 	bl	80141f0 <memmove>
    iphdr_ptr = (struct ip6_hdr*)((u8_t*)ipr->iphdr +
 8011590:	68a6      	ldr	r6, [r4, #8]
 8011592:	f106 0808 	add.w	r8, r6, #8
    ipr->datagram_len = (u16_t)(ipr->datagram_len + ((u8_t*)p->payload - (u8_t*)iphdr_ptr)
 8011596:	8b20      	ldrh	r0, [r4, #24]
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	eba3 0308 	sub.w	r3, r3, r8
 801159e:	4418      	add	r0, r3
 80115a0:	b280      	uxth	r0, r0
 80115a2:	3828      	subs	r0, #40	; 0x28
 80115a4:	b280      	uxth	r0, r0
 80115a6:	8320      	strh	r0, [r4, #24]
    iphdr_ptr->_plen = lwip_htons(ipr->datagram_len);
 80115a8:	f7f4 fde2 	bl	8006170 <lwip_htons>
 80115ac:	81b0      	strh	r0, [r6, #12]
    if (IP6H_NEXTH(iphdr_ptr) == IP6_NEXTH_FRAGMENT) {
 80115ae:	7bb3      	ldrb	r3, [r6, #14]
 80115b0:	2b2c      	cmp	r3, #44	; 0x2c
 80115b2:	d009      	beq.n	80115c8 <ip6_reass+0x374>
      u8_t *ptr = (u8_t *)iphdr_ptr + IP6_HLEN;
 80115b4:	f106 0330 	add.w	r3, r6, #48	; 0x30
      while (*ptr != IP6_NEXTH_FRAGMENT) {
 80115b8:	781a      	ldrb	r2, [r3, #0]
 80115ba:	2a2c      	cmp	r2, #44	; 0x2c
 80115bc:	d007      	beq.n	80115ce <ip6_reass+0x37a>
        ptr += 8 * (1 + ptr[1]);
 80115be:	785a      	ldrb	r2, [r3, #1]
 80115c0:	3201      	adds	r2, #1
 80115c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80115c6:	e7f7      	b.n	80115b8 <ip6_reass+0x364>
      iphdr_ptr->_nexth = ipr->nexth;
 80115c8:	7ea3      	ldrb	r3, [r4, #26]
 80115ca:	73b3      	strb	r3, [r6, #14]
 80115cc:	e001      	b.n	80115d2 <ip6_reass+0x37e>
      *ptr = ipr->nexth;
 80115ce:	7ea2      	ldrb	r2, [r4, #26]
 80115d0:	701a      	strb	r2, [r3, #0]
    if (reassdatagrams == ipr) {
 80115d2:	4b21      	ldr	r3, [pc, #132]	; (8011658 <ip6_reass+0x404>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	42a3      	cmp	r3, r4
 80115d8:	d028      	beq.n	801162c <ip6_reass+0x3d8>
      LWIP_ASSERT("sanity check linked list", ipr_prev != NULL);
 80115da:	b35d      	cbz	r5, 8011634 <ip6_reass+0x3e0>
      ipr_prev->next = ipr->next;
 80115dc:	6823      	ldr	r3, [r4, #0]
 80115de:	602b      	str	r3, [r5, #0]
    memp_free(MEMP_IP6_REASSDATA, ipr);
 80115e0:	4621      	mov	r1, r4
 80115e2:	2009      	movs	r0, #9
 80115e4:	f7f5 fc32 	bl	8006e4c <memp_free>
    clen = pbuf_clen(p);
 80115e8:	4638      	mov	r0, r7
 80115ea:	f7f6 fa37 	bl	8007a5c <pbuf_clen>
 80115ee:	4604      	mov	r4, r0
    LWIP_ASSERT("ip6_reass_pbufcount >= clen", ip6_reass_pbufcount >= clen);
 80115f0:	4b1a      	ldr	r3, [pc, #104]	; (801165c <ip6_reass+0x408>)
 80115f2:	881b      	ldrh	r3, [r3, #0]
 80115f4:	4283      	cmp	r3, r0
 80115f6:	d325      	bcc.n	8011644 <ip6_reass+0x3f0>
    ip6_reass_pbufcount = (u16_t)(ip6_reass_pbufcount - clen);
 80115f8:	4a18      	ldr	r2, [pc, #96]	; (801165c <ip6_reass+0x408>)
 80115fa:	8813      	ldrh	r3, [r2, #0]
 80115fc:	1b1c      	subs	r4, r3, r4
 80115fe:	8014      	strh	r4, [r2, #0]
    if (pbuf_header_force(p, (s16_t)((u8_t*)p->payload - (u8_t*)iphdr_ptr))) {
 8011600:	6879      	ldr	r1, [r7, #4]
 8011602:	eba1 0108 	sub.w	r1, r1, r8
 8011606:	b209      	sxth	r1, r1
 8011608:	4638      	mov	r0, r7
 801160a:	f7f6 f8bd 	bl	8007788 <pbuf_header_force>
 801160e:	2800      	cmp	r0, #0
 8011610:	f43f af0f 	beq.w	8011432 <ip6_reass+0x1de>
      LWIP_ASSERT("ip6_reass: moving p->payload to ip6 header failed\n", 0);
 8011614:	4b12      	ldr	r3, [pc, #72]	; (8011660 <ip6_reass+0x40c>)
 8011616:	f240 228f 	movw	r2, #655	; 0x28f
 801161a:	4912      	ldr	r1, [pc, #72]	; (8011664 <ip6_reass+0x410>)
 801161c:	4812      	ldr	r0, [pc, #72]	; (8011668 <ip6_reass+0x414>)
 801161e:	f002 fe09 	bl	8014234 <iprintf>
      pbuf_free(p);
 8011622:	4638      	mov	r0, r7
 8011624:	f7f6 f8b6 	bl	8007794 <pbuf_free>
      return NULL;
 8011628:	2700      	movs	r7, #0
 801162a:	e702      	b.n	8011432 <ip6_reass+0x1de>
      reassdatagrams = ipr->next;
 801162c:	6822      	ldr	r2, [r4, #0]
 801162e:	4b0a      	ldr	r3, [pc, #40]	; (8011658 <ip6_reass+0x404>)
 8011630:	601a      	str	r2, [r3, #0]
 8011632:	e7d5      	b.n	80115e0 <ip6_reass+0x38c>
      LWIP_ASSERT("sanity check linked list", ipr_prev != NULL);
 8011634:	4b0a      	ldr	r3, [pc, #40]	; (8011660 <ip6_reass+0x40c>)
 8011636:	f240 2283 	movw	r2, #643	; 0x283
 801163a:	490c      	ldr	r1, [pc, #48]	; (801166c <ip6_reass+0x418>)
 801163c:	480a      	ldr	r0, [pc, #40]	; (8011668 <ip6_reass+0x414>)
 801163e:	f002 fdf9 	bl	8014234 <iprintf>
 8011642:	e7cb      	b.n	80115dc <ip6_reass+0x388>
    LWIP_ASSERT("ip6_reass_pbufcount >= clen", ip6_reass_pbufcount >= clen);
 8011644:	4b06      	ldr	r3, [pc, #24]	; (8011660 <ip6_reass+0x40c>)
 8011646:	f240 228a 	movw	r2, #650	; 0x28a
 801164a:	4909      	ldr	r1, [pc, #36]	; (8011670 <ip6_reass+0x41c>)
 801164c:	4806      	ldr	r0, [pc, #24]	; (8011668 <ip6_reass+0x414>)
 801164e:	f002 fdf1 	bl	8014234 <iprintf>
 8011652:	e7d1      	b.n	80115f8 <ip6_reass+0x3a4>
 8011654:	200039e8 	.word	0x200039e8
 8011658:	200007a0 	.word	0x200007a0
 801165c:	2000079c 	.word	0x2000079c
 8011660:	08017c20 	.word	0x08017c20
 8011664:	08017d0c 	.word	0x08017d0c
 8011668:	08015418 	.word	0x08015418
 801166c:	08017940 	.word	0x08017940
 8011670:	08017cf0 	.word	0x08017cf0

08011674 <ip6_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip6_frag(struct pbuf *p, struct netif *netif, const ip6_addr_t *dest)
{
 8011674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011678:	b089      	sub	sp, #36	; 0x24
 801167a:	4605      	mov	r5, r0
 801167c:	9106      	str	r1, [sp, #24]
 801167e:	9207      	str	r2, [sp, #28]
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  static u32_t identification;
  u16_t left, cop;
  const u16_t mtu = nd6_get_destination_mtu(dest, netif);
 8011680:	4610      	mov	r0, r2
 8011682:	f002 fb7f 	bl	8013d84 <nd6_get_destination_mtu>
  const u16_t nfb = (u16_t)((mtu - (IP6_HLEN + IP6_FRAG_HLEN)) & IP6_FRAG_OFFSET_MASK);
 8011686:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801168a:	b29b      	uxth	r3, r3
 801168c:	f023 0307 	bic.w	r3, r3, #7
 8011690:	b29b      	uxth	r3, r3
 8011692:	9303      	str	r3, [sp, #12]
  u16_t fragment_offset = 0;
  u16_t last;
  u16_t poff = IP6_HLEN;

  identification++;
 8011694:	4a69      	ldr	r2, [pc, #420]	; (801183c <ip6_frag+0x1c8>)
 8011696:	6813      	ldr	r3, [r2, #0]
 8011698:	3301      	adds	r3, #1
 801169a:	6013      	str	r3, [r2, #0]

  original_ip6hdr = (struct ip6_hdr *)p->payload;
 801169c:	686b      	ldr	r3, [r5, #4]
 801169e:	9304      	str	r3, [sp, #16]

  /* @todo we assume there are no options in the unfragmentable part (IPv6 header). */
  LWIP_ASSERT("p->tot_len >= IP6_HLEN", p->tot_len >= IP6_HLEN);
 80116a0:	892b      	ldrh	r3, [r5, #8]
 80116a2:	2b27      	cmp	r3, #39	; 0x27
 80116a4:	d941      	bls.n	801172a <ip6_frag+0xb6>
  left = (u16_t)(p->tot_len - IP6_HLEN);
 80116a6:	892b      	ldrh	r3, [r5, #8]
 80116a8:	3b28      	subs	r3, #40	; 0x28
 80116aa:	fa1f fa83 	uxth.w	sl, r3
  u16_t poff = IP6_HLEN;
 80116ae:	2628      	movs	r6, #40	; 0x28
  u16_t fragment_offset = 0;
 80116b0:	2300      	movs	r3, #0
 80116b2:	9305      	str	r3, [sp, #20]
  u16_t newpbuflen = 0;
 80116b4:	461c      	mov	r4, r3

  while (left) {
 80116b6:	f1ba 0f00 	cmp.w	sl, #0
 80116ba:	f000 80b9 	beq.w	8011830 <ip6_frag+0x1bc>
    last = (left <= nfb);

    /* Fill this fragment */
    cop = last ? left : nfb;
 80116be:	9b03      	ldr	r3, [sp, #12]
 80116c0:	459a      	cmp	sl, r3
 80116c2:	d93a      	bls.n	801173a <ip6_frag+0xc6>
 80116c4:	9302      	str	r3, [sp, #8]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link, IPv6, and Fragment header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP6_HLEN + IP6_FRAG_HLEN, PBUF_RAM);
 80116c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80116ca:	2130      	movs	r1, #48	; 0x30
 80116cc:	200e      	movs	r0, #14
 80116ce:	f7f6 f8c3 	bl	8007858 <pbuf_alloc>
    if (rambuf == NULL) {
 80116d2:	4681      	mov	r9, r0
 80116d4:	2800      	cmp	r0, #0
 80116d6:	f000 80ad 	beq.w	8011834 <ip6_frag+0x1c0>
      IP6_FRAG_STATS_INC(ip6_frag.memerr);
      return ERR_MEM;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80116da:	896b      	ldrh	r3, [r5, #10]
 80116dc:	2b27      	cmp	r3, #39	; 0x27
 80116de:	d92f      	bls.n	8011740 <ip6_frag+0xcc>
                (p->len >= (IP6_HLEN)));
    SMEMCPY(rambuf->payload, original_ip6hdr, IP6_HLEN);
 80116e0:	9904      	ldr	r1, [sp, #16]
 80116e2:	460b      	mov	r3, r1
 80116e4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80116e8:	f101 0e20 	add.w	lr, r1, #32
 80116ec:	f8d3 c000 	ldr.w	ip, [r3]
 80116f0:	685f      	ldr	r7, [r3, #4]
 80116f2:	6898      	ldr	r0, [r3, #8]
 80116f4:	68d9      	ldr	r1, [r3, #12]
 80116f6:	f8c2 c000 	str.w	ip, [r2]
 80116fa:	6057      	str	r7, [r2, #4]
 80116fc:	6090      	str	r0, [r2, #8]
 80116fe:	60d1      	str	r1, [r2, #12]
 8011700:	3310      	adds	r3, #16
 8011702:	3210      	adds	r2, #16
 8011704:	4573      	cmp	r3, lr
 8011706:	d1f1      	bne.n	80116ec <ip6_frag+0x78>
 8011708:	6819      	ldr	r1, [r3, #0]
 801170a:	685b      	ldr	r3, [r3, #4]
 801170c:	6011      	str	r1, [r2, #0]
 801170e:	6053      	str	r3, [r2, #4]
    ip6hdr = (struct ip6_hdr *)rambuf->payload;
 8011710:	f8d9 b004 	ldr.w	fp, [r9, #4]
    frag_hdr = (struct ip6_frag_hdr *)((u8_t*)rambuf->payload + IP6_HLEN);

    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
 8011714:	686b      	ldr	r3, [r5, #4]
 8011716:	4433      	add	r3, r6
 8011718:	606b      	str	r3, [r5, #4]
    p->len = (u16_t)(p->len - poff);
 801171a:	896b      	ldrh	r3, [r5, #10]
 801171c:	1b9b      	subs	r3, r3, r6
 801171e:	816b      	strh	r3, [r5, #10]
    p->tot_len = (u16_t)(p->tot_len - poff);
 8011720:	892b      	ldrh	r3, [r5, #8]
 8011722:	1b9e      	subs	r6, r3, r6
 8011724:	812e      	strh	r6, [r5, #8]

    left_to_copy = cop;
 8011726:	9e02      	ldr	r6, [sp, #8]
    while (left_to_copy) {
 8011728:	e02f      	b.n	801178a <ip6_frag+0x116>
  LWIP_ASSERT("p->tot_len >= IP6_HLEN", p->tot_len >= IP6_HLEN);
 801172a:	4b45      	ldr	r3, [pc, #276]	; (8011840 <ip6_frag+0x1cc>)
 801172c:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8011730:	4944      	ldr	r1, [pc, #272]	; (8011844 <ip6_frag+0x1d0>)
 8011732:	4845      	ldr	r0, [pc, #276]	; (8011848 <ip6_frag+0x1d4>)
 8011734:	f002 fd7e 	bl	8014234 <iprintf>
 8011738:	e7b5      	b.n	80116a6 <ip6_frag+0x32>
    cop = last ? left : nfb;
 801173a:	f8cd a008 	str.w	sl, [sp, #8]
 801173e:	e7c2      	b.n	80116c6 <ip6_frag+0x52>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011740:	4b3f      	ldr	r3, [pc, #252]	; (8011840 <ip6_frag+0x1cc>)
 8011742:	f240 320f 	movw	r2, #783	; 0x30f
 8011746:	4941      	ldr	r1, [pc, #260]	; (801184c <ip6_frag+0x1d8>)
 8011748:	483f      	ldr	r0, [pc, #252]	; (8011848 <ip6_frag+0x1d4>)
 801174a:	f002 fd73 	bl	8014234 <iprintf>
 801174e:	e7c7      	b.n	80116e0 <ip6_frag+0x6c>
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
        p = p->next;
        continue;
      }
      pcr = ip6_frag_alloc_pbuf_custom_ref();
 8011750:	f7ff fd5e 	bl	8011210 <ip6_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 8011754:	4607      	mov	r7, r0
 8011756:	b310      	cbz	r0, 801179e <ip6_frag+0x12a>
        pbuf_free(rambuf);
        IP6_FRAG_STATS_INC(ip6_frag.memerr);
        return ERR_MEM;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc, p->payload, newpbuflen);
 8011758:	9401      	str	r4, [sp, #4]
 801175a:	686b      	ldr	r3, [r5, #4]
 801175c:	9300      	str	r3, [sp, #0]
 801175e:	4603      	mov	r3, r0
 8011760:	2241      	movs	r2, #65	; 0x41
 8011762:	4621      	mov	r1, r4
 8011764:	2000      	movs	r0, #0
 8011766:	f7f5 ffa7 	bl	80076b8 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 801176a:	4680      	mov	r8, r0
 801176c:	b1f8      	cbz	r0, 80117ae <ip6_frag+0x13a>
        ip6_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        IP6_FRAG_STATS_INC(ip6_frag.memerr);
        return ERR_MEM;
      }
      pbuf_ref(p);
 801176e:	4628      	mov	r0, r5
 8011770:	f7f6 f97c 	bl	8007a6c <pbuf_ref>
      pcr->original = p;
 8011774:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ip6_frag_free_pbuf_custom;
 8011776:	4b36      	ldr	r3, [pc, #216]	; (8011850 <ip6_frag+0x1dc>)
 8011778:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801177a:	4641      	mov	r1, r8
 801177c:	4648      	mov	r0, r9
 801177e:	f7f6 f98d 	bl	8007a9c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011782:	1b36      	subs	r6, r6, r4
 8011784:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 8011786:	b106      	cbz	r6, 801178a <ip6_frag+0x116>
        p = p->next;
 8011788:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 801178a:	b1ce      	cbz	r6, 80117c0 <ip6_frag+0x14c>
      newpbuflen = (left_to_copy < p->len) ? left_to_copy : p->len;
 801178c:	896c      	ldrh	r4, [r5, #10]
 801178e:	42b4      	cmp	r4, r6
 8011790:	bf28      	it	cs
 8011792:	4634      	movcs	r4, r6
 8011794:	b2a4      	uxth	r4, r4
      if (!newpbuflen) {
 8011796:	2c00      	cmp	r4, #0
 8011798:	d1da      	bne.n	8011750 <ip6_frag+0xdc>
        p = p->next;
 801179a:	682d      	ldr	r5, [r5, #0]
        continue;
 801179c:	e7f5      	b.n	801178a <ip6_frag+0x116>
        pbuf_free(rambuf);
 801179e:	4648      	mov	r0, r9
 80117a0:	f7f5 fff8 	bl	8007794 <pbuf_free>
        return ERR_MEM;
 80117a4:	f04f 30ff 	mov.w	r0, #4294967295
    pbuf_free(rambuf);
    left = (u16_t)(left - cop);
    fragment_offset = (u16_t)(fragment_offset + cop);
  }
  return ERR_OK;
}
 80117a8:	b009      	add	sp, #36	; 0x24
 80117aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip6_frag_free_pbuf_custom_ref(pcr);
 80117ae:	4638      	mov	r0, r7
 80117b0:	f7ff fcfe 	bl	80111b0 <ip6_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80117b4:	4648      	mov	r0, r9
 80117b6:	f7f5 ffed 	bl	8007794 <pbuf_free>
        return ERR_MEM;
 80117ba:	f04f 30ff 	mov.w	r0, #4294967295
 80117be:	e7f3      	b.n	80117a8 <ip6_frag+0x134>
    frag_hdr->_nexth = original_ip6hdr->_nexth;
 80117c0:	9b04      	ldr	r3, [sp, #16]
 80117c2:	799b      	ldrb	r3, [r3, #6]
 80117c4:	f88b 3028 	strb.w	r3, [fp, #40]	; 0x28
    frag_hdr->reserved = 0;
 80117c8:	2300      	movs	r3, #0
 80117ca:	f88b 3029 	strb.w	r3, [fp, #41]	; 0x29
    frag_hdr->_fragment_offset = lwip_htons((u16_t)((fragment_offset & IP6_FRAG_OFFSET_MASK) | (last ? 0 : IP6_FRAG_MORE_FLAG)));
 80117ce:	9f05      	ldr	r7, [sp, #20]
 80117d0:	f027 0007 	bic.w	r0, r7, #7
 80117d4:	b200      	sxth	r0, r0
 80117d6:	9b03      	ldr	r3, [sp, #12]
 80117d8:	459a      	cmp	sl, r3
 80117da:	bf88      	it	hi
 80117dc:	f040 0001 	orrhi.w	r0, r0, #1
 80117e0:	b280      	uxth	r0, r0
 80117e2:	f7f4 fcc5 	bl	8006170 <lwip_htons>
 80117e6:	f8ab 002a 	strh.w	r0, [fp, #42]	; 0x2a
    frag_hdr->_identification = lwip_htonl(identification);
 80117ea:	4b14      	ldr	r3, [pc, #80]	; (801183c <ip6_frag+0x1c8>)
 80117ec:	6818      	ldr	r0, [r3, #0]
 80117ee:	f7f4 fcc4 	bl	800617a <lwip_htonl>
 80117f2:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
    IP6H_NEXTH_SET(ip6hdr, IP6_NEXTH_FRAGMENT);
 80117f6:	232c      	movs	r3, #44	; 0x2c
 80117f8:	f88b 3006 	strb.w	r3, [fp, #6]
    IP6H_PLEN_SET(ip6hdr, (u16_t)(cop + IP6_FRAG_HLEN));
 80117fc:	9e02      	ldr	r6, [sp, #8]
 80117fe:	f106 0008 	add.w	r0, r6, #8
 8011802:	b280      	uxth	r0, r0
 8011804:	f7f4 fcb4 	bl	8006170 <lwip_htons>
 8011808:	f8ab 0004 	strh.w	r0, [fp, #4]
    netif->output_ip6(netif, rambuf, dest);
 801180c:	9806      	ldr	r0, [sp, #24]
 801180e:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8011812:	9a07      	ldr	r2, [sp, #28]
 8011814:	4649      	mov	r1, r9
 8011816:	4798      	blx	r3
    pbuf_free(rambuf);
 8011818:	4648      	mov	r0, r9
 801181a:	f7f5 ffbb 	bl	8007794 <pbuf_free>
    left = (u16_t)(left - cop);
 801181e:	ebaa 0a06 	sub.w	sl, sl, r6
 8011822:	fa1f fa8a 	uxth.w	sl, sl
    fragment_offset = (u16_t)(fragment_offset + cop);
 8011826:	19bb      	adds	r3, r7, r6
 8011828:	b29b      	uxth	r3, r3
 801182a:	9305      	str	r3, [sp, #20]
    poff = newpbuflen;
 801182c:	4626      	mov	r6, r4
 801182e:	e742      	b.n	80116b6 <ip6_frag+0x42>
  return ERR_OK;
 8011830:	2000      	movs	r0, #0
 8011832:	e7b9      	b.n	80117a8 <ip6_frag+0x134>
      return ERR_MEM;
 8011834:	f04f 30ff 	mov.w	r0, #4294967295
 8011838:	e7b6      	b.n	80117a8 <ip6_frag+0x134>
 801183a:	bf00      	nop
 801183c:	20000798 	.word	0x20000798
 8011840:	08017c20 	.word	0x08017c20
 8011844:	08017d40 	.word	0x08017d40
 8011848:	08015418 	.word	0x08015418
 801184c:	08017abc 	.word	0x08017abc
 8011850:	080111dd 	.word	0x080111dd

08011854 <mld6_remove_group>:
mld6_remove_group(struct netif *netif, struct mld_group *group)
{
  err_t err = ERR_OK;

  /* Is it the first group? */
  if (netif_mld6_data(netif) == group) {
 8011854:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
 8011858:	428b      	cmp	r3, r1
 801185a:	d005      	beq.n	8011868 <mld6_remove_group+0x14>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_MLD6, group->next);
  } else {
    /* look for group further down the list */
    struct mld_group *tmpGroup;
    for (tmpGroup = netif_mld6_data(netif); tmpGroup != NULL; tmpGroup = tmpGroup->next) {
 801185c:	b15b      	cbz	r3, 8011876 <mld6_remove_group+0x22>
      if (tmpGroup->next == group) {
 801185e:	681a      	ldr	r2, [r3, #0]
 8011860:	428a      	cmp	r2, r1
 8011862:	d006      	beq.n	8011872 <mld6_remove_group+0x1e>
    for (tmpGroup = netif_mld6_data(netif); tmpGroup != NULL; tmpGroup = tmpGroup->next) {
 8011864:	4613      	mov	r3, r2
 8011866:	e7f9      	b.n	801185c <mld6_remove_group+0x8>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_MLD6, group->next);
 8011868:	680b      	ldr	r3, [r1, #0]
 801186a:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
  err_t err = ERR_OK;
 801186e:	2000      	movs	r0, #0
 8011870:	4770      	bx	lr
        tmpGroup->next = group->next;
 8011872:	680a      	ldr	r2, [r1, #0]
 8011874:	601a      	str	r2, [r3, #0]
        break;
      }
    }
    /* Group not find group */
    if (tmpGroup == NULL) {
 8011876:	b10b      	cbz	r3, 801187c <mld6_remove_group+0x28>
  err_t err = ERR_OK;
 8011878:	2000      	movs	r0, #0
 801187a:	4770      	bx	lr
      err = ERR_ARG;
 801187c:	f06f 000f 	mvn.w	r0, #15
    }
  }

  return err;
}
 8011880:	4770      	bx	lr
	...

08011884 <mld6_delayed_report>:
 *              should be sent
 * @param maxresp_in the max resp delay provided in the query
 */
static void
mld6_delayed_report(struct mld_group *group, u16_t maxresp_in)
{
 8011884:	b538      	push	{r3, r4, r5, lr}
 8011886:	4605      	mov	r5, r0
  /* Convert maxresp from milliseconds to tmr ticks */
  u16_t maxresp = maxresp_in / MLD6_TMR_INTERVAL;
 8011888:	4c0e      	ldr	r4, [pc, #56]	; (80118c4 <mld6_delayed_report+0x40>)
 801188a:	fba4 3401 	umull	r3, r4, r4, r1
 801188e:	0964      	lsrs	r4, r4, #5
  if (maxresp == 0) {
 8011890:	2963      	cmp	r1, #99	; 0x63
 8011892:	d800      	bhi.n	8011896 <mld6_delayed_report+0x12>
    maxresp = 1;
 8011894:	2401      	movs	r4, #1
  }

#ifdef LWIP_RAND
  /* Randomize maxresp. (if LWIP_RAND is supported) */
  maxresp = (u16_t)(LWIP_RAND() % maxresp);
 8011896:	f002 fd5b 	bl	8014350 <rand>
 801189a:	fbb0 f3f4 	udiv	r3, r0, r4
 801189e:	fb04 0413 	mls	r4, r4, r3, r0
 80118a2:	b2a4      	uxth	r4, r4
  if (maxresp == 0) {
 80118a4:	b904      	cbnz	r4, 80118a8 <mld6_delayed_report+0x24>
    maxresp = 1;
 80118a6:	2401      	movs	r4, #1
  }
#endif /* LWIP_RAND */

  /* Apply timer value if no report has been scheduled already. */
  if ((group->group_state == MLD6_GROUP_IDLE_MEMBER) ||
 80118a8:	7e6b      	ldrb	r3, [r5, #25]
 80118aa:	2b02      	cmp	r3, #2
 80118ac:	d005      	beq.n	80118ba <mld6_delayed_report+0x36>
 80118ae:	2b01      	cmp	r3, #1
 80118b0:	d106      	bne.n	80118c0 <mld6_delayed_report+0x3c>
     ((group->group_state == MLD6_GROUP_DELAYING_MEMBER) &&
      ((group->timer == 0) || (maxresp < group->timer)))) {
 80118b2:	8b6b      	ldrh	r3, [r5, #26]
     ((group->group_state == MLD6_GROUP_DELAYING_MEMBER) &&
 80118b4:	b10b      	cbz	r3, 80118ba <mld6_delayed_report+0x36>
      ((group->timer == 0) || (maxresp < group->timer)))) {
 80118b6:	42a3      	cmp	r3, r4
 80118b8:	d902      	bls.n	80118c0 <mld6_delayed_report+0x3c>
    group->timer = maxresp;
 80118ba:	836c      	strh	r4, [r5, #26]
    group->group_state = MLD6_GROUP_DELAYING_MEMBER;
 80118bc:	2301      	movs	r3, #1
 80118be:	766b      	strb	r3, [r5, #25]
  }
}
 80118c0:	bd38      	pop	{r3, r4, r5, pc}
 80118c2:	bf00      	nop
 80118c4:	51eb851f 	.word	0x51eb851f

080118c8 <mld6_new_group>:
{
 80118c8:	b538      	push	{r3, r4, r5, lr}
 80118ca:	4605      	mov	r5, r0
 80118cc:	460c      	mov	r4, r1
  group = (struct mld_group *)memp_malloc(MEMP_MLD6_GROUP);
 80118ce:	200a      	movs	r0, #10
 80118d0:	f7f5 faa2 	bl	8006e18 <memp_malloc>
  if (group != NULL) {
 80118d4:	4603      	mov	r3, r0
 80118d6:	b1c8      	cbz	r0, 801190c <mld6_new_group+0x44>
    ip6_addr_set(&(group->group_address), addr);
 80118d8:	b1d4      	cbz	r4, 8011910 <mld6_new_group+0x48>
 80118da:	6822      	ldr	r2, [r4, #0]
 80118dc:	605a      	str	r2, [r3, #4]
 80118de:	b1cc      	cbz	r4, 8011914 <mld6_new_group+0x4c>
 80118e0:	6862      	ldr	r2, [r4, #4]
 80118e2:	609a      	str	r2, [r3, #8]
 80118e4:	b1c4      	cbz	r4, 8011918 <mld6_new_group+0x50>
 80118e6:	68a2      	ldr	r2, [r4, #8]
 80118e8:	60da      	str	r2, [r3, #12]
 80118ea:	b1bc      	cbz	r4, 801191c <mld6_new_group+0x54>
 80118ec:	68e2      	ldr	r2, [r4, #12]
 80118ee:	611a      	str	r2, [r3, #16]
 80118f0:	b1b4      	cbz	r4, 8011920 <mld6_new_group+0x58>
 80118f2:	7c22      	ldrb	r2, [r4, #16]
 80118f4:	751a      	strb	r2, [r3, #20]
    group->timer              = 0; /* Not running */
 80118f6:	2200      	movs	r2, #0
 80118f8:	835a      	strh	r2, [r3, #26]
    group->group_state        = MLD6_GROUP_IDLE_MEMBER;
 80118fa:	2102      	movs	r1, #2
 80118fc:	7659      	strb	r1, [r3, #25]
    group->last_reporter_flag = 0;
 80118fe:	761a      	strb	r2, [r3, #24]
    group->use                = 0;
 8011900:	771a      	strb	r2, [r3, #28]
    group->next               = netif_mld6_data(ifp);
 8011902:	f8d5 20d0 	ldr.w	r2, [r5, #208]	; 0xd0
 8011906:	601a      	str	r2, [r3, #0]
    netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_MLD6, group);
 8011908:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
}
 801190c:	4618      	mov	r0, r3
 801190e:	bd38      	pop	{r3, r4, r5, pc}
    ip6_addr_set(&(group->group_address), addr);
 8011910:	2200      	movs	r2, #0
 8011912:	e7e3      	b.n	80118dc <mld6_new_group+0x14>
 8011914:	2200      	movs	r2, #0
 8011916:	e7e4      	b.n	80118e2 <mld6_new_group+0x1a>
 8011918:	2200      	movs	r2, #0
 801191a:	e7e5      	b.n	80118e8 <mld6_new_group+0x20>
 801191c:	2200      	movs	r2, #0
 801191e:	e7e6      	b.n	80118ee <mld6_new_group+0x26>
 8011920:	2200      	movs	r2, #0
 8011922:	e7e7      	b.n	80118f4 <mld6_new_group+0x2c>

08011924 <mld6_send>:
 * @param group the group to report or quit
 * @param type ICMP6_TYPE_MLR (report) or ICMP6_TYPE_MLD (done)
 */
static void
mld6_send(struct netif *netif, struct mld_group *group, u8_t type)
{
 8011924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011928:	b084      	sub	sp, #16
 801192a:	4605      	mov	r5, r0
 801192c:	460c      	mov	r4, r1
 801192e:	4616      	mov	r6, r2
  struct mld_header *mld_hdr;
  struct pbuf *p;
  const ip6_addr_t *src_addr;

  /* Allocate a packet. Size is MLD header + IPv6 Hop-by-hop options header. */
  p = pbuf_alloc(PBUF_IP, sizeof(struct mld_header) + MLD6_HBH_HLEN, PBUF_RAM);
 8011930:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011934:	2120      	movs	r1, #32
 8011936:	2036      	movs	r0, #54	; 0x36
 8011938:	f7f5 ff8e 	bl	8007858 <pbuf_alloc>
  if (p == NULL) {
 801193c:	2800      	cmp	r0, #0
 801193e:	d046      	beq.n	80119ce <mld6_send+0xaa>
 8011940:	4680      	mov	r8, r0
    MLD6_STATS_INC(mld6.memerr);
    return;
  }

  /* Move to make room for Hop-by-hop options header. */
  if (pbuf_remove_header(p, MLD6_HBH_HLEN)) {
 8011942:	2108      	movs	r1, #8
 8011944:	f7f5 fee0 	bl	8007708 <pbuf_remove_header>
 8011948:	b938      	cbnz	r0, 801195a <mld6_send+0x36>
    MLD6_STATS_INC(mld6.lenerr);
    return;
  }

  /* Select our source address. */
  if (!ip6_addr_isvalid(netif_ip6_addr_state(netif, 0))) {
 801194a:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
 801194e:	f013 0f10 	tst.w	r3, #16
 8011952:	d006      	beq.n	8011962 <mld6_send+0x3e>
    /* This is a special case, when we are performing duplicate address detection.
     * We must join the multicast group, but we don't have a valid address yet. */
    src_addr = IP6_ADDR_ANY6;
  } else {
    /* Use link-local address as source address. */
    src_addr = netif_ip6_addr(netif, 0);
 8011954:	f105 074c 	add.w	r7, r5, #76	; 0x4c
 8011958:	e004      	b.n	8011964 <mld6_send+0x40>
    pbuf_free(p);
 801195a:	4640      	mov	r0, r8
 801195c:	f7f5 ff1a 	bl	8007794 <pbuf_free>
    return;
 8011960:	e035      	b.n	80119ce <mld6_send+0xaa>
    src_addr = IP6_ADDR_ANY6;
 8011962:	4f1c      	ldr	r7, [pc, #112]	; (80119d4 <mld6_send+0xb0>)
  }

  /* MLD message header pointer. */
  mld_hdr = (struct mld_header *)p->payload;
 8011964:	f8d8 3004 	ldr.w	r3, [r8, #4]

  /* Set fields. */
  mld_hdr->type = type;
 8011968:	701e      	strb	r6, [r3, #0]
  mld_hdr->code = 0;
 801196a:	2200      	movs	r2, #0
 801196c:	705a      	strb	r2, [r3, #1]
  mld_hdr->chksum = 0;
 801196e:	709a      	strb	r2, [r3, #2]
 8011970:	70da      	strb	r2, [r3, #3]
  mld_hdr->max_resp_delay = 0;
 8011972:	711a      	strb	r2, [r3, #4]
 8011974:	715a      	strb	r2, [r3, #5]
  mld_hdr->reserved = 0;
 8011976:	719a      	strb	r2, [r3, #6]
 8011978:	71da      	strb	r2, [r3, #7]
  ip6_addr_copy_to_packed(mld_hdr->multicast_address, group->group_address);
 801197a:	6861      	ldr	r1, [r4, #4]
 801197c:	6099      	str	r1, [r3, #8]
 801197e:	68a1      	ldr	r1, [r4, #8]
 8011980:	60d9      	str	r1, [r3, #12]
 8011982:	68e1      	ldr	r1, [r4, #12]
 8011984:	6119      	str	r1, [r3, #16]
 8011986:	6921      	ldr	r1, [r4, #16]
 8011988:	6159      	str	r1, [r3, #20]
      src_addr, &(group->group_address));
  }
#endif /* CHECKSUM_GEN_ICMP6 */

  /* Add hop-by-hop headers options: router alert with MLD value. */
  ip6_options_add_hbh_ra(p, IP6_NEXTH_ICMP6, IP6_ROUTER_ALERT_VALUE_MLD);
 801198a:	213a      	movs	r1, #58	; 0x3a
 801198c:	4640      	mov	r0, r8
 801198e:	f7ff fb41 	bl	8011014 <ip6_options_add_hbh_ra>

  if (type == ICMP6_TYPE_MLR) {
 8011992:	2e83      	cmp	r6, #131	; 0x83
 8011994:	d00a      	beq.n	80119ac <mld6_send+0x88>
    group->last_reporter_flag = 1;
  }

  /* Send the packet out. */
  MLD6_STATS_INC(mld6.xmit);
  ip6_output_if(p, (ip6_addr_isany(src_addr)) ? NULL : src_addr, &(group->group_address),
 8011996:	b167      	cbz	r7, 80119b2 <mld6_send+0x8e>
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	b95b      	cbnz	r3, 80119b4 <mld6_send+0x90>
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	b94b      	cbnz	r3, 80119b4 <mld6_send+0x90>
 80119a0:	68bb      	ldr	r3, [r7, #8]
 80119a2:	b93b      	cbnz	r3, 80119b4 <mld6_send+0x90>
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	b92b      	cbnz	r3, 80119b4 <mld6_send+0x90>
 80119a8:	2700      	movs	r7, #0
 80119aa:	e003      	b.n	80119b4 <mld6_send+0x90>
    group->last_reporter_flag = 1;
 80119ac:	2301      	movs	r3, #1
 80119ae:	7623      	strb	r3, [r4, #24]
 80119b0:	e7f1      	b.n	8011996 <mld6_send+0x72>
  ip6_output_if(p, (ip6_addr_isany(src_addr)) ? NULL : src_addr, &(group->group_address),
 80119b2:	2700      	movs	r7, #0
 80119b4:	9502      	str	r5, [sp, #8]
 80119b6:	2300      	movs	r3, #0
 80119b8:	9301      	str	r3, [sp, #4]
 80119ba:	9300      	str	r3, [sp, #0]
 80119bc:	2301      	movs	r3, #1
 80119be:	1d22      	adds	r2, r4, #4
 80119c0:	4639      	mov	r1, r7
 80119c2:	4640      	mov	r0, r8
 80119c4:	f7ff faf0 	bl	8010fa8 <ip6_output_if>
      MLD6_HL, 0, IP6_NEXTH_HOPBYHOP, netif);
  pbuf_free(p);
 80119c8:	4640      	mov	r0, r8
 80119ca:	f7f5 fee3 	bl	8007794 <pbuf_free>
}
 80119ce:	b004      	add	sp, #16
 80119d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119d4:	08017c08 	.word	0x08017c08

080119d8 <mld6_report_groups>:
{
 80119d8:	b510      	push	{r4, lr}
  struct mld_group *group = netif_mld6_data(netif);
 80119da:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
  while (group != NULL) {
 80119de:	b134      	cbz	r4, 80119ee <mld6_report_groups+0x16>
    mld6_delayed_report(group, MLD6_JOIN_DELAYING_MEMBER_TMR_MS);
 80119e0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80119e4:	4620      	mov	r0, r4
 80119e6:	f7ff ff4d 	bl	8011884 <mld6_delayed_report>
    group = group->next;
 80119ea:	6824      	ldr	r4, [r4, #0]
 80119ec:	e7f7      	b.n	80119de <mld6_report_groups+0x6>
}
 80119ee:	bd10      	pop	{r4, pc}

080119f0 <mld6_lookfor_group>:
  struct mld_group *group = netif_mld6_data(ifp);
 80119f0:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
  while (group != NULL) {
 80119f4:	e000      	b.n	80119f8 <mld6_lookfor_group+0x8>
    group = group->next;
 80119f6:	6800      	ldr	r0, [r0, #0]
  while (group != NULL) {
 80119f8:	b198      	cbz	r0, 8011a22 <mld6_lookfor_group+0x32>
    if (ip6_addr_cmp(&(group->group_address), addr)) {
 80119fa:	6842      	ldr	r2, [r0, #4]
 80119fc:	680b      	ldr	r3, [r1, #0]
 80119fe:	429a      	cmp	r2, r3
 8011a00:	d1f9      	bne.n	80119f6 <mld6_lookfor_group+0x6>
 8011a02:	6882      	ldr	r2, [r0, #8]
 8011a04:	684b      	ldr	r3, [r1, #4]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	d1f5      	bne.n	80119f6 <mld6_lookfor_group+0x6>
 8011a0a:	68c2      	ldr	r2, [r0, #12]
 8011a0c:	688b      	ldr	r3, [r1, #8]
 8011a0e:	429a      	cmp	r2, r3
 8011a10:	d1f1      	bne.n	80119f6 <mld6_lookfor_group+0x6>
 8011a12:	6902      	ldr	r2, [r0, #16]
 8011a14:	68cb      	ldr	r3, [r1, #12]
 8011a16:	429a      	cmp	r2, r3
 8011a18:	d1ed      	bne.n	80119f6 <mld6_lookfor_group+0x6>
 8011a1a:	7d02      	ldrb	r2, [r0, #20]
 8011a1c:	7c0b      	ldrb	r3, [r1, #16]
 8011a1e:	429a      	cmp	r2, r3
 8011a20:	d1e9      	bne.n	80119f6 <mld6_lookfor_group+0x6>
}
 8011a22:	4770      	bx	lr

08011a24 <mld6_input>:
{
 8011a24:	b570      	push	{r4, r5, r6, lr}
 8011a26:	4604      	mov	r4, r0
  if (p->len < sizeof(struct mld_header)) {
 8011a28:	8943      	ldrh	r3, [r0, #10]
 8011a2a:	2b17      	cmp	r3, #23
 8011a2c:	d90a      	bls.n	8011a44 <mld6_input+0x20>
 8011a2e:	4608      	mov	r0, r1
  mld_hdr = (struct mld_header *)p->payload;
 8011a30:	6865      	ldr	r5, [r4, #4]
  switch (mld_hdr->type) {
 8011a32:	782b      	ldrb	r3, [r5, #0]
 8011a34:	2b82      	cmp	r3, #130	; 0x82
 8011a36:	d008      	beq.n	8011a4a <mld6_input+0x26>
 8011a38:	2b83      	cmp	r3, #131	; 0x83
 8011a3a:	d050      	beq.n	8011ade <mld6_input+0xba>
  pbuf_free(p);
 8011a3c:	4620      	mov	r0, r4
 8011a3e:	f7f5 fea9 	bl	8007794 <pbuf_free>
}
 8011a42:	bd70      	pop	{r4, r5, r6, pc}
    pbuf_free(p);
 8011a44:	f7f5 fea6 	bl	8007794 <pbuf_free>
    return;
 8011a48:	e7fb      	b.n	8011a42 <mld6_input+0x1e>
    if (ip6_addr_isallnodes_linklocal(ip6_current_dest_addr()) &&
 8011a4a:	4b2c      	ldr	r3, [pc, #176]	; (8011afc <mld6_input+0xd8>)
 8011a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a4e:	f240 23ff 	movw	r3, #767	; 0x2ff
 8011a52:	429a      	cmp	r2, r3
 8011a54:	d10a      	bne.n	8011a6c <mld6_input+0x48>
 8011a56:	4b29      	ldr	r3, [pc, #164]	; (8011afc <mld6_input+0xd8>)
 8011a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a5a:	b93b      	cbnz	r3, 8011a6c <mld6_input+0x48>
 8011a5c:	4b27      	ldr	r3, [pc, #156]	; (8011afc <mld6_input+0xd8>)
 8011a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a60:	b923      	cbnz	r3, 8011a6c <mld6_input+0x48>
 8011a62:	4b26      	ldr	r3, [pc, #152]	; (8011afc <mld6_input+0xd8>)
 8011a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011a6a:	d008      	beq.n	8011a7e <mld6_input+0x5a>
      group = mld6_lookfor_group(inp, ip6_current_dest_addr());
 8011a6c:	4924      	ldr	r1, [pc, #144]	; (8011b00 <mld6_input+0xdc>)
 8011a6e:	f7ff ffbf 	bl	80119f0 <mld6_lookfor_group>
      if (group != NULL) {
 8011a72:	2800      	cmp	r0, #0
 8011a74:	d0e2      	beq.n	8011a3c <mld6_input+0x18>
        mld6_delayed_report(group, mld_hdr->max_resp_delay);
 8011a76:	88a9      	ldrh	r1, [r5, #4]
 8011a78:	f7ff ff04 	bl	8011884 <mld6_delayed_report>
 8011a7c:	e7de      	b.n	8011a3c <mld6_input+0x18>
    if (ip6_addr_isallnodes_linklocal(ip6_current_dest_addr()) &&
 8011a7e:	f115 0f08 	cmn.w	r5, #8
 8011a82:	d00b      	beq.n	8011a9c <mld6_input+0x78>
        ip6_addr_isany(&(mld_hdr->multicast_address))) {
 8011a84:	68ab      	ldr	r3, [r5, #8]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d1f0      	bne.n	8011a6c <mld6_input+0x48>
 8011a8a:	68eb      	ldr	r3, [r5, #12]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d1ed      	bne.n	8011a6c <mld6_input+0x48>
 8011a90:	692b      	ldr	r3, [r5, #16]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d1ea      	bne.n	8011a6c <mld6_input+0x48>
 8011a96:	696b      	ldr	r3, [r5, #20]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d1e7      	bne.n	8011a6c <mld6_input+0x48>
      group = netif_mld6_data(inp);
 8011a9c:	f8d0 60d0 	ldr.w	r6, [r0, #208]	; 0xd0
      while (group != NULL) {
 8011aa0:	e004      	b.n	8011aac <mld6_input+0x88>
          mld6_delayed_report(group, mld_hdr->max_resp_delay);
 8011aa2:	88a9      	ldrh	r1, [r5, #4]
 8011aa4:	4630      	mov	r0, r6
 8011aa6:	f7ff feed 	bl	8011884 <mld6_delayed_report>
        group = group->next;
 8011aaa:	6836      	ldr	r6, [r6, #0]
      while (group != NULL) {
 8011aac:	2e00      	cmp	r6, #0
 8011aae:	d0c5      	beq.n	8011a3c <mld6_input+0x18>
        if ((!(ip6_addr_ismulticast_iflocal(&(group->group_address)))) &&
 8011ab0:	6873      	ldr	r3, [r6, #4]
 8011ab2:	f648 71ff 	movw	r1, #36863	; 0x8fff
 8011ab6:	4019      	ands	r1, r3
 8011ab8:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011abc:	4291      	cmp	r1, r2
 8011abe:	d0f4      	beq.n	8011aaa <mld6_input+0x86>
 8011ac0:	f240 22ff 	movw	r2, #767	; 0x2ff
 8011ac4:	4293      	cmp	r3, r2
 8011ac6:	d1ec      	bne.n	8011aa2 <mld6_input+0x7e>
            (!(ip6_addr_isallnodes_linklocal(&(group->group_address))))) {
 8011ac8:	68b3      	ldr	r3, [r6, #8]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d1e9      	bne.n	8011aa2 <mld6_input+0x7e>
 8011ace:	68f3      	ldr	r3, [r6, #12]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d1e6      	bne.n	8011aa2 <mld6_input+0x7e>
 8011ad4:	6933      	ldr	r3, [r6, #16]
 8011ad6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011ada:	d1e2      	bne.n	8011aa2 <mld6_input+0x7e>
 8011adc:	e7e5      	b.n	8011aaa <mld6_input+0x86>
    group = mld6_lookfor_group(inp, ip6_current_dest_addr());
 8011ade:	4908      	ldr	r1, [pc, #32]	; (8011b00 <mld6_input+0xdc>)
 8011ae0:	f7ff ff86 	bl	80119f0 <mld6_lookfor_group>
    if (group != NULL) {
 8011ae4:	2800      	cmp	r0, #0
 8011ae6:	d0a9      	beq.n	8011a3c <mld6_input+0x18>
      if (group->group_state == MLD6_GROUP_DELAYING_MEMBER) {
 8011ae8:	7e42      	ldrb	r2, [r0, #25]
 8011aea:	2a01      	cmp	r2, #1
 8011aec:	d1a6      	bne.n	8011a3c <mld6_input+0x18>
        group->timer = 0; /* stopped */
 8011aee:	2200      	movs	r2, #0
 8011af0:	8342      	strh	r2, [r0, #26]
        group->group_state = MLD6_GROUP_IDLE_MEMBER;
 8011af2:	2102      	movs	r1, #2
 8011af4:	7641      	strb	r1, [r0, #25]
        group->last_reporter_flag = 0;
 8011af6:	7602      	strb	r2, [r0, #24]
 8011af8:	e7a0      	b.n	8011a3c <mld6_input+0x18>
 8011afa:	bf00      	nop
 8011afc:	200039e8 	.word	0x200039e8
 8011b00:	20003a14 	.word	0x20003a14

08011b04 <mld6_joingroup_netif>:
{
 8011b04:	b570      	push	{r4, r5, r6, lr}
 8011b06:	b086      	sub	sp, #24
 8011b08:	4606      	mov	r6, r0
 8011b0a:	460c      	mov	r4, r1
  if (ip6_addr_lacks_zone(groupaddr, IP6_MULTICAST)) {
 8011b0c:	7c0b      	ldrb	r3, [r1, #16]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d137      	bne.n	8011b82 <mld6_joingroup_netif+0x7e>
 8011b12:	680a      	ldr	r2, [r1, #0]
 8011b14:	f24c 00ff 	movw	r0, #49407	; 0xc0ff
 8011b18:	4010      	ands	r0, r2
 8011b1a:	f248 01fe 	movw	r1, #33022	; 0x80fe
 8011b1e:	4288      	cmp	r0, r1
 8011b20:	d00a      	beq.n	8011b38 <mld6_joingroup_netif+0x34>
 8011b22:	f648 71ff 	movw	r1, #36863	; 0x8fff
 8011b26:	4011      	ands	r1, r2
 8011b28:	f240 10ff 	movw	r0, #511	; 0x1ff
 8011b2c:	4281      	cmp	r1, r0
 8011b2e:	d003      	beq.n	8011b38 <mld6_joingroup_netif+0x34>
 8011b30:	f240 20ff 	movw	r0, #767	; 0x2ff
 8011b34:	4281      	cmp	r1, r0
 8011b36:	d124      	bne.n	8011b82 <mld6_joingroup_netif+0x7e>
    ip6_addr_set(&ip6addr, groupaddr);
 8011b38:	b37c      	cbz	r4, 8011b9a <mld6_joingroup_netif+0x96>
 8011b3a:	9201      	str	r2, [sp, #4]
 8011b3c:	b37c      	cbz	r4, 8011b9e <mld6_joingroup_netif+0x9a>
 8011b3e:	6861      	ldr	r1, [r4, #4]
 8011b40:	9102      	str	r1, [sp, #8]
 8011b42:	b374      	cbz	r4, 8011ba2 <mld6_joingroup_netif+0x9e>
 8011b44:	68a1      	ldr	r1, [r4, #8]
 8011b46:	9103      	str	r1, [sp, #12]
 8011b48:	b36c      	cbz	r4, 8011ba6 <mld6_joingroup_netif+0xa2>
 8011b4a:	68e1      	ldr	r1, [r4, #12]
 8011b4c:	9104      	str	r1, [sp, #16]
    ip6_addr_assign_zone(&ip6addr, IP6_MULTICAST, netif);
 8011b4e:	f24c 00ff 	movw	r0, #49407	; 0xc0ff
 8011b52:	4010      	ands	r0, r2
 8011b54:	f248 01fe 	movw	r1, #33022	; 0x80fe
 8011b58:	4288      	cmp	r0, r1
 8011b5a:	d00b      	beq.n	8011b74 <mld6_joingroup_netif+0x70>
 8011b5c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8011b60:	0412      	lsls	r2, r2, #16
 8011b62:	0c12      	lsrs	r2, r2, #16
 8011b64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8011b68:	428a      	cmp	r2, r1
 8011b6a:	d003      	beq.n	8011b74 <mld6_joingroup_netif+0x70>
 8011b6c:	f240 21ff 	movw	r1, #767	; 0x2ff
 8011b70:	428a      	cmp	r2, r1
 8011b72:	d103      	bne.n	8011b7c <mld6_joingroup_netif+0x78>
 8011b74:	f896 30e2 	ldrb.w	r3, [r6, #226]	; 0xe2
 8011b78:	3301      	adds	r3, #1
 8011b7a:	b2db      	uxtb	r3, r3
 8011b7c:	f88d 3014 	strb.w	r3, [sp, #20]
    groupaddr = &ip6addr;
 8011b80:	ac01      	add	r4, sp, #4
  group = mld6_lookfor_group(netif, groupaddr);
 8011b82:	4621      	mov	r1, r4
 8011b84:	4630      	mov	r0, r6
 8011b86:	f7ff ff33 	bl	80119f0 <mld6_lookfor_group>
  if (group == NULL) {
 8011b8a:	4605      	mov	r5, r0
 8011b8c:	b168      	cbz	r0, 8011baa <mld6_joingroup_netif+0xa6>
  group->use++;
 8011b8e:	7f2b      	ldrb	r3, [r5, #28]
 8011b90:	3301      	adds	r3, #1
 8011b92:	772b      	strb	r3, [r5, #28]
  return ERR_OK;
 8011b94:	2000      	movs	r0, #0
}
 8011b96:	b006      	add	sp, #24
 8011b98:	bd70      	pop	{r4, r5, r6, pc}
    ip6_addr_set(&ip6addr, groupaddr);
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	e7cd      	b.n	8011b3a <mld6_joingroup_netif+0x36>
 8011b9e:	2100      	movs	r1, #0
 8011ba0:	e7ce      	b.n	8011b40 <mld6_joingroup_netif+0x3c>
 8011ba2:	2100      	movs	r1, #0
 8011ba4:	e7cf      	b.n	8011b46 <mld6_joingroup_netif+0x42>
 8011ba6:	2100      	movs	r1, #0
 8011ba8:	e7d0      	b.n	8011b4c <mld6_joingroup_netif+0x48>
    group = mld6_new_group(netif, groupaddr);
 8011baa:	4621      	mov	r1, r4
 8011bac:	4630      	mov	r0, r6
 8011bae:	f7ff fe8b 	bl	80118c8 <mld6_new_group>
    if (group == NULL) {
 8011bb2:	4605      	mov	r5, r0
 8011bb4:	b188      	cbz	r0, 8011bda <mld6_joingroup_netif+0xd6>
    if (netif->mld_mac_filter != NULL) {
 8011bb6:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
 8011bba:	b11b      	cbz	r3, 8011bc4 <mld6_joingroup_netif+0xc0>
      netif->mld_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
 8011bbc:	2201      	movs	r2, #1
 8011bbe:	4621      	mov	r1, r4
 8011bc0:	4630      	mov	r0, r6
 8011bc2:	4798      	blx	r3
    mld6_send(netif, group, ICMP6_TYPE_MLR);
 8011bc4:	2283      	movs	r2, #131	; 0x83
 8011bc6:	4629      	mov	r1, r5
 8011bc8:	4630      	mov	r0, r6
 8011bca:	f7ff feab 	bl	8011924 <mld6_send>
    mld6_delayed_report(group, MLD6_JOIN_DELAYING_MEMBER_TMR_MS);
 8011bce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8011bd2:	4628      	mov	r0, r5
 8011bd4:	f7ff fe56 	bl	8011884 <mld6_delayed_report>
 8011bd8:	e7d9      	b.n	8011b8e <mld6_joingroup_netif+0x8a>
      return ERR_MEM;
 8011bda:	f04f 30ff 	mov.w	r0, #4294967295
 8011bde:	e7da      	b.n	8011b96 <mld6_joingroup_netif+0x92>

08011be0 <mld6_leavegroup_netif>:
{
 8011be0:	b570      	push	{r4, r5, r6, lr}
 8011be2:	b086      	sub	sp, #24
 8011be4:	4605      	mov	r5, r0
 8011be6:	460c      	mov	r4, r1
  if (ip6_addr_lacks_zone(groupaddr, IP6_MULTICAST)) {
 8011be8:	7c0b      	ldrb	r3, [r1, #16]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d137      	bne.n	8011c5e <mld6_leavegroup_netif+0x7e>
 8011bee:	680a      	ldr	r2, [r1, #0]
 8011bf0:	f24c 00ff 	movw	r0, #49407	; 0xc0ff
 8011bf4:	4010      	ands	r0, r2
 8011bf6:	f248 01fe 	movw	r1, #33022	; 0x80fe
 8011bfa:	4288      	cmp	r0, r1
 8011bfc:	d00a      	beq.n	8011c14 <mld6_leavegroup_netif+0x34>
 8011bfe:	f648 71ff 	movw	r1, #36863	; 0x8fff
 8011c02:	4011      	ands	r1, r2
 8011c04:	f240 10ff 	movw	r0, #511	; 0x1ff
 8011c08:	4281      	cmp	r1, r0
 8011c0a:	d003      	beq.n	8011c14 <mld6_leavegroup_netif+0x34>
 8011c0c:	f240 20ff 	movw	r0, #767	; 0x2ff
 8011c10:	4281      	cmp	r1, r0
 8011c12:	d124      	bne.n	8011c5e <mld6_leavegroup_netif+0x7e>
    ip6_addr_set(&ip6addr, groupaddr);
 8011c14:	b38c      	cbz	r4, 8011c7a <mld6_leavegroup_netif+0x9a>
 8011c16:	9201      	str	r2, [sp, #4]
 8011c18:	b38c      	cbz	r4, 8011c7e <mld6_leavegroup_netif+0x9e>
 8011c1a:	6861      	ldr	r1, [r4, #4]
 8011c1c:	9102      	str	r1, [sp, #8]
 8011c1e:	b384      	cbz	r4, 8011c82 <mld6_leavegroup_netif+0xa2>
 8011c20:	68a1      	ldr	r1, [r4, #8]
 8011c22:	9103      	str	r1, [sp, #12]
 8011c24:	b37c      	cbz	r4, 8011c86 <mld6_leavegroup_netif+0xa6>
 8011c26:	68e1      	ldr	r1, [r4, #12]
 8011c28:	9104      	str	r1, [sp, #16]
    ip6_addr_assign_zone(&ip6addr, IP6_MULTICAST, netif);
 8011c2a:	f24c 00ff 	movw	r0, #49407	; 0xc0ff
 8011c2e:	4010      	ands	r0, r2
 8011c30:	f248 01fe 	movw	r1, #33022	; 0x80fe
 8011c34:	4288      	cmp	r0, r1
 8011c36:	d00b      	beq.n	8011c50 <mld6_leavegroup_netif+0x70>
 8011c38:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8011c3c:	0412      	lsls	r2, r2, #16
 8011c3e:	0c12      	lsrs	r2, r2, #16
 8011c40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8011c44:	428a      	cmp	r2, r1
 8011c46:	d003      	beq.n	8011c50 <mld6_leavegroup_netif+0x70>
 8011c48:	f240 21ff 	movw	r1, #767	; 0x2ff
 8011c4c:	428a      	cmp	r2, r1
 8011c4e:	d103      	bne.n	8011c58 <mld6_leavegroup_netif+0x78>
 8011c50:	f895 30e2 	ldrb.w	r3, [r5, #226]	; 0xe2
 8011c54:	3301      	adds	r3, #1
 8011c56:	b2db      	uxtb	r3, r3
 8011c58:	f88d 3014 	strb.w	r3, [sp, #20]
    groupaddr = &ip6addr;
 8011c5c:	ac01      	add	r4, sp, #4
  group = mld6_lookfor_group(netif, groupaddr);
 8011c5e:	4621      	mov	r1, r4
 8011c60:	4628      	mov	r0, r5
 8011c62:	f7ff fec5 	bl	80119f0 <mld6_lookfor_group>
  if (group != NULL) {
 8011c66:	4606      	mov	r6, r0
 8011c68:	b338      	cbz	r0, 8011cba <mld6_leavegroup_netif+0xda>
    if (group->use <= 1) {
 8011c6a:	7f03      	ldrb	r3, [r0, #28]
 8011c6c:	2b01      	cmp	r3, #1
 8011c6e:	d90c      	bls.n	8011c8a <mld6_leavegroup_netif+0xaa>
      group->use--;
 8011c70:	3b01      	subs	r3, #1
 8011c72:	7703      	strb	r3, [r0, #28]
    return ERR_OK;
 8011c74:	2000      	movs	r0, #0
}
 8011c76:	b006      	add	sp, #24
 8011c78:	bd70      	pop	{r4, r5, r6, pc}
    ip6_addr_set(&ip6addr, groupaddr);
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	e7cb      	b.n	8011c16 <mld6_leavegroup_netif+0x36>
 8011c7e:	2100      	movs	r1, #0
 8011c80:	e7cc      	b.n	8011c1c <mld6_leavegroup_netif+0x3c>
 8011c82:	2100      	movs	r1, #0
 8011c84:	e7cd      	b.n	8011c22 <mld6_leavegroup_netif+0x42>
 8011c86:	2100      	movs	r1, #0
 8011c88:	e7ce      	b.n	8011c28 <mld6_leavegroup_netif+0x48>
      mld6_remove_group(netif, group);
 8011c8a:	4601      	mov	r1, r0
 8011c8c:	4628      	mov	r0, r5
 8011c8e:	f7ff fde1 	bl	8011854 <mld6_remove_group>
      if (group->last_reporter_flag) {
 8011c92:	7e33      	ldrb	r3, [r6, #24]
 8011c94:	b95b      	cbnz	r3, 8011cae <mld6_leavegroup_netif+0xce>
      if (netif->mld_mac_filter != NULL) {
 8011c96:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
 8011c9a:	b11b      	cbz	r3, 8011ca4 <mld6_leavegroup_netif+0xc4>
        netif->mld_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	4621      	mov	r1, r4
 8011ca0:	4628      	mov	r0, r5
 8011ca2:	4798      	blx	r3
      memp_free(MEMP_MLD6_GROUP, group);
 8011ca4:	4631      	mov	r1, r6
 8011ca6:	200a      	movs	r0, #10
 8011ca8:	f7f5 f8d0 	bl	8006e4c <memp_free>
 8011cac:	e7e2      	b.n	8011c74 <mld6_leavegroup_netif+0x94>
        mld6_send(netif, group, ICMP6_TYPE_MLD);
 8011cae:	2284      	movs	r2, #132	; 0x84
 8011cb0:	4631      	mov	r1, r6
 8011cb2:	4628      	mov	r0, r5
 8011cb4:	f7ff fe36 	bl	8011924 <mld6_send>
 8011cb8:	e7ed      	b.n	8011c96 <mld6_leavegroup_netif+0xb6>
  return ERR_VAL;
 8011cba:	f06f 0005 	mvn.w	r0, #5
 8011cbe:	e7da      	b.n	8011c76 <mld6_leavegroup_netif+0x96>

08011cc0 <mld6_tmr>:
{
 8011cc0:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8011cc2:	4b0f      	ldr	r3, [pc, #60]	; (8011d00 <mld6_tmr+0x40>)
 8011cc4:	681d      	ldr	r5, [r3, #0]
 8011cc6:	e015      	b.n	8011cf4 <mld6_tmr+0x34>
      group = group->next;
 8011cc8:	6824      	ldr	r4, [r4, #0]
    while (group != NULL) {
 8011cca:	b194      	cbz	r4, 8011cf2 <mld6_tmr+0x32>
      if (group->timer > 0) {
 8011ccc:	8b63      	ldrh	r3, [r4, #26]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d0fa      	beq.n	8011cc8 <mld6_tmr+0x8>
        group->timer--;
 8011cd2:	3b01      	subs	r3, #1
 8011cd4:	b29b      	uxth	r3, r3
 8011cd6:	8363      	strh	r3, [r4, #26]
        if (group->timer == 0) {
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d1f5      	bne.n	8011cc8 <mld6_tmr+0x8>
          if (group->group_state == MLD6_GROUP_DELAYING_MEMBER) {
 8011cdc:	7e63      	ldrb	r3, [r4, #25]
 8011cde:	2b01      	cmp	r3, #1
 8011ce0:	d1f2      	bne.n	8011cc8 <mld6_tmr+0x8>
            mld6_send(netif, group, ICMP6_TYPE_MLR);
 8011ce2:	2283      	movs	r2, #131	; 0x83
 8011ce4:	4621      	mov	r1, r4
 8011ce6:	4628      	mov	r0, r5
 8011ce8:	f7ff fe1c 	bl	8011924 <mld6_send>
            group->group_state = MLD6_GROUP_IDLE_MEMBER;
 8011cec:	2302      	movs	r3, #2
 8011cee:	7663      	strb	r3, [r4, #25]
 8011cf0:	e7ea      	b.n	8011cc8 <mld6_tmr+0x8>
  NETIF_FOREACH(netif) {
 8011cf2:	682d      	ldr	r5, [r5, #0]
 8011cf4:	b115      	cbz	r5, 8011cfc <mld6_tmr+0x3c>
    struct mld_group *group = netif_mld6_data(netif);
 8011cf6:	f8d5 40d0 	ldr.w	r4, [r5, #208]	; 0xd0
    while (group != NULL) {
 8011cfa:	e7e6      	b.n	8011cca <mld6_tmr+0xa>
}
 8011cfc:	bd38      	pop	{r3, r4, r5, pc}
 8011cfe:	bf00      	nop
 8011d00:	20007b10 	.word	0x20007b10

08011d04 <nd6_find_neighbor_cache_entry>:
 * @return The neighbor cache entry index that matched, -1 if no
 * entry is found
 */
static s8_t
nd6_find_neighbor_cache_entry(const ip6_addr_t *ip6addr)
{
 8011d04:	b430      	push	{r4, r5}
 8011d06:	4604      	mov	r4, r0
  s8_t i;
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8011d08:	2000      	movs	r0, #0
 8011d0a:	e001      	b.n	8011d10 <nd6_find_neighbor_cache_entry+0xc>
 8011d0c:	3001      	adds	r0, #1
 8011d0e:	b240      	sxtb	r0, r0
 8011d10:	2809      	cmp	r0, #9
 8011d12:	dc25      	bgt.n	8011d60 <nd6_find_neighbor_cache_entry+0x5c>
    if (ip6_addr_cmp(ip6addr, &(neighbor_cache[i].next_hop_address))) {
 8011d14:	6822      	ldr	r2, [r4, #0]
 8011d16:	232c      	movs	r3, #44	; 0x2c
 8011d18:	fb03 f300 	mul.w	r3, r3, r0
 8011d1c:	4912      	ldr	r1, [pc, #72]	; (8011d68 <nd6_find_neighbor_cache_entry+0x64>)
 8011d1e:	58cb      	ldr	r3, [r1, r3]
 8011d20:	429a      	cmp	r2, r3
 8011d22:	d1f3      	bne.n	8011d0c <nd6_find_neighbor_cache_entry+0x8>
 8011d24:	6862      	ldr	r2, [r4, #4]
 8011d26:	232c      	movs	r3, #44	; 0x2c
 8011d28:	fb03 1300 	mla	r3, r3, r0, r1
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d1ec      	bne.n	8011d0c <nd6_find_neighbor_cache_entry+0x8>
 8011d32:	68a2      	ldr	r2, [r4, #8]
 8011d34:	232c      	movs	r3, #44	; 0x2c
 8011d36:	fb03 1300 	mla	r3, r3, r0, r1
 8011d3a:	689b      	ldr	r3, [r3, #8]
 8011d3c:	429a      	cmp	r2, r3
 8011d3e:	d1e5      	bne.n	8011d0c <nd6_find_neighbor_cache_entry+0x8>
 8011d40:	68e2      	ldr	r2, [r4, #12]
 8011d42:	232c      	movs	r3, #44	; 0x2c
 8011d44:	fb03 1300 	mla	r3, r3, r0, r1
 8011d48:	68db      	ldr	r3, [r3, #12]
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d1de      	bne.n	8011d0c <nd6_find_neighbor_cache_entry+0x8>
 8011d4e:	7c22      	ldrb	r2, [r4, #16]
 8011d50:	460b      	mov	r3, r1
 8011d52:	212c      	movs	r1, #44	; 0x2c
 8011d54:	fb01 3500 	mla	r5, r1, r0, r3
 8011d58:	7c2b      	ldrb	r3, [r5, #16]
 8011d5a:	429a      	cmp	r2, r3
 8011d5c:	d1d6      	bne.n	8011d0c <nd6_find_neighbor_cache_entry+0x8>
 8011d5e:	e001      	b.n	8011d64 <nd6_find_neighbor_cache_entry+0x60>
      return i;
    }
  }
  return -1;
 8011d60:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011d64:	bc30      	pop	{r4, r5}
 8011d66:	4770      	bx	lr
 8011d68:	20007b70 	.word	0x20007b70

08011d6c <nd6_find_destination_cache_entry>:
 * @return The destination cache entry index that matched, -1 if no
 * entry is found
 */
static s16_t
nd6_find_destination_cache_entry(const ip6_addr_t *ip6addr)
{
 8011d6c:	b430      	push	{r4, r5}
 8011d6e:	4604      	mov	r4, r0
  s16_t i;

  IP6_ADDR_ZONECHECK(ip6addr);

  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 8011d70:	2000      	movs	r0, #0
 8011d72:	e001      	b.n	8011d78 <nd6_find_destination_cache_entry+0xc>
 8011d74:	3001      	adds	r0, #1
 8011d76:	b200      	sxth	r0, r0
 8011d78:	2809      	cmp	r0, #9
 8011d7a:	dc2a      	bgt.n	8011dd2 <nd6_find_destination_cache_entry+0x66>
    if (ip6_addr_cmp(ip6addr, &(destination_cache[i].destination_addr))) {
 8011d7c:	6822      	ldr	r2, [r4, #0]
 8011d7e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8011d82:	011b      	lsls	r3, r3, #4
 8011d84:	4915      	ldr	r1, [pc, #84]	; (8011ddc <nd6_find_destination_cache_entry+0x70>)
 8011d86:	58cb      	ldr	r3, [r1, r3]
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	d1f3      	bne.n	8011d74 <nd6_find_destination_cache_entry+0x8>
 8011d8c:	6861      	ldr	r1, [r4, #4]
 8011d8e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8011d92:	4a12      	ldr	r2, [pc, #72]	; (8011ddc <nd6_find_destination_cache_entry+0x70>)
 8011d94:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8011d98:	685b      	ldr	r3, [r3, #4]
 8011d9a:	4299      	cmp	r1, r3
 8011d9c:	d1ea      	bne.n	8011d74 <nd6_find_destination_cache_entry+0x8>
 8011d9e:	68a1      	ldr	r1, [r4, #8]
 8011da0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8011da4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8011da8:	689b      	ldr	r3, [r3, #8]
 8011daa:	4299      	cmp	r1, r3
 8011dac:	d1e2      	bne.n	8011d74 <nd6_find_destination_cache_entry+0x8>
 8011dae:	68e1      	ldr	r1, [r4, #12]
 8011db0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8011db4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8011db8:	68db      	ldr	r3, [r3, #12]
 8011dba:	4299      	cmp	r1, r3
 8011dbc:	d1da      	bne.n	8011d74 <nd6_find_destination_cache_entry+0x8>
 8011dbe:	7c22      	ldrb	r2, [r4, #16]
 8011dc0:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8011dc4:	4b05      	ldr	r3, [pc, #20]	; (8011ddc <nd6_find_destination_cache_entry+0x70>)
 8011dc6:	eb03 1505 	add.w	r5, r3, r5, lsl #4
 8011dca:	7c2b      	ldrb	r3, [r5, #16]
 8011dcc:	429a      	cmp	r2, r3
 8011dce:	d1d1      	bne.n	8011d74 <nd6_find_destination_cache_entry+0x8>
 8011dd0:	e001      	b.n	8011dd6 <nd6_find_destination_cache_entry+0x6a>
      return i;
    }
  }
  return -1;
 8011dd2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011dd6:	bc30      	pop	{r4, r5}
 8011dd8:	4770      	bx	lr
 8011dda:	bf00      	nop
 8011ddc:	20007db4 	.word	0x20007db4

08011de0 <nd6_new_destination_cache_entry>:
{
  s16_t i, j;
  u32_t age;

  /* Find an empty entry. */
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 8011de0:	2000      	movs	r0, #0
 8011de2:	e001      	b.n	8011de8 <nd6_new_destination_cache_entry+0x8>
 8011de4:	3001      	adds	r0, #1
 8011de6:	b200      	sxth	r0, r0
 8011de8:	2809      	cmp	r0, #9
 8011dea:	dc19      	bgt.n	8011e20 <nd6_new_destination_cache_entry+0x40>
    if (ip6_addr_isany(&(destination_cache[i].destination_addr))) {
 8011dec:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8011df0:	0113      	lsls	r3, r2, #4
 8011df2:	4a14      	ldr	r2, [pc, #80]	; (8011e44 <nd6_new_destination_cache_entry+0x64>)
 8011df4:	58d3      	ldr	r3, [r2, r3]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d1f4      	bne.n	8011de4 <nd6_new_destination_cache_entry+0x4>
 8011dfa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8011dfe:	011a      	lsls	r2, r3, #4
 8011e00:	4b10      	ldr	r3, [pc, #64]	; (8011e44 <nd6_new_destination_cache_entry+0x64>)
 8011e02:	4413      	add	r3, r2
 8011e04:	685b      	ldr	r3, [r3, #4]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d1ec      	bne.n	8011de4 <nd6_new_destination_cache_entry+0x4>
 8011e0a:	4b0e      	ldr	r3, [pc, #56]	; (8011e44 <nd6_new_destination_cache_entry+0x64>)
 8011e0c:	4413      	add	r3, r2
 8011e0e:	689b      	ldr	r3, [r3, #8]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d1e7      	bne.n	8011de4 <nd6_new_destination_cache_entry+0x4>
 8011e14:	4b0b      	ldr	r3, [pc, #44]	; (8011e44 <nd6_new_destination_cache_entry+0x64>)
 8011e16:	4413      	add	r3, r2
 8011e18:	68db      	ldr	r3, [r3, #12]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d1e2      	bne.n	8011de4 <nd6_new_destination_cache_entry+0x4>
      j = i;
    }
  }

  return j;
}
 8011e1e:	4770      	bx	lr
  j = LWIP_ND6_NUM_DESTINATIONS - 1;
 8011e20:	2009      	movs	r0, #9
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 8011e22:	2300      	movs	r3, #0
 8011e24:	e001      	b.n	8011e2a <nd6_new_destination_cache_entry+0x4a>
 8011e26:	3301      	adds	r3, #1
 8011e28:	b21b      	sxth	r3, r3
 8011e2a:	2b09      	cmp	r3, #9
 8011e2c:	dcf7      	bgt.n	8011e1e <nd6_new_destination_cache_entry+0x3e>
    if (destination_cache[i].age > age) {
 8011e2e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011e32:	0111      	lsls	r1, r2, #4
 8011e34:	4a03      	ldr	r2, [pc, #12]	; (8011e44 <nd6_new_destination_cache_entry+0x64>)
 8011e36:	440a      	add	r2, r1
 8011e38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8011e3a:	2a00      	cmp	r2, #0
 8011e3c:	d0f3      	beq.n	8011e26 <nd6_new_destination_cache_entry+0x46>
      j = i;
 8011e3e:	4618      	mov	r0, r3
 8011e40:	e7f1      	b.n	8011e26 <nd6_new_destination_cache_entry+0x46>
 8011e42:	bf00      	nop
 8011e44:	20007db4 	.word	0x20007db4

08011e48 <nd6_is_prefix_in_netif>:
 * @param ip6addr the IPv6 address to match
 * @return 1 if the address is on-link, 0 otherwise
 */
static int
nd6_is_prefix_in_netif(const ip6_addr_t *ip6addr, struct netif *netif)
{
 8011e48:	b470      	push	{r4, r5, r6}
  s8_t i;

  /* Check to see if the address matches an on-link prefix. */
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	e001      	b.n	8011e52 <nd6_is_prefix_in_netif+0xa>
 8011e4e:	3301      	adds	r3, #1
 8011e50:	b25b      	sxtb	r3, r3
 8011e52:	2b04      	cmp	r3, #4
 8011e54:	dc29      	bgt.n	8011eaa <nd6_is_prefix_in_netif+0x62>
    if ((prefix_list[i].netif == netif) &&
 8011e56:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8011e5a:	4c2e      	ldr	r4, [pc, #184]	; (8011f14 <nd6_is_prefix_in_netif+0xcc>)
 8011e5c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011e60:	6952      	ldr	r2, [r2, #20]
 8011e62:	428a      	cmp	r2, r1
 8011e64:	d1f3      	bne.n	8011e4e <nd6_is_prefix_in_netif+0x6>
        (prefix_list[i].invalidation_timer > 0) &&
 8011e66:	ebc3 04c3 	rsb	r4, r3, r3, lsl #3
 8011e6a:	4d2a      	ldr	r5, [pc, #168]	; (8011f14 <nd6_is_prefix_in_netif+0xcc>)
 8011e6c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8011e70:	69a2      	ldr	r2, [r4, #24]
    if ((prefix_list[i].netif == netif) &&
 8011e72:	2a00      	cmp	r2, #0
 8011e74:	d0eb      	beq.n	8011e4e <nd6_is_prefix_in_netif+0x6>
        ip6_addr_netcmp(ip6addr, &(prefix_list[i].prefix))) {
 8011e76:	6804      	ldr	r4, [r0, #0]
 8011e78:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8011e7c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
        (prefix_list[i].invalidation_timer > 0) &&
 8011e80:	4294      	cmp	r4, r2
 8011e82:	d1e4      	bne.n	8011e4e <nd6_is_prefix_in_netif+0x6>
        ip6_addr_netcmp(ip6addr, &(prefix_list[i].prefix))) {
 8011e84:	6845      	ldr	r5, [r0, #4]
 8011e86:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8011e8a:	4c22      	ldr	r4, [pc, #136]	; (8011f14 <nd6_is_prefix_in_netif+0xcc>)
 8011e8c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011e90:	6852      	ldr	r2, [r2, #4]
 8011e92:	4295      	cmp	r5, r2
 8011e94:	d1db      	bne.n	8011e4e <nd6_is_prefix_in_netif+0x6>
 8011e96:	7c05      	ldrb	r5, [r0, #16]
 8011e98:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8011e9c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011ea0:	7c12      	ldrb	r2, [r2, #16]
 8011ea2:	4295      	cmp	r5, r2
 8011ea4:	d1d3      	bne.n	8011e4e <nd6_is_prefix_in_netif+0x6>
      return 1;
 8011ea6:	2001      	movs	r0, #1
 8011ea8:	e031      	b.n	8011f0e <nd6_is_prefix_in_netif+0xc6>
  }
  /* Check to see if address prefix matches a manually configured (= static)
   * address. Static addresses have an implied /64 subnet assignment. Dynamic
   * addresses (from autoconfiguration) have no implied subnet assignment, and
   * are thus effectively /128 assignments. See RFC 5942 for more on this. */
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8011eaa:	2300      	movs	r3, #0
 8011eac:	e009      	b.n	8011ec2 <nd6_is_prefix_in_netif+0x7a>
    if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
        netif_ip6_addr_isstatic(netif, i) &&
        ip6_addr_netcmp(ip6addr, netif_ip6_addr(netif, i))) {
 8011eae:	6805      	ldr	r5, [r0, #0]
 8011eb0:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8011eb4:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8011eb8:	6ce4      	ldr	r4, [r4, #76]	; 0x4c
        netif_ip6_addr_isstatic(netif, i) &&
 8011eba:	42a5      	cmp	r5, r4
 8011ebc:	d013      	beq.n	8011ee6 <nd6_is_prefix_in_netif+0x9e>
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8011ebe:	3301      	adds	r3, #1
 8011ec0:	b25b      	sxtb	r3, r3
 8011ec2:	2b02      	cmp	r3, #2
 8011ec4:	dc22      	bgt.n	8011f0c <nd6_is_prefix_in_netif+0xc4>
    if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8011ec6:	461a      	mov	r2, r3
 8011ec8:	18cc      	adds	r4, r1, r3
 8011eca:	f894 4094 	ldrb.w	r4, [r4, #148]	; 0x94
 8011ece:	f014 0f10 	tst.w	r4, #16
 8011ed2:	d0f4      	beq.n	8011ebe <nd6_is_prefix_in_netif+0x76>
 8011ed4:	2900      	cmp	r1, #0
 8011ed6:	d0ea      	beq.n	8011eae <nd6_is_prefix_in_netif+0x66>
        netif_ip6_addr_isstatic(netif, i) &&
 8011ed8:	f103 0426 	add.w	r4, r3, #38	; 0x26
 8011edc:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8011ee0:	2c00      	cmp	r4, #0
 8011ee2:	d1ec      	bne.n	8011ebe <nd6_is_prefix_in_netif+0x76>
 8011ee4:	e7e3      	b.n	8011eae <nd6_is_prefix_in_netif+0x66>
        ip6_addr_netcmp(ip6addr, netif_ip6_addr(netif, i))) {
 8011ee6:	6845      	ldr	r5, [r0, #4]
 8011ee8:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8011eec:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8011ef0:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8011ef2:	42a5      	cmp	r5, r4
 8011ef4:	d1e3      	bne.n	8011ebe <nd6_is_prefix_in_netif+0x76>
 8011ef6:	7c04      	ldrb	r4, [r0, #16]
 8011ef8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011efc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8011f00:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
 8011f04:	4294      	cmp	r4, r2
 8011f06:	d1da      	bne.n	8011ebe <nd6_is_prefix_in_netif+0x76>
      return 1;
 8011f08:	2001      	movs	r0, #1
 8011f0a:	e000      	b.n	8011f0e <nd6_is_prefix_in_netif+0xc6>
    }
  }
  return 0;
 8011f0c:	2000      	movs	r0, #0
}
 8011f0e:	bc70      	pop	{r4, r5, r6}
 8011f10:	4770      	bx	lr
 8011f12:	bf00      	nop
 8011f14:	20007d28 	.word	0x20007d28

08011f18 <nd6_select_router>:
 * @return the default router entry index, or -1 if no suitable
 *         router is found
 */
static s8_t
nd6_select_router(const ip6_addr_t *ip6addr, struct netif *netif)
{
 8011f18:	b410      	push	{r4}
  LWIP_UNUSED_ARG(ip6addr); /* @todo match preferred routes!! (must implement ND6_OPTION_TYPE_ROUTE_INFO) */

  /* @todo: implement default router preference */

  /* Look for valid routers. A reachable router is preferred. */
  valid_router = -1;
 8011f1a:	f04f 30ff 	mov.w	r0, #4294967295
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 8011f1e:	2300      	movs	r3, #0
 8011f20:	e00f      	b.n	8011f42 <nd6_select_router+0x2a>
    /* Is the router netif both set and apppropriate? */
    if (default_router_list[i].neighbor_entry != NULL) {
      router_netif = default_router_list[i].neighbor_entry->netif;
      if ((router_netif != NULL) && (netif != NULL ? netif == router_netif :
          (netif_is_up(router_netif) && netif_is_link_up(router_netif)))) {
 8011f22:	f892 20df 	ldrb.w	r2, [r2, #223]	; 0xdf
 8011f26:	f012 0f01 	tst.w	r2, #1
 8011f2a:	d004      	beq.n	8011f36 <nd6_select_router+0x1e>
 8011f2c:	f012 0f04 	tst.w	r2, #4
 8011f30:	d103      	bne.n	8011f3a <nd6_select_router+0x22>
 8011f32:	2200      	movs	r2, #0
 8011f34:	e017      	b.n	8011f66 <nd6_select_router+0x4e>
 8011f36:	2200      	movs	r2, #0
 8011f38:	e015      	b.n	8011f66 <nd6_select_router+0x4e>
 8011f3a:	2201      	movs	r2, #1
 8011f3c:	e013      	b.n	8011f66 <nd6_select_router+0x4e>
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 8011f3e:	3301      	adds	r3, #1
 8011f40:	b25b      	sxtb	r3, r3
 8011f42:	2b02      	cmp	r3, #2
 8011f44:	dc1b      	bgt.n	8011f7e <nd6_select_router+0x66>
    if (default_router_list[i].neighbor_entry != NULL) {
 8011f46:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011f4a:	4c2e      	ldr	r4, [pc, #184]	; (8012004 <nd6_select_router+0xec>)
 8011f4c:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8011f50:	2c00      	cmp	r4, #0
 8011f52:	d0f4      	beq.n	8011f3e <nd6_select_router+0x26>
      router_netif = default_router_list[i].neighbor_entry->netif;
 8011f54:	6962      	ldr	r2, [r4, #20]
      if ((router_netif != NULL) && (netif != NULL ? netif == router_netif :
 8011f56:	2a00      	cmp	r2, #0
 8011f58:	d0f1      	beq.n	8011f3e <nd6_select_router+0x26>
 8011f5a:	2900      	cmp	r1, #0
 8011f5c:	d0e1      	beq.n	8011f22 <nd6_select_router+0xa>
 8011f5e:	4291      	cmp	r1, r2
 8011f60:	bf14      	ite	ne
 8011f62:	2200      	movne	r2, #0
 8011f64:	2201      	moveq	r2, #1
 8011f66:	2a00      	cmp	r2, #0
 8011f68:	d0e9      	beq.n	8011f3e <nd6_select_router+0x26>
        /* Is the router valid, i.e., reachable or probably reachable as per
         * RFC 4861 Sec. 6.3.6? Note that we will never return a router that
         * has no neighbor cache entry, due to the netif association tests. */
        if (default_router_list[i].neighbor_entry->state != ND6_INCOMPLETE) {
 8011f6a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8011f6e:	2a01      	cmp	r2, #1
 8011f70:	d0e5      	beq.n	8011f3e <nd6_select_router+0x26>
          /* Is the router known to be reachable? */
          if (default_router_list[i].neighbor_entry->state == ND6_REACHABLE) {
 8011f72:	2a02      	cmp	r2, #2
 8011f74:	d043      	beq.n	8011ffe <nd6_select_router+0xe6>
            return i; /* valid and reachable - done! */
          } else if (valid_router < 0) {
 8011f76:	2800      	cmp	r0, #0
 8011f78:	dae1      	bge.n	8011f3e <nd6_select_router+0x26>
            valid_router = i; /* valid but not known to be reachable */
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	e7df      	b.n	8011f3e <nd6_select_router+0x26>
          }
        }
      }
    }
  }
  if (valid_router >= 0) {
 8011f7e:	2800      	cmp	r0, #0
 8011f80:	da3a      	bge.n	8011ff8 <nd6_select_router+0xe0>

  /* Look for any router for which we have any information at all. */
  /* last_router is used for round-robin selection of incomplete routers, as
   * recommended in RFC 4861 Sec. 6.3.6 point (2). Advance only when picking a
   * route, to select the same router as next-hop target in the common case. */
  if ((netif == NULL) && (++last_router >= LWIP_ND6_NUM_ROUTERS)) {
 8011f82:	b121      	cbz	r1, 8011f8e <nd6_select_router+0x76>
    last_router = 0;
  }
  i = last_router;
 8011f84:	4b20      	ldr	r3, [pc, #128]	; (8012008 <nd6_select_router+0xf0>)
 8011f86:	f993 0000 	ldrsb.w	r0, [r3]
  for (j = 0; j < LWIP_ND6_NUM_ROUTERS; j++) {
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	e01d      	b.n	8011fca <nd6_select_router+0xb2>
  if ((netif == NULL) && (++last_router >= LWIP_ND6_NUM_ROUTERS)) {
 8011f8e:	4a1e      	ldr	r2, [pc, #120]	; (8012008 <nd6_select_router+0xf0>)
 8011f90:	7813      	ldrb	r3, [r2, #0]
 8011f92:	3301      	adds	r3, #1
 8011f94:	b25b      	sxtb	r3, r3
 8011f96:	7013      	strb	r3, [r2, #0]
 8011f98:	2b02      	cmp	r3, #2
 8011f9a:	ddf3      	ble.n	8011f84 <nd6_select_router+0x6c>
    last_router = 0;
 8011f9c:	4613      	mov	r3, r2
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	701a      	strb	r2, [r3, #0]
 8011fa2:	e7ef      	b.n	8011f84 <nd6_select_router+0x6c>
    if (default_router_list[i].neighbor_entry != NULL) {
      router_netif = default_router_list[i].neighbor_entry->netif;
      if ((router_netif != NULL) && (netif != NULL ? netif == router_netif :
          (netif_is_up(router_netif) && netif_is_link_up(router_netif)))) {
 8011fa4:	f892 20df 	ldrb.w	r2, [r2, #223]	; 0xdf
 8011fa8:	f012 0f01 	tst.w	r2, #1
 8011fac:	d004      	beq.n	8011fb8 <nd6_select_router+0xa0>
 8011fae:	f012 0f04 	tst.w	r2, #4
 8011fb2:	d11d      	bne.n	8011ff0 <nd6_select_router+0xd8>
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	e000      	b.n	8011fba <nd6_select_router+0xa2>
 8011fb8:	2200      	movs	r2, #0
      if ((router_netif != NULL) && (netif != NULL ? netif == router_netif :
 8011fba:	b9ea      	cbnz	r2, 8011ff8 <nd6_select_router+0xe0>
        return i;
      }
    }
    if (++i >= LWIP_ND6_NUM_ROUTERS) {
 8011fbc:	3001      	adds	r0, #1
 8011fbe:	b240      	sxtb	r0, r0
 8011fc0:	2802      	cmp	r0, #2
 8011fc2:	dd00      	ble.n	8011fc6 <nd6_select_router+0xae>
      i = 0;
 8011fc4:	2000      	movs	r0, #0
  for (j = 0; j < LWIP_ND6_NUM_ROUTERS; j++) {
 8011fc6:	3301      	adds	r3, #1
 8011fc8:	b25b      	sxtb	r3, r3
 8011fca:	2b02      	cmp	r3, #2
 8011fcc:	dc12      	bgt.n	8011ff4 <nd6_select_router+0xdc>
    if (default_router_list[i].neighbor_entry != NULL) {
 8011fce:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8011fd2:	4c0c      	ldr	r4, [pc, #48]	; (8012004 <nd6_select_router+0xec>)
 8011fd4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011fd8:	2a00      	cmp	r2, #0
 8011fda:	d0ef      	beq.n	8011fbc <nd6_select_router+0xa4>
      router_netif = default_router_list[i].neighbor_entry->netif;
 8011fdc:	6952      	ldr	r2, [r2, #20]
      if ((router_netif != NULL) && (netif != NULL ? netif == router_netif :
 8011fde:	2a00      	cmp	r2, #0
 8011fe0:	d0ec      	beq.n	8011fbc <nd6_select_router+0xa4>
 8011fe2:	2900      	cmp	r1, #0
 8011fe4:	d0de      	beq.n	8011fa4 <nd6_select_router+0x8c>
 8011fe6:	4291      	cmp	r1, r2
 8011fe8:	bf14      	ite	ne
 8011fea:	2200      	movne	r2, #0
 8011fec:	2201      	moveq	r2, #1
 8011fee:	e7e4      	b.n	8011fba <nd6_select_router+0xa2>
          (netif_is_up(router_netif) && netif_is_link_up(router_netif)))) {
 8011ff0:	2201      	movs	r2, #1
 8011ff2:	e7e2      	b.n	8011fba <nd6_select_router+0xa2>
    }
  }

  /* no suitable router found. */
  return -1;
 8011ff4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ffc:	4770      	bx	lr
            return i; /* valid and reachable - done! */
 8011ffe:	4618      	mov	r0, r3
 8012000:	e7fa      	b.n	8011ff8 <nd6_select_router+0xe0>
 8012002:	bf00      	nop
 8012004:	20007f94 	.word	0x20007f94
 8012008:	200007a4 	.word	0x200007a4

0801200c <nd6_get_router>:
 * @param netif the netif on which the router is found, if known
 * @return the index of the router entry, or -1 if not found
 */
static s8_t
nd6_get_router(const ip6_addr_t *router_addr, struct netif *netif)
{
 801200c:	b430      	push	{r4, r5}
 801200e:	4605      	mov	r5, r0
  s8_t i;

  IP6_ADDR_ZONECHECK_NETIF(router_addr, netif);

  /* Look for router. */
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 8012010:	2000      	movs	r0, #0
 8012012:	e005      	b.n	8012020 <nd6_get_router+0x14>
    if ((default_router_list[i].neighbor_entry != NULL) &&
        ((netif != NULL) ? netif == default_router_list[i].neighbor_entry->netif : 1) &&
        ip6_addr_cmp(router_addr, &(default_router_list[i].neighbor_entry->next_hop_address))) {
 8012014:	682c      	ldr	r4, [r5, #0]
 8012016:	681a      	ldr	r2, [r3, #0]
        ((netif != NULL) ? netif == default_router_list[i].neighbor_entry->netif : 1) &&
 8012018:	4294      	cmp	r4, r2
 801201a:	d010      	beq.n	801203e <nd6_get_router+0x32>
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 801201c:	3001      	adds	r0, #1
 801201e:	b240      	sxtb	r0, r0
 8012020:	2802      	cmp	r0, #2
 8012022:	dc1d      	bgt.n	8012060 <nd6_get_router+0x54>
    if ((default_router_list[i].neighbor_entry != NULL) &&
 8012024:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8012028:	4a0f      	ldr	r2, [pc, #60]	; (8012068 <nd6_get_router+0x5c>)
 801202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d0f4      	beq.n	801201c <nd6_get_router+0x10>
 8012032:	2900      	cmp	r1, #0
 8012034:	d0ee      	beq.n	8012014 <nd6_get_router+0x8>
        ((netif != NULL) ? netif == default_router_list[i].neighbor_entry->netif : 1) &&
 8012036:	695a      	ldr	r2, [r3, #20]
    if ((default_router_list[i].neighbor_entry != NULL) &&
 8012038:	428a      	cmp	r2, r1
 801203a:	d1ef      	bne.n	801201c <nd6_get_router+0x10>
 801203c:	e7ea      	b.n	8012014 <nd6_get_router+0x8>
        ip6_addr_cmp(router_addr, &(default_router_list[i].neighbor_entry->next_hop_address))) {
 801203e:	686c      	ldr	r4, [r5, #4]
 8012040:	685a      	ldr	r2, [r3, #4]
 8012042:	4294      	cmp	r4, r2
 8012044:	d1ea      	bne.n	801201c <nd6_get_router+0x10>
 8012046:	68ac      	ldr	r4, [r5, #8]
 8012048:	689a      	ldr	r2, [r3, #8]
 801204a:	4294      	cmp	r4, r2
 801204c:	d1e6      	bne.n	801201c <nd6_get_router+0x10>
 801204e:	68ec      	ldr	r4, [r5, #12]
 8012050:	68da      	ldr	r2, [r3, #12]
 8012052:	4294      	cmp	r4, r2
 8012054:	d1e2      	bne.n	801201c <nd6_get_router+0x10>
 8012056:	7c2a      	ldrb	r2, [r5, #16]
 8012058:	7c1b      	ldrb	r3, [r3, #16]
 801205a:	429a      	cmp	r2, r3
 801205c:	d1de      	bne.n	801201c <nd6_get_router+0x10>
 801205e:	e001      	b.n	8012064 <nd6_get_router+0x58>
      return i;
    }
  }

  /* router not found. */
  return -1;
 8012060:	f04f 30ff 	mov.w	r0, #4294967295
}
 8012064:	bc30      	pop	{r4, r5}
 8012066:	4770      	bx	lr
 8012068:	20007f94 	.word	0x20007f94

0801206c <nd6_get_onlink_prefix>:
 * @param netif the netif on which the prefix is on-link
 * @return the index on the prefix table, or -1 if not found
 */
static s8_t
nd6_get_onlink_prefix(const ip6_addr_t *prefix, struct netif *netif)
{
 801206c:	b430      	push	{r4, r5}
 801206e:	4604      	mov	r4, r0
  s8_t i;

  /* Look for prefix in list. */
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 8012070:	2000      	movs	r0, #0
 8012072:	e001      	b.n	8012078 <nd6_get_onlink_prefix+0xc>
 8012074:	3001      	adds	r0, #1
 8012076:	b240      	sxtb	r0, r0
 8012078:	2804      	cmp	r0, #4
 801207a:	dc22      	bgt.n	80120c2 <nd6_get_onlink_prefix+0x56>
    if ((ip6_addr_netcmp(&(prefix_list[i].prefix), prefix)) &&
 801207c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8012080:	4a12      	ldr	r2, [pc, #72]	; (80120cc <nd6_get_onlink_prefix+0x60>)
 8012082:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8012086:	6823      	ldr	r3, [r4, #0]
 8012088:	429a      	cmp	r2, r3
 801208a:	d1f3      	bne.n	8012074 <nd6_get_onlink_prefix+0x8>
 801208c:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8012090:	4a0e      	ldr	r2, [pc, #56]	; (80120cc <nd6_get_onlink_prefix+0x60>)
 8012092:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012096:	685a      	ldr	r2, [r3, #4]
 8012098:	6863      	ldr	r3, [r4, #4]
 801209a:	429a      	cmp	r2, r3
 801209c:	d1ea      	bne.n	8012074 <nd6_get_onlink_prefix+0x8>
 801209e:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80120a2:	4a0a      	ldr	r2, [pc, #40]	; (80120cc <nd6_get_onlink_prefix+0x60>)
 80120a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80120a8:	7c1a      	ldrb	r2, [r3, #16]
 80120aa:	7c23      	ldrb	r3, [r4, #16]
 80120ac:	429a      	cmp	r2, r3
 80120ae:	d1e1      	bne.n	8012074 <nd6_get_onlink_prefix+0x8>
        (prefix_list[i].netif == netif)) {
 80120b0:	ebc0 05c0 	rsb	r5, r0, r0, lsl #3
 80120b4:	4b05      	ldr	r3, [pc, #20]	; (80120cc <nd6_get_onlink_prefix+0x60>)
 80120b6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80120ba:	696b      	ldr	r3, [r5, #20]
    if ((ip6_addr_netcmp(&(prefix_list[i].prefix), prefix)) &&
 80120bc:	428b      	cmp	r3, r1
 80120be:	d1d9      	bne.n	8012074 <nd6_get_onlink_prefix+0x8>
 80120c0:	e001      	b.n	80120c6 <nd6_get_onlink_prefix+0x5a>
      return i;
    }
  }

  /* Entry not available. */
  return -1;
 80120c2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80120c6:	bc30      	pop	{r4, r5}
 80120c8:	4770      	bx	lr
 80120ca:	bf00      	nop
 80120cc:	20007d28 	.word	0x20007d28

080120d0 <nd6_new_onlink_prefix>:
 * @param netif the netif on which the prefix is on-link
 * @return the index on the prefix table, or -1 if not created
 */
static s8_t
nd6_new_onlink_prefix(const ip6_addr_t *prefix, struct netif *netif)
{
 80120d0:	b430      	push	{r4, r5}
 80120d2:	4605      	mov	r5, r0
  s8_t i;

  /* Create new entry. */
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 80120d4:	2000      	movs	r0, #0
 80120d6:	2804      	cmp	r0, #4
 80120d8:	dc48      	bgt.n	801216c <nd6_new_onlink_prefix+0x9c>
    if ((prefix_list[i].netif == NULL) ||
 80120da:	4604      	mov	r4, r0
 80120dc:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80120e0:	4a24      	ldr	r2, [pc, #144]	; (8012174 <nd6_new_onlink_prefix+0xa4>)
 80120e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80120e6:	695b      	ldr	r3, [r3, #20]
 80120e8:	b143      	cbz	r3, 80120fc <nd6_new_onlink_prefix+0x2c>
        (prefix_list[i].invalidation_timer == 0)) {
 80120ea:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80120ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80120f2:	699b      	ldr	r3, [r3, #24]
    if ((prefix_list[i].netif == NULL) ||
 80120f4:	b113      	cbz	r3, 80120fc <nd6_new_onlink_prefix+0x2c>
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 80120f6:	3001      	adds	r0, #1
 80120f8:	b240      	sxtb	r0, r0
 80120fa:	e7ec      	b.n	80120d6 <nd6_new_onlink_prefix+0x6>
      /* Found empty prefix entry. */
      prefix_list[i].netif = netif;
 80120fc:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8012100:	4a1c      	ldr	r2, [pc, #112]	; (8012174 <nd6_new_onlink_prefix+0xa4>)
 8012102:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012106:	6159      	str	r1, [r3, #20]
      ip6_addr_set(&(prefix_list[i].prefix), prefix);
 8012108:	b335      	cbz	r5, 8012158 <nd6_new_onlink_prefix+0x88>
 801210a:	6829      	ldr	r1, [r5, #0]
 801210c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8012110:	4a18      	ldr	r2, [pc, #96]	; (8012174 <nd6_new_onlink_prefix+0xa4>)
 8012112:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8012116:	b30d      	cbz	r5, 801215c <nd6_new_onlink_prefix+0x8c>
 8012118:	6869      	ldr	r1, [r5, #4]
 801211a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 801211e:	4a15      	ldr	r2, [pc, #84]	; (8012174 <nd6_new_onlink_prefix+0xa4>)
 8012120:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012124:	6059      	str	r1, [r3, #4]
 8012126:	b1dd      	cbz	r5, 8012160 <nd6_new_onlink_prefix+0x90>
 8012128:	68a9      	ldr	r1, [r5, #8]
 801212a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 801212e:	4a11      	ldr	r2, [pc, #68]	; (8012174 <nd6_new_onlink_prefix+0xa4>)
 8012130:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012134:	6099      	str	r1, [r3, #8]
 8012136:	b1ad      	cbz	r5, 8012164 <nd6_new_onlink_prefix+0x94>
 8012138:	68e9      	ldr	r1, [r5, #12]
 801213a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 801213e:	4a0d      	ldr	r2, [pc, #52]	; (8012174 <nd6_new_onlink_prefix+0xa4>)
 8012140:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012144:	60d9      	str	r1, [r3, #12]
 8012146:	b17d      	cbz	r5, 8012168 <nd6_new_onlink_prefix+0x98>
 8012148:	7c2a      	ldrb	r2, [r5, #16]
 801214a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 801214e:	4b09      	ldr	r3, [pc, #36]	; (8012174 <nd6_new_onlink_prefix+0xa4>)
 8012150:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012154:	7422      	strb	r2, [r4, #16]
      return i;
 8012156:	e00b      	b.n	8012170 <nd6_new_onlink_prefix+0xa0>
      ip6_addr_set(&(prefix_list[i].prefix), prefix);
 8012158:	2100      	movs	r1, #0
 801215a:	e7d7      	b.n	801210c <nd6_new_onlink_prefix+0x3c>
 801215c:	2100      	movs	r1, #0
 801215e:	e7dc      	b.n	801211a <nd6_new_onlink_prefix+0x4a>
 8012160:	2100      	movs	r1, #0
 8012162:	e7e2      	b.n	801212a <nd6_new_onlink_prefix+0x5a>
 8012164:	2100      	movs	r1, #0
 8012166:	e7e8      	b.n	801213a <nd6_new_onlink_prefix+0x6a>
 8012168:	2200      	movs	r2, #0
 801216a:	e7ee      	b.n	801214a <nd6_new_onlink_prefix+0x7a>
    }
  }

  /* Entry not available. */
  return -1;
 801216c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8012170:	bc30      	pop	{r4, r5}
 8012172:	4770      	bx	lr
 8012174:	20007d28 	.word	0x20007d28

08012178 <nd6_send_q>:
 *
 * @param i the neighbor to send packets to
 */
static void
nd6_send_q(s8_t i)
{
 8012178:	b530      	push	{r4, r5, lr}
 801217a:	b087      	sub	sp, #28
 801217c:	4605      	mov	r5, r0
  ip6_addr_t dest;
#if LWIP_ND6_QUEUEING
  struct nd6_q_entry *q;
#endif /* LWIP_ND6_QUEUEING */

  if ((i < 0) || (i >= LWIP_ND6_NUM_NEIGHBORS)) {
 801217e:	b2c3      	uxtb	r3, r0
 8012180:	2b09      	cmp	r3, #9
 8012182:	d91d      	bls.n	80121c0 <nd6_send_q+0x48>
    /* free the queued IP packet */
    pbuf_free(neighbor_cache[i].q);
    neighbor_cache[i].q = NULL;
  }
#endif /* LWIP_ND6_QUEUEING */
}
 8012184:	b007      	add	sp, #28
 8012186:	bd30      	pop	{r4, r5, pc}
    ip6_addr_assign_zone(&dest, IP6_UNKNOWN, neighbor_cache[i].netif);
 8012188:	4a23      	ldr	r2, [pc, #140]	; (8012218 <nd6_send_q+0xa0>)
 801218a:	232c      	movs	r3, #44	; 0x2c
 801218c:	fb03 2305 	mla	r3, r3, r5, r2
 8012190:	695b      	ldr	r3, [r3, #20]
 8012192:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8012196:	3301      	adds	r3, #1
 8012198:	b2db      	uxtb	r3, r3
 801219a:	f88d 3014 	strb.w	r3, [sp, #20]
    (neighbor_cache[i].netif)->output_ip6(neighbor_cache[i].netif, q->p, &dest);
 801219e:	4a1e      	ldr	r2, [pc, #120]	; (8012218 <nd6_send_q+0xa0>)
 80121a0:	232c      	movs	r3, #44	; 0x2c
 80121a2:	fb03 2305 	mla	r3, r3, r5, r2
 80121a6:	6958      	ldr	r0, [r3, #20]
 80121a8:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 80121ac:	aa01      	add	r2, sp, #4
 80121ae:	6861      	ldr	r1, [r4, #4]
 80121b0:	4798      	blx	r3
    pbuf_free(q->p);
 80121b2:	6860      	ldr	r0, [r4, #4]
 80121b4:	f7f5 faee 	bl	8007794 <pbuf_free>
    memp_free(MEMP_ND6_QUEUE, q);
 80121b8:	4621      	mov	r1, r4
 80121ba:	2008      	movs	r0, #8
 80121bc:	f7f4 fe46 	bl	8006e4c <memp_free>
  while (neighbor_cache[i].q != NULL) {
 80121c0:	4a15      	ldr	r2, [pc, #84]	; (8012218 <nd6_send_q+0xa0>)
 80121c2:	232c      	movs	r3, #44	; 0x2c
 80121c4:	fb03 2305 	mla	r3, r3, r5, r2
 80121c8:	6a1c      	ldr	r4, [r3, #32]
 80121ca:	2c00      	cmp	r4, #0
 80121cc:	d0da      	beq.n	8012184 <nd6_send_q+0xc>
    neighbor_cache[i].q = q->next;
 80121ce:	6822      	ldr	r2, [r4, #0]
 80121d0:	4911      	ldr	r1, [pc, #68]	; (8012218 <nd6_send_q+0xa0>)
 80121d2:	232c      	movs	r3, #44	; 0x2c
 80121d4:	fb03 1305 	mla	r3, r3, r5, r1
 80121d8:	621a      	str	r2, [r3, #32]
    ip6hdr = (struct ip6_hdr *)(q->p->payload);
 80121da:	6863      	ldr	r3, [r4, #4]
 80121dc:	685a      	ldr	r2, [r3, #4]
    ip6_addr_copy_from_packed(dest, ip6hdr->dest);
 80121de:	6993      	ldr	r3, [r2, #24]
 80121e0:	9301      	str	r3, [sp, #4]
 80121e2:	69d1      	ldr	r1, [r2, #28]
 80121e4:	9102      	str	r1, [sp, #8]
 80121e6:	6a11      	ldr	r1, [r2, #32]
 80121e8:	9103      	str	r1, [sp, #12]
 80121ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80121ec:	9204      	str	r2, [sp, #16]
    ip6_addr_assign_zone(&dest, IP6_UNKNOWN, neighbor_cache[i].netif);
 80121ee:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 80121f2:	4019      	ands	r1, r3
 80121f4:	f248 02fe 	movw	r2, #33022	; 0x80fe
 80121f8:	4291      	cmp	r1, r2
 80121fa:	d0c5      	beq.n	8012188 <nd6_send_q+0x10>
 80121fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012200:	041b      	lsls	r3, r3, #16
 8012202:	0c1b      	lsrs	r3, r3, #16
 8012204:	f240 12ff 	movw	r2, #511	; 0x1ff
 8012208:	4293      	cmp	r3, r2
 801220a:	d0bd      	beq.n	8012188 <nd6_send_q+0x10>
 801220c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8012210:	4293      	cmp	r3, r2
 8012212:	d0b9      	beq.n	8012188 <nd6_send_q+0x10>
 8012214:	2300      	movs	r3, #0
 8012216:	e7c0      	b.n	801219a <nd6_send_q+0x22>
 8012218:	20007b70 	.word	0x20007b70

0801221c <nd6_duplicate_addr_detected>:
{
 801221c:	b538      	push	{r3, r4, r5, lr}
 801221e:	4605      	mov	r5, r0
 8012220:	460c      	mov	r4, r1
  netif_ip6_addr_set_state(netif, addr_idx, IP6_ADDR_DUPLICATED);
 8012222:	2240      	movs	r2, #64	; 0x40
 8012224:	f7f5 f87a 	bl	800731c <netif_ip6_addr_set_state>
  if (addr_idx == 0) {
 8012228:	b1bc      	cbz	r4, 801225a <nd6_duplicate_addr_detected+0x3e>
}
 801222a:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 801222c:	3401      	adds	r4, #1
 801222e:	b264      	sxtb	r4, r4
 8012230:	2c02      	cmp	r4, #2
 8012232:	dcfa      	bgt.n	801222a <nd6_duplicate_addr_detected+0xe>
      if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i)) &&
 8012234:	4623      	mov	r3, r4
 8012236:	192a      	adds	r2, r5, r4
 8012238:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
 801223c:	2a00      	cmp	r2, #0
 801223e:	d0f5      	beq.n	801222c <nd6_duplicate_addr_detected+0x10>
 8012240:	2d00      	cmp	r5, #0
 8012242:	d0f3      	beq.n	801222c <nd6_duplicate_addr_detected+0x10>
          !netif_ip6_addr_isstatic(netif, i)) {
 8012244:	3326      	adds	r3, #38	; 0x26
 8012246:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d0ee      	beq.n	801222c <nd6_duplicate_addr_detected+0x10>
        netif_ip6_addr_set_state(netif, i, IP6_ADDR_DUPLICATED);
 801224e:	2240      	movs	r2, #64	; 0x40
 8012250:	4621      	mov	r1, r4
 8012252:	4628      	mov	r0, r5
 8012254:	f7f5 f862 	bl	800731c <netif_ip6_addr_set_state>
 8012258:	e7e8      	b.n	801222c <nd6_duplicate_addr_detected+0x10>
    for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 801225a:	2401      	movs	r4, #1
 801225c:	e7e8      	b.n	8012230 <nd6_duplicate_addr_detected+0x14>
	...

08012260 <nd6_process_autoconfig_prefix>:
{
 8012260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012264:	4604      	mov	r4, r0
 8012266:	460d      	mov	r5, r1
 8012268:	4690      	mov	r8, r2
  valid_life = lwip_htonl(prefix_opt->valid_lifetime);
 801226a:	6848      	ldr	r0, [r1, #4]
 801226c:	f7f3 ff85 	bl	800617a <lwip_htonl>
 8012270:	4606      	mov	r6, r0
  pref_life = lwip_htonl(prefix_opt->preferred_lifetime);
 8012272:	68a8      	ldr	r0, [r5, #8]
 8012274:	f7f3 ff81 	bl	800617a <lwip_htonl>
  if (pref_life > valid_life || prefix_opt->prefix_length != 64) {
 8012278:	4286      	cmp	r6, r0
 801227a:	f0c0 80d9 	bcc.w	8012430 <nd6_process_autoconfig_prefix+0x1d0>
 801227e:	4607      	mov	r7, r0
 8012280:	78ab      	ldrb	r3, [r5, #2]
 8012282:	2b40      	cmp	r3, #64	; 0x40
 8012284:	f040 80d4 	bne.w	8012430 <nd6_process_autoconfig_prefix+0x1d0>
  for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8012288:	2501      	movs	r5, #1
 801228a:	e018      	b.n	80122be <nd6_process_autoconfig_prefix+0x5e>
      } else if (remaining_life > ND6_2HRS) {
 801228c:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8012290:	d94b      	bls.n	801232a <nd6_process_autoconfig_prefix+0xca>
        netif_ip6_addr_set_valid_life(netif, i, ND6_2HRS);
 8012292:	f105 0326 	add.w	r3, r5, #38	; 0x26
 8012296:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 801229a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 801229e:	e044      	b.n	801232a <nd6_process_autoconfig_prefix+0xca>
      LWIP_ASSERT("bad valid lifetime", !netif_ip6_addr_isstatic(netif, i));
 80122a0:	4b64      	ldr	r3, [pc, #400]	; (8012434 <nd6_process_autoconfig_prefix+0x1d4>)
 80122a2:	22de      	movs	r2, #222	; 0xde
 80122a4:	4964      	ldr	r1, [pc, #400]	; (8012438 <nd6_process_autoconfig_prefix+0x1d8>)
 80122a6:	4865      	ldr	r0, [pc, #404]	; (801243c <nd6_process_autoconfig_prefix+0x1dc>)
 80122a8:	f001 ffc4 	bl	8014234 <iprintf>
 80122ac:	e043      	b.n	8012336 <nd6_process_autoconfig_prefix+0xd6>
        netif_ip6_addr_set_state(netif, i, IP6_ADDR_PREFERRED);
 80122ae:	2230      	movs	r2, #48	; 0x30
 80122b0:	4629      	mov	r1, r5
 80122b2:	4620      	mov	r0, r4
 80122b4:	f7f5 f832 	bl	800731c <netif_ip6_addr_set_state>
 80122b8:	e041      	b.n	801233e <nd6_process_autoconfig_prefix+0xde>
  for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80122ba:	3501      	adds	r5, #1
 80122bc:	b26d      	sxtb	r5, r5
 80122be:	2d02      	cmp	r5, #2
 80122c0:	dc43      	bgt.n	801234a <nd6_process_autoconfig_prefix+0xea>
    addr_state = netif_ip6_addr_state(netif, i);
 80122c2:	46aa      	mov	sl, r5
 80122c4:	1963      	adds	r3, r4, r5
 80122c6:	f893 9094 	ldrb.w	r9, [r3, #148]	; 0x94
    if (!ip6_addr_isinvalid(addr_state) && !netif_ip6_addr_isstatic(netif, i) &&
 80122ca:	f1b9 0f00 	cmp.w	r9, #0
 80122ce:	d0f4      	beq.n	80122ba <nd6_process_autoconfig_prefix+0x5a>
 80122d0:	2c00      	cmp	r4, #0
 80122d2:	d0f2      	beq.n	80122ba <nd6_process_autoconfig_prefix+0x5a>
 80122d4:	f105 0326 	add.w	r3, r5, #38	; 0x26
 80122d8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d0ec      	beq.n	80122ba <nd6_process_autoconfig_prefix+0x5a>
        ip6_addr_netcmp(prefix_addr, netif_ip6_addr(netif, i))) {
 80122e0:	f8d8 1000 	ldr.w	r1, [r8]
 80122e4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80122e8:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80122ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    if (!ip6_addr_isinvalid(addr_state) && !netif_ip6_addr_isstatic(netif, i) &&
 80122ee:	4291      	cmp	r1, r2
 80122f0:	d1e3      	bne.n	80122ba <nd6_process_autoconfig_prefix+0x5a>
        ip6_addr_netcmp(prefix_addr, netif_ip6_addr(netif, i))) {
 80122f2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80122f6:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80122fa:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80122fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8012300:	4291      	cmp	r1, r2
 8012302:	d1da      	bne.n	80122ba <nd6_process_autoconfig_prefix+0x5a>
 8012304:	f898 1010 	ldrb.w	r1, [r8, #16]
 8012308:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801230c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8012310:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
 8012314:	4291      	cmp	r1, r2
 8012316:	d1d0      	bne.n	80122ba <nd6_process_autoconfig_prefix+0x5a>
      if (valid_life > ND6_2HRS || valid_life > remaining_life) {
 8012318:	f5b6 5fe1 	cmp.w	r6, #7200	; 0x1c20
 801231c:	d801      	bhi.n	8012322 <nd6_process_autoconfig_prefix+0xc2>
 801231e:	42b3      	cmp	r3, r6
 8012320:	d2b4      	bcs.n	801228c <nd6_process_autoconfig_prefix+0x2c>
        netif_ip6_addr_set_valid_life(netif, i, valid_life);
 8012322:	f10a 0326 	add.w	r3, sl, #38	; 0x26
 8012326:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
      LWIP_ASSERT("bad valid lifetime", !netif_ip6_addr_isstatic(netif, i));
 801232a:	f10a 0326 	add.w	r3, sl, #38	; 0x26
 801232e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d0b4      	beq.n	80122a0 <nd6_process_autoconfig_prefix+0x40>
      if (pref_life > 0 && addr_state == IP6_ADDR_DEPRECATED) {
 8012336:	b117      	cbz	r7, 801233e <nd6_process_autoconfig_prefix+0xde>
 8012338:	f1b9 0f10 	cmp.w	r9, #16
 801233c:	d0b7      	beq.n	80122ae <nd6_process_autoconfig_prefix+0x4e>
      netif_ip6_addr_set_pref_life(netif, i, pref_life);
 801233e:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 8012342:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 8012346:	6067      	str	r7, [r4, #4]
      return; /* there should be at most one matching address */
 8012348:	e072      	b.n	8012430 <nd6_process_autoconfig_prefix+0x1d0>
  addr_state = netif_ip6_addr_state(netif, 0);
 801234a:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
  if (!netif->ip6_autoconfig_enabled || valid_life == IP6_ADDR_LIFE_STATIC ||
 801234e:	f894 30e3 	ldrb.w	r3, [r4, #227]	; 0xe3
 8012352:	2b00      	cmp	r3, #0
 8012354:	d06c      	beq.n	8012430 <nd6_process_autoconfig_prefix+0x1d0>
 8012356:	2e00      	cmp	r6, #0
 8012358:	d06a      	beq.n	8012430 <nd6_process_autoconfig_prefix+0x1d0>
 801235a:	2a00      	cmp	r2, #0
 801235c:	d068      	beq.n	8012430 <nd6_process_autoconfig_prefix+0x1d0>
      ip6_addr_isinvalid(addr_state) || ip6_addr_isduplicated(addr_state)) {
 801235e:	2a40      	cmp	r2, #64	; 0x40
 8012360:	d066      	beq.n	8012430 <nd6_process_autoconfig_prefix+0x1d0>
  IP6_ADDR(&ip6addr, prefix_addr->addr[0], prefix_addr->addr[1],
 8012362:	f8d8 0000 	ldr.w	r0, [r8]
 8012366:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801236a:	f8d4 e054 	ldr.w	lr, [r4, #84]	; 0x54
 801236e:	f8d4 8058 	ldr.w	r8, [r4, #88]	; 0x58
  ip6_addr_assign_zone(&ip6addr, IP6_UNICAST, netif);
 8012372:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8012376:	4002      	ands	r2, r0
 8012378:	f248 03fe 	movw	r3, #33022	; 0x80fe
 801237c:	429a      	cmp	r2, r3
 801237e:	d003      	beq.n	8012388 <nd6_process_autoconfig_prefix+0x128>
 8012380:	2500      	movs	r5, #0
  free_idx = 0;
 8012382:	2100      	movs	r1, #0
  for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8012384:	2301      	movs	r3, #1
 8012386:	e008      	b.n	801239a <nd6_process_autoconfig_prefix+0x13a>
  ip6_addr_assign_zone(&ip6addr, IP6_UNICAST, netif);
 8012388:	f894 50e2 	ldrb.w	r5, [r4, #226]	; 0xe2
 801238c:	3501      	adds	r5, #1
 801238e:	b2ed      	uxtb	r5, r5
 8012390:	e7f7      	b.n	8012382 <nd6_process_autoconfig_prefix+0x122>
    } else if (free_idx == 0) {
 8012392:	b901      	cbnz	r1, 8012396 <nd6_process_autoconfig_prefix+0x136>
      free_idx = i;
 8012394:	4619      	mov	r1, r3
  for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8012396:	3301      	adds	r3, #1
 8012398:	b25b      	sxtb	r3, r3
 801239a:	2b02      	cmp	r3, #2
 801239c:	dc28      	bgt.n	80123f0 <nd6_process_autoconfig_prefix+0x190>
    if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i))) {
 801239e:	18e2      	adds	r2, r4, r3
 80123a0:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
 80123a4:	2a00      	cmp	r2, #0
 80123a6:	d0f4      	beq.n	8012392 <nd6_process_autoconfig_prefix+0x132>
      if (ip6_addr_cmp(&ip6addr, netif_ip6_addr(netif, i))) {
 80123a8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80123ac:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80123b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80123b2:	4290      	cmp	r0, r2
 80123b4:	d1ef      	bne.n	8012396 <nd6_process_autoconfig_prefix+0x136>
 80123b6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80123ba:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80123be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80123c0:	4594      	cmp	ip, r2
 80123c2:	d1e8      	bne.n	8012396 <nd6_process_autoconfig_prefix+0x136>
 80123c4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80123c8:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80123cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80123ce:	4596      	cmp	lr, r2
 80123d0:	d1e1      	bne.n	8012396 <nd6_process_autoconfig_prefix+0x136>
 80123d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80123d6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80123da:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80123dc:	4590      	cmp	r8, r2
 80123de:	d1da      	bne.n	8012396 <nd6_process_autoconfig_prefix+0x136>
 80123e0:	2218      	movs	r2, #24
 80123e2:	fb02 4903 	mla	r9, r2, r3, r4
 80123e6:	f899 205c 	ldrb.w	r2, [r9, #92]	; 0x5c
 80123ea:	42aa      	cmp	r2, r5
 80123ec:	d1d3      	bne.n	8012396 <nd6_process_autoconfig_prefix+0x136>
 80123ee:	e01f      	b.n	8012430 <nd6_process_autoconfig_prefix+0x1d0>
  if (free_idx == 0) {
 80123f0:	b1f1      	cbz	r1, 8012430 <nd6_process_autoconfig_prefix+0x1d0>
  ip_addr_copy_from_ip6(netif->ip6_addr[free_idx], ip6addr);
 80123f2:	460a      	mov	r2, r1
 80123f4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80123f8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80123fc:	64d8      	str	r0, [r3, #76]	; 0x4c
 80123fe:	f8c3 c050 	str.w	ip, [r3, #80]	; 0x50
 8012402:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
 8012406:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
 801240a:	f883 505c 	strb.w	r5, [r3, #92]	; 0x5c
 801240e:	2006      	movs	r0, #6
 8012410:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
  netif_ip6_addr_set_valid_life(netif, free_idx, valid_life);
 8012414:	b11c      	cbz	r4, 801241e <nd6_process_autoconfig_prefix+0x1be>
 8012416:	f101 0326 	add.w	r3, r1, #38	; 0x26
 801241a:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
  netif_ip6_addr_set_pref_life(netif, free_idx, pref_life);
 801241e:	b11c      	cbz	r4, 8012428 <nd6_process_autoconfig_prefix+0x1c8>
 8012420:	3228      	adds	r2, #40	; 0x28
 8012422:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012426:	6057      	str	r7, [r2, #4]
  netif_ip6_addr_set_state(netif, free_idx, IP6_ADDR_TENTATIVE);
 8012428:	2208      	movs	r2, #8
 801242a:	4620      	mov	r0, r4
 801242c:	f7f4 ff76 	bl	800731c <netif_ip6_addr_set_state>
}
 8012430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012434:	08017d58 	.word	0x08017d58
 8012438:	08017d8c 	.word	0x08017d8c
 801243c:	08015418 	.word	0x08015418

08012440 <nd6_free_q>:
{
 8012440:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("q != NULL", q != NULL);
 8012442:	4604      	mov	r4, r0
 8012444:	b148      	cbz	r0, 801245a <nd6_free_q+0x1a>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
 8012446:	6863      	ldr	r3, [r4, #4]
 8012448:	b9bb      	cbnz	r3, 801247a <nd6_free_q+0x3a>
 801244a:	4b13      	ldr	r3, [pc, #76]	; (8012498 <nd6_free_q+0x58>)
 801244c:	f640 026f 	movw	r2, #2159	; 0x86f
 8012450:	4912      	ldr	r1, [pc, #72]	; (801249c <nd6_free_q+0x5c>)
 8012452:	4813      	ldr	r0, [pc, #76]	; (80124a0 <nd6_free_q+0x60>)
 8012454:	f001 feee 	bl	8014234 <iprintf>
 8012458:	e00f      	b.n	801247a <nd6_free_q+0x3a>
  LWIP_ASSERT("q != NULL", q != NULL);
 801245a:	4b0f      	ldr	r3, [pc, #60]	; (8012498 <nd6_free_q+0x58>)
 801245c:	f640 026e 	movw	r2, #2158	; 0x86e
 8012460:	4910      	ldr	r1, [pc, #64]	; (80124a4 <nd6_free_q+0x64>)
 8012462:	480f      	ldr	r0, [pc, #60]	; (80124a0 <nd6_free_q+0x60>)
 8012464:	f001 fee6 	bl	8014234 <iprintf>
 8012468:	e7ed      	b.n	8012446 <nd6_free_q+0x6>
    pbuf_free(r->p);
 801246a:	6860      	ldr	r0, [r4, #4]
 801246c:	f7f5 f992 	bl	8007794 <pbuf_free>
    memp_free(MEMP_ND6_QUEUE, r);
 8012470:	4621      	mov	r1, r4
 8012472:	2008      	movs	r0, #8
 8012474:	f7f4 fcea 	bl	8006e4c <memp_free>
    q = q->next;
 8012478:	462c      	mov	r4, r5
  while (q) {
 801247a:	b15c      	cbz	r4, 8012494 <nd6_free_q+0x54>
    q = q->next;
 801247c:	6825      	ldr	r5, [r4, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 801247e:	6863      	ldr	r3, [r4, #4]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d1f2      	bne.n	801246a <nd6_free_q+0x2a>
 8012484:	4b04      	ldr	r3, [pc, #16]	; (8012498 <nd6_free_q+0x58>)
 8012486:	f640 0273 	movw	r2, #2163	; 0x873
 801248a:	4907      	ldr	r1, [pc, #28]	; (80124a8 <nd6_free_q+0x68>)
 801248c:	4804      	ldr	r0, [pc, #16]	; (80124a0 <nd6_free_q+0x60>)
 801248e:	f001 fed1 	bl	8014234 <iprintf>
 8012492:	e7ea      	b.n	801246a <nd6_free_q+0x2a>
}
 8012494:	bd38      	pop	{r3, r4, r5, pc}
 8012496:	bf00      	nop
 8012498:	08017d58 	.word	0x08017d58
 801249c:	08017da0 	.word	0x08017da0
 80124a0:	08015418 	.word	0x08015418
 80124a4:	08017680 	.word	0x08017680
 80124a8:	08017db0 	.word	0x08017db0

080124ac <nd6_free_neighbor_cache_entry>:
  if ((i < 0) || (i >= LWIP_ND6_NUM_NEIGHBORS)) {
 80124ac:	b2c3      	uxtb	r3, r0
 80124ae:	2b09      	cmp	r3, #9
 80124b0:	d827      	bhi.n	8012502 <nd6_free_neighbor_cache_entry+0x56>
{
 80124b2:	b510      	push	{r4, lr}
 80124b4:	4604      	mov	r4, r0
  if (neighbor_cache[i].isrouter) {
 80124b6:	4a13      	ldr	r2, [pc, #76]	; (8012504 <nd6_free_neighbor_cache_entry+0x58>)
 80124b8:	232c      	movs	r3, #44	; 0x2c
 80124ba:	fb03 2300 	mla	r3, r3, r0, r2
 80124be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80124c2:	b9eb      	cbnz	r3, 8012500 <nd6_free_neighbor_cache_entry+0x54>
  if (neighbor_cache[i].q != NULL) {
 80124c4:	232c      	movs	r3, #44	; 0x2c
 80124c6:	fb03 2300 	mla	r3, r3, r0, r2
 80124ca:	6a18      	ldr	r0, [r3, #32]
 80124cc:	b138      	cbz	r0, 80124de <nd6_free_neighbor_cache_entry+0x32>
    nd6_free_q(neighbor_cache[i].q);
 80124ce:	f7ff ffb7 	bl	8012440 <nd6_free_q>
    neighbor_cache[i].q = NULL;
 80124d2:	4a0c      	ldr	r2, [pc, #48]	; (8012504 <nd6_free_neighbor_cache_entry+0x58>)
 80124d4:	232c      	movs	r3, #44	; 0x2c
 80124d6:	fb03 2304 	mla	r3, r3, r4, r2
 80124da:	2200      	movs	r2, #0
 80124dc:	621a      	str	r2, [r3, #32]
  neighbor_cache[i].state = ND6_NO_ENTRY;
 80124de:	4909      	ldr	r1, [pc, #36]	; (8012504 <nd6_free_neighbor_cache_entry+0x58>)
 80124e0:	202c      	movs	r0, #44	; 0x2c
 80124e2:	fb00 f404 	mul.w	r4, r0, r4
 80124e6:	190a      	adds	r2, r1, r4
 80124e8:	2300      	movs	r3, #0
 80124ea:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  neighbor_cache[i].isrouter = 0;
 80124ee:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
  neighbor_cache[i].netif = NULL;
 80124f2:	6153      	str	r3, [r2, #20]
  neighbor_cache[i].counter.reachable_time = 0;
 80124f4:	6293      	str	r3, [r2, #40]	; 0x28
  ip6_addr_set_zero(&(neighbor_cache[i].next_hop_address));
 80124f6:	510b      	str	r3, [r1, r4]
 80124f8:	6053      	str	r3, [r2, #4]
 80124fa:	6093      	str	r3, [r2, #8]
 80124fc:	60d3      	str	r3, [r2, #12]
 80124fe:	7413      	strb	r3, [r2, #16]
}
 8012500:	bd10      	pop	{r4, pc}
 8012502:	4770      	bx	lr
 8012504:	20007b70 	.word	0x20007b70

08012508 <nd6_new_neighbor_cache_entry>:
{
 8012508:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 801250a:	2400      	movs	r4, #0
 801250c:	2c09      	cmp	r4, #9
 801250e:	dc0b      	bgt.n	8012528 <nd6_new_neighbor_cache_entry+0x20>
    if (neighbor_cache[i].state == ND6_NO_ENTRY) {
 8012510:	4a6c      	ldr	r2, [pc, #432]	; (80126c4 <nd6_new_neighbor_cache_entry+0x1bc>)
 8012512:	232c      	movs	r3, #44	; 0x2c
 8012514:	fb03 2304 	mla	r3, r3, r4, r2
 8012518:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801251c:	2b00      	cmp	r3, #0
 801251e:	f000 80cb 	beq.w	80126b8 <nd6_new_neighbor_cache_entry+0x1b0>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8012522:	3401      	adds	r4, #1
 8012524:	b264      	sxtb	r4, r4
 8012526:	e7f1      	b.n	801250c <nd6_new_neighbor_cache_entry+0x4>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8012528:	2400      	movs	r4, #0
 801252a:	e001      	b.n	8012530 <nd6_new_neighbor_cache_entry+0x28>
 801252c:	3401      	adds	r4, #1
 801252e:	b264      	sxtb	r4, r4
 8012530:	2c09      	cmp	r4, #9
 8012532:	dc12      	bgt.n	801255a <nd6_new_neighbor_cache_entry+0x52>
    if ((neighbor_cache[i].state == ND6_STALE) &&
 8012534:	4a63      	ldr	r2, [pc, #396]	; (80126c4 <nd6_new_neighbor_cache_entry+0x1bc>)
 8012536:	232c      	movs	r3, #44	; 0x2c
 8012538:	fb03 2304 	mla	r3, r3, r4, r2
 801253c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012540:	2b03      	cmp	r3, #3
 8012542:	d1f3      	bne.n	801252c <nd6_new_neighbor_cache_entry+0x24>
        (!neighbor_cache[i].isrouter)) {
 8012544:	232c      	movs	r3, #44	; 0x2c
 8012546:	fb03 2304 	mla	r3, r3, r4, r2
 801254a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    if ((neighbor_cache[i].state == ND6_STALE) &&
 801254e:	2b00      	cmp	r3, #0
 8012550:	d1ec      	bne.n	801252c <nd6_new_neighbor_cache_entry+0x24>
      nd6_free_neighbor_cache_entry(i);
 8012552:	4620      	mov	r0, r4
 8012554:	f7ff ffaa 	bl	80124ac <nd6_free_neighbor_cache_entry>
      return i;
 8012558:	e0ae      	b.n	80126b8 <nd6_new_neighbor_cache_entry+0x1b0>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 801255a:	2400      	movs	r4, #0
 801255c:	e001      	b.n	8012562 <nd6_new_neighbor_cache_entry+0x5a>
 801255e:	3401      	adds	r4, #1
 8012560:	b264      	sxtb	r4, r4
 8012562:	2c09      	cmp	r4, #9
 8012564:	dc12      	bgt.n	801258c <nd6_new_neighbor_cache_entry+0x84>
    if ((neighbor_cache[i].state == ND6_PROBE) &&
 8012566:	4a57      	ldr	r2, [pc, #348]	; (80126c4 <nd6_new_neighbor_cache_entry+0x1bc>)
 8012568:	232c      	movs	r3, #44	; 0x2c
 801256a:	fb03 2304 	mla	r3, r3, r4, r2
 801256e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012572:	2b05      	cmp	r3, #5
 8012574:	d1f3      	bne.n	801255e <nd6_new_neighbor_cache_entry+0x56>
        (!neighbor_cache[i].isrouter)) {
 8012576:	232c      	movs	r3, #44	; 0x2c
 8012578:	fb03 2304 	mla	r3, r3, r4, r2
 801257c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    if ((neighbor_cache[i].state == ND6_PROBE) &&
 8012580:	2b00      	cmp	r3, #0
 8012582:	d1ec      	bne.n	801255e <nd6_new_neighbor_cache_entry+0x56>
      nd6_free_neighbor_cache_entry(i);
 8012584:	4620      	mov	r0, r4
 8012586:	f7ff ff91 	bl	80124ac <nd6_free_neighbor_cache_entry>
      return i;
 801258a:	e095      	b.n	80126b8 <nd6_new_neighbor_cache_entry+0x1b0>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 801258c:	2400      	movs	r4, #0
 801258e:	e001      	b.n	8012594 <nd6_new_neighbor_cache_entry+0x8c>
 8012590:	3401      	adds	r4, #1
 8012592:	b264      	sxtb	r4, r4
 8012594:	2c09      	cmp	r4, #9
 8012596:	dc12      	bgt.n	80125be <nd6_new_neighbor_cache_entry+0xb6>
    if ((neighbor_cache[i].state == ND6_DELAY) &&
 8012598:	4a4a      	ldr	r2, [pc, #296]	; (80126c4 <nd6_new_neighbor_cache_entry+0x1bc>)
 801259a:	232c      	movs	r3, #44	; 0x2c
 801259c:	fb03 2304 	mla	r3, r3, r4, r2
 80125a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80125a4:	2b04      	cmp	r3, #4
 80125a6:	d1f3      	bne.n	8012590 <nd6_new_neighbor_cache_entry+0x88>
        (!neighbor_cache[i].isrouter)) {
 80125a8:	232c      	movs	r3, #44	; 0x2c
 80125aa:	fb03 2304 	mla	r3, r3, r4, r2
 80125ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    if ((neighbor_cache[i].state == ND6_DELAY) &&
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d1ec      	bne.n	8012590 <nd6_new_neighbor_cache_entry+0x88>
      nd6_free_neighbor_cache_entry(i);
 80125b6:	4620      	mov	r0, r4
 80125b8:	f7ff ff78 	bl	80124ac <nd6_free_neighbor_cache_entry>
      return i;
 80125bc:	e07c      	b.n	80126b8 <nd6_new_neighbor_cache_entry+0x1b0>
  time = 0xfffffffful;
 80125be:	f04f 35ff 	mov.w	r5, #4294967295
  j = -1;
 80125c2:	462c      	mov	r4, r5
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 80125c4:	2300      	movs	r3, #0
 80125c6:	e001      	b.n	80125cc <nd6_new_neighbor_cache_entry+0xc4>
 80125c8:	3301      	adds	r3, #1
 80125ca:	b25b      	sxtb	r3, r3
 80125cc:	2b09      	cmp	r3, #9
 80125ce:	dc18      	bgt.n	8012602 <nd6_new_neighbor_cache_entry+0xfa>
    if ((neighbor_cache[i].state == ND6_REACHABLE) &&
 80125d0:	493c      	ldr	r1, [pc, #240]	; (80126c4 <nd6_new_neighbor_cache_entry+0x1bc>)
 80125d2:	222c      	movs	r2, #44	; 0x2c
 80125d4:	fb02 1203 	mla	r2, r2, r3, r1
 80125d8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80125dc:	2a02      	cmp	r2, #2
 80125de:	d1f3      	bne.n	80125c8 <nd6_new_neighbor_cache_entry+0xc0>
        (!neighbor_cache[i].isrouter)) {
 80125e0:	222c      	movs	r2, #44	; 0x2c
 80125e2:	fb02 1203 	mla	r2, r2, r3, r1
 80125e6:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
    if ((neighbor_cache[i].state == ND6_REACHABLE) &&
 80125ea:	2a00      	cmp	r2, #0
 80125ec:	d1ec      	bne.n	80125c8 <nd6_new_neighbor_cache_entry+0xc0>
      if (neighbor_cache[i].counter.reachable_time < time) {
 80125ee:	460a      	mov	r2, r1
 80125f0:	212c      	movs	r1, #44	; 0x2c
 80125f2:	fb01 2003 	mla	r0, r1, r3, r2
 80125f6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80125f8:	42aa      	cmp	r2, r5
 80125fa:	d2e5      	bcs.n	80125c8 <nd6_new_neighbor_cache_entry+0xc0>
        time = neighbor_cache[i].counter.reachable_time;
 80125fc:	4615      	mov	r5, r2
        j = i;
 80125fe:	461c      	mov	r4, r3
 8012600:	e7e2      	b.n	80125c8 <nd6_new_neighbor_cache_entry+0xc0>
  if (j >= 0) {
 8012602:	2c00      	cmp	r4, #0
 8012604:	da04      	bge.n	8012610 <nd6_new_neighbor_cache_entry+0x108>
  time = 0;
 8012606:	2500      	movs	r5, #0
  j = -1;
 8012608:	f04f 34ff 	mov.w	r4, #4294967295
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 801260c:	462b      	mov	r3, r5
 801260e:	e005      	b.n	801261c <nd6_new_neighbor_cache_entry+0x114>
    nd6_free_neighbor_cache_entry(j);
 8012610:	4620      	mov	r0, r4
 8012612:	f7ff ff4b 	bl	80124ac <nd6_free_neighbor_cache_entry>
    return j;
 8012616:	e04f      	b.n	80126b8 <nd6_new_neighbor_cache_entry+0x1b0>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8012618:	3301      	adds	r3, #1
 801261a:	b25b      	sxtb	r3, r3
 801261c:	2b09      	cmp	r3, #9
 801261e:	dc1e      	bgt.n	801265e <nd6_new_neighbor_cache_entry+0x156>
        (neighbor_cache[i].q == NULL) &&
 8012620:	4928      	ldr	r1, [pc, #160]	; (80126c4 <nd6_new_neighbor_cache_entry+0x1bc>)
 8012622:	222c      	movs	r2, #44	; 0x2c
 8012624:	fb02 1203 	mla	r2, r2, r3, r1
 8012628:	6a12      	ldr	r2, [r2, #32]
    if (
 801262a:	2a00      	cmp	r2, #0
 801262c:	d1f4      	bne.n	8012618 <nd6_new_neighbor_cache_entry+0x110>
        (neighbor_cache[i].state == ND6_INCOMPLETE) &&
 801262e:	222c      	movs	r2, #44	; 0x2c
 8012630:	fb02 1203 	mla	r2, r2, r3, r1
 8012634:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
        (neighbor_cache[i].q == NULL) &&
 8012638:	2a01      	cmp	r2, #1
 801263a:	d1ed      	bne.n	8012618 <nd6_new_neighbor_cache_entry+0x110>
        (!neighbor_cache[i].isrouter)) {
 801263c:	222c      	movs	r2, #44	; 0x2c
 801263e:	fb02 1203 	mla	r2, r2, r3, r1
 8012642:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
        (neighbor_cache[i].state == ND6_INCOMPLETE) &&
 8012646:	2a00      	cmp	r2, #0
 8012648:	d1e6      	bne.n	8012618 <nd6_new_neighbor_cache_entry+0x110>
      if (neighbor_cache[i].counter.probes_sent >= time) {
 801264a:	460a      	mov	r2, r1
 801264c:	212c      	movs	r1, #44	; 0x2c
 801264e:	fb01 2003 	mla	r0, r1, r3, r2
 8012652:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8012654:	42aa      	cmp	r2, r5
 8012656:	d3df      	bcc.n	8012618 <nd6_new_neighbor_cache_entry+0x110>
        time = neighbor_cache[i].counter.probes_sent;
 8012658:	4615      	mov	r5, r2
        j = i;
 801265a:	461c      	mov	r4, r3
 801265c:	e7dc      	b.n	8012618 <nd6_new_neighbor_cache_entry+0x110>
  if (j >= 0) {
 801265e:	2c00      	cmp	r4, #0
 8012660:	da04      	bge.n	801266c <nd6_new_neighbor_cache_entry+0x164>
  time = 0;
 8012662:	2500      	movs	r5, #0
  j = -1;
 8012664:	f04f 34ff 	mov.w	r4, #4294967295
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8012668:	462b      	mov	r3, r5
 801266a:	e005      	b.n	8012678 <nd6_new_neighbor_cache_entry+0x170>
    nd6_free_neighbor_cache_entry(j);
 801266c:	4620      	mov	r0, r4
 801266e:	f7ff ff1d 	bl	80124ac <nd6_free_neighbor_cache_entry>
    return j;
 8012672:	e021      	b.n	80126b8 <nd6_new_neighbor_cache_entry+0x1b0>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8012674:	3301      	adds	r3, #1
 8012676:	b25b      	sxtb	r3, r3
 8012678:	2b09      	cmp	r3, #9
 801267a:	dc18      	bgt.n	80126ae <nd6_new_neighbor_cache_entry+0x1a6>
    if ((neighbor_cache[i].state == ND6_INCOMPLETE) &&
 801267c:	4911      	ldr	r1, [pc, #68]	; (80126c4 <nd6_new_neighbor_cache_entry+0x1bc>)
 801267e:	222c      	movs	r2, #44	; 0x2c
 8012680:	fb02 1203 	mla	r2, r2, r3, r1
 8012684:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8012688:	2a01      	cmp	r2, #1
 801268a:	d1f3      	bne.n	8012674 <nd6_new_neighbor_cache_entry+0x16c>
        (!neighbor_cache[i].isrouter)) {
 801268c:	222c      	movs	r2, #44	; 0x2c
 801268e:	fb02 1203 	mla	r2, r2, r3, r1
 8012692:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
    if ((neighbor_cache[i].state == ND6_INCOMPLETE) &&
 8012696:	2a00      	cmp	r2, #0
 8012698:	d1ec      	bne.n	8012674 <nd6_new_neighbor_cache_entry+0x16c>
      if (neighbor_cache[i].counter.probes_sent >= time) {
 801269a:	460a      	mov	r2, r1
 801269c:	212c      	movs	r1, #44	; 0x2c
 801269e:	fb01 2003 	mla	r0, r1, r3, r2
 80126a2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80126a4:	42aa      	cmp	r2, r5
 80126a6:	d3e5      	bcc.n	8012674 <nd6_new_neighbor_cache_entry+0x16c>
        time = neighbor_cache[i].counter.probes_sent;
 80126a8:	4615      	mov	r5, r2
        j = i;
 80126aa:	461c      	mov	r4, r3
 80126ac:	e7e2      	b.n	8012674 <nd6_new_neighbor_cache_entry+0x16c>
  if (j >= 0) {
 80126ae:	2c00      	cmp	r4, #0
 80126b0:	db04      	blt.n	80126bc <nd6_new_neighbor_cache_entry+0x1b4>
    nd6_free_neighbor_cache_entry(j);
 80126b2:	4620      	mov	r0, r4
 80126b4:	f7ff fefa 	bl	80124ac <nd6_free_neighbor_cache_entry>
}
 80126b8:	4620      	mov	r0, r4
 80126ba:	bd38      	pop	{r3, r4, r5, pc}
  return -1;
 80126bc:	f04f 34ff 	mov.w	r4, #4294967295
 80126c0:	e7fa      	b.n	80126b8 <nd6_new_neighbor_cache_entry+0x1b0>
 80126c2:	bf00      	nop
 80126c4:	20007b70 	.word	0x20007b70

080126c8 <nd6_send_na>:
{
 80126c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126cc:	b084      	sub	sp, #16
 80126ce:	4604      	mov	r4, r0
 80126d0:	4617      	mov	r7, r2
  LWIP_ASSERT("target address is required", target_addr != NULL);
 80126d2:	460d      	mov	r5, r1
 80126d4:	2900      	cmp	r1, #0
 80126d6:	d057      	beq.n	8012788 <nd6_send_na+0xc0>
  lladdr_opt_len = ((netif->hwaddr_len + 2) >> 3) + (((netif->hwaddr_len + 2) & 0x07) ? 1 : 0);
 80126d8:	f894 30de 	ldrb.w	r3, [r4, #222]	; 0xde
 80126dc:	3302      	adds	r3, #2
 80126de:	f013 0207 	ands.w	r2, r3, #7
 80126e2:	bf18      	it	ne
 80126e4:	2201      	movne	r2, #1
 80126e6:	eb02 08d3 	add.w	r8, r2, r3, lsr #3
  p = pbuf_alloc(PBUF_IP, sizeof(struct na_header) + (lladdr_opt_len << 3), PBUF_RAM);
 80126ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80126ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80126f2:	3118      	adds	r1, #24
 80126f4:	2036      	movs	r0, #54	; 0x36
 80126f6:	f7f5 f8af 	bl	8007858 <pbuf_alloc>
  if (p == NULL) {
 80126fa:	4606      	mov	r6, r0
 80126fc:	2800      	cmp	r0, #0
 80126fe:	d040      	beq.n	8012782 <nd6_send_na+0xba>
  na_hdr = (struct na_header *)p->payload;
 8012700:	6840      	ldr	r0, [r0, #4]
  na_hdr->type = ICMP6_TYPE_NA;
 8012702:	2288      	movs	r2, #136	; 0x88
 8012704:	7002      	strb	r2, [r0, #0]
  na_hdr->code = 0;
 8012706:	2100      	movs	r1, #0
 8012708:	7041      	strb	r1, [r0, #1]
  na_hdr->chksum = 0;
 801270a:	7081      	strb	r1, [r0, #2]
 801270c:	70c1      	strb	r1, [r0, #3]
  na_hdr->flags = flags & 0xf0;
 801270e:	f007 02f0 	and.w	r2, r7, #240	; 0xf0
 8012712:	7102      	strb	r2, [r0, #4]
  na_hdr->reserved[0] = 0;
 8012714:	7141      	strb	r1, [r0, #5]
  na_hdr->reserved[1] = 0;
 8012716:	7181      	strb	r1, [r0, #6]
  na_hdr->reserved[2] = 0;
 8012718:	71c1      	strb	r1, [r0, #7]
  ip6_addr_copy_to_packed(na_hdr->target_address, *target_addr);
 801271a:	682a      	ldr	r2, [r5, #0]
 801271c:	6082      	str	r2, [r0, #8]
 801271e:	686a      	ldr	r2, [r5, #4]
 8012720:	60c2      	str	r2, [r0, #12]
 8012722:	68aa      	ldr	r2, [r5, #8]
 8012724:	6102      	str	r2, [r0, #16]
 8012726:	68ea      	ldr	r2, [r5, #12]
 8012728:	6142      	str	r2, [r0, #20]
  lladdr_opt->type = ND6_OPTION_TYPE_TARGET_LLADDR;
 801272a:	2202      	movs	r2, #2
 801272c:	7602      	strb	r2, [r0, #24]
  lladdr_opt->length = (u8_t)lladdr_opt_len;
 801272e:	f880 8019 	strb.w	r8, [r0, #25]
  SMEMCPY(lladdr_opt->addr, netif->hwaddr, netif->hwaddr_len);
 8012732:	f894 20de 	ldrb.w	r2, [r4, #222]	; 0xde
 8012736:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
 801273a:	301a      	adds	r0, #26
 801273c:	f001 fd4a 	bl	80141d4 <memcpy>
  if (flags & ND6_SEND_FLAG_MULTICAST_DEST) {
 8012740:	f017 0f01 	tst.w	r7, #1
 8012744:	d028      	beq.n	8012798 <nd6_send_na+0xd0>
    ip6_addr_set_solicitednode(&multicast_address, target_addr->addr[3]);
 8012746:	4a1e      	ldr	r2, [pc, #120]	; (80127c0 <nd6_send_na+0xf8>)
 8012748:	f240 23ff 	movw	r3, #767	; 0x2ff
 801274c:	6013      	str	r3, [r2, #0]
 801274e:	2300      	movs	r3, #0
 8012750:	6053      	str	r3, [r2, #4]
 8012752:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012756:	6093      	str	r3, [r2, #8]
 8012758:	68eb      	ldr	r3, [r5, #12]
 801275a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 801275e:	60d3      	str	r3, [r2, #12]
    ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 8012760:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
 8012764:	3301      	adds	r3, #1
 8012766:	7413      	strb	r3, [r2, #16]
  ip6_output_if(p, src_addr, dest_addr,
 8012768:	9402      	str	r4, [sp, #8]
 801276a:	233a      	movs	r3, #58	; 0x3a
 801276c:	9301      	str	r3, [sp, #4]
 801276e:	2300      	movs	r3, #0
 8012770:	9300      	str	r3, [sp, #0]
 8012772:	23ff      	movs	r3, #255	; 0xff
 8012774:	4629      	mov	r1, r5
 8012776:	4630      	mov	r0, r6
 8012778:	f7fe fc16 	bl	8010fa8 <ip6_output_if>
  pbuf_free(p);
 801277c:	4630      	mov	r0, r6
 801277e:	f7f5 f809 	bl	8007794 <pbuf_free>
}
 8012782:	b004      	add	sp, #16
 8012784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("target address is required", target_addr != NULL);
 8012788:	4b0e      	ldr	r3, [pc, #56]	; (80127c4 <nd6_send_na+0xfc>)
 801278a:	f240 42ef 	movw	r2, #1263	; 0x4ef
 801278e:	490e      	ldr	r1, [pc, #56]	; (80127c8 <nd6_send_na+0x100>)
 8012790:	480e      	ldr	r0, [pc, #56]	; (80127cc <nd6_send_na+0x104>)
 8012792:	f001 fd4f 	bl	8014234 <iprintf>
 8012796:	e79f      	b.n	80126d8 <nd6_send_na+0x10>
  } else if (flags & ND6_SEND_FLAG_ALLNODES_DEST) {
 8012798:	f017 0f02 	tst.w	r7, #2
 801279c:	d00e      	beq.n	80127bc <nd6_send_na+0xf4>
    ip6_addr_set_allnodes_linklocal(&multicast_address);
 801279e:	4a08      	ldr	r2, [pc, #32]	; (80127c0 <nd6_send_na+0xf8>)
 80127a0:	f240 23ff 	movw	r3, #767	; 0x2ff
 80127a4:	6013      	str	r3, [r2, #0]
 80127a6:	2300      	movs	r3, #0
 80127a8:	6053      	str	r3, [r2, #4]
 80127aa:	6093      	str	r3, [r2, #8]
 80127ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80127b0:	60d3      	str	r3, [r2, #12]
    ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 80127b2:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
 80127b6:	3301      	adds	r3, #1
 80127b8:	7413      	strb	r3, [r2, #16]
    dest_addr = &multicast_address;
 80127ba:	e7d5      	b.n	8012768 <nd6_send_na+0xa0>
    dest_addr = ip6_current_src_addr();
 80127bc:	4a04      	ldr	r2, [pc, #16]	; (80127d0 <nd6_send_na+0x108>)
 80127be:	e7d3      	b.n	8012768 <nd6_send_na+0xa0>
 80127c0:	200007a8 	.word	0x200007a8
 80127c4:	08017d58 	.word	0x08017d58
 80127c8:	08017dc0 	.word	0x08017dc0
 80127cc:	08015418 	.word	0x08015418
 80127d0:	200039fc 	.word	0x200039fc

080127d4 <nd6_send_rs>:
{
 80127d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127d6:	b085      	sub	sp, #20
 80127d8:	4604      	mov	r4, r0
  if (ip6_addr_isvalid(netif_ip6_addr_state(netif, 0))) {
 80127da:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
 80127de:	f013 0f10 	tst.w	r3, #16
 80127e2:	d052      	beq.n	801288a <nd6_send_rs+0xb6>
    src_addr = netif_ip6_addr(netif, 0);
 80127e4:	f100 064c 	add.w	r6, r0, #76	; 0x4c
  ip6_addr_set_allrouters_linklocal(&multicast_address);
 80127e8:	4b2c      	ldr	r3, [pc, #176]	; (801289c <nd6_send_rs+0xc8>)
 80127ea:	f240 22ff 	movw	r2, #767	; 0x2ff
 80127ee:	601a      	str	r2, [r3, #0]
 80127f0:	2200      	movs	r2, #0
 80127f2:	605a      	str	r2, [r3, #4]
 80127f4:	609a      	str	r2, [r3, #8]
 80127f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80127fa:	60da      	str	r2, [r3, #12]
  ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 80127fc:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
 8012800:	3201      	adds	r2, #1
 8012802:	741a      	strb	r2, [r3, #16]
  if (src_addr != IP6_ADDR_ANY6) {
 8012804:	4b26      	ldr	r3, [pc, #152]	; (80128a0 <nd6_send_rs+0xcc>)
 8012806:	429e      	cmp	r6, r3
 8012808:	d041      	beq.n	801288e <nd6_send_rs+0xba>
    lladdr_opt_len = ((netif->hwaddr_len + 2) >> 3) + (((netif->hwaddr_len + 2) & 0x07) ? 1 : 0);
 801280a:	f894 50de 	ldrb.w	r5, [r4, #222]	; 0xde
 801280e:	1cab      	adds	r3, r5, #2
 8012810:	f013 0507 	ands.w	r5, r3, #7
 8012814:	bf18      	it	ne
 8012816:	2501      	movne	r5, #1
 8012818:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
  p = pbuf_alloc(PBUF_IP, sizeof(struct rs_header) + (lladdr_opt_len << 3), PBUF_RAM);
 801281c:	00e9      	lsls	r1, r5, #3
 801281e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012822:	3108      	adds	r1, #8
 8012824:	2036      	movs	r0, #54	; 0x36
 8012826:	f7f5 f817 	bl	8007858 <pbuf_alloc>
  if (p == NULL) {
 801282a:	4607      	mov	r7, r0
 801282c:	b398      	cbz	r0, 8012896 <nd6_send_rs+0xc2>
  rs_hdr = (struct rs_header *)p->payload;
 801282e:	6843      	ldr	r3, [r0, #4]
  rs_hdr->type = ICMP6_TYPE_RS;
 8012830:	2285      	movs	r2, #133	; 0x85
 8012832:	701a      	strb	r2, [r3, #0]
  rs_hdr->code = 0;
 8012834:	2200      	movs	r2, #0
 8012836:	705a      	strb	r2, [r3, #1]
  rs_hdr->chksum = 0;
 8012838:	709a      	strb	r2, [r3, #2]
 801283a:	70da      	strb	r2, [r3, #3]
  rs_hdr->reserved = 0;
 801283c:	711a      	strb	r2, [r3, #4]
 801283e:	715a      	strb	r2, [r3, #5]
 8012840:	719a      	strb	r2, [r3, #6]
 8012842:	71da      	strb	r2, [r3, #7]
  if (src_addr != IP6_ADDR_ANY6) {
 8012844:	4b16      	ldr	r3, [pc, #88]	; (80128a0 <nd6_send_rs+0xcc>)
 8012846:	429e      	cmp	r6, r3
 8012848:	d00a      	beq.n	8012860 <nd6_send_rs+0x8c>
    lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct rs_header));
 801284a:	6840      	ldr	r0, [r0, #4]
    lladdr_opt->type = ND6_OPTION_TYPE_SOURCE_LLADDR;
 801284c:	2301      	movs	r3, #1
 801284e:	7203      	strb	r3, [r0, #8]
    lladdr_opt->length = (u8_t)lladdr_opt_len;
 8012850:	7245      	strb	r5, [r0, #9]
    SMEMCPY(lladdr_opt->addr, netif->hwaddr, netif->hwaddr_len);
 8012852:	f894 20de 	ldrb.w	r2, [r4, #222]	; 0xde
 8012856:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
 801285a:	300a      	adds	r0, #10
 801285c:	f001 fcba 	bl	80141d4 <memcpy>
  err = ip6_output_if(p, (src_addr == IP6_ADDR_ANY6) ? NULL : src_addr, &multicast_address,
 8012860:	4b0f      	ldr	r3, [pc, #60]	; (80128a0 <nd6_send_rs+0xcc>)
 8012862:	429e      	cmp	r6, r3
 8012864:	d015      	beq.n	8012892 <nd6_send_rs+0xbe>
 8012866:	9402      	str	r4, [sp, #8]
 8012868:	233a      	movs	r3, #58	; 0x3a
 801286a:	9301      	str	r3, [sp, #4]
 801286c:	2300      	movs	r3, #0
 801286e:	9300      	str	r3, [sp, #0]
 8012870:	23ff      	movs	r3, #255	; 0xff
 8012872:	4a0a      	ldr	r2, [pc, #40]	; (801289c <nd6_send_rs+0xc8>)
 8012874:	4631      	mov	r1, r6
 8012876:	4638      	mov	r0, r7
 8012878:	f7fe fb96 	bl	8010fa8 <ip6_output_if>
 801287c:	4604      	mov	r4, r0
  pbuf_free(p);
 801287e:	4638      	mov	r0, r7
 8012880:	f7f4 ff88 	bl	8007794 <pbuf_free>
}
 8012884:	4620      	mov	r0, r4
 8012886:	b005      	add	sp, #20
 8012888:	bdf0      	pop	{r4, r5, r6, r7, pc}
    src_addr = IP6_ADDR_ANY6;
 801288a:	4e05      	ldr	r6, [pc, #20]	; (80128a0 <nd6_send_rs+0xcc>)
 801288c:	e7ac      	b.n	80127e8 <nd6_send_rs+0x14>
  u16_t lladdr_opt_len = 0;
 801288e:	2500      	movs	r5, #0
 8012890:	e7c4      	b.n	801281c <nd6_send_rs+0x48>
  err = ip6_output_if(p, (src_addr == IP6_ADDR_ANY6) ? NULL : src_addr, &multicast_address,
 8012892:	2600      	movs	r6, #0
 8012894:	e7e7      	b.n	8012866 <nd6_send_rs+0x92>
    return ERR_BUF;
 8012896:	f06f 0401 	mvn.w	r4, #1
 801289a:	e7f3      	b.n	8012884 <nd6_send_rs+0xb0>
 801289c:	200007a8 	.word	0x200007a8
 80128a0:	08017c08 	.word	0x08017c08

080128a4 <nd6_send_ns>:
{
 80128a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80128a8:	b085      	sub	sp, #20
 80128aa:	4605      	mov	r5, r0
 80128ac:	4616      	mov	r6, r2
  LWIP_ASSERT("target address is required", target_addr != NULL);
 80128ae:	460c      	mov	r4, r1
 80128b0:	b171      	cbz	r1, 80128d0 <nd6_send_ns+0x2c>
  if (!(flags & ND6_SEND_FLAG_ANY_SRC) &&
 80128b2:	f016 0f04 	tst.w	r6, #4
 80128b6:	d113      	bne.n	80128e0 <nd6_send_ns+0x3c>
      ip6_addr_isvalid(netif_ip6_addr_state(netif,0))) {
 80128b8:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
  if (!(flags & ND6_SEND_FLAG_ANY_SRC) &&
 80128bc:	f013 0f10 	tst.w	r3, #16
 80128c0:	d058      	beq.n	8012974 <nd6_send_ns+0xd0>
    src_addr = netif_ip6_addr(netif, 0);
 80128c2:	f105 084c 	add.w	r8, r5, #76	; 0x4c
    lladdr_opt_len = ((netif->hwaddr_len + 2) + 7) >> 3;
 80128c6:	f895 70de 	ldrb.w	r7, [r5, #222]	; 0xde
 80128ca:	3709      	adds	r7, #9
 80128cc:	08ff      	lsrs	r7, r7, #3
 80128ce:	e00a      	b.n	80128e6 <nd6_send_ns+0x42>
  LWIP_ASSERT("target address is required", target_addr != NULL);
 80128d0:	4b32      	ldr	r3, [pc, #200]	; (801299c <nd6_send_ns+0xf8>)
 80128d2:	f240 42a4 	movw	r2, #1188	; 0x4a4
 80128d6:	4932      	ldr	r1, [pc, #200]	; (80129a0 <nd6_send_ns+0xfc>)
 80128d8:	4832      	ldr	r0, [pc, #200]	; (80129a4 <nd6_send_ns+0x100>)
 80128da:	f001 fcab 	bl	8014234 <iprintf>
 80128de:	e7e8      	b.n	80128b2 <nd6_send_ns+0xe>
    lladdr_opt_len = 0;
 80128e0:	2700      	movs	r7, #0
    src_addr = IP6_ADDR_ANY6;
 80128e2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80129ac <nd6_send_ns+0x108>
  p = pbuf_alloc(PBUF_IP, sizeof(struct ns_header) + (lladdr_opt_len << 3), PBUF_RAM);
 80128e6:	00f9      	lsls	r1, r7, #3
 80128e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80128ec:	3118      	adds	r1, #24
 80128ee:	2036      	movs	r0, #54	; 0x36
 80128f0:	f7f4 ffb2 	bl	8007858 <pbuf_alloc>
  if (p == NULL) {
 80128f4:	4681      	mov	r9, r0
 80128f6:	2800      	cmp	r0, #0
 80128f8:	d039      	beq.n	801296e <nd6_send_ns+0xca>
  ns_hdr = (struct ns_header *)p->payload;
 80128fa:	6843      	ldr	r3, [r0, #4]
  ns_hdr->type = ICMP6_TYPE_NS;
 80128fc:	2287      	movs	r2, #135	; 0x87
 80128fe:	701a      	strb	r2, [r3, #0]
  ns_hdr->code = 0;
 8012900:	2100      	movs	r1, #0
 8012902:	7059      	strb	r1, [r3, #1]
  ns_hdr->chksum = 0;
 8012904:	7099      	strb	r1, [r3, #2]
 8012906:	70d9      	strb	r1, [r3, #3]
  ns_hdr->reserved = 0;
 8012908:	7119      	strb	r1, [r3, #4]
 801290a:	7159      	strb	r1, [r3, #5]
 801290c:	7199      	strb	r1, [r3, #6]
 801290e:	71d9      	strb	r1, [r3, #7]
  ip6_addr_copy_to_packed(ns_hdr->target_address, *target_addr);
 8012910:	6822      	ldr	r2, [r4, #0]
 8012912:	609a      	str	r2, [r3, #8]
 8012914:	6862      	ldr	r2, [r4, #4]
 8012916:	60da      	str	r2, [r3, #12]
 8012918:	68a2      	ldr	r2, [r4, #8]
 801291a:	611a      	str	r2, [r3, #16]
 801291c:	68e2      	ldr	r2, [r4, #12]
 801291e:	615a      	str	r2, [r3, #20]
  if (lladdr_opt_len != 0) {
 8012920:	bb67      	cbnz	r7, 801297c <nd6_send_ns+0xd8>
  if (flags & ND6_SEND_FLAG_MULTICAST_DEST) {
 8012922:	f016 0f01 	tst.w	r6, #1
 8012926:	d011      	beq.n	801294c <nd6_send_ns+0xa8>
    ip6_addr_set_solicitednode(&multicast_address, target_addr->addr[3]);
 8012928:	4b1f      	ldr	r3, [pc, #124]	; (80129a8 <nd6_send_ns+0x104>)
 801292a:	f240 22ff 	movw	r2, #767	; 0x2ff
 801292e:	601a      	str	r2, [r3, #0]
 8012930:	2200      	movs	r2, #0
 8012932:	605a      	str	r2, [r3, #4]
 8012934:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012938:	609a      	str	r2, [r3, #8]
 801293a:	68e2      	ldr	r2, [r4, #12]
 801293c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8012940:	60da      	str	r2, [r3, #12]
    ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 8012942:	f895 20e2 	ldrb.w	r2, [r5, #226]	; 0xe2
 8012946:	3201      	adds	r2, #1
 8012948:	741a      	strb	r2, [r3, #16]
    target_addr = &multicast_address;
 801294a:	461c      	mov	r4, r3
  ip6_output_if(p, (src_addr == IP6_ADDR_ANY6) ? NULL : src_addr, target_addr,
 801294c:	4b17      	ldr	r3, [pc, #92]	; (80129ac <nd6_send_ns+0x108>)
 801294e:	4598      	cmp	r8, r3
 8012950:	d020      	beq.n	8012994 <nd6_send_ns+0xf0>
 8012952:	9502      	str	r5, [sp, #8]
 8012954:	233a      	movs	r3, #58	; 0x3a
 8012956:	9301      	str	r3, [sp, #4]
 8012958:	2300      	movs	r3, #0
 801295a:	9300      	str	r3, [sp, #0]
 801295c:	23ff      	movs	r3, #255	; 0xff
 801295e:	4622      	mov	r2, r4
 8012960:	4641      	mov	r1, r8
 8012962:	4648      	mov	r0, r9
 8012964:	f7fe fb20 	bl	8010fa8 <ip6_output_if>
  pbuf_free(p);
 8012968:	4648      	mov	r0, r9
 801296a:	f7f4 ff13 	bl	8007794 <pbuf_free>
}
 801296e:	b005      	add	sp, #20
 8012970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lladdr_opt_len = 0;
 8012974:	2700      	movs	r7, #0
    src_addr = IP6_ADDR_ANY6;
 8012976:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80129ac <nd6_send_ns+0x108>
 801297a:	e7b4      	b.n	80128e6 <nd6_send_ns+0x42>
    struct lladdr_option *lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct ns_header));
 801297c:	6840      	ldr	r0, [r0, #4]
    lladdr_opt->type = ND6_OPTION_TYPE_SOURCE_LLADDR;
 801297e:	2301      	movs	r3, #1
 8012980:	7603      	strb	r3, [r0, #24]
    lladdr_opt->length = (u8_t)lladdr_opt_len;
 8012982:	7647      	strb	r7, [r0, #25]
    SMEMCPY(lladdr_opt->addr, netif->hwaddr, netif->hwaddr_len);
 8012984:	f895 20de 	ldrb.w	r2, [r5, #222]	; 0xde
 8012988:	f105 01d8 	add.w	r1, r5, #216	; 0xd8
 801298c:	301a      	adds	r0, #26
 801298e:	f001 fc21 	bl	80141d4 <memcpy>
 8012992:	e7c6      	b.n	8012922 <nd6_send_ns+0x7e>
  ip6_output_if(p, (src_addr == IP6_ADDR_ANY6) ? NULL : src_addr, target_addr,
 8012994:	f04f 0800 	mov.w	r8, #0
 8012998:	e7db      	b.n	8012952 <nd6_send_ns+0xae>
 801299a:	bf00      	nop
 801299c:	08017d58 	.word	0x08017d58
 80129a0:	08017dc0 	.word	0x08017dc0
 80129a4:	08015418 	.word	0x08015418
 80129a8:	200007a8 	.word	0x200007a8
 80129ac:	08017c08 	.word	0x08017c08

080129b0 <nd6_send_neighbor_cache_probe>:
{
 80129b0:	b508      	push	{r3, lr}
 80129b2:	460a      	mov	r2, r1
  nd6_send_ns(entry->netif, &entry->next_hop_address, flags);
 80129b4:	4601      	mov	r1, r0
 80129b6:	6940      	ldr	r0, [r0, #20]
 80129b8:	f7ff ff74 	bl	80128a4 <nd6_send_ns>
}
 80129bc:	bd08      	pop	{r3, pc}
	...

080129c0 <nd6_new_router>:
{
 80129c0:	b570      	push	{r4, r5, r6, lr}
 80129c2:	4605      	mov	r5, r0
 80129c4:	460e      	mov	r6, r1
  neighbor_index = nd6_find_neighbor_cache_entry(router_addr);
 80129c6:	f7ff f99d 	bl	8011d04 <nd6_find_neighbor_cache_entry>
  if (neighbor_index < 0) {
 80129ca:	1e04      	subs	r4, r0, #0
 80129cc:	db0a      	blt.n	80129e4 <nd6_new_router+0x24>
  neighbor_cache[neighbor_index].isrouter = 1;
 80129ce:	4625      	mov	r5, r4
 80129d0:	4839      	ldr	r0, [pc, #228]	; (8012ab8 <nd6_new_router+0xf8>)
 80129d2:	232c      	movs	r3, #44	; 0x2c
 80129d4:	fb03 0404 	mla	r4, r3, r4, r0
 80129d8:	2301      	movs	r3, #1
 80129da:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  free_router_index = LWIP_ND6_NUM_ROUTERS;
 80129de:	2003      	movs	r0, #3
  for (router_index = LWIP_ND6_NUM_ROUTERS - 1; router_index >= 0; router_index--) {
 80129e0:	2302      	movs	r3, #2
 80129e2:	e03d      	b.n	8012a60 <nd6_new_router+0xa0>
    neighbor_index = nd6_new_neighbor_cache_entry();
 80129e4:	f7ff fd90 	bl	8012508 <nd6_new_neighbor_cache_entry>
    if (neighbor_index < 0) {
 80129e8:	1e04      	subs	r4, r0, #0
 80129ea:	db60      	blt.n	8012aae <nd6_new_router+0xee>
    ip6_addr_set(&(neighbor_cache[neighbor_index].next_hop_address), router_addr);
 80129ec:	b365      	cbz	r5, 8012a48 <nd6_new_router+0x88>
 80129ee:	6829      	ldr	r1, [r5, #0]
 80129f0:	4620      	mov	r0, r4
 80129f2:	232c      	movs	r3, #44	; 0x2c
 80129f4:	fb03 f304 	mul.w	r3, r3, r4
 80129f8:	4a2f      	ldr	r2, [pc, #188]	; (8012ab8 <nd6_new_router+0xf8>)
 80129fa:	50d1      	str	r1, [r2, r3]
 80129fc:	b335      	cbz	r5, 8012a4c <nd6_new_router+0x8c>
 80129fe:	686a      	ldr	r2, [r5, #4]
 8012a00:	492d      	ldr	r1, [pc, #180]	; (8012ab8 <nd6_new_router+0xf8>)
 8012a02:	232c      	movs	r3, #44	; 0x2c
 8012a04:	fb03 1300 	mla	r3, r3, r0, r1
 8012a08:	605a      	str	r2, [r3, #4]
 8012a0a:	b30d      	cbz	r5, 8012a50 <nd6_new_router+0x90>
 8012a0c:	68aa      	ldr	r2, [r5, #8]
 8012a0e:	492a      	ldr	r1, [pc, #168]	; (8012ab8 <nd6_new_router+0xf8>)
 8012a10:	232c      	movs	r3, #44	; 0x2c
 8012a12:	fb03 1300 	mla	r3, r3, r0, r1
 8012a16:	609a      	str	r2, [r3, #8]
 8012a18:	b1e5      	cbz	r5, 8012a54 <nd6_new_router+0x94>
 8012a1a:	68ea      	ldr	r2, [r5, #12]
 8012a1c:	4926      	ldr	r1, [pc, #152]	; (8012ab8 <nd6_new_router+0xf8>)
 8012a1e:	232c      	movs	r3, #44	; 0x2c
 8012a20:	fb03 1300 	mla	r3, r3, r0, r1
 8012a24:	60da      	str	r2, [r3, #12]
 8012a26:	b1bd      	cbz	r5, 8012a58 <nd6_new_router+0x98>
 8012a28:	7c2b      	ldrb	r3, [r5, #16]
 8012a2a:	4a23      	ldr	r2, [pc, #140]	; (8012ab8 <nd6_new_router+0xf8>)
 8012a2c:	212c      	movs	r1, #44	; 0x2c
 8012a2e:	fb01 2000 	mla	r0, r1, r0, r2
 8012a32:	7403      	strb	r3, [r0, #16]
    neighbor_cache[neighbor_index].netif = netif;
 8012a34:	6146      	str	r6, [r0, #20]
    neighbor_cache[neighbor_index].q = NULL;
 8012a36:	2300      	movs	r3, #0
 8012a38:	6203      	str	r3, [r0, #32]
    neighbor_cache[neighbor_index].state = ND6_INCOMPLETE;
 8012a3a:	2101      	movs	r1, #1
 8012a3c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    neighbor_cache[neighbor_index].counter.probes_sent = 1;
 8012a40:	6281      	str	r1, [r0, #40]	; 0x28
    nd6_send_neighbor_cache_probe(&neighbor_cache[neighbor_index], ND6_SEND_FLAG_MULTICAST_DEST);
 8012a42:	f7ff ffb5 	bl	80129b0 <nd6_send_neighbor_cache_probe>
 8012a46:	e7c2      	b.n	80129ce <nd6_new_router+0xe>
    ip6_addr_set(&(neighbor_cache[neighbor_index].next_hop_address), router_addr);
 8012a48:	2100      	movs	r1, #0
 8012a4a:	e7d1      	b.n	80129f0 <nd6_new_router+0x30>
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	e7d7      	b.n	8012a00 <nd6_new_router+0x40>
 8012a50:	2200      	movs	r2, #0
 8012a52:	e7dc      	b.n	8012a0e <nd6_new_router+0x4e>
 8012a54:	2200      	movs	r2, #0
 8012a56:	e7e1      	b.n	8012a1c <nd6_new_router+0x5c>
 8012a58:	2300      	movs	r3, #0
 8012a5a:	e7e6      	b.n	8012a2a <nd6_new_router+0x6a>
  for (router_index = LWIP_ND6_NUM_ROUTERS - 1; router_index >= 0; router_index--) {
 8012a5c:	3b01      	subs	r3, #1
 8012a5e:	b25b      	sxtb	r3, r3
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	db0e      	blt.n	8012a82 <nd6_new_router+0xc2>
    if(default_router_list[router_index].neighbor_entry == &(neighbor_cache[neighbor_index])){ 
 8012a64:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012a68:	4914      	ldr	r1, [pc, #80]	; (8012abc <nd6_new_router+0xfc>)
 8012a6a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012a6e:	222c      	movs	r2, #44	; 0x2c
 8012a70:	4c11      	ldr	r4, [pc, #68]	; (8012ab8 <nd6_new_router+0xf8>)
 8012a72:	fb02 4205 	mla	r2, r2, r5, r4
 8012a76:	4291      	cmp	r1, r2
 8012a78:	d01c      	beq.n	8012ab4 <nd6_new_router+0xf4>
    if (default_router_list[router_index].neighbor_entry == NULL) {
 8012a7a:	2900      	cmp	r1, #0
 8012a7c:	d1ee      	bne.n	8012a5c <nd6_new_router+0x9c>
      free_router_index = router_index;
 8012a7e:	4618      	mov	r0, r3
 8012a80:	e7ec      	b.n	8012a5c <nd6_new_router+0x9c>
  if (free_router_index < LWIP_ND6_NUM_ROUTERS) {
 8012a82:	2802      	cmp	r0, #2
 8012a84:	dc09      	bgt.n	8012a9a <nd6_new_router+0xda>
    default_router_list[free_router_index].neighbor_entry = &(neighbor_cache[neighbor_index]);
 8012a86:	232c      	movs	r3, #44	; 0x2c
 8012a88:	4a0b      	ldr	r2, [pc, #44]	; (8012ab8 <nd6_new_router+0xf8>)
 8012a8a:	fb03 2305 	mla	r3, r3, r5, r2
 8012a8e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8012a92:	490a      	ldr	r1, [pc, #40]	; (8012abc <nd6_new_router+0xfc>)
 8012a94:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 8012a98:	bd70      	pop	{r4, r5, r6, pc}
  neighbor_cache[neighbor_index].isrouter = 0;
 8012a9a:	4b07      	ldr	r3, [pc, #28]	; (8012ab8 <nd6_new_router+0xf8>)
 8012a9c:	222c      	movs	r2, #44	; 0x2c
 8012a9e:	fb02 3305 	mla	r3, r2, r5, r3
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return -1;
 8012aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8012aac:	e7f4      	b.n	8012a98 <nd6_new_router+0xd8>
      return -1;
 8012aae:	f04f 30ff 	mov.w	r0, #4294967295
 8012ab2:	e7f1      	b.n	8012a98 <nd6_new_router+0xd8>
      return router_index; 
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	e7ef      	b.n	8012a98 <nd6_new_router+0xd8>
 8012ab8:	20007b70 	.word	0x20007b70
 8012abc:	20007f94 	.word	0x20007f94

08012ac0 <nd6_get_next_hop_entry>:
{
 8012ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ac2:	4604      	mov	r4, r0
 8012ac4:	460e      	mov	r6, r1
  if (ip6_addr_cmp(ip6addr, &(destination_cache[nd6_cached_destination_index].destination_addr))) {
 8012ac6:	6801      	ldr	r1, [r0, #0]
 8012ac8:	4ba3      	ldr	r3, [pc, #652]	; (8012d58 <nd6_get_next_hop_entry+0x298>)
 8012aca:	781b      	ldrb	r3, [r3, #0]
 8012acc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012ad0:	0112      	lsls	r2, r2, #4
 8012ad2:	48a2      	ldr	r0, [pc, #648]	; (8012d5c <nd6_get_next_hop_entry+0x29c>)
 8012ad4:	5882      	ldr	r2, [r0, r2]
 8012ad6:	4291      	cmp	r1, r2
 8012ad8:	d036      	beq.n	8012b48 <nd6_get_next_hop_entry+0x88>
    dst_idx = nd6_find_destination_cache_entry(ip6addr);
 8012ada:	4620      	mov	r0, r4
 8012adc:	f7ff f946 	bl	8011d6c <nd6_find_destination_cache_entry>
    if (dst_idx >= 0) {
 8012ae0:	1e05      	subs	r5, r0, #0
 8012ae2:	db5c      	blt.n	8012b9e <nd6_get_next_hop_entry+0xde>
      LWIP_ASSERT("type overflow", (size_t)dst_idx < NETIF_ADDR_IDX_MAX);
 8012ae4:	b2ab      	uxth	r3, r5
 8012ae6:	2b7e      	cmp	r3, #126	; 0x7e
 8012ae8:	d851      	bhi.n	8012b8e <nd6_get_next_hop_entry+0xce>
      nd6_cached_destination_index = (netif_addr_idx_t)dst_idx;
 8012aea:	4b9b      	ldr	r3, [pc, #620]	; (8012d58 <nd6_get_next_hop_entry+0x298>)
 8012aec:	701d      	strb	r5, [r3, #0]
  if (ip6_addr_cmp(&(destination_cache[nd6_cached_destination_index].next_hop_addr),
 8012aee:	4b9a      	ldr	r3, [pc, #616]	; (8012d58 <nd6_get_next_hop_entry+0x298>)
 8012af0:	7818      	ldrb	r0, [r3, #0]
 8012af2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8012af6:	4b99      	ldr	r3, [pc, #612]	; (8012d5c <nd6_get_next_hop_entry+0x29c>)
 8012af8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8012afc:	6959      	ldr	r1, [r3, #20]
 8012afe:	4b98      	ldr	r3, [pc, #608]	; (8012d60 <nd6_get_next_hop_entry+0x2a0>)
 8012b00:	781a      	ldrb	r2, [r3, #0]
 8012b02:	232c      	movs	r3, #44	; 0x2c
 8012b04:	fb03 f302 	mul.w	r3, r3, r2
 8012b08:	4c96      	ldr	r4, [pc, #600]	; (8012d64 <nd6_get_next_hop_entry+0x2a4>)
 8012b0a:	58e3      	ldr	r3, [r4, r3]
 8012b0c:	4299      	cmp	r1, r3
 8012b0e:	f000 80eb 	beq.w	8012ce8 <nd6_get_next_hop_entry+0x228>
    i = nd6_find_neighbor_cache_entry(&(destination_cache[nd6_cached_destination_index].next_hop_addr));
 8012b12:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8012b16:	0100      	lsls	r0, r0, #4
 8012b18:	3010      	adds	r0, #16
 8012b1a:	4b90      	ldr	r3, [pc, #576]	; (8012d5c <nd6_get_next_hop_entry+0x29c>)
 8012b1c:	4418      	add	r0, r3
 8012b1e:	3004      	adds	r0, #4
 8012b20:	f7ff f8f0 	bl	8011d04 <nd6_find_neighbor_cache_entry>
    if (i >= 0) {
 8012b24:	2800      	cmp	r0, #0
 8012b26:	f2c0 8127 	blt.w	8012d78 <nd6_get_next_hop_entry+0x2b8>
      nd6_cached_neighbor_index = i;
 8012b2a:	4b8d      	ldr	r3, [pc, #564]	; (8012d60 <nd6_get_next_hop_entry+0x2a0>)
 8012b2c:	7018      	strb	r0, [r3, #0]
  destination_cache[nd6_cached_destination_index].age = 0;
 8012b2e:	4b8a      	ldr	r3, [pc, #552]	; (8012d58 <nd6_get_next_hop_entry+0x298>)
 8012b30:	781b      	ldrb	r3, [r3, #0]
 8012b32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012b36:	4a89      	ldr	r2, [pc, #548]	; (8012d5c <nd6_get_next_hop_entry+0x29c>)
 8012b38:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  return nd6_cached_neighbor_index;
 8012b40:	4b87      	ldr	r3, [pc, #540]	; (8012d60 <nd6_get_next_hop_entry+0x2a0>)
 8012b42:	f993 0000 	ldrsb.w	r0, [r3]
}
 8012b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ip6_addr_cmp(ip6addr, &(destination_cache[nd6_cached_destination_index].destination_addr))) {
 8012b48:	6860      	ldr	r0, [r4, #4]
 8012b4a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012b4e:	4983      	ldr	r1, [pc, #524]	; (8012d5c <nd6_get_next_hop_entry+0x29c>)
 8012b50:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8012b54:	6852      	ldr	r2, [r2, #4]
 8012b56:	4290      	cmp	r0, r2
 8012b58:	d1bf      	bne.n	8012ada <nd6_get_next_hop_entry+0x1a>
 8012b5a:	68a0      	ldr	r0, [r4, #8]
 8012b5c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012b60:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8012b64:	6892      	ldr	r2, [r2, #8]
 8012b66:	4290      	cmp	r0, r2
 8012b68:	d1b7      	bne.n	8012ada <nd6_get_next_hop_entry+0x1a>
 8012b6a:	68e0      	ldr	r0, [r4, #12]
 8012b6c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012b70:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8012b74:	68d2      	ldr	r2, [r2, #12]
 8012b76:	4290      	cmp	r0, r2
 8012b78:	d1af      	bne.n	8012ada <nd6_get_next_hop_entry+0x1a>
 8012b7a:	7c21      	ldrb	r1, [r4, #16]
 8012b7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012b80:	4a76      	ldr	r2, [pc, #472]	; (8012d5c <nd6_get_next_hop_entry+0x29c>)
 8012b82:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8012b86:	7c1b      	ldrb	r3, [r3, #16]
 8012b88:	4299      	cmp	r1, r3
 8012b8a:	d1a6      	bne.n	8012ada <nd6_get_next_hop_entry+0x1a>
 8012b8c:	e7af      	b.n	8012aee <nd6_get_next_hop_entry+0x2e>
      LWIP_ASSERT("type overflow", (size_t)dst_idx < NETIF_ADDR_IDX_MAX);
 8012b8e:	4b76      	ldr	r3, [pc, #472]	; (8012d68 <nd6_get_next_hop_entry+0x2a8>)
 8012b90:	f240 72a2 	movw	r2, #1954	; 0x7a2
 8012b94:	4975      	ldr	r1, [pc, #468]	; (8012d6c <nd6_get_next_hop_entry+0x2ac>)
 8012b96:	4876      	ldr	r0, [pc, #472]	; (8012d70 <nd6_get_next_hop_entry+0x2b0>)
 8012b98:	f001 fb4c 	bl	8014234 <iprintf>
 8012b9c:	e7a5      	b.n	8012aea <nd6_get_next_hop_entry+0x2a>
      dst_idx = nd6_new_destination_cache_entry();
 8012b9e:	f7ff f91f 	bl	8011de0 <nd6_new_destination_cache_entry>
      if (dst_idx >= 0) {
 8012ba2:	1e05      	subs	r5, r0, #0
 8012ba4:	f2c0 8114 	blt.w	8012dd0 <nd6_get_next_hop_entry+0x310>
        LWIP_ASSERT("type overflow", (size_t)dst_idx < NETIF_ADDR_IDX_MAX);
 8012ba8:	b2ab      	uxth	r3, r5
 8012baa:	2b7e      	cmp	r3, #126	; 0x7e
 8012bac:	d855      	bhi.n	8012c5a <nd6_get_next_hop_entry+0x19a>
        nd6_cached_destination_index = (netif_addr_idx_t)dst_idx;
 8012bae:	b2ed      	uxtb	r5, r5
 8012bb0:	4b69      	ldr	r3, [pc, #420]	; (8012d58 <nd6_get_next_hop_entry+0x298>)
 8012bb2:	701d      	strb	r5, [r3, #0]
      ip6_addr_set(&(destination_cache[nd6_cached_destination_index].destination_addr), ip6addr);
 8012bb4:	2c00      	cmp	r4, #0
 8012bb6:	d058      	beq.n	8012c6a <nd6_get_next_hop_entry+0x1aa>
 8012bb8:	6821      	ldr	r1, [r4, #0]
 8012bba:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8012bbe:	011b      	lsls	r3, r3, #4
 8012bc0:	4a66      	ldr	r2, [pc, #408]	; (8012d5c <nd6_get_next_hop_entry+0x29c>)
 8012bc2:	50d1      	str	r1, [r2, r3]
 8012bc4:	2c00      	cmp	r4, #0
 8012bc6:	d052      	beq.n	8012c6e <nd6_get_next_hop_entry+0x1ae>
 8012bc8:	6861      	ldr	r1, [r4, #4]
 8012bca:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8012bce:	4a63      	ldr	r2, [pc, #396]	; (8012d5c <nd6_get_next_hop_entry+0x29c>)
 8012bd0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8012bd4:	6059      	str	r1, [r3, #4]
 8012bd6:	2c00      	cmp	r4, #0
 8012bd8:	d04b      	beq.n	8012c72 <nd6_get_next_hop_entry+0x1b2>
 8012bda:	68a1      	ldr	r1, [r4, #8]
 8012bdc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8012be0:	4a5e      	ldr	r2, [pc, #376]	; (8012d5c <nd6_get_next_hop_entry+0x29c>)
 8012be2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8012be6:	6099      	str	r1, [r3, #8]
 8012be8:	2c00      	cmp	r4, #0
 8012bea:	d044      	beq.n	8012c76 <nd6_get_next_hop_entry+0x1b6>
 8012bec:	68e1      	ldr	r1, [r4, #12]
 8012bee:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8012bf2:	4a5a      	ldr	r2, [pc, #360]	; (8012d5c <nd6_get_next_hop_entry+0x29c>)
 8012bf4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8012bf8:	60d9      	str	r1, [r3, #12]
 8012bfa:	2c00      	cmp	r4, #0
 8012bfc:	d03d      	beq.n	8012c7a <nd6_get_next_hop_entry+0x1ba>
 8012bfe:	7c21      	ldrb	r1, [r4, #16]
 8012c00:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8012c04:	4a55      	ldr	r2, [pc, #340]	; (8012d5c <nd6_get_next_hop_entry+0x29c>)
 8012c06:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8012c0a:	7419      	strb	r1, [r3, #16]
      if (ip6_addr_islinklocal(ip6addr) ||
 8012c0c:	6823      	ldr	r3, [r4, #0]
 8012c0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012c12:	041b      	lsls	r3, r3, #16
 8012c14:	0c1b      	lsrs	r3, r3, #16
 8012c16:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8012c1a:	4293      	cmp	r3, r2
 8012c1c:	d004      	beq.n	8012c28 <nd6_get_next_hop_entry+0x168>
          nd6_is_prefix_in_netif(ip6addr, netif)) {
 8012c1e:	4631      	mov	r1, r6
 8012c20:	4620      	mov	r0, r4
 8012c22:	f7ff f911 	bl	8011e48 <nd6_is_prefix_in_netif>
      if (ip6_addr_islinklocal(ip6addr) ||
 8012c26:	b350      	cbz	r0, 8012c7e <nd6_get_next_hop_entry+0x1be>
        destination_cache[nd6_cached_destination_index].pmtu = netif_mtu6(netif);
 8012c28:	f8b6 00d6 	ldrh.w	r0, [r6, #214]	; 0xd6
 8012c2c:	4a4b      	ldr	r2, [pc, #300]	; (8012d5c <nd6_get_next_hop_entry+0x29c>)
 8012c2e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8012c32:	0119      	lsls	r1, r3, #4
 8012c34:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8012c38:	8518      	strh	r0, [r3, #40]	; 0x28
        ip6_addr_copy(destination_cache[nd6_cached_destination_index].next_hop_addr, destination_cache[nd6_cached_destination_index].destination_addr);
 8012c3a:	5851      	ldr	r1, [r2, r1]
 8012c3c:	6159      	str	r1, [r3, #20]
 8012c3e:	6859      	ldr	r1, [r3, #4]
 8012c40:	6199      	str	r1, [r3, #24]
 8012c42:	6899      	ldr	r1, [r3, #8]
 8012c44:	61d9      	str	r1, [r3, #28]
 8012c46:	68d9      	ldr	r1, [r3, #12]
 8012c48:	6219      	str	r1, [r3, #32]
 8012c4a:	7c1b      	ldrb	r3, [r3, #16]
 8012c4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012c50:	eb02 1505 	add.w	r5, r2, r5, lsl #4
 8012c54:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8012c58:	e749      	b.n	8012aee <nd6_get_next_hop_entry+0x2e>
        LWIP_ASSERT("type overflow", (size_t)dst_idx < NETIF_ADDR_IDX_MAX);
 8012c5a:	4b43      	ldr	r3, [pc, #268]	; (8012d68 <nd6_get_next_hop_entry+0x2a8>)
 8012c5c:	f240 72a9 	movw	r2, #1961	; 0x7a9
 8012c60:	4942      	ldr	r1, [pc, #264]	; (8012d6c <nd6_get_next_hop_entry+0x2ac>)
 8012c62:	4843      	ldr	r0, [pc, #268]	; (8012d70 <nd6_get_next_hop_entry+0x2b0>)
 8012c64:	f001 fae6 	bl	8014234 <iprintf>
 8012c68:	e7a1      	b.n	8012bae <nd6_get_next_hop_entry+0xee>
      ip6_addr_set(&(destination_cache[nd6_cached_destination_index].destination_addr), ip6addr);
 8012c6a:	2100      	movs	r1, #0
 8012c6c:	e7a5      	b.n	8012bba <nd6_get_next_hop_entry+0xfa>
 8012c6e:	2100      	movs	r1, #0
 8012c70:	e7ab      	b.n	8012bca <nd6_get_next_hop_entry+0x10a>
 8012c72:	2100      	movs	r1, #0
 8012c74:	e7b2      	b.n	8012bdc <nd6_get_next_hop_entry+0x11c>
 8012c76:	2100      	movs	r1, #0
 8012c78:	e7b9      	b.n	8012bee <nd6_get_next_hop_entry+0x12e>
 8012c7a:	2100      	movs	r1, #0
 8012c7c:	e7c0      	b.n	8012c00 <nd6_get_next_hop_entry+0x140>
        i = nd6_select_router(ip6addr, netif);
 8012c7e:	4631      	mov	r1, r6
 8012c80:	4620      	mov	r0, r4
 8012c82:	f7ff f949 	bl	8011f18 <nd6_select_router>
        if (i < 0) {
 8012c86:	2800      	cmp	r0, #0
 8012c88:	db1e      	blt.n	8012cc8 <nd6_get_next_hop_entry+0x208>
        destination_cache[nd6_cached_destination_index].pmtu = netif_mtu6(netif); /* Start with netif mtu, correct through ICMPv6 if necessary */
 8012c8a:	4b33      	ldr	r3, [pc, #204]	; (8012d58 <nd6_get_next_hop_entry+0x298>)
 8012c8c:	781a      	ldrb	r2, [r3, #0]
 8012c8e:	f8b6 10d6 	ldrh.w	r1, [r6, #214]	; 0xd6
 8012c92:	4c32      	ldr	r4, [pc, #200]	; (8012d5c <nd6_get_next_hop_entry+0x29c>)
 8012c94:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8012c98:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8012c9c:	8519      	strh	r1, [r3, #40]	; 0x28
        ip6_addr_copy(destination_cache[nd6_cached_destination_index].next_hop_addr, default_router_list[i].neighbor_entry->next_hop_address);
 8012c9e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8012ca2:	4934      	ldr	r1, [pc, #208]	; (8012d74 <nd6_get_next_hop_entry+0x2b4>)
 8012ca4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8012ca8:	6808      	ldr	r0, [r1, #0]
 8012caa:	6158      	str	r0, [r3, #20]
 8012cac:	6848      	ldr	r0, [r1, #4]
 8012cae:	6198      	str	r0, [r3, #24]
 8012cb0:	6888      	ldr	r0, [r1, #8]
 8012cb2:	61d8      	str	r0, [r3, #28]
 8012cb4:	68c8      	ldr	r0, [r1, #12]
 8012cb6:	6218      	str	r0, [r3, #32]
 8012cb8:	7c0b      	ldrb	r3, [r1, #16]
 8012cba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012cbe:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8012cc2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8012cc6:	e712      	b.n	8012aee <nd6_get_next_hop_entry+0x2e>
          ip6_addr_set_any(&(destination_cache[nd6_cached_destination_index].destination_addr));
 8012cc8:	4b23      	ldr	r3, [pc, #140]	; (8012d58 <nd6_get_next_hop_entry+0x298>)
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	4823      	ldr	r0, [pc, #140]	; (8012d5c <nd6_get_next_hop_entry+0x29c>)
 8012cce:	2130      	movs	r1, #48	; 0x30
 8012cd0:	fb01 f103 	mul.w	r1, r1, r3
 8012cd4:	1842      	adds	r2, r0, r1
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	5043      	str	r3, [r0, r1]
 8012cda:	6053      	str	r3, [r2, #4]
 8012cdc:	6093      	str	r3, [r2, #8]
 8012cde:	60d3      	str	r3, [r2, #12]
 8012ce0:	7413      	strb	r3, [r2, #16]
          return ERR_RTE;
 8012ce2:	f06f 0003 	mvn.w	r0, #3
 8012ce6:	e72e      	b.n	8012b46 <nd6_get_next_hop_entry+0x86>
  if (ip6_addr_cmp(&(destination_cache[nd6_cached_destination_index].next_hop_addr),
 8012ce8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8012cec:	491b      	ldr	r1, [pc, #108]	; (8012d5c <nd6_get_next_hop_entry+0x29c>)
 8012cee:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8012cf2:	6999      	ldr	r1, [r3, #24]
 8012cf4:	232c      	movs	r3, #44	; 0x2c
 8012cf6:	fb03 4302 	mla	r3, r3, r2, r4
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	4299      	cmp	r1, r3
 8012cfe:	f47f af08 	bne.w	8012b12 <nd6_get_next_hop_entry+0x52>
 8012d02:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8012d06:	4915      	ldr	r1, [pc, #84]	; (8012d5c <nd6_get_next_hop_entry+0x29c>)
 8012d08:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8012d0c:	69d9      	ldr	r1, [r3, #28]
 8012d0e:	232c      	movs	r3, #44	; 0x2c
 8012d10:	fb03 4302 	mla	r3, r3, r2, r4
 8012d14:	689b      	ldr	r3, [r3, #8]
 8012d16:	4299      	cmp	r1, r3
 8012d18:	f47f aefb 	bne.w	8012b12 <nd6_get_next_hop_entry+0x52>
 8012d1c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8012d20:	490e      	ldr	r1, [pc, #56]	; (8012d5c <nd6_get_next_hop_entry+0x29c>)
 8012d22:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8012d26:	6a19      	ldr	r1, [r3, #32]
 8012d28:	232c      	movs	r3, #44	; 0x2c
 8012d2a:	fb03 4302 	mla	r3, r3, r2, r4
 8012d2e:	68db      	ldr	r3, [r3, #12]
 8012d30:	4299      	cmp	r1, r3
 8012d32:	f47f aeee 	bne.w	8012b12 <nd6_get_next_hop_entry+0x52>
 8012d36:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8012d3a:	4908      	ldr	r1, [pc, #32]	; (8012d5c <nd6_get_next_hop_entry+0x29c>)
 8012d3c:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8012d40:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8012d44:	4623      	mov	r3, r4
 8012d46:	242c      	movs	r4, #44	; 0x2c
 8012d48:	fb04 3202 	mla	r2, r4, r2, r3
 8012d4c:	7c13      	ldrb	r3, [r2, #16]
 8012d4e:	4299      	cmp	r1, r3
 8012d50:	f47f aedf 	bne.w	8012b12 <nd6_get_next_hop_entry+0x52>
 8012d54:	e6eb      	b.n	8012b2e <nd6_get_next_hop_entry+0x6e>
 8012d56:	bf00      	nop
 8012d58:	200007bc 	.word	0x200007bc
 8012d5c:	20007db4 	.word	0x20007db4
 8012d60:	200007bd 	.word	0x200007bd
 8012d64:	20007b70 	.word	0x20007b70
 8012d68:	08017d58 	.word	0x08017d58
 8012d6c:	08017648 	.word	0x08017648
 8012d70:	08015418 	.word	0x08015418
 8012d74:	20007f94 	.word	0x20007f94
      i = nd6_new_neighbor_cache_entry();
 8012d78:	f7ff fbc6 	bl	8012508 <nd6_new_neighbor_cache_entry>
      if (i >= 0) {
 8012d7c:	2800      	cmp	r0, #0
 8012d7e:	db2a      	blt.n	8012dd6 <nd6_get_next_hop_entry+0x316>
        nd6_cached_neighbor_index = i;
 8012d80:	4b16      	ldr	r3, [pc, #88]	; (8012ddc <nd6_get_next_hop_entry+0x31c>)
 8012d82:	7018      	strb	r0, [r3, #0]
      ip6_addr_copy(neighbor_cache[i].next_hop_address,
 8012d84:	4b16      	ldr	r3, [pc, #88]	; (8012de0 <nd6_get_next_hop_entry+0x320>)
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	4916      	ldr	r1, [pc, #88]	; (8012de4 <nd6_get_next_hop_entry+0x324>)
 8012d8a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012d8e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8012d92:	6955      	ldr	r5, [r2, #20]
 8012d94:	4f14      	ldr	r7, [pc, #80]	; (8012de8 <nd6_get_next_hop_entry+0x328>)
 8012d96:	242c      	movs	r4, #44	; 0x2c
 8012d98:	fb04 f400 	mul.w	r4, r4, r0
 8012d9c:	1938      	adds	r0, r7, r4
 8012d9e:	513d      	str	r5, [r7, r4]
 8012da0:	6994      	ldr	r4, [r2, #24]
 8012da2:	6044      	str	r4, [r0, #4]
 8012da4:	69d4      	ldr	r4, [r2, #28]
 8012da6:	6084      	str	r4, [r0, #8]
 8012da8:	6a12      	ldr	r2, [r2, #32]
 8012daa:	60c2      	str	r2, [r0, #12]
 8012dac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012db0:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8012db4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012db8:	7403      	strb	r3, [r0, #16]
      neighbor_cache[i].isrouter = 0;
 8012dba:	2300      	movs	r3, #0
 8012dbc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      neighbor_cache[i].netif = netif;
 8012dc0:	6146      	str	r6, [r0, #20]
      neighbor_cache[i].state = ND6_INCOMPLETE;
 8012dc2:	2101      	movs	r1, #1
 8012dc4:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
      neighbor_cache[i].counter.probes_sent = 1;
 8012dc8:	6281      	str	r1, [r0, #40]	; 0x28
      nd6_send_neighbor_cache_probe(&neighbor_cache[i], ND6_SEND_FLAG_MULTICAST_DEST);
 8012dca:	f7ff fdf1 	bl	80129b0 <nd6_send_neighbor_cache_probe>
 8012dce:	e6ae      	b.n	8012b2e <nd6_get_next_hop_entry+0x6e>
        return ERR_MEM;
 8012dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8012dd4:	e6b7      	b.n	8012b46 <nd6_get_next_hop_entry+0x86>
        return ERR_MEM;
 8012dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8012dda:	e6b4      	b.n	8012b46 <nd6_get_next_hop_entry+0x86>
 8012ddc:	200007bd 	.word	0x200007bd
 8012de0:	200007bc 	.word	0x200007bc
 8012de4:	20007db4 	.word	0x20007db4
 8012de8:	20007b70 	.word	0x20007b70

08012dec <nd6_queue_packet>:
  if ((neighbor_index < 0) || (neighbor_index >= LWIP_ND6_NUM_NEIGHBORS)) {
 8012dec:	b2c3      	uxtb	r3, r0
 8012dee:	2b09      	cmp	r3, #9
 8012df0:	d86b      	bhi.n	8012eca <nd6_queue_packet+0xde>
{
 8012df2:	b570      	push	{r4, r5, r6, lr}
 8012df4:	4605      	mov	r5, r0
 8012df6:	460e      	mov	r6, r1
  p = q;
 8012df8:	460b      	mov	r3, r1
  while (p) {
 8012dfa:	b133      	cbz	r3, 8012e0a <nd6_queue_packet+0x1e>
    if (PBUF_NEEDS_COPY(p)) {
 8012dfc:	7b1a      	ldrb	r2, [r3, #12]
 8012dfe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8012e02:	d101      	bne.n	8012e08 <nd6_queue_packet+0x1c>
    p = p->next;
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	e7f8      	b.n	8012dfa <nd6_queue_packet+0xe>
      copy_needed = 1;
 8012e08:	2301      	movs	r3, #1
  if (copy_needed) {
 8012e0a:	b1fb      	cbz	r3, 8012e4c <nd6_queue_packet+0x60>
    p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012e0c:	4632      	mov	r2, r6
 8012e0e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012e12:	200e      	movs	r0, #14
 8012e14:	f7f5 f804 	bl	8007e20 <pbuf_clone>
 8012e18:	4604      	mov	r4, r0
    while ((p == NULL) && (neighbor_cache[neighbor_index].q != NULL)) {
 8012e1a:	b9dc      	cbnz	r4, 8012e54 <nd6_queue_packet+0x68>
 8012e1c:	4a2e      	ldr	r2, [pc, #184]	; (8012ed8 <nd6_queue_packet+0xec>)
 8012e1e:	232c      	movs	r3, #44	; 0x2c
 8012e20:	fb03 2305 	mla	r3, r3, r5, r2
 8012e24:	6a18      	ldr	r0, [r3, #32]
 8012e26:	b1a8      	cbz	r0, 8012e54 <nd6_queue_packet+0x68>
      neighbor_cache[neighbor_index].q = r->next;
 8012e28:	6802      	ldr	r2, [r0, #0]
 8012e2a:	492b      	ldr	r1, [pc, #172]	; (8012ed8 <nd6_queue_packet+0xec>)
 8012e2c:	232c      	movs	r3, #44	; 0x2c
 8012e2e:	fb03 1305 	mla	r3, r3, r5, r1
 8012e32:	621a      	str	r2, [r3, #32]
      r->next = NULL;
 8012e34:	2300      	movs	r3, #0
 8012e36:	6003      	str	r3, [r0, #0]
      nd6_free_q(r);
 8012e38:	f7ff fb02 	bl	8012440 <nd6_free_q>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012e3c:	4632      	mov	r2, r6
 8012e3e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012e42:	200e      	movs	r0, #14
 8012e44:	f7f4 ffec 	bl	8007e20 <pbuf_clone>
 8012e48:	4604      	mov	r4, r0
 8012e4a:	e7e6      	b.n	8012e1a <nd6_queue_packet+0x2e>
    pbuf_ref(p);
 8012e4c:	4630      	mov	r0, r6
 8012e4e:	f7f4 fe0d 	bl	8007a6c <pbuf_ref>
    p = q;
 8012e52:	4634      	mov	r4, r6
  if (p != NULL) {
 8012e54:	2c00      	cmp	r4, #0
 8012e56:	d03b      	beq.n	8012ed0 <nd6_queue_packet+0xe4>
    new_entry = (struct nd6_q_entry *)memp_malloc(MEMP_ND6_QUEUE);
 8012e58:	2008      	movs	r0, #8
 8012e5a:	f7f3 ffdd 	bl	8006e18 <memp_malloc>
    if ((new_entry == NULL) && (neighbor_cache[neighbor_index].q != NULL)) {
 8012e5e:	4601      	mov	r1, r0
 8012e60:	b180      	cbz	r0, 8012e84 <nd6_queue_packet+0x98>
    if (new_entry != NULL) {
 8012e62:	b361      	cbz	r1, 8012ebe <nd6_queue_packet+0xd2>
      new_entry->next = NULL;
 8012e64:	2300      	movs	r3, #0
 8012e66:	600b      	str	r3, [r1, #0]
      new_entry->p = p;
 8012e68:	604c      	str	r4, [r1, #4]
      if (neighbor_cache[neighbor_index].q != NULL) {
 8012e6a:	4a1b      	ldr	r2, [pc, #108]	; (8012ed8 <nd6_queue_packet+0xec>)
 8012e6c:	232c      	movs	r3, #44	; 0x2c
 8012e6e:	fb03 2305 	mla	r3, r3, r5, r2
 8012e72:	6a1b      	ldr	r3, [r3, #32]
 8012e74:	b1e3      	cbz	r3, 8012eb0 <nd6_queue_packet+0xc4>
        while (r->next != NULL) {
 8012e76:	461a      	mov	r2, r3
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d1fb      	bne.n	8012e76 <nd6_queue_packet+0x8a>
        r->next = new_entry;
 8012e7e:	6011      	str	r1, [r2, #0]
      result = ERR_OK;
 8012e80:	2000      	movs	r0, #0
}
 8012e82:	bd70      	pop	{r4, r5, r6, pc}
    if ((new_entry == NULL) && (neighbor_cache[neighbor_index].q != NULL)) {
 8012e84:	4a14      	ldr	r2, [pc, #80]	; (8012ed8 <nd6_queue_packet+0xec>)
 8012e86:	232c      	movs	r3, #44	; 0x2c
 8012e88:	fb03 2305 	mla	r3, r3, r5, r2
 8012e8c:	6a18      	ldr	r0, [r3, #32]
 8012e8e:	2800      	cmp	r0, #0
 8012e90:	d0e7      	beq.n	8012e62 <nd6_queue_packet+0x76>
      neighbor_cache[neighbor_index].q = r->next;
 8012e92:	6802      	ldr	r2, [r0, #0]
 8012e94:	4910      	ldr	r1, [pc, #64]	; (8012ed8 <nd6_queue_packet+0xec>)
 8012e96:	232c      	movs	r3, #44	; 0x2c
 8012e98:	fb03 1305 	mla	r3, r3, r5, r1
 8012e9c:	621a      	str	r2, [r3, #32]
      r->next = NULL;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	6003      	str	r3, [r0, #0]
      nd6_free_q(r);
 8012ea2:	f7ff facd 	bl	8012440 <nd6_free_q>
      new_entry = (struct nd6_q_entry *)memp_malloc(MEMP_ND6_QUEUE);
 8012ea6:	2008      	movs	r0, #8
 8012ea8:	f7f3 ffb6 	bl	8006e18 <memp_malloc>
 8012eac:	4601      	mov	r1, r0
 8012eae:	e7d8      	b.n	8012e62 <nd6_queue_packet+0x76>
        neighbor_cache[neighbor_index].q = new_entry;
 8012eb0:	4b09      	ldr	r3, [pc, #36]	; (8012ed8 <nd6_queue_packet+0xec>)
 8012eb2:	222c      	movs	r2, #44	; 0x2c
 8012eb4:	fb02 3505 	mla	r5, r2, r5, r3
 8012eb8:	6229      	str	r1, [r5, #32]
      result = ERR_OK;
 8012eba:	2000      	movs	r0, #0
 8012ebc:	e7e1      	b.n	8012e82 <nd6_queue_packet+0x96>
      pbuf_free(p);
 8012ebe:	4620      	mov	r0, r4
 8012ec0:	f7f4 fc68 	bl	8007794 <pbuf_free>
  err_t result = ERR_MEM;
 8012ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ec8:	e7db      	b.n	8012e82 <nd6_queue_packet+0x96>
    return ERR_ARG;
 8012eca:	f06f 000f 	mvn.w	r0, #15
}
 8012ece:	4770      	bx	lr
  err_t result = ERR_MEM;
 8012ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ed4:	e7d5      	b.n	8012e82 <nd6_queue_packet+0x96>
 8012ed6:	bf00      	nop
 8012ed8:	20007b70 	.word	0x20007b70

08012edc <nd6_input>:
{
 8012edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ee0:	b08b      	sub	sp, #44	; 0x2c
 8012ee2:	4604      	mov	r4, r0
 8012ee4:	460e      	mov	r6, r1
  msg_type = *((u8_t *)p->payload);
 8012ee6:	6845      	ldr	r5, [r0, #4]
 8012ee8:	782b      	ldrb	r3, [r5, #0]
  switch (msg_type) {
 8012eea:	2b02      	cmp	r3, #2
 8012eec:	f000 8441 	beq.w	8013772 <nd6_input+0x896>
 8012ef0:	f0c0 847b 	bcc.w	80137ea <nd6_input+0x90e>
 8012ef4:	2b89      	cmp	r3, #137	; 0x89
 8012ef6:	f200 8478 	bhi.w	80137ea <nd6_input+0x90e>
 8012efa:	2b86      	cmp	r3, #134	; 0x86
 8012efc:	f0c0 8475 	bcc.w	80137ea <nd6_input+0x90e>
 8012f00:	3b86      	subs	r3, #134	; 0x86
 8012f02:	2b03      	cmp	r3, #3
 8012f04:	f200 8471 	bhi.w	80137ea <nd6_input+0x90e>
 8012f08:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012f0c:	00ea022c 	.word	0x00ea022c
 8012f10:	03670004 	.word	0x03670004
    if (p->len < (sizeof(struct na_header))) {
 8012f14:	8943      	ldrh	r3, [r0, #10]
 8012f16:	2b17      	cmp	r3, #23
 8012f18:	d960      	bls.n	8012fdc <nd6_input+0x100>
    ip6_addr_copy_from_packed(target_address, na_hdr->target_address);
 8012f1a:	68aa      	ldr	r2, [r5, #8]
 8012f1c:	9205      	str	r2, [sp, #20]
 8012f1e:	68e8      	ldr	r0, [r5, #12]
 8012f20:	9006      	str	r0, [sp, #24]
 8012f22:	692f      	ldr	r7, [r5, #16]
 8012f24:	9707      	str	r7, [sp, #28]
 8012f26:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8012f2a:	f8cd c020 	str.w	ip, [sp, #32]
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 8012f2e:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8012f32:	4011      	ands	r1, r2
 8012f34:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8012f38:	4299      	cmp	r1, r3
 8012f3a:	d053      	beq.n	8012fe4 <nd6_input+0x108>
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || na_hdr->code != 0 ||
 8012f42:	499c      	ldr	r1, [pc, #624]	; (80131b4 <nd6_input+0x2d8>)
 8012f44:	68c9      	ldr	r1, [r1, #12]
 8012f46:	79c9      	ldrb	r1, [r1, #7]
 8012f48:	29ff      	cmp	r1, #255	; 0xff
 8012f4a:	d150      	bne.n	8012fee <nd6_input+0x112>
 8012f4c:	7869      	ldrb	r1, [r5, #1]
 8012f4e:	2900      	cmp	r1, #0
 8012f50:	d14d      	bne.n	8012fee <nd6_input+0x112>
        ip6_addr_ismulticast(&target_address)) {
 8012f52:	b2d1      	uxtb	r1, r2
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || na_hdr->code != 0 ||
 8012f54:	29ff      	cmp	r1, #255	; 0xff
 8012f56:	d04a      	beq.n	8012fee <nd6_input+0x112>
    if (ip6_addr_ismulticast(ip6_current_dest_addr())) {
 8012f58:	4996      	ldr	r1, [pc, #600]	; (80131b4 <nd6_input+0x2d8>)
 8012f5a:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 8012f5e:	29ff      	cmp	r1, #255	; 0xff
 8012f60:	f000 8086 	beq.w	8013070 <nd6_input+0x194>
      i = nd6_find_neighbor_cache_entry(&target_address);
 8012f64:	a805      	add	r0, sp, #20
 8012f66:	f7fe fecd 	bl	8011d04 <nd6_find_neighbor_cache_entry>
      if (i < 0) {
 8012f6a:	1e07      	subs	r7, r0, #0
 8012f6c:	f2c0 80ac 	blt.w	80130c8 <nd6_input+0x1ec>
      if ((na_hdr->flags & ND6_FLAG_OVERRIDE) ||
 8012f70:	792b      	ldrb	r3, [r5, #4]
 8012f72:	f013 0f20 	tst.w	r3, #32
 8012f76:	d107      	bne.n	8012f88 <nd6_input+0xac>
          (neighbor_cache[i].state == ND6_INCOMPLETE)) {
 8012f78:	4a8f      	ldr	r2, [pc, #572]	; (80131b8 <nd6_input+0x2dc>)
 8012f7a:	232c      	movs	r3, #44	; 0x2c
 8012f7c:	fb03 2307 	mla	r3, r3, r7, r2
 8012f80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if ((na_hdr->flags & ND6_FLAG_OVERRIDE) ||
 8012f84:	2b01      	cmp	r3, #1
 8012f86:	d115      	bne.n	8012fb4 <nd6_input+0xd8>
        if (p->len < (sizeof(struct na_header) + 2)) {
 8012f88:	8962      	ldrh	r2, [r4, #10]
 8012f8a:	2a19      	cmp	r2, #25
 8012f8c:	f240 80a0 	bls.w	80130d0 <nd6_input+0x1f4>
        lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct na_header));
 8012f90:	6861      	ldr	r1, [r4, #4]
        if (p->len < (sizeof(struct na_header) + (lladdr_opt->length << 3))) {
 8012f92:	7e4b      	ldrb	r3, [r1, #25]
 8012f94:	00db      	lsls	r3, r3, #3
 8012f96:	3318      	adds	r3, #24
 8012f98:	429a      	cmp	r2, r3
 8012f9a:	f0c0 809d 	bcc.w	80130d8 <nd6_input+0x1fc>
        MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 8012f9e:	232c      	movs	r3, #44	; 0x2c
 8012fa0:	fb03 f307 	mul.w	r3, r3, r7
 8012fa4:	3318      	adds	r3, #24
 8012fa6:	f896 20de 	ldrb.w	r2, [r6, #222]	; 0xde
 8012faa:	311a      	adds	r1, #26
 8012fac:	4882      	ldr	r0, [pc, #520]	; (80131b8 <nd6_input+0x2dc>)
 8012fae:	4418      	add	r0, r3
 8012fb0:	f001 f910 	bl	80141d4 <memcpy>
      neighbor_cache[i].netif = inp;
 8012fb4:	4a80      	ldr	r2, [pc, #512]	; (80131b8 <nd6_input+0x2dc>)
 8012fb6:	232c      	movs	r3, #44	; 0x2c
 8012fb8:	fb03 2307 	mla	r3, r3, r7, r2
 8012fbc:	615e      	str	r6, [r3, #20]
      neighbor_cache[i].state = ND6_REACHABLE;
 8012fbe:	2202      	movs	r2, #2
 8012fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      neighbor_cache[i].counter.reachable_time = reachable_time;
 8012fc4:	4a7d      	ldr	r2, [pc, #500]	; (80131bc <nd6_input+0x2e0>)
 8012fc6:	6812      	ldr	r2, [r2, #0]
 8012fc8:	629a      	str	r2, [r3, #40]	; 0x28
      if (neighbor_cache[i].q != NULL) {
 8012fca:	6a1b      	ldr	r3, [r3, #32]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	f000 840c 	beq.w	80137ea <nd6_input+0x90e>
        nd6_send_q(i);
 8012fd2:	4638      	mov	r0, r7
 8012fd4:	f7ff f8d0 	bl	8012178 <nd6_send_q>
 8012fd8:	f000 bc07 	b.w	80137ea <nd6_input+0x90e>
      pbuf_free(p);
 8012fdc:	f7f4 fbda 	bl	8007794 <pbuf_free>
      return;
 8012fe0:	f000 bc06 	b.w	80137f0 <nd6_input+0x914>
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 8012fe4:	f896 30e2 	ldrb.w	r3, [r6, #226]	; 0xe2
 8012fe8:	3301      	adds	r3, #1
 8012fea:	b2db      	uxtb	r3, r3
 8012fec:	e7a7      	b.n	8012f3e <nd6_input+0x62>
      pbuf_free(p);
 8012fee:	4620      	mov	r0, r4
 8012ff0:	f7f4 fbd0 	bl	8007794 <pbuf_free>
      return;
 8012ff4:	e3fc      	b.n	80137f0 <nd6_input+0x914>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8012ff6:	3101      	adds	r1, #1
 8012ff8:	b249      	sxtb	r1, r1
 8012ffa:	2902      	cmp	r1, #2
 8012ffc:	dc3a      	bgt.n	8013074 <nd6_input+0x198>
        if (!ip6_addr_isinvalid(netif_ip6_addr_state(inp, i)) &&
 8012ffe:	eb06 0e01 	add.w	lr, r6, r1
 8013002:	f89e e094 	ldrb.w	lr, [lr, #148]	; 0x94
 8013006:	f1be 0f00 	cmp.w	lr, #0
 801300a:	d0f4      	beq.n	8012ff6 <nd6_input+0x11a>
 801300c:	f1be 0f40 	cmp.w	lr, #64	; 0x40
 8013010:	d0f1      	beq.n	8012ff6 <nd6_input+0x11a>
            ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 8013012:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
 8013016:	eb06 0ece 	add.w	lr, r6, lr, lsl #3
 801301a:	f8de e04c 	ldr.w	lr, [lr, #76]	; 0x4c
            !ip6_addr_isduplicated(netif_ip6_addr_state(inp, i)) &&
 801301e:	4572      	cmp	r2, lr
 8013020:	d1e9      	bne.n	8012ff6 <nd6_input+0x11a>
            ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 8013022:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
 8013026:	eb06 0ece 	add.w	lr, r6, lr, lsl #3
 801302a:	f8de e050 	ldr.w	lr, [lr, #80]	; 0x50
 801302e:	4570      	cmp	r0, lr
 8013030:	d1e1      	bne.n	8012ff6 <nd6_input+0x11a>
 8013032:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
 8013036:	eb06 0ece 	add.w	lr, r6, lr, lsl #3
 801303a:	f8de e054 	ldr.w	lr, [lr, #84]	; 0x54
 801303e:	4577      	cmp	r7, lr
 8013040:	d1d9      	bne.n	8012ff6 <nd6_input+0x11a>
 8013042:	f04f 0e18 	mov.w	lr, #24
 8013046:	fb0e 6e01 	mla	lr, lr, r1, r6
 801304a:	f8de e058 	ldr.w	lr, [lr, #88]	; 0x58
 801304e:	45f4      	cmp	ip, lr
 8013050:	d1d1      	bne.n	8012ff6 <nd6_input+0x11a>
 8013052:	f04f 0e18 	mov.w	lr, #24
 8013056:	fb0e 6801 	mla	r8, lr, r1, r6
 801305a:	f898 e05c 	ldrb.w	lr, [r8, #92]	; 0x5c
 801305e:	459e      	cmp	lr, r3
 8013060:	d1c9      	bne.n	8012ff6 <nd6_input+0x11a>
          nd6_duplicate_addr_detected(inp, i);
 8013062:	4630      	mov	r0, r6
 8013064:	f7ff f8da 	bl	801221c <nd6_duplicate_addr_detected>
          pbuf_free(p);
 8013068:	4620      	mov	r0, r4
 801306a:	f7f4 fb93 	bl	8007794 <pbuf_free>
          return;
 801306e:	e3bf      	b.n	80137f0 <nd6_input+0x914>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8013070:	2100      	movs	r1, #0
 8013072:	e7c2      	b.n	8012ffa <nd6_input+0x11e>
      if (p->len < (sizeof(struct na_header) + 2)) {
 8013074:	8962      	ldrh	r2, [r4, #10]
 8013076:	2a19      	cmp	r2, #25
 8013078:	d91e      	bls.n	80130b8 <nd6_input+0x1dc>
      lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct na_header));
 801307a:	6867      	ldr	r7, [r4, #4]
      if (p->len < (sizeof(struct na_header) + (lladdr_opt->length << 3))) {
 801307c:	7e7b      	ldrb	r3, [r7, #25]
 801307e:	00db      	lsls	r3, r3, #3
 8013080:	3318      	adds	r3, #24
 8013082:	429a      	cmp	r2, r3
 8013084:	d31c      	bcc.n	80130c0 <nd6_input+0x1e4>
      i = nd6_find_neighbor_cache_entry(&target_address);
 8013086:	a805      	add	r0, sp, #20
 8013088:	f7fe fe3c 	bl	8011d04 <nd6_find_neighbor_cache_entry>
      if (i >= 0) {
 801308c:	2800      	cmp	r0, #0
 801308e:	f2c0 83ac 	blt.w	80137ea <nd6_input+0x90e>
        if (na_hdr->flags & ND6_FLAG_OVERRIDE) {
 8013092:	792b      	ldrb	r3, [r5, #4]
 8013094:	f013 0f20 	tst.w	r3, #32
 8013098:	f000 83a7 	beq.w	80137ea <nd6_input+0x90e>
          MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 801309c:	232c      	movs	r3, #44	; 0x2c
 801309e:	fb03 f000 	mul.w	r0, r3, r0
 80130a2:	f100 0318 	add.w	r3, r0, #24
 80130a6:	f896 20de 	ldrb.w	r2, [r6, #222]	; 0xde
 80130aa:	f107 011a 	add.w	r1, r7, #26
 80130ae:	4842      	ldr	r0, [pc, #264]	; (80131b8 <nd6_input+0x2dc>)
 80130b0:	4418      	add	r0, r3
 80130b2:	f001 f88f 	bl	80141d4 <memcpy>
 80130b6:	e398      	b.n	80137ea <nd6_input+0x90e>
        pbuf_free(p);
 80130b8:	4620      	mov	r0, r4
 80130ba:	f7f4 fb6b 	bl	8007794 <pbuf_free>
        return;
 80130be:	e397      	b.n	80137f0 <nd6_input+0x914>
        pbuf_free(p);
 80130c0:	4620      	mov	r0, r4
 80130c2:	f7f4 fb67 	bl	8007794 <pbuf_free>
        return;
 80130c6:	e393      	b.n	80137f0 <nd6_input+0x914>
        pbuf_free(p);
 80130c8:	4620      	mov	r0, r4
 80130ca:	f7f4 fb63 	bl	8007794 <pbuf_free>
        return;
 80130ce:	e38f      	b.n	80137f0 <nd6_input+0x914>
          pbuf_free(p);
 80130d0:	4620      	mov	r0, r4
 80130d2:	f7f4 fb5f 	bl	8007794 <pbuf_free>
          return;
 80130d6:	e38b      	b.n	80137f0 <nd6_input+0x914>
          pbuf_free(p);
 80130d8:	4620      	mov	r0, r4
 80130da:	f7f4 fb5b 	bl	8007794 <pbuf_free>
          return;
 80130de:	e387      	b.n	80137f0 <nd6_input+0x914>
    if (p->len < sizeof(struct ns_header)) {
 80130e0:	8943      	ldrh	r3, [r0, #10]
 80130e2:	2b17      	cmp	r3, #23
 80130e4:	d931      	bls.n	801314a <nd6_input+0x26e>
    ip6_addr_copy_from_packed(target_address, ns_hdr->target_address);
 80130e6:	68a8      	ldr	r0, [r5, #8]
 80130e8:	9005      	str	r0, [sp, #20]
 80130ea:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80130ee:	f8cd c018 	str.w	ip, [sp, #24]
 80130f2:	f8d5 e010 	ldr.w	lr, [r5, #16]
 80130f6:	f8cd e01c 	str.w	lr, [sp, #28]
 80130fa:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80130fe:	f8cd 8020 	str.w	r8, [sp, #32]
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 8013102:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8013106:	4002      	ands	r2, r0
 8013108:	f248 03fe 	movw	r3, #33022	; 0x80fe
 801310c:	429a      	cmp	r2, r3
 801310e:	d01f      	beq.n	8013150 <nd6_input+0x274>
 8013110:	2700      	movs	r7, #0
 8013112:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ns_hdr->code != 0 ||
 8013116:	4b27      	ldr	r3, [pc, #156]	; (80131b4 <nd6_input+0x2d8>)
 8013118:	68db      	ldr	r3, [r3, #12]
 801311a:	79db      	ldrb	r3, [r3, #7]
 801311c:	2bff      	cmp	r3, #255	; 0xff
 801311e:	d11c      	bne.n	801315a <nd6_input+0x27e>
 8013120:	f895 9001 	ldrb.w	r9, [r5, #1]
 8013124:	f1b9 0f00 	cmp.w	r9, #0
 8013128:	d117      	bne.n	801315a <nd6_input+0x27e>
       ip6_addr_ismulticast(&target_address)) {
 801312a:	b2c3      	uxtb	r3, r0
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ns_hdr->code != 0 ||
 801312c:	2bff      	cmp	r3, #255	; 0xff
 801312e:	d014      	beq.n	801315a <nd6_input+0x27e>
    if (p->len >= (sizeof(struct ns_header) + 2)) {
 8013130:	8962      	ldrh	r2, [r4, #10]
 8013132:	2a19      	cmp	r2, #25
 8013134:	d915      	bls.n	8013162 <nd6_input+0x286>
      lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct ns_header));
 8013136:	6863      	ldr	r3, [r4, #4]
 8013138:	f103 0518 	add.w	r5, r3, #24
      if (p->len < (sizeof(struct ns_header) + (lladdr_opt->length << 3))) {
 801313c:	7e5b      	ldrb	r3, [r3, #25]
 801313e:	00db      	lsls	r3, r3, #3
 8013140:	3318      	adds	r3, #24
 8013142:	429a      	cmp	r2, r3
 8013144:	d20e      	bcs.n	8013164 <nd6_input+0x288>
        lladdr_opt = NULL;
 8013146:	2500      	movs	r5, #0
 8013148:	e00c      	b.n	8013164 <nd6_input+0x288>
      pbuf_free(p);
 801314a:	f7f4 fb23 	bl	8007794 <pbuf_free>
      return;
 801314e:	e34f      	b.n	80137f0 <nd6_input+0x914>
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 8013150:	f891 70e2 	ldrb.w	r7, [r1, #226]	; 0xe2
 8013154:	3701      	adds	r7, #1
 8013156:	b2ff      	uxtb	r7, r7
 8013158:	e7db      	b.n	8013112 <nd6_input+0x236>
      pbuf_free(p);
 801315a:	4620      	mov	r0, r4
 801315c:	f7f4 fb1a 	bl	8007794 <pbuf_free>
      return;
 8013160:	e346      	b.n	80137f0 <nd6_input+0x914>
      lladdr_opt = NULL;
 8013162:	2500      	movs	r5, #0
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 8013164:	2100      	movs	r1, #0
 8013166:	e008      	b.n	801317a <nd6_input+0x29e>
          ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 8013168:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801316c:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8013170:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
            ip6_addr_isany(ip6_current_src_addr()))) &&
 8013172:	4290      	cmp	r0, r2
 8013174:	d024      	beq.n	80131c0 <nd6_input+0x2e4>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 8013176:	3101      	adds	r1, #1
 8013178:	b249      	sxtb	r1, r1
 801317a:	2902      	cmp	r1, #2
 801317c:	dc3e      	bgt.n	80131fc <nd6_input+0x320>
      if ((ip6_addr_isvalid(netif_ip6_addr_state(inp, i)) ||
 801317e:	460b      	mov	r3, r1
 8013180:	1872      	adds	r2, r6, r1
 8013182:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
 8013186:	f012 0f10 	tst.w	r2, #16
 801318a:	d1ed      	bne.n	8013168 <nd6_input+0x28c>
 801318c:	f012 0f08 	tst.w	r2, #8
 8013190:	d0f1      	beq.n	8013176 <nd6_input+0x29a>
            ip6_addr_isany(ip6_current_src_addr()))) &&
 8013192:	4a08      	ldr	r2, [pc, #32]	; (80131b4 <nd6_input+0x2d8>)
 8013194:	6952      	ldr	r2, [r2, #20]
           (ip6_addr_istentative(netif_ip6_addr_state(inp, i)) &&
 8013196:	2a00      	cmp	r2, #0
 8013198:	d1ed      	bne.n	8013176 <nd6_input+0x29a>
            ip6_addr_isany(ip6_current_src_addr()))) &&
 801319a:	4a06      	ldr	r2, [pc, #24]	; (80131b4 <nd6_input+0x2d8>)
 801319c:	6992      	ldr	r2, [r2, #24]
 801319e:	2a00      	cmp	r2, #0
 80131a0:	d1e9      	bne.n	8013176 <nd6_input+0x29a>
 80131a2:	4a04      	ldr	r2, [pc, #16]	; (80131b4 <nd6_input+0x2d8>)
 80131a4:	69d2      	ldr	r2, [r2, #28]
 80131a6:	2a00      	cmp	r2, #0
 80131a8:	d1e5      	bne.n	8013176 <nd6_input+0x29a>
 80131aa:	4a02      	ldr	r2, [pc, #8]	; (80131b4 <nd6_input+0x2d8>)
 80131ac:	6a12      	ldr	r2, [r2, #32]
 80131ae:	2a00      	cmp	r2, #0
 80131b0:	d1e1      	bne.n	8013176 <nd6_input+0x29a>
 80131b2:	e7d9      	b.n	8013168 <nd6_input+0x28c>
 80131b4:	200039e8 	.word	0x200039e8
 80131b8:	20007b70 	.word	0x20007b70
 80131bc:	20000014 	.word	0x20000014
          ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 80131c0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80131c4:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80131c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80131ca:	4594      	cmp	ip, r2
 80131cc:	d1d3      	bne.n	8013176 <nd6_input+0x29a>
 80131ce:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80131d2:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80131d6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80131d8:	4596      	cmp	lr, r2
 80131da:	d1cc      	bne.n	8013176 <nd6_input+0x29a>
 80131dc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80131e0:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80131e4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80131e6:	4590      	cmp	r8, r2
 80131e8:	d1c5      	bne.n	8013176 <nd6_input+0x29a>
 80131ea:	2218      	movs	r2, #24
 80131ec:	fb02 6303 	mla	r3, r2, r3, r6
 80131f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80131f4:	42bb      	cmp	r3, r7
 80131f6:	d1be      	bne.n	8013176 <nd6_input+0x29a>
        accepted = 1;
 80131f8:	f04f 0901 	mov.w	r9, #1
    if (!accepted) {
 80131fc:	f1b9 0f00 	cmp.w	r9, #0
 8013200:	d021      	beq.n	8013246 <nd6_input+0x36a>
    if (ip6_addr_isany(ip6_current_src_addr())) {
 8013202:	4bb7      	ldr	r3, [pc, #732]	; (80134e0 <nd6_input+0x604>)
 8013204:	695b      	ldr	r3, [r3, #20]
 8013206:	b94b      	cbnz	r3, 801321c <nd6_input+0x340>
 8013208:	4bb5      	ldr	r3, [pc, #724]	; (80134e0 <nd6_input+0x604>)
 801320a:	699b      	ldr	r3, [r3, #24]
 801320c:	b933      	cbnz	r3, 801321c <nd6_input+0x340>
 801320e:	4bb4      	ldr	r3, [pc, #720]	; (80134e0 <nd6_input+0x604>)
 8013210:	69db      	ldr	r3, [r3, #28]
 8013212:	b91b      	cbnz	r3, 801321c <nd6_input+0x340>
 8013214:	4bb2      	ldr	r3, [pc, #712]	; (80134e0 <nd6_input+0x604>)
 8013216:	6a1b      	ldr	r3, [r3, #32]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d05e      	beq.n	80132da <nd6_input+0x3fe>
      if (lladdr_opt == NULL) {
 801321c:	2d00      	cmp	r5, #0
 801321e:	d05e      	beq.n	80132de <nd6_input+0x402>
      i = nd6_find_neighbor_cache_entry(ip6_current_src_addr());
 8013220:	48b0      	ldr	r0, [pc, #704]	; (80134e4 <nd6_input+0x608>)
 8013222:	f7fe fd6f 	bl	8011d04 <nd6_find_neighbor_cache_entry>
      if (i>= 0) {
 8013226:	2800      	cmp	r0, #0
 8013228:	db70      	blt.n	801330c <nd6_input+0x430>
        if (neighbor_cache[i].state == ND6_INCOMPLETE) {
 801322a:	4aaf      	ldr	r2, [pc, #700]	; (80134e8 <nd6_input+0x60c>)
 801322c:	232c      	movs	r3, #44	; 0x2c
 801322e:	fb03 2300 	mla	r3, r3, r0, r2
 8013232:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013236:	2b01      	cmp	r3, #1
 8013238:	d055      	beq.n	80132e6 <nd6_input+0x40a>
      nd6_send_na(inp, &target_address, ND6_FLAG_SOLICITED | ND6_FLAG_OVERRIDE);
 801323a:	2260      	movs	r2, #96	; 0x60
 801323c:	a905      	add	r1, sp, #20
 801323e:	4630      	mov	r0, r6
 8013240:	f7ff fa42 	bl	80126c8 <nd6_send_na>
 8013244:	e2d1      	b.n	80137ea <nd6_input+0x90e>
      pbuf_free(p);
 8013246:	4620      	mov	r0, r4
 8013248:	f7f4 faa4 	bl	8007794 <pbuf_free>
      return;
 801324c:	e2d0      	b.n	80137f0 <nd6_input+0x914>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 801324e:	3501      	adds	r5, #1
 8013250:	b26d      	sxtb	r5, r5
 8013252:	2d02      	cmp	r5, #2
 8013254:	f300 82c9 	bgt.w	80137ea <nd6_input+0x90e>
        if (!ip6_addr_isinvalid(netif_ip6_addr_state(inp, i)) &&
 8013258:	1973      	adds	r3, r6, r5
 801325a:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 801325e:	2b00      	cmp	r3, #0
 8013260:	d0f5      	beq.n	801324e <nd6_input+0x372>
            ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 8013262:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8013266:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801326a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        if (!ip6_addr_isinvalid(netif_ip6_addr_state(inp, i)) &&
 801326c:	9a05      	ldr	r2, [sp, #20]
 801326e:	429a      	cmp	r2, r3
 8013270:	d1ed      	bne.n	801324e <nd6_input+0x372>
            ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 8013272:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8013276:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801327a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801327c:	9a06      	ldr	r2, [sp, #24]
 801327e:	429a      	cmp	r2, r3
 8013280:	d1e5      	bne.n	801324e <nd6_input+0x372>
 8013282:	2318      	movs	r3, #24
 8013284:	fb03 6305 	mla	r3, r3, r5, r6
 8013288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801328a:	9a07      	ldr	r2, [sp, #28]
 801328c:	429a      	cmp	r2, r3
 801328e:	d1de      	bne.n	801324e <nd6_input+0x372>
 8013290:	2318      	movs	r3, #24
 8013292:	fb03 6305 	mla	r3, r3, r5, r6
 8013296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013298:	9a08      	ldr	r2, [sp, #32]
 801329a:	429a      	cmp	r2, r3
 801329c:	d1d7      	bne.n	801324e <nd6_input+0x372>
 801329e:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 80132a2:	2318      	movs	r3, #24
 80132a4:	fb03 6305 	mla	r3, r3, r5, r6
 80132a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80132ac:	429a      	cmp	r2, r3
 80132ae:	d1ce      	bne.n	801324e <nd6_input+0x372>
          nd6_send_na(inp, netif_ip6_addr(inp, i), ND6_FLAG_OVERRIDE | ND6_SEND_FLAG_ALLNODES_DEST);
 80132b0:	2118      	movs	r1, #24
 80132b2:	fb01 f105 	mul.w	r1, r1, r5
 80132b6:	3148      	adds	r1, #72	; 0x48
 80132b8:	4431      	add	r1, r6
 80132ba:	2222      	movs	r2, #34	; 0x22
 80132bc:	3104      	adds	r1, #4
 80132be:	4630      	mov	r0, r6
 80132c0:	f7ff fa02 	bl	80126c8 <nd6_send_na>
          if (ip6_addr_istentative(netif_ip6_addr_state(inp, i))) {
 80132c4:	1973      	adds	r3, r6, r5
 80132c6:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80132ca:	f013 0f08 	tst.w	r3, #8
 80132ce:	d0be      	beq.n	801324e <nd6_input+0x372>
            nd6_duplicate_addr_detected(inp, i);
 80132d0:	4629      	mov	r1, r5
 80132d2:	4630      	mov	r0, r6
 80132d4:	f7fe ffa2 	bl	801221c <nd6_duplicate_addr_detected>
 80132d8:	e7b9      	b.n	801324e <nd6_input+0x372>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 80132da:	2500      	movs	r5, #0
 80132dc:	e7b9      	b.n	8013252 <nd6_input+0x376>
        pbuf_free(p);
 80132de:	4620      	mov	r0, r4
 80132e0:	f7f4 fa58 	bl	8007794 <pbuf_free>
        return;
 80132e4:	e284      	b.n	80137f0 <nd6_input+0x914>
          neighbor_cache[i].netif = inp;
 80132e6:	4694      	mov	ip, r2
 80132e8:	232c      	movs	r3, #44	; 0x2c
 80132ea:	fb03 f000 	mul.w	r0, r3, r0
 80132ee:	1817      	adds	r7, r2, r0
 80132f0:	617e      	str	r6, [r7, #20]
          MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 80132f2:	3018      	adds	r0, #24
 80132f4:	f896 20de 	ldrb.w	r2, [r6, #222]	; 0xde
 80132f8:	1ca9      	adds	r1, r5, #2
 80132fa:	4460      	add	r0, ip
 80132fc:	f000 ff6a 	bl	80141d4 <memcpy>
          neighbor_cache[i].state = ND6_DELAY;
 8013300:	2304      	movs	r3, #4
 8013302:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
          neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 8013306:	2305      	movs	r3, #5
 8013308:	62bb      	str	r3, [r7, #40]	; 0x28
 801330a:	e796      	b.n	801323a <nd6_input+0x35e>
        i = nd6_new_neighbor_cache_entry();
 801330c:	f7ff f8fc 	bl	8012508 <nd6_new_neighbor_cache_entry>
        if (i < 0) {
 8013310:	2800      	cmp	r0, #0
 8013312:	db23      	blt.n	801335c <nd6_input+0x480>
        neighbor_cache[i].netif = inp;
 8013314:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80134e8 <nd6_input+0x60c>
 8013318:	f04f 082c 	mov.w	r8, #44	; 0x2c
 801331c:	fb08 f800 	mul.w	r8, r8, r0
 8013320:	eb09 0708 	add.w	r7, r9, r8
 8013324:	617e      	str	r6, [r7, #20]
        MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 8013326:	f108 0018 	add.w	r0, r8, #24
 801332a:	f896 20de 	ldrb.w	r2, [r6, #222]	; 0xde
 801332e:	1ca9      	adds	r1, r5, #2
 8013330:	4448      	add	r0, r9
 8013332:	f000 ff4f 	bl	80141d4 <memcpy>
        ip6_addr_set(&(neighbor_cache[i].next_hop_address), ip6_current_src_addr());
 8013336:	4b6a      	ldr	r3, [pc, #424]	; (80134e0 <nd6_input+0x604>)
 8013338:	695a      	ldr	r2, [r3, #20]
 801333a:	f849 2008 	str.w	r2, [r9, r8]
 801333e:	699a      	ldr	r2, [r3, #24]
 8013340:	607a      	str	r2, [r7, #4]
 8013342:	69da      	ldr	r2, [r3, #28]
 8013344:	60ba      	str	r2, [r7, #8]
 8013346:	6a1a      	ldr	r2, [r3, #32]
 8013348:	60fa      	str	r2, [r7, #12]
 801334a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801334e:	743b      	strb	r3, [r7, #16]
        neighbor_cache[i].state = ND6_DELAY;
 8013350:	2304      	movs	r3, #4
 8013352:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 8013356:	2305      	movs	r3, #5
 8013358:	62bb      	str	r3, [r7, #40]	; 0x28
 801335a:	e76e      	b.n	801323a <nd6_input+0x35e>
          pbuf_free(p);
 801335c:	4620      	mov	r0, r4
 801335e:	f7f4 fa19 	bl	8007794 <pbuf_free>
          return;
 8013362:	e245      	b.n	80137f0 <nd6_input+0x914>
    if (p->len < sizeof(struct ra_header)) {
 8013364:	8943      	ldrh	r3, [r0, #10]
 8013366:	2b0f      	cmp	r3, #15
 8013368:	d939      	bls.n	80133de <nd6_input+0x502>
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 801336a:	4b5d      	ldr	r3, [pc, #372]	; (80134e0 <nd6_input+0x604>)
 801336c:	695b      	ldr	r3, [r3, #20]
 801336e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013372:	041b      	lsls	r3, r3, #16
 8013374:	0c1b      	lsrs	r3, r3, #16
 8013376:	f248 02fe 	movw	r2, #33022	; 0x80fe
 801337a:	4293      	cmp	r3, r2
 801337c:	d132      	bne.n	80133e4 <nd6_input+0x508>
        IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ra_hdr->code != 0) {
 801337e:	4b58      	ldr	r3, [pc, #352]	; (80134e0 <nd6_input+0x604>)
 8013380:	68db      	ldr	r3, [r3, #12]
 8013382:	79db      	ldrb	r3, [r3, #7]
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 8013384:	2bff      	cmp	r3, #255	; 0xff
 8013386:	d12d      	bne.n	80133e4 <nd6_input+0x508>
        IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ra_hdr->code != 0) {
 8013388:	f895 a001 	ldrb.w	sl, [r5, #1]
 801338c:	f1ba 0f00 	cmp.w	sl, #0
 8013390:	d128      	bne.n	80133e4 <nd6_input+0x508>
    if ((inp->rs_count < LWIP_ND6_MAX_MULTICAST_SOLICIT) ||
 8013392:	f891 30e4 	ldrb.w	r3, [r1, #228]	; 0xe4
 8013396:	2b02      	cmp	r3, #2
 8013398:	d828      	bhi.n	80133ec <nd6_input+0x510>
      inp->rs_count = 0;
 801339a:	2300      	movs	r3, #0
 801339c:	f886 30e4 	strb.w	r3, [r6, #228]	; 0xe4
    i = nd6_get_router(ip6_current_src_addr(), inp);
 80133a0:	4631      	mov	r1, r6
 80133a2:	4850      	ldr	r0, [pc, #320]	; (80134e4 <nd6_input+0x608>)
 80133a4:	f7fe fe32 	bl	801200c <nd6_get_router>
    if (i < 0) {
 80133a8:	1e07      	subs	r7, r0, #0
 80133aa:	db28      	blt.n	80133fe <nd6_input+0x522>
    if (i < 0) {
 80133ac:	2f00      	cmp	r7, #0
 80133ae:	db2c      	blt.n	801340a <nd6_input+0x52e>
    default_router_list[i].invalidation_timer = lwip_htons(ra_hdr->router_lifetime);
 80133b0:	88e8      	ldrh	r0, [r5, #6]
 80133b2:	f7f2 fedd 	bl	8006170 <lwip_htons>
 80133b6:	46b9      	mov	r9, r7
 80133b8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80133bc:	4b4b      	ldr	r3, [pc, #300]	; (80134ec <nd6_input+0x610>)
 80133be:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80133c2:	6078      	str	r0, [r7, #4]
    if (ra_hdr->retrans_timer > 0) {
 80133c4:	68e8      	ldr	r0, [r5, #12]
 80133c6:	bb20      	cbnz	r0, 8013412 <nd6_input+0x536>
    if (ra_hdr->reachable_time > 0) {
 80133c8:	68a8      	ldr	r0, [r5, #8]
 80133ca:	bb38      	cbnz	r0, 801341c <nd6_input+0x540>
    default_router_list[i].flags = ra_hdr->flags;
 80133cc:	7969      	ldrb	r1, [r5, #5]
 80133ce:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 80133d2:	4a46      	ldr	r2, [pc, #280]	; (80134ec <nd6_input+0x610>)
 80133d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80133d8:	7219      	strb	r1, [r3, #8]
    offset = sizeof(struct ra_header);
 80133da:	2710      	movs	r7, #16
    while ((p->tot_len - offset) >= 2) {
 80133dc:	e03a      	b.n	8013454 <nd6_input+0x578>
      pbuf_free(p);
 80133de:	f7f4 f9d9 	bl	8007794 <pbuf_free>
      return;
 80133e2:	e205      	b.n	80137f0 <nd6_input+0x914>
      pbuf_free(p);
 80133e4:	4620      	mov	r0, r4
 80133e6:	f7f4 f9d5 	bl	8007794 <pbuf_free>
      return;
 80133ea:	e201      	b.n	80137f0 <nd6_input+0x914>
        (nd6_send_rs(inp) == ERR_OK)) {
 80133ec:	4608      	mov	r0, r1
 80133ee:	f7ff f9f1 	bl	80127d4 <nd6_send_rs>
    if ((inp->rs_count < LWIP_ND6_MAX_MULTICAST_SOLICIT) ||
 80133f2:	2800      	cmp	r0, #0
 80133f4:	d0d1      	beq.n	801339a <nd6_input+0x4be>
      inp->rs_count = 1;
 80133f6:	2301      	movs	r3, #1
 80133f8:	f886 30e4 	strb.w	r3, [r6, #228]	; 0xe4
 80133fc:	e7d0      	b.n	80133a0 <nd6_input+0x4c4>
      i = nd6_new_router(ip6_current_src_addr(), inp);
 80133fe:	4631      	mov	r1, r6
 8013400:	4838      	ldr	r0, [pc, #224]	; (80134e4 <nd6_input+0x608>)
 8013402:	f7ff fadd 	bl	80129c0 <nd6_new_router>
 8013406:	4607      	mov	r7, r0
 8013408:	e7d0      	b.n	80133ac <nd6_input+0x4d0>
      pbuf_free(p);
 801340a:	4620      	mov	r0, r4
 801340c:	f7f4 f9c2 	bl	8007794 <pbuf_free>
      return;
 8013410:	e1ee      	b.n	80137f0 <nd6_input+0x914>
      retrans_timer = lwip_htonl(ra_hdr->retrans_timer);
 8013412:	f7f2 feb2 	bl	800617a <lwip_htonl>
 8013416:	4b36      	ldr	r3, [pc, #216]	; (80134f0 <nd6_input+0x614>)
 8013418:	6018      	str	r0, [r3, #0]
 801341a:	e7d5      	b.n	80133c8 <nd6_input+0x4ec>
      reachable_time = lwip_htonl(ra_hdr->reachable_time);
 801341c:	f7f2 fead 	bl	800617a <lwip_htonl>
 8013420:	4b34      	ldr	r3, [pc, #208]	; (80134f4 <nd6_input+0x618>)
 8013422:	6018      	str	r0, [r3, #0]
 8013424:	e7d2      	b.n	80133cc <nd6_input+0x4f0>
        buffer = &((u8_t*)p->payload)[offset];
 8013426:	6863      	ldr	r3, [r4, #4]
 8013428:	eb03 0807 	add.w	r8, r3, r7
 801342c:	e007      	b.n	801343e <nd6_input+0x562>
        option_len = pbuf_copy_partial(p, &nd6_ra_buffer, option_len, offset);
 801342e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80134f8 <nd6_input+0x61c>
 8013432:	463b      	mov	r3, r7
 8013434:	4641      	mov	r1, r8
 8013436:	4620      	mov	r0, r4
 8013438:	f7f4 fc02 	bl	8007c40 <pbuf_copy_partial>
 801343c:	4602      	mov	r2, r0
      option_type = buffer[0];
 801343e:	f898 3000 	ldrb.w	r3, [r8]
      switch (option_type) {
 8013442:	2b03      	cmp	r3, #3
 8013444:	d073      	beq.n	801352e <nd6_input+0x652>
 8013446:	2b05      	cmp	r3, #5
 8013448:	d058      	beq.n	80134fc <nd6_input+0x620>
 801344a:	2b01      	cmp	r3, #1
 801344c:	d027      	beq.n	801349e <nd6_input+0x5c2>
      offset += 8 * (u8_t)option_len8;
 801344e:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
 8013452:	b2bf      	uxth	r7, r7
    while ((p->tot_len - offset) >= 2) {
 8013454:	8923      	ldrh	r3, [r4, #8]
 8013456:	46b8      	mov	r8, r7
 8013458:	1bdb      	subs	r3, r3, r7
 801345a:	2b01      	cmp	r3, #1
 801345c:	f340 81c5 	ble.w	80137ea <nd6_input+0x90e>
      int option_len8 = pbuf_try_get_at(p, offset + 1);
 8013460:	1c79      	adds	r1, r7, #1
 8013462:	b289      	uxth	r1, r1
 8013464:	4620      	mov	r0, r4
 8013466:	f7f4 fcf7 	bl	8007e58 <pbuf_try_get_at>
      if (option_len8 <= 0) {
 801346a:	2800      	cmp	r0, #0
 801346c:	f340 81ca 	ble.w	8013804 <nd6_input+0x928>
      option_len = ((u8_t)option_len8) << 3;
 8013470:	b2c5      	uxtb	r5, r0
 8013472:	00ea      	lsls	r2, r5, #3
      if (option_len > p->tot_len - offset) {
 8013474:	8923      	ldrh	r3, [r4, #8]
 8013476:	eba3 0808 	sub.w	r8, r3, r8
 801347a:	ebb8 0fc5 	cmp.w	r8, r5, lsl #3
 801347e:	f2c0 81c1 	blt.w	8013804 <nd6_input+0x928>
      if (p->len == p->tot_len) {
 8013482:	8961      	ldrh	r1, [r4, #10]
 8013484:	428b      	cmp	r3, r1
 8013486:	d0ce      	beq.n	8013426 <nd6_input+0x54a>
        if (option_len > sizeof(nd6_ra_buffer)) {
 8013488:	2a20      	cmp	r2, #32
 801348a:	d9d0      	bls.n	801342e <nd6_input+0x552>
          option_type = pbuf_get_at(p, offset);
 801348c:	4639      	mov	r1, r7
 801348e:	4620      	mov	r0, r4
 8013490:	f7f4 fcf9 	bl	8007e86 <pbuf_get_at>
          if (option_type != ND6_OPTION_TYPE_RDNSS) {
 8013494:	2819      	cmp	r0, #25
 8013496:	f040 81b5 	bne.w	8013804 <nd6_input+0x928>
          option_len = sizeof(nd6_ra_buffer);
 801349a:	2220      	movs	r2, #32
 801349c:	e7c7      	b.n	801342e <nd6_input+0x552>
        if (option_len < sizeof(struct lladdr_option)) {
 801349e:	2a07      	cmp	r2, #7
 80134a0:	f240 81b0 	bls.w	8013804 <nd6_input+0x928>
        if ((default_router_list[i].neighbor_entry != NULL) &&
 80134a4:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 80134a8:	4a10      	ldr	r2, [pc, #64]	; (80134ec <nd6_input+0x610>)
 80134aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80134ae:	2800      	cmp	r0, #0
 80134b0:	d0cd      	beq.n	801344e <nd6_input+0x572>
            (default_router_list[i].neighbor_entry->state == ND6_INCOMPLETE)) {
 80134b2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
        if ((default_router_list[i].neighbor_entry != NULL) &&
 80134b6:	2b01      	cmp	r3, #1
 80134b8:	d1c9      	bne.n	801344e <nd6_input+0x572>
          SMEMCPY(default_router_list[i].neighbor_entry->lladdr, lladdr_opt->addr, inp->hwaddr_len);
 80134ba:	f896 20de 	ldrb.w	r2, [r6, #222]	; 0xde
 80134be:	f108 0102 	add.w	r1, r8, #2
 80134c2:	3018      	adds	r0, #24
 80134c4:	f000 fe86 	bl	80141d4 <memcpy>
          default_router_list[i].neighbor_entry->state = ND6_REACHABLE;
 80134c8:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 80134cc:	4a07      	ldr	r2, [pc, #28]	; (80134ec <nd6_input+0x610>)
 80134ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80134d2:	2202      	movs	r2, #2
 80134d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          default_router_list[i].neighbor_entry->counter.reachable_time = reachable_time;
 80134d8:	4a06      	ldr	r2, [pc, #24]	; (80134f4 <nd6_input+0x618>)
 80134da:	6812      	ldr	r2, [r2, #0]
 80134dc:	629a      	str	r2, [r3, #40]	; 0x28
 80134de:	e7b6      	b.n	801344e <nd6_input+0x572>
 80134e0:	200039e8 	.word	0x200039e8
 80134e4:	200039fc 	.word	0x200039fc
 80134e8:	20007b70 	.word	0x20007b70
 80134ec:	20007f94 	.word	0x20007f94
 80134f0:	20000018 	.word	0x20000018
 80134f4:	20000014 	.word	0x20000014
 80134f8:	200007c0 	.word	0x200007c0
        if (option_len < sizeof(struct mtu_option)) {
 80134fc:	2a07      	cmp	r2, #7
 80134fe:	f240 8181 	bls.w	8013804 <nd6_input+0x928>
        mtu32 = lwip_htonl(mtu_opt->mtu);
 8013502:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013506:	f7f2 fe38 	bl	800617a <lwip_htonl>
        if ((mtu32 >= 1280) && (mtu32 <= 0xffff)) {
 801350a:	f5a0 63a0 	sub.w	r3, r0, #1280	; 0x500
 801350e:	f5b3 4f7b 	cmp.w	r3, #64256	; 0xfb00
 8013512:	d29c      	bcs.n	801344e <nd6_input+0x572>
          if (inp->mtu) {
 8013514:	f8b6 30d4 	ldrh.w	r3, [r6, #212]	; 0xd4
 8013518:	b133      	cbz	r3, 8013528 <nd6_input+0x64c>
            inp->mtu6 = LWIP_MIN(inp->mtu, (u16_t)mtu32);
 801351a:	b280      	uxth	r0, r0
 801351c:	4298      	cmp	r0, r3
 801351e:	bf28      	it	cs
 8013520:	4618      	movcs	r0, r3
 8013522:	f8a6 00d6 	strh.w	r0, [r6, #214]	; 0xd6
 8013526:	e792      	b.n	801344e <nd6_input+0x572>
            inp->mtu6 = (u16_t)mtu32;
 8013528:	f8a6 00d6 	strh.w	r0, [r6, #214]	; 0xd6
 801352c:	e78f      	b.n	801344e <nd6_input+0x572>
        if (option_len < sizeof(struct prefix_option)) {
 801352e:	2a1f      	cmp	r2, #31
 8013530:	f240 8168 	bls.w	8013804 <nd6_input+0x928>
        ip6_addr_copy_from_packed(prefix_addr, prefix_opt->prefix);
 8013534:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013538:	9305      	str	r3, [sp, #20]
 801353a:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801353e:	9206      	str	r2, [sp, #24]
 8013540:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8013544:	9207      	str	r2, [sp, #28]
 8013546:	f8d8 201c 	ldr.w	r2, [r8, #28]
 801354a:	9208      	str	r2, [sp, #32]
        ip6_addr_assign_zone(&prefix_addr, IP6_UNICAST, inp);
 801354c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013550:	041b      	lsls	r3, r3, #16
 8013552:	0c1b      	lsrs	r3, r3, #16
 8013554:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8013558:	4293      	cmp	r3, r2
 801355a:	d017      	beq.n	801358c <nd6_input+0x6b0>
 801355c:	4652      	mov	r2, sl
 801355e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        if (!ip6_addr_islinklocal(&prefix_addr)) {
 8013562:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8013566:	4293      	cmp	r3, r2
 8013568:	f43f af71 	beq.w	801344e <nd6_input+0x572>
          if ((prefix_opt->flags & ND6_PREFIX_FLAG_ON_LINK) &&
 801356c:	f998 3003 	ldrsb.w	r3, [r8, #3]
 8013570:	2b00      	cmp	r3, #0
 8013572:	db10      	blt.n	8013596 <nd6_input+0x6ba>
          if (prefix_opt->flags & ND6_PREFIX_FLAG_AUTONOMOUS) {
 8013574:	f898 3003 	ldrb.w	r3, [r8, #3]
 8013578:	f013 0f40 	tst.w	r3, #64	; 0x40
 801357c:	f43f af67 	beq.w	801344e <nd6_input+0x572>
            nd6_process_autoconfig_prefix(inp, prefix_opt, &prefix_addr);
 8013580:	aa05      	add	r2, sp, #20
 8013582:	4641      	mov	r1, r8
 8013584:	4630      	mov	r0, r6
 8013586:	f7fe fe6b 	bl	8012260 <nd6_process_autoconfig_prefix>
        break;
 801358a:	e760      	b.n	801344e <nd6_input+0x572>
        ip6_addr_assign_zone(&prefix_addr, IP6_UNICAST, inp);
 801358c:	f896 20e2 	ldrb.w	r2, [r6, #226]	; 0xe2
 8013590:	3201      	adds	r2, #1
 8013592:	b2d2      	uxtb	r2, r2
 8013594:	e7e3      	b.n	801355e <nd6_input+0x682>
              (prefix_opt->prefix_length == 64)) {
 8013596:	f898 3002 	ldrb.w	r3, [r8, #2]
          if ((prefix_opt->flags & ND6_PREFIX_FLAG_ON_LINK) &&
 801359a:	2b40      	cmp	r3, #64	; 0x40
 801359c:	d1ea      	bne.n	8013574 <nd6_input+0x698>
            valid_life = lwip_htonl(prefix_opt->valid_lifetime);
 801359e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80135a2:	f7f2 fdea 	bl	800617a <lwip_htonl>
 80135a6:	4683      	mov	fp, r0
            prefix = nd6_get_onlink_prefix(&prefix_addr, inp);
 80135a8:	4631      	mov	r1, r6
 80135aa:	a805      	add	r0, sp, #20
 80135ac:	f7fe fd5e 	bl	801206c <nd6_get_onlink_prefix>
            if (prefix < 0 && valid_life > 0) {
 80135b0:	1e03      	subs	r3, r0, #0
 80135b2:	db09      	blt.n	80135c8 <nd6_input+0x6ec>
            if (prefix >= 0) {
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	dbdd      	blt.n	8013574 <nd6_input+0x698>
              prefix_list[prefix].invalidation_timer = valid_life;
 80135b8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80135bc:	4a93      	ldr	r2, [pc, #588]	; (801380c <nd6_input+0x930>)
 80135be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80135c2:	f8c3 b018 	str.w	fp, [r3, #24]
 80135c6:	e7d5      	b.n	8013574 <nd6_input+0x698>
            if (prefix < 0 && valid_life > 0) {
 80135c8:	f1bb 0f00 	cmp.w	fp, #0
 80135cc:	d0f2      	beq.n	80135b4 <nd6_input+0x6d8>
              prefix = nd6_new_onlink_prefix(&prefix_addr, inp);
 80135ce:	4631      	mov	r1, r6
 80135d0:	a805      	add	r0, sp, #20
 80135d2:	f7fe fd7d 	bl	80120d0 <nd6_new_onlink_prefix>
 80135d6:	4603      	mov	r3, r0
 80135d8:	e7ec      	b.n	80135b4 <nd6_input+0x6d8>
    if (p->len < sizeof(struct redirect_header)) {
 80135da:	8943      	ldrh	r3, [r0, #10]
 80135dc:	2b27      	cmp	r3, #39	; 0x27
 80135de:	d934      	bls.n	801364a <nd6_input+0x76e>
    ip6_addr_copy_from_packed(destination_address, redir_hdr->destination_address);
 80135e0:	69a9      	ldr	r1, [r5, #24]
 80135e2:	9100      	str	r1, [sp, #0]
 80135e4:	69eb      	ldr	r3, [r5, #28]
 80135e6:	9301      	str	r3, [sp, #4]
 80135e8:	6a2b      	ldr	r3, [r5, #32]
 80135ea:	9302      	str	r3, [sp, #8]
 80135ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80135ee:	9303      	str	r3, [sp, #12]
    ip6_addr_assign_zone(&destination_address, IP6_UNICAST, inp);
 80135f0:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 80135f4:	400a      	ands	r2, r1
 80135f6:	f248 03fe 	movw	r3, #33022	; 0x80fe
 80135fa:	429a      	cmp	r2, r3
 80135fc:	d028      	beq.n	8013650 <nd6_input+0x774>
 80135fe:	2200      	movs	r2, #0
 8013600:	f88d 2010 	strb.w	r2, [sp, #16]
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 8013604:	4b82      	ldr	r3, [pc, #520]	; (8013810 <nd6_input+0x934>)
 8013606:	695b      	ldr	r3, [r3, #20]
 8013608:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801360c:	041b      	lsls	r3, r3, #16
 801360e:	0c1b      	lsrs	r3, r3, #16
 8013610:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8013614:	4293      	cmp	r3, r2
 8013616:	d120      	bne.n	801365a <nd6_input+0x77e>
        IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM ||
 8013618:	4b7d      	ldr	r3, [pc, #500]	; (8013810 <nd6_input+0x934>)
 801361a:	68db      	ldr	r3, [r3, #12]
 801361c:	79db      	ldrb	r3, [r3, #7]
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 801361e:	2bff      	cmp	r3, #255	; 0xff
 8013620:	d11b      	bne.n	801365a <nd6_input+0x77e>
        redir_hdr->code != 0 || ip6_addr_ismulticast(&destination_address)) {
 8013622:	786f      	ldrb	r7, [r5, #1]
        IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM ||
 8013624:	b9cf      	cbnz	r7, 801365a <nd6_input+0x77e>
        redir_hdr->code != 0 || ip6_addr_ismulticast(&destination_address)) {
 8013626:	b2cb      	uxtb	r3, r1
 8013628:	2bff      	cmp	r3, #255	; 0xff
 801362a:	d016      	beq.n	801365a <nd6_input+0x77e>
    if (p->len >= (sizeof(struct redirect_header) + 2)) {
 801362c:	8962      	ldrh	r2, [r4, #10]
 801362e:	2a29      	cmp	r2, #41	; 0x29
 8013630:	d917      	bls.n	8013662 <nd6_input+0x786>
      lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct redirect_header));
 8013632:	6863      	ldr	r3, [r4, #4]
 8013634:	f103 0828 	add.w	r8, r3, #40	; 0x28
      if (p->len < (sizeof(struct redirect_header) + (lladdr_opt->length << 3))) {
 8013638:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801363c:	00db      	lsls	r3, r3, #3
 801363e:	3328      	adds	r3, #40	; 0x28
 8013640:	429a      	cmp	r2, r3
 8013642:	d210      	bcs.n	8013666 <nd6_input+0x78a>
        lladdr_opt = NULL;
 8013644:	f04f 0800 	mov.w	r8, #0
 8013648:	e00d      	b.n	8013666 <nd6_input+0x78a>
      pbuf_free(p);
 801364a:	f7f4 f8a3 	bl	8007794 <pbuf_free>
      return;
 801364e:	e0cf      	b.n	80137f0 <nd6_input+0x914>
    ip6_addr_assign_zone(&destination_address, IP6_UNICAST, inp);
 8013650:	f896 20e2 	ldrb.w	r2, [r6, #226]	; 0xe2
 8013654:	3201      	adds	r2, #1
 8013656:	b2d2      	uxtb	r2, r2
 8013658:	e7d2      	b.n	8013600 <nd6_input+0x724>
      pbuf_free(p);
 801365a:	4620      	mov	r0, r4
 801365c:	f7f4 f89a 	bl	8007794 <pbuf_free>
      return;
 8013660:	e0c6      	b.n	80137f0 <nd6_input+0x914>
      lladdr_opt = NULL;
 8013662:	f04f 0800 	mov.w	r8, #0
    dest_idx = nd6_find_destination_cache_entry(&destination_address);
 8013666:	4668      	mov	r0, sp
 8013668:	f7fe fb80 	bl	8011d6c <nd6_find_destination_cache_entry>
    if (dest_idx < 0) {
 801366c:	2800      	cmp	r0, #0
 801366e:	db4f      	blt.n	8013710 <nd6_input+0x834>
    ip6_addr_copy_from_packed(target_address, redir_hdr->target_address);
 8013670:	68a9      	ldr	r1, [r5, #8]
 8013672:	9105      	str	r1, [sp, #20]
 8013674:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8013678:	f8cd e018 	str.w	lr, [sp, #24]
 801367c:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8013680:	f8cd c01c 	str.w	ip, [sp, #28]
 8013684:	696d      	ldr	r5, [r5, #20]
 8013686:	9508      	str	r5, [sp, #32]
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 8013688:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 801368c:	400a      	ands	r2, r1
 801368e:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8013692:	429a      	cmp	r2, r3
 8013694:	d040      	beq.n	8013718 <nd6_input+0x83c>
 8013696:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    ip6_addr_copy(destination_cache[dest_idx].next_hop_addr, target_address);
 801369a:	4a5e      	ldr	r2, [pc, #376]	; (8013814 <nd6_input+0x938>)
 801369c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80136a0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80136a4:	6159      	str	r1, [r3, #20]
 80136a6:	f8c3 e018 	str.w	lr, [r3, #24]
 80136aa:	f8c3 c01c 	str.w	ip, [r3, #28]
 80136ae:	621d      	str	r5, [r3, #32]
 80136b0:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
    if (lladdr_opt != NULL) {
 80136b4:	f1b8 0f00 	cmp.w	r8, #0
 80136b8:	f000 8097 	beq.w	80137ea <nd6_input+0x90e>
      if (lladdr_opt->type == ND6_OPTION_TYPE_TARGET_LLADDR) {
 80136bc:	f898 3000 	ldrb.w	r3, [r8]
 80136c0:	2b02      	cmp	r3, #2
 80136c2:	f040 8092 	bne.w	80137ea <nd6_input+0x90e>
        i = nd6_find_neighbor_cache_entry(&target_address);
 80136c6:	a805      	add	r0, sp, #20
 80136c8:	f7fe fb1c 	bl	8011d04 <nd6_find_neighbor_cache_entry>
        if (i < 0) {
 80136cc:	1e05      	subs	r5, r0, #0
 80136ce:	db28      	blt.n	8013722 <nd6_input+0x846>
        if (i >= 0) {
 80136d0:	2d00      	cmp	r5, #0
 80136d2:	f2c0 808a 	blt.w	80137ea <nd6_input+0x90e>
          if (neighbor_cache[i].state == ND6_INCOMPLETE) {
 80136d6:	4a50      	ldr	r2, [pc, #320]	; (8013818 <nd6_input+0x93c>)
 80136d8:	232c      	movs	r3, #44	; 0x2c
 80136da:	fb03 2305 	mla	r3, r3, r5, r2
 80136de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80136e2:	2b01      	cmp	r3, #1
 80136e4:	f040 8081 	bne.w	80137ea <nd6_input+0x90e>
            MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 80136e8:	272c      	movs	r7, #44	; 0x2c
 80136ea:	fb07 f705 	mul.w	r7, r7, r5
 80136ee:	f107 0018 	add.w	r0, r7, #24
 80136f2:	4615      	mov	r5, r2
 80136f4:	f896 20de 	ldrb.w	r2, [r6, #222]	; 0xde
 80136f8:	f108 0102 	add.w	r1, r8, #2
 80136fc:	4428      	add	r0, r5
 80136fe:	f000 fd69 	bl	80141d4 <memcpy>
            neighbor_cache[i].state = ND6_DELAY;
 8013702:	443d      	add	r5, r7
 8013704:	2304      	movs	r3, #4
 8013706:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 801370a:	2305      	movs	r3, #5
 801370c:	62ab      	str	r3, [r5, #40]	; 0x28
 801370e:	e06c      	b.n	80137ea <nd6_input+0x90e>
      pbuf_free(p);
 8013710:	4620      	mov	r0, r4
 8013712:	f7f4 f83f 	bl	8007794 <pbuf_free>
      return;
 8013716:	e06b      	b.n	80137f0 <nd6_input+0x914>
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 8013718:	f896 70e2 	ldrb.w	r7, [r6, #226]	; 0xe2
 801371c:	3701      	adds	r7, #1
 801371e:	b2ff      	uxtb	r7, r7
 8013720:	e7b9      	b.n	8013696 <nd6_input+0x7ba>
          i = nd6_new_neighbor_cache_entry();
 8013722:	f7fe fef1 	bl	8012508 <nd6_new_neighbor_cache_entry>
          if (i >= 0) {
 8013726:	1e05      	subs	r5, r0, #0
 8013728:	dbd2      	blt.n	80136d0 <nd6_input+0x7f4>
            neighbor_cache[i].netif = inp;
 801372a:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8013818 <nd6_input+0x93c>
 801372e:	f04f 092c 	mov.w	r9, #44	; 0x2c
 8013732:	fb09 f905 	mul.w	r9, r9, r5
 8013736:	eb0a 0709 	add.w	r7, sl, r9
 801373a:	617e      	str	r6, [r7, #20]
            MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 801373c:	f109 0018 	add.w	r0, r9, #24
 8013740:	f896 20de 	ldrb.w	r2, [r6, #222]	; 0xde
 8013744:	f108 0102 	add.w	r1, r8, #2
 8013748:	4450      	add	r0, sl
 801374a:	f000 fd43 	bl	80141d4 <memcpy>
            ip6_addr_copy(neighbor_cache[i].next_hop_address, target_address);
 801374e:	9b05      	ldr	r3, [sp, #20]
 8013750:	f84a 3009 	str.w	r3, [sl, r9]
 8013754:	9b06      	ldr	r3, [sp, #24]
 8013756:	607b      	str	r3, [r7, #4]
 8013758:	9b07      	ldr	r3, [sp, #28]
 801375a:	60bb      	str	r3, [r7, #8]
 801375c:	9b08      	ldr	r3, [sp, #32]
 801375e:	60fb      	str	r3, [r7, #12]
 8013760:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8013764:	743b      	strb	r3, [r7, #16]
            neighbor_cache[i].state = ND6_DELAY;
 8013766:	2304      	movs	r3, #4
 8013768:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 801376c:	2305      	movs	r3, #5
 801376e:	62bb      	str	r3, [r7, #40]	; 0x28
 8013770:	e7ae      	b.n	80136d0 <nd6_input+0x7f4>
    if (p->len < (sizeof(struct icmp6_hdr) + IP6_HLEN)) {
 8013772:	8943      	ldrh	r3, [r0, #10]
 8013774:	2b2f      	cmp	r3, #47	; 0x2f
 8013776:	d91c      	bls.n	80137b2 <nd6_input+0x8d6>
    ip6_addr_copy_from_packed(destination_address, ip6hdr->dest);
 8013778:	6a2b      	ldr	r3, [r5, #32]
 801377a:	9305      	str	r3, [sp, #20]
 801377c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801377e:	9206      	str	r2, [sp, #24]
 8013780:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8013782:	9207      	str	r2, [sp, #28]
 8013784:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8013786:	9208      	str	r2, [sp, #32]
    ip6_addr_assign_zone(&destination_address, IP6_UNKNOWN, inp);
 8013788:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 801378c:	4019      	ands	r1, r3
 801378e:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8013792:	4291      	cmp	r1, r2
 8013794:	d010      	beq.n	80137b8 <nd6_input+0x8dc>
 8013796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801379a:	041b      	lsls	r3, r3, #16
 801379c:	0c1b      	lsrs	r3, r3, #16
 801379e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80137a2:	4293      	cmp	r3, r2
 80137a4:	d008      	beq.n	80137b8 <nd6_input+0x8dc>
 80137a6:	f240 22ff 	movw	r2, #767	; 0x2ff
 80137aa:	4293      	cmp	r3, r2
 80137ac:	d004      	beq.n	80137b8 <nd6_input+0x8dc>
 80137ae:	2300      	movs	r3, #0
 80137b0:	e006      	b.n	80137c0 <nd6_input+0x8e4>
      pbuf_free(p);
 80137b2:	f7f3 ffef 	bl	8007794 <pbuf_free>
      return;
 80137b6:	e01b      	b.n	80137f0 <nd6_input+0x914>
    ip6_addr_assign_zone(&destination_address, IP6_UNKNOWN, inp);
 80137b8:	f896 30e2 	ldrb.w	r3, [r6, #226]	; 0xe2
 80137bc:	3301      	adds	r3, #1
 80137be:	b2db      	uxtb	r3, r3
 80137c0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    dest_idx = nd6_find_destination_cache_entry(&destination_address);
 80137c4:	a805      	add	r0, sp, #20
 80137c6:	f7fe fad1 	bl	8011d6c <nd6_find_destination_cache_entry>
    if (dest_idx < 0) {
 80137ca:	1e06      	subs	r6, r0, #0
 80137cc:	db13      	blt.n	80137f6 <nd6_input+0x91a>
    pmtu = lwip_htonl(icmp6hdr->data);
 80137ce:	6868      	ldr	r0, [r5, #4]
 80137d0:	f7f2 fcd3 	bl	800617a <lwip_htonl>
    destination_cache[dest_idx].pmtu = (u16_t)LWIP_MIN(pmtu, 0xFFFF);
 80137d4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80137d8:	4298      	cmp	r0, r3
 80137da:	d810      	bhi.n	80137fe <nd6_input+0x922>
 80137dc:	b283      	uxth	r3, r0
 80137de:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80137e2:	4e0c      	ldr	r6, [pc, #48]	; (8013814 <nd6_input+0x938>)
 80137e4:	eb06 1000 	add.w	r0, r6, r0, lsl #4
 80137e8:	8503      	strh	r3, [r0, #40]	; 0x28
  pbuf_free(p);
 80137ea:	4620      	mov	r0, r4
 80137ec:	f7f3 ffd2 	bl	8007794 <pbuf_free>
}
 80137f0:	b00b      	add	sp, #44	; 0x2c
 80137f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pbuf_free(p);
 80137f6:	4620      	mov	r0, r4
 80137f8:	f7f3 ffcc 	bl	8007794 <pbuf_free>
      return;
 80137fc:	e7f8      	b.n	80137f0 <nd6_input+0x914>
    destination_cache[dest_idx].pmtu = (u16_t)LWIP_MIN(pmtu, 0xFFFF);
 80137fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013802:	e7ec      	b.n	80137de <nd6_input+0x902>
  pbuf_free(p);
 8013804:	4620      	mov	r0, r4
 8013806:	f7f3 ffc5 	bl	8007794 <pbuf_free>
 801380a:	e7f1      	b.n	80137f0 <nd6_input+0x914>
 801380c:	20007d28 	.word	0x20007d28
 8013810:	200039e8 	.word	0x200039e8
 8013814:	20007db4 	.word	0x20007db4
 8013818:	20007b70 	.word	0x20007b70

0801381c <nd6_tmr>:
{
 801381c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8013820:	2400      	movs	r4, #0
 8013822:	e046      	b.n	80138b2 <nd6_tmr+0x96>
      if ((neighbor_cache[i].counter.probes_sent >= LWIP_ND6_MAX_MULTICAST_SOLICIT) &&
 8013824:	4aaf      	ldr	r2, [pc, #700]	; (8013ae4 <nd6_tmr+0x2c8>)
 8013826:	232c      	movs	r3, #44	; 0x2c
 8013828:	fb03 2304 	mla	r3, r3, r4, r2
 801382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801382e:	2b02      	cmp	r3, #2
 8013830:	d906      	bls.n	8013840 <nd6_tmr+0x24>
          (!neighbor_cache[i].isrouter)) {
 8013832:	4611      	mov	r1, r2
 8013834:	222c      	movs	r2, #44	; 0x2c
 8013836:	fb02 1204 	mla	r2, r2, r4, r1
 801383a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
      if ((neighbor_cache[i].counter.probes_sent >= LWIP_ND6_MAX_MULTICAST_SOLICIT) &&
 801383e:	b14a      	cbz	r2, 8013854 <nd6_tmr+0x38>
        neighbor_cache[i].counter.probes_sent++;
 8013840:	4aa8      	ldr	r2, [pc, #672]	; (8013ae4 <nd6_tmr+0x2c8>)
 8013842:	202c      	movs	r0, #44	; 0x2c
 8013844:	fb00 2005 	mla	r0, r0, r5, r2
 8013848:	3301      	adds	r3, #1
 801384a:	6283      	str	r3, [r0, #40]	; 0x28
        nd6_send_neighbor_cache_probe(&neighbor_cache[i], ND6_SEND_FLAG_MULTICAST_DEST);
 801384c:	2101      	movs	r1, #1
 801384e:	f7ff f8af 	bl	80129b0 <nd6_send_neighbor_cache_probe>
 8013852:	e02c      	b.n	80138ae <nd6_tmr+0x92>
        nd6_free_neighbor_cache_entry(i);
 8013854:	4620      	mov	r0, r4
 8013856:	f7fe fe29 	bl	80124ac <nd6_free_neighbor_cache_entry>
 801385a:	e028      	b.n	80138ae <nd6_tmr+0x92>
      if (neighbor_cache[i].q != NULL) {
 801385c:	4aa1      	ldr	r2, [pc, #644]	; (8013ae4 <nd6_tmr+0x2c8>)
 801385e:	232c      	movs	r3, #44	; 0x2c
 8013860:	fb03 2304 	mla	r3, r3, r4, r2
 8013864:	6a1b      	ldr	r3, [r3, #32]
 8013866:	b113      	cbz	r3, 801386e <nd6_tmr+0x52>
        nd6_send_q(i);
 8013868:	4620      	mov	r0, r4
 801386a:	f7fe fc85 	bl	8012178 <nd6_send_q>
      if (neighbor_cache[i].counter.reachable_time <= ND6_TMR_INTERVAL) {
 801386e:	4a9d      	ldr	r2, [pc, #628]	; (8013ae4 <nd6_tmr+0x2c8>)
 8013870:	232c      	movs	r3, #44	; 0x2c
 8013872:	fb03 2305 	mla	r3, r3, r5, r2
 8013876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013878:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801387c:	d808      	bhi.n	8013890 <nd6_tmr+0x74>
        neighbor_cache[i].state = ND6_STALE;
 801387e:	202c      	movs	r0, #44	; 0x2c
 8013880:	fb00 2005 	mla	r0, r0, r5, r2
 8013884:	2303      	movs	r3, #3
 8013886:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        neighbor_cache[i].counter.stale_time = 0;
 801388a:	2300      	movs	r3, #0
 801388c:	6283      	str	r3, [r0, #40]	; 0x28
 801388e:	e00e      	b.n	80138ae <nd6_tmr+0x92>
        neighbor_cache[i].counter.reachable_time -= ND6_TMR_INTERVAL;
 8013890:	4a94      	ldr	r2, [pc, #592]	; (8013ae4 <nd6_tmr+0x2c8>)
 8013892:	202c      	movs	r0, #44	; 0x2c
 8013894:	fb00 2005 	mla	r0, r0, r5, r2
 8013898:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801389c:	6283      	str	r3, [r0, #40]	; 0x28
 801389e:	e006      	b.n	80138ae <nd6_tmr+0x92>
      neighbor_cache[i].counter.stale_time++;
 80138a0:	4a90      	ldr	r2, [pc, #576]	; (8013ae4 <nd6_tmr+0x2c8>)
 80138a2:	232c      	movs	r3, #44	; 0x2c
 80138a4:	fb03 2304 	mla	r3, r3, r4, r2
 80138a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80138aa:	3201      	adds	r2, #1
 80138ac:	629a      	str	r2, [r3, #40]	; 0x28
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 80138ae:	3401      	adds	r4, #1
 80138b0:	b264      	sxtb	r4, r4
 80138b2:	2c09      	cmp	r4, #9
 80138b4:	dc49      	bgt.n	801394a <nd6_tmr+0x12e>
    switch (neighbor_cache[i].state) {
 80138b6:	4625      	mov	r5, r4
 80138b8:	4a8a      	ldr	r2, [pc, #552]	; (8013ae4 <nd6_tmr+0x2c8>)
 80138ba:	232c      	movs	r3, #44	; 0x2c
 80138bc:	fb03 2304 	mla	r3, r3, r4, r2
 80138c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80138c4:	3b01      	subs	r3, #1
 80138c6:	2b04      	cmp	r3, #4
 80138c8:	d8f1      	bhi.n	80138ae <nd6_tmr+0x92>
 80138ca:	a201      	add	r2, pc, #4	; (adr r2, 80138d0 <nd6_tmr+0xb4>)
 80138cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138d0:	08013825 	.word	0x08013825
 80138d4:	0801385d 	.word	0x0801385d
 80138d8:	080138a1 	.word	0x080138a1
 80138dc:	080138e5 	.word	0x080138e5
 80138e0:	08013913 	.word	0x08013913
      if (neighbor_cache[i].counter.delay_time <= 1) {
 80138e4:	4a7f      	ldr	r2, [pc, #508]	; (8013ae4 <nd6_tmr+0x2c8>)
 80138e6:	232c      	movs	r3, #44	; 0x2c
 80138e8:	fb03 2304 	mla	r3, r3, r4, r2
 80138ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138ee:	2b01      	cmp	r3, #1
 80138f0:	d906      	bls.n	8013900 <nd6_tmr+0xe4>
        neighbor_cache[i].counter.delay_time--;
 80138f2:	4a7c      	ldr	r2, [pc, #496]	; (8013ae4 <nd6_tmr+0x2c8>)
 80138f4:	202c      	movs	r0, #44	; 0x2c
 80138f6:	fb00 2004 	mla	r0, r0, r4, r2
 80138fa:	3b01      	subs	r3, #1
 80138fc:	6283      	str	r3, [r0, #40]	; 0x28
 80138fe:	e7d6      	b.n	80138ae <nd6_tmr+0x92>
        neighbor_cache[i].state = ND6_PROBE;
 8013900:	202c      	movs	r0, #44	; 0x2c
 8013902:	fb00 2004 	mla	r0, r0, r4, r2
 8013906:	2305      	movs	r3, #5
 8013908:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        neighbor_cache[i].counter.probes_sent = 0;
 801390c:	2300      	movs	r3, #0
 801390e:	6283      	str	r3, [r0, #40]	; 0x28
 8013910:	e7cd      	b.n	80138ae <nd6_tmr+0x92>
      if ((neighbor_cache[i].counter.probes_sent >= LWIP_ND6_MAX_MULTICAST_SOLICIT) &&
 8013912:	4a74      	ldr	r2, [pc, #464]	; (8013ae4 <nd6_tmr+0x2c8>)
 8013914:	232c      	movs	r3, #44	; 0x2c
 8013916:	fb03 2304 	mla	r3, r3, r4, r2
 801391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801391c:	2b02      	cmp	r3, #2
 801391e:	d906      	bls.n	801392e <nd6_tmr+0x112>
          (!neighbor_cache[i].isrouter)) {
 8013920:	4611      	mov	r1, r2
 8013922:	222c      	movs	r2, #44	; 0x2c
 8013924:	fb02 1204 	mla	r2, r2, r4, r1
 8013928:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
      if ((neighbor_cache[i].counter.probes_sent >= LWIP_ND6_MAX_MULTICAST_SOLICIT) &&
 801392c:	b14a      	cbz	r2, 8013942 <nd6_tmr+0x126>
        neighbor_cache[i].counter.probes_sent++;
 801392e:	486d      	ldr	r0, [pc, #436]	; (8013ae4 <nd6_tmr+0x2c8>)
 8013930:	222c      	movs	r2, #44	; 0x2c
 8013932:	fb02 0005 	mla	r0, r2, r5, r0
 8013936:	3301      	adds	r3, #1
 8013938:	6283      	str	r3, [r0, #40]	; 0x28
        nd6_send_neighbor_cache_probe(&neighbor_cache[i], 0);
 801393a:	2100      	movs	r1, #0
 801393c:	f7ff f838 	bl	80129b0 <nd6_send_neighbor_cache_probe>
 8013940:	e7b5      	b.n	80138ae <nd6_tmr+0x92>
        nd6_free_neighbor_cache_entry(i);
 8013942:	4620      	mov	r0, r4
 8013944:	f7fe fdb2 	bl	80124ac <nd6_free_neighbor_cache_entry>
 8013948:	e7b1      	b.n	80138ae <nd6_tmr+0x92>
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 801394a:	2300      	movs	r3, #0
 801394c:	2b09      	cmp	r3, #9
 801394e:	dc0e      	bgt.n	801396e <nd6_tmr+0x152>
    destination_cache[i].age++;
 8013950:	4a65      	ldr	r2, [pc, #404]	; (8013ae8 <nd6_tmr+0x2cc>)
 8013952:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8013956:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 801395a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 801395c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8013960:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8013964:	3101      	adds	r1, #1
 8013966:	62d1      	str	r1, [r2, #44]	; 0x2c
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 8013968:	3301      	adds	r3, #1
 801396a:	b25b      	sxtb	r3, r3
 801396c:	e7ee      	b.n	801394c <nd6_tmr+0x130>
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 801396e:	2000      	movs	r0, #0
 8013970:	e054      	b.n	8013a1c <nd6_tmr+0x200>
        for (j = 0; j < LWIP_ND6_NUM_DESTINATIONS; j++) {
 8013972:	3301      	adds	r3, #1
 8013974:	b25b      	sxtb	r3, r3
 8013976:	2b09      	cmp	r3, #9
 8013978:	dc3e      	bgt.n	80139f8 <nd6_tmr+0x1dc>
          if (ip6_addr_cmp(&destination_cache[j].next_hop_addr,
 801397a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801397e:	495a      	ldr	r1, [pc, #360]	; (8013ae8 <nd6_tmr+0x2cc>)
 8013980:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8013984:	6951      	ldr	r1, [r2, #20]
 8013986:	6822      	ldr	r2, [r4, #0]
 8013988:	4291      	cmp	r1, r2
 801398a:	d1f2      	bne.n	8013972 <nd6_tmr+0x156>
 801398c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013990:	4955      	ldr	r1, [pc, #340]	; (8013ae8 <nd6_tmr+0x2cc>)
 8013992:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8013996:	6991      	ldr	r1, [r2, #24]
 8013998:	6862      	ldr	r2, [r4, #4]
 801399a:	4291      	cmp	r1, r2
 801399c:	d1e9      	bne.n	8013972 <nd6_tmr+0x156>
 801399e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80139a2:	4951      	ldr	r1, [pc, #324]	; (8013ae8 <nd6_tmr+0x2cc>)
 80139a4:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80139a8:	69d1      	ldr	r1, [r2, #28]
 80139aa:	68a2      	ldr	r2, [r4, #8]
 80139ac:	4291      	cmp	r1, r2
 80139ae:	d1e0      	bne.n	8013972 <nd6_tmr+0x156>
 80139b0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80139b4:	4a4c      	ldr	r2, [pc, #304]	; (8013ae8 <nd6_tmr+0x2cc>)
 80139b6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80139ba:	6a11      	ldr	r1, [r2, #32]
 80139bc:	68e2      	ldr	r2, [r4, #12]
 80139be:	4291      	cmp	r1, r2
 80139c0:	d1d7      	bne.n	8013972 <nd6_tmr+0x156>
 80139c2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80139c6:	4a48      	ldr	r2, [pc, #288]	; (8013ae8 <nd6_tmr+0x2cc>)
 80139c8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80139cc:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
 80139d0:	7c22      	ldrb	r2, [r4, #16]
 80139d2:	4291      	cmp	r1, r2
 80139d4:	d1cd      	bne.n	8013972 <nd6_tmr+0x156>
             ip6_addr_set_any(&destination_cache[j].destination_addr);
 80139d6:	4944      	ldr	r1, [pc, #272]	; (8013ae8 <nd6_tmr+0x2cc>)
 80139d8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80139dc:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 80139e0:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80139e4:	2700      	movs	r7, #0
 80139e6:	f841 700c 	str.w	r7, [r1, ip]
 80139ea:	6057      	str	r7, [r2, #4]
 80139ec:	6097      	str	r7, [r2, #8]
 80139ee:	60d7      	str	r7, [r2, #12]
 80139f0:	7417      	strb	r7, [r2, #16]
 80139f2:	e7be      	b.n	8013972 <nd6_tmr+0x156>
        for (j = 0; j < LWIP_ND6_NUM_DESTINATIONS; j++) {
 80139f4:	2300      	movs	r3, #0
 80139f6:	e7be      	b.n	8013976 <nd6_tmr+0x15a>
        default_router_list[i].neighbor_entry->isrouter = 0;
 80139f8:	2100      	movs	r1, #0
 80139fa:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
        default_router_list[i].neighbor_entry = NULL;
 80139fe:	4a3b      	ldr	r2, [pc, #236]	; (8013aec <nd6_tmr+0x2d0>)
 8013a00:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8013a04:	009c      	lsls	r4, r3, #2
 8013a06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013a0a:	5111      	str	r1, [r2, r4]
        default_router_list[i].invalidation_timer = 0;
 8013a0c:	6059      	str	r1, [r3, #4]
        default_router_list[i].flags = 0;
 8013a0e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8013a12:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013a16:	7211      	strb	r1, [r2, #8]
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 8013a18:	3001      	adds	r0, #1
 8013a1a:	b240      	sxtb	r0, r0
 8013a1c:	2802      	cmp	r0, #2
 8013a1e:	dc14      	bgt.n	8013a4a <nd6_tmr+0x22e>
    if (default_router_list[i].neighbor_entry != NULL) {
 8013a20:	4605      	mov	r5, r0
 8013a22:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8013a26:	4a31      	ldr	r2, [pc, #196]	; (8013aec <nd6_tmr+0x2d0>)
 8013a28:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013a2c:	2c00      	cmp	r4, #0
 8013a2e:	d0f3      	beq.n	8013a18 <nd6_tmr+0x1fc>
      if (default_router_list[i].invalidation_timer <= ND6_TMR_INTERVAL / 1000) {
 8013a30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013a34:	685a      	ldr	r2, [r3, #4]
 8013a36:	2a01      	cmp	r2, #1
 8013a38:	d9dc      	bls.n	80139f4 <nd6_tmr+0x1d8>
        default_router_list[i].invalidation_timer -= ND6_TMR_INTERVAL / 1000;
 8013a3a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8013a3e:	492b      	ldr	r1, [pc, #172]	; (8013aec <nd6_tmr+0x2d0>)
 8013a40:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013a44:	3a01      	subs	r2, #1
 8013a46:	605a      	str	r2, [r3, #4]
 8013a48:	e7e6      	b.n	8013a18 <nd6_tmr+0x1fc>
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	e009      	b.n	8013a62 <nd6_tmr+0x246>
        prefix_list[i].invalidation_timer = 0;
 8013a4e:	4601      	mov	r1, r0
 8013a50:	ebc3 00c3 	rsb	r0, r3, r3, lsl #3
 8013a54:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8013a58:	2400      	movs	r4, #0
 8013a5a:	6184      	str	r4, [r0, #24]
        prefix_list[i].netif = NULL;
 8013a5c:	6144      	str	r4, [r0, #20]
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
 8013a5e:	3301      	adds	r3, #1
 8013a60:	b25b      	sxtb	r3, r3
 8013a62:	2b04      	cmp	r3, #4
 8013a64:	dc16      	bgt.n	8013a94 <nd6_tmr+0x278>
    if (prefix_list[i].netif != NULL) {
 8013a66:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8013a6a:	4821      	ldr	r0, [pc, #132]	; (8013af0 <nd6_tmr+0x2d4>)
 8013a6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013a70:	6949      	ldr	r1, [r1, #20]
 8013a72:	2900      	cmp	r1, #0
 8013a74:	d0f3      	beq.n	8013a5e <nd6_tmr+0x242>
      if (prefix_list[i].invalidation_timer <= ND6_TMR_INTERVAL / 1000) {
 8013a76:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8013a7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013a7e:	6989      	ldr	r1, [r1, #24]
 8013a80:	2901      	cmp	r1, #1
 8013a82:	d9e4      	bls.n	8013a4e <nd6_tmr+0x232>
        prefix_list[i].invalidation_timer -= ND6_TMR_INTERVAL / 1000;
 8013a84:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8013a88:	4819      	ldr	r0, [pc, #100]	; (8013af0 <nd6_tmr+0x2d4>)
 8013a8a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8013a8e:	3901      	subs	r1, #1
 8013a90:	6191      	str	r1, [r2, #24]
 8013a92:	e7e4      	b.n	8013a5e <nd6_tmr+0x242>
  NETIF_FOREACH(netif) {
 8013a94:	4b17      	ldr	r3, [pc, #92]	; (8013af4 <nd6_tmr+0x2d8>)
 8013a96:	681d      	ldr	r5, [r3, #0]
 8013a98:	e096      	b.n	8013bc8 <nd6_tmr+0x3ac>
          netif_ip6_addr_set_valid_life(netif, i, 0);
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
          netif_ip6_addr_set_pref_life(netif, i, 0);
 8013aa0:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8013aa4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013aa8:	605a      	str	r2, [r3, #4]
          netif_ip6_addr_set_state(netif, i, IP6_ADDR_INVALID);
 8013aaa:	4621      	mov	r1, r4
 8013aac:	4628      	mov	r0, r5
 8013aae:	f7f3 fc35 	bl	800731c <netif_ip6_addr_set_state>
 8013ab2:	e057      	b.n	8013b64 <nd6_tmr+0x348>
            LWIP_ASSERT("bad valid lifetime", life != IP6_ADDR_LIFE_STATIC);
 8013ab4:	4b10      	ldr	r3, [pc, #64]	; (8013af8 <nd6_tmr+0x2dc>)
 8013ab6:	f240 4246 	movw	r2, #1094	; 0x446
 8013aba:	4910      	ldr	r1, [pc, #64]	; (8013afc <nd6_tmr+0x2e0>)
 8013abc:	4810      	ldr	r0, [pc, #64]	; (8013b00 <nd6_tmr+0x2e4>)
 8013abe:	f000 fbb9 	bl	8014234 <iprintf>
 8013ac2:	e03b      	b.n	8013b3c <nd6_tmr+0x320>
            netif_ip6_addr_set_pref_life(netif, i, 0);
 8013ac4:	f106 0328 	add.w	r3, r6, #40	; 0x28
 8013ac8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013acc:	2200      	movs	r2, #0
 8013ace:	605a      	str	r2, [r3, #4]
            if (addr_state == IP6_ADDR_PREFERRED)
 8013ad0:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 8013ad4:	d146      	bne.n	8013b64 <nd6_tmr+0x348>
              netif_ip6_addr_set_state(netif, i, IP6_ADDR_DEPRECATED);
 8013ad6:	2210      	movs	r2, #16
 8013ad8:	4621      	mov	r1, r4
 8013ada:	4628      	mov	r0, r5
 8013adc:	f7f3 fc1e 	bl	800731c <netif_ip6_addr_set_state>
 8013ae0:	e040      	b.n	8013b64 <nd6_tmr+0x348>
 8013ae2:	bf00      	nop
 8013ae4:	20007b70 	.word	0x20007b70
 8013ae8:	20007db4 	.word	0x20007db4
 8013aec:	20007f94 	.word	0x20007f94
 8013af0:	20007d28 	.word	0x20007d28
 8013af4:	20007b10 	.word	0x20007b10
 8013af8:	08017d58 	.word	0x08017d58
 8013afc:	08017d8c 	.word	0x08017d8c
 8013b00:	08015418 	.word	0x08015418
          addr_state = IP6_ADDR_PREFERRED;
 8013b04:	2230      	movs	r2, #48	; 0x30
          netif_ip6_addr_set_state(netif, i, addr_state);
 8013b06:	4621      	mov	r1, r4
 8013b08:	4628      	mov	r0, r5
 8013b0a:	f7f3 fc07 	bl	800731c <netif_ip6_addr_set_state>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 8013b0e:	3401      	adds	r4, #1
 8013b10:	b264      	sxtb	r4, r4
 8013b12:	2c02      	cmp	r4, #2
 8013b14:	dc57      	bgt.n	8013bc6 <nd6_tmr+0x3aa>
      addr_state = netif_ip6_addr_state(netif, i);
 8013b16:	4626      	mov	r6, r4
 8013b18:	192b      	adds	r3, r5, r4
 8013b1a:	f893 8094 	ldrb.w	r8, [r3, #148]	; 0x94
      if (!ip6_addr_isinvalid(addr_state) &&
 8013b1e:	f1b8 0f00 	cmp.w	r8, #0
 8013b22:	d01f      	beq.n	8013b64 <nd6_tmr+0x348>
          !netif_ip6_addr_isstatic(netif, i)) {
 8013b24:	f104 0326 	add.w	r3, r4, #38	; 0x26
 8013b28:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
 8013b2c:	b1d7      	cbz	r7, 8013b64 <nd6_tmr+0x348>
        if (life <= ND6_TMR_INTERVAL / 1000) {
 8013b2e:	2f01      	cmp	r7, #1
 8013b30:	d9b3      	bls.n	8013a9a <nd6_tmr+0x27e>
          if (!ip6_addr_life_isinfinite(life)) {
 8013b32:	f1b7 3fff 	cmp.w	r7, #4294967295
 8013b36:	d005      	beq.n	8013b44 <nd6_tmr+0x328>
            LWIP_ASSERT("bad valid lifetime", life != IP6_ADDR_LIFE_STATIC);
 8013b38:	3f01      	subs	r7, #1
 8013b3a:	d0bb      	beq.n	8013ab4 <nd6_tmr+0x298>
            netif_ip6_addr_set_valid_life(netif, i, life);
 8013b3c:	f106 0326 	add.w	r3, r6, #38	; 0x26
 8013b40:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
          life = netif_ip6_addr_pref_life(netif, i);
 8013b44:	f106 0328 	add.w	r3, r6, #40	; 0x28
 8013b48:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013b4c:	685b      	ldr	r3, [r3, #4]
          if (life <= ND6_TMR_INTERVAL / 1000) {
 8013b4e:	2b01      	cmp	r3, #1
 8013b50:	d9b8      	bls.n	8013ac4 <nd6_tmr+0x2a8>
          } else if (!ip6_addr_life_isinfinite(life)) {
 8013b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b56:	d005      	beq.n	8013b64 <nd6_tmr+0x348>
            life -= ND6_TMR_INTERVAL / 1000;
 8013b58:	3b01      	subs	r3, #1
            netif_ip6_addr_set_pref_life(netif, i, life);
 8013b5a:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8013b5e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8013b62:	6053      	str	r3, [r2, #4]
      addr_state = netif_ip6_addr_state(netif, i);
 8013b64:	19ab      	adds	r3, r5, r6
 8013b66:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
      if (ip6_addr_istentative(addr_state)) {
 8013b6a:	f012 0f08 	tst.w	r2, #8
 8013b6e:	d0ce      	beq.n	8013b0e <nd6_tmr+0x2f2>
        if ((addr_state & IP6_ADDR_TENTATIVE_COUNT_MASK) >= LWIP_IPV6_DUP_DETECT_ATTEMPTS) {
 8013b70:	f012 0f07 	tst.w	r2, #7
 8013b74:	d00e      	beq.n	8013b94 <nd6_tmr+0x378>
          if (!netif_ip6_addr_isstatic(netif, i) &&
 8013b76:	f106 0326 	add.w	r3, r6, #38	; 0x26
 8013b7a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d0c0      	beq.n	8013b04 <nd6_tmr+0x2e8>
              netif_ip6_addr_pref_life(netif, i) == 0) {
 8013b82:	3628      	adds	r6, #40	; 0x28
 8013b84:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8013b88:	6873      	ldr	r3, [r6, #4]
 8013b8a:	b10b      	cbz	r3, 8013b90 <nd6_tmr+0x374>
          addr_state = IP6_ADDR_PREFERRED;
 8013b8c:	2230      	movs	r2, #48	; 0x30
 8013b8e:	e7ba      	b.n	8013b06 <nd6_tmr+0x2ea>
            addr_state = IP6_ADDR_DEPRECATED;
 8013b90:	2210      	movs	r2, #16
 8013b92:	e7b8      	b.n	8013b06 <nd6_tmr+0x2ea>
        } else if (netif_is_up(netif) && netif_is_link_up(netif)) {
 8013b94:	f895 30df 	ldrb.w	r3, [r5, #223]	; 0xdf
 8013b98:	f013 0f01 	tst.w	r3, #1
 8013b9c:	d0b7      	beq.n	8013b0e <nd6_tmr+0x2f2>
 8013b9e:	f013 0f04 	tst.w	r3, #4
 8013ba2:	d0b4      	beq.n	8013b0e <nd6_tmr+0x2f2>
          netif_ip6_addr_set_state(netif, i, addr_state + 1);
 8013ba4:	3201      	adds	r2, #1
 8013ba6:	b2d2      	uxtb	r2, r2
 8013ba8:	4621      	mov	r1, r4
 8013baa:	4628      	mov	r0, r5
 8013bac:	f7f3 fbb6 	bl	800731c <netif_ip6_addr_set_state>
          nd6_send_ns(netif, netif_ip6_addr(netif, i),
 8013bb0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8013bb4:	00c9      	lsls	r1, r1, #3
 8013bb6:	3148      	adds	r1, #72	; 0x48
 8013bb8:	4429      	add	r1, r5
 8013bba:	2205      	movs	r2, #5
 8013bbc:	3104      	adds	r1, #4
 8013bbe:	4628      	mov	r0, r5
 8013bc0:	f7fe fe70 	bl	80128a4 <nd6_send_ns>
 8013bc4:	e7a3      	b.n	8013b0e <nd6_tmr+0x2f2>
  NETIF_FOREACH(netif) {
 8013bc6:	682d      	ldr	r5, [r5, #0]
 8013bc8:	b10d      	cbz	r5, 8013bce <nd6_tmr+0x3b2>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 8013bca:	2400      	movs	r4, #0
 8013bcc:	e7a1      	b.n	8013b12 <nd6_tmr+0x2f6>
  if (!nd6_tmr_rs_reduction) {
 8013bce:	4b16      	ldr	r3, [pc, #88]	; (8013c28 <nd6_tmr+0x40c>)
 8013bd0:	781b      	ldrb	r3, [r3, #0]
 8013bd2:	bb23      	cbnz	r3, 8013c1e <nd6_tmr+0x402>
    nd6_tmr_rs_reduction = (ND6_RTR_SOLICITATION_INTERVAL / ND6_TMR_INTERVAL) - 1;
 8013bd4:	4b14      	ldr	r3, [pc, #80]	; (8013c28 <nd6_tmr+0x40c>)
 8013bd6:	2203      	movs	r2, #3
 8013bd8:	701a      	strb	r2, [r3, #0]
    NETIF_FOREACH(netif) {
 8013bda:	4b14      	ldr	r3, [pc, #80]	; (8013c2c <nd6_tmr+0x410>)
 8013bdc:	681c      	ldr	r4, [r3, #0]
 8013bde:	e000      	b.n	8013be2 <nd6_tmr+0x3c6>
 8013be0:	6824      	ldr	r4, [r4, #0]
 8013be2:	b1fc      	cbz	r4, 8013c24 <nd6_tmr+0x408>
      if ((netif->rs_count > 0) && netif_is_up(netif) &&
 8013be4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d0f9      	beq.n	8013be0 <nd6_tmr+0x3c4>
 8013bec:	f894 30df 	ldrb.w	r3, [r4, #223]	; 0xdf
 8013bf0:	f013 0f01 	tst.w	r3, #1
 8013bf4:	d0f4      	beq.n	8013be0 <nd6_tmr+0x3c4>
 8013bf6:	f013 0f04 	tst.w	r3, #4
 8013bfa:	d0f1      	beq.n	8013be0 <nd6_tmr+0x3c4>
          !ip6_addr_isinvalid(netif_ip6_addr_state(netif, 0)) &&
 8013bfc:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
          netif_is_link_up(netif) &&
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d0ed      	beq.n	8013be0 <nd6_tmr+0x3c4>
          !ip6_addr_isinvalid(netif_ip6_addr_state(netif, 0)) &&
 8013c04:	2b40      	cmp	r3, #64	; 0x40
 8013c06:	d0eb      	beq.n	8013be0 <nd6_tmr+0x3c4>
        if (nd6_send_rs(netif) == ERR_OK) {
 8013c08:	4620      	mov	r0, r4
 8013c0a:	f7fe fde3 	bl	80127d4 <nd6_send_rs>
 8013c0e:	2800      	cmp	r0, #0
 8013c10:	d1e6      	bne.n	8013be0 <nd6_tmr+0x3c4>
          netif->rs_count--;
 8013c12:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8013c16:	3b01      	subs	r3, #1
 8013c18:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8013c1c:	e7e0      	b.n	8013be0 <nd6_tmr+0x3c4>
    nd6_tmr_rs_reduction--;
 8013c1e:	3b01      	subs	r3, #1
 8013c20:	4a01      	ldr	r2, [pc, #4]	; (8013c28 <nd6_tmr+0x40c>)
 8013c22:	7013      	strb	r3, [r2, #0]
}
 8013c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c28:	200007e0 	.word	0x200007e0
 8013c2c:	20007b10 	.word	0x20007b10

08013c30 <nd6_clear_destination_cache>:
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 8013c30:	2200      	movs	r2, #0
 8013c32:	2a09      	cmp	r2, #9
 8013c34:	dc11      	bgt.n	8013c5a <nd6_clear_destination_cache+0x2a>
{
 8013c36:	b410      	push	{r4}
    ip6_addr_set_any(&destination_cache[i].destination_addr);
 8013c38:	4c08      	ldr	r4, [pc, #32]	; (8013c5c <nd6_clear_destination_cache+0x2c>)
 8013c3a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8013c3e:	0118      	lsls	r0, r3, #4
 8013c40:	1821      	adds	r1, r4, r0
 8013c42:	2300      	movs	r3, #0
 8013c44:	5023      	str	r3, [r4, r0]
 8013c46:	604b      	str	r3, [r1, #4]
 8013c48:	608b      	str	r3, [r1, #8]
 8013c4a:	60cb      	str	r3, [r1, #12]
 8013c4c:	740b      	strb	r3, [r1, #16]
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 8013c4e:	3201      	adds	r2, #1
 8013c50:	2a09      	cmp	r2, #9
 8013c52:	ddf1      	ble.n	8013c38 <nd6_clear_destination_cache+0x8>
}
 8013c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c58:	4770      	bx	lr
 8013c5a:	4770      	bx	lr
 8013c5c:	20007db4 	.word	0x20007db4

08013c60 <nd6_find_route>:
{
 8013c60:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 8013c62:	2300      	movs	r3, #0
 8013c64:	e001      	b.n	8013c6a <nd6_find_route+0xa>
 8013c66:	3301      	adds	r3, #1
 8013c68:	b25b      	sxtb	r3, r3
 8013c6a:	2b04      	cmp	r3, #4
 8013c6c:	dc2a      	bgt.n	8013cc4 <nd6_find_route+0x64>
    netif = prefix_list[i].netif;
 8013c6e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8013c72:	4923      	ldr	r1, [pc, #140]	; (8013d00 <nd6_find_route+0xa0>)
 8013c74:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8013c78:	6951      	ldr	r1, [r2, #20]
    if ((netif != NULL) && ip6_addr_netcmp(&prefix_list[i].prefix, ip6addr) &&
 8013c7a:	2900      	cmp	r1, #0
 8013c7c:	d0f3      	beq.n	8013c66 <nd6_find_route+0x6>
 8013c7e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8013c82:	4d1f      	ldr	r5, [pc, #124]	; (8013d00 <nd6_find_route+0xa0>)
 8013c84:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8013c88:	6802      	ldr	r2, [r0, #0]
 8013c8a:	4295      	cmp	r5, r2
 8013c8c:	d1eb      	bne.n	8013c66 <nd6_find_route+0x6>
 8013c8e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8013c92:	4d1b      	ldr	r5, [pc, #108]	; (8013d00 <nd6_find_route+0xa0>)
 8013c94:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8013c98:	6855      	ldr	r5, [r2, #4]
 8013c9a:	6842      	ldr	r2, [r0, #4]
 8013c9c:	4295      	cmp	r5, r2
 8013c9e:	d1e2      	bne.n	8013c66 <nd6_find_route+0x6>
 8013ca0:	ebc3 04c3 	rsb	r4, r3, r3, lsl #3
 8013ca4:	4a16      	ldr	r2, [pc, #88]	; (8013d00 <nd6_find_route+0xa0>)
 8013ca6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8013caa:	7c24      	ldrb	r4, [r4, #16]
 8013cac:	7c02      	ldrb	r2, [r0, #16]
 8013cae:	4294      	cmp	r4, r2
 8013cb0:	d1d9      	bne.n	8013c66 <nd6_find_route+0x6>
        netif_is_up(netif) && netif_is_link_up(netif)) {
 8013cb2:	f891 20df 	ldrb.w	r2, [r1, #223]	; 0xdf
    if ((netif != NULL) && ip6_addr_netcmp(&prefix_list[i].prefix, ip6addr) &&
 8013cb6:	f012 0f01 	tst.w	r2, #1
 8013cba:	d0d4      	beq.n	8013c66 <nd6_find_route+0x6>
        netif_is_up(netif) && netif_is_link_up(netif)) {
 8013cbc:	f012 0f04 	tst.w	r2, #4
 8013cc0:	d0d1      	beq.n	8013c66 <nd6_find_route+0x6>
 8013cc2:	e010      	b.n	8013ce6 <nd6_find_route+0x86>
  i = nd6_select_router(ip6addr, NULL);
 8013cc4:	2100      	movs	r1, #0
 8013cc6:	f7fe f927 	bl	8011f18 <nd6_select_router>
  if (i >= 0) {
 8013cca:	1e04      	subs	r4, r0, #0
 8013ccc:	db15      	blt.n	8013cfa <nd6_find_route+0x9a>
    LWIP_ASSERT("selected router must have a neighbor entry",
 8013cce:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8013cd2:	4a0c      	ldr	r2, [pc, #48]	; (8013d04 <nd6_find_route+0xa4>)
 8013cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013cd8:	b13b      	cbz	r3, 8013cea <nd6_find_route+0x8a>
    return default_router_list[i].neighbor_entry->netif;
 8013cda:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013cde:	4b09      	ldr	r3, [pc, #36]	; (8013d04 <nd6_find_route+0xa4>)
 8013ce0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013ce4:	6959      	ldr	r1, [r3, #20]
}
 8013ce6:	4608      	mov	r0, r1
 8013ce8:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("selected router must have a neighbor entry",
 8013cea:	4b07      	ldr	r3, [pc, #28]	; (8013d08 <nd6_find_route+0xa8>)
 8013cec:	f240 62e2 	movw	r2, #1762	; 0x6e2
 8013cf0:	4906      	ldr	r1, [pc, #24]	; (8013d0c <nd6_find_route+0xac>)
 8013cf2:	4807      	ldr	r0, [pc, #28]	; (8013d10 <nd6_find_route+0xb0>)
 8013cf4:	f000 fa9e 	bl	8014234 <iprintf>
 8013cf8:	e7ef      	b.n	8013cda <nd6_find_route+0x7a>
  return NULL;
 8013cfa:	2100      	movs	r1, #0
 8013cfc:	e7f3      	b.n	8013ce6 <nd6_find_route+0x86>
 8013cfe:	bf00      	nop
 8013d00:	20007d28 	.word	0x20007d28
 8013d04:	20007f94 	.word	0x20007f94
 8013d08:	08017d58 	.word	0x08017d58
 8013d0c:	08017ddc 	.word	0x08017ddc
 8013d10:	08015418 	.word	0x08015418

08013d14 <nd6_get_next_hop_addr_or_queue>:
 * - ERR_OK on success, ERR_RTE if no route was found for the packet,
 * or ERR_MEM if low memory conditions prohibit sending the packet at all.
 */
err_t
nd6_get_next_hop_addr_or_queue(struct netif *netif, struct pbuf *q, const ip6_addr_t *ip6addr, const u8_t **hwaddrp)
{
 8013d14:	b538      	push	{r3, r4, r5, lr}
 8013d16:	460d      	mov	r5, r1
 8013d18:	461c      	mov	r4, r3
  s8_t i;

  /* Get next hop record. */
  i = nd6_get_next_hop_entry(ip6addr, netif);
 8013d1a:	4601      	mov	r1, r0
 8013d1c:	4610      	mov	r0, r2
 8013d1e:	f7fe fecf 	bl	8012ac0 <nd6_get_next_hop_entry>
  if (i < 0) {
 8013d22:	2800      	cmp	r0, #0
 8013d24:	db2b      	blt.n	8013d7e <nd6_get_next_hop_addr_or_queue+0x6a>
    /* failed to get a next hop neighbor record. */
    return i;
  }

  /* Now that we have a destination record, send or queue the packet. */
  if (neighbor_cache[i].state == ND6_STALE) {
 8013d26:	4601      	mov	r1, r0
 8013d28:	4a15      	ldr	r2, [pc, #84]	; (8013d80 <nd6_get_next_hop_addr_or_queue+0x6c>)
 8013d2a:	232c      	movs	r3, #44	; 0x2c
 8013d2c:	fb03 2300 	mla	r3, r3, r0, r2
 8013d30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013d34:	2b03      	cmp	r3, #3
 8013d36:	d011      	beq.n	8013d5c <nd6_get_next_hop_addr_or_queue+0x48>
    /* Switch to delay state. */
    neighbor_cache[i].state = ND6_DELAY;
    neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
  }
  /* @todo should we send or queue if PROBE? send for now, to let unicast NS pass. */
  if ((neighbor_cache[i].state == ND6_REACHABLE) ||
 8013d38:	4a11      	ldr	r2, [pc, #68]	; (8013d80 <nd6_get_next_hop_addr_or_queue+0x6c>)
 8013d3a:	232c      	movs	r3, #44	; 0x2c
 8013d3c:	fb03 2301 	mla	r3, r3, r1, r2
 8013d40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013d44:	2b02      	cmp	r3, #2
 8013d46:	d012      	beq.n	8013d6e <nd6_get_next_hop_addr_or_queue+0x5a>
 8013d48:	2b04      	cmp	r3, #4
 8013d4a:	d010      	beq.n	8013d6e <nd6_get_next_hop_addr_or_queue+0x5a>
      (neighbor_cache[i].state == ND6_DELAY) ||
 8013d4c:	2b05      	cmp	r3, #5
 8013d4e:	d00e      	beq.n	8013d6e <nd6_get_next_hop_addr_or_queue+0x5a>
    *hwaddrp = neighbor_cache[i].lladdr;
    return ERR_OK;
  }

  /* We should queue packet on this interface. */
  *hwaddrp = NULL;
 8013d50:	2300      	movs	r3, #0
 8013d52:	6023      	str	r3, [r4, #0]
  return nd6_queue_packet(i, q);
 8013d54:	4629      	mov	r1, r5
 8013d56:	f7ff f849 	bl	8012dec <nd6_queue_packet>
 8013d5a:	e010      	b.n	8013d7e <nd6_get_next_hop_addr_or_queue+0x6a>
    neighbor_cache[i].state = ND6_DELAY;
 8013d5c:	232c      	movs	r3, #44	; 0x2c
 8013d5e:	fb03 2300 	mla	r3, r3, r0, r2
 8013d62:	2204      	movs	r2, #4
 8013d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 8013d68:	2205      	movs	r2, #5
 8013d6a:	629a      	str	r2, [r3, #40]	; 0x28
 8013d6c:	e7e4      	b.n	8013d38 <nd6_get_next_hop_addr_or_queue+0x24>
    *hwaddrp = neighbor_cache[i].lladdr;
 8013d6e:	222c      	movs	r2, #44	; 0x2c
 8013d70:	fb02 f201 	mul.w	r2, r2, r1
 8013d74:	3218      	adds	r2, #24
 8013d76:	4b02      	ldr	r3, [pc, #8]	; (8013d80 <nd6_get_next_hop_addr_or_queue+0x6c>)
 8013d78:	441a      	add	r2, r3
 8013d7a:	6022      	str	r2, [r4, #0]
    return ERR_OK;
 8013d7c:	2000      	movs	r0, #0
}
 8013d7e:	bd38      	pop	{r3, r4, r5, pc}
 8013d80:	20007b70 	.word	0x20007b70

08013d84 <nd6_get_destination_mtu>:
 * @param netif the netif on which the packet will be sent
 * @return the Path MTU, if known, or the netif default MTU
 */
u16_t
nd6_get_destination_mtu(const ip6_addr_t *ip6addr, struct netif *netif)
{
 8013d84:	b510      	push	{r4, lr}
 8013d86:	460c      	mov	r4, r1
  s16_t i;

  i = nd6_find_destination_cache_entry(ip6addr);
 8013d88:	f7fd fff0 	bl	8011d6c <nd6_find_destination_cache_entry>
  if (i >= 0) {
 8013d8c:	2800      	cmp	r0, #0
 8013d8e:	db06      	blt.n	8013d9e <nd6_get_destination_mtu+0x1a>
    if (destination_cache[i].pmtu > 0) {
 8013d90:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013d94:	4b05      	ldr	r3, [pc, #20]	; (8013dac <nd6_get_destination_mtu+0x28>)
 8013d96:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8013d9a:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 8013d9c:	b910      	cbnz	r0, 8013da4 <nd6_get_destination_mtu+0x20>
      return destination_cache[i].pmtu;
    }
  }

  if (netif != NULL) {
 8013d9e:	b114      	cbz	r4, 8013da6 <nd6_get_destination_mtu+0x22>
    return netif_mtu6(netif);
 8013da0:	f8b4 00d6 	ldrh.w	r0, [r4, #214]	; 0xd6
  }

  return 1280; /* Minimum MTU */
}
 8013da4:	bd10      	pop	{r4, pc}
  return 1280; /* Minimum MTU */
 8013da6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8013daa:	e7fb      	b.n	8013da4 <nd6_get_destination_mtu+0x20>
 8013dac:	20007db4 	.word	0x20007db4

08013db0 <nd6_reachability_hint>:
 * @param ip6addr the destination address which is know to be reachable
 *                by an upper layer protocol (TCP)
 */
void
nd6_reachability_hint(const ip6_addr_t *ip6addr)
{
 8013db0:	b538      	push	{r3, r4, r5, lr}
  s8_t i;
  s16_t dst_idx;

  /* Find destination in cache. */
  if (ip6_addr_cmp(ip6addr, &(destination_cache[nd6_cached_destination_index].destination_addr))) {
 8013db2:	6801      	ldr	r1, [r0, #0]
 8013db4:	4b48      	ldr	r3, [pc, #288]	; (8013ed8 <nd6_reachability_hint+0x128>)
 8013db6:	781b      	ldrb	r3, [r3, #0]
 8013db8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013dbc:	0112      	lsls	r2, r2, #4
 8013dbe:	4c47      	ldr	r4, [pc, #284]	; (8013edc <nd6_reachability_hint+0x12c>)
 8013dc0:	58a2      	ldr	r2, [r4, r2]
 8013dc2:	4291      	cmp	r1, r2
 8013dc4:	d031      	beq.n	8013e2a <nd6_reachability_hint+0x7a>
    dst_idx = nd6_cached_destination_index;
    ND6_STATS_INC(nd6.cachehit);
  } else {
    dst_idx = nd6_find_destination_cache_entry(ip6addr);
 8013dc6:	f7fd ffd1 	bl	8011d6c <nd6_find_destination_cache_entry>
  }
  if (dst_idx < 0) {
 8013dca:	2800      	cmp	r0, #0
 8013dcc:	db2c      	blt.n	8013e28 <nd6_reachability_hint+0x78>
    return;
  }

  /* Find next hop neighbor in cache. */
  if (ip6_addr_cmp(&(destination_cache[dst_idx].next_hop_addr), &(neighbor_cache[nd6_cached_neighbor_index].next_hop_address))) {
 8013dce:	4603      	mov	r3, r0
 8013dd0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8013dd4:	4941      	ldr	r1, [pc, #260]	; (8013edc <nd6_reachability_hint+0x12c>)
 8013dd6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8013dda:	6954      	ldr	r4, [r2, #20]
 8013ddc:	4a40      	ldr	r2, [pc, #256]	; (8013ee0 <nd6_reachability_hint+0x130>)
 8013dde:	7812      	ldrb	r2, [r2, #0]
 8013de0:	212c      	movs	r1, #44	; 0x2c
 8013de2:	fb01 f102 	mul.w	r1, r1, r2
 8013de6:	4d3f      	ldr	r5, [pc, #252]	; (8013ee4 <nd6_reachability_hint+0x134>)
 8013de8:	5869      	ldr	r1, [r5, r1]
 8013dea:	428c      	cmp	r4, r1
 8013dec:	d040      	beq.n	8013e70 <nd6_reachability_hint+0xc0>
    i = nd6_cached_neighbor_index;
    ND6_STATS_INC(nd6.cachehit);
  } else {
    i = nd6_find_neighbor_cache_entry(&(destination_cache[dst_idx].next_hop_addr));
 8013dee:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8013df2:	0100      	lsls	r0, r0, #4
 8013df4:	3010      	adds	r0, #16
 8013df6:	4b39      	ldr	r3, [pc, #228]	; (8013edc <nd6_reachability_hint+0x12c>)
 8013df8:	4418      	add	r0, r3
 8013dfa:	3004      	adds	r0, #4
 8013dfc:	f7fd ff82 	bl	8011d04 <nd6_find_neighbor_cache_entry>
  }
  if (i < 0) {
 8013e00:	2800      	cmp	r0, #0
 8013e02:	db11      	blt.n	8013e28 <nd6_reachability_hint+0x78>
    return;
  }

  /* For safety: don't set as reachable if we don't have a LL address yet. Misuse protection. */
  if (neighbor_cache[i].state == ND6_INCOMPLETE || neighbor_cache[i].state == ND6_NO_ENTRY) {
 8013e04:	4a37      	ldr	r2, [pc, #220]	; (8013ee4 <nd6_reachability_hint+0x134>)
 8013e06:	232c      	movs	r3, #44	; 0x2c
 8013e08:	fb03 2300 	mla	r3, r3, r0, r2
 8013e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013e10:	2b01      	cmp	r3, #1
 8013e12:	d909      	bls.n	8013e28 <nd6_reachability_hint+0x78>
    return;
  }

  /* Set reachability state. */
  neighbor_cache[i].state = ND6_REACHABLE;
 8013e14:	4613      	mov	r3, r2
 8013e16:	222c      	movs	r2, #44	; 0x2c
 8013e18:	fb02 3000 	mla	r0, r2, r0, r3
 8013e1c:	2302      	movs	r3, #2
 8013e1e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  neighbor_cache[i].counter.reachable_time = reachable_time;
 8013e22:	4b31      	ldr	r3, [pc, #196]	; (8013ee8 <nd6_reachability_hint+0x138>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	6283      	str	r3, [r0, #40]	; 0x28
}
 8013e28:	bd38      	pop	{r3, r4, r5, pc}
  if (ip6_addr_cmp(ip6addr, &(destination_cache[nd6_cached_destination_index].destination_addr))) {
 8013e2a:	6844      	ldr	r4, [r0, #4]
 8013e2c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013e30:	492a      	ldr	r1, [pc, #168]	; (8013edc <nd6_reachability_hint+0x12c>)
 8013e32:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8013e36:	6852      	ldr	r2, [r2, #4]
 8013e38:	4294      	cmp	r4, r2
 8013e3a:	d1c4      	bne.n	8013dc6 <nd6_reachability_hint+0x16>
 8013e3c:	6884      	ldr	r4, [r0, #8]
 8013e3e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013e42:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8013e46:	6892      	ldr	r2, [r2, #8]
 8013e48:	4294      	cmp	r4, r2
 8013e4a:	d1bc      	bne.n	8013dc6 <nd6_reachability_hint+0x16>
 8013e4c:	68c4      	ldr	r4, [r0, #12]
 8013e4e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013e52:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8013e56:	68d2      	ldr	r2, [r2, #12]
 8013e58:	4294      	cmp	r4, r2
 8013e5a:	d1b4      	bne.n	8013dc6 <nd6_reachability_hint+0x16>
 8013e5c:	7c04      	ldrb	r4, [r0, #16]
 8013e5e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013e62:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8013e66:	7c12      	ldrb	r2, [r2, #16]
 8013e68:	4294      	cmp	r4, r2
 8013e6a:	d1ac      	bne.n	8013dc6 <nd6_reachability_hint+0x16>
    dst_idx = nd6_cached_destination_index;
 8013e6c:	b218      	sxth	r0, r3
 8013e6e:	e7ac      	b.n	8013dca <nd6_reachability_hint+0x1a>
  if (ip6_addr_cmp(&(destination_cache[dst_idx].next_hop_addr), &(neighbor_cache[nd6_cached_neighbor_index].next_hop_address))) {
 8013e70:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8013e74:	4919      	ldr	r1, [pc, #100]	; (8013edc <nd6_reachability_hint+0x12c>)
 8013e76:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8013e7a:	6980      	ldr	r0, [r0, #24]
 8013e7c:	212c      	movs	r1, #44	; 0x2c
 8013e7e:	fb01 5102 	mla	r1, r1, r2, r5
 8013e82:	6849      	ldr	r1, [r1, #4]
 8013e84:	4288      	cmp	r0, r1
 8013e86:	d1b2      	bne.n	8013dee <nd6_reachability_hint+0x3e>
 8013e88:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8013e8c:	4813      	ldr	r0, [pc, #76]	; (8013edc <nd6_reachability_hint+0x12c>)
 8013e8e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8013e92:	69c8      	ldr	r0, [r1, #28]
 8013e94:	212c      	movs	r1, #44	; 0x2c
 8013e96:	fb01 5102 	mla	r1, r1, r2, r5
 8013e9a:	6889      	ldr	r1, [r1, #8]
 8013e9c:	4288      	cmp	r0, r1
 8013e9e:	d1a6      	bne.n	8013dee <nd6_reachability_hint+0x3e>
 8013ea0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8013ea4:	480d      	ldr	r0, [pc, #52]	; (8013edc <nd6_reachability_hint+0x12c>)
 8013ea6:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8013eaa:	6a08      	ldr	r0, [r1, #32]
 8013eac:	212c      	movs	r1, #44	; 0x2c
 8013eae:	fb01 5102 	mla	r1, r1, r2, r5
 8013eb2:	68c9      	ldr	r1, [r1, #12]
 8013eb4:	4288      	cmp	r0, r1
 8013eb6:	d19a      	bne.n	8013dee <nd6_reachability_hint+0x3e>
 8013eb8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8013ebc:	4807      	ldr	r0, [pc, #28]	; (8013edc <nd6_reachability_hint+0x12c>)
 8013ebe:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8013ec2:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
 8013ec6:	212c      	movs	r1, #44	; 0x2c
 8013ec8:	fb01 5102 	mla	r1, r1, r2, r5
 8013ecc:	7c09      	ldrb	r1, [r1, #16]
 8013ece:	4288      	cmp	r0, r1
 8013ed0:	d18d      	bne.n	8013dee <nd6_reachability_hint+0x3e>
    i = nd6_cached_neighbor_index;
 8013ed2:	b250      	sxtb	r0, r2
 8013ed4:	e794      	b.n	8013e00 <nd6_reachability_hint+0x50>
 8013ed6:	bf00      	nop
 8013ed8:	200007bc 	.word	0x200007bc
 8013edc:	20007db4 	.word	0x20007db4
 8013ee0:	200007bd 	.word	0x200007bd
 8013ee4:	20007b70 	.word	0x20007b70
 8013ee8:	20000014 	.word	0x20000014

08013eec <nd6_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
nd6_cleanup_netif(struct netif *netif)
{
 8013eec:	b570      	push	{r4, r5, r6, lr}
 8013eee:	4605      	mov	r5, r0
  u8_t i;
  s8_t router_index;
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	e007      	b.n	8013f04 <nd6_cleanup_netif+0x18>
    if (prefix_list[i].netif == netif) {
      prefix_list[i].netif = NULL;
 8013ef4:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8013ef8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8013efc:	2100      	movs	r1, #0
 8013efe:	6151      	str	r1, [r2, #20]
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
 8013f00:	3301      	adds	r3, #1
 8013f02:	b2db      	uxtb	r3, r3
 8013f04:	2b04      	cmp	r3, #4
 8013f06:	d808      	bhi.n	8013f1a <nd6_cleanup_netif+0x2e>
    if (prefix_list[i].netif == netif) {
 8013f08:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8013f0c:	491f      	ldr	r1, [pc, #124]	; (8013f8c <nd6_cleanup_netif+0xa0>)
 8013f0e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8013f12:	6952      	ldr	r2, [r2, #20]
 8013f14:	42aa      	cmp	r2, r5
 8013f16:	d1f3      	bne.n	8013f00 <nd6_cleanup_netif+0x14>
 8013f18:	e7ec      	b.n	8013ef4 <nd6_cleanup_netif+0x8>
    }
  }
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8013f1a:	2400      	movs	r4, #0
 8013f1c:	e026      	b.n	8013f6c <nd6_cleanup_netif+0x80>
    if (neighbor_cache[i].netif == netif) {
      for (router_index = 0; router_index < LWIP_ND6_NUM_ROUTERS; router_index++) {
        if (default_router_list[router_index].neighbor_entry == &neighbor_cache[i]) {
          default_router_list[router_index].neighbor_entry = NULL;
 8013f1e:	4a1c      	ldr	r2, [pc, #112]	; (8013f90 <nd6_cleanup_netif+0xa4>)
 8013f20:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8013f24:	0080      	lsls	r0, r0, #2
 8013f26:	2600      	movs	r6, #0
 8013f28:	5016      	str	r6, [r2, r0]
          default_router_list[router_index].flags = 0;
 8013f2a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8013f2e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8013f32:	7216      	strb	r6, [r2, #8]
      for (router_index = 0; router_index < LWIP_ND6_NUM_ROUTERS; router_index++) {
 8013f34:	3301      	adds	r3, #1
 8013f36:	b25b      	sxtb	r3, r3
 8013f38:	2b02      	cmp	r3, #2
 8013f3a:	dc0b      	bgt.n	8013f54 <nd6_cleanup_netif+0x68>
        if (default_router_list[router_index].neighbor_entry == &neighbor_cache[i]) {
 8013f3c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013f40:	4813      	ldr	r0, [pc, #76]	; (8013f90 <nd6_cleanup_netif+0xa4>)
 8013f42:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8013f46:	222c      	movs	r2, #44	; 0x2c
 8013f48:	4e12      	ldr	r6, [pc, #72]	; (8013f94 <nd6_cleanup_netif+0xa8>)
 8013f4a:	fb02 6201 	mla	r2, r2, r1, r6
 8013f4e:	4290      	cmp	r0, r2
 8013f50:	d1f0      	bne.n	8013f34 <nd6_cleanup_netif+0x48>
 8013f52:	e7e4      	b.n	8013f1e <nd6_cleanup_netif+0x32>
        }
      }
      neighbor_cache[i].isrouter = 0;
 8013f54:	4b0f      	ldr	r3, [pc, #60]	; (8013f94 <nd6_cleanup_netif+0xa8>)
 8013f56:	222c      	movs	r2, #44	; 0x2c
 8013f58:	fb02 3301 	mla	r3, r2, r1, r3
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      nd6_free_neighbor_cache_entry(i);
 8013f62:	b260      	sxtb	r0, r4
 8013f64:	f7fe faa2 	bl	80124ac <nd6_free_neighbor_cache_entry>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8013f68:	3401      	adds	r4, #1
 8013f6a:	b2e4      	uxtb	r4, r4
 8013f6c:	2c09      	cmp	r4, #9
 8013f6e:	d809      	bhi.n	8013f84 <nd6_cleanup_netif+0x98>
    if (neighbor_cache[i].netif == netif) {
 8013f70:	4621      	mov	r1, r4
 8013f72:	4a08      	ldr	r2, [pc, #32]	; (8013f94 <nd6_cleanup_netif+0xa8>)
 8013f74:	232c      	movs	r3, #44	; 0x2c
 8013f76:	fb03 2304 	mla	r3, r3, r4, r2
 8013f7a:	695b      	ldr	r3, [r3, #20]
 8013f7c:	42ab      	cmp	r3, r5
 8013f7e:	d1f3      	bne.n	8013f68 <nd6_cleanup_netif+0x7c>
      for (router_index = 0; router_index < LWIP_ND6_NUM_ROUTERS; router_index++) {
 8013f80:	2300      	movs	r3, #0
 8013f82:	e7d9      	b.n	8013f38 <nd6_cleanup_netif+0x4c>
    }
  }
  /* Clear the destination cache, since many entries may now have become
   * invalid for one of several reasons. As destination cache entries have no
   * netif association, use a sledgehammer approach (this can be improved). */
  nd6_clear_destination_cache();
 8013f84:	f7ff fe54 	bl	8013c30 <nd6_clear_destination_cache>
}
 8013f88:	bd70      	pop	{r4, r5, r6, pc}
 8013f8a:	bf00      	nop
 8013f8c:	20007d28 	.word	0x20007d28
 8013f90:	20007f94 	.word	0x20007f94
 8013f94:	20007b70 	.word	0x20007b70

08013f98 <nd6_adjust_mld_membership>:
 * @param addr_idx The index of the address.
 * @param new_state The new (IP6_ADDR_) state for the address.
 */
void
nd6_adjust_mld_membership(struct netif *netif, s8_t addr_idx, u8_t new_state)
{
 8013f98:	b510      	push	{r4, lr}
  u8_t old_state, old_member, new_member;

  old_state = netif_ip6_addr_state(netif, addr_idx);
 8013f9a:	1843      	adds	r3, r0, r1
 8013f9c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94

  /* Determine whether we were, and should be, a member of the solicited-node
   * multicast group for this address. For tentative addresses, the group is
   * not joined until the address enters the TENTATIVE_1 (or VALID) state. */
  old_member = (old_state != IP6_ADDR_INVALID && old_state != IP6_ADDR_DUPLICATED && old_state != IP6_ADDR_TENTATIVE);
 8013fa0:	b13b      	cbz	r3, 8013fb2 <nd6_adjust_mld_membership+0x1a>
 8013fa2:	2b40      	cmp	r3, #64	; 0x40
 8013fa4:	d00e      	beq.n	8013fc4 <nd6_adjust_mld_membership+0x2c>
 8013fa6:	2b08      	cmp	r3, #8
 8013fa8:	d001      	beq.n	8013fae <nd6_adjust_mld_membership+0x16>
 8013faa:	2401      	movs	r4, #1
 8013fac:	e002      	b.n	8013fb4 <nd6_adjust_mld_membership+0x1c>
 8013fae:	2400      	movs	r4, #0
 8013fb0:	e000      	b.n	8013fb4 <nd6_adjust_mld_membership+0x1c>
 8013fb2:	2400      	movs	r4, #0
 8013fb4:	b2e4      	uxtb	r4, r4
  new_member = (new_state != IP6_ADDR_INVALID && new_state != IP6_ADDR_DUPLICATED && new_state != IP6_ADDR_TENTATIVE);
 8013fb6:	b14a      	cbz	r2, 8013fcc <nd6_adjust_mld_membership+0x34>
 8013fb8:	2a40      	cmp	r2, #64	; 0x40
 8013fba:	d025      	beq.n	8014008 <nd6_adjust_mld_membership+0x70>
 8013fbc:	2a08      	cmp	r2, #8
 8013fbe:	d003      	beq.n	8013fc8 <nd6_adjust_mld_membership+0x30>
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	e004      	b.n	8013fce <nd6_adjust_mld_membership+0x36>
  old_member = (old_state != IP6_ADDR_INVALID && old_state != IP6_ADDR_DUPLICATED && old_state != IP6_ADDR_TENTATIVE);
 8013fc4:	2400      	movs	r4, #0
 8013fc6:	e7f5      	b.n	8013fb4 <nd6_adjust_mld_membership+0x1c>
  new_member = (new_state != IP6_ADDR_INVALID && new_state != IP6_ADDR_DUPLICATED && new_state != IP6_ADDR_TENTATIVE);
 8013fc8:	2300      	movs	r3, #0
 8013fca:	e000      	b.n	8013fce <nd6_adjust_mld_membership+0x36>
 8013fcc:	2300      	movs	r3, #0
 8013fce:	b2db      	uxtb	r3, r3

  if (old_member != new_member) {
 8013fd0:	429c      	cmp	r4, r3
 8013fd2:	d018      	beq.n	8014006 <nd6_adjust_mld_membership+0x6e>
    ip6_addr_set_solicitednode(&multicast_address, netif_ip6_addr(netif, addr_idx)->addr[3]);
 8013fd4:	4a0f      	ldr	r2, [pc, #60]	; (8014014 <nd6_adjust_mld_membership+0x7c>)
 8013fd6:	f240 24ff 	movw	r4, #767	; 0x2ff
 8013fda:	6014      	str	r4, [r2, #0]
 8013fdc:	2400      	movs	r4, #0
 8013fde:	6054      	str	r4, [r2, #4]
 8013fe0:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
 8013fe4:	6094      	str	r4, [r2, #8]
 8013fe6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013fea:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8013fee:	6d89      	ldr	r1, [r1, #88]	; 0x58
 8013ff0:	f041 01ff 	orr.w	r1, r1, #255	; 0xff
 8013ff4:	60d1      	str	r1, [r2, #12]
    ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 8013ff6:	f890 10e2 	ldrb.w	r1, [r0, #226]	; 0xe2
 8013ffa:	3101      	adds	r1, #1
 8013ffc:	7411      	strb	r1, [r2, #16]

    if (new_member) {
 8013ffe:	b12b      	cbz	r3, 801400c <nd6_adjust_mld_membership+0x74>
      mld6_joingroup_netif(netif, &multicast_address);
 8014000:	4611      	mov	r1, r2
 8014002:	f7fd fd7f 	bl	8011b04 <mld6_joingroup_netif>
    } else {
      mld6_leavegroup_netif(netif, &multicast_address);
    }
  }
}
 8014006:	bd10      	pop	{r4, pc}
  new_member = (new_state != IP6_ADDR_INVALID && new_state != IP6_ADDR_DUPLICATED && new_state != IP6_ADDR_TENTATIVE);
 8014008:	2300      	movs	r3, #0
 801400a:	e7e0      	b.n	8013fce <nd6_adjust_mld_membership+0x36>
      mld6_leavegroup_netif(netif, &multicast_address);
 801400c:	4901      	ldr	r1, [pc, #4]	; (8014014 <nd6_adjust_mld_membership+0x7c>)
 801400e:	f7fd fde7 	bl	8011be0 <mld6_leavegroup_netif>
}
 8014012:	e7f8      	b.n	8014006 <nd6_adjust_mld_membership+0x6e>
 8014014:	200007a8 	.word	0x200007a8

08014018 <nd6_restart_netif>:
void
nd6_restart_netif(struct netif *netif)
{
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  /* Send Router Solicitation messages (see RFC 4861, ch. 6.3.7). */
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8014018:	2303      	movs	r3, #3
 801401a:	f880 30e4 	strb.w	r3, [r0, #228]	; 0xe4
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
}
 801401e:	4770      	bx	lr

08014020 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014022:	4604      	mov	r4, r0
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014024:	8947      	ldrh	r7, [r0, #10]
 8014026:	2f0e      	cmp	r7, #14
 8014028:	d922      	bls.n	8014070 <ethernet_input+0x50>
 801402a:	460e      	mov	r6, r1
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801402c:	7bc3      	ldrb	r3, [r0, #15]
 801402e:	b91b      	cbnz	r3, 8014038 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 8014030:	f891 30e2 	ldrb.w	r3, [r1, #226]	; 0xe2
 8014034:	3301      	adds	r3, #1
 8014036:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014038:	6860      	ldr	r0, [r4, #4]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801403a:	8985      	ldrh	r5, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801403c:	7803      	ldrb	r3, [r0, #0]
 801403e:	f013 0f01 	tst.w	r3, #1
 8014042:	d00c      	beq.n	801405e <ethernet_input+0x3e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014044:	2b01      	cmp	r3, #1
 8014046:	d018      	beq.n	801407a <ethernet_input+0x5a>
        p->flags |= PBUF_FLAG_LLMCAST;
      }
#endif /* LWIP_IPV4 */
    }
#if LWIP_IPV6
    else if ((ethhdr->dest.addr[0] == LL_IP6_MULTICAST_ADDR_0) &&
 8014048:	2b33      	cmp	r3, #51	; 0x33
 801404a:	d021      	beq.n	8014090 <ethernet_input+0x70>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801404c:	2206      	movs	r2, #6
 801404e:	492b      	ldr	r1, [pc, #172]	; (80140fc <ethernet_input+0xdc>)
 8014050:	f000 f8b2 	bl	80141b8 <memcmp>
 8014054:	b918      	cbnz	r0, 801405e <ethernet_input+0x3e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014056:	7b63      	ldrb	r3, [r4, #13]
 8014058:	f043 0308 	orr.w	r3, r3, #8
 801405c:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 801405e:	f5b5 6fc1 	cmp.w	r5, #1544	; 0x608
 8014062:	d02d      	beq.n	80140c0 <ethernet_input+0xa0>
 8014064:	f64d 5386 	movw	r3, #56710	; 0xdd86
 8014068:	429d      	cmp	r5, r3
 801406a:	d039      	beq.n	80140e0 <ethernet_input+0xc0>
 801406c:	2d08      	cmp	r5, #8
 801406e:	d017      	beq.n	80140a0 <ethernet_input+0x80>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8014070:	4620      	mov	r0, r4
 8014072:	f7f3 fb8f 	bl	8007794 <pbuf_free>
  return ERR_OK;
}
 8014076:	2000      	movs	r0, #0
 8014078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801407a:	7843      	ldrb	r3, [r0, #1]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d1ee      	bne.n	801405e <ethernet_input+0x3e>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014080:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014082:	2b5e      	cmp	r3, #94	; 0x5e
 8014084:	d1eb      	bne.n	801405e <ethernet_input+0x3e>
        p->flags |= PBUF_FLAG_LLMCAST;
 8014086:	7b63      	ldrb	r3, [r4, #13]
 8014088:	f043 0310 	orr.w	r3, r3, #16
 801408c:	7363      	strb	r3, [r4, #13]
 801408e:	e7e6      	b.n	801405e <ethernet_input+0x3e>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
 8014090:	7843      	ldrb	r3, [r0, #1]
    else if ((ethhdr->dest.addr[0] == LL_IP6_MULTICAST_ADDR_0) &&
 8014092:	2b33      	cmp	r3, #51	; 0x33
 8014094:	d1da      	bne.n	801404c <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLMCAST;
 8014096:	7b63      	ldrb	r3, [r4, #13]
 8014098:	f043 0310 	orr.w	r3, r3, #16
 801409c:	7363      	strb	r3, [r4, #13]
 801409e:	e7de      	b.n	801405e <ethernet_input+0x3e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80140a0:	f896 30df 	ldrb.w	r3, [r6, #223]	; 0xdf
 80140a4:	f013 0f08 	tst.w	r3, #8
 80140a8:	d0e2      	beq.n	8014070 <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80140aa:	210e      	movs	r1, #14
 80140ac:	4620      	mov	r0, r4
 80140ae:	f7f3 fb2b 	bl	8007708 <pbuf_remove_header>
 80140b2:	2800      	cmp	r0, #0
 80140b4:	d1dc      	bne.n	8014070 <ethernet_input+0x50>
        ip4_input(p, netif);
 80140b6:	4631      	mov	r1, r6
 80140b8:	4620      	mov	r0, r4
 80140ba:	f7fb f9d7 	bl	800f46c <ip4_input>
      break;
 80140be:	e7da      	b.n	8014076 <ethernet_input+0x56>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80140c0:	f896 30df 	ldrb.w	r3, [r6, #223]	; 0xdf
 80140c4:	f013 0f08 	tst.w	r3, #8
 80140c8:	d0d2      	beq.n	8014070 <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80140ca:	210e      	movs	r1, #14
 80140cc:	4620      	mov	r0, r4
 80140ce:	f7f3 fb1b 	bl	8007708 <pbuf_remove_header>
 80140d2:	2800      	cmp	r0, #0
 80140d4:	d1cc      	bne.n	8014070 <ethernet_input+0x50>
        etharp_input(p, netif);
 80140d6:	4631      	mov	r1, r6
 80140d8:	4620      	mov	r0, r4
 80140da:	f7fa fbe7 	bl	800e8ac <etharp_input>
      break;
 80140de:	e7ca      	b.n	8014076 <ethernet_input+0x56>
      if ((p->len < next_hdr_offset) || pbuf_remove_header(p, next_hdr_offset)) {
 80140e0:	2f0d      	cmp	r7, #13
 80140e2:	d9c5      	bls.n	8014070 <ethernet_input+0x50>
 80140e4:	210e      	movs	r1, #14
 80140e6:	4620      	mov	r0, r4
 80140e8:	f7f3 fb0e 	bl	8007708 <pbuf_remove_header>
 80140ec:	2800      	cmp	r0, #0
 80140ee:	d1bf      	bne.n	8014070 <ethernet_input+0x50>
        ip6_input(p, netif);
 80140f0:	4631      	mov	r1, r6
 80140f2:	4620      	mov	r0, r4
 80140f4:	f7fc fbda 	bl	80108ac <ip6_input>
      break;
 80140f8:	e7bd      	b.n	8014076 <ethernet_input+0x56>
 80140fa:	bf00      	nop
 80140fc:	08017e74 	.word	0x08017e74

08014100 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014104:	4605      	mov	r5, r0
 8014106:	460c      	mov	r4, r1
 8014108:	4616      	mov	r6, r2
 801410a:	461f      	mov	r7, r3
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801410c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8014110:	f7f2 f82e 	bl	8006170 <lwip_htons>
 8014114:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014116:	210e      	movs	r1, #14
 8014118:	4620      	mov	r0, r4
 801411a:	f7f3 faea 	bl	80076f2 <pbuf_add_header>
 801411e:	b9f0      	cbnz	r0, 801415e <ethernet_output+0x5e>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014120:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 8014122:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014126:	683b      	ldr	r3, [r7, #0]
 8014128:	600b      	str	r3, [r1, #0]
 801412a:	88bb      	ldrh	r3, [r7, #4]
 801412c:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801412e:	6833      	ldr	r3, [r6, #0]
 8014130:	f8c1 3006 	str.w	r3, [r1, #6]
 8014134:	88b3      	ldrh	r3, [r6, #4]
 8014136:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014138:	f895 30de 	ldrb.w	r3, [r5, #222]	; 0xde
 801413c:	2b06      	cmp	r3, #6
 801413e:	d106      	bne.n	801414e <ethernet_output+0x4e>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014140:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
 8014144:	4621      	mov	r1, r4
 8014146:	4628      	mov	r0, r5
 8014148:	4798      	blx	r3
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 801414a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801414e:	4b05      	ldr	r3, [pc, #20]	; (8014164 <ethernet_output+0x64>)
 8014150:	f44f 7299 	mov.w	r2, #306	; 0x132
 8014154:	4904      	ldr	r1, [pc, #16]	; (8014168 <ethernet_output+0x68>)
 8014156:	4805      	ldr	r0, [pc, #20]	; (801416c <ethernet_output+0x6c>)
 8014158:	f000 f86c 	bl	8014234 <iprintf>
 801415c:	e7f0      	b.n	8014140 <ethernet_output+0x40>
  return ERR_BUF;
 801415e:	f06f 0001 	mvn.w	r0, #1
 8014162:	e7f2      	b.n	801414a <ethernet_output+0x4a>
 8014164:	08017e08 	.word	0x08017e08
 8014168:	08017e40 	.word	0x08017e40
 801416c:	08015418 	.word	0x08015418

08014170 <__libc_init_array>:
 8014170:	b570      	push	{r4, r5, r6, lr}
 8014172:	4d0d      	ldr	r5, [pc, #52]	; (80141a8 <__libc_init_array+0x38>)
 8014174:	4c0d      	ldr	r4, [pc, #52]	; (80141ac <__libc_init_array+0x3c>)
 8014176:	1b64      	subs	r4, r4, r5
 8014178:	10a4      	asrs	r4, r4, #2
 801417a:	2600      	movs	r6, #0
 801417c:	42a6      	cmp	r6, r4
 801417e:	d109      	bne.n	8014194 <__libc_init_array+0x24>
 8014180:	4d0b      	ldr	r5, [pc, #44]	; (80141b0 <__libc_init_array+0x40>)
 8014182:	4c0c      	ldr	r4, [pc, #48]	; (80141b4 <__libc_init_array+0x44>)
 8014184:	f001 f8e6 	bl	8015354 <_init>
 8014188:	1b64      	subs	r4, r4, r5
 801418a:	10a4      	asrs	r4, r4, #2
 801418c:	2600      	movs	r6, #0
 801418e:	42a6      	cmp	r6, r4
 8014190:	d105      	bne.n	801419e <__libc_init_array+0x2e>
 8014192:	bd70      	pop	{r4, r5, r6, pc}
 8014194:	f855 3b04 	ldr.w	r3, [r5], #4
 8014198:	4798      	blx	r3
 801419a:	3601      	adds	r6, #1
 801419c:	e7ee      	b.n	801417c <__libc_init_array+0xc>
 801419e:	f855 3b04 	ldr.w	r3, [r5], #4
 80141a2:	4798      	blx	r3
 80141a4:	3601      	adds	r6, #1
 80141a6:	e7f2      	b.n	801418e <__libc_init_array+0x1e>
 80141a8:	08017fd8 	.word	0x08017fd8
 80141ac:	08017fd8 	.word	0x08017fd8
 80141b0:	08017fd8 	.word	0x08017fd8
 80141b4:	08017fdc 	.word	0x08017fdc

080141b8 <memcmp>:
 80141b8:	b530      	push	{r4, r5, lr}
 80141ba:	3901      	subs	r1, #1
 80141bc:	2400      	movs	r4, #0
 80141be:	42a2      	cmp	r2, r4
 80141c0:	d101      	bne.n	80141c6 <memcmp+0xe>
 80141c2:	2000      	movs	r0, #0
 80141c4:	e005      	b.n	80141d2 <memcmp+0x1a>
 80141c6:	5d03      	ldrb	r3, [r0, r4]
 80141c8:	3401      	adds	r4, #1
 80141ca:	5d0d      	ldrb	r5, [r1, r4]
 80141cc:	42ab      	cmp	r3, r5
 80141ce:	d0f6      	beq.n	80141be <memcmp+0x6>
 80141d0:	1b58      	subs	r0, r3, r5
 80141d2:	bd30      	pop	{r4, r5, pc}

080141d4 <memcpy>:
 80141d4:	440a      	add	r2, r1
 80141d6:	4291      	cmp	r1, r2
 80141d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80141dc:	d100      	bne.n	80141e0 <memcpy+0xc>
 80141de:	4770      	bx	lr
 80141e0:	b510      	push	{r4, lr}
 80141e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80141e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80141ea:	4291      	cmp	r1, r2
 80141ec:	d1f9      	bne.n	80141e2 <memcpy+0xe>
 80141ee:	bd10      	pop	{r4, pc}

080141f0 <memmove>:
 80141f0:	4288      	cmp	r0, r1
 80141f2:	b510      	push	{r4, lr}
 80141f4:	eb01 0402 	add.w	r4, r1, r2
 80141f8:	d902      	bls.n	8014200 <memmove+0x10>
 80141fa:	4284      	cmp	r4, r0
 80141fc:	4623      	mov	r3, r4
 80141fe:	d807      	bhi.n	8014210 <memmove+0x20>
 8014200:	1e43      	subs	r3, r0, #1
 8014202:	42a1      	cmp	r1, r4
 8014204:	d008      	beq.n	8014218 <memmove+0x28>
 8014206:	f811 2b01 	ldrb.w	r2, [r1], #1
 801420a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801420e:	e7f8      	b.n	8014202 <memmove+0x12>
 8014210:	4402      	add	r2, r0
 8014212:	4601      	mov	r1, r0
 8014214:	428a      	cmp	r2, r1
 8014216:	d100      	bne.n	801421a <memmove+0x2a>
 8014218:	bd10      	pop	{r4, pc}
 801421a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801421e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014222:	e7f7      	b.n	8014214 <memmove+0x24>

08014224 <memset>:
 8014224:	4402      	add	r2, r0
 8014226:	4603      	mov	r3, r0
 8014228:	4293      	cmp	r3, r2
 801422a:	d100      	bne.n	801422e <memset+0xa>
 801422c:	4770      	bx	lr
 801422e:	f803 1b01 	strb.w	r1, [r3], #1
 8014232:	e7f9      	b.n	8014228 <memset+0x4>

08014234 <iprintf>:
 8014234:	b40f      	push	{r0, r1, r2, r3}
 8014236:	4b0a      	ldr	r3, [pc, #40]	; (8014260 <iprintf+0x2c>)
 8014238:	b513      	push	{r0, r1, r4, lr}
 801423a:	681c      	ldr	r4, [r3, #0]
 801423c:	b124      	cbz	r4, 8014248 <iprintf+0x14>
 801423e:	69a3      	ldr	r3, [r4, #24]
 8014240:	b913      	cbnz	r3, 8014248 <iprintf+0x14>
 8014242:	4620      	mov	r0, r4
 8014244:	f000 fabc 	bl	80147c0 <__sinit>
 8014248:	ab05      	add	r3, sp, #20
 801424a:	9a04      	ldr	r2, [sp, #16]
 801424c:	68a1      	ldr	r1, [r4, #8]
 801424e:	9301      	str	r3, [sp, #4]
 8014250:	4620      	mov	r0, r4
 8014252:	f000 fca7 	bl	8014ba4 <_vfiprintf_r>
 8014256:	b002      	add	sp, #8
 8014258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801425c:	b004      	add	sp, #16
 801425e:	4770      	bx	lr
 8014260:	2000001c 	.word	0x2000001c

08014264 <_puts_r>:
 8014264:	b570      	push	{r4, r5, r6, lr}
 8014266:	460e      	mov	r6, r1
 8014268:	4605      	mov	r5, r0
 801426a:	b118      	cbz	r0, 8014274 <_puts_r+0x10>
 801426c:	6983      	ldr	r3, [r0, #24]
 801426e:	b90b      	cbnz	r3, 8014274 <_puts_r+0x10>
 8014270:	f000 faa6 	bl	80147c0 <__sinit>
 8014274:	69ab      	ldr	r3, [r5, #24]
 8014276:	68ac      	ldr	r4, [r5, #8]
 8014278:	b913      	cbnz	r3, 8014280 <_puts_r+0x1c>
 801427a:	4628      	mov	r0, r5
 801427c:	f000 faa0 	bl	80147c0 <__sinit>
 8014280:	4b2c      	ldr	r3, [pc, #176]	; (8014334 <_puts_r+0xd0>)
 8014282:	429c      	cmp	r4, r3
 8014284:	d120      	bne.n	80142c8 <_puts_r+0x64>
 8014286:	686c      	ldr	r4, [r5, #4]
 8014288:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801428a:	07db      	lsls	r3, r3, #31
 801428c:	d405      	bmi.n	801429a <_puts_r+0x36>
 801428e:	89a3      	ldrh	r3, [r4, #12]
 8014290:	0598      	lsls	r0, r3, #22
 8014292:	d402      	bmi.n	801429a <_puts_r+0x36>
 8014294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014296:	f000 fb43 	bl	8014920 <__retarget_lock_acquire_recursive>
 801429a:	89a3      	ldrh	r3, [r4, #12]
 801429c:	0719      	lsls	r1, r3, #28
 801429e:	d51d      	bpl.n	80142dc <_puts_r+0x78>
 80142a0:	6923      	ldr	r3, [r4, #16]
 80142a2:	b1db      	cbz	r3, 80142dc <_puts_r+0x78>
 80142a4:	3e01      	subs	r6, #1
 80142a6:	68a3      	ldr	r3, [r4, #8]
 80142a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80142ac:	3b01      	subs	r3, #1
 80142ae:	60a3      	str	r3, [r4, #8]
 80142b0:	bb39      	cbnz	r1, 8014302 <_puts_r+0x9e>
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	da38      	bge.n	8014328 <_puts_r+0xc4>
 80142b6:	4622      	mov	r2, r4
 80142b8:	210a      	movs	r1, #10
 80142ba:	4628      	mov	r0, r5
 80142bc:	f000 f888 	bl	80143d0 <__swbuf_r>
 80142c0:	3001      	adds	r0, #1
 80142c2:	d011      	beq.n	80142e8 <_puts_r+0x84>
 80142c4:	250a      	movs	r5, #10
 80142c6:	e011      	b.n	80142ec <_puts_r+0x88>
 80142c8:	4b1b      	ldr	r3, [pc, #108]	; (8014338 <_puts_r+0xd4>)
 80142ca:	429c      	cmp	r4, r3
 80142cc:	d101      	bne.n	80142d2 <_puts_r+0x6e>
 80142ce:	68ac      	ldr	r4, [r5, #8]
 80142d0:	e7da      	b.n	8014288 <_puts_r+0x24>
 80142d2:	4b1a      	ldr	r3, [pc, #104]	; (801433c <_puts_r+0xd8>)
 80142d4:	429c      	cmp	r4, r3
 80142d6:	bf08      	it	eq
 80142d8:	68ec      	ldreq	r4, [r5, #12]
 80142da:	e7d5      	b.n	8014288 <_puts_r+0x24>
 80142dc:	4621      	mov	r1, r4
 80142de:	4628      	mov	r0, r5
 80142e0:	f000 f8c8 	bl	8014474 <__swsetup_r>
 80142e4:	2800      	cmp	r0, #0
 80142e6:	d0dd      	beq.n	80142a4 <_puts_r+0x40>
 80142e8:	f04f 35ff 	mov.w	r5, #4294967295
 80142ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80142ee:	07da      	lsls	r2, r3, #31
 80142f0:	d405      	bmi.n	80142fe <_puts_r+0x9a>
 80142f2:	89a3      	ldrh	r3, [r4, #12]
 80142f4:	059b      	lsls	r3, r3, #22
 80142f6:	d402      	bmi.n	80142fe <_puts_r+0x9a>
 80142f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80142fa:	f000 fb12 	bl	8014922 <__retarget_lock_release_recursive>
 80142fe:	4628      	mov	r0, r5
 8014300:	bd70      	pop	{r4, r5, r6, pc}
 8014302:	2b00      	cmp	r3, #0
 8014304:	da04      	bge.n	8014310 <_puts_r+0xac>
 8014306:	69a2      	ldr	r2, [r4, #24]
 8014308:	429a      	cmp	r2, r3
 801430a:	dc06      	bgt.n	801431a <_puts_r+0xb6>
 801430c:	290a      	cmp	r1, #10
 801430e:	d004      	beq.n	801431a <_puts_r+0xb6>
 8014310:	6823      	ldr	r3, [r4, #0]
 8014312:	1c5a      	adds	r2, r3, #1
 8014314:	6022      	str	r2, [r4, #0]
 8014316:	7019      	strb	r1, [r3, #0]
 8014318:	e7c5      	b.n	80142a6 <_puts_r+0x42>
 801431a:	4622      	mov	r2, r4
 801431c:	4628      	mov	r0, r5
 801431e:	f000 f857 	bl	80143d0 <__swbuf_r>
 8014322:	3001      	adds	r0, #1
 8014324:	d1bf      	bne.n	80142a6 <_puts_r+0x42>
 8014326:	e7df      	b.n	80142e8 <_puts_r+0x84>
 8014328:	6823      	ldr	r3, [r4, #0]
 801432a:	250a      	movs	r5, #10
 801432c:	1c5a      	adds	r2, r3, #1
 801432e:	6022      	str	r2, [r4, #0]
 8014330:	701d      	strb	r5, [r3, #0]
 8014332:	e7db      	b.n	80142ec <_puts_r+0x88>
 8014334:	08017f5c 	.word	0x08017f5c
 8014338:	08017f7c 	.word	0x08017f7c
 801433c:	08017f3c 	.word	0x08017f3c

08014340 <puts>:
 8014340:	4b02      	ldr	r3, [pc, #8]	; (801434c <puts+0xc>)
 8014342:	4601      	mov	r1, r0
 8014344:	6818      	ldr	r0, [r3, #0]
 8014346:	f7ff bf8d 	b.w	8014264 <_puts_r>
 801434a:	bf00      	nop
 801434c:	2000001c 	.word	0x2000001c

08014350 <rand>:
 8014350:	4b17      	ldr	r3, [pc, #92]	; (80143b0 <rand+0x60>)
 8014352:	b510      	push	{r4, lr}
 8014354:	681c      	ldr	r4, [r3, #0]
 8014356:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014358:	b9b3      	cbnz	r3, 8014388 <rand+0x38>
 801435a:	2018      	movs	r0, #24
 801435c:	f000 fb46 	bl	80149ec <malloc>
 8014360:	63a0      	str	r0, [r4, #56]	; 0x38
 8014362:	b928      	cbnz	r0, 8014370 <rand+0x20>
 8014364:	4602      	mov	r2, r0
 8014366:	4b13      	ldr	r3, [pc, #76]	; (80143b4 <rand+0x64>)
 8014368:	4813      	ldr	r0, [pc, #76]	; (80143b8 <rand+0x68>)
 801436a:	214e      	movs	r1, #78	; 0x4e
 801436c:	f000 f8f0 	bl	8014550 <__assert_func>
 8014370:	4a12      	ldr	r2, [pc, #72]	; (80143bc <rand+0x6c>)
 8014372:	4b13      	ldr	r3, [pc, #76]	; (80143c0 <rand+0x70>)
 8014374:	e9c0 2300 	strd	r2, r3, [r0]
 8014378:	4b12      	ldr	r3, [pc, #72]	; (80143c4 <rand+0x74>)
 801437a:	6083      	str	r3, [r0, #8]
 801437c:	230b      	movs	r3, #11
 801437e:	8183      	strh	r3, [r0, #12]
 8014380:	2201      	movs	r2, #1
 8014382:	2300      	movs	r3, #0
 8014384:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014388:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801438a:	480f      	ldr	r0, [pc, #60]	; (80143c8 <rand+0x78>)
 801438c:	690a      	ldr	r2, [r1, #16]
 801438e:	694b      	ldr	r3, [r1, #20]
 8014390:	4c0e      	ldr	r4, [pc, #56]	; (80143cc <rand+0x7c>)
 8014392:	4350      	muls	r0, r2
 8014394:	fb04 0003 	mla	r0, r4, r3, r0
 8014398:	fba2 3404 	umull	r3, r4, r2, r4
 801439c:	1c5a      	adds	r2, r3, #1
 801439e:	4404      	add	r4, r0
 80143a0:	f144 0000 	adc.w	r0, r4, #0
 80143a4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80143a8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80143ac:	bd10      	pop	{r4, pc}
 80143ae:	bf00      	nop
 80143b0:	2000001c 	.word	0x2000001c
 80143b4:	08017e88 	.word	0x08017e88
 80143b8:	08017e9f 	.word	0x08017e9f
 80143bc:	abcd330e 	.word	0xabcd330e
 80143c0:	e66d1234 	.word	0xe66d1234
 80143c4:	0005deec 	.word	0x0005deec
 80143c8:	5851f42d 	.word	0x5851f42d
 80143cc:	4c957f2d 	.word	0x4c957f2d

080143d0 <__swbuf_r>:
 80143d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143d2:	460e      	mov	r6, r1
 80143d4:	4614      	mov	r4, r2
 80143d6:	4605      	mov	r5, r0
 80143d8:	b118      	cbz	r0, 80143e2 <__swbuf_r+0x12>
 80143da:	6983      	ldr	r3, [r0, #24]
 80143dc:	b90b      	cbnz	r3, 80143e2 <__swbuf_r+0x12>
 80143de:	f000 f9ef 	bl	80147c0 <__sinit>
 80143e2:	4b21      	ldr	r3, [pc, #132]	; (8014468 <__swbuf_r+0x98>)
 80143e4:	429c      	cmp	r4, r3
 80143e6:	d12b      	bne.n	8014440 <__swbuf_r+0x70>
 80143e8:	686c      	ldr	r4, [r5, #4]
 80143ea:	69a3      	ldr	r3, [r4, #24]
 80143ec:	60a3      	str	r3, [r4, #8]
 80143ee:	89a3      	ldrh	r3, [r4, #12]
 80143f0:	071a      	lsls	r2, r3, #28
 80143f2:	d52f      	bpl.n	8014454 <__swbuf_r+0x84>
 80143f4:	6923      	ldr	r3, [r4, #16]
 80143f6:	b36b      	cbz	r3, 8014454 <__swbuf_r+0x84>
 80143f8:	6923      	ldr	r3, [r4, #16]
 80143fa:	6820      	ldr	r0, [r4, #0]
 80143fc:	1ac0      	subs	r0, r0, r3
 80143fe:	6963      	ldr	r3, [r4, #20]
 8014400:	b2f6      	uxtb	r6, r6
 8014402:	4283      	cmp	r3, r0
 8014404:	4637      	mov	r7, r6
 8014406:	dc04      	bgt.n	8014412 <__swbuf_r+0x42>
 8014408:	4621      	mov	r1, r4
 801440a:	4628      	mov	r0, r5
 801440c:	f000 f944 	bl	8014698 <_fflush_r>
 8014410:	bb30      	cbnz	r0, 8014460 <__swbuf_r+0x90>
 8014412:	68a3      	ldr	r3, [r4, #8]
 8014414:	3b01      	subs	r3, #1
 8014416:	60a3      	str	r3, [r4, #8]
 8014418:	6823      	ldr	r3, [r4, #0]
 801441a:	1c5a      	adds	r2, r3, #1
 801441c:	6022      	str	r2, [r4, #0]
 801441e:	701e      	strb	r6, [r3, #0]
 8014420:	6963      	ldr	r3, [r4, #20]
 8014422:	3001      	adds	r0, #1
 8014424:	4283      	cmp	r3, r0
 8014426:	d004      	beq.n	8014432 <__swbuf_r+0x62>
 8014428:	89a3      	ldrh	r3, [r4, #12]
 801442a:	07db      	lsls	r3, r3, #31
 801442c:	d506      	bpl.n	801443c <__swbuf_r+0x6c>
 801442e:	2e0a      	cmp	r6, #10
 8014430:	d104      	bne.n	801443c <__swbuf_r+0x6c>
 8014432:	4621      	mov	r1, r4
 8014434:	4628      	mov	r0, r5
 8014436:	f000 f92f 	bl	8014698 <_fflush_r>
 801443a:	b988      	cbnz	r0, 8014460 <__swbuf_r+0x90>
 801443c:	4638      	mov	r0, r7
 801443e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014440:	4b0a      	ldr	r3, [pc, #40]	; (801446c <__swbuf_r+0x9c>)
 8014442:	429c      	cmp	r4, r3
 8014444:	d101      	bne.n	801444a <__swbuf_r+0x7a>
 8014446:	68ac      	ldr	r4, [r5, #8]
 8014448:	e7cf      	b.n	80143ea <__swbuf_r+0x1a>
 801444a:	4b09      	ldr	r3, [pc, #36]	; (8014470 <__swbuf_r+0xa0>)
 801444c:	429c      	cmp	r4, r3
 801444e:	bf08      	it	eq
 8014450:	68ec      	ldreq	r4, [r5, #12]
 8014452:	e7ca      	b.n	80143ea <__swbuf_r+0x1a>
 8014454:	4621      	mov	r1, r4
 8014456:	4628      	mov	r0, r5
 8014458:	f000 f80c 	bl	8014474 <__swsetup_r>
 801445c:	2800      	cmp	r0, #0
 801445e:	d0cb      	beq.n	80143f8 <__swbuf_r+0x28>
 8014460:	f04f 37ff 	mov.w	r7, #4294967295
 8014464:	e7ea      	b.n	801443c <__swbuf_r+0x6c>
 8014466:	bf00      	nop
 8014468:	08017f5c 	.word	0x08017f5c
 801446c:	08017f7c 	.word	0x08017f7c
 8014470:	08017f3c 	.word	0x08017f3c

08014474 <__swsetup_r>:
 8014474:	4b32      	ldr	r3, [pc, #200]	; (8014540 <__swsetup_r+0xcc>)
 8014476:	b570      	push	{r4, r5, r6, lr}
 8014478:	681d      	ldr	r5, [r3, #0]
 801447a:	4606      	mov	r6, r0
 801447c:	460c      	mov	r4, r1
 801447e:	b125      	cbz	r5, 801448a <__swsetup_r+0x16>
 8014480:	69ab      	ldr	r3, [r5, #24]
 8014482:	b913      	cbnz	r3, 801448a <__swsetup_r+0x16>
 8014484:	4628      	mov	r0, r5
 8014486:	f000 f99b 	bl	80147c0 <__sinit>
 801448a:	4b2e      	ldr	r3, [pc, #184]	; (8014544 <__swsetup_r+0xd0>)
 801448c:	429c      	cmp	r4, r3
 801448e:	d10f      	bne.n	80144b0 <__swsetup_r+0x3c>
 8014490:	686c      	ldr	r4, [r5, #4]
 8014492:	89a3      	ldrh	r3, [r4, #12]
 8014494:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014498:	0719      	lsls	r1, r3, #28
 801449a:	d42c      	bmi.n	80144f6 <__swsetup_r+0x82>
 801449c:	06dd      	lsls	r5, r3, #27
 801449e:	d411      	bmi.n	80144c4 <__swsetup_r+0x50>
 80144a0:	2309      	movs	r3, #9
 80144a2:	6033      	str	r3, [r6, #0]
 80144a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80144a8:	81a3      	strh	r3, [r4, #12]
 80144aa:	f04f 30ff 	mov.w	r0, #4294967295
 80144ae:	e03e      	b.n	801452e <__swsetup_r+0xba>
 80144b0:	4b25      	ldr	r3, [pc, #148]	; (8014548 <__swsetup_r+0xd4>)
 80144b2:	429c      	cmp	r4, r3
 80144b4:	d101      	bne.n	80144ba <__swsetup_r+0x46>
 80144b6:	68ac      	ldr	r4, [r5, #8]
 80144b8:	e7eb      	b.n	8014492 <__swsetup_r+0x1e>
 80144ba:	4b24      	ldr	r3, [pc, #144]	; (801454c <__swsetup_r+0xd8>)
 80144bc:	429c      	cmp	r4, r3
 80144be:	bf08      	it	eq
 80144c0:	68ec      	ldreq	r4, [r5, #12]
 80144c2:	e7e6      	b.n	8014492 <__swsetup_r+0x1e>
 80144c4:	0758      	lsls	r0, r3, #29
 80144c6:	d512      	bpl.n	80144ee <__swsetup_r+0x7a>
 80144c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80144ca:	b141      	cbz	r1, 80144de <__swsetup_r+0x6a>
 80144cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80144d0:	4299      	cmp	r1, r3
 80144d2:	d002      	beq.n	80144da <__swsetup_r+0x66>
 80144d4:	4630      	mov	r0, r6
 80144d6:	f000 fa91 	bl	80149fc <_free_r>
 80144da:	2300      	movs	r3, #0
 80144dc:	6363      	str	r3, [r4, #52]	; 0x34
 80144de:	89a3      	ldrh	r3, [r4, #12]
 80144e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80144e4:	81a3      	strh	r3, [r4, #12]
 80144e6:	2300      	movs	r3, #0
 80144e8:	6063      	str	r3, [r4, #4]
 80144ea:	6923      	ldr	r3, [r4, #16]
 80144ec:	6023      	str	r3, [r4, #0]
 80144ee:	89a3      	ldrh	r3, [r4, #12]
 80144f0:	f043 0308 	orr.w	r3, r3, #8
 80144f4:	81a3      	strh	r3, [r4, #12]
 80144f6:	6923      	ldr	r3, [r4, #16]
 80144f8:	b94b      	cbnz	r3, 801450e <__swsetup_r+0x9a>
 80144fa:	89a3      	ldrh	r3, [r4, #12]
 80144fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014504:	d003      	beq.n	801450e <__swsetup_r+0x9a>
 8014506:	4621      	mov	r1, r4
 8014508:	4630      	mov	r0, r6
 801450a:	f000 fa2f 	bl	801496c <__smakebuf_r>
 801450e:	89a0      	ldrh	r0, [r4, #12]
 8014510:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014514:	f010 0301 	ands.w	r3, r0, #1
 8014518:	d00a      	beq.n	8014530 <__swsetup_r+0xbc>
 801451a:	2300      	movs	r3, #0
 801451c:	60a3      	str	r3, [r4, #8]
 801451e:	6963      	ldr	r3, [r4, #20]
 8014520:	425b      	negs	r3, r3
 8014522:	61a3      	str	r3, [r4, #24]
 8014524:	6923      	ldr	r3, [r4, #16]
 8014526:	b943      	cbnz	r3, 801453a <__swsetup_r+0xc6>
 8014528:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801452c:	d1ba      	bne.n	80144a4 <__swsetup_r+0x30>
 801452e:	bd70      	pop	{r4, r5, r6, pc}
 8014530:	0781      	lsls	r1, r0, #30
 8014532:	bf58      	it	pl
 8014534:	6963      	ldrpl	r3, [r4, #20]
 8014536:	60a3      	str	r3, [r4, #8]
 8014538:	e7f4      	b.n	8014524 <__swsetup_r+0xb0>
 801453a:	2000      	movs	r0, #0
 801453c:	e7f7      	b.n	801452e <__swsetup_r+0xba>
 801453e:	bf00      	nop
 8014540:	2000001c 	.word	0x2000001c
 8014544:	08017f5c 	.word	0x08017f5c
 8014548:	08017f7c 	.word	0x08017f7c
 801454c:	08017f3c 	.word	0x08017f3c

08014550 <__assert_func>:
 8014550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014552:	4614      	mov	r4, r2
 8014554:	461a      	mov	r2, r3
 8014556:	4b09      	ldr	r3, [pc, #36]	; (801457c <__assert_func+0x2c>)
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	4605      	mov	r5, r0
 801455c:	68d8      	ldr	r0, [r3, #12]
 801455e:	b14c      	cbz	r4, 8014574 <__assert_func+0x24>
 8014560:	4b07      	ldr	r3, [pc, #28]	; (8014580 <__assert_func+0x30>)
 8014562:	9100      	str	r1, [sp, #0]
 8014564:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014568:	4906      	ldr	r1, [pc, #24]	; (8014584 <__assert_func+0x34>)
 801456a:	462b      	mov	r3, r5
 801456c:	f000 f9a6 	bl	80148bc <fiprintf>
 8014570:	f000 fe42 	bl	80151f8 <abort>
 8014574:	4b04      	ldr	r3, [pc, #16]	; (8014588 <__assert_func+0x38>)
 8014576:	461c      	mov	r4, r3
 8014578:	e7f3      	b.n	8014562 <__assert_func+0x12>
 801457a:	bf00      	nop
 801457c:	2000001c 	.word	0x2000001c
 8014580:	08017efe 	.word	0x08017efe
 8014584:	08017f0b 	.word	0x08017f0b
 8014588:	08017f39 	.word	0x08017f39

0801458c <__sflush_r>:
 801458c:	898a      	ldrh	r2, [r1, #12]
 801458e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014592:	4605      	mov	r5, r0
 8014594:	0710      	lsls	r0, r2, #28
 8014596:	460c      	mov	r4, r1
 8014598:	d458      	bmi.n	801464c <__sflush_r+0xc0>
 801459a:	684b      	ldr	r3, [r1, #4]
 801459c:	2b00      	cmp	r3, #0
 801459e:	dc05      	bgt.n	80145ac <__sflush_r+0x20>
 80145a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	dc02      	bgt.n	80145ac <__sflush_r+0x20>
 80145a6:	2000      	movs	r0, #0
 80145a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80145ae:	2e00      	cmp	r6, #0
 80145b0:	d0f9      	beq.n	80145a6 <__sflush_r+0x1a>
 80145b2:	2300      	movs	r3, #0
 80145b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80145b8:	682f      	ldr	r7, [r5, #0]
 80145ba:	602b      	str	r3, [r5, #0]
 80145bc:	d032      	beq.n	8014624 <__sflush_r+0x98>
 80145be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80145c0:	89a3      	ldrh	r3, [r4, #12]
 80145c2:	075a      	lsls	r2, r3, #29
 80145c4:	d505      	bpl.n	80145d2 <__sflush_r+0x46>
 80145c6:	6863      	ldr	r3, [r4, #4]
 80145c8:	1ac0      	subs	r0, r0, r3
 80145ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80145cc:	b10b      	cbz	r3, 80145d2 <__sflush_r+0x46>
 80145ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80145d0:	1ac0      	subs	r0, r0, r3
 80145d2:	2300      	movs	r3, #0
 80145d4:	4602      	mov	r2, r0
 80145d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80145d8:	6a21      	ldr	r1, [r4, #32]
 80145da:	4628      	mov	r0, r5
 80145dc:	47b0      	blx	r6
 80145de:	1c43      	adds	r3, r0, #1
 80145e0:	89a3      	ldrh	r3, [r4, #12]
 80145e2:	d106      	bne.n	80145f2 <__sflush_r+0x66>
 80145e4:	6829      	ldr	r1, [r5, #0]
 80145e6:	291d      	cmp	r1, #29
 80145e8:	d82c      	bhi.n	8014644 <__sflush_r+0xb8>
 80145ea:	4a2a      	ldr	r2, [pc, #168]	; (8014694 <__sflush_r+0x108>)
 80145ec:	40ca      	lsrs	r2, r1
 80145ee:	07d6      	lsls	r6, r2, #31
 80145f0:	d528      	bpl.n	8014644 <__sflush_r+0xb8>
 80145f2:	2200      	movs	r2, #0
 80145f4:	6062      	str	r2, [r4, #4]
 80145f6:	04d9      	lsls	r1, r3, #19
 80145f8:	6922      	ldr	r2, [r4, #16]
 80145fa:	6022      	str	r2, [r4, #0]
 80145fc:	d504      	bpl.n	8014608 <__sflush_r+0x7c>
 80145fe:	1c42      	adds	r2, r0, #1
 8014600:	d101      	bne.n	8014606 <__sflush_r+0x7a>
 8014602:	682b      	ldr	r3, [r5, #0]
 8014604:	b903      	cbnz	r3, 8014608 <__sflush_r+0x7c>
 8014606:	6560      	str	r0, [r4, #84]	; 0x54
 8014608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801460a:	602f      	str	r7, [r5, #0]
 801460c:	2900      	cmp	r1, #0
 801460e:	d0ca      	beq.n	80145a6 <__sflush_r+0x1a>
 8014610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014614:	4299      	cmp	r1, r3
 8014616:	d002      	beq.n	801461e <__sflush_r+0x92>
 8014618:	4628      	mov	r0, r5
 801461a:	f000 f9ef 	bl	80149fc <_free_r>
 801461e:	2000      	movs	r0, #0
 8014620:	6360      	str	r0, [r4, #52]	; 0x34
 8014622:	e7c1      	b.n	80145a8 <__sflush_r+0x1c>
 8014624:	6a21      	ldr	r1, [r4, #32]
 8014626:	2301      	movs	r3, #1
 8014628:	4628      	mov	r0, r5
 801462a:	47b0      	blx	r6
 801462c:	1c41      	adds	r1, r0, #1
 801462e:	d1c7      	bne.n	80145c0 <__sflush_r+0x34>
 8014630:	682b      	ldr	r3, [r5, #0]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d0c4      	beq.n	80145c0 <__sflush_r+0x34>
 8014636:	2b1d      	cmp	r3, #29
 8014638:	d001      	beq.n	801463e <__sflush_r+0xb2>
 801463a:	2b16      	cmp	r3, #22
 801463c:	d101      	bne.n	8014642 <__sflush_r+0xb6>
 801463e:	602f      	str	r7, [r5, #0]
 8014640:	e7b1      	b.n	80145a6 <__sflush_r+0x1a>
 8014642:	89a3      	ldrh	r3, [r4, #12]
 8014644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014648:	81a3      	strh	r3, [r4, #12]
 801464a:	e7ad      	b.n	80145a8 <__sflush_r+0x1c>
 801464c:	690f      	ldr	r7, [r1, #16]
 801464e:	2f00      	cmp	r7, #0
 8014650:	d0a9      	beq.n	80145a6 <__sflush_r+0x1a>
 8014652:	0793      	lsls	r3, r2, #30
 8014654:	680e      	ldr	r6, [r1, #0]
 8014656:	bf08      	it	eq
 8014658:	694b      	ldreq	r3, [r1, #20]
 801465a:	600f      	str	r7, [r1, #0]
 801465c:	bf18      	it	ne
 801465e:	2300      	movne	r3, #0
 8014660:	eba6 0807 	sub.w	r8, r6, r7
 8014664:	608b      	str	r3, [r1, #8]
 8014666:	f1b8 0f00 	cmp.w	r8, #0
 801466a:	dd9c      	ble.n	80145a6 <__sflush_r+0x1a>
 801466c:	6a21      	ldr	r1, [r4, #32]
 801466e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014670:	4643      	mov	r3, r8
 8014672:	463a      	mov	r2, r7
 8014674:	4628      	mov	r0, r5
 8014676:	47b0      	blx	r6
 8014678:	2800      	cmp	r0, #0
 801467a:	dc06      	bgt.n	801468a <__sflush_r+0xfe>
 801467c:	89a3      	ldrh	r3, [r4, #12]
 801467e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014682:	81a3      	strh	r3, [r4, #12]
 8014684:	f04f 30ff 	mov.w	r0, #4294967295
 8014688:	e78e      	b.n	80145a8 <__sflush_r+0x1c>
 801468a:	4407      	add	r7, r0
 801468c:	eba8 0800 	sub.w	r8, r8, r0
 8014690:	e7e9      	b.n	8014666 <__sflush_r+0xda>
 8014692:	bf00      	nop
 8014694:	20400001 	.word	0x20400001

08014698 <_fflush_r>:
 8014698:	b538      	push	{r3, r4, r5, lr}
 801469a:	690b      	ldr	r3, [r1, #16]
 801469c:	4605      	mov	r5, r0
 801469e:	460c      	mov	r4, r1
 80146a0:	b913      	cbnz	r3, 80146a8 <_fflush_r+0x10>
 80146a2:	2500      	movs	r5, #0
 80146a4:	4628      	mov	r0, r5
 80146a6:	bd38      	pop	{r3, r4, r5, pc}
 80146a8:	b118      	cbz	r0, 80146b2 <_fflush_r+0x1a>
 80146aa:	6983      	ldr	r3, [r0, #24]
 80146ac:	b90b      	cbnz	r3, 80146b2 <_fflush_r+0x1a>
 80146ae:	f000 f887 	bl	80147c0 <__sinit>
 80146b2:	4b14      	ldr	r3, [pc, #80]	; (8014704 <_fflush_r+0x6c>)
 80146b4:	429c      	cmp	r4, r3
 80146b6:	d11b      	bne.n	80146f0 <_fflush_r+0x58>
 80146b8:	686c      	ldr	r4, [r5, #4]
 80146ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d0ef      	beq.n	80146a2 <_fflush_r+0xa>
 80146c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80146c4:	07d0      	lsls	r0, r2, #31
 80146c6:	d404      	bmi.n	80146d2 <_fflush_r+0x3a>
 80146c8:	0599      	lsls	r1, r3, #22
 80146ca:	d402      	bmi.n	80146d2 <_fflush_r+0x3a>
 80146cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80146ce:	f000 f927 	bl	8014920 <__retarget_lock_acquire_recursive>
 80146d2:	4628      	mov	r0, r5
 80146d4:	4621      	mov	r1, r4
 80146d6:	f7ff ff59 	bl	801458c <__sflush_r>
 80146da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80146dc:	07da      	lsls	r2, r3, #31
 80146de:	4605      	mov	r5, r0
 80146e0:	d4e0      	bmi.n	80146a4 <_fflush_r+0xc>
 80146e2:	89a3      	ldrh	r3, [r4, #12]
 80146e4:	059b      	lsls	r3, r3, #22
 80146e6:	d4dd      	bmi.n	80146a4 <_fflush_r+0xc>
 80146e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80146ea:	f000 f91a 	bl	8014922 <__retarget_lock_release_recursive>
 80146ee:	e7d9      	b.n	80146a4 <_fflush_r+0xc>
 80146f0:	4b05      	ldr	r3, [pc, #20]	; (8014708 <_fflush_r+0x70>)
 80146f2:	429c      	cmp	r4, r3
 80146f4:	d101      	bne.n	80146fa <_fflush_r+0x62>
 80146f6:	68ac      	ldr	r4, [r5, #8]
 80146f8:	e7df      	b.n	80146ba <_fflush_r+0x22>
 80146fa:	4b04      	ldr	r3, [pc, #16]	; (801470c <_fflush_r+0x74>)
 80146fc:	429c      	cmp	r4, r3
 80146fe:	bf08      	it	eq
 8014700:	68ec      	ldreq	r4, [r5, #12]
 8014702:	e7da      	b.n	80146ba <_fflush_r+0x22>
 8014704:	08017f5c 	.word	0x08017f5c
 8014708:	08017f7c 	.word	0x08017f7c
 801470c:	08017f3c 	.word	0x08017f3c

08014710 <std>:
 8014710:	2300      	movs	r3, #0
 8014712:	b510      	push	{r4, lr}
 8014714:	4604      	mov	r4, r0
 8014716:	e9c0 3300 	strd	r3, r3, [r0]
 801471a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801471e:	6083      	str	r3, [r0, #8]
 8014720:	8181      	strh	r1, [r0, #12]
 8014722:	6643      	str	r3, [r0, #100]	; 0x64
 8014724:	81c2      	strh	r2, [r0, #14]
 8014726:	6183      	str	r3, [r0, #24]
 8014728:	4619      	mov	r1, r3
 801472a:	2208      	movs	r2, #8
 801472c:	305c      	adds	r0, #92	; 0x5c
 801472e:	f7ff fd79 	bl	8014224 <memset>
 8014732:	4b05      	ldr	r3, [pc, #20]	; (8014748 <std+0x38>)
 8014734:	6263      	str	r3, [r4, #36]	; 0x24
 8014736:	4b05      	ldr	r3, [pc, #20]	; (801474c <std+0x3c>)
 8014738:	62a3      	str	r3, [r4, #40]	; 0x28
 801473a:	4b05      	ldr	r3, [pc, #20]	; (8014750 <std+0x40>)
 801473c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801473e:	4b05      	ldr	r3, [pc, #20]	; (8014754 <std+0x44>)
 8014740:	6224      	str	r4, [r4, #32]
 8014742:	6323      	str	r3, [r4, #48]	; 0x30
 8014744:	bd10      	pop	{r4, pc}
 8014746:	bf00      	nop
 8014748:	0801514d 	.word	0x0801514d
 801474c:	0801516f 	.word	0x0801516f
 8014750:	080151a7 	.word	0x080151a7
 8014754:	080151cb 	.word	0x080151cb

08014758 <_cleanup_r>:
 8014758:	4901      	ldr	r1, [pc, #4]	; (8014760 <_cleanup_r+0x8>)
 801475a:	f000 b8c1 	b.w	80148e0 <_fwalk_reent>
 801475e:	bf00      	nop
 8014760:	08014699 	.word	0x08014699

08014764 <__sfmoreglue>:
 8014764:	b570      	push	{r4, r5, r6, lr}
 8014766:	1e4a      	subs	r2, r1, #1
 8014768:	2568      	movs	r5, #104	; 0x68
 801476a:	4355      	muls	r5, r2
 801476c:	460e      	mov	r6, r1
 801476e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014772:	f000 f993 	bl	8014a9c <_malloc_r>
 8014776:	4604      	mov	r4, r0
 8014778:	b140      	cbz	r0, 801478c <__sfmoreglue+0x28>
 801477a:	2100      	movs	r1, #0
 801477c:	e9c0 1600 	strd	r1, r6, [r0]
 8014780:	300c      	adds	r0, #12
 8014782:	60a0      	str	r0, [r4, #8]
 8014784:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014788:	f7ff fd4c 	bl	8014224 <memset>
 801478c:	4620      	mov	r0, r4
 801478e:	bd70      	pop	{r4, r5, r6, pc}

08014790 <__sfp_lock_acquire>:
 8014790:	4801      	ldr	r0, [pc, #4]	; (8014798 <__sfp_lock_acquire+0x8>)
 8014792:	f000 b8c5 	b.w	8014920 <__retarget_lock_acquire_recursive>
 8014796:	bf00      	nop
 8014798:	20007fc4 	.word	0x20007fc4

0801479c <__sfp_lock_release>:
 801479c:	4801      	ldr	r0, [pc, #4]	; (80147a4 <__sfp_lock_release+0x8>)
 801479e:	f000 b8c0 	b.w	8014922 <__retarget_lock_release_recursive>
 80147a2:	bf00      	nop
 80147a4:	20007fc4 	.word	0x20007fc4

080147a8 <__sinit_lock_acquire>:
 80147a8:	4801      	ldr	r0, [pc, #4]	; (80147b0 <__sinit_lock_acquire+0x8>)
 80147aa:	f000 b8b9 	b.w	8014920 <__retarget_lock_acquire_recursive>
 80147ae:	bf00      	nop
 80147b0:	20007fbf 	.word	0x20007fbf

080147b4 <__sinit_lock_release>:
 80147b4:	4801      	ldr	r0, [pc, #4]	; (80147bc <__sinit_lock_release+0x8>)
 80147b6:	f000 b8b4 	b.w	8014922 <__retarget_lock_release_recursive>
 80147ba:	bf00      	nop
 80147bc:	20007fbf 	.word	0x20007fbf

080147c0 <__sinit>:
 80147c0:	b510      	push	{r4, lr}
 80147c2:	4604      	mov	r4, r0
 80147c4:	f7ff fff0 	bl	80147a8 <__sinit_lock_acquire>
 80147c8:	69a3      	ldr	r3, [r4, #24]
 80147ca:	b11b      	cbz	r3, 80147d4 <__sinit+0x14>
 80147cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147d0:	f7ff bff0 	b.w	80147b4 <__sinit_lock_release>
 80147d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80147d8:	6523      	str	r3, [r4, #80]	; 0x50
 80147da:	4b13      	ldr	r3, [pc, #76]	; (8014828 <__sinit+0x68>)
 80147dc:	4a13      	ldr	r2, [pc, #76]	; (801482c <__sinit+0x6c>)
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80147e2:	42a3      	cmp	r3, r4
 80147e4:	bf04      	itt	eq
 80147e6:	2301      	moveq	r3, #1
 80147e8:	61a3      	streq	r3, [r4, #24]
 80147ea:	4620      	mov	r0, r4
 80147ec:	f000 f820 	bl	8014830 <__sfp>
 80147f0:	6060      	str	r0, [r4, #4]
 80147f2:	4620      	mov	r0, r4
 80147f4:	f000 f81c 	bl	8014830 <__sfp>
 80147f8:	60a0      	str	r0, [r4, #8]
 80147fa:	4620      	mov	r0, r4
 80147fc:	f000 f818 	bl	8014830 <__sfp>
 8014800:	2200      	movs	r2, #0
 8014802:	60e0      	str	r0, [r4, #12]
 8014804:	2104      	movs	r1, #4
 8014806:	6860      	ldr	r0, [r4, #4]
 8014808:	f7ff ff82 	bl	8014710 <std>
 801480c:	68a0      	ldr	r0, [r4, #8]
 801480e:	2201      	movs	r2, #1
 8014810:	2109      	movs	r1, #9
 8014812:	f7ff ff7d 	bl	8014710 <std>
 8014816:	68e0      	ldr	r0, [r4, #12]
 8014818:	2202      	movs	r2, #2
 801481a:	2112      	movs	r1, #18
 801481c:	f7ff ff78 	bl	8014710 <std>
 8014820:	2301      	movs	r3, #1
 8014822:	61a3      	str	r3, [r4, #24]
 8014824:	e7d2      	b.n	80147cc <__sinit+0xc>
 8014826:	bf00      	nop
 8014828:	08017e84 	.word	0x08017e84
 801482c:	08014759 	.word	0x08014759

08014830 <__sfp>:
 8014830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014832:	4607      	mov	r7, r0
 8014834:	f7ff ffac 	bl	8014790 <__sfp_lock_acquire>
 8014838:	4b1e      	ldr	r3, [pc, #120]	; (80148b4 <__sfp+0x84>)
 801483a:	681e      	ldr	r6, [r3, #0]
 801483c:	69b3      	ldr	r3, [r6, #24]
 801483e:	b913      	cbnz	r3, 8014846 <__sfp+0x16>
 8014840:	4630      	mov	r0, r6
 8014842:	f7ff ffbd 	bl	80147c0 <__sinit>
 8014846:	3648      	adds	r6, #72	; 0x48
 8014848:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801484c:	3b01      	subs	r3, #1
 801484e:	d503      	bpl.n	8014858 <__sfp+0x28>
 8014850:	6833      	ldr	r3, [r6, #0]
 8014852:	b30b      	cbz	r3, 8014898 <__sfp+0x68>
 8014854:	6836      	ldr	r6, [r6, #0]
 8014856:	e7f7      	b.n	8014848 <__sfp+0x18>
 8014858:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801485c:	b9d5      	cbnz	r5, 8014894 <__sfp+0x64>
 801485e:	4b16      	ldr	r3, [pc, #88]	; (80148b8 <__sfp+0x88>)
 8014860:	60e3      	str	r3, [r4, #12]
 8014862:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014866:	6665      	str	r5, [r4, #100]	; 0x64
 8014868:	f000 f859 	bl	801491e <__retarget_lock_init_recursive>
 801486c:	f7ff ff96 	bl	801479c <__sfp_lock_release>
 8014870:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014874:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014878:	6025      	str	r5, [r4, #0]
 801487a:	61a5      	str	r5, [r4, #24]
 801487c:	2208      	movs	r2, #8
 801487e:	4629      	mov	r1, r5
 8014880:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014884:	f7ff fcce 	bl	8014224 <memset>
 8014888:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801488c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014890:	4620      	mov	r0, r4
 8014892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014894:	3468      	adds	r4, #104	; 0x68
 8014896:	e7d9      	b.n	801484c <__sfp+0x1c>
 8014898:	2104      	movs	r1, #4
 801489a:	4638      	mov	r0, r7
 801489c:	f7ff ff62 	bl	8014764 <__sfmoreglue>
 80148a0:	4604      	mov	r4, r0
 80148a2:	6030      	str	r0, [r6, #0]
 80148a4:	2800      	cmp	r0, #0
 80148a6:	d1d5      	bne.n	8014854 <__sfp+0x24>
 80148a8:	f7ff ff78 	bl	801479c <__sfp_lock_release>
 80148ac:	230c      	movs	r3, #12
 80148ae:	603b      	str	r3, [r7, #0]
 80148b0:	e7ee      	b.n	8014890 <__sfp+0x60>
 80148b2:	bf00      	nop
 80148b4:	08017e84 	.word	0x08017e84
 80148b8:	ffff0001 	.word	0xffff0001

080148bc <fiprintf>:
 80148bc:	b40e      	push	{r1, r2, r3}
 80148be:	b503      	push	{r0, r1, lr}
 80148c0:	4601      	mov	r1, r0
 80148c2:	ab03      	add	r3, sp, #12
 80148c4:	4805      	ldr	r0, [pc, #20]	; (80148dc <fiprintf+0x20>)
 80148c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80148ca:	6800      	ldr	r0, [r0, #0]
 80148cc:	9301      	str	r3, [sp, #4]
 80148ce:	f000 f969 	bl	8014ba4 <_vfiprintf_r>
 80148d2:	b002      	add	sp, #8
 80148d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80148d8:	b003      	add	sp, #12
 80148da:	4770      	bx	lr
 80148dc:	2000001c 	.word	0x2000001c

080148e0 <_fwalk_reent>:
 80148e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80148e4:	4606      	mov	r6, r0
 80148e6:	4688      	mov	r8, r1
 80148e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80148ec:	2700      	movs	r7, #0
 80148ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80148f2:	f1b9 0901 	subs.w	r9, r9, #1
 80148f6:	d505      	bpl.n	8014904 <_fwalk_reent+0x24>
 80148f8:	6824      	ldr	r4, [r4, #0]
 80148fa:	2c00      	cmp	r4, #0
 80148fc:	d1f7      	bne.n	80148ee <_fwalk_reent+0xe>
 80148fe:	4638      	mov	r0, r7
 8014900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014904:	89ab      	ldrh	r3, [r5, #12]
 8014906:	2b01      	cmp	r3, #1
 8014908:	d907      	bls.n	801491a <_fwalk_reent+0x3a>
 801490a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801490e:	3301      	adds	r3, #1
 8014910:	d003      	beq.n	801491a <_fwalk_reent+0x3a>
 8014912:	4629      	mov	r1, r5
 8014914:	4630      	mov	r0, r6
 8014916:	47c0      	blx	r8
 8014918:	4307      	orrs	r7, r0
 801491a:	3568      	adds	r5, #104	; 0x68
 801491c:	e7e9      	b.n	80148f2 <_fwalk_reent+0x12>

0801491e <__retarget_lock_init_recursive>:
 801491e:	4770      	bx	lr

08014920 <__retarget_lock_acquire_recursive>:
 8014920:	4770      	bx	lr

08014922 <__retarget_lock_release_recursive>:
 8014922:	4770      	bx	lr

08014924 <__swhatbuf_r>:
 8014924:	b570      	push	{r4, r5, r6, lr}
 8014926:	460e      	mov	r6, r1
 8014928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801492c:	2900      	cmp	r1, #0
 801492e:	b096      	sub	sp, #88	; 0x58
 8014930:	4614      	mov	r4, r2
 8014932:	461d      	mov	r5, r3
 8014934:	da07      	bge.n	8014946 <__swhatbuf_r+0x22>
 8014936:	2300      	movs	r3, #0
 8014938:	602b      	str	r3, [r5, #0]
 801493a:	89b3      	ldrh	r3, [r6, #12]
 801493c:	061a      	lsls	r2, r3, #24
 801493e:	d410      	bmi.n	8014962 <__swhatbuf_r+0x3e>
 8014940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014944:	e00e      	b.n	8014964 <__swhatbuf_r+0x40>
 8014946:	466a      	mov	r2, sp
 8014948:	f000 fc6e 	bl	8015228 <_fstat_r>
 801494c:	2800      	cmp	r0, #0
 801494e:	dbf2      	blt.n	8014936 <__swhatbuf_r+0x12>
 8014950:	9a01      	ldr	r2, [sp, #4]
 8014952:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014956:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801495a:	425a      	negs	r2, r3
 801495c:	415a      	adcs	r2, r3
 801495e:	602a      	str	r2, [r5, #0]
 8014960:	e7ee      	b.n	8014940 <__swhatbuf_r+0x1c>
 8014962:	2340      	movs	r3, #64	; 0x40
 8014964:	2000      	movs	r0, #0
 8014966:	6023      	str	r3, [r4, #0]
 8014968:	b016      	add	sp, #88	; 0x58
 801496a:	bd70      	pop	{r4, r5, r6, pc}

0801496c <__smakebuf_r>:
 801496c:	898b      	ldrh	r3, [r1, #12]
 801496e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014970:	079d      	lsls	r5, r3, #30
 8014972:	4606      	mov	r6, r0
 8014974:	460c      	mov	r4, r1
 8014976:	d507      	bpl.n	8014988 <__smakebuf_r+0x1c>
 8014978:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801497c:	6023      	str	r3, [r4, #0]
 801497e:	6123      	str	r3, [r4, #16]
 8014980:	2301      	movs	r3, #1
 8014982:	6163      	str	r3, [r4, #20]
 8014984:	b002      	add	sp, #8
 8014986:	bd70      	pop	{r4, r5, r6, pc}
 8014988:	ab01      	add	r3, sp, #4
 801498a:	466a      	mov	r2, sp
 801498c:	f7ff ffca 	bl	8014924 <__swhatbuf_r>
 8014990:	9900      	ldr	r1, [sp, #0]
 8014992:	4605      	mov	r5, r0
 8014994:	4630      	mov	r0, r6
 8014996:	f000 f881 	bl	8014a9c <_malloc_r>
 801499a:	b948      	cbnz	r0, 80149b0 <__smakebuf_r+0x44>
 801499c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149a0:	059a      	lsls	r2, r3, #22
 80149a2:	d4ef      	bmi.n	8014984 <__smakebuf_r+0x18>
 80149a4:	f023 0303 	bic.w	r3, r3, #3
 80149a8:	f043 0302 	orr.w	r3, r3, #2
 80149ac:	81a3      	strh	r3, [r4, #12]
 80149ae:	e7e3      	b.n	8014978 <__smakebuf_r+0xc>
 80149b0:	4b0d      	ldr	r3, [pc, #52]	; (80149e8 <__smakebuf_r+0x7c>)
 80149b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80149b4:	89a3      	ldrh	r3, [r4, #12]
 80149b6:	6020      	str	r0, [r4, #0]
 80149b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80149bc:	81a3      	strh	r3, [r4, #12]
 80149be:	9b00      	ldr	r3, [sp, #0]
 80149c0:	6163      	str	r3, [r4, #20]
 80149c2:	9b01      	ldr	r3, [sp, #4]
 80149c4:	6120      	str	r0, [r4, #16]
 80149c6:	b15b      	cbz	r3, 80149e0 <__smakebuf_r+0x74>
 80149c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80149cc:	4630      	mov	r0, r6
 80149ce:	f000 fc3d 	bl	801524c <_isatty_r>
 80149d2:	b128      	cbz	r0, 80149e0 <__smakebuf_r+0x74>
 80149d4:	89a3      	ldrh	r3, [r4, #12]
 80149d6:	f023 0303 	bic.w	r3, r3, #3
 80149da:	f043 0301 	orr.w	r3, r3, #1
 80149de:	81a3      	strh	r3, [r4, #12]
 80149e0:	89a0      	ldrh	r0, [r4, #12]
 80149e2:	4305      	orrs	r5, r0
 80149e4:	81a5      	strh	r5, [r4, #12]
 80149e6:	e7cd      	b.n	8014984 <__smakebuf_r+0x18>
 80149e8:	08014759 	.word	0x08014759

080149ec <malloc>:
 80149ec:	4b02      	ldr	r3, [pc, #8]	; (80149f8 <malloc+0xc>)
 80149ee:	4601      	mov	r1, r0
 80149f0:	6818      	ldr	r0, [r3, #0]
 80149f2:	f000 b853 	b.w	8014a9c <_malloc_r>
 80149f6:	bf00      	nop
 80149f8:	2000001c 	.word	0x2000001c

080149fc <_free_r>:
 80149fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80149fe:	2900      	cmp	r1, #0
 8014a00:	d048      	beq.n	8014a94 <_free_r+0x98>
 8014a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a06:	9001      	str	r0, [sp, #4]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	f1a1 0404 	sub.w	r4, r1, #4
 8014a0e:	bfb8      	it	lt
 8014a10:	18e4      	addlt	r4, r4, r3
 8014a12:	f000 fc3d 	bl	8015290 <__malloc_lock>
 8014a16:	4a20      	ldr	r2, [pc, #128]	; (8014a98 <_free_r+0x9c>)
 8014a18:	9801      	ldr	r0, [sp, #4]
 8014a1a:	6813      	ldr	r3, [r2, #0]
 8014a1c:	4615      	mov	r5, r2
 8014a1e:	b933      	cbnz	r3, 8014a2e <_free_r+0x32>
 8014a20:	6063      	str	r3, [r4, #4]
 8014a22:	6014      	str	r4, [r2, #0]
 8014a24:	b003      	add	sp, #12
 8014a26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014a2a:	f000 bc37 	b.w	801529c <__malloc_unlock>
 8014a2e:	42a3      	cmp	r3, r4
 8014a30:	d90b      	bls.n	8014a4a <_free_r+0x4e>
 8014a32:	6821      	ldr	r1, [r4, #0]
 8014a34:	1862      	adds	r2, r4, r1
 8014a36:	4293      	cmp	r3, r2
 8014a38:	bf04      	itt	eq
 8014a3a:	681a      	ldreq	r2, [r3, #0]
 8014a3c:	685b      	ldreq	r3, [r3, #4]
 8014a3e:	6063      	str	r3, [r4, #4]
 8014a40:	bf04      	itt	eq
 8014a42:	1852      	addeq	r2, r2, r1
 8014a44:	6022      	streq	r2, [r4, #0]
 8014a46:	602c      	str	r4, [r5, #0]
 8014a48:	e7ec      	b.n	8014a24 <_free_r+0x28>
 8014a4a:	461a      	mov	r2, r3
 8014a4c:	685b      	ldr	r3, [r3, #4]
 8014a4e:	b10b      	cbz	r3, 8014a54 <_free_r+0x58>
 8014a50:	42a3      	cmp	r3, r4
 8014a52:	d9fa      	bls.n	8014a4a <_free_r+0x4e>
 8014a54:	6811      	ldr	r1, [r2, #0]
 8014a56:	1855      	adds	r5, r2, r1
 8014a58:	42a5      	cmp	r5, r4
 8014a5a:	d10b      	bne.n	8014a74 <_free_r+0x78>
 8014a5c:	6824      	ldr	r4, [r4, #0]
 8014a5e:	4421      	add	r1, r4
 8014a60:	1854      	adds	r4, r2, r1
 8014a62:	42a3      	cmp	r3, r4
 8014a64:	6011      	str	r1, [r2, #0]
 8014a66:	d1dd      	bne.n	8014a24 <_free_r+0x28>
 8014a68:	681c      	ldr	r4, [r3, #0]
 8014a6a:	685b      	ldr	r3, [r3, #4]
 8014a6c:	6053      	str	r3, [r2, #4]
 8014a6e:	4421      	add	r1, r4
 8014a70:	6011      	str	r1, [r2, #0]
 8014a72:	e7d7      	b.n	8014a24 <_free_r+0x28>
 8014a74:	d902      	bls.n	8014a7c <_free_r+0x80>
 8014a76:	230c      	movs	r3, #12
 8014a78:	6003      	str	r3, [r0, #0]
 8014a7a:	e7d3      	b.n	8014a24 <_free_r+0x28>
 8014a7c:	6825      	ldr	r5, [r4, #0]
 8014a7e:	1961      	adds	r1, r4, r5
 8014a80:	428b      	cmp	r3, r1
 8014a82:	bf04      	itt	eq
 8014a84:	6819      	ldreq	r1, [r3, #0]
 8014a86:	685b      	ldreq	r3, [r3, #4]
 8014a88:	6063      	str	r3, [r4, #4]
 8014a8a:	bf04      	itt	eq
 8014a8c:	1949      	addeq	r1, r1, r5
 8014a8e:	6021      	streq	r1, [r4, #0]
 8014a90:	6054      	str	r4, [r2, #4]
 8014a92:	e7c7      	b.n	8014a24 <_free_r+0x28>
 8014a94:	b003      	add	sp, #12
 8014a96:	bd30      	pop	{r4, r5, pc}
 8014a98:	200007e4 	.word	0x200007e4

08014a9c <_malloc_r>:
 8014a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a9e:	1ccd      	adds	r5, r1, #3
 8014aa0:	f025 0503 	bic.w	r5, r5, #3
 8014aa4:	3508      	adds	r5, #8
 8014aa6:	2d0c      	cmp	r5, #12
 8014aa8:	bf38      	it	cc
 8014aaa:	250c      	movcc	r5, #12
 8014aac:	2d00      	cmp	r5, #0
 8014aae:	4606      	mov	r6, r0
 8014ab0:	db01      	blt.n	8014ab6 <_malloc_r+0x1a>
 8014ab2:	42a9      	cmp	r1, r5
 8014ab4:	d903      	bls.n	8014abe <_malloc_r+0x22>
 8014ab6:	230c      	movs	r3, #12
 8014ab8:	6033      	str	r3, [r6, #0]
 8014aba:	2000      	movs	r0, #0
 8014abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014abe:	f000 fbe7 	bl	8015290 <__malloc_lock>
 8014ac2:	4921      	ldr	r1, [pc, #132]	; (8014b48 <_malloc_r+0xac>)
 8014ac4:	680a      	ldr	r2, [r1, #0]
 8014ac6:	4614      	mov	r4, r2
 8014ac8:	b99c      	cbnz	r4, 8014af2 <_malloc_r+0x56>
 8014aca:	4f20      	ldr	r7, [pc, #128]	; (8014b4c <_malloc_r+0xb0>)
 8014acc:	683b      	ldr	r3, [r7, #0]
 8014ace:	b923      	cbnz	r3, 8014ada <_malloc_r+0x3e>
 8014ad0:	4621      	mov	r1, r4
 8014ad2:	4630      	mov	r0, r6
 8014ad4:	f000 fb2a 	bl	801512c <_sbrk_r>
 8014ad8:	6038      	str	r0, [r7, #0]
 8014ada:	4629      	mov	r1, r5
 8014adc:	4630      	mov	r0, r6
 8014ade:	f000 fb25 	bl	801512c <_sbrk_r>
 8014ae2:	1c43      	adds	r3, r0, #1
 8014ae4:	d123      	bne.n	8014b2e <_malloc_r+0x92>
 8014ae6:	230c      	movs	r3, #12
 8014ae8:	6033      	str	r3, [r6, #0]
 8014aea:	4630      	mov	r0, r6
 8014aec:	f000 fbd6 	bl	801529c <__malloc_unlock>
 8014af0:	e7e3      	b.n	8014aba <_malloc_r+0x1e>
 8014af2:	6823      	ldr	r3, [r4, #0]
 8014af4:	1b5b      	subs	r3, r3, r5
 8014af6:	d417      	bmi.n	8014b28 <_malloc_r+0x8c>
 8014af8:	2b0b      	cmp	r3, #11
 8014afa:	d903      	bls.n	8014b04 <_malloc_r+0x68>
 8014afc:	6023      	str	r3, [r4, #0]
 8014afe:	441c      	add	r4, r3
 8014b00:	6025      	str	r5, [r4, #0]
 8014b02:	e004      	b.n	8014b0e <_malloc_r+0x72>
 8014b04:	6863      	ldr	r3, [r4, #4]
 8014b06:	42a2      	cmp	r2, r4
 8014b08:	bf0c      	ite	eq
 8014b0a:	600b      	streq	r3, [r1, #0]
 8014b0c:	6053      	strne	r3, [r2, #4]
 8014b0e:	4630      	mov	r0, r6
 8014b10:	f000 fbc4 	bl	801529c <__malloc_unlock>
 8014b14:	f104 000b 	add.w	r0, r4, #11
 8014b18:	1d23      	adds	r3, r4, #4
 8014b1a:	f020 0007 	bic.w	r0, r0, #7
 8014b1e:	1ac2      	subs	r2, r0, r3
 8014b20:	d0cc      	beq.n	8014abc <_malloc_r+0x20>
 8014b22:	1a1b      	subs	r3, r3, r0
 8014b24:	50a3      	str	r3, [r4, r2]
 8014b26:	e7c9      	b.n	8014abc <_malloc_r+0x20>
 8014b28:	4622      	mov	r2, r4
 8014b2a:	6864      	ldr	r4, [r4, #4]
 8014b2c:	e7cc      	b.n	8014ac8 <_malloc_r+0x2c>
 8014b2e:	1cc4      	adds	r4, r0, #3
 8014b30:	f024 0403 	bic.w	r4, r4, #3
 8014b34:	42a0      	cmp	r0, r4
 8014b36:	d0e3      	beq.n	8014b00 <_malloc_r+0x64>
 8014b38:	1a21      	subs	r1, r4, r0
 8014b3a:	4630      	mov	r0, r6
 8014b3c:	f000 faf6 	bl	801512c <_sbrk_r>
 8014b40:	3001      	adds	r0, #1
 8014b42:	d1dd      	bne.n	8014b00 <_malloc_r+0x64>
 8014b44:	e7cf      	b.n	8014ae6 <_malloc_r+0x4a>
 8014b46:	bf00      	nop
 8014b48:	200007e4 	.word	0x200007e4
 8014b4c:	200007e8 	.word	0x200007e8

08014b50 <__sfputc_r>:
 8014b50:	6893      	ldr	r3, [r2, #8]
 8014b52:	3b01      	subs	r3, #1
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	b410      	push	{r4}
 8014b58:	6093      	str	r3, [r2, #8]
 8014b5a:	da08      	bge.n	8014b6e <__sfputc_r+0x1e>
 8014b5c:	6994      	ldr	r4, [r2, #24]
 8014b5e:	42a3      	cmp	r3, r4
 8014b60:	db01      	blt.n	8014b66 <__sfputc_r+0x16>
 8014b62:	290a      	cmp	r1, #10
 8014b64:	d103      	bne.n	8014b6e <__sfputc_r+0x1e>
 8014b66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b6a:	f7ff bc31 	b.w	80143d0 <__swbuf_r>
 8014b6e:	6813      	ldr	r3, [r2, #0]
 8014b70:	1c58      	adds	r0, r3, #1
 8014b72:	6010      	str	r0, [r2, #0]
 8014b74:	7019      	strb	r1, [r3, #0]
 8014b76:	4608      	mov	r0, r1
 8014b78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b7c:	4770      	bx	lr

08014b7e <__sfputs_r>:
 8014b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b80:	4606      	mov	r6, r0
 8014b82:	460f      	mov	r7, r1
 8014b84:	4614      	mov	r4, r2
 8014b86:	18d5      	adds	r5, r2, r3
 8014b88:	42ac      	cmp	r4, r5
 8014b8a:	d101      	bne.n	8014b90 <__sfputs_r+0x12>
 8014b8c:	2000      	movs	r0, #0
 8014b8e:	e007      	b.n	8014ba0 <__sfputs_r+0x22>
 8014b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b94:	463a      	mov	r2, r7
 8014b96:	4630      	mov	r0, r6
 8014b98:	f7ff ffda 	bl	8014b50 <__sfputc_r>
 8014b9c:	1c43      	adds	r3, r0, #1
 8014b9e:	d1f3      	bne.n	8014b88 <__sfputs_r+0xa>
 8014ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014ba4 <_vfiprintf_r>:
 8014ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ba8:	460d      	mov	r5, r1
 8014baa:	b09d      	sub	sp, #116	; 0x74
 8014bac:	4614      	mov	r4, r2
 8014bae:	4698      	mov	r8, r3
 8014bb0:	4606      	mov	r6, r0
 8014bb2:	b118      	cbz	r0, 8014bbc <_vfiprintf_r+0x18>
 8014bb4:	6983      	ldr	r3, [r0, #24]
 8014bb6:	b90b      	cbnz	r3, 8014bbc <_vfiprintf_r+0x18>
 8014bb8:	f7ff fe02 	bl	80147c0 <__sinit>
 8014bbc:	4b89      	ldr	r3, [pc, #548]	; (8014de4 <_vfiprintf_r+0x240>)
 8014bbe:	429d      	cmp	r5, r3
 8014bc0:	d11b      	bne.n	8014bfa <_vfiprintf_r+0x56>
 8014bc2:	6875      	ldr	r5, [r6, #4]
 8014bc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014bc6:	07d9      	lsls	r1, r3, #31
 8014bc8:	d405      	bmi.n	8014bd6 <_vfiprintf_r+0x32>
 8014bca:	89ab      	ldrh	r3, [r5, #12]
 8014bcc:	059a      	lsls	r2, r3, #22
 8014bce:	d402      	bmi.n	8014bd6 <_vfiprintf_r+0x32>
 8014bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014bd2:	f7ff fea5 	bl	8014920 <__retarget_lock_acquire_recursive>
 8014bd6:	89ab      	ldrh	r3, [r5, #12]
 8014bd8:	071b      	lsls	r3, r3, #28
 8014bda:	d501      	bpl.n	8014be0 <_vfiprintf_r+0x3c>
 8014bdc:	692b      	ldr	r3, [r5, #16]
 8014bde:	b9eb      	cbnz	r3, 8014c1c <_vfiprintf_r+0x78>
 8014be0:	4629      	mov	r1, r5
 8014be2:	4630      	mov	r0, r6
 8014be4:	f7ff fc46 	bl	8014474 <__swsetup_r>
 8014be8:	b1c0      	cbz	r0, 8014c1c <_vfiprintf_r+0x78>
 8014bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014bec:	07dc      	lsls	r4, r3, #31
 8014bee:	d50e      	bpl.n	8014c0e <_vfiprintf_r+0x6a>
 8014bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8014bf4:	b01d      	add	sp, #116	; 0x74
 8014bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bfa:	4b7b      	ldr	r3, [pc, #492]	; (8014de8 <_vfiprintf_r+0x244>)
 8014bfc:	429d      	cmp	r5, r3
 8014bfe:	d101      	bne.n	8014c04 <_vfiprintf_r+0x60>
 8014c00:	68b5      	ldr	r5, [r6, #8]
 8014c02:	e7df      	b.n	8014bc4 <_vfiprintf_r+0x20>
 8014c04:	4b79      	ldr	r3, [pc, #484]	; (8014dec <_vfiprintf_r+0x248>)
 8014c06:	429d      	cmp	r5, r3
 8014c08:	bf08      	it	eq
 8014c0a:	68f5      	ldreq	r5, [r6, #12]
 8014c0c:	e7da      	b.n	8014bc4 <_vfiprintf_r+0x20>
 8014c0e:	89ab      	ldrh	r3, [r5, #12]
 8014c10:	0598      	lsls	r0, r3, #22
 8014c12:	d4ed      	bmi.n	8014bf0 <_vfiprintf_r+0x4c>
 8014c14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c16:	f7ff fe84 	bl	8014922 <__retarget_lock_release_recursive>
 8014c1a:	e7e9      	b.n	8014bf0 <_vfiprintf_r+0x4c>
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8014c20:	2320      	movs	r3, #32
 8014c22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014c26:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c2a:	2330      	movs	r3, #48	; 0x30
 8014c2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014df0 <_vfiprintf_r+0x24c>
 8014c30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014c34:	f04f 0901 	mov.w	r9, #1
 8014c38:	4623      	mov	r3, r4
 8014c3a:	469a      	mov	sl, r3
 8014c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c40:	b10a      	cbz	r2, 8014c46 <_vfiprintf_r+0xa2>
 8014c42:	2a25      	cmp	r2, #37	; 0x25
 8014c44:	d1f9      	bne.n	8014c3a <_vfiprintf_r+0x96>
 8014c46:	ebba 0b04 	subs.w	fp, sl, r4
 8014c4a:	d00b      	beq.n	8014c64 <_vfiprintf_r+0xc0>
 8014c4c:	465b      	mov	r3, fp
 8014c4e:	4622      	mov	r2, r4
 8014c50:	4629      	mov	r1, r5
 8014c52:	4630      	mov	r0, r6
 8014c54:	f7ff ff93 	bl	8014b7e <__sfputs_r>
 8014c58:	3001      	adds	r0, #1
 8014c5a:	f000 80aa 	beq.w	8014db2 <_vfiprintf_r+0x20e>
 8014c5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c60:	445a      	add	r2, fp
 8014c62:	9209      	str	r2, [sp, #36]	; 0x24
 8014c64:	f89a 3000 	ldrb.w	r3, [sl]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	f000 80a2 	beq.w	8014db2 <_vfiprintf_r+0x20e>
 8014c6e:	2300      	movs	r3, #0
 8014c70:	f04f 32ff 	mov.w	r2, #4294967295
 8014c74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c78:	f10a 0a01 	add.w	sl, sl, #1
 8014c7c:	9304      	str	r3, [sp, #16]
 8014c7e:	9307      	str	r3, [sp, #28]
 8014c80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014c84:	931a      	str	r3, [sp, #104]	; 0x68
 8014c86:	4654      	mov	r4, sl
 8014c88:	2205      	movs	r2, #5
 8014c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c8e:	4858      	ldr	r0, [pc, #352]	; (8014df0 <_vfiprintf_r+0x24c>)
 8014c90:	f7ef faa6 	bl	80041e0 <memchr>
 8014c94:	9a04      	ldr	r2, [sp, #16]
 8014c96:	b9d8      	cbnz	r0, 8014cd0 <_vfiprintf_r+0x12c>
 8014c98:	06d1      	lsls	r1, r2, #27
 8014c9a:	bf44      	itt	mi
 8014c9c:	2320      	movmi	r3, #32
 8014c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ca2:	0713      	lsls	r3, r2, #28
 8014ca4:	bf44      	itt	mi
 8014ca6:	232b      	movmi	r3, #43	; 0x2b
 8014ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014cac:	f89a 3000 	ldrb.w	r3, [sl]
 8014cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8014cb2:	d015      	beq.n	8014ce0 <_vfiprintf_r+0x13c>
 8014cb4:	9a07      	ldr	r2, [sp, #28]
 8014cb6:	4654      	mov	r4, sl
 8014cb8:	2000      	movs	r0, #0
 8014cba:	f04f 0c0a 	mov.w	ip, #10
 8014cbe:	4621      	mov	r1, r4
 8014cc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014cc4:	3b30      	subs	r3, #48	; 0x30
 8014cc6:	2b09      	cmp	r3, #9
 8014cc8:	d94e      	bls.n	8014d68 <_vfiprintf_r+0x1c4>
 8014cca:	b1b0      	cbz	r0, 8014cfa <_vfiprintf_r+0x156>
 8014ccc:	9207      	str	r2, [sp, #28]
 8014cce:	e014      	b.n	8014cfa <_vfiprintf_r+0x156>
 8014cd0:	eba0 0308 	sub.w	r3, r0, r8
 8014cd4:	fa09 f303 	lsl.w	r3, r9, r3
 8014cd8:	4313      	orrs	r3, r2
 8014cda:	9304      	str	r3, [sp, #16]
 8014cdc:	46a2      	mov	sl, r4
 8014cde:	e7d2      	b.n	8014c86 <_vfiprintf_r+0xe2>
 8014ce0:	9b03      	ldr	r3, [sp, #12]
 8014ce2:	1d19      	adds	r1, r3, #4
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	9103      	str	r1, [sp, #12]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	bfbb      	ittet	lt
 8014cec:	425b      	neglt	r3, r3
 8014cee:	f042 0202 	orrlt.w	r2, r2, #2
 8014cf2:	9307      	strge	r3, [sp, #28]
 8014cf4:	9307      	strlt	r3, [sp, #28]
 8014cf6:	bfb8      	it	lt
 8014cf8:	9204      	strlt	r2, [sp, #16]
 8014cfa:	7823      	ldrb	r3, [r4, #0]
 8014cfc:	2b2e      	cmp	r3, #46	; 0x2e
 8014cfe:	d10c      	bne.n	8014d1a <_vfiprintf_r+0x176>
 8014d00:	7863      	ldrb	r3, [r4, #1]
 8014d02:	2b2a      	cmp	r3, #42	; 0x2a
 8014d04:	d135      	bne.n	8014d72 <_vfiprintf_r+0x1ce>
 8014d06:	9b03      	ldr	r3, [sp, #12]
 8014d08:	1d1a      	adds	r2, r3, #4
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	9203      	str	r2, [sp, #12]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	bfb8      	it	lt
 8014d12:	f04f 33ff 	movlt.w	r3, #4294967295
 8014d16:	3402      	adds	r4, #2
 8014d18:	9305      	str	r3, [sp, #20]
 8014d1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014e00 <_vfiprintf_r+0x25c>
 8014d1e:	7821      	ldrb	r1, [r4, #0]
 8014d20:	2203      	movs	r2, #3
 8014d22:	4650      	mov	r0, sl
 8014d24:	f7ef fa5c 	bl	80041e0 <memchr>
 8014d28:	b140      	cbz	r0, 8014d3c <_vfiprintf_r+0x198>
 8014d2a:	2340      	movs	r3, #64	; 0x40
 8014d2c:	eba0 000a 	sub.w	r0, r0, sl
 8014d30:	fa03 f000 	lsl.w	r0, r3, r0
 8014d34:	9b04      	ldr	r3, [sp, #16]
 8014d36:	4303      	orrs	r3, r0
 8014d38:	3401      	adds	r4, #1
 8014d3a:	9304      	str	r3, [sp, #16]
 8014d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d40:	482c      	ldr	r0, [pc, #176]	; (8014df4 <_vfiprintf_r+0x250>)
 8014d42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014d46:	2206      	movs	r2, #6
 8014d48:	f7ef fa4a 	bl	80041e0 <memchr>
 8014d4c:	2800      	cmp	r0, #0
 8014d4e:	d03f      	beq.n	8014dd0 <_vfiprintf_r+0x22c>
 8014d50:	4b29      	ldr	r3, [pc, #164]	; (8014df8 <_vfiprintf_r+0x254>)
 8014d52:	bb1b      	cbnz	r3, 8014d9c <_vfiprintf_r+0x1f8>
 8014d54:	9b03      	ldr	r3, [sp, #12]
 8014d56:	3307      	adds	r3, #7
 8014d58:	f023 0307 	bic.w	r3, r3, #7
 8014d5c:	3308      	adds	r3, #8
 8014d5e:	9303      	str	r3, [sp, #12]
 8014d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d62:	443b      	add	r3, r7
 8014d64:	9309      	str	r3, [sp, #36]	; 0x24
 8014d66:	e767      	b.n	8014c38 <_vfiprintf_r+0x94>
 8014d68:	fb0c 3202 	mla	r2, ip, r2, r3
 8014d6c:	460c      	mov	r4, r1
 8014d6e:	2001      	movs	r0, #1
 8014d70:	e7a5      	b.n	8014cbe <_vfiprintf_r+0x11a>
 8014d72:	2300      	movs	r3, #0
 8014d74:	3401      	adds	r4, #1
 8014d76:	9305      	str	r3, [sp, #20]
 8014d78:	4619      	mov	r1, r3
 8014d7a:	f04f 0c0a 	mov.w	ip, #10
 8014d7e:	4620      	mov	r0, r4
 8014d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d84:	3a30      	subs	r2, #48	; 0x30
 8014d86:	2a09      	cmp	r2, #9
 8014d88:	d903      	bls.n	8014d92 <_vfiprintf_r+0x1ee>
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d0c5      	beq.n	8014d1a <_vfiprintf_r+0x176>
 8014d8e:	9105      	str	r1, [sp, #20]
 8014d90:	e7c3      	b.n	8014d1a <_vfiprintf_r+0x176>
 8014d92:	fb0c 2101 	mla	r1, ip, r1, r2
 8014d96:	4604      	mov	r4, r0
 8014d98:	2301      	movs	r3, #1
 8014d9a:	e7f0      	b.n	8014d7e <_vfiprintf_r+0x1da>
 8014d9c:	ab03      	add	r3, sp, #12
 8014d9e:	9300      	str	r3, [sp, #0]
 8014da0:	462a      	mov	r2, r5
 8014da2:	4b16      	ldr	r3, [pc, #88]	; (8014dfc <_vfiprintf_r+0x258>)
 8014da4:	a904      	add	r1, sp, #16
 8014da6:	4630      	mov	r0, r6
 8014da8:	f3af 8000 	nop.w
 8014dac:	4607      	mov	r7, r0
 8014dae:	1c78      	adds	r0, r7, #1
 8014db0:	d1d6      	bne.n	8014d60 <_vfiprintf_r+0x1bc>
 8014db2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014db4:	07d9      	lsls	r1, r3, #31
 8014db6:	d405      	bmi.n	8014dc4 <_vfiprintf_r+0x220>
 8014db8:	89ab      	ldrh	r3, [r5, #12]
 8014dba:	059a      	lsls	r2, r3, #22
 8014dbc:	d402      	bmi.n	8014dc4 <_vfiprintf_r+0x220>
 8014dbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014dc0:	f7ff fdaf 	bl	8014922 <__retarget_lock_release_recursive>
 8014dc4:	89ab      	ldrh	r3, [r5, #12]
 8014dc6:	065b      	lsls	r3, r3, #25
 8014dc8:	f53f af12 	bmi.w	8014bf0 <_vfiprintf_r+0x4c>
 8014dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014dce:	e711      	b.n	8014bf4 <_vfiprintf_r+0x50>
 8014dd0:	ab03      	add	r3, sp, #12
 8014dd2:	9300      	str	r3, [sp, #0]
 8014dd4:	462a      	mov	r2, r5
 8014dd6:	4b09      	ldr	r3, [pc, #36]	; (8014dfc <_vfiprintf_r+0x258>)
 8014dd8:	a904      	add	r1, sp, #16
 8014dda:	4630      	mov	r0, r6
 8014ddc:	f000 f880 	bl	8014ee0 <_printf_i>
 8014de0:	e7e4      	b.n	8014dac <_vfiprintf_r+0x208>
 8014de2:	bf00      	nop
 8014de4:	08017f5c 	.word	0x08017f5c
 8014de8:	08017f7c 	.word	0x08017f7c
 8014dec:	08017f3c 	.word	0x08017f3c
 8014df0:	08017f9c 	.word	0x08017f9c
 8014df4:	08017fa6 	.word	0x08017fa6
 8014df8:	00000000 	.word	0x00000000
 8014dfc:	08014b7f 	.word	0x08014b7f
 8014e00:	08017fa2 	.word	0x08017fa2

08014e04 <_printf_common>:
 8014e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e08:	4616      	mov	r6, r2
 8014e0a:	4699      	mov	r9, r3
 8014e0c:	688a      	ldr	r2, [r1, #8]
 8014e0e:	690b      	ldr	r3, [r1, #16]
 8014e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014e14:	4293      	cmp	r3, r2
 8014e16:	bfb8      	it	lt
 8014e18:	4613      	movlt	r3, r2
 8014e1a:	6033      	str	r3, [r6, #0]
 8014e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014e20:	4607      	mov	r7, r0
 8014e22:	460c      	mov	r4, r1
 8014e24:	b10a      	cbz	r2, 8014e2a <_printf_common+0x26>
 8014e26:	3301      	adds	r3, #1
 8014e28:	6033      	str	r3, [r6, #0]
 8014e2a:	6823      	ldr	r3, [r4, #0]
 8014e2c:	0699      	lsls	r1, r3, #26
 8014e2e:	bf42      	ittt	mi
 8014e30:	6833      	ldrmi	r3, [r6, #0]
 8014e32:	3302      	addmi	r3, #2
 8014e34:	6033      	strmi	r3, [r6, #0]
 8014e36:	6825      	ldr	r5, [r4, #0]
 8014e38:	f015 0506 	ands.w	r5, r5, #6
 8014e3c:	d106      	bne.n	8014e4c <_printf_common+0x48>
 8014e3e:	f104 0a19 	add.w	sl, r4, #25
 8014e42:	68e3      	ldr	r3, [r4, #12]
 8014e44:	6832      	ldr	r2, [r6, #0]
 8014e46:	1a9b      	subs	r3, r3, r2
 8014e48:	42ab      	cmp	r3, r5
 8014e4a:	dc26      	bgt.n	8014e9a <_printf_common+0x96>
 8014e4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014e50:	1e13      	subs	r3, r2, #0
 8014e52:	6822      	ldr	r2, [r4, #0]
 8014e54:	bf18      	it	ne
 8014e56:	2301      	movne	r3, #1
 8014e58:	0692      	lsls	r2, r2, #26
 8014e5a:	d42b      	bmi.n	8014eb4 <_printf_common+0xb0>
 8014e5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014e60:	4649      	mov	r1, r9
 8014e62:	4638      	mov	r0, r7
 8014e64:	47c0      	blx	r8
 8014e66:	3001      	adds	r0, #1
 8014e68:	d01e      	beq.n	8014ea8 <_printf_common+0xa4>
 8014e6a:	6823      	ldr	r3, [r4, #0]
 8014e6c:	68e5      	ldr	r5, [r4, #12]
 8014e6e:	6832      	ldr	r2, [r6, #0]
 8014e70:	f003 0306 	and.w	r3, r3, #6
 8014e74:	2b04      	cmp	r3, #4
 8014e76:	bf08      	it	eq
 8014e78:	1aad      	subeq	r5, r5, r2
 8014e7a:	68a3      	ldr	r3, [r4, #8]
 8014e7c:	6922      	ldr	r2, [r4, #16]
 8014e7e:	bf0c      	ite	eq
 8014e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014e84:	2500      	movne	r5, #0
 8014e86:	4293      	cmp	r3, r2
 8014e88:	bfc4      	itt	gt
 8014e8a:	1a9b      	subgt	r3, r3, r2
 8014e8c:	18ed      	addgt	r5, r5, r3
 8014e8e:	2600      	movs	r6, #0
 8014e90:	341a      	adds	r4, #26
 8014e92:	42b5      	cmp	r5, r6
 8014e94:	d11a      	bne.n	8014ecc <_printf_common+0xc8>
 8014e96:	2000      	movs	r0, #0
 8014e98:	e008      	b.n	8014eac <_printf_common+0xa8>
 8014e9a:	2301      	movs	r3, #1
 8014e9c:	4652      	mov	r2, sl
 8014e9e:	4649      	mov	r1, r9
 8014ea0:	4638      	mov	r0, r7
 8014ea2:	47c0      	blx	r8
 8014ea4:	3001      	adds	r0, #1
 8014ea6:	d103      	bne.n	8014eb0 <_printf_common+0xac>
 8014ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8014eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014eb0:	3501      	adds	r5, #1
 8014eb2:	e7c6      	b.n	8014e42 <_printf_common+0x3e>
 8014eb4:	18e1      	adds	r1, r4, r3
 8014eb6:	1c5a      	adds	r2, r3, #1
 8014eb8:	2030      	movs	r0, #48	; 0x30
 8014eba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014ebe:	4422      	add	r2, r4
 8014ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014ec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014ec8:	3302      	adds	r3, #2
 8014eca:	e7c7      	b.n	8014e5c <_printf_common+0x58>
 8014ecc:	2301      	movs	r3, #1
 8014ece:	4622      	mov	r2, r4
 8014ed0:	4649      	mov	r1, r9
 8014ed2:	4638      	mov	r0, r7
 8014ed4:	47c0      	blx	r8
 8014ed6:	3001      	adds	r0, #1
 8014ed8:	d0e6      	beq.n	8014ea8 <_printf_common+0xa4>
 8014eda:	3601      	adds	r6, #1
 8014edc:	e7d9      	b.n	8014e92 <_printf_common+0x8e>
	...

08014ee0 <_printf_i>:
 8014ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014ee4:	460c      	mov	r4, r1
 8014ee6:	4691      	mov	r9, r2
 8014ee8:	7e27      	ldrb	r7, [r4, #24]
 8014eea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014eec:	2f78      	cmp	r7, #120	; 0x78
 8014eee:	4680      	mov	r8, r0
 8014ef0:	469a      	mov	sl, r3
 8014ef2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014ef6:	d807      	bhi.n	8014f08 <_printf_i+0x28>
 8014ef8:	2f62      	cmp	r7, #98	; 0x62
 8014efa:	d80a      	bhi.n	8014f12 <_printf_i+0x32>
 8014efc:	2f00      	cmp	r7, #0
 8014efe:	f000 80d8 	beq.w	80150b2 <_printf_i+0x1d2>
 8014f02:	2f58      	cmp	r7, #88	; 0x58
 8014f04:	f000 80a3 	beq.w	801504e <_printf_i+0x16e>
 8014f08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014f0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014f10:	e03a      	b.n	8014f88 <_printf_i+0xa8>
 8014f12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014f16:	2b15      	cmp	r3, #21
 8014f18:	d8f6      	bhi.n	8014f08 <_printf_i+0x28>
 8014f1a:	a001      	add	r0, pc, #4	; (adr r0, 8014f20 <_printf_i+0x40>)
 8014f1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014f20:	08014f79 	.word	0x08014f79
 8014f24:	08014f8d 	.word	0x08014f8d
 8014f28:	08014f09 	.word	0x08014f09
 8014f2c:	08014f09 	.word	0x08014f09
 8014f30:	08014f09 	.word	0x08014f09
 8014f34:	08014f09 	.word	0x08014f09
 8014f38:	08014f8d 	.word	0x08014f8d
 8014f3c:	08014f09 	.word	0x08014f09
 8014f40:	08014f09 	.word	0x08014f09
 8014f44:	08014f09 	.word	0x08014f09
 8014f48:	08014f09 	.word	0x08014f09
 8014f4c:	08015099 	.word	0x08015099
 8014f50:	08014fbd 	.word	0x08014fbd
 8014f54:	0801507b 	.word	0x0801507b
 8014f58:	08014f09 	.word	0x08014f09
 8014f5c:	08014f09 	.word	0x08014f09
 8014f60:	080150bb 	.word	0x080150bb
 8014f64:	08014f09 	.word	0x08014f09
 8014f68:	08014fbd 	.word	0x08014fbd
 8014f6c:	08014f09 	.word	0x08014f09
 8014f70:	08014f09 	.word	0x08014f09
 8014f74:	08015083 	.word	0x08015083
 8014f78:	680b      	ldr	r3, [r1, #0]
 8014f7a:	1d1a      	adds	r2, r3, #4
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	600a      	str	r2, [r1, #0]
 8014f80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014f88:	2301      	movs	r3, #1
 8014f8a:	e0a3      	b.n	80150d4 <_printf_i+0x1f4>
 8014f8c:	6825      	ldr	r5, [r4, #0]
 8014f8e:	6808      	ldr	r0, [r1, #0]
 8014f90:	062e      	lsls	r6, r5, #24
 8014f92:	f100 0304 	add.w	r3, r0, #4
 8014f96:	d50a      	bpl.n	8014fae <_printf_i+0xce>
 8014f98:	6805      	ldr	r5, [r0, #0]
 8014f9a:	600b      	str	r3, [r1, #0]
 8014f9c:	2d00      	cmp	r5, #0
 8014f9e:	da03      	bge.n	8014fa8 <_printf_i+0xc8>
 8014fa0:	232d      	movs	r3, #45	; 0x2d
 8014fa2:	426d      	negs	r5, r5
 8014fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014fa8:	485e      	ldr	r0, [pc, #376]	; (8015124 <_printf_i+0x244>)
 8014faa:	230a      	movs	r3, #10
 8014fac:	e019      	b.n	8014fe2 <_printf_i+0x102>
 8014fae:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014fb2:	6805      	ldr	r5, [r0, #0]
 8014fb4:	600b      	str	r3, [r1, #0]
 8014fb6:	bf18      	it	ne
 8014fb8:	b22d      	sxthne	r5, r5
 8014fba:	e7ef      	b.n	8014f9c <_printf_i+0xbc>
 8014fbc:	680b      	ldr	r3, [r1, #0]
 8014fbe:	6825      	ldr	r5, [r4, #0]
 8014fc0:	1d18      	adds	r0, r3, #4
 8014fc2:	6008      	str	r0, [r1, #0]
 8014fc4:	0628      	lsls	r0, r5, #24
 8014fc6:	d501      	bpl.n	8014fcc <_printf_i+0xec>
 8014fc8:	681d      	ldr	r5, [r3, #0]
 8014fca:	e002      	b.n	8014fd2 <_printf_i+0xf2>
 8014fcc:	0669      	lsls	r1, r5, #25
 8014fce:	d5fb      	bpl.n	8014fc8 <_printf_i+0xe8>
 8014fd0:	881d      	ldrh	r5, [r3, #0]
 8014fd2:	4854      	ldr	r0, [pc, #336]	; (8015124 <_printf_i+0x244>)
 8014fd4:	2f6f      	cmp	r7, #111	; 0x6f
 8014fd6:	bf0c      	ite	eq
 8014fd8:	2308      	moveq	r3, #8
 8014fda:	230a      	movne	r3, #10
 8014fdc:	2100      	movs	r1, #0
 8014fde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014fe2:	6866      	ldr	r6, [r4, #4]
 8014fe4:	60a6      	str	r6, [r4, #8]
 8014fe6:	2e00      	cmp	r6, #0
 8014fe8:	bfa2      	ittt	ge
 8014fea:	6821      	ldrge	r1, [r4, #0]
 8014fec:	f021 0104 	bicge.w	r1, r1, #4
 8014ff0:	6021      	strge	r1, [r4, #0]
 8014ff2:	b90d      	cbnz	r5, 8014ff8 <_printf_i+0x118>
 8014ff4:	2e00      	cmp	r6, #0
 8014ff6:	d04d      	beq.n	8015094 <_printf_i+0x1b4>
 8014ff8:	4616      	mov	r6, r2
 8014ffa:	fbb5 f1f3 	udiv	r1, r5, r3
 8014ffe:	fb03 5711 	mls	r7, r3, r1, r5
 8015002:	5dc7      	ldrb	r7, [r0, r7]
 8015004:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015008:	462f      	mov	r7, r5
 801500a:	42bb      	cmp	r3, r7
 801500c:	460d      	mov	r5, r1
 801500e:	d9f4      	bls.n	8014ffa <_printf_i+0x11a>
 8015010:	2b08      	cmp	r3, #8
 8015012:	d10b      	bne.n	801502c <_printf_i+0x14c>
 8015014:	6823      	ldr	r3, [r4, #0]
 8015016:	07df      	lsls	r7, r3, #31
 8015018:	d508      	bpl.n	801502c <_printf_i+0x14c>
 801501a:	6923      	ldr	r3, [r4, #16]
 801501c:	6861      	ldr	r1, [r4, #4]
 801501e:	4299      	cmp	r1, r3
 8015020:	bfde      	ittt	le
 8015022:	2330      	movle	r3, #48	; 0x30
 8015024:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015028:	f106 36ff 	addle.w	r6, r6, #4294967295
 801502c:	1b92      	subs	r2, r2, r6
 801502e:	6122      	str	r2, [r4, #16]
 8015030:	f8cd a000 	str.w	sl, [sp]
 8015034:	464b      	mov	r3, r9
 8015036:	aa03      	add	r2, sp, #12
 8015038:	4621      	mov	r1, r4
 801503a:	4640      	mov	r0, r8
 801503c:	f7ff fee2 	bl	8014e04 <_printf_common>
 8015040:	3001      	adds	r0, #1
 8015042:	d14c      	bne.n	80150de <_printf_i+0x1fe>
 8015044:	f04f 30ff 	mov.w	r0, #4294967295
 8015048:	b004      	add	sp, #16
 801504a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801504e:	4835      	ldr	r0, [pc, #212]	; (8015124 <_printf_i+0x244>)
 8015050:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015054:	6823      	ldr	r3, [r4, #0]
 8015056:	680e      	ldr	r6, [r1, #0]
 8015058:	061f      	lsls	r7, r3, #24
 801505a:	f856 5b04 	ldr.w	r5, [r6], #4
 801505e:	600e      	str	r6, [r1, #0]
 8015060:	d514      	bpl.n	801508c <_printf_i+0x1ac>
 8015062:	07d9      	lsls	r1, r3, #31
 8015064:	bf44      	itt	mi
 8015066:	f043 0320 	orrmi.w	r3, r3, #32
 801506a:	6023      	strmi	r3, [r4, #0]
 801506c:	b91d      	cbnz	r5, 8015076 <_printf_i+0x196>
 801506e:	6823      	ldr	r3, [r4, #0]
 8015070:	f023 0320 	bic.w	r3, r3, #32
 8015074:	6023      	str	r3, [r4, #0]
 8015076:	2310      	movs	r3, #16
 8015078:	e7b0      	b.n	8014fdc <_printf_i+0xfc>
 801507a:	6823      	ldr	r3, [r4, #0]
 801507c:	f043 0320 	orr.w	r3, r3, #32
 8015080:	6023      	str	r3, [r4, #0]
 8015082:	2378      	movs	r3, #120	; 0x78
 8015084:	4828      	ldr	r0, [pc, #160]	; (8015128 <_printf_i+0x248>)
 8015086:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801508a:	e7e3      	b.n	8015054 <_printf_i+0x174>
 801508c:	065e      	lsls	r6, r3, #25
 801508e:	bf48      	it	mi
 8015090:	b2ad      	uxthmi	r5, r5
 8015092:	e7e6      	b.n	8015062 <_printf_i+0x182>
 8015094:	4616      	mov	r6, r2
 8015096:	e7bb      	b.n	8015010 <_printf_i+0x130>
 8015098:	680b      	ldr	r3, [r1, #0]
 801509a:	6826      	ldr	r6, [r4, #0]
 801509c:	6960      	ldr	r0, [r4, #20]
 801509e:	1d1d      	adds	r5, r3, #4
 80150a0:	600d      	str	r5, [r1, #0]
 80150a2:	0635      	lsls	r5, r6, #24
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	d501      	bpl.n	80150ac <_printf_i+0x1cc>
 80150a8:	6018      	str	r0, [r3, #0]
 80150aa:	e002      	b.n	80150b2 <_printf_i+0x1d2>
 80150ac:	0671      	lsls	r1, r6, #25
 80150ae:	d5fb      	bpl.n	80150a8 <_printf_i+0x1c8>
 80150b0:	8018      	strh	r0, [r3, #0]
 80150b2:	2300      	movs	r3, #0
 80150b4:	6123      	str	r3, [r4, #16]
 80150b6:	4616      	mov	r6, r2
 80150b8:	e7ba      	b.n	8015030 <_printf_i+0x150>
 80150ba:	680b      	ldr	r3, [r1, #0]
 80150bc:	1d1a      	adds	r2, r3, #4
 80150be:	600a      	str	r2, [r1, #0]
 80150c0:	681e      	ldr	r6, [r3, #0]
 80150c2:	6862      	ldr	r2, [r4, #4]
 80150c4:	2100      	movs	r1, #0
 80150c6:	4630      	mov	r0, r6
 80150c8:	f7ef f88a 	bl	80041e0 <memchr>
 80150cc:	b108      	cbz	r0, 80150d2 <_printf_i+0x1f2>
 80150ce:	1b80      	subs	r0, r0, r6
 80150d0:	6060      	str	r0, [r4, #4]
 80150d2:	6863      	ldr	r3, [r4, #4]
 80150d4:	6123      	str	r3, [r4, #16]
 80150d6:	2300      	movs	r3, #0
 80150d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80150dc:	e7a8      	b.n	8015030 <_printf_i+0x150>
 80150de:	6923      	ldr	r3, [r4, #16]
 80150e0:	4632      	mov	r2, r6
 80150e2:	4649      	mov	r1, r9
 80150e4:	4640      	mov	r0, r8
 80150e6:	47d0      	blx	sl
 80150e8:	3001      	adds	r0, #1
 80150ea:	d0ab      	beq.n	8015044 <_printf_i+0x164>
 80150ec:	6823      	ldr	r3, [r4, #0]
 80150ee:	079b      	lsls	r3, r3, #30
 80150f0:	d413      	bmi.n	801511a <_printf_i+0x23a>
 80150f2:	68e0      	ldr	r0, [r4, #12]
 80150f4:	9b03      	ldr	r3, [sp, #12]
 80150f6:	4298      	cmp	r0, r3
 80150f8:	bfb8      	it	lt
 80150fa:	4618      	movlt	r0, r3
 80150fc:	e7a4      	b.n	8015048 <_printf_i+0x168>
 80150fe:	2301      	movs	r3, #1
 8015100:	4632      	mov	r2, r6
 8015102:	4649      	mov	r1, r9
 8015104:	4640      	mov	r0, r8
 8015106:	47d0      	blx	sl
 8015108:	3001      	adds	r0, #1
 801510a:	d09b      	beq.n	8015044 <_printf_i+0x164>
 801510c:	3501      	adds	r5, #1
 801510e:	68e3      	ldr	r3, [r4, #12]
 8015110:	9903      	ldr	r1, [sp, #12]
 8015112:	1a5b      	subs	r3, r3, r1
 8015114:	42ab      	cmp	r3, r5
 8015116:	dcf2      	bgt.n	80150fe <_printf_i+0x21e>
 8015118:	e7eb      	b.n	80150f2 <_printf_i+0x212>
 801511a:	2500      	movs	r5, #0
 801511c:	f104 0619 	add.w	r6, r4, #25
 8015120:	e7f5      	b.n	801510e <_printf_i+0x22e>
 8015122:	bf00      	nop
 8015124:	08017fad 	.word	0x08017fad
 8015128:	08017fbe 	.word	0x08017fbe

0801512c <_sbrk_r>:
 801512c:	b538      	push	{r3, r4, r5, lr}
 801512e:	4d06      	ldr	r5, [pc, #24]	; (8015148 <_sbrk_r+0x1c>)
 8015130:	2300      	movs	r3, #0
 8015132:	4604      	mov	r4, r0
 8015134:	4608      	mov	r0, r1
 8015136:	602b      	str	r3, [r5, #0]
 8015138:	f7ef fc7e 	bl	8004a38 <_sbrk>
 801513c:	1c43      	adds	r3, r0, #1
 801513e:	d102      	bne.n	8015146 <_sbrk_r+0x1a>
 8015140:	682b      	ldr	r3, [r5, #0]
 8015142:	b103      	cbz	r3, 8015146 <_sbrk_r+0x1a>
 8015144:	6023      	str	r3, [r4, #0]
 8015146:	bd38      	pop	{r3, r4, r5, pc}
 8015148:	20007fb8 	.word	0x20007fb8

0801514c <__sread>:
 801514c:	b510      	push	{r4, lr}
 801514e:	460c      	mov	r4, r1
 8015150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015154:	f000 f8a8 	bl	80152a8 <_read_r>
 8015158:	2800      	cmp	r0, #0
 801515a:	bfab      	itete	ge
 801515c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801515e:	89a3      	ldrhlt	r3, [r4, #12]
 8015160:	181b      	addge	r3, r3, r0
 8015162:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015166:	bfac      	ite	ge
 8015168:	6563      	strge	r3, [r4, #84]	; 0x54
 801516a:	81a3      	strhlt	r3, [r4, #12]
 801516c:	bd10      	pop	{r4, pc}

0801516e <__swrite>:
 801516e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015172:	461f      	mov	r7, r3
 8015174:	898b      	ldrh	r3, [r1, #12]
 8015176:	05db      	lsls	r3, r3, #23
 8015178:	4605      	mov	r5, r0
 801517a:	460c      	mov	r4, r1
 801517c:	4616      	mov	r6, r2
 801517e:	d505      	bpl.n	801518c <__swrite+0x1e>
 8015180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015184:	2302      	movs	r3, #2
 8015186:	2200      	movs	r2, #0
 8015188:	f000 f870 	bl	801526c <_lseek_r>
 801518c:	89a3      	ldrh	r3, [r4, #12]
 801518e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015196:	81a3      	strh	r3, [r4, #12]
 8015198:	4632      	mov	r2, r6
 801519a:	463b      	mov	r3, r7
 801519c:	4628      	mov	r0, r5
 801519e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80151a2:	f000 b817 	b.w	80151d4 <_write_r>

080151a6 <__sseek>:
 80151a6:	b510      	push	{r4, lr}
 80151a8:	460c      	mov	r4, r1
 80151aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151ae:	f000 f85d 	bl	801526c <_lseek_r>
 80151b2:	1c43      	adds	r3, r0, #1
 80151b4:	89a3      	ldrh	r3, [r4, #12]
 80151b6:	bf15      	itete	ne
 80151b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80151ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80151be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80151c2:	81a3      	strheq	r3, [r4, #12]
 80151c4:	bf18      	it	ne
 80151c6:	81a3      	strhne	r3, [r4, #12]
 80151c8:	bd10      	pop	{r4, pc}

080151ca <__sclose>:
 80151ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151ce:	f000 b81b 	b.w	8015208 <_close_r>
	...

080151d4 <_write_r>:
 80151d4:	b538      	push	{r3, r4, r5, lr}
 80151d6:	4d07      	ldr	r5, [pc, #28]	; (80151f4 <_write_r+0x20>)
 80151d8:	4604      	mov	r4, r0
 80151da:	4608      	mov	r0, r1
 80151dc:	4611      	mov	r1, r2
 80151de:	2200      	movs	r2, #0
 80151e0:	602a      	str	r2, [r5, #0]
 80151e2:	461a      	mov	r2, r3
 80151e4:	f7ef fc0e 	bl	8004a04 <_write>
 80151e8:	1c43      	adds	r3, r0, #1
 80151ea:	d102      	bne.n	80151f2 <_write_r+0x1e>
 80151ec:	682b      	ldr	r3, [r5, #0]
 80151ee:	b103      	cbz	r3, 80151f2 <_write_r+0x1e>
 80151f0:	6023      	str	r3, [r4, #0]
 80151f2:	bd38      	pop	{r3, r4, r5, pc}
 80151f4:	20007fb8 	.word	0x20007fb8

080151f8 <abort>:
 80151f8:	b508      	push	{r3, lr}
 80151fa:	2006      	movs	r0, #6
 80151fc:	f000 f88e 	bl	801531c <raise>
 8015200:	2001      	movs	r0, #1
 8015202:	f7ef fbe9 	bl	80049d8 <_exit>
	...

08015208 <_close_r>:
 8015208:	b538      	push	{r3, r4, r5, lr}
 801520a:	4d06      	ldr	r5, [pc, #24]	; (8015224 <_close_r+0x1c>)
 801520c:	2300      	movs	r3, #0
 801520e:	4604      	mov	r4, r0
 8015210:	4608      	mov	r0, r1
 8015212:	602b      	str	r3, [r5, #0]
 8015214:	f7ef fc04 	bl	8004a20 <_close>
 8015218:	1c43      	adds	r3, r0, #1
 801521a:	d102      	bne.n	8015222 <_close_r+0x1a>
 801521c:	682b      	ldr	r3, [r5, #0]
 801521e:	b103      	cbz	r3, 8015222 <_close_r+0x1a>
 8015220:	6023      	str	r3, [r4, #0]
 8015222:	bd38      	pop	{r3, r4, r5, pc}
 8015224:	20007fb8 	.word	0x20007fb8

08015228 <_fstat_r>:
 8015228:	b538      	push	{r3, r4, r5, lr}
 801522a:	4d07      	ldr	r5, [pc, #28]	; (8015248 <_fstat_r+0x20>)
 801522c:	2300      	movs	r3, #0
 801522e:	4604      	mov	r4, r0
 8015230:	4608      	mov	r0, r1
 8015232:	4611      	mov	r1, r2
 8015234:	602b      	str	r3, [r5, #0]
 8015236:	f7ef fbf6 	bl	8004a26 <_fstat>
 801523a:	1c43      	adds	r3, r0, #1
 801523c:	d102      	bne.n	8015244 <_fstat_r+0x1c>
 801523e:	682b      	ldr	r3, [r5, #0]
 8015240:	b103      	cbz	r3, 8015244 <_fstat_r+0x1c>
 8015242:	6023      	str	r3, [r4, #0]
 8015244:	bd38      	pop	{r3, r4, r5, pc}
 8015246:	bf00      	nop
 8015248:	20007fb8 	.word	0x20007fb8

0801524c <_isatty_r>:
 801524c:	b538      	push	{r3, r4, r5, lr}
 801524e:	4d06      	ldr	r5, [pc, #24]	; (8015268 <_isatty_r+0x1c>)
 8015250:	2300      	movs	r3, #0
 8015252:	4604      	mov	r4, r0
 8015254:	4608      	mov	r0, r1
 8015256:	602b      	str	r3, [r5, #0]
 8015258:	f7ef fbea 	bl	8004a30 <_isatty>
 801525c:	1c43      	adds	r3, r0, #1
 801525e:	d102      	bne.n	8015266 <_isatty_r+0x1a>
 8015260:	682b      	ldr	r3, [r5, #0]
 8015262:	b103      	cbz	r3, 8015266 <_isatty_r+0x1a>
 8015264:	6023      	str	r3, [r4, #0]
 8015266:	bd38      	pop	{r3, r4, r5, pc}
 8015268:	20007fb8 	.word	0x20007fb8

0801526c <_lseek_r>:
 801526c:	b538      	push	{r3, r4, r5, lr}
 801526e:	4d07      	ldr	r5, [pc, #28]	; (801528c <_lseek_r+0x20>)
 8015270:	4604      	mov	r4, r0
 8015272:	4608      	mov	r0, r1
 8015274:	4611      	mov	r1, r2
 8015276:	2200      	movs	r2, #0
 8015278:	602a      	str	r2, [r5, #0]
 801527a:	461a      	mov	r2, r3
 801527c:	f7ef fbda 	bl	8004a34 <_lseek>
 8015280:	1c43      	adds	r3, r0, #1
 8015282:	d102      	bne.n	801528a <_lseek_r+0x1e>
 8015284:	682b      	ldr	r3, [r5, #0]
 8015286:	b103      	cbz	r3, 801528a <_lseek_r+0x1e>
 8015288:	6023      	str	r3, [r4, #0]
 801528a:	bd38      	pop	{r3, r4, r5, pc}
 801528c:	20007fb8 	.word	0x20007fb8

08015290 <__malloc_lock>:
 8015290:	4801      	ldr	r0, [pc, #4]	; (8015298 <__malloc_lock+0x8>)
 8015292:	f7ff bb45 	b.w	8014920 <__retarget_lock_acquire_recursive>
 8015296:	bf00      	nop
 8015298:	20007fc0 	.word	0x20007fc0

0801529c <__malloc_unlock>:
 801529c:	4801      	ldr	r0, [pc, #4]	; (80152a4 <__malloc_unlock+0x8>)
 801529e:	f7ff bb40 	b.w	8014922 <__retarget_lock_release_recursive>
 80152a2:	bf00      	nop
 80152a4:	20007fc0 	.word	0x20007fc0

080152a8 <_read_r>:
 80152a8:	b538      	push	{r3, r4, r5, lr}
 80152aa:	4d07      	ldr	r5, [pc, #28]	; (80152c8 <_read_r+0x20>)
 80152ac:	4604      	mov	r4, r0
 80152ae:	4608      	mov	r0, r1
 80152b0:	4611      	mov	r1, r2
 80152b2:	2200      	movs	r2, #0
 80152b4:	602a      	str	r2, [r5, #0]
 80152b6:	461a      	mov	r2, r3
 80152b8:	f7ef fb94 	bl	80049e4 <_read>
 80152bc:	1c43      	adds	r3, r0, #1
 80152be:	d102      	bne.n	80152c6 <_read_r+0x1e>
 80152c0:	682b      	ldr	r3, [r5, #0]
 80152c2:	b103      	cbz	r3, 80152c6 <_read_r+0x1e>
 80152c4:	6023      	str	r3, [r4, #0]
 80152c6:	bd38      	pop	{r3, r4, r5, pc}
 80152c8:	20007fb8 	.word	0x20007fb8

080152cc <_raise_r>:
 80152cc:	291f      	cmp	r1, #31
 80152ce:	b538      	push	{r3, r4, r5, lr}
 80152d0:	4604      	mov	r4, r0
 80152d2:	460d      	mov	r5, r1
 80152d4:	d904      	bls.n	80152e0 <_raise_r+0x14>
 80152d6:	2316      	movs	r3, #22
 80152d8:	6003      	str	r3, [r0, #0]
 80152da:	f04f 30ff 	mov.w	r0, #4294967295
 80152de:	bd38      	pop	{r3, r4, r5, pc}
 80152e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80152e2:	b112      	cbz	r2, 80152ea <_raise_r+0x1e>
 80152e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80152e8:	b94b      	cbnz	r3, 80152fe <_raise_r+0x32>
 80152ea:	4620      	mov	r0, r4
 80152ec:	f000 f830 	bl	8015350 <_getpid_r>
 80152f0:	462a      	mov	r2, r5
 80152f2:	4601      	mov	r1, r0
 80152f4:	4620      	mov	r0, r4
 80152f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80152fa:	f000 b817 	b.w	801532c <_kill_r>
 80152fe:	2b01      	cmp	r3, #1
 8015300:	d00a      	beq.n	8015318 <_raise_r+0x4c>
 8015302:	1c59      	adds	r1, r3, #1
 8015304:	d103      	bne.n	801530e <_raise_r+0x42>
 8015306:	2316      	movs	r3, #22
 8015308:	6003      	str	r3, [r0, #0]
 801530a:	2001      	movs	r0, #1
 801530c:	e7e7      	b.n	80152de <_raise_r+0x12>
 801530e:	2400      	movs	r4, #0
 8015310:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015314:	4628      	mov	r0, r5
 8015316:	4798      	blx	r3
 8015318:	2000      	movs	r0, #0
 801531a:	e7e0      	b.n	80152de <_raise_r+0x12>

0801531c <raise>:
 801531c:	4b02      	ldr	r3, [pc, #8]	; (8015328 <raise+0xc>)
 801531e:	4601      	mov	r1, r0
 8015320:	6818      	ldr	r0, [r3, #0]
 8015322:	f7ff bfd3 	b.w	80152cc <_raise_r>
 8015326:	bf00      	nop
 8015328:	2000001c 	.word	0x2000001c

0801532c <_kill_r>:
 801532c:	b538      	push	{r3, r4, r5, lr}
 801532e:	4d07      	ldr	r5, [pc, #28]	; (801534c <_kill_r+0x20>)
 8015330:	2300      	movs	r3, #0
 8015332:	4604      	mov	r4, r0
 8015334:	4608      	mov	r0, r1
 8015336:	4611      	mov	r1, r2
 8015338:	602b      	str	r3, [r5, #0]
 801533a:	f7ef fb45 	bl	80049c8 <_kill>
 801533e:	1c43      	adds	r3, r0, #1
 8015340:	d102      	bne.n	8015348 <_kill_r+0x1c>
 8015342:	682b      	ldr	r3, [r5, #0]
 8015344:	b103      	cbz	r3, 8015348 <_kill_r+0x1c>
 8015346:	6023      	str	r3, [r4, #0]
 8015348:	bd38      	pop	{r3, r4, r5, pc}
 801534a:	bf00      	nop
 801534c:	20007fb8 	.word	0x20007fb8

08015350 <_getpid_r>:
 8015350:	f7ef bb38 	b.w	80049c4 <_getpid>

08015354 <_init>:
 8015354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015356:	bf00      	nop
 8015358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801535a:	bc08      	pop	{r3}
 801535c:	469e      	mov	lr, r3
 801535e:	4770      	bx	lr

08015360 <_fini>:
 8015360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015362:	bf00      	nop
 8015364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015366:	bc08      	pop	{r3}
 8015368:	469e      	mov	lr, r3
 801536a:	4770      	bx	lr
