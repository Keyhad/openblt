
demoprog_discovery_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012978  08004190  08004190  00004190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000040c8  08016b08  08016b08  00016b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801abd0  0801abd0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0801abd0  0801abd0  0001abd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801abd8  0801abd8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801abd8  0801abd8  0001abd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801abdc  0801abdc  0001abdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801abe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000083d4  20000080  0801ac60  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008454  0801ac60  00028454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00059a3c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009f26  00000000  00000000  00079aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  00083a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021f0  00000000  00000000  00085328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036f62  00000000  00000000  00087518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00045b93  00000000  00000000  000be47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6b44  00000000  00000000  0010400d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fab51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005420  00000000  00000000  001faba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0001fd24  00000000  00000000  001fffc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004190 <__do_global_dtors_aux>:
 8004190:	b510      	push	{r4, lr}
 8004192:	4c05      	ldr	r4, [pc, #20]	; (80041a8 <__do_global_dtors_aux+0x18>)
 8004194:	7823      	ldrb	r3, [r4, #0]
 8004196:	b933      	cbnz	r3, 80041a6 <__do_global_dtors_aux+0x16>
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <__do_global_dtors_aux+0x1c>)
 800419a:	b113      	cbz	r3, 80041a2 <__do_global_dtors_aux+0x12>
 800419c:	4804      	ldr	r0, [pc, #16]	; (80041b0 <__do_global_dtors_aux+0x20>)
 800419e:	f3af 8000 	nop.w
 80041a2:	2301      	movs	r3, #1
 80041a4:	7023      	strb	r3, [r4, #0]
 80041a6:	bd10      	pop	{r4, pc}
 80041a8:	20000080 	.word	0x20000080
 80041ac:	00000000 	.word	0x00000000
 80041b0:	08016af0 	.word	0x08016af0

080041b4 <frame_dummy>:
 80041b4:	b508      	push	{r3, lr}
 80041b6:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <frame_dummy+0x10>)
 80041b8:	b11b      	cbz	r3, 80041c2 <frame_dummy+0xe>
 80041ba:	4903      	ldr	r1, [pc, #12]	; (80041c8 <frame_dummy+0x14>)
 80041bc:	4803      	ldr	r0, [pc, #12]	; (80041cc <frame_dummy+0x18>)
 80041be:	f3af 8000 	nop.w
 80041c2:	bd08      	pop	{r3, pc}
 80041c4:	00000000 	.word	0x00000000
 80041c8:	20000084 	.word	0x20000084
 80041cc:	08016af0 	.word	0x08016af0

080041d0 <strcmp>:
 80041d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041d8:	2a01      	cmp	r2, #1
 80041da:	bf28      	it	cs
 80041dc:	429a      	cmpcs	r2, r3
 80041de:	d0f7      	beq.n	80041d0 <strcmp>
 80041e0:	1ad0      	subs	r0, r2, r3
 80041e2:	4770      	bx	lr

080041e4 <strlen>:
 80041e4:	4603      	mov	r3, r0
 80041e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041ea:	2a00      	cmp	r2, #0
 80041ec:	d1fb      	bne.n	80041e6 <strlen+0x2>
 80041ee:	1a18      	subs	r0, r3, r0
 80041f0:	3801      	subs	r0, #1
 80041f2:	4770      	bx	lr
	...

08004200 <memchr>:
 8004200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8004204:	2a10      	cmp	r2, #16
 8004206:	db2b      	blt.n	8004260 <memchr+0x60>
 8004208:	f010 0f07 	tst.w	r0, #7
 800420c:	d008      	beq.n	8004220 <memchr+0x20>
 800420e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004212:	3a01      	subs	r2, #1
 8004214:	428b      	cmp	r3, r1
 8004216:	d02d      	beq.n	8004274 <memchr+0x74>
 8004218:	f010 0f07 	tst.w	r0, #7
 800421c:	b342      	cbz	r2, 8004270 <memchr+0x70>
 800421e:	d1f6      	bne.n	800420e <memchr+0xe>
 8004220:	b4f0      	push	{r4, r5, r6, r7}
 8004222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8004226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800422a:	f022 0407 	bic.w	r4, r2, #7
 800422e:	f07f 0700 	mvns.w	r7, #0
 8004232:	2300      	movs	r3, #0
 8004234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004238:	3c08      	subs	r4, #8
 800423a:	ea85 0501 	eor.w	r5, r5, r1
 800423e:	ea86 0601 	eor.w	r6, r6, r1
 8004242:	fa85 f547 	uadd8	r5, r5, r7
 8004246:	faa3 f587 	sel	r5, r3, r7
 800424a:	fa86 f647 	uadd8	r6, r6, r7
 800424e:	faa5 f687 	sel	r6, r5, r7
 8004252:	b98e      	cbnz	r6, 8004278 <memchr+0x78>
 8004254:	d1ee      	bne.n	8004234 <memchr+0x34>
 8004256:	bcf0      	pop	{r4, r5, r6, r7}
 8004258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800425c:	f002 0207 	and.w	r2, r2, #7
 8004260:	b132      	cbz	r2, 8004270 <memchr+0x70>
 8004262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004266:	3a01      	subs	r2, #1
 8004268:	ea83 0301 	eor.w	r3, r3, r1
 800426c:	b113      	cbz	r3, 8004274 <memchr+0x74>
 800426e:	d1f8      	bne.n	8004262 <memchr+0x62>
 8004270:	2000      	movs	r0, #0
 8004272:	4770      	bx	lr
 8004274:	3801      	subs	r0, #1
 8004276:	4770      	bx	lr
 8004278:	2d00      	cmp	r5, #0
 800427a:	bf06      	itte	eq
 800427c:	4635      	moveq	r5, r6
 800427e:	3803      	subeq	r0, #3
 8004280:	3807      	subne	r0, #7
 8004282:	f015 0f01 	tst.w	r5, #1
 8004286:	d107      	bne.n	8004298 <memchr+0x98>
 8004288:	3001      	adds	r0, #1
 800428a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800428e:	bf02      	ittt	eq
 8004290:	3001      	addeq	r0, #1
 8004292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004296:	3001      	addeq	r0, #1
 8004298:	bcf0      	pop	{r4, r5, r6, r7}
 800429a:	3801      	subs	r0, #1
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop

080042a0 <__aeabi_uldivmod>:
 80042a0:	b953      	cbnz	r3, 80042b8 <__aeabi_uldivmod+0x18>
 80042a2:	b94a      	cbnz	r2, 80042b8 <__aeabi_uldivmod+0x18>
 80042a4:	2900      	cmp	r1, #0
 80042a6:	bf08      	it	eq
 80042a8:	2800      	cmpeq	r0, #0
 80042aa:	bf1c      	itt	ne
 80042ac:	f04f 31ff 	movne.w	r1, #4294967295
 80042b0:	f04f 30ff 	movne.w	r0, #4294967295
 80042b4:	f000 b96e 	b.w	8004594 <__aeabi_idiv0>
 80042b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80042bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80042c0:	f000 f806 	bl	80042d0 <__udivmoddi4>
 80042c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80042c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042cc:	b004      	add	sp, #16
 80042ce:	4770      	bx	lr

080042d0 <__udivmoddi4>:
 80042d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042d4:	9d08      	ldr	r5, [sp, #32]
 80042d6:	4604      	mov	r4, r0
 80042d8:	468c      	mov	ip, r1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f040 8083 	bne.w	80043e6 <__udivmoddi4+0x116>
 80042e0:	428a      	cmp	r2, r1
 80042e2:	4617      	mov	r7, r2
 80042e4:	d947      	bls.n	8004376 <__udivmoddi4+0xa6>
 80042e6:	fab2 f282 	clz	r2, r2
 80042ea:	b142      	cbz	r2, 80042fe <__udivmoddi4+0x2e>
 80042ec:	f1c2 0020 	rsb	r0, r2, #32
 80042f0:	fa24 f000 	lsr.w	r0, r4, r0
 80042f4:	4091      	lsls	r1, r2
 80042f6:	4097      	lsls	r7, r2
 80042f8:	ea40 0c01 	orr.w	ip, r0, r1
 80042fc:	4094      	lsls	r4, r2
 80042fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8004302:	0c23      	lsrs	r3, r4, #16
 8004304:	fbbc f6f8 	udiv	r6, ip, r8
 8004308:	fa1f fe87 	uxth.w	lr, r7
 800430c:	fb08 c116 	mls	r1, r8, r6, ip
 8004310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004314:	fb06 f10e 	mul.w	r1, r6, lr
 8004318:	4299      	cmp	r1, r3
 800431a:	d909      	bls.n	8004330 <__udivmoddi4+0x60>
 800431c:	18fb      	adds	r3, r7, r3
 800431e:	f106 30ff 	add.w	r0, r6, #4294967295
 8004322:	f080 8119 	bcs.w	8004558 <__udivmoddi4+0x288>
 8004326:	4299      	cmp	r1, r3
 8004328:	f240 8116 	bls.w	8004558 <__udivmoddi4+0x288>
 800432c:	3e02      	subs	r6, #2
 800432e:	443b      	add	r3, r7
 8004330:	1a5b      	subs	r3, r3, r1
 8004332:	b2a4      	uxth	r4, r4
 8004334:	fbb3 f0f8 	udiv	r0, r3, r8
 8004338:	fb08 3310 	mls	r3, r8, r0, r3
 800433c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004340:	fb00 fe0e 	mul.w	lr, r0, lr
 8004344:	45a6      	cmp	lr, r4
 8004346:	d909      	bls.n	800435c <__udivmoddi4+0x8c>
 8004348:	193c      	adds	r4, r7, r4
 800434a:	f100 33ff 	add.w	r3, r0, #4294967295
 800434e:	f080 8105 	bcs.w	800455c <__udivmoddi4+0x28c>
 8004352:	45a6      	cmp	lr, r4
 8004354:	f240 8102 	bls.w	800455c <__udivmoddi4+0x28c>
 8004358:	3802      	subs	r0, #2
 800435a:	443c      	add	r4, r7
 800435c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004360:	eba4 040e 	sub.w	r4, r4, lr
 8004364:	2600      	movs	r6, #0
 8004366:	b11d      	cbz	r5, 8004370 <__udivmoddi4+0xa0>
 8004368:	40d4      	lsrs	r4, r2
 800436a:	2300      	movs	r3, #0
 800436c:	e9c5 4300 	strd	r4, r3, [r5]
 8004370:	4631      	mov	r1, r6
 8004372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004376:	b902      	cbnz	r2, 800437a <__udivmoddi4+0xaa>
 8004378:	deff      	udf	#255	; 0xff
 800437a:	fab2 f282 	clz	r2, r2
 800437e:	2a00      	cmp	r2, #0
 8004380:	d150      	bne.n	8004424 <__udivmoddi4+0x154>
 8004382:	1bcb      	subs	r3, r1, r7
 8004384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8004388:	fa1f f887 	uxth.w	r8, r7
 800438c:	2601      	movs	r6, #1
 800438e:	fbb3 fcfe 	udiv	ip, r3, lr
 8004392:	0c21      	lsrs	r1, r4, #16
 8004394:	fb0e 331c 	mls	r3, lr, ip, r3
 8004398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800439c:	fb08 f30c 	mul.w	r3, r8, ip
 80043a0:	428b      	cmp	r3, r1
 80043a2:	d907      	bls.n	80043b4 <__udivmoddi4+0xe4>
 80043a4:	1879      	adds	r1, r7, r1
 80043a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80043aa:	d202      	bcs.n	80043b2 <__udivmoddi4+0xe2>
 80043ac:	428b      	cmp	r3, r1
 80043ae:	f200 80e9 	bhi.w	8004584 <__udivmoddi4+0x2b4>
 80043b2:	4684      	mov	ip, r0
 80043b4:	1ac9      	subs	r1, r1, r3
 80043b6:	b2a3      	uxth	r3, r4
 80043b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80043bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80043c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80043c4:	fb08 f800 	mul.w	r8, r8, r0
 80043c8:	45a0      	cmp	r8, r4
 80043ca:	d907      	bls.n	80043dc <__udivmoddi4+0x10c>
 80043cc:	193c      	adds	r4, r7, r4
 80043ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80043d2:	d202      	bcs.n	80043da <__udivmoddi4+0x10a>
 80043d4:	45a0      	cmp	r8, r4
 80043d6:	f200 80d9 	bhi.w	800458c <__udivmoddi4+0x2bc>
 80043da:	4618      	mov	r0, r3
 80043dc:	eba4 0408 	sub.w	r4, r4, r8
 80043e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80043e4:	e7bf      	b.n	8004366 <__udivmoddi4+0x96>
 80043e6:	428b      	cmp	r3, r1
 80043e8:	d909      	bls.n	80043fe <__udivmoddi4+0x12e>
 80043ea:	2d00      	cmp	r5, #0
 80043ec:	f000 80b1 	beq.w	8004552 <__udivmoddi4+0x282>
 80043f0:	2600      	movs	r6, #0
 80043f2:	e9c5 0100 	strd	r0, r1, [r5]
 80043f6:	4630      	mov	r0, r6
 80043f8:	4631      	mov	r1, r6
 80043fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fe:	fab3 f683 	clz	r6, r3
 8004402:	2e00      	cmp	r6, #0
 8004404:	d14a      	bne.n	800449c <__udivmoddi4+0x1cc>
 8004406:	428b      	cmp	r3, r1
 8004408:	d302      	bcc.n	8004410 <__udivmoddi4+0x140>
 800440a:	4282      	cmp	r2, r0
 800440c:	f200 80b8 	bhi.w	8004580 <__udivmoddi4+0x2b0>
 8004410:	1a84      	subs	r4, r0, r2
 8004412:	eb61 0103 	sbc.w	r1, r1, r3
 8004416:	2001      	movs	r0, #1
 8004418:	468c      	mov	ip, r1
 800441a:	2d00      	cmp	r5, #0
 800441c:	d0a8      	beq.n	8004370 <__udivmoddi4+0xa0>
 800441e:	e9c5 4c00 	strd	r4, ip, [r5]
 8004422:	e7a5      	b.n	8004370 <__udivmoddi4+0xa0>
 8004424:	f1c2 0320 	rsb	r3, r2, #32
 8004428:	fa20 f603 	lsr.w	r6, r0, r3
 800442c:	4097      	lsls	r7, r2
 800442e:	fa01 f002 	lsl.w	r0, r1, r2
 8004432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8004436:	40d9      	lsrs	r1, r3
 8004438:	4330      	orrs	r0, r6
 800443a:	0c03      	lsrs	r3, r0, #16
 800443c:	fbb1 f6fe 	udiv	r6, r1, lr
 8004440:	fa1f f887 	uxth.w	r8, r7
 8004444:	fb0e 1116 	mls	r1, lr, r6, r1
 8004448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800444c:	fb06 f108 	mul.w	r1, r6, r8
 8004450:	4299      	cmp	r1, r3
 8004452:	fa04 f402 	lsl.w	r4, r4, r2
 8004456:	d909      	bls.n	800446c <__udivmoddi4+0x19c>
 8004458:	18fb      	adds	r3, r7, r3
 800445a:	f106 3cff 	add.w	ip, r6, #4294967295
 800445e:	f080 808d 	bcs.w	800457c <__udivmoddi4+0x2ac>
 8004462:	4299      	cmp	r1, r3
 8004464:	f240 808a 	bls.w	800457c <__udivmoddi4+0x2ac>
 8004468:	3e02      	subs	r6, #2
 800446a:	443b      	add	r3, r7
 800446c:	1a5b      	subs	r3, r3, r1
 800446e:	b281      	uxth	r1, r0
 8004470:	fbb3 f0fe 	udiv	r0, r3, lr
 8004474:	fb0e 3310 	mls	r3, lr, r0, r3
 8004478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800447c:	fb00 f308 	mul.w	r3, r0, r8
 8004480:	428b      	cmp	r3, r1
 8004482:	d907      	bls.n	8004494 <__udivmoddi4+0x1c4>
 8004484:	1879      	adds	r1, r7, r1
 8004486:	f100 3cff 	add.w	ip, r0, #4294967295
 800448a:	d273      	bcs.n	8004574 <__udivmoddi4+0x2a4>
 800448c:	428b      	cmp	r3, r1
 800448e:	d971      	bls.n	8004574 <__udivmoddi4+0x2a4>
 8004490:	3802      	subs	r0, #2
 8004492:	4439      	add	r1, r7
 8004494:	1acb      	subs	r3, r1, r3
 8004496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800449a:	e778      	b.n	800438e <__udivmoddi4+0xbe>
 800449c:	f1c6 0c20 	rsb	ip, r6, #32
 80044a0:	fa03 f406 	lsl.w	r4, r3, r6
 80044a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80044a8:	431c      	orrs	r4, r3
 80044aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80044ae:	fa01 f306 	lsl.w	r3, r1, r6
 80044b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80044b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80044ba:	431f      	orrs	r7, r3
 80044bc:	0c3b      	lsrs	r3, r7, #16
 80044be:	fbb1 f9fe 	udiv	r9, r1, lr
 80044c2:	fa1f f884 	uxth.w	r8, r4
 80044c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80044ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80044ce:	fb09 fa08 	mul.w	sl, r9, r8
 80044d2:	458a      	cmp	sl, r1
 80044d4:	fa02 f206 	lsl.w	r2, r2, r6
 80044d8:	fa00 f306 	lsl.w	r3, r0, r6
 80044dc:	d908      	bls.n	80044f0 <__udivmoddi4+0x220>
 80044de:	1861      	adds	r1, r4, r1
 80044e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80044e4:	d248      	bcs.n	8004578 <__udivmoddi4+0x2a8>
 80044e6:	458a      	cmp	sl, r1
 80044e8:	d946      	bls.n	8004578 <__udivmoddi4+0x2a8>
 80044ea:	f1a9 0902 	sub.w	r9, r9, #2
 80044ee:	4421      	add	r1, r4
 80044f0:	eba1 010a 	sub.w	r1, r1, sl
 80044f4:	b2bf      	uxth	r7, r7
 80044f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80044fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80044fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8004502:	fb00 f808 	mul.w	r8, r0, r8
 8004506:	45b8      	cmp	r8, r7
 8004508:	d907      	bls.n	800451a <__udivmoddi4+0x24a>
 800450a:	19e7      	adds	r7, r4, r7
 800450c:	f100 31ff 	add.w	r1, r0, #4294967295
 8004510:	d22e      	bcs.n	8004570 <__udivmoddi4+0x2a0>
 8004512:	45b8      	cmp	r8, r7
 8004514:	d92c      	bls.n	8004570 <__udivmoddi4+0x2a0>
 8004516:	3802      	subs	r0, #2
 8004518:	4427      	add	r7, r4
 800451a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800451e:	eba7 0708 	sub.w	r7, r7, r8
 8004522:	fba0 8902 	umull	r8, r9, r0, r2
 8004526:	454f      	cmp	r7, r9
 8004528:	46c6      	mov	lr, r8
 800452a:	4649      	mov	r1, r9
 800452c:	d31a      	bcc.n	8004564 <__udivmoddi4+0x294>
 800452e:	d017      	beq.n	8004560 <__udivmoddi4+0x290>
 8004530:	b15d      	cbz	r5, 800454a <__udivmoddi4+0x27a>
 8004532:	ebb3 020e 	subs.w	r2, r3, lr
 8004536:	eb67 0701 	sbc.w	r7, r7, r1
 800453a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800453e:	40f2      	lsrs	r2, r6
 8004540:	ea4c 0202 	orr.w	r2, ip, r2
 8004544:	40f7      	lsrs	r7, r6
 8004546:	e9c5 2700 	strd	r2, r7, [r5]
 800454a:	2600      	movs	r6, #0
 800454c:	4631      	mov	r1, r6
 800454e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004552:	462e      	mov	r6, r5
 8004554:	4628      	mov	r0, r5
 8004556:	e70b      	b.n	8004370 <__udivmoddi4+0xa0>
 8004558:	4606      	mov	r6, r0
 800455a:	e6e9      	b.n	8004330 <__udivmoddi4+0x60>
 800455c:	4618      	mov	r0, r3
 800455e:	e6fd      	b.n	800435c <__udivmoddi4+0x8c>
 8004560:	4543      	cmp	r3, r8
 8004562:	d2e5      	bcs.n	8004530 <__udivmoddi4+0x260>
 8004564:	ebb8 0e02 	subs.w	lr, r8, r2
 8004568:	eb69 0104 	sbc.w	r1, r9, r4
 800456c:	3801      	subs	r0, #1
 800456e:	e7df      	b.n	8004530 <__udivmoddi4+0x260>
 8004570:	4608      	mov	r0, r1
 8004572:	e7d2      	b.n	800451a <__udivmoddi4+0x24a>
 8004574:	4660      	mov	r0, ip
 8004576:	e78d      	b.n	8004494 <__udivmoddi4+0x1c4>
 8004578:	4681      	mov	r9, r0
 800457a:	e7b9      	b.n	80044f0 <__udivmoddi4+0x220>
 800457c:	4666      	mov	r6, ip
 800457e:	e775      	b.n	800446c <__udivmoddi4+0x19c>
 8004580:	4630      	mov	r0, r6
 8004582:	e74a      	b.n	800441a <__udivmoddi4+0x14a>
 8004584:	f1ac 0c02 	sub.w	ip, ip, #2
 8004588:	4439      	add	r1, r7
 800458a:	e713      	b.n	80043b4 <__udivmoddi4+0xe4>
 800458c:	3802      	subs	r0, #2
 800458e:	443c      	add	r4, r7
 8004590:	e724      	b.n	80043dc <__udivmoddi4+0x10c>
 8004592:	bf00      	nop

08004594 <__aeabi_idiv0>:
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop

08004598 <AppInit>:
**            software program initialization.
** \return    none.
**
****************************************************************************************/
void AppInit(void)
{
 8004598:	b508      	push	{r3, lr}
  /* Initialize the timer driver. */
  TimerInit();
 800459a:	f000 f889 	bl	80046b0 <TimerInit>
  /* Initialize the led driver. */
  LedInit();
 800459e:	f000 f82f 	bl	8004600 <LedInit>
  /* Http webserver Init */
  httpd_init();
 80045a2:	f002 fa51 	bl	8006a48 <httpd_init>
} /*** end of AppInit ***/
 80045a6:	bd08      	pop	{r3, pc}

080045a8 <AppTask>:
**            continuously in the program loop.
** \return    none.
**
****************************************************************************************/
void AppTask(void)
{
 80045a8:	b508      	push	{r3, lr}
  /* Toggle LED with a fixed frequency. */
  LedToggle();
 80045aa:	f000 f849 	bl	8004640 <LedToggle>
  /* check for bootloader activation request */
  BootComCheckActivationRequest();
 80045ae:	f000 f823 	bl	80045f8 <BootComCheckActivationRequest>
} /*** end of AppTask ***/
 80045b2:	bd08      	pop	{r3, pc}

080045b4 <BootActivate>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80045b4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80045b8:	4905      	ldr	r1, [pc, #20]	; (80045d0 <BootActivate+0x1c>)
 80045ba:	68ca      	ldr	r2, [r1, #12]
 80045bc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80045c0:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <BootActivate+0x20>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60cb      	str	r3, [r1, #12]
 80045c6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80045ca:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80045cc:	e7fd      	b.n	80045ca <BootActivate+0x16>
 80045ce:	bf00      	nop
 80045d0:	e000ed00 	.word	0xe000ed00
 80045d4:	05fa0004 	.word	0x05fa0004

080045d8 <BootComRs232CheckActivationRequest>:
**            bootloader should be activated and, if so, activates it.
** \return    none.
**
****************************************************************************************/
static void BootComRs232CheckActivationRequest(void)
{
 80045d8:	b508      	push	{r3, lr}
  static unsigned char xcpCtoReqPacket[BOOT_COM_RS232_RX_MAX_DATA+1];
  static unsigned char xcpCtoRxLength;

  if (Rs232ReceivePacket(xcpCtoReqPacket, &xcpCtoRxLength)) {
 80045da:	4b04      	ldr	r3, [pc, #16]	; (80045ec <BootComRs232CheckActivationRequest+0x14>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4904      	ldr	r1, [pc, #16]	; (80045f0 <BootComRs232CheckActivationRequest+0x18>)
 80045e0:	4804      	ldr	r0, [pc, #16]	; (80045f4 <BootComRs232CheckActivationRequest+0x1c>)
 80045e2:	4798      	blx	r3
 80045e4:	b900      	cbnz	r0, 80045e8 <BootComRs232CheckActivationRequest+0x10>
//         */
//        xcpCtoRxInProgress = 0;
//      }
//    }
//  }
} /*** end of BootComRs232CheckActivationRequest ***/
 80045e6:	bd08      	pop	{r3, pc}
    BootActivate();
 80045e8:	f7ff ffe4 	bl	80045b4 <BootActivate>
 80045ec:	08000194 	.word	0x08000194
 80045f0:	200000dd 	.word	0x200000dd
 80045f4:	2000009c 	.word	0x2000009c

080045f8 <BootComCheckActivationRequest>:
{
 80045f8:	b508      	push	{r3, lr}
  BootComRs232CheckActivationRequest();
 80045fa:	f7ff ffed 	bl	80045d8 <BootComRs232CheckActivationRequest>
} /*** end of BootComCheckActivationRequest ***/
 80045fe:	bd08      	pop	{r3, pc}

08004600 <LedInit>:
** \brief     Initializes the LED.
** \return    none.
**
****************************************************************************************/
void LedInit(void)
{
 8004600:	b510      	push	{r4, lr}
  /* Note that the initialization of the LED GPIO pin is done in HAL_MspInit(). All that
   * is left to do here is to make sure the LED is turned off after initialization.
   */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8004602:	2201      	movs	r2, #1
 8004604:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004608:	480b      	ldr	r0, [pc, #44]	; (8004638 <LedInit+0x38>)
 800460a:	f001 f93f 	bl	800588c <HAL_GPIO_WritePin>

  //SET_LED3_ORANGE(GPIO_PIN_SET);
  SET_LED4_GREEN(GPIO_PIN_SET);
 800460e:	4c0b      	ldr	r4, [pc, #44]	; (800463c <LedInit+0x3c>)
 8004610:	2201      	movs	r2, #1
 8004612:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004616:	4620      	mov	r0, r4
 8004618:	f001 f938 	bl	800588c <HAL_GPIO_WritePin>
  SET_LED5_RED(GPIO_PIN_SET);
 800461c:	2201      	movs	r2, #1
 800461e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004622:	4620      	mov	r0, r4
 8004624:	f001 f932 	bl	800588c <HAL_GPIO_WritePin>
  SET_LED6_BLUE(GPIO_PIN_SET);
 8004628:	2201      	movs	r2, #1
 800462a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800462e:	4620      	mov	r0, r4
 8004630:	f001 f92c 	bl	800588c <HAL_GPIO_WritePin>
} /*** end of LedInit ***/
 8004634:	bd10      	pop	{r4, pc}
 8004636:	bf00      	nop
 8004638:	40020800 	.word	0x40020800
 800463c:	40020c00 	.word	0x40020c00

08004640 <LedToggle>:
** \brief     Toggles the LED at a fixed time interval.
** \return    none.
**
****************************************************************************************/
void LedToggle(void)
{
 8004640:	b570      	push	{r4, r5, r6, lr}
  static unsigned char led_toggle_state = 0;
  static unsigned long timer_counter_last = 0;
  unsigned long timer_counter_now;

  /* check if toggle interval time passed */
  timer_counter_now = TimerGet();
 8004642:	f000 f836 	bl	80046b2 <TimerGet>
  if ( (timer_counter_now - timer_counter_last) < LED_TOGGLE_MS)
 8004646:	4b17      	ldr	r3, [pc, #92]	; (80046a4 <LedToggle+0x64>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	1ac3      	subs	r3, r0, r3
 800464c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004650:	d315      	bcc.n	800467e <LedToggle+0x3e>
 8004652:	4604      	mov	r4, r0
    /* not yet time to toggle */
    return;
  }

  /* determine toggle action */
  if (led_toggle_state == 0)
 8004654:	4b14      	ldr	r3, [pc, #80]	; (80046a8 <LedToggle+0x68>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	b993      	cbnz	r3, 8004680 <LedToggle+0x40>
  {
    led_toggle_state = 1;
 800465a:	2501      	movs	r5, #1
 800465c:	4b12      	ldr	r3, [pc, #72]	; (80046a8 <LedToggle+0x68>)
 800465e:	701d      	strb	r5, [r3, #0]
    /* turn the LED on */
    //SET_LED3_ORANGE(GPIO_PIN_RESET);
    SET_LED4_GREEN(GPIO_PIN_SET);
 8004660:	4e12      	ldr	r6, [pc, #72]	; (80046ac <LedToggle+0x6c>)
 8004662:	462a      	mov	r2, r5
 8004664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004668:	4630      	mov	r0, r6
 800466a:	f001 f90f 	bl	800588c <HAL_GPIO_WritePin>
    //SET_LED5_RED(GPIO_PIN_RESET);
    SET_LED6_BLUE(GPIO_PIN_SET);
 800466e:	462a      	mov	r2, r5
 8004670:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004674:	4630      	mov	r0, r6
 8004676:	f001 f909 	bl	800588c <HAL_GPIO_WritePin>
    //SET_LED5_RED(GPIO_PIN_SET);
    SET_LED6_BLUE(GPIO_PIN_RESET);
  }

  /* store toggle time to determine next toggle interval */
  timer_counter_last = timer_counter_now;
 800467a:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <LedToggle+0x64>)
 800467c:	601c      	str	r4, [r3, #0]
} /*** end of LedToggle ***/
 800467e:	bd70      	pop	{r4, r5, r6, pc}
    led_toggle_state = 0;
 8004680:	2500      	movs	r5, #0
 8004682:	4b09      	ldr	r3, [pc, #36]	; (80046a8 <LedToggle+0x68>)
 8004684:	701d      	strb	r5, [r3, #0]
    SET_LED4_GREEN(GPIO_PIN_RESET);
 8004686:	4e09      	ldr	r6, [pc, #36]	; (80046ac <LedToggle+0x6c>)
 8004688:	462a      	mov	r2, r5
 800468a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800468e:	4630      	mov	r0, r6
 8004690:	f001 f8fc 	bl	800588c <HAL_GPIO_WritePin>
    SET_LED6_BLUE(GPIO_PIN_RESET);
 8004694:	462a      	mov	r2, r5
 8004696:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800469a:	4630      	mov	r0, r6
 800469c:	f001 f8f6 	bl	800588c <HAL_GPIO_WritePin>
 80046a0:	e7eb      	b.n	800467a <LedToggle+0x3a>
 80046a2:	bf00      	nop
 80046a4:	200000e0 	.word	0x200000e0
 80046a8:	200000de 	.word	0x200000de
 80046ac:	40020c00 	.word	0x40020c00

080046b0 <TimerInit>:
void TimerInit(void)
{
  /* The HAL initialization already configured the Systick interrupt to generate an
   * interrupt every 1 millisecond. Nothing more needs to be done here.
   */
} /*** end of TimerInit ***/
 80046b0:	4770      	bx	lr

080046b2 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
unsigned long TimerGet(void)
{
 80046b2:	b508      	push	{r3, lr}
  /* Read and return the tick counter value. */
  return HAL_GetTick();
 80046b4:	f000 fa7c 	bl	8004bb0 <HAL_GetTick>
} /*** end of TimerGet ***/
 80046b8:	bd08      	pop	{r3, pc}
	...

080046bc <VectorBase_Config>:
   * c-startup code.
   */
  extern const unsigned long g_pfnVectors[];

  /* Remap the vector table to where the vector table is located for this program. */
  SCB->VTOR = (unsigned long)&g_pfnVectors[0];
 80046bc:	4a01      	ldr	r2, [pc, #4]	; (80046c4 <VectorBase_Config+0x8>)
 80046be:	4b02      	ldr	r3, [pc, #8]	; (80046c8 <VectorBase_Config+0xc>)
 80046c0:	609a      	str	r2, [r3, #8]
}
 80046c2:	4770      	bx	lr
 80046c4:	08004000 	.word	0x08004000
 80046c8:	e000ed00 	.word	0xe000ed00

080046cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	b08c      	sub	sp, #48	; 0x30
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d0:	2400      	movs	r4, #0
 80046d2:	940b      	str	r4, [sp, #44]	; 0x2c
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80046d4:	4b29      	ldr	r3, [pc, #164]	; (800477c <MX_GPIO_Init+0xb0>)
 80046d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046d8:	f042 0204 	orr.w	r2, r2, #4
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80046de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e0:	f002 0204 	and.w	r2, r2, #4
 80046e4:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 80046e6:	9a05      	ldr	r2, [sp, #20]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80046e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80046f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80046f6:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80046f8:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80046fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046fc:	f042 0201 	orr.w	r2, r2, #1
 8004700:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004704:	f002 0201 	and.w	r2, r2, #1
 8004708:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 800470a:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800470c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800470e:	f042 0202 	orr.w	r2, r2, #2
 8004712:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004716:	f002 0202 	and.w	r2, r2, #2
 800471a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800471c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800471e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004720:	f042 0208 	orr.w	r2, r2, #8
 8004724:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800472e:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004730:	4813      	ldr	r0, [pc, #76]	; (8004780 <MX_GPIO_Init+0xb4>)
 8004732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004736:	6183      	str	r3, [r0, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8004738:	4e12      	ldr	r6, [pc, #72]	; (8004784 <MX_GPIO_Init+0xb8>)
 800473a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800473e:	61b2      	str	r2, [r6, #24]

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8004740:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004742:	2501      	movs	r5, #1
 8004744:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004746:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004748:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800474a:	940a      	str	r4, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800474c:	a906      	add	r1, sp, #24
 800474e:	f001 f8a9 	bl	80058a4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8004752:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8004754:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004756:	940a      	str	r4, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004758:	a906      	add	r1, sp, #24
 800475a:	480b      	ldr	r0, [pc, #44]	; (8004788 <MX_GPIO_Init+0xbc>)
 800475c:	f001 f8a2 	bl	80058a4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8004760:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004764:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004766:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004768:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800476a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800476c:	940a      	str	r4, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800476e:	a906      	add	r1, sp, #24
 8004770:	4630      	mov	r0, r6
 8004772:	f001 f897 	bl	80058a4 <LL_GPIO_Init>

}
 8004776:	b00c      	add	sp, #48	; 0x30
 8004778:	bd70      	pop	{r4, r5, r6, pc}
 800477a:	bf00      	nop
 800477c:	40023800 	.word	0x40023800
 8004780:	40020800 	.word	0x40020800
 8004784:	40020c00 	.word	0x40020c00
 8004788:	40020000 	.word	0x40020000

0800478c <MX_USART6_UART_Init>:
{
 800478c:	b510      	push	{r4, lr}
 800478e:	b090      	sub	sp, #64	; 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004790:	2400      	movs	r4, #0
 8004792:	9409      	str	r4, [sp, #36]	; 0x24
 8004794:	940a      	str	r4, [sp, #40]	; 0x28
 8004796:	940b      	str	r4, [sp, #44]	; 0x2c
 8004798:	940c      	str	r4, [sp, #48]	; 0x30
 800479a:	940d      	str	r4, [sp, #52]	; 0x34
 800479c:	940e      	str	r4, [sp, #56]	; 0x38
 800479e:	940f      	str	r4, [sp, #60]	; 0x3c
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80047a0:	4b1e      	ldr	r3, [pc, #120]	; (800481c <MX_USART6_UART_Init+0x90>)
 80047a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047a4:	f042 0220 	orr.w	r2, r2, #32
 80047a8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80047aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ac:	f002 0220 	and.w	r2, r2, #32
 80047b0:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80047b2:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80047b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047b6:	f042 0204 	orr.w	r2, r2, #4
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80047c4:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80047c6:	23c0      	movs	r3, #192	; 0xc0
 80047c8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80047ca:	2302      	movs	r3, #2
 80047cc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80047ce:	2303      	movs	r3, #3
 80047d0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80047d2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80047d4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80047d6:	2308      	movs	r3, #8
 80047d8:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047da:	a903      	add	r1, sp, #12
 80047dc:	4810      	ldr	r0, [pc, #64]	; (8004820 <MX_USART6_UART_Init+0x94>)
 80047de:	f001 f861 	bl	80058a4 <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 115200;
 80047e2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80047e6:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80047e8:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80047ea:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80047ec:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80047ee:	230c      	movs	r3, #12
 80047f0:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80047f2:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80047f4:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART6, &USART_InitStruct);
 80047f6:	4c0b      	ldr	r4, [pc, #44]	; (8004824 <MX_USART6_UART_Init+0x98>)
 80047f8:	a909      	add	r1, sp, #36	; 0x24
 80047fa:	4620      	mov	r0, r4
 80047fc:	f001 f95a 	bl	8005ab4 <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004800:	6923      	ldr	r3, [r4, #16]
 8004802:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004806:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004808:	6963      	ldr	r3, [r4, #20]
 800480a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800480e:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004810:	68e3      	ldr	r3, [r4, #12]
 8004812:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004816:	60e3      	str	r3, [r4, #12]
}
 8004818:	b010      	add	sp, #64	; 0x40
 800481a:	bd10      	pop	{r4, pc}
 800481c:	40023800 	.word	0x40023800
 8004820:	40020800 	.word	0x40020800
 8004824:	40011400 	.word	0x40011400

08004828 <__io_putchar>:
{
 8004828:	b510      	push	{r4, lr}
 800482a:	4604      	mov	r4, r0
  Rs232TransmitByte(ch);
 800482c:	4b02      	ldr	r3, [pc, #8]	; (8004838 <__io_putchar+0x10>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	b2c0      	uxtb	r0, r0
 8004832:	4798      	blx	r3
}
 8004834:	4620      	mov	r0, r4
 8004836:	bd10      	pop	{r4, pc}
 8004838:	0800018c 	.word	0x0800018c

0800483c <SystemClock_Config>:
{
 800483c:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800483e:	4a2e      	ldr	r2, [pc, #184]	; (80048f8 <SystemClock_Config+0xbc>)
 8004840:	6813      	ldr	r3, [r2, #0]
 8004842:	f023 0307 	bic.w	r3, r3, #7
 8004846:	f043 0305 	orr.w	r3, r3, #5
 800484a:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800484c:	4b2a      	ldr	r3, [pc, #168]	; (80048f8 <SystemClock_Config+0xbc>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0307 	and.w	r3, r3, #7
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8004854:	2b05      	cmp	r3, #5
 8004856:	d1f9      	bne.n	800484c <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8004858:	4a28      	ldr	r2, [pc, #160]	; (80048fc <SystemClock_Config+0xc0>)
 800485a:	6813      	ldr	r3, [r2, #0]
 800485c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004860:	6013      	str	r3, [r2, #0]
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8004862:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8004866:	6813      	ldr	r3, [r2, #0]
 8004868:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800486c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004870:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004872:	6813      	ldr	r3, [r2, #0]
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800487a:	4b21      	ldr	r3, [pc, #132]	; (8004900 <SystemClock_Config+0xc4>)
 800487c:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSI_IsReady() != 1)
 800487e:	f013 0f02 	tst.w	r3, #2
 8004882:	d0fa      	beq.n	800487a <SystemClock_Config+0x3e>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8004884:	4a1e      	ldr	r2, [pc, #120]	; (8004900 <SystemClock_Config+0xc4>)
 8004886:	6851      	ldr	r1, [r2, #4]
 8004888:	4b1e      	ldr	r3, [pc, #120]	; (8004904 <SystemClock_Config+0xc8>)
 800488a:	400b      	ands	r3, r1
 800488c:	f443 5328 	orr.w	r3, r3, #10752	; 0x2a00
 8004890:	f043 0308 	orr.w	r3, r3, #8
 8004894:	6053      	str	r3, [r2, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8004896:	6853      	ldr	r3, [r2, #4]
 8004898:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800489c:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800489e:	6813      	ldr	r3, [r2, #0]
 80048a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048a4:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80048a6:	4b16      	ldr	r3, [pc, #88]	; (8004900 <SystemClock_Config+0xc4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 80048aa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80048ae:	d0fa      	beq.n	80048a6 <SystemClock_Config+0x6a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80048b0:	4b13      	ldr	r3, [pc, #76]	; (8004900 <SystemClock_Config+0xc4>)
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80048b8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80048c0:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80048c4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80048cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048d0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	f022 0203 	bic.w	r2, r2, #3
 80048d8:	f042 0202 	orr.w	r2, r2, #2
 80048dc:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80048de:	4b08      	ldr	r3, [pc, #32]	; (8004900 <SystemClock_Config+0xc4>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d1f9      	bne.n	80048de <SystemClock_Config+0xa2>
  LL_SetSystemCoreClock(168000000);
 80048ea:	4807      	ldr	r0, [pc, #28]	; (8004908 <SystemClock_Config+0xcc>)
 80048ec:	f001 f99e 	bl	8005c2c <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80048f0:	2000      	movs	r0, #0
 80048f2:	f000 f911 	bl	8004b18 <HAL_InitTick>
}
 80048f6:	bd08      	pop	{r3, pc}
 80048f8:	40023c00 	.word	0x40023c00
 80048fc:	40007000 	.word	0x40007000
 8004900:	40023800 	.word	0x40023800
 8004904:	ffbf8000 	.word	0xffbf8000
 8004908:	0a037a00 	.word	0x0a037a00

0800490c <main>:
{
 800490c:	b530      	push	{r4, r5, lr}
 800490e:	b085      	sub	sp, #20
  VectorBase_Config();
 8004910:	f7ff fed4 	bl	80046bc <VectorBase_Config>
  HAL_Init();
 8004914:	f000 f926 	bl	8004b64 <HAL_Init>
  SystemClock_Config();
 8004918:	f7ff ff90 	bl	800483c <SystemClock_Config>
  MX_GPIO_Init();
 800491c:	f7ff fed6 	bl	80046cc <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8004920:	f7ff ff34 	bl	800478c <MX_USART6_UART_Init>
  MX_LWIP_Init();
 8004924:	f001 f988 	bl	8005c38 <MX_LWIP_Init>
  AppInit();
 8004928:	f7ff fe36 	bl	8004598 <AppInit>
  printf("... Main2 start ... \n");
 800492c:	4816      	ldr	r0, [pc, #88]	; (8004988 <main+0x7c>)
 800492e:	f011 f8b5 	bl	8015a9c <puts>
  printf("... Mac ... %2.2X:%2.2X:%2.2X:%2.2X:%2.2X:%2.2X\n", gnetif.hwaddr[0], gnetif.hwaddr[1],
 8004932:	4c16      	ldr	r4, [pc, #88]	; (800498c <main+0x80>)
		  gnetif.hwaddr[2], gnetif.hwaddr[3], gnetif.hwaddr[4], gnetif.hwaddr[5]);
 8004934:	f894 30db 	ldrb.w	r3, [r4, #219]	; 0xdb
 8004938:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
 800493c:	f894 10dd 	ldrb.w	r1, [r4, #221]	; 0xdd
  printf("... Mac ... %2.2X:%2.2X:%2.2X:%2.2X:%2.2X:%2.2X\n", gnetif.hwaddr[0], gnetif.hwaddr[1],
 8004940:	9102      	str	r1, [sp, #8]
 8004942:	9201      	str	r2, [sp, #4]
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	f894 30da 	ldrb.w	r3, [r4, #218]	; 0xda
 800494a:	f894 20d9 	ldrb.w	r2, [r4, #217]	; 0xd9
 800494e:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
 8004952:	480f      	ldr	r0, [pc, #60]	; (8004990 <main+0x84>)
 8004954:	f011 f81c 	bl	8015990 <iprintf>
  u32_t ip = gnetif.ip_addr.u_addr.ip4.addr;
 8004958:	6865      	ldr	r5, [r4, #4]
 800495a:	e003      	b.n	8004964 <main+0x58>
    MX_LWIP_Process();
 800495c:	f001 f9b4 	bl	8005cc8 <MX_LWIP_Process>
    AppTask();
 8004960:	f7ff fe22 	bl	80045a8 <AppTask>
	if (!ip && gnetif.ip_addr.u_addr.ip4.addr) {
 8004964:	2d00      	cmp	r5, #0
 8004966:	d1f9      	bne.n	800495c <main+0x50>
 8004968:	4b08      	ldr	r3, [pc, #32]	; (800498c <main+0x80>)
 800496a:	685c      	ldr	r4, [r3, #4]
 800496c:	2c00      	cmp	r4, #0
 800496e:	d0f5      	beq.n	800495c <main+0x50>
			  (u8_t)(ip >> 24));
 8004970:	0e23      	lsrs	r3, r4, #24
	  printf("... IP  ... %d.%d.%d.%d\n",
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8004978:	f3c4 2207 	ubfx	r2, r4, #8, #8
 800497c:	b2e1      	uxtb	r1, r4
 800497e:	4805      	ldr	r0, [pc, #20]	; (8004994 <main+0x88>)
 8004980:	f011 f806 	bl	8015990 <iprintf>
	  ip = gnetif.ip_addr.u_addr.ip4.addr;
 8004984:	4625      	mov	r5, r4
 8004986:	e7e9      	b.n	800495c <main+0x50>
 8004988:	08016b08 	.word	0x08016b08
 800498c:	20000c50 	.word	0x20000c50
 8004990:	08016b20 	.word	0x08016b20
 8004994:	08016b54 	.word	0x08016b54

08004998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004998:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800499a:	2100      	movs	r1, #0
 800499c:	9100      	str	r1, [sp, #0]
 800499e:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <HAL_MspInit+0x34>)
 80049a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049a6:	645a      	str	r2, [r3, #68]	; 0x44
 80049a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049aa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80049ae:	9200      	str	r2, [sp, #0]
 80049b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049b2:	9101      	str	r1, [sp, #4]
 80049b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c2:	9301      	str	r3, [sp, #4]
 80049c4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049c6:	b002      	add	sp, #8
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	40023800 	.word	0x40023800

080049d0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80049d0:	4770      	bx	lr

080049d2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049d2:	e7fe      	b.n	80049d2 <HardFault_Handler>

080049d4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049d4:	e7fe      	b.n	80049d4 <MemManage_Handler>

080049d6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049d6:	e7fe      	b.n	80049d6 <BusFault_Handler>

080049d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049d8:	e7fe      	b.n	80049d8 <UsageFault_Handler>

080049da <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049da:	4770      	bx	lr

080049dc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049dc:	4770      	bx	lr

080049de <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049de:	4770      	bx	lr

080049e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049e2:	f000 f8d9 	bl	8004b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049e6:	bd08      	pop	{r3, pc}

080049e8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80049e8:	2001      	movs	r0, #1
 80049ea:	4770      	bx	lr

080049ec <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 80049ec:	4b02      	ldr	r3, [pc, #8]	; (80049f8 <_kill+0xc>)
 80049ee:	2216      	movs	r2, #22
 80049f0:	601a      	str	r2, [r3, #0]
	return -1;
}
 80049f2:	f04f 30ff 	mov.w	r0, #4294967295
 80049f6:	4770      	bx	lr
 80049f8:	20008444 	.word	0x20008444

080049fc <_exit>:

void _exit (int status)
{
 80049fc:	b508      	push	{r3, lr}
	_kill(status, -1);
 80049fe:	f04f 31ff 	mov.w	r1, #4294967295
 8004a02:	f7ff fff3 	bl	80049ec <_kill>
	while (1) {}		/* Make sure we hang here */
 8004a06:	e7fe      	b.n	8004a06 <_exit+0xa>

08004a08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	460c      	mov	r4, r1
 8004a0c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a0e:	2500      	movs	r5, #0
 8004a10:	42b5      	cmp	r5, r6
 8004a12:	da07      	bge.n	8004a24 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8004a14:	f3af 8000 	nop.w
 8004a18:	4621      	mov	r1, r4
 8004a1a:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a1e:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8004a20:	460c      	mov	r4, r1
 8004a22:	e7f5      	b.n	8004a10 <_read+0x8>
	}

return len;
}
 8004a24:	4630      	mov	r0, r6
 8004a26:	bd70      	pop	{r4, r5, r6, pc}

08004a28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a28:	b570      	push	{r4, r5, r6, lr}
 8004a2a:	460c      	mov	r4, r1
 8004a2c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a2e:	2500      	movs	r5, #0
 8004a30:	42b5      	cmp	r5, r6
 8004a32:	da05      	bge.n	8004a40 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8004a34:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004a38:	f7ff fef6 	bl	8004828 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a3c:	3501      	adds	r5, #1
 8004a3e:	e7f7      	b.n	8004a30 <_write+0x8>
	}
	return len;
}
 8004a40:	4630      	mov	r0, r6
 8004a42:	bd70      	pop	{r4, r5, r6, pc}

08004a44 <_close>:

int _close(int file)
{
	return -1;
}
 8004a44:	f04f 30ff 	mov.w	r0, #4294967295
 8004a48:	4770      	bx	lr

08004a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004a4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a4e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004a50:	2000      	movs	r0, #0
 8004a52:	4770      	bx	lr

08004a54 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004a54:	2001      	movs	r0, #1
 8004a56:	4770      	bx	lr

08004a58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004a58:	2000      	movs	r0, #0
 8004a5a:	4770      	bx	lr

08004a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a5c:	b410      	push	{r4}
 8004a5e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a60:	4a0c      	ldr	r2, [pc, #48]	; (8004a94 <_sbrk+0x38>)
 8004a62:	490d      	ldr	r1, [pc, #52]	; (8004a98 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a64:	480d      	ldr	r0, [pc, #52]	; (8004a9c <_sbrk+0x40>)
 8004a66:	6800      	ldr	r0, [r0, #0]
 8004a68:	b150      	cbz	r0, 8004a80 <_sbrk+0x24>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a6a:	480c      	ldr	r0, [pc, #48]	; (8004a9c <_sbrk+0x40>)
 8004a6c:	6800      	ldr	r0, [r0, #0]
 8004a6e:	4403      	add	r3, r0
 8004a70:	1a52      	subs	r2, r2, r1
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d808      	bhi.n	8004a88 <_sbrk+0x2c>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004a76:	4a09      	ldr	r2, [pc, #36]	; (8004a9c <_sbrk+0x40>)
 8004a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8004a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a7e:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8004a80:	4806      	ldr	r0, [pc, #24]	; (8004a9c <_sbrk+0x40>)
 8004a82:	4c07      	ldr	r4, [pc, #28]	; (8004aa0 <_sbrk+0x44>)
 8004a84:	6004      	str	r4, [r0, #0]
 8004a86:	e7f0      	b.n	8004a6a <_sbrk+0xe>
    errno = ENOMEM;
 8004a88:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <_sbrk+0x48>)
 8004a8a:	220c      	movs	r2, #12
 8004a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a92:	e7f2      	b.n	8004a7a <_sbrk+0x1e>
 8004a94:	20020000 	.word	0x20020000
 8004a98:	00000400 	.word	0x00000400
 8004a9c:	200000e4 	.word	0x200000e4
 8004aa0:	20008458 	.word	0x20008458
 8004aa4:	20008444 	.word	0x20008444

08004aa8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004aa8:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <SystemInit+0x18>)
 8004aaa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004aae:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004ab6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004aba:	609a      	str	r2, [r3, #8]
#endif
}
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	e000ed00 	.word	0xe000ed00

08004ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004afc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ac8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004aca:	e003      	b.n	8004ad4 <LoopCopyDataInit>

08004acc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004acc:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004ace:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004ad0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004ad2:	3104      	adds	r1, #4

08004ad4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004ad4:	480b      	ldr	r0, [pc, #44]	; (8004b04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004ad6:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004ad8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004ada:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004adc:	d3f6      	bcc.n	8004acc <CopyDataInit>
  ldr  r2, =_sbss
 8004ade:	4a0b      	ldr	r2, [pc, #44]	; (8004b0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004ae0:	e002      	b.n	8004ae8 <LoopFillZerobss>

08004ae2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004ae2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004ae4:	f842 3b04 	str.w	r3, [r2], #4

08004ae8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004ae8:	4b09      	ldr	r3, [pc, #36]	; (8004b10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004aea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004aec:	d3f9      	bcc.n	8004ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004aee:	f7ff ffdb 	bl	8004aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004af2:	f010 feeb 	bl	80158cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004af6:	f7ff ff09 	bl	800490c <main>
  bx  lr    
 8004afa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004afc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004b00:	0801abe0 	.word	0x0801abe0
  ldr  r0, =_sdata
 8004b04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004b08:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8004b0c:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8004b10:	20008454 	.word	0x20008454

08004b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b14:	e7fe      	b.n	8004b14 <ADC_IRQHandler>
	...

08004b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b18:	b510      	push	{r4, lr}
 8004b1a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b1c:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <HAL_InitTick+0x40>)
 8004b1e:	7818      	ldrb	r0, [r3, #0]
 8004b20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b24:	fbb3 f3f0 	udiv	r3, r3, r0
 8004b28:	4a0c      	ldr	r2, [pc, #48]	; (8004b5c <HAL_InitTick+0x44>)
 8004b2a:	6810      	ldr	r0, [r2, #0]
 8004b2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004b30:	f000 f89e 	bl	8004c70 <HAL_SYSTICK_Config>
 8004b34:	b968      	cbnz	r0, 8004b52 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b36:	2c0f      	cmp	r4, #15
 8004b38:	d901      	bls.n	8004b3e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8004b3a:	2001      	movs	r0, #1
 8004b3c:	e00a      	b.n	8004b54 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b3e:	2200      	movs	r2, #0
 8004b40:	4621      	mov	r1, r4
 8004b42:	f04f 30ff 	mov.w	r0, #4294967295
 8004b46:	f000 f85f 	bl	8004c08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <HAL_InitTick+0x48>)
 8004b4c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b4e:	2000      	movs	r0, #0
 8004b50:	e000      	b.n	8004b54 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8004b52:	2001      	movs	r0, #1
}
 8004b54:	bd10      	pop	{r4, pc}
 8004b56:	bf00      	nop
 8004b58:	20000004 	.word	0x20000004
 8004b5c:	20000000 	.word	0x20000000
 8004b60:	20000008 	.word	0x20000008

08004b64 <HAL_Init>:
{
 8004b64:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b66:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <HAL_Init+0x30>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b6e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b76:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b7e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b80:	2003      	movs	r0, #3
 8004b82:	f000 f82f 	bl	8004be4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b86:	2000      	movs	r0, #0
 8004b88:	f7ff ffc6 	bl	8004b18 <HAL_InitTick>
  HAL_MspInit();
 8004b8c:	f7ff ff04 	bl	8004998 <HAL_MspInit>
}
 8004b90:	2000      	movs	r0, #0
 8004b92:	bd08      	pop	{r3, pc}
 8004b94:	40023c00 	.word	0x40023c00

08004b98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004b98:	4a03      	ldr	r2, [pc, #12]	; (8004ba8 <HAL_IncTick+0x10>)
 8004b9a:	6811      	ldr	r1, [r2, #0]
 8004b9c:	4b03      	ldr	r3, [pc, #12]	; (8004bac <HAL_IncTick+0x14>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	440b      	add	r3, r1
 8004ba2:	6013      	str	r3, [r2, #0]
}
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	20000c38 	.word	0x20000c38
 8004bac:	20000004 	.word	0x20000004

08004bb0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004bb0:	4b01      	ldr	r3, [pc, #4]	; (8004bb8 <HAL_GetTick+0x8>)
 8004bb2:	6818      	ldr	r0, [r3, #0]
}
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	20000c38 	.word	0x20000c38

08004bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bbc:	b538      	push	{r3, r4, r5, lr}
 8004bbe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004bc0:	f7ff fff6 	bl	8004bb0 <HAL_GetTick>
 8004bc4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bc6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004bca:	d002      	beq.n	8004bd2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bcc:	4b04      	ldr	r3, [pc, #16]	; (8004be0 <HAL_Delay+0x24>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004bd2:	f7ff ffed 	bl	8004bb0 <HAL_GetTick>
 8004bd6:	1b40      	subs	r0, r0, r5
 8004bd8:	42a0      	cmp	r0, r4
 8004bda:	d3fa      	bcc.n	8004bd2 <HAL_Delay+0x16>
  {
  }
}
 8004bdc:	bd38      	pop	{r3, r4, r5, pc}
 8004bde:	bf00      	nop
 8004be0:	20000004 	.word	0x20000004

08004be4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004be4:	4a07      	ldr	r2, [pc, #28]	; (8004c04 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004be6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004be8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004bec:	041b      	lsls	r3, r3, #16
 8004bee:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bf0:	0200      	lsls	r0, r0, #8
 8004bf2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bf6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004c00:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004c02:	4770      	bx	lr
 8004c04:	e000ed00 	.word	0xe000ed00

08004c08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c08:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c0a:	4b17      	ldr	r3, [pc, #92]	; (8004c68 <HAL_NVIC_SetPriority+0x60>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c12:	f1c3 0407 	rsb	r4, r3, #7
 8004c16:	2c04      	cmp	r4, #4
 8004c18:	bf28      	it	cs
 8004c1a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c1c:	1d1d      	adds	r5, r3, #4
 8004c1e:	2d06      	cmp	r5, #6
 8004c20:	d918      	bls.n	8004c54 <HAL_NVIC_SetPriority+0x4c>
 8004c22:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c24:	f04f 35ff 	mov.w	r5, #4294967295
 8004c28:	fa05 f404 	lsl.w	r4, r5, r4
 8004c2c:	ea21 0104 	bic.w	r1, r1, r4
 8004c30:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c32:	fa05 f303 	lsl.w	r3, r5, r3
 8004c36:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c3a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	db0b      	blt.n	8004c58 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c40:	0109      	lsls	r1, r1, #4
 8004c42:	b2c9      	uxtb	r1, r1
 8004c44:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004c48:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004c4c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004c50:	bc30      	pop	{r4, r5}
 8004c52:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c54:	2300      	movs	r3, #0
 8004c56:	e7e5      	b.n	8004c24 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c58:	f000 000f 	and.w	r0, r0, #15
 8004c5c:	0109      	lsls	r1, r1, #4
 8004c5e:	b2c9      	uxtb	r1, r1
 8004c60:	4b02      	ldr	r3, [pc, #8]	; (8004c6c <HAL_NVIC_SetPriority+0x64>)
 8004c62:	5419      	strb	r1, [r3, r0]
 8004c64:	e7f4      	b.n	8004c50 <HAL_NVIC_SetPriority+0x48>
 8004c66:	bf00      	nop
 8004c68:	e000ed00 	.word	0xe000ed00
 8004c6c:	e000ed14 	.word	0xe000ed14

08004c70 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c70:	3801      	subs	r0, #1
 8004c72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004c76:	d20a      	bcs.n	8004c8e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c78:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <HAL_SYSTICK_Config+0x24>)
 8004c7a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c7c:	4a06      	ldr	r2, [pc, #24]	; (8004c98 <HAL_SYSTICK_Config+0x28>)
 8004c7e:	21f0      	movs	r1, #240	; 0xf0
 8004c80:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c84:	2000      	movs	r0, #0
 8004c86:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c88:	2207      	movs	r2, #7
 8004c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c8c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004c8e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	e000e010 	.word	0xe000e010
 8004c98:	e000ed00 	.word	0xe000ed00

08004c9c <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004c9c:	7950      	ldrb	r0, [r2, #5]
 8004c9e:	7913      	ldrb	r3, [r2, #4]
 8004ca0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004ca4:	4807      	ldr	r0, [pc, #28]	; (8004cc4 <ETH_MACAddressConfig+0x28>)
 8004ca6:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004ca8:	78d0      	ldrb	r0, [r2, #3]
 8004caa:	7893      	ldrb	r3, [r2, #2]
 8004cac:	041b      	lsls	r3, r3, #16
 8004cae:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004cb2:	7850      	ldrb	r0, [r2, #1]
 8004cb4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004cb8:	7812      	ldrb	r2, [r2, #0]
 8004cba:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004cbc:	4a02      	ldr	r2, [pc, #8]	; (8004cc8 <ETH_MACAddressConfig+0x2c>)
 8004cbe:	508b      	str	r3, [r1, r2]
}
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40028040 	.word	0x40028040
 8004cc8:	40028044 	.word	0x40028044

08004ccc <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004ccc:	6801      	ldr	r1, [r0, #0]
 8004cce:	f241 0218 	movw	r2, #4120	; 0x1018
 8004cd2:	588b      	ldr	r3, [r1, r2]
 8004cd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cd8:	508b      	str	r3, [r1, r2]
}
 8004cda:	4770      	bx	lr

08004cdc <ETH_DMATransmissionDisable>:
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8004cdc:	6801      	ldr	r1, [r0, #0]
 8004cde:	f241 0218 	movw	r2, #4120	; 0x1018
 8004ce2:	588b      	ldr	r3, [r1, r2]
 8004ce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ce8:	508b      	str	r3, [r1, r2]
}
 8004cea:	4770      	bx	lr

08004cec <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004cec:	6801      	ldr	r1, [r0, #0]
 8004cee:	f241 0218 	movw	r2, #4120	; 0x1018
 8004cf2:	588b      	ldr	r3, [r1, r2]
 8004cf4:	f043 0302 	orr.w	r3, r3, #2
 8004cf8:	508b      	str	r3, [r1, r2]
}
 8004cfa:	4770      	bx	lr

08004cfc <ETH_DMAReceptionDisable>:
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004cfc:	6801      	ldr	r1, [r0, #0]
 8004cfe:	f241 0218 	movw	r2, #4120	; 0x1018
 8004d02:	588b      	ldr	r3, [r1, r2]
 8004d04:	f023 0302 	bic.w	r3, r3, #2
 8004d08:	508b      	str	r3, [r1, r2]
}
 8004d0a:	4770      	bx	lr

08004d0c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8004d0c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d0e:	4b08      	ldr	r3, [pc, #32]	; (8004d30 <ETH_Delay+0x24>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a08      	ldr	r2, [pc, #32]	; (8004d34 <ETH_Delay+0x28>)
 8004d14:	fba2 2303 	umull	r2, r3, r2, r3
 8004d18:	0a5b      	lsrs	r3, r3, #9
 8004d1a:	fb00 f303 	mul.w	r3, r0, r3
 8004d1e:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 8004d20:	bf00      	nop
  } 
  while (Delay --);
 8004d22:	9b01      	ldr	r3, [sp, #4]
 8004d24:	1e5a      	subs	r2, r3, #1
 8004d26:	9201      	str	r2, [sp, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1f9      	bne.n	8004d20 <ETH_Delay+0x14>
}
 8004d2c:	b002      	add	sp, #8
 8004d2e:	4770      	bx	lr
 8004d30:	20000000 	.word	0x20000000
 8004d34:	10624dd3 	.word	0x10624dd3

08004d38 <ETH_MACTransmissionEnable>:
{ 
 8004d38:	b510      	push	{r4, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004d42:	6802      	ldr	r2, [r0, #0]
 8004d44:	6813      	ldr	r3, [r2, #0]
 8004d46:	f043 0308 	orr.w	r3, r3, #8
 8004d4a:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8004d4c:	6803      	ldr	r3, [r0, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004d52:	2001      	movs	r0, #1
 8004d54:	f7ff ffda 	bl	8004d0c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	9a01      	ldr	r2, [sp, #4]
 8004d5c:	601a      	str	r2, [r3, #0]
}
 8004d5e:	b002      	add	sp, #8
 8004d60:	bd10      	pop	{r4, pc}

08004d62 <ETH_MACReceptionEnable>:
{ 
 8004d62:	b510      	push	{r4, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004d6c:	6802      	ldr	r2, [r0, #0]
 8004d6e:	6813      	ldr	r3, [r2, #0]
 8004d70:	f043 0304 	orr.w	r3, r3, #4
 8004d74:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8004d76:	6803      	ldr	r3, [r0, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004d7c:	2001      	movs	r0, #1
 8004d7e:	f7ff ffc5 	bl	8004d0c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	9a01      	ldr	r2, [sp, #4]
 8004d86:	601a      	str	r2, [r3, #0]
}
 8004d88:	b002      	add	sp, #8
 8004d8a:	bd10      	pop	{r4, pc}

08004d8c <ETH_FlushTransmitFIFO>:
{
 8004d8c:	b530      	push	{r4, r5, lr}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004d96:	6802      	ldr	r2, [r0, #0]
 8004d98:	f241 0518 	movw	r5, #4120	; 0x1018
 8004d9c:	5953      	ldr	r3, [r2, r5]
 8004d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004da2:	5153      	str	r3, [r2, r5]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004da4:	6803      	ldr	r3, [r0, #0]
 8004da6:	595b      	ldr	r3, [r3, r5]
 8004da8:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004daa:	2001      	movs	r0, #1
 8004dac:	f7ff ffae 	bl	8004d0c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	9a01      	ldr	r2, [sp, #4]
 8004db4:	515a      	str	r2, [r3, r5]
}
 8004db6:	b003      	add	sp, #12
 8004db8:	bd30      	pop	{r4, r5, pc}

08004dba <ETH_MACReceptionDisable>:
{ 
 8004dba:	b510      	push	{r4, lr}
 8004dbc:	b082      	sub	sp, #8
 8004dbe:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8004dc4:	6802      	ldr	r2, [r0, #0]
 8004dc6:	6813      	ldr	r3, [r2, #0]
 8004dc8:	f023 0304 	bic.w	r3, r3, #4
 8004dcc:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8004dce:	6803      	ldr	r3, [r0, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	f7ff ff99 	bl	8004d0c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	9a01      	ldr	r2, [sp, #4]
 8004dde:	601a      	str	r2, [r3, #0]
}
 8004de0:	b002      	add	sp, #8
 8004de2:	bd10      	pop	{r4, pc}

08004de4 <ETH_MACTransmissionDisable>:
{ 
 8004de4:	b510      	push	{r4, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004dee:	6802      	ldr	r2, [r0, #0]
 8004df0:	6813      	ldr	r3, [r2, #0]
 8004df2:	f023 0308 	bic.w	r3, r3, #8
 8004df6:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8004df8:	6803      	ldr	r3, [r0, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004dfe:	2001      	movs	r0, #1
 8004e00:	f7ff ff84 	bl	8004d0c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	9a01      	ldr	r2, [sp, #4]
 8004e08:	601a      	str	r2, [r3, #0]
}
 8004e0a:	b002      	add	sp, #8
 8004e0c:	bd10      	pop	{r4, pc}
	...

08004e10 <ETH_MACDMAConfig>:
{
 8004e10:	b570      	push	{r4, r5, r6, lr}
 8004e12:	b09e      	sub	sp, #120	; 0x78
 8004e14:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004e16:	b129      	cbz	r1, 8004e24 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004e18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e1c:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8004e1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e22:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004e24:	69e3      	ldr	r3, [r4, #28]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d16a      	bne.n	8004f00 <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e2e:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8004e30:	6821      	ldr	r1, [r4, #0]
 8004e32:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004e34:	4a39      	ldr	r2, [pc, #228]	; (8004f1c <ETH_MACDMAConfig+0x10c>)
 8004e36:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 8004e38:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 8004e3a:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8004e3c:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8004e3e:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 8004e40:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8004e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8004e46:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004e48:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e4e:	2001      	movs	r0, #1
 8004e50:	f7ff feb4 	bl	8004bbc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004e58:	6823      	ldr	r3, [r4, #0]
 8004e5a:	2240      	movs	r2, #64	; 0x40
 8004e5c:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e62:	2001      	movs	r0, #1
 8004e64:	f7ff feaa 	bl	8004bbc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	2500      	movs	r5, #0
 8004e70:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 8004e76:	6822      	ldr	r2, [r4, #0]
 8004e78:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004e7a:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 8004e7e:	041b      	lsls	r3, r3, #16
 8004e80:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8004e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004e86:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e8c:	2001      	movs	r0, #1
 8004e8e:	f7ff fe95 	bl	8004bbc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e9e:	2001      	movs	r0, #1
 8004ea0:	f7ff fe8c 	bl	8004bbc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004ea8:	6822      	ldr	r2, [r4, #0]
 8004eaa:	f241 0518 	movw	r5, #4120	; 0x1018
 8004eae:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004eb0:	4b1b      	ldr	r3, [pc, #108]	; (8004f20 <ETH_MACDMAConfig+0x110>)
 8004eb2:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004eb4:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8004eb8:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004ebc:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ec2:	2001      	movs	r0, #1
 8004ec4:	f7ff fe7a 	bl	8004bbc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004ecc:	6823      	ldr	r3, [r4, #0]
 8004ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed2:	4a14      	ldr	r2, [pc, #80]	; (8004f24 <ETH_MACDMAConfig+0x114>)
 8004ed4:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004edc:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ede:	2001      	movs	r0, #1
 8004ee0:	f7ff fe6c 	bl	8004bbc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eea:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004eec:	69a3      	ldr	r3, [r4, #24]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d009      	beq.n	8004f06 <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004ef2:	6962      	ldr	r2, [r4, #20]
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f7ff fed0 	bl	8004c9c <ETH_MACAddressConfig>
}
 8004efc:	b01e      	add	sp, #120	; 0x78
 8004efe:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004f00:	2300      	movs	r3, #0
 8004f02:	9307      	str	r3, [sp, #28]
 8004f04:	e794      	b.n	8004e30 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004f06:	6821      	ldr	r1, [r4, #0]
 8004f08:	f241 021c 	movw	r2, #4124	; 0x101c
 8004f0c:	588b      	ldr	r3, [r1, r2]
 8004f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f16:	508b      	str	r3, [r1, r2]
 8004f18:	e7eb      	b.n	8004ef2 <ETH_MACDMAConfig+0xe2>
 8004f1a:	bf00      	nop
 8004f1c:	ff20810f 	.word	0xff20810f
 8004f20:	f8de3f23 	.word	0xf8de3f23
 8004f24:	02c12080 	.word	0x02c12080

08004f28 <HAL_ETH_DMATxDescListInit>:
{
 8004f28:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8004f2a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8004f2e:	2c01      	cmp	r4, #1
 8004f30:	d032      	beq.n	8004f98 <HAL_ETH_DMATxDescListInit+0x70>
 8004f32:	2401      	movs	r4, #1
 8004f34:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8004f38:	2402      	movs	r4, #2
 8004f3a:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8004f3e:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 8004f40:	2400      	movs	r4, #0
 8004f42:	e001      	b.n	8004f48 <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8004f44:	60f1      	str	r1, [r6, #12]
  for(i=0U; i < TxBuffCount; i++)
 8004f46:	3401      	adds	r4, #1
 8004f48:	429c      	cmp	r4, r3
 8004f4a:	d218      	bcs.n	8004f7e <HAL_ETH_DMATxDescListInit+0x56>
    dmatxdesc = DMATxDescTab + i;
 8004f4c:	0167      	lsls	r7, r4, #5
 8004f4e:	eb01 1644 	add.w	r6, r1, r4, lsl #5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004f52:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
 8004f56:	51cd      	str	r5, [r1, r7]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8004f58:	f240 55f4 	movw	r5, #1524	; 0x5f4
 8004f5c:	fb05 2504 	mla	r5, r5, r4, r2
 8004f60:	60b5      	str	r5, [r6, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004f62:	69c5      	ldr	r5, [r0, #28]
 8004f64:	b91d      	cbnz	r5, 8004f6e <HAL_ETH_DMATxDescListInit+0x46>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8004f66:	59cd      	ldr	r5, [r1, r7]
 8004f68:	f445 0540 	orr.w	r5, r5, #12582912	; 0xc00000
 8004f6c:	51cd      	str	r5, [r1, r7]
    if(i < (TxBuffCount-1U))
 8004f6e:	1e5d      	subs	r5, r3, #1
 8004f70:	42a5      	cmp	r5, r4
 8004f72:	d9e7      	bls.n	8004f44 <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8004f74:	1c65      	adds	r5, r4, #1
 8004f76:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8004f7a:	60f5      	str	r5, [r6, #12]
 8004f7c:	e7e3      	b.n	8004f46 <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8004f7e:	6802      	ldr	r2, [r0, #0]
 8004f80:	f241 0310 	movw	r3, #4112	; 0x1010
 8004f84:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8004f86:	2301      	movs	r3, #1
 8004f88:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8004f92:	4618      	mov	r0, r3
}
 8004f94:	bcf0      	pop	{r4, r5, r6, r7}
 8004f96:	4770      	bx	lr
  __HAL_LOCK(heth);
 8004f98:	2002      	movs	r0, #2
 8004f9a:	e7fb      	b.n	8004f94 <HAL_ETH_DMATxDescListInit+0x6c>

08004f9c <HAL_ETH_DMARxDescListInit>:
{
 8004f9c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8004f9e:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8004fa2:	2c01      	cmp	r4, #1
 8004fa4:	d02f      	beq.n	8005006 <HAL_ETH_DMARxDescListInit+0x6a>
 8004fa6:	2401      	movs	r4, #1
 8004fa8:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8004fac:	2402      	movs	r4, #2
 8004fae:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8004fb2:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 8004fb4:	2400      	movs	r4, #0
 8004fb6:	e001      	b.n	8004fbc <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8004fb8:	60e9      	str	r1, [r5, #12]
  for(i=0U; i < RxBuffCount; i++)
 8004fba:	3401      	adds	r4, #1
 8004fbc:	429c      	cmp	r4, r3
 8004fbe:	d215      	bcs.n	8004fec <HAL_ETH_DMARxDescListInit+0x50>
    DMARxDesc = DMARxDescTab+i;
 8004fc0:	0166      	lsls	r6, r4, #5
 8004fc2:	eb01 1544 	add.w	r5, r1, r4, lsl #5
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004fc6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8004fca:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8004fcc:	f244 56f4 	movw	r6, #17908	; 0x45f4
 8004fd0:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8004fd2:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8004fd6:	fb06 2604 	mla	r6, r6, r4, r2
 8004fda:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1U))
 8004fdc:	1e5e      	subs	r6, r3, #1
 8004fde:	42a6      	cmp	r6, r4
 8004fe0:	d9ea      	bls.n	8004fb8 <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8004fe2:	1c66      	adds	r6, r4, #1
 8004fe4:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8004fe8:	60ee      	str	r6, [r5, #12]
 8004fea:	e7e6      	b.n	8004fba <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8004fec:	6802      	ldr	r2, [r0, #0]
 8004fee:	f241 030c 	movw	r3, #4108	; 0x100c
 8004ff2:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8005000:	4618      	mov	r0, r3
}
 8005002:	bcf0      	pop	{r4, r5, r6, r7}
 8005004:	4770      	bx	lr
  __HAL_LOCK(heth);
 8005006:	2002      	movs	r0, #2
 8005008:	e7fb      	b.n	8005002 <HAL_ETH_DMARxDescListInit+0x66>
	...

0800500c <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 800500c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8005010:	2b01      	cmp	r3, #1
 8005012:	f000 8085 	beq.w	8005120 <HAL_ETH_TransmitFrame+0x114>
 8005016:	2301      	movs	r3, #1
 8005018:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800501c:	2302      	movs	r3, #2
 800501e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8005022:	b1b1      	cbz	r1, 8005052 <HAL_ETH_TransmitFrame+0x46>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005024:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	2a00      	cmp	r2, #0
 800502a:	db1a      	blt.n	8005062 <HAL_ETH_TransmitFrame+0x56>
{
 800502c:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 800502e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005032:	4291      	cmp	r1, r2
 8005034:	d91d      	bls.n	8005072 <HAL_ETH_TransmitFrame+0x66>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8005036:	4c3b      	ldr	r4, [pc, #236]	; (8005124 <HAL_ETH_TransmitFrame+0x118>)
 8005038:	fba4 2401 	umull	r2, r4, r4, r1
 800503c:	0aa4      	lsrs	r4, r4, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800503e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005042:	fb02 1214 	mls	r2, r2, r4, r1
 8005046:	b102      	cbz	r2, 800504a <HAL_ETH_TransmitFrame+0x3e>
      bufcount++;
 8005048:	3401      	adds	r4, #1
  if (bufcount == 1U)
 800504a:	2c01      	cmp	r4, #1
 800504c:	d011      	beq.n	8005072 <HAL_ETH_TransmitFrame+0x66>
    for (i=0U; i< bufcount; i++)
 800504e:	2300      	movs	r3, #0
 8005050:	e048      	b.n	80050e4 <HAL_ETH_TransmitFrame+0xd8>
    heth->State = HAL_ETH_STATE_READY;
 8005052:	2301      	movs	r3, #1
 8005054:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8005058:	2200      	movs	r2, #0
 800505a:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 800505e:	4618      	mov	r0, r3
 8005060:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8005062:	2312      	movs	r3, #18
 8005064:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8005068:	2300      	movs	r3, #0
 800506a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 800506e:	2001      	movs	r0, #1
 8005070:	4770      	bx	lr
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8005078:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800507a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800507c:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8005080:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8005082:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8005084:	6813      	ldr	r3, [r2, #0]
 8005086:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800508a:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800508c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8005092:	6803      	ldr	r3, [r0, #0]
 8005094:	f241 0214 	movw	r2, #4116	; 0x1014
 8005098:	589a      	ldr	r2, [r3, r2]
 800509a:	f012 0f04 	tst.w	r2, #4
 800509e:	d008      	beq.n	80050b2 <HAL_ETH_TransmitFrame+0xa6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80050a0:	f241 0214 	movw	r2, #4116	; 0x1014
 80050a4:	2104      	movs	r1, #4
 80050a6:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 80050a8:	6802      	ldr	r2, [r0, #0]
 80050aa:	f241 0304 	movw	r3, #4100	; 0x1004
 80050ae:	2100      	movs	r1, #0
 80050b0:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 80050b2:	2301      	movs	r3, #1
 80050b4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80050b8:	2300      	movs	r3, #0
 80050ba:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80050be:	4618      	mov	r0, r3
}
 80050c0:	bc30      	pop	{r4, r5}
 80050c2:	4770      	bx	lr
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80050c4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80050c6:	f240 55f4 	movw	r5, #1524	; 0x5f4
 80050ca:	6055      	str	r5, [r2, #4]
      if (i == (bufcount-1U))
 80050cc:	1e62      	subs	r2, r4, #1
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d017      	beq.n	8005102 <HAL_ETH_TransmitFrame+0xf6>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80050d2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80050d4:	682a      	ldr	r2, [r5, #0]
 80050d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80050da:	602a      	str	r2, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80050dc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80050de:	68d2      	ldr	r2, [r2, #12]
 80050e0:	62c2      	str	r2, [r0, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80050e2:	3301      	adds	r3, #1
 80050e4:	429c      	cmp	r4, r3
 80050e6:	d9d4      	bls.n	8005092 <HAL_ETH_TransmitFrame+0x86>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80050e8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80050ea:	682a      	ldr	r2, [r5, #0]
 80050ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80050f0:	602a      	str	r2, [r5, #0]
      if (i == 0U) 
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e6      	bne.n	80050c4 <HAL_ETH_TransmitFrame+0xb8>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80050f6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80050f8:	682a      	ldr	r2, [r5, #0]
 80050fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80050fe:	602a      	str	r2, [r5, #0]
 8005100:	e7e0      	b.n	80050c4 <HAL_ETH_TransmitFrame+0xb8>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8005102:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8005104:	682a      	ldr	r2, [r5, #0]
 8005106:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800510a:	602a      	str	r2, [r5, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800510c:	4a06      	ldr	r2, [pc, #24]	; (8005128 <HAL_ETH_TransmitFrame+0x11c>)
 800510e:	fb02 1204 	mla	r2, r2, r4, r1
 8005112:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8005116:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8005118:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800511c:	606a      	str	r2, [r5, #4]
 800511e:	e7d8      	b.n	80050d2 <HAL_ETH_TransmitFrame+0xc6>
  __HAL_LOCK(heth);
 8005120:	2002      	movs	r0, #2
}
 8005122:	4770      	bx	lr
 8005124:	ac02b00b 	.word	0xac02b00b
 8005128:	fffffa0c 	.word	0xfffffa0c

0800512c <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 800512c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8005130:	2b01      	cmp	r3, #1
 8005132:	d040      	beq.n	80051b6 <HAL_ETH_GetReceivedFrame+0x8a>
 8005134:	2301      	movs	r3, #1
 8005136:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800513a:	2302      	movs	r3, #2
 800513c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8005140:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	2a00      	cmp	r2, #0
 8005146:	db0e      	blt.n	8005166 <HAL_ETH_GetReceivedFrame+0x3a>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800514e:	d112      	bne.n	8005176 <HAL_ETH_GetReceivedFrame+0x4a>
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005156:	d028      	beq.n	80051aa <HAL_ETH_GetReceivedFrame+0x7e>
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8005158:	6303      	str	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800515a:	2200      	movs	r2, #0
 800515c:	6342      	str	r2, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 800515e:	2201      	movs	r2, #1
 8005160:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	6283      	str	r3, [r0, #40]	; 0x28
  heth->State = HAL_ETH_STATE_READY;
 8005166:	2301      	movs	r3, #1
 8005168:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800516c:	2200      	movs	r2, #0
 800516e:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8005172:	4618      	mov	r0, r3
 8005174:	4770      	bx	lr
      (heth->RxFrameInfos).SegCount++;
 8005176:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005178:	3201      	adds	r2, #1
 800517a:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos).SegCount == 1U)
 800517c:	2a01      	cmp	r2, #1
 800517e:	d012      	beq.n	80051a6 <HAL_ETH_GetReceivedFrame+0x7a>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8005180:	6343      	str	r3, [r0, #52]	; 0x34
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8005188:	3a04      	subs	r2, #4
      heth->RxFrameInfos.length = framelength;
 800518a:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800518c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800518e:	6892      	ldr	r2, [r2, #8]
 8005190:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8005196:	2301      	movs	r3, #1
 8005198:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800519c:	2300      	movs	r3, #0
 800519e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 80051a2:	4618      	mov	r0, r3
 80051a4:	4770      	bx	lr
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80051a6:	6303      	str	r3, [r0, #48]	; 0x30
 80051a8:	e7ea      	b.n	8005180 <HAL_ETH_GetReceivedFrame+0x54>
      (heth->RxFrameInfos).SegCount++;
 80051aa:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80051ac:	3201      	adds	r2, #1
 80051ae:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	6283      	str	r3, [r0, #40]	; 0x28
 80051b4:	e7d7      	b.n	8005166 <HAL_ETH_GetReceivedFrame+0x3a>
  __HAL_LOCK(heth);
 80051b6:	2002      	movs	r0, #2
}
 80051b8:	4770      	bx	lr

080051ba <HAL_ETH_ReadPHYRegister>:
{
 80051ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80051bc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b82      	cmp	r3, #130	; 0x82
 80051c4:	d033      	beq.n	800522e <HAL_ETH_ReadPHYRegister+0x74>
 80051c6:	4605      	mov	r5, r0
 80051c8:	4616      	mov	r6, r2
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80051ca:	2382      	movs	r3, #130	; 0x82
 80051cc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 80051d0:	6800      	ldr	r0, [r0, #0]
 80051d2:	6902      	ldr	r2, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80051d4:	f002 021c 	and.w	r2, r2, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80051d8:	8a2b      	ldrh	r3, [r5, #16]
 80051da:	02db      	lsls	r3, r3, #11
 80051dc:	b29b      	uxth	r3, r3
 80051de:	4313      	orrs	r3, r2
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80051e0:	018c      	lsls	r4, r1, #6
 80051e2:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80051e6:	431c      	orrs	r4, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80051e8:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 80051ec:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 80051ee:	f7ff fcdf 	bl	8004bb0 <HAL_GetTick>
 80051f2:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80051f4:	f014 0f01 	tst.w	r4, #1
 80051f8:	d010      	beq.n	800521c <HAL_ETH_ReadPHYRegister+0x62>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80051fa:	f7ff fcd9 	bl	8004bb0 <HAL_GetTick>
 80051fe:	1bc3      	subs	r3, r0, r7
 8005200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005204:	d202      	bcs.n	800520c <HAL_ETH_ReadPHYRegister+0x52>
    tmpreg1 = heth->Instance->MACMIIAR;
 8005206:	682b      	ldr	r3, [r5, #0]
 8005208:	691c      	ldr	r4, [r3, #16]
 800520a:	e7f3      	b.n	80051f4 <HAL_ETH_ReadPHYRegister+0x3a>
      heth->State= HAL_ETH_STATE_READY;
 800520c:	2301      	movs	r3, #1
 800520e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8005212:	2300      	movs	r3, #0
 8005214:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8005218:	2003      	movs	r0, #3
 800521a:	e007      	b.n	800522c <HAL_ETH_ReadPHYRegister+0x72>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	b29b      	uxth	r3, r3
 8005222:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8005224:	2301      	movs	r3, #1
 8005226:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 800522a:	2000      	movs	r0, #0
}
 800522c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800522e:	2002      	movs	r0, #2
 8005230:	e7fc      	b.n	800522c <HAL_ETH_ReadPHYRegister+0x72>

08005232 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8005232:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b42      	cmp	r3, #66	; 0x42
 800523a:	d032      	beq.n	80052a2 <HAL_ETH_WritePHYRegister+0x70>
{
 800523c:	b570      	push	{r4, r5, r6, lr}
 800523e:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8005240:	2342      	movs	r3, #66	; 0x42
 8005242:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8005246:	6806      	ldr	r6, [r0, #0]
 8005248:	6930      	ldr	r0, [r6, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800524a:	f000 001c 	and.w	r0, r0, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800524e:	8a2b      	ldrh	r3, [r5, #16]
 8005250:	02db      	lsls	r3, r3, #11
 8005252:	b29b      	uxth	r3, r3
 8005254:	4303      	orrs	r3, r0
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8005256:	018c      	lsls	r4, r1, #6
 8005258:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 800525c:	431c      	orrs	r4, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800525e:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005262:	b292      	uxth	r2, r2
 8005264:	6172      	str	r2, [r6, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8005266:	682b      	ldr	r3, [r5, #0]
 8005268:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 800526a:	f7ff fca1 	bl	8004bb0 <HAL_GetTick>
 800526e:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005270:	f014 0f01 	tst.w	r4, #1
 8005274:	d010      	beq.n	8005298 <HAL_ETH_WritePHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8005276:	f7ff fc9b 	bl	8004bb0 <HAL_GetTick>
 800527a:	1b83      	subs	r3, r0, r6
 800527c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005280:	d202      	bcs.n	8005288 <HAL_ETH_WritePHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 8005282:	682b      	ldr	r3, [r5, #0]
 8005284:	691c      	ldr	r4, [r3, #16]
 8005286:	e7f3      	b.n	8005270 <HAL_ETH_WritePHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8005288:	2301      	movs	r3, #1
 800528a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800528e:	2300      	movs	r3, #0
 8005290:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8005294:	2003      	movs	r0, #3
 8005296:	e003      	b.n	80052a0 <HAL_ETH_WritePHYRegister+0x6e>
  heth->State = HAL_ETH_STATE_READY;
 8005298:	2301      	movs	r3, #1
 800529a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 800529e:	2000      	movs	r0, #0
}
 80052a0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80052a2:	2002      	movs	r0, #2
}
 80052a4:	4770      	bx	lr
	...

080052a8 <HAL_ETH_Init>:
{
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 80052b0:	2800      	cmp	r0, #0
 80052b2:	f000 810f 	beq.w	80054d4 <HAL_ETH_Init+0x22c>
 80052b6:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 80052b8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d034      	beq.n	800532a <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052c0:	2300      	movs	r3, #0
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	4b84      	ldr	r3, [pc, #528]	; (80054d8 <HAL_ETH_Init+0x230>)
 80052c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052cc:	645a      	str	r2, [r3, #68]	; 0x44
 80052ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80052d8:	4b80      	ldr	r3, [pc, #512]	; (80054dc <HAL_ETH_Init+0x234>)
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80052e0:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	6a21      	ldr	r1, [r4, #32]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80052f8:	f7ff fc5a 	bl	8004bb0 <HAL_GetTick>
 80052fc:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8005304:	6812      	ldr	r2, [r2, #0]
 8005306:	f012 0f01 	tst.w	r2, #1
 800530a:	d013      	beq.n	8005334 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800530c:	f7ff fc50 	bl	8004bb0 <HAL_GetTick>
 8005310:	1b40      	subs	r0, r0, r5
 8005312:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8005316:	d9f2      	bls.n	80052fe <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8005318:	2503      	movs	r5, #3
 800531a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800531e:	2300      	movs	r3, #0
 8005320:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8005324:	4628      	mov	r0, r5
 8005326:	b002      	add	sp, #8
 8005328:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 800532a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800532e:	f000 fe13 	bl	8005f58 <HAL_ETH_MspInit>
 8005332:	e7c5      	b.n	80052c0 <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8005334:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8005336:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 800533a:	f000 faad 	bl	8005898 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800533e:	4b68      	ldr	r3, [pc, #416]	; (80054e0 <HAL_ETH_Init+0x238>)
 8005340:	4403      	add	r3, r0
 8005342:	4a68      	ldr	r2, [pc, #416]	; (80054e4 <HAL_ETH_Init+0x23c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d256      	bcs.n	80053f6 <HAL_ETH_Init+0x14e>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8005348:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8005350:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005354:	2100      	movs	r1, #0
 8005356:	4620      	mov	r0, r4
 8005358:	f7ff ff6b 	bl	8005232 <HAL_ETH_WritePHYRegister>
 800535c:	4605      	mov	r5, r0
 800535e:	2800      	cmp	r0, #0
 8005360:	d161      	bne.n	8005426 <HAL_ETH_Init+0x17e>
  HAL_Delay(PHY_RESET_DELAY);
 8005362:	f640 70ff 	movw	r0, #4095	; 0xfff
 8005366:	f7ff fc29 	bl	8004bbc <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800536a:	6863      	ldr	r3, [r4, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 8091 	beq.w	8005494 <HAL_ETH_Init+0x1ec>
    tickstart = HAL_GetTick();
 8005372:	f7ff fc1d 	bl	8004bb0 <HAL_GetTick>
 8005376:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8005378:	aa01      	add	r2, sp, #4
 800537a:	2101      	movs	r1, #1
 800537c:	4620      	mov	r0, r4
 800537e:	f7ff ff1c 	bl	80051ba <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8005382:	f7ff fc15 	bl	8004bb0 <HAL_GetTick>
 8005386:	1b80      	subs	r0, r0, r6
 8005388:	f241 3388 	movw	r3, #5000	; 0x1388
 800538c:	4298      	cmp	r0, r3
 800538e:	d852      	bhi.n	8005436 <HAL_ETH_Init+0x18e>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8005390:	9b01      	ldr	r3, [sp, #4]
 8005392:	f013 0f04 	tst.w	r3, #4
 8005396:	d0ef      	beq.n	8005378 <HAL_ETH_Init+0xd0>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8005398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800539c:	2100      	movs	r1, #0
 800539e:	4620      	mov	r0, r4
 80053a0:	f7ff ff47 	bl	8005232 <HAL_ETH_WritePHYRegister>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d152      	bne.n	800544e <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 80053a8:	f7ff fc02 	bl	8004bb0 <HAL_GetTick>
 80053ac:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80053ae:	aa01      	add	r2, sp, #4
 80053b0:	2101      	movs	r1, #1
 80053b2:	4620      	mov	r0, r4
 80053b4:	f7ff ff01 	bl	80051ba <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80053b8:	f7ff fbfa 	bl	8004bb0 <HAL_GetTick>
 80053bc:	1b80      	subs	r0, r0, r6
 80053be:	f241 3388 	movw	r3, #5000	; 0x1388
 80053c2:	4298      	cmp	r0, r3
 80053c4:	d84b      	bhi.n	800545e <HAL_ETH_Init+0x1b6>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80053c6:	9b01      	ldr	r3, [sp, #4]
 80053c8:	f013 0f20 	tst.w	r3, #32
 80053cc:	d0ef      	beq.n	80053ae <HAL_ETH_Init+0x106>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80053ce:	aa01      	add	r2, sp, #4
 80053d0:	211f      	movs	r1, #31
 80053d2:	4620      	mov	r0, r4
 80053d4:	f7ff fef1 	bl	80051ba <HAL_ETH_ReadPHYRegister>
 80053d8:	2800      	cmp	r0, #0
 80053da:	d14c      	bne.n	8005476 <HAL_ETH_Init+0x1ce>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80053dc:	9b01      	ldr	r3, [sp, #4]
 80053de:	f013 0f04 	tst.w	r3, #4
 80053e2:	d050      	beq.n	8005486 <HAL_ETH_Init+0x1de>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80053e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053e8:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80053ea:	f013 0f02 	tst.w	r3, #2
 80053ee:	d04d      	beq.n	800548c <HAL_ETH_Init+0x1e4>
      (heth->Init).Speed = ETH_SPEED_10M; 
 80053f0:	2300      	movs	r3, #0
 80053f2:	60a3      	str	r3, [r4, #8]
 80053f4:	e05e      	b.n	80054b4 <HAL_ETH_Init+0x20c>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80053f6:	4b3c      	ldr	r3, [pc, #240]	; (80054e8 <HAL_ETH_Init+0x240>)
 80053f8:	4403      	add	r3, r0
 80053fa:	4a3c      	ldr	r2, [pc, #240]	; (80054ec <HAL_ETH_Init+0x244>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d802      	bhi.n	8005406 <HAL_ETH_Init+0x15e>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8005400:	f045 050c 	orr.w	r5, r5, #12
 8005404:	e7a2      	b.n	800534c <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005406:	4b3a      	ldr	r3, [pc, #232]	; (80054f0 <HAL_ETH_Init+0x248>)
 8005408:	4403      	add	r3, r0
 800540a:	4a3a      	ldr	r2, [pc, #232]	; (80054f4 <HAL_ETH_Init+0x24c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d39d      	bcc.n	800534c <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005410:	4b39      	ldr	r3, [pc, #228]	; (80054f8 <HAL_ETH_Init+0x250>)
 8005412:	4403      	add	r3, r0
 8005414:	4a39      	ldr	r2, [pc, #228]	; (80054fc <HAL_ETH_Init+0x254>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d802      	bhi.n	8005420 <HAL_ETH_Init+0x178>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800541a:	f045 0504 	orr.w	r5, r5, #4
 800541e:	e795      	b.n	800534c <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8005420:	f045 0510 	orr.w	r5, r5, #16
 8005424:	e792      	b.n	800534c <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 8005426:	2101      	movs	r1, #1
 8005428:	4620      	mov	r0, r4
 800542a:	f7ff fcf1 	bl	8004e10 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 800542e:	2501      	movs	r5, #1
 8005430:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 8005434:	e776      	b.n	8005324 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8005436:	2101      	movs	r1, #1
 8005438:	4620      	mov	r0, r4
 800543a:	f7ff fce9 	bl	8004e10 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 800543e:	2301      	movs	r3, #1
 8005440:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8005444:	2300      	movs	r3, #0
 8005446:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 800544a:	2503      	movs	r5, #3
 800544c:	e76a      	b.n	8005324 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 800544e:	2101      	movs	r1, #1
 8005450:	4620      	mov	r0, r4
 8005452:	f7ff fcdd 	bl	8004e10 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8005456:	2501      	movs	r5, #1
 8005458:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 800545c:	e762      	b.n	8005324 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 800545e:	2101      	movs	r1, #1
 8005460:	4620      	mov	r0, r4
 8005462:	f7ff fcd5 	bl	8004e10 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8005466:	2301      	movs	r3, #1
 8005468:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800546c:	2300      	movs	r3, #0
 800546e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8005472:	2503      	movs	r5, #3
 8005474:	e756      	b.n	8005324 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8005476:	2101      	movs	r1, #1
 8005478:	4620      	mov	r0, r4
 800547a:	f7ff fcc9 	bl	8004e10 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800547e:	2501      	movs	r5, #1
 8005480:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8005484:	e74e      	b.n	8005324 <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8005486:	2200      	movs	r2, #0
 8005488:	60e2      	str	r2, [r4, #12]
 800548a:	e7ae      	b.n	80053ea <HAL_ETH_Init+0x142>
      (heth->Init).Speed = ETH_SPEED_100M;
 800548c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005490:	60a3      	str	r3, [r4, #8]
 8005492:	e00f      	b.n	80054b4 <HAL_ETH_Init+0x20c>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8005494:	68e2      	ldr	r2, [r4, #12]
 8005496:	f3c2 02cf 	ubfx	r2, r2, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800549a:	68a3      	ldr	r3, [r4, #8]
 800549c:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80054a0:	431a      	orrs	r2, r3
 80054a2:	2100      	movs	r1, #0
 80054a4:	4620      	mov	r0, r4
 80054a6:	f7ff fec4 	bl	8005232 <HAL_ETH_WritePHYRegister>
 80054aa:	b958      	cbnz	r0, 80054c4 <HAL_ETH_Init+0x21c>
    HAL_Delay(PHY_CONFIG_DELAY);
 80054ac:	f640 70ff 	movw	r0, #4095	; 0xfff
 80054b0:	f7ff fb84 	bl	8004bbc <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 80054b4:	2100      	movs	r1, #0
 80054b6:	4620      	mov	r0, r4
 80054b8:	f7ff fcaa 	bl	8004e10 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 80054bc:	2301      	movs	r3, #1
 80054be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 80054c2:	e72f      	b.n	8005324 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 80054c4:	2101      	movs	r1, #1
 80054c6:	4620      	mov	r0, r4
 80054c8:	f7ff fca2 	bl	8004e10 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80054cc:	2501      	movs	r5, #1
 80054ce:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 80054d2:	e727      	b.n	8005324 <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 80054d4:	2501      	movs	r5, #1
 80054d6:	e725      	b.n	8005324 <HAL_ETH_Init+0x7c>
 80054d8:	40023800 	.word	0x40023800
 80054dc:	40013800 	.word	0x40013800
 80054e0:	feced300 	.word	0xfeced300
 80054e4:	00e4e1c0 	.word	0x00e4e1c0
 80054e8:	fde9f140 	.word	0xfde9f140
 80054ec:	017d783f 	.word	0x017d783f
 80054f0:	fc6c7900 	.word	0xfc6c7900
 80054f4:	02625a00 	.word	0x02625a00
 80054f8:	fa0a1f00 	.word	0xfa0a1f00
 80054fc:	02faf07f 	.word	0x02faf07f

08005500 <HAL_ETH_Start>:
{  
 8005500:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 8005502:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8005506:	2b01      	cmp	r3, #1
 8005508:	d01a      	beq.n	8005540 <HAL_ETH_Start+0x40>
 800550a:	4604      	mov	r4, r0
 800550c:	2501      	movs	r5, #1
 800550e:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8005512:	2302      	movs	r3, #2
 8005514:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 8005518:	f7ff fc0e 	bl	8004d38 <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 800551c:	4620      	mov	r0, r4
 800551e:	f7ff fc20 	bl	8004d62 <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 8005522:	4620      	mov	r0, r4
 8005524:	f7ff fc32 	bl	8004d8c <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 8005528:	4620      	mov	r0, r4
 800552a:	f7ff fbcf 	bl	8004ccc <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 800552e:	4620      	mov	r0, r4
 8005530:	f7ff fbdc 	bl	8004cec <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 8005534:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8005538:	2000      	movs	r0, #0
 800553a:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
}
 800553e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(heth);
 8005540:	2002      	movs	r0, #2
 8005542:	e7fc      	b.n	800553e <HAL_ETH_Start+0x3e>

08005544 <HAL_ETH_Stop>:
{  
 8005544:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 8005546:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800554a:	2b01      	cmp	r3, #1
 800554c:	d01a      	beq.n	8005584 <HAL_ETH_Stop+0x40>
 800554e:	4604      	mov	r4, r0
 8005550:	2501      	movs	r5, #1
 8005552:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8005556:	2302      	movs	r3, #2
 8005558:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_DMATransmissionDisable(heth);
 800555c:	f7ff fbbe 	bl	8004cdc <ETH_DMATransmissionDisable>
  ETH_DMAReceptionDisable(heth);
 8005560:	4620      	mov	r0, r4
 8005562:	f7ff fbcb 	bl	8004cfc <ETH_DMAReceptionDisable>
  ETH_MACReceptionDisable(heth);
 8005566:	4620      	mov	r0, r4
 8005568:	f7ff fc27 	bl	8004dba <ETH_MACReceptionDisable>
  ETH_FlushTransmitFIFO(heth);
 800556c:	4620      	mov	r0, r4
 800556e:	f7ff fc0d 	bl	8004d8c <ETH_FlushTransmitFIFO>
  ETH_MACTransmissionDisable(heth);
 8005572:	4620      	mov	r0, r4
 8005574:	f7ff fc36 	bl	8004de4 <ETH_MACTransmissionDisable>
  heth->State = HAL_ETH_STATE_READY;
 8005578:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800557c:	2000      	movs	r0, #0
 800557e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
}
 8005582:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(heth);
 8005584:	2002      	movs	r0, #2
 8005586:	e7fc      	b.n	8005582 <HAL_ETH_Stop+0x3e>

08005588 <HAL_ETH_ConfigMAC>:
  __HAL_LOCK(heth);
 8005588:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800558c:	2b01      	cmp	r3, #1
 800558e:	f000 808e 	beq.w	80056ae <HAL_ETH_ConfigMAC+0x126>
{
 8005592:	b570      	push	{r4, r5, r6, lr}
 8005594:	4605      	mov	r5, r0
 8005596:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 8005598:	2301      	movs	r3, #1
 800559a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State= HAL_ETH_STATE_BUSY;
 800559e:	2302      	movs	r3, #2
 80055a0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (macconf != NULL)
 80055a4:	2900      	cmp	r1, #0
 80055a6:	d071      	beq.n	800568c <HAL_ETH_ConfigMAC+0x104>
    tmpreg1 = (heth->Instance)->MACCR;
 80055a8:	6802      	ldr	r2, [r0, #0]
 80055aa:	6813      	ldr	r3, [r2, #0]
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80055ac:	4941      	ldr	r1, [pc, #260]	; (80056b4 <HAL_ETH_ConfigMAC+0x12c>)
 80055ae:	4019      	ands	r1, r3
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80055b0:	6823      	ldr	r3, [r4, #0]
                         macconf->Jabber | 
 80055b2:	6860      	ldr	r0, [r4, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80055b4:	4303      	orrs	r3, r0
                         macconf->InterFrameGap |
 80055b6:	68a0      	ldr	r0, [r4, #8]
                         macconf->Jabber | 
 80055b8:	4303      	orrs	r3, r0
                         macconf->CarrierSense |
 80055ba:	68e0      	ldr	r0, [r4, #12]
                         macconf->InterFrameGap |
 80055bc:	4303      	orrs	r3, r0
                         (heth->Init).Speed | 
 80055be:	68a8      	ldr	r0, [r5, #8]
                         macconf->CarrierSense |
 80055c0:	4303      	orrs	r3, r0
                         macconf->ReceiveOwn |
 80055c2:	6920      	ldr	r0, [r4, #16]
                         (heth->Init).Speed | 
 80055c4:	4303      	orrs	r3, r0
                         macconf->LoopbackMode |
 80055c6:	6960      	ldr	r0, [r4, #20]
                         macconf->ReceiveOwn |
 80055c8:	4303      	orrs	r3, r0
                         (heth->Init).DuplexMode | 
 80055ca:	68e8      	ldr	r0, [r5, #12]
                         macconf->LoopbackMode |
 80055cc:	4303      	orrs	r3, r0
                         macconf->ChecksumOffload |    
 80055ce:	69a0      	ldr	r0, [r4, #24]
                         (heth->Init).DuplexMode | 
 80055d0:	4303      	orrs	r3, r0
                         macconf->RetryTransmission | 
 80055d2:	69e0      	ldr	r0, [r4, #28]
                         macconf->ChecksumOffload |    
 80055d4:	4303      	orrs	r3, r0
                         macconf->AutomaticPadCRCStrip | 
 80055d6:	6a20      	ldr	r0, [r4, #32]
                         macconf->RetryTransmission | 
 80055d8:	4303      	orrs	r3, r0
                         macconf->BackOffLimit | 
 80055da:	6a60      	ldr	r0, [r4, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80055dc:	4303      	orrs	r3, r0
                         macconf->DeferralCheck);
 80055de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                         macconf->BackOffLimit | 
 80055e0:	4303      	orrs	r3, r0
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80055e2:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80055e4:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80055e6:	682b      	ldr	r3, [r5, #0]
 80055e8:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80055ea:	2001      	movs	r0, #1
 80055ec:	f7ff fae6 	bl	8004bbc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80055f0:	682b      	ldr	r3, [r5, #0]
 80055f2:	601e      	str	r6, [r3, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80055f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80055f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80055f8:	4313      	orrs	r3, r2
                                          macconf->PassControlFrames |
 80055fa:	6b62      	ldr	r2, [r4, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80055fc:	4313      	orrs	r3, r2
                                          macconf->BroadcastFramesReception | 
 80055fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
                                          macconf->PassControlFrames |
 8005600:	4313      	orrs	r3, r2
                                          macconf->DestinationAddrFilter |
 8005602:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8005604:	4313      	orrs	r3, r2
                                          macconf->PromiscuousMode |
 8005606:	6c22      	ldr	r2, [r4, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8005608:	4313      	orrs	r3, r2
                                          macconf->MulticastFramesFilter |
 800560a:	6c62      	ldr	r2, [r4, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800560c:	4313      	orrs	r3, r2
                                          macconf->UnicastFramesFilter);
 800560e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005610:	682a      	ldr	r2, [r5, #0]
                                          macconf->MulticastFramesFilter |
 8005612:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005614:	6053      	str	r3, [r2, #4]
     tmpreg1 = (heth->Instance)->MACFFR;
 8005616:	682b      	ldr	r3, [r5, #0]
 8005618:	685e      	ldr	r6, [r3, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800561a:	2001      	movs	r0, #1
 800561c:	f7ff face 	bl	8004bbc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8005620:	682b      	ldr	r3, [r5, #0]
 8005622:	605e      	str	r6, [r3, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8005624:	682b      	ldr	r3, [r5, #0]
 8005626:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005628:	609a      	str	r2, [r3, #8]
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800562a:	682b      	ldr	r3, [r5, #0]
 800562c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800562e:	60da      	str	r2, [r3, #12]
     tmpreg1 = (heth->Instance)->MACFCR;
 8005630:	6829      	ldr	r1, [r5, #0]
 8005632:	698a      	ldr	r2, [r1, #24]
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005634:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8005638:	0412      	lsls	r2, r2, #16
 800563a:	0c12      	lsrs	r2, r2, #16
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800563c:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ZeroQuantaPause |
 800563e:	6da3      	ldr	r3, [r4, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005640:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                          macconf->PauseLowThreshold |
 8005644:	6de0      	ldr	r0, [r4, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8005646:	4303      	orrs	r3, r0
                          macconf->UnicastPauseFrameDetect | 
 8005648:	6e20      	ldr	r0, [r4, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800564a:	4303      	orrs	r3, r0
                          macconf->ReceiveFlowControl |
 800564c:	6e60      	ldr	r0, [r4, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800564e:	4303      	orrs	r3, r0
                          macconf->TransmitFlowControl); 
 8005650:	6ea0      	ldr	r0, [r4, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8005652:	4303      	orrs	r3, r0
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005654:	4313      	orrs	r3, r2
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005656:	618b      	str	r3, [r1, #24]
     tmpreg1 = (heth->Instance)->MACFCR;
 8005658:	682b      	ldr	r3, [r5, #0]
 800565a:	699e      	ldr	r6, [r3, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800565c:	2001      	movs	r0, #1
 800565e:	f7ff faad 	bl	8004bbc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8005662:	682b      	ldr	r3, [r5, #0]
 8005664:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005666:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8005668:	6f21      	ldr	r1, [r4, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800566a:	682a      	ldr	r2, [r5, #0]
 800566c:	430b      	orrs	r3, r1
 800566e:	61d3      	str	r3, [r2, #28]
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8005674:	2001      	movs	r0, #1
 8005676:	f7ff faa1 	bl	8004bbc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800567a:	682b      	ldr	r3, [r5, #0]
 800567c:	61dc      	str	r4, [r3, #28]
  heth->State= HAL_ETH_STATE_READY;
 800567e:	2301      	movs	r3, #1
 8005680:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8005684:	2000      	movs	r0, #0
 8005686:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
}
 800568a:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = (heth->Instance)->MACCR;
 800568c:	6801      	ldr	r1, [r0, #0]
 800568e:	680a      	ldr	r2, [r1, #0]
    tmpreg1 &= ~(0x00004800U);
 8005690:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8005694:	6883      	ldr	r3, [r0, #8]
 8005696:	68c0      	ldr	r0, [r0, #12]
 8005698:	4303      	orrs	r3, r0
 800569a:	4313      	orrs	r3, r2
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800569c:	600b      	str	r3, [r1, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 800569e:	682b      	ldr	r3, [r5, #0]
 80056a0:	681c      	ldr	r4, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80056a2:	2001      	movs	r0, #1
 80056a4:	f7ff fa8a 	bl	8004bbc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	601c      	str	r4, [r3, #0]
 80056ac:	e7e7      	b.n	800567e <HAL_ETH_ConfigMAC+0xf6>
  __HAL_LOCK(heth);
 80056ae:	2002      	movs	r0, #2
}
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	ff20810f 	.word	0xff20810f

080056b8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056b8:	2300      	movs	r3, #0
 80056ba:	2b0f      	cmp	r3, #15
 80056bc:	f200 80dd 	bhi.w	800587a <HAL_GPIO_Init+0x1c2>
{
 80056c0:	b4f0      	push	{r4, r5, r6, r7}
 80056c2:	b082      	sub	sp, #8
 80056c4:	e05d      	b.n	8005782 <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80056c6:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056c8:	005f      	lsls	r7, r3, #1
 80056ca:	2403      	movs	r4, #3
 80056cc:	40bc      	lsls	r4, r7
 80056ce:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056d2:	68cc      	ldr	r4, [r1, #12]
 80056d4:	40bc      	lsls	r4, r7
 80056d6:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80056d8:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056da:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056dc:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80056e0:	684c      	ldr	r4, [r1, #4]
 80056e2:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80056e6:	409a      	lsls	r2, r3
 80056e8:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80056ea:	6042      	str	r2, [r0, #4]
 80056ec:	e057      	b.n	800579e <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056ee:	08dc      	lsrs	r4, r3, #3
 80056f0:	3408      	adds	r4, #8
 80056f2:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056f6:	f003 0207 	and.w	r2, r3, #7
 80056fa:	0096      	lsls	r6, r2, #2
 80056fc:	220f      	movs	r2, #15
 80056fe:	40b2      	lsls	r2, r6
 8005700:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005704:	690a      	ldr	r2, [r1, #16]
 8005706:	40b2      	lsls	r2, r6
 8005708:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 800570a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 800570e:	e05a      	b.n	80057c6 <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005710:	2207      	movs	r2, #7
 8005712:	e000      	b.n	8005716 <HAL_GPIO_Init+0x5e>
 8005714:	2200      	movs	r2, #0
 8005716:	40b2      	lsls	r2, r6
 8005718:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800571a:	3402      	adds	r4, #2
 800571c:	4e57      	ldr	r6, [pc, #348]	; (800587c <HAL_GPIO_Init+0x1c4>)
 800571e:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005722:	4a57      	ldr	r2, [pc, #348]	; (8005880 <HAL_GPIO_Init+0x1c8>)
 8005724:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8005726:	43ea      	mvns	r2, r5
 8005728:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800572c:	684f      	ldr	r7, [r1, #4]
 800572e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8005732:	d001      	beq.n	8005738 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8005734:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8005738:	4c51      	ldr	r4, [pc, #324]	; (8005880 <HAL_GPIO_Init+0x1c8>)
 800573a:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 800573c:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800573e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005742:	684f      	ldr	r7, [r1, #4]
 8005744:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8005748:	d001      	beq.n	800574e <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 800574a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 800574e:	4c4c      	ldr	r4, [pc, #304]	; (8005880 <HAL_GPIO_Init+0x1c8>)
 8005750:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005752:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8005754:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005758:	684f      	ldr	r7, [r1, #4]
 800575a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800575e:	d001      	beq.n	8005764 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8005760:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8005764:	4c46      	ldr	r4, [pc, #280]	; (8005880 <HAL_GPIO_Init+0x1c8>)
 8005766:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8005768:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800576a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800576c:	684e      	ldr	r6, [r1, #4]
 800576e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8005772:	d001      	beq.n	8005778 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8005774:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8005778:	4c41      	ldr	r4, [pc, #260]	; (8005880 <HAL_GPIO_Init+0x1c8>)
 800577a:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800577c:	3301      	adds	r3, #1
 800577e:	2b0f      	cmp	r3, #15
 8005780:	d878      	bhi.n	8005874 <HAL_GPIO_Init+0x1bc>
    ioposition = 0x01U << position;
 8005782:	2201      	movs	r2, #1
 8005784:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005786:	680c      	ldr	r4, [r1, #0]
 8005788:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 800578c:	ea32 0404 	bics.w	r4, r2, r4
 8005790:	d1f4      	bne.n	800577c <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005792:	684c      	ldr	r4, [r1, #4]
 8005794:	f004 0403 	and.w	r4, r4, #3
 8005798:	3c01      	subs	r4, #1
 800579a:	2c01      	cmp	r4, #1
 800579c:	d993      	bls.n	80056c6 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800579e:	684a      	ldr	r2, [r1, #4]
 80057a0:	f002 0203 	and.w	r2, r2, #3
 80057a4:	2a03      	cmp	r2, #3
 80057a6:	d009      	beq.n	80057bc <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 80057a8:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057aa:	005e      	lsls	r6, r3, #1
 80057ac:	2203      	movs	r2, #3
 80057ae:	40b2      	lsls	r2, r6
 80057b0:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057b4:	688a      	ldr	r2, [r1, #8]
 80057b6:	40b2      	lsls	r2, r6
 80057b8:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80057ba:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057bc:	684a      	ldr	r2, [r1, #4]
 80057be:	f002 0203 	and.w	r2, r2, #3
 80057c2:	2a02      	cmp	r2, #2
 80057c4:	d093      	beq.n	80056ee <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 80057c6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057c8:	005e      	lsls	r6, r3, #1
 80057ca:	2203      	movs	r2, #3
 80057cc:	40b2      	lsls	r2, r6
 80057ce:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057d2:	684a      	ldr	r2, [r1, #4]
 80057d4:	f002 0203 	and.w	r2, r2, #3
 80057d8:	40b2      	lsls	r2, r6
 80057da:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80057dc:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80057de:	684a      	ldr	r2, [r1, #4]
 80057e0:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80057e4:	d0ca      	beq.n	800577c <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057e6:	2200      	movs	r2, #0
 80057e8:	9201      	str	r2, [sp, #4]
 80057ea:	4a26      	ldr	r2, [pc, #152]	; (8005884 <HAL_GPIO_Init+0x1cc>)
 80057ec:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80057ee:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80057f2:	6454      	str	r4, [r2, #68]	; 0x44
 80057f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80057f6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80057fa:	9201      	str	r2, [sp, #4]
 80057fc:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80057fe:	089c      	lsrs	r4, r3, #2
 8005800:	1ca6      	adds	r6, r4, #2
 8005802:	4a1e      	ldr	r2, [pc, #120]	; (800587c <HAL_GPIO_Init+0x1c4>)
 8005804:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005808:	f003 0203 	and.w	r2, r3, #3
 800580c:	0096      	lsls	r6, r2, #2
 800580e:	220f      	movs	r2, #15
 8005810:	40b2      	lsls	r2, r6
 8005812:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005816:	4a1c      	ldr	r2, [pc, #112]	; (8005888 <HAL_GPIO_Init+0x1d0>)
 8005818:	4290      	cmp	r0, r2
 800581a:	f43f af7b 	beq.w	8005714 <HAL_GPIO_Init+0x5c>
 800581e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005822:	4290      	cmp	r0, r2
 8005824:	d01a      	beq.n	800585c <HAL_GPIO_Init+0x1a4>
 8005826:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800582a:	4290      	cmp	r0, r2
 800582c:	d018      	beq.n	8005860 <HAL_GPIO_Init+0x1a8>
 800582e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005832:	4290      	cmp	r0, r2
 8005834:	d016      	beq.n	8005864 <HAL_GPIO_Init+0x1ac>
 8005836:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800583a:	4290      	cmp	r0, r2
 800583c:	d014      	beq.n	8005868 <HAL_GPIO_Init+0x1b0>
 800583e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005842:	4290      	cmp	r0, r2
 8005844:	d012      	beq.n	800586c <HAL_GPIO_Init+0x1b4>
 8005846:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800584a:	4290      	cmp	r0, r2
 800584c:	d010      	beq.n	8005870 <HAL_GPIO_Init+0x1b8>
 800584e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005852:	4290      	cmp	r0, r2
 8005854:	f43f af5c 	beq.w	8005710 <HAL_GPIO_Init+0x58>
 8005858:	2208      	movs	r2, #8
 800585a:	e75c      	b.n	8005716 <HAL_GPIO_Init+0x5e>
 800585c:	2201      	movs	r2, #1
 800585e:	e75a      	b.n	8005716 <HAL_GPIO_Init+0x5e>
 8005860:	2202      	movs	r2, #2
 8005862:	e758      	b.n	8005716 <HAL_GPIO_Init+0x5e>
 8005864:	2203      	movs	r2, #3
 8005866:	e756      	b.n	8005716 <HAL_GPIO_Init+0x5e>
 8005868:	2204      	movs	r2, #4
 800586a:	e754      	b.n	8005716 <HAL_GPIO_Init+0x5e>
 800586c:	2205      	movs	r2, #5
 800586e:	e752      	b.n	8005716 <HAL_GPIO_Init+0x5e>
 8005870:	2206      	movs	r2, #6
 8005872:	e750      	b.n	8005716 <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 8005874:	b002      	add	sp, #8
 8005876:	bcf0      	pop	{r4, r5, r6, r7}
 8005878:	4770      	bx	lr
 800587a:	4770      	bx	lr
 800587c:	40013800 	.word	0x40013800
 8005880:	40013c00 	.word	0x40013c00
 8005884:	40023800 	.word	0x40023800
 8005888:	40020000 	.word	0x40020000

0800588c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800588c:	b10a      	cbz	r2, 8005892 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800588e:	6181      	str	r1, [r0, #24]
 8005890:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005892:	0409      	lsls	r1, r1, #16
 8005894:	6181      	str	r1, [r0, #24]
  }
}
 8005896:	4770      	bx	lr

08005898 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005898:	4b01      	ldr	r3, [pc, #4]	; (80058a0 <HAL_RCC_GetHCLKFreq+0x8>)
 800589a:	6818      	ldr	r0, [r3, #0]
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	20000000 	.word	0x20000000

080058a4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80058a4:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80058a6:	680c      	ldr	r4, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a8:	fa94 f4a4 	rbit	r4, r4
 80058ac:	fab4 f484 	clz	r4, r4
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80058b0:	e04a      	b.n	8005948 <LL_GPIO_Init+0xa4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80058b2:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80058b4:	6882      	ldr	r2, [r0, #8]
 80058b6:	fa93 f5a3 	rbit	r5, r3
 80058ba:	fab5 f585 	clz	r5, r5
 80058be:	006d      	lsls	r5, r5, #1
 80058c0:	2703      	movs	r7, #3
 80058c2:	fa07 f505 	lsl.w	r5, r7, r5
 80058c6:	ea22 0205 	bic.w	r2, r2, r5
 80058ca:	fa93 f5a3 	rbit	r5, r3
 80058ce:	fab5 f585 	clz	r5, r5
 80058d2:	006d      	lsls	r5, r5, #1
 80058d4:	fa06 f505 	lsl.w	r5, r6, r5
 80058d8:	432a      	orrs	r2, r5
 80058da:	6082      	str	r2, [r0, #8]
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80058dc:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80058de:	6842      	ldr	r2, [r0, #4]
 80058e0:	ea22 0203 	bic.w	r2, r2, r3
 80058e4:	fb03 f505 	mul.w	r5, r3, r5
 80058e8:	432a      	orrs	r2, r5
 80058ea:	6042      	str	r2, [r0, #4]
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80058ec:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80058ee:	68c2      	ldr	r2, [r0, #12]
 80058f0:	fa93 f5a3 	rbit	r5, r3
 80058f4:	fab5 f585 	clz	r5, r5
 80058f8:	006d      	lsls	r5, r5, #1
 80058fa:	2703      	movs	r7, #3
 80058fc:	fa07 f505 	lsl.w	r5, r7, r5
 8005900:	ea22 0205 	bic.w	r2, r2, r5
 8005904:	fa93 f5a3 	rbit	r5, r3
 8005908:	fab5 f585 	clz	r5, r5
 800590c:	006d      	lsls	r5, r5, #1
 800590e:	fa06 f505 	lsl.w	r5, r6, r5
 8005912:	432a      	orrs	r2, r5
 8005914:	60c2      	str	r2, [r0, #12]
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005916:	684a      	ldr	r2, [r1, #4]
 8005918:	2a02      	cmp	r2, #2
 800591a:	d022      	beq.n	8005962 <LL_GPIO_Init+0xbe>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800591c:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800591e:	6805      	ldr	r5, [r0, #0]
 8005920:	fa93 f6a3 	rbit	r6, r3
 8005924:	fab6 f686 	clz	r6, r6
 8005928:	0076      	lsls	r6, r6, #1
 800592a:	2703      	movs	r7, #3
 800592c:	fa07 f606 	lsl.w	r6, r7, r6
 8005930:	ea25 0506 	bic.w	r5, r5, r6
 8005934:	fa93 f3a3 	rbit	r3, r3
 8005938:	fab3 f383 	clz	r3, r3
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	fa02 f303 	lsl.w	r3, r2, r3
 8005942:	432b      	orrs	r3, r5
 8005944:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8005946:	3401      	adds	r4, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005948:	680b      	ldr	r3, [r1, #0]
 800594a:	fa33 f204 	lsrs.w	r2, r3, r4
 800594e:	d03c      	beq.n	80059ca <LL_GPIO_Init+0x126>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005950:	2201      	movs	r2, #1
 8005952:	40a2      	lsls	r2, r4
    if (currentpin)
 8005954:	4013      	ands	r3, r2
 8005956:	d0f6      	beq.n	8005946 <LL_GPIO_Init+0xa2>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005958:	684a      	ldr	r2, [r1, #4]
 800595a:	3a01      	subs	r2, #1
 800595c:	2a01      	cmp	r2, #1
 800595e:	d8c5      	bhi.n	80058ec <LL_GPIO_Init+0x48>
 8005960:	e7a7      	b.n	80058b2 <LL_GPIO_Init+0xe>
 8005962:	fa93 f2a3 	rbit	r2, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005966:	fab2 f282 	clz	r2, r2
 800596a:	2a07      	cmp	r2, #7
 800596c:	d815      	bhi.n	800599a <LL_GPIO_Init+0xf6>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800596e:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005970:	6a02      	ldr	r2, [r0, #32]
 8005972:	fa93 f5a3 	rbit	r5, r3
 8005976:	fab5 f585 	clz	r5, r5
 800597a:	00ad      	lsls	r5, r5, #2
 800597c:	270f      	movs	r7, #15
 800597e:	fa07 f505 	lsl.w	r5, r7, r5
 8005982:	ea22 0205 	bic.w	r2, r2, r5
 8005986:	fa93 f5a3 	rbit	r5, r3
 800598a:	fab5 f585 	clz	r5, r5
 800598e:	00ad      	lsls	r5, r5, #2
 8005990:	fa06 f505 	lsl.w	r5, r6, r5
 8005994:	432a      	orrs	r2, r5
 8005996:	6202      	str	r2, [r0, #32]
}
 8005998:	e7c0      	b.n	800591c <LL_GPIO_Init+0x78>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800599a:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800599c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800599e:	0a1a      	lsrs	r2, r3, #8
 80059a0:	fa92 f7a2 	rbit	r7, r2
 80059a4:	fab7 f787 	clz	r7, r7
 80059a8:	00bf      	lsls	r7, r7, #2
 80059aa:	f04f 0c0f 	mov.w	ip, #15
 80059ae:	fa0c f707 	lsl.w	r7, ip, r7
 80059b2:	ea26 0607 	bic.w	r6, r6, r7
 80059b6:	fa92 f2a2 	rbit	r2, r2
 80059ba:	fab2 f282 	clz	r2, r2
 80059be:	0092      	lsls	r2, r2, #2
 80059c0:	fa05 f202 	lsl.w	r2, r5, r2
 80059c4:	4332      	orrs	r2, r6
 80059c6:	6242      	str	r2, [r0, #36]	; 0x24
}
 80059c8:	e7a8      	b.n	800591c <LL_GPIO_Init+0x78>
  }

  return (SUCCESS);
}
 80059ca:	2000      	movs	r0, #0
 80059cc:	bcf0      	pop	{r4, r5, r6, r7}
 80059ce:	4770      	bx	lr

080059d0 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80059d0:	4b03      	ldr	r3, [pc, #12]	; (80059e0 <RCC_GetHCLKClockFreq+0x10>)
 80059d2:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80059d4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80059d8:	4a02      	ldr	r2, [pc, #8]	; (80059e4 <RCC_GetHCLKClockFreq+0x14>)
 80059da:	5cd3      	ldrb	r3, [r2, r3]
}
 80059dc:	40d8      	lsrs	r0, r3
 80059de:	4770      	bx	lr
 80059e0:	40023800 	.word	0x40023800
 80059e4:	08016b70 	.word	0x08016b70

080059e8 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80059e8:	4b03      	ldr	r3, [pc, #12]	; (80059f8 <RCC_GetPCLK1ClockFreq+0x10>)
 80059ea:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80059ec:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80059f0:	4a02      	ldr	r2, [pc, #8]	; (80059fc <RCC_GetPCLK1ClockFreq+0x14>)
 80059f2:	5cd3      	ldrb	r3, [r2, r3]
}
 80059f4:	40d8      	lsrs	r0, r3
 80059f6:	4770      	bx	lr
 80059f8:	40023800 	.word	0x40023800
 80059fc:	08016b80 	.word	0x08016b80

08005a00 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005a00:	4b03      	ldr	r3, [pc, #12]	; (8005a10 <RCC_GetPCLK2ClockFreq+0x10>)
 8005a02:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005a04:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005a08:	4a02      	ldr	r2, [pc, #8]	; (8005a14 <RCC_GetPCLK2ClockFreq+0x14>)
 8005a0a:	5cd3      	ldrb	r3, [r2, r3]
}
 8005a0c:	40d8      	lsrs	r0, r3
 8005a0e:	4770      	bx	lr
 8005a10:	40023800 	.word	0x40023800
 8005a14:	08016b80 	.word	0x08016b80

08005a18 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005a18:	4b0f      	ldr	r3, [pc, #60]	; (8005a58 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8005a20:	b923      	cbnz	r3, 8005a2c <RCC_PLL_GetFreqDomain_SYS+0x14>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005a22:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <RCC_PLL_GetFreqDomain_SYS+0x44>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005a24:	2808      	cmp	r0, #8
 8005a26:	d003      	beq.n	8005a30 <RCC_PLL_GetFreqDomain_SYS+0x18>
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8005a28:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 8005a2a:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 8005a2c:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8005a2e:	e7f9      	b.n	8005a24 <RCC_PLL_GetFreqDomain_SYS+0xc>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005a30:	4a09      	ldr	r2, [pc, #36]	; (8005a58 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8005a32:	6850      	ldr	r0, [r2, #4]
 8005a34:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005a38:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005a3c:	6850      	ldr	r0, [r2, #4]
 8005a3e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8005a42:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005a46:	6853      	ldr	r3, [r2, #4]
 8005a48:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	fbb0 f0f3 	udiv	r0, r0, r3
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40023800 	.word	0x40023800
 8005a5c:	00f42400 	.word	0x00f42400
 8005a60:	007a1200 	.word	0x007a1200

08005a64 <RCC_GetSystemClockFreq>:
{
 8005a64:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005a66:	4b08      	ldr	r3, [pc, #32]	; (8005a88 <RCC_GetSystemClockFreq+0x24>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d005      	beq.n	8005a7e <RCC_GetSystemClockFreq+0x1a>
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	d105      	bne.n	8005a82 <RCC_GetSystemClockFreq+0x1e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005a76:	2008      	movs	r0, #8
 8005a78:	f7ff ffce 	bl	8005a18 <RCC_PLL_GetFreqDomain_SYS>
      break;
 8005a7c:	e002      	b.n	8005a84 <RCC_GetSystemClockFreq+0x20>
      frequency = HSE_VALUE;
 8005a7e:	4803      	ldr	r0, [pc, #12]	; (8005a8c <RCC_GetSystemClockFreq+0x28>)
 8005a80:	e000      	b.n	8005a84 <RCC_GetSystemClockFreq+0x20>
  switch (LL_RCC_GetSysClkSource())
 8005a82:	4803      	ldr	r0, [pc, #12]	; (8005a90 <RCC_GetSystemClockFreq+0x2c>)
}
 8005a84:	bd08      	pop	{r3, pc}
 8005a86:	bf00      	nop
 8005a88:	40023800 	.word	0x40023800
 8005a8c:	007a1200 	.word	0x007a1200
 8005a90:	00f42400 	.word	0x00f42400

08005a94 <LL_RCC_GetSystemClocksFreq>:
{
 8005a94:	b510      	push	{r4, lr}
 8005a96:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005a98:	f7ff ffe4 	bl	8005a64 <RCC_GetSystemClockFreq>
 8005a9c:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005a9e:	f7ff ff97 	bl	80059d0 <RCC_GetHCLKClockFreq>
 8005aa2:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005aa4:	f7ff ffa0 	bl	80059e8 <RCC_GetPCLK1ClockFreq>
 8005aa8:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005aaa:	6860      	ldr	r0, [r4, #4]
 8005aac:	f7ff ffa8 	bl	8005a00 <RCC_GetPCLK2ClockFreq>
 8005ab0:	60e0      	str	r0, [r4, #12]
}
 8005ab2:	bd10      	pop	{r4, pc}

08005ab4 <LL_USART_Init>:
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005ab4:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005ab6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005aba:	d001      	beq.n	8005ac0 <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 8005abc:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8005abe:	4770      	bx	lr
{
 8005ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	460d      	mov	r5, r1
    MODIFY_REG(USARTx->CR1,
 8005ac8:	68c3      	ldr	r3, [r0, #12]
 8005aca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005ace:	f023 030c 	bic.w	r3, r3, #12
 8005ad2:	684a      	ldr	r2, [r1, #4]
 8005ad4:	68c9      	ldr	r1, [r1, #12]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	6929      	ldr	r1, [r5, #16]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	69a9      	ldr	r1, [r5, #24]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60c3      	str	r3, [r0, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005ae4:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005ae6:	6902      	ldr	r2, [r0, #16]
 8005ae8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005aec:	4313      	orrs	r3, r2
 8005aee:	6103      	str	r3, [r0, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005af0:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005af2:	6942      	ldr	r2, [r0, #20]
 8005af4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005af8:	4313      	orrs	r3, r2
 8005afa:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005afc:	4668      	mov	r0, sp
 8005afe:	f7ff ffc9 	bl	8005a94 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005b02:	4b43      	ldr	r3, [pc, #268]	; (8005c10 <LL_USART_Init+0x15c>)
 8005b04:	429c      	cmp	r4, r3
 8005b06:	d010      	beq.n	8005b2a <LL_USART_Init+0x76>
    else if (USARTx == USART2)
 8005b08:	4b42      	ldr	r3, [pc, #264]	; (8005c14 <LL_USART_Init+0x160>)
 8005b0a:	429c      	cmp	r4, r3
 8005b0c:	d014      	beq.n	8005b38 <LL_USART_Init+0x84>
    else if (USARTx == USART3)
 8005b0e:	4b42      	ldr	r3, [pc, #264]	; (8005c18 <LL_USART_Init+0x164>)
 8005b10:	429c      	cmp	r4, r3
 8005b12:	d013      	beq.n	8005b3c <LL_USART_Init+0x88>
    else if (USARTx == USART6)
 8005b14:	4b41      	ldr	r3, [pc, #260]	; (8005c1c <LL_USART_Init+0x168>)
 8005b16:	429c      	cmp	r4, r3
 8005b18:	d012      	beq.n	8005b40 <LL_USART_Init+0x8c>
    else if (USARTx == UART4)
 8005b1a:	4b41      	ldr	r3, [pc, #260]	; (8005c20 <LL_USART_Init+0x16c>)
 8005b1c:	429c      	cmp	r4, r3
 8005b1e:	d011      	beq.n	8005b44 <LL_USART_Init+0x90>
    else if (USARTx == UART5)
 8005b20:	4b40      	ldr	r3, [pc, #256]	; (8005c24 <LL_USART_Init+0x170>)
 8005b22:	429c      	cmp	r4, r3
 8005b24:	d010      	beq.n	8005b48 <LL_USART_Init+0x94>
  ErrorStatus status = ERROR;
 8005b26:	2001      	movs	r0, #1
 8005b28:	e070      	b.n	8005c0c <LL_USART_Init+0x158>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005b2a:	9803      	ldr	r0, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d06c      	beq.n	8005c0a <LL_USART_Init+0x156>
        && (USART_InitStruct->BaudRate != 0U))
 8005b30:	682b      	ldr	r3, [r5, #0]
 8005b32:	b95b      	cbnz	r3, 8005b4c <LL_USART_Init+0x98>
  ErrorStatus status = ERROR;
 8005b34:	2001      	movs	r0, #1
 8005b36:	e069      	b.n	8005c0c <LL_USART_Init+0x158>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005b38:	9802      	ldr	r0, [sp, #8]
 8005b3a:	e7f7      	b.n	8005b2c <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005b3c:	9802      	ldr	r0, [sp, #8]
 8005b3e:	e7f5      	b.n	8005b2c <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005b40:	9803      	ldr	r0, [sp, #12]
 8005b42:	e7f3      	b.n	8005b2c <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005b44:	9802      	ldr	r0, [sp, #8]
 8005b46:	e7f1      	b.n	8005b2c <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005b48:	9802      	ldr	r0, [sp, #8]
 8005b4a:	e7ef      	b.n	8005b2c <LL_USART_Init+0x78>
      LL_USART_SetBaudRate(USARTx,
 8005b4c:	69aa      	ldr	r2, [r5, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005b4e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005b52:	d02c      	beq.n	8005bae <LL_USART_Init+0xfa>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005b54:	2600      	movs	r6, #0
 8005b56:	1805      	adds	r5, r0, r0
 8005b58:	eb46 0106 	adc.w	r1, r6, r6
 8005b5c:	182d      	adds	r5, r5, r0
 8005b5e:	eb46 0101 	adc.w	r1, r6, r1
 8005b62:	00ca      	lsls	r2, r1, #3
 8005b64:	ea42 7255 	orr.w	r2, r2, r5, lsr #29
 8005b68:	00ef      	lsls	r7, r5, #3
 8005b6a:	4611      	mov	r1, r2
 8005b6c:	009a      	lsls	r2, r3, #2
 8005b6e:	0f9b      	lsrs	r3, r3, #30
 8005b70:	1838      	adds	r0, r7, r0
 8005b72:	eb46 0101 	adc.w	r1, r6, r1
 8005b76:	f7fe fb93 	bl	80042a0 <__aeabi_uldivmod>
 8005b7a:	492b      	ldr	r1, [pc, #172]	; (8005c28 <LL_USART_Init+0x174>)
 8005b7c:	fba1 3200 	umull	r3, r2, r1, r0
 8005b80:	0953      	lsrs	r3, r2, #5
 8005b82:	011a      	lsls	r2, r3, #4
 8005b84:	b292      	uxth	r2, r2
 8005b86:	2564      	movs	r5, #100	; 0x64
 8005b88:	fb05 0313 	mls	r3, r5, r3, r0
 8005b8c:	011b      	lsls	r3, r3, #4
 8005b8e:	3332      	adds	r3, #50	; 0x32
 8005b90:	fba1 1303 	umull	r1, r3, r1, r3
 8005b94:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8005b98:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8005b9c:	440a      	add	r2, r1
 8005b9e:	b292      	uxth	r2, r2
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	4413      	add	r3, r2
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8005baa:	2000      	movs	r0, #0
}
 8005bac:	e02e      	b.n	8005c0c <LL_USART_Init+0x158>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005bae:	2600      	movs	r6, #0
 8005bb0:	1805      	adds	r5, r0, r0
 8005bb2:	eb46 0106 	adc.w	r1, r6, r6
 8005bb6:	182d      	adds	r5, r5, r0
 8005bb8:	eb46 0101 	adc.w	r1, r6, r1
 8005bbc:	00ca      	lsls	r2, r1, #3
 8005bbe:	ea42 7255 	orr.w	r2, r2, r5, lsr #29
 8005bc2:	00ef      	lsls	r7, r5, #3
 8005bc4:	4611      	mov	r1, r2
 8005bc6:	18da      	adds	r2, r3, r3
 8005bc8:	eb46 0306 	adc.w	r3, r6, r6
 8005bcc:	1838      	adds	r0, r7, r0
 8005bce:	eb46 0101 	adc.w	r1, r6, r1
 8005bd2:	f7fe fb65 	bl	80042a0 <__aeabi_uldivmod>
 8005bd6:	4914      	ldr	r1, [pc, #80]	; (8005c28 <LL_USART_Init+0x174>)
 8005bd8:	fba1 3200 	umull	r3, r2, r1, r0
 8005bdc:	0953      	lsrs	r3, r2, #5
 8005bde:	011a      	lsls	r2, r3, #4
 8005be0:	b292      	uxth	r2, r2
 8005be2:	2564      	movs	r5, #100	; 0x64
 8005be4:	fb05 0313 	mls	r3, r5, r3, r0
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	3332      	adds	r3, #50	; 0x32
 8005bec:	fba1 1303 	umull	r1, r3, r1, r3
 8005bf0:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8005bf4:	0059      	lsls	r1, r3, #1
 8005bf6:	f401 71f8 	and.w	r1, r1, #496	; 0x1f0
 8005bfa:	440a      	add	r2, r1
 8005bfc:	b292      	uxth	r2, r2
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	4413      	add	r3, r2
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	60a3      	str	r3, [r4, #8]
 8005c08:	e7cf      	b.n	8005baa <LL_USART_Init+0xf6>
  ErrorStatus status = ERROR;
 8005c0a:	2001      	movs	r0, #1
}
 8005c0c:	b005      	add	sp, #20
 8005c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c10:	40011000 	.word	0x40011000
 8005c14:	40004400 	.word	0x40004400
 8005c18:	40004800 	.word	0x40004800
 8005c1c:	40011400 	.word	0x40011400
 8005c20:	40004c00 	.word	0x40004c00
 8005c24:	40005000 	.word	0x40005000
 8005c28:	51eb851f 	.word	0x51eb851f

08005c2c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005c2c:	4b01      	ldr	r3, [pc, #4]	; (8005c34 <LL_SetSystemCoreClock+0x8>)
 8005c2e:	6018      	str	r0, [r3, #0]
}
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	20000000 	.word	0x20000000

08005c38 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005c38:	b530      	push	{r4, r5, lr}
 8005c3a:	b085      	sub	sp, #20
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8005c3c:	f001 fa88 	bl	8007150 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8005c40:	491a      	ldr	r1, [pc, #104]	; (8005cac <MX_LWIP_Init+0x74>)
 8005c42:	2500      	movs	r5, #0
 8005c44:	600d      	str	r5, [r1, #0]
  netmask.addr = 0;
 8005c46:	4a1a      	ldr	r2, [pc, #104]	; (8005cb0 <MX_LWIP_Init+0x78>)
 8005c48:	6015      	str	r5, [r2, #0]
  gw.addr = 0;
 8005c4a:	4b1a      	ldr	r3, [pc, #104]	; (8005cb4 <MX_LWIP_Init+0x7c>)
 8005c4c:	601d      	str	r5, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005c4e:	4c1a      	ldr	r4, [pc, #104]	; (8005cb8 <MX_LWIP_Init+0x80>)
 8005c50:	481a      	ldr	r0, [pc, #104]	; (8005cbc <MX_LWIP_Init+0x84>)
 8005c52:	9002      	str	r0, [sp, #8]
 8005c54:	481a      	ldr	r0, [pc, #104]	; (8005cc0 <MX_LWIP_Init+0x88>)
 8005c56:	9001      	str	r0, [sp, #4]
 8005c58:	9500      	str	r5, [sp, #0]
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f001 feaa 	bl	80079b4 <netif_add>

  /* Create IPv6 local address */
  netif_create_ip6_linklocal_address(&gnetif, 0);
 8005c60:	4629      	mov	r1, r5
 8005c62:	4620      	mov	r0, r4
 8005c64:	f002 f8b2 	bl	8007dcc <netif_create_ip6_linklocal_address>
  netif_ip6_addr_set_state(&gnetif, 0, IP6_ADDR_VALID);
 8005c68:	2210      	movs	r2, #16
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f002 f803 	bl	8007c78 <netif_ip6_addr_set_state>
  gnetif.ip6_autoconfig_enabled = 1;
 8005c72:	2301      	movs	r3, #1
 8005c74:	f884 30e3 	strb.w	r3, [r4, #227]	; 0xe3

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f001 ffad 	bl	8007bd8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005c7e:	f894 30df 	ldrb.w	r3, [r4, #223]	; 0xdf
 8005c82:	f013 0f04 	tst.w	r3, #4
 8005c86:	d00c      	beq.n	8005ca2 <MX_LWIP_Init+0x6a>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f001 ffab 	bl	8007be4 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005c8e:	4c0a      	ldr	r4, [pc, #40]	; (8005cb8 <MX_LWIP_Init+0x80>)
 8005c90:	490c      	ldr	r1, [pc, #48]	; (8005cc4 <MX_LWIP_Init+0x8c>)
 8005c92:	4620      	mov	r0, r4
 8005c94:	f001 ffec 	bl	8007c70 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f009 fec3 	bl	800fa24 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005c9e:	b005      	add	sp, #20
 8005ca0:	bd30      	pop	{r4, r5, pc}
    netif_set_down(&gnetif);
 8005ca2:	4805      	ldr	r0, [pc, #20]	; (8005cb8 <MX_LWIP_Init+0x80>)
 8005ca4:	f001 ffc0 	bl	8007c28 <netif_set_down>
 8005ca8:	e7f1      	b.n	8005c8e <MX_LWIP_Init+0x56>
 8005caa:	bf00      	nop
 8005cac:	20000d40 	.word	0x20000d40
 8005cb0:	20000d44 	.word	0x20000d44
 8005cb4:	20000d48 	.word	0x20000d48
 8005cb8:	20000c50 	.word	0x20000c50
 8005cbc:	0801577d 	.word	0x0801577d
 8005cc0:	08006069 	.word	0x08006069
 8005cc4:	080060cd 	.word	0x080060cd

08005cc8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005cc8:	b508      	push	{r3, lr}
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005cca:	4803      	ldr	r0, [pc, #12]	; (8005cd8 <MX_LWIP_Process+0x10>)
 8005ccc:	f000 f9bc 	bl	8006048 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005cd0:	f007 fd44 	bl	800d75c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005cd4:	bd08      	pop	{r3, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20000c50 	.word	0x20000c50

08005cdc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t payloadoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t i=0;

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8005ce0:	4833      	ldr	r0, [pc, #204]	; (8005db0 <low_level_input+0xd4>)
 8005ce2:	f7ff fa23 	bl	800512c <HAL_ETH_GetReceivedFrame>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d15e      	bne.n	8005da8 <low_level_input+0xcc>

    return NULL;

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005cea:	4b31      	ldr	r3, [pc, #196]	; (8005db0 <low_level_input+0xd4>)
 8005cec:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005cee:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40

  if (len > 0)
 8005cf2:	b979      	cbnz	r1, 8005d14 <low_level_input+0x38>
  struct pbuf *p = NULL;
 8005cf4:	f04f 0a00 	mov.w	sl, #0
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005cf8:	4b2d      	ldr	r3, [pc, #180]	; (8005db0 <low_level_input+0xd4>)
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	4a2c      	ldr	r2, [pc, #176]	; (8005db0 <low_level_input+0xd4>)
 8005d00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d02:	428a      	cmp	r2, r1
 8005d04:	d93b      	bls.n	8005d7e <low_level_input+0xa2>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005d0c:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005d0e:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005d10:	3101      	adds	r1, #1
 8005d12:	e7f4      	b.n	8005cfe <low_level_input+0x22>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005d14:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005d18:	f002 fa4c 	bl	80081b4 <pbuf_alloc>
  if (p != NULL)
 8005d1c:	4682      	mov	sl, r0
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d0ea      	beq.n	8005cf8 <low_level_input+0x1c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005d22:	4b23      	ldr	r3, [pc, #140]	; (8005db0 <low_level_input+0xd4>)
 8005d24:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005d26:	4681      	mov	r9, r0
    bufferoffset = 0;
 8005d28:	2400      	movs	r4, #0
    for(q = p; q != NULL; q = q->next)
 8005d2a:	e021      	b.n	8005d70 <low_level_input+0x94>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005d2c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8005d30:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 8005d34:	3204      	adds	r2, #4
 8005d36:	eb08 0104 	add.w	r1, r8, r4
 8005d3a:	4430      	add	r0, r6
 8005d3c:	f00f fdf8 	bl	8015930 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005d40:	68ff      	ldr	r7, [r7, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005d42:	f8d7 8008 	ldr.w	r8, [r7, #8]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005d46:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005d4a:	1b36      	subs	r6, r6, r4
 8005d4c:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
        bufferoffset = 0;
 8005d50:	2400      	movs	r4, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005d52:	18a5      	adds	r5, r4, r2
 8005d54:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005d58:	429d      	cmp	r5, r3
 8005d5a:	d8e7      	bhi.n	8005d2c <low_level_input+0x50>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005d5c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8005d60:	eb08 0104 	add.w	r1, r8, r4
 8005d64:	4430      	add	r0, r6
 8005d66:	f00f fde3 	bl	8015930 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8005d6a:	f8d9 9000 	ldr.w	r9, [r9]
      bufferoffset = bufferoffset + byteslefttocopy;
 8005d6e:	462c      	mov	r4, r5
    for(q = p; q != NULL; q = q->next)
 8005d70:	f1b9 0f00 	cmp.w	r9, #0
 8005d74:	d0c0      	beq.n	8005cf8 <low_level_input+0x1c>
      byteslefttocopy = q->len;
 8005d76:	f8b9 200a 	ldrh.w	r2, [r9, #10]
      payloadoffset = 0;
 8005d7a:	2600      	movs	r6, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005d7c:	e7e9      	b.n	8005d52 <low_level_input+0x76>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005d7e:	4b0c      	ldr	r3, [pc, #48]	; (8005db0 <low_level_input+0xd4>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f241 0214 	movw	r2, #4116	; 0x1014
 8005d8a:	589a      	ldr	r2, [r3, r2]
 8005d8c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005d90:	d007      	beq.n	8005da2 <low_level_input+0xc6>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005d92:	f241 0214 	movw	r2, #4116	; 0x1014
 8005d96:	2180      	movs	r1, #128	; 0x80
 8005d98:	5099      	str	r1, [r3, r2]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005d9a:	f241 0208 	movw	r2, #4104	; 0x1008
 8005d9e:	2100      	movs	r1, #0
 8005da0:	5099      	str	r1, [r3, r2]
  }
  return p;
}
 8005da2:	4650      	mov	r0, sl
 8005da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return NULL;
 8005da8:	f04f 0a00 	mov.w	sl, #0
 8005dac:	e7f9      	b.n	8005da2 <low_level_input+0xc6>
 8005dae:	bf00      	nop
 8005db0:	2000261c 	.word	0x2000261c

08005db4 <low_level_output>:
{
 8005db4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db8:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005dba:	4b2c      	ldr	r3, [pc, #176]	; (8005e6c <low_level_output+0xb8>)
 8005dbc:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8005dbe:	f8d6 a008 	ldr.w	sl, [r6, #8]
  bufferoffset = 0;
 8005dc2:	2400      	movs	r4, #0
  uint32_t framelength = 0;
 8005dc4:	4627      	mov	r7, r4
  for(q = p; q != NULL; q = q->next)
 8005dc6:	f1bb 0f00 	cmp.w	fp, #0
 8005dca:	d032      	beq.n	8005e32 <low_level_output+0x7e>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005dcc:	6833      	ldr	r3, [r6, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	db35      	blt.n	8005e3e <low_level_output+0x8a>
      byteslefttocopy = q->len;
 8005dd2:	f8bb 900a 	ldrh.w	r9, [fp, #10]
      payloadoffset = 0;
 8005dd6:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005dd8:	eb04 0809 	add.w	r8, r4, r9
 8005ddc:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005de0:	4598      	cmp	r8, r3
 8005de2:	d919      	bls.n	8005e18 <low_level_output+0x64>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005de4:	f8db 1004 	ldr.w	r1, [fp, #4]
 8005de8:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 8005dec:	3204      	adds	r2, #4
 8005dee:	4429      	add	r1, r5
 8005df0:	eb0a 0004 	add.w	r0, sl, r4
 8005df4:	f00f fd9c 	bl	8015930 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005df8:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005dfa:	6833      	ldr	r3, [r6, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	db21      	blt.n	8005e44 <low_level_output+0x90>
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005e00:	f8d6 a008 	ldr.w	sl, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005e04:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005e08:	1b2d      	subs	r5, r5, r4
 8005e0a:	f205 55f4 	addw	r5, r5, #1524	; 0x5f4
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005e0e:	1b3f      	subs	r7, r7, r4
 8005e10:	f207 57f4 	addw	r7, r7, #1524	; 0x5f4
        bufferoffset = 0;
 8005e14:	2400      	movs	r4, #0
 8005e16:	e7df      	b.n	8005dd8 <low_level_output+0x24>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005e18:	f8db 1004 	ldr.w	r1, [fp, #4]
 8005e1c:	464a      	mov	r2, r9
 8005e1e:	4429      	add	r1, r5
 8005e20:	eb0a 0004 	add.w	r0, sl, r4
 8005e24:	f00f fd84 	bl	8015930 <memcpy>
      framelength = framelength + byteslefttocopy;
 8005e28:	444f      	add	r7, r9
  for(q = p; q != NULL; q = q->next)
 8005e2a:	f8db b000 	ldr.w	fp, [fp]
      bufferoffset = bufferoffset + byteslefttocopy;
 8005e2e:	4644      	mov	r4, r8
 8005e30:	e7c9      	b.n	8005dc6 <low_level_output+0x12>
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005e32:	4639      	mov	r1, r7
 8005e34:	480d      	ldr	r0, [pc, #52]	; (8005e6c <low_level_output+0xb8>)
 8005e36:	f7ff f8e9 	bl	800500c <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	e004      	b.n	8005e48 <low_level_output+0x94>
        errval = ERR_USE;
 8005e3e:	f06f 0007 	mvn.w	r0, #7
 8005e42:	e001      	b.n	8005e48 <low_level_output+0x94>
          errval = ERR_USE;
 8005e44:	f06f 0007 	mvn.w	r0, #7
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005e48:	4b08      	ldr	r3, [pc, #32]	; (8005e6c <low_level_output+0xb8>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f241 0214 	movw	r2, #4116	; 0x1014
 8005e50:	589a      	ldr	r2, [r3, r2]
 8005e52:	f012 0f20 	tst.w	r2, #32
 8005e56:	d007      	beq.n	8005e68 <low_level_output+0xb4>
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005e58:	f241 0214 	movw	r2, #4116	; 0x1014
 8005e5c:	2120      	movs	r1, #32
 8005e5e:	5099      	str	r1, [r3, r2]
    heth.Instance->DMATPDR = 0;
 8005e60:	f241 0204 	movw	r2, #4100	; 0x1004
 8005e64:	2100      	movs	r1, #0
 8005e66:	5099      	str	r1, [r3, r2]
}
 8005e68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e6c:	2000261c 	.word	0x2000261c

08005e70 <low_level_init>:
{
 8005e70:	b530      	push	{r4, r5, lr}
 8005e72:	b083      	sub	sp, #12
 8005e74:	4604      	mov	r4, r0
  heth.Instance = ETH;
 8005e76:	4832      	ldr	r0, [pc, #200]	; (8005f40 <low_level_init+0xd0>)
 8005e78:	4b32      	ldr	r3, [pc, #200]	; (8005f44 <low_level_init+0xd4>)
 8005e7a:	6003      	str	r3, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	6042      	str	r2, [r0, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005e80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e84:	6083      	str	r3, [r0, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005e86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e8a:	60c3      	str	r3, [r0, #12]
  heth.Init.PhyAddress = LAN8720_PHY_ADDRESS;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 8005e90:	f88d 3000 	strb.w	r3, [sp]
  MACAddr[1] = 0x80;
 8005e94:	2180      	movs	r1, #128	; 0x80
 8005e96:	f88d 1001 	strb.w	r1, [sp, #1]
  MACAddr[2] = 0xE1;
 8005e9a:	21e1      	movs	r1, #225	; 0xe1
 8005e9c:	f88d 1002 	strb.w	r1, [sp, #2]
  MACAddr[3] = 0x01;
 8005ea0:	f88d 2003 	strb.w	r2, [sp, #3]
  MACAddr[4] = 0x02;
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	f88d 2004 	strb.w	r2, [sp, #4]
  MACAddr[5] = 0x03;
 8005eaa:	2203      	movs	r2, #3
 8005eac:	f88d 2005 	strb.w	r2, [sp, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8005eb0:	f8c0 d014 	str.w	sp, [r0, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8005eb4:	6183      	str	r3, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005eb6:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005eb8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005ebc:	6203      	str	r3, [r0, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005ebe:	f7ff f9f3 	bl	80052a8 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 8005ec2:	b928      	cbnz	r0, 8005ed0 <low_level_init+0x60>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005ec4:	f894 30df 	ldrb.w	r3, [r4, #223]	; 0xdf
 8005ec8:	f043 0304 	orr.w	r3, r3, #4
 8005ecc:	f884 30df 	strb.w	r3, [r4, #223]	; 0xdf
  heth.Instance->MACFFR |= ETH_MULTICASTFRAMESFILTER_NONE;
 8005ed0:	4d1b      	ldr	r5, [pc, #108]	; (8005f40 <low_level_init+0xd0>)
 8005ed2:	682a      	ldr	r2, [r5, #0]
 8005ed4:	6853      	ldr	r3, [r2, #4]
 8005ed6:	f043 0310 	orr.w	r3, r3, #16
 8005eda:	6053      	str	r3, [r2, #4]
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005edc:	2304      	movs	r3, #4
 8005ede:	4a1a      	ldr	r2, [pc, #104]	; (8005f48 <low_level_init+0xd8>)
 8005ee0:	491a      	ldr	r1, [pc, #104]	; (8005f4c <low_level_init+0xdc>)
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	f7ff f820 	bl	8004f28 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005ee8:	2304      	movs	r3, #4
 8005eea:	4a19      	ldr	r2, [pc, #100]	; (8005f50 <low_level_init+0xe0>)
 8005eec:	4919      	ldr	r1, [pc, #100]	; (8005f54 <low_level_init+0xe4>)
 8005eee:	4628      	mov	r0, r5
 8005ef0:	f7ff f854 	bl	8004f9c <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005ef4:	2306      	movs	r3, #6
 8005ef6:	f884 30de 	strb.w	r3, [r4, #222]	; 0xde
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005efa:	696b      	ldr	r3, [r5, #20]
 8005efc:	781a      	ldrb	r2, [r3, #0]
 8005efe:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005f02:	785a      	ldrb	r2, [r3, #1]
 8005f04:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005f08:	789a      	ldrb	r2, [r3, #2]
 8005f0a:	f884 20da 	strb.w	r2, [r4, #218]	; 0xda
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005f0e:	78da      	ldrb	r2, [r3, #3]
 8005f10:	f884 20db 	strb.w	r2, [r4, #219]	; 0xdb
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005f14:	791a      	ldrb	r2, [r3, #4]
 8005f16:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005f1a:	795b      	ldrb	r3, [r3, #5]
 8005f1c:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
  netif->mtu = 1500;
 8005f20:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8005f24:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005f28:	f894 30df 	ldrb.w	r3, [r4, #223]	; 0xdf
 8005f2c:	f043 030a 	orr.w	r3, r3, #10
 8005f30:	f884 30df 	strb.w	r3, [r4, #223]	; 0xdf
  HAL_ETH_Start(&heth);
 8005f34:	4628      	mov	r0, r5
 8005f36:	f7ff fae3 	bl	8005500 <HAL_ETH_Start>
}
 8005f3a:	b003      	add	sp, #12
 8005f3c:	bd30      	pop	{r4, r5, pc}
 8005f3e:	bf00      	nop
 8005f40:	2000261c 	.word	0x2000261c
 8005f44:	40028000 	.word	0x40028000
 8005f48:	20002664 	.word	0x20002664
 8005f4c:	20000d4c 	.word	0x20000d4c
 8005f50:	20000dcc 	.word	0x20000dcc
 8005f54:	2000259c 	.word	0x2000259c

08005f58 <HAL_ETH_MspInit>:
{
 8005f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f5a:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	9307      	str	r3, [sp, #28]
 8005f60:	9308      	str	r3, [sp, #32]
 8005f62:	9309      	str	r3, [sp, #36]	; 0x24
 8005f64:	930a      	str	r3, [sp, #40]	; 0x28
 8005f66:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8005f68:	6802      	ldr	r2, [r0, #0]
 8005f6a:	4b33      	ldr	r3, [pc, #204]	; (8006038 <HAL_ETH_MspInit+0xe0>)
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d001      	beq.n	8005f74 <HAL_ETH_MspInit+0x1c>
}
 8005f70:	b00d      	add	sp, #52	; 0x34
 8005f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8005f74:	2400      	movs	r4, #0
 8005f76:	9401      	str	r4, [sp, #4]
 8005f78:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8005f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f7e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005f82:	631a      	str	r2, [r3, #48]	; 0x30
 8005f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f86:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8005f8a:	9201      	str	r2, [sp, #4]
 8005f8c:	9a01      	ldr	r2, [sp, #4]
 8005f8e:	9402      	str	r4, [sp, #8]
 8005f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f92:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30
 8005f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f9a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8005f9e:	9202      	str	r2, [sp, #8]
 8005fa0:	9a02      	ldr	r2, [sp, #8]
 8005fa2:	9403      	str	r4, [sp, #12]
 8005fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fa6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005faa:	631a      	str	r2, [r3, #48]	; 0x30
 8005fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fae:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005fb2:	9203      	str	r2, [sp, #12]
 8005fb4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fb6:	9404      	str	r4, [sp, #16]
 8005fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fba:	f042 0204 	orr.w	r2, r2, #4
 8005fbe:	631a      	str	r2, [r3, #48]	; 0x30
 8005fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fc2:	f002 0204 	and.w	r2, r2, #4
 8005fc6:	9204      	str	r2, [sp, #16]
 8005fc8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fca:	9405      	str	r4, [sp, #20]
 8005fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fce:	f042 0201 	orr.w	r2, r2, #1
 8005fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8005fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fd6:	f002 0201 	and.w	r2, r2, #1
 8005fda:	9205      	str	r2, [sp, #20]
 8005fdc:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fde:	9406      	str	r4, [sp, #24]
 8005fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fe2:	f042 0202 	orr.w	r2, r2, #2
 8005fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	9306      	str	r3, [sp, #24]
 8005ff0:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005ff2:	2332      	movs	r3, #50	; 0x32
 8005ff4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ff6:	2702      	movs	r7, #2
 8005ff8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ffa:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ffc:	2603      	movs	r6, #3
 8005ffe:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006000:	250b      	movs	r5, #11
 8006002:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006004:	a907      	add	r1, sp, #28
 8006006:	480d      	ldr	r0, [pc, #52]	; (800603c <HAL_ETH_MspInit+0xe4>)
 8006008:	f7ff fb56 	bl	80056b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800600c:	2386      	movs	r3, #134	; 0x86
 800600e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006010:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006012:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006014:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006016:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006018:	a907      	add	r1, sp, #28
 800601a:	4809      	ldr	r0, [pc, #36]	; (8006040 <HAL_ETH_MspInit+0xe8>)
 800601c:	f7ff fb4c 	bl	80056b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8006020:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006024:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006026:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006028:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800602a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800602c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800602e:	a907      	add	r1, sp, #28
 8006030:	4804      	ldr	r0, [pc, #16]	; (8006044 <HAL_ETH_MspInit+0xec>)
 8006032:	f7ff fb41 	bl	80056b8 <HAL_GPIO_Init>
}
 8006036:	e79b      	b.n	8005f70 <HAL_ETH_MspInit+0x18>
 8006038:	40028000 	.word	0x40028000
 800603c:	40020800 	.word	0x40020800
 8006040:	40020000 	.word	0x40020000
 8006044:	40020400 	.word	0x40020400

08006048 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8006048:	b538      	push	{r3, r4, r5, lr}
 800604a:	4604      	mov	r4, r0
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800604c:	f7ff fe46 	bl	8005cdc <low_level_input>

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8006050:	b128      	cbz	r0, 800605e <ethernetif_input+0x16>
 8006052:	4605      	mov	r5, r0

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8006054:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8006058:	4621      	mov	r1, r4
 800605a:	4798      	blx	r3

  if (err != ERR_OK)
 800605c:	b900      	cbnz	r0, 8006060 <ethernetif_input+0x18>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
    p = NULL;
  }
}
 800605e:	bd38      	pop	{r3, r4, r5, pc}
    pbuf_free(p);
 8006060:	4628      	mov	r0, r5
 8006062:	f002 f845 	bl	80080f0 <pbuf_free>
    p = NULL;
 8006066:	e7fa      	b.n	800605e <ethernetif_input+0x16>

08006068 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006068:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800606a:	4604      	mov	r4, r0
 800606c:	b198      	cbz	r0, 8006096 <ethernetif_init+0x2e>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800606e:	2373      	movs	r3, #115	; 0x73
 8006070:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
  netif->name[1] = IFNAME1;
 8006074:	2374      	movs	r3, #116	; 0x74
 8006076:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800607a:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <ethernetif_init+0x40>)
 800607c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
#endif /* LWIP_ARP */
#endif /* LWIP_ARP || LWIP_ETHERNET */
#endif /* LWIP_IPV4 */

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
 8006080:	4b0a      	ldr	r3, [pc, #40]	; (80060ac <ethernetif_init+0x44>)
 8006082:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006086:	4b0a      	ldr	r3, [pc, #40]	; (80060b0 <ethernetif_init+0x48>)
 8006088:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8

  /* initialize the hardware */
  low_level_init(netif);
 800608c:	4620      	mov	r0, r4
 800608e:	f7ff feef 	bl	8005e70 <low_level_init>

  return ERR_OK;
}
 8006092:	2000      	movs	r0, #0
 8006094:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006096:	4b07      	ldr	r3, [pc, #28]	; (80060b4 <ethernetif_init+0x4c>)
 8006098:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 800609c:	4906      	ldr	r1, [pc, #24]	; (80060b8 <ethernetif_init+0x50>)
 800609e:	4807      	ldr	r0, [pc, #28]	; (80060bc <ethernetif_init+0x54>)
 80060a0:	f00f fc76 	bl	8015990 <iprintf>
 80060a4:	e7e3      	b.n	800606e <ethernetif_init+0x6>
 80060a6:	bf00      	nop
 80060a8:	080103f9 	.word	0x080103f9
 80060ac:	08011875 	.word	0x08011875
 80060b0:	08005db5 	.word	0x08005db5
 80060b4:	08016b88 	.word	0x08016b88
 80060b8:	08016ba4 	.word	0x08016ba4
 80060bc:	08016bb4 	.word	0x08016bb4

080060c0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80060c0:	b508      	push	{r3, lr}
  return HAL_GetTick();
 80060c2:	f7fe fd75 	bl	8004bb0 <HAL_GetTick>
}
 80060c6:	bd08      	pop	{r3, pc}

080060c8 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80060c8:	4770      	bx	lr
	...

080060cc <ethernetif_update_config>:
{
 80060cc:	b530      	push	{r4, r5, lr}
 80060ce:	b083      	sub	sp, #12
 80060d0:	4604      	mov	r4, r0
  __IO uint32_t tickstart = 0;
 80060d2:	2300      	movs	r3, #0
 80060d4:	9301      	str	r3, [sp, #4]
  uint32_t regvalue = 0;
 80060d6:	9300      	str	r3, [sp, #0]
  if(netif_is_link_up(netif))
 80060d8:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 80060dc:	f013 0f04 	tst.w	r3, #4
 80060e0:	d051      	beq.n	8006186 <ethernetif_update_config+0xba>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80060e2:	4b2b      	ldr	r3, [pc, #172]	; (8006190 <ethernetif_update_config+0xc4>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d035      	beq.n	8006156 <ethernetif_update_config+0x8a>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80060ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80060ee:	2100      	movs	r1, #0
 80060f0:	4827      	ldr	r0, [pc, #156]	; (8006190 <ethernetif_update_config+0xc4>)
 80060f2:	f7ff f89e 	bl	8005232 <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 80060f6:	f7fe fd5b 	bl	8004bb0 <HAL_GetTick>
 80060fa:	9001      	str	r0, [sp, #4]
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80060fc:	466a      	mov	r2, sp
 80060fe:	2101      	movs	r1, #1
 8006100:	4823      	ldr	r0, [pc, #140]	; (8006190 <ethernetif_update_config+0xc4>)
 8006102:	f7ff f85a 	bl	80051ba <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 8006106:	f7fe fd53 	bl	8004bb0 <HAL_GetTick>
 800610a:	9b01      	ldr	r3, [sp, #4]
 800610c:	1ac3      	subs	r3, r0, r3
 800610e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006112:	d820      	bhi.n	8006156 <ethernetif_update_config+0x8a>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006114:	9b00      	ldr	r3, [sp, #0]
 8006116:	f013 0f20 	tst.w	r3, #32
 800611a:	d0ef      	beq.n	80060fc <ethernetif_update_config+0x30>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800611c:	466a      	mov	r2, sp
 800611e:	211f      	movs	r1, #31
 8006120:	481b      	ldr	r0, [pc, #108]	; (8006190 <ethernetif_update_config+0xc4>)
 8006122:	f7ff f84a 	bl	80051ba <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006126:	9b00      	ldr	r3, [sp, #0]
 8006128:	f013 0f04 	tst.w	r3, #4
 800612c:	d00a      	beq.n	8006144 <ethernetif_update_config+0x78>
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800612e:	4a18      	ldr	r2, [pc, #96]	; (8006190 <ethernetif_update_config+0xc4>)
 8006130:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006134:	60d1      	str	r1, [r2, #12]
      if(regvalue & PHY_SPEED_STATUS)
 8006136:	f013 0f02 	tst.w	r3, #2
 800613a:	d007      	beq.n	800614c <ethernetif_update_config+0x80>
        heth.Init.Speed = ETH_SPEED_10M;
 800613c:	4b14      	ldr	r3, [pc, #80]	; (8006190 <ethernetif_update_config+0xc4>)
 800613e:	2200      	movs	r2, #0
 8006140:	609a      	str	r2, [r3, #8]
 8006142:	e013      	b.n	800616c <ethernetif_update_config+0xa0>
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006144:	4a12      	ldr	r2, [pc, #72]	; (8006190 <ethernetif_update_config+0xc4>)
 8006146:	2100      	movs	r1, #0
 8006148:	60d1      	str	r1, [r2, #12]
 800614a:	e7f4      	b.n	8006136 <ethernetif_update_config+0x6a>
        heth.Init.Speed = ETH_SPEED_100M;
 800614c:	4b10      	ldr	r3, [pc, #64]	; (8006190 <ethernetif_update_config+0xc4>)
 800614e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006152:	609a      	str	r2, [r3, #8]
 8006154:	e00a      	b.n	800616c <ethernetif_update_config+0xa0>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006156:	480e      	ldr	r0, [pc, #56]	; (8006190 <ethernetif_update_config+0xc4>)
 8006158:	68c2      	ldr	r2, [r0, #12]
 800615a:	f3c2 02cf 	ubfx	r2, r2, #3, #16
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800615e:	6883      	ldr	r3, [r0, #8]
 8006160:	f3c3 034f 	ubfx	r3, r3, #1, #16
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006164:	431a      	orrs	r2, r3
 8006166:	2100      	movs	r1, #0
 8006168:	f7ff f863 	bl	8005232 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800616c:	4d08      	ldr	r5, [pc, #32]	; (8006190 <ethernetif_update_config+0xc4>)
 800616e:	2100      	movs	r1, #0
 8006170:	4628      	mov	r0, r5
 8006172:	f7ff fa09 	bl	8005588 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 8006176:	4628      	mov	r0, r5
 8006178:	f7ff f9c2 	bl	8005500 <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 800617c:	4620      	mov	r0, r4
 800617e:	f7ff ffa3 	bl	80060c8 <ethernetif_notify_conn_changed>
}
 8006182:	b003      	add	sp, #12
 8006184:	bd30      	pop	{r4, r5, pc}
    HAL_ETH_Stop(&heth);
 8006186:	4802      	ldr	r0, [pc, #8]	; (8006190 <ethernetif_update_config+0xc4>)
 8006188:	f7ff f9dc 	bl	8005544 <HAL_ETH_Stop>
 800618c:	e7f6      	b.n	800617c <ethernetif_update_config+0xb0>
 800618e:	bf00      	nop
 8006190:	2000261c 	.word	0x2000261c

08006194 <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8006194:	b1c0      	cbz	r0, 80061c8 <fs_open+0x34>
{
 8006196:	b570      	push	{r4, r5, r6, lr}
 8006198:	460d      	mov	r5, r1
 800619a:	4606      	mov	r6, r0
  if ((file == NULL) || (name == NULL)) {
 800619c:	b1b9      	cbz	r1, 80061ce <fs_open+0x3a>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800619e:	4c0d      	ldr	r4, [pc, #52]	; (80061d4 <fs_open+0x40>)
 80061a0:	b17c      	cbz	r4, 80061c2 <fs_open+0x2e>
    if (!strcmp(name, (const char *)f->name)) {
 80061a2:	6861      	ldr	r1, [r4, #4]
 80061a4:	4628      	mov	r0, r5
 80061a6:	f7fe f813 	bl	80041d0 <strcmp>
 80061aa:	b108      	cbz	r0, 80061b0 <fs_open+0x1c>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80061ac:	6824      	ldr	r4, [r4, #0]
 80061ae:	e7f7      	b.n	80061a0 <fs_open+0xc>
      file->data = (const char *)f->data;
 80061b0:	68a3      	ldr	r3, [r4, #8]
 80061b2:	6033      	str	r3, [r6, #0]
      file->len = f->len;
 80061b4:	68e3      	ldr	r3, [r4, #12]
 80061b6:	6073      	str	r3, [r6, #4]
      file->index = f->len;
 80061b8:	60b3      	str	r3, [r6, #8]
      file->pextension = NULL;
 80061ba:	60f0      	str	r0, [r6, #12]
      file->flags = f->flags;
 80061bc:	7c23      	ldrb	r3, [r4, #16]
 80061be:	7433      	strb	r3, [r6, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80061c0:	e001      	b.n	80061c6 <fs_open+0x32>
    }
  }
  /* file not found */
  return ERR_VAL;
 80061c2:	f06f 0005 	mvn.w	r0, #5
}
 80061c6:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 80061c8:	f06f 000f 	mvn.w	r0, #15
}
 80061cc:	4770      	bx	lr
    return ERR_ARG;
 80061ce:	f06f 000f 	mvn.w	r0, #15
 80061d2:	e7f8      	b.n	80061c6 <fs_open+0x32>
 80061d4:	08017900 	.word	0x08017900

080061d8 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80061d8:	4770      	bx	lr

080061da <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 80061da:	6842      	ldr	r2, [r0, #4]
 80061dc:	6880      	ldr	r0, [r0, #8]
}
 80061de:	1a10      	subs	r0, r2, r0
 80061e0:	4770      	bx	lr
	...

080061e4 <httpd_init_pcb>:
static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
  err_t err;

  if (pcb) {
 80061e4:	b330      	cbz	r0, 8006234 <httpd_init_pcb+0x50>
{
 80061e6:	b538      	push	{r3, r4, r5, lr}
 80061e8:	460c      	mov	r4, r1
 80061ea:	4605      	mov	r5, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80061ec:	2101      	movs	r1, #1
 80061ee:	f002 fefd 	bl	8008fec <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 80061f2:	4622      	mov	r2, r4
 80061f4:	4910      	ldr	r1, [pc, #64]	; (8006238 <httpd_init_pcb+0x54>)
 80061f6:	4628      	mov	r0, r5
 80061f8:	f002 fc28 	bl	8008a4c <tcp_bind>
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80061fc:	b950      	cbnz	r0, 8006214 <httpd_init_pcb+0x30>
    pcb = altcp_listen(pcb);
 80061fe:	21ff      	movs	r1, #255	; 0xff
 8006200:	4628      	mov	r0, r5
 8006202:	f002 fe55 	bl	8008eb0 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8006206:	4604      	mov	r4, r0
 8006208:	b160      	cbz	r0, 8006224 <httpd_init_pcb+0x40>
    altcp_accept(pcb, http_accept);
 800620a:	490c      	ldr	r1, [pc, #48]	; (800623c <httpd_init_pcb+0x58>)
 800620c:	4620      	mov	r0, r4
 800620e:	f002 ff79 	bl	8009104 <tcp_accept>
  }
}
 8006212:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8006214:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <httpd_init_pcb+0x5c>)
 8006216:	f640 2257 	movw	r2, #2647	; 0xa57
 800621a:	490a      	ldr	r1, [pc, #40]	; (8006244 <httpd_init_pcb+0x60>)
 800621c:	480a      	ldr	r0, [pc, #40]	; (8006248 <httpd_init_pcb+0x64>)
 800621e:	f00f fbb7 	bl	8015990 <iprintf>
 8006222:	e7ec      	b.n	80061fe <httpd_init_pcb+0x1a>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8006224:	4b06      	ldr	r3, [pc, #24]	; (8006240 <httpd_init_pcb+0x5c>)
 8006226:	f640 2259 	movw	r2, #2649	; 0xa59
 800622a:	4908      	ldr	r1, [pc, #32]	; (800624c <httpd_init_pcb+0x68>)
 800622c:	4806      	ldr	r0, [pc, #24]	; (8006248 <httpd_init_pcb+0x64>)
 800622e:	f00f fbaf 	bl	8015990 <iprintf>
 8006232:	e7ea      	b.n	800620a <httpd_init_pcb+0x26>
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	08017bc0 	.word	0x08017bc0
 800623c:	080069dd 	.word	0x080069dd
 8006240:	08017914 	.word	0x08017914
 8006244:	0801794c 	.word	0x0801794c
 8006248:	08016bb4 	.word	0x08016bb4
 800624c:	08017968 	.word	0x08017968

08006250 <http_write>:
{
 8006250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006254:	4605      	mov	r5, r0
 8006256:	460e      	mov	r6, r1
 8006258:	461f      	mov	r7, r3
  LWIP_ASSERT("length != NULL", length != NULL);
 800625a:	4690      	mov	r8, r2
 800625c:	b17a      	cbz	r2, 800627e <http_write+0x2e>
  len = *length;
 800625e:	f8b8 3000 	ldrh.w	r3, [r8]
  if (len == 0) {
 8006262:	b3c3      	cbz	r3, 80062d6 <http_write+0x86>
  max_len = altcp_sndbuf(pcb);
 8006264:	f8b5 208c 	ldrh.w	r2, [r5, #140]	; 0x8c
  if (max_len < len) {
 8006268:	4293      	cmp	r3, r2
 800626a:	d800      	bhi.n	800626e <http_write+0x1e>
  len = *length;
 800626c:	461a      	mov	r2, r3
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800626e:	f8b5 405a 	ldrh.w	r4, [r5, #90]	; 0x5a
 8006272:	0064      	lsls	r4, r4, #1
 8006274:	b2a4      	uxth	r4, r4
  if (len > max_len) {
 8006276:	42a2      	cmp	r2, r4
 8006278:	d80f      	bhi.n	800629a <http_write+0x4a>
 800627a:	4614      	mov	r4, r2
 800627c:	e00d      	b.n	800629a <http_write+0x4a>
  LWIP_ASSERT("length != NULL", length != NULL);
 800627e:	4b17      	ldr	r3, [pc, #92]	; (80062dc <http_write+0x8c>)
 8006280:	f240 2219 	movw	r2, #537	; 0x219
 8006284:	4916      	ldr	r1, [pc, #88]	; (80062e0 <http_write+0x90>)
 8006286:	4817      	ldr	r0, [pc, #92]	; (80062e4 <http_write+0x94>)
 8006288:	f00f fb82 	bl	8015990 <iprintf>
 800628c:	e7e7      	b.n	800625e <http_write+0xe>
        len = 1;
 800628e:	2401      	movs	r4, #1
  } while ((err == ERR_MEM) && (len > 1));
 8006290:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006294:	d117      	bne.n	80062c6 <http_write+0x76>
 8006296:	2c01      	cmp	r4, #1
 8006298:	d915      	bls.n	80062c6 <http_write+0x76>
    err = altcp_write(pcb, ptr, len, apiflags);
 800629a:	463b      	mov	r3, r7
 800629c:	4622      	mov	r2, r4
 800629e:	4631      	mov	r1, r6
 80062a0:	4628      	mov	r0, r5
 80062a2:	f006 f8d5 	bl	800c450 <tcp_write>
    if (err == ERR_MEM) {
 80062a6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80062aa:	d1f1      	bne.n	8006290 <http_write+0x40>
      if ((altcp_sndbuf(pcb) == 0) ||
 80062ac:	f8b5 308c 	ldrh.w	r3, [r5, #140]	; 0x8c
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d0ec      	beq.n	800628e <http_write+0x3e>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 80062b4:	f8b5 308e 	ldrh.w	r3, [r5, #142]	; 0x8e
      if ((altcp_sndbuf(pcb) == 0) ||
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d802      	bhi.n	80062c2 <http_write+0x72>
        len /= 2;
 80062bc:	f3c4 044f 	ubfx	r4, r4, #1, #16
 80062c0:	e7e6      	b.n	8006290 <http_write+0x40>
        len = 1;
 80062c2:	2401      	movs	r4, #1
 80062c4:	e7e4      	b.n	8006290 <http_write+0x40>
  if (err == ERR_OK) {
 80062c6:	b910      	cbnz	r0, 80062ce <http_write+0x7e>
    *length = len;
 80062c8:	f8a8 4000 	strh.w	r4, [r8]
 80062cc:	e004      	b.n	80062d8 <http_write+0x88>
    *length = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	f8a8 3000 	strh.w	r3, [r8]
 80062d4:	e000      	b.n	80062d8 <http_write+0x88>
    return ERR_OK;
 80062d6:	2000      	movs	r0, #0
}
 80062d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062dc:	08017914 	.word	0x08017914
 80062e0:	08017988 	.word	0x08017988
 80062e4:	08016bb4 	.word	0x08016bb4

080062e8 <http_send_data_nonssi>:
{
 80062e8:	b510      	push	{r4, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	460c      	mov	r4, r1
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80062ee:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80062f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d814      	bhi.n	8006322 <http_send_data_nonssi+0x3a>
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	f8ad 3006 	strh.w	r3, [sp, #6]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80062fe:	2300      	movs	r3, #0
 8006300:	f10d 0206 	add.w	r2, sp, #6
 8006304:	69a1      	ldr	r1, [r4, #24]
 8006306:	f7ff ffa3 	bl	8006250 <http_write>
  if (err == ERR_OK) {
 800630a:	b968      	cbnz	r0, 8006328 <http_send_data_nonssi+0x40>
    hs->file += len;
 800630c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8006310:	69a2      	ldr	r2, [r4, #24]
 8006312:	440a      	add	r2, r1
 8006314:	61a2      	str	r2, [r4, #24]
    hs->left -= len;
 8006316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006318:	1a5b      	subs	r3, r3, r1
 800631a:	6263      	str	r3, [r4, #36]	; 0x24
    data_to_send = 1;
 800631c:	2001      	movs	r0, #1
}
 800631e:	b002      	add	sp, #8
 8006320:	bd10      	pop	{r4, pc}
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8006322:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006326:	e7e8      	b.n	80062fa <http_send_data_nonssi+0x12>
  u8_t data_to_send = 0;
 8006328:	2000      	movs	r0, #0
 800632a:	e7f8      	b.n	800631e <http_send_data_nonssi+0x36>

0800632c <http_state_eof>:
{
 800632c:	b510      	push	{r4, lr}
 800632e:	4604      	mov	r4, r0
  if (hs->handle) {
 8006330:	6940      	ldr	r0, [r0, #20]
 8006332:	b118      	cbz	r0, 800633c <http_state_eof+0x10>
    fs_close(hs->handle);
 8006334:	f7ff ff50 	bl	80061d8 <fs_close>
    hs->handle = NULL;
 8006338:	2300      	movs	r3, #0
 800633a:	6163      	str	r3, [r4, #20]
  if (hs->req) {
 800633c:	6a20      	ldr	r0, [r4, #32]
 800633e:	b118      	cbz	r0, 8006348 <http_state_eof+0x1c>
    pbuf_free(hs->req);
 8006340:	f001 fed6 	bl	80080f0 <pbuf_free>
    hs->req = NULL;
 8006344:	2300      	movs	r3, #0
 8006346:	6223      	str	r3, [r4, #32]
}
 8006348:	bd10      	pop	{r4, pc}

0800634a <http_state_free>:
  if (hs != NULL) {
 800634a:	b138      	cbz	r0, 800635c <http_state_free+0x12>
{
 800634c:	b510      	push	{r4, lr}
 800634e:	4604      	mov	r4, r0
    http_state_eof(hs);
 8006350:	f7ff ffec 	bl	800632c <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8006354:	4620      	mov	r0, r4
 8006356:	f000 ffe9 	bl	800732c <mem_free>
}
 800635a:	bd10      	pop	{r4, pc}
 800635c:	4770      	bx	lr
	...

08006360 <http_close_or_abort_conn>:
{
 8006360:	b570      	push	{r4, r5, r6, lr}
 8006362:	4604      	mov	r4, r0
 8006364:	460d      	mov	r5, r1
 8006366:	4616      	mov	r6, r2
  altcp_arg(pcb, NULL);
 8006368:	2100      	movs	r1, #0
 800636a:	f002 fe79 	bl	8009060 <tcp_arg>
  altcp_recv(pcb, NULL);
 800636e:	2100      	movs	r1, #0
 8006370:	4620      	mov	r0, r4
 8006372:	f002 fe79 	bl	8009068 <tcp_recv>
  altcp_err(pcb, NULL);
 8006376:	2100      	movs	r1, #0
 8006378:	4620      	mov	r0, r4
 800637a:	f002 fea9 	bl	80090d0 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800637e:	2200      	movs	r2, #0
 8006380:	4611      	mov	r1, r2
 8006382:	4620      	mov	r0, r4
 8006384:	f002 fec6 	bl	8009114 <tcp_poll>
  altcp_sent(pcb, NULL);
 8006388:	2100      	movs	r1, #0
 800638a:	4620      	mov	r0, r4
 800638c:	f002 fe86 	bl	800909c <tcp_sent>
  if (hs != NULL) {
 8006390:	b115      	cbz	r5, 8006398 <http_close_or_abort_conn+0x38>
    http_state_free(hs);
 8006392:	4628      	mov	r0, r5
 8006394:	f7ff ffd9 	bl	800634a <http_state_free>
  if (abort_conn) {
 8006398:	b936      	cbnz	r6, 80063a8 <http_close_or_abort_conn+0x48>
  err = altcp_close(pcb);
 800639a:	4620      	mov	r0, r4
 800639c:	f003 fb16 	bl	80099cc <tcp_close>
  if (err != ERR_OK) {
 80063a0:	4605      	mov	r5, r0
 80063a2:	b930      	cbnz	r0, 80063b2 <http_close_or_abort_conn+0x52>
}
 80063a4:	4628      	mov	r0, r5
 80063a6:	bd70      	pop	{r4, r5, r6, pc}
    altcp_abort(pcb);
 80063a8:	4620      	mov	r0, r4
 80063aa:	f003 f86d 	bl	8009488 <tcp_abort>
    return ERR_OK;
 80063ae:	2500      	movs	r5, #0
 80063b0:	e7f8      	b.n	80063a4 <http_close_or_abort_conn+0x44>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80063b2:	2204      	movs	r2, #4
 80063b4:	4902      	ldr	r1, [pc, #8]	; (80063c0 <http_close_or_abort_conn+0x60>)
 80063b6:	4620      	mov	r0, r4
 80063b8:	f002 feac 	bl	8009114 <tcp_poll>
 80063bc:	e7f2      	b.n	80063a4 <http_close_or_abort_conn+0x44>
 80063be:	bf00      	nop
 80063c0:	08006489 	.word	0x08006489

080063c4 <http_close_conn>:
{
 80063c4:	b508      	push	{r3, lr}
  return http_close_or_abort_conn(pcb, hs, 0);
 80063c6:	2200      	movs	r2, #0
 80063c8:	f7ff ffca 	bl	8006360 <http_close_or_abort_conn>
}
 80063cc:	bd08      	pop	{r3, pc}

080063ce <http_eof>:
{
 80063ce:	b508      	push	{r3, lr}
    http_close_conn(pcb, hs);
 80063d0:	f7ff fff8 	bl	80063c4 <http_close_conn>
}
 80063d4:	bd08      	pop	{r3, pc}
	...

080063d8 <http_check_eof>:
{
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	4605      	mov	r5, r0
 80063dc:	460c      	mov	r4, r1
  if (hs->handle == NULL) {
 80063de:	6948      	ldr	r0, [r1, #20]
 80063e0:	b160      	cbz	r0, 80063fc <http_check_eof+0x24>
  bytes_left = fs_bytes_left(hs->handle);
 80063e2:	f7ff fefa 	bl	80061da <fs_bytes_left>
  if (bytes_left <= 0) {
 80063e6:	2800      	cmp	r0, #0
 80063e8:	dd0d      	ble.n	8006406 <http_check_eof+0x2e>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80063ea:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <http_check_eof+0x3c>)
 80063ec:	f240 429d 	movw	r2, #1181	; 0x49d
 80063f0:	4909      	ldr	r1, [pc, #36]	; (8006418 <http_check_eof+0x40>)
 80063f2:	480a      	ldr	r0, [pc, #40]	; (800641c <http_check_eof+0x44>)
 80063f4:	f00f facc 	bl	8015990 <iprintf>
  return 1;
 80063f8:	2001      	movs	r0, #1
}
 80063fa:	bd38      	pop	{r3, r4, r5, pc}
    http_eof(pcb, hs);
 80063fc:	4628      	mov	r0, r5
 80063fe:	f7ff ffe6 	bl	80063ce <http_eof>
    return 0;
 8006402:	2000      	movs	r0, #0
 8006404:	e7f9      	b.n	80063fa <http_check_eof+0x22>
    http_eof(pcb, hs);
 8006406:	4621      	mov	r1, r4
 8006408:	4628      	mov	r0, r5
 800640a:	f7ff ffe0 	bl	80063ce <http_eof>
    return 0;
 800640e:	2000      	movs	r0, #0
 8006410:	e7f3      	b.n	80063fa <http_check_eof+0x22>
 8006412:	bf00      	nop
 8006414:	08017914 	.word	0x08017914
 8006418:	08017998 	.word	0x08017998
 800641c:	08016bb4 	.word	0x08016bb4

08006420 <http_send>:
{
 8006420:	b570      	push	{r4, r5, r6, lr}
  if (hs == NULL) {
 8006422:	b1d9      	cbz	r1, 800645c <http_send+0x3c>
 8006424:	4604      	mov	r4, r0
 8006426:	460e      	mov	r6, r1
  if (hs->left == 0) {
 8006428:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800642a:	b91b      	cbnz	r3, 8006434 <http_send+0x14>
    if (!http_check_eof(pcb, hs)) {
 800642c:	f7ff ffd4 	bl	80063d8 <http_check_eof>
 8006430:	4605      	mov	r5, r0
 8006432:	b130      	cbz	r0, 8006442 <http_send+0x22>
    data_to_send = http_send_data_nonssi(pcb, hs);
 8006434:	4631      	mov	r1, r6
 8006436:	4620      	mov	r0, r4
 8006438:	f7ff ff56 	bl	80062e8 <http_send_data_nonssi>
 800643c:	4605      	mov	r5, r0
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800643e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006440:	b10b      	cbz	r3, 8006446 <http_send+0x26>
}
 8006442:	4628      	mov	r0, r5
 8006444:	bd70      	pop	{r4, r5, r6, pc}
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8006446:	6970      	ldr	r0, [r6, #20]
 8006448:	f7ff fec7 	bl	80061da <fs_bytes_left>
 800644c:	2800      	cmp	r0, #0
 800644e:	dcf8      	bgt.n	8006442 <http_send+0x22>
    http_eof(pcb, hs);
 8006450:	4631      	mov	r1, r6
 8006452:	4620      	mov	r0, r4
 8006454:	f7ff ffbb 	bl	80063ce <http_eof>
    return 0;
 8006458:	2500      	movs	r5, #0
 800645a:	e7f2      	b.n	8006442 <http_send+0x22>
    return 0;
 800645c:	2500      	movs	r5, #0
 800645e:	e7f0      	b.n	8006442 <http_send+0x22>

08006460 <http_sent>:
  if (hs == NULL) {
 8006460:	b150      	cbz	r0, 8006478 <http_sent+0x18>
{
 8006462:	b508      	push	{r3, lr}
 8006464:	460b      	mov	r3, r1
 8006466:	4601      	mov	r1, r0
  hs->retries = 0;
 8006468:	2200      	movs	r2, #0
 800646a:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  http_send(pcb, hs);
 800646e:	4618      	mov	r0, r3
 8006470:	f7ff ffd6 	bl	8006420 <http_send>
}
 8006474:	2000      	movs	r0, #0
 8006476:	bd08      	pop	{r3, pc}
 8006478:	2000      	movs	r0, #0
 800647a:	4770      	bx	lr

0800647c <http_err>:
  if (hs != NULL) {
 800647c:	b118      	cbz	r0, 8006486 <http_err+0xa>
{
 800647e:	b508      	push	{r3, lr}
    http_state_free(hs);
 8006480:	f7ff ff63 	bl	800634a <http_state_free>
}
 8006484:	bd08      	pop	{r3, pc}
 8006486:	4770      	bx	lr

08006488 <http_poll>:
{
 8006488:	b510      	push	{r4, lr}
 800648a:	460c      	mov	r4, r1
  if (hs == NULL) {
 800648c:	b180      	cbz	r0, 80064b0 <http_poll+0x28>
 800648e:	4601      	mov	r1, r0
    hs->retries++;
 8006490:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8006494:	3301      	adds	r3, #1
 8006496:	b2db      	uxtb	r3, r3
 8006498:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800649c:	2b04      	cmp	r3, #4
 800649e:	d00c      	beq.n	80064ba <http_poll+0x32>
    if (hs->handle) {
 80064a0:	6943      	ldr	r3, [r0, #20]
 80064a2:	b11b      	cbz	r3, 80064ac <http_poll+0x24>
      if (http_send(pcb, hs)) {
 80064a4:	4620      	mov	r0, r4
 80064a6:	f7ff ffbb 	bl	8006420 <http_send>
 80064aa:	b950      	cbnz	r0, 80064c2 <http_poll+0x3a>
}
 80064ac:	2000      	movs	r0, #0
 80064ae:	bd10      	pop	{r4, pc}
    closed = http_close_conn(pcb, NULL);
 80064b0:	2100      	movs	r1, #0
 80064b2:	4620      	mov	r0, r4
 80064b4:	f7ff ff86 	bl	80063c4 <http_close_conn>
    return ERR_OK;
 80064b8:	e7f8      	b.n	80064ac <http_poll+0x24>
      http_close_conn(pcb, hs);
 80064ba:	4620      	mov	r0, r4
 80064bc:	f7ff ff82 	bl	80063c4 <http_close_conn>
      return ERR_OK;
 80064c0:	e7f4      	b.n	80064ac <http_poll+0x24>
        altcp_output(pcb);
 80064c2:	4620      	mov	r0, r4
 80064c4:	f006 fdfa 	bl	800d0bc <tcp_output>
 80064c8:	e7f0      	b.n	80064ac <http_poll+0x24>
	...

080064cc <http_init_file>:
{
 80064cc:	b570      	push	{r4, r5, r6, lr}
 80064ce:	4604      	mov	r4, r0
  if (file != NULL) {
 80064d0:	2900      	cmp	r1, #0
 80064d2:	d041      	beq.n	8006558 <http_init_file+0x8c>
 80064d4:	4616      	mov	r6, r2
 80064d6:	460d      	mov	r5, r1
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80064d8:	680b      	ldr	r3, [r1, #0]
 80064da:	b32b      	cbz	r3, 8006528 <http_init_file+0x5c>
    hs->handle = file;
 80064dc:	6165      	str	r5, [r4, #20]
    hs->file = file->data;
 80064de:	682b      	ldr	r3, [r5, #0]
 80064e0:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80064e2:	686b      	ldr	r3, [r5, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	db27      	blt.n	8006538 <http_init_file+0x6c>
      hs->left = (u32_t)file->len;
 80064e8:	686b      	ldr	r3, [r5, #4]
 80064ea:	6263      	str	r3, [r4, #36]	; 0x24
    hs->retries = 0;
 80064ec:	2300      	movs	r3, #0
 80064ee:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 80064f2:	6963      	ldr	r3, [r4, #20]
 80064f4:	7c1b      	ldrb	r3, [r3, #16]
 80064f6:	f013 0f01 	tst.w	r3, #1
 80064fa:	d025      	beq.n	8006548 <http_init_file+0x7c>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80064fc:	2e00      	cmp	r6, #0
 80064fe:	d031      	beq.n	8006564 <http_init_file+0x98>
 8006500:	6963      	ldr	r3, [r4, #20]
 8006502:	7c1b      	ldrb	r3, [r3, #16]
 8006504:	f013 0f01 	tst.w	r3, #1
 8006508:	d02c      	beq.n	8006564 <http_init_file+0x98>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800650a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800650c:	4916      	ldr	r1, [pc, #88]	; (8006568 <http_init_file+0x9c>)
 800650e:	69a0      	ldr	r0, [r4, #24]
 8006510:	f000 fac5 	bl	8006a9e <lwip_strnstr>
      if (file_start != NULL) {
 8006514:	4603      	mov	r3, r0
 8006516:	b328      	cbz	r0, 8006564 <http_init_file+0x98>
        int diff = file_start + 4 - hs->file;
 8006518:	3304      	adds	r3, #4
 800651a:	69a2      	ldr	r2, [r4, #24]
 800651c:	1a9a      	subs	r2, r3, r2
        hs->file += diff;
 800651e:	61a3      	str	r3, [r4, #24]
        hs->left -= (u32_t)diff;
 8006520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006522:	1a9b      	subs	r3, r3, r2
 8006524:	6263      	str	r3, [r4, #36]	; 0x24
 8006526:	e01d      	b.n	8006564 <http_init_file+0x98>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8006528:	4b10      	ldr	r3, [pc, #64]	; (800656c <http_init_file+0xa0>)
 800652a:	f640 120b 	movw	r2, #2315	; 0x90b
 800652e:	4910      	ldr	r1, [pc, #64]	; (8006570 <http_init_file+0xa4>)
 8006530:	4810      	ldr	r0, [pc, #64]	; (8006574 <http_init_file+0xa8>)
 8006532:	f00f fa2d 	bl	8015990 <iprintf>
 8006536:	e7d1      	b.n	80064dc <http_init_file+0x10>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8006538:	4b0c      	ldr	r3, [pc, #48]	; (800656c <http_init_file+0xa0>)
 800653a:	f640 1234 	movw	r2, #2356	; 0x934
 800653e:	490e      	ldr	r1, [pc, #56]	; (8006578 <http_init_file+0xac>)
 8006540:	480c      	ldr	r0, [pc, #48]	; (8006574 <http_init_file+0xa8>)
 8006542:	f00f fa25 	bl	8015990 <iprintf>
 8006546:	e7cf      	b.n	80064e8 <http_init_file+0x1c>
    LWIP_ASSERT("HTTP headers not included in file system",
 8006548:	4b08      	ldr	r3, [pc, #32]	; (800656c <http_init_file+0xa0>)
 800654a:	f640 1243 	movw	r2, #2371	; 0x943
 800654e:	490b      	ldr	r1, [pc, #44]	; (800657c <http_init_file+0xb0>)
 8006550:	4808      	ldr	r0, [pc, #32]	; (8006574 <http_init_file+0xa8>)
 8006552:	f00f fa1d 	bl	8015990 <iprintf>
 8006556:	e7d1      	b.n	80064fc <http_init_file+0x30>
    hs->handle = NULL;
 8006558:	2300      	movs	r3, #0
 800655a:	6143      	str	r3, [r0, #20]
    hs->file = NULL;
 800655c:	6183      	str	r3, [r0, #24]
    hs->left = 0;
 800655e:	6243      	str	r3, [r0, #36]	; 0x24
    hs->retries = 0;
 8006560:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
}
 8006564:	2000      	movs	r0, #0
 8006566:	bd70      	pop	{r4, r5, r6, pc}
 8006568:	08017a30 	.word	0x08017a30
 800656c:	08017914 	.word	0x08017914
 8006570:	080179d0 	.word	0x080179d0
 8006574:	08016bb4 	.word	0x08016bb4
 8006578:	080179e4 	.word	0x080179e4
 800657c:	08017a04 	.word	0x08017a04

08006580 <http_get_404_file>:
{
 8006580:	b570      	push	{r4, r5, r6, lr}
 8006582:	4606      	mov	r6, r0
 8006584:	460c      	mov	r4, r1
  *uri = "/404.html";
 8006586:	490c      	ldr	r1, [pc, #48]	; (80065b8 <http_get_404_file+0x38>)
 8006588:	6021      	str	r1, [r4, #0]
  err = fs_open(&hs->file_handle, *uri);
 800658a:	4605      	mov	r5, r0
 800658c:	f7ff fe02 	bl	8006194 <fs_open>
  if (err != ERR_OK) {
 8006590:	b908      	cbnz	r0, 8006596 <http_get_404_file+0x16>
}
 8006592:	4628      	mov	r0, r5
 8006594:	bd70      	pop	{r4, r5, r6, pc}
    *uri = "/404.htm";
 8006596:	4909      	ldr	r1, [pc, #36]	; (80065bc <http_get_404_file+0x3c>)
 8006598:	6021      	str	r1, [r4, #0]
    err = fs_open(&hs->file_handle, *uri);
 800659a:	4630      	mov	r0, r6
 800659c:	f7ff fdfa 	bl	8006194 <fs_open>
    if (err != ERR_OK) {
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d0f6      	beq.n	8006592 <http_get_404_file+0x12>
      *uri = "/404.shtml";
 80065a4:	4906      	ldr	r1, [pc, #24]	; (80065c0 <http_get_404_file+0x40>)
 80065a6:	6021      	str	r1, [r4, #0]
      err = fs_open(&hs->file_handle, *uri);
 80065a8:	4630      	mov	r0, r6
 80065aa:	f7ff fdf3 	bl	8006194 <fs_open>
      if (err != ERR_OK) {
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d0ef      	beq.n	8006592 <http_get_404_file+0x12>
        *uri = NULL;
 80065b2:	2500      	movs	r5, #0
 80065b4:	6025      	str	r5, [r4, #0]
        return NULL;
 80065b6:	e7ec      	b.n	8006592 <http_get_404_file+0x12>
 80065b8:	08017a38 	.word	0x08017a38
 80065bc:	08017a44 	.word	0x08017a44
 80065c0:	08017a50 	.word	0x08017a50

080065c4 <extract_uri_parameters>:
{
 80065c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!params || (params[0] == '\0')) {
 80065c6:	2900      	cmp	r1, #0
 80065c8:	d039      	beq.n	800663e <extract_uri_parameters+0x7a>
 80065ca:	4607      	mov	r7, r0
 80065cc:	460c      	mov	r4, r1
 80065ce:	780b      	ldrb	r3, [r1, #0]
 80065d0:	b3bb      	cbz	r3, 8006642 <extract_uri_parameters+0x7e>
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80065d2:	2500      	movs	r5, #0
 80065d4:	e011      	b.n	80065fa <extract_uri_parameters+0x36>
      pair = strchr(equals, ' ');
 80065d6:	2120      	movs	r1, #32
 80065d8:	4620      	mov	r0, r4
 80065da:	f00f faa7 	bl	8015b2c <strchr>
      if (pair) {
 80065de:	b110      	cbz	r0, 80065e6 <extract_uri_parameters+0x22>
        *pair = '\0';
 80065e0:	2200      	movs	r2, #0
 80065e2:	7002      	strb	r2, [r0, #0]
 80065e4:	e01b      	b.n	800661e <extract_uri_parameters+0x5a>
      pair = NULL;
 80065e6:	4606      	mov	r6, r0
 80065e8:	e019      	b.n	800661e <extract_uri_parameters+0x5a>
      http_cgi_param_vals[loop] = NULL;
 80065ea:	f105 031a 	add.w	r3, r5, #26
 80065ee:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80065f2:	2200      	movs	r2, #0
 80065f4:	605a      	str	r2, [r3, #4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80065f6:	3501      	adds	r5, #1
 80065f8:	4634      	mov	r4, r6
 80065fa:	2d0f      	cmp	r5, #15
 80065fc:	dc22      	bgt.n	8006644 <extract_uri_parameters+0x80>
 80065fe:	b30c      	cbz	r4, 8006644 <extract_uri_parameters+0x80>
    http_cgi_params[loop] = pair;
 8006600:	f105 030a 	add.w	r3, r5, #10
 8006604:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006608:	605c      	str	r4, [r3, #4]
    pair = strchr(pair, '&');
 800660a:	2126      	movs	r1, #38	; 0x26
 800660c:	4620      	mov	r0, r4
 800660e:	f00f fa8d 	bl	8015b2c <strchr>
    if (pair) {
 8006612:	4606      	mov	r6, r0
 8006614:	2800      	cmp	r0, #0
 8006616:	d0de      	beq.n	80065d6 <extract_uri_parameters+0x12>
      *pair = '\0';
 8006618:	2300      	movs	r3, #0
 800661a:	f806 3b01 	strb.w	r3, [r6], #1
    equals = strchr(equals, '=');
 800661e:	213d      	movs	r1, #61	; 0x3d
 8006620:	4620      	mov	r0, r4
 8006622:	f00f fa83 	bl	8015b2c <strchr>
    if (equals) {
 8006626:	4603      	mov	r3, r0
 8006628:	2800      	cmp	r0, #0
 800662a:	d0de      	beq.n	80065ea <extract_uri_parameters+0x26>
      *equals = '\0';
 800662c:	2200      	movs	r2, #0
 800662e:	f803 2b01 	strb.w	r2, [r3], #1
      http_cgi_param_vals[loop] = equals + 1;
 8006632:	f105 021a 	add.w	r2, r5, #26
 8006636:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800663a:	6053      	str	r3, [r2, #4]
 800663c:	e7db      	b.n	80065f6 <extract_uri_parameters+0x32>
    return (0);
 800663e:	2500      	movs	r5, #0
 8006640:	e000      	b.n	8006644 <extract_uri_parameters+0x80>
 8006642:	2500      	movs	r5, #0
}
 8006644:	4628      	mov	r0, r5
 8006646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006648 <http_find_file>:
{
 8006648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664c:	b085      	sub	sp, #20
 800664e:	4605      	mov	r5, r0
 8006650:	9103      	str	r1, [sp, #12]
 8006652:	4617      	mov	r7, r2
  size_t uri_len = strlen(uri);
 8006654:	460c      	mov	r4, r1
 8006656:	4608      	mov	r0, r1
 8006658:	f7fd fdc4 	bl	80041e4 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800665c:	b120      	cbz	r0, 8006668 <http_find_file+0x20>
 800665e:	4680      	mov	r8, r0
 8006660:	1e46      	subs	r6, r0, #1
 8006662:	5da3      	ldrb	r3, [r4, r6]
 8006664:	2b2f      	cmp	r3, #47	; 0x2f
 8006666:	d020      	beq.n	80066aa <http_find_file+0x62>
    params = (char *)strchr(uri, '?');
 8006668:	213f      	movs	r1, #63	; 0x3f
 800666a:	9803      	ldr	r0, [sp, #12]
 800666c:	f00f fa5e 	bl	8015b2c <strchr>
    if (params != NULL) {
 8006670:	4681      	mov	r9, r0
 8006672:	b110      	cbz	r0, 800667a <http_find_file+0x32>
      *params = '\0';
 8006674:	2300      	movs	r3, #0
 8006676:	f809 3b01 	strb.w	r3, [r9], #1
    if (httpd_num_cgis && httpd_cgis) {
 800667a:	4b4c      	ldr	r3, [pc, #304]	; (80067ac <http_find_file+0x164>)
 800667c:	681e      	ldr	r6, [r3, #0]
 800667e:	2e00      	cmp	r6, #0
 8006680:	d073      	beq.n	800676a <http_find_file+0x122>
 8006682:	4b4b      	ldr	r3, [pc, #300]	; (80067b0 <http_find_file+0x168>)
 8006684:	f8d3 8000 	ldr.w	r8, [r3]
 8006688:	f1b8 0f00 	cmp.w	r8, #0
 800668c:	d06d      	beq.n	800676a <http_find_file+0x122>
      for (i = 0; i < httpd_num_cgis; i++) {
 800668e:	2400      	movs	r4, #0
 8006690:	42a6      	cmp	r6, r4
 8006692:	dd6a      	ble.n	800676a <http_find_file+0x122>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8006694:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
 8006698:	f858 1034 	ldr.w	r1, [r8, r4, lsl #3]
 800669c:	9803      	ldr	r0, [sp, #12]
 800669e:	f7fd fd97 	bl	80041d0 <strcmp>
 80066a2:	2800      	cmp	r0, #0
 80066a4:	d050      	beq.n	8006748 <http_find_file+0x100>
      for (i = 0; i < httpd_num_cgis; i++) {
 80066a6:	3401      	adds	r4, #1
 80066a8:	e7f2      	b.n	8006690 <http_find_file+0x48>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80066aa:	4b42      	ldr	r3, [pc, #264]	; (80067b4 <http_find_file+0x16c>)
 80066ac:	429c      	cmp	r4, r3
 80066ae:	d008      	beq.n	80066c2 <http_find_file+0x7a>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80066b0:	2e3f      	cmp	r6, #63	; 0x3f
 80066b2:	bf28      	it	cs
 80066b4:	263f      	movcs	r6, #63	; 0x3f
    if (copy_len > 0) {
 80066b6:	f1b8 0f01 	cmp.w	r8, #1
 80066ba:	d105      	bne.n	80066c8 <http_find_file+0x80>
        file_name = http_uri_buf;
 80066bc:	f04f 0900 	mov.w	r9, #0
 80066c0:	e02d      	b.n	800671e <http_find_file+0xd6>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80066c2:	2801      	cmp	r0, #1
 80066c4:	d1d0      	bne.n	8006668 <http_find_file+0x20>
 80066c6:	e7f3      	b.n	80066b0 <http_find_file+0x68>
      MEMCPY(http_uri_buf, uri, copy_len);
 80066c8:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80067b4 <http_find_file+0x16c>
 80066cc:	4632      	mov	r2, r6
 80066ce:	4621      	mov	r1, r4
 80066d0:	4648      	mov	r0, r9
 80066d2:	f00f f92d 	bl	8015930 <memcpy>
      http_uri_buf[copy_len] = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	f809 3006 	strb.w	r3, [r9, r6]
 80066dc:	e7ee      	b.n	80066bc <http_find_file+0x74>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80066de:	4b36      	ldr	r3, [pc, #216]	; (80067b8 <http_find_file+0x170>)
 80066e0:	f853 a039 	ldr.w	sl, [r3, r9, lsl #3]
 80066e4:	4650      	mov	r0, sl
 80066e6:	f7fd fd7d 	bl	80041e4 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80066ea:	4583      	cmp	fp, r0
 80066ec:	bf28      	it	cs
 80066ee:	4683      	movcs	fp, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80066f0:	4c30      	ldr	r4, [pc, #192]	; (80067b4 <http_find_file+0x16c>)
 80066f2:	465a      	mov	r2, fp
 80066f4:	4651      	mov	r1, sl
 80066f6:	19a0      	adds	r0, r4, r6
 80066f8:	f00f f91a 	bl	8015930 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 80066fc:	44b3      	add	fp, r6
 80066fe:	2300      	movs	r3, #0
 8006700:	f804 300b 	strb.w	r3, [r4, fp]
        file_name = http_uri_buf;
 8006704:	46a2      	mov	sl, r4
 8006706:	e002      	b.n	800670e <http_find_file+0xc6>
        file_name = httpd_default_filenames[loop].name;
 8006708:	4b2b      	ldr	r3, [pc, #172]	; (80067b8 <http_find_file+0x170>)
 800670a:	f853 a039 	ldr.w	sl, [r3, r9, lsl #3]
      err = fs_open(&hs->file_handle, file_name);
 800670e:	462c      	mov	r4, r5
 8006710:	4651      	mov	r1, sl
 8006712:	4628      	mov	r0, r5
 8006714:	f7ff fd3e 	bl	8006194 <fs_open>
      if (err == ERR_OK) {
 8006718:	b168      	cbz	r0, 8006736 <http_find_file+0xee>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800671a:	f109 0901 	add.w	r9, r9, #1
 800671e:	f1b9 0f04 	cmp.w	r9, #4
 8006722:	d80b      	bhi.n	800673c <http_find_file+0xf4>
      if (copy_len > 0) {
 8006724:	f1b8 0f01 	cmp.w	r8, #1
 8006728:	d0ee      	beq.n	8006708 <http_find_file+0xc0>
        if (len_left > 0) {
 800672a:	f1d6 0b3f 	rsbs	fp, r6, #63	; 0x3f
 800672e:	d1d6      	bne.n	80066de <http_find_file+0x96>
        file_name = http_uri_buf;
 8006730:	f8df a080 	ldr.w	sl, [pc, #128]	; 80067b4 <http_find_file+0x16c>
 8006734:	e7eb      	b.n	800670e <http_find_file+0xc6>
        uri = file_name;
 8006736:	f8cd a00c 	str.w	sl, [sp, #12]
        break;
 800673a:	e000      	b.n	800673e <http_find_file+0xf6>
  struct fs_file *file = NULL;
 800673c:	2400      	movs	r4, #0
  if (file == NULL) {
 800673e:	2c00      	cmp	r4, #0
 8006740:	d092      	beq.n	8006668 <http_find_file+0x20>
  char *params = NULL;
 8006742:	f04f 0900 	mov.w	r9, #0
 8006746:	e016      	b.n	8006776 <http_find_file+0x12e>
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8006748:	4649      	mov	r1, r9
 800674a:	4628      	mov	r0, r5
 800674c:	f7ff ff3a 	bl	80065c4 <extract_uri_parameters>
 8006750:	4601      	mov	r1, r0
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8006752:	4b17      	ldr	r3, [pc, #92]	; (80067b0 <http_find_file+0x168>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	449a      	add	sl, r3
 8006758:	f8da 6004 	ldr.w	r6, [sl, #4]
 800675c:	f105 036c 	add.w	r3, r5, #108	; 0x6c
 8006760:	f105 022c 	add.w	r2, r5, #44	; 0x2c
 8006764:	4620      	mov	r0, r4
 8006766:	47b0      	blx	r6
 8006768:	9003      	str	r0, [sp, #12]
    err = fs_open(&hs->file_handle, uri);
 800676a:	462c      	mov	r4, r5
 800676c:	9903      	ldr	r1, [sp, #12]
 800676e:	4628      	mov	r0, r5
 8006770:	f7ff fd10 	bl	8006194 <fs_open>
    if (err == ERR_OK) {
 8006774:	b968      	cbnz	r0, 8006792 <http_find_file+0x14a>
  if (file == NULL) {
 8006776:	b194      	cbz	r4, 800679e <http_find_file+0x156>
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8006778:	f8cd 9004 	str.w	r9, [sp, #4]
 800677c:	2300      	movs	r3, #0
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	9b03      	ldr	r3, [sp, #12]
 8006782:	463a      	mov	r2, r7
 8006784:	4621      	mov	r1, r4
 8006786:	4628      	mov	r0, r5
 8006788:	f7ff fea0 	bl	80064cc <http_init_file>
}
 800678c:	b005      	add	sp, #20
 800678e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      file = http_get_404_file(hs, &uri);
 8006792:	a903      	add	r1, sp, #12
 8006794:	4628      	mov	r0, r5
 8006796:	f7ff fef3 	bl	8006580 <http_get_404_file>
 800679a:	4604      	mov	r4, r0
 800679c:	e7eb      	b.n	8006776 <http_find_file+0x12e>
    file = http_get_404_file(hs, &uri);
 800679e:	a903      	add	r1, sp, #12
 80067a0:	4628      	mov	r0, r5
 80067a2:	f7ff feed 	bl	8006580 <http_get_404_file>
 80067a6:	4604      	mov	r4, r0
 80067a8:	e7e6      	b.n	8006778 <http_find_file+0x130>
 80067aa:	bf00      	nop
 80067ac:	2000012c 	.word	0x2000012c
 80067b0:	20000128 	.word	0x20000128
 80067b4:	200000e8 	.word	0x200000e8
 80067b8:	08017b00 	.word	0x08017b00

080067bc <http_parse_request>:
{
 80067bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c0:	460c      	mov	r4, r1
  LWIP_ASSERT("p != NULL", p != NULL);
 80067c2:	4605      	mov	r5, r0
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d04f      	beq.n	8006868 <http_parse_request+0xac>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 80067c8:	2c00      	cmp	r4, #0
 80067ca:	d055      	beq.n	8006878 <http_parse_request+0xbc>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80067cc:	6963      	ldr	r3, [r4, #20]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d17e      	bne.n	80068d0 <http_parse_request+0x114>
 80067d2:	69a3      	ldr	r3, [r4, #24]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d17e      	bne.n	80068d6 <http_parse_request+0x11a>
  if (hs->req == NULL) {
 80067d8:	6a20      	ldr	r0, [r4, #32]
 80067da:	2800      	cmp	r0, #0
 80067dc:	d054      	beq.n	8006888 <http_parse_request+0xcc>
    pbuf_cat(hs->req, p);
 80067de:	4629      	mov	r1, r5
 80067e0:	f001 fe0a 	bl	80083f8 <pbuf_cat>
  pbuf_ref(p);
 80067e4:	4628      	mov	r0, r5
 80067e6:	f001 fdef 	bl	80083c8 <pbuf_ref>
  if (hs->req->next != NULL) {
 80067ea:	6a20      	ldr	r0, [r4, #32]
 80067ec:	6803      	ldr	r3, [r0, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d04c      	beq.n	800688c <http_parse_request+0xd0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80067f2:	8905      	ldrh	r5, [r0, #8]
 80067f4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80067f8:	429d      	cmp	r5, r3
 80067fa:	bf28      	it	cs
 80067fc:	461d      	movcs	r5, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80067fe:	4e3a      	ldr	r6, [pc, #232]	; (80068e8 <http_parse_request+0x12c>)
 8006800:	2300      	movs	r3, #0
 8006802:	462a      	mov	r2, r5
 8006804:	4631      	mov	r1, r6
 8006806:	f001 fec9 	bl	800859c <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 800680a:	2d06      	cmp	r5, #6
 800680c:	d91e      	bls.n	800684c <http_parse_request+0x90>
    crlf = lwip_strnstr(data, CRLF, data_len);
 800680e:	46a9      	mov	r9, r5
 8006810:	462a      	mov	r2, r5
 8006812:	4936      	ldr	r1, [pc, #216]	; (80068ec <http_parse_request+0x130>)
 8006814:	4630      	mov	r0, r6
 8006816:	f000 f942 	bl	8006a9e <lwip_strnstr>
    if (crlf != NULL) {
 800681a:	b1b8      	cbz	r0, 800684c <http_parse_request+0x90>
      if (!strncmp(data, "GET ", 4)) {
 800681c:	2204      	movs	r2, #4
 800681e:	4934      	ldr	r1, [pc, #208]	; (80068f0 <http_parse_request+0x134>)
 8006820:	4630      	mov	r0, r6
 8006822:	f00f f990 	bl	8015b46 <strncmp>
 8006826:	4682      	mov	sl, r0
 8006828:	2800      	cmp	r0, #0
 800682a:	d132      	bne.n	8006892 <http_parse_request+0xd6>
        sp1 = data + 3;
 800682c:	f106 0803 	add.w	r8, r6, #3
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8006830:	1d37      	adds	r7, r6, #4
 8006832:	3d04      	subs	r5, #4
 8006834:	b2ad      	uxth	r5, r5
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8006836:	462a      	mov	r2, r5
 8006838:	492e      	ldr	r1, [pc, #184]	; (80068f4 <http_parse_request+0x138>)
 800683a:	4638      	mov	r0, r7
 800683c:	f000 f92f 	bl	8006a9e <lwip_strnstr>
      if (sp2 == NULL) {
 8006840:	4603      	mov	r3, r0
 8006842:	b358      	cbz	r0, 800689c <http_parse_request+0xe0>
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8006844:	1bdd      	subs	r5, r3, r7
      if ((sp2 != 0) && (sp2 > sp1)) {
 8006846:	b10b      	cbz	r3, 800684c <http_parse_request+0x90>
 8006848:	4543      	cmp	r3, r8
 800684a:	d830      	bhi.n	80068ae <http_parse_request+0xf2>
  clen = pbuf_clen(hs->req);
 800684c:	6a20      	ldr	r0, [r4, #32]
 800684e:	f001 fdb3 	bl	80083b8 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8006852:	6a23      	ldr	r3, [r4, #32]
 8006854:	891b      	ldrh	r3, [r3, #8]
 8006856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800685a:	d23f      	bcs.n	80068dc <http_parse_request+0x120>
 800685c:	2805      	cmp	r0, #5
 800685e:	d940      	bls.n	80068e2 <http_parse_request+0x126>
    return http_find_error_file(hs, 400);
 8006860:	f06f 000f 	mvn.w	r0, #15
}
 8006864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8006868:	4b23      	ldr	r3, [pc, #140]	; (80068f8 <http_parse_request+0x13c>)
 800686a:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800686e:	4923      	ldr	r1, [pc, #140]	; (80068fc <http_parse_request+0x140>)
 8006870:	4823      	ldr	r0, [pc, #140]	; (8006900 <http_parse_request+0x144>)
 8006872:	f00f f88d 	bl	8015990 <iprintf>
 8006876:	e7a7      	b.n	80067c8 <http_parse_request+0xc>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8006878:	4b1f      	ldr	r3, [pc, #124]	; (80068f8 <http_parse_request+0x13c>)
 800687a:	f240 72af 	movw	r2, #1967	; 0x7af
 800687e:	4921      	ldr	r1, [pc, #132]	; (8006904 <http_parse_request+0x148>)
 8006880:	481f      	ldr	r0, [pc, #124]	; (8006900 <http_parse_request+0x144>)
 8006882:	f00f f885 	bl	8015990 <iprintf>
 8006886:	e7a1      	b.n	80067cc <http_parse_request+0x10>
    hs->req = p;
 8006888:	6225      	str	r5, [r4, #32]
 800688a:	e7ab      	b.n	80067e4 <http_parse_request+0x28>
    data = (char *)p->payload;
 800688c:	686e      	ldr	r6, [r5, #4]
    data_len = p->len;
 800688e:	896d      	ldrh	r5, [r5, #10]
    if (p->len != p->tot_len) {
 8006890:	e7bb      	b.n	800680a <http_parse_request+0x4e>
        data[4] = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	7133      	strb	r3, [r6, #4]
        return http_find_error_file(hs, 501);
 8006896:	f06f 000f 	mvn.w	r0, #15
 800689a:	e7e3      	b.n	8006864 <http_parse_request+0xa8>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800689c:	462a      	mov	r2, r5
 800689e:	4913      	ldr	r1, [pc, #76]	; (80068ec <http_parse_request+0x130>)
 80068a0:	4638      	mov	r0, r7
 80068a2:	f000 f8fc 	bl	8006a9e <lwip_strnstr>
 80068a6:	4603      	mov	r3, r0
        is_09 = 1;
 80068a8:	f04f 0a01 	mov.w	sl, #1
 80068ac:	e7ca      	b.n	8006844 <http_parse_request+0x88>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80068ae:	464a      	mov	r2, r9
 80068b0:	4915      	ldr	r1, [pc, #84]	; (8006908 <http_parse_request+0x14c>)
 80068b2:	4630      	mov	r0, r6
 80068b4:	f000 f8f3 	bl	8006a9e <lwip_strnstr>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d0c7      	beq.n	800684c <http_parse_request+0x90>
          *sp1 = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	70f3      	strb	r3, [r6, #3]
          uri[uri_len] = 0;
 80068c0:	b2ad      	uxth	r5, r5
 80068c2:	557b      	strb	r3, [r7, r5]
            return http_find_file(hs, uri, is_09);
 80068c4:	4652      	mov	r2, sl
 80068c6:	4639      	mov	r1, r7
 80068c8:	4620      	mov	r0, r4
 80068ca:	f7ff febd 	bl	8006648 <http_find_file>
 80068ce:	e7c9      	b.n	8006864 <http_parse_request+0xa8>
    return ERR_USE;
 80068d0:	f06f 0007 	mvn.w	r0, #7
 80068d4:	e7c6      	b.n	8006864 <http_parse_request+0xa8>
 80068d6:	f06f 0007 	mvn.w	r0, #7
 80068da:	e7c3      	b.n	8006864 <http_parse_request+0xa8>
    return http_find_error_file(hs, 400);
 80068dc:	f06f 000f 	mvn.w	r0, #15
 80068e0:	e7c0      	b.n	8006864 <http_parse_request+0xa8>
    return ERR_INPROGRESS;
 80068e2:	f06f 0004 	mvn.w	r0, #4
 80068e6:	e7bd      	b.n	8006864 <http_parse_request+0xa8>
 80068e8:	20000130 	.word	0x20000130
 80068ec:	08017a68 	.word	0x08017a68
 80068f0:	08017a6c 	.word	0x08017a6c
 80068f4:	08017a74 	.word	0x08017a74
 80068f8:	08017914 	.word	0x08017914
 80068fc:	08019ea8 	.word	0x08019ea8
 8006900:	08016bb4 	.word	0x08016bb4
 8006904:	08017a5c 	.word	0x08017a5c
 8006908:	08017a30 	.word	0x08017a30

0800690c <http_recv>:
{
 800690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690e:	4605      	mov	r5, r0
 8006910:	460e      	mov	r6, r1
 8006912:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8006914:	b95b      	cbnz	r3, 800692e <http_recv+0x22>
 8006916:	b152      	cbz	r2, 800692e <http_recv+0x22>
 8006918:	b148      	cbz	r0, 800692e <http_recv+0x22>
    altcp_recved(pcb, p->tot_len);
 800691a:	8911      	ldrh	r1, [r2, #8]
 800691c:	4630      	mov	r0, r6
 800691e:	f002 fb0b 	bl	8008f38 <tcp_recved>
    if (hs->handle == NULL) {
 8006922:	696b      	ldr	r3, [r5, #20]
 8006924:	b18b      	cbz	r3, 800694a <http_recv+0x3e>
      pbuf_free(p);
 8006926:	4620      	mov	r0, r4
 8006928:	f001 fbe2 	bl	80080f0 <pbuf_free>
 800692c:	e00b      	b.n	8006946 <http_recv+0x3a>
    if (p != NULL) {
 800692e:	b134      	cbz	r4, 800693e <http_recv+0x32>
      altcp_recved(pcb, p->tot_len);
 8006930:	8921      	ldrh	r1, [r4, #8]
 8006932:	4630      	mov	r0, r6
 8006934:	f002 fb00 	bl	8008f38 <tcp_recved>
      pbuf_free(p);
 8006938:	4620      	mov	r0, r4
 800693a:	f001 fbd9 	bl	80080f0 <pbuf_free>
    http_close_conn(pcb, hs);
 800693e:	4629      	mov	r1, r5
 8006940:	4630      	mov	r0, r6
 8006942:	f7ff fd3f 	bl	80063c4 <http_close_conn>
}
 8006946:	2000      	movs	r0, #0
 8006948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      err_t parsed = http_parse_request(p, hs, pcb);
 800694a:	4632      	mov	r2, r6
 800694c:	4629      	mov	r1, r5
 800694e:	4620      	mov	r0, r4
 8006950:	f7ff ff34 	bl	80067bc <http_parse_request>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8006954:	4607      	mov	r7, r0
 8006956:	b140      	cbz	r0, 800696a <http_recv+0x5e>
 8006958:	f110 0f05 	cmn.w	r0, #5
 800695c:	d005      	beq.n	800696a <http_recv+0x5e>
 800695e:	f110 0f10 	cmn.w	r0, #16
 8006962:	d002      	beq.n	800696a <http_recv+0x5e>
 8006964:	f110 0f08 	cmn.w	r0, #8
 8006968:	d114      	bne.n	8006994 <http_recv+0x88>
      if (parsed != ERR_INPROGRESS) {
 800696a:	f117 0f05 	cmn.w	r7, #5
 800696e:	d005      	beq.n	800697c <http_recv+0x70>
        if (hs->req != NULL) {
 8006970:	6a28      	ldr	r0, [r5, #32]
 8006972:	b118      	cbz	r0, 800697c <http_recv+0x70>
          pbuf_free(hs->req);
 8006974:	f001 fbbc 	bl	80080f0 <pbuf_free>
          hs->req = NULL;
 8006978:	2300      	movs	r3, #0
 800697a:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 800697c:	4620      	mov	r0, r4
 800697e:	f001 fbb7 	bl	80080f0 <pbuf_free>
      if (parsed == ERR_OK) {
 8006982:	b17f      	cbz	r7, 80069a4 <http_recv+0x98>
      } else if (parsed == ERR_ARG) {
 8006984:	f117 0f10 	cmn.w	r7, #16
 8006988:	d1dd      	bne.n	8006946 <http_recv+0x3a>
        http_close_conn(pcb, hs);
 800698a:	4629      	mov	r1, r5
 800698c:	4630      	mov	r0, r6
 800698e:	f7ff fd19 	bl	80063c4 <http_close_conn>
 8006992:	e7d8      	b.n	8006946 <http_recv+0x3a>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8006994:	4b06      	ldr	r3, [pc, #24]	; (80069b0 <http_recv+0xa4>)
 8006996:	f640 2204 	movw	r2, #2564	; 0xa04
 800699a:	4906      	ldr	r1, [pc, #24]	; (80069b4 <http_recv+0xa8>)
 800699c:	4806      	ldr	r0, [pc, #24]	; (80069b8 <http_recv+0xac>)
 800699e:	f00e fff7 	bl	8015990 <iprintf>
 80069a2:	e7e2      	b.n	800696a <http_recv+0x5e>
          http_send(pcb, hs);
 80069a4:	4629      	mov	r1, r5
 80069a6:	4630      	mov	r0, r6
 80069a8:	f7ff fd3a 	bl	8006420 <http_send>
 80069ac:	e7cb      	b.n	8006946 <http_recv+0x3a>
 80069ae:	bf00      	nop
 80069b0:	08017914 	.word	0x08017914
 80069b4:	08017a78 	.word	0x08017a78
 80069b8:	08016bb4 	.word	0x08016bb4

080069bc <http_state_init>:
{
 80069bc:	b508      	push	{r3, lr}
  memset(hs, 0, sizeof(struct http_state));
 80069be:	22ac      	movs	r2, #172	; 0xac
 80069c0:	2100      	movs	r1, #0
 80069c2:	f00e ffdd 	bl	8015980 <memset>
}
 80069c6:	bd08      	pop	{r3, pc}

080069c8 <http_state_alloc>:
{
 80069c8:	b510      	push	{r4, lr}
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80069ca:	20ac      	movs	r0, #172	; 0xac
 80069cc:	f000 fdc6 	bl	800755c <mem_malloc>
  if (ret != NULL) {
 80069d0:	4604      	mov	r4, r0
 80069d2:	b108      	cbz	r0, 80069d8 <http_state_alloc+0x10>
    http_state_init(ret);
 80069d4:	f7ff fff2 	bl	80069bc <http_state_init>
}
 80069d8:	4620      	mov	r0, r4
 80069da:	bd10      	pop	{r4, pc}

080069dc <http_accept>:
  if ((err != ERR_OK) || (pcb == NULL)) {
 80069dc:	bb12      	cbnz	r2, 8006a24 <http_accept+0x48>
{
 80069de:	b538      	push	{r3, r4, r5, lr}
 80069e0:	460c      	mov	r4, r1
 80069e2:	4615      	mov	r5, r2
  if ((err != ERR_OK) || (pcb == NULL)) {
 80069e4:	b309      	cbz	r1, 8006a2a <http_accept+0x4e>
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80069e6:	2101      	movs	r1, #1
 80069e8:	4620      	mov	r0, r4
 80069ea:	f002 faff 	bl	8008fec <tcp_setprio>
  hs = http_state_alloc();
 80069ee:	f7ff ffeb 	bl	80069c8 <http_state_alloc>
  if (hs == NULL) {
 80069f2:	4601      	mov	r1, r0
 80069f4:	b1e0      	cbz	r0, 8006a30 <http_accept+0x54>
  hs->pcb = pcb;
 80069f6:	61c4      	str	r4, [r0, #28]
  altcp_arg(pcb, hs);
 80069f8:	4620      	mov	r0, r4
 80069fa:	f002 fb31 	bl	8009060 <tcp_arg>
  altcp_recv(pcb, http_recv);
 80069fe:	490e      	ldr	r1, [pc, #56]	; (8006a38 <http_accept+0x5c>)
 8006a00:	4620      	mov	r0, r4
 8006a02:	f002 fb31 	bl	8009068 <tcp_recv>
  altcp_err(pcb, http_err);
 8006a06:	490d      	ldr	r1, [pc, #52]	; (8006a3c <http_accept+0x60>)
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f002 fb61 	bl	80090d0 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8006a0e:	2204      	movs	r2, #4
 8006a10:	490b      	ldr	r1, [pc, #44]	; (8006a40 <http_accept+0x64>)
 8006a12:	4620      	mov	r0, r4
 8006a14:	f002 fb7e 	bl	8009114 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8006a18:	490a      	ldr	r1, [pc, #40]	; (8006a44 <http_accept+0x68>)
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f002 fb3e 	bl	800909c <tcp_sent>
  return ERR_OK;
 8006a20:	4628      	mov	r0, r5
}
 8006a22:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_VAL;
 8006a24:	f06f 0005 	mvn.w	r0, #5
}
 8006a28:	4770      	bx	lr
    return ERR_VAL;
 8006a2a:	f06f 0005 	mvn.w	r0, #5
 8006a2e:	e7f8      	b.n	8006a22 <http_accept+0x46>
    return ERR_MEM;
 8006a30:	f04f 30ff 	mov.w	r0, #4294967295
 8006a34:	e7f5      	b.n	8006a22 <http_accept+0x46>
 8006a36:	bf00      	nop
 8006a38:	0800690d 	.word	0x0800690d
 8006a3c:	0800647d 	.word	0x0800647d
 8006a40:	08006489 	.word	0x08006489
 8006a44:	08006461 	.word	0x08006461

08006a48 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8006a48:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8006a4a:	202e      	movs	r0, #46	; 0x2e
 8006a4c:	f002 ff06 	bl	800985c <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8006a50:	4604      	mov	r4, r0
 8006a52:	b120      	cbz	r0, 8006a5e <httpd_init+0x16>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8006a54:	2150      	movs	r1, #80	; 0x50
 8006a56:	4620      	mov	r0, r4
 8006a58:	f7ff fbc4 	bl	80061e4 <httpd_init_pcb>
}
 8006a5c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8006a5e:	4b04      	ldr	r3, [pc, #16]	; (8006a70 <httpd_init+0x28>)
 8006a60:	f640 2272 	movw	r2, #2674	; 0xa72
 8006a64:	4903      	ldr	r1, [pc, #12]	; (8006a74 <httpd_init+0x2c>)
 8006a66:	4804      	ldr	r0, [pc, #16]	; (8006a78 <httpd_init+0x30>)
 8006a68:	f00e ff92 	bl	8015990 <iprintf>
 8006a6c:	e7f2      	b.n	8006a54 <httpd_init+0xc>
 8006a6e:	bf00      	nop
 8006a70:	08017914 	.word	0x08017914
 8006a74:	08017aa4 	.word	0x08017aa4
 8006a78:	08016bb4 	.word	0x08016bb4

08006a7c <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8006a7c:	0a03      	lsrs	r3, r0, #8
 8006a7e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 8006a82:	b280      	uxth	r0, r0
 8006a84:	4770      	bx	lr

08006a86 <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
 8006a86:	0203      	lsls	r3, r0, #8
 8006a88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a8c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006a90:	0a02      	lsrs	r2, r0, #8
 8006a92:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8006a96:	4313      	orrs	r3, r2
}
 8006a98:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 8006a9c:	4770      	bx	lr

08006a9e <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8006a9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aa2:	4607      	mov	r7, r0
 8006aa4:	460e      	mov	r6, r1
 8006aa6:	4691      	mov	r9, r2
  const char *p;
  size_t tokenlen = strlen(token);
 8006aa8:	4608      	mov	r0, r1
 8006aaa:	f7fd fb9b 	bl	80041e4 <strlen>
  if (tokenlen == 0) {
 8006aae:	b1c0      	cbz	r0, 8006ae2 <lwip_strnstr+0x44>
 8006ab0:	4680      	mov	r8, r0
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8006ab2:	463c      	mov	r4, r7
 8006ab4:	e000      	b.n	8006ab8 <lwip_strnstr+0x1a>
 8006ab6:	3401      	adds	r4, #1
 8006ab8:	7825      	ldrb	r5, [r4, #0]
 8006aba:	b1b5      	cbz	r5, 8006aea <lwip_strnstr+0x4c>
 8006abc:	eb04 0308 	add.w	r3, r4, r8
 8006ac0:	eb07 0209 	add.w	r2, r7, r9
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d80a      	bhi.n	8006ade <lwip_strnstr+0x40>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8006ac8:	7833      	ldrb	r3, [r6, #0]
 8006aca:	42ab      	cmp	r3, r5
 8006acc:	d1f3      	bne.n	8006ab6 <lwip_strnstr+0x18>
 8006ace:	4642      	mov	r2, r8
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f00f f837 	bl	8015b46 <strncmp>
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d1ec      	bne.n	8006ab6 <lwip_strnstr+0x18>
 8006adc:	e002      	b.n	8006ae4 <lwip_strnstr+0x46>
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
 8006ade:	2400      	movs	r4, #0
 8006ae0:	e000      	b.n	8006ae4 <lwip_strnstr+0x46>
    return LWIP_CONST_CAST(char *, buffer);
 8006ae2:	463c      	mov	r4, r7
}
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return NULL;
 8006aea:	2400      	movs	r4, #0
 8006aec:	e7fa      	b.n	8006ae4 <lwip_strnstr+0x46>
	...

08006af0 <dns_backupserver_available>:
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
  u8_t ret = 0;

  if (pentry) {
 8006af0:	2800      	cmp	r0, #0
 8006af2:	d036      	beq.n	8006b62 <dns_backupserver_available+0x72>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8006af4:	7fc0      	ldrb	r0, [r0, #31]
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d135      	bne.n	8006b66 <dns_backupserver_available+0x76>
 8006afa:	1c43      	adds	r3, r0, #1
 8006afc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8006b00:	4a1b      	ldr	r2, [pc, #108]	; (8006b70 <dns_backupserver_available+0x80>)
 8006b02:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006b06:	7d12      	ldrb	r2, [r2, #20]
 8006b08:	2a06      	cmp	r2, #6
 8006b0a:	d009      	beq.n	8006b20 <dns_backupserver_available+0x30>
 8006b0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006b10:	4a17      	ldr	r2, [pc, #92]	; (8006b70 <dns_backupserver_available+0x80>)
 8006b12:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b16:	3b00      	subs	r3, #0
 8006b18:	bf18      	it	ne
 8006b1a:	2301      	movne	r3, #1
 8006b1c:	bb2b      	cbnz	r3, 8006b6a <dns_backupserver_available+0x7a>
 8006b1e:	4770      	bx	lr
 8006b20:	460a      	mov	r2, r1
 8006b22:	4913      	ldr	r1, [pc, #76]	; (8006b70 <dns_backupserver_available+0x80>)
 8006b24:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8006b28:	b99a      	cbnz	r2, 8006b52 <dns_backupserver_available+0x62>
 8006b2a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006b2e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006b32:	6852      	ldr	r2, [r2, #4]
 8006b34:	b97a      	cbnz	r2, 8006b56 <dns_backupserver_available+0x66>
 8006b36:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8006b3a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006b3e:	6892      	ldr	r2, [r2, #8]
 8006b40:	b95a      	cbnz	r2, 8006b5a <dns_backupserver_available+0x6a>
 8006b42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006b46:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	b13b      	cbz	r3, 8006b5e <dns_backupserver_available+0x6e>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e7e4      	b.n	8006b1c <dns_backupserver_available+0x2c>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e7e2      	b.n	8006b1c <dns_backupserver_available+0x2c>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e7e0      	b.n	8006b1c <dns_backupserver_available+0x2c>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e7de      	b.n	8006b1c <dns_backupserver_available+0x2c>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	e7dc      	b.n	8006b1c <dns_backupserver_available+0x2c>
  u8_t ret = 0;
 8006b62:	2000      	movs	r0, #0
 8006b64:	4770      	bx	lr
 8006b66:	2000      	movs	r0, #0
 8006b68:	4770      	bx	lr
      ret = 1;
 8006b6a:	2001      	movs	r0, #1
    }
  }

  return ret;
}
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	20000570 	.word	0x20000570

08006b74 <dns_create_txid>:
{
 8006b74:	b508      	push	{r3, lr}
  txid = (u16_t)DNS_RAND_TXID();
 8006b76:	f00e ff99 	bl	8015aac <rand>
 8006b7a:	b280      	uxth	r0, r0
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	e001      	b.n	8006b84 <dns_create_txid+0x10>
 8006b80:	3301      	adds	r3, #1
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d80f      	bhi.n	8006ba8 <dns_create_txid+0x34>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8006b88:	4908      	ldr	r1, [pc, #32]	; (8006bac <dns_create_txid+0x38>)
 8006b8a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006b8e:	fb02 1203 	mla	r2, r2, r3, r1
 8006b92:	7f92      	ldrb	r2, [r2, #30]
 8006b94:	2a02      	cmp	r2, #2
 8006b96:	d1f3      	bne.n	8006b80 <dns_create_txid+0xc>
        (dns_table[i].txid == txid)) {
 8006b98:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006b9c:	fb02 1203 	mla	r2, r2, r3, r1
 8006ba0:	8b92      	ldrh	r2, [r2, #28]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8006ba2:	4282      	cmp	r2, r0
 8006ba4:	d1ec      	bne.n	8006b80 <dns_create_txid+0xc>
 8006ba6:	e7e6      	b.n	8006b76 <dns_create_txid+0x2>
}
 8006ba8:	bd08      	pop	{r3, pc}
 8006baa:	bf00      	nop
 8006bac:	200005a0 	.word	0x200005a0

08006bb0 <dns_call_found>:
{
 8006bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb4:	4605      	mov	r5, r0
  if (addr != NULL) {
 8006bb6:	4688      	mov	r8, r1
 8006bb8:	b1a9      	cbz	r1, 8006be6 <dns_call_found+0x36>
    if (IP_IS_V6_VAL(*addr)) {
 8006bba:	7d0b      	ldrb	r3, [r1, #20]
 8006bbc:	2b06      	cmp	r3, #6
 8006bbe:	d014      	beq.n	8006bea <dns_call_found+0x3a>
      LWIP_ASSERT("invalid response", !LWIP_DNS_ADDRTYPE_IS_IPV6(dns_table[idx].reqaddrtype));
 8006bc0:	4a51      	ldr	r2, [pc, #324]	; (8006d08 <dns_call_found+0x158>)
 8006bc2:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006bc6:	fb03 2300 	mla	r3, r3, r0, r2
 8006bca:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d027      	beq.n	8006c22 <dns_call_found+0x72>
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d025      	beq.n	8006c22 <dns_call_found+0x72>
      dns_table[idx].reqaddrtype = LWIP_DNS_ADDRTYPE_IPV4;
 8006bd6:	4a4c      	ldr	r2, [pc, #304]	; (8006d08 <dns_call_found+0x158>)
 8006bd8:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006bdc:	fb03 2305 	mla	r3, r3, r5, r2
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
{
 8006be6:	2400      	movs	r4, #0
 8006be8:	e025      	b.n	8006c36 <dns_call_found+0x86>
      LWIP_ASSERT("invalid response", LWIP_DNS_ADDRTYPE_IS_IPV6(dns_table[idx].reqaddrtype));
 8006bea:	4a47      	ldr	r2, [pc, #284]	; (8006d08 <dns_call_found+0x158>)
 8006bec:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006bf0:	fb03 2300 	mla	r3, r3, r0, r2
 8006bf4:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d001      	beq.n	8006c00 <dns_call_found+0x50>
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d108      	bne.n	8006c12 <dns_call_found+0x62>
      dns_table[idx].reqaddrtype = LWIP_DNS_ADDRTYPE_IPV6;
 8006c00:	4a41      	ldr	r2, [pc, #260]	; (8006d08 <dns_call_found+0x158>)
 8006c02:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006c06:	fb03 2305 	mla	r3, r3, r5, r2
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
 8006c10:	e7e9      	b.n	8006be6 <dns_call_found+0x36>
      LWIP_ASSERT("invalid response", LWIP_DNS_ADDRTYPE_IS_IPV6(dns_table[idx].reqaddrtype));
 8006c12:	4b3e      	ldr	r3, [pc, #248]	; (8006d0c <dns_call_found+0x15c>)
 8006c14:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8006c18:	493d      	ldr	r1, [pc, #244]	; (8006d10 <dns_call_found+0x160>)
 8006c1a:	483e      	ldr	r0, [pc, #248]	; (8006d14 <dns_call_found+0x164>)
 8006c1c:	f00e feb8 	bl	8015990 <iprintf>
 8006c20:	e7ee      	b.n	8006c00 <dns_call_found+0x50>
      LWIP_ASSERT("invalid response", !LWIP_DNS_ADDRTYPE_IS_IPV6(dns_table[idx].reqaddrtype));
 8006c22:	4b3a      	ldr	r3, [pc, #232]	; (8006d0c <dns_call_found+0x15c>)
 8006c24:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006c28:	4939      	ldr	r1, [pc, #228]	; (8006d10 <dns_call_found+0x160>)
 8006c2a:	483a      	ldr	r0, [pc, #232]	; (8006d14 <dns_call_found+0x164>)
 8006c2c:	f00e feb0 	bl	8015990 <iprintf>
 8006c30:	e7d1      	b.n	8006bd6 <dns_call_found+0x26>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006c32:	3401      	adds	r4, #1
 8006c34:	b2e4      	uxtb	r4, r4
 8006c36:	2c03      	cmp	r4, #3
 8006c38:	d824      	bhi.n	8006c84 <dns_call_found+0xd4>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8006c3a:	4626      	mov	r6, r4
 8006c3c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006c40:	4a35      	ldr	r2, [pc, #212]	; (8006d18 <dns_call_found+0x168>)
 8006c42:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8006c46:	2f00      	cmp	r7, #0
 8006c48:	d0f3      	beq.n	8006c32 <dns_call_found+0x82>
 8006c4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c4e:	7a1b      	ldrb	r3, [r3, #8]
 8006c50:	42ab      	cmp	r3, r5
 8006c52:	d1ee      	bne.n	8006c32 <dns_call_found+0x82>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8006c54:	f44f 7094 	mov.w	r0, #296	; 0x128
 8006c58:	fb00 f005 	mul.w	r0, r0, r5
 8006c5c:	3020      	adds	r0, #32
 8006c5e:	4b2a      	ldr	r3, [pc, #168]	; (8006d08 <dns_call_found+0x158>)
 8006c60:	4418      	add	r0, r3
 8006c62:	4692      	mov	sl, r2
 8006c64:	ea4f 0944 	mov.w	r9, r4, lsl #1
 8006c68:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8006c6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	4641      	mov	r1, r8
 8006c74:	3004      	adds	r0, #4
 8006c76:	47b8      	blx	r7
      dns_requests[i].found = NULL;
 8006c78:	444e      	add	r6, r9
 8006c7a:	00b6      	lsls	r6, r6, #2
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f84a 3006 	str.w	r3, [sl, r6]
 8006c82:	e7d6      	b.n	8006c32 <dns_call_found+0x82>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006c84:	2300      	movs	r3, #0
 8006c86:	e001      	b.n	8006c8c <dns_call_found+0xdc>
 8006c88:	3301      	adds	r3, #1
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	d81c      	bhi.n	8006cca <dns_call_found+0x11a>
    if (i == idx) {
 8006c90:	42ab      	cmp	r3, r5
 8006c92:	d0f9      	beq.n	8006c88 <dns_call_found+0xd8>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8006c94:	491c      	ldr	r1, [pc, #112]	; (8006d08 <dns_call_found+0x158>)
 8006c96:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006c9a:	fb02 1203 	mla	r2, r2, r3, r1
 8006c9e:	7f92      	ldrb	r2, [r2, #30]
 8006ca0:	2a02      	cmp	r2, #2
 8006ca2:	d1f1      	bne.n	8006c88 <dns_call_found+0xd8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8006ca4:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006ca8:	fb02 1003 	mla	r0, r2, r3, r1
 8006cac:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
 8006cb0:	fb02 1205 	mla	r2, r2, r5, r1
 8006cb4:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8006cb8:	4290      	cmp	r0, r2
 8006cba:	d1e5      	bne.n	8006c88 <dns_call_found+0xd8>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8006cbc:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006cc0:	fb02 1405 	mla	r4, r2, r5, r1
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8006cca:	4a0f      	ldr	r2, [pc, #60]	; (8006d08 <dns_call_found+0x158>)
 8006ccc:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006cd0:	fb03 2305 	mla	r3, r3, r5, r2
 8006cd4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006cd8:	2b03      	cmp	r3, #3
 8006cda:	d901      	bls.n	8006ce0 <dns_call_found+0x130>
}
 8006cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8006ce0:	4c0e      	ldr	r4, [pc, #56]	; (8006d1c <dns_call_found+0x16c>)
 8006ce2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8006ce6:	f007 fbf1 	bl	800e4cc <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8006cea:	4807      	ldr	r0, [pc, #28]	; (8006d08 <dns_call_found+0x158>)
 8006cec:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006cf0:	fb03 0505 	mla	r5, r3, r5, r0
 8006cf4:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8006cfe:	2304      	movs	r3, #4
 8006d00:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
}
 8006d04:	e7ea      	b.n	8006cdc <dns_call_found+0x12c>
 8006d06:	bf00      	nop
 8006d08:	200005a0 	.word	0x200005a0
 8006d0c:	08017b28 	.word	0x08017b28
 8006d10:	08017b58 	.word	0x08017b58
 8006d14:	08016bb4 	.word	0x08016bb4
 8006d18:	20000540 	.word	0x20000540
 8006d1c:	20000530 	.word	0x20000530

08006d20 <dns_send>:
{
 8006d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d24:	b084      	sub	sp, #16
 8006d26:	4606      	mov	r6, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8006d28:	4a7e      	ldr	r2, [pc, #504]	; (8006f24 <dns_send+0x204>)
 8006d2a:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006d2e:	fb03 2300 	mla	r3, r3, r0, r2
 8006d32:	7fdb      	ldrb	r3, [r3, #31]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d84c      	bhi.n	8006dd2 <dns_send+0xb2>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8006d38:	4a7a      	ldr	r2, [pc, #488]	; (8006f24 <dns_send+0x204>)
 8006d3a:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006d3e:	fb03 2306 	mla	r3, r3, r6, r2
 8006d42:	7fdb      	ldrb	r3, [r3, #31]
 8006d44:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8006d48:	4a77      	ldr	r2, [pc, #476]	; (8006f28 <dns_send+0x208>)
 8006d4a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006d4e:	7d12      	ldrb	r2, [r2, #20]
 8006d50:	2a06      	cmp	r2, #6
 8006d52:	d046      	beq.n	8006de2 <dns_send+0xc2>
 8006d54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006d58:	4a73      	ldr	r2, [pc, #460]	; (8006f28 <dns_send+0x208>)
 8006d5a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006d5e:	fab3 f383 	clz	r3, r3
 8006d62:	095b      	lsrs	r3, r3, #5
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d15c      	bne.n	8006e22 <dns_send+0x102>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8006d68:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006d6c:	fb03 f306 	mul.w	r3, r3, r6
 8006d70:	3320      	adds	r3, #32
 8006d72:	4f6c      	ldr	r7, [pc, #432]	; (8006f24 <dns_send+0x204>)
 8006d74:	441f      	add	r7, r3
 8006d76:	3704      	adds	r7, #4
 8006d78:	4638      	mov	r0, r7
 8006d7a:	f7fd fa33 	bl	80041e4 <strlen>
 8006d7e:	f100 0112 	add.w	r1, r0, #18
 8006d82:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006d86:	b289      	uxth	r1, r1
 8006d88:	204a      	movs	r0, #74	; 0x4a
 8006d8a:	f001 fa13 	bl	80081b4 <pbuf_alloc>
  if (p != NULL) {
 8006d8e:	4605      	mov	r5, r0
 8006d90:	2800      	cmp	r0, #0
 8006d92:	f000 80c3 	beq.w	8006f1c <dns_send+0x1fc>
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8006d96:	2300      	movs	r3, #0
 8006d98:	9301      	str	r3, [sp, #4]
 8006d9a:	9302      	str	r3, [sp, #8]
 8006d9c:	9303      	str	r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 8006d9e:	4a61      	ldr	r2, [pc, #388]	; (8006f24 <dns_send+0x204>)
 8006da0:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006da4:	fb03 2306 	mla	r3, r3, r6, r2
 8006da8:	8b98      	ldrh	r0, [r3, #28]
 8006daa:	f7ff fe67 	bl	8006a7c <lwip_htons>
 8006dae:	f8ad 0004 	strh.w	r0, [sp, #4]
    hdr.flags1 = DNS_FLAG1_RD;
 8006db2:	2301      	movs	r3, #1
 8006db4:	f88d 3006 	strb.w	r3, [sp, #6]
    hdr.numquestions = PP_HTONS(1);
 8006db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dbc:	f8ad 3008 	strh.w	r3, [sp, #8]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8006dc0:	220c      	movs	r2, #12
 8006dc2:	a901      	add	r1, sp, #4
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f001 fc37 	bl	8008638 <pbuf_take>
    --hostname;
 8006dca:	3f01      	subs	r7, #1
    query_idx = SIZEOF_DNS_HDR;
 8006dcc:	f04f 080c 	mov.w	r8, #12
 8006dd0:	e055      	b.n	8006e7e <dns_send+0x15e>
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8006dd2:	4b56      	ldr	r3, [pc, #344]	; (8006f2c <dns_send+0x20c>)
 8006dd4:	f240 22fa 	movw	r2, #762	; 0x2fa
 8006dd8:	4955      	ldr	r1, [pc, #340]	; (8006f30 <dns_send+0x210>)
 8006dda:	4856      	ldr	r0, [pc, #344]	; (8006f34 <dns_send+0x214>)
 8006ddc:	f00e fdd8 	bl	8015990 <iprintf>
 8006de0:	e7aa      	b.n	8006d38 <dns_send+0x18>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8006de2:	460a      	mov	r2, r1
 8006de4:	4950      	ldr	r1, [pc, #320]	; (8006f28 <dns_send+0x208>)
 8006de6:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8006dea:	b992      	cbnz	r2, 8006e12 <dns_send+0xf2>
 8006dec:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8006df0:	4a4d      	ldr	r2, [pc, #308]	; (8006f28 <dns_send+0x208>)
 8006df2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006df6:	6852      	ldr	r2, [r2, #4]
 8006df8:	b96a      	cbnz	r2, 8006e16 <dns_send+0xf6>
 8006dfa:	4a4b      	ldr	r2, [pc, #300]	; (8006f28 <dns_send+0x208>)
 8006dfc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006e00:	6892      	ldr	r2, [r2, #8]
 8006e02:	b952      	cbnz	r2, 8006e1a <dns_send+0xfa>
 8006e04:	4a48      	ldr	r2, [pc, #288]	; (8006f28 <dns_send+0x208>)
 8006e06:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	b13b      	cbz	r3, 8006e1e <dns_send+0xfe>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	e7a8      	b.n	8006d64 <dns_send+0x44>
 8006e12:	2300      	movs	r3, #0
 8006e14:	e7a6      	b.n	8006d64 <dns_send+0x44>
 8006e16:	2300      	movs	r3, #0
 8006e18:	e7a4      	b.n	8006d64 <dns_send+0x44>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	e7a2      	b.n	8006d64 <dns_send+0x44>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e7a0      	b.n	8006d64 <dns_send+0x44>
    dns_call_found(idx, NULL);
 8006e22:	2100      	movs	r1, #0
 8006e24:	4630      	mov	r0, r6
 8006e26:	f7ff fec3 	bl	8006bb0 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 8006e2a:	4a3e      	ldr	r2, [pc, #248]	; (8006f24 <dns_send+0x204>)
 8006e2c:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006e30:	fb03 2606 	mla	r6, r3, r6, r2
 8006e34:	2400      	movs	r4, #0
 8006e36:	77b4      	strb	r4, [r6, #30]
}
 8006e38:	4620      	mov	r0, r4
 8006e3a:	b004      	add	sp, #16
 8006e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      copy_len = (u16_t)(hostname - hostname_part);
 8006e40:	eba7 0a09 	sub.w	sl, r7, r9
 8006e44:	fa1f fa8a 	uxth.w	sl, sl
      if (query_idx + n + 1 > 0xFFFF) {
 8006e48:	eb08 0204 	add.w	r2, r8, r4
 8006e4c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006e50:	429a      	cmp	r2, r3
 8006e52:	dc20      	bgt.n	8006e96 <dns_send+0x176>
      pbuf_put_at(p, query_idx, n);
 8006e54:	4622      	mov	r2, r4
 8006e56:	4641      	mov	r1, r8
 8006e58:	4628      	mov	r0, r5
 8006e5a:	f001 fccb 	bl	80087f4 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8006e5e:	f108 0301 	add.w	r3, r8, #1
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	4652      	mov	r2, sl
 8006e66:	4649      	mov	r1, r9
 8006e68:	4628      	mov	r0, r5
 8006e6a:	f001 fc45 	bl	80086f8 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8006e6e:	4444      	add	r4, r8
 8006e70:	b2a4      	uxth	r4, r4
 8006e72:	f104 0801 	add.w	r8, r4, #1
 8006e76:	fa1f f888 	uxth.w	r8, r8
    } while (*hostname != 0);
 8006e7a:	783b      	ldrb	r3, [r7, #0]
 8006e7c:	b18b      	cbz	r3, 8006ea2 <dns_send+0x182>
      ++hostname;
 8006e7e:	3701      	adds	r7, #1
 8006e80:	46b9      	mov	r9, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8006e82:	2400      	movs	r4, #0
 8006e84:	783b      	ldrb	r3, [r7, #0]
 8006e86:	2b2e      	cmp	r3, #46	; 0x2e
 8006e88:	d0da      	beq.n	8006e40 <dns_send+0x120>
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d0d8      	beq.n	8006e40 <dns_send+0x120>
        ++n;
 8006e8e:	3401      	adds	r4, #1
 8006e90:	b2e4      	uxtb	r4, r4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8006e92:	3701      	adds	r7, #1
 8006e94:	e7f6      	b.n	8006e84 <dns_send+0x164>
  pbuf_free(p);
 8006e96:	4628      	mov	r0, r5
 8006e98:	f001 f92a 	bl	80080f0 <pbuf_free>
  return ERR_VAL;
 8006e9c:	f06f 0405 	mvn.w	r4, #5
 8006ea0:	e7ca      	b.n	8006e38 <dns_send+0x118>
    pbuf_put_at(p, query_idx, 0);
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	4641      	mov	r1, r8
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	f001 fca4 	bl	80087f4 <pbuf_put_at>
    query_idx++;
 8006eac:	1ca3      	adds	r3, r4, #2
 8006eae:	b29b      	uxth	r3, r3
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
 8006eb0:	491c      	ldr	r1, [pc, #112]	; (8006f24 <dns_send+0x204>)
 8006eb2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006eb6:	fb02 1206 	mla	r2, r2, r6, r1
 8006eba:	f892 2124 	ldrb.w	r2, [r2, #292]	; 0x124
 8006ebe:	2a03      	cmp	r2, #3
 8006ec0:	d006      	beq.n	8006ed0 <dns_send+0x1b0>
 8006ec2:	2a01      	cmp	r2, #1
 8006ec4:	d004      	beq.n	8006ed0 <dns_send+0x1b0>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8006ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006eca:	f8ad 2000 	strh.w	r2, [sp]
 8006ece:	e003      	b.n	8006ed8 <dns_send+0x1b8>
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
 8006ed0:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8006ed4:	f8ad 2000 	strh.w	r2, [sp]
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8006ed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006edc:	f8ad 2002 	strh.w	r2, [sp, #2]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8006ee0:	2204      	movs	r2, #4
 8006ee2:	4669      	mov	r1, sp
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	f001 fc07 	bl	80086f8 <pbuf_take_at>
    pcb_idx = entry->pcb_idx;
 8006eea:	4b0e      	ldr	r3, [pc, #56]	; (8006f24 <dns_send+0x204>)
 8006eec:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006ef0:	fb02 3606 	mla	r6, r2, r6, r3
 8006ef4:	f896 4023 	ldrb.w	r4, [r6, #35]	; 0x23
      dst = &dns_servers[entry->server_idx];
 8006ef8:	7ff2      	ldrb	r2, [r6, #31]
 8006efa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8006efe:	2335      	movs	r3, #53	; 0x35
 8006f00:	4909      	ldr	r1, [pc, #36]	; (8006f28 <dns_send+0x208>)
 8006f02:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006f06:	4629      	mov	r1, r5
 8006f08:	480b      	ldr	r0, [pc, #44]	; (8006f38 <dns_send+0x218>)
 8006f0a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8006f0e:	f007 f98d 	bl	800e22c <udp_sendto>
 8006f12:	4604      	mov	r4, r0
    pbuf_free(p);
 8006f14:	4628      	mov	r0, r5
 8006f16:	f001 f8eb 	bl	80080f0 <pbuf_free>
 8006f1a:	e78d      	b.n	8006e38 <dns_send+0x118>
    err = ERR_MEM;
 8006f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8006f20:	e78a      	b.n	8006e38 <dns_send+0x118>
 8006f22:	bf00      	nop
 8006f24:	200005a0 	.word	0x200005a0
 8006f28:	20000570 	.word	0x20000570
 8006f2c:	08017b28 	.word	0x08017b28
 8006f30:	08017b6c 	.word	0x08017b6c
 8006f34:	08016bb4 	.word	0x08016bb4
 8006f38:	20000530 	.word	0x20000530

08006f3c <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8006f3c:	b538      	push	{r3, r4, r5, lr}
 8006f3e:	4604      	mov	r4, r0
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8006f40:	4d49      	ldr	r5, [pc, #292]	; (8007068 <dns_check_entry+0x12c>)
 8006f42:	f44f 7094 	mov.w	r0, #296	; 0x128
 8006f46:	fb00 5504 	mla	r5, r0, r4, r5

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8006f4a:	2c03      	cmp	r4, #3
 8006f4c:	d80b      	bhi.n	8006f66 <dns_check_entry+0x2a>

  switch (entry->state) {
 8006f4e:	4a46      	ldr	r2, [pc, #280]	; (8007068 <dns_check_entry+0x12c>)
 8006f50:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006f54:	fb03 2304 	mla	r3, r3, r4, r2
 8006f58:	7f9b      	ldrb	r3, [r3, #30]
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d87c      	bhi.n	8007058 <dns_check_entry+0x11c>
 8006f5e:	e8df f003 	tbb	[pc, r3]
 8006f62:	0a1e      	.short	0x0a1e
 8006f64:	631f      	.short	0x631f
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8006f66:	4b41      	ldr	r3, [pc, #260]	; (800706c <dns_check_entry+0x130>)
 8006f68:	f240 421c 	movw	r2, #1052	; 0x41c
 8006f6c:	4940      	ldr	r1, [pc, #256]	; (8007070 <dns_check_entry+0x134>)
 8006f6e:	4841      	ldr	r0, [pc, #260]	; (8007074 <dns_check_entry+0x138>)
 8006f70:	f00e fd0e 	bl	8015990 <iprintf>
 8006f74:	e7eb      	b.n	8006f4e <dns_check_entry+0x12>
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8006f76:	f7ff fdfd 	bl	8006b74 <dns_create_txid>
 8006f7a:	4a3b      	ldr	r2, [pc, #236]	; (8007068 <dns_check_entry+0x12c>)
 8006f7c:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006f80:	fb03 2304 	mla	r3, r3, r4, r2
 8006f84:	8398      	strh	r0, [r3, #28]
      entry->state = DNS_STATE_ASKING;
 8006f86:	2202      	movs	r2, #2
 8006f88:	779a      	strb	r2, [r3, #30]
      entry->server_idx = 0;
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	77da      	strb	r2, [r3, #31]
      entry->tmr = 1;
 8006f8e:	2101      	movs	r1, #1
 8006f90:	f883 1020 	strb.w	r1, [r3, #32]
      entry->retries = 0;
 8006f94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* send DNS packet for this entry */
      err = dns_send(i);
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f7ff fec1 	bl	8006d20 <dns_send>
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 8006f9e:	bd38      	pop	{r3, r4, r5, pc}
      if (--entry->tmr == 0) {
 8006fa0:	4b31      	ldr	r3, [pc, #196]	; (8007068 <dns_check_entry+0x12c>)
 8006fa2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006fa6:	fb02 3204 	mla	r2, r2, r4, r3
 8006faa:	f892 3020 	ldrb.w	r3, [r2, #32]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	f882 3020 	strb.w	r3, [r2, #32]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1f1      	bne.n	8006f9e <dns_check_entry+0x62>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8006fba:	4b2b      	ldr	r3, [pc, #172]	; (8007068 <dns_check_entry+0x12c>)
 8006fbc:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006fc0:	fb02 3204 	mla	r2, r2, r4, r3
 8006fc4:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8006fc8:	3301      	adds	r3, #1
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 8006fd0:	2b04      	cmp	r3, #4
 8006fd2:	d00a      	beq.n	8006fea <dns_check_entry+0xae>
          entry->tmr = entry->retries;
 8006fd4:	4924      	ldr	r1, [pc, #144]	; (8007068 <dns_check_entry+0x12c>)
 8006fd6:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006fda:	fb02 1204 	mla	r2, r2, r4, r1
 8006fde:	f882 3020 	strb.w	r3, [r2, #32]
        err = dns_send(i);
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f7ff fe9c 	bl	8006d20 <dns_send>
        if (err != ERR_OK) {
 8006fe8:	e7d9      	b.n	8006f9e <dns_check_entry+0x62>
          if (dns_backupserver_available(entry)
 8006fea:	4628      	mov	r0, r5
 8006fec:	f7ff fd80 	bl	8006af0 <dns_backupserver_available>
 8006ff0:	b170      	cbz	r0, 8007010 <dns_check_entry+0xd4>
            entry->server_idx++;
 8006ff2:	4a1d      	ldr	r2, [pc, #116]	; (8007068 <dns_check_entry+0x12c>)
 8006ff4:	f44f 7394 	mov.w	r3, #296	; 0x128
 8006ff8:	fb03 2304 	mla	r3, r3, r4, r2
 8006ffc:	7fda      	ldrb	r2, [r3, #31]
 8006ffe:	3201      	adds	r2, #1
 8007000:	77da      	strb	r2, [r3, #31]
            entry->tmr = 1;
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2020 	strb.w	r2, [r3, #32]
            entry->retries = 0;
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800700e:	e7e8      	b.n	8006fe2 <dns_check_entry+0xa6>
            dns_call_found(i, NULL);
 8007010:	2100      	movs	r1, #0
 8007012:	4620      	mov	r0, r4
 8007014:	f7ff fdcc 	bl	8006bb0 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 8007018:	4a13      	ldr	r2, [pc, #76]	; (8007068 <dns_check_entry+0x12c>)
 800701a:	f44f 7394 	mov.w	r3, #296	; 0x128
 800701e:	fb03 2404 	mla	r4, r3, r4, r2
 8007022:	2300      	movs	r3, #0
 8007024:	77a3      	strb	r3, [r4, #30]
            break;
 8007026:	e7ba      	b.n	8006f9e <dns_check_entry+0x62>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8007028:	f44f 7394 	mov.w	r3, #296	; 0x128
 800702c:	fb03 f304 	mul.w	r3, r3, r4
 8007030:	4a0d      	ldr	r2, [pc, #52]	; (8007068 <dns_check_entry+0x12c>)
 8007032:	58d3      	ldr	r3, [r2, r3]
 8007034:	b143      	cbz	r3, 8007048 <dns_check_entry+0x10c>
 8007036:	3b01      	subs	r3, #1
 8007038:	f44f 7294 	mov.w	r2, #296	; 0x128
 800703c:	fb02 f204 	mul.w	r2, r2, r4
 8007040:	4909      	ldr	r1, [pc, #36]	; (8007068 <dns_check_entry+0x12c>)
 8007042:	508b      	str	r3, [r1, r2]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1aa      	bne.n	8006f9e <dns_check_entry+0x62>
        entry->state = DNS_STATE_UNUSED;
 8007048:	4807      	ldr	r0, [pc, #28]	; (8007068 <dns_check_entry+0x12c>)
 800704a:	f44f 7394 	mov.w	r3, #296	; 0x128
 800704e:	fb03 0404 	mla	r4, r3, r4, r0
 8007052:	2300      	movs	r3, #0
 8007054:	77a3      	strb	r3, [r4, #30]
 8007056:	e7a2      	b.n	8006f9e <dns_check_entry+0x62>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8007058:	4b04      	ldr	r3, [pc, #16]	; (800706c <dns_check_entry+0x130>)
 800705a:	f240 425b 	movw	r2, #1115	; 0x45b
 800705e:	4906      	ldr	r1, [pc, #24]	; (8007078 <dns_check_entry+0x13c>)
 8007060:	4804      	ldr	r0, [pc, #16]	; (8007074 <dns_check_entry+0x138>)
 8007062:	f00e fc95 	bl	8015990 <iprintf>
}
 8007066:	e79a      	b.n	8006f9e <dns_check_entry+0x62>
 8007068:	200005a0 	.word	0x200005a0
 800706c:	08017b28 	.word	0x08017b28
 8007070:	08017b84 	.word	0x08017b84
 8007074:	08016bb4 	.word	0x08016bb4
 8007078:	08017ba0 	.word	0x08017ba0

0800707c <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800707c:	b510      	push	{r4, lr}
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800707e:	2400      	movs	r4, #0
 8007080:	e004      	b.n	800708c <dns_check_entries+0x10>
    dns_check_entry(i);
 8007082:	4620      	mov	r0, r4
 8007084:	f7ff ff5a 	bl	8006f3c <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8007088:	3401      	adds	r4, #1
 800708a:	b2e4      	uxtb	r4, r4
 800708c:	2c03      	cmp	r4, #3
 800708e:	d9f8      	bls.n	8007082 <dns_check_entries+0x6>
  }
}
 8007090:	bd10      	pop	{r4, pc}

08007092 <dns_init>:
}
 8007092:	4770      	bx	lr

08007094 <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 8007094:	2801      	cmp	r0, #1
 8007096:	d900      	bls.n	800709a <dns_setserver+0x6>
 8007098:	4770      	bx	lr
{
 800709a:	b430      	push	{r4, r5}
    if (dnsserver != NULL) {
 800709c:	b169      	cbz	r1, 80070ba <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 800709e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80070a2:	4d0c      	ldr	r5, [pc, #48]	; (80070d4 <dns_setserver+0x40>)
 80070a4:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
 80070a8:	460c      	mov	r4, r1
 80070aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80070ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80070ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80070b2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80070b6:	bc30      	pop	{r4, r5}
 80070b8:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 80070ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80070be:	4c05      	ldr	r4, [pc, #20]	; (80070d4 <dns_setserver+0x40>)
 80070c0:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 80070c4:	4d04      	ldr	r5, [pc, #16]	; (80070d8 <dns_setserver+0x44>)
 80070c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80070ce:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80070d2:	e7f0      	b.n	80070b6 <dns_setserver+0x22>
 80070d4:	20000570 	.word	0x20000570
 80070d8:	0801a4d4 	.word	0x0801a4d4

080070dc <dns_tmr>:
{
 80070dc:	b508      	push	{r3, lr}
  dns_check_entries();
 80070de:	f7ff ffcd 	bl	800707c <dns_check_entries>
}
 80070e2:	bd08      	pop	{r3, pc}

080070e4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80070e4:	b410      	push	{r4}
 80070e6:	b083      	sub	sp, #12
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 80070e8:	2300      	movs	r3, #0
 80070ea:	f8ad 3006 	strh.w	r3, [sp, #6]
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80070ee:	f010 0401 	ands.w	r4, r0, #1
 80070f2:	d006      	beq.n	8007102 <lwip_standard_chksum+0x1e>
 80070f4:	4299      	cmp	r1, r3
 80070f6:	dd04      	ble.n	8007102 <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 80070f8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80070fc:	f88d 3007 	strb.w	r3, [sp, #7]
    len--;
 8007100:	3901      	subs	r1, #1
  u32_t sum = 0;
 8007102:	2300      	movs	r3, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8007104:	2901      	cmp	r1, #1
 8007106:	dd04      	ble.n	8007112 <lwip_standard_chksum+0x2e>
    sum += *ps++;
 8007108:	f830 2b02 	ldrh.w	r2, [r0], #2
 800710c:	4413      	add	r3, r2
    len -= 2;
 800710e:	3902      	subs	r1, #2
 8007110:	e7f8      	b.n	8007104 <lwip_standard_chksum+0x20>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8007112:	2900      	cmp	r1, #0
 8007114:	dd02      	ble.n	800711c <lwip_standard_chksum+0x38>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8007116:	7802      	ldrb	r2, [r0, #0]
 8007118:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 800711c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8007120:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8007122:	b298      	uxth	r0, r3
 8007124:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8007128:	b298      	uxth	r0, r3
 800712a:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 800712e:	b124      	cbz	r4, 800713a <lwip_standard_chksum+0x56>
    sum = SWAP_BYTES_IN_WORD(sum);
 8007130:	0203      	lsls	r3, r0, #8
 8007132:	b29b      	uxth	r3, r3
 8007134:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8007138:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 800713a:	b280      	uxth	r0, r0
 800713c:	b003      	add	sp, #12
 800713e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007142:	4770      	bx	lr

08007144 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8007144:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8007146:	f7ff ffcd 	bl	80070e4 <lwip_standard_chksum>
 800714a:	43c0      	mvns	r0, r0
}
 800714c:	b280      	uxth	r0, r0
 800714e:	bd08      	pop	{r3, pc}

08007150 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007150:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007152:	f000 f8cb 	bl	80072ec <mem_init>
  memp_init();
 8007156:	f000 fafd 	bl	8007754 <memp_init>
  pbuf_init();
  netif_init();
 800715a:	f000 fbf3 	bl	8007944 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800715e:	f006 fbfb 	bl	800d958 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007162:	f001 fc4f 	bl	8008a04 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 8007166:	f009 fbad 	bl	80108c4 <igmp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800716a:	f7ff ff92 	bl	8007092 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800716e:	f006 fae1 	bl	800d734 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007172:	bd08      	pop	{r3, pc}

08007174 <ptr_to_mem>:
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
  return (struct mem *)(void *)&ram[ptr];
 8007174:	4b01      	ldr	r3, [pc, #4]	; (800717c <ptr_to_mem+0x8>)
 8007176:	681b      	ldr	r3, [r3, #0]
}
 8007178:	4418      	add	r0, r3
 800717a:	4770      	bx	lr
 800717c:	20000a44 	.word	0x20000a44

08007180 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
  return (mem_size_t)((u8_t *)mem - ram);
 8007180:	4b02      	ldr	r3, [pc, #8]	; (800718c <mem_to_ptr+0xc>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	1ac0      	subs	r0, r0, r3
}
 8007186:	b280      	uxth	r0, r0
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	20000a44 	.word	0x20000a44

08007190 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007192:	4604      	mov	r4, r0
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007194:	f7ff fff4 	bl	8007180 <mem_to_ptr>
 8007198:	4607      	mov	r7, r0
  nmem = ptr_to_mem(mem->next);
 800719a:	8825      	ldrh	r5, [r4, #0]
 800719c:	4628      	mov	r0, r5
 800719e:	f7ff ffe9 	bl	8007174 <ptr_to_mem>
 80071a2:	4606      	mov	r6, r0
  pmem = ptr_to_mem(mem->prev);
 80071a4:	8864      	ldrh	r4, [r4, #2]
 80071a6:	4620      	mov	r0, r4
 80071a8:	f7ff ffe4 	bl	8007174 <ptr_to_mem>
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80071ac:	f5b5 6f48 	cmp.w	r5, #3200	; 0xc80
 80071b0:	d810      	bhi.n	80071d4 <mem_link_valid+0x44>
 80071b2:	f5b4 6f48 	cmp.w	r4, #3200	; 0xc80
 80071b6:	d80f      	bhi.n	80071d8 <mem_link_valid+0x48>
 80071b8:	42bc      	cmp	r4, r7
 80071ba:	d002      	beq.n	80071c2 <mem_link_valid+0x32>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80071bc:	8803      	ldrh	r3, [r0, #0]
 80071be:	42bb      	cmp	r3, r7
 80071c0:	d10c      	bne.n	80071dc <mem_link_valid+0x4c>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80071c2:	4b09      	ldr	r3, [pc, #36]	; (80071e8 <mem_link_valid+0x58>)
 80071c4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80071c6:	42b3      	cmp	r3, r6
 80071c8:	d00a      	beq.n	80071e0 <mem_link_valid+0x50>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80071ca:	8873      	ldrh	r3, [r6, #2]
 80071cc:	42bb      	cmp	r3, r7
 80071ce:	d109      	bne.n	80071e4 <mem_link_valid+0x54>
    return 0;
  }
  return 1;
 80071d0:	2001      	movs	r0, #1
 80071d2:	e000      	b.n	80071d6 <mem_link_valid+0x46>
    return 0;
 80071d4:	2000      	movs	r0, #0
}
 80071d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return 0;
 80071d8:	2000      	movs	r0, #0
 80071da:	e7fc      	b.n	80071d6 <mem_link_valid+0x46>
 80071dc:	2000      	movs	r0, #0
 80071de:	e7fa      	b.n	80071d6 <mem_link_valid+0x46>
  return 1;
 80071e0:	2001      	movs	r0, #1
 80071e2:	e7f8      	b.n	80071d6 <mem_link_valid+0x46>
    return 0;
 80071e4:	2000      	movs	r0, #0
 80071e6:	e7f6      	b.n	80071d6 <mem_link_valid+0x46>
 80071e8:	20000a48 	.word	0x20000a48

080071ec <plug_holes>:
{
 80071ec:	b538      	push	{r3, r4, r5, lr}
 80071ee:	4604      	mov	r4, r0
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80071f0:	4b35      	ldr	r3, [pc, #212]	; (80072c8 <plug_holes+0xdc>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4283      	cmp	r3, r0
 80071f6:	d840      	bhi.n	800727a <plug_holes+0x8e>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80071f8:	4b34      	ldr	r3, [pc, #208]	; (80072cc <plug_holes+0xe0>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	42a3      	cmp	r3, r4
 80071fe:	d944      	bls.n	800728a <plug_holes+0x9e>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007200:	7923      	ldrb	r3, [r4, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d149      	bne.n	800729a <plug_holes+0xae>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007206:	8823      	ldrh	r3, [r4, #0]
 8007208:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 800720c:	d84d      	bhi.n	80072aa <plug_holes+0xbe>
  nmem = ptr_to_mem(mem->next);
 800720e:	8820      	ldrh	r0, [r4, #0]
 8007210:	f7ff ffb0 	bl	8007174 <ptr_to_mem>
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007214:	4284      	cmp	r4, r0
 8007216:	d016      	beq.n	8007246 <plug_holes+0x5a>
 8007218:	7903      	ldrb	r3, [r0, #4]
 800721a:	b9a3      	cbnz	r3, 8007246 <plug_holes+0x5a>
 800721c:	4b2b      	ldr	r3, [pc, #172]	; (80072cc <plug_holes+0xe0>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4283      	cmp	r3, r0
 8007222:	d010      	beq.n	8007246 <plug_holes+0x5a>
    if (lfree == nmem) {
 8007224:	4b2a      	ldr	r3, [pc, #168]	; (80072d0 <plug_holes+0xe4>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4283      	cmp	r3, r0
 800722a:	d046      	beq.n	80072ba <plug_holes+0xce>
    mem->next = nmem->next;
 800722c:	8803      	ldrh	r3, [r0, #0]
 800722e:	8023      	strh	r3, [r4, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007230:	8800      	ldrh	r0, [r0, #0]
 8007232:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
 8007236:	d006      	beq.n	8007246 <plug_holes+0x5a>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007238:	f7ff ff9c 	bl	8007174 <ptr_to_mem>
 800723c:	4605      	mov	r5, r0
 800723e:	4620      	mov	r0, r4
 8007240:	f7ff ff9e 	bl	8007180 <mem_to_ptr>
 8007244:	8068      	strh	r0, [r5, #2]
  pmem = ptr_to_mem(mem->prev);
 8007246:	8860      	ldrh	r0, [r4, #2]
 8007248:	f7ff ff94 	bl	8007174 <ptr_to_mem>
 800724c:	4605      	mov	r5, r0
  if (pmem != mem && pmem->used == 0) {
 800724e:	4284      	cmp	r4, r0
 8007250:	d012      	beq.n	8007278 <plug_holes+0x8c>
 8007252:	7903      	ldrb	r3, [r0, #4]
 8007254:	b983      	cbnz	r3, 8007278 <plug_holes+0x8c>
    if (lfree == mem) {
 8007256:	4b1e      	ldr	r3, [pc, #120]	; (80072d0 <plug_holes+0xe4>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	42a3      	cmp	r3, r4
 800725c:	d030      	beq.n	80072c0 <plug_holes+0xd4>
    pmem->next = mem->next;
 800725e:	8823      	ldrh	r3, [r4, #0]
 8007260:	802b      	strh	r3, [r5, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007262:	8820      	ldrh	r0, [r4, #0]
 8007264:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
 8007268:	d006      	beq.n	8007278 <plug_holes+0x8c>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800726a:	f7ff ff83 	bl	8007174 <ptr_to_mem>
 800726e:	4604      	mov	r4, r0
 8007270:	4628      	mov	r0, r5
 8007272:	f7ff ff85 	bl	8007180 <mem_to_ptr>
 8007276:	8060      	strh	r0, [r4, #2]
}
 8007278:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800727a:	4b16      	ldr	r3, [pc, #88]	; (80072d4 <plug_holes+0xe8>)
 800727c:	f240 12df 	movw	r2, #479	; 0x1df
 8007280:	4915      	ldr	r1, [pc, #84]	; (80072d8 <plug_holes+0xec>)
 8007282:	4816      	ldr	r0, [pc, #88]	; (80072dc <plug_holes+0xf0>)
 8007284:	f00e fb84 	bl	8015990 <iprintf>
 8007288:	e7b6      	b.n	80071f8 <plug_holes+0xc>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800728a:	4b12      	ldr	r3, [pc, #72]	; (80072d4 <plug_holes+0xe8>)
 800728c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007290:	4913      	ldr	r1, [pc, #76]	; (80072e0 <plug_holes+0xf4>)
 8007292:	4812      	ldr	r0, [pc, #72]	; (80072dc <plug_holes+0xf0>)
 8007294:	f00e fb7c 	bl	8015990 <iprintf>
 8007298:	e7b2      	b.n	8007200 <plug_holes+0x14>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800729a:	4b0e      	ldr	r3, [pc, #56]	; (80072d4 <plug_holes+0xe8>)
 800729c:	f240 12e1 	movw	r2, #481	; 0x1e1
 80072a0:	4910      	ldr	r1, [pc, #64]	; (80072e4 <plug_holes+0xf8>)
 80072a2:	480e      	ldr	r0, [pc, #56]	; (80072dc <plug_holes+0xf0>)
 80072a4:	f00e fb74 	bl	8015990 <iprintf>
 80072a8:	e7ad      	b.n	8007206 <plug_holes+0x1a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80072aa:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <plug_holes+0xe8>)
 80072ac:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80072b0:	490d      	ldr	r1, [pc, #52]	; (80072e8 <plug_holes+0xfc>)
 80072b2:	480a      	ldr	r0, [pc, #40]	; (80072dc <plug_holes+0xf0>)
 80072b4:	f00e fb6c 	bl	8015990 <iprintf>
 80072b8:	e7a9      	b.n	800720e <plug_holes+0x22>
      lfree = mem;
 80072ba:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <plug_holes+0xe4>)
 80072bc:	601c      	str	r4, [r3, #0]
 80072be:	e7b5      	b.n	800722c <plug_holes+0x40>
      lfree = pmem;
 80072c0:	4b03      	ldr	r3, [pc, #12]	; (80072d0 <plug_holes+0xe4>)
 80072c2:	6018      	str	r0, [r3, #0]
 80072c4:	e7cb      	b.n	800725e <plug_holes+0x72>
 80072c6:	bf00      	nop
 80072c8:	20000a44 	.word	0x20000a44
 80072cc:	20000a48 	.word	0x20000a48
 80072d0:	20000a40 	.word	0x20000a40
 80072d4:	08017bd8 	.word	0x08017bd8
 80072d8:	08017c08 	.word	0x08017c08
 80072dc:	08016bb4 	.word	0x08016bb4
 80072e0:	08017c20 	.word	0x08017c20
 80072e4:	08017c3c 	.word	0x08017c3c
 80072e8:	08017c58 	.word	0x08017c58

080072ec <mem_init>:
{
 80072ec:	b538      	push	{r3, r4, r5, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80072ee:	4c0b      	ldr	r4, [pc, #44]	; (800731c <mem_init+0x30>)
 80072f0:	f024 0403 	bic.w	r4, r4, #3
 80072f4:	4b0a      	ldr	r3, [pc, #40]	; (8007320 <mem_init+0x34>)
 80072f6:	601c      	str	r4, [r3, #0]
  mem->next = MEM_SIZE_ALIGNED;
 80072f8:	f44f 6548 	mov.w	r5, #3200	; 0xc80
 80072fc:	8025      	strh	r5, [r4, #0]
  mem->prev = 0;
 80072fe:	2300      	movs	r3, #0
 8007300:	8063      	strh	r3, [r4, #2]
  mem->used = 0;
 8007302:	7123      	strb	r3, [r4, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007304:	4628      	mov	r0, r5
 8007306:	f7ff ff35 	bl	8007174 <ptr_to_mem>
 800730a:	4b06      	ldr	r3, [pc, #24]	; (8007324 <mem_init+0x38>)
 800730c:	6018      	str	r0, [r3, #0]
  ram_end->used = 1;
 800730e:	2301      	movs	r3, #1
 8007310:	7103      	strb	r3, [r0, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007312:	8005      	strh	r5, [r0, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007314:	8045      	strh	r5, [r0, #2]
  lfree = (struct mem *)(void *)ram;
 8007316:	4b04      	ldr	r3, [pc, #16]	; (8007328 <mem_init+0x3c>)
 8007318:	601c      	str	r4, [r3, #0]
}
 800731a:	bd38      	pop	{r3, r4, r5, pc}
 800731c:	20003e7b 	.word	0x20003e7b
 8007320:	20000a44 	.word	0x20000a44
 8007324:	20000a48 	.word	0x20000a48
 8007328:	20000a40 	.word	0x20000a40

0800732c <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800732c:	2800      	cmp	r0, #0
 800732e:	d044      	beq.n	80073ba <mem_free+0x8e>
{
 8007330:	b538      	push	{r3, r4, r5, lr}
 8007332:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007334:	f010 0f03 	tst.w	r0, #3
 8007338:	d11f      	bne.n	800737a <mem_free+0x4e>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800733a:	f1a0 0508 	sub.w	r5, r0, #8

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800733e:	4b1f      	ldr	r3, [pc, #124]	; (80073bc <mem_free+0x90>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	42ab      	cmp	r3, r5
 8007344:	d821      	bhi.n	800738a <mem_free+0x5e>
 8007346:	f100 030c 	add.w	r3, r0, #12
 800734a:	4a1d      	ldr	r2, [pc, #116]	; (80073c0 <mem_free+0x94>)
 800734c:	6812      	ldr	r2, [r2, #0]
 800734e:	4293      	cmp	r3, r2
 8007350:	d81b      	bhi.n	800738a <mem_free+0x5e>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007352:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 8007356:	b303      	cbz	r3, 800739a <mem_free+0x6e>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
 8007358:	4628      	mov	r0, r5
 800735a:	f7ff ff19 	bl	8007190 <mem_link_valid>
 800735e:	b320      	cbz	r0, 80073aa <mem_free+0x7e>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 8007366:	4b17      	ldr	r3, [pc, #92]	; (80073c4 <mem_free+0x98>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	42ab      	cmp	r3, r5
 800736c:	d901      	bls.n	8007372 <mem_free+0x46>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800736e:	4b15      	ldr	r3, [pc, #84]	; (80073c4 <mem_free+0x98>)
 8007370:	601d      	str	r5, [r3, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007372:	4628      	mov	r0, r5
 8007374:	f7ff ff3a 	bl	80071ec <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007378:	e00e      	b.n	8007398 <mem_free+0x6c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800737a:	4b13      	ldr	r3, [pc, #76]	; (80073c8 <mem_free+0x9c>)
 800737c:	f240 2273 	movw	r2, #627	; 0x273
 8007380:	4912      	ldr	r1, [pc, #72]	; (80073cc <mem_free+0xa0>)
 8007382:	4813      	ldr	r0, [pc, #76]	; (80073d0 <mem_free+0xa4>)
 8007384:	f00e fb04 	bl	8015990 <iprintf>
    return;
 8007388:	e006      	b.n	8007398 <mem_free+0x6c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800738a:	4b0f      	ldr	r3, [pc, #60]	; (80073c8 <mem_free+0x9c>)
 800738c:	f240 227f 	movw	r2, #639	; 0x27f
 8007390:	4910      	ldr	r1, [pc, #64]	; (80073d4 <mem_free+0xa8>)
 8007392:	480f      	ldr	r0, [pc, #60]	; (80073d0 <mem_free+0xa4>)
 8007394:	f00e fafc 	bl	8015990 <iprintf>
}
 8007398:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800739a:	4b0b      	ldr	r3, [pc, #44]	; (80073c8 <mem_free+0x9c>)
 800739c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80073a0:	490d      	ldr	r1, [pc, #52]	; (80073d8 <mem_free+0xac>)
 80073a2:	480b      	ldr	r0, [pc, #44]	; (80073d0 <mem_free+0xa4>)
 80073a4:	f00e faf4 	bl	8015990 <iprintf>
    return;
 80073a8:	e7f6      	b.n	8007398 <mem_free+0x6c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80073aa:	4b07      	ldr	r3, [pc, #28]	; (80073c8 <mem_free+0x9c>)
 80073ac:	f240 2295 	movw	r2, #661	; 0x295
 80073b0:	490a      	ldr	r1, [pc, #40]	; (80073dc <mem_free+0xb0>)
 80073b2:	4807      	ldr	r0, [pc, #28]	; (80073d0 <mem_free+0xa4>)
 80073b4:	f00e faec 	bl	8015990 <iprintf>
    return;
 80073b8:	e7ee      	b.n	8007398 <mem_free+0x6c>
 80073ba:	4770      	bx	lr
 80073bc:	20000a44 	.word	0x20000a44
 80073c0:	20000a48 	.word	0x20000a48
 80073c4:	20000a40 	.word	0x20000a40
 80073c8:	08017bd8 	.word	0x08017bd8
 80073cc:	08017c84 	.word	0x08017c84
 80073d0:	08016bb4 	.word	0x08016bb4
 80073d4:	08017ca8 	.word	0x08017ca8
 80073d8:	08017cc4 	.word	0x08017cc4
 80073dc:	08017cec 	.word	0x08017cec

080073e0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80073e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e4:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80073e6:	1ccc      	adds	r4, r1, #3
 80073e8:	b2a4      	uxth	r4, r4
 80073ea:	f024 0403 	bic.w	r4, r4, #3
 80073ee:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 80073f0:	2c0b      	cmp	r4, #11
 80073f2:	d904      	bls.n	80073fe <mem_trim+0x1e>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80073f4:	f5b4 6f48 	cmp.w	r4, #3200	; 0xc80
 80073f8:	d902      	bls.n	8007400 <mem_trim+0x20>
    return NULL;
 80073fa:	2500      	movs	r5, #0
 80073fc:	e099      	b.n	8007532 <mem_trim+0x152>
    newsize = MIN_SIZE_ALIGNED;
 80073fe:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007400:	428c      	cmp	r4, r1
 8007402:	f0c0 8095 	bcc.w	8007530 <mem_trim+0x150>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007406:	4b4d      	ldr	r3, [pc, #308]	; (800753c <mem_trim+0x15c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	42ab      	cmp	r3, r5
 800740c:	d803      	bhi.n	8007416 <mem_trim+0x36>
 800740e:	4b4c      	ldr	r3, [pc, #304]	; (8007540 <mem_trim+0x160>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	42ab      	cmp	r3, r5
 8007414:	d806      	bhi.n	8007424 <mem_trim+0x44>
 8007416:	4b4b      	ldr	r3, [pc, #300]	; (8007544 <mem_trim+0x164>)
 8007418:	f240 22d1 	movw	r2, #721	; 0x2d1
 800741c:	494a      	ldr	r1, [pc, #296]	; (8007548 <mem_trim+0x168>)
 800741e:	484b      	ldr	r0, [pc, #300]	; (800754c <mem_trim+0x16c>)
 8007420:	f00e fab6 	bl	8015990 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007424:	4b45      	ldr	r3, [pc, #276]	; (800753c <mem_trim+0x15c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	42ab      	cmp	r3, r5
 800742a:	f200 8082 	bhi.w	8007532 <mem_trim+0x152>
 800742e:	4b44      	ldr	r3, [pc, #272]	; (8007540 <mem_trim+0x160>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	42ab      	cmp	r3, r5
 8007434:	d97d      	bls.n	8007532 <mem_trim+0x152>
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007436:	f1a5 0008 	sub.w	r0, r5, #8
 800743a:	f7ff fea1 	bl	8007180 <mem_to_ptr>
 800743e:	4606      	mov	r6, r0

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007440:	f835 8c08 	ldrh.w	r8, [r5, #-8]
 8007444:	eba8 0800 	sub.w	r8, r8, r0
 8007448:	fa1f f888 	uxth.w	r8, r8
 800744c:	f1a8 0808 	sub.w	r8, r8, #8
 8007450:	fa1f f888 	uxth.w	r8, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007454:	4544      	cmp	r4, r8
 8007456:	d829      	bhi.n	80074ac <mem_trim+0xcc>
  if (newsize > size) {
 8007458:	4544      	cmp	r4, r8
 800745a:	d86d      	bhi.n	8007538 <mem_trim+0x158>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 800745c:	d069      	beq.n	8007532 <mem_trim+0x152>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800745e:	f835 7c08 	ldrh.w	r7, [r5, #-8]
 8007462:	4638      	mov	r0, r7
 8007464:	f7ff fe86 	bl	8007174 <ptr_to_mem>
 8007468:	4681      	mov	r9, r0
  if (mem2->used == 0) {
 800746a:	7903      	ldrb	r3, [r0, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d133      	bne.n	80074d8 <mem_trim+0xf8>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007470:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
 8007474:	d022      	beq.n	80074bc <mem_trim+0xdc>
    /* remember the old next pointer */
    next = mem2->next;
 8007476:	f8b9 7000 	ldrh.w	r7, [r9]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800747a:	4434      	add	r4, r6
 800747c:	b2a4      	uxth	r4, r4
 800747e:	3408      	adds	r4, #8
 8007480:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 8007482:	4b33      	ldr	r3, [pc, #204]	; (8007550 <mem_trim+0x170>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	454b      	cmp	r3, r9
 8007488:	d020      	beq.n	80074cc <mem_trim+0xec>
      lfree = ptr_to_mem(ptr2);
    }
    mem2 = ptr_to_mem(ptr2);
 800748a:	4620      	mov	r0, r4
 800748c:	f7ff fe72 	bl	8007174 <ptr_to_mem>
    mem2->used = 0;
 8007490:	2300      	movs	r3, #0
 8007492:	7103      	strb	r3, [r0, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007494:	8007      	strh	r7, [r0, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007496:	8046      	strh	r6, [r0, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007498:	f825 4c08 	strh.w	r4, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800749c:	8800      	ldrh	r0, [r0, #0]
 800749e:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
 80074a2:	d046      	beq.n	8007532 <mem_trim+0x152>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80074a4:	f7ff fe66 	bl	8007174 <ptr_to_mem>
 80074a8:	8044      	strh	r4, [r0, #2]
 80074aa:	e042      	b.n	8007532 <mem_trim+0x152>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80074ac:	4b25      	ldr	r3, [pc, #148]	; (8007544 <mem_trim+0x164>)
 80074ae:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80074b2:	4928      	ldr	r1, [pc, #160]	; (8007554 <mem_trim+0x174>)
 80074b4:	4825      	ldr	r0, [pc, #148]	; (800754c <mem_trim+0x16c>)
 80074b6:	f00e fa6b 	bl	8015990 <iprintf>
 80074ba:	e7cd      	b.n	8007458 <mem_trim+0x78>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80074bc:	4b21      	ldr	r3, [pc, #132]	; (8007544 <mem_trim+0x164>)
 80074be:	f240 22f5 	movw	r2, #757	; 0x2f5
 80074c2:	4925      	ldr	r1, [pc, #148]	; (8007558 <mem_trim+0x178>)
 80074c4:	4821      	ldr	r0, [pc, #132]	; (800754c <mem_trim+0x16c>)
 80074c6:	f00e fa63 	bl	8015990 <iprintf>
 80074ca:	e7d4      	b.n	8007476 <mem_trim+0x96>
      lfree = ptr_to_mem(ptr2);
 80074cc:	4620      	mov	r0, r4
 80074ce:	f7ff fe51 	bl	8007174 <ptr_to_mem>
 80074d2:	4b1f      	ldr	r3, [pc, #124]	; (8007550 <mem_trim+0x170>)
 80074d4:	6018      	str	r0, [r3, #0]
 80074d6:	e7d8      	b.n	800748a <mem_trim+0xaa>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80074d8:	f104 0314 	add.w	r3, r4, #20
 80074dc:	4543      	cmp	r3, r8
 80074de:	d828      	bhi.n	8007532 <mem_trim+0x152>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80074e0:	4434      	add	r4, r6
 80074e2:	b2a4      	uxth	r4, r4
 80074e4:	3408      	adds	r4, #8
 80074e6:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80074e8:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
 80074ec:	d018      	beq.n	8007520 <mem_trim+0x140>
    mem2 = ptr_to_mem(ptr2);
 80074ee:	4620      	mov	r0, r4
 80074f0:	f7ff fe40 	bl	8007174 <ptr_to_mem>
    if (mem2 < lfree) {
 80074f4:	4b16      	ldr	r3, [pc, #88]	; (8007550 <mem_trim+0x170>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4283      	cmp	r3, r0
 80074fa:	d901      	bls.n	8007500 <mem_trim+0x120>
      lfree = mem2;
 80074fc:	4b14      	ldr	r3, [pc, #80]	; (8007550 <mem_trim+0x170>)
 80074fe:	6018      	str	r0, [r3, #0]
    }
    mem2->used = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	7103      	strb	r3, [r0, #4]
    mem2->next = mem->next;
 8007504:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 8007508:	8003      	strh	r3, [r0, #0]
    mem2->prev = ptr;
 800750a:	8046      	strh	r6, [r0, #2]
    mem->next = ptr2;
 800750c:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007510:	8800      	ldrh	r0, [r0, #0]
 8007512:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
 8007516:	d00c      	beq.n	8007532 <mem_trim+0x152>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007518:	f7ff fe2c 	bl	8007174 <ptr_to_mem>
 800751c:	8044      	strh	r4, [r0, #2]
 800751e:	e008      	b.n	8007532 <mem_trim+0x152>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007520:	4b08      	ldr	r3, [pc, #32]	; (8007544 <mem_trim+0x164>)
 8007522:	f240 3216 	movw	r2, #790	; 0x316
 8007526:	490c      	ldr	r1, [pc, #48]	; (8007558 <mem_trim+0x178>)
 8007528:	4808      	ldr	r0, [pc, #32]	; (800754c <mem_trim+0x16c>)
 800752a:	f00e fa31 	bl	8015990 <iprintf>
 800752e:	e7de      	b.n	80074ee <mem_trim+0x10e>
    return NULL;
 8007530:	2500      	movs	r5, #0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8007532:	4628      	mov	r0, r5
 8007534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8007538:	2500      	movs	r5, #0
 800753a:	e7fa      	b.n	8007532 <mem_trim+0x152>
 800753c:	20000a44 	.word	0x20000a44
 8007540:	20000a48 	.word	0x20000a48
 8007544:	08017bd8 	.word	0x08017bd8
 8007548:	08017d20 	.word	0x08017d20
 800754c:	08016bb4 	.word	0x08016bb4
 8007550:	20000a40 	.word	0x20000a40
 8007554:	08017d38 	.word	0x08017d38
 8007558:	08017d58 	.word	0x08017d58

0800755c <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800755c:	2800      	cmp	r0, #0
 800755e:	f000 809a 	beq.w	8007696 <mem_malloc+0x13a>
{
 8007562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007566:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007568:	1cc6      	adds	r6, r0, #3
 800756a:	b2b6      	uxth	r6, r6
 800756c:	f026 0603 	bic.w	r6, r6, #3
 8007570:	b2b6      	uxth	r6, r6
  if (size < MIN_SIZE_ALIGNED) {
 8007572:	2e0b      	cmp	r6, #11
 8007574:	d904      	bls.n	8007580 <mem_malloc+0x24>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007576:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
 800757a:	d902      	bls.n	8007582 <mem_malloc+0x26>
    return NULL;
 800757c:	2000      	movs	r0, #0
 800757e:	e088      	b.n	8007692 <mem_malloc+0x136>
    size = MIN_SIZE_ALIGNED;
 8007580:	260c      	movs	r6, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007582:	429e      	cmp	r6, r3
 8007584:	f0c0 8089 	bcc.w	800769a <mem_malloc+0x13e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007588:	4b45      	ldr	r3, [pc, #276]	; (80076a0 <mem_malloc+0x144>)
 800758a:	6818      	ldr	r0, [r3, #0]
 800758c:	f7ff fdf8 	bl	8007180 <mem_to_ptr>
 8007590:	4605      	mov	r5, r0
 8007592:	e04c      	b.n	800762e <mem_malloc+0xd2>
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007594:	4b43      	ldr	r3, [pc, #268]	; (80076a4 <mem_malloc+0x148>)
 8007596:	f240 3287 	movw	r2, #903	; 0x387
 800759a:	4943      	ldr	r1, [pc, #268]	; (80076a8 <mem_malloc+0x14c>)
 800759c:	4843      	ldr	r0, [pc, #268]	; (80076ac <mem_malloc+0x150>)
 800759e:	f00e f9f7 	bl	8015990 <iprintf>
 80075a2:	e062      	b.n	800766a <mem_malloc+0x10e>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80075a4:	2301      	movs	r3, #1
 80075a6:	7103      	strb	r3, [r0, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80075a8:	4b3d      	ldr	r3, [pc, #244]	; (80076a0 <mem_malloc+0x144>)
 80075aa:	6818      	ldr	r0, [r3, #0]
 80075ac:	42a0      	cmp	r0, r4
 80075ae:	d00f      	beq.n	80075d0 <mem_malloc+0x74>
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80075b0:	4427      	add	r7, r4
 80075b2:	3708      	adds	r7, #8
 80075b4:	4b3e      	ldr	r3, [pc, #248]	; (80076b0 <mem_malloc+0x154>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	429f      	cmp	r7, r3
 80075ba:	d81f      	bhi.n	80075fc <mem_malloc+0xa0>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80075bc:	f014 0503 	ands.w	r5, r4, #3
 80075c0:	d124      	bne.n	800760c <mem_malloc+0xb0>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80075c2:	bb5d      	cbnz	r5, 800761c <mem_malloc+0xc0>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80075c4:	f104 0008 	add.w	r0, r4, #8
 80075c8:	e063      	b.n	8007692 <mem_malloc+0x136>
            cur = ptr_to_mem(cur->next);
 80075ca:	8800      	ldrh	r0, [r0, #0]
 80075cc:	f7ff fdd2 	bl	8007174 <ptr_to_mem>
          while (cur->used && cur != ram_end) {
 80075d0:	7903      	ldrb	r3, [r0, #4]
 80075d2:	b11b      	cbz	r3, 80075dc <mem_malloc+0x80>
 80075d4:	4a36      	ldr	r2, [pc, #216]	; (80076b0 <mem_malloc+0x154>)
 80075d6:	6812      	ldr	r2, [r2, #0]
 80075d8:	4282      	cmp	r2, r0
 80075da:	d1f6      	bne.n	80075ca <mem_malloc+0x6e>
          lfree = cur;
 80075dc:	4a30      	ldr	r2, [pc, #192]	; (80076a0 <mem_malloc+0x144>)
 80075de:	6010      	str	r0, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80075e0:	4a33      	ldr	r2, [pc, #204]	; (80076b0 <mem_malloc+0x154>)
 80075e2:	6812      	ldr	r2, [r2, #0]
 80075e4:	4282      	cmp	r2, r0
 80075e6:	d0e3      	beq.n	80075b0 <mem_malloc+0x54>
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0e1      	beq.n	80075b0 <mem_malloc+0x54>
 80075ec:	4b2d      	ldr	r3, [pc, #180]	; (80076a4 <mem_malloc+0x148>)
 80075ee:	f240 32b5 	movw	r2, #949	; 0x3b5
 80075f2:	4930      	ldr	r1, [pc, #192]	; (80076b4 <mem_malloc+0x158>)
 80075f4:	482d      	ldr	r0, [pc, #180]	; (80076ac <mem_malloc+0x150>)
 80075f6:	f00e f9cb 	bl	8015990 <iprintf>
 80075fa:	e7d9      	b.n	80075b0 <mem_malloc+0x54>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80075fc:	4b29      	ldr	r3, [pc, #164]	; (80076a4 <mem_malloc+0x148>)
 80075fe:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007602:	492d      	ldr	r1, [pc, #180]	; (80076b8 <mem_malloc+0x15c>)
 8007604:	4829      	ldr	r0, [pc, #164]	; (80076ac <mem_malloc+0x150>)
 8007606:	f00e f9c3 	bl	8015990 <iprintf>
 800760a:	e7d7      	b.n	80075bc <mem_malloc+0x60>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800760c:	4b25      	ldr	r3, [pc, #148]	; (80076a4 <mem_malloc+0x148>)
 800760e:	f240 32bb 	movw	r2, #955	; 0x3bb
 8007612:	492a      	ldr	r1, [pc, #168]	; (80076bc <mem_malloc+0x160>)
 8007614:	4825      	ldr	r0, [pc, #148]	; (80076ac <mem_malloc+0x150>)
 8007616:	f00e f9bb 	bl	8015990 <iprintf>
 800761a:	e7d2      	b.n	80075c2 <mem_malloc+0x66>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800761c:	4b21      	ldr	r3, [pc, #132]	; (80076a4 <mem_malloc+0x148>)
 800761e:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007622:	4927      	ldr	r1, [pc, #156]	; (80076c0 <mem_malloc+0x164>)
 8007624:	4821      	ldr	r0, [pc, #132]	; (80076ac <mem_malloc+0x150>)
 8007626:	f00e f9b3 	bl	8015990 <iprintf>
 800762a:	e7cb      	b.n	80075c4 <mem_malloc+0x68>
         ptr = ptr_to_mem(ptr)->next) {
 800762c:	8825      	ldrh	r5, [r4, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800762e:	46a8      	mov	r8, r5
 8007630:	4637      	mov	r7, r6
 8007632:	f5c6 6348 	rsb	r3, r6, #3200	; 0xc80
 8007636:	429d      	cmp	r5, r3
 8007638:	d22a      	bcs.n	8007690 <mem_malloc+0x134>
      mem = ptr_to_mem(ptr);
 800763a:	4628      	mov	r0, r5
 800763c:	f7ff fd9a 	bl	8007174 <ptr_to_mem>
 8007640:	4604      	mov	r4, r0
      if ((!mem->used) &&
 8007642:	7903      	ldrb	r3, [r0, #4]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1f1      	bne.n	800762c <mem_malloc+0xd0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007648:	8803      	ldrh	r3, [r0, #0]
 800764a:	eba3 0308 	sub.w	r3, r3, r8
 800764e:	3b08      	subs	r3, #8
      if ((!mem->used) &&
 8007650:	42bb      	cmp	r3, r7
 8007652:	d3eb      	bcc.n	800762c <mem_malloc+0xd0>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007654:	f107 0214 	add.w	r2, r7, #20
 8007658:	4293      	cmp	r3, r2
 800765a:	d3a3      	bcc.n	80075a4 <mem_malloc+0x48>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800765c:	442e      	add	r6, r5
 800765e:	b2b6      	uxth	r6, r6
 8007660:	3608      	adds	r6, #8
 8007662:	b2b6      	uxth	r6, r6
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007664:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
 8007668:	d094      	beq.n	8007594 <mem_malloc+0x38>
          mem2 = ptr_to_mem(ptr2);
 800766a:	4630      	mov	r0, r6
 800766c:	f7ff fd82 	bl	8007174 <ptr_to_mem>
          mem2->used = 0;
 8007670:	2300      	movs	r3, #0
 8007672:	7103      	strb	r3, [r0, #4]
          mem2->next = mem->next;
 8007674:	8823      	ldrh	r3, [r4, #0]
 8007676:	8003      	strh	r3, [r0, #0]
          mem2->prev = ptr;
 8007678:	8045      	strh	r5, [r0, #2]
          mem->next = ptr2;
 800767a:	8026      	strh	r6, [r4, #0]
          mem->used = 1;
 800767c:	2301      	movs	r3, #1
 800767e:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007680:	8800      	ldrh	r0, [r0, #0]
 8007682:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
 8007686:	d08f      	beq.n	80075a8 <mem_malloc+0x4c>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007688:	f7ff fd74 	bl	8007174 <ptr_to_mem>
 800768c:	8046      	strh	r6, [r0, #2]
 800768e:	e78b      	b.n	80075a8 <mem_malloc+0x4c>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007690:	2000      	movs	r0, #0
}
 8007692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return NULL;
 8007696:	2000      	movs	r0, #0
}
 8007698:	4770      	bx	lr
    return NULL;
 800769a:	2000      	movs	r0, #0
 800769c:	e7f9      	b.n	8007692 <mem_malloc+0x136>
 800769e:	bf00      	nop
 80076a0:	20000a40 	.word	0x20000a40
 80076a4:	08017bd8 	.word	0x08017bd8
 80076a8:	08017d58 	.word	0x08017d58
 80076ac:	08016bb4 	.word	0x08016bb4
 80076b0:	20000a48 	.word	0x20000a48
 80076b4:	08017d6c 	.word	0x08017d6c
 80076b8:	08017d88 	.word	0x08017d88
 80076bc:	08017db8 	.word	0x08017db8
 80076c0:	08017de8 	.word	0x08017de8

080076c4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80076c4:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80076c6:	68c3      	ldr	r3, [r0, #12]
 80076c8:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80076ca:	b124      	cbz	r4, 80076d6 <do_memp_malloc_pool+0x12>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80076cc:	6822      	ldr	r2, [r4, #0]
 80076ce:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80076d0:	f014 0f03 	tst.w	r4, #3
 80076d4:	d101      	bne.n	80076da <do_memp_malloc_pool+0x16>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 80076d6:	4620      	mov	r0, r4
 80076d8:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80076da:	4b04      	ldr	r3, [pc, #16]	; (80076ec <do_memp_malloc_pool+0x28>)
 80076dc:	f44f 728c 	mov.w	r2, #280	; 0x118
 80076e0:	4903      	ldr	r1, [pc, #12]	; (80076f0 <do_memp_malloc_pool+0x2c>)
 80076e2:	4804      	ldr	r0, [pc, #16]	; (80076f4 <do_memp_malloc_pool+0x30>)
 80076e4:	f00e f954 	bl	8015990 <iprintf>
    return ((u8_t *)memp + MEMP_SIZE);
 80076e8:	e7f5      	b.n	80076d6 <do_memp_malloc_pool+0x12>
 80076ea:	bf00      	nop
 80076ec:	08017e0c 	.word	0x08017e0c
 80076f0:	08017e3c 	.word	0x08017e3c
 80076f4:	08016bb4 	.word	0x08016bb4

080076f8 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	4605      	mov	r5, r0
 80076fc:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80076fe:	f011 0f03 	tst.w	r1, #3
 8007702:	d105      	bne.n	8007710 <do_memp_free_pool+0x18>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007704:	68eb      	ldr	r3, [r5, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 800770a:	68eb      	ldr	r3, [r5, #12]
 800770c:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800770e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8007710:	4b03      	ldr	r3, [pc, #12]	; (8007720 <do_memp_free_pool+0x28>)
 8007712:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007716:	4903      	ldr	r1, [pc, #12]	; (8007724 <do_memp_free_pool+0x2c>)
 8007718:	4803      	ldr	r0, [pc, #12]	; (8007728 <do_memp_free_pool+0x30>)
 800771a:	f00e f939 	bl	8015990 <iprintf>
 800771e:	e7f1      	b.n	8007704 <do_memp_free_pool+0xc>
 8007720:	08017e0c 	.word	0x08017e0c
 8007724:	08017e60 	.word	0x08017e60
 8007728:	08016bb4 	.word	0x08016bb4

0800772c <memp_init_pool>:
  *desc->tab = NULL;
 800772c:	68c3      	ldr	r3, [r0, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007732:	6883      	ldr	r3, [r0, #8]
 8007734:	3303      	adds	r3, #3
 8007736:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800773a:	88c1      	ldrh	r1, [r0, #6]
 800773c:	4291      	cmp	r1, r2
 800773e:	dd08      	ble.n	8007752 <memp_init_pool+0x26>
    memp->next = *desc->tab;
 8007740:	68c1      	ldr	r1, [r0, #12]
 8007742:	6809      	ldr	r1, [r1, #0]
 8007744:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8007746:	68c1      	ldr	r1, [r0, #12]
 8007748:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800774a:	8881      	ldrh	r1, [r0, #4]
 800774c:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 800774e:	3201      	adds	r2, #1
 8007750:	e7f3      	b.n	800773a <memp_init_pool+0xe>
}
 8007752:	4770      	bx	lr

08007754 <memp_init>:
{
 8007754:	b510      	push	{r4, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007756:	2400      	movs	r4, #0
 8007758:	e006      	b.n	8007768 <memp_init+0x14>
    memp_init_pool(memp_pools[i]);
 800775a:	4b05      	ldr	r3, [pc, #20]	; (8007770 <memp_init+0x1c>)
 800775c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007760:	f7ff ffe4 	bl	800772c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007764:	3401      	adds	r4, #1
 8007766:	b2a4      	uxth	r4, r4
 8007768:	2c0c      	cmp	r4, #12
 800776a:	d9f6      	bls.n	800775a <memp_init+0x6>
}
 800776c:	bd10      	pop	{r4, pc}
 800776e:	bf00      	nop
 8007770:	0801801c 	.word	0x0801801c

08007774 <memp_malloc>:
{
 8007774:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007776:	280c      	cmp	r0, #12
 8007778:	d805      	bhi.n	8007786 <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800777a:	4b07      	ldr	r3, [pc, #28]	; (8007798 <memp_malloc+0x24>)
 800777c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007780:	f7ff ffa0 	bl	80076c4 <do_memp_malloc_pool>
}
 8007784:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007786:	4b05      	ldr	r3, [pc, #20]	; (800779c <memp_malloc+0x28>)
 8007788:	f240 1257 	movw	r2, #343	; 0x157
 800778c:	4904      	ldr	r1, [pc, #16]	; (80077a0 <memp_malloc+0x2c>)
 800778e:	4805      	ldr	r0, [pc, #20]	; (80077a4 <memp_malloc+0x30>)
 8007790:	f00e f8fe 	bl	8015990 <iprintf>
 8007794:	2000      	movs	r0, #0
 8007796:	e7f5      	b.n	8007784 <memp_malloc+0x10>
 8007798:	0801801c 	.word	0x0801801c
 800779c:	08017e0c 	.word	0x08017e0c
 80077a0:	08017e80 	.word	0x08017e80
 80077a4:	08016bb4 	.word	0x08016bb4

080077a8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80077a8:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80077aa:	280c      	cmp	r0, #12
 80077ac:	d806      	bhi.n	80077bc <memp_free+0x14>

  if (mem == NULL) {
 80077ae:	b121      	cbz	r1, 80077ba <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80077b0:	4b06      	ldr	r3, [pc, #24]	; (80077cc <memp_free+0x24>)
 80077b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80077b6:	f7ff ff9f 	bl	80076f8 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80077ba:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80077bc:	4b04      	ldr	r3, [pc, #16]	; (80077d0 <memp_free+0x28>)
 80077be:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80077c2:	4904      	ldr	r1, [pc, #16]	; (80077d4 <memp_free+0x2c>)
 80077c4:	4804      	ldr	r0, [pc, #16]	; (80077d8 <memp_free+0x30>)
 80077c6:	f00e f8e3 	bl	8015990 <iprintf>
 80077ca:	e7f6      	b.n	80077ba <memp_free+0x12>
 80077cc:	0801801c 	.word	0x0801801c
 80077d0:	08017e0c 	.word	0x08017e0c
 80077d4:	08017ea0 	.word	0x08017ea0
 80077d8:	08016bb4 	.word	0x08016bb4

080077dc <netif_do_set_netmask>:

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80077dc:	680b      	ldr	r3, [r1, #0]
 80077de:	69c2      	ldr	r2, [r0, #28]
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d008      	beq.n	80077f6 <netif_do_set_netmask+0x1a>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80077e4:	b129      	cbz	r1, 80077f2 <netif_do_set_netmask+0x16>
 80077e6:	61c3      	str	r3, [r0, #28]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
 80077e8:	2300      	movs	r3, #0
 80077ea:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80077ee:	2001      	movs	r0, #1
 80077f0:	4770      	bx	lr
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80077f2:	2300      	movs	r3, #0
 80077f4:	e7f7      	b.n	80077e6 <netif_do_set_netmask+0xa>
  }
  return 0; /* netmask unchanged */
 80077f6:	2000      	movs	r0, #0
}
 80077f8:	4770      	bx	lr

080077fa <netif_do_set_gw>:

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80077fa:	680b      	ldr	r3, [r1, #0]
 80077fc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80077fe:	4293      	cmp	r3, r2
 8007800:	d008      	beq.n	8007814 <netif_do_set_gw+0x1a>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007802:	b129      	cbz	r1, 8007810 <netif_do_set_gw+0x16>
 8007804:	6343      	str	r3, [r0, #52]	; 0x34
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
 8007806:	2300      	movs	r3, #0
 8007808:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800780c:	2001      	movs	r0, #1
 800780e:	4770      	bx	lr
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007810:	2300      	movs	r3, #0
 8007812:	e7f7      	b.n	8007804 <netif_do_set_gw+0xa>
  }
  return 0; /* gateway unchanged */
 8007814:	2000      	movs	r0, #0
}
 8007816:	4770      	bx	lr

08007818 <netif_null_output_ip6>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8007818:	f06f 000b 	mvn.w	r0, #11
 800781c:	4770      	bx	lr

0800781e <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 800781e:	f06f 000b 	mvn.w	r0, #11
 8007822:	4770      	bx	lr

08007824 <netif_do_ip_addr_changed>:
{
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	4604      	mov	r4, r0
 8007828:	460d      	mov	r5, r1
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800782a:	f001 fed7 	bl	80095dc <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800782e:	4629      	mov	r1, r5
 8007830:	4620      	mov	r0, r4
 8007832:	f006 fe87 	bl	800e544 <udp_netif_ip_addr_changed>
}
 8007836:	bd38      	pop	{r3, r4, r5, pc}

08007838 <netif_issue_reports>:
{
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	460c      	mov	r4, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800783c:	4605      	mov	r5, r0
 800783e:	b1b0      	cbz	r0, 800786e <netif_issue_reports+0x36>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007840:	f895 30df 	ldrb.w	r3, [r5, #223]	; 0xdf
 8007844:	f003 0205 	and.w	r2, r3, #5
 8007848:	2a05      	cmp	r2, #5
 800784a:	d10f      	bne.n	800786c <netif_issue_reports+0x34>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800784c:	f014 0f01 	tst.w	r4, #1
 8007850:	d009      	beq.n	8007866 <netif_issue_reports+0x2e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007852:	686a      	ldr	r2, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007854:	b13a      	cbz	r2, 8007866 <netif_issue_reports+0x2e>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007856:	f013 0f08 	tst.w	r3, #8
 800785a:	d110      	bne.n	800787e <netif_issue_reports+0x46>
    if (netif->flags & NETIF_FLAG_IGMP) {
 800785c:	f895 30df 	ldrb.w	r3, [r5, #223]	; 0xdf
 8007860:	f013 0f20 	tst.w	r3, #32
 8007864:	d110      	bne.n	8007888 <netif_issue_reports+0x50>
  if (report_type & NETIF_REPORT_TYPE_IPV6) {
 8007866:	f014 0f02 	tst.w	r4, #2
 800786a:	d111      	bne.n	8007890 <netif_issue_reports+0x58>
}
 800786c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800786e:	4b0a      	ldr	r3, [pc, #40]	; (8007898 <netif_issue_reports+0x60>)
 8007870:	f240 326d 	movw	r2, #877	; 0x36d
 8007874:	4909      	ldr	r1, [pc, #36]	; (800789c <netif_issue_reports+0x64>)
 8007876:	480a      	ldr	r0, [pc, #40]	; (80078a0 <netif_issue_reports+0x68>)
 8007878:	f00e f88a 	bl	8015990 <iprintf>
 800787c:	e7e0      	b.n	8007840 <netif_issue_reports+0x8>
      etharp_gratuitous(netif);
 800787e:	1d29      	adds	r1, r5, #4
 8007880:	4628      	mov	r0, r5
 8007882:	f008 fc25 	bl	80100d0 <etharp_request>
 8007886:	e7e9      	b.n	800785c <netif_issue_reports+0x24>
      igmp_report_groups(netif);
 8007888:	4628      	mov	r0, r5
 800788a:	f009 f829 	bl	80108e0 <igmp_report_groups>
 800788e:	e7ea      	b.n	8007866 <netif_issue_reports+0x2e>
    mld6_report_groups(netif);
 8007890:	4628      	mov	r0, r5
 8007892:	f00b fc4f 	bl	8013134 <mld6_report_groups>
 8007896:	e7e9      	b.n	800786c <netif_issue_reports+0x34>
 8007898:	08018050 	.word	0x08018050
 800789c:	08018084 	.word	0x08018084
 80078a0:	08016bb4 	.word	0x08016bb4

080078a4 <netif_do_set_ipaddr>:
{
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	4604      	mov	r4, r0
 80078aa:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80078ac:	460e      	mov	r6, r1
 80078ae:	b321      	cbz	r1, 80078fa <netif_do_set_ipaddr+0x56>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80078b0:	b35d      	cbz	r5, 800790a <netif_do_set_ipaddr+0x66>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80078b2:	6832      	ldr	r2, [r6, #0]
 80078b4:	6863      	ldr	r3, [r4, #4]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d03c      	beq.n	8007934 <netif_do_set_ipaddr+0x90>
    *ip_2_ip4(&new_addr) = *ipaddr;
 80078ba:	9200      	str	r2, [sp, #0]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);
 80078bc:	2300      	movs	r3, #0
 80078be:	f88d 3014 	strb.w	r3, [sp, #20]
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80078c2:	7e23      	ldrb	r3, [r4, #24]
 80078c4:	752b      	strb	r3, [r5, #20]
 80078c6:	7e23      	ldrb	r3, [r4, #24]
 80078c8:	2b06      	cmp	r3, #6
 80078ca:	d026      	beq.n	800791a <netif_do_set_ipaddr+0x76>
 80078cc:	6863      	ldr	r3, [r4, #4]
 80078ce:	602b      	str	r3, [r5, #0]
 80078d0:	2300      	movs	r3, #0
 80078d2:	60eb      	str	r3, [r5, #12]
 80078d4:	60ab      	str	r3, [r5, #8]
 80078d6:	606b      	str	r3, [r5, #4]
 80078d8:	742b      	strb	r3, [r5, #16]
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80078da:	4669      	mov	r1, sp
 80078dc:	4628      	mov	r0, r5
 80078de:	f7ff ffa1 	bl	8007824 <netif_do_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80078e2:	b32e      	cbz	r6, 8007930 <netif_do_set_ipaddr+0x8c>
 80078e4:	6833      	ldr	r3, [r6, #0]
 80078e6:	6063      	str	r3, [r4, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
 80078e8:	2300      	movs	r3, #0
 80078ea:	7623      	strb	r3, [r4, #24]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80078ec:	2101      	movs	r1, #1
 80078ee:	4620      	mov	r0, r4
 80078f0:	f7ff ffa2 	bl	8007838 <netif_issue_reports>
    return 1; /* address changed */
 80078f4:	2001      	movs	r0, #1
}
 80078f6:	b006      	add	sp, #24
 80078f8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80078fa:	4b0f      	ldr	r3, [pc, #60]	; (8007938 <netif_do_set_ipaddr+0x94>)
 80078fc:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007900:	490e      	ldr	r1, [pc, #56]	; (800793c <netif_do_set_ipaddr+0x98>)
 8007902:	480f      	ldr	r0, [pc, #60]	; (8007940 <netif_do_set_ipaddr+0x9c>)
 8007904:	f00e f844 	bl	8015990 <iprintf>
 8007908:	e7d2      	b.n	80078b0 <netif_do_set_ipaddr+0xc>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800790a:	4b0b      	ldr	r3, [pc, #44]	; (8007938 <netif_do_set_ipaddr+0x94>)
 800790c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007910:	490a      	ldr	r1, [pc, #40]	; (800793c <netif_do_set_ipaddr+0x98>)
 8007912:	480b      	ldr	r0, [pc, #44]	; (8007940 <netif_do_set_ipaddr+0x9c>)
 8007914:	f00e f83c 	bl	8015990 <iprintf>
 8007918:	e7cb      	b.n	80078b2 <netif_do_set_ipaddr+0xe>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800791a:	6863      	ldr	r3, [r4, #4]
 800791c:	602b      	str	r3, [r5, #0]
 800791e:	68a3      	ldr	r3, [r4, #8]
 8007920:	606b      	str	r3, [r5, #4]
 8007922:	68e3      	ldr	r3, [r4, #12]
 8007924:	60ab      	str	r3, [r5, #8]
 8007926:	6923      	ldr	r3, [r4, #16]
 8007928:	60eb      	str	r3, [r5, #12]
 800792a:	7d23      	ldrb	r3, [r4, #20]
 800792c:	742b      	strb	r3, [r5, #16]
 800792e:	e7d4      	b.n	80078da <netif_do_set_ipaddr+0x36>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007930:	2300      	movs	r3, #0
 8007932:	e7d8      	b.n	80078e6 <netif_do_set_ipaddr+0x42>
  return 0; /* address unchanged */
 8007934:	2000      	movs	r0, #0
 8007936:	e7de      	b.n	80078f6 <netif_do_set_ipaddr+0x52>
 8007938:	08018050 	.word	0x08018050
 800793c:	080180a8 	.word	0x080180a8
 8007940:	08016bb4 	.word	0x08016bb4

08007944 <netif_init>:
}
 8007944:	4770      	bx	lr
	...

08007948 <netif_set_addr>:
{
 8007948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800794c:	b086      	sub	sp, #24
 800794e:	4604      	mov	r4, r0
 8007950:	4616      	mov	r6, r2
 8007952:	461d      	mov	r5, r3
  if (ipaddr == NULL) {
 8007954:	460f      	mov	r7, r1
 8007956:	b1d9      	cbz	r1, 8007990 <netif_set_addr+0x48>
  if (netmask == NULL) {
 8007958:	b1e6      	cbz	r6, 8007994 <netif_set_addr+0x4c>
  if (gw == NULL) {
 800795a:	b1ed      	cbz	r5, 8007998 <netif_set_addr+0x50>
  remove = ip4_addr_isany(ipaddr);
 800795c:	b10f      	cbz	r7, 8007962 <netif_set_addr+0x1a>
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	b9e3      	cbnz	r3, 800799c <netif_set_addr+0x54>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007962:	466a      	mov	r2, sp
 8007964:	4639      	mov	r1, r7
 8007966:	4620      	mov	r0, r4
 8007968:	f7ff ff9c 	bl	80078a4 <netif_do_set_ipaddr>
 800796c:	f04f 0801 	mov.w	r8, #1
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007970:	2200      	movs	r2, #0
 8007972:	4631      	mov	r1, r6
 8007974:	4620      	mov	r0, r4
 8007976:	f7ff ff31 	bl	80077dc <netif_do_set_netmask>
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800797a:	2200      	movs	r2, #0
 800797c:	4629      	mov	r1, r5
 800797e:	4620      	mov	r0, r4
 8007980:	f7ff ff3b 	bl	80077fa <netif_do_set_gw>
  if (!remove) {
 8007984:	f1b8 0f00 	cmp.w	r8, #0
 8007988:	d00b      	beq.n	80079a2 <netif_set_addr+0x5a>
}
 800798a:	b006      	add	sp, #24
 800798c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ipaddr = IP4_ADDR_ANY4;
 8007990:	4f07      	ldr	r7, [pc, #28]	; (80079b0 <netif_set_addr+0x68>)
 8007992:	e7e1      	b.n	8007958 <netif_set_addr+0x10>
    netmask = IP4_ADDR_ANY4;
 8007994:	4e06      	ldr	r6, [pc, #24]	; (80079b0 <netif_set_addr+0x68>)
 8007996:	e7e0      	b.n	800795a <netif_set_addr+0x12>
    gw = IP4_ADDR_ANY4;
 8007998:	4d05      	ldr	r5, [pc, #20]	; (80079b0 <netif_set_addr+0x68>)
 800799a:	e7df      	b.n	800795c <netif_set_addr+0x14>
  remove = ip4_addr_isany(ipaddr);
 800799c:	f04f 0800 	mov.w	r8, #0
 80079a0:	e7e6      	b.n	8007970 <netif_set_addr+0x28>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80079a2:	466a      	mov	r2, sp
 80079a4:	4639      	mov	r1, r7
 80079a6:	4620      	mov	r0, r4
 80079a8:	f7ff ff7c 	bl	80078a4 <netif_do_set_ipaddr>
}
 80079ac:	e7ed      	b.n	800798a <netif_set_addr+0x42>
 80079ae:	bf00      	nop
 80079b0:	0801a4d4 	.word	0x0801a4d4

080079b4 <netif_add>:
{
 80079b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079b8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80079bc:	4605      	mov	r5, r0
 80079be:	2800      	cmp	r0, #0
 80079c0:	d033      	beq.n	8007a2a <netif_add+0x76>
 80079c2:	460e      	mov	r6, r1
 80079c4:	4617      	mov	r7, r2
 80079c6:	4698      	mov	r8, r3
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80079c8:	f1b9 0f00 	cmp.w	r9, #0
 80079cc:	d035      	beq.n	8007a3a <netif_add+0x86>
  if (ipaddr == NULL) {
 80079ce:	2900      	cmp	r1, #0
 80079d0:	d03c      	beq.n	8007a4c <netif_add+0x98>
  if (netmask == NULL) {
 80079d2:	2f00      	cmp	r7, #0
 80079d4:	d03c      	beq.n	8007a50 <netif_add+0x9c>
  if (gw == NULL) {
 80079d6:	f1b8 0f00 	cmp.w	r8, #0
 80079da:	d03b      	beq.n	8007a54 <netif_add+0xa0>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80079dc:	2300      	movs	r3, #0
 80079de:	606b      	str	r3, [r5, #4]
 80079e0:	60ab      	str	r3, [r5, #8]
 80079e2:	60eb      	str	r3, [r5, #12]
 80079e4:	612b      	str	r3, [r5, #16]
 80079e6:	752b      	strb	r3, [r5, #20]
 80079e8:	f115 0f04 	cmn.w	r5, #4
 80079ec:	d000      	beq.n	80079f0 <netif_add+0x3c>
 80079ee:	762b      	strb	r3, [r5, #24]
  ip_addr_set_zero_ip4(&netif->netmask);
 80079f0:	2300      	movs	r3, #0
 80079f2:	61eb      	str	r3, [r5, #28]
 80079f4:	622b      	str	r3, [r5, #32]
 80079f6:	626b      	str	r3, [r5, #36]	; 0x24
 80079f8:	62ab      	str	r3, [r5, #40]	; 0x28
 80079fa:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 80079fe:	f115 0f1c 	cmn.w	r5, #28
 8007a02:	d001      	beq.n	8007a08 <netif_add+0x54>
 8007a04:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
  ip_addr_set_zero_ip4(&netif->gw);
 8007a08:	2300      	movs	r3, #0
 8007a0a:	636b      	str	r3, [r5, #52]	; 0x34
 8007a0c:	63ab      	str	r3, [r5, #56]	; 0x38
 8007a0e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8007a10:	642b      	str	r3, [r5, #64]	; 0x40
 8007a12:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8007a16:	f115 0f34 	cmn.w	r5, #52	; 0x34
 8007a1a:	d001      	beq.n	8007a20 <netif_add+0x6c>
 8007a1c:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
  netif->output = netif_null_output_ip4;
 8007a20:	4b62      	ldr	r3, [pc, #392]	; (8007bac <netif_add+0x1f8>)
 8007a22:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8007a26:	2000      	movs	r0, #0
 8007a28:	e025      	b.n	8007a76 <netif_add+0xc2>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007a2a:	4b61      	ldr	r3, [pc, #388]	; (8007bb0 <netif_add+0x1fc>)
 8007a2c:	f240 1227 	movw	r2, #295	; 0x127
 8007a30:	4960      	ldr	r1, [pc, #384]	; (8007bb4 <netif_add+0x200>)
 8007a32:	4861      	ldr	r0, [pc, #388]	; (8007bb8 <netif_add+0x204>)
 8007a34:	f00d ffac 	bl	8015990 <iprintf>
 8007a38:	e0aa      	b.n	8007b90 <netif_add+0x1dc>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007a3a:	4b5d      	ldr	r3, [pc, #372]	; (8007bb0 <netif_add+0x1fc>)
 8007a3c:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007a40:	495e      	ldr	r1, [pc, #376]	; (8007bbc <netif_add+0x208>)
 8007a42:	485d      	ldr	r0, [pc, #372]	; (8007bb8 <netif_add+0x204>)
 8007a44:	f00d ffa4 	bl	8015990 <iprintf>
 8007a48:	2500      	movs	r5, #0
 8007a4a:	e0a1      	b.n	8007b90 <netif_add+0x1dc>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007a4c:	4e5c      	ldr	r6, [pc, #368]	; (8007bc0 <netif_add+0x20c>)
 8007a4e:	e7c0      	b.n	80079d2 <netif_add+0x1e>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007a50:	4f5b      	ldr	r7, [pc, #364]	; (8007bc0 <netif_add+0x20c>)
 8007a52:	e7c0      	b.n	80079d6 <netif_add+0x22>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007a54:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8007bc0 <netif_add+0x20c>
 8007a58:	e7c0      	b.n	80079dc <netif_add+0x28>
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
 8007a5a:	192a      	adds	r2, r5, r4
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
    netif->ip6_addr_valid_life[i] = IP6_ADDR_LIFE_STATIC;
 8007a62:	f104 0226 	add.w	r2, r4, #38	; 0x26
 8007a66:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    netif->ip6_addr_pref_life[i] = IP6_ADDR_LIFE_STATIC;
 8007a6a:	3428      	adds	r4, #40	; 0x28
 8007a6c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8007a70:	6063      	str	r3, [r4, #4]
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8007a72:	3001      	adds	r0, #1
 8007a74:	b240      	sxtb	r0, r0
 8007a76:	2802      	cmp	r0, #2
 8007a78:	dc1b      	bgt.n	8007ab2 <netif_add+0xfe>
    ip_addr_set_zero_ip6(&netif->ip6_addr[i]);
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8007a80:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007a84:	2200      	movs	r2, #0
 8007a86:	64da      	str	r2, [r3, #76]	; 0x4c
 8007a88:	651a      	str	r2, [r3, #80]	; 0x50
 8007a8a:	655a      	str	r2, [r3, #84]	; 0x54
 8007a8c:	659a      	str	r2, [r3, #88]	; 0x58
 8007a8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8007a92:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	3348      	adds	r3, #72	; 0x48
 8007a9a:	442b      	add	r3, r5
 8007a9c:	f113 0f04 	cmn.w	r3, #4
 8007aa0:	d0db      	beq.n	8007a5a <netif_add+0xa6>
 8007aa2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8007aa6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007aaa:	2206      	movs	r2, #6
 8007aac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8007ab0:	e7d3      	b.n	8007a5a <netif_add+0xa6>
  netif->output_ip6 = netif_null_output_ip6;
 8007ab2:	4b44      	ldr	r3, [pc, #272]	; (8007bc4 <netif_add+0x210>)
 8007ab4:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
  netif->mtu = 0;
 8007ab8:	2400      	movs	r4, #0
 8007aba:	f8a5 40d4 	strh.w	r4, [r5, #212]	; 0xd4
  netif->flags = 0;
 8007abe:	f885 40df 	strb.w	r4, [r5, #223]	; 0xdf
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8007ac2:	f8c5 40c8 	str.w	r4, [r5, #200]	; 0xc8
 8007ac6:	f8c5 40cc 	str.w	r4, [r5, #204]	; 0xcc
 8007aca:	f8c5 40d0 	str.w	r4, [r5, #208]	; 0xd0
  netif->ip6_autoconfig_enabled = 0;
 8007ace:	f885 40e3 	strb.w	r4, [r5, #227]	; 0xe3
  nd6_restart_netif(netif);
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	f00d fe4e 	bl	8015774 <nd6_restart_netif>
  netif->link_callback = NULL;
 8007ad8:	f8c5 40c0 	str.w	r4, [r5, #192]	; 0xc0
  netif->igmp_mac_filter = NULL;
 8007adc:	f8c5 40e8 	str.w	r4, [r5, #232]	; 0xe8
  netif->mld_mac_filter = NULL;
 8007ae0:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
  netif->state = state;
 8007ae4:	9b08      	ldr	r3, [sp, #32]
 8007ae6:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
  netif->num = netif_num;
 8007aea:	4b37      	ldr	r3, [pc, #220]	; (8007bc8 <netif_add+0x214>)
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	f885 30e2 	strb.w	r3, [r5, #226]	; 0xe2
  netif->input = input;
 8007af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af4:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007af8:	4643      	mov	r3, r8
 8007afa:	463a      	mov	r2, r7
 8007afc:	4631      	mov	r1, r6
 8007afe:	4628      	mov	r0, r5
 8007b00:	f7ff ff22 	bl	8007948 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8007b04:	4628      	mov	r0, r5
 8007b06:	47c8      	blx	r9
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d14c      	bne.n	8007ba6 <netif_add+0x1f2>
  netif->mtu6 = netif->mtu;
 8007b0c:	f8b5 30d4 	ldrh.w	r3, [r5, #212]	; 0xd4
 8007b10:	f8a5 30d6 	strh.w	r3, [r5, #214]	; 0xd6
 8007b14:	e024      	b.n	8007b60 <netif_add+0x1ac>
        netif->num = 0;
 8007b16:	2300      	movs	r3, #0
 8007b18:	f885 30e2 	strb.w	r3, [r5, #226]	; 0xe2
 8007b1c:	e024      	b.n	8007b68 <netif_add+0x1b4>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007b1e:	4b24      	ldr	r3, [pc, #144]	; (8007bb0 <netif_add+0x1fc>)
 8007b20:	f240 128b 	movw	r2, #395	; 0x18b
 8007b24:	4929      	ldr	r1, [pc, #164]	; (8007bcc <netif_add+0x218>)
 8007b26:	4824      	ldr	r0, [pc, #144]	; (8007bb8 <netif_add+0x204>)
 8007b28:	f00d ff32 	bl	8015990 <iprintf>
 8007b2c:	e010      	b.n	8007b50 <netif_add+0x19c>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007b2e:	4b20      	ldr	r3, [pc, #128]	; (8007bb0 <netif_add+0x1fc>)
 8007b30:	f240 128d 	movw	r2, #397	; 0x18d
 8007b34:	4926      	ldr	r1, [pc, #152]	; (8007bd0 <netif_add+0x21c>)
 8007b36:	4820      	ldr	r0, [pc, #128]	; (8007bb8 <netif_add+0x204>)
 8007b38:	f00d ff2a 	bl	8015990 <iprintf>
        if (netif2->num == netif->num) {
 8007b3c:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
 8007b40:	f895 30e2 	ldrb.w	r3, [r5, #226]	; 0xe2
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d007      	beq.n	8007b58 <netif_add+0x1a4>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007b48:	6824      	ldr	r4, [r4, #0]
 8007b4a:	b144      	cbz	r4, 8007b5e <netif_add+0x1aa>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007b4c:	42a5      	cmp	r5, r4
 8007b4e:	d0e6      	beq.n	8007b1e <netif_add+0x16a>
        num_netifs++;
 8007b50:	3601      	adds	r6, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007b52:	2eff      	cmp	r6, #255	; 0xff
 8007b54:	ddf2      	ble.n	8007b3c <netif_add+0x188>
 8007b56:	e7ea      	b.n	8007b2e <netif_add+0x17a>
          netif->num++;
 8007b58:	3301      	adds	r3, #1
 8007b5a:	f885 30e2 	strb.w	r3, [r5, #226]	; 0xe2
    } while (netif2 != NULL);
 8007b5e:	b13c      	cbz	r4, 8007b70 <netif_add+0x1bc>
      if (netif->num == 255) {
 8007b60:	f895 30e2 	ldrb.w	r3, [r5, #226]	; 0xe2
 8007b64:	2bff      	cmp	r3, #255	; 0xff
 8007b66:	d0d6      	beq.n	8007b16 <netif_add+0x162>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007b68:	4b1a      	ldr	r3, [pc, #104]	; (8007bd4 <netif_add+0x220>)
 8007b6a:	681c      	ldr	r4, [r3, #0]
      num_netifs = 0;
 8007b6c:	2600      	movs	r6, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007b6e:	e7ec      	b.n	8007b4a <netif_add+0x196>
  if (netif->num == 254) {
 8007b70:	f895 30e2 	ldrb.w	r3, [r5, #226]	; 0xe2
 8007b74:	2bfe      	cmp	r3, #254	; 0xfe
 8007b76:	d00e      	beq.n	8007b96 <netif_add+0x1e2>
    netif_num = (u8_t)(netif->num + 1);
 8007b78:	3301      	adds	r3, #1
 8007b7a:	4a13      	ldr	r2, [pc, #76]	; (8007bc8 <netif_add+0x214>)
 8007b7c:	7013      	strb	r3, [r2, #0]
  netif->next = netif_list;
 8007b7e:	4b15      	ldr	r3, [pc, #84]	; (8007bd4 <netif_add+0x220>)
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	602a      	str	r2, [r5, #0]
  netif_list = netif;
 8007b84:	601d      	str	r5, [r3, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
 8007b86:	f895 30df 	ldrb.w	r3, [r5, #223]	; 0xdf
 8007b8a:	f013 0f20 	tst.w	r3, #32
 8007b8e:	d106      	bne.n	8007b9e <netif_add+0x1ea>
}
 8007b90:	4628      	mov	r0, r5
 8007b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    netif_num = 0;
 8007b96:	4b0c      	ldr	r3, [pc, #48]	; (8007bc8 <netif_add+0x214>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	701a      	strb	r2, [r3, #0]
 8007b9c:	e7ef      	b.n	8007b7e <netif_add+0x1ca>
    igmp_start(netif);
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	f008 ff00 	bl	80109a4 <igmp_start>
 8007ba4:	e7f4      	b.n	8007b90 <netif_add+0x1dc>
    return NULL;
 8007ba6:	2500      	movs	r5, #0
 8007ba8:	e7f2      	b.n	8007b90 <netif_add+0x1dc>
 8007baa:	bf00      	nop
 8007bac:	0800781f 	.word	0x0800781f
 8007bb0:	08018050 	.word	0x08018050
 8007bb4:	080180b8 	.word	0x080180b8
 8007bb8:	08016bb4 	.word	0x08016bb4
 8007bbc:	080180d4 	.word	0x080180d4
 8007bc0:	0801a4d4 	.word	0x0801a4d4
 8007bc4:	08007819 	.word	0x08007819
 8007bc8:	20000a80 	.word	0x20000a80
 8007bcc:	080180f8 	.word	0x080180f8
 8007bd0:	0801810c 	.word	0x0801810c
 8007bd4:	20007f9c 	.word	0x20007f9c

08007bd8 <netif_set_default>:
  netif_default = netif;
 8007bd8:	4b01      	ldr	r3, [pc, #4]	; (8007be0 <netif_set_default+0x8>)
 8007bda:	6018      	str	r0, [r3, #0]
}
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	20007fa0 	.word	0x20007fa0

08007be4 <netif_set_up>:
{
 8007be4:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007be6:	b130      	cbz	r0, 8007bf6 <netif_set_up+0x12>
 8007be8:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007bea:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 8007bee:	f013 0f01 	tst.w	r3, #1
 8007bf2:	d008      	beq.n	8007c06 <netif_set_up+0x22>
}
 8007bf4:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007bf6:	4b09      	ldr	r3, [pc, #36]	; (8007c1c <netif_set_up+0x38>)
 8007bf8:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007bfc:	4908      	ldr	r1, [pc, #32]	; (8007c20 <netif_set_up+0x3c>)
 8007bfe:	4809      	ldr	r0, [pc, #36]	; (8007c24 <netif_set_up+0x40>)
 8007c00:	f00d fec6 	bl	8015990 <iprintf>
 8007c04:	e7f6      	b.n	8007bf4 <netif_set_up+0x10>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007c06:	f043 0301 	orr.w	r3, r3, #1
 8007c0a:	f880 30df 	strb.w	r3, [r0, #223]	; 0xdf
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007c0e:	2103      	movs	r1, #3
 8007c10:	f7ff fe12 	bl	8007838 <netif_issue_reports>
    nd6_restart_netif(netif);
 8007c14:	4620      	mov	r0, r4
 8007c16:	f00d fdad 	bl	8015774 <nd6_restart_netif>
 8007c1a:	e7eb      	b.n	8007bf4 <netif_set_up+0x10>
 8007c1c:	08018050 	.word	0x08018050
 8007c20:	0801813c 	.word	0x0801813c
 8007c24:	08016bb4 	.word	0x08016bb4

08007c28 <netif_set_down>:
{
 8007c28:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007c2a:	b180      	cbz	r0, 8007c4e <netif_set_down+0x26>
 8007c2c:	4604      	mov	r4, r0
  if (netif->flags & NETIF_FLAG_UP) {
 8007c2e:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 8007c32:	f013 0f01 	tst.w	r3, #1
 8007c36:	d009      	beq.n	8007c4c <netif_set_down+0x24>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007c38:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007c3c:	f880 30df 	strb.w	r3, [r0, #223]	; 0xdf
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007c40:	f013 0f08 	tst.w	r3, #8
 8007c44:	d10b      	bne.n	8007c5e <netif_set_down+0x36>
    nd6_cleanup_netif(netif);
 8007c46:	4620      	mov	r0, r4
 8007c48:	f00d fcfe 	bl	8015648 <nd6_cleanup_netif>
}
 8007c4c:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007c4e:	4b05      	ldr	r3, [pc, #20]	; (8007c64 <netif_set_down+0x3c>)
 8007c50:	f240 329b 	movw	r2, #923	; 0x39b
 8007c54:	4904      	ldr	r1, [pc, #16]	; (8007c68 <netif_set_down+0x40>)
 8007c56:	4805      	ldr	r0, [pc, #20]	; (8007c6c <netif_set_down+0x44>)
 8007c58:	f00d fe9a 	bl	8015990 <iprintf>
 8007c5c:	e7f6      	b.n	8007c4c <netif_set_down+0x24>
      etharp_cleanup_netif(netif);
 8007c5e:	f008 f9b5 	bl	800ffcc <etharp_cleanup_netif>
 8007c62:	e7f0      	b.n	8007c46 <netif_set_down+0x1e>
 8007c64:	08018050 	.word	0x08018050
 8007c68:	08018158 	.word	0x08018158
 8007c6c:	08016bb4 	.word	0x08016bb4

08007c70 <netif_set_link_callback>:
  if (netif) {
 8007c70:	b108      	cbz	r0, 8007c76 <netif_set_link_callback+0x6>
    netif->link_callback = link_callback;
 8007c72:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
}
 8007c76:	4770      	bx	lr

08007c78 <netif_ip6_addr_set_state>:
{
 8007c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8007c80:	4607      	mov	r7, r0
 8007c82:	b1e0      	cbz	r0, 8007cbe <netif_ip6_addr_set_state+0x46>
  LWIP_ASSERT("invalid index", addr_idx < LWIP_IPV6_NUM_ADDRESSES);
 8007c84:	2c02      	cmp	r4, #2
 8007c86:	dc22      	bgt.n	8007cce <netif_ip6_addr_set_state+0x56>
  old_state = netif_ip6_addr_state(netif, addr_idx);
 8007c88:	193b      	adds	r3, r7, r4
 8007c8a:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
  if (old_state != state) {
 8007c8e:	42ab      	cmp	r3, r5
 8007c90:	d013      	beq.n	8007cba <netif_ip6_addr_set_state+0x42>
    u8_t old_valid = old_state & IP6_ADDR_VALID;
 8007c92:	f003 0610 	and.w	r6, r3, #16
    u8_t new_valid = state & IP6_ADDR_VALID;
 8007c96:	f005 0810 	and.w	r8, r5, #16
    if (netif->flags & NETIF_FLAG_MLD6) {
 8007c9a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8007c9e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007ca2:	d11c      	bne.n	8007cde <netif_ip6_addr_set_state+0x66>
    if (old_valid && !new_valid) {
 8007ca4:	b116      	cbz	r6, 8007cac <netif_ip6_addr_set_state+0x34>
 8007ca6:	f1b8 0f00 	cmp.w	r8, #0
 8007caa:	d01e      	beq.n	8007cea <netif_ip6_addr_set_state+0x72>
    netif->ip6_addr_state[addr_idx] = state;
 8007cac:	443c      	add	r4, r7
 8007cae:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    if (!old_valid && new_valid) {
 8007cb2:	b916      	cbnz	r6, 8007cba <netif_ip6_addr_set_state+0x42>
 8007cb4:	f1b8 0f00 	cmp.w	r8, #0
 8007cb8:	d121      	bne.n	8007cfe <netif_ip6_addr_set_state+0x86>
}
 8007cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8007cbe:	4b12      	ldr	r3, [pc, #72]	; (8007d08 <netif_ip6_addr_set_state+0x90>)
 8007cc0:	f240 5275 	movw	r2, #1397	; 0x575
 8007cc4:	4911      	ldr	r1, [pc, #68]	; (8007d0c <netif_ip6_addr_set_state+0x94>)
 8007cc6:	4812      	ldr	r0, [pc, #72]	; (8007d10 <netif_ip6_addr_set_state+0x98>)
 8007cc8:	f00d fe62 	bl	8015990 <iprintf>
 8007ccc:	e7da      	b.n	8007c84 <netif_ip6_addr_set_state+0xc>
  LWIP_ASSERT("invalid index", addr_idx < LWIP_IPV6_NUM_ADDRESSES);
 8007cce:	4b0e      	ldr	r3, [pc, #56]	; (8007d08 <netif_ip6_addr_set_state+0x90>)
 8007cd0:	f240 5276 	movw	r2, #1398	; 0x576
 8007cd4:	490f      	ldr	r1, [pc, #60]	; (8007d14 <netif_ip6_addr_set_state+0x9c>)
 8007cd6:	480e      	ldr	r0, [pc, #56]	; (8007d10 <netif_ip6_addr_set_state+0x98>)
 8007cd8:	f00d fe5a 	bl	8015990 <iprintf>
 8007cdc:	e7d4      	b.n	8007c88 <netif_ip6_addr_set_state+0x10>
      nd6_adjust_mld_membership(netif, addr_idx, state);
 8007cde:	462a      	mov	r2, r5
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	f00d fd06 	bl	80156f4 <nd6_adjust_mld_membership>
 8007ce8:	e7dc      	b.n	8007ca4 <netif_ip6_addr_set_state+0x2c>
      netif_do_ip_addr_changed(netif_ip_addr6(netif, addr_idx), NULL);
 8007cea:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8007cee:	00c0      	lsls	r0, r0, #3
 8007cf0:	3048      	adds	r0, #72	; 0x48
 8007cf2:	4438      	add	r0, r7
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	3004      	adds	r0, #4
 8007cf8:	f7ff fd94 	bl	8007824 <netif_do_ip_addr_changed>
 8007cfc:	e7d6      	b.n	8007cac <netif_ip6_addr_set_state+0x34>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV6);
 8007cfe:	2102      	movs	r1, #2
 8007d00:	4638      	mov	r0, r7
 8007d02:	f7ff fd99 	bl	8007838 <netif_issue_reports>
}
 8007d06:	e7d8      	b.n	8007cba <netif_ip6_addr_set_state+0x42>
 8007d08:	08018050 	.word	0x08018050
 8007d0c:	08016ba4 	.word	0x08016ba4
 8007d10:	08016bb4 	.word	0x08016bb4
 8007d14:	08018178 	.word	0x08018178

08007d18 <netif_get_ip6_addr_match>:
{
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	460c      	mov	r4, r1
  LWIP_ASSERT("netif_get_ip6_addr_match: invalid netif", netif != NULL);
 8007d1c:	4605      	mov	r5, r0
 8007d1e:	b158      	cbz	r0, 8007d38 <netif_get_ip6_addr_match+0x20>
  LWIP_ASSERT("netif_get_ip6_addr_match: invalid ip6addr", ip6addr != NULL);
 8007d20:	b194      	cbz	r4, 8007d48 <netif_get_ip6_addr_match+0x30>
  if (ip6_addr_has_zone(ip6addr) && !ip6_addr_test_zone(ip6addr, netif)) {
 8007d22:	7c22      	ldrb	r2, [r4, #16]
 8007d24:	2a00      	cmp	r2, #0
 8007d26:	d041      	beq.n	8007dac <netif_get_ip6_addr_match+0x94>
 8007d28:	f895 30e2 	ldrb.w	r3, [r5, #226]	; 0xe2
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d140      	bne.n	8007db6 <netif_get_ip6_addr_match+0x9e>
 8007d34:	2000      	movs	r0, #0
 8007d36:	e011      	b.n	8007d5c <netif_get_ip6_addr_match+0x44>
  LWIP_ASSERT("netif_get_ip6_addr_match: invalid netif", netif != NULL);
 8007d38:	4b20      	ldr	r3, [pc, #128]	; (8007dbc <netif_get_ip6_addr_match+0xa4>)
 8007d3a:	f240 52be 	movw	r2, #1470	; 0x5be
 8007d3e:	4920      	ldr	r1, [pc, #128]	; (8007dc0 <netif_get_ip6_addr_match+0xa8>)
 8007d40:	4820      	ldr	r0, [pc, #128]	; (8007dc4 <netif_get_ip6_addr_match+0xac>)
 8007d42:	f00d fe25 	bl	8015990 <iprintf>
 8007d46:	e7eb      	b.n	8007d20 <netif_get_ip6_addr_match+0x8>
  LWIP_ASSERT("netif_get_ip6_addr_match: invalid ip6addr", ip6addr != NULL);
 8007d48:	4b1c      	ldr	r3, [pc, #112]	; (8007dbc <netif_get_ip6_addr_match+0xa4>)
 8007d4a:	f240 52bf 	movw	r2, #1471	; 0x5bf
 8007d4e:	491e      	ldr	r1, [pc, #120]	; (8007dc8 <netif_get_ip6_addr_match+0xb0>)
 8007d50:	481c      	ldr	r0, [pc, #112]	; (8007dc4 <netif_get_ip6_addr_match+0xac>)
 8007d52:	f00d fe1d 	bl	8015990 <iprintf>
 8007d56:	e7e4      	b.n	8007d22 <netif_get_ip6_addr_match+0xa>
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8007d58:	3001      	adds	r0, #1
 8007d5a:	b240      	sxtb	r0, r0
 8007d5c:	2802      	cmp	r0, #2
 8007d5e:	dc27      	bgt.n	8007db0 <netif_get_ip6_addr_match+0x98>
    if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i)) &&
 8007d60:	182b      	adds	r3, r5, r0
 8007d62:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d0f6      	beq.n	8007d58 <netif_get_ip6_addr_match+0x40>
        ip6_addr_cmp_zoneless(netif_ip6_addr(netif, i), ip6addr)) {
 8007d6a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8007d6e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007d72:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007d74:	6823      	ldr	r3, [r4, #0]
    if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i)) &&
 8007d76:	4299      	cmp	r1, r3
 8007d78:	d1ee      	bne.n	8007d58 <netif_get_ip6_addr_match+0x40>
        ip6_addr_cmp_zoneless(netif_ip6_addr(netif, i), ip6addr)) {
 8007d7a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8007d7e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007d82:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007d84:	6863      	ldr	r3, [r4, #4]
 8007d86:	4299      	cmp	r1, r3
 8007d88:	d1e6      	bne.n	8007d58 <netif_get_ip6_addr_match+0x40>
 8007d8a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8007d8e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8007d92:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007d94:	68a3      	ldr	r3, [r4, #8]
 8007d96:	4299      	cmp	r1, r3
 8007d98:	d1de      	bne.n	8007d58 <netif_get_ip6_addr_match+0x40>
 8007d9a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8007d9e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
 8007da2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007da4:	68e3      	ldr	r3, [r4, #12]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d1d6      	bne.n	8007d58 <netif_get_ip6_addr_match+0x40>
 8007daa:	e003      	b.n	8007db4 <netif_get_ip6_addr_match+0x9c>
 8007dac:	2000      	movs	r0, #0
 8007dae:	e7d5      	b.n	8007d5c <netif_get_ip6_addr_match+0x44>
  return -1;
 8007db0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007db4:	bd38      	pop	{r3, r4, r5, pc}
    return -1; /* wrong zone, no match */
 8007db6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dba:	e7fb      	b.n	8007db4 <netif_get_ip6_addr_match+0x9c>
 8007dbc:	08018050 	.word	0x08018050
 8007dc0:	08018188 	.word	0x08018188
 8007dc4:	08016bb4 	.word	0x08016bb4
 8007dc8:	080181b0 	.word	0x080181b0

08007dcc <netif_create_ip6_linklocal_address>:
{
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	460c      	mov	r4, r1
  LWIP_ASSERT("netif_create_ip6_linklocal_address: invalid netif", netif != NULL);
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	b150      	cbz	r0, 8007dea <netif_create_ip6_linklocal_address+0x1e>
  ip_2_ip6(&netif->ip6_addr[0])->addr[0] = PP_HTONL(0xfe800000ul);
 8007dd4:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8007dd8:	64eb      	str	r3, [r5, #76]	; 0x4c
  ip_2_ip6(&netif->ip6_addr[0])->addr[1] = 0;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	652b      	str	r3, [r5, #80]	; 0x50
  if (from_mac_48bit) {
 8007dde:	b964      	cbnz	r4, 8007dfa <netif_create_ip6_linklocal_address+0x2e>
    ip_2_ip6(&netif->ip6_addr[0])->addr[2] = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	656b      	str	r3, [r5, #84]	; 0x54
    ip_2_ip6(&netif->ip6_addr[0])->addr[3] = 0;
 8007de4:	65ab      	str	r3, [r5, #88]	; 0x58
    addr_index = 3;
 8007de6:	2603      	movs	r6, #3
    for (i = 0; (i < 8) && (i < netif->hwaddr_len); i++) {
 8007de8:	e050      	b.n	8007e8c <netif_create_ip6_linklocal_address+0xc0>
  LWIP_ASSERT("netif_create_ip6_linklocal_address: invalid netif", netif != NULL);
 8007dea:	4b2f      	ldr	r3, [pc, #188]	; (8007ea8 <netif_create_ip6_linklocal_address+0xdc>)
 8007dec:	f240 52df 	movw	r2, #1503	; 0x5df
 8007df0:	492e      	ldr	r1, [pc, #184]	; (8007eac <netif_create_ip6_linklocal_address+0xe0>)
 8007df2:	482f      	ldr	r0, [pc, #188]	; (8007eb0 <netif_create_ip6_linklocal_address+0xe4>)
 8007df4:	f00d fdcc 	bl	8015990 <iprintf>
 8007df8:	e7ec      	b.n	8007dd4 <netif_create_ip6_linklocal_address+0x8>
    ip_2_ip6(&netif->ip6_addr[0])->addr[2] = lwip_htonl((((u32_t)(netif->hwaddr[0] ^ 0x02)) << 24) |
 8007dfa:	f895 00d8 	ldrb.w	r0, [r5, #216]	; 0xd8
 8007dfe:	f080 0302 	eor.w	r3, r0, #2
        ((u32_t)(netif->hwaddr[1]) << 16) |
 8007e02:	f895 00d9 	ldrb.w	r0, [r5, #217]	; 0xd9
 8007e06:	0400      	lsls	r0, r0, #16
    ip_2_ip6(&netif->ip6_addr[0])->addr[2] = lwip_htonl((((u32_t)(netif->hwaddr[0] ^ 0x02)) << 24) |
 8007e08:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
        ((u32_t)(netif->hwaddr[2]) << 8) |
 8007e0c:	f895 30da 	ldrb.w	r3, [r5, #218]	; 0xda
        ((u32_t)(netif->hwaddr[1]) << 16) |
 8007e10:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    ip_2_ip6(&netif->ip6_addr[0])->addr[2] = lwip_htonl((((u32_t)(netif->hwaddr[0] ^ 0x02)) << 24) |
 8007e14:	f040 00ff 	orr.w	r0, r0, #255	; 0xff
 8007e18:	f7fe fe35 	bl	8006a86 <lwip_htonl>
 8007e1c:	6568      	str	r0, [r5, #84]	; 0x54
        ((u32_t)(netif->hwaddr[3]) << 16) |
 8007e1e:	f895 30db 	ldrb.w	r3, [r5, #219]	; 0xdb
        ((u32_t)(netif->hwaddr[4]) << 8) |
 8007e22:	f895 00dc 	ldrb.w	r0, [r5, #220]	; 0xdc
 8007e26:	0200      	lsls	r0, r0, #8
        ((u32_t)(netif->hwaddr[3]) << 16) |
 8007e28:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
        (netif->hwaddr[5]));
 8007e2c:	f895 30dd 	ldrb.w	r3, [r5, #221]	; 0xdd
        ((u32_t)(netif->hwaddr[4]) << 8) |
 8007e30:	4318      	orrs	r0, r3
    ip_2_ip6(&netif->ip6_addr[0])->addr[3] = lwip_htonl((u32_t)(0xfeul << 24) |
 8007e32:	f040 407e 	orr.w	r0, r0, #4261412864	; 0xfe000000
 8007e36:	f7fe fe26 	bl	8006a86 <lwip_htonl>
 8007e3a:	65a8      	str	r0, [r5, #88]	; 0x58
  ip6_addr_assign_zone(ip_2_ip6(&netif->ip6_addr[0]), IP6_UNICAST, netif);
 8007e3c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8007e3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007e42:	041b      	lsls	r3, r3, #16
 8007e44:	0c1b      	lsrs	r3, r3, #16
 8007e46:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d027      	beq.n	8007e9e <netif_create_ip6_linklocal_address+0xd2>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
  netif_ip6_addr_set_state(netif, 0, IP6_ADDR_TENTATIVE);
 8007e54:	2208      	movs	r2, #8
 8007e56:	2100      	movs	r1, #0
 8007e58:	4628      	mov	r0, r5
 8007e5a:	f7ff ff0d 	bl	8007c78 <netif_ip6_addr_set_state>
}
 8007e5e:	bd70      	pop	{r4, r5, r6, pc}
        addr_index--;
 8007e60:	3e01      	subs	r6, #1
 8007e62:	b2f6      	uxtb	r6, r6
      ip_2_ip6(&netif->ip6_addr[0])->addr[addr_index] |= lwip_htonl(((u32_t)(netif->hwaddr[netif->hwaddr_len - i - 1])) << (8 * (i & 0x03)));
 8007e64:	1b1b      	subs	r3, r3, r4
 8007e66:	3b01      	subs	r3, #1
 8007e68:	442b      	add	r3, r5
 8007e6a:	f893 00d8 	ldrb.w	r0, [r3, #216]	; 0xd8
 8007e6e:	f004 0303 	and.w	r3, r4, #3
 8007e72:	00db      	lsls	r3, r3, #3
 8007e74:	4098      	lsls	r0, r3
 8007e76:	f7fe fe06 	bl	8006a86 <lwip_htonl>
 8007e7a:	f106 0312 	add.w	r3, r6, #18
 8007e7e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	4302      	orrs	r2, r0
 8007e86:	605a      	str	r2, [r3, #4]
    for (i = 0; (i < 8) && (i < netif->hwaddr_len); i++) {
 8007e88:	3401      	adds	r4, #1
 8007e8a:	b2e4      	uxtb	r4, r4
 8007e8c:	2c07      	cmp	r4, #7
 8007e8e:	d8d5      	bhi.n	8007e3c <netif_create_ip6_linklocal_address+0x70>
 8007e90:	f895 30de 	ldrb.w	r3, [r5, #222]	; 0xde
 8007e94:	42a3      	cmp	r3, r4
 8007e96:	d9d1      	bls.n	8007e3c <netif_create_ip6_linklocal_address+0x70>
      if (i == 4) {
 8007e98:	2c04      	cmp	r4, #4
 8007e9a:	d1e3      	bne.n	8007e64 <netif_create_ip6_linklocal_address+0x98>
 8007e9c:	e7e0      	b.n	8007e60 <netif_create_ip6_linklocal_address+0x94>
  ip6_addr_assign_zone(ip_2_ip6(&netif->ip6_addr[0]), IP6_UNICAST, netif);
 8007e9e:	f895 30e2 	ldrb.w	r3, [r5, #226]	; 0xe2
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	e7d3      	b.n	8007e50 <netif_create_ip6_linklocal_address+0x84>
 8007ea8:	08018050 	.word	0x08018050
 8007eac:	080181dc 	.word	0x080181dc
 8007eb0:	08016bb4 	.word	0x08016bb4

08007eb4 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	b158      	cbz	r0, 8007ed0 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 8007eb8:	4b06      	ldr	r3, [pc, #24]	; (8007ed4 <netif_get_by_index+0x20>)
 8007eba:	6818      	ldr	r0, [r3, #0]
 8007ebc:	b138      	cbz	r0, 8007ece <netif_get_by_index+0x1a>
      if (idx == netif_get_index(netif)) {
 8007ebe:	f890 30e2 	ldrb.w	r3, [r0, #226]	; 0xe2
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d003      	beq.n	8007ed2 <netif_get_by_index+0x1e>
    NETIF_FOREACH(netif) {
 8007eca:	6800      	ldr	r0, [r0, #0]
 8007ecc:	e7f6      	b.n	8007ebc <netif_get_by_index+0x8>
 8007ece:	4770      	bx	lr
        return netif; /* found! */
      }
    }
  }

  return NULL;
 8007ed0:	2000      	movs	r0, #0
}
 8007ed2:	4770      	bx	lr
 8007ed4:	20007f9c 	.word	0x20007f9c

08007ed8 <pbuf_pool_is_empty>:
/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007ed8:	4b01      	ldr	r3, [pc, #4]	; (8007ee0 <pbuf_pool_is_empty+0x8>)
 8007eda:	2201      	movs	r2, #1
 8007edc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007ede:	4770      	bx	lr
 8007ee0:	20007fa4 	.word	0x20007fa4

08007ee4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007ee4:	b410      	push	{r4}
  p->next = NULL;
 8007ee6:	2400      	movs	r4, #0
 8007ee8:	6004      	str	r4, [r0, #0]
  p->payload = payload;
 8007eea:	6041      	str	r1, [r0, #4]
  p->tot_len = tot_len;
 8007eec:	8102      	strh	r2, [r0, #8]
  p->len = len;
 8007eee:	8143      	strh	r3, [r0, #10]
  p->type_internal = (u8_t)type;
 8007ef0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007ef4:	7303      	strb	r3, [r0, #12]
  p->flags = flags;
 8007ef6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007efa:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8007efc:	2301      	movs	r3, #1
 8007efe:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007f00:	73c4      	strb	r4, [r0, #15]
}
 8007f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <pbuf_skip_const>:
{
  u16_t offset_left = in_offset;
  const struct pbuf *q = in;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8007f08:	b130      	cbz	r0, 8007f18 <pbuf_skip_const+0x10>
 8007f0a:	8943      	ldrh	r3, [r0, #10]
 8007f0c:	428b      	cmp	r3, r1
 8007f0e:	d803      	bhi.n	8007f18 <pbuf_skip_const+0x10>
    offset_left = (u16_t)(offset_left - q->len);
 8007f10:	1ac9      	subs	r1, r1, r3
 8007f12:	b289      	uxth	r1, r1
    q = q->next;
 8007f14:	6800      	ldr	r0, [r0, #0]
 8007f16:	e7f7      	b.n	8007f08 <pbuf_skip_const>
  }
  if (out_offset != NULL) {
 8007f18:	b102      	cbz	r2, 8007f1c <pbuf_skip_const+0x14>
    *out_offset = offset_left;
 8007f1a:	8011      	strh	r1, [r2, #0]
  }
  return q;
}
 8007f1c:	4770      	bx	lr
	...

08007f20 <pbuf_add_header_impl>:
{
 8007f20:	b570      	push	{r4, r5, r6, lr}
 8007f22:	460c      	mov	r4, r1
 8007f24:	4616      	mov	r6, r2
  LWIP_ASSERT("p != NULL", p != NULL);
 8007f26:	4605      	mov	r5, r0
 8007f28:	b1c0      	cbz	r0, 8007f5c <pbuf_add_header_impl+0x3c>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007f2a:	b33d      	cbz	r5, 8007f7c <pbuf_add_header_impl+0x5c>
 8007f2c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8007f30:	d226      	bcs.n	8007f80 <pbuf_add_header_impl+0x60>
  if (header_size_increment == 0) {
 8007f32:	b33c      	cbz	r4, 8007f84 <pbuf_add_header_impl+0x64>
  increment_magnitude = (u16_t)header_size_increment;
 8007f34:	b2a2      	uxth	r2, r4
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007f36:	892b      	ldrh	r3, [r5, #8]
 8007f38:	4413      	add	r3, r2
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d323      	bcc.n	8007f88 <pbuf_add_header_impl+0x68>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007f40:	f995 100c 	ldrsb.w	r1, [r5, #12]
 8007f44:	2900      	cmp	r1, #0
 8007f46:	db11      	blt.n	8007f6c <pbuf_add_header_impl+0x4c>
    if (force) {
 8007f48:	b306      	cbz	r6, 8007f8c <pbuf_add_header_impl+0x6c>
      payload = (u8_t *)p->payload - header_size_increment;
 8007f4a:	6869      	ldr	r1, [r5, #4]
 8007f4c:	1b0c      	subs	r4, r1, r4
  p->payload = payload;
 8007f4e:	606c      	str	r4, [r5, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007f50:	8969      	ldrh	r1, [r5, #10]
 8007f52:	440a      	add	r2, r1
 8007f54:	816a      	strh	r2, [r5, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007f56:	812b      	strh	r3, [r5, #8]
  return 0;
 8007f58:	2000      	movs	r0, #0
 8007f5a:	e012      	b.n	8007f82 <pbuf_add_header_impl+0x62>
  LWIP_ASSERT("p != NULL", p != NULL);
 8007f5c:	4b0c      	ldr	r3, [pc, #48]	; (8007f90 <pbuf_add_header_impl+0x70>)
 8007f5e:	f240 12df 	movw	r2, #479	; 0x1df
 8007f62:	490c      	ldr	r1, [pc, #48]	; (8007f94 <pbuf_add_header_impl+0x74>)
 8007f64:	480c      	ldr	r0, [pc, #48]	; (8007f98 <pbuf_add_header_impl+0x78>)
 8007f66:	f00d fd13 	bl	8015990 <iprintf>
 8007f6a:	e7de      	b.n	8007f2a <pbuf_add_header_impl+0xa>
    payload = (u8_t *)p->payload - header_size_increment;
 8007f6c:	6869      	ldr	r1, [r5, #4]
 8007f6e:	1b0c      	subs	r4, r1, r4
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007f70:	f105 0110 	add.w	r1, r5, #16
 8007f74:	42a1      	cmp	r1, r4
 8007f76:	d9ea      	bls.n	8007f4e <pbuf_add_header_impl+0x2e>
      return 1;
 8007f78:	2001      	movs	r0, #1
 8007f7a:	e002      	b.n	8007f82 <pbuf_add_header_impl+0x62>
    return 1;
 8007f7c:	2001      	movs	r0, #1
 8007f7e:	e000      	b.n	8007f82 <pbuf_add_header_impl+0x62>
 8007f80:	2001      	movs	r0, #1
}
 8007f82:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8007f84:	2000      	movs	r0, #0
 8007f86:	e7fc      	b.n	8007f82 <pbuf_add_header_impl+0x62>
    return 1;
 8007f88:	2001      	movs	r0, #1
 8007f8a:	e7fa      	b.n	8007f82 <pbuf_add_header_impl+0x62>
      return 1;
 8007f8c:	2001      	movs	r0, #1
 8007f8e:	e7f8      	b.n	8007f82 <pbuf_add_header_impl+0x62>
 8007f90:	08018210 	.word	0x08018210
 8007f94:	08019ea8 	.word	0x08019ea8
 8007f98:	08016bb4 	.word	0x08016bb4

08007f9c <pbuf_free_ooseq>:
{
 8007f9c:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007f9e:	4b07      	ldr	r3, [pc, #28]	; (8007fbc <pbuf_free_ooseq+0x20>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007fa4:	4b06      	ldr	r3, [pc, #24]	; (8007fc0 <pbuf_free_ooseq+0x24>)
 8007fa6:	6818      	ldr	r0, [r3, #0]
 8007fa8:	b130      	cbz	r0, 8007fb8 <pbuf_free_ooseq+0x1c>
    if (pcb->ooseq != NULL) {
 8007faa:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8007fae:	b90b      	cbnz	r3, 8007fb4 <pbuf_free_ooseq+0x18>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007fb0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007fb2:	e7f9      	b.n	8007fa8 <pbuf_free_ooseq+0xc>
      tcp_free_ooseq(pcb);
 8007fb4:	f001 f924 	bl	8009200 <tcp_free_ooseq>
}
 8007fb8:	bd08      	pop	{r3, pc}
 8007fba:	bf00      	nop
 8007fbc:	20007fa4 	.word	0x20007fa4
 8007fc0:	20007fac 	.word	0x20007fac

08007fc4 <pbuf_alloc_reference>:
{
 8007fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	4606      	mov	r6, r0
 8007fca:	460d      	mov	r5, r1
 8007fcc:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007fce:	2a41      	cmp	r2, #65	; 0x41
 8007fd0:	d001      	beq.n	8007fd6 <pbuf_alloc_reference+0x12>
 8007fd2:	2a01      	cmp	r2, #1
 8007fd4:	d10f      	bne.n	8007ff6 <pbuf_alloc_reference+0x32>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007fd6:	200b      	movs	r0, #11
 8007fd8:	f7ff fbcc 	bl	8007774 <memp_malloc>
  if (p == NULL) {
 8007fdc:	4607      	mov	r7, r0
 8007fde:	b138      	cbz	r0, 8007ff0 <pbuf_alloc_reference+0x2c>
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	9301      	str	r3, [sp, #4]
 8007fe4:	9400      	str	r4, [sp, #0]
 8007fe6:	462b      	mov	r3, r5
 8007fe8:	462a      	mov	r2, r5
 8007fea:	4631      	mov	r1, r6
 8007fec:	f7ff ff7a 	bl	8007ee4 <pbuf_init_alloced_pbuf>
}
 8007ff0:	4638      	mov	r0, r7
 8007ff2:	b003      	add	sp, #12
 8007ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007ff6:	4b04      	ldr	r3, [pc, #16]	; (8008008 <pbuf_alloc_reference+0x44>)
 8007ff8:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8007ffc:	4903      	ldr	r1, [pc, #12]	; (800800c <pbuf_alloc_reference+0x48>)
 8007ffe:	4804      	ldr	r0, [pc, #16]	; (8008010 <pbuf_alloc_reference+0x4c>)
 8008000:	f00d fcc6 	bl	8015990 <iprintf>
 8008004:	e7e7      	b.n	8007fd6 <pbuf_alloc_reference+0x12>
 8008006:	bf00      	nop
 8008008:	08018210 	.word	0x08018210
 800800c:	08018240 	.word	0x08018240
 8008010:	08016bb4 	.word	0x08016bb4

08008014 <pbuf_alloced_custom>:
{
 8008014:	b570      	push	{r4, r5, r6, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	460d      	mov	r5, r1
 800801a:	461e      	mov	r6, r3
 800801c:	9906      	ldr	r1, [sp, #24]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800801e:	1cc4      	adds	r4, r0, #3
 8008020:	f024 0403 	bic.w	r4, r4, #3
 8008024:	1928      	adds	r0, r5, r4
 8008026:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800802a:	4298      	cmp	r0, r3
 800802c:	d80d      	bhi.n	800804a <pbuf_alloced_custom+0x36>
  if (payload_mem != NULL) {
 800802e:	b101      	cbz	r1, 8008032 <pbuf_alloced_custom+0x1e>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008030:	4421      	add	r1, r4
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008032:	4634      	mov	r4, r6
 8008034:	2302      	movs	r3, #2
 8008036:	9301      	str	r3, [sp, #4]
 8008038:	9200      	str	r2, [sp, #0]
 800803a:	462b      	mov	r3, r5
 800803c:	462a      	mov	r2, r5
 800803e:	4630      	mov	r0, r6
 8008040:	f7ff ff50 	bl	8007ee4 <pbuf_init_alloced_pbuf>
}
 8008044:	4620      	mov	r0, r4
 8008046:	b002      	add	sp, #8
 8008048:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 800804a:	2400      	movs	r4, #0
 800804c:	e7fa      	b.n	8008044 <pbuf_alloced_custom+0x30>

0800804e <pbuf_add_header>:
{
 800804e:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008050:	2200      	movs	r2, #0
 8008052:	f7ff ff65 	bl	8007f20 <pbuf_add_header_impl>
}
 8008056:	bd08      	pop	{r3, pc}

08008058 <pbuf_add_header_force>:
{
 8008058:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 1);
 800805a:	2201      	movs	r2, #1
 800805c:	f7ff ff60 	bl	8007f20 <pbuf_add_header_impl>
}
 8008060:	bd08      	pop	{r3, pc}
	...

08008064 <pbuf_remove_header>:
{
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	460c      	mov	r4, r1
  LWIP_ASSERT("p != NULL", p != NULL);
 8008068:	4605      	mov	r5, r0
 800806a:	b190      	cbz	r0, 8008092 <pbuf_remove_header+0x2e>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800806c:	b315      	cbz	r5, 80080b4 <pbuf_remove_header+0x50>
 800806e:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8008072:	d221      	bcs.n	80080b8 <pbuf_remove_header+0x54>
  if (header_size_decrement == 0) {
 8008074:	b314      	cbz	r4, 80080bc <pbuf_remove_header+0x58>
  increment_magnitude = (u16_t)header_size_decrement;
 8008076:	b2a2      	uxth	r2, r4
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008078:	896b      	ldrh	r3, [r5, #10]
 800807a:	4293      	cmp	r3, r2
 800807c:	d311      	bcc.n	80080a2 <pbuf_remove_header+0x3e>
  payload = p->payload;
 800807e:	6869      	ldr	r1, [r5, #4]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008080:	4421      	add	r1, r4
 8008082:	6069      	str	r1, [r5, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 8008084:	1a9b      	subs	r3, r3, r2
 8008086:	816b      	strh	r3, [r5, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008088:	892b      	ldrh	r3, [r5, #8]
 800808a:	1a9a      	subs	r2, r3, r2
 800808c:	812a      	strh	r2, [r5, #8]
  return 0;
 800808e:	2000      	movs	r0, #0
}
 8008090:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8008092:	4b0b      	ldr	r3, [pc, #44]	; (80080c0 <pbuf_remove_header+0x5c>)
 8008094:	f240 224b 	movw	r2, #587	; 0x24b
 8008098:	490a      	ldr	r1, [pc, #40]	; (80080c4 <pbuf_remove_header+0x60>)
 800809a:	480b      	ldr	r0, [pc, #44]	; (80080c8 <pbuf_remove_header+0x64>)
 800809c:	f00d fc78 	bl	8015990 <iprintf>
 80080a0:	e7e4      	b.n	800806c <pbuf_remove_header+0x8>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80080a2:	4b07      	ldr	r3, [pc, #28]	; (80080c0 <pbuf_remove_header+0x5c>)
 80080a4:	f240 2255 	movw	r2, #597	; 0x255
 80080a8:	4908      	ldr	r1, [pc, #32]	; (80080cc <pbuf_remove_header+0x68>)
 80080aa:	4807      	ldr	r0, [pc, #28]	; (80080c8 <pbuf_remove_header+0x64>)
 80080ac:	f00d fc70 	bl	8015990 <iprintf>
 80080b0:	2001      	movs	r0, #1
 80080b2:	e7ed      	b.n	8008090 <pbuf_remove_header+0x2c>
    return 1;
 80080b4:	2001      	movs	r0, #1
 80080b6:	e7eb      	b.n	8008090 <pbuf_remove_header+0x2c>
 80080b8:	2001      	movs	r0, #1
 80080ba:	e7e9      	b.n	8008090 <pbuf_remove_header+0x2c>
    return 0;
 80080bc:	2000      	movs	r0, #0
 80080be:	e7e7      	b.n	8008090 <pbuf_remove_header+0x2c>
 80080c0:	08018210 	.word	0x08018210
 80080c4:	08019ea8 	.word	0x08019ea8
 80080c8:	08016bb4 	.word	0x08016bb4
 80080cc:	08018254 	.word	0x08018254

080080d0 <pbuf_header_impl>:
{
 80080d0:	b508      	push	{r3, lr}
  if (header_size_increment < 0) {
 80080d2:	2900      	cmp	r1, #0
 80080d4:	db02      	blt.n	80080dc <pbuf_header_impl+0xc>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80080d6:	f7ff ff23 	bl	8007f20 <pbuf_add_header_impl>
}
 80080da:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80080dc:	4249      	negs	r1, r1
 80080de:	f7ff ffc1 	bl	8008064 <pbuf_remove_header>
 80080e2:	e7fa      	b.n	80080da <pbuf_header_impl+0xa>

080080e4 <pbuf_header_force>:
{
 80080e4:	b508      	push	{r3, lr}
  return pbuf_header_impl(p, header_size_increment, 1);
 80080e6:	2201      	movs	r2, #1
 80080e8:	f7ff fff2 	bl	80080d0 <pbuf_header_impl>
}
 80080ec:	bd08      	pop	{r3, pc}
	...

080080f0 <pbuf_free>:
{
 80080f0:	b570      	push	{r4, r5, r6, lr}
  if (p == NULL) {
 80080f2:	b110      	cbz	r0, 80080fa <pbuf_free+0xa>
 80080f4:	4604      	mov	r4, r0
  count = 0;
 80080f6:	2500      	movs	r5, #0
 80080f8:	e017      	b.n	800812a <pbuf_free+0x3a>
    LWIP_ASSERT("p != NULL", p != NULL);
 80080fa:	4b28      	ldr	r3, [pc, #160]	; (800819c <pbuf_free+0xac>)
 80080fc:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008100:	4927      	ldr	r1, [pc, #156]	; (80081a0 <pbuf_free+0xb0>)
 8008102:	4828      	ldr	r0, [pc, #160]	; (80081a4 <pbuf_free+0xb4>)
 8008104:	f00d fc44 	bl	8015990 <iprintf>
    return 0;
 8008108:	2500      	movs	r5, #0
}
 800810a:	4628      	mov	r0, r5
 800810c:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800810e:	4b23      	ldr	r3, [pc, #140]	; (800819c <pbuf_free+0xac>)
 8008110:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008114:	4924      	ldr	r1, [pc, #144]	; (80081a8 <pbuf_free+0xb8>)
 8008116:	4823      	ldr	r0, [pc, #140]	; (80081a4 <pbuf_free+0xb4>)
 8008118:	f00d fc3a 	bl	8015990 <iprintf>
 800811c:	e00a      	b.n	8008134 <pbuf_free+0x44>
        pc->custom_free_function(p);
 800811e:	6923      	ldr	r3, [r4, #16]
 8008120:	4620      	mov	r0, r4
 8008122:	4798      	blx	r3
      count++;
 8008124:	3501      	adds	r5, #1
 8008126:	b2ed      	uxtb	r5, r5
      p = q;
 8008128:	4634      	mov	r4, r6
  while (p != NULL) {
 800812a:	2c00      	cmp	r4, #0
 800812c:	d0ed      	beq.n	800810a <pbuf_free+0x1a>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800812e:	7ba3      	ldrb	r3, [r4, #14]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0ec      	beq.n	800810e <pbuf_free+0x1e>
    ref = --(p->ref);
 8008134:	7ba3      	ldrb	r3, [r4, #14]
 8008136:	3b01      	subs	r3, #1
 8008138:	b2db      	uxtb	r3, r3
 800813a:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1e4      	bne.n	800810a <pbuf_free+0x1a>
      q = p->next;
 8008140:	6826      	ldr	r6, [r4, #0]
      alloc_src = pbuf_get_allocsrc(p);
 8008142:	7b23      	ldrb	r3, [r4, #12]
 8008144:	f003 030f 	and.w	r3, r3, #15
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008148:	7b62      	ldrb	r2, [r4, #13]
 800814a:	f012 0f02 	tst.w	r2, #2
 800814e:	d00a      	beq.n	8008166 <pbuf_free+0x76>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008150:	6923      	ldr	r3, [r4, #16]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d1e3      	bne.n	800811e <pbuf_free+0x2e>
 8008156:	4b11      	ldr	r3, [pc, #68]	; (800819c <pbuf_free+0xac>)
 8008158:	f240 22ff 	movw	r2, #767	; 0x2ff
 800815c:	4913      	ldr	r1, [pc, #76]	; (80081ac <pbuf_free+0xbc>)
 800815e:	4811      	ldr	r0, [pc, #68]	; (80081a4 <pbuf_free+0xb4>)
 8008160:	f00d fc16 	bl	8015990 <iprintf>
 8008164:	e7db      	b.n	800811e <pbuf_free+0x2e>
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008166:	2b02      	cmp	r3, #2
 8008168:	d006      	beq.n	8008178 <pbuf_free+0x88>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800816a:	2b01      	cmp	r3, #1
 800816c:	d009      	beq.n	8008182 <pbuf_free+0x92>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800816e:	b96b      	cbnz	r3, 800818c <pbuf_free+0x9c>
          mem_free(p);
 8008170:	4620      	mov	r0, r4
 8008172:	f7ff f8db 	bl	800732c <mem_free>
 8008176:	e7d5      	b.n	8008124 <pbuf_free+0x34>
          memp_free(MEMP_PBUF_POOL, p);
 8008178:	4621      	mov	r1, r4
 800817a:	200c      	movs	r0, #12
 800817c:	f7ff fb14 	bl	80077a8 <memp_free>
 8008180:	e7d0      	b.n	8008124 <pbuf_free+0x34>
          memp_free(MEMP_PBUF, p);
 8008182:	4621      	mov	r1, r4
 8008184:	200b      	movs	r0, #11
 8008186:	f7ff fb0f 	bl	80077a8 <memp_free>
 800818a:	e7cb      	b.n	8008124 <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 800818c:	4b03      	ldr	r3, [pc, #12]	; (800819c <pbuf_free+0xac>)
 800818e:	f240 320f 	movw	r2, #783	; 0x30f
 8008192:	4907      	ldr	r1, [pc, #28]	; (80081b0 <pbuf_free+0xc0>)
 8008194:	4803      	ldr	r0, [pc, #12]	; (80081a4 <pbuf_free+0xb4>)
 8008196:	f00d fbfb 	bl	8015990 <iprintf>
 800819a:	e7c3      	b.n	8008124 <pbuf_free+0x34>
 800819c:	08018210 	.word	0x08018210
 80081a0:	08019ea8 	.word	0x08019ea8
 80081a4:	08016bb4 	.word	0x08016bb4
 80081a8:	08018274 	.word	0x08018274
 80081ac:	0801828c 	.word	0x0801828c
 80081b0:	080182b0 	.word	0x080182b0

080081b4 <pbuf_alloc>:
{
 80081b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b8:	b082      	sub	sp, #8
 80081ba:	460e      	mov	r6, r1
 80081bc:	4690      	mov	r8, r2
  u16_t offset = (u16_t)layer;
 80081be:	b285      	uxth	r5, r0
  switch (type) {
 80081c0:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 80081c4:	d046      	beq.n	8008254 <pbuf_alloc+0xa0>
 80081c6:	4607      	mov	r7, r0
 80081c8:	d80e      	bhi.n	80081e8 <pbuf_alloc+0x34>
 80081ca:	2a01      	cmp	r2, #1
 80081cc:	d002      	beq.n	80081d4 <pbuf_alloc+0x20>
 80081ce:	2a41      	cmp	r2, #65	; 0x41
 80081d0:	f040 8084 	bne.w	80082dc <pbuf_alloc+0x128>
      p = pbuf_alloc_reference(NULL, length, type);
 80081d4:	4642      	mov	r2, r8
 80081d6:	4631      	mov	r1, r6
 80081d8:	2000      	movs	r0, #0
 80081da:	f7ff fef3 	bl	8007fc4 <pbuf_alloc_reference>
 80081de:	4681      	mov	r9, r0
}
 80081e0:	4648      	mov	r0, r9
 80081e2:	b002      	add	sp, #8
 80081e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (type) {
 80081e8:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 80081ec:	d176      	bne.n	80082dc <pbuf_alloc+0x128>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80081ee:	3503      	adds	r5, #3
 80081f0:	f025 0503 	bic.w	r5, r5, #3
 80081f4:	b2ad      	uxth	r5, r5
 80081f6:	1cca      	adds	r2, r1, #3
 80081f8:	b293      	uxth	r3, r2
 80081fa:	f023 0303 	bic.w	r3, r3, #3
 80081fe:	441d      	add	r5, r3
 8008200:	b2ad      	uxth	r5, r5
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008202:	f105 0010 	add.w	r0, r5, #16
 8008206:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008208:	f022 0203 	bic.w	r2, r2, #3
 800820c:	4295      	cmp	r5, r2
 800820e:	d36f      	bcc.n	80082f0 <pbuf_alloc+0x13c>
 8008210:	4282      	cmp	r2, r0
 8008212:	d870      	bhi.n	80082f6 <pbuf_alloc+0x142>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008214:	f7ff f9a2 	bl	800755c <mem_malloc>
      if (p == NULL) {
 8008218:	4681      	mov	r9, r0
 800821a:	2800      	cmp	r0, #0
 800821c:	d0e0      	beq.n	80081e0 <pbuf_alloc+0x2c>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800821e:	f107 0110 	add.w	r1, r7, #16
 8008222:	4401      	add	r1, r0
 8008224:	3103      	adds	r1, #3
 8008226:	2300      	movs	r3, #0
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	f8cd 8000 	str.w	r8, [sp]
 800822e:	4633      	mov	r3, r6
 8008230:	4632      	mov	r2, r6
 8008232:	f021 0103 	bic.w	r1, r1, #3
 8008236:	f7ff fe55 	bl	8007ee4 <pbuf_init_alloced_pbuf>
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800823a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800823e:	f013 0f03 	tst.w	r3, #3
 8008242:	d0cd      	beq.n	80081e0 <pbuf_alloc+0x2c>
 8008244:	4b2d      	ldr	r3, [pc, #180]	; (80082fc <pbuf_alloc+0x148>)
 8008246:	f44f 7291 	mov.w	r2, #290	; 0x122
 800824a:	492d      	ldr	r1, [pc, #180]	; (8008300 <pbuf_alloc+0x14c>)
 800824c:	482d      	ldr	r0, [pc, #180]	; (8008304 <pbuf_alloc+0x150>)
 800824e:	f00d fb9f 	bl	8015990 <iprintf>
 8008252:	e7c5      	b.n	80081e0 <pbuf_alloc+0x2c>
  switch (type) {
 8008254:	2700      	movs	r7, #0
 8008256:	46b9      	mov	r9, r7
 8008258:	e01a      	b.n	8008290 <pbuf_alloc+0xdc>
          PBUF_POOL_IS_EMPTY();
 800825a:	f7ff fe3d 	bl	8007ed8 <pbuf_pool_is_empty>
          if (p) {
 800825e:	f1b9 0f00 	cmp.w	r9, #0
 8008262:	d002      	beq.n	800826a <pbuf_alloc+0xb6>
            pbuf_free(p);
 8008264:	4648      	mov	r0, r9
 8008266:	f7ff ff43 	bl	80080f0 <pbuf_free>
          return NULL;
 800826a:	46b9      	mov	r9, r7
 800826c:	e7b8      	b.n	80081e0 <pbuf_alloc+0x2c>
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800826e:	4b23      	ldr	r3, [pc, #140]	; (80082fc <pbuf_alloc+0x148>)
 8008270:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008274:	4924      	ldr	r1, [pc, #144]	; (8008308 <pbuf_alloc+0x154>)
 8008276:	4823      	ldr	r0, [pc, #140]	; (8008304 <pbuf_alloc+0x150>)
 8008278:	f00d fb8a 	bl	8015990 <iprintf>
        if (p == NULL) {
 800827c:	f1b9 0f00 	cmp.w	r9, #0
 8008280:	d02a      	beq.n	80082d8 <pbuf_alloc+0x124>
          last->next = q;
 8008282:	f8ca 7000 	str.w	r7, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 8008286:	1b36      	subs	r6, r6, r4
 8008288:	b2b6      	uxth	r6, r6
        offset = 0;
 800828a:	2500      	movs	r5, #0
      } while (rem_len > 0);
 800828c:	2e00      	cmp	r6, #0
 800828e:	d0a7      	beq.n	80081e0 <pbuf_alloc+0x2c>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008290:	46ba      	mov	sl, r7
 8008292:	200c      	movs	r0, #12
 8008294:	f7ff fa6e 	bl	8007774 <memp_malloc>
        if (q == NULL) {
 8008298:	4607      	mov	r7, r0
 800829a:	2800      	cmp	r0, #0
 800829c:	d0dd      	beq.n	800825a <pbuf_alloc+0xa6>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800829e:	1cec      	adds	r4, r5, #3
 80082a0:	f024 0403 	bic.w	r4, r4, #3
 80082a4:	b2a4      	uxth	r4, r4
 80082a6:	f5c4 7414 	rsb	r4, r4, #592	; 0x250
 80082aa:	b2a4      	uxth	r4, r4
 80082ac:	42b4      	cmp	r4, r6
 80082ae:	bf28      	it	cs
 80082b0:	4634      	movcs	r4, r6
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80082b2:	f105 0110 	add.w	r1, r5, #16
 80082b6:	4401      	add	r1, r0
 80082b8:	3103      	adds	r1, #3
 80082ba:	2300      	movs	r3, #0
 80082bc:	9301      	str	r3, [sp, #4]
 80082be:	f8cd 8000 	str.w	r8, [sp]
 80082c2:	4623      	mov	r3, r4
 80082c4:	4632      	mov	r2, r6
 80082c6:	f021 0103 	bic.w	r1, r1, #3
 80082ca:	f7ff fe0b 	bl	8007ee4 <pbuf_init_alloced_pbuf>
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f013 0f03 	tst.w	r3, #3
 80082d4:	d0d2      	beq.n	800827c <pbuf_alloc+0xc8>
 80082d6:	e7ca      	b.n	800826e <pbuf_alloc+0xba>
          p = q;
 80082d8:	46b9      	mov	r9, r7
 80082da:	e7d4      	b.n	8008286 <pbuf_alloc+0xd2>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80082dc:	4b07      	ldr	r3, [pc, #28]	; (80082fc <pbuf_alloc+0x148>)
 80082de:	f240 1227 	movw	r2, #295	; 0x127
 80082e2:	490a      	ldr	r1, [pc, #40]	; (800830c <pbuf_alloc+0x158>)
 80082e4:	4807      	ldr	r0, [pc, #28]	; (8008304 <pbuf_alloc+0x150>)
 80082e6:	f00d fb53 	bl	8015990 <iprintf>
      return NULL;
 80082ea:	f04f 0900 	mov.w	r9, #0
 80082ee:	e777      	b.n	80081e0 <pbuf_alloc+0x2c>
        return NULL;
 80082f0:	f04f 0900 	mov.w	r9, #0
 80082f4:	e774      	b.n	80081e0 <pbuf_alloc+0x2c>
 80082f6:	f04f 0900 	mov.w	r9, #0
 80082fa:	e771      	b.n	80081e0 <pbuf_alloc+0x2c>
 80082fc:	08018210 	.word	0x08018210
 8008300:	08018328 	.word	0x08018328
 8008304:	08016bb4 	.word	0x08016bb4
 8008308:	080182c4 	.word	0x080182c4
 800830c:	08018354 	.word	0x08018354

08008310 <pbuf_realloc>:
{
 8008310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008312:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008314:	4604      	mov	r4, r0
 8008316:	b1b8      	cbz	r0, 8008348 <pbuf_realloc+0x38>
  if (new_len >= p->tot_len) {
 8008318:	8927      	ldrh	r7, [r4, #8]
 800831a:	42b7      	cmp	r7, r6
 800831c:	d92e      	bls.n	800837c <pbuf_realloc+0x6c>
  rem_len = new_len;
 800831e:	4635      	mov	r5, r6
  while (rem_len > q->len) {
 8008320:	8963      	ldrh	r3, [r4, #10]
 8008322:	42ab      	cmp	r3, r5
 8008324:	d218      	bcs.n	8008358 <pbuf_realloc+0x48>
    rem_len = (u16_t)(rem_len - q->len);
 8008326:	1aeb      	subs	r3, r5, r3
 8008328:	b29d      	uxth	r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800832a:	8923      	ldrh	r3, [r4, #8]
 800832c:	1bf2      	subs	r2, r6, r7
 800832e:	4413      	add	r3, r2
 8008330:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8008332:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008334:	2c00      	cmp	r4, #0
 8008336:	d1f3      	bne.n	8008320 <pbuf_realloc+0x10>
 8008338:	4b1a      	ldr	r3, [pc, #104]	; (80083a4 <pbuf_realloc+0x94>)
 800833a:	f240 12af 	movw	r2, #431	; 0x1af
 800833e:	491a      	ldr	r1, [pc, #104]	; (80083a8 <pbuf_realloc+0x98>)
 8008340:	481a      	ldr	r0, [pc, #104]	; (80083ac <pbuf_realloc+0x9c>)
 8008342:	f00d fb25 	bl	8015990 <iprintf>
 8008346:	e7eb      	b.n	8008320 <pbuf_realloc+0x10>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008348:	4b16      	ldr	r3, [pc, #88]	; (80083a4 <pbuf_realloc+0x94>)
 800834a:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800834e:	4918      	ldr	r1, [pc, #96]	; (80083b0 <pbuf_realloc+0xa0>)
 8008350:	4816      	ldr	r0, [pc, #88]	; (80083ac <pbuf_realloc+0x9c>)
 8008352:	f00d fb1d 	bl	8015990 <iprintf>
 8008356:	e7df      	b.n	8008318 <pbuf_realloc+0x8>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008358:	7b22      	ldrb	r2, [r4, #12]
 800835a:	f012 0f0f 	tst.w	r2, #15
 800835e:	d105      	bne.n	800836c <pbuf_realloc+0x5c>
 8008360:	42ab      	cmp	r3, r5
 8008362:	d003      	beq.n	800836c <pbuf_realloc+0x5c>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008364:	7b63      	ldrb	r3, [r4, #13]
 8008366:	f013 0f02 	tst.w	r3, #2
 800836a:	d008      	beq.n	800837e <pbuf_realloc+0x6e>
  q->len = rem_len;
 800836c:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800836e:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8008370:	6820      	ldr	r0, [r4, #0]
 8008372:	b108      	cbz	r0, 8008378 <pbuf_realloc+0x68>
    pbuf_free(q->next);
 8008374:	f7ff febc 	bl	80080f0 <pbuf_free>
  q->next = NULL;
 8008378:	2300      	movs	r3, #0
 800837a:	6023      	str	r3, [r4, #0]
}
 800837c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800837e:	6863      	ldr	r3, [r4, #4]
 8008380:	1b1b      	subs	r3, r3, r4
 8008382:	18e9      	adds	r1, r5, r3
 8008384:	b289      	uxth	r1, r1
 8008386:	4620      	mov	r0, r4
 8008388:	f7ff f82a 	bl	80073e0 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800838c:	4604      	mov	r4, r0
 800838e:	2800      	cmp	r0, #0
 8008390:	d1ec      	bne.n	800836c <pbuf_realloc+0x5c>
 8008392:	4b04      	ldr	r3, [pc, #16]	; (80083a4 <pbuf_realloc+0x94>)
 8008394:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008398:	4906      	ldr	r1, [pc, #24]	; (80083b4 <pbuf_realloc+0xa4>)
 800839a:	4804      	ldr	r0, [pc, #16]	; (80083ac <pbuf_realloc+0x9c>)
 800839c:	f00d faf8 	bl	8015990 <iprintf>
 80083a0:	e7e4      	b.n	800836c <pbuf_realloc+0x5c>
 80083a2:	bf00      	nop
 80083a4:	08018210 	.word	0x08018210
 80083a8:	08018388 	.word	0x08018388
 80083ac:	08016bb4 	.word	0x08016bb4
 80083b0:	08018370 	.word	0x08018370
 80083b4:	080183a0 	.word	0x080183a0

080083b8 <pbuf_clen>:
{
 80083b8:	4603      	mov	r3, r0
  len = 0;
 80083ba:	2000      	movs	r0, #0
  while (p != NULL) {
 80083bc:	b11b      	cbz	r3, 80083c6 <pbuf_clen+0xe>
    ++len;
 80083be:	3001      	adds	r0, #1
 80083c0:	b280      	uxth	r0, r0
    p = p->next;
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	e7fa      	b.n	80083bc <pbuf_clen+0x4>
}
 80083c6:	4770      	bx	lr

080083c8 <pbuf_ref>:
  if (p != NULL) {
 80083c8:	b170      	cbz	r0, 80083e8 <pbuf_ref+0x20>
{
 80083ca:	b508      	push	{r3, lr}
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80083cc:	7b83      	ldrb	r3, [r0, #14]
 80083ce:	3301      	adds	r3, #1
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80083d4:	b103      	cbz	r3, 80083d8 <pbuf_ref+0x10>
}
 80083d6:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80083d8:	4b04      	ldr	r3, [pc, #16]	; (80083ec <pbuf_ref+0x24>)
 80083da:	f240 3242 	movw	r2, #834	; 0x342
 80083de:	4904      	ldr	r1, [pc, #16]	; (80083f0 <pbuf_ref+0x28>)
 80083e0:	4804      	ldr	r0, [pc, #16]	; (80083f4 <pbuf_ref+0x2c>)
 80083e2:	f00d fad5 	bl	8015990 <iprintf>
}
 80083e6:	e7f6      	b.n	80083d6 <pbuf_ref+0xe>
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	08018210 	.word	0x08018210
 80083f0:	080183bc 	.word	0x080183bc
 80083f4:	08016bb4 	.word	0x08016bb4

080083f8 <pbuf_cat>:
{
 80083f8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80083fa:	b110      	cbz	r0, 8008402 <pbuf_cat+0xa>
 80083fc:	460d      	mov	r5, r1
 80083fe:	4604      	mov	r4, r0
 8008400:	b961      	cbnz	r1, 800841c <pbuf_cat+0x24>
 8008402:	4b15      	ldr	r3, [pc, #84]	; (8008458 <pbuf_cat+0x60>)
 8008404:	f240 3259 	movw	r2, #857	; 0x359
 8008408:	4914      	ldr	r1, [pc, #80]	; (800845c <pbuf_cat+0x64>)
 800840a:	4815      	ldr	r0, [pc, #84]	; (8008460 <pbuf_cat+0x68>)
 800840c:	f00d fac0 	bl	8015990 <iprintf>
 8008410:	e019      	b.n	8008446 <pbuf_cat+0x4e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008412:	8923      	ldrh	r3, [r4, #8]
 8008414:	8928      	ldrh	r0, [r5, #8]
 8008416:	4403      	add	r3, r0
 8008418:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800841a:	4614      	mov	r4, r2
 800841c:	6822      	ldr	r2, [r4, #0]
 800841e:	2a00      	cmp	r2, #0
 8008420:	d1f7      	bne.n	8008412 <pbuf_cat+0x1a>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008422:	8922      	ldrh	r2, [r4, #8]
 8008424:	8963      	ldrh	r3, [r4, #10]
 8008426:	429a      	cmp	r2, r3
 8008428:	d10e      	bne.n	8008448 <pbuf_cat+0x50>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	b133      	cbz	r3, 800843c <pbuf_cat+0x44>
 800842e:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <pbuf_cat+0x60>)
 8008430:	f240 3263 	movw	r2, #867	; 0x363
 8008434:	490b      	ldr	r1, [pc, #44]	; (8008464 <pbuf_cat+0x6c>)
 8008436:	480a      	ldr	r0, [pc, #40]	; (8008460 <pbuf_cat+0x68>)
 8008438:	f00d faaa 	bl	8015990 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800843c:	8923      	ldrh	r3, [r4, #8]
 800843e:	892a      	ldrh	r2, [r5, #8]
 8008440:	4413      	add	r3, r2
 8008442:	8123      	strh	r3, [r4, #8]
  p->next = t;
 8008444:	6025      	str	r5, [r4, #0]
}
 8008446:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008448:	4b03      	ldr	r3, [pc, #12]	; (8008458 <pbuf_cat+0x60>)
 800844a:	f240 3262 	movw	r2, #866	; 0x362
 800844e:	4906      	ldr	r1, [pc, #24]	; (8008468 <pbuf_cat+0x70>)
 8008450:	4803      	ldr	r0, [pc, #12]	; (8008460 <pbuf_cat+0x68>)
 8008452:	f00d fa9d 	bl	8015990 <iprintf>
 8008456:	e7e8      	b.n	800842a <pbuf_cat+0x32>
 8008458:	08018210 	.word	0x08018210
 800845c:	080183d0 	.word	0x080183d0
 8008460:	08016bb4 	.word	0x08016bb4
 8008464:	08018438 	.word	0x08018438
 8008468:	08018408 	.word	0x08018408

0800846c <pbuf_chain>:
{
 800846c:	b510      	push	{r4, lr}
 800846e:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8008470:	f7ff ffc2 	bl	80083f8 <pbuf_cat>
  pbuf_ref(t);
 8008474:	4620      	mov	r0, r4
 8008476:	f7ff ffa7 	bl	80083c8 <pbuf_ref>
}
 800847a:	bd10      	pop	{r4, pc}

0800847c <pbuf_copy>:
{
 800847c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008480:	b148      	cbz	r0, 8008496 <pbuf_copy+0x1a>
 8008482:	460c      	mov	r4, r1
 8008484:	4605      	mov	r5, r0
 8008486:	b131      	cbz	r1, 8008496 <pbuf_copy+0x1a>
 8008488:	8902      	ldrh	r2, [r0, #8]
 800848a:	890b      	ldrh	r3, [r1, #8]
 800848c:	429a      	cmp	r2, r3
 800848e:	d302      	bcc.n	8008496 <pbuf_copy+0x1a>
  size_t offset_to = 0, offset_from = 0, len;
 8008490:	2700      	movs	r7, #0
 8008492:	46b8      	mov	r8, r7
 8008494:	e03a      	b.n	800850c <pbuf_copy+0x90>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008496:	4b3a      	ldr	r3, [pc, #232]	; (8008580 <pbuf_copy+0x104>)
 8008498:	f240 32c9 	movw	r2, #969	; 0x3c9
 800849c:	4939      	ldr	r1, [pc, #228]	; (8008584 <pbuf_copy+0x108>)
 800849e:	483a      	ldr	r0, [pc, #232]	; (8008588 <pbuf_copy+0x10c>)
 80084a0:	f00d fa76 	bl	8015990 <iprintf>
 80084a4:	f06f 000f 	mvn.w	r0, #15
 80084a8:	e068      	b.n	800857c <pbuf_copy+0x100>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80084aa:	4b35      	ldr	r3, [pc, #212]	; (8008580 <pbuf_copy+0x104>)
 80084ac:	f240 32d9 	movw	r2, #985	; 0x3d9
 80084b0:	4936      	ldr	r1, [pc, #216]	; (800858c <pbuf_copy+0x110>)
 80084b2:	4835      	ldr	r0, [pc, #212]	; (8008588 <pbuf_copy+0x10c>)
 80084b4:	f00d fa6c 	bl	8015990 <iprintf>
 80084b8:	e03c      	b.n	8008534 <pbuf_copy+0xb8>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80084ba:	4b31      	ldr	r3, [pc, #196]	; (8008580 <pbuf_copy+0x104>)
 80084bc:	f240 32da 	movw	r2, #986	; 0x3da
 80084c0:	4933      	ldr	r1, [pc, #204]	; (8008590 <pbuf_copy+0x114>)
 80084c2:	4831      	ldr	r0, [pc, #196]	; (8008588 <pbuf_copy+0x10c>)
 80084c4:	f00d fa64 	bl	8015990 <iprintf>
 80084c8:	e037      	b.n	800853a <pbuf_copy+0xbe>
      p_to = p_to->next;
 80084ca:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80084cc:	b115      	cbz	r5, 80084d4 <pbuf_copy+0x58>
      offset_to = 0;
 80084ce:	f04f 0800 	mov.w	r8, #0
 80084d2:	e03a      	b.n	800854a <pbuf_copy+0xce>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80084d4:	b914      	cbnz	r4, 80084dc <pbuf_copy+0x60>
      offset_to = 0;
 80084d6:	f04f 0800 	mov.w	r8, #0
 80084da:	e036      	b.n	800854a <pbuf_copy+0xce>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80084dc:	4b28      	ldr	r3, [pc, #160]	; (8008580 <pbuf_copy+0x104>)
 80084de:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80084e2:	492c      	ldr	r1, [pc, #176]	; (8008594 <pbuf_copy+0x118>)
 80084e4:	4828      	ldr	r0, [pc, #160]	; (8008588 <pbuf_copy+0x10c>)
 80084e6:	f00d fa53 	bl	8015990 <iprintf>
 80084ea:	f06f 000f 	mvn.w	r0, #15
 80084ee:	e045      	b.n	800857c <pbuf_copy+0x100>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	b37b      	cbz	r3, 8008554 <pbuf_copy+0xd8>
 80084f4:	4b22      	ldr	r3, [pc, #136]	; (8008580 <pbuf_copy+0x104>)
 80084f6:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80084fa:	4927      	ldr	r1, [pc, #156]	; (8008598 <pbuf_copy+0x11c>)
 80084fc:	4822      	ldr	r0, [pc, #136]	; (8008588 <pbuf_copy+0x10c>)
 80084fe:	f00d fa47 	bl	8015990 <iprintf>
 8008502:	f06f 0005 	mvn.w	r0, #5
 8008506:	e039      	b.n	800857c <pbuf_copy+0x100>
  } while (p_from);
 8008508:	2c00      	cmp	r4, #0
 800850a:	d036      	beq.n	800857a <pbuf_copy+0xfe>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800850c:	896e      	ldrh	r6, [r5, #10]
 800850e:	eba6 0608 	sub.w	r6, r6, r8
 8008512:	8963      	ldrh	r3, [r4, #10]
 8008514:	1bdb      	subs	r3, r3, r7
 8008516:	429e      	cmp	r6, r3
 8008518:	d300      	bcc.n	800851c <pbuf_copy+0xa0>
      len = p_from->len - offset_from;
 800851a:	461e      	mov	r6, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800851c:	6868      	ldr	r0, [r5, #4]
 800851e:	6861      	ldr	r1, [r4, #4]
 8008520:	4632      	mov	r2, r6
 8008522:	4439      	add	r1, r7
 8008524:	4440      	add	r0, r8
 8008526:	f00d fa03 	bl	8015930 <memcpy>
    offset_to += len;
 800852a:	44b0      	add	r8, r6
    offset_from += len;
 800852c:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800852e:	896b      	ldrh	r3, [r5, #10]
 8008530:	4543      	cmp	r3, r8
 8008532:	d3ba      	bcc.n	80084aa <pbuf_copy+0x2e>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008534:	8963      	ldrh	r3, [r4, #10]
 8008536:	42bb      	cmp	r3, r7
 8008538:	d3bf      	bcc.n	80084ba <pbuf_copy+0x3e>
    if (offset_from >= p_from->len) {
 800853a:	8963      	ldrh	r3, [r4, #10]
 800853c:	42bb      	cmp	r3, r7
 800853e:	d801      	bhi.n	8008544 <pbuf_copy+0xc8>
      p_from = p_from->next;
 8008540:	6824      	ldr	r4, [r4, #0]
      offset_from = 0;
 8008542:	2700      	movs	r7, #0
    if (offset_to == p_to->len) {
 8008544:	896b      	ldrh	r3, [r5, #10]
 8008546:	4543      	cmp	r3, r8
 8008548:	d0bf      	beq.n	80084ca <pbuf_copy+0x4e>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800854a:	b11c      	cbz	r4, 8008554 <pbuf_copy+0xd8>
 800854c:	8962      	ldrh	r2, [r4, #10]
 800854e:	8923      	ldrh	r3, [r4, #8]
 8008550:	429a      	cmp	r2, r3
 8008552:	d0cd      	beq.n	80084f0 <pbuf_copy+0x74>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008554:	2d00      	cmp	r5, #0
 8008556:	d0d7      	beq.n	8008508 <pbuf_copy+0x8c>
 8008558:	896a      	ldrh	r2, [r5, #10]
 800855a:	892b      	ldrh	r3, [r5, #8]
 800855c:	429a      	cmp	r2, r3
 800855e:	d1d3      	bne.n	8008508 <pbuf_copy+0x8c>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008560:	682b      	ldr	r3, [r5, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d0d0      	beq.n	8008508 <pbuf_copy+0x8c>
 8008566:	4b06      	ldr	r3, [pc, #24]	; (8008580 <pbuf_copy+0x104>)
 8008568:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800856c:	490a      	ldr	r1, [pc, #40]	; (8008598 <pbuf_copy+0x11c>)
 800856e:	4806      	ldr	r0, [pc, #24]	; (8008588 <pbuf_copy+0x10c>)
 8008570:	f00d fa0e 	bl	8015990 <iprintf>
 8008574:	f06f 0005 	mvn.w	r0, #5
 8008578:	e000      	b.n	800857c <pbuf_copy+0x100>
  return ERR_OK;
 800857a:	2000      	movs	r0, #0
}
 800857c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008580:	08018210 	.word	0x08018210
 8008584:	08018448 	.word	0x08018448
 8008588:	08016bb4 	.word	0x08016bb4
 800858c:	08018478 	.word	0x08018478
 8008590:	08018490 	.word	0x08018490
 8008594:	080184ac 	.word	0x080184ac
 8008598:	080184bc 	.word	0x080184bc

0800859c <pbuf_copy_partial>:
{
 800859c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80085a0:	b130      	cbz	r0, 80085b0 <pbuf_copy_partial+0x14>
 80085a2:	4688      	mov	r8, r1
 80085a4:	4691      	mov	r9, r2
 80085a6:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80085a8:	b169      	cbz	r1, 80085c6 <pbuf_copy_partial+0x2a>
  u16_t copied_total = 0;
 80085aa:	2700      	movs	r7, #0
  u16_t left = 0;
 80085ac:	463e      	mov	r6, r7
 80085ae:	e02a      	b.n	8008606 <pbuf_copy_partial+0x6a>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80085b0:	4b1b      	ldr	r3, [pc, #108]	; (8008620 <pbuf_copy_partial+0x84>)
 80085b2:	f240 420a 	movw	r2, #1034	; 0x40a
 80085b6:	491b      	ldr	r1, [pc, #108]	; (8008624 <pbuf_copy_partial+0x88>)
 80085b8:	481b      	ldr	r0, [pc, #108]	; (8008628 <pbuf_copy_partial+0x8c>)
 80085ba:	f00d f9e9 	bl	8015990 <iprintf>
 80085be:	2700      	movs	r7, #0
}
 80085c0:	4638      	mov	r0, r7
 80085c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80085c6:	4b16      	ldr	r3, [pc, #88]	; (8008620 <pbuf_copy_partial+0x84>)
 80085c8:	f240 420b 	movw	r2, #1035	; 0x40b
 80085cc:	4917      	ldr	r1, [pc, #92]	; (800862c <pbuf_copy_partial+0x90>)
 80085ce:	4816      	ldr	r0, [pc, #88]	; (8008628 <pbuf_copy_partial+0x8c>)
 80085d0:	f00d f9de 	bl	8015990 <iprintf>
 80085d4:	2700      	movs	r7, #0
 80085d6:	e7f3      	b.n	80085c0 <pbuf_copy_partial+0x24>
      buf_copy_len = (u16_t)(p->len - offset);
 80085d8:	896c      	ldrh	r4, [r5, #10]
 80085da:	1ae4      	subs	r4, r4, r3
 80085dc:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 80085de:	45a1      	cmp	r9, r4
 80085e0:	d200      	bcs.n	80085e4 <pbuf_copy_partial+0x48>
        buf_copy_len = len;
 80085e2:	464c      	mov	r4, r9
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80085e4:	6869      	ldr	r1, [r5, #4]
 80085e6:	4622      	mov	r2, r4
 80085e8:	4419      	add	r1, r3
 80085ea:	eb08 0006 	add.w	r0, r8, r6
 80085ee:	f00d f99f 	bl	8015930 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80085f2:	4427      	add	r7, r4
 80085f4:	b2bf      	uxth	r7, r7
      left = (u16_t)(left + buf_copy_len);
 80085f6:	4426      	add	r6, r4
 80085f8:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 80085fa:	eba9 0404 	sub.w	r4, r9, r4
 80085fe:	fa1f f984 	uxth.w	r9, r4
      offset = 0;
 8008602:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008604:	682d      	ldr	r5, [r5, #0]
 8008606:	f1b9 0f00 	cmp.w	r9, #0
 800860a:	d0d9      	beq.n	80085c0 <pbuf_copy_partial+0x24>
 800860c:	2d00      	cmp	r5, #0
 800860e:	d0d7      	beq.n	80085c0 <pbuf_copy_partial+0x24>
    if ((offset != 0) && (offset >= p->len)) {
 8008610:	2b00      	cmp	r3, #0
 8008612:	d0e1      	beq.n	80085d8 <pbuf_copy_partial+0x3c>
 8008614:	8969      	ldrh	r1, [r5, #10]
 8008616:	4299      	cmp	r1, r3
 8008618:	d8de      	bhi.n	80085d8 <pbuf_copy_partial+0x3c>
      offset = (u16_t)(offset - p->len);
 800861a:	1a5b      	subs	r3, r3, r1
 800861c:	b29b      	uxth	r3, r3
 800861e:	e7f1      	b.n	8008604 <pbuf_copy_partial+0x68>
 8008620:	08018210 	.word	0x08018210
 8008624:	080184e8 	.word	0x080184e8
 8008628:	08016bb4 	.word	0x08016bb4
 800862c:	08018508 	.word	0x08018508

08008630 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8008630:	b508      	push	{r3, lr}
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8008632:	f7ff fc69 	bl	8007f08 <pbuf_skip_const>
  return LWIP_CONST_CAST(struct pbuf *, out);
}
 8008636:	bd08      	pop	{r3, pc}

08008638 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8008638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800863c:	b148      	cbz	r0, 8008652 <pbuf_take+0x1a>
 800863e:	4688      	mov	r8, r1
 8008640:	4691      	mov	r9, r2
 8008642:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8008644:	b179      	cbz	r1, 8008666 <pbuf_take+0x2e>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8008646:	8903      	ldrh	r3, [r0, #8]
 8008648:	4293      	cmp	r3, r2
 800864a:	d316      	bcc.n	800867a <pbuf_take+0x42>
  size_t total_copy_len = len;
 800864c:	4616      	mov	r6, r2
  size_t copied_total = 0;
 800864e:	2700      	movs	r7, #0
 8008650:	e02e      	b.n	80086b0 <pbuf_take+0x78>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8008652:	4b22      	ldr	r3, [pc, #136]	; (80086dc <pbuf_take+0xa4>)
 8008654:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8008658:	4921      	ldr	r1, [pc, #132]	; (80086e0 <pbuf_take+0xa8>)
 800865a:	4822      	ldr	r0, [pc, #136]	; (80086e4 <pbuf_take+0xac>)
 800865c:	f00d f998 	bl	8015990 <iprintf>
 8008660:	f06f 000f 	mvn.w	r0, #15
 8008664:	e02f      	b.n	80086c6 <pbuf_take+0x8e>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8008666:	4b1d      	ldr	r3, [pc, #116]	; (80086dc <pbuf_take+0xa4>)
 8008668:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800866c:	491e      	ldr	r1, [pc, #120]	; (80086e8 <pbuf_take+0xb0>)
 800866e:	481d      	ldr	r0, [pc, #116]	; (80086e4 <pbuf_take+0xac>)
 8008670:	f00d f98e 	bl	8015990 <iprintf>
 8008674:	f06f 000f 	mvn.w	r0, #15
 8008678:	e025      	b.n	80086c6 <pbuf_take+0x8e>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800867a:	4b18      	ldr	r3, [pc, #96]	; (80086dc <pbuf_take+0xa4>)
 800867c:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8008680:	491a      	ldr	r1, [pc, #104]	; (80086ec <pbuf_take+0xb4>)
 8008682:	4818      	ldr	r0, [pc, #96]	; (80086e4 <pbuf_take+0xac>)
 8008684:	f00d f984 	bl	8015990 <iprintf>
 8008688:	f04f 30ff 	mov.w	r0, #4294967295
 800868c:	e01b      	b.n	80086c6 <pbuf_take+0x8e>
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800868e:	4b13      	ldr	r3, [pc, #76]	; (80086dc <pbuf_take+0xa4>)
 8008690:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8008694:	4916      	ldr	r1, [pc, #88]	; (80086f0 <pbuf_take+0xb8>)
 8008696:	4813      	ldr	r0, [pc, #76]	; (80086e4 <pbuf_take+0xac>)
 8008698:	f00d f97a 	bl	8015990 <iprintf>
 800869c:	e00b      	b.n	80086b6 <pbuf_take+0x7e>
    if (buf_copy_len > p->len) {
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800869e:	4622      	mov	r2, r4
 80086a0:	eb08 0107 	add.w	r1, r8, r7
 80086a4:	6868      	ldr	r0, [r5, #4]
 80086a6:	f00d f943 	bl	8015930 <memcpy>
    total_copy_len -= buf_copy_len;
 80086aa:	1b36      	subs	r6, r6, r4
    copied_total += buf_copy_len;
 80086ac:	4427      	add	r7, r4
  for (p = buf; total_copy_len != 0; p = p->next) {
 80086ae:	682d      	ldr	r5, [r5, #0]
 80086b0:	b136      	cbz	r6, 80086c0 <pbuf_take+0x88>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80086b2:	2d00      	cmp	r5, #0
 80086b4:	d0eb      	beq.n	800868e <pbuf_take+0x56>
    if (buf_copy_len > p->len) {
 80086b6:	896c      	ldrh	r4, [r5, #10]
 80086b8:	42b4      	cmp	r4, r6
 80086ba:	d3f0      	bcc.n	800869e <pbuf_take+0x66>
    buf_copy_len = total_copy_len;
 80086bc:	4634      	mov	r4, r6
 80086be:	e7ee      	b.n	800869e <pbuf_take+0x66>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80086c0:	454f      	cmp	r7, r9
 80086c2:	d102      	bne.n	80086ca <pbuf_take+0x92>
  return ERR_OK;
 80086c4:	2000      	movs	r0, #0
}
 80086c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80086ca:	4b04      	ldr	r3, [pc, #16]	; (80086dc <pbuf_take+0xa4>)
 80086cc:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80086d0:	4908      	ldr	r1, [pc, #32]	; (80086f4 <pbuf_take+0xbc>)
 80086d2:	4804      	ldr	r0, [pc, #16]	; (80086e4 <pbuf_take+0xac>)
 80086d4:	f00d f95c 	bl	8015990 <iprintf>
  return ERR_OK;
 80086d8:	2000      	movs	r0, #0
 80086da:	e7f4      	b.n	80086c6 <pbuf_take+0x8e>
 80086dc:	08018210 	.word	0x08018210
 80086e0:	0801852c 	.word	0x0801852c
 80086e4:	08016bb4 	.word	0x08016bb4
 80086e8:	08018544 	.word	0x08018544
 80086ec:	08018560 	.word	0x08018560
 80086f0:	08018580 	.word	0x08018580
 80086f4:	08018598 	.word	0x08018598

080086f8 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 80086f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086fa:	b083      	sub	sp, #12
 80086fc:	460e      	mov	r6, r1
 80086fe:	4614      	mov	r4, r2
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8008700:	f10d 0206 	add.w	r2, sp, #6
 8008704:	4619      	mov	r1, r3
 8008706:	f7ff ff93 	bl	8008630 <pbuf_skip>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800870a:	b358      	cbz	r0, 8008764 <pbuf_take_at+0x6c>
 800870c:	4607      	mov	r7, r0
 800870e:	8901      	ldrh	r1, [r0, #8]
 8008710:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008714:	191a      	adds	r2, r3, r4
 8008716:	4291      	cmp	r1, r2
 8008718:	db27      	blt.n	800876a <pbuf_take_at+0x72>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800871a:	8942      	ldrh	r2, [r0, #10]
 800871c:	4293      	cmp	r3, r2
 800871e:	d213      	bcs.n	8008748 <pbuf_take_at+0x50>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8008720:	897b      	ldrh	r3, [r7, #10]
 8008722:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8008726:	1a1a      	subs	r2, r3, r0
 8008728:	4294      	cmp	r4, r2
 800872a:	dd15      	ble.n	8008758 <pbuf_take_at+0x60>
 800872c:	b295      	uxth	r5, r2
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	462a      	mov	r2, r5
 8008732:	4631      	mov	r1, r6
 8008734:	4418      	add	r0, r3
 8008736:	f00d f8fb 	bl	8015930 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800873a:	1b62      	subs	r2, r4, r5
 800873c:	b292      	uxth	r2, r2
    src_ptr += first_copy_len;
 800873e:	1971      	adds	r1, r6, r5
    if (remaining_len > 0) {
 8008740:	b962      	cbnz	r2, 800875c <pbuf_take_at+0x64>
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
 8008742:	2000      	movs	r0, #0
  }
  return ERR_MEM;
}
 8008744:	b003      	add	sp, #12
 8008746:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8008748:	4b09      	ldr	r3, [pc, #36]	; (8008770 <pbuf_take_at+0x78>)
 800874a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800874e:	4909      	ldr	r1, [pc, #36]	; (8008774 <pbuf_take_at+0x7c>)
 8008750:	4809      	ldr	r0, [pc, #36]	; (8008778 <pbuf_take_at+0x80>)
 8008752:	f00d f91d 	bl	8015990 <iprintf>
 8008756:	e7e3      	b.n	8008720 <pbuf_take_at+0x28>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8008758:	4625      	mov	r5, r4
 800875a:	e7e8      	b.n	800872e <pbuf_take_at+0x36>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800875c:	6838      	ldr	r0, [r7, #0]
 800875e:	f7ff ff6b 	bl	8008638 <pbuf_take>
 8008762:	e7ef      	b.n	8008744 <pbuf_take_at+0x4c>
  return ERR_MEM;
 8008764:	f04f 30ff 	mov.w	r0, #4294967295
 8008768:	e7ec      	b.n	8008744 <pbuf_take_at+0x4c>
 800876a:	f04f 30ff 	mov.w	r0, #4294967295
 800876e:	e7e9      	b.n	8008744 <pbuf_take_at+0x4c>
 8008770:	08018210 	.word	0x08018210
 8008774:	080185b0 	.word	0x080185b0
 8008778:	08016bb4 	.word	0x08016bb4

0800877c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800877c:	b538      	push	{r3, r4, r5, lr}
 800877e:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008780:	460a      	mov	r2, r1
 8008782:	8921      	ldrh	r1, [r4, #8]
 8008784:	f7ff fd16 	bl	80081b4 <pbuf_alloc>
  if (q == NULL) {
 8008788:	4605      	mov	r5, r0
 800878a:	b118      	cbz	r0, 8008794 <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800878c:	4621      	mov	r1, r4
 800878e:	f7ff fe75 	bl	800847c <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008792:	b908      	cbnz	r0, 8008798 <pbuf_clone+0x1c>
  return q;
}
 8008794:	4628      	mov	r0, r5
 8008796:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008798:	4b03      	ldr	r3, [pc, #12]	; (80087a8 <pbuf_clone+0x2c>)
 800879a:	f240 5224 	movw	r2, #1316	; 0x524
 800879e:	4903      	ldr	r1, [pc, #12]	; (80087ac <pbuf_clone+0x30>)
 80087a0:	4803      	ldr	r0, [pc, #12]	; (80087b0 <pbuf_clone+0x34>)
 80087a2:	f00d f8f5 	bl	8015990 <iprintf>
 80087a6:	e7f5      	b.n	8008794 <pbuf_clone+0x18>
 80087a8:	08018210 	.word	0x08018210
 80087ac:	080185c8 	.word	0x080185c8
 80087b0:	08016bb4 	.word	0x08016bb4

080087b4 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 80087b4:	b500      	push	{lr}
 80087b6:	b083      	sub	sp, #12
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 80087b8:	f10d 0206 	add.w	r2, sp, #6
 80087bc:	f7ff fba4 	bl	8007f08 <pbuf_skip_const>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80087c0:	b148      	cbz	r0, 80087d6 <pbuf_try_get_at+0x22>
 80087c2:	8941      	ldrh	r1, [r0, #10]
 80087c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80087c8:	4291      	cmp	r1, r2
 80087ca:	d907      	bls.n	80087dc <pbuf_try_get_at+0x28>
    return ((u8_t *)q->payload)[q_idx];
 80087cc:	6843      	ldr	r3, [r0, #4]
 80087ce:	5c98      	ldrb	r0, [r3, r2]
  }
  return -1;
}
 80087d0:	b003      	add	sp, #12
 80087d2:	f85d fb04 	ldr.w	pc, [sp], #4
  return -1;
 80087d6:	f04f 30ff 	mov.w	r0, #4294967295
 80087da:	e7f9      	b.n	80087d0 <pbuf_try_get_at+0x1c>
 80087dc:	f04f 30ff 	mov.w	r0, #4294967295
 80087e0:	e7f6      	b.n	80087d0 <pbuf_try_get_at+0x1c>

080087e2 <pbuf_get_at>:
{
 80087e2:	b508      	push	{r3, lr}
  int ret = pbuf_try_get_at(p, offset);
 80087e4:	f7ff ffe6 	bl	80087b4 <pbuf_try_get_at>
  if (ret >= 0) {
 80087e8:	2800      	cmp	r0, #0
 80087ea:	da01      	bge.n	80087f0 <pbuf_get_at+0xe>
  return 0;
 80087ec:	2000      	movs	r0, #0
}
 80087ee:	bd08      	pop	{r3, pc}
    return (u8_t)ret;
 80087f0:	b2c0      	uxtb	r0, r0
 80087f2:	e7fc      	b.n	80087ee <pbuf_get_at+0xc>

080087f4 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 80087f4:	b510      	push	{r4, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	4614      	mov	r4, r2
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 80087fa:	f10d 0206 	add.w	r2, sp, #6
 80087fe:	f7ff ff17 	bl	8008630 <pbuf_skip>

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8008802:	b130      	cbz	r0, 8008812 <pbuf_put_at+0x1e>
 8008804:	8941      	ldrh	r1, [r0, #10]
 8008806:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800880a:	4291      	cmp	r1, r2
 800880c:	d901      	bls.n	8008812 <pbuf_put_at+0x1e>
    ((u8_t *)q->payload)[q_idx] = data;
 800880e:	6843      	ldr	r3, [r0, #4]
 8008810:	549c      	strb	r4, [r3, r2]
  }
}
 8008812:	b002      	add	sp, #8
 8008814:	bd10      	pop	{r4, pc}
	...

08008818 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008818:	b410      	push	{r4}
  u8_t i;
  u16_t n = 0;
 800881a:	2400      	movs	r4, #0
 800881c:	e009      	b.n	8008832 <tcp_new_port+0x1a>
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800881e:	4b16      	ldr	r3, [pc, #88]	; (8008878 <tcp_new_port+0x60>)
 8008820:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008824:	801a      	strh	r2, [r3, #0]
 8008826:	e00d      	b.n	8008844 <tcp_new_port+0x2c>
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        n++;
 8008828:	3401      	adds	r4, #1
 800882a:	b2a4      	uxth	r4, r4
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800882c:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8008830:	d21f      	bcs.n	8008872 <tcp_new_port+0x5a>
  tcp_port++;
 8008832:	4a11      	ldr	r2, [pc, #68]	; (8008878 <tcp_new_port+0x60>)
 8008834:	8813      	ldrh	r3, [r2, #0]
 8008836:	3301      	adds	r3, #1
 8008838:	b29b      	uxth	r3, r3
 800883a:	8013      	strh	r3, [r2, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800883c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008840:	4293      	cmp	r3, r2
 8008842:	d0ec      	beq.n	800881e <tcp_new_port+0x6>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008844:	2000      	movs	r0, #0
 8008846:	2803      	cmp	r0, #3
 8008848:	d80e      	bhi.n	8008868 <tcp_new_port+0x50>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800884a:	4b0c      	ldr	r3, [pc, #48]	; (800887c <tcp_new_port+0x64>)
 800884c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	b133      	cbz	r3, 8008862 <tcp_new_port+0x4a>
      if (pcb->local_port == tcp_port) {
 8008854:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8008856:	4a08      	ldr	r2, [pc, #32]	; (8008878 <tcp_new_port+0x60>)
 8008858:	8812      	ldrh	r2, [r2, #0]
 800885a:	4291      	cmp	r1, r2
 800885c:	d0e4      	beq.n	8008828 <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800885e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008860:	e7f7      	b.n	8008852 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008862:	3001      	adds	r0, #1
 8008864:	b2c0      	uxtb	r0, r0
 8008866:	e7ee      	b.n	8008846 <tcp_new_port+0x2e>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008868:	4b03      	ldr	r3, [pc, #12]	; (8008878 <tcp_new_port+0x60>)
 800886a:	8818      	ldrh	r0, [r3, #0]
}
 800886c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008870:	4770      	bx	lr
          return 0;
 8008872:	2000      	movs	r0, #0
 8008874:	e7fa      	b.n	800886c <tcp_new_port+0x54>
 8008876:	bf00      	nop
 8008878:	20000010 	.word	0x20000010
 800887c:	08018ca8 	.word	0x08018ca8

08008880 <tcp_remove_listener>:
{
 8008880:	b538      	push	{r3, r4, r5, lr}
 8008882:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008884:	460d      	mov	r5, r1
 8008886:	b951      	cbnz	r1, 800889e <tcp_remove_listener+0x1e>
 8008888:	4b08      	ldr	r3, [pc, #32]	; (80088ac <tcp_remove_listener+0x2c>)
 800888a:	22ff      	movs	r2, #255	; 0xff
 800888c:	4908      	ldr	r1, [pc, #32]	; (80088b0 <tcp_remove_listener+0x30>)
 800888e:	4809      	ldr	r0, [pc, #36]	; (80088b4 <tcp_remove_listener+0x34>)
 8008890:	f00d f87e 	bl	8015990 <iprintf>
 8008894:	e003      	b.n	800889e <tcp_remove_listener+0x1e>
      pcb->listener = NULL;
 8008896:	2300      	movs	r3, #0
 8008898:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800889c:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800889e:	b124      	cbz	r4, 80088aa <tcp_remove_listener+0x2a>
    if (pcb->listener == lpcb) {
 80088a0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80088a4:	42ab      	cmp	r3, r5
 80088a6:	d1f9      	bne.n	800889c <tcp_remove_listener+0x1c>
 80088a8:	e7f5      	b.n	8008896 <tcp_remove_listener+0x16>
}
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	080185dc 	.word	0x080185dc
 80088b0:	0801860c 	.word	0x0801860c
 80088b4:	08016bb4 	.word	0x08016bb4

080088b8 <tcp_listen_closed>:
{
 80088b8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80088ba:	4605      	mov	r5, r0
 80088bc:	b128      	cbz	r0, 80088ca <tcp_listen_closed+0x12>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80088be:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d109      	bne.n	80088da <tcp_listen_closed+0x22>
{
 80088c6:	2401      	movs	r4, #1
 80088c8:	e017      	b.n	80088fa <tcp_listen_closed+0x42>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80088ca:	4b0d      	ldr	r3, [pc, #52]	; (8008900 <tcp_listen_closed+0x48>)
 80088cc:	f240 1211 	movw	r2, #273	; 0x111
 80088d0:	490c      	ldr	r1, [pc, #48]	; (8008904 <tcp_listen_closed+0x4c>)
 80088d2:	480d      	ldr	r0, [pc, #52]	; (8008908 <tcp_listen_closed+0x50>)
 80088d4:	f00d f85c 	bl	8015990 <iprintf>
 80088d8:	e7f1      	b.n	80088be <tcp_listen_closed+0x6>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80088da:	4b09      	ldr	r3, [pc, #36]	; (8008900 <tcp_listen_closed+0x48>)
 80088dc:	f44f 7289 	mov.w	r2, #274	; 0x112
 80088e0:	490a      	ldr	r1, [pc, #40]	; (800890c <tcp_listen_closed+0x54>)
 80088e2:	4809      	ldr	r0, [pc, #36]	; (8008908 <tcp_listen_closed+0x50>)
 80088e4:	f00d f854 	bl	8015990 <iprintf>
 80088e8:	e7ed      	b.n	80088c6 <tcp_listen_closed+0xe>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80088ea:	4b09      	ldr	r3, [pc, #36]	; (8008910 <tcp_listen_closed+0x58>)
 80088ec:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80088f0:	4629      	mov	r1, r5
 80088f2:	6818      	ldr	r0, [r3, #0]
 80088f4:	f7ff ffc4 	bl	8008880 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80088f8:	3401      	adds	r4, #1
 80088fa:	2c03      	cmp	r4, #3
 80088fc:	d9f5      	bls.n	80088ea <tcp_listen_closed+0x32>
}
 80088fe:	bd38      	pop	{r3, r4, r5, pc}
 8008900:	080185dc 	.word	0x080185dc
 8008904:	08018634 	.word	0x08018634
 8008908:	08016bb4 	.word	0x08016bb4
 800890c:	08018640 	.word	0x08018640
 8008910:	08018ca8 	.word	0x08018ca8

08008914 <tcp_free_listen>:
{
 8008914:	b510      	push	{r4, lr}
 8008916:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008918:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800891c:	2b01      	cmp	r3, #1
 800891e:	d004      	beq.n	800892a <tcp_free_listen+0x16>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008920:	4621      	mov	r1, r4
 8008922:	2002      	movs	r0, #2
 8008924:	f7fe ff40 	bl	80077a8 <memp_free>
}
 8008928:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800892a:	4b03      	ldr	r3, [pc, #12]	; (8008938 <tcp_free_listen+0x24>)
 800892c:	22df      	movs	r2, #223	; 0xdf
 800892e:	4903      	ldr	r1, [pc, #12]	; (800893c <tcp_free_listen+0x28>)
 8008930:	4803      	ldr	r0, [pc, #12]	; (8008940 <tcp_free_listen+0x2c>)
 8008932:	f00d f82d 	bl	8015990 <iprintf>
 8008936:	e7f3      	b.n	8008920 <tcp_free_listen+0xc>
 8008938:	080185dc 	.word	0x080185dc
 800893c:	08018658 	.word	0x08018658
 8008940:	08016bb4 	.word	0x08016bb4

08008944 <tcp_close_shutdown_fin>:
{
 8008944:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008946:	4605      	mov	r5, r0
 8008948:	b150      	cbz	r0, 8008960 <tcp_close_shutdown_fin+0x1c>
  switch (pcb->state) {
 800894a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800894e:	2b04      	cmp	r3, #4
 8008950:	d022      	beq.n	8008998 <tcp_close_shutdown_fin+0x54>
 8008952:	2b07      	cmp	r3, #7
 8008954:	d02a      	beq.n	80089ac <tcp_close_shutdown_fin+0x68>
 8008956:	2b03      	cmp	r3, #3
 8008958:	d00a      	beq.n	8008970 <tcp_close_shutdown_fin+0x2c>
 800895a:	2400      	movs	r4, #0
}
 800895c:	4620      	mov	r0, r4
 800895e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008960:	4b19      	ldr	r3, [pc, #100]	; (80089c8 <tcp_close_shutdown_fin+0x84>)
 8008962:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008966:	4919      	ldr	r1, [pc, #100]	; (80089cc <tcp_close_shutdown_fin+0x88>)
 8008968:	4819      	ldr	r0, [pc, #100]	; (80089d0 <tcp_close_shutdown_fin+0x8c>)
 800896a:	f00d f811 	bl	8015990 <iprintf>
 800896e:	e7ec      	b.n	800894a <tcp_close_shutdown_fin+0x6>
      err = tcp_send_fin(pcb);
 8008970:	4628      	mov	r0, r5
 8008972:	f004 fa07 	bl	800cd84 <tcp_send_fin>
      if (err == ERR_OK) {
 8008976:	4604      	mov	r4, r0
 8008978:	b910      	cbnz	r0, 8008980 <tcp_close_shutdown_fin+0x3c>
        pcb->state = FIN_WAIT_1;
 800897a:	2305      	movs	r3, #5
 800897c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if (err == ERR_OK) {
 8008980:	b1f4      	cbz	r4, 80089c0 <tcp_close_shutdown_fin+0x7c>
  } else if (err == ERR_MEM) {
 8008982:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008986:	d1e9      	bne.n	800895c <tcp_close_shutdown_fin+0x18>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008988:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 800898c:	f043 0308 	orr.w	r3, r3, #8
 8008990:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
    return ERR_OK;
 8008994:	2400      	movs	r4, #0
 8008996:	e7e1      	b.n	800895c <tcp_close_shutdown_fin+0x18>
      err = tcp_send_fin(pcb);
 8008998:	4628      	mov	r0, r5
 800899a:	f004 f9f3 	bl	800cd84 <tcp_send_fin>
      if (err == ERR_OK) {
 800899e:	4604      	mov	r4, r0
 80089a0:	2800      	cmp	r0, #0
 80089a2:	d1ed      	bne.n	8008980 <tcp_close_shutdown_fin+0x3c>
        pcb->state = FIN_WAIT_1;
 80089a4:	2305      	movs	r3, #5
 80089a6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 80089aa:	e7e9      	b.n	8008980 <tcp_close_shutdown_fin+0x3c>
      err = tcp_send_fin(pcb);
 80089ac:	4628      	mov	r0, r5
 80089ae:	f004 f9e9 	bl	800cd84 <tcp_send_fin>
      if (err == ERR_OK) {
 80089b2:	4604      	mov	r4, r0
 80089b4:	2800      	cmp	r0, #0
 80089b6:	d1e3      	bne.n	8008980 <tcp_close_shutdown_fin+0x3c>
        pcb->state = LAST_ACK;
 80089b8:	2309      	movs	r3, #9
 80089ba:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 80089be:	e7df      	b.n	8008980 <tcp_close_shutdown_fin+0x3c>
    tcp_output(pcb);
 80089c0:	4628      	mov	r0, r5
 80089c2:	f004 fb7b 	bl	800d0bc <tcp_output>
 80089c6:	e7c9      	b.n	800895c <tcp_close_shutdown_fin+0x18>
 80089c8:	080185dc 	.word	0x080185dc
 80089cc:	08018634 	.word	0x08018634
 80089d0:	08016bb4 	.word	0x08016bb4

080089d4 <tcp_handle_closepend>:
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80089d4:	4b0a      	ldr	r3, [pc, #40]	; (8008a00 <tcp_handle_closepend+0x2c>)
 80089d6:	6818      	ldr	r0, [r3, #0]

  while (pcb != NULL) {
 80089d8:	b188      	cbz	r0, 80089fe <tcp_handle_closepend+0x2a>
{
 80089da:	b510      	push	{r4, lr}
 80089dc:	e007      	b.n	80089ee <tcp_handle_closepend+0x1a>
    struct tcp_pcb *next = pcb->next;
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80089de:	f023 0308 	bic.w	r3, r3, #8
 80089e2:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
      tcp_close_shutdown_fin(pcb);
 80089e6:	f7ff ffad 	bl	8008944 <tcp_close_shutdown_fin>
{
 80089ea:	4620      	mov	r0, r4
  while (pcb != NULL) {
 80089ec:	b134      	cbz	r4, 80089fc <tcp_handle_closepend+0x28>
    struct tcp_pcb *next = pcb->next;
 80089ee:	6b44      	ldr	r4, [r0, #52]	; 0x34
    if (pcb->flags & TF_CLOSEPEND) {
 80089f0:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
 80089f4:	f013 0f08 	tst.w	r3, #8
 80089f8:	d0f7      	beq.n	80089ea <tcp_handle_closepend+0x16>
 80089fa:	e7f0      	b.n	80089de <tcp_handle_closepend+0xa>
    }
    pcb = next;
  }
}
 80089fc:	bd10      	pop	{r4, pc}
 80089fe:	4770      	bx	lr
 8008a00:	20007fac 	.word	0x20007fac

08008a04 <tcp_init>:
{
 8008a04:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008a06:	f00d f851 	bl	8015aac <rand>
 8008a0a:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8008a0e:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8008a12:	4b01      	ldr	r3, [pc, #4]	; (8008a18 <tcp_init+0x14>)
 8008a14:	8018      	strh	r0, [r3, #0]
}
 8008a16:	bd08      	pop	{r3, pc}
 8008a18:	20000010 	.word	0x20000010

08008a1c <tcp_free>:
{
 8008a1c:	b510      	push	{r4, lr}
 8008a1e:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008a20:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d004      	beq.n	8008a32 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 8008a28:	4621      	mov	r1, r4
 8008a2a:	2001      	movs	r0, #1
 8008a2c:	f7fe febc 	bl	80077a8 <memp_free>
}
 8008a30:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008a32:	4b03      	ldr	r3, [pc, #12]	; (8008a40 <tcp_free+0x24>)
 8008a34:	22d4      	movs	r2, #212	; 0xd4
 8008a36:	4903      	ldr	r1, [pc, #12]	; (8008a44 <tcp_free+0x28>)
 8008a38:	4803      	ldr	r0, [pc, #12]	; (8008a48 <tcp_free+0x2c>)
 8008a3a:	f00c ffa9 	bl	8015990 <iprintf>
 8008a3e:	e7f3      	b.n	8008a28 <tcp_free+0xc>
 8008a40:	080185dc 	.word	0x080185dc
 8008a44:	08018674 	.word	0x08018674
 8008a48:	08016bb4 	.word	0x08016bb4

08008a4c <tcp_bind>:
{
 8008a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a50:	b086      	sub	sp, #24
 8008a52:	4606      	mov	r6, r0
 8008a54:	4615      	mov	r5, r2
  if (ipaddr == NULL) {
 8008a56:	460c      	mov	r4, r1
 8008a58:	b161      	cbz	r1, 8008a74 <tcp_bind+0x28>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008a5a:	b16e      	cbz	r6, 8008a78 <tcp_bind+0x2c>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008a5c:	f896 703c 	ldrb.w	r7, [r6, #60]	; 0x3c
 8008a60:	b9a7      	cbnz	r7, 8008a8c <tcp_bind+0x40>
  if (IP_IS_V6(ipaddr) && ip6_addr_lacks_zone(ip_2_ip6(ipaddr), IP6_UNICAST)) {
 8008a62:	b114      	cbz	r4, 8008a6a <tcp_bind+0x1e>
 8008a64:	7d23      	ldrb	r3, [r4, #20]
 8008a66:	2b06      	cmp	r3, #6
 8008a68:	d01a      	beq.n	8008aa0 <tcp_bind+0x54>
  if (port == 0) {
 8008a6a:	2d00      	cmp	r5, #0
 8008a6c:	d059      	beq.n	8008b22 <tcp_bind+0xd6>
    for (i = 0; i < max_pcb_list; i++) {
 8008a6e:	f04f 0c00 	mov.w	ip, #0
 8008a72:	e12b      	b.n	8008ccc <tcp_bind+0x280>
    ipaddr = IP4_ADDR_ANY;
 8008a74:	4c9a      	ldr	r4, [pc, #616]	; (8008ce0 <tcp_bind+0x294>)
 8008a76:	e7f0      	b.n	8008a5a <tcp_bind+0xe>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008a78:	4b9a      	ldr	r3, [pc, #616]	; (8008ce4 <tcp_bind+0x298>)
 8008a7a:	f240 22a9 	movw	r2, #681	; 0x2a9
 8008a7e:	499a      	ldr	r1, [pc, #616]	; (8008ce8 <tcp_bind+0x29c>)
 8008a80:	489a      	ldr	r0, [pc, #616]	; (8008cec <tcp_bind+0x2a0>)
 8008a82:	f00c ff85 	bl	8015990 <iprintf>
 8008a86:	f06f 000f 	mvn.w	r0, #15
 8008a8a:	e07b      	b.n	8008b84 <tcp_bind+0x138>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008a8c:	4b95      	ldr	r3, [pc, #596]	; (8008ce4 <tcp_bind+0x298>)
 8008a8e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8008a92:	4997      	ldr	r1, [pc, #604]	; (8008cf0 <tcp_bind+0x2a4>)
 8008a94:	4895      	ldr	r0, [pc, #596]	; (8008cec <tcp_bind+0x2a0>)
 8008a96:	f00c ff7b 	bl	8015990 <iprintf>
 8008a9a:	f06f 0005 	mvn.w	r0, #5
 8008a9e:	e071      	b.n	8008b84 <tcp_bind+0x138>
  if (IP_IS_V6(ipaddr) && ip6_addr_lacks_zone(ip_2_ip6(ipaddr), IP6_UNICAST)) {
 8008aa0:	f894 8010 	ldrb.w	r8, [r4, #16]
 8008aa4:	f1b8 0f00 	cmp.w	r8, #0
 8008aa8:	d1df      	bne.n	8008a6a <tcp_bind+0x1e>
 8008aaa:	6822      	ldr	r2, [r4, #0]
 8008aac:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8008ab0:	0412      	lsls	r2, r2, #16
 8008ab2:	0c12      	lsrs	r2, r2, #16
 8008ab4:	f248 01fe 	movw	r1, #33022	; 0x80fe
 8008ab8:	428a      	cmp	r2, r1
 8008aba:	d1d6      	bne.n	8008a6a <tcp_bind+0x1e>
    ip_addr_copy(zoned_ipaddr, *ipaddr);
 8008abc:	f88d 3014 	strb.w	r3, [sp, #20]
 8008ac0:	6823      	ldr	r3, [r4, #0]
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	6863      	ldr	r3, [r4, #4]
 8008ac6:	9301      	str	r3, [sp, #4]
 8008ac8:	68a3      	ldr	r3, [r4, #8]
 8008aca:	9302      	str	r3, [sp, #8]
 8008acc:	68e3      	ldr	r3, [r4, #12]
 8008ace:	9303      	str	r3, [sp, #12]
 8008ad0:	7c23      	ldrb	r3, [r4, #16]
 8008ad2:	f88d 3010 	strb.w	r3, [sp, #16]
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
 8008ad6:	4669      	mov	r1, sp
 8008ad8:	4668      	mov	r0, sp
 8008ada:	f009 f88b 	bl	8011bf4 <ip6_route>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	b1e8      	cbz	r0, 8008b1e <tcp_bind+0xd2>
 8008ae2:	9b00      	ldr	r3, [sp, #0]
 8008ae4:	f24c 00ff 	movw	r0, #49407	; 0xc0ff
 8008ae8:	4018      	ands	r0, r3
 8008aea:	f248 01fe 	movw	r1, #33022	; 0x80fe
 8008aee:	4288      	cmp	r0, r1
 8008af0:	d00b      	beq.n	8008b0a <tcp_bind+0xbe>
 8008af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008af6:	041b      	lsls	r3, r3, #16
 8008af8:	0c1b      	lsrs	r3, r3, #16
 8008afa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008afe:	428b      	cmp	r3, r1
 8008b00:	d003      	beq.n	8008b0a <tcp_bind+0xbe>
 8008b02:	f240 21ff 	movw	r1, #767	; 0x2ff
 8008b06:	428b      	cmp	r3, r1
 8008b08:	d105      	bne.n	8008b16 <tcp_bind+0xca>
 8008b0a:	f892 80e2 	ldrb.w	r8, [r2, #226]	; 0xe2
 8008b0e:	f108 0801 	add.w	r8, r8, #1
 8008b12:	fa5f f888 	uxtb.w	r8, r8
 8008b16:	f88d 8010 	strb.w	r8, [sp, #16]
    ipaddr = &zoned_ipaddr;
 8008b1a:	466c      	mov	r4, sp
 8008b1c:	e7a5      	b.n	8008a6a <tcp_bind+0x1e>
 8008b1e:	466c      	mov	r4, sp
 8008b20:	e7a3      	b.n	8008a6a <tcp_bind+0x1e>
    port = tcp_new_port();
 8008b22:	f7ff fe79 	bl	8008818 <tcp_new_port>
    if (port == 0) {
 8008b26:	4605      	mov	r5, r0
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	f000 811c 	beq.w	8008d66 <tcp_bind+0x31a>
  if (!ip_addr_isany(ipaddr)
 8008b2e:	b15c      	cbz	r4, 8008b48 <tcp_bind+0xfc>
 8008b30:	7d23      	ldrb	r3, [r4, #20]
 8008b32:	2b06      	cmp	r3, #6
 8008b34:	f000 80e2 	beq.w	8008cfc <tcp_bind+0x2b0>
 8008b38:	2c00      	cmp	r4, #0
 8008b3a:	f000 80f5 	beq.w	8008d28 <tcp_bind+0x2dc>
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f040 80f3 	bne.w	8008d2c <tcp_bind+0x2e0>
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
 8008b46:	b91b      	cbnz	r3, 8008b50 <tcp_bind+0x104>
 8008b48:	7d22      	ldrb	r2, [r4, #20]
 8008b4a:	7d33      	ldrb	r3, [r6, #20]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d011      	beq.n	8008b74 <tcp_bind+0x128>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008b50:	b10e      	cbz	r6, 8008b56 <tcp_bind+0x10a>
 8008b52:	7d23      	ldrb	r3, [r4, #20]
 8008b54:	7533      	strb	r3, [r6, #20]
 8008b56:	b11c      	cbz	r4, 8008b60 <tcp_bind+0x114>
 8008b58:	7d23      	ldrb	r3, [r4, #20]
 8008b5a:	2b06      	cmp	r3, #6
 8008b5c:	f000 80e8 	beq.w	8008d30 <tcp_bind+0x2e4>
 8008b60:	2c00      	cmp	r4, #0
 8008b62:	f000 80fe 	beq.w	8008d62 <tcp_bind+0x316>
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	6033      	str	r3, [r6, #0]
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60f3      	str	r3, [r6, #12]
 8008b6e:	60b3      	str	r3, [r6, #8]
 8008b70:	6073      	str	r3, [r6, #4]
 8008b72:	7433      	strb	r3, [r6, #16]
  pcb->local_port = port;
 8008b74:	87f5      	strh	r5, [r6, #62]	; 0x3e
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008b76:	4b5f      	ldr	r3, [pc, #380]	; (8008cf4 <tcp_bind+0x2a8>)
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	6372      	str	r2, [r6, #52]	; 0x34
 8008b7c:	601e      	str	r6, [r3, #0]
 8008b7e:	f004 fd9f 	bl	800d6c0 <tcp_timer_needed>
  return ERR_OK;
 8008b82:	2000      	movs	r0, #0
}
 8008b84:	b006      	add	sp, #24
 8008b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008b8a:	2000      	movs	r0, #0
 8008b8c:	7d1a      	ldrb	r2, [r3, #20]
 8008b8e:	2a06      	cmp	r2, #6
 8008b90:	bf14      	ite	ne
 8008b92:	2100      	movne	r1, #0
 8008b94:	2101      	moveq	r1, #1
 8008b96:	4288      	cmp	r0, r1
 8008b98:	d00f      	beq.n	8008bba <tcp_bind+0x16e>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 8093 	beq.w	8008cc8 <tcp_bind+0x27c>
        if (cpcb->local_port == port) {
 8008ba2:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8008ba4:	42a9      	cmp	r1, r5
 8008ba6:	d1f8      	bne.n	8008b9a <tcp_bind+0x14e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008ba8:	2c00      	cmp	r4, #0
 8008baa:	d0ee      	beq.n	8008b8a <tcp_bind+0x13e>
 8008bac:	7d22      	ldrb	r2, [r4, #20]
 8008bae:	2a06      	cmp	r2, #6
 8008bb0:	d001      	beq.n	8008bb6 <tcp_bind+0x16a>
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	e7ea      	b.n	8008b8c <tcp_bind+0x140>
 8008bb6:	2001      	movs	r0, #1
 8008bb8:	e7e8      	b.n	8008b8c <tcp_bind+0x140>
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f000 80d6 	beq.w	8008d6c <tcp_bind+0x320>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008bc0:	2a06      	cmp	r2, #6
 8008bc2:	d023      	beq.n	8008c0c <tcp_bind+0x1c0>
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d03a      	beq.n	8008c3e <tcp_bind+0x1f2>
 8008bc8:	6819      	ldr	r1, [r3, #0]
 8008bca:	2900      	cmp	r1, #0
 8008bcc:	d139      	bne.n	8008c42 <tcp_bind+0x1f6>
 8008bce:	2101      	movs	r1, #1
 8008bd0:	2900      	cmp	r1, #0
 8008bd2:	f040 80ce 	bne.w	8008d72 <tcp_bind+0x326>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008bd6:	2c00      	cmp	r4, #0
 8008bd8:	f000 80ce 	beq.w	8008d78 <tcp_bind+0x32c>
                 ip_addr_isany(ipaddr) ||
 8008bdc:	7d21      	ldrb	r1, [r4, #20]
 8008bde:	2906      	cmp	r1, #6
 8008be0:	d031      	beq.n	8008c46 <tcp_bind+0x1fa>
 8008be2:	2c00      	cmp	r4, #0
 8008be4:	d048      	beq.n	8008c78 <tcp_bind+0x22c>
 8008be6:	6821      	ldr	r1, [r4, #0]
 8008be8:	2900      	cmp	r1, #0
 8008bea:	d147      	bne.n	8008c7c <tcp_bind+0x230>
 8008bec:	2101      	movs	r1, #1
                (ip_addr_isany(&cpcb->local_ip) ||
 8008bee:	2900      	cmp	r1, #0
 8008bf0:	f040 80c5 	bne.w	8008d7e <tcp_bind+0x332>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8008bf4:	7d21      	ldrb	r1, [r4, #20]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008bf6:	428a      	cmp	r2, r1
 8008bf8:	d1cf      	bne.n	8008b9a <tcp_bind+0x14e>
 8008bfa:	2a06      	cmp	r2, #6
 8008bfc:	d040      	beq.n	8008c80 <tcp_bind+0x234>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8008bfe:	6819      	ldr	r1, [r3, #0]
 8008c00:	6822      	ldr	r2, [r4, #0]
                 ip_addr_isany(ipaddr) ||
 8008c02:	4291      	cmp	r1, r2
 8008c04:	d1c9      	bne.n	8008b9a <tcp_bind+0x14e>
              return ERR_USE;
 8008c06:	f06f 0007 	mvn.w	r0, #7
 8008c0a:	e7bb      	b.n	8008b84 <tcp_bind+0x138>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008c0c:	b14b      	cbz	r3, 8008c22 <tcp_bind+0x1d6>
 8008c0e:	6819      	ldr	r1, [r3, #0]
 8008c10:	b949      	cbnz	r1, 8008c26 <tcp_bind+0x1da>
 8008c12:	6859      	ldr	r1, [r3, #4]
 8008c14:	b969      	cbnz	r1, 8008c32 <tcp_bind+0x1e6>
 8008c16:	6899      	ldr	r1, [r3, #8]
 8008c18:	b969      	cbnz	r1, 8008c36 <tcp_bind+0x1ea>
 8008c1a:	68d9      	ldr	r1, [r3, #12]
 8008c1c:	b169      	cbz	r1, 8008c3a <tcp_bind+0x1ee>
 8008c1e:	2100      	movs	r1, #0
 8008c20:	e002      	b.n	8008c28 <tcp_bind+0x1dc>
 8008c22:	2101      	movs	r1, #1
 8008c24:	e000      	b.n	8008c28 <tcp_bind+0x1dc>
 8008c26:	2100      	movs	r1, #0
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008c28:	2900      	cmp	r1, #0
 8008c2a:	d0d4      	beq.n	8008bd6 <tcp_bind+0x18a>
              return ERR_USE;
 8008c2c:	f06f 0007 	mvn.w	r0, #7
 8008c30:	e7a8      	b.n	8008b84 <tcp_bind+0x138>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008c32:	2100      	movs	r1, #0
 8008c34:	e7f8      	b.n	8008c28 <tcp_bind+0x1dc>
 8008c36:	2100      	movs	r1, #0
 8008c38:	e7f6      	b.n	8008c28 <tcp_bind+0x1dc>
 8008c3a:	2101      	movs	r1, #1
 8008c3c:	e7f4      	b.n	8008c28 <tcp_bind+0x1dc>
 8008c3e:	2101      	movs	r1, #1
 8008c40:	e7c6      	b.n	8008bd0 <tcp_bind+0x184>
 8008c42:	2100      	movs	r1, #0
 8008c44:	e7c4      	b.n	8008bd0 <tcp_bind+0x184>
                 ip_addr_isany(ipaddr) ||
 8008c46:	b14c      	cbz	r4, 8008c5c <tcp_bind+0x210>
 8008c48:	6821      	ldr	r1, [r4, #0]
 8008c4a:	b949      	cbnz	r1, 8008c60 <tcp_bind+0x214>
 8008c4c:	6861      	ldr	r1, [r4, #4]
 8008c4e:	b969      	cbnz	r1, 8008c6c <tcp_bind+0x220>
 8008c50:	68a1      	ldr	r1, [r4, #8]
 8008c52:	b969      	cbnz	r1, 8008c70 <tcp_bind+0x224>
 8008c54:	68e1      	ldr	r1, [r4, #12]
 8008c56:	b169      	cbz	r1, 8008c74 <tcp_bind+0x228>
 8008c58:	2100      	movs	r1, #0
 8008c5a:	e002      	b.n	8008c62 <tcp_bind+0x216>
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	e000      	b.n	8008c62 <tcp_bind+0x216>
 8008c60:	2100      	movs	r1, #0
                (ip_addr_isany(&cpcb->local_ip) ||
 8008c62:	2900      	cmp	r1, #0
 8008c64:	d0c6      	beq.n	8008bf4 <tcp_bind+0x1a8>
              return ERR_USE;
 8008c66:	f06f 0007 	mvn.w	r0, #7
 8008c6a:	e78b      	b.n	8008b84 <tcp_bind+0x138>
                 ip_addr_isany(ipaddr) ||
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	e7f8      	b.n	8008c62 <tcp_bind+0x216>
 8008c70:	2100      	movs	r1, #0
 8008c72:	e7f6      	b.n	8008c62 <tcp_bind+0x216>
 8008c74:	2101      	movs	r1, #1
 8008c76:	e7f4      	b.n	8008c62 <tcp_bind+0x216>
 8008c78:	2101      	movs	r1, #1
 8008c7a:	e7b8      	b.n	8008bee <tcp_bind+0x1a2>
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	e7b6      	b.n	8008bee <tcp_bind+0x1a2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8008c80:	6819      	ldr	r1, [r3, #0]
 8008c82:	6822      	ldr	r2, [r4, #0]
 8008c84:	4291      	cmp	r1, r2
 8008c86:	d005      	beq.n	8008c94 <tcp_bind+0x248>
 8008c88:	2200      	movs	r2, #0
                 ip_addr_isany(ipaddr) ||
 8008c8a:	2a00      	cmp	r2, #0
 8008c8c:	d085      	beq.n	8008b9a <tcp_bind+0x14e>
              return ERR_USE;
 8008c8e:	f06f 0007 	mvn.w	r0, #7
 8008c92:	e777      	b.n	8008b84 <tcp_bind+0x138>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8008c94:	6859      	ldr	r1, [r3, #4]
 8008c96:	6862      	ldr	r2, [r4, #4]
 8008c98:	4291      	cmp	r1, r2
 8008c9a:	d001      	beq.n	8008ca0 <tcp_bind+0x254>
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	e7f4      	b.n	8008c8a <tcp_bind+0x23e>
 8008ca0:	6899      	ldr	r1, [r3, #8]
 8008ca2:	68a2      	ldr	r2, [r4, #8]
 8008ca4:	4291      	cmp	r1, r2
 8008ca6:	d001      	beq.n	8008cac <tcp_bind+0x260>
 8008ca8:	2200      	movs	r2, #0
 8008caa:	e7ee      	b.n	8008c8a <tcp_bind+0x23e>
 8008cac:	68d9      	ldr	r1, [r3, #12]
 8008cae:	68e2      	ldr	r2, [r4, #12]
 8008cb0:	4291      	cmp	r1, r2
 8008cb2:	d001      	beq.n	8008cb8 <tcp_bind+0x26c>
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	e7e8      	b.n	8008c8a <tcp_bind+0x23e>
 8008cb8:	7c19      	ldrb	r1, [r3, #16]
 8008cba:	7c22      	ldrb	r2, [r4, #16]
 8008cbc:	4291      	cmp	r1, r2
 8008cbe:	d001      	beq.n	8008cc4 <tcp_bind+0x278>
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	e7e2      	b.n	8008c8a <tcp_bind+0x23e>
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	e7e0      	b.n	8008c8a <tcp_bind+0x23e>
    for (i = 0; i < max_pcb_list; i++) {
 8008cc8:	f10c 0c01 	add.w	ip, ip, #1
 8008ccc:	f1bc 0f03 	cmp.w	ip, #3
 8008cd0:	f73f af2d 	bgt.w	8008b2e <tcp_bind+0xe2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008cd4:	4b08      	ldr	r3, [pc, #32]	; (8008cf8 <tcp_bind+0x2ac>)
 8008cd6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	e75e      	b.n	8008b9c <tcp_bind+0x150>
 8008cde:	bf00      	nop
 8008ce0:	0801a4d4 	.word	0x0801a4d4
 8008ce4:	080185dc 	.word	0x080185dc
 8008ce8:	08018688 	.word	0x08018688
 8008cec:	08016bb4 	.word	0x08016bb4
 8008cf0:	080186a0 	.word	0x080186a0
 8008cf4:	20007fb8 	.word	0x20007fb8
 8008cf8:	08018ca8 	.word	0x08018ca8
  if (!ip_addr_isany(ipaddr)
 8008cfc:	b14c      	cbz	r4, 8008d12 <tcp_bind+0x2c6>
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	b94b      	cbnz	r3, 8008d16 <tcp_bind+0x2ca>
 8008d02:	6863      	ldr	r3, [r4, #4]
 8008d04:	b963      	cbnz	r3, 8008d20 <tcp_bind+0x2d4>
 8008d06:	68a3      	ldr	r3, [r4, #8]
 8008d08:	b963      	cbnz	r3, 8008d24 <tcp_bind+0x2d8>
 8008d0a:	68e3      	ldr	r3, [r4, #12]
 8008d0c:	b123      	cbz	r3, 8008d18 <tcp_bind+0x2cc>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e002      	b.n	8008d18 <tcp_bind+0x2cc>
 8008d12:	2300      	movs	r3, #0
 8008d14:	e000      	b.n	8008d18 <tcp_bind+0x2cc>
 8008d16:	2301      	movs	r3, #1
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f47f af19 	bne.w	8008b50 <tcp_bind+0x104>
 8008d1e:	e713      	b.n	8008b48 <tcp_bind+0xfc>
 8008d20:	2301      	movs	r3, #1
 8008d22:	e7f9      	b.n	8008d18 <tcp_bind+0x2cc>
 8008d24:	2301      	movs	r3, #1
 8008d26:	e7f7      	b.n	8008d18 <tcp_bind+0x2cc>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	e70c      	b.n	8008b46 <tcp_bind+0xfa>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e70a      	b.n	8008b46 <tcp_bind+0xfa>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008d30:	4623      	mov	r3, r4
 8008d32:	b174      	cbz	r4, 8008d52 <tcp_bind+0x306>
 8008d34:	6822      	ldr	r2, [r4, #0]
 8008d36:	6032      	str	r2, [r6, #0]
 8008d38:	b16b      	cbz	r3, 8008d56 <tcp_bind+0x30a>
 8008d3a:	6862      	ldr	r2, [r4, #4]
 8008d3c:	6072      	str	r2, [r6, #4]
 8008d3e:	b163      	cbz	r3, 8008d5a <tcp_bind+0x30e>
 8008d40:	68a2      	ldr	r2, [r4, #8]
 8008d42:	60b2      	str	r2, [r6, #8]
 8008d44:	b15b      	cbz	r3, 8008d5e <tcp_bind+0x312>
 8008d46:	68e2      	ldr	r2, [r4, #12]
 8008d48:	60f2      	str	r2, [r6, #12]
 8008d4a:	b103      	cbz	r3, 8008d4e <tcp_bind+0x302>
 8008d4c:	7c27      	ldrb	r7, [r4, #16]
 8008d4e:	7437      	strb	r7, [r6, #16]
 8008d50:	e710      	b.n	8008b74 <tcp_bind+0x128>
 8008d52:	2200      	movs	r2, #0
 8008d54:	e7ef      	b.n	8008d36 <tcp_bind+0x2ea>
 8008d56:	2200      	movs	r2, #0
 8008d58:	e7f0      	b.n	8008d3c <tcp_bind+0x2f0>
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	e7f1      	b.n	8008d42 <tcp_bind+0x2f6>
 8008d5e:	2200      	movs	r2, #0
 8008d60:	e7f2      	b.n	8008d48 <tcp_bind+0x2fc>
 8008d62:	2300      	movs	r3, #0
 8008d64:	e700      	b.n	8008b68 <tcp_bind+0x11c>
      return ERR_BUF;
 8008d66:	f06f 0001 	mvn.w	r0, #1
 8008d6a:	e70b      	b.n	8008b84 <tcp_bind+0x138>
              return ERR_USE;
 8008d6c:	f06f 0007 	mvn.w	r0, #7
 8008d70:	e708      	b.n	8008b84 <tcp_bind+0x138>
 8008d72:	f06f 0007 	mvn.w	r0, #7
 8008d76:	e705      	b.n	8008b84 <tcp_bind+0x138>
 8008d78:	f06f 0007 	mvn.w	r0, #7
 8008d7c:	e702      	b.n	8008b84 <tcp_bind+0x138>
 8008d7e:	f06f 0007 	mvn.w	r0, #7
 8008d82:	e6ff      	b.n	8008b84 <tcp_bind+0x138>

08008d84 <tcp_listen_with_backlog_and_err>:
{
 8008d84:	b570      	push	{r4, r5, r6, lr}
 8008d86:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008d88:	4605      	mov	r5, r0
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d041      	beq.n	8008e12 <tcp_listen_with_backlog_and_err+0x8e>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008d8e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d148      	bne.n	8008e28 <tcp_listen_with_backlog_and_err+0xa4>
  if (pcb->state == LISTEN) {
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d074      	beq.n	8008e84 <tcp_listen_with_backlog_and_err+0x100>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008d9a:	2002      	movs	r0, #2
 8008d9c:	f7fe fcea 	bl	8007774 <memp_malloc>
  if (lpcb == NULL) {
 8008da0:	4604      	mov	r4, r0
 8008da2:	2800      	cmp	r0, #0
 8008da4:	d072      	beq.n	8008e8c <tcp_listen_with_backlog_and_err+0x108>
  lpcb->callback_arg = pcb->callback_arg;
 8008da6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008da8:	6383      	str	r3, [r0, #56]	; 0x38
  lpcb->local_port = pcb->local_port;
 8008daa:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
 8008dac:	87c3      	strh	r3, [r0, #62]	; 0x3e
  lpcb->state = LISTEN;
 8008dae:	2301      	movs	r3, #1
 8008db0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  lpcb->prio = pcb->prio;
 8008db4:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8008db8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  lpcb->so_options = pcb->so_options;
 8008dbc:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 8008dc0:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  lpcb->ttl = pcb->ttl;
 8008dca:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 8008dce:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
  lpcb->tos = pcb->tos;
 8008dd2:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
 8008dd6:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
 8008dda:	7d2b      	ldrb	r3, [r5, #20]
 8008ddc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008de0:	7503      	strb	r3, [r0, #20]
 8008de2:	7d2b      	ldrb	r3, [r5, #20]
 8008de4:	2b06      	cmp	r3, #6
 8008de6:	d02a      	beq.n	8008e3e <tcp_listen_with_backlog_and_err+0xba>
 8008de8:	682b      	ldr	r3, [r5, #0]
 8008dea:	6003      	str	r3, [r0, #0]
 8008dec:	2300      	movs	r3, #0
 8008dee:	60c3      	str	r3, [r0, #12]
 8008df0:	6083      	str	r3, [r0, #8]
 8008df2:	6043      	str	r3, [r0, #4]
 8008df4:	7403      	strb	r3, [r0, #16]
  if (pcb->local_port != 0) {
 8008df6:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d033      	beq.n	8008e64 <tcp_listen_with_backlog_and_err+0xe0>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008dfc:	4b25      	ldr	r3, [pc, #148]	; (8008e94 <tcp_listen_with_backlog_and_err+0x110>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	42ab      	cmp	r3, r5
 8008e02:	d027      	beq.n	8008e54 <tcp_listen_with_backlog_and_err+0xd0>
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d02b      	beq.n	8008e60 <tcp_listen_with_backlog_and_err+0xdc>
 8008e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e0a:	42aa      	cmp	r2, r5
 8008e0c:	d026      	beq.n	8008e5c <tcp_listen_with_backlog_and_err+0xd8>
 8008e0e:	4613      	mov	r3, r2
 8008e10:	e7f8      	b.n	8008e04 <tcp_listen_with_backlog_and_err+0x80>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008e12:	4b21      	ldr	r3, [pc, #132]	; (8008e98 <tcp_listen_with_backlog_and_err+0x114>)
 8008e14:	f240 3259 	movw	r2, #857	; 0x359
 8008e18:	4920      	ldr	r1, [pc, #128]	; (8008e9c <tcp_listen_with_backlog_and_err+0x118>)
 8008e1a:	4821      	ldr	r0, [pc, #132]	; (8008ea0 <tcp_listen_with_backlog_and_err+0x11c>)
 8008e1c:	f00c fdb8 	bl	8015990 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 8008e20:	462c      	mov	r4, r5
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008e22:	f06f 030f 	mvn.w	r3, #15
 8008e26:	e029      	b.n	8008e7c <tcp_listen_with_backlog_and_err+0xf8>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008e28:	4b1b      	ldr	r3, [pc, #108]	; (8008e98 <tcp_listen_with_backlog_and_err+0x114>)
 8008e2a:	f240 325a 	movw	r2, #858	; 0x35a
 8008e2e:	491d      	ldr	r1, [pc, #116]	; (8008ea4 <tcp_listen_with_backlog_and_err+0x120>)
 8008e30:	481b      	ldr	r0, [pc, #108]	; (8008ea0 <tcp_listen_with_backlog_and_err+0x11c>)
 8008e32:	f00c fdad 	bl	8015990 <iprintf>
 8008e36:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 8008e3a:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008e3c:	e01e      	b.n	8008e7c <tcp_listen_with_backlog_and_err+0xf8>
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008e3e:	682b      	ldr	r3, [r5, #0]
 8008e40:	6003      	str	r3, [r0, #0]
 8008e42:	686b      	ldr	r3, [r5, #4]
 8008e44:	6043      	str	r3, [r0, #4]
 8008e46:	68ab      	ldr	r3, [r5, #8]
 8008e48:	6083      	str	r3, [r0, #8]
 8008e4a:	68eb      	ldr	r3, [r5, #12]
 8008e4c:	60c3      	str	r3, [r0, #12]
 8008e4e:	7c2b      	ldrb	r3, [r5, #16]
 8008e50:	7403      	strb	r3, [r0, #16]
 8008e52:	e7d0      	b.n	8008df6 <tcp_listen_with_backlog_and_err+0x72>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e56:	4b0f      	ldr	r3, [pc, #60]	; (8008e94 <tcp_listen_with_backlog_and_err+0x110>)
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	e001      	b.n	8008e60 <tcp_listen_with_backlog_and_err+0xdc>
 8008e5c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8008e5e:	635a      	str	r2, [r3, #52]	; 0x34
 8008e60:	2300      	movs	r3, #0
 8008e62:	636b      	str	r3, [r5, #52]	; 0x34
  tcp_free(pcb);
 8008e64:	4628      	mov	r0, r5
 8008e66:	f7ff fdd9 	bl	8008a1c <tcp_free>
  lpcb->accept = tcp_accept_null;
 8008e6a:	4b0f      	ldr	r3, [pc, #60]	; (8008ea8 <tcp_listen_with_backlog_and_err+0x124>)
 8008e6c:	6423      	str	r3, [r4, #64]	; 0x40
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008e6e:	4b0f      	ldr	r3, [pc, #60]	; (8008eac <tcp_listen_with_backlog_and_err+0x128>)
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	6362      	str	r2, [r4, #52]	; 0x34
 8008e74:	601c      	str	r4, [r3, #0]
 8008e76:	f004 fc23 	bl	800d6c0 <tcp_timer_needed>
  res = ERR_OK;
 8008e7a:	2300      	movs	r3, #0
  if (err != NULL) {
 8008e7c:	b106      	cbz	r6, 8008e80 <tcp_listen_with_backlog_and_err+0xfc>
    *err = res;
 8008e7e:	7033      	strb	r3, [r6, #0]
}
 8008e80:	4620      	mov	r0, r4
 8008e82:	bd70      	pop	{r4, r5, r6, pc}
    lpcb = (struct tcp_pcb_listen *)pcb;
 8008e84:	4604      	mov	r4, r0
    res = ERR_ALREADY;
 8008e86:	f06f 0308 	mvn.w	r3, #8
 8008e8a:	e7f7      	b.n	8008e7c <tcp_listen_with_backlog_and_err+0xf8>
    res = ERR_MEM;
 8008e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e90:	e7f4      	b.n	8008e7c <tcp_listen_with_backlog_and_err+0xf8>
 8008e92:	bf00      	nop
 8008e94:	20007fb8 	.word	0x20007fb8
 8008e98:	080185dc 	.word	0x080185dc
 8008e9c:	080186c8 	.word	0x080186c8
 8008ea0:	08016bb4 	.word	0x08016bb4
 8008ea4:	080186f8 	.word	0x080186f8
 8008ea8:	08009495 	.word	0x08009495
 8008eac:	20007fb4 	.word	0x20007fb4

08008eb0 <tcp_listen_with_backlog>:
{
 8008eb0:	b508      	push	{r3, lr}
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f7ff ff66 	bl	8008d84 <tcp_listen_with_backlog_and_err>
}
 8008eb8:	bd08      	pop	{r3, pc}
	...

08008ebc <tcp_update_rcv_ann_wnd>:
{
 8008ebc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	b198      	cbz	r0, 8008eea <tcp_update_rcv_ann_wnd+0x2e>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008ec2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008ec4:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8008ec8:	1868      	adds	r0, r5, r1
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008eca:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8008ecc:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8008ed0:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008ed4:	bf94      	ite	ls
 8008ed6:	18d3      	addls	r3, r2, r3
 8008ed8:	f502 6386 	addhi.w	r3, r2, #1072	; 0x430
 8008edc:	1ac3      	subs	r3, r0, r3
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	db0b      	blt.n	8008efa <tcp_update_rcv_ann_wnd+0x3e>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008ee2:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008ee6:	1a80      	subs	r0, r0, r2
}
 8008ee8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008eea:	4b0f      	ldr	r3, [pc, #60]	; (8008f28 <tcp_update_rcv_ann_wnd+0x6c>)
 8008eec:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008ef0:	490e      	ldr	r1, [pc, #56]	; (8008f2c <tcp_update_rcv_ann_wnd+0x70>)
 8008ef2:	480f      	ldr	r0, [pc, #60]	; (8008f30 <tcp_update_rcv_ann_wnd+0x74>)
 8008ef4:	f00c fd4c 	bl	8015990 <iprintf>
 8008ef8:	e7e3      	b.n	8008ec2 <tcp_update_rcv_ann_wnd+0x6>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008efa:	1aab      	subs	r3, r5, r2
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	dd04      	ble.n	8008f0a <tcp_update_rcv_ann_wnd+0x4e>
      pcb->rcv_ann_wnd = 0;
 8008f00:	2300      	movs	r3, #0
 8008f02:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    return 0;
 8008f06:	2000      	movs	r0, #0
 8008f08:	e7ee      	b.n	8008ee8 <tcp_update_rcv_ann_wnd+0x2c>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008f0a:	1b55      	subs	r5, r2, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008f0c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008f10:	d202      	bcs.n	8008f18 <tcp_update_rcv_ann_wnd+0x5c>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008f12:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 8008f16:	e7f6      	b.n	8008f06 <tcp_update_rcv_ann_wnd+0x4a>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008f18:	4b03      	ldr	r3, [pc, #12]	; (8008f28 <tcp_update_rcv_ann_wnd+0x6c>)
 8008f1a:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008f1e:	4905      	ldr	r1, [pc, #20]	; (8008f34 <tcp_update_rcv_ann_wnd+0x78>)
 8008f20:	4803      	ldr	r0, [pc, #12]	; (8008f30 <tcp_update_rcv_ann_wnd+0x74>)
 8008f22:	f00c fd35 	bl	8015990 <iprintf>
 8008f26:	e7f4      	b.n	8008f12 <tcp_update_rcv_ann_wnd+0x56>
 8008f28:	080185dc 	.word	0x080185dc
 8008f2c:	08018730 	.word	0x08018730
 8008f30:	08016bb4 	.word	0x08016bb4
 8008f34:	08018754 	.word	0x08018754

08008f38 <tcp_recved>:
{
 8008f38:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008f3a:	b1c8      	cbz	r0, 8008f70 <tcp_recved+0x38>
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008f40:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d01b      	beq.n	8008f80 <tcp_recved+0x48>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008f48:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8008f4c:	1919      	adds	r1, r3, r4
 8008f4e:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008f50:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 8008f54:	d801      	bhi.n	8008f5a <tcp_recved+0x22>
 8008f56:	428b      	cmp	r3, r1
 8008f58:	d91a      	bls.n	8008f90 <tcp_recved+0x58>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008f5a:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8008f5e:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008f62:	4628      	mov	r0, r5
 8008f64:	f7ff ffaa 	bl	8008ebc <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008f68:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8008f6c:	d213      	bcs.n	8008f96 <tcp_recved+0x5e>
}
 8008f6e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008f70:	4b0e      	ldr	r3, [pc, #56]	; (8008fac <tcp_recved+0x74>)
 8008f72:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008f76:	490e      	ldr	r1, [pc, #56]	; (8008fb0 <tcp_recved+0x78>)
 8008f78:	480e      	ldr	r0, [pc, #56]	; (8008fb4 <tcp_recved+0x7c>)
 8008f7a:	f00c fd09 	bl	8015990 <iprintf>
 8008f7e:	e7f6      	b.n	8008f6e <tcp_recved+0x36>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008f80:	4b0a      	ldr	r3, [pc, #40]	; (8008fac <tcp_recved+0x74>)
 8008f82:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008f86:	490c      	ldr	r1, [pc, #48]	; (8008fb8 <tcp_recved+0x80>)
 8008f88:	480a      	ldr	r0, [pc, #40]	; (8008fb4 <tcp_recved+0x7c>)
 8008f8a:	f00c fd01 	bl	8015990 <iprintf>
 8008f8e:	e7db      	b.n	8008f48 <tcp_recved+0x10>
    pcb->rcv_wnd = rcv_wnd;
 8008f90:	f8a5 1050 	strh.w	r1, [r5, #80]	; 0x50
 8008f94:	e7e5      	b.n	8008f62 <tcp_recved+0x2a>
    tcp_ack_now(pcb);
 8008f96:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 8008f9a:	f043 0302 	orr.w	r3, r3, #2
 8008f9e:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
    tcp_output(pcb);
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f004 f88a 	bl	800d0bc <tcp_output>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
 8008fa8:	e7e1      	b.n	8008f6e <tcp_recved+0x36>
 8008faa:	bf00      	nop
 8008fac:	080185dc 	.word	0x080185dc
 8008fb0:	08018770 	.word	0x08018770
 8008fb4:	08016bb4 	.word	0x08016bb4
 8008fb8:	08018788 	.word	0x08018788

08008fbc <tcp_seg_free>:
  if (seg != NULL) {
 8008fbc:	b150      	cbz	r0, 8008fd4 <tcp_seg_free+0x18>
{
 8008fbe:	b510      	push	{r4, lr}
 8008fc0:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8008fc2:	6840      	ldr	r0, [r0, #4]
 8008fc4:	b108      	cbz	r0, 8008fca <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8008fc6:	f7ff f893 	bl	80080f0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8008fca:	4621      	mov	r1, r4
 8008fcc:	2003      	movs	r0, #3
 8008fce:	f7fe fbeb 	bl	80077a8 <memp_free>
}
 8008fd2:	bd10      	pop	{r4, pc}
 8008fd4:	4770      	bx	lr

08008fd6 <tcp_segs_free>:
  while (seg != NULL) {
 8008fd6:	b138      	cbz	r0, 8008fe8 <tcp_segs_free+0x12>
{
 8008fd8:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 8008fda:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8008fdc:	f7ff ffee 	bl	8008fbc <tcp_seg_free>
    seg = next;
 8008fe0:	4620      	mov	r0, r4
  while (seg != NULL) {
 8008fe2:	2c00      	cmp	r4, #0
 8008fe4:	d1f9      	bne.n	8008fda <tcp_segs_free+0x4>
}
 8008fe6:	bd10      	pop	{r4, pc}
 8008fe8:	4770      	bx	lr
	...

08008fec <tcp_setprio>:
{
 8008fec:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8008fee:	b110      	cbz	r0, 8008ff6 <tcp_setprio+0xa>
  pcb->prio = prio;
 8008ff0:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
}
 8008ff4:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8008ff6:	4b04      	ldr	r3, [pc, #16]	; (8009008 <tcp_setprio+0x1c>)
 8008ff8:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8008ffc:	4903      	ldr	r1, [pc, #12]	; (800900c <tcp_setprio+0x20>)
 8008ffe:	4804      	ldr	r0, [pc, #16]	; (8009010 <tcp_setprio+0x24>)
 8009000:	f00c fcc6 	bl	8015990 <iprintf>
 8009004:	e7f6      	b.n	8008ff4 <tcp_setprio+0x8>
 8009006:	bf00      	nop
 8009008:	080185dc 	.word	0x080185dc
 800900c:	080187b0 	.word	0x080187b0
 8009010:	08016bb4 	.word	0x08016bb4

08009014 <tcp_seg_copy>:
{
 8009014:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009016:	4605      	mov	r5, r0
 8009018:	b198      	cbz	r0, 8009042 <tcp_seg_copy+0x2e>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800901a:	2003      	movs	r0, #3
 800901c:	f7fe fbaa 	bl	8007774 <memp_malloc>
  if (cseg == NULL) {
 8009020:	4604      	mov	r4, r0
 8009022:	b160      	cbz	r0, 800903e <tcp_seg_copy+0x2a>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009024:	682b      	ldr	r3, [r5, #0]
 8009026:	6868      	ldr	r0, [r5, #4]
 8009028:	68a9      	ldr	r1, [r5, #8]
 800902a:	68ea      	ldr	r2, [r5, #12]
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	6060      	str	r0, [r4, #4]
 8009030:	60a1      	str	r1, [r4, #8]
 8009032:	60e2      	str	r2, [r4, #12]
 8009034:	692b      	ldr	r3, [r5, #16]
 8009036:	6123      	str	r3, [r4, #16]
  pbuf_ref(cseg->p);
 8009038:	6860      	ldr	r0, [r4, #4]
 800903a:	f7ff f9c5 	bl	80083c8 <pbuf_ref>
}
 800903e:	4620      	mov	r0, r4
 8009040:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009042:	4b04      	ldr	r3, [pc, #16]	; (8009054 <tcp_seg_copy+0x40>)
 8009044:	f240 6282 	movw	r2, #1666	; 0x682
 8009048:	4903      	ldr	r1, [pc, #12]	; (8009058 <tcp_seg_copy+0x44>)
 800904a:	4804      	ldr	r0, [pc, #16]	; (800905c <tcp_seg_copy+0x48>)
 800904c:	f00c fca0 	bl	8015990 <iprintf>
 8009050:	e7e3      	b.n	800901a <tcp_seg_copy+0x6>
 8009052:	bf00      	nop
 8009054:	080185dc 	.word	0x080185dc
 8009058:	080187cc 	.word	0x080187cc
 800905c:	08016bb4 	.word	0x08016bb4

08009060 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8009060:	b100      	cbz	r0, 8009064 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8009062:	6381      	str	r1, [r0, #56]	; 0x38
  }
}
 8009064:	4770      	bx	lr
	...

08009068 <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009068:	b188      	cbz	r0, 800908e <tcp_recv+0x26>
{
 800906a:	b538      	push	{r3, r4, r5, lr}
 800906c:	460c      	mov	r4, r1
 800906e:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009070:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009074:	2b01      	cmp	r3, #1
 8009076:	d002      	beq.n	800907e <tcp_recv+0x16>
    pcb->recv = recv;
 8009078:	f8c5 40ac 	str.w	r4, [r5, #172]	; 0xac
  }
}
 800907c:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800907e:	4b04      	ldr	r3, [pc, #16]	; (8009090 <tcp_recv+0x28>)
 8009080:	f240 72df 	movw	r2, #2015	; 0x7df
 8009084:	4903      	ldr	r1, [pc, #12]	; (8009094 <tcp_recv+0x2c>)
 8009086:	4804      	ldr	r0, [pc, #16]	; (8009098 <tcp_recv+0x30>)
 8009088:	f00c fc82 	bl	8015990 <iprintf>
 800908c:	e7f4      	b.n	8009078 <tcp_recv+0x10>
 800908e:	4770      	bx	lr
 8009090:	080185dc 	.word	0x080185dc
 8009094:	080187e8 	.word	0x080187e8
 8009098:	08016bb4 	.word	0x08016bb4

0800909c <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800909c:	b188      	cbz	r0, 80090c2 <tcp_sent+0x26>
{
 800909e:	b538      	push	{r3, r4, r5, lr}
 80090a0:	460c      	mov	r4, r1
 80090a2:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80090a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d002      	beq.n	80090b2 <tcp_sent+0x16>
    pcb->sent = sent;
 80090ac:	f8c5 40a8 	str.w	r4, [r5, #168]	; 0xa8
  }
}
 80090b0:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80090b2:	4b04      	ldr	r3, [pc, #16]	; (80090c4 <tcp_sent+0x28>)
 80090b4:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80090b8:	4903      	ldr	r1, [pc, #12]	; (80090c8 <tcp_sent+0x2c>)
 80090ba:	4804      	ldr	r0, [pc, #16]	; (80090cc <tcp_sent+0x30>)
 80090bc:	f00c fc68 	bl	8015990 <iprintf>
 80090c0:	e7f4      	b.n	80090ac <tcp_sent+0x10>
 80090c2:	4770      	bx	lr
 80090c4:	080185dc 	.word	0x080185dc
 80090c8:	08018810 	.word	0x08018810
 80090cc:	08016bb4 	.word	0x08016bb4

080090d0 <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80090d0:	b188      	cbz	r0, 80090f6 <tcp_err+0x26>
{
 80090d2:	b538      	push	{r3, r4, r5, lr}
 80090d4:	460c      	mov	r4, r1
 80090d6:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80090d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d002      	beq.n	80090e6 <tcp_err+0x16>
    pcb->errf = err;
 80090e0:	f8c5 40b8 	str.w	r4, [r5, #184]	; 0xb8
  }
}
 80090e4:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80090e6:	4b04      	ldr	r3, [pc, #16]	; (80090f8 <tcp_err+0x28>)
 80090e8:	f640 020d 	movw	r2, #2061	; 0x80d
 80090ec:	4903      	ldr	r1, [pc, #12]	; (80090fc <tcp_err+0x2c>)
 80090ee:	4804      	ldr	r0, [pc, #16]	; (8009100 <tcp_err+0x30>)
 80090f0:	f00c fc4e 	bl	8015990 <iprintf>
 80090f4:	e7f4      	b.n	80090e0 <tcp_err+0x10>
 80090f6:	4770      	bx	lr
 80090f8:	080185dc 	.word	0x080185dc
 80090fc:	08018838 	.word	0x08018838
 8009100:	08016bb4 	.word	0x08016bb4

08009104 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8009104:	b118      	cbz	r0, 800910e <tcp_accept+0xa>
 8009106:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800910a:	2a01      	cmp	r2, #1
 800910c:	d000      	beq.n	8009110 <tcp_accept+0xc>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
  }
}
 800910e:	4770      	bx	lr
    lpcb->accept = accept;
 8009110:	6401      	str	r1, [r0, #64]	; 0x40
}
 8009112:	e7fc      	b.n	800910e <tcp_accept+0xa>

08009114 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8009114:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009116:	b158      	cbz	r0, 8009130 <tcp_poll+0x1c>
 8009118:	460d      	mov	r5, r1
 800911a:	4614      	mov	r4, r2
 800911c:	4606      	mov	r6, r0
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800911e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009122:	2b01      	cmp	r3, #1
 8009124:	d00c      	beq.n	8009140 <tcp_poll+0x2c>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8009126:	f8c6 50b4 	str.w	r5, [r6, #180]	; 0xb4
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800912a:	f886 4045 	strb.w	r4, [r6, #69]	; 0x45
}
 800912e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009130:	4b07      	ldr	r3, [pc, #28]	; (8009150 <tcp_poll+0x3c>)
 8009132:	f640 023d 	movw	r2, #2109	; 0x83d
 8009136:	4907      	ldr	r1, [pc, #28]	; (8009154 <tcp_poll+0x40>)
 8009138:	4807      	ldr	r0, [pc, #28]	; (8009158 <tcp_poll+0x44>)
 800913a:	f00c fc29 	bl	8015990 <iprintf>
 800913e:	e7f6      	b.n	800912e <tcp_poll+0x1a>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009140:	4b03      	ldr	r3, [pc, #12]	; (8009150 <tcp_poll+0x3c>)
 8009142:	f640 023e 	movw	r2, #2110	; 0x83e
 8009146:	4905      	ldr	r1, [pc, #20]	; (800915c <tcp_poll+0x48>)
 8009148:	4803      	ldr	r0, [pc, #12]	; (8009158 <tcp_poll+0x44>)
 800914a:	f00c fc21 	bl	8015990 <iprintf>
 800914e:	e7ea      	b.n	8009126 <tcp_poll+0x12>
 8009150:	080185dc 	.word	0x080185dc
 8009154:	08018860 	.word	0x08018860
 8009158:	08016bb4 	.word	0x08016bb4
 800915c:	08018878 	.word	0x08018878

08009160 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009160:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009162:	b130      	cbz	r0, 8009172 <tcp_next_iss+0x12>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009164:	4b07      	ldr	r3, [pc, #28]	; (8009184 <tcp_next_iss+0x24>)
 8009166:	6818      	ldr	r0, [r3, #0]
 8009168:	4a07      	ldr	r2, [pc, #28]	; (8009188 <tcp_next_iss+0x28>)
 800916a:	6812      	ldr	r2, [r2, #0]
 800916c:	4410      	add	r0, r2
 800916e:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009170:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009172:	4b06      	ldr	r3, [pc, #24]	; (800918c <tcp_next_iss+0x2c>)
 8009174:	f640 02af 	movw	r2, #2223	; 0x8af
 8009178:	4905      	ldr	r1, [pc, #20]	; (8009190 <tcp_next_iss+0x30>)
 800917a:	4806      	ldr	r0, [pc, #24]	; (8009194 <tcp_next_iss+0x34>)
 800917c:	f00c fc08 	bl	8015990 <iprintf>
 8009180:	e7f0      	b.n	8009164 <tcp_next_iss+0x4>
 8009182:	bf00      	nop
 8009184:	2000000c 	.word	0x2000000c
 8009188:	20007fb0 	.word	0x20007fb0
 800918c:	080185dc 	.word	0x080185dc
 8009190:	08018898 	.word	0x08018898
 8009194:	08016bb4 	.word	0x08016bb4

08009198 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009198:	b570      	push	{r4, r5, r6, lr}
 800919a:	4604      	mov	r4, r0
 800919c:	460d      	mov	r5, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800919e:	4616      	mov	r6, r2
 80091a0:	b1aa      	cbz	r2, 80091ce <tcp_eff_send_mss_netif+0x36>

#if LWIP_IPV6
#if LWIP_IPV4
  if (IP_IS_V6(dest))
 80091a2:	b116      	cbz	r6, 80091aa <tcp_eff_send_mss_netif+0x12>
 80091a4:	7d33      	ldrb	r3, [r6, #20]
 80091a6:	2b06      	cmp	r3, #6
 80091a8:	d019      	beq.n	80091de <tcp_eff_send_mss_netif+0x46>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80091aa:	b175      	cbz	r5, 80091ca <tcp_eff_send_mss_netif+0x32>
      return sendmss;
    }
    mtu = outif->mtu;
 80091ac:	f8b5 00d4 	ldrh.w	r0, [r5, #212]	; 0xd4
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80091b0:	b158      	cbz	r0, 80091ca <tcp_eff_send_mss_netif+0x32>
    u16_t offset;
#if LWIP_IPV6
#if LWIP_IPV4
    if (IP_IS_V6(dest))
 80091b2:	b1ce      	cbz	r6, 80091e8 <tcp_eff_send_mss_netif+0x50>
 80091b4:	7d33      	ldrb	r3, [r6, #20]
 80091b6:	2b06      	cmp	r3, #6
 80091b8:	d018      	beq.n	80091ec <tcp_eff_send_mss_netif+0x54>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80091ba:	2328      	movs	r3, #40	; 0x28
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80091bc:	4298      	cmp	r0, r3
 80091be:	d917      	bls.n	80091f0 <tcp_eff_send_mss_netif+0x58>
 80091c0:	1ac0      	subs	r0, r0, r3
 80091c2:	b280      	uxth	r0, r0
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80091c4:	4284      	cmp	r4, r0
 80091c6:	bf28      	it	cs
 80091c8:	4604      	movcs	r4, r0
  }
  return sendmss;
}
 80091ca:	4620      	mov	r0, r4
 80091cc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80091ce:	4b09      	ldr	r3, [pc, #36]	; (80091f4 <tcp_eff_send_mss_netif+0x5c>)
 80091d0:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80091d4:	4908      	ldr	r1, [pc, #32]	; (80091f8 <tcp_eff_send_mss_netif+0x60>)
 80091d6:	4809      	ldr	r0, [pc, #36]	; (80091fc <tcp_eff_send_mss_netif+0x64>)
 80091d8:	f00c fbda 	bl	8015990 <iprintf>
 80091dc:	e7e1      	b.n	80091a2 <tcp_eff_send_mss_netif+0xa>
    mtu = nd6_get_destination_mtu(ip_2_ip6(dest), outif);
 80091de:	4629      	mov	r1, r5
 80091e0:	4630      	mov	r0, r6
 80091e2:	f00c f97d 	bl	80154e0 <nd6_get_destination_mtu>
 80091e6:	e7e3      	b.n	80091b0 <tcp_eff_send_mss_netif+0x18>
      offset = IP_HLEN + TCP_HLEN;
 80091e8:	2328      	movs	r3, #40	; 0x28
 80091ea:	e7e7      	b.n	80091bc <tcp_eff_send_mss_netif+0x24>
      offset = IP6_HLEN + TCP_HLEN;
 80091ec:	233c      	movs	r3, #60	; 0x3c
 80091ee:	e7e5      	b.n	80091bc <tcp_eff_send_mss_netif+0x24>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80091f0:	2000      	movs	r0, #0
 80091f2:	e7e7      	b.n	80091c4 <tcp_eff_send_mss_netif+0x2c>
 80091f4:	080185dc 	.word	0x080185dc
 80091f8:	080188b4 	.word	0x080188b4
 80091fc:	08016bb4 	.word	0x08016bb4

08009200 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009200:	b510      	push	{r4, lr}
 8009202:	4604      	mov	r4, r0
  if (pcb->ooseq) {
 8009204:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
 8009208:	b120      	cbz	r0, 8009214 <tcp_free_ooseq+0x14>
    tcp_segs_free(pcb->ooseq);
 800920a:	f7ff fee4 	bl	8008fd6 <tcp_segs_free>
    pcb->ooseq = NULL;
 800920e:	2300      	movs	r3, #0
 8009210:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009214:	bd10      	pop	{r4, pc}
	...

08009218 <tcp_pcb_purge>:
{
 8009218:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800921a:	b348      	cbz	r0, 8009270 <tcp_pcb_purge+0x58>
 800921c:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 800921e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009222:	b323      	cbz	r3, 800926e <tcp_pcb_purge+0x56>
 8009224:	2b0a      	cmp	r3, #10
 8009226:	d022      	beq.n	800926e <tcp_pcb_purge+0x56>
      pcb->state != TIME_WAIT &&
 8009228:	2b01      	cmp	r3, #1
 800922a:	d020      	beq.n	800926e <tcp_pcb_purge+0x56>
    if (pcb->refused_data != NULL) {
 800922c:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
 8009230:	b120      	cbz	r0, 800923c <tcp_pcb_purge+0x24>
      pbuf_free(pcb->refused_data);
 8009232:	f7fe ff5d 	bl	80080f0 <pbuf_free>
      pcb->refused_data = NULL;
 8009236:	2300      	movs	r3, #0
 8009238:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    if (pcb->ooseq != NULL) {
 800923c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009240:	b113      	cbz	r3, 8009248 <tcp_pcb_purge+0x30>
      tcp_free_ooseq(pcb);
 8009242:	4620      	mov	r0, r4
 8009244:	f7ff ffdc 	bl	8009200 <tcp_free_ooseq>
    pcb->rtime = -1;
 8009248:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800924c:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
    tcp_segs_free(pcb->unsent);
 8009250:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8009254:	f7ff febf 	bl	8008fd6 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009258:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 800925c:	f7ff febb 	bl	8008fd6 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009260:	2300      	movs	r3, #0
 8009262:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8009266:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    pcb->unsent_oversize = 0;
 800926a:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
}
 800926e:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009270:	4b03      	ldr	r3, [pc, #12]	; (8009280 <tcp_pcb_purge+0x68>)
 8009272:	f640 0251 	movw	r2, #2129	; 0x851
 8009276:	4903      	ldr	r1, [pc, #12]	; (8009284 <tcp_pcb_purge+0x6c>)
 8009278:	4803      	ldr	r0, [pc, #12]	; (8009288 <tcp_pcb_purge+0x70>)
 800927a:	f00c fb89 	bl	8015990 <iprintf>
 800927e:	e7f6      	b.n	800926e <tcp_pcb_purge+0x56>
 8009280:	080185dc 	.word	0x080185dc
 8009284:	080188dc 	.word	0x080188dc
 8009288:	08016bb4 	.word	0x08016bb4

0800928c <tcp_pcb_remove>:
{
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009290:	460c      	mov	r4, r1
 8009292:	b149      	cbz	r1, 80092a8 <tcp_pcb_remove+0x1c>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009294:	b185      	cbz	r5, 80092b8 <tcp_pcb_remove+0x2c>
  TCP_RMV(pcblist, pcb);
 8009296:	682b      	ldr	r3, [r5, #0]
 8009298:	42a3      	cmp	r3, r4
 800929a:	d015      	beq.n	80092c8 <tcp_pcb_remove+0x3c>
 800929c:	b1cb      	cbz	r3, 80092d2 <tcp_pcb_remove+0x46>
 800929e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092a0:	42a2      	cmp	r2, r4
 80092a2:	d014      	beq.n	80092ce <tcp_pcb_remove+0x42>
 80092a4:	4613      	mov	r3, r2
 80092a6:	e7f9      	b.n	800929c <tcp_pcb_remove+0x10>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80092a8:	4b29      	ldr	r3, [pc, #164]	; (8009350 <tcp_pcb_remove+0xc4>)
 80092aa:	f640 0283 	movw	r2, #2179	; 0x883
 80092ae:	4929      	ldr	r1, [pc, #164]	; (8009354 <tcp_pcb_remove+0xc8>)
 80092b0:	4829      	ldr	r0, [pc, #164]	; (8009358 <tcp_pcb_remove+0xcc>)
 80092b2:	f00c fb6d 	bl	8015990 <iprintf>
 80092b6:	e7ed      	b.n	8009294 <tcp_pcb_remove+0x8>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80092b8:	4b25      	ldr	r3, [pc, #148]	; (8009350 <tcp_pcb_remove+0xc4>)
 80092ba:	f640 0284 	movw	r2, #2180	; 0x884
 80092be:	4927      	ldr	r1, [pc, #156]	; (800935c <tcp_pcb_remove+0xd0>)
 80092c0:	4825      	ldr	r0, [pc, #148]	; (8009358 <tcp_pcb_remove+0xcc>)
 80092c2:	f00c fb65 	bl	8015990 <iprintf>
 80092c6:	e7e6      	b.n	8009296 <tcp_pcb_remove+0xa>
  TCP_RMV(pcblist, pcb);
 80092c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ca:	602b      	str	r3, [r5, #0]
 80092cc:	e001      	b.n	80092d2 <tcp_pcb_remove+0x46>
 80092ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80092d0:	635a      	str	r2, [r3, #52]	; 0x34
 80092d2:	2300      	movs	r3, #0
 80092d4:	6363      	str	r3, [r4, #52]	; 0x34
  tcp_pcb_purge(pcb);
 80092d6:	4620      	mov	r0, r4
 80092d8:	f7ff ff9e 	bl	8009218 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 80092dc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80092e0:	2b0a      	cmp	r3, #10
 80092e2:	d006      	beq.n	80092f2 <tcp_pcb_remove+0x66>
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d004      	beq.n	80092f2 <tcp_pcb_remove+0x66>
      (pcb->flags & TF_ACK_DELAY)) {
 80092e8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
      (pcb->state != LISTEN) &&
 80092ec:	f013 0f01 	tst.w	r3, #1
 80092f0:	d126      	bne.n	8009340 <tcp_pcb_remove+0xb4>
  if (pcb->state != LISTEN) {
 80092f2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d01d      	beq.n	8009336 <tcp_pcb_remove+0xaa>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80092fa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80092fe:	b133      	cbz	r3, 800930e <tcp_pcb_remove+0x82>
 8009300:	4b13      	ldr	r3, [pc, #76]	; (8009350 <tcp_pcb_remove+0xc4>)
 8009302:	f640 0293 	movw	r2, #2195	; 0x893
 8009306:	4916      	ldr	r1, [pc, #88]	; (8009360 <tcp_pcb_remove+0xd4>)
 8009308:	4813      	ldr	r0, [pc, #76]	; (8009358 <tcp_pcb_remove+0xcc>)
 800930a:	f00c fb41 	bl	8015990 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800930e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009312:	b133      	cbz	r3, 8009322 <tcp_pcb_remove+0x96>
 8009314:	4b0e      	ldr	r3, [pc, #56]	; (8009350 <tcp_pcb_remove+0xc4>)
 8009316:	f640 0294 	movw	r2, #2196	; 0x894
 800931a:	4912      	ldr	r1, [pc, #72]	; (8009364 <tcp_pcb_remove+0xd8>)
 800931c:	480e      	ldr	r0, [pc, #56]	; (8009358 <tcp_pcb_remove+0xcc>)
 800931e:	f00c fb37 	bl	8015990 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009322:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009326:	b133      	cbz	r3, 8009336 <tcp_pcb_remove+0xaa>
 8009328:	4b09      	ldr	r3, [pc, #36]	; (8009350 <tcp_pcb_remove+0xc4>)
 800932a:	f640 0296 	movw	r2, #2198	; 0x896
 800932e:	490e      	ldr	r1, [pc, #56]	; (8009368 <tcp_pcb_remove+0xdc>)
 8009330:	4809      	ldr	r0, [pc, #36]	; (8009358 <tcp_pcb_remove+0xcc>)
 8009332:	f00c fb2d 	bl	8015990 <iprintf>
  pcb->state = CLOSED;
 8009336:	2300      	movs	r3, #0
 8009338:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  pcb->local_port = 0;
 800933c:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
 800933e:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 8009340:	f043 0302 	orr.w	r3, r3, #2
 8009344:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    tcp_output(pcb);
 8009348:	4620      	mov	r0, r4
 800934a:	f003 feb7 	bl	800d0bc <tcp_output>
 800934e:	e7d0      	b.n	80092f2 <tcp_pcb_remove+0x66>
 8009350:	080185dc 	.word	0x080185dc
 8009354:	080188f8 	.word	0x080188f8
 8009358:	08016bb4 	.word	0x08016bb4
 800935c:	08018914 	.word	0x08018914
 8009360:	08018934 	.word	0x08018934
 8009364:	0801894c 	.word	0x0801894c
 8009368:	08018968 	.word	0x08018968

0800936c <tcp_abandon>:
{
 800936c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009370:	b084      	sub	sp, #16
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009372:	b308      	cbz	r0, 80093b8 <tcp_abandon+0x4c>
 8009374:	460d      	mov	r5, r1
 8009376:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009378:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800937c:	2b01      	cmp	r3, #1
 800937e:	d023      	beq.n	80093c8 <tcp_abandon+0x5c>
  if (pcb->state == TIME_WAIT) {
 8009380:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009384:	2b0a      	cmp	r3, #10
 8009386:	d027      	beq.n	80093d8 <tcp_abandon+0x6c>
    seqno = pcb->snd_nxt;
 8009388:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
    ackno = pcb->rcv_nxt;
 800938c:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    errf = pcb->errf;
 8009390:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
    errf_arg = pcb->callback_arg;
 8009394:	6ba7      	ldr	r7, [r4, #56]	; 0x38
    if (pcb->state == CLOSED) {
 8009396:	2b00      	cmp	r3, #0
 8009398:	d14a      	bne.n	8009430 <tcp_abandon+0xc4>
      if (pcb->local_port != 0) {
 800939a:	f8b4 a03e 	ldrh.w	sl, [r4, #62]	; 0x3e
 800939e:	f1ba 0f00 	cmp.w	sl, #0
 80093a2:	d04f      	beq.n	8009444 <tcp_abandon+0xd8>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80093a4:	4b30      	ldr	r3, [pc, #192]	; (8009468 <tcp_abandon+0xfc>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	42a3      	cmp	r3, r4
 80093aa:	d01d      	beq.n	80093e8 <tcp_abandon+0x7c>
 80093ac:	b313      	cbz	r3, 80093f4 <tcp_abandon+0x88>
 80093ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093b0:	42a2      	cmp	r2, r4
 80093b2:	d01d      	beq.n	80093f0 <tcp_abandon+0x84>
 80093b4:	4613      	mov	r3, r2
 80093b6:	e7f9      	b.n	80093ac <tcp_abandon+0x40>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80093b8:	4b2c      	ldr	r3, [pc, #176]	; (800946c <tcp_abandon+0x100>)
 80093ba:	f240 223d 	movw	r2, #573	; 0x23d
 80093be:	492c      	ldr	r1, [pc, #176]	; (8009470 <tcp_abandon+0x104>)
 80093c0:	482c      	ldr	r0, [pc, #176]	; (8009474 <tcp_abandon+0x108>)
 80093c2:	f00c fae5 	bl	8015990 <iprintf>
 80093c6:	e030      	b.n	800942a <tcp_abandon+0xbe>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80093c8:	4b28      	ldr	r3, [pc, #160]	; (800946c <tcp_abandon+0x100>)
 80093ca:	f44f 7210 	mov.w	r2, #576	; 0x240
 80093ce:	492a      	ldr	r1, [pc, #168]	; (8009478 <tcp_abandon+0x10c>)
 80093d0:	4828      	ldr	r0, [pc, #160]	; (8009474 <tcp_abandon+0x108>)
 80093d2:	f00c fadd 	bl	8015990 <iprintf>
 80093d6:	e7d3      	b.n	8009380 <tcp_abandon+0x14>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80093d8:	4621      	mov	r1, r4
 80093da:	4828      	ldr	r0, [pc, #160]	; (800947c <tcp_abandon+0x110>)
 80093dc:	f7ff ff56 	bl	800928c <tcp_pcb_remove>
    tcp_free(pcb);
 80093e0:	4620      	mov	r0, r4
 80093e2:	f7ff fb1b 	bl	8008a1c <tcp_free>
 80093e6:	e020      	b.n	800942a <tcp_abandon+0xbe>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80093e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093ea:	4b1f      	ldr	r3, [pc, #124]	; (8009468 <tcp_abandon+0xfc>)
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	e001      	b.n	80093f4 <tcp_abandon+0x88>
 80093f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80093f2:	635a      	str	r2, [r3, #52]	; 0x34
 80093f4:	2500      	movs	r5, #0
 80093f6:	6365      	str	r5, [r4, #52]	; 0x34
    u16_t local_port = 0;
 80093f8:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 80093fa:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80093fe:	b108      	cbz	r0, 8009404 <tcp_abandon+0x98>
      tcp_segs_free(pcb->unacked);
 8009400:	f7ff fde9 	bl	8008fd6 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8009404:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8009408:	b108      	cbz	r0, 800940e <tcp_abandon+0xa2>
      tcp_segs_free(pcb->unsent);
 800940a:	f7ff fde4 	bl	8008fd6 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800940e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8009412:	b108      	cbz	r0, 8009418 <tcp_abandon+0xac>
      tcp_segs_free(pcb->ooseq);
 8009414:	f7ff fddf 	bl	8008fd6 <tcp_segs_free>
    if (send_rst) {
 8009418:	b9b5      	cbnz	r5, 8009448 <tcp_abandon+0xdc>
    tcp_free(pcb);
 800941a:	4620      	mov	r0, r4
 800941c:	f7ff fafe 	bl	8008a1c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009420:	b11e      	cbz	r6, 800942a <tcp_abandon+0xbe>
 8009422:	f06f 010c 	mvn.w	r1, #12
 8009426:	4638      	mov	r0, r7
 8009428:	47b0      	blx	r6
}
 800942a:	b004      	add	sp, #16
 800942c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 8009430:	f8b4 a03e 	ldrh.w	sl, [r4, #62]	; 0x3e
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009434:	4621      	mov	r1, r4
 8009436:	4812      	ldr	r0, [pc, #72]	; (8009480 <tcp_abandon+0x114>)
 8009438:	f7ff ff28 	bl	800928c <tcp_pcb_remove>
 800943c:	4b11      	ldr	r3, [pc, #68]	; (8009484 <tcp_abandon+0x118>)
 800943e:	2201      	movs	r2, #1
 8009440:	701a      	strb	r2, [r3, #0]
 8009442:	e7da      	b.n	80093fa <tcp_abandon+0x8e>
    int send_rst = 0;
 8009444:	2500      	movs	r5, #0
 8009446:	e7d8      	b.n	80093fa <tcp_abandon+0x8e>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009448:	f104 0318 	add.w	r3, r4, #24
 800944c:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8009450:	9202      	str	r2, [sp, #8]
 8009452:	f8cd a004 	str.w	sl, [sp, #4]
 8009456:	9300      	str	r3, [sp, #0]
 8009458:	4623      	mov	r3, r4
 800945a:	464a      	mov	r2, r9
 800945c:	4641      	mov	r1, r8
 800945e:	4620      	mov	r0, r4
 8009460:	f003 fda2 	bl	800cfa8 <tcp_rst>
 8009464:	e7d9      	b.n	800941a <tcp_abandon+0xae>
 8009466:	bf00      	nop
 8009468:	20007fb8 	.word	0x20007fb8
 800946c:	080185dc 	.word	0x080185dc
 8009470:	08018980 	.word	0x08018980
 8009474:	08016bb4 	.word	0x08016bb4
 8009478:	0801899c 	.word	0x0801899c
 800947c:	20007fbc 	.word	0x20007fbc
 8009480:	20007fac 	.word	0x20007fac
 8009484:	20007fa8 	.word	0x20007fa8

08009488 <tcp_abort>:
{
 8009488:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 800948a:	2101      	movs	r1, #1
 800948c:	f7ff ff6e 	bl	800936c <tcp_abandon>
}
 8009490:	bd08      	pop	{r3, pc}
	...

08009494 <tcp_accept_null>:
{
 8009494:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8009496:	460c      	mov	r4, r1
 8009498:	b129      	cbz	r1, 80094a6 <tcp_accept_null+0x12>
  tcp_abort(pcb);
 800949a:	4620      	mov	r0, r4
 800949c:	f7ff fff4 	bl	8009488 <tcp_abort>
}
 80094a0:	f06f 000c 	mvn.w	r0, #12
 80094a4:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80094a6:	4b04      	ldr	r3, [pc, #16]	; (80094b8 <tcp_accept_null+0x24>)
 80094a8:	f240 320f 	movw	r2, #783	; 0x30f
 80094ac:	4903      	ldr	r1, [pc, #12]	; (80094bc <tcp_accept_null+0x28>)
 80094ae:	4804      	ldr	r0, [pc, #16]	; (80094c0 <tcp_accept_null+0x2c>)
 80094b0:	f00c fa6e 	bl	8015990 <iprintf>
 80094b4:	e7f1      	b.n	800949a <tcp_accept_null+0x6>
 80094b6:	bf00      	nop
 80094b8:	080185dc 	.word	0x080185dc
 80094bc:	080189d0 	.word	0x080189d0
 80094c0:	08016bb4 	.word	0x08016bb4

080094c4 <tcp_kill_timewait>:
{
 80094c4:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80094c6:	4b0a      	ldr	r3, [pc, #40]	; (80094f0 <tcp_kill_timewait+0x2c>)
 80094c8:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 80094ca:	2400      	movs	r4, #0
  inactive = NULL;
 80094cc:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80094ce:	e000      	b.n	80094d2 <tcp_kill_timewait+0xe>
 80094d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d2:	b143      	cbz	r3, 80094e6 <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80094d4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80094d6:	4a07      	ldr	r2, [pc, #28]	; (80094f4 <tcp_kill_timewait+0x30>)
 80094d8:	6812      	ldr	r2, [r2, #0]
 80094da:	1a52      	subs	r2, r2, r1
 80094dc:	42a2      	cmp	r2, r4
 80094de:	d3f7      	bcc.n	80094d0 <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 80094e0:	4614      	mov	r4, r2
      inactive = pcb;
 80094e2:	4618      	mov	r0, r3
 80094e4:	e7f4      	b.n	80094d0 <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 80094e6:	b108      	cbz	r0, 80094ec <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 80094e8:	f7ff ffce 	bl	8009488 <tcp_abort>
}
 80094ec:	bd10      	pop	{r4, pc}
 80094ee:	bf00      	nop
 80094f0:	20007fbc 	.word	0x20007fbc
 80094f4:	20007fb0 	.word	0x20007fb0

080094f8 <tcp_kill_prio>:
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80094f8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80094fc:	d101      	bne.n	8009502 <tcp_kill_prio+0xa>
  if (mprio == 0) {
 80094fe:	b908      	cbnz	r0, 8009504 <tcp_kill_prio+0xc>
 8009500:	4770      	bx	lr
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009502:	207f      	movs	r0, #127	; 0x7f
{
 8009504:	b570      	push	{r4, r5, r6, lr}
  mprio--;
 8009506:	3801      	subs	r0, #1
 8009508:	b2c2      	uxtb	r2, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800950a:	4b0e      	ldr	r3, [pc, #56]	; (8009544 <tcp_kill_prio+0x4c>)
 800950c:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 800950e:	2400      	movs	r4, #0
  inactive = NULL;
 8009510:	4620      	mov	r0, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009512:	e006      	b.n	8009522 <tcp_kill_prio+0x2a>
      inactivity = tcp_ticks - pcb->tmr;
 8009514:	4a0c      	ldr	r2, [pc, #48]	; (8009548 <tcp_kill_prio+0x50>)
 8009516:	6812      	ldr	r2, [r2, #0]
 8009518:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800951a:	1b14      	subs	r4, r2, r4
      mprio      = pcb->prio;
 800951c:	460a      	mov	r2, r1
      inactive   = pcb;
 800951e:	4618      	mov	r0, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009522:	b15b      	cbz	r3, 800953c <tcp_kill_prio+0x44>
    if ((pcb->prio < mprio) ||
 8009524:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 8009528:	4291      	cmp	r1, r2
 800952a:	d3f3      	bcc.n	8009514 <tcp_kill_prio+0x1c>
 800952c:	d1f8      	bne.n	8009520 <tcp_kill_prio+0x28>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800952e:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 8009530:	4d05      	ldr	r5, [pc, #20]	; (8009548 <tcp_kill_prio+0x50>)
 8009532:	682d      	ldr	r5, [r5, #0]
 8009534:	1bad      	subs	r5, r5, r6
 8009536:	42a5      	cmp	r5, r4
 8009538:	d3f2      	bcc.n	8009520 <tcp_kill_prio+0x28>
 800953a:	e7eb      	b.n	8009514 <tcp_kill_prio+0x1c>
  if (inactive != NULL) {
 800953c:	b108      	cbz	r0, 8009542 <tcp_kill_prio+0x4a>
    tcp_abort(inactive);
 800953e:	f7ff ffa3 	bl	8009488 <tcp_abort>
}
 8009542:	bd70      	pop	{r4, r5, r6, pc}
 8009544:	20007fac 	.word	0x20007fac
 8009548:	20007fb0 	.word	0x20007fb0

0800954c <tcp_netif_ip_addr_changed_pcblist>:
{
 800954c:	b570      	push	{r4, r5, r6, lr}
 800954e:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009550:	4605      	mov	r5, r0
 8009552:	bb48      	cbnz	r0, 80095a8 <tcp_netif_ip_addr_changed_pcblist+0x5c>
 8009554:	4b1e      	ldr	r3, [pc, #120]	; (80095d0 <tcp_netif_ip_addr_changed_pcblist+0x84>)
 8009556:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800955a:	491e      	ldr	r1, [pc, #120]	; (80095d4 <tcp_netif_ip_addr_changed_pcblist+0x88>)
 800955c:	481e      	ldr	r0, [pc, #120]	; (80095d8 <tcp_netif_ip_addr_changed_pcblist+0x8c>)
 800955e:	f00c fa17 	bl	8015990 <iprintf>
 8009562:	e021      	b.n	80095a8 <tcp_netif_ip_addr_changed_pcblist+0x5c>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009564:	6862      	ldr	r2, [r4, #4]
 8009566:	686b      	ldr	r3, [r5, #4]
 8009568:	429a      	cmp	r2, r3
 800956a:	d001      	beq.n	8009570 <tcp_netif_ip_addr_changed_pcblist+0x24>
 800956c:	2300      	movs	r3, #0
 800956e:	e019      	b.n	80095a4 <tcp_netif_ip_addr_changed_pcblist+0x58>
 8009570:	68a2      	ldr	r2, [r4, #8]
 8009572:	68ab      	ldr	r3, [r5, #8]
 8009574:	429a      	cmp	r2, r3
 8009576:	d001      	beq.n	800957c <tcp_netif_ip_addr_changed_pcblist+0x30>
 8009578:	2300      	movs	r3, #0
 800957a:	e013      	b.n	80095a4 <tcp_netif_ip_addr_changed_pcblist+0x58>
 800957c:	68e2      	ldr	r2, [r4, #12]
 800957e:	68eb      	ldr	r3, [r5, #12]
 8009580:	429a      	cmp	r2, r3
 8009582:	d001      	beq.n	8009588 <tcp_netif_ip_addr_changed_pcblist+0x3c>
 8009584:	2300      	movs	r3, #0
 8009586:	e00d      	b.n	80095a4 <tcp_netif_ip_addr_changed_pcblist+0x58>
 8009588:	7c22      	ldrb	r2, [r4, #16]
 800958a:	7c2b      	ldrb	r3, [r5, #16]
 800958c:	429a      	cmp	r2, r3
 800958e:	d001      	beq.n	8009594 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009590:	2300      	movs	r3, #0
 8009592:	e007      	b.n	80095a4 <tcp_netif_ip_addr_changed_pcblist+0x58>
 8009594:	2301      	movs	r3, #1
 8009596:	e005      	b.n	80095a4 <tcp_netif_ip_addr_changed_pcblist+0x58>
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	682a      	ldr	r2, [r5, #0]
 800959c:	4293      	cmp	r3, r2
 800959e:	bf14      	ite	ne
 80095a0:	2300      	movne	r3, #0
 80095a2:	2301      	moveq	r3, #1
 80095a4:	b96b      	cbnz	r3, 80095c2 <tcp_netif_ip_addr_changed_pcblist+0x76>
      pcb = pcb->next;
 80095a6:	6b64      	ldr	r4, [r4, #52]	; 0x34
  while (pcb != NULL) {
 80095a8:	b18c      	cbz	r4, 80095ce <tcp_netif_ip_addr_changed_pcblist+0x82>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80095aa:	7d23      	ldrb	r3, [r4, #20]
 80095ac:	7d2a      	ldrb	r2, [r5, #20]
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d1f9      	bne.n	80095a6 <tcp_netif_ip_addr_changed_pcblist+0x5a>
 80095b2:	2b06      	cmp	r3, #6
 80095b4:	d1f0      	bne.n	8009598 <tcp_netif_ip_addr_changed_pcblist+0x4c>
 80095b6:	6822      	ldr	r2, [r4, #0]
 80095b8:	682b      	ldr	r3, [r5, #0]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d0d2      	beq.n	8009564 <tcp_netif_ip_addr_changed_pcblist+0x18>
 80095be:	2300      	movs	r3, #0
 80095c0:	e7f0      	b.n	80095a4 <tcp_netif_ip_addr_changed_pcblist+0x58>
      struct tcp_pcb *next = pcb->next;
 80095c2:	6b66      	ldr	r6, [r4, #52]	; 0x34
      tcp_abort(pcb);
 80095c4:	4620      	mov	r0, r4
 80095c6:	f7ff ff5f 	bl	8009488 <tcp_abort>
      pcb = next;
 80095ca:	4634      	mov	r4, r6
 80095cc:	e7ec      	b.n	80095a8 <tcp_netif_ip_addr_changed_pcblist+0x5c>
}
 80095ce:	bd70      	pop	{r4, r5, r6, pc}
 80095d0:	080185dc 	.word	0x080185dc
 80095d4:	080189f0 	.word	0x080189f0
 80095d8:	08016bb4 	.word	0x08016bb4

080095dc <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 80095dc:	2800      	cmp	r0, #0
 80095de:	f000 8099 	beq.w	8009714 <tcp_netif_ip_addr_changed+0x138>
{
 80095e2:	b538      	push	{r3, r4, r5, lr}
 80095e4:	460d      	mov	r5, r1
 80095e6:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 80095e8:	7d03      	ldrb	r3, [r0, #20]
 80095ea:	2b06      	cmp	r3, #6
 80095ec:	d004      	beq.n	80095f8 <tcp_netif_ip_addr_changed+0x1c>
 80095ee:	b1b8      	cbz	r0, 8009620 <tcp_netif_ip_addr_changed+0x44>
 80095f0:	6803      	ldr	r3, [r0, #0]
 80095f2:	b9bb      	cbnz	r3, 8009624 <tcp_netif_ip_addr_changed+0x48>
 80095f4:	b9c3      	cbnz	r3, 8009628 <tcp_netif_ip_addr_changed+0x4c>
}
 80095f6:	bd38      	pop	{r3, r4, r5, pc}
  if (!ip_addr_isany(old_addr)) {
 80095f8:	b150      	cbz	r0, 8009610 <tcp_netif_ip_addr_changed+0x34>
 80095fa:	6803      	ldr	r3, [r0, #0]
 80095fc:	b953      	cbnz	r3, 8009614 <tcp_netif_ip_addr_changed+0x38>
 80095fe:	6843      	ldr	r3, [r0, #4]
 8009600:	b953      	cbnz	r3, 8009618 <tcp_netif_ip_addr_changed+0x3c>
 8009602:	6883      	ldr	r3, [r0, #8]
 8009604:	b953      	cbnz	r3, 800961c <tcp_netif_ip_addr_changed+0x40>
 8009606:	68c3      	ldr	r3, [r0, #12]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d0f3      	beq.n	80095f4 <tcp_netif_ip_addr_changed+0x18>
 800960c:	2301      	movs	r3, #1
 800960e:	e7f1      	b.n	80095f4 <tcp_netif_ip_addr_changed+0x18>
 8009610:	2300      	movs	r3, #0
 8009612:	e7ef      	b.n	80095f4 <tcp_netif_ip_addr_changed+0x18>
 8009614:	2301      	movs	r3, #1
 8009616:	e7ed      	b.n	80095f4 <tcp_netif_ip_addr_changed+0x18>
 8009618:	2301      	movs	r3, #1
 800961a:	e7eb      	b.n	80095f4 <tcp_netif_ip_addr_changed+0x18>
 800961c:	2301      	movs	r3, #1
 800961e:	e7e9      	b.n	80095f4 <tcp_netif_ip_addr_changed+0x18>
 8009620:	2300      	movs	r3, #0
 8009622:	e7e7      	b.n	80095f4 <tcp_netif_ip_addr_changed+0x18>
 8009624:	2301      	movs	r3, #1
 8009626:	e7e5      	b.n	80095f4 <tcp_netif_ip_addr_changed+0x18>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009628:	4b3b      	ldr	r3, [pc, #236]	; (8009718 <tcp_netif_ip_addr_changed+0x13c>)
 800962a:	6819      	ldr	r1, [r3, #0]
 800962c:	4620      	mov	r0, r4
 800962e:	f7ff ff8d 	bl	800954c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009632:	4b3a      	ldr	r3, [pc, #232]	; (800971c <tcp_netif_ip_addr_changed+0x140>)
 8009634:	6819      	ldr	r1, [r3, #0]
 8009636:	4620      	mov	r0, r4
 8009638:	f7ff ff88 	bl	800954c <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 800963c:	2d00      	cmp	r5, #0
 800963e:	d0da      	beq.n	80095f6 <tcp_netif_ip_addr_changed+0x1a>
 8009640:	7d2b      	ldrb	r3, [r5, #20]
 8009642:	2b06      	cmp	r3, #6
 8009644:	d007      	beq.n	8009656 <tcp_netif_ip_addr_changed+0x7a>
 8009646:	b1d5      	cbz	r5, 800967e <tcp_netif_ip_addr_changed+0xa2>
 8009648:	682b      	ldr	r3, [r5, #0]
 800964a:	b9d3      	cbnz	r3, 8009682 <tcp_netif_ip_addr_changed+0xa6>
 800964c:	2b00      	cmp	r3, #0
 800964e:	d0d2      	beq.n	80095f6 <tcp_netif_ip_addr_changed+0x1a>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009650:	4b33      	ldr	r3, [pc, #204]	; (8009720 <tcp_netif_ip_addr_changed+0x144>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	e042      	b.n	80096dc <tcp_netif_ip_addr_changed+0x100>
    if (!ip_addr_isany(new_addr)) {
 8009656:	b155      	cbz	r5, 800966e <tcp_netif_ip_addr_changed+0x92>
 8009658:	682b      	ldr	r3, [r5, #0]
 800965a:	b953      	cbnz	r3, 8009672 <tcp_netif_ip_addr_changed+0x96>
 800965c:	686b      	ldr	r3, [r5, #4]
 800965e:	b953      	cbnz	r3, 8009676 <tcp_netif_ip_addr_changed+0x9a>
 8009660:	68ab      	ldr	r3, [r5, #8]
 8009662:	b953      	cbnz	r3, 800967a <tcp_netif_ip_addr_changed+0x9e>
 8009664:	68eb      	ldr	r3, [r5, #12]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d0f0      	beq.n	800964c <tcp_netif_ip_addr_changed+0x70>
 800966a:	2301      	movs	r3, #1
 800966c:	e7ee      	b.n	800964c <tcp_netif_ip_addr_changed+0x70>
 800966e:	2300      	movs	r3, #0
 8009670:	e7ec      	b.n	800964c <tcp_netif_ip_addr_changed+0x70>
 8009672:	2301      	movs	r3, #1
 8009674:	e7ea      	b.n	800964c <tcp_netif_ip_addr_changed+0x70>
 8009676:	2301      	movs	r3, #1
 8009678:	e7e8      	b.n	800964c <tcp_netif_ip_addr_changed+0x70>
 800967a:	2301      	movs	r3, #1
 800967c:	e7e6      	b.n	800964c <tcp_netif_ip_addr_changed+0x70>
 800967e:	2300      	movs	r3, #0
 8009680:	e7e4      	b.n	800964c <tcp_netif_ip_addr_changed+0x70>
 8009682:	2301      	movs	r3, #1
 8009684:	e7e2      	b.n	800964c <tcp_netif_ip_addr_changed+0x70>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009686:	6819      	ldr	r1, [r3, #0]
 8009688:	6822      	ldr	r2, [r4, #0]
 800968a:	4291      	cmp	r1, r2
 800968c:	d001      	beq.n	8009692 <tcp_netif_ip_addr_changed+0xb6>
 800968e:	2200      	movs	r2, #0
 8009690:	e032      	b.n	80096f8 <tcp_netif_ip_addr_changed+0x11c>
 8009692:	6859      	ldr	r1, [r3, #4]
 8009694:	6862      	ldr	r2, [r4, #4]
 8009696:	4291      	cmp	r1, r2
 8009698:	d001      	beq.n	800969e <tcp_netif_ip_addr_changed+0xc2>
 800969a:	2200      	movs	r2, #0
 800969c:	e02c      	b.n	80096f8 <tcp_netif_ip_addr_changed+0x11c>
 800969e:	6899      	ldr	r1, [r3, #8]
 80096a0:	68a2      	ldr	r2, [r4, #8]
 80096a2:	4291      	cmp	r1, r2
 80096a4:	d001      	beq.n	80096aa <tcp_netif_ip_addr_changed+0xce>
 80096a6:	2200      	movs	r2, #0
 80096a8:	e026      	b.n	80096f8 <tcp_netif_ip_addr_changed+0x11c>
 80096aa:	68d9      	ldr	r1, [r3, #12]
 80096ac:	68e2      	ldr	r2, [r4, #12]
 80096ae:	4291      	cmp	r1, r2
 80096b0:	d001      	beq.n	80096b6 <tcp_netif_ip_addr_changed+0xda>
 80096b2:	2200      	movs	r2, #0
 80096b4:	e020      	b.n	80096f8 <tcp_netif_ip_addr_changed+0x11c>
 80096b6:	7c19      	ldrb	r1, [r3, #16]
 80096b8:	7c22      	ldrb	r2, [r4, #16]
 80096ba:	4291      	cmp	r1, r2
 80096bc:	d001      	beq.n	80096c2 <tcp_netif_ip_addr_changed+0xe6>
 80096be:	2200      	movs	r2, #0
 80096c0:	e01a      	b.n	80096f8 <tcp_netif_ip_addr_changed+0x11c>
 80096c2:	2201      	movs	r2, #1
 80096c4:	e018      	b.n	80096f8 <tcp_netif_ip_addr_changed+0x11c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80096c6:	682a      	ldr	r2, [r5, #0]
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	686a      	ldr	r2, [r5, #4]
 80096cc:	605a      	str	r2, [r3, #4]
 80096ce:	68aa      	ldr	r2, [r5, #8]
 80096d0:	609a      	str	r2, [r3, #8]
 80096d2:	68ea      	ldr	r2, [r5, #12]
 80096d4:	60da      	str	r2, [r3, #12]
 80096d6:	7c2a      	ldrb	r2, [r5, #16]
 80096d8:	741a      	strb	r2, [r3, #16]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80096da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d08a      	beq.n	80095f6 <tcp_netif_ip_addr_changed+0x1a>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80096e0:	7d1a      	ldrb	r2, [r3, #20]
 80096e2:	7d21      	ldrb	r1, [r4, #20]
 80096e4:	428a      	cmp	r2, r1
 80096e6:	d1f8      	bne.n	80096da <tcp_netif_ip_addr_changed+0xfe>
 80096e8:	2a06      	cmp	r2, #6
 80096ea:	d0cc      	beq.n	8009686 <tcp_netif_ip_addr_changed+0xaa>
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	6821      	ldr	r1, [r4, #0]
 80096f0:	428a      	cmp	r2, r1
 80096f2:	bf14      	ite	ne
 80096f4:	2200      	movne	r2, #0
 80096f6:	2201      	moveq	r2, #1
 80096f8:	2a00      	cmp	r2, #0
 80096fa:	d0ee      	beq.n	80096da <tcp_netif_ip_addr_changed+0xfe>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80096fc:	7d2a      	ldrb	r2, [r5, #20]
 80096fe:	751a      	strb	r2, [r3, #20]
 8009700:	2a06      	cmp	r2, #6
 8009702:	d0e0      	beq.n	80096c6 <tcp_netif_ip_addr_changed+0xea>
 8009704:	682a      	ldr	r2, [r5, #0]
 8009706:	601a      	str	r2, [r3, #0]
 8009708:	2200      	movs	r2, #0
 800970a:	60da      	str	r2, [r3, #12]
 800970c:	609a      	str	r2, [r3, #8]
 800970e:	605a      	str	r2, [r3, #4]
 8009710:	741a      	strb	r2, [r3, #16]
 8009712:	e7e2      	b.n	80096da <tcp_netif_ip_addr_changed+0xfe>
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	20007fac 	.word	0x20007fac
 800971c:	20007fb8 	.word	0x20007fb8
 8009720:	20007fb4 	.word	0x20007fb4

08009724 <tcp_kill_state>:
{
 8009724:	b538      	push	{r3, r4, r5, lr}
 8009726:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009728:	f1a0 0308 	sub.w	r3, r0, #8
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b01      	cmp	r3, #1
 8009730:	d804      	bhi.n	800973c <tcp_kill_state+0x18>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009732:	4b10      	ldr	r3, [pc, #64]	; (8009774 <tcp_kill_state+0x50>)
 8009734:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8009736:	2100      	movs	r1, #0
  inactive = NULL;
 8009738:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800973a:	e008      	b.n	800974e <tcp_kill_state+0x2a>
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800973c:	4b0e      	ldr	r3, [pc, #56]	; (8009778 <tcp_kill_state+0x54>)
 800973e:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009742:	490e      	ldr	r1, [pc, #56]	; (800977c <tcp_kill_state+0x58>)
 8009744:	480e      	ldr	r0, [pc, #56]	; (8009780 <tcp_kill_state+0x5c>)
 8009746:	f00c f923 	bl	8015990 <iprintf>
 800974a:	e7f2      	b.n	8009732 <tcp_kill_state+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800974c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974e:	b163      	cbz	r3, 800976a <tcp_kill_state+0x46>
    if (pcb->state == state) {
 8009750:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8009754:	42a2      	cmp	r2, r4
 8009756:	d1f9      	bne.n	800974c <tcp_kill_state+0x28>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009758:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 800975a:	4a0a      	ldr	r2, [pc, #40]	; (8009784 <tcp_kill_state+0x60>)
 800975c:	6812      	ldr	r2, [r2, #0]
 800975e:	1b52      	subs	r2, r2, r5
 8009760:	428a      	cmp	r2, r1
 8009762:	d3f3      	bcc.n	800974c <tcp_kill_state+0x28>
        inactivity = tcp_ticks - pcb->tmr;
 8009764:	4611      	mov	r1, r2
        inactive = pcb;
 8009766:	4618      	mov	r0, r3
 8009768:	e7f0      	b.n	800974c <tcp_kill_state+0x28>
  if (inactive != NULL) {
 800976a:	b110      	cbz	r0, 8009772 <tcp_kill_state+0x4e>
    tcp_abandon(inactive, 0);
 800976c:	2100      	movs	r1, #0
 800976e:	f7ff fdfd 	bl	800936c <tcp_abandon>
}
 8009772:	bd38      	pop	{r3, r4, r5, pc}
 8009774:	20007fac 	.word	0x20007fac
 8009778:	080185dc 	.word	0x080185dc
 800977c:	08018a24 	.word	0x08018a24
 8009780:	08016bb4 	.word	0x08016bb4
 8009784:	20007fb0 	.word	0x20007fb0

08009788 <tcp_alloc>:
{
 8009788:	b538      	push	{r3, r4, r5, lr}
 800978a:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800978c:	2001      	movs	r0, #1
 800978e:	f7fd fff1 	bl	8007774 <memp_malloc>
  if (pcb == NULL) {
 8009792:	4604      	mov	r4, r0
 8009794:	b3a8      	cbz	r0, 8009802 <tcp_alloc+0x7a>
  if (pcb != NULL) {
 8009796:	b394      	cbz	r4, 80097fe <tcp_alloc+0x76>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009798:	22c4      	movs	r2, #196	; 0xc4
 800979a:	2100      	movs	r1, #0
 800979c:	4620      	mov	r0, r4
 800979e:	f00c f8ef 	bl	8015980 <memset>
    pcb->prio = prio;
 80097a2:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    pcb->snd_buf = TCP_SND_BUF;
 80097a6:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80097aa:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80097ae:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80097b2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80097b6:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    pcb->ttl = TCP_TTL;
 80097ba:	22ff      	movs	r2, #255	; 0xff
 80097bc:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    pcb->mss = INITIAL_MSS;
 80097c0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80097c4:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80097c8:	2206      	movs	r2, #6
 80097ca:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80097ce:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
    pcb->rtime = -1;
 80097d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097d6:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
    pcb->cwnd = 1;
 80097da:	2201      	movs	r2, #1
 80097dc:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
    pcb->tmr = tcp_ticks;
 80097e0:	4a1a      	ldr	r2, [pc, #104]	; (800984c <tcp_alloc+0xc4>)
 80097e2:	6812      	ldr	r2, [r2, #0]
 80097e4:	64a2      	str	r2, [r4, #72]	; 0x48
    pcb->last_timer = tcp_timer_ctr;
 80097e6:	4a1a      	ldr	r2, [pc, #104]	; (8009850 <tcp_alloc+0xc8>)
 80097e8:	7812      	ldrb	r2, [r2, #0]
 80097ea:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
    pcb->ssthresh = TCP_SND_BUF;
 80097ee:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
    pcb->recv = tcp_recv_null;
 80097f2:	4b18      	ldr	r3, [pc, #96]	; (8009854 <tcp_alloc+0xcc>)
 80097f4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80097f8:	4b17      	ldr	r3, [pc, #92]	; (8009858 <tcp_alloc+0xd0>)
 80097fa:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
}
 80097fe:	4620      	mov	r0, r4
 8009800:	bd38      	pop	{r3, r4, r5, pc}
    tcp_handle_closepend();
 8009802:	f7ff f8e7 	bl	80089d4 <tcp_handle_closepend>
    tcp_kill_timewait();
 8009806:	f7ff fe5d 	bl	80094c4 <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800980a:	2001      	movs	r0, #1
 800980c:	f7fd ffb2 	bl	8007774 <memp_malloc>
    if (pcb == NULL) {
 8009810:	4604      	mov	r4, r0
 8009812:	2800      	cmp	r0, #0
 8009814:	d1bf      	bne.n	8009796 <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 8009816:	2009      	movs	r0, #9
 8009818:	f7ff ff84 	bl	8009724 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800981c:	2001      	movs	r0, #1
 800981e:	f7fd ffa9 	bl	8007774 <memp_malloc>
      if (pcb == NULL) {
 8009822:	4604      	mov	r4, r0
 8009824:	2800      	cmp	r0, #0
 8009826:	d1b6      	bne.n	8009796 <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 8009828:	2008      	movs	r0, #8
 800982a:	f7ff ff7b 	bl	8009724 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800982e:	2001      	movs	r0, #1
 8009830:	f7fd ffa0 	bl	8007774 <memp_malloc>
        if (pcb == NULL) {
 8009834:	4604      	mov	r4, r0
 8009836:	2800      	cmp	r0, #0
 8009838:	d1ad      	bne.n	8009796 <tcp_alloc+0xe>
          tcp_kill_prio(prio);
 800983a:	4628      	mov	r0, r5
 800983c:	f7ff fe5c 	bl	80094f8 <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009840:	2001      	movs	r0, #1
 8009842:	f7fd ff97 	bl	8007774 <memp_malloc>
 8009846:	4604      	mov	r4, r0
          if (pcb != NULL) {
 8009848:	e7a5      	b.n	8009796 <tcp_alloc+0xe>
 800984a:	bf00      	nop
 800984c:	20007fb0 	.word	0x20007fb0
 8009850:	20000a82 	.word	0x20000a82
 8009854:	08009a11 	.word	0x08009a11
 8009858:	006ddd00 	.word	0x006ddd00

0800985c <tcp_new_ip_type>:
{
 800985c:	b510      	push	{r4, lr}
 800985e:	4604      	mov	r4, r0
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8009860:	2040      	movs	r0, #64	; 0x40
 8009862:	f7ff ff91 	bl	8009788 <tcp_alloc>
  if (pcb != NULL) {
 8009866:	4603      	mov	r3, r0
 8009868:	b110      	cbz	r0, 8009870 <tcp_new_ip_type+0x14>
    IP_SET_TYPE_VAL(pcb->local_ip, type);
 800986a:	7504      	strb	r4, [r0, #20]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
 800986c:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
}
 8009870:	4618      	mov	r0, r3
 8009872:	bd10      	pop	{r4, pc}

08009874 <tcp_close_shutdown>:
{
 8009874:	b530      	push	{r4, r5, lr}
 8009876:	b085      	sub	sp, #20
 8009878:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800987a:	4604      	mov	r4, r0
 800987c:	b190      	cbz	r0, 80098a4 <tcp_close_shutdown+0x30>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800987e:	b12d      	cbz	r5, 800988c <tcp_close_shutdown+0x18>
 8009880:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009884:	2b04      	cmp	r3, #4
 8009886:	d015      	beq.n	80098b4 <tcp_close_shutdown+0x40>
 8009888:	2b07      	cmp	r3, #7
 800988a:	d013      	beq.n	80098b4 <tcp_close_shutdown+0x40>
  switch (pcb->state) {
 800988c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009890:	2b01      	cmp	r3, #1
 8009892:	d071      	beq.n	8009978 <tcp_close_shutdown+0x104>
 8009894:	2b02      	cmp	r3, #2
 8009896:	d07b      	beq.n	8009990 <tcp_close_shutdown+0x11c>
 8009898:	2b00      	cmp	r3, #0
 800989a:	d054      	beq.n	8009946 <tcp_close_shutdown+0xd2>
      return tcp_close_shutdown_fin(pcb);
 800989c:	4620      	mov	r0, r4
 800989e:	f7ff f851 	bl	8008944 <tcp_close_shutdown_fin>
 80098a2:	e04b      	b.n	800993c <tcp_close_shutdown+0xc8>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80098a4:	4b40      	ldr	r3, [pc, #256]	; (80099a8 <tcp_close_shutdown+0x134>)
 80098a6:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80098aa:	4940      	ldr	r1, [pc, #256]	; (80099ac <tcp_close_shutdown+0x138>)
 80098ac:	4840      	ldr	r0, [pc, #256]	; (80099b0 <tcp_close_shutdown+0x13c>)
 80098ae:	f00c f86f 	bl	8015990 <iprintf>
 80098b2:	e7e4      	b.n	800987e <tcp_close_shutdown+0xa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80098b4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80098b8:	b1fb      	cbz	r3, 80098fa <tcp_close_shutdown+0x86>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80098ba:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80098be:	f013 0f10 	tst.w	r3, #16
 80098c2:	d020      	beq.n	8009906 <tcp_close_shutdown+0x92>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80098c4:	f104 0318 	add.w	r3, r4, #24
 80098c8:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 80098cc:	9202      	str	r2, [sp, #8]
 80098ce:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80098d0:	9201      	str	r2, [sp, #4]
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	4623      	mov	r3, r4
 80098d6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80098d8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80098da:	4620      	mov	r0, r4
 80098dc:	f003 fb64 	bl	800cfa8 <tcp_rst>
      tcp_pcb_purge(pcb);
 80098e0:	4620      	mov	r0, r4
 80098e2:	f7ff fc99 	bl	8009218 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80098e6:	4b33      	ldr	r3, [pc, #204]	; (80099b4 <tcp_close_shutdown+0x140>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	42a3      	cmp	r3, r4
 80098ec:	d013      	beq.n	8009916 <tcp_close_shutdown+0xa2>
 80098ee:	b1c3      	cbz	r3, 8009922 <tcp_close_shutdown+0xae>
 80098f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098f2:	42a2      	cmp	r2, r4
 80098f4:	d013      	beq.n	800991e <tcp_close_shutdown+0xaa>
 80098f6:	4613      	mov	r3, r2
 80098f8:	e7f9      	b.n	80098ee <tcp_close_shutdown+0x7a>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80098fa:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 80098fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009902:	d0c3      	beq.n	800988c <tcp_close_shutdown+0x18>
 8009904:	e7d9      	b.n	80098ba <tcp_close_shutdown+0x46>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009906:	4b28      	ldr	r3, [pc, #160]	; (80099a8 <tcp_close_shutdown+0x134>)
 8009908:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800990c:	492a      	ldr	r1, [pc, #168]	; (80099b8 <tcp_close_shutdown+0x144>)
 800990e:	4828      	ldr	r0, [pc, #160]	; (80099b0 <tcp_close_shutdown+0x13c>)
 8009910:	f00c f83e 	bl	8015990 <iprintf>
 8009914:	e7d6      	b.n	80098c4 <tcp_close_shutdown+0x50>
      TCP_RMV_ACTIVE(pcb);
 8009916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009918:	4b26      	ldr	r3, [pc, #152]	; (80099b4 <tcp_close_shutdown+0x140>)
 800991a:	601a      	str	r2, [r3, #0]
 800991c:	e001      	b.n	8009922 <tcp_close_shutdown+0xae>
 800991e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009920:	635a      	str	r2, [r3, #52]	; 0x34
 8009922:	2300      	movs	r3, #0
 8009924:	6363      	str	r3, [r4, #52]	; 0x34
 8009926:	4b25      	ldr	r3, [pc, #148]	; (80099bc <tcp_close_shutdown+0x148>)
 8009928:	2201      	movs	r2, #1
 800992a:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 800992c:	4b24      	ldr	r3, [pc, #144]	; (80099c0 <tcp_close_shutdown+0x14c>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	42a3      	cmp	r3, r4
 8009932:	d005      	beq.n	8009940 <tcp_close_shutdown+0xcc>
        tcp_free(pcb);
 8009934:	4620      	mov	r0, r4
 8009936:	f7ff f871 	bl	8008a1c <tcp_free>
      return ERR_OK;
 800993a:	2000      	movs	r0, #0
}
 800993c:	b005      	add	sp, #20
 800993e:	bd30      	pop	{r4, r5, pc}
        tcp_trigger_input_pcb_close();
 8009940:	f002 fa70 	bl	800be24 <tcp_trigger_input_pcb_close>
 8009944:	e7f9      	b.n	800993a <tcp_close_shutdown+0xc6>
      if (pcb->local_port != 0) {
 8009946:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009948:	b18b      	cbz	r3, 800996e <tcp_close_shutdown+0xfa>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800994a:	4b1e      	ldr	r3, [pc, #120]	; (80099c4 <tcp_close_shutdown+0x150>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	42a3      	cmp	r3, r4
 8009950:	d005      	beq.n	800995e <tcp_close_shutdown+0xea>
 8009952:	b153      	cbz	r3, 800996a <tcp_close_shutdown+0xf6>
 8009954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009956:	42a2      	cmp	r2, r4
 8009958:	d005      	beq.n	8009966 <tcp_close_shutdown+0xf2>
 800995a:	4613      	mov	r3, r2
 800995c:	e7f9      	b.n	8009952 <tcp_close_shutdown+0xde>
 800995e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009960:	4b18      	ldr	r3, [pc, #96]	; (80099c4 <tcp_close_shutdown+0x150>)
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	e001      	b.n	800996a <tcp_close_shutdown+0xf6>
 8009966:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009968:	635a      	str	r2, [r3, #52]	; 0x34
 800996a:	2300      	movs	r3, #0
 800996c:	6363      	str	r3, [r4, #52]	; 0x34
      tcp_free(pcb);
 800996e:	4620      	mov	r0, r4
 8009970:	f7ff f854 	bl	8008a1c <tcp_free>
  return ERR_OK;
 8009974:	2000      	movs	r0, #0
      break;
 8009976:	e7e1      	b.n	800993c <tcp_close_shutdown+0xc8>
      tcp_listen_closed(pcb);
 8009978:	4620      	mov	r0, r4
 800997a:	f7fe ff9d 	bl	80088b8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800997e:	4621      	mov	r1, r4
 8009980:	4811      	ldr	r0, [pc, #68]	; (80099c8 <tcp_close_shutdown+0x154>)
 8009982:	f7ff fc83 	bl	800928c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009986:	4620      	mov	r0, r4
 8009988:	f7fe ffc4 	bl	8008914 <tcp_free_listen>
  return ERR_OK;
 800998c:	2000      	movs	r0, #0
      break;
 800998e:	e7d5      	b.n	800993c <tcp_close_shutdown+0xc8>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009990:	4621      	mov	r1, r4
 8009992:	4808      	ldr	r0, [pc, #32]	; (80099b4 <tcp_close_shutdown+0x140>)
 8009994:	f7ff fc7a 	bl	800928c <tcp_pcb_remove>
 8009998:	4b08      	ldr	r3, [pc, #32]	; (80099bc <tcp_close_shutdown+0x148>)
 800999a:	2201      	movs	r2, #1
 800999c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800999e:	4620      	mov	r0, r4
 80099a0:	f7ff f83c 	bl	8008a1c <tcp_free>
  return ERR_OK;
 80099a4:	2000      	movs	r0, #0
      break;
 80099a6:	e7c9      	b.n	800993c <tcp_close_shutdown+0xc8>
 80099a8:	080185dc 	.word	0x080185dc
 80099ac:	08018a34 	.word	0x08018a34
 80099b0:	08016bb4 	.word	0x08016bb4
 80099b4:	20007fac 	.word	0x20007fac
 80099b8:	08018a54 	.word	0x08018a54
 80099bc:	20007fa8 	.word	0x20007fa8
 80099c0:	20007fc0 	.word	0x20007fc0
 80099c4:	20007fb8 	.word	0x20007fb8
 80099c8:	20007fb4 	.word	0x20007fb4

080099cc <tcp_close>:
{
 80099cc:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80099ce:	b178      	cbz	r0, 80099f0 <tcp_close+0x24>
 80099d0:	4603      	mov	r3, r0
  if (pcb->state != LISTEN) {
 80099d2:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80099d6:	2a01      	cmp	r2, #1
 80099d8:	d005      	beq.n	80099e6 <tcp_close+0x1a>
    tcp_set_flags(pcb, TF_RXCLOSED);
 80099da:	f8b0 2042 	ldrh.w	r2, [r0, #66]	; 0x42
 80099de:	f042 0210 	orr.w	r2, r2, #16
 80099e2:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
  return tcp_close_shutdown(pcb, 1);
 80099e6:	2101      	movs	r1, #1
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7ff ff43 	bl	8009874 <tcp_close_shutdown>
}
 80099ee:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80099f0:	4b04      	ldr	r3, [pc, #16]	; (8009a04 <tcp_close+0x38>)
 80099f2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80099f6:	4904      	ldr	r1, [pc, #16]	; (8009a08 <tcp_close+0x3c>)
 80099f8:	4804      	ldr	r0, [pc, #16]	; (8009a0c <tcp_close+0x40>)
 80099fa:	f00b ffc9 	bl	8015990 <iprintf>
 80099fe:	f06f 000f 	mvn.w	r0, #15
 8009a02:	e7f4      	b.n	80099ee <tcp_close+0x22>
 8009a04:	080185dc 	.word	0x080185dc
 8009a08:	08018a70 	.word	0x08018a70
 8009a0c:	08016bb4 	.word	0x08016bb4

08009a10 <tcp_recv_null>:
{
 8009a10:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a12:	b151      	cbz	r1, 8009a2a <tcp_recv_null+0x1a>
 8009a14:	4614      	mov	r4, r2
 8009a16:	4608      	mov	r0, r1
  if (p != NULL) {
 8009a18:	b18a      	cbz	r2, 8009a3e <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 8009a1a:	8911      	ldrh	r1, [r2, #8]
 8009a1c:	f7ff fa8c 	bl	8008f38 <tcp_recved>
    pbuf_free(p);
 8009a20:	4620      	mov	r0, r4
 8009a22:	f7fe fb65 	bl	80080f0 <pbuf_free>
  return ERR_OK;
 8009a26:	2000      	movs	r0, #0
}
 8009a28:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a2a:	4b08      	ldr	r3, [pc, #32]	; (8009a4c <tcp_recv_null+0x3c>)
 8009a2c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009a30:	4907      	ldr	r1, [pc, #28]	; (8009a50 <tcp_recv_null+0x40>)
 8009a32:	4808      	ldr	r0, [pc, #32]	; (8009a54 <tcp_recv_null+0x44>)
 8009a34:	f00b ffac 	bl	8015990 <iprintf>
 8009a38:	f06f 000f 	mvn.w	r0, #15
 8009a3c:	e7f4      	b.n	8009a28 <tcp_recv_null+0x18>
  } else if (err == ERR_OK) {
 8009a3e:	b10b      	cbz	r3, 8009a44 <tcp_recv_null+0x34>
  return ERR_OK;
 8009a40:	2000      	movs	r0, #0
 8009a42:	e7f1      	b.n	8009a28 <tcp_recv_null+0x18>
    return tcp_close(pcb);
 8009a44:	f7ff ffc2 	bl	80099cc <tcp_close>
 8009a48:	e7ee      	b.n	8009a28 <tcp_recv_null+0x18>
 8009a4a:	bf00      	nop
 8009a4c:	080185dc 	.word	0x080185dc
 8009a50:	08018a88 	.word	0x08018a88
 8009a54:	08016bb4 	.word	0x08016bb4

08009a58 <tcp_process_refused_data>:
{
 8009a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a5a:	b338      	cbz	r0, 8009aac <tcp_process_refused_data+0x54>
 8009a5c:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8009a5e:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
 8009a62:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8009a64:	2300      	movs	r3, #0
 8009a66:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009a6a:	f8d0 50ac 	ldr.w	r5, [r0, #172]	; 0xac
 8009a6e:	b33d      	cbz	r5, 8009ac0 <tcp_process_refused_data+0x68>
 8009a70:	4632      	mov	r2, r6
 8009a72:	4601      	mov	r1, r0
 8009a74:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8009a76:	47a8      	blx	r5
 8009a78:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8009a7a:	bb4d      	cbnz	r5, 8009ad0 <tcp_process_refused_data+0x78>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009a7c:	f017 0f20 	tst.w	r7, #32
 8009a80:	d02d      	beq.n	8009ade <tcp_process_refused_data+0x86>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009a82:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8009a86:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009a8a:	d002      	beq.n	8009a92 <tcp_process_refused_data+0x3a>
          pcb->rcv_wnd++;
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
        TCP_EVENT_CLOSED(pcb, err);
 8009a92:	f8d4 60ac 	ldr.w	r6, [r4, #172]	; 0xac
 8009a96:	b316      	cbz	r6, 8009ade <tcp_process_refused_data+0x86>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009aa0:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8009aa2:	f110 0f0d 	cmn.w	r0, #13
 8009aa6:	d11a      	bne.n	8009ade <tcp_process_refused_data+0x86>
          return ERR_ABRT;
 8009aa8:	4605      	mov	r5, r0
 8009aaa:	e018      	b.n	8009ade <tcp_process_refused_data+0x86>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009aac:	4b0d      	ldr	r3, [pc, #52]	; (8009ae4 <tcp_process_refused_data+0x8c>)
 8009aae:	f240 6209 	movw	r2, #1545	; 0x609
 8009ab2:	490d      	ldr	r1, [pc, #52]	; (8009ae8 <tcp_process_refused_data+0x90>)
 8009ab4:	480d      	ldr	r0, [pc, #52]	; (8009aec <tcp_process_refused_data+0x94>)
 8009ab6:	f00b ff6b 	bl	8015990 <iprintf>
 8009aba:	f06f 050f 	mvn.w	r5, #15
 8009abe:	e00e      	b.n	8009ade <tcp_process_refused_data+0x86>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	4632      	mov	r2, r6
 8009ac4:	4601      	mov	r1, r0
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7ff ffa2 	bl	8009a10 <tcp_recv_null>
 8009acc:	4605      	mov	r5, r0
 8009ace:	e7d4      	b.n	8009a7a <tcp_process_refused_data+0x22>
    } else if (err == ERR_ABRT) {
 8009ad0:	f115 0f0d 	cmn.w	r5, #13
 8009ad4:	d003      	beq.n	8009ade <tcp_process_refused_data+0x86>
      pcb->refused_data = refused_data;
 8009ad6:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
      return ERR_INPROGRESS;
 8009ada:	f06f 0504 	mvn.w	r5, #4
}
 8009ade:	4628      	mov	r0, r5
 8009ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	080185dc 	.word	0x080185dc
 8009ae8:	08018aa4 	.word	0x08018aa4
 8009aec:	08016bb4 	.word	0x08016bb4

08009af0 <tcp_fasttmr>:
{
 8009af0:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 8009af2:	4a21      	ldr	r2, [pc, #132]	; (8009b78 <tcp_fasttmr+0x88>)
 8009af4:	7813      	ldrb	r3, [r2, #0]
 8009af6:	3301      	adds	r3, #1
 8009af8:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8009afa:	4b20      	ldr	r3, [pc, #128]	; (8009b7c <tcp_fasttmr+0x8c>)
 8009afc:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8009afe:	e017      	b.n	8009b30 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8009b00:	f043 0302 	orr.w	r3, r3, #2
 8009b04:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        tcp_output(pcb);
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f003 fad7 	bl	800d0bc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009b0e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8009b12:	f023 0303 	bic.w	r3, r3, #3
 8009b16:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 8009b1a:	e017      	b.n	8009b4c <tcp_fasttmr+0x5c>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009b1c:	f023 0308 	bic.w	r3, r3, #8
 8009b20:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        tcp_close_shutdown_fin(pcb);
 8009b24:	4620      	mov	r0, r4
 8009b26:	f7fe ff0d 	bl	8008944 <tcp_close_shutdown_fin>
 8009b2a:	e014      	b.n	8009b56 <tcp_fasttmr+0x66>
      pcb = pcb->next;
 8009b2c:	6b65      	ldr	r5, [r4, #52]	; 0x34
{
 8009b2e:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8009b30:	b304      	cbz	r4, 8009b74 <tcp_fasttmr+0x84>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009b32:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8009b36:	4b10      	ldr	r3, [pc, #64]	; (8009b78 <tcp_fasttmr+0x88>)
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d0f6      	beq.n	8009b2c <tcp_fasttmr+0x3c>
      pcb->last_timer = tcp_timer_ctr;
 8009b3e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
      if (pcb->flags & TF_ACK_DELAY) {
 8009b42:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8009b46:	f013 0f01 	tst.w	r3, #1
 8009b4a:	d1d9      	bne.n	8009b00 <tcp_fasttmr+0x10>
      if (pcb->flags & TF_CLOSEPEND) {
 8009b4c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8009b50:	f013 0f08 	tst.w	r3, #8
 8009b54:	d1e2      	bne.n	8009b1c <tcp_fasttmr+0x2c>
      next = pcb->next;
 8009b56:	6b65      	ldr	r5, [r4, #52]	; 0x34
      if (pcb->refused_data != NULL) {
 8009b58:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d0e6      	beq.n	8009b2e <tcp_fasttmr+0x3e>
        tcp_active_pcbs_changed = 0;
 8009b60:	4e07      	ldr	r6, [pc, #28]	; (8009b80 <tcp_fasttmr+0x90>)
 8009b62:	2300      	movs	r3, #0
 8009b64:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 8009b66:	4620      	mov	r0, r4
 8009b68:	f7ff ff76 	bl	8009a58 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009b6c:	7833      	ldrb	r3, [r6, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d0dd      	beq.n	8009b2e <tcp_fasttmr+0x3e>
 8009b72:	e7c2      	b.n	8009afa <tcp_fasttmr+0xa>
}
 8009b74:	bd70      	pop	{r4, r5, r6, pc}
 8009b76:	bf00      	nop
 8009b78:	20000a82 	.word	0x20000a82
 8009b7c:	20007fac 	.word	0x20007fac
 8009b80:	20007fa8 	.word	0x20007fa8

08009b84 <tcp_slowtmr>:
{
 8009b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b88:	b084      	sub	sp, #16
  ++tcp_ticks;
 8009b8a:	4ab4      	ldr	r2, [pc, #720]	; (8009e5c <tcp_slowtmr+0x2d8>)
 8009b8c:	6813      	ldr	r3, [r2, #0]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009b92:	4ab3      	ldr	r2, [pc, #716]	; (8009e60 <tcp_slowtmr+0x2dc>)
 8009b94:	7813      	ldrb	r3, [r2, #0]
 8009b96:	3301      	adds	r3, #1
 8009b98:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8009b9a:	4bb2      	ldr	r3, [pc, #712]	; (8009e64 <tcp_slowtmr+0x2e0>)
 8009b9c:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 8009b9e:	2600      	movs	r6, #0
 8009ba0:	e1a6      	b.n	8009ef0 <tcp_slowtmr+0x36c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009ba2:	4bb1      	ldr	r3, [pc, #708]	; (8009e68 <tcp_slowtmr+0x2e4>)
 8009ba4:	f240 42be 	movw	r2, #1214	; 0x4be
 8009ba8:	49b0      	ldr	r1, [pc, #704]	; (8009e6c <tcp_slowtmr+0x2e8>)
 8009baa:	48b1      	ldr	r0, [pc, #708]	; (8009e70 <tcp_slowtmr+0x2ec>)
 8009bac:	f00b fef0 	bl	8015990 <iprintf>
 8009bb0:	e1a5      	b.n	8009efe <tcp_slowtmr+0x37a>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009bb2:	4bad      	ldr	r3, [pc, #692]	; (8009e68 <tcp_slowtmr+0x2e4>)
 8009bb4:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009bb8:	49ae      	ldr	r1, [pc, #696]	; (8009e74 <tcp_slowtmr+0x2f0>)
 8009bba:	48ad      	ldr	r0, [pc, #692]	; (8009e70 <tcp_slowtmr+0x2ec>)
 8009bbc:	f00b fee8 	bl	8015990 <iprintf>
 8009bc0:	e1a2      	b.n	8009f08 <tcp_slowtmr+0x384>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009bc2:	4ba9      	ldr	r3, [pc, #676]	; (8009e68 <tcp_slowtmr+0x2e4>)
 8009bc4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009bc8:	49ab      	ldr	r1, [pc, #684]	; (8009e78 <tcp_slowtmr+0x2f4>)
 8009bca:	48a9      	ldr	r0, [pc, #676]	; (8009e70 <tcp_slowtmr+0x2ec>)
 8009bcc:	f00b fee0 	bl	8015990 <iprintf>
 8009bd0:	e19f      	b.n	8009f12 <tcp_slowtmr+0x38e>
      prev = pcb;
 8009bd2:	4626      	mov	r6, r4
      pcb = pcb->next;
 8009bd4:	6b64      	ldr	r4, [r4, #52]	; 0x34
      continue;
 8009bd6:	e18b      	b.n	8009ef0 <tcp_slowtmr+0x36c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009bd8:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8009bdc:	2b05      	cmp	r3, #5
 8009bde:	f240 81a6 	bls.w	8009f2e <tcp_slowtmr+0x3aa>
      ++pcb_remove;
 8009be2:	2501      	movs	r5, #1
 8009be4:	e075      	b.n	8009cd2 <tcp_slowtmr+0x14e>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009be6:	4ba0      	ldr	r3, [pc, #640]	; (8009e68 <tcp_slowtmr+0x2e4>)
 8009be8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009bec:	49a3      	ldr	r1, [pc, #652]	; (8009e7c <tcp_slowtmr+0x2f8>)
 8009bee:	48a0      	ldr	r0, [pc, #640]	; (8009e70 <tcp_slowtmr+0x2ec>)
 8009bf0:	f00b fece 	bl	8015990 <iprintf>
 8009bf4:	e1b4      	b.n	8009f60 <tcp_slowtmr+0x3dc>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f002 ff26 	bl	800ca48 <tcp_split_unsent_seg>
 8009bfc:	b160      	cbz	r0, 8009c18 <tcp_slowtmr+0x94>
              pcb->persist_cnt = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009c04:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 8009c08:	2b06      	cmp	r3, #6
 8009c0a:	f200 80ae 	bhi.w	8009d6a <tcp_slowtmr+0x1e6>
                pcb->persist_backoff++;
 8009c0e:	3301      	adds	r3, #1
 8009c10:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
    pcb_remove = 0;
 8009c14:	2500      	movs	r5, #0
 8009c16:	e05c      	b.n	8009cd2 <tcp_slowtmr+0x14e>
                if (tcp_output(pcb) == ERR_OK) {
 8009c18:	4620      	mov	r0, r4
 8009c1a:	f003 fa4f 	bl	800d0bc <tcp_output>
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	d1ed      	bne.n	8009bfe <tcp_slowtmr+0x7a>
    pcb_remove = 0;
 8009c22:	2500      	movs	r5, #0
 8009c24:	e055      	b.n	8009cd2 <tcp_slowtmr+0x14e>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009c26:	f9b4 3058 	ldrsh.w	r3, [r4, #88]	; 0x58
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d802      	bhi.n	8009c3a <tcp_slowtmr+0xb6>
          ++pcb->rtime;
 8009c34:	3301      	adds	r3, #1
 8009c36:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
        if (pcb->rtime >= pcb->rto) {
 8009c3a:	f9b4 2058 	ldrsh.w	r2, [r4, #88]	; 0x58
 8009c3e:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 8009c42:	429a      	cmp	r2, r3
 8009c44:	db45      	blt.n	8009cd2 <tcp_slowtmr+0x14e>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009c46:	4620      	mov	r0, r4
 8009c48:	f003 f8d0 	bl	800cdec <tcp_rexmit_rto_prepare>
 8009c4c:	b130      	cbz	r0, 8009c5c <tcp_slowtmr+0xd8>
 8009c4e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d13d      	bne.n	8009cd2 <tcp_slowtmr+0x14e>
 8009c56:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009c5a:	b3d3      	cbz	r3, 8009cd2 <tcp_slowtmr+0x14e>
            if (pcb->state != SYN_SENT) {
 8009c5c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d014      	beq.n	8009c8e <tcp_slowtmr+0x10a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009c64:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 8009c68:	2a0c      	cmp	r2, #12
 8009c6a:	bf28      	it	cs
 8009c6c:	220c      	movcs	r2, #12
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009c6e:	f9b4 1064 	ldrsh.w	r1, [r4, #100]	; 0x64
 8009c72:	f9b4 3066 	ldrsh.w	r3, [r4, #102]	; 0x66
 8009c76:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8009c7a:	4981      	ldr	r1, [pc, #516]	; (8009e80 <tcp_slowtmr+0x2fc>)
 8009c7c:	5c8a      	ldrb	r2, [r1, r2]
 8009c7e:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009c80:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009c84:	4293      	cmp	r3, r2
 8009c86:	dc20      	bgt.n	8009cca <tcp_slowtmr+0x146>
 8009c88:	b21b      	sxth	r3, r3
 8009c8a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
            pcb->rtime = 0;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009c94:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 8009c98:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	bf28      	it	cs
 8009ca0:	4613      	movcs	r3, r2
            pcb->ssthresh = eff_wnd >> 1;
 8009ca2:	085b      	lsrs	r3, r3, #1
 8009ca4:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009ca8:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 8009cac:	004a      	lsls	r2, r1, #1
 8009cae:	b292      	uxth	r2, r2
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d201      	bcs.n	8009cb8 <tcp_slowtmr+0x134>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009cb4:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
            pcb->cwnd = pcb->mss;
 8009cb8:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
            pcb->bytes_acked = 0;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
            tcp_rexmit_rto_commit(pcb);
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f003 fbb4 	bl	800d430 <tcp_rexmit_rto_commit>
 8009cc8:	e003      	b.n	8009cd2 <tcp_slowtmr+0x14e>
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009cca:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8009cce:	e7dc      	b.n	8009c8a <tcp_slowtmr+0x106>
      ++pcb_remove;
 8009cd0:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 8009cd2:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8009cd6:	2a06      	cmp	r2, #6
 8009cd8:	d049      	beq.n	8009d6e <tcp_slowtmr+0x1ea>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009cda:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8009cde:	f013 0708 	ands.w	r7, r3, #8
 8009ce2:	d004      	beq.n	8009cee <tcp_slowtmr+0x16a>
 8009ce4:	2a04      	cmp	r2, #4
 8009ce6:	d050      	beq.n	8009d8a <tcp_slowtmr+0x206>
        ((pcb->state == ESTABLISHED) ||
 8009ce8:	2a07      	cmp	r2, #7
 8009cea:	d04e      	beq.n	8009d8a <tcp_slowtmr+0x206>
    pcb_reset = 0;
 8009cec:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 8009cee:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009cf2:	b153      	cbz	r3, 8009d0a <tcp_slowtmr+0x186>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009cf4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009cf6:	4a59      	ldr	r2, [pc, #356]	; (8009e5c <tcp_slowtmr+0x2d8>)
 8009cf8:	6812      	ldr	r2, [r2, #0]
 8009cfa:	1ad2      	subs	r2, r2, r3
 8009cfc:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 8009d00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8009d04:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8009d08:	d26d      	bcs.n	8009de6 <tcp_slowtmr+0x262>
    if (pcb->state == SYN_RCVD) {
 8009d0a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d06d      	beq.n	8009dee <tcp_slowtmr+0x26a>
    if (pcb->state == LAST_ACK) {
 8009d12:	2b09      	cmp	r3, #9
 8009d14:	d074      	beq.n	8009e00 <tcp_slowtmr+0x27c>
    if (pcb_remove) {
 8009d16:	2d00      	cmp	r5, #0
 8009d18:	d17b      	bne.n	8009e12 <tcp_slowtmr+0x28e>
      pcb = pcb->next;
 8009d1a:	6b65      	ldr	r5, [r4, #52]	; 0x34
      ++prev->polltmr;
 8009d1c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009d20:	3301      	adds	r3, #1
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      if (prev->polltmr >= prev->pollinterval) {
 8009d28:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	f0c0 80dd 	bcc.w	8009eec <tcp_slowtmr+0x368>
        prev->polltmr = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        tcp_active_pcbs_changed = 0;
 8009d38:	4a52      	ldr	r2, [pc, #328]	; (8009e84 <tcp_slowtmr+0x300>)
 8009d3a:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 8009d3c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f000 80cb 	beq.w	8009edc <tcp_slowtmr+0x358>
 8009d46:	4621      	mov	r1, r4
 8009d48:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009d4a:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8009d4c:	4b4d      	ldr	r3, [pc, #308]	; (8009e84 <tcp_slowtmr+0x300>)
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f47f af22 	bne.w	8009b9a <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 8009d56:	2800      	cmp	r0, #0
 8009d58:	f000 80c2 	beq.w	8009ee0 <tcp_slowtmr+0x35c>
      prev = pcb;
 8009d5c:	4626      	mov	r6, r4
      pcb = pcb->next;
 8009d5e:	462c      	mov	r4, r5
 8009d60:	e0c6      	b.n	8009ef0 <tcp_slowtmr+0x36c>
          ++pcb_remove; /* max probes reached */
 8009d62:	2501      	movs	r5, #1
 8009d64:	e7b5      	b.n	8009cd2 <tcp_slowtmr+0x14e>
    pcb_remove = 0;
 8009d66:	2500      	movs	r5, #0
 8009d68:	e7b3      	b.n	8009cd2 <tcp_slowtmr+0x14e>
 8009d6a:	2500      	movs	r5, #0
 8009d6c:	e7b1      	b.n	8009cd2 <tcp_slowtmr+0x14e>
      if (pcb->flags & TF_RXCLOSED) {
 8009d6e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8009d72:	f013 0f10 	tst.w	r3, #16
 8009d76:	d0b0      	beq.n	8009cda <tcp_slowtmr+0x156>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009d7a:	4b38      	ldr	r3, [pc, #224]	; (8009e5c <tcp_slowtmr+0x2d8>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	1a5b      	subs	r3, r3, r1
 8009d80:	2b28      	cmp	r3, #40	; 0x28
 8009d82:	d9aa      	bls.n	8009cda <tcp_slowtmr+0x156>
          ++pcb_remove;
 8009d84:	3501      	adds	r5, #1
 8009d86:	b2ed      	uxtb	r5, r5
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in FIN-WAIT-2\n"));
 8009d88:	e7a7      	b.n	8009cda <tcp_slowtmr+0x156>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d8a:	4b34      	ldr	r3, [pc, #208]	; (8009e5c <tcp_slowtmr+0x2d8>)
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009d90:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009d92:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 8009d96:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 8009d9a:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8009d9e:	483a      	ldr	r0, [pc, #232]	; (8009e88 <tcp_slowtmr+0x304>)
 8009da0:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009da4:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8009da8:	d903      	bls.n	8009db2 <tcp_slowtmr+0x22e>
        ++pcb_remove;
 8009daa:	3501      	adds	r5, #1
 8009dac:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 8009dae:	2701      	movs	r7, #1
 8009db0:	e79d      	b.n	8009cee <tcp_slowtmr+0x16a>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009db2:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 8009db6:	4835      	ldr	r0, [pc, #212]	; (8009e8c <tcp_slowtmr+0x308>)
 8009db8:	fb00 1303 	mla	r3, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009dbc:	4932      	ldr	r1, [pc, #200]	; (8009e88 <tcp_slowtmr+0x304>)
 8009dbe:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009dc2:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8009dc6:	d801      	bhi.n	8009dcc <tcp_slowtmr+0x248>
    pcb_reset = 0;
 8009dc8:	2700      	movs	r7, #0
 8009dca:	e790      	b.n	8009cee <tcp_slowtmr+0x16a>
        err = tcp_keepalive(pcb);
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f003 fb65 	bl	800d49c <tcp_keepalive>
        if (err == ERR_OK) {
 8009dd2:	b930      	cbnz	r0, 8009de2 <tcp_slowtmr+0x25e>
          pcb->keep_cnt_sent++;
 8009dd4:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 8009dd8:	3301      	adds	r3, #1
 8009dda:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
    pcb_reset = 0;
 8009dde:	2700      	movs	r7, #0
 8009de0:	e785      	b.n	8009cee <tcp_slowtmr+0x16a>
 8009de2:	2700      	movs	r7, #0
 8009de4:	e783      	b.n	8009cee <tcp_slowtmr+0x16a>
      tcp_free_ooseq(pcb);
 8009de6:	4620      	mov	r0, r4
 8009de8:	f7ff fa0a 	bl	8009200 <tcp_free_ooseq>
 8009dec:	e78d      	b.n	8009d0a <tcp_slowtmr+0x186>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009dee:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009df0:	4a1a      	ldr	r2, [pc, #104]	; (8009e5c <tcp_slowtmr+0x2d8>)
 8009df2:	6812      	ldr	r2, [r2, #0]
 8009df4:	1a52      	subs	r2, r2, r1
 8009df6:	2a28      	cmp	r2, #40	; 0x28
 8009df8:	d98b      	bls.n	8009d12 <tcp_slowtmr+0x18e>
        ++pcb_remove;
 8009dfa:	3501      	adds	r5, #1
 8009dfc:	b2ed      	uxtb	r5, r5
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
 8009dfe:	e788      	b.n	8009d12 <tcp_slowtmr+0x18e>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009e00:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8009e02:	4b16      	ldr	r3, [pc, #88]	; (8009e5c <tcp_slowtmr+0x2d8>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	1a9b      	subs	r3, r3, r2
 8009e08:	2bf0      	cmp	r3, #240	; 0xf0
 8009e0a:	d984      	bls.n	8009d16 <tcp_slowtmr+0x192>
        ++pcb_remove;
 8009e0c:	3501      	adds	r5, #1
 8009e0e:	b2ed      	uxtb	r5, r5
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
 8009e10:	e781      	b.n	8009d16 <tcp_slowtmr+0x192>
      tcp_err_fn err_fn = pcb->errf;
 8009e12:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
      tcp_pcb_purge(pcb);
 8009e16:	4620      	mov	r0, r4
 8009e18:	f7ff f9fe 	bl	8009218 <tcp_pcb_purge>
      if (prev != NULL) {
 8009e1c:	2e00      	cmp	r6, #0
 8009e1e:	d03f      	beq.n	8009ea0 <tcp_slowtmr+0x31c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009e20:	4b10      	ldr	r3, [pc, #64]	; (8009e64 <tcp_slowtmr+0x2e0>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	429c      	cmp	r4, r3
 8009e26:	d033      	beq.n	8009e90 <tcp_slowtmr+0x30c>
        prev->next = pcb->next;
 8009e28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e2a:	6373      	str	r3, [r6, #52]	; 0x34
      if (pcb_reset) {
 8009e2c:	2f00      	cmp	r7, #0
 8009e2e:	d146      	bne.n	8009ebe <tcp_slowtmr+0x33a>
      err_arg = pcb->callback_arg;
 8009e30:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
      pcb = pcb->next;
 8009e34:	6b67      	ldr	r7, [r4, #52]	; 0x34
      tcp_free(pcb2);
 8009e36:	4620      	mov	r0, r4
 8009e38:	f7fe fdf0 	bl	8008a1c <tcp_free>
      tcp_active_pcbs_changed = 0;
 8009e3c:	4b11      	ldr	r3, [pc, #68]	; (8009e84 <tcp_slowtmr+0x300>)
 8009e3e:	2200      	movs	r2, #0
 8009e40:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009e42:	b11d      	cbz	r5, 8009e4c <tcp_slowtmr+0x2c8>
 8009e44:	f06f 010c 	mvn.w	r1, #12
 8009e48:	4640      	mov	r0, r8
 8009e4a:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 8009e4c:	4b0d      	ldr	r3, [pc, #52]	; (8009e84 <tcp_slowtmr+0x300>)
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f47f aea2 	bne.w	8009b9a <tcp_slowtmr+0x16>
      pcb = pcb->next;
 8009e56:	463c      	mov	r4, r7
 8009e58:	e04a      	b.n	8009ef0 <tcp_slowtmr+0x36c>
 8009e5a:	bf00      	nop
 8009e5c:	20007fb0 	.word	0x20007fb0
 8009e60:	20000a82 	.word	0x20000a82
 8009e64:	20007fac 	.word	0x20007fac
 8009e68:	080185dc 	.word	0x080185dc
 8009e6c:	08018acc 	.word	0x08018acc
 8009e70:	08016bb4 	.word	0x08016bb4
 8009e74:	08018af8 	.word	0x08018af8
 8009e78:	08018b24 	.word	0x08018b24
 8009e7c:	08018b88 	.word	0x08018b88
 8009e80:	08018c98 	.word	0x08018c98
 8009e84:	20007fa8 	.word	0x20007fa8
 8009e88:	10624dd3 	.word	0x10624dd3
 8009e8c:	000124f8 	.word	0x000124f8
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009e90:	4b66      	ldr	r3, [pc, #408]	; (800a02c <tcp_slowtmr+0x4a8>)
 8009e92:	f240 526d 	movw	r2, #1389	; 0x56d
 8009e96:	4966      	ldr	r1, [pc, #408]	; (800a030 <tcp_slowtmr+0x4ac>)
 8009e98:	4866      	ldr	r0, [pc, #408]	; (800a034 <tcp_slowtmr+0x4b0>)
 8009e9a:	f00b fd79 	bl	8015990 <iprintf>
 8009e9e:	e7c3      	b.n	8009e28 <tcp_slowtmr+0x2a4>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009ea0:	4b65      	ldr	r3, [pc, #404]	; (800a038 <tcp_slowtmr+0x4b4>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	429c      	cmp	r4, r3
 8009ea6:	d006      	beq.n	8009eb6 <tcp_slowtmr+0x332>
 8009ea8:	4b60      	ldr	r3, [pc, #384]	; (800a02c <tcp_slowtmr+0x4a8>)
 8009eaa:	f240 5271 	movw	r2, #1393	; 0x571
 8009eae:	4963      	ldr	r1, [pc, #396]	; (800a03c <tcp_slowtmr+0x4b8>)
 8009eb0:	4860      	ldr	r0, [pc, #384]	; (800a034 <tcp_slowtmr+0x4b0>)
 8009eb2:	f00b fd6d 	bl	8015990 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009eb6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009eb8:	4b5f      	ldr	r3, [pc, #380]	; (800a038 <tcp_slowtmr+0x4b4>)
 8009eba:	601a      	str	r2, [r3, #0]
 8009ebc:	e7b6      	b.n	8009e2c <tcp_slowtmr+0x2a8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009ebe:	f104 0318 	add.w	r3, r4, #24
 8009ec2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009ec4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8009ec6:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 8009eca:	9002      	str	r0, [sp, #8]
 8009ecc:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8009ece:	9001      	str	r0, [sp, #4]
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	4623      	mov	r3, r4
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f003 f867 	bl	800cfa8 <tcp_rst>
 8009eda:	e7a9      	b.n	8009e30 <tcp_slowtmr+0x2ac>
        TCP_EVENT_POLL(prev, err);
 8009edc:	2000      	movs	r0, #0
 8009ede:	e735      	b.n	8009d4c <tcp_slowtmr+0x1c8>
          tcp_output(prev);
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f003 f8eb 	bl	800d0bc <tcp_output>
      prev = pcb;
 8009ee6:	4626      	mov	r6, r4
      pcb = pcb->next;
 8009ee8:	462c      	mov	r4, r5
 8009eea:	e001      	b.n	8009ef0 <tcp_slowtmr+0x36c>
      prev = pcb;
 8009eec:	4626      	mov	r6, r4
      pcb = pcb->next;
 8009eee:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8009ef0:	2c00      	cmp	r4, #0
 8009ef2:	d058      	beq.n	8009fa6 <tcp_slowtmr+0x422>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009ef4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f43f ae52 	beq.w	8009ba2 <tcp_slowtmr+0x1e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009efe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	f43f ae55 	beq.w	8009bb2 <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009f08:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009f0c:	2b0a      	cmp	r3, #10
 8009f0e:	f43f ae58 	beq.w	8009bc2 <tcp_slowtmr+0x3e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009f12:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8009f16:	4b4a      	ldr	r3, [pc, #296]	; (800a040 <tcp_slowtmr+0x4bc>)
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	f43f ae59 	beq.w	8009bd2 <tcp_slowtmr+0x4e>
    pcb->last_timer = tcp_timer_ctr;
 8009f20:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009f24:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	f43f ae55 	beq.w	8009bd8 <tcp_slowtmr+0x54>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009f2e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8009f32:	2b0b      	cmp	r3, #11
 8009f34:	f63f aecc 	bhi.w	8009cd0 <tcp_slowtmr+0x14c>
      if (pcb->persist_backoff > 0) {
 8009f38:	f894 50c1 	ldrb.w	r5, [r4, #193]	; 0xc1
 8009f3c:	2d00      	cmp	r5, #0
 8009f3e:	f43f ae72 	beq.w	8009c26 <tcp_slowtmr+0xa2>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009f42:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009f46:	b133      	cbz	r3, 8009f56 <tcp_slowtmr+0x3d2>
 8009f48:	4b38      	ldr	r3, [pc, #224]	; (800a02c <tcp_slowtmr+0x4a8>)
 8009f4a:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009f4e:	493d      	ldr	r1, [pc, #244]	; (800a044 <tcp_slowtmr+0x4c0>)
 8009f50:	4838      	ldr	r0, [pc, #224]	; (800a034 <tcp_slowtmr+0x4b0>)
 8009f52:	f00b fd1d 	bl	8015990 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009f56:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f43f ae43 	beq.w	8009be6 <tcp_slowtmr+0x62>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009f60:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
 8009f64:	2b0b      	cmp	r3, #11
 8009f66:	f63f aefc 	bhi.w	8009d62 <tcp_slowtmr+0x1de>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009f6a:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	4a35      	ldr	r2, [pc, #212]	; (800a048 <tcp_slowtmr+0x4c4>)
 8009f72:	5cd2      	ldrb	r2, [r2, r3]
          if (pcb->persist_cnt < backoff_cnt) {
 8009f74:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d202      	bcs.n	8009f82 <tcp_slowtmr+0x3fe>
            pcb->persist_cnt++;
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
          if (pcb->persist_cnt >= backoff_cnt) {
 8009f82:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8009f86:	4293      	cmp	r3, r2
 8009f88:	f4ff aeed 	bcc.w	8009d66 <tcp_slowtmr+0x1e2>
            if (pcb->snd_wnd == 0) {
 8009f8c:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
 8009f90:	2900      	cmp	r1, #0
 8009f92:	f47f ae30 	bne.w	8009bf6 <tcp_slowtmr+0x72>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009f96:	4620      	mov	r0, r4
 8009f98:	f003 faae 	bl	800d4f8 <tcp_zero_window_probe>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	f43f ae2e 	beq.w	8009bfe <tcp_slowtmr+0x7a>
    pcb_remove = 0;
 8009fa2:	2500      	movs	r5, #0
 8009fa4:	e695      	b.n	8009cd2 <tcp_slowtmr+0x14e>
  pcb = tcp_tw_pcbs;
 8009fa6:	4b29      	ldr	r3, [pc, #164]	; (800a04c <tcp_slowtmr+0x4c8>)
 8009fa8:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 8009faa:	e00e      	b.n	8009fca <tcp_slowtmr+0x446>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009fac:	4b1f      	ldr	r3, [pc, #124]	; (800a02c <tcp_slowtmr+0x4a8>)
 8009fae:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009fb2:	4927      	ldr	r1, [pc, #156]	; (800a050 <tcp_slowtmr+0x4cc>)
 8009fb4:	481f      	ldr	r0, [pc, #124]	; (800a034 <tcp_slowtmr+0x4b0>)
 8009fb6:	f00b fceb 	bl	8015990 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009fba:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8009fbc:	4b25      	ldr	r3, [pc, #148]	; (800a054 <tcp_slowtmr+0x4d0>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	1a9b      	subs	r3, r3, r2
 8009fc2:	2bf0      	cmp	r3, #240	; 0xf0
 8009fc4:	d807      	bhi.n	8009fd6 <tcp_slowtmr+0x452>
      prev = pcb;
 8009fc6:	462c      	mov	r4, r5
      pcb = pcb->next;
 8009fc8:	6b6d      	ldr	r5, [r5, #52]	; 0x34
  while (pcb != NULL) {
 8009fca:	b35d      	cbz	r5, 800a024 <tcp_slowtmr+0x4a0>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009fcc:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8009fd0:	2b0a      	cmp	r3, #10
 8009fd2:	d0f2      	beq.n	8009fba <tcp_slowtmr+0x436>
 8009fd4:	e7ea      	b.n	8009fac <tcp_slowtmr+0x428>
      tcp_pcb_purge(pcb);
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	f7ff f91e 	bl	8009218 <tcp_pcb_purge>
      if (prev != NULL) {
 8009fdc:	b19c      	cbz	r4, 800a006 <tcp_slowtmr+0x482>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009fde:	4b1b      	ldr	r3, [pc, #108]	; (800a04c <tcp_slowtmr+0x4c8>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	429d      	cmp	r5, r3
 8009fe4:	d007      	beq.n	8009ff6 <tcp_slowtmr+0x472>
        prev->next = pcb->next;
 8009fe6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009fe8:	6363      	str	r3, [r4, #52]	; 0x34
      pcb = pcb->next;
 8009fea:	6b6e      	ldr	r6, [r5, #52]	; 0x34
      tcp_free(pcb2);
 8009fec:	4628      	mov	r0, r5
 8009fee:	f7fe fd15 	bl	8008a1c <tcp_free>
      pcb = pcb->next;
 8009ff2:	4635      	mov	r5, r6
 8009ff4:	e7e9      	b.n	8009fca <tcp_slowtmr+0x446>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009ff6:	4b0d      	ldr	r3, [pc, #52]	; (800a02c <tcp_slowtmr+0x4a8>)
 8009ff8:	f240 52af 	movw	r2, #1455	; 0x5af
 8009ffc:	4916      	ldr	r1, [pc, #88]	; (800a058 <tcp_slowtmr+0x4d4>)
 8009ffe:	480d      	ldr	r0, [pc, #52]	; (800a034 <tcp_slowtmr+0x4b0>)
 800a000:	f00b fcc6 	bl	8015990 <iprintf>
 800a004:	e7ef      	b.n	8009fe6 <tcp_slowtmr+0x462>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a006:	4b11      	ldr	r3, [pc, #68]	; (800a04c <tcp_slowtmr+0x4c8>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	429d      	cmp	r5, r3
 800a00c:	d006      	beq.n	800a01c <tcp_slowtmr+0x498>
 800a00e:	4b07      	ldr	r3, [pc, #28]	; (800a02c <tcp_slowtmr+0x4a8>)
 800a010:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a014:	4911      	ldr	r1, [pc, #68]	; (800a05c <tcp_slowtmr+0x4d8>)
 800a016:	4807      	ldr	r0, [pc, #28]	; (800a034 <tcp_slowtmr+0x4b0>)
 800a018:	f00b fcba 	bl	8015990 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a01c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800a01e:	4b0b      	ldr	r3, [pc, #44]	; (800a04c <tcp_slowtmr+0x4c8>)
 800a020:	601a      	str	r2, [r3, #0]
 800a022:	e7e2      	b.n	8009fea <tcp_slowtmr+0x466>
}
 800a024:	b004      	add	sp, #16
 800a026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a02a:	bf00      	nop
 800a02c:	080185dc 	.word	0x080185dc
 800a030:	08018bc0 	.word	0x08018bc0
 800a034:	08016bb4 	.word	0x08016bb4
 800a038:	20007fac 	.word	0x20007fac
 800a03c:	08018bec 	.word	0x08018bec
 800a040:	20000a82 	.word	0x20000a82
 800a044:	08018b54 	.word	0x08018b54
 800a048:	08018cb8 	.word	0x08018cb8
 800a04c:	20007fbc 	.word	0x20007fbc
 800a050:	08018c18 	.word	0x08018c18
 800a054:	20007fb0 	.word	0x20007fb0
 800a058:	08018c48 	.word	0x08018c48
 800a05c:	08018c70 	.word	0x08018c70

0800a060 <tcp_tmr>:
{
 800a060:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800a062:	f7ff fd45 	bl	8009af0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800a066:	4a06      	ldr	r2, [pc, #24]	; (800a080 <tcp_tmr+0x20>)
 800a068:	7813      	ldrb	r3, [r2, #0]
 800a06a:	3301      	adds	r3, #1
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	7013      	strb	r3, [r2, #0]
 800a070:	f013 0f01 	tst.w	r3, #1
 800a074:	d100      	bne.n	800a078 <tcp_tmr+0x18>
}
 800a076:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 800a078:	f7ff fd84 	bl	8009b84 <tcp_slowtmr>
}
 800a07c:	e7fb      	b.n	800a076 <tcp_tmr+0x16>
 800a07e:	bf00      	nop
 800a080:	20000a81 	.word	0x20000a81

0800a084 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 800a084:	4a0a      	ldr	r2, [pc, #40]	; (800a0b0 <tcp_get_next_optbyte+0x2c>)
 800a086:	8813      	ldrh	r3, [r2, #0]
 800a088:	1c59      	adds	r1, r3, #1
 800a08a:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a08c:	4a09      	ldr	r2, [pc, #36]	; (800a0b4 <tcp_get_next_optbyte+0x30>)
 800a08e:	6811      	ldr	r1, [r2, #0]
 800a090:	b119      	cbz	r1, 800a09a <tcp_get_next_optbyte+0x16>
 800a092:	4a09      	ldr	r2, [pc, #36]	; (800a0b8 <tcp_get_next_optbyte+0x34>)
 800a094:	8812      	ldrh	r2, [r2, #0]
 800a096:	4293      	cmp	r3, r2
 800a098:	d204      	bcs.n	800a0a4 <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a09a:	4a08      	ldr	r2, [pc, #32]	; (800a0bc <tcp_get_next_optbyte+0x38>)
 800a09c:	6812      	ldr	r2, [r2, #0]
    return opts[optidx];
 800a09e:	4413      	add	r3, r2
 800a0a0:	7d18      	ldrb	r0, [r3, #20]
 800a0a2:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	b2d2      	uxtb	r2, r2
 800a0a8:	1a9b      	subs	r3, r3, r2
 800a0aa:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 800a0ac:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800a0ae:	4770      	bx	lr
 800a0b0:	20000ab0 	.word	0x20000ab0
 800a0b4:	20000abc 	.word	0x20000abc
 800a0b8:	20000ab8 	.word	0x20000ab8
 800a0bc:	20000ab4 	.word	0x20000ab4

0800a0c0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a0c0:	b538      	push	{r3, r4, r5, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	b1e8      	cbz	r0, 800a102 <tcp_parseopt+0x42>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a0c6:	4b22      	ldr	r3, [pc, #136]	; (800a150 <tcp_parseopt+0x90>)
 800a0c8:	881b      	ldrh	r3, [r3, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d03f      	beq.n	800a14e <tcp_parseopt+0x8e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a0ce:	4b21      	ldr	r3, [pc, #132]	; (800a154 <tcp_parseopt+0x94>)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	801a      	strh	r2, [r3, #0]
 800a0d4:	4b1f      	ldr	r3, [pc, #124]	; (800a154 <tcp_parseopt+0x94>)
 800a0d6:	881a      	ldrh	r2, [r3, #0]
 800a0d8:	4b1d      	ldr	r3, [pc, #116]	; (800a150 <tcp_parseopt+0x90>)
 800a0da:	881b      	ldrh	r3, [r3, #0]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d236      	bcs.n	800a14e <tcp_parseopt+0x8e>
      u8_t opt = tcp_get_next_optbyte();
 800a0e0:	f7ff ffd0 	bl	800a084 <tcp_get_next_optbyte>
      switch (opt) {
 800a0e4:	2801      	cmp	r0, #1
 800a0e6:	d0f5      	beq.n	800a0d4 <tcp_parseopt+0x14>
 800a0e8:	2802      	cmp	r0, #2
 800a0ea:	d012      	beq.n	800a112 <tcp_parseopt+0x52>
 800a0ec:	b378      	cbz	r0, 800a14e <tcp_parseopt+0x8e>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a0ee:	f7ff ffc9 	bl	800a084 <tcp_get_next_optbyte>
          if (data < 2) {
 800a0f2:	2801      	cmp	r0, #1
 800a0f4:	d92b      	bls.n	800a14e <tcp_parseopt+0x8e>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a0f6:	4b17      	ldr	r3, [pc, #92]	; (800a154 <tcp_parseopt+0x94>)
 800a0f8:	881a      	ldrh	r2, [r3, #0]
 800a0fa:	4410      	add	r0, r2
 800a0fc:	3802      	subs	r0, #2
 800a0fe:	8018      	strh	r0, [r3, #0]
 800a100:	e7e8      	b.n	800a0d4 <tcp_parseopt+0x14>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a102:	4b15      	ldr	r3, [pc, #84]	; (800a158 <tcp_parseopt+0x98>)
 800a104:	f240 727d 	movw	r2, #1917	; 0x77d
 800a108:	4914      	ldr	r1, [pc, #80]	; (800a15c <tcp_parseopt+0x9c>)
 800a10a:	4815      	ldr	r0, [pc, #84]	; (800a160 <tcp_parseopt+0xa0>)
 800a10c:	f00b fc40 	bl	8015990 <iprintf>
 800a110:	e7d9      	b.n	800a0c6 <tcp_parseopt+0x6>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a112:	f7ff ffb7 	bl	800a084 <tcp_get_next_optbyte>
 800a116:	2804      	cmp	r0, #4
 800a118:	d119      	bne.n	800a14e <tcp_parseopt+0x8e>
 800a11a:	4b0e      	ldr	r3, [pc, #56]	; (800a154 <tcp_parseopt+0x94>)
 800a11c:	881b      	ldrh	r3, [r3, #0]
 800a11e:	3301      	adds	r3, #1
 800a120:	4a0b      	ldr	r2, [pc, #44]	; (800a150 <tcp_parseopt+0x90>)
 800a122:	8812      	ldrh	r2, [r2, #0]
 800a124:	4293      	cmp	r3, r2
 800a126:	da12      	bge.n	800a14e <tcp_parseopt+0x8e>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a128:	f7ff ffac 	bl	800a084 <tcp_get_next_optbyte>
 800a12c:	b285      	uxth	r5, r0
 800a12e:	022d      	lsls	r5, r5, #8
 800a130:	b2ad      	uxth	r5, r5
          mss |= tcp_get_next_optbyte();
 800a132:	f7ff ffa7 	bl	800a084 <tcp_get_next_optbyte>
 800a136:	b280      	uxth	r0, r0
 800a138:	4305      	orrs	r5, r0
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a13a:	1e6b      	subs	r3, r5, #1
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a142:	d301      	bcc.n	800a148 <tcp_parseopt+0x88>
 800a144:	f44f 7506 	mov.w	r5, #536	; 0x218
 800a148:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
          break;
 800a14c:	e7c2      	b.n	800a0d4 <tcp_parseopt+0x14>
      }
    }
  }
}
 800a14e:	bd38      	pop	{r3, r4, r5, pc}
 800a150:	20000ac0 	.word	0x20000ac0
 800a154:	20000ab0 	.word	0x20000ab0
 800a158:	08018cc0 	.word	0x08018cc0
 800a15c:	08018cf4 	.word	0x08018cf4
 800a160:	08016bb4 	.word	0x08016bb4

0800a164 <tcp_input_delayed_close>:
{
 800a164:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a166:	4604      	mov	r4, r0
 800a168:	b130      	cbz	r0, 800a178 <tcp_input_delayed_close+0x14>
  if (recv_flags & TF_CLOSED) {
 800a16a:	4b12      	ldr	r3, [pc, #72]	; (800a1b4 <tcp_input_delayed_close+0x50>)
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	f013 0f10 	tst.w	r3, #16
 800a172:	d109      	bne.n	800a188 <tcp_input_delayed_close+0x24>
  return 0;
 800a174:	2000      	movs	r0, #0
}
 800a176:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a178:	4b0f      	ldr	r3, [pc, #60]	; (800a1b8 <tcp_input_delayed_close+0x54>)
 800a17a:	f240 225a 	movw	r2, #602	; 0x25a
 800a17e:	490f      	ldr	r1, [pc, #60]	; (800a1bc <tcp_input_delayed_close+0x58>)
 800a180:	480f      	ldr	r0, [pc, #60]	; (800a1c0 <tcp_input_delayed_close+0x5c>)
 800a182:	f00b fc05 	bl	8015990 <iprintf>
 800a186:	e7f0      	b.n	800a16a <tcp_input_delayed_close+0x6>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a188:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a18c:	f013 0f10 	tst.w	r3, #16
 800a190:	d106      	bne.n	800a1a0 <tcp_input_delayed_close+0x3c>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a192:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800a196:	b11b      	cbz	r3, 800a1a0 <tcp_input_delayed_close+0x3c>
 800a198:	f06f 010e 	mvn.w	r1, #14
 800a19c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a19e:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	4808      	ldr	r0, [pc, #32]	; (800a1c4 <tcp_input_delayed_close+0x60>)
 800a1a4:	f7ff f872 	bl	800928c <tcp_pcb_remove>
    tcp_free(pcb);
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	f7fe fc37 	bl	8008a1c <tcp_free>
    return 1;
 800a1ae:	2001      	movs	r0, #1
 800a1b0:	e7e1      	b.n	800a176 <tcp_input_delayed_close+0x12>
 800a1b2:	bf00      	nop
 800a1b4:	20000aa8 	.word	0x20000aa8
 800a1b8:	08018cc0 	.word	0x08018cc0
 800a1bc:	08018d10 	.word	0x08018d10
 800a1c0:	08016bb4 	.word	0x08016bb4
 800a1c4:	20007fac 	.word	0x20007fac

0800a1c8 <tcp_timewait_input>:
  if (flags & TCP_RST) {
 800a1c8:	4b25      	ldr	r3, [pc, #148]	; (800a260 <tcp_timewait_input+0x98>)
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	f013 0f04 	tst.w	r3, #4
 800a1d0:	d145      	bne.n	800a25e <tcp_timewait_input+0x96>
{
 800a1d2:	b530      	push	{r4, r5, lr}
 800a1d4:	b085      	sub	sp, #20
 800a1d6:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a1d8:	b1a8      	cbz	r0, 800a206 <tcp_timewait_input+0x3e>
  if (flags & TCP_SYN) {
 800a1da:	4b21      	ldr	r3, [pc, #132]	; (800a260 <tcp_timewait_input+0x98>)
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	f013 0f02 	tst.w	r3, #2
 800a1e2:	d02b      	beq.n	800a23c <tcp_timewait_input+0x74>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a1e4:	4b1f      	ldr	r3, [pc, #124]	; (800a264 <tcp_timewait_input+0x9c>)
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a1ea:	1ad1      	subs	r1, r2, r3
 800a1ec:	2900      	cmp	r1, #0
 800a1ee:	db05      	blt.n	800a1fc <tcp_timewait_input+0x34>
 800a1f0:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800a1f4:	440b      	add	r3, r1
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	dd0c      	ble.n	800a216 <tcp_timewait_input+0x4e>
  if ((tcplen > 0)) {
 800a1fc:	4b1a      	ldr	r3, [pc, #104]	; (800a268 <tcp_timewait_input+0xa0>)
 800a1fe:	881b      	ldrh	r3, [r3, #0]
 800a200:	bb1b      	cbnz	r3, 800a24a <tcp_timewait_input+0x82>
}
 800a202:	b005      	add	sp, #20
 800a204:	bd30      	pop	{r4, r5, pc}
  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a206:	4b19      	ldr	r3, [pc, #100]	; (800a26c <tcp_timewait_input+0xa4>)
 800a208:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a20c:	4918      	ldr	r1, [pc, #96]	; (800a270 <tcp_timewait_input+0xa8>)
 800a20e:	4819      	ldr	r0, [pc, #100]	; (800a274 <tcp_timewait_input+0xac>)
 800a210:	f00b fbbe 	bl	8015990 <iprintf>
 800a214:	e7e1      	b.n	800a1da <tcp_timewait_input+0x12>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a216:	4b18      	ldr	r3, [pc, #96]	; (800a278 <tcp_timewait_input+0xb0>)
 800a218:	6819      	ldr	r1, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a21a:	4b18      	ldr	r3, [pc, #96]	; (800a27c <tcp_timewait_input+0xb4>)
 800a21c:	4812      	ldr	r0, [pc, #72]	; (800a268 <tcp_timewait_input+0xa0>)
 800a21e:	8800      	ldrh	r0, [r0, #0]
 800a220:	880d      	ldrh	r5, [r1, #0]
 800a222:	9502      	str	r5, [sp, #8]
 800a224:	8849      	ldrh	r1, [r1, #2]
 800a226:	9101      	str	r1, [sp, #4]
 800a228:	f1a3 0118 	sub.w	r1, r3, #24
 800a22c:	9100      	str	r1, [sp, #0]
 800a22e:	4402      	add	r2, r0
 800a230:	4913      	ldr	r1, [pc, #76]	; (800a280 <tcp_timewait_input+0xb8>)
 800a232:	6809      	ldr	r1, [r1, #0]
 800a234:	4620      	mov	r0, r4
 800a236:	f002 feb7 	bl	800cfa8 <tcp_rst>
      return;
 800a23a:	e7e2      	b.n	800a202 <tcp_timewait_input+0x3a>
  } else if (flags & TCP_FIN) {
 800a23c:	f013 0f01 	tst.w	r3, #1
 800a240:	d0dc      	beq.n	800a1fc <tcp_timewait_input+0x34>
    pcb->tmr = tcp_ticks;
 800a242:	4b10      	ldr	r3, [pc, #64]	; (800a284 <tcp_timewait_input+0xbc>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	64a3      	str	r3, [r4, #72]	; 0x48
 800a248:	e7d8      	b.n	800a1fc <tcp_timewait_input+0x34>
    tcp_ack_now(pcb);
 800a24a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a24e:	f043 0302 	orr.w	r3, r3, #2
 800a252:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    tcp_output(pcb);
 800a256:	4620      	mov	r0, r4
 800a258:	f002 ff30 	bl	800d0bc <tcp_output>
 800a25c:	e7d1      	b.n	800a202 <tcp_timewait_input+0x3a>
 800a25e:	4770      	bx	lr
 800a260:	20000a88 	.word	0x20000a88
 800a264:	20000aac 	.word	0x20000aac
 800a268:	20000ac2 	.word	0x20000ac2
 800a26c:	08018cc0 	.word	0x08018cc0
 800a270:	08018d38 	.word	0x08018d38
 800a274:	08016bb4 	.word	0x08016bb4
 800a278:	20000ab4 	.word	0x20000ab4
 800a27c:	20003e60 	.word	0x20003e60
 800a280:	20000a84 	.word	0x20000a84
 800a284:	20007fb0 	.word	0x20007fb0

0800a288 <tcp_listen_input>:
  if (flags & TCP_RST) {
 800a288:	4b6f      	ldr	r3, [pc, #444]	; (800a448 <tcp_listen_input+0x1c0>)
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	f013 0f04 	tst.w	r3, #4
 800a290:	f040 80d9 	bne.w	800a446 <tcp_listen_input+0x1be>
{
 800a294:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a296:	b085      	sub	sp, #20
 800a298:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a29a:	b148      	cbz	r0, 800a2b0 <tcp_listen_input+0x28>
  if (flags & TCP_ACK) {
 800a29c:	4b6a      	ldr	r3, [pc, #424]	; (800a448 <tcp_listen_input+0x1c0>)
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	f013 0f10 	tst.w	r3, #16
 800a2a4:	d10c      	bne.n	800a2c0 <tcp_listen_input+0x38>
  } else if (flags & TCP_SYN) {
 800a2a6:	f013 0f02 	tst.w	r3, #2
 800a2aa:	d11e      	bne.n	800a2ea <tcp_listen_input+0x62>
}
 800a2ac:	b005      	add	sp, #20
 800a2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a2b0:	4b66      	ldr	r3, [pc, #408]	; (800a44c <tcp_listen_input+0x1c4>)
 800a2b2:	f240 2281 	movw	r2, #641	; 0x281
 800a2b6:	4966      	ldr	r1, [pc, #408]	; (800a450 <tcp_listen_input+0x1c8>)
 800a2b8:	4866      	ldr	r0, [pc, #408]	; (800a454 <tcp_listen_input+0x1cc>)
 800a2ba:	f00b fb69 	bl	8015990 <iprintf>
 800a2be:	e7ed      	b.n	800a29c <tcp_listen_input+0x14>
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a2c0:	4b65      	ldr	r3, [pc, #404]	; (800a458 <tcp_listen_input+0x1d0>)
 800a2c2:	6819      	ldr	r1, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2c4:	4b65      	ldr	r3, [pc, #404]	; (800a45c <tcp_listen_input+0x1d4>)
 800a2c6:	4a66      	ldr	r2, [pc, #408]	; (800a460 <tcp_listen_input+0x1d8>)
 800a2c8:	8810      	ldrh	r0, [r2, #0]
 800a2ca:	4a66      	ldr	r2, [pc, #408]	; (800a464 <tcp_listen_input+0x1dc>)
 800a2cc:	6812      	ldr	r2, [r2, #0]
 800a2ce:	880c      	ldrh	r4, [r1, #0]
 800a2d0:	9402      	str	r4, [sp, #8]
 800a2d2:	8849      	ldrh	r1, [r1, #2]
 800a2d4:	9101      	str	r1, [sp, #4]
 800a2d6:	f1a3 0118 	sub.w	r1, r3, #24
 800a2da:	9100      	str	r1, [sp, #0]
 800a2dc:	4402      	add	r2, r0
 800a2de:	4962      	ldr	r1, [pc, #392]	; (800a468 <tcp_listen_input+0x1e0>)
 800a2e0:	6809      	ldr	r1, [r1, #0]
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	f002 fe60 	bl	800cfa8 <tcp_rst>
 800a2e8:	e7e0      	b.n	800a2ac <tcp_listen_input+0x24>
    npcb = tcp_alloc(pcb->prio);
 800a2ea:	f895 003d 	ldrb.w	r0, [r5, #61]	; 0x3d
 800a2ee:	f7ff fa4b 	bl	8009788 <tcp_alloc>
    if (npcb == NULL) {
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	d076      	beq.n	800a3e6 <tcp_listen_input+0x15e>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a2f8:	4b5c      	ldr	r3, [pc, #368]	; (800a46c <tcp_listen_input+0x1e4>)
 800a2fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a2fe:	7503      	strb	r3, [r0, #20]
 800a300:	2b06      	cmp	r3, #6
 800a302:	d07a      	beq.n	800a3fa <tcp_listen_input+0x172>
 800a304:	4b59      	ldr	r3, [pc, #356]	; (800a46c <tcp_listen_input+0x1e4>)
 800a306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a308:	6003      	str	r3, [r0, #0]
 800a30a:	2300      	movs	r3, #0
 800a30c:	60c3      	str	r3, [r0, #12]
 800a30e:	6083      	str	r3, [r0, #8]
 800a310:	6043      	str	r3, [r0, #4]
 800a312:	7403      	strb	r3, [r0, #16]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a314:	4b55      	ldr	r3, [pc, #340]	; (800a46c <tcp_listen_input+0x1e4>)
 800a316:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a31a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800a31e:	2b06      	cmp	r3, #6
 800a320:	d078      	beq.n	800a414 <tcp_listen_input+0x18c>
 800a322:	4b52      	ldr	r3, [pc, #328]	; (800a46c <tcp_listen_input+0x1e4>)
 800a324:	695b      	ldr	r3, [r3, #20]
 800a326:	61a3      	str	r3, [r4, #24]
 800a328:	2300      	movs	r3, #0
 800a32a:	6263      	str	r3, [r4, #36]	; 0x24
 800a32c:	6223      	str	r3, [r4, #32]
 800a32e:	61e3      	str	r3, [r4, #28]
 800a330:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    npcb->local_port = pcb->local_port;
 800a334:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
 800a336:	87e3      	strh	r3, [r4, #62]	; 0x3e
    npcb->remote_port = tcphdr->src;
 800a338:	4e47      	ldr	r6, [pc, #284]	; (800a458 <tcp_listen_input+0x1d0>)
 800a33a:	6833      	ldr	r3, [r6, #0]
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    npcb->state = SYN_RCVD;
 800a342:	2303      	movs	r3, #3
 800a344:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    npcb->rcv_nxt = seqno + 1;
 800a348:	4f46      	ldr	r7, [pc, #280]	; (800a464 <tcp_listen_input+0x1dc>)
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	3301      	adds	r3, #1
 800a34e:	64e3      	str	r3, [r4, #76]	; 0x4c
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a350:	6563      	str	r3, [r4, #84]	; 0x54
    iss = tcp_next_iss(npcb);
 800a352:	4620      	mov	r0, r4
 800a354:	f7fe ff04 	bl	8009160 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 800a358:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    npcb->snd_nxt = iss;
 800a35c:	67a0      	str	r0, [r4, #120]	; 0x78
    npcb->lastack = iss;
 800a35e:	66e0      	str	r0, [r4, #108]	; 0x6c
    npcb->snd_lbb = iss;
 800a360:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	3b01      	subs	r3, #1
 800a368:	67e3      	str	r3, [r4, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 800a36a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a36c:	63a3      	str	r3, [r4, #56]	; 0x38
    npcb->listener = pcb;
 800a36e:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a372:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800a376:	f003 030c 	and.w	r3, r3, #12
 800a37a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    npcb->netif_idx = pcb->netif_idx;
 800a37e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800a382:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    TCP_REG_ACTIVE(npcb);
 800a386:	4b3a      	ldr	r3, [pc, #232]	; (800a470 <tcp_listen_input+0x1e8>)
 800a388:	681a      	ldr	r2, [r3, #0]
 800a38a:	6362      	str	r2, [r4, #52]	; 0x34
 800a38c:	601c      	str	r4, [r3, #0]
 800a38e:	f003 f997 	bl	800d6c0 <tcp_timer_needed>
 800a392:	4b38      	ldr	r3, [pc, #224]	; (800a474 <tcp_listen_input+0x1ec>)
 800a394:	2201      	movs	r2, #1
 800a396:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a398:	4620      	mov	r0, r4
 800a39a:	f7ff fe91 	bl	800a0c0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a39e:	6833      	ldr	r3, [r6, #0]
 800a3a0:	89db      	ldrh	r3, [r3, #14]
 800a3a2:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a3a6:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a3aa:	f8b4 505a 	ldrh.w	r5, [r4, #90]	; 0x5a
 800a3ae:	f114 0618 	adds.w	r6, r4, #24
 800a3b2:	d003      	beq.n	800a3bc <tcp_listen_input+0x134>
 800a3b4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a3b8:	2b06      	cmp	r3, #6
 800a3ba:	d039      	beq.n	800a430 <tcp_listen_input+0x1a8>
 800a3bc:	f104 0018 	add.w	r0, r4, #24
 800a3c0:	f006 fba4 	bl	8010b0c <ip4_route>
 800a3c4:	4601      	mov	r1, r0
 800a3c6:	4632      	mov	r2, r6
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	f7fe fee5 	bl	8009198 <tcp_eff_send_mss_netif>
 800a3ce:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a3d2:	2112      	movs	r1, #18
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f002 fc17 	bl	800cc08 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800a3da:	2800      	cmp	r0, #0
 800a3dc:	d12e      	bne.n	800a43c <tcp_listen_input+0x1b4>
    tcp_output(npcb);
 800a3de:	4620      	mov	r0, r4
 800a3e0:	f002 fe6c 	bl	800d0bc <tcp_output>
 800a3e4:	e762      	b.n	800a2ac <tcp_listen_input+0x24>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a3e6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f43f af5f 	beq.w	800a2ac <tcp_listen_input+0x24>
 800a3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800a3f6:	4798      	blx	r3
      return;
 800a3f8:	e758      	b.n	800a2ac <tcp_listen_input+0x24>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a3fa:	4b1c      	ldr	r3, [pc, #112]	; (800a46c <tcp_listen_input+0x1e4>)
 800a3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3fe:	6002      	str	r2, [r0, #0]
 800a400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a402:	6042      	str	r2, [r0, #4]
 800a404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a406:	6082      	str	r2, [r0, #8]
 800a408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a40a:	60c2      	str	r2, [r0, #12]
 800a40c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a410:	7403      	strb	r3, [r0, #16]
 800a412:	e77f      	b.n	800a314 <tcp_listen_input+0x8c>
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a414:	4b15      	ldr	r3, [pc, #84]	; (800a46c <tcp_listen_input+0x1e4>)
 800a416:	695a      	ldr	r2, [r3, #20]
 800a418:	61a2      	str	r2, [r4, #24]
 800a41a:	699a      	ldr	r2, [r3, #24]
 800a41c:	61e2      	str	r2, [r4, #28]
 800a41e:	69da      	ldr	r2, [r3, #28]
 800a420:	6222      	str	r2, [r4, #32]
 800a422:	6a1a      	ldr	r2, [r3, #32]
 800a424:	6262      	str	r2, [r4, #36]	; 0x24
 800a426:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a42a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800a42e:	e781      	b.n	800a334 <tcp_listen_input+0xac>
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a430:	4631      	mov	r1, r6
 800a432:	4620      	mov	r0, r4
 800a434:	f007 fbde 	bl	8011bf4 <ip6_route>
 800a438:	4601      	mov	r1, r0
 800a43a:	e7c4      	b.n	800a3c6 <tcp_listen_input+0x13e>
      tcp_abandon(npcb, 0);
 800a43c:	2100      	movs	r1, #0
 800a43e:	4620      	mov	r0, r4
 800a440:	f7fe ff94 	bl	800936c <tcp_abandon>
      return;
 800a444:	e732      	b.n	800a2ac <tcp_listen_input+0x24>
 800a446:	4770      	bx	lr
 800a448:	20000a88 	.word	0x20000a88
 800a44c:	08018cc0 	.word	0x08018cc0
 800a450:	08018d58 	.word	0x08018d58
 800a454:	08016bb4 	.word	0x08016bb4
 800a458:	20000ab4 	.word	0x20000ab4
 800a45c:	20003e60 	.word	0x20003e60
 800a460:	20000ac2 	.word	0x20000ac2
 800a464:	20000aac 	.word	0x20000aac
 800a468:	20000a84 	.word	0x20000a84
 800a46c:	20003e34 	.word	0x20003e34
 800a470:	20007fac 	.word	0x20007fac
 800a474:	20007fa8 	.word	0x20007fa8

0800a478 <tcp_free_acked_segments>:
{
 800a478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a47c:	4606      	mov	r6, r0
 800a47e:	460c      	mov	r4, r1
 800a480:	4699      	mov	r9, r3
  while (seg_list != NULL &&
 800a482:	e008      	b.n	800a496 <tcp_free_acked_segments+0x1e>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a484:	4b26      	ldr	r3, [pc, #152]	; (800a520 <tcp_free_acked_segments+0xa8>)
 800a486:	f240 4257 	movw	r2, #1111	; 0x457
 800a48a:	4926      	ldr	r1, [pc, #152]	; (800a524 <tcp_free_acked_segments+0xac>)
 800a48c:	4826      	ldr	r0, [pc, #152]	; (800a528 <tcp_free_acked_segments+0xb0>)
 800a48e:	f00b fa7f 	bl	8015990 <iprintf>
 800a492:	e021      	b.n	800a4d8 <tcp_free_acked_segments+0x60>
{
 800a494:	463c      	mov	r4, r7
  while (seg_list != NULL &&
 800a496:	2c00      	cmp	r4, #0
 800a498:	d03e      	beq.n	800a518 <tcp_free_acked_segments+0xa0>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a49a:	6923      	ldr	r3, [r4, #16]
 800a49c:	6858      	ldr	r0, [r3, #4]
 800a49e:	f7fc faf2 	bl	8006a86 <lwip_htonl>
 800a4a2:	4605      	mov	r5, r0
 800a4a4:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 800a4a8:	6923      	ldr	r3, [r4, #16]
 800a4aa:	8998      	ldrh	r0, [r3, #12]
 800a4ac:	f7fc fae6 	bl	8006a7c <lwip_htons>
 800a4b0:	f010 0f03 	tst.w	r0, #3
 800a4b4:	d02e      	beq.n	800a514 <tcp_free_acked_segments+0x9c>
 800a4b6:	2001      	movs	r0, #1
 800a4b8:	4440      	add	r0, r8
 800a4ba:	4405      	add	r5, r0
 800a4bc:	4b1b      	ldr	r3, [pc, #108]	; (800a52c <tcp_free_acked_segments+0xb4>)
 800a4be:	6818      	ldr	r0, [r3, #0]
 800a4c0:	1a2d      	subs	r5, r5, r0
  while (seg_list != NULL &&
 800a4c2:	2d00      	cmp	r5, #0
 800a4c4:	dc28      	bgt.n	800a518 <tcp_free_acked_segments+0xa0>
    seg_list = seg_list->next;
 800a4c6:	6827      	ldr	r7, [r4, #0]
    clen = pbuf_clen(next->p);
 800a4c8:	6860      	ldr	r0, [r4, #4]
 800a4ca:	f7fd ff75 	bl	80083b8 <pbuf_clen>
 800a4ce:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a4d0:	f8b6 308e 	ldrh.w	r3, [r6, #142]	; 0x8e
 800a4d4:	4298      	cmp	r0, r3
 800a4d6:	d8d5      	bhi.n	800a484 <tcp_free_acked_segments+0xc>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a4d8:	f8b6 008e 	ldrh.w	r0, [r6, #142]	; 0x8e
 800a4dc:	1b45      	subs	r5, r0, r5
 800a4de:	f8a6 508e 	strh.w	r5, [r6, #142]	; 0x8e
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a4e2:	8923      	ldrh	r3, [r4, #8]
 800a4e4:	4a12      	ldr	r2, [pc, #72]	; (800a530 <tcp_free_acked_segments+0xb8>)
 800a4e6:	8811      	ldrh	r1, [r2, #0]
 800a4e8:	440b      	add	r3, r1
 800a4ea:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f7fe fd65 	bl	8008fbc <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800a4f2:	f8b6 308e 	ldrh.w	r3, [r6, #142]	; 0x8e
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d0cc      	beq.n	800a494 <tcp_free_acked_segments+0x1c>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a4fa:	2f00      	cmp	r7, #0
 800a4fc:	d1ca      	bne.n	800a494 <tcp_free_acked_segments+0x1c>
 800a4fe:	f1b9 0f00 	cmp.w	r9, #0
 800a502:	d1c7      	bne.n	800a494 <tcp_free_acked_segments+0x1c>
 800a504:	4b06      	ldr	r3, [pc, #24]	; (800a520 <tcp_free_acked_segments+0xa8>)
 800a506:	f240 4261 	movw	r2, #1121	; 0x461
 800a50a:	490a      	ldr	r1, [pc, #40]	; (800a534 <tcp_free_acked_segments+0xbc>)
 800a50c:	4806      	ldr	r0, [pc, #24]	; (800a528 <tcp_free_acked_segments+0xb0>)
 800a50e:	f00b fa3f 	bl	8015990 <iprintf>
 800a512:	e7bf      	b.n	800a494 <tcp_free_acked_segments+0x1c>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a514:	2000      	movs	r0, #0
 800a516:	e7cf      	b.n	800a4b8 <tcp_free_acked_segments+0x40>
}
 800a518:	4620      	mov	r0, r4
 800a51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a51e:	bf00      	nop
 800a520:	08018cc0 	.word	0x08018cc0
 800a524:	08018d78 	.word	0x08018d78
 800a528:	08016bb4 	.word	0x08016bb4
 800a52c:	20000a84 	.word	0x20000a84
 800a530:	20000aa0 	.word	0x20000aa0
 800a534:	08018da0 	.word	0x08018da0

0800a538 <tcp_oos_insert_segment>:
{
 800a538:	b570      	push	{r4, r5, r6, lr}
 800a53a:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a53c:	4605      	mov	r5, r0
 800a53e:	b160      	cbz	r0, 800a55a <tcp_oos_insert_segment+0x22>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a540:	692b      	ldr	r3, [r5, #16]
 800a542:	8998      	ldrh	r0, [r3, #12]
 800a544:	f7fc fa9a 	bl	8006a7c <lwip_htons>
 800a548:	f010 0f01 	tst.w	r0, #1
 800a54c:	d01a      	beq.n	800a584 <tcp_oos_insert_segment+0x4c>
    tcp_segs_free(next);
 800a54e:	4620      	mov	r0, r4
 800a550:	f7fe fd41 	bl	8008fd6 <tcp_segs_free>
    next = NULL;
 800a554:	2400      	movs	r4, #0
  cseg->next = next;
 800a556:	602c      	str	r4, [r5, #0]
}
 800a558:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a55a:	4b1d      	ldr	r3, [pc, #116]	; (800a5d0 <tcp_oos_insert_segment+0x98>)
 800a55c:	f240 421f 	movw	r2, #1055	; 0x41f
 800a560:	491c      	ldr	r1, [pc, #112]	; (800a5d4 <tcp_oos_insert_segment+0x9c>)
 800a562:	481d      	ldr	r0, [pc, #116]	; (800a5d8 <tcp_oos_insert_segment+0xa0>)
 800a564:	f00b fa14 	bl	8015990 <iprintf>
 800a568:	e7ea      	b.n	800a540 <tcp_oos_insert_segment+0x8>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a56a:	692b      	ldr	r3, [r5, #16]
 800a56c:	899e      	ldrh	r6, [r3, #12]
 800a56e:	2001      	movs	r0, #1
 800a570:	f7fc fa84 	bl	8006a7c <lwip_htons>
 800a574:	692b      	ldr	r3, [r5, #16]
 800a576:	4306      	orrs	r6, r0
 800a578:	819e      	strh	r6, [r3, #12]
      next = next->next;
 800a57a:	6826      	ldr	r6, [r4, #0]
      tcp_seg_free(old_seg);
 800a57c:	4620      	mov	r0, r4
 800a57e:	f7fe fd1d 	bl	8008fbc <tcp_seg_free>
      next = next->next;
 800a582:	4634      	mov	r4, r6
    while (next &&
 800a584:	b18c      	cbz	r4, 800a5aa <tcp_oos_insert_segment+0x72>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a586:	892b      	ldrh	r3, [r5, #8]
 800a588:	4a14      	ldr	r2, [pc, #80]	; (800a5dc <tcp_oos_insert_segment+0xa4>)
 800a58a:	6812      	ldr	r2, [r2, #0]
 800a58c:	4413      	add	r3, r2
 800a58e:	6921      	ldr	r1, [r4, #16]
 800a590:	684a      	ldr	r2, [r1, #4]
 800a592:	8920      	ldrh	r0, [r4, #8]
 800a594:	4402      	add	r2, r0
 800a596:	1a9b      	subs	r3, r3, r2
    while (next &&
 800a598:	2b00      	cmp	r3, #0
 800a59a:	db06      	blt.n	800a5aa <tcp_oos_insert_segment+0x72>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a59c:	8988      	ldrh	r0, [r1, #12]
 800a59e:	f7fc fa6d 	bl	8006a7c <lwip_htons>
 800a5a2:	f010 0f01 	tst.w	r0, #1
 800a5a6:	d0e8      	beq.n	800a57a <tcp_oos_insert_segment+0x42>
 800a5a8:	e7df      	b.n	800a56a <tcp_oos_insert_segment+0x32>
    if (next &&
 800a5aa:	2c00      	cmp	r4, #0
 800a5ac:	d0d3      	beq.n	800a556 <tcp_oos_insert_segment+0x1e>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a5ae:	892b      	ldrh	r3, [r5, #8]
 800a5b0:	4a0a      	ldr	r2, [pc, #40]	; (800a5dc <tcp_oos_insert_segment+0xa4>)
 800a5b2:	6811      	ldr	r1, [r2, #0]
 800a5b4:	440b      	add	r3, r1
 800a5b6:	6922      	ldr	r2, [r4, #16]
 800a5b8:	6852      	ldr	r2, [r2, #4]
 800a5ba:	1a9b      	subs	r3, r3, r2
    if (next &&
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	ddca      	ble.n	800a556 <tcp_oos_insert_segment+0x1e>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a5c0:	1a52      	subs	r2, r2, r1
 800a5c2:	b291      	uxth	r1, r2
 800a5c4:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a5c6:	6868      	ldr	r0, [r5, #4]
 800a5c8:	f7fd fea2 	bl	8008310 <pbuf_realloc>
 800a5cc:	e7c3      	b.n	800a556 <tcp_oos_insert_segment+0x1e>
 800a5ce:	bf00      	nop
 800a5d0:	08018cc0 	.word	0x08018cc0
 800a5d4:	08018dc0 	.word	0x08018dc0
 800a5d8:	08016bb4 	.word	0x08016bb4
 800a5dc:	20000aac 	.word	0x20000aac

0800a5e0 <tcp_receive>:
{
 800a5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	d075      	beq.n	800a6d4 <tcp_receive+0xf4>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a5e8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800a5ec:	2b03      	cmp	r3, #3
 800a5ee:	d979      	bls.n	800a6e4 <tcp_receive+0x104>
  if (flags & TCP_ACK) {
 800a5f0:	4bb9      	ldr	r3, [pc, #740]	; (800a8d8 <tcp_receive+0x2f8>)
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	f013 0f10 	tst.w	r3, #16
 800a5f8:	d03f      	beq.n	800a67a <tcp_receive+0x9a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a5fa:	f8b4 0088 	ldrh.w	r0, [r4, #136]	; 0x88
 800a5fe:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800a602:	1886      	adds	r6, r0, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a604:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800a606:	4bb5      	ldr	r3, [pc, #724]	; (800a8dc <tcp_receive+0x2fc>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	1acd      	subs	r5, r1, r3
 800a60c:	2d00      	cmp	r5, #0
 800a60e:	db0a      	blt.n	800a626 <tcp_receive+0x46>
 800a610:	4299      	cmp	r1, r3
 800a612:	d06f      	beq.n	800a6f4 <tcp_receive+0x114>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a614:	49b2      	ldr	r1, [pc, #712]	; (800a8e0 <tcp_receive+0x300>)
 800a616:	6809      	ldr	r1, [r1, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a618:	428a      	cmp	r2, r1
 800a61a:	d115      	bne.n	800a648 <tcp_receive+0x68>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a61c:	4ab1      	ldr	r2, [pc, #708]	; (800a8e4 <tcp_receive+0x304>)
 800a61e:	6812      	ldr	r2, [r2, #0]
 800a620:	89d2      	ldrh	r2, [r2, #14]
 800a622:	4290      	cmp	r0, r2
 800a624:	d210      	bcs.n	800a648 <tcp_receive+0x68>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a626:	4aaf      	ldr	r2, [pc, #700]	; (800a8e4 <tcp_receive+0x304>)
 800a628:	6812      	ldr	r2, [r2, #0]
 800a62a:	89d2      	ldrh	r2, [r2, #14]
 800a62c:	b290      	uxth	r0, r2
 800a62e:	f8a4 2088 	strh.w	r2, [r4, #136]	; 0x88
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a632:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 800a636:	4288      	cmp	r0, r1
 800a638:	d901      	bls.n	800a63e <tcp_receive+0x5e>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a63a:	f8a4 208a 	strh.w	r2, [r4, #138]	; 0x8a
      pcb->snd_wl1 = seqno;
 800a63e:	67e3      	str	r3, [r4, #124]	; 0x7c
      pcb->snd_wl2 = ackno;
 800a640:	4ba7      	ldr	r3, [pc, #668]	; (800a8e0 <tcp_receive+0x300>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a648:	4ba5      	ldr	r3, [pc, #660]	; (800a8e0 <tcp_receive+0x300>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a64e:	1a5a      	subs	r2, r3, r1
 800a650:	2a00      	cmp	r2, #0
 800a652:	dd55      	ble.n	800a700 <tcp_receive+0x120>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a654:	2a01      	cmp	r2, #1
 800a656:	d404      	bmi.n	800a662 <tcp_receive+0x82>
 800a658:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a65a:	1a9a      	subs	r2, r3, r2
 800a65c:	2a00      	cmp	r2, #0
 800a65e:	f340 8083 	ble.w	800a768 <tcp_receive+0x188>
      tcp_send_empty_ack(pcb);
 800a662:	4620      	mov	r0, r4
 800a664:	f002 fce8 	bl	800d038 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a668:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a66a:	b133      	cbz	r3, 800a67a <tcp_receive+0x9a>
 800a66c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800a66e:	499c      	ldr	r1, [pc, #624]	; (800a8e0 <tcp_receive+0x300>)
 800a670:	6809      	ldr	r1, [r1, #0]
 800a672:	1a52      	subs	r2, r2, r1
 800a674:	2a00      	cmp	r2, #0
 800a676:	f2c0 815e 	blt.w	800a936 <tcp_receive+0x356>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a67a:	4b9b      	ldr	r3, [pc, #620]	; (800a8e8 <tcp_receive+0x308>)
 800a67c:	881b      	ldrh	r3, [r3, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f000 8489 	beq.w	800af96 <tcp_receive+0x9b6>
 800a684:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800a688:	2a06      	cmp	r2, #6
 800a68a:	f200 8484 	bhi.w	800af96 <tcp_receive+0x9b6>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a68e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a690:	4a92      	ldr	r2, [pc, #584]	; (800a8dc <tcp_receive+0x2fc>)
 800a692:	6812      	ldr	r2, [r2, #0]
 800a694:	1a8e      	subs	r6, r1, r2
 800a696:	2e01      	cmp	r6, #1
 800a698:	d405      	bmi.n	800a6a6 <tcp_receive+0xc6>
 800a69a:	4413      	add	r3, r2
 800a69c:	1acb      	subs	r3, r1, r3
 800a69e:	3301      	adds	r3, #1
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f340 8170 	ble.w	800a986 <tcp_receive+0x3a6>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a6a6:	1a52      	subs	r2, r2, r1
 800a6a8:	2a00      	cmp	r2, #0
 800a6aa:	f2c0 81ae 	blt.w	800aa0a <tcp_receive+0x42a>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a6ae:	4b8b      	ldr	r3, [pc, #556]	; (800a8dc <tcp_receive+0x2fc>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a6b4:	1a5a      	subs	r2, r3, r1
 800a6b6:	2a00      	cmp	r2, #0
 800a6b8:	db07      	blt.n	800a6ca <tcp_receive+0xea>
 800a6ba:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 800a6be:	440a      	add	r2, r1
 800a6c0:	1a9a      	subs	r2, r3, r2
 800a6c2:	3201      	adds	r2, #1
 800a6c4:	2a00      	cmp	r2, #0
 800a6c6:	f340 81a7 	ble.w	800aa18 <tcp_receive+0x438>
      tcp_send_empty_ack(pcb);
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	f002 fcb4 	bl	800d038 <tcp_send_empty_ack>
 800a6d0:	f000 bc74 	b.w	800afbc <tcp_receive+0x9dc>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a6d4:	4b85      	ldr	r3, [pc, #532]	; (800a8ec <tcp_receive+0x30c>)
 800a6d6:	f240 427b 	movw	r2, #1147	; 0x47b
 800a6da:	4985      	ldr	r1, [pc, #532]	; (800a8f0 <tcp_receive+0x310>)
 800a6dc:	4885      	ldr	r0, [pc, #532]	; (800a8f4 <tcp_receive+0x314>)
 800a6de:	f00b f957 	bl	8015990 <iprintf>
 800a6e2:	e781      	b.n	800a5e8 <tcp_receive+0x8>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a6e4:	4b81      	ldr	r3, [pc, #516]	; (800a8ec <tcp_receive+0x30c>)
 800a6e6:	f240 427c 	movw	r2, #1148	; 0x47c
 800a6ea:	4983      	ldr	r1, [pc, #524]	; (800a8f8 <tcp_receive+0x318>)
 800a6ec:	4881      	ldr	r0, [pc, #516]	; (800a8f4 <tcp_receive+0x314>)
 800a6ee:	f00b f94f 	bl	8015990 <iprintf>
 800a6f2:	e77d      	b.n	800a5f0 <tcp_receive+0x10>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a6f4:	497a      	ldr	r1, [pc, #488]	; (800a8e0 <tcp_receive+0x300>)
 800a6f6:	6809      	ldr	r1, [r1, #0]
 800a6f8:	1a51      	subs	r1, r2, r1
 800a6fa:	2900      	cmp	r1, #0
 800a6fc:	da8a      	bge.n	800a614 <tcp_receive+0x34>
 800a6fe:	e792      	b.n	800a626 <tcp_receive+0x46>
      if (tcplen == 0) {
 800a700:	4a79      	ldr	r2, [pc, #484]	; (800a8e8 <tcp_receive+0x308>)
 800a702:	8812      	ldrh	r2, [r2, #0]
 800a704:	b932      	cbnz	r2, 800a714 <tcp_receive+0x134>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a706:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800a70a:	f8b4 0088 	ldrh.w	r0, [r4, #136]	; 0x88
 800a70e:	4402      	add	r2, r0
 800a710:	42b2      	cmp	r2, r6
 800a712:	d003      	beq.n	800a71c <tcp_receive+0x13c>
        pcb->dupacks = 0;
 800a714:	2300      	movs	r3, #0
 800a716:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800a71a:	e7a5      	b.n	800a668 <tcp_receive+0x88>
          if (pcb->rtime >= 0) {
 800a71c:	f9b4 2058 	ldrsh.w	r2, [r4, #88]	; 0x58
 800a720:	2a00      	cmp	r2, #0
 800a722:	dbf7      	blt.n	800a714 <tcp_receive+0x134>
            if (pcb->lastack == ackno) {
 800a724:	428b      	cmp	r3, r1
 800a726:	d1f5      	bne.n	800a714 <tcp_receive+0x134>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a728:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 800a72c:	2bff      	cmp	r3, #255	; 0xff
 800a72e:	d002      	beq.n	800a736 <tcp_receive+0x156>
                ++pcb->dupacks;
 800a730:	3301      	adds	r3, #1
 800a732:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
              if (pcb->dupacks > 3) {
 800a736:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 800a73a:	2b03      	cmp	r3, #3
 800a73c:	d909      	bls.n	800a752 <tcp_receive+0x172>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a73e:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
 800a742:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 800a746:	440a      	add	r2, r1
 800a748:	b292      	uxth	r2, r2
 800a74a:	4291      	cmp	r1, r2
 800a74c:	d807      	bhi.n	800a75e <tcp_receive+0x17e>
 800a74e:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
              if (pcb->dupacks >= 3) {
 800a752:	2b02      	cmp	r3, #2
 800a754:	d988      	bls.n	800a668 <tcp_receive+0x88>
                tcp_rexmit_fast(pcb);
 800a756:	4620      	mov	r0, r4
 800a758:	f002 fbe4 	bl	800cf24 <tcp_rexmit_fast>
      if (!found_dupack) {
 800a75c:	e784      	b.n	800a668 <tcp_receive+0x88>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a75e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a762:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
 800a766:	e7f4      	b.n	800a752 <tcp_receive+0x172>
      if (pcb->flags & TF_INFR) {
 800a768:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800a76c:	f012 0f04 	tst.w	r2, #4
 800a770:	d00a      	beq.n	800a788 <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 800a772:	f022 0204 	bic.w	r2, r2, #4
 800a776:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
        pcb->cwnd = pcb->ssthresh;
 800a77a:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
 800a77e:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
        pcb->bytes_acked = 0;
 800a782:	2200      	movs	r2, #0
 800a784:	f8a4 2092 	strh.w	r2, [r4, #146]	; 0x92
      pcb->nrtx = 0;
 800a788:	2000      	movs	r0, #0
 800a78a:	f884 006a 	strb.w	r0, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a78e:	f9b4 5064 	ldrsh.w	r5, [r4, #100]	; 0x64
 800a792:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 800a796:	eb02 02e5 	add.w	r2, r2, r5, asr #3
 800a79a:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	b289      	uxth	r1, r1
 800a7a2:	1a51      	subs	r1, r2, r1
 800a7a4:	b289      	uxth	r1, r1
      pcb->dupacks = 0;
 800a7a6:	f884 006b 	strb.w	r0, [r4, #107]	; 0x6b
      pcb->lastack = ackno;
 800a7aa:	66e3      	str	r3, [r4, #108]	; 0x6c
      if (pcb->state >= ESTABLISHED) {
 800a7ac:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800a7b0:	2b03      	cmp	r3, #3
 800a7b2:	d919      	bls.n	800a7e8 <tcp_receive+0x208>
        if (pcb->cwnd < pcb->ssthresh) {
 800a7b4:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
 800a7b8:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d260      	bcs.n	800a882 <tcp_receive+0x2a2>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a7c0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a7c4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a7c8:	d054      	beq.n	800a874 <tcp_receive+0x294>
 800a7ca:	2301      	movs	r3, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a7cc:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800a7d0:	fb13 f300 	smulbb	r3, r3, r0
 800a7d4:	b29b      	uxth	r3, r3
          TCP_WND_INC(pcb->cwnd, increase);
 800a7d6:	428b      	cmp	r3, r1
 800a7d8:	bf94      	ite	ls
 800a7da:	18d1      	addls	r1, r2, r3
 800a7dc:	1851      	addhi	r1, r2, r1
 800a7de:	b289      	uxth	r1, r1
 800a7e0:	428a      	cmp	r2, r1
 800a7e2:	d849      	bhi.n	800a878 <tcp_receive+0x298>
 800a7e4:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a7e8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a7ec:	4a43      	ldr	r2, [pc, #268]	; (800a8fc <tcp_receive+0x31c>)
 800a7ee:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f7ff fe40 	bl	800a478 <tcp_free_acked_segments>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a7fe:	4a40      	ldr	r2, [pc, #256]	; (800a900 <tcp_receive+0x320>)
 800a800:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800a804:	4620      	mov	r0, r4
 800a806:	f7ff fe37 	bl	800a478 <tcp_free_acked_segments>
 800a80a:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
      if (pcb->unacked == NULL) {
 800a80e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a812:	2b00      	cmp	r3, #0
 800a814:	d057      	beq.n	800a8c6 <tcp_receive+0x2e6>
        pcb->rtime = 0;
 800a816:	2300      	movs	r3, #0
 800a818:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
      pcb->polltmr = 0;
 800a81c:	2300      	movs	r3, #0
 800a81e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      if (pcb->unsent == NULL) {
 800a822:	2800      	cmp	r0, #0
 800a824:	d054      	beq.n	800a8d0 <tcp_receive+0x2f0>
      if (ip_current_is_v6()) {
 800a826:	4b37      	ldr	r3, [pc, #220]	; (800a904 <tcp_receive+0x324>)
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	b113      	cbz	r3, 800a832 <tcp_receive+0x252>
        nd6_reachability_hint(ip6_current_src_addr());
 800a82c:	4836      	ldr	r0, [pc, #216]	; (800a908 <tcp_receive+0x328>)
 800a82e:	f00a fe6d 	bl	801550c <nd6_reachability_hint>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a832:	f8b4 308c 	ldrh.w	r3, [r4, #140]	; 0x8c
 800a836:	4a35      	ldr	r2, [pc, #212]	; (800a90c <tcp_receive+0x32c>)
 800a838:	8812      	ldrh	r2, [r2, #0]
 800a83a:	4413      	add	r3, r2
 800a83c:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
      if (pcb->flags & TF_RTO) {
 800a840:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a844:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a848:	f43f af0e 	beq.w	800a668 <tcp_receive+0x88>
        if (pcb->unacked == NULL) {
 800a84c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a850:	2b00      	cmp	r3, #0
 800a852:	d05d      	beq.n	800a910 <tcp_receive+0x330>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a854:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800a856:	691b      	ldr	r3, [r3, #16]
 800a858:	6858      	ldr	r0, [r3, #4]
 800a85a:	f7fc f914 	bl	8006a86 <lwip_htonl>
 800a85e:	1a2d      	subs	r5, r5, r0
 800a860:	2d00      	cmp	r5, #0
 800a862:	f73f af01 	bgt.w	800a668 <tcp_receive+0x88>
          tcp_clear_flags(pcb, TF_RTO);
 800a866:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a86a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a86e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 800a872:	e6f9      	b.n	800a668 <tcp_receive+0x88>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a874:	2302      	movs	r3, #2
 800a876:	e7a9      	b.n	800a7cc <tcp_receive+0x1ec>
          TCP_WND_INC(pcb->cwnd, increase);
 800a878:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a87c:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 800a880:	e7b2      	b.n	800a7e8 <tcp_receive+0x208>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a882:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
 800a886:	4419      	add	r1, r3
 800a888:	b289      	uxth	r1, r1
 800a88a:	428b      	cmp	r3, r1
 800a88c:	d811      	bhi.n	800a8b2 <tcp_receive+0x2d2>
 800a88e:	f8a4 1092 	strh.w	r1, [r4, #146]	; 0x92
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a892:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
 800a896:	429a      	cmp	r2, r3
 800a898:	d8a6      	bhi.n	800a7e8 <tcp_receive+0x208>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a89a:	1a9b      	subs	r3, r3, r2
 800a89c:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a8a0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800a8a4:	4413      	add	r3, r2
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d807      	bhi.n	800a8bc <tcp_receive+0x2dc>
 800a8ac:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 800a8b0:	e79a      	b.n	800a7e8 <tcp_receive+0x208>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a8b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8b6:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
 800a8ba:	e7ea      	b.n	800a892 <tcp_receive+0x2b2>
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a8bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8c0:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 800a8c4:	e790      	b.n	800a7e8 <tcp_receive+0x208>
        pcb->rtime = -1;
 800a8c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8ca:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 800a8ce:	e7a5      	b.n	800a81c <tcp_receive+0x23c>
        pcb->unsent_oversize = 0;
 800a8d0:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
 800a8d4:	e7a7      	b.n	800a826 <tcp_receive+0x246>
 800a8d6:	bf00      	nop
 800a8d8:	20000a88 	.word	0x20000a88
 800a8dc:	20000aac 	.word	0x20000aac
 800a8e0:	20000a84 	.word	0x20000a84
 800a8e4:	20000ab4 	.word	0x20000ab4
 800a8e8:	20000ac2 	.word	0x20000ac2
 800a8ec:	08018cc0 	.word	0x08018cc0
 800a8f0:	08018de8 	.word	0x08018de8
 800a8f4:	08016bb4 	.word	0x08016bb4
 800a8f8:	08018e04 	.word	0x08018e04
 800a8fc:	08018e20 	.word	0x08018e20
 800a900:	08018e28 	.word	0x08018e28
 800a904:	20003e34 	.word	0x20003e34
 800a908:	20003e48 	.word	0x20003e48
 800a90c:	20000aa0 	.word	0x20000aa0
          if ((pcb->unsent == NULL) ||
 800a910:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a914:	b143      	cbz	r3, 800a928 <tcp_receive+0x348>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a916:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800a918:	691b      	ldr	r3, [r3, #16]
 800a91a:	6858      	ldr	r0, [r3, #4]
 800a91c:	f7fc f8b3 	bl	8006a86 <lwip_htonl>
 800a920:	1a2d      	subs	r5, r5, r0
          if ((pcb->unsent == NULL) ||
 800a922:	2d00      	cmp	r5, #0
 800a924:	f73f aea0 	bgt.w	800a668 <tcp_receive+0x88>
            tcp_clear_flags(pcb, TF_RTO);
 800a928:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a92c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a930:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 800a934:	e698      	b.n	800a668 <tcp_receive+0x88>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a936:	4aac      	ldr	r2, [pc, #688]	; (800abe8 <tcp_receive+0x608>)
 800a938:	8816      	ldrh	r6, [r2, #0]
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	1af2      	subs	r2, r6, r3
 800a93e:	b292      	uxth	r2, r2
      m = (s16_t)(m - (pcb->sa >> 3));
 800a940:	f9b4 0064 	ldrsh.w	r0, [r4, #100]	; 0x64
 800a944:	f3c0 05cf 	ubfx	r5, r0, #3, #16
 800a948:	1b52      	subs	r2, r2, r5
 800a94a:	b211      	sxth	r1, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 800a94c:	b280      	uxth	r0, r0
 800a94e:	fa10 f282 	uxtah	r2, r0, r2
 800a952:	b212      	sxth	r2, r2
 800a954:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
      if (m < 0) {
 800a958:	2900      	cmp	r1, #0
 800a95a:	db10      	blt.n	800a97e <tcp_receive+0x39e>
      m = (s16_t)(m - (pcb->sv >> 2));
 800a95c:	f9b4 3066 	ldrsh.w	r3, [r4, #102]	; 0x66
 800a960:	eba1 01a3 	sub.w	r1, r1, r3, asr #2
      pcb->sv = (s16_t)(pcb->sv + m);
 800a964:	b29b      	uxth	r3, r3
 800a966:	fa13 f181 	uxtah	r1, r3, r1
 800a96a:	f8a4 1066 	strh.w	r1, [r4, #102]	; 0x66
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a96e:	10d2      	asrs	r2, r2, #3
 800a970:	fa12 f281 	uxtah	r2, r2, r1
 800a974:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
      pcb->rttest = 0;
 800a978:	2300      	movs	r3, #0
 800a97a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800a97c:	e67d      	b.n	800a67a <tcp_receive+0x9a>
        m = (s16_t) - m;
 800a97e:	1b9b      	subs	r3, r3, r6
 800a980:	442b      	add	r3, r5
 800a982:	b219      	sxth	r1, r3
 800a984:	e7ea      	b.n	800a95c <tcp_receive+0x37c>
      struct pbuf *p = inseg.p;
 800a986:	4b99      	ldr	r3, [pc, #612]	; (800abec <tcp_receive+0x60c>)
 800a988:	685d      	ldr	r5, [r3, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a98a:	b1dd      	cbz	r5, 800a9c4 <tcp_receive+0x3e4>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a98c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800a990:	429e      	cmp	r6, r3
 800a992:	d81f      	bhi.n	800a9d4 <tcp_receive+0x3f4>
      off = (u16_t)off32;
 800a994:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a996:	4b95      	ldr	r3, [pc, #596]	; (800abec <tcp_receive+0x60c>)
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	891b      	ldrh	r3, [r3, #8]
 800a99c:	42b3      	cmp	r3, r6
 800a99e:	d321      	bcc.n	800a9e4 <tcp_receive+0x404>
      inseg.len -= off;
 800a9a0:	4b92      	ldr	r3, [pc, #584]	; (800abec <tcp_receive+0x60c>)
 800a9a2:	891a      	ldrh	r2, [r3, #8]
 800a9a4:	1b92      	subs	r2, r2, r6
 800a9a6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	891a      	ldrh	r2, [r3, #8]
 800a9ac:	1b92      	subs	r2, r2, r6
 800a9ae:	b292      	uxth	r2, r2
      while (p->len < off) {
 800a9b0:	8969      	ldrh	r1, [r5, #10]
 800a9b2:	42b1      	cmp	r1, r6
 800a9b4:	d21e      	bcs.n	800a9f4 <tcp_receive+0x414>
        off -= p->len;
 800a9b6:	1a71      	subs	r1, r6, r1
 800a9b8:	b28e      	uxth	r6, r1
        p->tot_len = new_tot_len;
 800a9ba:	812a      	strh	r2, [r5, #8]
        p->len = 0;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	816b      	strh	r3, [r5, #10]
        p = p->next;
 800a9c0:	682d      	ldr	r5, [r5, #0]
 800a9c2:	e7f5      	b.n	800a9b0 <tcp_receive+0x3d0>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a9c4:	4b8a      	ldr	r3, [pc, #552]	; (800abf0 <tcp_receive+0x610>)
 800a9c6:	f240 5294 	movw	r2, #1428	; 0x594
 800a9ca:	498a      	ldr	r1, [pc, #552]	; (800abf4 <tcp_receive+0x614>)
 800a9cc:	488a      	ldr	r0, [pc, #552]	; (800abf8 <tcp_receive+0x618>)
 800a9ce:	f00a ffdf 	bl	8015990 <iprintf>
 800a9d2:	e7db      	b.n	800a98c <tcp_receive+0x3ac>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a9d4:	4b86      	ldr	r3, [pc, #536]	; (800abf0 <tcp_receive+0x610>)
 800a9d6:	f240 5295 	movw	r2, #1429	; 0x595
 800a9da:	4988      	ldr	r1, [pc, #544]	; (800abfc <tcp_receive+0x61c>)
 800a9dc:	4886      	ldr	r0, [pc, #536]	; (800abf8 <tcp_receive+0x618>)
 800a9de:	f00a ffd7 	bl	8015990 <iprintf>
 800a9e2:	e7d7      	b.n	800a994 <tcp_receive+0x3b4>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a9e4:	4b82      	ldr	r3, [pc, #520]	; (800abf0 <tcp_receive+0x610>)
 800a9e6:	f240 5297 	movw	r2, #1431	; 0x597
 800a9ea:	4985      	ldr	r1, [pc, #532]	; (800ac00 <tcp_receive+0x620>)
 800a9ec:	4882      	ldr	r0, [pc, #520]	; (800abf8 <tcp_receive+0x618>)
 800a9ee:	f00a ffcf 	bl	8015990 <iprintf>
 800a9f2:	e7d5      	b.n	800a9a0 <tcp_receive+0x3c0>
      pbuf_remove_header(p, off);
 800a9f4:	4631      	mov	r1, r6
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f7fd fb34 	bl	8008064 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a9fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a9fe:	4a81      	ldr	r2, [pc, #516]	; (800ac04 <tcp_receive+0x624>)
 800aa00:	6013      	str	r3, [r2, #0]
 800aa02:	4a7a      	ldr	r2, [pc, #488]	; (800abec <tcp_receive+0x60c>)
 800aa04:	6912      	ldr	r2, [r2, #16]
 800aa06:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800aa08:	e651      	b.n	800a6ae <tcp_receive+0xce>
        tcp_ack_now(pcb);
 800aa0a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800aa0e:	f043 0302 	orr.w	r3, r3, #2
 800aa12:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 800aa16:	e64a      	b.n	800a6ae <tcp_receive+0xce>
      if (pcb->rcv_nxt == seqno) {
 800aa18:	428b      	cmp	r3, r1
 800aa1a:	d006      	beq.n	800aa2a <tcp_receive+0x44a>
        if (pcb->ooseq == NULL) {
 800aa1c:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
 800aa20:	2d00      	cmp	r5, #0
 800aa22:	f000 81c7 	beq.w	800adb4 <tcp_receive+0x7d4>
          struct tcp_seg *next, *prev = NULL;
 800aa26:	2600      	movs	r6, #0
 800aa28:	e1eb      	b.n	800ae02 <tcp_receive+0x822>
        tcplen = TCP_TCPLEN(&inseg);
 800aa2a:	4b70      	ldr	r3, [pc, #448]	; (800abec <tcp_receive+0x60c>)
 800aa2c:	891d      	ldrh	r5, [r3, #8]
 800aa2e:	691b      	ldr	r3, [r3, #16]
 800aa30:	8998      	ldrh	r0, [r3, #12]
 800aa32:	f7fc f823 	bl	8006a7c <lwip_htons>
 800aa36:	f010 0f03 	tst.w	r0, #3
 800aa3a:	d017      	beq.n	800aa6c <tcp_receive+0x48c>
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	442b      	add	r3, r5
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	4a71      	ldr	r2, [pc, #452]	; (800ac08 <tcp_receive+0x628>)
 800aa44:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 800aa46:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d810      	bhi.n	800aa70 <tcp_receive+0x490>
        if (pcb->ooseq != NULL) {
 800aa4e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d063      	beq.n	800ab1e <tcp_receive+0x53e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aa56:	4b65      	ldr	r3, [pc, #404]	; (800abec <tcp_receive+0x60c>)
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	8998      	ldrh	r0, [r3, #12]
 800aa5c:	f7fc f80e 	bl	8006a7c <lwip_htons>
 800aa60:	f010 0f01 	tst.w	r0, #1
 800aa64:	d157      	bne.n	800ab16 <tcp_receive+0x536>
            struct tcp_seg *next = pcb->ooseq;
 800aa66:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
            while (next &&
 800aa6a:	e08e      	b.n	800ab8a <tcp_receive+0x5aa>
        tcplen = TCP_TCPLEN(&inseg);
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	e7e6      	b.n	800aa3e <tcp_receive+0x45e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aa70:	4b5e      	ldr	r3, [pc, #376]	; (800abec <tcp_receive+0x60c>)
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	8998      	ldrh	r0, [r3, #12]
 800aa76:	f7fc f801 	bl	8006a7c <lwip_htons>
 800aa7a:	f010 0f01 	tst.w	r0, #1
 800aa7e:	d131      	bne.n	800aae4 <tcp_receive+0x504>
          inseg.len = (u16_t)pcb->rcv_wnd;
 800aa80:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 800aa84:	4b59      	ldr	r3, [pc, #356]	; (800abec <tcp_receive+0x60c>)
 800aa86:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	8998      	ldrh	r0, [r3, #12]
 800aa8c:	f7fb fff6 	bl	8006a7c <lwip_htons>
 800aa90:	f010 0f02 	tst.w	r0, #2
 800aa94:	d003      	beq.n	800aa9e <tcp_receive+0x4be>
            inseg.len -= 1;
 800aa96:	4a55      	ldr	r2, [pc, #340]	; (800abec <tcp_receive+0x60c>)
 800aa98:	8913      	ldrh	r3, [r2, #8]
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800aa9e:	4d53      	ldr	r5, [pc, #332]	; (800abec <tcp_receive+0x60c>)
 800aaa0:	8929      	ldrh	r1, [r5, #8]
 800aaa2:	6868      	ldr	r0, [r5, #4]
 800aaa4:	f7fd fc34 	bl	8008310 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800aaa8:	892e      	ldrh	r6, [r5, #8]
 800aaaa:	692b      	ldr	r3, [r5, #16]
 800aaac:	8998      	ldrh	r0, [r3, #12]
 800aaae:	f7fb ffe5 	bl	8006a7c <lwip_htons>
 800aab2:	f010 0f03 	tst.w	r0, #3
 800aab6:	d027      	beq.n	800ab08 <tcp_receive+0x528>
 800aab8:	2301      	movs	r3, #1
 800aaba:	4433      	add	r3, r6
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	4a52      	ldr	r2, [pc, #328]	; (800ac08 <tcp_receive+0x628>)
 800aac0:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800aac2:	4a50      	ldr	r2, [pc, #320]	; (800ac04 <tcp_receive+0x624>)
 800aac4:	6812      	ldr	r2, [r2, #0]
 800aac6:	4413      	add	r3, r2
 800aac8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800aaca:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800aace:	440a      	add	r2, r1
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d0bc      	beq.n	800aa4e <tcp_receive+0x46e>
 800aad4:	4b46      	ldr	r3, [pc, #280]	; (800abf0 <tcp_receive+0x610>)
 800aad6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800aada:	494c      	ldr	r1, [pc, #304]	; (800ac0c <tcp_receive+0x62c>)
 800aadc:	4846      	ldr	r0, [pc, #280]	; (800abf8 <tcp_receive+0x618>)
 800aade:	f00a ff57 	bl	8015990 <iprintf>
 800aae2:	e7b4      	b.n	800aa4e <tcp_receive+0x46e>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800aae4:	4e41      	ldr	r6, [pc, #260]	; (800abec <tcp_receive+0x60c>)
 800aae6:	6933      	ldr	r3, [r6, #16]
 800aae8:	8998      	ldrh	r0, [r3, #12]
 800aaea:	b205      	sxth	r5, r0
 800aaec:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800aaf0:	b280      	uxth	r0, r0
 800aaf2:	f7fb ffc3 	bl	8006a7c <lwip_htons>
 800aaf6:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800aafa:	f7fb ffbf 	bl	8006a7c <lwip_htons>
 800aafe:	b203      	sxth	r3, r0
 800ab00:	6932      	ldr	r2, [r6, #16]
 800ab02:	431d      	orrs	r5, r3
 800ab04:	8195      	strh	r5, [r2, #12]
 800ab06:	e7bb      	b.n	800aa80 <tcp_receive+0x4a0>
          tcplen = TCP_TCPLEN(&inseg);
 800ab08:	2300      	movs	r3, #0
 800ab0a:	e7d6      	b.n	800aaba <tcp_receive+0x4da>
              pcb->ooseq = pcb->ooseq->next;
 800ab0c:	6803      	ldr	r3, [r0, #0]
 800ab0e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
              tcp_seg_free(old_ooseq);
 800ab12:	f7fe fa53 	bl	8008fbc <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ab16:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d1f6      	bne.n	800ab0c <tcp_receive+0x52c>
        pcb->rcv_nxt = seqno + tcplen;
 800ab1e:	4b3a      	ldr	r3, [pc, #232]	; (800ac08 <tcp_receive+0x628>)
 800ab20:	881a      	ldrh	r2, [r3, #0]
 800ab22:	4b38      	ldr	r3, [pc, #224]	; (800ac04 <tcp_receive+0x624>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4413      	add	r3, r2
 800ab28:	64e3      	str	r3, [r4, #76]	; 0x4c
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ab2a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	f200 80b1 	bhi.w	800ac96 <tcp_receive+0x6b6>
        pcb->rcv_wnd -= tcplen;
 800ab34:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800ab38:	4a33      	ldr	r2, [pc, #204]	; (800ac08 <tcp_receive+0x628>)
 800ab3a:	8812      	ldrh	r2, [r2, #0]
 800ab3c:	1a9b      	subs	r3, r3, r2
 800ab3e:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
        tcp_update_rcv_ann_wnd(pcb);
 800ab42:	4620      	mov	r0, r4
 800ab44:	f7fe f9ba 	bl	8008ebc <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800ab48:	4b28      	ldr	r3, [pc, #160]	; (800abec <tcp_receive+0x60c>)
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	891a      	ldrh	r2, [r3, #8]
 800ab4e:	b122      	cbz	r2, 800ab5a <tcp_receive+0x57a>
          recv_data = inseg.p;
 800ab50:	4a2f      	ldr	r2, [pc, #188]	; (800ac10 <tcp_receive+0x630>)
 800ab52:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800ab54:	4b25      	ldr	r3, [pc, #148]	; (800abec <tcp_receive+0x60c>)
 800ab56:	2200      	movs	r2, #0
 800ab58:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ab5a:	4b24      	ldr	r3, [pc, #144]	; (800abec <tcp_receive+0x60c>)
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	8998      	ldrh	r0, [r3, #12]
 800ab60:	f7fb ff8c 	bl	8006a7c <lwip_htons>
 800ab64:	f010 0f01 	tst.w	r0, #1
 800ab68:	f000 80c5 	beq.w	800acf6 <tcp_receive+0x716>
          recv_flags |= TF_GOT_FIN;
 800ab6c:	4a29      	ldr	r2, [pc, #164]	; (800ac14 <tcp_receive+0x634>)
 800ab6e:	7813      	ldrb	r3, [r2, #0]
 800ab70:	f043 0320 	orr.w	r3, r3, #32
 800ab74:	7013      	strb	r3, [r2, #0]
 800ab76:	e0be      	b.n	800acf6 <tcp_receive+0x716>
                tcplen = TCP_TCPLEN(&inseg);
 800ab78:	2300      	movs	r3, #0
 800ab7a:	443b      	add	r3, r7
 800ab7c:	4a22      	ldr	r2, [pc, #136]	; (800ac08 <tcp_receive+0x628>)
 800ab7e:	8013      	strh	r3, [r2, #0]
              next = next->next;
 800ab80:	682e      	ldr	r6, [r5, #0]
              tcp_seg_free(tmp);
 800ab82:	4628      	mov	r0, r5
 800ab84:	f7fe fa1a 	bl	8008fbc <tcp_seg_free>
              next = next->next;
 800ab88:	4635      	mov	r5, r6
            while (next &&
 800ab8a:	2d00      	cmp	r5, #0
 800ab8c:	d044      	beq.n	800ac18 <tcp_receive+0x638>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ab8e:	4b1e      	ldr	r3, [pc, #120]	; (800ac08 <tcp_receive+0x628>)
 800ab90:	881b      	ldrh	r3, [r3, #0]
 800ab92:	4a1c      	ldr	r2, [pc, #112]	; (800ac04 <tcp_receive+0x624>)
 800ab94:	6812      	ldr	r2, [r2, #0]
 800ab96:	4413      	add	r3, r2
 800ab98:	6929      	ldr	r1, [r5, #16]
 800ab9a:	684a      	ldr	r2, [r1, #4]
 800ab9c:	8928      	ldrh	r0, [r5, #8]
 800ab9e:	4402      	add	r2, r0
 800aba0:	1a9b      	subs	r3, r3, r2
            while (next &&
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	db38      	blt.n	800ac18 <tcp_receive+0x638>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800aba6:	8988      	ldrh	r0, [r1, #12]
 800aba8:	f7fb ff68 	bl	8006a7c <lwip_htons>
 800abac:	f010 0f01 	tst.w	r0, #1
 800abb0:	d0e6      	beq.n	800ab80 <tcp_receive+0x5a0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800abb2:	4b0e      	ldr	r3, [pc, #56]	; (800abec <tcp_receive+0x60c>)
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	8998      	ldrh	r0, [r3, #12]
 800abb8:	f7fb ff60 	bl	8006a7c <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800abbc:	f010 0f02 	tst.w	r0, #2
 800abc0:	d1de      	bne.n	800ab80 <tcp_receive+0x5a0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800abc2:	4e0a      	ldr	r6, [pc, #40]	; (800abec <tcp_receive+0x60c>)
 800abc4:	6933      	ldr	r3, [r6, #16]
 800abc6:	899f      	ldrh	r7, [r3, #12]
 800abc8:	2001      	movs	r0, #1
 800abca:	f7fb ff57 	bl	8006a7c <lwip_htons>
 800abce:	6933      	ldr	r3, [r6, #16]
 800abd0:	4307      	orrs	r7, r0
 800abd2:	819f      	strh	r7, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800abd4:	8937      	ldrh	r7, [r6, #8]
 800abd6:	6933      	ldr	r3, [r6, #16]
 800abd8:	8998      	ldrh	r0, [r3, #12]
 800abda:	f7fb ff4f 	bl	8006a7c <lwip_htons>
 800abde:	f010 0f03 	tst.w	r0, #3
 800abe2:	d0c9      	beq.n	800ab78 <tcp_receive+0x598>
 800abe4:	2301      	movs	r3, #1
 800abe6:	e7c8      	b.n	800ab7a <tcp_receive+0x59a>
 800abe8:	20007fb0 	.word	0x20007fb0
 800abec:	20000a8c 	.word	0x20000a8c
 800abf0:	08018cc0 	.word	0x08018cc0
 800abf4:	08018e30 	.word	0x08018e30
 800abf8:	08016bb4 	.word	0x08016bb4
 800abfc:	08018e40 	.word	0x08018e40
 800ac00:	08018e50 	.word	0x08018e50
 800ac04:	20000aac 	.word	0x20000aac
 800ac08:	20000ac2 	.word	0x20000ac2
 800ac0c:	08018e60 	.word	0x08018e60
 800ac10:	20000aa4 	.word	0x20000aa4
 800ac14:	20000aa8 	.word	0x20000aa8
            if (next &&
 800ac18:	b14d      	cbz	r5, 800ac2e <tcp_receive+0x64e>
                TCP_SEQ_GT(seqno + tcplen,
 800ac1a:	4b98      	ldr	r3, [pc, #608]	; (800ae7c <tcp_receive+0x89c>)
 800ac1c:	6819      	ldr	r1, [r3, #0]
 800ac1e:	4b98      	ldr	r3, [pc, #608]	; (800ae80 <tcp_receive+0x8a0>)
 800ac20:	881b      	ldrh	r3, [r3, #0]
 800ac22:	440b      	add	r3, r1
 800ac24:	692a      	ldr	r2, [r5, #16]
 800ac26:	6852      	ldr	r2, [r2, #4]
 800ac28:	1a9b      	subs	r3, r3, r2
            if (next &&
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	dc02      	bgt.n	800ac34 <tcp_receive+0x654>
            pcb->ooseq = next;
 800ac2e:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
 800ac32:	e774      	b.n	800ab1e <tcp_receive+0x53e>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ac34:	1a52      	subs	r2, r2, r1
 800ac36:	4b93      	ldr	r3, [pc, #588]	; (800ae84 <tcp_receive+0x8a4>)
 800ac38:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	8998      	ldrh	r0, [r3, #12]
 800ac3e:	f7fb ff1d 	bl	8006a7c <lwip_htons>
 800ac42:	f010 0f02 	tst.w	r0, #2
 800ac46:	d003      	beq.n	800ac50 <tcp_receive+0x670>
                inseg.len -= 1;
 800ac48:	4a8e      	ldr	r2, [pc, #568]	; (800ae84 <tcp_receive+0x8a4>)
 800ac4a:	8913      	ldrh	r3, [r2, #8]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800ac50:	4e8c      	ldr	r6, [pc, #560]	; (800ae84 <tcp_receive+0x8a4>)
 800ac52:	8931      	ldrh	r1, [r6, #8]
 800ac54:	6870      	ldr	r0, [r6, #4]
 800ac56:	f7fd fb5b 	bl	8008310 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ac5a:	8937      	ldrh	r7, [r6, #8]
 800ac5c:	6933      	ldr	r3, [r6, #16]
 800ac5e:	8998      	ldrh	r0, [r3, #12]
 800ac60:	f7fb ff0c 	bl	8006a7c <lwip_htons>
 800ac64:	f010 0f03 	tst.w	r0, #3
 800ac68:	d013      	beq.n	800ac92 <tcp_receive+0x6b2>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	443b      	add	r3, r7
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	4a83      	ldr	r2, [pc, #524]	; (800ae80 <tcp_receive+0x8a0>)
 800ac72:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ac74:	4a81      	ldr	r2, [pc, #516]	; (800ae7c <tcp_receive+0x89c>)
 800ac76:	6812      	ldr	r2, [r2, #0]
 800ac78:	4413      	add	r3, r2
 800ac7a:	692a      	ldr	r2, [r5, #16]
 800ac7c:	6852      	ldr	r2, [r2, #4]
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d0d5      	beq.n	800ac2e <tcp_receive+0x64e>
 800ac82:	4b81      	ldr	r3, [pc, #516]	; (800ae88 <tcp_receive+0x8a8>)
 800ac84:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ac88:	4980      	ldr	r1, [pc, #512]	; (800ae8c <tcp_receive+0x8ac>)
 800ac8a:	4881      	ldr	r0, [pc, #516]	; (800ae90 <tcp_receive+0x8b0>)
 800ac8c:	f00a fe80 	bl	8015990 <iprintf>
 800ac90:	e7cd      	b.n	800ac2e <tcp_receive+0x64e>
              tcplen = TCP_TCPLEN(&inseg);
 800ac92:	2300      	movs	r3, #0
 800ac94:	e7ea      	b.n	800ac6c <tcp_receive+0x68c>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ac96:	4b7c      	ldr	r3, [pc, #496]	; (800ae88 <tcp_receive+0x8a8>)
 800ac98:	f240 6207 	movw	r2, #1543	; 0x607
 800ac9c:	497d      	ldr	r1, [pc, #500]	; (800ae94 <tcp_receive+0x8b4>)
 800ac9e:	487c      	ldr	r0, [pc, #496]	; (800ae90 <tcp_receive+0x8b0>)
 800aca0:	f00a fe76 	bl	8015990 <iprintf>
 800aca4:	e746      	b.n	800ab34 <tcp_receive+0x554>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800aca6:	2300      	movs	r3, #0
 800aca8:	e038      	b.n	800ad1c <tcp_receive+0x73c>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800acaa:	2300      	movs	r3, #0
 800acac:	e045      	b.n	800ad3a <tcp_receive+0x75a>
 800acae:	4b76      	ldr	r3, [pc, #472]	; (800ae88 <tcp_receive+0x8a8>)
 800acb0:	f240 622b 	movw	r2, #1579	; 0x62b
 800acb4:	4978      	ldr	r1, [pc, #480]	; (800ae98 <tcp_receive+0x8b8>)
 800acb6:	4876      	ldr	r0, [pc, #472]	; (800ae90 <tcp_receive+0x8b0>)
 800acb8:	f00a fe6a 	bl	8015990 <iprintf>
 800acbc:	e040      	b.n	800ad40 <tcp_receive+0x760>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800acbe:	2300      	movs	r3, #0
 800acc0:	e047      	b.n	800ad52 <tcp_receive+0x772>
              pbuf_cat(recv_data, cseg->p);
 800acc2:	f7fd fb99 	bl	80083f8 <pbuf_cat>
            cseg->p = NULL;
 800acc6:	2300      	movs	r3, #0
 800acc8:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800acca:	692b      	ldr	r3, [r5, #16]
 800accc:	8998      	ldrh	r0, [r3, #12]
 800acce:	f7fb fed5 	bl	8006a7c <lwip_htons>
 800acd2:	f010 0f01 	tst.w	r0, #1
 800acd6:	d008      	beq.n	800acea <tcp_receive+0x70a>
            recv_flags |= TF_GOT_FIN;
 800acd8:	4a70      	ldr	r2, [pc, #448]	; (800ae9c <tcp_receive+0x8bc>)
 800acda:	7813      	ldrb	r3, [r2, #0]
 800acdc:	f043 0320 	orr.w	r3, r3, #32
 800ace0:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ace2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800ace6:	2b04      	cmp	r3, #4
 800ace8:	d047      	beq.n	800ad7a <tcp_receive+0x79a>
          pcb->ooseq = cseg->next;
 800acea:	682b      	ldr	r3, [r5, #0]
 800acec:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
          tcp_seg_free(cseg);
 800acf0:	4628      	mov	r0, r5
 800acf2:	f7fe f963 	bl	8008fbc <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800acf6:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
 800acfa:	2d00      	cmp	r5, #0
 800acfc:	d041      	beq.n	800ad82 <tcp_receive+0x7a2>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800acfe:	692a      	ldr	r2, [r5, #16]
 800ad00:	6853      	ldr	r3, [r2, #4]
 800ad02:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
        while (pcb->ooseq != NULL &&
 800ad04:	428b      	cmp	r3, r1
 800ad06:	d13c      	bne.n	800ad82 <tcp_receive+0x7a2>
          seqno = pcb->ooseq->tcphdr->seqno;
 800ad08:	495c      	ldr	r1, [pc, #368]	; (800ae7c <tcp_receive+0x89c>)
 800ad0a:	600b      	str	r3, [r1, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ad0c:	892e      	ldrh	r6, [r5, #8]
 800ad0e:	8990      	ldrh	r0, [r2, #12]
 800ad10:	f7fb feb4 	bl	8006a7c <lwip_htons>
 800ad14:	f010 0f03 	tst.w	r0, #3
 800ad18:	d0c5      	beq.n	800aca6 <tcp_receive+0x6c6>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	199a      	adds	r2, r3, r6
 800ad1e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ad20:	4413      	add	r3, r2
 800ad22:	64e3      	str	r3, [r4, #76]	; 0x4c
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ad24:	f8b4 6050 	ldrh.w	r6, [r4, #80]	; 0x50
 800ad28:	892f      	ldrh	r7, [r5, #8]
 800ad2a:	692b      	ldr	r3, [r5, #16]
 800ad2c:	8998      	ldrh	r0, [r3, #12]
 800ad2e:	f7fb fea5 	bl	8006a7c <lwip_htons>
 800ad32:	f010 0f03 	tst.w	r0, #3
 800ad36:	d0b8      	beq.n	800acaa <tcp_receive+0x6ca>
 800ad38:	2301      	movs	r3, #1
 800ad3a:	443b      	add	r3, r7
 800ad3c:	429e      	cmp	r6, r3
 800ad3e:	d3b6      	bcc.n	800acae <tcp_receive+0x6ce>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ad40:	892e      	ldrh	r6, [r5, #8]
 800ad42:	692b      	ldr	r3, [r5, #16]
 800ad44:	8998      	ldrh	r0, [r3, #12]
 800ad46:	f7fb fe99 	bl	8006a7c <lwip_htons>
 800ad4a:	f010 0f03 	tst.w	r0, #3
 800ad4e:	d0b6      	beq.n	800acbe <tcp_receive+0x6de>
 800ad50:	2301      	movs	r3, #1
 800ad52:	199a      	adds	r2, r3, r6
 800ad54:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800ad58:	1a9b      	subs	r3, r3, r2
 800ad5a:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
          tcp_update_rcv_ann_wnd(pcb);
 800ad5e:	4620      	mov	r0, r4
 800ad60:	f7fe f8ac 	bl	8008ebc <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800ad64:	6869      	ldr	r1, [r5, #4]
 800ad66:	890b      	ldrh	r3, [r1, #8]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d0ae      	beq.n	800acca <tcp_receive+0x6ea>
            if (recv_data) {
 800ad6c:	4b4c      	ldr	r3, [pc, #304]	; (800aea0 <tcp_receive+0x8c0>)
 800ad6e:	6818      	ldr	r0, [r3, #0]
 800ad70:	2800      	cmp	r0, #0
 800ad72:	d1a6      	bne.n	800acc2 <tcp_receive+0x6e2>
              recv_data = cseg->p;
 800ad74:	4b4a      	ldr	r3, [pc, #296]	; (800aea0 <tcp_receive+0x8c0>)
 800ad76:	6019      	str	r1, [r3, #0]
 800ad78:	e7a5      	b.n	800acc6 <tcp_receive+0x6e6>
              pcb->state = CLOSE_WAIT;
 800ad7a:	2307      	movs	r3, #7
 800ad7c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800ad80:	e7b3      	b.n	800acea <tcp_receive+0x70a>
        tcp_ack(pcb);
 800ad82:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800ad86:	f013 0f01 	tst.w	r3, #1
 800ad8a:	d00e      	beq.n	800adaa <tcp_receive+0x7ca>
 800ad8c:	f023 0301 	bic.w	r3, r3, #1
 800ad90:	f043 0302 	orr.w	r3, r3, #2
 800ad94:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        if (ip_current_is_v6()) {
 800ad98:	4b42      	ldr	r3, [pc, #264]	; (800aea4 <tcp_receive+0x8c4>)
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f000 810d 	beq.w	800afbc <tcp_receive+0x9dc>
          nd6_reachability_hint(ip6_current_src_addr());
 800ada2:	4841      	ldr	r0, [pc, #260]	; (800aea8 <tcp_receive+0x8c8>)
 800ada4:	f00a fbb2 	bl	801550c <nd6_reachability_hint>
 800ada8:	e108      	b.n	800afbc <tcp_receive+0x9dc>
        tcp_ack(pcb);
 800adaa:	f043 0301 	orr.w	r3, r3, #1
 800adae:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 800adb2:	e7f1      	b.n	800ad98 <tcp_receive+0x7b8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800adb4:	4833      	ldr	r0, [pc, #204]	; (800ae84 <tcp_receive+0x8a4>)
 800adb6:	f7fe f92d 	bl	8009014 <tcp_seg_copy>
 800adba:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
 800adbe:	e004      	b.n	800adca <tcp_receive+0x7ea>
              if (inseg.len > next->len) {
 800adc0:	4b30      	ldr	r3, [pc, #192]	; (800ae84 <tcp_receive+0x8a4>)
 800adc2:	891a      	ldrh	r2, [r3, #8]
 800adc4:	892b      	ldrh	r3, [r5, #8]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d803      	bhi.n	800add2 <tcp_receive+0x7f2>
        tcp_send_empty_ack(pcb);
 800adca:	4620      	mov	r0, r4
 800adcc:	f002 f934 	bl	800d038 <tcp_send_empty_ack>
 800add0:	e0f4      	b.n	800afbc <tcp_receive+0x9dc>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800add2:	482c      	ldr	r0, [pc, #176]	; (800ae84 <tcp_receive+0x8a4>)
 800add4:	f7fe f91e 	bl	8009014 <tcp_seg_copy>
                if (cseg != NULL) {
 800add8:	4603      	mov	r3, r0
 800adda:	2800      	cmp	r0, #0
 800addc:	d0f5      	beq.n	800adca <tcp_receive+0x7ea>
                  if (prev != NULL) {
 800adde:	b12e      	cbz	r6, 800adec <tcp_receive+0x80c>
                    prev->next = cseg;
 800ade0:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 800ade2:	4629      	mov	r1, r5
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7ff fba7 	bl	800a538 <tcp_oos_insert_segment>
 800adea:	e7ee      	b.n	800adca <tcp_receive+0x7ea>
                    pcb->ooseq = cseg;
 800adec:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
 800adf0:	e7f7      	b.n	800ade2 <tcp_receive+0x802>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800adf2:	1a99      	subs	r1, r3, r2
 800adf4:	2900      	cmp	r1, #0
 800adf6:	db2a      	blt.n	800ae4e <tcp_receive+0x86e>
              if (next->next == NULL &&
 800adf8:	6829      	ldr	r1, [r5, #0]
 800adfa:	462e      	mov	r6, r5
 800adfc:	2900      	cmp	r1, #0
 800adfe:	d038      	beq.n	800ae72 <tcp_receive+0x892>
 800ae00:	460d      	mov	r5, r1
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ae02:	2d00      	cmp	r5, #0
 800ae04:	d0e1      	beq.n	800adca <tcp_receive+0x7ea>
            if (seqno == next->tcphdr->seqno) {
 800ae06:	6928      	ldr	r0, [r5, #16]
 800ae08:	6842      	ldr	r2, [r0, #4]
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d0d8      	beq.n	800adc0 <tcp_receive+0x7e0>
              if (prev == NULL) {
 800ae0e:	2e00      	cmp	r6, #0
 800ae10:	d0ef      	beq.n	800adf2 <tcp_receive+0x812>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ae12:	6931      	ldr	r1, [r6, #16]
 800ae14:	6849      	ldr	r1, [r1, #4]
 800ae16:	1a59      	subs	r1, r3, r1
 800ae18:	2901      	cmp	r1, #1
 800ae1a:	d4ed      	bmi.n	800adf8 <tcp_receive+0x818>
 800ae1c:	1a99      	subs	r1, r3, r2
 800ae1e:	3101      	adds	r1, #1
 800ae20:	2900      	cmp	r1, #0
 800ae22:	dce9      	bgt.n	800adf8 <tcp_receive+0x818>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ae24:	4817      	ldr	r0, [pc, #92]	; (800ae84 <tcp_receive+0x8a4>)
 800ae26:	f7fe f8f5 	bl	8009014 <tcp_seg_copy>
                  if (cseg != NULL) {
 800ae2a:	4607      	mov	r7, r0
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	d0cc      	beq.n	800adca <tcp_receive+0x7ea>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ae30:	6933      	ldr	r3, [r6, #16]
 800ae32:	6859      	ldr	r1, [r3, #4]
 800ae34:	8933      	ldrh	r3, [r6, #8]
 800ae36:	440b      	add	r3, r1
 800ae38:	4a10      	ldr	r2, [pc, #64]	; (800ae7c <tcp_receive+0x89c>)
 800ae3a:	6812      	ldr	r2, [r2, #0]
 800ae3c:	1a9b      	subs	r3, r3, r2
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	dc10      	bgt.n	800ae64 <tcp_receive+0x884>
                    prev->next = cseg;
 800ae42:	6037      	str	r7, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ae44:	4629      	mov	r1, r5
 800ae46:	4638      	mov	r0, r7
 800ae48:	f7ff fb76 	bl	800a538 <tcp_oos_insert_segment>
 800ae4c:	e7bd      	b.n	800adca <tcp_receive+0x7ea>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ae4e:	480d      	ldr	r0, [pc, #52]	; (800ae84 <tcp_receive+0x8a4>)
 800ae50:	f7fe f8e0 	bl	8009014 <tcp_seg_copy>
                  if (cseg != NULL) {
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d0b8      	beq.n	800adca <tcp_receive+0x7ea>
                    pcb->ooseq = cseg;
 800ae58:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
                    tcp_oos_insert_segment(cseg, next);
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	f7ff fb6b 	bl	800a538 <tcp_oos_insert_segment>
 800ae62:	e7b2      	b.n	800adca <tcp_receive+0x7ea>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ae64:	1a52      	subs	r2, r2, r1
 800ae66:	b291      	uxth	r1, r2
 800ae68:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ae6a:	6870      	ldr	r0, [r6, #4]
 800ae6c:	f7fd fa50 	bl	8008310 <pbuf_realloc>
 800ae70:	e7e7      	b.n	800ae42 <tcp_receive+0x862>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ae72:	1a9a      	subs	r2, r3, r2
              if (next->next == NULL &&
 800ae74:	2a00      	cmp	r2, #0
 800ae76:	dc19      	bgt.n	800aeac <tcp_receive+0x8cc>
 800ae78:	460d      	mov	r5, r1
 800ae7a:	e7c2      	b.n	800ae02 <tcp_receive+0x822>
 800ae7c:	20000aac 	.word	0x20000aac
 800ae80:	20000ac2 	.word	0x20000ac2
 800ae84:	20000a8c 	.word	0x20000a8c
 800ae88:	08018cc0 	.word	0x08018cc0
 800ae8c:	08018e98 	.word	0x08018e98
 800ae90:	08016bb4 	.word	0x08016bb4
 800ae94:	08018ed4 	.word	0x08018ed4
 800ae98:	08018ef4 	.word	0x08018ef4
 800ae9c:	20000aa8 	.word	0x20000aa8
 800aea0:	20000aa4 	.word	0x20000aa4
 800aea4:	20003e34 	.word	0x20003e34
 800aea8:	20003e48 	.word	0x20003e48
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800aeac:	8980      	ldrh	r0, [r0, #12]
 800aeae:	f7fb fde5 	bl	8006a7c <lwip_htons>
 800aeb2:	f010 0f01 	tst.w	r0, #1
 800aeb6:	d188      	bne.n	800adca <tcp_receive+0x7ea>
                next->next = tcp_seg_copy(&inseg);
 800aeb8:	4841      	ldr	r0, [pc, #260]	; (800afc0 <tcp_receive+0x9e0>)
 800aeba:	f7fe f8ab 	bl	8009014 <tcp_seg_copy>
 800aebe:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800aec0:	2800      	cmp	r0, #0
 800aec2:	d082      	beq.n	800adca <tcp_receive+0x7ea>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800aec4:	692b      	ldr	r3, [r5, #16]
 800aec6:	6859      	ldr	r1, [r3, #4]
 800aec8:	892a      	ldrh	r2, [r5, #8]
 800aeca:	440a      	add	r2, r1
 800aecc:	4b3d      	ldr	r3, [pc, #244]	; (800afc4 <tcp_receive+0x9e4>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	1ad2      	subs	r2, r2, r3
 800aed2:	2a00      	cmp	r2, #0
 800aed4:	dc43      	bgt.n	800af5e <tcp_receive+0x97e>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800aed6:	4b3c      	ldr	r3, [pc, #240]	; (800afc8 <tcp_receive+0x9e8>)
 800aed8:	881b      	ldrh	r3, [r3, #0]
 800aeda:	4a3a      	ldr	r2, [pc, #232]	; (800afc4 <tcp_receive+0x9e4>)
 800aedc:	6812      	ldr	r2, [r2, #0]
 800aede:	4413      	add	r3, r2
 800aee0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800aee2:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800aee6:	440a      	add	r2, r1
 800aee8:	1a9b      	subs	r3, r3, r2
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	f77f af6d 	ble.w	800adca <tcp_receive+0x7ea>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800aef0:	682b      	ldr	r3, [r5, #0]
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	8998      	ldrh	r0, [r3, #12]
 800aef6:	f7fb fdc1 	bl	8006a7c <lwip_htons>
 800aefa:	f010 0f01 	tst.w	r0, #1
 800aefe:	d135      	bne.n	800af6c <tcp_receive+0x98c>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800af00:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800af02:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800af06:	4413      	add	r3, r2
 800af08:	b29b      	uxth	r3, r3
 800af0a:	682a      	ldr	r2, [r5, #0]
 800af0c:	492d      	ldr	r1, [pc, #180]	; (800afc4 <tcp_receive+0x9e4>)
 800af0e:	6809      	ldr	r1, [r1, #0]
 800af10:	1a5b      	subs	r3, r3, r1
 800af12:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800af14:	682b      	ldr	r3, [r5, #0]
 800af16:	8919      	ldrh	r1, [r3, #8]
 800af18:	6858      	ldr	r0, [r3, #4]
 800af1a:	f7fd f9f9 	bl	8008310 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800af1e:	682b      	ldr	r3, [r5, #0]
 800af20:	891d      	ldrh	r5, [r3, #8]
 800af22:	691b      	ldr	r3, [r3, #16]
 800af24:	8998      	ldrh	r0, [r3, #12]
 800af26:	f7fb fda9 	bl	8006a7c <lwip_htons>
 800af2a:	f010 0f03 	tst.w	r0, #3
 800af2e:	d030      	beq.n	800af92 <tcp_receive+0x9b2>
 800af30:	2301      	movs	r3, #1
 800af32:	442b      	add	r3, r5
 800af34:	b29b      	uxth	r3, r3
 800af36:	4a24      	ldr	r2, [pc, #144]	; (800afc8 <tcp_receive+0x9e8>)
 800af38:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800af3a:	4a22      	ldr	r2, [pc, #136]	; (800afc4 <tcp_receive+0x9e4>)
 800af3c:	6812      	ldr	r2, [r2, #0]
 800af3e:	4413      	add	r3, r2
 800af40:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800af42:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800af46:	440a      	add	r2, r1
 800af48:	4293      	cmp	r3, r2
 800af4a:	f43f af3e 	beq.w	800adca <tcp_receive+0x7ea>
 800af4e:	4b1f      	ldr	r3, [pc, #124]	; (800afcc <tcp_receive+0x9ec>)
 800af50:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800af54:	491e      	ldr	r1, [pc, #120]	; (800afd0 <tcp_receive+0x9f0>)
 800af56:	481f      	ldr	r0, [pc, #124]	; (800afd4 <tcp_receive+0x9f4>)
 800af58:	f00a fd1a 	bl	8015990 <iprintf>
 800af5c:	e735      	b.n	800adca <tcp_receive+0x7ea>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800af5e:	1a5b      	subs	r3, r3, r1
 800af60:	b299      	uxth	r1, r3
 800af62:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800af64:	6868      	ldr	r0, [r5, #4]
 800af66:	f7fd f9d3 	bl	8008310 <pbuf_realloc>
 800af6a:	e7b4      	b.n	800aed6 <tcp_receive+0x8f6>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800af6c:	682b      	ldr	r3, [r5, #0]
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	8998      	ldrh	r0, [r3, #12]
 800af72:	b206      	sxth	r6, r0
 800af74:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800af78:	b280      	uxth	r0, r0
 800af7a:	f7fb fd7f 	bl	8006a7c <lwip_htons>
 800af7e:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800af82:	f7fb fd7b 	bl	8006a7c <lwip_htons>
 800af86:	b203      	sxth	r3, r0
 800af88:	682a      	ldr	r2, [r5, #0]
 800af8a:	6912      	ldr	r2, [r2, #16]
 800af8c:	431e      	orrs	r6, r3
 800af8e:	8196      	strh	r6, [r2, #12]
 800af90:	e7b6      	b.n	800af00 <tcp_receive+0x920>
                    tcplen = TCP_TCPLEN(next->next);
 800af92:	2300      	movs	r3, #0
 800af94:	e7cd      	b.n	800af32 <tcp_receive+0x952>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800af96:	4b0b      	ldr	r3, [pc, #44]	; (800afc4 <tcp_receive+0x9e4>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800af9c:	1a99      	subs	r1, r3, r2
 800af9e:	2900      	cmp	r1, #0
 800afa0:	db06      	blt.n	800afb0 <tcp_receive+0x9d0>
 800afa2:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800afa6:	440a      	add	r2, r1
 800afa8:	1a9b      	subs	r3, r3, r2
 800afaa:	3301      	adds	r3, #1
 800afac:	2b00      	cmp	r3, #0
 800afae:	dd05      	ble.n	800afbc <tcp_receive+0x9dc>
      tcp_ack_now(pcb);
 800afb0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800afb4:	f043 0302 	orr.w	r3, r3, #2
 800afb8:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
}
 800afbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afbe:	bf00      	nop
 800afc0:	20000a8c 	.word	0x20000a8c
 800afc4:	20000aac 	.word	0x20000aac
 800afc8:	20000ac2 	.word	0x20000ac2
 800afcc:	08018cc0 	.word	0x08018cc0
 800afd0:	08018e60 	.word	0x08018e60
 800afd4:	08016bb4 	.word	0x08016bb4

0800afd8 <tcp_process>:
{
 800afd8:	b570      	push	{r4, r5, r6, lr}
 800afda:	b084      	sub	sp, #16
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800afdc:	4604      	mov	r4, r0
 800afde:	b1e8      	cbz	r0, 800b01c <tcp_process+0x44>
  if (flags & TCP_RST) {
 800afe0:	4bae      	ldr	r3, [pc, #696]	; (800b29c <tcp_process+0x2c4>)
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	f013 0f04 	tst.w	r3, #4
 800afe8:	d040      	beq.n	800b06c <tcp_process+0x94>
    if (pcb->state == SYN_SENT) {
 800afea:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 800afee:	2902      	cmp	r1, #2
 800aff0:	d01c      	beq.n	800b02c <tcp_process+0x54>
      if (seqno == pcb->rcv_nxt) {
 800aff2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800aff4:	4baa      	ldr	r3, [pc, #680]	; (800b2a0 <tcp_process+0x2c8>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d020      	beq.n	800b03e <tcp_process+0x66>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800affc:	1a99      	subs	r1, r3, r2
 800affe:	2900      	cmp	r1, #0
 800b000:	db19      	blt.n	800b036 <tcp_process+0x5e>
 800b002:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800b006:	440a      	add	r2, r1
 800b008:	1a9b      	subs	r3, r3, r2
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	dc13      	bgt.n	800b036 <tcp_process+0x5e>
        tcp_ack_now(pcb);
 800b00e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b012:	f043 0302 	orr.w	r3, r3, #2
 800b016:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    if (acceptable) {
 800b01a:	e00c      	b.n	800b036 <tcp_process+0x5e>
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b01c:	4ba1      	ldr	r3, [pc, #644]	; (800b2a4 <tcp_process+0x2cc>)
 800b01e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b022:	49a1      	ldr	r1, [pc, #644]	; (800b2a8 <tcp_process+0x2d0>)
 800b024:	48a1      	ldr	r0, [pc, #644]	; (800b2ac <tcp_process+0x2d4>)
 800b026:	f00a fcb3 	bl	8015990 <iprintf>
 800b02a:	e7d9      	b.n	800afe0 <tcp_process+0x8>
      if (ackno == pcb->snd_nxt) {
 800b02c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b02e:	4ba0      	ldr	r3, [pc, #640]	; (800b2b0 <tcp_process+0x2d8>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	429a      	cmp	r2, r3
 800b034:	d003      	beq.n	800b03e <tcp_process+0x66>
      return ERR_OK;
 800b036:	2500      	movs	r5, #0
}
 800b038:	4628      	mov	r0, r5
 800b03a:	b004      	add	sp, #16
 800b03c:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b03e:	b169      	cbz	r1, 800b05c <tcp_process+0x84>
      recv_flags |= TF_RESET;
 800b040:	4a9c      	ldr	r2, [pc, #624]	; (800b2b4 <tcp_process+0x2dc>)
 800b042:	7813      	ldrb	r3, [r2, #0]
 800b044:	f043 0308 	orr.w	r3, r3, #8
 800b048:	7013      	strb	r3, [r2, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b04a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b04e:	f023 0301 	bic.w	r3, r3, #1
 800b052:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      return ERR_RST;
 800b056:	f06f 050d 	mvn.w	r5, #13
 800b05a:	e7ed      	b.n	800b038 <tcp_process+0x60>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b05c:	4b91      	ldr	r3, [pc, #580]	; (800b2a4 <tcp_process+0x2cc>)
 800b05e:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b062:	4995      	ldr	r1, [pc, #596]	; (800b2b8 <tcp_process+0x2e0>)
 800b064:	4891      	ldr	r0, [pc, #580]	; (800b2ac <tcp_process+0x2d4>)
 800b066:	f00a fc93 	bl	8015990 <iprintf>
 800b06a:	e7e9      	b.n	800b040 <tcp_process+0x68>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b06c:	f013 0f02 	tst.w	r3, #2
 800b070:	d005      	beq.n	800b07e <tcp_process+0xa6>
 800b072:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b076:	3b02      	subs	r3, #2
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d81f      	bhi.n	800b0be <tcp_process+0xe6>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b07e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b082:	f013 0f10 	tst.w	r3, #16
 800b086:	d102      	bne.n	800b08e <tcp_process+0xb6>
    pcb->tmr = tcp_ticks;
 800b088:	4b8c      	ldr	r3, [pc, #560]	; (800b2bc <tcp_process+0x2e4>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	64a3      	str	r3, [r4, #72]	; 0x48
  pcb->keep_cnt_sent = 0;
 800b08e:	2300      	movs	r3, #0
 800b090:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
  pcb->persist_probe = 0;
 800b094:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
  tcp_parseopt(pcb);
 800b098:	4620      	mov	r0, r4
 800b09a:	f7ff f811 	bl	800a0c0 <tcp_parseopt>
  switch (pcb->state) {
 800b09e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b0a2:	3b02      	subs	r3, #2
 800b0a4:	2b07      	cmp	r3, #7
 800b0a6:	f200 8277 	bhi.w	800b598 <tcp_process+0x5c0>
 800b0aa:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b0ae:	0010      	.short	0x0010
 800b0b0:	018100d2 	.word	0x018100d2
 800b0b4:	01f40195 	.word	0x01f40195
 800b0b8:	02250181 	.word	0x02250181
 800b0bc:	025a      	.short	0x025a
    tcp_ack_now(pcb);
 800b0be:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b0c2:	f043 0302 	orr.w	r3, r3, #2
 800b0c6:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    return ERR_OK;
 800b0ca:	2500      	movs	r5, #0
 800b0cc:	e7b4      	b.n	800b038 <tcp_process+0x60>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b0ce:	4b73      	ldr	r3, [pc, #460]	; (800b29c <tcp_process+0x2c4>)
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	f003 0212 	and.w	r2, r3, #18
 800b0d6:	2a12      	cmp	r2, #18
 800b0d8:	d005      	beq.n	800b0e6 <tcp_process+0x10e>
      else if (flags & TCP_ACK) {
 800b0da:	f013 0f10 	tst.w	r3, #16
 800b0de:	f040 8097 	bne.w	800b210 <tcp_process+0x238>
  return ERR_OK;
 800b0e2:	2500      	movs	r5, #0
 800b0e4:	e7a8      	b.n	800b038 <tcp_process+0x60>
          && (ackno == pcb->lastack + 1)) {
 800b0e6:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800b0e8:	3201      	adds	r2, #1
 800b0ea:	4971      	ldr	r1, [pc, #452]	; (800b2b0 <tcp_process+0x2d8>)
 800b0ec:	6809      	ldr	r1, [r1, #0]
 800b0ee:	428a      	cmp	r2, r1
 800b0f0:	d1f3      	bne.n	800b0da <tcp_process+0x102>
        pcb->rcv_nxt = seqno + 1;
 800b0f2:	4b6b      	ldr	r3, [pc, #428]	; (800b2a0 <tcp_process+0x2c8>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	1c5a      	adds	r2, r3, #1
 800b0f8:	64e2      	str	r2, [r4, #76]	; 0x4c
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b0fa:	6562      	str	r2, [r4, #84]	; 0x54
        pcb->lastack = ackno;
 800b0fc:	66e1      	str	r1, [r4, #108]	; 0x6c
        pcb->snd_wnd = tcphdr->wnd;
 800b0fe:	4a70      	ldr	r2, [pc, #448]	; (800b2c0 <tcp_process+0x2e8>)
 800b100:	6812      	ldr	r2, [r2, #0]
 800b102:	89d2      	ldrh	r2, [r2, #14]
 800b104:	f8a4 2088 	strh.w	r2, [r4, #136]	; 0x88
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b108:	f8a4 208a 	strh.w	r2, [r4, #138]	; 0x8a
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b10c:	3b01      	subs	r3, #1
 800b10e:	67e3      	str	r3, [r4, #124]	; 0x7c
        pcb->state = ESTABLISHED;
 800b110:	2304      	movs	r3, #4
 800b112:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b116:	f8b4 505a 	ldrh.w	r5, [r4, #90]	; 0x5a
 800b11a:	f114 0618 	adds.w	r6, r4, #24
 800b11e:	d003      	beq.n	800b128 <tcp_process+0x150>
 800b120:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800b124:	2b06      	cmp	r3, #6
 800b126:	d047      	beq.n	800b1b8 <tcp_process+0x1e0>
 800b128:	f104 0018 	add.w	r0, r4, #24
 800b12c:	f005 fcee 	bl	8010b0c <ip4_route>
 800b130:	4601      	mov	r1, r0
 800b132:	4632      	mov	r2, r6
 800b134:	4628      	mov	r0, r5
 800b136:	f7fe f82f 	bl	8009198 <tcp_eff_send_mss_netif>
 800b13a:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b13e:	0042      	lsls	r2, r0, #1
 800b140:	f241 131c 	movw	r3, #4380	; 0x111c
 800b144:	4293      	cmp	r3, r2
 800b146:	bf38      	it	cc
 800b148:	4613      	movcc	r3, r2
 800b14a:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
 800b14e:	d939      	bls.n	800b1c4 <tcp_process+0x1ec>
 800b150:	0083      	lsls	r3, r0, #2
 800b152:	b29b      	uxth	r3, r3
 800b154:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b158:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d03b      	beq.n	800b1d8 <tcp_process+0x200>
        --pcb->snd_queuelen;
 800b160:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 800b164:	3b01      	subs	r3, #1
 800b166:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
        rseg = pcb->unacked;
 800b16a:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
        if (rseg == NULL) {
 800b16e:	2d00      	cmp	r5, #0
 800b170:	d03a      	beq.n	800b1e8 <tcp_process+0x210>
          pcb->unacked = rseg->next;
 800b172:	682b      	ldr	r3, [r5, #0]
 800b174:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
        tcp_seg_free(rseg);
 800b178:	4628      	mov	r0, r5
 800b17a:	f7fd ff1f 	bl	8008fbc <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800b17e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800b182:	2b00      	cmp	r3, #0
 800b184:	d03f      	beq.n	800b206 <tcp_process+0x22e>
          pcb->rtime = 0;
 800b186:	2300      	movs	r3, #0
 800b188:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
          pcb->nrtx = 0;
 800b18c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b190:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800b194:	b143      	cbz	r3, 800b1a8 <tcp_process+0x1d0>
 800b196:	2200      	movs	r2, #0
 800b198:	4621      	mov	r1, r4
 800b19a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b19c:	4798      	blx	r3
 800b19e:	4605      	mov	r5, r0
        if (err == ERR_ABRT) {
 800b1a0:	f110 0f0d 	cmn.w	r0, #13
 800b1a4:	f43f af48 	beq.w	800b038 <tcp_process+0x60>
        tcp_ack_now(pcb);
 800b1a8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b1ac:	f043 0302 	orr.w	r3, r3, #2
 800b1b0:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  return ERR_OK;
 800b1b4:	2500      	movs	r5, #0
        tcp_ack_now(pcb);
 800b1b6:	e73f      	b.n	800b038 <tcp_process+0x60>
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b1b8:	4631      	mov	r1, r6
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f006 fd1a 	bl	8011bf4 <ip6_route>
 800b1c0:	4601      	mov	r1, r0
 800b1c2:	e7b6      	b.n	800b132 <tcp_process+0x15a>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b1c4:	f241 131c 	movw	r3, #4380	; 0x111c
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d902      	bls.n	800b1d2 <tcp_process+0x1fa>
 800b1cc:	0043      	lsls	r3, r0, #1
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	e7c0      	b.n	800b154 <tcp_process+0x17c>
 800b1d2:	f241 131c 	movw	r3, #4380	; 0x111c
 800b1d6:	e7bd      	b.n	800b154 <tcp_process+0x17c>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b1d8:	4b32      	ldr	r3, [pc, #200]	; (800b2a4 <tcp_process+0x2cc>)
 800b1da:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b1de:	4939      	ldr	r1, [pc, #228]	; (800b2c4 <tcp_process+0x2ec>)
 800b1e0:	4832      	ldr	r0, [pc, #200]	; (800b2ac <tcp_process+0x2d4>)
 800b1e2:	f00a fbd5 	bl	8015990 <iprintf>
 800b1e6:	e7bb      	b.n	800b160 <tcp_process+0x188>
          rseg = pcb->unsent;
 800b1e8:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b1ec:	b11d      	cbz	r5, 800b1f6 <tcp_process+0x21e>
          pcb->unsent = rseg->next;
 800b1ee:	682b      	ldr	r3, [r5, #0]
 800b1f0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800b1f4:	e7c0      	b.n	800b178 <tcp_process+0x1a0>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b1f6:	4b2b      	ldr	r3, [pc, #172]	; (800b2a4 <tcp_process+0x2cc>)
 800b1f8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b1fc:	4932      	ldr	r1, [pc, #200]	; (800b2c8 <tcp_process+0x2f0>)
 800b1fe:	482b      	ldr	r0, [pc, #172]	; (800b2ac <tcp_process+0x2d4>)
 800b200:	f00a fbc6 	bl	8015990 <iprintf>
 800b204:	e7f3      	b.n	800b1ee <tcp_process+0x216>
          pcb->rtime = -1;
 800b206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b20a:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 800b20e:	e7bf      	b.n	800b190 <tcp_process+0x1b8>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b210:	4b2b      	ldr	r3, [pc, #172]	; (800b2c0 <tcp_process+0x2e8>)
 800b212:	6819      	ldr	r1, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b214:	4b2d      	ldr	r3, [pc, #180]	; (800b2cc <tcp_process+0x2f4>)
 800b216:	4a2e      	ldr	r2, [pc, #184]	; (800b2d0 <tcp_process+0x2f8>)
 800b218:	8810      	ldrh	r0, [r2, #0]
 800b21a:	4a21      	ldr	r2, [pc, #132]	; (800b2a0 <tcp_process+0x2c8>)
 800b21c:	6812      	ldr	r2, [r2, #0]
 800b21e:	880d      	ldrh	r5, [r1, #0]
 800b220:	9502      	str	r5, [sp, #8]
 800b222:	8849      	ldrh	r1, [r1, #2]
 800b224:	9101      	str	r1, [sp, #4]
 800b226:	f1a3 0118 	sub.w	r1, r3, #24
 800b22a:	9100      	str	r1, [sp, #0]
 800b22c:	4402      	add	r2, r0
 800b22e:	4920      	ldr	r1, [pc, #128]	; (800b2b0 <tcp_process+0x2d8>)
 800b230:	6809      	ldr	r1, [r1, #0]
 800b232:	4620      	mov	r0, r4
 800b234:	f001 feb8 	bl	800cfa8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b238:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 800b23c:	2b05      	cmp	r3, #5
 800b23e:	d901      	bls.n	800b244 <tcp_process+0x26c>
  return ERR_OK;
 800b240:	2500      	movs	r5, #0
 800b242:	e6f9      	b.n	800b038 <tcp_process+0x60>
          pcb->rtime = 0;
 800b244:	2500      	movs	r5, #0
 800b246:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
          tcp_rexmit_rto(pcb);
 800b24a:	4620      	mov	r0, r4
 800b24c:	f002 f90c 	bl	800d468 <tcp_rexmit_rto>
 800b250:	e6f2      	b.n	800b038 <tcp_process+0x60>
      if (flags & TCP_ACK) {
 800b252:	4b12      	ldr	r3, [pc, #72]	; (800b29c <tcp_process+0x2c4>)
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	f013 0f10 	tst.w	r3, #16
 800b25a:	f000 8098 	beq.w	800b38e <tcp_process+0x3b6>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b25e:	4b14      	ldr	r3, [pc, #80]	; (800b2b0 <tcp_process+0x2d8>)
 800b260:	6819      	ldr	r1, [r3, #0]
 800b262:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b264:	1acb      	subs	r3, r1, r3
 800b266:	2b01      	cmp	r3, #1
 800b268:	d403      	bmi.n	800b272 <tcp_process+0x29a>
 800b26a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b26c:	1acb      	subs	r3, r1, r3
 800b26e:	2b00      	cmp	r3, #0
 800b270:	dd30      	ble.n	800b2d4 <tcp_process+0x2fc>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b272:	4b13      	ldr	r3, [pc, #76]	; (800b2c0 <tcp_process+0x2e8>)
 800b274:	6818      	ldr	r0, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b276:	4b15      	ldr	r3, [pc, #84]	; (800b2cc <tcp_process+0x2f4>)
 800b278:	4a15      	ldr	r2, [pc, #84]	; (800b2d0 <tcp_process+0x2f8>)
 800b27a:	8815      	ldrh	r5, [r2, #0]
 800b27c:	4a08      	ldr	r2, [pc, #32]	; (800b2a0 <tcp_process+0x2c8>)
 800b27e:	6812      	ldr	r2, [r2, #0]
 800b280:	8806      	ldrh	r6, [r0, #0]
 800b282:	9602      	str	r6, [sp, #8]
 800b284:	8840      	ldrh	r0, [r0, #2]
 800b286:	9001      	str	r0, [sp, #4]
 800b288:	f1a3 0018 	sub.w	r0, r3, #24
 800b28c:	9000      	str	r0, [sp, #0]
 800b28e:	442a      	add	r2, r5
 800b290:	4620      	mov	r0, r4
 800b292:	f001 fe89 	bl	800cfa8 <tcp_rst>
  return ERR_OK;
 800b296:	2500      	movs	r5, #0
 800b298:	e6ce      	b.n	800b038 <tcp_process+0x60>
 800b29a:	bf00      	nop
 800b29c:	20000a88 	.word	0x20000a88
 800b2a0:	20000aac 	.word	0x20000aac
 800b2a4:	08018cc0 	.word	0x08018cc0
 800b2a8:	08018f1c 	.word	0x08018f1c
 800b2ac:	08016bb4 	.word	0x08016bb4
 800b2b0:	20000a84 	.word	0x20000a84
 800b2b4:	20000aa8 	.word	0x20000aa8
 800b2b8:	08018f38 	.word	0x08018f38
 800b2bc:	20007fb0 	.word	0x20007fb0
 800b2c0:	20000ab4 	.word	0x20000ab4
 800b2c4:	08018f58 	.word	0x08018f58
 800b2c8:	08018f70 	.word	0x08018f70
 800b2cc:	20003e60 	.word	0x20003e60
 800b2d0:	20000ac2 	.word	0x20000ac2
          pcb->state = ESTABLISHED;
 800b2d4:	2304      	movs	r3, #4
 800b2d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          if (pcb->listener == NULL) {
 800b2da:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d03c      	beq.n	800b35c <tcp_process+0x384>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e4:	b393      	cbz	r3, 800b34c <tcp_process+0x374>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b2e6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800b2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d03d      	beq.n	800b36c <tcp_process+0x394>
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	4621      	mov	r1, r4
 800b2f4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b2f6:	4798      	blx	r3
          if (err != ERR_OK) {
 800b2f8:	4605      	mov	r5, r0
 800b2fa:	bb88      	cbnz	r0, 800b360 <tcp_process+0x388>
          tcp_receive(pcb);
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f7ff f96f 	bl	800a5e0 <tcp_receive>
          if (recv_acked != 0) {
 800b302:	4bab      	ldr	r3, [pc, #684]	; (800b5b0 <tcp_process+0x5d8>)
 800b304:	881b      	ldrh	r3, [r3, #0]
 800b306:	b113      	cbz	r3, 800b30e <tcp_process+0x336>
            recv_acked--;
 800b308:	3b01      	subs	r3, #1
 800b30a:	4aa9      	ldr	r2, [pc, #676]	; (800b5b0 <tcp_process+0x5d8>)
 800b30c:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b30e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800b312:	0059      	lsls	r1, r3, #1
 800b314:	f241 121c 	movw	r2, #4380	; 0x111c
 800b318:	428a      	cmp	r2, r1
 800b31a:	bf38      	it	cc
 800b31c:	460a      	movcc	r2, r1
 800b31e:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800b322:	d92a      	bls.n	800b37a <tcp_process+0x3a2>
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	b29b      	uxth	r3, r3
 800b328:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
          if (recv_flags & TF_GOT_FIN) {
 800b32c:	4ba1      	ldr	r3, [pc, #644]	; (800b5b4 <tcp_process+0x5dc>)
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	f013 0f20 	tst.w	r3, #32
 800b334:	f43f ae80 	beq.w	800b038 <tcp_process+0x60>
            tcp_ack_now(pcb);
 800b338:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b33c:	f043 0302 	orr.w	r3, r3, #2
 800b340:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
            pcb->state = CLOSE_WAIT;
 800b344:	2307      	movs	r3, #7
 800b346:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800b34a:	e675      	b.n	800b038 <tcp_process+0x60>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b34c:	4b9a      	ldr	r3, [pc, #616]	; (800b5b8 <tcp_process+0x5e0>)
 800b34e:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b352:	499a      	ldr	r1, [pc, #616]	; (800b5bc <tcp_process+0x5e4>)
 800b354:	489a      	ldr	r0, [pc, #616]	; (800b5c0 <tcp_process+0x5e8>)
 800b356:	f00a fb1b 	bl	8015990 <iprintf>
 800b35a:	e7c4      	b.n	800b2e6 <tcp_process+0x30e>
            err = ERR_VAL;
 800b35c:	f06f 0505 	mvn.w	r5, #5
            if (err != ERR_ABRT) {
 800b360:	f115 0f0d 	cmn.w	r5, #13
 800b364:	d105      	bne.n	800b372 <tcp_process+0x39a>
            return ERR_ABRT;
 800b366:	f06f 050c 	mvn.w	r5, #12
 800b36a:	e665      	b.n	800b038 <tcp_process+0x60>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b36c:	f06f 050f 	mvn.w	r5, #15
 800b370:	e7f6      	b.n	800b360 <tcp_process+0x388>
              tcp_abort(pcb);
 800b372:	4620      	mov	r0, r4
 800b374:	f7fe f888 	bl	8009488 <tcp_abort>
 800b378:	e7f5      	b.n	800b366 <tcp_process+0x38e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b37a:	f241 121c 	movw	r2, #4380	; 0x111c
 800b37e:	4291      	cmp	r1, r2
 800b380:	d902      	bls.n	800b388 <tcp_process+0x3b0>
 800b382:	005b      	lsls	r3, r3, #1
 800b384:	b29b      	uxth	r3, r3
 800b386:	e7cf      	b.n	800b328 <tcp_process+0x350>
 800b388:	f241 131c 	movw	r3, #4380	; 0x111c
 800b38c:	e7cc      	b.n	800b328 <tcp_process+0x350>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b38e:	f013 0f02 	tst.w	r3, #2
 800b392:	f000 8103 	beq.w	800b59c <tcp_process+0x5c4>
 800b396:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b398:	3b01      	subs	r3, #1
 800b39a:	4a8a      	ldr	r2, [pc, #552]	; (800b5c4 <tcp_process+0x5ec>)
 800b39c:	6812      	ldr	r2, [r2, #0]
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d001      	beq.n	800b3a6 <tcp_process+0x3ce>
  return ERR_OK;
 800b3a2:	2500      	movs	r5, #0
 800b3a4:	e648      	b.n	800b038 <tcp_process+0x60>
        tcp_rexmit(pcb);
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f001 fd76 	bl	800ce98 <tcp_rexmit>
  return ERR_OK;
 800b3ac:	2500      	movs	r5, #0
 800b3ae:	e643      	b.n	800b038 <tcp_process+0x60>
      tcp_receive(pcb);
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f7ff f915 	bl	800a5e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b3b6:	4b7f      	ldr	r3, [pc, #508]	; (800b5b4 <tcp_process+0x5dc>)
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	f013 0f20 	tst.w	r3, #32
 800b3be:	f000 80ef 	beq.w	800b5a0 <tcp_process+0x5c8>
        tcp_ack_now(pcb);
 800b3c2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b3c6:	f043 0302 	orr.w	r3, r3, #2
 800b3ca:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        pcb->state = CLOSE_WAIT;
 800b3ce:	2307      	movs	r3, #7
 800b3d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return ERR_OK;
 800b3d4:	2500      	movs	r5, #0
 800b3d6:	e62f      	b.n	800b038 <tcp_process+0x60>
      tcp_receive(pcb);
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f7ff f901 	bl	800a5e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b3de:	4b75      	ldr	r3, [pc, #468]	; (800b5b4 <tcp_process+0x5dc>)
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	f013 0f20 	tst.w	r3, #32
 800b3e6:	d03f      	beq.n	800b468 <tcp_process+0x490>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b3e8:	4b77      	ldr	r3, [pc, #476]	; (800b5c8 <tcp_process+0x5f0>)
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	f013 0f10 	tst.w	r3, #16
 800b3f0:	d004      	beq.n	800b3fc <tcp_process+0x424>
 800b3f2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b3f4:	4b75      	ldr	r3, [pc, #468]	; (800b5cc <tcp_process+0x5f4>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d00a      	beq.n	800b412 <tcp_process+0x43a>
          tcp_ack_now(pcb);
 800b3fc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b400:	f043 0302 	orr.w	r3, r3, #2
 800b404:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
          pcb->state = CLOSING;
 800b408:	2308      	movs	r3, #8
 800b40a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return ERR_OK;
 800b40e:	2500      	movs	r5, #0
 800b410:	e612      	b.n	800b038 <tcp_process+0x60>
            pcb->unsent == NULL) {
 800b412:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1f0      	bne.n	800b3fc <tcp_process+0x424>
          tcp_ack_now(pcb);
 800b41a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b41e:	f043 0302 	orr.w	r3, r3, #2
 800b422:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
          tcp_pcb_purge(pcb);
 800b426:	4620      	mov	r0, r4
 800b428:	f7fd fef6 	bl	8009218 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b42c:	4b68      	ldr	r3, [pc, #416]	; (800b5d0 <tcp_process+0x5f8>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	429c      	cmp	r4, r3
 800b432:	d005      	beq.n	800b440 <tcp_process+0x468>
 800b434:	b153      	cbz	r3, 800b44c <tcp_process+0x474>
 800b436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b438:	4294      	cmp	r4, r2
 800b43a:	d005      	beq.n	800b448 <tcp_process+0x470>
 800b43c:	4613      	mov	r3, r2
 800b43e:	e7f9      	b.n	800b434 <tcp_process+0x45c>
 800b440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b442:	4b63      	ldr	r3, [pc, #396]	; (800b5d0 <tcp_process+0x5f8>)
 800b444:	601a      	str	r2, [r3, #0]
 800b446:	e001      	b.n	800b44c <tcp_process+0x474>
 800b448:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b44a:	635a      	str	r2, [r3, #52]	; 0x34
 800b44c:	4b61      	ldr	r3, [pc, #388]	; (800b5d4 <tcp_process+0x5fc>)
 800b44e:	2201      	movs	r2, #1
 800b450:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b452:	230a      	movs	r3, #10
 800b454:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b458:	4b5f      	ldr	r3, [pc, #380]	; (800b5d8 <tcp_process+0x600>)
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	6362      	str	r2, [r4, #52]	; 0x34
 800b45e:	601c      	str	r4, [r3, #0]
 800b460:	f002 f92e 	bl	800d6c0 <tcp_timer_needed>
  return ERR_OK;
 800b464:	2500      	movs	r5, #0
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b466:	e5e7      	b.n	800b038 <tcp_process+0x60>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b468:	4b57      	ldr	r3, [pc, #348]	; (800b5c8 <tcp_process+0x5f0>)
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	f013 0f10 	tst.w	r3, #16
 800b470:	f000 8098 	beq.w	800b5a4 <tcp_process+0x5cc>
 800b474:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b476:	4b55      	ldr	r3, [pc, #340]	; (800b5cc <tcp_process+0x5f4>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d001      	beq.n	800b482 <tcp_process+0x4aa>
  return ERR_OK;
 800b47e:	2500      	movs	r5, #0
 800b480:	e5da      	b.n	800b038 <tcp_process+0x60>
                 pcb->unsent == NULL) {
 800b482:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b486:	b10b      	cbz	r3, 800b48c <tcp_process+0x4b4>
  return ERR_OK;
 800b488:	2500      	movs	r5, #0
 800b48a:	e5d5      	b.n	800b038 <tcp_process+0x60>
        pcb->state = FIN_WAIT_2;
 800b48c:	2306      	movs	r3, #6
 800b48e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return ERR_OK;
 800b492:	2500      	movs	r5, #0
 800b494:	e5d0      	b.n	800b038 <tcp_process+0x60>
      tcp_receive(pcb);
 800b496:	4620      	mov	r0, r4
 800b498:	f7ff f8a2 	bl	800a5e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b49c:	4b45      	ldr	r3, [pc, #276]	; (800b5b4 <tcp_process+0x5dc>)
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	f013 0f20 	tst.w	r3, #32
 800b4a4:	d101      	bne.n	800b4aa <tcp_process+0x4d2>
  return ERR_OK;
 800b4a6:	2500      	movs	r5, #0
 800b4a8:	e5c6      	b.n	800b038 <tcp_process+0x60>
        tcp_ack_now(pcb);
 800b4aa:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b4ae:	f043 0302 	orr.w	r3, r3, #2
 800b4b2:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        tcp_pcb_purge(pcb);
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f7fd feae 	bl	8009218 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b4bc:	4b44      	ldr	r3, [pc, #272]	; (800b5d0 <tcp_process+0x5f8>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	429c      	cmp	r4, r3
 800b4c2:	d005      	beq.n	800b4d0 <tcp_process+0x4f8>
 800b4c4:	b153      	cbz	r3, 800b4dc <tcp_process+0x504>
 800b4c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4c8:	4294      	cmp	r4, r2
 800b4ca:	d005      	beq.n	800b4d8 <tcp_process+0x500>
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	e7f9      	b.n	800b4c4 <tcp_process+0x4ec>
 800b4d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4d2:	4b3f      	ldr	r3, [pc, #252]	; (800b5d0 <tcp_process+0x5f8>)
 800b4d4:	601a      	str	r2, [r3, #0]
 800b4d6:	e001      	b.n	800b4dc <tcp_process+0x504>
 800b4d8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b4da:	635a      	str	r2, [r3, #52]	; 0x34
 800b4dc:	4b3d      	ldr	r3, [pc, #244]	; (800b5d4 <tcp_process+0x5fc>)
 800b4de:	2201      	movs	r2, #1
 800b4e0:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b4e2:	230a      	movs	r3, #10
 800b4e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b4e8:	4b3b      	ldr	r3, [pc, #236]	; (800b5d8 <tcp_process+0x600>)
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	6362      	str	r2, [r4, #52]	; 0x34
 800b4ee:	601c      	str	r4, [r3, #0]
 800b4f0:	f002 f8e6 	bl	800d6c0 <tcp_timer_needed>
  return ERR_OK;
 800b4f4:	2500      	movs	r5, #0
 800b4f6:	e59f      	b.n	800b038 <tcp_process+0x60>
      tcp_receive(pcb);
 800b4f8:	4620      	mov	r0, r4
 800b4fa:	f7ff f871 	bl	800a5e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b4fe:	4b32      	ldr	r3, [pc, #200]	; (800b5c8 <tcp_process+0x5f0>)
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	f013 0f10 	tst.w	r3, #16
 800b506:	d04f      	beq.n	800b5a8 <tcp_process+0x5d0>
 800b508:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b50a:	4b30      	ldr	r3, [pc, #192]	; (800b5cc <tcp_process+0x5f4>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d001      	beq.n	800b516 <tcp_process+0x53e>
  return ERR_OK;
 800b512:	2500      	movs	r5, #0
 800b514:	e590      	b.n	800b038 <tcp_process+0x60>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b516:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b51a:	b10b      	cbz	r3, 800b520 <tcp_process+0x548>
  return ERR_OK;
 800b51c:	2500      	movs	r5, #0
 800b51e:	e58b      	b.n	800b038 <tcp_process+0x60>
        tcp_pcb_purge(pcb);
 800b520:	4620      	mov	r0, r4
 800b522:	f7fd fe79 	bl	8009218 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b526:	4b2a      	ldr	r3, [pc, #168]	; (800b5d0 <tcp_process+0x5f8>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	429c      	cmp	r4, r3
 800b52c:	d005      	beq.n	800b53a <tcp_process+0x562>
 800b52e:	b153      	cbz	r3, 800b546 <tcp_process+0x56e>
 800b530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b532:	4294      	cmp	r4, r2
 800b534:	d005      	beq.n	800b542 <tcp_process+0x56a>
 800b536:	4613      	mov	r3, r2
 800b538:	e7f9      	b.n	800b52e <tcp_process+0x556>
 800b53a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b53c:	4b24      	ldr	r3, [pc, #144]	; (800b5d0 <tcp_process+0x5f8>)
 800b53e:	601a      	str	r2, [r3, #0]
 800b540:	e001      	b.n	800b546 <tcp_process+0x56e>
 800b542:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b544:	635a      	str	r2, [r3, #52]	; 0x34
 800b546:	4b23      	ldr	r3, [pc, #140]	; (800b5d4 <tcp_process+0x5fc>)
 800b548:	2201      	movs	r2, #1
 800b54a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b54c:	230a      	movs	r3, #10
 800b54e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b552:	4b21      	ldr	r3, [pc, #132]	; (800b5d8 <tcp_process+0x600>)
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	6362      	str	r2, [r4, #52]	; 0x34
 800b558:	601c      	str	r4, [r3, #0]
 800b55a:	f002 f8b1 	bl	800d6c0 <tcp_timer_needed>
  return ERR_OK;
 800b55e:	2500      	movs	r5, #0
 800b560:	e56a      	b.n	800b038 <tcp_process+0x60>
      tcp_receive(pcb);
 800b562:	4620      	mov	r0, r4
 800b564:	f7ff f83c 	bl	800a5e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b568:	4b17      	ldr	r3, [pc, #92]	; (800b5c8 <tcp_process+0x5f0>)
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	f013 0f10 	tst.w	r3, #16
 800b570:	d01c      	beq.n	800b5ac <tcp_process+0x5d4>
 800b572:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b574:	4b15      	ldr	r3, [pc, #84]	; (800b5cc <tcp_process+0x5f4>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d001      	beq.n	800b580 <tcp_process+0x5a8>
  return ERR_OK;
 800b57c:	2500      	movs	r5, #0
 800b57e:	e55b      	b.n	800b038 <tcp_process+0x60>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b580:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b584:	b10b      	cbz	r3, 800b58a <tcp_process+0x5b2>
  return ERR_OK;
 800b586:	2500      	movs	r5, #0
 800b588:	e556      	b.n	800b038 <tcp_process+0x60>
        recv_flags |= TF_CLOSED;
 800b58a:	4a0a      	ldr	r2, [pc, #40]	; (800b5b4 <tcp_process+0x5dc>)
 800b58c:	7813      	ldrb	r3, [r2, #0]
 800b58e:	f043 0310 	orr.w	r3, r3, #16
 800b592:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 800b594:	2500      	movs	r5, #0
 800b596:	e54f      	b.n	800b038 <tcp_process+0x60>
  switch (pcb->state) {
 800b598:	2500      	movs	r5, #0
 800b59a:	e54d      	b.n	800b038 <tcp_process+0x60>
  return ERR_OK;
 800b59c:	2500      	movs	r5, #0
 800b59e:	e54b      	b.n	800b038 <tcp_process+0x60>
 800b5a0:	2500      	movs	r5, #0
 800b5a2:	e549      	b.n	800b038 <tcp_process+0x60>
 800b5a4:	2500      	movs	r5, #0
 800b5a6:	e547      	b.n	800b038 <tcp_process+0x60>
 800b5a8:	2500      	movs	r5, #0
 800b5aa:	e545      	b.n	800b038 <tcp_process+0x60>
 800b5ac:	2500      	movs	r5, #0
 800b5ae:	e543      	b.n	800b038 <tcp_process+0x60>
 800b5b0:	20000aa0 	.word	0x20000aa0
 800b5b4:	20000aa8 	.word	0x20000aa8
 800b5b8:	08018cc0 	.word	0x08018cc0
 800b5bc:	08018f84 	.word	0x08018f84
 800b5c0:	08016bb4 	.word	0x08016bb4
 800b5c4:	20000aac 	.word	0x20000aac
 800b5c8:	20000a88 	.word	0x20000a88
 800b5cc:	20000a84 	.word	0x20000a84
 800b5d0:	20007fac 	.word	0x20007fac
 800b5d4:	20007fa8 	.word	0x20007fa8
 800b5d8:	20007fbc 	.word	0x20007fbc

0800b5dc <tcp_input>:
{
 800b5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5de:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b5e0:	4605      	mov	r5, r0
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	d05e      	beq.n	800b6a4 <tcp_input+0xc8>
  tcphdr = (struct tcp_hdr *)p->payload;
 800b5e6:	686a      	ldr	r2, [r5, #4]
 800b5e8:	4b7c      	ldr	r3, [pc, #496]	; (800b7dc <tcp_input+0x200>)
 800b5ea:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 800b5ec:	896b      	ldrh	r3, [r5, #10]
 800b5ee:	2b13      	cmp	r3, #19
 800b5f0:	d966      	bls.n	800b6c0 <tcp_input+0xe4>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b5f2:	4b7b      	ldr	r3, [pc, #492]	; (800b7e0 <tcp_input+0x204>)
 800b5f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b5f8:	2b06      	cmp	r3, #6
 800b5fa:	d15a      	bne.n	800b6b2 <tcp_input+0xd6>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b5fc:	4b78      	ldr	r3, [pc, #480]	; (800b7e0 <tcp_input+0x204>)
 800b5fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b602:	2b06      	cmp	r3, #6
 800b604:	d061      	beq.n	800b6ca <tcp_input+0xee>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b606:	4b76      	ldr	r3, [pc, #472]	; (800b7e0 <tcp_input+0x204>)
 800b608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b60a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b60e:	2be0      	cmp	r3, #224	; 0xe0
 800b610:	d056      	beq.n	800b6c0 <tcp_input+0xe4>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b612:	4b72      	ldr	r3, [pc, #456]	; (800b7dc <tcp_input+0x200>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	8998      	ldrh	r0, [r3, #12]
 800b618:	f7fb fa30 	bl	8006a7c <lwip_htons>
 800b61c:	f3c0 3107 	ubfx	r1, r0, #12, #8
 800b620:	0089      	lsls	r1, r1, #2
 800b622:	b2c9      	uxtb	r1, r1
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b624:	2913      	cmp	r1, #19
 800b626:	d94b      	bls.n	800b6c0 <tcp_input+0xe4>
 800b628:	b28b      	uxth	r3, r1
 800b62a:	892a      	ldrh	r2, [r5, #8]
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d847      	bhi.n	800b6c0 <tcp_input+0xe4>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b630:	f1a3 0214 	sub.w	r2, r3, #20
 800b634:	b292      	uxth	r2, r2
 800b636:	486b      	ldr	r0, [pc, #428]	; (800b7e4 <tcp_input+0x208>)
 800b638:	8002      	strh	r2, [r0, #0]
  tcphdr_opt2 = NULL;
 800b63a:	486b      	ldr	r0, [pc, #428]	; (800b7e8 <tcp_input+0x20c>)
 800b63c:	2400      	movs	r4, #0
 800b63e:	6004      	str	r4, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 800b640:	8968      	ldrh	r0, [r5, #10]
 800b642:	4283      	cmp	r3, r0
 800b644:	d947      	bls.n	800b6d6 <tcp_input+0xfa>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b646:	682b      	ldr	r3, [r5, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d07f      	beq.n	800b74c <tcp_input+0x170>
    pbuf_remove_header(p, TCP_HLEN);
 800b64c:	2114      	movs	r1, #20
 800b64e:	4628      	mov	r0, r5
 800b650:	f7fc fd08 	bl	8008064 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800b654:	896c      	ldrh	r4, [r5, #10]
 800b656:	4b65      	ldr	r3, [pc, #404]	; (800b7ec <tcp_input+0x210>)
 800b658:	801c      	strh	r4, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b65a:	4b62      	ldr	r3, [pc, #392]	; (800b7e4 <tcp_input+0x208>)
 800b65c:	881f      	ldrh	r7, [r3, #0]
 800b65e:	1b3e      	subs	r6, r7, r4
 800b660:	b2b6      	uxth	r6, r6
    pbuf_remove_header(p, tcphdr_opt1len);
 800b662:	4621      	mov	r1, r4
 800b664:	4628      	mov	r0, r5
 800b666:	f7fc fcfd 	bl	8008064 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800b66a:	6828      	ldr	r0, [r5, #0]
 800b66c:	8943      	ldrh	r3, [r0, #10]
 800b66e:	42b3      	cmp	r3, r6
 800b670:	d326      	bcc.n	800b6c0 <tcp_input+0xe4>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b672:	6842      	ldr	r2, [r0, #4]
 800b674:	4b5c      	ldr	r3, [pc, #368]	; (800b7e8 <tcp_input+0x20c>)
 800b676:	601a      	str	r2, [r3, #0]
    pbuf_remove_header(p->next, opt2len);
 800b678:	4631      	mov	r1, r6
 800b67a:	f7fc fcf3 	bl	8008064 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b67e:	892b      	ldrh	r3, [r5, #8]
 800b680:	1be4      	subs	r4, r4, r7
 800b682:	441c      	add	r4, r3
 800b684:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b686:	896b      	ldrh	r3, [r5, #10]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d166      	bne.n	800b75a <tcp_input+0x17e>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b68c:	892a      	ldrh	r2, [r5, #8]
 800b68e:	682b      	ldr	r3, [r5, #0]
 800b690:	891b      	ldrh	r3, [r3, #8]
 800b692:	429a      	cmp	r2, r3
 800b694:	d024      	beq.n	800b6e0 <tcp_input+0x104>
 800b696:	4b56      	ldr	r3, [pc, #344]	; (800b7f0 <tcp_input+0x214>)
 800b698:	22e0      	movs	r2, #224	; 0xe0
 800b69a:	4956      	ldr	r1, [pc, #344]	; (800b7f4 <tcp_input+0x218>)
 800b69c:	4856      	ldr	r0, [pc, #344]	; (800b7f8 <tcp_input+0x21c>)
 800b69e:	f00a f977 	bl	8015990 <iprintf>
 800b6a2:	e01d      	b.n	800b6e0 <tcp_input+0x104>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b6a4:	4b52      	ldr	r3, [pc, #328]	; (800b7f0 <tcp_input+0x214>)
 800b6a6:	2283      	movs	r2, #131	; 0x83
 800b6a8:	4954      	ldr	r1, [pc, #336]	; (800b7fc <tcp_input+0x220>)
 800b6aa:	4853      	ldr	r0, [pc, #332]	; (800b7f8 <tcp_input+0x21c>)
 800b6ac:	f00a f970 	bl	8015990 <iprintf>
 800b6b0:	e799      	b.n	800b5e6 <tcp_input+0xa>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b6b2:	4b4b      	ldr	r3, [pc, #300]	; (800b7e0 <tcp_input+0x204>)
 800b6b4:	6819      	ldr	r1, [r3, #0]
 800b6b6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b6b8:	f005 fc7c 	bl	8010fb4 <ip4_addr_isbroadcast_u32>
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	d09d      	beq.n	800b5fc <tcp_input+0x20>
  pbuf_free(p);
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	f7fc fd15 	bl	80080f0 <pbuf_free>
}
 800b6c6:	b005      	add	sp, #20
 800b6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b6ca:	4b45      	ldr	r3, [pc, #276]	; (800b7e0 <tcp_input+0x204>)
 800b6cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b6d0:	2bff      	cmp	r3, #255	; 0xff
 800b6d2:	d19e      	bne.n	800b612 <tcp_input+0x36>
 800b6d4:	e7f4      	b.n	800b6c0 <tcp_input+0xe4>
    tcphdr_opt1len = tcphdr_optlen;
 800b6d6:	4b45      	ldr	r3, [pc, #276]	; (800b7ec <tcp_input+0x210>)
 800b6d8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b6da:	4628      	mov	r0, r5
 800b6dc:	f7fc fcc2 	bl	8008064 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b6e0:	4c3e      	ldr	r4, [pc, #248]	; (800b7dc <tcp_input+0x200>)
 800b6e2:	6826      	ldr	r6, [r4, #0]
 800b6e4:	8830      	ldrh	r0, [r6, #0]
 800b6e6:	f7fb f9c9 	bl	8006a7c <lwip_htons>
 800b6ea:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b6ec:	6826      	ldr	r6, [r4, #0]
 800b6ee:	8870      	ldrh	r0, [r6, #2]
 800b6f0:	f7fb f9c4 	bl	8006a7c <lwip_htons>
 800b6f4:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b6f6:	6826      	ldr	r6, [r4, #0]
 800b6f8:	6870      	ldr	r0, [r6, #4]
 800b6fa:	f7fb f9c4 	bl	8006a86 <lwip_htonl>
 800b6fe:	6070      	str	r0, [r6, #4]
 800b700:	4b3f      	ldr	r3, [pc, #252]	; (800b800 <tcp_input+0x224>)
 800b702:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b704:	6826      	ldr	r6, [r4, #0]
 800b706:	68b0      	ldr	r0, [r6, #8]
 800b708:	f7fb f9bd 	bl	8006a86 <lwip_htonl>
 800b70c:	60b0      	str	r0, [r6, #8]
 800b70e:	4b3d      	ldr	r3, [pc, #244]	; (800b804 <tcp_input+0x228>)
 800b710:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b712:	6826      	ldr	r6, [r4, #0]
 800b714:	89f0      	ldrh	r0, [r6, #14]
 800b716:	f7fb f9b1 	bl	8006a7c <lwip_htons>
 800b71a:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 800b71c:	6823      	ldr	r3, [r4, #0]
 800b71e:	8998      	ldrh	r0, [r3, #12]
 800b720:	f7fb f9ac 	bl	8006a7c <lwip_htons>
 800b724:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800b728:	4b37      	ldr	r3, [pc, #220]	; (800b808 <tcp_input+0x22c>)
 800b72a:	7018      	strb	r0, [r3, #0]
  tcplen = p->tot_len;
 800b72c:	892b      	ldrh	r3, [r5, #8]
 800b72e:	4a37      	ldr	r2, [pc, #220]	; (800b80c <tcp_input+0x230>)
 800b730:	8013      	strh	r3, [r2, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b732:	f010 0f03 	tst.w	r0, #3
 800b736:	d005      	beq.n	800b744 <tcp_input+0x168>
    tcplen++;
 800b738:	1c5a      	adds	r2, r3, #1
 800b73a:	b292      	uxth	r2, r2
 800b73c:	4933      	ldr	r1, [pc, #204]	; (800b80c <tcp_input+0x230>)
 800b73e:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 800b740:	4293      	cmp	r3, r2
 800b742:	d8bd      	bhi.n	800b6c0 <tcp_input+0xe4>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b744:	4b32      	ldr	r3, [pc, #200]	; (800b810 <tcp_input+0x234>)
 800b746:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 800b748:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b74a:	e02b      	b.n	800b7a4 <tcp_input+0x1c8>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b74c:	4b28      	ldr	r3, [pc, #160]	; (800b7f0 <tcp_input+0x214>)
 800b74e:	22c2      	movs	r2, #194	; 0xc2
 800b750:	4930      	ldr	r1, [pc, #192]	; (800b814 <tcp_input+0x238>)
 800b752:	4829      	ldr	r0, [pc, #164]	; (800b7f8 <tcp_input+0x21c>)
 800b754:	f00a f91c 	bl	8015990 <iprintf>
 800b758:	e778      	b.n	800b64c <tcp_input+0x70>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b75a:	4b25      	ldr	r3, [pc, #148]	; (800b7f0 <tcp_input+0x214>)
 800b75c:	22df      	movs	r2, #223	; 0xdf
 800b75e:	492e      	ldr	r1, [pc, #184]	; (800b818 <tcp_input+0x23c>)
 800b760:	4825      	ldr	r0, [pc, #148]	; (800b7f8 <tcp_input+0x21c>)
 800b762:	f00a f915 	bl	8015990 <iprintf>
 800b766:	e791      	b.n	800b68c <tcp_input+0xb0>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b768:	4b21      	ldr	r3, [pc, #132]	; (800b7f0 <tcp_input+0x214>)
 800b76a:	22fb      	movs	r2, #251	; 0xfb
 800b76c:	492b      	ldr	r1, [pc, #172]	; (800b81c <tcp_input+0x240>)
 800b76e:	4822      	ldr	r0, [pc, #136]	; (800b7f8 <tcp_input+0x21c>)
 800b770:	f00a f90e 	bl	8015990 <iprintf>
 800b774:	e01c      	b.n	800b7b0 <tcp_input+0x1d4>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b776:	4b1e      	ldr	r3, [pc, #120]	; (800b7f0 <tcp_input+0x214>)
 800b778:	22fc      	movs	r2, #252	; 0xfc
 800b77a:	4929      	ldr	r1, [pc, #164]	; (800b820 <tcp_input+0x244>)
 800b77c:	481e      	ldr	r0, [pc, #120]	; (800b7f8 <tcp_input+0x21c>)
 800b77e:	f00a f907 	bl	8015990 <iprintf>
 800b782:	e019      	b.n	800b7b8 <tcp_input+0x1dc>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b784:	4b1a      	ldr	r3, [pc, #104]	; (800b7f0 <tcp_input+0x214>)
 800b786:	22fd      	movs	r2, #253	; 0xfd
 800b788:	4926      	ldr	r1, [pc, #152]	; (800b824 <tcp_input+0x248>)
 800b78a:	481b      	ldr	r0, [pc, #108]	; (800b7f8 <tcp_input+0x21c>)
 800b78c:	f00a f900 	bl	8015990 <iprintf>
 800b790:	e016      	b.n	800b7c0 <tcp_input+0x1e4>
    if (pcb->remote_port == tcphdr->src &&
 800b792:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800b796:	4b11      	ldr	r3, [pc, #68]	; (800b7dc <tcp_input+0x200>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	881a      	ldrh	r2, [r3, #0]
 800b79c:	4291      	cmp	r1, r2
 800b79e:	d043      	beq.n	800b828 <tcp_input+0x24c>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b7a0:	4626      	mov	r6, r4
 800b7a2:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800b7a4:	2c00      	cmp	r4, #0
 800b7a6:	d077      	beq.n	800b898 <tcp_input+0x2bc>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b7a8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d0db      	beq.n	800b768 <tcp_input+0x18c>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b7b0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b7b4:	2b0a      	cmp	r3, #10
 800b7b6:	d0de      	beq.n	800b776 <tcp_input+0x19a>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b7b8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d0e1      	beq.n	800b784 <tcp_input+0x1a8>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b7c0:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800b7c4:	2a00      	cmp	r2, #0
 800b7c6:	d0e4      	beq.n	800b792 <tcp_input+0x1b6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b7c8:	4b05      	ldr	r3, [pc, #20]	; (800b7e0 <tcp_input+0x204>)
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d0dc      	beq.n	800b792 <tcp_input+0x1b6>
 800b7d8:	e7e2      	b.n	800b7a0 <tcp_input+0x1c4>
 800b7da:	bf00      	nop
 800b7dc:	20000ab4 	.word	0x20000ab4
 800b7e0:	20003e34 	.word	0x20003e34
 800b7e4:	20000ac0 	.word	0x20000ac0
 800b7e8:	20000abc 	.word	0x20000abc
 800b7ec:	20000ab8 	.word	0x20000ab8
 800b7f0:	08018cc0 	.word	0x08018cc0
 800b7f4:	08018fd8 	.word	0x08018fd8
 800b7f8:	08016bb4 	.word	0x08016bb4
 800b7fc:	08018fa4 	.word	0x08018fa4
 800b800:	20000aac 	.word	0x20000aac
 800b804:	20000a84 	.word	0x20000a84
 800b808:	20000a88 	.word	0x20000a88
 800b80c:	20000ac2 	.word	0x20000ac2
 800b810:	20007fac 	.word	0x20007fac
 800b814:	08018fbc 	.word	0x08018fbc
 800b818:	08018fcc 	.word	0x08018fcc
 800b81c:	08018ff8 	.word	0x08018ff8
 800b820:	08019020 	.word	0x08019020
 800b824:	0801904c 	.word	0x0801904c
        pcb->local_port == tcphdr->dest &&
 800b828:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b82a:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d1b7      	bne.n	800b7a0 <tcp_input+0x1c4>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b830:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800b834:	4a9f      	ldr	r2, [pc, #636]	; (800bab4 <tcp_input+0x4d8>)
 800b836:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
        pcb->local_port == tcphdr->dest &&
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d1b0      	bne.n	800b7a0 <tcp_input+0x1c4>
 800b83e:	2b06      	cmp	r3, #6
 800b840:	f000 8086 	beq.w	800b950 <tcp_input+0x374>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b844:	69a3      	ldr	r3, [r4, #24]
 800b846:	4a9b      	ldr	r2, [pc, #620]	; (800bab4 <tcp_input+0x4d8>)
 800b848:	6952      	ldr	r2, [r2, #20]
        pcb->local_port == tcphdr->dest &&
 800b84a:	4293      	cmp	r3, r2
 800b84c:	bf14      	ite	ne
 800b84e:	2300      	movne	r3, #0
 800b850:	2301      	moveq	r3, #1
 800b852:	2b00      	cmp	r3, #0
 800b854:	d0a4      	beq.n	800b7a0 <tcp_input+0x1c4>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b856:	7d23      	ldrb	r3, [r4, #20]
 800b858:	4a96      	ldr	r2, [pc, #600]	; (800bab4 <tcp_input+0x4d8>)
 800b85a:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b85e:	4293      	cmp	r3, r2
 800b860:	d19e      	bne.n	800b7a0 <tcp_input+0x1c4>
 800b862:	2b06      	cmp	r3, #6
 800b864:	f000 809b 	beq.w	800b99e <tcp_input+0x3c2>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b868:	6823      	ldr	r3, [r4, #0]
 800b86a:	4a92      	ldr	r2, [pc, #584]	; (800bab4 <tcp_input+0x4d8>)
 800b86c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b86e:	4293      	cmp	r3, r2
 800b870:	bf14      	ite	ne
 800b872:	2300      	movne	r3, #0
 800b874:	2301      	moveq	r3, #1
 800b876:	2b00      	cmp	r3, #0
 800b878:	d092      	beq.n	800b7a0 <tcp_input+0x1c4>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b87a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b87c:	429c      	cmp	r4, r3
 800b87e:	f000 80b4 	beq.w	800b9ea <tcp_input+0x40e>
      if (prev != NULL) {
 800b882:	b12e      	cbz	r6, 800b890 <tcp_input+0x2b4>
        prev->next = pcb->next;
 800b884:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b886:	6373      	str	r3, [r6, #52]	; 0x34
        pcb->next = tcp_active_pcbs;
 800b888:	4b8b      	ldr	r3, [pc, #556]	; (800bab8 <tcp_input+0x4dc>)
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	6362      	str	r2, [r4, #52]	; 0x34
        tcp_active_pcbs = pcb;
 800b88e:	601c      	str	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b890:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b892:	429c      	cmp	r4, r3
 800b894:	f000 80b1 	beq.w	800b9fa <tcp_input+0x41e>
  if (pcb == NULL) {
 800b898:	2c00      	cmp	r4, #0
 800b89a:	f000 80b6 	beq.w	800ba0a <tcp_input+0x42e>
  if (pcb != NULL) {
 800b89e:	2c00      	cmp	r4, #0
 800b8a0:	f000 8293 	beq.w	800bdca <tcp_input+0x7ee>
    inseg.next = NULL;
 800b8a4:	4a85      	ldr	r2, [pc, #532]	; (800babc <tcp_input+0x4e0>)
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 800b8aa:	8929      	ldrh	r1, [r5, #8]
 800b8ac:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 800b8ae:	6055      	str	r5, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b8b0:	4983      	ldr	r1, [pc, #524]	; (800bac0 <tcp_input+0x4e4>)
 800b8b2:	6809      	ldr	r1, [r1, #0]
 800b8b4:	6111      	str	r1, [r2, #16]
    recv_data = NULL;
 800b8b6:	4a83      	ldr	r2, [pc, #524]	; (800bac4 <tcp_input+0x4e8>)
 800b8b8:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 800b8ba:	4a83      	ldr	r2, [pc, #524]	; (800bac8 <tcp_input+0x4ec>)
 800b8bc:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 800b8be:	4a83      	ldr	r2, [pc, #524]	; (800bacc <tcp_input+0x4f0>)
 800b8c0:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 800b8c2:	4b83      	ldr	r3, [pc, #524]	; (800bad0 <tcp_input+0x4f4>)
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	f013 0f08 	tst.w	r3, #8
 800b8ca:	d003      	beq.n	800b8d4 <tcp_input+0x2f8>
      p->flags |= PBUF_FLAG_PUSH;
 800b8cc:	7b6b      	ldrb	r3, [r5, #13]
 800b8ce:	f043 0301 	orr.w	r3, r3, #1
 800b8d2:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 800b8d4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800b8d8:	b173      	cbz	r3, 800b8f8 <tcp_input+0x31c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f7fe f8bc 	bl	8009a58 <tcp_process_refused_data>
 800b8e0:	f110 0f0d 	cmn.w	r0, #13
 800b8e4:	f000 81d9 	beq.w	800bc9a <tcp_input+0x6be>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b8e8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b8ec:	b123      	cbz	r3, 800b8f8 <tcp_input+0x31c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b8ee:	4b79      	ldr	r3, [pc, #484]	; (800bad4 <tcp_input+0x4f8>)
 800b8f0:	881b      	ldrh	r3, [r3, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f040 81d1 	bne.w	800bc9a <tcp_input+0x6be>
    tcp_input_pcb = pcb;
 800b8f8:	4b77      	ldr	r3, [pc, #476]	; (800bad8 <tcp_input+0x4fc>)
 800b8fa:	601c      	str	r4, [r3, #0]
    err = tcp_process(pcb);
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	f7ff fb6b 	bl	800afd8 <tcp_process>
    if (err != ERR_ABRT) {
 800b902:	f110 0f0d 	cmn.w	r0, #13
 800b906:	d013      	beq.n	800b930 <tcp_input+0x354>
      if (recv_flags & TF_RESET) {
 800b908:	4b6f      	ldr	r3, [pc, #444]	; (800bac8 <tcp_input+0x4ec>)
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	f013 0f08 	tst.w	r3, #8
 800b910:	f000 81cc 	beq.w	800bcac <tcp_input+0x6d0>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b914:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800b918:	b11b      	cbz	r3, 800b922 <tcp_input+0x346>
 800b91a:	f06f 010d 	mvn.w	r1, #13
 800b91e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b920:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b922:	4621      	mov	r1, r4
 800b924:	4864      	ldr	r0, [pc, #400]	; (800bab8 <tcp_input+0x4dc>)
 800b926:	f7fd fcb1 	bl	800928c <tcp_pcb_remove>
        tcp_free(pcb);
 800b92a:	4620      	mov	r0, r4
 800b92c:	f7fd f876 	bl	8008a1c <tcp_free>
    tcp_input_pcb = NULL;
 800b930:	2300      	movs	r3, #0
 800b932:	4a69      	ldr	r2, [pc, #420]	; (800bad8 <tcp_input+0x4fc>)
 800b934:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 800b936:	4a63      	ldr	r2, [pc, #396]	; (800bac4 <tcp_input+0x4e8>)
 800b938:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL) {
 800b93a:	4b60      	ldr	r3, [pc, #384]	; (800babc <tcp_input+0x4e0>)
 800b93c:	6858      	ldr	r0, [r3, #4]
 800b93e:	2800      	cmp	r0, #0
 800b940:	f43f aec1 	beq.w	800b6c6 <tcp_input+0xea>
      pbuf_free(inseg.p);
 800b944:	f7fc fbd4 	bl	80080f0 <pbuf_free>
      inseg.p = NULL;
 800b948:	4b5c      	ldr	r3, [pc, #368]	; (800babc <tcp_input+0x4e0>)
 800b94a:	2200      	movs	r2, #0
 800b94c:	605a      	str	r2, [r3, #4]
 800b94e:	e6ba      	b.n	800b6c6 <tcp_input+0xea>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b950:	69a2      	ldr	r2, [r4, #24]
 800b952:	4b58      	ldr	r3, [pc, #352]	; (800bab4 <tcp_input+0x4d8>)
 800b954:	695b      	ldr	r3, [r3, #20]
 800b956:	429a      	cmp	r2, r3
 800b958:	d001      	beq.n	800b95e <tcp_input+0x382>
 800b95a:	2300      	movs	r3, #0
 800b95c:	e779      	b.n	800b852 <tcp_input+0x276>
 800b95e:	69e2      	ldr	r2, [r4, #28]
 800b960:	4b54      	ldr	r3, [pc, #336]	; (800bab4 <tcp_input+0x4d8>)
 800b962:	699b      	ldr	r3, [r3, #24]
 800b964:	429a      	cmp	r2, r3
 800b966:	d001      	beq.n	800b96c <tcp_input+0x390>
 800b968:	2300      	movs	r3, #0
 800b96a:	e772      	b.n	800b852 <tcp_input+0x276>
 800b96c:	6a22      	ldr	r2, [r4, #32]
 800b96e:	4b51      	ldr	r3, [pc, #324]	; (800bab4 <tcp_input+0x4d8>)
 800b970:	69db      	ldr	r3, [r3, #28]
 800b972:	429a      	cmp	r2, r3
 800b974:	d001      	beq.n	800b97a <tcp_input+0x39e>
 800b976:	2300      	movs	r3, #0
 800b978:	e76b      	b.n	800b852 <tcp_input+0x276>
 800b97a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b97c:	4b4d      	ldr	r3, [pc, #308]	; (800bab4 <tcp_input+0x4d8>)
 800b97e:	6a1b      	ldr	r3, [r3, #32]
 800b980:	429a      	cmp	r2, r3
 800b982:	d001      	beq.n	800b988 <tcp_input+0x3ac>
 800b984:	2300      	movs	r3, #0
 800b986:	e764      	b.n	800b852 <tcp_input+0x276>
 800b988:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800b98c:	4b49      	ldr	r3, [pc, #292]	; (800bab4 <tcp_input+0x4d8>)
 800b98e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b992:	429a      	cmp	r2, r3
 800b994:	d001      	beq.n	800b99a <tcp_input+0x3be>
 800b996:	2300      	movs	r3, #0
 800b998:	e75b      	b.n	800b852 <tcp_input+0x276>
 800b99a:	2301      	movs	r3, #1
 800b99c:	e759      	b.n	800b852 <tcp_input+0x276>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b99e:	6822      	ldr	r2, [r4, #0]
 800b9a0:	4b44      	ldr	r3, [pc, #272]	; (800bab4 <tcp_input+0x4d8>)
 800b9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d001      	beq.n	800b9ac <tcp_input+0x3d0>
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	e764      	b.n	800b876 <tcp_input+0x29a>
 800b9ac:	6862      	ldr	r2, [r4, #4]
 800b9ae:	4b41      	ldr	r3, [pc, #260]	; (800bab4 <tcp_input+0x4d8>)
 800b9b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d001      	beq.n	800b9ba <tcp_input+0x3de>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	e75d      	b.n	800b876 <tcp_input+0x29a>
 800b9ba:	68a2      	ldr	r2, [r4, #8]
 800b9bc:	4b3d      	ldr	r3, [pc, #244]	; (800bab4 <tcp_input+0x4d8>)
 800b9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d001      	beq.n	800b9c8 <tcp_input+0x3ec>
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	e756      	b.n	800b876 <tcp_input+0x29a>
 800b9c8:	68e2      	ldr	r2, [r4, #12]
 800b9ca:	4b3a      	ldr	r3, [pc, #232]	; (800bab4 <tcp_input+0x4d8>)
 800b9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d001      	beq.n	800b9d6 <tcp_input+0x3fa>
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	e74f      	b.n	800b876 <tcp_input+0x29a>
 800b9d6:	7c22      	ldrb	r2, [r4, #16]
 800b9d8:	4b36      	ldr	r3, [pc, #216]	; (800bab4 <tcp_input+0x4d8>)
 800b9da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d001      	beq.n	800b9e6 <tcp_input+0x40a>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	e747      	b.n	800b876 <tcp_input+0x29a>
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e745      	b.n	800b876 <tcp_input+0x29a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b9ea:	4b3c      	ldr	r3, [pc, #240]	; (800badc <tcp_input+0x500>)
 800b9ec:	f240 120d 	movw	r2, #269	; 0x10d
 800b9f0:	493b      	ldr	r1, [pc, #236]	; (800bae0 <tcp_input+0x504>)
 800b9f2:	483c      	ldr	r0, [pc, #240]	; (800bae4 <tcp_input+0x508>)
 800b9f4:	f009 ffcc 	bl	8015990 <iprintf>
 800b9f8:	e743      	b.n	800b882 <tcp_input+0x2a6>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b9fa:	4b38      	ldr	r3, [pc, #224]	; (800badc <tcp_input+0x500>)
 800b9fc:	f240 1215 	movw	r2, #277	; 0x115
 800ba00:	4939      	ldr	r1, [pc, #228]	; (800bae8 <tcp_input+0x50c>)
 800ba02:	4838      	ldr	r0, [pc, #224]	; (800bae4 <tcp_input+0x508>)
 800ba04:	f009 ffc4 	bl	8015990 <iprintf>
 800ba08:	e746      	b.n	800b898 <tcp_input+0x2bc>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba0a:	4b38      	ldr	r3, [pc, #224]	; (800baec <tcp_input+0x510>)
 800ba0c:	681c      	ldr	r4, [r3, #0]
 800ba0e:	e00f      	b.n	800ba30 <tcp_input+0x454>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ba10:	4b32      	ldr	r3, [pc, #200]	; (800badc <tcp_input+0x500>)
 800ba12:	f240 121f 	movw	r2, #287	; 0x11f
 800ba16:	4936      	ldr	r1, [pc, #216]	; (800baf0 <tcp_input+0x514>)
 800ba18:	4832      	ldr	r0, [pc, #200]	; (800bae4 <tcp_input+0x508>)
 800ba1a:	f009 ffb9 	bl	8015990 <iprintf>
 800ba1e:	e00e      	b.n	800ba3e <tcp_input+0x462>
      if (pcb->remote_port == tcphdr->src &&
 800ba20:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800ba24:	4b26      	ldr	r3, [pc, #152]	; (800bac0 <tcp_input+0x4e4>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	881a      	ldrh	r2, [r3, #0]
 800ba2a:	4291      	cmp	r1, r2
 800ba2c:	d014      	beq.n	800ba58 <tcp_input+0x47c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba2e:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800ba30:	2c00      	cmp	r4, #0
 800ba32:	f000 80ac 	beq.w	800bb8e <tcp_input+0x5b2>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ba36:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800ba3a:	2b0a      	cmp	r3, #10
 800ba3c:	d1e8      	bne.n	800ba10 <tcp_input+0x434>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ba3e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800ba42:	2a00      	cmp	r2, #0
 800ba44:	d0ec      	beq.n	800ba20 <tcp_input+0x444>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ba46:	4b1b      	ldr	r3, [pc, #108]	; (800bab4 <tcp_input+0x4d8>)
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 800ba4e:	3301      	adds	r3, #1
 800ba50:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d0e4      	beq.n	800ba20 <tcp_input+0x444>
 800ba56:	e7ea      	b.n	800ba2e <tcp_input+0x452>
          pcb->local_port == tcphdr->dest &&
 800ba58:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800ba5a:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d1e6      	bne.n	800ba2e <tcp_input+0x452>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ba60:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800ba64:	4a13      	ldr	r2, [pc, #76]	; (800bab4 <tcp_input+0x4d8>)
 800ba66:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
          pcb->local_port == tcphdr->dest &&
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d1df      	bne.n	800ba2e <tcp_input+0x452>
 800ba6e:	2b06      	cmp	r3, #6
 800ba70:	d040      	beq.n	800baf4 <tcp_input+0x518>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ba72:	69a3      	ldr	r3, [r4, #24]
 800ba74:	4a0f      	ldr	r2, [pc, #60]	; (800bab4 <tcp_input+0x4d8>)
 800ba76:	6952      	ldr	r2, [r2, #20]
          pcb->local_port == tcphdr->dest &&
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	bf14      	ite	ne
 800ba7c:	2300      	movne	r3, #0
 800ba7e:	2301      	moveq	r3, #1
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d0d4      	beq.n	800ba2e <tcp_input+0x452>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ba84:	7d23      	ldrb	r3, [r4, #20]
 800ba86:	4a0b      	ldr	r2, [pc, #44]	; (800bab4 <tcp_input+0x4d8>)
 800ba88:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d1ce      	bne.n	800ba2e <tcp_input+0x452>
 800ba90:	2b06      	cmp	r3, #6
 800ba92:	d056      	beq.n	800bb42 <tcp_input+0x566>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ba94:	6823      	ldr	r3, [r4, #0]
 800ba96:	4a07      	ldr	r2, [pc, #28]	; (800bab4 <tcp_input+0x4d8>)
 800ba98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	bf14      	ite	ne
 800ba9e:	2300      	movne	r3, #0
 800baa0:	2301      	moveq	r3, #1
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d0c3      	beq.n	800ba2e <tcp_input+0x452>
          tcp_timewait_input(pcb);
 800baa6:	4620      	mov	r0, r4
 800baa8:	f7fe fb8e 	bl	800a1c8 <tcp_timewait_input>
        pbuf_free(p);
 800baac:	4628      	mov	r0, r5
 800baae:	f7fc fb1f 	bl	80080f0 <pbuf_free>
        return;
 800bab2:	e608      	b.n	800b6c6 <tcp_input+0xea>
 800bab4:	20003e34 	.word	0x20003e34
 800bab8:	20007fac 	.word	0x20007fac
 800babc:	20000a8c 	.word	0x20000a8c
 800bac0:	20000ab4 	.word	0x20000ab4
 800bac4:	20000aa4 	.word	0x20000aa4
 800bac8:	20000aa8 	.word	0x20000aa8
 800bacc:	20000aa0 	.word	0x20000aa0
 800bad0:	20000a88 	.word	0x20000a88
 800bad4:	20000ac2 	.word	0x20000ac2
 800bad8:	20007fc0 	.word	0x20007fc0
 800badc:	08018cc0 	.word	0x08018cc0
 800bae0:	08019074 	.word	0x08019074
 800bae4:	08016bb4 	.word	0x08016bb4
 800bae8:	080190a0 	.word	0x080190a0
 800baec:	20007fbc 	.word	0x20007fbc
 800baf0:	080190cc 	.word	0x080190cc
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800baf4:	69a2      	ldr	r2, [r4, #24]
 800baf6:	4b98      	ldr	r3, [pc, #608]	; (800bd58 <tcp_input+0x77c>)
 800baf8:	695b      	ldr	r3, [r3, #20]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d001      	beq.n	800bb02 <tcp_input+0x526>
 800bafe:	2300      	movs	r3, #0
 800bb00:	e7be      	b.n	800ba80 <tcp_input+0x4a4>
 800bb02:	69e2      	ldr	r2, [r4, #28]
 800bb04:	4b94      	ldr	r3, [pc, #592]	; (800bd58 <tcp_input+0x77c>)
 800bb06:	699b      	ldr	r3, [r3, #24]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d001      	beq.n	800bb10 <tcp_input+0x534>
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	e7b7      	b.n	800ba80 <tcp_input+0x4a4>
 800bb10:	6a22      	ldr	r2, [r4, #32]
 800bb12:	4b91      	ldr	r3, [pc, #580]	; (800bd58 <tcp_input+0x77c>)
 800bb14:	69db      	ldr	r3, [r3, #28]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d001      	beq.n	800bb1e <tcp_input+0x542>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	e7b0      	b.n	800ba80 <tcp_input+0x4a4>
 800bb1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bb20:	4b8d      	ldr	r3, [pc, #564]	; (800bd58 <tcp_input+0x77c>)
 800bb22:	6a1b      	ldr	r3, [r3, #32]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d001      	beq.n	800bb2c <tcp_input+0x550>
 800bb28:	2300      	movs	r3, #0
 800bb2a:	e7a9      	b.n	800ba80 <tcp_input+0x4a4>
 800bb2c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800bb30:	4b89      	ldr	r3, [pc, #548]	; (800bd58 <tcp_input+0x77c>)
 800bb32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d001      	beq.n	800bb3e <tcp_input+0x562>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	e7a0      	b.n	800ba80 <tcp_input+0x4a4>
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e79e      	b.n	800ba80 <tcp_input+0x4a4>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bb42:	6822      	ldr	r2, [r4, #0]
 800bb44:	4b84      	ldr	r3, [pc, #528]	; (800bd58 <tcp_input+0x77c>)
 800bb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d001      	beq.n	800bb50 <tcp_input+0x574>
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	e7a8      	b.n	800baa2 <tcp_input+0x4c6>
 800bb50:	6862      	ldr	r2, [r4, #4]
 800bb52:	4b81      	ldr	r3, [pc, #516]	; (800bd58 <tcp_input+0x77c>)
 800bb54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d001      	beq.n	800bb5e <tcp_input+0x582>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	e7a1      	b.n	800baa2 <tcp_input+0x4c6>
 800bb5e:	68a2      	ldr	r2, [r4, #8]
 800bb60:	4b7d      	ldr	r3, [pc, #500]	; (800bd58 <tcp_input+0x77c>)
 800bb62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d001      	beq.n	800bb6c <tcp_input+0x590>
 800bb68:	2300      	movs	r3, #0
 800bb6a:	e79a      	b.n	800baa2 <tcp_input+0x4c6>
 800bb6c:	68e2      	ldr	r2, [r4, #12]
 800bb6e:	4b7a      	ldr	r3, [pc, #488]	; (800bd58 <tcp_input+0x77c>)
 800bb70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d001      	beq.n	800bb7a <tcp_input+0x59e>
 800bb76:	2300      	movs	r3, #0
 800bb78:	e793      	b.n	800baa2 <tcp_input+0x4c6>
 800bb7a:	7c22      	ldrb	r2, [r4, #16]
 800bb7c:	4b76      	ldr	r3, [pc, #472]	; (800bd58 <tcp_input+0x77c>)
 800bb7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d001      	beq.n	800bb8a <tcp_input+0x5ae>
 800bb86:	2300      	movs	r3, #0
 800bb88:	e78b      	b.n	800baa2 <tcp_input+0x4c6>
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e789      	b.n	800baa2 <tcp_input+0x4c6>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bb8e:	4b73      	ldr	r3, [pc, #460]	; (800bd5c <tcp_input+0x780>)
 800bb90:	681e      	ldr	r6, [r3, #0]
 800bb92:	4630      	mov	r0, r6
    prev = NULL;
 800bb94:	4621      	mov	r1, r4
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bb96:	e007      	b.n	800bba8 <tcp_input+0x5cc>
      if (lpcb->local_port == tcphdr->dest) {
 800bb98:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 800bb9a:	4b71      	ldr	r3, [pc, #452]	; (800bd60 <tcp_input+0x784>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	885b      	ldrh	r3, [r3, #2]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d00f      	beq.n	800bbc4 <tcp_input+0x5e8>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bba4:	4601      	mov	r1, r0
 800bba6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800bba8:	b348      	cbz	r0, 800bbfe <tcp_input+0x622>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bbaa:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 800bbae:	2a00      	cmp	r2, #0
 800bbb0:	d0f2      	beq.n	800bb98 <tcp_input+0x5bc>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bbb2:	4b69      	ldr	r3, [pc, #420]	; (800bd58 <tcp_input+0x77c>)
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 800bbba:	3301      	adds	r3, #1
 800bbbc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d0ea      	beq.n	800bb98 <tcp_input+0x5bc>
 800bbc2:	e7ef      	b.n	800bba4 <tcp_input+0x5c8>
        if (IP_IS_ANY_TYPE_VAL(lpcb->local_ip)) {
 800bbc4:	7d03      	ldrb	r3, [r0, #20]
 800bbc6:	2b2e      	cmp	r3, #46	; 0x2e
 800bbc8:	d019      	beq.n	800bbfe <tcp_input+0x622>
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
 800bbca:	4a63      	ldr	r2, [pc, #396]	; (800bd58 <tcp_input+0x77c>)
 800bbcc:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d1e7      	bne.n	800bba4 <tcp_input+0x5c8>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bbd4:	2b06      	cmp	r3, #6
 800bbd6:	d021      	beq.n	800bc1c <tcp_input+0x640>
 800bbd8:	6802      	ldr	r2, [r0, #0]
 800bbda:	4f5f      	ldr	r7, [pc, #380]	; (800bd58 <tcp_input+0x77c>)
 800bbdc:	6aff      	ldr	r7, [r7, #44]	; 0x2c
 800bbde:	42ba      	cmp	r2, r7
 800bbe0:	bf14      	ite	ne
 800bbe2:	2200      	movne	r2, #0
 800bbe4:	2201      	moveq	r2, #1
 800bbe6:	b952      	cbnz	r2, 800bbfe <tcp_input+0x622>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bbe8:	b148      	cbz	r0, 800bbfe <tcp_input+0x622>
 800bbea:	2b06      	cmp	r3, #6
 800bbec:	d03c      	beq.n	800bc68 <tcp_input+0x68c>
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	d04f      	beq.n	800bc92 <tcp_input+0x6b6>
 800bbf2:	6803      	ldr	r3, [r0, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d14e      	bne.n	800bc96 <tcp_input+0x6ba>
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d0d2      	beq.n	800bba4 <tcp_input+0x5c8>
    if (lpcb != NULL) {
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	f43f ae4d 	beq.w	800b89e <tcp_input+0x2c2>
      if (prev != NULL) {
 800bc04:	b121      	cbz	r1, 800bc10 <tcp_input+0x634>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bc06:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bc08:	634b      	str	r3, [r1, #52]	; 0x34
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bc0a:	6346      	str	r6, [r0, #52]	; 0x34
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bc0c:	4b53      	ldr	r3, [pc, #332]	; (800bd5c <tcp_input+0x780>)
 800bc0e:	6018      	str	r0, [r3, #0]
        tcp_listen_input(lpcb);
 800bc10:	f7fe fb3a 	bl	800a288 <tcp_listen_input>
      pbuf_free(p);
 800bc14:	4628      	mov	r0, r5
 800bc16:	f7fc fa6b 	bl	80080f0 <pbuf_free>
      return;
 800bc1a:	e554      	b.n	800b6c6 <tcp_input+0xea>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bc1c:	6807      	ldr	r7, [r0, #0]
 800bc1e:	4a4e      	ldr	r2, [pc, #312]	; (800bd58 <tcp_input+0x77c>)
 800bc20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bc22:	4297      	cmp	r7, r2
 800bc24:	d001      	beq.n	800bc2a <tcp_input+0x64e>
 800bc26:	2200      	movs	r2, #0
 800bc28:	e7dd      	b.n	800bbe6 <tcp_input+0x60a>
 800bc2a:	6847      	ldr	r7, [r0, #4]
 800bc2c:	4a4a      	ldr	r2, [pc, #296]	; (800bd58 <tcp_input+0x77c>)
 800bc2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bc30:	4297      	cmp	r7, r2
 800bc32:	d001      	beq.n	800bc38 <tcp_input+0x65c>
 800bc34:	2200      	movs	r2, #0
 800bc36:	e7d6      	b.n	800bbe6 <tcp_input+0x60a>
 800bc38:	6887      	ldr	r7, [r0, #8]
 800bc3a:	4a47      	ldr	r2, [pc, #284]	; (800bd58 <tcp_input+0x77c>)
 800bc3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bc3e:	4297      	cmp	r7, r2
 800bc40:	d001      	beq.n	800bc46 <tcp_input+0x66a>
 800bc42:	2200      	movs	r2, #0
 800bc44:	e7cf      	b.n	800bbe6 <tcp_input+0x60a>
 800bc46:	68c7      	ldr	r7, [r0, #12]
 800bc48:	4a43      	ldr	r2, [pc, #268]	; (800bd58 <tcp_input+0x77c>)
 800bc4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bc4c:	4297      	cmp	r7, r2
 800bc4e:	d001      	beq.n	800bc54 <tcp_input+0x678>
 800bc50:	2200      	movs	r2, #0
 800bc52:	e7c8      	b.n	800bbe6 <tcp_input+0x60a>
 800bc54:	7c07      	ldrb	r7, [r0, #16]
 800bc56:	4a40      	ldr	r2, [pc, #256]	; (800bd58 <tcp_input+0x77c>)
 800bc58:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 800bc5c:	4297      	cmp	r7, r2
 800bc5e:	d001      	beq.n	800bc64 <tcp_input+0x688>
 800bc60:	2200      	movs	r2, #0
 800bc62:	e7c0      	b.n	800bbe6 <tcp_input+0x60a>
 800bc64:	2201      	movs	r2, #1
 800bc66:	e7be      	b.n	800bbe6 <tcp_input+0x60a>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bc68:	b148      	cbz	r0, 800bc7e <tcp_input+0x6a2>
 800bc6a:	6803      	ldr	r3, [r0, #0]
 800bc6c:	b94b      	cbnz	r3, 800bc82 <tcp_input+0x6a6>
 800bc6e:	6843      	ldr	r3, [r0, #4]
 800bc70:	b94b      	cbnz	r3, 800bc86 <tcp_input+0x6aa>
 800bc72:	6883      	ldr	r3, [r0, #8]
 800bc74:	b94b      	cbnz	r3, 800bc8a <tcp_input+0x6ae>
 800bc76:	68c3      	ldr	r3, [r0, #12]
 800bc78:	b14b      	cbz	r3, 800bc8e <tcp_input+0x6b2>
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	e7bd      	b.n	800bbfa <tcp_input+0x61e>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e7bb      	b.n	800bbfa <tcp_input+0x61e>
 800bc82:	2300      	movs	r3, #0
 800bc84:	e7b9      	b.n	800bbfa <tcp_input+0x61e>
 800bc86:	2300      	movs	r3, #0
 800bc88:	e7b7      	b.n	800bbfa <tcp_input+0x61e>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	e7b5      	b.n	800bbfa <tcp_input+0x61e>
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e7b3      	b.n	800bbfa <tcp_input+0x61e>
 800bc92:	2301      	movs	r3, #1
 800bc94:	e7b1      	b.n	800bbfa <tcp_input+0x61e>
 800bc96:	2300      	movs	r3, #0
 800bc98:	e7af      	b.n	800bbfa <tcp_input+0x61e>
        if (pcb->rcv_ann_wnd == 0) {
 800bc9a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	f47f ae46 	bne.w	800b930 <tcp_input+0x354>
          tcp_send_empty_ack(pcb);
 800bca4:	4620      	mov	r0, r4
 800bca6:	f001 f9c7 	bl	800d038 <tcp_send_empty_ack>
        goto aborted;
 800bcaa:	e641      	b.n	800b930 <tcp_input+0x354>
        if (recv_acked > 0) {
 800bcac:	4b2d      	ldr	r3, [pc, #180]	; (800bd64 <tcp_input+0x788>)
 800bcae:	881a      	ldrh	r2, [r3, #0]
 800bcb0:	b162      	cbz	r2, 800bccc <tcp_input+0x6f0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bcb2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800bcb6:	b133      	cbz	r3, 800bcc6 <tcp_input+0x6ea>
 800bcb8:	4621      	mov	r1, r4
 800bcba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800bcbc:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800bcbe:	f110 0f0d 	cmn.w	r0, #13
 800bcc2:	f43f ae35 	beq.w	800b930 <tcp_input+0x354>
          recv_acked = 0;
 800bcc6:	4b27      	ldr	r3, [pc, #156]	; (800bd64 <tcp_input+0x788>)
 800bcc8:	2200      	movs	r2, #0
 800bcca:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800bccc:	4620      	mov	r0, r4
 800bcce:	f7fe fa49 	bl	800a164 <tcp_input_delayed_close>
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	f47f ae2c 	bne.w	800b930 <tcp_input+0x354>
        if (recv_data != NULL) {
 800bcd8:	4b23      	ldr	r3, [pc, #140]	; (800bd68 <tcp_input+0x78c>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	b30b      	cbz	r3, 800bd22 <tcp_input+0x746>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800bcde:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800bce2:	b133      	cbz	r3, 800bcf2 <tcp_input+0x716>
 800bce4:	4b21      	ldr	r3, [pc, #132]	; (800bd6c <tcp_input+0x790>)
 800bce6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bcea:	4921      	ldr	r1, [pc, #132]	; (800bd70 <tcp_input+0x794>)
 800bcec:	4821      	ldr	r0, [pc, #132]	; (800bd74 <tcp_input+0x798>)
 800bcee:	f009 fe4f 	bl	8015990 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800bcf2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800bcf6:	f013 0f10 	tst.w	r3, #16
 800bcfa:	d141      	bne.n	800bd80 <tcp_input+0x7a4>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bcfc:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 800bd00:	2d00      	cmp	r5, #0
 800bd02:	d045      	beq.n	800bd90 <tcp_input+0x7b4>
 800bd04:	2300      	movs	r3, #0
 800bd06:	4a18      	ldr	r2, [pc, #96]	; (800bd68 <tcp_input+0x78c>)
 800bd08:	6812      	ldr	r2, [r2, #0]
 800bd0a:	4621      	mov	r1, r4
 800bd0c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800bd0e:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 800bd10:	f110 0f0d 	cmn.w	r0, #13
 800bd14:	f43f ae0c 	beq.w	800b930 <tcp_input+0x354>
          if (err != ERR_OK) {
 800bd18:	b118      	cbz	r0, 800bd22 <tcp_input+0x746>
            pcb->refused_data = recv_data;
 800bd1a:	4b13      	ldr	r3, [pc, #76]	; (800bd68 <tcp_input+0x78c>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        if (recv_flags & TF_GOT_FIN) {
 800bd22:	4b15      	ldr	r3, [pc, #84]	; (800bd78 <tcp_input+0x79c>)
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	f013 0f20 	tst.w	r3, #32
 800bd2a:	d007      	beq.n	800bd3c <tcp_input+0x760>
          if (pcb->refused_data != NULL) {
 800bd2c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d035      	beq.n	800bda0 <tcp_input+0x7c4>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800bd34:	7b5a      	ldrb	r2, [r3, #13]
 800bd36:	f042 0220 	orr.w	r2, r2, #32
 800bd3a:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800bd3c:	4b0f      	ldr	r3, [pc, #60]	; (800bd7c <tcp_input+0x7a0>)
 800bd3e:	2200      	movs	r2, #0
 800bd40:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800bd42:	4620      	mov	r0, r4
 800bd44:	f7fe fa0e 	bl	800a164 <tcp_input_delayed_close>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	f47f adf1 	bne.w	800b930 <tcp_input+0x354>
        tcp_output(pcb);
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f001 f9b4 	bl	800d0bc <tcp_output>
 800bd54:	e5ec      	b.n	800b930 <tcp_input+0x354>
 800bd56:	bf00      	nop
 800bd58:	20003e34 	.word	0x20003e34
 800bd5c:	20007fb4 	.word	0x20007fb4
 800bd60:	20000ab4 	.word	0x20000ab4
 800bd64:	20000aa0 	.word	0x20000aa0
 800bd68:	20000aa4 	.word	0x20000aa4
 800bd6c:	08018cc0 	.word	0x08018cc0
 800bd70:	080190fc 	.word	0x080190fc
 800bd74:	08016bb4 	.word	0x08016bb4
 800bd78:	20000aa8 	.word	0x20000aa8
 800bd7c:	20007fc0 	.word	0x20007fc0
            pbuf_free(recv_data);
 800bd80:	4b22      	ldr	r3, [pc, #136]	; (800be0c <tcp_input+0x830>)
 800bd82:	6818      	ldr	r0, [r3, #0]
 800bd84:	f7fc f9b4 	bl	80080f0 <pbuf_free>
            tcp_abort(pcb);
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f7fd fb7d 	bl	8009488 <tcp_abort>
            goto aborted;
 800bd8e:	e5cf      	b.n	800b930 <tcp_input+0x354>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bd90:	2300      	movs	r3, #0
 800bd92:	4a1e      	ldr	r2, [pc, #120]	; (800be0c <tcp_input+0x830>)
 800bd94:	6812      	ldr	r2, [r2, #0]
 800bd96:	4621      	mov	r1, r4
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7fd fe39 	bl	8009a10 <tcp_recv_null>
 800bd9e:	e7b7      	b.n	800bd10 <tcp_input+0x734>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bda0:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800bda4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bda8:	d002      	beq.n	800bdb0 <tcp_input+0x7d4>
              pcb->rcv_wnd++;
 800bdaa:	3301      	adds	r3, #1
 800bdac:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
            TCP_EVENT_CLOSED(pcb, err);
 800bdb0:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 800bdb4:	2d00      	cmp	r5, #0
 800bdb6:	d0c1      	beq.n	800bd3c <tcp_input+0x760>
 800bdb8:	2300      	movs	r3, #0
 800bdba:	461a      	mov	r2, r3
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800bdc0:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 800bdc2:	f110 0f0d 	cmn.w	r0, #13
 800bdc6:	d1b9      	bne.n	800bd3c <tcp_input+0x760>
 800bdc8:	e5b2      	b.n	800b930 <tcp_input+0x354>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800bdca:	4b11      	ldr	r3, [pc, #68]	; (800be10 <tcp_input+0x834>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	8998      	ldrh	r0, [r3, #12]
 800bdd0:	f7fa fe54 	bl	8006a7c <lwip_htons>
 800bdd4:	f010 0f04 	tst.w	r0, #4
 800bdd8:	d003      	beq.n	800bde2 <tcp_input+0x806>
    pbuf_free(p);
 800bdda:	4628      	mov	r0, r5
 800bddc:	f7fc f988 	bl	80080f0 <pbuf_free>
 800bde0:	e471      	b.n	800b6c6 <tcp_input+0xea>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bde2:	4b0b      	ldr	r3, [pc, #44]	; (800be10 <tcp_input+0x834>)
 800bde4:	6819      	ldr	r1, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bde6:	4b0b      	ldr	r3, [pc, #44]	; (800be14 <tcp_input+0x838>)
 800bde8:	4a0b      	ldr	r2, [pc, #44]	; (800be18 <tcp_input+0x83c>)
 800bdea:	8810      	ldrh	r0, [r2, #0]
 800bdec:	4a0b      	ldr	r2, [pc, #44]	; (800be1c <tcp_input+0x840>)
 800bdee:	6812      	ldr	r2, [r2, #0]
 800bdf0:	880c      	ldrh	r4, [r1, #0]
 800bdf2:	9402      	str	r4, [sp, #8]
 800bdf4:	8849      	ldrh	r1, [r1, #2]
 800bdf6:	9101      	str	r1, [sp, #4]
 800bdf8:	f1a3 0118 	sub.w	r1, r3, #24
 800bdfc:	9100      	str	r1, [sp, #0]
 800bdfe:	4402      	add	r2, r0
 800be00:	4907      	ldr	r1, [pc, #28]	; (800be20 <tcp_input+0x844>)
 800be02:	6809      	ldr	r1, [r1, #0]
 800be04:	2000      	movs	r0, #0
 800be06:	f001 f8cf 	bl	800cfa8 <tcp_rst>
 800be0a:	e7e6      	b.n	800bdda <tcp_input+0x7fe>
 800be0c:	20000aa4 	.word	0x20000aa4
 800be10:	20000ab4 	.word	0x20000ab4
 800be14:	20003e60 	.word	0x20003e60
 800be18:	20000ac2 	.word	0x20000ac2
 800be1c:	20000aac 	.word	0x20000aac
 800be20:	20000a84 	.word	0x20000a84

0800be24 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800be24:	4a02      	ldr	r2, [pc, #8]	; (800be30 <tcp_trigger_input_pcb_close+0xc>)
 800be26:	7813      	ldrb	r3, [r2, #0]
 800be28:	f043 0310 	orr.w	r3, r3, #16
 800be2c:	7013      	strb	r3, [r2, #0]
}
 800be2e:	4770      	bx	lr
 800be30:	20000aa8 	.word	0x20000aa8

0800be34 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800be34:	b538      	push	{r3, r4, r5, lr}
 800be36:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800be38:	4605      	mov	r5, r0
 800be3a:	b1c8      	cbz	r0, 800be70 <tcp_write_checks+0x3c>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800be3c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800be40:	2b04      	cmp	r3, #4
 800be42:	d005      	beq.n	800be50 <tcp_write_checks+0x1c>
 800be44:	2b07      	cmp	r3, #7
 800be46:	d003      	beq.n	800be50 <tcp_write_checks+0x1c>
      (pcb->state != CLOSE_WAIT) &&
 800be48:	2b02      	cmp	r3, #2
 800be4a:	d001      	beq.n	800be50 <tcp_write_checks+0x1c>
      (pcb->state != SYN_SENT) &&
 800be4c:	2b03      	cmp	r3, #3
 800be4e:	d149      	bne.n	800bee4 <tcp_write_checks+0xb0>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
 800be50:	2c00      	cmp	r4, #0
 800be52:	d04a      	beq.n	800beea <tcp_write_checks+0xb6>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800be54:	f8b5 308c 	ldrh.w	r3, [r5, #140]	; 0x8c
 800be58:	42a3      	cmp	r3, r4
 800be5a:	d311      	bcc.n	800be80 <tcp_write_checks+0x4c>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800be5c:	f8b5 308e 	ldrh.w	r3, [r5, #142]	; 0x8e
 800be60:	2b08      	cmp	r3, #8
 800be62:	d816      	bhi.n	800be92 <tcp_write_checks+0x5e>
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
    return ERR_MEM;
  }
  if (pcb->snd_queuelen != 0) {
 800be64:	b363      	cbz	r3, 800bec0 <tcp_write_checks+0x8c>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800be66:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800be6a:	b1db      	cbz	r3, 800bea4 <tcp_write_checks+0x70>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800be6c:	2000      	movs	r0, #0
 800be6e:	e03d      	b.n	800beec <tcp_write_checks+0xb8>
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800be70:	4b1f      	ldr	r3, [pc, #124]	; (800bef0 <tcp_write_checks+0xbc>)
 800be72:	f240 1233 	movw	r2, #307	; 0x133
 800be76:	491f      	ldr	r1, [pc, #124]	; (800bef4 <tcp_write_checks+0xc0>)
 800be78:	481f      	ldr	r0, [pc, #124]	; (800bef8 <tcp_write_checks+0xc4>)
 800be7a:	f009 fd89 	bl	8015990 <iprintf>
 800be7e:	e7dd      	b.n	800be3c <tcp_write_checks+0x8>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800be80:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 800be84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be88:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
    return ERR_MEM;
 800be8c:	f04f 30ff 	mov.w	r0, #4294967295
 800be90:	e02c      	b.n	800beec <tcp_write_checks+0xb8>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800be92:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 800be96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be9a:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
    return ERR_MEM;
 800be9e:	f04f 30ff 	mov.w	r0, #4294967295
 800bea2:	e023      	b.n	800beec <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800bea4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800bea8:	b10b      	cbz	r3, 800beae <tcp_write_checks+0x7a>
  return ERR_OK;
 800beaa:	2000      	movs	r0, #0
 800beac:	e01e      	b.n	800beec <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800beae:	4b10      	ldr	r3, [pc, #64]	; (800bef0 <tcp_write_checks+0xbc>)
 800beb0:	f240 1255 	movw	r2, #341	; 0x155
 800beb4:	4911      	ldr	r1, [pc, #68]	; (800befc <tcp_write_checks+0xc8>)
 800beb6:	4810      	ldr	r0, [pc, #64]	; (800bef8 <tcp_write_checks+0xc4>)
 800beb8:	f009 fd6a 	bl	8015990 <iprintf>
  return ERR_OK;
 800bebc:	2000      	movs	r0, #0
 800bebe:	e015      	b.n	800beec <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bec0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800bec4:	b143      	cbz	r3, 800bed8 <tcp_write_checks+0xa4>
 800bec6:	4b0a      	ldr	r3, [pc, #40]	; (800bef0 <tcp_write_checks+0xbc>)
 800bec8:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800becc:	490c      	ldr	r1, [pc, #48]	; (800bf00 <tcp_write_checks+0xcc>)
 800bece:	480a      	ldr	r0, [pc, #40]	; (800bef8 <tcp_write_checks+0xc4>)
 800bed0:	f009 fd5e 	bl	8015990 <iprintf>
  return ERR_OK;
 800bed4:	2000      	movs	r0, #0
 800bed6:	e009      	b.n	800beec <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bed8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d1f2      	bne.n	800bec6 <tcp_write_checks+0x92>
  return ERR_OK;
 800bee0:	2000      	movs	r0, #0
 800bee2:	e003      	b.n	800beec <tcp_write_checks+0xb8>
    return ERR_CONN;
 800bee4:	f06f 000a 	mvn.w	r0, #10
 800bee8:	e000      	b.n	800beec <tcp_write_checks+0xb8>
    return ERR_OK;
 800beea:	2000      	movs	r0, #0
}
 800beec:	bd38      	pop	{r3, r4, r5, pc}
 800beee:	bf00      	nop
 800bef0:	08019118 	.word	0x08019118
 800bef4:	0801914c 	.word	0x0801914c
 800bef8:	08016bb4 	.word	0x08016bb4
 800befc:	0801916c 	.word	0x0801916c
 800bf00:	080191a8 	.word	0x080191a8

0800bf04 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bf04:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bf06:	4604      	mov	r4, r0
 800bf08:	b128      	cbz	r0, 800bf16 <tcp_output_segment_busy+0x12>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bf0a:	6863      	ldr	r3, [r4, #4]
 800bf0c:	7b9b      	ldrb	r3, [r3, #14]
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d109      	bne.n	800bf26 <tcp_output_segment_busy+0x22>
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
 800bf12:	2000      	movs	r0, #0
}
 800bf14:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bf16:	4b05      	ldr	r3, [pc, #20]	; (800bf2c <tcp_output_segment_busy+0x28>)
 800bf18:	f240 529a 	movw	r2, #1434	; 0x59a
 800bf1c:	4904      	ldr	r1, [pc, #16]	; (800bf30 <tcp_output_segment_busy+0x2c>)
 800bf1e:	4805      	ldr	r0, [pc, #20]	; (800bf34 <tcp_output_segment_busy+0x30>)
 800bf20:	f009 fd36 	bl	8015990 <iprintf>
 800bf24:	e7f1      	b.n	800bf0a <tcp_output_segment_busy+0x6>
    return 1;
 800bf26:	2001      	movs	r0, #1
 800bf28:	e7f4      	b.n	800bf14 <tcp_output_segment_busy+0x10>
 800bf2a:	bf00      	nop
 800bf2c:	08019118 	.word	0x08019118
 800bf30:	080191dc 	.word	0x080191dc
 800bf34:	08016bb4 	.word	0x08016bb4

0800bf38 <tcp_output_fill_options>:
}

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800bf38:	b538      	push	{r3, r4, r5, lr}
 800bf3a:	4614      	mov	r4, r2
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800bf3c:	460d      	mov	r5, r1
 800bf3e:	b189      	cbz	r1, 800bf64 <tcp_output_fill_options+0x2c>

  tcphdr = (struct tcp_hdr *)p->payload;
 800bf40:	686b      	ldr	r3, [r5, #4]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800bf42:	f103 0214 	add.w	r2, r3, #20
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800bf46:	00a4      	lsls	r4, r4, #2
 800bf48:	f004 0404 	and.w	r4, r4, #4
 800bf4c:	3414      	adds	r4, #20
 800bf4e:	441c      	add	r4, r3
 800bf50:	4294      	cmp	r4, r2
 800bf52:	d006      	beq.n	800bf62 <tcp_output_fill_options+0x2a>
 800bf54:	4b07      	ldr	r3, [pc, #28]	; (800bf74 <tcp_output_fill_options+0x3c>)
 800bf56:	f240 7275 	movw	r2, #1909	; 0x775
 800bf5a:	4907      	ldr	r1, [pc, #28]	; (800bf78 <tcp_output_fill_options+0x40>)
 800bf5c:	4807      	ldr	r0, [pc, #28]	; (800bf7c <tcp_output_fill_options+0x44>)
 800bf5e:	f009 fd17 	bl	8015990 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800bf62:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800bf64:	4b03      	ldr	r3, [pc, #12]	; (800bf74 <tcp_output_fill_options+0x3c>)
 800bf66:	f240 7256 	movw	r2, #1878	; 0x756
 800bf6a:	4905      	ldr	r1, [pc, #20]	; (800bf80 <tcp_output_fill_options+0x48>)
 800bf6c:	4803      	ldr	r0, [pc, #12]	; (800bf7c <tcp_output_fill_options+0x44>)
 800bf6e:	f009 fd0f 	bl	8015990 <iprintf>
 800bf72:	e7e5      	b.n	800bf40 <tcp_output_fill_options+0x8>
 800bf74:	08019118 	.word	0x08019118
 800bf78:	0801922c 	.word	0x0801922c
 800bf7c:	08016bb4 	.word	0x08016bb4
 800bf80:	08019204 	.word	0x08019204

0800bf84 <tcp_pbuf_prealloc>:
{
 800bf84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf88:	4606      	mov	r6, r0
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	4615      	mov	r5, r2
 800bf8e:	9f08      	ldr	r7, [sp, #32]
 800bf90:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800bf94:	4698      	mov	r8, r3
 800bf96:	b1db      	cbz	r3, 800bfd0 <tcp_pbuf_prealloc+0x4c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800bf98:	b30f      	cbz	r7, 800bfde <tcp_pbuf_prealloc+0x5a>
  if (length < max_length) {
 800bf9a:	42ac      	cmp	r4, r5
 800bf9c:	d22c      	bcs.n	800bff8 <tcp_pbuf_prealloc+0x74>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800bf9e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800bfa2:	f013 0f02 	tst.w	r3, #2
 800bfa6:	d10a      	bne.n	800bfbe <tcp_pbuf_prealloc+0x3a>
        (!(pcb->flags & TF_NODELAY) &&
 800bfa8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800bfac:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bfb0:	d13c      	bne.n	800c02c <tcp_pbuf_prealloc+0xa8>
        (!(pcb->flags & TF_NODELAY) &&
 800bfb2:	f1b9 0f00 	cmp.w	r9, #0
 800bfb6:	d002      	beq.n	800bfbe <tcp_pbuf_prealloc+0x3a>
          pcb->unsent != NULL ||
 800bfb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
         (!first_seg ||
 800bfbc:	b1b3      	cbz	r3, 800bfec <tcp_pbuf_prealloc+0x68>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800bfbe:	f204 211b 	addw	r1, r4, #539	; 0x21b
 800bfc2:	f021 0103 	bic.w	r1, r1, #3
 800bfc6:	428d      	cmp	r5, r1
 800bfc8:	bf28      	it	cs
 800bfca:	460d      	movcs	r5, r1
 800bfcc:	b2a9      	uxth	r1, r5
 800bfce:	e014      	b.n	800bffa <tcp_pbuf_prealloc+0x76>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800bfd0:	4b17      	ldr	r3, [pc, #92]	; (800c030 <tcp_pbuf_prealloc+0xac>)
 800bfd2:	22e8      	movs	r2, #232	; 0xe8
 800bfd4:	4917      	ldr	r1, [pc, #92]	; (800c034 <tcp_pbuf_prealloc+0xb0>)
 800bfd6:	4818      	ldr	r0, [pc, #96]	; (800c038 <tcp_pbuf_prealloc+0xb4>)
 800bfd8:	f009 fcda 	bl	8015990 <iprintf>
 800bfdc:	e7dc      	b.n	800bf98 <tcp_pbuf_prealloc+0x14>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800bfde:	4b14      	ldr	r3, [pc, #80]	; (800c030 <tcp_pbuf_prealloc+0xac>)
 800bfe0:	22e9      	movs	r2, #233	; 0xe9
 800bfe2:	4916      	ldr	r1, [pc, #88]	; (800c03c <tcp_pbuf_prealloc+0xb8>)
 800bfe4:	4814      	ldr	r0, [pc, #80]	; (800c038 <tcp_pbuf_prealloc+0xb4>)
 800bfe6:	f009 fcd3 	bl	8015990 <iprintf>
 800bfea:	e7d6      	b.n	800bf9a <tcp_pbuf_prealloc+0x16>
          pcb->unacked != NULL))) {
 800bfec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
          pcb->unsent != NULL ||
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d1e4      	bne.n	800bfbe <tcp_pbuf_prealloc+0x3a>
  u16_t alloc = length;
 800bff4:	4621      	mov	r1, r4
 800bff6:	e000      	b.n	800bffa <tcp_pbuf_prealloc+0x76>
 800bff8:	4621      	mov	r1, r4
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800bffa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bffe:	4630      	mov	r0, r6
 800c000:	f7fc f8d8 	bl	80081b4 <pbuf_alloc>
  if (p == NULL) {
 800c004:	4605      	mov	r5, r0
 800c006:	b170      	cbz	r0, 800c026 <tcp_pbuf_prealloc+0xa2>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c008:	6803      	ldr	r3, [r0, #0]
 800c00a:	b133      	cbz	r3, 800c01a <tcp_pbuf_prealloc+0x96>
 800c00c:	4b08      	ldr	r3, [pc, #32]	; (800c030 <tcp_pbuf_prealloc+0xac>)
 800c00e:	f240 120b 	movw	r2, #267	; 0x10b
 800c012:	490b      	ldr	r1, [pc, #44]	; (800c040 <tcp_pbuf_prealloc+0xbc>)
 800c014:	4808      	ldr	r0, [pc, #32]	; (800c038 <tcp_pbuf_prealloc+0xb4>)
 800c016:	f009 fcbb 	bl	8015990 <iprintf>
  *oversize = p->len - length;
 800c01a:	896b      	ldrh	r3, [r5, #10]
 800c01c:	1b1b      	subs	r3, r3, r4
 800c01e:	f8a8 3000 	strh.w	r3, [r8]
  p->len = p->tot_len = length;
 800c022:	812c      	strh	r4, [r5, #8]
 800c024:	816c      	strh	r4, [r5, #10]
}
 800c026:	4628      	mov	r0, r5
 800c028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u16_t alloc = length;
 800c02c:	4621      	mov	r1, r4
 800c02e:	e7e4      	b.n	800bffa <tcp_pbuf_prealloc+0x76>
 800c030:	08019118 	.word	0x08019118
 800c034:	08019240 	.word	0x08019240
 800c038:	08016bb4 	.word	0x08016bb4
 800c03c:	08019264 	.word	0x08019264
 800c040:	08019284 	.word	0x08019284

0800c044 <tcp_create_segment>:
{
 800c044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c048:	460e      	mov	r6, r1
 800c04a:	4617      	mov	r7, r2
 800c04c:	4698      	mov	r8, r3
 800c04e:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c052:	4681      	mov	r9, r0
 800c054:	2800      	cmp	r0, #0
 800c056:	d043      	beq.n	800c0e0 <tcp_create_segment+0x9c>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c058:	2e00      	cmp	r6, #0
 800c05a:	d048      	beq.n	800c0ee <tcp_create_segment+0xaa>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c05c:	ea4f 058a 	mov.w	r5, sl, lsl #2
 800c060:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c064:	2003      	movs	r0, #3
 800c066:	f7fb fb85 	bl	8007774 <memp_malloc>
 800c06a:	4604      	mov	r4, r0
 800c06c:	2800      	cmp	r0, #0
 800c06e:	d045      	beq.n	800c0fc <tcp_create_segment+0xb8>
  seg->flags = optflags;
 800c070:	f880 a00c 	strb.w	sl, [r0, #12]
  seg->next = NULL;
 800c074:	2300      	movs	r3, #0
 800c076:	6003      	str	r3, [r0, #0]
  seg->p = p;
 800c078:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c07a:	8933      	ldrh	r3, [r6, #8]
 800c07c:	fa1f fa85 	uxth.w	sl, r5
 800c080:	4553      	cmp	r3, sl
 800c082:	d33f      	bcc.n	800c104 <tcp_create_segment+0xc0>
  seg->len = p->tot_len - optlen;
 800c084:	8931      	ldrh	r1, [r6, #8]
 800c086:	eba1 010a 	sub.w	r1, r1, sl
 800c08a:	8121      	strh	r1, [r4, #8]
  seg->oversize_left = 0;
 800c08c:	2300      	movs	r3, #0
 800c08e:	8163      	strh	r3, [r4, #10]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c090:	2114      	movs	r1, #20
 800c092:	4630      	mov	r0, r6
 800c094:	f7fb ffdb 	bl	800804e <pbuf_add_header>
 800c098:	2800      	cmp	r0, #0
 800c09a:	d13a      	bne.n	800c112 <tcp_create_segment+0xce>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c09c:	6863      	ldr	r3, [r4, #4]
 800c09e:	685e      	ldr	r6, [r3, #4]
 800c0a0:	6126      	str	r6, [r4, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c0a2:	f8b9 003e 	ldrh.w	r0, [r9, #62]	; 0x3e
 800c0a6:	f7fa fce9 	bl	8006a7c <lwip_htons>
 800c0aa:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c0ac:	6926      	ldr	r6, [r4, #16]
 800c0ae:	f8b9 0040 	ldrh.w	r0, [r9, #64]	; 0x40
 800c0b2:	f7fa fce3 	bl	8006a7c <lwip_htons>
 800c0b6:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c0b8:	6926      	ldr	r6, [r4, #16]
 800c0ba:	4640      	mov	r0, r8
 800c0bc:	f7fa fce3 	bl	8006a86 <lwip_htonl>
 800c0c0:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c0c2:	08a8      	lsrs	r0, r5, #2
 800c0c4:	3005      	adds	r0, #5
 800c0c6:	6925      	ldr	r5, [r4, #16]
 800c0c8:	ea47 3000 	orr.w	r0, r7, r0, lsl #12
 800c0cc:	f7fa fcd6 	bl	8006a7c <lwip_htons>
 800c0d0:	81a8      	strh	r0, [r5, #12]
  seg->tcphdr->urgp = 0;
 800c0d2:	6923      	ldr	r3, [r4, #16]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	749a      	strb	r2, [r3, #18]
 800c0d8:	74da      	strb	r2, [r3, #19]
}
 800c0da:	4620      	mov	r0, r4
 800c0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c0e0:	4b0e      	ldr	r3, [pc, #56]	; (800c11c <tcp_create_segment+0xd8>)
 800c0e2:	22a3      	movs	r2, #163	; 0xa3
 800c0e4:	490e      	ldr	r1, [pc, #56]	; (800c120 <tcp_create_segment+0xdc>)
 800c0e6:	480f      	ldr	r0, [pc, #60]	; (800c124 <tcp_create_segment+0xe0>)
 800c0e8:	f009 fc52 	bl	8015990 <iprintf>
 800c0ec:	e7b4      	b.n	800c058 <tcp_create_segment+0x14>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c0ee:	4b0b      	ldr	r3, [pc, #44]	; (800c11c <tcp_create_segment+0xd8>)
 800c0f0:	22a4      	movs	r2, #164	; 0xa4
 800c0f2:	490d      	ldr	r1, [pc, #52]	; (800c128 <tcp_create_segment+0xe4>)
 800c0f4:	480b      	ldr	r0, [pc, #44]	; (800c124 <tcp_create_segment+0xe0>)
 800c0f6:	f009 fc4b 	bl	8015990 <iprintf>
 800c0fa:	e7af      	b.n	800c05c <tcp_create_segment+0x18>
    pbuf_free(p);
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	f7fb fff7 	bl	80080f0 <pbuf_free>
    return NULL;
 800c102:	e7ea      	b.n	800c0da <tcp_create_segment+0x96>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c104:	4b05      	ldr	r3, [pc, #20]	; (800c11c <tcp_create_segment+0xd8>)
 800c106:	22b0      	movs	r2, #176	; 0xb0
 800c108:	4908      	ldr	r1, [pc, #32]	; (800c12c <tcp_create_segment+0xe8>)
 800c10a:	4806      	ldr	r0, [pc, #24]	; (800c124 <tcp_create_segment+0xe0>)
 800c10c:	f009 fc40 	bl	8015990 <iprintf>
 800c110:	e7b8      	b.n	800c084 <tcp_create_segment+0x40>
    tcp_seg_free(seg);
 800c112:	4620      	mov	r0, r4
 800c114:	f7fc ff52 	bl	8008fbc <tcp_seg_free>
    return NULL;
 800c118:	2400      	movs	r4, #0
 800c11a:	e7de      	b.n	800c0da <tcp_create_segment+0x96>
 800c11c:	08019118 	.word	0x08019118
 800c120:	08019298 	.word	0x08019298
 800c124:	08016bb4 	.word	0x08016bb4
 800c128:	080192b8 	.word	0x080192b8
 800c12c:	080192dc 	.word	0x080192dc

0800c130 <tcp_output_alloc_header_common>:
{
 800c130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c134:	4606      	mov	r6, r0
 800c136:	460c      	mov	r4, r1
 800c138:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c13a:	4411      	add	r1, r2
 800c13c:	b289      	uxth	r1, r1
 800c13e:	3114      	adds	r1, #20
 800c140:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c144:	b289      	uxth	r1, r1
 800c146:	2036      	movs	r0, #54	; 0x36
 800c148:	f7fc f834 	bl	80081b4 <pbuf_alloc>
  if (p != NULL) {
 800c14c:	4607      	mov	r7, r0
 800c14e:	b348      	cbz	r0, 800c1a4 <tcp_output_alloc_header_common+0x74>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c150:	f104 0313 	add.w	r3, r4, #19
 800c154:	8942      	ldrh	r2, [r0, #10]
 800c156:	4293      	cmp	r3, r2
 800c158:	da27      	bge.n	800c1aa <tcp_output_alloc_header_common+0x7a>
    tcphdr = (struct tcp_hdr *)p->payload;
 800c15a:	687d      	ldr	r5, [r7, #4]
    tcphdr->src = lwip_htons(src_port);
 800c15c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800c160:	f7fa fc8c 	bl	8006a7c <lwip_htons>
 800c164:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c166:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800c16a:	f7fa fc87 	bl	8006a7c <lwip_htons>
 800c16e:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 800c170:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c174:	4630      	mov	r0, r6
 800c176:	f7fa fc86 	bl	8006a86 <lwip_htonl>
 800c17a:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c17c:	08a4      	lsrs	r4, r4, #2
 800c17e:	3405      	adds	r4, #5
 800c180:	0324      	lsls	r4, r4, #12
 800c182:	b2a4      	uxth	r4, r4
 800c184:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800c188:	4320      	orrs	r0, r4
 800c18a:	f7fa fc77 	bl	8006a7c <lwip_htons>
 800c18e:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c190:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 800c194:	f7fa fc72 	bl	8006a7c <lwip_htons>
 800c198:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 800c19a:	2300      	movs	r3, #0
 800c19c:	742b      	strb	r3, [r5, #16]
 800c19e:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 800c1a0:	74ab      	strb	r3, [r5, #18]
 800c1a2:	74eb      	strb	r3, [r5, #19]
}
 800c1a4:	4638      	mov	r0, r7
 800c1a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c1aa:	4b04      	ldr	r3, [pc, #16]	; (800c1bc <tcp_output_alloc_header_common+0x8c>)
 800c1ac:	f240 7223 	movw	r2, #1827	; 0x723
 800c1b0:	4903      	ldr	r1, [pc, #12]	; (800c1c0 <tcp_output_alloc_header_common+0x90>)
 800c1b2:	4804      	ldr	r0, [pc, #16]	; (800c1c4 <tcp_output_alloc_header_common+0x94>)
 800c1b4:	f009 fbec 	bl	8015990 <iprintf>
 800c1b8:	e7cf      	b.n	800c15a <tcp_output_alloc_header_common+0x2a>
 800c1ba:	bf00      	nop
 800c1bc:	08019118 	.word	0x08019118
 800c1c0:	080192f4 	.word	0x080192f4
 800c1c4:	08016bb4 	.word	0x08016bb4

0800c1c8 <tcp_output_alloc_header>:
{
 800c1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1ca:	b085      	sub	sp, #20
 800c1cc:	460d      	mov	r5, r1
 800c1ce:	4616      	mov	r6, r2
 800c1d0:	461f      	mov	r7, r3
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	b1b8      	cbz	r0, 800c206 <tcp_output_alloc_header+0x3e>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c1d6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800c1da:	9303      	str	r3, [sp, #12]
 800c1dc:	2310      	movs	r3, #16
 800c1de:	9302      	str	r3, [sp, #8]
 800c1e0:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 800c1e4:	9301      	str	r3, [sp, #4]
 800c1e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c1e8:	9300      	str	r3, [sp, #0]
 800c1ea:	463b      	mov	r3, r7
 800c1ec:	4632      	mov	r2, r6
 800c1ee:	4629      	mov	r1, r5
 800c1f0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800c1f2:	f7ff ff9d 	bl	800c130 <tcp_output_alloc_header_common>
  if (p != NULL) {
 800c1f6:	b120      	cbz	r0, 800c202 <tcp_output_alloc_header+0x3a>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c1f8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c1fa:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800c1fe:	4413      	add	r3, r2
 800c200:	6563      	str	r3, [r4, #84]	; 0x54
}
 800c202:	b005      	add	sp, #20
 800c204:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c206:	4b04      	ldr	r3, [pc, #16]	; (800c218 <tcp_output_alloc_header+0x50>)
 800c208:	f240 7242 	movw	r2, #1858	; 0x742
 800c20c:	4903      	ldr	r1, [pc, #12]	; (800c21c <tcp_output_alloc_header+0x54>)
 800c20e:	4804      	ldr	r0, [pc, #16]	; (800c220 <tcp_output_alloc_header+0x58>)
 800c210:	f009 fbbe 	bl	8015990 <iprintf>
 800c214:	e7df      	b.n	800c1d6 <tcp_output_alloc_header+0xe>
 800c216:	bf00      	nop
 800c218:	08019118 	.word	0x08019118
 800c21c:	08019324 	.word	0x08019324
 800c220:	08016bb4 	.word	0x08016bb4

0800c224 <tcp_route>:
{
 800c224:	b508      	push	{r3, lr}
 800c226:	460b      	mov	r3, r1
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c228:	b110      	cbz	r0, 800c230 <tcp_route+0xc>
 800c22a:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 800c22e:	b938      	cbnz	r0, 800c240 <tcp_route+0x1c>
    return ip_route(src, dst);
 800c230:	b112      	cbz	r2, 800c238 <tcp_route+0x14>
 800c232:	7d11      	ldrb	r1, [r2, #20]
 800c234:	2906      	cmp	r1, #6
 800c236:	d006      	beq.n	800c246 <tcp_route+0x22>
 800c238:	4610      	mov	r0, r2
 800c23a:	f004 fc67 	bl	8010b0c <ip4_route>
}
 800c23e:	bd08      	pop	{r3, pc}
    return netif_get_by_index(pcb->netif_idx);
 800c240:	f7fb fe38 	bl	8007eb4 <netif_get_by_index>
 800c244:	e7fb      	b.n	800c23e <tcp_route+0x1a>
    return ip_route(src, dst);
 800c246:	4611      	mov	r1, r2
 800c248:	4618      	mov	r0, r3
 800c24a:	f005 fcd3 	bl	8011bf4 <ip6_route>
 800c24e:	e7f6      	b.n	800c23e <tcp_route+0x1a>

0800c250 <tcp_output_segment>:
{
 800c250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c254:	b084      	sub	sp, #16
 800c256:	460c      	mov	r4, r1
 800c258:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c25a:	4605      	mov	r5, r0
 800c25c:	b148      	cbz	r0, 800c272 <tcp_output_segment+0x22>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c25e:	b184      	cbz	r4, 800c282 <tcp_output_segment+0x32>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c260:	b1be      	cbz	r6, 800c292 <tcp_output_segment+0x42>
  if (tcp_output_segment_busy(seg)) {
 800c262:	4628      	mov	r0, r5
 800c264:	f7ff fe4e 	bl	800bf04 <tcp_output_segment_busy>
 800c268:	b1d8      	cbz	r0, 800c2a2 <tcp_output_segment+0x52>
    return ERR_OK;
 800c26a:	2000      	movs	r0, #0
}
 800c26c:	b004      	add	sp, #16
 800c26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c272:	4b4d      	ldr	r3, [pc, #308]	; (800c3a8 <tcp_output_segment+0x158>)
 800c274:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800c278:	494c      	ldr	r1, [pc, #304]	; (800c3ac <tcp_output_segment+0x15c>)
 800c27a:	484d      	ldr	r0, [pc, #308]	; (800c3b0 <tcp_output_segment+0x160>)
 800c27c:	f009 fb88 	bl	8015990 <iprintf>
 800c280:	e7ed      	b.n	800c25e <tcp_output_segment+0xe>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c282:	4b49      	ldr	r3, [pc, #292]	; (800c3a8 <tcp_output_segment+0x158>)
 800c284:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c288:	494a      	ldr	r1, [pc, #296]	; (800c3b4 <tcp_output_segment+0x164>)
 800c28a:	4849      	ldr	r0, [pc, #292]	; (800c3b0 <tcp_output_segment+0x160>)
 800c28c:	f009 fb80 	bl	8015990 <iprintf>
 800c290:	e7e6      	b.n	800c260 <tcp_output_segment+0x10>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c292:	4b45      	ldr	r3, [pc, #276]	; (800c3a8 <tcp_output_segment+0x158>)
 800c294:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800c298:	4947      	ldr	r1, [pc, #284]	; (800c3b8 <tcp_output_segment+0x168>)
 800c29a:	4845      	ldr	r0, [pc, #276]	; (800c3b0 <tcp_output_segment+0x160>)
 800c29c:	f009 fb78 	bl	8015990 <iprintf>
 800c2a0:	e7df      	b.n	800c262 <tcp_output_segment+0x12>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c2a2:	692f      	ldr	r7, [r5, #16]
 800c2a4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800c2a6:	f7fa fbee 	bl	8006a86 <lwip_htonl>
 800c2aa:	60b8      	str	r0, [r7, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c2ac:	692f      	ldr	r7, [r5, #16]
 800c2ae:	f8b4 0052 	ldrh.w	r0, [r4, #82]	; 0x52
 800c2b2:	f7fa fbe3 	bl	8006a7c <lwip_htons>
 800c2b6:	81f8      	strh	r0, [r7, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c2b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c2ba:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800c2be:	4413      	add	r3, r2
 800c2c0:	6563      	str	r3, [r4, #84]	; 0x54
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c2c2:	f8d5 8010 	ldr.w	r8, [r5, #16]
 800c2c6:	f108 0714 	add.w	r7, r8, #20
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c2ca:	7b2b      	ldrb	r3, [r5, #12]
 800c2cc:	f013 0f01 	tst.w	r3, #1
 800c2d0:	d13e      	bne.n	800c350 <tcp_output_segment+0x100>
  if (pcb->rtime < 0) {
 800c2d2:	f9b4 3058 	ldrsh.w	r3, [r4, #88]	; 0x58
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	db4a      	blt.n	800c370 <tcp_output_segment+0x120>
  if (pcb->rttest == 0) {
 800c2da:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d04b      	beq.n	800c378 <tcp_output_segment+0x128>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c2e0:	692b      	ldr	r3, [r5, #16]
 800c2e2:	686a      	ldr	r2, [r5, #4]
 800c2e4:	6851      	ldr	r1, [r2, #4]
 800c2e6:	1a5b      	subs	r3, r3, r1
 800c2e8:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800c2ea:	8951      	ldrh	r1, [r2, #10]
 800c2ec:	1ac9      	subs	r1, r1, r3
 800c2ee:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 800c2f0:	6869      	ldr	r1, [r5, #4]
 800c2f2:	890a      	ldrh	r2, [r1, #8]
 800c2f4:	1ad3      	subs	r3, r2, r3
 800c2f6:	810b      	strh	r3, [r1, #8]
  seg->p->payload = seg->tcphdr;
 800c2f8:	686a      	ldr	r2, [r5, #4]
 800c2fa:	692b      	ldr	r3, [r5, #16]
 800c2fc:	6053      	str	r3, [r2, #4]
  seg->tcphdr->chksum = 0;
 800c2fe:	2200      	movs	r2, #0
 800c300:	741a      	strb	r2, [r3, #16]
 800c302:	745a      	strb	r2, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c304:	692a      	ldr	r2, [r5, #16]
 800c306:	7b2b      	ldrb	r3, [r5, #12]
 800c308:	009b      	lsls	r3, r3, #2
 800c30a:	f003 0304 	and.w	r3, r3, #4
 800c30e:	3314      	adds	r3, #20
 800c310:	4413      	add	r3, r2
 800c312:	429f      	cmp	r7, r3
 800c314:	d006      	beq.n	800c324 <tcp_output_segment+0xd4>
 800c316:	4b24      	ldr	r3, [pc, #144]	; (800c3a8 <tcp_output_segment+0x158>)
 800c318:	f240 621c 	movw	r2, #1564	; 0x61c
 800c31c:	4927      	ldr	r1, [pc, #156]	; (800c3bc <tcp_output_segment+0x16c>)
 800c31e:	4824      	ldr	r0, [pc, #144]	; (800c3b0 <tcp_output_segment+0x160>)
 800c320:	f009 fb36 	bl	8015990 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c324:	f114 0f18 	cmn.w	r4, #24
 800c328:	d003      	beq.n	800c332 <tcp_output_segment+0xe2>
 800c32a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800c32e:	2b06      	cmp	r3, #6
 800c330:	d02b      	beq.n	800c38a <tcp_output_segment+0x13a>
 800c332:	9602      	str	r6, [sp, #8]
 800c334:	2306      	movs	r3, #6
 800c336:	9301      	str	r3, [sp, #4]
 800c338:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800c33c:	9300      	str	r3, [sp, #0]
 800c33e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800c342:	f104 0218 	add.w	r2, r4, #24
 800c346:	4621      	mov	r1, r4
 800c348:	6868      	ldr	r0, [r5, #4]
 800c34a:	f004 fe11 	bl	8010f70 <ip4_output_if>
 800c34e:	e78d      	b.n	800c26c <tcp_output_segment+0x1c>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c350:	f104 0218 	add.w	r2, r4, #24
 800c354:	4631      	mov	r1, r6
 800c356:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c35a:	f7fc ff1d 	bl	8009198 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c35e:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800c362:	f7fa fb90 	bl	8006a86 <lwip_htonl>
 800c366:	f8c8 0014 	str.w	r0, [r8, #20]
    opts += 1;
 800c36a:	f108 0718 	add.w	r7, r8, #24
 800c36e:	e7b0      	b.n	800c2d2 <tcp_output_segment+0x82>
    pcb->rtime = 0;
 800c370:	2300      	movs	r3, #0
 800c372:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 800c376:	e7b0      	b.n	800c2da <tcp_output_segment+0x8a>
    pcb->rttest = tcp_ticks;
 800c378:	4b11      	ldr	r3, [pc, #68]	; (800c3c0 <tcp_output_segment+0x170>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	65e3      	str	r3, [r4, #92]	; 0x5c
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c37e:	692b      	ldr	r3, [r5, #16]
 800c380:	6858      	ldr	r0, [r3, #4]
 800c382:	f7fa fb80 	bl	8006a86 <lwip_htonl>
 800c386:	6620      	str	r0, [r4, #96]	; 0x60
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_output_segment: rtseq %"U32_F"\n", pcb->rtseq));
 800c388:	e7aa      	b.n	800c2e0 <tcp_output_segment+0x90>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c38a:	9602      	str	r6, [sp, #8]
 800c38c:	9301      	str	r3, [sp, #4]
 800c38e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800c398:	f104 0218 	add.w	r2, r4, #24
 800c39c:	4621      	mov	r1, r4
 800c39e:	6868      	ldr	r0, [r5, #4]
 800c3a0:	f006 f9b0 	bl	8012704 <ip6_output_if>
 800c3a4:	e762      	b.n	800c26c <tcp_output_segment+0x1c>
 800c3a6:	bf00      	nop
 800c3a8:	08019118 	.word	0x08019118
 800c3ac:	0801934c 	.word	0x0801934c
 800c3b0:	08016bb4 	.word	0x08016bb4
 800c3b4:	0801936c 	.word	0x0801936c
 800c3b8:	0801938c 	.word	0x0801938c
 800c3bc:	0801922c 	.word	0x0801922c
 800c3c0:	20007fb0 	.word	0x20007fb0

0800c3c4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	4605      	mov	r5, r0
 800c3ca:	4617      	mov	r7, r2
 800c3cc:	461c      	mov	r4, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c3ce:	460e      	mov	r6, r1
 800c3d0:	b1f9      	cbz	r1, 800c412 <tcp_output_control_segment+0x4e>

  netif = tcp_route(pcb, src, dst);
 800c3d2:	4622      	mov	r2, r4
 800c3d4:	4639      	mov	r1, r7
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	f7ff ff24 	bl	800c224 <tcp_route>
  if (netif == NULL) {
 800c3dc:	4602      	mov	r2, r0
 800c3de:	b370      	cbz	r0, 800c43e <tcp_output_control_segment+0x7a>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c3e0:	b1fd      	cbz	r5, 800c422 <tcp_output_control_segment+0x5e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c3e2:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
      tos = pcb->tos;
 800c3e6:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c3ea:	b114      	cbz	r4, 800c3f2 <tcp_output_control_segment+0x2e>
 800c3ec:	7d20      	ldrb	r0, [r4, #20]
 800c3ee:	2806      	cmp	r0, #6
 800c3f0:	d01a      	beq.n	800c428 <tcp_output_control_segment+0x64>
 800c3f2:	9202      	str	r2, [sp, #8]
 800c3f4:	2206      	movs	r2, #6
 800c3f6:	9201      	str	r2, [sp, #4]
 800c3f8:	9100      	str	r1, [sp, #0]
 800c3fa:	4622      	mov	r2, r4
 800c3fc:	4639      	mov	r1, r7
 800c3fe:	4630      	mov	r0, r6
 800c400:	f004 fdb6 	bl	8010f70 <ip4_output_if>
 800c404:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c406:	4630      	mov	r0, r6
 800c408:	f7fb fe72 	bl	80080f0 <pbuf_free>
  return err;
}
 800c40c:	4620      	mov	r0, r4
 800c40e:	b005      	add	sp, #20
 800c410:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c412:	4b0c      	ldr	r3, [pc, #48]	; (800c444 <tcp_output_control_segment+0x80>)
 800c414:	f240 7287 	movw	r2, #1927	; 0x787
 800c418:	490b      	ldr	r1, [pc, #44]	; (800c448 <tcp_output_control_segment+0x84>)
 800c41a:	480c      	ldr	r0, [pc, #48]	; (800c44c <tcp_output_control_segment+0x88>)
 800c41c:	f009 fab8 	bl	8015990 <iprintf>
 800c420:	e7d7      	b.n	800c3d2 <tcp_output_control_segment+0xe>
      tos = 0;
 800c422:	2100      	movs	r1, #0
      ttl = TCP_TTL;
 800c424:	23ff      	movs	r3, #255	; 0xff
 800c426:	e7e0      	b.n	800c3ea <tcp_output_control_segment+0x26>
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c428:	9202      	str	r2, [sp, #8]
 800c42a:	2206      	movs	r2, #6
 800c42c:	9201      	str	r2, [sp, #4]
 800c42e:	9100      	str	r1, [sp, #0]
 800c430:	4622      	mov	r2, r4
 800c432:	4639      	mov	r1, r7
 800c434:	4630      	mov	r0, r6
 800c436:	f006 f965 	bl	8012704 <ip6_output_if>
 800c43a:	4604      	mov	r4, r0
 800c43c:	e7e3      	b.n	800c406 <tcp_output_control_segment+0x42>
    err = ERR_RTE;
 800c43e:	f06f 0403 	mvn.w	r4, #3
 800c442:	e7e0      	b.n	800c406 <tcp_output_control_segment+0x42>
 800c444:	08019118 	.word	0x08019118
 800c448:	080193b0 	.word	0x080193b0
 800c44c:	08016bb4 	.word	0x08016bb4

0800c450 <tcp_write>:
{
 800c450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c454:	b091      	sub	sp, #68	; 0x44
 800c456:	9107      	str	r1, [sp, #28]
 800c458:	9306      	str	r3, [sp, #24]
  u16_t oversize = 0;
 800c45a:	2300      	movs	r3, #0
 800c45c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c460:	2800      	cmp	r0, #0
 800c462:	f000 80a7 	beq.w	800c5b4 <tcp_write+0x164>
 800c466:	4692      	mov	sl, r2
 800c468:	4680      	mov	r8, r0
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c46a:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
 800c46e:	085b      	lsrs	r3, r3, #1
 800c470:	f8b0 b05a 	ldrh.w	fp, [r0, #90]	; 0x5a
 800c474:	455b      	cmp	r3, fp
 800c476:	bf28      	it	cs
 800c478:	465b      	movcs	r3, fp
  mss_local = mss_local ? mss_local : pcb->mss;
 800c47a:	b103      	cbz	r3, 800c47e <tcp_write+0x2e>
 800c47c:	469b      	mov	fp, r3
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c47e:	9b07      	ldr	r3, [sp, #28]
 800c480:	2b00      	cmp	r3, #0
 800c482:	f000 80a2 	beq.w	800c5ca <tcp_write+0x17a>
  err = tcp_write_checks(pcb, len);
 800c486:	4651      	mov	r1, sl
 800c488:	4640      	mov	r0, r8
 800c48a:	f7ff fcd3 	bl	800be34 <tcp_write_checks>
  if (err != ERR_OK) {
 800c48e:	9009      	str	r0, [sp, #36]	; 0x24
 800c490:	2800      	cmp	r0, #0
 800c492:	f040 81b9 	bne.w	800c808 <tcp_write+0x3b8>
  queuelen = pcb->snd_queuelen;
 800c496:	f8b8 608e 	ldrh.w	r6, [r8, #142]	; 0x8e
  if (pcb->unsent != NULL) {
 800c49a:	f8d8 9094 	ldr.w	r9, [r8, #148]	; 0x94
 800c49e:	f1b9 0f00 	cmp.w	r9, #0
 800c4a2:	f000 80f2 	beq.w	800c68a <tcp_write+0x23a>
 800c4a6:	464b      	mov	r3, r9
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c4a8:	9308      	str	r3, [sp, #32]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d1fb      	bne.n	800c4a8 <tcp_write+0x58>
 800c4b0:	4699      	mov	r9, r3
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c4b2:	9b08      	ldr	r3, [sp, #32]
 800c4b4:	7b1c      	ldrb	r4, [r3, #12]
 800c4b6:	00a4      	lsls	r4, r4, #2
 800c4b8:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c4bc:	891b      	ldrh	r3, [r3, #8]
 800c4be:	4423      	add	r3, r4
 800c4c0:	459b      	cmp	fp, r3
 800c4c2:	f2c0 808d 	blt.w	800c5e0 <tcp_write+0x190>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c4c6:	9908      	ldr	r1, [sp, #32]
 800c4c8:	890b      	ldrh	r3, [r1, #8]
 800c4ca:	441c      	add	r4, r3
 800c4cc:	b2a4      	uxth	r4, r4
 800c4ce:	ebab 0404 	sub.w	r4, fp, r4
 800c4d2:	b2a3      	uxth	r3, r4
 800c4d4:	930b      	str	r3, [sp, #44]	; 0x2c
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 800c4d6:	f8b8 2090 	ldrh.w	r2, [r8, #144]	; 0x90
 800c4da:	894b      	ldrh	r3, [r1, #10]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	f040 8087 	bne.w	800c5f0 <tcp_write+0x1a0>
    oversize = pcb->unsent_oversize;
 800c4e2:	f8b8 3090 	ldrh.w	r3, [r8, #144]	; 0x90
 800c4e6:	930a      	str	r3, [sp, #40]	; 0x28
 800c4e8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f000 808f 	beq.w	800c610 <tcp_write+0x1c0>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c4f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	f200 8083 	bhi.w	800c600 <tcp_write+0x1b0>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c4fa:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800c4fe:	461a      	mov	r2, r3
 800c500:	4553      	cmp	r3, sl
 800c502:	bf28      	it	cs
 800c504:	4652      	movcs	r2, sl
 800c506:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c508:	428a      	cmp	r2, r1
 800c50a:	bf28      	it	cs
 800c50c:	460a      	movcs	r2, r1
 800c50e:	b292      	uxth	r2, r2
 800c510:	920a      	str	r2, [sp, #40]	; 0x28
      oversize -= oversize_used;
 800c512:	1a9b      	subs	r3, r3, r2
 800c514:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 800c518:	1a8b      	subs	r3, r1, r2
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	930b      	str	r3, [sp, #44]	; 0x2c
      seg = last_unsent;
 800c51e:	9f08      	ldr	r7, [sp, #32]
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c520:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800c524:	b113      	cbz	r3, 800c52c <tcp_write+0xdc>
 800c526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c528:	4553      	cmp	r3, sl
 800c52a:	d173      	bne.n	800c614 <tcp_write+0x1c4>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c52c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c52e:	4553      	cmp	r3, sl
 800c530:	f080 8178 	bcs.w	800c824 <tcp_write+0x3d4>
 800c534:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c536:	2a00      	cmp	r2, #0
 800c538:	f000 817e 	beq.w	800c838 <tcp_write+0x3e8>
 800c53c:	9908      	ldr	r1, [sp, #32]
 800c53e:	8909      	ldrh	r1, [r1, #8]
 800c540:	910d      	str	r1, [sp, #52]	; 0x34
 800c542:	2900      	cmp	r1, #0
 800c544:	f000 817c 	beq.w	800c840 <tcp_write+0x3f0>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c548:	ebaa 0403 	sub.w	r4, sl, r3
 800c54c:	4294      	cmp	r4, r2
 800c54e:	bfa8      	it	ge
 800c550:	4614      	movge	r4, r2
 800c552:	b2a5      	uxth	r5, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c554:	9b06      	ldr	r3, [sp, #24]
 800c556:	f013 0f01 	tst.w	r3, #1
 800c55a:	d163      	bne.n	800c624 <tcp_write+0x1d4>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c55c:	9b08      	ldr	r3, [sp, #32]
 800c55e:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800c562:	464a      	mov	r2, r9
 800c564:	4613      	mov	r3, r2
 800c566:	6812      	ldr	r2, [r2, #0]
 800c568:	2a00      	cmp	r2, #0
 800c56a:	d1fb      	bne.n	800c564 <tcp_write+0x114>
 800c56c:	4691      	mov	r9, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c56e:	7b1a      	ldrb	r2, [r3, #12]
 800c570:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800c574:	d105      	bne.n	800c582 <tcp_write+0x132>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c576:	685a      	ldr	r2, [r3, #4]
 800c578:	895b      	ldrh	r3, [r3, #10]
 800c57a:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c57c:	9a07      	ldr	r2, [sp, #28]
 800c57e:	4293      	cmp	r3, r2
 800c580:	d072      	beq.n	800c668 <tcp_write+0x218>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c582:	2201      	movs	r2, #1
 800c584:	4629      	mov	r1, r5
 800c586:	2000      	movs	r0, #0
 800c588:	f7fb fe14 	bl	80081b4 <pbuf_alloc>
 800c58c:	4681      	mov	r9, r0
 800c58e:	2800      	cmp	r0, #0
 800c590:	f000 822f 	beq.w	800c9f2 <tcp_write+0x5a2>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800c594:	9b07      	ldr	r3, [sp, #28]
 800c596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c598:	4413      	add	r3, r2
 800c59a:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800c59c:	f7fb ff0c 	bl	80083b8 <pbuf_clen>
 800c5a0:	4406      	add	r6, r0
 800c5a2:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	930d      	str	r3, [sp, #52]	; 0x34
  u16_t oversize_add = 0;
 800c5a8:	930b      	str	r3, [sp, #44]	; 0x2c
      pos += seglen;
 800c5aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ac:	195c      	adds	r4, r3, r5
 800c5ae:	b2a4      	uxth	r4, r4
      seg = last_unsent;
 800c5b0:	9f08      	ldr	r7, [sp, #32]
 800c5b2:	e13b      	b.n	800c82c <tcp_write+0x3dc>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c5b4:	4bad      	ldr	r3, [pc, #692]	; (800c86c <tcp_write+0x41c>)
 800c5b6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800c5ba:	49ad      	ldr	r1, [pc, #692]	; (800c870 <tcp_write+0x420>)
 800c5bc:	48ad      	ldr	r0, [pc, #692]	; (800c874 <tcp_write+0x424>)
 800c5be:	f009 f9e7 	bl	8015990 <iprintf>
 800c5c2:	f06f 030f 	mvn.w	r3, #15
 800c5c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c5c8:	e11e      	b.n	800c808 <tcp_write+0x3b8>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c5ca:	4ba8      	ldr	r3, [pc, #672]	; (800c86c <tcp_write+0x41c>)
 800c5cc:	f240 12ad 	movw	r2, #429	; 0x1ad
 800c5d0:	49a9      	ldr	r1, [pc, #676]	; (800c878 <tcp_write+0x428>)
 800c5d2:	48a8      	ldr	r0, [pc, #672]	; (800c874 <tcp_write+0x424>)
 800c5d4:	f009 f9dc 	bl	8015990 <iprintf>
 800c5d8:	f06f 030f 	mvn.w	r3, #15
 800c5dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c5de:	e113      	b.n	800c808 <tcp_write+0x3b8>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c5e0:	4ba2      	ldr	r3, [pc, #648]	; (800c86c <tcp_write+0x41c>)
 800c5e2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c5e6:	49a5      	ldr	r1, [pc, #660]	; (800c87c <tcp_write+0x42c>)
 800c5e8:	48a2      	ldr	r0, [pc, #648]	; (800c874 <tcp_write+0x424>)
 800c5ea:	f009 f9d1 	bl	8015990 <iprintf>
 800c5ee:	e76a      	b.n	800c4c6 <tcp_write+0x76>
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 800c5f0:	4b9e      	ldr	r3, [pc, #632]	; (800c86c <tcp_write+0x41c>)
 800c5f2:	f240 12f3 	movw	r2, #499	; 0x1f3
 800c5f6:	49a2      	ldr	r1, [pc, #648]	; (800c880 <tcp_write+0x430>)
 800c5f8:	489e      	ldr	r0, [pc, #632]	; (800c874 <tcp_write+0x424>)
 800c5fa:	f009 f9c9 	bl	8015990 <iprintf>
 800c5fe:	e770      	b.n	800c4e2 <tcp_write+0x92>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c600:	4b9a      	ldr	r3, [pc, #616]	; (800c86c <tcp_write+0x41c>)
 800c602:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800c606:	499f      	ldr	r1, [pc, #636]	; (800c884 <tcp_write+0x434>)
 800c608:	489a      	ldr	r0, [pc, #616]	; (800c874 <tcp_write+0x424>)
 800c60a:	f009 f9c1 	bl	8015990 <iprintf>
 800c60e:	e774      	b.n	800c4fa <tcp_write+0xaa>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c610:	464f      	mov	r7, r9
 800c612:	e785      	b.n	800c520 <tcp_write+0xd0>
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c614:	4b95      	ldr	r3, [pc, #596]	; (800c86c <tcp_write+0x41c>)
 800c616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c61a:	499b      	ldr	r1, [pc, #620]	; (800c888 <tcp_write+0x438>)
 800c61c:	4895      	ldr	r0, [pc, #596]	; (800c874 <tcp_write+0x424>)
 800c61e:	f009 f9b7 	bl	8015990 <iprintf>
 800c622:	e783      	b.n	800c52c <tcp_write+0xdc>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c624:	2301      	movs	r3, #1
 800c626:	9302      	str	r3, [sp, #8]
 800c628:	9b06      	ldr	r3, [sp, #24]
 800c62a:	9301      	str	r3, [sp, #4]
 800c62c:	f8cd 8000 	str.w	r8, [sp]
 800c630:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800c634:	4629      	mov	r1, r5
 800c636:	2000      	movs	r0, #0
 800c638:	f7ff fca4 	bl	800bf84 <tcp_pbuf_prealloc>
 800c63c:	4681      	mov	r9, r0
 800c63e:	2800      	cmp	r0, #0
 800c640:	f000 81d5 	beq.w	800c9ee <tcp_write+0x59e>
        oversize_add = oversize;
 800c644:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800c648:	930b      	str	r3, [sp, #44]	; 0x2c
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c64a:	462a      	mov	r2, r5
 800c64c:	9b07      	ldr	r3, [sp, #28]
 800c64e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c650:	1859      	adds	r1, r3, r1
 800c652:	6840      	ldr	r0, [r0, #4]
 800c654:	f009 f96c 	bl	8015930 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800c658:	4648      	mov	r0, r9
 800c65a:	f7fb fead 	bl	80083b8 <pbuf_clen>
 800c65e:	4406      	add	r6, r0
 800c660:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800c662:	2300      	movs	r3, #0
 800c664:	930d      	str	r3, [sp, #52]	; 0x34
 800c666:	e7a0      	b.n	800c5aa <tcp_write+0x15a>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c66a:	b91b      	cbnz	r3, 800c674 <tcp_write+0x224>
          extendlen = seglen;
 800c66c:	950d      	str	r5, [sp, #52]	; 0x34
  u16_t oversize_add = 0;
 800c66e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c670:	930b      	str	r3, [sp, #44]	; 0x2c
 800c672:	e79a      	b.n	800c5aa <tcp_write+0x15a>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c674:	4b7d      	ldr	r3, [pc, #500]	; (800c86c <tcp_write+0x41c>)
 800c676:	f240 2231 	movw	r2, #561	; 0x231
 800c67a:	4984      	ldr	r1, [pc, #528]	; (800c88c <tcp_write+0x43c>)
 800c67c:	487d      	ldr	r0, [pc, #500]	; (800c874 <tcp_write+0x424>)
 800c67e:	f009 f987 	bl	8015990 <iprintf>
          extendlen = seglen;
 800c682:	950d      	str	r5, [sp, #52]	; 0x34
  u16_t oversize_add = 0;
 800c684:	2300      	movs	r3, #0
 800c686:	930b      	str	r3, [sp, #44]	; 0x2c
 800c688:	e78f      	b.n	800c5aa <tcp_write+0x15a>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c68a:	f8b8 4090 	ldrh.w	r4, [r8, #144]	; 0x90
 800c68e:	b934      	cbnz	r4, 800c69e <tcp_write+0x24e>
  u16_t extendlen = 0;
 800c690:	940d      	str	r4, [sp, #52]	; 0x34
  u16_t oversize_add = 0;
 800c692:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800c694:	940a      	str	r4, [sp, #40]	; 0x28
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c696:	464f      	mov	r7, r9
 800c698:	f8cd 9020 	str.w	r9, [sp, #32]
 800c69c:	e0c6      	b.n	800c82c <tcp_write+0x3dc>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c69e:	4b73      	ldr	r3, [pc, #460]	; (800c86c <tcp_write+0x41c>)
 800c6a0:	f240 224a 	movw	r2, #586	; 0x24a
 800c6a4:	497a      	ldr	r1, [pc, #488]	; (800c890 <tcp_write+0x440>)
 800c6a6:	4873      	ldr	r0, [pc, #460]	; (800c874 <tcp_write+0x424>)
 800c6a8:	f009 f972 	bl	8015990 <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c6ac:	464f      	mov	r7, r9
 800c6ae:	f8cd 9020 	str.w	r9, [sp, #32]
  u16_t extendlen = 0;
 800c6b2:	2400      	movs	r4, #0
 800c6b4:	940d      	str	r4, [sp, #52]	; 0x34
  u16_t oversize_add = 0;
 800c6b6:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800c6b8:	940a      	str	r4, [sp, #40]	; 0x28
 800c6ba:	e0b7      	b.n	800c82c <tcp_write+0x3dc>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c6bc:	9b05      	ldr	r3, [sp, #20]
 800c6be:	fab3 f383 	clz	r3, r3
 800c6c2:	095b      	lsrs	r3, r3, #5
 800c6c4:	9302      	str	r3, [sp, #8]
 800c6c6:	9b06      	ldr	r3, [sp, #24]
 800c6c8:	9301      	str	r3, [sp, #4]
 800c6ca:	f8cd 8000 	str.w	r8, [sp]
 800c6ce:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800c6d2:	465a      	mov	r2, fp
 800c6d4:	4629      	mov	r1, r5
 800c6d6:	204a      	movs	r0, #74	; 0x4a
 800c6d8:	f7ff fc54 	bl	800bf84 <tcp_pbuf_prealloc>
 800c6dc:	4607      	mov	r7, r0
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	f000 8189 	beq.w	800c9f6 <tcp_write+0x5a6>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c6e4:	8943      	ldrh	r3, [r0, #10]
 800c6e6:	42ab      	cmp	r3, r5
 800c6e8:	d306      	bcc.n	800c6f8 <tcp_write+0x2a8>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c6ea:	462a      	mov	r2, r5
 800c6ec:	9b07      	ldr	r3, [sp, #28]
 800c6ee:	1919      	adds	r1, r3, r4
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f009 f91d 	bl	8015930 <memcpy>
 800c6f6:	e026      	b.n	800c746 <tcp_write+0x2f6>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c6f8:	4b5c      	ldr	r3, [pc, #368]	; (800c86c <tcp_write+0x41c>)
 800c6fa:	f240 2266 	movw	r2, #614	; 0x266
 800c6fe:	4965      	ldr	r1, [pc, #404]	; (800c894 <tcp_write+0x444>)
 800c700:	485c      	ldr	r0, [pc, #368]	; (800c874 <tcp_write+0x424>)
 800c702:	f009 f945 	bl	8015990 <iprintf>
 800c706:	e7f0      	b.n	800c6ea <tcp_write+0x29a>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c708:	4b58      	ldr	r3, [pc, #352]	; (800c86c <tcp_write+0x41c>)
 800c70a:	f240 2271 	movw	r2, #625	; 0x271
 800c70e:	4962      	ldr	r1, [pc, #392]	; (800c898 <tcp_write+0x448>)
 800c710:	4858      	ldr	r0, [pc, #352]	; (800c874 <tcp_write+0x424>)
 800c712:	f009 f93d 	bl	8015990 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c716:	2201      	movs	r2, #1
 800c718:	4629      	mov	r1, r5
 800c71a:	204a      	movs	r0, #74	; 0x4a
 800c71c:	f7fb fd4a 	bl	80081b4 <pbuf_alloc>
 800c720:	4681      	mov	r9, r0
 800c722:	2800      	cmp	r0, #0
 800c724:	f000 816a 	beq.w	800c9fc <tcp_write+0x5ac>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c728:	9b07      	ldr	r3, [sp, #28]
 800c72a:	4423      	add	r3, r4
 800c72c:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c72e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c732:	2100      	movs	r1, #0
 800c734:	204a      	movs	r0, #74	; 0x4a
 800c736:	f7fb fd3d 	bl	80081b4 <pbuf_alloc>
 800c73a:	4607      	mov	r7, r0
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d035      	beq.n	800c7ac <tcp_write+0x35c>
      pbuf_cat(p/*header*/, p2/*data*/);
 800c740:	4649      	mov	r1, r9
 800c742:	f7fb fe59 	bl	80083f8 <pbuf_cat>
    queuelen += pbuf_clen(p);
 800c746:	4638      	mov	r0, r7
 800c748:	f7fb fe36 	bl	80083b8 <pbuf_clen>
 800c74c:	4406      	add	r6, r0
 800c74e:	b2b6      	uxth	r6, r6
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c750:	2e09      	cmp	r6, #9
 800c752:	d831      	bhi.n	800c7b8 <tcp_write+0x368>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c754:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 800c758:	2200      	movs	r2, #0
 800c75a:	9200      	str	r2, [sp, #0]
 800c75c:	4423      	add	r3, r4
 800c75e:	4639      	mov	r1, r7
 800c760:	4640      	mov	r0, r8
 800c762:	f7ff fc6f 	bl	800c044 <tcp_create_segment>
 800c766:	4607      	mov	r7, r0
 800c768:	2800      	cmp	r0, #0
 800c76a:	f000 814a 	beq.w	800ca02 <tcp_write+0x5b2>
    seg->oversize_left = oversize;
 800c76e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800c772:	8143      	strh	r3, [r0, #10]
    if (queue == NULL) {
 800c774:	9b05      	ldr	r3, [sp, #20]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d052      	beq.n	800c820 <tcp_write+0x3d0>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c77a:	9b04      	ldr	r3, [sp, #16]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d047      	beq.n	800c810 <tcp_write+0x3c0>
      prev_seg->next = seg;
 800c780:	9b04      	ldr	r3, [sp, #16]
 800c782:	601f      	str	r7, [r3, #0]
    pos += seglen;
 800c784:	442c      	add	r4, r5
 800c786:	b2a4      	uxth	r4, r4
    prev_seg = seg;
 800c788:	9704      	str	r7, [sp, #16]
  while (pos < len) {
 800c78a:	4554      	cmp	r4, sl
 800c78c:	d25c      	bcs.n	800c848 <tcp_write+0x3f8>
    u16_t left = len - pos;
 800c78e:	ebaa 0504 	sub.w	r5, sl, r4
 800c792:	b2ad      	uxth	r5, r5
    u16_t seglen = LWIP_MIN(left, max_len);
 800c794:	455d      	cmp	r5, fp
 800c796:	bf28      	it	cs
 800c798:	465d      	movcs	r5, fp
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c79a:	9b06      	ldr	r3, [sp, #24]
 800c79c:	f013 0f01 	tst.w	r3, #1
 800c7a0:	d18c      	bne.n	800c6bc <tcp_write+0x26c>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c7a2:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d0b5      	beq.n	800c716 <tcp_write+0x2c6>
 800c7aa:	e7ad      	b.n	800c708 <tcp_write+0x2b8>
 800c7ac:	4648      	mov	r0, r9
 800c7ae:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
        pbuf_free(p2);
 800c7b2:	f7fb fc9d 	bl	80080f0 <pbuf_free>
        goto memerr;
 800c7b6:	e004      	b.n	800c7c2 <tcp_write+0x372>
 800c7b8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
      pbuf_free(p);
 800c7bc:	4638      	mov	r0, r7
 800c7be:	f7fb fc97 	bl	80080f0 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c7c2:	f8b8 3042 	ldrh.w	r3, [r8, #66]	; 0x42
 800c7c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7ca:	f8a8 3042 	strh.w	r3, [r8, #66]	; 0x42
  if (concat_p != NULL) {
 800c7ce:	f1b9 0f00 	cmp.w	r9, #0
 800c7d2:	d002      	beq.n	800c7da <tcp_write+0x38a>
    pbuf_free(concat_p);
 800c7d4:	4648      	mov	r0, r9
 800c7d6:	f7fb fc8b 	bl	80080f0 <pbuf_free>
  if (queue != NULL) {
 800c7da:	9b05      	ldr	r3, [sp, #20]
 800c7dc:	b113      	cbz	r3, 800c7e4 <tcp_write+0x394>
    tcp_segs_free(queue);
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7fc fbf9 	bl	8008fd6 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800c7e4:	f8b8 308e 	ldrh.w	r3, [r8, #142]	; 0x8e
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f000 8118 	beq.w	800ca1e <tcp_write+0x5ce>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c7ee:	f8d8 3098 	ldr.w	r3, [r8, #152]	; 0x98
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f040 8117 	bne.w	800ca26 <tcp_write+0x5d6>
 800c7f8:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f000 8103 	beq.w	800ca08 <tcp_write+0x5b8>
  return ERR_MEM;
 800c802:	f04f 33ff 	mov.w	r3, #4294967295
 800c806:	9309      	str	r3, [sp, #36]	; 0x24
}
 800c808:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c80a:	b011      	add	sp, #68	; 0x44
 800c80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c810:	4b16      	ldr	r3, [pc, #88]	; (800c86c <tcp_write+0x41c>)
 800c812:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c816:	4921      	ldr	r1, [pc, #132]	; (800c89c <tcp_write+0x44c>)
 800c818:	4816      	ldr	r0, [pc, #88]	; (800c874 <tcp_write+0x424>)
 800c81a:	f009 f8b9 	bl	8015990 <iprintf>
 800c81e:	e7af      	b.n	800c780 <tcp_write+0x330>
      queue = seg;
 800c820:	9005      	str	r0, [sp, #20]
 800c822:	e7af      	b.n	800c784 <tcp_write+0x334>
 800c824:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  u16_t extendlen = 0;
 800c826:	2300      	movs	r3, #0
 800c828:	930d      	str	r3, [sp, #52]	; 0x34
  u16_t oversize_add = 0;
 800c82a:	930b      	str	r3, [sp, #44]	; 0x2c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c82c:	2300      	movs	r3, #0
 800c82e:	9305      	str	r3, [sp, #20]
 800c830:	9304      	str	r3, [sp, #16]
 800c832:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c836:	e7a8      	b.n	800c78a <tcp_write+0x33a>
  u16_t extendlen = 0;
 800c838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c83a:	930d      	str	r3, [sp, #52]	; 0x34
 800c83c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c83e:	e7f5      	b.n	800c82c <tcp_write+0x3dc>
  u16_t oversize_add = 0;
 800c840:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c842:	930b      	str	r3, [sp, #44]	; 0x2c
 800c844:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c846:	e7f1      	b.n	800c82c <tcp_write+0x3dc>
 800c848:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 800c84c:	9a08      	ldr	r2, [sp, #32]
 800c84e:	b122      	cbz	r2, 800c85a <tcp_write+0x40a>
 800c850:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c852:	b111      	cbz	r1, 800c85a <tcp_write+0x40a>
    last_unsent->oversize_left += oversize_add;
 800c854:	8953      	ldrh	r3, [r2, #10]
 800c856:	4419      	add	r1, r3
 800c858:	8151      	strh	r1, [r2, #10]
  if (oversize_used > 0) {
 800c85a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c85c:	2d00      	cmp	r5, #0
 800c85e:	d03f      	beq.n	800c8e0 <tcp_write+0x490>
    for (p = last_unsent->p; p; p = p->next) {
 800c860:	9b08      	ldr	r3, [sp, #32]
 800c862:	685c      	ldr	r4, [r3, #4]
 800c864:	f8dd b01c 	ldr.w	fp, [sp, #28]
 800c868:	e01b      	b.n	800c8a2 <tcp_write+0x452>
 800c86a:	bf00      	nop
 800c86c:	08019118 	.word	0x08019118
 800c870:	080193dc 	.word	0x080193dc
 800c874:	08016bb4 	.word	0x08016bb4
 800c878:	080193f4 	.word	0x080193f4
 800c87c:	08019428 	.word	0x08019428
 800c880:	08019440 	.word	0x08019440
 800c884:	08019470 	.word	0x08019470
 800c888:	08019490 	.word	0x08019490
 800c88c:	080194b0 	.word	0x080194b0
 800c890:	080194dc 	.word	0x080194dc
 800c894:	0801950c 	.word	0x0801950c
 800c898:	0801954c 	.word	0x0801954c
 800c89c:	0801955c 	.word	0x0801955c
 800c8a0:	6824      	ldr	r4, [r4, #0]
 800c8a2:	b184      	cbz	r4, 800c8c6 <tcp_write+0x476>
      p->tot_len += oversize_used;
 800c8a4:	8923      	ldrh	r3, [r4, #8]
 800c8a6:	442b      	add	r3, r5
 800c8a8:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800c8aa:	6823      	ldr	r3, [r4, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d1f7      	bne.n	800c8a0 <tcp_write+0x450>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c8b0:	6860      	ldr	r0, [r4, #4]
 800c8b2:	8963      	ldrh	r3, [r4, #10]
 800c8b4:	462a      	mov	r2, r5
 800c8b6:	4659      	mov	r1, fp
 800c8b8:	4418      	add	r0, r3
 800c8ba:	f009 f839 	bl	8015930 <memcpy>
        p->len += oversize_used;
 800c8be:	8963      	ldrh	r3, [r4, #10]
 800c8c0:	442b      	add	r3, r5
 800c8c2:	8163      	strh	r3, [r4, #10]
 800c8c4:	e7ec      	b.n	800c8a0 <tcp_write+0x450>
    last_unsent->len += oversize_used;
 800c8c6:	9a08      	ldr	r2, [sp, #32]
 800c8c8:	8913      	ldrh	r3, [r2, #8]
 800c8ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c8cc:	4403      	add	r3, r0
 800c8ce:	8113      	strh	r3, [r2, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 800c8d0:	8953      	ldrh	r3, [r2, #10]
 800c8d2:	4283      	cmp	r3, r0
 800c8d4:	d345      	bcc.n	800c962 <tcp_write+0x512>
    last_unsent->oversize_left -= oversize_used;
 800c8d6:	9a08      	ldr	r2, [sp, #32]
 800c8d8:	8953      	ldrh	r3, [r2, #10]
 800c8da:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c8dc:	1a5b      	subs	r3, r3, r1
 800c8de:	8153      	strh	r3, [r2, #10]
  pcb->unsent_oversize = oversize;
 800c8e0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800c8e4:	f8a8 3090 	strh.w	r3, [r8, #144]	; 0x90
  if (concat_p != NULL) {
 800c8e8:	f1b9 0f00 	cmp.w	r9, #0
 800c8ec:	d049      	beq.n	800c982 <tcp_write+0x532>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c8ee:	9b08      	ldr	r3, [sp, #32]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d03e      	beq.n	800c972 <tcp_write+0x522>
    pbuf_cat(last_unsent->p, concat_p);
 800c8f4:	4649      	mov	r1, r9
 800c8f6:	9c08      	ldr	r4, [sp, #32]
 800c8f8:	6860      	ldr	r0, [r4, #4]
 800c8fa:	f7fb fd7d 	bl	80083f8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c8fe:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800c902:	8922      	ldrh	r2, [r4, #8]
 800c904:	4413      	add	r3, r2
 800c906:	8123      	strh	r3, [r4, #8]
  if (last_unsent == NULL) {
 800c908:	9b08      	ldr	r3, [sp, #32]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d05f      	beq.n	800c9ce <tcp_write+0x57e>
    last_unsent->next = queue;
 800c90e:	9b08      	ldr	r3, [sp, #32]
 800c910:	461a      	mov	r2, r3
 800c912:	9b05      	ldr	r3, [sp, #20]
 800c914:	6013      	str	r3, [r2, #0]
  pcb->snd_lbb += len;
 800c916:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 800c91a:	4453      	add	r3, sl
 800c91c:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
  pcb->snd_buf -= len;
 800c920:	f8b8 308c 	ldrh.w	r3, [r8, #140]	; 0x8c
 800c924:	eba3 0a0a 	sub.w	sl, r3, sl
 800c928:	f8a8 a08c 	strh.w	sl, [r8, #140]	; 0x8c
  pcb->snd_queuelen = queuelen;
 800c92c:	f8a8 608e 	strh.w	r6, [r8, #142]	; 0x8e
  if (pcb->snd_queuelen != 0) {
 800c930:	b11e      	cbz	r6, 800c93a <tcp_write+0x4ea>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c932:	f8d8 3098 	ldr.w	r3, [r8, #152]	; 0x98
 800c936:	2b00      	cmp	r3, #0
 800c938:	d04d      	beq.n	800c9d6 <tcp_write+0x586>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c93a:	2f00      	cmp	r7, #0
 800c93c:	f43f af64 	beq.w	800c808 <tcp_write+0x3b8>
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	2b00      	cmp	r3, #0
 800c944:	f43f af60 	beq.w	800c808 <tcp_write+0x3b8>
 800c948:	9a06      	ldr	r2, [sp, #24]
 800c94a:	f012 0f02 	tst.w	r2, #2
 800c94e:	f47f af5b 	bne.w	800c808 <tcp_write+0x3b8>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c952:	899c      	ldrh	r4, [r3, #12]
 800c954:	2008      	movs	r0, #8
 800c956:	f7fa f891 	bl	8006a7c <lwip_htons>
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	4304      	orrs	r4, r0
 800c95e:	819c      	strh	r4, [r3, #12]
 800c960:	e752      	b.n	800c808 <tcp_write+0x3b8>
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 800c962:	4b33      	ldr	r3, [pc, #204]	; (800ca30 <tcp_write+0x5e0>)
 800c964:	f240 22d3 	movw	r2, #723	; 0x2d3
 800c968:	4932      	ldr	r1, [pc, #200]	; (800ca34 <tcp_write+0x5e4>)
 800c96a:	4833      	ldr	r0, [pc, #204]	; (800ca38 <tcp_write+0x5e8>)
 800c96c:	f009 f810 	bl	8015990 <iprintf>
 800c970:	e7b1      	b.n	800c8d6 <tcp_write+0x486>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c972:	4b2f      	ldr	r3, [pc, #188]	; (800ca30 <tcp_write+0x5e0>)
 800c974:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800c978:	4930      	ldr	r1, [pc, #192]	; (800ca3c <tcp_write+0x5ec>)
 800c97a:	482f      	ldr	r0, [pc, #188]	; (800ca38 <tcp_write+0x5e8>)
 800c97c:	f009 f808 	bl	8015990 <iprintf>
 800c980:	e7b8      	b.n	800c8f4 <tcp_write+0x4a4>
  } else if (extendlen > 0) {
 800c982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c984:	2b00      	cmp	r3, #0
 800c986:	d0bf      	beq.n	800c908 <tcp_write+0x4b8>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c988:	9b08      	ldr	r3, [sp, #32]
 800c98a:	b12b      	cbz	r3, 800c998 <tcp_write+0x548>
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	b11b      	cbz	r3, 800c998 <tcp_write+0x548>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c990:	9b08      	ldr	r3, [sp, #32]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c996:	e00b      	b.n	800c9b0 <tcp_write+0x560>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c998:	4b25      	ldr	r3, [pc, #148]	; (800ca30 <tcp_write+0x5e0>)
 800c99a:	f240 22e6 	movw	r2, #742	; 0x2e6
 800c99e:	4928      	ldr	r1, [pc, #160]	; (800ca40 <tcp_write+0x5f0>)
 800c9a0:	4825      	ldr	r0, [pc, #148]	; (800ca38 <tcp_write+0x5e8>)
 800c9a2:	f008 fff5 	bl	8015990 <iprintf>
 800c9a6:	e7f3      	b.n	800c990 <tcp_write+0x540>
      p->tot_len += extendlen;
 800c9a8:	891a      	ldrh	r2, [r3, #8]
 800c9aa:	4402      	add	r2, r0
 800c9ac:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c9ae:	460b      	mov	r3, r1
 800c9b0:	6819      	ldr	r1, [r3, #0]
 800c9b2:	2900      	cmp	r1, #0
 800c9b4:	d1f8      	bne.n	800c9a8 <tcp_write+0x558>
    p->tot_len += extendlen;
 800c9b6:	891a      	ldrh	r2, [r3, #8]
 800c9b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c9ba:	440a      	add	r2, r1
 800c9bc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800c9be:	895a      	ldrh	r2, [r3, #10]
 800c9c0:	440a      	add	r2, r1
 800c9c2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800c9c4:	9a08      	ldr	r2, [sp, #32]
 800c9c6:	8913      	ldrh	r3, [r2, #8]
 800c9c8:	440b      	add	r3, r1
 800c9ca:	8113      	strh	r3, [r2, #8]
 800c9cc:	e79c      	b.n	800c908 <tcp_write+0x4b8>
    pcb->unsent = queue;
 800c9ce:	9b05      	ldr	r3, [sp, #20]
 800c9d0:	f8c8 3094 	str.w	r3, [r8, #148]	; 0x94
 800c9d4:	e79f      	b.n	800c916 <tcp_write+0x4c6>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c9d6:	f8d8 3094 	ldr.w	r3, [r8, #148]	; 0x94
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1ad      	bne.n	800c93a <tcp_write+0x4ea>
 800c9de:	4b14      	ldr	r3, [pc, #80]	; (800ca30 <tcp_write+0x5e0>)
 800c9e0:	f240 3212 	movw	r2, #786	; 0x312
 800c9e4:	4917      	ldr	r1, [pc, #92]	; (800ca44 <tcp_write+0x5f4>)
 800c9e6:	4814      	ldr	r0, [pc, #80]	; (800ca38 <tcp_write+0x5e8>)
 800c9e8:	f008 ffd2 	bl	8015990 <iprintf>
 800c9ec:	e7a5      	b.n	800c93a <tcp_write+0x4ea>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c9ee:	9005      	str	r0, [sp, #20]
 800c9f0:	e6e7      	b.n	800c7c2 <tcp_write+0x372>
 800c9f2:	9005      	str	r0, [sp, #20]
 800c9f4:	e6e5      	b.n	800c7c2 <tcp_write+0x372>
 800c9f6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800c9fa:	e6e2      	b.n	800c7c2 <tcp_write+0x372>
 800c9fc:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800ca00:	e6df      	b.n	800c7c2 <tcp_write+0x372>
 800ca02:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800ca06:	e6dc      	b.n	800c7c2 <tcp_write+0x372>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800ca08:	4b09      	ldr	r3, [pc, #36]	; (800ca30 <tcp_write+0x5e0>)
 800ca0a:	f240 3227 	movw	r2, #807	; 0x327
 800ca0e:	490d      	ldr	r1, [pc, #52]	; (800ca44 <tcp_write+0x5f4>)
 800ca10:	4809      	ldr	r0, [pc, #36]	; (800ca38 <tcp_write+0x5e8>)
 800ca12:	f008 ffbd 	bl	8015990 <iprintf>
  return ERR_MEM;
 800ca16:	f04f 33ff 	mov.w	r3, #4294967295
 800ca1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ca1c:	e6f4      	b.n	800c808 <tcp_write+0x3b8>
 800ca1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca22:	9309      	str	r3, [sp, #36]	; 0x24
 800ca24:	e6f0      	b.n	800c808 <tcp_write+0x3b8>
 800ca26:	f04f 33ff 	mov.w	r3, #4294967295
 800ca2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ca2c:	e6ec      	b.n	800c808 <tcp_write+0x3b8>
 800ca2e:	bf00      	nop
 800ca30:	08019118 	.word	0x08019118
 800ca34:	08019570 	.word	0x08019570
 800ca38:	08016bb4 	.word	0x08016bb4
 800ca3c:	0801959c 	.word	0x0801959c
 800ca40:	080195d4 	.word	0x080195d4
 800ca44:	0801960c 	.word	0x0801960c

0800ca48 <tcp_split_unsent_seg>:
{
 800ca48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca4c:	b083      	sub	sp, #12
 800ca4e:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ca50:	4607      	mov	r7, r0
 800ca52:	2800      	cmp	r0, #0
 800ca54:	d03f      	beq.n	800cad6 <tcp_split_unsent_seg+0x8e>
  useg = pcb->unsent;
 800ca56:	f8d7 5094 	ldr.w	r5, [r7, #148]	; 0x94
  if (useg == NULL) {
 800ca5a:	2d00      	cmp	r5, #0
 800ca5c:	f000 80be 	beq.w	800cbdc <tcp_split_unsent_seg+0x194>
  if (split == 0) {
 800ca60:	2c00      	cmp	r4, #0
 800ca62:	d040      	beq.n	800cae6 <tcp_split_unsent_seg+0x9e>
  if (useg->len <= split) {
 800ca64:	892b      	ldrh	r3, [r5, #8]
 800ca66:	42a3      	cmp	r3, r4
 800ca68:	f240 80bb 	bls.w	800cbe2 <tcp_split_unsent_seg+0x19a>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ca6c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800ca70:	42a3      	cmp	r3, r4
 800ca72:	d342      	bcc.n	800cafa <tcp_split_unsent_seg+0xb2>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ca74:	892b      	ldrh	r3, [r5, #8]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d047      	beq.n	800cb0a <tcp_split_unsent_seg+0xc2>
  optflags = useg->flags;
 800ca7a:	f895 900c 	ldrb.w	r9, [r5, #12]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ca7e:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 800ca82:	f00b 0b04 	and.w	fp, fp, #4
  remainder = useg->len - split;
 800ca86:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800ca8a:	ebaa 0604 	sub.w	r6, sl, r4
 800ca8e:	b2b6      	uxth	r6, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ca90:	eb06 010b 	add.w	r1, r6, fp
 800ca94:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ca98:	b289      	uxth	r1, r1
 800ca9a:	204a      	movs	r0, #74	; 0x4a
 800ca9c:	f7fb fb8a 	bl	80081b4 <pbuf_alloc>
  if (p == NULL) {
 800caa0:	4680      	mov	r8, r0
 800caa2:	b170      	cbz	r0, 800cac2 <tcp_split_unsent_seg+0x7a>
  offset = useg->p->tot_len - useg->len + split;
 800caa4:	6868      	ldr	r0, [r5, #4]
 800caa6:	8903      	ldrh	r3, [r0, #8]
 800caa8:	892a      	ldrh	r2, [r5, #8]
 800caaa:	1a9b      	subs	r3, r3, r2
 800caac:	fa14 f383 	uxtah	r3, r4, r3
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cab0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	4632      	mov	r2, r6
 800cab8:	4459      	add	r1, fp
 800caba:	f7fb fd6f 	bl	800859c <pbuf_copy_partial>
 800cabe:	42b0      	cmp	r0, r6
 800cac0:	d02b      	beq.n	800cb1a <tcp_split_unsent_seg+0xd2>
  if (p != NULL) {
 800cac2:	f1b8 0f00 	cmp.w	r8, #0
 800cac6:	f000 8090 	beq.w	800cbea <tcp_split_unsent_seg+0x1a2>
    pbuf_free(p);
 800caca:	4640      	mov	r0, r8
 800cacc:	f7fb fb10 	bl	80080f0 <pbuf_free>
  return ERR_MEM;
 800cad0:	f04f 30ff 	mov.w	r0, #4294967295
 800cad4:	e086      	b.n	800cbe4 <tcp_split_unsent_seg+0x19c>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800cad6:	4b46      	ldr	r3, [pc, #280]	; (800cbf0 <tcp_split_unsent_seg+0x1a8>)
 800cad8:	f240 324b 	movw	r2, #843	; 0x34b
 800cadc:	4945      	ldr	r1, [pc, #276]	; (800cbf4 <tcp_split_unsent_seg+0x1ac>)
 800cade:	4846      	ldr	r0, [pc, #280]	; (800cbf8 <tcp_split_unsent_seg+0x1b0>)
 800cae0:	f008 ff56 	bl	8015990 <iprintf>
 800cae4:	e7b7      	b.n	800ca56 <tcp_split_unsent_seg+0xe>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800cae6:	4b42      	ldr	r3, [pc, #264]	; (800cbf0 <tcp_split_unsent_seg+0x1a8>)
 800cae8:	f240 3253 	movw	r2, #851	; 0x353
 800caec:	4943      	ldr	r1, [pc, #268]	; (800cbfc <tcp_split_unsent_seg+0x1b4>)
 800caee:	4842      	ldr	r0, [pc, #264]	; (800cbf8 <tcp_split_unsent_seg+0x1b0>)
 800caf0:	f008 ff4e 	bl	8015990 <iprintf>
    return ERR_VAL;
 800caf4:	f06f 0005 	mvn.w	r0, #5
 800caf8:	e074      	b.n	800cbe4 <tcp_split_unsent_seg+0x19c>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800cafa:	4b3d      	ldr	r3, [pc, #244]	; (800cbf0 <tcp_split_unsent_seg+0x1a8>)
 800cafc:	f240 325b 	movw	r2, #859	; 0x35b
 800cb00:	493f      	ldr	r1, [pc, #252]	; (800cc00 <tcp_split_unsent_seg+0x1b8>)
 800cb02:	483d      	ldr	r0, [pc, #244]	; (800cbf8 <tcp_split_unsent_seg+0x1b0>)
 800cb04:	f008 ff44 	bl	8015990 <iprintf>
 800cb08:	e7b4      	b.n	800ca74 <tcp_split_unsent_seg+0x2c>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800cb0a:	4b39      	ldr	r3, [pc, #228]	; (800cbf0 <tcp_split_unsent_seg+0x1a8>)
 800cb0c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800cb10:	493c      	ldr	r1, [pc, #240]	; (800cc04 <tcp_split_unsent_seg+0x1bc>)
 800cb12:	4839      	ldr	r0, [pc, #228]	; (800cbf8 <tcp_split_unsent_seg+0x1b0>)
 800cb14:	f008 ff3c 	bl	8015990 <iprintf>
 800cb18:	e7af      	b.n	800ca7a <tcp_split_unsent_seg+0x32>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cb1a:	692b      	ldr	r3, [r5, #16]
 800cb1c:	8998      	ldrh	r0, [r3, #12]
 800cb1e:	f7f9 ffad 	bl	8006a7c <lwip_htons>
 800cb22:	b2c3      	uxtb	r3, r0
 800cb24:	f000 063f 	and.w	r6, r0, #63	; 0x3f
  if (split_flags & TCP_PSH) {
 800cb28:	f010 0b08 	ands.w	fp, r0, #8
 800cb2c:	d003      	beq.n	800cb36 <tcp_split_unsent_seg+0xee>
    split_flags &= ~TCP_PSH;
 800cb2e:	f003 0637 	and.w	r6, r3, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800cb32:	f04f 0b08 	mov.w	fp, #8
  if (split_flags & TCP_FIN) {
 800cb36:	f016 0f01 	tst.w	r6, #1
 800cb3a:	d003      	beq.n	800cb44 <tcp_split_unsent_seg+0xfc>
    split_flags &= ~TCP_FIN;
 800cb3c:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 800cb40:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cb44:	692b      	ldr	r3, [r5, #16]
 800cb46:	6858      	ldr	r0, [r3, #4]
 800cb48:	f7f9 ff9d 	bl	8006a86 <lwip_htonl>
 800cb4c:	f8cd 9000 	str.w	r9, [sp]
 800cb50:	1823      	adds	r3, r4, r0
 800cb52:	465a      	mov	r2, fp
 800cb54:	4641      	mov	r1, r8
 800cb56:	4638      	mov	r0, r7
 800cb58:	f7ff fa74 	bl	800c044 <tcp_create_segment>
  if (seg == NULL) {
 800cb5c:	4681      	mov	r9, r0
 800cb5e:	2800      	cmp	r0, #0
 800cb60:	d0af      	beq.n	800cac2 <tcp_split_unsent_seg+0x7a>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800cb62:	6868      	ldr	r0, [r5, #4]
 800cb64:	f7fb fc28 	bl	80083b8 <pbuf_clen>
 800cb68:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800cb6c:	1a1b      	subs	r3, r3, r0
 800cb6e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800cb72:	6868      	ldr	r0, [r5, #4]
 800cb74:	8901      	ldrh	r1, [r0, #8]
 800cb76:	eba4 040a 	sub.w	r4, r4, sl
 800cb7a:	b2a4      	uxth	r4, r4
 800cb7c:	4421      	add	r1, r4
 800cb7e:	b289      	uxth	r1, r1
 800cb80:	f7fb fbc6 	bl	8008310 <pbuf_realloc>
  useg->len -= remainder;
 800cb84:	892b      	ldrh	r3, [r5, #8]
 800cb86:	441c      	add	r4, r3
 800cb88:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800cb8a:	692b      	ldr	r3, [r5, #16]
 800cb8c:	899c      	ldrh	r4, [r3, #12]
 800cb8e:	4630      	mov	r0, r6
 800cb90:	f7f9 ff74 	bl	8006a7c <lwip_htons>
 800cb94:	692b      	ldr	r3, [r5, #16]
 800cb96:	4304      	orrs	r4, r0
 800cb98:	819c      	strh	r4, [r3, #12]
  useg->oversize_left = 0;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	816b      	strh	r3, [r5, #10]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800cb9e:	6868      	ldr	r0, [r5, #4]
 800cba0:	f7fb fc0a 	bl	80083b8 <pbuf_clen>
 800cba4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800cba8:	4418      	add	r0, r3
 800cbaa:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cbae:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800cbb2:	f7fb fc01 	bl	80083b8 <pbuf_clen>
 800cbb6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800cbba:	4418      	add	r0, r3
 800cbbc:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
  seg->next = useg->next;
 800cbc0:	682b      	ldr	r3, [r5, #0]
 800cbc2:	f8c9 3000 	str.w	r3, [r9]
  useg->next = seg;
 800cbc6:	f8c5 9000 	str.w	r9, [r5]
  if (seg->next == NULL) {
 800cbca:	f8d9 3000 	ldr.w	r3, [r9]
 800cbce:	b10b      	cbz	r3, 800cbd4 <tcp_split_unsent_seg+0x18c>
  return ERR_OK;
 800cbd0:	2000      	movs	r0, #0
 800cbd2:	e007      	b.n	800cbe4 <tcp_split_unsent_seg+0x19c>
    pcb->unsent_oversize = 0;
 800cbd4:	2000      	movs	r0, #0
 800cbd6:	f8a7 0090 	strh.w	r0, [r7, #144]	; 0x90
 800cbda:	e003      	b.n	800cbe4 <tcp_split_unsent_seg+0x19c>
    return ERR_MEM;
 800cbdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe0:	e000      	b.n	800cbe4 <tcp_split_unsent_seg+0x19c>
    return ERR_OK;
 800cbe2:	2000      	movs	r0, #0
}
 800cbe4:	b003      	add	sp, #12
 800cbe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 800cbea:	f04f 30ff 	mov.w	r0, #4294967295
 800cbee:	e7f9      	b.n	800cbe4 <tcp_split_unsent_seg+0x19c>
 800cbf0:	08019118 	.word	0x08019118
 800cbf4:	0801962c 	.word	0x0801962c
 800cbf8:	08016bb4 	.word	0x08016bb4
 800cbfc:	08019650 	.word	0x08019650
 800cc00:	08019674 	.word	0x08019674
 800cc04:	08019684 	.word	0x08019684

0800cc08 <tcp_enqueue_flags>:
{
 800cc08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc0c:	b083      	sub	sp, #12
 800cc0e:	4604      	mov	r4, r0
 800cc10:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cc12:	f011 0703 	ands.w	r7, r1, #3
 800cc16:	d055      	beq.n	800ccc4 <tcp_enqueue_flags+0xbc>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800cc18:	2c00      	cmp	r4, #0
 800cc1a:	d05b      	beq.n	800ccd4 <tcp_enqueue_flags+0xcc>
  if (flags & TCP_SYN) {
 800cc1c:	f015 0802 	ands.w	r8, r5, #2
 800cc20:	d001      	beq.n	800cc26 <tcp_enqueue_flags+0x1e>
    optflags = TF_SEG_OPTS_MSS;
 800cc22:	f04f 0801 	mov.w	r8, #1
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cc26:	ea4f 0688 	mov.w	r6, r8, lsl #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cc2a:	f006 0604 	and.w	r6, r6, #4
 800cc2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cc32:	4631      	mov	r1, r6
 800cc34:	204a      	movs	r0, #74	; 0x4a
 800cc36:	f7fb fabd 	bl	80081b4 <pbuf_alloc>
 800cc3a:	4681      	mov	r9, r0
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	d051      	beq.n	800cce4 <tcp_enqueue_flags+0xdc>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cc40:	8943      	ldrh	r3, [r0, #10]
 800cc42:	429e      	cmp	r6, r3
 800cc44:	d857      	bhi.n	800ccf6 <tcp_enqueue_flags+0xee>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800cc46:	f8cd 8000 	str.w	r8, [sp]
 800cc4a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800cc4e:	462a      	mov	r2, r5
 800cc50:	4649      	mov	r1, r9
 800cc52:	4620      	mov	r0, r4
 800cc54:	f7ff f9f6 	bl	800c044 <tcp_create_segment>
 800cc58:	4606      	mov	r6, r0
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	d053      	beq.n	800cd06 <tcp_enqueue_flags+0xfe>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800cc5e:	6903      	ldr	r3, [r0, #16]
 800cc60:	f013 0f03 	tst.w	r3, #3
 800cc64:	d158      	bne.n	800cd18 <tcp_enqueue_flags+0x110>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800cc66:	8933      	ldrh	r3, [r6, #8]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d15d      	bne.n	800cd28 <tcp_enqueue_flags+0x120>
  if (pcb->unsent == NULL) {
 800cc6c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d061      	beq.n	800cd38 <tcp_enqueue_flags+0x130>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800cc74:	461a      	mov	r2, r3
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d1fb      	bne.n	800cc74 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 800cc7c:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800cc84:	b127      	cbz	r7, 800cc90 <tcp_enqueue_flags+0x88>
    pcb->snd_lbb++;
 800cc86:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (flags & TCP_FIN) {
 800cc90:	f015 0f01 	tst.w	r5, #1
 800cc94:	d005      	beq.n	800cca2 <tcp_enqueue_flags+0x9a>
    tcp_set_flags(pcb, TF_FIN);
 800cc96:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800cc9a:	f043 0320 	orr.w	r3, r3, #32
 800cc9e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cca2:	6870      	ldr	r0, [r6, #4]
 800cca4:	f7fb fb88 	bl	80083b8 <pbuf_clen>
 800cca8:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 800ccac:	4418      	add	r0, r3
 800ccae:	b280      	uxth	r0, r0
 800ccb0:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
  if (pcb->snd_queuelen != 0) {
 800ccb4:	2800      	cmp	r0, #0
 800ccb6:	d050      	beq.n	800cd5a <tcp_enqueue_flags+0x152>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ccb8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d03e      	beq.n	800cd3e <tcp_enqueue_flags+0x136>
  return ERR_OK;
 800ccc0:	2000      	movs	r0, #0
 800ccc2:	e04b      	b.n	800cd5c <tcp_enqueue_flags+0x154>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ccc4:	4b27      	ldr	r3, [pc, #156]	; (800cd64 <tcp_enqueue_flags+0x15c>)
 800ccc6:	f240 4211 	movw	r2, #1041	; 0x411
 800ccca:	4927      	ldr	r1, [pc, #156]	; (800cd68 <tcp_enqueue_flags+0x160>)
 800cccc:	4827      	ldr	r0, [pc, #156]	; (800cd6c <tcp_enqueue_flags+0x164>)
 800ccce:	f008 fe5f 	bl	8015990 <iprintf>
 800ccd2:	e7a1      	b.n	800cc18 <tcp_enqueue_flags+0x10>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ccd4:	4b23      	ldr	r3, [pc, #140]	; (800cd64 <tcp_enqueue_flags+0x15c>)
 800ccd6:	f240 4213 	movw	r2, #1043	; 0x413
 800ccda:	4925      	ldr	r1, [pc, #148]	; (800cd70 <tcp_enqueue_flags+0x168>)
 800ccdc:	4823      	ldr	r0, [pc, #140]	; (800cd6c <tcp_enqueue_flags+0x164>)
 800ccde:	f008 fe57 	bl	8015990 <iprintf>
 800cce2:	e79b      	b.n	800cc1c <tcp_enqueue_flags+0x14>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cce4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800cce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccec:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    return ERR_MEM;
 800ccf0:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf4:	e032      	b.n	800cd5c <tcp_enqueue_flags+0x154>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ccf6:	4b1b      	ldr	r3, [pc, #108]	; (800cd64 <tcp_enqueue_flags+0x15c>)
 800ccf8:	f240 4239 	movw	r2, #1081	; 0x439
 800ccfc:	491d      	ldr	r1, [pc, #116]	; (800cd74 <tcp_enqueue_flags+0x16c>)
 800ccfe:	481b      	ldr	r0, [pc, #108]	; (800cd6c <tcp_enqueue_flags+0x164>)
 800cd00:	f008 fe46 	bl	8015990 <iprintf>
 800cd04:	e79f      	b.n	800cc46 <tcp_enqueue_flags+0x3e>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cd06:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800cd0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd0e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    return ERR_MEM;
 800cd12:	f04f 30ff 	mov.w	r0, #4294967295
 800cd16:	e021      	b.n	800cd5c <tcp_enqueue_flags+0x154>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800cd18:	4b12      	ldr	r3, [pc, #72]	; (800cd64 <tcp_enqueue_flags+0x15c>)
 800cd1a:	f240 4242 	movw	r2, #1090	; 0x442
 800cd1e:	4916      	ldr	r1, [pc, #88]	; (800cd78 <tcp_enqueue_flags+0x170>)
 800cd20:	4812      	ldr	r0, [pc, #72]	; (800cd6c <tcp_enqueue_flags+0x164>)
 800cd22:	f008 fe35 	bl	8015990 <iprintf>
 800cd26:	e79e      	b.n	800cc66 <tcp_enqueue_flags+0x5e>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800cd28:	4b0e      	ldr	r3, [pc, #56]	; (800cd64 <tcp_enqueue_flags+0x15c>)
 800cd2a:	f240 4243 	movw	r2, #1091	; 0x443
 800cd2e:	4913      	ldr	r1, [pc, #76]	; (800cd7c <tcp_enqueue_flags+0x174>)
 800cd30:	480e      	ldr	r0, [pc, #56]	; (800cd6c <tcp_enqueue_flags+0x164>)
 800cd32:	f008 fe2d 	bl	8015990 <iprintf>
 800cd36:	e799      	b.n	800cc6c <tcp_enqueue_flags+0x64>
    pcb->unsent = seg;
 800cd38:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
 800cd3c:	e79f      	b.n	800cc7e <tcp_enqueue_flags+0x76>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800cd3e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800cd42:	b10b      	cbz	r3, 800cd48 <tcp_enqueue_flags+0x140>
  return ERR_OK;
 800cd44:	2000      	movs	r0, #0
 800cd46:	e009      	b.n	800cd5c <tcp_enqueue_flags+0x154>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800cd48:	4b06      	ldr	r3, [pc, #24]	; (800cd64 <tcp_enqueue_flags+0x15c>)
 800cd4a:	f240 4265 	movw	r2, #1125	; 0x465
 800cd4e:	490c      	ldr	r1, [pc, #48]	; (800cd80 <tcp_enqueue_flags+0x178>)
 800cd50:	4806      	ldr	r0, [pc, #24]	; (800cd6c <tcp_enqueue_flags+0x164>)
 800cd52:	f008 fe1d 	bl	8015990 <iprintf>
  return ERR_OK;
 800cd56:	2000      	movs	r0, #0
 800cd58:	e000      	b.n	800cd5c <tcp_enqueue_flags+0x154>
 800cd5a:	2000      	movs	r0, #0
}
 800cd5c:	b003      	add	sp, #12
 800cd5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd62:	bf00      	nop
 800cd64:	08019118 	.word	0x08019118
 800cd68:	08019694 	.word	0x08019694
 800cd6c:	08016bb4 	.word	0x08016bb4
 800cd70:	080196ec 	.word	0x080196ec
 800cd74:	0801970c 	.word	0x0801970c
 800cd78:	08019748 	.word	0x08019748
 800cd7c:	08019760 	.word	0x08019760
 800cd80:	0801978c 	.word	0x0801978c

0800cd84 <tcp_send_fin>:
{
 800cd84:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cd86:	4605      	mov	r5, r0
 800cd88:	b190      	cbz	r0, 800cdb0 <tcp_send_fin+0x2c>
  if (pcb->unsent != NULL) {
 800cd8a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800cd8e:	b153      	cbz	r3, 800cda6 <tcp_send_fin+0x22>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cd90:	461c      	mov	r4, r3
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d1fb      	bne.n	800cd90 <tcp_send_fin+0xc>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cd98:	6923      	ldr	r3, [r4, #16]
 800cd9a:	8998      	ldrh	r0, [r3, #12]
 800cd9c:	f7f9 fe6e 	bl	8006a7c <lwip_htons>
 800cda0:	f010 0f07 	tst.w	r0, #7
 800cda4:	d00c      	beq.n	800cdc0 <tcp_send_fin+0x3c>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cda6:	2101      	movs	r1, #1
 800cda8:	4628      	mov	r0, r5
 800cdaa:	f7ff ff2d 	bl	800cc08 <tcp_enqueue_flags>
}
 800cdae:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800cdb0:	4b0b      	ldr	r3, [pc, #44]	; (800cde0 <tcp_send_fin+0x5c>)
 800cdb2:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800cdb6:	490b      	ldr	r1, [pc, #44]	; (800cde4 <tcp_send_fin+0x60>)
 800cdb8:	480b      	ldr	r0, [pc, #44]	; (800cde8 <tcp_send_fin+0x64>)
 800cdba:	f008 fde9 	bl	8015990 <iprintf>
 800cdbe:	e7e4      	b.n	800cd8a <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cdc0:	6923      	ldr	r3, [r4, #16]
 800cdc2:	899e      	ldrh	r6, [r3, #12]
 800cdc4:	2001      	movs	r0, #1
 800cdc6:	f7f9 fe59 	bl	8006a7c <lwip_htons>
 800cdca:	6923      	ldr	r3, [r4, #16]
 800cdcc:	4306      	orrs	r6, r0
 800cdce:	819e      	strh	r6, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800cdd0:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 800cdd4:	f043 0320 	orr.w	r3, r3, #32
 800cdd8:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
      return ERR_OK;
 800cddc:	2000      	movs	r0, #0
 800cdde:	e7e6      	b.n	800cdae <tcp_send_fin+0x2a>
 800cde0:	08019118 	.word	0x08019118
 800cde4:	080197b4 	.word	0x080197b4
 800cde8:	08016bb4 	.word	0x08016bb4

0800cdec <tcp_rexmit_rto_prepare>:
{
 800cdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800cdee:	4605      	mov	r5, r0
 800cdf0:	b160      	cbz	r0, 800ce0c <tcp_rexmit_rto_prepare+0x20>
  if (pcb->unacked == NULL) {
 800cdf2:	f8d5 4098 	ldr.w	r4, [r5, #152]	; 0x98
 800cdf6:	2c00      	cmp	r4, #0
 800cdf8:	d03f      	beq.n	800ce7a <tcp_rexmit_rto_prepare+0x8e>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cdfa:	6823      	ldr	r3, [r4, #0]
 800cdfc:	b173      	cbz	r3, 800ce1c <tcp_rexmit_rto_prepare+0x30>
    if (tcp_output_segment_busy(seg)) {
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f7ff f880 	bl	800bf04 <tcp_output_segment_busy>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d13b      	bne.n	800ce80 <tcp_rexmit_rto_prepare+0x94>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ce08:	6824      	ldr	r4, [r4, #0]
 800ce0a:	e7f6      	b.n	800cdfa <tcp_rexmit_rto_prepare+0xe>
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ce0c:	4b1f      	ldr	r3, [pc, #124]	; (800ce8c <tcp_rexmit_rto_prepare+0xa0>)
 800ce0e:	f240 6263 	movw	r2, #1635	; 0x663
 800ce12:	491f      	ldr	r1, [pc, #124]	; (800ce90 <tcp_rexmit_rto_prepare+0xa4>)
 800ce14:	481f      	ldr	r0, [pc, #124]	; (800ce94 <tcp_rexmit_rto_prepare+0xa8>)
 800ce16:	f008 fdbb 	bl	8015990 <iprintf>
 800ce1a:	e7ea      	b.n	800cdf2 <tcp_rexmit_rto_prepare+0x6>
  if (tcp_output_segment_busy(seg)) {
 800ce1c:	4620      	mov	r0, r4
 800ce1e:	f7ff f871 	bl	800bf04 <tcp_output_segment_busy>
 800ce22:	bb80      	cbnz	r0, 800ce86 <tcp_rexmit_rto_prepare+0x9a>
  seg->next = pcb->unsent;
 800ce24:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800ce28:	6023      	str	r3, [r4, #0]
  if (pcb->unsent == NULL) {
 800ce2a:	b303      	cbz	r3, 800ce6e <tcp_rexmit_rto_prepare+0x82>
  pcb->unsent = pcb->unacked;
 800ce2c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800ce30:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  pcb->unacked = NULL;
 800ce34:	2300      	movs	r3, #0
 800ce36:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
  tcp_set_flags(pcb, TF_RTO);
 800ce3a:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 800ce3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ce42:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ce46:	6923      	ldr	r3, [r4, #16]
 800ce48:	6858      	ldr	r0, [r3, #4]
 800ce4a:	f7f9 fe1c 	bl	8006a86 <lwip_htonl>
 800ce4e:	4606      	mov	r6, r0
 800ce50:	8927      	ldrh	r7, [r4, #8]
 800ce52:	6923      	ldr	r3, [r4, #16]
 800ce54:	8998      	ldrh	r0, [r3, #12]
 800ce56:	f7f9 fe11 	bl	8006a7c <lwip_htons>
 800ce5a:	f010 0f03 	tst.w	r0, #3
 800ce5e:	d00a      	beq.n	800ce76 <tcp_rexmit_rto_prepare+0x8a>
 800ce60:	2301      	movs	r3, #1
 800ce62:	441f      	add	r7, r3
 800ce64:	443e      	add	r6, r7
 800ce66:	676e      	str	r6, [r5, #116]	; 0x74
  pcb->rttest = 0;
 800ce68:	2000      	movs	r0, #0
 800ce6a:	65e8      	str	r0, [r5, #92]	; 0x5c
}
 800ce6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = seg->oversize_left;
 800ce6e:	8963      	ldrh	r3, [r4, #10]
 800ce70:	f8a5 3090 	strh.w	r3, [r5, #144]	; 0x90
 800ce74:	e7da      	b.n	800ce2c <tcp_rexmit_rto_prepare+0x40>
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ce76:	2300      	movs	r3, #0
 800ce78:	e7f3      	b.n	800ce62 <tcp_rexmit_rto_prepare+0x76>
    return ERR_VAL;
 800ce7a:	f06f 0005 	mvn.w	r0, #5
 800ce7e:	e7f5      	b.n	800ce6c <tcp_rexmit_rto_prepare+0x80>
      return ERR_VAL;
 800ce80:	f06f 0005 	mvn.w	r0, #5
 800ce84:	e7f2      	b.n	800ce6c <tcp_rexmit_rto_prepare+0x80>
    return ERR_VAL;
 800ce86:	f06f 0005 	mvn.w	r0, #5
 800ce8a:	e7ef      	b.n	800ce6c <tcp_rexmit_rto_prepare+0x80>
 800ce8c:	08019118 	.word	0x08019118
 800ce90:	080197d0 	.word	0x080197d0
 800ce94:	08016bb4 	.word	0x08016bb4

0800ce98 <tcp_rexmit>:
{
 800ce98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ce9a:	4607      	mov	r7, r0
 800ce9c:	b1d8      	cbz	r0, 800ced6 <tcp_rexmit+0x3e>
  if (pcb->unacked == NULL) {
 800ce9e:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 800cea2:	b396      	cbz	r6, 800cf0a <tcp_rexmit+0x72>
  if (tcp_output_segment_busy(seg)) {
 800cea4:	4630      	mov	r0, r6
 800cea6:	f7ff f82d 	bl	800bf04 <tcp_output_segment_busy>
 800ceaa:	bb88      	cbnz	r0, 800cf10 <tcp_rexmit+0x78>
  pcb->unacked = seg->next;
 800ceac:	6833      	ldr	r3, [r6, #0]
 800ceae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  cur_seg = &(pcb->unsent);
 800ceb2:	f107 0594 	add.w	r5, r7, #148	; 0x94
  while (*cur_seg &&
 800ceb6:	682b      	ldr	r3, [r5, #0]
 800ceb8:	b1ab      	cbz	r3, 800cee6 <tcp_rexmit+0x4e>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ceba:	691b      	ldr	r3, [r3, #16]
 800cebc:	6858      	ldr	r0, [r3, #4]
 800cebe:	f7f9 fde2 	bl	8006a86 <lwip_htonl>
 800cec2:	4604      	mov	r4, r0
 800cec4:	6933      	ldr	r3, [r6, #16]
 800cec6:	6858      	ldr	r0, [r3, #4]
 800cec8:	f7f9 fddd 	bl	8006a86 <lwip_htonl>
 800cecc:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800cece:	2c00      	cmp	r4, #0
 800ced0:	da09      	bge.n	800cee6 <tcp_rexmit+0x4e>
    cur_seg = &((*cur_seg)->next );
 800ced2:	682d      	ldr	r5, [r5, #0]
 800ced4:	e7ef      	b.n	800ceb6 <tcp_rexmit+0x1e>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ced6:	4b10      	ldr	r3, [pc, #64]	; (800cf18 <tcp_rexmit+0x80>)
 800ced8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800cedc:	490f      	ldr	r1, [pc, #60]	; (800cf1c <tcp_rexmit+0x84>)
 800cede:	4810      	ldr	r0, [pc, #64]	; (800cf20 <tcp_rexmit+0x88>)
 800cee0:	f008 fd56 	bl	8015990 <iprintf>
 800cee4:	e7db      	b.n	800ce9e <tcp_rexmit+0x6>
  seg->next = *cur_seg;
 800cee6:	682b      	ldr	r3, [r5, #0]
 800cee8:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800ceea:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800ceec:	6833      	ldr	r3, [r6, #0]
 800ceee:	b14b      	cbz	r3, 800cf04 <tcp_rexmit+0x6c>
  if (pcb->nrtx < 0xFF) {
 800cef0:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800cef4:	2bff      	cmp	r3, #255	; 0xff
 800cef6:	d002      	beq.n	800cefe <tcp_rexmit+0x66>
    ++pcb->nrtx;
 800cef8:	3301      	adds	r3, #1
 800cefa:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  pcb->rttest = 0;
 800cefe:	2000      	movs	r0, #0
 800cf00:	65f8      	str	r0, [r7, #92]	; 0x5c
}
 800cf02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800cf04:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800cf08:	e7f2      	b.n	800cef0 <tcp_rexmit+0x58>
    return ERR_VAL;
 800cf0a:	f06f 0005 	mvn.w	r0, #5
 800cf0e:	e7f8      	b.n	800cf02 <tcp_rexmit+0x6a>
    return ERR_VAL;
 800cf10:	f06f 0005 	mvn.w	r0, #5
 800cf14:	e7f5      	b.n	800cf02 <tcp_rexmit+0x6a>
 800cf16:	bf00      	nop
 800cf18:	08019118 	.word	0x08019118
 800cf1c:	080197f4 	.word	0x080197f4
 800cf20:	08016bb4 	.word	0x08016bb4

0800cf24 <tcp_rexmit_fast>:
{
 800cf24:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800cf26:	4604      	mov	r4, r0
 800cf28:	b140      	cbz	r0, 800cf3c <tcp_rexmit_fast+0x18>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800cf2a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800cf2e:	b123      	cbz	r3, 800cf3a <tcp_rexmit_fast+0x16>
 800cf30:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800cf34:	f013 0f04 	tst.w	r3, #4
 800cf38:	d008      	beq.n	800cf4c <tcp_rexmit_fast+0x28>
}
 800cf3a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800cf3c:	4b17      	ldr	r3, [pc, #92]	; (800cf9c <tcp_rexmit_fast+0x78>)
 800cf3e:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800cf42:	4917      	ldr	r1, [pc, #92]	; (800cfa0 <tcp_rexmit_fast+0x7c>)
 800cf44:	4817      	ldr	r0, [pc, #92]	; (800cfa4 <tcp_rexmit_fast+0x80>)
 800cf46:	f008 fd23 	bl	8015990 <iprintf>
 800cf4a:	e7ee      	b.n	800cf2a <tcp_rexmit_fast+0x6>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800cf4c:	4620      	mov	r0, r4
 800cf4e:	f7ff ffa3 	bl	800ce98 <tcp_rexmit>
 800cf52:	2800      	cmp	r0, #0
 800cf54:	d1f1      	bne.n	800cf3a <tcp_rexmit_fast+0x16>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cf56:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 800cf5a:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	bf28      	it	cs
 800cf62:	4613      	movcs	r3, r2
 800cf64:	085b      	lsrs	r3, r3, #1
 800cf66:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cf6a:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 800cf6e:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800cf72:	d202      	bcs.n	800cf7a <tcp_rexmit_fast+0x56>
        pcb->ssthresh = 2 * pcb->mss;
 800cf74:	0053      	lsls	r3, r2, #1
 800cf76:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cf7a:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 800cf7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800cf82:	441a      	add	r2, r3
 800cf84:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
      tcp_set_flags(pcb, TF_INFR);
 800cf88:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800cf8c:	f043 0304 	orr.w	r3, r3, #4
 800cf90:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      pcb->rtime = 0;
 800cf94:	2300      	movs	r3, #0
 800cf96:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
}
 800cf9a:	e7ce      	b.n	800cf3a <tcp_rexmit_fast+0x16>
 800cf9c:	08019118 	.word	0x08019118
 800cfa0:	0801980c 	.word	0x0801980c
 800cfa4:	08016bb4 	.word	0x08016bb4

0800cfa8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800cfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfac:	b084      	sub	sp, #16
 800cfae:	4604      	mov	r4, r0
 800cfb0:	460e      	mov	r6, r1
 800cfb2:	4615      	mov	r5, r2
 800cfb4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800cfb6:	4698      	mov	r8, r3
 800cfb8:	b32b      	cbz	r3, 800d006 <tcp_rst+0x5e>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800cfba:	b367      	cbz	r7, 800d016 <tcp_rst+0x6e>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800cfbc:	4630      	mov	r0, r6
 800cfbe:	f7f9 fd62 	bl	8006a86 <lwip_htonl>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	f246 0208 	movw	r2, #24584	; 0x6008
 800cfc8:	9203      	str	r2, [sp, #12]
 800cfca:	2214      	movs	r2, #20
 800cfcc:	9202      	str	r2, [sp, #8]
 800cfce:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 800cfd2:	9201      	str	r2, [sp, #4]
 800cfd4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800cfd8:	9200      	str	r2, [sp, #0]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	4611      	mov	r1, r2
 800cfde:	4628      	mov	r0, r5
 800cfe0:	f7ff f8a6 	bl	800c130 <tcp_output_alloc_header_common>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800cfe4:	4605      	mov	r5, r0
 800cfe6:	b158      	cbz	r0, 800d000 <tcp_rst+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cfe8:	2300      	movs	r3, #0
 800cfea:	461a      	mov	r2, r3
 800cfec:	4601      	mov	r1, r0
 800cfee:	4620      	mov	r0, r4
 800cff0:	f7fe ffa2 	bl	800bf38 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800cff4:	463b      	mov	r3, r7
 800cff6:	4642      	mov	r2, r8
 800cff8:	4629      	mov	r1, r5
 800cffa:	4620      	mov	r0, r4
 800cffc:	f7ff f9e2 	bl	800c3c4 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d000:	b004      	add	sp, #16
 800d002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d006:	4b08      	ldr	r3, [pc, #32]	; (800d028 <tcp_rst+0x80>)
 800d008:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d00c:	4907      	ldr	r1, [pc, #28]	; (800d02c <tcp_rst+0x84>)
 800d00e:	4808      	ldr	r0, [pc, #32]	; (800d030 <tcp_rst+0x88>)
 800d010:	f008 fcbe 	bl	8015990 <iprintf>
 800d014:	e7d1      	b.n	800cfba <tcp_rst+0x12>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d016:	4b04      	ldr	r3, [pc, #16]	; (800d028 <tcp_rst+0x80>)
 800d018:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d01c:	4905      	ldr	r1, [pc, #20]	; (800d034 <tcp_rst+0x8c>)
 800d01e:	4804      	ldr	r0, [pc, #16]	; (800d030 <tcp_rst+0x88>)
 800d020:	f008 fcb6 	bl	8015990 <iprintf>
 800d024:	e7ca      	b.n	800cfbc <tcp_rst+0x14>
 800d026:	bf00      	nop
 800d028:	08019118 	.word	0x08019118
 800d02c:	0801982c 	.word	0x0801982c
 800d030:	08016bb4 	.word	0x08016bb4
 800d034:	08019848 	.word	0x08019848

0800d038 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d038:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d03a:	4604      	mov	r4, r0
 800d03c:	b1f8      	cbz	r0, 800d07e <tcp_send_empty_ack+0x46>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d03e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800d040:	f7f9 fd21 	bl	8006a86 <lwip_htonl>
 800d044:	4603      	mov	r3, r0
 800d046:	2200      	movs	r2, #0
 800d048:	4611      	mov	r1, r2
 800d04a:	4620      	mov	r0, r4
 800d04c:	f7ff f8bc 	bl	800c1c8 <tcp_output_alloc_header>
  if (p == NULL) {
 800d050:	4605      	mov	r5, r0
 800d052:	b1e0      	cbz	r0, 800d08e <tcp_send_empty_ack+0x56>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d054:	2300      	movs	r3, #0
 800d056:	461a      	mov	r2, r3
 800d058:	4601      	mov	r1, r0
 800d05a:	4620      	mov	r0, r4
 800d05c:	f7fe ff6c 	bl	800bf38 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d060:	f104 0318 	add.w	r3, r4, #24
 800d064:	4622      	mov	r2, r4
 800d066:	4629      	mov	r1, r5
 800d068:	4620      	mov	r0, r4
 800d06a:	f7ff f9ab 	bl	800c3c4 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800d06e:	b1b8      	cbz	r0, 800d0a0 <tcp_send_empty_ack+0x68>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d070:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800d074:	f043 0303 	orr.w	r3, r3, #3
 800d078:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800d07c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d07e:	4b0c      	ldr	r3, [pc, #48]	; (800d0b0 <tcp_send_empty_ack+0x78>)
 800d080:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d084:	490b      	ldr	r1, [pc, #44]	; (800d0b4 <tcp_send_empty_ack+0x7c>)
 800d086:	480c      	ldr	r0, [pc, #48]	; (800d0b8 <tcp_send_empty_ack+0x80>)
 800d088:	f008 fc82 	bl	8015990 <iprintf>
 800d08c:	e7d7      	b.n	800d03e <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d08e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800d092:	f043 0303 	orr.w	r3, r3, #3
 800d096:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    return ERR_BUF;
 800d09a:	f06f 0001 	mvn.w	r0, #1
 800d09e:	e7ed      	b.n	800d07c <tcp_send_empty_ack+0x44>
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d0a0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800d0a4:	f023 0303 	bic.w	r3, r3, #3
 800d0a8:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 800d0ac:	e7e6      	b.n	800d07c <tcp_send_empty_ack+0x44>
 800d0ae:	bf00      	nop
 800d0b0:	08019118 	.word	0x08019118
 800d0b4:	08019864 	.word	0x08019864
 800d0b8:	08016bb4 	.word	0x08016bb4

0800d0bc <tcp_output>:
{
 800d0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d0c0:	4605      	mov	r5, r0
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	d059      	beq.n	800d17a <tcp_output+0xbe>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d0c6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d05d      	beq.n	800d18a <tcp_output+0xce>
  if (tcp_input_pcb == pcb) {
 800d0ce:	4b8c      	ldr	r3, [pc, #560]	; (800d300 <tcp_output+0x244>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	42ab      	cmp	r3, r5
 800d0d4:	f000 81a3 	beq.w	800d41e <tcp_output+0x362>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d0d8:	f8b5 6070 	ldrh.w	r6, [r5, #112]	; 0x70
 800d0dc:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
 800d0e0:	429e      	cmp	r6, r3
 800d0e2:	bf28      	it	cs
 800d0e4:	461e      	movcs	r6, r3
 800d0e6:	4637      	mov	r7, r6
  seg = pcb->unsent;
 800d0e8:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
  if (seg == NULL) {
 800d0ec:	2c00      	cmp	r4, #0
 800d0ee:	d054      	beq.n	800d19a <tcp_output+0xde>
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d0f0:	f105 0918 	add.w	r9, r5, #24
 800d0f4:	464a      	mov	r2, r9
 800d0f6:	4629      	mov	r1, r5
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	f7ff f893 	bl	800c224 <tcp_route>
  if (netif == NULL) {
 800d0fe:	4680      	mov	r8, r0
 800d100:	2800      	cmp	r0, #0
 800d102:	f000 818e 	beq.w	800d422 <tcp_output+0x366>
  if (ip_addr_isany(&pcb->local_ip)) {
 800d106:	b14d      	cbz	r5, 800d11c <tcp_output+0x60>
 800d108:	7d2b      	ldrb	r3, [r5, #20]
 800d10a:	2b06      	cmp	r3, #6
 800d10c:	d059      	beq.n	800d1c2 <tcp_output+0x106>
 800d10e:	2d00      	cmp	r5, #0
 800d110:	d06c      	beq.n	800d1ec <tcp_output+0x130>
 800d112:	682b      	ldr	r3, [r5, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d16b      	bne.n	800d1f0 <tcp_output+0x134>
 800d118:	2301      	movs	r3, #1
 800d11a:	b1b3      	cbz	r3, 800d14a <tcp_output+0x8e>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d11c:	f1b9 0f00 	cmp.w	r9, #0
 800d120:	d003      	beq.n	800d12a <tcp_output+0x6e>
 800d122:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800d126:	2b06      	cmp	r3, #6
 800d128:	d064      	beq.n	800d1f4 <tcp_output+0x138>
 800d12a:	f108 0004 	add.w	r0, r8, #4
    if (local_ip == NULL) {
 800d12e:	2800      	cmp	r0, #0
 800d130:	f000 817a 	beq.w	800d428 <tcp_output+0x36c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d134:	7d03      	ldrb	r3, [r0, #20]
 800d136:	752b      	strb	r3, [r5, #20]
 800d138:	2b06      	cmp	r3, #6
 800d13a:	d061      	beq.n	800d200 <tcp_output+0x144>
 800d13c:	6803      	ldr	r3, [r0, #0]
 800d13e:	602b      	str	r3, [r5, #0]
 800d140:	2300      	movs	r3, #0
 800d142:	60eb      	str	r3, [r5, #12]
 800d144:	60ab      	str	r3, [r5, #8]
 800d146:	606b      	str	r3, [r5, #4]
 800d148:	742b      	strb	r3, [r5, #16]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d14a:	6923      	ldr	r3, [r4, #16]
 800d14c:	6858      	ldr	r0, [r3, #4]
 800d14e:	f7f9 fc9a 	bl	8006a86 <lwip_htonl>
 800d152:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800d154:	1ac0      	subs	r0, r0, r3
 800d156:	8923      	ldrh	r3, [r4, #8]
 800d158:	4418      	add	r0, r3
 800d15a:	42b0      	cmp	r0, r6
 800d15c:	d96b      	bls.n	800d236 <tcp_output+0x17a>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d15e:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
 800d162:	429e      	cmp	r6, r3
 800d164:	d057      	beq.n	800d216 <tcp_output+0x15a>
    if (pcb->flags & TF_ACK_NOW) {
 800d166:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 800d16a:	f013 0f02 	tst.w	r3, #2
 800d16e:	d019      	beq.n	800d1a4 <tcp_output+0xe8>
      return tcp_send_empty_ack(pcb);
 800d170:	4628      	mov	r0, r5
 800d172:	f7ff ff61 	bl	800d038 <tcp_send_empty_ack>
 800d176:	4603      	mov	r3, r0
 800d178:	e01b      	b.n	800d1b2 <tcp_output+0xf6>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d17a:	4b62      	ldr	r3, [pc, #392]	; (800d304 <tcp_output+0x248>)
 800d17c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d180:	4961      	ldr	r1, [pc, #388]	; (800d308 <tcp_output+0x24c>)
 800d182:	4862      	ldr	r0, [pc, #392]	; (800d30c <tcp_output+0x250>)
 800d184:	f008 fc04 	bl	8015990 <iprintf>
 800d188:	e79d      	b.n	800d0c6 <tcp_output+0xa>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d18a:	4b5e      	ldr	r3, [pc, #376]	; (800d304 <tcp_output+0x248>)
 800d18c:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d190:	495f      	ldr	r1, [pc, #380]	; (800d310 <tcp_output+0x254>)
 800d192:	485e      	ldr	r0, [pc, #376]	; (800d30c <tcp_output+0x250>)
 800d194:	f008 fbfc 	bl	8015990 <iprintf>
 800d198:	e799      	b.n	800d0ce <tcp_output+0x12>
    if (pcb->flags & TF_ACK_NOW) {
 800d19a:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 800d19e:	f013 0f02 	tst.w	r3, #2
 800d1a2:	d109      	bne.n	800d1b8 <tcp_output+0xfc>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d1a4:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 800d1a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1ac:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
  return ERR_OK;
 800d1b0:	2300      	movs	r3, #0
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return tcp_send_empty_ack(pcb);
 800d1b8:	4628      	mov	r0, r5
 800d1ba:	f7ff ff3d 	bl	800d038 <tcp_send_empty_ack>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	e7f7      	b.n	800d1b2 <tcp_output+0xf6>
  if (ip_addr_isany(&pcb->local_ip)) {
 800d1c2:	b14d      	cbz	r5, 800d1d8 <tcp_output+0x11c>
 800d1c4:	682b      	ldr	r3, [r5, #0]
 800d1c6:	b94b      	cbnz	r3, 800d1dc <tcp_output+0x120>
 800d1c8:	686b      	ldr	r3, [r5, #4]
 800d1ca:	b94b      	cbnz	r3, 800d1e0 <tcp_output+0x124>
 800d1cc:	68ab      	ldr	r3, [r5, #8]
 800d1ce:	b94b      	cbnz	r3, 800d1e4 <tcp_output+0x128>
 800d1d0:	68eb      	ldr	r3, [r5, #12]
 800d1d2:	b14b      	cbz	r3, 800d1e8 <tcp_output+0x12c>
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	e7a0      	b.n	800d11a <tcp_output+0x5e>
 800d1d8:	2301      	movs	r3, #1
 800d1da:	e79e      	b.n	800d11a <tcp_output+0x5e>
 800d1dc:	2300      	movs	r3, #0
 800d1de:	e79c      	b.n	800d11a <tcp_output+0x5e>
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	e79a      	b.n	800d11a <tcp_output+0x5e>
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	e798      	b.n	800d11a <tcp_output+0x5e>
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e796      	b.n	800d11a <tcp_output+0x5e>
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	e794      	b.n	800d11a <tcp_output+0x5e>
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	e792      	b.n	800d11a <tcp_output+0x5e>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d1f4:	f105 0118 	add.w	r1, r5, #24
 800d1f8:	4640      	mov	r0, r8
 800d1fa:	f004 fe4b 	bl	8011e94 <ip6_select_source_address>
 800d1fe:	e796      	b.n	800d12e <tcp_output+0x72>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d200:	6803      	ldr	r3, [r0, #0]
 800d202:	602b      	str	r3, [r5, #0]
 800d204:	6843      	ldr	r3, [r0, #4]
 800d206:	606b      	str	r3, [r5, #4]
 800d208:	6883      	ldr	r3, [r0, #8]
 800d20a:	60ab      	str	r3, [r5, #8]
 800d20c:	68c3      	ldr	r3, [r0, #12]
 800d20e:	60eb      	str	r3, [r5, #12]
 800d210:	7c03      	ldrb	r3, [r0, #16]
 800d212:	742b      	strb	r3, [r5, #16]
 800d214:	e799      	b.n	800d14a <tcp_output+0x8e>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d216:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d1a3      	bne.n	800d166 <tcp_output+0xaa>
 800d21e:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
 800d222:	2b00      	cmp	r3, #0
 800d224:	d19f      	bne.n	800d166 <tcp_output+0xaa>
      pcb->persist_cnt = 0;
 800d226:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
      pcb->persist_backoff = 1;
 800d22a:	2201      	movs	r2, #1
 800d22c:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
      pcb->persist_probe = 0;
 800d230:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
 800d234:	e797      	b.n	800d166 <tcp_output+0xaa>
  pcb->persist_backoff = 0;
 800d236:	2300      	movs	r3, #0
 800d238:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
  useg = pcb->unacked;
 800d23c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
  if (useg != NULL) {
 800d240:	2b00      	cmp	r3, #0
 800d242:	f000 80ea 	beq.w	800d41a <tcp_output+0x35e>
    for (; useg->next != NULL; useg = useg->next);
 800d246:	461e      	mov	r6, r3
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d1fb      	bne.n	800d246 <tcp_output+0x18a>
 800d24e:	e068      	b.n	800d322 <tcp_output+0x266>
    LWIP_ASSERT("RST not expected here!",
 800d250:	4b2c      	ldr	r3, [pc, #176]	; (800d304 <tcp_output+0x248>)
 800d252:	f240 5236 	movw	r2, #1334	; 0x536
 800d256:	492f      	ldr	r1, [pc, #188]	; (800d314 <tcp_output+0x258>)
 800d258:	482c      	ldr	r0, [pc, #176]	; (800d30c <tcp_output+0x250>)
 800d25a:	f008 fb99 	bl	8015990 <iprintf>
 800d25e:	e073      	b.n	800d348 <tcp_output+0x28c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d260:	8911      	ldrh	r1, [r2, #8]
 800d262:	f8b5 205a 	ldrh.w	r2, [r5, #90]	; 0x5a
 800d266:	4291      	cmp	r1, r2
 800d268:	d27e      	bcs.n	800d368 <tcp_output+0x2ac>
 800d26a:	f8b5 208c 	ldrh.w	r2, [r5, #140]	; 0x8c
 800d26e:	2a00      	cmp	r2, #0
 800d270:	d07a      	beq.n	800d368 <tcp_output+0x2ac>
 800d272:	f8b5 208e 	ldrh.w	r2, [r5, #142]	; 0x8e
 800d276:	2a08      	cmp	r2, #8
 800d278:	d876      	bhi.n	800d368 <tcp_output+0x2ac>
 800d27a:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800d27e:	d173      	bne.n	800d368 <tcp_output+0x2ac>
  if (pcb->unsent == NULL) {
 800d280:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800d284:	2b00      	cmp	r3, #0
 800d286:	d18d      	bne.n	800d1a4 <tcp_output+0xe8>
    pcb->unsent_oversize = 0;
 800d288:	f8a5 3090 	strh.w	r3, [r5, #144]	; 0x90
 800d28c:	e78a      	b.n	800d1a4 <tcp_output+0xe8>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d28e:	6923      	ldr	r3, [r4, #16]
 800d290:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800d294:	2010      	movs	r0, #16
 800d296:	f7f9 fbf1 	bl	8006a7c <lwip_htons>
 800d29a:	6923      	ldr	r3, [r4, #16]
 800d29c:	ea49 0900 	orr.w	r9, r9, r0
 800d2a0:	f8a3 900c 	strh.w	r9, [r3, #12]
 800d2a4:	e064      	b.n	800d370 <tcp_output+0x2b4>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d2a6:	f8b5 2042 	ldrh.w	r2, [r5, #66]	; 0x42
 800d2aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d2ae:	f8a5 2042 	strh.w	r2, [r5, #66]	; 0x42
      return err;
 800d2b2:	e77e      	b.n	800d1b2 <tcp_output+0xf6>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d2b4:	2000      	movs	r0, #0
 800d2b6:	e082      	b.n	800d3be <tcp_output+0x302>
      pcb->snd_nxt = snd_nxt;
 800d2b8:	67a8      	str	r0, [r5, #120]	; 0x78
 800d2ba:	e087      	b.n	800d3cc <tcp_output+0x310>
    if (TCP_TCPLEN(seg) > 0) {
 800d2bc:	2300      	movs	r3, #0
 800d2be:	e090      	b.n	800d3e2 <tcp_output+0x326>
        pcb->unacked = seg;
 800d2c0:	f8c5 4098 	str.w	r4, [r5, #152]	; 0x98
        useg = seg;
 800d2c4:	4626      	mov	r6, r4
 800d2c6:	e02a      	b.n	800d31e <tcp_output+0x262>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d2c8:	f105 0a98 	add.w	sl, r5, #152	; 0x98
          while (*cur_seg &&
 800d2cc:	f8da 3000 	ldr.w	r3, [sl]
 800d2d0:	b183      	cbz	r3, 800d2f4 <tcp_output+0x238>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d2d2:	691b      	ldr	r3, [r3, #16]
 800d2d4:	6858      	ldr	r0, [r3, #4]
 800d2d6:	f7f9 fbd6 	bl	8006a86 <lwip_htonl>
 800d2da:	4681      	mov	r9, r0
 800d2dc:	6923      	ldr	r3, [r4, #16]
 800d2de:	6858      	ldr	r0, [r3, #4]
 800d2e0:	f7f9 fbd1 	bl	8006a86 <lwip_htonl>
 800d2e4:	eba9 0900 	sub.w	r9, r9, r0
          while (*cur_seg &&
 800d2e8:	f1b9 0f00 	cmp.w	r9, #0
 800d2ec:	da02      	bge.n	800d2f4 <tcp_output+0x238>
            cur_seg = &((*cur_seg)->next );
 800d2ee:	f8da a000 	ldr.w	sl, [sl]
 800d2f2:	e7eb      	b.n	800d2cc <tcp_output+0x210>
          seg->next = (*cur_seg);
 800d2f4:	f8da 3000 	ldr.w	r3, [sl]
 800d2f8:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 800d2fa:	f8ca 4000 	str.w	r4, [sl]
 800d2fe:	e00e      	b.n	800d31e <tcp_output+0x262>
 800d300:	20007fc0 	.word	0x20007fc0
 800d304:	08019118 	.word	0x08019118
 800d308:	08019884 	.word	0x08019884
 800d30c:	08016bb4 	.word	0x08016bb4
 800d310:	0801989c 	.word	0x0801989c
 800d314:	080198c4 	.word	0x080198c4
      tcp_seg_free(seg);
 800d318:	4620      	mov	r0, r4
 800d31a:	f7fb fe4f 	bl	8008fbc <tcp_seg_free>
    seg = pcb->unsent;
 800d31e:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
  while (seg != NULL &&
 800d322:	2c00      	cmp	r4, #0
 800d324:	d0ac      	beq.n	800d280 <tcp_output+0x1c4>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d326:	6923      	ldr	r3, [r4, #16]
 800d328:	6858      	ldr	r0, [r3, #4]
 800d32a:	f7f9 fbac 	bl	8006a86 <lwip_htonl>
 800d32e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800d330:	1ac0      	subs	r0, r0, r3
 800d332:	8923      	ldrh	r3, [r4, #8]
 800d334:	4418      	add	r0, r3
  while (seg != NULL &&
 800d336:	42b8      	cmp	r0, r7
 800d338:	d8a2      	bhi.n	800d280 <tcp_output+0x1c4>
    LWIP_ASSERT("RST not expected here!",
 800d33a:	6923      	ldr	r3, [r4, #16]
 800d33c:	8998      	ldrh	r0, [r3, #12]
 800d33e:	f7f9 fb9d 	bl	8006a7c <lwip_htons>
 800d342:	f010 0f04 	tst.w	r0, #4
 800d346:	d183      	bne.n	800d250 <tcp_output+0x194>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d348:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800d34c:	b163      	cbz	r3, 800d368 <tcp_output+0x2ac>
 800d34e:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 800d352:	f013 0f44 	tst.w	r3, #68	; 0x44
 800d356:	d107      	bne.n	800d368 <tcp_output+0x2ac>
 800d358:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 800d35c:	2a00      	cmp	r2, #0
 800d35e:	d084      	beq.n	800d26a <tcp_output+0x1ae>
 800d360:	6811      	ldr	r1, [r2, #0]
 800d362:	2900      	cmp	r1, #0
 800d364:	f43f af7c 	beq.w	800d260 <tcp_output+0x1a4>
    if (pcb->state != SYN_SENT) {
 800d368:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	d18e      	bne.n	800d28e <tcp_output+0x1d2>
    err = tcp_output_segment(seg, pcb, netif);
 800d370:	4642      	mov	r2, r8
 800d372:	4629      	mov	r1, r5
 800d374:	4620      	mov	r0, r4
 800d376:	f7fe ff6b 	bl	800c250 <tcp_output_segment>
    if (err != ERR_OK) {
 800d37a:	4603      	mov	r3, r0
 800d37c:	2800      	cmp	r0, #0
 800d37e:	d192      	bne.n	800d2a6 <tcp_output+0x1ea>
    seg->oversize_left = 0;
 800d380:	2300      	movs	r3, #0
 800d382:	8163      	strh	r3, [r4, #10]
    pcb->unsent = seg->next;
 800d384:	6823      	ldr	r3, [r4, #0]
 800d386:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
    if (pcb->state != SYN_SENT) {
 800d38a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800d38e:	2b02      	cmp	r3, #2
 800d390:	d005      	beq.n	800d39e <tcp_output+0x2e2>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d392:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 800d396:	f023 0303 	bic.w	r3, r3, #3
 800d39a:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d39e:	6923      	ldr	r3, [r4, #16]
 800d3a0:	6858      	ldr	r0, [r3, #4]
 800d3a2:	f7f9 fb70 	bl	8006a86 <lwip_htonl>
 800d3a6:	4681      	mov	r9, r0
 800d3a8:	f8b4 a008 	ldrh.w	sl, [r4, #8]
 800d3ac:	6923      	ldr	r3, [r4, #16]
 800d3ae:	8998      	ldrh	r0, [r3, #12]
 800d3b0:	f7f9 fb64 	bl	8006a7c <lwip_htons>
 800d3b4:	f010 0f03 	tst.w	r0, #3
 800d3b8:	f43f af7c 	beq.w	800d2b4 <tcp_output+0x1f8>
 800d3bc:	2001      	movs	r0, #1
 800d3be:	4450      	add	r0, sl
 800d3c0:	4448      	add	r0, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d3c2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800d3c4:	1a1b      	subs	r3, r3, r0
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	f6ff af76 	blt.w	800d2b8 <tcp_output+0x1fc>
    if (TCP_TCPLEN(seg) > 0) {
 800d3cc:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 800d3d0:	6923      	ldr	r3, [r4, #16]
 800d3d2:	8998      	ldrh	r0, [r3, #12]
 800d3d4:	f7f9 fb52 	bl	8006a7c <lwip_htons>
 800d3d8:	f010 0f03 	tst.w	r0, #3
 800d3dc:	f43f af6e 	beq.w	800d2bc <tcp_output+0x200>
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	eb13 0f09 	cmn.w	r3, r9
 800d3e6:	d097      	beq.n	800d318 <tcp_output+0x25c>
      seg->next = NULL;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 800d3ec:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f43f af65 	beq.w	800d2c0 <tcp_output+0x204>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d3f6:	6923      	ldr	r3, [r4, #16]
 800d3f8:	6858      	ldr	r0, [r3, #4]
 800d3fa:	f7f9 fb44 	bl	8006a86 <lwip_htonl>
 800d3fe:	4681      	mov	r9, r0
 800d400:	6933      	ldr	r3, [r6, #16]
 800d402:	6858      	ldr	r0, [r3, #4]
 800d404:	f7f9 fb3f 	bl	8006a86 <lwip_htonl>
 800d408:	eba9 0900 	sub.w	r9, r9, r0
 800d40c:	f1b9 0f00 	cmp.w	r9, #0
 800d410:	f6ff af5a 	blt.w	800d2c8 <tcp_output+0x20c>
          useg->next = seg;
 800d414:	6034      	str	r4, [r6, #0]
          useg = useg->next;
 800d416:	4626      	mov	r6, r4
 800d418:	e781      	b.n	800d31e <tcp_output+0x262>
  useg = pcb->unacked;
 800d41a:	461e      	mov	r6, r3
 800d41c:	e781      	b.n	800d322 <tcp_output+0x266>
    return ERR_OK;
 800d41e:	2300      	movs	r3, #0
 800d420:	e6c7      	b.n	800d1b2 <tcp_output+0xf6>
    return ERR_RTE;
 800d422:	f06f 0303 	mvn.w	r3, #3
 800d426:	e6c4      	b.n	800d1b2 <tcp_output+0xf6>
      return ERR_RTE;
 800d428:	f06f 0303 	mvn.w	r3, #3
 800d42c:	e6c1      	b.n	800d1b2 <tcp_output+0xf6>
 800d42e:	bf00      	nop

0800d430 <tcp_rexmit_rto_commit>:
{
 800d430:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d432:	4604      	mov	r4, r0
 800d434:	b150      	cbz	r0, 800d44c <tcp_rexmit_rto_commit+0x1c>
  if (pcb->nrtx < 0xFF) {
 800d436:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 800d43a:	2bff      	cmp	r3, #255	; 0xff
 800d43c:	d002      	beq.n	800d444 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 800d43e:	3301      	adds	r3, #1
 800d440:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  tcp_output(pcb);
 800d444:	4620      	mov	r0, r4
 800d446:	f7ff fe39 	bl	800d0bc <tcp_output>
}
 800d44a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d44c:	4b03      	ldr	r3, [pc, #12]	; (800d45c <tcp_rexmit_rto_commit+0x2c>)
 800d44e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d452:	4903      	ldr	r1, [pc, #12]	; (800d460 <tcp_rexmit_rto_commit+0x30>)
 800d454:	4803      	ldr	r0, [pc, #12]	; (800d464 <tcp_rexmit_rto_commit+0x34>)
 800d456:	f008 fa9b 	bl	8015990 <iprintf>
 800d45a:	e7ec      	b.n	800d436 <tcp_rexmit_rto_commit+0x6>
 800d45c:	08019118 	.word	0x08019118
 800d460:	080198dc 	.word	0x080198dc
 800d464:	08016bb4 	.word	0x08016bb4

0800d468 <tcp_rexmit_rto>:
{
 800d468:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d46a:	4604      	mov	r4, r0
 800d46c:	b120      	cbz	r0, 800d478 <tcp_rexmit_rto+0x10>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d46e:	4620      	mov	r0, r4
 800d470:	f7ff fcbc 	bl	800cdec <tcp_rexmit_rto_prepare>
 800d474:	b140      	cbz	r0, 800d488 <tcp_rexmit_rto+0x20>
}
 800d476:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d478:	4b05      	ldr	r3, [pc, #20]	; (800d490 <tcp_rexmit_rto+0x28>)
 800d47a:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800d47e:	4905      	ldr	r1, [pc, #20]	; (800d494 <tcp_rexmit_rto+0x2c>)
 800d480:	4805      	ldr	r0, [pc, #20]	; (800d498 <tcp_rexmit_rto+0x30>)
 800d482:	f008 fa85 	bl	8015990 <iprintf>
 800d486:	e7f2      	b.n	800d46e <tcp_rexmit_rto+0x6>
    tcp_rexmit_rto_commit(pcb);
 800d488:	4620      	mov	r0, r4
 800d48a:	f7ff ffd1 	bl	800d430 <tcp_rexmit_rto_commit>
}
 800d48e:	e7f2      	b.n	800d476 <tcp_rexmit_rto+0xe>
 800d490:	08019118 	.word	0x08019118
 800d494:	08019900 	.word	0x08019900
 800d498:	08016bb4 	.word	0x08016bb4

0800d49c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d49c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d49e:	4604      	mov	r4, r0
 800d4a0:	b1c8      	cbz	r0, 800d4d6 <tcp_keepalive+0x3a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d4a2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800d4a4:	3801      	subs	r0, #1
 800d4a6:	f7f9 faee 	bl	8006a86 <lwip_htonl>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	4611      	mov	r1, r2
 800d4b0:	4620      	mov	r0, r4
 800d4b2:	f7fe fe89 	bl	800c1c8 <tcp_output_alloc_header>
  if (p == NULL) {
 800d4b6:	4605      	mov	r5, r0
 800d4b8:	b1a8      	cbz	r0, 800d4e6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	461a      	mov	r2, r3
 800d4be:	4601      	mov	r1, r0
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	f7fe fd39 	bl	800bf38 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d4c6:	f104 0318 	add.w	r3, r4, #24
 800d4ca:	4622      	mov	r2, r4
 800d4cc:	4629      	mov	r1, r5
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	f7fe ff78 	bl	800c3c4 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800d4d4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d4d6:	4b05      	ldr	r3, [pc, #20]	; (800d4ec <tcp_keepalive+0x50>)
 800d4d8:	f640 0224 	movw	r2, #2084	; 0x824
 800d4dc:	4904      	ldr	r1, [pc, #16]	; (800d4f0 <tcp_keepalive+0x54>)
 800d4de:	4805      	ldr	r0, [pc, #20]	; (800d4f4 <tcp_keepalive+0x58>)
 800d4e0:	f008 fa56 	bl	8015990 <iprintf>
 800d4e4:	e7dd      	b.n	800d4a2 <tcp_keepalive+0x6>
    return ERR_MEM;
 800d4e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d4ea:	e7f3      	b.n	800d4d4 <tcp_keepalive+0x38>
 800d4ec:	08019118 	.word	0x08019118
 800d4f0:	0801991c 	.word	0x0801991c
 800d4f4:	08016bb4 	.word	0x08016bb4

0800d4f8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d4fc:	4604      	mov	r4, r0
 800d4fe:	b1b0      	cbz	r0, 800d52e <tcp_zero_window_probe+0x36>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d500:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
  if (seg == NULL) {
 800d504:	2d00      	cmp	r5, #0
 800d506:	d05c      	beq.n	800d5c2 <tcp_zero_window_probe+0xca>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d508:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
 800d50c:	2bff      	cmp	r3, #255	; 0xff
 800d50e:	d002      	beq.n	800d516 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 800d510:	3301      	adds	r3, #1
 800d512:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d516:	692b      	ldr	r3, [r5, #16]
 800d518:	8998      	ldrh	r0, [r3, #12]
 800d51a:	f7f9 faaf 	bl	8006a7c <lwip_htons>
 800d51e:	f010 0f01 	tst.w	r0, #1
 800d522:	d00c      	beq.n	800d53e <tcp_zero_window_probe+0x46>
 800d524:	892b      	ldrh	r3, [r5, #8]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d03c      	beq.n	800d5a4 <tcp_zero_window_probe+0xac>
 800d52a:	2200      	movs	r2, #0
 800d52c:	e008      	b.n	800d540 <tcp_zero_window_probe+0x48>
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d52e:	4b27      	ldr	r3, [pc, #156]	; (800d5cc <tcp_zero_window_probe+0xd4>)
 800d530:	f640 024f 	movw	r2, #2127	; 0x84f
 800d534:	4926      	ldr	r1, [pc, #152]	; (800d5d0 <tcp_zero_window_probe+0xd8>)
 800d536:	4827      	ldr	r0, [pc, #156]	; (800d5d4 <tcp_zero_window_probe+0xdc>)
 800d538:	f008 fa2a 	bl	8015990 <iprintf>
 800d53c:	e7e0      	b.n	800d500 <tcp_zero_window_probe+0x8>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d53e:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d540:	f002 07ff 	and.w	r7, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d544:	692b      	ldr	r3, [r5, #16]
 800d546:	685b      	ldr	r3, [r3, #4]
 800d548:	f082 0201 	eor.w	r2, r2, #1
 800d54c:	2100      	movs	r1, #0
 800d54e:	4620      	mov	r0, r4
 800d550:	f7fe fe3a 	bl	800c1c8 <tcp_output_alloc_header>
  if (p == NULL) {
 800d554:	4606      	mov	r6, r0
 800d556:	b3b0      	cbz	r0, 800d5c6 <tcp_zero_window_probe+0xce>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d558:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800d55c:	b327      	cbz	r7, 800d5a8 <tcp_zero_window_probe+0xb0>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d55e:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 800d562:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800d566:	2011      	movs	r0, #17
 800d568:	f7f9 fa88 	bl	8006a7c <lwip_htons>
 800d56c:	b200      	sxth	r0, r0
 800d56e:	4307      	orrs	r7, r0
 800d570:	f8a8 700c 	strh.w	r7, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d574:	692b      	ldr	r3, [r5, #16]
 800d576:	6858      	ldr	r0, [r3, #4]
 800d578:	f7f9 fa85 	bl	8006a86 <lwip_htonl>
 800d57c:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d57e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d580:	1a1b      	subs	r3, r3, r0
 800d582:	2b00      	cmp	r3, #0
 800d584:	db1b      	blt.n	800d5be <tcp_zero_window_probe+0xc6>
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d586:	2300      	movs	r3, #0
 800d588:	461a      	mov	r2, r3
 800d58a:	4631      	mov	r1, r6
 800d58c:	4620      	mov	r0, r4
 800d58e:	f7fe fcd3 	bl	800bf38 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d592:	f104 0318 	add.w	r3, r4, #24
 800d596:	4622      	mov	r2, r4
 800d598:	4631      	mov	r1, r6
 800d59a:	4620      	mov	r0, r4
 800d59c:	f7fe ff12 	bl	800c3c4 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800d5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	e7cb      	b.n	800d540 <tcp_zero_window_probe+0x48>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d5a8:	6868      	ldr	r0, [r5, #4]
 800d5aa:	8903      	ldrh	r3, [r0, #8]
 800d5ac:	892a      	ldrh	r2, [r5, #8]
 800d5ae:	1a9b      	subs	r3, r3, r2
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	f108 0114 	add.w	r1, r8, #20
 800d5b8:	f7fa fff0 	bl	800859c <pbuf_copy_partial>
 800d5bc:	e7da      	b.n	800d574 <tcp_zero_window_probe+0x7c>
    pcb->snd_nxt = snd_nxt;
 800d5be:	67a0      	str	r0, [r4, #120]	; 0x78
 800d5c0:	e7e1      	b.n	800d586 <tcp_zero_window_probe+0x8e>
    return ERR_OK;
 800d5c2:	2000      	movs	r0, #0
 800d5c4:	e7ec      	b.n	800d5a0 <tcp_zero_window_probe+0xa8>
    return ERR_MEM;
 800d5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ca:	e7e9      	b.n	800d5a0 <tcp_zero_window_probe+0xa8>
 800d5cc:	08019118 	.word	0x08019118
 800d5d0:	08019938 	.word	0x08019938
 800d5d4:	08016bb4 	.word	0x08016bb4

0800d5d8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5da:	4604      	mov	r4, r0
 800d5dc:	460f      	mov	r7, r1
 800d5de:	4616      	mov	r6, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d5e0:	2007      	movs	r0, #7
 800d5e2:	f7fa f8c7 	bl	8007774 <memp_malloc>
  if (timeout == NULL) {
 800d5e6:	b180      	cbz	r0, 800d60a <sys_timeout_abs+0x32>
 800d5e8:	4605      	mov	r5, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
 800d5ee:	6087      	str	r7, [r0, #8]
  timeout->arg = arg;
 800d5f0:	60c6      	str	r6, [r0, #12]
  timeout->time = abs_time;
 800d5f2:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d5f4:	4b10      	ldr	r3, [pc, #64]	; (800d638 <sys_timeout_abs+0x60>)
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	b172      	cbz	r2, 800d618 <sys_timeout_abs+0x40>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d5fa:	6853      	ldr	r3, [r2, #4]
 800d5fc:	1ae3      	subs	r3, r4, r3
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	da0f      	bge.n	800d622 <sys_timeout_abs+0x4a>
    timeout->next = next_timeout;
 800d602:	6002      	str	r2, [r0, #0]
    next_timeout = timeout;
 800d604:	4b0c      	ldr	r3, [pc, #48]	; (800d638 <sys_timeout_abs+0x60>)
 800d606:	6018      	str	r0, [r3, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 800d608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d60a:	4b0c      	ldr	r3, [pc, #48]	; (800d63c <sys_timeout_abs+0x64>)
 800d60c:	22be      	movs	r2, #190	; 0xbe
 800d60e:	490c      	ldr	r1, [pc, #48]	; (800d640 <sys_timeout_abs+0x68>)
 800d610:	480c      	ldr	r0, [pc, #48]	; (800d644 <sys_timeout_abs+0x6c>)
 800d612:	f008 f9bd 	bl	8015990 <iprintf>
    return;
 800d616:	e7f7      	b.n	800d608 <sys_timeout_abs+0x30>
    next_timeout = timeout;
 800d618:	6018      	str	r0, [r3, #0]
    return;
 800d61a:	e7f5      	b.n	800d608 <sys_timeout_abs+0x30>
        timeout->next = t->next;
 800d61c:	602b      	str	r3, [r5, #0]
        t->next = timeout;
 800d61e:	6015      	str	r5, [r2, #0]
        break;
 800d620:	e7f2      	b.n	800d608 <sys_timeout_abs+0x30>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d622:	2a00      	cmp	r2, #0
 800d624:	d0f0      	beq.n	800d608 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d626:	6813      	ldr	r3, [r2, #0]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d0f7      	beq.n	800d61c <sys_timeout_abs+0x44>
 800d62c:	6859      	ldr	r1, [r3, #4]
 800d62e:	1a61      	subs	r1, r4, r1
 800d630:	2900      	cmp	r1, #0
 800d632:	dbf3      	blt.n	800d61c <sys_timeout_abs+0x44>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d634:	461a      	mov	r2, r3
 800d636:	e7f4      	b.n	800d622 <sys_timeout_abs+0x4a>
 800d638:	20000ac8 	.word	0x20000ac8
 800d63c:	0801995c 	.word	0x0801995c
 800d640:	08019990 	.word	0x08019990
 800d644:	08016bb4 	.word	0x08016bb4

0800d648 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d648:	b570      	push	{r4, r5, r6, lr}
 800d64a:	4604      	mov	r4, r0
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d64c:	6843      	ldr	r3, [r0, #4]
 800d64e:	4798      	blx	r3

  now = sys_now();
 800d650:	f7f8 fd36 	bl	80060c0 <sys_now>
 800d654:	4605      	mov	r5, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d656:	6826      	ldr	r6, [r4, #0]
 800d658:	4b08      	ldr	r3, [pc, #32]	; (800d67c <lwip_cyclic_timer+0x34>)
 800d65a:	6818      	ldr	r0, [r3, #0]
 800d65c:	4430      	add	r0, r6
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d65e:	1b43      	subs	r3, r0, r5
 800d660:	2b00      	cmp	r3, #0
 800d662:	da05      	bge.n	800d670 <lwip_cyclic_timer+0x28>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d664:	4622      	mov	r2, r4
 800d666:	4906      	ldr	r1, [pc, #24]	; (800d680 <lwip_cyclic_timer+0x38>)
 800d668:	1970      	adds	r0, r6, r5
 800d66a:	f7ff ffb5 	bl	800d5d8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d66e:	bd70      	pop	{r4, r5, r6, pc}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d670:	4622      	mov	r2, r4
 800d672:	4903      	ldr	r1, [pc, #12]	; (800d680 <lwip_cyclic_timer+0x38>)
 800d674:	f7ff ffb0 	bl	800d5d8 <sys_timeout_abs>
}
 800d678:	e7f9      	b.n	800d66e <lwip_cyclic_timer+0x26>
 800d67a:	bf00      	nop
 800d67c:	20000ac4 	.word	0x20000ac4
 800d680:	0800d649 	.word	0x0800d649

0800d684 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d684:	b570      	push	{r4, r5, r6, lr}
 800d686:	4604      	mov	r4, r0
 800d688:	460d      	mov	r5, r1
 800d68a:	4616      	mov	r6, r2
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d68c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800d690:	d207      	bcs.n	800d6a2 <sys_timeout+0x1e>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d692:	f7f8 fd15 	bl	80060c0 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d696:	4632      	mov	r2, r6
 800d698:	4629      	mov	r1, r5
 800d69a:	4420      	add	r0, r4
 800d69c:	f7ff ff9c 	bl	800d5d8 <sys_timeout_abs>
#endif
}
 800d6a0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d6a2:	4b04      	ldr	r3, [pc, #16]	; (800d6b4 <sys_timeout+0x30>)
 800d6a4:	f240 1229 	movw	r2, #297	; 0x129
 800d6a8:	4903      	ldr	r1, [pc, #12]	; (800d6b8 <sys_timeout+0x34>)
 800d6aa:	4804      	ldr	r0, [pc, #16]	; (800d6bc <sys_timeout+0x38>)
 800d6ac:	f008 f970 	bl	8015990 <iprintf>
 800d6b0:	e7ef      	b.n	800d692 <sys_timeout+0xe>
 800d6b2:	bf00      	nop
 800d6b4:	0801995c 	.word	0x0801995c
 800d6b8:	080199d0 	.word	0x080199d0
 800d6bc:	08016bb4 	.word	0x08016bb4

0800d6c0 <tcp_timer_needed>:
{
 800d6c0:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d6c2:	4b0a      	ldr	r3, [pc, #40]	; (800d6ec <tcp_timer_needed+0x2c>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	b953      	cbnz	r3, 800d6de <tcp_timer_needed+0x1e>
 800d6c8:	4b09      	ldr	r3, [pc, #36]	; (800d6f0 <tcp_timer_needed+0x30>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	b143      	cbz	r3, 800d6e0 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800d6ce:	4b07      	ldr	r3, [pc, #28]	; (800d6ec <tcp_timer_needed+0x2c>)
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	4907      	ldr	r1, [pc, #28]	; (800d6f4 <tcp_timer_needed+0x34>)
 800d6d8:	20fa      	movs	r0, #250	; 0xfa
 800d6da:	f7ff ffd3 	bl	800d684 <sys_timeout>
}
 800d6de:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d6e0:	4b05      	ldr	r3, [pc, #20]	; (800d6f8 <tcp_timer_needed+0x38>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d1f2      	bne.n	800d6ce <tcp_timer_needed+0xe>
 800d6e8:	e7f9      	b.n	800d6de <tcp_timer_needed+0x1e>
 800d6ea:	bf00      	nop
 800d6ec:	20000acc 	.word	0x20000acc
 800d6f0:	20007fac 	.word	0x20007fac
 800d6f4:	0800d6fd 	.word	0x0800d6fd
 800d6f8:	20007fbc 	.word	0x20007fbc

0800d6fc <tcpip_tcp_timer>:
{
 800d6fc:	b508      	push	{r3, lr}
  tcp_tmr();
 800d6fe:	f7fc fcaf 	bl	800a060 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d702:	4b08      	ldr	r3, [pc, #32]	; (800d724 <tcpip_tcp_timer+0x28>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	b12b      	cbz	r3, 800d714 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d708:	2200      	movs	r2, #0
 800d70a:	4907      	ldr	r1, [pc, #28]	; (800d728 <tcpip_tcp_timer+0x2c>)
 800d70c:	20fa      	movs	r0, #250	; 0xfa
 800d70e:	f7ff ffb9 	bl	800d684 <sys_timeout>
}
 800d712:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d714:	4b05      	ldr	r3, [pc, #20]	; (800d72c <tcpip_tcp_timer+0x30>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d1f5      	bne.n	800d708 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800d71c:	4b04      	ldr	r3, [pc, #16]	; (800d730 <tcpip_tcp_timer+0x34>)
 800d71e:	2200      	movs	r2, #0
 800d720:	601a      	str	r2, [r3, #0]
}
 800d722:	e7f6      	b.n	800d712 <tcpip_tcp_timer+0x16>
 800d724:	20007fac 	.word	0x20007fac
 800d728:	0800d6fd 	.word	0x0800d6fd
 800d72c:	20007fbc 	.word	0x20007fbc
 800d730:	20000acc 	.word	0x20000acc

0800d734 <sys_timeouts_init>:
{
 800d734:	b510      	push	{r4, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d736:	2401      	movs	r4, #1
 800d738:	e008      	b.n	800d74c <sys_timeouts_init+0x18>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d73a:	4b06      	ldr	r3, [pc, #24]	; (800d754 <sys_timeouts_init+0x20>)
 800d73c:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 800d740:	4905      	ldr	r1, [pc, #20]	; (800d758 <sys_timeouts_init+0x24>)
 800d742:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 800d746:	f7ff ff9d 	bl	800d684 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d74a:	3401      	adds	r4, #1
 800d74c:	2c09      	cmp	r4, #9
 800d74e:	d9f4      	bls.n	800d73a <sys_timeouts_init+0x6>
}
 800d750:	bd10      	pop	{r4, pc}
 800d752:	bf00      	nop
 800d754:	08019a08 	.word	0x08019a08
 800d758:	0800d649 	.word	0x0800d649

0800d75c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d75c:	b570      	push	{r4, r5, r6, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d75e:	f7f8 fcaf 	bl	80060c0 <sys_now>
 800d762:	4605      	mov	r5, r0
 800d764:	e013      	b.n	800d78e <sys_check_timeouts+0x32>
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d766:	f7fa fc19 	bl	8007f9c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d76a:	4b0d      	ldr	r3, [pc, #52]	; (800d7a0 <sys_check_timeouts+0x44>)
 800d76c:	6819      	ldr	r1, [r3, #0]
    if (tmptimeout == NULL) {
 800d76e:	b1b1      	cbz	r1, 800d79e <sys_check_timeouts+0x42>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d770:	684b      	ldr	r3, [r1, #4]
 800d772:	1aea      	subs	r2, r5, r3
 800d774:	2a00      	cmp	r2, #0
 800d776:	db12      	blt.n	800d79e <sys_check_timeouts+0x42>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d778:	6808      	ldr	r0, [r1, #0]
 800d77a:	4a09      	ldr	r2, [pc, #36]	; (800d7a0 <sys_check_timeouts+0x44>)
 800d77c:	6010      	str	r0, [r2, #0]
    handler = tmptimeout->h;
 800d77e:	688c      	ldr	r4, [r1, #8]
    arg = tmptimeout->arg;
 800d780:	68ce      	ldr	r6, [r1, #12]
    current_timeout_due_time = tmptimeout->time;
 800d782:	4a08      	ldr	r2, [pc, #32]	; (800d7a4 <sys_check_timeouts+0x48>)
 800d784:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d786:	2007      	movs	r0, #7
 800d788:	f7fa f80e 	bl	80077a8 <memp_free>
    if (handler != NULL) {
 800d78c:	b924      	cbnz	r4, 800d798 <sys_check_timeouts+0x3c>
    PBUF_CHECK_FREE_OOSEQ();
 800d78e:	4b06      	ldr	r3, [pc, #24]	; (800d7a8 <sys_check_timeouts+0x4c>)
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d0e9      	beq.n	800d76a <sys_check_timeouts+0xe>
 800d796:	e7e6      	b.n	800d766 <sys_check_timeouts+0xa>
      handler(arg);
 800d798:	4630      	mov	r0, r6
 800d79a:	47a0      	blx	r4
 800d79c:	e7f7      	b.n	800d78e <sys_check_timeouts+0x32>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d79e:	bd70      	pop	{r4, r5, r6, pc}
 800d7a0:	20000ac8 	.word	0x20000ac8
 800d7a4:	20000ac4 	.word	0x20000ac4
 800d7a8:	20007fa4 	.word	0x20007fa4

0800d7ac <udp_new_port>:
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  u16_t n = 0;
 800d7ac:	2000      	movs	r0, #0
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d7ae:	4a10      	ldr	r2, [pc, #64]	; (800d7f0 <udp_new_port+0x44>)
 800d7b0:	8813      	ldrh	r3, [r2, #0]
 800d7b2:	1c59      	adds	r1, r3, #1
 800d7b4:	8011      	strh	r1, [r2, #0]
 800d7b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d009      	beq.n	800d7d2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7be:	4b0d      	ldr	r3, [pc, #52]	; (800d7f4 <udp_new_port+0x48>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	b193      	cbz	r3, 800d7ea <udp_new_port+0x3e>
    if (pcb->local_port == udp_port) {
 800d7c4:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 800d7c6:	4a0a      	ldr	r2, [pc, #40]	; (800d7f0 <udp_new_port+0x44>)
 800d7c8:	8812      	ldrh	r2, [r2, #0]
 800d7ca:	4291      	cmp	r1, r2
 800d7cc:	d006      	beq.n	800d7dc <udp_new_port+0x30>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7d0:	e7f7      	b.n	800d7c2 <udp_new_port+0x16>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d7d2:	4b07      	ldr	r3, [pc, #28]	; (800d7f0 <udp_new_port+0x44>)
 800d7d4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d7d8:	801a      	strh	r2, [r3, #0]
 800d7da:	e7f0      	b.n	800d7be <udp_new_port+0x12>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d7dc:	3001      	adds	r0, #1
 800d7de:	b280      	uxth	r0, r0
 800d7e0:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800d7e4:	d3e3      	bcc.n	800d7ae <udp_new_port+0x2>
        return 0;
 800d7e6:	2000      	movs	r0, #0
      }
      goto again;
    }
  }
  return udp_port;
}
 800d7e8:	4770      	bx	lr
  return udp_port;
 800d7ea:	4b01      	ldr	r3, [pc, #4]	; (800d7f0 <udp_new_port+0x44>)
 800d7ec:	8818      	ldrh	r0, [r3, #0]
 800d7ee:	4770      	bx	lr
 800d7f0:	20000012 	.word	0x20000012
 800d7f4:	20007fc4 	.word	0x20007fc4

0800d7f8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d7f8:	b570      	push	{r4, r5, r6, lr}
 800d7fa:	460d      	mov	r5, r1
 800d7fc:	4614      	mov	r4, r2
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d7fe:	4606      	mov	r6, r0
 800d800:	b1a8      	cbz	r0, 800d82e <udp_input_local_match+0x36>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d802:	b1dd      	cbz	r5, 800d83c <udp_input_local_match+0x44>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d804:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 800d808:	b13a      	cbz	r2, 800d81a <udp_input_local_match+0x22>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d80a:	4b4e      	ldr	r3, [pc, #312]	; (800d944 <udp_input_local_match+0x14c>)
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 800d812:	3301      	adds	r3, #1
 800d814:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d816:	429a      	cmp	r2, r3
 800d818:	d17f      	bne.n	800d91a <udp_input_local_match+0x122>
    return 0;
  }

  /* Dual-stack: PCBs listening to any IP type also listen to any IP address */
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
 800d81a:	7d33      	ldrb	r3, [r6, #20]
 800d81c:	2b2e      	cmp	r3, #46	; 0x2e
 800d81e:	d07e      	beq.n	800d91e <udp_input_local_match+0x126>
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST_RECV */
    return 1;
  }

  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
 800d820:	4a48      	ldr	r2, [pc, #288]	; (800d944 <udp_input_local_match+0x14c>)
 800d822:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800d826:	4293      	cmp	r3, r2
 800d828:	d00f      	beq.n	800d84a <udp_input_local_match+0x52>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
        return 1;
      }
  }

  return 0;
 800d82a:	2000      	movs	r0, #0
}
 800d82c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d82e:	4b46      	ldr	r3, [pc, #280]	; (800d948 <udp_input_local_match+0x150>)
 800d830:	2287      	movs	r2, #135	; 0x87
 800d832:	4946      	ldr	r1, [pc, #280]	; (800d94c <udp_input_local_match+0x154>)
 800d834:	4846      	ldr	r0, [pc, #280]	; (800d950 <udp_input_local_match+0x158>)
 800d836:	f008 f8ab 	bl	8015990 <iprintf>
 800d83a:	e7e2      	b.n	800d802 <udp_input_local_match+0xa>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d83c:	4b42      	ldr	r3, [pc, #264]	; (800d948 <udp_input_local_match+0x150>)
 800d83e:	2288      	movs	r2, #136	; 0x88
 800d840:	4944      	ldr	r1, [pc, #272]	; (800d954 <udp_input_local_match+0x15c>)
 800d842:	4843      	ldr	r0, [pc, #268]	; (800d950 <udp_input_local_match+0x158>)
 800d844:	f008 f8a4 	bl	8015990 <iprintf>
 800d848:	e7dc      	b.n	800d804 <udp_input_local_match+0xc>
    if (broadcast != 0) {
 800d84a:	b17c      	cbz	r4, 800d86c <udp_input_local_match+0x74>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d84c:	2e00      	cmp	r6, #0
 800d84e:	d068      	beq.n	800d922 <udp_input_local_match+0x12a>
 800d850:	6833      	ldr	r3, [r6, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d067      	beq.n	800d926 <udp_input_local_match+0x12e>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d856:	4a3b      	ldr	r2, [pc, #236]	; (800d944 <udp_input_local_match+0x14c>)
 800d858:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d85a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d85e:	d064      	beq.n	800d92a <udp_input_local_match+0x132>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d860:	69e9      	ldr	r1, [r5, #28]
 800d862:	4053      	eors	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d864:	420b      	tst	r3, r1
 800d866:	d062      	beq.n	800d92e <udp_input_local_match+0x136>
  return 0;
 800d868:	2000      	movs	r0, #0
 800d86a:	e7df      	b.n	800d82c <udp_input_local_match+0x34>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d86c:	2e00      	cmp	r6, #0
 800d86e:	d060      	beq.n	800d932 <udp_input_local_match+0x13a>
 800d870:	2b06      	cmp	r3, #6
 800d872:	d00e      	beq.n	800d892 <udp_input_local_match+0x9a>
 800d874:	b32e      	cbz	r6, 800d8c2 <udp_input_local_match+0xca>
 800d876:	6832      	ldr	r2, [r6, #0]
 800d878:	bb2a      	cbnz	r2, 800d8c6 <udp_input_local_match+0xce>
 800d87a:	2201      	movs	r2, #1
 800d87c:	2a00      	cmp	r2, #0
 800d87e:	d15a      	bne.n	800d936 <udp_input_local_match+0x13e>
 800d880:	2b06      	cmp	r3, #6
 800d882:	d022      	beq.n	800d8ca <udp_input_local_match+0xd2>
 800d884:	6832      	ldr	r2, [r6, #0]
 800d886:	4b2f      	ldr	r3, [pc, #188]	; (800d944 <udp_input_local_match+0x14c>)
 800d888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d057      	beq.n	800d93e <udp_input_local_match+0x146>
  return 0;
 800d88e:	4620      	mov	r0, r4
 800d890:	e7cc      	b.n	800d82c <udp_input_local_match+0x34>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d892:	b14e      	cbz	r6, 800d8a8 <udp_input_local_match+0xb0>
 800d894:	6832      	ldr	r2, [r6, #0]
 800d896:	b94a      	cbnz	r2, 800d8ac <udp_input_local_match+0xb4>
 800d898:	6872      	ldr	r2, [r6, #4]
 800d89a:	b962      	cbnz	r2, 800d8b6 <udp_input_local_match+0xbe>
 800d89c:	68b2      	ldr	r2, [r6, #8]
 800d89e:	b962      	cbnz	r2, 800d8ba <udp_input_local_match+0xc2>
 800d8a0:	68f2      	ldr	r2, [r6, #12]
 800d8a2:	b162      	cbz	r2, 800d8be <udp_input_local_match+0xc6>
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	e002      	b.n	800d8ae <udp_input_local_match+0xb6>
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	e000      	b.n	800d8ae <udp_input_local_match+0xb6>
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	2a00      	cmp	r2, #0
 800d8b0:	d0e6      	beq.n	800d880 <udp_input_local_match+0x88>
        return 1;
 800d8b2:	2001      	movs	r0, #1
 800d8b4:	e7ba      	b.n	800d82c <udp_input_local_match+0x34>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	e7f9      	b.n	800d8ae <udp_input_local_match+0xb6>
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	e7f7      	b.n	800d8ae <udp_input_local_match+0xb6>
 800d8be:	2201      	movs	r2, #1
 800d8c0:	e7f5      	b.n	800d8ae <udp_input_local_match+0xb6>
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	e7da      	b.n	800d87c <udp_input_local_match+0x84>
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	e7d8      	b.n	800d87c <udp_input_local_match+0x84>
 800d8ca:	6832      	ldr	r2, [r6, #0]
 800d8cc:	4b1d      	ldr	r3, [pc, #116]	; (800d944 <udp_input_local_match+0x14c>)
 800d8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d003      	beq.n	800d8dc <udp_input_local_match+0xe4>
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	bb83      	cbnz	r3, 800d93a <udp_input_local_match+0x142>
  return 0;
 800d8d8:	4620      	mov	r0, r4
 800d8da:	e7a7      	b.n	800d82c <udp_input_local_match+0x34>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d8dc:	6872      	ldr	r2, [r6, #4]
 800d8de:	4b19      	ldr	r3, [pc, #100]	; (800d944 <udp_input_local_match+0x14c>)
 800d8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d001      	beq.n	800d8ea <udp_input_local_match+0xf2>
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	e7f5      	b.n	800d8d6 <udp_input_local_match+0xde>
 800d8ea:	68b2      	ldr	r2, [r6, #8]
 800d8ec:	4b15      	ldr	r3, [pc, #84]	; (800d944 <udp_input_local_match+0x14c>)
 800d8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d001      	beq.n	800d8f8 <udp_input_local_match+0x100>
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	e7ee      	b.n	800d8d6 <udp_input_local_match+0xde>
 800d8f8:	68f2      	ldr	r2, [r6, #12]
 800d8fa:	4b12      	ldr	r3, [pc, #72]	; (800d944 <udp_input_local_match+0x14c>)
 800d8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d001      	beq.n	800d906 <udp_input_local_match+0x10e>
 800d902:	2300      	movs	r3, #0
 800d904:	e7e7      	b.n	800d8d6 <udp_input_local_match+0xde>
 800d906:	7c32      	ldrb	r2, [r6, #16]
 800d908:	4b0e      	ldr	r3, [pc, #56]	; (800d944 <udp_input_local_match+0x14c>)
 800d90a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d90e:	429a      	cmp	r2, r3
 800d910:	d001      	beq.n	800d916 <udp_input_local_match+0x11e>
 800d912:	2300      	movs	r3, #0
 800d914:	e7df      	b.n	800d8d6 <udp_input_local_match+0xde>
 800d916:	2301      	movs	r3, #1
 800d918:	e7dd      	b.n	800d8d6 <udp_input_local_match+0xde>
    return 0;
 800d91a:	2000      	movs	r0, #0
 800d91c:	e786      	b.n	800d82c <udp_input_local_match+0x34>
    return 1;
 800d91e:	2001      	movs	r0, #1
 800d920:	e784      	b.n	800d82c <udp_input_local_match+0x34>
          return 1;
 800d922:	2001      	movs	r0, #1
 800d924:	e782      	b.n	800d82c <udp_input_local_match+0x34>
 800d926:	2001      	movs	r0, #1
 800d928:	e780      	b.n	800d82c <udp_input_local_match+0x34>
 800d92a:	2001      	movs	r0, #1
 800d92c:	e77e      	b.n	800d82c <udp_input_local_match+0x34>
 800d92e:	2001      	movs	r0, #1
 800d930:	e77c      	b.n	800d82c <udp_input_local_match+0x34>
        return 1;
 800d932:	2001      	movs	r0, #1
 800d934:	e77a      	b.n	800d82c <udp_input_local_match+0x34>
 800d936:	2001      	movs	r0, #1
 800d938:	e778      	b.n	800d82c <udp_input_local_match+0x34>
 800d93a:	2001      	movs	r0, #1
 800d93c:	e776      	b.n	800d82c <udp_input_local_match+0x34>
 800d93e:	2001      	movs	r0, #1
 800d940:	e774      	b.n	800d82c <udp_input_local_match+0x34>
 800d942:	bf00      	nop
 800d944:	20003e34 	.word	0x20003e34
 800d948:	08019a58 	.word	0x08019a58
 800d94c:	08019a88 	.word	0x08019a88
 800d950:	08016bb4 	.word	0x08016bb4
 800d954:	08019aac 	.word	0x08019aac

0800d958 <udp_init>:
{
 800d958:	b508      	push	{r3, lr}
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d95a:	f008 f8a7 	bl	8015aac <rand>
 800d95e:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800d962:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800d966:	4b01      	ldr	r3, [pc, #4]	; (800d96c <udp_init+0x14>)
 800d968:	8018      	strh	r0, [r3, #0]
}
 800d96a:	bd08      	pop	{r3, pc}
 800d96c:	20000012 	.word	0x20000012

0800d970 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d974:	b083      	sub	sp, #12
 800d976:	460f      	mov	r7, r1

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d978:	4682      	mov	sl, r0
 800d97a:	b1d8      	cbz	r0, 800d9b4 <udp_input+0x44>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d97c:	b30f      	cbz	r7, 800d9c2 <udp_input+0x52>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d97e:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 800d982:	2b07      	cmp	r3, #7
 800d984:	d924      	bls.n	800d9d0 <udp_input+0x60>
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d986:	f8da 4004 	ldr.w	r4, [sl, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d98a:	4b97      	ldr	r3, [pc, #604]	; (800dbe8 <udp_input+0x278>)
 800d98c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d990:	2b06      	cmp	r3, #6
 800d992:	d121      	bne.n	800d9d8 <udp_input+0x68>
 800d994:	f04f 0800 	mov.w	r8, #0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d998:	8820      	ldrh	r0, [r4, #0]
 800d99a:	f7f9 f86f 	bl	8006a7c <lwip_htons>
 800d99e:	4681      	mov	r9, r0
  dest = lwip_ntohs(udphdr->dest);
 800d9a0:	8860      	ldrh	r0, [r4, #2]
 800d9a2:	f7f9 f86b 	bl	8006a7c <lwip_htons>
 800d9a6:	4605      	mov	r5, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9a8:	4b90      	ldr	r3, [pc, #576]	; (800dbec <udp_input+0x27c>)
 800d9aa:	681c      	ldr	r4, [r3, #0]
  uncon_pcb = NULL;
 800d9ac:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800d9b0:	465e      	mov	r6, fp
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9b2:	e01e      	b.n	800d9f2 <udp_input+0x82>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d9b4:	4b8e      	ldr	r3, [pc, #568]	; (800dbf0 <udp_input+0x280>)
 800d9b6:	22cf      	movs	r2, #207	; 0xcf
 800d9b8:	498e      	ldr	r1, [pc, #568]	; (800dbf4 <udp_input+0x284>)
 800d9ba:	488f      	ldr	r0, [pc, #572]	; (800dbf8 <udp_input+0x288>)
 800d9bc:	f007 ffe8 	bl	8015990 <iprintf>
 800d9c0:	e7dc      	b.n	800d97c <udp_input+0xc>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d9c2:	4b8b      	ldr	r3, [pc, #556]	; (800dbf0 <udp_input+0x280>)
 800d9c4:	22d0      	movs	r2, #208	; 0xd0
 800d9c6:	498d      	ldr	r1, [pc, #564]	; (800dbfc <udp_input+0x28c>)
 800d9c8:	488b      	ldr	r0, [pc, #556]	; (800dbf8 <udp_input+0x288>)
 800d9ca:	f007 ffe1 	bl	8015990 <iprintf>
 800d9ce:	e7d6      	b.n	800d97e <udp_input+0xe>
    pbuf_free(p);
 800d9d0:	4650      	mov	r0, sl
 800d9d2:	f7fa fb8d 	bl	80080f0 <pbuf_free>
    goto end;
 800d9d6:	e078      	b.n	800daca <udp_input+0x15a>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d9d8:	4b83      	ldr	r3, [pc, #524]	; (800dbe8 <udp_input+0x278>)
 800d9da:	6819      	ldr	r1, [r3, #0]
 800d9dc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d9de:	f003 fae9 	bl	8010fb4 <ip4_addr_isbroadcast_u32>
 800d9e2:	4680      	mov	r8, r0
 800d9e4:	e7d8      	b.n	800d998 <udp_input+0x28>
    if ((pcb->local_port == dest) &&
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
        if (uncon_pcb == NULL) {
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d9e6:	46a3      	mov	fp, r4
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d9e8:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 800d9ea:	4599      	cmp	r9, r3
 800d9ec:	d02e      	beq.n	800da4c <udp_input+0xdc>
        }
        break;
      }
    }

    prev = pcb;
 800d9ee:	4626      	mov	r6, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9f0:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800d9f2:	2c00      	cmp	r4, #0
 800d9f4:	d053      	beq.n	800da9e <udp_input+0x12e>
    if ((pcb->local_port == dest) &&
 800d9f6:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800d9f8:	429d      	cmp	r5, r3
 800d9fa:	d1f8      	bne.n	800d9ee <udp_input+0x7e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d9fc:	4642      	mov	r2, r8
 800d9fe:	4639      	mov	r1, r7
 800da00:	4620      	mov	r0, r4
 800da02:	f7ff fef9 	bl	800d7f8 <udp_input_local_match>
    if ((pcb->local_port == dest) &&
 800da06:	2800      	cmp	r0, #0
 800da08:	d0f1      	beq.n	800d9ee <udp_input+0x7e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800da0a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800da0e:	f013 0f04 	tst.w	r3, #4
 800da12:	d1e9      	bne.n	800d9e8 <udp_input+0x78>
        if (uncon_pcb == NULL) {
 800da14:	f1bb 0f00 	cmp.w	fp, #0
 800da18:	d0e5      	beq.n	800d9e6 <udp_input+0x76>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800da1a:	f1b8 0f00 	cmp.w	r8, #0
 800da1e:	d0e3      	beq.n	800d9e8 <udp_input+0x78>
 800da20:	4b71      	ldr	r3, [pc, #452]	; (800dbe8 <udp_input+0x278>)
 800da22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da28:	d1de      	bne.n	800d9e8 <udp_input+0x78>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800da2a:	f89b 3014 	ldrb.w	r3, [fp, #20]
 800da2e:	b923      	cbnz	r3, 800da3a <udp_input+0xca>
 800da30:	f8db 2000 	ldr.w	r2, [fp]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	429a      	cmp	r2, r3
 800da38:	d0d6      	beq.n	800d9e8 <udp_input+0x78>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800da3a:	7d23      	ldrb	r3, [r4, #20]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d1d3      	bne.n	800d9e8 <udp_input+0x78>
 800da40:	6822      	ldr	r2, [r4, #0]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	429a      	cmp	r2, r3
 800da46:	d1cf      	bne.n	800d9e8 <udp_input+0x78>
              uncon_pcb = pcb;
 800da48:	46a3      	mov	fp, r4
 800da4a:	e7cd      	b.n	800d9e8 <udp_input+0x78>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800da4c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
      if ((pcb->remote_port == src) &&
 800da50:	2b06      	cmp	r3, #6
 800da52:	d00e      	beq.n	800da72 <udp_input+0x102>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800da54:	69a2      	ldr	r2, [r4, #24]
 800da56:	b1da      	cbz	r2, 800da90 <udp_input+0x120>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800da58:	4a63      	ldr	r2, [pc, #396]	; (800dbe8 <udp_input+0x278>)
 800da5a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
      if ((pcb->remote_port == src) &&
 800da5e:	4293      	cmp	r3, r2
 800da60:	d1c5      	bne.n	800d9ee <udp_input+0x7e>
 800da62:	2b06      	cmp	r3, #6
 800da64:	d03a      	beq.n	800dadc <udp_input+0x16c>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800da66:	69a2      	ldr	r2, [r4, #24]
 800da68:	4b5f      	ldr	r3, [pc, #380]	; (800dbe8 <udp_input+0x278>)
 800da6a:	695b      	ldr	r3, [r3, #20]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d1be      	bne.n	800d9ee <udp_input+0x7e>
 800da70:	e00e      	b.n	800da90 <udp_input+0x120>
 800da72:	69a2      	ldr	r2, [r4, #24]
 800da74:	b94a      	cbnz	r2, 800da8a <udp_input+0x11a>
 800da76:	69e2      	ldr	r2, [r4, #28]
 800da78:	2a00      	cmp	r2, #0
 800da7a:	d129      	bne.n	800dad0 <udp_input+0x160>
 800da7c:	6a22      	ldr	r2, [r4, #32]
 800da7e:	2a00      	cmp	r2, #0
 800da80:	d128      	bne.n	800dad4 <udp_input+0x164>
 800da82:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800da84:	b342      	cbz	r2, 800dad8 <udp_input+0x168>
 800da86:	2200      	movs	r2, #0
 800da88:	e000      	b.n	800da8c <udp_input+0x11c>
 800da8a:	2200      	movs	r2, #0
      if ((pcb->remote_port == src) &&
 800da8c:	2a00      	cmp	r2, #0
 800da8e:	d0e3      	beq.n	800da58 <udp_input+0xe8>
        if (prev != NULL) {
 800da90:	b12e      	cbz	r6, 800da9e <udp_input+0x12e>
          prev->next = pcb->next;
 800da92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da94:	6373      	str	r3, [r6, #52]	; 0x34
          pcb->next = udp_pcbs;
 800da96:	4b55      	ldr	r3, [pc, #340]	; (800dbec <udp_input+0x27c>)
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	6362      	str	r2, [r4, #52]	; 0x34
          udp_pcbs = pcb;
 800da9c:	601c      	str	r4, [r3, #0]
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800da9e:	2c00      	cmp	r4, #0
 800daa0:	d045      	beq.n	800db2e <udp_input+0x1be>
    pcb = uncon_pcb;
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800daa2:	2c00      	cmp	r4, #0
 800daa4:	d045      	beq.n	800db32 <udp_input+0x1c2>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800daa6:	2108      	movs	r1, #8
 800daa8:	4650      	mov	r0, sl
 800daaa:	f7fa fadb 	bl	8008064 <pbuf_remove_header>
 800daae:	2800      	cmp	r0, #0
 800dab0:	d15c      	bne.n	800db6c <udp_input+0x1fc>
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
      goto end;
    }

    if (pcb != NULL) {
 800dab2:	2c00      	cmp	r4, #0
 800dab4:	d069      	beq.n	800db8a <udp_input+0x21a>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800dab6:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800dab8:	2d00      	cmp	r5, #0
 800daba:	d062      	beq.n	800db82 <udp_input+0x212>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800dabc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800dabe:	f8cd 9000 	str.w	r9, [sp]
 800dac2:	4b4f      	ldr	r3, [pc, #316]	; (800dc00 <udp_input+0x290>)
 800dac4:	4652      	mov	r2, sl
 800dac6:	4621      	mov	r1, r4
 800dac8:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800daca:	b003      	add	sp, #12
 800dacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (ip_addr_isany_val(pcb->remote_ip) ||
 800dad0:	2200      	movs	r2, #0
 800dad2:	e7db      	b.n	800da8c <udp_input+0x11c>
 800dad4:	2200      	movs	r2, #0
 800dad6:	e7d9      	b.n	800da8c <udp_input+0x11c>
 800dad8:	2201      	movs	r2, #1
 800dada:	e7d7      	b.n	800da8c <udp_input+0x11c>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800dadc:	69a2      	ldr	r2, [r4, #24]
 800dade:	4b42      	ldr	r3, [pc, #264]	; (800dbe8 <udp_input+0x278>)
 800dae0:	695b      	ldr	r3, [r3, #20]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d003      	beq.n	800daee <udp_input+0x17e>
 800dae6:	2300      	movs	r3, #0
          (ip_addr_isany_val(pcb->remote_ip) ||
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d080      	beq.n	800d9ee <udp_input+0x7e>
 800daec:	e7d0      	b.n	800da90 <udp_input+0x120>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800daee:	69e2      	ldr	r2, [r4, #28]
 800daf0:	4b3d      	ldr	r3, [pc, #244]	; (800dbe8 <udp_input+0x278>)
 800daf2:	699b      	ldr	r3, [r3, #24]
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d001      	beq.n	800dafc <udp_input+0x18c>
 800daf8:	2300      	movs	r3, #0
 800dafa:	e7f5      	b.n	800dae8 <udp_input+0x178>
 800dafc:	6a22      	ldr	r2, [r4, #32]
 800dafe:	4b3a      	ldr	r3, [pc, #232]	; (800dbe8 <udp_input+0x278>)
 800db00:	69db      	ldr	r3, [r3, #28]
 800db02:	429a      	cmp	r2, r3
 800db04:	d001      	beq.n	800db0a <udp_input+0x19a>
 800db06:	2300      	movs	r3, #0
 800db08:	e7ee      	b.n	800dae8 <udp_input+0x178>
 800db0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800db0c:	4b36      	ldr	r3, [pc, #216]	; (800dbe8 <udp_input+0x278>)
 800db0e:	6a1b      	ldr	r3, [r3, #32]
 800db10:	429a      	cmp	r2, r3
 800db12:	d001      	beq.n	800db18 <udp_input+0x1a8>
 800db14:	2300      	movs	r3, #0
 800db16:	e7e7      	b.n	800dae8 <udp_input+0x178>
 800db18:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800db1c:	4b32      	ldr	r3, [pc, #200]	; (800dbe8 <udp_input+0x278>)
 800db1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800db22:	429a      	cmp	r2, r3
 800db24:	d001      	beq.n	800db2a <udp_input+0x1ba>
 800db26:	2300      	movs	r3, #0
 800db28:	e7de      	b.n	800dae8 <udp_input+0x178>
 800db2a:	2301      	movs	r3, #1
 800db2c:	e7dc      	b.n	800dae8 <udp_input+0x178>
    pcb = uncon_pcb;
 800db2e:	465c      	mov	r4, fp
 800db30:	e7b7      	b.n	800daa2 <udp_input+0x132>
    if (ip_current_is_v6()) {
 800db32:	4b2d      	ldr	r3, [pc, #180]	; (800dbe8 <udp_input+0x278>)
 800db34:	68db      	ldr	r3, [r3, #12]
 800db36:	b17b      	cbz	r3, 800db58 <udp_input+0x1e8>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
 800db38:	4932      	ldr	r1, [pc, #200]	; (800dc04 <udp_input+0x294>)
 800db3a:	4638      	mov	r0, r7
 800db3c:	f7fa f8ec 	bl	8007d18 <netif_get_ip6_addr_match>
 800db40:	43c3      	mvns	r3, r0
 800db42:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    if (!ip_current_is_v6()) {
 800db46:	4a28      	ldr	r2, [pc, #160]	; (800dbe8 <udp_input+0x278>)
 800db48:	68d2      	ldr	r2, [r2, #12]
 800db4a:	b13a      	cbz	r2, 800db5c <udp_input+0x1ec>
  if (for_us) {
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d1aa      	bne.n	800daa6 <udp_input+0x136>
    pbuf_free(p);
 800db50:	4650      	mov	r0, sl
 800db52:	f7fa facd 	bl	80080f0 <pbuf_free>
  return;
 800db56:	e7b8      	b.n	800daca <udp_input+0x15a>
  u8_t for_us = 0;
 800db58:	2300      	movs	r3, #0
 800db5a:	e7f4      	b.n	800db46 <udp_input+0x1d6>
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	4a22      	ldr	r2, [pc, #136]	; (800dbe8 <udp_input+0x278>)
 800db60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800db62:	4293      	cmp	r3, r2
 800db64:	bf14      	ite	ne
 800db66:	2300      	movne	r3, #0
 800db68:	2301      	moveq	r3, #1
 800db6a:	e7ef      	b.n	800db4c <udp_input+0x1dc>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800db6c:	4b20      	ldr	r3, [pc, #128]	; (800dbf0 <udp_input+0x280>)
 800db6e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800db72:	4925      	ldr	r1, [pc, #148]	; (800dc08 <udp_input+0x298>)
 800db74:	4820      	ldr	r0, [pc, #128]	; (800dbf8 <udp_input+0x288>)
 800db76:	f007 ff0b 	bl	8015990 <iprintf>
      pbuf_free(p);
 800db7a:	4650      	mov	r0, sl
 800db7c:	f7fa fab8 	bl	80080f0 <pbuf_free>
      goto end;
 800db80:	e7a3      	b.n	800daca <udp_input+0x15a>
        pbuf_free(p);
 800db82:	4650      	mov	r0, sl
 800db84:	f7fa fab4 	bl	80080f0 <pbuf_free>
        goto end;
 800db88:	e79f      	b.n	800daca <udp_input+0x15a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800db8a:	f1b8 0f00 	cmp.w	r8, #0
 800db8e:	d10c      	bne.n	800dbaa <udp_input+0x23a>
 800db90:	4b15      	ldr	r3, [pc, #84]	; (800dbe8 <udp_input+0x278>)
 800db92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800db96:	2b06      	cmp	r3, #6
 800db98:	d00b      	beq.n	800dbb2 <udp_input+0x242>
 800db9a:	4b13      	ldr	r3, [pc, #76]	; (800dbe8 <udp_input+0x278>)
 800db9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dba2:	3be0      	subs	r3, #224	; 0xe0
 800dba4:	bf18      	it	ne
 800dba6:	2301      	movne	r3, #1
 800dba8:	b953      	cbnz	r3, 800dbc0 <udp_input+0x250>
      pbuf_free(p);
 800dbaa:	4650      	mov	r0, sl
 800dbac:	f7fa faa0 	bl	80080f0 <pbuf_free>
 800dbb0:	e78b      	b.n	800daca <udp_input+0x15a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800dbb2:	4b0d      	ldr	r3, [pc, #52]	; (800dbe8 <udp_input+0x278>)
 800dbb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800dbb8:	3bff      	subs	r3, #255	; 0xff
 800dbba:	bf18      	it	ne
 800dbbc:	2301      	movne	r3, #1
 800dbbe:	e7f3      	b.n	800dba8 <udp_input+0x238>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800dbc0:	4c09      	ldr	r4, [pc, #36]	; (800dbe8 <udp_input+0x278>)
 800dbc2:	8a21      	ldrh	r1, [r4, #16]
 800dbc4:	3108      	adds	r1, #8
 800dbc6:	b209      	sxth	r1, r1
 800dbc8:	4650      	mov	r0, sl
 800dbca:	f7fa fa8b 	bl	80080e4 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800dbce:	68e3      	ldr	r3, [r4, #12]
 800dbd0:	b123      	cbz	r3, 800dbdc <udp_input+0x26c>
 800dbd2:	2104      	movs	r1, #4
 800dbd4:	4650      	mov	r0, sl
 800dbd6:	f003 ff97 	bl	8011b08 <icmp6_dest_unreach>
 800dbda:	e7e6      	b.n	800dbaa <udp_input+0x23a>
 800dbdc:	2103      	movs	r1, #3
 800dbde:	4650      	mov	r0, sl
 800dbe0:	f002 fdb6 	bl	8010750 <icmp_dest_unreach>
 800dbe4:	e7e1      	b.n	800dbaa <udp_input+0x23a>
 800dbe6:	bf00      	nop
 800dbe8:	20003e34 	.word	0x20003e34
 800dbec:	20007fc4 	.word	0x20007fc4
 800dbf0:	08019a58 	.word	0x08019a58
 800dbf4:	08019ad4 	.word	0x08019ad4
 800dbf8:	08016bb4 	.word	0x08016bb4
 800dbfc:	08019aec 	.word	0x08019aec
 800dc00:	20003e48 	.word	0x20003e48
 800dc04:	20003e60 	.word	0x20003e60
 800dc08:	08019b08 	.word	0x08019b08

0800dc0c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dc0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc10:	b086      	sub	sp, #24
 800dc12:	4604      	mov	r4, r0
 800dc14:	4616      	mov	r6, r2

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dc16:	460d      	mov	r5, r1
 800dc18:	b139      	cbz	r1, 800dc2a <udp_bind+0x1e>
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc1a:	b144      	cbz	r4, 800dc2e <udp_bind+0x22>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dc1c:	4b91      	ldr	r3, [pc, #580]	; (800de64 <udp_bind+0x258>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	b17b      	cbz	r3, 800dc42 <udp_bind+0x36>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800dc22:	429c      	cmp	r4, r3
 800dc24:	d018      	beq.n	800dc58 <udp_bind+0x4c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dc26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc28:	e7fa      	b.n	800dc20 <udp_bind+0x14>
    ipaddr = IP4_ADDR_ANY;
 800dc2a:	4d8f      	ldr	r5, [pc, #572]	; (800de68 <udp_bind+0x25c>)
 800dc2c:	e7f5      	b.n	800dc1a <udp_bind+0xe>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc2e:	4b8f      	ldr	r3, [pc, #572]	; (800de6c <udp_bind+0x260>)
 800dc30:	f240 32b7 	movw	r2, #951	; 0x3b7
 800dc34:	498e      	ldr	r1, [pc, #568]	; (800de70 <udp_bind+0x264>)
 800dc36:	488f      	ldr	r0, [pc, #572]	; (800de74 <udp_bind+0x268>)
 800dc38:	f007 feaa 	bl	8015990 <iprintf>
 800dc3c:	f06f 000f 	mvn.w	r0, #15
 800dc40:	e082      	b.n	800dd48 <udp_bind+0x13c>
  rebind = 0;
 800dc42:	f04f 0800 	mov.w	r8, #0
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  /* If the given IP address should have a zone but doesn't, assign one now.
   * This is legacy support: scope-aware callers should always provide properly
   * zoned source addresses. Do the zone selection before the address-in-use
   * check below; as such we have to make a temporary copy of the address. */
  if (IP_IS_V6(ipaddr) && ip6_addr_lacks_zone(ip_2_ip6(ipaddr), IP6_UNKNOWN)) {
 800dc46:	b115      	cbz	r5, 800dc4e <udp_bind+0x42>
 800dc48:	7d2b      	ldrb	r3, [r5, #20]
 800dc4a:	2b06      	cmp	r3, #6
 800dc4c:	d007      	beq.n	800dc5e <udp_bind+0x52>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800dc4e:	2e00      	cmp	r6, #0
 800dc50:	d059      	beq.n	800dd06 <udp_bind+0xfa>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dc52:	4b84      	ldr	r3, [pc, #528]	; (800de64 <udp_bind+0x258>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	e0e2      	b.n	800de1e <udp_bind+0x212>
      rebind = 1;
 800dc58:	f04f 0801 	mov.w	r8, #1
 800dc5c:	e7f3      	b.n	800dc46 <udp_bind+0x3a>
  if (IP_IS_V6(ipaddr) && ip6_addr_lacks_zone(ip_2_ip6(ipaddr), IP6_UNKNOWN)) {
 800dc5e:	7c2f      	ldrb	r7, [r5, #16]
 800dc60:	2f00      	cmp	r7, #0
 800dc62:	d1f4      	bne.n	800dc4e <udp_bind+0x42>
 800dc64:	682a      	ldr	r2, [r5, #0]
 800dc66:	f24c 00ff 	movw	r0, #49407	; 0xc0ff
 800dc6a:	4010      	ands	r0, r2
 800dc6c:	f248 01fe 	movw	r1, #33022	; 0x80fe
 800dc70:	4288      	cmp	r0, r1
 800dc72:	d00b      	beq.n	800dc8c <udp_bind+0x80>
 800dc74:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800dc78:	0412      	lsls	r2, r2, #16
 800dc7a:	0c12      	lsrs	r2, r2, #16
 800dc7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dc80:	428a      	cmp	r2, r1
 800dc82:	d003      	beq.n	800dc8c <udp_bind+0x80>
 800dc84:	f240 21ff 	movw	r1, #767	; 0x2ff
 800dc88:	428a      	cmp	r2, r1
 800dc8a:	d1e0      	bne.n	800dc4e <udp_bind+0x42>
    ip_addr_copy(zoned_ipaddr, *ipaddr);
 800dc8c:	f88d 3014 	strb.w	r3, [sp, #20]
 800dc90:	7d2b      	ldrb	r3, [r5, #20]
 800dc92:	2b06      	cmp	r3, #6
 800dc94:	d029      	beq.n	800dcea <udp_bind+0xde>
 800dc96:	682b      	ldr	r3, [r5, #0]
 800dc98:	9300      	str	r3, [sp, #0]
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	9303      	str	r3, [sp, #12]
 800dc9e:	9302      	str	r3, [sp, #8]
 800dca0:	9301      	str	r3, [sp, #4]
 800dca2:	f88d 3010 	strb.w	r3, [sp, #16]
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
 800dca6:	4669      	mov	r1, sp
 800dca8:	4668      	mov	r0, sp
 800dcaa:	f003 ffa3 	bl	8011bf4 <ip6_route>
 800dcae:	4602      	mov	r2, r0
 800dcb0:	b338      	cbz	r0, 800dd02 <udp_bind+0xf6>
 800dcb2:	9b00      	ldr	r3, [sp, #0]
 800dcb4:	f24c 00ff 	movw	r0, #49407	; 0xc0ff
 800dcb8:	4018      	ands	r0, r3
 800dcba:	f248 01fe 	movw	r1, #33022	; 0x80fe
 800dcbe:	4288      	cmp	r0, r1
 800dcc0:	d00b      	beq.n	800dcda <udp_bind+0xce>
 800dcc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dcc6:	041b      	lsls	r3, r3, #16
 800dcc8:	0c1b      	lsrs	r3, r3, #16
 800dcca:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dcce:	428b      	cmp	r3, r1
 800dcd0:	d003      	beq.n	800dcda <udp_bind+0xce>
 800dcd2:	f240 21ff 	movw	r1, #767	; 0x2ff
 800dcd6:	428b      	cmp	r3, r1
 800dcd8:	d103      	bne.n	800dce2 <udp_bind+0xd6>
 800dcda:	f892 70e2 	ldrb.w	r7, [r2, #226]	; 0xe2
 800dcde:	3701      	adds	r7, #1
 800dce0:	b2ff      	uxtb	r7, r7
 800dce2:	f88d 7010 	strb.w	r7, [sp, #16]
    ipaddr = &zoned_ipaddr;
 800dce6:	466d      	mov	r5, sp
 800dce8:	e7b1      	b.n	800dc4e <udp_bind+0x42>
    ip_addr_copy(zoned_ipaddr, *ipaddr);
 800dcea:	682b      	ldr	r3, [r5, #0]
 800dcec:	9300      	str	r3, [sp, #0]
 800dcee:	686b      	ldr	r3, [r5, #4]
 800dcf0:	9301      	str	r3, [sp, #4]
 800dcf2:	68ab      	ldr	r3, [r5, #8]
 800dcf4:	9302      	str	r3, [sp, #8]
 800dcf6:	68eb      	ldr	r3, [r5, #12]
 800dcf8:	9303      	str	r3, [sp, #12]
 800dcfa:	7c2b      	ldrb	r3, [r5, #16]
 800dcfc:	f88d 3010 	strb.w	r3, [sp, #16]
 800dd00:	e7d1      	b.n	800dca6 <udp_bind+0x9a>
    ipaddr = &zoned_ipaddr;
 800dd02:	466d      	mov	r5, sp
 800dd04:	e7a3      	b.n	800dc4e <udp_bind+0x42>
    port = udp_new_port();
 800dd06:	f7ff fd51 	bl	800d7ac <udp_new_port>
    if (port == 0) {
 800dd0a:	4606      	mov	r6, r0
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	f000 80d0 	beq.w	800deb2 <udp_bind+0x2a6>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800dd12:	b10c      	cbz	r4, 800dd18 <udp_bind+0x10c>
 800dd14:	7d2b      	ldrb	r3, [r5, #20]
 800dd16:	7523      	strb	r3, [r4, #20]
 800dd18:	b11d      	cbz	r5, 800dd22 <udp_bind+0x116>
 800dd1a:	7d2b      	ldrb	r3, [r5, #20]
 800dd1c:	2b06      	cmp	r3, #6
 800dd1e:	f000 80ab 	beq.w	800de78 <udp_bind+0x26c>
 800dd22:	2d00      	cmp	r5, #0
 800dd24:	f000 80c3 	beq.w	800deae <udp_bind+0x2a2>
 800dd28:	682b      	ldr	r3, [r5, #0]
 800dd2a:	6023      	str	r3, [r4, #0]
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	60e3      	str	r3, [r4, #12]
 800dd30:	60a3      	str	r3, [r4, #8]
 800dd32:	6063      	str	r3, [r4, #4]
 800dd34:	7423      	strb	r3, [r4, #16]

  pcb->local_port = port;
 800dd36:	8766      	strh	r6, [r4, #58]	; 0x3a
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800dd38:	f1b8 0f00 	cmp.w	r8, #0
 800dd3c:	d103      	bne.n	800dd46 <udp_bind+0x13a>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800dd3e:	4b49      	ldr	r3, [pc, #292]	; (800de64 <udp_bind+0x258>)
 800dd40:	681a      	ldr	r2, [r3, #0]
 800dd42:	6362      	str	r2, [r4, #52]	; 0x34
    udp_pcbs = pcb;
 800dd44:	601c      	str	r4, [r3, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800dd46:	2000      	movs	r0, #0
}
 800dd48:	b006      	add	sp, #24
 800dd4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if ((ipcb->local_port == port) &&
 800dd4e:	2a06      	cmp	r2, #6
 800dd50:	d006      	beq.n	800dd60 <udp_bind+0x154>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dd52:	681f      	ldr	r7, [r3, #0]
 800dd54:	6828      	ldr	r0, [r5, #0]
 800dd56:	4287      	cmp	r7, r0
 800dd58:	d16d      	bne.n	800de36 <udp_bind+0x22a>
            return ERR_USE;
 800dd5a:	f06f 0007 	mvn.w	r0, #7
 800dd5e:	e7f3      	b.n	800dd48 <udp_bind+0x13c>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dd60:	681f      	ldr	r7, [r3, #0]
 800dd62:	6828      	ldr	r0, [r5, #0]
 800dd64:	4287      	cmp	r7, r0
 800dd66:	d005      	beq.n	800dd74 <udp_bind+0x168>
 800dd68:	2000      	movs	r0, #0
          if ((ipcb->local_port == port) &&
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	d063      	beq.n	800de36 <udp_bind+0x22a>
            return ERR_USE;
 800dd6e:	f06f 0007 	mvn.w	r0, #7
 800dd72:	e7e9      	b.n	800dd48 <udp_bind+0x13c>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dd74:	685f      	ldr	r7, [r3, #4]
 800dd76:	6868      	ldr	r0, [r5, #4]
 800dd78:	4287      	cmp	r7, r0
 800dd7a:	d001      	beq.n	800dd80 <udp_bind+0x174>
 800dd7c:	2000      	movs	r0, #0
 800dd7e:	e7f4      	b.n	800dd6a <udp_bind+0x15e>
 800dd80:	689f      	ldr	r7, [r3, #8]
 800dd82:	68a8      	ldr	r0, [r5, #8]
 800dd84:	4287      	cmp	r7, r0
 800dd86:	d001      	beq.n	800dd8c <udp_bind+0x180>
 800dd88:	2000      	movs	r0, #0
 800dd8a:	e7ee      	b.n	800dd6a <udp_bind+0x15e>
 800dd8c:	68df      	ldr	r7, [r3, #12]
 800dd8e:	68e8      	ldr	r0, [r5, #12]
 800dd90:	4287      	cmp	r7, r0
 800dd92:	d001      	beq.n	800dd98 <udp_bind+0x18c>
 800dd94:	2000      	movs	r0, #0
 800dd96:	e7e8      	b.n	800dd6a <udp_bind+0x15e>
 800dd98:	7c1f      	ldrb	r7, [r3, #16]
 800dd9a:	7c28      	ldrb	r0, [r5, #16]
 800dd9c:	4287      	cmp	r7, r0
 800dd9e:	d001      	beq.n	800dda4 <udp_bind+0x198>
 800dda0:	2000      	movs	r0, #0
 800dda2:	e7e2      	b.n	800dd6a <udp_bind+0x15e>
 800dda4:	2001      	movs	r0, #1
 800dda6:	e7e0      	b.n	800dd6a <udp_bind+0x15e>
 800dda8:	b14d      	cbz	r5, 800ddbe <udp_bind+0x1b2>
 800ddaa:	6829      	ldr	r1, [r5, #0]
 800ddac:	b949      	cbnz	r1, 800ddc2 <udp_bind+0x1b6>
 800ddae:	6869      	ldr	r1, [r5, #4]
 800ddb0:	b969      	cbnz	r1, 800ddce <udp_bind+0x1c2>
 800ddb2:	68a9      	ldr	r1, [r5, #8]
 800ddb4:	b969      	cbnz	r1, 800ddd2 <udp_bind+0x1c6>
 800ddb6:	68e9      	ldr	r1, [r5, #12]
 800ddb8:	b169      	cbz	r1, 800ddd6 <udp_bind+0x1ca>
 800ddba:	2100      	movs	r1, #0
 800ddbc:	e002      	b.n	800ddc4 <udp_bind+0x1b8>
 800ddbe:	2101      	movs	r1, #1
 800ddc0:	e000      	b.n	800ddc4 <udp_bind+0x1b8>
 800ddc2:	2100      	movs	r1, #0
 800ddc4:	2900      	cmp	r1, #0
 800ddc6:	d042      	beq.n	800de4e <udp_bind+0x242>
            return ERR_USE;
 800ddc8:	f06f 0007 	mvn.w	r0, #7
 800ddcc:	e7bc      	b.n	800dd48 <udp_bind+0x13c>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ddce:	2100      	movs	r1, #0
 800ddd0:	e7f8      	b.n	800ddc4 <udp_bind+0x1b8>
 800ddd2:	2100      	movs	r1, #0
 800ddd4:	e7f6      	b.n	800ddc4 <udp_bind+0x1b8>
 800ddd6:	2101      	movs	r1, #1
 800ddd8:	e7f4      	b.n	800ddc4 <udp_bind+0x1b8>
 800ddda:	2101      	movs	r1, #1
 800dddc:	e035      	b.n	800de4a <udp_bind+0x23e>
 800ddde:	2100      	movs	r1, #0
 800dde0:	e033      	b.n	800de4a <udp_bind+0x23e>
              ip_addr_isany(&ipcb->local_ip))) {
 800dde2:	b14b      	cbz	r3, 800ddf8 <udp_bind+0x1ec>
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	b94a      	cbnz	r2, 800ddfc <udp_bind+0x1f0>
 800dde8:	685a      	ldr	r2, [r3, #4]
 800ddea:	b962      	cbnz	r2, 800de06 <udp_bind+0x1fa>
 800ddec:	689a      	ldr	r2, [r3, #8]
 800ddee:	b962      	cbnz	r2, 800de0a <udp_bind+0x1fe>
 800ddf0:	68da      	ldr	r2, [r3, #12]
 800ddf2:	b162      	cbz	r2, 800de0e <udp_bind+0x202>
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	e002      	b.n	800ddfe <udp_bind+0x1f2>
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	e000      	b.n	800ddfe <udp_bind+0x1f2>
 800ddfc:	2200      	movs	r2, #0
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ddfe:	b16a      	cbz	r2, 800de1c <udp_bind+0x210>
            return ERR_USE;
 800de00:	f06f 0007 	mvn.w	r0, #7
 800de04:	e7a0      	b.n	800dd48 <udp_bind+0x13c>
              ip_addr_isany(&ipcb->local_ip))) {
 800de06:	2200      	movs	r2, #0
 800de08:	e7f9      	b.n	800ddfe <udp_bind+0x1f2>
 800de0a:	2200      	movs	r2, #0
 800de0c:	e7f7      	b.n	800ddfe <udp_bind+0x1f2>
 800de0e:	2201      	movs	r2, #1
 800de10:	e7f5      	b.n	800ddfe <udp_bind+0x1f2>
 800de12:	2201      	movs	r2, #1
 800de14:	e000      	b.n	800de18 <udp_bind+0x20c>
 800de16:	2200      	movs	r2, #0
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800de18:	2a00      	cmp	r2, #0
 800de1a:	d156      	bne.n	800deca <udp_bind+0x2be>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800de1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de1e:	2b00      	cmp	r3, #0
 800de20:	f43f af77 	beq.w	800dd12 <udp_bind+0x106>
      if (pcb != ipcb) {
 800de24:	429c      	cmp	r4, r3
 800de26:	d0f9      	beq.n	800de1c <udp_bind+0x210>
          if ((ipcb->local_port == port) &&
 800de28:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800de2a:	42b2      	cmp	r2, r6
 800de2c:	d1f6      	bne.n	800de1c <udp_bind+0x210>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800de2e:	7d1a      	ldrb	r2, [r3, #20]
 800de30:	7d29      	ldrb	r1, [r5, #20]
          if ((ipcb->local_port == port) &&
 800de32:	428a      	cmp	r2, r1
 800de34:	d08b      	beq.n	800dd4e <udp_bind+0x142>
 800de36:	2d00      	cmp	r5, #0
 800de38:	d03e      	beq.n	800deb8 <udp_bind+0x2ac>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800de3a:	2906      	cmp	r1, #6
 800de3c:	d0b4      	beq.n	800dda8 <udp_bind+0x19c>
 800de3e:	2d00      	cmp	r5, #0
 800de40:	d0cb      	beq.n	800ddda <udp_bind+0x1ce>
 800de42:	6829      	ldr	r1, [r5, #0]
 800de44:	2900      	cmp	r1, #0
 800de46:	d1ca      	bne.n	800ddde <udp_bind+0x1d2>
 800de48:	2101      	movs	r1, #1
 800de4a:	2900      	cmp	r1, #0
 800de4c:	d137      	bne.n	800debe <udp_bind+0x2b2>
          if ((ipcb->local_port == port) &&
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d038      	beq.n	800dec4 <udp_bind+0x2b8>
              ip_addr_isany(&ipcb->local_ip))) {
 800de52:	2a06      	cmp	r2, #6
 800de54:	d0c5      	beq.n	800dde2 <udp_bind+0x1d6>
 800de56:	2b00      	cmp	r3, #0
 800de58:	d0db      	beq.n	800de12 <udp_bind+0x206>
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	2a00      	cmp	r2, #0
 800de5e:	d1da      	bne.n	800de16 <udp_bind+0x20a>
 800de60:	2201      	movs	r2, #1
 800de62:	e7d9      	b.n	800de18 <udp_bind+0x20c>
 800de64:	20007fc4 	.word	0x20007fc4
 800de68:	0801a4d4 	.word	0x0801a4d4
 800de6c:	08019a58 	.word	0x08019a58
 800de70:	08019b24 	.word	0x08019b24
 800de74:	08016bb4 	.word	0x08016bb4
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800de78:	462b      	mov	r3, r5
 800de7a:	b175      	cbz	r5, 800de9a <udp_bind+0x28e>
 800de7c:	682a      	ldr	r2, [r5, #0]
 800de7e:	6022      	str	r2, [r4, #0]
 800de80:	b16b      	cbz	r3, 800de9e <udp_bind+0x292>
 800de82:	686a      	ldr	r2, [r5, #4]
 800de84:	6062      	str	r2, [r4, #4]
 800de86:	b163      	cbz	r3, 800dea2 <udp_bind+0x296>
 800de88:	68aa      	ldr	r2, [r5, #8]
 800de8a:	60a2      	str	r2, [r4, #8]
 800de8c:	b15b      	cbz	r3, 800dea6 <udp_bind+0x29a>
 800de8e:	68ea      	ldr	r2, [r5, #12]
 800de90:	60e2      	str	r2, [r4, #12]
 800de92:	b153      	cbz	r3, 800deaa <udp_bind+0x29e>
 800de94:	7c2b      	ldrb	r3, [r5, #16]
 800de96:	7423      	strb	r3, [r4, #16]
 800de98:	e74d      	b.n	800dd36 <udp_bind+0x12a>
 800de9a:	2200      	movs	r2, #0
 800de9c:	e7ef      	b.n	800de7e <udp_bind+0x272>
 800de9e:	2200      	movs	r2, #0
 800dea0:	e7f0      	b.n	800de84 <udp_bind+0x278>
 800dea2:	2200      	movs	r2, #0
 800dea4:	e7f1      	b.n	800de8a <udp_bind+0x27e>
 800dea6:	2200      	movs	r2, #0
 800dea8:	e7f2      	b.n	800de90 <udp_bind+0x284>
 800deaa:	2300      	movs	r3, #0
 800deac:	e7f3      	b.n	800de96 <udp_bind+0x28a>
 800deae:	2300      	movs	r3, #0
 800deb0:	e73b      	b.n	800dd2a <udp_bind+0x11e>
      return ERR_USE;
 800deb2:	f06f 0007 	mvn.w	r0, #7
 800deb6:	e747      	b.n	800dd48 <udp_bind+0x13c>
            return ERR_USE;
 800deb8:	f06f 0007 	mvn.w	r0, #7
 800debc:	e744      	b.n	800dd48 <udp_bind+0x13c>
 800debe:	f06f 0007 	mvn.w	r0, #7
 800dec2:	e741      	b.n	800dd48 <udp_bind+0x13c>
 800dec4:	f06f 0007 	mvn.w	r0, #7
 800dec8:	e73e      	b.n	800dd48 <udp_bind+0x13c>
 800deca:	f06f 0007 	mvn.w	r0, #7
 800dece:	e73b      	b.n	800dd48 <udp_bind+0x13c>

0800ded0 <udp_sendto_if_src>:
{
 800ded0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded4:	b085      	sub	sp, #20
 800ded6:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800deda:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800dede:	2800      	cmp	r0, #0
 800dee0:	f000 8086 	beq.w	800dff0 <udp_sendto_if_src+0x120>
 800dee4:	460d      	mov	r5, r1
 800dee6:	4614      	mov	r4, r2
 800dee8:	469b      	mov	fp, r3
 800deea:	4606      	mov	r6, r0
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800deec:	2900      	cmp	r1, #0
 800deee:	f000 8089 	beq.w	800e004 <udp_sendto_if_src+0x134>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800def2:	2a00      	cmp	r2, #0
 800def4:	f000 8090 	beq.w	800e018 <udp_sendto_if_src+0x148>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800def8:	f1b9 0f00 	cmp.w	r9, #0
 800defc:	f000 8096 	beq.w	800e02c <udp_sendto_if_src+0x15c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800df00:	f1ba 0f00 	cmp.w	sl, #0
 800df04:	f000 809c 	beq.w	800e040 <udp_sendto_if_src+0x170>
  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800df08:	7d03      	ldrb	r3, [r0, #20]
 800df0a:	2b2e      	cmp	r3, #46	; 0x2e
 800df0c:	d008      	beq.n	800df20 <udp_sendto_if_src+0x50>
 800df0e:	f899 2014 	ldrb.w	r2, [r9, #20]
 800df12:	4293      	cmp	r3, r2
 800df14:	f040 80dd 	bne.w	800e0d2 <udp_sendto_if_src+0x202>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800df18:	7d22      	ldrb	r2, [r4, #20]
  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800df1a:	4293      	cmp	r3, r2
 800df1c:	f040 80dc 	bne.w	800e0d8 <udp_sendto_if_src+0x208>
  if (pcb->local_port == 0) {
 800df20:	8f72      	ldrh	r2, [r6, #58]	; 0x3a
 800df22:	2a00      	cmp	r2, #0
 800df24:	f000 8096 	beq.w	800e054 <udp_sendto_if_src+0x184>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800df28:	892a      	ldrh	r2, [r5, #8]
 800df2a:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800df2e:	429a      	cmp	r2, r3
 800df30:	f200 80d5 	bhi.w	800e0de <udp_sendto_if_src+0x20e>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800df34:	2108      	movs	r1, #8
 800df36:	4628      	mov	r0, r5
 800df38:	f7fa f889 	bl	800804e <pbuf_add_header>
 800df3c:	2800      	cmp	r0, #0
 800df3e:	f040 8092 	bne.w	800e066 <udp_sendto_if_src+0x196>
    q = p;
 800df42:	462f      	mov	r7, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800df44:	897b      	ldrh	r3, [r7, #10]
 800df46:	2b07      	cmp	r3, #7
 800df48:	f240 809e 	bls.w	800e088 <udp_sendto_if_src+0x1b8>
  udphdr = (struct udp_hdr *)q->payload;
 800df4c:	f8d7 8004 	ldr.w	r8, [r7, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800df50:	8f70      	ldrh	r0, [r6, #58]	; 0x3a
 800df52:	f7f8 fd93 	bl	8006a7c <lwip_htons>
 800df56:	f8a8 0000 	strh.w	r0, [r8]
  udphdr->dest = lwip_htons(dst_port);
 800df5a:	4658      	mov	r0, fp
 800df5c:	f7f8 fd8e 	bl	8006a7c <lwip_htons>
 800df60:	f8a8 0002 	strh.w	r0, [r8, #2]
  udphdr->chksum = 0x0000;
 800df64:	2300      	movs	r3, #0
 800df66:	f888 3006 	strb.w	r3, [r8, #6]
 800df6a:	f888 3007 	strb.w	r3, [r8, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 800df6e:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 800df72:	f013 0f08 	tst.w	r3, #8
 800df76:	d00f      	beq.n	800df98 <udp_sendto_if_src+0xc8>
 800df78:	7d23      	ldrb	r3, [r4, #20]
 800df7a:	2b06      	cmp	r3, #6
 800df7c:	f000 808c 	beq.w	800e098 <udp_sendto_if_src+0x1c8>
 800df80:	6823      	ldr	r3, [r4, #0]
 800df82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df86:	2be0      	cmp	r3, #224	; 0xe0
 800df88:	bf14      	ite	ne
 800df8a:	2300      	movne	r3, #0
 800df8c:	2301      	moveq	r3, #1
 800df8e:	b11b      	cbz	r3, 800df98 <udp_sendto_if_src+0xc8>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 800df90:	7b7b      	ldrb	r3, [r7, #13]
 800df92:	f043 0304 	orr.w	r3, r3, #4
 800df96:	737b      	strb	r3, [r7, #13]
    udphdr->len = lwip_htons(q->tot_len);
 800df98:	8938      	ldrh	r0, [r7, #8]
 800df9a:	f7f8 fd6f 	bl	8006a7c <lwip_htons>
 800df9e:	f8a8 0004 	strh.w	r0, [r8, #4]
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 800dfa2:	7d23      	ldrb	r3, [r4, #20]
 800dfa4:	2b06      	cmp	r3, #6
 800dfa6:	d07d      	beq.n	800e0a4 <udp_sendto_if_src+0x1d4>
 800dfa8:	6823      	ldr	r3, [r4, #0]
 800dfaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dfae:	2be0      	cmp	r3, #224	; 0xe0
 800dfb0:	bf14      	ite	ne
 800dfb2:	2300      	movne	r3, #0
 800dfb4:	2301      	moveq	r3, #1
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d07a      	beq.n	800e0b0 <udp_sendto_if_src+0x1e0>
 800dfba:	f896 3045 	ldrb.w	r3, [r6, #69]	; 0x45
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800dfbe:	7d22      	ldrb	r2, [r4, #20]
 800dfc0:	2a06      	cmp	r2, #6
 800dfc2:	d078      	beq.n	800e0b6 <udp_sendto_if_src+0x1e6>
 800dfc4:	f8cd a008 	str.w	sl, [sp, #8]
 800dfc8:	2211      	movs	r2, #17
 800dfca:	9201      	str	r2, [sp, #4]
 800dfcc:	f896 2032 	ldrb.w	r2, [r6, #50]	; 0x32
 800dfd0:	9200      	str	r2, [sp, #0]
 800dfd2:	4622      	mov	r2, r4
 800dfd4:	4649      	mov	r1, r9
 800dfd6:	4638      	mov	r0, r7
 800dfd8:	f002 ffdb 	bl	8010f92 <ip4_output_if_src>
 800dfdc:	4680      	mov	r8, r0
  if (q != p) {
 800dfde:	42af      	cmp	r7, r5
 800dfe0:	d002      	beq.n	800dfe8 <udp_sendto_if_src+0x118>
    pbuf_free(q);
 800dfe2:	4638      	mov	r0, r7
 800dfe4:	f7fa f884 	bl	80080f0 <pbuf_free>
}
 800dfe8:	4640      	mov	r0, r8
 800dfea:	b005      	add	sp, #20
 800dfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800dff0:	4b3e      	ldr	r3, [pc, #248]	; (800e0ec <udp_sendto_if_src+0x21c>)
 800dff2:	f240 22d1 	movw	r2, #721	; 0x2d1
 800dff6:	493e      	ldr	r1, [pc, #248]	; (800e0f0 <udp_sendto_if_src+0x220>)
 800dff8:	483e      	ldr	r0, [pc, #248]	; (800e0f4 <udp_sendto_if_src+0x224>)
 800dffa:	f007 fcc9 	bl	8015990 <iprintf>
 800dffe:	f06f 080f 	mvn.w	r8, #15
 800e002:	e7f1      	b.n	800dfe8 <udp_sendto_if_src+0x118>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800e004:	4b39      	ldr	r3, [pc, #228]	; (800e0ec <udp_sendto_if_src+0x21c>)
 800e006:	f240 22d2 	movw	r2, #722	; 0x2d2
 800e00a:	493b      	ldr	r1, [pc, #236]	; (800e0f8 <udp_sendto_if_src+0x228>)
 800e00c:	4839      	ldr	r0, [pc, #228]	; (800e0f4 <udp_sendto_if_src+0x224>)
 800e00e:	f007 fcbf 	bl	8015990 <iprintf>
 800e012:	f06f 080f 	mvn.w	r8, #15
 800e016:	e7e7      	b.n	800dfe8 <udp_sendto_if_src+0x118>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e018:	4b34      	ldr	r3, [pc, #208]	; (800e0ec <udp_sendto_if_src+0x21c>)
 800e01a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800e01e:	4937      	ldr	r1, [pc, #220]	; (800e0fc <udp_sendto_if_src+0x22c>)
 800e020:	4834      	ldr	r0, [pc, #208]	; (800e0f4 <udp_sendto_if_src+0x224>)
 800e022:	f007 fcb5 	bl	8015990 <iprintf>
 800e026:	f06f 080f 	mvn.w	r8, #15
 800e02a:	e7dd      	b.n	800dfe8 <udp_sendto_if_src+0x118>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800e02c:	4b2f      	ldr	r3, [pc, #188]	; (800e0ec <udp_sendto_if_src+0x21c>)
 800e02e:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800e032:	4933      	ldr	r1, [pc, #204]	; (800e100 <udp_sendto_if_src+0x230>)
 800e034:	482f      	ldr	r0, [pc, #188]	; (800e0f4 <udp_sendto_if_src+0x224>)
 800e036:	f007 fcab 	bl	8015990 <iprintf>
 800e03a:	f06f 080f 	mvn.w	r8, #15
 800e03e:	e7d3      	b.n	800dfe8 <udp_sendto_if_src+0x118>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800e040:	4b2a      	ldr	r3, [pc, #168]	; (800e0ec <udp_sendto_if_src+0x21c>)
 800e042:	f240 22d5 	movw	r2, #725	; 0x2d5
 800e046:	492f      	ldr	r1, [pc, #188]	; (800e104 <udp_sendto_if_src+0x234>)
 800e048:	482a      	ldr	r0, [pc, #168]	; (800e0f4 <udp_sendto_if_src+0x224>)
 800e04a:	f007 fca1 	bl	8015990 <iprintf>
 800e04e:	f06f 080f 	mvn.w	r8, #15
 800e052:	e7c9      	b.n	800dfe8 <udp_sendto_if_src+0x118>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e054:	4631      	mov	r1, r6
 800e056:	4630      	mov	r0, r6
 800e058:	f7ff fdd8 	bl	800dc0c <udp_bind>
    if (err != ERR_OK) {
 800e05c:	4680      	mov	r8, r0
 800e05e:	2800      	cmp	r0, #0
 800e060:	f43f af62 	beq.w	800df28 <udp_sendto_if_src+0x58>
 800e064:	e7c0      	b.n	800dfe8 <udp_sendto_if_src+0x118>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800e066:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e06a:	2108      	movs	r1, #8
 800e06c:	2036      	movs	r0, #54	; 0x36
 800e06e:	f7fa f8a1 	bl	80081b4 <pbuf_alloc>
    if (q == NULL) {
 800e072:	4607      	mov	r7, r0
 800e074:	2800      	cmp	r0, #0
 800e076:	d035      	beq.n	800e0e4 <udp_sendto_if_src+0x214>
    if (p->tot_len != 0) {
 800e078:	892b      	ldrh	r3, [r5, #8]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	f43f af62 	beq.w	800df44 <udp_sendto_if_src+0x74>
      pbuf_chain(q, p);
 800e080:	4629      	mov	r1, r5
 800e082:	f7fa f9f3 	bl	800846c <pbuf_chain>
 800e086:	e75d      	b.n	800df44 <udp_sendto_if_src+0x74>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800e088:	4b18      	ldr	r3, [pc, #96]	; (800e0ec <udp_sendto_if_src+0x21c>)
 800e08a:	f240 320d 	movw	r2, #781	; 0x30d
 800e08e:	491e      	ldr	r1, [pc, #120]	; (800e108 <udp_sendto_if_src+0x238>)
 800e090:	4818      	ldr	r0, [pc, #96]	; (800e0f4 <udp_sendto_if_src+0x224>)
 800e092:	f007 fc7d 	bl	8015990 <iprintf>
 800e096:	e759      	b.n	800df4c <udp_sendto_if_src+0x7c>
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 800e098:	7823      	ldrb	r3, [r4, #0]
 800e09a:	2bff      	cmp	r3, #255	; 0xff
 800e09c:	bf14      	ite	ne
 800e09e:	2300      	movne	r3, #0
 800e0a0:	2301      	moveq	r3, #1
 800e0a2:	e774      	b.n	800df8e <udp_sendto_if_src+0xbe>
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 800e0a4:	7823      	ldrb	r3, [r4, #0]
 800e0a6:	2bff      	cmp	r3, #255	; 0xff
 800e0a8:	bf14      	ite	ne
 800e0aa:	2300      	movne	r3, #0
 800e0ac:	2301      	moveq	r3, #1
 800e0ae:	e782      	b.n	800dfb6 <udp_sendto_if_src+0xe6>
 800e0b0:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
 800e0b4:	e783      	b.n	800dfbe <udp_sendto_if_src+0xee>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800e0b6:	f8cd a008 	str.w	sl, [sp, #8]
 800e0ba:	2211      	movs	r2, #17
 800e0bc:	9201      	str	r2, [sp, #4]
 800e0be:	f896 2032 	ldrb.w	r2, [r6, #50]	; 0x32
 800e0c2:	9200      	str	r2, [sp, #0]
 800e0c4:	4622      	mov	r2, r4
 800e0c6:	4649      	mov	r1, r9
 800e0c8:	4638      	mov	r0, r7
 800e0ca:	f004 fa4d 	bl	8012568 <ip6_output_if_src>
 800e0ce:	4680      	mov	r8, r0
 800e0d0:	e785      	b.n	800dfde <udp_sendto_if_src+0x10e>
    return ERR_VAL;
 800e0d2:	f06f 0805 	mvn.w	r8, #5
 800e0d6:	e787      	b.n	800dfe8 <udp_sendto_if_src+0x118>
 800e0d8:	f06f 0805 	mvn.w	r8, #5
 800e0dc:	e784      	b.n	800dfe8 <udp_sendto_if_src+0x118>
    return ERR_MEM;
 800e0de:	f04f 38ff 	mov.w	r8, #4294967295
 800e0e2:	e781      	b.n	800dfe8 <udp_sendto_if_src+0x118>
      return ERR_MEM;
 800e0e4:	f04f 38ff 	mov.w	r8, #4294967295
 800e0e8:	e77e      	b.n	800dfe8 <udp_sendto_if_src+0x118>
 800e0ea:	bf00      	nop
 800e0ec:	08019a58 	.word	0x08019a58
 800e0f0:	08019b3c 	.word	0x08019b3c
 800e0f4:	08016bb4 	.word	0x08016bb4
 800e0f8:	08019b5c 	.word	0x08019b5c
 800e0fc:	08019b7c 	.word	0x08019b7c
 800e100:	08019ba0 	.word	0x08019ba0
 800e104:	08019bc4 	.word	0x08019bc4
 800e108:	08019be8 	.word	0x08019be8

0800e10c <udp_sendto_if>:
{
 800e10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e110:	b082      	sub	sp, #8
 800e112:	f8dd 8020 	ldr.w	r8, [sp, #32]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e116:	b300      	cbz	r0, 800e15a <udp_sendto_if+0x4e>
 800e118:	460e      	mov	r6, r1
 800e11a:	4614      	mov	r4, r2
 800e11c:	461f      	mov	r7, r3
 800e11e:	4605      	mov	r5, r0
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e120:	b329      	cbz	r1, 800e16e <udp_sendto_if+0x62>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e122:	b372      	cbz	r2, 800e182 <udp_sendto_if+0x76>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e124:	f1b8 0f00 	cmp.w	r8, #0
 800e128:	d035      	beq.n	800e196 <udp_sendto_if+0x8a>
  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800e12a:	7d02      	ldrb	r2, [r0, #20]
 800e12c:	2a2e      	cmp	r2, #46	; 0x2e
 800e12e:	d002      	beq.n	800e136 <udp_sendto_if+0x2a>
 800e130:	7d23      	ldrb	r3, [r4, #20]
 800e132:	429a      	cmp	r2, r3
 800e134:	d164      	bne.n	800e200 <udp_sendto_if+0xf4>
  if (IP_IS_V6(dst_ip)) {
 800e136:	7d23      	ldrb	r3, [r4, #20]
 800e138:	2b06      	cmp	r3, #6
 800e13a:	d036      	beq.n	800e1aa <udp_sendto_if+0x9e>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e13c:	2d00      	cmp	r5, #0
 800e13e:	d051      	beq.n	800e1e4 <udp_sendto_if+0xd8>
 800e140:	682b      	ldr	r3, [r5, #0]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d04e      	beq.n	800e1e4 <udp_sendto_if+0xd8>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800e146:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e14a:	2ae0      	cmp	r2, #224	; 0xe0
 800e14c:	d04a      	beq.n	800e1e4 <udp_sendto_if+0xd8>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800e14e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800e152:	4293      	cmp	r3, r2
 800e154:	d15a      	bne.n	800e20c <udp_sendto_if+0x100>
      src_ip = &pcb->local_ip;
 800e156:	462b      	mov	r3, r5
 800e158:	e046      	b.n	800e1e8 <udp_sendto_if+0xdc>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800e15a:	4b2e      	ldr	r3, [pc, #184]	; (800e214 <udp_sendto_if+0x108>)
 800e15c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e160:	492d      	ldr	r1, [pc, #180]	; (800e218 <udp_sendto_if+0x10c>)
 800e162:	482e      	ldr	r0, [pc, #184]	; (800e21c <udp_sendto_if+0x110>)
 800e164:	f007 fc14 	bl	8015990 <iprintf>
 800e168:	f06f 000f 	mvn.w	r0, #15
 800e16c:	e045      	b.n	800e1fa <udp_sendto_if+0xee>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800e16e:	4b29      	ldr	r3, [pc, #164]	; (800e214 <udp_sendto_if+0x108>)
 800e170:	f240 2281 	movw	r2, #641	; 0x281
 800e174:	492a      	ldr	r1, [pc, #168]	; (800e220 <udp_sendto_if+0x114>)
 800e176:	4829      	ldr	r0, [pc, #164]	; (800e21c <udp_sendto_if+0x110>)
 800e178:	f007 fc0a 	bl	8015990 <iprintf>
 800e17c:	f06f 000f 	mvn.w	r0, #15
 800e180:	e03b      	b.n	800e1fa <udp_sendto_if+0xee>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e182:	4b24      	ldr	r3, [pc, #144]	; (800e214 <udp_sendto_if+0x108>)
 800e184:	f240 2282 	movw	r2, #642	; 0x282
 800e188:	4926      	ldr	r1, [pc, #152]	; (800e224 <udp_sendto_if+0x118>)
 800e18a:	4824      	ldr	r0, [pc, #144]	; (800e21c <udp_sendto_if+0x110>)
 800e18c:	f007 fc00 	bl	8015990 <iprintf>
 800e190:	f06f 000f 	mvn.w	r0, #15
 800e194:	e031      	b.n	800e1fa <udp_sendto_if+0xee>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800e196:	4b1f      	ldr	r3, [pc, #124]	; (800e214 <udp_sendto_if+0x108>)
 800e198:	f240 2283 	movw	r2, #643	; 0x283
 800e19c:	4922      	ldr	r1, [pc, #136]	; (800e228 <udp_sendto_if+0x11c>)
 800e19e:	481f      	ldr	r0, [pc, #124]	; (800e21c <udp_sendto_if+0x110>)
 800e1a0:	f007 fbf6 	bl	8015990 <iprintf>
 800e1a4:	f06f 000f 	mvn.w	r0, #15
 800e1a8:	e027      	b.n	800e1fa <udp_sendto_if+0xee>
    if (ip6_addr_isany(ip_2_ip6(&pcb->local_ip)) ||
 800e1aa:	b155      	cbz	r5, 800e1c2 <udp_sendto_if+0xb6>
 800e1ac:	682b      	ldr	r3, [r5, #0]
 800e1ae:	b92b      	cbnz	r3, 800e1bc <udp_sendto_if+0xb0>
 800e1b0:	686a      	ldr	r2, [r5, #4]
 800e1b2:	b91a      	cbnz	r2, 800e1bc <udp_sendto_if+0xb0>
 800e1b4:	68aa      	ldr	r2, [r5, #8]
 800e1b6:	b90a      	cbnz	r2, 800e1bc <udp_sendto_if+0xb0>
 800e1b8:	68ea      	ldr	r2, [r5, #12]
 800e1ba:	b112      	cbz	r2, 800e1c2 <udp_sendto_if+0xb6>
        ip6_addr_ismulticast(ip_2_ip6(&pcb->local_ip))) {
 800e1bc:	b2db      	uxtb	r3, r3
    if (ip6_addr_isany(ip_2_ip6(&pcb->local_ip)) ||
 800e1be:	2bff      	cmp	r3, #255	; 0xff
 800e1c0:	d108      	bne.n	800e1d4 <udp_sendto_if+0xc8>
      src_ip = ip6_select_source_address(netif, ip_2_ip6(dst_ip));
 800e1c2:	4621      	mov	r1, r4
 800e1c4:	4640      	mov	r0, r8
 800e1c6:	f003 fe65 	bl	8011e94 <ip6_select_source_address>
      if (src_ip == NULL) {
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	b960      	cbnz	r0, 800e1e8 <udp_sendto_if+0xdc>
        return ERR_RTE;
 800e1ce:	f06f 0003 	mvn.w	r0, #3
 800e1d2:	e012      	b.n	800e1fa <udp_sendto_if+0xee>
      if (netif_get_ip6_addr_match(netif, ip_2_ip6(&pcb->local_ip)) < 0) {
 800e1d4:	4629      	mov	r1, r5
 800e1d6:	4640      	mov	r0, r8
 800e1d8:	f7f9 fd9e 	bl	8007d18 <netif_get_ip6_addr_match>
 800e1dc:	2800      	cmp	r0, #0
 800e1de:	db12      	blt.n	800e206 <udp_sendto_if+0xfa>
      src_ip = &pcb->local_ip;
 800e1e0:	462b      	mov	r3, r5
 800e1e2:	e001      	b.n	800e1e8 <udp_sendto_if+0xdc>
      src_ip = netif_ip_addr4(netif);
 800e1e4:	f108 0304 	add.w	r3, r8, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800e1e8:	9301      	str	r3, [sp, #4]
 800e1ea:	f8cd 8000 	str.w	r8, [sp]
 800e1ee:	463b      	mov	r3, r7
 800e1f0:	4622      	mov	r2, r4
 800e1f2:	4631      	mov	r1, r6
 800e1f4:	4628      	mov	r0, r5
 800e1f6:	f7ff fe6b 	bl	800ded0 <udp_sendto_if_src>
}
 800e1fa:	b002      	add	sp, #8
 800e1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_VAL;
 800e200:	f06f 0005 	mvn.w	r0, #5
 800e204:	e7f9      	b.n	800e1fa <udp_sendto_if+0xee>
        return ERR_RTE;
 800e206:	f06f 0003 	mvn.w	r0, #3
 800e20a:	e7f6      	b.n	800e1fa <udp_sendto_if+0xee>
        return ERR_RTE;
 800e20c:	f06f 0003 	mvn.w	r0, #3
 800e210:	e7f3      	b.n	800e1fa <udp_sendto_if+0xee>
 800e212:	bf00      	nop
 800e214:	08019a58 	.word	0x08019a58
 800e218:	08019c18 	.word	0x08019c18
 800e21c:	08016bb4 	.word	0x08016bb4
 800e220:	08019c34 	.word	0x08019c34
 800e224:	08019c50 	.word	0x08019c50
 800e228:	08019c70 	.word	0x08019c70

0800e22c <udp_sendto>:
{
 800e22c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e22e:	b083      	sub	sp, #12
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800e230:	2800      	cmp	r0, #0
 800e232:	d030      	beq.n	800e296 <udp_sendto+0x6a>
 800e234:	460d      	mov	r5, r1
 800e236:	4614      	mov	r4, r2
 800e238:	461f      	mov	r7, r3
 800e23a:	4606      	mov	r6, r0
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800e23c:	2900      	cmp	r1, #0
 800e23e:	d034      	beq.n	800e2aa <udp_sendto+0x7e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e240:	2a00      	cmp	r2, #0
 800e242:	d03c      	beq.n	800e2be <udp_sendto+0x92>
  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800e244:	7d03      	ldrb	r3, [r0, #20]
 800e246:	2b2e      	cmp	r3, #46	; 0x2e
 800e248:	d002      	beq.n	800e250 <udp_sendto+0x24>
 800e24a:	7d12      	ldrb	r2, [r2, #20]
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d161      	bne.n	800e314 <udp_sendto+0xe8>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e250:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 800e254:	2800      	cmp	r0, #0
 800e256:	d13c      	bne.n	800e2d2 <udp_sendto+0xa6>
    if (ip_addr_ismulticast(dst_ip)) {
 800e258:	7d23      	ldrb	r3, [r4, #20]
 800e25a:	2b06      	cmp	r3, #6
 800e25c:	d03c      	beq.n	800e2d8 <udp_sendto+0xac>
 800e25e:	6823      	ldr	r3, [r4, #0]
 800e260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e264:	2be0      	cmp	r3, #224	; 0xe0
 800e266:	bf14      	ite	ne
 800e268:	2300      	movne	r3, #0
 800e26a:	2301      	moveq	r3, #1
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d03c      	beq.n	800e2ea <udp_sendto+0xbe>
      if (pcb->mcast_ifindex != NETIF_NO_INDEX) {
 800e270:	f896 0044 	ldrb.w	r0, [r6, #68]	; 0x44
 800e274:	2800      	cmp	r0, #0
 800e276:	d135      	bne.n	800e2e4 <udp_sendto+0xb8>
        if (IP_IS_V4(dst_ip))
 800e278:	7d23      	ldrb	r3, [r4, #20]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d135      	bne.n	800e2ea <udp_sendto+0xbe>
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 800e27e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800e280:	2b00      	cmp	r3, #0
 800e282:	d032      	beq.n	800e2ea <udp_sendto+0xbe>
              !ip4_addr_cmp(&pcb->mcast_ip4, IP4_ADDR_BROADCAST)) {
 800e284:	4a26      	ldr	r2, [pc, #152]	; (800e320 <udp_sendto+0xf4>)
 800e286:	6812      	ldr	r2, [r2, #0]
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 800e288:	4293      	cmp	r3, r2
 800e28a:	d02e      	beq.n	800e2ea <udp_sendto+0xbe>
            netif = ip4_route_src(ip_2_ip4(&pcb->local_ip), &pcb->mcast_ip4);
 800e28c:	f106 0040 	add.w	r0, r6, #64	; 0x40
 800e290:	f002 fc3c 	bl	8010b0c <ip4_route>
 800e294:	e028      	b.n	800e2e8 <udp_sendto+0xbc>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800e296:	4b23      	ldr	r3, [pc, #140]	; (800e324 <udp_sendto+0xf8>)
 800e298:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e29c:	4922      	ldr	r1, [pc, #136]	; (800e328 <udp_sendto+0xfc>)
 800e29e:	4823      	ldr	r0, [pc, #140]	; (800e32c <udp_sendto+0x100>)
 800e2a0:	f007 fb76 	bl	8015990 <iprintf>
 800e2a4:	f06f 000f 	mvn.w	r0, #15
 800e2a8:	e02d      	b.n	800e306 <udp_sendto+0xda>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800e2aa:	4b1e      	ldr	r3, [pc, #120]	; (800e324 <udp_sendto+0xf8>)
 800e2ac:	f240 2219 	movw	r2, #537	; 0x219
 800e2b0:	491f      	ldr	r1, [pc, #124]	; (800e330 <udp_sendto+0x104>)
 800e2b2:	481e      	ldr	r0, [pc, #120]	; (800e32c <udp_sendto+0x100>)
 800e2b4:	f007 fb6c 	bl	8015990 <iprintf>
 800e2b8:	f06f 000f 	mvn.w	r0, #15
 800e2bc:	e023      	b.n	800e306 <udp_sendto+0xda>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800e2be:	4b19      	ldr	r3, [pc, #100]	; (800e324 <udp_sendto+0xf8>)
 800e2c0:	f240 221a 	movw	r2, #538	; 0x21a
 800e2c4:	491b      	ldr	r1, [pc, #108]	; (800e334 <udp_sendto+0x108>)
 800e2c6:	4819      	ldr	r0, [pc, #100]	; (800e32c <udp_sendto+0x100>)
 800e2c8:	f007 fb62 	bl	8015990 <iprintf>
 800e2cc:	f06f 000f 	mvn.w	r0, #15
 800e2d0:	e019      	b.n	800e306 <udp_sendto+0xda>
    netif = netif_get_by_index(pcb->netif_idx);
 800e2d2:	f7f9 fdef 	bl	8007eb4 <netif_get_by_index>
 800e2d6:	e00e      	b.n	800e2f6 <udp_sendto+0xca>
    if (ip_addr_ismulticast(dst_ip)) {
 800e2d8:	7823      	ldrb	r3, [r4, #0]
 800e2da:	2bff      	cmp	r3, #255	; 0xff
 800e2dc:	bf14      	ite	ne
 800e2de:	2300      	movne	r3, #0
 800e2e0:	2301      	moveq	r3, #1
 800e2e2:	e7c3      	b.n	800e26c <udp_sendto+0x40>
        netif = netif_get_by_index(pcb->mcast_ifindex);
 800e2e4:	f7f9 fde6 	bl	8007eb4 <netif_get_by_index>
    if (netif == NULL)
 800e2e8:	b928      	cbnz	r0, 800e2f6 <udp_sendto+0xca>
      netif = ip_route(&pcb->local_ip, dst_ip);
 800e2ea:	7d23      	ldrb	r3, [r4, #20]
 800e2ec:	2b06      	cmp	r3, #6
 800e2ee:	d00c      	beq.n	800e30a <udp_sendto+0xde>
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	f002 fc0b 	bl	8010b0c <ip4_route>
  if (netif == NULL) {
 800e2f6:	b180      	cbz	r0, 800e31a <udp_sendto+0xee>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800e2f8:	9000      	str	r0, [sp, #0]
 800e2fa:	463b      	mov	r3, r7
 800e2fc:	4622      	mov	r2, r4
 800e2fe:	4629      	mov	r1, r5
 800e300:	4630      	mov	r0, r6
 800e302:	f7ff ff03 	bl	800e10c <udp_sendto_if>
}
 800e306:	b003      	add	sp, #12
 800e308:	bdf0      	pop	{r4, r5, r6, r7, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 800e30a:	4621      	mov	r1, r4
 800e30c:	4630      	mov	r0, r6
 800e30e:	f003 fc71 	bl	8011bf4 <ip6_route>
 800e312:	e7f0      	b.n	800e2f6 <udp_sendto+0xca>
    return ERR_VAL;
 800e314:	f06f 0005 	mvn.w	r0, #5
 800e318:	e7f5      	b.n	800e306 <udp_sendto+0xda>
    return ERR_RTE;
 800e31a:	f06f 0003 	mvn.w	r0, #3
 800e31e:	e7f2      	b.n	800e306 <udp_sendto+0xda>
 800e320:	0801a4ec 	.word	0x0801a4ec
 800e324:	08019a58 	.word	0x08019a58
 800e328:	08019c90 	.word	0x08019c90
 800e32c:	08016bb4 	.word	0x08016bb4
 800e330:	08019ca8 	.word	0x08019ca8
 800e334:	08019cc4 	.word	0x08019cc4

0800e338 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e338:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e33a:	2800      	cmp	r0, #0
 800e33c:	d02f      	beq.n	800e39e <udp_connect+0x66>
 800e33e:	460d      	mov	r5, r1
 800e340:	4616      	mov	r6, r2
 800e342:	4604      	mov	r4, r0
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e344:	2900      	cmp	r1, #0
 800e346:	d034      	beq.n	800e3b2 <udp_connect+0x7a>

  if (pcb->local_port == 0) {
 800e348:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
 800e34a:	2a00      	cmp	r2, #0
 800e34c:	d03b      	beq.n	800e3c6 <udp_connect+0x8e>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e34e:	f114 0218 	adds.w	r2, r4, #24
 800e352:	d002      	beq.n	800e35a <udp_connect+0x22>
 800e354:	7d2b      	ldrb	r3, [r5, #20]
 800e356:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800e35a:	7d2b      	ldrb	r3, [r5, #20]
 800e35c:	2b06      	cmp	r3, #6
 800e35e:	d038      	beq.n	800e3d2 <udp_connect+0x9a>
 800e360:	2d00      	cmp	r5, #0
 800e362:	d051      	beq.n	800e408 <udp_connect+0xd0>
 800e364:	682b      	ldr	r3, [r5, #0]
 800e366:	61a3      	str	r3, [r4, #24]
 800e368:	2300      	movs	r3, #0
 800e36a:	6263      	str	r3, [r4, #36]	; 0x24
 800e36c:	6223      	str	r3, [r4, #32]
 800e36e:	61e3      	str	r3, [r4, #28]
 800e370:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  /* If the given IP address should have a zone but doesn't, assign one now,
   * using the bound address to make a more informed decision when possible. */
  if (IP_IS_V6(&pcb->remote_ip) &&
 800e374:	b11a      	cbz	r2, 800e37e <udp_connect+0x46>
 800e376:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e37a:	2b06      	cmp	r3, #6
 800e37c:	d046      	beq.n	800e40c <udp_connect+0xd4>
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800e37e:	87a6      	strh	r6, [r4, #60]	; 0x3c
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800e380:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800e384:	f043 0304 	orr.w	r3, r3, #4
 800e388:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e38c:	4b40      	ldr	r3, [pc, #256]	; (800e490 <udp_connect+0x158>)
 800e38e:	681a      	ldr	r2, [r3, #0]
 800e390:	4613      	mov	r3, r2
 800e392:	2b00      	cmp	r3, #0
 800e394:	d075      	beq.n	800e482 <udp_connect+0x14a>
    if (pcb == ipcb) {
 800e396:	429c      	cmp	r4, r3
 800e398:	d078      	beq.n	800e48c <udp_connect+0x154>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e39a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e39c:	e7f9      	b.n	800e392 <udp_connect+0x5a>
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e39e:	4b3d      	ldr	r3, [pc, #244]	; (800e494 <udp_connect+0x15c>)
 800e3a0:	f240 4235 	movw	r2, #1077	; 0x435
 800e3a4:	493c      	ldr	r1, [pc, #240]	; (800e498 <udp_connect+0x160>)
 800e3a6:	483d      	ldr	r0, [pc, #244]	; (800e49c <udp_connect+0x164>)
 800e3a8:	f007 faf2 	bl	8015990 <iprintf>
 800e3ac:	f06f 000f 	mvn.w	r0, #15
 800e3b0:	e06b      	b.n	800e48a <udp_connect+0x152>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e3b2:	4b38      	ldr	r3, [pc, #224]	; (800e494 <udp_connect+0x15c>)
 800e3b4:	f240 4236 	movw	r2, #1078	; 0x436
 800e3b8:	4939      	ldr	r1, [pc, #228]	; (800e4a0 <udp_connect+0x168>)
 800e3ba:	4838      	ldr	r0, [pc, #224]	; (800e49c <udp_connect+0x164>)
 800e3bc:	f007 fae8 	bl	8015990 <iprintf>
 800e3c0:	f06f 000f 	mvn.w	r0, #15
 800e3c4:	e061      	b.n	800e48a <udp_connect+0x152>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e3c6:	4601      	mov	r1, r0
 800e3c8:	f7ff fc20 	bl	800dc0c <udp_bind>
    if (err != ERR_OK) {
 800e3cc:	2800      	cmp	r0, #0
 800e3ce:	d0be      	beq.n	800e34e <udp_connect+0x16>
 800e3d0:	e05b      	b.n	800e48a <udp_connect+0x152>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e3d2:	b17d      	cbz	r5, 800e3f4 <udp_connect+0xbc>
 800e3d4:	682b      	ldr	r3, [r5, #0]
 800e3d6:	61a3      	str	r3, [r4, #24]
 800e3d8:	b175      	cbz	r5, 800e3f8 <udp_connect+0xc0>
 800e3da:	686b      	ldr	r3, [r5, #4]
 800e3dc:	61e3      	str	r3, [r4, #28]
 800e3de:	b16d      	cbz	r5, 800e3fc <udp_connect+0xc4>
 800e3e0:	68ab      	ldr	r3, [r5, #8]
 800e3e2:	6223      	str	r3, [r4, #32]
 800e3e4:	b165      	cbz	r5, 800e400 <udp_connect+0xc8>
 800e3e6:	68eb      	ldr	r3, [r5, #12]
 800e3e8:	6263      	str	r3, [r4, #36]	; 0x24
 800e3ea:	b15d      	cbz	r5, 800e404 <udp_connect+0xcc>
 800e3ec:	7c2b      	ldrb	r3, [r5, #16]
 800e3ee:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800e3f2:	e7bf      	b.n	800e374 <udp_connect+0x3c>
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	e7ee      	b.n	800e3d6 <udp_connect+0x9e>
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	e7ef      	b.n	800e3dc <udp_connect+0xa4>
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	e7f0      	b.n	800e3e2 <udp_connect+0xaa>
 800e400:	2300      	movs	r3, #0
 800e402:	e7f1      	b.n	800e3e8 <udp_connect+0xb0>
 800e404:	2300      	movs	r3, #0
 800e406:	e7f2      	b.n	800e3ee <udp_connect+0xb6>
 800e408:	2300      	movs	r3, #0
 800e40a:	e7ac      	b.n	800e366 <udp_connect+0x2e>
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
 800e40c:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
  if (IP_IS_V6(&pcb->remote_ip) &&
 800e410:	2d00      	cmp	r5, #0
 800e412:	d1b4      	bne.n	800e37e <udp_connect+0x46>
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
 800e414:	69a3      	ldr	r3, [r4, #24]
 800e416:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 800e41a:	4019      	ands	r1, r3
 800e41c:	f248 02fe 	movw	r2, #33022	; 0x80fe
 800e420:	4291      	cmp	r1, r2
 800e422:	d00b      	beq.n	800e43c <udp_connect+0x104>
 800e424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e428:	041b      	lsls	r3, r3, #16
 800e42a:	0c1b      	lsrs	r3, r3, #16
 800e42c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e430:	4293      	cmp	r3, r2
 800e432:	d003      	beq.n	800e43c <udp_connect+0x104>
 800e434:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e438:	4293      	cmp	r3, r2
 800e43a:	d1a0      	bne.n	800e37e <udp_connect+0x46>
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
 800e43c:	f104 0118 	add.w	r1, r4, #24
 800e440:	4620      	mov	r0, r4
 800e442:	f003 fbd7 	bl	8011bf4 <ip6_route>
 800e446:	4602      	mov	r2, r0
 800e448:	2800      	cmp	r0, #0
 800e44a:	d098      	beq.n	800e37e <udp_connect+0x46>
 800e44c:	69a3      	ldr	r3, [r4, #24]
 800e44e:	f24c 00ff 	movw	r0, #49407	; 0xc0ff
 800e452:	4018      	ands	r0, r3
 800e454:	f248 01fe 	movw	r1, #33022	; 0x80fe
 800e458:	4288      	cmp	r0, r1
 800e45a:	d00b      	beq.n	800e474 <udp_connect+0x13c>
 800e45c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e460:	041b      	lsls	r3, r3, #16
 800e462:	0c1b      	lsrs	r3, r3, #16
 800e464:	f240 11ff 	movw	r1, #511	; 0x1ff
 800e468:	428b      	cmp	r3, r1
 800e46a:	d003      	beq.n	800e474 <udp_connect+0x13c>
 800e46c:	f240 21ff 	movw	r1, #767	; 0x2ff
 800e470:	428b      	cmp	r3, r1
 800e472:	d103      	bne.n	800e47c <udp_connect+0x144>
 800e474:	f892 50e2 	ldrb.w	r5, [r2, #226]	; 0xe2
 800e478:	3501      	adds	r5, #1
 800e47a:	b2ed      	uxtb	r5, r5
 800e47c:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 800e480:	e77d      	b.n	800e37e <udp_connect+0x46>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800e482:	6362      	str	r2, [r4, #52]	; 0x34
  udp_pcbs = pcb;
 800e484:	4b02      	ldr	r3, [pc, #8]	; (800e490 <udp_connect+0x158>)
 800e486:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800e488:	2000      	movs	r0, #0
}
 800e48a:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 800e48c:	2000      	movs	r0, #0
 800e48e:	e7fc      	b.n	800e48a <udp_connect+0x152>
 800e490:	20007fc4 	.word	0x20007fc4
 800e494:	08019a58 	.word	0x08019a58
 800e498:	08019ce0 	.word	0x08019ce0
 800e49c:	08016bb4 	.word	0x08016bb4
 800e4a0:	08019cfc 	.word	0x08019cfc

0800e4a4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e4a4:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e4a6:	b110      	cbz	r0, 800e4ae <udp_recv+0xa>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800e4a8:	6481      	str	r1, [r0, #72]	; 0x48
  pcb->recv_arg = recv_arg;
 800e4aa:	64c2      	str	r2, [r0, #76]	; 0x4c
}
 800e4ac:	bd08      	pop	{r3, pc}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e4ae:	4b04      	ldr	r3, [pc, #16]	; (800e4c0 <udp_recv+0x1c>)
 800e4b0:	f240 428a 	movw	r2, #1162	; 0x48a
 800e4b4:	4903      	ldr	r1, [pc, #12]	; (800e4c4 <udp_recv+0x20>)
 800e4b6:	4804      	ldr	r0, [pc, #16]	; (800e4c8 <udp_recv+0x24>)
 800e4b8:	f007 fa6a 	bl	8015990 <iprintf>
 800e4bc:	e7f6      	b.n	800e4ac <udp_recv+0x8>
 800e4be:	bf00      	nop
 800e4c0:	08019a58 	.word	0x08019a58
 800e4c4:	08019d18 	.word	0x08019d18
 800e4c8:	08016bb4 	.word	0x08016bb4

0800e4cc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800e4cc:	b508      	push	{r3, lr}
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800e4ce:	b150      	cbz	r0, 800e4e6 <udp_remove+0x1a>
 800e4d0:	4601      	mov	r1, r0

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800e4d2:	4b0f      	ldr	r3, [pc, #60]	; (800e510 <udp_remove+0x44>)
 800e4d4:	681a      	ldr	r2, [r3, #0]
 800e4d6:	4282      	cmp	r2, r0
 800e4d8:	d111      	bne.n	800e4fe <udp_remove+0x32>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800e4da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e4dc:	601a      	str	r2, [r3, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800e4de:	2000      	movs	r0, #0
 800e4e0:	f7f9 f962 	bl	80077a8 <memp_free>
}
 800e4e4:	bd08      	pop	{r3, pc}
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800e4e6:	4b0b      	ldr	r3, [pc, #44]	; (800e514 <udp_remove+0x48>)
 800e4e8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800e4ec:	490a      	ldr	r1, [pc, #40]	; (800e518 <udp_remove+0x4c>)
 800e4ee:	480b      	ldr	r0, [pc, #44]	; (800e51c <udp_remove+0x50>)
 800e4f0:	f007 fa4e 	bl	8015990 <iprintf>
 800e4f4:	e7f6      	b.n	800e4e4 <udp_remove+0x18>
        pcb2->next = pcb->next;
 800e4f6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800e4f8:	6353      	str	r3, [r2, #52]	; 0x34
        break;
 800e4fa:	e7f0      	b.n	800e4de <udp_remove+0x12>
 800e4fc:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e4fe:	2a00      	cmp	r2, #0
 800e500:	d0ed      	beq.n	800e4de <udp_remove+0x12>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800e502:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800e504:	2b00      	cmp	r3, #0
 800e506:	d0f9      	beq.n	800e4fc <udp_remove+0x30>
 800e508:	428b      	cmp	r3, r1
 800e50a:	d0f4      	beq.n	800e4f6 <udp_remove+0x2a>
 800e50c:	461a      	mov	r2, r3
 800e50e:	e7f6      	b.n	800e4fe <udp_remove+0x32>
 800e510:	20007fc4 	.word	0x20007fc4
 800e514:	08019a58 	.word	0x08019a58
 800e518:	08019d30 	.word	0x08019d30
 800e51c:	08016bb4 	.word	0x08016bb4

0800e520 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e520:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e522:	2000      	movs	r0, #0
 800e524:	f7f9 f926 	bl	8007774 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e528:	4604      	mov	r4, r0
 800e52a:	b140      	cbz	r0, 800e53e <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e52c:	2250      	movs	r2, #80	; 0x50
 800e52e:	2100      	movs	r1, #0
 800e530:	f007 fa26 	bl	8015980 <memset>
    pcb->ttl = UDP_TTL;
 800e534:	23ff      	movs	r3, #255	; 0xff
 800e536:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 800e53a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800e53e:	4620      	mov	r0, r4
 800e540:	bd10      	pop	{r4, pc}
	...

0800e544 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e544:	2800      	cmp	r0, #0
 800e546:	f000 8098 	beq.w	800e67a <udp_netif_ip_addr_changed+0x136>
 800e54a:	4602      	mov	r2, r0
 800e54c:	7d03      	ldrb	r3, [r0, #20]
 800e54e:	2b06      	cmp	r3, #6
 800e550:	d019      	beq.n	800e586 <udp_netif_ip_addr_changed+0x42>
 800e552:	2800      	cmp	r0, #0
 800e554:	d02b      	beq.n	800e5ae <udp_netif_ip_addr_changed+0x6a>
 800e556:	6803      	ldr	r3, [r0, #0]
 800e558:	bb5b      	cbnz	r3, 800e5b2 <udp_netif_ip_addr_changed+0x6e>
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	f000 808d 	beq.w	800e67a <udp_netif_ip_addr_changed+0x136>
 800e560:	2900      	cmp	r1, #0
 800e562:	f000 808a 	beq.w	800e67a <udp_netif_ip_addr_changed+0x136>
 800e566:	7d0b      	ldrb	r3, [r1, #20]
 800e568:	2b06      	cmp	r3, #6
 800e56a:	d024      	beq.n	800e5b6 <udp_netif_ip_addr_changed+0x72>
 800e56c:	2900      	cmp	r1, #0
 800e56e:	d036      	beq.n	800e5de <udp_netif_ip_addr_changed+0x9a>
 800e570:	680b      	ldr	r3, [r1, #0]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d135      	bne.n	800e5e2 <udp_netif_ip_addr_changed+0x9e>
 800e576:	2b00      	cmp	r3, #0
 800e578:	d07f      	beq.n	800e67a <udp_netif_ip_addr_changed+0x136>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e57a:	4b40      	ldr	r3, [pc, #256]	; (800e67c <udp_netif_ip_addr_changed+0x138>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d07a      	beq.n	800e678 <udp_netif_ip_addr_changed+0x134>
{
 800e582:	b410      	push	{r4}
 800e584:	e058      	b.n	800e638 <udp_netif_ip_addr_changed+0xf4>
  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e586:	b150      	cbz	r0, 800e59e <udp_netif_ip_addr_changed+0x5a>
 800e588:	6803      	ldr	r3, [r0, #0]
 800e58a:	b953      	cbnz	r3, 800e5a2 <udp_netif_ip_addr_changed+0x5e>
 800e58c:	6843      	ldr	r3, [r0, #4]
 800e58e:	b953      	cbnz	r3, 800e5a6 <udp_netif_ip_addr_changed+0x62>
 800e590:	6883      	ldr	r3, [r0, #8]
 800e592:	b953      	cbnz	r3, 800e5aa <udp_netif_ip_addr_changed+0x66>
 800e594:	68c3      	ldr	r3, [r0, #12]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d0df      	beq.n	800e55a <udp_netif_ip_addr_changed+0x16>
 800e59a:	2301      	movs	r3, #1
 800e59c:	e7dd      	b.n	800e55a <udp_netif_ip_addr_changed+0x16>
 800e59e:	2300      	movs	r3, #0
 800e5a0:	e7db      	b.n	800e55a <udp_netif_ip_addr_changed+0x16>
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	e7d9      	b.n	800e55a <udp_netif_ip_addr_changed+0x16>
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e7d7      	b.n	800e55a <udp_netif_ip_addr_changed+0x16>
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	e7d5      	b.n	800e55a <udp_netif_ip_addr_changed+0x16>
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	e7d3      	b.n	800e55a <udp_netif_ip_addr_changed+0x16>
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	e7d1      	b.n	800e55a <udp_netif_ip_addr_changed+0x16>
 800e5b6:	b151      	cbz	r1, 800e5ce <udp_netif_ip_addr_changed+0x8a>
 800e5b8:	680b      	ldr	r3, [r1, #0]
 800e5ba:	b953      	cbnz	r3, 800e5d2 <udp_netif_ip_addr_changed+0x8e>
 800e5bc:	684b      	ldr	r3, [r1, #4]
 800e5be:	b953      	cbnz	r3, 800e5d6 <udp_netif_ip_addr_changed+0x92>
 800e5c0:	688b      	ldr	r3, [r1, #8]
 800e5c2:	b953      	cbnz	r3, 800e5da <udp_netif_ip_addr_changed+0x96>
 800e5c4:	68cb      	ldr	r3, [r1, #12]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d0d5      	beq.n	800e576 <udp_netif_ip_addr_changed+0x32>
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	e7d3      	b.n	800e576 <udp_netif_ip_addr_changed+0x32>
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	e7d1      	b.n	800e576 <udp_netif_ip_addr_changed+0x32>
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	e7cf      	b.n	800e576 <udp_netif_ip_addr_changed+0x32>
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e7cd      	b.n	800e576 <udp_netif_ip_addr_changed+0x32>
 800e5da:	2301      	movs	r3, #1
 800e5dc:	e7cb      	b.n	800e576 <udp_netif_ip_addr_changed+0x32>
 800e5de:	2300      	movs	r3, #0
 800e5e0:	e7c9      	b.n	800e576 <udp_netif_ip_addr_changed+0x32>
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	e7c7      	b.n	800e576 <udp_netif_ip_addr_changed+0x32>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e5e6:	681c      	ldr	r4, [r3, #0]
 800e5e8:	6810      	ldr	r0, [r2, #0]
 800e5ea:	4284      	cmp	r4, r0
 800e5ec:	d001      	beq.n	800e5f2 <udp_netif_ip_addr_changed+0xae>
 800e5ee:	2000      	movs	r0, #0
 800e5f0:	e02e      	b.n	800e650 <udp_netif_ip_addr_changed+0x10c>
 800e5f2:	685c      	ldr	r4, [r3, #4]
 800e5f4:	6850      	ldr	r0, [r2, #4]
 800e5f6:	4284      	cmp	r4, r0
 800e5f8:	d001      	beq.n	800e5fe <udp_netif_ip_addr_changed+0xba>
 800e5fa:	2000      	movs	r0, #0
 800e5fc:	e028      	b.n	800e650 <udp_netif_ip_addr_changed+0x10c>
 800e5fe:	689c      	ldr	r4, [r3, #8]
 800e600:	6890      	ldr	r0, [r2, #8]
 800e602:	4284      	cmp	r4, r0
 800e604:	d001      	beq.n	800e60a <udp_netif_ip_addr_changed+0xc6>
 800e606:	2000      	movs	r0, #0
 800e608:	e022      	b.n	800e650 <udp_netif_ip_addr_changed+0x10c>
 800e60a:	68dc      	ldr	r4, [r3, #12]
 800e60c:	68d0      	ldr	r0, [r2, #12]
 800e60e:	4284      	cmp	r4, r0
 800e610:	d001      	beq.n	800e616 <udp_netif_ip_addr_changed+0xd2>
 800e612:	2000      	movs	r0, #0
 800e614:	e01c      	b.n	800e650 <udp_netif_ip_addr_changed+0x10c>
 800e616:	7c1c      	ldrb	r4, [r3, #16]
 800e618:	7c10      	ldrb	r0, [r2, #16]
 800e61a:	4284      	cmp	r4, r0
 800e61c:	d001      	beq.n	800e622 <udp_netif_ip_addr_changed+0xde>
 800e61e:	2000      	movs	r0, #0
 800e620:	e016      	b.n	800e650 <udp_netif_ip_addr_changed+0x10c>
 800e622:	2001      	movs	r0, #1
 800e624:	e014      	b.n	800e650 <udp_netif_ip_addr_changed+0x10c>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e626:	6808      	ldr	r0, [r1, #0]
 800e628:	6018      	str	r0, [r3, #0]
 800e62a:	2000      	movs	r0, #0
 800e62c:	60d8      	str	r0, [r3, #12]
 800e62e:	6098      	str	r0, [r3, #8]
 800e630:	6058      	str	r0, [r3, #4]
 800e632:	7418      	strb	r0, [r3, #16]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e636:	b1e3      	cbz	r3, 800e672 <udp_netif_ip_addr_changed+0x12e>
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e638:	7d18      	ldrb	r0, [r3, #20]
 800e63a:	7d14      	ldrb	r4, [r2, #20]
 800e63c:	42a0      	cmp	r0, r4
 800e63e:	d1f9      	bne.n	800e634 <udp_netif_ip_addr_changed+0xf0>
 800e640:	2806      	cmp	r0, #6
 800e642:	d0d0      	beq.n	800e5e6 <udp_netif_ip_addr_changed+0xa2>
 800e644:	6818      	ldr	r0, [r3, #0]
 800e646:	6814      	ldr	r4, [r2, #0]
 800e648:	42a0      	cmp	r0, r4
 800e64a:	bf14      	ite	ne
 800e64c:	2000      	movne	r0, #0
 800e64e:	2001      	moveq	r0, #1
 800e650:	2800      	cmp	r0, #0
 800e652:	d0ef      	beq.n	800e634 <udp_netif_ip_addr_changed+0xf0>
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e654:	7d08      	ldrb	r0, [r1, #20]
 800e656:	7518      	strb	r0, [r3, #20]
 800e658:	2806      	cmp	r0, #6
 800e65a:	d1e4      	bne.n	800e626 <udp_netif_ip_addr_changed+0xe2>
 800e65c:	6808      	ldr	r0, [r1, #0]
 800e65e:	6018      	str	r0, [r3, #0]
 800e660:	6848      	ldr	r0, [r1, #4]
 800e662:	6058      	str	r0, [r3, #4]
 800e664:	6888      	ldr	r0, [r1, #8]
 800e666:	6098      	str	r0, [r3, #8]
 800e668:	68c8      	ldr	r0, [r1, #12]
 800e66a:	60d8      	str	r0, [r3, #12]
 800e66c:	7c08      	ldrb	r0, [r1, #16]
 800e66e:	7418      	strb	r0, [r3, #16]
 800e670:	e7e0      	b.n	800e634 <udp_netif_ip_addr_changed+0xf0>
      }
    }
  }
}
 800e672:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e676:	4770      	bx	lr
 800e678:	4770      	bx	lr
 800e67a:	4770      	bx	lr
 800e67c:	20007fc4 	.word	0x20007fc4

0800e680 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 800e680:	7943      	ldrb	r3, [r0, #5]
 800e682:	428b      	cmp	r3, r1
 800e684:	d003      	beq.n	800e68e <dhcp_set_state+0xe>
    dhcp->state = new_state;
 800e686:	7141      	strb	r1, [r0, #5]
    dhcp->tries = 0;
 800e688:	2300      	movs	r3, #0
 800e68a:	7183      	strb	r3, [r0, #6]
    dhcp->request_timeout = 0;
 800e68c:	8103      	strh	r3, [r0, #8]
  }
}
 800e68e:	4770      	bx	lr

0800e690 <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800e690:	b570      	push	{r4, r5, r6, lr}
 800e692:	4604      	mov	r4, r0
 800e694:	460d      	mov	r5, r1
 800e696:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800e698:	1c83      	adds	r3, r0, #2
 800e69a:	2b44      	cmp	r3, #68	; 0x44
 800e69c:	d807      	bhi.n	800e6ae <dhcp_option_short+0x1e>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800e69e:	1c63      	adds	r3, r4, #1
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	0a32      	lsrs	r2, r6, #8
 800e6a4:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800e6a6:	1ca0      	adds	r0, r4, #2
 800e6a8:	54ee      	strb	r6, [r5, r3]
  return options_out_len;
}
 800e6aa:	b280      	uxth	r0, r0
 800e6ac:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800e6ae:	4b04      	ldr	r3, [pc, #16]	; (800e6c0 <dhcp_option_short+0x30>)
 800e6b0:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800e6b4:	4903      	ldr	r1, [pc, #12]	; (800e6c4 <dhcp_option_short+0x34>)
 800e6b6:	4804      	ldr	r0, [pc, #16]	; (800e6c8 <dhcp_option_short+0x38>)
 800e6b8:	f007 f96a 	bl	8015990 <iprintf>
 800e6bc:	e7ef      	b.n	800e69e <dhcp_option_short+0xe>
 800e6be:	bf00      	nop
 800e6c0:	08019d48 	.word	0x08019d48
 800e6c4:	08019d80 	.word	0x08019d80
 800e6c8:	08016bb4 	.word	0x08016bb4

0800e6cc <dhcp_option>:
{
 800e6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ce:	4604      	mov	r4, r0
 800e6d0:	460d      	mov	r5, r1
 800e6d2:	4617      	mov	r7, r2
 800e6d4:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800e6d6:	4403      	add	r3, r0
 800e6d8:	3302      	adds	r3, #2
 800e6da:	2b44      	cmp	r3, #68	; 0x44
 800e6dc:	d806      	bhi.n	800e6ec <dhcp_option+0x20>
  options[options_out_len++] = option_type;
 800e6de:	1c63      	adds	r3, r4, #1
 800e6e0:	b29b      	uxth	r3, r3
 800e6e2:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 800e6e4:	1ca0      	adds	r0, r4, #2
 800e6e6:	54ee      	strb	r6, [r5, r3]
}
 800e6e8:	b280      	uxth	r0, r0
 800e6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800e6ec:	4b03      	ldr	r3, [pc, #12]	; (800e6fc <dhcp_option+0x30>)
 800e6ee:	f240 529a 	movw	r2, #1434	; 0x59a
 800e6f2:	4903      	ldr	r1, [pc, #12]	; (800e700 <dhcp_option+0x34>)
 800e6f4:	4803      	ldr	r0, [pc, #12]	; (800e704 <dhcp_option+0x38>)
 800e6f6:	f007 f94b 	bl	8015990 <iprintf>
 800e6fa:	e7f0      	b.n	800e6de <dhcp_option+0x12>
 800e6fc:	08019d48 	.word	0x08019d48
 800e700:	08019dbc 	.word	0x08019dbc
 800e704:	08016bb4 	.word	0x08016bb4

0800e708 <dhcp_option_byte>:
{
 800e708:	b570      	push	{r4, r5, r6, lr}
 800e70a:	4604      	mov	r4, r0
 800e70c:	460d      	mov	r5, r1
 800e70e:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800e710:	2843      	cmp	r0, #67	; 0x43
 800e712:	d803      	bhi.n	800e71c <dhcp_option_byte+0x14>
  options[options_out_len++] = value;
 800e714:	1c60      	adds	r0, r4, #1
 800e716:	552e      	strb	r6, [r5, r4]
}
 800e718:	b280      	uxth	r0, r0
 800e71a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800e71c:	4b03      	ldr	r3, [pc, #12]	; (800e72c <dhcp_option_byte+0x24>)
 800e71e:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800e722:	4903      	ldr	r1, [pc, #12]	; (800e730 <dhcp_option_byte+0x28>)
 800e724:	4803      	ldr	r0, [pc, #12]	; (800e734 <dhcp_option_byte+0x2c>)
 800e726:	f007 f933 	bl	8015990 <iprintf>
 800e72a:	e7f3      	b.n	800e714 <dhcp_option_byte+0xc>
 800e72c:	08019d48 	.word	0x08019d48
 800e730:	08019e00 	.word	0x08019e00
 800e734:	08016bb4 	.word	0x08016bb4

0800e738 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800e738:	b570      	push	{r4, r5, r6, lr}
 800e73a:	4604      	mov	r4, r0
 800e73c:	460d      	mov	r5, r1
 800e73e:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800e740:	1d03      	adds	r3, r0, #4
 800e742:	2b44      	cmp	r3, #68	; 0x44
 800e744:	d811      	bhi.n	800e76a <dhcp_option_long+0x32>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800e746:	1c63      	adds	r3, r4, #1
 800e748:	b29b      	uxth	r3, r3
 800e74a:	0e32      	lsrs	r2, r6, #24
 800e74c:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800e74e:	1ca2      	adds	r2, r4, #2
 800e750:	b292      	uxth	r2, r2
 800e752:	f3c6 4107 	ubfx	r1, r6, #16, #8
 800e756:	54e9      	strb	r1, [r5, r3]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800e758:	1ce3      	adds	r3, r4, #3
 800e75a:	b29b      	uxth	r3, r3
 800e75c:	f3c6 2107 	ubfx	r1, r6, #8, #8
 800e760:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800e762:	1d20      	adds	r0, r4, #4
 800e764:	54ee      	strb	r6, [r5, r3]
  return options_out_len;
}
 800e766:	b280      	uxth	r0, r0
 800e768:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800e76a:	4b04      	ldr	r3, [pc, #16]	; (800e77c <dhcp_option_long+0x44>)
 800e76c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800e770:	4903      	ldr	r1, [pc, #12]	; (800e780 <dhcp_option_long+0x48>)
 800e772:	4804      	ldr	r0, [pc, #16]	; (800e784 <dhcp_option_long+0x4c>)
 800e774:	f007 f90c 	bl	8015990 <iprintf>
 800e778:	e7e5      	b.n	800e746 <dhcp_option_long+0xe>
 800e77a:	bf00      	nop
 800e77c:	08019d48 	.word	0x08019d48
 800e780:	08019e38 	.word	0x08019e38
 800e784:	08016bb4 	.word	0x08016bb4

0800e788 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800e788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800e78c:	4680      	mov	r8, r0
 800e78e:	2800      	cmp	r0, #0
 800e790:	d04b      	beq.n	800e82a <dhcp_create_msg+0xa2>
 800e792:	4689      	mov	r9, r1
 800e794:	4615      	mov	r5, r2
 800e796:	461e      	mov	r6, r3
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800e798:	2900      	cmp	r1, #0
 800e79a:	d04f      	beq.n	800e83c <dhcp_create_msg+0xb4>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800e79c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e7a0:	f44f 719a 	mov.w	r1, #308	; 0x134
 800e7a4:	204a      	movs	r0, #74	; 0x4a
 800e7a6:	f7f9 fd05 	bl	80081b4 <pbuf_alloc>
  if (p_out == NULL) {
 800e7aa:	4607      	mov	r7, r0
 800e7ac:	2800      	cmp	r0, #0
 800e7ae:	d079      	beq.n	800e8a4 <dhcp_create_msg+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800e7b0:	8943      	ldrh	r3, [r0, #10]
 800e7b2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800e7b6:	d34a      	bcc.n	800e84e <dhcp_create_msg+0xc6>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800e7b8:	2d03      	cmp	r5, #3
 800e7ba:	d050      	beq.n	800e85e <dhcp_create_msg+0xd6>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800e7bc:	f899 3006 	ldrb.w	r3, [r9, #6]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d051      	beq.n	800e868 <dhcp_create_msg+0xe0>
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800e7c4:	4b39      	ldr	r3, [pc, #228]	; (800e8ac <dhcp_create_msg+0x124>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f8c9 3000 	str.w	r3, [r9]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800e7cc:	687c      	ldr	r4, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800e7ce:	f44f 729a 	mov.w	r2, #308	; 0x134
 800e7d2:	2100      	movs	r1, #0
 800e7d4:	4620      	mov	r0, r4
 800e7d6:	f007 f8d3 	bl	8015980 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800e7da:	2301      	movs	r3, #1
 800e7dc:	7023      	strb	r3, [r4, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800e7de:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 800e7e0:	f898 30de 	ldrb.w	r3, [r8, #222]	; 0xde
 800e7e4:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800e7e6:	f8d9 0000 	ldr.w	r0, [r9]
 800e7ea:	f7f8 f94c 	bl	8006a86 <lwip_htonl>
 800e7ee:	6060      	str	r0, [r4, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800e7f0:	2d08      	cmp	r5, #8
 800e7f2:	d00b      	beq.n	800e80c <dhcp_create_msg+0x84>
 800e7f4:	2d04      	cmp	r5, #4
 800e7f6:	d009      	beq.n	800e80c <dhcp_create_msg+0x84>
 800e7f8:	2d07      	cmp	r5, #7
 800e7fa:	d007      	beq.n	800e80c <dhcp_create_msg+0x84>
 800e7fc:	2d03      	cmp	r5, #3
 800e7fe:	d108      	bne.n	800e812 <dhcp_create_msg+0x8a>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800e800:	f899 3005 	ldrb.w	r3, [r9, #5]
 800e804:	3b04      	subs	r3, #4
 800e806:	b2db      	uxtb	r3, r3
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800e808:	2b01      	cmp	r3, #1
 800e80a:	d802      	bhi.n	800e812 <dhcp_create_msg+0x8a>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800e80c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e810:	60e3      	str	r3, [r4, #12]
{
 800e812:	2000      	movs	r0, #0
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800e814:	2805      	cmp	r0, #5
 800e816:	d82c      	bhi.n	800e872 <dhcp_create_msg+0xea>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800e818:	eb08 0300 	add.w	r3, r8, r0
 800e81c:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 800e820:	1821      	adds	r1, r4, r0
 800e822:	770b      	strb	r3, [r1, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800e824:	3001      	adds	r0, #1
 800e826:	b280      	uxth	r0, r0
 800e828:	e7f4      	b.n	800e814 <dhcp_create_msg+0x8c>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800e82a:	4b21      	ldr	r3, [pc, #132]	; (800e8b0 <dhcp_create_msg+0x128>)
 800e82c:	f240 7269 	movw	r2, #1897	; 0x769
 800e830:	4920      	ldr	r1, [pc, #128]	; (800e8b4 <dhcp_create_msg+0x12c>)
 800e832:	4821      	ldr	r0, [pc, #132]	; (800e8b8 <dhcp_create_msg+0x130>)
 800e834:	f007 f8ac 	bl	8015990 <iprintf>
 800e838:	4647      	mov	r7, r8
 800e83a:	e033      	b.n	800e8a4 <dhcp_create_msg+0x11c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800e83c:	4b1c      	ldr	r3, [pc, #112]	; (800e8b0 <dhcp_create_msg+0x128>)
 800e83e:	f240 726a 	movw	r2, #1898	; 0x76a
 800e842:	491e      	ldr	r1, [pc, #120]	; (800e8bc <dhcp_create_msg+0x134>)
 800e844:	481c      	ldr	r0, [pc, #112]	; (800e8b8 <dhcp_create_msg+0x130>)
 800e846:	f007 f8a3 	bl	8015990 <iprintf>
 800e84a:	464f      	mov	r7, r9
 800e84c:	e02a      	b.n	800e8a4 <dhcp_create_msg+0x11c>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800e84e:	4b18      	ldr	r3, [pc, #96]	; (800e8b0 <dhcp_create_msg+0x128>)
 800e850:	f240 7271 	movw	r2, #1905	; 0x771
 800e854:	491a      	ldr	r1, [pc, #104]	; (800e8c0 <dhcp_create_msg+0x138>)
 800e856:	4818      	ldr	r0, [pc, #96]	; (800e8b8 <dhcp_create_msg+0x130>)
 800e858:	f007 f89a 	bl	8015990 <iprintf>
 800e85c:	e7ac      	b.n	800e7b8 <dhcp_create_msg+0x30>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800e85e:	f899 3005 	ldrb.w	r3, [r9, #5]
 800e862:	2b03      	cmp	r3, #3
 800e864:	d1b2      	bne.n	800e7cc <dhcp_create_msg+0x44>
 800e866:	e7a9      	b.n	800e7bc <dhcp_create_msg+0x34>
      xid = LWIP_RAND();
 800e868:	f007 f920 	bl	8015aac <rand>
 800e86c:	4b0f      	ldr	r3, [pc, #60]	; (800e8ac <dhcp_create_msg+0x124>)
 800e86e:	6018      	str	r0, [r3, #0]
 800e870:	e7a8      	b.n	800e7c4 <dhcp_create_msg+0x3c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800e872:	2363      	movs	r3, #99	; 0x63
 800e874:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 800e878:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800e87c:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
 800e880:	2253      	movs	r2, #83	; 0x53
 800e882:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
 800e886:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800e88a:	34f0      	adds	r4, #240	; 0xf0
 800e88c:	2301      	movs	r3, #1
 800e88e:	2235      	movs	r2, #53	; 0x35
 800e890:	4621      	mov	r1, r4
 800e892:	2000      	movs	r0, #0
 800e894:	f7ff ff1a 	bl	800e6cc <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800e898:	462a      	mov	r2, r5
 800e89a:	4621      	mov	r1, r4
 800e89c:	f7ff ff34 	bl	800e708 <dhcp_option_byte>
  if (options_out_len) {
 800e8a0:	b106      	cbz	r6, 800e8a4 <dhcp_create_msg+0x11c>
    *options_out_len = options_out_len_loc;
 800e8a2:	8030      	strh	r0, [r6, #0]
  }
  return p_out;
}
 800e8a4:	4638      	mov	r0, r7
 800e8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8aa:	bf00      	nop
 800e8ac:	20000ad8 	.word	0x20000ad8
 800e8b0:	08019d48 	.word	0x08019d48
 800e8b4:	08019e74 	.word	0x08019e74
 800e8b8:	08016bb4 	.word	0x08016bb4
 800e8bc:	08019e94 	.word	0x08019e94
 800e8c0:	08019eb4 	.word	0x08019eb4

0800e8c4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800e8c4:	b538      	push	{r3, r4, r5, lr}
 800e8c6:	4604      	mov	r4, r0
 800e8c8:	4610      	mov	r0, r2
  options[options_out_len++] = DHCP_OPTION_END;
 800e8ca:	1c63      	adds	r3, r4, #1
 800e8cc:	b29b      	uxth	r3, r3
 800e8ce:	22ff      	movs	r2, #255	; 0xff
 800e8d0:	550a      	strb	r2, [r1, r4]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800e8d2:	e005      	b.n	800e8e0 <dhcp_option_trailer+0x1c>
 800e8d4:	2b43      	cmp	r3, #67	; 0x43
 800e8d6:	d808      	bhi.n	800e8ea <dhcp_option_trailer+0x26>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800e8d8:	1c5c      	adds	r4, r3, #1
 800e8da:	2500      	movs	r5, #0
 800e8dc:	54cd      	strb	r5, [r1, r3]
 800e8de:	b2a3      	uxth	r3, r4
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800e8e0:	2b43      	cmp	r3, #67	; 0x43
 800e8e2:	d9f7      	bls.n	800e8d4 <dhcp_option_trailer+0x10>
 800e8e4:	f013 0f03 	tst.w	r3, #3
 800e8e8:	d1f4      	bne.n	800e8d4 <dhcp_option_trailer+0x10>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800e8ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e8ee:	b289      	uxth	r1, r1
 800e8f0:	f7f9 fd0e 	bl	8008310 <pbuf_realloc>
}
 800e8f4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e8f8 <dhcp_rebind>:
{
 800e8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8fc:	b084      	sub	sp, #16
 800e8fe:	4680      	mov	r8, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e900:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800e904:	2104      	movs	r1, #4
 800e906:	4628      	mov	r0, r5
 800e908:	f7ff feba 	bl	800e680 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e90c:	f10d 030e 	add.w	r3, sp, #14
 800e910:	2203      	movs	r2, #3
 800e912:	4629      	mov	r1, r5
 800e914:	4640      	mov	r0, r8
 800e916:	f7ff ff37 	bl	800e788 <dhcp_create_msg>
  if (p_out != NULL) {
 800e91a:	2800      	cmp	r0, #0
 800e91c:	d04a      	beq.n	800e9b4 <dhcp_rebind+0xbc>
 800e91e:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e920:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e922:	36f0      	adds	r6, #240	; 0xf0
 800e924:	2302      	movs	r3, #2
 800e926:	2239      	movs	r2, #57	; 0x39
 800e928:	4631      	mov	r1, r6
 800e92a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e92e:	f7ff fecd 	bl	800e6cc <dhcp_option>
 800e932:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e936:	f8b8 20d4 	ldrh.w	r2, [r8, #212]	; 0xd4
 800e93a:	4631      	mov	r1, r6
 800e93c:	f7ff fea8 	bl	800e690 <dhcp_option_short>
 800e940:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e944:	2304      	movs	r3, #4
 800e946:	2237      	movs	r2, #55	; 0x37
 800e948:	4631      	mov	r1, r6
 800e94a:	f7ff febf 	bl	800e6cc <dhcp_option>
 800e94e:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e952:	2400      	movs	r4, #0
 800e954:	e00a      	b.n	800e96c <dhcp_rebind+0x74>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e956:	4b20      	ldr	r3, [pc, #128]	; (800e9d8 <dhcp_rebind+0xe0>)
 800e958:	5d1a      	ldrb	r2, [r3, r4]
 800e95a:	4631      	mov	r1, r6
 800e95c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e960:	f7ff fed2 	bl	800e708 <dhcp_option_byte>
 800e964:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e968:	3401      	adds	r4, #1
 800e96a:	b2e4      	uxtb	r4, r4
 800e96c:	2c03      	cmp	r4, #3
 800e96e:	d9f2      	bls.n	800e956 <dhcp_rebind+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e970:	463a      	mov	r2, r7
 800e972:	4631      	mov	r1, r6
 800e974:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e978:	f7ff ffa4 	bl	800e8c4 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e97c:	f8cd 8000 	str.w	r8, [sp]
 800e980:	2343      	movs	r3, #67	; 0x43
 800e982:	4a16      	ldr	r2, [pc, #88]	; (800e9dc <dhcp_rebind+0xe4>)
 800e984:	4639      	mov	r1, r7
 800e986:	4816      	ldr	r0, [pc, #88]	; (800e9e0 <dhcp_rebind+0xe8>)
 800e988:	6800      	ldr	r0, [r0, #0]
 800e98a:	f7ff fbbf 	bl	800e10c <udp_sendto_if>
 800e98e:	4604      	mov	r4, r0
    pbuf_free(p_out);
 800e990:	4638      	mov	r0, r7
 800e992:	f7f9 fbad 	bl	80080f0 <pbuf_free>
  if (dhcp->tries < 255) {
 800e996:	79ab      	ldrb	r3, [r5, #6]
 800e998:	2bff      	cmp	r3, #255	; 0xff
 800e99a:	d001      	beq.n	800e9a0 <dhcp_rebind+0xa8>
    dhcp->tries++;
 800e99c:	3301      	adds	r3, #1
 800e99e:	71ab      	strb	r3, [r5, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800e9a0:	79ab      	ldrb	r3, [r5, #6]
 800e9a2:	2b09      	cmp	r3, #9
 800e9a4:	d809      	bhi.n	800e9ba <dhcp_rebind+0xc2>
 800e9a6:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800e9aa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e9ae:	00db      	lsls	r3, r3, #3
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	e004      	b.n	800e9be <dhcp_rebind+0xc6>
    result = ERR_MEM;
 800e9b4:	f04f 34ff 	mov.w	r4, #4294967295
 800e9b8:	e7ed      	b.n	800e996 <dhcp_rebind+0x9e>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800e9ba:	f242 7310 	movw	r3, #10000	; 0x2710
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e9be:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e9c2:	4a08      	ldr	r2, [pc, #32]	; (800e9e4 <dhcp_rebind+0xec>)
 800e9c4:	fb82 1203 	smull	r1, r2, r2, r3
 800e9c8:	17db      	asrs	r3, r3, #31
 800e9ca:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800e9ce:	812b      	strh	r3, [r5, #8]
}
 800e9d0:	4620      	mov	r0, r4
 800e9d2:	b004      	add	sp, #16
 800e9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9d8:	0801a0c8 	.word	0x0801a0c8
 800e9dc:	0801a4ec 	.word	0x0801a4ec
 800e9e0:	20000ad0 	.word	0x20000ad0
 800e9e4:	10624dd3 	.word	0x10624dd3

0800e9e8 <dhcp_t2_timeout>:
{
 800e9e8:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e9ea:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e9ee:	7963      	ldrb	r3, [r4, #5]
 800e9f0:	2b01      	cmp	r3, #1
 800e9f2:	d005      	beq.n	800ea00 <dhcp_t2_timeout+0x18>
 800e9f4:	2b0a      	cmp	r3, #10
 800e9f6:	d003      	beq.n	800ea00 <dhcp_t2_timeout+0x18>
 800e9f8:	2b05      	cmp	r3, #5
 800e9fa:	d001      	beq.n	800ea00 <dhcp_t2_timeout+0x18>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800e9fc:	2b04      	cmp	r3, #4
 800e9fe:	d10b      	bne.n	800ea18 <dhcp_t2_timeout+0x30>
    dhcp_rebind(netif);
 800ea00:	f7ff ff7a 	bl	800e8f8 <dhcp_rebind>
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ea04:	8aa3      	ldrh	r3, [r4, #20]
 800ea06:	8a62      	ldrh	r2, [r4, #18]
 800ea08:	1a9b      	subs	r3, r3, r2
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	dd04      	ble.n	800ea18 <dhcp_t2_timeout+0x30>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800ea0e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800ea12:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800ea16:	8223      	strh	r3, [r4, #16]
}
 800ea18:	bd10      	pop	{r4, pc}
	...

0800ea1c <dhcp_reboot>:
{
 800ea1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea20:	b084      	sub	sp, #16
 800ea22:	4680      	mov	r8, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ea24:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800ea28:	2103      	movs	r1, #3
 800ea2a:	4628      	mov	r0, r5
 800ea2c:	f7ff fe28 	bl	800e680 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ea30:	f10d 030e 	add.w	r3, sp, #14
 800ea34:	2203      	movs	r2, #3
 800ea36:	4629      	mov	r1, r5
 800ea38:	4640      	mov	r0, r8
 800ea3a:	f7ff fea5 	bl	800e788 <dhcp_create_msg>
  if (p_out != NULL) {
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	d05c      	beq.n	800eafc <dhcp_reboot+0xe0>
 800ea42:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ea44:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ea46:	36f0      	adds	r6, #240	; 0xf0
 800ea48:	2302      	movs	r3, #2
 800ea4a:	2239      	movs	r2, #57	; 0x39
 800ea4c:	4631      	mov	r1, r6
 800ea4e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800ea52:	f7ff fe3b 	bl	800e6cc <dhcp_option>
 800ea56:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800ea5a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ea5e:	4631      	mov	r1, r6
 800ea60:	f7ff fe16 	bl	800e690 <dhcp_option_short>
 800ea64:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800ea68:	2304      	movs	r3, #4
 800ea6a:	2232      	movs	r2, #50	; 0x32
 800ea6c:	4631      	mov	r1, r6
 800ea6e:	f7ff fe2d 	bl	800e6cc <dhcp_option>
 800ea72:	4604      	mov	r4, r0
 800ea74:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800ea78:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800ea7a:	f7f8 f804 	bl	8006a86 <lwip_htonl>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	4631      	mov	r1, r6
 800ea82:	4620      	mov	r0, r4
 800ea84:	f7ff fe58 	bl	800e738 <dhcp_option_long>
 800ea88:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ea8c:	2304      	movs	r3, #4
 800ea8e:	2237      	movs	r2, #55	; 0x37
 800ea90:	4631      	mov	r1, r6
 800ea92:	f7ff fe1b 	bl	800e6cc <dhcp_option>
 800ea96:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ea9a:	2400      	movs	r4, #0
 800ea9c:	e00a      	b.n	800eab4 <dhcp_reboot+0x98>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ea9e:	4b20      	ldr	r3, [pc, #128]	; (800eb20 <dhcp_reboot+0x104>)
 800eaa0:	5d1a      	ldrb	r2, [r3, r4]
 800eaa2:	4631      	mov	r1, r6
 800eaa4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800eaa8:	f7ff fe2e 	bl	800e708 <dhcp_option_byte>
 800eaac:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800eab0:	3401      	adds	r4, #1
 800eab2:	b2e4      	uxtb	r4, r4
 800eab4:	2c03      	cmp	r4, #3
 800eab6:	d9f2      	bls.n	800ea9e <dhcp_reboot+0x82>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800eab8:	463a      	mov	r2, r7
 800eaba:	4631      	mov	r1, r6
 800eabc:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800eac0:	f7ff ff00 	bl	800e8c4 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800eac4:	f8cd 8000 	str.w	r8, [sp]
 800eac8:	2343      	movs	r3, #67	; 0x43
 800eaca:	4a16      	ldr	r2, [pc, #88]	; (800eb24 <dhcp_reboot+0x108>)
 800eacc:	4639      	mov	r1, r7
 800eace:	4816      	ldr	r0, [pc, #88]	; (800eb28 <dhcp_reboot+0x10c>)
 800ead0:	6800      	ldr	r0, [r0, #0]
 800ead2:	f7ff fb1b 	bl	800e10c <udp_sendto_if>
 800ead6:	4604      	mov	r4, r0
    pbuf_free(p_out);
 800ead8:	4638      	mov	r0, r7
 800eada:	f7f9 fb09 	bl	80080f0 <pbuf_free>
  if (dhcp->tries < 255) {
 800eade:	79ab      	ldrb	r3, [r5, #6]
 800eae0:	2bff      	cmp	r3, #255	; 0xff
 800eae2:	d001      	beq.n	800eae8 <dhcp_reboot+0xcc>
    dhcp->tries++;
 800eae4:	3301      	adds	r3, #1
 800eae6:	71ab      	strb	r3, [r5, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800eae8:	79ab      	ldrb	r3, [r5, #6]
 800eaea:	2b09      	cmp	r3, #9
 800eaec:	d809      	bhi.n	800eb02 <dhcp_reboot+0xe6>
 800eaee:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800eaf2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800eaf6:	00db      	lsls	r3, r3, #3
 800eaf8:	b29b      	uxth	r3, r3
 800eafa:	e004      	b.n	800eb06 <dhcp_reboot+0xea>
    result = ERR_MEM;
 800eafc:	f04f 34ff 	mov.w	r4, #4294967295
 800eb00:	e7ed      	b.n	800eade <dhcp_reboot+0xc2>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800eb02:	f242 7310 	movw	r3, #10000	; 0x2710
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800eb06:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800eb0a:	4a08      	ldr	r2, [pc, #32]	; (800eb2c <dhcp_reboot+0x110>)
 800eb0c:	fb82 1203 	smull	r1, r2, r2, r3
 800eb10:	17db      	asrs	r3, r3, #31
 800eb12:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800eb16:	812b      	strh	r3, [r5, #8]
}
 800eb18:	4620      	mov	r0, r4
 800eb1a:	b004      	add	sp, #16
 800eb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb20:	0801a0c8 	.word	0x0801a0c8
 800eb24:	0801a4ec 	.word	0x0801a4ec
 800eb28:	20000ad0 	.word	0x20000ad0
 800eb2c:	10624dd3 	.word	0x10624dd3

0800eb30 <dhcp_select>:
{
 800eb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb34:	b084      	sub	sp, #16
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800eb36:	2800      	cmp	r0, #0
 800eb38:	d052      	beq.n	800ebe0 <dhcp_select+0xb0>
 800eb3a:	4680      	mov	r8, r0
  dhcp = netif_dhcp_data(netif);
 800eb3c:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800eb40:	2c00      	cmp	r4, #0
 800eb42:	d057      	beq.n	800ebf4 <dhcp_select+0xc4>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800eb44:	2101      	movs	r1, #1
 800eb46:	4620      	mov	r0, r4
 800eb48:	f7ff fd9a 	bl	800e680 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800eb4c:	f10d 030e 	add.w	r3, sp, #14
 800eb50:	2203      	movs	r2, #3
 800eb52:	4621      	mov	r1, r4
 800eb54:	4640      	mov	r0, r8
 800eb56:	f7ff fe17 	bl	800e788 <dhcp_create_msg>
  if (p_out != NULL) {
 800eb5a:	4607      	mov	r7, r0
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	f000 8092 	beq.w	800ec86 <dhcp_select+0x156>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800eb62:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800eb64:	36f0      	adds	r6, #240	; 0xf0
 800eb66:	2302      	movs	r3, #2
 800eb68:	2239      	movs	r2, #57	; 0x39
 800eb6a:	4631      	mov	r1, r6
 800eb6c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800eb70:	f7ff fdac 	bl	800e6cc <dhcp_option>
 800eb74:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800eb78:	f8b8 20d4 	ldrh.w	r2, [r8, #212]	; 0xd4
 800eb7c:	4631      	mov	r1, r6
 800eb7e:	f7ff fd87 	bl	800e690 <dhcp_option_short>
 800eb82:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800eb86:	2304      	movs	r3, #4
 800eb88:	2232      	movs	r2, #50	; 0x32
 800eb8a:	4631      	mov	r1, r6
 800eb8c:	f7ff fd9e 	bl	800e6cc <dhcp_option>
 800eb90:	4605      	mov	r5, r0
 800eb92:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800eb96:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800eb98:	f7f7 ff75 	bl	8006a86 <lwip_htonl>
 800eb9c:	4602      	mov	r2, r0
 800eb9e:	4631      	mov	r1, r6
 800eba0:	4628      	mov	r0, r5
 800eba2:	f7ff fdc9 	bl	800e738 <dhcp_option_long>
 800eba6:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800ebaa:	2304      	movs	r3, #4
 800ebac:	2236      	movs	r2, #54	; 0x36
 800ebae:	4631      	mov	r1, r6
 800ebb0:	f7ff fd8c 	bl	800e6cc <dhcp_option>
 800ebb4:	4605      	mov	r5, r0
 800ebb6:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800ebba:	69a0      	ldr	r0, [r4, #24]
 800ebbc:	f7f7 ff63 	bl	8006a86 <lwip_htonl>
 800ebc0:	4602      	mov	r2, r0
 800ebc2:	4631      	mov	r1, r6
 800ebc4:	4628      	mov	r0, r5
 800ebc6:	f7ff fdb7 	bl	800e738 <dhcp_option_long>
 800ebca:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ebce:	2304      	movs	r3, #4
 800ebd0:	2237      	movs	r2, #55	; 0x37
 800ebd2:	4631      	mov	r1, r6
 800ebd4:	f7ff fd7a 	bl	800e6cc <dhcp_option>
 800ebd8:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ebdc:	2500      	movs	r5, #0
 800ebde:	e01e      	b.n	800ec1e <dhcp_select+0xee>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800ebe0:	4b2c      	ldr	r3, [pc, #176]	; (800ec94 <dhcp_select+0x164>)
 800ebe2:	f240 1277 	movw	r2, #375	; 0x177
 800ebe6:	492c      	ldr	r1, [pc, #176]	; (800ec98 <dhcp_select+0x168>)
 800ebe8:	482c      	ldr	r0, [pc, #176]	; (800ec9c <dhcp_select+0x16c>)
 800ebea:	f006 fed1 	bl	8015990 <iprintf>
 800ebee:	f06f 050f 	mvn.w	r5, #15
 800ebf2:	e044      	b.n	800ec7e <dhcp_select+0x14e>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800ebf4:	4b27      	ldr	r3, [pc, #156]	; (800ec94 <dhcp_select+0x164>)
 800ebf6:	f240 1279 	movw	r2, #377	; 0x179
 800ebfa:	4929      	ldr	r1, [pc, #164]	; (800eca0 <dhcp_select+0x170>)
 800ebfc:	4827      	ldr	r0, [pc, #156]	; (800ec9c <dhcp_select+0x16c>)
 800ebfe:	f006 fec7 	bl	8015990 <iprintf>
 800ec02:	f06f 0505 	mvn.w	r5, #5
 800ec06:	e03a      	b.n	800ec7e <dhcp_select+0x14e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ec08:	4b26      	ldr	r3, [pc, #152]	; (800eca4 <dhcp_select+0x174>)
 800ec0a:	5d5a      	ldrb	r2, [r3, r5]
 800ec0c:	4631      	mov	r1, r6
 800ec0e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800ec12:	f7ff fd79 	bl	800e708 <dhcp_option_byte>
 800ec16:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ec1a:	3501      	adds	r5, #1
 800ec1c:	b2ed      	uxtb	r5, r5
 800ec1e:	2d03      	cmp	r5, #3
 800ec20:	d9f2      	bls.n	800ec08 <dhcp_select+0xd8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ec22:	463a      	mov	r2, r7
 800ec24:	4631      	mov	r1, r6
 800ec26:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800ec2a:	f7ff fe4b 	bl	800e8c4 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800ec2e:	4b1e      	ldr	r3, [pc, #120]	; (800eca8 <dhcp_select+0x178>)
 800ec30:	9301      	str	r3, [sp, #4]
 800ec32:	f8cd 8000 	str.w	r8, [sp]
 800ec36:	2343      	movs	r3, #67	; 0x43
 800ec38:	4a1c      	ldr	r2, [pc, #112]	; (800ecac <dhcp_select+0x17c>)
 800ec3a:	4639      	mov	r1, r7
 800ec3c:	481c      	ldr	r0, [pc, #112]	; (800ecb0 <dhcp_select+0x180>)
 800ec3e:	6800      	ldr	r0, [r0, #0]
 800ec40:	f7ff f946 	bl	800ded0 <udp_sendto_if_src>
 800ec44:	4605      	mov	r5, r0
    pbuf_free(p_out);
 800ec46:	4638      	mov	r0, r7
 800ec48:	f7f9 fa52 	bl	80080f0 <pbuf_free>
  if (dhcp->tries < 255) {
 800ec4c:	79a3      	ldrb	r3, [r4, #6]
 800ec4e:	2bff      	cmp	r3, #255	; 0xff
 800ec50:	d001      	beq.n	800ec56 <dhcp_select+0x126>
    dhcp->tries++;
 800ec52:	3301      	adds	r3, #1
 800ec54:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800ec56:	79a2      	ldrb	r2, [r4, #6]
 800ec58:	2a05      	cmp	r2, #5
 800ec5a:	d817      	bhi.n	800ec8c <dhcp_select+0x15c>
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	4093      	lsls	r3, r2
 800ec60:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800ec64:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ec68:	00db      	lsls	r3, r3, #3
 800ec6a:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ec6c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ec70:	4a10      	ldr	r2, [pc, #64]	; (800ecb4 <dhcp_select+0x184>)
 800ec72:	fb82 1203 	smull	r1, r2, r2, r3
 800ec76:	17db      	asrs	r3, r3, #31
 800ec78:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800ec7c:	8123      	strh	r3, [r4, #8]
}
 800ec7e:	4628      	mov	r0, r5
 800ec80:	b004      	add	sp, #16
 800ec82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 800ec86:	f04f 35ff 	mov.w	r5, #4294967295
 800ec8a:	e7df      	b.n	800ec4c <dhcp_select+0x11c>
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800ec8c:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ec90:	e7ec      	b.n	800ec6c <dhcp_select+0x13c>
 800ec92:	bf00      	nop
 800ec94:	08019d48 	.word	0x08019d48
 800ec98:	08019ef4 	.word	0x08019ef4
 800ec9c:	08016bb4 	.word	0x08016bb4
 800eca0:	08019f10 	.word	0x08019f10
 800eca4:	0801a0c8 	.word	0x0801a0c8
 800eca8:	0801a4d4 	.word	0x0801a4d4
 800ecac:	0801a4ec 	.word	0x0801a4ec
 800ecb0:	20000ad0 	.word	0x20000ad0
 800ecb4:	10624dd3 	.word	0x10624dd3

0800ecb8 <dhcp_handle_offer>:
{
 800ecb8:	b570      	push	{r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ecba:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800ecbe:	4b0e      	ldr	r3, [pc, #56]	; (800ecf8 <dhcp_handle_offer+0x40>)
 800ecc0:	789b      	ldrb	r3, [r3, #2]
 800ecc2:	b1c3      	cbz	r3, 800ecf6 <dhcp_handle_offer+0x3e>
 800ecc4:	4604      	mov	r4, r0
 800ecc6:	460e      	mov	r6, r1
    dhcp->request_timeout = 0; /* stop timer */
 800ecc8:	2300      	movs	r3, #0
 800ecca:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800eccc:	f115 0f18 	cmn.w	r5, #24
 800ecd0:	d00c      	beq.n	800ecec <dhcp_handle_offer+0x34>
 800ecd2:	4b0a      	ldr	r3, [pc, #40]	; (800ecfc <dhcp_handle_offer+0x44>)
 800ecd4:	6898      	ldr	r0, [r3, #8]
 800ecd6:	f7f7 fed6 	bl	8006a86 <lwip_htonl>
 800ecda:	61a8      	str	r0, [r5, #24]
 800ecdc:	2300      	movs	r3, #0
 800ecde:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800ece2:	626b      	str	r3, [r5, #36]	; 0x24
 800ece4:	622b      	str	r3, [r5, #32]
 800ece6:	61eb      	str	r3, [r5, #28]
 800ece8:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800ecec:	6933      	ldr	r3, [r6, #16]
 800ecee:	632b      	str	r3, [r5, #48]	; 0x30
    dhcp_select(netif);
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	f7ff ff1d 	bl	800eb30 <dhcp_select>
}
 800ecf6:	bd70      	pop	{r4, r5, r6, pc}
 800ecf8:	20007fc8 	.word	0x20007fc8
 800ecfc:	20007fd4 	.word	0x20007fd4

0800ed00 <dhcp_discover>:
{
 800ed00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed04:	b084      	sub	sp, #16
 800ed06:	4606      	mov	r6, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ed08:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	6323      	str	r3, [r4, #48]	; 0x30
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800ed10:	2106      	movs	r1, #6
 800ed12:	4620      	mov	r0, r4
 800ed14:	f7ff fcb4 	bl	800e680 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800ed18:	f10d 030e 	add.w	r3, sp, #14
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	4621      	mov	r1, r4
 800ed20:	4630      	mov	r0, r6
 800ed22:	f7ff fd31 	bl	800e788 <dhcp_create_msg>
  if (p_out != NULL) {
 800ed26:	2800      	cmp	r0, #0
 800ed28:	d03b      	beq.n	800eda2 <dhcp_discover+0xa2>
 800ed2a:	4680      	mov	r8, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ed2c:	6847      	ldr	r7, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ed2e:	37f0      	adds	r7, #240	; 0xf0
 800ed30:	2302      	movs	r3, #2
 800ed32:	2239      	movs	r2, #57	; 0x39
 800ed34:	4639      	mov	r1, r7
 800ed36:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800ed3a:	f7ff fcc7 	bl	800e6cc <dhcp_option>
 800ed3e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ed42:	f8b6 20d4 	ldrh.w	r2, [r6, #212]	; 0xd4
 800ed46:	4639      	mov	r1, r7
 800ed48:	f7ff fca2 	bl	800e690 <dhcp_option_short>
 800ed4c:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ed50:	2304      	movs	r3, #4
 800ed52:	2237      	movs	r2, #55	; 0x37
 800ed54:	4639      	mov	r1, r7
 800ed56:	f7ff fcb9 	bl	800e6cc <dhcp_option>
 800ed5a:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ed5e:	2500      	movs	r5, #0
 800ed60:	e00a      	b.n	800ed78 <dhcp_discover+0x78>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ed62:	4b20      	ldr	r3, [pc, #128]	; (800ede4 <dhcp_discover+0xe4>)
 800ed64:	5d5a      	ldrb	r2, [r3, r5]
 800ed66:	4639      	mov	r1, r7
 800ed68:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800ed6c:	f7ff fccc 	bl	800e708 <dhcp_option_byte>
 800ed70:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ed74:	3501      	adds	r5, #1
 800ed76:	b2ed      	uxtb	r5, r5
 800ed78:	2d03      	cmp	r5, #3
 800ed7a:	d9f2      	bls.n	800ed62 <dhcp_discover+0x62>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ed7c:	4642      	mov	r2, r8
 800ed7e:	4639      	mov	r1, r7
 800ed80:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800ed84:	f7ff fd9e 	bl	800e8c4 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800ed88:	4b17      	ldr	r3, [pc, #92]	; (800ede8 <dhcp_discover+0xe8>)
 800ed8a:	9301      	str	r3, [sp, #4]
 800ed8c:	9600      	str	r6, [sp, #0]
 800ed8e:	2343      	movs	r3, #67	; 0x43
 800ed90:	4a16      	ldr	r2, [pc, #88]	; (800edec <dhcp_discover+0xec>)
 800ed92:	4641      	mov	r1, r8
 800ed94:	4816      	ldr	r0, [pc, #88]	; (800edf0 <dhcp_discover+0xf0>)
 800ed96:	6800      	ldr	r0, [r0, #0]
 800ed98:	f7ff f89a 	bl	800ded0 <udp_sendto_if_src>
    pbuf_free(p_out);
 800ed9c:	4640      	mov	r0, r8
 800ed9e:	f7f9 f9a7 	bl	80080f0 <pbuf_free>
  if (dhcp->tries < 255) {
 800eda2:	79a3      	ldrb	r3, [r4, #6]
 800eda4:	2bff      	cmp	r3, #255	; 0xff
 800eda6:	d001      	beq.n	800edac <dhcp_discover+0xac>
    dhcp->tries++;
 800eda8:	3301      	adds	r3, #1
 800edaa:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800edac:	79a2      	ldrb	r2, [r4, #6]
 800edae:	2a05      	cmp	r2, #5
 800edb0:	d814      	bhi.n	800eddc <dhcp_discover+0xdc>
 800edb2:	2301      	movs	r3, #1
 800edb4:	4093      	lsls	r3, r2
 800edb6:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800edba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800edbe:	00db      	lsls	r3, r3, #3
 800edc0:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800edc2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800edc6:	4a0b      	ldr	r2, [pc, #44]	; (800edf4 <dhcp_discover+0xf4>)
 800edc8:	fb82 1203 	smull	r1, r2, r2, r3
 800edcc:	17db      	asrs	r3, r3, #31
 800edce:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800edd2:	8123      	strh	r3, [r4, #8]
}
 800edd4:	2000      	movs	r0, #0
 800edd6:	b004      	add	sp, #16
 800edd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800eddc:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ede0:	e7ef      	b.n	800edc2 <dhcp_discover+0xc2>
 800ede2:	bf00      	nop
 800ede4:	0801a0c8 	.word	0x0801a0c8
 800ede8:	0801a4d4 	.word	0x0801a4d4
 800edec:	0801a4ec 	.word	0x0801a4ec
 800edf0:	20000ad0 	.word	0x20000ad0
 800edf4:	10624dd3 	.word	0x10624dd3

0800edf8 <dhcp_decline>:
{
 800edf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edfc:	b084      	sub	sp, #16
 800edfe:	4605      	mov	r5, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ee00:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800ee04:	210c      	movs	r1, #12
 800ee06:	4620      	mov	r0, r4
 800ee08:	f7ff fc3a 	bl	800e680 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800ee0c:	f10d 030e 	add.w	r3, sp, #14
 800ee10:	2204      	movs	r2, #4
 800ee12:	4621      	mov	r1, r4
 800ee14:	4628      	mov	r0, r5
 800ee16:	f7ff fcb7 	bl	800e788 <dhcp_create_msg>
  if (p_out != NULL) {
 800ee1a:	b398      	cbz	r0, 800ee84 <dhcp_decline+0x8c>
 800ee1c:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ee1e:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800ee20:	36f0      	adds	r6, #240	; 0xf0
 800ee22:	2304      	movs	r3, #4
 800ee24:	2232      	movs	r2, #50	; 0x32
 800ee26:	4631      	mov	r1, r6
 800ee28:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800ee2c:	f7ff fc4e 	bl	800e6cc <dhcp_option>
 800ee30:	4680      	mov	r8, r0
 800ee32:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800ee36:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ee38:	f7f7 fe25 	bl	8006a86 <lwip_htonl>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	4631      	mov	r1, r6
 800ee40:	4640      	mov	r0, r8
 800ee42:	f7ff fc79 	bl	800e738 <dhcp_option_long>
 800ee46:	f8ad 000e 	strh.w	r0, [sp, #14]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ee4a:	463a      	mov	r2, r7
 800ee4c:	4631      	mov	r1, r6
 800ee4e:	f7ff fd39 	bl	800e8c4 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800ee52:	4b0e      	ldr	r3, [pc, #56]	; (800ee8c <dhcp_decline+0x94>)
 800ee54:	9301      	str	r3, [sp, #4]
 800ee56:	9500      	str	r5, [sp, #0]
 800ee58:	2343      	movs	r3, #67	; 0x43
 800ee5a:	4a0d      	ldr	r2, [pc, #52]	; (800ee90 <dhcp_decline+0x98>)
 800ee5c:	4639      	mov	r1, r7
 800ee5e:	480d      	ldr	r0, [pc, #52]	; (800ee94 <dhcp_decline+0x9c>)
 800ee60:	6800      	ldr	r0, [r0, #0]
 800ee62:	f7ff f835 	bl	800ded0 <udp_sendto_if_src>
 800ee66:	4605      	mov	r5, r0
    pbuf_free(p_out);
 800ee68:	4638      	mov	r0, r7
 800ee6a:	f7f9 f941 	bl	80080f0 <pbuf_free>
  if (dhcp->tries < 255) {
 800ee6e:	79a3      	ldrb	r3, [r4, #6]
 800ee70:	2bff      	cmp	r3, #255	; 0xff
 800ee72:	d001      	beq.n	800ee78 <dhcp_decline+0x80>
    dhcp->tries++;
 800ee74:	3301      	adds	r3, #1
 800ee76:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ee78:	2314      	movs	r3, #20
 800ee7a:	8123      	strh	r3, [r4, #8]
}
 800ee7c:	4628      	mov	r0, r5
 800ee7e:	b004      	add	sp, #16
 800ee80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 800ee84:	f04f 35ff 	mov.w	r5, #4294967295
 800ee88:	e7f1      	b.n	800ee6e <dhcp_decline+0x76>
 800ee8a:	bf00      	nop
 800ee8c:	0801a4d4 	.word	0x0801a4d4
 800ee90:	0801a4ec 	.word	0x0801a4ec
 800ee94:	20000ad0 	.word	0x20000ad0

0800ee98 <dhcp_check>:
{
 800ee98:	b538      	push	{r3, r4, r5, lr}
 800ee9a:	4605      	mov	r5, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ee9c:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800eea0:	2108      	movs	r1, #8
 800eea2:	4620      	mov	r0, r4
 800eea4:	f7ff fbec 	bl	800e680 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800eea8:	2200      	movs	r2, #0
 800eeaa:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800eeae:	4628      	mov	r0, r5
 800eeb0:	f001 f9c8 	bl	8010244 <etharp_query>
  if (dhcp->tries < 255) {
 800eeb4:	79a3      	ldrb	r3, [r4, #6]
 800eeb6:	2bff      	cmp	r3, #255	; 0xff
 800eeb8:	d001      	beq.n	800eebe <dhcp_check+0x26>
    dhcp->tries++;
 800eeba:	3301      	adds	r3, #1
 800eebc:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800eebe:	2301      	movs	r3, #1
 800eec0:	8123      	strh	r3, [r4, #8]
}
 800eec2:	bd38      	pop	{r3, r4, r5, pc}

0800eec4 <dhcp_bind>:
{
 800eec4:	b530      	push	{r4, r5, lr}
 800eec6:	b083      	sub	sp, #12
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800eec8:	2800      	cmp	r0, #0
 800eeca:	d065      	beq.n	800ef98 <dhcp_bind+0xd4>
 800eecc:	4605      	mov	r5, r0
  dhcp = netif_dhcp_data(netif);
 800eece:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800eed2:	2c00      	cmp	r4, #0
 800eed4:	d068      	beq.n	800efa8 <dhcp_bind+0xe4>
  dhcp->lease_used = 0;
 800eed6:	2300      	movs	r3, #0
 800eed8:	8263      	strh	r3, [r4, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800eeda:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800eedc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800eee0:	d00f      	beq.n	800ef02 <dhcp_bind+0x3e>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800eee2:	321e      	adds	r2, #30
 800eee4:	f1a3 3377 	sub.w	r3, r3, #2004318071	; 0x77777777
 800eee8:	fba3 1302 	umull	r1, r3, r3, r2
 800eeec:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 800eeee:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 800eef2:	d301      	bcc.n	800eef8 <dhcp_bind+0x34>
      timeout = 0xffff;
 800eef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t0_timeout = (u16_t)timeout;
 800eef8:	b29b      	uxth	r3, r3
 800eefa:	82a3      	strh	r3, [r4, #20]
    if (dhcp->t0_timeout == 0) {
 800eefc:	b90b      	cbnz	r3, 800ef02 <dhcp_bind+0x3e>
      dhcp->t0_timeout = 1;
 800eefe:	2301      	movs	r3, #1
 800ef00:	82a3      	strh	r3, [r4, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800ef02:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ef04:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ef08:	d010      	beq.n	800ef2c <dhcp_bind+0x68>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ef0a:	321e      	adds	r2, #30
 800ef0c:	4b34      	ldr	r3, [pc, #208]	; (800efe0 <dhcp_bind+0x11c>)
 800ef0e:	fba3 1302 	umull	r1, r3, r3, r2
 800ef12:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 800ef14:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 800ef18:	d301      	bcc.n	800ef1e <dhcp_bind+0x5a>
      timeout = 0xffff;
 800ef1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t1_timeout = (u16_t)timeout;
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	8163      	strh	r3, [r4, #10]
    if (dhcp->t1_timeout == 0) {
 800ef22:	b90b      	cbnz	r3, 800ef28 <dhcp_bind+0x64>
      dhcp->t1_timeout = 1;
 800ef24:	2301      	movs	r3, #1
 800ef26:	8163      	strh	r3, [r4, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800ef28:	8963      	ldrh	r3, [r4, #10]
 800ef2a:	81e3      	strh	r3, [r4, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800ef2c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ef2e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ef32:	d010      	beq.n	800ef56 <dhcp_bind+0x92>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ef34:	321e      	adds	r2, #30
 800ef36:	4b2a      	ldr	r3, [pc, #168]	; (800efe0 <dhcp_bind+0x11c>)
 800ef38:	fba3 1302 	umull	r1, r3, r3, r2
 800ef3c:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 800ef3e:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 800ef42:	d301      	bcc.n	800ef48 <dhcp_bind+0x84>
      timeout = 0xffff;
 800ef44:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t2_timeout = (u16_t)timeout;
 800ef48:	b29b      	uxth	r3, r3
 800ef4a:	81a3      	strh	r3, [r4, #12]
    if (dhcp->t2_timeout == 0) {
 800ef4c:	b90b      	cbnz	r3, 800ef52 <dhcp_bind+0x8e>
      dhcp->t2_timeout = 1;
 800ef4e:	2301      	movs	r3, #1
 800ef50:	81a3      	strh	r3, [r4, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800ef52:	89a3      	ldrh	r3, [r4, #12]
 800ef54:	8223      	strh	r3, [r4, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800ef56:	8962      	ldrh	r2, [r4, #10]
 800ef58:	89a3      	ldrh	r3, [r4, #12]
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d302      	bcc.n	800ef64 <dhcp_bind+0xa0>
 800ef5e:	b10b      	cbz	r3, 800ef64 <dhcp_bind+0xa0>
    dhcp->t1_timeout = 0;
 800ef60:	2300      	movs	r3, #0
 800ef62:	8163      	strh	r3, [r4, #10]
  if (dhcp->subnet_mask_given) {
 800ef64:	79e3      	ldrb	r3, [r4, #7]
 800ef66:	b33b      	cbz	r3, 800efb8 <dhcp_bind+0xf4>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800ef68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef6a:	9301      	str	r3, [sp, #4]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800ef6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ef6e:	9300      	str	r3, [sp, #0]
  if (ip4_addr_isany_val(gw_addr)) {
 800ef70:	b92b      	cbnz	r3, 800ef7e <dhcp_bind+0xba>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800ef72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ef74:	9a01      	ldr	r2, [sp, #4]
 800ef76:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800ef78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ef7c:	9300      	str	r3, [sp, #0]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800ef7e:	210a      	movs	r1, #10
 800ef80:	4620      	mov	r0, r4
 800ef82:	f7ff fb7d 	bl	800e680 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800ef86:	466b      	mov	r3, sp
 800ef88:	aa01      	add	r2, sp, #4
 800ef8a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800ef8e:	4628      	mov	r0, r5
 800ef90:	f7f8 fcda 	bl	8007948 <netif_set_addr>
}
 800ef94:	b003      	add	sp, #12
 800ef96:	bd30      	pop	{r4, r5, pc}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800ef98:	4b12      	ldr	r3, [pc, #72]	; (800efe4 <dhcp_bind+0x120>)
 800ef9a:	f240 4215 	movw	r2, #1045	; 0x415
 800ef9e:	4912      	ldr	r1, [pc, #72]	; (800efe8 <dhcp_bind+0x124>)
 800efa0:	4812      	ldr	r0, [pc, #72]	; (800efec <dhcp_bind+0x128>)
 800efa2:	f006 fcf5 	bl	8015990 <iprintf>
 800efa6:	e7f5      	b.n	800ef94 <dhcp_bind+0xd0>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800efa8:	4b0e      	ldr	r3, [pc, #56]	; (800efe4 <dhcp_bind+0x120>)
 800efaa:	f240 4217 	movw	r2, #1047	; 0x417
 800efae:	4910      	ldr	r1, [pc, #64]	; (800eff0 <dhcp_bind+0x12c>)
 800efb0:	480e      	ldr	r0, [pc, #56]	; (800efec <dhcp_bind+0x128>)
 800efb2:	f006 fced 	bl	8015990 <iprintf>
 800efb6:	e7ed      	b.n	800ef94 <dhcp_bind+0xd0>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800efb8:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    if (first_octet <= 127) {
 800efbc:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	db02      	blt.n	800efca <dhcp_bind+0x106>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800efc4:	23ff      	movs	r3, #255	; 0xff
 800efc6:	9301      	str	r3, [sp, #4]
 800efc8:	e7d0      	b.n	800ef6c <dhcp_bind+0xa8>
    } else if (first_octet >= 192) {
 800efca:	2abf      	cmp	r2, #191	; 0xbf
 800efcc:	d903      	bls.n	800efd6 <dhcp_bind+0x112>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800efce:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800efd2:	9301      	str	r3, [sp, #4]
 800efd4:	e7ca      	b.n	800ef6c <dhcp_bind+0xa8>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800efd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800efda:	9301      	str	r3, [sp, #4]
 800efdc:	e7c6      	b.n	800ef6c <dhcp_bind+0xa8>
 800efde:	bf00      	nop
 800efe0:	88888889 	.word	0x88888889
 800efe4:	08019d48 	.word	0x08019d48
 800efe8:	08019f2c 	.word	0x08019f2c
 800efec:	08016bb4 	.word	0x08016bb4
 800eff0:	08019f48 	.word	0x08019f48

0800eff4 <dhcp_handle_nak>:
{
 800eff4:	b510      	push	{r4, lr}
 800eff6:	4604      	mov	r4, r0
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800eff8:	210c      	movs	r1, #12
 800effa:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 800effe:	f7ff fb3f 	bl	800e680 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f002:	4905      	ldr	r1, [pc, #20]	; (800f018 <dhcp_handle_nak+0x24>)
 800f004:	460b      	mov	r3, r1
 800f006:	460a      	mov	r2, r1
 800f008:	4620      	mov	r0, r4
 800f00a:	f7f8 fc9d 	bl	8007948 <netif_set_addr>
  dhcp_discover(netif);
 800f00e:	4620      	mov	r0, r4
 800f010:	f7ff fe76 	bl	800ed00 <dhcp_discover>
}
 800f014:	bd10      	pop	{r4, pc}
 800f016:	bf00      	nop
 800f018:	0801a4d4 	.word	0x0801a4d4

0800f01c <dhcp_dec_pcb_refcount>:
{
 800f01c:	b510      	push	{r4, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800f01e:	4b0c      	ldr	r3, [pc, #48]	; (800f050 <dhcp_dec_pcb_refcount+0x34>)
 800f020:	781b      	ldrb	r3, [r3, #0]
 800f022:	b133      	cbz	r3, 800f032 <dhcp_dec_pcb_refcount+0x16>
  dhcp_pcb_refcount--;
 800f024:	4a0a      	ldr	r2, [pc, #40]	; (800f050 <dhcp_dec_pcb_refcount+0x34>)
 800f026:	7813      	ldrb	r3, [r2, #0]
 800f028:	3b01      	subs	r3, #1
 800f02a:	b2db      	uxtb	r3, r3
 800f02c:	7013      	strb	r3, [r2, #0]
  if (dhcp_pcb_refcount == 0) {
 800f02e:	b13b      	cbz	r3, 800f040 <dhcp_dec_pcb_refcount+0x24>
}
 800f030:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800f032:	4b08      	ldr	r3, [pc, #32]	; (800f054 <dhcp_dec_pcb_refcount+0x38>)
 800f034:	22ff      	movs	r2, #255	; 0xff
 800f036:	4908      	ldr	r1, [pc, #32]	; (800f058 <dhcp_dec_pcb_refcount+0x3c>)
 800f038:	4808      	ldr	r0, [pc, #32]	; (800f05c <dhcp_dec_pcb_refcount+0x40>)
 800f03a:	f006 fca9 	bl	8015990 <iprintf>
 800f03e:	e7f1      	b.n	800f024 <dhcp_dec_pcb_refcount+0x8>
    udp_remove(dhcp_pcb);
 800f040:	4c07      	ldr	r4, [pc, #28]	; (800f060 <dhcp_dec_pcb_refcount+0x44>)
 800f042:	6820      	ldr	r0, [r4, #0]
 800f044:	f7ff fa42 	bl	800e4cc <udp_remove>
    dhcp_pcb = NULL;
 800f048:	2300      	movs	r3, #0
 800f04a:	6023      	str	r3, [r4, #0]
}
 800f04c:	e7f0      	b.n	800f030 <dhcp_dec_pcb_refcount+0x14>
 800f04e:	bf00      	nop
 800f050:	20000ad4 	.word	0x20000ad4
 800f054:	08019d48 	.word	0x08019d48
 800f058:	08019f60 	.word	0x08019f60
 800f05c:	08016bb4 	.word	0x08016bb4
 800f060:	20000ad0 	.word	0x20000ad0

0800f064 <dhcp_inc_pcb_refcount>:
{
 800f064:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 800f066:	4b18      	ldr	r3, [pc, #96]	; (800f0c8 <dhcp_inc_pcb_refcount+0x64>)
 800f068:	781b      	ldrb	r3, [r3, #0]
 800f06a:	bb1b      	cbnz	r3, 800f0b4 <dhcp_inc_pcb_refcount+0x50>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800f06c:	4b17      	ldr	r3, [pc, #92]	; (800f0cc <dhcp_inc_pcb_refcount+0x68>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	b12b      	cbz	r3, 800f07e <dhcp_inc_pcb_refcount+0x1a>
 800f072:	4b17      	ldr	r3, [pc, #92]	; (800f0d0 <dhcp_inc_pcb_refcount+0x6c>)
 800f074:	22e5      	movs	r2, #229	; 0xe5
 800f076:	4917      	ldr	r1, [pc, #92]	; (800f0d4 <dhcp_inc_pcb_refcount+0x70>)
 800f078:	4817      	ldr	r0, [pc, #92]	; (800f0d8 <dhcp_inc_pcb_refcount+0x74>)
 800f07a:	f006 fc89 	bl	8015990 <iprintf>
    dhcp_pcb = udp_new();
 800f07e:	f7ff fa4f 	bl	800e520 <udp_new>
 800f082:	4b12      	ldr	r3, [pc, #72]	; (800f0cc <dhcp_inc_pcb_refcount+0x68>)
 800f084:	6018      	str	r0, [r3, #0]
    if (dhcp_pcb == NULL) {
 800f086:	b1d8      	cbz	r0, 800f0c0 <dhcp_inc_pcb_refcount+0x5c>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800f088:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800f08c:	f043 0320 	orr.w	r3, r3, #32
 800f090:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800f094:	4d11      	ldr	r5, [pc, #68]	; (800f0dc <dhcp_inc_pcb_refcount+0x78>)
 800f096:	2244      	movs	r2, #68	; 0x44
 800f098:	4629      	mov	r1, r5
 800f09a:	f7fe fdb7 	bl	800dc0c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800f09e:	4c0b      	ldr	r4, [pc, #44]	; (800f0cc <dhcp_inc_pcb_refcount+0x68>)
 800f0a0:	2243      	movs	r2, #67	; 0x43
 800f0a2:	4629      	mov	r1, r5
 800f0a4:	6820      	ldr	r0, [r4, #0]
 800f0a6:	f7ff f947 	bl	800e338 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	490c      	ldr	r1, [pc, #48]	; (800f0e0 <dhcp_inc_pcb_refcount+0x7c>)
 800f0ae:	6820      	ldr	r0, [r4, #0]
 800f0b0:	f7ff f9f8 	bl	800e4a4 <udp_recv>
  dhcp_pcb_refcount++;
 800f0b4:	4a04      	ldr	r2, [pc, #16]	; (800f0c8 <dhcp_inc_pcb_refcount+0x64>)
 800f0b6:	7813      	ldrb	r3, [r2, #0]
 800f0b8:	3301      	adds	r3, #1
 800f0ba:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 800f0bc:	2000      	movs	r0, #0
}
 800f0be:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 800f0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c4:	e7fb      	b.n	800f0be <dhcp_inc_pcb_refcount+0x5a>
 800f0c6:	bf00      	nop
 800f0c8:	20000ad4 	.word	0x20000ad4
 800f0cc:	20000ad0 	.word	0x20000ad0
 800f0d0:	08019d48 	.word	0x08019d48
 800f0d4:	08019f84 	.word	0x08019f84
 800f0d8:	08016bb4 	.word	0x08016bb4
 800f0dc:	0801a4d4 	.word	0x0801a4d4
 800f0e0:	0800f671 	.word	0x0800f671

0800f0e4 <dhcp_parse_reply>:
{
 800f0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0e8:	b087      	sub	sp, #28
 800f0ea:	9002      	str	r0, [sp, #8]
  dhcp_clear_all_options(dhcp);
 800f0ec:	4b6d      	ldr	r3, [pc, #436]	; (800f2a4 <dhcp_parse_reply+0x1c0>)
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	601a      	str	r2, [r3, #0]
 800f0f2:	605a      	str	r2, [r3, #4]
 800f0f4:	811a      	strh	r2, [r3, #8]
  if (p->len < DHCP_SNAME_OFS) {
 800f0f6:	8943      	ldrh	r3, [r0, #10]
 800f0f8:	2b2b      	cmp	r3, #43	; 0x2b
 800f0fa:	f240 823a 	bls.w	800f572 <dhcp_parse_reply+0x48e>
  options_idx_max = p->tot_len;
 800f0fe:	8904      	ldrh	r4, [r0, #8]
  int parse_sname_as_options = 0;
 800f100:	2300      	movs	r3, #0
 800f102:	9303      	str	r3, [sp, #12]
  options_idx = DHCP_OPTIONS_OFS;
 800f104:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
  q = p;
 800f108:	9e02      	ldr	r6, [sp, #8]
  while ((q != NULL) && (options_idx >= q->len)) {
 800f10a:	b156      	cbz	r6, 800f122 <dhcp_parse_reply+0x3e>
 800f10c:	8973      	ldrh	r3, [r6, #10]
 800f10e:	455b      	cmp	r3, fp
 800f110:	d807      	bhi.n	800f122 <dhcp_parse_reply+0x3e>
    options_idx = (u16_t)(options_idx - q->len);
 800f112:	ebab 0b03 	sub.w	fp, fp, r3
 800f116:	fa1f fb8b 	uxth.w	fp, fp
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800f11a:	1ae4      	subs	r4, r4, r3
 800f11c:	b2a4      	uxth	r4, r4
    q = q->next;
 800f11e:	6836      	ldr	r6, [r6, #0]
 800f120:	e7f3      	b.n	800f10a <dhcp_parse_reply+0x26>
  if (q == NULL) {
 800f122:	2e00      	cmp	r6, #0
 800f124:	f000 8228 	beq.w	800f578 <dhcp_parse_reply+0x494>
  options = (u8_t *)q->payload;
 800f128:	6873      	ldr	r3, [r6, #4]
 800f12a:	9301      	str	r3, [sp, #4]
  offset = options_idx;
 800f12c:	465d      	mov	r5, fp
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800f12e:	e0e1      	b.n	800f2f4 <dhcp_parse_reply+0x210>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800f130:	6833      	ldr	r3, [r6, #0]
 800f132:	b113      	cbz	r3, 800f13a <dhcp_parse_reply+0x56>
 800f134:	685b      	ldr	r3, [r3, #4]
 800f136:	781b      	ldrb	r3, [r3, #0]
 800f138:	e0f8      	b.n	800f32c <dhcp_parse_reply+0x248>
 800f13a:	2300      	movs	r3, #0
 800f13c:	e0f6      	b.n	800f32c <dhcp_parse_reply+0x248>
        decode_len = 0;
 800f13e:	4617      	mov	r7, r2
 800f140:	4613      	mov	r3, r2
 800f142:	f04f 39ff 	mov.w	r9, #4294967295
 800f146:	e0c0      	b.n	800f2ca <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f148:	2b04      	cmp	r3, #4
 800f14a:	d103      	bne.n	800f154 <dhcp_parse_reply+0x70>
    decode_len = len;
 800f14c:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800f14e:	f04f 0906 	mov.w	r9, #6
 800f152:	e0ba      	b.n	800f2ca <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f154:	4b54      	ldr	r3, [pc, #336]	; (800f2a8 <dhcp_parse_reply+0x1c4>)
 800f156:	f240 622e 	movw	r2, #1582	; 0x62e
 800f15a:	4954      	ldr	r1, [pc, #336]	; (800f2ac <dhcp_parse_reply+0x1c8>)
 800f15c:	4854      	ldr	r0, [pc, #336]	; (800f2b0 <dhcp_parse_reply+0x1cc>)
 800f15e:	f006 fc17 	bl	8015990 <iprintf>
 800f162:	f06f 0005 	mvn.w	r0, #5
 800f166:	e1d3      	b.n	800f510 <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800f168:	2b03      	cmp	r3, #3
 800f16a:	d903      	bls.n	800f174 <dhcp_parse_reply+0x90>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800f16c:	f04f 0907 	mov.w	r9, #7
        decode_len = 4; /* only copy the first given router */
 800f170:	2704      	movs	r7, #4
 800f172:	e0aa      	b.n	800f2ca <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800f174:	4b4c      	ldr	r3, [pc, #304]	; (800f2a8 <dhcp_parse_reply+0x1c4>)
 800f176:	f240 6233 	movw	r2, #1587	; 0x633
 800f17a:	494e      	ldr	r1, [pc, #312]	; (800f2b4 <dhcp_parse_reply+0x1d0>)
 800f17c:	484c      	ldr	r0, [pc, #304]	; (800f2b0 <dhcp_parse_reply+0x1cc>)
 800f17e:	f006 fc07 	bl	8015990 <iprintf>
 800f182:	f06f 0005 	mvn.w	r0, #5
 800f186:	e1c3      	b.n	800f510 <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 800f188:	f013 0f03 	tst.w	r3, #3
 800f18c:	d109      	bne.n	800f1a2 <dhcp_parse_reply+0xbe>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 800f18e:	461f      	mov	r7, r3
 800f190:	2b08      	cmp	r3, #8
 800f192:	bf28      	it	cs
 800f194:	2708      	movcs	r7, #8
 800f196:	b2ff      	uxtb	r7, r7
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800f198:	42bb      	cmp	r3, r7
 800f19a:	d30c      	bcc.n	800f1b6 <dhcp_parse_reply+0xd2>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 800f19c:	f04f 0908 	mov.w	r9, #8
 800f1a0:	e093      	b.n	800f2ca <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 800f1a2:	4b41      	ldr	r3, [pc, #260]	; (800f2a8 <dhcp_parse_reply+0x1c4>)
 800f1a4:	f240 6239 	movw	r2, #1593	; 0x639
 800f1a8:	4943      	ldr	r1, [pc, #268]	; (800f2b8 <dhcp_parse_reply+0x1d4>)
 800f1aa:	4841      	ldr	r0, [pc, #260]	; (800f2b0 <dhcp_parse_reply+0x1cc>)
 800f1ac:	f006 fbf0 	bl	8015990 <iprintf>
 800f1b0:	f06f 0005 	mvn.w	r0, #5
 800f1b4:	e1ac      	b.n	800f510 <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800f1b6:	4b3c      	ldr	r3, [pc, #240]	; (800f2a8 <dhcp_parse_reply+0x1c4>)
 800f1b8:	f240 623c 	movw	r2, #1596	; 0x63c
 800f1bc:	493d      	ldr	r1, [pc, #244]	; (800f2b4 <dhcp_parse_reply+0x1d0>)
 800f1be:	483c      	ldr	r0, [pc, #240]	; (800f2b0 <dhcp_parse_reply+0x1cc>)
 800f1c0:	f006 fbe6 	bl	8015990 <iprintf>
 800f1c4:	f06f 0005 	mvn.w	r0, #5
 800f1c8:	e1a2      	b.n	800f510 <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f1ca:	2b04      	cmp	r3, #4
 800f1cc:	d103      	bne.n	800f1d6 <dhcp_parse_reply+0xf2>
    decode_len = len;
 800f1ce:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800f1d0:	f04f 0903 	mov.w	r9, #3
 800f1d4:	e079      	b.n	800f2ca <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f1d6:	4b34      	ldr	r3, [pc, #208]	; (800f2a8 <dhcp_parse_reply+0x1c4>)
 800f1d8:	f240 6241 	movw	r2, #1601	; 0x641
 800f1dc:	4933      	ldr	r1, [pc, #204]	; (800f2ac <dhcp_parse_reply+0x1c8>)
 800f1de:	4834      	ldr	r0, [pc, #208]	; (800f2b0 <dhcp_parse_reply+0x1cc>)
 800f1e0:	f006 fbd6 	bl	8015990 <iprintf>
 800f1e4:	f06f 0005 	mvn.w	r0, #5
 800f1e8:	e192      	b.n	800f510 <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f1ea:	2b01      	cmp	r3, #1
 800f1ec:	d106      	bne.n	800f1fc <dhcp_parse_reply+0x118>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800f1ee:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
 800f1f2:	d10d      	bne.n	800f210 <dhcp_parse_reply+0x12c>
    decode_len = len;
 800f1f4:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800f1f6:	f04f 0900 	mov.w	r9, #0
 800f1fa:	e066      	b.n	800f2ca <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f1fc:	4b2a      	ldr	r3, [pc, #168]	; (800f2a8 <dhcp_parse_reply+0x1c4>)
 800f1fe:	f240 624f 	movw	r2, #1615	; 0x64f
 800f202:	492e      	ldr	r1, [pc, #184]	; (800f2bc <dhcp_parse_reply+0x1d8>)
 800f204:	482a      	ldr	r0, [pc, #168]	; (800f2b0 <dhcp_parse_reply+0x1cc>)
 800f206:	f006 fbc3 	bl	8015990 <iprintf>
 800f20a:	f06f 0005 	mvn.w	r0, #5
 800f20e:	e17f      	b.n	800f510 <dhcp_parse_reply+0x42c>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800f210:	4b25      	ldr	r3, [pc, #148]	; (800f2a8 <dhcp_parse_reply+0x1c4>)
 800f212:	f240 6251 	movw	r2, #1617	; 0x651
 800f216:	492a      	ldr	r1, [pc, #168]	; (800f2c0 <dhcp_parse_reply+0x1dc>)
 800f218:	4825      	ldr	r0, [pc, #148]	; (800f2b0 <dhcp_parse_reply+0x1cc>)
 800f21a:	f006 fbb9 	bl	8015990 <iprintf>
 800f21e:	f06f 0005 	mvn.w	r0, #5
 800f222:	e175      	b.n	800f510 <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f224:	2b01      	cmp	r3, #1
 800f226:	d103      	bne.n	800f230 <dhcp_parse_reply+0x14c>
    decode_len = len;
 800f228:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800f22a:	f04f 0901 	mov.w	r9, #1
 800f22e:	e04c      	b.n	800f2ca <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f230:	4b1d      	ldr	r3, [pc, #116]	; (800f2a8 <dhcp_parse_reply+0x1c4>)
 800f232:	f240 6255 	movw	r2, #1621	; 0x655
 800f236:	4921      	ldr	r1, [pc, #132]	; (800f2bc <dhcp_parse_reply+0x1d8>)
 800f238:	481d      	ldr	r0, [pc, #116]	; (800f2b0 <dhcp_parse_reply+0x1cc>)
 800f23a:	f006 fba9 	bl	8015990 <iprintf>
 800f23e:	f06f 0005 	mvn.w	r0, #5
 800f242:	e165      	b.n	800f510 <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f244:	2b04      	cmp	r3, #4
 800f246:	d103      	bne.n	800f250 <dhcp_parse_reply+0x16c>
    decode_len = len;
 800f248:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800f24a:	f04f 0902 	mov.w	r9, #2
 800f24e:	e03c      	b.n	800f2ca <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f250:	4b15      	ldr	r3, [pc, #84]	; (800f2a8 <dhcp_parse_reply+0x1c4>)
 800f252:	f240 6259 	movw	r2, #1625	; 0x659
 800f256:	4915      	ldr	r1, [pc, #84]	; (800f2ac <dhcp_parse_reply+0x1c8>)
 800f258:	4815      	ldr	r0, [pc, #84]	; (800f2b0 <dhcp_parse_reply+0x1cc>)
 800f25a:	f006 fb99 	bl	8015990 <iprintf>
 800f25e:	f06f 0005 	mvn.w	r0, #5
 800f262:	e155      	b.n	800f510 <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f264:	2b04      	cmp	r3, #4
 800f266:	d103      	bne.n	800f270 <dhcp_parse_reply+0x18c>
    decode_len = len;
 800f268:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 800f26a:	f04f 0904 	mov.w	r9, #4
 800f26e:	e02c      	b.n	800f2ca <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f270:	4b0d      	ldr	r3, [pc, #52]	; (800f2a8 <dhcp_parse_reply+0x1c4>)
 800f272:	f240 625d 	movw	r2, #1629	; 0x65d
 800f276:	490d      	ldr	r1, [pc, #52]	; (800f2ac <dhcp_parse_reply+0x1c8>)
 800f278:	480d      	ldr	r0, [pc, #52]	; (800f2b0 <dhcp_parse_reply+0x1cc>)
 800f27a:	f006 fb89 	bl	8015990 <iprintf>
 800f27e:	f06f 0005 	mvn.w	r0, #5
 800f282:	e145      	b.n	800f510 <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f284:	2b04      	cmp	r3, #4
 800f286:	d103      	bne.n	800f290 <dhcp_parse_reply+0x1ac>
    decode_len = len;
 800f288:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 800f28a:	f04f 0905 	mov.w	r9, #5
 800f28e:	e01c      	b.n	800f2ca <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f290:	4b05      	ldr	r3, [pc, #20]	; (800f2a8 <dhcp_parse_reply+0x1c4>)
 800f292:	f240 6261 	movw	r2, #1633	; 0x661
 800f296:	4905      	ldr	r1, [pc, #20]	; (800f2ac <dhcp_parse_reply+0x1c8>)
 800f298:	4805      	ldr	r0, [pc, #20]	; (800f2b0 <dhcp_parse_reply+0x1cc>)
 800f29a:	f006 fb79 	bl	8015990 <iprintf>
 800f29e:	f06f 0005 	mvn.w	r0, #5
 800f2a2:	e135      	b.n	800f510 <dhcp_parse_reply+0x42c>
 800f2a4:	20007fc8 	.word	0x20007fc8
 800f2a8:	08019d48 	.word	0x08019d48
 800f2ac:	08019fac 	.word	0x08019fac
 800f2b0:	08016bb4 	.word	0x08016bb4
 800f2b4:	08019fb8 	.word	0x08019fb8
 800f2b8:	08019fcc 	.word	0x08019fcc
 800f2bc:	08019fdc 	.word	0x08019fdc
 800f2c0:	08019fe8 	.word	0x08019fe8
    int decode_idx = -1;
 800f2c4:	f04f 39ff 	mov.w	r9, #4294967295
        decode_len = 0;
 800f2c8:	2700      	movs	r7, #0
    if (op == DHCP_OPTION_PAD) {
 800f2ca:	2a00      	cmp	r2, #0
 800f2cc:	f040 80ac 	bne.w	800f428 <dhcp_parse_reply+0x344>
      offset++;
 800f2d0:	3501      	adds	r5, #1
 800f2d2:	b2ad      	uxth	r5, r5
    if (offset >= q->len) {
 800f2d4:	8973      	ldrh	r3, [r6, #10]
 800f2d6:	429d      	cmp	r5, r3
 800f2d8:	d30c      	bcc.n	800f2f4 <dhcp_parse_reply+0x210>
      offset = (u16_t)(offset - q->len);
 800f2da:	1aed      	subs	r5, r5, r3
 800f2dc:	b2ad      	uxth	r5, r5
      offset_max = (u16_t)(offset_max - q->len);
 800f2de:	1ae4      	subs	r4, r4, r3
 800f2e0:	b2a4      	uxth	r4, r4
      if (offset < offset_max) {
 800f2e2:	42a5      	cmp	r5, r4
 800f2e4:	f080 8151 	bcs.w	800f58a <dhcp_parse_reply+0x4a6>
        q = q->next;
 800f2e8:	6836      	ldr	r6, [r6, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800f2ea:	2e00      	cmp	r6, #0
 800f2ec:	f000 8116 	beq.w	800f51c <dhcp_parse_reply+0x438>
        options = (u8_t *)q->payload;
 800f2f0:	6873      	ldr	r3, [r6, #4]
 800f2f2:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800f2f4:	2e00      	cmp	r6, #0
 800f2f6:	f000 811b 	beq.w	800f530 <dhcp_parse_reply+0x44c>
 800f2fa:	42a5      	cmp	r5, r4
 800f2fc:	f080 8118 	bcs.w	800f530 <dhcp_parse_reply+0x44c>
 800f300:	4629      	mov	r1, r5
 800f302:	9b01      	ldr	r3, [sp, #4]
 800f304:	5d5a      	ldrb	r2, [r3, r5]
 800f306:	2aff      	cmp	r2, #255	; 0xff
 800f308:	f000 8112 	beq.w	800f530 <dhcp_parse_reply+0x44c>
    u16_t val_offset = (u16_t)(offset + 2);
 800f30c:	f105 0802 	add.w	r8, r5, #2
 800f310:	fa1f f888 	uxth.w	r8, r8
    if (val_offset < offset) {
 800f314:	4545      	cmp	r5, r8
 800f316:	f200 8132 	bhi.w	800f57e <dhcp_parse_reply+0x49a>
    if ((offset + 1) < q->len) {
 800f31a:	4628      	mov	r0, r5
 800f31c:	1c6b      	adds	r3, r5, #1
 800f31e:	8977      	ldrh	r7, [r6, #10]
 800f320:	42bb      	cmp	r3, r7
 800f322:	f6bf af05 	bge.w	800f130 <dhcp_parse_reply+0x4c>
      len = options[offset + 1];
 800f326:	3101      	adds	r1, #1
 800f328:	9b01      	ldr	r3, [sp, #4]
 800f32a:	5c5b      	ldrb	r3, [r3, r1]
    switch (op) {
 800f32c:	2a3b      	cmp	r2, #59	; 0x3b
 800f32e:	d8c9      	bhi.n	800f2c4 <dhcp_parse_reply+0x1e0>
 800f330:	a101      	add	r1, pc, #4	; (adr r1, 800f338 <dhcp_parse_reply+0x254>)
 800f332:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f336:	bf00      	nop
 800f338:	0800f13f 	.word	0x0800f13f
 800f33c:	0800f149 	.word	0x0800f149
 800f340:	0800f2c5 	.word	0x0800f2c5
 800f344:	0800f169 	.word	0x0800f169
 800f348:	0800f2c5 	.word	0x0800f2c5
 800f34c:	0800f2c5 	.word	0x0800f2c5
 800f350:	0800f189 	.word	0x0800f189
 800f354:	0800f2c5 	.word	0x0800f2c5
 800f358:	0800f2c5 	.word	0x0800f2c5
 800f35c:	0800f2c5 	.word	0x0800f2c5
 800f360:	0800f2c5 	.word	0x0800f2c5
 800f364:	0800f2c5 	.word	0x0800f2c5
 800f368:	0800f2c5 	.word	0x0800f2c5
 800f36c:	0800f2c5 	.word	0x0800f2c5
 800f370:	0800f2c5 	.word	0x0800f2c5
 800f374:	0800f2c5 	.word	0x0800f2c5
 800f378:	0800f2c5 	.word	0x0800f2c5
 800f37c:	0800f2c5 	.word	0x0800f2c5
 800f380:	0800f2c5 	.word	0x0800f2c5
 800f384:	0800f2c5 	.word	0x0800f2c5
 800f388:	0800f2c5 	.word	0x0800f2c5
 800f38c:	0800f2c5 	.word	0x0800f2c5
 800f390:	0800f2c5 	.word	0x0800f2c5
 800f394:	0800f2c5 	.word	0x0800f2c5
 800f398:	0800f2c5 	.word	0x0800f2c5
 800f39c:	0800f2c5 	.word	0x0800f2c5
 800f3a0:	0800f2c5 	.word	0x0800f2c5
 800f3a4:	0800f2c5 	.word	0x0800f2c5
 800f3a8:	0800f2c5 	.word	0x0800f2c5
 800f3ac:	0800f2c5 	.word	0x0800f2c5
 800f3b0:	0800f2c5 	.word	0x0800f2c5
 800f3b4:	0800f2c5 	.word	0x0800f2c5
 800f3b8:	0800f2c5 	.word	0x0800f2c5
 800f3bc:	0800f2c5 	.word	0x0800f2c5
 800f3c0:	0800f2c5 	.word	0x0800f2c5
 800f3c4:	0800f2c5 	.word	0x0800f2c5
 800f3c8:	0800f2c5 	.word	0x0800f2c5
 800f3cc:	0800f2c5 	.word	0x0800f2c5
 800f3d0:	0800f2c5 	.word	0x0800f2c5
 800f3d4:	0800f2c5 	.word	0x0800f2c5
 800f3d8:	0800f2c5 	.word	0x0800f2c5
 800f3dc:	0800f2c5 	.word	0x0800f2c5
 800f3e0:	0800f2c5 	.word	0x0800f2c5
 800f3e4:	0800f2c5 	.word	0x0800f2c5
 800f3e8:	0800f2c5 	.word	0x0800f2c5
 800f3ec:	0800f2c5 	.word	0x0800f2c5
 800f3f0:	0800f2c5 	.word	0x0800f2c5
 800f3f4:	0800f2c5 	.word	0x0800f2c5
 800f3f8:	0800f2c5 	.word	0x0800f2c5
 800f3fc:	0800f2c5 	.word	0x0800f2c5
 800f400:	0800f2c5 	.word	0x0800f2c5
 800f404:	0800f1cb 	.word	0x0800f1cb
 800f408:	0800f1eb 	.word	0x0800f1eb
 800f40c:	0800f225 	.word	0x0800f225
 800f410:	0800f245 	.word	0x0800f245
 800f414:	0800f2c5 	.word	0x0800f2c5
 800f418:	0800f2c5 	.word	0x0800f2c5
 800f41c:	0800f2c5 	.word	0x0800f2c5
 800f420:	0800f265 	.word	0x0800f265
 800f424:	0800f285 	.word	0x0800f285
      if (offset + len + 2 > 0xFFFF) {
 800f428:	4418      	add	r0, r3
 800f42a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800f42e:	4290      	cmp	r0, r2
 800f430:	f300 80a8 	bgt.w	800f584 <dhcp_parse_reply+0x4a0>
      offset = (u16_t)(offset + len + 2);
 800f434:	441d      	add	r5, r3
 800f436:	b2ad      	uxth	r5, r5
 800f438:	3502      	adds	r5, #2
 800f43a:	b2ad      	uxth	r5, r5
      if (decode_len > 0) {
 800f43c:	2f00      	cmp	r7, #0
 800f43e:	f43f af49 	beq.w	800f2d4 <dhcp_parse_reply+0x1f0>
        u32_t value = 0;
 800f442:	2300      	movs	r3, #0
 800f444:	9305      	str	r3, [sp, #20]
 800f446:	e034      	b.n	800f4b2 <dhcp_parse_reply+0x3ce>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800f448:	4b51      	ldr	r3, [pc, #324]	; (800f590 <dhcp_parse_reply+0x4ac>)
 800f44a:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800f44e:	4951      	ldr	r1, [pc, #324]	; (800f594 <dhcp_parse_reply+0x4b0>)
 800f450:	4851      	ldr	r0, [pc, #324]	; (800f598 <dhcp_parse_reply+0x4b4>)
 800f452:	f006 fa9d 	bl	8015990 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800f456:	4b51      	ldr	r3, [pc, #324]	; (800f59c <dhcp_parse_reply+0x4b8>)
 800f458:	f813 3009 	ldrb.w	r3, [r3, r9]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	f47f af39 	bne.w	800f2d4 <dhcp_parse_reply+0x1f0>
          copy_len = LWIP_MIN(decode_len, 4);
 800f462:	46ba      	mov	sl, r7
 800f464:	2f04      	cmp	r7, #4
 800f466:	bf28      	it	cs
 800f468:	f04f 0a04 	movcs.w	sl, #4
 800f46c:	fa5f fa8a 	uxtb.w	sl, sl
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800f470:	4643      	mov	r3, r8
 800f472:	4652      	mov	r2, sl
 800f474:	a905      	add	r1, sp, #20
 800f476:	4630      	mov	r0, r6
 800f478:	f7f9 f890 	bl	800859c <pbuf_copy_partial>
 800f47c:	4550      	cmp	r0, sl
 800f47e:	d145      	bne.n	800f50c <dhcp_parse_reply+0x428>
          if (decode_len > 4) {
 800f480:	2f04      	cmp	r7, #4
 800f482:	d924      	bls.n	800f4ce <dhcp_parse_reply+0x3ea>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800f484:	f017 0f03 	tst.w	r7, #3
 800f488:	d117      	bne.n	800f4ba <dhcp_parse_reply+0x3d6>
            dhcp_got_option(dhcp, decode_idx);
 800f48a:	4b44      	ldr	r3, [pc, #272]	; (800f59c <dhcp_parse_reply+0x4b8>)
 800f48c:	2201      	movs	r2, #1
 800f48e:	f803 2009 	strb.w	r2, [r3, r9]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800f492:	9805      	ldr	r0, [sp, #20]
 800f494:	f7f7 faf7 	bl	8006a86 <lwip_htonl>
 800f498:	4b41      	ldr	r3, [pc, #260]	; (800f5a0 <dhcp_parse_reply+0x4bc>)
 800f49a:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800f49e:	3f04      	subs	r7, #4
 800f4a0:	b2ff      	uxtb	r7, r7
            next_val_offset = (u16_t)(val_offset + 4);
 800f4a2:	f108 0304 	add.w	r3, r8, #4
 800f4a6:	b29b      	uxth	r3, r3
            if (next_val_offset < val_offset) {
 800f4a8:	4598      	cmp	r8, r3
 800f4aa:	d834      	bhi.n	800f516 <dhcp_parse_reply+0x432>
            decode_idx++;
 800f4ac:	f109 0901 	add.w	r9, r9, #1
            val_offset = next_val_offset;
 800f4b0:	4698      	mov	r8, r3
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800f4b2:	f1b9 0f09 	cmp.w	r9, #9
 800f4b6:	d9ce      	bls.n	800f456 <dhcp_parse_reply+0x372>
 800f4b8:	e7c6      	b.n	800f448 <dhcp_parse_reply+0x364>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800f4ba:	4b35      	ldr	r3, [pc, #212]	; (800f590 <dhcp_parse_reply+0x4ac>)
 800f4bc:	f240 6281 	movw	r2, #1665	; 0x681
 800f4c0:	4938      	ldr	r1, [pc, #224]	; (800f5a4 <dhcp_parse_reply+0x4c0>)
 800f4c2:	4835      	ldr	r0, [pc, #212]	; (800f598 <dhcp_parse_reply+0x4b4>)
 800f4c4:	f006 fa64 	bl	8015990 <iprintf>
 800f4c8:	f06f 0005 	mvn.w	r0, #5
 800f4cc:	e020      	b.n	800f510 <dhcp_parse_reply+0x42c>
          } else if (decode_len == 4) {
 800f4ce:	2f04      	cmp	r7, #4
 800f4d0:	d00d      	beq.n	800f4ee <dhcp_parse_reply+0x40a>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800f4d2:	2f01      	cmp	r7, #1
 800f4d4:	d110      	bne.n	800f4f8 <dhcp_parse_reply+0x414>
            value = ((u8_t *)&value)[0];
 800f4d6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800f4da:	9305      	str	r3, [sp, #20]
          dhcp_got_option(dhcp, decode_idx);
 800f4dc:	4b2f      	ldr	r3, [pc, #188]	; (800f59c <dhcp_parse_reply+0x4b8>)
 800f4de:	2201      	movs	r2, #1
 800f4e0:	f803 2009 	strb.w	r2, [r3, r9]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800f4e4:	4b2e      	ldr	r3, [pc, #184]	; (800f5a0 <dhcp_parse_reply+0x4bc>)
 800f4e6:	9a05      	ldr	r2, [sp, #20]
 800f4e8:	f843 2029 	str.w	r2, [r3, r9, lsl #2]
 800f4ec:	e6f2      	b.n	800f2d4 <dhcp_parse_reply+0x1f0>
            value = lwip_ntohl(value);
 800f4ee:	9805      	ldr	r0, [sp, #20]
 800f4f0:	f7f7 fac9 	bl	8006a86 <lwip_htonl>
 800f4f4:	9005      	str	r0, [sp, #20]
 800f4f6:	e7f1      	b.n	800f4dc <dhcp_parse_reply+0x3f8>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800f4f8:	4b25      	ldr	r3, [pc, #148]	; (800f590 <dhcp_parse_reply+0x4ac>)
 800f4fa:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800f4fe:	492a      	ldr	r1, [pc, #168]	; (800f5a8 <dhcp_parse_reply+0x4c4>)
 800f500:	4825      	ldr	r0, [pc, #148]	; (800f598 <dhcp_parse_reply+0x4b4>)
 800f502:	f006 fa45 	bl	8015990 <iprintf>
 800f506:	f06f 0005 	mvn.w	r0, #5
 800f50a:	e001      	b.n	800f510 <dhcp_parse_reply+0x42c>
            return ERR_BUF;
 800f50c:	f06f 0001 	mvn.w	r0, #1
}
 800f510:	b007      	add	sp, #28
 800f512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              return ERR_BUF;
 800f516:	f06f 0001 	mvn.w	r0, #1
 800f51a:	e7f9      	b.n	800f510 <dhcp_parse_reply+0x42c>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800f51c:	4b1c      	ldr	r3, [pc, #112]	; (800f590 <dhcp_parse_reply+0x4ac>)
 800f51e:	f240 629d 	movw	r2, #1693	; 0x69d
 800f522:	4922      	ldr	r1, [pc, #136]	; (800f5ac <dhcp_parse_reply+0x4c8>)
 800f524:	481c      	ldr	r0, [pc, #112]	; (800f598 <dhcp_parse_reply+0x4b4>)
 800f526:	f006 fa33 	bl	8015990 <iprintf>
 800f52a:	f06f 0005 	mvn.w	r0, #5
 800f52e:	e7ef      	b.n	800f510 <dhcp_parse_reply+0x42c>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800f530:	4b1a      	ldr	r3, [pc, #104]	; (800f59c <dhcp_parse_reply+0x4b8>)
 800f532:	781b      	ldrb	r3, [r3, #0]
 800f534:	b153      	cbz	r3, 800f54c <dhcp_parse_reply+0x468>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800f536:	4b1a      	ldr	r3, [pc, #104]	; (800f5a0 <dhcp_parse_reply+0x4bc>)
 800f538:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800f53a:	4a18      	ldr	r2, [pc, #96]	; (800f59c <dhcp_parse_reply+0x4b8>)
 800f53c:	2100      	movs	r1, #0
 800f53e:	7011      	strb	r1, [r2, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800f540:	2b01      	cmp	r3, #1
 800f542:	d012      	beq.n	800f56a <dhcp_parse_reply+0x486>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800f544:	2b02      	cmp	r3, #2
 800f546:	d009      	beq.n	800f55c <dhcp_parse_reply+0x478>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800f548:	2b03      	cmp	r3, #3
 800f54a:	d00c      	beq.n	800f566 <dhcp_parse_reply+0x482>
  } else if (parse_sname_as_options) {
 800f54c:	9b03      	ldr	r3, [sp, #12]
 800f54e:	b143      	cbz	r3, 800f562 <dhcp_parse_reply+0x47e>
    parse_sname_as_options = 0;
 800f550:	2300      	movs	r3, #0
 800f552:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800f554:	246c      	movs	r4, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 800f556:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 800f55a:	e5d5      	b.n	800f108 <dhcp_parse_reply+0x24>
      parse_sname_as_options = 1;
 800f55c:	2301      	movs	r3, #1
 800f55e:	9303      	str	r3, [sp, #12]
 800f560:	e7f4      	b.n	800f54c <dhcp_parse_reply+0x468>
  return ERR_OK;
 800f562:	2000      	movs	r0, #0
 800f564:	e7d4      	b.n	800f510 <dhcp_parse_reply+0x42c>
      parse_sname_as_options = 1;
 800f566:	2301      	movs	r3, #1
 800f568:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800f56a:	24ec      	movs	r4, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 800f56c:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    goto again;
 800f570:	e5ca      	b.n	800f108 <dhcp_parse_reply+0x24>
    return ERR_BUF;
 800f572:	f06f 0001 	mvn.w	r0, #1
 800f576:	e7cb      	b.n	800f510 <dhcp_parse_reply+0x42c>
    return ERR_BUF;
 800f578:	f06f 0001 	mvn.w	r0, #1
 800f57c:	e7c8      	b.n	800f510 <dhcp_parse_reply+0x42c>
      return ERR_BUF;
 800f57e:	f06f 0001 	mvn.w	r0, #1
 800f582:	e7c5      	b.n	800f510 <dhcp_parse_reply+0x42c>
        return ERR_BUF;
 800f584:	f06f 0001 	mvn.w	r0, #1
 800f588:	e7c2      	b.n	800f510 <dhcp_parse_reply+0x42c>
        return ERR_BUF;
 800f58a:	f06f 0001 	mvn.w	r0, #1
 800f58e:	e7bf      	b.n	800f510 <dhcp_parse_reply+0x42c>
 800f590:	08019d48 	.word	0x08019d48
 800f594:	0801a000 	.word	0x0801a000
 800f598:	08016bb4 	.word	0x08016bb4
 800f59c:	20007fc8 	.word	0x20007fc8
 800f5a0:	20007fd4 	.word	0x20007fd4
 800f5a4:	0801a014 	.word	0x0801a014
 800f5a8:	0801a02c 	.word	0x0801a02c
 800f5ac:	0801a040 	.word	0x0801a040

0800f5b0 <dhcp_handle_ack>:
{
 800f5b0:	b510      	push	{r4, lr}
 800f5b2:	b086      	sub	sp, #24
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f5b4:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	6363      	str	r3, [r4, #52]	; 0x34
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f5bc:	63a3      	str	r3, [r4, #56]	; 0x38
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800f5be:	4b2a      	ldr	r3, [pc, #168]	; (800f668 <dhcp_handle_ack+0xb8>)
 800f5c0:	78db      	ldrb	r3, [r3, #3]
 800f5c2:	b113      	cbz	r3, 800f5ca <dhcp_handle_ack+0x1a>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800f5c4:	4b29      	ldr	r3, [pc, #164]	; (800f66c <dhcp_handle_ack+0xbc>)
 800f5c6:	68db      	ldr	r3, [r3, #12]
 800f5c8:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800f5ca:	4b27      	ldr	r3, [pc, #156]	; (800f668 <dhcp_handle_ack+0xb8>)
 800f5cc:	791b      	ldrb	r3, [r3, #4]
 800f5ce:	b1a3      	cbz	r3, 800f5fa <dhcp_handle_ack+0x4a>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800f5d0:	4b26      	ldr	r3, [pc, #152]	; (800f66c <dhcp_handle_ack+0xbc>)
 800f5d2:	691b      	ldr	r3, [r3, #16]
 800f5d4:	6423      	str	r3, [r4, #64]	; 0x40
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800f5d6:	4b24      	ldr	r3, [pc, #144]	; (800f668 <dhcp_handle_ack+0xb8>)
 800f5d8:	795b      	ldrb	r3, [r3, #5]
 800f5da:	b193      	cbz	r3, 800f602 <dhcp_handle_ack+0x52>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800f5dc:	4b23      	ldr	r3, [pc, #140]	; (800f66c <dhcp_handle_ack+0xbc>)
 800f5de:	695b      	ldr	r3, [r3, #20]
 800f5e0:	6463      	str	r3, [r4, #68]	; 0x44
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800f5e2:	690b      	ldr	r3, [r1, #16]
 800f5e4:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800f5e6:	4b20      	ldr	r3, [pc, #128]	; (800f668 <dhcp_handle_ack+0xb8>)
 800f5e8:	799b      	ldrb	r3, [r3, #6]
 800f5ea:	b983      	cbnz	r3, 800f60e <dhcp_handle_ack+0x5e>
    dhcp->subnet_mask_given = 0;
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800f5f0:	4b1d      	ldr	r3, [pc, #116]	; (800f668 <dhcp_handle_ack+0xb8>)
 800f5f2:	79db      	ldrb	r3, [r3, #7]
 800f5f4:	b99b      	cbnz	r3, 800f61e <dhcp_handle_ack+0x6e>
{
 800f5f6:	2400      	movs	r4, #0
 800f5f8:	e02b      	b.n	800f652 <dhcp_handle_ack+0xa2>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800f5fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f5fc:	085b      	lsrs	r3, r3, #1
 800f5fe:	6423      	str	r3, [r4, #64]	; 0x40
 800f600:	e7e9      	b.n	800f5d6 <dhcp_handle_ack+0x26>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800f602:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f604:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800f608:	08db      	lsrs	r3, r3, #3
 800f60a:	6463      	str	r3, [r4, #68]	; 0x44
 800f60c:	e7e9      	b.n	800f5e2 <dhcp_handle_ack+0x32>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800f60e:	4b17      	ldr	r3, [pc, #92]	; (800f66c <dhcp_handle_ack+0xbc>)
 800f610:	6998      	ldr	r0, [r3, #24]
 800f612:	f7f7 fa38 	bl	8006a86 <lwip_htonl>
 800f616:	6360      	str	r0, [r4, #52]	; 0x34
    dhcp->subnet_mask_given = 1;
 800f618:	2301      	movs	r3, #1
 800f61a:	71e3      	strb	r3, [r4, #7]
 800f61c:	e7e8      	b.n	800f5f0 <dhcp_handle_ack+0x40>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800f61e:	4b13      	ldr	r3, [pc, #76]	; (800f66c <dhcp_handle_ack+0xbc>)
 800f620:	69d8      	ldr	r0, [r3, #28]
 800f622:	f7f7 fa30 	bl	8006a86 <lwip_htonl>
 800f626:	63a0      	str	r0, [r4, #56]	; 0x38
 800f628:	e7e5      	b.n	800f5f6 <dhcp_handle_ack+0x46>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 800f62a:	4a10      	ldr	r2, [pc, #64]	; (800f66c <dhcp_handle_ack+0xbc>)
 800f62c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f630:	f7f7 fa29 	bl	8006a86 <lwip_htonl>
 800f634:	9000      	str	r0, [sp, #0]
 800f636:	2300      	movs	r3, #0
 800f638:	f88d 3014 	strb.w	r3, [sp, #20]
 800f63c:	9303      	str	r3, [sp, #12]
 800f63e:	9302      	str	r3, [sp, #8]
 800f640:	9301      	str	r3, [sp, #4]
 800f642:	f88d 3010 	strb.w	r3, [sp, #16]
    dns_setserver(n, &dns_addr);
 800f646:	4669      	mov	r1, sp
 800f648:	4620      	mov	r0, r4
 800f64a:	f7f7 fd23 	bl	8007094 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800f64e:	3401      	adds	r4, #1
 800f650:	b2e4      	uxtb	r4, r4
 800f652:	2c01      	cmp	r4, #1
 800f654:	d805      	bhi.n	800f662 <dhcp_handle_ack+0xb2>
 800f656:	f104 0308 	add.w	r3, r4, #8
 800f65a:	4a03      	ldr	r2, [pc, #12]	; (800f668 <dhcp_handle_ack+0xb8>)
 800f65c:	5cd2      	ldrb	r2, [r2, r3]
 800f65e:	2a00      	cmp	r2, #0
 800f660:	d1e3      	bne.n	800f62a <dhcp_handle_ack+0x7a>
}
 800f662:	b006      	add	sp, #24
 800f664:	bd10      	pop	{r4, pc}
 800f666:	bf00      	nop
 800f668:	20007fc8 	.word	0x20007fc8
 800f66c:	20007fd4 	.word	0x20007fd4

0800f670 <dhcp_recv>:
{
 800f670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f672:	4614      	mov	r4, r2
  struct netif *netif = ip_current_input_netif();
 800f674:	4a3c      	ldr	r2, [pc, #240]	; (800f768 <dhcp_recv+0xf8>)
 800f676:	6855      	ldr	r5, [r2, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f678:	f8d5 60c8 	ldr.w	r6, [r5, #200]	; 0xc8
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800f67c:	6867      	ldr	r7, [r4, #4]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800f67e:	b356      	cbz	r6, 800f6d6 <dhcp_recv+0x66>
 800f680:	7932      	ldrb	r2, [r6, #4]
 800f682:	b342      	cbz	r2, 800f6d6 <dhcp_recv+0x66>
  LWIP_ASSERT("invalid server address type", IP_IS_V4(addr));
 800f684:	b10b      	cbz	r3, 800f68a <dhcp_recv+0x1a>
 800f686:	7d1b      	ldrb	r3, [r3, #20]
 800f688:	b93b      	cbnz	r3, 800f69a <dhcp_recv+0x2a>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 800f68a:	8963      	ldrh	r3, [r4, #10]
 800f68c:	2b2b      	cmp	r3, #43	; 0x2b
 800f68e:	d922      	bls.n	800f6d6 <dhcp_recv+0x66>
  if (reply_msg->op != DHCP_BOOTREPLY) {
 800f690:	783b      	ldrb	r3, [r7, #0]
 800f692:	2b02      	cmp	r3, #2
 800f694:	d11f      	bne.n	800f6d6 <dhcp_recv+0x66>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800f696:	2300      	movs	r3, #0
 800f698:	e009      	b.n	800f6ae <dhcp_recv+0x3e>
  LWIP_ASSERT("invalid server address type", IP_IS_V4(addr));
 800f69a:	4b34      	ldr	r3, [pc, #208]	; (800f76c <dhcp_recv+0xfc>)
 800f69c:	f240 62ea 	movw	r2, #1770	; 0x6ea
 800f6a0:	4933      	ldr	r1, [pc, #204]	; (800f770 <dhcp_recv+0x100>)
 800f6a2:	4834      	ldr	r0, [pc, #208]	; (800f774 <dhcp_recv+0x104>)
 800f6a4:	f006 f974 	bl	8015990 <iprintf>
 800f6a8:	e7ef      	b.n	800f68a <dhcp_recv+0x1a>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800f6aa:	3301      	adds	r3, #1
 800f6ac:	b2db      	uxtb	r3, r3
 800f6ae:	f895 20de 	ldrb.w	r2, [r5, #222]	; 0xde
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	d909      	bls.n	800f6ca <dhcp_recv+0x5a>
 800f6b6:	2b05      	cmp	r3, #5
 800f6b8:	d807      	bhi.n	800f6ca <dhcp_recv+0x5a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800f6ba:	18ea      	adds	r2, r5, r3
 800f6bc:	f892 10d8 	ldrb.w	r1, [r2, #216]	; 0xd8
 800f6c0:	18fa      	adds	r2, r7, r3
 800f6c2:	7f12      	ldrb	r2, [r2, #28]
 800f6c4:	4291      	cmp	r1, r2
 800f6c6:	d0f0      	beq.n	800f6aa <dhcp_recv+0x3a>
 800f6c8:	e005      	b.n	800f6d6 <dhcp_recv+0x66>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f7f7 f9db 	bl	8006a86 <lwip_htonl>
 800f6d0:	6833      	ldr	r3, [r6, #0]
 800f6d2:	4298      	cmp	r0, r3
 800f6d4:	d003      	beq.n	800f6de <dhcp_recv+0x6e>
  pbuf_free(p);
 800f6d6:	4620      	mov	r0, r4
 800f6d8:	f7f8 fd0a 	bl	80080f0 <pbuf_free>
}
 800f6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800f6de:	4631      	mov	r1, r6
 800f6e0:	4620      	mov	r0, r4
 800f6e2:	f7ff fcff 	bl	800f0e4 <dhcp_parse_reply>
 800f6e6:	2800      	cmp	r0, #0
 800f6e8:	d1f5      	bne.n	800f6d6 <dhcp_recv+0x66>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800f6ea:	4b23      	ldr	r3, [pc, #140]	; (800f778 <dhcp_recv+0x108>)
 800f6ec:	785b      	ldrb	r3, [r3, #1]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d0f1      	beq.n	800f6d6 <dhcp_recv+0x66>
  msg_in = (struct dhcp_msg *)p->payload;
 800f6f2:	6861      	ldr	r1, [r4, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800f6f4:	4b21      	ldr	r3, [pc, #132]	; (800f77c <dhcp_recv+0x10c>)
 800f6f6:	791b      	ldrb	r3, [r3, #4]
  if (msg_type == DHCP_ACK) {
 800f6f8:	2b05      	cmp	r3, #5
 800f6fa:	d00a      	beq.n	800f712 <dhcp_recv+0xa2>
  else if ((msg_type == DHCP_NAK) &&
 800f6fc:	2b06      	cmp	r3, #6
 800f6fe:	d026      	beq.n	800f74e <dhcp_recv+0xde>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800f700:	2b02      	cmp	r3, #2
 800f702:	d1e8      	bne.n	800f6d6 <dhcp_recv+0x66>
 800f704:	7973      	ldrb	r3, [r6, #5]
 800f706:	2b06      	cmp	r3, #6
 800f708:	d1e5      	bne.n	800f6d6 <dhcp_recv+0x66>
    dhcp_handle_offer(netif, msg_in);
 800f70a:	4628      	mov	r0, r5
 800f70c:	f7ff fad4 	bl	800ecb8 <dhcp_handle_offer>
 800f710:	e7e1      	b.n	800f6d6 <dhcp_recv+0x66>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800f712:	7973      	ldrb	r3, [r6, #5]
 800f714:	2b01      	cmp	r3, #1
 800f716:	d00a      	beq.n	800f72e <dhcp_recv+0xbe>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800f718:	3b03      	subs	r3, #3
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	2b02      	cmp	r3, #2
 800f71e:	d8da      	bhi.n	800f6d6 <dhcp_recv+0x66>
      dhcp_handle_ack(netif, msg_in);
 800f720:	4628      	mov	r0, r5
 800f722:	f7ff ff45 	bl	800f5b0 <dhcp_handle_ack>
      dhcp_bind(netif);
 800f726:	4628      	mov	r0, r5
 800f728:	f7ff fbcc 	bl	800eec4 <dhcp_bind>
 800f72c:	e7d3      	b.n	800f6d6 <dhcp_recv+0x66>
      dhcp_handle_ack(netif, msg_in);
 800f72e:	4628      	mov	r0, r5
 800f730:	f7ff ff3e 	bl	800f5b0 <dhcp_handle_ack>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800f734:	f895 30df 	ldrb.w	r3, [r5, #223]	; 0xdf
 800f738:	f013 0f08 	tst.w	r3, #8
 800f73c:	d003      	beq.n	800f746 <dhcp_recv+0xd6>
        dhcp_check(netif);
 800f73e:	4628      	mov	r0, r5
 800f740:	f7ff fbaa 	bl	800ee98 <dhcp_check>
 800f744:	e7c7      	b.n	800f6d6 <dhcp_recv+0x66>
        dhcp_bind(netif);
 800f746:	4628      	mov	r0, r5
 800f748:	f7ff fbbc 	bl	800eec4 <dhcp_bind>
 800f74c:	e7c3      	b.n	800f6d6 <dhcp_recv+0x66>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800f74e:	7972      	ldrb	r2, [r6, #5]
  else if ((msg_type == DHCP_NAK) &&
 800f750:	2a03      	cmp	r2, #3
 800f752:	d005      	beq.n	800f760 <dhcp_recv+0xf0>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800f754:	2a01      	cmp	r2, #1
 800f756:	d003      	beq.n	800f760 <dhcp_recv+0xf0>
 800f758:	2a04      	cmp	r2, #4
 800f75a:	d001      	beq.n	800f760 <dhcp_recv+0xf0>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800f75c:	2a05      	cmp	r2, #5
 800f75e:	d1cf      	bne.n	800f700 <dhcp_recv+0x90>
    dhcp_handle_nak(netif);
 800f760:	4628      	mov	r0, r5
 800f762:	f7ff fc47 	bl	800eff4 <dhcp_handle_nak>
 800f766:	e7b6      	b.n	800f6d6 <dhcp_recv+0x66>
 800f768:	20003e34 	.word	0x20003e34
 800f76c:	08019d48 	.word	0x08019d48
 800f770:	0801a054 	.word	0x0801a054
 800f774:	08016bb4 	.word	0x08016bb4
 800f778:	20007fc8 	.word	0x20007fc8
 800f77c:	20007fd4 	.word	0x20007fd4

0800f780 <dhcp_arp_reply>:
{
 800f780:	b508      	push	{r3, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f782:	b138      	cbz	r0, 800f794 <dhcp_arp_reply+0x14>
 800f784:	4602      	mov	r2, r0
  dhcp = netif_dhcp_data(netif);
 800f786:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800f78a:	b113      	cbz	r3, 800f792 <dhcp_arp_reply+0x12>
 800f78c:	7958      	ldrb	r0, [r3, #5]
 800f78e:	2808      	cmp	r0, #8
 800f790:	d008      	beq.n	800f7a4 <dhcp_arp_reply+0x24>
}
 800f792:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f794:	4b07      	ldr	r3, [pc, #28]	; (800f7b4 <dhcp_arp_reply+0x34>)
 800f796:	f240 328b 	movw	r2, #907	; 0x38b
 800f79a:	4907      	ldr	r1, [pc, #28]	; (800f7b8 <dhcp_arp_reply+0x38>)
 800f79c:	4807      	ldr	r0, [pc, #28]	; (800f7bc <dhcp_arp_reply+0x3c>)
 800f79e:	f006 f8f7 	bl	8015990 <iprintf>
 800f7a2:	e7f6      	b.n	800f792 <dhcp_arp_reply+0x12>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800f7a4:	6809      	ldr	r1, [r1, #0]
 800f7a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7a8:	4299      	cmp	r1, r3
 800f7aa:	d1f2      	bne.n	800f792 <dhcp_arp_reply+0x12>
      dhcp_decline(netif);
 800f7ac:	4610      	mov	r0, r2
 800f7ae:	f7ff fb23 	bl	800edf8 <dhcp_decline>
 800f7b2:	e7ee      	b.n	800f792 <dhcp_arp_reply+0x12>
 800f7b4:	08019d48 	.word	0x08019d48
 800f7b8:	08016ba4 	.word	0x08016ba4
 800f7bc:	08016bb4 	.word	0x08016bb4

0800f7c0 <dhcp_renew>:
{
 800f7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7c4:	b084      	sub	sp, #16
 800f7c6:	4680      	mov	r8, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f7c8:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800f7cc:	2105      	movs	r1, #5
 800f7ce:	4628      	mov	r0, r5
 800f7d0:	f7fe ff56 	bl	800e680 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f7d4:	f10d 030e 	add.w	r3, sp, #14
 800f7d8:	2203      	movs	r2, #3
 800f7da:	4629      	mov	r1, r5
 800f7dc:	4640      	mov	r0, r8
 800f7de:	f7fe ffd3 	bl	800e788 <dhcp_create_msg>
  if (p_out != NULL) {
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	d04b      	beq.n	800f87e <dhcp_renew+0xbe>
 800f7e6:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f7e8:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f7ea:	36f0      	adds	r6, #240	; 0xf0
 800f7ec:	2302      	movs	r3, #2
 800f7ee:	2239      	movs	r2, #57	; 0x39
 800f7f0:	4631      	mov	r1, r6
 800f7f2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800f7f6:	f7fe ff69 	bl	800e6cc <dhcp_option>
 800f7fa:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f7fe:	f8b8 20d4 	ldrh.w	r2, [r8, #212]	; 0xd4
 800f802:	4631      	mov	r1, r6
 800f804:	f7fe ff44 	bl	800e690 <dhcp_option_short>
 800f808:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f80c:	2304      	movs	r3, #4
 800f80e:	2237      	movs	r2, #55	; 0x37
 800f810:	4631      	mov	r1, r6
 800f812:	f7fe ff5b 	bl	800e6cc <dhcp_option>
 800f816:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f81a:	2400      	movs	r4, #0
 800f81c:	e00a      	b.n	800f834 <dhcp_renew+0x74>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f81e:	4b21      	ldr	r3, [pc, #132]	; (800f8a4 <dhcp_renew+0xe4>)
 800f820:	5d1a      	ldrb	r2, [r3, r4]
 800f822:	4631      	mov	r1, r6
 800f824:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800f828:	f7fe ff6e 	bl	800e708 <dhcp_option_byte>
 800f82c:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f830:	3401      	adds	r4, #1
 800f832:	b2e4      	uxtb	r4, r4
 800f834:	2c03      	cmp	r4, #3
 800f836:	d9f2      	bls.n	800f81e <dhcp_renew+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f838:	463a      	mov	r2, r7
 800f83a:	4631      	mov	r1, r6
 800f83c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800f840:	f7ff f840 	bl	800e8c4 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f844:	f8cd 8000 	str.w	r8, [sp]
 800f848:	2343      	movs	r3, #67	; 0x43
 800f84a:	f105 0218 	add.w	r2, r5, #24
 800f84e:	4639      	mov	r1, r7
 800f850:	4815      	ldr	r0, [pc, #84]	; (800f8a8 <dhcp_renew+0xe8>)
 800f852:	6800      	ldr	r0, [r0, #0]
 800f854:	f7fe fc5a 	bl	800e10c <udp_sendto_if>
 800f858:	4604      	mov	r4, r0
    pbuf_free(p_out);
 800f85a:	4638      	mov	r0, r7
 800f85c:	f7f8 fc48 	bl	80080f0 <pbuf_free>
  if (dhcp->tries < 255) {
 800f860:	79ab      	ldrb	r3, [r5, #6]
 800f862:	2bff      	cmp	r3, #255	; 0xff
 800f864:	d001      	beq.n	800f86a <dhcp_renew+0xaa>
    dhcp->tries++;
 800f866:	3301      	adds	r3, #1
 800f868:	71ab      	strb	r3, [r5, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800f86a:	79ab      	ldrb	r3, [r5, #6]
 800f86c:	2b09      	cmp	r3, #9
 800f86e:	d809      	bhi.n	800f884 <dhcp_renew+0xc4>
 800f870:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800f874:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f878:	011b      	lsls	r3, r3, #4
 800f87a:	b29b      	uxth	r3, r3
 800f87c:	e004      	b.n	800f888 <dhcp_renew+0xc8>
    result = ERR_MEM;
 800f87e:	f04f 34ff 	mov.w	r4, #4294967295
 800f882:	e7ed      	b.n	800f860 <dhcp_renew+0xa0>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800f884:	f644 6320 	movw	r3, #20000	; 0x4e20
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f888:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f88c:	4a07      	ldr	r2, [pc, #28]	; (800f8ac <dhcp_renew+0xec>)
 800f88e:	fb82 1203 	smull	r1, r2, r2, r3
 800f892:	17db      	asrs	r3, r3, #31
 800f894:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800f898:	812b      	strh	r3, [r5, #8]
}
 800f89a:	4620      	mov	r0, r4
 800f89c:	b004      	add	sp, #16
 800f89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8a2:	bf00      	nop
 800f8a4:	0801a0c8 	.word	0x0801a0c8
 800f8a8:	20000ad0 	.word	0x20000ad0
 800f8ac:	10624dd3 	.word	0x10624dd3

0800f8b0 <dhcp_t1_timeout>:
{
 800f8b0:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f8b2:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f8b6:	7963      	ldrb	r3, [r4, #5]
 800f8b8:	2b01      	cmp	r3, #1
 800f8ba:	d003      	beq.n	800f8c4 <dhcp_t1_timeout+0x14>
 800f8bc:	2b0a      	cmp	r3, #10
 800f8be:	d001      	beq.n	800f8c4 <dhcp_t1_timeout+0x14>
 800f8c0:	2b05      	cmp	r3, #5
 800f8c2:	d10b      	bne.n	800f8dc <dhcp_t1_timeout+0x2c>
    dhcp_renew(netif);
 800f8c4:	f7ff ff7c 	bl	800f7c0 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800f8c8:	89a3      	ldrh	r3, [r4, #12]
 800f8ca:	8a62      	ldrh	r2, [r4, #18]
 800f8cc:	1a9b      	subs	r3, r3, r2
 800f8ce:	2b01      	cmp	r3, #1
 800f8d0:	dd04      	ble.n	800f8dc <dhcp_t1_timeout+0x2c>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800f8d2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800f8d6:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800f8da:	81e3      	strh	r3, [r4, #14]
}
 800f8dc:	bd10      	pop	{r4, pc}

0800f8de <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800f8de:	b190      	cbz	r0, 800f906 <dhcp_supplied_address+0x28>
 800f8e0:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 800f8e4:	b18b      	cbz	r3, 800f90a <dhcp_supplied_address+0x2c>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800f8e6:	795b      	ldrb	r3, [r3, #5]
 800f8e8:	2b0a      	cmp	r3, #10
 800f8ea:	d007      	beq.n	800f8fc <dhcp_supplied_address+0x1e>
 800f8ec:	2b05      	cmp	r3, #5
 800f8ee:	d008      	beq.n	800f902 <dhcp_supplied_address+0x24>
 800f8f0:	2b04      	cmp	r3, #4
 800f8f2:	d001      	beq.n	800f8f8 <dhcp_supplied_address+0x1a>
 800f8f4:	2000      	movs	r0, #0
 800f8f6:	e002      	b.n	800f8fe <dhcp_supplied_address+0x20>
 800f8f8:	2001      	movs	r0, #1
 800f8fa:	e000      	b.n	800f8fe <dhcp_supplied_address+0x20>
 800f8fc:	2001      	movs	r0, #1
 800f8fe:	b2c0      	uxtb	r0, r0
 800f900:	4770      	bx	lr
 800f902:	2001      	movs	r0, #1
 800f904:	e7fb      	b.n	800f8fe <dhcp_supplied_address+0x20>
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
 800f906:	2000      	movs	r0, #0
 800f908:	4770      	bx	lr
 800f90a:	2000      	movs	r0, #0
}
 800f90c:	4770      	bx	lr
	...

0800f910 <dhcp_release_and_stop>:
{
 800f910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f914:	b08a      	sub	sp, #40	; 0x28
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f916:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  if (dhcp == NULL) {
 800f91a:	2c00      	cmp	r4, #0
 800f91c:	d039      	beq.n	800f992 <dhcp_release_and_stop+0x82>
 800f91e:	4605      	mov	r5, r0
  if (dhcp->state == DHCP_STATE_OFF) {
 800f920:	7963      	ldrb	r3, [r4, #5]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d035      	beq.n	800f992 <dhcp_release_and_stop+0x82>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800f926:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800f92a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800f92e:	2b06      	cmp	r3, #6
 800f930:	d032      	beq.n	800f998 <dhcp_release_and_stop+0x88>
 800f932:	69a3      	ldr	r3, [r4, #24]
 800f934:	9304      	str	r3, [sp, #16]
 800f936:	2300      	movs	r3, #0
 800f938:	9307      	str	r3, [sp, #28]
 800f93a:	9306      	str	r3, [sp, #24]
 800f93c:	9305      	str	r3, [sp, #20]
 800f93e:	f88d 3020 	strb.w	r3, [sp, #32]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800f942:	2300      	movs	r3, #0
 800f944:	61a3      	str	r3, [r4, #24]
 800f946:	61e3      	str	r3, [r4, #28]
 800f948:	6223      	str	r3, [r4, #32]
 800f94a:	6263      	str	r3, [r4, #36]	; 0x24
 800f94c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800f950:	f114 0f18 	cmn.w	r4, #24
 800f954:	d001      	beq.n	800f95a <dhcp_release_and_stop+0x4a>
 800f956:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800f95a:	2300      	movs	r3, #0
 800f95c:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f95e:	6363      	str	r3, [r4, #52]	; 0x34
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f960:	63a3      	str	r3, [r4, #56]	; 0x38
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800f962:	6463      	str	r3, [r4, #68]	; 0x44
 800f964:	6423      	str	r3, [r4, #64]	; 0x40
 800f966:	63e3      	str	r3, [r4, #60]	; 0x3c
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800f968:	82a3      	strh	r3, [r4, #20]
 800f96a:	8263      	strh	r3, [r4, #18]
 800f96c:	8223      	strh	r3, [r4, #16]
 800f96e:	81e3      	strh	r3, [r4, #14]
  if (dhcp_supplied_address(netif)) {
 800f970:	4628      	mov	r0, r5
 800f972:	f7ff ffb4 	bl	800f8de <dhcp_supplied_address>
 800f976:	b9e0      	cbnz	r0, 800f9b2 <dhcp_release_and_stop+0xa2>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f978:	4928      	ldr	r1, [pc, #160]	; (800fa1c <dhcp_release_and_stop+0x10c>)
 800f97a:	460b      	mov	r3, r1
 800f97c:	460a      	mov	r2, r1
 800f97e:	4628      	mov	r0, r5
 800f980:	f7f7 ffe2 	bl	8007948 <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800f984:	2100      	movs	r1, #0
 800f986:	4620      	mov	r0, r4
 800f988:	f7fe fe7a 	bl	800e680 <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 800f98c:	7923      	ldrb	r3, [r4, #4]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d13f      	bne.n	800fa12 <dhcp_release_and_stop+0x102>
}
 800f992:	b00a      	add	sp, #40	; 0x28
 800f994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800f998:	69a3      	ldr	r3, [r4, #24]
 800f99a:	9304      	str	r3, [sp, #16]
 800f99c:	69e3      	ldr	r3, [r4, #28]
 800f99e:	9305      	str	r3, [sp, #20]
 800f9a0:	6a23      	ldr	r3, [r4, #32]
 800f9a2:	9306      	str	r3, [sp, #24]
 800f9a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f9a6:	9307      	str	r3, [sp, #28]
 800f9a8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f9ac:	f88d 3020 	strb.w	r3, [sp, #32]
 800f9b0:	e7c7      	b.n	800f942 <dhcp_release_and_stop+0x32>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800f9b2:	f10d 030e 	add.w	r3, sp, #14
 800f9b6:	2207      	movs	r2, #7
 800f9b8:	4621      	mov	r1, r4
 800f9ba:	4628      	mov	r0, r5
 800f9bc:	f7fe fee4 	bl	800e788 <dhcp_create_msg>
    if (p_out != NULL) {
 800f9c0:	4607      	mov	r7, r0
 800f9c2:	2800      	cmp	r0, #0
 800f9c4:	d0d8      	beq.n	800f978 <dhcp_release_and_stop+0x68>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f9c6:	6846      	ldr	r6, [r0, #4]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800f9c8:	36f0      	adds	r6, #240	; 0xf0
 800f9ca:	2304      	movs	r3, #4
 800f9cc:	2236      	movs	r2, #54	; 0x36
 800f9ce:	4631      	mov	r1, r6
 800f9d0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800f9d4:	f7fe fe7a 	bl	800e6cc <dhcp_option>
 800f9d8:	4680      	mov	r8, r0
 800f9da:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800f9de:	9804      	ldr	r0, [sp, #16]
 800f9e0:	f7f7 f851 	bl	8006a86 <lwip_htonl>
 800f9e4:	4602      	mov	r2, r0
 800f9e6:	4631      	mov	r1, r6
 800f9e8:	4640      	mov	r0, r8
 800f9ea:	f7fe fea5 	bl	800e738 <dhcp_option_long>
 800f9ee:	f8ad 000e 	strh.w	r0, [sp, #14]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f9f2:	463a      	mov	r2, r7
 800f9f4:	4631      	mov	r1, r6
 800f9f6:	f7fe ff65 	bl	800e8c4 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f9fa:	9500      	str	r5, [sp, #0]
 800f9fc:	2343      	movs	r3, #67	; 0x43
 800f9fe:	aa04      	add	r2, sp, #16
 800fa00:	4639      	mov	r1, r7
 800fa02:	4807      	ldr	r0, [pc, #28]	; (800fa20 <dhcp_release_and_stop+0x110>)
 800fa04:	6800      	ldr	r0, [r0, #0]
 800fa06:	f7fe fb81 	bl	800e10c <udp_sendto_if>
      pbuf_free(p_out);
 800fa0a:	4638      	mov	r0, r7
 800fa0c:	f7f8 fb70 	bl	80080f0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
 800fa10:	e7b2      	b.n	800f978 <dhcp_release_and_stop+0x68>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800fa12:	f7ff fb03 	bl	800f01c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800fa16:	2300      	movs	r3, #0
 800fa18:	7123      	strb	r3, [r4, #4]
 800fa1a:	e7ba      	b.n	800f992 <dhcp_release_and_stop+0x82>
 800fa1c:	0801a4d4 	.word	0x0801a4d4
 800fa20:	20000ad0 	.word	0x20000ad0

0800fa24 <dhcp_start>:
{
 800fa24:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800fa26:	b338      	cbz	r0, 800fa78 <dhcp_start+0x54>
 800fa28:	4604      	mov	r4, r0
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800fa2a:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 800fa2e:	f013 0f01 	tst.w	r3, #1
 800fa32:	d02b      	beq.n	800fa8c <dhcp_start+0x68>
  dhcp = netif_dhcp_data(netif);
 800fa34:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800fa38:	f8b0 30d4 	ldrh.w	r3, [r0, #212]	; 0xd4
 800fa3c:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800fa40:	d344      	bcc.n	800facc <dhcp_start+0xa8>
  if (dhcp == NULL) {
 800fa42:	b36d      	cbz	r5, 800faa0 <dhcp_start+0x7c>
    if (dhcp->pcb_allocated != 0) {
 800fa44:	792b      	ldrb	r3, [r5, #4]
 800fa46:	bb9b      	cbnz	r3, 800fab0 <dhcp_start+0x8c>
  memset(dhcp, 0, sizeof(struct dhcp));
 800fa48:	2248      	movs	r2, #72	; 0x48
 800fa4a:	2100      	movs	r1, #0
 800fa4c:	4628      	mov	r0, r5
 800fa4e:	f005 ff97 	bl	8015980 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800fa52:	f7ff fb07 	bl	800f064 <dhcp_inc_pcb_refcount>
 800fa56:	4606      	mov	r6, r0
 800fa58:	2800      	cmp	r0, #0
 800fa5a:	d13d      	bne.n	800fad8 <dhcp_start+0xb4>
  dhcp->pcb_allocated = 1;
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 800fa60:	f894 30df 	ldrb.w	r3, [r4, #223]	; 0xdf
 800fa64:	f013 0f04 	tst.w	r3, #4
 800fa68:	d025      	beq.n	800fab6 <dhcp_start+0x92>
  result = dhcp_discover(netif);
 800fa6a:	4620      	mov	r0, r4
 800fa6c:	f7ff f948 	bl	800ed00 <dhcp_discover>
  if (result != ERR_OK) {
 800fa70:	4606      	mov	r6, r0
 800fa72:	bb28      	cbnz	r0, 800fac0 <dhcp_start+0x9c>
}
 800fa74:	4630      	mov	r0, r6
 800fa76:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800fa78:	4b19      	ldr	r3, [pc, #100]	; (800fae0 <dhcp_start+0xbc>)
 800fa7a:	f240 22e7 	movw	r2, #743	; 0x2e7
 800fa7e:	4919      	ldr	r1, [pc, #100]	; (800fae4 <dhcp_start+0xc0>)
 800fa80:	4819      	ldr	r0, [pc, #100]	; (800fae8 <dhcp_start+0xc4>)
 800fa82:	f005 ff85 	bl	8015990 <iprintf>
 800fa86:	f06f 060f 	mvn.w	r6, #15
 800fa8a:	e7f3      	b.n	800fa74 <dhcp_start+0x50>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800fa8c:	4b14      	ldr	r3, [pc, #80]	; (800fae0 <dhcp_start+0xbc>)
 800fa8e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800fa92:	4916      	ldr	r1, [pc, #88]	; (800faec <dhcp_start+0xc8>)
 800fa94:	4814      	ldr	r0, [pc, #80]	; (800fae8 <dhcp_start+0xc4>)
 800fa96:	f005 ff7b 	bl	8015990 <iprintf>
 800fa9a:	f06f 060f 	mvn.w	r6, #15
 800fa9e:	e7e9      	b.n	800fa74 <dhcp_start+0x50>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800faa0:	2048      	movs	r0, #72	; 0x48
 800faa2:	f7f7 fd5b 	bl	800755c <mem_malloc>
    if (dhcp == NULL) {
 800faa6:	4605      	mov	r5, r0
 800faa8:	b198      	cbz	r0, 800fad2 <dhcp_start+0xae>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800faaa:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 800faae:	e7cb      	b.n	800fa48 <dhcp_start+0x24>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800fab0:	f7ff fab4 	bl	800f01c <dhcp_dec_pcb_refcount>
 800fab4:	e7c8      	b.n	800fa48 <dhcp_start+0x24>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800fab6:	2102      	movs	r1, #2
 800fab8:	4628      	mov	r0, r5
 800faba:	f7fe fde1 	bl	800e680 <dhcp_set_state>
    return ERR_OK;
 800fabe:	e7d9      	b.n	800fa74 <dhcp_start+0x50>
    dhcp_release_and_stop(netif);
 800fac0:	4620      	mov	r0, r4
 800fac2:	f7ff ff25 	bl	800f910 <dhcp_release_and_stop>
    return ERR_MEM;
 800fac6:	f04f 36ff 	mov.w	r6, #4294967295
 800faca:	e7d3      	b.n	800fa74 <dhcp_start+0x50>
    return ERR_MEM;
 800facc:	f04f 36ff 	mov.w	r6, #4294967295
 800fad0:	e7d0      	b.n	800fa74 <dhcp_start+0x50>
      return ERR_MEM;
 800fad2:	f04f 36ff 	mov.w	r6, #4294967295
 800fad6:	e7cd      	b.n	800fa74 <dhcp_start+0x50>
    return ERR_MEM;
 800fad8:	f04f 36ff 	mov.w	r6, #4294967295
 800fadc:	e7ca      	b.n	800fa74 <dhcp_start+0x50>
 800fade:	bf00      	nop
 800fae0:	08019d48 	.word	0x08019d48
 800fae4:	08016ba4 	.word	0x08016ba4
 800fae8:	08016bb4 	.word	0x08016bb4
 800faec:	0801a0a4 	.word	0x0801a0a4

0800faf0 <dhcp_coarse_tmr>:
{
 800faf0:	b510      	push	{r4, lr}
  NETIF_FOREACH(netif) {
 800faf2:	4b18      	ldr	r3, [pc, #96]	; (800fb54 <dhcp_coarse_tmr+0x64>)
 800faf4:	681c      	ldr	r4, [r3, #0]
 800faf6:	e006      	b.n	800fb06 <dhcp_coarse_tmr+0x16>
        dhcp_release_and_stop(netif);
 800faf8:	4620      	mov	r0, r4
 800fafa:	f7ff ff09 	bl	800f910 <dhcp_release_and_stop>
        dhcp_start(netif);
 800fafe:	4620      	mov	r0, r4
 800fb00:	f7ff ff90 	bl	800fa24 <dhcp_start>
  NETIF_FOREACH(netif) {
 800fb04:	6824      	ldr	r4, [r4, #0]
 800fb06:	b31c      	cbz	r4, 800fb50 <dhcp_coarse_tmr+0x60>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fb08:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d0f9      	beq.n	800fb04 <dhcp_coarse_tmr+0x14>
 800fb10:	795a      	ldrb	r2, [r3, #5]
 800fb12:	2a00      	cmp	r2, #0
 800fb14:	d0f6      	beq.n	800fb04 <dhcp_coarse_tmr+0x14>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800fb16:	8a99      	ldrh	r1, [r3, #20]
 800fb18:	b129      	cbz	r1, 800fb26 <dhcp_coarse_tmr+0x36>
 800fb1a:	8a5a      	ldrh	r2, [r3, #18]
 800fb1c:	3201      	adds	r2, #1
 800fb1e:	b292      	uxth	r2, r2
 800fb20:	825a      	strh	r2, [r3, #18]
 800fb22:	4291      	cmp	r1, r2
 800fb24:	d0e8      	beq.n	800faf8 <dhcp_coarse_tmr+0x8>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800fb26:	8a1a      	ldrh	r2, [r3, #16]
 800fb28:	b11a      	cbz	r2, 800fb32 <dhcp_coarse_tmr+0x42>
 800fb2a:	1e51      	subs	r1, r2, #1
 800fb2c:	8219      	strh	r1, [r3, #16]
 800fb2e:	2a01      	cmp	r2, #1
 800fb30:	d00a      	beq.n	800fb48 <dhcp_coarse_tmr+0x58>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800fb32:	89da      	ldrh	r2, [r3, #14]
 800fb34:	2a00      	cmp	r2, #0
 800fb36:	d0e5      	beq.n	800fb04 <dhcp_coarse_tmr+0x14>
 800fb38:	1e51      	subs	r1, r2, #1
 800fb3a:	81d9      	strh	r1, [r3, #14]
 800fb3c:	2a01      	cmp	r2, #1
 800fb3e:	d1e1      	bne.n	800fb04 <dhcp_coarse_tmr+0x14>
        dhcp_t1_timeout(netif);
 800fb40:	4620      	mov	r0, r4
 800fb42:	f7ff feb5 	bl	800f8b0 <dhcp_t1_timeout>
 800fb46:	e7dd      	b.n	800fb04 <dhcp_coarse_tmr+0x14>
        dhcp_t2_timeout(netif);
 800fb48:	4620      	mov	r0, r4
 800fb4a:	f7fe ff4d 	bl	800e9e8 <dhcp_t2_timeout>
 800fb4e:	e7d9      	b.n	800fb04 <dhcp_coarse_tmr+0x14>
}
 800fb50:	bd10      	pop	{r4, pc}
 800fb52:	bf00      	nop
 800fb54:	20007f9c 	.word	0x20007f9c

0800fb58 <dhcp_timeout>:
{
 800fb58:	b510      	push	{r4, lr}
 800fb5a:	4604      	mov	r4, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fb5c:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800fb60:	7953      	ldrb	r3, [r2, #5]
 800fb62:	2b0c      	cmp	r3, #12
 800fb64:	d00d      	beq.n	800fb82 <dhcp_timeout+0x2a>
 800fb66:	2b06      	cmp	r3, #6
 800fb68:	d00b      	beq.n	800fb82 <dhcp_timeout+0x2a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800fb6a:	2b01      	cmp	r3, #1
 800fb6c:	d00d      	beq.n	800fb8a <dhcp_timeout+0x32>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800fb6e:	2b08      	cmp	r3, #8
 800fb70:	d017      	beq.n	800fba2 <dhcp_timeout+0x4a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800fb72:	2b03      	cmp	r3, #3
 800fb74:	d108      	bne.n	800fb88 <dhcp_timeout+0x30>
    if (dhcp->tries < REBOOT_TRIES) {
 800fb76:	7993      	ldrb	r3, [r2, #6]
 800fb78:	2b01      	cmp	r3, #1
 800fb7a:	d91b      	bls.n	800fbb4 <dhcp_timeout+0x5c>
      dhcp_discover(netif);
 800fb7c:	f7ff f8c0 	bl	800ed00 <dhcp_discover>
}
 800fb80:	e002      	b.n	800fb88 <dhcp_timeout+0x30>
    dhcp_discover(netif);
 800fb82:	4620      	mov	r0, r4
 800fb84:	f7ff f8bc 	bl	800ed00 <dhcp_discover>
}
 800fb88:	bd10      	pop	{r4, pc}
    if (dhcp->tries <= 5) {
 800fb8a:	7993      	ldrb	r3, [r2, #6]
 800fb8c:	2b05      	cmp	r3, #5
 800fb8e:	d802      	bhi.n	800fb96 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800fb90:	f7fe ffce 	bl	800eb30 <dhcp_select>
 800fb94:	e7f8      	b.n	800fb88 <dhcp_timeout+0x30>
      dhcp_release_and_stop(netif);
 800fb96:	f7ff febb 	bl	800f910 <dhcp_release_and_stop>
      dhcp_start(netif);
 800fb9a:	4620      	mov	r0, r4
 800fb9c:	f7ff ff42 	bl	800fa24 <dhcp_start>
 800fba0:	e7f2      	b.n	800fb88 <dhcp_timeout+0x30>
    if (dhcp->tries <= 1) {
 800fba2:	7993      	ldrb	r3, [r2, #6]
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	d902      	bls.n	800fbae <dhcp_timeout+0x56>
      dhcp_bind(netif);
 800fba8:	f7ff f98c 	bl	800eec4 <dhcp_bind>
 800fbac:	e7ec      	b.n	800fb88 <dhcp_timeout+0x30>
      dhcp_check(netif);
 800fbae:	f7ff f973 	bl	800ee98 <dhcp_check>
 800fbb2:	e7e9      	b.n	800fb88 <dhcp_timeout+0x30>
      dhcp_reboot(netif);
 800fbb4:	f7fe ff32 	bl	800ea1c <dhcp_reboot>
 800fbb8:	e7e6      	b.n	800fb88 <dhcp_timeout+0x30>
	...

0800fbbc <dhcp_fine_tmr>:
{
 800fbbc:	b510      	push	{r4, lr}
  NETIF_FOREACH(netif) {
 800fbbe:	4b0c      	ldr	r3, [pc, #48]	; (800fbf0 <dhcp_fine_tmr+0x34>)
 800fbc0:	681c      	ldr	r4, [r3, #0]
 800fbc2:	e002      	b.n	800fbca <dhcp_fine_tmr+0xe>
      } else if (dhcp->request_timeout == 1) {
 800fbc4:	2a01      	cmp	r2, #1
 800fbc6:	d00b      	beq.n	800fbe0 <dhcp_fine_tmr+0x24>
  NETIF_FOREACH(netif) {
 800fbc8:	6824      	ldr	r4, [r4, #0]
 800fbca:	b17c      	cbz	r4, 800fbec <dhcp_fine_tmr+0x30>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fbcc:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    if (dhcp != NULL) {
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d0f9      	beq.n	800fbc8 <dhcp_fine_tmr+0xc>
      if (dhcp->request_timeout > 1) {
 800fbd4:	891a      	ldrh	r2, [r3, #8]
 800fbd6:	2a01      	cmp	r2, #1
 800fbd8:	d9f4      	bls.n	800fbc4 <dhcp_fine_tmr+0x8>
        dhcp->request_timeout--;
 800fbda:	3a01      	subs	r2, #1
 800fbdc:	811a      	strh	r2, [r3, #8]
 800fbde:	e7f3      	b.n	800fbc8 <dhcp_fine_tmr+0xc>
        dhcp->request_timeout--;
 800fbe0:	3a01      	subs	r2, #1
 800fbe2:	811a      	strh	r2, [r3, #8]
        dhcp_timeout(netif);
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	f7ff ffb7 	bl	800fb58 <dhcp_timeout>
 800fbea:	e7ed      	b.n	800fbc8 <dhcp_fine_tmr+0xc>
}
 800fbec:	bd10      	pop	{r4, pc}
 800fbee:	bf00      	nop
 800fbf0:	20007f9c 	.word	0x20007f9c

0800fbf4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800fbf4:	b510      	push	{r4, lr}
 800fbf6:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800fbf8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800fbfc:	4b0e      	ldr	r3, [pc, #56]	; (800fc38 <etharp_free_entry+0x44>)
 800fbfe:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800fc02:	b138      	cbz	r0, 800fc14 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800fc04:	f7f8 fa74 	bl	80080f0 <pbuf_free>
    arp_table[i].q = NULL;
 800fc08:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800fc0c:	00db      	lsls	r3, r3, #3
 800fc0e:	4a0a      	ldr	r2, [pc, #40]	; (800fc38 <etharp_free_entry+0x44>)
 800fc10:	2100      	movs	r1, #0
 800fc12:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800fc14:	4808      	ldr	r0, [pc, #32]	; (800fc38 <etharp_free_entry+0x44>)
 800fc16:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800fc1a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800fc1e:	2200      	movs	r2, #0
 800fc20:	751a      	strb	r2, [r3, #20]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 800fc22:	825a      	strh	r2, [r3, #18]
  arp_table[i].netif = NULL;
 800fc24:	609a      	str	r2, [r3, #8]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 800fc26:	605a      	str	r2, [r3, #4]
  arp_table[i].ethaddr = ethzero;
 800fc28:	461c      	mov	r4, r3
 800fc2a:	4b04      	ldr	r3, [pc, #16]	; (800fc3c <etharp_free_entry+0x48>)
 800fc2c:	6818      	ldr	r0, [r3, #0]
 800fc2e:	60e0      	str	r0, [r4, #12]
 800fc30:	889b      	ldrh	r3, [r3, #4]
 800fc32:	8223      	strh	r3, [r4, #16]
#endif /* LWIP_DEBUG */
}
 800fc34:	bd10      	pop	{r4, pc}
 800fc36:	bf00      	nop
 800fc38:	20000adc 	.word	0x20000adc
 800fc3c:	0801aa7c 	.word	0x0801aa7c

0800fc40 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800fc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc44:	b083      	sub	sp, #12
 800fc46:	4607      	mov	r7, r0
 800fc48:	4690      	mov	r8, r2
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800fc4a:	f04f 0e00 	mov.w	lr, #0
 800fc4e:	f8cd e000 	str.w	lr, [sp]
 800fc52:	46f3      	mov	fp, lr
  s16_t old_queue = ARP_TABLE_SIZE;
 800fc54:	f04f 0a0a 	mov.w	sl, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fc58:	4673      	mov	r3, lr
  s16_t empty = ARP_TABLE_SIZE;
 800fc5a:	4656      	mov	r6, sl
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800fc5c:	46d1      	mov	r9, sl
 800fc5e:	f8cd a004 	str.w	sl, [sp, #4]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fc62:	e003      	b.n	800fc6c <etharp_find_entry+0x2c>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800fc64:	b968      	cbnz	r0, 800fc82 <etharp_find_entry+0x42>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800fc66:	461e      	mov	r6, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fc68:	3301      	adds	r3, #1
 800fc6a:	b21b      	sxth	r3, r3
 800fc6c:	2b09      	cmp	r3, #9
 800fc6e:	dc4b      	bgt.n	800fd08 <etharp_find_entry+0xc8>
    u8_t state = arp_table[i].state;
 800fc70:	461c      	mov	r4, r3
 800fc72:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800fc76:	485c      	ldr	r0, [pc, #368]	; (800fde8 <etharp_find_entry+0x1a8>)
 800fc78:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800fc7c:	7d10      	ldrb	r0, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800fc7e:	2e0a      	cmp	r6, #10
 800fc80:	d0f0      	beq.n	800fc64 <etharp_find_entry+0x24>
    } else if (state != ETHARP_STATE_EMPTY) {
 800fc82:	2800      	cmp	r0, #0
 800fc84:	d0f0      	beq.n	800fc68 <etharp_find_entry+0x28>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800fc86:	b147      	cbz	r7, 800fc9a <etharp_find_entry+0x5a>
 800fc88:	683a      	ldr	r2, [r7, #0]
 800fc8a:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
 800fc8e:	4d56      	ldr	r5, [pc, #344]	; (800fde8 <etharp_find_entry+0x1a8>)
 800fc90:	eb05 05cc 	add.w	r5, r5, ip, lsl #3
 800fc94:	686d      	ldr	r5, [r5, #4]
 800fc96:	42aa      	cmp	r2, r5
 800fc98:	d00e      	beq.n	800fcb8 <etharp_find_entry+0x78>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800fc9a:	2801      	cmp	r0, #1
 800fc9c:	d018      	beq.n	800fcd0 <etharp_find_entry+0x90>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800fc9e:	2801      	cmp	r0, #1
 800fca0:	d9e2      	bls.n	800fc68 <etharp_find_entry+0x28>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800fca2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800fca6:	4a50      	ldr	r2, [pc, #320]	; (800fde8 <etharp_find_entry+0x1a8>)
 800fca8:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 800fcac:	8a62      	ldrh	r2, [r4, #18]
 800fcae:	4572      	cmp	r2, lr
 800fcb0:	d3da      	bcc.n	800fc68 <etharp_find_entry+0x28>
            old_stable = i;
            age_stable = arp_table[i].ctime;
 800fcb2:	4696      	mov	lr, r2
            old_stable = i;
 800fcb4:	4699      	mov	r9, r3
 800fcb6:	e7d7      	b.n	800fc68 <etharp_find_entry+0x28>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800fcb8:	f1b8 0f00 	cmp.w	r8, #0
 800fcbc:	f000 808c 	beq.w	800fdd8 <etharp_find_entry+0x198>
 800fcc0:	4d49      	ldr	r5, [pc, #292]	; (800fde8 <etharp_find_entry+0x1a8>)
 800fcc2:	eb05 02cc 	add.w	r2, r5, ip, lsl #3
 800fcc6:	6892      	ldr	r2, [r2, #8]
 800fcc8:	4542      	cmp	r2, r8
 800fcca:	d1e6      	bne.n	800fc9a <etharp_find_entry+0x5a>
        return i;
 800fccc:	461e      	mov	r6, r3
 800fcce:	e055      	b.n	800fd7c <etharp_find_entry+0x13c>
        if (arp_table[i].q != NULL) {
 800fcd0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800fcd4:	4844      	ldr	r0, [pc, #272]	; (800fde8 <etharp_find_entry+0x1a8>)
 800fcd6:	f850 2032 	ldr.w	r2, [r0, r2, lsl #3]
 800fcda:	b14a      	cbz	r2, 800fcf0 <etharp_find_entry+0xb0>
          if (arp_table[i].ctime >= age_queue) {
 800fcdc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800fce0:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800fce4:	8a62      	ldrh	r2, [r4, #18]
 800fce6:	455a      	cmp	r2, fp
 800fce8:	d3be      	bcc.n	800fc68 <etharp_find_entry+0x28>
            age_queue = arp_table[i].ctime;
 800fcea:	4693      	mov	fp, r2
            old_queue = i;
 800fcec:	469a      	mov	sl, r3
 800fcee:	e7bb      	b.n	800fc68 <etharp_find_entry+0x28>
          if (arp_table[i].ctime >= age_pending) {
 800fcf0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800fcf4:	4a3c      	ldr	r2, [pc, #240]	; (800fde8 <etharp_find_entry+0x1a8>)
 800fcf6:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 800fcfa:	8a62      	ldrh	r2, [r4, #18]
 800fcfc:	9800      	ldr	r0, [sp, #0]
 800fcfe:	4282      	cmp	r2, r0
 800fd00:	d3b2      	bcc.n	800fc68 <etharp_find_entry+0x28>
            age_pending = arp_table[i].ctime;
 800fd02:	9200      	str	r2, [sp, #0]
            old_pending = i;
 800fd04:	9301      	str	r3, [sp, #4]
 800fd06:	e7af      	b.n	800fc68 <etharp_find_entry+0x28>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800fd08:	f011 0f02 	tst.w	r1, #2
 800fd0c:	d166      	bne.n	800fddc <etharp_find_entry+0x19c>
 800fd0e:	2e0a      	cmp	r6, #10
 800fd10:	d038      	beq.n	800fd84 <etharp_find_entry+0x144>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800fd12:	2e09      	cmp	r6, #9
 800fd14:	dd16      	ble.n	800fd44 <etharp_find_entry+0x104>
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800fd16:	f1b9 0f09 	cmp.w	r9, #9
 800fd1a:	dc39      	bgt.n	800fd90 <etharp_find_entry+0x150>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800fd1c:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 800fd20:	4a31      	ldr	r2, [pc, #196]	; (800fde8 <etharp_find_entry+0x1a8>)
 800fd22:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d03a      	beq.n	800fda0 <etharp_find_entry+0x160>
 800fd2a:	4b30      	ldr	r3, [pc, #192]	; (800fdec <etharp_find_entry+0x1ac>)
 800fd2c:	f240 126d 	movw	r2, #365	; 0x16d
 800fd30:	492f      	ldr	r1, [pc, #188]	; (800fdf0 <etharp_find_entry+0x1b0>)
 800fd32:	4830      	ldr	r0, [pc, #192]	; (800fdf4 <etharp_find_entry+0x1b4>)
 800fd34:	f005 fe2c 	bl	8015990 <iprintf>
      i = old_stable;
 800fd38:	464e      	mov	r6, r9
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fd3a:	2e09      	cmp	r6, #9
 800fd3c:	dc34      	bgt.n	800fda8 <etharp_find_entry+0x168>
    etharp_free_entry(i);
 800fd3e:	4630      	mov	r0, r6
 800fd40:	f7ff ff58 	bl	800fbf4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fd44:	2e09      	cmp	r6, #9
 800fd46:	dc37      	bgt.n	800fdb8 <etharp_find_entry+0x178>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800fd48:	4634      	mov	r4, r6
 800fd4a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800fd4e:	4a26      	ldr	r2, [pc, #152]	; (800fde8 <etharp_find_entry+0x1a8>)
 800fd50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fd54:	7d1b      	ldrb	r3, [r3, #20]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d136      	bne.n	800fdc8 <etharp_find_entry+0x188>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800fd5a:	b137      	cbz	r7, 800fd6a <etharp_find_entry+0x12a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800fd5c:	6839      	ldr	r1, [r7, #0]
 800fd5e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800fd62:	4a21      	ldr	r2, [pc, #132]	; (800fde8 <etharp_find_entry+0x1a8>)
 800fd64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fd68:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800fd6a:	4b1f      	ldr	r3, [pc, #124]	; (800fde8 <etharp_find_entry+0x1a8>)
 800fd6c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800fd70:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800fd74:	2100      	movs	r1, #0
 800fd76:	8251      	strh	r1, [r2, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800fd78:	f8c2 8008 	str.w	r8, [r2, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800fd7c:	4630      	mov	r0, r6
 800fd7e:	b003      	add	sp, #12
 800fd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800fd84:	f011 0f01 	tst.w	r1, #1
 800fd88:	d1c3      	bne.n	800fd12 <etharp_find_entry+0xd2>
    return (s16_t)ERR_MEM;
 800fd8a:	f04f 36ff 	mov.w	r6, #4294967295
 800fd8e:	e7f5      	b.n	800fd7c <etharp_find_entry+0x13c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800fd90:	9b01      	ldr	r3, [sp, #4]
 800fd92:	2b09      	cmp	r3, #9
 800fd94:	dd06      	ble.n	800fda4 <etharp_find_entry+0x164>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800fd96:	f1ba 0f09 	cmp.w	sl, #9
 800fd9a:	dc22      	bgt.n	800fde2 <etharp_find_entry+0x1a2>
      i = old_queue;
 800fd9c:	4656      	mov	r6, sl
 800fd9e:	e7cc      	b.n	800fd3a <etharp_find_entry+0xfa>
      i = old_stable;
 800fda0:	464e      	mov	r6, r9
 800fda2:	e7ca      	b.n	800fd3a <etharp_find_entry+0xfa>
      i = old_pending;
 800fda4:	9e01      	ldr	r6, [sp, #4]
 800fda6:	e7c8      	b.n	800fd3a <etharp_find_entry+0xfa>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fda8:	4b10      	ldr	r3, [pc, #64]	; (800fdec <etharp_find_entry+0x1ac>)
 800fdaa:	f240 127f 	movw	r2, #383	; 0x17f
 800fdae:	4912      	ldr	r1, [pc, #72]	; (800fdf8 <etharp_find_entry+0x1b8>)
 800fdb0:	4810      	ldr	r0, [pc, #64]	; (800fdf4 <etharp_find_entry+0x1b4>)
 800fdb2:	f005 fded 	bl	8015990 <iprintf>
 800fdb6:	e7c2      	b.n	800fd3e <etharp_find_entry+0xfe>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fdb8:	4b0c      	ldr	r3, [pc, #48]	; (800fdec <etharp_find_entry+0x1ac>)
 800fdba:	f240 1283 	movw	r2, #387	; 0x183
 800fdbe:	490e      	ldr	r1, [pc, #56]	; (800fdf8 <etharp_find_entry+0x1b8>)
 800fdc0:	480c      	ldr	r0, [pc, #48]	; (800fdf4 <etharp_find_entry+0x1b4>)
 800fdc2:	f005 fde5 	bl	8015990 <iprintf>
 800fdc6:	e7bf      	b.n	800fd48 <etharp_find_entry+0x108>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800fdc8:	4b08      	ldr	r3, [pc, #32]	; (800fdec <etharp_find_entry+0x1ac>)
 800fdca:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800fdce:	490b      	ldr	r1, [pc, #44]	; (800fdfc <etharp_find_entry+0x1bc>)
 800fdd0:	4808      	ldr	r0, [pc, #32]	; (800fdf4 <etharp_find_entry+0x1b4>)
 800fdd2:	f005 fddd 	bl	8015990 <iprintf>
 800fdd6:	e7c0      	b.n	800fd5a <etharp_find_entry+0x11a>
        return i;
 800fdd8:	461e      	mov	r6, r3
 800fdda:	e7cf      	b.n	800fd7c <etharp_find_entry+0x13c>
    return (s16_t)ERR_MEM;
 800fddc:	f04f 36ff 	mov.w	r6, #4294967295
 800fde0:	e7cc      	b.n	800fd7c <etharp_find_entry+0x13c>
      return (s16_t)ERR_MEM;
 800fde2:	f04f 36ff 	mov.w	r6, #4294967295
 800fde6:	e7c9      	b.n	800fd7c <etharp_find_entry+0x13c>
 800fde8:	20000adc 	.word	0x20000adc
 800fdec:	0801a0cc 	.word	0x0801a0cc
 800fdf0:	0801a104 	.word	0x0801a104
 800fdf4:	08016bb4 	.word	0x08016bb4
 800fdf8:	0801a11c 	.word	0x0801a11c
 800fdfc:	0801a130 	.word	0x0801a130

0800fe00 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800fe00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe02:	b083      	sub	sp, #12
 800fe04:	4605      	mov	r5, r0
 800fe06:	460c      	mov	r4, r1
 800fe08:	4616      	mov	r6, r2
 800fe0a:	461f      	mov	r7, r3
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800fe0c:	f890 20de 	ldrb.w	r2, [r0, #222]	; 0xde
 800fe10:	2a06      	cmp	r2, #6
 800fe12:	d13b      	bne.n	800fe8c <etharp_update_arp_entry+0x8c>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800fe14:	2c00      	cmp	r4, #0
 800fe16:	d041      	beq.n	800fe9c <etharp_update_arp_entry+0x9c>
 800fe18:	6820      	ldr	r0, [r4, #0]
 800fe1a:	2800      	cmp	r0, #0
 800fe1c:	d03e      	beq.n	800fe9c <etharp_update_arp_entry+0x9c>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fe1e:	4629      	mov	r1, r5
 800fe20:	f001 f8c8 	bl	8010fb4 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800fe24:	2800      	cmp	r0, #0
 800fe26:	d139      	bne.n	800fe9c <etharp_update_arp_entry+0x9c>
      ip4_addr_ismulticast(ipaddr)) {
 800fe28:	6822      	ldr	r2, [r4, #0]
 800fe2a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800fe2e:	2ae0      	cmp	r2, #224	; 0xe0
 800fe30:	d034      	beq.n	800fe9c <etharp_update_arp_entry+0x9c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800fe32:	462a      	mov	r2, r5
 800fe34:	4639      	mov	r1, r7
 800fe36:	4620      	mov	r0, r4
 800fe38:	f7ff ff02 	bl	800fc40 <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 800fe3c:	1e03      	subs	r3, r0, #0
 800fe3e:	db30      	blt.n	800fea2 <etharp_update_arp_entry+0xa2>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800fe40:	4a1a      	ldr	r2, [pc, #104]	; (800feac <etharp_update_arp_entry+0xac>)
 800fe42:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800fe46:	eb02 00c4 	add.w	r0, r2, r4, lsl #3
 800fe4a:	2102      	movs	r1, #2
 800fe4c:	7501      	strb	r1, [r0, #20]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800fe4e:	6085      	str	r5, [r0, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800fe50:	00e1      	lsls	r1, r4, #3
 800fe52:	3108      	adds	r1, #8
 800fe54:	4411      	add	r1, r2
 800fe56:	6837      	ldr	r7, [r6, #0]
 800fe58:	604f      	str	r7, [r1, #4]
 800fe5a:	88b7      	ldrh	r7, [r6, #4]
 800fe5c:	810f      	strh	r7, [r1, #8]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800fe5e:	2100      	movs	r1, #0
 800fe60:	8241      	strh	r1, [r0, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800fe62:	f852 7034 	ldr.w	r7, [r2, r4, lsl #3]
 800fe66:	b1ff      	cbz	r7, 800fea8 <etharp_update_arp_entry+0xa8>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 800fe68:	00e3      	lsls	r3, r4, #3
 800fe6a:	460c      	mov	r4, r1
 800fe6c:	50d1      	str	r1, [r2, r3]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800fe6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fe72:	9300      	str	r3, [sp, #0]
 800fe74:	4633      	mov	r3, r6
 800fe76:	f105 02d8 	add.w	r2, r5, #216	; 0xd8
 800fe7a:	4639      	mov	r1, r7
 800fe7c:	4628      	mov	r0, r5
 800fe7e:	f005 fced 	bl	801585c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800fe82:	4638      	mov	r0, r7
 800fe84:	f7f8 f934 	bl	80080f0 <pbuf_free>
  }
  return ERR_OK;
 800fe88:	4620      	mov	r0, r4
 800fe8a:	e00b      	b.n	800fea4 <etharp_update_arp_entry+0xa4>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800fe8c:	4b08      	ldr	r3, [pc, #32]	; (800feb0 <etharp_update_arp_entry+0xb0>)
 800fe8e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800fe92:	4908      	ldr	r1, [pc, #32]	; (800feb4 <etharp_update_arp_entry+0xb4>)
 800fe94:	4808      	ldr	r0, [pc, #32]	; (800feb8 <etharp_update_arp_entry+0xb8>)
 800fe96:	f005 fd7b 	bl	8015990 <iprintf>
 800fe9a:	e7bb      	b.n	800fe14 <etharp_update_arp_entry+0x14>
    return ERR_ARG;
 800fe9c:	f06f 000f 	mvn.w	r0, #15
 800fea0:	e000      	b.n	800fea4 <etharp_update_arp_entry+0xa4>
    return (err_t)i;
 800fea2:	b258      	sxtb	r0, r3
}
 800fea4:	b003      	add	sp, #12
 800fea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ERR_OK;
 800fea8:	2000      	movs	r0, #0
 800feaa:	e7fb      	b.n	800fea4 <etharp_update_arp_entry+0xa4>
 800feac:	20000adc 	.word	0x20000adc
 800feb0:	0801a0cc 	.word	0x0801a0cc
 800feb4:	0801a15c 	.word	0x0801a15c
 800feb8:	08016bb4 	.word	0x08016bb4

0800febc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800febc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fec0:	b082      	sub	sp, #8
 800fec2:	460f      	mov	r7, r1
 800fec4:	4690      	mov	r8, r2
 800fec6:	461d      	mov	r5, r3
 800fec8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fecc:	4681      	mov	r9, r0
 800fece:	2800      	cmp	r0, #0
 800fed0:	d042      	beq.n	800ff58 <etharp_raw+0x9c>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800fed2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fed6:	211c      	movs	r1, #28
 800fed8:	200e      	movs	r0, #14
 800feda:	f7f8 f96b 	bl	80081b4 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800fede:	4606      	mov	r6, r0
 800fee0:	2800      	cmp	r0, #0
 800fee2:	d051      	beq.n	800ff88 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800fee4:	8943      	ldrh	r3, [r0, #10]
 800fee6:	2b1b      	cmp	r3, #27
 800fee8:	d93e      	bls.n	800ff68 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800feea:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800feec:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800fef0:	f7f6 fdc4 	bl	8006a7c <lwip_htons>
 800fef4:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800fef6:	f899 30de 	ldrb.w	r3, [r9, #222]	; 0xde
 800fefa:	2b06      	cmp	r3, #6
 800fefc:	d13c      	bne.n	800ff78 <etharp_raw+0xbc>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800fefe:	682b      	ldr	r3, [r5, #0]
 800ff00:	60a3      	str	r3, [r4, #8]
 800ff02:	88ab      	ldrh	r3, [r5, #4]
 800ff04:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ff06:	f8da 3000 	ldr.w	r3, [sl]
 800ff0a:	f8c4 3012 	str.w	r3, [r4, #18]
 800ff0e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800ff12:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800ff14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ff1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ff22:	2500      	movs	r5, #0
 800ff24:	7025      	strb	r5, [r4, #0]
 800ff26:	2301      	movs	r3, #1
 800ff28:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ff2a:	2308      	movs	r3, #8
 800ff2c:	70a3      	strb	r3, [r4, #2]
 800ff2e:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ff30:	2306      	movs	r3, #6
 800ff32:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ff34:	2304      	movs	r3, #4
 800ff36:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ff38:	f640 0306 	movw	r3, #2054	; 0x806
 800ff3c:	9300      	str	r3, [sp, #0]
 800ff3e:	4643      	mov	r3, r8
 800ff40:	463a      	mov	r2, r7
 800ff42:	4631      	mov	r1, r6
 800ff44:	4648      	mov	r0, r9
 800ff46:	f005 fc89 	bl	801585c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ff4a:	4630      	mov	r0, r6
 800ff4c:	f7f8 f8d0 	bl	80080f0 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800ff50:	4628      	mov	r0, r5
}
 800ff52:	b002      	add	sp, #8
 800ff54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ff58:	4b0d      	ldr	r3, [pc, #52]	; (800ff90 <etharp_raw+0xd4>)
 800ff5a:	f240 4257 	movw	r2, #1111	; 0x457
 800ff5e:	490d      	ldr	r1, [pc, #52]	; (800ff94 <etharp_raw+0xd8>)
 800ff60:	480d      	ldr	r0, [pc, #52]	; (800ff98 <etharp_raw+0xdc>)
 800ff62:	f005 fd15 	bl	8015990 <iprintf>
 800ff66:	e7b4      	b.n	800fed2 <etharp_raw+0x16>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ff68:	4b09      	ldr	r3, [pc, #36]	; (800ff90 <etharp_raw+0xd4>)
 800ff6a:	f240 4262 	movw	r2, #1122	; 0x462
 800ff6e:	490b      	ldr	r1, [pc, #44]	; (800ff9c <etharp_raw+0xe0>)
 800ff70:	4809      	ldr	r0, [pc, #36]	; (800ff98 <etharp_raw+0xdc>)
 800ff72:	f005 fd0d 	bl	8015990 <iprintf>
 800ff76:	e7b8      	b.n	800feea <etharp_raw+0x2e>
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ff78:	4b05      	ldr	r3, [pc, #20]	; (800ff90 <etharp_raw+0xd4>)
 800ff7a:	f240 4269 	movw	r2, #1129	; 0x469
 800ff7e:	4908      	ldr	r1, [pc, #32]	; (800ffa0 <etharp_raw+0xe4>)
 800ff80:	4805      	ldr	r0, [pc, #20]	; (800ff98 <etharp_raw+0xdc>)
 800ff82:	f005 fd05 	bl	8015990 <iprintf>
 800ff86:	e7ba      	b.n	800fefe <etharp_raw+0x42>
    return ERR_MEM;
 800ff88:	f04f 30ff 	mov.w	r0, #4294967295
 800ff8c:	e7e1      	b.n	800ff52 <etharp_raw+0x96>
 800ff8e:	bf00      	nop
 800ff90:	0801a0cc 	.word	0x0801a0cc
 800ff94:	08016ba4 	.word	0x08016ba4
 800ff98:	08016bb4 	.word	0x08016bb4
 800ff9c:	0801a180 	.word	0x0801a180
 800ffa0:	0801a1b4 	.word	0x0801a1b4

0800ffa4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ffa4:	b530      	push	{r4, r5, lr}
 800ffa6:	b085      	sub	sp, #20
 800ffa8:	4604      	mov	r4, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ffaa:	f100 03d8 	add.w	r3, r0, #216	; 0xd8
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ffae:	3404      	adds	r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ffb0:	2501      	movs	r5, #1
 800ffb2:	9503      	str	r5, [sp, #12]
 800ffb4:	9102      	str	r1, [sp, #8]
 800ffb6:	4904      	ldr	r1, [pc, #16]	; (800ffc8 <etharp_request_dst+0x24>)
 800ffb8:	9101      	str	r1, [sp, #4]
 800ffba:	9400      	str	r4, [sp, #0]
 800ffbc:	4619      	mov	r1, r3
 800ffbe:	f7ff ff7d 	bl	800febc <etharp_raw>
                    ipaddr, ARP_REQUEST);
}
 800ffc2:	b005      	add	sp, #20
 800ffc4:	bd30      	pop	{r4, r5, pc}
 800ffc6:	bf00      	nop
 800ffc8:	0801aa7c 	.word	0x0801aa7c

0800ffcc <etharp_cleanup_netif>:
{
 800ffcc:	b538      	push	{r3, r4, r5, lr}
 800ffce:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ffd0:	2400      	movs	r4, #0
 800ffd2:	e000      	b.n	800ffd6 <etharp_cleanup_netif+0xa>
 800ffd4:	3401      	adds	r4, #1
 800ffd6:	2c09      	cmp	r4, #9
 800ffd8:	dc12      	bgt.n	8010000 <etharp_cleanup_netif+0x34>
    u8_t state = arp_table[i].state;
 800ffda:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ffde:	4a09      	ldr	r2, [pc, #36]	; (8010004 <etharp_cleanup_netif+0x38>)
 800ffe0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ffe4:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d0f4      	beq.n	800ffd4 <etharp_cleanup_netif+0x8>
 800ffea:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800ffee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fff2:	689b      	ldr	r3, [r3, #8]
 800fff4:	42ab      	cmp	r3, r5
 800fff6:	d1ed      	bne.n	800ffd4 <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 800fff8:	4620      	mov	r0, r4
 800fffa:	f7ff fdfb 	bl	800fbf4 <etharp_free_entry>
 800fffe:	e7e9      	b.n	800ffd4 <etharp_cleanup_netif+0x8>
}
 8010000:	bd38      	pop	{r3, r4, r5, pc}
 8010002:	bf00      	nop
 8010004:	20000adc 	.word	0x20000adc

08010008 <etharp_input>:
{
 8010008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801000c:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801000e:	b1a9      	cbz	r1, 801003c <etharp_input+0x34>
 8010010:	4604      	mov	r4, r0
 8010012:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 8010014:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010016:	882b      	ldrh	r3, [r5, #0]
 8010018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801001c:	d108      	bne.n	8010030 <etharp_input+0x28>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801001e:	792b      	ldrb	r3, [r5, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010020:	2b06      	cmp	r3, #6
 8010022:	d105      	bne.n	8010030 <etharp_input+0x28>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010024:	796b      	ldrb	r3, [r5, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010026:	2b04      	cmp	r3, #4
 8010028:	d102      	bne.n	8010030 <etharp_input+0x28>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801002a:	886b      	ldrh	r3, [r5, #2]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801002c:	2b08      	cmp	r3, #8
 801002e:	d00d      	beq.n	801004c <etharp_input+0x44>
    pbuf_free(p);
 8010030:	4620      	mov	r0, r4
 8010032:	f7f8 f85d 	bl	80080f0 <pbuf_free>
}
 8010036:	b006      	add	sp, #24
 8010038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801003c:	4b21      	ldr	r3, [pc, #132]	; (80100c4 <etharp_input+0xbc>)
 801003e:	f240 228a 	movw	r2, #650	; 0x28a
 8010042:	4921      	ldr	r1, [pc, #132]	; (80100c8 <etharp_input+0xc0>)
 8010044:	4821      	ldr	r0, [pc, #132]	; (80100cc <etharp_input+0xc4>)
 8010046:	f005 fca3 	bl	8015990 <iprintf>
 801004a:	e7f4      	b.n	8010036 <etharp_input+0x2e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801004c:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8010050:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010052:	69af      	ldr	r7, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010054:	684b      	ldr	r3, [r1, #4]
 8010056:	b99b      	cbnz	r3, 8010080 <etharp_input+0x78>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010058:	f105 0808 	add.w	r8, r5, #8
    for_us = 0;
 801005c:	2700      	movs	r7, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801005e:	2302      	movs	r3, #2
 8010060:	4642      	mov	r2, r8
 8010062:	a905      	add	r1, sp, #20
 8010064:	4630      	mov	r0, r6
 8010066:	f7ff fecb 	bl	800fe00 <etharp_update_arp_entry>
  switch (hdr->opcode) {
 801006a:	88eb      	ldrh	r3, [r5, #6]
 801006c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010070:	d011      	beq.n	8010096 <etharp_input+0x8e>
 8010072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010076:	d020      	beq.n	80100ba <etharp_input+0xb2>
  pbuf_free(p);
 8010078:	4620      	mov	r0, r4
 801007a:	f7f8 f839 	bl	80080f0 <pbuf_free>
 801007e:	e7da      	b.n	8010036 <etharp_input+0x2e>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010080:	42bb      	cmp	r3, r7
 8010082:	bf14      	ite	ne
 8010084:	2700      	movne	r7, #0
 8010086:	2701      	moveq	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010088:	f105 0808 	add.w	r8, r5, #8
 801008c:	b10f      	cbz	r7, 8010092 <etharp_input+0x8a>
 801008e:	2301      	movs	r3, #1
 8010090:	e7e6      	b.n	8010060 <etharp_input+0x58>
 8010092:	2302      	movs	r3, #2
 8010094:	e7e4      	b.n	8010060 <etharp_input+0x58>
      if (for_us) {
 8010096:	2f00      	cmp	r7, #0
 8010098:	d0ee      	beq.n	8010078 <etharp_input+0x70>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801009a:	f106 01d8 	add.w	r1, r6, #216	; 0xd8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801009e:	1d33      	adds	r3, r6, #4
        etharp_raw(netif,
 80100a0:	2202      	movs	r2, #2
 80100a2:	9203      	str	r2, [sp, #12]
 80100a4:	aa05      	add	r2, sp, #20
 80100a6:	9202      	str	r2, [sp, #8]
 80100a8:	f8cd 8004 	str.w	r8, [sp, #4]
 80100ac:	9300      	str	r3, [sp, #0]
 80100ae:	460b      	mov	r3, r1
 80100b0:	4642      	mov	r2, r8
 80100b2:	4630      	mov	r0, r6
 80100b4:	f7ff ff02 	bl	800febc <etharp_raw>
 80100b8:	e7de      	b.n	8010078 <etharp_input+0x70>
      dhcp_arp_reply(netif, &sipaddr);
 80100ba:	a905      	add	r1, sp, #20
 80100bc:	4630      	mov	r0, r6
 80100be:	f7ff fb5f 	bl	800f780 <dhcp_arp_reply>
      break;
 80100c2:	e7d9      	b.n	8010078 <etharp_input+0x70>
 80100c4:	0801a0cc 	.word	0x0801a0cc
 80100c8:	08016ba4 	.word	0x08016ba4
 80100cc:	08016bb4 	.word	0x08016bb4

080100d0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80100d0:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80100d2:	4a02      	ldr	r2, [pc, #8]	; (80100dc <etharp_request+0xc>)
 80100d4:	f7ff ff66 	bl	800ffa4 <etharp_request_dst>
}
 80100d8:	bd08      	pop	{r3, pc}
 80100da:	bf00      	nop
 80100dc:	0801aa74 	.word	0x0801aa74

080100e0 <etharp_tmr>:
{
 80100e0:	b510      	push	{r4, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80100e2:	2400      	movs	r4, #0
 80100e4:	e005      	b.n	80100f2 <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80100e6:	2b04      	cmp	r3, #4
 80100e8:	d91b      	bls.n	8010122 <etharp_tmr+0x42>
        etharp_free_entry(i);
 80100ea:	4620      	mov	r0, r4
 80100ec:	f7ff fd82 	bl	800fbf4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80100f0:	3401      	adds	r4, #1
 80100f2:	2c09      	cmp	r4, #9
 80100f4:	dc35      	bgt.n	8010162 <etharp_tmr+0x82>
    u8_t state = arp_table[i].state;
 80100f6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80100fa:	00da      	lsls	r2, r3, #3
 80100fc:	4b19      	ldr	r3, [pc, #100]	; (8010164 <etharp_tmr+0x84>)
 80100fe:	4413      	add	r3, r2
 8010100:	7d1a      	ldrb	r2, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 8010102:	2a00      	cmp	r2, #0
 8010104:	d0f4      	beq.n	80100f0 <etharp_tmr+0x10>
      arp_table[i].ctime++;
 8010106:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801010a:	00cb      	lsls	r3, r1, #3
 801010c:	4915      	ldr	r1, [pc, #84]	; (8010164 <etharp_tmr+0x84>)
 801010e:	4419      	add	r1, r3
 8010110:	8a4b      	ldrh	r3, [r1, #18]
 8010112:	3301      	adds	r3, #1
 8010114:	b29b      	uxth	r3, r3
 8010116:	824b      	strh	r3, [r1, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010118:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801011c:	d2e5      	bcs.n	80100ea <etharp_tmr+0xa>
 801011e:	2a01      	cmp	r2, #1
 8010120:	d0e1      	beq.n	80100e6 <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010122:	2a03      	cmp	r2, #3
 8010124:	d00d      	beq.n	8010142 <etharp_tmr+0x62>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010126:	2a04      	cmp	r2, #4
 8010128:	d013      	beq.n	8010152 <etharp_tmr+0x72>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801012a:	2a01      	cmp	r2, #1
 801012c:	d1e0      	bne.n	80100f0 <etharp_tmr+0x10>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801012e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010132:	00da      	lsls	r2, r3, #3
 8010134:	4b0b      	ldr	r3, [pc, #44]	; (8010164 <etharp_tmr+0x84>)
 8010136:	4413      	add	r3, r2
 8010138:	1d19      	adds	r1, r3, #4
 801013a:	6898      	ldr	r0, [r3, #8]
 801013c:	f7ff ffc8 	bl	80100d0 <etharp_request>
 8010140:	e7d6      	b.n	80100f0 <etharp_tmr+0x10>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010142:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010146:	00da      	lsls	r2, r3, #3
 8010148:	4b06      	ldr	r3, [pc, #24]	; (8010164 <etharp_tmr+0x84>)
 801014a:	4413      	add	r3, r2
 801014c:	2204      	movs	r2, #4
 801014e:	751a      	strb	r2, [r3, #20]
 8010150:	e7ce      	b.n	80100f0 <etharp_tmr+0x10>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010152:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010156:	00da      	lsls	r2, r3, #3
 8010158:	4b02      	ldr	r3, [pc, #8]	; (8010164 <etharp_tmr+0x84>)
 801015a:	4413      	add	r3, r2
 801015c:	2202      	movs	r2, #2
 801015e:	751a      	strb	r2, [r3, #20]
 8010160:	e7c6      	b.n	80100f0 <etharp_tmr+0x10>
}
 8010162:	bd10      	pop	{r4, pc}
 8010164:	20000adc 	.word	0x20000adc

08010168 <etharp_output_to_arp_index>:
{
 8010168:	b570      	push	{r4, r5, r6, lr}
 801016a:	b082      	sub	sp, #8
 801016c:	4605      	mov	r5, r0
 801016e:	460e      	mov	r6, r1
 8010170:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010172:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010176:	4b2f      	ldr	r3, [pc, #188]	; (8010234 <etharp_output_to_arp_index+0xcc>)
 8010178:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801017c:	7d1b      	ldrb	r3, [r3, #20]
 801017e:	2b01      	cmp	r3, #1
 8010180:	d919      	bls.n	80101b6 <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010182:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010186:	4a2b      	ldr	r2, [pc, #172]	; (8010234 <etharp_output_to_arp_index+0xcc>)
 8010188:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801018c:	7d1b      	ldrb	r3, [r3, #20]
 801018e:	2b02      	cmp	r3, #2
 8010190:	d019      	beq.n	80101c6 <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010192:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010196:	00db      	lsls	r3, r3, #3
 8010198:	3308      	adds	r3, #8
 801019a:	4c26      	ldr	r4, [pc, #152]	; (8010234 <etharp_output_to_arp_index+0xcc>)
 801019c:	4423      	add	r3, r4
 801019e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80101a2:	9200      	str	r2, [sp, #0]
 80101a4:	3304      	adds	r3, #4
 80101a6:	f105 02d8 	add.w	r2, r5, #216	; 0xd8
 80101aa:	4631      	mov	r1, r6
 80101ac:	4628      	mov	r0, r5
 80101ae:	f005 fb55 	bl	801585c <ethernet_output>
}
 80101b2:	b002      	add	sp, #8
 80101b4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80101b6:	4b20      	ldr	r3, [pc, #128]	; (8010238 <etharp_output_to_arp_index+0xd0>)
 80101b8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80101bc:	491f      	ldr	r1, [pc, #124]	; (801023c <etharp_output_to_arp_index+0xd4>)
 80101be:	4820      	ldr	r0, [pc, #128]	; (8010240 <etharp_output_to_arp_index+0xd8>)
 80101c0:	f005 fbe6 	bl	8015990 <iprintf>
 80101c4:	e7dd      	b.n	8010182 <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80101c6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80101ca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80101ce:	8a5b      	ldrh	r3, [r3, #18]
 80101d0:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80101d4:	d81b      	bhi.n	801020e <etharp_output_to_arp_index+0xa6>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80101d6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80101da:	d3da      	bcc.n	8010192 <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80101dc:	4b15      	ldr	r3, [pc, #84]	; (8010234 <etharp_output_to_arp_index+0xcc>)
 80101de:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80101e2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80101e6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80101ea:	00d2      	lsls	r2, r2, #3
 80101ec:	3208      	adds	r2, #8
 80101ee:	441a      	add	r2, r3
 80101f0:	3204      	adds	r2, #4
 80101f2:	3104      	adds	r1, #4
 80101f4:	4628      	mov	r0, r5
 80101f6:	f7ff fed5 	bl	800ffa4 <etharp_request_dst>
 80101fa:	2800      	cmp	r0, #0
 80101fc:	d1c9      	bne.n	8010192 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80101fe:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010202:	4a0c      	ldr	r2, [pc, #48]	; (8010234 <etharp_output_to_arp_index+0xcc>)
 8010204:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010208:	2203      	movs	r2, #3
 801020a:	751a      	strb	r2, [r3, #20]
 801020c:	e7c1      	b.n	8010192 <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801020e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8010212:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8010216:	3104      	adds	r1, #4
 8010218:	4628      	mov	r0, r5
 801021a:	f7ff ff59 	bl	80100d0 <etharp_request>
 801021e:	2800      	cmp	r0, #0
 8010220:	d1b7      	bne.n	8010192 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010222:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8010226:	4a03      	ldr	r2, [pc, #12]	; (8010234 <etharp_output_to_arp_index+0xcc>)
 8010228:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801022c:	2203      	movs	r2, #3
 801022e:	751a      	strb	r2, [r3, #20]
 8010230:	e7af      	b.n	8010192 <etharp_output_to_arp_index+0x2a>
 8010232:	bf00      	nop
 8010234:	20000adc 	.word	0x20000adc
 8010238:	0801a0cc 	.word	0x0801a0cc
 801023c:	0801a218 	.word	0x0801a218
 8010240:	08016bb4 	.word	0x08016bb4

08010244 <etharp_query>:
{
 8010244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010248:	b083      	sub	sp, #12
 801024a:	4680      	mov	r8, r0
 801024c:	460e      	mov	r6, r1
 801024e:	4617      	mov	r7, r2
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010250:	f100 09d8 	add.w	r9, r0, #216	; 0xd8
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010254:	4601      	mov	r1, r0
 8010256:	6830      	ldr	r0, [r6, #0]
 8010258:	f000 feac 	bl	8010fb4 <ip4_addr_isbroadcast_u32>
 801025c:	2800      	cmp	r0, #0
 801025e:	f040 80ab 	bne.w	80103b8 <etharp_query+0x174>
      ip4_addr_ismulticast(ipaddr) ||
 8010262:	6833      	ldr	r3, [r6, #0]
 8010264:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010268:	2ae0      	cmp	r2, #224	; 0xe0
 801026a:	f000 80a8 	beq.w	80103be <etharp_query+0x17a>
      ip4_addr_ismulticast(ipaddr) ||
 801026e:	2e00      	cmp	r6, #0
 8010270:	f000 80a8 	beq.w	80103c4 <etharp_query+0x180>
      ip4_addr_isany(ipaddr)) {
 8010274:	2b00      	cmp	r3, #0
 8010276:	f000 80a8 	beq.w	80103ca <etharp_query+0x186>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801027a:	4642      	mov	r2, r8
 801027c:	2101      	movs	r1, #1
 801027e:	4630      	mov	r0, r6
 8010280:	f7ff fcde 	bl	800fc40 <etharp_find_entry>
  if (i_err < 0) {
 8010284:	1e05      	subs	r5, r0, #0
 8010286:	db13      	blt.n	80102b0 <etharp_query+0x6c>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010288:	b2ab      	uxth	r3, r5
 801028a:	2b7e      	cmp	r3, #126	; 0x7e
 801028c:	d812      	bhi.n	80102b4 <etharp_query+0x70>
  i = (netif_addr_idx_t)i_err;
 801028e:	b2ed      	uxtb	r5, r5
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010290:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8010294:	4b50      	ldr	r3, [pc, #320]	; (80103d8 <etharp_query+0x194>)
 8010296:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801029a:	7d1b      	ldrb	r3, [r3, #20]
 801029c:	b993      	cbnz	r3, 80102c4 <etharp_query+0x80>
    arp_table[i].state = ETHARP_STATE_PENDING;
 801029e:	4613      	mov	r3, r2
 80102a0:	4a4d      	ldr	r2, [pc, #308]	; (80103d8 <etharp_query+0x194>)
 80102a2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80102a6:	2401      	movs	r4, #1
 80102a8:	751c      	strb	r4, [r3, #20]
    arp_table[i].netif = netif;
 80102aa:	f8c3 8008 	str.w	r8, [r3, #8]
 80102ae:	e00a      	b.n	80102c6 <etharp_query+0x82>
    return (err_t)i_err;
 80102b0:	b26c      	sxtb	r4, r5
 80102b2:	e049      	b.n	8010348 <etharp_query+0x104>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80102b4:	4b49      	ldr	r3, [pc, #292]	; (80103dc <etharp_query+0x198>)
 80102b6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80102ba:	4949      	ldr	r1, [pc, #292]	; (80103e0 <etharp_query+0x19c>)
 80102bc:	4849      	ldr	r0, [pc, #292]	; (80103e4 <etharp_query+0x1a0>)
 80102be:	f005 fb67 	bl	8015990 <iprintf>
 80102c2:	e7e4      	b.n	801028e <etharp_query+0x4a>
  int is_new_entry = 0;
 80102c4:	2400      	movs	r4, #0
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80102c6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80102ca:	4a43      	ldr	r2, [pc, #268]	; (80103d8 <etharp_query+0x194>)
 80102cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80102d0:	7d1b      	ldrb	r3, [r3, #20]
 80102d2:	b183      	cbz	r3, 80102f6 <etharp_query+0xb2>
  if (is_new_entry || (q == NULL)) {
 80102d4:	b9bc      	cbnz	r4, 8010306 <etharp_query+0xc2>
 80102d6:	b1b7      	cbz	r7, 8010306 <etharp_query+0xc2>
  err_t result = ERR_MEM;
 80102d8:	f04f 34ff 	mov.w	r4, #4294967295
  LWIP_ASSERT("q != NULL", q != NULL);
 80102dc:	b1df      	cbz	r7, 8010316 <etharp_query+0xd2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80102de:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80102e2:	4a3d      	ldr	r2, [pc, #244]	; (80103d8 <etharp_query+0x194>)
 80102e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80102e8:	7d1b      	ldrb	r3, [r3, #20]
 80102ea:	2b01      	cmp	r3, #1
 80102ec:	d81b      	bhi.n	8010326 <etharp_query+0xe2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80102ee:	2b01      	cmp	r3, #1
 80102f0:	d12a      	bne.n	8010348 <etharp_query+0x104>
    p = q;
 80102f2:	463c      	mov	r4, r7
 80102f4:	e038      	b.n	8010368 <etharp_query+0x124>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80102f6:	4b39      	ldr	r3, [pc, #228]	; (80103dc <etharp_query+0x198>)
 80102f8:	f240 32cd 	movw	r2, #973	; 0x3cd
 80102fc:	493a      	ldr	r1, [pc, #232]	; (80103e8 <etharp_query+0x1a4>)
 80102fe:	4839      	ldr	r0, [pc, #228]	; (80103e4 <etharp_query+0x1a0>)
 8010300:	f005 fb46 	bl	8015990 <iprintf>
 8010304:	e7e6      	b.n	80102d4 <etharp_query+0x90>
    result = etharp_request(netif, ipaddr);
 8010306:	4631      	mov	r1, r6
 8010308:	4640      	mov	r0, r8
 801030a:	f7ff fee1 	bl	80100d0 <etharp_request>
 801030e:	4604      	mov	r4, r0
    if (q == NULL) {
 8010310:	2f00      	cmp	r7, #0
 8010312:	d1e3      	bne.n	80102dc <etharp_query+0x98>
 8010314:	e018      	b.n	8010348 <etharp_query+0x104>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010316:	4b31      	ldr	r3, [pc, #196]	; (80103dc <etharp_query+0x198>)
 8010318:	f240 32e1 	movw	r2, #993	; 0x3e1
 801031c:	4933      	ldr	r1, [pc, #204]	; (80103ec <etharp_query+0x1a8>)
 801031e:	4831      	ldr	r0, [pc, #196]	; (80103e4 <etharp_query+0x1a0>)
 8010320:	f005 fb36 	bl	8015990 <iprintf>
 8010324:	e7db      	b.n	80102de <etharp_query+0x9a>
    ETHARP_SET_ADDRHINT(netif, i);
 8010326:	4b32      	ldr	r3, [pc, #200]	; (80103f0 <etharp_query+0x1ac>)
 8010328:	701d      	strb	r5, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801032a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801032e:	00db      	lsls	r3, r3, #3
 8010330:	3308      	adds	r3, #8
 8010332:	4413      	add	r3, r2
 8010334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010338:	9200      	str	r2, [sp, #0]
 801033a:	3304      	adds	r3, #4
 801033c:	464a      	mov	r2, r9
 801033e:	4639      	mov	r1, r7
 8010340:	4640      	mov	r0, r8
 8010342:	f005 fa8b 	bl	801585c <ethernet_output>
 8010346:	4604      	mov	r4, r0
}
 8010348:	4620      	mov	r0, r4
 801034a:	b003      	add	sp, #12
 801034c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010350:	4b22      	ldr	r3, [pc, #136]	; (80103dc <etharp_query+0x198>)
 8010352:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010356:	4927      	ldr	r1, [pc, #156]	; (80103f4 <etharp_query+0x1b0>)
 8010358:	4822      	ldr	r0, [pc, #136]	; (80103e4 <etharp_query+0x1a0>)
 801035a:	f005 fb19 	bl	8015990 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801035e:	7b23      	ldrb	r3, [r4, #12]
 8010360:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010364:	d122      	bne.n	80103ac <etharp_query+0x168>
      p = p->next;
 8010366:	6824      	ldr	r4, [r4, #0]
    while (p) {
 8010368:	b13c      	cbz	r4, 801037a <etharp_query+0x136>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801036a:	8962      	ldrh	r2, [r4, #10]
 801036c:	8923      	ldrh	r3, [r4, #8]
 801036e:	429a      	cmp	r2, r3
 8010370:	d1f5      	bne.n	801035e <etharp_query+0x11a>
 8010372:	6823      	ldr	r3, [r4, #0]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d1eb      	bne.n	8010350 <etharp_query+0x10c>
 8010378:	e7f1      	b.n	801035e <etharp_query+0x11a>
    int copy_needed = 0;
 801037a:	2300      	movs	r3, #0
    if (copy_needed) {
 801037c:	b1c3      	cbz	r3, 80103b0 <etharp_query+0x16c>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801037e:	463a      	mov	r2, r7
 8010380:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010384:	200e      	movs	r0, #14
 8010386:	f7f8 f9f9 	bl	800877c <pbuf_clone>
 801038a:	4607      	mov	r7, r0
    if (p != NULL) {
 801038c:	b307      	cbz	r7, 80103d0 <etharp_query+0x18c>
      if (arp_table[i].q != NULL) {
 801038e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8010392:	4a11      	ldr	r2, [pc, #68]	; (80103d8 <etharp_query+0x194>)
 8010394:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010398:	b108      	cbz	r0, 801039e <etharp_query+0x15a>
        pbuf_free(arp_table[i].q);
 801039a:	f7f7 fea9 	bl	80080f0 <pbuf_free>
      arp_table[i].q = p;
 801039e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80103a2:	4a0d      	ldr	r2, [pc, #52]	; (80103d8 <etharp_query+0x194>)
 80103a4:	f842 7033 	str.w	r7, [r2, r3, lsl #3]
      result = ERR_OK;
 80103a8:	2400      	movs	r4, #0
 80103aa:	e7cd      	b.n	8010348 <etharp_query+0x104>
        copy_needed = 1;
 80103ac:	2301      	movs	r3, #1
 80103ae:	e7e5      	b.n	801037c <etharp_query+0x138>
      pbuf_ref(p);
 80103b0:	4638      	mov	r0, r7
 80103b2:	f7f8 f809 	bl	80083c8 <pbuf_ref>
 80103b6:	e7e9      	b.n	801038c <etharp_query+0x148>
    return ERR_ARG;
 80103b8:	f06f 040f 	mvn.w	r4, #15
 80103bc:	e7c4      	b.n	8010348 <etharp_query+0x104>
 80103be:	f06f 040f 	mvn.w	r4, #15
 80103c2:	e7c1      	b.n	8010348 <etharp_query+0x104>
 80103c4:	f06f 040f 	mvn.w	r4, #15
 80103c8:	e7be      	b.n	8010348 <etharp_query+0x104>
 80103ca:	f06f 040f 	mvn.w	r4, #15
 80103ce:	e7bb      	b.n	8010348 <etharp_query+0x104>
      result = ERR_MEM;
 80103d0:	f04f 34ff 	mov.w	r4, #4294967295
 80103d4:	e7b8      	b.n	8010348 <etharp_query+0x104>
 80103d6:	bf00      	nop
 80103d8:	20000adc 	.word	0x20000adc
 80103dc:	0801a0cc 	.word	0x0801a0cc
 80103e0:	0801a248 	.word	0x0801a248
 80103e4:	08016bb4 	.word	0x08016bb4
 80103e8:	0801a258 	.word	0x0801a258
 80103ec:	0801a280 	.word	0x0801a280
 80103f0:	20000bcc 	.word	0x20000bcc
 80103f4:	0801a28c 	.word	0x0801a28c

080103f8 <etharp_output>:
{
 80103f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103fa:	b085      	sub	sp, #20
 80103fc:	460f      	mov	r7, r1
 80103fe:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010400:	4606      	mov	r6, r0
 8010402:	2800      	cmp	r0, #0
 8010404:	d03d      	beq.n	8010482 <etharp_output+0x8a>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010406:	2f00      	cmp	r7, #0
 8010408:	d043      	beq.n	8010492 <etharp_output+0x9a>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801040a:	2d00      	cmp	r5, #0
 801040c:	d049      	beq.n	80104a2 <etharp_output+0xaa>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801040e:	4631      	mov	r1, r6
 8010410:	6828      	ldr	r0, [r5, #0]
 8010412:	f000 fdcf 	bl	8010fb4 <ip4_addr_isbroadcast_u32>
 8010416:	4603      	mov	r3, r0
 8010418:	2800      	cmp	r0, #0
 801041a:	f040 8081 	bne.w	8010520 <etharp_output+0x128>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801041e:	682a      	ldr	r2, [r5, #0]
 8010420:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
 8010424:	29e0      	cmp	r1, #224	; 0xe0
 8010426:	d044      	beq.n	80104b2 <etharp_output+0xba>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010428:	6871      	ldr	r1, [r6, #4]
 801042a:	69f0      	ldr	r0, [r6, #28]
 801042c:	4051      	eors	r1, r2
 801042e:	4201      	tst	r1, r0
 8010430:	d009      	beq.n	8010446 <etharp_output+0x4e>
        !ip4_addr_islinklocal(ipaddr)) {
 8010432:	b292      	uxth	r2, r2
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010434:	f64f 61a9 	movw	r1, #65193	; 0xfea9
 8010438:	428a      	cmp	r2, r1
 801043a:	d004      	beq.n	8010446 <etharp_output+0x4e>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801043c:	6b72      	ldr	r2, [r6, #52]	; 0x34
 801043e:	2a00      	cmp	r2, #0
 8010440:	d07a      	beq.n	8010538 <etharp_output+0x140>
            dst_addr = netif_ip4_gw(netif);
 8010442:	f106 0534 	add.w	r5, r6, #52	; 0x34
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010446:	4a3e      	ldr	r2, [pc, #248]	; (8010540 <etharp_output+0x148>)
 8010448:	7812      	ldrb	r2, [r2, #0]
 801044a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 801044e:	493d      	ldr	r1, [pc, #244]	; (8010544 <etharp_output+0x14c>)
 8010450:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8010454:	7d09      	ldrb	r1, [r1, #20]
 8010456:	2901      	cmp	r1, #1
 8010458:	d943      	bls.n	80104e2 <etharp_output+0xea>
            (arp_table[etharp_cached_entry].netif == netif) &&
 801045a:	4601      	mov	r1, r0
 801045c:	4839      	ldr	r0, [pc, #228]	; (8010544 <etharp_output+0x14c>)
 801045e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010462:	6889      	ldr	r1, [r1, #8]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010464:	42b1      	cmp	r1, r6
 8010466:	d13c      	bne.n	80104e2 <etharp_output+0xea>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010468:	682c      	ldr	r4, [r5, #0]
 801046a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801046e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010472:	6849      	ldr	r1, [r1, #4]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010474:	428c      	cmp	r4, r1
 8010476:	d134      	bne.n	80104e2 <etharp_output+0xea>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010478:	4639      	mov	r1, r7
 801047a:	4630      	mov	r0, r6
 801047c:	f7ff fe74 	bl	8010168 <etharp_output_to_arp_index>
 8010480:	e058      	b.n	8010534 <etharp_output+0x13c>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010482:	4b31      	ldr	r3, [pc, #196]	; (8010548 <etharp_output+0x150>)
 8010484:	f240 321e 	movw	r2, #798	; 0x31e
 8010488:	4930      	ldr	r1, [pc, #192]	; (801054c <etharp_output+0x154>)
 801048a:	4831      	ldr	r0, [pc, #196]	; (8010550 <etharp_output+0x158>)
 801048c:	f005 fa80 	bl	8015990 <iprintf>
 8010490:	e7b9      	b.n	8010406 <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010492:	4b2d      	ldr	r3, [pc, #180]	; (8010548 <etharp_output+0x150>)
 8010494:	f240 321f 	movw	r2, #799	; 0x31f
 8010498:	492e      	ldr	r1, [pc, #184]	; (8010554 <etharp_output+0x15c>)
 801049a:	482d      	ldr	r0, [pc, #180]	; (8010550 <etharp_output+0x158>)
 801049c:	f005 fa78 	bl	8015990 <iprintf>
 80104a0:	e7b3      	b.n	801040a <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80104a2:	4b29      	ldr	r3, [pc, #164]	; (8010548 <etharp_output+0x150>)
 80104a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80104a8:	492b      	ldr	r1, [pc, #172]	; (8010558 <etharp_output+0x160>)
 80104aa:	4829      	ldr	r0, [pc, #164]	; (8010550 <etharp_output+0x158>)
 80104ac:	f005 fa70 	bl	8015990 <iprintf>
 80104b0:	e7ad      	b.n	801040e <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80104b2:	2301      	movs	r3, #1
 80104b4:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80104b8:	2300      	movs	r3, #0
 80104ba:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80104be:	235e      	movs	r3, #94	; 0x5e
 80104c0:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80104c4:	786b      	ldrb	r3, [r5, #1]
 80104c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80104ca:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80104ce:	78ab      	ldrb	r3, [r5, #2]
 80104d0:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80104d4:	78eb      	ldrb	r3, [r5, #3]
 80104d6:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 80104da:	ab02      	add	r3, sp, #8
 80104dc:	e021      	b.n	8010522 <etharp_output+0x12a>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80104de:	3301      	adds	r3, #1
 80104e0:	b2db      	uxtb	r3, r3
 80104e2:	2b09      	cmp	r3, #9
 80104e4:	d816      	bhi.n	8010514 <etharp_output+0x11c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80104e6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80104ea:	4c16      	ldr	r4, [pc, #88]	; (8010544 <etharp_output+0x14c>)
 80104ec:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80104f0:	7d02      	ldrb	r2, [r0, #20]
 80104f2:	2a01      	cmp	r2, #1
 80104f4:	d9f3      	bls.n	80104de <etharp_output+0xe6>
          (arp_table[i].netif == netif) &&
 80104f6:	6882      	ldr	r2, [r0, #8]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80104f8:	42b2      	cmp	r2, r6
 80104fa:	d1f0      	bne.n	80104de <etharp_output+0xe6>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80104fc:	682a      	ldr	r2, [r5, #0]
 80104fe:	6841      	ldr	r1, [r0, #4]
          (arp_table[i].netif == netif) &&
 8010500:	428a      	cmp	r2, r1
 8010502:	d1ec      	bne.n	80104de <etharp_output+0xe6>
        ETHARP_SET_ADDRHINT(netif, i);
 8010504:	4a0e      	ldr	r2, [pc, #56]	; (8010540 <etharp_output+0x148>)
 8010506:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010508:	461a      	mov	r2, r3
 801050a:	4639      	mov	r1, r7
 801050c:	4630      	mov	r0, r6
 801050e:	f7ff fe2b 	bl	8010168 <etharp_output_to_arp_index>
 8010512:	e00f      	b.n	8010534 <etharp_output+0x13c>
    return etharp_query(netif, dst_addr, q);
 8010514:	463a      	mov	r2, r7
 8010516:	4629      	mov	r1, r5
 8010518:	4630      	mov	r0, r6
 801051a:	f7ff fe93 	bl	8010244 <etharp_query>
 801051e:	e009      	b.n	8010534 <etharp_output+0x13c>
    dest = (const struct eth_addr *)&ethbroadcast;
 8010520:	4b0e      	ldr	r3, [pc, #56]	; (801055c <etharp_output+0x164>)
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010526:	9200      	str	r2, [sp, #0]
 8010528:	f106 02d8 	add.w	r2, r6, #216	; 0xd8
 801052c:	4639      	mov	r1, r7
 801052e:	4630      	mov	r0, r6
 8010530:	f005 f994 	bl	801585c <ethernet_output>
}
 8010534:	b005      	add	sp, #20
 8010536:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ERR_RTE;
 8010538:	f06f 0003 	mvn.w	r0, #3
 801053c:	e7fa      	b.n	8010534 <etharp_output+0x13c>
 801053e:	bf00      	nop
 8010540:	20000bcc 	.word	0x20000bcc
 8010544:	20000adc 	.word	0x20000adc
 8010548:	0801a0cc 	.word	0x0801a0cc
 801054c:	08016ba4 	.word	0x08016ba4
 8010550:	08016bb4 	.word	0x08016bb4
 8010554:	0801a280 	.word	0x0801a280
 8010558:	0801a1f8 	.word	0x0801a1f8
 801055c:	0801aa74 	.word	0x0801aa74

08010560 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010564:	b086      	sub	sp, #24
 8010566:	4606      	mov	r6, r0
 8010568:	4688      	mov	r8, r1
 801056a:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801056c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010570:	2124      	movs	r1, #36	; 0x24
 8010572:	2036      	movs	r0, #54	; 0x36
 8010574:	f7f7 fe1e 	bl	80081b4 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8010578:	b3a0      	cbz	r0, 80105e4 <icmp_send_response+0x84>
 801057a:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801057c:	8943      	ldrh	r3, [r0, #10]
 801057e:	2b23      	cmp	r3, #35	; 0x23
 8010580:	d933      	bls.n	80105ea <icmp_send_response+0x8a>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010582:	f8d6 c004 	ldr.w	ip, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010586:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 8010588:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 801058c:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 801058e:	2300      	movs	r3, #0
 8010590:	7123      	strb	r3, [r4, #4]
 8010592:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8010594:	71a3      	strb	r3, [r4, #6]
 8010596:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010598:	686b      	ldr	r3, [r5, #4]
 801059a:	6872      	ldr	r2, [r6, #4]
 801059c:	6816      	ldr	r6, [r2, #0]
 801059e:	6850      	ldr	r0, [r2, #4]
 80105a0:	6891      	ldr	r1, [r2, #8]
 80105a2:	68d7      	ldr	r7, [r2, #12]
 80105a4:	609e      	str	r6, [r3, #8]
 80105a6:	60d8      	str	r0, [r3, #12]
 80105a8:	6119      	str	r1, [r3, #16]
 80105aa:	615f      	str	r7, [r3, #20]
 80105ac:	6916      	ldr	r6, [r2, #16]
 80105ae:	6950      	ldr	r0, [r2, #20]
 80105b0:	6991      	ldr	r1, [r2, #24]
 80105b2:	619e      	str	r6, [r3, #24]
 80105b4:	61d8      	str	r0, [r3, #28]
 80105b6:	6219      	str	r1, [r3, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80105b8:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80105bc:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80105be:	a805      	add	r0, sp, #20
 80105c0:	f000 faa4 	bl	8010b0c <ip4_route>
#endif
  if (netif != NULL) {
 80105c4:	b158      	cbz	r0, 80105de <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80105c6:	2100      	movs	r1, #0
 80105c8:	70a1      	strb	r1, [r4, #2]
 80105ca:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80105cc:	9002      	str	r0, [sp, #8]
 80105ce:	2301      	movs	r3, #1
 80105d0:	9301      	str	r3, [sp, #4]
 80105d2:	9100      	str	r1, [sp, #0]
 80105d4:	23ff      	movs	r3, #255	; 0xff
 80105d6:	aa05      	add	r2, sp, #20
 80105d8:	4628      	mov	r0, r5
 80105da:	f000 fcc9 	bl	8010f70 <ip4_output_if>
  }
  pbuf_free(q);
 80105de:	4628      	mov	r0, r5
 80105e0:	f7f7 fd86 	bl	80080f0 <pbuf_free>
}
 80105e4:	b006      	add	sp, #24
 80105e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80105ea:	4b04      	ldr	r3, [pc, #16]	; (80105fc <icmp_send_response+0x9c>)
 80105ec:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80105f0:	4903      	ldr	r1, [pc, #12]	; (8010600 <icmp_send_response+0xa0>)
 80105f2:	4804      	ldr	r0, [pc, #16]	; (8010604 <icmp_send_response+0xa4>)
 80105f4:	f005 f9cc 	bl	8015990 <iprintf>
 80105f8:	e7c3      	b.n	8010582 <icmp_send_response+0x22>
 80105fa:	bf00      	nop
 80105fc:	0801a2a8 	.word	0x0801a2a8
 8010600:	0801a2e0 	.word	0x0801a2e0
 8010604:	08016bb4 	.word	0x08016bb4

08010608 <icmp_input>:
{
 8010608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801060c:	b085      	sub	sp, #20
 801060e:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8010610:	4b4a      	ldr	r3, [pc, #296]	; (801073c <icmp_input+0x134>)
 8010612:	689f      	ldr	r7, [r3, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 8010614:	783b      	ldrb	r3, [r7, #0]
 8010616:	f003 030f 	and.w	r3, r3, #15
 801061a:	ea4f 0883 	mov.w	r8, r3, lsl #2
 801061e:	4644      	mov	r4, r8
  if (hlen < IP_HLEN) {
 8010620:	2c13      	cmp	r4, #19
 8010622:	d915      	bls.n	8010650 <icmp_input+0x48>
 8010624:	460e      	mov	r6, r1
  if (p->len < sizeof(u16_t) * 2) {
 8010626:	8943      	ldrh	r3, [r0, #10]
 8010628:	2b03      	cmp	r3, #3
 801062a:	d911      	bls.n	8010650 <icmp_input+0x48>
  type = *((u8_t *)p->payload);
 801062c:	6843      	ldr	r3, [r0, #4]
 801062e:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 8010630:	2b08      	cmp	r3, #8
 8010632:	d161      	bne.n	80106f8 <icmp_input+0xf0>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010634:	4b41      	ldr	r3, [pc, #260]	; (801073c <icmp_input+0x134>)
 8010636:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010638:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 801063c:	2be0      	cmp	r3, #224	; 0xe0
 801063e:	d01a      	beq.n	8010676 <icmp_input+0x6e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010640:	4b3e      	ldr	r3, [pc, #248]	; (801073c <icmp_input+0x134>)
 8010642:	6819      	ldr	r1, [r3, #0]
 8010644:	f000 fcb6 	bl	8010fb4 <ip4_addr_isbroadcast_u32>
 8010648:	b9a8      	cbnz	r0, 8010676 <icmp_input+0x6e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801064a:	892b      	ldrh	r3, [r5, #8]
 801064c:	2b07      	cmp	r3, #7
 801064e:	d805      	bhi.n	801065c <icmp_input+0x54>
  pbuf_free(p);
 8010650:	4628      	mov	r0, r5
 8010652:	f7f7 fd4d 	bl	80080f0 <pbuf_free>
}
 8010656:	b005      	add	sp, #20
 8010658:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801065c:	f108 090e 	add.w	r9, r8, #14
 8010660:	4649      	mov	r1, r9
 8010662:	4628      	mov	r0, r5
 8010664:	f7f7 fcf3 	bl	800804e <pbuf_add_header>
 8010668:	2800      	cmp	r0, #0
 801066a:	d03a      	beq.n	80106e2 <icmp_input+0xda>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801066c:	892a      	ldrh	r2, [r5, #8]
 801066e:	1913      	adds	r3, r2, r4
 8010670:	b299      	uxth	r1, r3
        if (alloc_len < p->tot_len) {
 8010672:	428a      	cmp	r2, r1
 8010674:	d903      	bls.n	801067e <icmp_input+0x76>
  pbuf_free(p);
 8010676:	4628      	mov	r0, r5
 8010678:	f7f7 fd3a 	bl	80080f0 <pbuf_free>
  return;
 801067c:	e7eb      	b.n	8010656 <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801067e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010682:	200e      	movs	r0, #14
 8010684:	f7f7 fd96 	bl	80081b4 <pbuf_alloc>
        if (r == NULL) {
 8010688:	4604      	mov	r4, r0
 801068a:	2800      	cmp	r0, #0
 801068c:	d0f3      	beq.n	8010676 <icmp_input+0x6e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801068e:	8942      	ldrh	r2, [r0, #10]
 8010690:	f108 0308 	add.w	r3, r8, #8
 8010694:	429a      	cmp	r2, r3
 8010696:	d313      	bcc.n	80106c0 <icmp_input+0xb8>
        MEMCPY(r->payload, iphdr_in, hlen);
 8010698:	4642      	mov	r2, r8
 801069a:	4639      	mov	r1, r7
 801069c:	6840      	ldr	r0, [r0, #4]
 801069e:	f005 f947 	bl	8015930 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 80106a2:	4641      	mov	r1, r8
 80106a4:	4620      	mov	r0, r4
 80106a6:	f7f7 fcdd 	bl	8008064 <pbuf_remove_header>
 80106aa:	b960      	cbnz	r0, 80106c6 <icmp_input+0xbe>
        if (pbuf_copy(r, p) != ERR_OK) {
 80106ac:	4629      	mov	r1, r5
 80106ae:	4620      	mov	r0, r4
 80106b0:	f7f7 fee4 	bl	800847c <pbuf_copy>
 80106b4:	b988      	cbnz	r0, 80106da <icmp_input+0xd2>
        pbuf_free(p);
 80106b6:	4628      	mov	r0, r5
 80106b8:	f7f7 fd1a 	bl	80080f0 <pbuf_free>
        p = r;
 80106bc:	4625      	mov	r5, r4
 80106be:	e015      	b.n	80106ec <icmp_input+0xe4>
          pbuf_free(r);
 80106c0:	f7f7 fd16 	bl	80080f0 <pbuf_free>
          goto icmperr;
 80106c4:	e7d7      	b.n	8010676 <icmp_input+0x6e>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80106c6:	4b1e      	ldr	r3, [pc, #120]	; (8010740 <icmp_input+0x138>)
 80106c8:	22b6      	movs	r2, #182	; 0xb6
 80106ca:	491e      	ldr	r1, [pc, #120]	; (8010744 <icmp_input+0x13c>)
 80106cc:	481e      	ldr	r0, [pc, #120]	; (8010748 <icmp_input+0x140>)
 80106ce:	f005 f95f 	bl	8015990 <iprintf>
          pbuf_free(r);
 80106d2:	4620      	mov	r0, r4
 80106d4:	f7f7 fd0c 	bl	80080f0 <pbuf_free>
          goto icmperr;
 80106d8:	e7cd      	b.n	8010676 <icmp_input+0x6e>
          pbuf_free(r);
 80106da:	4620      	mov	r0, r4
 80106dc:	f7f7 fd08 	bl	80080f0 <pbuf_free>
          goto icmperr;
 80106e0:	e7c9      	b.n	8010676 <icmp_input+0x6e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80106e2:	4649      	mov	r1, r9
 80106e4:	4628      	mov	r0, r5
 80106e6:	f7f7 fcbd 	bl	8008064 <pbuf_remove_header>
 80106ea:	b948      	cbnz	r0, 8010700 <icmp_input+0xf8>
      iecho = (struct icmp_echo_hdr *)p->payload;
 80106ec:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 80106ee:	4641      	mov	r1, r8
 80106f0:	4628      	mov	r0, r5
 80106f2:	f7f7 fcac 	bl	800804e <pbuf_add_header>
 80106f6:	b150      	cbz	r0, 801070e <icmp_input+0x106>
  pbuf_free(p);
 80106f8:	4628      	mov	r0, r5
 80106fa:	f7f7 fcf9 	bl	80080f0 <pbuf_free>
  return;
 80106fe:	e7aa      	b.n	8010656 <icmp_input+0x4e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010700:	4b0f      	ldr	r3, [pc, #60]	; (8010740 <icmp_input+0x138>)
 8010702:	22c7      	movs	r2, #199	; 0xc7
 8010704:	4911      	ldr	r1, [pc, #68]	; (801074c <icmp_input+0x144>)
 8010706:	4810      	ldr	r0, [pc, #64]	; (8010748 <icmp_input+0x140>)
 8010708:	f005 f942 	bl	8015990 <iprintf>
          goto icmperr;
 801070c:	e7b3      	b.n	8010676 <icmp_input+0x6e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801070e:	6868      	ldr	r0, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 8010710:	490a      	ldr	r1, [pc, #40]	; (801073c <icmp_input+0x134>)
 8010712:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8010714:	60c3      	str	r3, [r0, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010716:	694b      	ldr	r3, [r1, #20]
 8010718:	6103      	str	r3, [r0, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801071a:	2200      	movs	r2, #0
 801071c:	7022      	strb	r2, [r4, #0]
        iecho->chksum = 0;
 801071e:	70a2      	strb	r2, [r4, #2]
 8010720:	70e2      	strb	r2, [r4, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010722:	23ff      	movs	r3, #255	; 0xff
 8010724:	7203      	strb	r3, [r0, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010726:	7282      	strb	r2, [r0, #10]
 8010728:	72c2      	strb	r2, [r0, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801072a:	9602      	str	r6, [sp, #8]
 801072c:	2001      	movs	r0, #1
 801072e:	9001      	str	r0, [sp, #4]
 8010730:	9200      	str	r2, [sp, #0]
 8010732:	312c      	adds	r1, #44	; 0x2c
 8010734:	4628      	mov	r0, r5
 8010736:	f000 fc1b 	bl	8010f70 <ip4_output_if>
        if (ret != ERR_OK) {
 801073a:	e7dd      	b.n	80106f8 <icmp_input+0xf0>
 801073c:	20003e34 	.word	0x20003e34
 8010740:	0801a2a8 	.word	0x0801a2a8
 8010744:	0801a30c 	.word	0x0801a30c
 8010748:	08016bb4 	.word	0x08016bb4
 801074c:	0801a344 	.word	0x0801a344

08010750 <icmp_dest_unreach>:
{
 8010750:	b508      	push	{r3, lr}
 8010752:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8010754:	2103      	movs	r1, #3
 8010756:	f7ff ff03 	bl	8010560 <icmp_send_response>
}
 801075a:	bd08      	pop	{r3, pc}

0801075c <icmp_time_exceeded>:
{
 801075c:	b508      	push	{r3, lr}
 801075e:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 8010760:	210b      	movs	r1, #11
 8010762:	f7ff fefd 	bl	8010560 <icmp_send_response>
}
 8010766:	bd08      	pop	{r3, pc}

08010768 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 8010768:	b538      	push	{r3, r4, r5, lr}
 801076a:	4605      	mov	r5, r0
#ifdef LWIP_RAND
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 801076c:	2902      	cmp	r1, #2
 801076e:	d805      	bhi.n	801077c <igmp_start_timer+0x14>
 8010770:	2401      	movs	r4, #1
 8010772:	816c      	strh	r4, [r5, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
 8010774:	b90c      	cbnz	r4, 801077a <igmp_start_timer+0x12>
    group->timer = 1;
 8010776:	2301      	movs	r3, #1
 8010778:	816b      	strh	r3, [r5, #10]
  }
}
 801077a:	bd38      	pop	{r3, r4, r5, pc}
 801077c:	460c      	mov	r4, r1
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 801077e:	f005 f995 	bl	8015aac <rand>
 8010782:	fbb0 f1f4 	udiv	r1, r0, r4
 8010786:	fb04 0411 	mls	r4, r4, r1, r0
 801078a:	b2a4      	uxth	r4, r4
 801078c:	e7f1      	b.n	8010772 <igmp_start_timer+0xa>

0801078e <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 801078e:	b510      	push	{r4, lr}
 8010790:	4604      	mov	r4, r0
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8010792:	7a43      	ldrb	r3, [r0, #9]
 8010794:	2b02      	cmp	r3, #2
 8010796:	d007      	beq.n	80107a8 <igmp_delaying_member+0x1a>
 8010798:	2b01      	cmp	r3, #1
 801079a:	d000      	beq.n	801079e <igmp_delaying_member+0x10>
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
       ((group->timer == 0) || (maxresp < group->timer)))) {
    igmp_start_timer(group, maxresp);
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  }
}
 801079c:	bd10      	pop	{r4, pc}
       ((group->timer == 0) || (maxresp < group->timer)))) {
 801079e:	8943      	ldrh	r3, [r0, #10]
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 80107a0:	b113      	cbz	r3, 80107a8 <igmp_delaying_member+0x1a>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 80107a2:	b28a      	uxth	r2, r1
 80107a4:	4293      	cmp	r3, r2
 80107a6:	d9f9      	bls.n	801079c <igmp_delaying_member+0xe>
    igmp_start_timer(group, maxresp);
 80107a8:	4620      	mov	r0, r4
 80107aa:	f7ff ffdd 	bl	8010768 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 80107ae:	2301      	movs	r3, #1
 80107b0:	7263      	strb	r3, [r4, #9]
}
 80107b2:	e7f3      	b.n	801079c <igmp_delaying_member+0xe>

080107b4 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
 80107b4:	b530      	push	{r4, r5, lr}
 80107b6:	b089      	sub	sp, #36	; 0x24
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 80107b8:	f240 4494 	movw	r4, #1172	; 0x494
 80107bc:	f8ad 401c 	strh.w	r4, [sp, #28]
  ra[1] = 0x0000; /* Router shall examine packet */
 80107c0:	2400      	movs	r4, #0
 80107c2:	f8ad 401e 	strh.w	r4, [sp, #30]
  IGMP_STATS_INC(igmp.xmit);
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 80107c6:	2504      	movs	r5, #4
 80107c8:	9504      	str	r5, [sp, #16]
 80107ca:	ad07      	add	r5, sp, #28
 80107cc:	9503      	str	r5, [sp, #12]
 80107ce:	9302      	str	r3, [sp, #8]
 80107d0:	2302      	movs	r3, #2
 80107d2:	9301      	str	r3, [sp, #4]
 80107d4:	9400      	str	r4, [sp, #0]
 80107d6:	2301      	movs	r3, #1
 80107d8:	f000 fbb0 	bl	8010f3c <ip4_output_if_opt>
}
 80107dc:	b009      	add	sp, #36	; 0x24
 80107de:	bd30      	pop	{r4, r5, pc}

080107e0 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
 80107e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80107e4:	b083      	sub	sp, #12
 80107e6:	4605      	mov	r5, r0
 80107e8:	460e      	mov	r6, r1
 80107ea:	4614      	mov	r4, r2
  struct pbuf     *p    = NULL;
  struct igmp_msg *igmp = NULL;
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 80107ec:	4b27      	ldr	r3, [pc, #156]	; (801088c <igmp_send+0xac>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	9301      	str	r3, [sp, #4]
  ip4_addr_t  *dest = NULL;

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 80107f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80107f6:	2108      	movs	r1, #8
 80107f8:	204a      	movs	r0, #74	; 0x4a
 80107fa:	f7f7 fcdb 	bl	80081b4 <pbuf_alloc>

  if (p) {
 80107fe:	b1a8      	cbz	r0, 801082c <igmp_send+0x4c>
 8010800:	4607      	mov	r7, r0
    igmp = (struct igmp_msg *)p->payload;
 8010802:	f8d0 8004 	ldr.w	r8, [r0, #4]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 8010806:	8943      	ldrh	r3, [r0, #10]
 8010808:	2b07      	cmp	r3, #7
 801080a:	d912      	bls.n	8010832 <igmp_send+0x52>
                (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 801080c:	686b      	ldr	r3, [r5, #4]
 801080e:	9301      	str	r3, [sp, #4]

    if (type == IGMP_V2_MEMB_REPORT) {
 8010810:	2c16      	cmp	r4, #22
 8010812:	d016      	beq.n	8010842 <igmp_send+0x62>
      dest = &(group->group_address);
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
      group->last_reporter_flag = 1; /* Remember we were the last to report */
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 8010814:	2c17      	cmp	r4, #23
 8010816:	d01c      	beq.n	8010852 <igmp_send+0x72>
  ip4_addr_t  *dest = NULL;
 8010818:	f04f 0900 	mov.w	r9, #0
        dest = &allrouters;
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 801081c:	f1a4 0316 	sub.w	r3, r4, #22
 8010820:	b2db      	uxtb	r3, r3
 8010822:	2b01      	cmp	r3, #1
 8010824:	d91b      	bls.n	801085e <igmp_send+0x7e>
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);

      igmp_ip_output_if(p, &src, dest, netif);
    }

    pbuf_free(p);
 8010826:	4638      	mov	r0, r7
 8010828:	f7f7 fc62 	bl	80080f0 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 801082c:	b003      	add	sp, #12
 801082e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 8010832:	4b17      	ldr	r3, [pc, #92]	; (8010890 <igmp_send+0xb0>)
 8010834:	f240 3202 	movw	r2, #770	; 0x302
 8010838:	4916      	ldr	r1, [pc, #88]	; (8010894 <igmp_send+0xb4>)
 801083a:	4817      	ldr	r0, [pc, #92]	; (8010898 <igmp_send+0xb8>)
 801083c:	f005 f8a8 	bl	8015990 <iprintf>
 8010840:	e7e4      	b.n	801080c <igmp_send+0x2c>
      dest = &(group->group_address);
 8010842:	f106 0904 	add.w	r9, r6, #4
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8010846:	6873      	ldr	r3, [r6, #4]
 8010848:	f8c8 3004 	str.w	r3, [r8, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 801084c:	2301      	movs	r3, #1
 801084e:	7233      	strb	r3, [r6, #8]
 8010850:	e7e4      	b.n	801081c <igmp_send+0x3c>
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8010852:	6873      	ldr	r3, [r6, #4]
 8010854:	f8c8 3004 	str.w	r3, [r8, #4]
        dest = &allrouters;
 8010858:	f8df 9040 	ldr.w	r9, [pc, #64]	; 801089c <igmp_send+0xbc>
 801085c:	e7de      	b.n	801081c <igmp_send+0x3c>
      igmp->igmp_msgtype  = type;
 801085e:	f888 4000 	strb.w	r4, [r8]
      igmp->igmp_maxresp  = 0;
 8010862:	2300      	movs	r3, #0
 8010864:	f888 3001 	strb.w	r3, [r8, #1]
      igmp->igmp_checksum = 0;
 8010868:	f888 3002 	strb.w	r3, [r8, #2]
 801086c:	f888 3003 	strb.w	r3, [r8, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 8010870:	2108      	movs	r1, #8
 8010872:	4640      	mov	r0, r8
 8010874:	f7f6 fc66 	bl	8007144 <inet_chksum>
 8010878:	f8a8 0002 	strh.w	r0, [r8, #2]
      igmp_ip_output_if(p, &src, dest, netif);
 801087c:	462b      	mov	r3, r5
 801087e:	464a      	mov	r2, r9
 8010880:	a901      	add	r1, sp, #4
 8010882:	4638      	mov	r0, r7
 8010884:	f7ff ff96 	bl	80107b4 <igmp_ip_output_if>
 8010888:	e7cd      	b.n	8010826 <igmp_send+0x46>
 801088a:	bf00      	nop
 801088c:	0801a4d4 	.word	0x0801a4d4
 8010890:	0801a378 	.word	0x0801a378
 8010894:	0801a3b0 	.word	0x0801a3b0
 8010898:	08016bb4 	.word	0x08016bb4
 801089c:	20000bd0 	.word	0x20000bd0

080108a0 <igmp_timeout>:
{
 80108a0:	b508      	push	{r3, lr}
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 80108a2:	7a4b      	ldrb	r3, [r1, #9]
 80108a4:	2b01      	cmp	r3, #1
 80108a6:	d000      	beq.n	80108aa <igmp_timeout+0xa>
}
 80108a8:	bd08      	pop	{r3, pc}
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 80108aa:	684a      	ldr	r2, [r1, #4]
 80108ac:	4b04      	ldr	r3, [pc, #16]	; (80108c0 <igmp_timeout+0x20>)
 80108ae:	681b      	ldr	r3, [r3, #0]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d0f9      	beq.n	80108a8 <igmp_timeout+0x8>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 80108b4:	2302      	movs	r3, #2
 80108b6:	724b      	strb	r3, [r1, #9]
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 80108b8:	2216      	movs	r2, #22
 80108ba:	f7ff ff91 	bl	80107e0 <igmp_send>
}
 80108be:	e7f3      	b.n	80108a8 <igmp_timeout+0x8>
 80108c0:	20000bd4 	.word	0x20000bd4

080108c4 <igmp_init>:
  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 80108c4:	4b03      	ldr	r3, [pc, #12]	; (80108d4 <igmp_init+0x10>)
 80108c6:	4a04      	ldr	r2, [pc, #16]	; (80108d8 <igmp_init+0x14>)
 80108c8:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 80108ca:	4b04      	ldr	r3, [pc, #16]	; (80108dc <igmp_init+0x18>)
 80108cc:	f102 7280 	add.w	r2, r2, #16777216	; 0x1000000
 80108d0:	601a      	str	r2, [r3, #0]
}
 80108d2:	4770      	bx	lr
 80108d4:	20000bd4 	.word	0x20000bd4
 80108d8:	010000e0 	.word	0x010000e0
 80108dc:	20000bd0 	.word	0x20000bd0

080108e0 <igmp_report_groups>:
{
 80108e0:	b510      	push	{r4, lr}
  struct igmp_group *group = netif_igmp_data(netif);
 80108e2:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
  if (group != NULL) {
 80108e6:	b104      	cbz	r4, 80108ea <igmp_report_groups+0xa>
    group = group->next;
 80108e8:	6824      	ldr	r4, [r4, #0]
  while (group != NULL) {
 80108ea:	b12c      	cbz	r4, 80108f8 <igmp_report_groups+0x18>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 80108ec:	2105      	movs	r1, #5
 80108ee:	4620      	mov	r0, r4
 80108f0:	f7ff ff4d 	bl	801078e <igmp_delaying_member>
    group = group->next;
 80108f4:	6824      	ldr	r4, [r4, #0]
 80108f6:	e7f8      	b.n	80108ea <igmp_report_groups+0xa>
}
 80108f8:	bd10      	pop	{r4, pc}

080108fa <igmp_lookfor_group>:
  struct igmp_group *group = netif_igmp_data(ifp);
 80108fa:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
  while (group != NULL) {
 80108fe:	b128      	cbz	r0, 801090c <igmp_lookfor_group+0x12>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 8010900:	6842      	ldr	r2, [r0, #4]
 8010902:	680b      	ldr	r3, [r1, #0]
 8010904:	429a      	cmp	r2, r3
 8010906:	d001      	beq.n	801090c <igmp_lookfor_group+0x12>
    group = group->next;
 8010908:	6800      	ldr	r0, [r0, #0]
 801090a:	e7f8      	b.n	80108fe <igmp_lookfor_group+0x4>
}
 801090c:	4770      	bx	lr
	...

08010910 <igmp_lookup_group>:
{
 8010910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010912:	4604      	mov	r4, r0
 8010914:	460e      	mov	r6, r1
  struct igmp_group *list_head = netif_igmp_data(ifp);
 8010916:	f8d0 70cc 	ldr.w	r7, [r0, #204]	; 0xcc
  group = igmp_lookfor_group(ifp, addr);
 801091a:	f7ff ffee 	bl	80108fa <igmp_lookfor_group>
  if (group != NULL) {
 801091e:	4605      	mov	r5, r0
 8010920:	b108      	cbz	r0, 8010926 <igmp_lookup_group+0x16>
}
 8010922:	4628      	mov	r0, r5
 8010924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 8010926:	2006      	movs	r0, #6
 8010928:	f7f6 ff24 	bl	8007774 <memp_malloc>
  if (group != NULL) {
 801092c:	4605      	mov	r5, r0
 801092e:	2800      	cmp	r0, #0
 8010930:	d0f7      	beq.n	8010922 <igmp_lookup_group+0x12>
    ip4_addr_set(&(group->group_address), addr);
 8010932:	b186      	cbz	r6, 8010956 <igmp_lookup_group+0x46>
 8010934:	6833      	ldr	r3, [r6, #0]
 8010936:	606b      	str	r3, [r5, #4]
    group->timer              = 0; /* Not running */
 8010938:	2300      	movs	r3, #0
 801093a:	816b      	strh	r3, [r5, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 801093c:	726b      	strb	r3, [r5, #9]
    group->last_reporter_flag = 0;
 801093e:	722b      	strb	r3, [r5, #8]
    group->use                = 0;
 8010940:	732b      	strb	r3, [r5, #12]
    if (list_head == NULL) {
 8010942:	b157      	cbz	r7, 801095a <igmp_lookup_group+0x4a>
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 8010944:	6832      	ldr	r2, [r6, #0]
 8010946:	4b12      	ldr	r3, [pc, #72]	; (8010990 <igmp_lookup_group+0x80>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	429a      	cmp	r2, r3
 801094c:	d017      	beq.n	801097e <igmp_lookup_group+0x6e>
      group->next = list_head->next;
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	602b      	str	r3, [r5, #0]
      list_head->next = group;
 8010952:	603d      	str	r5, [r7, #0]
 8010954:	e7e5      	b.n	8010922 <igmp_lookup_group+0x12>
    ip4_addr_set(&(group->group_address), addr);
 8010956:	2300      	movs	r3, #0
 8010958:	e7ed      	b.n	8010936 <igmp_lookup_group+0x26>
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 801095a:	6832      	ldr	r2, [r6, #0]
 801095c:	4b0c      	ldr	r3, [pc, #48]	; (8010990 <igmp_lookup_group+0x80>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	429a      	cmp	r2, r3
 8010962:	d104      	bne.n	801096e <igmp_lookup_group+0x5e>
      group->next = NULL;
 8010964:	2300      	movs	r3, #0
 8010966:	602b      	str	r3, [r5, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 8010968:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
 801096c:	e7d9      	b.n	8010922 <igmp_lookup_group+0x12>
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 801096e:	4b09      	ldr	r3, [pc, #36]	; (8010994 <igmp_lookup_group+0x84>)
 8010970:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8010974:	4908      	ldr	r1, [pc, #32]	; (8010998 <igmp_lookup_group+0x88>)
 8010976:	4809      	ldr	r0, [pc, #36]	; (801099c <igmp_lookup_group+0x8c>)
 8010978:	f005 f80a 	bl	8015990 <iprintf>
 801097c:	e7f2      	b.n	8010964 <igmp_lookup_group+0x54>
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 801097e:	4b05      	ldr	r3, [pc, #20]	; (8010994 <igmp_lookup_group+0x84>)
 8010980:	f44f 7289 	mov.w	r2, #274	; 0x112
 8010984:	4906      	ldr	r1, [pc, #24]	; (80109a0 <igmp_lookup_group+0x90>)
 8010986:	4805      	ldr	r0, [pc, #20]	; (801099c <igmp_lookup_group+0x8c>)
 8010988:	f005 f802 	bl	8015990 <iprintf>
 801098c:	e7df      	b.n	801094e <igmp_lookup_group+0x3e>
 801098e:	bf00      	nop
 8010990:	20000bd4 	.word	0x20000bd4
 8010994:	0801a378 	.word	0x0801a378
 8010998:	0801a3ec 	.word	0x0801a3ec
 801099c:	08016bb4 	.word	0x08016bb4
 80109a0:	0801a420 	.word	0x0801a420

080109a4 <igmp_start>:
{
 80109a4:	b510      	push	{r4, lr}
 80109a6:	4604      	mov	r4, r0
  group = igmp_lookup_group(netif, &allsystems);
 80109a8:	490a      	ldr	r1, [pc, #40]	; (80109d4 <igmp_start+0x30>)
 80109aa:	f7ff ffb1 	bl	8010910 <igmp_lookup_group>
  if (group != NULL) {
 80109ae:	b168      	cbz	r0, 80109cc <igmp_start+0x28>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 80109b0:	2202      	movs	r2, #2
 80109b2:	7242      	strb	r2, [r0, #9]
    group->use++;
 80109b4:	7b02      	ldrb	r2, [r0, #12]
 80109b6:	3201      	adds	r2, #1
 80109b8:	7302      	strb	r2, [r0, #12]
    if (netif->igmp_mac_filter != NULL) {
 80109ba:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80109be:	b11b      	cbz	r3, 80109c8 <igmp_start+0x24>
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 80109c0:	2201      	movs	r2, #1
 80109c2:	4904      	ldr	r1, [pc, #16]	; (80109d4 <igmp_start+0x30>)
 80109c4:	4620      	mov	r0, r4
 80109c6:	4798      	blx	r3
    return ERR_OK;
 80109c8:	2000      	movs	r0, #0
}
 80109ca:	bd10      	pop	{r4, pc}
  return ERR_MEM;
 80109cc:	f04f 30ff 	mov.w	r0, #4294967295
 80109d0:	e7fb      	b.n	80109ca <igmp_start+0x26>
 80109d2:	bf00      	nop
 80109d4:	20000bd4 	.word	0x20000bd4

080109d8 <igmp_input>:
{
 80109d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109da:	b083      	sub	sp, #12
 80109dc:	4604      	mov	r4, r0
 80109de:	460f      	mov	r7, r1
  if (p->len < IGMP_MINLEN) {
 80109e0:	8941      	ldrh	r1, [r0, #10]
 80109e2:	2907      	cmp	r1, #7
 80109e4:	d915      	bls.n	8010a12 <igmp_input+0x3a>
 80109e6:	4615      	mov	r5, r2
  igmp = (struct igmp_msg *)p->payload;
 80109e8:	6846      	ldr	r6, [r0, #4]
  if (inet_chksum(igmp, p->len)) {
 80109ea:	4630      	mov	r0, r6
 80109ec:	f7f6 fbaa 	bl	8007144 <inet_chksum>
 80109f0:	b990      	cbnz	r0, 8010a18 <igmp_input+0x40>
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 80109f2:	4629      	mov	r1, r5
 80109f4:	4638      	mov	r0, r7
 80109f6:	f7ff ff80 	bl	80108fa <igmp_lookfor_group>
  if (!group) {
 80109fa:	4602      	mov	r2, r0
 80109fc:	b180      	cbz	r0, 8010a20 <igmp_input+0x48>
  switch (igmp->igmp_msgtype) {
 80109fe:	7833      	ldrb	r3, [r6, #0]
 8010a00:	2b11      	cmp	r3, #17
 8010a02:	d011      	beq.n	8010a28 <igmp_input+0x50>
 8010a04:	2b16      	cmp	r3, #22
 8010a06:	d040      	beq.n	8010a8a <igmp_input+0xb2>
  pbuf_free(p);
 8010a08:	4620      	mov	r0, r4
 8010a0a:	f7f7 fb71 	bl	80080f0 <pbuf_free>
}
 8010a0e:	b003      	add	sp, #12
 8010a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pbuf_free(p);
 8010a12:	f7f7 fb6d 	bl	80080f0 <pbuf_free>
    return;
 8010a16:	e7fa      	b.n	8010a0e <igmp_input+0x36>
    pbuf_free(p);
 8010a18:	4620      	mov	r0, r4
 8010a1a:	f7f7 fb69 	bl	80080f0 <pbuf_free>
    return;
 8010a1e:	e7f6      	b.n	8010a0e <igmp_input+0x36>
    pbuf_free(p);
 8010a20:	4620      	mov	r0, r4
 8010a22:	f7f7 fb65 	bl	80080f0 <pbuf_free>
    return;
 8010a26:	e7f2      	b.n	8010a0e <igmp_input+0x36>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8010a28:	6829      	ldr	r1, [r5, #0]
 8010a2a:	4b1c      	ldr	r3, [pc, #112]	; (8010a9c <igmp_input+0xc4>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	4299      	cmp	r1, r3
 8010a30:	d00e      	beq.n	8010a50 <igmp_input+0x78>
        if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 8010a32:	f116 0f04 	cmn.w	r6, #4
 8010a36:	d0e7      	beq.n	8010a08 <igmp_input+0x30>
 8010a38:	6870      	ldr	r0, [r6, #4]
 8010a3a:	2800      	cmp	r0, #0
 8010a3c:	d0e4      	beq.n	8010a08 <igmp_input+0x30>
          if (ip4_addr_cmp(dest, &allsystems)) {
 8010a3e:	4299      	cmp	r1, r3
 8010a40:	d01c      	beq.n	8010a7c <igmp_input+0xa4>
          if (group != NULL) {
 8010a42:	2a00      	cmp	r2, #0
 8010a44:	d0e0      	beq.n	8010a08 <igmp_input+0x30>
            igmp_delaying_member(group, igmp->igmp_maxresp);
 8010a46:	7871      	ldrb	r1, [r6, #1]
 8010a48:	4610      	mov	r0, r2
 8010a4a:	f7ff fea0 	bl	801078e <igmp_delaying_member>
 8010a4e:	e7db      	b.n	8010a08 <igmp_input+0x30>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8010a50:	f116 0f04 	cmn.w	r6, #4
 8010a54:	d002      	beq.n	8010a5c <igmp_input+0x84>
 8010a56:	6870      	ldr	r0, [r6, #4]
 8010a58:	2800      	cmp	r0, #0
 8010a5a:	d1ea      	bne.n	8010a32 <igmp_input+0x5a>
        if (igmp->igmp_maxresp == 0) {
 8010a5c:	7873      	ldrb	r3, [r6, #1]
 8010a5e:	b90b      	cbnz	r3, 8010a64 <igmp_input+0x8c>
          igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 8010a60:	230a      	movs	r3, #10
 8010a62:	7073      	strb	r3, [r6, #1]
        groupref = netif_igmp_data(inp);
 8010a64:	f8d7 50cc 	ldr.w	r5, [r7, #204]	; 0xcc
        if (groupref != NULL) {
 8010a68:	b105      	cbz	r5, 8010a6c <igmp_input+0x94>
          groupref = groupref->next;
 8010a6a:	682d      	ldr	r5, [r5, #0]
        while (groupref) {
 8010a6c:	2d00      	cmp	r5, #0
 8010a6e:	d0cb      	beq.n	8010a08 <igmp_input+0x30>
          igmp_delaying_member(groupref, igmp->igmp_maxresp);
 8010a70:	7871      	ldrb	r1, [r6, #1]
 8010a72:	4628      	mov	r0, r5
 8010a74:	f7ff fe8b 	bl	801078e <igmp_delaying_member>
          groupref = groupref->next;
 8010a78:	682d      	ldr	r5, [r5, #0]
 8010a7a:	e7f7      	b.n	8010a6c <igmp_input+0x94>
            ip4_addr_copy(groupaddr, igmp->igmp_group_address);
 8010a7c:	9001      	str	r0, [sp, #4]
            group = igmp_lookfor_group(inp, &groupaddr);
 8010a7e:	a901      	add	r1, sp, #4
 8010a80:	4638      	mov	r0, r7
 8010a82:	f7ff ff3a 	bl	80108fa <igmp_lookfor_group>
 8010a86:	4602      	mov	r2, r0
 8010a88:	e7db      	b.n	8010a42 <igmp_input+0x6a>
      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 8010a8a:	7a43      	ldrb	r3, [r0, #9]
 8010a8c:	2b01      	cmp	r3, #1
 8010a8e:	d1bb      	bne.n	8010a08 <igmp_input+0x30>
        group->timer = 0; /* stopped */
 8010a90:	2300      	movs	r3, #0
 8010a92:	8143      	strh	r3, [r0, #10]
        group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8010a94:	2102      	movs	r1, #2
 8010a96:	7241      	strb	r1, [r0, #9]
        group->last_reporter_flag = 0;
 8010a98:	7203      	strb	r3, [r0, #8]
 8010a9a:	e7b5      	b.n	8010a08 <igmp_input+0x30>
 8010a9c:	20000bd4 	.word	0x20000bd4

08010aa0 <igmp_tmr>:
{
 8010aa0:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8010aa2:	4b0c      	ldr	r3, [pc, #48]	; (8010ad4 <igmp_tmr+0x34>)
 8010aa4:	681d      	ldr	r5, [r3, #0]
 8010aa6:	e00f      	b.n	8010ac8 <igmp_tmr+0x28>
          igmp_timeout(netif, group);
 8010aa8:	4621      	mov	r1, r4
 8010aaa:	4628      	mov	r0, r5
 8010aac:	f7ff fef8 	bl	80108a0 <igmp_timeout>
      group = group->next;
 8010ab0:	6824      	ldr	r4, [r4, #0]
    while (group != NULL) {
 8010ab2:	b144      	cbz	r4, 8010ac6 <igmp_tmr+0x26>
      if (group->timer > 0) {
 8010ab4:	8963      	ldrh	r3, [r4, #10]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d0fa      	beq.n	8010ab0 <igmp_tmr+0x10>
        group->timer--;
 8010aba:	3b01      	subs	r3, #1
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	8163      	strh	r3, [r4, #10]
        if (group->timer == 0) {
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d1f5      	bne.n	8010ab0 <igmp_tmr+0x10>
 8010ac4:	e7f0      	b.n	8010aa8 <igmp_tmr+0x8>
  NETIF_FOREACH(netif) {
 8010ac6:	682d      	ldr	r5, [r5, #0]
 8010ac8:	b115      	cbz	r5, 8010ad0 <igmp_tmr+0x30>
    struct igmp_group *group = netif_igmp_data(netif);
 8010aca:	f8d5 40cc 	ldr.w	r4, [r5, #204]	; 0xcc
    while (group != NULL) {
 8010ace:	e7f0      	b.n	8010ab2 <igmp_tmr+0x12>
}
 8010ad0:	bd38      	pop	{r3, r4, r5, pc}
 8010ad2:	bf00      	nop
 8010ad4:	20007f9c 	.word	0x20007f9c

08010ad8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010ad8:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010ada:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 8010ade:	f013 0f01 	tst.w	r3, #1
 8010ae2:	d00d      	beq.n	8010b00 <ip4_input_accept+0x28>
 8010ae4:	4601      	mov	r1, r0
 8010ae6:	6843      	ldr	r3, [r0, #4]
 8010ae8:	b163      	cbz	r3, 8010b04 <ip4_input_accept+0x2c>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010aea:	4a07      	ldr	r2, [pc, #28]	; (8010b08 <ip4_input_accept+0x30>)
 8010aec:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8010aee:	4283      	cmp	r3, r0
 8010af0:	d004      	beq.n	8010afc <ip4_input_accept+0x24>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010af2:	f000 fa5f 	bl	8010fb4 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010af6:	b908      	cbnz	r0, 8010afc <ip4_input_accept+0x24>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010af8:	2000      	movs	r0, #0
 8010afa:	e002      	b.n	8010b02 <ip4_input_accept+0x2a>
      return 1;
 8010afc:	2001      	movs	r0, #1
 8010afe:	e000      	b.n	8010b02 <ip4_input_accept+0x2a>
  return 0;
 8010b00:	2000      	movs	r0, #0
}
 8010b02:	bd08      	pop	{r3, pc}
  return 0;
 8010b04:	2000      	movs	r0, #0
 8010b06:	e7fc      	b.n	8010b02 <ip4_input_accept+0x2a>
 8010b08:	20003e34 	.word	0x20003e34

08010b0c <ip4_route>:
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 8010b0c:	6801      	ldr	r1, [r0, #0]
 8010b0e:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
 8010b12:	2be0      	cmp	r3, #224	; 0xe0
 8010b14:	d002      	beq.n	8010b1c <ip4_route+0x10>
  NETIF_FOREACH(netif) {
 8010b16:	4b29      	ldr	r3, [pc, #164]	; (8010bbc <ip4_route+0xb0>)
 8010b18:	6818      	ldr	r0, [r3, #0]
 8010b1a:	e02f      	b.n	8010b7c <ip4_route+0x70>
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 8010b1c:	4b28      	ldr	r3, [pc, #160]	; (8010bc0 <ip4_route+0xb4>)
 8010b1e:	6818      	ldr	r0, [r3, #0]
 8010b20:	2800      	cmp	r0, #0
 8010b22:	d0f8      	beq.n	8010b16 <ip4_route+0xa>
}
 8010b24:	4770      	bx	lr
  NETIF_FOREACH(netif) {
 8010b26:	6800      	ldr	r0, [r0, #0]
 8010b28:	b1a8      	cbz	r0, 8010b56 <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010b2a:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 8010b2e:	f013 0f01 	tst.w	r3, #1
 8010b32:	d0f8      	beq.n	8010b26 <ip4_route+0x1a>
 8010b34:	f013 0f04 	tst.w	r3, #4
 8010b38:	d0f5      	beq.n	8010b26 <ip4_route+0x1a>
 8010b3a:	6842      	ldr	r2, [r0, #4]
 8010b3c:	2a00      	cmp	r2, #0
 8010b3e:	d0f2      	beq.n	8010b26 <ip4_route+0x1a>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010b40:	69c4      	ldr	r4, [r0, #28]
 8010b42:	404a      	eors	r2, r1
 8010b44:	4222      	tst	r2, r4
 8010b46:	d015      	beq.n	8010b74 <ip4_route+0x68>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010b48:	f013 0f02 	tst.w	r3, #2
 8010b4c:	d1eb      	bne.n	8010b26 <ip4_route+0x1a>
 8010b4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010b50:	4299      	cmp	r1, r3
 8010b52:	d1e8      	bne.n	8010b26 <ip4_route+0x1a>
 8010b54:	e00e      	b.n	8010b74 <ip4_route+0x68>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010b56:	4b1b      	ldr	r3, [pc, #108]	; (8010bc4 <ip4_route+0xb8>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	b15b      	cbz	r3, 8010b74 <ip4_route+0x68>
 8010b5c:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
 8010b60:	f002 0205 	and.w	r2, r2, #5
 8010b64:	2a05      	cmp	r2, #5
 8010b66:	d105      	bne.n	8010b74 <ip4_route+0x68>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010b68:	685a      	ldr	r2, [r3, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010b6a:	b11a      	cbz	r2, 8010b74 <ip4_route+0x68>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010b6c:	b2c9      	uxtb	r1, r1
 8010b6e:	297f      	cmp	r1, #127	; 0x7f
 8010b70:	d000      	beq.n	8010b74 <ip4_route+0x68>
  return netif_default;
 8010b72:	4618      	mov	r0, r3
}
 8010b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b78:	4770      	bx	lr
  NETIF_FOREACH(netif) {
 8010b7a:	6800      	ldr	r0, [r0, #0]
 8010b7c:	b160      	cbz	r0, 8010b98 <ip4_route+0x8c>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010b7e:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 8010b82:	f013 0f01 	tst.w	r3, #1
 8010b86:	d0f8      	beq.n	8010b7a <ip4_route+0x6e>
 8010b88:	f013 0f04 	tst.w	r3, #4
 8010b8c:	d0f5      	beq.n	8010b7a <ip4_route+0x6e>
 8010b8e:	6842      	ldr	r2, [r0, #4]
 8010b90:	2a00      	cmp	r2, #0
 8010b92:	d0f2      	beq.n	8010b7a <ip4_route+0x6e>
{
 8010b94:	b410      	push	{r4}
 8010b96:	e7d3      	b.n	8010b40 <ip4_route+0x34>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010b98:	4b0a      	ldr	r3, [pc, #40]	; (8010bc4 <ip4_route+0xb8>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d0c1      	beq.n	8010b24 <ip4_route+0x18>
 8010ba0:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
 8010ba4:	f002 0205 	and.w	r2, r2, #5
 8010ba8:	2a05      	cmp	r2, #5
 8010baa:	d1bb      	bne.n	8010b24 <ip4_route+0x18>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010bac:	685a      	ldr	r2, [r3, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010bae:	2a00      	cmp	r2, #0
 8010bb0:	d0b8      	beq.n	8010b24 <ip4_route+0x18>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010bb2:	b2c9      	uxtb	r1, r1
 8010bb4:	297f      	cmp	r1, #127	; 0x7f
 8010bb6:	d0b5      	beq.n	8010b24 <ip4_route+0x18>
  return netif_default;
 8010bb8:	4618      	mov	r0, r3
 8010bba:	4770      	bx	lr
 8010bbc:	20007f9c 	.word	0x20007f9c
 8010bc0:	20000bd8 	.word	0x20000bd8
 8010bc4:	20007fa0 	.word	0x20007fa0

08010bc8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bcc:	4604      	mov	r4, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010bce:	6847      	ldr	r7, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 8010bd0:	783b      	ldrb	r3, [r7, #0]
 8010bd2:	091a      	lsrs	r2, r3, #4
 8010bd4:	2a04      	cmp	r2, #4
 8010bd6:	d004      	beq.n	8010be2 <ip4_input+0x1a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010bd8:	f7f7 fa8a 	bl	80080f0 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8010bdc:	2000      	movs	r0, #0
 8010bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010be2:	460e      	mov	r6, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010be4:	f003 030f 	and.w	r3, r3, #15
 8010be8:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8010bec:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010bee:	8878      	ldrh	r0, [r7, #2]
 8010bf0:	f7f5 ff44 	bl	8006a7c <lwip_htons>
 8010bf4:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 8010bf6:	8923      	ldrh	r3, [r4, #8]
 8010bf8:	4283      	cmp	r3, r0
 8010bfa:	d859      	bhi.n	8010cb0 <ip4_input+0xe8>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010bfc:	8963      	ldrh	r3, [r4, #10]
 8010bfe:	42ab      	cmp	r3, r5
 8010c00:	d35b      	bcc.n	8010cba <ip4_input+0xf2>
 8010c02:	8923      	ldrh	r3, [r4, #8]
 8010c04:	4543      	cmp	r3, r8
 8010c06:	d358      	bcc.n	8010cba <ip4_input+0xf2>
 8010c08:	2d13      	cmp	r5, #19
 8010c0a:	d956      	bls.n	8010cba <ip4_input+0xf2>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010c0c:	6939      	ldr	r1, [r7, #16]
 8010c0e:	4b71      	ldr	r3, [pc, #452]	; (8010dd4 <ip4_input+0x20c>)
 8010c10:	62d9      	str	r1, [r3, #44]	; 0x2c
 8010c12:	2200      	movs	r2, #0
 8010c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010c18:	639a      	str	r2, [r3, #56]	; 0x38
 8010c1a:	635a      	str	r2, [r3, #52]	; 0x34
 8010c1c:	631a      	str	r2, [r3, #48]	; 0x30
 8010c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010c22:	68f8      	ldr	r0, [r7, #12]
 8010c24:	6158      	str	r0, [r3, #20]
 8010c26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8010c2a:	621a      	str	r2, [r3, #32]
 8010c2c:	61da      	str	r2, [r3, #28]
 8010c2e:	619a      	str	r2, [r3, #24]
 8010c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010c34:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8010c38:	29e0      	cmp	r1, #224	; 0xe0
 8010c3a:	d157      	bne.n	8010cec <ip4_input+0x124>
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 8010c3c:	f896 30df 	ldrb.w	r3, [r6, #223]	; 0xdf
 8010c40:	f013 0f20 	tst.w	r3, #32
 8010c44:	d13d      	bne.n	8010cc2 <ip4_input+0xfa>
      netif = NULL;
 8010c46:	2500      	movs	r5, #0
  int check_ip_src = 1;
 8010c48:	2301      	movs	r3, #1
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8010c4a:	7a7a      	ldrb	r2, [r7, #9]
 8010c4c:	2a11      	cmp	r2, #17
 8010c4e:	d070      	beq.n	8010d32 <ip4_input+0x16a>
  if (check_ip_src
 8010c50:	b11b      	cbz	r3, 8010c5a <ip4_input+0x92>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8010c52:	4b60      	ldr	r3, [pc, #384]	; (8010dd4 <ip4_input+0x20c>)
 8010c54:	6958      	ldr	r0, [r3, #20]
 8010c56:	2800      	cmp	r0, #0
 8010c58:	d173      	bne.n	8010d42 <ip4_input+0x17a>
  if (netif == NULL) {
 8010c5a:	2d00      	cmp	r5, #0
 8010c5c:	d07f      	beq.n	8010d5e <ip4_input+0x196>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010c5e:	88fb      	ldrh	r3, [r7, #6]
 8010c60:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010c64:	b29b      	uxth	r3, r3
 8010c66:	b133      	cbz	r3, 8010c76 <ip4_input+0xae>
    p = ip4_reass(p);
 8010c68:	4620      	mov	r0, r4
 8010c6a:	f000 fbf9 	bl	8011460 <ip4_reass>
    if (p == NULL) {
 8010c6e:	4604      	mov	r4, r0
 8010c70:	2800      	cmp	r0, #0
 8010c72:	d0b3      	beq.n	8010bdc <ip4_input+0x14>
    iphdr = (const struct ip_hdr *)p->payload;
 8010c74:	6847      	ldr	r7, [r0, #4]
  ip_data.current_netif = netif;
 8010c76:	4a57      	ldr	r2, [pc, #348]	; (8010dd4 <ip4_input+0x20c>)
 8010c78:	6015      	str	r5, [r2, #0]
  ip_data.current_input_netif = inp;
 8010c7a:	6056      	str	r6, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010c7c:	6097      	str	r7, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010c7e:	783b      	ldrb	r3, [r7, #0]
 8010c80:	f003 030f 	and.w	r3, r3, #15
 8010c84:	009b      	lsls	r3, r3, #2
 8010c86:	8213      	strh	r3, [r2, #16]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010c88:	4649      	mov	r1, r9
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	f7f7 f9ea 	bl	8008064 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 8010c90:	7a7b      	ldrb	r3, [r7, #9]
 8010c92:	3b01      	subs	r3, #1
 8010c94:	2b10      	cmp	r3, #16
 8010c96:	f200 8083 	bhi.w	8010da0 <ip4_input+0x1d8>
 8010c9a:	e8df f003 	tbb	[pc, r3]
 8010c9e:	7b76      	.short	0x7b76
 8010ca0:	71818181 	.word	0x71818181
 8010ca4:	81818181 	.word	0x81818181
 8010ca8:	81818181 	.word	0x81818181
 8010cac:	8181      	.short	0x8181
 8010cae:	64          	.byte	0x64
 8010caf:	00          	.byte	0x00
    pbuf_realloc(p, iphdr_len);
 8010cb0:	4601      	mov	r1, r0
 8010cb2:	4620      	mov	r0, r4
 8010cb4:	f7f7 fb2c 	bl	8008310 <pbuf_realloc>
 8010cb8:	e7a0      	b.n	8010bfc <ip4_input+0x34>
    pbuf_free(p);
 8010cba:	4620      	mov	r0, r4
 8010cbc:	f7f7 fa18 	bl	80080f0 <pbuf_free>
    return ERR_OK;
 8010cc0:	e78c      	b.n	8010bdc <ip4_input+0x14>
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 8010cc2:	4945      	ldr	r1, [pc, #276]	; (8010dd8 <ip4_input+0x210>)
 8010cc4:	4630      	mov	r0, r6
 8010cc6:	f7ff fe18 	bl	80108fa <igmp_lookfor_group>
 8010cca:	4605      	mov	r5, r0
 8010ccc:	b360      	cbz	r0, 8010d28 <ip4_input+0x160>
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 8010cce:	4b41      	ldr	r3, [pc, #260]	; (8010dd4 <ip4_input+0x20c>)
 8010cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cd2:	4b42      	ldr	r3, [pc, #264]	; (8010ddc <ip4_input+0x214>)
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d002      	beq.n	8010cde <ip4_input+0x116>
  int check_ip_src = 1;
 8010cd8:	2301      	movs	r3, #1
      netif = inp;
 8010cda:	4635      	mov	r5, r6
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 8010cdc:	e021      	b.n	8010d22 <ip4_input+0x15a>
          ip4_addr_isany(ip4_current_src_addr())) {
 8010cde:	4b3d      	ldr	r3, [pc, #244]	; (8010dd4 <ip4_input+0x20c>)
 8010ce0:	695b      	ldr	r3, [r3, #20]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 8010ce2:	b10b      	cbz	r3, 8010ce8 <ip4_input+0x120>
  int check_ip_src = 1;
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	e7f8      	b.n	8010cda <ip4_input+0x112>
        check_ip_src = 0;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	e7f6      	b.n	8010cda <ip4_input+0x112>
    if (ip4_input_accept(inp)) {
 8010cec:	4630      	mov	r0, r6
 8010cee:	f7ff fef3 	bl	8010ad8 <ip4_input_accept>
 8010cf2:	b9a0      	cbnz	r0, 8010d1e <ip4_input+0x156>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010cf4:	4b37      	ldr	r3, [pc, #220]	; (8010dd4 <ip4_input+0x20c>)
 8010cf6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8010cfc:	d016      	beq.n	8010d2c <ip4_input+0x164>
        NETIF_FOREACH(netif) {
 8010cfe:	4b38      	ldr	r3, [pc, #224]	; (8010de0 <ip4_input+0x218>)
 8010d00:	681d      	ldr	r5, [r3, #0]
 8010d02:	e000      	b.n	8010d06 <ip4_input+0x13e>
 8010d04:	682d      	ldr	r5, [r5, #0]
 8010d06:	b145      	cbz	r5, 8010d1a <ip4_input+0x152>
          if (netif == inp) {
 8010d08:	42b5      	cmp	r5, r6
 8010d0a:	d0fb      	beq.n	8010d04 <ip4_input+0x13c>
          if (ip4_input_accept(netif)) {
 8010d0c:	4628      	mov	r0, r5
 8010d0e:	f7ff fee3 	bl	8010ad8 <ip4_input_accept>
 8010d12:	2800      	cmp	r0, #0
 8010d14:	d0f6      	beq.n	8010d04 <ip4_input+0x13c>
  int check_ip_src = 1;
 8010d16:	2301      	movs	r3, #1
 8010d18:	e003      	b.n	8010d22 <ip4_input+0x15a>
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	e001      	b.n	8010d22 <ip4_input+0x15a>
      netif = inp;
 8010d1e:	4635      	mov	r5, r6
  int check_ip_src = 1;
 8010d20:	2301      	movs	r3, #1
  if (netif == NULL) {
 8010d22:	2d00      	cmp	r5, #0
 8010d24:	d194      	bne.n	8010c50 <ip4_input+0x88>
 8010d26:	e790      	b.n	8010c4a <ip4_input+0x82>
  int check_ip_src = 1;
 8010d28:	2301      	movs	r3, #1
 8010d2a:	e78e      	b.n	8010c4a <ip4_input+0x82>
      netif = NULL;
 8010d2c:	2500      	movs	r5, #0
  int check_ip_src = 1;
 8010d2e:	2301      	movs	r3, #1
 8010d30:	e78b      	b.n	8010c4a <ip4_input+0x82>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8010d32:	eb07 0209 	add.w	r2, r7, r9
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8010d36:	8852      	ldrh	r2, [r2, #2]
 8010d38:	f5b2 4f88 	cmp.w	r2, #17408	; 0x4400
 8010d3c:	d188      	bne.n	8010c50 <ip4_input+0x88>
        netif = inp;
 8010d3e:	4635      	mov	r5, r6
 8010d40:	e78b      	b.n	8010c5a <ip4_input+0x92>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010d42:	4631      	mov	r1, r6
 8010d44:	f000 f936 	bl	8010fb4 <ip4_addr_isbroadcast_u32>
 8010d48:	b928      	cbnz	r0, 8010d56 <ip4_input+0x18e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010d4a:	4b22      	ldr	r3, [pc, #136]	; (8010dd4 <ip4_input+0x20c>)
 8010d4c:	695b      	ldr	r3, [r3, #20]
 8010d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010d52:	2be0      	cmp	r3, #224	; 0xe0
 8010d54:	d181      	bne.n	8010c5a <ip4_input+0x92>
      pbuf_free(p);
 8010d56:	4620      	mov	r0, r4
 8010d58:	f7f7 f9ca 	bl	80080f0 <pbuf_free>
      return ERR_OK;
 8010d5c:	e73e      	b.n	8010bdc <ip4_input+0x14>
    pbuf_free(p);
 8010d5e:	4620      	mov	r0, r4
 8010d60:	f7f7 f9c6 	bl	80080f0 <pbuf_free>
    return ERR_OK;
 8010d64:	e73a      	b.n	8010bdc <ip4_input+0x14>
        udp_input(p, inp);
 8010d66:	4631      	mov	r1, r6
 8010d68:	4620      	mov	r0, r4
 8010d6a:	f7fc fe01 	bl	800d970 <udp_input>
  ip_data.current_netif = NULL;
 8010d6e:	4b19      	ldr	r3, [pc, #100]	; (8010dd4 <ip4_input+0x20c>)
 8010d70:	2200      	movs	r2, #0
 8010d72:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010d74:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010d76:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010d78:	821a      	strh	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_src_addr());
 8010d7a:	615a      	str	r2, [r3, #20]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  return ERR_OK;
 8010d7e:	e72d      	b.n	8010bdc <ip4_input+0x14>
        tcp_input(p, inp);
 8010d80:	4631      	mov	r1, r6
 8010d82:	4620      	mov	r0, r4
 8010d84:	f7fa fc2a 	bl	800b5dc <tcp_input>
        break;
 8010d88:	e7f1      	b.n	8010d6e <ip4_input+0x1a6>
        icmp_input(p, inp);
 8010d8a:	4631      	mov	r1, r6
 8010d8c:	4620      	mov	r0, r4
 8010d8e:	f7ff fc3b 	bl	8010608 <icmp_input>
        break;
 8010d92:	e7ec      	b.n	8010d6e <ip4_input+0x1a6>
        igmp_input(p, inp, ip4_current_dest_addr());
 8010d94:	4a10      	ldr	r2, [pc, #64]	; (8010dd8 <ip4_input+0x210>)
 8010d96:	4631      	mov	r1, r6
 8010d98:	4620      	mov	r0, r4
 8010d9a:	f7ff fe1d 	bl	80109d8 <igmp_input>
        break;
 8010d9e:	e7e6      	b.n	8010d6e <ip4_input+0x1a6>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010da0:	4629      	mov	r1, r5
 8010da2:	4b0c      	ldr	r3, [pc, #48]	; (8010dd4 <ip4_input+0x20c>)
 8010da4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010da6:	f000 f905 	bl	8010fb4 <ip4_addr_isbroadcast_u32>
 8010daa:	b928      	cbnz	r0, 8010db8 <ip4_input+0x1f0>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010dac:	4b09      	ldr	r3, [pc, #36]	; (8010dd4 <ip4_input+0x20c>)
 8010dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010db4:	2be0      	cmp	r3, #224	; 0xe0
 8010db6:	d103      	bne.n	8010dc0 <ip4_input+0x1f8>
        pbuf_free(p);
 8010db8:	4620      	mov	r0, r4
 8010dba:	f7f7 f999 	bl	80080f0 <pbuf_free>
        break;
 8010dbe:	e7d6      	b.n	8010d6e <ip4_input+0x1a6>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010dc0:	4649      	mov	r1, r9
 8010dc2:	4620      	mov	r0, r4
 8010dc4:	f7f7 f98e 	bl	80080e4 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010dc8:	2102      	movs	r1, #2
 8010dca:	4620      	mov	r0, r4
 8010dcc:	f7ff fcc0 	bl	8010750 <icmp_dest_unreach>
 8010dd0:	e7f2      	b.n	8010db8 <ip4_input+0x1f0>
 8010dd2:	bf00      	nop
 8010dd4:	20003e34 	.word	0x20003e34
 8010dd8:	20003e60 	.word	0x20003e60
 8010ddc:	010000e0 	.word	0x010000e0
 8010de0:	20007f9c 	.word	0x20007f9c

08010de4 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                      u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                      u16_t optlen)
{
 8010de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010de8:	b083      	sub	sp, #12
 8010dea:	4604      	mov	r4, r0
 8010dec:	4688      	mov	r8, r1
 8010dee:	4617      	mov	r7, r2
 8010df0:	469a      	mov	sl, r3
 8010df2:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8010df6:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010dfa:	7b83      	ldrb	r3, [r0, #14]
 8010dfc:	2b01      	cmp	r3, #1
 8010dfe:	d159      	bne.n	8010eb4 <ip4_output_if_opt_src+0xd0>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010e00:	2f00      	cmp	r7, #0
 8010e02:	d075      	beq.n	8010ef0 <ip4_output_if_opt_src+0x10c>
    u16_t ip_hlen = IP_HLEN;
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
    if (optlen != 0) {
 8010e04:	2d00      	cmp	r5, #0
 8010e06:	d065      	beq.n	8010ed4 <ip4_output_if_opt_src+0xf0>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
 8010e08:	2d28      	cmp	r5, #40	; 0x28
 8010e0a:	d87f      	bhi.n	8010f0c <ip4_output_if_opt_src+0x128>
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_VAL;
      }
      /* round up to a multiple of 4 */
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
 8010e0c:	1cee      	adds	r6, r5, #3
 8010e0e:	b2b6      	uxth	r6, r6
 8010e10:	f026 0603 	bic.w	r6, r6, #3
 8010e14:	fa1f fb86 	uxth.w	fp, r6
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
 8010e18:	3614      	adds	r6, #20
 8010e1a:	b2b6      	uxth	r6, r6
      /* First write in the IP options */
      if (pbuf_add_header(p, optlen_aligned)) {
 8010e1c:	4659      	mov	r1, fp
 8010e1e:	4620      	mov	r0, r4
 8010e20:	f7f7 f915 	bl	800804e <pbuf_add_header>
 8010e24:	2800      	cmp	r0, #0
 8010e26:	d174      	bne.n	8010f12 <ip4_output_if_opt_src+0x12e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
      }
      MEMCPY(p->payload, ip_options, optlen);
 8010e28:	462a      	mov	r2, r5
 8010e2a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010e2c:	6860      	ldr	r0, [r4, #4]
 8010e2e:	f004 fd7f 	bl	8015930 <memcpy>
      if (optlen < optlen_aligned) {
 8010e32:	455d      	cmp	r5, fp
 8010e34:	d346      	bcc.n	8010ec4 <ip4_output_if_opt_src+0xe0>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010e36:	2114      	movs	r1, #20
 8010e38:	4620      	mov	r0, r4
 8010e3a:	f7f7 f908 	bl	800804e <pbuf_add_header>
 8010e3e:	2800      	cmp	r0, #0
 8010e40:	d16a      	bne.n	8010f18 <ip4_output_if_opt_src+0x134>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010e42:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010e44:	8963      	ldrh	r3, [r4, #10]
 8010e46:	2b13      	cmp	r3, #19
 8010e48:	d946      	bls.n	8010ed8 <ip4_output_if_opt_src+0xf4>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010e4a:	f885 a008 	strb.w	sl, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 8010e4e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8010e52:	726b      	strb	r3, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8010e58:	08b6      	lsrs	r6, r6, #2
 8010e5a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 8010e5e:	702e      	strb	r6, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 8010e60:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8010e64:	706b      	strb	r3, [r5, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010e66:	8920      	ldrh	r0, [r4, #8]
 8010e68:	f7f5 fe08 	bl	8006a7c <lwip_htons>
 8010e6c:	8068      	strh	r0, [r5, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010e6e:	2300      	movs	r3, #0
 8010e70:	71ab      	strb	r3, [r5, #6]
 8010e72:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010e74:	4e2b      	ldr	r6, [pc, #172]	; (8010f24 <ip4_output_if_opt_src+0x140>)
 8010e76:	8830      	ldrh	r0, [r6, #0]
 8010e78:	f7f5 fe00 	bl	8006a7c <lwip_htons>
 8010e7c:	80a8      	strh	r0, [r5, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010e7e:	8833      	ldrh	r3, [r6, #0]
 8010e80:	3301      	adds	r3, #1
 8010e82:	8033      	strh	r3, [r6, #0]

    if (src == NULL) {
 8010e84:	f1b8 0f00 	cmp.w	r8, #0
 8010e88:	d02e      	beq.n	8010ee8 <ip4_output_if_opt_src+0x104>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8010e8e:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010e90:	2300      	movs	r3, #0
 8010e92:	72ab      	strb	r3, [r5, #10]
 8010e94:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010e96:	f8b9 30d4 	ldrh.w	r3, [r9, #212]	; 0xd4
 8010e9a:	b113      	cbz	r3, 8010ea2 <ip4_output_if_opt_src+0xbe>
 8010e9c:	8922      	ldrh	r2, [r4, #8]
 8010e9e:	4293      	cmp	r3, r2
 8010ea0:	d32e      	bcc.n	8010f00 <ip4_output_if_opt_src+0x11c>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010ea2:	f8d9 30b4 	ldr.w	r3, [r9, #180]	; 0xb4
 8010ea6:	463a      	mov	r2, r7
 8010ea8:	4621      	mov	r1, r4
 8010eaa:	4648      	mov	r0, r9
 8010eac:	4798      	blx	r3
}
 8010eae:	b003      	add	sp, #12
 8010eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010eb4:	4b1c      	ldr	r3, [pc, #112]	; (8010f28 <ip4_output_if_opt_src+0x144>)
 8010eb6:	f44f 7255 	mov.w	r2, #852	; 0x354
 8010eba:	491c      	ldr	r1, [pc, #112]	; (8010f2c <ip4_output_if_opt_src+0x148>)
 8010ebc:	481c      	ldr	r0, [pc, #112]	; (8010f30 <ip4_output_if_opt_src+0x14c>)
 8010ebe:	f004 fd67 	bl	8015990 <iprintf>
 8010ec2:	e79d      	b.n	8010e00 <ip4_output_if_opt_src+0x1c>
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
 8010ec4:	6860      	ldr	r0, [r4, #4]
 8010ec6:	ebab 0205 	sub.w	r2, fp, r5
 8010eca:	2100      	movs	r1, #0
 8010ecc:	4428      	add	r0, r5
 8010ece:	f004 fd57 	bl	8015980 <memset>
 8010ed2:	e7b0      	b.n	8010e36 <ip4_output_if_opt_src+0x52>
    u16_t ip_hlen = IP_HLEN;
 8010ed4:	2614      	movs	r6, #20
 8010ed6:	e7ae      	b.n	8010e36 <ip4_output_if_opt_src+0x52>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010ed8:	4b13      	ldr	r3, [pc, #76]	; (8010f28 <ip4_output_if_opt_src+0x144>)
 8010eda:	f44f 7262 	mov.w	r2, #904	; 0x388
 8010ede:	4915      	ldr	r1, [pc, #84]	; (8010f34 <ip4_output_if_opt_src+0x150>)
 8010ee0:	4813      	ldr	r0, [pc, #76]	; (8010f30 <ip4_output_if_opt_src+0x14c>)
 8010ee2:	f004 fd55 	bl	8015990 <iprintf>
 8010ee6:	e7b0      	b.n	8010e4a <ip4_output_if_opt_src+0x66>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010ee8:	4b13      	ldr	r3, [pc, #76]	; (8010f38 <ip4_output_if_opt_src+0x154>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	60eb      	str	r3, [r5, #12]
 8010eee:	e7cf      	b.n	8010e90 <ip4_output_if_opt_src+0xac>
    if (p->len < IP_HLEN) {
 8010ef0:	8963      	ldrh	r3, [r4, #10]
 8010ef2:	2b13      	cmp	r3, #19
 8010ef4:	d913      	bls.n	8010f1e <ip4_output_if_opt_src+0x13a>
    iphdr = (struct ip_hdr *)p->payload;
 8010ef6:	6863      	ldr	r3, [r4, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010ef8:	691b      	ldr	r3, [r3, #16]
 8010efa:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8010efc:	af01      	add	r7, sp, #4
 8010efe:	e7ca      	b.n	8010e96 <ip4_output_if_opt_src+0xb2>
    return ip4_frag(p, netif, dest);
 8010f00:	463a      	mov	r2, r7
 8010f02:	4649      	mov	r1, r9
 8010f04:	4620      	mov	r0, r4
 8010f06:	f000 fbb7 	bl	8011678 <ip4_frag>
 8010f0a:	e7d0      	b.n	8010eae <ip4_output_if_opt_src+0xca>
        return ERR_VAL;
 8010f0c:	f06f 0005 	mvn.w	r0, #5
 8010f10:	e7cd      	b.n	8010eae <ip4_output_if_opt_src+0xca>
        return ERR_BUF;
 8010f12:	f06f 0001 	mvn.w	r0, #1
 8010f16:	e7ca      	b.n	8010eae <ip4_output_if_opt_src+0xca>
      return ERR_BUF;
 8010f18:	f06f 0001 	mvn.w	r0, #1
 8010f1c:	e7c7      	b.n	8010eae <ip4_output_if_opt_src+0xca>
      return ERR_BUF;
 8010f1e:	f06f 0001 	mvn.w	r0, #1
 8010f22:	e7c4      	b.n	8010eae <ip4_output_if_opt_src+0xca>
 8010f24:	20000bdc 	.word	0x20000bdc
 8010f28:	0801a464 	.word	0x0801a464
 8010f2c:	0801a498 	.word	0x0801a498
 8010f30:	08016bb4 	.word	0x08016bb4
 8010f34:	0801a4a4 	.word	0x0801a4a4
 8010f38:	0801a4d4 	.word	0x0801a4d4

08010f3c <ip4_output_if_opt>:
{
 8010f3c:	b530      	push	{r4, r5, lr}
 8010f3e:	b087      	sub	sp, #28
 8010f40:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  if (dest != LWIP_IP_HDRINCL) {
 8010f42:	4615      	mov	r5, r2
 8010f44:	b11a      	cbz	r2, 8010f4e <ip4_output_if_opt+0x12>
    if (ip4_addr_isany(src)) {
 8010f46:	b109      	cbz	r1, 8010f4c <ip4_output_if_opt+0x10>
 8010f48:	680a      	ldr	r2, [r1, #0]
 8010f4a:	b902      	cbnz	r2, 8010f4e <ip4_output_if_opt+0x12>
      src_used = netif_ip4_addr(netif);
 8010f4c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 8010f4e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8010f52:	9204      	str	r2, [sp, #16]
 8010f54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010f56:	9203      	str	r2, [sp, #12]
 8010f58:	9402      	str	r4, [sp, #8]
 8010f5a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8010f5e:	9201      	str	r2, [sp, #4]
 8010f60:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8010f64:	9200      	str	r2, [sp, #0]
 8010f66:	462a      	mov	r2, r5
 8010f68:	f7ff ff3c 	bl	8010de4 <ip4_output_if_opt_src>
}
 8010f6c:	b007      	add	sp, #28
 8010f6e:	bd30      	pop	{r4, r5, pc}

08010f70 <ip4_output_if>:
{
 8010f70:	b510      	push	{r4, lr}
 8010f72:	b086      	sub	sp, #24
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 8010f74:	2400      	movs	r4, #0
 8010f76:	9404      	str	r4, [sp, #16]
 8010f78:	9403      	str	r4, [sp, #12]
 8010f7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010f7c:	9402      	str	r4, [sp, #8]
 8010f7e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8010f82:	9401      	str	r4, [sp, #4]
 8010f84:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8010f88:	9400      	str	r4, [sp, #0]
 8010f8a:	f7ff ffd7 	bl	8010f3c <ip4_output_if_opt>
}
 8010f8e:	b006      	add	sp, #24
 8010f90:	bd10      	pop	{r4, pc}

08010f92 <ip4_output_if_src>:
{
 8010f92:	b510      	push	{r4, lr}
 8010f94:	b086      	sub	sp, #24
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 8010f96:	2400      	movs	r4, #0
 8010f98:	9404      	str	r4, [sp, #16]
 8010f9a:	9403      	str	r4, [sp, #12]
 8010f9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010f9e:	9402      	str	r4, [sp, #8]
 8010fa0:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8010fa4:	9401      	str	r4, [sp, #4]
 8010fa6:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8010faa:	9400      	str	r4, [sp, #0]
 8010fac:	f7ff ff1a 	bl	8010de4 <ip4_output_if_opt_src>
}
 8010fb0:	b006      	add	sp, #24
 8010fb2:	bd10      	pop	{r4, pc}

08010fb4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010fb4:	4603      	mov	r3, r0
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010fb6:	1e42      	subs	r2, r0, #1
 8010fb8:	f112 0f03 	cmn.w	r2, #3
 8010fbc:	d812      	bhi.n	8010fe4 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010fbe:	f891 00df 	ldrb.w	r0, [r1, #223]	; 0xdf
 8010fc2:	f010 0002 	ands.w	r0, r0, #2
 8010fc6:	d014      	beq.n	8010ff2 <ip4_addr_isbroadcast_u32+0x3e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010fc8:	684a      	ldr	r2, [r1, #4]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d00c      	beq.n	8010fe8 <ip4_addr_isbroadcast_u32+0x34>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010fce:	69c8      	ldr	r0, [r1, #28]
 8010fd0:	405a      	eors	r2, r3
 8010fd2:	4202      	tst	r2, r0
 8010fd4:	d10a      	bne.n	8010fec <ip4_addr_isbroadcast_u32+0x38>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010fd6:	43c2      	mvns	r2, r0
 8010fd8:	ea23 0300 	bic.w	r3, r3, r0
 8010fdc:	429a      	cmp	r2, r3
 8010fde:	d007      	beq.n	8010ff0 <ip4_addr_isbroadcast_u32+0x3c>
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8010fe0:	2000      	movs	r0, #0
 8010fe2:	4770      	bx	lr
    return 1;
 8010fe4:	2001      	movs	r0, #1
 8010fe6:	4770      	bx	lr
    return 0;
 8010fe8:	2000      	movs	r0, #0
 8010fea:	4770      	bx	lr
    return 0;
 8010fec:	2000      	movs	r0, #0
 8010fee:	4770      	bx	lr
    return 1;
 8010ff0:	2001      	movs	r0, #1
  }
}
 8010ff2:	4770      	bx	lr

08010ff4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010ff4:	b538      	push	{r3, r4, r5, lr}
 8010ff6:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010ff8:	4b0c      	ldr	r3, [pc, #48]	; (801102c <ip_reass_dequeue_datagram+0x38>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	4283      	cmp	r3, r0
 8010ffe:	d008      	beq.n	8011012 <ip_reass_dequeue_datagram+0x1e>
 8011000:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011002:	b151      	cbz	r1, 801101a <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 8011004:	6823      	ldr	r3, [r4, #0]
 8011006:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011008:	4621      	mov	r1, r4
 801100a:	2004      	movs	r0, #4
 801100c:	f7f6 fbcc 	bl	80077a8 <memp_free>
}
 8011010:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 8011012:	6802      	ldr	r2, [r0, #0]
 8011014:	4b05      	ldr	r3, [pc, #20]	; (801102c <ip_reass_dequeue_datagram+0x38>)
 8011016:	601a      	str	r2, [r3, #0]
 8011018:	e7f6      	b.n	8011008 <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801101a:	4b05      	ldr	r3, [pc, #20]	; (8011030 <ip_reass_dequeue_datagram+0x3c>)
 801101c:	f240 1245 	movw	r2, #325	; 0x145
 8011020:	4904      	ldr	r1, [pc, #16]	; (8011034 <ip_reass_dequeue_datagram+0x40>)
 8011022:	4805      	ldr	r0, [pc, #20]	; (8011038 <ip_reass_dequeue_datagram+0x44>)
 8011024:	f004 fcb4 	bl	8015990 <iprintf>
 8011028:	e7ec      	b.n	8011004 <ip_reass_dequeue_datagram+0x10>
 801102a:	bf00      	nop
 801102c:	20000be0 	.word	0x20000be0
 8011030:	0801a504 	.word	0x0801a504
 8011034:	0801a540 	.word	0x0801a540
 8011038:	08016bb4 	.word	0x08016bb4

0801103c <ip_reass_free_complete_datagram>:
{
 801103c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011040:	4680      	mov	r8, r0
 8011042:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011044:	4281      	cmp	r1, r0
 8011046:	d015      	beq.n	8011074 <ip_reass_free_complete_datagram+0x38>
  if (prev != NULL) {
 8011048:	f1b9 0f00 	cmp.w	r9, #0
 801104c:	d009      	beq.n	8011062 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801104e:	f8d9 3000 	ldr.w	r3, [r9]
 8011052:	4543      	cmp	r3, r8
 8011054:	d005      	beq.n	8011062 <ip_reass_free_complete_datagram+0x26>
 8011056:	4b30      	ldr	r3, [pc, #192]	; (8011118 <ip_reass_free_complete_datagram+0xdc>)
 8011058:	22ad      	movs	r2, #173	; 0xad
 801105a:	4930      	ldr	r1, [pc, #192]	; (801111c <ip_reass_free_complete_datagram+0xe0>)
 801105c:	4830      	ldr	r0, [pc, #192]	; (8011120 <ip_reass_free_complete_datagram+0xe4>)
 801105e:	f004 fc97 	bl	8015990 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011062:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011066:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 8011068:	889a      	ldrh	r2, [r3, #4]
 801106a:	b152      	cbz	r2, 8011082 <ip_reass_free_complete_datagram+0x46>
  u16_t pbufs_freed = 0;
 801106c:	2600      	movs	r6, #0
  p = ipr->p;
 801106e:	f8d8 5004 	ldr.w	r5, [r8, #4]
  while (p != NULL) {
 8011072:	e02e      	b.n	80110d2 <ip_reass_free_complete_datagram+0x96>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011074:	4b28      	ldr	r3, [pc, #160]	; (8011118 <ip_reass_free_complete_datagram+0xdc>)
 8011076:	22ab      	movs	r2, #171	; 0xab
 8011078:	492a      	ldr	r1, [pc, #168]	; (8011124 <ip_reass_free_complete_datagram+0xe8>)
 801107a:	4829      	ldr	r0, [pc, #164]	; (8011120 <ip_reass_free_complete_datagram+0xe4>)
 801107c:	f004 fc88 	bl	8015990 <iprintf>
 8011080:	e7e2      	b.n	8011048 <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011088:	4643      	mov	r3, r8
 801108a:	686a      	ldr	r2, [r5, #4]
 801108c:	f853 1f08 	ldr.w	r1, [r3, #8]!
 8011090:	685e      	ldr	r6, [r3, #4]
 8011092:	689c      	ldr	r4, [r3, #8]
 8011094:	68d8      	ldr	r0, [r3, #12]
 8011096:	6011      	str	r1, [r2, #0]
 8011098:	6056      	str	r6, [r2, #4]
 801109a:	6094      	str	r4, [r2, #8]
 801109c:	60d0      	str	r0, [r2, #12]
 801109e:	6919      	ldr	r1, [r3, #16]
 80110a0:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80110a2:	2101      	movs	r1, #1
 80110a4:	4628      	mov	r0, r5
 80110a6:	f7ff fb59 	bl	801075c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80110aa:	4628      	mov	r0, r5
 80110ac:	f7f7 f984 	bl	80083b8 <pbuf_clen>
 80110b0:	4606      	mov	r6, r0
    pbuf_free(p);
 80110b2:	4628      	mov	r0, r5
 80110b4:	f7f7 f81c 	bl	80080f0 <pbuf_free>
 80110b8:	e7d9      	b.n	801106e <ip_reass_free_complete_datagram+0x32>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80110ba:	4b17      	ldr	r3, [pc, #92]	; (8011118 <ip_reass_free_complete_datagram+0xdc>)
 80110bc:	22cc      	movs	r2, #204	; 0xcc
 80110be:	491a      	ldr	r1, [pc, #104]	; (8011128 <ip_reass_free_complete_datagram+0xec>)
 80110c0:	4817      	ldr	r0, [pc, #92]	; (8011120 <ip_reass_free_complete_datagram+0xe4>)
 80110c2:	f004 fc65 	bl	8015990 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80110c6:	4434      	add	r4, r6
 80110c8:	b2a6      	uxth	r6, r4
    pbuf_free(pcur);
 80110ca:	4628      	mov	r0, r5
 80110cc:	f7f7 f810 	bl	80080f0 <pbuf_free>
    p = iprh->next_pbuf;
 80110d0:	463d      	mov	r5, r7
  while (p != NULL) {
 80110d2:	b155      	cbz	r5, 80110ea <ip_reass_free_complete_datagram+0xae>
    iprh = (struct ip_reass_helper *)p->payload;
 80110d4:	686b      	ldr	r3, [r5, #4]
    p = iprh->next_pbuf;
 80110d6:	681f      	ldr	r7, [r3, #0]
    clen = pbuf_clen(pcur);
 80110d8:	4628      	mov	r0, r5
 80110da:	f7f7 f96d 	bl	80083b8 <pbuf_clen>
 80110de:	4604      	mov	r4, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80110e0:	1833      	adds	r3, r6, r0
 80110e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80110e6:	dbee      	blt.n	80110c6 <ip_reass_free_complete_datagram+0x8a>
 80110e8:	e7e7      	b.n	80110ba <ip_reass_free_complete_datagram+0x7e>
  ip_reass_dequeue_datagram(ipr, prev);
 80110ea:	4649      	mov	r1, r9
 80110ec:	4640      	mov	r0, r8
 80110ee:	f7ff ff81 	bl	8010ff4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80110f2:	4b0e      	ldr	r3, [pc, #56]	; (801112c <ip_reass_free_complete_datagram+0xf0>)
 80110f4:	881b      	ldrh	r3, [r3, #0]
 80110f6:	42b3      	cmp	r3, r6
 80110f8:	d306      	bcc.n	8011108 <ip_reass_free_complete_datagram+0xcc>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80110fa:	4a0c      	ldr	r2, [pc, #48]	; (801112c <ip_reass_free_complete_datagram+0xf0>)
 80110fc:	8813      	ldrh	r3, [r2, #0]
 80110fe:	1b9b      	subs	r3, r3, r6
 8011100:	8013      	strh	r3, [r2, #0]
}
 8011102:	4630      	mov	r0, r6
 8011104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011108:	4b03      	ldr	r3, [pc, #12]	; (8011118 <ip_reass_free_complete_datagram+0xdc>)
 801110a:	22d2      	movs	r2, #210	; 0xd2
 801110c:	4908      	ldr	r1, [pc, #32]	; (8011130 <ip_reass_free_complete_datagram+0xf4>)
 801110e:	4804      	ldr	r0, [pc, #16]	; (8011120 <ip_reass_free_complete_datagram+0xe4>)
 8011110:	f004 fc3e 	bl	8015990 <iprintf>
 8011114:	e7f1      	b.n	80110fa <ip_reass_free_complete_datagram+0xbe>
 8011116:	bf00      	nop
 8011118:	0801a504 	.word	0x0801a504
 801111c:	0801a568 	.word	0x0801a568
 8011120:	08016bb4 	.word	0x08016bb4
 8011124:	0801a55c 	.word	0x0801a55c
 8011128:	0801a57c 	.word	0x0801a57c
 801112c:	20000bde 	.word	0x20000bde
 8011130:	0801a59c 	.word	0x0801a59c

08011134 <ip_reass_remove_oldest_datagram>:
{
 8011134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011138:	4606      	mov	r6, r0
 801113a:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 801113c:	2700      	movs	r7, #0
 801113e:	e02b      	b.n	8011198 <ip_reass_remove_oldest_datagram+0x64>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011140:	699a      	ldr	r2, [r3, #24]
 8011142:	f8d6 c010 	ldr.w	ip, [r6, #16]
 8011146:	4562      	cmp	r2, ip
 8011148:	d111      	bne.n	801116e <ip_reass_remove_oldest_datagram+0x3a>
 801114a:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 801114e:	88b2      	ldrh	r2, [r6, #4]
 8011150:	4594      	cmp	ip, r2
 8011152:	d10c      	bne.n	801116e <ip_reass_remove_oldest_datagram+0x3a>
 8011154:	e001      	b.n	801115a <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 8011156:	4629      	mov	r1, r5
          oldest = r;
 8011158:	4618      	mov	r0, r3
      if (r->next != NULL) {
 801115a:	681a      	ldr	r2, [r3, #0]
 801115c:	b192      	cbz	r2, 8011184 <ip_reass_remove_oldest_datagram+0x50>
 801115e:	461d      	mov	r5, r3
 8011160:	4613      	mov	r3, r2
    while (r != NULL) {
 8011162:	b18b      	cbz	r3, 8011188 <ip_reass_remove_oldest_datagram+0x54>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011164:	695a      	ldr	r2, [r3, #20]
 8011166:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 801116a:	4562      	cmp	r2, ip
 801116c:	d0e8      	beq.n	8011140 <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 801116e:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8011170:	2800      	cmp	r0, #0
 8011172:	d0f0      	beq.n	8011156 <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 8011174:	f893 c01f 	ldrb.w	ip, [r3, #31]
 8011178:	7fc2      	ldrb	r2, [r0, #31]
 801117a:	4594      	cmp	ip, r2
 801117c:	d8ed      	bhi.n	801115a <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 801117e:	4629      	mov	r1, r5
          oldest = r;
 8011180:	4618      	mov	r0, r3
 8011182:	e7ea      	b.n	801115a <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 8011184:	462b      	mov	r3, r5
 8011186:	e7ea      	b.n	801115e <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 8011188:	b110      	cbz	r0, 8011190 <ip_reass_remove_oldest_datagram+0x5c>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801118a:	f7ff ff57 	bl	801103c <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 801118e:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011190:	4547      	cmp	r7, r8
 8011192:	da08      	bge.n	80111a6 <ip_reass_remove_oldest_datagram+0x72>
 8011194:	2c01      	cmp	r4, #1
 8011196:	dd06      	ble.n	80111a6 <ip_reass_remove_oldest_datagram+0x72>
    r = reassdatagrams;
 8011198:	4b04      	ldr	r3, [pc, #16]	; (80111ac <ip_reass_remove_oldest_datagram+0x78>)
 801119a:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 801119c:	2400      	movs	r4, #0
    oldest_prev = NULL;
 801119e:	4621      	mov	r1, r4
    prev = NULL;
 80111a0:	4625      	mov	r5, r4
    oldest = NULL;
 80111a2:	4620      	mov	r0, r4
    while (r != NULL) {
 80111a4:	e7dd      	b.n	8011162 <ip_reass_remove_oldest_datagram+0x2e>
}
 80111a6:	4638      	mov	r0, r7
 80111a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111ac:	20000be0 	.word	0x20000be0

080111b0 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80111b0:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80111b2:	4604      	mov	r4, r0
 80111b4:	b120      	cbz	r0, 80111c0 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 80111b6:	4621      	mov	r1, r4
 80111b8:	2005      	movs	r0, #5
 80111ba:	f7f6 faf5 	bl	80077a8 <memp_free>
}
 80111be:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80111c0:	4b03      	ldr	r3, [pc, #12]	; (80111d0 <ip_frag_free_pbuf_custom_ref+0x20>)
 80111c2:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80111c6:	4903      	ldr	r1, [pc, #12]	; (80111d4 <ip_frag_free_pbuf_custom_ref+0x24>)
 80111c8:	4803      	ldr	r0, [pc, #12]	; (80111d8 <ip_frag_free_pbuf_custom_ref+0x28>)
 80111ca:	f004 fbe1 	bl	8015990 <iprintf>
 80111ce:	e7f2      	b.n	80111b6 <ip_frag_free_pbuf_custom_ref+0x6>
 80111d0:	0801a504 	.word	0x0801a504
 80111d4:	08019ea8 	.word	0x08019ea8
 80111d8:	08016bb4 	.word	0x08016bb4

080111dc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80111dc:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80111de:	4604      	mov	r4, r0
 80111e0:	b138      	cbz	r0, 80111f2 <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 80111e2:	6960      	ldr	r0, [r4, #20]
 80111e4:	b108      	cbz	r0, 80111ea <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 80111e6:	f7f6 ff83 	bl	80080f0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80111ea:	4620      	mov	r0, r4
 80111ec:	f7ff ffe0 	bl	80111b0 <ip_frag_free_pbuf_custom_ref>
}
 80111f0:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80111f2:	4b04      	ldr	r3, [pc, #16]	; (8011204 <ipfrag_free_pbuf_custom+0x28>)
 80111f4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80111f8:	4903      	ldr	r1, [pc, #12]	; (8011208 <ipfrag_free_pbuf_custom+0x2c>)
 80111fa:	4804      	ldr	r0, [pc, #16]	; (801120c <ipfrag_free_pbuf_custom+0x30>)
 80111fc:	f004 fbc8 	bl	8015990 <iprintf>
 8011200:	e7ef      	b.n	80111e2 <ipfrag_free_pbuf_custom+0x6>
 8011202:	bf00      	nop
 8011204:	0801a504 	.word	0x0801a504
 8011208:	0801a5c0 	.word	0x0801a5c0
 801120c:	08016bb4 	.word	0x08016bb4

08011210 <ip_reass_chain_frag_into_datagram_and_validate>:
{
 8011210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011214:	4681      	mov	r9, r0
 8011216:	460e      	mov	r6, r1
 8011218:	4692      	mov	sl, r2
  fraghdr = (struct ip_hdr *)new_p->payload;
 801121a:	684c      	ldr	r4, [r1, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801121c:	8860      	ldrh	r0, [r4, #2]
 801121e:	f7f5 fc2d 	bl	8006a7c <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8011222:	7823      	ldrb	r3, [r4, #0]
 8011224:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8011228:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 801122c:	d203      	bcs.n	8011236 <ip_reass_chain_frag_into_datagram_and_validate+0x26>
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801122e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011236:	009a      	lsls	r2, r3, #2
  len = (u16_t)(len - hlen);
 8011238:	1a80      	subs	r0, r0, r2
 801123a:	b285      	uxth	r5, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 801123c:	88e0      	ldrh	r0, [r4, #6]
 801123e:	f7f5 fc1d 	bl	8006a7c <lwip_htons>
 8011242:	f3c0 040c 	ubfx	r4, r0, #0, #13
 8011246:	00e4      	lsls	r4, r4, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011248:	6877      	ldr	r7, [r6, #4]
  iprh->next_pbuf = NULL;
 801124a:	2300      	movs	r3, #0
 801124c:	703b      	strb	r3, [r7, #0]
 801124e:	707b      	strb	r3, [r7, #1]
 8011250:	70bb      	strb	r3, [r7, #2]
 8011252:	70fb      	strb	r3, [r7, #3]
  iprh->start = offset;
 8011254:	80bc      	strh	r4, [r7, #4]
  iprh->end = (u16_t)(offset + len);
 8011256:	1928      	adds	r0, r5, r4
 8011258:	fa1f fc80 	uxth.w	ip, r0
 801125c:	80f8      	strh	r0, [r7, #6]
  if (iprh->end < offset) {
 801125e:	45a4      	cmp	ip, r4
 8011260:	f0c0 8092 	bcc.w	8011388 <ip_reass_chain_frag_into_datagram_and_validate+0x178>
  for (q = ipr->p; q != NULL;) {
 8011264:	f8d9 1004 	ldr.w	r1, [r9, #4]
  int valid = 1;
 8011268:	f04f 0801 	mov.w	r8, #1
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801126c:	461d      	mov	r5, r3
  for (q = ipr->p; q != NULL;) {
 801126e:	e022      	b.n	80112b6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
      iprh->next_pbuf = q;
 8011270:	6039      	str	r1, [r7, #0]
      if (iprh_prev != NULL) {
 8011272:	b1c5      	cbz	r5, 80112a6 <ip_reass_chain_frag_into_datagram_and_validate+0x96>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011274:	88ea      	ldrh	r2, [r5, #6]
 8011276:	42a2      	cmp	r2, r4
 8011278:	f200 8089 	bhi.w	801138e <ip_reass_chain_frag_into_datagram_and_validate+0x17e>
 801127c:	889b      	ldrh	r3, [r3, #4]
 801127e:	459c      	cmp	ip, r3
 8011280:	f200 8088 	bhi.w	8011394 <ip_reass_chain_frag_into_datagram_and_validate+0x184>
        iprh_prev->next_pbuf = new_p;
 8011284:	602e      	str	r6, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 8011286:	88bb      	ldrh	r3, [r7, #4]
 8011288:	429a      	cmp	r2, r3
 801128a:	d001      	beq.n	8011290 <ip_reass_chain_frag_into_datagram_and_validate+0x80>
          valid = 0;
 801128c:	f04f 0800 	mov.w	r8, #0
  if (q == NULL) {
 8011290:	b321      	cbz	r1, 80112dc <ip_reass_chain_frag_into_datagram_and_validate+0xcc>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011292:	f1ba 0f00 	cmp.w	sl, #0
 8011296:	d143      	bne.n	8011320 <ip_reass_chain_frag_into_datagram_and_validate+0x110>
 8011298:	f899 301e 	ldrb.w	r3, [r9, #30]
 801129c:	f013 0f01 	tst.w	r3, #1
 80112a0:	d13e      	bne.n	8011320 <ip_reass_chain_frag_into_datagram_and_validate+0x110>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80112a2:	4650      	mov	r0, sl
 80112a4:	e7c5      	b.n	8011232 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
        if (iprh->end > iprh_tmp->start) {
 80112a6:	889b      	ldrh	r3, [r3, #4]
 80112a8:	459c      	cmp	ip, r3
 80112aa:	d876      	bhi.n	801139a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
        ipr->p = new_p;
 80112ac:	f8c9 6004 	str.w	r6, [r9, #4]
 80112b0:	e7ee      	b.n	8011290 <ip_reass_chain_frag_into_datagram_and_validate+0x80>
    q = iprh_tmp->next_pbuf;
 80112b2:	6819      	ldr	r1, [r3, #0]
    iprh_prev = iprh_tmp;
 80112b4:	461d      	mov	r5, r3
  for (q = ipr->p; q != NULL;) {
 80112b6:	2900      	cmp	r1, #0
 80112b8:	d0ea      	beq.n	8011290 <ip_reass_chain_frag_into_datagram_and_validate+0x80>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80112ba:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 80112bc:	889a      	ldrh	r2, [r3, #4]
 80112be:	42a2      	cmp	r2, r4
 80112c0:	d8d6      	bhi.n	8011270 <ip_reass_chain_frag_into_datagram_and_validate+0x60>
    } else if (iprh->start == iprh_tmp->start) {
 80112c2:	42a2      	cmp	r2, r4
 80112c4:	d06c      	beq.n	80113a0 <ip_reass_chain_frag_into_datagram_and_validate+0x190>
    } else if (iprh->start < iprh_tmp->end) {
 80112c6:	88d9      	ldrh	r1, [r3, #6]
 80112c8:	42a1      	cmp	r1, r4
 80112ca:	d86c      	bhi.n	80113a6 <ip_reass_chain_frag_into_datagram_and_validate+0x196>
      if (iprh_prev != NULL) {
 80112cc:	2d00      	cmp	r5, #0
 80112ce:	d0f0      	beq.n	80112b2 <ip_reass_chain_frag_into_datagram_and_validate+0xa2>
        if (iprh_prev->end != iprh_tmp->start) {
 80112d0:	88e9      	ldrh	r1, [r5, #6]
 80112d2:	428a      	cmp	r2, r1
 80112d4:	d0ed      	beq.n	80112b2 <ip_reass_chain_frag_into_datagram_and_validate+0xa2>
          valid = 0;
 80112d6:	f04f 0800 	mov.w	r8, #0
 80112da:	e7ea      	b.n	80112b2 <ip_reass_chain_frag_into_datagram_and_validate+0xa2>
    if (iprh_prev != NULL) {
 80112dc:	b19d      	cbz	r5, 8011306 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80112de:	88ea      	ldrh	r2, [r5, #6]
 80112e0:	88bb      	ldrh	r3, [r7, #4]
 80112e2:	429a      	cmp	r2, r3
 80112e4:	d807      	bhi.n	80112f6 <ip_reass_chain_frag_into_datagram_and_validate+0xe6>
      iprh_prev->next_pbuf = new_p;
 80112e6:	602e      	str	r6, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 80112e8:	88ea      	ldrh	r2, [r5, #6]
 80112ea:	88bb      	ldrh	r3, [r7, #4]
 80112ec:	429a      	cmp	r2, r3
 80112ee:	d0d0      	beq.n	8011292 <ip_reass_chain_frag_into_datagram_and_validate+0x82>
        valid = 0;
 80112f0:	f04f 0800 	mov.w	r8, #0
 80112f4:	e7cd      	b.n	8011292 <ip_reass_chain_frag_into_datagram_and_validate+0x82>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80112f6:	4b2d      	ldr	r3, [pc, #180]	; (80113ac <ip_reass_chain_frag_into_datagram_and_validate+0x19c>)
 80112f8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80112fc:	492c      	ldr	r1, [pc, #176]	; (80113b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>)
 80112fe:	482d      	ldr	r0, [pc, #180]	; (80113b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1a4>)
 8011300:	f004 fb46 	bl	8015990 <iprintf>
 8011304:	e7ef      	b.n	80112e6 <ip_reass_chain_frag_into_datagram_and_validate+0xd6>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011306:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801130a:	b133      	cbz	r3, 801131a <ip_reass_chain_frag_into_datagram_and_validate+0x10a>
 801130c:	4b27      	ldr	r3, [pc, #156]	; (80113ac <ip_reass_chain_frag_into_datagram_and_validate+0x19c>)
 801130e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8011312:	4929      	ldr	r1, [pc, #164]	; (80113b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1a8>)
 8011314:	4827      	ldr	r0, [pc, #156]	; (80113b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1a4>)
 8011316:	f004 fb3b 	bl	8015990 <iprintf>
      ipr->p = new_p;
 801131a:	f8c9 6004 	str.w	r6, [r9, #4]
 801131e:	e7b8      	b.n	8011292 <ip_reass_chain_frag_into_datagram_and_validate+0x82>
    if (valid) {
 8011320:	f1b8 0f00 	cmp.w	r8, #0
 8011324:	d02e      	beq.n	8011384 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011326:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801132a:	b333      	cbz	r3, 801137a <ip_reass_chain_frag_into_datagram_and_validate+0x16a>
 801132c:	6858      	ldr	r0, [r3, #4]
 801132e:	8883      	ldrh	r3, [r0, #4]
 8011330:	bb33      	cbnz	r3, 8011380 <ip_reass_chain_frag_into_datagram_and_validate+0x170>
        q = iprh->next_pbuf;
 8011332:	683a      	ldr	r2, [r7, #0]
        while (q != NULL) {
 8011334:	b152      	cbz	r2, 801134c <ip_reass_chain_frag_into_datagram_and_validate+0x13c>
          iprh = (struct ip_reass_helper *)q->payload;
 8011336:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 8011338:	88f9      	ldrh	r1, [r7, #6]
 801133a:	889a      	ldrh	r2, [r3, #4]
 801133c:	4291      	cmp	r1, r2
 801133e:	d102      	bne.n	8011346 <ip_reass_chain_frag_into_datagram_and_validate+0x136>
          q = iprh->next_pbuf;
 8011340:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper *)q->payload;
 8011342:	461f      	mov	r7, r3
 8011344:	e7f6      	b.n	8011334 <ip_reass_chain_frag_into_datagram_and_validate+0x124>
 8011346:	461f      	mov	r7, r3
            valid = 0;
 8011348:	f04f 0800 	mov.w	r8, #0
        if (valid) {
 801134c:	f1b8 0f00 	cmp.w	r8, #0
 8011350:	d018      	beq.n	8011384 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
          LWIP_ASSERT("sanity check",
 8011352:	42b8      	cmp	r0, r7
 8011354:	d009      	beq.n	801136a <ip_reass_chain_frag_into_datagram_and_validate+0x15a>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	b1a3      	cbz	r3, 8011384 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
 801135a:	4b14      	ldr	r3, [pc, #80]	; (80113ac <ip_reass_chain_frag_into_datagram_and_validate+0x19c>)
 801135c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8011360:	4916      	ldr	r1, [pc, #88]	; (80113bc <ip_reass_chain_frag_into_datagram_and_validate+0x1ac>)
 8011362:	4814      	ldr	r0, [pc, #80]	; (80113b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1a4>)
 8011364:	f004 fb14 	bl	8015990 <iprintf>
 8011368:	e00c      	b.n	8011384 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
          LWIP_ASSERT("sanity check",
 801136a:	4b10      	ldr	r3, [pc, #64]	; (80113ac <ip_reass_chain_frag_into_datagram_and_validate+0x19c>)
 801136c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011370:	4913      	ldr	r1, [pc, #76]	; (80113c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>)
 8011372:	4810      	ldr	r0, [pc, #64]	; (80113b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1a4>)
 8011374:	f004 fb0c 	bl	8015990 <iprintf>
 8011378:	e7ed      	b.n	8011356 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
        valid = 0;
 801137a:	f04f 0800 	mov.w	r8, #0
 801137e:	e001      	b.n	8011384 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
 8011380:	f04f 0800 	mov.w	r8, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011384:	4640      	mov	r0, r8
 8011386:	e754      	b.n	8011232 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011388:	f04f 30ff 	mov.w	r0, #4294967295
 801138c:	e751      	b.n	8011232 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801138e:	f04f 30ff 	mov.w	r0, #4294967295
 8011392:	e74e      	b.n	8011232 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
 8011394:	f04f 30ff 	mov.w	r0, #4294967295
 8011398:	e74b      	b.n	8011232 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801139a:	f04f 30ff 	mov.w	r0, #4294967295
 801139e:	e748      	b.n	8011232 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80113a0:	f04f 30ff 	mov.w	r0, #4294967295
 80113a4:	e745      	b.n	8011232 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80113a6:	f04f 30ff 	mov.w	r0, #4294967295
 80113aa:	e742      	b.n	8011232 <ip_reass_chain_frag_into_datagram_and_validate+0x22>
 80113ac:	0801a504 	.word	0x0801a504
 80113b0:	0801a5cc 	.word	0x0801a5cc
 80113b4:	08016bb4 	.word	0x08016bb4
 80113b8:	0801a5ec 	.word	0x0801a5ec
 80113bc:	0801a634 	.word	0x0801a634
 80113c0:	0801a624 	.word	0x0801a624

080113c4 <ip_frag_alloc_pbuf_custom_ref>:
{
 80113c4:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80113c6:	2005      	movs	r0, #5
 80113c8:	f7f6 f9d4 	bl	8007774 <memp_malloc>
}
 80113cc:	bd08      	pop	{r3, pc}
	...

080113d0 <ip_reass_enqueue_new_datagram>:
{
 80113d0:	b570      	push	{r4, r5, r6, lr}
 80113d2:	4605      	mov	r5, r0
 80113d4:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80113d6:	2004      	movs	r0, #4
 80113d8:	f7f6 f9cc 	bl	8007774 <memp_malloc>
  if (ipr == NULL) {
 80113dc:	4604      	mov	r4, r0
 80113de:	b1c8      	cbz	r0, 8011414 <ip_reass_enqueue_new_datagram+0x44>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80113e0:	2300      	movs	r3, #0
 80113e2:	6063      	str	r3, [r4, #4]
 80113e4:	60a3      	str	r3, [r4, #8]
 80113e6:	60e3      	str	r3, [r4, #12]
 80113e8:	6123      	str	r3, [r4, #16]
 80113ea:	6163      	str	r3, [r4, #20]
 80113ec:	61a3      	str	r3, [r4, #24]
 80113ee:	61e3      	str	r3, [r4, #28]
  ipr->timer = IP_REASS_MAXAGE;
 80113f0:	230f      	movs	r3, #15
 80113f2:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 80113f4:	4b0e      	ldr	r3, [pc, #56]	; (8011430 <ip_reass_enqueue_new_datagram+0x60>)
 80113f6:	681a      	ldr	r2, [r3, #0]
 80113f8:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 80113fa:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80113fc:	682b      	ldr	r3, [r5, #0]
 80113fe:	6868      	ldr	r0, [r5, #4]
 8011400:	68a9      	ldr	r1, [r5, #8]
 8011402:	68ea      	ldr	r2, [r5, #12]
 8011404:	60a3      	str	r3, [r4, #8]
 8011406:	60e0      	str	r0, [r4, #12]
 8011408:	6121      	str	r1, [r4, #16]
 801140a:	6162      	str	r2, [r4, #20]
 801140c:	692b      	ldr	r3, [r5, #16]
 801140e:	61a3      	str	r3, [r4, #24]
}
 8011410:	4620      	mov	r0, r4
 8011412:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011414:	4631      	mov	r1, r6
 8011416:	4628      	mov	r0, r5
 8011418:	f7ff fe8c 	bl	8011134 <ip_reass_remove_oldest_datagram>
 801141c:	42b0      	cmp	r0, r6
 801141e:	da02      	bge.n	8011426 <ip_reass_enqueue_new_datagram+0x56>
    if (ipr == NULL)
 8011420:	2c00      	cmp	r4, #0
 8011422:	d1dd      	bne.n	80113e0 <ip_reass_enqueue_new_datagram+0x10>
 8011424:	e7f4      	b.n	8011410 <ip_reass_enqueue_new_datagram+0x40>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011426:	2004      	movs	r0, #4
 8011428:	f7f6 f9a4 	bl	8007774 <memp_malloc>
 801142c:	4604      	mov	r4, r0
 801142e:	e7f7      	b.n	8011420 <ip_reass_enqueue_new_datagram+0x50>
 8011430:	20000be0 	.word	0x20000be0

08011434 <ip_reass_tmr>:
{
 8011434:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8011436:	4b09      	ldr	r3, [pc, #36]	; (801145c <ip_reass_tmr+0x28>)
 8011438:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 801143a:	2400      	movs	r4, #0
  while (r != NULL) {
 801143c:	e004      	b.n	8011448 <ip_reass_tmr+0x14>
      r = r->next;
 801143e:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 8011440:	4621      	mov	r1, r4
 8011442:	f7ff fdfb 	bl	801103c <ip_reass_free_complete_datagram>
      r = r->next;
 8011446:	4628      	mov	r0, r5
  while (r != NULL) {
 8011448:	b138      	cbz	r0, 801145a <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 801144a:	7fc3      	ldrb	r3, [r0, #31]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d0f6      	beq.n	801143e <ip_reass_tmr+0xa>
      r->timer--;
 8011450:	3b01      	subs	r3, #1
 8011452:	77c3      	strb	r3, [r0, #31]
      prev = r;
 8011454:	4604      	mov	r4, r0
      r = r->next;
 8011456:	6800      	ldr	r0, [r0, #0]
 8011458:	e7f6      	b.n	8011448 <ip_reass_tmr+0x14>
}
 801145a:	bd38      	pop	{r3, r4, r5, pc}
 801145c:	20000be0 	.word	0x20000be0

08011460 <ip4_reass>:
{
 8011460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011464:	4606      	mov	r6, r0
  fraghdr = (struct ip_hdr *)p->payload;
 8011466:	6845      	ldr	r5, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011468:	782b      	ldrb	r3, [r5, #0]
 801146a:	f003 030f 	and.w	r3, r3, #15
 801146e:	2b05      	cmp	r3, #5
 8011470:	f040 80d5 	bne.w	801161e <ip4_reass+0x1be>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011474:	88e8      	ldrh	r0, [r5, #6]
 8011476:	f7f5 fb01 	bl	8006a7c <lwip_htons>
 801147a:	f3c0 080c 	ubfx	r8, r0, #0, #13
 801147e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011482:	8868      	ldrh	r0, [r5, #2]
 8011484:	f7f5 fafa 	bl	8006a7c <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8011488:	782b      	ldrb	r3, [r5, #0]
 801148a:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 801148e:	009f      	lsls	r7, r3, #2
 8011490:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8011494:	f0c0 80c3 	bcc.w	801161e <ip4_reass+0x1be>
  len = (u16_t)(len - hlen);
 8011498:	1bc0      	subs	r0, r0, r7
 801149a:	b287      	uxth	r7, r0
  clen = pbuf_clen(p);
 801149c:	4630      	mov	r0, r6
 801149e:	f7f6 ff8b 	bl	80083b8 <pbuf_clen>
 80114a2:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80114a4:	4b6d      	ldr	r3, [pc, #436]	; (801165c <ip4_reass+0x1fc>)
 80114a6:	881b      	ldrh	r3, [r3, #0]
 80114a8:	4403      	add	r3, r0
 80114aa:	2b0a      	cmp	r3, #10
 80114ac:	dc02      	bgt.n	80114b4 <ip4_reass+0x54>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80114ae:	4b6c      	ldr	r3, [pc, #432]	; (8011660 <ip4_reass+0x200>)
 80114b0:	681c      	ldr	r4, [r3, #0]
 80114b2:	e00d      	b.n	80114d0 <ip4_reass+0x70>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80114b4:	4601      	mov	r1, r0
 80114b6:	4628      	mov	r0, r5
 80114b8:	f7ff fe3c 	bl	8011134 <ip_reass_remove_oldest_datagram>
 80114bc:	2800      	cmp	r0, #0
 80114be:	f000 80ae 	beq.w	801161e <ip4_reass+0x1be>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80114c2:	4b66      	ldr	r3, [pc, #408]	; (801165c <ip4_reass+0x1fc>)
 80114c4:	881b      	ldrh	r3, [r3, #0]
 80114c6:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80114c8:	2b0a      	cmp	r3, #10
 80114ca:	ddf0      	ble.n	80114ae <ip4_reass+0x4e>
 80114cc:	e0a7      	b.n	801161e <ip4_reass+0x1be>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80114ce:	6824      	ldr	r4, [r4, #0]
 80114d0:	b15c      	cbz	r4, 80114ea <ip4_reass+0x8a>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80114d2:	6962      	ldr	r2, [r4, #20]
 80114d4:	68eb      	ldr	r3, [r5, #12]
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d1f9      	bne.n	80114ce <ip4_reass+0x6e>
 80114da:	69a2      	ldr	r2, [r4, #24]
 80114dc:	692b      	ldr	r3, [r5, #16]
 80114de:	429a      	cmp	r2, r3
 80114e0:	d1f5      	bne.n	80114ce <ip4_reass+0x6e>
 80114e2:	89a2      	ldrh	r2, [r4, #12]
 80114e4:	88ab      	ldrh	r3, [r5, #4]
 80114e6:	429a      	cmp	r2, r3
 80114e8:	d1f1      	bne.n	80114ce <ip4_reass+0x6e>
  if (ipr == NULL) {
 80114ea:	b374      	cbz	r4, 801154a <ip4_reass+0xea>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80114ec:	88e8      	ldrh	r0, [r5, #6]
 80114ee:	f7f5 fac5 	bl	8006a7c <lwip_htons>
 80114f2:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80114f6:	b380      	cbz	r0, 801155a <ip4_reass+0xfa>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80114f8:	88ed      	ldrh	r5, [r5, #6]
 80114fa:	f005 0520 	and.w	r5, r5, #32
 80114fe:	2d00      	cmp	r5, #0
 8011500:	bf0c      	ite	eq
 8011502:	2201      	moveq	r2, #1
 8011504:	2200      	movne	r2, #0
  if (is_last) {
 8011506:	d109      	bne.n	801151c <ip4_reass+0xbc>
    u16_t datagram_len = (u16_t)(offset + len);
 8011508:	eb08 0307 	add.w	r3, r8, r7
 801150c:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801150e:	4598      	cmp	r8, r3
 8011510:	f200 8082 	bhi.w	8011618 <ip4_reass+0x1b8>
 8011514:	f64f 71eb 	movw	r1, #65515	; 0xffeb
 8011518:	428b      	cmp	r3, r1
 801151a:	d87d      	bhi.n	8011618 <ip4_reass+0x1b8>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801151c:	4631      	mov	r1, r6
 801151e:	4620      	mov	r0, r4
 8011520:	f7ff fe76 	bl	8011210 <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011524:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011528:	d076      	beq.n	8011618 <ip4_reass+0x1b8>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801152a:	4b4c      	ldr	r3, [pc, #304]	; (801165c <ip4_reass+0x1fc>)
 801152c:	881a      	ldrh	r2, [r3, #0]
 801152e:	4491      	add	r9, r2
 8011530:	f8a3 9000 	strh.w	r9, [r3]
  if (is_last) {
 8011534:	b92d      	cbnz	r5, 8011542 <ip4_reass+0xe2>
    u16_t datagram_len = (u16_t)(offset + len);
 8011536:	4447      	add	r7, r8
    ipr->datagram_len = datagram_len;
 8011538:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801153a:	7fa3      	ldrb	r3, [r4, #30]
 801153c:	f043 0301 	orr.w	r3, r3, #1
 8011540:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011542:	2801      	cmp	r0, #1
 8011544:	d01b      	beq.n	801157e <ip4_reass+0x11e>
  return NULL;
 8011546:	2500      	movs	r5, #0
 8011548:	e06d      	b.n	8011626 <ip4_reass+0x1c6>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801154a:	4649      	mov	r1, r9
 801154c:	4628      	mov	r0, r5
 801154e:	f7ff ff3f 	bl	80113d0 <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 8011552:	4604      	mov	r4, r0
 8011554:	2800      	cmp	r0, #0
 8011556:	d1cf      	bne.n	80114f8 <ip4_reass+0x98>
 8011558:	e061      	b.n	801161e <ip4_reass+0x1be>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801155a:	89e0      	ldrh	r0, [r4, #14]
 801155c:	f7f5 fa8e 	bl	8006a7c <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011560:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8011564:	2800      	cmp	r0, #0
 8011566:	d0c7      	beq.n	80114f8 <ip4_reass+0x98>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011568:	682b      	ldr	r3, [r5, #0]
 801156a:	6868      	ldr	r0, [r5, #4]
 801156c:	68a9      	ldr	r1, [r5, #8]
 801156e:	68ea      	ldr	r2, [r5, #12]
 8011570:	60a3      	str	r3, [r4, #8]
 8011572:	60e0      	str	r0, [r4, #12]
 8011574:	6121      	str	r1, [r4, #16]
 8011576:	6162      	str	r2, [r4, #20]
 8011578:	692b      	ldr	r3, [r5, #16]
 801157a:	61a3      	str	r3, [r4, #24]
 801157c:	e7bc      	b.n	80114f8 <ip4_reass+0x98>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801157e:	8ba0      	ldrh	r0, [r4, #28]
 8011580:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011582:	6863      	ldr	r3, [r4, #4]
 8011584:	685d      	ldr	r5, [r3, #4]
 8011586:	682e      	ldr	r6, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011588:	4623      	mov	r3, r4
 801158a:	f853 2f08 	ldr.w	r2, [r3, #8]!
 801158e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8011592:	689f      	ldr	r7, [r3, #8]
 8011594:	68d9      	ldr	r1, [r3, #12]
 8011596:	602a      	str	r2, [r5, #0]
 8011598:	f8c5 c004 	str.w	ip, [r5, #4]
 801159c:	60af      	str	r7, [r5, #8]
 801159e:	60e9      	str	r1, [r5, #12]
 80115a0:	691a      	ldr	r2, [r3, #16]
 80115a2:	612a      	str	r2, [r5, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80115a4:	b280      	uxth	r0, r0
 80115a6:	f7f5 fa69 	bl	8006a7c <lwip_htons>
 80115aa:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80115ac:	2300      	movs	r3, #0
 80115ae:	71ab      	strb	r3, [r5, #6]
 80115b0:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80115b2:	72ab      	strb	r3, [r5, #10]
 80115b4:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 80115b6:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 80115b8:	e009      	b.n	80115ce <ip4_reass+0x16e>
      iprh = (struct ip_reass_helper *)r->payload;
 80115ba:	6877      	ldr	r7, [r6, #4]
      pbuf_remove_header(r, IP_HLEN);
 80115bc:	2114      	movs	r1, #20
 80115be:	4630      	mov	r0, r6
 80115c0:	f7f6 fd50 	bl	8008064 <pbuf_remove_header>
      pbuf_cat(p, r);
 80115c4:	4631      	mov	r1, r6
 80115c6:	4628      	mov	r0, r5
 80115c8:	f7f6 ff16 	bl	80083f8 <pbuf_cat>
      r = iprh->next_pbuf;
 80115cc:	683e      	ldr	r6, [r7, #0]
    while (r != NULL) {
 80115ce:	2e00      	cmp	r6, #0
 80115d0:	d1f3      	bne.n	80115ba <ip4_reass+0x15a>
    if (ipr == reassdatagrams) {
 80115d2:	4b23      	ldr	r3, [pc, #140]	; (8011660 <ip4_reass+0x200>)
 80115d4:	6819      	ldr	r1, [r3, #0]
 80115d6:	428c      	cmp	r4, r1
 80115d8:	d005      	beq.n	80115e6 <ip4_reass+0x186>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80115da:	b129      	cbz	r1, 80115e8 <ip4_reass+0x188>
        if (ipr_prev->next == ipr) {
 80115dc:	680b      	ldr	r3, [r1, #0]
 80115de:	429c      	cmp	r4, r3
 80115e0:	d002      	beq.n	80115e8 <ip4_reass+0x188>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80115e2:	4619      	mov	r1, r3
 80115e4:	e7f9      	b.n	80115da <ip4_reass+0x17a>
      ipr_prev = NULL;
 80115e6:	4631      	mov	r1, r6
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80115e8:	4620      	mov	r0, r4
 80115ea:	f7ff fd03 	bl	8010ff4 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 80115ee:	4628      	mov	r0, r5
 80115f0:	f7f6 fee2 	bl	80083b8 <pbuf_clen>
 80115f4:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80115f6:	4b19      	ldr	r3, [pc, #100]	; (801165c <ip4_reass+0x1fc>)
 80115f8:	881b      	ldrh	r3, [r3, #0]
 80115fa:	4283      	cmp	r3, r0
 80115fc:	d304      	bcc.n	8011608 <ip4_reass+0x1a8>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80115fe:	4a17      	ldr	r2, [pc, #92]	; (801165c <ip4_reass+0x1fc>)
 8011600:	8813      	ldrh	r3, [r2, #0]
 8011602:	1b1c      	subs	r4, r3, r4
 8011604:	8014      	strh	r4, [r2, #0]
    return p;
 8011606:	e00e      	b.n	8011626 <ip4_reass+0x1c6>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011608:	4b16      	ldr	r3, [pc, #88]	; (8011664 <ip4_reass+0x204>)
 801160a:	f240 229b 	movw	r2, #667	; 0x29b
 801160e:	4916      	ldr	r1, [pc, #88]	; (8011668 <ip4_reass+0x208>)
 8011610:	4816      	ldr	r0, [pc, #88]	; (801166c <ip4_reass+0x20c>)
 8011612:	f004 f9bd 	bl	8015990 <iprintf>
 8011616:	e7f2      	b.n	80115fe <ip4_reass+0x19e>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011618:	b144      	cbz	r4, 801162c <ip4_reass+0x1cc>
  if (ipr->p == NULL) {
 801161a:	6863      	ldr	r3, [r4, #4]
 801161c:	b173      	cbz	r3, 801163c <ip4_reass+0x1dc>
  pbuf_free(p);
 801161e:	4630      	mov	r0, r6
 8011620:	f7f6 fd66 	bl	80080f0 <pbuf_free>
  return NULL;
 8011624:	2500      	movs	r5, #0
}
 8011626:	4628      	mov	r0, r5
 8011628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801162c:	4b0d      	ldr	r3, [pc, #52]	; (8011664 <ip4_reass+0x204>)
 801162e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011632:	490f      	ldr	r1, [pc, #60]	; (8011670 <ip4_reass+0x210>)
 8011634:	480d      	ldr	r0, [pc, #52]	; (801166c <ip4_reass+0x20c>)
 8011636:	f004 f9ab 	bl	8015990 <iprintf>
 801163a:	e7ee      	b.n	801161a <ip4_reass+0x1ba>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801163c:	4b08      	ldr	r3, [pc, #32]	; (8011660 <ip4_reass+0x200>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	429c      	cmp	r4, r3
 8011642:	d006      	beq.n	8011652 <ip4_reass+0x1f2>
 8011644:	4b07      	ldr	r3, [pc, #28]	; (8011664 <ip4_reass+0x204>)
 8011646:	f240 22ab 	movw	r2, #683	; 0x2ab
 801164a:	490a      	ldr	r1, [pc, #40]	; (8011674 <ip4_reass+0x214>)
 801164c:	4807      	ldr	r0, [pc, #28]	; (801166c <ip4_reass+0x20c>)
 801164e:	f004 f99f 	bl	8015990 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8011652:	2100      	movs	r1, #0
 8011654:	4620      	mov	r0, r4
 8011656:	f7ff fccd 	bl	8010ff4 <ip_reass_dequeue_datagram>
 801165a:	e7e0      	b.n	801161e <ip4_reass+0x1be>
 801165c:	20000bde 	.word	0x20000bde
 8011660:	20000be0 	.word	0x20000be0
 8011664:	0801a504 	.word	0x0801a504
 8011668:	0801a658 	.word	0x0801a658
 801166c:	08016bb4 	.word	0x08016bb4
 8011670:	0801a674 	.word	0x0801a674
 8011674:	0801a680 	.word	0x0801a680

08011678 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801167c:	b08b      	sub	sp, #44	; 0x2c
 801167e:	4606      	mov	r6, r0
 8011680:	9106      	str	r1, [sp, #24]
 8011682:	9208      	str	r2, [sp, #32]
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011684:	f8b1 30d4 	ldrh.w	r3, [r1, #212]	; 0xd4
 8011688:	3b14      	subs	r3, #20
 801168a:	d450      	bmi.n	801172e <ip4_frag+0xb6>
 801168c:	f3c3 03cf 	ubfx	r3, r3, #3, #16
 8011690:	9304      	str	r3, [sp, #16]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011692:	f8d6 b004 	ldr.w	fp, [r6, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011696:	f89b 3000 	ldrb.w	r3, [fp]
 801169a:	f003 030f 	and.w	r3, r3, #15
 801169e:	2b05      	cmp	r3, #5
 80116a0:	f040 80d5 	bne.w	801184e <ip4_frag+0x1d6>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80116a4:	8973      	ldrh	r3, [r6, #10]
 80116a6:	2b13      	cmp	r3, #19
 80116a8:	d943      	bls.n	8011732 <ip4_frag+0xba>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80116aa:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80116ae:	f7f5 f9e5 	bl	8006a7c <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 80116b2:	f3c0 030c 	ubfx	r3, r0, #0, #13
 80116b6:	9305      	str	r3, [sp, #20]
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80116b8:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 80116bc:	9309      	str	r3, [sp, #36]	; 0x24

  left = (u16_t)(p->tot_len - IP_HLEN);
 80116be:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 80116c2:	f1aa 0a14 	sub.w	sl, sl, #20
 80116c6:	fa1f f38a 	uxth.w	r3, sl
 80116ca:	9302      	str	r3, [sp, #8]
  u16_t poff = IP_HLEN;
 80116cc:	2714      	movs	r7, #20
  u16_t newpbuflen = 0;
 80116ce:	2400      	movs	r4, #0

  while (left) {
 80116d0:	9b02      	ldr	r3, [sp, #8]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	f000 80b9 	beq.w	801184a <ip4_frag+0x1d2>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80116d8:	9b04      	ldr	r3, [sp, #16]
 80116da:	00db      	lsls	r3, r3, #3
 80116dc:	b29b      	uxth	r3, r3
 80116de:	9a02      	ldr	r2, [sp, #8]
 80116e0:	4293      	cmp	r3, r2
 80116e2:	bf28      	it	cs
 80116e4:	4613      	movcs	r3, r2
 80116e6:	9303      	str	r3, [sp, #12]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80116e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80116ec:	2114      	movs	r1, #20
 80116ee:	200e      	movs	r0, #14
 80116f0:	f7f6 fd60 	bl	80081b4 <pbuf_alloc>
    if (rambuf == NULL) {
 80116f4:	4682      	mov	sl, r0
 80116f6:	2800      	cmp	r0, #0
 80116f8:	f000 80ac 	beq.w	8011854 <ip4_frag+0x1dc>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80116fc:	8943      	ldrh	r3, [r0, #10]
 80116fe:	2b13      	cmp	r3, #19
 8011700:	d921      	bls.n	8011746 <ip4_frag+0xce>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011702:	f8da 3004 	ldr.w	r3, [sl, #4]
 8011706:	f8db 2000 	ldr.w	r2, [fp]
 801170a:	f8db 5004 	ldr.w	r5, [fp, #4]
 801170e:	f8db 0008 	ldr.w	r0, [fp, #8]
 8011712:	f8db 100c 	ldr.w	r1, [fp, #12]
 8011716:	601a      	str	r2, [r3, #0]
 8011718:	605d      	str	r5, [r3, #4]
 801171a:	6098      	str	r0, [r3, #8]
 801171c:	60d9      	str	r1, [r3, #12]
 801171e:	f8db 2010 	ldr.w	r2, [fp, #16]
 8011722:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011724:	f8da 3004 	ldr.w	r3, [sl, #4]
 8011728:	9307      	str	r3, [sp, #28]

    left_to_copy = fragsize;
 801172a:	9d03      	ldr	r5, [sp, #12]
    while (left_to_copy) {
 801172c:	e03c      	b.n	80117a8 <ip4_frag+0x130>
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801172e:	3307      	adds	r3, #7
 8011730:	e7ac      	b.n	801168c <ip4_frag+0x14>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011732:	4b4a      	ldr	r3, [pc, #296]	; (801185c <ip4_frag+0x1e4>)
 8011734:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8011738:	4949      	ldr	r1, [pc, #292]	; (8011860 <ip4_frag+0x1e8>)
 801173a:	484a      	ldr	r0, [pc, #296]	; (8011864 <ip4_frag+0x1ec>)
 801173c:	f004 f928 	bl	8015990 <iprintf>
 8011740:	f06f 0005 	mvn.w	r0, #5
 8011744:	e043      	b.n	80117ce <ip4_frag+0x156>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011746:	4b45      	ldr	r3, [pc, #276]	; (801185c <ip4_frag+0x1e4>)
 8011748:	f44f 7249 	mov.w	r2, #804	; 0x324
 801174c:	4946      	ldr	r1, [pc, #280]	; (8011868 <ip4_frag+0x1f0>)
 801174e:	4845      	ldr	r0, [pc, #276]	; (8011864 <ip4_frag+0x1ec>)
 8011750:	f004 f91e 	bl	8015990 <iprintf>
 8011754:	e7d5      	b.n	8011702 <ip4_frag+0x8a>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011756:	4b41      	ldr	r3, [pc, #260]	; (801185c <ip4_frag+0x1e4>)
 8011758:	f240 322d 	movw	r2, #813	; 0x32d
 801175c:	4943      	ldr	r1, [pc, #268]	; (801186c <ip4_frag+0x1f4>)
 801175e:	4841      	ldr	r0, [pc, #260]	; (8011864 <ip4_frag+0x1ec>)
 8011760:	f004 f916 	bl	8015990 <iprintf>
 8011764:	e026      	b.n	80117b4 <ip4_frag+0x13c>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011766:	f7ff fe2d 	bl	80113c4 <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 801176a:	4680      	mov	r8, r0
 801176c:	b350      	cbz	r0, 80117c4 <ip4_frag+0x14c>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
                                    (u8_t *)p->payload + poff, newpbuflen);
 801176e:	6873      	ldr	r3, [r6, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011770:	9401      	str	r4, [sp, #4]
 8011772:	443b      	add	r3, r7
 8011774:	9300      	str	r3, [sp, #0]
 8011776:	4603      	mov	r3, r0
 8011778:	2241      	movs	r2, #65	; 0x41
 801177a:	4621      	mov	r1, r4
 801177c:	2000      	movs	r0, #0
 801177e:	f7f6 fc49 	bl	8008014 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8011782:	4681      	mov	r9, r0
 8011784:	b330      	cbz	r0, 80117d4 <ip4_frag+0x15c>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8011786:	4630      	mov	r0, r6
 8011788:	f7f6 fe1e 	bl	80083c8 <pbuf_ref>
      pcr->original = p;
 801178c:	f8c8 6014 	str.w	r6, [r8, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011790:	4b37      	ldr	r3, [pc, #220]	; (8011870 <ip4_frag+0x1f8>)
 8011792:	f8c8 3010 	str.w	r3, [r8, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011796:	4649      	mov	r1, r9
 8011798:	4650      	mov	r0, sl
 801179a:	f7f6 fe2d 	bl	80083f8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801179e:	1b2d      	subs	r5, r5, r4
 80117a0:	b2ad      	uxth	r5, r5
      if (left_to_copy) {
 80117a2:	b10d      	cbz	r5, 80117a8 <ip4_frag+0x130>
        poff = 0;
        p = p->next;
 80117a4:	6836      	ldr	r6, [r6, #0]
        poff = 0;
 80117a6:	2700      	movs	r7, #0
    while (left_to_copy) {
 80117a8:	b1ed      	cbz	r5, 80117e6 <ip4_frag+0x16e>
      u16_t plen = (u16_t)(p->len - poff);
 80117aa:	8973      	ldrh	r3, [r6, #10]
 80117ac:	1bdc      	subs	r4, r3, r7
 80117ae:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80117b0:	42bb      	cmp	r3, r7
 80117b2:	d3d0      	bcc.n	8011756 <ip4_frag+0xde>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80117b4:	42ac      	cmp	r4, r5
 80117b6:	bf28      	it	cs
 80117b8:	462c      	movcs	r4, r5
      if (!newpbuflen) {
 80117ba:	2c00      	cmp	r4, #0
 80117bc:	d1d3      	bne.n	8011766 <ip4_frag+0xee>
        p = p->next;
 80117be:	6836      	ldr	r6, [r6, #0]
        poff = 0;
 80117c0:	4627      	mov	r7, r4
        continue;
 80117c2:	e7f1      	b.n	80117a8 <ip4_frag+0x130>
        pbuf_free(rambuf);
 80117c4:	4650      	mov	r0, sl
 80117c6:	f7f6 fc93 	bl	80080f0 <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80117ca:	f04f 30ff 	mov.w	r0, #4294967295
}
 80117ce:	b00b      	add	sp, #44	; 0x2c
 80117d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 80117d4:	4640      	mov	r0, r8
 80117d6:	f7ff fceb 	bl	80111b0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80117da:	4650      	mov	r0, sl
 80117dc:	f7f6 fc88 	bl	80080f0 <pbuf_free>
  return ERR_MEM;
 80117e0:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 80117e4:	e7f3      	b.n	80117ce <ip4_frag+0x156>
    poff = (u16_t)(poff + newpbuflen);
 80117e6:	4427      	add	r7, r4
 80117e8:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 80117ea:	9b06      	ldr	r3, [sp, #24]
 80117ec:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 80117f0:	3b13      	subs	r3, #19
    tmp = (IP_OFFMASK & (ofo));
 80117f2:	9a05      	ldr	r2, [sp, #20]
 80117f4:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 80117f8:	9a02      	ldr	r2, [sp, #8]
 80117fa:	4293      	cmp	r3, r2
 80117fc:	dd01      	ble.n	8011802 <ip4_frag+0x18a>
 80117fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011800:	b10b      	cbz	r3, 8011806 <ip4_frag+0x18e>
      tmp = tmp | IP_MF;
 8011802:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011806:	f7f5 f939 	bl	8006a7c <lwip_htons>
 801180a:	9d07      	ldr	r5, [sp, #28]
 801180c:	80e8      	strh	r0, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801180e:	9b03      	ldr	r3, [sp, #12]
 8011810:	f103 0014 	add.w	r0, r3, #20
 8011814:	b280      	uxth	r0, r0
 8011816:	f7f5 f931 	bl	8006a7c <lwip_htons>
 801181a:	8068      	strh	r0, [r5, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801181c:	2300      	movs	r3, #0
 801181e:	72ab      	strb	r3, [r5, #10]
 8011820:	72eb      	strb	r3, [r5, #11]
    netif->output(netif, rambuf, dest);
 8011822:	9806      	ldr	r0, [sp, #24]
 8011824:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 8011828:	9a08      	ldr	r2, [sp, #32]
 801182a:	4651      	mov	r1, sl
 801182c:	4798      	blx	r3
    pbuf_free(rambuf);
 801182e:	4650      	mov	r0, sl
 8011830:	f7f6 fc5e 	bl	80080f0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8011834:	9a02      	ldr	r2, [sp, #8]
 8011836:	9b03      	ldr	r3, [sp, #12]
 8011838:	1ad3      	subs	r3, r2, r3
 801183a:	b29b      	uxth	r3, r3
 801183c:	9302      	str	r3, [sp, #8]
    ofo = (u16_t)(ofo + nfb);
 801183e:	9b05      	ldr	r3, [sp, #20]
 8011840:	9a04      	ldr	r2, [sp, #16]
 8011842:	4413      	add	r3, r2
 8011844:	b29b      	uxth	r3, r3
 8011846:	9305      	str	r3, [sp, #20]
 8011848:	e742      	b.n	80116d0 <ip4_frag+0x58>
  return ERR_OK;
 801184a:	2000      	movs	r0, #0
 801184c:	e7bf      	b.n	80117ce <ip4_frag+0x156>
    return ERR_VAL;
 801184e:	f06f 0005 	mvn.w	r0, #5
 8011852:	e7bc      	b.n	80117ce <ip4_frag+0x156>
  return ERR_MEM;
 8011854:	f04f 30ff 	mov.w	r0, #4294967295
 8011858:	e7b9      	b.n	80117ce <ip4_frag+0x156>
 801185a:	bf00      	nop
 801185c:	0801a504 	.word	0x0801a504
 8011860:	0801a6a0 	.word	0x0801a6a0
 8011864:	08016bb4 	.word	0x08016bb4
 8011868:	0801a6bc 	.word	0x0801a6bc
 801186c:	0801a6dc 	.word	0x0801a6dc
 8011870:	080111dd 	.word	0x080111dd

08011874 <ethip6_output>:
 * @return
 * - ERR_OK or the return value of @ref nd6_get_next_hop_addr_or_queue.
 */
err_t
ethip6_output(struct netif *netif, struct pbuf *q, const ip6_addr_t *ip6addr)
{
 8011874:	b530      	push	{r4, r5, lr}
 8011876:	b087      	sub	sp, #28
 8011878:	4604      	mov	r4, r0
 801187a:	460d      	mov	r5, r1

  /* The destination IP address must be properly zoned from here on down. */
  IP6_ADDR_ZONECHECK_NETIF(ip6addr, netif);

  /* multicast destination IP address? */
  if (ip6_addr_ismulticast(ip6addr)) {
 801187c:	7813      	ldrb	r3, [r2, #0]
 801187e:	2bff      	cmp	r3, #255	; 0xff
 8011880:	d016      	beq.n	80118b0 <ethip6_output+0x3c>

  /* We have a unicast destination IP address */
  /* @todo anycast? */

  /* Ask ND6 what to do with the packet. */
  result = nd6_get_next_hop_addr_or_queue(netif, q, ip6addr, &hwaddr);
 8011882:	ab03      	add	r3, sp, #12
 8011884:	f003 fdf4 	bl	8015470 <nd6_get_next_hop_addr_or_queue>
  if (result != ERR_OK) {
 8011888:	b980      	cbnz	r0, 80118ac <ethip6_output+0x38>
    return result;
  }

  /* If no hardware address is returned, nd6 has queued the packet for later. */
  if (hwaddr == NULL) {
 801188a:	9b03      	ldr	r3, [sp, #12]
 801188c:	b173      	cbz	r3, 80118ac <ethip6_output+0x38>
    return ERR_OK;
  }

  /* Send out the packet using the returned hardware address. */
  SMEMCPY(dest.addr, hwaddr, 6);
 801188e:	6818      	ldr	r0, [r3, #0]
 8011890:	9004      	str	r0, [sp, #16]
 8011892:	889b      	ldrh	r3, [r3, #4]
 8011894:	f8ad 3014 	strh.w	r3, [sp, #20]
  return ethernet_output(netif, q, (const struct eth_addr*)(netif->hwaddr), &dest, ETHTYPE_IPV6);
 8011898:	f248 63dd 	movw	r3, #34525	; 0x86dd
 801189c:	9300      	str	r3, [sp, #0]
 801189e:	ab04      	add	r3, sp, #16
 80118a0:	f104 02d8 	add.w	r2, r4, #216	; 0xd8
 80118a4:	4629      	mov	r1, r5
 80118a6:	4620      	mov	r0, r4
 80118a8:	f003 ffd8 	bl	801585c <ethernet_output>
}
 80118ac:	b007      	add	sp, #28
 80118ae:	bd30      	pop	{r4, r5, pc}
    dest.addr[0] = 0x33;
 80118b0:	2333      	movs	r3, #51	; 0x33
 80118b2:	f88d 3010 	strb.w	r3, [sp, #16]
    dest.addr[1] = 0x33;
 80118b6:	f88d 3011 	strb.w	r3, [sp, #17]
    dest.addr[2] = ((const u8_t *)(&(ip6addr->addr[3])))[0];
 80118ba:	7b13      	ldrb	r3, [r2, #12]
 80118bc:	f88d 3012 	strb.w	r3, [sp, #18]
    dest.addr[3] = ((const u8_t *)(&(ip6addr->addr[3])))[1];
 80118c0:	7b53      	ldrb	r3, [r2, #13]
 80118c2:	f88d 3013 	strb.w	r3, [sp, #19]
    dest.addr[4] = ((const u8_t *)(&(ip6addr->addr[3])))[2];
 80118c6:	7b93      	ldrb	r3, [r2, #14]
 80118c8:	f88d 3014 	strb.w	r3, [sp, #20]
    dest.addr[5] = ((const u8_t *)(&(ip6addr->addr[3])))[3];
 80118cc:	7bd3      	ldrb	r3, [r2, #15]
 80118ce:	f88d 3015 	strb.w	r3, [sp, #21]
    return ethernet_output(netif, q, (const struct eth_addr*)(netif->hwaddr), &dest, ETHTYPE_IPV6);
 80118d2:	f248 63dd 	movw	r3, #34525	; 0x86dd
 80118d6:	9300      	str	r3, [sp, #0]
 80118d8:	ab04      	add	r3, sp, #16
 80118da:	f100 02d8 	add.w	r2, r0, #216	; 0xd8
 80118de:	f003 ffbd 	bl	801585c <ethernet_output>
 80118e2:	e7e3      	b.n	80118ac <ethip6_output+0x38>

080118e4 <icmp6_send_response_with_addrs_and_netif>:
 * @param netif netif to send the packet
 */
static void
icmp6_send_response_with_addrs_and_netif(struct pbuf *p, u8_t code, u32_t data, u8_t type,
    const ip6_addr_t *reply_src, const ip6_addr_t *reply_dest, struct netif *netif)
{
 80118e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80118e8:	b085      	sub	sp, #20
 80118ea:	4606      	mov	r6, r0
 80118ec:	4688      	mov	r8, r1
 80118ee:	4691      	mov	r9, r2
 80118f0:	461f      	mov	r7, r3
  struct pbuf *q;
  struct icmp6_hdr *icmp6hdr;

  /* ICMPv6 header + IPv6 header + data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp6_hdr) + IP6_HLEN + LWIP_ICMP6_DATASIZE,
 80118f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80118f6:	2138      	movs	r1, #56	; 0x38
 80118f8:	2036      	movs	r0, #54	; 0x36
 80118fa:	f7f6 fc5b 	bl	80081b4 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 80118fe:	b378      	cbz	r0, 8011960 <icmp6_send_response_with_addrs_and_netif+0x7c>
 8011900:	4604      	mov	r4, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMPv6 packet.\n"));
    ICMP6_STATS_INC(icmp6.memerr);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp 6message",
 8011902:	8943      	ldrh	r3, [r0, #10]
 8011904:	2b37      	cmp	r3, #55	; 0x37
 8011906:	d92e      	bls.n	8011966 <icmp6_send_response_with_addrs_and_netif+0x82>
             (q->len >= (sizeof(struct icmp6_hdr) + IP6_HLEN + LWIP_ICMP6_DATASIZE)));

  icmp6hdr = (struct icmp6_hdr *)q->payload;
 8011908:	6865      	ldr	r5, [r4, #4]
  icmp6hdr->type = type;
 801190a:	702f      	strb	r7, [r5, #0]
  icmp6hdr->code = code;
 801190c:	f885 8001 	strb.w	r8, [r5, #1]
  icmp6hdr->data = lwip_htonl(data);
 8011910:	4648      	mov	r0, r9
 8011912:	f7f5 f8b8 	bl	8006a86 <lwip_htonl>
 8011916:	6068      	str	r0, [r5, #4]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp6_hdr), (u8_t *)p->payload,
 8011918:	6863      	ldr	r3, [r4, #4]
 801191a:	6871      	ldr	r1, [r6, #4]
 801191c:	460a      	mov	r2, r1
 801191e:	3308      	adds	r3, #8
 8011920:	3130      	adds	r1, #48	; 0x30
 8011922:	f8d2 c000 	ldr.w	ip, [r2]
 8011926:	6857      	ldr	r7, [r2, #4]
 8011928:	6896      	ldr	r6, [r2, #8]
 801192a:	68d0      	ldr	r0, [r2, #12]
 801192c:	f8c3 c000 	str.w	ip, [r3]
 8011930:	605f      	str	r7, [r3, #4]
 8011932:	609e      	str	r6, [r3, #8]
 8011934:	60d8      	str	r0, [r3, #12]
 8011936:	3210      	adds	r2, #16
 8011938:	3310      	adds	r3, #16
 801193a:	428a      	cmp	r2, r1
 801193c:	d1f1      	bne.n	8011922 <icmp6_send_response_with_addrs_and_netif+0x3e>
          IP6_HLEN + LWIP_ICMP6_DATASIZE);

  /* calculate checksum */
  icmp6hdr->chksum = 0;
 801193e:	2300      	movs	r3, #0
 8011940:	70ab      	strb	r3, [r5, #2]
 8011942:	70eb      	strb	r3, [r5, #3]
      reply_src, reply_dest);
  }
#endif /* CHECKSUM_GEN_ICMP6 */

  ICMP6_STATS_INC(icmp6.xmit);
  ip6_output_if(q, reply_src, reply_dest, LWIP_ICMP6_HL, 0, IP6_NEXTH_ICMP6, netif);
 8011944:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011946:	9202      	str	r2, [sp, #8]
 8011948:	223a      	movs	r2, #58	; 0x3a
 801194a:	9201      	str	r2, [sp, #4]
 801194c:	9300      	str	r3, [sp, #0]
 801194e:	23ff      	movs	r3, #255	; 0xff
 8011950:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011952:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011954:	4620      	mov	r0, r4
 8011956:	f000 fed5 	bl	8012704 <ip6_output_if>
  pbuf_free(q);
 801195a:	4620      	mov	r0, r4
 801195c:	f7f6 fbc8 	bl	80080f0 <pbuf_free>
}
 8011960:	b005      	add	sp, #20
 8011962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp 6message",
 8011966:	4b04      	ldr	r3, [pc, #16]	; (8011978 <icmp6_send_response_with_addrs_and_netif+0x94>)
 8011968:	f240 128f 	movw	r2, #399	; 0x18f
 801196c:	4903      	ldr	r1, [pc, #12]	; (801197c <icmp6_send_response_with_addrs_and_netif+0x98>)
 801196e:	4804      	ldr	r0, [pc, #16]	; (8011980 <icmp6_send_response_with_addrs_and_netif+0x9c>)
 8011970:	f004 f80e 	bl	8015990 <iprintf>
 8011974:	e7c8      	b.n	8011908 <icmp6_send_response_with_addrs_and_netif+0x24>
 8011976:	bf00      	nop
 8011978:	0801a6ec 	.word	0x0801a6ec
 801197c:	0801a724 	.word	0x0801a724
 8011980:	08016bb4 	.word	0x08016bb4

08011984 <icmp6_send_response>:
{
 8011984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011988:	b084      	sub	sp, #16
 801198a:	4604      	mov	r4, r0
 801198c:	460d      	mov	r5, r1
 801198e:	4690      	mov	r8, r2
 8011990:	461f      	mov	r7, r3
  struct netif *netif = ip_current_netif();
 8011992:	490e      	ldr	r1, [pc, #56]	; (80119cc <icmp6_send_response+0x48>)
 8011994:	680e      	ldr	r6, [r1, #0]
  LWIP_ASSERT("icmpv6 packet not a direct response", netif != NULL);
 8011996:	b18e      	cbz	r6, 80119bc <icmp6_send_response+0x38>
  reply_src = ip_2_ip6(ip6_select_source_address(netif, reply_dest));
 8011998:	490d      	ldr	r1, [pc, #52]	; (80119d0 <icmp6_send_response+0x4c>)
 801199a:	4630      	mov	r0, r6
 801199c:	f000 fa7a 	bl	8011e94 <ip6_select_source_address>
  if (reply_src == NULL) {
 80119a0:	b148      	cbz	r0, 80119b6 <icmp6_send_response+0x32>
  icmp6_send_response_with_addrs_and_netif(p, code, data, type, reply_src, reply_dest, netif);
 80119a2:	9602      	str	r6, [sp, #8]
 80119a4:	4a0a      	ldr	r2, [pc, #40]	; (80119d0 <icmp6_send_response+0x4c>)
 80119a6:	9201      	str	r2, [sp, #4]
 80119a8:	9000      	str	r0, [sp, #0]
 80119aa:	463b      	mov	r3, r7
 80119ac:	4642      	mov	r2, r8
 80119ae:	4629      	mov	r1, r5
 80119b0:	4620      	mov	r0, r4
 80119b2:	f7ff ff97 	bl	80118e4 <icmp6_send_response_with_addrs_and_netif>
}
 80119b6:	b004      	add	sp, #16
 80119b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("icmpv6 packet not a direct response", netif != NULL);
 80119bc:	4b05      	ldr	r3, [pc, #20]	; (80119d4 <icmp6_send_response+0x50>)
 80119be:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80119c2:	4905      	ldr	r1, [pc, #20]	; (80119d8 <icmp6_send_response+0x54>)
 80119c4:	4805      	ldr	r0, [pc, #20]	; (80119dc <icmp6_send_response+0x58>)
 80119c6:	f003 ffe3 	bl	8015990 <iprintf>
 80119ca:	e7e5      	b.n	8011998 <icmp6_send_response+0x14>
 80119cc:	20003e34 	.word	0x20003e34
 80119d0:	20003e48 	.word	0x20003e48
 80119d4:	0801a6ec 	.word	0x0801a6ec
 80119d8:	0801a754 	.word	0x0801a754
 80119dc:	08016bb4 	.word	0x08016bb4

080119e0 <icmp6_send_response_with_addrs>:
{
 80119e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80119e4:	b085      	sub	sp, #20
 80119e6:	4604      	mov	r4, r0
 80119e8:	460d      	mov	r5, r1
 80119ea:	4691      	mov	r9, r2
 80119ec:	461e      	mov	r6, r3
 80119ee:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80119f2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  LWIP_ASSERT("must provide both source and destination", src_addr != NULL);
 80119f4:	f1b8 0f00 	cmp.w	r8, #0
 80119f8:	d012      	beq.n	8011a20 <icmp6_send_response_with_addrs+0x40>
  LWIP_ASSERT("must provide both source and destination", dest_addr != NULL);
 80119fa:	b1cf      	cbz	r7, 8011a30 <icmp6_send_response_with_addrs+0x50>
  netif = ip6_route(reply_src, reply_dest);
 80119fc:	4641      	mov	r1, r8
 80119fe:	4638      	mov	r0, r7
 8011a00:	f000 f8f8 	bl	8011bf4 <ip6_route>
  if (netif == NULL) {
 8011a04:	b148      	cbz	r0, 8011a1a <icmp6_send_response_with_addrs+0x3a>
  icmp6_send_response_with_addrs_and_netif(p, code, data, type, reply_src,
 8011a06:	9002      	str	r0, [sp, #8]
 8011a08:	f8cd 8004 	str.w	r8, [sp, #4]
 8011a0c:	9700      	str	r7, [sp, #0]
 8011a0e:	4633      	mov	r3, r6
 8011a10:	464a      	mov	r2, r9
 8011a12:	4629      	mov	r1, r5
 8011a14:	4620      	mov	r0, r4
 8011a16:	f7ff ff65 	bl	80118e4 <icmp6_send_response_with_addrs_and_netif>
}
 8011a1a:	b005      	add	sp, #20
 8011a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("must provide both source and destination", src_addr != NULL);
 8011a20:	4b07      	ldr	r3, [pc, #28]	; (8011a40 <icmp6_send_response_with_addrs+0x60>)
 8011a22:	f240 1261 	movw	r2, #353	; 0x161
 8011a26:	4907      	ldr	r1, [pc, #28]	; (8011a44 <icmp6_send_response_with_addrs+0x64>)
 8011a28:	4807      	ldr	r0, [pc, #28]	; (8011a48 <icmp6_send_response_with_addrs+0x68>)
 8011a2a:	f003 ffb1 	bl	8015990 <iprintf>
 8011a2e:	e7e4      	b.n	80119fa <icmp6_send_response_with_addrs+0x1a>
  LWIP_ASSERT("must provide both source and destination", dest_addr != NULL);
 8011a30:	4b03      	ldr	r3, [pc, #12]	; (8011a40 <icmp6_send_response_with_addrs+0x60>)
 8011a32:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8011a36:	4903      	ldr	r1, [pc, #12]	; (8011a44 <icmp6_send_response_with_addrs+0x64>)
 8011a38:	4803      	ldr	r0, [pc, #12]	; (8011a48 <icmp6_send_response_with_addrs+0x68>)
 8011a3a:	f003 ffa9 	bl	8015990 <iprintf>
 8011a3e:	e7dd      	b.n	80119fc <icmp6_send_response_with_addrs+0x1c>
 8011a40:	0801a6ec 	.word	0x0801a6ec
 8011a44:	0801a778 	.word	0x0801a778
 8011a48:	08016bb4 	.word	0x08016bb4

08011a4c <icmp6_input>:
{
 8011a4c:	b570      	push	{r4, r5, r6, lr}
 8011a4e:	b084      	sub	sp, #16
 8011a50:	4604      	mov	r4, r0
  if (p->len < sizeof(struct icmp6_hdr)) {
 8011a52:	8943      	ldrh	r3, [r0, #10]
 8011a54:	2b07      	cmp	r3, #7
 8011a56:	d935      	bls.n	8011ac4 <icmp6_input+0x78>
 8011a58:	460d      	mov	r5, r1
  icmp6hdr = (struct icmp6_hdr *)p->payload;
 8011a5a:	6843      	ldr	r3, [r0, #4]
  switch (icmp6hdr->type) {
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	2b84      	cmp	r3, #132	; 0x84
 8011a60:	d833      	bhi.n	8011aca <icmp6_input+0x7e>
 8011a62:	2b82      	cmp	r3, #130	; 0x82
 8011a64:	d23a      	bcs.n	8011adc <icmp6_input+0x90>
 8011a66:	2b02      	cmp	r3, #2
 8011a68:	d033      	beq.n	8011ad2 <icmp6_input+0x86>
 8011a6a:	2b80      	cmp	r3, #128	; 0x80
 8011a6c:	d125      	bne.n	8011aba <icmp6_input+0x6e>
    if (ip6_addr_ismulticast(ip6_current_dest_addr())) {
 8011a6e:	4b24      	ldr	r3, [pc, #144]	; (8011b00 <icmp6_input+0xb4>)
 8011a70:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011a74:	2bff      	cmp	r3, #255	; 0xff
 8011a76:	d034      	beq.n	8011ae2 <icmp6_input+0x96>
    r = pbuf_alloc(PBUF_IP, p->tot_len, PBUF_RAM);
 8011a78:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a7c:	8901      	ldrh	r1, [r0, #8]
 8011a7e:	2036      	movs	r0, #54	; 0x36
 8011a80:	f7f6 fb98 	bl	80081b4 <pbuf_alloc>
    if (r == NULL) {
 8011a84:	4606      	mov	r6, r0
 8011a86:	b378      	cbz	r0, 8011ae8 <icmp6_input+0x9c>
    if (pbuf_copy(r, p) != ERR_OK) {
 8011a88:	4621      	mov	r1, r4
 8011a8a:	f7f6 fcf7 	bl	800847c <pbuf_copy>
 8011a8e:	bb78      	cbnz	r0, 8011af0 <icmp6_input+0xa4>
    ((struct icmp6_echo_hdr *)(r->payload))->type = ICMP6_TYPE_EREP;
 8011a90:	6873      	ldr	r3, [r6, #4]
 8011a92:	2281      	movs	r2, #129	; 0x81
 8011a94:	701a      	strb	r2, [r3, #0]
    ((struct icmp6_echo_hdr *)(r->payload))->chksum = 0;
 8011a96:	6872      	ldr	r2, [r6, #4]
 8011a98:	2300      	movs	r3, #0
 8011a9a:	7093      	strb	r3, [r2, #2]
 8011a9c:	70d3      	strb	r3, [r2, #3]
    ip6_output_if(r, reply_src, ip6_current_src_addr(),
 8011a9e:	4a19      	ldr	r2, [pc, #100]	; (8011b04 <icmp6_input+0xb8>)
 8011aa0:	9502      	str	r5, [sp, #8]
 8011aa2:	213a      	movs	r1, #58	; 0x3a
 8011aa4:	9101      	str	r1, [sp, #4]
 8011aa6:	9300      	str	r3, [sp, #0]
 8011aa8:	23ff      	movs	r3, #255	; 0xff
 8011aaa:	f102 0118 	add.w	r1, r2, #24
 8011aae:	4630      	mov	r0, r6
 8011ab0:	f000 fe28 	bl	8012704 <ip6_output_if>
    pbuf_free(r);
 8011ab4:	4630      	mov	r0, r6
 8011ab6:	f7f6 fb1b 	bl	80080f0 <pbuf_free>
  pbuf_free(p);
 8011aba:	4620      	mov	r0, r4
 8011abc:	f7f6 fb18 	bl	80080f0 <pbuf_free>
}
 8011ac0:	b004      	add	sp, #16
 8011ac2:	bd70      	pop	{r4, r5, r6, pc}
    pbuf_free(p);
 8011ac4:	f7f6 fb14 	bl	80080f0 <pbuf_free>
    return;
 8011ac8:	e7fa      	b.n	8011ac0 <icmp6_input+0x74>
  switch (icmp6hdr->type) {
 8011aca:	337a      	adds	r3, #122	; 0x7a
 8011acc:	b2db      	uxtb	r3, r3
 8011ace:	2b03      	cmp	r3, #3
 8011ad0:	d8f3      	bhi.n	8011aba <icmp6_input+0x6e>
    nd6_input(p, inp);
 8011ad2:	4629      	mov	r1, r5
 8011ad4:	4620      	mov	r0, r4
 8011ad6:	f002 fdaf 	bl	8014638 <nd6_input>
    return;
 8011ada:	e7f1      	b.n	8011ac0 <icmp6_input+0x74>
    mld6_input(p, inp);
 8011adc:	f001 fb50 	bl	8013180 <mld6_input>
    return;
 8011ae0:	e7ee      	b.n	8011ac0 <icmp6_input+0x74>
      pbuf_free(p);
 8011ae2:	f7f6 fb05 	bl	80080f0 <pbuf_free>
      return;
 8011ae6:	e7eb      	b.n	8011ac0 <icmp6_input+0x74>
      pbuf_free(p);
 8011ae8:	4620      	mov	r0, r4
 8011aea:	f7f6 fb01 	bl	80080f0 <pbuf_free>
      return;
 8011aee:	e7e7      	b.n	8011ac0 <icmp6_input+0x74>
      pbuf_free(p);
 8011af0:	4620      	mov	r0, r4
 8011af2:	f7f6 fafd 	bl	80080f0 <pbuf_free>
      pbuf_free(r);
 8011af6:	4630      	mov	r0, r6
 8011af8:	f7f6 fafa 	bl	80080f0 <pbuf_free>
      return;
 8011afc:	e7e0      	b.n	8011ac0 <icmp6_input+0x74>
 8011afe:	bf00      	nop
 8011b00:	20003e34 	.word	0x20003e34
 8011b04:	20003e48 	.word	0x20003e48

08011b08 <icmp6_dest_unreach>:
{
 8011b08:	b508      	push	{r3, lr}
  icmp6_send_response(p, c, 0, ICMP6_TYPE_DUR);
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	f7ff ff39 	bl	8011984 <icmp6_send_response>
}
 8011b12:	bd08      	pop	{r3, pc}

08011b14 <icmp6_time_exceeded_with_addrs>:
{
 8011b14:	b500      	push	{lr}
 8011b16:	b083      	sub	sp, #12
  icmp6_send_response_with_addrs(p, c, 0, ICMP6_TYPE_TE, src_addr, dest_addr);
 8011b18:	9301      	str	r3, [sp, #4]
 8011b1a:	9200      	str	r2, [sp, #0]
 8011b1c:	2303      	movs	r3, #3
 8011b1e:	2200      	movs	r2, #0
 8011b20:	f7ff ff5e 	bl	80119e0 <icmp6_send_response_with_addrs>
}
 8011b24:	b003      	add	sp, #12
 8011b26:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011b2c <icmp6_param_problem>:
{
 8011b2c:	b510      	push	{r4, lr}
  u32_t pointer_u32 = (u32_t)((const u8_t *)pointer - (const u8_t *)ip6_current_header());
 8011b2e:	4b03      	ldr	r3, [pc, #12]	; (8011b3c <icmp6_param_problem+0x10>)
 8011b30:	68dc      	ldr	r4, [r3, #12]
  icmp6_send_response(p, c, pointer_u32, ICMP6_TYPE_PP);
 8011b32:	2304      	movs	r3, #4
 8011b34:	1b12      	subs	r2, r2, r4
 8011b36:	f7ff ff25 	bl	8011984 <icmp6_send_response>
}
 8011b3a:	bd10      	pop	{r4, pc}
 8011b3c:	20003e34 	.word	0x20003e34

08011b40 <ip6_input_accept>:
/** Return true if the current input packet should be accepted on this netif */
static int
ip6_input_accept(struct netif *netif)
{
  /* interface is up? */
  if (netif_is_up(netif)) {
 8011b40:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 8011b44:	f013 0f01 	tst.w	r3, #1
 8011b48:	d129      	bne.n	8011b9e <ip6_input_accept+0x5e>
        /* accept on this netif */
        return 1;
      }
    }
  }
  return 0;
 8011b4a:	2000      	movs	r0, #0
 8011b4c:	4770      	bx	lr
          ip6_addr_cmp(ip6_current_dest_addr(), netif_ip6_addr(netif, i))
 8011b4e:	4a28      	ldr	r2, [pc, #160]	; (8011bf0 <ip6_input_accept+0xb0>)
 8011b50:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8011b52:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8011b56:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8011b5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8011b5c:	4294      	cmp	r4, r2
 8011b5e:	d139      	bne.n	8011bd4 <ip6_input_accept+0x94>
 8011b60:	4a23      	ldr	r2, [pc, #140]	; (8011bf0 <ip6_input_accept+0xb0>)
 8011b62:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8011b64:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8011b68:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8011b6c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8011b6e:	4294      	cmp	r4, r2
 8011b70:	d130      	bne.n	8011bd4 <ip6_input_accept+0x94>
 8011b72:	4a1f      	ldr	r2, [pc, #124]	; (8011bf0 <ip6_input_accept+0xb0>)
 8011b74:	6b94      	ldr	r4, [r2, #56]	; 0x38
 8011b76:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8011b7a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8011b7e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8011b80:	4294      	cmp	r4, r2
 8011b82:	d127      	bne.n	8011bd4 <ip6_input_accept+0x94>
 8011b84:	4a1a      	ldr	r2, [pc, #104]	; (8011bf0 <ip6_input_accept+0xb0>)
 8011b86:	f892 403c 	ldrb.w	r4, [r2, #60]	; 0x3c
 8011b8a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011b8e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8011b92:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
 8011b96:	4294      	cmp	r4, r2
 8011b98:	d11c      	bne.n	8011bd4 <ip6_input_accept+0x94>
        return 1;
 8011b9a:	2001      	movs	r0, #1
 8011b9c:	e002      	b.n	8011ba4 <ip6_input_accept+0x64>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	e005      	b.n	8011bae <ip6_input_accept+0x6e>
  return 0;
 8011ba2:	2000      	movs	r0, #0
}
 8011ba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ba8:	4770      	bx	lr
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8011baa:	3301      	adds	r3, #1
 8011bac:	b2db      	uxtb	r3, r3
 8011bae:	2b02      	cmp	r3, #2
 8011bb0:	d81c      	bhi.n	8011bec <ip6_input_accept+0xac>
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8011bb2:	4619      	mov	r1, r3
 8011bb4:	18c2      	adds	r2, r0, r3
 8011bb6:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
 8011bba:	f012 0f10 	tst.w	r2, #16
 8011bbe:	d0f4      	beq.n	8011baa <ip6_input_accept+0x6a>
{
 8011bc0:	b410      	push	{r4}
          ip6_addr_cmp(ip6_current_dest_addr(), netif_ip6_addr(netif, i))
 8011bc2:	4a0b      	ldr	r2, [pc, #44]	; (8011bf0 <ip6_input_accept+0xb0>)
 8011bc4:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8011bc6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011bca:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8011bce:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8011bd0:	4294      	cmp	r4, r2
 8011bd2:	d0bc      	beq.n	8011b4e <ip6_input_accept+0xe>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8011bd4:	3301      	adds	r3, #1
 8011bd6:	b2db      	uxtb	r3, r3
 8011bd8:	2b02      	cmp	r3, #2
 8011bda:	d8e2      	bhi.n	8011ba2 <ip6_input_accept+0x62>
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8011bdc:	4619      	mov	r1, r3
 8011bde:	18c2      	adds	r2, r0, r3
 8011be0:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
 8011be4:	f012 0f10 	tst.w	r2, #16
 8011be8:	d0f4      	beq.n	8011bd4 <ip6_input_accept+0x94>
 8011bea:	e7ea      	b.n	8011bc2 <ip6_input_accept+0x82>
  return 0;
 8011bec:	2000      	movs	r0, #0
}
 8011bee:	4770      	bx	lr
 8011bf0:	20003e34 	.word	0x20003e34

08011bf4 <ip6_route>:
{
 8011bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bf6:	4604      	mov	r4, r0
  if ((netif_list != NULL) && (netif_list->next == NULL)) {
 8011bf8:	4ba4      	ldr	r3, [pc, #656]	; (8011e8c <ip6_route+0x298>)
 8011bfa:	6818      	ldr	r0, [r3, #0]
 8011bfc:	b108      	cbz	r0, 8011c02 <ip6_route+0xe>
 8011bfe:	6803      	ldr	r3, [r0, #0]
 8011c00:	b383      	cbz	r3, 8011c64 <ip6_route+0x70>
  if (ip6_addr_has_zone(dest)) {
 8011c02:	7c0a      	ldrb	r2, [r1, #16]
 8011c04:	2a00      	cmp	r2, #0
 8011c06:	d142      	bne.n	8011c8e <ip6_route+0x9a>
  if (ip6_addr_has_scope(dest, IP6_UNKNOWN) ||
 8011c08:	680f      	ldr	r7, [r1, #0]
 8011c0a:	f24c 05ff 	movw	r5, #49407	; 0xc0ff
 8011c0e:	403d      	ands	r5, r7
 8011c10:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8011c14:	429d      	cmp	r5, r3
 8011c16:	d022      	beq.n	8011c5e <ip6_route+0x6a>
 8011c18:	f648 73ff 	movw	r3, #36863	; 0x8fff
 8011c1c:	403b      	ands	r3, r7
 8011c1e:	f240 15ff 	movw	r5, #511	; 0x1ff
 8011c22:	42ab      	cmp	r3, r5
 8011c24:	d01b      	beq.n	8011c5e <ip6_route+0x6a>
 8011c26:	f240 25ff 	movw	r5, #767	; 0x2ff
 8011c2a:	42ab      	cmp	r3, r5
 8011c2c:	d017      	beq.n	8011c5e <ip6_route+0x6a>
      ip6_addr_has_scope(src, IP6_UNICAST) ||
 8011c2e:	6823      	ldr	r3, [r4, #0]
 8011c30:	f24c 06ff 	movw	r6, #49407	; 0xc0ff
 8011c34:	401e      	ands	r6, r3
  if (ip6_addr_has_scope(dest, IP6_UNKNOWN) ||
 8011c36:	f248 05fe 	movw	r5, #33022	; 0x80fe
 8011c3a:	42ae      	cmp	r6, r5
 8011c3c:	d00f      	beq.n	8011c5e <ip6_route+0x6a>
      ip6_addr_has_scope(src, IP6_UNICAST) ||
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	f040 80bc 	bne.w	8011dbc <ip6_route+0x1c8>
      ip6_addr_isloopback(src)) {
 8011c44:	6863      	ldr	r3, [r4, #4]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	f040 80b8 	bne.w	8011dbc <ip6_route+0x1c8>
 8011c4c:	68a3      	ldr	r3, [r4, #8]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	f040 80b4 	bne.w	8011dbc <ip6_route+0x1c8>
 8011c54:	68e3      	ldr	r3, [r4, #12]
 8011c56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011c5a:	f040 80af 	bne.w	8011dbc <ip6_route+0x1c8>
    if (ip6_addr_has_zone(src)) {
 8011c5e:	7c22      	ldrb	r2, [r4, #16]
 8011c60:	bb42      	cbnz	r2, 8011cb4 <ip6_route+0xc0>
 8011c62:	e065      	b.n	8011d30 <ip6_route+0x13c>
    if (!netif_is_up(netif_list) || !netif_is_link_up(netif_list) ||
 8011c64:	f890 20df 	ldrb.w	r2, [r0, #223]	; 0xdf
 8011c68:	f002 0205 	and.w	r2, r2, #5
 8011c6c:	2a05      	cmp	r2, #5
 8011c6e:	f040 810a 	bne.w	8011e86 <ip6_route+0x292>
        (ip6_addr_has_zone(dest) && !ip6_addr_test_zone(dest, netif_list))) {
 8011c72:	7c09      	ldrb	r1, [r1, #16]
    if (!netif_is_up(netif_list) || !netif_is_link_up(netif_list) ||
 8011c74:	2900      	cmp	r1, #0
 8011c76:	f000 8107 	beq.w	8011e88 <ip6_route+0x294>
        (ip6_addr_has_zone(dest) && !ip6_addr_test_zone(dest, netif_list))) {
 8011c7a:	f890 20e2 	ldrb.w	r2, [r0, #226]	; 0xe2
 8011c7e:	3201      	adds	r2, #1
 8011c80:	b2d2      	uxtb	r2, r2
 8011c82:	4291      	cmp	r1, r2
 8011c84:	f000 8100 	beq.w	8011e88 <ip6_route+0x294>
      return NULL;
 8011c88:	4618      	mov	r0, r3
 8011c8a:	e0fd      	b.n	8011e88 <ip6_route+0x294>
    NETIF_FOREACH(netif) {
 8011c8c:	6800      	ldr	r0, [r0, #0]
 8011c8e:	2800      	cmp	r0, #0
 8011c90:	f000 80fa 	beq.w	8011e88 <ip6_route+0x294>
      if (ip6_addr_test_zone(dest, netif) &&
 8011c94:	f890 30e2 	ldrb.w	r3, [r0, #226]	; 0xe2
 8011c98:	3301      	adds	r3, #1
 8011c9a:	b2db      	uxtb	r3, r3
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	d1f5      	bne.n	8011c8c <ip6_route+0x98>
          netif_is_up(netif) && netif_is_link_up(netif)) {
 8011ca0:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
      if (ip6_addr_test_zone(dest, netif) &&
 8011ca4:	f013 0f01 	tst.w	r3, #1
 8011ca8:	d0f0      	beq.n	8011c8c <ip6_route+0x98>
          netif_is_up(netif) && netif_is_link_up(netif)) {
 8011caa:	f013 0f04 	tst.w	r3, #4
 8011cae:	d0ed      	beq.n	8011c8c <ip6_route+0x98>
 8011cb0:	e0ea      	b.n	8011e88 <ip6_route+0x294>
      NETIF_FOREACH(netif) {
 8011cb2:	6800      	ldr	r0, [r0, #0]
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	f000 80e7 	beq.w	8011e88 <ip6_route+0x294>
        if (netif_is_up(netif) && netif_is_link_up(netif) &&
 8011cba:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 8011cbe:	f013 0f01 	tst.w	r3, #1
 8011cc2:	d0f6      	beq.n	8011cb2 <ip6_route+0xbe>
 8011cc4:	f013 0f04 	tst.w	r3, #4
 8011cc8:	d0f3      	beq.n	8011cb2 <ip6_route+0xbe>
            ip6_addr_test_zone(src, netif)) {
 8011cca:	f890 30e2 	ldrb.w	r3, [r0, #226]	; 0xe2
 8011cce:	3301      	adds	r3, #1
 8011cd0:	b2db      	uxtb	r3, r3
        if (netif_is_up(netif) && netif_is_link_up(netif) &&
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d1ed      	bne.n	8011cb2 <ip6_route+0xbe>
 8011cd6:	e0d7      	b.n	8011e88 <ip6_route+0x294>
        for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8011cd8:	3301      	adds	r3, #1
 8011cda:	b25b      	sxtb	r3, r3
 8011cdc:	2b02      	cmp	r3, #2
 8011cde:	dc26      	bgt.n	8011d2e <ip6_route+0x13a>
          if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8011ce0:	18c2      	adds	r2, r0, r3
 8011ce2:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
 8011ce6:	f012 0f10 	tst.w	r2, #16
 8011cea:	d0f5      	beq.n	8011cd8 <ip6_route+0xe4>
              ip6_addr_cmp_zoneless(src, netif_ip6_addr(netif, i))) {
 8011cec:	6825      	ldr	r5, [r4, #0]
 8011cee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011cf2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8011cf6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
          if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8011cf8:	4295      	cmp	r5, r2
 8011cfa:	d1ed      	bne.n	8011cd8 <ip6_route+0xe4>
              ip6_addr_cmp_zoneless(src, netif_ip6_addr(netif, i))) {
 8011cfc:	6865      	ldr	r5, [r4, #4]
 8011cfe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011d02:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8011d06:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8011d08:	4295      	cmp	r5, r2
 8011d0a:	d1e5      	bne.n	8011cd8 <ip6_route+0xe4>
 8011d0c:	68a5      	ldr	r5, [r4, #8]
 8011d0e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011d12:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8011d16:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8011d18:	4295      	cmp	r5, r2
 8011d1a:	d1dd      	bne.n	8011cd8 <ip6_route+0xe4>
 8011d1c:	68e5      	ldr	r5, [r4, #12]
 8011d1e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8011d22:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8011d26:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8011d28:	4295      	cmp	r5, r2
 8011d2a:	d1d5      	bne.n	8011cd8 <ip6_route+0xe4>
 8011d2c:	e0ac      	b.n	8011e88 <ip6_route+0x294>
      NETIF_FOREACH(netif) {
 8011d2e:	6800      	ldr	r0, [r0, #0]
 8011d30:	2800      	cmp	r0, #0
 8011d32:	f000 80a9 	beq.w	8011e88 <ip6_route+0x294>
        if (!netif_is_up(netif) || !netif_is_link_up(netif)) {
 8011d36:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 8011d3a:	f003 0305 	and.w	r3, r3, #5
 8011d3e:	2b05      	cmp	r3, #5
 8011d40:	d1f5      	bne.n	8011d2e <ip6_route+0x13a>
        for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8011d42:	2300      	movs	r3, #0
 8011d44:	e7ca      	b.n	8011cdc <ip6_route+0xe8>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8011d46:	3301      	adds	r3, #1
 8011d48:	b25b      	sxtb	r3, r3
 8011d4a:	2b02      	cmp	r3, #2
 8011d4c:	dc35      	bgt.n	8011dba <ip6_route+0x1c6>
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8011d4e:	18c5      	adds	r5, r0, r3
 8011d50:	f895 5094 	ldrb.w	r5, [r5, #148]	; 0x94
 8011d54:	f015 0f10 	tst.w	r5, #16
 8011d58:	d0f5      	beq.n	8011d46 <ip6_route+0x152>
          ip6_addr_netcmp(dest, netif_ip6_addr(netif, i)) &&
 8011d5a:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8011d5e:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8011d62:	6ced      	ldr	r5, [r5, #76]	; 0x4c
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8011d64:	42af      	cmp	r7, r5
 8011d66:	d1ee      	bne.n	8011d46 <ip6_route+0x152>
          ip6_addr_netcmp(dest, netif_ip6_addr(netif, i)) &&
 8011d68:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8011d6c:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8011d70:	f8dc c050 	ldr.w	ip, [ip, #80]	; 0x50
 8011d74:	684d      	ldr	r5, [r1, #4]
 8011d76:	4565      	cmp	r5, ip
 8011d78:	d1e5      	bne.n	8011d46 <ip6_route+0x152>
 8011d7a:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8011d7e:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8011d82:	f895 505c 	ldrb.w	r5, [r5, #92]	; 0x5c
 8011d86:	42aa      	cmp	r2, r5
 8011d88:	d1dd      	bne.n	8011d46 <ip6_route+0x152>
          (netif_ip6_addr_isstatic(netif, i) ||
 8011d8a:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8011d8e:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 8011d92:	2d00      	cmp	r5, #0
 8011d94:	d078      	beq.n	8011e88 <ip6_route+0x294>
          ip6_addr_nethostcmp(dest, netif_ip6_addr(netif, i)))) {
 8011d96:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8011d9a:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8011d9e:	f8dc c054 	ldr.w	ip, [ip, #84]	; 0x54
          (netif_ip6_addr_isstatic(netif, i) ||
 8011da2:	688d      	ldr	r5, [r1, #8]
 8011da4:	4565      	cmp	r5, ip
 8011da6:	d1ce      	bne.n	8011d46 <ip6_route+0x152>
          ip6_addr_nethostcmp(dest, netif_ip6_addr(netif, i)))) {
 8011da8:	68cd      	ldr	r5, [r1, #12]
 8011daa:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8011dae:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8011db2:	6db6      	ldr	r6, [r6, #88]	; 0x58
 8011db4:	42b5      	cmp	r5, r6
 8011db6:	d1c6      	bne.n	8011d46 <ip6_route+0x152>
 8011db8:	e066      	b.n	8011e88 <ip6_route+0x294>
  NETIF_FOREACH(netif) {
 8011dba:	6800      	ldr	r0, [r0, #0]
 8011dbc:	b138      	cbz	r0, 8011dce <ip6_route+0x1da>
    if (!netif_is_up(netif) || !netif_is_link_up(netif)) {
 8011dbe:	f890 30df 	ldrb.w	r3, [r0, #223]	; 0xdf
 8011dc2:	f003 0305 	and.w	r3, r3, #5
 8011dc6:	2b05      	cmp	r3, #5
 8011dc8:	d1f7      	bne.n	8011dba <ip6_route+0x1c6>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8011dca:	2300      	movs	r3, #0
 8011dcc:	e7bd      	b.n	8011d4a <ip6_route+0x156>
  netif = nd6_find_route(dest);
 8011dce:	4608      	mov	r0, r1
 8011dd0:	f003 faf4 	bl	80153bc <nd6_find_route>
  if (netif != NULL) {
 8011dd4:	2800      	cmp	r0, #0
 8011dd6:	d157      	bne.n	8011e88 <ip6_route+0x294>
  if (!ip6_addr_isany(src)) {
 8011dd8:	2c00      	cmp	r4, #0
 8011dda:	d049      	beq.n	8011e70 <ip6_route+0x27c>
 8011ddc:	6826      	ldr	r6, [r4, #0]
 8011dde:	b936      	cbnz	r6, 8011dee <ip6_route+0x1fa>
 8011de0:	6863      	ldr	r3, [r4, #4]
 8011de2:	b923      	cbnz	r3, 8011dee <ip6_route+0x1fa>
 8011de4:	68a3      	ldr	r3, [r4, #8]
 8011de6:	b913      	cbnz	r3, 8011dee <ip6_route+0x1fa>
 8011de8:	68e3      	ldr	r3, [r4, #12]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d040      	beq.n	8011e70 <ip6_route+0x27c>
    NETIF_FOREACH(netif) {
 8011dee:	4b27      	ldr	r3, [pc, #156]	; (8011e8c <ip6_route+0x298>)
 8011df0:	681a      	ldr	r2, [r3, #0]
 8011df2:	e034      	b.n	8011e5e <ip6_route+0x26a>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8011df4:	3301      	adds	r3, #1
 8011df6:	b25b      	sxtb	r3, r3
 8011df8:	2b02      	cmp	r3, #2
 8011dfa:	dc2f      	bgt.n	8011e5c <ip6_route+0x268>
        if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8011dfc:	18d1      	adds	r1, r2, r3
 8011dfe:	f891 1094 	ldrb.w	r1, [r1, #148]	; 0x94
 8011e02:	f011 0f10 	tst.w	r1, #16
 8011e06:	d0f5      	beq.n	8011df4 <ip6_route+0x200>
            ip6_addr_cmp(src, netif_ip6_addr(netif, i))) {
 8011e08:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8011e0c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8011e10:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
        if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8011e12:	428e      	cmp	r6, r1
 8011e14:	d1ee      	bne.n	8011df4 <ip6_route+0x200>
            ip6_addr_cmp(src, netif_ip6_addr(netif, i))) {
 8011e16:	6867      	ldr	r7, [r4, #4]
 8011e18:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8011e1c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8011e20:	6d09      	ldr	r1, [r1, #80]	; 0x50
 8011e22:	428f      	cmp	r7, r1
 8011e24:	d1e6      	bne.n	8011df4 <ip6_route+0x200>
 8011e26:	68a7      	ldr	r7, [r4, #8]
 8011e28:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8011e2c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8011e30:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8011e32:	428f      	cmp	r7, r1
 8011e34:	d1de      	bne.n	8011df4 <ip6_route+0x200>
 8011e36:	68e7      	ldr	r7, [r4, #12]
 8011e38:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8011e3c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8011e40:	6d89      	ldr	r1, [r1, #88]	; 0x58
 8011e42:	428f      	cmp	r7, r1
 8011e44:	d1d6      	bne.n	8011df4 <ip6_route+0x200>
 8011e46:	7c27      	ldrb	r7, [r4, #16]
 8011e48:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8011e4c:	eb02 01c5 	add.w	r1, r2, r5, lsl #3
 8011e50:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
 8011e54:	428f      	cmp	r7, r1
 8011e56:	d1cd      	bne.n	8011df4 <ip6_route+0x200>
          return netif;
 8011e58:	4610      	mov	r0, r2
 8011e5a:	e015      	b.n	8011e88 <ip6_route+0x294>
    NETIF_FOREACH(netif) {
 8011e5c:	6812      	ldr	r2, [r2, #0]
 8011e5e:	b13a      	cbz	r2, 8011e70 <ip6_route+0x27c>
      if (!netif_is_up(netif) || !netif_is_link_up(netif)) {
 8011e60:	f892 30df 	ldrb.w	r3, [r2, #223]	; 0xdf
 8011e64:	f003 0305 	and.w	r3, r3, #5
 8011e68:	2b05      	cmp	r3, #5
 8011e6a:	d1f7      	bne.n	8011e5c <ip6_route+0x268>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	e7c3      	b.n	8011df8 <ip6_route+0x204>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default)) {
 8011e70:	4b07      	ldr	r3, [pc, #28]	; (8011e90 <ip6_route+0x29c>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	b143      	cbz	r3, 8011e88 <ip6_route+0x294>
 8011e76:	f893 20df 	ldrb.w	r2, [r3, #223]	; 0xdf
 8011e7a:	f002 0205 	and.w	r2, r2, #5
 8011e7e:	2a05      	cmp	r2, #5
 8011e80:	d102      	bne.n	8011e88 <ip6_route+0x294>
  return netif_default;
 8011e82:	4618      	mov	r0, r3
 8011e84:	e000      	b.n	8011e88 <ip6_route+0x294>
      return NULL;
 8011e86:	4618      	mov	r0, r3
}
 8011e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e8a:	bf00      	nop
 8011e8c:	20007f9c 	.word	0x20007f9c
 8011e90:	20007fa0 	.word	0x20007fa0

08011e94 <ip6_select_source_address>:
{
 8011e94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e98:	4604      	mov	r4, r0
 8011e9a:	460e      	mov	r6, r1
  if (ip6_addr_isglobal(dest)) {
 8011e9c:	6808      	ldr	r0, [r1, #0]
 8011e9e:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 8011ea2:	2b20      	cmp	r3, #32
 8011ea4:	d025      	beq.n	8011ef2 <ip6_select_source_address+0x5e>
  } else if (ip6_addr_islinklocal(dest) || ip6_addr_isloopback(dest)) {
 8011ea6:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 8011eaa:	4003      	ands	r3, r0
 8011eac:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8011eb0:	4293      	cmp	r3, r2
 8011eb2:	d027      	beq.n	8011f04 <ip6_select_source_address+0x70>
 8011eb4:	b938      	cbnz	r0, 8011ec6 <ip6_select_source_address+0x32>
 8011eb6:	684a      	ldr	r2, [r1, #4]
 8011eb8:	b92a      	cbnz	r2, 8011ec6 <ip6_select_source_address+0x32>
 8011eba:	688a      	ldr	r2, [r1, #8]
 8011ebc:	b91a      	cbnz	r2, 8011ec6 <ip6_select_source_address+0x32>
 8011ebe:	68ca      	ldr	r2, [r1, #12]
 8011ec0:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8011ec4:	d021      	beq.n	8011f0a <ip6_select_source_address+0x76>
  } else if (ip6_addr_isuniquelocal(dest)) {
 8011ec6:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 8011eca:	2afc      	cmp	r2, #252	; 0xfc
 8011ecc:	d020      	beq.n	8011f10 <ip6_select_source_address+0x7c>
  } else if (ip6_addr_ismulticast(dest)) {
 8011ece:	b2c2      	uxtb	r2, r0
 8011ed0:	2aff      	cmp	r2, #255	; 0xff
 8011ed2:	d006      	beq.n	8011ee2 <ip6_select_source_address+0x4e>
  } else if (ip6_addr_issitelocal(dest)) {
 8011ed4:	f24c 02fe 	movw	r2, #49406	; 0xc0fe
 8011ed8:	4293      	cmp	r3, r2
 8011eda:	d007      	beq.n	8011eec <ip6_select_source_address+0x58>
    dest_scope = IP6_MULTICAST_SCOPE_GLOBAL;
 8011edc:	f04f 080e 	mov.w	r8, #14
 8011ee0:	e009      	b.n	8011ef6 <ip6_select_source_address+0x62>
    dest_scope = ip6_addr_multicast_scope(dest);
 8011ee2:	f7f4 fdd0 	bl	8006a86 <lwip_htonl>
 8011ee6:	f3c0 4803 	ubfx	r8, r0, #16, #4
 8011eea:	e004      	b.n	8011ef6 <ip6_select_source_address+0x62>
    dest_scope = IP6_MULTICAST_SCOPE_SITE_LOCAL;
 8011eec:	f04f 0805 	mov.w	r8, #5
 8011ef0:	e001      	b.n	8011ef6 <ip6_select_source_address+0x62>
    dest_scope = IP6_MULTICAST_SCOPE_GLOBAL;
 8011ef2:	f04f 080e 	mov.w	r8, #14
  u8_t best_bits = 0;
 8011ef6:	f04f 0c00 	mov.w	ip, #0
  u8_t best_pref = 0;
 8011efa:	46e1      	mov	r9, ip
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8011efc:	4663      	mov	r3, ip
  s8_t best_scope = IP6_MULTICAST_SCOPE_RESERVED;
 8011efe:	46e6      	mov	lr, ip
  best_addr = NULL;
 8011f00:	4660      	mov	r0, ip
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8011f02:	e03b      	b.n	8011f7c <ip6_select_source_address+0xe8>
    dest_scope = IP6_MULTICAST_SCOPE_LINK_LOCAL;
 8011f04:	f04f 0802 	mov.w	r8, #2
 8011f08:	e7f5      	b.n	8011ef6 <ip6_select_source_address+0x62>
 8011f0a:	f04f 0802 	mov.w	r8, #2
 8011f0e:	e7f2      	b.n	8011ef6 <ip6_select_source_address+0x62>
    dest_scope = IP6_MULTICAST_SCOPE_ORGANIZATION_LOCAL;
 8011f10:	f04f 0808 	mov.w	r8, #8
 8011f14:	e7ef      	b.n	8011ef6 <ip6_select_source_address+0x62>
      cand_scope = IP6_MULTICAST_SCOPE_SITE_LOCAL;
 8011f16:	2105      	movs	r1, #5
 8011f18:	e000      	b.n	8011f1c <ip6_select_source_address+0x88>
      cand_scope = IP6_MULTICAST_SCOPE_GLOBAL;
 8011f1a:	210e      	movs	r1, #14
    cand_pref = ip6_addr_ispreferred(netif_ip6_addr_state(netif, i));
 8011f1c:	2a30      	cmp	r2, #48	; 0x30
 8011f1e:	bf14      	ite	ne
 8011f20:	f04f 0b00 	movne.w	fp, #0
 8011f24:	f04f 0b01 	moveq.w	fp, #1
    cand_bits = ip6_addr_netcmp_zoneless(cand_addr, dest); /* just 1 or 0 for now */
 8011f28:	6837      	ldr	r7, [r6, #0]
 8011f2a:	45ba      	cmp	sl, r7
 8011f2c:	d04f      	beq.n	8011fce <ip6_select_source_address+0x13a>
 8011f2e:	2700      	movs	r7, #0
    if (cand_bits && ip6_addr_nethostcmp(cand_addr, dest)) {
 8011f30:	f007 0aff 	and.w	sl, r7, #255	; 0xff
 8011f34:	b13f      	cbz	r7, 8011f46 <ip6_select_source_address+0xb2>
 8011f36:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8011f3a:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8011f3e:	6d7f      	ldr	r7, [r7, #84]	; 0x54
 8011f40:	68b2      	ldr	r2, [r6, #8]
 8011f42:	4297      	cmp	r7, r2
 8011f44:	d04f      	beq.n	8011fe6 <ip6_select_source_address+0x152>
    if ((best_addr == NULL) || /* no alternative yet */
 8011f46:	b170      	cbz	r0, 8011f66 <ip6_select_source_address+0xd2>
 8011f48:	4571      	cmp	r1, lr
 8011f4a:	da01      	bge.n	8011f50 <ip6_select_source_address+0xbc>
        ((cand_scope < best_scope) && (cand_scope >= dest_scope)) ||
 8011f4c:	4588      	cmp	r8, r1
 8011f4e:	dd0a      	ble.n	8011f66 <ip6_select_source_address+0xd2>
 8011f50:	4571      	cmp	r1, lr
 8011f52:	dd01      	ble.n	8011f58 <ip6_select_source_address+0xc4>
        ((cand_scope > best_scope) && (best_scope < dest_scope)) || /* Rule 2 */
 8011f54:	45f0      	cmp	r8, lr
 8011f56:	dc06      	bgt.n	8011f66 <ip6_select_source_address+0xd2>
 8011f58:	4571      	cmp	r1, lr
 8011f5a:	d10d      	bne.n	8011f78 <ip6_select_source_address+0xe4>
        ((cand_scope == best_scope) && ((cand_pref > best_pref) || /* Rule 3 */
 8011f5c:	45d9      	cmp	r9, fp
 8011f5e:	d302      	bcc.n	8011f66 <ip6_select_source_address+0xd2>
 8011f60:	d10a      	bne.n	8011f78 <ip6_select_source_address+0xe4>
        ((cand_pref == best_pref) && (cand_bits > best_bits))))) { /* Rule 8 */
 8011f62:	45d4      	cmp	ip, sl
 8011f64:	d208      	bcs.n	8011f78 <ip6_select_source_address+0xe4>
      best_addr = netif_ip_addr6(netif, i);
 8011f66:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8011f6a:	00c0      	lsls	r0, r0, #3
 8011f6c:	3048      	adds	r0, #72	; 0x48
 8011f6e:	4420      	add	r0, r4
 8011f70:	3004      	adds	r0, #4
      best_bits = cand_bits;
 8011f72:	46d4      	mov	ip, sl
      best_pref = cand_pref;
 8011f74:	46d9      	mov	r9, fp
      best_scope = cand_scope;
 8011f76:	468e      	mov	lr, r1
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8011f78:	3301      	adds	r3, #1
 8011f7a:	b2db      	uxtb	r3, r3
 8011f7c:	2b02      	cmp	r3, #2
 8011f7e:	d840      	bhi.n	8012002 <ip6_select_source_address+0x16e>
    if (!ip6_addr_isvalid(netif_ip6_addr_state(netif, i))) {
 8011f80:	461d      	mov	r5, r3
 8011f82:	18e2      	adds	r2, r4, r3
 8011f84:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
 8011f88:	f012 0f10 	tst.w	r2, #16
 8011f8c:	d0f4      	beq.n	8011f78 <ip6_select_source_address+0xe4>
    if (ip6_addr_isglobal(cand_addr)) {
 8011f8e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8011f92:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8011f96:	f8d1 a04c 	ldr.w	sl, [r1, #76]	; 0x4c
 8011f9a:	f00a 01e0 	and.w	r1, sl, #224	; 0xe0
 8011f9e:	2920      	cmp	r1, #32
 8011fa0:	d0bb      	beq.n	8011f1a <ip6_select_source_address+0x86>
    } else if (ip6_addr_islinklocal(cand_addr)) {
 8011fa2:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8011fa6:	ea0a 0101 	and.w	r1, sl, r1
 8011faa:	f248 07fe 	movw	r7, #33022	; 0x80fe
 8011fae:	42b9      	cmp	r1, r7
 8011fb0:	d009      	beq.n	8011fc6 <ip6_select_source_address+0x132>
    } else if (ip6_addr_isuniquelocal(cand_addr)) {
 8011fb2:	f00a 07fe 	and.w	r7, sl, #254	; 0xfe
 8011fb6:	2ffc      	cmp	r7, #252	; 0xfc
 8011fb8:	d007      	beq.n	8011fca <ip6_select_source_address+0x136>
    } else if (ip6_addr_issitelocal(cand_addr)) {
 8011fba:	f24c 07fe 	movw	r7, #49406	; 0xc0fe
 8011fbe:	42b9      	cmp	r1, r7
 8011fc0:	d0a9      	beq.n	8011f16 <ip6_select_source_address+0x82>
      cand_scope = IP6_MULTICAST_SCOPE_RESERVEDF;
 8011fc2:	210f      	movs	r1, #15
 8011fc4:	e7aa      	b.n	8011f1c <ip6_select_source_address+0x88>
      cand_scope = IP6_MULTICAST_SCOPE_LINK_LOCAL;
 8011fc6:	2102      	movs	r1, #2
 8011fc8:	e7a8      	b.n	8011f1c <ip6_select_source_address+0x88>
      cand_scope = IP6_MULTICAST_SCOPE_ORGANIZATION_LOCAL;
 8011fca:	2108      	movs	r1, #8
 8011fcc:	e7a6      	b.n	8011f1c <ip6_select_source_address+0x88>
    cand_bits = ip6_addr_netcmp_zoneless(cand_addr, dest); /* just 1 or 0 for now */
 8011fce:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8011fd2:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8011fd6:	6d3f      	ldr	r7, [r7, #80]	; 0x50
 8011fd8:	6872      	ldr	r2, [r6, #4]
 8011fda:	4297      	cmp	r7, r2
 8011fdc:	d001      	beq.n	8011fe2 <ip6_select_source_address+0x14e>
 8011fde:	2700      	movs	r7, #0
 8011fe0:	e7a6      	b.n	8011f30 <ip6_select_source_address+0x9c>
 8011fe2:	2701      	movs	r7, #1
 8011fe4:	e7a4      	b.n	8011f30 <ip6_select_source_address+0x9c>
    if (cand_bits && ip6_addr_nethostcmp(cand_addr, dest)) {
 8011fe6:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8011fea:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8011fee:	6dbf      	ldr	r7, [r7, #88]	; 0x58
 8011ff0:	68f2      	ldr	r2, [r6, #12]
 8011ff2:	4297      	cmp	r7, r2
 8011ff4:	d1a7      	bne.n	8011f46 <ip6_select_source_address+0xb2>
      return netif_ip_addr6(netif, i); /* Rule 1 */
 8011ff6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8011ffa:	00db      	lsls	r3, r3, #3
 8011ffc:	3348      	adds	r3, #72	; 0x48
 8011ffe:	4423      	add	r3, r4
 8012000:	1d18      	adds	r0, r3, #4
}
 8012002:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08012008 <ip6_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip6_input(struct pbuf *p, struct netif *inp)
{
 8012008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801200c:	b087      	sub	sp, #28
 801200e:	4604      	mov	r4, r0
 8012010:	460e      	mov	r6, r1
  LWIP_ASSERT_CORE_LOCKED();

  IP6_STATS_INC(ip6.recv);

  /* identify the IP header */
  ip6hdr = (struct ip6_hdr *)p->payload;
 8012012:	6845      	ldr	r5, [r0, #4]
  if (IP6H_V(ip6hdr) != 6) {
 8012014:	6828      	ldr	r0, [r5, #0]
 8012016:	f7f4 fd36 	bl	8006a86 <lwip_htonl>
 801201a:	0f00      	lsrs	r0, r0, #28
 801201c:	2806      	cmp	r0, #6
 801201e:	d113      	bne.n	8012048 <ip6_input+0x40>
    return ERR_OK;
  }
#endif

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((IP6_HLEN > p->len) || (IP6H_PLEN(ip6hdr) > (p->tot_len - IP6_HLEN))) {
 8012020:	8963      	ldrh	r3, [r4, #10]
 8012022:	2b27      	cmp	r3, #39	; 0x27
 8012024:	d906      	bls.n	8012034 <ip6_input+0x2c>
 8012026:	8927      	ldrh	r7, [r4, #8]
 8012028:	3f27      	subs	r7, #39	; 0x27
 801202a:	88a8      	ldrh	r0, [r5, #4]
 801202c:	f7f4 fd26 	bl	8006a7c <lwip_htons>
 8012030:	4287      	cmp	r7, r0
 8012032:	dc0d      	bgt.n	8012050 <ip6_input+0x48>
    if (IP6_HLEN > p->len) {
      LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IPv6 header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n",
            (u16_t)IP6_HLEN, p->len));
    }
    if ((IP6H_PLEN(ip6hdr) + IP6_HLEN) > p->tot_len) {
 8012034:	88a8      	ldrh	r0, [r5, #4]
 8012036:	f7f4 fd21 	bl	8006a7c <lwip_htons>
      LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IPv6 (plen %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
            (u16_t)(IP6H_PLEN(ip6hdr) + IP6_HLEN), p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801203a:	4620      	mov	r0, r4
 801203c:	f7f6 f858 	bl	80080f0 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip6_addr_set_zero(ip6_current_src_addr());
  ip6_addr_set_zero(ip6_current_dest_addr());

  return ERR_OK;
}
 8012040:	2000      	movs	r0, #0
 8012042:	b007      	add	sp, #28
 8012044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pbuf_free(p);
 8012048:	4620      	mov	r0, r4
 801204a:	f7f6 f851 	bl	80080f0 <pbuf_free>
    return ERR_OK;
 801204e:	e7f7      	b.n	8012040 <ip6_input+0x38>
  pbuf_realloc(p, (u16_t)(IP6_HLEN + IP6H_PLEN(ip6hdr)));
 8012050:	88a8      	ldrh	r0, [r5, #4]
 8012052:	f7f4 fd13 	bl	8006a7c <lwip_htons>
 8012056:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801205a:	b289      	uxth	r1, r1
 801205c:	4620      	mov	r0, r4
 801205e:	f7f6 f957 	bl	8008310 <pbuf_realloc>
  ip_addr_copy_from_ip6_packed(ip_data.current_iphdr_dest, ip6hdr->dest);
 8012062:	69af      	ldr	r7, [r5, #24]
 8012064:	4baa      	ldr	r3, [pc, #680]	; (8012310 <ip6_input+0x308>)
 8012066:	62df      	str	r7, [r3, #44]	; 0x2c
 8012068:	f8d5 901c 	ldr.w	r9, [r5, #28]
 801206c:	f8c3 9030 	str.w	r9, [r3, #48]	; 0x30
 8012070:	f8d5 b020 	ldr.w	fp, [r5, #32]
 8012074:	f8c3 b034 	str.w	fp, [r3, #52]	; 0x34
 8012078:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801207a:	9202      	str	r2, [sp, #8]
 801207c:	639a      	str	r2, [r3, #56]	; 0x38
 801207e:	2100      	movs	r1, #0
 8012080:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 8012084:	2206      	movs	r2, #6
 8012086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  ip_addr_copy_from_ip6_packed(ip_data.current_iphdr_src, ip6hdr->src);
 801208a:	f8d5 8008 	ldr.w	r8, [r5, #8]
 801208e:	f8c3 8014 	str.w	r8, [r3, #20]
 8012092:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8012096:	f8c3 a018 	str.w	sl, [r3, #24]
 801209a:	6928      	ldr	r0, [r5, #16]
 801209c:	9001      	str	r0, [sp, #4]
 801209e:	61d8      	str	r0, [r3, #28]
 80120a0:	6968      	ldr	r0, [r5, #20]
 80120a2:	9003      	str	r0, [sp, #12]
 80120a4:	6218      	str	r0, [r3, #32]
 80120a6:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
 80120aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  if (ip6_addr_isipv4mappedipv6(ip_2_ip6(&ip_data.current_iphdr_dest)) ||
 80120ae:	b92f      	cbnz	r7, 80120bc <ip6_input+0xb4>
 80120b0:	f1b9 0f00 	cmp.w	r9, #0
 80120b4:	d102      	bne.n	80120bc <ip6_input+0xb4>
 80120b6:	f51b 3f80 	cmn.w	fp, #65536	; 0x10000
 80120ba:	d023      	beq.n	8012104 <ip6_input+0xfc>
 80120bc:	f1b8 0f00 	cmp.w	r8, #0
 80120c0:	d106      	bne.n	80120d0 <ip6_input+0xc8>
     ip6_addr_isipv4mappedipv6(ip_2_ip6(&ip_data.current_iphdr_src)) ||
 80120c2:	f1ba 0f00 	cmp.w	sl, #0
 80120c6:	d103      	bne.n	80120d0 <ip6_input+0xc8>
 80120c8:	9b01      	ldr	r3, [sp, #4]
 80120ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80120ce:	d019      	beq.n	8012104 <ip6_input+0xfc>
     ip6_addr_ismulticast(ip_2_ip6(&ip_data.current_iphdr_src))) {
 80120d0:	fa5f f388 	uxtb.w	r3, r8
     ip6_addr_isipv4mappedipv6(ip_2_ip6(&ip_data.current_iphdr_src)) ||
 80120d4:	2bff      	cmp	r3, #255	; 0xff
 80120d6:	d015      	beq.n	8012104 <ip6_input+0xfc>
  ip6_addr_assign_zone(ip_2_ip6(&ip_data.current_iphdr_dest), IP6_UNKNOWN, inp);
 80120d8:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 80120dc:	403b      	ands	r3, r7
 80120de:	461a      	mov	r2, r3
 80120e0:	9304      	str	r3, [sp, #16]
 80120e2:	f248 03fe 	movw	r3, #33022	; 0x80fe
 80120e6:	429a      	cmp	r2, r3
 80120e8:	d010      	beq.n	801210c <ip6_input+0x104>
 80120ea:	f648 73ff 	movw	r3, #36863	; 0x8fff
 80120ee:	403b      	ands	r3, r7
 80120f0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80120f4:	4293      	cmp	r3, r2
 80120f6:	d009      	beq.n	801210c <ip6_input+0x104>
 80120f8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80120fc:	4293      	cmp	r3, r2
 80120fe:	d005      	beq.n	801210c <ip6_input+0x104>
 8012100:	2300      	movs	r3, #0
 8012102:	e007      	b.n	8012114 <ip6_input+0x10c>
    pbuf_free(p);
 8012104:	4620      	mov	r0, r4
 8012106:	f7f5 fff3 	bl	80080f0 <pbuf_free>
    return ERR_OK;
 801210a:	e799      	b.n	8012040 <ip6_input+0x38>
  ip6_addr_assign_zone(ip_2_ip6(&ip_data.current_iphdr_dest), IP6_UNKNOWN, inp);
 801210c:	f896 30e2 	ldrb.w	r3, [r6, #226]	; 0xe2
 8012110:	3301      	adds	r3, #1
 8012112:	b2db      	uxtb	r3, r3
 8012114:	4a7e      	ldr	r2, [pc, #504]	; (8012310 <ip6_input+0x308>)
 8012116:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  ip6_addr_assign_zone(ip_2_ip6(&ip_data.current_iphdr_src), IP6_UNICAST, inp);
 801211a:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 801211e:	ea08 0303 	and.w	r3, r8, r3
 8012122:	461a      	mov	r2, r3
 8012124:	9305      	str	r3, [sp, #20]
 8012126:	f248 03fe 	movw	r3, #33022	; 0x80fe
 801212a:	429a      	cmp	r2, r3
 801212c:	d030      	beq.n	8012190 <ip6_input+0x188>
 801212e:	2200      	movs	r2, #0
 8012130:	4b77      	ldr	r3, [pc, #476]	; (8012310 <ip6_input+0x308>)
 8012132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ip_data.current_ip6_header = ip6hdr;
 8012136:	60dd      	str	r5, [r3, #12]
  ip_data.current_netif = inp;
 8012138:	601e      	str	r6, [r3, #0]
  ip_data.current_input_netif = inp;
 801213a:	605e      	str	r6, [r3, #4]
  if (ip6_addr_ismulticast(ip6_current_dest_addr())) {
 801213c:	b2fb      	uxtb	r3, r7
 801213e:	2bff      	cmp	r3, #255	; 0xff
 8012140:	d02b      	beq.n	801219a <ip6_input+0x192>
    if (ip6_input_accept(inp)) {
 8012142:	4630      	mov	r0, r6
 8012144:	f7ff fcfc 	bl	8011b40 <ip6_input_accept>
 8012148:	2800      	cmp	r0, #0
 801214a:	d14c      	bne.n	80121e6 <ip6_input+0x1de>
      if (ip6_addr_islinklocal(ip6_current_dest_addr()) ||
 801214c:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8012150:	9a04      	ldr	r2, [sp, #16]
 8012152:	429a      	cmp	r2, r3
 8012154:	d068      	beq.n	8012228 <ip6_input+0x220>
 8012156:	9a05      	ldr	r2, [sp, #20]
 8012158:	429a      	cmp	r2, r3
 801215a:	d067      	beq.n	801222c <ip6_input+0x224>
      if (ip6_addr_isloopback(ip6_current_dest_addr()) ||
 801215c:	b94f      	cbnz	r7, 8012172 <ip6_input+0x16a>
 801215e:	f1b9 0f00 	cmp.w	r9, #0
 8012162:	d106      	bne.n	8012172 <ip6_input+0x16a>
 8012164:	f1bb 0f00 	cmp.w	fp, #0
 8012168:	d103      	bne.n	8012172 <ip6_input+0x16a>
 801216a:	9b02      	ldr	r3, [sp, #8]
 801216c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012170:	d05e      	beq.n	8012230 <ip6_input+0x228>
 8012172:	f1b8 0f00 	cmp.w	r8, #0
 8012176:	d108      	bne.n	801218a <ip6_input+0x182>
          ip6_addr_isloopback(ip6_current_src_addr())) {
 8012178:	f1ba 0f00 	cmp.w	sl, #0
 801217c:	d105      	bne.n	801218a <ip6_input+0x182>
 801217e:	9b01      	ldr	r3, [sp, #4]
 8012180:	b91b      	cbnz	r3, 801218a <ip6_input+0x182>
 8012182:	9b03      	ldr	r3, [sp, #12]
 8012184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012188:	d054      	beq.n	8012234 <ip6_input+0x22c>
      NETIF_FOREACH(netif) {
 801218a:	4b62      	ldr	r3, [pc, #392]	; (8012314 <ip6_input+0x30c>)
 801218c:	681f      	ldr	r7, [r3, #0]
 801218e:	e021      	b.n	80121d4 <ip6_input+0x1cc>
  ip6_addr_assign_zone(ip_2_ip6(&ip_data.current_iphdr_src), IP6_UNICAST, inp);
 8012190:	f896 20e2 	ldrb.w	r2, [r6, #226]	; 0xe2
 8012194:	3201      	adds	r2, #1
 8012196:	b2d2      	uxtb	r2, r2
 8012198:	e7ca      	b.n	8012130 <ip6_input+0x128>
    if (ip6_addr_isallnodes_iflocal(ip6_current_dest_addr()) ||
 801219a:	f240 13ff 	movw	r3, #511	; 0x1ff
 801219e:	429f      	cmp	r7, r3
 80121a0:	d00b      	beq.n	80121ba <ip6_input+0x1b2>
 80121a2:	f240 23ff 	movw	r3, #767	; 0x2ff
 80121a6:	429f      	cmp	r7, r3
 80121a8:	d007      	beq.n	80121ba <ip6_input+0x1b2>
    else if (mld6_lookfor_group(inp, ip6_current_dest_addr())) {
 80121aa:	495b      	ldr	r1, [pc, #364]	; (8012318 <ip6_input+0x310>)
 80121ac:	4630      	mov	r0, r6
 80121ae:	f000 ffcd 	bl	801314c <mld6_lookfor_group>
 80121b2:	4607      	mov	r7, r0
 80121b4:	b1c0      	cbz	r0, 80121e8 <ip6_input+0x1e0>
      netif = inp;
 80121b6:	4637      	mov	r7, r6
 80121b8:	e016      	b.n	80121e8 <ip6_input+0x1e0>
    if (ip6_addr_isallnodes_iflocal(ip6_current_dest_addr()) ||
 80121ba:	f1b9 0f00 	cmp.w	r9, #0
 80121be:	d1f4      	bne.n	80121aa <ip6_input+0x1a2>
 80121c0:	f1bb 0f00 	cmp.w	fp, #0
 80121c4:	d1f1      	bne.n	80121aa <ip6_input+0x1a2>
 80121c6:	9b02      	ldr	r3, [sp, #8]
 80121c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80121cc:	d1ed      	bne.n	80121aa <ip6_input+0x1a2>
      netif = inp;
 80121ce:	4637      	mov	r7, r6
 80121d0:	e00a      	b.n	80121e8 <ip6_input+0x1e0>
      NETIF_FOREACH(netif) {
 80121d2:	683f      	ldr	r7, [r7, #0]
 80121d4:	b147      	cbz	r7, 80121e8 <ip6_input+0x1e0>
        if (netif == inp) {
 80121d6:	42b7      	cmp	r7, r6
 80121d8:	d0fb      	beq.n	80121d2 <ip6_input+0x1ca>
        if (ip6_input_accept(netif)) {
 80121da:	4638      	mov	r0, r7
 80121dc:	f7ff fcb0 	bl	8011b40 <ip6_input_accept>
 80121e0:	2800      	cmp	r0, #0
 80121e2:	d0f6      	beq.n	80121d2 <ip6_input+0x1ca>
netif_found:
 80121e4:	e000      	b.n	80121e8 <ip6_input+0x1e0>
      netif = inp;
 80121e6:	4637      	mov	r7, r6
  if (ip6_addr_isany(ip6_current_src_addr()) &&
 80121e8:	4b49      	ldr	r3, [pc, #292]	; (8012310 <ip6_input+0x308>)
 80121ea:	695b      	ldr	r3, [r3, #20]
 80121ec:	bb23      	cbnz	r3, 8012238 <ip6_input+0x230>
 80121ee:	4b48      	ldr	r3, [pc, #288]	; (8012310 <ip6_input+0x308>)
 80121f0:	699b      	ldr	r3, [r3, #24]
 80121f2:	bb0b      	cbnz	r3, 8012238 <ip6_input+0x230>
 80121f4:	4b46      	ldr	r3, [pc, #280]	; (8012310 <ip6_input+0x308>)
 80121f6:	69db      	ldr	r3, [r3, #28]
 80121f8:	b9f3      	cbnz	r3, 8012238 <ip6_input+0x230>
 80121fa:	4b45      	ldr	r3, [pc, #276]	; (8012310 <ip6_input+0x308>)
 80121fc:	6a1b      	ldr	r3, [r3, #32]
 80121fe:	b9db      	cbnz	r3, 8012238 <ip6_input+0x230>
      (!ip6_addr_issolicitednode(ip6_current_dest_addr()))) {
 8012200:	4b43      	ldr	r3, [pc, #268]	; (8012310 <ip6_input+0x308>)
 8012202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  if (ip6_addr_isany(ip6_current_src_addr()) &&
 8012204:	f240 23ff 	movw	r3, #767	; 0x2ff
 8012208:	429a      	cmp	r2, r3
 801220a:	d109      	bne.n	8012220 <ip6_input+0x218>
      (!ip6_addr_issolicitednode(ip6_current_dest_addr()))) {
 801220c:	4b40      	ldr	r3, [pc, #256]	; (8012310 <ip6_input+0x308>)
 801220e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012214:	d104      	bne.n	8012220 <ip6_input+0x218>
 8012216:	4b3e      	ldr	r3, [pc, #248]	; (8012310 <ip6_input+0x308>)
 8012218:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801221c:	2bff      	cmp	r3, #255	; 0xff
 801221e:	d00b      	beq.n	8012238 <ip6_input+0x230>
    pbuf_free(p);
 8012220:	4620      	mov	r0, r4
 8012222:	f7f5 ff65 	bl	80080f0 <pbuf_free>
    goto ip6_input_cleanup;
 8012226:	e04c      	b.n	80122c2 <ip6_input+0x2ba>
      netif = NULL;
 8012228:	2700      	movs	r7, #0
 801222a:	e7dd      	b.n	80121e8 <ip6_input+0x1e0>
 801222c:	2700      	movs	r7, #0
 801222e:	e7db      	b.n	80121e8 <ip6_input+0x1e0>
 8012230:	2700      	movs	r7, #0
 8012232:	e7d9      	b.n	80121e8 <ip6_input+0x1e0>
 8012234:	2700      	movs	r7, #0
 8012236:	e7d7      	b.n	80121e8 <ip6_input+0x1e0>
  if (netif == NULL) {
 8012238:	2f00      	cmp	r7, #0
 801223a:	d03f      	beq.n	80122bc <ip6_input+0x2b4>
  ip_data.current_netif = netif;
 801223c:	4b34      	ldr	r3, [pc, #208]	; (8012310 <ip6_input+0x308>)
 801223e:	601f      	str	r7, [r3, #0]
  nexth = &IP6H_NEXTH(ip6hdr);
 8012240:	f105 0806 	add.w	r8, r5, #6
  pbuf_remove_header(p, IP6_HLEN);
 8012244:	2128      	movs	r1, #40	; 0x28
 8012246:	4620      	mov	r0, r4
 8012248:	f7f5 ff0c 	bl	8008064 <pbuf_remove_header>
  hlen = hlen_tot = IP6_HLEN;
 801224c:	2728      	movs	r7, #40	; 0x28
  while (*nexth != IP6_NEXTH_NONE)
 801224e:	f898 3000 	ldrb.w	r3, [r8]
 8012252:	2b3b      	cmp	r3, #59	; 0x3b
 8012254:	f000 8150 	beq.w	80124f8 <ip6_input+0x4f0>
    switch (*nexth) {
 8012258:	2b2c      	cmp	r3, #44	; 0x2c
 801225a:	f000 810f 	beq.w	801247c <ip6_input+0x474>
 801225e:	d843      	bhi.n	80122e8 <ip6_input+0x2e0>
 8012260:	2b00      	cmp	r3, #0
 8012262:	d05b      	beq.n	801231c <ip6_input+0x314>
 8012264:	2b2b      	cmp	r3, #43	; 0x2b
 8012266:	f040 8147 	bne.w	80124f8 <ip6_input+0x4f0>
      rout_hdr = (struct ip6_rout_hdr *)p->payload;
 801226a:	6862      	ldr	r2, [r4, #4]
      nexth = &IP6_ROUT_NEXTH(rout_hdr);
 801226c:	4690      	mov	r8, r2
      hlen = 8 * (1 + rout_hdr->_hlen);
 801226e:	7850      	ldrb	r0, [r2, #1]
 8012270:	1c41      	adds	r1, r0, #1
 8012272:	00c9      	lsls	r1, r1, #3
      if ((p->len < 8) || (hlen > p->len)) {
 8012274:	8963      	ldrh	r3, [r4, #10]
 8012276:	2b07      	cmp	r3, #7
 8012278:	f240 80ea 	bls.w	8012450 <ip6_input+0x448>
 801227c:	428b      	cmp	r3, r1
 801227e:	f0c0 80e7 	bcc.w	8012450 <ip6_input+0x448>
      hlen_tot = (u16_t)(hlen_tot + hlen);
 8012282:	440f      	add	r7, r1
 8012284:	b2bf      	uxth	r7, r7
      if (IP6_ROUT_SEG_LEFT(rout_hdr)) {
 8012286:	78d3      	ldrb	r3, [r2, #3]
 8012288:	b143      	cbz	r3, 801229c <ip6_input+0x294>
        if (rout_hdr->_hlen & 0x1) {
 801228a:	f010 0f01 	tst.w	r0, #1
 801228e:	f040 80e3 	bne.w	8012458 <ip6_input+0x450>
        switch (IP6_ROUT_TYPE(rout_hdr))
 8012292:	7893      	ldrb	r3, [r2, #2]
 8012294:	3b02      	subs	r3, #2
 8012296:	2b01      	cmp	r3, #1
 8012298:	f200 80e7 	bhi.w	801246a <ip6_input+0x462>
      pbuf_remove_header(p, hlen);
 801229c:	4620      	mov	r0, r4
 801229e:	f7f5 fee1 	bl	8008064 <pbuf_remove_header>
    if (*nexth == IP6_NEXTH_HOPBYHOP) {
 80122a2:	f898 3000 	ldrb.w	r3, [r8]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d1d1      	bne.n	801224e <ip6_input+0x246>
      icmp6_param_problem(p, ICMP6_PP_HEADER, nexth);
 80122aa:	4642      	mov	r2, r8
 80122ac:	2101      	movs	r1, #1
 80122ae:	4620      	mov	r0, r4
 80122b0:	f7ff fc3c 	bl	8011b2c <icmp6_param_problem>
      pbuf_free(p);
 80122b4:	4620      	mov	r0, r4
 80122b6:	f7f5 ff1b 	bl	80080f0 <pbuf_free>
      goto ip6_input_cleanup;
 80122ba:	e002      	b.n	80122c2 <ip6_input+0x2ba>
    pbuf_free(p);
 80122bc:	4620      	mov	r0, r4
 80122be:	f7f5 ff17 	bl	80080f0 <pbuf_free>
  ip_data.current_netif = NULL;
 80122c2:	4b13      	ldr	r3, [pc, #76]	; (8012310 <ip6_input+0x308>)
 80122c4:	2200      	movs	r2, #0
 80122c6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80122c8:	605a      	str	r2, [r3, #4]
  ip_data.current_ip6_header = NULL;
 80122ca:	60da      	str	r2, [r3, #12]
  ip_data.current_ip_header_tot_len = 0;
 80122cc:	821a      	strh	r2, [r3, #16]
  ip6_addr_set_zero(ip6_current_src_addr());
 80122ce:	615a      	str	r2, [r3, #20]
 80122d0:	619a      	str	r2, [r3, #24]
 80122d2:	61da      	str	r2, [r3, #28]
 80122d4:	621a      	str	r2, [r3, #32]
 80122d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ip6_addr_set_zero(ip6_current_dest_addr());
 80122da:	62da      	str	r2, [r3, #44]	; 0x2c
 80122dc:	631a      	str	r2, [r3, #48]	; 0x30
 80122de:	635a      	str	r2, [r3, #52]	; 0x34
 80122e0:	639a      	str	r2, [r3, #56]	; 0x38
 80122e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return ERR_OK;
 80122e6:	e6ab      	b.n	8012040 <ip6_input+0x38>
    switch (*nexth) {
 80122e8:	2b3c      	cmp	r3, #60	; 0x3c
 80122ea:	f040 8105 	bne.w	80124f8 <ip6_input+0x4f0>
      dest_hdr = (struct ip6_dest_hdr *)p->payload;
 80122ee:	6861      	ldr	r1, [r4, #4]
      nexth = &IP6_DEST_NEXTH(dest_hdr);
 80122f0:	4688      	mov	r8, r1
      hlen = 8 * (1 + dest_hdr->_hlen);
 80122f2:	f891 c001 	ldrb.w	ip, [r1, #1]
 80122f6:	f10c 0c01 	add.w	ip, ip, #1
 80122fa:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
      if ((p->len < 8) || (hlen > p->len)) {
 80122fe:	8963      	ldrh	r3, [r4, #10]
 8012300:	2b07      	cmp	r3, #7
 8012302:	d95f      	bls.n	80123c4 <ip6_input+0x3bc>
 8012304:	4563      	cmp	r3, ip
 8012306:	d35d      	bcc.n	80123c4 <ip6_input+0x3bc>
      hlen_tot = (u16_t)(hlen_tot + hlen);
 8012308:	4467      	add	r7, ip
 801230a:	b2bf      	uxth	r7, r7
      opt_offset = IP6_DEST_HLEN;
 801230c:	2002      	movs	r0, #2
      while (opt_offset < hlen)
 801230e:	e08d      	b.n	801242c <ip6_input+0x424>
 8012310:	20003e34 	.word	0x20003e34
 8012314:	20007f9c 	.word	0x20007f9c
 8012318:	20003e60 	.word	0x20003e60
      hbh_hdr = (struct ip6_hbh_hdr *)p->payload;
 801231c:	6861      	ldr	r1, [r4, #4]
      nexth = &IP6_HBH_NEXTH(hbh_hdr);
 801231e:	4688      	mov	r8, r1
      hlen = (u16_t)(8 * (1 + hbh_hdr->_hlen));
 8012320:	f891 c001 	ldrb.w	ip, [r1, #1]
 8012324:	f10c 0c01 	add.w	ip, ip, #1
 8012328:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
      if ((p->len < 8) || (hlen > p->len)) {
 801232c:	8963      	ldrh	r3, [r4, #10]
 801232e:	2b07      	cmp	r3, #7
 8012330:	d905      	bls.n	801233e <ip6_input+0x336>
 8012332:	4563      	cmp	r3, ip
 8012334:	d303      	bcc.n	801233e <ip6_input+0x336>
      hlen_tot = (u16_t)(hlen_tot + hlen);
 8012336:	4467      	add	r7, ip
 8012338:	b2bf      	uxth	r7, r7
      opt_offset = IP6_HBH_HLEN;
 801233a:	2002      	movs	r0, #2
      while (opt_offset < hlen)
 801233c:	e030      	b.n	80123a0 <ip6_input+0x398>
        pbuf_free(p);
 801233e:	4620      	mov	r0, r4
 8012340:	f7f5 fed6 	bl	80080f0 <pbuf_free>
        goto ip6_input_cleanup;
 8012344:	e7bd      	b.n	80122c2 <ip6_input+0x2ba>
 8012346:	2bc2      	cmp	r3, #194	; 0xc2
 8012348:	d103      	bne.n	8012352 <ip6_input+0x34a>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 801234a:	7853      	ldrb	r3, [r2, #1]
          break;
 801234c:	e026      	b.n	801239c <ip6_input+0x394>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 801234e:	7853      	ldrb	r3, [r2, #1]
          break;
 8012350:	e024      	b.n	801239c <ip6_input+0x394>
          switch (IP6_OPT_TYPE_ACTION(opt_hdr)) {
 8012352:	099b      	lsrs	r3, r3, #6
 8012354:	2b02      	cmp	r3, #2
 8012356:	d009      	beq.n	801236c <ip6_input+0x364>
 8012358:	2b03      	cmp	r3, #3
 801235a:	d00f      	beq.n	801237c <ip6_input+0x374>
 801235c:	2b01      	cmp	r3, #1
 801235e:	d001      	beq.n	8012364 <ip6_input+0x35c>
            opt_dlen = IP6_OPT_DLEN(opt_hdr);
 8012360:	7853      	ldrb	r3, [r2, #1]
          break;
 8012362:	e01b      	b.n	801239c <ip6_input+0x394>
            pbuf_free(p);
 8012364:	4620      	mov	r0, r4
 8012366:	f7f5 fec3 	bl	80080f0 <pbuf_free>
            goto ip6_input_cleanup;
 801236a:	e7aa      	b.n	80122c2 <ip6_input+0x2ba>
            icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
 801236c:	2102      	movs	r1, #2
 801236e:	4620      	mov	r0, r4
 8012370:	f7ff fbdc 	bl	8011b2c <icmp6_param_problem>
            pbuf_free(p);
 8012374:	4620      	mov	r0, r4
 8012376:	f7f5 febb 	bl	80080f0 <pbuf_free>
            goto ip6_input_cleanup;
 801237a:	e7a2      	b.n	80122c2 <ip6_input+0x2ba>
            if (!ip6_addr_ismulticast(ip6_current_dest_addr())) {
 801237c:	4b79      	ldr	r3, [pc, #484]	; (8012564 <ip6_input+0x55c>)
 801237e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012382:	2bff      	cmp	r3, #255	; 0xff
 8012384:	d103      	bne.n	801238e <ip6_input+0x386>
            pbuf_free(p);
 8012386:	4620      	mov	r0, r4
 8012388:	f7f5 feb2 	bl	80080f0 <pbuf_free>
            goto ip6_input_cleanup;
 801238c:	e799      	b.n	80122c2 <ip6_input+0x2ba>
              icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
 801238e:	2102      	movs	r1, #2
 8012390:	4620      	mov	r0, r4
 8012392:	f7ff fbcb 	bl	8011b2c <icmp6_param_problem>
 8012396:	e7f6      	b.n	8012386 <ip6_input+0x37e>
 8012398:	f04f 33ff 	mov.w	r3, #4294967295
        opt_offset = opt_offset + IP6_OPT_HLEN + opt_dlen;
 801239c:	3002      	adds	r0, #2
 801239e:	4418      	add	r0, r3
      while (opt_offset < hlen)
 80123a0:	4584      	cmp	ip, r0
 80123a2:	dd0a      	ble.n	80123ba <ip6_input+0x3b2>
        opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + opt_offset);
 80123a4:	180a      	adds	r2, r1, r0
        switch (IP6_OPT_TYPE(opt_hdr)) {
 80123a6:	5c0b      	ldrb	r3, [r1, r0]
 80123a8:	2b05      	cmp	r3, #5
 80123aa:	d0d0      	beq.n	801234e <ip6_input+0x346>
 80123ac:	d8cb      	bhi.n	8012346 <ip6_input+0x33e>
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d0f2      	beq.n	8012398 <ip6_input+0x390>
 80123b2:	2b01      	cmp	r3, #1
 80123b4:	d1cd      	bne.n	8012352 <ip6_input+0x34a>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 80123b6:	7853      	ldrb	r3, [r2, #1]
          break;
 80123b8:	e7f0      	b.n	801239c <ip6_input+0x394>
      pbuf_remove_header(p, hlen);
 80123ba:	4661      	mov	r1, ip
 80123bc:	4620      	mov	r0, r4
 80123be:	f7f5 fe51 	bl	8008064 <pbuf_remove_header>
      break;
 80123c2:	e76e      	b.n	80122a2 <ip6_input+0x29a>
        pbuf_free(p);
 80123c4:	4620      	mov	r0, r4
 80123c6:	f7f5 fe93 	bl	80080f0 <pbuf_free>
        goto ip6_input_cleanup;
 80123ca:	e77a      	b.n	80122c2 <ip6_input+0x2ba>
 80123cc:	b353      	cbz	r3, 8012424 <ip6_input+0x41c>
 80123ce:	2b01      	cmp	r3, #1
 80123d0:	d105      	bne.n	80123de <ip6_input+0x3d6>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 80123d2:	7853      	ldrb	r3, [r2, #1]
          break;
 80123d4:	e028      	b.n	8012428 <ip6_input+0x420>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 80123d6:	7853      	ldrb	r3, [r2, #1]
          break;
 80123d8:	e026      	b.n	8012428 <ip6_input+0x420>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 80123da:	7853      	ldrb	r3, [r2, #1]
          break;
 80123dc:	e024      	b.n	8012428 <ip6_input+0x420>
          switch (IP6_OPT_TYPE_ACTION(opt_hdr))
 80123de:	099b      	lsrs	r3, r3, #6
 80123e0:	2b02      	cmp	r3, #2
 80123e2:	d009      	beq.n	80123f8 <ip6_input+0x3f0>
 80123e4:	2b03      	cmp	r3, #3
 80123e6:	d00f      	beq.n	8012408 <ip6_input+0x400>
 80123e8:	2b01      	cmp	r3, #1
 80123ea:	d001      	beq.n	80123f0 <ip6_input+0x3e8>
            opt_dlen = IP6_OPT_DLEN(opt_hdr);
 80123ec:	7853      	ldrb	r3, [r2, #1]
          break;
 80123ee:	e01b      	b.n	8012428 <ip6_input+0x420>
            pbuf_free(p);
 80123f0:	4620      	mov	r0, r4
 80123f2:	f7f5 fe7d 	bl	80080f0 <pbuf_free>
            goto ip6_input_cleanup;
 80123f6:	e764      	b.n	80122c2 <ip6_input+0x2ba>
            icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
 80123f8:	2102      	movs	r1, #2
 80123fa:	4620      	mov	r0, r4
 80123fc:	f7ff fb96 	bl	8011b2c <icmp6_param_problem>
            pbuf_free(p);
 8012400:	4620      	mov	r0, r4
 8012402:	f7f5 fe75 	bl	80080f0 <pbuf_free>
            goto ip6_input_cleanup;
 8012406:	e75c      	b.n	80122c2 <ip6_input+0x2ba>
            if (!ip6_addr_ismulticast(ip6_current_dest_addr())) {
 8012408:	4b56      	ldr	r3, [pc, #344]	; (8012564 <ip6_input+0x55c>)
 801240a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801240e:	2bff      	cmp	r3, #255	; 0xff
 8012410:	d103      	bne.n	801241a <ip6_input+0x412>
            pbuf_free(p);
 8012412:	4620      	mov	r0, r4
 8012414:	f7f5 fe6c 	bl	80080f0 <pbuf_free>
            goto ip6_input_cleanup;
 8012418:	e753      	b.n	80122c2 <ip6_input+0x2ba>
              icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
 801241a:	2102      	movs	r1, #2
 801241c:	4620      	mov	r0, r4
 801241e:	f7ff fb85 	bl	8011b2c <icmp6_param_problem>
 8012422:	e7f6      	b.n	8012412 <ip6_input+0x40a>
 8012424:	f04f 33ff 	mov.w	r3, #4294967295
        opt_offset = opt_offset + IP6_OPT_HLEN + opt_dlen;
 8012428:	3002      	adds	r0, #2
 801242a:	4418      	add	r0, r3
      while (opt_offset < hlen)
 801242c:	4560      	cmp	r0, ip
 801242e:	da0a      	bge.n	8012446 <ip6_input+0x43e>
        opt_hdr = (struct ip6_opt_hdr *)((u8_t *)dest_hdr + opt_offset);
 8012430:	180a      	adds	r2, r1, r0
        switch (IP6_OPT_TYPE(opt_hdr))
 8012432:	5c0b      	ldrb	r3, [r1, r0]
 8012434:	2b05      	cmp	r3, #5
 8012436:	d0ce      	beq.n	80123d6 <ip6_input+0x3ce>
 8012438:	d9c8      	bls.n	80123cc <ip6_input+0x3c4>
 801243a:	2bc2      	cmp	r3, #194	; 0xc2
 801243c:	d0cd      	beq.n	80123da <ip6_input+0x3d2>
 801243e:	2bc9      	cmp	r3, #201	; 0xc9
 8012440:	d1cd      	bne.n	80123de <ip6_input+0x3d6>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 8012442:	7853      	ldrb	r3, [r2, #1]
          break;
 8012444:	e7f0      	b.n	8012428 <ip6_input+0x420>
      pbuf_remove_header(p, hlen);
 8012446:	4661      	mov	r1, ip
 8012448:	4620      	mov	r0, r4
 801244a:	f7f5 fe0b 	bl	8008064 <pbuf_remove_header>
      break;
 801244e:	e728      	b.n	80122a2 <ip6_input+0x29a>
        pbuf_free(p);
 8012450:	4620      	mov	r0, r4
 8012452:	f7f5 fe4d 	bl	80080f0 <pbuf_free>
        goto ip6_input_cleanup;
 8012456:	e734      	b.n	80122c2 <ip6_input+0x2ba>
          icmp6_param_problem(p, ICMP6_PP_FIELD, &rout_hdr->_hlen);
 8012458:	3201      	adds	r2, #1
 801245a:	2100      	movs	r1, #0
 801245c:	4620      	mov	r0, r4
 801245e:	f7ff fb65 	bl	8011b2c <icmp6_param_problem>
          pbuf_free(p);
 8012462:	4620      	mov	r0, r4
 8012464:	f7f5 fe44 	bl	80080f0 <pbuf_free>
          goto ip6_input_cleanup;
 8012468:	e72b      	b.n	80122c2 <ip6_input+0x2ba>
          icmp6_param_problem(p, ICMP6_PP_FIELD, &IP6_ROUT_TYPE(rout_hdr));
 801246a:	3202      	adds	r2, #2
 801246c:	2100      	movs	r1, #0
 801246e:	4620      	mov	r0, r4
 8012470:	f7ff fb5c 	bl	8011b2c <icmp6_param_problem>
          pbuf_free(p);
 8012474:	4620      	mov	r0, r4
 8012476:	f7f5 fe3b 	bl	80080f0 <pbuf_free>
          goto ip6_input_cleanup;
 801247a:	e722      	b.n	80122c2 <ip6_input+0x2ba>
      frag_hdr = (struct ip6_frag_hdr *)p->payload;
 801247c:	f8d4 9004 	ldr.w	r9, [r4, #4]
      nexth = &IP6_FRAG_NEXTH(frag_hdr);
 8012480:	46c8      	mov	r8, r9
      if (hlen > p->len) {
 8012482:	8963      	ldrh	r3, [r4, #10]
 8012484:	2b07      	cmp	r3, #7
 8012486:	d913      	bls.n	80124b0 <ip6_input+0x4a8>
      hlen_tot = (u16_t)(hlen_tot + hlen);
 8012488:	3708      	adds	r7, #8
 801248a:	b2bf      	uxth	r7, r7
      if (IP6_FRAG_MBIT(frag_hdr) && (IP6H_PLEN(ip6hdr) & 0x7)) {
 801248c:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 8012490:	f7f4 faf4 	bl	8006a7c <lwip_htons>
 8012494:	f010 0f01 	tst.w	r0, #1
 8012498:	d10e      	bne.n	80124b8 <ip6_input+0x4b0>
      if ((frag_hdr->_fragment_offset &
 801249a:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801249e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80124a2:	b29b      	uxth	r3, r3
 80124a4:	b9bb      	cbnz	r3, 80124d6 <ip6_input+0x4ce>
        pbuf_remove_header(p, hlen);
 80124a6:	2108      	movs	r1, #8
 80124a8:	4620      	mov	r0, r4
 80124aa:	f7f5 fddb 	bl	8008064 <pbuf_remove_header>
 80124ae:	e6f8      	b.n	80122a2 <ip6_input+0x29a>
        pbuf_free(p);
 80124b0:	4620      	mov	r0, r4
 80124b2:	f7f5 fe1d 	bl	80080f0 <pbuf_free>
        goto ip6_input_cleanup;
 80124b6:	e704      	b.n	80122c2 <ip6_input+0x2ba>
      if (IP6_FRAG_MBIT(frag_hdr) && (IP6H_PLEN(ip6hdr) & 0x7)) {
 80124b8:	88a8      	ldrh	r0, [r5, #4]
 80124ba:	f7f4 fadf 	bl	8006a7c <lwip_htons>
 80124be:	f010 0f07 	tst.w	r0, #7
 80124c2:	d0ea      	beq.n	801249a <ip6_input+0x492>
        icmp6_param_problem(p, ICMP6_PP_FIELD, LWIP_PACKED_CAST(const void *, &ip6hdr->_plen));
 80124c4:	1d2a      	adds	r2, r5, #4
 80124c6:	2100      	movs	r1, #0
 80124c8:	4620      	mov	r0, r4
 80124ca:	f7ff fb2f 	bl	8011b2c <icmp6_param_problem>
        pbuf_free(p);
 80124ce:	4620      	mov	r0, r4
 80124d0:	f7f5 fe0e 	bl	80080f0 <pbuf_free>
        goto ip6_input_cleanup;
 80124d4:	e6f5      	b.n	80122c2 <ip6_input+0x2ba>
        ip_data.current_ip_header_tot_len = hlen_tot;
 80124d6:	4b23      	ldr	r3, [pc, #140]	; (8012564 <ip6_input+0x55c>)
 80124d8:	821f      	strh	r7, [r3, #16]
        p = ip6_reass(p);
 80124da:	4620      	mov	r0, r4
 80124dc:	f000 fa68 	bl	80129b0 <ip6_reass>
        if (p == NULL) {
 80124e0:	4604      	mov	r4, r0
 80124e2:	2800      	cmp	r0, #0
 80124e4:	f43f aeed 	beq.w	80122c2 <ip6_input+0x2ba>
        ip6hdr = (struct ip6_hdr *)p->payload;
 80124e8:	6845      	ldr	r5, [r0, #4]
        nexth = &IP6H_NEXTH(ip6hdr);
 80124ea:	f105 0806 	add.w	r8, r5, #6
        pbuf_remove_header(p, IP6_HLEN);
 80124ee:	2128      	movs	r1, #40	; 0x28
 80124f0:	f7f5 fdb8 	bl	8008064 <pbuf_remove_header>
        hlen = hlen_tot = IP6_HLEN;
 80124f4:	2728      	movs	r7, #40	; 0x28
 80124f6:	e6d4      	b.n	80122a2 <ip6_input+0x29a>
  ip_data.current_ip_header_tot_len = hlen_tot;
 80124f8:	4b1a      	ldr	r3, [pc, #104]	; (8012564 <ip6_input+0x55c>)
 80124fa:	821f      	strh	r7, [r3, #16]
    switch (*nexth) {
 80124fc:	f898 3000 	ldrb.w	r3, [r8]
 8012500:	2b3a      	cmp	r3, #58	; 0x3a
 8012502:	d014      	beq.n	801252e <ip6_input+0x526>
 8012504:	d808      	bhi.n	8012518 <ip6_input+0x510>
 8012506:	2b06      	cmp	r3, #6
 8012508:	d00c      	beq.n	8012524 <ip6_input+0x51c>
 801250a:	2b11      	cmp	r3, #17
 801250c:	d114      	bne.n	8012538 <ip6_input+0x530>
      udp_input(p, inp);
 801250e:	4631      	mov	r1, r6
 8012510:	4620      	mov	r0, r4
 8012512:	f7fb fa2d 	bl	800d970 <udp_input>
      break;
 8012516:	e6d4      	b.n	80122c2 <ip6_input+0x2ba>
    switch (*nexth) {
 8012518:	2b3b      	cmp	r3, #59	; 0x3b
 801251a:	d10d      	bne.n	8012538 <ip6_input+0x530>
      pbuf_free(p);
 801251c:	4620      	mov	r0, r4
 801251e:	f7f5 fde7 	bl	80080f0 <pbuf_free>
      break;
 8012522:	e6ce      	b.n	80122c2 <ip6_input+0x2ba>
      tcp_input(p, inp);
 8012524:	4631      	mov	r1, r6
 8012526:	4620      	mov	r0, r4
 8012528:	f7f9 f858 	bl	800b5dc <tcp_input>
      break;
 801252c:	e6c9      	b.n	80122c2 <ip6_input+0x2ba>
      icmp6_input(p, inp);
 801252e:	4631      	mov	r1, r6
 8012530:	4620      	mov	r0, r4
 8012532:	f7ff fa8b 	bl	8011a4c <icmp6_input>
      break;
 8012536:	e6c4      	b.n	80122c2 <ip6_input+0x2ba>
        pbuf_add_header_force(p, hlen_tot);
 8012538:	4639      	mov	r1, r7
 801253a:	4620      	mov	r0, r4
 801253c:	f7f5 fd8c 	bl	8008058 <pbuf_add_header_force>
        if ((!ip6_addr_ismulticast(ip6_current_dest_addr())) &&
 8012540:	4b08      	ldr	r3, [pc, #32]	; (8012564 <ip6_input+0x55c>)
 8012542:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012546:	2bff      	cmp	r3, #255	; 0xff
 8012548:	d002      	beq.n	8012550 <ip6_input+0x548>
            (IP6H_NEXTH(ip6hdr) != IP6_NEXTH_ICMP6)) {
 801254a:	79ab      	ldrb	r3, [r5, #6]
        if ((!ip6_addr_ismulticast(ip6_current_dest_addr())) &&
 801254c:	2b3a      	cmp	r3, #58	; 0x3a
 801254e:	d103      	bne.n	8012558 <ip6_input+0x550>
      pbuf_free(p);
 8012550:	4620      	mov	r0, r4
 8012552:	f7f5 fdcd 	bl	80080f0 <pbuf_free>
      break;
 8012556:	e6b4      	b.n	80122c2 <ip6_input+0x2ba>
          icmp6_param_problem(p, ICMP6_PP_HEADER, nexth);
 8012558:	4642      	mov	r2, r8
 801255a:	2101      	movs	r1, #1
 801255c:	4620      	mov	r0, r4
 801255e:	f7ff fae5 	bl	8011b2c <icmp6_param_problem>
 8012562:	e7f5      	b.n	8012550 <ip6_input+0x548>
 8012564:	20003e34 	.word	0x20003e34

08012568 <ip6_output_if_src>:
 */
err_t
ip6_output_if_src(struct pbuf *p, const ip6_addr_t *src, const ip6_addr_t *dest,
             u8_t hl, u8_t tc,
             u8_t nexth, struct netif *netif)
{
 8012568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801256c:	b087      	sub	sp, #28
 801256e:	4606      	mov	r6, r0
 8012570:	460f      	mov	r7, r1
 8012572:	4614      	mov	r4, r2
 8012574:	4699      	mov	r9, r3
 8012576:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  struct ip6_hdr *ip6hdr;
  ip6_addr_t dest_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801257a:	7b82      	ldrb	r2, [r0, #14]
 801257c:	2a01      	cmp	r2, #1
 801257e:	d16f      	bne.n	8012660 <ip6_output_if_src+0xf8>

  /* Should the IPv6 header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012580:	2c00      	cmp	r4, #0
 8012582:	d07f      	beq.n	8012684 <ip6_output_if_src+0x11c>
     * based on the outgoing interface. The lower layers (e.g., nd6) absolutely
     * require addresses to be properly zoned for correctness. In some cases,
     * earlier attempts will have been made to add a zone to the destination,
     * but this function is the only one that is called in all (other) cases,
     * so we must do this here. */
    if (ip6_addr_lacks_zone(dest, IP6_UNKNOWN)) {
 8012584:	7c22      	ldrb	r2, [r4, #16]
 8012586:	bb82      	cbnz	r2, 80125ea <ip6_output_if_src+0x82>
 8012588:	6823      	ldr	r3, [r4, #0]
 801258a:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 801258e:	4019      	ands	r1, r3
 8012590:	f248 00fe 	movw	r0, #33022	; 0x80fe
 8012594:	4281      	cmp	r1, r0
 8012596:	d00a      	beq.n	80125ae <ip6_output_if_src+0x46>
 8012598:	f648 70ff 	movw	r0, #36863	; 0x8fff
 801259c:	4018      	ands	r0, r3
 801259e:	f240 15ff 	movw	r5, #511	; 0x1ff
 80125a2:	42a8      	cmp	r0, r5
 80125a4:	d003      	beq.n	80125ae <ip6_output_if_src+0x46>
 80125a6:	f240 25ff 	movw	r5, #767	; 0x2ff
 80125aa:	42a8      	cmp	r0, r5
 80125ac:	d11d      	bne.n	80125ea <ip6_output_if_src+0x82>
      ip6_addr_copy(dest_addr, *dest);
 80125ae:	9301      	str	r3, [sp, #4]
 80125b0:	6860      	ldr	r0, [r4, #4]
 80125b2:	9002      	str	r0, [sp, #8]
 80125b4:	68a0      	ldr	r0, [r4, #8]
 80125b6:	9003      	str	r0, [sp, #12]
 80125b8:	68e0      	ldr	r0, [r4, #12]
 80125ba:	9004      	str	r0, [sp, #16]
      ip6_addr_assign_zone(&dest_addr, IP6_UNKNOWN, netif);
 80125bc:	f248 00fe 	movw	r0, #33022	; 0x80fe
 80125c0:	4281      	cmp	r1, r0
 80125c2:	d00b      	beq.n	80125dc <ip6_output_if_src+0x74>
 80125c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80125c8:	041b      	lsls	r3, r3, #16
 80125ca:	0c1b      	lsrs	r3, r3, #16
 80125cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80125d0:	428b      	cmp	r3, r1
 80125d2:	d003      	beq.n	80125dc <ip6_output_if_src+0x74>
 80125d4:	f240 21ff 	movw	r1, #767	; 0x2ff
 80125d8:	428b      	cmp	r3, r1
 80125da:	d103      	bne.n	80125e4 <ip6_output_if_src+0x7c>
 80125dc:	f898 20e2 	ldrb.w	r2, [r8, #226]	; 0xe2
 80125e0:	3201      	adds	r2, #1
 80125e2:	b2d2      	uxtb	r2, r2
 80125e4:	f88d 2014 	strb.w	r2, [sp, #20]
      dest = &dest_addr;
 80125e8:	ac01      	add	r4, sp, #4
    }
#endif /* LWIP_IPV6_SCOPES */

    /* generate IPv6 header */
    if (pbuf_add_header(p, IP6_HLEN)) {
 80125ea:	2128      	movs	r1, #40	; 0x28
 80125ec:	4630      	mov	r0, r6
 80125ee:	f7f5 fd2e 	bl	800804e <pbuf_add_header>
 80125f2:	2800      	cmp	r0, #0
 80125f4:	d179      	bne.n	80126ea <ip6_output_if_src+0x182>
      LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip6_output: not enough room for IPv6 header in pbuf\n"));
      IP6_STATS_INC(ip6.err);
      return ERR_BUF;
    }

    ip6hdr = (struct ip6_hdr *)p->payload;
 80125f6:	6875      	ldr	r5, [r6, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip6_hdr",
 80125f8:	8973      	ldrh	r3, [r6, #10]
 80125fa:	2b27      	cmp	r3, #39	; 0x27
 80125fc:	d938      	bls.n	8012670 <ip6_output_if_src+0x108>
               (p->len >= sizeof(struct ip6_hdr)));

    IP6H_HOPLIM_SET(ip6hdr, hl);
 80125fe:	f885 9007 	strb.w	r9, [r5, #7]
    IP6H_NEXTH_SET(ip6hdr, nexth);
 8012602:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8012606:	71ab      	strb	r3, [r5, #6]

    /* dest cannot be NULL here */
    ip6_addr_copy_to_packed(ip6hdr->dest, *dest);
 8012608:	6823      	ldr	r3, [r4, #0]
 801260a:	61ab      	str	r3, [r5, #24]
 801260c:	6863      	ldr	r3, [r4, #4]
 801260e:	61eb      	str	r3, [r5, #28]
 8012610:	68a3      	ldr	r3, [r4, #8]
 8012612:	622b      	str	r3, [r5, #32]
 8012614:	68e3      	ldr	r3, [r4, #12]
 8012616:	626b      	str	r3, [r5, #36]	; 0x24

    IP6H_VTCFL_SET(ip6hdr, 6, tc, 0);
 8012618:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801261c:	0500      	lsls	r0, r0, #20
 801261e:	f040 40c0 	orr.w	r0, r0, #1610612736	; 0x60000000
 8012622:	f7f4 fa30 	bl	8006a86 <lwip_htonl>
 8012626:	6028      	str	r0, [r5, #0]
    IP6H_PLEN_SET(ip6hdr, (u16_t)(p->tot_len - IP6_HLEN));
 8012628:	8930      	ldrh	r0, [r6, #8]
 801262a:	3828      	subs	r0, #40	; 0x28
 801262c:	b280      	uxth	r0, r0
 801262e:	f7f4 fa25 	bl	8006a7c <lwip_htons>
 8012632:	80a8      	strh	r0, [r5, #4]

    if (src == NULL) {
 8012634:	b327      	cbz	r7, 8012680 <ip6_output_if_src+0x118>
      src = IP6_ADDR_ANY6;
    }
    /* src cannot be NULL here */
    ip6_addr_copy_to_packed(ip6hdr->src, *src);
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	60ab      	str	r3, [r5, #8]
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	60eb      	str	r3, [r5, #12]
 801263e:	68bb      	ldr	r3, [r7, #8]
 8012640:	612b      	str	r3, [r5, #16]
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	616b      	str	r3, [r5, #20]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if LWIP_IPV6_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif_mtu6(netif) && (p->tot_len > nd6_get_destination_mtu(dest, netif))) {
 8012646:	f8b8 30d6 	ldrh.w	r3, [r8, #214]	; 0xd6
 801264a:	2b00      	cmp	r3, #0
 801264c:	d140      	bne.n	80126d0 <ip6_output_if_src+0x168>
    return ip6_frag(p, netif, dest);
  }
#endif /* LWIP_IPV6_FRAG */

  LWIP_DEBUGF(IP6_DEBUG, ("netif->output_ip6()\n"));
  return netif->output_ip6(netif, p, dest);
 801264e:	f8d8 30bc 	ldr.w	r3, [r8, #188]	; 0xbc
 8012652:	4622      	mov	r2, r4
 8012654:	4631      	mov	r1, r6
 8012656:	4640      	mov	r0, r8
 8012658:	4798      	blx	r3
}
 801265a:	b007      	add	sp, #28
 801265c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012660:	4b23      	ldr	r3, [pc, #140]	; (80126f0 <ip6_output_if_src+0x188>)
 8012662:	f240 429d 	movw	r2, #1181	; 0x49d
 8012666:	4923      	ldr	r1, [pc, #140]	; (80126f4 <ip6_output_if_src+0x18c>)
 8012668:	4823      	ldr	r0, [pc, #140]	; (80126f8 <ip6_output_if_src+0x190>)
 801266a:	f003 f991 	bl	8015990 <iprintf>
 801266e:	e787      	b.n	8012580 <ip6_output_if_src+0x18>
    LWIP_ASSERT("check that first pbuf can hold struct ip6_hdr",
 8012670:	4b1f      	ldr	r3, [pc, #124]	; (80126f0 <ip6_output_if_src+0x188>)
 8012672:	f240 42b7 	movw	r2, #1207	; 0x4b7
 8012676:	4921      	ldr	r1, [pc, #132]	; (80126fc <ip6_output_if_src+0x194>)
 8012678:	481f      	ldr	r0, [pc, #124]	; (80126f8 <ip6_output_if_src+0x190>)
 801267a:	f003 f989 	bl	8015990 <iprintf>
 801267e:	e7be      	b.n	80125fe <ip6_output_if_src+0x96>
      src = IP6_ADDR_ANY6;
 8012680:	4f1f      	ldr	r7, [pc, #124]	; (8012700 <ip6_output_if_src+0x198>)
 8012682:	e7d8      	b.n	8012636 <ip6_output_if_src+0xce>
    ip6hdr = (struct ip6_hdr *)p->payload;
 8012684:	6872      	ldr	r2, [r6, #4]
    ip6_addr_copy_from_packed(dest_addr, ip6hdr->dest);
 8012686:	6993      	ldr	r3, [r2, #24]
 8012688:	9301      	str	r3, [sp, #4]
 801268a:	69d1      	ldr	r1, [r2, #28]
 801268c:	9102      	str	r1, [sp, #8]
 801268e:	6a11      	ldr	r1, [r2, #32]
 8012690:	9103      	str	r1, [sp, #12]
 8012692:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012694:	9204      	str	r2, [sp, #16]
    ip6_addr_assign_zone(&dest_addr, IP6_UNKNOWN, netif);
 8012696:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 801269a:	4019      	ands	r1, r3
 801269c:	f248 02fe 	movw	r2, #33022	; 0x80fe
 80126a0:	4291      	cmp	r1, r2
 80126a2:	d00d      	beq.n	80126c0 <ip6_output_if_src+0x158>
 80126a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80126a8:	041b      	lsls	r3, r3, #16
 80126aa:	0c1b      	lsrs	r3, r3, #16
 80126ac:	f240 12ff 	movw	r2, #511	; 0x1ff
 80126b0:	4293      	cmp	r3, r2
 80126b2:	d005      	beq.n	80126c0 <ip6_output_if_src+0x158>
 80126b4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80126b8:	4293      	cmp	r3, r2
 80126ba:	d001      	beq.n	80126c0 <ip6_output_if_src+0x158>
 80126bc:	2300      	movs	r3, #0
 80126be:	e003      	b.n	80126c8 <ip6_output_if_src+0x160>
 80126c0:	f898 30e2 	ldrb.w	r3, [r8, #226]	; 0xe2
 80126c4:	3301      	adds	r3, #1
 80126c6:	b2db      	uxtb	r3, r3
 80126c8:	f88d 3014 	strb.w	r3, [sp, #20]
    dest = &dest_addr;
 80126cc:	ac01      	add	r4, sp, #4
 80126ce:	e7ba      	b.n	8012646 <ip6_output_if_src+0xde>
  if (netif_mtu6(netif) && (p->tot_len > nd6_get_destination_mtu(dest, netif))) {
 80126d0:	8935      	ldrh	r5, [r6, #8]
 80126d2:	4641      	mov	r1, r8
 80126d4:	4620      	mov	r0, r4
 80126d6:	f002 ff03 	bl	80154e0 <nd6_get_destination_mtu>
 80126da:	4285      	cmp	r5, r0
 80126dc:	d9b7      	bls.n	801264e <ip6_output_if_src+0xe6>
    return ip6_frag(p, netif, dest);
 80126de:	4622      	mov	r2, r4
 80126e0:	4641      	mov	r1, r8
 80126e2:	4630      	mov	r0, r6
 80126e4:	f000 fb74 	bl	8012dd0 <ip6_frag>
 80126e8:	e7b7      	b.n	801265a <ip6_output_if_src+0xf2>
      return ERR_BUF;
 80126ea:	f06f 0001 	mvn.w	r0, #1
 80126ee:	e7b4      	b.n	801265a <ip6_output_if_src+0xf2>
 80126f0:	0801a7a4 	.word	0x0801a7a4
 80126f4:	0801a498 	.word	0x0801a498
 80126f8:	08016bb4 	.word	0x08016bb4
 80126fc:	0801a7d8 	.word	0x0801a7d8
 8012700:	0801a808 	.word	0x0801a808

08012704 <ip6_output_if>:
{
 8012704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012706:	b085      	sub	sp, #20
 8012708:	4607      	mov	r7, r0
 801270a:	461c      	mov	r4, r3
 801270c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (dest != LWIP_IP_HDRINCL) {
 801270e:	4616      	mov	r6, r2
 8012710:	b142      	cbz	r2, 8012724 <ip6_output_if+0x20>
    if (src != NULL && ip6_addr_isany(src)) {
 8012712:	b139      	cbz	r1, 8012724 <ip6_output_if+0x20>
 8012714:	680b      	ldr	r3, [r1, #0]
 8012716:	b92b      	cbnz	r3, 8012724 <ip6_output_if+0x20>
 8012718:	684b      	ldr	r3, [r1, #4]
 801271a:	b91b      	cbnz	r3, 8012724 <ip6_output_if+0x20>
 801271c:	688b      	ldr	r3, [r1, #8]
 801271e:	b90b      	cbnz	r3, 8012724 <ip6_output_if+0x20>
 8012720:	68cb      	ldr	r3, [r1, #12]
 8012722:	b16b      	cbz	r3, 8012740 <ip6_output_if+0x3c>
  return ip6_output_if_src(p, src_used, dest, hl, tc, nexth, netif);
 8012724:	9502      	str	r5, [sp, #8]
 8012726:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801272a:	9301      	str	r3, [sp, #4]
 801272c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8012730:	9300      	str	r3, [sp, #0]
 8012732:	4623      	mov	r3, r4
 8012734:	4632      	mov	r2, r6
 8012736:	4638      	mov	r0, r7
 8012738:	f7ff ff16 	bl	8012568 <ip6_output_if_src>
}
 801273c:	b005      	add	sp, #20
 801273e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      src_used = ip_2_ip6(ip6_select_source_address(netif, dest));
 8012740:	4611      	mov	r1, r2
 8012742:	4628      	mov	r0, r5
 8012744:	f7ff fba6 	bl	8011e94 <ip6_select_source_address>
 8012748:	4601      	mov	r1, r0
      if ((src_used == NULL) || ip6_addr_isany(src_used)) {
 801274a:	b170      	cbz	r0, 801276a <ip6_output_if+0x66>
 801274c:	6803      	ldr	r3, [r0, #0]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d1e8      	bne.n	8012724 <ip6_output_if+0x20>
 8012752:	6843      	ldr	r3, [r0, #4]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d1e5      	bne.n	8012724 <ip6_output_if+0x20>
 8012758:	6883      	ldr	r3, [r0, #8]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d1e2      	bne.n	8012724 <ip6_output_if+0x20>
 801275e:	68c3      	ldr	r3, [r0, #12]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d1df      	bne.n	8012724 <ip6_output_if+0x20>
        return ERR_RTE;
 8012764:	f06f 0003 	mvn.w	r0, #3
 8012768:	e7e8      	b.n	801273c <ip6_output_if+0x38>
 801276a:	f06f 0003 	mvn.w	r0, #3
 801276e:	e7e5      	b.n	801273c <ip6_output_if+0x38>

08012770 <ip6_options_add_hbh_ra>:
 * @param value the value of the router alert option data (e.g. IP6_ROUTER_ALERT_VALUE_MLD)
 * @return ERR_OK if hop-by-hop header was added, ERR_* otherwise
 */
err_t
ip6_options_add_hbh_ra(struct pbuf *p, u8_t nexth, u8_t value)
{
 8012770:	b570      	push	{r4, r5, r6, lr}
 8012772:	4606      	mov	r6, r0
 8012774:	460d      	mov	r5, r1
 8012776:	4614      	mov	r4, r2
  struct ip6_opt_hdr *opt_hdr;

  /* fixed 4 bytes for router alert option and 2 bytes padding */
  const u8_t hlen = (sizeof(struct ip6_opt_hdr) * 2) + IP6_ROUTER_ALERT_DLEN;
  /* Move pointer to make room for hop-by-hop options header. */
  if (pbuf_add_header(p, sizeof(struct ip6_hbh_hdr) + hlen)) {
 8012778:	2108      	movs	r1, #8
 801277a:	f7f5 fc68 	bl	800804e <pbuf_add_header>
 801277e:	b960      	cbnz	r0, 801279a <ip6_options_add_hbh_ra+0x2a>
    IP6_STATS_INC(ip6.err);
    return ERR_BUF;
  }

  /* Set fields of Hop-by-Hop header */
  hbh_hdr = (struct ip6_hbh_hdr *)p->payload;
 8012780:	6873      	ldr	r3, [r6, #4]
  IP6_HBH_NEXTH(hbh_hdr) = nexth;
 8012782:	701d      	strb	r5, [r3, #0]
  hbh_hdr->_hlen = 0;
 8012784:	7058      	strb	r0, [r3, #1]
  offset = IP6_HBH_HLEN;

  /* Set router alert options to Hop-by-Hop extended option header */
  opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + offset);
  IP6_OPT_TYPE(opt_hdr) = IP6_ROUTER_ALERT_OPTION;
 8012786:	2205      	movs	r2, #5
 8012788:	709a      	strb	r2, [r3, #2]
  IP6_OPT_DLEN(opt_hdr) = IP6_ROUTER_ALERT_DLEN;
 801278a:	2202      	movs	r2, #2
 801278c:	70da      	strb	r2, [r3, #3]
  offset += IP6_OPT_HLEN;

  /* Set router alert option data */
  opt_data = (u8_t *)hbh_hdr + offset;
  opt_data[0] = value;
 801278e:	711c      	strb	r4, [r3, #4]
  opt_data[1] = 0;
 8012790:	7158      	strb	r0, [r3, #5]
  offset += IP6_OPT_DLEN(opt_hdr);

  /* add 2 bytes padding to make 8 bytes Hop-by-Hop header length */
  opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + offset);
  IP6_OPT_TYPE(opt_hdr) = IP6_PADN_OPTION;
 8012792:	2101      	movs	r1, #1
 8012794:	7199      	strb	r1, [r3, #6]
  IP6_OPT_DLEN(opt_hdr) = 0;
 8012796:	71d8      	strb	r0, [r3, #7]

  return ERR_OK;
}
 8012798:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_BUF;
 801279a:	f06f 0001 	mvn.w	r0, #1
 801279e:	e7fb      	b.n	8012798 <ip6_options_add_hbh_ra+0x28>

080127a0 <ip6_reass_free_complete_datagram>:
 *
 * @param ipr datagram to free
 */
static void
ip6_reass_free_complete_datagram(struct ip6_reassdata *ipr)
{
 80127a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127a4:	b08a      	sub	sp, #40	; 0x28
 80127a6:	4607      	mov	r7, r0
  u16_t clen;
  struct pbuf *p;
  struct ip6_reass_helper *iprh;

#if LWIP_ICMP6
  iprh = (struct ip6_reass_helper *)ipr->p->payload;
 80127a8:	6845      	ldr	r5, [r0, #4]
 80127aa:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 80127ac:	889a      	ldrh	r2, [r3, #4]
 80127ae:	b112      	cbz	r2, 80127b6 <ip6_reass_free_complete_datagram+0x16>
  u16_t pbufs_freed = 0;
 80127b0:	2600      	movs	r6, #0
  }
#endif /* LWIP_ICMP6 */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80127b2:	687d      	ldr	r5, [r7, #4]
  while (p != NULL) {
 80127b4:	e044      	b.n	8012840 <ip6_reass_free_complete_datagram+0xa0>
    ipr->p = iprh->next_pbuf;
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	6043      	str	r3, [r0, #4]
    MEMCPY(p->payload, ipr->orig_hdr, sizeof(iprh));
 80127ba:	686b      	ldr	r3, [r5, #4]
 80127bc:	68c2      	ldr	r2, [r0, #12]
 80127be:	601a      	str	r2, [r3, #0]
    if (pbuf_header_force(p, (s16_t)((u8_t*)p->payload - (u8_t*)ipr->iphdr))) {
 80127c0:	6869      	ldr	r1, [r5, #4]
 80127c2:	6883      	ldr	r3, [r0, #8]
 80127c4:	1ac9      	subs	r1, r1, r3
 80127c6:	b209      	sxth	r1, r1
 80127c8:	4628      	mov	r0, r5
 80127ca:	f7f5 fc8b 	bl	80080e4 <pbuf_header_force>
 80127ce:	b168      	cbz	r0, 80127ec <ip6_reass_free_complete_datagram+0x4c>
      LWIP_ASSERT("ip6_reass_free: moving p->payload to ip6 header failed\n", 0);
 80127d0:	4b35      	ldr	r3, [pc, #212]	; (80128a8 <ip6_reass_free_complete_datagram+0x108>)
 80127d2:	22a9      	movs	r2, #169	; 0xa9
 80127d4:	4935      	ldr	r1, [pc, #212]	; (80128ac <ip6_reass_free_complete_datagram+0x10c>)
 80127d6:	4836      	ldr	r0, [pc, #216]	; (80128b0 <ip6_reass_free_complete_datagram+0x110>)
 80127d8:	f003 f8da 	bl	8015990 <iprintf>
    clen = pbuf_clen(p);
 80127dc:	4628      	mov	r0, r5
 80127de:	f7f5 fdeb 	bl	80083b8 <pbuf_clen>
 80127e2:	4606      	mov	r6, r0
    pbuf_free(p);
 80127e4:	4628      	mov	r0, r5
 80127e6:	f7f5 fc83 	bl	80080f0 <pbuf_free>
 80127ea:	e7e2      	b.n	80127b2 <ip6_reass_free_complete_datagram+0x12>
      ip6_addr_copy_from_packed(src_addr, IPV6_FRAG_SRC(ipr));
 80127ec:	68bb      	ldr	r3, [r7, #8]
 80127ee:	689a      	ldr	r2, [r3, #8]
 80127f0:	9200      	str	r2, [sp, #0]
 80127f2:	68da      	ldr	r2, [r3, #12]
 80127f4:	9201      	str	r2, [sp, #4]
 80127f6:	691a      	ldr	r2, [r3, #16]
 80127f8:	9202      	str	r2, [sp, #8]
 80127fa:	695a      	ldr	r2, [r3, #20]
 80127fc:	9203      	str	r2, [sp, #12]
      ip6_addr_set_zone(&src_addr, ipr->src_zone);
 80127fe:	7f3a      	ldrb	r2, [r7, #28]
 8012800:	f88d 2010 	strb.w	r2, [sp, #16]
      ip6_addr_copy_from_packed(dest_addr, IPV6_FRAG_DEST(ipr));
 8012804:	699a      	ldr	r2, [r3, #24]
 8012806:	9205      	str	r2, [sp, #20]
 8012808:	69da      	ldr	r2, [r3, #28]
 801280a:	9206      	str	r2, [sp, #24]
 801280c:	6a1a      	ldr	r2, [r3, #32]
 801280e:	9207      	str	r2, [sp, #28]
 8012810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012812:	9308      	str	r3, [sp, #32]
      ip6_addr_set_zone(&dest_addr, ipr->dest_zone);
 8012814:	7f7b      	ldrb	r3, [r7, #29]
 8012816:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
      icmp6_time_exceeded_with_addrs(p, ICMP6_TE_FRAG, &src_addr, &dest_addr);
 801281a:	ab05      	add	r3, sp, #20
 801281c:	466a      	mov	r2, sp
 801281e:	2101      	movs	r1, #1
 8012820:	4628      	mov	r0, r5
 8012822:	f7ff f977 	bl	8011b14 <icmp6_time_exceeded_with_addrs>
 8012826:	e7d9      	b.n	80127dc <ip6_reass_free_complete_datagram+0x3c>
    iprh = (struct ip6_reass_helper *)p->payload;
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
    clen = pbuf_clen(pcur);
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012828:	4b1f      	ldr	r3, [pc, #124]	; (80128a8 <ip6_reass_free_complete_datagram+0x108>)
 801282a:	22c7      	movs	r2, #199	; 0xc7
 801282c:	4921      	ldr	r1, [pc, #132]	; (80128b4 <ip6_reass_free_complete_datagram+0x114>)
 801282e:	4820      	ldr	r0, [pc, #128]	; (80128b0 <ip6_reass_free_complete_datagram+0x110>)
 8012830:	f003 f8ae 	bl	8015990 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012834:	4434      	add	r4, r6
 8012836:	b2a6      	uxth	r6, r4
    pbuf_free(pcur);
 8012838:	4628      	mov	r0, r5
 801283a:	f7f5 fc59 	bl	80080f0 <pbuf_free>
    p = iprh->next_pbuf;
 801283e:	4645      	mov	r5, r8
  while (p != NULL) {
 8012840:	b15d      	cbz	r5, 801285a <ip6_reass_free_complete_datagram+0xba>
    iprh = (struct ip6_reass_helper *)p->payload;
 8012842:	686b      	ldr	r3, [r5, #4]
    p = iprh->next_pbuf;
 8012844:	f8d3 8000 	ldr.w	r8, [r3]
    clen = pbuf_clen(pcur);
 8012848:	4628      	mov	r0, r5
 801284a:	f7f5 fdb5 	bl	80083b8 <pbuf_clen>
 801284e:	4604      	mov	r4, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012850:	1833      	adds	r3, r6, r0
 8012852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012856:	dbed      	blt.n	8012834 <ip6_reass_free_complete_datagram+0x94>
 8012858:	e7e6      	b.n	8012828 <ip6_reass_free_complete_datagram+0x88>
  }

  /* Then, unchain the struct ip6_reassdata from the list and free it. */
  if (ipr == reassdatagrams) {
 801285a:	4b17      	ldr	r3, [pc, #92]	; (80128b8 <ip6_reass_free_complete_datagram+0x118>)
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	42bb      	cmp	r3, r7
 8012860:	d005      	beq.n	801286e <ip6_reass_free_complete_datagram+0xce>
    reassdatagrams = ipr->next;
  } else {
    prev = reassdatagrams;
    while (prev != NULL) {
 8012862:	b143      	cbz	r3, 8012876 <ip6_reass_free_complete_datagram+0xd6>
      if (prev->next == ipr) {
 8012864:	681a      	ldr	r2, [r3, #0]
 8012866:	42ba      	cmp	r2, r7
 8012868:	d005      	beq.n	8012876 <ip6_reass_free_complete_datagram+0xd6>
        break;
      }
      prev = prev->next;
 801286a:	4613      	mov	r3, r2
 801286c:	e7f9      	b.n	8012862 <ip6_reass_free_complete_datagram+0xc2>
    reassdatagrams = ipr->next;
 801286e:	683a      	ldr	r2, [r7, #0]
 8012870:	4b11      	ldr	r3, [pc, #68]	; (80128b8 <ip6_reass_free_complete_datagram+0x118>)
 8012872:	601a      	str	r2, [r3, #0]
 8012874:	e002      	b.n	801287c <ip6_reass_free_complete_datagram+0xdc>
    }
    if (prev != NULL) {
 8012876:	b10b      	cbz	r3, 801287c <ip6_reass_free_complete_datagram+0xdc>
      prev->next = ipr->next;
 8012878:	683a      	ldr	r2, [r7, #0]
 801287a:	601a      	str	r2, [r3, #0]
    }
  }
  memp_free(MEMP_IP6_REASSDATA, ipr);
 801287c:	4639      	mov	r1, r7
 801287e:	2009      	movs	r0, #9
 8012880:	f7f4 ff92 	bl	80077a8 <memp_free>

  /* Finally, update number of pbufs in reassembly queue */
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip6_reass_pbufcount >= pbufs_freed);
 8012884:	4b0d      	ldr	r3, [pc, #52]	; (80128bc <ip6_reass_free_complete_datagram+0x11c>)
 8012886:	881b      	ldrh	r3, [r3, #0]
 8012888:	42b3      	cmp	r3, r6
 801288a:	d306      	bcc.n	801289a <ip6_reass_free_complete_datagram+0xfa>
  ip6_reass_pbufcount = (u16_t)(ip6_reass_pbufcount - pbufs_freed);
 801288c:	4b0b      	ldr	r3, [pc, #44]	; (80128bc <ip6_reass_free_complete_datagram+0x11c>)
 801288e:	881c      	ldrh	r4, [r3, #0]
 8012890:	1ba4      	subs	r4, r4, r6
 8012892:	801c      	strh	r4, [r3, #0]
}
 8012894:	b00a      	add	sp, #40	; 0x28
 8012896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip6_reass_pbufcount >= pbufs_freed);
 801289a:	4b03      	ldr	r3, [pc, #12]	; (80128a8 <ip6_reass_free_complete_datagram+0x108>)
 801289c:	22de      	movs	r2, #222	; 0xde
 801289e:	4908      	ldr	r1, [pc, #32]	; (80128c0 <ip6_reass_free_complete_datagram+0x120>)
 80128a0:	4803      	ldr	r0, [pc, #12]	; (80128b0 <ip6_reass_free_complete_datagram+0x110>)
 80128a2:	f003 f875 	bl	8015990 <iprintf>
 80128a6:	e7f1      	b.n	801288c <ip6_reass_free_complete_datagram+0xec>
 80128a8:	0801a820 	.word	0x0801a820
 80128ac:	0801a85c 	.word	0x0801a85c
 80128b0:	08016bb4 	.word	0x08016bb4
 80128b4:	0801a57c 	.word	0x0801a57c
 80128b8:	20000bec 	.word	0x20000bec
 80128bc:	20000be8 	.word	0x20000be8
 80128c0:	0801a658 	.word	0x0801a658

080128c4 <ip6_reass_remove_oldest_datagram>:
 * @param pbufs_needed number of pbufs needed to enqueue
 *        (used for freeing other datagrams if not enough space)
 */
static void
ip6_reass_remove_oldest_datagram(struct ip6_reassdata *ipr, int pbufs_needed)
{
 80128c4:	b570      	push	{r4, r5, r6, lr}
 80128c6:	4605      	mov	r5, r0
 80128c8:	460e      	mov	r6, r1
 80128ca:	e016      	b.n	80128fa <ip6_reass_remove_oldest_datagram+0x36>
        if (r->timer <= oldest->timer) {
          /* older than the previous oldest */
          oldest = r;
        }
      }
      r = r->next;
 80128cc:	681b      	ldr	r3, [r3, #0]
    while (r != NULL) {
 80128ce:	b13b      	cbz	r3, 80128e0 <ip6_reass_remove_oldest_datagram+0x1c>
      if (r != ipr) {
 80128d0:	42ab      	cmp	r3, r5
 80128d2:	d0fb      	beq.n	80128cc <ip6_reass_remove_oldest_datagram+0x8>
        if (r->timer <= oldest->timer) {
 80128d4:	7edc      	ldrb	r4, [r3, #27]
 80128d6:	7ec2      	ldrb	r2, [r0, #27]
 80128d8:	4294      	cmp	r4, r2
 80128da:	d8f7      	bhi.n	80128cc <ip6_reass_remove_oldest_datagram+0x8>
          oldest = r;
 80128dc:	4618      	mov	r0, r3
 80128de:	e7f5      	b.n	80128cc <ip6_reass_remove_oldest_datagram+0x8>
    }
    if (oldest == ipr) {
 80128e0:	42a8      	cmp	r0, r5
 80128e2:	d00e      	beq.n	8012902 <ip6_reass_remove_oldest_datagram+0x3e>
      /* nothing to free, ipr is the only element on the list */
      return;
    }
    if (oldest != NULL) {
 80128e4:	b108      	cbz	r0, 80128ea <ip6_reass_remove_oldest_datagram+0x26>
      ip6_reass_free_complete_datagram(oldest);
 80128e6:	f7ff ff5b 	bl	80127a0 <ip6_reass_free_complete_datagram>
    }
  } while (((ip6_reass_pbufcount + pbufs_needed) > IP_REASS_MAX_PBUFS) && (reassdatagrams != NULL));
 80128ea:	4b06      	ldr	r3, [pc, #24]	; (8012904 <ip6_reass_remove_oldest_datagram+0x40>)
 80128ec:	881b      	ldrh	r3, [r3, #0]
 80128ee:	4433      	add	r3, r6
 80128f0:	2b0a      	cmp	r3, #10
 80128f2:	dd06      	ble.n	8012902 <ip6_reass_remove_oldest_datagram+0x3e>
 80128f4:	4b04      	ldr	r3, [pc, #16]	; (8012908 <ip6_reass_remove_oldest_datagram+0x44>)
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	b11b      	cbz	r3, 8012902 <ip6_reass_remove_oldest_datagram+0x3e>
    r = oldest = reassdatagrams;
 80128fa:	4b03      	ldr	r3, [pc, #12]	; (8012908 <ip6_reass_remove_oldest_datagram+0x44>)
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	4618      	mov	r0, r3
    while (r != NULL) {
 8012900:	e7e5      	b.n	80128ce <ip6_reass_remove_oldest_datagram+0xa>
}
 8012902:	bd70      	pop	{r4, r5, r6, pc}
 8012904:	20000be8 	.word	0x20000be8
 8012908:	20000bec 	.word	0x20000bec

0801290c <ip6_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip6_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 801290c:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801290e:	4604      	mov	r4, r0
 8012910:	b120      	cbz	r0, 801291c <ip6_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 8012912:	4621      	mov	r1, r4
 8012914:	2005      	movs	r0, #5
 8012916:	f7f4 ff47 	bl	80077a8 <memp_free>
}
 801291a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801291c:	4b03      	ldr	r3, [pc, #12]	; (801292c <ip6_frag_free_pbuf_custom_ref+0x20>)
 801291e:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 8012922:	4903      	ldr	r1, [pc, #12]	; (8012930 <ip6_frag_free_pbuf_custom_ref+0x24>)
 8012924:	4803      	ldr	r0, [pc, #12]	; (8012934 <ip6_frag_free_pbuf_custom_ref+0x28>)
 8012926:	f003 f833 	bl	8015990 <iprintf>
 801292a:	e7f2      	b.n	8012912 <ip6_frag_free_pbuf_custom_ref+0x6>
 801292c:	0801a820 	.word	0x0801a820
 8012930:	08019ea8 	.word	0x08019ea8
 8012934:	08016bb4 	.word	0x08016bb4

08012938 <ip6_frag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ip6_frag_free_pbuf_custom(struct pbuf *p)
{
 8012938:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801293a:	4604      	mov	r4, r0
 801293c:	b138      	cbz	r0, 801294e <ip6_frag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 801293e:	6960      	ldr	r0, [r4, #20]
 8012940:	b108      	cbz	r0, 8012946 <ip6_frag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 8012942:	f7f5 fbd5 	bl	80080f0 <pbuf_free>
  }
  ip6_frag_free_pbuf_custom_ref(pcr);
 8012946:	4620      	mov	r0, r4
 8012948:	f7ff ffe0 	bl	801290c <ip6_frag_free_pbuf_custom_ref>
}
 801294c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801294e:	4b04      	ldr	r3, [pc, #16]	; (8012960 <ip6_frag_free_pbuf_custom+0x28>)
 8012950:	f240 22ba 	movw	r2, #698	; 0x2ba
 8012954:	4903      	ldr	r1, [pc, #12]	; (8012964 <ip6_frag_free_pbuf_custom+0x2c>)
 8012956:	4804      	ldr	r0, [pc, #16]	; (8012968 <ip6_frag_free_pbuf_custom+0x30>)
 8012958:	f003 f81a 	bl	8015990 <iprintf>
 801295c:	e7ef      	b.n	801293e <ip6_frag_free_pbuf_custom+0x6>
 801295e:	bf00      	nop
 8012960:	0801a820 	.word	0x0801a820
 8012964:	0801a5c0 	.word	0x0801a5c0
 8012968:	08016bb4 	.word	0x08016bb4

0801296c <ip6_frag_alloc_pbuf_custom_ref>:
{
 801296c:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 801296e:	2005      	movs	r0, #5
 8012970:	f7f4 ff00 	bl	8007774 <memp_malloc>
}
 8012974:	bd08      	pop	{r3, pc}
	...

08012978 <ip6_reass_tmr>:
  r = reassdatagrams;
 8012978:	4b0c      	ldr	r3, [pc, #48]	; (80129ac <ip6_reass_tmr+0x34>)
 801297a:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 801297c:	b130      	cbz	r0, 801298c <ip6_reass_tmr+0x14>
    if (r->timer > 0) {
 801297e:	7ec3      	ldrb	r3, [r0, #27]
 8012980:	b12b      	cbz	r3, 801298e <ip6_reass_tmr+0x16>
      r->timer--;
 8012982:	3b01      	subs	r3, #1
 8012984:	76c3      	strb	r3, [r0, #27]
      r = r->next;
 8012986:	6800      	ldr	r0, [r0, #0]
 8012988:	e7f8      	b.n	801297c <ip6_reass_tmr+0x4>
}
 801298a:	bd10      	pop	{r4, pc}
 801298c:	4770      	bx	lr
{
 801298e:	b510      	push	{r4, lr}
      r = r->next;
 8012990:	6804      	ldr	r4, [r0, #0]
      ip6_reass_free_complete_datagram(tmp);
 8012992:	f7ff ff05 	bl	80127a0 <ip6_reass_free_complete_datagram>
      r = r->next;
 8012996:	4620      	mov	r0, r4
  while (r != NULL) {
 8012998:	2800      	cmp	r0, #0
 801299a:	d0f6      	beq.n	801298a <ip6_reass_tmr+0x12>
    if (r->timer > 0) {
 801299c:	7ec3      	ldrb	r3, [r0, #27]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d0f6      	beq.n	8012990 <ip6_reass_tmr+0x18>
      r->timer--;
 80129a2:	3b01      	subs	r3, #1
 80129a4:	76c3      	strb	r3, [r0, #27]
      r = r->next;
 80129a6:	6800      	ldr	r0, [r0, #0]
 80129a8:	e7f6      	b.n	8012998 <ip6_reass_tmr+0x20>
 80129aa:	bf00      	nop
 80129ac:	20000bec 	.word	0x20000bec

080129b0 <ip6_reass>:
{
 80129b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129b4:	b085      	sub	sp, #20
 80129b6:	4680      	mov	r8, r0
  LWIP_ASSERT("IPv6 fragment header does not fit in first pbuf",
 80129b8:	8943      	ldrh	r3, [r0, #10]
 80129ba:	2b07      	cmp	r3, #7
 80129bc:	d92f      	bls.n	8012a1e <ip6_reass+0x6e>
  frag_hdr = (struct ip6_frag_hdr *) p->payload;
 80129be:	f8d8 6004 	ldr.w	r6, [r8, #4]
  clen = pbuf_clen(p);
 80129c2:	4640      	mov	r0, r8
 80129c4:	f7f5 fcf8 	bl	80083b8 <pbuf_clen>
 80129c8:	4682      	mov	sl, r0
  offset = lwip_ntohs(frag_hdr->_fragment_offset);
 80129ca:	8870      	ldrh	r0, [r6, #2]
 80129cc:	f7f4 f856 	bl	8006a7c <lwip_htons>
 80129d0:	9001      	str	r0, [sp, #4]
  len = lwip_ntohs(ip6_current_header()->_plen);
 80129d2:	4da8      	ldr	r5, [pc, #672]	; (8012c74 <ip6_reass+0x2c4>)
 80129d4:	68eb      	ldr	r3, [r5, #12]
 80129d6:	8898      	ldrh	r0, [r3, #4]
 80129d8:	f7f4 f850 	bl	8006a7c <lwip_htons>
 80129dc:	4681      	mov	r9, r0
  hdrdiff = (u8_t*)p->payload - (const u8_t*)ip6_current_header();
 80129de:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80129e2:	68eb      	ldr	r3, [r5, #12]
 80129e4:	1ae4      	subs	r4, r4, r3
  LWIP_ASSERT("not a valid pbuf (ip6_input check missing?)", hdrdiff <= 0xFFFF);
 80129e6:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80129ea:	da20      	bge.n	8012a2e <ip6_reass+0x7e>
  LWIP_ASSERT("not a valid pbuf (ip6_input check missing?)", hdrdiff >= IP6_HLEN);
 80129ec:	2c27      	cmp	r4, #39	; 0x27
 80129ee:	dd26      	ble.n	8012a3e <ip6_reass+0x8e>
  hdrdiff += IP6_FRAG_HLEN;
 80129f0:	3c20      	subs	r4, #32
  if (hdrdiff > len) {
 80129f2:	45a1      	cmp	r9, r4
 80129f4:	f2c0 80c7 	blt.w	8012b86 <ip6_reass+0x1d6>
  len = (u16_t)(len - hdrdiff);
 80129f8:	b2a4      	uxth	r4, r4
 80129fa:	eba9 0404 	sub.w	r4, r9, r4
 80129fe:	fa1f f984 	uxth.w	r9, r4
  start = (offset & IP6_FRAG_OFFSET_MASK);
 8012a02:	9b01      	ldr	r3, [sp, #4]
 8012a04:	f023 0707 	bic.w	r7, r3, #7
 8012a08:	b2bf      	uxth	r7, r7
  if (start > (0xFFFF - len)) {
 8012a0a:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 8012a0e:	33ff      	adds	r3, #255	; 0xff
 8012a10:	429f      	cmp	r7, r3
 8012a12:	f300 80b8 	bgt.w	8012b86 <ip6_reass+0x1d6>
  for (ipr = reassdatagrams, ipr_prev = NULL; ipr != NULL; ipr = ipr->next) {
 8012a16:	4b98      	ldr	r3, [pc, #608]	; (8012c78 <ip6_reass+0x2c8>)
 8012a18:	681c      	ldr	r4, [r3, #0]
 8012a1a:	2500      	movs	r5, #0
 8012a1c:	e019      	b.n	8012a52 <ip6_reass+0xa2>
  LWIP_ASSERT("IPv6 fragment header does not fit in first pbuf",
 8012a1e:	4b97      	ldr	r3, [pc, #604]	; (8012c7c <ip6_reass+0x2cc>)
 8012a20:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8012a24:	4996      	ldr	r1, [pc, #600]	; (8012c80 <ip6_reass+0x2d0>)
 8012a26:	4897      	ldr	r0, [pc, #604]	; (8012c84 <ip6_reass+0x2d4>)
 8012a28:	f002 ffb2 	bl	8015990 <iprintf>
 8012a2c:	e7c7      	b.n	80129be <ip6_reass+0xe>
  LWIP_ASSERT("not a valid pbuf (ip6_input check missing?)", hdrdiff <= 0xFFFF);
 8012a2e:	4b93      	ldr	r3, [pc, #588]	; (8012c7c <ip6_reass+0x2cc>)
 8012a30:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012a34:	4994      	ldr	r1, [pc, #592]	; (8012c88 <ip6_reass+0x2d8>)
 8012a36:	4893      	ldr	r0, [pc, #588]	; (8012c84 <ip6_reass+0x2d4>)
 8012a38:	f002 ffaa 	bl	8015990 <iprintf>
 8012a3c:	e7d6      	b.n	80129ec <ip6_reass+0x3c>
  LWIP_ASSERT("not a valid pbuf (ip6_input check missing?)", hdrdiff >= IP6_HLEN);
 8012a3e:	4b8f      	ldr	r3, [pc, #572]	; (8012c7c <ip6_reass+0x2cc>)
 8012a40:	f240 122d 	movw	r2, #301	; 0x12d
 8012a44:	4990      	ldr	r1, [pc, #576]	; (8012c88 <ip6_reass+0x2d8>)
 8012a46:	488f      	ldr	r0, [pc, #572]	; (8012c84 <ip6_reass+0x2d4>)
 8012a48:	f002 ffa2 	bl	8015990 <iprintf>
 8012a4c:	e7d0      	b.n	80129f0 <ip6_reass+0x40>
    ipr_prev = ipr;
 8012a4e:	4625      	mov	r5, r4
  for (ipr = reassdatagrams, ipr_prev = NULL; ipr != NULL; ipr = ipr->next) {
 8012a50:	6824      	ldr	r4, [r4, #0]
 8012a52:	2c00      	cmp	r4, #0
 8012a54:	d038      	beq.n	8012ac8 <ip6_reass+0x118>
    if ((frag_hdr->_identification == ipr->identification) &&
 8012a56:	6872      	ldr	r2, [r6, #4]
 8012a58:	6963      	ldr	r3, [r4, #20]
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d1f7      	bne.n	8012a4e <ip6_reass+0x9e>
        ip6_addr_cmp_packed(ip6_current_src_addr(), &(IPV6_FRAG_SRC(ipr)), ipr->src_zone) &&
 8012a5e:	4b85      	ldr	r3, [pc, #532]	; (8012c74 <ip6_reass+0x2c4>)
 8012a60:	6959      	ldr	r1, [r3, #20]
 8012a62:	68a3      	ldr	r3, [r4, #8]
 8012a64:	689a      	ldr	r2, [r3, #8]
    if ((frag_hdr->_identification == ipr->identification) &&
 8012a66:	4291      	cmp	r1, r2
 8012a68:	d1f1      	bne.n	8012a4e <ip6_reass+0x9e>
        ip6_addr_cmp_packed(ip6_current_src_addr(), &(IPV6_FRAG_SRC(ipr)), ipr->src_zone) &&
 8012a6a:	4a82      	ldr	r2, [pc, #520]	; (8012c74 <ip6_reass+0x2c4>)
 8012a6c:	6991      	ldr	r1, [r2, #24]
 8012a6e:	68da      	ldr	r2, [r3, #12]
 8012a70:	4291      	cmp	r1, r2
 8012a72:	d1ec      	bne.n	8012a4e <ip6_reass+0x9e>
 8012a74:	4a7f      	ldr	r2, [pc, #508]	; (8012c74 <ip6_reass+0x2c4>)
 8012a76:	69d1      	ldr	r1, [r2, #28]
 8012a78:	691a      	ldr	r2, [r3, #16]
 8012a7a:	4291      	cmp	r1, r2
 8012a7c:	d1e7      	bne.n	8012a4e <ip6_reass+0x9e>
 8012a7e:	4a7d      	ldr	r2, [pc, #500]	; (8012c74 <ip6_reass+0x2c4>)
 8012a80:	6a11      	ldr	r1, [r2, #32]
 8012a82:	695a      	ldr	r2, [r3, #20]
 8012a84:	4291      	cmp	r1, r2
 8012a86:	d1e2      	bne.n	8012a4e <ip6_reass+0x9e>
 8012a88:	4a7a      	ldr	r2, [pc, #488]	; (8012c74 <ip6_reass+0x2c4>)
 8012a8a:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
 8012a8e:	7f22      	ldrb	r2, [r4, #28]
 8012a90:	4291      	cmp	r1, r2
 8012a92:	d1dc      	bne.n	8012a4e <ip6_reass+0x9e>
        ip6_addr_cmp_packed(ip6_current_dest_addr(), &(IPV6_FRAG_DEST(ipr)), ipr->dest_zone)) {
 8012a94:	4a77      	ldr	r2, [pc, #476]	; (8012c74 <ip6_reass+0x2c4>)
 8012a96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8012a98:	699a      	ldr	r2, [r3, #24]
        ip6_addr_cmp_packed(ip6_current_src_addr(), &(IPV6_FRAG_SRC(ipr)), ipr->src_zone) &&
 8012a9a:	4291      	cmp	r1, r2
 8012a9c:	d1d7      	bne.n	8012a4e <ip6_reass+0x9e>
        ip6_addr_cmp_packed(ip6_current_dest_addr(), &(IPV6_FRAG_DEST(ipr)), ipr->dest_zone)) {
 8012a9e:	4a75      	ldr	r2, [pc, #468]	; (8012c74 <ip6_reass+0x2c4>)
 8012aa0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8012aa2:	69da      	ldr	r2, [r3, #28]
 8012aa4:	4291      	cmp	r1, r2
 8012aa6:	d1d2      	bne.n	8012a4e <ip6_reass+0x9e>
 8012aa8:	4a72      	ldr	r2, [pc, #456]	; (8012c74 <ip6_reass+0x2c4>)
 8012aaa:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8012aac:	6a1a      	ldr	r2, [r3, #32]
 8012aae:	4291      	cmp	r1, r2
 8012ab0:	d1cd      	bne.n	8012a4e <ip6_reass+0x9e>
 8012ab2:	4a70      	ldr	r2, [pc, #448]	; (8012c74 <ip6_reass+0x2c4>)
 8012ab4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ab8:	429a      	cmp	r2, r3
 8012aba:	d1c8      	bne.n	8012a4e <ip6_reass+0x9e>
 8012abc:	4b6d      	ldr	r3, [pc, #436]	; (8012c74 <ip6_reass+0x2c4>)
 8012abe:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8012ac2:	7f63      	ldrb	r3, [r4, #29]
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d1c2      	bne.n	8012a4e <ip6_reass+0x9e>
  if (ipr == NULL) {
 8012ac8:	b18c      	cbz	r4, 8012aee <ip6_reass+0x13e>
  if ((ip6_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012aca:	4b70      	ldr	r3, [pc, #448]	; (8012c8c <ip6_reass+0x2dc>)
 8012acc:	881b      	ldrh	r3, [r3, #0]
 8012ace:	4453      	add	r3, sl
 8012ad0:	2b0a      	cmp	r3, #10
 8012ad2:	dc3e      	bgt.n	8012b52 <ip6_reass+0x1a2>
  iprh = (struct ip6_reass_helper *)p->payload;
 8012ad4:	f8d8 6004 	ldr.w	r6, [r8, #4]
  end = (u16_t)(start + len);
 8012ad8:	44b9      	add	r9, r7
 8012ada:	fa1f f389 	uxth.w	r3, r9
 8012ade:	9302      	str	r3, [sp, #8]
  for (q = ipr->p; q != NULL;) {
 8012ae0:	6863      	ldr	r3, [r4, #4]
  u8_t valid = 1;
 8012ae2:	f04f 0901 	mov.w	r9, #1
  struct ip6_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8012ae6:	f04f 0b00 	mov.w	fp, #0
 8012aea:	4658      	mov	r0, fp
  for (q = ipr->p; q != NULL;) {
 8012aec:	e060      	b.n	8012bb0 <ip6_reass+0x200>
    ipr = (struct ip6_reassdata *)memp_malloc(MEMP_IP6_REASSDATA);
 8012aee:	2009      	movs	r0, #9
 8012af0:	f7f4 fe40 	bl	8007774 <memp_malloc>
    if (ipr == NULL) {
 8012af4:	4604      	mov	r4, r0
 8012af6:	b1d8      	cbz	r0, 8012b30 <ip6_reass+0x180>
    memset(ipr, 0, sizeof(struct ip6_reassdata));
 8012af8:	2300      	movs	r3, #0
 8012afa:	6063      	str	r3, [r4, #4]
 8012afc:	60a3      	str	r3, [r4, #8]
 8012afe:	60e3      	str	r3, [r4, #12]
 8012b00:	6123      	str	r3, [r4, #16]
 8012b02:	6163      	str	r3, [r4, #20]
 8012b04:	61a3      	str	r3, [r4, #24]
 8012b06:	61e3      	str	r3, [r4, #28]
    ipr->timer = IPV6_REASS_MAXAGE;
 8012b08:	233c      	movs	r3, #60	; 0x3c
 8012b0a:	76e3      	strb	r3, [r4, #27]
    ipr->next = reassdatagrams;
 8012b0c:	4b5a      	ldr	r3, [pc, #360]	; (8012c78 <ip6_reass+0x2c8>)
 8012b0e:	681a      	ldr	r2, [r3, #0]
 8012b10:	6022      	str	r2, [r4, #0]
    reassdatagrams = ipr;
 8012b12:	601c      	str	r4, [r3, #0]
    ipr->iphdr = ip_data.current_ip6_header;
 8012b14:	4b57      	ldr	r3, [pc, #348]	; (8012c74 <ip6_reass+0x2c4>)
 8012b16:	68da      	ldr	r2, [r3, #12]
 8012b18:	60a2      	str	r2, [r4, #8]
    ipr->src_zone = ip6_addr_zone(ip6_current_src_addr());
 8012b1a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8012b1e:	7722      	strb	r2, [r4, #28]
    ipr->dest_zone = ip6_addr_zone(ip6_current_dest_addr());
 8012b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012b24:	7763      	strb	r3, [r4, #29]
    ipr->identification = frag_hdr->_identification;
 8012b26:	6873      	ldr	r3, [r6, #4]
 8012b28:	6163      	str	r3, [r4, #20]
    ipr->nexth = frag_hdr->_nexth;
 8012b2a:	7833      	ldrb	r3, [r6, #0]
 8012b2c:	76a3      	strb	r3, [r4, #26]
 8012b2e:	e7cc      	b.n	8012aca <ip6_reass+0x11a>
      ip6_reass_remove_oldest_datagram(ipr, clen);
 8012b30:	4651      	mov	r1, sl
 8012b32:	f7ff fec7 	bl	80128c4 <ip6_reass_remove_oldest_datagram>
      ipr = (struct ip6_reassdata *)memp_malloc(MEMP_IP6_REASSDATA);
 8012b36:	2009      	movs	r0, #9
 8012b38:	f7f4 fe1c 	bl	8007774 <memp_malloc>
      if (ipr != NULL) {
 8012b3c:	4604      	mov	r4, r0
 8012b3e:	b310      	cbz	r0, 8012b86 <ip6_reass+0x1d6>
        for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012b40:	4b4d      	ldr	r3, [pc, #308]	; (8012c78 <ip6_reass+0x2c8>)
 8012b42:	681d      	ldr	r5, [r3, #0]
 8012b44:	2d00      	cmp	r5, #0
 8012b46:	d0d7      	beq.n	8012af8 <ip6_reass+0x148>
          if (ipr_prev->next == ipr) {
 8012b48:	682b      	ldr	r3, [r5, #0]
 8012b4a:	42a3      	cmp	r3, r4
 8012b4c:	d0d4      	beq.n	8012af8 <ip6_reass+0x148>
        for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012b4e:	461d      	mov	r5, r3
 8012b50:	e7f8      	b.n	8012b44 <ip6_reass+0x194>
    ip6_reass_remove_oldest_datagram(ipr, clen);
 8012b52:	4651      	mov	r1, sl
 8012b54:	4620      	mov	r0, r4
 8012b56:	f7ff feb5 	bl	80128c4 <ip6_reass_remove_oldest_datagram>
    if ((ip6_reass_pbufcount + clen) <= IP_REASS_MAX_PBUFS) {
 8012b5a:	4b4c      	ldr	r3, [pc, #304]	; (8012c8c <ip6_reass+0x2dc>)
 8012b5c:	881b      	ldrh	r3, [r3, #0]
 8012b5e:	4453      	add	r3, sl
 8012b60:	2b0a      	cmp	r3, #10
 8012b62:	dc10      	bgt.n	8012b86 <ip6_reass+0x1d6>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012b64:	4b44      	ldr	r3, [pc, #272]	; (8012c78 <ip6_reass+0x2c8>)
 8012b66:	681d      	ldr	r5, [r3, #0]
 8012b68:	2d00      	cmp	r5, #0
 8012b6a:	d0b3      	beq.n	8012ad4 <ip6_reass+0x124>
        if (ipr_prev->next == ipr) {
 8012b6c:	682b      	ldr	r3, [r5, #0]
 8012b6e:	42a3      	cmp	r3, r4
 8012b70:	d0b0      	beq.n	8012ad4 <ip6_reass+0x124>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012b72:	461d      	mov	r5, r3
 8012b74:	e7f8      	b.n	8012b68 <ip6_reass+0x1b8>
 8012b76:	4683      	mov	fp, r0
      if (end > iprh_tmp->start) {
 8012b78:	9a02      	ldr	r2, [sp, #8]
 8012b7a:	4291      	cmp	r1, r2
 8012b7c:	d303      	bcc.n	8012b86 <ip6_reass+0x1d6>
      if (iprh_prev != NULL) {
 8012b7e:	b150      	cbz	r0, 8012b96 <ip6_reass+0x1e6>
        if (start < iprh_prev->end) {
 8012b80:	88c2      	ldrh	r2, [r0, #6]
 8012b82:	42ba      	cmp	r2, r7
 8012b84:	d907      	bls.n	8012b96 <ip6_reass+0x1e6>
  pbuf_free(p);
 8012b86:	4640      	mov	r0, r8
 8012b88:	f7f5 fab2 	bl	80080f0 <pbuf_free>
  return NULL;
 8012b8c:	2700      	movs	r7, #0
}
 8012b8e:	4638      	mov	r0, r7
 8012b90:	b005      	add	sp, #20
 8012b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev != NULL) {
 8012b96:	f1bb 0f00 	cmp.w	fp, #0
 8012b9a:	d003      	beq.n	8012ba4 <ip6_reass+0x1f4>
        iprh_prev->next_pbuf = p;
 8012b9c:	f8cb 8000 	str.w	r8, [fp]
      next_pbuf = q;
 8012ba0:	9303      	str	r3, [sp, #12]
 8012ba2:	e019      	b.n	8012bd8 <ip6_reass+0x228>
        ipr->p = p;
 8012ba4:	f8c4 8004 	str.w	r8, [r4, #4]
      next_pbuf = q;
 8012ba8:	9303      	str	r3, [sp, #12]
 8012baa:	e015      	b.n	8012bd8 <ip6_reass+0x228>
    q = iprh_tmp->next_pbuf;
 8012bac:	6813      	ldr	r3, [r2, #0]
    iprh_prev = iprh_tmp;
 8012bae:	4610      	mov	r0, r2
  for (q = ipr->p; q != NULL;) {
 8012bb0:	b183      	cbz	r3, 8012bd4 <ip6_reass+0x224>
    iprh_tmp = (struct ip6_reass_helper*)q->payload;
 8012bb2:	685a      	ldr	r2, [r3, #4]
    if (start < iprh_tmp->start) {
 8012bb4:	8891      	ldrh	r1, [r2, #4]
 8012bb6:	42b9      	cmp	r1, r7
 8012bb8:	d8dd      	bhi.n	8012b76 <ip6_reass+0x1c6>
    } else if (start == iprh_tmp->start) {
 8012bba:	42b9      	cmp	r1, r7
 8012bbc:	d0e3      	beq.n	8012b86 <ip6_reass+0x1d6>
    } else if (start < iprh_tmp->end) {
 8012bbe:	88d3      	ldrh	r3, [r2, #6]
 8012bc0:	42bb      	cmp	r3, r7
 8012bc2:	d8e0      	bhi.n	8012b86 <ip6_reass+0x1d6>
      if (iprh_prev != NULL) {
 8012bc4:	2800      	cmp	r0, #0
 8012bc6:	d0f1      	beq.n	8012bac <ip6_reass+0x1fc>
        if (iprh_prev->end != iprh_tmp->start) {
 8012bc8:	88c3      	ldrh	r3, [r0, #6]
 8012bca:	4299      	cmp	r1, r3
 8012bcc:	d0ee      	beq.n	8012bac <ip6_reass+0x1fc>
          valid = 0;
 8012bce:	f04f 0900 	mov.w	r9, #0
 8012bd2:	e7eb      	b.n	8012bac <ip6_reass+0x1fc>
 8012bd4:	4683      	mov	fp, r0
  next_pbuf = NULL;
 8012bd6:	9303      	str	r3, [sp, #12]
  if (q == NULL) {
 8012bd8:	b343      	cbz	r3, 8012c2c <ip6_reass+0x27c>
  ip6_reass_pbufcount = (u16_t)(ip6_reass_pbufcount + clen);
 8012bda:	4b2c      	ldr	r3, [pc, #176]	; (8012c8c <ip6_reass+0x2dc>)
 8012bdc:	881a      	ldrh	r2, [r3, #0]
 8012bde:	4492      	add	sl, r2
 8012be0:	f8a3 a000 	strh.w	sl, [r3]
  if (start == 0) {
 8012be4:	2f00      	cmp	r7, #0
 8012be6:	d057      	beq.n	8012c98 <ip6_reass+0x2e8>
  iprh->next_pbuf = next_pbuf;
 8012be8:	9b03      	ldr	r3, [sp, #12]
 8012bea:	6033      	str	r3, [r6, #0]
  iprh->start = start;
 8012bec:	80b7      	strh	r7, [r6, #4]
  iprh->end = end;
 8012bee:	9b02      	ldr	r3, [sp, #8]
 8012bf0:	80f3      	strh	r3, [r6, #6]
  if ((offset & IP6_FRAG_MORE_FLAG) == 0) {
 8012bf2:	9a01      	ldr	r2, [sp, #4]
 8012bf4:	f012 0f01 	tst.w	r2, #1
 8012bf8:	d100      	bne.n	8012bfc <ip6_reass+0x24c>
    ipr->datagram_len = iprh->end;
 8012bfa:	8323      	strh	r3, [r4, #24]
  iprh_tmp = (struct ip6_reass_helper*)ipr->p->payload;
 8012bfc:	6863      	ldr	r3, [r4, #4]
 8012bfe:	685f      	ldr	r7, [r3, #4]
  if (iprh_tmp->start != 0) {
 8012c00:	88bb      	ldrh	r3, [r7, #4]
 8012c02:	b10b      	cbz	r3, 8012c08 <ip6_reass+0x258>
    valid = 0;
 8012c04:	f04f 0900 	mov.w	r9, #0
  if (ipr->datagram_len == 0) {
 8012c08:	8b23      	ldrh	r3, [r4, #24]
 8012c0a:	b90b      	cbnz	r3, 8012c10 <ip6_reass+0x260>
    valid = 0;
 8012c0c:	f04f 0900 	mov.w	r9, #0
  q = iprh->next_pbuf;
 8012c10:	6832      	ldr	r2, [r6, #0]
  while ((q != NULL) && valid) {
 8012c12:	4648      	mov	r0, r9
 8012c14:	2a00      	cmp	r2, #0
 8012c16:	d04e      	beq.n	8012cb6 <ip6_reass+0x306>
 8012c18:	2800      	cmp	r0, #0
 8012c1a:	d047      	beq.n	8012cac <ip6_reass+0x2fc>
    iprh = (struct ip6_reass_helper*)q->payload;
 8012c1c:	6853      	ldr	r3, [r2, #4]
    if (iprh_prev->end != iprh->start) {
 8012c1e:	88f1      	ldrh	r1, [r6, #6]
 8012c20:	889a      	ldrh	r2, [r3, #4]
 8012c22:	4291      	cmp	r1, r2
 8012c24:	d144      	bne.n	8012cb0 <ip6_reass+0x300>
    q = iprh->next_pbuf;
 8012c26:	681a      	ldr	r2, [r3, #0]
    iprh_prev = iprh;
 8012c28:	461e      	mov	r6, r3
 8012c2a:	e7f3      	b.n	8012c14 <ip6_reass+0x264>
    if (iprh_prev != NULL) {
 8012c2c:	f1bb 0f00 	cmp.w	fp, #0
 8012c30:	d014      	beq.n	8012c5c <ip6_reass+0x2ac>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= start);
 8012c32:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8012c36:	42bb      	cmp	r3, r7
 8012c38:	d808      	bhi.n	8012c4c <ip6_reass+0x29c>
      iprh_prev->next_pbuf = p;
 8012c3a:	f8cb 8000 	str.w	r8, [fp]
      if (iprh_prev->end != start) {
 8012c3e:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8012c42:	42bb      	cmp	r3, r7
 8012c44:	d0c9      	beq.n	8012bda <ip6_reass+0x22a>
        valid = 0;
 8012c46:	f04f 0900 	mov.w	r9, #0
 8012c4a:	e7c6      	b.n	8012bda <ip6_reass+0x22a>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= start);
 8012c4c:	4b0b      	ldr	r3, [pc, #44]	; (8012c7c <ip6_reass+0x2cc>)
 8012c4e:	f240 12e9 	movw	r2, #489	; 0x1e9
 8012c52:	490f      	ldr	r1, [pc, #60]	; (8012c90 <ip6_reass+0x2e0>)
 8012c54:	480b      	ldr	r0, [pc, #44]	; (8012c84 <ip6_reass+0x2d4>)
 8012c56:	f002 fe9b 	bl	8015990 <iprintf>
 8012c5a:	e7ee      	b.n	8012c3a <ip6_reass+0x28a>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012c5c:	6863      	ldr	r3, [r4, #4]
 8012c5e:	b133      	cbz	r3, 8012c6e <ip6_reass+0x2be>
 8012c60:	4b06      	ldr	r3, [pc, #24]	; (8012c7c <ip6_reass+0x2cc>)
 8012c62:	f240 12f1 	movw	r2, #497	; 0x1f1
 8012c66:	490b      	ldr	r1, [pc, #44]	; (8012c94 <ip6_reass+0x2e4>)
 8012c68:	4806      	ldr	r0, [pc, #24]	; (8012c84 <ip6_reass+0x2d4>)
 8012c6a:	f002 fe91 	bl	8015990 <iprintf>
      ipr->p = p;
 8012c6e:	f8c4 8004 	str.w	r8, [r4, #4]
 8012c72:	e7b2      	b.n	8012bda <ip6_reass+0x22a>
 8012c74:	20003e34 	.word	0x20003e34
 8012c78:	20000bec 	.word	0x20000bec
 8012c7c:	0801a820 	.word	0x0801a820
 8012c80:	0801a894 	.word	0x0801a894
 8012c84:	08016bb4 	.word	0x08016bb4
 8012c88:	0801a8c4 	.word	0x0801a8c4
 8012c8c:	20000be8 	.word	0x20000be8
 8012c90:	0801a5cc 	.word	0x0801a5cc
 8012c94:	0801a5ec 	.word	0x0801a5ec
    ipr->iphdr = ip_data.current_ip6_header;
 8012c98:	4b45      	ldr	r3, [pc, #276]	; (8012db0 <ip6_reass+0x400>)
 8012c9a:	68db      	ldr	r3, [r3, #12]
 8012c9c:	60a3      	str	r3, [r4, #8]
    MEMCPY(ipr->orig_hdr, p->payload, sizeof(*iprh));
 8012c9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012ca2:	681a      	ldr	r2, [r3, #0]
 8012ca4:	685b      	ldr	r3, [r3, #4]
 8012ca6:	60e2      	str	r2, [r4, #12]
 8012ca8:	6123      	str	r3, [r4, #16]
 8012caa:	e79d      	b.n	8012be8 <ip6_reass+0x238>
 8012cac:	4681      	mov	r9, r0
 8012cae:	e003      	b.n	8012cb8 <ip6_reass+0x308>
      valid = 0;
 8012cb0:	f04f 0900 	mov.w	r9, #0
 8012cb4:	e000      	b.n	8012cb8 <ip6_reass+0x308>
 8012cb6:	4681      	mov	r9, r0
  if (valid) {
 8012cb8:	f1b9 0f00 	cmp.w	r9, #0
 8012cbc:	d00c      	beq.n	8012cd8 <ip6_reass+0x328>
    while (iprh != NULL) {
 8012cbe:	b16f      	cbz	r7, 8012cdc <ip6_reass+0x32c>
      next_pbuf = iprh->next_pbuf;
 8012cc0:	683e      	ldr	r6, [r7, #0]
      if (next_pbuf != NULL) {
 8012cc2:	b15e      	cbz	r6, 8012cdc <ip6_reass+0x32c>
        iprh_tmp = (struct ip6_reass_helper*)next_pbuf->payload;
 8012cc4:	6877      	ldr	r7, [r6, #4]
        pbuf_remove_header(next_pbuf, IP6_FRAG_HLEN);
 8012cc6:	2108      	movs	r1, #8
 8012cc8:	4630      	mov	r0, r6
 8012cca:	f7f5 f9cb 	bl	8008064 <pbuf_remove_header>
        pbuf_cat(ipr->p, next_pbuf);
 8012cce:	4631      	mov	r1, r6
 8012cd0:	6860      	ldr	r0, [r4, #4]
 8012cd2:	f7f5 fb91 	bl	80083f8 <pbuf_cat>
      iprh = iprh_tmp;
 8012cd6:	e7f2      	b.n	8012cbe <ip6_reass+0x30e>
  return NULL;
 8012cd8:	2700      	movs	r7, #0
 8012cda:	e758      	b.n	8012b8e <ip6_reass+0x1de>
    p = ipr->p;
 8012cdc:	6867      	ldr	r7, [r4, #4]
    MEMMOVE((u8_t*)ipr->iphdr + sizeof(struct ip6_frag_hdr), ipr->iphdr,
 8012cde:	68a1      	ldr	r1, [r4, #8]
 8012ce0:	687a      	ldr	r2, [r7, #4]
 8012ce2:	1a52      	subs	r2, r2, r1
 8012ce4:	f101 0008 	add.w	r0, r1, #8
 8012ce8:	f002 fe30 	bl	801594c <memmove>
    iphdr_ptr = (struct ip6_hdr*)((u8_t*)ipr->iphdr +
 8012cec:	68a6      	ldr	r6, [r4, #8]
 8012cee:	f106 0808 	add.w	r8, r6, #8
    ipr->datagram_len = (u16_t)(ipr->datagram_len + ((u8_t*)p->payload - (u8_t*)iphdr_ptr)
 8012cf2:	8b20      	ldrh	r0, [r4, #24]
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	eba3 0308 	sub.w	r3, r3, r8
 8012cfa:	4418      	add	r0, r3
 8012cfc:	b280      	uxth	r0, r0
 8012cfe:	3828      	subs	r0, #40	; 0x28
 8012d00:	b280      	uxth	r0, r0
 8012d02:	8320      	strh	r0, [r4, #24]
    iphdr_ptr->_plen = lwip_htons(ipr->datagram_len);
 8012d04:	f7f3 feba 	bl	8006a7c <lwip_htons>
 8012d08:	81b0      	strh	r0, [r6, #12]
    if (IP6H_NEXTH(iphdr_ptr) == IP6_NEXTH_FRAGMENT) {
 8012d0a:	7bb3      	ldrb	r3, [r6, #14]
 8012d0c:	2b2c      	cmp	r3, #44	; 0x2c
 8012d0e:	d009      	beq.n	8012d24 <ip6_reass+0x374>
      u8_t *ptr = (u8_t *)iphdr_ptr + IP6_HLEN;
 8012d10:	f106 0330 	add.w	r3, r6, #48	; 0x30
      while (*ptr != IP6_NEXTH_FRAGMENT) {
 8012d14:	781a      	ldrb	r2, [r3, #0]
 8012d16:	2a2c      	cmp	r2, #44	; 0x2c
 8012d18:	d007      	beq.n	8012d2a <ip6_reass+0x37a>
        ptr += 8 * (1 + ptr[1]);
 8012d1a:	785a      	ldrb	r2, [r3, #1]
 8012d1c:	3201      	adds	r2, #1
 8012d1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d22:	e7f7      	b.n	8012d14 <ip6_reass+0x364>
      iphdr_ptr->_nexth = ipr->nexth;
 8012d24:	7ea3      	ldrb	r3, [r4, #26]
 8012d26:	73b3      	strb	r3, [r6, #14]
 8012d28:	e001      	b.n	8012d2e <ip6_reass+0x37e>
      *ptr = ipr->nexth;
 8012d2a:	7ea2      	ldrb	r2, [r4, #26]
 8012d2c:	701a      	strb	r2, [r3, #0]
    if (reassdatagrams == ipr) {
 8012d2e:	4b21      	ldr	r3, [pc, #132]	; (8012db4 <ip6_reass+0x404>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	42a3      	cmp	r3, r4
 8012d34:	d028      	beq.n	8012d88 <ip6_reass+0x3d8>
      LWIP_ASSERT("sanity check linked list", ipr_prev != NULL);
 8012d36:	b35d      	cbz	r5, 8012d90 <ip6_reass+0x3e0>
      ipr_prev->next = ipr->next;
 8012d38:	6823      	ldr	r3, [r4, #0]
 8012d3a:	602b      	str	r3, [r5, #0]
    memp_free(MEMP_IP6_REASSDATA, ipr);
 8012d3c:	4621      	mov	r1, r4
 8012d3e:	2009      	movs	r0, #9
 8012d40:	f7f4 fd32 	bl	80077a8 <memp_free>
    clen = pbuf_clen(p);
 8012d44:	4638      	mov	r0, r7
 8012d46:	f7f5 fb37 	bl	80083b8 <pbuf_clen>
 8012d4a:	4604      	mov	r4, r0
    LWIP_ASSERT("ip6_reass_pbufcount >= clen", ip6_reass_pbufcount >= clen);
 8012d4c:	4b1a      	ldr	r3, [pc, #104]	; (8012db8 <ip6_reass+0x408>)
 8012d4e:	881b      	ldrh	r3, [r3, #0]
 8012d50:	4283      	cmp	r3, r0
 8012d52:	d325      	bcc.n	8012da0 <ip6_reass+0x3f0>
    ip6_reass_pbufcount = (u16_t)(ip6_reass_pbufcount - clen);
 8012d54:	4a18      	ldr	r2, [pc, #96]	; (8012db8 <ip6_reass+0x408>)
 8012d56:	8813      	ldrh	r3, [r2, #0]
 8012d58:	1b1c      	subs	r4, r3, r4
 8012d5a:	8014      	strh	r4, [r2, #0]
    if (pbuf_header_force(p, (s16_t)((u8_t*)p->payload - (u8_t*)iphdr_ptr))) {
 8012d5c:	6879      	ldr	r1, [r7, #4]
 8012d5e:	eba1 0108 	sub.w	r1, r1, r8
 8012d62:	b209      	sxth	r1, r1
 8012d64:	4638      	mov	r0, r7
 8012d66:	f7f5 f9bd 	bl	80080e4 <pbuf_header_force>
 8012d6a:	2800      	cmp	r0, #0
 8012d6c:	f43f af0f 	beq.w	8012b8e <ip6_reass+0x1de>
      LWIP_ASSERT("ip6_reass: moving p->payload to ip6 header failed\n", 0);
 8012d70:	4b12      	ldr	r3, [pc, #72]	; (8012dbc <ip6_reass+0x40c>)
 8012d72:	f240 228f 	movw	r2, #655	; 0x28f
 8012d76:	4912      	ldr	r1, [pc, #72]	; (8012dc0 <ip6_reass+0x410>)
 8012d78:	4812      	ldr	r0, [pc, #72]	; (8012dc4 <ip6_reass+0x414>)
 8012d7a:	f002 fe09 	bl	8015990 <iprintf>
      pbuf_free(p);
 8012d7e:	4638      	mov	r0, r7
 8012d80:	f7f5 f9b6 	bl	80080f0 <pbuf_free>
      return NULL;
 8012d84:	2700      	movs	r7, #0
 8012d86:	e702      	b.n	8012b8e <ip6_reass+0x1de>
      reassdatagrams = ipr->next;
 8012d88:	6822      	ldr	r2, [r4, #0]
 8012d8a:	4b0a      	ldr	r3, [pc, #40]	; (8012db4 <ip6_reass+0x404>)
 8012d8c:	601a      	str	r2, [r3, #0]
 8012d8e:	e7d5      	b.n	8012d3c <ip6_reass+0x38c>
      LWIP_ASSERT("sanity check linked list", ipr_prev != NULL);
 8012d90:	4b0a      	ldr	r3, [pc, #40]	; (8012dbc <ip6_reass+0x40c>)
 8012d92:	f240 2283 	movw	r2, #643	; 0x283
 8012d96:	490c      	ldr	r1, [pc, #48]	; (8012dc8 <ip6_reass+0x418>)
 8012d98:	480a      	ldr	r0, [pc, #40]	; (8012dc4 <ip6_reass+0x414>)
 8012d9a:	f002 fdf9 	bl	8015990 <iprintf>
 8012d9e:	e7cb      	b.n	8012d38 <ip6_reass+0x388>
    LWIP_ASSERT("ip6_reass_pbufcount >= clen", ip6_reass_pbufcount >= clen);
 8012da0:	4b06      	ldr	r3, [pc, #24]	; (8012dbc <ip6_reass+0x40c>)
 8012da2:	f240 228a 	movw	r2, #650	; 0x28a
 8012da6:	4909      	ldr	r1, [pc, #36]	; (8012dcc <ip6_reass+0x41c>)
 8012da8:	4806      	ldr	r0, [pc, #24]	; (8012dc4 <ip6_reass+0x414>)
 8012daa:	f002 fdf1 	bl	8015990 <iprintf>
 8012dae:	e7d1      	b.n	8012d54 <ip6_reass+0x3a4>
 8012db0:	20003e34 	.word	0x20003e34
 8012db4:	20000bec 	.word	0x20000bec
 8012db8:	20000be8 	.word	0x20000be8
 8012dbc:	0801a820 	.word	0x0801a820
 8012dc0:	0801a90c 	.word	0x0801a90c
 8012dc4:	08016bb4 	.word	0x08016bb4
 8012dc8:	0801a540 	.word	0x0801a540
 8012dcc:	0801a8f0 	.word	0x0801a8f0

08012dd0 <ip6_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip6_frag(struct pbuf *p, struct netif *netif, const ip6_addr_t *dest)
{
 8012dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dd4:	b089      	sub	sp, #36	; 0x24
 8012dd6:	4605      	mov	r5, r0
 8012dd8:	9106      	str	r1, [sp, #24]
 8012dda:	9207      	str	r2, [sp, #28]
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  static u32_t identification;
  u16_t left, cop;
  const u16_t mtu = nd6_get_destination_mtu(dest, netif);
 8012ddc:	4610      	mov	r0, r2
 8012dde:	f002 fb7f 	bl	80154e0 <nd6_get_destination_mtu>
  const u16_t nfb = (u16_t)((mtu - (IP6_HLEN + IP6_FRAG_HLEN)) & IP6_FRAG_OFFSET_MASK);
 8012de2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012de6:	b29b      	uxth	r3, r3
 8012de8:	f023 0307 	bic.w	r3, r3, #7
 8012dec:	b29b      	uxth	r3, r3
 8012dee:	9303      	str	r3, [sp, #12]
  u16_t fragment_offset = 0;
  u16_t last;
  u16_t poff = IP6_HLEN;

  identification++;
 8012df0:	4a69      	ldr	r2, [pc, #420]	; (8012f98 <ip6_frag+0x1c8>)
 8012df2:	6813      	ldr	r3, [r2, #0]
 8012df4:	3301      	adds	r3, #1
 8012df6:	6013      	str	r3, [r2, #0]

  original_ip6hdr = (struct ip6_hdr *)p->payload;
 8012df8:	686b      	ldr	r3, [r5, #4]
 8012dfa:	9304      	str	r3, [sp, #16]

  /* @todo we assume there are no options in the unfragmentable part (IPv6 header). */
  LWIP_ASSERT("p->tot_len >= IP6_HLEN", p->tot_len >= IP6_HLEN);
 8012dfc:	892b      	ldrh	r3, [r5, #8]
 8012dfe:	2b27      	cmp	r3, #39	; 0x27
 8012e00:	d941      	bls.n	8012e86 <ip6_frag+0xb6>
  left = (u16_t)(p->tot_len - IP6_HLEN);
 8012e02:	892b      	ldrh	r3, [r5, #8]
 8012e04:	3b28      	subs	r3, #40	; 0x28
 8012e06:	fa1f fa83 	uxth.w	sl, r3
  u16_t poff = IP6_HLEN;
 8012e0a:	2628      	movs	r6, #40	; 0x28
  u16_t fragment_offset = 0;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	9305      	str	r3, [sp, #20]
  u16_t newpbuflen = 0;
 8012e10:	461c      	mov	r4, r3

  while (left) {
 8012e12:	f1ba 0f00 	cmp.w	sl, #0
 8012e16:	f000 80b9 	beq.w	8012f8c <ip6_frag+0x1bc>
    last = (left <= nfb);

    /* Fill this fragment */
    cop = last ? left : nfb;
 8012e1a:	9b03      	ldr	r3, [sp, #12]
 8012e1c:	459a      	cmp	sl, r3
 8012e1e:	d93a      	bls.n	8012e96 <ip6_frag+0xc6>
 8012e20:	9302      	str	r3, [sp, #8]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link, IPv6, and Fragment header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP6_HLEN + IP6_FRAG_HLEN, PBUF_RAM);
 8012e22:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e26:	2130      	movs	r1, #48	; 0x30
 8012e28:	200e      	movs	r0, #14
 8012e2a:	f7f5 f9c3 	bl	80081b4 <pbuf_alloc>
    if (rambuf == NULL) {
 8012e2e:	4681      	mov	r9, r0
 8012e30:	2800      	cmp	r0, #0
 8012e32:	f000 80ad 	beq.w	8012f90 <ip6_frag+0x1c0>
      IP6_FRAG_STATS_INC(ip6_frag.memerr);
      return ERR_MEM;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012e36:	896b      	ldrh	r3, [r5, #10]
 8012e38:	2b27      	cmp	r3, #39	; 0x27
 8012e3a:	d92f      	bls.n	8012e9c <ip6_frag+0xcc>
                (p->len >= (IP6_HLEN)));
    SMEMCPY(rambuf->payload, original_ip6hdr, IP6_HLEN);
 8012e3c:	9904      	ldr	r1, [sp, #16]
 8012e3e:	460b      	mov	r3, r1
 8012e40:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8012e44:	f101 0e20 	add.w	lr, r1, #32
 8012e48:	f8d3 c000 	ldr.w	ip, [r3]
 8012e4c:	685f      	ldr	r7, [r3, #4]
 8012e4e:	6898      	ldr	r0, [r3, #8]
 8012e50:	68d9      	ldr	r1, [r3, #12]
 8012e52:	f8c2 c000 	str.w	ip, [r2]
 8012e56:	6057      	str	r7, [r2, #4]
 8012e58:	6090      	str	r0, [r2, #8]
 8012e5a:	60d1      	str	r1, [r2, #12]
 8012e5c:	3310      	adds	r3, #16
 8012e5e:	3210      	adds	r2, #16
 8012e60:	4573      	cmp	r3, lr
 8012e62:	d1f1      	bne.n	8012e48 <ip6_frag+0x78>
 8012e64:	6819      	ldr	r1, [r3, #0]
 8012e66:	685b      	ldr	r3, [r3, #4]
 8012e68:	6011      	str	r1, [r2, #0]
 8012e6a:	6053      	str	r3, [r2, #4]
    ip6hdr = (struct ip6_hdr *)rambuf->payload;
 8012e6c:	f8d9 b004 	ldr.w	fp, [r9, #4]
    frag_hdr = (struct ip6_frag_hdr *)((u8_t*)rambuf->payload + IP6_HLEN);

    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
 8012e70:	686b      	ldr	r3, [r5, #4]
 8012e72:	4433      	add	r3, r6
 8012e74:	606b      	str	r3, [r5, #4]
    p->len = (u16_t)(p->len - poff);
 8012e76:	896b      	ldrh	r3, [r5, #10]
 8012e78:	1b9b      	subs	r3, r3, r6
 8012e7a:	816b      	strh	r3, [r5, #10]
    p->tot_len = (u16_t)(p->tot_len - poff);
 8012e7c:	892b      	ldrh	r3, [r5, #8]
 8012e7e:	1b9e      	subs	r6, r3, r6
 8012e80:	812e      	strh	r6, [r5, #8]

    left_to_copy = cop;
 8012e82:	9e02      	ldr	r6, [sp, #8]
    while (left_to_copy) {
 8012e84:	e02f      	b.n	8012ee6 <ip6_frag+0x116>
  LWIP_ASSERT("p->tot_len >= IP6_HLEN", p->tot_len >= IP6_HLEN);
 8012e86:	4b45      	ldr	r3, [pc, #276]	; (8012f9c <ip6_frag+0x1cc>)
 8012e88:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8012e8c:	4944      	ldr	r1, [pc, #272]	; (8012fa0 <ip6_frag+0x1d0>)
 8012e8e:	4845      	ldr	r0, [pc, #276]	; (8012fa4 <ip6_frag+0x1d4>)
 8012e90:	f002 fd7e 	bl	8015990 <iprintf>
 8012e94:	e7b5      	b.n	8012e02 <ip6_frag+0x32>
    cop = last ? left : nfb;
 8012e96:	f8cd a008 	str.w	sl, [sp, #8]
 8012e9a:	e7c2      	b.n	8012e22 <ip6_frag+0x52>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012e9c:	4b3f      	ldr	r3, [pc, #252]	; (8012f9c <ip6_frag+0x1cc>)
 8012e9e:	f240 320f 	movw	r2, #783	; 0x30f
 8012ea2:	4941      	ldr	r1, [pc, #260]	; (8012fa8 <ip6_frag+0x1d8>)
 8012ea4:	483f      	ldr	r0, [pc, #252]	; (8012fa4 <ip6_frag+0x1d4>)
 8012ea6:	f002 fd73 	bl	8015990 <iprintf>
 8012eaa:	e7c7      	b.n	8012e3c <ip6_frag+0x6c>
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
        p = p->next;
        continue;
      }
      pcr = ip6_frag_alloc_pbuf_custom_ref();
 8012eac:	f7ff fd5e 	bl	801296c <ip6_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 8012eb0:	4607      	mov	r7, r0
 8012eb2:	b310      	cbz	r0, 8012efa <ip6_frag+0x12a>
        pbuf_free(rambuf);
        IP6_FRAG_STATS_INC(ip6_frag.memerr);
        return ERR_MEM;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc, p->payload, newpbuflen);
 8012eb4:	9401      	str	r4, [sp, #4]
 8012eb6:	686b      	ldr	r3, [r5, #4]
 8012eb8:	9300      	str	r3, [sp, #0]
 8012eba:	4603      	mov	r3, r0
 8012ebc:	2241      	movs	r2, #65	; 0x41
 8012ebe:	4621      	mov	r1, r4
 8012ec0:	2000      	movs	r0, #0
 8012ec2:	f7f5 f8a7 	bl	8008014 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8012ec6:	4680      	mov	r8, r0
 8012ec8:	b1f8      	cbz	r0, 8012f0a <ip6_frag+0x13a>
        ip6_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        IP6_FRAG_STATS_INC(ip6_frag.memerr);
        return ERR_MEM;
      }
      pbuf_ref(p);
 8012eca:	4628      	mov	r0, r5
 8012ecc:	f7f5 fa7c 	bl	80083c8 <pbuf_ref>
      pcr->original = p;
 8012ed0:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ip6_frag_free_pbuf_custom;
 8012ed2:	4b36      	ldr	r3, [pc, #216]	; (8012fac <ip6_frag+0x1dc>)
 8012ed4:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012ed6:	4641      	mov	r1, r8
 8012ed8:	4648      	mov	r0, r9
 8012eda:	f7f5 fa8d 	bl	80083f8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012ede:	1b36      	subs	r6, r6, r4
 8012ee0:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 8012ee2:	b106      	cbz	r6, 8012ee6 <ip6_frag+0x116>
        p = p->next;
 8012ee4:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 8012ee6:	b1ce      	cbz	r6, 8012f1c <ip6_frag+0x14c>
      newpbuflen = (left_to_copy < p->len) ? left_to_copy : p->len;
 8012ee8:	896c      	ldrh	r4, [r5, #10]
 8012eea:	42b4      	cmp	r4, r6
 8012eec:	bf28      	it	cs
 8012eee:	4634      	movcs	r4, r6
 8012ef0:	b2a4      	uxth	r4, r4
      if (!newpbuflen) {
 8012ef2:	2c00      	cmp	r4, #0
 8012ef4:	d1da      	bne.n	8012eac <ip6_frag+0xdc>
        p = p->next;
 8012ef6:	682d      	ldr	r5, [r5, #0]
        continue;
 8012ef8:	e7f5      	b.n	8012ee6 <ip6_frag+0x116>
        pbuf_free(rambuf);
 8012efa:	4648      	mov	r0, r9
 8012efc:	f7f5 f8f8 	bl	80080f0 <pbuf_free>
        return ERR_MEM;
 8012f00:	f04f 30ff 	mov.w	r0, #4294967295
    pbuf_free(rambuf);
    left = (u16_t)(left - cop);
    fragment_offset = (u16_t)(fragment_offset + cop);
  }
  return ERR_OK;
}
 8012f04:	b009      	add	sp, #36	; 0x24
 8012f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip6_frag_free_pbuf_custom_ref(pcr);
 8012f0a:	4638      	mov	r0, r7
 8012f0c:	f7ff fcfe 	bl	801290c <ip6_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012f10:	4648      	mov	r0, r9
 8012f12:	f7f5 f8ed 	bl	80080f0 <pbuf_free>
        return ERR_MEM;
 8012f16:	f04f 30ff 	mov.w	r0, #4294967295
 8012f1a:	e7f3      	b.n	8012f04 <ip6_frag+0x134>
    frag_hdr->_nexth = original_ip6hdr->_nexth;
 8012f1c:	9b04      	ldr	r3, [sp, #16]
 8012f1e:	799b      	ldrb	r3, [r3, #6]
 8012f20:	f88b 3028 	strb.w	r3, [fp, #40]	; 0x28
    frag_hdr->reserved = 0;
 8012f24:	2300      	movs	r3, #0
 8012f26:	f88b 3029 	strb.w	r3, [fp, #41]	; 0x29
    frag_hdr->_fragment_offset = lwip_htons((u16_t)((fragment_offset & IP6_FRAG_OFFSET_MASK) | (last ? 0 : IP6_FRAG_MORE_FLAG)));
 8012f2a:	9f05      	ldr	r7, [sp, #20]
 8012f2c:	f027 0007 	bic.w	r0, r7, #7
 8012f30:	b200      	sxth	r0, r0
 8012f32:	9b03      	ldr	r3, [sp, #12]
 8012f34:	459a      	cmp	sl, r3
 8012f36:	bf88      	it	hi
 8012f38:	f040 0001 	orrhi.w	r0, r0, #1
 8012f3c:	b280      	uxth	r0, r0
 8012f3e:	f7f3 fd9d 	bl	8006a7c <lwip_htons>
 8012f42:	f8ab 002a 	strh.w	r0, [fp, #42]	; 0x2a
    frag_hdr->_identification = lwip_htonl(identification);
 8012f46:	4b14      	ldr	r3, [pc, #80]	; (8012f98 <ip6_frag+0x1c8>)
 8012f48:	6818      	ldr	r0, [r3, #0]
 8012f4a:	f7f3 fd9c 	bl	8006a86 <lwip_htonl>
 8012f4e:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
    IP6H_NEXTH_SET(ip6hdr, IP6_NEXTH_FRAGMENT);
 8012f52:	232c      	movs	r3, #44	; 0x2c
 8012f54:	f88b 3006 	strb.w	r3, [fp, #6]
    IP6H_PLEN_SET(ip6hdr, (u16_t)(cop + IP6_FRAG_HLEN));
 8012f58:	9e02      	ldr	r6, [sp, #8]
 8012f5a:	f106 0008 	add.w	r0, r6, #8
 8012f5e:	b280      	uxth	r0, r0
 8012f60:	f7f3 fd8c 	bl	8006a7c <lwip_htons>
 8012f64:	f8ab 0004 	strh.w	r0, [fp, #4]
    netif->output_ip6(netif, rambuf, dest);
 8012f68:	9806      	ldr	r0, [sp, #24]
 8012f6a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8012f6e:	9a07      	ldr	r2, [sp, #28]
 8012f70:	4649      	mov	r1, r9
 8012f72:	4798      	blx	r3
    pbuf_free(rambuf);
 8012f74:	4648      	mov	r0, r9
 8012f76:	f7f5 f8bb 	bl	80080f0 <pbuf_free>
    left = (u16_t)(left - cop);
 8012f7a:	ebaa 0a06 	sub.w	sl, sl, r6
 8012f7e:	fa1f fa8a 	uxth.w	sl, sl
    fragment_offset = (u16_t)(fragment_offset + cop);
 8012f82:	19bb      	adds	r3, r7, r6
 8012f84:	b29b      	uxth	r3, r3
 8012f86:	9305      	str	r3, [sp, #20]
    poff = newpbuflen;
 8012f88:	4626      	mov	r6, r4
 8012f8a:	e742      	b.n	8012e12 <ip6_frag+0x42>
  return ERR_OK;
 8012f8c:	2000      	movs	r0, #0
 8012f8e:	e7b9      	b.n	8012f04 <ip6_frag+0x134>
      return ERR_MEM;
 8012f90:	f04f 30ff 	mov.w	r0, #4294967295
 8012f94:	e7b6      	b.n	8012f04 <ip6_frag+0x134>
 8012f96:	bf00      	nop
 8012f98:	20000be4 	.word	0x20000be4
 8012f9c:	0801a820 	.word	0x0801a820
 8012fa0:	0801a940 	.word	0x0801a940
 8012fa4:	08016bb4 	.word	0x08016bb4
 8012fa8:	0801a6bc 	.word	0x0801a6bc
 8012fac:	08012939 	.word	0x08012939

08012fb0 <mld6_remove_group>:
mld6_remove_group(struct netif *netif, struct mld_group *group)
{
  err_t err = ERR_OK;

  /* Is it the first group? */
  if (netif_mld6_data(netif) == group) {
 8012fb0:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
 8012fb4:	428b      	cmp	r3, r1
 8012fb6:	d005      	beq.n	8012fc4 <mld6_remove_group+0x14>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_MLD6, group->next);
  } else {
    /* look for group further down the list */
    struct mld_group *tmpGroup;
    for (tmpGroup = netif_mld6_data(netif); tmpGroup != NULL; tmpGroup = tmpGroup->next) {
 8012fb8:	b15b      	cbz	r3, 8012fd2 <mld6_remove_group+0x22>
      if (tmpGroup->next == group) {
 8012fba:	681a      	ldr	r2, [r3, #0]
 8012fbc:	428a      	cmp	r2, r1
 8012fbe:	d006      	beq.n	8012fce <mld6_remove_group+0x1e>
    for (tmpGroup = netif_mld6_data(netif); tmpGroup != NULL; tmpGroup = tmpGroup->next) {
 8012fc0:	4613      	mov	r3, r2
 8012fc2:	e7f9      	b.n	8012fb8 <mld6_remove_group+0x8>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_MLD6, group->next);
 8012fc4:	680b      	ldr	r3, [r1, #0]
 8012fc6:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
  err_t err = ERR_OK;
 8012fca:	2000      	movs	r0, #0
 8012fcc:	4770      	bx	lr
        tmpGroup->next = group->next;
 8012fce:	680a      	ldr	r2, [r1, #0]
 8012fd0:	601a      	str	r2, [r3, #0]
        break;
      }
    }
    /* Group not find group */
    if (tmpGroup == NULL) {
 8012fd2:	b10b      	cbz	r3, 8012fd8 <mld6_remove_group+0x28>
  err_t err = ERR_OK;
 8012fd4:	2000      	movs	r0, #0
 8012fd6:	4770      	bx	lr
      err = ERR_ARG;
 8012fd8:	f06f 000f 	mvn.w	r0, #15
    }
  }

  return err;
}
 8012fdc:	4770      	bx	lr
	...

08012fe0 <mld6_delayed_report>:
 *              should be sent
 * @param maxresp_in the max resp delay provided in the query
 */
static void
mld6_delayed_report(struct mld_group *group, u16_t maxresp_in)
{
 8012fe0:	b538      	push	{r3, r4, r5, lr}
 8012fe2:	4605      	mov	r5, r0
  /* Convert maxresp from milliseconds to tmr ticks */
  u16_t maxresp = maxresp_in / MLD6_TMR_INTERVAL;
 8012fe4:	4c0e      	ldr	r4, [pc, #56]	; (8013020 <mld6_delayed_report+0x40>)
 8012fe6:	fba4 3401 	umull	r3, r4, r4, r1
 8012fea:	0964      	lsrs	r4, r4, #5
  if (maxresp == 0) {
 8012fec:	2963      	cmp	r1, #99	; 0x63
 8012fee:	d800      	bhi.n	8012ff2 <mld6_delayed_report+0x12>
    maxresp = 1;
 8012ff0:	2401      	movs	r4, #1
  }

#ifdef LWIP_RAND
  /* Randomize maxresp. (if LWIP_RAND is supported) */
  maxresp = (u16_t)(LWIP_RAND() % maxresp);
 8012ff2:	f002 fd5b 	bl	8015aac <rand>
 8012ff6:	fbb0 f3f4 	udiv	r3, r0, r4
 8012ffa:	fb04 0413 	mls	r4, r4, r3, r0
 8012ffe:	b2a4      	uxth	r4, r4
  if (maxresp == 0) {
 8013000:	b904      	cbnz	r4, 8013004 <mld6_delayed_report+0x24>
    maxresp = 1;
 8013002:	2401      	movs	r4, #1
  }
#endif /* LWIP_RAND */

  /* Apply timer value if no report has been scheduled already. */
  if ((group->group_state == MLD6_GROUP_IDLE_MEMBER) ||
 8013004:	7e6b      	ldrb	r3, [r5, #25]
 8013006:	2b02      	cmp	r3, #2
 8013008:	d005      	beq.n	8013016 <mld6_delayed_report+0x36>
 801300a:	2b01      	cmp	r3, #1
 801300c:	d106      	bne.n	801301c <mld6_delayed_report+0x3c>
     ((group->group_state == MLD6_GROUP_DELAYING_MEMBER) &&
      ((group->timer == 0) || (maxresp < group->timer)))) {
 801300e:	8b6b      	ldrh	r3, [r5, #26]
     ((group->group_state == MLD6_GROUP_DELAYING_MEMBER) &&
 8013010:	b10b      	cbz	r3, 8013016 <mld6_delayed_report+0x36>
      ((group->timer == 0) || (maxresp < group->timer)))) {
 8013012:	42a3      	cmp	r3, r4
 8013014:	d902      	bls.n	801301c <mld6_delayed_report+0x3c>
    group->timer = maxresp;
 8013016:	836c      	strh	r4, [r5, #26]
    group->group_state = MLD6_GROUP_DELAYING_MEMBER;
 8013018:	2301      	movs	r3, #1
 801301a:	766b      	strb	r3, [r5, #25]
  }
}
 801301c:	bd38      	pop	{r3, r4, r5, pc}
 801301e:	bf00      	nop
 8013020:	51eb851f 	.word	0x51eb851f

08013024 <mld6_new_group>:
{
 8013024:	b538      	push	{r3, r4, r5, lr}
 8013026:	4605      	mov	r5, r0
 8013028:	460c      	mov	r4, r1
  group = (struct mld_group *)memp_malloc(MEMP_MLD6_GROUP);
 801302a:	200a      	movs	r0, #10
 801302c:	f7f4 fba2 	bl	8007774 <memp_malloc>
  if (group != NULL) {
 8013030:	4603      	mov	r3, r0
 8013032:	b1c8      	cbz	r0, 8013068 <mld6_new_group+0x44>
    ip6_addr_set(&(group->group_address), addr);
 8013034:	b1d4      	cbz	r4, 801306c <mld6_new_group+0x48>
 8013036:	6822      	ldr	r2, [r4, #0]
 8013038:	605a      	str	r2, [r3, #4]
 801303a:	b1cc      	cbz	r4, 8013070 <mld6_new_group+0x4c>
 801303c:	6862      	ldr	r2, [r4, #4]
 801303e:	609a      	str	r2, [r3, #8]
 8013040:	b1c4      	cbz	r4, 8013074 <mld6_new_group+0x50>
 8013042:	68a2      	ldr	r2, [r4, #8]
 8013044:	60da      	str	r2, [r3, #12]
 8013046:	b1bc      	cbz	r4, 8013078 <mld6_new_group+0x54>
 8013048:	68e2      	ldr	r2, [r4, #12]
 801304a:	611a      	str	r2, [r3, #16]
 801304c:	b1b4      	cbz	r4, 801307c <mld6_new_group+0x58>
 801304e:	7c22      	ldrb	r2, [r4, #16]
 8013050:	751a      	strb	r2, [r3, #20]
    group->timer              = 0; /* Not running */
 8013052:	2200      	movs	r2, #0
 8013054:	835a      	strh	r2, [r3, #26]
    group->group_state        = MLD6_GROUP_IDLE_MEMBER;
 8013056:	2102      	movs	r1, #2
 8013058:	7659      	strb	r1, [r3, #25]
    group->last_reporter_flag = 0;
 801305a:	761a      	strb	r2, [r3, #24]
    group->use                = 0;
 801305c:	771a      	strb	r2, [r3, #28]
    group->next               = netif_mld6_data(ifp);
 801305e:	f8d5 20d0 	ldr.w	r2, [r5, #208]	; 0xd0
 8013062:	601a      	str	r2, [r3, #0]
    netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_MLD6, group);
 8013064:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
}
 8013068:	4618      	mov	r0, r3
 801306a:	bd38      	pop	{r3, r4, r5, pc}
    ip6_addr_set(&(group->group_address), addr);
 801306c:	2200      	movs	r2, #0
 801306e:	e7e3      	b.n	8013038 <mld6_new_group+0x14>
 8013070:	2200      	movs	r2, #0
 8013072:	e7e4      	b.n	801303e <mld6_new_group+0x1a>
 8013074:	2200      	movs	r2, #0
 8013076:	e7e5      	b.n	8013044 <mld6_new_group+0x20>
 8013078:	2200      	movs	r2, #0
 801307a:	e7e6      	b.n	801304a <mld6_new_group+0x26>
 801307c:	2200      	movs	r2, #0
 801307e:	e7e7      	b.n	8013050 <mld6_new_group+0x2c>

08013080 <mld6_send>:
 * @param group the group to report or quit
 * @param type ICMP6_TYPE_MLR (report) or ICMP6_TYPE_MLD (done)
 */
static void
mld6_send(struct netif *netif, struct mld_group *group, u8_t type)
{
 8013080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013084:	b084      	sub	sp, #16
 8013086:	4605      	mov	r5, r0
 8013088:	460c      	mov	r4, r1
 801308a:	4616      	mov	r6, r2
  struct mld_header *mld_hdr;
  struct pbuf *p;
  const ip6_addr_t *src_addr;

  /* Allocate a packet. Size is MLD header + IPv6 Hop-by-hop options header. */
  p = pbuf_alloc(PBUF_IP, sizeof(struct mld_header) + MLD6_HBH_HLEN, PBUF_RAM);
 801308c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013090:	2120      	movs	r1, #32
 8013092:	2036      	movs	r0, #54	; 0x36
 8013094:	f7f5 f88e 	bl	80081b4 <pbuf_alloc>
  if (p == NULL) {
 8013098:	2800      	cmp	r0, #0
 801309a:	d046      	beq.n	801312a <mld6_send+0xaa>
 801309c:	4680      	mov	r8, r0
    MLD6_STATS_INC(mld6.memerr);
    return;
  }

  /* Move to make room for Hop-by-hop options header. */
  if (pbuf_remove_header(p, MLD6_HBH_HLEN)) {
 801309e:	2108      	movs	r1, #8
 80130a0:	f7f4 ffe0 	bl	8008064 <pbuf_remove_header>
 80130a4:	b938      	cbnz	r0, 80130b6 <mld6_send+0x36>
    MLD6_STATS_INC(mld6.lenerr);
    return;
  }

  /* Select our source address. */
  if (!ip6_addr_isvalid(netif_ip6_addr_state(netif, 0))) {
 80130a6:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
 80130aa:	f013 0f10 	tst.w	r3, #16
 80130ae:	d006      	beq.n	80130be <mld6_send+0x3e>
    /* This is a special case, when we are performing duplicate address detection.
     * We must join the multicast group, but we don't have a valid address yet. */
    src_addr = IP6_ADDR_ANY6;
  } else {
    /* Use link-local address as source address. */
    src_addr = netif_ip6_addr(netif, 0);
 80130b0:	f105 074c 	add.w	r7, r5, #76	; 0x4c
 80130b4:	e004      	b.n	80130c0 <mld6_send+0x40>
    pbuf_free(p);
 80130b6:	4640      	mov	r0, r8
 80130b8:	f7f5 f81a 	bl	80080f0 <pbuf_free>
    return;
 80130bc:	e035      	b.n	801312a <mld6_send+0xaa>
    src_addr = IP6_ADDR_ANY6;
 80130be:	4f1c      	ldr	r7, [pc, #112]	; (8013130 <mld6_send+0xb0>)
  }

  /* MLD message header pointer. */
  mld_hdr = (struct mld_header *)p->payload;
 80130c0:	f8d8 3004 	ldr.w	r3, [r8, #4]

  /* Set fields. */
  mld_hdr->type = type;
 80130c4:	701e      	strb	r6, [r3, #0]
  mld_hdr->code = 0;
 80130c6:	2200      	movs	r2, #0
 80130c8:	705a      	strb	r2, [r3, #1]
  mld_hdr->chksum = 0;
 80130ca:	709a      	strb	r2, [r3, #2]
 80130cc:	70da      	strb	r2, [r3, #3]
  mld_hdr->max_resp_delay = 0;
 80130ce:	711a      	strb	r2, [r3, #4]
 80130d0:	715a      	strb	r2, [r3, #5]
  mld_hdr->reserved = 0;
 80130d2:	719a      	strb	r2, [r3, #6]
 80130d4:	71da      	strb	r2, [r3, #7]
  ip6_addr_copy_to_packed(mld_hdr->multicast_address, group->group_address);
 80130d6:	6861      	ldr	r1, [r4, #4]
 80130d8:	6099      	str	r1, [r3, #8]
 80130da:	68a1      	ldr	r1, [r4, #8]
 80130dc:	60d9      	str	r1, [r3, #12]
 80130de:	68e1      	ldr	r1, [r4, #12]
 80130e0:	6119      	str	r1, [r3, #16]
 80130e2:	6921      	ldr	r1, [r4, #16]
 80130e4:	6159      	str	r1, [r3, #20]
      src_addr, &(group->group_address));
  }
#endif /* CHECKSUM_GEN_ICMP6 */

  /* Add hop-by-hop headers options: router alert with MLD value. */
  ip6_options_add_hbh_ra(p, IP6_NEXTH_ICMP6, IP6_ROUTER_ALERT_VALUE_MLD);
 80130e6:	213a      	movs	r1, #58	; 0x3a
 80130e8:	4640      	mov	r0, r8
 80130ea:	f7ff fb41 	bl	8012770 <ip6_options_add_hbh_ra>

  if (type == ICMP6_TYPE_MLR) {
 80130ee:	2e83      	cmp	r6, #131	; 0x83
 80130f0:	d00a      	beq.n	8013108 <mld6_send+0x88>
    group->last_reporter_flag = 1;
  }

  /* Send the packet out. */
  MLD6_STATS_INC(mld6.xmit);
  ip6_output_if(p, (ip6_addr_isany(src_addr)) ? NULL : src_addr, &(group->group_address),
 80130f2:	b167      	cbz	r7, 801310e <mld6_send+0x8e>
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	b95b      	cbnz	r3, 8013110 <mld6_send+0x90>
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	b94b      	cbnz	r3, 8013110 <mld6_send+0x90>
 80130fc:	68bb      	ldr	r3, [r7, #8]
 80130fe:	b93b      	cbnz	r3, 8013110 <mld6_send+0x90>
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	b92b      	cbnz	r3, 8013110 <mld6_send+0x90>
 8013104:	2700      	movs	r7, #0
 8013106:	e003      	b.n	8013110 <mld6_send+0x90>
    group->last_reporter_flag = 1;
 8013108:	2301      	movs	r3, #1
 801310a:	7623      	strb	r3, [r4, #24]
 801310c:	e7f1      	b.n	80130f2 <mld6_send+0x72>
  ip6_output_if(p, (ip6_addr_isany(src_addr)) ? NULL : src_addr, &(group->group_address),
 801310e:	2700      	movs	r7, #0
 8013110:	9502      	str	r5, [sp, #8]
 8013112:	2300      	movs	r3, #0
 8013114:	9301      	str	r3, [sp, #4]
 8013116:	9300      	str	r3, [sp, #0]
 8013118:	2301      	movs	r3, #1
 801311a:	1d22      	adds	r2, r4, #4
 801311c:	4639      	mov	r1, r7
 801311e:	4640      	mov	r0, r8
 8013120:	f7ff faf0 	bl	8012704 <ip6_output_if>
      MLD6_HL, 0, IP6_NEXTH_HOPBYHOP, netif);
  pbuf_free(p);
 8013124:	4640      	mov	r0, r8
 8013126:	f7f4 ffe3 	bl	80080f0 <pbuf_free>
}
 801312a:	b004      	add	sp, #16
 801312c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013130:	0801a808 	.word	0x0801a808

08013134 <mld6_report_groups>:
{
 8013134:	b510      	push	{r4, lr}
  struct mld_group *group = netif_mld6_data(netif);
 8013136:	f8d0 40d0 	ldr.w	r4, [r0, #208]	; 0xd0
  while (group != NULL) {
 801313a:	b134      	cbz	r4, 801314a <mld6_report_groups+0x16>
    mld6_delayed_report(group, MLD6_JOIN_DELAYING_MEMBER_TMR_MS);
 801313c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8013140:	4620      	mov	r0, r4
 8013142:	f7ff ff4d 	bl	8012fe0 <mld6_delayed_report>
    group = group->next;
 8013146:	6824      	ldr	r4, [r4, #0]
 8013148:	e7f7      	b.n	801313a <mld6_report_groups+0x6>
}
 801314a:	bd10      	pop	{r4, pc}

0801314c <mld6_lookfor_group>:
  struct mld_group *group = netif_mld6_data(ifp);
 801314c:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
  while (group != NULL) {
 8013150:	e000      	b.n	8013154 <mld6_lookfor_group+0x8>
    group = group->next;
 8013152:	6800      	ldr	r0, [r0, #0]
  while (group != NULL) {
 8013154:	b198      	cbz	r0, 801317e <mld6_lookfor_group+0x32>
    if (ip6_addr_cmp(&(group->group_address), addr)) {
 8013156:	6842      	ldr	r2, [r0, #4]
 8013158:	680b      	ldr	r3, [r1, #0]
 801315a:	429a      	cmp	r2, r3
 801315c:	d1f9      	bne.n	8013152 <mld6_lookfor_group+0x6>
 801315e:	6882      	ldr	r2, [r0, #8]
 8013160:	684b      	ldr	r3, [r1, #4]
 8013162:	429a      	cmp	r2, r3
 8013164:	d1f5      	bne.n	8013152 <mld6_lookfor_group+0x6>
 8013166:	68c2      	ldr	r2, [r0, #12]
 8013168:	688b      	ldr	r3, [r1, #8]
 801316a:	429a      	cmp	r2, r3
 801316c:	d1f1      	bne.n	8013152 <mld6_lookfor_group+0x6>
 801316e:	6902      	ldr	r2, [r0, #16]
 8013170:	68cb      	ldr	r3, [r1, #12]
 8013172:	429a      	cmp	r2, r3
 8013174:	d1ed      	bne.n	8013152 <mld6_lookfor_group+0x6>
 8013176:	7d02      	ldrb	r2, [r0, #20]
 8013178:	7c0b      	ldrb	r3, [r1, #16]
 801317a:	429a      	cmp	r2, r3
 801317c:	d1e9      	bne.n	8013152 <mld6_lookfor_group+0x6>
}
 801317e:	4770      	bx	lr

08013180 <mld6_input>:
{
 8013180:	b570      	push	{r4, r5, r6, lr}
 8013182:	4604      	mov	r4, r0
  if (p->len < sizeof(struct mld_header)) {
 8013184:	8943      	ldrh	r3, [r0, #10]
 8013186:	2b17      	cmp	r3, #23
 8013188:	d90a      	bls.n	80131a0 <mld6_input+0x20>
 801318a:	4608      	mov	r0, r1
  mld_hdr = (struct mld_header *)p->payload;
 801318c:	6865      	ldr	r5, [r4, #4]
  switch (mld_hdr->type) {
 801318e:	782b      	ldrb	r3, [r5, #0]
 8013190:	2b82      	cmp	r3, #130	; 0x82
 8013192:	d008      	beq.n	80131a6 <mld6_input+0x26>
 8013194:	2b83      	cmp	r3, #131	; 0x83
 8013196:	d050      	beq.n	801323a <mld6_input+0xba>
  pbuf_free(p);
 8013198:	4620      	mov	r0, r4
 801319a:	f7f4 ffa9 	bl	80080f0 <pbuf_free>
}
 801319e:	bd70      	pop	{r4, r5, r6, pc}
    pbuf_free(p);
 80131a0:	f7f4 ffa6 	bl	80080f0 <pbuf_free>
    return;
 80131a4:	e7fb      	b.n	801319e <mld6_input+0x1e>
    if (ip6_addr_isallnodes_linklocal(ip6_current_dest_addr()) &&
 80131a6:	4b2c      	ldr	r3, [pc, #176]	; (8013258 <mld6_input+0xd8>)
 80131a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131aa:	f240 23ff 	movw	r3, #767	; 0x2ff
 80131ae:	429a      	cmp	r2, r3
 80131b0:	d10a      	bne.n	80131c8 <mld6_input+0x48>
 80131b2:	4b29      	ldr	r3, [pc, #164]	; (8013258 <mld6_input+0xd8>)
 80131b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131b6:	b93b      	cbnz	r3, 80131c8 <mld6_input+0x48>
 80131b8:	4b27      	ldr	r3, [pc, #156]	; (8013258 <mld6_input+0xd8>)
 80131ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131bc:	b923      	cbnz	r3, 80131c8 <mld6_input+0x48>
 80131be:	4b26      	ldr	r3, [pc, #152]	; (8013258 <mld6_input+0xd8>)
 80131c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80131c6:	d008      	beq.n	80131da <mld6_input+0x5a>
      group = mld6_lookfor_group(inp, ip6_current_dest_addr());
 80131c8:	4924      	ldr	r1, [pc, #144]	; (801325c <mld6_input+0xdc>)
 80131ca:	f7ff ffbf 	bl	801314c <mld6_lookfor_group>
      if (group != NULL) {
 80131ce:	2800      	cmp	r0, #0
 80131d0:	d0e2      	beq.n	8013198 <mld6_input+0x18>
        mld6_delayed_report(group, mld_hdr->max_resp_delay);
 80131d2:	88a9      	ldrh	r1, [r5, #4]
 80131d4:	f7ff ff04 	bl	8012fe0 <mld6_delayed_report>
 80131d8:	e7de      	b.n	8013198 <mld6_input+0x18>
    if (ip6_addr_isallnodes_linklocal(ip6_current_dest_addr()) &&
 80131da:	f115 0f08 	cmn.w	r5, #8
 80131de:	d00b      	beq.n	80131f8 <mld6_input+0x78>
        ip6_addr_isany(&(mld_hdr->multicast_address))) {
 80131e0:	68ab      	ldr	r3, [r5, #8]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d1f0      	bne.n	80131c8 <mld6_input+0x48>
 80131e6:	68eb      	ldr	r3, [r5, #12]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d1ed      	bne.n	80131c8 <mld6_input+0x48>
 80131ec:	692b      	ldr	r3, [r5, #16]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d1ea      	bne.n	80131c8 <mld6_input+0x48>
 80131f2:	696b      	ldr	r3, [r5, #20]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d1e7      	bne.n	80131c8 <mld6_input+0x48>
      group = netif_mld6_data(inp);
 80131f8:	f8d0 60d0 	ldr.w	r6, [r0, #208]	; 0xd0
      while (group != NULL) {
 80131fc:	e004      	b.n	8013208 <mld6_input+0x88>
          mld6_delayed_report(group, mld_hdr->max_resp_delay);
 80131fe:	88a9      	ldrh	r1, [r5, #4]
 8013200:	4630      	mov	r0, r6
 8013202:	f7ff feed 	bl	8012fe0 <mld6_delayed_report>
        group = group->next;
 8013206:	6836      	ldr	r6, [r6, #0]
      while (group != NULL) {
 8013208:	2e00      	cmp	r6, #0
 801320a:	d0c5      	beq.n	8013198 <mld6_input+0x18>
        if ((!(ip6_addr_ismulticast_iflocal(&(group->group_address)))) &&
 801320c:	6873      	ldr	r3, [r6, #4]
 801320e:	f648 71ff 	movw	r1, #36863	; 0x8fff
 8013212:	4019      	ands	r1, r3
 8013214:	f240 12ff 	movw	r2, #511	; 0x1ff
 8013218:	4291      	cmp	r1, r2
 801321a:	d0f4      	beq.n	8013206 <mld6_input+0x86>
 801321c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8013220:	4293      	cmp	r3, r2
 8013222:	d1ec      	bne.n	80131fe <mld6_input+0x7e>
            (!(ip6_addr_isallnodes_linklocal(&(group->group_address))))) {
 8013224:	68b3      	ldr	r3, [r6, #8]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d1e9      	bne.n	80131fe <mld6_input+0x7e>
 801322a:	68f3      	ldr	r3, [r6, #12]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d1e6      	bne.n	80131fe <mld6_input+0x7e>
 8013230:	6933      	ldr	r3, [r6, #16]
 8013232:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8013236:	d1e2      	bne.n	80131fe <mld6_input+0x7e>
 8013238:	e7e5      	b.n	8013206 <mld6_input+0x86>
    group = mld6_lookfor_group(inp, ip6_current_dest_addr());
 801323a:	4908      	ldr	r1, [pc, #32]	; (801325c <mld6_input+0xdc>)
 801323c:	f7ff ff86 	bl	801314c <mld6_lookfor_group>
    if (group != NULL) {
 8013240:	2800      	cmp	r0, #0
 8013242:	d0a9      	beq.n	8013198 <mld6_input+0x18>
      if (group->group_state == MLD6_GROUP_DELAYING_MEMBER) {
 8013244:	7e42      	ldrb	r2, [r0, #25]
 8013246:	2a01      	cmp	r2, #1
 8013248:	d1a6      	bne.n	8013198 <mld6_input+0x18>
        group->timer = 0; /* stopped */
 801324a:	2200      	movs	r2, #0
 801324c:	8342      	strh	r2, [r0, #26]
        group->group_state = MLD6_GROUP_IDLE_MEMBER;
 801324e:	2102      	movs	r1, #2
 8013250:	7641      	strb	r1, [r0, #25]
        group->last_reporter_flag = 0;
 8013252:	7602      	strb	r2, [r0, #24]
 8013254:	e7a0      	b.n	8013198 <mld6_input+0x18>
 8013256:	bf00      	nop
 8013258:	20003e34 	.word	0x20003e34
 801325c:	20003e60 	.word	0x20003e60

08013260 <mld6_joingroup_netif>:
{
 8013260:	b570      	push	{r4, r5, r6, lr}
 8013262:	b086      	sub	sp, #24
 8013264:	4606      	mov	r6, r0
 8013266:	460c      	mov	r4, r1
  if (ip6_addr_lacks_zone(groupaddr, IP6_MULTICAST)) {
 8013268:	7c0b      	ldrb	r3, [r1, #16]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d137      	bne.n	80132de <mld6_joingroup_netif+0x7e>
 801326e:	680a      	ldr	r2, [r1, #0]
 8013270:	f24c 00ff 	movw	r0, #49407	; 0xc0ff
 8013274:	4010      	ands	r0, r2
 8013276:	f248 01fe 	movw	r1, #33022	; 0x80fe
 801327a:	4288      	cmp	r0, r1
 801327c:	d00a      	beq.n	8013294 <mld6_joingroup_netif+0x34>
 801327e:	f648 71ff 	movw	r1, #36863	; 0x8fff
 8013282:	4011      	ands	r1, r2
 8013284:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013288:	4281      	cmp	r1, r0
 801328a:	d003      	beq.n	8013294 <mld6_joingroup_netif+0x34>
 801328c:	f240 20ff 	movw	r0, #767	; 0x2ff
 8013290:	4281      	cmp	r1, r0
 8013292:	d124      	bne.n	80132de <mld6_joingroup_netif+0x7e>
    ip6_addr_set(&ip6addr, groupaddr);
 8013294:	b37c      	cbz	r4, 80132f6 <mld6_joingroup_netif+0x96>
 8013296:	9201      	str	r2, [sp, #4]
 8013298:	b37c      	cbz	r4, 80132fa <mld6_joingroup_netif+0x9a>
 801329a:	6861      	ldr	r1, [r4, #4]
 801329c:	9102      	str	r1, [sp, #8]
 801329e:	b374      	cbz	r4, 80132fe <mld6_joingroup_netif+0x9e>
 80132a0:	68a1      	ldr	r1, [r4, #8]
 80132a2:	9103      	str	r1, [sp, #12]
 80132a4:	b36c      	cbz	r4, 8013302 <mld6_joingroup_netif+0xa2>
 80132a6:	68e1      	ldr	r1, [r4, #12]
 80132a8:	9104      	str	r1, [sp, #16]
    ip6_addr_assign_zone(&ip6addr, IP6_MULTICAST, netif);
 80132aa:	f24c 00ff 	movw	r0, #49407	; 0xc0ff
 80132ae:	4010      	ands	r0, r2
 80132b0:	f248 01fe 	movw	r1, #33022	; 0x80fe
 80132b4:	4288      	cmp	r0, r1
 80132b6:	d00b      	beq.n	80132d0 <mld6_joingroup_netif+0x70>
 80132b8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80132bc:	0412      	lsls	r2, r2, #16
 80132be:	0c12      	lsrs	r2, r2, #16
 80132c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80132c4:	428a      	cmp	r2, r1
 80132c6:	d003      	beq.n	80132d0 <mld6_joingroup_netif+0x70>
 80132c8:	f240 21ff 	movw	r1, #767	; 0x2ff
 80132cc:	428a      	cmp	r2, r1
 80132ce:	d103      	bne.n	80132d8 <mld6_joingroup_netif+0x78>
 80132d0:	f896 30e2 	ldrb.w	r3, [r6, #226]	; 0xe2
 80132d4:	3301      	adds	r3, #1
 80132d6:	b2db      	uxtb	r3, r3
 80132d8:	f88d 3014 	strb.w	r3, [sp, #20]
    groupaddr = &ip6addr;
 80132dc:	ac01      	add	r4, sp, #4
  group = mld6_lookfor_group(netif, groupaddr);
 80132de:	4621      	mov	r1, r4
 80132e0:	4630      	mov	r0, r6
 80132e2:	f7ff ff33 	bl	801314c <mld6_lookfor_group>
  if (group == NULL) {
 80132e6:	4605      	mov	r5, r0
 80132e8:	b168      	cbz	r0, 8013306 <mld6_joingroup_netif+0xa6>
  group->use++;
 80132ea:	7f2b      	ldrb	r3, [r5, #28]
 80132ec:	3301      	adds	r3, #1
 80132ee:	772b      	strb	r3, [r5, #28]
  return ERR_OK;
 80132f0:	2000      	movs	r0, #0
}
 80132f2:	b006      	add	sp, #24
 80132f4:	bd70      	pop	{r4, r5, r6, pc}
    ip6_addr_set(&ip6addr, groupaddr);
 80132f6:	2200      	movs	r2, #0
 80132f8:	e7cd      	b.n	8013296 <mld6_joingroup_netif+0x36>
 80132fa:	2100      	movs	r1, #0
 80132fc:	e7ce      	b.n	801329c <mld6_joingroup_netif+0x3c>
 80132fe:	2100      	movs	r1, #0
 8013300:	e7cf      	b.n	80132a2 <mld6_joingroup_netif+0x42>
 8013302:	2100      	movs	r1, #0
 8013304:	e7d0      	b.n	80132a8 <mld6_joingroup_netif+0x48>
    group = mld6_new_group(netif, groupaddr);
 8013306:	4621      	mov	r1, r4
 8013308:	4630      	mov	r0, r6
 801330a:	f7ff fe8b 	bl	8013024 <mld6_new_group>
    if (group == NULL) {
 801330e:	4605      	mov	r5, r0
 8013310:	b188      	cbz	r0, 8013336 <mld6_joingroup_netif+0xd6>
    if (netif->mld_mac_filter != NULL) {
 8013312:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
 8013316:	b11b      	cbz	r3, 8013320 <mld6_joingroup_netif+0xc0>
      netif->mld_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
 8013318:	2201      	movs	r2, #1
 801331a:	4621      	mov	r1, r4
 801331c:	4630      	mov	r0, r6
 801331e:	4798      	blx	r3
    mld6_send(netif, group, ICMP6_TYPE_MLR);
 8013320:	2283      	movs	r2, #131	; 0x83
 8013322:	4629      	mov	r1, r5
 8013324:	4630      	mov	r0, r6
 8013326:	f7ff feab 	bl	8013080 <mld6_send>
    mld6_delayed_report(group, MLD6_JOIN_DELAYING_MEMBER_TMR_MS);
 801332a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801332e:	4628      	mov	r0, r5
 8013330:	f7ff fe56 	bl	8012fe0 <mld6_delayed_report>
 8013334:	e7d9      	b.n	80132ea <mld6_joingroup_netif+0x8a>
      return ERR_MEM;
 8013336:	f04f 30ff 	mov.w	r0, #4294967295
 801333a:	e7da      	b.n	80132f2 <mld6_joingroup_netif+0x92>

0801333c <mld6_leavegroup_netif>:
{
 801333c:	b570      	push	{r4, r5, r6, lr}
 801333e:	b086      	sub	sp, #24
 8013340:	4605      	mov	r5, r0
 8013342:	460c      	mov	r4, r1
  if (ip6_addr_lacks_zone(groupaddr, IP6_MULTICAST)) {
 8013344:	7c0b      	ldrb	r3, [r1, #16]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d137      	bne.n	80133ba <mld6_leavegroup_netif+0x7e>
 801334a:	680a      	ldr	r2, [r1, #0]
 801334c:	f24c 00ff 	movw	r0, #49407	; 0xc0ff
 8013350:	4010      	ands	r0, r2
 8013352:	f248 01fe 	movw	r1, #33022	; 0x80fe
 8013356:	4288      	cmp	r0, r1
 8013358:	d00a      	beq.n	8013370 <mld6_leavegroup_netif+0x34>
 801335a:	f648 71ff 	movw	r1, #36863	; 0x8fff
 801335e:	4011      	ands	r1, r2
 8013360:	f240 10ff 	movw	r0, #511	; 0x1ff
 8013364:	4281      	cmp	r1, r0
 8013366:	d003      	beq.n	8013370 <mld6_leavegroup_netif+0x34>
 8013368:	f240 20ff 	movw	r0, #767	; 0x2ff
 801336c:	4281      	cmp	r1, r0
 801336e:	d124      	bne.n	80133ba <mld6_leavegroup_netif+0x7e>
    ip6_addr_set(&ip6addr, groupaddr);
 8013370:	b38c      	cbz	r4, 80133d6 <mld6_leavegroup_netif+0x9a>
 8013372:	9201      	str	r2, [sp, #4]
 8013374:	b38c      	cbz	r4, 80133da <mld6_leavegroup_netif+0x9e>
 8013376:	6861      	ldr	r1, [r4, #4]
 8013378:	9102      	str	r1, [sp, #8]
 801337a:	b384      	cbz	r4, 80133de <mld6_leavegroup_netif+0xa2>
 801337c:	68a1      	ldr	r1, [r4, #8]
 801337e:	9103      	str	r1, [sp, #12]
 8013380:	b37c      	cbz	r4, 80133e2 <mld6_leavegroup_netif+0xa6>
 8013382:	68e1      	ldr	r1, [r4, #12]
 8013384:	9104      	str	r1, [sp, #16]
    ip6_addr_assign_zone(&ip6addr, IP6_MULTICAST, netif);
 8013386:	f24c 00ff 	movw	r0, #49407	; 0xc0ff
 801338a:	4010      	ands	r0, r2
 801338c:	f248 01fe 	movw	r1, #33022	; 0x80fe
 8013390:	4288      	cmp	r0, r1
 8013392:	d00b      	beq.n	80133ac <mld6_leavegroup_netif+0x70>
 8013394:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8013398:	0412      	lsls	r2, r2, #16
 801339a:	0c12      	lsrs	r2, r2, #16
 801339c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80133a0:	428a      	cmp	r2, r1
 80133a2:	d003      	beq.n	80133ac <mld6_leavegroup_netif+0x70>
 80133a4:	f240 21ff 	movw	r1, #767	; 0x2ff
 80133a8:	428a      	cmp	r2, r1
 80133aa:	d103      	bne.n	80133b4 <mld6_leavegroup_netif+0x78>
 80133ac:	f895 30e2 	ldrb.w	r3, [r5, #226]	; 0xe2
 80133b0:	3301      	adds	r3, #1
 80133b2:	b2db      	uxtb	r3, r3
 80133b4:	f88d 3014 	strb.w	r3, [sp, #20]
    groupaddr = &ip6addr;
 80133b8:	ac01      	add	r4, sp, #4
  group = mld6_lookfor_group(netif, groupaddr);
 80133ba:	4621      	mov	r1, r4
 80133bc:	4628      	mov	r0, r5
 80133be:	f7ff fec5 	bl	801314c <mld6_lookfor_group>
  if (group != NULL) {
 80133c2:	4606      	mov	r6, r0
 80133c4:	b338      	cbz	r0, 8013416 <mld6_leavegroup_netif+0xda>
    if (group->use <= 1) {
 80133c6:	7f03      	ldrb	r3, [r0, #28]
 80133c8:	2b01      	cmp	r3, #1
 80133ca:	d90c      	bls.n	80133e6 <mld6_leavegroup_netif+0xaa>
      group->use--;
 80133cc:	3b01      	subs	r3, #1
 80133ce:	7703      	strb	r3, [r0, #28]
    return ERR_OK;
 80133d0:	2000      	movs	r0, #0
}
 80133d2:	b006      	add	sp, #24
 80133d4:	bd70      	pop	{r4, r5, r6, pc}
    ip6_addr_set(&ip6addr, groupaddr);
 80133d6:	2200      	movs	r2, #0
 80133d8:	e7cb      	b.n	8013372 <mld6_leavegroup_netif+0x36>
 80133da:	2100      	movs	r1, #0
 80133dc:	e7cc      	b.n	8013378 <mld6_leavegroup_netif+0x3c>
 80133de:	2100      	movs	r1, #0
 80133e0:	e7cd      	b.n	801337e <mld6_leavegroup_netif+0x42>
 80133e2:	2100      	movs	r1, #0
 80133e4:	e7ce      	b.n	8013384 <mld6_leavegroup_netif+0x48>
      mld6_remove_group(netif, group);
 80133e6:	4601      	mov	r1, r0
 80133e8:	4628      	mov	r0, r5
 80133ea:	f7ff fde1 	bl	8012fb0 <mld6_remove_group>
      if (group->last_reporter_flag) {
 80133ee:	7e33      	ldrb	r3, [r6, #24]
 80133f0:	b95b      	cbnz	r3, 801340a <mld6_leavegroup_netif+0xce>
      if (netif->mld_mac_filter != NULL) {
 80133f2:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
 80133f6:	b11b      	cbz	r3, 8013400 <mld6_leavegroup_netif+0xc4>
        netif->mld_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
 80133f8:	2200      	movs	r2, #0
 80133fa:	4621      	mov	r1, r4
 80133fc:	4628      	mov	r0, r5
 80133fe:	4798      	blx	r3
      memp_free(MEMP_MLD6_GROUP, group);
 8013400:	4631      	mov	r1, r6
 8013402:	200a      	movs	r0, #10
 8013404:	f7f4 f9d0 	bl	80077a8 <memp_free>
 8013408:	e7e2      	b.n	80133d0 <mld6_leavegroup_netif+0x94>
        mld6_send(netif, group, ICMP6_TYPE_MLD);
 801340a:	2284      	movs	r2, #132	; 0x84
 801340c:	4631      	mov	r1, r6
 801340e:	4628      	mov	r0, r5
 8013410:	f7ff fe36 	bl	8013080 <mld6_send>
 8013414:	e7ed      	b.n	80133f2 <mld6_leavegroup_netif+0xb6>
  return ERR_VAL;
 8013416:	f06f 0005 	mvn.w	r0, #5
 801341a:	e7da      	b.n	80133d2 <mld6_leavegroup_netif+0x96>

0801341c <mld6_tmr>:
{
 801341c:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 801341e:	4b0f      	ldr	r3, [pc, #60]	; (801345c <mld6_tmr+0x40>)
 8013420:	681d      	ldr	r5, [r3, #0]
 8013422:	e015      	b.n	8013450 <mld6_tmr+0x34>
      group = group->next;
 8013424:	6824      	ldr	r4, [r4, #0]
    while (group != NULL) {
 8013426:	b194      	cbz	r4, 801344e <mld6_tmr+0x32>
      if (group->timer > 0) {
 8013428:	8b63      	ldrh	r3, [r4, #26]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d0fa      	beq.n	8013424 <mld6_tmr+0x8>
        group->timer--;
 801342e:	3b01      	subs	r3, #1
 8013430:	b29b      	uxth	r3, r3
 8013432:	8363      	strh	r3, [r4, #26]
        if (group->timer == 0) {
 8013434:	2b00      	cmp	r3, #0
 8013436:	d1f5      	bne.n	8013424 <mld6_tmr+0x8>
          if (group->group_state == MLD6_GROUP_DELAYING_MEMBER) {
 8013438:	7e63      	ldrb	r3, [r4, #25]
 801343a:	2b01      	cmp	r3, #1
 801343c:	d1f2      	bne.n	8013424 <mld6_tmr+0x8>
            mld6_send(netif, group, ICMP6_TYPE_MLR);
 801343e:	2283      	movs	r2, #131	; 0x83
 8013440:	4621      	mov	r1, r4
 8013442:	4628      	mov	r0, r5
 8013444:	f7ff fe1c 	bl	8013080 <mld6_send>
            group->group_state = MLD6_GROUP_IDLE_MEMBER;
 8013448:	2302      	movs	r3, #2
 801344a:	7663      	strb	r3, [r4, #25]
 801344c:	e7ea      	b.n	8013424 <mld6_tmr+0x8>
  NETIF_FOREACH(netif) {
 801344e:	682d      	ldr	r5, [r5, #0]
 8013450:	b115      	cbz	r5, 8013458 <mld6_tmr+0x3c>
    struct mld_group *group = netif_mld6_data(netif);
 8013452:	f8d5 40d0 	ldr.w	r4, [r5, #208]	; 0xd0
    while (group != NULL) {
 8013456:	e7e6      	b.n	8013426 <mld6_tmr+0xa>
}
 8013458:	bd38      	pop	{r3, r4, r5, pc}
 801345a:	bf00      	nop
 801345c:	20007f9c 	.word	0x20007f9c

08013460 <nd6_find_neighbor_cache_entry>:
 * @return The neighbor cache entry index that matched, -1 if no
 * entry is found
 */
static s8_t
nd6_find_neighbor_cache_entry(const ip6_addr_t *ip6addr)
{
 8013460:	b430      	push	{r4, r5}
 8013462:	4604      	mov	r4, r0
  s8_t i;
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8013464:	2000      	movs	r0, #0
 8013466:	e001      	b.n	801346c <nd6_find_neighbor_cache_entry+0xc>
 8013468:	3001      	adds	r0, #1
 801346a:	b240      	sxtb	r0, r0
 801346c:	2809      	cmp	r0, #9
 801346e:	dc25      	bgt.n	80134bc <nd6_find_neighbor_cache_entry+0x5c>
    if (ip6_addr_cmp(ip6addr, &(neighbor_cache[i].next_hop_address))) {
 8013470:	6822      	ldr	r2, [r4, #0]
 8013472:	232c      	movs	r3, #44	; 0x2c
 8013474:	fb03 f300 	mul.w	r3, r3, r0
 8013478:	4912      	ldr	r1, [pc, #72]	; (80134c4 <nd6_find_neighbor_cache_entry+0x64>)
 801347a:	58cb      	ldr	r3, [r1, r3]
 801347c:	429a      	cmp	r2, r3
 801347e:	d1f3      	bne.n	8013468 <nd6_find_neighbor_cache_entry+0x8>
 8013480:	6862      	ldr	r2, [r4, #4]
 8013482:	232c      	movs	r3, #44	; 0x2c
 8013484:	fb03 1300 	mla	r3, r3, r0, r1
 8013488:	685b      	ldr	r3, [r3, #4]
 801348a:	429a      	cmp	r2, r3
 801348c:	d1ec      	bne.n	8013468 <nd6_find_neighbor_cache_entry+0x8>
 801348e:	68a2      	ldr	r2, [r4, #8]
 8013490:	232c      	movs	r3, #44	; 0x2c
 8013492:	fb03 1300 	mla	r3, r3, r0, r1
 8013496:	689b      	ldr	r3, [r3, #8]
 8013498:	429a      	cmp	r2, r3
 801349a:	d1e5      	bne.n	8013468 <nd6_find_neighbor_cache_entry+0x8>
 801349c:	68e2      	ldr	r2, [r4, #12]
 801349e:	232c      	movs	r3, #44	; 0x2c
 80134a0:	fb03 1300 	mla	r3, r3, r0, r1
 80134a4:	68db      	ldr	r3, [r3, #12]
 80134a6:	429a      	cmp	r2, r3
 80134a8:	d1de      	bne.n	8013468 <nd6_find_neighbor_cache_entry+0x8>
 80134aa:	7c22      	ldrb	r2, [r4, #16]
 80134ac:	460b      	mov	r3, r1
 80134ae:	212c      	movs	r1, #44	; 0x2c
 80134b0:	fb01 3500 	mla	r5, r1, r0, r3
 80134b4:	7c2b      	ldrb	r3, [r5, #16]
 80134b6:	429a      	cmp	r2, r3
 80134b8:	d1d6      	bne.n	8013468 <nd6_find_neighbor_cache_entry+0x8>
 80134ba:	e001      	b.n	80134c0 <nd6_find_neighbor_cache_entry+0x60>
      return i;
    }
  }
  return -1;
 80134bc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80134c0:	bc30      	pop	{r4, r5}
 80134c2:	4770      	bx	lr
 80134c4:	20007ffc 	.word	0x20007ffc

080134c8 <nd6_find_destination_cache_entry>:
 * @return The destination cache entry index that matched, -1 if no
 * entry is found
 */
static s16_t
nd6_find_destination_cache_entry(const ip6_addr_t *ip6addr)
{
 80134c8:	b430      	push	{r4, r5}
 80134ca:	4604      	mov	r4, r0
  s16_t i;

  IP6_ADDR_ZONECHECK(ip6addr);

  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 80134cc:	2000      	movs	r0, #0
 80134ce:	e001      	b.n	80134d4 <nd6_find_destination_cache_entry+0xc>
 80134d0:	3001      	adds	r0, #1
 80134d2:	b200      	sxth	r0, r0
 80134d4:	2809      	cmp	r0, #9
 80134d6:	dc2a      	bgt.n	801352e <nd6_find_destination_cache_entry+0x66>
    if (ip6_addr_cmp(ip6addr, &(destination_cache[i].destination_addr))) {
 80134d8:	6822      	ldr	r2, [r4, #0]
 80134da:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80134de:	011b      	lsls	r3, r3, #4
 80134e0:	4915      	ldr	r1, [pc, #84]	; (8013538 <nd6_find_destination_cache_entry+0x70>)
 80134e2:	58cb      	ldr	r3, [r1, r3]
 80134e4:	429a      	cmp	r2, r3
 80134e6:	d1f3      	bne.n	80134d0 <nd6_find_destination_cache_entry+0x8>
 80134e8:	6861      	ldr	r1, [r4, #4]
 80134ea:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80134ee:	4a12      	ldr	r2, [pc, #72]	; (8013538 <nd6_find_destination_cache_entry+0x70>)
 80134f0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80134f4:	685b      	ldr	r3, [r3, #4]
 80134f6:	4299      	cmp	r1, r3
 80134f8:	d1ea      	bne.n	80134d0 <nd6_find_destination_cache_entry+0x8>
 80134fa:	68a1      	ldr	r1, [r4, #8]
 80134fc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8013500:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8013504:	689b      	ldr	r3, [r3, #8]
 8013506:	4299      	cmp	r1, r3
 8013508:	d1e2      	bne.n	80134d0 <nd6_find_destination_cache_entry+0x8>
 801350a:	68e1      	ldr	r1, [r4, #12]
 801350c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8013510:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8013514:	68db      	ldr	r3, [r3, #12]
 8013516:	4299      	cmp	r1, r3
 8013518:	d1da      	bne.n	80134d0 <nd6_find_destination_cache_entry+0x8>
 801351a:	7c22      	ldrb	r2, [r4, #16]
 801351c:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8013520:	4b05      	ldr	r3, [pc, #20]	; (8013538 <nd6_find_destination_cache_entry+0x70>)
 8013522:	eb03 1505 	add.w	r5, r3, r5, lsl #4
 8013526:	7c2b      	ldrb	r3, [r5, #16]
 8013528:	429a      	cmp	r2, r3
 801352a:	d1d1      	bne.n	80134d0 <nd6_find_destination_cache_entry+0x8>
 801352c:	e001      	b.n	8013532 <nd6_find_destination_cache_entry+0x6a>
      return i;
    }
  }
  return -1;
 801352e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013532:	bc30      	pop	{r4, r5}
 8013534:	4770      	bx	lr
 8013536:	bf00      	nop
 8013538:	20008240 	.word	0x20008240

0801353c <nd6_new_destination_cache_entry>:
{
  s16_t i, j;
  u32_t age;

  /* Find an empty entry. */
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 801353c:	2000      	movs	r0, #0
 801353e:	e001      	b.n	8013544 <nd6_new_destination_cache_entry+0x8>
 8013540:	3001      	adds	r0, #1
 8013542:	b200      	sxth	r0, r0
 8013544:	2809      	cmp	r0, #9
 8013546:	dc19      	bgt.n	801357c <nd6_new_destination_cache_entry+0x40>
    if (ip6_addr_isany(&(destination_cache[i].destination_addr))) {
 8013548:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 801354c:	0113      	lsls	r3, r2, #4
 801354e:	4a14      	ldr	r2, [pc, #80]	; (80135a0 <nd6_new_destination_cache_entry+0x64>)
 8013550:	58d3      	ldr	r3, [r2, r3]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d1f4      	bne.n	8013540 <nd6_new_destination_cache_entry+0x4>
 8013556:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801355a:	011a      	lsls	r2, r3, #4
 801355c:	4b10      	ldr	r3, [pc, #64]	; (80135a0 <nd6_new_destination_cache_entry+0x64>)
 801355e:	4413      	add	r3, r2
 8013560:	685b      	ldr	r3, [r3, #4]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d1ec      	bne.n	8013540 <nd6_new_destination_cache_entry+0x4>
 8013566:	4b0e      	ldr	r3, [pc, #56]	; (80135a0 <nd6_new_destination_cache_entry+0x64>)
 8013568:	4413      	add	r3, r2
 801356a:	689b      	ldr	r3, [r3, #8]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d1e7      	bne.n	8013540 <nd6_new_destination_cache_entry+0x4>
 8013570:	4b0b      	ldr	r3, [pc, #44]	; (80135a0 <nd6_new_destination_cache_entry+0x64>)
 8013572:	4413      	add	r3, r2
 8013574:	68db      	ldr	r3, [r3, #12]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d1e2      	bne.n	8013540 <nd6_new_destination_cache_entry+0x4>
      j = i;
    }
  }

  return j;
}
 801357a:	4770      	bx	lr
  j = LWIP_ND6_NUM_DESTINATIONS - 1;
 801357c:	2009      	movs	r0, #9
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 801357e:	2300      	movs	r3, #0
 8013580:	e001      	b.n	8013586 <nd6_new_destination_cache_entry+0x4a>
 8013582:	3301      	adds	r3, #1
 8013584:	b21b      	sxth	r3, r3
 8013586:	2b09      	cmp	r3, #9
 8013588:	dcf7      	bgt.n	801357a <nd6_new_destination_cache_entry+0x3e>
    if (destination_cache[i].age > age) {
 801358a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801358e:	0111      	lsls	r1, r2, #4
 8013590:	4a03      	ldr	r2, [pc, #12]	; (80135a0 <nd6_new_destination_cache_entry+0x64>)
 8013592:	440a      	add	r2, r1
 8013594:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8013596:	2a00      	cmp	r2, #0
 8013598:	d0f3      	beq.n	8013582 <nd6_new_destination_cache_entry+0x46>
      j = i;
 801359a:	4618      	mov	r0, r3
 801359c:	e7f1      	b.n	8013582 <nd6_new_destination_cache_entry+0x46>
 801359e:	bf00      	nop
 80135a0:	20008240 	.word	0x20008240

080135a4 <nd6_is_prefix_in_netif>:
 * @param ip6addr the IPv6 address to match
 * @return 1 if the address is on-link, 0 otherwise
 */
static int
nd6_is_prefix_in_netif(const ip6_addr_t *ip6addr, struct netif *netif)
{
 80135a4:	b470      	push	{r4, r5, r6}
  s8_t i;

  /* Check to see if the address matches an on-link prefix. */
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
 80135a6:	2300      	movs	r3, #0
 80135a8:	e001      	b.n	80135ae <nd6_is_prefix_in_netif+0xa>
 80135aa:	3301      	adds	r3, #1
 80135ac:	b25b      	sxtb	r3, r3
 80135ae:	2b04      	cmp	r3, #4
 80135b0:	dc29      	bgt.n	8013606 <nd6_is_prefix_in_netif+0x62>
    if ((prefix_list[i].netif == netif) &&
 80135b2:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80135b6:	4c2e      	ldr	r4, [pc, #184]	; (8013670 <nd6_is_prefix_in_netif+0xcc>)
 80135b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80135bc:	6952      	ldr	r2, [r2, #20]
 80135be:	428a      	cmp	r2, r1
 80135c0:	d1f3      	bne.n	80135aa <nd6_is_prefix_in_netif+0x6>
        (prefix_list[i].invalidation_timer > 0) &&
 80135c2:	ebc3 04c3 	rsb	r4, r3, r3, lsl #3
 80135c6:	4d2a      	ldr	r5, [pc, #168]	; (8013670 <nd6_is_prefix_in_netif+0xcc>)
 80135c8:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 80135cc:	69a2      	ldr	r2, [r4, #24]
    if ((prefix_list[i].netif == netif) &&
 80135ce:	2a00      	cmp	r2, #0
 80135d0:	d0eb      	beq.n	80135aa <nd6_is_prefix_in_netif+0x6>
        ip6_addr_netcmp(ip6addr, &(prefix_list[i].prefix))) {
 80135d2:	6804      	ldr	r4, [r0, #0]
 80135d4:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80135d8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
        (prefix_list[i].invalidation_timer > 0) &&
 80135dc:	4294      	cmp	r4, r2
 80135de:	d1e4      	bne.n	80135aa <nd6_is_prefix_in_netif+0x6>
        ip6_addr_netcmp(ip6addr, &(prefix_list[i].prefix))) {
 80135e0:	6845      	ldr	r5, [r0, #4]
 80135e2:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80135e6:	4c22      	ldr	r4, [pc, #136]	; (8013670 <nd6_is_prefix_in_netif+0xcc>)
 80135e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80135ec:	6852      	ldr	r2, [r2, #4]
 80135ee:	4295      	cmp	r5, r2
 80135f0:	d1db      	bne.n	80135aa <nd6_is_prefix_in_netif+0x6>
 80135f2:	7c05      	ldrb	r5, [r0, #16]
 80135f4:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80135f8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80135fc:	7c12      	ldrb	r2, [r2, #16]
 80135fe:	4295      	cmp	r5, r2
 8013600:	d1d3      	bne.n	80135aa <nd6_is_prefix_in_netif+0x6>
      return 1;
 8013602:	2001      	movs	r0, #1
 8013604:	e031      	b.n	801366a <nd6_is_prefix_in_netif+0xc6>
  }
  /* Check to see if address prefix matches a manually configured (= static)
   * address. Static addresses have an implied /64 subnet assignment. Dynamic
   * addresses (from autoconfiguration) have no implied subnet assignment, and
   * are thus effectively /128 assignments. See RFC 5942 for more on this. */
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8013606:	2300      	movs	r3, #0
 8013608:	e009      	b.n	801361e <nd6_is_prefix_in_netif+0x7a>
    if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
        netif_ip6_addr_isstatic(netif, i) &&
        ip6_addr_netcmp(ip6addr, netif_ip6_addr(netif, i))) {
 801360a:	6805      	ldr	r5, [r0, #0]
 801360c:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8013610:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8013614:	6ce4      	ldr	r4, [r4, #76]	; 0x4c
        netif_ip6_addr_isstatic(netif, i) &&
 8013616:	42a5      	cmp	r5, r4
 8013618:	d013      	beq.n	8013642 <nd6_is_prefix_in_netif+0x9e>
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 801361a:	3301      	adds	r3, #1
 801361c:	b25b      	sxtb	r3, r3
 801361e:	2b02      	cmp	r3, #2
 8013620:	dc22      	bgt.n	8013668 <nd6_is_prefix_in_netif+0xc4>
    if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8013622:	461a      	mov	r2, r3
 8013624:	18cc      	adds	r4, r1, r3
 8013626:	f894 4094 	ldrb.w	r4, [r4, #148]	; 0x94
 801362a:	f014 0f10 	tst.w	r4, #16
 801362e:	d0f4      	beq.n	801361a <nd6_is_prefix_in_netif+0x76>
 8013630:	2900      	cmp	r1, #0
 8013632:	d0ea      	beq.n	801360a <nd6_is_prefix_in_netif+0x66>
        netif_ip6_addr_isstatic(netif, i) &&
 8013634:	f103 0426 	add.w	r4, r3, #38	; 0x26
 8013638:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 801363c:	2c00      	cmp	r4, #0
 801363e:	d1ec      	bne.n	801361a <nd6_is_prefix_in_netif+0x76>
 8013640:	e7e3      	b.n	801360a <nd6_is_prefix_in_netif+0x66>
        ip6_addr_netcmp(ip6addr, netif_ip6_addr(netif, i))) {
 8013642:	6845      	ldr	r5, [r0, #4]
 8013644:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8013648:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801364c:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801364e:	42a5      	cmp	r5, r4
 8013650:	d1e3      	bne.n	801361a <nd6_is_prefix_in_netif+0x76>
 8013652:	7c04      	ldrb	r4, [r0, #16]
 8013654:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013658:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801365c:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
 8013660:	4294      	cmp	r4, r2
 8013662:	d1da      	bne.n	801361a <nd6_is_prefix_in_netif+0x76>
      return 1;
 8013664:	2001      	movs	r0, #1
 8013666:	e000      	b.n	801366a <nd6_is_prefix_in_netif+0xc6>
    }
  }
  return 0;
 8013668:	2000      	movs	r0, #0
}
 801366a:	bc70      	pop	{r4, r5, r6}
 801366c:	4770      	bx	lr
 801366e:	bf00      	nop
 8013670:	200081b4 	.word	0x200081b4

08013674 <nd6_select_router>:
 * @return the default router entry index, or -1 if no suitable
 *         router is found
 */
static s8_t
nd6_select_router(const ip6_addr_t *ip6addr, struct netif *netif)
{
 8013674:	b410      	push	{r4}
  LWIP_UNUSED_ARG(ip6addr); /* @todo match preferred routes!! (must implement ND6_OPTION_TYPE_ROUTE_INFO) */

  /* @todo: implement default router preference */

  /* Look for valid routers. A reachable router is preferred. */
  valid_router = -1;
 8013676:	f04f 30ff 	mov.w	r0, #4294967295
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 801367a:	2300      	movs	r3, #0
 801367c:	e00f      	b.n	801369e <nd6_select_router+0x2a>
    /* Is the router netif both set and apppropriate? */
    if (default_router_list[i].neighbor_entry != NULL) {
      router_netif = default_router_list[i].neighbor_entry->netif;
      if ((router_netif != NULL) && (netif != NULL ? netif == router_netif :
          (netif_is_up(router_netif) && netif_is_link_up(router_netif)))) {
 801367e:	f892 20df 	ldrb.w	r2, [r2, #223]	; 0xdf
 8013682:	f012 0f01 	tst.w	r2, #1
 8013686:	d004      	beq.n	8013692 <nd6_select_router+0x1e>
 8013688:	f012 0f04 	tst.w	r2, #4
 801368c:	d103      	bne.n	8013696 <nd6_select_router+0x22>
 801368e:	2200      	movs	r2, #0
 8013690:	e017      	b.n	80136c2 <nd6_select_router+0x4e>
 8013692:	2200      	movs	r2, #0
 8013694:	e015      	b.n	80136c2 <nd6_select_router+0x4e>
 8013696:	2201      	movs	r2, #1
 8013698:	e013      	b.n	80136c2 <nd6_select_router+0x4e>
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 801369a:	3301      	adds	r3, #1
 801369c:	b25b      	sxtb	r3, r3
 801369e:	2b02      	cmp	r3, #2
 80136a0:	dc1b      	bgt.n	80136da <nd6_select_router+0x66>
    if (default_router_list[i].neighbor_entry != NULL) {
 80136a2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80136a6:	4c2e      	ldr	r4, [pc, #184]	; (8013760 <nd6_select_router+0xec>)
 80136a8:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 80136ac:	2c00      	cmp	r4, #0
 80136ae:	d0f4      	beq.n	801369a <nd6_select_router+0x26>
      router_netif = default_router_list[i].neighbor_entry->netif;
 80136b0:	6962      	ldr	r2, [r4, #20]
      if ((router_netif != NULL) && (netif != NULL ? netif == router_netif :
 80136b2:	2a00      	cmp	r2, #0
 80136b4:	d0f1      	beq.n	801369a <nd6_select_router+0x26>
 80136b6:	2900      	cmp	r1, #0
 80136b8:	d0e1      	beq.n	801367e <nd6_select_router+0xa>
 80136ba:	4291      	cmp	r1, r2
 80136bc:	bf14      	ite	ne
 80136be:	2200      	movne	r2, #0
 80136c0:	2201      	moveq	r2, #1
 80136c2:	2a00      	cmp	r2, #0
 80136c4:	d0e9      	beq.n	801369a <nd6_select_router+0x26>
        /* Is the router valid, i.e., reachable or probably reachable as per
         * RFC 4861 Sec. 6.3.6? Note that we will never return a router that
         * has no neighbor cache entry, due to the netif association tests. */
        if (default_router_list[i].neighbor_entry->state != ND6_INCOMPLETE) {
 80136c6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80136ca:	2a01      	cmp	r2, #1
 80136cc:	d0e5      	beq.n	801369a <nd6_select_router+0x26>
          /* Is the router known to be reachable? */
          if (default_router_list[i].neighbor_entry->state == ND6_REACHABLE) {
 80136ce:	2a02      	cmp	r2, #2
 80136d0:	d043      	beq.n	801375a <nd6_select_router+0xe6>
            return i; /* valid and reachable - done! */
          } else if (valid_router < 0) {
 80136d2:	2800      	cmp	r0, #0
 80136d4:	dae1      	bge.n	801369a <nd6_select_router+0x26>
            valid_router = i; /* valid but not known to be reachable */
 80136d6:	4618      	mov	r0, r3
 80136d8:	e7df      	b.n	801369a <nd6_select_router+0x26>
          }
        }
      }
    }
  }
  if (valid_router >= 0) {
 80136da:	2800      	cmp	r0, #0
 80136dc:	da3a      	bge.n	8013754 <nd6_select_router+0xe0>

  /* Look for any router for which we have any information at all. */
  /* last_router is used for round-robin selection of incomplete routers, as
   * recommended in RFC 4861 Sec. 6.3.6 point (2). Advance only when picking a
   * route, to select the same router as next-hop target in the common case. */
  if ((netif == NULL) && (++last_router >= LWIP_ND6_NUM_ROUTERS)) {
 80136de:	b121      	cbz	r1, 80136ea <nd6_select_router+0x76>
    last_router = 0;
  }
  i = last_router;
 80136e0:	4b20      	ldr	r3, [pc, #128]	; (8013764 <nd6_select_router+0xf0>)
 80136e2:	f993 0000 	ldrsb.w	r0, [r3]
  for (j = 0; j < LWIP_ND6_NUM_ROUTERS; j++) {
 80136e6:	2300      	movs	r3, #0
 80136e8:	e01d      	b.n	8013726 <nd6_select_router+0xb2>
  if ((netif == NULL) && (++last_router >= LWIP_ND6_NUM_ROUTERS)) {
 80136ea:	4a1e      	ldr	r2, [pc, #120]	; (8013764 <nd6_select_router+0xf0>)
 80136ec:	7813      	ldrb	r3, [r2, #0]
 80136ee:	3301      	adds	r3, #1
 80136f0:	b25b      	sxtb	r3, r3
 80136f2:	7013      	strb	r3, [r2, #0]
 80136f4:	2b02      	cmp	r3, #2
 80136f6:	ddf3      	ble.n	80136e0 <nd6_select_router+0x6c>
    last_router = 0;
 80136f8:	4613      	mov	r3, r2
 80136fa:	2200      	movs	r2, #0
 80136fc:	701a      	strb	r2, [r3, #0]
 80136fe:	e7ef      	b.n	80136e0 <nd6_select_router+0x6c>
    if (default_router_list[i].neighbor_entry != NULL) {
      router_netif = default_router_list[i].neighbor_entry->netif;
      if ((router_netif != NULL) && (netif != NULL ? netif == router_netif :
          (netif_is_up(router_netif) && netif_is_link_up(router_netif)))) {
 8013700:	f892 20df 	ldrb.w	r2, [r2, #223]	; 0xdf
 8013704:	f012 0f01 	tst.w	r2, #1
 8013708:	d004      	beq.n	8013714 <nd6_select_router+0xa0>
 801370a:	f012 0f04 	tst.w	r2, #4
 801370e:	d11d      	bne.n	801374c <nd6_select_router+0xd8>
 8013710:	2200      	movs	r2, #0
 8013712:	e000      	b.n	8013716 <nd6_select_router+0xa2>
 8013714:	2200      	movs	r2, #0
      if ((router_netif != NULL) && (netif != NULL ? netif == router_netif :
 8013716:	b9ea      	cbnz	r2, 8013754 <nd6_select_router+0xe0>
        return i;
      }
    }
    if (++i >= LWIP_ND6_NUM_ROUTERS) {
 8013718:	3001      	adds	r0, #1
 801371a:	b240      	sxtb	r0, r0
 801371c:	2802      	cmp	r0, #2
 801371e:	dd00      	ble.n	8013722 <nd6_select_router+0xae>
      i = 0;
 8013720:	2000      	movs	r0, #0
  for (j = 0; j < LWIP_ND6_NUM_ROUTERS; j++) {
 8013722:	3301      	adds	r3, #1
 8013724:	b25b      	sxtb	r3, r3
 8013726:	2b02      	cmp	r3, #2
 8013728:	dc12      	bgt.n	8013750 <nd6_select_router+0xdc>
    if (default_router_list[i].neighbor_entry != NULL) {
 801372a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 801372e:	4c0c      	ldr	r4, [pc, #48]	; (8013760 <nd6_select_router+0xec>)
 8013730:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013734:	2a00      	cmp	r2, #0
 8013736:	d0ef      	beq.n	8013718 <nd6_select_router+0xa4>
      router_netif = default_router_list[i].neighbor_entry->netif;
 8013738:	6952      	ldr	r2, [r2, #20]
      if ((router_netif != NULL) && (netif != NULL ? netif == router_netif :
 801373a:	2a00      	cmp	r2, #0
 801373c:	d0ec      	beq.n	8013718 <nd6_select_router+0xa4>
 801373e:	2900      	cmp	r1, #0
 8013740:	d0de      	beq.n	8013700 <nd6_select_router+0x8c>
 8013742:	4291      	cmp	r1, r2
 8013744:	bf14      	ite	ne
 8013746:	2200      	movne	r2, #0
 8013748:	2201      	moveq	r2, #1
 801374a:	e7e4      	b.n	8013716 <nd6_select_router+0xa2>
          (netif_is_up(router_netif) && netif_is_link_up(router_netif)))) {
 801374c:	2201      	movs	r2, #1
 801374e:	e7e2      	b.n	8013716 <nd6_select_router+0xa2>
    }
  }

  /* no suitable router found. */
  return -1;
 8013750:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013754:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013758:	4770      	bx	lr
            return i; /* valid and reachable - done! */
 801375a:	4618      	mov	r0, r3
 801375c:	e7fa      	b.n	8013754 <nd6_select_router+0xe0>
 801375e:	bf00      	nop
 8013760:	20008420 	.word	0x20008420
 8013764:	20000bf0 	.word	0x20000bf0

08013768 <nd6_get_router>:
 * @param netif the netif on which the router is found, if known
 * @return the index of the router entry, or -1 if not found
 */
static s8_t
nd6_get_router(const ip6_addr_t *router_addr, struct netif *netif)
{
 8013768:	b430      	push	{r4, r5}
 801376a:	4605      	mov	r5, r0
  s8_t i;

  IP6_ADDR_ZONECHECK_NETIF(router_addr, netif);

  /* Look for router. */
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 801376c:	2000      	movs	r0, #0
 801376e:	e005      	b.n	801377c <nd6_get_router+0x14>
    if ((default_router_list[i].neighbor_entry != NULL) &&
        ((netif != NULL) ? netif == default_router_list[i].neighbor_entry->netif : 1) &&
        ip6_addr_cmp(router_addr, &(default_router_list[i].neighbor_entry->next_hop_address))) {
 8013770:	682c      	ldr	r4, [r5, #0]
 8013772:	681a      	ldr	r2, [r3, #0]
        ((netif != NULL) ? netif == default_router_list[i].neighbor_entry->netif : 1) &&
 8013774:	4294      	cmp	r4, r2
 8013776:	d010      	beq.n	801379a <nd6_get_router+0x32>
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 8013778:	3001      	adds	r0, #1
 801377a:	b240      	sxtb	r0, r0
 801377c:	2802      	cmp	r0, #2
 801377e:	dc1d      	bgt.n	80137bc <nd6_get_router+0x54>
    if ((default_router_list[i].neighbor_entry != NULL) &&
 8013780:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8013784:	4a0f      	ldr	r2, [pc, #60]	; (80137c4 <nd6_get_router+0x5c>)
 8013786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d0f4      	beq.n	8013778 <nd6_get_router+0x10>
 801378e:	2900      	cmp	r1, #0
 8013790:	d0ee      	beq.n	8013770 <nd6_get_router+0x8>
        ((netif != NULL) ? netif == default_router_list[i].neighbor_entry->netif : 1) &&
 8013792:	695a      	ldr	r2, [r3, #20]
    if ((default_router_list[i].neighbor_entry != NULL) &&
 8013794:	428a      	cmp	r2, r1
 8013796:	d1ef      	bne.n	8013778 <nd6_get_router+0x10>
 8013798:	e7ea      	b.n	8013770 <nd6_get_router+0x8>
        ip6_addr_cmp(router_addr, &(default_router_list[i].neighbor_entry->next_hop_address))) {
 801379a:	686c      	ldr	r4, [r5, #4]
 801379c:	685a      	ldr	r2, [r3, #4]
 801379e:	4294      	cmp	r4, r2
 80137a0:	d1ea      	bne.n	8013778 <nd6_get_router+0x10>
 80137a2:	68ac      	ldr	r4, [r5, #8]
 80137a4:	689a      	ldr	r2, [r3, #8]
 80137a6:	4294      	cmp	r4, r2
 80137a8:	d1e6      	bne.n	8013778 <nd6_get_router+0x10>
 80137aa:	68ec      	ldr	r4, [r5, #12]
 80137ac:	68da      	ldr	r2, [r3, #12]
 80137ae:	4294      	cmp	r4, r2
 80137b0:	d1e2      	bne.n	8013778 <nd6_get_router+0x10>
 80137b2:	7c2a      	ldrb	r2, [r5, #16]
 80137b4:	7c1b      	ldrb	r3, [r3, #16]
 80137b6:	429a      	cmp	r2, r3
 80137b8:	d1de      	bne.n	8013778 <nd6_get_router+0x10>
 80137ba:	e001      	b.n	80137c0 <nd6_get_router+0x58>
      return i;
    }
  }

  /* router not found. */
  return -1;
 80137bc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80137c0:	bc30      	pop	{r4, r5}
 80137c2:	4770      	bx	lr
 80137c4:	20008420 	.word	0x20008420

080137c8 <nd6_get_onlink_prefix>:
 * @param netif the netif on which the prefix is on-link
 * @return the index on the prefix table, or -1 if not found
 */
static s8_t
nd6_get_onlink_prefix(const ip6_addr_t *prefix, struct netif *netif)
{
 80137c8:	b430      	push	{r4, r5}
 80137ca:	4604      	mov	r4, r0
  s8_t i;

  /* Look for prefix in list. */
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 80137cc:	2000      	movs	r0, #0
 80137ce:	e001      	b.n	80137d4 <nd6_get_onlink_prefix+0xc>
 80137d0:	3001      	adds	r0, #1
 80137d2:	b240      	sxtb	r0, r0
 80137d4:	2804      	cmp	r0, #4
 80137d6:	dc22      	bgt.n	801381e <nd6_get_onlink_prefix+0x56>
    if ((ip6_addr_netcmp(&(prefix_list[i].prefix), prefix)) &&
 80137d8:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80137dc:	4a12      	ldr	r2, [pc, #72]	; (8013828 <nd6_get_onlink_prefix+0x60>)
 80137de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80137e2:	6823      	ldr	r3, [r4, #0]
 80137e4:	429a      	cmp	r2, r3
 80137e6:	d1f3      	bne.n	80137d0 <nd6_get_onlink_prefix+0x8>
 80137e8:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80137ec:	4a0e      	ldr	r2, [pc, #56]	; (8013828 <nd6_get_onlink_prefix+0x60>)
 80137ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80137f2:	685a      	ldr	r2, [r3, #4]
 80137f4:	6863      	ldr	r3, [r4, #4]
 80137f6:	429a      	cmp	r2, r3
 80137f8:	d1ea      	bne.n	80137d0 <nd6_get_onlink_prefix+0x8>
 80137fa:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80137fe:	4a0a      	ldr	r2, [pc, #40]	; (8013828 <nd6_get_onlink_prefix+0x60>)
 8013800:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013804:	7c1a      	ldrb	r2, [r3, #16]
 8013806:	7c23      	ldrb	r3, [r4, #16]
 8013808:	429a      	cmp	r2, r3
 801380a:	d1e1      	bne.n	80137d0 <nd6_get_onlink_prefix+0x8>
        (prefix_list[i].netif == netif)) {
 801380c:	ebc0 05c0 	rsb	r5, r0, r0, lsl #3
 8013810:	4b05      	ldr	r3, [pc, #20]	; (8013828 <nd6_get_onlink_prefix+0x60>)
 8013812:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8013816:	696b      	ldr	r3, [r5, #20]
    if ((ip6_addr_netcmp(&(prefix_list[i].prefix), prefix)) &&
 8013818:	428b      	cmp	r3, r1
 801381a:	d1d9      	bne.n	80137d0 <nd6_get_onlink_prefix+0x8>
 801381c:	e001      	b.n	8013822 <nd6_get_onlink_prefix+0x5a>
      return i;
    }
  }

  /* Entry not available. */
  return -1;
 801381e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8013822:	bc30      	pop	{r4, r5}
 8013824:	4770      	bx	lr
 8013826:	bf00      	nop
 8013828:	200081b4 	.word	0x200081b4

0801382c <nd6_new_onlink_prefix>:
 * @param netif the netif on which the prefix is on-link
 * @return the index on the prefix table, or -1 if not created
 */
static s8_t
nd6_new_onlink_prefix(const ip6_addr_t *prefix, struct netif *netif)
{
 801382c:	b430      	push	{r4, r5}
 801382e:	4605      	mov	r5, r0
  s8_t i;

  /* Create new entry. */
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 8013830:	2000      	movs	r0, #0
 8013832:	2804      	cmp	r0, #4
 8013834:	dc48      	bgt.n	80138c8 <nd6_new_onlink_prefix+0x9c>
    if ((prefix_list[i].netif == NULL) ||
 8013836:	4604      	mov	r4, r0
 8013838:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 801383c:	4a24      	ldr	r2, [pc, #144]	; (80138d0 <nd6_new_onlink_prefix+0xa4>)
 801383e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013842:	695b      	ldr	r3, [r3, #20]
 8013844:	b143      	cbz	r3, 8013858 <nd6_new_onlink_prefix+0x2c>
        (prefix_list[i].invalidation_timer == 0)) {
 8013846:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 801384a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801384e:	699b      	ldr	r3, [r3, #24]
    if ((prefix_list[i].netif == NULL) ||
 8013850:	b113      	cbz	r3, 8013858 <nd6_new_onlink_prefix+0x2c>
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 8013852:	3001      	adds	r0, #1
 8013854:	b240      	sxtb	r0, r0
 8013856:	e7ec      	b.n	8013832 <nd6_new_onlink_prefix+0x6>
      /* Found empty prefix entry. */
      prefix_list[i].netif = netif;
 8013858:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 801385c:	4a1c      	ldr	r2, [pc, #112]	; (80138d0 <nd6_new_onlink_prefix+0xa4>)
 801385e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013862:	6159      	str	r1, [r3, #20]
      ip6_addr_set(&(prefix_list[i].prefix), prefix);
 8013864:	b335      	cbz	r5, 80138b4 <nd6_new_onlink_prefix+0x88>
 8013866:	6829      	ldr	r1, [r5, #0]
 8013868:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 801386c:	4a18      	ldr	r2, [pc, #96]	; (80138d0 <nd6_new_onlink_prefix+0xa4>)
 801386e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8013872:	b30d      	cbz	r5, 80138b8 <nd6_new_onlink_prefix+0x8c>
 8013874:	6869      	ldr	r1, [r5, #4]
 8013876:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 801387a:	4a15      	ldr	r2, [pc, #84]	; (80138d0 <nd6_new_onlink_prefix+0xa4>)
 801387c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013880:	6059      	str	r1, [r3, #4]
 8013882:	b1dd      	cbz	r5, 80138bc <nd6_new_onlink_prefix+0x90>
 8013884:	68a9      	ldr	r1, [r5, #8]
 8013886:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 801388a:	4a11      	ldr	r2, [pc, #68]	; (80138d0 <nd6_new_onlink_prefix+0xa4>)
 801388c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013890:	6099      	str	r1, [r3, #8]
 8013892:	b1ad      	cbz	r5, 80138c0 <nd6_new_onlink_prefix+0x94>
 8013894:	68e9      	ldr	r1, [r5, #12]
 8013896:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 801389a:	4a0d      	ldr	r2, [pc, #52]	; (80138d0 <nd6_new_onlink_prefix+0xa4>)
 801389c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80138a0:	60d9      	str	r1, [r3, #12]
 80138a2:	b17d      	cbz	r5, 80138c4 <nd6_new_onlink_prefix+0x98>
 80138a4:	7c2a      	ldrb	r2, [r5, #16]
 80138a6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80138aa:	4b09      	ldr	r3, [pc, #36]	; (80138d0 <nd6_new_onlink_prefix+0xa4>)
 80138ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80138b0:	7422      	strb	r2, [r4, #16]
      return i;
 80138b2:	e00b      	b.n	80138cc <nd6_new_onlink_prefix+0xa0>
      ip6_addr_set(&(prefix_list[i].prefix), prefix);
 80138b4:	2100      	movs	r1, #0
 80138b6:	e7d7      	b.n	8013868 <nd6_new_onlink_prefix+0x3c>
 80138b8:	2100      	movs	r1, #0
 80138ba:	e7dc      	b.n	8013876 <nd6_new_onlink_prefix+0x4a>
 80138bc:	2100      	movs	r1, #0
 80138be:	e7e2      	b.n	8013886 <nd6_new_onlink_prefix+0x5a>
 80138c0:	2100      	movs	r1, #0
 80138c2:	e7e8      	b.n	8013896 <nd6_new_onlink_prefix+0x6a>
 80138c4:	2200      	movs	r2, #0
 80138c6:	e7ee      	b.n	80138a6 <nd6_new_onlink_prefix+0x7a>
    }
  }

  /* Entry not available. */
  return -1;
 80138c8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80138cc:	bc30      	pop	{r4, r5}
 80138ce:	4770      	bx	lr
 80138d0:	200081b4 	.word	0x200081b4

080138d4 <nd6_send_q>:
 *
 * @param i the neighbor to send packets to
 */
static void
nd6_send_q(s8_t i)
{
 80138d4:	b530      	push	{r4, r5, lr}
 80138d6:	b087      	sub	sp, #28
 80138d8:	4605      	mov	r5, r0
  ip6_addr_t dest;
#if LWIP_ND6_QUEUEING
  struct nd6_q_entry *q;
#endif /* LWIP_ND6_QUEUEING */

  if ((i < 0) || (i >= LWIP_ND6_NUM_NEIGHBORS)) {
 80138da:	b2c3      	uxtb	r3, r0
 80138dc:	2b09      	cmp	r3, #9
 80138de:	d91d      	bls.n	801391c <nd6_send_q+0x48>
    /* free the queued IP packet */
    pbuf_free(neighbor_cache[i].q);
    neighbor_cache[i].q = NULL;
  }
#endif /* LWIP_ND6_QUEUEING */
}
 80138e0:	b007      	add	sp, #28
 80138e2:	bd30      	pop	{r4, r5, pc}
    ip6_addr_assign_zone(&dest, IP6_UNKNOWN, neighbor_cache[i].netif);
 80138e4:	4a23      	ldr	r2, [pc, #140]	; (8013974 <nd6_send_q+0xa0>)
 80138e6:	232c      	movs	r3, #44	; 0x2c
 80138e8:	fb03 2305 	mla	r3, r3, r5, r2
 80138ec:	695b      	ldr	r3, [r3, #20]
 80138ee:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 80138f2:	3301      	adds	r3, #1
 80138f4:	b2db      	uxtb	r3, r3
 80138f6:	f88d 3014 	strb.w	r3, [sp, #20]
    (neighbor_cache[i].netif)->output_ip6(neighbor_cache[i].netif, q->p, &dest);
 80138fa:	4a1e      	ldr	r2, [pc, #120]	; (8013974 <nd6_send_q+0xa0>)
 80138fc:	232c      	movs	r3, #44	; 0x2c
 80138fe:	fb03 2305 	mla	r3, r3, r5, r2
 8013902:	6958      	ldr	r0, [r3, #20]
 8013904:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8013908:	aa01      	add	r2, sp, #4
 801390a:	6861      	ldr	r1, [r4, #4]
 801390c:	4798      	blx	r3
    pbuf_free(q->p);
 801390e:	6860      	ldr	r0, [r4, #4]
 8013910:	f7f4 fbee 	bl	80080f0 <pbuf_free>
    memp_free(MEMP_ND6_QUEUE, q);
 8013914:	4621      	mov	r1, r4
 8013916:	2008      	movs	r0, #8
 8013918:	f7f3 ff46 	bl	80077a8 <memp_free>
  while (neighbor_cache[i].q != NULL) {
 801391c:	4a15      	ldr	r2, [pc, #84]	; (8013974 <nd6_send_q+0xa0>)
 801391e:	232c      	movs	r3, #44	; 0x2c
 8013920:	fb03 2305 	mla	r3, r3, r5, r2
 8013924:	6a1c      	ldr	r4, [r3, #32]
 8013926:	2c00      	cmp	r4, #0
 8013928:	d0da      	beq.n	80138e0 <nd6_send_q+0xc>
    neighbor_cache[i].q = q->next;
 801392a:	6822      	ldr	r2, [r4, #0]
 801392c:	4911      	ldr	r1, [pc, #68]	; (8013974 <nd6_send_q+0xa0>)
 801392e:	232c      	movs	r3, #44	; 0x2c
 8013930:	fb03 1305 	mla	r3, r3, r5, r1
 8013934:	621a      	str	r2, [r3, #32]
    ip6hdr = (struct ip6_hdr *)(q->p->payload);
 8013936:	6863      	ldr	r3, [r4, #4]
 8013938:	685a      	ldr	r2, [r3, #4]
    ip6_addr_copy_from_packed(dest, ip6hdr->dest);
 801393a:	6993      	ldr	r3, [r2, #24]
 801393c:	9301      	str	r3, [sp, #4]
 801393e:	69d1      	ldr	r1, [r2, #28]
 8013940:	9102      	str	r1, [sp, #8]
 8013942:	6a11      	ldr	r1, [r2, #32]
 8013944:	9103      	str	r1, [sp, #12]
 8013946:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013948:	9204      	str	r2, [sp, #16]
    ip6_addr_assign_zone(&dest, IP6_UNKNOWN, neighbor_cache[i].netif);
 801394a:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 801394e:	4019      	ands	r1, r3
 8013950:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8013954:	4291      	cmp	r1, r2
 8013956:	d0c5      	beq.n	80138e4 <nd6_send_q+0x10>
 8013958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801395c:	041b      	lsls	r3, r3, #16
 801395e:	0c1b      	lsrs	r3, r3, #16
 8013960:	f240 12ff 	movw	r2, #511	; 0x1ff
 8013964:	4293      	cmp	r3, r2
 8013966:	d0bd      	beq.n	80138e4 <nd6_send_q+0x10>
 8013968:	f240 22ff 	movw	r2, #767	; 0x2ff
 801396c:	4293      	cmp	r3, r2
 801396e:	d0b9      	beq.n	80138e4 <nd6_send_q+0x10>
 8013970:	2300      	movs	r3, #0
 8013972:	e7c0      	b.n	80138f6 <nd6_send_q+0x22>
 8013974:	20007ffc 	.word	0x20007ffc

08013978 <nd6_duplicate_addr_detected>:
{
 8013978:	b538      	push	{r3, r4, r5, lr}
 801397a:	4605      	mov	r5, r0
 801397c:	460c      	mov	r4, r1
  netif_ip6_addr_set_state(netif, addr_idx, IP6_ADDR_DUPLICATED);
 801397e:	2240      	movs	r2, #64	; 0x40
 8013980:	f7f4 f97a 	bl	8007c78 <netif_ip6_addr_set_state>
  if (addr_idx == 0) {
 8013984:	b1bc      	cbz	r4, 80139b6 <nd6_duplicate_addr_detected+0x3e>
}
 8013986:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8013988:	3401      	adds	r4, #1
 801398a:	b264      	sxtb	r4, r4
 801398c:	2c02      	cmp	r4, #2
 801398e:	dcfa      	bgt.n	8013986 <nd6_duplicate_addr_detected+0xe>
      if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i)) &&
 8013990:	4623      	mov	r3, r4
 8013992:	192a      	adds	r2, r5, r4
 8013994:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
 8013998:	2a00      	cmp	r2, #0
 801399a:	d0f5      	beq.n	8013988 <nd6_duplicate_addr_detected+0x10>
 801399c:	2d00      	cmp	r5, #0
 801399e:	d0f3      	beq.n	8013988 <nd6_duplicate_addr_detected+0x10>
          !netif_ip6_addr_isstatic(netif, i)) {
 80139a0:	3326      	adds	r3, #38	; 0x26
 80139a2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d0ee      	beq.n	8013988 <nd6_duplicate_addr_detected+0x10>
        netif_ip6_addr_set_state(netif, i, IP6_ADDR_DUPLICATED);
 80139aa:	2240      	movs	r2, #64	; 0x40
 80139ac:	4621      	mov	r1, r4
 80139ae:	4628      	mov	r0, r5
 80139b0:	f7f4 f962 	bl	8007c78 <netif_ip6_addr_set_state>
 80139b4:	e7e8      	b.n	8013988 <nd6_duplicate_addr_detected+0x10>
    for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80139b6:	2401      	movs	r4, #1
 80139b8:	e7e8      	b.n	801398c <nd6_duplicate_addr_detected+0x14>
	...

080139bc <nd6_process_autoconfig_prefix>:
{
 80139bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139c0:	4604      	mov	r4, r0
 80139c2:	460d      	mov	r5, r1
 80139c4:	4690      	mov	r8, r2
  valid_life = lwip_htonl(prefix_opt->valid_lifetime);
 80139c6:	6848      	ldr	r0, [r1, #4]
 80139c8:	f7f3 f85d 	bl	8006a86 <lwip_htonl>
 80139cc:	4606      	mov	r6, r0
  pref_life = lwip_htonl(prefix_opt->preferred_lifetime);
 80139ce:	68a8      	ldr	r0, [r5, #8]
 80139d0:	f7f3 f859 	bl	8006a86 <lwip_htonl>
  if (pref_life > valid_life || prefix_opt->prefix_length != 64) {
 80139d4:	4286      	cmp	r6, r0
 80139d6:	f0c0 80d9 	bcc.w	8013b8c <nd6_process_autoconfig_prefix+0x1d0>
 80139da:	4607      	mov	r7, r0
 80139dc:	78ab      	ldrb	r3, [r5, #2]
 80139de:	2b40      	cmp	r3, #64	; 0x40
 80139e0:	f040 80d4 	bne.w	8013b8c <nd6_process_autoconfig_prefix+0x1d0>
  for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80139e4:	2501      	movs	r5, #1
 80139e6:	e018      	b.n	8013a1a <nd6_process_autoconfig_prefix+0x5e>
      } else if (remaining_life > ND6_2HRS) {
 80139e8:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80139ec:	d94b      	bls.n	8013a86 <nd6_process_autoconfig_prefix+0xca>
        netif_ip6_addr_set_valid_life(netif, i, ND6_2HRS);
 80139ee:	f105 0326 	add.w	r3, r5, #38	; 0x26
 80139f2:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80139f6:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 80139fa:	e044      	b.n	8013a86 <nd6_process_autoconfig_prefix+0xca>
      LWIP_ASSERT("bad valid lifetime", !netif_ip6_addr_isstatic(netif, i));
 80139fc:	4b64      	ldr	r3, [pc, #400]	; (8013b90 <nd6_process_autoconfig_prefix+0x1d4>)
 80139fe:	22de      	movs	r2, #222	; 0xde
 8013a00:	4964      	ldr	r1, [pc, #400]	; (8013b94 <nd6_process_autoconfig_prefix+0x1d8>)
 8013a02:	4865      	ldr	r0, [pc, #404]	; (8013b98 <nd6_process_autoconfig_prefix+0x1dc>)
 8013a04:	f001 ffc4 	bl	8015990 <iprintf>
 8013a08:	e043      	b.n	8013a92 <nd6_process_autoconfig_prefix+0xd6>
        netif_ip6_addr_set_state(netif, i, IP6_ADDR_PREFERRED);
 8013a0a:	2230      	movs	r2, #48	; 0x30
 8013a0c:	4629      	mov	r1, r5
 8013a0e:	4620      	mov	r0, r4
 8013a10:	f7f4 f932 	bl	8007c78 <netif_ip6_addr_set_state>
 8013a14:	e041      	b.n	8013a9a <nd6_process_autoconfig_prefix+0xde>
  for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8013a16:	3501      	adds	r5, #1
 8013a18:	b26d      	sxtb	r5, r5
 8013a1a:	2d02      	cmp	r5, #2
 8013a1c:	dc43      	bgt.n	8013aa6 <nd6_process_autoconfig_prefix+0xea>
    addr_state = netif_ip6_addr_state(netif, i);
 8013a1e:	46aa      	mov	sl, r5
 8013a20:	1963      	adds	r3, r4, r5
 8013a22:	f893 9094 	ldrb.w	r9, [r3, #148]	; 0x94
    if (!ip6_addr_isinvalid(addr_state) && !netif_ip6_addr_isstatic(netif, i) &&
 8013a26:	f1b9 0f00 	cmp.w	r9, #0
 8013a2a:	d0f4      	beq.n	8013a16 <nd6_process_autoconfig_prefix+0x5a>
 8013a2c:	2c00      	cmp	r4, #0
 8013a2e:	d0f2      	beq.n	8013a16 <nd6_process_autoconfig_prefix+0x5a>
 8013a30:	f105 0326 	add.w	r3, r5, #38	; 0x26
 8013a34:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d0ec      	beq.n	8013a16 <nd6_process_autoconfig_prefix+0x5a>
        ip6_addr_netcmp(prefix_addr, netif_ip6_addr(netif, i))) {
 8013a3c:	f8d8 1000 	ldr.w	r1, [r8]
 8013a40:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8013a44:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8013a48:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    if (!ip6_addr_isinvalid(addr_state) && !netif_ip6_addr_isstatic(netif, i) &&
 8013a4a:	4291      	cmp	r1, r2
 8013a4c:	d1e3      	bne.n	8013a16 <nd6_process_autoconfig_prefix+0x5a>
        ip6_addr_netcmp(prefix_addr, netif_ip6_addr(netif, i))) {
 8013a4e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013a52:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8013a56:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8013a5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8013a5c:	4291      	cmp	r1, r2
 8013a5e:	d1da      	bne.n	8013a16 <nd6_process_autoconfig_prefix+0x5a>
 8013a60:	f898 1010 	ldrb.w	r1, [r8, #16]
 8013a64:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8013a68:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8013a6c:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
 8013a70:	4291      	cmp	r1, r2
 8013a72:	d1d0      	bne.n	8013a16 <nd6_process_autoconfig_prefix+0x5a>
      if (valid_life > ND6_2HRS || valid_life > remaining_life) {
 8013a74:	f5b6 5fe1 	cmp.w	r6, #7200	; 0x1c20
 8013a78:	d801      	bhi.n	8013a7e <nd6_process_autoconfig_prefix+0xc2>
 8013a7a:	42b3      	cmp	r3, r6
 8013a7c:	d2b4      	bcs.n	80139e8 <nd6_process_autoconfig_prefix+0x2c>
        netif_ip6_addr_set_valid_life(netif, i, valid_life);
 8013a7e:	f10a 0326 	add.w	r3, sl, #38	; 0x26
 8013a82:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
      LWIP_ASSERT("bad valid lifetime", !netif_ip6_addr_isstatic(netif, i));
 8013a86:	f10a 0326 	add.w	r3, sl, #38	; 0x26
 8013a8a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d0b4      	beq.n	80139fc <nd6_process_autoconfig_prefix+0x40>
      if (pref_life > 0 && addr_state == IP6_ADDR_DEPRECATED) {
 8013a92:	b117      	cbz	r7, 8013a9a <nd6_process_autoconfig_prefix+0xde>
 8013a94:	f1b9 0f10 	cmp.w	r9, #16
 8013a98:	d0b7      	beq.n	8013a0a <nd6_process_autoconfig_prefix+0x4e>
      netif_ip6_addr_set_pref_life(netif, i, pref_life);
 8013a9a:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 8013a9e:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 8013aa2:	6067      	str	r7, [r4, #4]
      return; /* there should be at most one matching address */
 8013aa4:	e072      	b.n	8013b8c <nd6_process_autoconfig_prefix+0x1d0>
  addr_state = netif_ip6_addr_state(netif, 0);
 8013aa6:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
  if (!netif->ip6_autoconfig_enabled || valid_life == IP6_ADDR_LIFE_STATIC ||
 8013aaa:	f894 30e3 	ldrb.w	r3, [r4, #227]	; 0xe3
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d06c      	beq.n	8013b8c <nd6_process_autoconfig_prefix+0x1d0>
 8013ab2:	2e00      	cmp	r6, #0
 8013ab4:	d06a      	beq.n	8013b8c <nd6_process_autoconfig_prefix+0x1d0>
 8013ab6:	2a00      	cmp	r2, #0
 8013ab8:	d068      	beq.n	8013b8c <nd6_process_autoconfig_prefix+0x1d0>
      ip6_addr_isinvalid(addr_state) || ip6_addr_isduplicated(addr_state)) {
 8013aba:	2a40      	cmp	r2, #64	; 0x40
 8013abc:	d066      	beq.n	8013b8c <nd6_process_autoconfig_prefix+0x1d0>
  IP6_ADDR(&ip6addr, prefix_addr->addr[0], prefix_addr->addr[1],
 8013abe:	f8d8 0000 	ldr.w	r0, [r8]
 8013ac2:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8013ac6:	f8d4 e054 	ldr.w	lr, [r4, #84]	; 0x54
 8013aca:	f8d4 8058 	ldr.w	r8, [r4, #88]	; 0x58
  ip6_addr_assign_zone(&ip6addr, IP6_UNICAST, netif);
 8013ace:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8013ad2:	4002      	ands	r2, r0
 8013ad4:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8013ad8:	429a      	cmp	r2, r3
 8013ada:	d003      	beq.n	8013ae4 <nd6_process_autoconfig_prefix+0x128>
 8013adc:	2500      	movs	r5, #0
  free_idx = 0;
 8013ade:	2100      	movs	r1, #0
  for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8013ae0:	2301      	movs	r3, #1
 8013ae2:	e008      	b.n	8013af6 <nd6_process_autoconfig_prefix+0x13a>
  ip6_addr_assign_zone(&ip6addr, IP6_UNICAST, netif);
 8013ae4:	f894 50e2 	ldrb.w	r5, [r4, #226]	; 0xe2
 8013ae8:	3501      	adds	r5, #1
 8013aea:	b2ed      	uxtb	r5, r5
 8013aec:	e7f7      	b.n	8013ade <nd6_process_autoconfig_prefix+0x122>
    } else if (free_idx == 0) {
 8013aee:	b901      	cbnz	r1, 8013af2 <nd6_process_autoconfig_prefix+0x136>
      free_idx = i;
 8013af0:	4619      	mov	r1, r3
  for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8013af2:	3301      	adds	r3, #1
 8013af4:	b25b      	sxtb	r3, r3
 8013af6:	2b02      	cmp	r3, #2
 8013af8:	dc28      	bgt.n	8013b4c <nd6_process_autoconfig_prefix+0x190>
    if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i))) {
 8013afa:	18e2      	adds	r2, r4, r3
 8013afc:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
 8013b00:	2a00      	cmp	r2, #0
 8013b02:	d0f4      	beq.n	8013aee <nd6_process_autoconfig_prefix+0x132>
      if (ip6_addr_cmp(&ip6addr, netif_ip6_addr(netif, i))) {
 8013b04:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013b08:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8013b0c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8013b0e:	4290      	cmp	r0, r2
 8013b10:	d1ef      	bne.n	8013af2 <nd6_process_autoconfig_prefix+0x136>
 8013b12:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013b16:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8013b1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8013b1c:	4594      	cmp	ip, r2
 8013b1e:	d1e8      	bne.n	8013af2 <nd6_process_autoconfig_prefix+0x136>
 8013b20:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013b24:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8013b28:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8013b2a:	4596      	cmp	lr, r2
 8013b2c:	d1e1      	bne.n	8013af2 <nd6_process_autoconfig_prefix+0x136>
 8013b2e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013b32:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8013b36:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8013b38:	4590      	cmp	r8, r2
 8013b3a:	d1da      	bne.n	8013af2 <nd6_process_autoconfig_prefix+0x136>
 8013b3c:	2218      	movs	r2, #24
 8013b3e:	fb02 4903 	mla	r9, r2, r3, r4
 8013b42:	f899 205c 	ldrb.w	r2, [r9, #92]	; 0x5c
 8013b46:	42aa      	cmp	r2, r5
 8013b48:	d1d3      	bne.n	8013af2 <nd6_process_autoconfig_prefix+0x136>
 8013b4a:	e01f      	b.n	8013b8c <nd6_process_autoconfig_prefix+0x1d0>
  if (free_idx == 0) {
 8013b4c:	b1f1      	cbz	r1, 8013b8c <nd6_process_autoconfig_prefix+0x1d0>
  ip_addr_copy_from_ip6(netif->ip6_addr[free_idx], ip6addr);
 8013b4e:	460a      	mov	r2, r1
 8013b50:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8013b54:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8013b58:	64d8      	str	r0, [r3, #76]	; 0x4c
 8013b5a:	f8c3 c050 	str.w	ip, [r3, #80]	; 0x50
 8013b5e:	f8c3 e054 	str.w	lr, [r3, #84]	; 0x54
 8013b62:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
 8013b66:	f883 505c 	strb.w	r5, [r3, #92]	; 0x5c
 8013b6a:	2006      	movs	r0, #6
 8013b6c:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
  netif_ip6_addr_set_valid_life(netif, free_idx, valid_life);
 8013b70:	b11c      	cbz	r4, 8013b7a <nd6_process_autoconfig_prefix+0x1be>
 8013b72:	f101 0326 	add.w	r3, r1, #38	; 0x26
 8013b76:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
  netif_ip6_addr_set_pref_life(netif, free_idx, pref_life);
 8013b7a:	b11c      	cbz	r4, 8013b84 <nd6_process_autoconfig_prefix+0x1c8>
 8013b7c:	3228      	adds	r2, #40	; 0x28
 8013b7e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013b82:	6057      	str	r7, [r2, #4]
  netif_ip6_addr_set_state(netif, free_idx, IP6_ADDR_TENTATIVE);
 8013b84:	2208      	movs	r2, #8
 8013b86:	4620      	mov	r0, r4
 8013b88:	f7f4 f876 	bl	8007c78 <netif_ip6_addr_set_state>
}
 8013b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b90:	0801a958 	.word	0x0801a958
 8013b94:	0801a98c 	.word	0x0801a98c
 8013b98:	08016bb4 	.word	0x08016bb4

08013b9c <nd6_free_q>:
{
 8013b9c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("q != NULL", q != NULL);
 8013b9e:	4604      	mov	r4, r0
 8013ba0:	b148      	cbz	r0, 8013bb6 <nd6_free_q+0x1a>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
 8013ba2:	6863      	ldr	r3, [r4, #4]
 8013ba4:	b9bb      	cbnz	r3, 8013bd6 <nd6_free_q+0x3a>
 8013ba6:	4b13      	ldr	r3, [pc, #76]	; (8013bf4 <nd6_free_q+0x58>)
 8013ba8:	f640 026f 	movw	r2, #2159	; 0x86f
 8013bac:	4912      	ldr	r1, [pc, #72]	; (8013bf8 <nd6_free_q+0x5c>)
 8013bae:	4813      	ldr	r0, [pc, #76]	; (8013bfc <nd6_free_q+0x60>)
 8013bb0:	f001 feee 	bl	8015990 <iprintf>
 8013bb4:	e00f      	b.n	8013bd6 <nd6_free_q+0x3a>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013bb6:	4b0f      	ldr	r3, [pc, #60]	; (8013bf4 <nd6_free_q+0x58>)
 8013bb8:	f640 026e 	movw	r2, #2158	; 0x86e
 8013bbc:	4910      	ldr	r1, [pc, #64]	; (8013c00 <nd6_free_q+0x64>)
 8013bbe:	480f      	ldr	r0, [pc, #60]	; (8013bfc <nd6_free_q+0x60>)
 8013bc0:	f001 fee6 	bl	8015990 <iprintf>
 8013bc4:	e7ed      	b.n	8013ba2 <nd6_free_q+0x6>
    pbuf_free(r->p);
 8013bc6:	6860      	ldr	r0, [r4, #4]
 8013bc8:	f7f4 fa92 	bl	80080f0 <pbuf_free>
    memp_free(MEMP_ND6_QUEUE, r);
 8013bcc:	4621      	mov	r1, r4
 8013bce:	2008      	movs	r0, #8
 8013bd0:	f7f3 fdea 	bl	80077a8 <memp_free>
    q = q->next;
 8013bd4:	462c      	mov	r4, r5
  while (q) {
 8013bd6:	b15c      	cbz	r4, 8013bf0 <nd6_free_q+0x54>
    q = q->next;
 8013bd8:	6825      	ldr	r5, [r4, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8013bda:	6863      	ldr	r3, [r4, #4]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d1f2      	bne.n	8013bc6 <nd6_free_q+0x2a>
 8013be0:	4b04      	ldr	r3, [pc, #16]	; (8013bf4 <nd6_free_q+0x58>)
 8013be2:	f640 0273 	movw	r2, #2163	; 0x873
 8013be6:	4907      	ldr	r1, [pc, #28]	; (8013c04 <nd6_free_q+0x68>)
 8013be8:	4804      	ldr	r0, [pc, #16]	; (8013bfc <nd6_free_q+0x60>)
 8013bea:	f001 fed1 	bl	8015990 <iprintf>
 8013bee:	e7ea      	b.n	8013bc6 <nd6_free_q+0x2a>
}
 8013bf0:	bd38      	pop	{r3, r4, r5, pc}
 8013bf2:	bf00      	nop
 8013bf4:	0801a958 	.word	0x0801a958
 8013bf8:	0801a9a0 	.word	0x0801a9a0
 8013bfc:	08016bb4 	.word	0x08016bb4
 8013c00:	0801a280 	.word	0x0801a280
 8013c04:	0801a9b0 	.word	0x0801a9b0

08013c08 <nd6_free_neighbor_cache_entry>:
  if ((i < 0) || (i >= LWIP_ND6_NUM_NEIGHBORS)) {
 8013c08:	b2c3      	uxtb	r3, r0
 8013c0a:	2b09      	cmp	r3, #9
 8013c0c:	d827      	bhi.n	8013c5e <nd6_free_neighbor_cache_entry+0x56>
{
 8013c0e:	b510      	push	{r4, lr}
 8013c10:	4604      	mov	r4, r0
  if (neighbor_cache[i].isrouter) {
 8013c12:	4a13      	ldr	r2, [pc, #76]	; (8013c60 <nd6_free_neighbor_cache_entry+0x58>)
 8013c14:	232c      	movs	r3, #44	; 0x2c
 8013c16:	fb03 2300 	mla	r3, r3, r0, r2
 8013c1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8013c1e:	b9eb      	cbnz	r3, 8013c5c <nd6_free_neighbor_cache_entry+0x54>
  if (neighbor_cache[i].q != NULL) {
 8013c20:	232c      	movs	r3, #44	; 0x2c
 8013c22:	fb03 2300 	mla	r3, r3, r0, r2
 8013c26:	6a18      	ldr	r0, [r3, #32]
 8013c28:	b138      	cbz	r0, 8013c3a <nd6_free_neighbor_cache_entry+0x32>
    nd6_free_q(neighbor_cache[i].q);
 8013c2a:	f7ff ffb7 	bl	8013b9c <nd6_free_q>
    neighbor_cache[i].q = NULL;
 8013c2e:	4a0c      	ldr	r2, [pc, #48]	; (8013c60 <nd6_free_neighbor_cache_entry+0x58>)
 8013c30:	232c      	movs	r3, #44	; 0x2c
 8013c32:	fb03 2304 	mla	r3, r3, r4, r2
 8013c36:	2200      	movs	r2, #0
 8013c38:	621a      	str	r2, [r3, #32]
  neighbor_cache[i].state = ND6_NO_ENTRY;
 8013c3a:	4909      	ldr	r1, [pc, #36]	; (8013c60 <nd6_free_neighbor_cache_entry+0x58>)
 8013c3c:	202c      	movs	r0, #44	; 0x2c
 8013c3e:	fb00 f404 	mul.w	r4, r0, r4
 8013c42:	190a      	adds	r2, r1, r4
 8013c44:	2300      	movs	r3, #0
 8013c46:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  neighbor_cache[i].isrouter = 0;
 8013c4a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
  neighbor_cache[i].netif = NULL;
 8013c4e:	6153      	str	r3, [r2, #20]
  neighbor_cache[i].counter.reachable_time = 0;
 8013c50:	6293      	str	r3, [r2, #40]	; 0x28
  ip6_addr_set_zero(&(neighbor_cache[i].next_hop_address));
 8013c52:	510b      	str	r3, [r1, r4]
 8013c54:	6053      	str	r3, [r2, #4]
 8013c56:	6093      	str	r3, [r2, #8]
 8013c58:	60d3      	str	r3, [r2, #12]
 8013c5a:	7413      	strb	r3, [r2, #16]
}
 8013c5c:	bd10      	pop	{r4, pc}
 8013c5e:	4770      	bx	lr
 8013c60:	20007ffc 	.word	0x20007ffc

08013c64 <nd6_new_neighbor_cache_entry>:
{
 8013c64:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8013c66:	2400      	movs	r4, #0
 8013c68:	2c09      	cmp	r4, #9
 8013c6a:	dc0b      	bgt.n	8013c84 <nd6_new_neighbor_cache_entry+0x20>
    if (neighbor_cache[i].state == ND6_NO_ENTRY) {
 8013c6c:	4a6c      	ldr	r2, [pc, #432]	; (8013e20 <nd6_new_neighbor_cache_entry+0x1bc>)
 8013c6e:	232c      	movs	r3, #44	; 0x2c
 8013c70:	fb03 2304 	mla	r3, r3, r4, r2
 8013c74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	f000 80cb 	beq.w	8013e14 <nd6_new_neighbor_cache_entry+0x1b0>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8013c7e:	3401      	adds	r4, #1
 8013c80:	b264      	sxtb	r4, r4
 8013c82:	e7f1      	b.n	8013c68 <nd6_new_neighbor_cache_entry+0x4>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8013c84:	2400      	movs	r4, #0
 8013c86:	e001      	b.n	8013c8c <nd6_new_neighbor_cache_entry+0x28>
 8013c88:	3401      	adds	r4, #1
 8013c8a:	b264      	sxtb	r4, r4
 8013c8c:	2c09      	cmp	r4, #9
 8013c8e:	dc12      	bgt.n	8013cb6 <nd6_new_neighbor_cache_entry+0x52>
    if ((neighbor_cache[i].state == ND6_STALE) &&
 8013c90:	4a63      	ldr	r2, [pc, #396]	; (8013e20 <nd6_new_neighbor_cache_entry+0x1bc>)
 8013c92:	232c      	movs	r3, #44	; 0x2c
 8013c94:	fb03 2304 	mla	r3, r3, r4, r2
 8013c98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013c9c:	2b03      	cmp	r3, #3
 8013c9e:	d1f3      	bne.n	8013c88 <nd6_new_neighbor_cache_entry+0x24>
        (!neighbor_cache[i].isrouter)) {
 8013ca0:	232c      	movs	r3, #44	; 0x2c
 8013ca2:	fb03 2304 	mla	r3, r3, r4, r2
 8013ca6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    if ((neighbor_cache[i].state == ND6_STALE) &&
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d1ec      	bne.n	8013c88 <nd6_new_neighbor_cache_entry+0x24>
      nd6_free_neighbor_cache_entry(i);
 8013cae:	4620      	mov	r0, r4
 8013cb0:	f7ff ffaa 	bl	8013c08 <nd6_free_neighbor_cache_entry>
      return i;
 8013cb4:	e0ae      	b.n	8013e14 <nd6_new_neighbor_cache_entry+0x1b0>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8013cb6:	2400      	movs	r4, #0
 8013cb8:	e001      	b.n	8013cbe <nd6_new_neighbor_cache_entry+0x5a>
 8013cba:	3401      	adds	r4, #1
 8013cbc:	b264      	sxtb	r4, r4
 8013cbe:	2c09      	cmp	r4, #9
 8013cc0:	dc12      	bgt.n	8013ce8 <nd6_new_neighbor_cache_entry+0x84>
    if ((neighbor_cache[i].state == ND6_PROBE) &&
 8013cc2:	4a57      	ldr	r2, [pc, #348]	; (8013e20 <nd6_new_neighbor_cache_entry+0x1bc>)
 8013cc4:	232c      	movs	r3, #44	; 0x2c
 8013cc6:	fb03 2304 	mla	r3, r3, r4, r2
 8013cca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013cce:	2b05      	cmp	r3, #5
 8013cd0:	d1f3      	bne.n	8013cba <nd6_new_neighbor_cache_entry+0x56>
        (!neighbor_cache[i].isrouter)) {
 8013cd2:	232c      	movs	r3, #44	; 0x2c
 8013cd4:	fb03 2304 	mla	r3, r3, r4, r2
 8013cd8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    if ((neighbor_cache[i].state == ND6_PROBE) &&
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d1ec      	bne.n	8013cba <nd6_new_neighbor_cache_entry+0x56>
      nd6_free_neighbor_cache_entry(i);
 8013ce0:	4620      	mov	r0, r4
 8013ce2:	f7ff ff91 	bl	8013c08 <nd6_free_neighbor_cache_entry>
      return i;
 8013ce6:	e095      	b.n	8013e14 <nd6_new_neighbor_cache_entry+0x1b0>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8013ce8:	2400      	movs	r4, #0
 8013cea:	e001      	b.n	8013cf0 <nd6_new_neighbor_cache_entry+0x8c>
 8013cec:	3401      	adds	r4, #1
 8013cee:	b264      	sxtb	r4, r4
 8013cf0:	2c09      	cmp	r4, #9
 8013cf2:	dc12      	bgt.n	8013d1a <nd6_new_neighbor_cache_entry+0xb6>
    if ((neighbor_cache[i].state == ND6_DELAY) &&
 8013cf4:	4a4a      	ldr	r2, [pc, #296]	; (8013e20 <nd6_new_neighbor_cache_entry+0x1bc>)
 8013cf6:	232c      	movs	r3, #44	; 0x2c
 8013cf8:	fb03 2304 	mla	r3, r3, r4, r2
 8013cfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013d00:	2b04      	cmp	r3, #4
 8013d02:	d1f3      	bne.n	8013cec <nd6_new_neighbor_cache_entry+0x88>
        (!neighbor_cache[i].isrouter)) {
 8013d04:	232c      	movs	r3, #44	; 0x2c
 8013d06:	fb03 2304 	mla	r3, r3, r4, r2
 8013d0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    if ((neighbor_cache[i].state == ND6_DELAY) &&
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d1ec      	bne.n	8013cec <nd6_new_neighbor_cache_entry+0x88>
      nd6_free_neighbor_cache_entry(i);
 8013d12:	4620      	mov	r0, r4
 8013d14:	f7ff ff78 	bl	8013c08 <nd6_free_neighbor_cache_entry>
      return i;
 8013d18:	e07c      	b.n	8013e14 <nd6_new_neighbor_cache_entry+0x1b0>
  time = 0xfffffffful;
 8013d1a:	f04f 35ff 	mov.w	r5, #4294967295
  j = -1;
 8013d1e:	462c      	mov	r4, r5
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8013d20:	2300      	movs	r3, #0
 8013d22:	e001      	b.n	8013d28 <nd6_new_neighbor_cache_entry+0xc4>
 8013d24:	3301      	adds	r3, #1
 8013d26:	b25b      	sxtb	r3, r3
 8013d28:	2b09      	cmp	r3, #9
 8013d2a:	dc18      	bgt.n	8013d5e <nd6_new_neighbor_cache_entry+0xfa>
    if ((neighbor_cache[i].state == ND6_REACHABLE) &&
 8013d2c:	493c      	ldr	r1, [pc, #240]	; (8013e20 <nd6_new_neighbor_cache_entry+0x1bc>)
 8013d2e:	222c      	movs	r2, #44	; 0x2c
 8013d30:	fb02 1203 	mla	r2, r2, r3, r1
 8013d34:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8013d38:	2a02      	cmp	r2, #2
 8013d3a:	d1f3      	bne.n	8013d24 <nd6_new_neighbor_cache_entry+0xc0>
        (!neighbor_cache[i].isrouter)) {
 8013d3c:	222c      	movs	r2, #44	; 0x2c
 8013d3e:	fb02 1203 	mla	r2, r2, r3, r1
 8013d42:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
    if ((neighbor_cache[i].state == ND6_REACHABLE) &&
 8013d46:	2a00      	cmp	r2, #0
 8013d48:	d1ec      	bne.n	8013d24 <nd6_new_neighbor_cache_entry+0xc0>
      if (neighbor_cache[i].counter.reachable_time < time) {
 8013d4a:	460a      	mov	r2, r1
 8013d4c:	212c      	movs	r1, #44	; 0x2c
 8013d4e:	fb01 2003 	mla	r0, r1, r3, r2
 8013d52:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8013d54:	42aa      	cmp	r2, r5
 8013d56:	d2e5      	bcs.n	8013d24 <nd6_new_neighbor_cache_entry+0xc0>
        time = neighbor_cache[i].counter.reachable_time;
 8013d58:	4615      	mov	r5, r2
        j = i;
 8013d5a:	461c      	mov	r4, r3
 8013d5c:	e7e2      	b.n	8013d24 <nd6_new_neighbor_cache_entry+0xc0>
  if (j >= 0) {
 8013d5e:	2c00      	cmp	r4, #0
 8013d60:	da04      	bge.n	8013d6c <nd6_new_neighbor_cache_entry+0x108>
  time = 0;
 8013d62:	2500      	movs	r5, #0
  j = -1;
 8013d64:	f04f 34ff 	mov.w	r4, #4294967295
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8013d68:	462b      	mov	r3, r5
 8013d6a:	e005      	b.n	8013d78 <nd6_new_neighbor_cache_entry+0x114>
    nd6_free_neighbor_cache_entry(j);
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	f7ff ff4b 	bl	8013c08 <nd6_free_neighbor_cache_entry>
    return j;
 8013d72:	e04f      	b.n	8013e14 <nd6_new_neighbor_cache_entry+0x1b0>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8013d74:	3301      	adds	r3, #1
 8013d76:	b25b      	sxtb	r3, r3
 8013d78:	2b09      	cmp	r3, #9
 8013d7a:	dc1e      	bgt.n	8013dba <nd6_new_neighbor_cache_entry+0x156>
        (neighbor_cache[i].q == NULL) &&
 8013d7c:	4928      	ldr	r1, [pc, #160]	; (8013e20 <nd6_new_neighbor_cache_entry+0x1bc>)
 8013d7e:	222c      	movs	r2, #44	; 0x2c
 8013d80:	fb02 1203 	mla	r2, r2, r3, r1
 8013d84:	6a12      	ldr	r2, [r2, #32]
    if (
 8013d86:	2a00      	cmp	r2, #0
 8013d88:	d1f4      	bne.n	8013d74 <nd6_new_neighbor_cache_entry+0x110>
        (neighbor_cache[i].state == ND6_INCOMPLETE) &&
 8013d8a:	222c      	movs	r2, #44	; 0x2c
 8013d8c:	fb02 1203 	mla	r2, r2, r3, r1
 8013d90:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
        (neighbor_cache[i].q == NULL) &&
 8013d94:	2a01      	cmp	r2, #1
 8013d96:	d1ed      	bne.n	8013d74 <nd6_new_neighbor_cache_entry+0x110>
        (!neighbor_cache[i].isrouter)) {
 8013d98:	222c      	movs	r2, #44	; 0x2c
 8013d9a:	fb02 1203 	mla	r2, r2, r3, r1
 8013d9e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
        (neighbor_cache[i].state == ND6_INCOMPLETE) &&
 8013da2:	2a00      	cmp	r2, #0
 8013da4:	d1e6      	bne.n	8013d74 <nd6_new_neighbor_cache_entry+0x110>
      if (neighbor_cache[i].counter.probes_sent >= time) {
 8013da6:	460a      	mov	r2, r1
 8013da8:	212c      	movs	r1, #44	; 0x2c
 8013daa:	fb01 2003 	mla	r0, r1, r3, r2
 8013dae:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8013db0:	42aa      	cmp	r2, r5
 8013db2:	d3df      	bcc.n	8013d74 <nd6_new_neighbor_cache_entry+0x110>
        time = neighbor_cache[i].counter.probes_sent;
 8013db4:	4615      	mov	r5, r2
        j = i;
 8013db6:	461c      	mov	r4, r3
 8013db8:	e7dc      	b.n	8013d74 <nd6_new_neighbor_cache_entry+0x110>
  if (j >= 0) {
 8013dba:	2c00      	cmp	r4, #0
 8013dbc:	da04      	bge.n	8013dc8 <nd6_new_neighbor_cache_entry+0x164>
  time = 0;
 8013dbe:	2500      	movs	r5, #0
  j = -1;
 8013dc0:	f04f 34ff 	mov.w	r4, #4294967295
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8013dc4:	462b      	mov	r3, r5
 8013dc6:	e005      	b.n	8013dd4 <nd6_new_neighbor_cache_entry+0x170>
    nd6_free_neighbor_cache_entry(j);
 8013dc8:	4620      	mov	r0, r4
 8013dca:	f7ff ff1d 	bl	8013c08 <nd6_free_neighbor_cache_entry>
    return j;
 8013dce:	e021      	b.n	8013e14 <nd6_new_neighbor_cache_entry+0x1b0>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8013dd0:	3301      	adds	r3, #1
 8013dd2:	b25b      	sxtb	r3, r3
 8013dd4:	2b09      	cmp	r3, #9
 8013dd6:	dc18      	bgt.n	8013e0a <nd6_new_neighbor_cache_entry+0x1a6>
    if ((neighbor_cache[i].state == ND6_INCOMPLETE) &&
 8013dd8:	4911      	ldr	r1, [pc, #68]	; (8013e20 <nd6_new_neighbor_cache_entry+0x1bc>)
 8013dda:	222c      	movs	r2, #44	; 0x2c
 8013ddc:	fb02 1203 	mla	r2, r2, r3, r1
 8013de0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8013de4:	2a01      	cmp	r2, #1
 8013de6:	d1f3      	bne.n	8013dd0 <nd6_new_neighbor_cache_entry+0x16c>
        (!neighbor_cache[i].isrouter)) {
 8013de8:	222c      	movs	r2, #44	; 0x2c
 8013dea:	fb02 1203 	mla	r2, r2, r3, r1
 8013dee:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
    if ((neighbor_cache[i].state == ND6_INCOMPLETE) &&
 8013df2:	2a00      	cmp	r2, #0
 8013df4:	d1ec      	bne.n	8013dd0 <nd6_new_neighbor_cache_entry+0x16c>
      if (neighbor_cache[i].counter.probes_sent >= time) {
 8013df6:	460a      	mov	r2, r1
 8013df8:	212c      	movs	r1, #44	; 0x2c
 8013dfa:	fb01 2003 	mla	r0, r1, r3, r2
 8013dfe:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8013e00:	42aa      	cmp	r2, r5
 8013e02:	d3e5      	bcc.n	8013dd0 <nd6_new_neighbor_cache_entry+0x16c>
        time = neighbor_cache[i].counter.probes_sent;
 8013e04:	4615      	mov	r5, r2
        j = i;
 8013e06:	461c      	mov	r4, r3
 8013e08:	e7e2      	b.n	8013dd0 <nd6_new_neighbor_cache_entry+0x16c>
  if (j >= 0) {
 8013e0a:	2c00      	cmp	r4, #0
 8013e0c:	db04      	blt.n	8013e18 <nd6_new_neighbor_cache_entry+0x1b4>
    nd6_free_neighbor_cache_entry(j);
 8013e0e:	4620      	mov	r0, r4
 8013e10:	f7ff fefa 	bl	8013c08 <nd6_free_neighbor_cache_entry>
}
 8013e14:	4620      	mov	r0, r4
 8013e16:	bd38      	pop	{r3, r4, r5, pc}
  return -1;
 8013e18:	f04f 34ff 	mov.w	r4, #4294967295
 8013e1c:	e7fa      	b.n	8013e14 <nd6_new_neighbor_cache_entry+0x1b0>
 8013e1e:	bf00      	nop
 8013e20:	20007ffc 	.word	0x20007ffc

08013e24 <nd6_send_na>:
{
 8013e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e28:	b084      	sub	sp, #16
 8013e2a:	4604      	mov	r4, r0
 8013e2c:	4617      	mov	r7, r2
  LWIP_ASSERT("target address is required", target_addr != NULL);
 8013e2e:	460d      	mov	r5, r1
 8013e30:	2900      	cmp	r1, #0
 8013e32:	d057      	beq.n	8013ee4 <nd6_send_na+0xc0>
  lladdr_opt_len = ((netif->hwaddr_len + 2) >> 3) + (((netif->hwaddr_len + 2) & 0x07) ? 1 : 0);
 8013e34:	f894 30de 	ldrb.w	r3, [r4, #222]	; 0xde
 8013e38:	3302      	adds	r3, #2
 8013e3a:	f013 0207 	ands.w	r2, r3, #7
 8013e3e:	bf18      	it	ne
 8013e40:	2201      	movne	r2, #1
 8013e42:	eb02 08d3 	add.w	r8, r2, r3, lsr #3
  p = pbuf_alloc(PBUF_IP, sizeof(struct na_header) + (lladdr_opt_len << 3), PBUF_RAM);
 8013e46:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8013e4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e4e:	3118      	adds	r1, #24
 8013e50:	2036      	movs	r0, #54	; 0x36
 8013e52:	f7f4 f9af 	bl	80081b4 <pbuf_alloc>
  if (p == NULL) {
 8013e56:	4606      	mov	r6, r0
 8013e58:	2800      	cmp	r0, #0
 8013e5a:	d040      	beq.n	8013ede <nd6_send_na+0xba>
  na_hdr = (struct na_header *)p->payload;
 8013e5c:	6840      	ldr	r0, [r0, #4]
  na_hdr->type = ICMP6_TYPE_NA;
 8013e5e:	2288      	movs	r2, #136	; 0x88
 8013e60:	7002      	strb	r2, [r0, #0]
  na_hdr->code = 0;
 8013e62:	2100      	movs	r1, #0
 8013e64:	7041      	strb	r1, [r0, #1]
  na_hdr->chksum = 0;
 8013e66:	7081      	strb	r1, [r0, #2]
 8013e68:	70c1      	strb	r1, [r0, #3]
  na_hdr->flags = flags & 0xf0;
 8013e6a:	f007 02f0 	and.w	r2, r7, #240	; 0xf0
 8013e6e:	7102      	strb	r2, [r0, #4]
  na_hdr->reserved[0] = 0;
 8013e70:	7141      	strb	r1, [r0, #5]
  na_hdr->reserved[1] = 0;
 8013e72:	7181      	strb	r1, [r0, #6]
  na_hdr->reserved[2] = 0;
 8013e74:	71c1      	strb	r1, [r0, #7]
  ip6_addr_copy_to_packed(na_hdr->target_address, *target_addr);
 8013e76:	682a      	ldr	r2, [r5, #0]
 8013e78:	6082      	str	r2, [r0, #8]
 8013e7a:	686a      	ldr	r2, [r5, #4]
 8013e7c:	60c2      	str	r2, [r0, #12]
 8013e7e:	68aa      	ldr	r2, [r5, #8]
 8013e80:	6102      	str	r2, [r0, #16]
 8013e82:	68ea      	ldr	r2, [r5, #12]
 8013e84:	6142      	str	r2, [r0, #20]
  lladdr_opt->type = ND6_OPTION_TYPE_TARGET_LLADDR;
 8013e86:	2202      	movs	r2, #2
 8013e88:	7602      	strb	r2, [r0, #24]
  lladdr_opt->length = (u8_t)lladdr_opt_len;
 8013e8a:	f880 8019 	strb.w	r8, [r0, #25]
  SMEMCPY(lladdr_opt->addr, netif->hwaddr, netif->hwaddr_len);
 8013e8e:	f894 20de 	ldrb.w	r2, [r4, #222]	; 0xde
 8013e92:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
 8013e96:	301a      	adds	r0, #26
 8013e98:	f001 fd4a 	bl	8015930 <memcpy>
  if (flags & ND6_SEND_FLAG_MULTICAST_DEST) {
 8013e9c:	f017 0f01 	tst.w	r7, #1
 8013ea0:	d028      	beq.n	8013ef4 <nd6_send_na+0xd0>
    ip6_addr_set_solicitednode(&multicast_address, target_addr->addr[3]);
 8013ea2:	4a1e      	ldr	r2, [pc, #120]	; (8013f1c <nd6_send_na+0xf8>)
 8013ea4:	f240 23ff 	movw	r3, #767	; 0x2ff
 8013ea8:	6013      	str	r3, [r2, #0]
 8013eaa:	2300      	movs	r3, #0
 8013eac:	6053      	str	r3, [r2, #4]
 8013eae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8013eb2:	6093      	str	r3, [r2, #8]
 8013eb4:	68eb      	ldr	r3, [r5, #12]
 8013eb6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8013eba:	60d3      	str	r3, [r2, #12]
    ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 8013ebc:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
 8013ec0:	3301      	adds	r3, #1
 8013ec2:	7413      	strb	r3, [r2, #16]
  ip6_output_if(p, src_addr, dest_addr,
 8013ec4:	9402      	str	r4, [sp, #8]
 8013ec6:	233a      	movs	r3, #58	; 0x3a
 8013ec8:	9301      	str	r3, [sp, #4]
 8013eca:	2300      	movs	r3, #0
 8013ecc:	9300      	str	r3, [sp, #0]
 8013ece:	23ff      	movs	r3, #255	; 0xff
 8013ed0:	4629      	mov	r1, r5
 8013ed2:	4630      	mov	r0, r6
 8013ed4:	f7fe fc16 	bl	8012704 <ip6_output_if>
  pbuf_free(p);
 8013ed8:	4630      	mov	r0, r6
 8013eda:	f7f4 f909 	bl	80080f0 <pbuf_free>
}
 8013ede:	b004      	add	sp, #16
 8013ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("target address is required", target_addr != NULL);
 8013ee4:	4b0e      	ldr	r3, [pc, #56]	; (8013f20 <nd6_send_na+0xfc>)
 8013ee6:	f240 42ef 	movw	r2, #1263	; 0x4ef
 8013eea:	490e      	ldr	r1, [pc, #56]	; (8013f24 <nd6_send_na+0x100>)
 8013eec:	480e      	ldr	r0, [pc, #56]	; (8013f28 <nd6_send_na+0x104>)
 8013eee:	f001 fd4f 	bl	8015990 <iprintf>
 8013ef2:	e79f      	b.n	8013e34 <nd6_send_na+0x10>
  } else if (flags & ND6_SEND_FLAG_ALLNODES_DEST) {
 8013ef4:	f017 0f02 	tst.w	r7, #2
 8013ef8:	d00e      	beq.n	8013f18 <nd6_send_na+0xf4>
    ip6_addr_set_allnodes_linklocal(&multicast_address);
 8013efa:	4a08      	ldr	r2, [pc, #32]	; (8013f1c <nd6_send_na+0xf8>)
 8013efc:	f240 23ff 	movw	r3, #767	; 0x2ff
 8013f00:	6013      	str	r3, [r2, #0]
 8013f02:	2300      	movs	r3, #0
 8013f04:	6053      	str	r3, [r2, #4]
 8013f06:	6093      	str	r3, [r2, #8]
 8013f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8013f0c:	60d3      	str	r3, [r2, #12]
    ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 8013f0e:	f894 30e2 	ldrb.w	r3, [r4, #226]	; 0xe2
 8013f12:	3301      	adds	r3, #1
 8013f14:	7413      	strb	r3, [r2, #16]
    dest_addr = &multicast_address;
 8013f16:	e7d5      	b.n	8013ec4 <nd6_send_na+0xa0>
    dest_addr = ip6_current_src_addr();
 8013f18:	4a04      	ldr	r2, [pc, #16]	; (8013f2c <nd6_send_na+0x108>)
 8013f1a:	e7d3      	b.n	8013ec4 <nd6_send_na+0xa0>
 8013f1c:	20000bf4 	.word	0x20000bf4
 8013f20:	0801a958 	.word	0x0801a958
 8013f24:	0801a9c0 	.word	0x0801a9c0
 8013f28:	08016bb4 	.word	0x08016bb4
 8013f2c:	20003e48 	.word	0x20003e48

08013f30 <nd6_send_rs>:
{
 8013f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f32:	b085      	sub	sp, #20
 8013f34:	4604      	mov	r4, r0
  if (ip6_addr_isvalid(netif_ip6_addr_state(netif, 0))) {
 8013f36:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
 8013f3a:	f013 0f10 	tst.w	r3, #16
 8013f3e:	d052      	beq.n	8013fe6 <nd6_send_rs+0xb6>
    src_addr = netif_ip6_addr(netif, 0);
 8013f40:	f100 064c 	add.w	r6, r0, #76	; 0x4c
  ip6_addr_set_allrouters_linklocal(&multicast_address);
 8013f44:	4b2c      	ldr	r3, [pc, #176]	; (8013ff8 <nd6_send_rs+0xc8>)
 8013f46:	f240 22ff 	movw	r2, #767	; 0x2ff
 8013f4a:	601a      	str	r2, [r3, #0]
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	605a      	str	r2, [r3, #4]
 8013f50:	609a      	str	r2, [r3, #8]
 8013f52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8013f56:	60da      	str	r2, [r3, #12]
  ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 8013f58:	f894 20e2 	ldrb.w	r2, [r4, #226]	; 0xe2
 8013f5c:	3201      	adds	r2, #1
 8013f5e:	741a      	strb	r2, [r3, #16]
  if (src_addr != IP6_ADDR_ANY6) {
 8013f60:	4b26      	ldr	r3, [pc, #152]	; (8013ffc <nd6_send_rs+0xcc>)
 8013f62:	429e      	cmp	r6, r3
 8013f64:	d041      	beq.n	8013fea <nd6_send_rs+0xba>
    lladdr_opt_len = ((netif->hwaddr_len + 2) >> 3) + (((netif->hwaddr_len + 2) & 0x07) ? 1 : 0);
 8013f66:	f894 50de 	ldrb.w	r5, [r4, #222]	; 0xde
 8013f6a:	1cab      	adds	r3, r5, #2
 8013f6c:	f013 0507 	ands.w	r5, r3, #7
 8013f70:	bf18      	it	ne
 8013f72:	2501      	movne	r5, #1
 8013f74:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
  p = pbuf_alloc(PBUF_IP, sizeof(struct rs_header) + (lladdr_opt_len << 3), PBUF_RAM);
 8013f78:	00e9      	lsls	r1, r5, #3
 8013f7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013f7e:	3108      	adds	r1, #8
 8013f80:	2036      	movs	r0, #54	; 0x36
 8013f82:	f7f4 f917 	bl	80081b4 <pbuf_alloc>
  if (p == NULL) {
 8013f86:	4607      	mov	r7, r0
 8013f88:	b398      	cbz	r0, 8013ff2 <nd6_send_rs+0xc2>
  rs_hdr = (struct rs_header *)p->payload;
 8013f8a:	6843      	ldr	r3, [r0, #4]
  rs_hdr->type = ICMP6_TYPE_RS;
 8013f8c:	2285      	movs	r2, #133	; 0x85
 8013f8e:	701a      	strb	r2, [r3, #0]
  rs_hdr->code = 0;
 8013f90:	2200      	movs	r2, #0
 8013f92:	705a      	strb	r2, [r3, #1]
  rs_hdr->chksum = 0;
 8013f94:	709a      	strb	r2, [r3, #2]
 8013f96:	70da      	strb	r2, [r3, #3]
  rs_hdr->reserved = 0;
 8013f98:	711a      	strb	r2, [r3, #4]
 8013f9a:	715a      	strb	r2, [r3, #5]
 8013f9c:	719a      	strb	r2, [r3, #6]
 8013f9e:	71da      	strb	r2, [r3, #7]
  if (src_addr != IP6_ADDR_ANY6) {
 8013fa0:	4b16      	ldr	r3, [pc, #88]	; (8013ffc <nd6_send_rs+0xcc>)
 8013fa2:	429e      	cmp	r6, r3
 8013fa4:	d00a      	beq.n	8013fbc <nd6_send_rs+0x8c>
    lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct rs_header));
 8013fa6:	6840      	ldr	r0, [r0, #4]
    lladdr_opt->type = ND6_OPTION_TYPE_SOURCE_LLADDR;
 8013fa8:	2301      	movs	r3, #1
 8013faa:	7203      	strb	r3, [r0, #8]
    lladdr_opt->length = (u8_t)lladdr_opt_len;
 8013fac:	7245      	strb	r5, [r0, #9]
    SMEMCPY(lladdr_opt->addr, netif->hwaddr, netif->hwaddr_len);
 8013fae:	f894 20de 	ldrb.w	r2, [r4, #222]	; 0xde
 8013fb2:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
 8013fb6:	300a      	adds	r0, #10
 8013fb8:	f001 fcba 	bl	8015930 <memcpy>
  err = ip6_output_if(p, (src_addr == IP6_ADDR_ANY6) ? NULL : src_addr, &multicast_address,
 8013fbc:	4b0f      	ldr	r3, [pc, #60]	; (8013ffc <nd6_send_rs+0xcc>)
 8013fbe:	429e      	cmp	r6, r3
 8013fc0:	d015      	beq.n	8013fee <nd6_send_rs+0xbe>
 8013fc2:	9402      	str	r4, [sp, #8]
 8013fc4:	233a      	movs	r3, #58	; 0x3a
 8013fc6:	9301      	str	r3, [sp, #4]
 8013fc8:	2300      	movs	r3, #0
 8013fca:	9300      	str	r3, [sp, #0]
 8013fcc:	23ff      	movs	r3, #255	; 0xff
 8013fce:	4a0a      	ldr	r2, [pc, #40]	; (8013ff8 <nd6_send_rs+0xc8>)
 8013fd0:	4631      	mov	r1, r6
 8013fd2:	4638      	mov	r0, r7
 8013fd4:	f7fe fb96 	bl	8012704 <ip6_output_if>
 8013fd8:	4604      	mov	r4, r0
  pbuf_free(p);
 8013fda:	4638      	mov	r0, r7
 8013fdc:	f7f4 f888 	bl	80080f0 <pbuf_free>
}
 8013fe0:	4620      	mov	r0, r4
 8013fe2:	b005      	add	sp, #20
 8013fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    src_addr = IP6_ADDR_ANY6;
 8013fe6:	4e05      	ldr	r6, [pc, #20]	; (8013ffc <nd6_send_rs+0xcc>)
 8013fe8:	e7ac      	b.n	8013f44 <nd6_send_rs+0x14>
  u16_t lladdr_opt_len = 0;
 8013fea:	2500      	movs	r5, #0
 8013fec:	e7c4      	b.n	8013f78 <nd6_send_rs+0x48>
  err = ip6_output_if(p, (src_addr == IP6_ADDR_ANY6) ? NULL : src_addr, &multicast_address,
 8013fee:	2600      	movs	r6, #0
 8013ff0:	e7e7      	b.n	8013fc2 <nd6_send_rs+0x92>
    return ERR_BUF;
 8013ff2:	f06f 0401 	mvn.w	r4, #1
 8013ff6:	e7f3      	b.n	8013fe0 <nd6_send_rs+0xb0>
 8013ff8:	20000bf4 	.word	0x20000bf4
 8013ffc:	0801a808 	.word	0x0801a808

08014000 <nd6_send_ns>:
{
 8014000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014004:	b085      	sub	sp, #20
 8014006:	4605      	mov	r5, r0
 8014008:	4616      	mov	r6, r2
  LWIP_ASSERT("target address is required", target_addr != NULL);
 801400a:	460c      	mov	r4, r1
 801400c:	b171      	cbz	r1, 801402c <nd6_send_ns+0x2c>
  if (!(flags & ND6_SEND_FLAG_ANY_SRC) &&
 801400e:	f016 0f04 	tst.w	r6, #4
 8014012:	d113      	bne.n	801403c <nd6_send_ns+0x3c>
      ip6_addr_isvalid(netif_ip6_addr_state(netif,0))) {
 8014014:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
  if (!(flags & ND6_SEND_FLAG_ANY_SRC) &&
 8014018:	f013 0f10 	tst.w	r3, #16
 801401c:	d058      	beq.n	80140d0 <nd6_send_ns+0xd0>
    src_addr = netif_ip6_addr(netif, 0);
 801401e:	f105 084c 	add.w	r8, r5, #76	; 0x4c
    lladdr_opt_len = ((netif->hwaddr_len + 2) + 7) >> 3;
 8014022:	f895 70de 	ldrb.w	r7, [r5, #222]	; 0xde
 8014026:	3709      	adds	r7, #9
 8014028:	08ff      	lsrs	r7, r7, #3
 801402a:	e00a      	b.n	8014042 <nd6_send_ns+0x42>
  LWIP_ASSERT("target address is required", target_addr != NULL);
 801402c:	4b32      	ldr	r3, [pc, #200]	; (80140f8 <nd6_send_ns+0xf8>)
 801402e:	f240 42a4 	movw	r2, #1188	; 0x4a4
 8014032:	4932      	ldr	r1, [pc, #200]	; (80140fc <nd6_send_ns+0xfc>)
 8014034:	4832      	ldr	r0, [pc, #200]	; (8014100 <nd6_send_ns+0x100>)
 8014036:	f001 fcab 	bl	8015990 <iprintf>
 801403a:	e7e8      	b.n	801400e <nd6_send_ns+0xe>
    lladdr_opt_len = 0;
 801403c:	2700      	movs	r7, #0
    src_addr = IP6_ADDR_ANY6;
 801403e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8014108 <nd6_send_ns+0x108>
  p = pbuf_alloc(PBUF_IP, sizeof(struct ns_header) + (lladdr_opt_len << 3), PBUF_RAM);
 8014042:	00f9      	lsls	r1, r7, #3
 8014044:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014048:	3118      	adds	r1, #24
 801404a:	2036      	movs	r0, #54	; 0x36
 801404c:	f7f4 f8b2 	bl	80081b4 <pbuf_alloc>
  if (p == NULL) {
 8014050:	4681      	mov	r9, r0
 8014052:	2800      	cmp	r0, #0
 8014054:	d039      	beq.n	80140ca <nd6_send_ns+0xca>
  ns_hdr = (struct ns_header *)p->payload;
 8014056:	6843      	ldr	r3, [r0, #4]
  ns_hdr->type = ICMP6_TYPE_NS;
 8014058:	2287      	movs	r2, #135	; 0x87
 801405a:	701a      	strb	r2, [r3, #0]
  ns_hdr->code = 0;
 801405c:	2100      	movs	r1, #0
 801405e:	7059      	strb	r1, [r3, #1]
  ns_hdr->chksum = 0;
 8014060:	7099      	strb	r1, [r3, #2]
 8014062:	70d9      	strb	r1, [r3, #3]
  ns_hdr->reserved = 0;
 8014064:	7119      	strb	r1, [r3, #4]
 8014066:	7159      	strb	r1, [r3, #5]
 8014068:	7199      	strb	r1, [r3, #6]
 801406a:	71d9      	strb	r1, [r3, #7]
  ip6_addr_copy_to_packed(ns_hdr->target_address, *target_addr);
 801406c:	6822      	ldr	r2, [r4, #0]
 801406e:	609a      	str	r2, [r3, #8]
 8014070:	6862      	ldr	r2, [r4, #4]
 8014072:	60da      	str	r2, [r3, #12]
 8014074:	68a2      	ldr	r2, [r4, #8]
 8014076:	611a      	str	r2, [r3, #16]
 8014078:	68e2      	ldr	r2, [r4, #12]
 801407a:	615a      	str	r2, [r3, #20]
  if (lladdr_opt_len != 0) {
 801407c:	bb67      	cbnz	r7, 80140d8 <nd6_send_ns+0xd8>
  if (flags & ND6_SEND_FLAG_MULTICAST_DEST) {
 801407e:	f016 0f01 	tst.w	r6, #1
 8014082:	d011      	beq.n	80140a8 <nd6_send_ns+0xa8>
    ip6_addr_set_solicitednode(&multicast_address, target_addr->addr[3]);
 8014084:	4b1f      	ldr	r3, [pc, #124]	; (8014104 <nd6_send_ns+0x104>)
 8014086:	f240 22ff 	movw	r2, #767	; 0x2ff
 801408a:	601a      	str	r2, [r3, #0]
 801408c:	2200      	movs	r2, #0
 801408e:	605a      	str	r2, [r3, #4]
 8014090:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014094:	609a      	str	r2, [r3, #8]
 8014096:	68e2      	ldr	r2, [r4, #12]
 8014098:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 801409c:	60da      	str	r2, [r3, #12]
    ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 801409e:	f895 20e2 	ldrb.w	r2, [r5, #226]	; 0xe2
 80140a2:	3201      	adds	r2, #1
 80140a4:	741a      	strb	r2, [r3, #16]
    target_addr = &multicast_address;
 80140a6:	461c      	mov	r4, r3
  ip6_output_if(p, (src_addr == IP6_ADDR_ANY6) ? NULL : src_addr, target_addr,
 80140a8:	4b17      	ldr	r3, [pc, #92]	; (8014108 <nd6_send_ns+0x108>)
 80140aa:	4598      	cmp	r8, r3
 80140ac:	d020      	beq.n	80140f0 <nd6_send_ns+0xf0>
 80140ae:	9502      	str	r5, [sp, #8]
 80140b0:	233a      	movs	r3, #58	; 0x3a
 80140b2:	9301      	str	r3, [sp, #4]
 80140b4:	2300      	movs	r3, #0
 80140b6:	9300      	str	r3, [sp, #0]
 80140b8:	23ff      	movs	r3, #255	; 0xff
 80140ba:	4622      	mov	r2, r4
 80140bc:	4641      	mov	r1, r8
 80140be:	4648      	mov	r0, r9
 80140c0:	f7fe fb20 	bl	8012704 <ip6_output_if>
  pbuf_free(p);
 80140c4:	4648      	mov	r0, r9
 80140c6:	f7f4 f813 	bl	80080f0 <pbuf_free>
}
 80140ca:	b005      	add	sp, #20
 80140cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lladdr_opt_len = 0;
 80140d0:	2700      	movs	r7, #0
    src_addr = IP6_ADDR_ANY6;
 80140d2:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8014108 <nd6_send_ns+0x108>
 80140d6:	e7b4      	b.n	8014042 <nd6_send_ns+0x42>
    struct lladdr_option *lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct ns_header));
 80140d8:	6840      	ldr	r0, [r0, #4]
    lladdr_opt->type = ND6_OPTION_TYPE_SOURCE_LLADDR;
 80140da:	2301      	movs	r3, #1
 80140dc:	7603      	strb	r3, [r0, #24]
    lladdr_opt->length = (u8_t)lladdr_opt_len;
 80140de:	7647      	strb	r7, [r0, #25]
    SMEMCPY(lladdr_opt->addr, netif->hwaddr, netif->hwaddr_len);
 80140e0:	f895 20de 	ldrb.w	r2, [r5, #222]	; 0xde
 80140e4:	f105 01d8 	add.w	r1, r5, #216	; 0xd8
 80140e8:	301a      	adds	r0, #26
 80140ea:	f001 fc21 	bl	8015930 <memcpy>
 80140ee:	e7c6      	b.n	801407e <nd6_send_ns+0x7e>
  ip6_output_if(p, (src_addr == IP6_ADDR_ANY6) ? NULL : src_addr, target_addr,
 80140f0:	f04f 0800 	mov.w	r8, #0
 80140f4:	e7db      	b.n	80140ae <nd6_send_ns+0xae>
 80140f6:	bf00      	nop
 80140f8:	0801a958 	.word	0x0801a958
 80140fc:	0801a9c0 	.word	0x0801a9c0
 8014100:	08016bb4 	.word	0x08016bb4
 8014104:	20000bf4 	.word	0x20000bf4
 8014108:	0801a808 	.word	0x0801a808

0801410c <nd6_send_neighbor_cache_probe>:
{
 801410c:	b508      	push	{r3, lr}
 801410e:	460a      	mov	r2, r1
  nd6_send_ns(entry->netif, &entry->next_hop_address, flags);
 8014110:	4601      	mov	r1, r0
 8014112:	6940      	ldr	r0, [r0, #20]
 8014114:	f7ff ff74 	bl	8014000 <nd6_send_ns>
}
 8014118:	bd08      	pop	{r3, pc}
	...

0801411c <nd6_new_router>:
{
 801411c:	b570      	push	{r4, r5, r6, lr}
 801411e:	4605      	mov	r5, r0
 8014120:	460e      	mov	r6, r1
  neighbor_index = nd6_find_neighbor_cache_entry(router_addr);
 8014122:	f7ff f99d 	bl	8013460 <nd6_find_neighbor_cache_entry>
  if (neighbor_index < 0) {
 8014126:	1e04      	subs	r4, r0, #0
 8014128:	db0a      	blt.n	8014140 <nd6_new_router+0x24>
  neighbor_cache[neighbor_index].isrouter = 1;
 801412a:	4625      	mov	r5, r4
 801412c:	4839      	ldr	r0, [pc, #228]	; (8014214 <nd6_new_router+0xf8>)
 801412e:	232c      	movs	r3, #44	; 0x2c
 8014130:	fb03 0404 	mla	r4, r3, r4, r0
 8014134:	2301      	movs	r3, #1
 8014136:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  free_router_index = LWIP_ND6_NUM_ROUTERS;
 801413a:	2003      	movs	r0, #3
  for (router_index = LWIP_ND6_NUM_ROUTERS - 1; router_index >= 0; router_index--) {
 801413c:	2302      	movs	r3, #2
 801413e:	e03d      	b.n	80141bc <nd6_new_router+0xa0>
    neighbor_index = nd6_new_neighbor_cache_entry();
 8014140:	f7ff fd90 	bl	8013c64 <nd6_new_neighbor_cache_entry>
    if (neighbor_index < 0) {
 8014144:	1e04      	subs	r4, r0, #0
 8014146:	db60      	blt.n	801420a <nd6_new_router+0xee>
    ip6_addr_set(&(neighbor_cache[neighbor_index].next_hop_address), router_addr);
 8014148:	b365      	cbz	r5, 80141a4 <nd6_new_router+0x88>
 801414a:	6829      	ldr	r1, [r5, #0]
 801414c:	4620      	mov	r0, r4
 801414e:	232c      	movs	r3, #44	; 0x2c
 8014150:	fb03 f304 	mul.w	r3, r3, r4
 8014154:	4a2f      	ldr	r2, [pc, #188]	; (8014214 <nd6_new_router+0xf8>)
 8014156:	50d1      	str	r1, [r2, r3]
 8014158:	b335      	cbz	r5, 80141a8 <nd6_new_router+0x8c>
 801415a:	686a      	ldr	r2, [r5, #4]
 801415c:	492d      	ldr	r1, [pc, #180]	; (8014214 <nd6_new_router+0xf8>)
 801415e:	232c      	movs	r3, #44	; 0x2c
 8014160:	fb03 1300 	mla	r3, r3, r0, r1
 8014164:	605a      	str	r2, [r3, #4]
 8014166:	b30d      	cbz	r5, 80141ac <nd6_new_router+0x90>
 8014168:	68aa      	ldr	r2, [r5, #8]
 801416a:	492a      	ldr	r1, [pc, #168]	; (8014214 <nd6_new_router+0xf8>)
 801416c:	232c      	movs	r3, #44	; 0x2c
 801416e:	fb03 1300 	mla	r3, r3, r0, r1
 8014172:	609a      	str	r2, [r3, #8]
 8014174:	b1e5      	cbz	r5, 80141b0 <nd6_new_router+0x94>
 8014176:	68ea      	ldr	r2, [r5, #12]
 8014178:	4926      	ldr	r1, [pc, #152]	; (8014214 <nd6_new_router+0xf8>)
 801417a:	232c      	movs	r3, #44	; 0x2c
 801417c:	fb03 1300 	mla	r3, r3, r0, r1
 8014180:	60da      	str	r2, [r3, #12]
 8014182:	b1bd      	cbz	r5, 80141b4 <nd6_new_router+0x98>
 8014184:	7c2b      	ldrb	r3, [r5, #16]
 8014186:	4a23      	ldr	r2, [pc, #140]	; (8014214 <nd6_new_router+0xf8>)
 8014188:	212c      	movs	r1, #44	; 0x2c
 801418a:	fb01 2000 	mla	r0, r1, r0, r2
 801418e:	7403      	strb	r3, [r0, #16]
    neighbor_cache[neighbor_index].netif = netif;
 8014190:	6146      	str	r6, [r0, #20]
    neighbor_cache[neighbor_index].q = NULL;
 8014192:	2300      	movs	r3, #0
 8014194:	6203      	str	r3, [r0, #32]
    neighbor_cache[neighbor_index].state = ND6_INCOMPLETE;
 8014196:	2101      	movs	r1, #1
 8014198:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    neighbor_cache[neighbor_index].counter.probes_sent = 1;
 801419c:	6281      	str	r1, [r0, #40]	; 0x28
    nd6_send_neighbor_cache_probe(&neighbor_cache[neighbor_index], ND6_SEND_FLAG_MULTICAST_DEST);
 801419e:	f7ff ffb5 	bl	801410c <nd6_send_neighbor_cache_probe>
 80141a2:	e7c2      	b.n	801412a <nd6_new_router+0xe>
    ip6_addr_set(&(neighbor_cache[neighbor_index].next_hop_address), router_addr);
 80141a4:	2100      	movs	r1, #0
 80141a6:	e7d1      	b.n	801414c <nd6_new_router+0x30>
 80141a8:	2200      	movs	r2, #0
 80141aa:	e7d7      	b.n	801415c <nd6_new_router+0x40>
 80141ac:	2200      	movs	r2, #0
 80141ae:	e7dc      	b.n	801416a <nd6_new_router+0x4e>
 80141b0:	2200      	movs	r2, #0
 80141b2:	e7e1      	b.n	8014178 <nd6_new_router+0x5c>
 80141b4:	2300      	movs	r3, #0
 80141b6:	e7e6      	b.n	8014186 <nd6_new_router+0x6a>
  for (router_index = LWIP_ND6_NUM_ROUTERS - 1; router_index >= 0; router_index--) {
 80141b8:	3b01      	subs	r3, #1
 80141ba:	b25b      	sxtb	r3, r3
 80141bc:	2b00      	cmp	r3, #0
 80141be:	db0e      	blt.n	80141de <nd6_new_router+0xc2>
    if(default_router_list[router_index].neighbor_entry == &(neighbor_cache[neighbor_index])){ 
 80141c0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80141c4:	4914      	ldr	r1, [pc, #80]	; (8014218 <nd6_new_router+0xfc>)
 80141c6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80141ca:	222c      	movs	r2, #44	; 0x2c
 80141cc:	4c11      	ldr	r4, [pc, #68]	; (8014214 <nd6_new_router+0xf8>)
 80141ce:	fb02 4205 	mla	r2, r2, r5, r4
 80141d2:	4291      	cmp	r1, r2
 80141d4:	d01c      	beq.n	8014210 <nd6_new_router+0xf4>
    if (default_router_list[router_index].neighbor_entry == NULL) {
 80141d6:	2900      	cmp	r1, #0
 80141d8:	d1ee      	bne.n	80141b8 <nd6_new_router+0x9c>
      free_router_index = router_index;
 80141da:	4618      	mov	r0, r3
 80141dc:	e7ec      	b.n	80141b8 <nd6_new_router+0x9c>
  if (free_router_index < LWIP_ND6_NUM_ROUTERS) {
 80141de:	2802      	cmp	r0, #2
 80141e0:	dc09      	bgt.n	80141f6 <nd6_new_router+0xda>
    default_router_list[free_router_index].neighbor_entry = &(neighbor_cache[neighbor_index]);
 80141e2:	232c      	movs	r3, #44	; 0x2c
 80141e4:	4a0b      	ldr	r2, [pc, #44]	; (8014214 <nd6_new_router+0xf8>)
 80141e6:	fb03 2305 	mla	r3, r3, r5, r2
 80141ea:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80141ee:	490a      	ldr	r1, [pc, #40]	; (8014218 <nd6_new_router+0xfc>)
 80141f0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 80141f4:	bd70      	pop	{r4, r5, r6, pc}
  neighbor_cache[neighbor_index].isrouter = 0;
 80141f6:	4b07      	ldr	r3, [pc, #28]	; (8014214 <nd6_new_router+0xf8>)
 80141f8:	222c      	movs	r2, #44	; 0x2c
 80141fa:	fb02 3305 	mla	r3, r2, r5, r3
 80141fe:	2200      	movs	r2, #0
 8014200:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  return -1;
 8014204:	f04f 30ff 	mov.w	r0, #4294967295
 8014208:	e7f4      	b.n	80141f4 <nd6_new_router+0xd8>
      return -1;
 801420a:	f04f 30ff 	mov.w	r0, #4294967295
 801420e:	e7f1      	b.n	80141f4 <nd6_new_router+0xd8>
      return router_index; 
 8014210:	4618      	mov	r0, r3
 8014212:	e7ef      	b.n	80141f4 <nd6_new_router+0xd8>
 8014214:	20007ffc 	.word	0x20007ffc
 8014218:	20008420 	.word	0x20008420

0801421c <nd6_get_next_hop_entry>:
{
 801421c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801421e:	4604      	mov	r4, r0
 8014220:	460e      	mov	r6, r1
  if (ip6_addr_cmp(ip6addr, &(destination_cache[nd6_cached_destination_index].destination_addr))) {
 8014222:	6801      	ldr	r1, [r0, #0]
 8014224:	4ba3      	ldr	r3, [pc, #652]	; (80144b4 <nd6_get_next_hop_entry+0x298>)
 8014226:	781b      	ldrb	r3, [r3, #0]
 8014228:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801422c:	0112      	lsls	r2, r2, #4
 801422e:	48a2      	ldr	r0, [pc, #648]	; (80144b8 <nd6_get_next_hop_entry+0x29c>)
 8014230:	5882      	ldr	r2, [r0, r2]
 8014232:	4291      	cmp	r1, r2
 8014234:	d036      	beq.n	80142a4 <nd6_get_next_hop_entry+0x88>
    dst_idx = nd6_find_destination_cache_entry(ip6addr);
 8014236:	4620      	mov	r0, r4
 8014238:	f7ff f946 	bl	80134c8 <nd6_find_destination_cache_entry>
    if (dst_idx >= 0) {
 801423c:	1e05      	subs	r5, r0, #0
 801423e:	db5c      	blt.n	80142fa <nd6_get_next_hop_entry+0xde>
      LWIP_ASSERT("type overflow", (size_t)dst_idx < NETIF_ADDR_IDX_MAX);
 8014240:	b2ab      	uxth	r3, r5
 8014242:	2b7e      	cmp	r3, #126	; 0x7e
 8014244:	d851      	bhi.n	80142ea <nd6_get_next_hop_entry+0xce>
      nd6_cached_destination_index = (netif_addr_idx_t)dst_idx;
 8014246:	4b9b      	ldr	r3, [pc, #620]	; (80144b4 <nd6_get_next_hop_entry+0x298>)
 8014248:	701d      	strb	r5, [r3, #0]
  if (ip6_addr_cmp(&(destination_cache[nd6_cached_destination_index].next_hop_addr),
 801424a:	4b9a      	ldr	r3, [pc, #616]	; (80144b4 <nd6_get_next_hop_entry+0x298>)
 801424c:	7818      	ldrb	r0, [r3, #0]
 801424e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8014252:	4b99      	ldr	r3, [pc, #612]	; (80144b8 <nd6_get_next_hop_entry+0x29c>)
 8014254:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8014258:	6959      	ldr	r1, [r3, #20]
 801425a:	4b98      	ldr	r3, [pc, #608]	; (80144bc <nd6_get_next_hop_entry+0x2a0>)
 801425c:	781a      	ldrb	r2, [r3, #0]
 801425e:	232c      	movs	r3, #44	; 0x2c
 8014260:	fb03 f302 	mul.w	r3, r3, r2
 8014264:	4c96      	ldr	r4, [pc, #600]	; (80144c0 <nd6_get_next_hop_entry+0x2a4>)
 8014266:	58e3      	ldr	r3, [r4, r3]
 8014268:	4299      	cmp	r1, r3
 801426a:	f000 80eb 	beq.w	8014444 <nd6_get_next_hop_entry+0x228>
    i = nd6_find_neighbor_cache_entry(&(destination_cache[nd6_cached_destination_index].next_hop_addr));
 801426e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8014272:	0100      	lsls	r0, r0, #4
 8014274:	3010      	adds	r0, #16
 8014276:	4b90      	ldr	r3, [pc, #576]	; (80144b8 <nd6_get_next_hop_entry+0x29c>)
 8014278:	4418      	add	r0, r3
 801427a:	3004      	adds	r0, #4
 801427c:	f7ff f8f0 	bl	8013460 <nd6_find_neighbor_cache_entry>
    if (i >= 0) {
 8014280:	2800      	cmp	r0, #0
 8014282:	f2c0 8127 	blt.w	80144d4 <nd6_get_next_hop_entry+0x2b8>
      nd6_cached_neighbor_index = i;
 8014286:	4b8d      	ldr	r3, [pc, #564]	; (80144bc <nd6_get_next_hop_entry+0x2a0>)
 8014288:	7018      	strb	r0, [r3, #0]
  destination_cache[nd6_cached_destination_index].age = 0;
 801428a:	4b8a      	ldr	r3, [pc, #552]	; (80144b4 <nd6_get_next_hop_entry+0x298>)
 801428c:	781b      	ldrb	r3, [r3, #0]
 801428e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014292:	4a89      	ldr	r2, [pc, #548]	; (80144b8 <nd6_get_next_hop_entry+0x29c>)
 8014294:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8014298:	2200      	movs	r2, #0
 801429a:	62da      	str	r2, [r3, #44]	; 0x2c
  return nd6_cached_neighbor_index;
 801429c:	4b87      	ldr	r3, [pc, #540]	; (80144bc <nd6_get_next_hop_entry+0x2a0>)
 801429e:	f993 0000 	ldrsb.w	r0, [r3]
}
 80142a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ip6_addr_cmp(ip6addr, &(destination_cache[nd6_cached_destination_index].destination_addr))) {
 80142a4:	6860      	ldr	r0, [r4, #4]
 80142a6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80142aa:	4983      	ldr	r1, [pc, #524]	; (80144b8 <nd6_get_next_hop_entry+0x29c>)
 80142ac:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80142b0:	6852      	ldr	r2, [r2, #4]
 80142b2:	4290      	cmp	r0, r2
 80142b4:	d1bf      	bne.n	8014236 <nd6_get_next_hop_entry+0x1a>
 80142b6:	68a0      	ldr	r0, [r4, #8]
 80142b8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80142bc:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80142c0:	6892      	ldr	r2, [r2, #8]
 80142c2:	4290      	cmp	r0, r2
 80142c4:	d1b7      	bne.n	8014236 <nd6_get_next_hop_entry+0x1a>
 80142c6:	68e0      	ldr	r0, [r4, #12]
 80142c8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80142cc:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80142d0:	68d2      	ldr	r2, [r2, #12]
 80142d2:	4290      	cmp	r0, r2
 80142d4:	d1af      	bne.n	8014236 <nd6_get_next_hop_entry+0x1a>
 80142d6:	7c21      	ldrb	r1, [r4, #16]
 80142d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80142dc:	4a76      	ldr	r2, [pc, #472]	; (80144b8 <nd6_get_next_hop_entry+0x29c>)
 80142de:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80142e2:	7c1b      	ldrb	r3, [r3, #16]
 80142e4:	4299      	cmp	r1, r3
 80142e6:	d1a6      	bne.n	8014236 <nd6_get_next_hop_entry+0x1a>
 80142e8:	e7af      	b.n	801424a <nd6_get_next_hop_entry+0x2e>
      LWIP_ASSERT("type overflow", (size_t)dst_idx < NETIF_ADDR_IDX_MAX);
 80142ea:	4b76      	ldr	r3, [pc, #472]	; (80144c4 <nd6_get_next_hop_entry+0x2a8>)
 80142ec:	f240 72a2 	movw	r2, #1954	; 0x7a2
 80142f0:	4975      	ldr	r1, [pc, #468]	; (80144c8 <nd6_get_next_hop_entry+0x2ac>)
 80142f2:	4876      	ldr	r0, [pc, #472]	; (80144cc <nd6_get_next_hop_entry+0x2b0>)
 80142f4:	f001 fb4c 	bl	8015990 <iprintf>
 80142f8:	e7a5      	b.n	8014246 <nd6_get_next_hop_entry+0x2a>
      dst_idx = nd6_new_destination_cache_entry();
 80142fa:	f7ff f91f 	bl	801353c <nd6_new_destination_cache_entry>
      if (dst_idx >= 0) {
 80142fe:	1e05      	subs	r5, r0, #0
 8014300:	f2c0 8114 	blt.w	801452c <nd6_get_next_hop_entry+0x310>
        LWIP_ASSERT("type overflow", (size_t)dst_idx < NETIF_ADDR_IDX_MAX);
 8014304:	b2ab      	uxth	r3, r5
 8014306:	2b7e      	cmp	r3, #126	; 0x7e
 8014308:	d855      	bhi.n	80143b6 <nd6_get_next_hop_entry+0x19a>
        nd6_cached_destination_index = (netif_addr_idx_t)dst_idx;
 801430a:	b2ed      	uxtb	r5, r5
 801430c:	4b69      	ldr	r3, [pc, #420]	; (80144b4 <nd6_get_next_hop_entry+0x298>)
 801430e:	701d      	strb	r5, [r3, #0]
      ip6_addr_set(&(destination_cache[nd6_cached_destination_index].destination_addr), ip6addr);
 8014310:	2c00      	cmp	r4, #0
 8014312:	d058      	beq.n	80143c6 <nd6_get_next_hop_entry+0x1aa>
 8014314:	6821      	ldr	r1, [r4, #0]
 8014316:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801431a:	011b      	lsls	r3, r3, #4
 801431c:	4a66      	ldr	r2, [pc, #408]	; (80144b8 <nd6_get_next_hop_entry+0x29c>)
 801431e:	50d1      	str	r1, [r2, r3]
 8014320:	2c00      	cmp	r4, #0
 8014322:	d052      	beq.n	80143ca <nd6_get_next_hop_entry+0x1ae>
 8014324:	6861      	ldr	r1, [r4, #4]
 8014326:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801432a:	4a63      	ldr	r2, [pc, #396]	; (80144b8 <nd6_get_next_hop_entry+0x29c>)
 801432c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8014330:	6059      	str	r1, [r3, #4]
 8014332:	2c00      	cmp	r4, #0
 8014334:	d04b      	beq.n	80143ce <nd6_get_next_hop_entry+0x1b2>
 8014336:	68a1      	ldr	r1, [r4, #8]
 8014338:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801433c:	4a5e      	ldr	r2, [pc, #376]	; (80144b8 <nd6_get_next_hop_entry+0x29c>)
 801433e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8014342:	6099      	str	r1, [r3, #8]
 8014344:	2c00      	cmp	r4, #0
 8014346:	d044      	beq.n	80143d2 <nd6_get_next_hop_entry+0x1b6>
 8014348:	68e1      	ldr	r1, [r4, #12]
 801434a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801434e:	4a5a      	ldr	r2, [pc, #360]	; (80144b8 <nd6_get_next_hop_entry+0x29c>)
 8014350:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8014354:	60d9      	str	r1, [r3, #12]
 8014356:	2c00      	cmp	r4, #0
 8014358:	d03d      	beq.n	80143d6 <nd6_get_next_hop_entry+0x1ba>
 801435a:	7c21      	ldrb	r1, [r4, #16]
 801435c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8014360:	4a55      	ldr	r2, [pc, #340]	; (80144b8 <nd6_get_next_hop_entry+0x29c>)
 8014362:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8014366:	7419      	strb	r1, [r3, #16]
      if (ip6_addr_islinklocal(ip6addr) ||
 8014368:	6823      	ldr	r3, [r4, #0]
 801436a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801436e:	041b      	lsls	r3, r3, #16
 8014370:	0c1b      	lsrs	r3, r3, #16
 8014372:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8014376:	4293      	cmp	r3, r2
 8014378:	d004      	beq.n	8014384 <nd6_get_next_hop_entry+0x168>
          nd6_is_prefix_in_netif(ip6addr, netif)) {
 801437a:	4631      	mov	r1, r6
 801437c:	4620      	mov	r0, r4
 801437e:	f7ff f911 	bl	80135a4 <nd6_is_prefix_in_netif>
      if (ip6_addr_islinklocal(ip6addr) ||
 8014382:	b350      	cbz	r0, 80143da <nd6_get_next_hop_entry+0x1be>
        destination_cache[nd6_cached_destination_index].pmtu = netif_mtu6(netif);
 8014384:	f8b6 00d6 	ldrh.w	r0, [r6, #214]	; 0xd6
 8014388:	4a4b      	ldr	r2, [pc, #300]	; (80144b8 <nd6_get_next_hop_entry+0x29c>)
 801438a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801438e:	0119      	lsls	r1, r3, #4
 8014390:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8014394:	8518      	strh	r0, [r3, #40]	; 0x28
        ip6_addr_copy(destination_cache[nd6_cached_destination_index].next_hop_addr, destination_cache[nd6_cached_destination_index].destination_addr);
 8014396:	5851      	ldr	r1, [r2, r1]
 8014398:	6159      	str	r1, [r3, #20]
 801439a:	6859      	ldr	r1, [r3, #4]
 801439c:	6199      	str	r1, [r3, #24]
 801439e:	6899      	ldr	r1, [r3, #8]
 80143a0:	61d9      	str	r1, [r3, #28]
 80143a2:	68d9      	ldr	r1, [r3, #12]
 80143a4:	6219      	str	r1, [r3, #32]
 80143a6:	7c1b      	ldrb	r3, [r3, #16]
 80143a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80143ac:	eb02 1505 	add.w	r5, r2, r5, lsl #4
 80143b0:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 80143b4:	e749      	b.n	801424a <nd6_get_next_hop_entry+0x2e>
        LWIP_ASSERT("type overflow", (size_t)dst_idx < NETIF_ADDR_IDX_MAX);
 80143b6:	4b43      	ldr	r3, [pc, #268]	; (80144c4 <nd6_get_next_hop_entry+0x2a8>)
 80143b8:	f240 72a9 	movw	r2, #1961	; 0x7a9
 80143bc:	4942      	ldr	r1, [pc, #264]	; (80144c8 <nd6_get_next_hop_entry+0x2ac>)
 80143be:	4843      	ldr	r0, [pc, #268]	; (80144cc <nd6_get_next_hop_entry+0x2b0>)
 80143c0:	f001 fae6 	bl	8015990 <iprintf>
 80143c4:	e7a1      	b.n	801430a <nd6_get_next_hop_entry+0xee>
      ip6_addr_set(&(destination_cache[nd6_cached_destination_index].destination_addr), ip6addr);
 80143c6:	2100      	movs	r1, #0
 80143c8:	e7a5      	b.n	8014316 <nd6_get_next_hop_entry+0xfa>
 80143ca:	2100      	movs	r1, #0
 80143cc:	e7ab      	b.n	8014326 <nd6_get_next_hop_entry+0x10a>
 80143ce:	2100      	movs	r1, #0
 80143d0:	e7b2      	b.n	8014338 <nd6_get_next_hop_entry+0x11c>
 80143d2:	2100      	movs	r1, #0
 80143d4:	e7b9      	b.n	801434a <nd6_get_next_hop_entry+0x12e>
 80143d6:	2100      	movs	r1, #0
 80143d8:	e7c0      	b.n	801435c <nd6_get_next_hop_entry+0x140>
        i = nd6_select_router(ip6addr, netif);
 80143da:	4631      	mov	r1, r6
 80143dc:	4620      	mov	r0, r4
 80143de:	f7ff f949 	bl	8013674 <nd6_select_router>
        if (i < 0) {
 80143e2:	2800      	cmp	r0, #0
 80143e4:	db1e      	blt.n	8014424 <nd6_get_next_hop_entry+0x208>
        destination_cache[nd6_cached_destination_index].pmtu = netif_mtu6(netif); /* Start with netif mtu, correct through ICMPv6 if necessary */
 80143e6:	4b33      	ldr	r3, [pc, #204]	; (80144b4 <nd6_get_next_hop_entry+0x298>)
 80143e8:	781a      	ldrb	r2, [r3, #0]
 80143ea:	f8b6 10d6 	ldrh.w	r1, [r6, #214]	; 0xd6
 80143ee:	4c32      	ldr	r4, [pc, #200]	; (80144b8 <nd6_get_next_hop_entry+0x29c>)
 80143f0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80143f4:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 80143f8:	8519      	strh	r1, [r3, #40]	; 0x28
        ip6_addr_copy(destination_cache[nd6_cached_destination_index].next_hop_addr, default_router_list[i].neighbor_entry->next_hop_address);
 80143fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80143fe:	4934      	ldr	r1, [pc, #208]	; (80144d0 <nd6_get_next_hop_entry+0x2b4>)
 8014400:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8014404:	6808      	ldr	r0, [r1, #0]
 8014406:	6158      	str	r0, [r3, #20]
 8014408:	6848      	ldr	r0, [r1, #4]
 801440a:	6198      	str	r0, [r3, #24]
 801440c:	6888      	ldr	r0, [r1, #8]
 801440e:	61d8      	str	r0, [r3, #28]
 8014410:	68c8      	ldr	r0, [r1, #12]
 8014412:	6218      	str	r0, [r3, #32]
 8014414:	7c0b      	ldrb	r3, [r1, #16]
 8014416:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801441a:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 801441e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8014422:	e712      	b.n	801424a <nd6_get_next_hop_entry+0x2e>
          ip6_addr_set_any(&(destination_cache[nd6_cached_destination_index].destination_addr));
 8014424:	4b23      	ldr	r3, [pc, #140]	; (80144b4 <nd6_get_next_hop_entry+0x298>)
 8014426:	781b      	ldrb	r3, [r3, #0]
 8014428:	4823      	ldr	r0, [pc, #140]	; (80144b8 <nd6_get_next_hop_entry+0x29c>)
 801442a:	2130      	movs	r1, #48	; 0x30
 801442c:	fb01 f103 	mul.w	r1, r1, r3
 8014430:	1842      	adds	r2, r0, r1
 8014432:	2300      	movs	r3, #0
 8014434:	5043      	str	r3, [r0, r1]
 8014436:	6053      	str	r3, [r2, #4]
 8014438:	6093      	str	r3, [r2, #8]
 801443a:	60d3      	str	r3, [r2, #12]
 801443c:	7413      	strb	r3, [r2, #16]
          return ERR_RTE;
 801443e:	f06f 0003 	mvn.w	r0, #3
 8014442:	e72e      	b.n	80142a2 <nd6_get_next_hop_entry+0x86>
  if (ip6_addr_cmp(&(destination_cache[nd6_cached_destination_index].next_hop_addr),
 8014444:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8014448:	491b      	ldr	r1, [pc, #108]	; (80144b8 <nd6_get_next_hop_entry+0x29c>)
 801444a:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 801444e:	6999      	ldr	r1, [r3, #24]
 8014450:	232c      	movs	r3, #44	; 0x2c
 8014452:	fb03 4302 	mla	r3, r3, r2, r4
 8014456:	685b      	ldr	r3, [r3, #4]
 8014458:	4299      	cmp	r1, r3
 801445a:	f47f af08 	bne.w	801426e <nd6_get_next_hop_entry+0x52>
 801445e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8014462:	4915      	ldr	r1, [pc, #84]	; (80144b8 <nd6_get_next_hop_entry+0x29c>)
 8014464:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8014468:	69d9      	ldr	r1, [r3, #28]
 801446a:	232c      	movs	r3, #44	; 0x2c
 801446c:	fb03 4302 	mla	r3, r3, r2, r4
 8014470:	689b      	ldr	r3, [r3, #8]
 8014472:	4299      	cmp	r1, r3
 8014474:	f47f aefb 	bne.w	801426e <nd6_get_next_hop_entry+0x52>
 8014478:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801447c:	490e      	ldr	r1, [pc, #56]	; (80144b8 <nd6_get_next_hop_entry+0x29c>)
 801447e:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8014482:	6a19      	ldr	r1, [r3, #32]
 8014484:	232c      	movs	r3, #44	; 0x2c
 8014486:	fb03 4302 	mla	r3, r3, r2, r4
 801448a:	68db      	ldr	r3, [r3, #12]
 801448c:	4299      	cmp	r1, r3
 801448e:	f47f aeee 	bne.w	801426e <nd6_get_next_hop_entry+0x52>
 8014492:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8014496:	4908      	ldr	r1, [pc, #32]	; (80144b8 <nd6_get_next_hop_entry+0x29c>)
 8014498:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 801449c:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 80144a0:	4623      	mov	r3, r4
 80144a2:	242c      	movs	r4, #44	; 0x2c
 80144a4:	fb04 3202 	mla	r2, r4, r2, r3
 80144a8:	7c13      	ldrb	r3, [r2, #16]
 80144aa:	4299      	cmp	r1, r3
 80144ac:	f47f aedf 	bne.w	801426e <nd6_get_next_hop_entry+0x52>
 80144b0:	e6eb      	b.n	801428a <nd6_get_next_hop_entry+0x6e>
 80144b2:	bf00      	nop
 80144b4:	20000c08 	.word	0x20000c08
 80144b8:	20008240 	.word	0x20008240
 80144bc:	20000c09 	.word	0x20000c09
 80144c0:	20007ffc 	.word	0x20007ffc
 80144c4:	0801a958 	.word	0x0801a958
 80144c8:	0801a248 	.word	0x0801a248
 80144cc:	08016bb4 	.word	0x08016bb4
 80144d0:	20008420 	.word	0x20008420
      i = nd6_new_neighbor_cache_entry();
 80144d4:	f7ff fbc6 	bl	8013c64 <nd6_new_neighbor_cache_entry>
      if (i >= 0) {
 80144d8:	2800      	cmp	r0, #0
 80144da:	db2a      	blt.n	8014532 <nd6_get_next_hop_entry+0x316>
        nd6_cached_neighbor_index = i;
 80144dc:	4b16      	ldr	r3, [pc, #88]	; (8014538 <nd6_get_next_hop_entry+0x31c>)
 80144de:	7018      	strb	r0, [r3, #0]
      ip6_addr_copy(neighbor_cache[i].next_hop_address,
 80144e0:	4b16      	ldr	r3, [pc, #88]	; (801453c <nd6_get_next_hop_entry+0x320>)
 80144e2:	781b      	ldrb	r3, [r3, #0]
 80144e4:	4916      	ldr	r1, [pc, #88]	; (8014540 <nd6_get_next_hop_entry+0x324>)
 80144e6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80144ea:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80144ee:	6955      	ldr	r5, [r2, #20]
 80144f0:	4f14      	ldr	r7, [pc, #80]	; (8014544 <nd6_get_next_hop_entry+0x328>)
 80144f2:	242c      	movs	r4, #44	; 0x2c
 80144f4:	fb04 f400 	mul.w	r4, r4, r0
 80144f8:	1938      	adds	r0, r7, r4
 80144fa:	513d      	str	r5, [r7, r4]
 80144fc:	6994      	ldr	r4, [r2, #24]
 80144fe:	6044      	str	r4, [r0, #4]
 8014500:	69d4      	ldr	r4, [r2, #28]
 8014502:	6084      	str	r4, [r0, #8]
 8014504:	6a12      	ldr	r2, [r2, #32]
 8014506:	60c2      	str	r2, [r0, #12]
 8014508:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801450c:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8014510:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014514:	7403      	strb	r3, [r0, #16]
      neighbor_cache[i].isrouter = 0;
 8014516:	2300      	movs	r3, #0
 8014518:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      neighbor_cache[i].netif = netif;
 801451c:	6146      	str	r6, [r0, #20]
      neighbor_cache[i].state = ND6_INCOMPLETE;
 801451e:	2101      	movs	r1, #1
 8014520:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
      neighbor_cache[i].counter.probes_sent = 1;
 8014524:	6281      	str	r1, [r0, #40]	; 0x28
      nd6_send_neighbor_cache_probe(&neighbor_cache[i], ND6_SEND_FLAG_MULTICAST_DEST);
 8014526:	f7ff fdf1 	bl	801410c <nd6_send_neighbor_cache_probe>
 801452a:	e6ae      	b.n	801428a <nd6_get_next_hop_entry+0x6e>
        return ERR_MEM;
 801452c:	f04f 30ff 	mov.w	r0, #4294967295
 8014530:	e6b7      	b.n	80142a2 <nd6_get_next_hop_entry+0x86>
        return ERR_MEM;
 8014532:	f04f 30ff 	mov.w	r0, #4294967295
 8014536:	e6b4      	b.n	80142a2 <nd6_get_next_hop_entry+0x86>
 8014538:	20000c09 	.word	0x20000c09
 801453c:	20000c08 	.word	0x20000c08
 8014540:	20008240 	.word	0x20008240
 8014544:	20007ffc 	.word	0x20007ffc

08014548 <nd6_queue_packet>:
  if ((neighbor_index < 0) || (neighbor_index >= LWIP_ND6_NUM_NEIGHBORS)) {
 8014548:	b2c3      	uxtb	r3, r0
 801454a:	2b09      	cmp	r3, #9
 801454c:	d86b      	bhi.n	8014626 <nd6_queue_packet+0xde>
{
 801454e:	b570      	push	{r4, r5, r6, lr}
 8014550:	4605      	mov	r5, r0
 8014552:	460e      	mov	r6, r1
  p = q;
 8014554:	460b      	mov	r3, r1
  while (p) {
 8014556:	b133      	cbz	r3, 8014566 <nd6_queue_packet+0x1e>
    if (PBUF_NEEDS_COPY(p)) {
 8014558:	7b1a      	ldrb	r2, [r3, #12]
 801455a:	f012 0f40 	tst.w	r2, #64	; 0x40
 801455e:	d101      	bne.n	8014564 <nd6_queue_packet+0x1c>
    p = p->next;
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	e7f8      	b.n	8014556 <nd6_queue_packet+0xe>
      copy_needed = 1;
 8014564:	2301      	movs	r3, #1
  if (copy_needed) {
 8014566:	b1fb      	cbz	r3, 80145a8 <nd6_queue_packet+0x60>
    p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014568:	4632      	mov	r2, r6
 801456a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801456e:	200e      	movs	r0, #14
 8014570:	f7f4 f904 	bl	800877c <pbuf_clone>
 8014574:	4604      	mov	r4, r0
    while ((p == NULL) && (neighbor_cache[neighbor_index].q != NULL)) {
 8014576:	b9dc      	cbnz	r4, 80145b0 <nd6_queue_packet+0x68>
 8014578:	4a2e      	ldr	r2, [pc, #184]	; (8014634 <nd6_queue_packet+0xec>)
 801457a:	232c      	movs	r3, #44	; 0x2c
 801457c:	fb03 2305 	mla	r3, r3, r5, r2
 8014580:	6a18      	ldr	r0, [r3, #32]
 8014582:	b1a8      	cbz	r0, 80145b0 <nd6_queue_packet+0x68>
      neighbor_cache[neighbor_index].q = r->next;
 8014584:	6802      	ldr	r2, [r0, #0]
 8014586:	492b      	ldr	r1, [pc, #172]	; (8014634 <nd6_queue_packet+0xec>)
 8014588:	232c      	movs	r3, #44	; 0x2c
 801458a:	fb03 1305 	mla	r3, r3, r5, r1
 801458e:	621a      	str	r2, [r3, #32]
      r->next = NULL;
 8014590:	2300      	movs	r3, #0
 8014592:	6003      	str	r3, [r0, #0]
      nd6_free_q(r);
 8014594:	f7ff fb02 	bl	8013b9c <nd6_free_q>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014598:	4632      	mov	r2, r6
 801459a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801459e:	200e      	movs	r0, #14
 80145a0:	f7f4 f8ec 	bl	800877c <pbuf_clone>
 80145a4:	4604      	mov	r4, r0
 80145a6:	e7e6      	b.n	8014576 <nd6_queue_packet+0x2e>
    pbuf_ref(p);
 80145a8:	4630      	mov	r0, r6
 80145aa:	f7f3 ff0d 	bl	80083c8 <pbuf_ref>
    p = q;
 80145ae:	4634      	mov	r4, r6
  if (p != NULL) {
 80145b0:	2c00      	cmp	r4, #0
 80145b2:	d03b      	beq.n	801462c <nd6_queue_packet+0xe4>
    new_entry = (struct nd6_q_entry *)memp_malloc(MEMP_ND6_QUEUE);
 80145b4:	2008      	movs	r0, #8
 80145b6:	f7f3 f8dd 	bl	8007774 <memp_malloc>
    if ((new_entry == NULL) && (neighbor_cache[neighbor_index].q != NULL)) {
 80145ba:	4601      	mov	r1, r0
 80145bc:	b180      	cbz	r0, 80145e0 <nd6_queue_packet+0x98>
    if (new_entry != NULL) {
 80145be:	b361      	cbz	r1, 801461a <nd6_queue_packet+0xd2>
      new_entry->next = NULL;
 80145c0:	2300      	movs	r3, #0
 80145c2:	600b      	str	r3, [r1, #0]
      new_entry->p = p;
 80145c4:	604c      	str	r4, [r1, #4]
      if (neighbor_cache[neighbor_index].q != NULL) {
 80145c6:	4a1b      	ldr	r2, [pc, #108]	; (8014634 <nd6_queue_packet+0xec>)
 80145c8:	232c      	movs	r3, #44	; 0x2c
 80145ca:	fb03 2305 	mla	r3, r3, r5, r2
 80145ce:	6a1b      	ldr	r3, [r3, #32]
 80145d0:	b1e3      	cbz	r3, 801460c <nd6_queue_packet+0xc4>
        while (r->next != NULL) {
 80145d2:	461a      	mov	r2, r3
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d1fb      	bne.n	80145d2 <nd6_queue_packet+0x8a>
        r->next = new_entry;
 80145da:	6011      	str	r1, [r2, #0]
      result = ERR_OK;
 80145dc:	2000      	movs	r0, #0
}
 80145de:	bd70      	pop	{r4, r5, r6, pc}
    if ((new_entry == NULL) && (neighbor_cache[neighbor_index].q != NULL)) {
 80145e0:	4a14      	ldr	r2, [pc, #80]	; (8014634 <nd6_queue_packet+0xec>)
 80145e2:	232c      	movs	r3, #44	; 0x2c
 80145e4:	fb03 2305 	mla	r3, r3, r5, r2
 80145e8:	6a18      	ldr	r0, [r3, #32]
 80145ea:	2800      	cmp	r0, #0
 80145ec:	d0e7      	beq.n	80145be <nd6_queue_packet+0x76>
      neighbor_cache[neighbor_index].q = r->next;
 80145ee:	6802      	ldr	r2, [r0, #0]
 80145f0:	4910      	ldr	r1, [pc, #64]	; (8014634 <nd6_queue_packet+0xec>)
 80145f2:	232c      	movs	r3, #44	; 0x2c
 80145f4:	fb03 1305 	mla	r3, r3, r5, r1
 80145f8:	621a      	str	r2, [r3, #32]
      r->next = NULL;
 80145fa:	2300      	movs	r3, #0
 80145fc:	6003      	str	r3, [r0, #0]
      nd6_free_q(r);
 80145fe:	f7ff facd 	bl	8013b9c <nd6_free_q>
      new_entry = (struct nd6_q_entry *)memp_malloc(MEMP_ND6_QUEUE);
 8014602:	2008      	movs	r0, #8
 8014604:	f7f3 f8b6 	bl	8007774 <memp_malloc>
 8014608:	4601      	mov	r1, r0
 801460a:	e7d8      	b.n	80145be <nd6_queue_packet+0x76>
        neighbor_cache[neighbor_index].q = new_entry;
 801460c:	4b09      	ldr	r3, [pc, #36]	; (8014634 <nd6_queue_packet+0xec>)
 801460e:	222c      	movs	r2, #44	; 0x2c
 8014610:	fb02 3505 	mla	r5, r2, r5, r3
 8014614:	6229      	str	r1, [r5, #32]
      result = ERR_OK;
 8014616:	2000      	movs	r0, #0
 8014618:	e7e1      	b.n	80145de <nd6_queue_packet+0x96>
      pbuf_free(p);
 801461a:	4620      	mov	r0, r4
 801461c:	f7f3 fd68 	bl	80080f0 <pbuf_free>
  err_t result = ERR_MEM;
 8014620:	f04f 30ff 	mov.w	r0, #4294967295
 8014624:	e7db      	b.n	80145de <nd6_queue_packet+0x96>
    return ERR_ARG;
 8014626:	f06f 000f 	mvn.w	r0, #15
}
 801462a:	4770      	bx	lr
  err_t result = ERR_MEM;
 801462c:	f04f 30ff 	mov.w	r0, #4294967295
 8014630:	e7d5      	b.n	80145de <nd6_queue_packet+0x96>
 8014632:	bf00      	nop
 8014634:	20007ffc 	.word	0x20007ffc

08014638 <nd6_input>:
{
 8014638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801463c:	b08b      	sub	sp, #44	; 0x2c
 801463e:	4604      	mov	r4, r0
 8014640:	460e      	mov	r6, r1
  msg_type = *((u8_t *)p->payload);
 8014642:	6845      	ldr	r5, [r0, #4]
 8014644:	782b      	ldrb	r3, [r5, #0]
  switch (msg_type) {
 8014646:	2b02      	cmp	r3, #2
 8014648:	f000 8441 	beq.w	8014ece <nd6_input+0x896>
 801464c:	f0c0 847b 	bcc.w	8014f46 <nd6_input+0x90e>
 8014650:	2b89      	cmp	r3, #137	; 0x89
 8014652:	f200 8478 	bhi.w	8014f46 <nd6_input+0x90e>
 8014656:	2b86      	cmp	r3, #134	; 0x86
 8014658:	f0c0 8475 	bcc.w	8014f46 <nd6_input+0x90e>
 801465c:	3b86      	subs	r3, #134	; 0x86
 801465e:	2b03      	cmp	r3, #3
 8014660:	f200 8471 	bhi.w	8014f46 <nd6_input+0x90e>
 8014664:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014668:	00ea022c 	.word	0x00ea022c
 801466c:	03670004 	.word	0x03670004
    if (p->len < (sizeof(struct na_header))) {
 8014670:	8943      	ldrh	r3, [r0, #10]
 8014672:	2b17      	cmp	r3, #23
 8014674:	d960      	bls.n	8014738 <nd6_input+0x100>
    ip6_addr_copy_from_packed(target_address, na_hdr->target_address);
 8014676:	68aa      	ldr	r2, [r5, #8]
 8014678:	9205      	str	r2, [sp, #20]
 801467a:	68e8      	ldr	r0, [r5, #12]
 801467c:	9006      	str	r0, [sp, #24]
 801467e:	692f      	ldr	r7, [r5, #16]
 8014680:	9707      	str	r7, [sp, #28]
 8014682:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8014686:	f8cd c020 	str.w	ip, [sp, #32]
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 801468a:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 801468e:	4011      	ands	r1, r2
 8014690:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8014694:	4299      	cmp	r1, r3
 8014696:	d053      	beq.n	8014740 <nd6_input+0x108>
 8014698:	2300      	movs	r3, #0
 801469a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || na_hdr->code != 0 ||
 801469e:	499c      	ldr	r1, [pc, #624]	; (8014910 <nd6_input+0x2d8>)
 80146a0:	68c9      	ldr	r1, [r1, #12]
 80146a2:	79c9      	ldrb	r1, [r1, #7]
 80146a4:	29ff      	cmp	r1, #255	; 0xff
 80146a6:	d150      	bne.n	801474a <nd6_input+0x112>
 80146a8:	7869      	ldrb	r1, [r5, #1]
 80146aa:	2900      	cmp	r1, #0
 80146ac:	d14d      	bne.n	801474a <nd6_input+0x112>
        ip6_addr_ismulticast(&target_address)) {
 80146ae:	b2d1      	uxtb	r1, r2
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || na_hdr->code != 0 ||
 80146b0:	29ff      	cmp	r1, #255	; 0xff
 80146b2:	d04a      	beq.n	801474a <nd6_input+0x112>
    if (ip6_addr_ismulticast(ip6_current_dest_addr())) {
 80146b4:	4996      	ldr	r1, [pc, #600]	; (8014910 <nd6_input+0x2d8>)
 80146b6:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
 80146ba:	29ff      	cmp	r1, #255	; 0xff
 80146bc:	f000 8086 	beq.w	80147cc <nd6_input+0x194>
      i = nd6_find_neighbor_cache_entry(&target_address);
 80146c0:	a805      	add	r0, sp, #20
 80146c2:	f7fe fecd 	bl	8013460 <nd6_find_neighbor_cache_entry>
      if (i < 0) {
 80146c6:	1e07      	subs	r7, r0, #0
 80146c8:	f2c0 80ac 	blt.w	8014824 <nd6_input+0x1ec>
      if ((na_hdr->flags & ND6_FLAG_OVERRIDE) ||
 80146cc:	792b      	ldrb	r3, [r5, #4]
 80146ce:	f013 0f20 	tst.w	r3, #32
 80146d2:	d107      	bne.n	80146e4 <nd6_input+0xac>
          (neighbor_cache[i].state == ND6_INCOMPLETE)) {
 80146d4:	4a8f      	ldr	r2, [pc, #572]	; (8014914 <nd6_input+0x2dc>)
 80146d6:	232c      	movs	r3, #44	; 0x2c
 80146d8:	fb03 2307 	mla	r3, r3, r7, r2
 80146dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if ((na_hdr->flags & ND6_FLAG_OVERRIDE) ||
 80146e0:	2b01      	cmp	r3, #1
 80146e2:	d115      	bne.n	8014710 <nd6_input+0xd8>
        if (p->len < (sizeof(struct na_header) + 2)) {
 80146e4:	8962      	ldrh	r2, [r4, #10]
 80146e6:	2a19      	cmp	r2, #25
 80146e8:	f240 80a0 	bls.w	801482c <nd6_input+0x1f4>
        lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct na_header));
 80146ec:	6861      	ldr	r1, [r4, #4]
        if (p->len < (sizeof(struct na_header) + (lladdr_opt->length << 3))) {
 80146ee:	7e4b      	ldrb	r3, [r1, #25]
 80146f0:	00db      	lsls	r3, r3, #3
 80146f2:	3318      	adds	r3, #24
 80146f4:	429a      	cmp	r2, r3
 80146f6:	f0c0 809d 	bcc.w	8014834 <nd6_input+0x1fc>
        MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 80146fa:	232c      	movs	r3, #44	; 0x2c
 80146fc:	fb03 f307 	mul.w	r3, r3, r7
 8014700:	3318      	adds	r3, #24
 8014702:	f896 20de 	ldrb.w	r2, [r6, #222]	; 0xde
 8014706:	311a      	adds	r1, #26
 8014708:	4882      	ldr	r0, [pc, #520]	; (8014914 <nd6_input+0x2dc>)
 801470a:	4418      	add	r0, r3
 801470c:	f001 f910 	bl	8015930 <memcpy>
      neighbor_cache[i].netif = inp;
 8014710:	4a80      	ldr	r2, [pc, #512]	; (8014914 <nd6_input+0x2dc>)
 8014712:	232c      	movs	r3, #44	; 0x2c
 8014714:	fb03 2307 	mla	r3, r3, r7, r2
 8014718:	615e      	str	r6, [r3, #20]
      neighbor_cache[i].state = ND6_REACHABLE;
 801471a:	2202      	movs	r2, #2
 801471c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      neighbor_cache[i].counter.reachable_time = reachable_time;
 8014720:	4a7d      	ldr	r2, [pc, #500]	; (8014918 <nd6_input+0x2e0>)
 8014722:	6812      	ldr	r2, [r2, #0]
 8014724:	629a      	str	r2, [r3, #40]	; 0x28
      if (neighbor_cache[i].q != NULL) {
 8014726:	6a1b      	ldr	r3, [r3, #32]
 8014728:	2b00      	cmp	r3, #0
 801472a:	f000 840c 	beq.w	8014f46 <nd6_input+0x90e>
        nd6_send_q(i);
 801472e:	4638      	mov	r0, r7
 8014730:	f7ff f8d0 	bl	80138d4 <nd6_send_q>
 8014734:	f000 bc07 	b.w	8014f46 <nd6_input+0x90e>
      pbuf_free(p);
 8014738:	f7f3 fcda 	bl	80080f0 <pbuf_free>
      return;
 801473c:	f000 bc06 	b.w	8014f4c <nd6_input+0x914>
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 8014740:	f896 30e2 	ldrb.w	r3, [r6, #226]	; 0xe2
 8014744:	3301      	adds	r3, #1
 8014746:	b2db      	uxtb	r3, r3
 8014748:	e7a7      	b.n	801469a <nd6_input+0x62>
      pbuf_free(p);
 801474a:	4620      	mov	r0, r4
 801474c:	f7f3 fcd0 	bl	80080f0 <pbuf_free>
      return;
 8014750:	e3fc      	b.n	8014f4c <nd6_input+0x914>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8014752:	3101      	adds	r1, #1
 8014754:	b249      	sxtb	r1, r1
 8014756:	2902      	cmp	r1, #2
 8014758:	dc3a      	bgt.n	80147d0 <nd6_input+0x198>
        if (!ip6_addr_isinvalid(netif_ip6_addr_state(inp, i)) &&
 801475a:	eb06 0e01 	add.w	lr, r6, r1
 801475e:	f89e e094 	ldrb.w	lr, [lr, #148]	; 0x94
 8014762:	f1be 0f00 	cmp.w	lr, #0
 8014766:	d0f4      	beq.n	8014752 <nd6_input+0x11a>
 8014768:	f1be 0f40 	cmp.w	lr, #64	; 0x40
 801476c:	d0f1      	beq.n	8014752 <nd6_input+0x11a>
            ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 801476e:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
 8014772:	eb06 0ece 	add.w	lr, r6, lr, lsl #3
 8014776:	f8de e04c 	ldr.w	lr, [lr, #76]	; 0x4c
            !ip6_addr_isduplicated(netif_ip6_addr_state(inp, i)) &&
 801477a:	4572      	cmp	r2, lr
 801477c:	d1e9      	bne.n	8014752 <nd6_input+0x11a>
            ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 801477e:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
 8014782:	eb06 0ece 	add.w	lr, r6, lr, lsl #3
 8014786:	f8de e050 	ldr.w	lr, [lr, #80]	; 0x50
 801478a:	4570      	cmp	r0, lr
 801478c:	d1e1      	bne.n	8014752 <nd6_input+0x11a>
 801478e:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
 8014792:	eb06 0ece 	add.w	lr, r6, lr, lsl #3
 8014796:	f8de e054 	ldr.w	lr, [lr, #84]	; 0x54
 801479a:	4577      	cmp	r7, lr
 801479c:	d1d9      	bne.n	8014752 <nd6_input+0x11a>
 801479e:	f04f 0e18 	mov.w	lr, #24
 80147a2:	fb0e 6e01 	mla	lr, lr, r1, r6
 80147a6:	f8de e058 	ldr.w	lr, [lr, #88]	; 0x58
 80147aa:	45f4      	cmp	ip, lr
 80147ac:	d1d1      	bne.n	8014752 <nd6_input+0x11a>
 80147ae:	f04f 0e18 	mov.w	lr, #24
 80147b2:	fb0e 6801 	mla	r8, lr, r1, r6
 80147b6:	f898 e05c 	ldrb.w	lr, [r8, #92]	; 0x5c
 80147ba:	459e      	cmp	lr, r3
 80147bc:	d1c9      	bne.n	8014752 <nd6_input+0x11a>
          nd6_duplicate_addr_detected(inp, i);
 80147be:	4630      	mov	r0, r6
 80147c0:	f7ff f8da 	bl	8013978 <nd6_duplicate_addr_detected>
          pbuf_free(p);
 80147c4:	4620      	mov	r0, r4
 80147c6:	f7f3 fc93 	bl	80080f0 <pbuf_free>
          return;
 80147ca:	e3bf      	b.n	8014f4c <nd6_input+0x914>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80147cc:	2100      	movs	r1, #0
 80147ce:	e7c2      	b.n	8014756 <nd6_input+0x11e>
      if (p->len < (sizeof(struct na_header) + 2)) {
 80147d0:	8962      	ldrh	r2, [r4, #10]
 80147d2:	2a19      	cmp	r2, #25
 80147d4:	d91e      	bls.n	8014814 <nd6_input+0x1dc>
      lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct na_header));
 80147d6:	6867      	ldr	r7, [r4, #4]
      if (p->len < (sizeof(struct na_header) + (lladdr_opt->length << 3))) {
 80147d8:	7e7b      	ldrb	r3, [r7, #25]
 80147da:	00db      	lsls	r3, r3, #3
 80147dc:	3318      	adds	r3, #24
 80147de:	429a      	cmp	r2, r3
 80147e0:	d31c      	bcc.n	801481c <nd6_input+0x1e4>
      i = nd6_find_neighbor_cache_entry(&target_address);
 80147e2:	a805      	add	r0, sp, #20
 80147e4:	f7fe fe3c 	bl	8013460 <nd6_find_neighbor_cache_entry>
      if (i >= 0) {
 80147e8:	2800      	cmp	r0, #0
 80147ea:	f2c0 83ac 	blt.w	8014f46 <nd6_input+0x90e>
        if (na_hdr->flags & ND6_FLAG_OVERRIDE) {
 80147ee:	792b      	ldrb	r3, [r5, #4]
 80147f0:	f013 0f20 	tst.w	r3, #32
 80147f4:	f000 83a7 	beq.w	8014f46 <nd6_input+0x90e>
          MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 80147f8:	232c      	movs	r3, #44	; 0x2c
 80147fa:	fb03 f000 	mul.w	r0, r3, r0
 80147fe:	f100 0318 	add.w	r3, r0, #24
 8014802:	f896 20de 	ldrb.w	r2, [r6, #222]	; 0xde
 8014806:	f107 011a 	add.w	r1, r7, #26
 801480a:	4842      	ldr	r0, [pc, #264]	; (8014914 <nd6_input+0x2dc>)
 801480c:	4418      	add	r0, r3
 801480e:	f001 f88f 	bl	8015930 <memcpy>
 8014812:	e398      	b.n	8014f46 <nd6_input+0x90e>
        pbuf_free(p);
 8014814:	4620      	mov	r0, r4
 8014816:	f7f3 fc6b 	bl	80080f0 <pbuf_free>
        return;
 801481a:	e397      	b.n	8014f4c <nd6_input+0x914>
        pbuf_free(p);
 801481c:	4620      	mov	r0, r4
 801481e:	f7f3 fc67 	bl	80080f0 <pbuf_free>
        return;
 8014822:	e393      	b.n	8014f4c <nd6_input+0x914>
        pbuf_free(p);
 8014824:	4620      	mov	r0, r4
 8014826:	f7f3 fc63 	bl	80080f0 <pbuf_free>
        return;
 801482a:	e38f      	b.n	8014f4c <nd6_input+0x914>
          pbuf_free(p);
 801482c:	4620      	mov	r0, r4
 801482e:	f7f3 fc5f 	bl	80080f0 <pbuf_free>
          return;
 8014832:	e38b      	b.n	8014f4c <nd6_input+0x914>
          pbuf_free(p);
 8014834:	4620      	mov	r0, r4
 8014836:	f7f3 fc5b 	bl	80080f0 <pbuf_free>
          return;
 801483a:	e387      	b.n	8014f4c <nd6_input+0x914>
    if (p->len < sizeof(struct ns_header)) {
 801483c:	8943      	ldrh	r3, [r0, #10]
 801483e:	2b17      	cmp	r3, #23
 8014840:	d931      	bls.n	80148a6 <nd6_input+0x26e>
    ip6_addr_copy_from_packed(target_address, ns_hdr->target_address);
 8014842:	68a8      	ldr	r0, [r5, #8]
 8014844:	9005      	str	r0, [sp, #20]
 8014846:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 801484a:	f8cd c018 	str.w	ip, [sp, #24]
 801484e:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8014852:	f8cd e01c 	str.w	lr, [sp, #28]
 8014856:	f8d5 8014 	ldr.w	r8, [r5, #20]
 801485a:	f8cd 8020 	str.w	r8, [sp, #32]
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 801485e:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8014862:	4002      	ands	r2, r0
 8014864:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8014868:	429a      	cmp	r2, r3
 801486a:	d01f      	beq.n	80148ac <nd6_input+0x274>
 801486c:	2700      	movs	r7, #0
 801486e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ns_hdr->code != 0 ||
 8014872:	4b27      	ldr	r3, [pc, #156]	; (8014910 <nd6_input+0x2d8>)
 8014874:	68db      	ldr	r3, [r3, #12]
 8014876:	79db      	ldrb	r3, [r3, #7]
 8014878:	2bff      	cmp	r3, #255	; 0xff
 801487a:	d11c      	bne.n	80148b6 <nd6_input+0x27e>
 801487c:	f895 9001 	ldrb.w	r9, [r5, #1]
 8014880:	f1b9 0f00 	cmp.w	r9, #0
 8014884:	d117      	bne.n	80148b6 <nd6_input+0x27e>
       ip6_addr_ismulticast(&target_address)) {
 8014886:	b2c3      	uxtb	r3, r0
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ns_hdr->code != 0 ||
 8014888:	2bff      	cmp	r3, #255	; 0xff
 801488a:	d014      	beq.n	80148b6 <nd6_input+0x27e>
    if (p->len >= (sizeof(struct ns_header) + 2)) {
 801488c:	8962      	ldrh	r2, [r4, #10]
 801488e:	2a19      	cmp	r2, #25
 8014890:	d915      	bls.n	80148be <nd6_input+0x286>
      lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct ns_header));
 8014892:	6863      	ldr	r3, [r4, #4]
 8014894:	f103 0518 	add.w	r5, r3, #24
      if (p->len < (sizeof(struct ns_header) + (lladdr_opt->length << 3))) {
 8014898:	7e5b      	ldrb	r3, [r3, #25]
 801489a:	00db      	lsls	r3, r3, #3
 801489c:	3318      	adds	r3, #24
 801489e:	429a      	cmp	r2, r3
 80148a0:	d20e      	bcs.n	80148c0 <nd6_input+0x288>
        lladdr_opt = NULL;
 80148a2:	2500      	movs	r5, #0
 80148a4:	e00c      	b.n	80148c0 <nd6_input+0x288>
      pbuf_free(p);
 80148a6:	f7f3 fc23 	bl	80080f0 <pbuf_free>
      return;
 80148aa:	e34f      	b.n	8014f4c <nd6_input+0x914>
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 80148ac:	f891 70e2 	ldrb.w	r7, [r1, #226]	; 0xe2
 80148b0:	3701      	adds	r7, #1
 80148b2:	b2ff      	uxtb	r7, r7
 80148b4:	e7db      	b.n	801486e <nd6_input+0x236>
      pbuf_free(p);
 80148b6:	4620      	mov	r0, r4
 80148b8:	f7f3 fc1a 	bl	80080f0 <pbuf_free>
      return;
 80148bc:	e346      	b.n	8014f4c <nd6_input+0x914>
      lladdr_opt = NULL;
 80148be:	2500      	movs	r5, #0
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 80148c0:	2100      	movs	r1, #0
 80148c2:	e008      	b.n	80148d6 <nd6_input+0x29e>
          ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 80148c4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80148c8:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80148cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
            ip6_addr_isany(ip6_current_src_addr()))) &&
 80148ce:	4290      	cmp	r0, r2
 80148d0:	d024      	beq.n	801491c <nd6_input+0x2e4>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 80148d2:	3101      	adds	r1, #1
 80148d4:	b249      	sxtb	r1, r1
 80148d6:	2902      	cmp	r1, #2
 80148d8:	dc3e      	bgt.n	8014958 <nd6_input+0x320>
      if ((ip6_addr_isvalid(netif_ip6_addr_state(inp, i)) ||
 80148da:	460b      	mov	r3, r1
 80148dc:	1872      	adds	r2, r6, r1
 80148de:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
 80148e2:	f012 0f10 	tst.w	r2, #16
 80148e6:	d1ed      	bne.n	80148c4 <nd6_input+0x28c>
 80148e8:	f012 0f08 	tst.w	r2, #8
 80148ec:	d0f1      	beq.n	80148d2 <nd6_input+0x29a>
            ip6_addr_isany(ip6_current_src_addr()))) &&
 80148ee:	4a08      	ldr	r2, [pc, #32]	; (8014910 <nd6_input+0x2d8>)
 80148f0:	6952      	ldr	r2, [r2, #20]
           (ip6_addr_istentative(netif_ip6_addr_state(inp, i)) &&
 80148f2:	2a00      	cmp	r2, #0
 80148f4:	d1ed      	bne.n	80148d2 <nd6_input+0x29a>
            ip6_addr_isany(ip6_current_src_addr()))) &&
 80148f6:	4a06      	ldr	r2, [pc, #24]	; (8014910 <nd6_input+0x2d8>)
 80148f8:	6992      	ldr	r2, [r2, #24]
 80148fa:	2a00      	cmp	r2, #0
 80148fc:	d1e9      	bne.n	80148d2 <nd6_input+0x29a>
 80148fe:	4a04      	ldr	r2, [pc, #16]	; (8014910 <nd6_input+0x2d8>)
 8014900:	69d2      	ldr	r2, [r2, #28]
 8014902:	2a00      	cmp	r2, #0
 8014904:	d1e5      	bne.n	80148d2 <nd6_input+0x29a>
 8014906:	4a02      	ldr	r2, [pc, #8]	; (8014910 <nd6_input+0x2d8>)
 8014908:	6a12      	ldr	r2, [r2, #32]
 801490a:	2a00      	cmp	r2, #0
 801490c:	d1e1      	bne.n	80148d2 <nd6_input+0x29a>
 801490e:	e7d9      	b.n	80148c4 <nd6_input+0x28c>
 8014910:	20003e34 	.word	0x20003e34
 8014914:	20007ffc 	.word	0x20007ffc
 8014918:	20000014 	.word	0x20000014
          ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 801491c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8014920:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8014924:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8014926:	4594      	cmp	ip, r2
 8014928:	d1d3      	bne.n	80148d2 <nd6_input+0x29a>
 801492a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801492e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8014932:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8014934:	4596      	cmp	lr, r2
 8014936:	d1cc      	bne.n	80148d2 <nd6_input+0x29a>
 8014938:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801493c:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8014940:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8014942:	4590      	cmp	r8, r2
 8014944:	d1c5      	bne.n	80148d2 <nd6_input+0x29a>
 8014946:	2218      	movs	r2, #24
 8014948:	fb02 6303 	mla	r3, r2, r3, r6
 801494c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8014950:	42bb      	cmp	r3, r7
 8014952:	d1be      	bne.n	80148d2 <nd6_input+0x29a>
        accepted = 1;
 8014954:	f04f 0901 	mov.w	r9, #1
    if (!accepted) {
 8014958:	f1b9 0f00 	cmp.w	r9, #0
 801495c:	d021      	beq.n	80149a2 <nd6_input+0x36a>
    if (ip6_addr_isany(ip6_current_src_addr())) {
 801495e:	4bb7      	ldr	r3, [pc, #732]	; (8014c3c <nd6_input+0x604>)
 8014960:	695b      	ldr	r3, [r3, #20]
 8014962:	b94b      	cbnz	r3, 8014978 <nd6_input+0x340>
 8014964:	4bb5      	ldr	r3, [pc, #724]	; (8014c3c <nd6_input+0x604>)
 8014966:	699b      	ldr	r3, [r3, #24]
 8014968:	b933      	cbnz	r3, 8014978 <nd6_input+0x340>
 801496a:	4bb4      	ldr	r3, [pc, #720]	; (8014c3c <nd6_input+0x604>)
 801496c:	69db      	ldr	r3, [r3, #28]
 801496e:	b91b      	cbnz	r3, 8014978 <nd6_input+0x340>
 8014970:	4bb2      	ldr	r3, [pc, #712]	; (8014c3c <nd6_input+0x604>)
 8014972:	6a1b      	ldr	r3, [r3, #32]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d05e      	beq.n	8014a36 <nd6_input+0x3fe>
      if (lladdr_opt == NULL) {
 8014978:	2d00      	cmp	r5, #0
 801497a:	d05e      	beq.n	8014a3a <nd6_input+0x402>
      i = nd6_find_neighbor_cache_entry(ip6_current_src_addr());
 801497c:	48b0      	ldr	r0, [pc, #704]	; (8014c40 <nd6_input+0x608>)
 801497e:	f7fe fd6f 	bl	8013460 <nd6_find_neighbor_cache_entry>
      if (i>= 0) {
 8014982:	2800      	cmp	r0, #0
 8014984:	db70      	blt.n	8014a68 <nd6_input+0x430>
        if (neighbor_cache[i].state == ND6_INCOMPLETE) {
 8014986:	4aaf      	ldr	r2, [pc, #700]	; (8014c44 <nd6_input+0x60c>)
 8014988:	232c      	movs	r3, #44	; 0x2c
 801498a:	fb03 2300 	mla	r3, r3, r0, r2
 801498e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014992:	2b01      	cmp	r3, #1
 8014994:	d055      	beq.n	8014a42 <nd6_input+0x40a>
      nd6_send_na(inp, &target_address, ND6_FLAG_SOLICITED | ND6_FLAG_OVERRIDE);
 8014996:	2260      	movs	r2, #96	; 0x60
 8014998:	a905      	add	r1, sp, #20
 801499a:	4630      	mov	r0, r6
 801499c:	f7ff fa42 	bl	8013e24 <nd6_send_na>
 80149a0:	e2d1      	b.n	8014f46 <nd6_input+0x90e>
      pbuf_free(p);
 80149a2:	4620      	mov	r0, r4
 80149a4:	f7f3 fba4 	bl	80080f0 <pbuf_free>
      return;
 80149a8:	e2d0      	b.n	8014f4c <nd6_input+0x914>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 80149aa:	3501      	adds	r5, #1
 80149ac:	b26d      	sxtb	r5, r5
 80149ae:	2d02      	cmp	r5, #2
 80149b0:	f300 82c9 	bgt.w	8014f46 <nd6_input+0x90e>
        if (!ip6_addr_isinvalid(netif_ip6_addr_state(inp, i)) &&
 80149b4:	1973      	adds	r3, r6, r5
 80149b6:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d0f5      	beq.n	80149aa <nd6_input+0x372>
            ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 80149be:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80149c2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80149c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        if (!ip6_addr_isinvalid(netif_ip6_addr_state(inp, i)) &&
 80149c8:	9a05      	ldr	r2, [sp, #20]
 80149ca:	429a      	cmp	r2, r3
 80149cc:	d1ed      	bne.n	80149aa <nd6_input+0x372>
            ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 80149ce:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80149d2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80149d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80149d8:	9a06      	ldr	r2, [sp, #24]
 80149da:	429a      	cmp	r2, r3
 80149dc:	d1e5      	bne.n	80149aa <nd6_input+0x372>
 80149de:	2318      	movs	r3, #24
 80149e0:	fb03 6305 	mla	r3, r3, r5, r6
 80149e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80149e6:	9a07      	ldr	r2, [sp, #28]
 80149e8:	429a      	cmp	r2, r3
 80149ea:	d1de      	bne.n	80149aa <nd6_input+0x372>
 80149ec:	2318      	movs	r3, #24
 80149ee:	fb03 6305 	mla	r3, r3, r5, r6
 80149f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149f4:	9a08      	ldr	r2, [sp, #32]
 80149f6:	429a      	cmp	r2, r3
 80149f8:	d1d7      	bne.n	80149aa <nd6_input+0x372>
 80149fa:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 80149fe:	2318      	movs	r3, #24
 8014a00:	fb03 6305 	mla	r3, r3, r5, r6
 8014a04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8014a08:	429a      	cmp	r2, r3
 8014a0a:	d1ce      	bne.n	80149aa <nd6_input+0x372>
          nd6_send_na(inp, netif_ip6_addr(inp, i), ND6_FLAG_OVERRIDE | ND6_SEND_FLAG_ALLNODES_DEST);
 8014a0c:	2118      	movs	r1, #24
 8014a0e:	fb01 f105 	mul.w	r1, r1, r5
 8014a12:	3148      	adds	r1, #72	; 0x48
 8014a14:	4431      	add	r1, r6
 8014a16:	2222      	movs	r2, #34	; 0x22
 8014a18:	3104      	adds	r1, #4
 8014a1a:	4630      	mov	r0, r6
 8014a1c:	f7ff fa02 	bl	8013e24 <nd6_send_na>
          if (ip6_addr_istentative(netif_ip6_addr_state(inp, i))) {
 8014a20:	1973      	adds	r3, r6, r5
 8014a22:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8014a26:	f013 0f08 	tst.w	r3, #8
 8014a2a:	d0be      	beq.n	80149aa <nd6_input+0x372>
            nd6_duplicate_addr_detected(inp, i);
 8014a2c:	4629      	mov	r1, r5
 8014a2e:	4630      	mov	r0, r6
 8014a30:	f7fe ffa2 	bl	8013978 <nd6_duplicate_addr_detected>
 8014a34:	e7b9      	b.n	80149aa <nd6_input+0x372>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 8014a36:	2500      	movs	r5, #0
 8014a38:	e7b9      	b.n	80149ae <nd6_input+0x376>
        pbuf_free(p);
 8014a3a:	4620      	mov	r0, r4
 8014a3c:	f7f3 fb58 	bl	80080f0 <pbuf_free>
        return;
 8014a40:	e284      	b.n	8014f4c <nd6_input+0x914>
          neighbor_cache[i].netif = inp;
 8014a42:	4694      	mov	ip, r2
 8014a44:	232c      	movs	r3, #44	; 0x2c
 8014a46:	fb03 f000 	mul.w	r0, r3, r0
 8014a4a:	1817      	adds	r7, r2, r0
 8014a4c:	617e      	str	r6, [r7, #20]
          MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 8014a4e:	3018      	adds	r0, #24
 8014a50:	f896 20de 	ldrb.w	r2, [r6, #222]	; 0xde
 8014a54:	1ca9      	adds	r1, r5, #2
 8014a56:	4460      	add	r0, ip
 8014a58:	f000 ff6a 	bl	8015930 <memcpy>
          neighbor_cache[i].state = ND6_DELAY;
 8014a5c:	2304      	movs	r3, #4
 8014a5e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
          neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 8014a62:	2305      	movs	r3, #5
 8014a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8014a66:	e796      	b.n	8014996 <nd6_input+0x35e>
        i = nd6_new_neighbor_cache_entry();
 8014a68:	f7ff f8fc 	bl	8013c64 <nd6_new_neighbor_cache_entry>
        if (i < 0) {
 8014a6c:	2800      	cmp	r0, #0
 8014a6e:	db23      	blt.n	8014ab8 <nd6_input+0x480>
        neighbor_cache[i].netif = inp;
 8014a70:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8014c44 <nd6_input+0x60c>
 8014a74:	f04f 082c 	mov.w	r8, #44	; 0x2c
 8014a78:	fb08 f800 	mul.w	r8, r8, r0
 8014a7c:	eb09 0708 	add.w	r7, r9, r8
 8014a80:	617e      	str	r6, [r7, #20]
        MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 8014a82:	f108 0018 	add.w	r0, r8, #24
 8014a86:	f896 20de 	ldrb.w	r2, [r6, #222]	; 0xde
 8014a8a:	1ca9      	adds	r1, r5, #2
 8014a8c:	4448      	add	r0, r9
 8014a8e:	f000 ff4f 	bl	8015930 <memcpy>
        ip6_addr_set(&(neighbor_cache[i].next_hop_address), ip6_current_src_addr());
 8014a92:	4b6a      	ldr	r3, [pc, #424]	; (8014c3c <nd6_input+0x604>)
 8014a94:	695a      	ldr	r2, [r3, #20]
 8014a96:	f849 2008 	str.w	r2, [r9, r8]
 8014a9a:	699a      	ldr	r2, [r3, #24]
 8014a9c:	607a      	str	r2, [r7, #4]
 8014a9e:	69da      	ldr	r2, [r3, #28]
 8014aa0:	60ba      	str	r2, [r7, #8]
 8014aa2:	6a1a      	ldr	r2, [r3, #32]
 8014aa4:	60fa      	str	r2, [r7, #12]
 8014aa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014aaa:	743b      	strb	r3, [r7, #16]
        neighbor_cache[i].state = ND6_DELAY;
 8014aac:	2304      	movs	r3, #4
 8014aae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 8014ab2:	2305      	movs	r3, #5
 8014ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8014ab6:	e76e      	b.n	8014996 <nd6_input+0x35e>
          pbuf_free(p);
 8014ab8:	4620      	mov	r0, r4
 8014aba:	f7f3 fb19 	bl	80080f0 <pbuf_free>
          return;
 8014abe:	e245      	b.n	8014f4c <nd6_input+0x914>
    if (p->len < sizeof(struct ra_header)) {
 8014ac0:	8943      	ldrh	r3, [r0, #10]
 8014ac2:	2b0f      	cmp	r3, #15
 8014ac4:	d939      	bls.n	8014b3a <nd6_input+0x502>
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 8014ac6:	4b5d      	ldr	r3, [pc, #372]	; (8014c3c <nd6_input+0x604>)
 8014ac8:	695b      	ldr	r3, [r3, #20]
 8014aca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014ace:	041b      	lsls	r3, r3, #16
 8014ad0:	0c1b      	lsrs	r3, r3, #16
 8014ad2:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8014ad6:	4293      	cmp	r3, r2
 8014ad8:	d132      	bne.n	8014b40 <nd6_input+0x508>
        IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ra_hdr->code != 0) {
 8014ada:	4b58      	ldr	r3, [pc, #352]	; (8014c3c <nd6_input+0x604>)
 8014adc:	68db      	ldr	r3, [r3, #12]
 8014ade:	79db      	ldrb	r3, [r3, #7]
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 8014ae0:	2bff      	cmp	r3, #255	; 0xff
 8014ae2:	d12d      	bne.n	8014b40 <nd6_input+0x508>
        IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ra_hdr->code != 0) {
 8014ae4:	f895 a001 	ldrb.w	sl, [r5, #1]
 8014ae8:	f1ba 0f00 	cmp.w	sl, #0
 8014aec:	d128      	bne.n	8014b40 <nd6_input+0x508>
    if ((inp->rs_count < LWIP_ND6_MAX_MULTICAST_SOLICIT) ||
 8014aee:	f891 30e4 	ldrb.w	r3, [r1, #228]	; 0xe4
 8014af2:	2b02      	cmp	r3, #2
 8014af4:	d828      	bhi.n	8014b48 <nd6_input+0x510>
      inp->rs_count = 0;
 8014af6:	2300      	movs	r3, #0
 8014af8:	f886 30e4 	strb.w	r3, [r6, #228]	; 0xe4
    i = nd6_get_router(ip6_current_src_addr(), inp);
 8014afc:	4631      	mov	r1, r6
 8014afe:	4850      	ldr	r0, [pc, #320]	; (8014c40 <nd6_input+0x608>)
 8014b00:	f7fe fe32 	bl	8013768 <nd6_get_router>
    if (i < 0) {
 8014b04:	1e07      	subs	r7, r0, #0
 8014b06:	db28      	blt.n	8014b5a <nd6_input+0x522>
    if (i < 0) {
 8014b08:	2f00      	cmp	r7, #0
 8014b0a:	db2c      	blt.n	8014b66 <nd6_input+0x52e>
    default_router_list[i].invalidation_timer = lwip_htons(ra_hdr->router_lifetime);
 8014b0c:	88e8      	ldrh	r0, [r5, #6]
 8014b0e:	f7f1 ffb5 	bl	8006a7c <lwip_htons>
 8014b12:	46b9      	mov	r9, r7
 8014b14:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014b18:	4b4b      	ldr	r3, [pc, #300]	; (8014c48 <nd6_input+0x610>)
 8014b1a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014b1e:	6078      	str	r0, [r7, #4]
    if (ra_hdr->retrans_timer > 0) {
 8014b20:	68e8      	ldr	r0, [r5, #12]
 8014b22:	bb20      	cbnz	r0, 8014b6e <nd6_input+0x536>
    if (ra_hdr->reachable_time > 0) {
 8014b24:	68a8      	ldr	r0, [r5, #8]
 8014b26:	bb38      	cbnz	r0, 8014b78 <nd6_input+0x540>
    default_router_list[i].flags = ra_hdr->flags;
 8014b28:	7969      	ldrb	r1, [r5, #5]
 8014b2a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8014b2e:	4a46      	ldr	r2, [pc, #280]	; (8014c48 <nd6_input+0x610>)
 8014b30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014b34:	7219      	strb	r1, [r3, #8]
    offset = sizeof(struct ra_header);
 8014b36:	2710      	movs	r7, #16
    while ((p->tot_len - offset) >= 2) {
 8014b38:	e03a      	b.n	8014bb0 <nd6_input+0x578>
      pbuf_free(p);
 8014b3a:	f7f3 fad9 	bl	80080f0 <pbuf_free>
      return;
 8014b3e:	e205      	b.n	8014f4c <nd6_input+0x914>
      pbuf_free(p);
 8014b40:	4620      	mov	r0, r4
 8014b42:	f7f3 fad5 	bl	80080f0 <pbuf_free>
      return;
 8014b46:	e201      	b.n	8014f4c <nd6_input+0x914>
        (nd6_send_rs(inp) == ERR_OK)) {
 8014b48:	4608      	mov	r0, r1
 8014b4a:	f7ff f9f1 	bl	8013f30 <nd6_send_rs>
    if ((inp->rs_count < LWIP_ND6_MAX_MULTICAST_SOLICIT) ||
 8014b4e:	2800      	cmp	r0, #0
 8014b50:	d0d1      	beq.n	8014af6 <nd6_input+0x4be>
      inp->rs_count = 1;
 8014b52:	2301      	movs	r3, #1
 8014b54:	f886 30e4 	strb.w	r3, [r6, #228]	; 0xe4
 8014b58:	e7d0      	b.n	8014afc <nd6_input+0x4c4>
      i = nd6_new_router(ip6_current_src_addr(), inp);
 8014b5a:	4631      	mov	r1, r6
 8014b5c:	4838      	ldr	r0, [pc, #224]	; (8014c40 <nd6_input+0x608>)
 8014b5e:	f7ff fadd 	bl	801411c <nd6_new_router>
 8014b62:	4607      	mov	r7, r0
 8014b64:	e7d0      	b.n	8014b08 <nd6_input+0x4d0>
      pbuf_free(p);
 8014b66:	4620      	mov	r0, r4
 8014b68:	f7f3 fac2 	bl	80080f0 <pbuf_free>
      return;
 8014b6c:	e1ee      	b.n	8014f4c <nd6_input+0x914>
      retrans_timer = lwip_htonl(ra_hdr->retrans_timer);
 8014b6e:	f7f1 ff8a 	bl	8006a86 <lwip_htonl>
 8014b72:	4b36      	ldr	r3, [pc, #216]	; (8014c4c <nd6_input+0x614>)
 8014b74:	6018      	str	r0, [r3, #0]
 8014b76:	e7d5      	b.n	8014b24 <nd6_input+0x4ec>
      reachable_time = lwip_htonl(ra_hdr->reachable_time);
 8014b78:	f7f1 ff85 	bl	8006a86 <lwip_htonl>
 8014b7c:	4b34      	ldr	r3, [pc, #208]	; (8014c50 <nd6_input+0x618>)
 8014b7e:	6018      	str	r0, [r3, #0]
 8014b80:	e7d2      	b.n	8014b28 <nd6_input+0x4f0>
        buffer = &((u8_t*)p->payload)[offset];
 8014b82:	6863      	ldr	r3, [r4, #4]
 8014b84:	eb03 0807 	add.w	r8, r3, r7
 8014b88:	e007      	b.n	8014b9a <nd6_input+0x562>
        option_len = pbuf_copy_partial(p, &nd6_ra_buffer, option_len, offset);
 8014b8a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8014c54 <nd6_input+0x61c>
 8014b8e:	463b      	mov	r3, r7
 8014b90:	4641      	mov	r1, r8
 8014b92:	4620      	mov	r0, r4
 8014b94:	f7f3 fd02 	bl	800859c <pbuf_copy_partial>
 8014b98:	4602      	mov	r2, r0
      option_type = buffer[0];
 8014b9a:	f898 3000 	ldrb.w	r3, [r8]
      switch (option_type) {
 8014b9e:	2b03      	cmp	r3, #3
 8014ba0:	d073      	beq.n	8014c8a <nd6_input+0x652>
 8014ba2:	2b05      	cmp	r3, #5
 8014ba4:	d058      	beq.n	8014c58 <nd6_input+0x620>
 8014ba6:	2b01      	cmp	r3, #1
 8014ba8:	d027      	beq.n	8014bfa <nd6_input+0x5c2>
      offset += 8 * (u8_t)option_len8;
 8014baa:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
 8014bae:	b2bf      	uxth	r7, r7
    while ((p->tot_len - offset) >= 2) {
 8014bb0:	8923      	ldrh	r3, [r4, #8]
 8014bb2:	46b8      	mov	r8, r7
 8014bb4:	1bdb      	subs	r3, r3, r7
 8014bb6:	2b01      	cmp	r3, #1
 8014bb8:	f340 81c5 	ble.w	8014f46 <nd6_input+0x90e>
      int option_len8 = pbuf_try_get_at(p, offset + 1);
 8014bbc:	1c79      	adds	r1, r7, #1
 8014bbe:	b289      	uxth	r1, r1
 8014bc0:	4620      	mov	r0, r4
 8014bc2:	f7f3 fdf7 	bl	80087b4 <pbuf_try_get_at>
      if (option_len8 <= 0) {
 8014bc6:	2800      	cmp	r0, #0
 8014bc8:	f340 81ca 	ble.w	8014f60 <nd6_input+0x928>
      option_len = ((u8_t)option_len8) << 3;
 8014bcc:	b2c5      	uxtb	r5, r0
 8014bce:	00ea      	lsls	r2, r5, #3
      if (option_len > p->tot_len - offset) {
 8014bd0:	8923      	ldrh	r3, [r4, #8]
 8014bd2:	eba3 0808 	sub.w	r8, r3, r8
 8014bd6:	ebb8 0fc5 	cmp.w	r8, r5, lsl #3
 8014bda:	f2c0 81c1 	blt.w	8014f60 <nd6_input+0x928>
      if (p->len == p->tot_len) {
 8014bde:	8961      	ldrh	r1, [r4, #10]
 8014be0:	428b      	cmp	r3, r1
 8014be2:	d0ce      	beq.n	8014b82 <nd6_input+0x54a>
        if (option_len > sizeof(nd6_ra_buffer)) {
 8014be4:	2a20      	cmp	r2, #32
 8014be6:	d9d0      	bls.n	8014b8a <nd6_input+0x552>
          option_type = pbuf_get_at(p, offset);
 8014be8:	4639      	mov	r1, r7
 8014bea:	4620      	mov	r0, r4
 8014bec:	f7f3 fdf9 	bl	80087e2 <pbuf_get_at>
          if (option_type != ND6_OPTION_TYPE_RDNSS) {
 8014bf0:	2819      	cmp	r0, #25
 8014bf2:	f040 81b5 	bne.w	8014f60 <nd6_input+0x928>
          option_len = sizeof(nd6_ra_buffer);
 8014bf6:	2220      	movs	r2, #32
 8014bf8:	e7c7      	b.n	8014b8a <nd6_input+0x552>
        if (option_len < sizeof(struct lladdr_option)) {
 8014bfa:	2a07      	cmp	r2, #7
 8014bfc:	f240 81b0 	bls.w	8014f60 <nd6_input+0x928>
        if ((default_router_list[i].neighbor_entry != NULL) &&
 8014c00:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8014c04:	4a10      	ldr	r2, [pc, #64]	; (8014c48 <nd6_input+0x610>)
 8014c06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014c0a:	2800      	cmp	r0, #0
 8014c0c:	d0cd      	beq.n	8014baa <nd6_input+0x572>
            (default_router_list[i].neighbor_entry->state == ND6_INCOMPLETE)) {
 8014c0e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
        if ((default_router_list[i].neighbor_entry != NULL) &&
 8014c12:	2b01      	cmp	r3, #1
 8014c14:	d1c9      	bne.n	8014baa <nd6_input+0x572>
          SMEMCPY(default_router_list[i].neighbor_entry->lladdr, lladdr_opt->addr, inp->hwaddr_len);
 8014c16:	f896 20de 	ldrb.w	r2, [r6, #222]	; 0xde
 8014c1a:	f108 0102 	add.w	r1, r8, #2
 8014c1e:	3018      	adds	r0, #24
 8014c20:	f000 fe86 	bl	8015930 <memcpy>
          default_router_list[i].neighbor_entry->state = ND6_REACHABLE;
 8014c24:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8014c28:	4a07      	ldr	r2, [pc, #28]	; (8014c48 <nd6_input+0x610>)
 8014c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014c2e:	2202      	movs	r2, #2
 8014c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          default_router_list[i].neighbor_entry->counter.reachable_time = reachable_time;
 8014c34:	4a06      	ldr	r2, [pc, #24]	; (8014c50 <nd6_input+0x618>)
 8014c36:	6812      	ldr	r2, [r2, #0]
 8014c38:	629a      	str	r2, [r3, #40]	; 0x28
 8014c3a:	e7b6      	b.n	8014baa <nd6_input+0x572>
 8014c3c:	20003e34 	.word	0x20003e34
 8014c40:	20003e48 	.word	0x20003e48
 8014c44:	20007ffc 	.word	0x20007ffc
 8014c48:	20008420 	.word	0x20008420
 8014c4c:	20000018 	.word	0x20000018
 8014c50:	20000014 	.word	0x20000014
 8014c54:	20000c0c 	.word	0x20000c0c
        if (option_len < sizeof(struct mtu_option)) {
 8014c58:	2a07      	cmp	r2, #7
 8014c5a:	f240 8181 	bls.w	8014f60 <nd6_input+0x928>
        mtu32 = lwip_htonl(mtu_opt->mtu);
 8014c5e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014c62:	f7f1 ff10 	bl	8006a86 <lwip_htonl>
        if ((mtu32 >= 1280) && (mtu32 <= 0xffff)) {
 8014c66:	f5a0 63a0 	sub.w	r3, r0, #1280	; 0x500
 8014c6a:	f5b3 4f7b 	cmp.w	r3, #64256	; 0xfb00
 8014c6e:	d29c      	bcs.n	8014baa <nd6_input+0x572>
          if (inp->mtu) {
 8014c70:	f8b6 30d4 	ldrh.w	r3, [r6, #212]	; 0xd4
 8014c74:	b133      	cbz	r3, 8014c84 <nd6_input+0x64c>
            inp->mtu6 = LWIP_MIN(inp->mtu, (u16_t)mtu32);
 8014c76:	b280      	uxth	r0, r0
 8014c78:	4298      	cmp	r0, r3
 8014c7a:	bf28      	it	cs
 8014c7c:	4618      	movcs	r0, r3
 8014c7e:	f8a6 00d6 	strh.w	r0, [r6, #214]	; 0xd6
 8014c82:	e792      	b.n	8014baa <nd6_input+0x572>
            inp->mtu6 = (u16_t)mtu32;
 8014c84:	f8a6 00d6 	strh.w	r0, [r6, #214]	; 0xd6
 8014c88:	e78f      	b.n	8014baa <nd6_input+0x572>
        if (option_len < sizeof(struct prefix_option)) {
 8014c8a:	2a1f      	cmp	r2, #31
 8014c8c:	f240 8168 	bls.w	8014f60 <nd6_input+0x928>
        ip6_addr_copy_from_packed(prefix_addr, prefix_opt->prefix);
 8014c90:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014c94:	9305      	str	r3, [sp, #20]
 8014c96:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8014c9a:	9206      	str	r2, [sp, #24]
 8014c9c:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8014ca0:	9207      	str	r2, [sp, #28]
 8014ca2:	f8d8 201c 	ldr.w	r2, [r8, #28]
 8014ca6:	9208      	str	r2, [sp, #32]
        ip6_addr_assign_zone(&prefix_addr, IP6_UNICAST, inp);
 8014ca8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014cac:	041b      	lsls	r3, r3, #16
 8014cae:	0c1b      	lsrs	r3, r3, #16
 8014cb0:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8014cb4:	4293      	cmp	r3, r2
 8014cb6:	d017      	beq.n	8014ce8 <nd6_input+0x6b0>
 8014cb8:	4652      	mov	r2, sl
 8014cba:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        if (!ip6_addr_islinklocal(&prefix_addr)) {
 8014cbe:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8014cc2:	4293      	cmp	r3, r2
 8014cc4:	f43f af71 	beq.w	8014baa <nd6_input+0x572>
          if ((prefix_opt->flags & ND6_PREFIX_FLAG_ON_LINK) &&
 8014cc8:	f998 3003 	ldrsb.w	r3, [r8, #3]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	db10      	blt.n	8014cf2 <nd6_input+0x6ba>
          if (prefix_opt->flags & ND6_PREFIX_FLAG_AUTONOMOUS) {
 8014cd0:	f898 3003 	ldrb.w	r3, [r8, #3]
 8014cd4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014cd8:	f43f af67 	beq.w	8014baa <nd6_input+0x572>
            nd6_process_autoconfig_prefix(inp, prefix_opt, &prefix_addr);
 8014cdc:	aa05      	add	r2, sp, #20
 8014cde:	4641      	mov	r1, r8
 8014ce0:	4630      	mov	r0, r6
 8014ce2:	f7fe fe6b 	bl	80139bc <nd6_process_autoconfig_prefix>
        break;
 8014ce6:	e760      	b.n	8014baa <nd6_input+0x572>
        ip6_addr_assign_zone(&prefix_addr, IP6_UNICAST, inp);
 8014ce8:	f896 20e2 	ldrb.w	r2, [r6, #226]	; 0xe2
 8014cec:	3201      	adds	r2, #1
 8014cee:	b2d2      	uxtb	r2, r2
 8014cf0:	e7e3      	b.n	8014cba <nd6_input+0x682>
              (prefix_opt->prefix_length == 64)) {
 8014cf2:	f898 3002 	ldrb.w	r3, [r8, #2]
          if ((prefix_opt->flags & ND6_PREFIX_FLAG_ON_LINK) &&
 8014cf6:	2b40      	cmp	r3, #64	; 0x40
 8014cf8:	d1ea      	bne.n	8014cd0 <nd6_input+0x698>
            valid_life = lwip_htonl(prefix_opt->valid_lifetime);
 8014cfa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014cfe:	f7f1 fec2 	bl	8006a86 <lwip_htonl>
 8014d02:	4683      	mov	fp, r0
            prefix = nd6_get_onlink_prefix(&prefix_addr, inp);
 8014d04:	4631      	mov	r1, r6
 8014d06:	a805      	add	r0, sp, #20
 8014d08:	f7fe fd5e 	bl	80137c8 <nd6_get_onlink_prefix>
            if (prefix < 0 && valid_life > 0) {
 8014d0c:	1e03      	subs	r3, r0, #0
 8014d0e:	db09      	blt.n	8014d24 <nd6_input+0x6ec>
            if (prefix >= 0) {
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	dbdd      	blt.n	8014cd0 <nd6_input+0x698>
              prefix_list[prefix].invalidation_timer = valid_life;
 8014d14:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8014d18:	4a93      	ldr	r2, [pc, #588]	; (8014f68 <nd6_input+0x930>)
 8014d1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014d1e:	f8c3 b018 	str.w	fp, [r3, #24]
 8014d22:	e7d5      	b.n	8014cd0 <nd6_input+0x698>
            if (prefix < 0 && valid_life > 0) {
 8014d24:	f1bb 0f00 	cmp.w	fp, #0
 8014d28:	d0f2      	beq.n	8014d10 <nd6_input+0x6d8>
              prefix = nd6_new_onlink_prefix(&prefix_addr, inp);
 8014d2a:	4631      	mov	r1, r6
 8014d2c:	a805      	add	r0, sp, #20
 8014d2e:	f7fe fd7d 	bl	801382c <nd6_new_onlink_prefix>
 8014d32:	4603      	mov	r3, r0
 8014d34:	e7ec      	b.n	8014d10 <nd6_input+0x6d8>
    if (p->len < sizeof(struct redirect_header)) {
 8014d36:	8943      	ldrh	r3, [r0, #10]
 8014d38:	2b27      	cmp	r3, #39	; 0x27
 8014d3a:	d934      	bls.n	8014da6 <nd6_input+0x76e>
    ip6_addr_copy_from_packed(destination_address, redir_hdr->destination_address);
 8014d3c:	69a9      	ldr	r1, [r5, #24]
 8014d3e:	9100      	str	r1, [sp, #0]
 8014d40:	69eb      	ldr	r3, [r5, #28]
 8014d42:	9301      	str	r3, [sp, #4]
 8014d44:	6a2b      	ldr	r3, [r5, #32]
 8014d46:	9302      	str	r3, [sp, #8]
 8014d48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014d4a:	9303      	str	r3, [sp, #12]
    ip6_addr_assign_zone(&destination_address, IP6_UNICAST, inp);
 8014d4c:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8014d50:	400a      	ands	r2, r1
 8014d52:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8014d56:	429a      	cmp	r2, r3
 8014d58:	d028      	beq.n	8014dac <nd6_input+0x774>
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	f88d 2010 	strb.w	r2, [sp, #16]
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 8014d60:	4b82      	ldr	r3, [pc, #520]	; (8014f6c <nd6_input+0x934>)
 8014d62:	695b      	ldr	r3, [r3, #20]
 8014d64:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014d68:	041b      	lsls	r3, r3, #16
 8014d6a:	0c1b      	lsrs	r3, r3, #16
 8014d6c:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8014d70:	4293      	cmp	r3, r2
 8014d72:	d120      	bne.n	8014db6 <nd6_input+0x77e>
        IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM ||
 8014d74:	4b7d      	ldr	r3, [pc, #500]	; (8014f6c <nd6_input+0x934>)
 8014d76:	68db      	ldr	r3, [r3, #12]
 8014d78:	79db      	ldrb	r3, [r3, #7]
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 8014d7a:	2bff      	cmp	r3, #255	; 0xff
 8014d7c:	d11b      	bne.n	8014db6 <nd6_input+0x77e>
        redir_hdr->code != 0 || ip6_addr_ismulticast(&destination_address)) {
 8014d7e:	786f      	ldrb	r7, [r5, #1]
        IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM ||
 8014d80:	b9cf      	cbnz	r7, 8014db6 <nd6_input+0x77e>
        redir_hdr->code != 0 || ip6_addr_ismulticast(&destination_address)) {
 8014d82:	b2cb      	uxtb	r3, r1
 8014d84:	2bff      	cmp	r3, #255	; 0xff
 8014d86:	d016      	beq.n	8014db6 <nd6_input+0x77e>
    if (p->len >= (sizeof(struct redirect_header) + 2)) {
 8014d88:	8962      	ldrh	r2, [r4, #10]
 8014d8a:	2a29      	cmp	r2, #41	; 0x29
 8014d8c:	d917      	bls.n	8014dbe <nd6_input+0x786>
      lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct redirect_header));
 8014d8e:	6863      	ldr	r3, [r4, #4]
 8014d90:	f103 0828 	add.w	r8, r3, #40	; 0x28
      if (p->len < (sizeof(struct redirect_header) + (lladdr_opt->length << 3))) {
 8014d94:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8014d98:	00db      	lsls	r3, r3, #3
 8014d9a:	3328      	adds	r3, #40	; 0x28
 8014d9c:	429a      	cmp	r2, r3
 8014d9e:	d210      	bcs.n	8014dc2 <nd6_input+0x78a>
        lladdr_opt = NULL;
 8014da0:	f04f 0800 	mov.w	r8, #0
 8014da4:	e00d      	b.n	8014dc2 <nd6_input+0x78a>
      pbuf_free(p);
 8014da6:	f7f3 f9a3 	bl	80080f0 <pbuf_free>
      return;
 8014daa:	e0cf      	b.n	8014f4c <nd6_input+0x914>
    ip6_addr_assign_zone(&destination_address, IP6_UNICAST, inp);
 8014dac:	f896 20e2 	ldrb.w	r2, [r6, #226]	; 0xe2
 8014db0:	3201      	adds	r2, #1
 8014db2:	b2d2      	uxtb	r2, r2
 8014db4:	e7d2      	b.n	8014d5c <nd6_input+0x724>
      pbuf_free(p);
 8014db6:	4620      	mov	r0, r4
 8014db8:	f7f3 f99a 	bl	80080f0 <pbuf_free>
      return;
 8014dbc:	e0c6      	b.n	8014f4c <nd6_input+0x914>
      lladdr_opt = NULL;
 8014dbe:	f04f 0800 	mov.w	r8, #0
    dest_idx = nd6_find_destination_cache_entry(&destination_address);
 8014dc2:	4668      	mov	r0, sp
 8014dc4:	f7fe fb80 	bl	80134c8 <nd6_find_destination_cache_entry>
    if (dest_idx < 0) {
 8014dc8:	2800      	cmp	r0, #0
 8014dca:	db4f      	blt.n	8014e6c <nd6_input+0x834>
    ip6_addr_copy_from_packed(target_address, redir_hdr->target_address);
 8014dcc:	68a9      	ldr	r1, [r5, #8]
 8014dce:	9105      	str	r1, [sp, #20]
 8014dd0:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8014dd4:	f8cd e018 	str.w	lr, [sp, #24]
 8014dd8:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8014ddc:	f8cd c01c 	str.w	ip, [sp, #28]
 8014de0:	696d      	ldr	r5, [r5, #20]
 8014de2:	9508      	str	r5, [sp, #32]
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 8014de4:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8014de8:	400a      	ands	r2, r1
 8014dea:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8014dee:	429a      	cmp	r2, r3
 8014df0:	d040      	beq.n	8014e74 <nd6_input+0x83c>
 8014df2:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    ip6_addr_copy(destination_cache[dest_idx].next_hop_addr, target_address);
 8014df6:	4a5e      	ldr	r2, [pc, #376]	; (8014f70 <nd6_input+0x938>)
 8014df8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8014dfc:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8014e00:	6159      	str	r1, [r3, #20]
 8014e02:	f8c3 e018 	str.w	lr, [r3, #24]
 8014e06:	f8c3 c01c 	str.w	ip, [r3, #28]
 8014e0a:	621d      	str	r5, [r3, #32]
 8014e0c:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
    if (lladdr_opt != NULL) {
 8014e10:	f1b8 0f00 	cmp.w	r8, #0
 8014e14:	f000 8097 	beq.w	8014f46 <nd6_input+0x90e>
      if (lladdr_opt->type == ND6_OPTION_TYPE_TARGET_LLADDR) {
 8014e18:	f898 3000 	ldrb.w	r3, [r8]
 8014e1c:	2b02      	cmp	r3, #2
 8014e1e:	f040 8092 	bne.w	8014f46 <nd6_input+0x90e>
        i = nd6_find_neighbor_cache_entry(&target_address);
 8014e22:	a805      	add	r0, sp, #20
 8014e24:	f7fe fb1c 	bl	8013460 <nd6_find_neighbor_cache_entry>
        if (i < 0) {
 8014e28:	1e05      	subs	r5, r0, #0
 8014e2a:	db28      	blt.n	8014e7e <nd6_input+0x846>
        if (i >= 0) {
 8014e2c:	2d00      	cmp	r5, #0
 8014e2e:	f2c0 808a 	blt.w	8014f46 <nd6_input+0x90e>
          if (neighbor_cache[i].state == ND6_INCOMPLETE) {
 8014e32:	4a50      	ldr	r2, [pc, #320]	; (8014f74 <nd6_input+0x93c>)
 8014e34:	232c      	movs	r3, #44	; 0x2c
 8014e36:	fb03 2305 	mla	r3, r3, r5, r2
 8014e3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014e3e:	2b01      	cmp	r3, #1
 8014e40:	f040 8081 	bne.w	8014f46 <nd6_input+0x90e>
            MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 8014e44:	272c      	movs	r7, #44	; 0x2c
 8014e46:	fb07 f705 	mul.w	r7, r7, r5
 8014e4a:	f107 0018 	add.w	r0, r7, #24
 8014e4e:	4615      	mov	r5, r2
 8014e50:	f896 20de 	ldrb.w	r2, [r6, #222]	; 0xde
 8014e54:	f108 0102 	add.w	r1, r8, #2
 8014e58:	4428      	add	r0, r5
 8014e5a:	f000 fd69 	bl	8015930 <memcpy>
            neighbor_cache[i].state = ND6_DELAY;
 8014e5e:	443d      	add	r5, r7
 8014e60:	2304      	movs	r3, #4
 8014e62:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 8014e66:	2305      	movs	r3, #5
 8014e68:	62ab      	str	r3, [r5, #40]	; 0x28
 8014e6a:	e06c      	b.n	8014f46 <nd6_input+0x90e>
      pbuf_free(p);
 8014e6c:	4620      	mov	r0, r4
 8014e6e:	f7f3 f93f 	bl	80080f0 <pbuf_free>
      return;
 8014e72:	e06b      	b.n	8014f4c <nd6_input+0x914>
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 8014e74:	f896 70e2 	ldrb.w	r7, [r6, #226]	; 0xe2
 8014e78:	3701      	adds	r7, #1
 8014e7a:	b2ff      	uxtb	r7, r7
 8014e7c:	e7b9      	b.n	8014df2 <nd6_input+0x7ba>
          i = nd6_new_neighbor_cache_entry();
 8014e7e:	f7fe fef1 	bl	8013c64 <nd6_new_neighbor_cache_entry>
          if (i >= 0) {
 8014e82:	1e05      	subs	r5, r0, #0
 8014e84:	dbd2      	blt.n	8014e2c <nd6_input+0x7f4>
            neighbor_cache[i].netif = inp;
 8014e86:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8014f74 <nd6_input+0x93c>
 8014e8a:	f04f 092c 	mov.w	r9, #44	; 0x2c
 8014e8e:	fb09 f905 	mul.w	r9, r9, r5
 8014e92:	eb0a 0709 	add.w	r7, sl, r9
 8014e96:	617e      	str	r6, [r7, #20]
            MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 8014e98:	f109 0018 	add.w	r0, r9, #24
 8014e9c:	f896 20de 	ldrb.w	r2, [r6, #222]	; 0xde
 8014ea0:	f108 0102 	add.w	r1, r8, #2
 8014ea4:	4450      	add	r0, sl
 8014ea6:	f000 fd43 	bl	8015930 <memcpy>
            ip6_addr_copy(neighbor_cache[i].next_hop_address, target_address);
 8014eaa:	9b05      	ldr	r3, [sp, #20]
 8014eac:	f84a 3009 	str.w	r3, [sl, r9]
 8014eb0:	9b06      	ldr	r3, [sp, #24]
 8014eb2:	607b      	str	r3, [r7, #4]
 8014eb4:	9b07      	ldr	r3, [sp, #28]
 8014eb6:	60bb      	str	r3, [r7, #8]
 8014eb8:	9b08      	ldr	r3, [sp, #32]
 8014eba:	60fb      	str	r3, [r7, #12]
 8014ebc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014ec0:	743b      	strb	r3, [r7, #16]
            neighbor_cache[i].state = ND6_DELAY;
 8014ec2:	2304      	movs	r3, #4
 8014ec4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 8014ec8:	2305      	movs	r3, #5
 8014eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8014ecc:	e7ae      	b.n	8014e2c <nd6_input+0x7f4>
    if (p->len < (sizeof(struct icmp6_hdr) + IP6_HLEN)) {
 8014ece:	8943      	ldrh	r3, [r0, #10]
 8014ed0:	2b2f      	cmp	r3, #47	; 0x2f
 8014ed2:	d91c      	bls.n	8014f0e <nd6_input+0x8d6>
    ip6_addr_copy_from_packed(destination_address, ip6hdr->dest);
 8014ed4:	6a2b      	ldr	r3, [r5, #32]
 8014ed6:	9305      	str	r3, [sp, #20]
 8014ed8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8014eda:	9206      	str	r2, [sp, #24]
 8014edc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8014ede:	9207      	str	r2, [sp, #28]
 8014ee0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8014ee2:	9208      	str	r2, [sp, #32]
    ip6_addr_assign_zone(&destination_address, IP6_UNKNOWN, inp);
 8014ee4:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8014ee8:	4019      	ands	r1, r3
 8014eea:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8014eee:	4291      	cmp	r1, r2
 8014ef0:	d010      	beq.n	8014f14 <nd6_input+0x8dc>
 8014ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014ef6:	041b      	lsls	r3, r3, #16
 8014ef8:	0c1b      	lsrs	r3, r3, #16
 8014efa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014efe:	4293      	cmp	r3, r2
 8014f00:	d008      	beq.n	8014f14 <nd6_input+0x8dc>
 8014f02:	f240 22ff 	movw	r2, #767	; 0x2ff
 8014f06:	4293      	cmp	r3, r2
 8014f08:	d004      	beq.n	8014f14 <nd6_input+0x8dc>
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	e006      	b.n	8014f1c <nd6_input+0x8e4>
      pbuf_free(p);
 8014f0e:	f7f3 f8ef 	bl	80080f0 <pbuf_free>
      return;
 8014f12:	e01b      	b.n	8014f4c <nd6_input+0x914>
    ip6_addr_assign_zone(&destination_address, IP6_UNKNOWN, inp);
 8014f14:	f896 30e2 	ldrb.w	r3, [r6, #226]	; 0xe2
 8014f18:	3301      	adds	r3, #1
 8014f1a:	b2db      	uxtb	r3, r3
 8014f1c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    dest_idx = nd6_find_destination_cache_entry(&destination_address);
 8014f20:	a805      	add	r0, sp, #20
 8014f22:	f7fe fad1 	bl	80134c8 <nd6_find_destination_cache_entry>
    if (dest_idx < 0) {
 8014f26:	1e06      	subs	r6, r0, #0
 8014f28:	db13      	blt.n	8014f52 <nd6_input+0x91a>
    pmtu = lwip_htonl(icmp6hdr->data);
 8014f2a:	6868      	ldr	r0, [r5, #4]
 8014f2c:	f7f1 fdab 	bl	8006a86 <lwip_htonl>
    destination_cache[dest_idx].pmtu = (u16_t)LWIP_MIN(pmtu, 0xFFFF);
 8014f30:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8014f34:	4298      	cmp	r0, r3
 8014f36:	d810      	bhi.n	8014f5a <nd6_input+0x922>
 8014f38:	b283      	uxth	r3, r0
 8014f3a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8014f3e:	4e0c      	ldr	r6, [pc, #48]	; (8014f70 <nd6_input+0x938>)
 8014f40:	eb06 1000 	add.w	r0, r6, r0, lsl #4
 8014f44:	8503      	strh	r3, [r0, #40]	; 0x28
  pbuf_free(p);
 8014f46:	4620      	mov	r0, r4
 8014f48:	f7f3 f8d2 	bl	80080f0 <pbuf_free>
}
 8014f4c:	b00b      	add	sp, #44	; 0x2c
 8014f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pbuf_free(p);
 8014f52:	4620      	mov	r0, r4
 8014f54:	f7f3 f8cc 	bl	80080f0 <pbuf_free>
      return;
 8014f58:	e7f8      	b.n	8014f4c <nd6_input+0x914>
    destination_cache[dest_idx].pmtu = (u16_t)LWIP_MIN(pmtu, 0xFFFF);
 8014f5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f5e:	e7ec      	b.n	8014f3a <nd6_input+0x902>
  pbuf_free(p);
 8014f60:	4620      	mov	r0, r4
 8014f62:	f7f3 f8c5 	bl	80080f0 <pbuf_free>
 8014f66:	e7f1      	b.n	8014f4c <nd6_input+0x914>
 8014f68:	200081b4 	.word	0x200081b4
 8014f6c:	20003e34 	.word	0x20003e34
 8014f70:	20008240 	.word	0x20008240
 8014f74:	20007ffc 	.word	0x20007ffc

08014f78 <nd6_tmr>:
{
 8014f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8014f7c:	2400      	movs	r4, #0
 8014f7e:	e046      	b.n	801500e <nd6_tmr+0x96>
      if ((neighbor_cache[i].counter.probes_sent >= LWIP_ND6_MAX_MULTICAST_SOLICIT) &&
 8014f80:	4aaf      	ldr	r2, [pc, #700]	; (8015240 <nd6_tmr+0x2c8>)
 8014f82:	232c      	movs	r3, #44	; 0x2c
 8014f84:	fb03 2304 	mla	r3, r3, r4, r2
 8014f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f8a:	2b02      	cmp	r3, #2
 8014f8c:	d906      	bls.n	8014f9c <nd6_tmr+0x24>
          (!neighbor_cache[i].isrouter)) {
 8014f8e:	4611      	mov	r1, r2
 8014f90:	222c      	movs	r2, #44	; 0x2c
 8014f92:	fb02 1204 	mla	r2, r2, r4, r1
 8014f96:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
      if ((neighbor_cache[i].counter.probes_sent >= LWIP_ND6_MAX_MULTICAST_SOLICIT) &&
 8014f9a:	b14a      	cbz	r2, 8014fb0 <nd6_tmr+0x38>
        neighbor_cache[i].counter.probes_sent++;
 8014f9c:	4aa8      	ldr	r2, [pc, #672]	; (8015240 <nd6_tmr+0x2c8>)
 8014f9e:	202c      	movs	r0, #44	; 0x2c
 8014fa0:	fb00 2005 	mla	r0, r0, r5, r2
 8014fa4:	3301      	adds	r3, #1
 8014fa6:	6283      	str	r3, [r0, #40]	; 0x28
        nd6_send_neighbor_cache_probe(&neighbor_cache[i], ND6_SEND_FLAG_MULTICAST_DEST);
 8014fa8:	2101      	movs	r1, #1
 8014faa:	f7ff f8af 	bl	801410c <nd6_send_neighbor_cache_probe>
 8014fae:	e02c      	b.n	801500a <nd6_tmr+0x92>
        nd6_free_neighbor_cache_entry(i);
 8014fb0:	4620      	mov	r0, r4
 8014fb2:	f7fe fe29 	bl	8013c08 <nd6_free_neighbor_cache_entry>
 8014fb6:	e028      	b.n	801500a <nd6_tmr+0x92>
      if (neighbor_cache[i].q != NULL) {
 8014fb8:	4aa1      	ldr	r2, [pc, #644]	; (8015240 <nd6_tmr+0x2c8>)
 8014fba:	232c      	movs	r3, #44	; 0x2c
 8014fbc:	fb03 2304 	mla	r3, r3, r4, r2
 8014fc0:	6a1b      	ldr	r3, [r3, #32]
 8014fc2:	b113      	cbz	r3, 8014fca <nd6_tmr+0x52>
        nd6_send_q(i);
 8014fc4:	4620      	mov	r0, r4
 8014fc6:	f7fe fc85 	bl	80138d4 <nd6_send_q>
      if (neighbor_cache[i].counter.reachable_time <= ND6_TMR_INTERVAL) {
 8014fca:	4a9d      	ldr	r2, [pc, #628]	; (8015240 <nd6_tmr+0x2c8>)
 8014fcc:	232c      	movs	r3, #44	; 0x2c
 8014fce:	fb03 2305 	mla	r3, r3, r5, r2
 8014fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014fd8:	d808      	bhi.n	8014fec <nd6_tmr+0x74>
        neighbor_cache[i].state = ND6_STALE;
 8014fda:	202c      	movs	r0, #44	; 0x2c
 8014fdc:	fb00 2005 	mla	r0, r0, r5, r2
 8014fe0:	2303      	movs	r3, #3
 8014fe2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        neighbor_cache[i].counter.stale_time = 0;
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	6283      	str	r3, [r0, #40]	; 0x28
 8014fea:	e00e      	b.n	801500a <nd6_tmr+0x92>
        neighbor_cache[i].counter.reachable_time -= ND6_TMR_INTERVAL;
 8014fec:	4a94      	ldr	r2, [pc, #592]	; (8015240 <nd6_tmr+0x2c8>)
 8014fee:	202c      	movs	r0, #44	; 0x2c
 8014ff0:	fb00 2005 	mla	r0, r0, r5, r2
 8014ff4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8014ff8:	6283      	str	r3, [r0, #40]	; 0x28
 8014ffa:	e006      	b.n	801500a <nd6_tmr+0x92>
      neighbor_cache[i].counter.stale_time++;
 8014ffc:	4a90      	ldr	r2, [pc, #576]	; (8015240 <nd6_tmr+0x2c8>)
 8014ffe:	232c      	movs	r3, #44	; 0x2c
 8015000:	fb03 2304 	mla	r3, r3, r4, r2
 8015004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015006:	3201      	adds	r2, #1
 8015008:	629a      	str	r2, [r3, #40]	; 0x28
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 801500a:	3401      	adds	r4, #1
 801500c:	b264      	sxtb	r4, r4
 801500e:	2c09      	cmp	r4, #9
 8015010:	dc49      	bgt.n	80150a6 <nd6_tmr+0x12e>
    switch (neighbor_cache[i].state) {
 8015012:	4625      	mov	r5, r4
 8015014:	4a8a      	ldr	r2, [pc, #552]	; (8015240 <nd6_tmr+0x2c8>)
 8015016:	232c      	movs	r3, #44	; 0x2c
 8015018:	fb03 2304 	mla	r3, r3, r4, r2
 801501c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015020:	3b01      	subs	r3, #1
 8015022:	2b04      	cmp	r3, #4
 8015024:	d8f1      	bhi.n	801500a <nd6_tmr+0x92>
 8015026:	a201      	add	r2, pc, #4	; (adr r2, 801502c <nd6_tmr+0xb4>)
 8015028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801502c:	08014f81 	.word	0x08014f81
 8015030:	08014fb9 	.word	0x08014fb9
 8015034:	08014ffd 	.word	0x08014ffd
 8015038:	08015041 	.word	0x08015041
 801503c:	0801506f 	.word	0x0801506f
      if (neighbor_cache[i].counter.delay_time <= 1) {
 8015040:	4a7f      	ldr	r2, [pc, #508]	; (8015240 <nd6_tmr+0x2c8>)
 8015042:	232c      	movs	r3, #44	; 0x2c
 8015044:	fb03 2304 	mla	r3, r3, r4, r2
 8015048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801504a:	2b01      	cmp	r3, #1
 801504c:	d906      	bls.n	801505c <nd6_tmr+0xe4>
        neighbor_cache[i].counter.delay_time--;
 801504e:	4a7c      	ldr	r2, [pc, #496]	; (8015240 <nd6_tmr+0x2c8>)
 8015050:	202c      	movs	r0, #44	; 0x2c
 8015052:	fb00 2004 	mla	r0, r0, r4, r2
 8015056:	3b01      	subs	r3, #1
 8015058:	6283      	str	r3, [r0, #40]	; 0x28
 801505a:	e7d6      	b.n	801500a <nd6_tmr+0x92>
        neighbor_cache[i].state = ND6_PROBE;
 801505c:	202c      	movs	r0, #44	; 0x2c
 801505e:	fb00 2004 	mla	r0, r0, r4, r2
 8015062:	2305      	movs	r3, #5
 8015064:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        neighbor_cache[i].counter.probes_sent = 0;
 8015068:	2300      	movs	r3, #0
 801506a:	6283      	str	r3, [r0, #40]	; 0x28
 801506c:	e7cd      	b.n	801500a <nd6_tmr+0x92>
      if ((neighbor_cache[i].counter.probes_sent >= LWIP_ND6_MAX_MULTICAST_SOLICIT) &&
 801506e:	4a74      	ldr	r2, [pc, #464]	; (8015240 <nd6_tmr+0x2c8>)
 8015070:	232c      	movs	r3, #44	; 0x2c
 8015072:	fb03 2304 	mla	r3, r3, r4, r2
 8015076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015078:	2b02      	cmp	r3, #2
 801507a:	d906      	bls.n	801508a <nd6_tmr+0x112>
          (!neighbor_cache[i].isrouter)) {
 801507c:	4611      	mov	r1, r2
 801507e:	222c      	movs	r2, #44	; 0x2c
 8015080:	fb02 1204 	mla	r2, r2, r4, r1
 8015084:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
      if ((neighbor_cache[i].counter.probes_sent >= LWIP_ND6_MAX_MULTICAST_SOLICIT) &&
 8015088:	b14a      	cbz	r2, 801509e <nd6_tmr+0x126>
        neighbor_cache[i].counter.probes_sent++;
 801508a:	486d      	ldr	r0, [pc, #436]	; (8015240 <nd6_tmr+0x2c8>)
 801508c:	222c      	movs	r2, #44	; 0x2c
 801508e:	fb02 0005 	mla	r0, r2, r5, r0
 8015092:	3301      	adds	r3, #1
 8015094:	6283      	str	r3, [r0, #40]	; 0x28
        nd6_send_neighbor_cache_probe(&neighbor_cache[i], 0);
 8015096:	2100      	movs	r1, #0
 8015098:	f7ff f838 	bl	801410c <nd6_send_neighbor_cache_probe>
 801509c:	e7b5      	b.n	801500a <nd6_tmr+0x92>
        nd6_free_neighbor_cache_entry(i);
 801509e:	4620      	mov	r0, r4
 80150a0:	f7fe fdb2 	bl	8013c08 <nd6_free_neighbor_cache_entry>
 80150a4:	e7b1      	b.n	801500a <nd6_tmr+0x92>
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 80150a6:	2300      	movs	r3, #0
 80150a8:	2b09      	cmp	r3, #9
 80150aa:	dc0e      	bgt.n	80150ca <nd6_tmr+0x152>
    destination_cache[i].age++;
 80150ac:	4a65      	ldr	r2, [pc, #404]	; (8015244 <nd6_tmr+0x2cc>)
 80150ae:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80150b2:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 80150b6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80150b8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80150bc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80150c0:	3101      	adds	r1, #1
 80150c2:	62d1      	str	r1, [r2, #44]	; 0x2c
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 80150c4:	3301      	adds	r3, #1
 80150c6:	b25b      	sxtb	r3, r3
 80150c8:	e7ee      	b.n	80150a8 <nd6_tmr+0x130>
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 80150ca:	2000      	movs	r0, #0
 80150cc:	e054      	b.n	8015178 <nd6_tmr+0x200>
        for (j = 0; j < LWIP_ND6_NUM_DESTINATIONS; j++) {
 80150ce:	3301      	adds	r3, #1
 80150d0:	b25b      	sxtb	r3, r3
 80150d2:	2b09      	cmp	r3, #9
 80150d4:	dc3e      	bgt.n	8015154 <nd6_tmr+0x1dc>
          if (ip6_addr_cmp(&destination_cache[j].next_hop_addr,
 80150d6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80150da:	495a      	ldr	r1, [pc, #360]	; (8015244 <nd6_tmr+0x2cc>)
 80150dc:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80150e0:	6951      	ldr	r1, [r2, #20]
 80150e2:	6822      	ldr	r2, [r4, #0]
 80150e4:	4291      	cmp	r1, r2
 80150e6:	d1f2      	bne.n	80150ce <nd6_tmr+0x156>
 80150e8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80150ec:	4955      	ldr	r1, [pc, #340]	; (8015244 <nd6_tmr+0x2cc>)
 80150ee:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80150f2:	6991      	ldr	r1, [r2, #24]
 80150f4:	6862      	ldr	r2, [r4, #4]
 80150f6:	4291      	cmp	r1, r2
 80150f8:	d1e9      	bne.n	80150ce <nd6_tmr+0x156>
 80150fa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80150fe:	4951      	ldr	r1, [pc, #324]	; (8015244 <nd6_tmr+0x2cc>)
 8015100:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8015104:	69d1      	ldr	r1, [r2, #28]
 8015106:	68a2      	ldr	r2, [r4, #8]
 8015108:	4291      	cmp	r1, r2
 801510a:	d1e0      	bne.n	80150ce <nd6_tmr+0x156>
 801510c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8015110:	4a4c      	ldr	r2, [pc, #304]	; (8015244 <nd6_tmr+0x2cc>)
 8015112:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8015116:	6a11      	ldr	r1, [r2, #32]
 8015118:	68e2      	ldr	r2, [r4, #12]
 801511a:	4291      	cmp	r1, r2
 801511c:	d1d7      	bne.n	80150ce <nd6_tmr+0x156>
 801511e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8015122:	4a48      	ldr	r2, [pc, #288]	; (8015244 <nd6_tmr+0x2cc>)
 8015124:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8015128:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
 801512c:	7c22      	ldrb	r2, [r4, #16]
 801512e:	4291      	cmp	r1, r2
 8015130:	d1cd      	bne.n	80150ce <nd6_tmr+0x156>
             ip6_addr_set_any(&destination_cache[j].destination_addr);
 8015132:	4944      	ldr	r1, [pc, #272]	; (8015244 <nd6_tmr+0x2cc>)
 8015134:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8015138:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 801513c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8015140:	2700      	movs	r7, #0
 8015142:	f841 700c 	str.w	r7, [r1, ip]
 8015146:	6057      	str	r7, [r2, #4]
 8015148:	6097      	str	r7, [r2, #8]
 801514a:	60d7      	str	r7, [r2, #12]
 801514c:	7417      	strb	r7, [r2, #16]
 801514e:	e7be      	b.n	80150ce <nd6_tmr+0x156>
        for (j = 0; j < LWIP_ND6_NUM_DESTINATIONS; j++) {
 8015150:	2300      	movs	r3, #0
 8015152:	e7be      	b.n	80150d2 <nd6_tmr+0x15a>
        default_router_list[i].neighbor_entry->isrouter = 0;
 8015154:	2100      	movs	r1, #0
 8015156:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
        default_router_list[i].neighbor_entry = NULL;
 801515a:	4a3b      	ldr	r2, [pc, #236]	; (8015248 <nd6_tmr+0x2d0>)
 801515c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8015160:	009c      	lsls	r4, r3, #2
 8015162:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015166:	5111      	str	r1, [r2, r4]
        default_router_list[i].invalidation_timer = 0;
 8015168:	6059      	str	r1, [r3, #4]
        default_router_list[i].flags = 0;
 801516a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801516e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015172:	7211      	strb	r1, [r2, #8]
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 8015174:	3001      	adds	r0, #1
 8015176:	b240      	sxtb	r0, r0
 8015178:	2802      	cmp	r0, #2
 801517a:	dc14      	bgt.n	80151a6 <nd6_tmr+0x22e>
    if (default_router_list[i].neighbor_entry != NULL) {
 801517c:	4605      	mov	r5, r0
 801517e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8015182:	4a31      	ldr	r2, [pc, #196]	; (8015248 <nd6_tmr+0x2d0>)
 8015184:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015188:	2c00      	cmp	r4, #0
 801518a:	d0f3      	beq.n	8015174 <nd6_tmr+0x1fc>
      if (default_router_list[i].invalidation_timer <= ND6_TMR_INTERVAL / 1000) {
 801518c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015190:	685a      	ldr	r2, [r3, #4]
 8015192:	2a01      	cmp	r2, #1
 8015194:	d9dc      	bls.n	8015150 <nd6_tmr+0x1d8>
        default_router_list[i].invalidation_timer -= ND6_TMR_INTERVAL / 1000;
 8015196:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801519a:	492b      	ldr	r1, [pc, #172]	; (8015248 <nd6_tmr+0x2d0>)
 801519c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80151a0:	3a01      	subs	r2, #1
 80151a2:	605a      	str	r2, [r3, #4]
 80151a4:	e7e6      	b.n	8015174 <nd6_tmr+0x1fc>
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
 80151a6:	2300      	movs	r3, #0
 80151a8:	e009      	b.n	80151be <nd6_tmr+0x246>
        prefix_list[i].invalidation_timer = 0;
 80151aa:	4601      	mov	r1, r0
 80151ac:	ebc3 00c3 	rsb	r0, r3, r3, lsl #3
 80151b0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80151b4:	2400      	movs	r4, #0
 80151b6:	6184      	str	r4, [r0, #24]
        prefix_list[i].netif = NULL;
 80151b8:	6144      	str	r4, [r0, #20]
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
 80151ba:	3301      	adds	r3, #1
 80151bc:	b25b      	sxtb	r3, r3
 80151be:	2b04      	cmp	r3, #4
 80151c0:	dc16      	bgt.n	80151f0 <nd6_tmr+0x278>
    if (prefix_list[i].netif != NULL) {
 80151c2:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80151c6:	4821      	ldr	r0, [pc, #132]	; (801524c <nd6_tmr+0x2d4>)
 80151c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80151cc:	6949      	ldr	r1, [r1, #20]
 80151ce:	2900      	cmp	r1, #0
 80151d0:	d0f3      	beq.n	80151ba <nd6_tmr+0x242>
      if (prefix_list[i].invalidation_timer <= ND6_TMR_INTERVAL / 1000) {
 80151d2:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 80151d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80151da:	6989      	ldr	r1, [r1, #24]
 80151dc:	2901      	cmp	r1, #1
 80151de:	d9e4      	bls.n	80151aa <nd6_tmr+0x232>
        prefix_list[i].invalidation_timer -= ND6_TMR_INTERVAL / 1000;
 80151e0:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80151e4:	4819      	ldr	r0, [pc, #100]	; (801524c <nd6_tmr+0x2d4>)
 80151e6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80151ea:	3901      	subs	r1, #1
 80151ec:	6191      	str	r1, [r2, #24]
 80151ee:	e7e4      	b.n	80151ba <nd6_tmr+0x242>
  NETIF_FOREACH(netif) {
 80151f0:	4b17      	ldr	r3, [pc, #92]	; (8015250 <nd6_tmr+0x2d8>)
 80151f2:	681d      	ldr	r5, [r3, #0]
 80151f4:	e096      	b.n	8015324 <nd6_tmr+0x3ac>
          netif_ip6_addr_set_valid_life(netif, i, 0);
 80151f6:	2200      	movs	r2, #0
 80151f8:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
          netif_ip6_addr_set_pref_life(netif, i, 0);
 80151fc:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8015200:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015204:	605a      	str	r2, [r3, #4]
          netif_ip6_addr_set_state(netif, i, IP6_ADDR_INVALID);
 8015206:	4621      	mov	r1, r4
 8015208:	4628      	mov	r0, r5
 801520a:	f7f2 fd35 	bl	8007c78 <netif_ip6_addr_set_state>
 801520e:	e057      	b.n	80152c0 <nd6_tmr+0x348>
            LWIP_ASSERT("bad valid lifetime", life != IP6_ADDR_LIFE_STATIC);
 8015210:	4b10      	ldr	r3, [pc, #64]	; (8015254 <nd6_tmr+0x2dc>)
 8015212:	f240 4246 	movw	r2, #1094	; 0x446
 8015216:	4910      	ldr	r1, [pc, #64]	; (8015258 <nd6_tmr+0x2e0>)
 8015218:	4810      	ldr	r0, [pc, #64]	; (801525c <nd6_tmr+0x2e4>)
 801521a:	f000 fbb9 	bl	8015990 <iprintf>
 801521e:	e03b      	b.n	8015298 <nd6_tmr+0x320>
            netif_ip6_addr_set_pref_life(netif, i, 0);
 8015220:	f106 0328 	add.w	r3, r6, #40	; 0x28
 8015224:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015228:	2200      	movs	r2, #0
 801522a:	605a      	str	r2, [r3, #4]
            if (addr_state == IP6_ADDR_PREFERRED)
 801522c:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 8015230:	d146      	bne.n	80152c0 <nd6_tmr+0x348>
              netif_ip6_addr_set_state(netif, i, IP6_ADDR_DEPRECATED);
 8015232:	2210      	movs	r2, #16
 8015234:	4621      	mov	r1, r4
 8015236:	4628      	mov	r0, r5
 8015238:	f7f2 fd1e 	bl	8007c78 <netif_ip6_addr_set_state>
 801523c:	e040      	b.n	80152c0 <nd6_tmr+0x348>
 801523e:	bf00      	nop
 8015240:	20007ffc 	.word	0x20007ffc
 8015244:	20008240 	.word	0x20008240
 8015248:	20008420 	.word	0x20008420
 801524c:	200081b4 	.word	0x200081b4
 8015250:	20007f9c 	.word	0x20007f9c
 8015254:	0801a958 	.word	0x0801a958
 8015258:	0801a98c 	.word	0x0801a98c
 801525c:	08016bb4 	.word	0x08016bb4
          addr_state = IP6_ADDR_PREFERRED;
 8015260:	2230      	movs	r2, #48	; 0x30
          netif_ip6_addr_set_state(netif, i, addr_state);
 8015262:	4621      	mov	r1, r4
 8015264:	4628      	mov	r0, r5
 8015266:	f7f2 fd07 	bl	8007c78 <netif_ip6_addr_set_state>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 801526a:	3401      	adds	r4, #1
 801526c:	b264      	sxtb	r4, r4
 801526e:	2c02      	cmp	r4, #2
 8015270:	dc57      	bgt.n	8015322 <nd6_tmr+0x3aa>
      addr_state = netif_ip6_addr_state(netif, i);
 8015272:	4626      	mov	r6, r4
 8015274:	192b      	adds	r3, r5, r4
 8015276:	f893 8094 	ldrb.w	r8, [r3, #148]	; 0x94
      if (!ip6_addr_isinvalid(addr_state) &&
 801527a:	f1b8 0f00 	cmp.w	r8, #0
 801527e:	d01f      	beq.n	80152c0 <nd6_tmr+0x348>
          !netif_ip6_addr_isstatic(netif, i)) {
 8015280:	f104 0326 	add.w	r3, r4, #38	; 0x26
 8015284:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
 8015288:	b1d7      	cbz	r7, 80152c0 <nd6_tmr+0x348>
        if (life <= ND6_TMR_INTERVAL / 1000) {
 801528a:	2f01      	cmp	r7, #1
 801528c:	d9b3      	bls.n	80151f6 <nd6_tmr+0x27e>
          if (!ip6_addr_life_isinfinite(life)) {
 801528e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8015292:	d005      	beq.n	80152a0 <nd6_tmr+0x328>
            LWIP_ASSERT("bad valid lifetime", life != IP6_ADDR_LIFE_STATIC);
 8015294:	3f01      	subs	r7, #1
 8015296:	d0bb      	beq.n	8015210 <nd6_tmr+0x298>
            netif_ip6_addr_set_valid_life(netif, i, life);
 8015298:	f106 0326 	add.w	r3, r6, #38	; 0x26
 801529c:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
          life = netif_ip6_addr_pref_life(netif, i);
 80152a0:	f106 0328 	add.w	r3, r6, #40	; 0x28
 80152a4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80152a8:	685b      	ldr	r3, [r3, #4]
          if (life <= ND6_TMR_INTERVAL / 1000) {
 80152aa:	2b01      	cmp	r3, #1
 80152ac:	d9b8      	bls.n	8015220 <nd6_tmr+0x2a8>
          } else if (!ip6_addr_life_isinfinite(life)) {
 80152ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152b2:	d005      	beq.n	80152c0 <nd6_tmr+0x348>
            life -= ND6_TMR_INTERVAL / 1000;
 80152b4:	3b01      	subs	r3, #1
            netif_ip6_addr_set_pref_life(netif, i, life);
 80152b6:	f106 0228 	add.w	r2, r6, #40	; 0x28
 80152ba:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80152be:	6053      	str	r3, [r2, #4]
      addr_state = netif_ip6_addr_state(netif, i);
 80152c0:	19ab      	adds	r3, r5, r6
 80152c2:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
      if (ip6_addr_istentative(addr_state)) {
 80152c6:	f012 0f08 	tst.w	r2, #8
 80152ca:	d0ce      	beq.n	801526a <nd6_tmr+0x2f2>
        if ((addr_state & IP6_ADDR_TENTATIVE_COUNT_MASK) >= LWIP_IPV6_DUP_DETECT_ATTEMPTS) {
 80152cc:	f012 0f07 	tst.w	r2, #7
 80152d0:	d00e      	beq.n	80152f0 <nd6_tmr+0x378>
          if (!netif_ip6_addr_isstatic(netif, i) &&
 80152d2:	f106 0326 	add.w	r3, r6, #38	; 0x26
 80152d6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d0c0      	beq.n	8015260 <nd6_tmr+0x2e8>
              netif_ip6_addr_pref_life(netif, i) == 0) {
 80152de:	3628      	adds	r6, #40	; 0x28
 80152e0:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80152e4:	6873      	ldr	r3, [r6, #4]
 80152e6:	b10b      	cbz	r3, 80152ec <nd6_tmr+0x374>
          addr_state = IP6_ADDR_PREFERRED;
 80152e8:	2230      	movs	r2, #48	; 0x30
 80152ea:	e7ba      	b.n	8015262 <nd6_tmr+0x2ea>
            addr_state = IP6_ADDR_DEPRECATED;
 80152ec:	2210      	movs	r2, #16
 80152ee:	e7b8      	b.n	8015262 <nd6_tmr+0x2ea>
        } else if (netif_is_up(netif) && netif_is_link_up(netif)) {
 80152f0:	f895 30df 	ldrb.w	r3, [r5, #223]	; 0xdf
 80152f4:	f013 0f01 	tst.w	r3, #1
 80152f8:	d0b7      	beq.n	801526a <nd6_tmr+0x2f2>
 80152fa:	f013 0f04 	tst.w	r3, #4
 80152fe:	d0b4      	beq.n	801526a <nd6_tmr+0x2f2>
          netif_ip6_addr_set_state(netif, i, addr_state + 1);
 8015300:	3201      	adds	r2, #1
 8015302:	b2d2      	uxtb	r2, r2
 8015304:	4621      	mov	r1, r4
 8015306:	4628      	mov	r0, r5
 8015308:	f7f2 fcb6 	bl	8007c78 <netif_ip6_addr_set_state>
          nd6_send_ns(netif, netif_ip6_addr(netif, i),
 801530c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8015310:	00c9      	lsls	r1, r1, #3
 8015312:	3148      	adds	r1, #72	; 0x48
 8015314:	4429      	add	r1, r5
 8015316:	2205      	movs	r2, #5
 8015318:	3104      	adds	r1, #4
 801531a:	4628      	mov	r0, r5
 801531c:	f7fe fe70 	bl	8014000 <nd6_send_ns>
 8015320:	e7a3      	b.n	801526a <nd6_tmr+0x2f2>
  NETIF_FOREACH(netif) {
 8015322:	682d      	ldr	r5, [r5, #0]
 8015324:	b10d      	cbz	r5, 801532a <nd6_tmr+0x3b2>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 8015326:	2400      	movs	r4, #0
 8015328:	e7a1      	b.n	801526e <nd6_tmr+0x2f6>
  if (!nd6_tmr_rs_reduction) {
 801532a:	4b16      	ldr	r3, [pc, #88]	; (8015384 <nd6_tmr+0x40c>)
 801532c:	781b      	ldrb	r3, [r3, #0]
 801532e:	bb23      	cbnz	r3, 801537a <nd6_tmr+0x402>
    nd6_tmr_rs_reduction = (ND6_RTR_SOLICITATION_INTERVAL / ND6_TMR_INTERVAL) - 1;
 8015330:	4b14      	ldr	r3, [pc, #80]	; (8015384 <nd6_tmr+0x40c>)
 8015332:	2203      	movs	r2, #3
 8015334:	701a      	strb	r2, [r3, #0]
    NETIF_FOREACH(netif) {
 8015336:	4b14      	ldr	r3, [pc, #80]	; (8015388 <nd6_tmr+0x410>)
 8015338:	681c      	ldr	r4, [r3, #0]
 801533a:	e000      	b.n	801533e <nd6_tmr+0x3c6>
 801533c:	6824      	ldr	r4, [r4, #0]
 801533e:	b1fc      	cbz	r4, 8015380 <nd6_tmr+0x408>
      if ((netif->rs_count > 0) && netif_is_up(netif) &&
 8015340:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8015344:	2b00      	cmp	r3, #0
 8015346:	d0f9      	beq.n	801533c <nd6_tmr+0x3c4>
 8015348:	f894 30df 	ldrb.w	r3, [r4, #223]	; 0xdf
 801534c:	f013 0f01 	tst.w	r3, #1
 8015350:	d0f4      	beq.n	801533c <nd6_tmr+0x3c4>
 8015352:	f013 0f04 	tst.w	r3, #4
 8015356:	d0f1      	beq.n	801533c <nd6_tmr+0x3c4>
          !ip6_addr_isinvalid(netif_ip6_addr_state(netif, 0)) &&
 8015358:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
          netif_is_link_up(netif) &&
 801535c:	2b00      	cmp	r3, #0
 801535e:	d0ed      	beq.n	801533c <nd6_tmr+0x3c4>
          !ip6_addr_isinvalid(netif_ip6_addr_state(netif, 0)) &&
 8015360:	2b40      	cmp	r3, #64	; 0x40
 8015362:	d0eb      	beq.n	801533c <nd6_tmr+0x3c4>
        if (nd6_send_rs(netif) == ERR_OK) {
 8015364:	4620      	mov	r0, r4
 8015366:	f7fe fde3 	bl	8013f30 <nd6_send_rs>
 801536a:	2800      	cmp	r0, #0
 801536c:	d1e6      	bne.n	801533c <nd6_tmr+0x3c4>
          netif->rs_count--;
 801536e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
 8015372:	3b01      	subs	r3, #1
 8015374:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 8015378:	e7e0      	b.n	801533c <nd6_tmr+0x3c4>
    nd6_tmr_rs_reduction--;
 801537a:	3b01      	subs	r3, #1
 801537c:	4a01      	ldr	r2, [pc, #4]	; (8015384 <nd6_tmr+0x40c>)
 801537e:	7013      	strb	r3, [r2, #0]
}
 8015380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015384:	20000c2c 	.word	0x20000c2c
 8015388:	20007f9c 	.word	0x20007f9c

0801538c <nd6_clear_destination_cache>:
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 801538c:	2200      	movs	r2, #0
 801538e:	2a09      	cmp	r2, #9
 8015390:	dc11      	bgt.n	80153b6 <nd6_clear_destination_cache+0x2a>
{
 8015392:	b410      	push	{r4}
    ip6_addr_set_any(&destination_cache[i].destination_addr);
 8015394:	4c08      	ldr	r4, [pc, #32]	; (80153b8 <nd6_clear_destination_cache+0x2c>)
 8015396:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 801539a:	0118      	lsls	r0, r3, #4
 801539c:	1821      	adds	r1, r4, r0
 801539e:	2300      	movs	r3, #0
 80153a0:	5023      	str	r3, [r4, r0]
 80153a2:	604b      	str	r3, [r1, #4]
 80153a4:	608b      	str	r3, [r1, #8]
 80153a6:	60cb      	str	r3, [r1, #12]
 80153a8:	740b      	strb	r3, [r1, #16]
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 80153aa:	3201      	adds	r2, #1
 80153ac:	2a09      	cmp	r2, #9
 80153ae:	ddf1      	ble.n	8015394 <nd6_clear_destination_cache+0x8>
}
 80153b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153b4:	4770      	bx	lr
 80153b6:	4770      	bx	lr
 80153b8:	20008240 	.word	0x20008240

080153bc <nd6_find_route>:
{
 80153bc:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 80153be:	2300      	movs	r3, #0
 80153c0:	e001      	b.n	80153c6 <nd6_find_route+0xa>
 80153c2:	3301      	adds	r3, #1
 80153c4:	b25b      	sxtb	r3, r3
 80153c6:	2b04      	cmp	r3, #4
 80153c8:	dc2a      	bgt.n	8015420 <nd6_find_route+0x64>
    netif = prefix_list[i].netif;
 80153ca:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80153ce:	4923      	ldr	r1, [pc, #140]	; (801545c <nd6_find_route+0xa0>)
 80153d0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80153d4:	6951      	ldr	r1, [r2, #20]
    if ((netif != NULL) && ip6_addr_netcmp(&prefix_list[i].prefix, ip6addr) &&
 80153d6:	2900      	cmp	r1, #0
 80153d8:	d0f3      	beq.n	80153c2 <nd6_find_route+0x6>
 80153da:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80153de:	4d1f      	ldr	r5, [pc, #124]	; (801545c <nd6_find_route+0xa0>)
 80153e0:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80153e4:	6802      	ldr	r2, [r0, #0]
 80153e6:	4295      	cmp	r5, r2
 80153e8:	d1eb      	bne.n	80153c2 <nd6_find_route+0x6>
 80153ea:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80153ee:	4d1b      	ldr	r5, [pc, #108]	; (801545c <nd6_find_route+0xa0>)
 80153f0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80153f4:	6855      	ldr	r5, [r2, #4]
 80153f6:	6842      	ldr	r2, [r0, #4]
 80153f8:	4295      	cmp	r5, r2
 80153fa:	d1e2      	bne.n	80153c2 <nd6_find_route+0x6>
 80153fc:	ebc3 04c3 	rsb	r4, r3, r3, lsl #3
 8015400:	4a16      	ldr	r2, [pc, #88]	; (801545c <nd6_find_route+0xa0>)
 8015402:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8015406:	7c24      	ldrb	r4, [r4, #16]
 8015408:	7c02      	ldrb	r2, [r0, #16]
 801540a:	4294      	cmp	r4, r2
 801540c:	d1d9      	bne.n	80153c2 <nd6_find_route+0x6>
        netif_is_up(netif) && netif_is_link_up(netif)) {
 801540e:	f891 20df 	ldrb.w	r2, [r1, #223]	; 0xdf
    if ((netif != NULL) && ip6_addr_netcmp(&prefix_list[i].prefix, ip6addr) &&
 8015412:	f012 0f01 	tst.w	r2, #1
 8015416:	d0d4      	beq.n	80153c2 <nd6_find_route+0x6>
        netif_is_up(netif) && netif_is_link_up(netif)) {
 8015418:	f012 0f04 	tst.w	r2, #4
 801541c:	d0d1      	beq.n	80153c2 <nd6_find_route+0x6>
 801541e:	e010      	b.n	8015442 <nd6_find_route+0x86>
  i = nd6_select_router(ip6addr, NULL);
 8015420:	2100      	movs	r1, #0
 8015422:	f7fe f927 	bl	8013674 <nd6_select_router>
  if (i >= 0) {
 8015426:	1e04      	subs	r4, r0, #0
 8015428:	db15      	blt.n	8015456 <nd6_find_route+0x9a>
    LWIP_ASSERT("selected router must have a neighbor entry",
 801542a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801542e:	4a0c      	ldr	r2, [pc, #48]	; (8015460 <nd6_find_route+0xa4>)
 8015430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015434:	b13b      	cbz	r3, 8015446 <nd6_find_route+0x8a>
    return default_router_list[i].neighbor_entry->netif;
 8015436:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801543a:	4b09      	ldr	r3, [pc, #36]	; (8015460 <nd6_find_route+0xa4>)
 801543c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8015440:	6959      	ldr	r1, [r3, #20]
}
 8015442:	4608      	mov	r0, r1
 8015444:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("selected router must have a neighbor entry",
 8015446:	4b07      	ldr	r3, [pc, #28]	; (8015464 <nd6_find_route+0xa8>)
 8015448:	f240 62e2 	movw	r2, #1762	; 0x6e2
 801544c:	4906      	ldr	r1, [pc, #24]	; (8015468 <nd6_find_route+0xac>)
 801544e:	4807      	ldr	r0, [pc, #28]	; (801546c <nd6_find_route+0xb0>)
 8015450:	f000 fa9e 	bl	8015990 <iprintf>
 8015454:	e7ef      	b.n	8015436 <nd6_find_route+0x7a>
  return NULL;
 8015456:	2100      	movs	r1, #0
 8015458:	e7f3      	b.n	8015442 <nd6_find_route+0x86>
 801545a:	bf00      	nop
 801545c:	200081b4 	.word	0x200081b4
 8015460:	20008420 	.word	0x20008420
 8015464:	0801a958 	.word	0x0801a958
 8015468:	0801a9dc 	.word	0x0801a9dc
 801546c:	08016bb4 	.word	0x08016bb4

08015470 <nd6_get_next_hop_addr_or_queue>:
 * - ERR_OK on success, ERR_RTE if no route was found for the packet,
 * or ERR_MEM if low memory conditions prohibit sending the packet at all.
 */
err_t
nd6_get_next_hop_addr_or_queue(struct netif *netif, struct pbuf *q, const ip6_addr_t *ip6addr, const u8_t **hwaddrp)
{
 8015470:	b538      	push	{r3, r4, r5, lr}
 8015472:	460d      	mov	r5, r1
 8015474:	461c      	mov	r4, r3
  s8_t i;

  /* Get next hop record. */
  i = nd6_get_next_hop_entry(ip6addr, netif);
 8015476:	4601      	mov	r1, r0
 8015478:	4610      	mov	r0, r2
 801547a:	f7fe fecf 	bl	801421c <nd6_get_next_hop_entry>
  if (i < 0) {
 801547e:	2800      	cmp	r0, #0
 8015480:	db2b      	blt.n	80154da <nd6_get_next_hop_addr_or_queue+0x6a>
    /* failed to get a next hop neighbor record. */
    return i;
  }

  /* Now that we have a destination record, send or queue the packet. */
  if (neighbor_cache[i].state == ND6_STALE) {
 8015482:	4601      	mov	r1, r0
 8015484:	4a15      	ldr	r2, [pc, #84]	; (80154dc <nd6_get_next_hop_addr_or_queue+0x6c>)
 8015486:	232c      	movs	r3, #44	; 0x2c
 8015488:	fb03 2300 	mla	r3, r3, r0, r2
 801548c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015490:	2b03      	cmp	r3, #3
 8015492:	d011      	beq.n	80154b8 <nd6_get_next_hop_addr_or_queue+0x48>
    /* Switch to delay state. */
    neighbor_cache[i].state = ND6_DELAY;
    neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
  }
  /* @todo should we send or queue if PROBE? send for now, to let unicast NS pass. */
  if ((neighbor_cache[i].state == ND6_REACHABLE) ||
 8015494:	4a11      	ldr	r2, [pc, #68]	; (80154dc <nd6_get_next_hop_addr_or_queue+0x6c>)
 8015496:	232c      	movs	r3, #44	; 0x2c
 8015498:	fb03 2301 	mla	r3, r3, r1, r2
 801549c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80154a0:	2b02      	cmp	r3, #2
 80154a2:	d012      	beq.n	80154ca <nd6_get_next_hop_addr_or_queue+0x5a>
 80154a4:	2b04      	cmp	r3, #4
 80154a6:	d010      	beq.n	80154ca <nd6_get_next_hop_addr_or_queue+0x5a>
      (neighbor_cache[i].state == ND6_DELAY) ||
 80154a8:	2b05      	cmp	r3, #5
 80154aa:	d00e      	beq.n	80154ca <nd6_get_next_hop_addr_or_queue+0x5a>
    *hwaddrp = neighbor_cache[i].lladdr;
    return ERR_OK;
  }

  /* We should queue packet on this interface. */
  *hwaddrp = NULL;
 80154ac:	2300      	movs	r3, #0
 80154ae:	6023      	str	r3, [r4, #0]
  return nd6_queue_packet(i, q);
 80154b0:	4629      	mov	r1, r5
 80154b2:	f7ff f849 	bl	8014548 <nd6_queue_packet>
 80154b6:	e010      	b.n	80154da <nd6_get_next_hop_addr_or_queue+0x6a>
    neighbor_cache[i].state = ND6_DELAY;
 80154b8:	232c      	movs	r3, #44	; 0x2c
 80154ba:	fb03 2300 	mla	r3, r3, r0, r2
 80154be:	2204      	movs	r2, #4
 80154c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 80154c4:	2205      	movs	r2, #5
 80154c6:	629a      	str	r2, [r3, #40]	; 0x28
 80154c8:	e7e4      	b.n	8015494 <nd6_get_next_hop_addr_or_queue+0x24>
    *hwaddrp = neighbor_cache[i].lladdr;
 80154ca:	222c      	movs	r2, #44	; 0x2c
 80154cc:	fb02 f201 	mul.w	r2, r2, r1
 80154d0:	3218      	adds	r2, #24
 80154d2:	4b02      	ldr	r3, [pc, #8]	; (80154dc <nd6_get_next_hop_addr_or_queue+0x6c>)
 80154d4:	441a      	add	r2, r3
 80154d6:	6022      	str	r2, [r4, #0]
    return ERR_OK;
 80154d8:	2000      	movs	r0, #0
}
 80154da:	bd38      	pop	{r3, r4, r5, pc}
 80154dc:	20007ffc 	.word	0x20007ffc

080154e0 <nd6_get_destination_mtu>:
 * @param netif the netif on which the packet will be sent
 * @return the Path MTU, if known, or the netif default MTU
 */
u16_t
nd6_get_destination_mtu(const ip6_addr_t *ip6addr, struct netif *netif)
{
 80154e0:	b510      	push	{r4, lr}
 80154e2:	460c      	mov	r4, r1
  s16_t i;

  i = nd6_find_destination_cache_entry(ip6addr);
 80154e4:	f7fd fff0 	bl	80134c8 <nd6_find_destination_cache_entry>
  if (i >= 0) {
 80154e8:	2800      	cmp	r0, #0
 80154ea:	db06      	blt.n	80154fa <nd6_get_destination_mtu+0x1a>
    if (destination_cache[i].pmtu > 0) {
 80154ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80154f0:	4b05      	ldr	r3, [pc, #20]	; (8015508 <nd6_get_destination_mtu+0x28>)
 80154f2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80154f6:	8d00      	ldrh	r0, [r0, #40]	; 0x28
 80154f8:	b910      	cbnz	r0, 8015500 <nd6_get_destination_mtu+0x20>
      return destination_cache[i].pmtu;
    }
  }

  if (netif != NULL) {
 80154fa:	b114      	cbz	r4, 8015502 <nd6_get_destination_mtu+0x22>
    return netif_mtu6(netif);
 80154fc:	f8b4 00d6 	ldrh.w	r0, [r4, #214]	; 0xd6
  }

  return 1280; /* Minimum MTU */
}
 8015500:	bd10      	pop	{r4, pc}
  return 1280; /* Minimum MTU */
 8015502:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8015506:	e7fb      	b.n	8015500 <nd6_get_destination_mtu+0x20>
 8015508:	20008240 	.word	0x20008240

0801550c <nd6_reachability_hint>:
 * @param ip6addr the destination address which is know to be reachable
 *                by an upper layer protocol (TCP)
 */
void
nd6_reachability_hint(const ip6_addr_t *ip6addr)
{
 801550c:	b538      	push	{r3, r4, r5, lr}
  s8_t i;
  s16_t dst_idx;

  /* Find destination in cache. */
  if (ip6_addr_cmp(ip6addr, &(destination_cache[nd6_cached_destination_index].destination_addr))) {
 801550e:	6801      	ldr	r1, [r0, #0]
 8015510:	4b48      	ldr	r3, [pc, #288]	; (8015634 <nd6_reachability_hint+0x128>)
 8015512:	781b      	ldrb	r3, [r3, #0]
 8015514:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8015518:	0112      	lsls	r2, r2, #4
 801551a:	4c47      	ldr	r4, [pc, #284]	; (8015638 <nd6_reachability_hint+0x12c>)
 801551c:	58a2      	ldr	r2, [r4, r2]
 801551e:	4291      	cmp	r1, r2
 8015520:	d031      	beq.n	8015586 <nd6_reachability_hint+0x7a>
    dst_idx = nd6_cached_destination_index;
    ND6_STATS_INC(nd6.cachehit);
  } else {
    dst_idx = nd6_find_destination_cache_entry(ip6addr);
 8015522:	f7fd ffd1 	bl	80134c8 <nd6_find_destination_cache_entry>
  }
  if (dst_idx < 0) {
 8015526:	2800      	cmp	r0, #0
 8015528:	db2c      	blt.n	8015584 <nd6_reachability_hint+0x78>
    return;
  }

  /* Find next hop neighbor in cache. */
  if (ip6_addr_cmp(&(destination_cache[dst_idx].next_hop_addr), &(neighbor_cache[nd6_cached_neighbor_index].next_hop_address))) {
 801552a:	4603      	mov	r3, r0
 801552c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8015530:	4941      	ldr	r1, [pc, #260]	; (8015638 <nd6_reachability_hint+0x12c>)
 8015532:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8015536:	6954      	ldr	r4, [r2, #20]
 8015538:	4a40      	ldr	r2, [pc, #256]	; (801563c <nd6_reachability_hint+0x130>)
 801553a:	7812      	ldrb	r2, [r2, #0]
 801553c:	212c      	movs	r1, #44	; 0x2c
 801553e:	fb01 f102 	mul.w	r1, r1, r2
 8015542:	4d3f      	ldr	r5, [pc, #252]	; (8015640 <nd6_reachability_hint+0x134>)
 8015544:	5869      	ldr	r1, [r5, r1]
 8015546:	428c      	cmp	r4, r1
 8015548:	d040      	beq.n	80155cc <nd6_reachability_hint+0xc0>
    i = nd6_cached_neighbor_index;
    ND6_STATS_INC(nd6.cachehit);
  } else {
    i = nd6_find_neighbor_cache_entry(&(destination_cache[dst_idx].next_hop_addr));
 801554a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 801554e:	0100      	lsls	r0, r0, #4
 8015550:	3010      	adds	r0, #16
 8015552:	4b39      	ldr	r3, [pc, #228]	; (8015638 <nd6_reachability_hint+0x12c>)
 8015554:	4418      	add	r0, r3
 8015556:	3004      	adds	r0, #4
 8015558:	f7fd ff82 	bl	8013460 <nd6_find_neighbor_cache_entry>
  }
  if (i < 0) {
 801555c:	2800      	cmp	r0, #0
 801555e:	db11      	blt.n	8015584 <nd6_reachability_hint+0x78>
    return;
  }

  /* For safety: don't set as reachable if we don't have a LL address yet. Misuse protection. */
  if (neighbor_cache[i].state == ND6_INCOMPLETE || neighbor_cache[i].state == ND6_NO_ENTRY) {
 8015560:	4a37      	ldr	r2, [pc, #220]	; (8015640 <nd6_reachability_hint+0x134>)
 8015562:	232c      	movs	r3, #44	; 0x2c
 8015564:	fb03 2300 	mla	r3, r3, r0, r2
 8015568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801556c:	2b01      	cmp	r3, #1
 801556e:	d909      	bls.n	8015584 <nd6_reachability_hint+0x78>
    return;
  }

  /* Set reachability state. */
  neighbor_cache[i].state = ND6_REACHABLE;
 8015570:	4613      	mov	r3, r2
 8015572:	222c      	movs	r2, #44	; 0x2c
 8015574:	fb02 3000 	mla	r0, r2, r0, r3
 8015578:	2302      	movs	r3, #2
 801557a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  neighbor_cache[i].counter.reachable_time = reachable_time;
 801557e:	4b31      	ldr	r3, [pc, #196]	; (8015644 <nd6_reachability_hint+0x138>)
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	6283      	str	r3, [r0, #40]	; 0x28
}
 8015584:	bd38      	pop	{r3, r4, r5, pc}
  if (ip6_addr_cmp(ip6addr, &(destination_cache[nd6_cached_destination_index].destination_addr))) {
 8015586:	6844      	ldr	r4, [r0, #4]
 8015588:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801558c:	492a      	ldr	r1, [pc, #168]	; (8015638 <nd6_reachability_hint+0x12c>)
 801558e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8015592:	6852      	ldr	r2, [r2, #4]
 8015594:	4294      	cmp	r4, r2
 8015596:	d1c4      	bne.n	8015522 <nd6_reachability_hint+0x16>
 8015598:	6884      	ldr	r4, [r0, #8]
 801559a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801559e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80155a2:	6892      	ldr	r2, [r2, #8]
 80155a4:	4294      	cmp	r4, r2
 80155a6:	d1bc      	bne.n	8015522 <nd6_reachability_hint+0x16>
 80155a8:	68c4      	ldr	r4, [r0, #12]
 80155aa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80155ae:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80155b2:	68d2      	ldr	r2, [r2, #12]
 80155b4:	4294      	cmp	r4, r2
 80155b6:	d1b4      	bne.n	8015522 <nd6_reachability_hint+0x16>
 80155b8:	7c04      	ldrb	r4, [r0, #16]
 80155ba:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80155be:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80155c2:	7c12      	ldrb	r2, [r2, #16]
 80155c4:	4294      	cmp	r4, r2
 80155c6:	d1ac      	bne.n	8015522 <nd6_reachability_hint+0x16>
    dst_idx = nd6_cached_destination_index;
 80155c8:	b218      	sxth	r0, r3
 80155ca:	e7ac      	b.n	8015526 <nd6_reachability_hint+0x1a>
  if (ip6_addr_cmp(&(destination_cache[dst_idx].next_hop_addr), &(neighbor_cache[nd6_cached_neighbor_index].next_hop_address))) {
 80155cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80155d0:	4919      	ldr	r1, [pc, #100]	; (8015638 <nd6_reachability_hint+0x12c>)
 80155d2:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80155d6:	6980      	ldr	r0, [r0, #24]
 80155d8:	212c      	movs	r1, #44	; 0x2c
 80155da:	fb01 5102 	mla	r1, r1, r2, r5
 80155de:	6849      	ldr	r1, [r1, #4]
 80155e0:	4288      	cmp	r0, r1
 80155e2:	d1b2      	bne.n	801554a <nd6_reachability_hint+0x3e>
 80155e4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80155e8:	4813      	ldr	r0, [pc, #76]	; (8015638 <nd6_reachability_hint+0x12c>)
 80155ea:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80155ee:	69c8      	ldr	r0, [r1, #28]
 80155f0:	212c      	movs	r1, #44	; 0x2c
 80155f2:	fb01 5102 	mla	r1, r1, r2, r5
 80155f6:	6889      	ldr	r1, [r1, #8]
 80155f8:	4288      	cmp	r0, r1
 80155fa:	d1a6      	bne.n	801554a <nd6_reachability_hint+0x3e>
 80155fc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8015600:	480d      	ldr	r0, [pc, #52]	; (8015638 <nd6_reachability_hint+0x12c>)
 8015602:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8015606:	6a08      	ldr	r0, [r1, #32]
 8015608:	212c      	movs	r1, #44	; 0x2c
 801560a:	fb01 5102 	mla	r1, r1, r2, r5
 801560e:	68c9      	ldr	r1, [r1, #12]
 8015610:	4288      	cmp	r0, r1
 8015612:	d19a      	bne.n	801554a <nd6_reachability_hint+0x3e>
 8015614:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8015618:	4807      	ldr	r0, [pc, #28]	; (8015638 <nd6_reachability_hint+0x12c>)
 801561a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 801561e:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
 8015622:	212c      	movs	r1, #44	; 0x2c
 8015624:	fb01 5102 	mla	r1, r1, r2, r5
 8015628:	7c09      	ldrb	r1, [r1, #16]
 801562a:	4288      	cmp	r0, r1
 801562c:	d18d      	bne.n	801554a <nd6_reachability_hint+0x3e>
    i = nd6_cached_neighbor_index;
 801562e:	b250      	sxtb	r0, r2
 8015630:	e794      	b.n	801555c <nd6_reachability_hint+0x50>
 8015632:	bf00      	nop
 8015634:	20000c08 	.word	0x20000c08
 8015638:	20008240 	.word	0x20008240
 801563c:	20000c09 	.word	0x20000c09
 8015640:	20007ffc 	.word	0x20007ffc
 8015644:	20000014 	.word	0x20000014

08015648 <nd6_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
nd6_cleanup_netif(struct netif *netif)
{
 8015648:	b570      	push	{r4, r5, r6, lr}
 801564a:	4605      	mov	r5, r0
  u8_t i;
  s8_t router_index;
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
 801564c:	2300      	movs	r3, #0
 801564e:	e007      	b.n	8015660 <nd6_cleanup_netif+0x18>
    if (prefix_list[i].netif == netif) {
      prefix_list[i].netif = NULL;
 8015650:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8015654:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8015658:	2100      	movs	r1, #0
 801565a:	6151      	str	r1, [r2, #20]
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
 801565c:	3301      	adds	r3, #1
 801565e:	b2db      	uxtb	r3, r3
 8015660:	2b04      	cmp	r3, #4
 8015662:	d808      	bhi.n	8015676 <nd6_cleanup_netif+0x2e>
    if (prefix_list[i].netif == netif) {
 8015664:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8015668:	491f      	ldr	r1, [pc, #124]	; (80156e8 <nd6_cleanup_netif+0xa0>)
 801566a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801566e:	6952      	ldr	r2, [r2, #20]
 8015670:	42aa      	cmp	r2, r5
 8015672:	d1f3      	bne.n	801565c <nd6_cleanup_netif+0x14>
 8015674:	e7ec      	b.n	8015650 <nd6_cleanup_netif+0x8>
    }
  }
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8015676:	2400      	movs	r4, #0
 8015678:	e026      	b.n	80156c8 <nd6_cleanup_netif+0x80>
    if (neighbor_cache[i].netif == netif) {
      for (router_index = 0; router_index < LWIP_ND6_NUM_ROUTERS; router_index++) {
        if (default_router_list[router_index].neighbor_entry == &neighbor_cache[i]) {
          default_router_list[router_index].neighbor_entry = NULL;
 801567a:	4a1c      	ldr	r2, [pc, #112]	; (80156ec <nd6_cleanup_netif+0xa4>)
 801567c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8015680:	0080      	lsls	r0, r0, #2
 8015682:	2600      	movs	r6, #0
 8015684:	5016      	str	r6, [r2, r0]
          default_router_list[router_index].flags = 0;
 8015686:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 801568a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801568e:	7216      	strb	r6, [r2, #8]
      for (router_index = 0; router_index < LWIP_ND6_NUM_ROUTERS; router_index++) {
 8015690:	3301      	adds	r3, #1
 8015692:	b25b      	sxtb	r3, r3
 8015694:	2b02      	cmp	r3, #2
 8015696:	dc0b      	bgt.n	80156b0 <nd6_cleanup_netif+0x68>
        if (default_router_list[router_index].neighbor_entry == &neighbor_cache[i]) {
 8015698:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801569c:	4813      	ldr	r0, [pc, #76]	; (80156ec <nd6_cleanup_netif+0xa4>)
 801569e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80156a2:	222c      	movs	r2, #44	; 0x2c
 80156a4:	4e12      	ldr	r6, [pc, #72]	; (80156f0 <nd6_cleanup_netif+0xa8>)
 80156a6:	fb02 6201 	mla	r2, r2, r1, r6
 80156aa:	4290      	cmp	r0, r2
 80156ac:	d1f0      	bne.n	8015690 <nd6_cleanup_netif+0x48>
 80156ae:	e7e4      	b.n	801567a <nd6_cleanup_netif+0x32>
        }
      }
      neighbor_cache[i].isrouter = 0;
 80156b0:	4b0f      	ldr	r3, [pc, #60]	; (80156f0 <nd6_cleanup_netif+0xa8>)
 80156b2:	222c      	movs	r2, #44	; 0x2c
 80156b4:	fb02 3301 	mla	r3, r2, r1, r3
 80156b8:	2200      	movs	r2, #0
 80156ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      nd6_free_neighbor_cache_entry(i);
 80156be:	b260      	sxtb	r0, r4
 80156c0:	f7fe faa2 	bl	8013c08 <nd6_free_neighbor_cache_entry>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 80156c4:	3401      	adds	r4, #1
 80156c6:	b2e4      	uxtb	r4, r4
 80156c8:	2c09      	cmp	r4, #9
 80156ca:	d809      	bhi.n	80156e0 <nd6_cleanup_netif+0x98>
    if (neighbor_cache[i].netif == netif) {
 80156cc:	4621      	mov	r1, r4
 80156ce:	4a08      	ldr	r2, [pc, #32]	; (80156f0 <nd6_cleanup_netif+0xa8>)
 80156d0:	232c      	movs	r3, #44	; 0x2c
 80156d2:	fb03 2304 	mla	r3, r3, r4, r2
 80156d6:	695b      	ldr	r3, [r3, #20]
 80156d8:	42ab      	cmp	r3, r5
 80156da:	d1f3      	bne.n	80156c4 <nd6_cleanup_netif+0x7c>
      for (router_index = 0; router_index < LWIP_ND6_NUM_ROUTERS; router_index++) {
 80156dc:	2300      	movs	r3, #0
 80156de:	e7d9      	b.n	8015694 <nd6_cleanup_netif+0x4c>
    }
  }
  /* Clear the destination cache, since many entries may now have become
   * invalid for one of several reasons. As destination cache entries have no
   * netif association, use a sledgehammer approach (this can be improved). */
  nd6_clear_destination_cache();
 80156e0:	f7ff fe54 	bl	801538c <nd6_clear_destination_cache>
}
 80156e4:	bd70      	pop	{r4, r5, r6, pc}
 80156e6:	bf00      	nop
 80156e8:	200081b4 	.word	0x200081b4
 80156ec:	20008420 	.word	0x20008420
 80156f0:	20007ffc 	.word	0x20007ffc

080156f4 <nd6_adjust_mld_membership>:
 * @param addr_idx The index of the address.
 * @param new_state The new (IP6_ADDR_) state for the address.
 */
void
nd6_adjust_mld_membership(struct netif *netif, s8_t addr_idx, u8_t new_state)
{
 80156f4:	b510      	push	{r4, lr}
  u8_t old_state, old_member, new_member;

  old_state = netif_ip6_addr_state(netif, addr_idx);
 80156f6:	1843      	adds	r3, r0, r1
 80156f8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94

  /* Determine whether we were, and should be, a member of the solicited-node
   * multicast group for this address. For tentative addresses, the group is
   * not joined until the address enters the TENTATIVE_1 (or VALID) state. */
  old_member = (old_state != IP6_ADDR_INVALID && old_state != IP6_ADDR_DUPLICATED && old_state != IP6_ADDR_TENTATIVE);
 80156fc:	b13b      	cbz	r3, 801570e <nd6_adjust_mld_membership+0x1a>
 80156fe:	2b40      	cmp	r3, #64	; 0x40
 8015700:	d00e      	beq.n	8015720 <nd6_adjust_mld_membership+0x2c>
 8015702:	2b08      	cmp	r3, #8
 8015704:	d001      	beq.n	801570a <nd6_adjust_mld_membership+0x16>
 8015706:	2401      	movs	r4, #1
 8015708:	e002      	b.n	8015710 <nd6_adjust_mld_membership+0x1c>
 801570a:	2400      	movs	r4, #0
 801570c:	e000      	b.n	8015710 <nd6_adjust_mld_membership+0x1c>
 801570e:	2400      	movs	r4, #0
 8015710:	b2e4      	uxtb	r4, r4
  new_member = (new_state != IP6_ADDR_INVALID && new_state != IP6_ADDR_DUPLICATED && new_state != IP6_ADDR_TENTATIVE);
 8015712:	b14a      	cbz	r2, 8015728 <nd6_adjust_mld_membership+0x34>
 8015714:	2a40      	cmp	r2, #64	; 0x40
 8015716:	d025      	beq.n	8015764 <nd6_adjust_mld_membership+0x70>
 8015718:	2a08      	cmp	r2, #8
 801571a:	d003      	beq.n	8015724 <nd6_adjust_mld_membership+0x30>
 801571c:	2301      	movs	r3, #1
 801571e:	e004      	b.n	801572a <nd6_adjust_mld_membership+0x36>
  old_member = (old_state != IP6_ADDR_INVALID && old_state != IP6_ADDR_DUPLICATED && old_state != IP6_ADDR_TENTATIVE);
 8015720:	2400      	movs	r4, #0
 8015722:	e7f5      	b.n	8015710 <nd6_adjust_mld_membership+0x1c>
  new_member = (new_state != IP6_ADDR_INVALID && new_state != IP6_ADDR_DUPLICATED && new_state != IP6_ADDR_TENTATIVE);
 8015724:	2300      	movs	r3, #0
 8015726:	e000      	b.n	801572a <nd6_adjust_mld_membership+0x36>
 8015728:	2300      	movs	r3, #0
 801572a:	b2db      	uxtb	r3, r3

  if (old_member != new_member) {
 801572c:	429c      	cmp	r4, r3
 801572e:	d018      	beq.n	8015762 <nd6_adjust_mld_membership+0x6e>
    ip6_addr_set_solicitednode(&multicast_address, netif_ip6_addr(netif, addr_idx)->addr[3]);
 8015730:	4a0f      	ldr	r2, [pc, #60]	; (8015770 <nd6_adjust_mld_membership+0x7c>)
 8015732:	f240 24ff 	movw	r4, #767	; 0x2ff
 8015736:	6014      	str	r4, [r2, #0]
 8015738:	2400      	movs	r4, #0
 801573a:	6054      	str	r4, [r2, #4]
 801573c:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
 8015740:	6094      	str	r4, [r2, #8]
 8015742:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8015746:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801574a:	6d89      	ldr	r1, [r1, #88]	; 0x58
 801574c:	f041 01ff 	orr.w	r1, r1, #255	; 0xff
 8015750:	60d1      	str	r1, [r2, #12]
    ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 8015752:	f890 10e2 	ldrb.w	r1, [r0, #226]	; 0xe2
 8015756:	3101      	adds	r1, #1
 8015758:	7411      	strb	r1, [r2, #16]

    if (new_member) {
 801575a:	b12b      	cbz	r3, 8015768 <nd6_adjust_mld_membership+0x74>
      mld6_joingroup_netif(netif, &multicast_address);
 801575c:	4611      	mov	r1, r2
 801575e:	f7fd fd7f 	bl	8013260 <mld6_joingroup_netif>
    } else {
      mld6_leavegroup_netif(netif, &multicast_address);
    }
  }
}
 8015762:	bd10      	pop	{r4, pc}
  new_member = (new_state != IP6_ADDR_INVALID && new_state != IP6_ADDR_DUPLICATED && new_state != IP6_ADDR_TENTATIVE);
 8015764:	2300      	movs	r3, #0
 8015766:	e7e0      	b.n	801572a <nd6_adjust_mld_membership+0x36>
      mld6_leavegroup_netif(netif, &multicast_address);
 8015768:	4901      	ldr	r1, [pc, #4]	; (8015770 <nd6_adjust_mld_membership+0x7c>)
 801576a:	f7fd fde7 	bl	801333c <mld6_leavegroup_netif>
}
 801576e:	e7f8      	b.n	8015762 <nd6_adjust_mld_membership+0x6e>
 8015770:	20000bf4 	.word	0x20000bf4

08015774 <nd6_restart_netif>:
void
nd6_restart_netif(struct netif *netif)
{
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  /* Send Router Solicitation messages (see RFC 4861, ch. 6.3.7). */
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8015774:	2303      	movs	r3, #3
 8015776:	f880 30e4 	strb.w	r3, [r0, #228]	; 0xe4
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
}
 801577a:	4770      	bx	lr

0801577c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801577e:	4604      	mov	r4, r0
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015780:	8947      	ldrh	r7, [r0, #10]
 8015782:	2f0e      	cmp	r7, #14
 8015784:	d922      	bls.n	80157cc <ethernet_input+0x50>
 8015786:	460e      	mov	r6, r1
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015788:	7bc3      	ldrb	r3, [r0, #15]
 801578a:	b91b      	cbnz	r3, 8015794 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 801578c:	f891 30e2 	ldrb.w	r3, [r1, #226]	; 0xe2
 8015790:	3301      	adds	r3, #1
 8015792:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015794:	6860      	ldr	r0, [r4, #4]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015796:	8985      	ldrh	r5, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015798:	7803      	ldrb	r3, [r0, #0]
 801579a:	f013 0f01 	tst.w	r3, #1
 801579e:	d00c      	beq.n	80157ba <ethernet_input+0x3e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80157a0:	2b01      	cmp	r3, #1
 80157a2:	d018      	beq.n	80157d6 <ethernet_input+0x5a>
        p->flags |= PBUF_FLAG_LLMCAST;
      }
#endif /* LWIP_IPV4 */
    }
#if LWIP_IPV6
    else if ((ethhdr->dest.addr[0] == LL_IP6_MULTICAST_ADDR_0) &&
 80157a4:	2b33      	cmp	r3, #51	; 0x33
 80157a6:	d021      	beq.n	80157ec <ethernet_input+0x70>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80157a8:	2206      	movs	r2, #6
 80157aa:	492b      	ldr	r1, [pc, #172]	; (8015858 <ethernet_input+0xdc>)
 80157ac:	f000 f8b2 	bl	8015914 <memcmp>
 80157b0:	b918      	cbnz	r0, 80157ba <ethernet_input+0x3e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80157b2:	7b63      	ldrb	r3, [r4, #13]
 80157b4:	f043 0308 	orr.w	r3, r3, #8
 80157b8:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 80157ba:	f5b5 6fc1 	cmp.w	r5, #1544	; 0x608
 80157be:	d02d      	beq.n	801581c <ethernet_input+0xa0>
 80157c0:	f64d 5386 	movw	r3, #56710	; 0xdd86
 80157c4:	429d      	cmp	r5, r3
 80157c6:	d039      	beq.n	801583c <ethernet_input+0xc0>
 80157c8:	2d08      	cmp	r5, #8
 80157ca:	d017      	beq.n	80157fc <ethernet_input+0x80>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 80157cc:	4620      	mov	r0, r4
 80157ce:	f7f2 fc8f 	bl	80080f0 <pbuf_free>
  return ERR_OK;
}
 80157d2:	2000      	movs	r0, #0
 80157d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80157d6:	7843      	ldrb	r3, [r0, #1]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d1ee      	bne.n	80157ba <ethernet_input+0x3e>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80157dc:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80157de:	2b5e      	cmp	r3, #94	; 0x5e
 80157e0:	d1eb      	bne.n	80157ba <ethernet_input+0x3e>
        p->flags |= PBUF_FLAG_LLMCAST;
 80157e2:	7b63      	ldrb	r3, [r4, #13]
 80157e4:	f043 0310 	orr.w	r3, r3, #16
 80157e8:	7363      	strb	r3, [r4, #13]
 80157ea:	e7e6      	b.n	80157ba <ethernet_input+0x3e>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
 80157ec:	7843      	ldrb	r3, [r0, #1]
    else if ((ethhdr->dest.addr[0] == LL_IP6_MULTICAST_ADDR_0) &&
 80157ee:	2b33      	cmp	r3, #51	; 0x33
 80157f0:	d1da      	bne.n	80157a8 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLMCAST;
 80157f2:	7b63      	ldrb	r3, [r4, #13]
 80157f4:	f043 0310 	orr.w	r3, r3, #16
 80157f8:	7363      	strb	r3, [r4, #13]
 80157fa:	e7de      	b.n	80157ba <ethernet_input+0x3e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80157fc:	f896 30df 	ldrb.w	r3, [r6, #223]	; 0xdf
 8015800:	f013 0f08 	tst.w	r3, #8
 8015804:	d0e2      	beq.n	80157cc <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015806:	210e      	movs	r1, #14
 8015808:	4620      	mov	r0, r4
 801580a:	f7f2 fc2b 	bl	8008064 <pbuf_remove_header>
 801580e:	2800      	cmp	r0, #0
 8015810:	d1dc      	bne.n	80157cc <ethernet_input+0x50>
        ip4_input(p, netif);
 8015812:	4631      	mov	r1, r6
 8015814:	4620      	mov	r0, r4
 8015816:	f7fb f9d7 	bl	8010bc8 <ip4_input>
      break;
 801581a:	e7da      	b.n	80157d2 <ethernet_input+0x56>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801581c:	f896 30df 	ldrb.w	r3, [r6, #223]	; 0xdf
 8015820:	f013 0f08 	tst.w	r3, #8
 8015824:	d0d2      	beq.n	80157cc <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015826:	210e      	movs	r1, #14
 8015828:	4620      	mov	r0, r4
 801582a:	f7f2 fc1b 	bl	8008064 <pbuf_remove_header>
 801582e:	2800      	cmp	r0, #0
 8015830:	d1cc      	bne.n	80157cc <ethernet_input+0x50>
        etharp_input(p, netif);
 8015832:	4631      	mov	r1, r6
 8015834:	4620      	mov	r0, r4
 8015836:	f7fa fbe7 	bl	8010008 <etharp_input>
      break;
 801583a:	e7ca      	b.n	80157d2 <ethernet_input+0x56>
      if ((p->len < next_hdr_offset) || pbuf_remove_header(p, next_hdr_offset)) {
 801583c:	2f0d      	cmp	r7, #13
 801583e:	d9c5      	bls.n	80157cc <ethernet_input+0x50>
 8015840:	210e      	movs	r1, #14
 8015842:	4620      	mov	r0, r4
 8015844:	f7f2 fc0e 	bl	8008064 <pbuf_remove_header>
 8015848:	2800      	cmp	r0, #0
 801584a:	d1bf      	bne.n	80157cc <ethernet_input+0x50>
        ip6_input(p, netif);
 801584c:	4631      	mov	r1, r6
 801584e:	4620      	mov	r0, r4
 8015850:	f7fc fbda 	bl	8012008 <ip6_input>
      break;
 8015854:	e7bd      	b.n	80157d2 <ethernet_input+0x56>
 8015856:	bf00      	nop
 8015858:	0801aa74 	.word	0x0801aa74

0801585c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801585c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015860:	4605      	mov	r5, r0
 8015862:	460c      	mov	r4, r1
 8015864:	4616      	mov	r6, r2
 8015866:	461f      	mov	r7, r3
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015868:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 801586c:	f7f1 f906 	bl	8006a7c <lwip_htons>
 8015870:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015872:	210e      	movs	r1, #14
 8015874:	4620      	mov	r0, r4
 8015876:	f7f2 fbea 	bl	800804e <pbuf_add_header>
 801587a:	b9f0      	cbnz	r0, 80158ba <ethernet_output+0x5e>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801587c:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 801587e:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015882:	683b      	ldr	r3, [r7, #0]
 8015884:	600b      	str	r3, [r1, #0]
 8015886:	88bb      	ldrh	r3, [r7, #4]
 8015888:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801588a:	6833      	ldr	r3, [r6, #0]
 801588c:	f8c1 3006 	str.w	r3, [r1, #6]
 8015890:	88b3      	ldrh	r3, [r6, #4]
 8015892:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015894:	f895 30de 	ldrb.w	r3, [r5, #222]	; 0xde
 8015898:	2b06      	cmp	r3, #6
 801589a:	d106      	bne.n	80158aa <ethernet_output+0x4e>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801589c:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
 80158a0:	4621      	mov	r1, r4
 80158a2:	4628      	mov	r0, r5
 80158a4:	4798      	blx	r3
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 80158a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80158aa:	4b05      	ldr	r3, [pc, #20]	; (80158c0 <ethernet_output+0x64>)
 80158ac:	f44f 7299 	mov.w	r2, #306	; 0x132
 80158b0:	4904      	ldr	r1, [pc, #16]	; (80158c4 <ethernet_output+0x68>)
 80158b2:	4805      	ldr	r0, [pc, #20]	; (80158c8 <ethernet_output+0x6c>)
 80158b4:	f000 f86c 	bl	8015990 <iprintf>
 80158b8:	e7f0      	b.n	801589c <ethernet_output+0x40>
  return ERR_BUF;
 80158ba:	f06f 0001 	mvn.w	r0, #1
 80158be:	e7f2      	b.n	80158a6 <ethernet_output+0x4a>
 80158c0:	0801aa08 	.word	0x0801aa08
 80158c4:	0801aa40 	.word	0x0801aa40
 80158c8:	08016bb4 	.word	0x08016bb4

080158cc <__libc_init_array>:
 80158cc:	b570      	push	{r4, r5, r6, lr}
 80158ce:	4d0d      	ldr	r5, [pc, #52]	; (8015904 <__libc_init_array+0x38>)
 80158d0:	4c0d      	ldr	r4, [pc, #52]	; (8015908 <__libc_init_array+0x3c>)
 80158d2:	1b64      	subs	r4, r4, r5
 80158d4:	10a4      	asrs	r4, r4, #2
 80158d6:	2600      	movs	r6, #0
 80158d8:	42a6      	cmp	r6, r4
 80158da:	d109      	bne.n	80158f0 <__libc_init_array+0x24>
 80158dc:	4d0b      	ldr	r5, [pc, #44]	; (801590c <__libc_init_array+0x40>)
 80158de:	4c0c      	ldr	r4, [pc, #48]	; (8015910 <__libc_init_array+0x44>)
 80158e0:	f001 f906 	bl	8016af0 <_init>
 80158e4:	1b64      	subs	r4, r4, r5
 80158e6:	10a4      	asrs	r4, r4, #2
 80158e8:	2600      	movs	r6, #0
 80158ea:	42a6      	cmp	r6, r4
 80158ec:	d105      	bne.n	80158fa <__libc_init_array+0x2e>
 80158ee:	bd70      	pop	{r4, r5, r6, pc}
 80158f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80158f4:	4798      	blx	r3
 80158f6:	3601      	adds	r6, #1
 80158f8:	e7ee      	b.n	80158d8 <__libc_init_array+0xc>
 80158fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80158fe:	4798      	blx	r3
 8015900:	3601      	adds	r6, #1
 8015902:	e7f2      	b.n	80158ea <__libc_init_array+0x1e>
 8015904:	0801abd8 	.word	0x0801abd8
 8015908:	0801abd8 	.word	0x0801abd8
 801590c:	0801abd8 	.word	0x0801abd8
 8015910:	0801abdc 	.word	0x0801abdc

08015914 <memcmp>:
 8015914:	b530      	push	{r4, r5, lr}
 8015916:	3901      	subs	r1, #1
 8015918:	2400      	movs	r4, #0
 801591a:	42a2      	cmp	r2, r4
 801591c:	d101      	bne.n	8015922 <memcmp+0xe>
 801591e:	2000      	movs	r0, #0
 8015920:	e005      	b.n	801592e <memcmp+0x1a>
 8015922:	5d03      	ldrb	r3, [r0, r4]
 8015924:	3401      	adds	r4, #1
 8015926:	5d0d      	ldrb	r5, [r1, r4]
 8015928:	42ab      	cmp	r3, r5
 801592a:	d0f6      	beq.n	801591a <memcmp+0x6>
 801592c:	1b58      	subs	r0, r3, r5
 801592e:	bd30      	pop	{r4, r5, pc}

08015930 <memcpy>:
 8015930:	440a      	add	r2, r1
 8015932:	4291      	cmp	r1, r2
 8015934:	f100 33ff 	add.w	r3, r0, #4294967295
 8015938:	d100      	bne.n	801593c <memcpy+0xc>
 801593a:	4770      	bx	lr
 801593c:	b510      	push	{r4, lr}
 801593e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015942:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015946:	4291      	cmp	r1, r2
 8015948:	d1f9      	bne.n	801593e <memcpy+0xe>
 801594a:	bd10      	pop	{r4, pc}

0801594c <memmove>:
 801594c:	4288      	cmp	r0, r1
 801594e:	b510      	push	{r4, lr}
 8015950:	eb01 0402 	add.w	r4, r1, r2
 8015954:	d902      	bls.n	801595c <memmove+0x10>
 8015956:	4284      	cmp	r4, r0
 8015958:	4623      	mov	r3, r4
 801595a:	d807      	bhi.n	801596c <memmove+0x20>
 801595c:	1e43      	subs	r3, r0, #1
 801595e:	42a1      	cmp	r1, r4
 8015960:	d008      	beq.n	8015974 <memmove+0x28>
 8015962:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015966:	f803 2f01 	strb.w	r2, [r3, #1]!
 801596a:	e7f8      	b.n	801595e <memmove+0x12>
 801596c:	4402      	add	r2, r0
 801596e:	4601      	mov	r1, r0
 8015970:	428a      	cmp	r2, r1
 8015972:	d100      	bne.n	8015976 <memmove+0x2a>
 8015974:	bd10      	pop	{r4, pc}
 8015976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801597a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801597e:	e7f7      	b.n	8015970 <memmove+0x24>

08015980 <memset>:
 8015980:	4402      	add	r2, r0
 8015982:	4603      	mov	r3, r0
 8015984:	4293      	cmp	r3, r2
 8015986:	d100      	bne.n	801598a <memset+0xa>
 8015988:	4770      	bx	lr
 801598a:	f803 1b01 	strb.w	r1, [r3], #1
 801598e:	e7f9      	b.n	8015984 <memset+0x4>

08015990 <iprintf>:
 8015990:	b40f      	push	{r0, r1, r2, r3}
 8015992:	4b0a      	ldr	r3, [pc, #40]	; (80159bc <iprintf+0x2c>)
 8015994:	b513      	push	{r0, r1, r4, lr}
 8015996:	681c      	ldr	r4, [r3, #0]
 8015998:	b124      	cbz	r4, 80159a4 <iprintf+0x14>
 801599a:	69a3      	ldr	r3, [r4, #24]
 801599c:	b913      	cbnz	r3, 80159a4 <iprintf+0x14>
 801599e:	4620      	mov	r0, r4
 80159a0:	f000 fadc 	bl	8015f5c <__sinit>
 80159a4:	ab05      	add	r3, sp, #20
 80159a6:	9a04      	ldr	r2, [sp, #16]
 80159a8:	68a1      	ldr	r1, [r4, #8]
 80159aa:	9301      	str	r3, [sp, #4]
 80159ac:	4620      	mov	r0, r4
 80159ae:	f000 fcc7 	bl	8016340 <_vfiprintf_r>
 80159b2:	b002      	add	sp, #8
 80159b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159b8:	b004      	add	sp, #16
 80159ba:	4770      	bx	lr
 80159bc:	2000001c 	.word	0x2000001c

080159c0 <_puts_r>:
 80159c0:	b570      	push	{r4, r5, r6, lr}
 80159c2:	460e      	mov	r6, r1
 80159c4:	4605      	mov	r5, r0
 80159c6:	b118      	cbz	r0, 80159d0 <_puts_r+0x10>
 80159c8:	6983      	ldr	r3, [r0, #24]
 80159ca:	b90b      	cbnz	r3, 80159d0 <_puts_r+0x10>
 80159cc:	f000 fac6 	bl	8015f5c <__sinit>
 80159d0:	69ab      	ldr	r3, [r5, #24]
 80159d2:	68ac      	ldr	r4, [r5, #8]
 80159d4:	b913      	cbnz	r3, 80159dc <_puts_r+0x1c>
 80159d6:	4628      	mov	r0, r5
 80159d8:	f000 fac0 	bl	8015f5c <__sinit>
 80159dc:	4b2c      	ldr	r3, [pc, #176]	; (8015a90 <_puts_r+0xd0>)
 80159de:	429c      	cmp	r4, r3
 80159e0:	d120      	bne.n	8015a24 <_puts_r+0x64>
 80159e2:	686c      	ldr	r4, [r5, #4]
 80159e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80159e6:	07db      	lsls	r3, r3, #31
 80159e8:	d405      	bmi.n	80159f6 <_puts_r+0x36>
 80159ea:	89a3      	ldrh	r3, [r4, #12]
 80159ec:	0598      	lsls	r0, r3, #22
 80159ee:	d402      	bmi.n	80159f6 <_puts_r+0x36>
 80159f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80159f2:	f000 fb63 	bl	80160bc <__retarget_lock_acquire_recursive>
 80159f6:	89a3      	ldrh	r3, [r4, #12]
 80159f8:	0719      	lsls	r1, r3, #28
 80159fa:	d51d      	bpl.n	8015a38 <_puts_r+0x78>
 80159fc:	6923      	ldr	r3, [r4, #16]
 80159fe:	b1db      	cbz	r3, 8015a38 <_puts_r+0x78>
 8015a00:	3e01      	subs	r6, #1
 8015a02:	68a3      	ldr	r3, [r4, #8]
 8015a04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015a08:	3b01      	subs	r3, #1
 8015a0a:	60a3      	str	r3, [r4, #8]
 8015a0c:	bb39      	cbnz	r1, 8015a5e <_puts_r+0x9e>
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	da38      	bge.n	8015a84 <_puts_r+0xc4>
 8015a12:	4622      	mov	r2, r4
 8015a14:	210a      	movs	r1, #10
 8015a16:	4628      	mov	r0, r5
 8015a18:	f000 f8a8 	bl	8015b6c <__swbuf_r>
 8015a1c:	3001      	adds	r0, #1
 8015a1e:	d011      	beq.n	8015a44 <_puts_r+0x84>
 8015a20:	250a      	movs	r5, #10
 8015a22:	e011      	b.n	8015a48 <_puts_r+0x88>
 8015a24:	4b1b      	ldr	r3, [pc, #108]	; (8015a94 <_puts_r+0xd4>)
 8015a26:	429c      	cmp	r4, r3
 8015a28:	d101      	bne.n	8015a2e <_puts_r+0x6e>
 8015a2a:	68ac      	ldr	r4, [r5, #8]
 8015a2c:	e7da      	b.n	80159e4 <_puts_r+0x24>
 8015a2e:	4b1a      	ldr	r3, [pc, #104]	; (8015a98 <_puts_r+0xd8>)
 8015a30:	429c      	cmp	r4, r3
 8015a32:	bf08      	it	eq
 8015a34:	68ec      	ldreq	r4, [r5, #12]
 8015a36:	e7d5      	b.n	80159e4 <_puts_r+0x24>
 8015a38:	4621      	mov	r1, r4
 8015a3a:	4628      	mov	r0, r5
 8015a3c:	f000 f8e8 	bl	8015c10 <__swsetup_r>
 8015a40:	2800      	cmp	r0, #0
 8015a42:	d0dd      	beq.n	8015a00 <_puts_r+0x40>
 8015a44:	f04f 35ff 	mov.w	r5, #4294967295
 8015a48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015a4a:	07da      	lsls	r2, r3, #31
 8015a4c:	d405      	bmi.n	8015a5a <_puts_r+0x9a>
 8015a4e:	89a3      	ldrh	r3, [r4, #12]
 8015a50:	059b      	lsls	r3, r3, #22
 8015a52:	d402      	bmi.n	8015a5a <_puts_r+0x9a>
 8015a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a56:	f000 fb32 	bl	80160be <__retarget_lock_release_recursive>
 8015a5a:	4628      	mov	r0, r5
 8015a5c:	bd70      	pop	{r4, r5, r6, pc}
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	da04      	bge.n	8015a6c <_puts_r+0xac>
 8015a62:	69a2      	ldr	r2, [r4, #24]
 8015a64:	429a      	cmp	r2, r3
 8015a66:	dc06      	bgt.n	8015a76 <_puts_r+0xb6>
 8015a68:	290a      	cmp	r1, #10
 8015a6a:	d004      	beq.n	8015a76 <_puts_r+0xb6>
 8015a6c:	6823      	ldr	r3, [r4, #0]
 8015a6e:	1c5a      	adds	r2, r3, #1
 8015a70:	6022      	str	r2, [r4, #0]
 8015a72:	7019      	strb	r1, [r3, #0]
 8015a74:	e7c5      	b.n	8015a02 <_puts_r+0x42>
 8015a76:	4622      	mov	r2, r4
 8015a78:	4628      	mov	r0, r5
 8015a7a:	f000 f877 	bl	8015b6c <__swbuf_r>
 8015a7e:	3001      	adds	r0, #1
 8015a80:	d1bf      	bne.n	8015a02 <_puts_r+0x42>
 8015a82:	e7df      	b.n	8015a44 <_puts_r+0x84>
 8015a84:	6823      	ldr	r3, [r4, #0]
 8015a86:	250a      	movs	r5, #10
 8015a88:	1c5a      	adds	r2, r3, #1
 8015a8a:	6022      	str	r2, [r4, #0]
 8015a8c:	701d      	strb	r5, [r3, #0]
 8015a8e:	e7db      	b.n	8015a48 <_puts_r+0x88>
 8015a90:	0801ab5c 	.word	0x0801ab5c
 8015a94:	0801ab7c 	.word	0x0801ab7c
 8015a98:	0801ab3c 	.word	0x0801ab3c

08015a9c <puts>:
 8015a9c:	4b02      	ldr	r3, [pc, #8]	; (8015aa8 <puts+0xc>)
 8015a9e:	4601      	mov	r1, r0
 8015aa0:	6818      	ldr	r0, [r3, #0]
 8015aa2:	f7ff bf8d 	b.w	80159c0 <_puts_r>
 8015aa6:	bf00      	nop
 8015aa8:	2000001c 	.word	0x2000001c

08015aac <rand>:
 8015aac:	4b17      	ldr	r3, [pc, #92]	; (8015b0c <rand+0x60>)
 8015aae:	b510      	push	{r4, lr}
 8015ab0:	681c      	ldr	r4, [r3, #0]
 8015ab2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015ab4:	b9b3      	cbnz	r3, 8015ae4 <rand+0x38>
 8015ab6:	2018      	movs	r0, #24
 8015ab8:	f000 fb66 	bl	8016188 <malloc>
 8015abc:	63a0      	str	r0, [r4, #56]	; 0x38
 8015abe:	b928      	cbnz	r0, 8015acc <rand+0x20>
 8015ac0:	4602      	mov	r2, r0
 8015ac2:	4b13      	ldr	r3, [pc, #76]	; (8015b10 <rand+0x64>)
 8015ac4:	4813      	ldr	r0, [pc, #76]	; (8015b14 <rand+0x68>)
 8015ac6:	214e      	movs	r1, #78	; 0x4e
 8015ac8:	f000 f910 	bl	8015cec <__assert_func>
 8015acc:	4a12      	ldr	r2, [pc, #72]	; (8015b18 <rand+0x6c>)
 8015ace:	4b13      	ldr	r3, [pc, #76]	; (8015b1c <rand+0x70>)
 8015ad0:	e9c0 2300 	strd	r2, r3, [r0]
 8015ad4:	4b12      	ldr	r3, [pc, #72]	; (8015b20 <rand+0x74>)
 8015ad6:	6083      	str	r3, [r0, #8]
 8015ad8:	230b      	movs	r3, #11
 8015ada:	8183      	strh	r3, [r0, #12]
 8015adc:	2201      	movs	r2, #1
 8015ade:	2300      	movs	r3, #0
 8015ae0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015ae4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015ae6:	480f      	ldr	r0, [pc, #60]	; (8015b24 <rand+0x78>)
 8015ae8:	690a      	ldr	r2, [r1, #16]
 8015aea:	694b      	ldr	r3, [r1, #20]
 8015aec:	4c0e      	ldr	r4, [pc, #56]	; (8015b28 <rand+0x7c>)
 8015aee:	4350      	muls	r0, r2
 8015af0:	fb04 0003 	mla	r0, r4, r3, r0
 8015af4:	fba2 3404 	umull	r3, r4, r2, r4
 8015af8:	1c5a      	adds	r2, r3, #1
 8015afa:	4404      	add	r4, r0
 8015afc:	f144 0000 	adc.w	r0, r4, #0
 8015b00:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8015b04:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015b08:	bd10      	pop	{r4, pc}
 8015b0a:	bf00      	nop
 8015b0c:	2000001c 	.word	0x2000001c
 8015b10:	0801aa88 	.word	0x0801aa88
 8015b14:	0801aa9f 	.word	0x0801aa9f
 8015b18:	abcd330e 	.word	0xabcd330e
 8015b1c:	e66d1234 	.word	0xe66d1234
 8015b20:	0005deec 	.word	0x0005deec
 8015b24:	5851f42d 	.word	0x5851f42d
 8015b28:	4c957f2d 	.word	0x4c957f2d

08015b2c <strchr>:
 8015b2c:	b2c9      	uxtb	r1, r1
 8015b2e:	4603      	mov	r3, r0
 8015b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015b34:	b11a      	cbz	r2, 8015b3e <strchr+0x12>
 8015b36:	428a      	cmp	r2, r1
 8015b38:	d1f9      	bne.n	8015b2e <strchr+0x2>
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	4770      	bx	lr
 8015b3e:	2900      	cmp	r1, #0
 8015b40:	bf18      	it	ne
 8015b42:	2300      	movne	r3, #0
 8015b44:	e7f9      	b.n	8015b3a <strchr+0xe>

08015b46 <strncmp>:
 8015b46:	b510      	push	{r4, lr}
 8015b48:	b16a      	cbz	r2, 8015b66 <strncmp+0x20>
 8015b4a:	3901      	subs	r1, #1
 8015b4c:	1884      	adds	r4, r0, r2
 8015b4e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015b52:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015b56:	4293      	cmp	r3, r2
 8015b58:	d103      	bne.n	8015b62 <strncmp+0x1c>
 8015b5a:	42a0      	cmp	r0, r4
 8015b5c:	d001      	beq.n	8015b62 <strncmp+0x1c>
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d1f5      	bne.n	8015b4e <strncmp+0x8>
 8015b62:	1a98      	subs	r0, r3, r2
 8015b64:	bd10      	pop	{r4, pc}
 8015b66:	4610      	mov	r0, r2
 8015b68:	e7fc      	b.n	8015b64 <strncmp+0x1e>
	...

08015b6c <__swbuf_r>:
 8015b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b6e:	460e      	mov	r6, r1
 8015b70:	4614      	mov	r4, r2
 8015b72:	4605      	mov	r5, r0
 8015b74:	b118      	cbz	r0, 8015b7e <__swbuf_r+0x12>
 8015b76:	6983      	ldr	r3, [r0, #24]
 8015b78:	b90b      	cbnz	r3, 8015b7e <__swbuf_r+0x12>
 8015b7a:	f000 f9ef 	bl	8015f5c <__sinit>
 8015b7e:	4b21      	ldr	r3, [pc, #132]	; (8015c04 <__swbuf_r+0x98>)
 8015b80:	429c      	cmp	r4, r3
 8015b82:	d12b      	bne.n	8015bdc <__swbuf_r+0x70>
 8015b84:	686c      	ldr	r4, [r5, #4]
 8015b86:	69a3      	ldr	r3, [r4, #24]
 8015b88:	60a3      	str	r3, [r4, #8]
 8015b8a:	89a3      	ldrh	r3, [r4, #12]
 8015b8c:	071a      	lsls	r2, r3, #28
 8015b8e:	d52f      	bpl.n	8015bf0 <__swbuf_r+0x84>
 8015b90:	6923      	ldr	r3, [r4, #16]
 8015b92:	b36b      	cbz	r3, 8015bf0 <__swbuf_r+0x84>
 8015b94:	6923      	ldr	r3, [r4, #16]
 8015b96:	6820      	ldr	r0, [r4, #0]
 8015b98:	1ac0      	subs	r0, r0, r3
 8015b9a:	6963      	ldr	r3, [r4, #20]
 8015b9c:	b2f6      	uxtb	r6, r6
 8015b9e:	4283      	cmp	r3, r0
 8015ba0:	4637      	mov	r7, r6
 8015ba2:	dc04      	bgt.n	8015bae <__swbuf_r+0x42>
 8015ba4:	4621      	mov	r1, r4
 8015ba6:	4628      	mov	r0, r5
 8015ba8:	f000 f944 	bl	8015e34 <_fflush_r>
 8015bac:	bb30      	cbnz	r0, 8015bfc <__swbuf_r+0x90>
 8015bae:	68a3      	ldr	r3, [r4, #8]
 8015bb0:	3b01      	subs	r3, #1
 8015bb2:	60a3      	str	r3, [r4, #8]
 8015bb4:	6823      	ldr	r3, [r4, #0]
 8015bb6:	1c5a      	adds	r2, r3, #1
 8015bb8:	6022      	str	r2, [r4, #0]
 8015bba:	701e      	strb	r6, [r3, #0]
 8015bbc:	6963      	ldr	r3, [r4, #20]
 8015bbe:	3001      	adds	r0, #1
 8015bc0:	4283      	cmp	r3, r0
 8015bc2:	d004      	beq.n	8015bce <__swbuf_r+0x62>
 8015bc4:	89a3      	ldrh	r3, [r4, #12]
 8015bc6:	07db      	lsls	r3, r3, #31
 8015bc8:	d506      	bpl.n	8015bd8 <__swbuf_r+0x6c>
 8015bca:	2e0a      	cmp	r6, #10
 8015bcc:	d104      	bne.n	8015bd8 <__swbuf_r+0x6c>
 8015bce:	4621      	mov	r1, r4
 8015bd0:	4628      	mov	r0, r5
 8015bd2:	f000 f92f 	bl	8015e34 <_fflush_r>
 8015bd6:	b988      	cbnz	r0, 8015bfc <__swbuf_r+0x90>
 8015bd8:	4638      	mov	r0, r7
 8015bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015bdc:	4b0a      	ldr	r3, [pc, #40]	; (8015c08 <__swbuf_r+0x9c>)
 8015bde:	429c      	cmp	r4, r3
 8015be0:	d101      	bne.n	8015be6 <__swbuf_r+0x7a>
 8015be2:	68ac      	ldr	r4, [r5, #8]
 8015be4:	e7cf      	b.n	8015b86 <__swbuf_r+0x1a>
 8015be6:	4b09      	ldr	r3, [pc, #36]	; (8015c0c <__swbuf_r+0xa0>)
 8015be8:	429c      	cmp	r4, r3
 8015bea:	bf08      	it	eq
 8015bec:	68ec      	ldreq	r4, [r5, #12]
 8015bee:	e7ca      	b.n	8015b86 <__swbuf_r+0x1a>
 8015bf0:	4621      	mov	r1, r4
 8015bf2:	4628      	mov	r0, r5
 8015bf4:	f000 f80c 	bl	8015c10 <__swsetup_r>
 8015bf8:	2800      	cmp	r0, #0
 8015bfa:	d0cb      	beq.n	8015b94 <__swbuf_r+0x28>
 8015bfc:	f04f 37ff 	mov.w	r7, #4294967295
 8015c00:	e7ea      	b.n	8015bd8 <__swbuf_r+0x6c>
 8015c02:	bf00      	nop
 8015c04:	0801ab5c 	.word	0x0801ab5c
 8015c08:	0801ab7c 	.word	0x0801ab7c
 8015c0c:	0801ab3c 	.word	0x0801ab3c

08015c10 <__swsetup_r>:
 8015c10:	4b32      	ldr	r3, [pc, #200]	; (8015cdc <__swsetup_r+0xcc>)
 8015c12:	b570      	push	{r4, r5, r6, lr}
 8015c14:	681d      	ldr	r5, [r3, #0]
 8015c16:	4606      	mov	r6, r0
 8015c18:	460c      	mov	r4, r1
 8015c1a:	b125      	cbz	r5, 8015c26 <__swsetup_r+0x16>
 8015c1c:	69ab      	ldr	r3, [r5, #24]
 8015c1e:	b913      	cbnz	r3, 8015c26 <__swsetup_r+0x16>
 8015c20:	4628      	mov	r0, r5
 8015c22:	f000 f99b 	bl	8015f5c <__sinit>
 8015c26:	4b2e      	ldr	r3, [pc, #184]	; (8015ce0 <__swsetup_r+0xd0>)
 8015c28:	429c      	cmp	r4, r3
 8015c2a:	d10f      	bne.n	8015c4c <__swsetup_r+0x3c>
 8015c2c:	686c      	ldr	r4, [r5, #4]
 8015c2e:	89a3      	ldrh	r3, [r4, #12]
 8015c30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015c34:	0719      	lsls	r1, r3, #28
 8015c36:	d42c      	bmi.n	8015c92 <__swsetup_r+0x82>
 8015c38:	06dd      	lsls	r5, r3, #27
 8015c3a:	d411      	bmi.n	8015c60 <__swsetup_r+0x50>
 8015c3c:	2309      	movs	r3, #9
 8015c3e:	6033      	str	r3, [r6, #0]
 8015c40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015c44:	81a3      	strh	r3, [r4, #12]
 8015c46:	f04f 30ff 	mov.w	r0, #4294967295
 8015c4a:	e03e      	b.n	8015cca <__swsetup_r+0xba>
 8015c4c:	4b25      	ldr	r3, [pc, #148]	; (8015ce4 <__swsetup_r+0xd4>)
 8015c4e:	429c      	cmp	r4, r3
 8015c50:	d101      	bne.n	8015c56 <__swsetup_r+0x46>
 8015c52:	68ac      	ldr	r4, [r5, #8]
 8015c54:	e7eb      	b.n	8015c2e <__swsetup_r+0x1e>
 8015c56:	4b24      	ldr	r3, [pc, #144]	; (8015ce8 <__swsetup_r+0xd8>)
 8015c58:	429c      	cmp	r4, r3
 8015c5a:	bf08      	it	eq
 8015c5c:	68ec      	ldreq	r4, [r5, #12]
 8015c5e:	e7e6      	b.n	8015c2e <__swsetup_r+0x1e>
 8015c60:	0758      	lsls	r0, r3, #29
 8015c62:	d512      	bpl.n	8015c8a <__swsetup_r+0x7a>
 8015c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015c66:	b141      	cbz	r1, 8015c7a <__swsetup_r+0x6a>
 8015c68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015c6c:	4299      	cmp	r1, r3
 8015c6e:	d002      	beq.n	8015c76 <__swsetup_r+0x66>
 8015c70:	4630      	mov	r0, r6
 8015c72:	f000 fa91 	bl	8016198 <_free_r>
 8015c76:	2300      	movs	r3, #0
 8015c78:	6363      	str	r3, [r4, #52]	; 0x34
 8015c7a:	89a3      	ldrh	r3, [r4, #12]
 8015c7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015c80:	81a3      	strh	r3, [r4, #12]
 8015c82:	2300      	movs	r3, #0
 8015c84:	6063      	str	r3, [r4, #4]
 8015c86:	6923      	ldr	r3, [r4, #16]
 8015c88:	6023      	str	r3, [r4, #0]
 8015c8a:	89a3      	ldrh	r3, [r4, #12]
 8015c8c:	f043 0308 	orr.w	r3, r3, #8
 8015c90:	81a3      	strh	r3, [r4, #12]
 8015c92:	6923      	ldr	r3, [r4, #16]
 8015c94:	b94b      	cbnz	r3, 8015caa <__swsetup_r+0x9a>
 8015c96:	89a3      	ldrh	r3, [r4, #12]
 8015c98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015ca0:	d003      	beq.n	8015caa <__swsetup_r+0x9a>
 8015ca2:	4621      	mov	r1, r4
 8015ca4:	4630      	mov	r0, r6
 8015ca6:	f000 fa2f 	bl	8016108 <__smakebuf_r>
 8015caa:	89a0      	ldrh	r0, [r4, #12]
 8015cac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015cb0:	f010 0301 	ands.w	r3, r0, #1
 8015cb4:	d00a      	beq.n	8015ccc <__swsetup_r+0xbc>
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	60a3      	str	r3, [r4, #8]
 8015cba:	6963      	ldr	r3, [r4, #20]
 8015cbc:	425b      	negs	r3, r3
 8015cbe:	61a3      	str	r3, [r4, #24]
 8015cc0:	6923      	ldr	r3, [r4, #16]
 8015cc2:	b943      	cbnz	r3, 8015cd6 <__swsetup_r+0xc6>
 8015cc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015cc8:	d1ba      	bne.n	8015c40 <__swsetup_r+0x30>
 8015cca:	bd70      	pop	{r4, r5, r6, pc}
 8015ccc:	0781      	lsls	r1, r0, #30
 8015cce:	bf58      	it	pl
 8015cd0:	6963      	ldrpl	r3, [r4, #20]
 8015cd2:	60a3      	str	r3, [r4, #8]
 8015cd4:	e7f4      	b.n	8015cc0 <__swsetup_r+0xb0>
 8015cd6:	2000      	movs	r0, #0
 8015cd8:	e7f7      	b.n	8015cca <__swsetup_r+0xba>
 8015cda:	bf00      	nop
 8015cdc:	2000001c 	.word	0x2000001c
 8015ce0:	0801ab5c 	.word	0x0801ab5c
 8015ce4:	0801ab7c 	.word	0x0801ab7c
 8015ce8:	0801ab3c 	.word	0x0801ab3c

08015cec <__assert_func>:
 8015cec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015cee:	4614      	mov	r4, r2
 8015cf0:	461a      	mov	r2, r3
 8015cf2:	4b09      	ldr	r3, [pc, #36]	; (8015d18 <__assert_func+0x2c>)
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	4605      	mov	r5, r0
 8015cf8:	68d8      	ldr	r0, [r3, #12]
 8015cfa:	b14c      	cbz	r4, 8015d10 <__assert_func+0x24>
 8015cfc:	4b07      	ldr	r3, [pc, #28]	; (8015d1c <__assert_func+0x30>)
 8015cfe:	9100      	str	r1, [sp, #0]
 8015d00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015d04:	4906      	ldr	r1, [pc, #24]	; (8015d20 <__assert_func+0x34>)
 8015d06:	462b      	mov	r3, r5
 8015d08:	f000 f9a6 	bl	8016058 <fiprintf>
 8015d0c:	f000 fe42 	bl	8016994 <abort>
 8015d10:	4b04      	ldr	r3, [pc, #16]	; (8015d24 <__assert_func+0x38>)
 8015d12:	461c      	mov	r4, r3
 8015d14:	e7f3      	b.n	8015cfe <__assert_func+0x12>
 8015d16:	bf00      	nop
 8015d18:	2000001c 	.word	0x2000001c
 8015d1c:	0801aafe 	.word	0x0801aafe
 8015d20:	0801ab0b 	.word	0x0801ab0b
 8015d24:	0801ab39 	.word	0x0801ab39

08015d28 <__sflush_r>:
 8015d28:	898a      	ldrh	r2, [r1, #12]
 8015d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d2e:	4605      	mov	r5, r0
 8015d30:	0710      	lsls	r0, r2, #28
 8015d32:	460c      	mov	r4, r1
 8015d34:	d458      	bmi.n	8015de8 <__sflush_r+0xc0>
 8015d36:	684b      	ldr	r3, [r1, #4]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	dc05      	bgt.n	8015d48 <__sflush_r+0x20>
 8015d3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	dc02      	bgt.n	8015d48 <__sflush_r+0x20>
 8015d42:	2000      	movs	r0, #0
 8015d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d4a:	2e00      	cmp	r6, #0
 8015d4c:	d0f9      	beq.n	8015d42 <__sflush_r+0x1a>
 8015d4e:	2300      	movs	r3, #0
 8015d50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015d54:	682f      	ldr	r7, [r5, #0]
 8015d56:	602b      	str	r3, [r5, #0]
 8015d58:	d032      	beq.n	8015dc0 <__sflush_r+0x98>
 8015d5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015d5c:	89a3      	ldrh	r3, [r4, #12]
 8015d5e:	075a      	lsls	r2, r3, #29
 8015d60:	d505      	bpl.n	8015d6e <__sflush_r+0x46>
 8015d62:	6863      	ldr	r3, [r4, #4]
 8015d64:	1ac0      	subs	r0, r0, r3
 8015d66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015d68:	b10b      	cbz	r3, 8015d6e <__sflush_r+0x46>
 8015d6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015d6c:	1ac0      	subs	r0, r0, r3
 8015d6e:	2300      	movs	r3, #0
 8015d70:	4602      	mov	r2, r0
 8015d72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d74:	6a21      	ldr	r1, [r4, #32]
 8015d76:	4628      	mov	r0, r5
 8015d78:	47b0      	blx	r6
 8015d7a:	1c43      	adds	r3, r0, #1
 8015d7c:	89a3      	ldrh	r3, [r4, #12]
 8015d7e:	d106      	bne.n	8015d8e <__sflush_r+0x66>
 8015d80:	6829      	ldr	r1, [r5, #0]
 8015d82:	291d      	cmp	r1, #29
 8015d84:	d82c      	bhi.n	8015de0 <__sflush_r+0xb8>
 8015d86:	4a2a      	ldr	r2, [pc, #168]	; (8015e30 <__sflush_r+0x108>)
 8015d88:	40ca      	lsrs	r2, r1
 8015d8a:	07d6      	lsls	r6, r2, #31
 8015d8c:	d528      	bpl.n	8015de0 <__sflush_r+0xb8>
 8015d8e:	2200      	movs	r2, #0
 8015d90:	6062      	str	r2, [r4, #4]
 8015d92:	04d9      	lsls	r1, r3, #19
 8015d94:	6922      	ldr	r2, [r4, #16]
 8015d96:	6022      	str	r2, [r4, #0]
 8015d98:	d504      	bpl.n	8015da4 <__sflush_r+0x7c>
 8015d9a:	1c42      	adds	r2, r0, #1
 8015d9c:	d101      	bne.n	8015da2 <__sflush_r+0x7a>
 8015d9e:	682b      	ldr	r3, [r5, #0]
 8015da0:	b903      	cbnz	r3, 8015da4 <__sflush_r+0x7c>
 8015da2:	6560      	str	r0, [r4, #84]	; 0x54
 8015da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015da6:	602f      	str	r7, [r5, #0]
 8015da8:	2900      	cmp	r1, #0
 8015daa:	d0ca      	beq.n	8015d42 <__sflush_r+0x1a>
 8015dac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015db0:	4299      	cmp	r1, r3
 8015db2:	d002      	beq.n	8015dba <__sflush_r+0x92>
 8015db4:	4628      	mov	r0, r5
 8015db6:	f000 f9ef 	bl	8016198 <_free_r>
 8015dba:	2000      	movs	r0, #0
 8015dbc:	6360      	str	r0, [r4, #52]	; 0x34
 8015dbe:	e7c1      	b.n	8015d44 <__sflush_r+0x1c>
 8015dc0:	6a21      	ldr	r1, [r4, #32]
 8015dc2:	2301      	movs	r3, #1
 8015dc4:	4628      	mov	r0, r5
 8015dc6:	47b0      	blx	r6
 8015dc8:	1c41      	adds	r1, r0, #1
 8015dca:	d1c7      	bne.n	8015d5c <__sflush_r+0x34>
 8015dcc:	682b      	ldr	r3, [r5, #0]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d0c4      	beq.n	8015d5c <__sflush_r+0x34>
 8015dd2:	2b1d      	cmp	r3, #29
 8015dd4:	d001      	beq.n	8015dda <__sflush_r+0xb2>
 8015dd6:	2b16      	cmp	r3, #22
 8015dd8:	d101      	bne.n	8015dde <__sflush_r+0xb6>
 8015dda:	602f      	str	r7, [r5, #0]
 8015ddc:	e7b1      	b.n	8015d42 <__sflush_r+0x1a>
 8015dde:	89a3      	ldrh	r3, [r4, #12]
 8015de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015de4:	81a3      	strh	r3, [r4, #12]
 8015de6:	e7ad      	b.n	8015d44 <__sflush_r+0x1c>
 8015de8:	690f      	ldr	r7, [r1, #16]
 8015dea:	2f00      	cmp	r7, #0
 8015dec:	d0a9      	beq.n	8015d42 <__sflush_r+0x1a>
 8015dee:	0793      	lsls	r3, r2, #30
 8015df0:	680e      	ldr	r6, [r1, #0]
 8015df2:	bf08      	it	eq
 8015df4:	694b      	ldreq	r3, [r1, #20]
 8015df6:	600f      	str	r7, [r1, #0]
 8015df8:	bf18      	it	ne
 8015dfa:	2300      	movne	r3, #0
 8015dfc:	eba6 0807 	sub.w	r8, r6, r7
 8015e00:	608b      	str	r3, [r1, #8]
 8015e02:	f1b8 0f00 	cmp.w	r8, #0
 8015e06:	dd9c      	ble.n	8015d42 <__sflush_r+0x1a>
 8015e08:	6a21      	ldr	r1, [r4, #32]
 8015e0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015e0c:	4643      	mov	r3, r8
 8015e0e:	463a      	mov	r2, r7
 8015e10:	4628      	mov	r0, r5
 8015e12:	47b0      	blx	r6
 8015e14:	2800      	cmp	r0, #0
 8015e16:	dc06      	bgt.n	8015e26 <__sflush_r+0xfe>
 8015e18:	89a3      	ldrh	r3, [r4, #12]
 8015e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e1e:	81a3      	strh	r3, [r4, #12]
 8015e20:	f04f 30ff 	mov.w	r0, #4294967295
 8015e24:	e78e      	b.n	8015d44 <__sflush_r+0x1c>
 8015e26:	4407      	add	r7, r0
 8015e28:	eba8 0800 	sub.w	r8, r8, r0
 8015e2c:	e7e9      	b.n	8015e02 <__sflush_r+0xda>
 8015e2e:	bf00      	nop
 8015e30:	20400001 	.word	0x20400001

08015e34 <_fflush_r>:
 8015e34:	b538      	push	{r3, r4, r5, lr}
 8015e36:	690b      	ldr	r3, [r1, #16]
 8015e38:	4605      	mov	r5, r0
 8015e3a:	460c      	mov	r4, r1
 8015e3c:	b913      	cbnz	r3, 8015e44 <_fflush_r+0x10>
 8015e3e:	2500      	movs	r5, #0
 8015e40:	4628      	mov	r0, r5
 8015e42:	bd38      	pop	{r3, r4, r5, pc}
 8015e44:	b118      	cbz	r0, 8015e4e <_fflush_r+0x1a>
 8015e46:	6983      	ldr	r3, [r0, #24]
 8015e48:	b90b      	cbnz	r3, 8015e4e <_fflush_r+0x1a>
 8015e4a:	f000 f887 	bl	8015f5c <__sinit>
 8015e4e:	4b14      	ldr	r3, [pc, #80]	; (8015ea0 <_fflush_r+0x6c>)
 8015e50:	429c      	cmp	r4, r3
 8015e52:	d11b      	bne.n	8015e8c <_fflush_r+0x58>
 8015e54:	686c      	ldr	r4, [r5, #4]
 8015e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d0ef      	beq.n	8015e3e <_fflush_r+0xa>
 8015e5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015e60:	07d0      	lsls	r0, r2, #31
 8015e62:	d404      	bmi.n	8015e6e <_fflush_r+0x3a>
 8015e64:	0599      	lsls	r1, r3, #22
 8015e66:	d402      	bmi.n	8015e6e <_fflush_r+0x3a>
 8015e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e6a:	f000 f927 	bl	80160bc <__retarget_lock_acquire_recursive>
 8015e6e:	4628      	mov	r0, r5
 8015e70:	4621      	mov	r1, r4
 8015e72:	f7ff ff59 	bl	8015d28 <__sflush_r>
 8015e76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015e78:	07da      	lsls	r2, r3, #31
 8015e7a:	4605      	mov	r5, r0
 8015e7c:	d4e0      	bmi.n	8015e40 <_fflush_r+0xc>
 8015e7e:	89a3      	ldrh	r3, [r4, #12]
 8015e80:	059b      	lsls	r3, r3, #22
 8015e82:	d4dd      	bmi.n	8015e40 <_fflush_r+0xc>
 8015e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e86:	f000 f91a 	bl	80160be <__retarget_lock_release_recursive>
 8015e8a:	e7d9      	b.n	8015e40 <_fflush_r+0xc>
 8015e8c:	4b05      	ldr	r3, [pc, #20]	; (8015ea4 <_fflush_r+0x70>)
 8015e8e:	429c      	cmp	r4, r3
 8015e90:	d101      	bne.n	8015e96 <_fflush_r+0x62>
 8015e92:	68ac      	ldr	r4, [r5, #8]
 8015e94:	e7df      	b.n	8015e56 <_fflush_r+0x22>
 8015e96:	4b04      	ldr	r3, [pc, #16]	; (8015ea8 <_fflush_r+0x74>)
 8015e98:	429c      	cmp	r4, r3
 8015e9a:	bf08      	it	eq
 8015e9c:	68ec      	ldreq	r4, [r5, #12]
 8015e9e:	e7da      	b.n	8015e56 <_fflush_r+0x22>
 8015ea0:	0801ab5c 	.word	0x0801ab5c
 8015ea4:	0801ab7c 	.word	0x0801ab7c
 8015ea8:	0801ab3c 	.word	0x0801ab3c

08015eac <std>:
 8015eac:	2300      	movs	r3, #0
 8015eae:	b510      	push	{r4, lr}
 8015eb0:	4604      	mov	r4, r0
 8015eb2:	e9c0 3300 	strd	r3, r3, [r0]
 8015eb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015eba:	6083      	str	r3, [r0, #8]
 8015ebc:	8181      	strh	r1, [r0, #12]
 8015ebe:	6643      	str	r3, [r0, #100]	; 0x64
 8015ec0:	81c2      	strh	r2, [r0, #14]
 8015ec2:	6183      	str	r3, [r0, #24]
 8015ec4:	4619      	mov	r1, r3
 8015ec6:	2208      	movs	r2, #8
 8015ec8:	305c      	adds	r0, #92	; 0x5c
 8015eca:	f7ff fd59 	bl	8015980 <memset>
 8015ece:	4b05      	ldr	r3, [pc, #20]	; (8015ee4 <std+0x38>)
 8015ed0:	6263      	str	r3, [r4, #36]	; 0x24
 8015ed2:	4b05      	ldr	r3, [pc, #20]	; (8015ee8 <std+0x3c>)
 8015ed4:	62a3      	str	r3, [r4, #40]	; 0x28
 8015ed6:	4b05      	ldr	r3, [pc, #20]	; (8015eec <std+0x40>)
 8015ed8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015eda:	4b05      	ldr	r3, [pc, #20]	; (8015ef0 <std+0x44>)
 8015edc:	6224      	str	r4, [r4, #32]
 8015ede:	6323      	str	r3, [r4, #48]	; 0x30
 8015ee0:	bd10      	pop	{r4, pc}
 8015ee2:	bf00      	nop
 8015ee4:	080168e9 	.word	0x080168e9
 8015ee8:	0801690b 	.word	0x0801690b
 8015eec:	08016943 	.word	0x08016943
 8015ef0:	08016967 	.word	0x08016967

08015ef4 <_cleanup_r>:
 8015ef4:	4901      	ldr	r1, [pc, #4]	; (8015efc <_cleanup_r+0x8>)
 8015ef6:	f000 b8c1 	b.w	801607c <_fwalk_reent>
 8015efa:	bf00      	nop
 8015efc:	08015e35 	.word	0x08015e35

08015f00 <__sfmoreglue>:
 8015f00:	b570      	push	{r4, r5, r6, lr}
 8015f02:	1e4a      	subs	r2, r1, #1
 8015f04:	2568      	movs	r5, #104	; 0x68
 8015f06:	4355      	muls	r5, r2
 8015f08:	460e      	mov	r6, r1
 8015f0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015f0e:	f000 f993 	bl	8016238 <_malloc_r>
 8015f12:	4604      	mov	r4, r0
 8015f14:	b140      	cbz	r0, 8015f28 <__sfmoreglue+0x28>
 8015f16:	2100      	movs	r1, #0
 8015f18:	e9c0 1600 	strd	r1, r6, [r0]
 8015f1c:	300c      	adds	r0, #12
 8015f1e:	60a0      	str	r0, [r4, #8]
 8015f20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015f24:	f7ff fd2c 	bl	8015980 <memset>
 8015f28:	4620      	mov	r0, r4
 8015f2a:	bd70      	pop	{r4, r5, r6, pc}

08015f2c <__sfp_lock_acquire>:
 8015f2c:	4801      	ldr	r0, [pc, #4]	; (8015f34 <__sfp_lock_acquire+0x8>)
 8015f2e:	f000 b8c5 	b.w	80160bc <__retarget_lock_acquire_recursive>
 8015f32:	bf00      	nop
 8015f34:	20008450 	.word	0x20008450

08015f38 <__sfp_lock_release>:
 8015f38:	4801      	ldr	r0, [pc, #4]	; (8015f40 <__sfp_lock_release+0x8>)
 8015f3a:	f000 b8c0 	b.w	80160be <__retarget_lock_release_recursive>
 8015f3e:	bf00      	nop
 8015f40:	20008450 	.word	0x20008450

08015f44 <__sinit_lock_acquire>:
 8015f44:	4801      	ldr	r0, [pc, #4]	; (8015f4c <__sinit_lock_acquire+0x8>)
 8015f46:	f000 b8b9 	b.w	80160bc <__retarget_lock_acquire_recursive>
 8015f4a:	bf00      	nop
 8015f4c:	2000844b 	.word	0x2000844b

08015f50 <__sinit_lock_release>:
 8015f50:	4801      	ldr	r0, [pc, #4]	; (8015f58 <__sinit_lock_release+0x8>)
 8015f52:	f000 b8b4 	b.w	80160be <__retarget_lock_release_recursive>
 8015f56:	bf00      	nop
 8015f58:	2000844b 	.word	0x2000844b

08015f5c <__sinit>:
 8015f5c:	b510      	push	{r4, lr}
 8015f5e:	4604      	mov	r4, r0
 8015f60:	f7ff fff0 	bl	8015f44 <__sinit_lock_acquire>
 8015f64:	69a3      	ldr	r3, [r4, #24]
 8015f66:	b11b      	cbz	r3, 8015f70 <__sinit+0x14>
 8015f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f6c:	f7ff bff0 	b.w	8015f50 <__sinit_lock_release>
 8015f70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015f74:	6523      	str	r3, [r4, #80]	; 0x50
 8015f76:	4b13      	ldr	r3, [pc, #76]	; (8015fc4 <__sinit+0x68>)
 8015f78:	4a13      	ldr	r2, [pc, #76]	; (8015fc8 <__sinit+0x6c>)
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8015f7e:	42a3      	cmp	r3, r4
 8015f80:	bf04      	itt	eq
 8015f82:	2301      	moveq	r3, #1
 8015f84:	61a3      	streq	r3, [r4, #24]
 8015f86:	4620      	mov	r0, r4
 8015f88:	f000 f820 	bl	8015fcc <__sfp>
 8015f8c:	6060      	str	r0, [r4, #4]
 8015f8e:	4620      	mov	r0, r4
 8015f90:	f000 f81c 	bl	8015fcc <__sfp>
 8015f94:	60a0      	str	r0, [r4, #8]
 8015f96:	4620      	mov	r0, r4
 8015f98:	f000 f818 	bl	8015fcc <__sfp>
 8015f9c:	2200      	movs	r2, #0
 8015f9e:	60e0      	str	r0, [r4, #12]
 8015fa0:	2104      	movs	r1, #4
 8015fa2:	6860      	ldr	r0, [r4, #4]
 8015fa4:	f7ff ff82 	bl	8015eac <std>
 8015fa8:	68a0      	ldr	r0, [r4, #8]
 8015faa:	2201      	movs	r2, #1
 8015fac:	2109      	movs	r1, #9
 8015fae:	f7ff ff7d 	bl	8015eac <std>
 8015fb2:	68e0      	ldr	r0, [r4, #12]
 8015fb4:	2202      	movs	r2, #2
 8015fb6:	2112      	movs	r1, #18
 8015fb8:	f7ff ff78 	bl	8015eac <std>
 8015fbc:	2301      	movs	r3, #1
 8015fbe:	61a3      	str	r3, [r4, #24]
 8015fc0:	e7d2      	b.n	8015f68 <__sinit+0xc>
 8015fc2:	bf00      	nop
 8015fc4:	0801aa84 	.word	0x0801aa84
 8015fc8:	08015ef5 	.word	0x08015ef5

08015fcc <__sfp>:
 8015fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fce:	4607      	mov	r7, r0
 8015fd0:	f7ff ffac 	bl	8015f2c <__sfp_lock_acquire>
 8015fd4:	4b1e      	ldr	r3, [pc, #120]	; (8016050 <__sfp+0x84>)
 8015fd6:	681e      	ldr	r6, [r3, #0]
 8015fd8:	69b3      	ldr	r3, [r6, #24]
 8015fda:	b913      	cbnz	r3, 8015fe2 <__sfp+0x16>
 8015fdc:	4630      	mov	r0, r6
 8015fde:	f7ff ffbd 	bl	8015f5c <__sinit>
 8015fe2:	3648      	adds	r6, #72	; 0x48
 8015fe4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015fe8:	3b01      	subs	r3, #1
 8015fea:	d503      	bpl.n	8015ff4 <__sfp+0x28>
 8015fec:	6833      	ldr	r3, [r6, #0]
 8015fee:	b30b      	cbz	r3, 8016034 <__sfp+0x68>
 8015ff0:	6836      	ldr	r6, [r6, #0]
 8015ff2:	e7f7      	b.n	8015fe4 <__sfp+0x18>
 8015ff4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015ff8:	b9d5      	cbnz	r5, 8016030 <__sfp+0x64>
 8015ffa:	4b16      	ldr	r3, [pc, #88]	; (8016054 <__sfp+0x88>)
 8015ffc:	60e3      	str	r3, [r4, #12]
 8015ffe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016002:	6665      	str	r5, [r4, #100]	; 0x64
 8016004:	f000 f859 	bl	80160ba <__retarget_lock_init_recursive>
 8016008:	f7ff ff96 	bl	8015f38 <__sfp_lock_release>
 801600c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016010:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016014:	6025      	str	r5, [r4, #0]
 8016016:	61a5      	str	r5, [r4, #24]
 8016018:	2208      	movs	r2, #8
 801601a:	4629      	mov	r1, r5
 801601c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016020:	f7ff fcae 	bl	8015980 <memset>
 8016024:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016028:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801602c:	4620      	mov	r0, r4
 801602e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016030:	3468      	adds	r4, #104	; 0x68
 8016032:	e7d9      	b.n	8015fe8 <__sfp+0x1c>
 8016034:	2104      	movs	r1, #4
 8016036:	4638      	mov	r0, r7
 8016038:	f7ff ff62 	bl	8015f00 <__sfmoreglue>
 801603c:	4604      	mov	r4, r0
 801603e:	6030      	str	r0, [r6, #0]
 8016040:	2800      	cmp	r0, #0
 8016042:	d1d5      	bne.n	8015ff0 <__sfp+0x24>
 8016044:	f7ff ff78 	bl	8015f38 <__sfp_lock_release>
 8016048:	230c      	movs	r3, #12
 801604a:	603b      	str	r3, [r7, #0]
 801604c:	e7ee      	b.n	801602c <__sfp+0x60>
 801604e:	bf00      	nop
 8016050:	0801aa84 	.word	0x0801aa84
 8016054:	ffff0001 	.word	0xffff0001

08016058 <fiprintf>:
 8016058:	b40e      	push	{r1, r2, r3}
 801605a:	b503      	push	{r0, r1, lr}
 801605c:	4601      	mov	r1, r0
 801605e:	ab03      	add	r3, sp, #12
 8016060:	4805      	ldr	r0, [pc, #20]	; (8016078 <fiprintf+0x20>)
 8016062:	f853 2b04 	ldr.w	r2, [r3], #4
 8016066:	6800      	ldr	r0, [r0, #0]
 8016068:	9301      	str	r3, [sp, #4]
 801606a:	f000 f969 	bl	8016340 <_vfiprintf_r>
 801606e:	b002      	add	sp, #8
 8016070:	f85d eb04 	ldr.w	lr, [sp], #4
 8016074:	b003      	add	sp, #12
 8016076:	4770      	bx	lr
 8016078:	2000001c 	.word	0x2000001c

0801607c <_fwalk_reent>:
 801607c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016080:	4606      	mov	r6, r0
 8016082:	4688      	mov	r8, r1
 8016084:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016088:	2700      	movs	r7, #0
 801608a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801608e:	f1b9 0901 	subs.w	r9, r9, #1
 8016092:	d505      	bpl.n	80160a0 <_fwalk_reent+0x24>
 8016094:	6824      	ldr	r4, [r4, #0]
 8016096:	2c00      	cmp	r4, #0
 8016098:	d1f7      	bne.n	801608a <_fwalk_reent+0xe>
 801609a:	4638      	mov	r0, r7
 801609c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160a0:	89ab      	ldrh	r3, [r5, #12]
 80160a2:	2b01      	cmp	r3, #1
 80160a4:	d907      	bls.n	80160b6 <_fwalk_reent+0x3a>
 80160a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80160aa:	3301      	adds	r3, #1
 80160ac:	d003      	beq.n	80160b6 <_fwalk_reent+0x3a>
 80160ae:	4629      	mov	r1, r5
 80160b0:	4630      	mov	r0, r6
 80160b2:	47c0      	blx	r8
 80160b4:	4307      	orrs	r7, r0
 80160b6:	3568      	adds	r5, #104	; 0x68
 80160b8:	e7e9      	b.n	801608e <_fwalk_reent+0x12>

080160ba <__retarget_lock_init_recursive>:
 80160ba:	4770      	bx	lr

080160bc <__retarget_lock_acquire_recursive>:
 80160bc:	4770      	bx	lr

080160be <__retarget_lock_release_recursive>:
 80160be:	4770      	bx	lr

080160c0 <__swhatbuf_r>:
 80160c0:	b570      	push	{r4, r5, r6, lr}
 80160c2:	460e      	mov	r6, r1
 80160c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160c8:	2900      	cmp	r1, #0
 80160ca:	b096      	sub	sp, #88	; 0x58
 80160cc:	4614      	mov	r4, r2
 80160ce:	461d      	mov	r5, r3
 80160d0:	da07      	bge.n	80160e2 <__swhatbuf_r+0x22>
 80160d2:	2300      	movs	r3, #0
 80160d4:	602b      	str	r3, [r5, #0]
 80160d6:	89b3      	ldrh	r3, [r6, #12]
 80160d8:	061a      	lsls	r2, r3, #24
 80160da:	d410      	bmi.n	80160fe <__swhatbuf_r+0x3e>
 80160dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80160e0:	e00e      	b.n	8016100 <__swhatbuf_r+0x40>
 80160e2:	466a      	mov	r2, sp
 80160e4:	f000 fc6e 	bl	80169c4 <_fstat_r>
 80160e8:	2800      	cmp	r0, #0
 80160ea:	dbf2      	blt.n	80160d2 <__swhatbuf_r+0x12>
 80160ec:	9a01      	ldr	r2, [sp, #4]
 80160ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80160f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80160f6:	425a      	negs	r2, r3
 80160f8:	415a      	adcs	r2, r3
 80160fa:	602a      	str	r2, [r5, #0]
 80160fc:	e7ee      	b.n	80160dc <__swhatbuf_r+0x1c>
 80160fe:	2340      	movs	r3, #64	; 0x40
 8016100:	2000      	movs	r0, #0
 8016102:	6023      	str	r3, [r4, #0]
 8016104:	b016      	add	sp, #88	; 0x58
 8016106:	bd70      	pop	{r4, r5, r6, pc}

08016108 <__smakebuf_r>:
 8016108:	898b      	ldrh	r3, [r1, #12]
 801610a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801610c:	079d      	lsls	r5, r3, #30
 801610e:	4606      	mov	r6, r0
 8016110:	460c      	mov	r4, r1
 8016112:	d507      	bpl.n	8016124 <__smakebuf_r+0x1c>
 8016114:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016118:	6023      	str	r3, [r4, #0]
 801611a:	6123      	str	r3, [r4, #16]
 801611c:	2301      	movs	r3, #1
 801611e:	6163      	str	r3, [r4, #20]
 8016120:	b002      	add	sp, #8
 8016122:	bd70      	pop	{r4, r5, r6, pc}
 8016124:	ab01      	add	r3, sp, #4
 8016126:	466a      	mov	r2, sp
 8016128:	f7ff ffca 	bl	80160c0 <__swhatbuf_r>
 801612c:	9900      	ldr	r1, [sp, #0]
 801612e:	4605      	mov	r5, r0
 8016130:	4630      	mov	r0, r6
 8016132:	f000 f881 	bl	8016238 <_malloc_r>
 8016136:	b948      	cbnz	r0, 801614c <__smakebuf_r+0x44>
 8016138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801613c:	059a      	lsls	r2, r3, #22
 801613e:	d4ef      	bmi.n	8016120 <__smakebuf_r+0x18>
 8016140:	f023 0303 	bic.w	r3, r3, #3
 8016144:	f043 0302 	orr.w	r3, r3, #2
 8016148:	81a3      	strh	r3, [r4, #12]
 801614a:	e7e3      	b.n	8016114 <__smakebuf_r+0xc>
 801614c:	4b0d      	ldr	r3, [pc, #52]	; (8016184 <__smakebuf_r+0x7c>)
 801614e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016150:	89a3      	ldrh	r3, [r4, #12]
 8016152:	6020      	str	r0, [r4, #0]
 8016154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016158:	81a3      	strh	r3, [r4, #12]
 801615a:	9b00      	ldr	r3, [sp, #0]
 801615c:	6163      	str	r3, [r4, #20]
 801615e:	9b01      	ldr	r3, [sp, #4]
 8016160:	6120      	str	r0, [r4, #16]
 8016162:	b15b      	cbz	r3, 801617c <__smakebuf_r+0x74>
 8016164:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016168:	4630      	mov	r0, r6
 801616a:	f000 fc3d 	bl	80169e8 <_isatty_r>
 801616e:	b128      	cbz	r0, 801617c <__smakebuf_r+0x74>
 8016170:	89a3      	ldrh	r3, [r4, #12]
 8016172:	f023 0303 	bic.w	r3, r3, #3
 8016176:	f043 0301 	orr.w	r3, r3, #1
 801617a:	81a3      	strh	r3, [r4, #12]
 801617c:	89a0      	ldrh	r0, [r4, #12]
 801617e:	4305      	orrs	r5, r0
 8016180:	81a5      	strh	r5, [r4, #12]
 8016182:	e7cd      	b.n	8016120 <__smakebuf_r+0x18>
 8016184:	08015ef5 	.word	0x08015ef5

08016188 <malloc>:
 8016188:	4b02      	ldr	r3, [pc, #8]	; (8016194 <malloc+0xc>)
 801618a:	4601      	mov	r1, r0
 801618c:	6818      	ldr	r0, [r3, #0]
 801618e:	f000 b853 	b.w	8016238 <_malloc_r>
 8016192:	bf00      	nop
 8016194:	2000001c 	.word	0x2000001c

08016198 <_free_r>:
 8016198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801619a:	2900      	cmp	r1, #0
 801619c:	d048      	beq.n	8016230 <_free_r+0x98>
 801619e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80161a2:	9001      	str	r0, [sp, #4]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	f1a1 0404 	sub.w	r4, r1, #4
 80161aa:	bfb8      	it	lt
 80161ac:	18e4      	addlt	r4, r4, r3
 80161ae:	f000 fc3d 	bl	8016a2c <__malloc_lock>
 80161b2:	4a20      	ldr	r2, [pc, #128]	; (8016234 <_free_r+0x9c>)
 80161b4:	9801      	ldr	r0, [sp, #4]
 80161b6:	6813      	ldr	r3, [r2, #0]
 80161b8:	4615      	mov	r5, r2
 80161ba:	b933      	cbnz	r3, 80161ca <_free_r+0x32>
 80161bc:	6063      	str	r3, [r4, #4]
 80161be:	6014      	str	r4, [r2, #0]
 80161c0:	b003      	add	sp, #12
 80161c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80161c6:	f000 bc37 	b.w	8016a38 <__malloc_unlock>
 80161ca:	42a3      	cmp	r3, r4
 80161cc:	d90b      	bls.n	80161e6 <_free_r+0x4e>
 80161ce:	6821      	ldr	r1, [r4, #0]
 80161d0:	1862      	adds	r2, r4, r1
 80161d2:	4293      	cmp	r3, r2
 80161d4:	bf04      	itt	eq
 80161d6:	681a      	ldreq	r2, [r3, #0]
 80161d8:	685b      	ldreq	r3, [r3, #4]
 80161da:	6063      	str	r3, [r4, #4]
 80161dc:	bf04      	itt	eq
 80161de:	1852      	addeq	r2, r2, r1
 80161e0:	6022      	streq	r2, [r4, #0]
 80161e2:	602c      	str	r4, [r5, #0]
 80161e4:	e7ec      	b.n	80161c0 <_free_r+0x28>
 80161e6:	461a      	mov	r2, r3
 80161e8:	685b      	ldr	r3, [r3, #4]
 80161ea:	b10b      	cbz	r3, 80161f0 <_free_r+0x58>
 80161ec:	42a3      	cmp	r3, r4
 80161ee:	d9fa      	bls.n	80161e6 <_free_r+0x4e>
 80161f0:	6811      	ldr	r1, [r2, #0]
 80161f2:	1855      	adds	r5, r2, r1
 80161f4:	42a5      	cmp	r5, r4
 80161f6:	d10b      	bne.n	8016210 <_free_r+0x78>
 80161f8:	6824      	ldr	r4, [r4, #0]
 80161fa:	4421      	add	r1, r4
 80161fc:	1854      	adds	r4, r2, r1
 80161fe:	42a3      	cmp	r3, r4
 8016200:	6011      	str	r1, [r2, #0]
 8016202:	d1dd      	bne.n	80161c0 <_free_r+0x28>
 8016204:	681c      	ldr	r4, [r3, #0]
 8016206:	685b      	ldr	r3, [r3, #4]
 8016208:	6053      	str	r3, [r2, #4]
 801620a:	4421      	add	r1, r4
 801620c:	6011      	str	r1, [r2, #0]
 801620e:	e7d7      	b.n	80161c0 <_free_r+0x28>
 8016210:	d902      	bls.n	8016218 <_free_r+0x80>
 8016212:	230c      	movs	r3, #12
 8016214:	6003      	str	r3, [r0, #0]
 8016216:	e7d3      	b.n	80161c0 <_free_r+0x28>
 8016218:	6825      	ldr	r5, [r4, #0]
 801621a:	1961      	adds	r1, r4, r5
 801621c:	428b      	cmp	r3, r1
 801621e:	bf04      	itt	eq
 8016220:	6819      	ldreq	r1, [r3, #0]
 8016222:	685b      	ldreq	r3, [r3, #4]
 8016224:	6063      	str	r3, [r4, #4]
 8016226:	bf04      	itt	eq
 8016228:	1949      	addeq	r1, r1, r5
 801622a:	6021      	streq	r1, [r4, #0]
 801622c:	6054      	str	r4, [r2, #4]
 801622e:	e7c7      	b.n	80161c0 <_free_r+0x28>
 8016230:	b003      	add	sp, #12
 8016232:	bd30      	pop	{r4, r5, pc}
 8016234:	20000c30 	.word	0x20000c30

08016238 <_malloc_r>:
 8016238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801623a:	1ccd      	adds	r5, r1, #3
 801623c:	f025 0503 	bic.w	r5, r5, #3
 8016240:	3508      	adds	r5, #8
 8016242:	2d0c      	cmp	r5, #12
 8016244:	bf38      	it	cc
 8016246:	250c      	movcc	r5, #12
 8016248:	2d00      	cmp	r5, #0
 801624a:	4606      	mov	r6, r0
 801624c:	db01      	blt.n	8016252 <_malloc_r+0x1a>
 801624e:	42a9      	cmp	r1, r5
 8016250:	d903      	bls.n	801625a <_malloc_r+0x22>
 8016252:	230c      	movs	r3, #12
 8016254:	6033      	str	r3, [r6, #0]
 8016256:	2000      	movs	r0, #0
 8016258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801625a:	f000 fbe7 	bl	8016a2c <__malloc_lock>
 801625e:	4921      	ldr	r1, [pc, #132]	; (80162e4 <_malloc_r+0xac>)
 8016260:	680a      	ldr	r2, [r1, #0]
 8016262:	4614      	mov	r4, r2
 8016264:	b99c      	cbnz	r4, 801628e <_malloc_r+0x56>
 8016266:	4f20      	ldr	r7, [pc, #128]	; (80162e8 <_malloc_r+0xb0>)
 8016268:	683b      	ldr	r3, [r7, #0]
 801626a:	b923      	cbnz	r3, 8016276 <_malloc_r+0x3e>
 801626c:	4621      	mov	r1, r4
 801626e:	4630      	mov	r0, r6
 8016270:	f000 fb2a 	bl	80168c8 <_sbrk_r>
 8016274:	6038      	str	r0, [r7, #0]
 8016276:	4629      	mov	r1, r5
 8016278:	4630      	mov	r0, r6
 801627a:	f000 fb25 	bl	80168c8 <_sbrk_r>
 801627e:	1c43      	adds	r3, r0, #1
 8016280:	d123      	bne.n	80162ca <_malloc_r+0x92>
 8016282:	230c      	movs	r3, #12
 8016284:	6033      	str	r3, [r6, #0]
 8016286:	4630      	mov	r0, r6
 8016288:	f000 fbd6 	bl	8016a38 <__malloc_unlock>
 801628c:	e7e3      	b.n	8016256 <_malloc_r+0x1e>
 801628e:	6823      	ldr	r3, [r4, #0]
 8016290:	1b5b      	subs	r3, r3, r5
 8016292:	d417      	bmi.n	80162c4 <_malloc_r+0x8c>
 8016294:	2b0b      	cmp	r3, #11
 8016296:	d903      	bls.n	80162a0 <_malloc_r+0x68>
 8016298:	6023      	str	r3, [r4, #0]
 801629a:	441c      	add	r4, r3
 801629c:	6025      	str	r5, [r4, #0]
 801629e:	e004      	b.n	80162aa <_malloc_r+0x72>
 80162a0:	6863      	ldr	r3, [r4, #4]
 80162a2:	42a2      	cmp	r2, r4
 80162a4:	bf0c      	ite	eq
 80162a6:	600b      	streq	r3, [r1, #0]
 80162a8:	6053      	strne	r3, [r2, #4]
 80162aa:	4630      	mov	r0, r6
 80162ac:	f000 fbc4 	bl	8016a38 <__malloc_unlock>
 80162b0:	f104 000b 	add.w	r0, r4, #11
 80162b4:	1d23      	adds	r3, r4, #4
 80162b6:	f020 0007 	bic.w	r0, r0, #7
 80162ba:	1ac2      	subs	r2, r0, r3
 80162bc:	d0cc      	beq.n	8016258 <_malloc_r+0x20>
 80162be:	1a1b      	subs	r3, r3, r0
 80162c0:	50a3      	str	r3, [r4, r2]
 80162c2:	e7c9      	b.n	8016258 <_malloc_r+0x20>
 80162c4:	4622      	mov	r2, r4
 80162c6:	6864      	ldr	r4, [r4, #4]
 80162c8:	e7cc      	b.n	8016264 <_malloc_r+0x2c>
 80162ca:	1cc4      	adds	r4, r0, #3
 80162cc:	f024 0403 	bic.w	r4, r4, #3
 80162d0:	42a0      	cmp	r0, r4
 80162d2:	d0e3      	beq.n	801629c <_malloc_r+0x64>
 80162d4:	1a21      	subs	r1, r4, r0
 80162d6:	4630      	mov	r0, r6
 80162d8:	f000 faf6 	bl	80168c8 <_sbrk_r>
 80162dc:	3001      	adds	r0, #1
 80162de:	d1dd      	bne.n	801629c <_malloc_r+0x64>
 80162e0:	e7cf      	b.n	8016282 <_malloc_r+0x4a>
 80162e2:	bf00      	nop
 80162e4:	20000c30 	.word	0x20000c30
 80162e8:	20000c34 	.word	0x20000c34

080162ec <__sfputc_r>:
 80162ec:	6893      	ldr	r3, [r2, #8]
 80162ee:	3b01      	subs	r3, #1
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	b410      	push	{r4}
 80162f4:	6093      	str	r3, [r2, #8]
 80162f6:	da08      	bge.n	801630a <__sfputc_r+0x1e>
 80162f8:	6994      	ldr	r4, [r2, #24]
 80162fa:	42a3      	cmp	r3, r4
 80162fc:	db01      	blt.n	8016302 <__sfputc_r+0x16>
 80162fe:	290a      	cmp	r1, #10
 8016300:	d103      	bne.n	801630a <__sfputc_r+0x1e>
 8016302:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016306:	f7ff bc31 	b.w	8015b6c <__swbuf_r>
 801630a:	6813      	ldr	r3, [r2, #0]
 801630c:	1c58      	adds	r0, r3, #1
 801630e:	6010      	str	r0, [r2, #0]
 8016310:	7019      	strb	r1, [r3, #0]
 8016312:	4608      	mov	r0, r1
 8016314:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016318:	4770      	bx	lr

0801631a <__sfputs_r>:
 801631a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801631c:	4606      	mov	r6, r0
 801631e:	460f      	mov	r7, r1
 8016320:	4614      	mov	r4, r2
 8016322:	18d5      	adds	r5, r2, r3
 8016324:	42ac      	cmp	r4, r5
 8016326:	d101      	bne.n	801632c <__sfputs_r+0x12>
 8016328:	2000      	movs	r0, #0
 801632a:	e007      	b.n	801633c <__sfputs_r+0x22>
 801632c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016330:	463a      	mov	r2, r7
 8016332:	4630      	mov	r0, r6
 8016334:	f7ff ffda 	bl	80162ec <__sfputc_r>
 8016338:	1c43      	adds	r3, r0, #1
 801633a:	d1f3      	bne.n	8016324 <__sfputs_r+0xa>
 801633c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016340 <_vfiprintf_r>:
 8016340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016344:	460d      	mov	r5, r1
 8016346:	b09d      	sub	sp, #116	; 0x74
 8016348:	4614      	mov	r4, r2
 801634a:	4698      	mov	r8, r3
 801634c:	4606      	mov	r6, r0
 801634e:	b118      	cbz	r0, 8016358 <_vfiprintf_r+0x18>
 8016350:	6983      	ldr	r3, [r0, #24]
 8016352:	b90b      	cbnz	r3, 8016358 <_vfiprintf_r+0x18>
 8016354:	f7ff fe02 	bl	8015f5c <__sinit>
 8016358:	4b89      	ldr	r3, [pc, #548]	; (8016580 <_vfiprintf_r+0x240>)
 801635a:	429d      	cmp	r5, r3
 801635c:	d11b      	bne.n	8016396 <_vfiprintf_r+0x56>
 801635e:	6875      	ldr	r5, [r6, #4]
 8016360:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016362:	07d9      	lsls	r1, r3, #31
 8016364:	d405      	bmi.n	8016372 <_vfiprintf_r+0x32>
 8016366:	89ab      	ldrh	r3, [r5, #12]
 8016368:	059a      	lsls	r2, r3, #22
 801636a:	d402      	bmi.n	8016372 <_vfiprintf_r+0x32>
 801636c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801636e:	f7ff fea5 	bl	80160bc <__retarget_lock_acquire_recursive>
 8016372:	89ab      	ldrh	r3, [r5, #12]
 8016374:	071b      	lsls	r3, r3, #28
 8016376:	d501      	bpl.n	801637c <_vfiprintf_r+0x3c>
 8016378:	692b      	ldr	r3, [r5, #16]
 801637a:	b9eb      	cbnz	r3, 80163b8 <_vfiprintf_r+0x78>
 801637c:	4629      	mov	r1, r5
 801637e:	4630      	mov	r0, r6
 8016380:	f7ff fc46 	bl	8015c10 <__swsetup_r>
 8016384:	b1c0      	cbz	r0, 80163b8 <_vfiprintf_r+0x78>
 8016386:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016388:	07dc      	lsls	r4, r3, #31
 801638a:	d50e      	bpl.n	80163aa <_vfiprintf_r+0x6a>
 801638c:	f04f 30ff 	mov.w	r0, #4294967295
 8016390:	b01d      	add	sp, #116	; 0x74
 8016392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016396:	4b7b      	ldr	r3, [pc, #492]	; (8016584 <_vfiprintf_r+0x244>)
 8016398:	429d      	cmp	r5, r3
 801639a:	d101      	bne.n	80163a0 <_vfiprintf_r+0x60>
 801639c:	68b5      	ldr	r5, [r6, #8]
 801639e:	e7df      	b.n	8016360 <_vfiprintf_r+0x20>
 80163a0:	4b79      	ldr	r3, [pc, #484]	; (8016588 <_vfiprintf_r+0x248>)
 80163a2:	429d      	cmp	r5, r3
 80163a4:	bf08      	it	eq
 80163a6:	68f5      	ldreq	r5, [r6, #12]
 80163a8:	e7da      	b.n	8016360 <_vfiprintf_r+0x20>
 80163aa:	89ab      	ldrh	r3, [r5, #12]
 80163ac:	0598      	lsls	r0, r3, #22
 80163ae:	d4ed      	bmi.n	801638c <_vfiprintf_r+0x4c>
 80163b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80163b2:	f7ff fe84 	bl	80160be <__retarget_lock_release_recursive>
 80163b6:	e7e9      	b.n	801638c <_vfiprintf_r+0x4c>
 80163b8:	2300      	movs	r3, #0
 80163ba:	9309      	str	r3, [sp, #36]	; 0x24
 80163bc:	2320      	movs	r3, #32
 80163be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80163c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80163c6:	2330      	movs	r3, #48	; 0x30
 80163c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801658c <_vfiprintf_r+0x24c>
 80163cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80163d0:	f04f 0901 	mov.w	r9, #1
 80163d4:	4623      	mov	r3, r4
 80163d6:	469a      	mov	sl, r3
 80163d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80163dc:	b10a      	cbz	r2, 80163e2 <_vfiprintf_r+0xa2>
 80163de:	2a25      	cmp	r2, #37	; 0x25
 80163e0:	d1f9      	bne.n	80163d6 <_vfiprintf_r+0x96>
 80163e2:	ebba 0b04 	subs.w	fp, sl, r4
 80163e6:	d00b      	beq.n	8016400 <_vfiprintf_r+0xc0>
 80163e8:	465b      	mov	r3, fp
 80163ea:	4622      	mov	r2, r4
 80163ec:	4629      	mov	r1, r5
 80163ee:	4630      	mov	r0, r6
 80163f0:	f7ff ff93 	bl	801631a <__sfputs_r>
 80163f4:	3001      	adds	r0, #1
 80163f6:	f000 80aa 	beq.w	801654e <_vfiprintf_r+0x20e>
 80163fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80163fc:	445a      	add	r2, fp
 80163fe:	9209      	str	r2, [sp, #36]	; 0x24
 8016400:	f89a 3000 	ldrb.w	r3, [sl]
 8016404:	2b00      	cmp	r3, #0
 8016406:	f000 80a2 	beq.w	801654e <_vfiprintf_r+0x20e>
 801640a:	2300      	movs	r3, #0
 801640c:	f04f 32ff 	mov.w	r2, #4294967295
 8016410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016414:	f10a 0a01 	add.w	sl, sl, #1
 8016418:	9304      	str	r3, [sp, #16]
 801641a:	9307      	str	r3, [sp, #28]
 801641c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016420:	931a      	str	r3, [sp, #104]	; 0x68
 8016422:	4654      	mov	r4, sl
 8016424:	2205      	movs	r2, #5
 8016426:	f814 1b01 	ldrb.w	r1, [r4], #1
 801642a:	4858      	ldr	r0, [pc, #352]	; (801658c <_vfiprintf_r+0x24c>)
 801642c:	f7ed fee8 	bl	8004200 <memchr>
 8016430:	9a04      	ldr	r2, [sp, #16]
 8016432:	b9d8      	cbnz	r0, 801646c <_vfiprintf_r+0x12c>
 8016434:	06d1      	lsls	r1, r2, #27
 8016436:	bf44      	itt	mi
 8016438:	2320      	movmi	r3, #32
 801643a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801643e:	0713      	lsls	r3, r2, #28
 8016440:	bf44      	itt	mi
 8016442:	232b      	movmi	r3, #43	; 0x2b
 8016444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016448:	f89a 3000 	ldrb.w	r3, [sl]
 801644c:	2b2a      	cmp	r3, #42	; 0x2a
 801644e:	d015      	beq.n	801647c <_vfiprintf_r+0x13c>
 8016450:	9a07      	ldr	r2, [sp, #28]
 8016452:	4654      	mov	r4, sl
 8016454:	2000      	movs	r0, #0
 8016456:	f04f 0c0a 	mov.w	ip, #10
 801645a:	4621      	mov	r1, r4
 801645c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016460:	3b30      	subs	r3, #48	; 0x30
 8016462:	2b09      	cmp	r3, #9
 8016464:	d94e      	bls.n	8016504 <_vfiprintf_r+0x1c4>
 8016466:	b1b0      	cbz	r0, 8016496 <_vfiprintf_r+0x156>
 8016468:	9207      	str	r2, [sp, #28]
 801646a:	e014      	b.n	8016496 <_vfiprintf_r+0x156>
 801646c:	eba0 0308 	sub.w	r3, r0, r8
 8016470:	fa09 f303 	lsl.w	r3, r9, r3
 8016474:	4313      	orrs	r3, r2
 8016476:	9304      	str	r3, [sp, #16]
 8016478:	46a2      	mov	sl, r4
 801647a:	e7d2      	b.n	8016422 <_vfiprintf_r+0xe2>
 801647c:	9b03      	ldr	r3, [sp, #12]
 801647e:	1d19      	adds	r1, r3, #4
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	9103      	str	r1, [sp, #12]
 8016484:	2b00      	cmp	r3, #0
 8016486:	bfbb      	ittet	lt
 8016488:	425b      	neglt	r3, r3
 801648a:	f042 0202 	orrlt.w	r2, r2, #2
 801648e:	9307      	strge	r3, [sp, #28]
 8016490:	9307      	strlt	r3, [sp, #28]
 8016492:	bfb8      	it	lt
 8016494:	9204      	strlt	r2, [sp, #16]
 8016496:	7823      	ldrb	r3, [r4, #0]
 8016498:	2b2e      	cmp	r3, #46	; 0x2e
 801649a:	d10c      	bne.n	80164b6 <_vfiprintf_r+0x176>
 801649c:	7863      	ldrb	r3, [r4, #1]
 801649e:	2b2a      	cmp	r3, #42	; 0x2a
 80164a0:	d135      	bne.n	801650e <_vfiprintf_r+0x1ce>
 80164a2:	9b03      	ldr	r3, [sp, #12]
 80164a4:	1d1a      	adds	r2, r3, #4
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	9203      	str	r2, [sp, #12]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	bfb8      	it	lt
 80164ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80164b2:	3402      	adds	r4, #2
 80164b4:	9305      	str	r3, [sp, #20]
 80164b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801659c <_vfiprintf_r+0x25c>
 80164ba:	7821      	ldrb	r1, [r4, #0]
 80164bc:	2203      	movs	r2, #3
 80164be:	4650      	mov	r0, sl
 80164c0:	f7ed fe9e 	bl	8004200 <memchr>
 80164c4:	b140      	cbz	r0, 80164d8 <_vfiprintf_r+0x198>
 80164c6:	2340      	movs	r3, #64	; 0x40
 80164c8:	eba0 000a 	sub.w	r0, r0, sl
 80164cc:	fa03 f000 	lsl.w	r0, r3, r0
 80164d0:	9b04      	ldr	r3, [sp, #16]
 80164d2:	4303      	orrs	r3, r0
 80164d4:	3401      	adds	r4, #1
 80164d6:	9304      	str	r3, [sp, #16]
 80164d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164dc:	482c      	ldr	r0, [pc, #176]	; (8016590 <_vfiprintf_r+0x250>)
 80164de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80164e2:	2206      	movs	r2, #6
 80164e4:	f7ed fe8c 	bl	8004200 <memchr>
 80164e8:	2800      	cmp	r0, #0
 80164ea:	d03f      	beq.n	801656c <_vfiprintf_r+0x22c>
 80164ec:	4b29      	ldr	r3, [pc, #164]	; (8016594 <_vfiprintf_r+0x254>)
 80164ee:	bb1b      	cbnz	r3, 8016538 <_vfiprintf_r+0x1f8>
 80164f0:	9b03      	ldr	r3, [sp, #12]
 80164f2:	3307      	adds	r3, #7
 80164f4:	f023 0307 	bic.w	r3, r3, #7
 80164f8:	3308      	adds	r3, #8
 80164fa:	9303      	str	r3, [sp, #12]
 80164fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164fe:	443b      	add	r3, r7
 8016500:	9309      	str	r3, [sp, #36]	; 0x24
 8016502:	e767      	b.n	80163d4 <_vfiprintf_r+0x94>
 8016504:	fb0c 3202 	mla	r2, ip, r2, r3
 8016508:	460c      	mov	r4, r1
 801650a:	2001      	movs	r0, #1
 801650c:	e7a5      	b.n	801645a <_vfiprintf_r+0x11a>
 801650e:	2300      	movs	r3, #0
 8016510:	3401      	adds	r4, #1
 8016512:	9305      	str	r3, [sp, #20]
 8016514:	4619      	mov	r1, r3
 8016516:	f04f 0c0a 	mov.w	ip, #10
 801651a:	4620      	mov	r0, r4
 801651c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016520:	3a30      	subs	r2, #48	; 0x30
 8016522:	2a09      	cmp	r2, #9
 8016524:	d903      	bls.n	801652e <_vfiprintf_r+0x1ee>
 8016526:	2b00      	cmp	r3, #0
 8016528:	d0c5      	beq.n	80164b6 <_vfiprintf_r+0x176>
 801652a:	9105      	str	r1, [sp, #20]
 801652c:	e7c3      	b.n	80164b6 <_vfiprintf_r+0x176>
 801652e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016532:	4604      	mov	r4, r0
 8016534:	2301      	movs	r3, #1
 8016536:	e7f0      	b.n	801651a <_vfiprintf_r+0x1da>
 8016538:	ab03      	add	r3, sp, #12
 801653a:	9300      	str	r3, [sp, #0]
 801653c:	462a      	mov	r2, r5
 801653e:	4b16      	ldr	r3, [pc, #88]	; (8016598 <_vfiprintf_r+0x258>)
 8016540:	a904      	add	r1, sp, #16
 8016542:	4630      	mov	r0, r6
 8016544:	f3af 8000 	nop.w
 8016548:	4607      	mov	r7, r0
 801654a:	1c78      	adds	r0, r7, #1
 801654c:	d1d6      	bne.n	80164fc <_vfiprintf_r+0x1bc>
 801654e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016550:	07d9      	lsls	r1, r3, #31
 8016552:	d405      	bmi.n	8016560 <_vfiprintf_r+0x220>
 8016554:	89ab      	ldrh	r3, [r5, #12]
 8016556:	059a      	lsls	r2, r3, #22
 8016558:	d402      	bmi.n	8016560 <_vfiprintf_r+0x220>
 801655a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801655c:	f7ff fdaf 	bl	80160be <__retarget_lock_release_recursive>
 8016560:	89ab      	ldrh	r3, [r5, #12]
 8016562:	065b      	lsls	r3, r3, #25
 8016564:	f53f af12 	bmi.w	801638c <_vfiprintf_r+0x4c>
 8016568:	9809      	ldr	r0, [sp, #36]	; 0x24
 801656a:	e711      	b.n	8016390 <_vfiprintf_r+0x50>
 801656c:	ab03      	add	r3, sp, #12
 801656e:	9300      	str	r3, [sp, #0]
 8016570:	462a      	mov	r2, r5
 8016572:	4b09      	ldr	r3, [pc, #36]	; (8016598 <_vfiprintf_r+0x258>)
 8016574:	a904      	add	r1, sp, #16
 8016576:	4630      	mov	r0, r6
 8016578:	f000 f880 	bl	801667c <_printf_i>
 801657c:	e7e4      	b.n	8016548 <_vfiprintf_r+0x208>
 801657e:	bf00      	nop
 8016580:	0801ab5c 	.word	0x0801ab5c
 8016584:	0801ab7c 	.word	0x0801ab7c
 8016588:	0801ab3c 	.word	0x0801ab3c
 801658c:	0801ab9c 	.word	0x0801ab9c
 8016590:	0801aba6 	.word	0x0801aba6
 8016594:	00000000 	.word	0x00000000
 8016598:	0801631b 	.word	0x0801631b
 801659c:	0801aba2 	.word	0x0801aba2

080165a0 <_printf_common>:
 80165a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165a4:	4616      	mov	r6, r2
 80165a6:	4699      	mov	r9, r3
 80165a8:	688a      	ldr	r2, [r1, #8]
 80165aa:	690b      	ldr	r3, [r1, #16]
 80165ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80165b0:	4293      	cmp	r3, r2
 80165b2:	bfb8      	it	lt
 80165b4:	4613      	movlt	r3, r2
 80165b6:	6033      	str	r3, [r6, #0]
 80165b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80165bc:	4607      	mov	r7, r0
 80165be:	460c      	mov	r4, r1
 80165c0:	b10a      	cbz	r2, 80165c6 <_printf_common+0x26>
 80165c2:	3301      	adds	r3, #1
 80165c4:	6033      	str	r3, [r6, #0]
 80165c6:	6823      	ldr	r3, [r4, #0]
 80165c8:	0699      	lsls	r1, r3, #26
 80165ca:	bf42      	ittt	mi
 80165cc:	6833      	ldrmi	r3, [r6, #0]
 80165ce:	3302      	addmi	r3, #2
 80165d0:	6033      	strmi	r3, [r6, #0]
 80165d2:	6825      	ldr	r5, [r4, #0]
 80165d4:	f015 0506 	ands.w	r5, r5, #6
 80165d8:	d106      	bne.n	80165e8 <_printf_common+0x48>
 80165da:	f104 0a19 	add.w	sl, r4, #25
 80165de:	68e3      	ldr	r3, [r4, #12]
 80165e0:	6832      	ldr	r2, [r6, #0]
 80165e2:	1a9b      	subs	r3, r3, r2
 80165e4:	42ab      	cmp	r3, r5
 80165e6:	dc26      	bgt.n	8016636 <_printf_common+0x96>
 80165e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80165ec:	1e13      	subs	r3, r2, #0
 80165ee:	6822      	ldr	r2, [r4, #0]
 80165f0:	bf18      	it	ne
 80165f2:	2301      	movne	r3, #1
 80165f4:	0692      	lsls	r2, r2, #26
 80165f6:	d42b      	bmi.n	8016650 <_printf_common+0xb0>
 80165f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80165fc:	4649      	mov	r1, r9
 80165fe:	4638      	mov	r0, r7
 8016600:	47c0      	blx	r8
 8016602:	3001      	adds	r0, #1
 8016604:	d01e      	beq.n	8016644 <_printf_common+0xa4>
 8016606:	6823      	ldr	r3, [r4, #0]
 8016608:	68e5      	ldr	r5, [r4, #12]
 801660a:	6832      	ldr	r2, [r6, #0]
 801660c:	f003 0306 	and.w	r3, r3, #6
 8016610:	2b04      	cmp	r3, #4
 8016612:	bf08      	it	eq
 8016614:	1aad      	subeq	r5, r5, r2
 8016616:	68a3      	ldr	r3, [r4, #8]
 8016618:	6922      	ldr	r2, [r4, #16]
 801661a:	bf0c      	ite	eq
 801661c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016620:	2500      	movne	r5, #0
 8016622:	4293      	cmp	r3, r2
 8016624:	bfc4      	itt	gt
 8016626:	1a9b      	subgt	r3, r3, r2
 8016628:	18ed      	addgt	r5, r5, r3
 801662a:	2600      	movs	r6, #0
 801662c:	341a      	adds	r4, #26
 801662e:	42b5      	cmp	r5, r6
 8016630:	d11a      	bne.n	8016668 <_printf_common+0xc8>
 8016632:	2000      	movs	r0, #0
 8016634:	e008      	b.n	8016648 <_printf_common+0xa8>
 8016636:	2301      	movs	r3, #1
 8016638:	4652      	mov	r2, sl
 801663a:	4649      	mov	r1, r9
 801663c:	4638      	mov	r0, r7
 801663e:	47c0      	blx	r8
 8016640:	3001      	adds	r0, #1
 8016642:	d103      	bne.n	801664c <_printf_common+0xac>
 8016644:	f04f 30ff 	mov.w	r0, #4294967295
 8016648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801664c:	3501      	adds	r5, #1
 801664e:	e7c6      	b.n	80165de <_printf_common+0x3e>
 8016650:	18e1      	adds	r1, r4, r3
 8016652:	1c5a      	adds	r2, r3, #1
 8016654:	2030      	movs	r0, #48	; 0x30
 8016656:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801665a:	4422      	add	r2, r4
 801665c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016660:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016664:	3302      	adds	r3, #2
 8016666:	e7c7      	b.n	80165f8 <_printf_common+0x58>
 8016668:	2301      	movs	r3, #1
 801666a:	4622      	mov	r2, r4
 801666c:	4649      	mov	r1, r9
 801666e:	4638      	mov	r0, r7
 8016670:	47c0      	blx	r8
 8016672:	3001      	adds	r0, #1
 8016674:	d0e6      	beq.n	8016644 <_printf_common+0xa4>
 8016676:	3601      	adds	r6, #1
 8016678:	e7d9      	b.n	801662e <_printf_common+0x8e>
	...

0801667c <_printf_i>:
 801667c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016680:	460c      	mov	r4, r1
 8016682:	4691      	mov	r9, r2
 8016684:	7e27      	ldrb	r7, [r4, #24]
 8016686:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016688:	2f78      	cmp	r7, #120	; 0x78
 801668a:	4680      	mov	r8, r0
 801668c:	469a      	mov	sl, r3
 801668e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016692:	d807      	bhi.n	80166a4 <_printf_i+0x28>
 8016694:	2f62      	cmp	r7, #98	; 0x62
 8016696:	d80a      	bhi.n	80166ae <_printf_i+0x32>
 8016698:	2f00      	cmp	r7, #0
 801669a:	f000 80d8 	beq.w	801684e <_printf_i+0x1d2>
 801669e:	2f58      	cmp	r7, #88	; 0x58
 80166a0:	f000 80a3 	beq.w	80167ea <_printf_i+0x16e>
 80166a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80166a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80166ac:	e03a      	b.n	8016724 <_printf_i+0xa8>
 80166ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80166b2:	2b15      	cmp	r3, #21
 80166b4:	d8f6      	bhi.n	80166a4 <_printf_i+0x28>
 80166b6:	a001      	add	r0, pc, #4	; (adr r0, 80166bc <_printf_i+0x40>)
 80166b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80166bc:	08016715 	.word	0x08016715
 80166c0:	08016729 	.word	0x08016729
 80166c4:	080166a5 	.word	0x080166a5
 80166c8:	080166a5 	.word	0x080166a5
 80166cc:	080166a5 	.word	0x080166a5
 80166d0:	080166a5 	.word	0x080166a5
 80166d4:	08016729 	.word	0x08016729
 80166d8:	080166a5 	.word	0x080166a5
 80166dc:	080166a5 	.word	0x080166a5
 80166e0:	080166a5 	.word	0x080166a5
 80166e4:	080166a5 	.word	0x080166a5
 80166e8:	08016835 	.word	0x08016835
 80166ec:	08016759 	.word	0x08016759
 80166f0:	08016817 	.word	0x08016817
 80166f4:	080166a5 	.word	0x080166a5
 80166f8:	080166a5 	.word	0x080166a5
 80166fc:	08016857 	.word	0x08016857
 8016700:	080166a5 	.word	0x080166a5
 8016704:	08016759 	.word	0x08016759
 8016708:	080166a5 	.word	0x080166a5
 801670c:	080166a5 	.word	0x080166a5
 8016710:	0801681f 	.word	0x0801681f
 8016714:	680b      	ldr	r3, [r1, #0]
 8016716:	1d1a      	adds	r2, r3, #4
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	600a      	str	r2, [r1, #0]
 801671c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016724:	2301      	movs	r3, #1
 8016726:	e0a3      	b.n	8016870 <_printf_i+0x1f4>
 8016728:	6825      	ldr	r5, [r4, #0]
 801672a:	6808      	ldr	r0, [r1, #0]
 801672c:	062e      	lsls	r6, r5, #24
 801672e:	f100 0304 	add.w	r3, r0, #4
 8016732:	d50a      	bpl.n	801674a <_printf_i+0xce>
 8016734:	6805      	ldr	r5, [r0, #0]
 8016736:	600b      	str	r3, [r1, #0]
 8016738:	2d00      	cmp	r5, #0
 801673a:	da03      	bge.n	8016744 <_printf_i+0xc8>
 801673c:	232d      	movs	r3, #45	; 0x2d
 801673e:	426d      	negs	r5, r5
 8016740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016744:	485e      	ldr	r0, [pc, #376]	; (80168c0 <_printf_i+0x244>)
 8016746:	230a      	movs	r3, #10
 8016748:	e019      	b.n	801677e <_printf_i+0x102>
 801674a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801674e:	6805      	ldr	r5, [r0, #0]
 8016750:	600b      	str	r3, [r1, #0]
 8016752:	bf18      	it	ne
 8016754:	b22d      	sxthne	r5, r5
 8016756:	e7ef      	b.n	8016738 <_printf_i+0xbc>
 8016758:	680b      	ldr	r3, [r1, #0]
 801675a:	6825      	ldr	r5, [r4, #0]
 801675c:	1d18      	adds	r0, r3, #4
 801675e:	6008      	str	r0, [r1, #0]
 8016760:	0628      	lsls	r0, r5, #24
 8016762:	d501      	bpl.n	8016768 <_printf_i+0xec>
 8016764:	681d      	ldr	r5, [r3, #0]
 8016766:	e002      	b.n	801676e <_printf_i+0xf2>
 8016768:	0669      	lsls	r1, r5, #25
 801676a:	d5fb      	bpl.n	8016764 <_printf_i+0xe8>
 801676c:	881d      	ldrh	r5, [r3, #0]
 801676e:	4854      	ldr	r0, [pc, #336]	; (80168c0 <_printf_i+0x244>)
 8016770:	2f6f      	cmp	r7, #111	; 0x6f
 8016772:	bf0c      	ite	eq
 8016774:	2308      	moveq	r3, #8
 8016776:	230a      	movne	r3, #10
 8016778:	2100      	movs	r1, #0
 801677a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801677e:	6866      	ldr	r6, [r4, #4]
 8016780:	60a6      	str	r6, [r4, #8]
 8016782:	2e00      	cmp	r6, #0
 8016784:	bfa2      	ittt	ge
 8016786:	6821      	ldrge	r1, [r4, #0]
 8016788:	f021 0104 	bicge.w	r1, r1, #4
 801678c:	6021      	strge	r1, [r4, #0]
 801678e:	b90d      	cbnz	r5, 8016794 <_printf_i+0x118>
 8016790:	2e00      	cmp	r6, #0
 8016792:	d04d      	beq.n	8016830 <_printf_i+0x1b4>
 8016794:	4616      	mov	r6, r2
 8016796:	fbb5 f1f3 	udiv	r1, r5, r3
 801679a:	fb03 5711 	mls	r7, r3, r1, r5
 801679e:	5dc7      	ldrb	r7, [r0, r7]
 80167a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80167a4:	462f      	mov	r7, r5
 80167a6:	42bb      	cmp	r3, r7
 80167a8:	460d      	mov	r5, r1
 80167aa:	d9f4      	bls.n	8016796 <_printf_i+0x11a>
 80167ac:	2b08      	cmp	r3, #8
 80167ae:	d10b      	bne.n	80167c8 <_printf_i+0x14c>
 80167b0:	6823      	ldr	r3, [r4, #0]
 80167b2:	07df      	lsls	r7, r3, #31
 80167b4:	d508      	bpl.n	80167c8 <_printf_i+0x14c>
 80167b6:	6923      	ldr	r3, [r4, #16]
 80167b8:	6861      	ldr	r1, [r4, #4]
 80167ba:	4299      	cmp	r1, r3
 80167bc:	bfde      	ittt	le
 80167be:	2330      	movle	r3, #48	; 0x30
 80167c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80167c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80167c8:	1b92      	subs	r2, r2, r6
 80167ca:	6122      	str	r2, [r4, #16]
 80167cc:	f8cd a000 	str.w	sl, [sp]
 80167d0:	464b      	mov	r3, r9
 80167d2:	aa03      	add	r2, sp, #12
 80167d4:	4621      	mov	r1, r4
 80167d6:	4640      	mov	r0, r8
 80167d8:	f7ff fee2 	bl	80165a0 <_printf_common>
 80167dc:	3001      	adds	r0, #1
 80167de:	d14c      	bne.n	801687a <_printf_i+0x1fe>
 80167e0:	f04f 30ff 	mov.w	r0, #4294967295
 80167e4:	b004      	add	sp, #16
 80167e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167ea:	4835      	ldr	r0, [pc, #212]	; (80168c0 <_printf_i+0x244>)
 80167ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80167f0:	6823      	ldr	r3, [r4, #0]
 80167f2:	680e      	ldr	r6, [r1, #0]
 80167f4:	061f      	lsls	r7, r3, #24
 80167f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80167fa:	600e      	str	r6, [r1, #0]
 80167fc:	d514      	bpl.n	8016828 <_printf_i+0x1ac>
 80167fe:	07d9      	lsls	r1, r3, #31
 8016800:	bf44      	itt	mi
 8016802:	f043 0320 	orrmi.w	r3, r3, #32
 8016806:	6023      	strmi	r3, [r4, #0]
 8016808:	b91d      	cbnz	r5, 8016812 <_printf_i+0x196>
 801680a:	6823      	ldr	r3, [r4, #0]
 801680c:	f023 0320 	bic.w	r3, r3, #32
 8016810:	6023      	str	r3, [r4, #0]
 8016812:	2310      	movs	r3, #16
 8016814:	e7b0      	b.n	8016778 <_printf_i+0xfc>
 8016816:	6823      	ldr	r3, [r4, #0]
 8016818:	f043 0320 	orr.w	r3, r3, #32
 801681c:	6023      	str	r3, [r4, #0]
 801681e:	2378      	movs	r3, #120	; 0x78
 8016820:	4828      	ldr	r0, [pc, #160]	; (80168c4 <_printf_i+0x248>)
 8016822:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016826:	e7e3      	b.n	80167f0 <_printf_i+0x174>
 8016828:	065e      	lsls	r6, r3, #25
 801682a:	bf48      	it	mi
 801682c:	b2ad      	uxthmi	r5, r5
 801682e:	e7e6      	b.n	80167fe <_printf_i+0x182>
 8016830:	4616      	mov	r6, r2
 8016832:	e7bb      	b.n	80167ac <_printf_i+0x130>
 8016834:	680b      	ldr	r3, [r1, #0]
 8016836:	6826      	ldr	r6, [r4, #0]
 8016838:	6960      	ldr	r0, [r4, #20]
 801683a:	1d1d      	adds	r5, r3, #4
 801683c:	600d      	str	r5, [r1, #0]
 801683e:	0635      	lsls	r5, r6, #24
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	d501      	bpl.n	8016848 <_printf_i+0x1cc>
 8016844:	6018      	str	r0, [r3, #0]
 8016846:	e002      	b.n	801684e <_printf_i+0x1d2>
 8016848:	0671      	lsls	r1, r6, #25
 801684a:	d5fb      	bpl.n	8016844 <_printf_i+0x1c8>
 801684c:	8018      	strh	r0, [r3, #0]
 801684e:	2300      	movs	r3, #0
 8016850:	6123      	str	r3, [r4, #16]
 8016852:	4616      	mov	r6, r2
 8016854:	e7ba      	b.n	80167cc <_printf_i+0x150>
 8016856:	680b      	ldr	r3, [r1, #0]
 8016858:	1d1a      	adds	r2, r3, #4
 801685a:	600a      	str	r2, [r1, #0]
 801685c:	681e      	ldr	r6, [r3, #0]
 801685e:	6862      	ldr	r2, [r4, #4]
 8016860:	2100      	movs	r1, #0
 8016862:	4630      	mov	r0, r6
 8016864:	f7ed fccc 	bl	8004200 <memchr>
 8016868:	b108      	cbz	r0, 801686e <_printf_i+0x1f2>
 801686a:	1b80      	subs	r0, r0, r6
 801686c:	6060      	str	r0, [r4, #4]
 801686e:	6863      	ldr	r3, [r4, #4]
 8016870:	6123      	str	r3, [r4, #16]
 8016872:	2300      	movs	r3, #0
 8016874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016878:	e7a8      	b.n	80167cc <_printf_i+0x150>
 801687a:	6923      	ldr	r3, [r4, #16]
 801687c:	4632      	mov	r2, r6
 801687e:	4649      	mov	r1, r9
 8016880:	4640      	mov	r0, r8
 8016882:	47d0      	blx	sl
 8016884:	3001      	adds	r0, #1
 8016886:	d0ab      	beq.n	80167e0 <_printf_i+0x164>
 8016888:	6823      	ldr	r3, [r4, #0]
 801688a:	079b      	lsls	r3, r3, #30
 801688c:	d413      	bmi.n	80168b6 <_printf_i+0x23a>
 801688e:	68e0      	ldr	r0, [r4, #12]
 8016890:	9b03      	ldr	r3, [sp, #12]
 8016892:	4298      	cmp	r0, r3
 8016894:	bfb8      	it	lt
 8016896:	4618      	movlt	r0, r3
 8016898:	e7a4      	b.n	80167e4 <_printf_i+0x168>
 801689a:	2301      	movs	r3, #1
 801689c:	4632      	mov	r2, r6
 801689e:	4649      	mov	r1, r9
 80168a0:	4640      	mov	r0, r8
 80168a2:	47d0      	blx	sl
 80168a4:	3001      	adds	r0, #1
 80168a6:	d09b      	beq.n	80167e0 <_printf_i+0x164>
 80168a8:	3501      	adds	r5, #1
 80168aa:	68e3      	ldr	r3, [r4, #12]
 80168ac:	9903      	ldr	r1, [sp, #12]
 80168ae:	1a5b      	subs	r3, r3, r1
 80168b0:	42ab      	cmp	r3, r5
 80168b2:	dcf2      	bgt.n	801689a <_printf_i+0x21e>
 80168b4:	e7eb      	b.n	801688e <_printf_i+0x212>
 80168b6:	2500      	movs	r5, #0
 80168b8:	f104 0619 	add.w	r6, r4, #25
 80168bc:	e7f5      	b.n	80168aa <_printf_i+0x22e>
 80168be:	bf00      	nop
 80168c0:	0801abad 	.word	0x0801abad
 80168c4:	0801abbe 	.word	0x0801abbe

080168c8 <_sbrk_r>:
 80168c8:	b538      	push	{r3, r4, r5, lr}
 80168ca:	4d06      	ldr	r5, [pc, #24]	; (80168e4 <_sbrk_r+0x1c>)
 80168cc:	2300      	movs	r3, #0
 80168ce:	4604      	mov	r4, r0
 80168d0:	4608      	mov	r0, r1
 80168d2:	602b      	str	r3, [r5, #0]
 80168d4:	f7ee f8c2 	bl	8004a5c <_sbrk>
 80168d8:	1c43      	adds	r3, r0, #1
 80168da:	d102      	bne.n	80168e2 <_sbrk_r+0x1a>
 80168dc:	682b      	ldr	r3, [r5, #0]
 80168de:	b103      	cbz	r3, 80168e2 <_sbrk_r+0x1a>
 80168e0:	6023      	str	r3, [r4, #0]
 80168e2:	bd38      	pop	{r3, r4, r5, pc}
 80168e4:	20008444 	.word	0x20008444

080168e8 <__sread>:
 80168e8:	b510      	push	{r4, lr}
 80168ea:	460c      	mov	r4, r1
 80168ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80168f0:	f000 f8a8 	bl	8016a44 <_read_r>
 80168f4:	2800      	cmp	r0, #0
 80168f6:	bfab      	itete	ge
 80168f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80168fa:	89a3      	ldrhlt	r3, [r4, #12]
 80168fc:	181b      	addge	r3, r3, r0
 80168fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016902:	bfac      	ite	ge
 8016904:	6563      	strge	r3, [r4, #84]	; 0x54
 8016906:	81a3      	strhlt	r3, [r4, #12]
 8016908:	bd10      	pop	{r4, pc}

0801690a <__swrite>:
 801690a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801690e:	461f      	mov	r7, r3
 8016910:	898b      	ldrh	r3, [r1, #12]
 8016912:	05db      	lsls	r3, r3, #23
 8016914:	4605      	mov	r5, r0
 8016916:	460c      	mov	r4, r1
 8016918:	4616      	mov	r6, r2
 801691a:	d505      	bpl.n	8016928 <__swrite+0x1e>
 801691c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016920:	2302      	movs	r3, #2
 8016922:	2200      	movs	r2, #0
 8016924:	f000 f870 	bl	8016a08 <_lseek_r>
 8016928:	89a3      	ldrh	r3, [r4, #12]
 801692a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801692e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016932:	81a3      	strh	r3, [r4, #12]
 8016934:	4632      	mov	r2, r6
 8016936:	463b      	mov	r3, r7
 8016938:	4628      	mov	r0, r5
 801693a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801693e:	f000 b817 	b.w	8016970 <_write_r>

08016942 <__sseek>:
 8016942:	b510      	push	{r4, lr}
 8016944:	460c      	mov	r4, r1
 8016946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801694a:	f000 f85d 	bl	8016a08 <_lseek_r>
 801694e:	1c43      	adds	r3, r0, #1
 8016950:	89a3      	ldrh	r3, [r4, #12]
 8016952:	bf15      	itete	ne
 8016954:	6560      	strne	r0, [r4, #84]	; 0x54
 8016956:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801695a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801695e:	81a3      	strheq	r3, [r4, #12]
 8016960:	bf18      	it	ne
 8016962:	81a3      	strhne	r3, [r4, #12]
 8016964:	bd10      	pop	{r4, pc}

08016966 <__sclose>:
 8016966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801696a:	f000 b81b 	b.w	80169a4 <_close_r>
	...

08016970 <_write_r>:
 8016970:	b538      	push	{r3, r4, r5, lr}
 8016972:	4d07      	ldr	r5, [pc, #28]	; (8016990 <_write_r+0x20>)
 8016974:	4604      	mov	r4, r0
 8016976:	4608      	mov	r0, r1
 8016978:	4611      	mov	r1, r2
 801697a:	2200      	movs	r2, #0
 801697c:	602a      	str	r2, [r5, #0]
 801697e:	461a      	mov	r2, r3
 8016980:	f7ee f852 	bl	8004a28 <_write>
 8016984:	1c43      	adds	r3, r0, #1
 8016986:	d102      	bne.n	801698e <_write_r+0x1e>
 8016988:	682b      	ldr	r3, [r5, #0]
 801698a:	b103      	cbz	r3, 801698e <_write_r+0x1e>
 801698c:	6023      	str	r3, [r4, #0]
 801698e:	bd38      	pop	{r3, r4, r5, pc}
 8016990:	20008444 	.word	0x20008444

08016994 <abort>:
 8016994:	b508      	push	{r3, lr}
 8016996:	2006      	movs	r0, #6
 8016998:	f000 f88e 	bl	8016ab8 <raise>
 801699c:	2001      	movs	r0, #1
 801699e:	f7ee f82d 	bl	80049fc <_exit>
	...

080169a4 <_close_r>:
 80169a4:	b538      	push	{r3, r4, r5, lr}
 80169a6:	4d06      	ldr	r5, [pc, #24]	; (80169c0 <_close_r+0x1c>)
 80169a8:	2300      	movs	r3, #0
 80169aa:	4604      	mov	r4, r0
 80169ac:	4608      	mov	r0, r1
 80169ae:	602b      	str	r3, [r5, #0]
 80169b0:	f7ee f848 	bl	8004a44 <_close>
 80169b4:	1c43      	adds	r3, r0, #1
 80169b6:	d102      	bne.n	80169be <_close_r+0x1a>
 80169b8:	682b      	ldr	r3, [r5, #0]
 80169ba:	b103      	cbz	r3, 80169be <_close_r+0x1a>
 80169bc:	6023      	str	r3, [r4, #0]
 80169be:	bd38      	pop	{r3, r4, r5, pc}
 80169c0:	20008444 	.word	0x20008444

080169c4 <_fstat_r>:
 80169c4:	b538      	push	{r3, r4, r5, lr}
 80169c6:	4d07      	ldr	r5, [pc, #28]	; (80169e4 <_fstat_r+0x20>)
 80169c8:	2300      	movs	r3, #0
 80169ca:	4604      	mov	r4, r0
 80169cc:	4608      	mov	r0, r1
 80169ce:	4611      	mov	r1, r2
 80169d0:	602b      	str	r3, [r5, #0]
 80169d2:	f7ee f83a 	bl	8004a4a <_fstat>
 80169d6:	1c43      	adds	r3, r0, #1
 80169d8:	d102      	bne.n	80169e0 <_fstat_r+0x1c>
 80169da:	682b      	ldr	r3, [r5, #0]
 80169dc:	b103      	cbz	r3, 80169e0 <_fstat_r+0x1c>
 80169de:	6023      	str	r3, [r4, #0]
 80169e0:	bd38      	pop	{r3, r4, r5, pc}
 80169e2:	bf00      	nop
 80169e4:	20008444 	.word	0x20008444

080169e8 <_isatty_r>:
 80169e8:	b538      	push	{r3, r4, r5, lr}
 80169ea:	4d06      	ldr	r5, [pc, #24]	; (8016a04 <_isatty_r+0x1c>)
 80169ec:	2300      	movs	r3, #0
 80169ee:	4604      	mov	r4, r0
 80169f0:	4608      	mov	r0, r1
 80169f2:	602b      	str	r3, [r5, #0]
 80169f4:	f7ee f82e 	bl	8004a54 <_isatty>
 80169f8:	1c43      	adds	r3, r0, #1
 80169fa:	d102      	bne.n	8016a02 <_isatty_r+0x1a>
 80169fc:	682b      	ldr	r3, [r5, #0]
 80169fe:	b103      	cbz	r3, 8016a02 <_isatty_r+0x1a>
 8016a00:	6023      	str	r3, [r4, #0]
 8016a02:	bd38      	pop	{r3, r4, r5, pc}
 8016a04:	20008444 	.word	0x20008444

08016a08 <_lseek_r>:
 8016a08:	b538      	push	{r3, r4, r5, lr}
 8016a0a:	4d07      	ldr	r5, [pc, #28]	; (8016a28 <_lseek_r+0x20>)
 8016a0c:	4604      	mov	r4, r0
 8016a0e:	4608      	mov	r0, r1
 8016a10:	4611      	mov	r1, r2
 8016a12:	2200      	movs	r2, #0
 8016a14:	602a      	str	r2, [r5, #0]
 8016a16:	461a      	mov	r2, r3
 8016a18:	f7ee f81e 	bl	8004a58 <_lseek>
 8016a1c:	1c43      	adds	r3, r0, #1
 8016a1e:	d102      	bne.n	8016a26 <_lseek_r+0x1e>
 8016a20:	682b      	ldr	r3, [r5, #0]
 8016a22:	b103      	cbz	r3, 8016a26 <_lseek_r+0x1e>
 8016a24:	6023      	str	r3, [r4, #0]
 8016a26:	bd38      	pop	{r3, r4, r5, pc}
 8016a28:	20008444 	.word	0x20008444

08016a2c <__malloc_lock>:
 8016a2c:	4801      	ldr	r0, [pc, #4]	; (8016a34 <__malloc_lock+0x8>)
 8016a2e:	f7ff bb45 	b.w	80160bc <__retarget_lock_acquire_recursive>
 8016a32:	bf00      	nop
 8016a34:	2000844c 	.word	0x2000844c

08016a38 <__malloc_unlock>:
 8016a38:	4801      	ldr	r0, [pc, #4]	; (8016a40 <__malloc_unlock+0x8>)
 8016a3a:	f7ff bb40 	b.w	80160be <__retarget_lock_release_recursive>
 8016a3e:	bf00      	nop
 8016a40:	2000844c 	.word	0x2000844c

08016a44 <_read_r>:
 8016a44:	b538      	push	{r3, r4, r5, lr}
 8016a46:	4d07      	ldr	r5, [pc, #28]	; (8016a64 <_read_r+0x20>)
 8016a48:	4604      	mov	r4, r0
 8016a4a:	4608      	mov	r0, r1
 8016a4c:	4611      	mov	r1, r2
 8016a4e:	2200      	movs	r2, #0
 8016a50:	602a      	str	r2, [r5, #0]
 8016a52:	461a      	mov	r2, r3
 8016a54:	f7ed ffd8 	bl	8004a08 <_read>
 8016a58:	1c43      	adds	r3, r0, #1
 8016a5a:	d102      	bne.n	8016a62 <_read_r+0x1e>
 8016a5c:	682b      	ldr	r3, [r5, #0]
 8016a5e:	b103      	cbz	r3, 8016a62 <_read_r+0x1e>
 8016a60:	6023      	str	r3, [r4, #0]
 8016a62:	bd38      	pop	{r3, r4, r5, pc}
 8016a64:	20008444 	.word	0x20008444

08016a68 <_raise_r>:
 8016a68:	291f      	cmp	r1, #31
 8016a6a:	b538      	push	{r3, r4, r5, lr}
 8016a6c:	4604      	mov	r4, r0
 8016a6e:	460d      	mov	r5, r1
 8016a70:	d904      	bls.n	8016a7c <_raise_r+0x14>
 8016a72:	2316      	movs	r3, #22
 8016a74:	6003      	str	r3, [r0, #0]
 8016a76:	f04f 30ff 	mov.w	r0, #4294967295
 8016a7a:	bd38      	pop	{r3, r4, r5, pc}
 8016a7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016a7e:	b112      	cbz	r2, 8016a86 <_raise_r+0x1e>
 8016a80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016a84:	b94b      	cbnz	r3, 8016a9a <_raise_r+0x32>
 8016a86:	4620      	mov	r0, r4
 8016a88:	f000 f830 	bl	8016aec <_getpid_r>
 8016a8c:	462a      	mov	r2, r5
 8016a8e:	4601      	mov	r1, r0
 8016a90:	4620      	mov	r0, r4
 8016a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016a96:	f000 b817 	b.w	8016ac8 <_kill_r>
 8016a9a:	2b01      	cmp	r3, #1
 8016a9c:	d00a      	beq.n	8016ab4 <_raise_r+0x4c>
 8016a9e:	1c59      	adds	r1, r3, #1
 8016aa0:	d103      	bne.n	8016aaa <_raise_r+0x42>
 8016aa2:	2316      	movs	r3, #22
 8016aa4:	6003      	str	r3, [r0, #0]
 8016aa6:	2001      	movs	r0, #1
 8016aa8:	e7e7      	b.n	8016a7a <_raise_r+0x12>
 8016aaa:	2400      	movs	r4, #0
 8016aac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016ab0:	4628      	mov	r0, r5
 8016ab2:	4798      	blx	r3
 8016ab4:	2000      	movs	r0, #0
 8016ab6:	e7e0      	b.n	8016a7a <_raise_r+0x12>

08016ab8 <raise>:
 8016ab8:	4b02      	ldr	r3, [pc, #8]	; (8016ac4 <raise+0xc>)
 8016aba:	4601      	mov	r1, r0
 8016abc:	6818      	ldr	r0, [r3, #0]
 8016abe:	f7ff bfd3 	b.w	8016a68 <_raise_r>
 8016ac2:	bf00      	nop
 8016ac4:	2000001c 	.word	0x2000001c

08016ac8 <_kill_r>:
 8016ac8:	b538      	push	{r3, r4, r5, lr}
 8016aca:	4d07      	ldr	r5, [pc, #28]	; (8016ae8 <_kill_r+0x20>)
 8016acc:	2300      	movs	r3, #0
 8016ace:	4604      	mov	r4, r0
 8016ad0:	4608      	mov	r0, r1
 8016ad2:	4611      	mov	r1, r2
 8016ad4:	602b      	str	r3, [r5, #0]
 8016ad6:	f7ed ff89 	bl	80049ec <_kill>
 8016ada:	1c43      	adds	r3, r0, #1
 8016adc:	d102      	bne.n	8016ae4 <_kill_r+0x1c>
 8016ade:	682b      	ldr	r3, [r5, #0]
 8016ae0:	b103      	cbz	r3, 8016ae4 <_kill_r+0x1c>
 8016ae2:	6023      	str	r3, [r4, #0]
 8016ae4:	bd38      	pop	{r3, r4, r5, pc}
 8016ae6:	bf00      	nop
 8016ae8:	20008444 	.word	0x20008444

08016aec <_getpid_r>:
 8016aec:	f7ed bf7c 	b.w	80049e8 <_getpid>

08016af0 <_init>:
 8016af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016af2:	bf00      	nop
 8016af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016af6:	bc08      	pop	{r3}
 8016af8:	469e      	mov	lr, r3
 8016afa:	4770      	bx	lr

08016afc <_fini>:
 8016afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016afe:	bf00      	nop
 8016b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b02:	bc08      	pop	{r3}
 8016b04:	469e      	mov	lr, r3
 8016b06:	4770      	bx	lr
