
demoprog_discovery_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca68  08010190  08010190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b1c  0801cbf8  0801cbf8  0001cbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020714  08020714  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08020714  08020714  00020714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802071c  0802071c  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802071c  0802071c  0002071c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020720  08020720  00020720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08020724  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007204  20000078  0802079c  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000727c  0802079c  0003727c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042c02  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007d88  00000000  00000000  00072caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  0007aa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ba0  00000000  00000000  0007beb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032cea  00000000  00000000  0007da58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003508e  00000000  00000000  000b0742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef67c  00000000  00000000  000e57d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d4e4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004480  00000000  00000000  001d4ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00017024  00000000  00000000  001d9320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010190 <__do_global_dtors_aux>:
 8010190:	b510      	push	{r4, lr}
 8010192:	4c05      	ldr	r4, [pc, #20]	; (80101a8 <__do_global_dtors_aux+0x18>)
 8010194:	7823      	ldrb	r3, [r4, #0]
 8010196:	b933      	cbnz	r3, 80101a6 <__do_global_dtors_aux+0x16>
 8010198:	4b04      	ldr	r3, [pc, #16]	; (80101ac <__do_global_dtors_aux+0x1c>)
 801019a:	b113      	cbz	r3, 80101a2 <__do_global_dtors_aux+0x12>
 801019c:	4804      	ldr	r0, [pc, #16]	; (80101b0 <__do_global_dtors_aux+0x20>)
 801019e:	f3af 8000 	nop.w
 80101a2:	2301      	movs	r3, #1
 80101a4:	7023      	strb	r3, [r4, #0]
 80101a6:	bd10      	pop	{r4, pc}
 80101a8:	20000078 	.word	0x20000078
 80101ac:	00000000 	.word	0x00000000
 80101b0:	0801cbe0 	.word	0x0801cbe0

080101b4 <frame_dummy>:
 80101b4:	b508      	push	{r3, lr}
 80101b6:	4b03      	ldr	r3, [pc, #12]	; (80101c4 <frame_dummy+0x10>)
 80101b8:	b11b      	cbz	r3, 80101c2 <frame_dummy+0xe>
 80101ba:	4903      	ldr	r1, [pc, #12]	; (80101c8 <frame_dummy+0x14>)
 80101bc:	4803      	ldr	r0, [pc, #12]	; (80101cc <frame_dummy+0x18>)
 80101be:	f3af 8000 	nop.w
 80101c2:	bd08      	pop	{r3, pc}
 80101c4:	00000000 	.word	0x00000000
 80101c8:	2000007c 	.word	0x2000007c
 80101cc:	0801cbe0 	.word	0x0801cbe0

080101d0 <strcmp>:
 80101d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101d8:	2a01      	cmp	r2, #1
 80101da:	bf28      	it	cs
 80101dc:	429a      	cmpcs	r2, r3
 80101de:	d0f7      	beq.n	80101d0 <strcmp>
 80101e0:	1ad0      	subs	r0, r2, r3
 80101e2:	4770      	bx	lr

080101e4 <strlen>:
 80101e4:	4603      	mov	r3, r0
 80101e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101ea:	2a00      	cmp	r2, #0
 80101ec:	d1fb      	bne.n	80101e6 <strlen+0x2>
 80101ee:	1a18      	subs	r0, r3, r0
 80101f0:	3801      	subs	r0, #1
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <__aeabi_uldivmod>:
 80102a0:	b953      	cbnz	r3, 80102b8 <__aeabi_uldivmod+0x18>
 80102a2:	b94a      	cbnz	r2, 80102b8 <__aeabi_uldivmod+0x18>
 80102a4:	2900      	cmp	r1, #0
 80102a6:	bf08      	it	eq
 80102a8:	2800      	cmpeq	r0, #0
 80102aa:	bf1c      	itt	ne
 80102ac:	f04f 31ff 	movne.w	r1, #4294967295
 80102b0:	f04f 30ff 	movne.w	r0, #4294967295
 80102b4:	f000 b96e 	b.w	8010594 <__aeabi_idiv0>
 80102b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80102bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80102c0:	f000 f806 	bl	80102d0 <__udivmoddi4>
 80102c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80102c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80102cc:	b004      	add	sp, #16
 80102ce:	4770      	bx	lr

080102d0 <__udivmoddi4>:
 80102d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102d4:	9d08      	ldr	r5, [sp, #32]
 80102d6:	4604      	mov	r4, r0
 80102d8:	468c      	mov	ip, r1
 80102da:	2b00      	cmp	r3, #0
 80102dc:	f040 8083 	bne.w	80103e6 <__udivmoddi4+0x116>
 80102e0:	428a      	cmp	r2, r1
 80102e2:	4617      	mov	r7, r2
 80102e4:	d947      	bls.n	8010376 <__udivmoddi4+0xa6>
 80102e6:	fab2 f282 	clz	r2, r2
 80102ea:	b142      	cbz	r2, 80102fe <__udivmoddi4+0x2e>
 80102ec:	f1c2 0020 	rsb	r0, r2, #32
 80102f0:	fa24 f000 	lsr.w	r0, r4, r0
 80102f4:	4091      	lsls	r1, r2
 80102f6:	4097      	lsls	r7, r2
 80102f8:	ea40 0c01 	orr.w	ip, r0, r1
 80102fc:	4094      	lsls	r4, r2
 80102fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8010302:	0c23      	lsrs	r3, r4, #16
 8010304:	fbbc f6f8 	udiv	r6, ip, r8
 8010308:	fa1f fe87 	uxth.w	lr, r7
 801030c:	fb08 c116 	mls	r1, r8, r6, ip
 8010310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010314:	fb06 f10e 	mul.w	r1, r6, lr
 8010318:	4299      	cmp	r1, r3
 801031a:	d909      	bls.n	8010330 <__udivmoddi4+0x60>
 801031c:	18fb      	adds	r3, r7, r3
 801031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8010322:	f080 8119 	bcs.w	8010558 <__udivmoddi4+0x288>
 8010326:	4299      	cmp	r1, r3
 8010328:	f240 8116 	bls.w	8010558 <__udivmoddi4+0x288>
 801032c:	3e02      	subs	r6, #2
 801032e:	443b      	add	r3, r7
 8010330:	1a5b      	subs	r3, r3, r1
 8010332:	b2a4      	uxth	r4, r4
 8010334:	fbb3 f0f8 	udiv	r0, r3, r8
 8010338:	fb08 3310 	mls	r3, r8, r0, r3
 801033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8010340:	fb00 fe0e 	mul.w	lr, r0, lr
 8010344:	45a6      	cmp	lr, r4
 8010346:	d909      	bls.n	801035c <__udivmoddi4+0x8c>
 8010348:	193c      	adds	r4, r7, r4
 801034a:	f100 33ff 	add.w	r3, r0, #4294967295
 801034e:	f080 8105 	bcs.w	801055c <__udivmoddi4+0x28c>
 8010352:	45a6      	cmp	lr, r4
 8010354:	f240 8102 	bls.w	801055c <__udivmoddi4+0x28c>
 8010358:	3802      	subs	r0, #2
 801035a:	443c      	add	r4, r7
 801035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010360:	eba4 040e 	sub.w	r4, r4, lr
 8010364:	2600      	movs	r6, #0
 8010366:	b11d      	cbz	r5, 8010370 <__udivmoddi4+0xa0>
 8010368:	40d4      	lsrs	r4, r2
 801036a:	2300      	movs	r3, #0
 801036c:	e9c5 4300 	strd	r4, r3, [r5]
 8010370:	4631      	mov	r1, r6
 8010372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010376:	b902      	cbnz	r2, 801037a <__udivmoddi4+0xaa>
 8010378:	deff      	udf	#255	; 0xff
 801037a:	fab2 f282 	clz	r2, r2
 801037e:	2a00      	cmp	r2, #0
 8010380:	d150      	bne.n	8010424 <__udivmoddi4+0x154>
 8010382:	1bcb      	subs	r3, r1, r7
 8010384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010388:	fa1f f887 	uxth.w	r8, r7
 801038c:	2601      	movs	r6, #1
 801038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8010392:	0c21      	lsrs	r1, r4, #16
 8010394:	fb0e 331c 	mls	r3, lr, ip, r3
 8010398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801039c:	fb08 f30c 	mul.w	r3, r8, ip
 80103a0:	428b      	cmp	r3, r1
 80103a2:	d907      	bls.n	80103b4 <__udivmoddi4+0xe4>
 80103a4:	1879      	adds	r1, r7, r1
 80103a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80103aa:	d202      	bcs.n	80103b2 <__udivmoddi4+0xe2>
 80103ac:	428b      	cmp	r3, r1
 80103ae:	f200 80e9 	bhi.w	8010584 <__udivmoddi4+0x2b4>
 80103b2:	4684      	mov	ip, r0
 80103b4:	1ac9      	subs	r1, r1, r3
 80103b6:	b2a3      	uxth	r3, r4
 80103b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80103bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80103c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80103c4:	fb08 f800 	mul.w	r8, r8, r0
 80103c8:	45a0      	cmp	r8, r4
 80103ca:	d907      	bls.n	80103dc <__udivmoddi4+0x10c>
 80103cc:	193c      	adds	r4, r7, r4
 80103ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80103d2:	d202      	bcs.n	80103da <__udivmoddi4+0x10a>
 80103d4:	45a0      	cmp	r8, r4
 80103d6:	f200 80d9 	bhi.w	801058c <__udivmoddi4+0x2bc>
 80103da:	4618      	mov	r0, r3
 80103dc:	eba4 0408 	sub.w	r4, r4, r8
 80103e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80103e4:	e7bf      	b.n	8010366 <__udivmoddi4+0x96>
 80103e6:	428b      	cmp	r3, r1
 80103e8:	d909      	bls.n	80103fe <__udivmoddi4+0x12e>
 80103ea:	2d00      	cmp	r5, #0
 80103ec:	f000 80b1 	beq.w	8010552 <__udivmoddi4+0x282>
 80103f0:	2600      	movs	r6, #0
 80103f2:	e9c5 0100 	strd	r0, r1, [r5]
 80103f6:	4630      	mov	r0, r6
 80103f8:	4631      	mov	r1, r6
 80103fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103fe:	fab3 f683 	clz	r6, r3
 8010402:	2e00      	cmp	r6, #0
 8010404:	d14a      	bne.n	801049c <__udivmoddi4+0x1cc>
 8010406:	428b      	cmp	r3, r1
 8010408:	d302      	bcc.n	8010410 <__udivmoddi4+0x140>
 801040a:	4282      	cmp	r2, r0
 801040c:	f200 80b8 	bhi.w	8010580 <__udivmoddi4+0x2b0>
 8010410:	1a84      	subs	r4, r0, r2
 8010412:	eb61 0103 	sbc.w	r1, r1, r3
 8010416:	2001      	movs	r0, #1
 8010418:	468c      	mov	ip, r1
 801041a:	2d00      	cmp	r5, #0
 801041c:	d0a8      	beq.n	8010370 <__udivmoddi4+0xa0>
 801041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8010422:	e7a5      	b.n	8010370 <__udivmoddi4+0xa0>
 8010424:	f1c2 0320 	rsb	r3, r2, #32
 8010428:	fa20 f603 	lsr.w	r6, r0, r3
 801042c:	4097      	lsls	r7, r2
 801042e:	fa01 f002 	lsl.w	r0, r1, r2
 8010432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8010436:	40d9      	lsrs	r1, r3
 8010438:	4330      	orrs	r0, r6
 801043a:	0c03      	lsrs	r3, r0, #16
 801043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8010440:	fa1f f887 	uxth.w	r8, r7
 8010444:	fb0e 1116 	mls	r1, lr, r6, r1
 8010448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801044c:	fb06 f108 	mul.w	r1, r6, r8
 8010450:	4299      	cmp	r1, r3
 8010452:	fa04 f402 	lsl.w	r4, r4, r2
 8010456:	d909      	bls.n	801046c <__udivmoddi4+0x19c>
 8010458:	18fb      	adds	r3, r7, r3
 801045a:	f106 3cff 	add.w	ip, r6, #4294967295
 801045e:	f080 808d 	bcs.w	801057c <__udivmoddi4+0x2ac>
 8010462:	4299      	cmp	r1, r3
 8010464:	f240 808a 	bls.w	801057c <__udivmoddi4+0x2ac>
 8010468:	3e02      	subs	r6, #2
 801046a:	443b      	add	r3, r7
 801046c:	1a5b      	subs	r3, r3, r1
 801046e:	b281      	uxth	r1, r0
 8010470:	fbb3 f0fe 	udiv	r0, r3, lr
 8010474:	fb0e 3310 	mls	r3, lr, r0, r3
 8010478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801047c:	fb00 f308 	mul.w	r3, r0, r8
 8010480:	428b      	cmp	r3, r1
 8010482:	d907      	bls.n	8010494 <__udivmoddi4+0x1c4>
 8010484:	1879      	adds	r1, r7, r1
 8010486:	f100 3cff 	add.w	ip, r0, #4294967295
 801048a:	d273      	bcs.n	8010574 <__udivmoddi4+0x2a4>
 801048c:	428b      	cmp	r3, r1
 801048e:	d971      	bls.n	8010574 <__udivmoddi4+0x2a4>
 8010490:	3802      	subs	r0, #2
 8010492:	4439      	add	r1, r7
 8010494:	1acb      	subs	r3, r1, r3
 8010496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 801049a:	e778      	b.n	801038e <__udivmoddi4+0xbe>
 801049c:	f1c6 0c20 	rsb	ip, r6, #32
 80104a0:	fa03 f406 	lsl.w	r4, r3, r6
 80104a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80104a8:	431c      	orrs	r4, r3
 80104aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80104ae:	fa01 f306 	lsl.w	r3, r1, r6
 80104b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80104b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80104ba:	431f      	orrs	r7, r3
 80104bc:	0c3b      	lsrs	r3, r7, #16
 80104be:	fbb1 f9fe 	udiv	r9, r1, lr
 80104c2:	fa1f f884 	uxth.w	r8, r4
 80104c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80104ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80104ce:	fb09 fa08 	mul.w	sl, r9, r8
 80104d2:	458a      	cmp	sl, r1
 80104d4:	fa02 f206 	lsl.w	r2, r2, r6
 80104d8:	fa00 f306 	lsl.w	r3, r0, r6
 80104dc:	d908      	bls.n	80104f0 <__udivmoddi4+0x220>
 80104de:	1861      	adds	r1, r4, r1
 80104e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80104e4:	d248      	bcs.n	8010578 <__udivmoddi4+0x2a8>
 80104e6:	458a      	cmp	sl, r1
 80104e8:	d946      	bls.n	8010578 <__udivmoddi4+0x2a8>
 80104ea:	f1a9 0902 	sub.w	r9, r9, #2
 80104ee:	4421      	add	r1, r4
 80104f0:	eba1 010a 	sub.w	r1, r1, sl
 80104f4:	b2bf      	uxth	r7, r7
 80104f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80104fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80104fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8010502:	fb00 f808 	mul.w	r8, r0, r8
 8010506:	45b8      	cmp	r8, r7
 8010508:	d907      	bls.n	801051a <__udivmoddi4+0x24a>
 801050a:	19e7      	adds	r7, r4, r7
 801050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8010510:	d22e      	bcs.n	8010570 <__udivmoddi4+0x2a0>
 8010512:	45b8      	cmp	r8, r7
 8010514:	d92c      	bls.n	8010570 <__udivmoddi4+0x2a0>
 8010516:	3802      	subs	r0, #2
 8010518:	4427      	add	r7, r4
 801051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 801051e:	eba7 0708 	sub.w	r7, r7, r8
 8010522:	fba0 8902 	umull	r8, r9, r0, r2
 8010526:	454f      	cmp	r7, r9
 8010528:	46c6      	mov	lr, r8
 801052a:	4649      	mov	r1, r9
 801052c:	d31a      	bcc.n	8010564 <__udivmoddi4+0x294>
 801052e:	d017      	beq.n	8010560 <__udivmoddi4+0x290>
 8010530:	b15d      	cbz	r5, 801054a <__udivmoddi4+0x27a>
 8010532:	ebb3 020e 	subs.w	r2, r3, lr
 8010536:	eb67 0701 	sbc.w	r7, r7, r1
 801053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 801053e:	40f2      	lsrs	r2, r6
 8010540:	ea4c 0202 	orr.w	r2, ip, r2
 8010544:	40f7      	lsrs	r7, r6
 8010546:	e9c5 2700 	strd	r2, r7, [r5]
 801054a:	2600      	movs	r6, #0
 801054c:	4631      	mov	r1, r6
 801054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010552:	462e      	mov	r6, r5
 8010554:	4628      	mov	r0, r5
 8010556:	e70b      	b.n	8010370 <__udivmoddi4+0xa0>
 8010558:	4606      	mov	r6, r0
 801055a:	e6e9      	b.n	8010330 <__udivmoddi4+0x60>
 801055c:	4618      	mov	r0, r3
 801055e:	e6fd      	b.n	801035c <__udivmoddi4+0x8c>
 8010560:	4543      	cmp	r3, r8
 8010562:	d2e5      	bcs.n	8010530 <__udivmoddi4+0x260>
 8010564:	ebb8 0e02 	subs.w	lr, r8, r2
 8010568:	eb69 0104 	sbc.w	r1, r9, r4
 801056c:	3801      	subs	r0, #1
 801056e:	e7df      	b.n	8010530 <__udivmoddi4+0x260>
 8010570:	4608      	mov	r0, r1
 8010572:	e7d2      	b.n	801051a <__udivmoddi4+0x24a>
 8010574:	4660      	mov	r0, ip
 8010576:	e78d      	b.n	8010494 <__udivmoddi4+0x1c4>
 8010578:	4681      	mov	r9, r0
 801057a:	e7b9      	b.n	80104f0 <__udivmoddi4+0x220>
 801057c:	4666      	mov	r6, ip
 801057e:	e775      	b.n	801046c <__udivmoddi4+0x19c>
 8010580:	4630      	mov	r0, r6
 8010582:	e74a      	b.n	801041a <__udivmoddi4+0x14a>
 8010584:	f1ac 0c02 	sub.w	ip, ip, #2
 8010588:	4439      	add	r1, r7
 801058a:	e713      	b.n	80103b4 <__udivmoddi4+0xe4>
 801058c:	3802      	subs	r0, #2
 801058e:	443c      	add	r4, r7
 8010590:	e724      	b.n	80103dc <__udivmoddi4+0x10c>
 8010592:	bf00      	nop

08010594 <__aeabi_idiv0>:
 8010594:	4770      	bx	lr
 8010596:	bf00      	nop

08010598 <AppInit>:
**            software program initialization.
** \return    none.
**
****************************************************************************************/
void AppInit(void)
{
 8010598:	b508      	push	{r3, lr}
  /* Initialize the timer driver. */
  TimerInit();
 801059a:	f000 f889 	bl	80106b0 <TimerInit>
  /* Initialize the led driver. */
  LedInit();
 801059e:	f000 f82f 	bl	8010600 <LedInit>
  /* Http webserver Init */
  httpd_init();
 80105a2:	f002 f9c7 	bl	8012934 <httpd_init>
} /*** end of AppInit ***/
 80105a6:	bd08      	pop	{r3, pc}

080105a8 <AppTask>:
**            continuously in the program loop.
** \return    none.
**
****************************************************************************************/
void AppTask(void)
{
 80105a8:	b508      	push	{r3, lr}
  /* Toggle LED with a fixed frequency. */
  LedToggle();
 80105aa:	f000 f849 	bl	8010640 <LedToggle>
  /* check for bootloader activation request */
  BootComCheckActivationRequest();
 80105ae:	f000 f823 	bl	80105f8 <BootComCheckActivationRequest>
} /*** end of AppTask ***/
 80105b2:	bd08      	pop	{r3, pc}

080105b4 <BootActivate>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80105b4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80105b8:	4905      	ldr	r1, [pc, #20]	; (80105d0 <BootActivate+0x1c>)
 80105ba:	68ca      	ldr	r2, [r1, #12]
 80105bc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80105c0:	4b04      	ldr	r3, [pc, #16]	; (80105d4 <BootActivate+0x20>)
 80105c2:	4313      	orrs	r3, r2
 80105c4:	60cb      	str	r3, [r1, #12]
 80105c6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80105ca:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80105cc:	e7fd      	b.n	80105ca <BootActivate+0x16>
 80105ce:	bf00      	nop
 80105d0:	e000ed00 	.word	0xe000ed00
 80105d4:	05fa0004 	.word	0x05fa0004

080105d8 <BootComRs232CheckActivationRequest>:
**            bootloader should be activated and, if so, activates it.
** \return    none.
**
****************************************************************************************/
static void BootComRs232CheckActivationRequest(void)
{
 80105d8:	b508      	push	{r3, lr}
  static unsigned char xcpCtoReqPacket[BOOT_COM_RS232_RX_MAX_DATA+1];
  static unsigned char xcpCtoRxLength;

  if (Rs232ReceivePacket(xcpCtoReqPacket, &xcpCtoRxLength)) {
 80105da:	4b04      	ldr	r3, [pc, #16]	; (80105ec <BootComRs232CheckActivationRequest+0x14>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	4904      	ldr	r1, [pc, #16]	; (80105f0 <BootComRs232CheckActivationRequest+0x18>)
 80105e0:	4804      	ldr	r0, [pc, #16]	; (80105f4 <BootComRs232CheckActivationRequest+0x1c>)
 80105e2:	4798      	blx	r3
 80105e4:	b900      	cbnz	r0, 80105e8 <BootComRs232CheckActivationRequest+0x10>
//         */
//        xcpCtoRxInProgress = 0;
//      }
//    }
//  }
} /*** end of BootComRs232CheckActivationRequest ***/
 80105e6:	bd08      	pop	{r3, pc}
    BootActivate();
 80105e8:	f7ff ffe4 	bl	80105b4 <BootActivate>
 80105ec:	08000194 	.word	0x08000194
 80105f0:	200000d5 	.word	0x200000d5
 80105f4:	20000094 	.word	0x20000094

080105f8 <BootComCheckActivationRequest>:
{
 80105f8:	b508      	push	{r3, lr}
  BootComRs232CheckActivationRequest();
 80105fa:	f7ff ffed 	bl	80105d8 <BootComRs232CheckActivationRequest>
} /*** end of BootComCheckActivationRequest ***/
 80105fe:	bd08      	pop	{r3, pc}

08010600 <LedInit>:
** \brief     Initializes the LED.
** \return    none.
**
****************************************************************************************/
void LedInit(void)
{
 8010600:	b510      	push	{r4, lr}
  /* Note that the initialization of the LED GPIO pin is done in HAL_MspInit(). All that
   * is left to do here is to make sure the LED is turned off after initialization.
   */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8010602:	2201      	movs	r2, #1
 8010604:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010608:	480b      	ldr	r0, [pc, #44]	; (8010638 <LedInit+0x38>)
 801060a:	f001 f93f 	bl	801188c <HAL_GPIO_WritePin>

  //SET_LED3_ORANGE(GPIO_PIN_SET);
  SET_LED4_GREEN(GPIO_PIN_SET);
 801060e:	4c0b      	ldr	r4, [pc, #44]	; (801063c <LedInit+0x3c>)
 8010610:	2201      	movs	r2, #1
 8010612:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010616:	4620      	mov	r0, r4
 8010618:	f001 f938 	bl	801188c <HAL_GPIO_WritePin>
  SET_LED5_RED(GPIO_PIN_SET);
 801061c:	2201      	movs	r2, #1
 801061e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010622:	4620      	mov	r0, r4
 8010624:	f001 f932 	bl	801188c <HAL_GPIO_WritePin>
  SET_LED6_BLUE(GPIO_PIN_SET);
 8010628:	2201      	movs	r2, #1
 801062a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801062e:	4620      	mov	r0, r4
 8010630:	f001 f92c 	bl	801188c <HAL_GPIO_WritePin>
} /*** end of LedInit ***/
 8010634:	bd10      	pop	{r4, pc}
 8010636:	bf00      	nop
 8010638:	40020800 	.word	0x40020800
 801063c:	40020c00 	.word	0x40020c00

08010640 <LedToggle>:
** \brief     Toggles the LED at a fixed time interval.
** \return    none.
**
****************************************************************************************/
void LedToggle(void)
{
 8010640:	b570      	push	{r4, r5, r6, lr}
  static unsigned char led_toggle_state = 0;
  static unsigned long timer_counter_last = 0;
  unsigned long timer_counter_now;

  /* check if toggle interval time passed */
  timer_counter_now = TimerGet();
 8010642:	f000 f836 	bl	80106b2 <TimerGet>
  if ( (timer_counter_now - timer_counter_last) < LED_TOGGLE_MS)
 8010646:	4b17      	ldr	r3, [pc, #92]	; (80106a4 <LedToggle+0x64>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	1ac3      	subs	r3, r0, r3
 801064c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010650:	d315      	bcc.n	801067e <LedToggle+0x3e>
 8010652:	4604      	mov	r4, r0
    /* not yet time to toggle */
    return;
  }

  /* determine toggle action */
  if (led_toggle_state == 0)
 8010654:	4b14      	ldr	r3, [pc, #80]	; (80106a8 <LedToggle+0x68>)
 8010656:	781b      	ldrb	r3, [r3, #0]
 8010658:	b993      	cbnz	r3, 8010680 <LedToggle+0x40>
  {
    led_toggle_state = 1;
 801065a:	2501      	movs	r5, #1
 801065c:	4b12      	ldr	r3, [pc, #72]	; (80106a8 <LedToggle+0x68>)
 801065e:	701d      	strb	r5, [r3, #0]
    /* turn the LED on */
    //SET_LED3_ORANGE(GPIO_PIN_RESET);
    SET_LED4_GREEN(GPIO_PIN_SET);
 8010660:	4e12      	ldr	r6, [pc, #72]	; (80106ac <LedToggle+0x6c>)
 8010662:	462a      	mov	r2, r5
 8010664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010668:	4630      	mov	r0, r6
 801066a:	f001 f90f 	bl	801188c <HAL_GPIO_WritePin>
    //SET_LED5_RED(GPIO_PIN_RESET);
    SET_LED6_BLUE(GPIO_PIN_SET);
 801066e:	462a      	mov	r2, r5
 8010670:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010674:	4630      	mov	r0, r6
 8010676:	f001 f909 	bl	801188c <HAL_GPIO_WritePin>
    //SET_LED5_RED(GPIO_PIN_SET);
    SET_LED6_BLUE(GPIO_PIN_RESET);
  }

  /* store toggle time to determine next toggle interval */
  timer_counter_last = timer_counter_now;
 801067a:	4b0a      	ldr	r3, [pc, #40]	; (80106a4 <LedToggle+0x64>)
 801067c:	601c      	str	r4, [r3, #0]
} /*** end of LedToggle ***/
 801067e:	bd70      	pop	{r4, r5, r6, pc}
    led_toggle_state = 0;
 8010680:	2500      	movs	r5, #0
 8010682:	4b09      	ldr	r3, [pc, #36]	; (80106a8 <LedToggle+0x68>)
 8010684:	701d      	strb	r5, [r3, #0]
    SET_LED4_GREEN(GPIO_PIN_RESET);
 8010686:	4e09      	ldr	r6, [pc, #36]	; (80106ac <LedToggle+0x6c>)
 8010688:	462a      	mov	r2, r5
 801068a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801068e:	4630      	mov	r0, r6
 8010690:	f001 f8fc 	bl	801188c <HAL_GPIO_WritePin>
    SET_LED6_BLUE(GPIO_PIN_RESET);
 8010694:	462a      	mov	r2, r5
 8010696:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801069a:	4630      	mov	r0, r6
 801069c:	f001 f8f6 	bl	801188c <HAL_GPIO_WritePin>
 80106a0:	e7eb      	b.n	801067a <LedToggle+0x3a>
 80106a2:	bf00      	nop
 80106a4:	200000d8 	.word	0x200000d8
 80106a8:	200000d6 	.word	0x200000d6
 80106ac:	40020c00 	.word	0x40020c00

080106b0 <TimerInit>:
void TimerInit(void)
{
  /* The HAL initialization already configured the Systick interrupt to generate an
   * interrupt every 1 millisecond. Nothing more needs to be done here.
   */
} /*** end of TimerInit ***/
 80106b0:	4770      	bx	lr

080106b2 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
unsigned long TimerGet(void)
{
 80106b2:	b508      	push	{r3, lr}
  /* Read and return the tick counter value. */
  return HAL_GetTick();
 80106b4:	f000 fa7c 	bl	8010bb0 <HAL_GetTick>
} /*** end of TimerGet ***/
 80106b8:	bd08      	pop	{r3, pc}
	...

080106bc <VectorBase_Config>:
   * c-startup code.
   */
  extern const unsigned long g_pfnVectors[];

  /* Remap the vector table to where the vector table is located for this program. */
  SCB->VTOR = (unsigned long)&g_pfnVectors[0];
 80106bc:	4a01      	ldr	r2, [pc, #4]	; (80106c4 <VectorBase_Config+0x8>)
 80106be:	4b02      	ldr	r3, [pc, #8]	; (80106c8 <VectorBase_Config+0xc>)
 80106c0:	609a      	str	r2, [r3, #8]
}
 80106c2:	4770      	bx	lr
 80106c4:	08010000 	.word	0x08010000
 80106c8:	e000ed00 	.word	0xe000ed00

080106cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80106cc:	b570      	push	{r4, r5, r6, lr}
 80106ce:	b08c      	sub	sp, #48	; 0x30
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80106d0:	2400      	movs	r4, #0
 80106d2:	940b      	str	r4, [sp, #44]	; 0x2c
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80106d4:	4b29      	ldr	r3, [pc, #164]	; (801077c <MX_GPIO_Init+0xb0>)
 80106d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80106d8:	f042 0204 	orr.w	r2, r2, #4
 80106dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80106de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80106e0:	f002 0204 	and.w	r2, r2, #4
 80106e4:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 80106e6:	9a05      	ldr	r2, [sp, #20]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80106e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80106ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80106ee:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80106f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80106f2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80106f6:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80106f8:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80106fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80106fc:	f042 0201 	orr.w	r2, r2, #1
 8010700:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8010702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010704:	f002 0201 	and.w	r2, r2, #1
 8010708:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 801070a:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 801070c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801070e:	f042 0202 	orr.w	r2, r2, #2
 8010712:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8010714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010716:	f002 0202 	and.w	r2, r2, #2
 801071a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 801071c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 801071e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010720:	f042 0208 	orr.w	r2, r2, #8
 8010724:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8010726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010728:	f003 0308 	and.w	r3, r3, #8
 801072c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 801072e:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8010730:	4813      	ldr	r0, [pc, #76]	; (8010780 <MX_GPIO_Init+0xb4>)
 8010732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010736:	6183      	str	r3, [r0, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8010738:	4e12      	ldr	r6, [pc, #72]	; (8010784 <MX_GPIO_Init+0xb8>)
 801073a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 801073e:	61b2      	str	r2, [r6, #24]

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8010740:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8010742:	2501      	movs	r5, #1
 8010744:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8010746:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8010748:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 801074a:	940a      	str	r4, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801074c:	a906      	add	r1, sp, #24
 801074e:	f001 f8a9 	bl	80118a4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8010752:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8010754:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8010756:	940a      	str	r4, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010758:	a906      	add	r1, sp, #24
 801075a:	480b      	ldr	r0, [pc, #44]	; (8010788 <MX_GPIO_Init+0xbc>)
 801075c:	f001 f8a2 	bl	80118a4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8010760:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8010764:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8010766:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8010768:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 801076a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 801076c:	940a      	str	r4, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801076e:	a906      	add	r1, sp, #24
 8010770:	4630      	mov	r0, r6
 8010772:	f001 f897 	bl	80118a4 <LL_GPIO_Init>

}
 8010776:	b00c      	add	sp, #48	; 0x30
 8010778:	bd70      	pop	{r4, r5, r6, pc}
 801077a:	bf00      	nop
 801077c:	40023800 	.word	0x40023800
 8010780:	40020800 	.word	0x40020800
 8010784:	40020c00 	.word	0x40020c00
 8010788:	40020000 	.word	0x40020000

0801078c <MX_USART6_UART_Init>:
{
 801078c:	b510      	push	{r4, lr}
 801078e:	b090      	sub	sp, #64	; 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8010790:	2400      	movs	r4, #0
 8010792:	9409      	str	r4, [sp, #36]	; 0x24
 8010794:	940a      	str	r4, [sp, #40]	; 0x28
 8010796:	940b      	str	r4, [sp, #44]	; 0x2c
 8010798:	940c      	str	r4, [sp, #48]	; 0x30
 801079a:	940d      	str	r4, [sp, #52]	; 0x34
 801079c:	940e      	str	r4, [sp, #56]	; 0x38
 801079e:	940f      	str	r4, [sp, #60]	; 0x3c
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80107a0:	4b1e      	ldr	r3, [pc, #120]	; (801081c <MX_USART6_UART_Init+0x90>)
 80107a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80107a4:	f042 0220 	orr.w	r2, r2, #32
 80107a8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80107aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80107ac:	f002 0220 	and.w	r2, r2, #32
 80107b0:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80107b2:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80107b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80107b6:	f042 0204 	orr.w	r2, r2, #4
 80107ba:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80107bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107be:	f003 0304 	and.w	r3, r3, #4
 80107c2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80107c4:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80107c6:	23c0      	movs	r3, #192	; 0xc0
 80107c8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80107ca:	2302      	movs	r3, #2
 80107cc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80107ce:	2303      	movs	r3, #3
 80107d0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80107d2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80107d4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80107d6:	2308      	movs	r3, #8
 80107d8:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80107da:	a903      	add	r1, sp, #12
 80107dc:	4810      	ldr	r0, [pc, #64]	; (8010820 <MX_USART6_UART_Init+0x94>)
 80107de:	f001 f861 	bl	80118a4 <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 115200;
 80107e2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80107e6:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80107e8:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80107ea:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80107ec:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80107ee:	230c      	movs	r3, #12
 80107f0:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80107f2:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80107f4:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART6, &USART_InitStruct);
 80107f6:	4c0b      	ldr	r4, [pc, #44]	; (8010824 <MX_USART6_UART_Init+0x98>)
 80107f8:	a909      	add	r1, sp, #36	; 0x24
 80107fa:	4620      	mov	r0, r4
 80107fc:	f001 f95a 	bl	8011ab4 <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010800:	6923      	ldr	r3, [r4, #16]
 8010802:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8010806:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8010808:	6963      	ldr	r3, [r4, #20]
 801080a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 801080e:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8010810:	68e3      	ldr	r3, [r4, #12]
 8010812:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010816:	60e3      	str	r3, [r4, #12]
}
 8010818:	b010      	add	sp, #64	; 0x40
 801081a:	bd10      	pop	{r4, pc}
 801081c:	40023800 	.word	0x40023800
 8010820:	40020800 	.word	0x40020800
 8010824:	40011400 	.word	0x40011400

08010828 <__io_putchar>:
{
 8010828:	b510      	push	{r4, lr}
 801082a:	4604      	mov	r4, r0
  Rs232TransmitByte(ch);
 801082c:	4b02      	ldr	r3, [pc, #8]	; (8010838 <__io_putchar+0x10>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	b2c0      	uxtb	r0, r0
 8010832:	4798      	blx	r3
}
 8010834:	4620      	mov	r0, r4
 8010836:	bd10      	pop	{r4, pc}
 8010838:	0800018c 	.word	0x0800018c

0801083c <SystemClock_Config>:
{
 801083c:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 801083e:	4a2e      	ldr	r2, [pc, #184]	; (80108f8 <SystemClock_Config+0xbc>)
 8010840:	6813      	ldr	r3, [r2, #0]
 8010842:	f023 0307 	bic.w	r3, r3, #7
 8010846:	f043 0305 	orr.w	r3, r3, #5
 801084a:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 801084c:	4b2a      	ldr	r3, [pc, #168]	; (80108f8 <SystemClock_Config+0xbc>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	f003 0307 	and.w	r3, r3, #7
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8010854:	2b05      	cmp	r3, #5
 8010856:	d1f9      	bne.n	801084c <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8010858:	4a28      	ldr	r2, [pc, #160]	; (80108fc <SystemClock_Config+0xc0>)
 801085a:	6813      	ldr	r3, [r2, #0]
 801085c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010860:	6013      	str	r3, [r2, #0]
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8010862:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8010866:	6813      	ldr	r3, [r2, #0]
 8010868:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 801086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010870:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8010872:	6813      	ldr	r3, [r2, #0]
 8010874:	f043 0301 	orr.w	r3, r3, #1
 8010878:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 801087a:	4b21      	ldr	r3, [pc, #132]	; (8010900 <SystemClock_Config+0xc4>)
 801087c:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSI_IsReady() != 1)
 801087e:	f013 0f02 	tst.w	r3, #2
 8010882:	d0fa      	beq.n	801087a <SystemClock_Config+0x3e>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8010884:	4a1e      	ldr	r2, [pc, #120]	; (8010900 <SystemClock_Config+0xc4>)
 8010886:	6851      	ldr	r1, [r2, #4]
 8010888:	4b1e      	ldr	r3, [pc, #120]	; (8010904 <SystemClock_Config+0xc8>)
 801088a:	400b      	ands	r3, r1
 801088c:	f443 5328 	orr.w	r3, r3, #10752	; 0x2a00
 8010890:	f043 0308 	orr.w	r3, r3, #8
 8010894:	6053      	str	r3, [r2, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8010896:	6853      	ldr	r3, [r2, #4]
 8010898:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 801089c:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 801089e:	6813      	ldr	r3, [r2, #0]
 80108a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80108a4:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80108a6:	4b16      	ldr	r3, [pc, #88]	; (8010900 <SystemClock_Config+0xc4>)
 80108a8:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 80108aa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80108ae:	d0fa      	beq.n	80108a6 <SystemClock_Config+0x6a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80108b0:	4b13      	ldr	r3, [pc, #76]	; (8010900 <SystemClock_Config+0xc4>)
 80108b2:	689a      	ldr	r2, [r3, #8]
 80108b4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80108b8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80108ba:	689a      	ldr	r2, [r3, #8]
 80108bc:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80108c0:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80108c4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80108c6:	689a      	ldr	r2, [r3, #8]
 80108c8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80108cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80108d0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80108d2:	689a      	ldr	r2, [r3, #8]
 80108d4:	f022 0203 	bic.w	r2, r2, #3
 80108d8:	f042 0202 	orr.w	r2, r2, #2
 80108dc:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80108de:	4b08      	ldr	r3, [pc, #32]	; (8010900 <SystemClock_Config+0xc4>)
 80108e0:	689b      	ldr	r3, [r3, #8]
 80108e2:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80108e6:	2b08      	cmp	r3, #8
 80108e8:	d1f9      	bne.n	80108de <SystemClock_Config+0xa2>
  LL_SetSystemCoreClock(168000000);
 80108ea:	4807      	ldr	r0, [pc, #28]	; (8010908 <SystemClock_Config+0xcc>)
 80108ec:	f001 f99e 	bl	8011c2c <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80108f0:	2000      	movs	r0, #0
 80108f2:	f000 f911 	bl	8010b18 <HAL_InitTick>
}
 80108f6:	bd08      	pop	{r3, pc}
 80108f8:	40023c00 	.word	0x40023c00
 80108fc:	40007000 	.word	0x40007000
 8010900:	40023800 	.word	0x40023800
 8010904:	ffbf8000 	.word	0xffbf8000
 8010908:	0a037a00 	.word	0x0a037a00

0801090c <main>:
{
 801090c:	b530      	push	{r4, r5, lr}
 801090e:	b085      	sub	sp, #20
  VectorBase_Config();
 8010910:	f7ff fed4 	bl	80106bc <VectorBase_Config>
  HAL_Init();
 8010914:	f000 f926 	bl	8010b64 <HAL_Init>
  SystemClock_Config();
 8010918:	f7ff ff90 	bl	801083c <SystemClock_Config>
  MX_GPIO_Init();
 801091c:	f7ff fed6 	bl	80106cc <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8010920:	f7ff ff34 	bl	801078c <MX_USART6_UART_Init>
  MX_LWIP_Init();
 8010924:	f001 f988 	bl	8011c38 <MX_LWIP_Init>
  AppInit();
 8010928:	f7ff fe36 	bl	8010598 <AppInit>
  printf("... Stage2 start ... \n");
 801092c:	4816      	ldr	r0, [pc, #88]	; (8010988 <main+0x7c>)
 801092e:	f00b f92d 	bl	801bb8c <puts>
  printf("... Mac ... %2.2X:%2.2X:%2.2X:%2.2X:%2.2X:%2.2X\n", gnetif.hwaddr[0], gnetif.hwaddr[1],
 8010932:	4c16      	ldr	r4, [pc, #88]	; (801098c <main+0x80>)
		  gnetif.hwaddr[2], gnetif.hwaddr[3], gnetif.hwaddr[4], gnetif.hwaddr[5]);
 8010934:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8010938:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 801093c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
  printf("... Mac ... %2.2X:%2.2X:%2.2X:%2.2X:%2.2X:%2.2X\n", gnetif.hwaddr[0], gnetif.hwaddr[1],
 8010940:	9102      	str	r1, [sp, #8]
 8010942:	9201      	str	r2, [sp, #4]
 8010944:	9300      	str	r3, [sp, #0]
 8010946:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801094a:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 801094e:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 8010952:	480f      	ldr	r0, [pc, #60]	; (8010990 <main+0x84>)
 8010954:	f00b f894 	bl	801ba80 <iprintf>
  u32_t ip = gnetif.ip_addr.addr;
 8010958:	6865      	ldr	r5, [r4, #4]
 801095a:	e003      	b.n	8010964 <main+0x58>
    MX_LWIP_Process();
 801095c:	f001 f9a8 	bl	8011cb0 <MX_LWIP_Process>
    AppTask();
 8010960:	f7ff fe22 	bl	80105a8 <AppTask>
	if (!ip && gnetif.ip_addr.addr) {
 8010964:	2d00      	cmp	r5, #0
 8010966:	d1f9      	bne.n	801095c <main+0x50>
 8010968:	4b08      	ldr	r3, [pc, #32]	; (801098c <main+0x80>)
 801096a:	685c      	ldr	r4, [r3, #4]
 801096c:	2c00      	cmp	r4, #0
 801096e:	d0f5      	beq.n	801095c <main+0x50>
			  (u8_t)(ip >> 24));
 8010970:	0e23      	lsrs	r3, r4, #24
	  printf("... IP  ... %d.%d.%d.%d\n",
 8010972:	9300      	str	r3, [sp, #0]
 8010974:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8010978:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801097c:	b2e1      	uxtb	r1, r4
 801097e:	4805      	ldr	r0, [pc, #20]	; (8010994 <main+0x88>)
 8010980:	f00b f87e 	bl	801ba80 <iprintf>
	  ip = gnetif.ip_addr.addr;
 8010984:	4625      	mov	r5, r4
 8010986:	e7e9      	b.n	801095c <main+0x50>
 8010988:	0801cbf8 	.word	0x0801cbf8
 801098c:	20000b3c 	.word	0x20000b3c
 8010990:	0801cc10 	.word	0x0801cc10
 8010994:	0801cc44 	.word	0x0801cc44

08010998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010998:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801099a:	2100      	movs	r1, #0
 801099c:	9100      	str	r1, [sp, #0]
 801099e:	4b0b      	ldr	r3, [pc, #44]	; (80109cc <HAL_MspInit+0x34>)
 80109a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80109a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80109a6:	645a      	str	r2, [r3, #68]	; 0x44
 80109a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80109aa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80109ae:	9200      	str	r2, [sp, #0]
 80109b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80109b2:	9101      	str	r1, [sp, #4]
 80109b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80109b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80109ba:	641a      	str	r2, [r3, #64]	; 0x40
 80109bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80109c2:	9301      	str	r3, [sp, #4]
 80109c4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80109c6:	b002      	add	sp, #8
 80109c8:	4770      	bx	lr
 80109ca:	bf00      	nop
 80109cc:	40023800 	.word	0x40023800

080109d0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80109d0:	4770      	bx	lr

080109d2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80109d2:	e7fe      	b.n	80109d2 <HardFault_Handler>

080109d4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80109d4:	e7fe      	b.n	80109d4 <MemManage_Handler>

080109d6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80109d6:	e7fe      	b.n	80109d6 <BusFault_Handler>

080109d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80109d8:	e7fe      	b.n	80109d8 <UsageFault_Handler>

080109da <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80109da:	4770      	bx	lr

080109dc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80109dc:	4770      	bx	lr

080109de <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80109de:	4770      	bx	lr

080109e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80109e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80109e2:	f000 f8d9 	bl	8010b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80109e6:	bd08      	pop	{r3, pc}

080109e8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80109e8:	2001      	movs	r0, #1
 80109ea:	4770      	bx	lr

080109ec <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 80109ec:	4b02      	ldr	r3, [pc, #8]	; (80109f8 <_kill+0xc>)
 80109ee:	2216      	movs	r2, #22
 80109f0:	601a      	str	r2, [r3, #0]
	return -1;
}
 80109f2:	f04f 30ff 	mov.w	r0, #4294967295
 80109f6:	4770      	bx	lr
 80109f8:	2000726c 	.word	0x2000726c

080109fc <_exit>:

void _exit (int status)
{
 80109fc:	b508      	push	{r3, lr}
	_kill(status, -1);
 80109fe:	f04f 31ff 	mov.w	r1, #4294967295
 8010a02:	f7ff fff3 	bl	80109ec <_kill>
	while (1) {}		/* Make sure we hang here */
 8010a06:	e7fe      	b.n	8010a06 <_exit+0xa>

08010a08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010a08:	b570      	push	{r4, r5, r6, lr}
 8010a0a:	460c      	mov	r4, r1
 8010a0c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010a0e:	2500      	movs	r5, #0
 8010a10:	42b5      	cmp	r5, r6
 8010a12:	da07      	bge.n	8010a24 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8010a14:	f3af 8000 	nop.w
 8010a18:	4621      	mov	r1, r4
 8010a1a:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010a1e:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8010a20:	460c      	mov	r4, r1
 8010a22:	e7f5      	b.n	8010a10 <_read+0x8>
	}

return len;
}
 8010a24:	4630      	mov	r0, r6
 8010a26:	bd70      	pop	{r4, r5, r6, pc}

08010a28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8010a28:	b570      	push	{r4, r5, r6, lr}
 8010a2a:	460c      	mov	r4, r1
 8010a2c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010a2e:	2500      	movs	r5, #0
 8010a30:	42b5      	cmp	r5, r6
 8010a32:	da05      	bge.n	8010a40 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8010a34:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010a38:	f7ff fef6 	bl	8010828 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010a3c:	3501      	adds	r5, #1
 8010a3e:	e7f7      	b.n	8010a30 <_write+0x8>
	}
	return len;
}
 8010a40:	4630      	mov	r0, r6
 8010a42:	bd70      	pop	{r4, r5, r6, pc}

08010a44 <_close>:

int _close(int file)
{
	return -1;
}
 8010a44:	f04f 30ff 	mov.w	r0, #4294967295
 8010a48:	4770      	bx	lr

08010a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8010a4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010a4e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8010a50:	2000      	movs	r0, #0
 8010a52:	4770      	bx	lr

08010a54 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8010a54:	2001      	movs	r0, #1
 8010a56:	4770      	bx	lr

08010a58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8010a58:	2000      	movs	r0, #0
 8010a5a:	4770      	bx	lr

08010a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8010a5c:	b410      	push	{r4}
 8010a5e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8010a60:	4a0c      	ldr	r2, [pc, #48]	; (8010a94 <_sbrk+0x38>)
 8010a62:	490d      	ldr	r1, [pc, #52]	; (8010a98 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8010a64:	480d      	ldr	r0, [pc, #52]	; (8010a9c <_sbrk+0x40>)
 8010a66:	6800      	ldr	r0, [r0, #0]
 8010a68:	b150      	cbz	r0, 8010a80 <_sbrk+0x24>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8010a6a:	480c      	ldr	r0, [pc, #48]	; (8010a9c <_sbrk+0x40>)
 8010a6c:	6800      	ldr	r0, [r0, #0]
 8010a6e:	4403      	add	r3, r0
 8010a70:	1a52      	subs	r2, r2, r1
 8010a72:	4293      	cmp	r3, r2
 8010a74:	d808      	bhi.n	8010a88 <_sbrk+0x2c>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8010a76:	4a09      	ldr	r2, [pc, #36]	; (8010a9c <_sbrk+0x40>)
 8010a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8010a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a7e:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8010a80:	4806      	ldr	r0, [pc, #24]	; (8010a9c <_sbrk+0x40>)
 8010a82:	4c07      	ldr	r4, [pc, #28]	; (8010aa0 <_sbrk+0x44>)
 8010a84:	6004      	str	r4, [r0, #0]
 8010a86:	e7f0      	b.n	8010a6a <_sbrk+0xe>
    errno = ENOMEM;
 8010a88:	4b06      	ldr	r3, [pc, #24]	; (8010aa4 <_sbrk+0x48>)
 8010a8a:	220c      	movs	r2, #12
 8010a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8010a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8010a92:	e7f2      	b.n	8010a7a <_sbrk+0x1e>
 8010a94:	20020000 	.word	0x20020000
 8010a98:	00000400 	.word	0x00000400
 8010a9c:	200000dc 	.word	0x200000dc
 8010aa0:	20007280 	.word	0x20007280
 8010aa4:	2000726c 	.word	0x2000726c

08010aa8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010aa8:	4b05      	ldr	r3, [pc, #20]	; (8010ac0 <SystemInit+0x18>)
 8010aaa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010aae:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8010ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010ab6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010aba:	609a      	str	r2, [r3, #8]
#endif
}
 8010abc:	4770      	bx	lr
 8010abe:	bf00      	nop
 8010ac0:	e000ed00 	.word	0xe000ed00

08010ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8010ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010afc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010ac8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010aca:	e003      	b.n	8010ad4 <LoopCopyDataInit>

08010acc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010acc:	4b0c      	ldr	r3, [pc, #48]	; (8010b00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010ace:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010ad0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010ad2:	3104      	adds	r1, #4

08010ad4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010ad4:	480b      	ldr	r0, [pc, #44]	; (8010b04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010ad6:	4b0c      	ldr	r3, [pc, #48]	; (8010b08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010ad8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010ada:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010adc:	d3f6      	bcc.n	8010acc <CopyDataInit>
  ldr  r2, =_sbss
 8010ade:	4a0b      	ldr	r2, [pc, #44]	; (8010b0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010ae0:	e002      	b.n	8010ae8 <LoopFillZerobss>

08010ae2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010ae2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010ae4:	f842 3b04 	str.w	r3, [r2], #4

08010ae8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010ae8:	4b09      	ldr	r3, [pc, #36]	; (8010b10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010aea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010aec:	d3f9      	bcc.n	8010ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010aee:	f7ff ffdb 	bl	8010aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010af2:	f00a ff7d 	bl	801b9f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010af6:	f7ff ff09 	bl	801090c <main>
  bx  lr    
 8010afa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8010afc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8010b00:	08020724 	.word	0x08020724
  ldr  r0, =_sdata
 8010b04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010b08:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8010b0c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8010b10:	2000727c 	.word	0x2000727c

08010b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010b14:	e7fe      	b.n	8010b14 <ADC_IRQHandler>
	...

08010b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010b18:	b510      	push	{r4, lr}
 8010b1a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8010b1c:	4b0e      	ldr	r3, [pc, #56]	; (8010b58 <HAL_InitTick+0x40>)
 8010b1e:	7818      	ldrb	r0, [r3, #0]
 8010b20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010b24:	fbb3 f3f0 	udiv	r3, r3, r0
 8010b28:	4a0c      	ldr	r2, [pc, #48]	; (8010b5c <HAL_InitTick+0x44>)
 8010b2a:	6810      	ldr	r0, [r2, #0]
 8010b2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8010b30:	f000 f89e 	bl	8010c70 <HAL_SYSTICK_Config>
 8010b34:	b968      	cbnz	r0, 8010b52 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8010b36:	2c0f      	cmp	r4, #15
 8010b38:	d901      	bls.n	8010b3e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8010b3a:	2001      	movs	r0, #1
 8010b3c:	e00a      	b.n	8010b54 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010b3e:	2200      	movs	r2, #0
 8010b40:	4621      	mov	r1, r4
 8010b42:	f04f 30ff 	mov.w	r0, #4294967295
 8010b46:	f000 f85f 	bl	8010c08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010b4a:	4b05      	ldr	r3, [pc, #20]	; (8010b60 <HAL_InitTick+0x48>)
 8010b4c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010b4e:	2000      	movs	r0, #0
 8010b50:	e000      	b.n	8010b54 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8010b52:	2001      	movs	r0, #1
}
 8010b54:	bd10      	pop	{r4, pc}
 8010b56:	bf00      	nop
 8010b58:	20000004 	.word	0x20000004
 8010b5c:	20000000 	.word	0x20000000
 8010b60:	20000008 	.word	0x20000008

08010b64 <HAL_Init>:
{
 8010b64:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010b66:	4b0b      	ldr	r3, [pc, #44]	; (8010b94 <HAL_Init+0x30>)
 8010b68:	681a      	ldr	r2, [r3, #0]
 8010b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010b6e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010b70:	681a      	ldr	r2, [r3, #0]
 8010b72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010b76:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010b7e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010b80:	2003      	movs	r0, #3
 8010b82:	f000 f82f 	bl	8010be4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8010b86:	2000      	movs	r0, #0
 8010b88:	f7ff ffc6 	bl	8010b18 <HAL_InitTick>
  HAL_MspInit();
 8010b8c:	f7ff ff04 	bl	8010998 <HAL_MspInit>
}
 8010b90:	2000      	movs	r0, #0
 8010b92:	bd08      	pop	{r3, pc}
 8010b94:	40023c00 	.word	0x40023c00

08010b98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8010b98:	4a03      	ldr	r2, [pc, #12]	; (8010ba8 <HAL_IncTick+0x10>)
 8010b9a:	6811      	ldr	r1, [r2, #0]
 8010b9c:	4b03      	ldr	r3, [pc, #12]	; (8010bac <HAL_IncTick+0x14>)
 8010b9e:	781b      	ldrb	r3, [r3, #0]
 8010ba0:	440b      	add	r3, r1
 8010ba2:	6013      	str	r3, [r2, #0]
}
 8010ba4:	4770      	bx	lr
 8010ba6:	bf00      	nop
 8010ba8:	20000b38 	.word	0x20000b38
 8010bac:	20000004 	.word	0x20000004

08010bb0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8010bb0:	4b01      	ldr	r3, [pc, #4]	; (8010bb8 <HAL_GetTick+0x8>)
 8010bb2:	6818      	ldr	r0, [r3, #0]
}
 8010bb4:	4770      	bx	lr
 8010bb6:	bf00      	nop
 8010bb8:	20000b38 	.word	0x20000b38

08010bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010bbc:	b538      	push	{r3, r4, r5, lr}
 8010bbe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8010bc0:	f7ff fff6 	bl	8010bb0 <HAL_GetTick>
 8010bc4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010bc6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010bca:	d002      	beq.n	8010bd2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8010bcc:	4b04      	ldr	r3, [pc, #16]	; (8010be0 <HAL_Delay+0x24>)
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8010bd2:	f7ff ffed 	bl	8010bb0 <HAL_GetTick>
 8010bd6:	1b40      	subs	r0, r0, r5
 8010bd8:	42a0      	cmp	r0, r4
 8010bda:	d3fa      	bcc.n	8010bd2 <HAL_Delay+0x16>
  {
  }
}
 8010bdc:	bd38      	pop	{r3, r4, r5, pc}
 8010bde:	bf00      	nop
 8010be0:	20000004 	.word	0x20000004

08010be4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010be4:	4a07      	ldr	r2, [pc, #28]	; (8010c04 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8010be6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010be8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8010bec:	041b      	lsls	r3, r3, #16
 8010bee:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010bf0:	0200      	lsls	r0, r0, #8
 8010bf2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010bf6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8010bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8010c00:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8010c02:	4770      	bx	lr
 8010c04:	e000ed00 	.word	0xe000ed00

08010c08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010c08:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010c0a:	4b17      	ldr	r3, [pc, #92]	; (8010c68 <HAL_NVIC_SetPriority+0x60>)
 8010c0c:	68db      	ldr	r3, [r3, #12]
 8010c0e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010c12:	f1c3 0407 	rsb	r4, r3, #7
 8010c16:	2c04      	cmp	r4, #4
 8010c18:	bf28      	it	cs
 8010c1a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010c1c:	1d1d      	adds	r5, r3, #4
 8010c1e:	2d06      	cmp	r5, #6
 8010c20:	d918      	bls.n	8010c54 <HAL_NVIC_SetPriority+0x4c>
 8010c22:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010c24:	f04f 35ff 	mov.w	r5, #4294967295
 8010c28:	fa05 f404 	lsl.w	r4, r5, r4
 8010c2c:	ea21 0104 	bic.w	r1, r1, r4
 8010c30:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010c32:	fa05 f303 	lsl.w	r3, r5, r3
 8010c36:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010c3a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8010c3c:	2800      	cmp	r0, #0
 8010c3e:	db0b      	blt.n	8010c58 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010c40:	0109      	lsls	r1, r1, #4
 8010c42:	b2c9      	uxtb	r1, r1
 8010c44:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8010c48:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8010c4c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8010c50:	bc30      	pop	{r4, r5}
 8010c52:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010c54:	2300      	movs	r3, #0
 8010c56:	e7e5      	b.n	8010c24 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010c58:	f000 000f 	and.w	r0, r0, #15
 8010c5c:	0109      	lsls	r1, r1, #4
 8010c5e:	b2c9      	uxtb	r1, r1
 8010c60:	4b02      	ldr	r3, [pc, #8]	; (8010c6c <HAL_NVIC_SetPriority+0x64>)
 8010c62:	5419      	strb	r1, [r3, r0]
 8010c64:	e7f4      	b.n	8010c50 <HAL_NVIC_SetPriority+0x48>
 8010c66:	bf00      	nop
 8010c68:	e000ed00 	.word	0xe000ed00
 8010c6c:	e000ed14 	.word	0xe000ed14

08010c70 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010c70:	3801      	subs	r0, #1
 8010c72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8010c76:	d20a      	bcs.n	8010c8e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010c78:	4b06      	ldr	r3, [pc, #24]	; (8010c94 <HAL_SYSTICK_Config+0x24>)
 8010c7a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010c7c:	4a06      	ldr	r2, [pc, #24]	; (8010c98 <HAL_SYSTICK_Config+0x28>)
 8010c7e:	21f0      	movs	r1, #240	; 0xf0
 8010c80:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010c84:	2000      	movs	r0, #0
 8010c86:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010c88:	2207      	movs	r2, #7
 8010c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010c8c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8010c8e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8010c90:	4770      	bx	lr
 8010c92:	bf00      	nop
 8010c94:	e000e010 	.word	0xe000e010
 8010c98:	e000ed00 	.word	0xe000ed00

08010c9c <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8010c9c:	7950      	ldrb	r0, [r2, #5]
 8010c9e:	7913      	ldrb	r3, [r2, #4]
 8010ca0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8010ca4:	4807      	ldr	r0, [pc, #28]	; (8010cc4 <ETH_MACAddressConfig+0x28>)
 8010ca6:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8010ca8:	78d0      	ldrb	r0, [r2, #3]
 8010caa:	7893      	ldrb	r3, [r2, #2]
 8010cac:	041b      	lsls	r3, r3, #16
 8010cae:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8010cb2:	7850      	ldrb	r0, [r2, #1]
 8010cb4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8010cb8:	7812      	ldrb	r2, [r2, #0]
 8010cba:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8010cbc:	4a02      	ldr	r2, [pc, #8]	; (8010cc8 <ETH_MACAddressConfig+0x2c>)
 8010cbe:	508b      	str	r3, [r1, r2]
}
 8010cc0:	4770      	bx	lr
 8010cc2:	bf00      	nop
 8010cc4:	40028040 	.word	0x40028040
 8010cc8:	40028044 	.word	0x40028044

08010ccc <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8010ccc:	6801      	ldr	r1, [r0, #0]
 8010cce:	f241 0218 	movw	r2, #4120	; 0x1018
 8010cd2:	588b      	ldr	r3, [r1, r2]
 8010cd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010cd8:	508b      	str	r3, [r1, r2]
}
 8010cda:	4770      	bx	lr

08010cdc <ETH_DMATransmissionDisable>:
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8010cdc:	6801      	ldr	r1, [r0, #0]
 8010cde:	f241 0218 	movw	r2, #4120	; 0x1018
 8010ce2:	588b      	ldr	r3, [r1, r2]
 8010ce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010ce8:	508b      	str	r3, [r1, r2]
}
 8010cea:	4770      	bx	lr

08010cec <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8010cec:	6801      	ldr	r1, [r0, #0]
 8010cee:	f241 0218 	movw	r2, #4120	; 0x1018
 8010cf2:	588b      	ldr	r3, [r1, r2]
 8010cf4:	f043 0302 	orr.w	r3, r3, #2
 8010cf8:	508b      	str	r3, [r1, r2]
}
 8010cfa:	4770      	bx	lr

08010cfc <ETH_DMAReceptionDisable>:
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8010cfc:	6801      	ldr	r1, [r0, #0]
 8010cfe:	f241 0218 	movw	r2, #4120	; 0x1018
 8010d02:	588b      	ldr	r3, [r1, r2]
 8010d04:	f023 0302 	bic.w	r3, r3, #2
 8010d08:	508b      	str	r3, [r1, r2]
}
 8010d0a:	4770      	bx	lr

08010d0c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8010d0c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8010d0e:	4b08      	ldr	r3, [pc, #32]	; (8010d30 <ETH_Delay+0x24>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	4a08      	ldr	r2, [pc, #32]	; (8010d34 <ETH_Delay+0x28>)
 8010d14:	fba2 2303 	umull	r2, r3, r2, r3
 8010d18:	0a5b      	lsrs	r3, r3, #9
 8010d1a:	fb00 f303 	mul.w	r3, r0, r3
 8010d1e:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 8010d20:	bf00      	nop
  } 
  while (Delay --);
 8010d22:	9b01      	ldr	r3, [sp, #4]
 8010d24:	1e5a      	subs	r2, r3, #1
 8010d26:	9201      	str	r2, [sp, #4]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d1f9      	bne.n	8010d20 <ETH_Delay+0x14>
}
 8010d2c:	b002      	add	sp, #8
 8010d2e:	4770      	bx	lr
 8010d30:	20000000 	.word	0x20000000
 8010d34:	10624dd3 	.word	0x10624dd3

08010d38 <ETH_MACTransmissionEnable>:
{ 
 8010d38:	b510      	push	{r4, lr}
 8010d3a:	b082      	sub	sp, #8
 8010d3c:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8010d3e:	2300      	movs	r3, #0
 8010d40:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8010d42:	6802      	ldr	r2, [r0, #0]
 8010d44:	6813      	ldr	r3, [r2, #0]
 8010d46:	f043 0308 	orr.w	r3, r3, #8
 8010d4a:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8010d4c:	6803      	ldr	r3, [r0, #0]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8010d52:	2001      	movs	r0, #1
 8010d54:	f7ff ffda 	bl	8010d0c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8010d58:	6823      	ldr	r3, [r4, #0]
 8010d5a:	9a01      	ldr	r2, [sp, #4]
 8010d5c:	601a      	str	r2, [r3, #0]
}
 8010d5e:	b002      	add	sp, #8
 8010d60:	bd10      	pop	{r4, pc}

08010d62 <ETH_MACReceptionEnable>:
{ 
 8010d62:	b510      	push	{r4, lr}
 8010d64:	b082      	sub	sp, #8
 8010d66:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8010d6c:	6802      	ldr	r2, [r0, #0]
 8010d6e:	6813      	ldr	r3, [r2, #0]
 8010d70:	f043 0304 	orr.w	r3, r3, #4
 8010d74:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8010d76:	6803      	ldr	r3, [r0, #0]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8010d7c:	2001      	movs	r0, #1
 8010d7e:	f7ff ffc5 	bl	8010d0c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8010d82:	6823      	ldr	r3, [r4, #0]
 8010d84:	9a01      	ldr	r2, [sp, #4]
 8010d86:	601a      	str	r2, [r3, #0]
}
 8010d88:	b002      	add	sp, #8
 8010d8a:	bd10      	pop	{r4, pc}

08010d8c <ETH_FlushTransmitFIFO>:
{
 8010d8c:	b530      	push	{r4, r5, lr}
 8010d8e:	b083      	sub	sp, #12
 8010d90:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8010d92:	2300      	movs	r3, #0
 8010d94:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8010d96:	6802      	ldr	r2, [r0, #0]
 8010d98:	f241 0518 	movw	r5, #4120	; 0x1018
 8010d9c:	5953      	ldr	r3, [r2, r5]
 8010d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010da2:	5153      	str	r3, [r2, r5]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8010da4:	6803      	ldr	r3, [r0, #0]
 8010da6:	595b      	ldr	r3, [r3, r5]
 8010da8:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8010daa:	2001      	movs	r0, #1
 8010dac:	f7ff ffae 	bl	8010d0c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8010db0:	6823      	ldr	r3, [r4, #0]
 8010db2:	9a01      	ldr	r2, [sp, #4]
 8010db4:	515a      	str	r2, [r3, r5]
}
 8010db6:	b003      	add	sp, #12
 8010db8:	bd30      	pop	{r4, r5, pc}

08010dba <ETH_MACReceptionDisable>:
{ 
 8010dba:	b510      	push	{r4, lr}
 8010dbc:	b082      	sub	sp, #8
 8010dbe:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8010dc4:	6802      	ldr	r2, [r0, #0]
 8010dc6:	6813      	ldr	r3, [r2, #0]
 8010dc8:	f023 0304 	bic.w	r3, r3, #4
 8010dcc:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8010dce:	6803      	ldr	r3, [r0, #0]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8010dd4:	2001      	movs	r0, #1
 8010dd6:	f7ff ff99 	bl	8010d0c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8010dda:	6823      	ldr	r3, [r4, #0]
 8010ddc:	9a01      	ldr	r2, [sp, #4]
 8010dde:	601a      	str	r2, [r3, #0]
}
 8010de0:	b002      	add	sp, #8
 8010de2:	bd10      	pop	{r4, pc}

08010de4 <ETH_MACTransmissionDisable>:
{ 
 8010de4:	b510      	push	{r4, lr}
 8010de6:	b082      	sub	sp, #8
 8010de8:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8010dea:	2300      	movs	r3, #0
 8010dec:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8010dee:	6802      	ldr	r2, [r0, #0]
 8010df0:	6813      	ldr	r3, [r2, #0]
 8010df2:	f023 0308 	bic.w	r3, r3, #8
 8010df6:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8010df8:	6803      	ldr	r3, [r0, #0]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8010dfe:	2001      	movs	r0, #1
 8010e00:	f7ff ff84 	bl	8010d0c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8010e04:	6823      	ldr	r3, [r4, #0]
 8010e06:	9a01      	ldr	r2, [sp, #4]
 8010e08:	601a      	str	r2, [r3, #0]
}
 8010e0a:	b002      	add	sp, #8
 8010e0c:	bd10      	pop	{r4, pc}
	...

08010e10 <ETH_MACDMAConfig>:
{
 8010e10:	b570      	push	{r4, r5, r6, lr}
 8010e12:	b09e      	sub	sp, #120	; 0x78
 8010e14:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8010e16:	b129      	cbz	r1, 8010e24 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8010e18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010e1c:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8010e1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010e22:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8010e24:	69e3      	ldr	r3, [r4, #28]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d16a      	bne.n	8010f00 <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8010e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e2e:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8010e30:	6821      	ldr	r1, [r4, #0]
 8010e32:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8010e34:	4a39      	ldr	r2, [pc, #228]	; (8010f1c <ETH_MACDMAConfig+0x10c>)
 8010e36:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 8010e38:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 8010e3a:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8010e3c:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8010e3e:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 8010e40:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8010e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8010e46:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8010e48:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8010e4a:	6823      	ldr	r3, [r4, #0]
 8010e4c:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8010e4e:	2001      	movs	r0, #1
 8010e50:	f7ff feb4 	bl	8010bbc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8010e54:	6823      	ldr	r3, [r4, #0]
 8010e56:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8010e58:	6823      	ldr	r3, [r4, #0]
 8010e5a:	2240      	movs	r2, #64	; 0x40
 8010e5c:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8010e5e:	6823      	ldr	r3, [r4, #0]
 8010e60:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8010e62:	2001      	movs	r0, #1
 8010e64:	f7ff feaa 	bl	8010bbc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8010e68:	6823      	ldr	r3, [r4, #0]
 8010e6a:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8010e6c:	6823      	ldr	r3, [r4, #0]
 8010e6e:	2500      	movs	r5, #0
 8010e70:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8010e72:	6823      	ldr	r3, [r4, #0]
 8010e74:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 8010e76:	6822      	ldr	r2, [r4, #0]
 8010e78:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8010e7a:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 8010e7e:	041b      	lsls	r3, r3, #16
 8010e80:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8010e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8010e86:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 8010e88:	6823      	ldr	r3, [r4, #0]
 8010e8a:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8010e8c:	2001      	movs	r0, #1
 8010e8e:	f7ff fe95 	bl	8010bbc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8010e92:	6823      	ldr	r3, [r4, #0]
 8010e94:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8010e96:	6823      	ldr	r3, [r4, #0]
 8010e98:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8010e9a:	6823      	ldr	r3, [r4, #0]
 8010e9c:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8010e9e:	2001      	movs	r0, #1
 8010ea0:	f7ff fe8c 	bl	8010bbc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8010ea4:	6823      	ldr	r3, [r4, #0]
 8010ea6:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8010ea8:	6822      	ldr	r2, [r4, #0]
 8010eaa:	f241 0518 	movw	r5, #4120	; 0x1018
 8010eae:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8010eb0:	4b1b      	ldr	r3, [pc, #108]	; (8010f20 <ETH_MACDMAConfig+0x110>)
 8010eb2:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8010eb4:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8010eb8:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8010ebc:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8010ebe:	6823      	ldr	r3, [r4, #0]
 8010ec0:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8010ec2:	2001      	movs	r0, #1
 8010ec4:	f7ff fe7a 	bl	8010bbc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8010ec8:	6823      	ldr	r3, [r4, #0]
 8010eca:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8010ecc:	6823      	ldr	r3, [r4, #0]
 8010ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ed2:	4a14      	ldr	r2, [pc, #80]	; (8010f24 <ETH_MACDMAConfig+0x114>)
 8010ed4:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 8010ed6:	6823      	ldr	r3, [r4, #0]
 8010ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010edc:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8010ede:	2001      	movs	r0, #1
 8010ee0:	f7ff fe6c 	bl	8010bbc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8010ee4:	6823      	ldr	r3, [r4, #0]
 8010ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010eea:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8010eec:	69a3      	ldr	r3, [r4, #24]
 8010eee:	2b01      	cmp	r3, #1
 8010ef0:	d009      	beq.n	8010f06 <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8010ef2:	6962      	ldr	r2, [r4, #20]
 8010ef4:	2100      	movs	r1, #0
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f7ff fed0 	bl	8010c9c <ETH_MACAddressConfig>
}
 8010efc:	b01e      	add	sp, #120	; 0x78
 8010efe:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8010f00:	2300      	movs	r3, #0
 8010f02:	9307      	str	r3, [sp, #28]
 8010f04:	e794      	b.n	8010e30 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8010f06:	6821      	ldr	r1, [r4, #0]
 8010f08:	f241 021c 	movw	r2, #4124	; 0x101c
 8010f0c:	588b      	ldr	r3, [r1, r2]
 8010f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f16:	508b      	str	r3, [r1, r2]
 8010f18:	e7eb      	b.n	8010ef2 <ETH_MACDMAConfig+0xe2>
 8010f1a:	bf00      	nop
 8010f1c:	ff20810f 	.word	0xff20810f
 8010f20:	f8de3f23 	.word	0xf8de3f23
 8010f24:	02c12080 	.word	0x02c12080

08010f28 <HAL_ETH_DMATxDescListInit>:
{
 8010f28:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8010f2a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8010f2e:	2c01      	cmp	r4, #1
 8010f30:	d032      	beq.n	8010f98 <HAL_ETH_DMATxDescListInit+0x70>
 8010f32:	2401      	movs	r4, #1
 8010f34:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8010f38:	2402      	movs	r4, #2
 8010f3a:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8010f3e:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 8010f40:	2400      	movs	r4, #0
 8010f42:	e001      	b.n	8010f48 <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8010f44:	60f1      	str	r1, [r6, #12]
  for(i=0U; i < TxBuffCount; i++)
 8010f46:	3401      	adds	r4, #1
 8010f48:	429c      	cmp	r4, r3
 8010f4a:	d218      	bcs.n	8010f7e <HAL_ETH_DMATxDescListInit+0x56>
    dmatxdesc = DMATxDescTab + i;
 8010f4c:	0167      	lsls	r7, r4, #5
 8010f4e:	eb01 1644 	add.w	r6, r1, r4, lsl #5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8010f52:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
 8010f56:	51cd      	str	r5, [r1, r7]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8010f58:	f240 55f4 	movw	r5, #1524	; 0x5f4
 8010f5c:	fb05 2504 	mla	r5, r5, r4, r2
 8010f60:	60b5      	str	r5, [r6, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8010f62:	69c5      	ldr	r5, [r0, #28]
 8010f64:	b91d      	cbnz	r5, 8010f6e <HAL_ETH_DMATxDescListInit+0x46>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8010f66:	59cd      	ldr	r5, [r1, r7]
 8010f68:	f445 0540 	orr.w	r5, r5, #12582912	; 0xc00000
 8010f6c:	51cd      	str	r5, [r1, r7]
    if(i < (TxBuffCount-1U))
 8010f6e:	1e5d      	subs	r5, r3, #1
 8010f70:	42a5      	cmp	r5, r4
 8010f72:	d9e7      	bls.n	8010f44 <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8010f74:	1c65      	adds	r5, r4, #1
 8010f76:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 8010f7a:	60f5      	str	r5, [r6, #12]
 8010f7c:	e7e3      	b.n	8010f46 <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8010f7e:	6802      	ldr	r2, [r0, #0]
 8010f80:	f241 0310 	movw	r3, #4112	; 0x1010
 8010f84:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8010f86:	2301      	movs	r3, #1
 8010f88:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8010f92:	4618      	mov	r0, r3
}
 8010f94:	bcf0      	pop	{r4, r5, r6, r7}
 8010f96:	4770      	bx	lr
  __HAL_LOCK(heth);
 8010f98:	2002      	movs	r0, #2
 8010f9a:	e7fb      	b.n	8010f94 <HAL_ETH_DMATxDescListInit+0x6c>

08010f9c <HAL_ETH_DMARxDescListInit>:
{
 8010f9c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8010f9e:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8010fa2:	2c01      	cmp	r4, #1
 8010fa4:	d02f      	beq.n	8011006 <HAL_ETH_DMARxDescListInit+0x6a>
 8010fa6:	2401      	movs	r4, #1
 8010fa8:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8010fac:	2402      	movs	r4, #2
 8010fae:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8010fb2:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 8010fb4:	2400      	movs	r4, #0
 8010fb6:	e001      	b.n	8010fbc <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8010fb8:	60e9      	str	r1, [r5, #12]
  for(i=0U; i < RxBuffCount; i++)
 8010fba:	3401      	adds	r4, #1
 8010fbc:	429c      	cmp	r4, r3
 8010fbe:	d215      	bcs.n	8010fec <HAL_ETH_DMARxDescListInit+0x50>
    DMARxDesc = DMARxDescTab+i;
 8010fc0:	0166      	lsls	r6, r4, #5
 8010fc2:	eb01 1544 	add.w	r5, r1, r4, lsl #5
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8010fc6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8010fca:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8010fcc:	f244 56f4 	movw	r6, #17908	; 0x45f4
 8010fd0:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8010fd2:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8010fd6:	fb06 2604 	mla	r6, r6, r4, r2
 8010fda:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1U))
 8010fdc:	1e5e      	subs	r6, r3, #1
 8010fde:	42a6      	cmp	r6, r4
 8010fe0:	d9ea      	bls.n	8010fb8 <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8010fe2:	1c66      	adds	r6, r4, #1
 8010fe4:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8010fe8:	60ee      	str	r6, [r5, #12]
 8010fea:	e7e6      	b.n	8010fba <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8010fec:	6802      	ldr	r2, [r0, #0]
 8010fee:	f241 030c 	movw	r3, #4108	; 0x100c
 8010ff2:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8011000:	4618      	mov	r0, r3
}
 8011002:	bcf0      	pop	{r4, r5, r6, r7}
 8011004:	4770      	bx	lr
  __HAL_LOCK(heth);
 8011006:	2002      	movs	r0, #2
 8011008:	e7fb      	b.n	8011002 <HAL_ETH_DMARxDescListInit+0x66>
	...

0801100c <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 801100c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8011010:	2b01      	cmp	r3, #1
 8011012:	f000 8085 	beq.w	8011120 <HAL_ETH_TransmitFrame+0x114>
 8011016:	2301      	movs	r3, #1
 8011018:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 801101c:	2302      	movs	r3, #2
 801101e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8011022:	b1b1      	cbz	r1, 8011052 <HAL_ETH_TransmitFrame+0x46>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8011024:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8011026:	681a      	ldr	r2, [r3, #0]
 8011028:	2a00      	cmp	r2, #0
 801102a:	db1a      	blt.n	8011062 <HAL_ETH_TransmitFrame+0x56>
{
 801102c:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 801102e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011032:	4291      	cmp	r1, r2
 8011034:	d91d      	bls.n	8011072 <HAL_ETH_TransmitFrame+0x66>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8011036:	4c3b      	ldr	r4, [pc, #236]	; (8011124 <HAL_ETH_TransmitFrame+0x118>)
 8011038:	fba4 2401 	umull	r2, r4, r4, r1
 801103c:	0aa4      	lsrs	r4, r4, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 801103e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8011042:	fb02 1214 	mls	r2, r2, r4, r1
 8011046:	b102      	cbz	r2, 801104a <HAL_ETH_TransmitFrame+0x3e>
      bufcount++;
 8011048:	3401      	adds	r4, #1
  if (bufcount == 1U)
 801104a:	2c01      	cmp	r4, #1
 801104c:	d011      	beq.n	8011072 <HAL_ETH_TransmitFrame+0x66>
    for (i=0U; i< bufcount; i++)
 801104e:	2300      	movs	r3, #0
 8011050:	e048      	b.n	80110e4 <HAL_ETH_TransmitFrame+0xd8>
    heth->State = HAL_ETH_STATE_READY;
 8011052:	2301      	movs	r3, #1
 8011054:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8011058:	2200      	movs	r2, #0
 801105a:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 801105e:	4618      	mov	r0, r3
 8011060:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8011062:	2312      	movs	r3, #18
 8011064:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8011068:	2300      	movs	r3, #0
 801106a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 801106e:	2001      	movs	r0, #1
 8011070:	4770      	bx	lr
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8011072:	681a      	ldr	r2, [r3, #0]
 8011074:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8011078:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 801107a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801107c:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8011080:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8011082:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8011084:	6813      	ldr	r3, [r2, #0]
 8011086:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801108a:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 801108c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801108e:	68db      	ldr	r3, [r3, #12]
 8011090:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8011092:	6803      	ldr	r3, [r0, #0]
 8011094:	f241 0214 	movw	r2, #4116	; 0x1014
 8011098:	589a      	ldr	r2, [r3, r2]
 801109a:	f012 0f04 	tst.w	r2, #4
 801109e:	d008      	beq.n	80110b2 <HAL_ETH_TransmitFrame+0xa6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80110a0:	f241 0214 	movw	r2, #4116	; 0x1014
 80110a4:	2104      	movs	r1, #4
 80110a6:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 80110a8:	6802      	ldr	r2, [r0, #0]
 80110aa:	f241 0304 	movw	r3, #4100	; 0x1004
 80110ae:	2100      	movs	r1, #0
 80110b0:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 80110b2:	2301      	movs	r3, #1
 80110b4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80110b8:	2300      	movs	r3, #0
 80110ba:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80110be:	4618      	mov	r0, r3
}
 80110c0:	bc30      	pop	{r4, r5}
 80110c2:	4770      	bx	lr
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80110c4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80110c6:	f240 55f4 	movw	r5, #1524	; 0x5f4
 80110ca:	6055      	str	r5, [r2, #4]
      if (i == (bufcount-1U))
 80110cc:	1e62      	subs	r2, r4, #1
 80110ce:	429a      	cmp	r2, r3
 80110d0:	d017      	beq.n	8011102 <HAL_ETH_TransmitFrame+0xf6>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80110d2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80110d4:	682a      	ldr	r2, [r5, #0]
 80110d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80110da:	602a      	str	r2, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80110dc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80110de:	68d2      	ldr	r2, [r2, #12]
 80110e0:	62c2      	str	r2, [r0, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80110e2:	3301      	adds	r3, #1
 80110e4:	429c      	cmp	r4, r3
 80110e6:	d9d4      	bls.n	8011092 <HAL_ETH_TransmitFrame+0x86>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80110e8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80110ea:	682a      	ldr	r2, [r5, #0]
 80110ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80110f0:	602a      	str	r2, [r5, #0]
      if (i == 0U) 
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d1e6      	bne.n	80110c4 <HAL_ETH_TransmitFrame+0xb8>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80110f6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80110f8:	682a      	ldr	r2, [r5, #0]
 80110fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80110fe:	602a      	str	r2, [r5, #0]
 8011100:	e7e0      	b.n	80110c4 <HAL_ETH_TransmitFrame+0xb8>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8011102:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8011104:	682a      	ldr	r2, [r5, #0]
 8011106:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 801110a:	602a      	str	r2, [r5, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 801110c:	4a06      	ldr	r2, [pc, #24]	; (8011128 <HAL_ETH_TransmitFrame+0x11c>)
 801110e:	fb02 1204 	mla	r2, r2, r4, r1
 8011112:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8011116:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8011118:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801111c:	606a      	str	r2, [r5, #4]
 801111e:	e7d8      	b.n	80110d2 <HAL_ETH_TransmitFrame+0xc6>
  __HAL_LOCK(heth);
 8011120:	2002      	movs	r0, #2
}
 8011122:	4770      	bx	lr
 8011124:	ac02b00b 	.word	0xac02b00b
 8011128:	fffffa0c 	.word	0xfffffa0c

0801112c <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 801112c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8011130:	2b01      	cmp	r3, #1
 8011132:	d040      	beq.n	80111b6 <HAL_ETH_GetReceivedFrame+0x8a>
 8011134:	2301      	movs	r3, #1
 8011136:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 801113a:	2302      	movs	r3, #2
 801113c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8011140:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8011142:	681a      	ldr	r2, [r3, #0]
 8011144:	2a00      	cmp	r2, #0
 8011146:	db0e      	blt.n	8011166 <HAL_ETH_GetReceivedFrame+0x3a>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8011148:	681a      	ldr	r2, [r3, #0]
 801114a:	f412 7f80 	tst.w	r2, #256	; 0x100
 801114e:	d112      	bne.n	8011176 <HAL_ETH_GetReceivedFrame+0x4a>
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8011150:	681a      	ldr	r2, [r3, #0]
 8011152:	f412 7f00 	tst.w	r2, #512	; 0x200
 8011156:	d028      	beq.n	80111aa <HAL_ETH_GetReceivedFrame+0x7e>
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8011158:	6303      	str	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 801115a:	2200      	movs	r2, #0
 801115c:	6342      	str	r2, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 801115e:	2201      	movs	r2, #1
 8011160:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8011162:	68db      	ldr	r3, [r3, #12]
 8011164:	6283      	str	r3, [r0, #40]	; 0x28
  heth->State = HAL_ETH_STATE_READY;
 8011166:	2301      	movs	r3, #1
 8011168:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 801116c:	2200      	movs	r2, #0
 801116e:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8011172:	4618      	mov	r0, r3
 8011174:	4770      	bx	lr
      (heth->RxFrameInfos).SegCount++;
 8011176:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8011178:	3201      	adds	r2, #1
 801117a:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos).SegCount == 1U)
 801117c:	2a01      	cmp	r2, #1
 801117e:	d012      	beq.n	80111a6 <HAL_ETH_GetReceivedFrame+0x7a>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8011180:	6343      	str	r3, [r0, #52]	; 0x34
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8011182:	681a      	ldr	r2, [r3, #0]
 8011184:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8011188:	3a04      	subs	r2, #4
      heth->RxFrameInfos.length = framelength;
 801118a:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 801118c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801118e:	6892      	ldr	r2, [r2, #8]
 8011190:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8011192:	68db      	ldr	r3, [r3, #12]
 8011194:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8011196:	2301      	movs	r3, #1
 8011198:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 801119c:	2300      	movs	r3, #0
 801119e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 80111a2:	4618      	mov	r0, r3
 80111a4:	4770      	bx	lr
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80111a6:	6303      	str	r3, [r0, #48]	; 0x30
 80111a8:	e7ea      	b.n	8011180 <HAL_ETH_GetReceivedFrame+0x54>
      (heth->RxFrameInfos).SegCount++;
 80111aa:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80111ac:	3201      	adds	r2, #1
 80111ae:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80111b0:	68db      	ldr	r3, [r3, #12]
 80111b2:	6283      	str	r3, [r0, #40]	; 0x28
 80111b4:	e7d7      	b.n	8011166 <HAL_ETH_GetReceivedFrame+0x3a>
  __HAL_LOCK(heth);
 80111b6:	2002      	movs	r0, #2
}
 80111b8:	4770      	bx	lr

080111ba <HAL_ETH_ReadPHYRegister>:
{
 80111ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80111bc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80111c0:	b2db      	uxtb	r3, r3
 80111c2:	2b82      	cmp	r3, #130	; 0x82
 80111c4:	d033      	beq.n	801122e <HAL_ETH_ReadPHYRegister+0x74>
 80111c6:	4605      	mov	r5, r0
 80111c8:	4616      	mov	r6, r2
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80111ca:	2382      	movs	r3, #130	; 0x82
 80111cc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 80111d0:	6800      	ldr	r0, [r0, #0]
 80111d2:	6902      	ldr	r2, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80111d4:	f002 021c 	and.w	r2, r2, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80111d8:	8a2b      	ldrh	r3, [r5, #16]
 80111da:	02db      	lsls	r3, r3, #11
 80111dc:	b29b      	uxth	r3, r3
 80111de:	4313      	orrs	r3, r2
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80111e0:	018c      	lsls	r4, r1, #6
 80111e2:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80111e6:	431c      	orrs	r4, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80111e8:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 80111ec:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 80111ee:	f7ff fcdf 	bl	8010bb0 <HAL_GetTick>
 80111f2:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80111f4:	f014 0f01 	tst.w	r4, #1
 80111f8:	d010      	beq.n	801121c <HAL_ETH_ReadPHYRegister+0x62>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80111fa:	f7ff fcd9 	bl	8010bb0 <HAL_GetTick>
 80111fe:	1bc3      	subs	r3, r0, r7
 8011200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011204:	d202      	bcs.n	801120c <HAL_ETH_ReadPHYRegister+0x52>
    tmpreg1 = heth->Instance->MACMIIAR;
 8011206:	682b      	ldr	r3, [r5, #0]
 8011208:	691c      	ldr	r4, [r3, #16]
 801120a:	e7f3      	b.n	80111f4 <HAL_ETH_ReadPHYRegister+0x3a>
      heth->State= HAL_ETH_STATE_READY;
 801120c:	2301      	movs	r3, #1
 801120e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8011212:	2300      	movs	r3, #0
 8011214:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8011218:	2003      	movs	r0, #3
 801121a:	e007      	b.n	801122c <HAL_ETH_ReadPHYRegister+0x72>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 801121c:	682b      	ldr	r3, [r5, #0]
 801121e:	695b      	ldr	r3, [r3, #20]
 8011220:	b29b      	uxth	r3, r3
 8011222:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8011224:	2301      	movs	r3, #1
 8011226:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 801122a:	2000      	movs	r0, #0
}
 801122c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 801122e:	2002      	movs	r0, #2
 8011230:	e7fc      	b.n	801122c <HAL_ETH_ReadPHYRegister+0x72>

08011232 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8011232:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8011236:	b2db      	uxtb	r3, r3
 8011238:	2b42      	cmp	r3, #66	; 0x42
 801123a:	d032      	beq.n	80112a2 <HAL_ETH_WritePHYRegister+0x70>
{
 801123c:	b570      	push	{r4, r5, r6, lr}
 801123e:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8011240:	2342      	movs	r3, #66	; 0x42
 8011242:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8011246:	6806      	ldr	r6, [r0, #0]
 8011248:	6930      	ldr	r0, [r6, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 801124a:	f000 001c 	and.w	r0, r0, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 801124e:	8a2b      	ldrh	r3, [r5, #16]
 8011250:	02db      	lsls	r3, r3, #11
 8011252:	b29b      	uxth	r3, r3
 8011254:	4303      	orrs	r3, r0
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8011256:	018c      	lsls	r4, r1, #6
 8011258:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 801125c:	431c      	orrs	r4, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 801125e:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8011262:	b292      	uxth	r2, r2
 8011264:	6172      	str	r2, [r6, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8011266:	682b      	ldr	r3, [r5, #0]
 8011268:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 801126a:	f7ff fca1 	bl	8010bb0 <HAL_GetTick>
 801126e:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8011270:	f014 0f01 	tst.w	r4, #1
 8011274:	d010      	beq.n	8011298 <HAL_ETH_WritePHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8011276:	f7ff fc9b 	bl	8010bb0 <HAL_GetTick>
 801127a:	1b83      	subs	r3, r0, r6
 801127c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011280:	d202      	bcs.n	8011288 <HAL_ETH_WritePHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 8011282:	682b      	ldr	r3, [r5, #0]
 8011284:	691c      	ldr	r4, [r3, #16]
 8011286:	e7f3      	b.n	8011270 <HAL_ETH_WritePHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8011288:	2301      	movs	r3, #1
 801128a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 801128e:	2300      	movs	r3, #0
 8011290:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8011294:	2003      	movs	r0, #3
 8011296:	e003      	b.n	80112a0 <HAL_ETH_WritePHYRegister+0x6e>
  heth->State = HAL_ETH_STATE_READY;
 8011298:	2301      	movs	r3, #1
 801129a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 801129e:	2000      	movs	r0, #0
}
 80112a0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80112a2:	2002      	movs	r0, #2
}
 80112a4:	4770      	bx	lr
	...

080112a8 <HAL_ETH_Init>:
{
 80112a8:	b570      	push	{r4, r5, r6, lr}
 80112aa:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80112ac:	2300      	movs	r3, #0
 80112ae:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 80112b0:	2800      	cmp	r0, #0
 80112b2:	f000 810f 	beq.w	80114d4 <HAL_ETH_Init+0x22c>
 80112b6:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 80112b8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d034      	beq.n	801132a <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80112c0:	2300      	movs	r3, #0
 80112c2:	9300      	str	r3, [sp, #0]
 80112c4:	4b84      	ldr	r3, [pc, #528]	; (80114d8 <HAL_ETH_Init+0x230>)
 80112c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80112cc:	645a      	str	r2, [r3, #68]	; 0x44
 80112ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80112d4:	9300      	str	r3, [sp, #0]
 80112d6:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80112d8:	4b80      	ldr	r3, [pc, #512]	; (80114dc <HAL_ETH_Init+0x234>)
 80112da:	685a      	ldr	r2, [r3, #4]
 80112dc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80112e0:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80112e2:	685a      	ldr	r2, [r3, #4]
 80112e4:	6a21      	ldr	r1, [r4, #32]
 80112e6:	430a      	orrs	r2, r1
 80112e8:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80112ea:	6823      	ldr	r3, [r4, #0]
 80112ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80112f0:	681a      	ldr	r2, [r3, #0]
 80112f2:	f042 0201 	orr.w	r2, r2, #1
 80112f6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80112f8:	f7ff fc5a 	bl	8010bb0 <HAL_GetTick>
 80112fc:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80112fe:	6823      	ldr	r3, [r4, #0]
 8011300:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8011304:	6812      	ldr	r2, [r2, #0]
 8011306:	f012 0f01 	tst.w	r2, #1
 801130a:	d013      	beq.n	8011334 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 801130c:	f7ff fc50 	bl	8010bb0 <HAL_GetTick>
 8011310:	1b40      	subs	r0, r0, r5
 8011312:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8011316:	d9f2      	bls.n	80112fe <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8011318:	2503      	movs	r5, #3
 801131a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 801131e:	2300      	movs	r3, #0
 8011320:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8011324:	4628      	mov	r0, r5
 8011326:	b002      	add	sp, #8
 8011328:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 801132a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 801132e:	f000 fe01 	bl	8011f34 <HAL_ETH_MspInit>
 8011332:	e7c5      	b.n	80112c0 <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8011334:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8011336:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 801133a:	f000 faad 	bl	8011898 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 801133e:	4b68      	ldr	r3, [pc, #416]	; (80114e0 <HAL_ETH_Init+0x238>)
 8011340:	4403      	add	r3, r0
 8011342:	4a68      	ldr	r2, [pc, #416]	; (80114e4 <HAL_ETH_Init+0x23c>)
 8011344:	4293      	cmp	r3, r2
 8011346:	d256      	bcs.n	80113f6 <HAL_ETH_Init+0x14e>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8011348:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 801134c:	6823      	ldr	r3, [r4, #0]
 801134e:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8011350:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011354:	2100      	movs	r1, #0
 8011356:	4620      	mov	r0, r4
 8011358:	f7ff ff6b 	bl	8011232 <HAL_ETH_WritePHYRegister>
 801135c:	4605      	mov	r5, r0
 801135e:	2800      	cmp	r0, #0
 8011360:	d161      	bne.n	8011426 <HAL_ETH_Init+0x17e>
  HAL_Delay(PHY_RESET_DELAY);
 8011362:	f640 70ff 	movw	r0, #4095	; 0xfff
 8011366:	f7ff fc29 	bl	8010bbc <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 801136a:	6863      	ldr	r3, [r4, #4]
 801136c:	2b00      	cmp	r3, #0
 801136e:	f000 8091 	beq.w	8011494 <HAL_ETH_Init+0x1ec>
    tickstart = HAL_GetTick();
 8011372:	f7ff fc1d 	bl	8010bb0 <HAL_GetTick>
 8011376:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8011378:	aa01      	add	r2, sp, #4
 801137a:	2101      	movs	r1, #1
 801137c:	4620      	mov	r0, r4
 801137e:	f7ff ff1c 	bl	80111ba <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8011382:	f7ff fc15 	bl	8010bb0 <HAL_GetTick>
 8011386:	1b80      	subs	r0, r0, r6
 8011388:	f241 3388 	movw	r3, #5000	; 0x1388
 801138c:	4298      	cmp	r0, r3
 801138e:	d852      	bhi.n	8011436 <HAL_ETH_Init+0x18e>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8011390:	9b01      	ldr	r3, [sp, #4]
 8011392:	f013 0f04 	tst.w	r3, #4
 8011396:	d0ef      	beq.n	8011378 <HAL_ETH_Init+0xd0>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8011398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801139c:	2100      	movs	r1, #0
 801139e:	4620      	mov	r0, r4
 80113a0:	f7ff ff47 	bl	8011232 <HAL_ETH_WritePHYRegister>
 80113a4:	2800      	cmp	r0, #0
 80113a6:	d152      	bne.n	801144e <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 80113a8:	f7ff fc02 	bl	8010bb0 <HAL_GetTick>
 80113ac:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80113ae:	aa01      	add	r2, sp, #4
 80113b0:	2101      	movs	r1, #1
 80113b2:	4620      	mov	r0, r4
 80113b4:	f7ff ff01 	bl	80111ba <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80113b8:	f7ff fbfa 	bl	8010bb0 <HAL_GetTick>
 80113bc:	1b80      	subs	r0, r0, r6
 80113be:	f241 3388 	movw	r3, #5000	; 0x1388
 80113c2:	4298      	cmp	r0, r3
 80113c4:	d84b      	bhi.n	801145e <HAL_ETH_Init+0x1b6>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80113c6:	9b01      	ldr	r3, [sp, #4]
 80113c8:	f013 0f20 	tst.w	r3, #32
 80113cc:	d0ef      	beq.n	80113ae <HAL_ETH_Init+0x106>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80113ce:	aa01      	add	r2, sp, #4
 80113d0:	211f      	movs	r1, #31
 80113d2:	4620      	mov	r0, r4
 80113d4:	f7ff fef1 	bl	80111ba <HAL_ETH_ReadPHYRegister>
 80113d8:	2800      	cmp	r0, #0
 80113da:	d14c      	bne.n	8011476 <HAL_ETH_Init+0x1ce>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80113dc:	9b01      	ldr	r3, [sp, #4]
 80113de:	f013 0f04 	tst.w	r3, #4
 80113e2:	d050      	beq.n	8011486 <HAL_ETH_Init+0x1de>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80113e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80113e8:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80113ea:	f013 0f02 	tst.w	r3, #2
 80113ee:	d04d      	beq.n	801148c <HAL_ETH_Init+0x1e4>
      (heth->Init).Speed = ETH_SPEED_10M; 
 80113f0:	2300      	movs	r3, #0
 80113f2:	60a3      	str	r3, [r4, #8]
 80113f4:	e05e      	b.n	80114b4 <HAL_ETH_Init+0x20c>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80113f6:	4b3c      	ldr	r3, [pc, #240]	; (80114e8 <HAL_ETH_Init+0x240>)
 80113f8:	4403      	add	r3, r0
 80113fa:	4a3c      	ldr	r2, [pc, #240]	; (80114ec <HAL_ETH_Init+0x244>)
 80113fc:	4293      	cmp	r3, r2
 80113fe:	d802      	bhi.n	8011406 <HAL_ETH_Init+0x15e>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8011400:	f045 050c 	orr.w	r5, r5, #12
 8011404:	e7a2      	b.n	801134c <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8011406:	4b3a      	ldr	r3, [pc, #232]	; (80114f0 <HAL_ETH_Init+0x248>)
 8011408:	4403      	add	r3, r0
 801140a:	4a3a      	ldr	r2, [pc, #232]	; (80114f4 <HAL_ETH_Init+0x24c>)
 801140c:	4293      	cmp	r3, r2
 801140e:	d39d      	bcc.n	801134c <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8011410:	4b39      	ldr	r3, [pc, #228]	; (80114f8 <HAL_ETH_Init+0x250>)
 8011412:	4403      	add	r3, r0
 8011414:	4a39      	ldr	r2, [pc, #228]	; (80114fc <HAL_ETH_Init+0x254>)
 8011416:	4293      	cmp	r3, r2
 8011418:	d802      	bhi.n	8011420 <HAL_ETH_Init+0x178>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 801141a:	f045 0504 	orr.w	r5, r5, #4
 801141e:	e795      	b.n	801134c <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8011420:	f045 0510 	orr.w	r5, r5, #16
 8011424:	e792      	b.n	801134c <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 8011426:	2101      	movs	r1, #1
 8011428:	4620      	mov	r0, r4
 801142a:	f7ff fcf1 	bl	8010e10 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 801142e:	2501      	movs	r5, #1
 8011430:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 8011434:	e776      	b.n	8011324 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8011436:	2101      	movs	r1, #1
 8011438:	4620      	mov	r0, r4
 801143a:	f7ff fce9 	bl	8010e10 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 801143e:	2301      	movs	r3, #1
 8011440:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8011444:	2300      	movs	r3, #0
 8011446:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 801144a:	2503      	movs	r5, #3
 801144c:	e76a      	b.n	8011324 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 801144e:	2101      	movs	r1, #1
 8011450:	4620      	mov	r0, r4
 8011452:	f7ff fcdd 	bl	8010e10 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8011456:	2501      	movs	r5, #1
 8011458:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 801145c:	e762      	b.n	8011324 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 801145e:	2101      	movs	r1, #1
 8011460:	4620      	mov	r0, r4
 8011462:	f7ff fcd5 	bl	8010e10 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8011466:	2301      	movs	r3, #1
 8011468:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 801146c:	2300      	movs	r3, #0
 801146e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8011472:	2503      	movs	r5, #3
 8011474:	e756      	b.n	8011324 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8011476:	2101      	movs	r1, #1
 8011478:	4620      	mov	r0, r4
 801147a:	f7ff fcc9 	bl	8010e10 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 801147e:	2501      	movs	r5, #1
 8011480:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8011484:	e74e      	b.n	8011324 <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8011486:	2200      	movs	r2, #0
 8011488:	60e2      	str	r2, [r4, #12]
 801148a:	e7ae      	b.n	80113ea <HAL_ETH_Init+0x142>
      (heth->Init).Speed = ETH_SPEED_100M;
 801148c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011490:	60a3      	str	r3, [r4, #8]
 8011492:	e00f      	b.n	80114b4 <HAL_ETH_Init+0x20c>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8011494:	68e2      	ldr	r2, [r4, #12]
 8011496:	f3c2 02cf 	ubfx	r2, r2, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 801149a:	68a3      	ldr	r3, [r4, #8]
 801149c:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80114a0:	431a      	orrs	r2, r3
 80114a2:	2100      	movs	r1, #0
 80114a4:	4620      	mov	r0, r4
 80114a6:	f7ff fec4 	bl	8011232 <HAL_ETH_WritePHYRegister>
 80114aa:	b958      	cbnz	r0, 80114c4 <HAL_ETH_Init+0x21c>
    HAL_Delay(PHY_CONFIG_DELAY);
 80114ac:	f640 70ff 	movw	r0, #4095	; 0xfff
 80114b0:	f7ff fb84 	bl	8010bbc <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 80114b4:	2100      	movs	r1, #0
 80114b6:	4620      	mov	r0, r4
 80114b8:	f7ff fcaa 	bl	8010e10 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 80114bc:	2301      	movs	r3, #1
 80114be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 80114c2:	e72f      	b.n	8011324 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 80114c4:	2101      	movs	r1, #1
 80114c6:	4620      	mov	r0, r4
 80114c8:	f7ff fca2 	bl	8010e10 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80114cc:	2501      	movs	r5, #1
 80114ce:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 80114d2:	e727      	b.n	8011324 <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 80114d4:	2501      	movs	r5, #1
 80114d6:	e725      	b.n	8011324 <HAL_ETH_Init+0x7c>
 80114d8:	40023800 	.word	0x40023800
 80114dc:	40013800 	.word	0x40013800
 80114e0:	feced300 	.word	0xfeced300
 80114e4:	00e4e1c0 	.word	0x00e4e1c0
 80114e8:	fde9f140 	.word	0xfde9f140
 80114ec:	017d783f 	.word	0x017d783f
 80114f0:	fc6c7900 	.word	0xfc6c7900
 80114f4:	02625a00 	.word	0x02625a00
 80114f8:	fa0a1f00 	.word	0xfa0a1f00
 80114fc:	02faf07f 	.word	0x02faf07f

08011500 <HAL_ETH_Start>:
{  
 8011500:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 8011502:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8011506:	2b01      	cmp	r3, #1
 8011508:	d01a      	beq.n	8011540 <HAL_ETH_Start+0x40>
 801150a:	4604      	mov	r4, r0
 801150c:	2501      	movs	r5, #1
 801150e:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8011512:	2302      	movs	r3, #2
 8011514:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 8011518:	f7ff fc0e 	bl	8010d38 <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 801151c:	4620      	mov	r0, r4
 801151e:	f7ff fc20 	bl	8010d62 <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 8011522:	4620      	mov	r0, r4
 8011524:	f7ff fc32 	bl	8010d8c <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 8011528:	4620      	mov	r0, r4
 801152a:	f7ff fbcf 	bl	8010ccc <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 801152e:	4620      	mov	r0, r4
 8011530:	f7ff fbdc 	bl	8010cec <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 8011534:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8011538:	2000      	movs	r0, #0
 801153a:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
}
 801153e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(heth);
 8011540:	2002      	movs	r0, #2
 8011542:	e7fc      	b.n	801153e <HAL_ETH_Start+0x3e>

08011544 <HAL_ETH_Stop>:
{  
 8011544:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 8011546:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 801154a:	2b01      	cmp	r3, #1
 801154c:	d01a      	beq.n	8011584 <HAL_ETH_Stop+0x40>
 801154e:	4604      	mov	r4, r0
 8011550:	2501      	movs	r5, #1
 8011552:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8011556:	2302      	movs	r3, #2
 8011558:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_DMATransmissionDisable(heth);
 801155c:	f7ff fbbe 	bl	8010cdc <ETH_DMATransmissionDisable>
  ETH_DMAReceptionDisable(heth);
 8011560:	4620      	mov	r0, r4
 8011562:	f7ff fbcb 	bl	8010cfc <ETH_DMAReceptionDisable>
  ETH_MACReceptionDisable(heth);
 8011566:	4620      	mov	r0, r4
 8011568:	f7ff fc27 	bl	8010dba <ETH_MACReceptionDisable>
  ETH_FlushTransmitFIFO(heth);
 801156c:	4620      	mov	r0, r4
 801156e:	f7ff fc0d 	bl	8010d8c <ETH_FlushTransmitFIFO>
  ETH_MACTransmissionDisable(heth);
 8011572:	4620      	mov	r0, r4
 8011574:	f7ff fc36 	bl	8010de4 <ETH_MACTransmissionDisable>
  heth->State = HAL_ETH_STATE_READY;
 8011578:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 801157c:	2000      	movs	r0, #0
 801157e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
}
 8011582:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(heth);
 8011584:	2002      	movs	r0, #2
 8011586:	e7fc      	b.n	8011582 <HAL_ETH_Stop+0x3e>

08011588 <HAL_ETH_ConfigMAC>:
  __HAL_LOCK(heth);
 8011588:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 801158c:	2b01      	cmp	r3, #1
 801158e:	f000 808e 	beq.w	80116ae <HAL_ETH_ConfigMAC+0x126>
{
 8011592:	b570      	push	{r4, r5, r6, lr}
 8011594:	4605      	mov	r5, r0
 8011596:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 8011598:	2301      	movs	r3, #1
 801159a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State= HAL_ETH_STATE_BUSY;
 801159e:	2302      	movs	r3, #2
 80115a0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (macconf != NULL)
 80115a4:	2900      	cmp	r1, #0
 80115a6:	d071      	beq.n	801168c <HAL_ETH_ConfigMAC+0x104>
    tmpreg1 = (heth->Instance)->MACCR;
 80115a8:	6802      	ldr	r2, [r0, #0]
 80115aa:	6813      	ldr	r3, [r2, #0]
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80115ac:	4941      	ldr	r1, [pc, #260]	; (80116b4 <HAL_ETH_ConfigMAC+0x12c>)
 80115ae:	4019      	ands	r1, r3
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80115b0:	6823      	ldr	r3, [r4, #0]
                         macconf->Jabber | 
 80115b2:	6860      	ldr	r0, [r4, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80115b4:	4303      	orrs	r3, r0
                         macconf->InterFrameGap |
 80115b6:	68a0      	ldr	r0, [r4, #8]
                         macconf->Jabber | 
 80115b8:	4303      	orrs	r3, r0
                         macconf->CarrierSense |
 80115ba:	68e0      	ldr	r0, [r4, #12]
                         macconf->InterFrameGap |
 80115bc:	4303      	orrs	r3, r0
                         (heth->Init).Speed | 
 80115be:	68a8      	ldr	r0, [r5, #8]
                         macconf->CarrierSense |
 80115c0:	4303      	orrs	r3, r0
                         macconf->ReceiveOwn |
 80115c2:	6920      	ldr	r0, [r4, #16]
                         (heth->Init).Speed | 
 80115c4:	4303      	orrs	r3, r0
                         macconf->LoopbackMode |
 80115c6:	6960      	ldr	r0, [r4, #20]
                         macconf->ReceiveOwn |
 80115c8:	4303      	orrs	r3, r0
                         (heth->Init).DuplexMode | 
 80115ca:	68e8      	ldr	r0, [r5, #12]
                         macconf->LoopbackMode |
 80115cc:	4303      	orrs	r3, r0
                         macconf->ChecksumOffload |    
 80115ce:	69a0      	ldr	r0, [r4, #24]
                         (heth->Init).DuplexMode | 
 80115d0:	4303      	orrs	r3, r0
                         macconf->RetryTransmission | 
 80115d2:	69e0      	ldr	r0, [r4, #28]
                         macconf->ChecksumOffload |    
 80115d4:	4303      	orrs	r3, r0
                         macconf->AutomaticPadCRCStrip | 
 80115d6:	6a20      	ldr	r0, [r4, #32]
                         macconf->RetryTransmission | 
 80115d8:	4303      	orrs	r3, r0
                         macconf->BackOffLimit | 
 80115da:	6a60      	ldr	r0, [r4, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80115dc:	4303      	orrs	r3, r0
                         macconf->DeferralCheck);
 80115de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                         macconf->BackOffLimit | 
 80115e0:	4303      	orrs	r3, r0
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80115e2:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80115e4:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80115e6:	682b      	ldr	r3, [r5, #0]
 80115e8:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80115ea:	2001      	movs	r0, #1
 80115ec:	f7ff fae6 	bl	8010bbc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80115f0:	682b      	ldr	r3, [r5, #0]
 80115f2:	601e      	str	r6, [r3, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80115f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80115f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80115f8:	4313      	orrs	r3, r2
                                          macconf->PassControlFrames |
 80115fa:	6b62      	ldr	r2, [r4, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80115fc:	4313      	orrs	r3, r2
                                          macconf->BroadcastFramesReception | 
 80115fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
                                          macconf->PassControlFrames |
 8011600:	4313      	orrs	r3, r2
                                          macconf->DestinationAddrFilter |
 8011602:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8011604:	4313      	orrs	r3, r2
                                          macconf->PromiscuousMode |
 8011606:	6c22      	ldr	r2, [r4, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8011608:	4313      	orrs	r3, r2
                                          macconf->MulticastFramesFilter |
 801160a:	6c62      	ldr	r2, [r4, #68]	; 0x44
                                          macconf->PromiscuousMode |
 801160c:	4313      	orrs	r3, r2
                                          macconf->UnicastFramesFilter);
 801160e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8011610:	682a      	ldr	r2, [r5, #0]
                                          macconf->MulticastFramesFilter |
 8011612:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8011614:	6053      	str	r3, [r2, #4]
     tmpreg1 = (heth->Instance)->MACFFR;
 8011616:	682b      	ldr	r3, [r5, #0]
 8011618:	685e      	ldr	r6, [r3, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 801161a:	2001      	movs	r0, #1
 801161c:	f7ff face 	bl	8010bbc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8011620:	682b      	ldr	r3, [r5, #0]
 8011622:	605e      	str	r6, [r3, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8011624:	682b      	ldr	r3, [r5, #0]
 8011626:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8011628:	609a      	str	r2, [r3, #8]
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 801162a:	682b      	ldr	r3, [r5, #0]
 801162c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801162e:	60da      	str	r2, [r3, #12]
     tmpreg1 = (heth->Instance)->MACFCR;
 8011630:	6829      	ldr	r1, [r5, #0]
 8011632:	698a      	ldr	r2, [r1, #24]
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8011634:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8011638:	0412      	lsls	r2, r2, #16
 801163a:	0c12      	lsrs	r2, r2, #16
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 801163c:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ZeroQuantaPause |
 801163e:	6da3      	ldr	r3, [r4, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8011640:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                          macconf->PauseLowThreshold |
 8011644:	6de0      	ldr	r0, [r4, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8011646:	4303      	orrs	r3, r0
                          macconf->UnicastPauseFrameDetect | 
 8011648:	6e20      	ldr	r0, [r4, #96]	; 0x60
                          macconf->PauseLowThreshold |
 801164a:	4303      	orrs	r3, r0
                          macconf->ReceiveFlowControl |
 801164c:	6e60      	ldr	r0, [r4, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 801164e:	4303      	orrs	r3, r0
                          macconf->TransmitFlowControl); 
 8011650:	6ea0      	ldr	r0, [r4, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8011652:	4303      	orrs	r3, r0
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8011654:	4313      	orrs	r3, r2
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8011656:	618b      	str	r3, [r1, #24]
     tmpreg1 = (heth->Instance)->MACFCR;
 8011658:	682b      	ldr	r3, [r5, #0]
 801165a:	699e      	ldr	r6, [r3, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 801165c:	2001      	movs	r0, #1
 801165e:	f7ff faad 	bl	8010bbc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8011662:	682b      	ldr	r3, [r5, #0]
 8011664:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8011666:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8011668:	6f21      	ldr	r1, [r4, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 801166a:	682a      	ldr	r2, [r5, #0]
 801166c:	430b      	orrs	r3, r1
 801166e:	61d3      	str	r3, [r2, #28]
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8011670:	682b      	ldr	r3, [r5, #0]
 8011672:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8011674:	2001      	movs	r0, #1
 8011676:	f7ff faa1 	bl	8010bbc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 801167a:	682b      	ldr	r3, [r5, #0]
 801167c:	61dc      	str	r4, [r3, #28]
  heth->State= HAL_ETH_STATE_READY;
 801167e:	2301      	movs	r3, #1
 8011680:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8011684:	2000      	movs	r0, #0
 8011686:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
}
 801168a:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = (heth->Instance)->MACCR;
 801168c:	6801      	ldr	r1, [r0, #0]
 801168e:	680a      	ldr	r2, [r1, #0]
    tmpreg1 &= ~(0x00004800U);
 8011690:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8011694:	6883      	ldr	r3, [r0, #8]
 8011696:	68c0      	ldr	r0, [r0, #12]
 8011698:	4303      	orrs	r3, r0
 801169a:	4313      	orrs	r3, r2
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 801169c:	600b      	str	r3, [r1, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 801169e:	682b      	ldr	r3, [r5, #0]
 80116a0:	681c      	ldr	r4, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80116a2:	2001      	movs	r0, #1
 80116a4:	f7ff fa8a 	bl	8010bbc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80116a8:	682b      	ldr	r3, [r5, #0]
 80116aa:	601c      	str	r4, [r3, #0]
 80116ac:	e7e7      	b.n	801167e <HAL_ETH_ConfigMAC+0xf6>
  __HAL_LOCK(heth);
 80116ae:	2002      	movs	r0, #2
}
 80116b0:	4770      	bx	lr
 80116b2:	bf00      	nop
 80116b4:	ff20810f 	.word	0xff20810f

080116b8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80116b8:	2300      	movs	r3, #0
 80116ba:	2b0f      	cmp	r3, #15
 80116bc:	f200 80dd 	bhi.w	801187a <HAL_GPIO_Init+0x1c2>
{
 80116c0:	b4f0      	push	{r4, r5, r6, r7}
 80116c2:	b082      	sub	sp, #8
 80116c4:	e05d      	b.n	8011782 <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80116c6:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80116c8:	005f      	lsls	r7, r3, #1
 80116ca:	2403      	movs	r4, #3
 80116cc:	40bc      	lsls	r4, r7
 80116ce:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80116d2:	68cc      	ldr	r4, [r1, #12]
 80116d4:	40bc      	lsls	r4, r7
 80116d6:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80116d8:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80116da:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80116dc:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80116e0:	684c      	ldr	r4, [r1, #4]
 80116e2:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80116e6:	409a      	lsls	r2, r3
 80116e8:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80116ea:	6042      	str	r2, [r0, #4]
 80116ec:	e057      	b.n	801179e <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80116ee:	08dc      	lsrs	r4, r3, #3
 80116f0:	3408      	adds	r4, #8
 80116f2:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80116f6:	f003 0207 	and.w	r2, r3, #7
 80116fa:	0096      	lsls	r6, r2, #2
 80116fc:	220f      	movs	r2, #15
 80116fe:	40b2      	lsls	r2, r6
 8011700:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8011704:	690a      	ldr	r2, [r1, #16]
 8011706:	40b2      	lsls	r2, r6
 8011708:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 801170a:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 801170e:	e05a      	b.n	80117c6 <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8011710:	2207      	movs	r2, #7
 8011712:	e000      	b.n	8011716 <HAL_GPIO_Init+0x5e>
 8011714:	2200      	movs	r2, #0
 8011716:	40b2      	lsls	r2, r6
 8011718:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 801171a:	3402      	adds	r4, #2
 801171c:	4e57      	ldr	r6, [pc, #348]	; (801187c <HAL_GPIO_Init+0x1c4>)
 801171e:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011722:	4a57      	ldr	r2, [pc, #348]	; (8011880 <HAL_GPIO_Init+0x1c8>)
 8011724:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8011726:	43ea      	mvns	r2, r5
 8011728:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801172c:	684f      	ldr	r7, [r1, #4]
 801172e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8011732:	d001      	beq.n	8011738 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8011734:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8011738:	4c51      	ldr	r4, [pc, #324]	; (8011880 <HAL_GPIO_Init+0x1c8>)
 801173a:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 801173c:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 801173e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011742:	684f      	ldr	r7, [r1, #4]
 8011744:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8011748:	d001      	beq.n	801174e <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 801174a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 801174e:	4c4c      	ldr	r4, [pc, #304]	; (8011880 <HAL_GPIO_Init+0x1c8>)
 8011750:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011752:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8011754:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011758:	684f      	ldr	r7, [r1, #4]
 801175a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 801175e:	d001      	beq.n	8011764 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8011760:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8011764:	4c46      	ldr	r4, [pc, #280]	; (8011880 <HAL_GPIO_Init+0x1c8>)
 8011766:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8011768:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 801176a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801176c:	684e      	ldr	r6, [r1, #4]
 801176e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8011772:	d001      	beq.n	8011778 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8011774:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8011778:	4c41      	ldr	r4, [pc, #260]	; (8011880 <HAL_GPIO_Init+0x1c8>)
 801177a:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801177c:	3301      	adds	r3, #1
 801177e:	2b0f      	cmp	r3, #15
 8011780:	d878      	bhi.n	8011874 <HAL_GPIO_Init+0x1bc>
    ioposition = 0x01U << position;
 8011782:	2201      	movs	r2, #1
 8011784:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011786:	680c      	ldr	r4, [r1, #0]
 8011788:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 801178c:	ea32 0404 	bics.w	r4, r2, r4
 8011790:	d1f4      	bne.n	801177c <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011792:	684c      	ldr	r4, [r1, #4]
 8011794:	f004 0403 	and.w	r4, r4, #3
 8011798:	3c01      	subs	r4, #1
 801179a:	2c01      	cmp	r4, #1
 801179c:	d993      	bls.n	80116c6 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801179e:	684a      	ldr	r2, [r1, #4]
 80117a0:	f002 0203 	and.w	r2, r2, #3
 80117a4:	2a03      	cmp	r2, #3
 80117a6:	d009      	beq.n	80117bc <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 80117a8:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80117aa:	005e      	lsls	r6, r3, #1
 80117ac:	2203      	movs	r2, #3
 80117ae:	40b2      	lsls	r2, r6
 80117b0:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80117b4:	688a      	ldr	r2, [r1, #8]
 80117b6:	40b2      	lsls	r2, r6
 80117b8:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80117ba:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80117bc:	684a      	ldr	r2, [r1, #4]
 80117be:	f002 0203 	and.w	r2, r2, #3
 80117c2:	2a02      	cmp	r2, #2
 80117c4:	d093      	beq.n	80116ee <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 80117c6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80117c8:	005e      	lsls	r6, r3, #1
 80117ca:	2203      	movs	r2, #3
 80117cc:	40b2      	lsls	r2, r6
 80117ce:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80117d2:	684a      	ldr	r2, [r1, #4]
 80117d4:	f002 0203 	and.w	r2, r2, #3
 80117d8:	40b2      	lsls	r2, r6
 80117da:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80117dc:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80117de:	684a      	ldr	r2, [r1, #4]
 80117e0:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80117e4:	d0ca      	beq.n	801177c <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80117e6:	2200      	movs	r2, #0
 80117e8:	9201      	str	r2, [sp, #4]
 80117ea:	4a26      	ldr	r2, [pc, #152]	; (8011884 <HAL_GPIO_Init+0x1cc>)
 80117ec:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80117ee:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80117f2:	6454      	str	r4, [r2, #68]	; 0x44
 80117f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80117f6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80117fa:	9201      	str	r2, [sp, #4]
 80117fc:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80117fe:	089c      	lsrs	r4, r3, #2
 8011800:	1ca6      	adds	r6, r4, #2
 8011802:	4a1e      	ldr	r2, [pc, #120]	; (801187c <HAL_GPIO_Init+0x1c4>)
 8011804:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8011808:	f003 0203 	and.w	r2, r3, #3
 801180c:	0096      	lsls	r6, r2, #2
 801180e:	220f      	movs	r2, #15
 8011810:	40b2      	lsls	r2, r6
 8011812:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8011816:	4a1c      	ldr	r2, [pc, #112]	; (8011888 <HAL_GPIO_Init+0x1d0>)
 8011818:	4290      	cmp	r0, r2
 801181a:	f43f af7b 	beq.w	8011714 <HAL_GPIO_Init+0x5c>
 801181e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011822:	4290      	cmp	r0, r2
 8011824:	d01a      	beq.n	801185c <HAL_GPIO_Init+0x1a4>
 8011826:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801182a:	4290      	cmp	r0, r2
 801182c:	d018      	beq.n	8011860 <HAL_GPIO_Init+0x1a8>
 801182e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011832:	4290      	cmp	r0, r2
 8011834:	d016      	beq.n	8011864 <HAL_GPIO_Init+0x1ac>
 8011836:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801183a:	4290      	cmp	r0, r2
 801183c:	d014      	beq.n	8011868 <HAL_GPIO_Init+0x1b0>
 801183e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011842:	4290      	cmp	r0, r2
 8011844:	d012      	beq.n	801186c <HAL_GPIO_Init+0x1b4>
 8011846:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801184a:	4290      	cmp	r0, r2
 801184c:	d010      	beq.n	8011870 <HAL_GPIO_Init+0x1b8>
 801184e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011852:	4290      	cmp	r0, r2
 8011854:	f43f af5c 	beq.w	8011710 <HAL_GPIO_Init+0x58>
 8011858:	2208      	movs	r2, #8
 801185a:	e75c      	b.n	8011716 <HAL_GPIO_Init+0x5e>
 801185c:	2201      	movs	r2, #1
 801185e:	e75a      	b.n	8011716 <HAL_GPIO_Init+0x5e>
 8011860:	2202      	movs	r2, #2
 8011862:	e758      	b.n	8011716 <HAL_GPIO_Init+0x5e>
 8011864:	2203      	movs	r2, #3
 8011866:	e756      	b.n	8011716 <HAL_GPIO_Init+0x5e>
 8011868:	2204      	movs	r2, #4
 801186a:	e754      	b.n	8011716 <HAL_GPIO_Init+0x5e>
 801186c:	2205      	movs	r2, #5
 801186e:	e752      	b.n	8011716 <HAL_GPIO_Init+0x5e>
 8011870:	2206      	movs	r2, #6
 8011872:	e750      	b.n	8011716 <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 8011874:	b002      	add	sp, #8
 8011876:	bcf0      	pop	{r4, r5, r6, r7}
 8011878:	4770      	bx	lr
 801187a:	4770      	bx	lr
 801187c:	40013800 	.word	0x40013800
 8011880:	40013c00 	.word	0x40013c00
 8011884:	40023800 	.word	0x40023800
 8011888:	40020000 	.word	0x40020000

0801188c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801188c:	b10a      	cbz	r2, 8011892 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 801188e:	6181      	str	r1, [r0, #24]
 8011890:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8011892:	0409      	lsls	r1, r1, #16
 8011894:	6181      	str	r1, [r0, #24]
  }
}
 8011896:	4770      	bx	lr

08011898 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8011898:	4b01      	ldr	r3, [pc, #4]	; (80118a0 <HAL_RCC_GetHCLKFreq+0x8>)
 801189a:	6818      	ldr	r0, [r3, #0]
 801189c:	4770      	bx	lr
 801189e:	bf00      	nop
 80118a0:	20000000 	.word	0x20000000

080118a4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80118a4:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80118a6:	680c      	ldr	r4, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80118a8:	fa94 f4a4 	rbit	r4, r4
 80118ac:	fab4 f484 	clz	r4, r4
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80118b0:	e04a      	b.n	8011948 <LL_GPIO_Init+0xa4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80118b2:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80118b4:	6882      	ldr	r2, [r0, #8]
 80118b6:	fa93 f5a3 	rbit	r5, r3
 80118ba:	fab5 f585 	clz	r5, r5
 80118be:	006d      	lsls	r5, r5, #1
 80118c0:	2703      	movs	r7, #3
 80118c2:	fa07 f505 	lsl.w	r5, r7, r5
 80118c6:	ea22 0205 	bic.w	r2, r2, r5
 80118ca:	fa93 f5a3 	rbit	r5, r3
 80118ce:	fab5 f585 	clz	r5, r5
 80118d2:	006d      	lsls	r5, r5, #1
 80118d4:	fa06 f505 	lsl.w	r5, r6, r5
 80118d8:	432a      	orrs	r2, r5
 80118da:	6082      	str	r2, [r0, #8]
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80118dc:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80118de:	6842      	ldr	r2, [r0, #4]
 80118e0:	ea22 0203 	bic.w	r2, r2, r3
 80118e4:	fb03 f505 	mul.w	r5, r3, r5
 80118e8:	432a      	orrs	r2, r5
 80118ea:	6042      	str	r2, [r0, #4]
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80118ec:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80118ee:	68c2      	ldr	r2, [r0, #12]
 80118f0:	fa93 f5a3 	rbit	r5, r3
 80118f4:	fab5 f585 	clz	r5, r5
 80118f8:	006d      	lsls	r5, r5, #1
 80118fa:	2703      	movs	r7, #3
 80118fc:	fa07 f505 	lsl.w	r5, r7, r5
 8011900:	ea22 0205 	bic.w	r2, r2, r5
 8011904:	fa93 f5a3 	rbit	r5, r3
 8011908:	fab5 f585 	clz	r5, r5
 801190c:	006d      	lsls	r5, r5, #1
 801190e:	fa06 f505 	lsl.w	r5, r6, r5
 8011912:	432a      	orrs	r2, r5
 8011914:	60c2      	str	r2, [r0, #12]
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8011916:	684a      	ldr	r2, [r1, #4]
 8011918:	2a02      	cmp	r2, #2
 801191a:	d022      	beq.n	8011962 <LL_GPIO_Init+0xbe>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 801191c:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801191e:	6805      	ldr	r5, [r0, #0]
 8011920:	fa93 f6a3 	rbit	r6, r3
 8011924:	fab6 f686 	clz	r6, r6
 8011928:	0076      	lsls	r6, r6, #1
 801192a:	2703      	movs	r7, #3
 801192c:	fa07 f606 	lsl.w	r6, r7, r6
 8011930:	ea25 0506 	bic.w	r5, r5, r6
 8011934:	fa93 f3a3 	rbit	r3, r3
 8011938:	fab3 f383 	clz	r3, r3
 801193c:	005b      	lsls	r3, r3, #1
 801193e:	fa02 f303 	lsl.w	r3, r2, r3
 8011942:	432b      	orrs	r3, r5
 8011944:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8011946:	3401      	adds	r4, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8011948:	680b      	ldr	r3, [r1, #0]
 801194a:	fa33 f204 	lsrs.w	r2, r3, r4
 801194e:	d03c      	beq.n	80119ca <LL_GPIO_Init+0x126>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8011950:	2201      	movs	r2, #1
 8011952:	40a2      	lsls	r2, r4
    if (currentpin)
 8011954:	4013      	ands	r3, r2
 8011956:	d0f6      	beq.n	8011946 <LL_GPIO_Init+0xa2>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8011958:	684a      	ldr	r2, [r1, #4]
 801195a:	3a01      	subs	r2, #1
 801195c:	2a01      	cmp	r2, #1
 801195e:	d8c5      	bhi.n	80118ec <LL_GPIO_Init+0x48>
 8011960:	e7a7      	b.n	80118b2 <LL_GPIO_Init+0xe>
 8011962:	fa93 f2a3 	rbit	r2, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8011966:	fab2 f282 	clz	r2, r2
 801196a:	2a07      	cmp	r2, #7
 801196c:	d815      	bhi.n	801199a <LL_GPIO_Init+0xf6>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801196e:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8011970:	6a02      	ldr	r2, [r0, #32]
 8011972:	fa93 f5a3 	rbit	r5, r3
 8011976:	fab5 f585 	clz	r5, r5
 801197a:	00ad      	lsls	r5, r5, #2
 801197c:	270f      	movs	r7, #15
 801197e:	fa07 f505 	lsl.w	r5, r7, r5
 8011982:	ea22 0205 	bic.w	r2, r2, r5
 8011986:	fa93 f5a3 	rbit	r5, r3
 801198a:	fab5 f585 	clz	r5, r5
 801198e:	00ad      	lsls	r5, r5, #2
 8011990:	fa06 f505 	lsl.w	r5, r6, r5
 8011994:	432a      	orrs	r2, r5
 8011996:	6202      	str	r2, [r0, #32]
}
 8011998:	e7c0      	b.n	801191c <LL_GPIO_Init+0x78>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801199a:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 801199c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801199e:	0a1a      	lsrs	r2, r3, #8
 80119a0:	fa92 f7a2 	rbit	r7, r2
 80119a4:	fab7 f787 	clz	r7, r7
 80119a8:	00bf      	lsls	r7, r7, #2
 80119aa:	f04f 0c0f 	mov.w	ip, #15
 80119ae:	fa0c f707 	lsl.w	r7, ip, r7
 80119b2:	ea26 0607 	bic.w	r6, r6, r7
 80119b6:	fa92 f2a2 	rbit	r2, r2
 80119ba:	fab2 f282 	clz	r2, r2
 80119be:	0092      	lsls	r2, r2, #2
 80119c0:	fa05 f202 	lsl.w	r2, r5, r2
 80119c4:	4332      	orrs	r2, r6
 80119c6:	6242      	str	r2, [r0, #36]	; 0x24
}
 80119c8:	e7a8      	b.n	801191c <LL_GPIO_Init+0x78>
  }

  return (SUCCESS);
}
 80119ca:	2000      	movs	r0, #0
 80119cc:	bcf0      	pop	{r4, r5, r6, r7}
 80119ce:	4770      	bx	lr

080119d0 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80119d0:	4b03      	ldr	r3, [pc, #12]	; (80119e0 <RCC_GetHCLKClockFreq+0x10>)
 80119d2:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80119d4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80119d8:	4a02      	ldr	r2, [pc, #8]	; (80119e4 <RCC_GetHCLKClockFreq+0x14>)
 80119da:	5cd3      	ldrb	r3, [r2, r3]
}
 80119dc:	40d8      	lsrs	r0, r3
 80119de:	4770      	bx	lr
 80119e0:	40023800 	.word	0x40023800
 80119e4:	0801cc60 	.word	0x0801cc60

080119e8 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80119e8:	4b03      	ldr	r3, [pc, #12]	; (80119f8 <RCC_GetPCLK1ClockFreq+0x10>)
 80119ea:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80119ec:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80119f0:	4a02      	ldr	r2, [pc, #8]	; (80119fc <RCC_GetPCLK1ClockFreq+0x14>)
 80119f2:	5cd3      	ldrb	r3, [r2, r3]
}
 80119f4:	40d8      	lsrs	r0, r3
 80119f6:	4770      	bx	lr
 80119f8:	40023800 	.word	0x40023800
 80119fc:	0801cc70 	.word	0x0801cc70

08011a00 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8011a00:	4b03      	ldr	r3, [pc, #12]	; (8011a10 <RCC_GetPCLK2ClockFreq+0x10>)
 8011a02:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8011a04:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8011a08:	4a02      	ldr	r2, [pc, #8]	; (8011a14 <RCC_GetPCLK2ClockFreq+0x14>)
 8011a0a:	5cd3      	ldrb	r3, [r2, r3]
}
 8011a0c:	40d8      	lsrs	r0, r3
 8011a0e:	4770      	bx	lr
 8011a10:	40023800 	.word	0x40023800
 8011a14:	0801cc70 	.word	0x0801cc70

08011a18 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8011a18:	4b0f      	ldr	r3, [pc, #60]	; (8011a58 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8011a1a:	685b      	ldr	r3, [r3, #4]
 8011a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8011a20:	b923      	cbnz	r3, 8011a2c <RCC_PLL_GetFreqDomain_SYS+0x14>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8011a22:	4b0e      	ldr	r3, [pc, #56]	; (8011a5c <RCC_PLL_GetFreqDomain_SYS+0x44>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8011a24:	2808      	cmp	r0, #8
 8011a26:	d003      	beq.n	8011a30 <RCC_PLL_GetFreqDomain_SYS+0x18>
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8011a28:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 8011a2a:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 8011a2c:	4b0c      	ldr	r3, [pc, #48]	; (8011a60 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8011a2e:	e7f9      	b.n	8011a24 <RCC_PLL_GetFreqDomain_SYS+0xc>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8011a30:	4a09      	ldr	r2, [pc, #36]	; (8011a58 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8011a32:	6850      	ldr	r0, [r2, #4]
 8011a34:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8011a38:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8011a3c:	6850      	ldr	r0, [r2, #4]
 8011a3e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8011a42:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8011a46:	6853      	ldr	r3, [r2, #4]
 8011a48:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8011a4c:	3301      	adds	r3, #1
 8011a4e:	005b      	lsls	r3, r3, #1
 8011a50:	fbb0 f0f3 	udiv	r0, r0, r3
 8011a54:	4770      	bx	lr
 8011a56:	bf00      	nop
 8011a58:	40023800 	.word	0x40023800
 8011a5c:	00f42400 	.word	0x00f42400
 8011a60:	007a1200 	.word	0x007a1200

08011a64 <RCC_GetSystemClockFreq>:
{
 8011a64:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8011a66:	4b08      	ldr	r3, [pc, #32]	; (8011a88 <RCC_GetSystemClockFreq+0x24>)
 8011a68:	689b      	ldr	r3, [r3, #8]
 8011a6a:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8011a6e:	2b04      	cmp	r3, #4
 8011a70:	d005      	beq.n	8011a7e <RCC_GetSystemClockFreq+0x1a>
 8011a72:	2b08      	cmp	r3, #8
 8011a74:	d105      	bne.n	8011a82 <RCC_GetSystemClockFreq+0x1e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8011a76:	2008      	movs	r0, #8
 8011a78:	f7ff ffce 	bl	8011a18 <RCC_PLL_GetFreqDomain_SYS>
      break;
 8011a7c:	e002      	b.n	8011a84 <RCC_GetSystemClockFreq+0x20>
      frequency = HSE_VALUE;
 8011a7e:	4803      	ldr	r0, [pc, #12]	; (8011a8c <RCC_GetSystemClockFreq+0x28>)
 8011a80:	e000      	b.n	8011a84 <RCC_GetSystemClockFreq+0x20>
  switch (LL_RCC_GetSysClkSource())
 8011a82:	4803      	ldr	r0, [pc, #12]	; (8011a90 <RCC_GetSystemClockFreq+0x2c>)
}
 8011a84:	bd08      	pop	{r3, pc}
 8011a86:	bf00      	nop
 8011a88:	40023800 	.word	0x40023800
 8011a8c:	007a1200 	.word	0x007a1200
 8011a90:	00f42400 	.word	0x00f42400

08011a94 <LL_RCC_GetSystemClocksFreq>:
{
 8011a94:	b510      	push	{r4, lr}
 8011a96:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8011a98:	f7ff ffe4 	bl	8011a64 <RCC_GetSystemClockFreq>
 8011a9c:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8011a9e:	f7ff ff97 	bl	80119d0 <RCC_GetHCLKClockFreq>
 8011aa2:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8011aa4:	f7ff ffa0 	bl	80119e8 <RCC_GetPCLK1ClockFreq>
 8011aa8:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8011aaa:	6860      	ldr	r0, [r4, #4]
 8011aac:	f7ff ffa8 	bl	8011a00 <RCC_GetPCLK2ClockFreq>
 8011ab0:	60e0      	str	r0, [r4, #12]
}
 8011ab2:	bd10      	pop	{r4, pc}

08011ab4 <LL_USART_Init>:
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8011ab4:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8011ab6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8011aba:	d001      	beq.n	8011ac0 <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 8011abc:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8011abe:	4770      	bx	lr
{
 8011ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ac2:	b085      	sub	sp, #20
 8011ac4:	4604      	mov	r4, r0
 8011ac6:	460d      	mov	r5, r1
    MODIFY_REG(USARTx->CR1,
 8011ac8:	68c3      	ldr	r3, [r0, #12]
 8011aca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8011ace:	f023 030c 	bic.w	r3, r3, #12
 8011ad2:	684a      	ldr	r2, [r1, #4]
 8011ad4:	68c9      	ldr	r1, [r1, #12]
 8011ad6:	430a      	orrs	r2, r1
 8011ad8:	6929      	ldr	r1, [r5, #16]
 8011ada:	430a      	orrs	r2, r1
 8011adc:	69a9      	ldr	r1, [r5, #24]
 8011ade:	430a      	orrs	r2, r1
 8011ae0:	4313      	orrs	r3, r2
 8011ae2:	60c3      	str	r3, [r0, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8011ae4:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8011ae6:	6902      	ldr	r2, [r0, #16]
 8011ae8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8011aec:	4313      	orrs	r3, r2
 8011aee:	6103      	str	r3, [r0, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8011af0:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8011af2:	6942      	ldr	r2, [r0, #20]
 8011af4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8011af8:	4313      	orrs	r3, r2
 8011afa:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8011afc:	4668      	mov	r0, sp
 8011afe:	f7ff ffc9 	bl	8011a94 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8011b02:	4b43      	ldr	r3, [pc, #268]	; (8011c10 <LL_USART_Init+0x15c>)
 8011b04:	429c      	cmp	r4, r3
 8011b06:	d010      	beq.n	8011b2a <LL_USART_Init+0x76>
    else if (USARTx == USART2)
 8011b08:	4b42      	ldr	r3, [pc, #264]	; (8011c14 <LL_USART_Init+0x160>)
 8011b0a:	429c      	cmp	r4, r3
 8011b0c:	d014      	beq.n	8011b38 <LL_USART_Init+0x84>
    else if (USARTx == USART3)
 8011b0e:	4b42      	ldr	r3, [pc, #264]	; (8011c18 <LL_USART_Init+0x164>)
 8011b10:	429c      	cmp	r4, r3
 8011b12:	d013      	beq.n	8011b3c <LL_USART_Init+0x88>
    else if (USARTx == USART6)
 8011b14:	4b41      	ldr	r3, [pc, #260]	; (8011c1c <LL_USART_Init+0x168>)
 8011b16:	429c      	cmp	r4, r3
 8011b18:	d012      	beq.n	8011b40 <LL_USART_Init+0x8c>
    else if (USARTx == UART4)
 8011b1a:	4b41      	ldr	r3, [pc, #260]	; (8011c20 <LL_USART_Init+0x16c>)
 8011b1c:	429c      	cmp	r4, r3
 8011b1e:	d011      	beq.n	8011b44 <LL_USART_Init+0x90>
    else if (USARTx == UART5)
 8011b20:	4b40      	ldr	r3, [pc, #256]	; (8011c24 <LL_USART_Init+0x170>)
 8011b22:	429c      	cmp	r4, r3
 8011b24:	d010      	beq.n	8011b48 <LL_USART_Init+0x94>
  ErrorStatus status = ERROR;
 8011b26:	2001      	movs	r0, #1
 8011b28:	e070      	b.n	8011c0c <LL_USART_Init+0x158>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8011b2a:	9803      	ldr	r0, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8011b2c:	2800      	cmp	r0, #0
 8011b2e:	d06c      	beq.n	8011c0a <LL_USART_Init+0x156>
        && (USART_InitStruct->BaudRate != 0U))
 8011b30:	682b      	ldr	r3, [r5, #0]
 8011b32:	b95b      	cbnz	r3, 8011b4c <LL_USART_Init+0x98>
  ErrorStatus status = ERROR;
 8011b34:	2001      	movs	r0, #1
 8011b36:	e069      	b.n	8011c0c <LL_USART_Init+0x158>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8011b38:	9802      	ldr	r0, [sp, #8]
 8011b3a:	e7f7      	b.n	8011b2c <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8011b3c:	9802      	ldr	r0, [sp, #8]
 8011b3e:	e7f5      	b.n	8011b2c <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8011b40:	9803      	ldr	r0, [sp, #12]
 8011b42:	e7f3      	b.n	8011b2c <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8011b44:	9802      	ldr	r0, [sp, #8]
 8011b46:	e7f1      	b.n	8011b2c <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8011b48:	9802      	ldr	r0, [sp, #8]
 8011b4a:	e7ef      	b.n	8011b2c <LL_USART_Init+0x78>
      LL_USART_SetBaudRate(USARTx,
 8011b4c:	69aa      	ldr	r2, [r5, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8011b4e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8011b52:	d02c      	beq.n	8011bae <LL_USART_Init+0xfa>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8011b54:	2600      	movs	r6, #0
 8011b56:	1805      	adds	r5, r0, r0
 8011b58:	eb46 0106 	adc.w	r1, r6, r6
 8011b5c:	182d      	adds	r5, r5, r0
 8011b5e:	eb46 0101 	adc.w	r1, r6, r1
 8011b62:	00ca      	lsls	r2, r1, #3
 8011b64:	ea42 7255 	orr.w	r2, r2, r5, lsr #29
 8011b68:	00ef      	lsls	r7, r5, #3
 8011b6a:	4611      	mov	r1, r2
 8011b6c:	009a      	lsls	r2, r3, #2
 8011b6e:	0f9b      	lsrs	r3, r3, #30
 8011b70:	1838      	adds	r0, r7, r0
 8011b72:	eb46 0101 	adc.w	r1, r6, r1
 8011b76:	f7fe fb93 	bl	80102a0 <__aeabi_uldivmod>
 8011b7a:	492b      	ldr	r1, [pc, #172]	; (8011c28 <LL_USART_Init+0x174>)
 8011b7c:	fba1 3200 	umull	r3, r2, r1, r0
 8011b80:	0953      	lsrs	r3, r2, #5
 8011b82:	011a      	lsls	r2, r3, #4
 8011b84:	b292      	uxth	r2, r2
 8011b86:	2564      	movs	r5, #100	; 0x64
 8011b88:	fb05 0313 	mls	r3, r5, r3, r0
 8011b8c:	011b      	lsls	r3, r3, #4
 8011b8e:	3332      	adds	r3, #50	; 0x32
 8011b90:	fba1 1303 	umull	r1, r3, r1, r3
 8011b94:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8011b98:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8011b9c:	440a      	add	r2, r1
 8011b9e:	b292      	uxth	r2, r2
 8011ba0:	f003 030f 	and.w	r3, r3, #15
 8011ba4:	4413      	add	r3, r2
 8011ba6:	b29b      	uxth	r3, r3
 8011ba8:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8011baa:	2000      	movs	r0, #0
}
 8011bac:	e02e      	b.n	8011c0c <LL_USART_Init+0x158>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8011bae:	2600      	movs	r6, #0
 8011bb0:	1805      	adds	r5, r0, r0
 8011bb2:	eb46 0106 	adc.w	r1, r6, r6
 8011bb6:	182d      	adds	r5, r5, r0
 8011bb8:	eb46 0101 	adc.w	r1, r6, r1
 8011bbc:	00ca      	lsls	r2, r1, #3
 8011bbe:	ea42 7255 	orr.w	r2, r2, r5, lsr #29
 8011bc2:	00ef      	lsls	r7, r5, #3
 8011bc4:	4611      	mov	r1, r2
 8011bc6:	18da      	adds	r2, r3, r3
 8011bc8:	eb46 0306 	adc.w	r3, r6, r6
 8011bcc:	1838      	adds	r0, r7, r0
 8011bce:	eb46 0101 	adc.w	r1, r6, r1
 8011bd2:	f7fe fb65 	bl	80102a0 <__aeabi_uldivmod>
 8011bd6:	4914      	ldr	r1, [pc, #80]	; (8011c28 <LL_USART_Init+0x174>)
 8011bd8:	fba1 3200 	umull	r3, r2, r1, r0
 8011bdc:	0953      	lsrs	r3, r2, #5
 8011bde:	011a      	lsls	r2, r3, #4
 8011be0:	b292      	uxth	r2, r2
 8011be2:	2564      	movs	r5, #100	; 0x64
 8011be4:	fb05 0313 	mls	r3, r5, r3, r0
 8011be8:	00db      	lsls	r3, r3, #3
 8011bea:	3332      	adds	r3, #50	; 0x32
 8011bec:	fba1 1303 	umull	r1, r3, r1, r3
 8011bf0:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8011bf4:	0059      	lsls	r1, r3, #1
 8011bf6:	f401 71f8 	and.w	r1, r1, #496	; 0x1f0
 8011bfa:	440a      	add	r2, r1
 8011bfc:	b292      	uxth	r2, r2
 8011bfe:	f003 0307 	and.w	r3, r3, #7
 8011c02:	4413      	add	r3, r2
 8011c04:	b29b      	uxth	r3, r3
 8011c06:	60a3      	str	r3, [r4, #8]
 8011c08:	e7cf      	b.n	8011baa <LL_USART_Init+0xf6>
  ErrorStatus status = ERROR;
 8011c0a:	2001      	movs	r0, #1
}
 8011c0c:	b005      	add	sp, #20
 8011c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c10:	40011000 	.word	0x40011000
 8011c14:	40004400 	.word	0x40004400
 8011c18:	40004800 	.word	0x40004800
 8011c1c:	40011400 	.word	0x40011400
 8011c20:	40004c00 	.word	0x40004c00
 8011c24:	40005000 	.word	0x40005000
 8011c28:	51eb851f 	.word	0x51eb851f

08011c2c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8011c2c:	4b01      	ldr	r3, [pc, #4]	; (8011c34 <LL_SetSystemCoreClock+0x8>)
 8011c2e:	6018      	str	r0, [r3, #0]
}
 8011c30:	4770      	bx	lr
 8011c32:	bf00      	nop
 8011c34:	20000000 	.word	0x20000000

08011c38 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8011c38:	b530      	push	{r4, r5, lr}
 8011c3a:	b085      	sub	sp, #20
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8011c3c:	f001 f8fe 	bl	8012e3c <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8011c40:	4914      	ldr	r1, [pc, #80]	; (8011c94 <MX_LWIP_Init+0x5c>)
 8011c42:	2000      	movs	r0, #0
 8011c44:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 8011c46:	4a14      	ldr	r2, [pc, #80]	; (8011c98 <MX_LWIP_Init+0x60>)
 8011c48:	6010      	str	r0, [r2, #0]
  gw.addr = 0;
 8011c4a:	4b14      	ldr	r3, [pc, #80]	; (8011c9c <MX_LWIP_Init+0x64>)
 8011c4c:	6018      	str	r0, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8011c4e:	4c14      	ldr	r4, [pc, #80]	; (8011ca0 <MX_LWIP_Init+0x68>)
 8011c50:	4d14      	ldr	r5, [pc, #80]	; (8011ca4 <MX_LWIP_Init+0x6c>)
 8011c52:	9502      	str	r5, [sp, #8]
 8011c54:	4d14      	ldr	r5, [pc, #80]	; (8011ca8 <MX_LWIP_Init+0x70>)
 8011c56:	9501      	str	r5, [sp, #4]
 8011c58:	9000      	str	r0, [sp, #0]
 8011c5a:	4620      	mov	r0, r4
 8011c5c:	f001 fcec 	bl	8013638 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8011c60:	4620      	mov	r0, r4
 8011c62:	f001 fd7b 	bl	801375c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8011c66:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8011c6a:	f013 0f04 	tst.w	r3, #4
 8011c6e:	d00c      	beq.n	8011c8a <MX_LWIP_Init+0x52>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8011c70:	4620      	mov	r0, r4
 8011c72:	f001 fd79 	bl	8013768 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8011c76:	4c0a      	ldr	r4, [pc, #40]	; (8011ca0 <MX_LWIP_Init+0x68>)
 8011c78:	490c      	ldr	r1, [pc, #48]	; (8011cac <MX_LWIP_Init+0x74>)
 8011c7a:	4620      	mov	r0, r4
 8011c7c:	f001 fdb2 	bl	80137e4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8011c80:	4620      	mov	r0, r4
 8011c82:	f008 f975 	bl	8019f70 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8011c86:	b005      	add	sp, #20
 8011c88:	bd30      	pop	{r4, r5, pc}
    netif_set_down(&gnetif);
 8011c8a:	4805      	ldr	r0, [pc, #20]	; (8011ca0 <MX_LWIP_Init+0x68>)
 8011c8c:	f001 fd8a 	bl	80137a4 <netif_set_down>
 8011c90:	e7f1      	b.n	8011c76 <MX_LWIP_Init+0x3e>
 8011c92:	bf00      	nop
 8011c94:	20000b74 	.word	0x20000b74
 8011c98:	20000b78 	.word	0x20000b78
 8011c9c:	20000b7c 	.word	0x20000b7c
 8011ca0:	20000b3c 	.word	0x20000b3c
 8011ca4:	0801b8d9 	.word	0x0801b8d9
 8011ca8:	08012045 	.word	0x08012045
 8011cac:	08012099 	.word	0x08012099

08011cb0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8011cb0:	b508      	push	{r3, lr}
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8011cb2:	4803      	ldr	r0, [pc, #12]	; (8011cc0 <MX_LWIP_Process+0x10>)
 8011cb4:	f000 f9b6 	bl	8012024 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8011cb8:	f006 fc26 	bl	8018508 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8011cbc:	bd08      	pop	{r3, pc}
 8011cbe:	bf00      	nop
 8011cc0:	20000b3c 	.word	0x20000b3c

08011cc4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8011cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t payloadoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t i=0;

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8011cc8:	4833      	ldr	r0, [pc, #204]	; (8011d98 <low_level_input+0xd4>)
 8011cca:	f7ff fa2f 	bl	801112c <HAL_ETH_GetReceivedFrame>
 8011cce:	2800      	cmp	r0, #0
 8011cd0:	d15e      	bne.n	8011d90 <low_level_input+0xcc>

    return NULL;

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8011cd2:	4b31      	ldr	r3, [pc, #196]	; (8011d98 <low_level_input+0xd4>)
 8011cd4:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8011cd6:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40

  if (len > 0)
 8011cda:	b979      	cbnz	r1, 8011cfc <low_level_input+0x38>
  struct pbuf *p = NULL;
 8011cdc:	f04f 0a00 	mov.w	sl, #0
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8011ce0:	4b2d      	ldr	r3, [pc, #180]	; (8011d98 <low_level_input+0xd4>)
 8011ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8011ce4:	2100      	movs	r1, #0
 8011ce6:	4a2c      	ldr	r2, [pc, #176]	; (8011d98 <low_level_input+0xd4>)
 8011ce8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011cea:	428a      	cmp	r2, r1
 8011cec:	d93b      	bls.n	8011d66 <low_level_input+0xa2>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8011cee:	681a      	ldr	r2, [r3, #0]
 8011cf0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8011cf4:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8011cf6:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8011cf8:	3101      	adds	r1, #1
 8011cfa:	e7f4      	b.n	8011ce6 <low_level_input+0x22>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8011cfc:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8011d00:	f001 feec 	bl	8013adc <pbuf_alloc>
  if (p != NULL)
 8011d04:	4682      	mov	sl, r0
 8011d06:	2800      	cmp	r0, #0
 8011d08:	d0ea      	beq.n	8011ce0 <low_level_input+0x1c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8011d0a:	4b23      	ldr	r3, [pc, #140]	; (8011d98 <low_level_input+0xd4>)
 8011d0c:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8011d0e:	4681      	mov	r9, r0
    bufferoffset = 0;
 8011d10:	2400      	movs	r4, #0
    for(q = p; q != NULL; q = q->next)
 8011d12:	e021      	b.n	8011d58 <low_level_input+0x94>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8011d14:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8011d18:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 8011d1c:	3204      	adds	r2, #4
 8011d1e:	eb08 0104 	add.w	r1, r8, r4
 8011d22:	4430      	add	r0, r6
 8011d24:	f009 fe96 	bl	801ba54 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8011d28:	68ff      	ldr	r7, [r7, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8011d2a:	f8d7 8008 	ldr.w	r8, [r7, #8]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8011d2e:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8011d32:	1b36      	subs	r6, r6, r4
 8011d34:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
        bufferoffset = 0;
 8011d38:	2400      	movs	r4, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8011d3a:	18a5      	adds	r5, r4, r2
 8011d3c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8011d40:	429d      	cmp	r5, r3
 8011d42:	d8e7      	bhi.n	8011d14 <low_level_input+0x50>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8011d44:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8011d48:	eb08 0104 	add.w	r1, r8, r4
 8011d4c:	4430      	add	r0, r6
 8011d4e:	f009 fe81 	bl	801ba54 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8011d52:	f8d9 9000 	ldr.w	r9, [r9]
      bufferoffset = bufferoffset + byteslefttocopy;
 8011d56:	462c      	mov	r4, r5
    for(q = p; q != NULL; q = q->next)
 8011d58:	f1b9 0f00 	cmp.w	r9, #0
 8011d5c:	d0c0      	beq.n	8011ce0 <low_level_input+0x1c>
      byteslefttocopy = q->len;
 8011d5e:	f8b9 200a 	ldrh.w	r2, [r9, #10]
      payloadoffset = 0;
 8011d62:	2600      	movs	r6, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8011d64:	e7e9      	b.n	8011d3a <low_level_input+0x76>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8011d66:	4b0c      	ldr	r3, [pc, #48]	; (8011d98 <low_level_input+0xd4>)
 8011d68:	2200      	movs	r2, #0
 8011d6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	f241 0214 	movw	r2, #4116	; 0x1014
 8011d72:	589a      	ldr	r2, [r3, r2]
 8011d74:	f012 0f80 	tst.w	r2, #128	; 0x80
 8011d78:	d007      	beq.n	8011d8a <low_level_input+0xc6>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8011d7a:	f241 0214 	movw	r2, #4116	; 0x1014
 8011d7e:	2180      	movs	r1, #128	; 0x80
 8011d80:	5099      	str	r1, [r3, r2]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8011d82:	f241 0208 	movw	r2, #4104	; 0x1008
 8011d86:	2100      	movs	r1, #0
 8011d88:	5099      	str	r1, [r3, r2]
  }
  return p;
}
 8011d8a:	4650      	mov	r0, sl
 8011d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return NULL;
 8011d90:	f04f 0a00 	mov.w	sl, #0
 8011d94:	e7f9      	b.n	8011d8a <low_level_input+0xc6>
 8011d96:	bf00      	nop
 8011d98:	20002450 	.word	0x20002450

08011d9c <low_level_output>:
{
 8011d9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011da0:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8011da2:	4b2c      	ldr	r3, [pc, #176]	; (8011e54 <low_level_output+0xb8>)
 8011da4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8011da6:	f8d6 a008 	ldr.w	sl, [r6, #8]
  bufferoffset = 0;
 8011daa:	2400      	movs	r4, #0
  uint32_t framelength = 0;
 8011dac:	4627      	mov	r7, r4
  for(q = p; q != NULL; q = q->next)
 8011dae:	f1bb 0f00 	cmp.w	fp, #0
 8011db2:	d032      	beq.n	8011e1a <low_level_output+0x7e>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8011db4:	6833      	ldr	r3, [r6, #0]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	db35      	blt.n	8011e26 <low_level_output+0x8a>
      byteslefttocopy = q->len;
 8011dba:	f8bb 900a 	ldrh.w	r9, [fp, #10]
      payloadoffset = 0;
 8011dbe:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8011dc0:	eb04 0809 	add.w	r8, r4, r9
 8011dc4:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8011dc8:	4598      	cmp	r8, r3
 8011dca:	d919      	bls.n	8011e00 <low_level_output+0x64>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8011dcc:	f8db 1004 	ldr.w	r1, [fp, #4]
 8011dd0:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 8011dd4:	3204      	adds	r2, #4
 8011dd6:	4429      	add	r1, r5
 8011dd8:	eb0a 0004 	add.w	r0, sl, r4
 8011ddc:	f009 fe3a 	bl	801ba54 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8011de0:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8011de2:	6833      	ldr	r3, [r6, #0]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	db21      	blt.n	8011e2c <low_level_output+0x90>
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8011de8:	f8d6 a008 	ldr.w	sl, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8011dec:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8011df0:	1b2d      	subs	r5, r5, r4
 8011df2:	f205 55f4 	addw	r5, r5, #1524	; 0x5f4
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8011df6:	1b3f      	subs	r7, r7, r4
 8011df8:	f207 57f4 	addw	r7, r7, #1524	; 0x5f4
        bufferoffset = 0;
 8011dfc:	2400      	movs	r4, #0
 8011dfe:	e7df      	b.n	8011dc0 <low_level_output+0x24>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8011e00:	f8db 1004 	ldr.w	r1, [fp, #4]
 8011e04:	464a      	mov	r2, r9
 8011e06:	4429      	add	r1, r5
 8011e08:	eb0a 0004 	add.w	r0, sl, r4
 8011e0c:	f009 fe22 	bl	801ba54 <memcpy>
      framelength = framelength + byteslefttocopy;
 8011e10:	444f      	add	r7, r9
  for(q = p; q != NULL; q = q->next)
 8011e12:	f8db b000 	ldr.w	fp, [fp]
      bufferoffset = bufferoffset + byteslefttocopy;
 8011e16:	4644      	mov	r4, r8
 8011e18:	e7c9      	b.n	8011dae <low_level_output+0x12>
  HAL_ETH_TransmitFrame(&heth, framelength);
 8011e1a:	4639      	mov	r1, r7
 8011e1c:	480d      	ldr	r0, [pc, #52]	; (8011e54 <low_level_output+0xb8>)
 8011e1e:	f7ff f8f5 	bl	801100c <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 8011e22:	2000      	movs	r0, #0
 8011e24:	e004      	b.n	8011e30 <low_level_output+0x94>
        errval = ERR_USE;
 8011e26:	f06f 0007 	mvn.w	r0, #7
 8011e2a:	e001      	b.n	8011e30 <low_level_output+0x94>
          errval = ERR_USE;
 8011e2c:	f06f 0007 	mvn.w	r0, #7
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8011e30:	4b08      	ldr	r3, [pc, #32]	; (8011e54 <low_level_output+0xb8>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	f241 0214 	movw	r2, #4116	; 0x1014
 8011e38:	589a      	ldr	r2, [r3, r2]
 8011e3a:	f012 0f20 	tst.w	r2, #32
 8011e3e:	d007      	beq.n	8011e50 <low_level_output+0xb4>
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8011e40:	f241 0214 	movw	r2, #4116	; 0x1014
 8011e44:	2120      	movs	r1, #32
 8011e46:	5099      	str	r1, [r3, r2]
    heth.Instance->DMATPDR = 0;
 8011e48:	f241 0204 	movw	r2, #4100	; 0x1004
 8011e4c:	2100      	movs	r1, #0
 8011e4e:	5099      	str	r1, [r3, r2]
}
 8011e50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e54:	20002450 	.word	0x20002450

08011e58 <low_level_init>:
{
 8011e58:	b530      	push	{r4, r5, lr}
 8011e5a:	b083      	sub	sp, #12
 8011e5c:	4604      	mov	r4, r0
  heth.Instance = ETH;
 8011e5e:	482f      	ldr	r0, [pc, #188]	; (8011f1c <low_level_init+0xc4>)
 8011e60:	4b2f      	ldr	r3, [pc, #188]	; (8011f20 <low_level_init+0xc8>)
 8011e62:	6003      	str	r3, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8011e64:	2201      	movs	r2, #1
 8011e66:	6042      	str	r2, [r0, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8011e68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011e6c:	6083      	str	r3, [r0, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8011e6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011e72:	60c3      	str	r3, [r0, #12]
  heth.Init.PhyAddress = LAN8720_PHY_ADDRESS_PHY_ADDRESS;
 8011e74:	2300      	movs	r3, #0
 8011e76:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 8011e78:	f88d 3000 	strb.w	r3, [sp]
  MACAddr[1] = 0x80;
 8011e7c:	2180      	movs	r1, #128	; 0x80
 8011e7e:	f88d 1001 	strb.w	r1, [sp, #1]
  MACAddr[2] = 0xE1;
 8011e82:	21e1      	movs	r1, #225	; 0xe1
 8011e84:	f88d 1002 	strb.w	r1, [sp, #2]
  MACAddr[3] = 0x01;
 8011e88:	f88d 2003 	strb.w	r2, [sp, #3]
  MACAddr[4] = 0x02;
 8011e8c:	2202      	movs	r2, #2
 8011e8e:	f88d 2004 	strb.w	r2, [sp, #4]
  MACAddr[5] = 0x03;
 8011e92:	2203      	movs	r2, #3
 8011e94:	f88d 2005 	strb.w	r2, [sp, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8011e98:	f8c0 d014 	str.w	sp, [r0, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8011e9c:	6183      	str	r3, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8011e9e:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8011ea0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011ea4:	6203      	str	r3, [r0, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8011ea6:	f7ff f9ff 	bl	80112a8 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 8011eaa:	b928      	cbnz	r0, 8011eb8 <low_level_init+0x60>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8011eac:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8011eb0:	f043 0304 	orr.w	r3, r3, #4
 8011eb4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8011eb8:	4d18      	ldr	r5, [pc, #96]	; (8011f1c <low_level_init+0xc4>)
 8011eba:	2304      	movs	r3, #4
 8011ebc:	4a19      	ldr	r2, [pc, #100]	; (8011f24 <low_level_init+0xcc>)
 8011ebe:	491a      	ldr	r1, [pc, #104]	; (8011f28 <low_level_init+0xd0>)
 8011ec0:	4628      	mov	r0, r5
 8011ec2:	f7ff f831 	bl	8010f28 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8011ec6:	2304      	movs	r3, #4
 8011ec8:	4a18      	ldr	r2, [pc, #96]	; (8011f2c <low_level_init+0xd4>)
 8011eca:	4919      	ldr	r1, [pc, #100]	; (8011f30 <low_level_init+0xd8>)
 8011ecc:	4628      	mov	r0, r5
 8011ece:	f7ff f865 	bl	8010f9c <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8011ed2:	2306      	movs	r3, #6
 8011ed4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8011ed8:	696b      	ldr	r3, [r5, #20]
 8011eda:	781a      	ldrb	r2, [r3, #0]
 8011edc:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8011ee0:	785a      	ldrb	r2, [r3, #1]
 8011ee2:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8011ee6:	789a      	ldrb	r2, [r3, #2]
 8011ee8:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8011eec:	78da      	ldrb	r2, [r3, #3]
 8011eee:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8011ef2:	791a      	ldrb	r2, [r3, #4]
 8011ef4:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8011ef8:	795b      	ldrb	r3, [r3, #5]
 8011efa:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  netif->mtu = 1500;
 8011efe:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8011f02:	8523      	strh	r3, [r4, #40]	; 0x28
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8011f04:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8011f08:	f043 030a 	orr.w	r3, r3, #10
 8011f0c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  HAL_ETH_Start(&heth);
 8011f10:	4628      	mov	r0, r5
 8011f12:	f7ff faf5 	bl	8011500 <HAL_ETH_Start>
}
 8011f16:	b003      	add	sp, #12
 8011f18:	bd30      	pop	{r4, r5, pc}
 8011f1a:	bf00      	nop
 8011f1c:	20002450 	.word	0x20002450
 8011f20:	40028000 	.word	0x40028000
 8011f24:	20002498 	.word	0x20002498
 8011f28:	20000b80 	.word	0x20000b80
 8011f2c:	20000c00 	.word	0x20000c00
 8011f30:	200023d0 	.word	0x200023d0

08011f34 <HAL_ETH_MspInit>:
{
 8011f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f36:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011f38:	2300      	movs	r3, #0
 8011f3a:	9307      	str	r3, [sp, #28]
 8011f3c:	9308      	str	r3, [sp, #32]
 8011f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8011f40:	930a      	str	r3, [sp, #40]	; 0x28
 8011f42:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8011f44:	6802      	ldr	r2, [r0, #0]
 8011f46:	4b33      	ldr	r3, [pc, #204]	; (8012014 <HAL_ETH_MspInit+0xe0>)
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	d001      	beq.n	8011f50 <HAL_ETH_MspInit+0x1c>
}
 8011f4c:	b00d      	add	sp, #52	; 0x34
 8011f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8011f50:	2400      	movs	r4, #0
 8011f52:	9401      	str	r4, [sp, #4]
 8011f54:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8011f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f5a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8011f5e:	631a      	str	r2, [r3, #48]	; 0x30
 8011f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f62:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8011f66:	9201      	str	r2, [sp, #4]
 8011f68:	9a01      	ldr	r2, [sp, #4]
 8011f6a:	9402      	str	r4, [sp, #8]
 8011f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f6e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8011f72:	631a      	str	r2, [r3, #48]	; 0x30
 8011f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f76:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8011f7a:	9202      	str	r2, [sp, #8]
 8011f7c:	9a02      	ldr	r2, [sp, #8]
 8011f7e:	9403      	str	r4, [sp, #12]
 8011f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f82:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8011f86:	631a      	str	r2, [r3, #48]	; 0x30
 8011f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f8a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8011f8e:	9203      	str	r2, [sp, #12]
 8011f90:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011f92:	9404      	str	r4, [sp, #16]
 8011f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f96:	f042 0204 	orr.w	r2, r2, #4
 8011f9a:	631a      	str	r2, [r3, #48]	; 0x30
 8011f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f9e:	f002 0204 	and.w	r2, r2, #4
 8011fa2:	9204      	str	r2, [sp, #16]
 8011fa4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011fa6:	9405      	str	r4, [sp, #20]
 8011fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011faa:	f042 0201 	orr.w	r2, r2, #1
 8011fae:	631a      	str	r2, [r3, #48]	; 0x30
 8011fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011fb2:	f002 0201 	and.w	r2, r2, #1
 8011fb6:	9205      	str	r2, [sp, #20]
 8011fb8:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011fba:	9406      	str	r4, [sp, #24]
 8011fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011fbe:	f042 0202 	orr.w	r2, r2, #2
 8011fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8011fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fc6:	f003 0302 	and.w	r3, r3, #2
 8011fca:	9306      	str	r3, [sp, #24]
 8011fcc:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8011fce:	2332      	movs	r3, #50	; 0x32
 8011fd0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011fd2:	2702      	movs	r7, #2
 8011fd4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011fd6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011fd8:	2603      	movs	r6, #3
 8011fda:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011fdc:	250b      	movs	r5, #11
 8011fde:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011fe0:	a907      	add	r1, sp, #28
 8011fe2:	480d      	ldr	r0, [pc, #52]	; (8012018 <HAL_ETH_MspInit+0xe4>)
 8011fe4:	f7ff fb68 	bl	80116b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8011fe8:	2386      	movs	r3, #134	; 0x86
 8011fea:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011fec:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011fee:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011ff0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011ff2:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011ff4:	a907      	add	r1, sp, #28
 8011ff6:	4809      	ldr	r0, [pc, #36]	; (801201c <HAL_ETH_MspInit+0xe8>)
 8011ff8:	f7ff fb5e 	bl	80116b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8011ffc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8012000:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012002:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012004:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012006:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012008:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801200a:	a907      	add	r1, sp, #28
 801200c:	4804      	ldr	r0, [pc, #16]	; (8012020 <HAL_ETH_MspInit+0xec>)
 801200e:	f7ff fb53 	bl	80116b8 <HAL_GPIO_Init>
}
 8012012:	e79b      	b.n	8011f4c <HAL_ETH_MspInit+0x18>
 8012014:	40028000 	.word	0x40028000
 8012018:	40020800 	.word	0x40020800
 801201c:	40020000 	.word	0x40020000
 8012020:	40020400 	.word	0x40020400

08012024 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8012024:	b538      	push	{r3, r4, r5, lr}
 8012026:	4604      	mov	r4, r0
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8012028:	f7ff fe4c 	bl	8011cc4 <low_level_input>

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 801202c:	b120      	cbz	r0, 8012038 <ethernetif_input+0x14>
 801202e:	4605      	mov	r5, r0

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8012030:	6923      	ldr	r3, [r4, #16]
 8012032:	4621      	mov	r1, r4
 8012034:	4798      	blx	r3

  if (err != ERR_OK)
 8012036:	b900      	cbnz	r0, 801203a <ethernetif_input+0x16>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
    p = NULL;
  }
}
 8012038:	bd38      	pop	{r3, r4, r5, pc}
    pbuf_free(p);
 801203a:	4628      	mov	r0, r5
 801203c:	f001 fcec 	bl	8013a18 <pbuf_free>
    p = NULL;
 8012040:	e7fa      	b.n	8012038 <ethernetif_input+0x14>
	...

08012044 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8012044:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8012046:	4604      	mov	r4, r0
 8012048:	b170      	cbz	r0, 8012068 <ethernetif_init+0x24>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 801204a:	2373      	movs	r3, #115	; 0x73
 801204c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8012050:	2374      	movs	r3, #116	; 0x74
 8012052:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8012056:	4b08      	ldr	r3, [pc, #32]	; (8012078 <ethernetif_init+0x34>)
 8012058:	6163      	str	r3, [r4, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801205a:	4b08      	ldr	r3, [pc, #32]	; (801207c <ethernetif_init+0x38>)
 801205c:	61a3      	str	r3, [r4, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801205e:	4620      	mov	r0, r4
 8012060:	f7ff fefa 	bl	8011e58 <low_level_init>

  return ERR_OK;
}
 8012064:	2000      	movs	r0, #0
 8012066:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8012068:	4b05      	ldr	r3, [pc, #20]	; (8012080 <ethernetif_init+0x3c>)
 801206a:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 801206e:	4905      	ldr	r1, [pc, #20]	; (8012084 <ethernetif_init+0x40>)
 8012070:	4805      	ldr	r0, [pc, #20]	; (8012088 <ethernetif_init+0x44>)
 8012072:	f009 fd05 	bl	801ba80 <iprintf>
 8012076:	e7e8      	b.n	801204a <ethernetif_init+0x6>
 8012078:	0801a931 	.word	0x0801a931
 801207c:	08011d9d 	.word	0x08011d9d
 8012080:	0801cc78 	.word	0x0801cc78
 8012084:	0801cc94 	.word	0x0801cc94
 8012088:	0801cca4 	.word	0x0801cca4

0801208c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 801208c:	b508      	push	{r3, lr}
  return HAL_GetTick();
 801208e:	f7fe fd8f 	bl	8010bb0 <HAL_GetTick>
}
 8012092:	bd08      	pop	{r3, pc}

08012094 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8012094:	4770      	bx	lr
	...

08012098 <ethernetif_update_config>:
{
 8012098:	b530      	push	{r4, r5, lr}
 801209a:	b083      	sub	sp, #12
 801209c:	4604      	mov	r4, r0
  __IO uint32_t tickstart = 0;
 801209e:	2300      	movs	r3, #0
 80120a0:	9301      	str	r3, [sp, #4]
  uint32_t regvalue = 0;
 80120a2:	9300      	str	r3, [sp, #0]
  if(netif_is_link_up(netif))
 80120a4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80120a8:	f013 0f04 	tst.w	r3, #4
 80120ac:	d051      	beq.n	8012152 <ethernetif_update_config+0xba>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80120ae:	4b2b      	ldr	r3, [pc, #172]	; (801215c <ethernetif_update_config+0xc4>)
 80120b0:	685b      	ldr	r3, [r3, #4]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d035      	beq.n	8012122 <ethernetif_update_config+0x8a>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80120b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80120ba:	2100      	movs	r1, #0
 80120bc:	4827      	ldr	r0, [pc, #156]	; (801215c <ethernetif_update_config+0xc4>)
 80120be:	f7ff f8b8 	bl	8011232 <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 80120c2:	f7fe fd75 	bl	8010bb0 <HAL_GetTick>
 80120c6:	9001      	str	r0, [sp, #4]
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80120c8:	466a      	mov	r2, sp
 80120ca:	2101      	movs	r1, #1
 80120cc:	4823      	ldr	r0, [pc, #140]	; (801215c <ethernetif_update_config+0xc4>)
 80120ce:	f7ff f874 	bl	80111ba <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 80120d2:	f7fe fd6d 	bl	8010bb0 <HAL_GetTick>
 80120d6:	9b01      	ldr	r3, [sp, #4]
 80120d8:	1ac3      	subs	r3, r0, r3
 80120da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80120de:	d820      	bhi.n	8012122 <ethernetif_update_config+0x8a>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80120e0:	9b00      	ldr	r3, [sp, #0]
 80120e2:	f013 0f20 	tst.w	r3, #32
 80120e6:	d0ef      	beq.n	80120c8 <ethernetif_update_config+0x30>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80120e8:	466a      	mov	r2, sp
 80120ea:	211f      	movs	r1, #31
 80120ec:	481b      	ldr	r0, [pc, #108]	; (801215c <ethernetif_update_config+0xc4>)
 80120ee:	f7ff f864 	bl	80111ba <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80120f2:	9b00      	ldr	r3, [sp, #0]
 80120f4:	f013 0f04 	tst.w	r3, #4
 80120f8:	d00a      	beq.n	8012110 <ethernetif_update_config+0x78>
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80120fa:	4a18      	ldr	r2, [pc, #96]	; (801215c <ethernetif_update_config+0xc4>)
 80120fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012100:	60d1      	str	r1, [r2, #12]
      if(regvalue & PHY_SPEED_STATUS)
 8012102:	f013 0f02 	tst.w	r3, #2
 8012106:	d007      	beq.n	8012118 <ethernetif_update_config+0x80>
        heth.Init.Speed = ETH_SPEED_10M;
 8012108:	4b14      	ldr	r3, [pc, #80]	; (801215c <ethernetif_update_config+0xc4>)
 801210a:	2200      	movs	r2, #0
 801210c:	609a      	str	r2, [r3, #8]
 801210e:	e013      	b.n	8012138 <ethernetif_update_config+0xa0>
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8012110:	4a12      	ldr	r2, [pc, #72]	; (801215c <ethernetif_update_config+0xc4>)
 8012112:	2100      	movs	r1, #0
 8012114:	60d1      	str	r1, [r2, #12]
 8012116:	e7f4      	b.n	8012102 <ethernetif_update_config+0x6a>
        heth.Init.Speed = ETH_SPEED_100M;
 8012118:	4b10      	ldr	r3, [pc, #64]	; (801215c <ethernetif_update_config+0xc4>)
 801211a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801211e:	609a      	str	r2, [r3, #8]
 8012120:	e00a      	b.n	8012138 <ethernetif_update_config+0xa0>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8012122:	480e      	ldr	r0, [pc, #56]	; (801215c <ethernetif_update_config+0xc4>)
 8012124:	68c2      	ldr	r2, [r0, #12]
 8012126:	f3c2 02cf 	ubfx	r2, r2, #3, #16
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 801212a:	6883      	ldr	r3, [r0, #8]
 801212c:	f3c3 034f 	ubfx	r3, r3, #1, #16
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8012130:	431a      	orrs	r2, r3
 8012132:	2100      	movs	r1, #0
 8012134:	f7ff f87d 	bl	8011232 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8012138:	4d08      	ldr	r5, [pc, #32]	; (801215c <ethernetif_update_config+0xc4>)
 801213a:	2100      	movs	r1, #0
 801213c:	4628      	mov	r0, r5
 801213e:	f7ff fa23 	bl	8011588 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 8012142:	4628      	mov	r0, r5
 8012144:	f7ff f9dc 	bl	8011500 <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 8012148:	4620      	mov	r0, r4
 801214a:	f7ff ffa3 	bl	8012094 <ethernetif_notify_conn_changed>
}
 801214e:	b003      	add	sp, #12
 8012150:	bd30      	pop	{r4, r5, pc}
    HAL_ETH_Stop(&heth);
 8012152:	4802      	ldr	r0, [pc, #8]	; (801215c <ethernetif_update_config+0xc4>)
 8012154:	f7ff f9f6 	bl	8011544 <HAL_ETH_Stop>
 8012158:	e7f6      	b.n	8012148 <ethernetif_update_config+0xb0>
 801215a:	bf00      	nop
 801215c:	20002450 	.word	0x20002450

08012160 <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8012160:	b1c0      	cbz	r0, 8012194 <fs_open+0x34>
{
 8012162:	b570      	push	{r4, r5, r6, lr}
 8012164:	460d      	mov	r5, r1
 8012166:	4606      	mov	r6, r0
  if ((file == NULL) || (name == NULL)) {
 8012168:	b1b9      	cbz	r1, 801219a <fs_open+0x3a>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 801216a:	4c0d      	ldr	r4, [pc, #52]	; (80121a0 <fs_open+0x40>)
 801216c:	b17c      	cbz	r4, 801218e <fs_open+0x2e>
    if (!strcmp(name, (const char *)f->name)) {
 801216e:	6861      	ldr	r1, [r4, #4]
 8012170:	4628      	mov	r0, r5
 8012172:	f7fe f82d 	bl	80101d0 <strcmp>
 8012176:	b108      	cbz	r0, 801217c <fs_open+0x1c>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8012178:	6824      	ldr	r4, [r4, #0]
 801217a:	e7f7      	b.n	801216c <fs_open+0xc>
      file->data = (const char *)f->data;
 801217c:	68a3      	ldr	r3, [r4, #8]
 801217e:	6033      	str	r3, [r6, #0]
      file->len = f->len;
 8012180:	68e3      	ldr	r3, [r4, #12]
 8012182:	6073      	str	r3, [r6, #4]
      file->index = f->len;
 8012184:	60b3      	str	r3, [r6, #8]
      file->pextension = NULL;
 8012186:	60f0      	str	r0, [r6, #12]
      file->flags = f->flags;
 8012188:	7c23      	ldrb	r3, [r4, #16]
 801218a:	7433      	strb	r3, [r6, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 801218c:	e001      	b.n	8012192 <fs_open+0x32>
    }
  }
  /* file not found */
  return ERR_VAL;
 801218e:	f06f 0005 	mvn.w	r0, #5
}
 8012192:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8012194:	f06f 000f 	mvn.w	r0, #15
}
 8012198:	4770      	bx	lr
    return ERR_ARG;
 801219a:	f06f 000f 	mvn.w	r0, #15
 801219e:	e7f8      	b.n	8012192 <fs_open+0x32>
 80121a0:	0801d9f0 	.word	0x0801d9f0

080121a4 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80121a4:	4770      	bx	lr

080121a6 <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 80121a6:	6842      	ldr	r2, [r0, #4]
 80121a8:	6880      	ldr	r0, [r0, #8]
}
 80121aa:	1a10      	subs	r0, r2, r0
 80121ac:	4770      	bx	lr
	...

080121b0 <httpd_init_pcb>:
static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
  err_t err;

  if (pcb) {
 80121b0:	b330      	cbz	r0, 8012200 <httpd_init_pcb+0x50>
{
 80121b2:	b538      	push	{r3, r4, r5, lr}
 80121b4:	460c      	mov	r4, r1
 80121b6:	4605      	mov	r5, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80121b8:	2101      	movs	r1, #1
 80121ba:	f002 fa1b 	bl	80145f4 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 80121be:	4622      	mov	r2, r4
 80121c0:	4910      	ldr	r1, [pc, #64]	; (8012204 <httpd_init_pcb+0x54>)
 80121c2:	4628      	mov	r0, r5
 80121c4:	f002 f8ac 	bl	8014320 <tcp_bind>
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80121c8:	b950      	cbnz	r0, 80121e0 <httpd_init_pcb+0x30>
    pcb = altcp_listen(pcb);
 80121ca:	21ff      	movs	r1, #255	; 0xff
 80121cc:	4628      	mov	r0, r5
 80121ce:	f002 f97d 	bl	80144cc <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80121d2:	4604      	mov	r4, r0
 80121d4:	b160      	cbz	r0, 80121f0 <httpd_init_pcb+0x40>
    altcp_accept(pcb, http_accept);
 80121d6:	490c      	ldr	r1, [pc, #48]	; (8012208 <httpd_init_pcb+0x58>)
 80121d8:	4620      	mov	r0, r4
 80121da:	f002 fa95 	bl	8014708 <tcp_accept>
  }
}
 80121de:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80121e0:	4b0a      	ldr	r3, [pc, #40]	; (801220c <httpd_init_pcb+0x5c>)
 80121e2:	f640 2257 	movw	r2, #2647	; 0xa57
 80121e6:	490a      	ldr	r1, [pc, #40]	; (8012210 <httpd_init_pcb+0x60>)
 80121e8:	480a      	ldr	r0, [pc, #40]	; (8012214 <httpd_init_pcb+0x64>)
 80121ea:	f009 fc49 	bl	801ba80 <iprintf>
 80121ee:	e7ec      	b.n	80121ca <httpd_init_pcb+0x1a>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80121f0:	4b06      	ldr	r3, [pc, #24]	; (801220c <httpd_init_pcb+0x5c>)
 80121f2:	f640 2259 	movw	r2, #2649	; 0xa59
 80121f6:	4908      	ldr	r1, [pc, #32]	; (8012218 <httpd_init_pcb+0x68>)
 80121f8:	4806      	ldr	r0, [pc, #24]	; (8012214 <httpd_init_pcb+0x64>)
 80121fa:	f009 fc41 	bl	801ba80 <iprintf>
 80121fe:	e7ea      	b.n	80121d6 <httpd_init_pcb+0x26>
 8012200:	4770      	bx	lr
 8012202:	bf00      	nop
 8012204:	0802035c 	.word	0x0802035c
 8012208:	080128c9 	.word	0x080128c9
 801220c:	0801da04 	.word	0x0801da04
 8012210:	0801da3c 	.word	0x0801da3c
 8012214:	0801cca4 	.word	0x0801cca4
 8012218:	0801da58 	.word	0x0801da58

0801221c <http_write>:
{
 801221c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012220:	4605      	mov	r5, r0
 8012222:	460e      	mov	r6, r1
 8012224:	461f      	mov	r7, r3
  LWIP_ASSERT("length != NULL", length != NULL);
 8012226:	4690      	mov	r8, r2
 8012228:	b172      	cbz	r2, 8012248 <http_write+0x2c>
  len = *length;
 801222a:	f8b8 3000 	ldrh.w	r3, [r8]
  if (len == 0) {
 801222e:	b3bb      	cbz	r3, 80122a0 <http_write+0x84>
  max_len = altcp_sndbuf(pcb);
 8012230:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
  if (max_len < len) {
 8012234:	4293      	cmp	r3, r2
 8012236:	d800      	bhi.n	801223a <http_write+0x1e>
  len = *length;
 8012238:	461a      	mov	r2, r3
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 801223a:	8e6c      	ldrh	r4, [r5, #50]	; 0x32
 801223c:	0064      	lsls	r4, r4, #1
 801223e:	b2a4      	uxth	r4, r4
  if (len > max_len) {
 8012240:	42a2      	cmp	r2, r4
 8012242:	d80f      	bhi.n	8012264 <http_write+0x48>
 8012244:	4614      	mov	r4, r2
 8012246:	e00d      	b.n	8012264 <http_write+0x48>
  LWIP_ASSERT("length != NULL", length != NULL);
 8012248:	4b17      	ldr	r3, [pc, #92]	; (80122a8 <http_write+0x8c>)
 801224a:	f240 2219 	movw	r2, #537	; 0x219
 801224e:	4917      	ldr	r1, [pc, #92]	; (80122ac <http_write+0x90>)
 8012250:	4817      	ldr	r0, [pc, #92]	; (80122b0 <http_write+0x94>)
 8012252:	f009 fc15 	bl	801ba80 <iprintf>
 8012256:	e7e8      	b.n	801222a <http_write+0xe>
        len = 1;
 8012258:	2401      	movs	r4, #1
  } while ((err == ERR_MEM) && (len > 1));
 801225a:	f1b0 3fff 	cmp.w	r0, #4294967295
 801225e:	d117      	bne.n	8012290 <http_write+0x74>
 8012260:	2c01      	cmp	r4, #1
 8012262:	d915      	bls.n	8012290 <http_write+0x74>
    err = altcp_write(pcb, ptr, len, apiflags);
 8012264:	463b      	mov	r3, r7
 8012266:	4622      	mov	r2, r4
 8012268:	4631      	mov	r1, r6
 801226a:	4628      	mov	r0, r5
 801226c:	f005 f852 	bl	8017314 <tcp_write>
    if (err == ERR_MEM) {
 8012270:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012274:	d1f1      	bne.n	801225a <http_write+0x3e>
      if ((altcp_sndbuf(pcb) == 0) ||
 8012276:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 801227a:	2b00      	cmp	r3, #0
 801227c:	d0ec      	beq.n	8012258 <http_write+0x3c>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 801227e:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8012282:	2b08      	cmp	r3, #8
 8012284:	d802      	bhi.n	801228c <http_write+0x70>
        len /= 2;
 8012286:	f3c4 044f 	ubfx	r4, r4, #1, #16
 801228a:	e7e6      	b.n	801225a <http_write+0x3e>
        len = 1;
 801228c:	2401      	movs	r4, #1
 801228e:	e7e4      	b.n	801225a <http_write+0x3e>
  if (err == ERR_OK) {
 8012290:	b910      	cbnz	r0, 8012298 <http_write+0x7c>
    *length = len;
 8012292:	f8a8 4000 	strh.w	r4, [r8]
 8012296:	e004      	b.n	80122a2 <http_write+0x86>
    *length = 0;
 8012298:	2300      	movs	r3, #0
 801229a:	f8a8 3000 	strh.w	r3, [r8]
 801229e:	e000      	b.n	80122a2 <http_write+0x86>
    return ERR_OK;
 80122a0:	2000      	movs	r0, #0
}
 80122a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122a6:	bf00      	nop
 80122a8:	0801da04 	.word	0x0801da04
 80122ac:	0801da78 	.word	0x0801da78
 80122b0:	0801cca4 	.word	0x0801cca4

080122b4 <http_send_data_nonssi>:
{
 80122b4:	b510      	push	{r4, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	460c      	mov	r4, r1
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80122ba:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80122bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80122c0:	4293      	cmp	r3, r2
 80122c2:	d814      	bhi.n	80122ee <http_send_data_nonssi+0x3a>
 80122c4:	b29b      	uxth	r3, r3
 80122c6:	f8ad 3006 	strh.w	r3, [sp, #6]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80122ca:	2300      	movs	r3, #0
 80122cc:	f10d 0206 	add.w	r2, sp, #6
 80122d0:	69a1      	ldr	r1, [r4, #24]
 80122d2:	f7ff ffa3 	bl	801221c <http_write>
  if (err == ERR_OK) {
 80122d6:	b968      	cbnz	r0, 80122f4 <http_send_data_nonssi+0x40>
    hs->file += len;
 80122d8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80122dc:	69a2      	ldr	r2, [r4, #24]
 80122de:	440a      	add	r2, r1
 80122e0:	61a2      	str	r2, [r4, #24]
    hs->left -= len;
 80122e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122e4:	1a5b      	subs	r3, r3, r1
 80122e6:	6263      	str	r3, [r4, #36]	; 0x24
    data_to_send = 1;
 80122e8:	2001      	movs	r0, #1
}
 80122ea:	b002      	add	sp, #8
 80122ec:	bd10      	pop	{r4, pc}
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80122ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80122f2:	e7e8      	b.n	80122c6 <http_send_data_nonssi+0x12>
  u8_t data_to_send = 0;
 80122f4:	2000      	movs	r0, #0
 80122f6:	e7f8      	b.n	80122ea <http_send_data_nonssi+0x36>

080122f8 <http_state_eof>:
{
 80122f8:	b510      	push	{r4, lr}
 80122fa:	4604      	mov	r4, r0
  if (hs->handle) {
 80122fc:	6940      	ldr	r0, [r0, #20]
 80122fe:	b118      	cbz	r0, 8012308 <http_state_eof+0x10>
    fs_close(hs->handle);
 8012300:	f7ff ff50 	bl	80121a4 <fs_close>
    hs->handle = NULL;
 8012304:	2300      	movs	r3, #0
 8012306:	6163      	str	r3, [r4, #20]
  if (hs->req) {
 8012308:	6a20      	ldr	r0, [r4, #32]
 801230a:	b118      	cbz	r0, 8012314 <http_state_eof+0x1c>
    pbuf_free(hs->req);
 801230c:	f001 fb84 	bl	8013a18 <pbuf_free>
    hs->req = NULL;
 8012310:	2300      	movs	r3, #0
 8012312:	6223      	str	r3, [r4, #32]
}
 8012314:	bd10      	pop	{r4, pc}

08012316 <http_state_free>:
  if (hs != NULL) {
 8012316:	b138      	cbz	r0, 8012328 <http_state_free+0x12>
{
 8012318:	b510      	push	{r4, lr}
 801231a:	4604      	mov	r4, r0
    http_state_eof(hs);
 801231c:	f7ff ffec 	bl	80122f8 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8012320:	4620      	mov	r0, r4
 8012322:	f000 fe77 	bl	8013014 <mem_free>
}
 8012326:	bd10      	pop	{r4, pc}
 8012328:	4770      	bx	lr
	...

0801232c <http_close_or_abort_conn>:
{
 801232c:	b570      	push	{r4, r5, r6, lr}
 801232e:	4604      	mov	r4, r0
 8012330:	460d      	mov	r5, r1
 8012332:	4616      	mov	r6, r2
  altcp_arg(pcb, NULL);
 8012334:	2100      	movs	r1, #0
 8012336:	f002 f995 	bl	8014664 <tcp_arg>
  altcp_recv(pcb, NULL);
 801233a:	2100      	movs	r1, #0
 801233c:	4620      	mov	r0, r4
 801233e:	f002 f995 	bl	801466c <tcp_recv>
  altcp_err(pcb, NULL);
 8012342:	2100      	movs	r1, #0
 8012344:	4620      	mov	r0, r4
 8012346:	f002 f9c5 	bl	80146d4 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 801234a:	2200      	movs	r2, #0
 801234c:	4611      	mov	r1, r2
 801234e:	4620      	mov	r0, r4
 8012350:	f002 f9e2 	bl	8014718 <tcp_poll>
  altcp_sent(pcb, NULL);
 8012354:	2100      	movs	r1, #0
 8012356:	4620      	mov	r0, r4
 8012358:	f002 f9a2 	bl	80146a0 <tcp_sent>
  if (hs != NULL) {
 801235c:	b115      	cbz	r5, 8012364 <http_close_or_abort_conn+0x38>
    http_state_free(hs);
 801235e:	4628      	mov	r0, r5
 8012360:	f7ff ffd9 	bl	8012316 <http_state_free>
  if (abort_conn) {
 8012364:	b936      	cbnz	r6, 8012374 <http_close_or_abort_conn+0x48>
  err = altcp_close(pcb);
 8012366:	4620      	mov	r0, r4
 8012368:	f002 fd4c 	bl	8014e04 <tcp_close>
  if (err != ERR_OK) {
 801236c:	4605      	mov	r5, r0
 801236e:	b930      	cbnz	r0, 801237e <http_close_or_abort_conn+0x52>
}
 8012370:	4628      	mov	r0, r5
 8012372:	bd70      	pop	{r4, r5, r6, pc}
    altcp_abort(pcb);
 8012374:	4620      	mov	r0, r4
 8012376:	f002 fb59 	bl	8014a2c <tcp_abort>
    return ERR_OK;
 801237a:	2500      	movs	r5, #0
 801237c:	e7f8      	b.n	8012370 <http_close_or_abort_conn+0x44>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 801237e:	2204      	movs	r2, #4
 8012380:	4902      	ldr	r1, [pc, #8]	; (801238c <http_close_or_abort_conn+0x60>)
 8012382:	4620      	mov	r0, r4
 8012384:	f002 f9c8 	bl	8014718 <tcp_poll>
 8012388:	e7f2      	b.n	8012370 <http_close_or_abort_conn+0x44>
 801238a:	bf00      	nop
 801238c:	08012455 	.word	0x08012455

08012390 <http_close_conn>:
{
 8012390:	b508      	push	{r3, lr}
  return http_close_or_abort_conn(pcb, hs, 0);
 8012392:	2200      	movs	r2, #0
 8012394:	f7ff ffca 	bl	801232c <http_close_or_abort_conn>
}
 8012398:	bd08      	pop	{r3, pc}

0801239a <http_eof>:
{
 801239a:	b508      	push	{r3, lr}
    http_close_conn(pcb, hs);
 801239c:	f7ff fff8 	bl	8012390 <http_close_conn>
}
 80123a0:	bd08      	pop	{r3, pc}
	...

080123a4 <http_check_eof>:
{
 80123a4:	b538      	push	{r3, r4, r5, lr}
 80123a6:	4605      	mov	r5, r0
 80123a8:	460c      	mov	r4, r1
  if (hs->handle == NULL) {
 80123aa:	6948      	ldr	r0, [r1, #20]
 80123ac:	b160      	cbz	r0, 80123c8 <http_check_eof+0x24>
  bytes_left = fs_bytes_left(hs->handle);
 80123ae:	f7ff fefa 	bl	80121a6 <fs_bytes_left>
  if (bytes_left <= 0) {
 80123b2:	2800      	cmp	r0, #0
 80123b4:	dd0d      	ble.n	80123d2 <http_check_eof+0x2e>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80123b6:	4b0a      	ldr	r3, [pc, #40]	; (80123e0 <http_check_eof+0x3c>)
 80123b8:	f240 429d 	movw	r2, #1181	; 0x49d
 80123bc:	4909      	ldr	r1, [pc, #36]	; (80123e4 <http_check_eof+0x40>)
 80123be:	480a      	ldr	r0, [pc, #40]	; (80123e8 <http_check_eof+0x44>)
 80123c0:	f009 fb5e 	bl	801ba80 <iprintf>
  return 1;
 80123c4:	2001      	movs	r0, #1
}
 80123c6:	bd38      	pop	{r3, r4, r5, pc}
    http_eof(pcb, hs);
 80123c8:	4628      	mov	r0, r5
 80123ca:	f7ff ffe6 	bl	801239a <http_eof>
    return 0;
 80123ce:	2000      	movs	r0, #0
 80123d0:	e7f9      	b.n	80123c6 <http_check_eof+0x22>
    http_eof(pcb, hs);
 80123d2:	4621      	mov	r1, r4
 80123d4:	4628      	mov	r0, r5
 80123d6:	f7ff ffe0 	bl	801239a <http_eof>
    return 0;
 80123da:	2000      	movs	r0, #0
 80123dc:	e7f3      	b.n	80123c6 <http_check_eof+0x22>
 80123de:	bf00      	nop
 80123e0:	0801da04 	.word	0x0801da04
 80123e4:	0801da88 	.word	0x0801da88
 80123e8:	0801cca4 	.word	0x0801cca4

080123ec <http_send>:
{
 80123ec:	b570      	push	{r4, r5, r6, lr}
  if (hs == NULL) {
 80123ee:	b1d9      	cbz	r1, 8012428 <http_send+0x3c>
 80123f0:	4604      	mov	r4, r0
 80123f2:	460e      	mov	r6, r1
  if (hs->left == 0) {
 80123f4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80123f6:	b91b      	cbnz	r3, 8012400 <http_send+0x14>
    if (!http_check_eof(pcb, hs)) {
 80123f8:	f7ff ffd4 	bl	80123a4 <http_check_eof>
 80123fc:	4605      	mov	r5, r0
 80123fe:	b130      	cbz	r0, 801240e <http_send+0x22>
    data_to_send = http_send_data_nonssi(pcb, hs);
 8012400:	4631      	mov	r1, r6
 8012402:	4620      	mov	r0, r4
 8012404:	f7ff ff56 	bl	80122b4 <http_send_data_nonssi>
 8012408:	4605      	mov	r5, r0
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 801240a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801240c:	b10b      	cbz	r3, 8012412 <http_send+0x26>
}
 801240e:	4628      	mov	r0, r5
 8012410:	bd70      	pop	{r4, r5, r6, pc}
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8012412:	6970      	ldr	r0, [r6, #20]
 8012414:	f7ff fec7 	bl	80121a6 <fs_bytes_left>
 8012418:	2800      	cmp	r0, #0
 801241a:	dcf8      	bgt.n	801240e <http_send+0x22>
    http_eof(pcb, hs);
 801241c:	4631      	mov	r1, r6
 801241e:	4620      	mov	r0, r4
 8012420:	f7ff ffbb 	bl	801239a <http_eof>
    return 0;
 8012424:	2500      	movs	r5, #0
 8012426:	e7f2      	b.n	801240e <http_send+0x22>
    return 0;
 8012428:	2500      	movs	r5, #0
 801242a:	e7f0      	b.n	801240e <http_send+0x22>

0801242c <http_sent>:
  if (hs == NULL) {
 801242c:	b150      	cbz	r0, 8012444 <http_sent+0x18>
{
 801242e:	b508      	push	{r3, lr}
 8012430:	460b      	mov	r3, r1
 8012432:	4601      	mov	r1, r0
  hs->retries = 0;
 8012434:	2200      	movs	r2, #0
 8012436:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  http_send(pcb, hs);
 801243a:	4618      	mov	r0, r3
 801243c:	f7ff ffd6 	bl	80123ec <http_send>
}
 8012440:	2000      	movs	r0, #0
 8012442:	bd08      	pop	{r3, pc}
 8012444:	2000      	movs	r0, #0
 8012446:	4770      	bx	lr

08012448 <http_err>:
  if (hs != NULL) {
 8012448:	b118      	cbz	r0, 8012452 <http_err+0xa>
{
 801244a:	b508      	push	{r3, lr}
    http_state_free(hs);
 801244c:	f7ff ff63 	bl	8012316 <http_state_free>
}
 8012450:	bd08      	pop	{r3, pc}
 8012452:	4770      	bx	lr

08012454 <http_poll>:
{
 8012454:	b510      	push	{r4, lr}
 8012456:	460c      	mov	r4, r1
  if (hs == NULL) {
 8012458:	b180      	cbz	r0, 801247c <http_poll+0x28>
 801245a:	4601      	mov	r1, r0
    hs->retries++;
 801245c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8012460:	3301      	adds	r3, #1
 8012462:	b2db      	uxtb	r3, r3
 8012464:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8012468:	2b04      	cmp	r3, #4
 801246a:	d00c      	beq.n	8012486 <http_poll+0x32>
    if (hs->handle) {
 801246c:	6943      	ldr	r3, [r0, #20]
 801246e:	b11b      	cbz	r3, 8012478 <http_poll+0x24>
      if (http_send(pcb, hs)) {
 8012470:	4620      	mov	r0, r4
 8012472:	f7ff ffbb 	bl	80123ec <http_send>
 8012476:	b950      	cbnz	r0, 801248e <http_poll+0x3a>
}
 8012478:	2000      	movs	r0, #0
 801247a:	bd10      	pop	{r4, pc}
    closed = http_close_conn(pcb, NULL);
 801247c:	2100      	movs	r1, #0
 801247e:	4620      	mov	r0, r4
 8012480:	f7ff ff86 	bl	8012390 <http_close_conn>
    return ERR_OK;
 8012484:	e7f8      	b.n	8012478 <http_poll+0x24>
      http_close_conn(pcb, hs);
 8012486:	4620      	mov	r0, r4
 8012488:	f7ff ff82 	bl	8012390 <http_close_conn>
      return ERR_OK;
 801248c:	e7f4      	b.n	8012478 <http_poll+0x24>
        altcp_output(pcb);
 801248e:	4620      	mov	r0, r4
 8012490:	f005 fd4e 	bl	8017f30 <tcp_output>
 8012494:	e7f0      	b.n	8012478 <http_poll+0x24>
	...

08012498 <http_init_file>:
{
 8012498:	b570      	push	{r4, r5, r6, lr}
 801249a:	4604      	mov	r4, r0
  if (file != NULL) {
 801249c:	2900      	cmp	r1, #0
 801249e:	d041      	beq.n	8012524 <http_init_file+0x8c>
 80124a0:	4616      	mov	r6, r2
 80124a2:	460d      	mov	r5, r1
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80124a4:	680b      	ldr	r3, [r1, #0]
 80124a6:	b32b      	cbz	r3, 80124f4 <http_init_file+0x5c>
    hs->handle = file;
 80124a8:	6165      	str	r5, [r4, #20]
    hs->file = file->data;
 80124aa:	682b      	ldr	r3, [r5, #0]
 80124ac:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80124ae:	686b      	ldr	r3, [r5, #4]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	db27      	blt.n	8012504 <http_init_file+0x6c>
      hs->left = (u32_t)file->len;
 80124b4:	686b      	ldr	r3, [r5, #4]
 80124b6:	6263      	str	r3, [r4, #36]	; 0x24
    hs->retries = 0;
 80124b8:	2300      	movs	r3, #0
 80124ba:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 80124be:	6963      	ldr	r3, [r4, #20]
 80124c0:	7c1b      	ldrb	r3, [r3, #16]
 80124c2:	f013 0f01 	tst.w	r3, #1
 80124c6:	d025      	beq.n	8012514 <http_init_file+0x7c>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80124c8:	2e00      	cmp	r6, #0
 80124ca:	d031      	beq.n	8012530 <http_init_file+0x98>
 80124cc:	6963      	ldr	r3, [r4, #20]
 80124ce:	7c1b      	ldrb	r3, [r3, #16]
 80124d0:	f013 0f01 	tst.w	r3, #1
 80124d4:	d02c      	beq.n	8012530 <http_init_file+0x98>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80124d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80124d8:	4916      	ldr	r1, [pc, #88]	; (8012534 <http_init_file+0x9c>)
 80124da:	69a0      	ldr	r0, [r4, #24]
 80124dc:	f000 fa55 	bl	801298a <lwip_strnstr>
      if (file_start != NULL) {
 80124e0:	4603      	mov	r3, r0
 80124e2:	b328      	cbz	r0, 8012530 <http_init_file+0x98>
        int diff = file_start + 4 - hs->file;
 80124e4:	3304      	adds	r3, #4
 80124e6:	69a2      	ldr	r2, [r4, #24]
 80124e8:	1a9a      	subs	r2, r3, r2
        hs->file += diff;
 80124ea:	61a3      	str	r3, [r4, #24]
        hs->left -= (u32_t)diff;
 80124ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124ee:	1a9b      	subs	r3, r3, r2
 80124f0:	6263      	str	r3, [r4, #36]	; 0x24
 80124f2:	e01d      	b.n	8012530 <http_init_file+0x98>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80124f4:	4b10      	ldr	r3, [pc, #64]	; (8012538 <http_init_file+0xa0>)
 80124f6:	f640 120b 	movw	r2, #2315	; 0x90b
 80124fa:	4910      	ldr	r1, [pc, #64]	; (801253c <http_init_file+0xa4>)
 80124fc:	4810      	ldr	r0, [pc, #64]	; (8012540 <http_init_file+0xa8>)
 80124fe:	f009 fabf 	bl	801ba80 <iprintf>
 8012502:	e7d1      	b.n	80124a8 <http_init_file+0x10>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8012504:	4b0c      	ldr	r3, [pc, #48]	; (8012538 <http_init_file+0xa0>)
 8012506:	f640 1234 	movw	r2, #2356	; 0x934
 801250a:	490e      	ldr	r1, [pc, #56]	; (8012544 <http_init_file+0xac>)
 801250c:	480c      	ldr	r0, [pc, #48]	; (8012540 <http_init_file+0xa8>)
 801250e:	f009 fab7 	bl	801ba80 <iprintf>
 8012512:	e7cf      	b.n	80124b4 <http_init_file+0x1c>
    LWIP_ASSERT("HTTP headers not included in file system",
 8012514:	4b08      	ldr	r3, [pc, #32]	; (8012538 <http_init_file+0xa0>)
 8012516:	f640 1243 	movw	r2, #2371	; 0x943
 801251a:	490b      	ldr	r1, [pc, #44]	; (8012548 <http_init_file+0xb0>)
 801251c:	4808      	ldr	r0, [pc, #32]	; (8012540 <http_init_file+0xa8>)
 801251e:	f009 faaf 	bl	801ba80 <iprintf>
 8012522:	e7d1      	b.n	80124c8 <http_init_file+0x30>
    hs->handle = NULL;
 8012524:	2300      	movs	r3, #0
 8012526:	6143      	str	r3, [r0, #20]
    hs->file = NULL;
 8012528:	6183      	str	r3, [r0, #24]
    hs->left = 0;
 801252a:	6243      	str	r3, [r0, #36]	; 0x24
    hs->retries = 0;
 801252c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
}
 8012530:	2000      	movs	r0, #0
 8012532:	bd70      	pop	{r4, r5, r6, pc}
 8012534:	0801db20 	.word	0x0801db20
 8012538:	0801da04 	.word	0x0801da04
 801253c:	0801dac0 	.word	0x0801dac0
 8012540:	0801cca4 	.word	0x0801cca4
 8012544:	0801dad4 	.word	0x0801dad4
 8012548:	0801daf4 	.word	0x0801daf4

0801254c <http_get_404_file>:
{
 801254c:	b570      	push	{r4, r5, r6, lr}
 801254e:	4606      	mov	r6, r0
 8012550:	460c      	mov	r4, r1
  *uri = "/404.html";
 8012552:	490c      	ldr	r1, [pc, #48]	; (8012584 <http_get_404_file+0x38>)
 8012554:	6021      	str	r1, [r4, #0]
  err = fs_open(&hs->file_handle, *uri);
 8012556:	4605      	mov	r5, r0
 8012558:	f7ff fe02 	bl	8012160 <fs_open>
  if (err != ERR_OK) {
 801255c:	b908      	cbnz	r0, 8012562 <http_get_404_file+0x16>
}
 801255e:	4628      	mov	r0, r5
 8012560:	bd70      	pop	{r4, r5, r6, pc}
    *uri = "/404.htm";
 8012562:	4909      	ldr	r1, [pc, #36]	; (8012588 <http_get_404_file+0x3c>)
 8012564:	6021      	str	r1, [r4, #0]
    err = fs_open(&hs->file_handle, *uri);
 8012566:	4630      	mov	r0, r6
 8012568:	f7ff fdfa 	bl	8012160 <fs_open>
    if (err != ERR_OK) {
 801256c:	2800      	cmp	r0, #0
 801256e:	d0f6      	beq.n	801255e <http_get_404_file+0x12>
      *uri = "/404.shtml";
 8012570:	4906      	ldr	r1, [pc, #24]	; (801258c <http_get_404_file+0x40>)
 8012572:	6021      	str	r1, [r4, #0]
      err = fs_open(&hs->file_handle, *uri);
 8012574:	4630      	mov	r0, r6
 8012576:	f7ff fdf3 	bl	8012160 <fs_open>
      if (err != ERR_OK) {
 801257a:	2800      	cmp	r0, #0
 801257c:	d0ef      	beq.n	801255e <http_get_404_file+0x12>
        *uri = NULL;
 801257e:	2500      	movs	r5, #0
 8012580:	6025      	str	r5, [r4, #0]
        return NULL;
 8012582:	e7ec      	b.n	801255e <http_get_404_file+0x12>
 8012584:	0801db28 	.word	0x0801db28
 8012588:	0801db34 	.word	0x0801db34
 801258c:	0801db40 	.word	0x0801db40

08012590 <http_find_file>:
{
 8012590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012594:	b085      	sub	sp, #20
 8012596:	4604      	mov	r4, r0
 8012598:	9103      	str	r1, [sp, #12]
 801259a:	4616      	mov	r6, r2
  size_t uri_len = strlen(uri);
 801259c:	460d      	mov	r5, r1
 801259e:	4608      	mov	r0, r1
 80125a0:	f7fd fe20 	bl	80101e4 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80125a4:	b120      	cbz	r0, 80125b0 <http_find_file+0x20>
 80125a6:	4680      	mov	r8, r0
 80125a8:	1e47      	subs	r7, r0, #1
 80125aa:	5deb      	ldrb	r3, [r5, r7]
 80125ac:	2b2f      	cmp	r3, #47	; 0x2f
 80125ae:	d01d      	beq.n	80125ec <http_find_file+0x5c>
    params = (char *)strchr(uri, '?');
 80125b0:	213f      	movs	r1, #63	; 0x3f
 80125b2:	9803      	ldr	r0, [sp, #12]
 80125b4:	f009 fb32 	bl	801bc1c <strchr>
    if (params != NULL) {
 80125b8:	4607      	mov	r7, r0
 80125ba:	b110      	cbz	r0, 80125c2 <http_find_file+0x32>
      *params = '\0';
 80125bc:	2300      	movs	r3, #0
 80125be:	f807 3b01 	strb.w	r3, [r7], #1
    err = fs_open(&hs->file_handle, uri);
 80125c2:	4625      	mov	r5, r4
 80125c4:	9903      	ldr	r1, [sp, #12]
 80125c6:	4620      	mov	r0, r4
 80125c8:	f7ff fdca 	bl	8012160 <fs_open>
    if (err == ERR_OK) {
 80125cc:	2800      	cmp	r0, #0
 80125ce:	d15b      	bne.n	8012688 <http_find_file+0xf8>
  if (file == NULL) {
 80125d0:	2d00      	cmp	r5, #0
 80125d2:	d05f      	beq.n	8012694 <http_find_file+0x104>
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80125d4:	9701      	str	r7, [sp, #4]
 80125d6:	2300      	movs	r3, #0
 80125d8:	9300      	str	r3, [sp, #0]
 80125da:	9b03      	ldr	r3, [sp, #12]
 80125dc:	4632      	mov	r2, r6
 80125de:	4629      	mov	r1, r5
 80125e0:	4620      	mov	r0, r4
 80125e2:	f7ff ff59 	bl	8012498 <http_init_file>
}
 80125e6:	b005      	add	sp, #20
 80125e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80125ec:	4b2c      	ldr	r3, [pc, #176]	; (80126a0 <http_find_file+0x110>)
 80125ee:	429d      	cmp	r5, r3
 80125f0:	d008      	beq.n	8012604 <http_find_file+0x74>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80125f2:	2f3f      	cmp	r7, #63	; 0x3f
 80125f4:	bf28      	it	cs
 80125f6:	273f      	movcs	r7, #63	; 0x3f
    if (copy_len > 0) {
 80125f8:	f1b8 0f01 	cmp.w	r8, #1
 80125fc:	d105      	bne.n	801260a <http_find_file+0x7a>
        file_name = http_uri_buf;
 80125fe:	f04f 0900 	mov.w	r9, #0
 8012602:	e02d      	b.n	8012660 <http_find_file+0xd0>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8012604:	2801      	cmp	r0, #1
 8012606:	d1d3      	bne.n	80125b0 <http_find_file+0x20>
 8012608:	e7f3      	b.n	80125f2 <http_find_file+0x62>
      MEMCPY(http_uri_buf, uri, copy_len);
 801260a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80126a0 <http_find_file+0x110>
 801260e:	463a      	mov	r2, r7
 8012610:	4629      	mov	r1, r5
 8012612:	4648      	mov	r0, r9
 8012614:	f009 fa1e 	bl	801ba54 <memcpy>
      http_uri_buf[copy_len] = 0;
 8012618:	2300      	movs	r3, #0
 801261a:	f809 3007 	strb.w	r3, [r9, r7]
 801261e:	e7ee      	b.n	80125fe <http_find_file+0x6e>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8012620:	4b20      	ldr	r3, [pc, #128]	; (80126a4 <http_find_file+0x114>)
 8012622:	f853 a039 	ldr.w	sl, [r3, r9, lsl #3]
 8012626:	4650      	mov	r0, sl
 8012628:	f7fd fddc 	bl	80101e4 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 801262c:	4583      	cmp	fp, r0
 801262e:	bf28      	it	cs
 8012630:	4683      	movcs	fp, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8012632:	4d1b      	ldr	r5, [pc, #108]	; (80126a0 <http_find_file+0x110>)
 8012634:	465a      	mov	r2, fp
 8012636:	4651      	mov	r1, sl
 8012638:	19e8      	adds	r0, r5, r7
 801263a:	f009 fa0b 	bl	801ba54 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 801263e:	44bb      	add	fp, r7
 8012640:	2300      	movs	r3, #0
 8012642:	f805 300b 	strb.w	r3, [r5, fp]
        file_name = http_uri_buf;
 8012646:	46aa      	mov	sl, r5
 8012648:	e002      	b.n	8012650 <http_find_file+0xc0>
        file_name = httpd_default_filenames[loop].name;
 801264a:	4b16      	ldr	r3, [pc, #88]	; (80126a4 <http_find_file+0x114>)
 801264c:	f853 a039 	ldr.w	sl, [r3, r9, lsl #3]
      err = fs_open(&hs->file_handle, file_name);
 8012650:	4625      	mov	r5, r4
 8012652:	4651      	mov	r1, sl
 8012654:	4620      	mov	r0, r4
 8012656:	f7ff fd83 	bl	8012160 <fs_open>
      if (err == ERR_OK) {
 801265a:	b168      	cbz	r0, 8012678 <http_find_file+0xe8>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 801265c:	f109 0901 	add.w	r9, r9, #1
 8012660:	f1b9 0f04 	cmp.w	r9, #4
 8012664:	d80b      	bhi.n	801267e <http_find_file+0xee>
      if (copy_len > 0) {
 8012666:	f1b8 0f01 	cmp.w	r8, #1
 801266a:	d0ee      	beq.n	801264a <http_find_file+0xba>
        if (len_left > 0) {
 801266c:	f1d7 0b3f 	rsbs	fp, r7, #63	; 0x3f
 8012670:	d1d6      	bne.n	8012620 <http_find_file+0x90>
        file_name = http_uri_buf;
 8012672:	f8df a02c 	ldr.w	sl, [pc, #44]	; 80126a0 <http_find_file+0x110>
 8012676:	e7eb      	b.n	8012650 <http_find_file+0xc0>
        uri = file_name;
 8012678:	f8cd a00c 	str.w	sl, [sp, #12]
        break;
 801267c:	e000      	b.n	8012680 <http_find_file+0xf0>
  struct fs_file *file = NULL;
 801267e:	2500      	movs	r5, #0
  if (file == NULL) {
 8012680:	2d00      	cmp	r5, #0
 8012682:	d095      	beq.n	80125b0 <http_find_file+0x20>
  char *params = NULL;
 8012684:	2700      	movs	r7, #0
 8012686:	e7a3      	b.n	80125d0 <http_find_file+0x40>
      file = http_get_404_file(hs, &uri);
 8012688:	a903      	add	r1, sp, #12
 801268a:	4620      	mov	r0, r4
 801268c:	f7ff ff5e 	bl	801254c <http_get_404_file>
 8012690:	4605      	mov	r5, r0
 8012692:	e79d      	b.n	80125d0 <http_find_file+0x40>
    file = http_get_404_file(hs, &uri);
 8012694:	a903      	add	r1, sp, #12
 8012696:	4620      	mov	r0, r4
 8012698:	f7ff ff58 	bl	801254c <http_get_404_file>
 801269c:	4605      	mov	r5, r0
 801269e:	e799      	b.n	80125d4 <http_find_file+0x44>
 80126a0:	200000e0 	.word	0x200000e0
 80126a4:	0801dbec 	.word	0x0801dbec

080126a8 <http_parse_request>:
{
 80126a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126ac:	460c      	mov	r4, r1
  LWIP_ASSERT("p != NULL", p != NULL);
 80126ae:	4605      	mov	r5, r0
 80126b0:	2800      	cmp	r0, #0
 80126b2:	d04f      	beq.n	8012754 <http_parse_request+0xac>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 80126b4:	2c00      	cmp	r4, #0
 80126b6:	d055      	beq.n	8012764 <http_parse_request+0xbc>
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80126b8:	6963      	ldr	r3, [r4, #20]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d17e      	bne.n	80127bc <http_parse_request+0x114>
 80126be:	69a3      	ldr	r3, [r4, #24]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d17e      	bne.n	80127c2 <http_parse_request+0x11a>
  if (hs->req == NULL) {
 80126c4:	6a20      	ldr	r0, [r4, #32]
 80126c6:	2800      	cmp	r0, #0
 80126c8:	d054      	beq.n	8012774 <http_parse_request+0xcc>
    pbuf_cat(hs->req, p);
 80126ca:	4629      	mov	r1, r5
 80126cc:	f001 fb28 	bl	8013d20 <pbuf_cat>
  pbuf_ref(p);
 80126d0:	4628      	mov	r0, r5
 80126d2:	f001 fb0d 	bl	8013cf0 <pbuf_ref>
  if (hs->req->next != NULL) {
 80126d6:	6a20      	ldr	r0, [r4, #32]
 80126d8:	6803      	ldr	r3, [r0, #0]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d04c      	beq.n	8012778 <http_parse_request+0xd0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80126de:	8905      	ldrh	r5, [r0, #8]
 80126e0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80126e4:	429d      	cmp	r5, r3
 80126e6:	bf28      	it	cs
 80126e8:	461d      	movcs	r5, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80126ea:	4e3a      	ldr	r6, [pc, #232]	; (80127d4 <http_parse_request+0x12c>)
 80126ec:	2300      	movs	r3, #0
 80126ee:	462a      	mov	r2, r5
 80126f0:	4631      	mov	r1, r6
 80126f2:	f001 fbe7 	bl	8013ec4 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 80126f6:	2d06      	cmp	r5, #6
 80126f8:	d91e      	bls.n	8012738 <http_parse_request+0x90>
    crlf = lwip_strnstr(data, CRLF, data_len);
 80126fa:	46a9      	mov	r9, r5
 80126fc:	462a      	mov	r2, r5
 80126fe:	4936      	ldr	r1, [pc, #216]	; (80127d8 <http_parse_request+0x130>)
 8012700:	4630      	mov	r0, r6
 8012702:	f000 f942 	bl	801298a <lwip_strnstr>
    if (crlf != NULL) {
 8012706:	b1b8      	cbz	r0, 8012738 <http_parse_request+0x90>
      if (!strncmp(data, "GET ", 4)) {
 8012708:	2204      	movs	r2, #4
 801270a:	4934      	ldr	r1, [pc, #208]	; (80127dc <http_parse_request+0x134>)
 801270c:	4630      	mov	r0, r6
 801270e:	f009 fa92 	bl	801bc36 <strncmp>
 8012712:	4682      	mov	sl, r0
 8012714:	2800      	cmp	r0, #0
 8012716:	d132      	bne.n	801277e <http_parse_request+0xd6>
        sp1 = data + 3;
 8012718:	f106 0803 	add.w	r8, r6, #3
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 801271c:	1d37      	adds	r7, r6, #4
 801271e:	3d04      	subs	r5, #4
 8012720:	b2ad      	uxth	r5, r5
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8012722:	462a      	mov	r2, r5
 8012724:	492e      	ldr	r1, [pc, #184]	; (80127e0 <http_parse_request+0x138>)
 8012726:	4638      	mov	r0, r7
 8012728:	f000 f92f 	bl	801298a <lwip_strnstr>
      if (sp2 == NULL) {
 801272c:	4603      	mov	r3, r0
 801272e:	b358      	cbz	r0, 8012788 <http_parse_request+0xe0>
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8012730:	1bdd      	subs	r5, r3, r7
      if ((sp2 != 0) && (sp2 > sp1)) {
 8012732:	b10b      	cbz	r3, 8012738 <http_parse_request+0x90>
 8012734:	4543      	cmp	r3, r8
 8012736:	d830      	bhi.n	801279a <http_parse_request+0xf2>
  clen = pbuf_clen(hs->req);
 8012738:	6a20      	ldr	r0, [r4, #32]
 801273a:	f001 fad1 	bl	8013ce0 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 801273e:	6a23      	ldr	r3, [r4, #32]
 8012740:	891b      	ldrh	r3, [r3, #8]
 8012742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012746:	d23f      	bcs.n	80127c8 <http_parse_request+0x120>
 8012748:	2805      	cmp	r0, #5
 801274a:	d940      	bls.n	80127ce <http_parse_request+0x126>
    return http_find_error_file(hs, 400);
 801274c:	f06f 000f 	mvn.w	r0, #15
}
 8012750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8012754:	4b23      	ldr	r3, [pc, #140]	; (80127e4 <http_parse_request+0x13c>)
 8012756:	f240 72ae 	movw	r2, #1966	; 0x7ae
 801275a:	4923      	ldr	r1, [pc, #140]	; (80127e8 <http_parse_request+0x140>)
 801275c:	4823      	ldr	r0, [pc, #140]	; (80127ec <http_parse_request+0x144>)
 801275e:	f009 f98f 	bl	801ba80 <iprintf>
 8012762:	e7a7      	b.n	80126b4 <http_parse_request+0xc>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8012764:	4b1f      	ldr	r3, [pc, #124]	; (80127e4 <http_parse_request+0x13c>)
 8012766:	f240 72af 	movw	r2, #1967	; 0x7af
 801276a:	4921      	ldr	r1, [pc, #132]	; (80127f0 <http_parse_request+0x148>)
 801276c:	481f      	ldr	r0, [pc, #124]	; (80127ec <http_parse_request+0x144>)
 801276e:	f009 f987 	bl	801ba80 <iprintf>
 8012772:	e7a1      	b.n	80126b8 <http_parse_request+0x10>
    hs->req = p;
 8012774:	6225      	str	r5, [r4, #32]
 8012776:	e7ab      	b.n	80126d0 <http_parse_request+0x28>
    data = (char *)p->payload;
 8012778:	686e      	ldr	r6, [r5, #4]
    data_len = p->len;
 801277a:	896d      	ldrh	r5, [r5, #10]
    if (p->len != p->tot_len) {
 801277c:	e7bb      	b.n	80126f6 <http_parse_request+0x4e>
        data[4] = 0;
 801277e:	2300      	movs	r3, #0
 8012780:	7133      	strb	r3, [r6, #4]
        return http_find_error_file(hs, 501);
 8012782:	f06f 000f 	mvn.w	r0, #15
 8012786:	e7e3      	b.n	8012750 <http_parse_request+0xa8>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8012788:	462a      	mov	r2, r5
 801278a:	4913      	ldr	r1, [pc, #76]	; (80127d8 <http_parse_request+0x130>)
 801278c:	4638      	mov	r0, r7
 801278e:	f000 f8fc 	bl	801298a <lwip_strnstr>
 8012792:	4603      	mov	r3, r0
        is_09 = 1;
 8012794:	f04f 0a01 	mov.w	sl, #1
 8012798:	e7ca      	b.n	8012730 <http_parse_request+0x88>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 801279a:	464a      	mov	r2, r9
 801279c:	4915      	ldr	r1, [pc, #84]	; (80127f4 <http_parse_request+0x14c>)
 801279e:	4630      	mov	r0, r6
 80127a0:	f000 f8f3 	bl	801298a <lwip_strnstr>
 80127a4:	2800      	cmp	r0, #0
 80127a6:	d0c7      	beq.n	8012738 <http_parse_request+0x90>
          *sp1 = 0;
 80127a8:	2300      	movs	r3, #0
 80127aa:	70f3      	strb	r3, [r6, #3]
          uri[uri_len] = 0;
 80127ac:	b2ad      	uxth	r5, r5
 80127ae:	557b      	strb	r3, [r7, r5]
            return http_find_file(hs, uri, is_09);
 80127b0:	4652      	mov	r2, sl
 80127b2:	4639      	mov	r1, r7
 80127b4:	4620      	mov	r0, r4
 80127b6:	f7ff feeb 	bl	8012590 <http_find_file>
 80127ba:	e7c9      	b.n	8012750 <http_parse_request+0xa8>
    return ERR_USE;
 80127bc:	f06f 0007 	mvn.w	r0, #7
 80127c0:	e7c6      	b.n	8012750 <http_parse_request+0xa8>
 80127c2:	f06f 0007 	mvn.w	r0, #7
 80127c6:	e7c3      	b.n	8012750 <http_parse_request+0xa8>
    return http_find_error_file(hs, 400);
 80127c8:	f06f 000f 	mvn.w	r0, #15
 80127cc:	e7c0      	b.n	8012750 <http_parse_request+0xa8>
    return ERR_INPROGRESS;
 80127ce:	f06f 0004 	mvn.w	r0, #4
 80127d2:	e7bd      	b.n	8012750 <http_parse_request+0xa8>
 80127d4:	20000120 	.word	0x20000120
 80127d8:	0801db58 	.word	0x0801db58
 80127dc:	0801db5c 	.word	0x0801db5c
 80127e0:	0801cc0c 	.word	0x0801cc0c
 80127e4:	0801da04 	.word	0x0801da04
 80127e8:	0801fe38 	.word	0x0801fe38
 80127ec:	0801cca4 	.word	0x0801cca4
 80127f0:	0801db4c 	.word	0x0801db4c
 80127f4:	0801db20 	.word	0x0801db20

080127f8 <http_recv>:
{
 80127f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127fa:	4605      	mov	r5, r0
 80127fc:	460e      	mov	r6, r1
 80127fe:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8012800:	b95b      	cbnz	r3, 801281a <http_recv+0x22>
 8012802:	b152      	cbz	r2, 801281a <http_recv+0x22>
 8012804:	b148      	cbz	r0, 801281a <http_recv+0x22>
    altcp_recved(pcb, p->tot_len);
 8012806:	8911      	ldrh	r1, [r2, #8]
 8012808:	4630      	mov	r0, r6
 801280a:	f001 fe9f 	bl	801454c <tcp_recved>
    if (hs->handle == NULL) {
 801280e:	696b      	ldr	r3, [r5, #20]
 8012810:	b18b      	cbz	r3, 8012836 <http_recv+0x3e>
      pbuf_free(p);
 8012812:	4620      	mov	r0, r4
 8012814:	f001 f900 	bl	8013a18 <pbuf_free>
 8012818:	e00b      	b.n	8012832 <http_recv+0x3a>
    if (p != NULL) {
 801281a:	b134      	cbz	r4, 801282a <http_recv+0x32>
      altcp_recved(pcb, p->tot_len);
 801281c:	8921      	ldrh	r1, [r4, #8]
 801281e:	4630      	mov	r0, r6
 8012820:	f001 fe94 	bl	801454c <tcp_recved>
      pbuf_free(p);
 8012824:	4620      	mov	r0, r4
 8012826:	f001 f8f7 	bl	8013a18 <pbuf_free>
    http_close_conn(pcb, hs);
 801282a:	4629      	mov	r1, r5
 801282c:	4630      	mov	r0, r6
 801282e:	f7ff fdaf 	bl	8012390 <http_close_conn>
}
 8012832:	2000      	movs	r0, #0
 8012834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      err_t parsed = http_parse_request(p, hs, pcb);
 8012836:	4632      	mov	r2, r6
 8012838:	4629      	mov	r1, r5
 801283a:	4620      	mov	r0, r4
 801283c:	f7ff ff34 	bl	80126a8 <http_parse_request>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8012840:	4607      	mov	r7, r0
 8012842:	b140      	cbz	r0, 8012856 <http_recv+0x5e>
 8012844:	f110 0f05 	cmn.w	r0, #5
 8012848:	d005      	beq.n	8012856 <http_recv+0x5e>
 801284a:	f110 0f10 	cmn.w	r0, #16
 801284e:	d002      	beq.n	8012856 <http_recv+0x5e>
 8012850:	f110 0f08 	cmn.w	r0, #8
 8012854:	d114      	bne.n	8012880 <http_recv+0x88>
      if (parsed != ERR_INPROGRESS) {
 8012856:	f117 0f05 	cmn.w	r7, #5
 801285a:	d005      	beq.n	8012868 <http_recv+0x70>
        if (hs->req != NULL) {
 801285c:	6a28      	ldr	r0, [r5, #32]
 801285e:	b118      	cbz	r0, 8012868 <http_recv+0x70>
          pbuf_free(hs->req);
 8012860:	f001 f8da 	bl	8013a18 <pbuf_free>
          hs->req = NULL;
 8012864:	2300      	movs	r3, #0
 8012866:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8012868:	4620      	mov	r0, r4
 801286a:	f001 f8d5 	bl	8013a18 <pbuf_free>
      if (parsed == ERR_OK) {
 801286e:	b17f      	cbz	r7, 8012890 <http_recv+0x98>
      } else if (parsed == ERR_ARG) {
 8012870:	f117 0f10 	cmn.w	r7, #16
 8012874:	d1dd      	bne.n	8012832 <http_recv+0x3a>
        http_close_conn(pcb, hs);
 8012876:	4629      	mov	r1, r5
 8012878:	4630      	mov	r0, r6
 801287a:	f7ff fd89 	bl	8012390 <http_close_conn>
 801287e:	e7d8      	b.n	8012832 <http_recv+0x3a>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8012880:	4b06      	ldr	r3, [pc, #24]	; (801289c <http_recv+0xa4>)
 8012882:	f640 2204 	movw	r2, #2564	; 0xa04
 8012886:	4906      	ldr	r1, [pc, #24]	; (80128a0 <http_recv+0xa8>)
 8012888:	4806      	ldr	r0, [pc, #24]	; (80128a4 <http_recv+0xac>)
 801288a:	f009 f8f9 	bl	801ba80 <iprintf>
 801288e:	e7e2      	b.n	8012856 <http_recv+0x5e>
          http_send(pcb, hs);
 8012890:	4629      	mov	r1, r5
 8012892:	4630      	mov	r0, r6
 8012894:	f7ff fdaa 	bl	80123ec <http_send>
 8012898:	e7cb      	b.n	8012832 <http_recv+0x3a>
 801289a:	bf00      	nop
 801289c:	0801da04 	.word	0x0801da04
 80128a0:	0801db64 	.word	0x0801db64
 80128a4:	0801cca4 	.word	0x0801cca4

080128a8 <http_state_init>:
{
 80128a8:	b508      	push	{r3, lr}
  memset(hs, 0, sizeof(struct http_state));
 80128aa:	222c      	movs	r2, #44	; 0x2c
 80128ac:	2100      	movs	r1, #0
 80128ae:	f009 f8df 	bl	801ba70 <memset>
}
 80128b2:	bd08      	pop	{r3, pc}

080128b4 <http_state_alloc>:
{
 80128b4:	b510      	push	{r4, lr}
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80128b6:	202c      	movs	r0, #44	; 0x2c
 80128b8:	f000 fcc4 	bl	8013244 <mem_malloc>
  if (ret != NULL) {
 80128bc:	4604      	mov	r4, r0
 80128be:	b108      	cbz	r0, 80128c4 <http_state_alloc+0x10>
    http_state_init(ret);
 80128c0:	f7ff fff2 	bl	80128a8 <http_state_init>
}
 80128c4:	4620      	mov	r0, r4
 80128c6:	bd10      	pop	{r4, pc}

080128c8 <http_accept>:
  if ((err != ERR_OK) || (pcb == NULL)) {
 80128c8:	bb12      	cbnz	r2, 8012910 <http_accept+0x48>
{
 80128ca:	b538      	push	{r3, r4, r5, lr}
 80128cc:	460c      	mov	r4, r1
 80128ce:	4615      	mov	r5, r2
  if ((err != ERR_OK) || (pcb == NULL)) {
 80128d0:	b309      	cbz	r1, 8012916 <http_accept+0x4e>
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80128d2:	2101      	movs	r1, #1
 80128d4:	4620      	mov	r0, r4
 80128d6:	f001 fe8d 	bl	80145f4 <tcp_setprio>
  hs = http_state_alloc();
 80128da:	f7ff ffeb 	bl	80128b4 <http_state_alloc>
  if (hs == NULL) {
 80128de:	4601      	mov	r1, r0
 80128e0:	b1e0      	cbz	r0, 801291c <http_accept+0x54>
  hs->pcb = pcb;
 80128e2:	61c4      	str	r4, [r0, #28]
  altcp_arg(pcb, hs);
 80128e4:	4620      	mov	r0, r4
 80128e6:	f001 febd 	bl	8014664 <tcp_arg>
  altcp_recv(pcb, http_recv);
 80128ea:	490e      	ldr	r1, [pc, #56]	; (8012924 <http_accept+0x5c>)
 80128ec:	4620      	mov	r0, r4
 80128ee:	f001 febd 	bl	801466c <tcp_recv>
  altcp_err(pcb, http_err);
 80128f2:	490d      	ldr	r1, [pc, #52]	; (8012928 <http_accept+0x60>)
 80128f4:	4620      	mov	r0, r4
 80128f6:	f001 feed 	bl	80146d4 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80128fa:	2204      	movs	r2, #4
 80128fc:	490b      	ldr	r1, [pc, #44]	; (801292c <http_accept+0x64>)
 80128fe:	4620      	mov	r0, r4
 8012900:	f001 ff0a 	bl	8014718 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8012904:	490a      	ldr	r1, [pc, #40]	; (8012930 <http_accept+0x68>)
 8012906:	4620      	mov	r0, r4
 8012908:	f001 feca 	bl	80146a0 <tcp_sent>
  return ERR_OK;
 801290c:	4628      	mov	r0, r5
}
 801290e:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_VAL;
 8012910:	f06f 0005 	mvn.w	r0, #5
}
 8012914:	4770      	bx	lr
    return ERR_VAL;
 8012916:	f06f 0005 	mvn.w	r0, #5
 801291a:	e7f8      	b.n	801290e <http_accept+0x46>
    return ERR_MEM;
 801291c:	f04f 30ff 	mov.w	r0, #4294967295
 8012920:	e7f5      	b.n	801290e <http_accept+0x46>
 8012922:	bf00      	nop
 8012924:	080127f9 	.word	0x080127f9
 8012928:	08012449 	.word	0x08012449
 801292c:	08012455 	.word	0x08012455
 8012930:	0801242d 	.word	0x0801242d

08012934 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8012934:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8012936:	202e      	movs	r0, #46	; 0x2e
 8012938:	f002 f9b8 	bl	8014cac <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801293c:	4604      	mov	r4, r0
 801293e:	b120      	cbz	r0, 801294a <httpd_init+0x16>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8012940:	2150      	movs	r1, #80	; 0x50
 8012942:	4620      	mov	r0, r4
 8012944:	f7ff fc34 	bl	80121b0 <httpd_init_pcb>
}
 8012948:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801294a:	4b04      	ldr	r3, [pc, #16]	; (801295c <httpd_init+0x28>)
 801294c:	f640 2272 	movw	r2, #2674	; 0xa72
 8012950:	4903      	ldr	r1, [pc, #12]	; (8012960 <httpd_init+0x2c>)
 8012952:	4804      	ldr	r0, [pc, #16]	; (8012964 <httpd_init+0x30>)
 8012954:	f009 f894 	bl	801ba80 <iprintf>
 8012958:	e7f2      	b.n	8012940 <httpd_init+0xc>
 801295a:	bf00      	nop
 801295c:	0801da04 	.word	0x0801da04
 8012960:	0801db90 	.word	0x0801db90
 8012964:	0801cca4 	.word	0x0801cca4

08012968 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8012968:	0a03      	lsrs	r3, r0, #8
 801296a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 801296e:	b280      	uxth	r0, r0
 8012970:	4770      	bx	lr

08012972 <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
 8012972:	0203      	lsls	r3, r0, #8
 8012974:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012978:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 801297c:	0a02      	lsrs	r2, r0, #8
 801297e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8012982:	4313      	orrs	r3, r2
}
 8012984:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 8012988:	4770      	bx	lr

0801298a <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 801298a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801298e:	4607      	mov	r7, r0
 8012990:	460e      	mov	r6, r1
 8012992:	4691      	mov	r9, r2
  const char *p;
  size_t tokenlen = strlen(token);
 8012994:	4608      	mov	r0, r1
 8012996:	f7fd fc25 	bl	80101e4 <strlen>
  if (tokenlen == 0) {
 801299a:	b1c0      	cbz	r0, 80129ce <lwip_strnstr+0x44>
 801299c:	4680      	mov	r8, r0
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801299e:	463c      	mov	r4, r7
 80129a0:	e000      	b.n	80129a4 <lwip_strnstr+0x1a>
 80129a2:	3401      	adds	r4, #1
 80129a4:	7825      	ldrb	r5, [r4, #0]
 80129a6:	b1b5      	cbz	r5, 80129d6 <lwip_strnstr+0x4c>
 80129a8:	eb04 0308 	add.w	r3, r4, r8
 80129ac:	eb07 0209 	add.w	r2, r7, r9
 80129b0:	4293      	cmp	r3, r2
 80129b2:	d80a      	bhi.n	80129ca <lwip_strnstr+0x40>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80129b4:	7833      	ldrb	r3, [r6, #0]
 80129b6:	42ab      	cmp	r3, r5
 80129b8:	d1f3      	bne.n	80129a2 <lwip_strnstr+0x18>
 80129ba:	4642      	mov	r2, r8
 80129bc:	4631      	mov	r1, r6
 80129be:	4620      	mov	r0, r4
 80129c0:	f009 f939 	bl	801bc36 <strncmp>
 80129c4:	2800      	cmp	r0, #0
 80129c6:	d1ec      	bne.n	80129a2 <lwip_strnstr+0x18>
 80129c8:	e002      	b.n	80129d0 <lwip_strnstr+0x46>
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
 80129ca:	2400      	movs	r4, #0
 80129cc:	e000      	b.n	80129d0 <lwip_strnstr+0x46>
    return LWIP_CONST_CAST(char *, buffer);
 80129ce:	463c      	mov	r4, r7
}
 80129d0:	4620      	mov	r0, r4
 80129d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return NULL;
 80129d6:	2400      	movs	r4, #0
 80129d8:	e7fa      	b.n	80129d0 <lwip_strnstr+0x46>
	...

080129dc <dns_backupserver_available>:
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
  u8_t ret = 0;

  if (pentry) {
 80129dc:	b138      	cbz	r0, 80129ee <dns_backupserver_available+0x12>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 80129de:	7ac0      	ldrb	r0, [r0, #11]
 80129e0:	b938      	cbnz	r0, 80129f2 <dns_backupserver_available+0x16>
 80129e2:	1c43      	adds	r3, r0, #1
 80129e4:	4a05      	ldr	r2, [pc, #20]	; (80129fc <dns_backupserver_available+0x20>)
 80129e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80129ea:	b923      	cbnz	r3, 80129f6 <dns_backupserver_available+0x1a>
 80129ec:	4770      	bx	lr
  u8_t ret = 0;
 80129ee:	2000      	movs	r0, #0
 80129f0:	4770      	bx	lr
 80129f2:	2000      	movs	r0, #0
 80129f4:	4770      	bx	lr
      ret = 1;
 80129f6:	2001      	movs	r0, #1
    }
  }

  return ret;
}
 80129f8:	4770      	bx	lr
 80129fa:	bf00      	nop
 80129fc:	20000560 	.word	0x20000560

08012a00 <dns_create_txid>:
{
 8012a00:	b508      	push	{r3, lr}
  txid = (u16_t)DNS_RAND_TXID();
 8012a02:	f009 f8cb 	bl	801bb9c <rand>
 8012a06:	b280      	uxth	r0, r0
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8012a08:	2300      	movs	r3, #0
 8012a0a:	e001      	b.n	8012a10 <dns_create_txid+0x10>
 8012a0c:	3301      	adds	r3, #1
 8012a0e:	b2db      	uxtb	r3, r3
 8012a10:	2b03      	cmp	r3, #3
 8012a12:	d80f      	bhi.n	8012a34 <dns_create_txid+0x34>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8012a14:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8012a18:	4907      	ldr	r1, [pc, #28]	; (8012a38 <dns_create_txid+0x38>)
 8012a1a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8012a1e:	7a92      	ldrb	r2, [r2, #10]
 8012a20:	2a02      	cmp	r2, #2
 8012a22:	d1f3      	bne.n	8012a0c <dns_create_txid+0xc>
        (dns_table[i].txid == txid)) {
 8012a24:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8012a28:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8012a2c:	8912      	ldrh	r2, [r2, #8]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8012a2e:	4282      	cmp	r2, r0
 8012a30:	d1ec      	bne.n	8012a0c <dns_create_txid+0xc>
 8012a32:	e7e6      	b.n	8012a02 <dns_create_txid+0x2>
}
 8012a34:	bd08      	pop	{r3, pc}
 8012a36:	bf00      	nop
 8012a38:	20000568 	.word	0x20000568

08012a3c <dns_call_found>:
{
 8012a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a40:	4605      	mov	r5, r0
 8012a42:	4688      	mov	r8, r1
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8012a44:	2400      	movs	r4, #0
 8012a46:	e001      	b.n	8012a4c <dns_call_found+0x10>
 8012a48:	3401      	adds	r4, #1
 8012a4a:	b2e4      	uxtb	r4, r4
 8012a4c:	2c03      	cmp	r4, #3
 8012a4e:	d822      	bhi.n	8012a96 <dns_call_found+0x5a>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8012a50:	4626      	mov	r6, r4
 8012a52:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8012a56:	4a30      	ldr	r2, [pc, #192]	; (8012b18 <dns_call_found+0xdc>)
 8012a58:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8012a5c:	2f00      	cmp	r7, #0
 8012a5e:	d0f3      	beq.n	8012a48 <dns_call_found+0xc>
 8012a60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012a64:	7a1b      	ldrb	r3, [r3, #8]
 8012a66:	42ab      	cmp	r3, r5
 8012a68:	d1ee      	bne.n	8012a48 <dns_call_found+0xc>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8012a6a:	eb05 1305 	add.w	r3, r5, r5, lsl #4
 8012a6e:	011b      	lsls	r3, r3, #4
 8012a70:	3310      	adds	r3, #16
 8012a72:	4692      	mov	sl, r2
 8012a74:	ea4f 0944 	mov.w	r9, r4, lsl #1
 8012a78:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8012a7c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8012a80:	6852      	ldr	r2, [r2, #4]
 8012a82:	4641      	mov	r1, r8
 8012a84:	4825      	ldr	r0, [pc, #148]	; (8012b1c <dns_call_found+0xe0>)
 8012a86:	4418      	add	r0, r3
 8012a88:	47b8      	blx	r7
      dns_requests[i].found = NULL;
 8012a8a:	444e      	add	r6, r9
 8012a8c:	00b6      	lsls	r6, r6, #2
 8012a8e:	2300      	movs	r3, #0
 8012a90:	f84a 3006 	str.w	r3, [sl, r6]
 8012a94:	e7d8      	b.n	8012a48 <dns_call_found+0xc>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8012a96:	2300      	movs	r3, #0
 8012a98:	e001      	b.n	8012a9e <dns_call_found+0x62>
 8012a9a:	3301      	adds	r3, #1
 8012a9c:	b2db      	uxtb	r3, r3
 8012a9e:	2b03      	cmp	r3, #3
 8012aa0:	d81b      	bhi.n	8012ada <dns_call_found+0x9e>
    if (i == idx) {
 8012aa2:	42ab      	cmp	r3, r5
 8012aa4:	d0f9      	beq.n	8012a9a <dns_call_found+0x5e>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8012aa6:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8012aaa:	491c      	ldr	r1, [pc, #112]	; (8012b1c <dns_call_found+0xe0>)
 8012aac:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8012ab0:	7a92      	ldrb	r2, [r2, #10]
 8012ab2:	2a02      	cmp	r2, #2
 8012ab4:	d1f1      	bne.n	8012a9a <dns_call_found+0x5e>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8012ab6:	460a      	mov	r2, r1
 8012ab8:	eb03 1103 	add.w	r1, r3, r3, lsl #4
 8012abc:	eb02 1101 	add.w	r1, r2, r1, lsl #4
 8012ac0:	7bc9      	ldrb	r1, [r1, #15]
 8012ac2:	eb05 1005 	add.w	r0, r5, r5, lsl #4
 8012ac6:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8012aca:	7bd2      	ldrb	r2, [r2, #15]
 8012acc:	4291      	cmp	r1, r2
 8012ace:	d1e4      	bne.n	8012a9a <dns_call_found+0x5e>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8012ad0:	4b12      	ldr	r3, [pc, #72]	; (8012b1c <dns_call_found+0xe0>)
 8012ad2:	eb03 1400 	add.w	r4, r3, r0, lsl #4
 8012ad6:	2304      	movs	r3, #4
 8012ad8:	73e3      	strb	r3, [r4, #15]
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8012ada:	eb05 1305 	add.w	r3, r5, r5, lsl #4
 8012ade:	4a0f      	ldr	r2, [pc, #60]	; (8012b1c <dns_call_found+0xe0>)
 8012ae0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8012ae4:	7bdb      	ldrb	r3, [r3, #15]
 8012ae6:	2b03      	cmp	r3, #3
 8012ae8:	d901      	bls.n	8012aee <dns_call_found+0xb2>
}
 8012aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8012aee:	4c0c      	ldr	r4, [pc, #48]	; (8012b20 <dns_call_found+0xe4>)
 8012af0:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8012af4:	f006 f876 	bl	8018be4 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8012af8:	4b08      	ldr	r3, [pc, #32]	; (8012b1c <dns_call_found+0xe0>)
 8012afa:	eb05 1205 	add.w	r2, r5, r5, lsl #4
 8012afe:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8012b02:	7bd2      	ldrb	r2, [r2, #15]
 8012b04:	2100      	movs	r1, #0
 8012b06:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8012b0a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8012b0e:	eb03 1505 	add.w	r5, r3, r5, lsl #4
 8012b12:	2304      	movs	r3, #4
 8012b14:	73eb      	strb	r3, [r5, #15]
}
 8012b16:	e7e8      	b.n	8012aea <dns_call_found+0xae>
 8012b18:	20000530 	.word	0x20000530
 8012b1c:	20000568 	.word	0x20000568
 8012b20:	20000520 	.word	0x20000520

08012b24 <dns_send>:
{
 8012b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b28:	b084      	sub	sp, #16
 8012b2a:	4606      	mov	r6, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8012b2c:	eb00 1200 	add.w	r2, r0, r0, lsl #4
 8012b30:	4b5b      	ldr	r3, [pc, #364]	; (8012ca0 <dns_send+0x17c>)
 8012b32:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8012b36:	7adb      	ldrb	r3, [r3, #11]
 8012b38:	2b01      	cmp	r3, #1
 8012b3a:	d83d      	bhi.n	8012bb8 <dns_send+0x94>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8012b3c:	eb06 1306 	add.w	r3, r6, r6, lsl #4
 8012b40:	4a57      	ldr	r2, [pc, #348]	; (8012ca0 <dns_send+0x17c>)
 8012b42:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8012b46:	7ada      	ldrb	r2, [r3, #11]
 8012b48:	4b56      	ldr	r3, [pc, #344]	; (8012ca4 <dns_send+0x180>)
 8012b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d03a      	beq.n	8012bc8 <dns_send+0xa4>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8012b52:	eb06 1306 	add.w	r3, r6, r6, lsl #4
 8012b56:	011b      	lsls	r3, r3, #4
 8012b58:	3310      	adds	r3, #16
 8012b5a:	4f51      	ldr	r7, [pc, #324]	; (8012ca0 <dns_send+0x17c>)
 8012b5c:	441f      	add	r7, r3
 8012b5e:	4638      	mov	r0, r7
 8012b60:	f7fd fb40 	bl	80101e4 <strlen>
 8012b64:	f100 0112 	add.w	r1, r0, #18
 8012b68:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012b6c:	b289      	uxth	r1, r1
 8012b6e:	2036      	movs	r0, #54	; 0x36
 8012b70:	f000 ffb4 	bl	8013adc <pbuf_alloc>
  if (p != NULL) {
 8012b74:	4605      	mov	r5, r0
 8012b76:	2800      	cmp	r0, #0
 8012b78:	f000 808e 	beq.w	8012c98 <dns_send+0x174>
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	9301      	str	r3, [sp, #4]
 8012b80:	9302      	str	r3, [sp, #8]
 8012b82:	9303      	str	r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 8012b84:	eb06 1306 	add.w	r3, r6, r6, lsl #4
 8012b88:	4a45      	ldr	r2, [pc, #276]	; (8012ca0 <dns_send+0x17c>)
 8012b8a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8012b8e:	8918      	ldrh	r0, [r3, #8]
 8012b90:	f7ff feea 	bl	8012968 <lwip_htons>
 8012b94:	f8ad 0004 	strh.w	r0, [sp, #4]
    hdr.flags1 = DNS_FLAG1_RD;
 8012b98:	2301      	movs	r3, #1
 8012b9a:	f88d 3006 	strb.w	r3, [sp, #6]
    hdr.numquestions = PP_HTONS(1);
 8012b9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ba2:	f8ad 3008 	strh.w	r3, [sp, #8]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8012ba6:	220c      	movs	r2, #12
 8012ba8:	a901      	add	r1, sp, #4
 8012baa:	4628      	mov	r0, r5
 8012bac:	f001 f9d8 	bl	8013f60 <pbuf_take>
    --hostname;
 8012bb0:	3f01      	subs	r7, #1
    query_idx = SIZEOF_DNS_HDR;
 8012bb2:	f04f 080c 	mov.w	r8, #12
 8012bb6:	e03d      	b.n	8012c34 <dns_send+0x110>
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8012bb8:	4b3b      	ldr	r3, [pc, #236]	; (8012ca8 <dns_send+0x184>)
 8012bba:	f240 22fa 	movw	r2, #762	; 0x2fa
 8012bbe:	493b      	ldr	r1, [pc, #236]	; (8012cac <dns_send+0x188>)
 8012bc0:	483b      	ldr	r0, [pc, #236]	; (8012cb0 <dns_send+0x18c>)
 8012bc2:	f008 ff5d 	bl	801ba80 <iprintf>
 8012bc6:	e7b9      	b.n	8012b3c <dns_send+0x18>
    dns_call_found(idx, NULL);
 8012bc8:	2100      	movs	r1, #0
 8012bca:	4630      	mov	r0, r6
 8012bcc:	f7ff ff36 	bl	8012a3c <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 8012bd0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8012bd4:	4b32      	ldr	r3, [pc, #200]	; (8012ca0 <dns_send+0x17c>)
 8012bd6:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8012bda:	2400      	movs	r4, #0
 8012bdc:	729c      	strb	r4, [r3, #10]
}
 8012bde:	4620      	mov	r0, r4
 8012be0:	b004      	add	sp, #16
 8012be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ++n;
 8012be6:	3401      	adds	r4, #1
 8012be8:	b2e4      	uxtb	r4, r4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8012bea:	3701      	adds	r7, #1
 8012bec:	783b      	ldrb	r3, [r7, #0]
 8012bee:	2b2e      	cmp	r3, #46	; 0x2e
 8012bf0:	d001      	beq.n	8012bf6 <dns_send+0xd2>
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d1f7      	bne.n	8012be6 <dns_send+0xc2>
      copy_len = (u16_t)(hostname - hostname_part);
 8012bf6:	eba7 0a09 	sub.w	sl, r7, r9
 8012bfa:	fa1f fa8a 	uxth.w	sl, sl
      if (query_idx + n + 1 > 0xFFFF) {
 8012bfe:	eb08 0204 	add.w	r2, r8, r4
 8012c02:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8012c06:	429a      	cmp	r2, r3
 8012c08:	dc18      	bgt.n	8012c3c <dns_send+0x118>
      pbuf_put_at(p, query_idx, n);
 8012c0a:	4622      	mov	r2, r4
 8012c0c:	4641      	mov	r1, r8
 8012c0e:	4628      	mov	r0, r5
 8012c10:	f001 fa64 	bl	80140dc <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8012c14:	f108 0301 	add.w	r3, r8, #1
 8012c18:	b29b      	uxth	r3, r3
 8012c1a:	4652      	mov	r2, sl
 8012c1c:	4649      	mov	r1, r9
 8012c1e:	4628      	mov	r0, r5
 8012c20:	f001 f9fe 	bl	8014020 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8012c24:	4444      	add	r4, r8
 8012c26:	b2a4      	uxth	r4, r4
 8012c28:	f104 0801 	add.w	r8, r4, #1
 8012c2c:	fa1f f888 	uxth.w	r8, r8
    } while (*hostname != 0);
 8012c30:	783b      	ldrb	r3, [r7, #0]
 8012c32:	b14b      	cbz	r3, 8012c48 <dns_send+0x124>
      ++hostname;
 8012c34:	3701      	adds	r7, #1
 8012c36:	46b9      	mov	r9, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8012c38:	2400      	movs	r4, #0
 8012c3a:	e7d7      	b.n	8012bec <dns_send+0xc8>
  pbuf_free(p);
 8012c3c:	4628      	mov	r0, r5
 8012c3e:	f000 feeb 	bl	8013a18 <pbuf_free>
  return ERR_VAL;
 8012c42:	f06f 0405 	mvn.w	r4, #5
 8012c46:	e7ca      	b.n	8012bde <dns_send+0xba>
    pbuf_put_at(p, query_idx, 0);
 8012c48:	2200      	movs	r2, #0
 8012c4a:	4641      	mov	r1, r8
 8012c4c:	4628      	mov	r0, r5
 8012c4e:	f001 fa45 	bl	80140dc <pbuf_put_at>
    query_idx++;
 8012c52:	1ca3      	adds	r3, r4, #2
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8012c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012c58:	f8ad 2000 	strh.w	r2, [sp]
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8012c5c:	f8ad 2002 	strh.w	r2, [sp, #2]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8012c60:	b29b      	uxth	r3, r3
 8012c62:	2204      	movs	r2, #4
 8012c64:	4669      	mov	r1, sp
 8012c66:	4628      	mov	r0, r5
 8012c68:	f001 f9da 	bl	8014020 <pbuf_take_at>
    pcb_idx = entry->pcb_idx;
 8012c6c:	4b0c      	ldr	r3, [pc, #48]	; (8012ca0 <dns_send+0x17c>)
 8012c6e:	eb06 1206 	add.w	r2, r6, r6, lsl #4
 8012c72:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8012c76:	7bd4      	ldrb	r4, [r2, #15]
      dst = &dns_servers[entry->server_idx];
 8012c78:	7ad1      	ldrb	r1, [r2, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8012c7a:	2335      	movs	r3, #53	; 0x35
 8012c7c:	4a09      	ldr	r2, [pc, #36]	; (8012ca4 <dns_send+0x180>)
 8012c7e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012c82:	4629      	mov	r1, r5
 8012c84:	480b      	ldr	r0, [pc, #44]	; (8012cb4 <dns_send+0x190>)
 8012c86:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8012c8a:	f005 ff0f 	bl	8018aac <udp_sendto>
 8012c8e:	4604      	mov	r4, r0
    pbuf_free(p);
 8012c90:	4628      	mov	r0, r5
 8012c92:	f000 fec1 	bl	8013a18 <pbuf_free>
 8012c96:	e7a2      	b.n	8012bde <dns_send+0xba>
    err = ERR_MEM;
 8012c98:	f04f 34ff 	mov.w	r4, #4294967295
 8012c9c:	e79f      	b.n	8012bde <dns_send+0xba>
 8012c9e:	bf00      	nop
 8012ca0:	20000568 	.word	0x20000568
 8012ca4:	20000560 	.word	0x20000560
 8012ca8:	0801dc14 	.word	0x0801dc14
 8012cac:	0801dc44 	.word	0x0801dc44
 8012cb0:	0801cca4 	.word	0x0801cca4
 8012cb4:	20000520 	.word	0x20000520

08012cb8 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8012cb8:	b538      	push	{r3, r4, r5, lr}
 8012cba:	4604      	mov	r4, r0
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8012cbc:	eb00 1500 	add.w	r5, r0, r0, lsl #4
 8012cc0:	4b47      	ldr	r3, [pc, #284]	; (8012de0 <dns_check_entry+0x128>)
 8012cc2:	eb03 1505 	add.w	r5, r3, r5, lsl #4

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8012cc6:	2803      	cmp	r0, #3
 8012cc8:	d80b      	bhi.n	8012ce2 <dns_check_entry+0x2a>

  switch (entry->state) {
 8012cca:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 8012cce:	4a44      	ldr	r2, [pc, #272]	; (8012de0 <dns_check_entry+0x128>)
 8012cd0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8012cd4:	7a9b      	ldrb	r3, [r3, #10]
 8012cd6:	2b03      	cmp	r3, #3
 8012cd8:	d879      	bhi.n	8012dce <dns_check_entry+0x116>
 8012cda:	e8df f003 	tbb	[pc, r3]
 8012cde:	0a20      	.short	0x0a20
 8012ce0:	6221      	.short	0x6221
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8012ce2:	4b40      	ldr	r3, [pc, #256]	; (8012de4 <dns_check_entry+0x12c>)
 8012ce4:	f240 421c 	movw	r2, #1052	; 0x41c
 8012ce8:	493f      	ldr	r1, [pc, #252]	; (8012de8 <dns_check_entry+0x130>)
 8012cea:	4840      	ldr	r0, [pc, #256]	; (8012dec <dns_check_entry+0x134>)
 8012cec:	f008 fec8 	bl	801ba80 <iprintf>
 8012cf0:	e7eb      	b.n	8012cca <dns_check_entry+0x12>
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8012cf2:	f7ff fe85 	bl	8012a00 <dns_create_txid>
 8012cf6:	4a3a      	ldr	r2, [pc, #232]	; (8012de0 <dns_check_entry+0x128>)
 8012cf8:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 8012cfc:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8012d00:	8118      	strh	r0, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8012d02:	2102      	movs	r1, #2
 8012d04:	7299      	strb	r1, [r3, #10]
      entry->server_idx = 0;
 8012d06:	2100      	movs	r1, #0
 8012d08:	72d9      	strb	r1, [r3, #11]
      entry->tmr = 1;
 8012d0a:	2001      	movs	r0, #1
 8012d0c:	7318      	strb	r0, [r3, #12]
      entry->retries = 0;
 8012d0e:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 8012d12:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8012d16:	7351      	strb	r1, [r2, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8012d18:	4620      	mov	r0, r4
 8012d1a:	f7ff ff03 	bl	8012b24 <dns_send>
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 8012d1e:	bd38      	pop	{r3, r4, r5, pc}
      if (--entry->tmr == 0) {
 8012d20:	eb04 1204 	add.w	r2, r4, r4, lsl #4
 8012d24:	4b2e      	ldr	r3, [pc, #184]	; (8012de0 <dns_check_entry+0x128>)
 8012d26:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8012d2a:	7b13      	ldrb	r3, [r2, #12]
 8012d2c:	3b01      	subs	r3, #1
 8012d2e:	b2db      	uxtb	r3, r3
 8012d30:	7313      	strb	r3, [r2, #12]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d1f3      	bne.n	8012d1e <dns_check_entry+0x66>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8012d36:	eb04 1204 	add.w	r2, r4, r4, lsl #4
 8012d3a:	4b29      	ldr	r3, [pc, #164]	; (8012de0 <dns_check_entry+0x128>)
 8012d3c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8012d40:	7b53      	ldrb	r3, [r2, #13]
 8012d42:	3301      	adds	r3, #1
 8012d44:	b2db      	uxtb	r3, r3
 8012d46:	7353      	strb	r3, [r2, #13]
 8012d48:	2b04      	cmp	r3, #4
 8012d4a:	d009      	beq.n	8012d60 <dns_check_entry+0xa8>
          entry->tmr = entry->retries;
 8012d4c:	eb04 1204 	add.w	r2, r4, r4, lsl #4
 8012d50:	4923      	ldr	r1, [pc, #140]	; (8012de0 <dns_check_entry+0x128>)
 8012d52:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8012d56:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 8012d58:	4620      	mov	r0, r4
 8012d5a:	f7ff fee3 	bl	8012b24 <dns_send>
        if (err != ERR_OK) {
 8012d5e:	e7de      	b.n	8012d1e <dns_check_entry+0x66>
          if (dns_backupserver_available(entry)
 8012d60:	4628      	mov	r0, r5
 8012d62:	f7ff fe3b 	bl	80129dc <dns_backupserver_available>
 8012d66:	b180      	cbz	r0, 8012d8a <dns_check_entry+0xd2>
            entry->server_idx++;
 8012d68:	4a1d      	ldr	r2, [pc, #116]	; (8012de0 <dns_check_entry+0x128>)
 8012d6a:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 8012d6e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8012d72:	7ad9      	ldrb	r1, [r3, #11]
 8012d74:	3101      	adds	r1, #1
 8012d76:	72d9      	strb	r1, [r3, #11]
            entry->tmr = 1;
 8012d78:	2101      	movs	r1, #1
 8012d7a:	7319      	strb	r1, [r3, #12]
            entry->retries = 0;
 8012d7c:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 8012d80:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8012d84:	2300      	movs	r3, #0
 8012d86:	7353      	strb	r3, [r2, #13]
 8012d88:	e7e6      	b.n	8012d58 <dns_check_entry+0xa0>
            dns_call_found(i, NULL);
 8012d8a:	2100      	movs	r1, #0
 8012d8c:	4620      	mov	r0, r4
 8012d8e:	f7ff fe55 	bl	8012a3c <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 8012d92:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8012d96:	4b12      	ldr	r3, [pc, #72]	; (8012de0 <dns_check_entry+0x128>)
 8012d98:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	729a      	strb	r2, [r3, #10]
            break;
 8012da0:	e7bd      	b.n	8012d1e <dns_check_entry+0x66>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8012da2:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 8012da6:	011b      	lsls	r3, r3, #4
 8012da8:	4a0d      	ldr	r2, [pc, #52]	; (8012de0 <dns_check_entry+0x128>)
 8012daa:	58d3      	ldr	r3, [r2, r3]
 8012dac:	b13b      	cbz	r3, 8012dbe <dns_check_entry+0x106>
 8012dae:	3b01      	subs	r3, #1
 8012db0:	eb04 1204 	add.w	r2, r4, r4, lsl #4
 8012db4:	0112      	lsls	r2, r2, #4
 8012db6:	490a      	ldr	r1, [pc, #40]	; (8012de0 <dns_check_entry+0x128>)
 8012db8:	508b      	str	r3, [r1, r2]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d1af      	bne.n	8012d1e <dns_check_entry+0x66>
        entry->state = DNS_STATE_UNUSED;
 8012dbe:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8012dc2:	4b07      	ldr	r3, [pc, #28]	; (8012de0 <dns_check_entry+0x128>)
 8012dc4:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8012dc8:	2300      	movs	r3, #0
 8012dca:	72a3      	strb	r3, [r4, #10]
 8012dcc:	e7a7      	b.n	8012d1e <dns_check_entry+0x66>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8012dce:	4b05      	ldr	r3, [pc, #20]	; (8012de4 <dns_check_entry+0x12c>)
 8012dd0:	f240 425b 	movw	r2, #1115	; 0x45b
 8012dd4:	4906      	ldr	r1, [pc, #24]	; (8012df0 <dns_check_entry+0x138>)
 8012dd6:	4805      	ldr	r0, [pc, #20]	; (8012dec <dns_check_entry+0x134>)
 8012dd8:	f008 fe52 	bl	801ba80 <iprintf>
}
 8012ddc:	e79f      	b.n	8012d1e <dns_check_entry+0x66>
 8012dde:	bf00      	nop
 8012de0:	20000568 	.word	0x20000568
 8012de4:	0801dc14 	.word	0x0801dc14
 8012de8:	0801dc5c 	.word	0x0801dc5c
 8012dec:	0801cca4 	.word	0x0801cca4
 8012df0:	0801dc78 	.word	0x0801dc78

08012df4 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8012df4:	b510      	push	{r4, lr}
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8012df6:	2400      	movs	r4, #0
 8012df8:	e004      	b.n	8012e04 <dns_check_entries+0x10>
    dns_check_entry(i);
 8012dfa:	4620      	mov	r0, r4
 8012dfc:	f7ff ff5c 	bl	8012cb8 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8012e00:	3401      	adds	r4, #1
 8012e02:	b2e4      	uxtb	r4, r4
 8012e04:	2c03      	cmp	r4, #3
 8012e06:	d9f8      	bls.n	8012dfa <dns_check_entries+0x6>
  }
}
 8012e08:	bd10      	pop	{r4, pc}

08012e0a <dns_init>:
}
 8012e0a:	4770      	bx	lr

08012e0c <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 8012e0c:	2801      	cmp	r0, #1
 8012e0e:	d900      	bls.n	8012e12 <dns_setserver+0x6>
}
 8012e10:	4770      	bx	lr
    if (dnsserver != NULL) {
 8012e12:	b121      	cbz	r1, 8012e1e <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 8012e14:	680a      	ldr	r2, [r1, #0]
 8012e16:	4b05      	ldr	r3, [pc, #20]	; (8012e2c <dns_setserver+0x20>)
 8012e18:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 8012e1c:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 8012e1e:	4b04      	ldr	r3, [pc, #16]	; (8012e30 <dns_setserver+0x24>)
 8012e20:	681a      	ldr	r2, [r3, #0]
 8012e22:	4b02      	ldr	r3, [pc, #8]	; (8012e2c <dns_setserver+0x20>)
 8012e24:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 8012e28:	e7f2      	b.n	8012e10 <dns_setserver+0x4>
 8012e2a:	bf00      	nop
 8012e2c:	20000560 	.word	0x20000560
 8012e30:	0802035c 	.word	0x0802035c

08012e34 <dns_tmr>:
{
 8012e34:	b508      	push	{r3, lr}
  dns_check_entries();
 8012e36:	f7ff ffdd 	bl	8012df4 <dns_check_entries>
}
 8012e3a:	bd08      	pop	{r3, pc}

08012e3c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8012e3c:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8012e3e:	f000 f8c9 	bl	8012fd4 <mem_init>
  memp_init();
 8012e42:	f000 fafb 	bl	801343c <memp_init>
  pbuf_init();
  netif_init();
 8012e46:	f000 fbbf 	bl	80135c8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8012e4a:	f005 fbfb 	bl	8018644 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012e4e:	f001 fa43 	bl	80142d8 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8012e52:	f7ff ffda 	bl	8012e0a <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012e56:	f005 fb43 	bl	80184e0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012e5a:	bd08      	pop	{r3, pc}

08012e5c <ptr_to_mem>:
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
  return (struct mem *)(void *)&ram[ptr];
 8012e5c:	4b01      	ldr	r3, [pc, #4]	; (8012e64 <ptr_to_mem+0x8>)
 8012e5e:	681b      	ldr	r3, [r3, #0]
}
 8012e60:	4418      	add	r0, r3
 8012e62:	4770      	bx	lr
 8012e64:	200009ac 	.word	0x200009ac

08012e68 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
  return (mem_size_t)((u8_t *)mem - ram);
 8012e68:	4b02      	ldr	r3, [pc, #8]	; (8012e74 <mem_to_ptr+0xc>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	1ac0      	subs	r0, r0, r3
}
 8012e6e:	b280      	uxth	r0, r0
 8012e70:	4770      	bx	lr
 8012e72:	bf00      	nop
 8012e74:	200009ac 	.word	0x200009ac

08012e78 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e7a:	4604      	mov	r4, r0
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012e7c:	f7ff fff4 	bl	8012e68 <mem_to_ptr>
 8012e80:	4607      	mov	r7, r0
  nmem = ptr_to_mem(mem->next);
 8012e82:	8825      	ldrh	r5, [r4, #0]
 8012e84:	4628      	mov	r0, r5
 8012e86:	f7ff ffe9 	bl	8012e5c <ptr_to_mem>
 8012e8a:	4606      	mov	r6, r0
  pmem = ptr_to_mem(mem->prev);
 8012e8c:	8864      	ldrh	r4, [r4, #2]
 8012e8e:	4620      	mov	r0, r4
 8012e90:	f7ff ffe4 	bl	8012e5c <ptr_to_mem>
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012e94:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8012e98:	d810      	bhi.n	8012ebc <mem_link_valid+0x44>
 8012e9a:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 8012e9e:	d80f      	bhi.n	8012ec0 <mem_link_valid+0x48>
 8012ea0:	42bc      	cmp	r4, r7
 8012ea2:	d002      	beq.n	8012eaa <mem_link_valid+0x32>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012ea4:	8803      	ldrh	r3, [r0, #0]
 8012ea6:	42bb      	cmp	r3, r7
 8012ea8:	d10c      	bne.n	8012ec4 <mem_link_valid+0x4c>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012eaa:	4b09      	ldr	r3, [pc, #36]	; (8012ed0 <mem_link_valid+0x58>)
 8012eac:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012eae:	42b3      	cmp	r3, r6
 8012eb0:	d00a      	beq.n	8012ec8 <mem_link_valid+0x50>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012eb2:	8873      	ldrh	r3, [r6, #2]
 8012eb4:	42bb      	cmp	r3, r7
 8012eb6:	d109      	bne.n	8012ecc <mem_link_valid+0x54>
    return 0;
  }
  return 1;
 8012eb8:	2001      	movs	r0, #1
 8012eba:	e000      	b.n	8012ebe <mem_link_valid+0x46>
    return 0;
 8012ebc:	2000      	movs	r0, #0
}
 8012ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return 0;
 8012ec0:	2000      	movs	r0, #0
 8012ec2:	e7fc      	b.n	8012ebe <mem_link_valid+0x46>
 8012ec4:	2000      	movs	r0, #0
 8012ec6:	e7fa      	b.n	8012ebe <mem_link_valid+0x46>
  return 1;
 8012ec8:	2001      	movs	r0, #1
 8012eca:	e7f8      	b.n	8012ebe <mem_link_valid+0x46>
    return 0;
 8012ecc:	2000      	movs	r0, #0
 8012ece:	e7f6      	b.n	8012ebe <mem_link_valid+0x46>
 8012ed0:	200009b0 	.word	0x200009b0

08012ed4 <plug_holes>:
{
 8012ed4:	b538      	push	{r3, r4, r5, lr}
 8012ed6:	4604      	mov	r4, r0
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012ed8:	4b35      	ldr	r3, [pc, #212]	; (8012fb0 <plug_holes+0xdc>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	4283      	cmp	r3, r0
 8012ede:	d840      	bhi.n	8012f62 <plug_holes+0x8e>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012ee0:	4b34      	ldr	r3, [pc, #208]	; (8012fb4 <plug_holes+0xe0>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	42a3      	cmp	r3, r4
 8012ee6:	d944      	bls.n	8012f72 <plug_holes+0x9e>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012ee8:	7923      	ldrb	r3, [r4, #4]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d149      	bne.n	8012f82 <plug_holes+0xae>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012eee:	8823      	ldrh	r3, [r4, #0]
 8012ef0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012ef4:	d84d      	bhi.n	8012f92 <plug_holes+0xbe>
  nmem = ptr_to_mem(mem->next);
 8012ef6:	8820      	ldrh	r0, [r4, #0]
 8012ef8:	f7ff ffb0 	bl	8012e5c <ptr_to_mem>
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012efc:	4284      	cmp	r4, r0
 8012efe:	d016      	beq.n	8012f2e <plug_holes+0x5a>
 8012f00:	7903      	ldrb	r3, [r0, #4]
 8012f02:	b9a3      	cbnz	r3, 8012f2e <plug_holes+0x5a>
 8012f04:	4b2b      	ldr	r3, [pc, #172]	; (8012fb4 <plug_holes+0xe0>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	4283      	cmp	r3, r0
 8012f0a:	d010      	beq.n	8012f2e <plug_holes+0x5a>
    if (lfree == nmem) {
 8012f0c:	4b2a      	ldr	r3, [pc, #168]	; (8012fb8 <plug_holes+0xe4>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	4283      	cmp	r3, r0
 8012f12:	d046      	beq.n	8012fa2 <plug_holes+0xce>
    mem->next = nmem->next;
 8012f14:	8803      	ldrh	r3, [r0, #0]
 8012f16:	8023      	strh	r3, [r4, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012f18:	8800      	ldrh	r0, [r0, #0]
 8012f1a:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 8012f1e:	d006      	beq.n	8012f2e <plug_holes+0x5a>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012f20:	f7ff ff9c 	bl	8012e5c <ptr_to_mem>
 8012f24:	4605      	mov	r5, r0
 8012f26:	4620      	mov	r0, r4
 8012f28:	f7ff ff9e 	bl	8012e68 <mem_to_ptr>
 8012f2c:	8068      	strh	r0, [r5, #2]
  pmem = ptr_to_mem(mem->prev);
 8012f2e:	8860      	ldrh	r0, [r4, #2]
 8012f30:	f7ff ff94 	bl	8012e5c <ptr_to_mem>
 8012f34:	4605      	mov	r5, r0
  if (pmem != mem && pmem->used == 0) {
 8012f36:	4284      	cmp	r4, r0
 8012f38:	d012      	beq.n	8012f60 <plug_holes+0x8c>
 8012f3a:	7903      	ldrb	r3, [r0, #4]
 8012f3c:	b983      	cbnz	r3, 8012f60 <plug_holes+0x8c>
    if (lfree == mem) {
 8012f3e:	4b1e      	ldr	r3, [pc, #120]	; (8012fb8 <plug_holes+0xe4>)
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	42a3      	cmp	r3, r4
 8012f44:	d030      	beq.n	8012fa8 <plug_holes+0xd4>
    pmem->next = mem->next;
 8012f46:	8823      	ldrh	r3, [r4, #0]
 8012f48:	802b      	strh	r3, [r5, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012f4a:	8820      	ldrh	r0, [r4, #0]
 8012f4c:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 8012f50:	d006      	beq.n	8012f60 <plug_holes+0x8c>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012f52:	f7ff ff83 	bl	8012e5c <ptr_to_mem>
 8012f56:	4604      	mov	r4, r0
 8012f58:	4628      	mov	r0, r5
 8012f5a:	f7ff ff85 	bl	8012e68 <mem_to_ptr>
 8012f5e:	8060      	strh	r0, [r4, #2]
}
 8012f60:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012f62:	4b16      	ldr	r3, [pc, #88]	; (8012fbc <plug_holes+0xe8>)
 8012f64:	f240 12df 	movw	r2, #479	; 0x1df
 8012f68:	4915      	ldr	r1, [pc, #84]	; (8012fc0 <plug_holes+0xec>)
 8012f6a:	4816      	ldr	r0, [pc, #88]	; (8012fc4 <plug_holes+0xf0>)
 8012f6c:	f008 fd88 	bl	801ba80 <iprintf>
 8012f70:	e7b6      	b.n	8012ee0 <plug_holes+0xc>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012f72:	4b12      	ldr	r3, [pc, #72]	; (8012fbc <plug_holes+0xe8>)
 8012f74:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012f78:	4913      	ldr	r1, [pc, #76]	; (8012fc8 <plug_holes+0xf4>)
 8012f7a:	4812      	ldr	r0, [pc, #72]	; (8012fc4 <plug_holes+0xf0>)
 8012f7c:	f008 fd80 	bl	801ba80 <iprintf>
 8012f80:	e7b2      	b.n	8012ee8 <plug_holes+0x14>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012f82:	4b0e      	ldr	r3, [pc, #56]	; (8012fbc <plug_holes+0xe8>)
 8012f84:	f240 12e1 	movw	r2, #481	; 0x1e1
 8012f88:	4910      	ldr	r1, [pc, #64]	; (8012fcc <plug_holes+0xf8>)
 8012f8a:	480e      	ldr	r0, [pc, #56]	; (8012fc4 <plug_holes+0xf0>)
 8012f8c:	f008 fd78 	bl	801ba80 <iprintf>
 8012f90:	e7ad      	b.n	8012eee <plug_holes+0x1a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012f92:	4b0a      	ldr	r3, [pc, #40]	; (8012fbc <plug_holes+0xe8>)
 8012f94:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8012f98:	490d      	ldr	r1, [pc, #52]	; (8012fd0 <plug_holes+0xfc>)
 8012f9a:	480a      	ldr	r0, [pc, #40]	; (8012fc4 <plug_holes+0xf0>)
 8012f9c:	f008 fd70 	bl	801ba80 <iprintf>
 8012fa0:	e7a9      	b.n	8012ef6 <plug_holes+0x22>
      lfree = mem;
 8012fa2:	4b05      	ldr	r3, [pc, #20]	; (8012fb8 <plug_holes+0xe4>)
 8012fa4:	601c      	str	r4, [r3, #0]
 8012fa6:	e7b5      	b.n	8012f14 <plug_holes+0x40>
      lfree = pmem;
 8012fa8:	4b03      	ldr	r3, [pc, #12]	; (8012fb8 <plug_holes+0xe4>)
 8012faa:	6018      	str	r0, [r3, #0]
 8012fac:	e7cb      	b.n	8012f46 <plug_holes+0x72>
 8012fae:	bf00      	nop
 8012fb0:	200009ac 	.word	0x200009ac
 8012fb4:	200009b0 	.word	0x200009b0
 8012fb8:	200009a8 	.word	0x200009a8
 8012fbc:	0801dc98 	.word	0x0801dc98
 8012fc0:	0801dcc8 	.word	0x0801dcc8
 8012fc4:	0801cca4 	.word	0x0801cca4
 8012fc8:	0801dce0 	.word	0x0801dce0
 8012fcc:	0801dcfc 	.word	0x0801dcfc
 8012fd0:	0801dd18 	.word	0x0801dd18

08012fd4 <mem_init>:
{
 8012fd4:	b538      	push	{r3, r4, r5, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8012fd6:	4c0b      	ldr	r4, [pc, #44]	; (8013004 <mem_init+0x30>)
 8012fd8:	f024 0403 	bic.w	r4, r4, #3
 8012fdc:	4b0a      	ldr	r3, [pc, #40]	; (8013008 <mem_init+0x34>)
 8012fde:	601c      	str	r4, [r3, #0]
  mem->next = MEM_SIZE_ALIGNED;
 8012fe0:	f44f 65c8 	mov.w	r5, #1600	; 0x640
 8012fe4:	8025      	strh	r5, [r4, #0]
  mem->prev = 0;
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	8063      	strh	r3, [r4, #2]
  mem->used = 0;
 8012fea:	7123      	strb	r3, [r4, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012fec:	4628      	mov	r0, r5
 8012fee:	f7ff ff35 	bl	8012e5c <ptr_to_mem>
 8012ff2:	4b06      	ldr	r3, [pc, #24]	; (801300c <mem_init+0x38>)
 8012ff4:	6018      	str	r0, [r3, #0]
  ram_end->used = 1;
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	7103      	strb	r3, [r0, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012ffa:	8005      	strh	r5, [r0, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8012ffc:	8045      	strh	r5, [r0, #2]
  lfree = (struct mem *)(void *)ram;
 8012ffe:	4b04      	ldr	r3, [pc, #16]	; (8013010 <mem_init+0x3c>)
 8013000:	601c      	str	r4, [r3, #0]
}
 8013002:	bd38      	pop	{r3, r4, r5, pc}
 8013004:	20003c83 	.word	0x20003c83
 8013008:	200009ac 	.word	0x200009ac
 801300c:	200009b0 	.word	0x200009b0
 8013010:	200009a8 	.word	0x200009a8

08013014 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013014:	2800      	cmp	r0, #0
 8013016:	d044      	beq.n	80130a2 <mem_free+0x8e>
{
 8013018:	b538      	push	{r3, r4, r5, lr}
 801301a:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801301c:	f010 0f03 	tst.w	r0, #3
 8013020:	d11f      	bne.n	8013062 <mem_free+0x4e>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013022:	f1a0 0508 	sub.w	r5, r0, #8

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8013026:	4b1f      	ldr	r3, [pc, #124]	; (80130a4 <mem_free+0x90>)
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	42ab      	cmp	r3, r5
 801302c:	d821      	bhi.n	8013072 <mem_free+0x5e>
 801302e:	f100 030c 	add.w	r3, r0, #12
 8013032:	4a1d      	ldr	r2, [pc, #116]	; (80130a8 <mem_free+0x94>)
 8013034:	6812      	ldr	r2, [r2, #0]
 8013036:	4293      	cmp	r3, r2
 8013038:	d81b      	bhi.n	8013072 <mem_free+0x5e>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 801303a:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 801303e:	b303      	cbz	r3, 8013082 <mem_free+0x6e>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
 8013040:	4628      	mov	r0, r5
 8013042:	f7ff ff19 	bl	8012e78 <mem_link_valid>
 8013046:	b320      	cbz	r0, 8013092 <mem_free+0x7e>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 8013048:	2300      	movs	r3, #0
 801304a:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 801304e:	4b17      	ldr	r3, [pc, #92]	; (80130ac <mem_free+0x98>)
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	42ab      	cmp	r3, r5
 8013054:	d901      	bls.n	801305a <mem_free+0x46>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013056:	4b15      	ldr	r3, [pc, #84]	; (80130ac <mem_free+0x98>)
 8013058:	601d      	str	r5, [r3, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801305a:	4628      	mov	r0, r5
 801305c:	f7ff ff3a 	bl	8012ed4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013060:	e00e      	b.n	8013080 <mem_free+0x6c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013062:	4b13      	ldr	r3, [pc, #76]	; (80130b0 <mem_free+0x9c>)
 8013064:	f240 2273 	movw	r2, #627	; 0x273
 8013068:	4912      	ldr	r1, [pc, #72]	; (80130b4 <mem_free+0xa0>)
 801306a:	4813      	ldr	r0, [pc, #76]	; (80130b8 <mem_free+0xa4>)
 801306c:	f008 fd08 	bl	801ba80 <iprintf>
    return;
 8013070:	e006      	b.n	8013080 <mem_free+0x6c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8013072:	4b0f      	ldr	r3, [pc, #60]	; (80130b0 <mem_free+0x9c>)
 8013074:	f240 227f 	movw	r2, #639	; 0x27f
 8013078:	4910      	ldr	r1, [pc, #64]	; (80130bc <mem_free+0xa8>)
 801307a:	480f      	ldr	r0, [pc, #60]	; (80130b8 <mem_free+0xa4>)
 801307c:	f008 fd00 	bl	801ba80 <iprintf>
}
 8013080:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8013082:	4b0b      	ldr	r3, [pc, #44]	; (80130b0 <mem_free+0x9c>)
 8013084:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8013088:	490d      	ldr	r1, [pc, #52]	; (80130c0 <mem_free+0xac>)
 801308a:	480b      	ldr	r0, [pc, #44]	; (80130b8 <mem_free+0xa4>)
 801308c:	f008 fcf8 	bl	801ba80 <iprintf>
    return;
 8013090:	e7f6      	b.n	8013080 <mem_free+0x6c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8013092:	4b07      	ldr	r3, [pc, #28]	; (80130b0 <mem_free+0x9c>)
 8013094:	f240 2295 	movw	r2, #661	; 0x295
 8013098:	490a      	ldr	r1, [pc, #40]	; (80130c4 <mem_free+0xb0>)
 801309a:	4807      	ldr	r0, [pc, #28]	; (80130b8 <mem_free+0xa4>)
 801309c:	f008 fcf0 	bl	801ba80 <iprintf>
    return;
 80130a0:	e7ee      	b.n	8013080 <mem_free+0x6c>
 80130a2:	4770      	bx	lr
 80130a4:	200009ac 	.word	0x200009ac
 80130a8:	200009b0 	.word	0x200009b0
 80130ac:	200009a8 	.word	0x200009a8
 80130b0:	0801dc98 	.word	0x0801dc98
 80130b4:	0801dd44 	.word	0x0801dd44
 80130b8:	0801cca4 	.word	0x0801cca4
 80130bc:	0801dd68 	.word	0x0801dd68
 80130c0:	0801dd84 	.word	0x0801dd84
 80130c4:	0801ddac 	.word	0x0801ddac

080130c8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80130c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130cc:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80130ce:	1ccc      	adds	r4, r1, #3
 80130d0:	b2a4      	uxth	r4, r4
 80130d2:	f024 0403 	bic.w	r4, r4, #3
 80130d6:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 80130d8:	2c0b      	cmp	r4, #11
 80130da:	d904      	bls.n	80130e6 <mem_trim+0x1e>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80130dc:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 80130e0:	d902      	bls.n	80130e8 <mem_trim+0x20>
    return NULL;
 80130e2:	2500      	movs	r5, #0
 80130e4:	e099      	b.n	801321a <mem_trim+0x152>
    newsize = MIN_SIZE_ALIGNED;
 80130e6:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80130e8:	428c      	cmp	r4, r1
 80130ea:	f0c0 8095 	bcc.w	8013218 <mem_trim+0x150>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80130ee:	4b4d      	ldr	r3, [pc, #308]	; (8013224 <mem_trim+0x15c>)
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	42ab      	cmp	r3, r5
 80130f4:	d803      	bhi.n	80130fe <mem_trim+0x36>
 80130f6:	4b4c      	ldr	r3, [pc, #304]	; (8013228 <mem_trim+0x160>)
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	42ab      	cmp	r3, r5
 80130fc:	d806      	bhi.n	801310c <mem_trim+0x44>
 80130fe:	4b4b      	ldr	r3, [pc, #300]	; (801322c <mem_trim+0x164>)
 8013100:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013104:	494a      	ldr	r1, [pc, #296]	; (8013230 <mem_trim+0x168>)
 8013106:	484b      	ldr	r0, [pc, #300]	; (8013234 <mem_trim+0x16c>)
 8013108:	f008 fcba 	bl	801ba80 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801310c:	4b45      	ldr	r3, [pc, #276]	; (8013224 <mem_trim+0x15c>)
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	42ab      	cmp	r3, r5
 8013112:	f200 8082 	bhi.w	801321a <mem_trim+0x152>
 8013116:	4b44      	ldr	r3, [pc, #272]	; (8013228 <mem_trim+0x160>)
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	42ab      	cmp	r3, r5
 801311c:	d97d      	bls.n	801321a <mem_trim+0x152>
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801311e:	f1a5 0008 	sub.w	r0, r5, #8
 8013122:	f7ff fea1 	bl	8012e68 <mem_to_ptr>
 8013126:	4606      	mov	r6, r0

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8013128:	f835 8c08 	ldrh.w	r8, [r5, #-8]
 801312c:	eba8 0800 	sub.w	r8, r8, r0
 8013130:	fa1f f888 	uxth.w	r8, r8
 8013134:	f1a8 0808 	sub.w	r8, r8, #8
 8013138:	fa1f f888 	uxth.w	r8, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801313c:	4544      	cmp	r4, r8
 801313e:	d829      	bhi.n	8013194 <mem_trim+0xcc>
  if (newsize > size) {
 8013140:	4544      	cmp	r4, r8
 8013142:	d86d      	bhi.n	8013220 <mem_trim+0x158>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8013144:	d069      	beq.n	801321a <mem_trim+0x152>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8013146:	f835 7c08 	ldrh.w	r7, [r5, #-8]
 801314a:	4638      	mov	r0, r7
 801314c:	f7ff fe86 	bl	8012e5c <ptr_to_mem>
 8013150:	4681      	mov	r9, r0
  if (mem2->used == 0) {
 8013152:	7903      	ldrb	r3, [r0, #4]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d133      	bne.n	80131c0 <mem_trim+0xf8>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013158:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
 801315c:	d022      	beq.n	80131a4 <mem_trim+0xdc>
    /* remember the old next pointer */
    next = mem2->next;
 801315e:	f8b9 7000 	ldrh.w	r7, [r9]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013162:	4434      	add	r4, r6
 8013164:	b2a4      	uxth	r4, r4
 8013166:	3408      	adds	r4, #8
 8013168:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 801316a:	4b33      	ldr	r3, [pc, #204]	; (8013238 <mem_trim+0x170>)
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	454b      	cmp	r3, r9
 8013170:	d020      	beq.n	80131b4 <mem_trim+0xec>
      lfree = ptr_to_mem(ptr2);
    }
    mem2 = ptr_to_mem(ptr2);
 8013172:	4620      	mov	r0, r4
 8013174:	f7ff fe72 	bl	8012e5c <ptr_to_mem>
    mem2->used = 0;
 8013178:	2300      	movs	r3, #0
 801317a:	7103      	strb	r3, [r0, #4]
    /* restore the next pointer */
    mem2->next = next;
 801317c:	8007      	strh	r7, [r0, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801317e:	8046      	strh	r6, [r0, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013180:	f825 4c08 	strh.w	r4, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013184:	8800      	ldrh	r0, [r0, #0]
 8013186:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 801318a:	d046      	beq.n	801321a <mem_trim+0x152>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801318c:	f7ff fe66 	bl	8012e5c <ptr_to_mem>
 8013190:	8044      	strh	r4, [r0, #2]
 8013192:	e042      	b.n	801321a <mem_trim+0x152>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8013194:	4b25      	ldr	r3, [pc, #148]	; (801322c <mem_trim+0x164>)
 8013196:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801319a:	4928      	ldr	r1, [pc, #160]	; (801323c <mem_trim+0x174>)
 801319c:	4825      	ldr	r0, [pc, #148]	; (8013234 <mem_trim+0x16c>)
 801319e:	f008 fc6f 	bl	801ba80 <iprintf>
 80131a2:	e7cd      	b.n	8013140 <mem_trim+0x78>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80131a4:	4b21      	ldr	r3, [pc, #132]	; (801322c <mem_trim+0x164>)
 80131a6:	f240 22f5 	movw	r2, #757	; 0x2f5
 80131aa:	4925      	ldr	r1, [pc, #148]	; (8013240 <mem_trim+0x178>)
 80131ac:	4821      	ldr	r0, [pc, #132]	; (8013234 <mem_trim+0x16c>)
 80131ae:	f008 fc67 	bl	801ba80 <iprintf>
 80131b2:	e7d4      	b.n	801315e <mem_trim+0x96>
      lfree = ptr_to_mem(ptr2);
 80131b4:	4620      	mov	r0, r4
 80131b6:	f7ff fe51 	bl	8012e5c <ptr_to_mem>
 80131ba:	4b1f      	ldr	r3, [pc, #124]	; (8013238 <mem_trim+0x170>)
 80131bc:	6018      	str	r0, [r3, #0]
 80131be:	e7d8      	b.n	8013172 <mem_trim+0xaa>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80131c0:	f104 0314 	add.w	r3, r4, #20
 80131c4:	4543      	cmp	r3, r8
 80131c6:	d828      	bhi.n	801321a <mem_trim+0x152>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80131c8:	4434      	add	r4, r6
 80131ca:	b2a4      	uxth	r4, r4
 80131cc:	3408      	adds	r4, #8
 80131ce:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80131d0:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
 80131d4:	d018      	beq.n	8013208 <mem_trim+0x140>
    mem2 = ptr_to_mem(ptr2);
 80131d6:	4620      	mov	r0, r4
 80131d8:	f7ff fe40 	bl	8012e5c <ptr_to_mem>
    if (mem2 < lfree) {
 80131dc:	4b16      	ldr	r3, [pc, #88]	; (8013238 <mem_trim+0x170>)
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	4283      	cmp	r3, r0
 80131e2:	d901      	bls.n	80131e8 <mem_trim+0x120>
      lfree = mem2;
 80131e4:	4b14      	ldr	r3, [pc, #80]	; (8013238 <mem_trim+0x170>)
 80131e6:	6018      	str	r0, [r3, #0]
    }
    mem2->used = 0;
 80131e8:	2300      	movs	r3, #0
 80131ea:	7103      	strb	r3, [r0, #4]
    mem2->next = mem->next;
 80131ec:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 80131f0:	8003      	strh	r3, [r0, #0]
    mem2->prev = ptr;
 80131f2:	8046      	strh	r6, [r0, #2]
    mem->next = ptr2;
 80131f4:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80131f8:	8800      	ldrh	r0, [r0, #0]
 80131fa:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 80131fe:	d00c      	beq.n	801321a <mem_trim+0x152>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013200:	f7ff fe2c 	bl	8012e5c <ptr_to_mem>
 8013204:	8044      	strh	r4, [r0, #2]
 8013206:	e008      	b.n	801321a <mem_trim+0x152>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013208:	4b08      	ldr	r3, [pc, #32]	; (801322c <mem_trim+0x164>)
 801320a:	f240 3216 	movw	r2, #790	; 0x316
 801320e:	490c      	ldr	r1, [pc, #48]	; (8013240 <mem_trim+0x178>)
 8013210:	4808      	ldr	r0, [pc, #32]	; (8013234 <mem_trim+0x16c>)
 8013212:	f008 fc35 	bl	801ba80 <iprintf>
 8013216:	e7de      	b.n	80131d6 <mem_trim+0x10e>
    return NULL;
 8013218:	2500      	movs	r5, #0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 801321a:	4628      	mov	r0, r5
 801321c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8013220:	2500      	movs	r5, #0
 8013222:	e7fa      	b.n	801321a <mem_trim+0x152>
 8013224:	200009ac 	.word	0x200009ac
 8013228:	200009b0 	.word	0x200009b0
 801322c:	0801dc98 	.word	0x0801dc98
 8013230:	0801dde0 	.word	0x0801dde0
 8013234:	0801cca4 	.word	0x0801cca4
 8013238:	200009a8 	.word	0x200009a8
 801323c:	0801ddf8 	.word	0x0801ddf8
 8013240:	0801de18 	.word	0x0801de18

08013244 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013244:	2800      	cmp	r0, #0
 8013246:	f000 809a 	beq.w	801337e <mem_malloc+0x13a>
{
 801324a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801324e:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013250:	1cc6      	adds	r6, r0, #3
 8013252:	b2b6      	uxth	r6, r6
 8013254:	f026 0603 	bic.w	r6, r6, #3
 8013258:	b2b6      	uxth	r6, r6
  if (size < MIN_SIZE_ALIGNED) {
 801325a:	2e0b      	cmp	r6, #11
 801325c:	d904      	bls.n	8013268 <mem_malloc+0x24>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801325e:	f5b6 6fc8 	cmp.w	r6, #1600	; 0x640
 8013262:	d902      	bls.n	801326a <mem_malloc+0x26>
    return NULL;
 8013264:	2000      	movs	r0, #0
 8013266:	e088      	b.n	801337a <mem_malloc+0x136>
    size = MIN_SIZE_ALIGNED;
 8013268:	260c      	movs	r6, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801326a:	429e      	cmp	r6, r3
 801326c:	f0c0 8089 	bcc.w	8013382 <mem_malloc+0x13e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013270:	4b45      	ldr	r3, [pc, #276]	; (8013388 <mem_malloc+0x144>)
 8013272:	6818      	ldr	r0, [r3, #0]
 8013274:	f7ff fdf8 	bl	8012e68 <mem_to_ptr>
 8013278:	4605      	mov	r5, r0
 801327a:	e04c      	b.n	8013316 <mem_malloc+0xd2>
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801327c:	4b43      	ldr	r3, [pc, #268]	; (801338c <mem_malloc+0x148>)
 801327e:	f240 3287 	movw	r2, #903	; 0x387
 8013282:	4943      	ldr	r1, [pc, #268]	; (8013390 <mem_malloc+0x14c>)
 8013284:	4843      	ldr	r0, [pc, #268]	; (8013394 <mem_malloc+0x150>)
 8013286:	f008 fbfb 	bl	801ba80 <iprintf>
 801328a:	e062      	b.n	8013352 <mem_malloc+0x10e>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801328c:	2301      	movs	r3, #1
 801328e:	7103      	strb	r3, [r0, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013290:	4b3d      	ldr	r3, [pc, #244]	; (8013388 <mem_malloc+0x144>)
 8013292:	6818      	ldr	r0, [r3, #0]
 8013294:	42a0      	cmp	r0, r4
 8013296:	d00f      	beq.n	80132b8 <mem_malloc+0x74>
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013298:	4427      	add	r7, r4
 801329a:	3708      	adds	r7, #8
 801329c:	4b3e      	ldr	r3, [pc, #248]	; (8013398 <mem_malloc+0x154>)
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	429f      	cmp	r7, r3
 80132a2:	d81f      	bhi.n	80132e4 <mem_malloc+0xa0>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80132a4:	f014 0503 	ands.w	r5, r4, #3
 80132a8:	d124      	bne.n	80132f4 <mem_malloc+0xb0>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80132aa:	bb5d      	cbnz	r5, 8013304 <mem_malloc+0xc0>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80132ac:	f104 0008 	add.w	r0, r4, #8
 80132b0:	e063      	b.n	801337a <mem_malloc+0x136>
            cur = ptr_to_mem(cur->next);
 80132b2:	8800      	ldrh	r0, [r0, #0]
 80132b4:	f7ff fdd2 	bl	8012e5c <ptr_to_mem>
          while (cur->used && cur != ram_end) {
 80132b8:	7903      	ldrb	r3, [r0, #4]
 80132ba:	b11b      	cbz	r3, 80132c4 <mem_malloc+0x80>
 80132bc:	4a36      	ldr	r2, [pc, #216]	; (8013398 <mem_malloc+0x154>)
 80132be:	6812      	ldr	r2, [r2, #0]
 80132c0:	4282      	cmp	r2, r0
 80132c2:	d1f6      	bne.n	80132b2 <mem_malloc+0x6e>
          lfree = cur;
 80132c4:	4a30      	ldr	r2, [pc, #192]	; (8013388 <mem_malloc+0x144>)
 80132c6:	6010      	str	r0, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80132c8:	4a33      	ldr	r2, [pc, #204]	; (8013398 <mem_malloc+0x154>)
 80132ca:	6812      	ldr	r2, [r2, #0]
 80132cc:	4282      	cmp	r2, r0
 80132ce:	d0e3      	beq.n	8013298 <mem_malloc+0x54>
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d0e1      	beq.n	8013298 <mem_malloc+0x54>
 80132d4:	4b2d      	ldr	r3, [pc, #180]	; (801338c <mem_malloc+0x148>)
 80132d6:	f240 32b5 	movw	r2, #949	; 0x3b5
 80132da:	4930      	ldr	r1, [pc, #192]	; (801339c <mem_malloc+0x158>)
 80132dc:	482d      	ldr	r0, [pc, #180]	; (8013394 <mem_malloc+0x150>)
 80132de:	f008 fbcf 	bl	801ba80 <iprintf>
 80132e2:	e7d9      	b.n	8013298 <mem_malloc+0x54>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80132e4:	4b29      	ldr	r3, [pc, #164]	; (801338c <mem_malloc+0x148>)
 80132e6:	f240 32b9 	movw	r2, #953	; 0x3b9
 80132ea:	492d      	ldr	r1, [pc, #180]	; (80133a0 <mem_malloc+0x15c>)
 80132ec:	4829      	ldr	r0, [pc, #164]	; (8013394 <mem_malloc+0x150>)
 80132ee:	f008 fbc7 	bl	801ba80 <iprintf>
 80132f2:	e7d7      	b.n	80132a4 <mem_malloc+0x60>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80132f4:	4b25      	ldr	r3, [pc, #148]	; (801338c <mem_malloc+0x148>)
 80132f6:	f240 32bb 	movw	r2, #955	; 0x3bb
 80132fa:	492a      	ldr	r1, [pc, #168]	; (80133a4 <mem_malloc+0x160>)
 80132fc:	4825      	ldr	r0, [pc, #148]	; (8013394 <mem_malloc+0x150>)
 80132fe:	f008 fbbf 	bl	801ba80 <iprintf>
 8013302:	e7d2      	b.n	80132aa <mem_malloc+0x66>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013304:	4b21      	ldr	r3, [pc, #132]	; (801338c <mem_malloc+0x148>)
 8013306:	f240 32bd 	movw	r2, #957	; 0x3bd
 801330a:	4927      	ldr	r1, [pc, #156]	; (80133a8 <mem_malloc+0x164>)
 801330c:	4821      	ldr	r0, [pc, #132]	; (8013394 <mem_malloc+0x150>)
 801330e:	f008 fbb7 	bl	801ba80 <iprintf>
 8013312:	e7cb      	b.n	80132ac <mem_malloc+0x68>
         ptr = ptr_to_mem(ptr)->next) {
 8013314:	8825      	ldrh	r5, [r4, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013316:	46a8      	mov	r8, r5
 8013318:	4637      	mov	r7, r6
 801331a:	f5c6 63c8 	rsb	r3, r6, #1600	; 0x640
 801331e:	429d      	cmp	r5, r3
 8013320:	d22a      	bcs.n	8013378 <mem_malloc+0x134>
      mem = ptr_to_mem(ptr);
 8013322:	4628      	mov	r0, r5
 8013324:	f7ff fd9a 	bl	8012e5c <ptr_to_mem>
 8013328:	4604      	mov	r4, r0
      if ((!mem->used) &&
 801332a:	7903      	ldrb	r3, [r0, #4]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d1f1      	bne.n	8013314 <mem_malloc+0xd0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013330:	8803      	ldrh	r3, [r0, #0]
 8013332:	eba3 0308 	sub.w	r3, r3, r8
 8013336:	3b08      	subs	r3, #8
      if ((!mem->used) &&
 8013338:	42bb      	cmp	r3, r7
 801333a:	d3eb      	bcc.n	8013314 <mem_malloc+0xd0>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801333c:	f107 0214 	add.w	r2, r7, #20
 8013340:	4293      	cmp	r3, r2
 8013342:	d3a3      	bcc.n	801328c <mem_malloc+0x48>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013344:	442e      	add	r6, r5
 8013346:	b2b6      	uxth	r6, r6
 8013348:	3608      	adds	r6, #8
 801334a:	b2b6      	uxth	r6, r6
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801334c:	f5b6 6fc8 	cmp.w	r6, #1600	; 0x640
 8013350:	d094      	beq.n	801327c <mem_malloc+0x38>
          mem2 = ptr_to_mem(ptr2);
 8013352:	4630      	mov	r0, r6
 8013354:	f7ff fd82 	bl	8012e5c <ptr_to_mem>
          mem2->used = 0;
 8013358:	2300      	movs	r3, #0
 801335a:	7103      	strb	r3, [r0, #4]
          mem2->next = mem->next;
 801335c:	8823      	ldrh	r3, [r4, #0]
 801335e:	8003      	strh	r3, [r0, #0]
          mem2->prev = ptr;
 8013360:	8045      	strh	r5, [r0, #2]
          mem->next = ptr2;
 8013362:	8026      	strh	r6, [r4, #0]
          mem->used = 1;
 8013364:	2301      	movs	r3, #1
 8013366:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013368:	8800      	ldrh	r0, [r0, #0]
 801336a:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 801336e:	d08f      	beq.n	8013290 <mem_malloc+0x4c>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8013370:	f7ff fd74 	bl	8012e5c <ptr_to_mem>
 8013374:	8046      	strh	r6, [r0, #2]
 8013376:	e78b      	b.n	8013290 <mem_malloc+0x4c>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013378:	2000      	movs	r0, #0
}
 801337a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return NULL;
 801337e:	2000      	movs	r0, #0
}
 8013380:	4770      	bx	lr
    return NULL;
 8013382:	2000      	movs	r0, #0
 8013384:	e7f9      	b.n	801337a <mem_malloc+0x136>
 8013386:	bf00      	nop
 8013388:	200009a8 	.word	0x200009a8
 801338c:	0801dc98 	.word	0x0801dc98
 8013390:	0801de18 	.word	0x0801de18
 8013394:	0801cca4 	.word	0x0801cca4
 8013398:	200009b0 	.word	0x200009b0
 801339c:	0801de2c 	.word	0x0801de2c
 80133a0:	0801de48 	.word	0x0801de48
 80133a4:	0801de78 	.word	0x0801de78
 80133a8:	0801dea8 	.word	0x0801dea8

080133ac <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80133ac:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80133ae:	68c3      	ldr	r3, [r0, #12]
 80133b0:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80133b2:	b124      	cbz	r4, 80133be <do_memp_malloc_pool+0x12>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80133b4:	6822      	ldr	r2, [r4, #0]
 80133b6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80133b8:	f014 0f03 	tst.w	r4, #3
 80133bc:	d101      	bne.n	80133c2 <do_memp_malloc_pool+0x16>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 80133be:	4620      	mov	r0, r4
 80133c0:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80133c2:	4b04      	ldr	r3, [pc, #16]	; (80133d4 <do_memp_malloc_pool+0x28>)
 80133c4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80133c8:	4903      	ldr	r1, [pc, #12]	; (80133d8 <do_memp_malloc_pool+0x2c>)
 80133ca:	4804      	ldr	r0, [pc, #16]	; (80133dc <do_memp_malloc_pool+0x30>)
 80133cc:	f008 fb58 	bl	801ba80 <iprintf>
    return ((u8_t *)memp + MEMP_SIZE);
 80133d0:	e7f5      	b.n	80133be <do_memp_malloc_pool+0x12>
 80133d2:	bf00      	nop
 80133d4:	0801decc 	.word	0x0801decc
 80133d8:	0801defc 	.word	0x0801defc
 80133dc:	0801cca4 	.word	0x0801cca4

080133e0 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80133e0:	b538      	push	{r3, r4, r5, lr}
 80133e2:	4605      	mov	r5, r0
 80133e4:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80133e6:	f011 0f03 	tst.w	r1, #3
 80133ea:	d105      	bne.n	80133f8 <do_memp_free_pool+0x18>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80133ec:	68eb      	ldr	r3, [r5, #12]
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 80133f2:	68eb      	ldr	r3, [r5, #12]
 80133f4:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80133f6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 80133f8:	4b03      	ldr	r3, [pc, #12]	; (8013408 <do_memp_free_pool+0x28>)
 80133fa:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80133fe:	4903      	ldr	r1, [pc, #12]	; (801340c <do_memp_free_pool+0x2c>)
 8013400:	4803      	ldr	r0, [pc, #12]	; (8013410 <do_memp_free_pool+0x30>)
 8013402:	f008 fb3d 	bl	801ba80 <iprintf>
 8013406:	e7f1      	b.n	80133ec <do_memp_free_pool+0xc>
 8013408:	0801decc 	.word	0x0801decc
 801340c:	0801df20 	.word	0x0801df20
 8013410:	0801cca4 	.word	0x0801cca4

08013414 <memp_init_pool>:
  *desc->tab = NULL;
 8013414:	68c3      	ldr	r3, [r0, #12]
 8013416:	2200      	movs	r2, #0
 8013418:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801341a:	6883      	ldr	r3, [r0, #8]
 801341c:	3303      	adds	r3, #3
 801341e:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8013422:	88c1      	ldrh	r1, [r0, #6]
 8013424:	4291      	cmp	r1, r2
 8013426:	dd08      	ble.n	801343a <memp_init_pool+0x26>
    memp->next = *desc->tab;
 8013428:	68c1      	ldr	r1, [r0, #12]
 801342a:	6809      	ldr	r1, [r1, #0]
 801342c:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 801342e:	68c1      	ldr	r1, [r0, #12]
 8013430:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013432:	8881      	ldrh	r1, [r0, #4]
 8013434:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 8013436:	3201      	adds	r2, #1
 8013438:	e7f3      	b.n	8013422 <memp_init_pool+0xe>
}
 801343a:	4770      	bx	lr

0801343c <memp_init>:
{
 801343c:	b510      	push	{r4, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801343e:	2400      	movs	r4, #0
 8013440:	e006      	b.n	8013450 <memp_init+0x14>
    memp_init_pool(memp_pools[i]);
 8013442:	4b05      	ldr	r3, [pc, #20]	; (8013458 <memp_init+0x1c>)
 8013444:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013448:	f7ff ffe4 	bl	8013414 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801344c:	3401      	adds	r4, #1
 801344e:	b2a4      	uxth	r4, r4
 8013450:	2c08      	cmp	r4, #8
 8013452:	d9f6      	bls.n	8013442 <memp_init+0x6>
}
 8013454:	bd10      	pop	{r4, pc}
 8013456:	bf00      	nop
 8013458:	0801e074 	.word	0x0801e074

0801345c <memp_malloc>:
{
 801345c:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801345e:	2808      	cmp	r0, #8
 8013460:	d805      	bhi.n	801346e <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013462:	4b07      	ldr	r3, [pc, #28]	; (8013480 <memp_malloc+0x24>)
 8013464:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8013468:	f7ff ffa0 	bl	80133ac <do_memp_malloc_pool>
}
 801346c:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801346e:	4b05      	ldr	r3, [pc, #20]	; (8013484 <memp_malloc+0x28>)
 8013470:	f240 1257 	movw	r2, #343	; 0x157
 8013474:	4904      	ldr	r1, [pc, #16]	; (8013488 <memp_malloc+0x2c>)
 8013476:	4805      	ldr	r0, [pc, #20]	; (801348c <memp_malloc+0x30>)
 8013478:	f008 fb02 	bl	801ba80 <iprintf>
 801347c:	2000      	movs	r0, #0
 801347e:	e7f5      	b.n	801346c <memp_malloc+0x10>
 8013480:	0801e074 	.word	0x0801e074
 8013484:	0801decc 	.word	0x0801decc
 8013488:	0801df40 	.word	0x0801df40
 801348c:	0801cca4 	.word	0x0801cca4

08013490 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013490:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013492:	2808      	cmp	r0, #8
 8013494:	d806      	bhi.n	80134a4 <memp_free+0x14>

  if (mem == NULL) {
 8013496:	b121      	cbz	r1, 80134a2 <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013498:	4b06      	ldr	r3, [pc, #24]	; (80134b4 <memp_free+0x24>)
 801349a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801349e:	f7ff ff9f 	bl	80133e0 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80134a2:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80134a4:	4b04      	ldr	r3, [pc, #16]	; (80134b8 <memp_free+0x28>)
 80134a6:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80134aa:	4904      	ldr	r1, [pc, #16]	; (80134bc <memp_free+0x2c>)
 80134ac:	4804      	ldr	r0, [pc, #16]	; (80134c0 <memp_free+0x30>)
 80134ae:	f008 fae7 	bl	801ba80 <iprintf>
 80134b2:	e7f6      	b.n	80134a2 <memp_free+0x12>
 80134b4:	0801e074 	.word	0x0801e074
 80134b8:	0801decc 	.word	0x0801decc
 80134bc:	0801df60 	.word	0x0801df60
 80134c0:	0801cca4 	.word	0x0801cca4

080134c4 <netif_do_set_netmask>:

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80134c4:	680b      	ldr	r3, [r1, #0]
 80134c6:	6882      	ldr	r2, [r0, #8]
 80134c8:	4293      	cmp	r3, r2
 80134ca:	d005      	beq.n	80134d8 <netif_do_set_netmask+0x14>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80134cc:	b111      	cbz	r1, 80134d4 <netif_do_set_netmask+0x10>
 80134ce:	6083      	str	r3, [r0, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80134d0:	2001      	movs	r0, #1
 80134d2:	4770      	bx	lr
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80134d4:	2300      	movs	r3, #0
 80134d6:	e7fa      	b.n	80134ce <netif_do_set_netmask+0xa>
  }
  return 0; /* netmask unchanged */
 80134d8:	2000      	movs	r0, #0
}
 80134da:	4770      	bx	lr

080134dc <netif_do_set_gw>:

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80134dc:	680b      	ldr	r3, [r1, #0]
 80134de:	68c2      	ldr	r2, [r0, #12]
 80134e0:	4293      	cmp	r3, r2
 80134e2:	d005      	beq.n	80134f0 <netif_do_set_gw+0x14>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80134e4:	b111      	cbz	r1, 80134ec <netif_do_set_gw+0x10>
 80134e6:	60c3      	str	r3, [r0, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80134e8:	2001      	movs	r0, #1
 80134ea:	4770      	bx	lr
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80134ec:	2300      	movs	r3, #0
 80134ee:	e7fa      	b.n	80134e6 <netif_do_set_gw+0xa>
  }
  return 0; /* gateway unchanged */
 80134f0:	2000      	movs	r0, #0
}
 80134f2:	4770      	bx	lr

080134f4 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 80134f4:	f06f 000b 	mvn.w	r0, #11
 80134f8:	4770      	bx	lr

080134fa <netif_do_ip_addr_changed>:
{
 80134fa:	b538      	push	{r3, r4, r5, lr}
 80134fc:	4604      	mov	r4, r0
 80134fe:	460d      	mov	r5, r1
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8013500:	f001 fb16 	bl	8014b30 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8013504:	4629      	mov	r1, r5
 8013506:	4620      	mov	r0, r4
 8013508:	f005 fba4 	bl	8018c54 <udp_netif_ip_addr_changed>
}
 801350c:	bd38      	pop	{r3, r4, r5, pc}
	...

08013510 <netif_issue_reports>:
{
 8013510:	b538      	push	{r3, r4, r5, lr}
 8013512:	460c      	mov	r4, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013514:	4605      	mov	r5, r0
 8013516:	b170      	cbz	r0, 8013536 <netif_issue_reports+0x26>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013518:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 801351c:	f003 0205 	and.w	r2, r3, #5
 8013520:	2a05      	cmp	r2, #5
 8013522:	d107      	bne.n	8013534 <netif_issue_reports+0x24>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013524:	f014 0f01 	tst.w	r4, #1
 8013528:	d004      	beq.n	8013534 <netif_issue_reports+0x24>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801352a:	686a      	ldr	r2, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801352c:	b112      	cbz	r2, 8013534 <netif_issue_reports+0x24>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801352e:	f013 0f08 	tst.w	r3, #8
 8013532:	d108      	bne.n	8013546 <netif_issue_reports+0x36>
}
 8013534:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013536:	4b06      	ldr	r3, [pc, #24]	; (8013550 <netif_issue_reports+0x40>)
 8013538:	f240 326d 	movw	r2, #877	; 0x36d
 801353c:	4905      	ldr	r1, [pc, #20]	; (8013554 <netif_issue_reports+0x44>)
 801353e:	4806      	ldr	r0, [pc, #24]	; (8013558 <netif_issue_reports+0x48>)
 8013540:	f008 fa9e 	bl	801ba80 <iprintf>
 8013544:	e7e8      	b.n	8013518 <netif_issue_reports+0x8>
      etharp_gratuitous(netif);
 8013546:	1d29      	adds	r1, r5, #4
 8013548:	4628      	mov	r0, r5
 801354a:	f007 f85d 	bl	801a608 <etharp_request>
 801354e:	e7f1      	b.n	8013534 <netif_issue_reports+0x24>
 8013550:	0801e098 	.word	0x0801e098
 8013554:	0801e0cc 	.word	0x0801e0cc
 8013558:	0801cca4 	.word	0x0801cca4

0801355c <netif_do_set_ipaddr>:
{
 801355c:	b570      	push	{r4, r5, r6, lr}
 801355e:	b082      	sub	sp, #8
 8013560:	4604      	mov	r4, r0
 8013562:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013564:	460e      	mov	r6, r1
 8013566:	b139      	cbz	r1, 8013578 <netif_do_set_ipaddr+0x1c>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8013568:	b175      	cbz	r5, 8013588 <netif_do_set_ipaddr+0x2c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801356a:	6832      	ldr	r2, [r6, #0]
 801356c:	6863      	ldr	r3, [r4, #4]
 801356e:	429a      	cmp	r2, r3
 8013570:	d112      	bne.n	8013598 <netif_do_set_ipaddr+0x3c>
  return 0; /* address unchanged */
 8013572:	2000      	movs	r0, #0
}
 8013574:	b002      	add	sp, #8
 8013576:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013578:	4b10      	ldr	r3, [pc, #64]	; (80135bc <netif_do_set_ipaddr+0x60>)
 801357a:	f240 12cb 	movw	r2, #459	; 0x1cb
 801357e:	4910      	ldr	r1, [pc, #64]	; (80135c0 <netif_do_set_ipaddr+0x64>)
 8013580:	4810      	ldr	r0, [pc, #64]	; (80135c4 <netif_do_set_ipaddr+0x68>)
 8013582:	f008 fa7d 	bl	801ba80 <iprintf>
 8013586:	e7ef      	b.n	8013568 <netif_do_set_ipaddr+0xc>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8013588:	4b0c      	ldr	r3, [pc, #48]	; (80135bc <netif_do_set_ipaddr+0x60>)
 801358a:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801358e:	490c      	ldr	r1, [pc, #48]	; (80135c0 <netif_do_set_ipaddr+0x64>)
 8013590:	480c      	ldr	r0, [pc, #48]	; (80135c4 <netif_do_set_ipaddr+0x68>)
 8013592:	f008 fa75 	bl	801ba80 <iprintf>
 8013596:	e7e8      	b.n	801356a <netif_do_set_ipaddr+0xe>
    *ip_2_ip4(&new_addr) = *ipaddr;
 8013598:	9201      	str	r2, [sp, #4]
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801359a:	602b      	str	r3, [r5, #0]
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801359c:	a901      	add	r1, sp, #4
 801359e:	4628      	mov	r0, r5
 80135a0:	f7ff ffab 	bl	80134fa <netif_do_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80135a4:	b13e      	cbz	r6, 80135b6 <netif_do_set_ipaddr+0x5a>
 80135a6:	6833      	ldr	r3, [r6, #0]
 80135a8:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80135aa:	2101      	movs	r1, #1
 80135ac:	4620      	mov	r0, r4
 80135ae:	f7ff ffaf 	bl	8013510 <netif_issue_reports>
    return 1; /* address changed */
 80135b2:	2001      	movs	r0, #1
 80135b4:	e7de      	b.n	8013574 <netif_do_set_ipaddr+0x18>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80135b6:	2300      	movs	r3, #0
 80135b8:	e7f6      	b.n	80135a8 <netif_do_set_ipaddr+0x4c>
 80135ba:	bf00      	nop
 80135bc:	0801e098 	.word	0x0801e098
 80135c0:	0801e0f0 	.word	0x0801e0f0
 80135c4:	0801cca4 	.word	0x0801cca4

080135c8 <netif_init>:
}
 80135c8:	4770      	bx	lr
	...

080135cc <netif_set_addr>:
{
 80135cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135d0:	b082      	sub	sp, #8
 80135d2:	4604      	mov	r4, r0
 80135d4:	4616      	mov	r6, r2
 80135d6:	461d      	mov	r5, r3
  if (ipaddr == NULL) {
 80135d8:	460f      	mov	r7, r1
 80135da:	b1d9      	cbz	r1, 8013614 <netif_set_addr+0x48>
  if (netmask == NULL) {
 80135dc:	b1e6      	cbz	r6, 8013618 <netif_set_addr+0x4c>
  if (gw == NULL) {
 80135de:	b1ed      	cbz	r5, 801361c <netif_set_addr+0x50>
  remove = ip4_addr_isany(ipaddr);
 80135e0:	b10f      	cbz	r7, 80135e6 <netif_set_addr+0x1a>
 80135e2:	683b      	ldr	r3, [r7, #0]
 80135e4:	b9e3      	cbnz	r3, 8013620 <netif_set_addr+0x54>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80135e6:	aa01      	add	r2, sp, #4
 80135e8:	4639      	mov	r1, r7
 80135ea:	4620      	mov	r0, r4
 80135ec:	f7ff ffb6 	bl	801355c <netif_do_set_ipaddr>
 80135f0:	f04f 0801 	mov.w	r8, #1
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80135f4:	2200      	movs	r2, #0
 80135f6:	4631      	mov	r1, r6
 80135f8:	4620      	mov	r0, r4
 80135fa:	f7ff ff63 	bl	80134c4 <netif_do_set_netmask>
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80135fe:	2200      	movs	r2, #0
 8013600:	4629      	mov	r1, r5
 8013602:	4620      	mov	r0, r4
 8013604:	f7ff ff6a 	bl	80134dc <netif_do_set_gw>
  if (!remove) {
 8013608:	f1b8 0f00 	cmp.w	r8, #0
 801360c:	d00b      	beq.n	8013626 <netif_set_addr+0x5a>
}
 801360e:	b002      	add	sp, #8
 8013610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ipaddr = IP4_ADDR_ANY4;
 8013614:	4f07      	ldr	r7, [pc, #28]	; (8013634 <netif_set_addr+0x68>)
 8013616:	e7e1      	b.n	80135dc <netif_set_addr+0x10>
    netmask = IP4_ADDR_ANY4;
 8013618:	4e06      	ldr	r6, [pc, #24]	; (8013634 <netif_set_addr+0x68>)
 801361a:	e7e0      	b.n	80135de <netif_set_addr+0x12>
    gw = IP4_ADDR_ANY4;
 801361c:	4d05      	ldr	r5, [pc, #20]	; (8013634 <netif_set_addr+0x68>)
 801361e:	e7df      	b.n	80135e0 <netif_set_addr+0x14>
  remove = ip4_addr_isany(ipaddr);
 8013620:	f04f 0800 	mov.w	r8, #0
 8013624:	e7e6      	b.n	80135f4 <netif_set_addr+0x28>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013626:	aa01      	add	r2, sp, #4
 8013628:	4639      	mov	r1, r7
 801362a:	4620      	mov	r0, r4
 801362c:	f7ff ff96 	bl	801355c <netif_do_set_ipaddr>
}
 8013630:	e7ed      	b.n	801360e <netif_set_addr+0x42>
 8013632:	bf00      	nop
 8013634:	0802035c 	.word	0x0802035c

08013638 <netif_add>:
{
 8013638:	b570      	push	{r4, r5, r6, lr}
 801363a:	9c05      	ldr	r4, [sp, #20]
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801363c:	4606      	mov	r6, r0
 801363e:	b318      	cbz	r0, 8013688 <netif_add+0x50>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8013640:	2c00      	cmp	r4, #0
 8013642:	d02a      	beq.n	801369a <netif_add+0x62>
  if (ipaddr == NULL) {
 8013644:	2900      	cmp	r1, #0
 8013646:	d031      	beq.n	80136ac <netif_add+0x74>
  if (netmask == NULL) {
 8013648:	2a00      	cmp	r2, #0
 801364a:	d031      	beq.n	80136b0 <netif_add+0x78>
  if (gw == NULL) {
 801364c:	2b00      	cmp	r3, #0
 801364e:	d031      	beq.n	80136b4 <netif_add+0x7c>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013650:	2000      	movs	r0, #0
 8013652:	6070      	str	r0, [r6, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013654:	60b0      	str	r0, [r6, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013656:	60f0      	str	r0, [r6, #12]
  netif->output = netif_null_output_ip4;
 8013658:	4d36      	ldr	r5, [pc, #216]	; (8013734 <netif_add+0xfc>)
 801365a:	6175      	str	r5, [r6, #20]
  netif->mtu = 0;
 801365c:	8530      	strh	r0, [r6, #40]	; 0x28
  netif->flags = 0;
 801365e:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8013662:	6270      	str	r0, [r6, #36]	; 0x24
  netif->link_callback = NULL;
 8013664:	61f0      	str	r0, [r6, #28]
  netif->state = state;
 8013666:	9804      	ldr	r0, [sp, #16]
 8013668:	6230      	str	r0, [r6, #32]
  netif->num = netif_num;
 801366a:	4833      	ldr	r0, [pc, #204]	; (8013738 <netif_add+0x100>)
 801366c:	7800      	ldrb	r0, [r0, #0]
 801366e:	f886 0034 	strb.w	r0, [r6, #52]	; 0x34
  netif->input = input;
 8013672:	9806      	ldr	r0, [sp, #24]
 8013674:	6130      	str	r0, [r6, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013676:	4630      	mov	r0, r6
 8013678:	f7ff ffa8 	bl	80135cc <netif_set_addr>
  if (init(netif) != ERR_OK) {
 801367c:	4630      	mov	r0, r6
 801367e:	47a0      	blx	r4
 8013680:	2800      	cmp	r0, #0
 8013682:	d03e      	beq.n	8013702 <netif_add+0xca>
    return NULL;
 8013684:	2000      	movs	r0, #0
 8013686:	e050      	b.n	801372a <netif_add+0xf2>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013688:	4b2c      	ldr	r3, [pc, #176]	; (801373c <netif_add+0x104>)
 801368a:	f240 1227 	movw	r2, #295	; 0x127
 801368e:	492c      	ldr	r1, [pc, #176]	; (8013740 <netif_add+0x108>)
 8013690:	482c      	ldr	r0, [pc, #176]	; (8013744 <netif_add+0x10c>)
 8013692:	f008 f9f5 	bl	801ba80 <iprintf>
 8013696:	4630      	mov	r0, r6
 8013698:	e047      	b.n	801372a <netif_add+0xf2>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801369a:	4b28      	ldr	r3, [pc, #160]	; (801373c <netif_add+0x104>)
 801369c:	f44f 7294 	mov.w	r2, #296	; 0x128
 80136a0:	4929      	ldr	r1, [pc, #164]	; (8013748 <netif_add+0x110>)
 80136a2:	4828      	ldr	r0, [pc, #160]	; (8013744 <netif_add+0x10c>)
 80136a4:	f008 f9ec 	bl	801ba80 <iprintf>
 80136a8:	2000      	movs	r0, #0
 80136aa:	e03e      	b.n	801372a <netif_add+0xf2>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80136ac:	4927      	ldr	r1, [pc, #156]	; (801374c <netif_add+0x114>)
 80136ae:	e7cb      	b.n	8013648 <netif_add+0x10>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80136b0:	4a26      	ldr	r2, [pc, #152]	; (801374c <netif_add+0x114>)
 80136b2:	e7cb      	b.n	801364c <netif_add+0x14>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80136b4:	4b25      	ldr	r3, [pc, #148]	; (801374c <netif_add+0x114>)
 80136b6:	e7cb      	b.n	8013650 <netif_add+0x18>
        netif->num = 0;
 80136b8:	2300      	movs	r3, #0
 80136ba:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
 80136be:	e024      	b.n	801370a <netif_add+0xd2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80136c0:	4b1e      	ldr	r3, [pc, #120]	; (801373c <netif_add+0x104>)
 80136c2:	f240 128b 	movw	r2, #395	; 0x18b
 80136c6:	4922      	ldr	r1, [pc, #136]	; (8013750 <netif_add+0x118>)
 80136c8:	481e      	ldr	r0, [pc, #120]	; (8013744 <netif_add+0x10c>)
 80136ca:	f008 f9d9 	bl	801ba80 <iprintf>
 80136ce:	e010      	b.n	80136f2 <netif_add+0xba>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80136d0:	4b1a      	ldr	r3, [pc, #104]	; (801373c <netif_add+0x104>)
 80136d2:	f240 128d 	movw	r2, #397	; 0x18d
 80136d6:	491f      	ldr	r1, [pc, #124]	; (8013754 <netif_add+0x11c>)
 80136d8:	481a      	ldr	r0, [pc, #104]	; (8013744 <netif_add+0x10c>)
 80136da:	f008 f9d1 	bl	801ba80 <iprintf>
        if (netif2->num == netif->num) {
 80136de:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80136e2:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 80136e6:	429a      	cmp	r2, r3
 80136e8:	d007      	beq.n	80136fa <netif_add+0xc2>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80136ea:	6824      	ldr	r4, [r4, #0]
 80136ec:	b144      	cbz	r4, 8013700 <netif_add+0xc8>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80136ee:	42a6      	cmp	r6, r4
 80136f0:	d0e6      	beq.n	80136c0 <netif_add+0x88>
        num_netifs++;
 80136f2:	3501      	adds	r5, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80136f4:	2dff      	cmp	r5, #255	; 0xff
 80136f6:	ddf2      	ble.n	80136de <netif_add+0xa6>
 80136f8:	e7ea      	b.n	80136d0 <netif_add+0x98>
          netif->num++;
 80136fa:	3301      	adds	r3, #1
 80136fc:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    } while (netif2 != NULL);
 8013700:	b13c      	cbz	r4, 8013712 <netif_add+0xda>
      if (netif->num == 255) {
 8013702:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8013706:	2bff      	cmp	r3, #255	; 0xff
 8013708:	d0d6      	beq.n	80136b8 <netif_add+0x80>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801370a:	4b13      	ldr	r3, [pc, #76]	; (8013758 <netif_add+0x120>)
 801370c:	681c      	ldr	r4, [r3, #0]
      num_netifs = 0;
 801370e:	2500      	movs	r5, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013710:	e7ec      	b.n	80136ec <netif_add+0xb4>
  if (netif->num == 254) {
 8013712:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8013716:	2bfe      	cmp	r3, #254	; 0xfe
 8013718:	d008      	beq.n	801372c <netif_add+0xf4>
    netif_num = (u8_t)(netif->num + 1);
 801371a:	3301      	adds	r3, #1
 801371c:	4a06      	ldr	r2, [pc, #24]	; (8013738 <netif_add+0x100>)
 801371e:	7013      	strb	r3, [r2, #0]
  netif->next = netif_list;
 8013720:	4b0d      	ldr	r3, [pc, #52]	; (8013758 <netif_add+0x120>)
 8013722:	681a      	ldr	r2, [r3, #0]
 8013724:	6032      	str	r2, [r6, #0]
  netif_list = netif;
 8013726:	601e      	str	r6, [r3, #0]
  return netif;
 8013728:	4630      	mov	r0, r6
}
 801372a:	bd70      	pop	{r4, r5, r6, pc}
    netif_num = 0;
 801372c:	4b02      	ldr	r3, [pc, #8]	; (8013738 <netif_add+0x100>)
 801372e:	2200      	movs	r2, #0
 8013730:	701a      	strb	r2, [r3, #0]
 8013732:	e7f5      	b.n	8013720 <netif_add+0xe8>
 8013734:	080134f5 	.word	0x080134f5
 8013738:	200009d8 	.word	0x200009d8
 801373c:	0801e098 	.word	0x0801e098
 8013740:	0801e100 	.word	0x0801e100
 8013744:	0801cca4 	.word	0x0801cca4
 8013748:	0801e11c 	.word	0x0801e11c
 801374c:	0802035c 	.word	0x0802035c
 8013750:	0801e140 	.word	0x0801e140
 8013754:	0801e154 	.word	0x0801e154
 8013758:	2000720c 	.word	0x2000720c

0801375c <netif_set_default>:
  netif_default = netif;
 801375c:	4b01      	ldr	r3, [pc, #4]	; (8013764 <netif_set_default+0x8>)
 801375e:	6018      	str	r0, [r3, #0]
}
 8013760:	4770      	bx	lr
 8013762:	bf00      	nop
 8013764:	20007210 	.word	0x20007210

08013768 <netif_set_up>:
{
 8013768:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801376a:	b128      	cbz	r0, 8013778 <netif_set_up+0x10>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 801376c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8013770:	f013 0f01 	tst.w	r3, #1
 8013774:	d008      	beq.n	8013788 <netif_set_up+0x20>
}
 8013776:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013778:	4b07      	ldr	r3, [pc, #28]	; (8013798 <netif_set_up+0x30>)
 801377a:	f44f 7254 	mov.w	r2, #848	; 0x350
 801377e:	4907      	ldr	r1, [pc, #28]	; (801379c <netif_set_up+0x34>)
 8013780:	4807      	ldr	r0, [pc, #28]	; (80137a0 <netif_set_up+0x38>)
 8013782:	f008 f97d 	bl	801ba80 <iprintf>
 8013786:	e7f6      	b.n	8013776 <netif_set_up+0xe>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8013788:	f043 0301 	orr.w	r3, r3, #1
 801378c:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013790:	2103      	movs	r1, #3
 8013792:	f7ff febd 	bl	8013510 <netif_issue_reports>
 8013796:	e7ee      	b.n	8013776 <netif_set_up+0xe>
 8013798:	0801e098 	.word	0x0801e098
 801379c:	0801e184 	.word	0x0801e184
 80137a0:	0801cca4 	.word	0x0801cca4

080137a4 <netif_set_down>:
{
 80137a4:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80137a6:	b160      	cbz	r0, 80137c2 <netif_set_down+0x1e>
  if (netif->flags & NETIF_FLAG_UP) {
 80137a8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80137ac:	f013 0f01 	tst.w	r3, #1
 80137b0:	d006      	beq.n	80137c0 <netif_set_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80137b2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80137b6:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80137ba:	f013 0f08 	tst.w	r3, #8
 80137be:	d108      	bne.n	80137d2 <netif_set_down+0x2e>
}
 80137c0:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80137c2:	4b05      	ldr	r3, [pc, #20]	; (80137d8 <netif_set_down+0x34>)
 80137c4:	f240 329b 	movw	r2, #923	; 0x39b
 80137c8:	4904      	ldr	r1, [pc, #16]	; (80137dc <netif_set_down+0x38>)
 80137ca:	4805      	ldr	r0, [pc, #20]	; (80137e0 <netif_set_down+0x3c>)
 80137cc:	f008 f958 	bl	801ba80 <iprintf>
 80137d0:	e7f6      	b.n	80137c0 <netif_set_down+0x1c>
      etharp_cleanup_netif(netif);
 80137d2:	f006 fe97 	bl	801a504 <etharp_cleanup_netif>
    NETIF_STATUS_CALLBACK(netif);
 80137d6:	e7f3      	b.n	80137c0 <netif_set_down+0x1c>
 80137d8:	0801e098 	.word	0x0801e098
 80137dc:	0801e1a0 	.word	0x0801e1a0
 80137e0:	0801cca4 	.word	0x0801cca4

080137e4 <netif_set_link_callback>:
  if (netif) {
 80137e4:	b100      	cbz	r0, 80137e8 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 80137e6:	61c1      	str	r1, [r0, #28]
}
 80137e8:	4770      	bx	lr
	...

080137ec <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80137ec:	4602      	mov	r2, r0
 80137ee:	b158      	cbz	r0, 8013808 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 80137f0:	4b06      	ldr	r3, [pc, #24]	; (801380c <netif_get_by_index+0x20>)
 80137f2:	6818      	ldr	r0, [r3, #0]
 80137f4:	b138      	cbz	r0, 8013806 <netif_get_by_index+0x1a>
      if (idx == netif_get_index(netif)) {
 80137f6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80137fa:	3301      	adds	r3, #1
 80137fc:	b2db      	uxtb	r3, r3
 80137fe:	4293      	cmp	r3, r2
 8013800:	d003      	beq.n	801380a <netif_get_by_index+0x1e>
    NETIF_FOREACH(netif) {
 8013802:	6800      	ldr	r0, [r0, #0]
 8013804:	e7f6      	b.n	80137f4 <netif_get_by_index+0x8>
 8013806:	4770      	bx	lr
        return netif; /* found! */
      }
    }
  }

  return NULL;
 8013808:	2000      	movs	r0, #0
}
 801380a:	4770      	bx	lr
 801380c:	2000720c 	.word	0x2000720c

08013810 <pbuf_pool_is_empty>:
/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8013810:	4b01      	ldr	r3, [pc, #4]	; (8013818 <pbuf_pool_is_empty+0x8>)
 8013812:	2201      	movs	r2, #1
 8013814:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013816:	4770      	bx	lr
 8013818:	20007214 	.word	0x20007214

0801381c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801381c:	b410      	push	{r4}
  p->next = NULL;
 801381e:	2400      	movs	r4, #0
 8013820:	6004      	str	r4, [r0, #0]
  p->payload = payload;
 8013822:	6041      	str	r1, [r0, #4]
  p->tot_len = tot_len;
 8013824:	8102      	strh	r2, [r0, #8]
  p->len = len;
 8013826:	8143      	strh	r3, [r0, #10]
  p->type_internal = (u8_t)type;
 8013828:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801382c:	7303      	strb	r3, [r0, #12]
  p->flags = flags;
 801382e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013832:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8013834:	2301      	movs	r3, #1
 8013836:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8013838:	73c4      	strb	r4, [r0, #15]
}
 801383a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801383e:	4770      	bx	lr

08013840 <pbuf_skip_const>:
{
  u16_t offset_left = in_offset;
  const struct pbuf *q = in;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8013840:	b130      	cbz	r0, 8013850 <pbuf_skip_const+0x10>
 8013842:	8943      	ldrh	r3, [r0, #10]
 8013844:	428b      	cmp	r3, r1
 8013846:	d803      	bhi.n	8013850 <pbuf_skip_const+0x10>
    offset_left = (u16_t)(offset_left - q->len);
 8013848:	1ac9      	subs	r1, r1, r3
 801384a:	b289      	uxth	r1, r1
    q = q->next;
 801384c:	6800      	ldr	r0, [r0, #0]
 801384e:	e7f7      	b.n	8013840 <pbuf_skip_const>
  }
  if (out_offset != NULL) {
 8013850:	b102      	cbz	r2, 8013854 <pbuf_skip_const+0x14>
    *out_offset = offset_left;
 8013852:	8011      	strh	r1, [r2, #0]
  }
  return q;
}
 8013854:	4770      	bx	lr
	...

08013858 <pbuf_add_header_impl>:
{
 8013858:	b570      	push	{r4, r5, r6, lr}
 801385a:	460c      	mov	r4, r1
 801385c:	4616      	mov	r6, r2
  LWIP_ASSERT("p != NULL", p != NULL);
 801385e:	4605      	mov	r5, r0
 8013860:	b1c0      	cbz	r0, 8013894 <pbuf_add_header_impl+0x3c>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8013862:	b33d      	cbz	r5, 80138b4 <pbuf_add_header_impl+0x5c>
 8013864:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8013868:	d226      	bcs.n	80138b8 <pbuf_add_header_impl+0x60>
  if (header_size_increment == 0) {
 801386a:	b33c      	cbz	r4, 80138bc <pbuf_add_header_impl+0x64>
  increment_magnitude = (u16_t)header_size_increment;
 801386c:	b2a2      	uxth	r2, r4
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801386e:	892b      	ldrh	r3, [r5, #8]
 8013870:	4413      	add	r3, r2
 8013872:	b29b      	uxth	r3, r3
 8013874:	4293      	cmp	r3, r2
 8013876:	d323      	bcc.n	80138c0 <pbuf_add_header_impl+0x68>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8013878:	f995 100c 	ldrsb.w	r1, [r5, #12]
 801387c:	2900      	cmp	r1, #0
 801387e:	db11      	blt.n	80138a4 <pbuf_add_header_impl+0x4c>
    if (force) {
 8013880:	b306      	cbz	r6, 80138c4 <pbuf_add_header_impl+0x6c>
      payload = (u8_t *)p->payload - header_size_increment;
 8013882:	6869      	ldr	r1, [r5, #4]
 8013884:	1b0c      	subs	r4, r1, r4
  p->payload = payload;
 8013886:	606c      	str	r4, [r5, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8013888:	8969      	ldrh	r1, [r5, #10]
 801388a:	440a      	add	r2, r1
 801388c:	816a      	strh	r2, [r5, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801388e:	812b      	strh	r3, [r5, #8]
  return 0;
 8013890:	2000      	movs	r0, #0
 8013892:	e012      	b.n	80138ba <pbuf_add_header_impl+0x62>
  LWIP_ASSERT("p != NULL", p != NULL);
 8013894:	4b0c      	ldr	r3, [pc, #48]	; (80138c8 <pbuf_add_header_impl+0x70>)
 8013896:	f240 12df 	movw	r2, #479	; 0x1df
 801389a:	490c      	ldr	r1, [pc, #48]	; (80138cc <pbuf_add_header_impl+0x74>)
 801389c:	480c      	ldr	r0, [pc, #48]	; (80138d0 <pbuf_add_header_impl+0x78>)
 801389e:	f008 f8ef 	bl	801ba80 <iprintf>
 80138a2:	e7de      	b.n	8013862 <pbuf_add_header_impl+0xa>
    payload = (u8_t *)p->payload - header_size_increment;
 80138a4:	6869      	ldr	r1, [r5, #4]
 80138a6:	1b0c      	subs	r4, r1, r4
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80138a8:	f105 0110 	add.w	r1, r5, #16
 80138ac:	42a1      	cmp	r1, r4
 80138ae:	d9ea      	bls.n	8013886 <pbuf_add_header_impl+0x2e>
      return 1;
 80138b0:	2001      	movs	r0, #1
 80138b2:	e002      	b.n	80138ba <pbuf_add_header_impl+0x62>
    return 1;
 80138b4:	2001      	movs	r0, #1
 80138b6:	e000      	b.n	80138ba <pbuf_add_header_impl+0x62>
 80138b8:	2001      	movs	r0, #1
}
 80138ba:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 80138bc:	2000      	movs	r0, #0
 80138be:	e7fc      	b.n	80138ba <pbuf_add_header_impl+0x62>
    return 1;
 80138c0:	2001      	movs	r0, #1
 80138c2:	e7fa      	b.n	80138ba <pbuf_add_header_impl+0x62>
      return 1;
 80138c4:	2001      	movs	r0, #1
 80138c6:	e7f8      	b.n	80138ba <pbuf_add_header_impl+0x62>
 80138c8:	0801e1c0 	.word	0x0801e1c0
 80138cc:	0801fe38 	.word	0x0801fe38
 80138d0:	0801cca4 	.word	0x0801cca4

080138d4 <pbuf_free_ooseq>:
{
 80138d4:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80138d6:	4b06      	ldr	r3, [pc, #24]	; (80138f0 <pbuf_free_ooseq+0x1c>)
 80138d8:	2200      	movs	r2, #0
 80138da:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80138dc:	4b05      	ldr	r3, [pc, #20]	; (80138f4 <pbuf_free_ooseq+0x20>)
 80138de:	6818      	ldr	r0, [r3, #0]
 80138e0:	b128      	cbz	r0, 80138ee <pbuf_free_ooseq+0x1a>
    if (pcb->ooseq != NULL) {
 80138e2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80138e4:	b90b      	cbnz	r3, 80138ea <pbuf_free_ooseq+0x16>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80138e6:	68c0      	ldr	r0, [r0, #12]
 80138e8:	e7fa      	b.n	80138e0 <pbuf_free_ooseq+0xc>
      tcp_free_ooseq(pcb);
 80138ea:	f000 ff75 	bl	80147d8 <tcp_free_ooseq>
}
 80138ee:	bd08      	pop	{r3, pc}
 80138f0:	20007214 	.word	0x20007214
 80138f4:	2000721c 	.word	0x2000721c

080138f8 <pbuf_alloc_reference>:
{
 80138f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138fa:	b083      	sub	sp, #12
 80138fc:	4606      	mov	r6, r0
 80138fe:	460d      	mov	r5, r1
 8013900:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8013902:	2a41      	cmp	r2, #65	; 0x41
 8013904:	d001      	beq.n	801390a <pbuf_alloc_reference+0x12>
 8013906:	2a01      	cmp	r2, #1
 8013908:	d10f      	bne.n	801392a <pbuf_alloc_reference+0x32>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801390a:	2007      	movs	r0, #7
 801390c:	f7ff fda6 	bl	801345c <memp_malloc>
  if (p == NULL) {
 8013910:	4607      	mov	r7, r0
 8013912:	b138      	cbz	r0, 8013924 <pbuf_alloc_reference+0x2c>
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8013914:	2300      	movs	r3, #0
 8013916:	9301      	str	r3, [sp, #4]
 8013918:	9400      	str	r4, [sp, #0]
 801391a:	462b      	mov	r3, r5
 801391c:	462a      	mov	r2, r5
 801391e:	4631      	mov	r1, r6
 8013920:	f7ff ff7c 	bl	801381c <pbuf_init_alloced_pbuf>
}
 8013924:	4638      	mov	r0, r7
 8013926:	b003      	add	sp, #12
 8013928:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801392a:	4b04      	ldr	r3, [pc, #16]	; (801393c <pbuf_alloc_reference+0x44>)
 801392c:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8013930:	4903      	ldr	r1, [pc, #12]	; (8013940 <pbuf_alloc_reference+0x48>)
 8013932:	4804      	ldr	r0, [pc, #16]	; (8013944 <pbuf_alloc_reference+0x4c>)
 8013934:	f008 f8a4 	bl	801ba80 <iprintf>
 8013938:	e7e7      	b.n	801390a <pbuf_alloc_reference+0x12>
 801393a:	bf00      	nop
 801393c:	0801e1c0 	.word	0x0801e1c0
 8013940:	0801e1f0 	.word	0x0801e1f0
 8013944:	0801cca4 	.word	0x0801cca4

08013948 <pbuf_alloced_custom>:
{
 8013948:	b570      	push	{r4, r5, r6, lr}
 801394a:	b082      	sub	sp, #8
 801394c:	460d      	mov	r5, r1
 801394e:	461e      	mov	r6, r3
 8013950:	9906      	ldr	r1, [sp, #24]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013952:	1cc4      	adds	r4, r0, #3
 8013954:	f024 0403 	bic.w	r4, r4, #3
 8013958:	1928      	adds	r0, r5, r4
 801395a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801395e:	4298      	cmp	r0, r3
 8013960:	d80d      	bhi.n	801397e <pbuf_alloced_custom+0x36>
  if (payload_mem != NULL) {
 8013962:	b101      	cbz	r1, 8013966 <pbuf_alloced_custom+0x1e>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8013964:	4421      	add	r1, r4
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8013966:	4634      	mov	r4, r6
 8013968:	2302      	movs	r3, #2
 801396a:	9301      	str	r3, [sp, #4]
 801396c:	9200      	str	r2, [sp, #0]
 801396e:	462b      	mov	r3, r5
 8013970:	462a      	mov	r2, r5
 8013972:	4630      	mov	r0, r6
 8013974:	f7ff ff52 	bl	801381c <pbuf_init_alloced_pbuf>
}
 8013978:	4620      	mov	r0, r4
 801397a:	b002      	add	sp, #8
 801397c:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 801397e:	2400      	movs	r4, #0
 8013980:	e7fa      	b.n	8013978 <pbuf_alloced_custom+0x30>

08013982 <pbuf_add_header>:
{
 8013982:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8013984:	2200      	movs	r2, #0
 8013986:	f7ff ff67 	bl	8013858 <pbuf_add_header_impl>
}
 801398a:	bd08      	pop	{r3, pc}

0801398c <pbuf_remove_header>:
{
 801398c:	b538      	push	{r3, r4, r5, lr}
 801398e:	460c      	mov	r4, r1
  LWIP_ASSERT("p != NULL", p != NULL);
 8013990:	4605      	mov	r5, r0
 8013992:	b190      	cbz	r0, 80139ba <pbuf_remove_header+0x2e>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8013994:	b315      	cbz	r5, 80139dc <pbuf_remove_header+0x50>
 8013996:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 801399a:	d221      	bcs.n	80139e0 <pbuf_remove_header+0x54>
  if (header_size_decrement == 0) {
 801399c:	b314      	cbz	r4, 80139e4 <pbuf_remove_header+0x58>
  increment_magnitude = (u16_t)header_size_decrement;
 801399e:	b2a2      	uxth	r2, r4
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80139a0:	896b      	ldrh	r3, [r5, #10]
 80139a2:	4293      	cmp	r3, r2
 80139a4:	d311      	bcc.n	80139ca <pbuf_remove_header+0x3e>
  payload = p->payload;
 80139a6:	6869      	ldr	r1, [r5, #4]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80139a8:	4421      	add	r1, r4
 80139aa:	6069      	str	r1, [r5, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 80139ac:	1a9b      	subs	r3, r3, r2
 80139ae:	816b      	strh	r3, [r5, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80139b0:	892b      	ldrh	r3, [r5, #8]
 80139b2:	1a9a      	subs	r2, r3, r2
 80139b4:	812a      	strh	r2, [r5, #8]
  return 0;
 80139b6:	2000      	movs	r0, #0
}
 80139b8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80139ba:	4b0b      	ldr	r3, [pc, #44]	; (80139e8 <pbuf_remove_header+0x5c>)
 80139bc:	f240 224b 	movw	r2, #587	; 0x24b
 80139c0:	490a      	ldr	r1, [pc, #40]	; (80139ec <pbuf_remove_header+0x60>)
 80139c2:	480b      	ldr	r0, [pc, #44]	; (80139f0 <pbuf_remove_header+0x64>)
 80139c4:	f008 f85c 	bl	801ba80 <iprintf>
 80139c8:	e7e4      	b.n	8013994 <pbuf_remove_header+0x8>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80139ca:	4b07      	ldr	r3, [pc, #28]	; (80139e8 <pbuf_remove_header+0x5c>)
 80139cc:	f240 2255 	movw	r2, #597	; 0x255
 80139d0:	4908      	ldr	r1, [pc, #32]	; (80139f4 <pbuf_remove_header+0x68>)
 80139d2:	4807      	ldr	r0, [pc, #28]	; (80139f0 <pbuf_remove_header+0x64>)
 80139d4:	f008 f854 	bl	801ba80 <iprintf>
 80139d8:	2001      	movs	r0, #1
 80139da:	e7ed      	b.n	80139b8 <pbuf_remove_header+0x2c>
    return 1;
 80139dc:	2001      	movs	r0, #1
 80139de:	e7eb      	b.n	80139b8 <pbuf_remove_header+0x2c>
 80139e0:	2001      	movs	r0, #1
 80139e2:	e7e9      	b.n	80139b8 <pbuf_remove_header+0x2c>
    return 0;
 80139e4:	2000      	movs	r0, #0
 80139e6:	e7e7      	b.n	80139b8 <pbuf_remove_header+0x2c>
 80139e8:	0801e1c0 	.word	0x0801e1c0
 80139ec:	0801fe38 	.word	0x0801fe38
 80139f0:	0801cca4 	.word	0x0801cca4
 80139f4:	0801e204 	.word	0x0801e204

080139f8 <pbuf_header_impl>:
{
 80139f8:	b508      	push	{r3, lr}
  if (header_size_increment < 0) {
 80139fa:	2900      	cmp	r1, #0
 80139fc:	db02      	blt.n	8013a04 <pbuf_header_impl+0xc>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80139fe:	f7ff ff2b 	bl	8013858 <pbuf_add_header_impl>
}
 8013a02:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8013a04:	4249      	negs	r1, r1
 8013a06:	f7ff ffc1 	bl	801398c <pbuf_remove_header>
 8013a0a:	e7fa      	b.n	8013a02 <pbuf_header_impl+0xa>

08013a0c <pbuf_header_force>:
{
 8013a0c:	b508      	push	{r3, lr}
  return pbuf_header_impl(p, header_size_increment, 1);
 8013a0e:	2201      	movs	r2, #1
 8013a10:	f7ff fff2 	bl	80139f8 <pbuf_header_impl>
}
 8013a14:	bd08      	pop	{r3, pc}
	...

08013a18 <pbuf_free>:
{
 8013a18:	b570      	push	{r4, r5, r6, lr}
  if (p == NULL) {
 8013a1a:	b110      	cbz	r0, 8013a22 <pbuf_free+0xa>
 8013a1c:	4604      	mov	r4, r0
  count = 0;
 8013a1e:	2500      	movs	r5, #0
 8013a20:	e017      	b.n	8013a52 <pbuf_free+0x3a>
    LWIP_ASSERT("p != NULL", p != NULL);
 8013a22:	4b28      	ldr	r3, [pc, #160]	; (8013ac4 <pbuf_free+0xac>)
 8013a24:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8013a28:	4927      	ldr	r1, [pc, #156]	; (8013ac8 <pbuf_free+0xb0>)
 8013a2a:	4828      	ldr	r0, [pc, #160]	; (8013acc <pbuf_free+0xb4>)
 8013a2c:	f008 f828 	bl	801ba80 <iprintf>
    return 0;
 8013a30:	2500      	movs	r5, #0
}
 8013a32:	4628      	mov	r0, r5
 8013a34:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8013a36:	4b23      	ldr	r3, [pc, #140]	; (8013ac4 <pbuf_free+0xac>)
 8013a38:	f240 22f1 	movw	r2, #753	; 0x2f1
 8013a3c:	4924      	ldr	r1, [pc, #144]	; (8013ad0 <pbuf_free+0xb8>)
 8013a3e:	4823      	ldr	r0, [pc, #140]	; (8013acc <pbuf_free+0xb4>)
 8013a40:	f008 f81e 	bl	801ba80 <iprintf>
 8013a44:	e00a      	b.n	8013a5c <pbuf_free+0x44>
        pc->custom_free_function(p);
 8013a46:	6923      	ldr	r3, [r4, #16]
 8013a48:	4620      	mov	r0, r4
 8013a4a:	4798      	blx	r3
      count++;
 8013a4c:	3501      	adds	r5, #1
 8013a4e:	b2ed      	uxtb	r5, r5
      p = q;
 8013a50:	4634      	mov	r4, r6
  while (p != NULL) {
 8013a52:	2c00      	cmp	r4, #0
 8013a54:	d0ed      	beq.n	8013a32 <pbuf_free+0x1a>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8013a56:	7ba3      	ldrb	r3, [r4, #14]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d0ec      	beq.n	8013a36 <pbuf_free+0x1e>
    ref = --(p->ref);
 8013a5c:	7ba3      	ldrb	r3, [r4, #14]
 8013a5e:	3b01      	subs	r3, #1
 8013a60:	b2db      	uxtb	r3, r3
 8013a62:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d1e4      	bne.n	8013a32 <pbuf_free+0x1a>
      q = p->next;
 8013a68:	6826      	ldr	r6, [r4, #0]
      alloc_src = pbuf_get_allocsrc(p);
 8013a6a:	7b23      	ldrb	r3, [r4, #12]
 8013a6c:	f003 030f 	and.w	r3, r3, #15
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8013a70:	7b62      	ldrb	r2, [r4, #13]
 8013a72:	f012 0f02 	tst.w	r2, #2
 8013a76:	d00a      	beq.n	8013a8e <pbuf_free+0x76>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8013a78:	6923      	ldr	r3, [r4, #16]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d1e3      	bne.n	8013a46 <pbuf_free+0x2e>
 8013a7e:	4b11      	ldr	r3, [pc, #68]	; (8013ac4 <pbuf_free+0xac>)
 8013a80:	f240 22ff 	movw	r2, #767	; 0x2ff
 8013a84:	4913      	ldr	r1, [pc, #76]	; (8013ad4 <pbuf_free+0xbc>)
 8013a86:	4811      	ldr	r0, [pc, #68]	; (8013acc <pbuf_free+0xb4>)
 8013a88:	f007 fffa 	bl	801ba80 <iprintf>
 8013a8c:	e7db      	b.n	8013a46 <pbuf_free+0x2e>
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8013a8e:	2b02      	cmp	r3, #2
 8013a90:	d006      	beq.n	8013aa0 <pbuf_free+0x88>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8013a92:	2b01      	cmp	r3, #1
 8013a94:	d009      	beq.n	8013aaa <pbuf_free+0x92>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8013a96:	b96b      	cbnz	r3, 8013ab4 <pbuf_free+0x9c>
          mem_free(p);
 8013a98:	4620      	mov	r0, r4
 8013a9a:	f7ff fabb 	bl	8013014 <mem_free>
 8013a9e:	e7d5      	b.n	8013a4c <pbuf_free+0x34>
          memp_free(MEMP_PBUF_POOL, p);
 8013aa0:	4621      	mov	r1, r4
 8013aa2:	2008      	movs	r0, #8
 8013aa4:	f7ff fcf4 	bl	8013490 <memp_free>
 8013aa8:	e7d0      	b.n	8013a4c <pbuf_free+0x34>
          memp_free(MEMP_PBUF, p);
 8013aaa:	4621      	mov	r1, r4
 8013aac:	2007      	movs	r0, #7
 8013aae:	f7ff fcef 	bl	8013490 <memp_free>
 8013ab2:	e7cb      	b.n	8013a4c <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 8013ab4:	4b03      	ldr	r3, [pc, #12]	; (8013ac4 <pbuf_free+0xac>)
 8013ab6:	f240 320f 	movw	r2, #783	; 0x30f
 8013aba:	4907      	ldr	r1, [pc, #28]	; (8013ad8 <pbuf_free+0xc0>)
 8013abc:	4803      	ldr	r0, [pc, #12]	; (8013acc <pbuf_free+0xb4>)
 8013abe:	f007 ffdf 	bl	801ba80 <iprintf>
 8013ac2:	e7c3      	b.n	8013a4c <pbuf_free+0x34>
 8013ac4:	0801e1c0 	.word	0x0801e1c0
 8013ac8:	0801fe38 	.word	0x0801fe38
 8013acc:	0801cca4 	.word	0x0801cca4
 8013ad0:	0801e224 	.word	0x0801e224
 8013ad4:	0801e23c 	.word	0x0801e23c
 8013ad8:	0801e260 	.word	0x0801e260

08013adc <pbuf_alloc>:
{
 8013adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ae0:	b082      	sub	sp, #8
 8013ae2:	460e      	mov	r6, r1
 8013ae4:	4690      	mov	r8, r2
  u16_t offset = (u16_t)layer;
 8013ae6:	b285      	uxth	r5, r0
  switch (type) {
 8013ae8:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 8013aec:	d046      	beq.n	8013b7c <pbuf_alloc+0xa0>
 8013aee:	4607      	mov	r7, r0
 8013af0:	d80e      	bhi.n	8013b10 <pbuf_alloc+0x34>
 8013af2:	2a01      	cmp	r2, #1
 8013af4:	d002      	beq.n	8013afc <pbuf_alloc+0x20>
 8013af6:	2a41      	cmp	r2, #65	; 0x41
 8013af8:	f040 8084 	bne.w	8013c04 <pbuf_alloc+0x128>
      p = pbuf_alloc_reference(NULL, length, type);
 8013afc:	4642      	mov	r2, r8
 8013afe:	4631      	mov	r1, r6
 8013b00:	2000      	movs	r0, #0
 8013b02:	f7ff fef9 	bl	80138f8 <pbuf_alloc_reference>
 8013b06:	4681      	mov	r9, r0
}
 8013b08:	4648      	mov	r0, r9
 8013b0a:	b002      	add	sp, #8
 8013b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (type) {
 8013b10:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8013b14:	d176      	bne.n	8013c04 <pbuf_alloc+0x128>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013b16:	3503      	adds	r5, #3
 8013b18:	f025 0503 	bic.w	r5, r5, #3
 8013b1c:	b2ad      	uxth	r5, r5
 8013b1e:	1cca      	adds	r2, r1, #3
 8013b20:	b293      	uxth	r3, r2
 8013b22:	f023 0303 	bic.w	r3, r3, #3
 8013b26:	441d      	add	r5, r3
 8013b28:	b2ad      	uxth	r5, r5
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8013b2a:	f105 0010 	add.w	r0, r5, #16
 8013b2e:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013b30:	f022 0203 	bic.w	r2, r2, #3
 8013b34:	4295      	cmp	r5, r2
 8013b36:	d36f      	bcc.n	8013c18 <pbuf_alloc+0x13c>
 8013b38:	4282      	cmp	r2, r0
 8013b3a:	d870      	bhi.n	8013c1e <pbuf_alloc+0x142>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013b3c:	f7ff fb82 	bl	8013244 <mem_malloc>
      if (p == NULL) {
 8013b40:	4681      	mov	r9, r0
 8013b42:	2800      	cmp	r0, #0
 8013b44:	d0e0      	beq.n	8013b08 <pbuf_alloc+0x2c>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013b46:	f107 0110 	add.w	r1, r7, #16
 8013b4a:	4401      	add	r1, r0
 8013b4c:	3103      	adds	r1, #3
 8013b4e:	2300      	movs	r3, #0
 8013b50:	9301      	str	r3, [sp, #4]
 8013b52:	f8cd 8000 	str.w	r8, [sp]
 8013b56:	4633      	mov	r3, r6
 8013b58:	4632      	mov	r2, r6
 8013b5a:	f021 0103 	bic.w	r1, r1, #3
 8013b5e:	f7ff fe5d 	bl	801381c <pbuf_init_alloced_pbuf>
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8013b62:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013b66:	f013 0f03 	tst.w	r3, #3
 8013b6a:	d0cd      	beq.n	8013b08 <pbuf_alloc+0x2c>
 8013b6c:	4b2d      	ldr	r3, [pc, #180]	; (8013c24 <pbuf_alloc+0x148>)
 8013b6e:	f44f 7291 	mov.w	r2, #290	; 0x122
 8013b72:	492d      	ldr	r1, [pc, #180]	; (8013c28 <pbuf_alloc+0x14c>)
 8013b74:	482d      	ldr	r0, [pc, #180]	; (8013c2c <pbuf_alloc+0x150>)
 8013b76:	f007 ff83 	bl	801ba80 <iprintf>
 8013b7a:	e7c5      	b.n	8013b08 <pbuf_alloc+0x2c>
  switch (type) {
 8013b7c:	2700      	movs	r7, #0
 8013b7e:	46b9      	mov	r9, r7
 8013b80:	e01a      	b.n	8013bb8 <pbuf_alloc+0xdc>
          PBUF_POOL_IS_EMPTY();
 8013b82:	f7ff fe45 	bl	8013810 <pbuf_pool_is_empty>
          if (p) {
 8013b86:	f1b9 0f00 	cmp.w	r9, #0
 8013b8a:	d002      	beq.n	8013b92 <pbuf_alloc+0xb6>
            pbuf_free(p);
 8013b8c:	4648      	mov	r0, r9
 8013b8e:	f7ff ff43 	bl	8013a18 <pbuf_free>
          return NULL;
 8013b92:	46b9      	mov	r9, r7
 8013b94:	e7b8      	b.n	8013b08 <pbuf_alloc+0x2c>
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8013b96:	4b23      	ldr	r3, [pc, #140]	; (8013c24 <pbuf_alloc+0x148>)
 8013b98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013b9c:	4924      	ldr	r1, [pc, #144]	; (8013c30 <pbuf_alloc+0x154>)
 8013b9e:	4823      	ldr	r0, [pc, #140]	; (8013c2c <pbuf_alloc+0x150>)
 8013ba0:	f007 ff6e 	bl	801ba80 <iprintf>
        if (p == NULL) {
 8013ba4:	f1b9 0f00 	cmp.w	r9, #0
 8013ba8:	d02a      	beq.n	8013c00 <pbuf_alloc+0x124>
          last->next = q;
 8013baa:	f8ca 7000 	str.w	r7, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 8013bae:	1b36      	subs	r6, r6, r4
 8013bb0:	b2b6      	uxth	r6, r6
        offset = 0;
 8013bb2:	2500      	movs	r5, #0
      } while (rem_len > 0);
 8013bb4:	2e00      	cmp	r6, #0
 8013bb6:	d0a7      	beq.n	8013b08 <pbuf_alloc+0x2c>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013bb8:	46ba      	mov	sl, r7
 8013bba:	2008      	movs	r0, #8
 8013bbc:	f7ff fc4e 	bl	801345c <memp_malloc>
        if (q == NULL) {
 8013bc0:	4607      	mov	r7, r0
 8013bc2:	2800      	cmp	r0, #0
 8013bc4:	d0dd      	beq.n	8013b82 <pbuf_alloc+0xa6>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013bc6:	1cec      	adds	r4, r5, #3
 8013bc8:	f024 0403 	bic.w	r4, r4, #3
 8013bcc:	b2a4      	uxth	r4, r4
 8013bce:	f5c4 7414 	rsb	r4, r4, #592	; 0x250
 8013bd2:	b2a4      	uxth	r4, r4
 8013bd4:	42b4      	cmp	r4, r6
 8013bd6:	bf28      	it	cs
 8013bd8:	4634      	movcs	r4, r6
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8013bda:	f105 0110 	add.w	r1, r5, #16
 8013bde:	4401      	add	r1, r0
 8013be0:	3103      	adds	r1, #3
 8013be2:	2300      	movs	r3, #0
 8013be4:	9301      	str	r3, [sp, #4]
 8013be6:	f8cd 8000 	str.w	r8, [sp]
 8013bea:	4623      	mov	r3, r4
 8013bec:	4632      	mov	r2, r6
 8013bee:	f021 0103 	bic.w	r1, r1, #3
 8013bf2:	f7ff fe13 	bl	801381c <pbuf_init_alloced_pbuf>
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	f013 0f03 	tst.w	r3, #3
 8013bfc:	d0d2      	beq.n	8013ba4 <pbuf_alloc+0xc8>
 8013bfe:	e7ca      	b.n	8013b96 <pbuf_alloc+0xba>
          p = q;
 8013c00:	46b9      	mov	r9, r7
 8013c02:	e7d4      	b.n	8013bae <pbuf_alloc+0xd2>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8013c04:	4b07      	ldr	r3, [pc, #28]	; (8013c24 <pbuf_alloc+0x148>)
 8013c06:	f240 1227 	movw	r2, #295	; 0x127
 8013c0a:	490a      	ldr	r1, [pc, #40]	; (8013c34 <pbuf_alloc+0x158>)
 8013c0c:	4807      	ldr	r0, [pc, #28]	; (8013c2c <pbuf_alloc+0x150>)
 8013c0e:	f007 ff37 	bl	801ba80 <iprintf>
      return NULL;
 8013c12:	f04f 0900 	mov.w	r9, #0
 8013c16:	e777      	b.n	8013b08 <pbuf_alloc+0x2c>
        return NULL;
 8013c18:	f04f 0900 	mov.w	r9, #0
 8013c1c:	e774      	b.n	8013b08 <pbuf_alloc+0x2c>
 8013c1e:	f04f 0900 	mov.w	r9, #0
 8013c22:	e771      	b.n	8013b08 <pbuf_alloc+0x2c>
 8013c24:	0801e1c0 	.word	0x0801e1c0
 8013c28:	0801e2d8 	.word	0x0801e2d8
 8013c2c:	0801cca4 	.word	0x0801cca4
 8013c30:	0801e274 	.word	0x0801e274
 8013c34:	0801e304 	.word	0x0801e304

08013c38 <pbuf_realloc>:
{
 8013c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c3a:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8013c3c:	4604      	mov	r4, r0
 8013c3e:	b1b8      	cbz	r0, 8013c70 <pbuf_realloc+0x38>
  if (new_len >= p->tot_len) {
 8013c40:	8927      	ldrh	r7, [r4, #8]
 8013c42:	42b7      	cmp	r7, r6
 8013c44:	d92e      	bls.n	8013ca4 <pbuf_realloc+0x6c>
  rem_len = new_len;
 8013c46:	4635      	mov	r5, r6
  while (rem_len > q->len) {
 8013c48:	8963      	ldrh	r3, [r4, #10]
 8013c4a:	42ab      	cmp	r3, r5
 8013c4c:	d218      	bcs.n	8013c80 <pbuf_realloc+0x48>
    rem_len = (u16_t)(rem_len - q->len);
 8013c4e:	1aeb      	subs	r3, r5, r3
 8013c50:	b29d      	uxth	r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8013c52:	8923      	ldrh	r3, [r4, #8]
 8013c54:	1bf2      	subs	r2, r6, r7
 8013c56:	4413      	add	r3, r2
 8013c58:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8013c5a:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8013c5c:	2c00      	cmp	r4, #0
 8013c5e:	d1f3      	bne.n	8013c48 <pbuf_realloc+0x10>
 8013c60:	4b1a      	ldr	r3, [pc, #104]	; (8013ccc <pbuf_realloc+0x94>)
 8013c62:	f240 12af 	movw	r2, #431	; 0x1af
 8013c66:	491a      	ldr	r1, [pc, #104]	; (8013cd0 <pbuf_realloc+0x98>)
 8013c68:	481a      	ldr	r0, [pc, #104]	; (8013cd4 <pbuf_realloc+0x9c>)
 8013c6a:	f007 ff09 	bl	801ba80 <iprintf>
 8013c6e:	e7eb      	b.n	8013c48 <pbuf_realloc+0x10>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8013c70:	4b16      	ldr	r3, [pc, #88]	; (8013ccc <pbuf_realloc+0x94>)
 8013c72:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8013c76:	4918      	ldr	r1, [pc, #96]	; (8013cd8 <pbuf_realloc+0xa0>)
 8013c78:	4816      	ldr	r0, [pc, #88]	; (8013cd4 <pbuf_realloc+0x9c>)
 8013c7a:	f007 ff01 	bl	801ba80 <iprintf>
 8013c7e:	e7df      	b.n	8013c40 <pbuf_realloc+0x8>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8013c80:	7b22      	ldrb	r2, [r4, #12]
 8013c82:	f012 0f0f 	tst.w	r2, #15
 8013c86:	d105      	bne.n	8013c94 <pbuf_realloc+0x5c>
 8013c88:	42ab      	cmp	r3, r5
 8013c8a:	d003      	beq.n	8013c94 <pbuf_realloc+0x5c>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8013c8c:	7b63      	ldrb	r3, [r4, #13]
 8013c8e:	f013 0f02 	tst.w	r3, #2
 8013c92:	d008      	beq.n	8013ca6 <pbuf_realloc+0x6e>
  q->len = rem_len;
 8013c94:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8013c96:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8013c98:	6820      	ldr	r0, [r4, #0]
 8013c9a:	b108      	cbz	r0, 8013ca0 <pbuf_realloc+0x68>
    pbuf_free(q->next);
 8013c9c:	f7ff febc 	bl	8013a18 <pbuf_free>
  q->next = NULL;
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	6023      	str	r3, [r4, #0]
}
 8013ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8013ca6:	6863      	ldr	r3, [r4, #4]
 8013ca8:	1b1b      	subs	r3, r3, r4
 8013caa:	18e9      	adds	r1, r5, r3
 8013cac:	b289      	uxth	r1, r1
 8013cae:	4620      	mov	r0, r4
 8013cb0:	f7ff fa0a 	bl	80130c8 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8013cb4:	4604      	mov	r4, r0
 8013cb6:	2800      	cmp	r0, #0
 8013cb8:	d1ec      	bne.n	8013c94 <pbuf_realloc+0x5c>
 8013cba:	4b04      	ldr	r3, [pc, #16]	; (8013ccc <pbuf_realloc+0x94>)
 8013cbc:	f240 12bd 	movw	r2, #445	; 0x1bd
 8013cc0:	4906      	ldr	r1, [pc, #24]	; (8013cdc <pbuf_realloc+0xa4>)
 8013cc2:	4804      	ldr	r0, [pc, #16]	; (8013cd4 <pbuf_realloc+0x9c>)
 8013cc4:	f007 fedc 	bl	801ba80 <iprintf>
 8013cc8:	e7e4      	b.n	8013c94 <pbuf_realloc+0x5c>
 8013cca:	bf00      	nop
 8013ccc:	0801e1c0 	.word	0x0801e1c0
 8013cd0:	0801e338 	.word	0x0801e338
 8013cd4:	0801cca4 	.word	0x0801cca4
 8013cd8:	0801e320 	.word	0x0801e320
 8013cdc:	0801e350 	.word	0x0801e350

08013ce0 <pbuf_clen>:
{
 8013ce0:	4603      	mov	r3, r0
  len = 0;
 8013ce2:	2000      	movs	r0, #0
  while (p != NULL) {
 8013ce4:	b11b      	cbz	r3, 8013cee <pbuf_clen+0xe>
    ++len;
 8013ce6:	3001      	adds	r0, #1
 8013ce8:	b280      	uxth	r0, r0
    p = p->next;
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	e7fa      	b.n	8013ce4 <pbuf_clen+0x4>
}
 8013cee:	4770      	bx	lr

08013cf0 <pbuf_ref>:
  if (p != NULL) {
 8013cf0:	b170      	cbz	r0, 8013d10 <pbuf_ref+0x20>
{
 8013cf2:	b508      	push	{r3, lr}
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8013cf4:	7b83      	ldrb	r3, [r0, #14]
 8013cf6:	3301      	adds	r3, #1
 8013cf8:	b2db      	uxtb	r3, r3
 8013cfa:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8013cfc:	b103      	cbz	r3, 8013d00 <pbuf_ref+0x10>
}
 8013cfe:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8013d00:	4b04      	ldr	r3, [pc, #16]	; (8013d14 <pbuf_ref+0x24>)
 8013d02:	f240 3242 	movw	r2, #834	; 0x342
 8013d06:	4904      	ldr	r1, [pc, #16]	; (8013d18 <pbuf_ref+0x28>)
 8013d08:	4804      	ldr	r0, [pc, #16]	; (8013d1c <pbuf_ref+0x2c>)
 8013d0a:	f007 feb9 	bl	801ba80 <iprintf>
}
 8013d0e:	e7f6      	b.n	8013cfe <pbuf_ref+0xe>
 8013d10:	4770      	bx	lr
 8013d12:	bf00      	nop
 8013d14:	0801e1c0 	.word	0x0801e1c0
 8013d18:	0801e36c 	.word	0x0801e36c
 8013d1c:	0801cca4 	.word	0x0801cca4

08013d20 <pbuf_cat>:
{
 8013d20:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8013d22:	b110      	cbz	r0, 8013d2a <pbuf_cat+0xa>
 8013d24:	460d      	mov	r5, r1
 8013d26:	4604      	mov	r4, r0
 8013d28:	b961      	cbnz	r1, 8013d44 <pbuf_cat+0x24>
 8013d2a:	4b15      	ldr	r3, [pc, #84]	; (8013d80 <pbuf_cat+0x60>)
 8013d2c:	f240 3259 	movw	r2, #857	; 0x359
 8013d30:	4914      	ldr	r1, [pc, #80]	; (8013d84 <pbuf_cat+0x64>)
 8013d32:	4815      	ldr	r0, [pc, #84]	; (8013d88 <pbuf_cat+0x68>)
 8013d34:	f007 fea4 	bl	801ba80 <iprintf>
 8013d38:	e019      	b.n	8013d6e <pbuf_cat+0x4e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013d3a:	8923      	ldrh	r3, [r4, #8]
 8013d3c:	8928      	ldrh	r0, [r5, #8]
 8013d3e:	4403      	add	r3, r0
 8013d40:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8013d42:	4614      	mov	r4, r2
 8013d44:	6822      	ldr	r2, [r4, #0]
 8013d46:	2a00      	cmp	r2, #0
 8013d48:	d1f7      	bne.n	8013d3a <pbuf_cat+0x1a>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8013d4a:	8922      	ldrh	r2, [r4, #8]
 8013d4c:	8963      	ldrh	r3, [r4, #10]
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	d10e      	bne.n	8013d70 <pbuf_cat+0x50>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8013d52:	6823      	ldr	r3, [r4, #0]
 8013d54:	b133      	cbz	r3, 8013d64 <pbuf_cat+0x44>
 8013d56:	4b0a      	ldr	r3, [pc, #40]	; (8013d80 <pbuf_cat+0x60>)
 8013d58:	f240 3263 	movw	r2, #867	; 0x363
 8013d5c:	490b      	ldr	r1, [pc, #44]	; (8013d8c <pbuf_cat+0x6c>)
 8013d5e:	480a      	ldr	r0, [pc, #40]	; (8013d88 <pbuf_cat+0x68>)
 8013d60:	f007 fe8e 	bl	801ba80 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013d64:	8923      	ldrh	r3, [r4, #8]
 8013d66:	892a      	ldrh	r2, [r5, #8]
 8013d68:	4413      	add	r3, r2
 8013d6a:	8123      	strh	r3, [r4, #8]
  p->next = t;
 8013d6c:	6025      	str	r5, [r4, #0]
}
 8013d6e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8013d70:	4b03      	ldr	r3, [pc, #12]	; (8013d80 <pbuf_cat+0x60>)
 8013d72:	f240 3262 	movw	r2, #866	; 0x362
 8013d76:	4906      	ldr	r1, [pc, #24]	; (8013d90 <pbuf_cat+0x70>)
 8013d78:	4803      	ldr	r0, [pc, #12]	; (8013d88 <pbuf_cat+0x68>)
 8013d7a:	f007 fe81 	bl	801ba80 <iprintf>
 8013d7e:	e7e8      	b.n	8013d52 <pbuf_cat+0x32>
 8013d80:	0801e1c0 	.word	0x0801e1c0
 8013d84:	0801e380 	.word	0x0801e380
 8013d88:	0801cca4 	.word	0x0801cca4
 8013d8c:	0801e3e8 	.word	0x0801e3e8
 8013d90:	0801e3b8 	.word	0x0801e3b8

08013d94 <pbuf_chain>:
{
 8013d94:	b510      	push	{r4, lr}
 8013d96:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8013d98:	f7ff ffc2 	bl	8013d20 <pbuf_cat>
  pbuf_ref(t);
 8013d9c:	4620      	mov	r0, r4
 8013d9e:	f7ff ffa7 	bl	8013cf0 <pbuf_ref>
}
 8013da2:	bd10      	pop	{r4, pc}

08013da4 <pbuf_copy>:
{
 8013da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8013da8:	b148      	cbz	r0, 8013dbe <pbuf_copy+0x1a>
 8013daa:	460c      	mov	r4, r1
 8013dac:	4605      	mov	r5, r0
 8013dae:	b131      	cbz	r1, 8013dbe <pbuf_copy+0x1a>
 8013db0:	8902      	ldrh	r2, [r0, #8]
 8013db2:	890b      	ldrh	r3, [r1, #8]
 8013db4:	429a      	cmp	r2, r3
 8013db6:	d302      	bcc.n	8013dbe <pbuf_copy+0x1a>
  size_t offset_to = 0, offset_from = 0, len;
 8013db8:	2700      	movs	r7, #0
 8013dba:	46b8      	mov	r8, r7
 8013dbc:	e03a      	b.n	8013e34 <pbuf_copy+0x90>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8013dbe:	4b3a      	ldr	r3, [pc, #232]	; (8013ea8 <pbuf_copy+0x104>)
 8013dc0:	f240 32c9 	movw	r2, #969	; 0x3c9
 8013dc4:	4939      	ldr	r1, [pc, #228]	; (8013eac <pbuf_copy+0x108>)
 8013dc6:	483a      	ldr	r0, [pc, #232]	; (8013eb0 <pbuf_copy+0x10c>)
 8013dc8:	f007 fe5a 	bl	801ba80 <iprintf>
 8013dcc:	f06f 000f 	mvn.w	r0, #15
 8013dd0:	e068      	b.n	8013ea4 <pbuf_copy+0x100>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8013dd2:	4b35      	ldr	r3, [pc, #212]	; (8013ea8 <pbuf_copy+0x104>)
 8013dd4:	f240 32d9 	movw	r2, #985	; 0x3d9
 8013dd8:	4936      	ldr	r1, [pc, #216]	; (8013eb4 <pbuf_copy+0x110>)
 8013dda:	4835      	ldr	r0, [pc, #212]	; (8013eb0 <pbuf_copy+0x10c>)
 8013ddc:	f007 fe50 	bl	801ba80 <iprintf>
 8013de0:	e03c      	b.n	8013e5c <pbuf_copy+0xb8>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8013de2:	4b31      	ldr	r3, [pc, #196]	; (8013ea8 <pbuf_copy+0x104>)
 8013de4:	f240 32da 	movw	r2, #986	; 0x3da
 8013de8:	4933      	ldr	r1, [pc, #204]	; (8013eb8 <pbuf_copy+0x114>)
 8013dea:	4831      	ldr	r0, [pc, #196]	; (8013eb0 <pbuf_copy+0x10c>)
 8013dec:	f007 fe48 	bl	801ba80 <iprintf>
 8013df0:	e037      	b.n	8013e62 <pbuf_copy+0xbe>
      p_to = p_to->next;
 8013df2:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8013df4:	b115      	cbz	r5, 8013dfc <pbuf_copy+0x58>
      offset_to = 0;
 8013df6:	f04f 0800 	mov.w	r8, #0
 8013dfa:	e03a      	b.n	8013e72 <pbuf_copy+0xce>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8013dfc:	b914      	cbnz	r4, 8013e04 <pbuf_copy+0x60>
      offset_to = 0;
 8013dfe:	f04f 0800 	mov.w	r8, #0
 8013e02:	e036      	b.n	8013e72 <pbuf_copy+0xce>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8013e04:	4b28      	ldr	r3, [pc, #160]	; (8013ea8 <pbuf_copy+0x104>)
 8013e06:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8013e0a:	492c      	ldr	r1, [pc, #176]	; (8013ebc <pbuf_copy+0x118>)
 8013e0c:	4828      	ldr	r0, [pc, #160]	; (8013eb0 <pbuf_copy+0x10c>)
 8013e0e:	f007 fe37 	bl	801ba80 <iprintf>
 8013e12:	f06f 000f 	mvn.w	r0, #15
 8013e16:	e045      	b.n	8013ea4 <pbuf_copy+0x100>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8013e18:	6823      	ldr	r3, [r4, #0]
 8013e1a:	b37b      	cbz	r3, 8013e7c <pbuf_copy+0xd8>
 8013e1c:	4b22      	ldr	r3, [pc, #136]	; (8013ea8 <pbuf_copy+0x104>)
 8013e1e:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8013e22:	4927      	ldr	r1, [pc, #156]	; (8013ec0 <pbuf_copy+0x11c>)
 8013e24:	4822      	ldr	r0, [pc, #136]	; (8013eb0 <pbuf_copy+0x10c>)
 8013e26:	f007 fe2b 	bl	801ba80 <iprintf>
 8013e2a:	f06f 0005 	mvn.w	r0, #5
 8013e2e:	e039      	b.n	8013ea4 <pbuf_copy+0x100>
  } while (p_from);
 8013e30:	2c00      	cmp	r4, #0
 8013e32:	d036      	beq.n	8013ea2 <pbuf_copy+0xfe>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8013e34:	896e      	ldrh	r6, [r5, #10]
 8013e36:	eba6 0608 	sub.w	r6, r6, r8
 8013e3a:	8963      	ldrh	r3, [r4, #10]
 8013e3c:	1bdb      	subs	r3, r3, r7
 8013e3e:	429e      	cmp	r6, r3
 8013e40:	d300      	bcc.n	8013e44 <pbuf_copy+0xa0>
      len = p_from->len - offset_from;
 8013e42:	461e      	mov	r6, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8013e44:	6868      	ldr	r0, [r5, #4]
 8013e46:	6861      	ldr	r1, [r4, #4]
 8013e48:	4632      	mov	r2, r6
 8013e4a:	4439      	add	r1, r7
 8013e4c:	4440      	add	r0, r8
 8013e4e:	f007 fe01 	bl	801ba54 <memcpy>
    offset_to += len;
 8013e52:	44b0      	add	r8, r6
    offset_from += len;
 8013e54:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8013e56:	896b      	ldrh	r3, [r5, #10]
 8013e58:	4543      	cmp	r3, r8
 8013e5a:	d3ba      	bcc.n	8013dd2 <pbuf_copy+0x2e>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8013e5c:	8963      	ldrh	r3, [r4, #10]
 8013e5e:	42bb      	cmp	r3, r7
 8013e60:	d3bf      	bcc.n	8013de2 <pbuf_copy+0x3e>
    if (offset_from >= p_from->len) {
 8013e62:	8963      	ldrh	r3, [r4, #10]
 8013e64:	42bb      	cmp	r3, r7
 8013e66:	d801      	bhi.n	8013e6c <pbuf_copy+0xc8>
      p_from = p_from->next;
 8013e68:	6824      	ldr	r4, [r4, #0]
      offset_from = 0;
 8013e6a:	2700      	movs	r7, #0
    if (offset_to == p_to->len) {
 8013e6c:	896b      	ldrh	r3, [r5, #10]
 8013e6e:	4543      	cmp	r3, r8
 8013e70:	d0bf      	beq.n	8013df2 <pbuf_copy+0x4e>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8013e72:	b11c      	cbz	r4, 8013e7c <pbuf_copy+0xd8>
 8013e74:	8962      	ldrh	r2, [r4, #10]
 8013e76:	8923      	ldrh	r3, [r4, #8]
 8013e78:	429a      	cmp	r2, r3
 8013e7a:	d0cd      	beq.n	8013e18 <pbuf_copy+0x74>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8013e7c:	2d00      	cmp	r5, #0
 8013e7e:	d0d7      	beq.n	8013e30 <pbuf_copy+0x8c>
 8013e80:	896a      	ldrh	r2, [r5, #10]
 8013e82:	892b      	ldrh	r3, [r5, #8]
 8013e84:	429a      	cmp	r2, r3
 8013e86:	d1d3      	bne.n	8013e30 <pbuf_copy+0x8c>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8013e88:	682b      	ldr	r3, [r5, #0]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d0d0      	beq.n	8013e30 <pbuf_copy+0x8c>
 8013e8e:	4b06      	ldr	r3, [pc, #24]	; (8013ea8 <pbuf_copy+0x104>)
 8013e90:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8013e94:	490a      	ldr	r1, [pc, #40]	; (8013ec0 <pbuf_copy+0x11c>)
 8013e96:	4806      	ldr	r0, [pc, #24]	; (8013eb0 <pbuf_copy+0x10c>)
 8013e98:	f007 fdf2 	bl	801ba80 <iprintf>
 8013e9c:	f06f 0005 	mvn.w	r0, #5
 8013ea0:	e000      	b.n	8013ea4 <pbuf_copy+0x100>
  return ERR_OK;
 8013ea2:	2000      	movs	r0, #0
}
 8013ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ea8:	0801e1c0 	.word	0x0801e1c0
 8013eac:	0801e3f8 	.word	0x0801e3f8
 8013eb0:	0801cca4 	.word	0x0801cca4
 8013eb4:	0801e428 	.word	0x0801e428
 8013eb8:	0801e440 	.word	0x0801e440
 8013ebc:	0801e45c 	.word	0x0801e45c
 8013ec0:	0801e46c 	.word	0x0801e46c

08013ec4 <pbuf_copy_partial>:
{
 8013ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8013ec8:	b130      	cbz	r0, 8013ed8 <pbuf_copy_partial+0x14>
 8013eca:	4688      	mov	r8, r1
 8013ecc:	4691      	mov	r9, r2
 8013ece:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8013ed0:	b169      	cbz	r1, 8013eee <pbuf_copy_partial+0x2a>
  u16_t copied_total = 0;
 8013ed2:	2700      	movs	r7, #0
  u16_t left = 0;
 8013ed4:	463e      	mov	r6, r7
 8013ed6:	e02a      	b.n	8013f2e <pbuf_copy_partial+0x6a>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8013ed8:	4b1b      	ldr	r3, [pc, #108]	; (8013f48 <pbuf_copy_partial+0x84>)
 8013eda:	f240 420a 	movw	r2, #1034	; 0x40a
 8013ede:	491b      	ldr	r1, [pc, #108]	; (8013f4c <pbuf_copy_partial+0x88>)
 8013ee0:	481b      	ldr	r0, [pc, #108]	; (8013f50 <pbuf_copy_partial+0x8c>)
 8013ee2:	f007 fdcd 	bl	801ba80 <iprintf>
 8013ee6:	2700      	movs	r7, #0
}
 8013ee8:	4638      	mov	r0, r7
 8013eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8013eee:	4b16      	ldr	r3, [pc, #88]	; (8013f48 <pbuf_copy_partial+0x84>)
 8013ef0:	f240 420b 	movw	r2, #1035	; 0x40b
 8013ef4:	4917      	ldr	r1, [pc, #92]	; (8013f54 <pbuf_copy_partial+0x90>)
 8013ef6:	4816      	ldr	r0, [pc, #88]	; (8013f50 <pbuf_copy_partial+0x8c>)
 8013ef8:	f007 fdc2 	bl	801ba80 <iprintf>
 8013efc:	2700      	movs	r7, #0
 8013efe:	e7f3      	b.n	8013ee8 <pbuf_copy_partial+0x24>
      buf_copy_len = (u16_t)(p->len - offset);
 8013f00:	896c      	ldrh	r4, [r5, #10]
 8013f02:	1ae4      	subs	r4, r4, r3
 8013f04:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 8013f06:	45a1      	cmp	r9, r4
 8013f08:	d200      	bcs.n	8013f0c <pbuf_copy_partial+0x48>
        buf_copy_len = len;
 8013f0a:	464c      	mov	r4, r9
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8013f0c:	6869      	ldr	r1, [r5, #4]
 8013f0e:	4622      	mov	r2, r4
 8013f10:	4419      	add	r1, r3
 8013f12:	eb08 0006 	add.w	r0, r8, r6
 8013f16:	f007 fd9d 	bl	801ba54 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8013f1a:	4427      	add	r7, r4
 8013f1c:	b2bf      	uxth	r7, r7
      left = (u16_t)(left + buf_copy_len);
 8013f1e:	4426      	add	r6, r4
 8013f20:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 8013f22:	eba9 0404 	sub.w	r4, r9, r4
 8013f26:	fa1f f984 	uxth.w	r9, r4
      offset = 0;
 8013f2a:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013f2c:	682d      	ldr	r5, [r5, #0]
 8013f2e:	f1b9 0f00 	cmp.w	r9, #0
 8013f32:	d0d9      	beq.n	8013ee8 <pbuf_copy_partial+0x24>
 8013f34:	2d00      	cmp	r5, #0
 8013f36:	d0d7      	beq.n	8013ee8 <pbuf_copy_partial+0x24>
    if ((offset != 0) && (offset >= p->len)) {
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d0e1      	beq.n	8013f00 <pbuf_copy_partial+0x3c>
 8013f3c:	8969      	ldrh	r1, [r5, #10]
 8013f3e:	4299      	cmp	r1, r3
 8013f40:	d8de      	bhi.n	8013f00 <pbuf_copy_partial+0x3c>
      offset = (u16_t)(offset - p->len);
 8013f42:	1a5b      	subs	r3, r3, r1
 8013f44:	b29b      	uxth	r3, r3
 8013f46:	e7f1      	b.n	8013f2c <pbuf_copy_partial+0x68>
 8013f48:	0801e1c0 	.word	0x0801e1c0
 8013f4c:	0801e498 	.word	0x0801e498
 8013f50:	0801cca4 	.word	0x0801cca4
 8013f54:	0801e4b8 	.word	0x0801e4b8

08013f58 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8013f58:	b508      	push	{r3, lr}
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8013f5a:	f7ff fc71 	bl	8013840 <pbuf_skip_const>
  return LWIP_CONST_CAST(struct pbuf *, out);
}
 8013f5e:	bd08      	pop	{r3, pc}

08013f60 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8013f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8013f64:	b148      	cbz	r0, 8013f7a <pbuf_take+0x1a>
 8013f66:	4688      	mov	r8, r1
 8013f68:	4691      	mov	r9, r2
 8013f6a:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8013f6c:	b179      	cbz	r1, 8013f8e <pbuf_take+0x2e>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8013f6e:	8903      	ldrh	r3, [r0, #8]
 8013f70:	4293      	cmp	r3, r2
 8013f72:	d316      	bcc.n	8013fa2 <pbuf_take+0x42>
  size_t total_copy_len = len;
 8013f74:	4616      	mov	r6, r2
  size_t copied_total = 0;
 8013f76:	2700      	movs	r7, #0
 8013f78:	e02e      	b.n	8013fd8 <pbuf_take+0x78>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8013f7a:	4b22      	ldr	r3, [pc, #136]	; (8014004 <pbuf_take+0xa4>)
 8013f7c:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8013f80:	4921      	ldr	r1, [pc, #132]	; (8014008 <pbuf_take+0xa8>)
 8013f82:	4822      	ldr	r0, [pc, #136]	; (801400c <pbuf_take+0xac>)
 8013f84:	f007 fd7c 	bl	801ba80 <iprintf>
 8013f88:	f06f 000f 	mvn.w	r0, #15
 8013f8c:	e02f      	b.n	8013fee <pbuf_take+0x8e>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8013f8e:	4b1d      	ldr	r3, [pc, #116]	; (8014004 <pbuf_take+0xa4>)
 8013f90:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8013f94:	491e      	ldr	r1, [pc, #120]	; (8014010 <pbuf_take+0xb0>)
 8013f96:	481d      	ldr	r0, [pc, #116]	; (801400c <pbuf_take+0xac>)
 8013f98:	f007 fd72 	bl	801ba80 <iprintf>
 8013f9c:	f06f 000f 	mvn.w	r0, #15
 8013fa0:	e025      	b.n	8013fee <pbuf_take+0x8e>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8013fa2:	4b18      	ldr	r3, [pc, #96]	; (8014004 <pbuf_take+0xa4>)
 8013fa4:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8013fa8:	491a      	ldr	r1, [pc, #104]	; (8014014 <pbuf_take+0xb4>)
 8013faa:	4818      	ldr	r0, [pc, #96]	; (801400c <pbuf_take+0xac>)
 8013fac:	f007 fd68 	bl	801ba80 <iprintf>
 8013fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8013fb4:	e01b      	b.n	8013fee <pbuf_take+0x8e>
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8013fb6:	4b13      	ldr	r3, [pc, #76]	; (8014004 <pbuf_take+0xa4>)
 8013fb8:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8013fbc:	4916      	ldr	r1, [pc, #88]	; (8014018 <pbuf_take+0xb8>)
 8013fbe:	4813      	ldr	r0, [pc, #76]	; (801400c <pbuf_take+0xac>)
 8013fc0:	f007 fd5e 	bl	801ba80 <iprintf>
 8013fc4:	e00b      	b.n	8013fde <pbuf_take+0x7e>
    if (buf_copy_len > p->len) {
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8013fc6:	4622      	mov	r2, r4
 8013fc8:	eb08 0107 	add.w	r1, r8, r7
 8013fcc:	6868      	ldr	r0, [r5, #4]
 8013fce:	f007 fd41 	bl	801ba54 <memcpy>
    total_copy_len -= buf_copy_len;
 8013fd2:	1b36      	subs	r6, r6, r4
    copied_total += buf_copy_len;
 8013fd4:	4427      	add	r7, r4
  for (p = buf; total_copy_len != 0; p = p->next) {
 8013fd6:	682d      	ldr	r5, [r5, #0]
 8013fd8:	b136      	cbz	r6, 8013fe8 <pbuf_take+0x88>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8013fda:	2d00      	cmp	r5, #0
 8013fdc:	d0eb      	beq.n	8013fb6 <pbuf_take+0x56>
    if (buf_copy_len > p->len) {
 8013fde:	896c      	ldrh	r4, [r5, #10]
 8013fe0:	42b4      	cmp	r4, r6
 8013fe2:	d3f0      	bcc.n	8013fc6 <pbuf_take+0x66>
    buf_copy_len = total_copy_len;
 8013fe4:	4634      	mov	r4, r6
 8013fe6:	e7ee      	b.n	8013fc6 <pbuf_take+0x66>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8013fe8:	454f      	cmp	r7, r9
 8013fea:	d102      	bne.n	8013ff2 <pbuf_take+0x92>
  return ERR_OK;
 8013fec:	2000      	movs	r0, #0
}
 8013fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8013ff2:	4b04      	ldr	r3, [pc, #16]	; (8014004 <pbuf_take+0xa4>)
 8013ff4:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8013ff8:	4908      	ldr	r1, [pc, #32]	; (801401c <pbuf_take+0xbc>)
 8013ffa:	4804      	ldr	r0, [pc, #16]	; (801400c <pbuf_take+0xac>)
 8013ffc:	f007 fd40 	bl	801ba80 <iprintf>
  return ERR_OK;
 8014000:	2000      	movs	r0, #0
 8014002:	e7f4      	b.n	8013fee <pbuf_take+0x8e>
 8014004:	0801e1c0 	.word	0x0801e1c0
 8014008:	0801e4dc 	.word	0x0801e4dc
 801400c:	0801cca4 	.word	0x0801cca4
 8014010:	0801e4f4 	.word	0x0801e4f4
 8014014:	0801e510 	.word	0x0801e510
 8014018:	0801e530 	.word	0x0801e530
 801401c:	0801e548 	.word	0x0801e548

08014020 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8014020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014022:	b083      	sub	sp, #12
 8014024:	460e      	mov	r6, r1
 8014026:	4614      	mov	r4, r2
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8014028:	f10d 0206 	add.w	r2, sp, #6
 801402c:	4619      	mov	r1, r3
 801402e:	f7ff ff93 	bl	8013f58 <pbuf_skip>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8014032:	b358      	cbz	r0, 801408c <pbuf_take_at+0x6c>
 8014034:	4607      	mov	r7, r0
 8014036:	8901      	ldrh	r1, [r0, #8]
 8014038:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801403c:	191a      	adds	r2, r3, r4
 801403e:	4291      	cmp	r1, r2
 8014040:	db27      	blt.n	8014092 <pbuf_take_at+0x72>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8014042:	8942      	ldrh	r2, [r0, #10]
 8014044:	4293      	cmp	r3, r2
 8014046:	d213      	bcs.n	8014070 <pbuf_take_at+0x50>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8014048:	897b      	ldrh	r3, [r7, #10]
 801404a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801404e:	1a1a      	subs	r2, r3, r0
 8014050:	4294      	cmp	r4, r2
 8014052:	dd15      	ble.n	8014080 <pbuf_take_at+0x60>
 8014054:	b295      	uxth	r5, r2
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	462a      	mov	r2, r5
 801405a:	4631      	mov	r1, r6
 801405c:	4418      	add	r0, r3
 801405e:	f007 fcf9 	bl	801ba54 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8014062:	1b62      	subs	r2, r4, r5
 8014064:	b292      	uxth	r2, r2
    src_ptr += first_copy_len;
 8014066:	1971      	adds	r1, r6, r5
    if (remaining_len > 0) {
 8014068:	b962      	cbnz	r2, 8014084 <pbuf_take_at+0x64>
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
 801406a:	2000      	movs	r0, #0
  }
  return ERR_MEM;
}
 801406c:	b003      	add	sp, #12
 801406e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8014070:	4b09      	ldr	r3, [pc, #36]	; (8014098 <pbuf_take_at+0x78>)
 8014072:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8014076:	4909      	ldr	r1, [pc, #36]	; (801409c <pbuf_take_at+0x7c>)
 8014078:	4809      	ldr	r0, [pc, #36]	; (80140a0 <pbuf_take_at+0x80>)
 801407a:	f007 fd01 	bl	801ba80 <iprintf>
 801407e:	e7e3      	b.n	8014048 <pbuf_take_at+0x28>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8014080:	4625      	mov	r5, r4
 8014082:	e7e8      	b.n	8014056 <pbuf_take_at+0x36>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8014084:	6838      	ldr	r0, [r7, #0]
 8014086:	f7ff ff6b 	bl	8013f60 <pbuf_take>
 801408a:	e7ef      	b.n	801406c <pbuf_take_at+0x4c>
  return ERR_MEM;
 801408c:	f04f 30ff 	mov.w	r0, #4294967295
 8014090:	e7ec      	b.n	801406c <pbuf_take_at+0x4c>
 8014092:	f04f 30ff 	mov.w	r0, #4294967295
 8014096:	e7e9      	b.n	801406c <pbuf_take_at+0x4c>
 8014098:	0801e1c0 	.word	0x0801e1c0
 801409c:	0801e560 	.word	0x0801e560
 80140a0:	0801cca4 	.word	0x0801cca4

080140a4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80140a4:	b538      	push	{r3, r4, r5, lr}
 80140a6:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80140a8:	460a      	mov	r2, r1
 80140aa:	8921      	ldrh	r1, [r4, #8]
 80140ac:	f7ff fd16 	bl	8013adc <pbuf_alloc>
  if (q == NULL) {
 80140b0:	4605      	mov	r5, r0
 80140b2:	b118      	cbz	r0, 80140bc <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 80140b4:	4621      	mov	r1, r4
 80140b6:	f7ff fe75 	bl	8013da4 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80140ba:	b908      	cbnz	r0, 80140c0 <pbuf_clone+0x1c>
  return q;
}
 80140bc:	4628      	mov	r0, r5
 80140be:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80140c0:	4b03      	ldr	r3, [pc, #12]	; (80140d0 <pbuf_clone+0x2c>)
 80140c2:	f240 5224 	movw	r2, #1316	; 0x524
 80140c6:	4903      	ldr	r1, [pc, #12]	; (80140d4 <pbuf_clone+0x30>)
 80140c8:	4803      	ldr	r0, [pc, #12]	; (80140d8 <pbuf_clone+0x34>)
 80140ca:	f007 fcd9 	bl	801ba80 <iprintf>
 80140ce:	e7f5      	b.n	80140bc <pbuf_clone+0x18>
 80140d0:	0801e1c0 	.word	0x0801e1c0
 80140d4:	0801e578 	.word	0x0801e578
 80140d8:	0801cca4 	.word	0x0801cca4

080140dc <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 80140dc:	b510      	push	{r4, lr}
 80140de:	b082      	sub	sp, #8
 80140e0:	4614      	mov	r4, r2
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 80140e2:	f10d 0206 	add.w	r2, sp, #6
 80140e6:	f7ff ff37 	bl	8013f58 <pbuf_skip>

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80140ea:	b130      	cbz	r0, 80140fa <pbuf_put_at+0x1e>
 80140ec:	8941      	ldrh	r1, [r0, #10]
 80140ee:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80140f2:	4291      	cmp	r1, r2
 80140f4:	d901      	bls.n	80140fa <pbuf_put_at+0x1e>
    ((u8_t *)q->payload)[q_idx] = data;
 80140f6:	6843      	ldr	r3, [r0, #4]
 80140f8:	549c      	strb	r4, [r3, r2]
  }
}
 80140fa:	b002      	add	sp, #8
 80140fc:	bd10      	pop	{r4, pc}
	...

08014100 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8014100:	b410      	push	{r4}
  u8_t i;
  u16_t n = 0;
 8014102:	2400      	movs	r4, #0
 8014104:	e009      	b.n	801411a <tcp_new_port+0x1a>
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8014106:	4b16      	ldr	r3, [pc, #88]	; (8014160 <tcp_new_port+0x60>)
 8014108:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801410c:	801a      	strh	r2, [r3, #0]
 801410e:	e00d      	b.n	801412c <tcp_new_port+0x2c>
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        n++;
 8014110:	3401      	adds	r4, #1
 8014112:	b2a4      	uxth	r4, r4
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8014114:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8014118:	d21f      	bcs.n	801415a <tcp_new_port+0x5a>
  tcp_port++;
 801411a:	4a11      	ldr	r2, [pc, #68]	; (8014160 <tcp_new_port+0x60>)
 801411c:	8813      	ldrh	r3, [r2, #0]
 801411e:	3301      	adds	r3, #1
 8014120:	b29b      	uxth	r3, r3
 8014122:	8013      	strh	r3, [r2, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8014124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014128:	4293      	cmp	r3, r2
 801412a:	d0ec      	beq.n	8014106 <tcp_new_port+0x6>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801412c:	2000      	movs	r0, #0
 801412e:	2803      	cmp	r0, #3
 8014130:	d80e      	bhi.n	8014150 <tcp_new_port+0x50>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014132:	4b0c      	ldr	r3, [pc, #48]	; (8014164 <tcp_new_port+0x64>)
 8014134:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	b133      	cbz	r3, 801414a <tcp_new_port+0x4a>
      if (pcb->local_port == tcp_port) {
 801413c:	8ad9      	ldrh	r1, [r3, #22]
 801413e:	4a08      	ldr	r2, [pc, #32]	; (8014160 <tcp_new_port+0x60>)
 8014140:	8812      	ldrh	r2, [r2, #0]
 8014142:	4291      	cmp	r1, r2
 8014144:	d0e4      	beq.n	8014110 <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014146:	68db      	ldr	r3, [r3, #12]
 8014148:	e7f7      	b.n	801413a <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801414a:	3001      	adds	r0, #1
 801414c:	b2c0      	uxtb	r0, r0
 801414e:	e7ee      	b.n	801412e <tcp_new_port+0x2e>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8014150:	4b03      	ldr	r3, [pc, #12]	; (8014160 <tcp_new_port+0x60>)
 8014152:	8818      	ldrh	r0, [r3, #0]
}
 8014154:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014158:	4770      	bx	lr
          return 0;
 801415a:	2000      	movs	r0, #0
 801415c:	e7fa      	b.n	8014154 <tcp_new_port+0x54>
 801415e:	bf00      	nop
 8014160:	20000010 	.word	0x20000010
 8014164:	0801ec58 	.word	0x0801ec58

08014168 <tcp_remove_listener>:
{
 8014168:	b538      	push	{r3, r4, r5, lr}
 801416a:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801416c:	460d      	mov	r5, r1
 801416e:	b949      	cbnz	r1, 8014184 <tcp_remove_listener+0x1c>
 8014170:	4b07      	ldr	r3, [pc, #28]	; (8014190 <tcp_remove_listener+0x28>)
 8014172:	22ff      	movs	r2, #255	; 0xff
 8014174:	4907      	ldr	r1, [pc, #28]	; (8014194 <tcp_remove_listener+0x2c>)
 8014176:	4808      	ldr	r0, [pc, #32]	; (8014198 <tcp_remove_listener+0x30>)
 8014178:	f007 fc82 	bl	801ba80 <iprintf>
 801417c:	e002      	b.n	8014184 <tcp_remove_listener+0x1c>
      pcb->listener = NULL;
 801417e:	2300      	movs	r3, #0
 8014180:	67e3      	str	r3, [r4, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014182:	68e4      	ldr	r4, [r4, #12]
 8014184:	b11c      	cbz	r4, 801418e <tcp_remove_listener+0x26>
    if (pcb->listener == lpcb) {
 8014186:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8014188:	42ab      	cmp	r3, r5
 801418a:	d1fa      	bne.n	8014182 <tcp_remove_listener+0x1a>
 801418c:	e7f7      	b.n	801417e <tcp_remove_listener+0x16>
}
 801418e:	bd38      	pop	{r3, r4, r5, pc}
 8014190:	0801e58c 	.word	0x0801e58c
 8014194:	0801e5bc 	.word	0x0801e5bc
 8014198:	0801cca4 	.word	0x0801cca4

0801419c <tcp_listen_closed>:
{
 801419c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801419e:	4605      	mov	r5, r0
 80141a0:	b120      	cbz	r0, 80141ac <tcp_listen_closed+0x10>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80141a2:	7d2b      	ldrb	r3, [r5, #20]
 80141a4:	2b01      	cmp	r3, #1
 80141a6:	d109      	bne.n	80141bc <tcp_listen_closed+0x20>
{
 80141a8:	2401      	movs	r4, #1
 80141aa:	e017      	b.n	80141dc <tcp_listen_closed+0x40>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80141ac:	4b0d      	ldr	r3, [pc, #52]	; (80141e4 <tcp_listen_closed+0x48>)
 80141ae:	f240 1211 	movw	r2, #273	; 0x111
 80141b2:	490d      	ldr	r1, [pc, #52]	; (80141e8 <tcp_listen_closed+0x4c>)
 80141b4:	480d      	ldr	r0, [pc, #52]	; (80141ec <tcp_listen_closed+0x50>)
 80141b6:	f007 fc63 	bl	801ba80 <iprintf>
 80141ba:	e7f2      	b.n	80141a2 <tcp_listen_closed+0x6>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80141bc:	4b09      	ldr	r3, [pc, #36]	; (80141e4 <tcp_listen_closed+0x48>)
 80141be:	f44f 7289 	mov.w	r2, #274	; 0x112
 80141c2:	490b      	ldr	r1, [pc, #44]	; (80141f0 <tcp_listen_closed+0x54>)
 80141c4:	4809      	ldr	r0, [pc, #36]	; (80141ec <tcp_listen_closed+0x50>)
 80141c6:	f007 fc5b 	bl	801ba80 <iprintf>
 80141ca:	e7ed      	b.n	80141a8 <tcp_listen_closed+0xc>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80141cc:	4b09      	ldr	r3, [pc, #36]	; (80141f4 <tcp_listen_closed+0x58>)
 80141ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80141d2:	4629      	mov	r1, r5
 80141d4:	6818      	ldr	r0, [r3, #0]
 80141d6:	f7ff ffc7 	bl	8014168 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80141da:	3401      	adds	r4, #1
 80141dc:	2c03      	cmp	r4, #3
 80141de:	d9f5      	bls.n	80141cc <tcp_listen_closed+0x30>
}
 80141e0:	bd38      	pop	{r3, r4, r5, pc}
 80141e2:	bf00      	nop
 80141e4:	0801e58c 	.word	0x0801e58c
 80141e8:	0801e5e4 	.word	0x0801e5e4
 80141ec:	0801cca4 	.word	0x0801cca4
 80141f0:	0801e5f0 	.word	0x0801e5f0
 80141f4:	0801ec58 	.word	0x0801ec58

080141f8 <tcp_free_listen>:
{
 80141f8:	b510      	push	{r4, lr}
 80141fa:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80141fc:	7d03      	ldrb	r3, [r0, #20]
 80141fe:	2b01      	cmp	r3, #1
 8014200:	d004      	beq.n	801420c <tcp_free_listen+0x14>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8014202:	4621      	mov	r1, r4
 8014204:	2002      	movs	r0, #2
 8014206:	f7ff f943 	bl	8013490 <memp_free>
}
 801420a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801420c:	4b03      	ldr	r3, [pc, #12]	; (801421c <tcp_free_listen+0x24>)
 801420e:	22df      	movs	r2, #223	; 0xdf
 8014210:	4903      	ldr	r1, [pc, #12]	; (8014220 <tcp_free_listen+0x28>)
 8014212:	4804      	ldr	r0, [pc, #16]	; (8014224 <tcp_free_listen+0x2c>)
 8014214:	f007 fc34 	bl	801ba80 <iprintf>
 8014218:	e7f3      	b.n	8014202 <tcp_free_listen+0xa>
 801421a:	bf00      	nop
 801421c:	0801e58c 	.word	0x0801e58c
 8014220:	0801e608 	.word	0x0801e608
 8014224:	0801cca4 	.word	0x0801cca4

08014228 <tcp_close_shutdown_fin>:
{
 8014228:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801422a:	4605      	mov	r5, r0
 801422c:	b148      	cbz	r0, 8014242 <tcp_close_shutdown_fin+0x1a>
  switch (pcb->state) {
 801422e:	7d2b      	ldrb	r3, [r5, #20]
 8014230:	2b04      	cmp	r3, #4
 8014232:	d01f      	beq.n	8014274 <tcp_close_shutdown_fin+0x4c>
 8014234:	2b07      	cmp	r3, #7
 8014236:	d026      	beq.n	8014286 <tcp_close_shutdown_fin+0x5e>
 8014238:	2b03      	cmp	r3, #3
 801423a:	d00a      	beq.n	8014252 <tcp_close_shutdown_fin+0x2a>
 801423c:	2400      	movs	r4, #0
}
 801423e:	4620      	mov	r0, r4
 8014240:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014242:	4b17      	ldr	r3, [pc, #92]	; (80142a0 <tcp_close_shutdown_fin+0x78>)
 8014244:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8014248:	4916      	ldr	r1, [pc, #88]	; (80142a4 <tcp_close_shutdown_fin+0x7c>)
 801424a:	4817      	ldr	r0, [pc, #92]	; (80142a8 <tcp_close_shutdown_fin+0x80>)
 801424c:	f007 fc18 	bl	801ba80 <iprintf>
 8014250:	e7ed      	b.n	801422e <tcp_close_shutdown_fin+0x6>
      err = tcp_send_fin(pcb);
 8014252:	4628      	mov	r0, r5
 8014254:	f003 fce8 	bl	8017c28 <tcp_send_fin>
      if (err == ERR_OK) {
 8014258:	4604      	mov	r4, r0
 801425a:	b908      	cbnz	r0, 8014260 <tcp_close_shutdown_fin+0x38>
        pcb->state = FIN_WAIT_1;
 801425c:	2305      	movs	r3, #5
 801425e:	752b      	strb	r3, [r5, #20]
  if (err == ERR_OK) {
 8014260:	b1d4      	cbz	r4, 8014298 <tcp_close_shutdown_fin+0x70>
  } else if (err == ERR_MEM) {
 8014262:	f1b4 3fff 	cmp.w	r4, #4294967295
 8014266:	d1ea      	bne.n	801423e <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014268:	8b6b      	ldrh	r3, [r5, #26]
 801426a:	f043 0308 	orr.w	r3, r3, #8
 801426e:	836b      	strh	r3, [r5, #26]
    return ERR_OK;
 8014270:	2400      	movs	r4, #0
 8014272:	e7e4      	b.n	801423e <tcp_close_shutdown_fin+0x16>
      err = tcp_send_fin(pcb);
 8014274:	4628      	mov	r0, r5
 8014276:	f003 fcd7 	bl	8017c28 <tcp_send_fin>
      if (err == ERR_OK) {
 801427a:	4604      	mov	r4, r0
 801427c:	2800      	cmp	r0, #0
 801427e:	d1ef      	bne.n	8014260 <tcp_close_shutdown_fin+0x38>
        pcb->state = FIN_WAIT_1;
 8014280:	2305      	movs	r3, #5
 8014282:	752b      	strb	r3, [r5, #20]
 8014284:	e7ec      	b.n	8014260 <tcp_close_shutdown_fin+0x38>
      err = tcp_send_fin(pcb);
 8014286:	4628      	mov	r0, r5
 8014288:	f003 fcce 	bl	8017c28 <tcp_send_fin>
      if (err == ERR_OK) {
 801428c:	4604      	mov	r4, r0
 801428e:	2800      	cmp	r0, #0
 8014290:	d1e6      	bne.n	8014260 <tcp_close_shutdown_fin+0x38>
        pcb->state = LAST_ACK;
 8014292:	2309      	movs	r3, #9
 8014294:	752b      	strb	r3, [r5, #20]
 8014296:	e7e3      	b.n	8014260 <tcp_close_shutdown_fin+0x38>
    tcp_output(pcb);
 8014298:	4628      	mov	r0, r5
 801429a:	f003 fe49 	bl	8017f30 <tcp_output>
 801429e:	e7ce      	b.n	801423e <tcp_close_shutdown_fin+0x16>
 80142a0:	0801e58c 	.word	0x0801e58c
 80142a4:	0801e5e4 	.word	0x0801e5e4
 80142a8:	0801cca4 	.word	0x0801cca4

080142ac <tcp_handle_closepend>:
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80142ac:	4b09      	ldr	r3, [pc, #36]	; (80142d4 <tcp_handle_closepend+0x28>)
 80142ae:	6818      	ldr	r0, [r3, #0]

  while (pcb != NULL) {
 80142b0:	b178      	cbz	r0, 80142d2 <tcp_handle_closepend+0x26>
{
 80142b2:	b510      	push	{r4, lr}
 80142b4:	e006      	b.n	80142c4 <tcp_handle_closepend+0x18>
    struct tcp_pcb *next = pcb->next;
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80142b6:	f023 0308 	bic.w	r3, r3, #8
 80142ba:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 80142bc:	f7ff ffb4 	bl	8014228 <tcp_close_shutdown_fin>
{
 80142c0:	4620      	mov	r0, r4
  while (pcb != NULL) {
 80142c2:	b12c      	cbz	r4, 80142d0 <tcp_handle_closepend+0x24>
    struct tcp_pcb *next = pcb->next;
 80142c4:	68c4      	ldr	r4, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 80142c6:	8b43      	ldrh	r3, [r0, #26]
 80142c8:	f013 0f08 	tst.w	r3, #8
 80142cc:	d0f8      	beq.n	80142c0 <tcp_handle_closepend+0x14>
 80142ce:	e7f2      	b.n	80142b6 <tcp_handle_closepend+0xa>
    }
    pcb = next;
  }
}
 80142d0:	bd10      	pop	{r4, pc}
 80142d2:	4770      	bx	lr
 80142d4:	2000721c 	.word	0x2000721c

080142d8 <tcp_init>:
{
 80142d8:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80142da:	f007 fc5f 	bl	801bb9c <rand>
 80142de:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 80142e2:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 80142e6:	4b01      	ldr	r3, [pc, #4]	; (80142ec <tcp_init+0x14>)
 80142e8:	8018      	strh	r0, [r3, #0]
}
 80142ea:	bd08      	pop	{r3, pc}
 80142ec:	20000010 	.word	0x20000010

080142f0 <tcp_free>:
{
 80142f0:	b510      	push	{r4, lr}
 80142f2:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80142f4:	7d03      	ldrb	r3, [r0, #20]
 80142f6:	2b01      	cmp	r3, #1
 80142f8:	d004      	beq.n	8014304 <tcp_free+0x14>
  memp_free(MEMP_TCP_PCB, pcb);
 80142fa:	4621      	mov	r1, r4
 80142fc:	2001      	movs	r0, #1
 80142fe:	f7ff f8c7 	bl	8013490 <memp_free>
}
 8014302:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8014304:	4b03      	ldr	r3, [pc, #12]	; (8014314 <tcp_free+0x24>)
 8014306:	22d4      	movs	r2, #212	; 0xd4
 8014308:	4903      	ldr	r1, [pc, #12]	; (8014318 <tcp_free+0x28>)
 801430a:	4804      	ldr	r0, [pc, #16]	; (801431c <tcp_free+0x2c>)
 801430c:	f007 fbb8 	bl	801ba80 <iprintf>
 8014310:	e7f3      	b.n	80142fa <tcp_free+0xa>
 8014312:	bf00      	nop
 8014314:	0801e58c 	.word	0x0801e58c
 8014318:	0801e624 	.word	0x0801e624
 801431c:	0801cca4 	.word	0x0801cca4

08014320 <tcp_bind>:
{
 8014320:	b570      	push	{r4, r5, r6, lr}
 8014322:	4606      	mov	r6, r0
  if (ipaddr == NULL) {
 8014324:	460d      	mov	r5, r1
 8014326:	b159      	cbz	r1, 8014340 <tcp_bind+0x20>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014328:	b166      	cbz	r6, 8014344 <tcp_bind+0x24>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801432a:	7d33      	ldrb	r3, [r6, #20]
 801432c:	b9a3      	cbnz	r3, 8014358 <tcp_bind+0x38>
  if (port == 0) {
 801432e:	b1ea      	cbz	r2, 801436c <tcp_bind+0x4c>
    for (i = 0; i < max_pcb_list; i++) {
 8014330:	2000      	movs	r0, #0
 8014332:	2803      	cmp	r0, #3
 8014334:	dc1e      	bgt.n	8014374 <tcp_bind+0x54>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8014336:	4b26      	ldr	r3, [pc, #152]	; (80143d0 <tcp_bind+0xb0>)
 8014338:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	e027      	b.n	8014390 <tcp_bind+0x70>
    ipaddr = IP4_ADDR_ANY;
 8014340:	4d24      	ldr	r5, [pc, #144]	; (80143d4 <tcp_bind+0xb4>)
 8014342:	e7f1      	b.n	8014328 <tcp_bind+0x8>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014344:	4b24      	ldr	r3, [pc, #144]	; (80143d8 <tcp_bind+0xb8>)
 8014346:	f240 22a9 	movw	r2, #681	; 0x2a9
 801434a:	4924      	ldr	r1, [pc, #144]	; (80143dc <tcp_bind+0xbc>)
 801434c:	4824      	ldr	r0, [pc, #144]	; (80143e0 <tcp_bind+0xc0>)
 801434e:	f007 fb97 	bl	801ba80 <iprintf>
 8014352:	f06f 000f 	mvn.w	r0, #15
 8014356:	e019      	b.n	801438c <tcp_bind+0x6c>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8014358:	4b1f      	ldr	r3, [pc, #124]	; (80143d8 <tcp_bind+0xb8>)
 801435a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801435e:	4921      	ldr	r1, [pc, #132]	; (80143e4 <tcp_bind+0xc4>)
 8014360:	481f      	ldr	r0, [pc, #124]	; (80143e0 <tcp_bind+0xc0>)
 8014362:	f007 fb8d 	bl	801ba80 <iprintf>
 8014366:	f06f 0005 	mvn.w	r0, #5
 801436a:	e00f      	b.n	801438c <tcp_bind+0x6c>
    port = tcp_new_port();
 801436c:	f7ff fec8 	bl	8014100 <tcp_new_port>
    if (port == 0) {
 8014370:	4602      	mov	r2, r0
 8014372:	b1f0      	cbz	r0, 80143b2 <tcp_bind+0x92>
  if (!ip_addr_isany(ipaddr)
 8014374:	b115      	cbz	r5, 801437c <tcp_bind+0x5c>
 8014376:	682b      	ldr	r3, [r5, #0]
 8014378:	b103      	cbz	r3, 801437c <tcp_bind+0x5c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 801437a:	6033      	str	r3, [r6, #0]
  pcb->local_port = port;
 801437c:	82f2      	strh	r2, [r6, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801437e:	4b1a      	ldr	r3, [pc, #104]	; (80143e8 <tcp_bind+0xc8>)
 8014380:	681a      	ldr	r2, [r3, #0]
 8014382:	60f2      	str	r2, [r6, #12]
 8014384:	601e      	str	r6, [r3, #0]
 8014386:	f004 f871 	bl	801846c <tcp_timer_needed>
  return ERR_OK;
 801438a:	2000      	movs	r0, #0
}
 801438c:	bd70      	pop	{r4, r5, r6, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801438e:	68db      	ldr	r3, [r3, #12]
 8014390:	b16b      	cbz	r3, 80143ae <tcp_bind+0x8e>
        if (cpcb->local_port == port) {
 8014392:	8ad9      	ldrh	r1, [r3, #22]
 8014394:	4291      	cmp	r1, r2
 8014396:	d1fa      	bne.n	801438e <tcp_bind+0x6e>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8014398:	b173      	cbz	r3, 80143b8 <tcp_bind+0x98>
                (ip_addr_isany(&cpcb->local_ip) ||
 801439a:	6819      	ldr	r1, [r3, #0]
 801439c:	b179      	cbz	r1, 80143be <tcp_bind+0x9e>
 801439e:	b18d      	cbz	r5, 80143c4 <tcp_bind+0xa4>
                 ip_addr_isany(ipaddr) ||
 80143a0:	682c      	ldr	r4, [r5, #0]
 80143a2:	b194      	cbz	r4, 80143ca <tcp_bind+0xaa>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80143a4:	42a1      	cmp	r1, r4
 80143a6:	d1f2      	bne.n	801438e <tcp_bind+0x6e>
              return ERR_USE;
 80143a8:	f06f 0007 	mvn.w	r0, #7
 80143ac:	e7ee      	b.n	801438c <tcp_bind+0x6c>
    for (i = 0; i < max_pcb_list; i++) {
 80143ae:	3001      	adds	r0, #1
 80143b0:	e7bf      	b.n	8014332 <tcp_bind+0x12>
      return ERR_BUF;
 80143b2:	f06f 0001 	mvn.w	r0, #1
 80143b6:	e7e9      	b.n	801438c <tcp_bind+0x6c>
              return ERR_USE;
 80143b8:	f06f 0007 	mvn.w	r0, #7
 80143bc:	e7e6      	b.n	801438c <tcp_bind+0x6c>
 80143be:	f06f 0007 	mvn.w	r0, #7
 80143c2:	e7e3      	b.n	801438c <tcp_bind+0x6c>
 80143c4:	f06f 0007 	mvn.w	r0, #7
 80143c8:	e7e0      	b.n	801438c <tcp_bind+0x6c>
 80143ca:	f06f 0007 	mvn.w	r0, #7
 80143ce:	e7dd      	b.n	801438c <tcp_bind+0x6c>
 80143d0:	0801ec58 	.word	0x0801ec58
 80143d4:	0802035c 	.word	0x0802035c
 80143d8:	0801e58c 	.word	0x0801e58c
 80143dc:	0801e638 	.word	0x0801e638
 80143e0:	0801cca4 	.word	0x0801cca4
 80143e4:	0801e650 	.word	0x0801e650
 80143e8:	20007228 	.word	0x20007228

080143ec <tcp_listen_with_backlog_and_err>:
{
 80143ec:	b570      	push	{r4, r5, r6, lr}
 80143ee:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80143f0:	4604      	mov	r4, r0
 80143f2:	b340      	cbz	r0, 8014446 <tcp_listen_with_backlog_and_err+0x5a>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80143f4:	7d03      	ldrb	r3, [r0, #20]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d130      	bne.n	801445c <tcp_listen_with_backlog_and_err+0x70>
  if (pcb->state == LISTEN) {
 80143fa:	2b01      	cmp	r3, #1
 80143fc:	d051      	beq.n	80144a2 <tcp_listen_with_backlog_and_err+0xb6>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80143fe:	2002      	movs	r0, #2
 8014400:	f7ff f82c 	bl	801345c <memp_malloc>
  if (lpcb == NULL) {
 8014404:	4605      	mov	r5, r0
 8014406:	2800      	cmp	r0, #0
 8014408:	d04f      	beq.n	80144aa <tcp_listen_with_backlog_and_err+0xbe>
  lpcb->callback_arg = pcb->callback_arg;
 801440a:	6923      	ldr	r3, [r4, #16]
 801440c:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 801440e:	8ae3      	ldrh	r3, [r4, #22]
 8014410:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8014412:	2301      	movs	r3, #1
 8014414:	7503      	strb	r3, [r0, #20]
  lpcb->prio = pcb->prio;
 8014416:	7d63      	ldrb	r3, [r4, #21]
 8014418:	7543      	strb	r3, [r0, #21]
  lpcb->so_options = pcb->so_options;
 801441a:	7a63      	ldrb	r3, [r4, #9]
 801441c:	7243      	strb	r3, [r0, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801441e:	2300      	movs	r3, #0
 8014420:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 8014422:	7ae3      	ldrb	r3, [r4, #11]
 8014424:	72c3      	strb	r3, [r0, #11]
  lpcb->tos = pcb->tos;
 8014426:	7aa3      	ldrb	r3, [r4, #10]
 8014428:	7283      	strb	r3, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801442a:	6823      	ldr	r3, [r4, #0]
 801442c:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 801442e:	8ae3      	ldrh	r3, [r4, #22]
 8014430:	b33b      	cbz	r3, 8014482 <tcp_listen_with_backlog_and_err+0x96>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8014432:	4b1f      	ldr	r3, [pc, #124]	; (80144b0 <tcp_listen_with_backlog_and_err+0xc4>)
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	42a3      	cmp	r3, r4
 8014438:	d01b      	beq.n	8014472 <tcp_listen_with_backlog_and_err+0x86>
 801443a:	b303      	cbz	r3, 801447e <tcp_listen_with_backlog_and_err+0x92>
 801443c:	68da      	ldr	r2, [r3, #12]
 801443e:	42a2      	cmp	r2, r4
 8014440:	d01b      	beq.n	801447a <tcp_listen_with_backlog_and_err+0x8e>
 8014442:	4613      	mov	r3, r2
 8014444:	e7f9      	b.n	801443a <tcp_listen_with_backlog_and_err+0x4e>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8014446:	4b1b      	ldr	r3, [pc, #108]	; (80144b4 <tcp_listen_with_backlog_and_err+0xc8>)
 8014448:	f240 3259 	movw	r2, #857	; 0x359
 801444c:	491a      	ldr	r1, [pc, #104]	; (80144b8 <tcp_listen_with_backlog_and_err+0xcc>)
 801444e:	481b      	ldr	r0, [pc, #108]	; (80144bc <tcp_listen_with_backlog_and_err+0xd0>)
 8014450:	f007 fb16 	bl	801ba80 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 8014454:	4625      	mov	r5, r4
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8014456:	f06f 030f 	mvn.w	r3, #15
 801445a:	e01e      	b.n	801449a <tcp_listen_with_backlog_and_err+0xae>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801445c:	4b15      	ldr	r3, [pc, #84]	; (80144b4 <tcp_listen_with_backlog_and_err+0xc8>)
 801445e:	f240 325a 	movw	r2, #858	; 0x35a
 8014462:	4917      	ldr	r1, [pc, #92]	; (80144c0 <tcp_listen_with_backlog_and_err+0xd4>)
 8014464:	4815      	ldr	r0, [pc, #84]	; (80144bc <tcp_listen_with_backlog_and_err+0xd0>)
 8014466:	f007 fb0b 	bl	801ba80 <iprintf>
 801446a:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 801446e:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8014470:	e013      	b.n	801449a <tcp_listen_with_backlog_and_err+0xae>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8014472:	68da      	ldr	r2, [r3, #12]
 8014474:	4b0e      	ldr	r3, [pc, #56]	; (80144b0 <tcp_listen_with_backlog_and_err+0xc4>)
 8014476:	601a      	str	r2, [r3, #0]
 8014478:	e001      	b.n	801447e <tcp_listen_with_backlog_and_err+0x92>
 801447a:	68e2      	ldr	r2, [r4, #12]
 801447c:	60da      	str	r2, [r3, #12]
 801447e:	2300      	movs	r3, #0
 8014480:	60e3      	str	r3, [r4, #12]
  tcp_free(pcb);
 8014482:	4620      	mov	r0, r4
 8014484:	f7ff ff34 	bl	80142f0 <tcp_free>
  lpcb->accept = tcp_accept_null;
 8014488:	4b0e      	ldr	r3, [pc, #56]	; (80144c4 <tcp_listen_with_backlog_and_err+0xd8>)
 801448a:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801448c:	4b0e      	ldr	r3, [pc, #56]	; (80144c8 <tcp_listen_with_backlog_and_err+0xdc>)
 801448e:	681a      	ldr	r2, [r3, #0]
 8014490:	60ea      	str	r2, [r5, #12]
 8014492:	601d      	str	r5, [r3, #0]
 8014494:	f003 ffea 	bl	801846c <tcp_timer_needed>
  res = ERR_OK;
 8014498:	2300      	movs	r3, #0
  if (err != NULL) {
 801449a:	b106      	cbz	r6, 801449e <tcp_listen_with_backlog_and_err+0xb2>
    *err = res;
 801449c:	7033      	strb	r3, [r6, #0]
}
 801449e:	4628      	mov	r0, r5
 80144a0:	bd70      	pop	{r4, r5, r6, pc}
    lpcb = (struct tcp_pcb_listen *)pcb;
 80144a2:	4605      	mov	r5, r0
    res = ERR_ALREADY;
 80144a4:	f06f 0308 	mvn.w	r3, #8
 80144a8:	e7f7      	b.n	801449a <tcp_listen_with_backlog_and_err+0xae>
    res = ERR_MEM;
 80144aa:	f04f 33ff 	mov.w	r3, #4294967295
 80144ae:	e7f4      	b.n	801449a <tcp_listen_with_backlog_and_err+0xae>
 80144b0:	20007228 	.word	0x20007228
 80144b4:	0801e58c 	.word	0x0801e58c
 80144b8:	0801e678 	.word	0x0801e678
 80144bc:	0801cca4 	.word	0x0801cca4
 80144c0:	0801e6a8 	.word	0x0801e6a8
 80144c4:	08014a39 	.word	0x08014a39
 80144c8:	20007224 	.word	0x20007224

080144cc <tcp_listen_with_backlog>:
{
 80144cc:	b508      	push	{r3, lr}
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80144ce:	2200      	movs	r2, #0
 80144d0:	f7ff ff8c 	bl	80143ec <tcp_listen_with_backlog_and_err>
}
 80144d4:	bd08      	pop	{r3, pc}
	...

080144d8 <tcp_update_rcv_ann_wnd>:
{
 80144d8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80144da:	4604      	mov	r4, r0
 80144dc:	b180      	cbz	r0, 8014500 <tcp_update_rcv_ann_wnd+0x28>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80144de:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80144e0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80144e2:	1868      	adds	r0, r5, r1
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80144e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80144e6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80144e8:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80144ec:	bf94      	ite	ls
 80144ee:	18d3      	addls	r3, r2, r3
 80144f0:	f502 6386 	addhi.w	r3, r2, #1072	; 0x430
 80144f4:	1ac3      	subs	r3, r0, r3
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	db0a      	blt.n	8014510 <tcp_update_rcv_ann_wnd+0x38>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80144fa:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80144fc:	1a80      	subs	r0, r0, r2
}
 80144fe:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8014500:	4b0e      	ldr	r3, [pc, #56]	; (801453c <tcp_update_rcv_ann_wnd+0x64>)
 8014502:	f240 32a6 	movw	r2, #934	; 0x3a6
 8014506:	490e      	ldr	r1, [pc, #56]	; (8014540 <tcp_update_rcv_ann_wnd+0x68>)
 8014508:	480e      	ldr	r0, [pc, #56]	; (8014544 <tcp_update_rcv_ann_wnd+0x6c>)
 801450a:	f007 fab9 	bl	801ba80 <iprintf>
 801450e:	e7e6      	b.n	80144de <tcp_update_rcv_ann_wnd+0x6>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8014510:	1aab      	subs	r3, r5, r2
 8014512:	2b00      	cmp	r3, #0
 8014514:	dd03      	ble.n	801451e <tcp_update_rcv_ann_wnd+0x46>
      pcb->rcv_ann_wnd = 0;
 8014516:	2300      	movs	r3, #0
 8014518:	8563      	strh	r3, [r4, #42]	; 0x2a
    return 0;
 801451a:	2000      	movs	r0, #0
 801451c:	e7ef      	b.n	80144fe <tcp_update_rcv_ann_wnd+0x26>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801451e:	1b55      	subs	r5, r2, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8014520:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8014524:	d201      	bcs.n	801452a <tcp_update_rcv_ann_wnd+0x52>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8014526:	8565      	strh	r5, [r4, #42]	; 0x2a
 8014528:	e7f7      	b.n	801451a <tcp_update_rcv_ann_wnd+0x42>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801452a:	4b04      	ldr	r3, [pc, #16]	; (801453c <tcp_update_rcv_ann_wnd+0x64>)
 801452c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8014530:	4905      	ldr	r1, [pc, #20]	; (8014548 <tcp_update_rcv_ann_wnd+0x70>)
 8014532:	4804      	ldr	r0, [pc, #16]	; (8014544 <tcp_update_rcv_ann_wnd+0x6c>)
 8014534:	f007 faa4 	bl	801ba80 <iprintf>
 8014538:	e7f5      	b.n	8014526 <tcp_update_rcv_ann_wnd+0x4e>
 801453a:	bf00      	nop
 801453c:	0801e58c 	.word	0x0801e58c
 8014540:	0801e6e0 	.word	0x0801e6e0
 8014544:	0801cca4 	.word	0x0801cca4
 8014548:	0801e704 	.word	0x0801e704

0801454c <tcp_recved>:
{
 801454c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801454e:	b1b0      	cbz	r0, 801457e <tcp_recved+0x32>
 8014550:	460c      	mov	r4, r1
 8014552:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8014554:	7d03      	ldrb	r3, [r0, #20]
 8014556:	2b01      	cmp	r3, #1
 8014558:	d019      	beq.n	801458e <tcp_recved+0x42>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801455a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801455c:	1919      	adds	r1, r3, r4
 801455e:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8014560:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 8014564:	d801      	bhi.n	801456a <tcp_recved+0x1e>
 8014566:	428b      	cmp	r3, r1
 8014568:	d919      	bls.n	801459e <tcp_recved+0x52>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801456a:	f44f 6306 	mov.w	r3, #2144	; 0x860
 801456e:	852b      	strh	r3, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8014570:	4628      	mov	r0, r5
 8014572:	f7ff ffb1 	bl	80144d8 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8014576:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 801457a:	d212      	bcs.n	80145a2 <tcp_recved+0x56>
}
 801457c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801457e:	4b0d      	ldr	r3, [pc, #52]	; (80145b4 <tcp_recved+0x68>)
 8014580:	f240 32cf 	movw	r2, #975	; 0x3cf
 8014584:	490c      	ldr	r1, [pc, #48]	; (80145b8 <tcp_recved+0x6c>)
 8014586:	480d      	ldr	r0, [pc, #52]	; (80145bc <tcp_recved+0x70>)
 8014588:	f007 fa7a 	bl	801ba80 <iprintf>
 801458c:	e7f6      	b.n	801457c <tcp_recved+0x30>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801458e:	4b09      	ldr	r3, [pc, #36]	; (80145b4 <tcp_recved+0x68>)
 8014590:	f240 32d2 	movw	r2, #978	; 0x3d2
 8014594:	490a      	ldr	r1, [pc, #40]	; (80145c0 <tcp_recved+0x74>)
 8014596:	4809      	ldr	r0, [pc, #36]	; (80145bc <tcp_recved+0x70>)
 8014598:	f007 fa72 	bl	801ba80 <iprintf>
 801459c:	e7dd      	b.n	801455a <tcp_recved+0xe>
    pcb->rcv_wnd = rcv_wnd;
 801459e:	8529      	strh	r1, [r5, #40]	; 0x28
 80145a0:	e7e6      	b.n	8014570 <tcp_recved+0x24>
    tcp_ack_now(pcb);
 80145a2:	8b6b      	ldrh	r3, [r5, #26]
 80145a4:	f043 0302 	orr.w	r3, r3, #2
 80145a8:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 80145aa:	4628      	mov	r0, r5
 80145ac:	f003 fcc0 	bl	8017f30 <tcp_output>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
 80145b0:	e7e4      	b.n	801457c <tcp_recved+0x30>
 80145b2:	bf00      	nop
 80145b4:	0801e58c 	.word	0x0801e58c
 80145b8:	0801e720 	.word	0x0801e720
 80145bc:	0801cca4 	.word	0x0801cca4
 80145c0:	0801e738 	.word	0x0801e738

080145c4 <tcp_seg_free>:
  if (seg != NULL) {
 80145c4:	b150      	cbz	r0, 80145dc <tcp_seg_free+0x18>
{
 80145c6:	b510      	push	{r4, lr}
 80145c8:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 80145ca:	6840      	ldr	r0, [r0, #4]
 80145cc:	b108      	cbz	r0, 80145d2 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 80145ce:	f7ff fa23 	bl	8013a18 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 80145d2:	4621      	mov	r1, r4
 80145d4:	2003      	movs	r0, #3
 80145d6:	f7fe ff5b 	bl	8013490 <memp_free>
}
 80145da:	bd10      	pop	{r4, pc}
 80145dc:	4770      	bx	lr

080145de <tcp_segs_free>:
  while (seg != NULL) {
 80145de:	b138      	cbz	r0, 80145f0 <tcp_segs_free+0x12>
{
 80145e0:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 80145e2:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 80145e4:	f7ff ffee 	bl	80145c4 <tcp_seg_free>
    seg = next;
 80145e8:	4620      	mov	r0, r4
  while (seg != NULL) {
 80145ea:	2c00      	cmp	r4, #0
 80145ec:	d1f9      	bne.n	80145e2 <tcp_segs_free+0x4>
}
 80145ee:	bd10      	pop	{r4, pc}
 80145f0:	4770      	bx	lr
	...

080145f4 <tcp_setprio>:
{
 80145f4:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80145f6:	b108      	cbz	r0, 80145fc <tcp_setprio+0x8>
  pcb->prio = prio;
 80145f8:	7541      	strb	r1, [r0, #21]
}
 80145fa:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80145fc:	4b03      	ldr	r3, [pc, #12]	; (801460c <tcp_setprio+0x18>)
 80145fe:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8014602:	4903      	ldr	r1, [pc, #12]	; (8014610 <tcp_setprio+0x1c>)
 8014604:	4803      	ldr	r0, [pc, #12]	; (8014614 <tcp_setprio+0x20>)
 8014606:	f007 fa3b 	bl	801ba80 <iprintf>
 801460a:	e7f6      	b.n	80145fa <tcp_setprio+0x6>
 801460c:	0801e58c 	.word	0x0801e58c
 8014610:	0801e760 	.word	0x0801e760
 8014614:	0801cca4 	.word	0x0801cca4

08014618 <tcp_seg_copy>:
{
 8014618:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801461a:	4605      	mov	r5, r0
 801461c:	b198      	cbz	r0, 8014646 <tcp_seg_copy+0x2e>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801461e:	2003      	movs	r0, #3
 8014620:	f7fe ff1c 	bl	801345c <memp_malloc>
  if (cseg == NULL) {
 8014624:	4604      	mov	r4, r0
 8014626:	b160      	cbz	r0, 8014642 <tcp_seg_copy+0x2a>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8014628:	682b      	ldr	r3, [r5, #0]
 801462a:	6868      	ldr	r0, [r5, #4]
 801462c:	68a9      	ldr	r1, [r5, #8]
 801462e:	68ea      	ldr	r2, [r5, #12]
 8014630:	6023      	str	r3, [r4, #0]
 8014632:	6060      	str	r0, [r4, #4]
 8014634:	60a1      	str	r1, [r4, #8]
 8014636:	60e2      	str	r2, [r4, #12]
 8014638:	692b      	ldr	r3, [r5, #16]
 801463a:	6123      	str	r3, [r4, #16]
  pbuf_ref(cseg->p);
 801463c:	6860      	ldr	r0, [r4, #4]
 801463e:	f7ff fb57 	bl	8013cf0 <pbuf_ref>
}
 8014642:	4620      	mov	r0, r4
 8014644:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8014646:	4b04      	ldr	r3, [pc, #16]	; (8014658 <tcp_seg_copy+0x40>)
 8014648:	f240 6282 	movw	r2, #1666	; 0x682
 801464c:	4903      	ldr	r1, [pc, #12]	; (801465c <tcp_seg_copy+0x44>)
 801464e:	4804      	ldr	r0, [pc, #16]	; (8014660 <tcp_seg_copy+0x48>)
 8014650:	f007 fa16 	bl	801ba80 <iprintf>
 8014654:	e7e3      	b.n	801461e <tcp_seg_copy+0x6>
 8014656:	bf00      	nop
 8014658:	0801e58c 	.word	0x0801e58c
 801465c:	0801e77c 	.word	0x0801e77c
 8014660:	0801cca4 	.word	0x0801cca4

08014664 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8014664:	b100      	cbz	r0, 8014668 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8014666:	6101      	str	r1, [r0, #16]
  }
}
 8014668:	4770      	bx	lr
	...

0801466c <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801466c:	b180      	cbz	r0, 8014690 <tcp_recv+0x24>
{
 801466e:	b538      	push	{r3, r4, r5, lr}
 8014670:	460c      	mov	r4, r1
 8014672:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8014674:	7d03      	ldrb	r3, [r0, #20]
 8014676:	2b01      	cmp	r3, #1
 8014678:	d002      	beq.n	8014680 <tcp_recv+0x14>
    pcb->recv = recv;
 801467a:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
  }
}
 801467e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8014680:	4b04      	ldr	r3, [pc, #16]	; (8014694 <tcp_recv+0x28>)
 8014682:	f240 72df 	movw	r2, #2015	; 0x7df
 8014686:	4904      	ldr	r1, [pc, #16]	; (8014698 <tcp_recv+0x2c>)
 8014688:	4804      	ldr	r0, [pc, #16]	; (801469c <tcp_recv+0x30>)
 801468a:	f007 f9f9 	bl	801ba80 <iprintf>
 801468e:	e7f4      	b.n	801467a <tcp_recv+0xe>
 8014690:	4770      	bx	lr
 8014692:	bf00      	nop
 8014694:	0801e58c 	.word	0x0801e58c
 8014698:	0801e798 	.word	0x0801e798
 801469c:	0801cca4 	.word	0x0801cca4

080146a0 <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80146a0:	b180      	cbz	r0, 80146c4 <tcp_sent+0x24>
{
 80146a2:	b538      	push	{r3, r4, r5, lr}
 80146a4:	460c      	mov	r4, r1
 80146a6:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80146a8:	7d03      	ldrb	r3, [r0, #20]
 80146aa:	2b01      	cmp	r3, #1
 80146ac:	d002      	beq.n	80146b4 <tcp_sent+0x14>
    pcb->sent = sent;
 80146ae:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  }
}
 80146b2:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80146b4:	4b04      	ldr	r3, [pc, #16]	; (80146c8 <tcp_sent+0x28>)
 80146b6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80146ba:	4904      	ldr	r1, [pc, #16]	; (80146cc <tcp_sent+0x2c>)
 80146bc:	4804      	ldr	r0, [pc, #16]	; (80146d0 <tcp_sent+0x30>)
 80146be:	f007 f9df 	bl	801ba80 <iprintf>
 80146c2:	e7f4      	b.n	80146ae <tcp_sent+0xe>
 80146c4:	4770      	bx	lr
 80146c6:	bf00      	nop
 80146c8:	0801e58c 	.word	0x0801e58c
 80146cc:	0801e7c0 	.word	0x0801e7c0
 80146d0:	0801cca4 	.word	0x0801cca4

080146d4 <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80146d4:	b180      	cbz	r0, 80146f8 <tcp_err+0x24>
{
 80146d6:	b538      	push	{r3, r4, r5, lr}
 80146d8:	460c      	mov	r4, r1
 80146da:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80146dc:	7d03      	ldrb	r3, [r0, #20]
 80146de:	2b01      	cmp	r3, #1
 80146e0:	d002      	beq.n	80146e8 <tcp_err+0x14>
    pcb->errf = err;
 80146e2:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
  }
}
 80146e6:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80146e8:	4b04      	ldr	r3, [pc, #16]	; (80146fc <tcp_err+0x28>)
 80146ea:	f640 020d 	movw	r2, #2061	; 0x80d
 80146ee:	4904      	ldr	r1, [pc, #16]	; (8014700 <tcp_err+0x2c>)
 80146f0:	4804      	ldr	r0, [pc, #16]	; (8014704 <tcp_err+0x30>)
 80146f2:	f007 f9c5 	bl	801ba80 <iprintf>
 80146f6:	e7f4      	b.n	80146e2 <tcp_err+0xe>
 80146f8:	4770      	bx	lr
 80146fa:	bf00      	nop
 80146fc:	0801e58c 	.word	0x0801e58c
 8014700:	0801e7e8 	.word	0x0801e7e8
 8014704:	0801cca4 	.word	0x0801cca4

08014708 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8014708:	b110      	cbz	r0, 8014710 <tcp_accept+0x8>
 801470a:	7d02      	ldrb	r2, [r0, #20]
 801470c:	2a01      	cmp	r2, #1
 801470e:	d000      	beq.n	8014712 <tcp_accept+0xa>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
  }
}
 8014710:	4770      	bx	lr
    lpcb->accept = accept;
 8014712:	6181      	str	r1, [r0, #24]
}
 8014714:	e7fc      	b.n	8014710 <tcp_accept+0x8>
	...

08014718 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8014718:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801471a:	b148      	cbz	r0, 8014730 <tcp_poll+0x18>
 801471c:	460d      	mov	r5, r1
 801471e:	4614      	mov	r4, r2
 8014720:	4606      	mov	r6, r0
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8014722:	7d03      	ldrb	r3, [r0, #20]
 8014724:	2b01      	cmp	r3, #1
 8014726:	d00b      	beq.n	8014740 <tcp_poll+0x28>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8014728:	f8c6 508c 	str.w	r5, [r6, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801472c:	7774      	strb	r4, [r6, #29]
}
 801472e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8014730:	4b07      	ldr	r3, [pc, #28]	; (8014750 <tcp_poll+0x38>)
 8014732:	f640 023d 	movw	r2, #2109	; 0x83d
 8014736:	4907      	ldr	r1, [pc, #28]	; (8014754 <tcp_poll+0x3c>)
 8014738:	4807      	ldr	r0, [pc, #28]	; (8014758 <tcp_poll+0x40>)
 801473a:	f007 f9a1 	bl	801ba80 <iprintf>
 801473e:	e7f6      	b.n	801472e <tcp_poll+0x16>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8014740:	4b03      	ldr	r3, [pc, #12]	; (8014750 <tcp_poll+0x38>)
 8014742:	f640 023e 	movw	r2, #2110	; 0x83e
 8014746:	4905      	ldr	r1, [pc, #20]	; (801475c <tcp_poll+0x44>)
 8014748:	4803      	ldr	r0, [pc, #12]	; (8014758 <tcp_poll+0x40>)
 801474a:	f007 f999 	bl	801ba80 <iprintf>
 801474e:	e7eb      	b.n	8014728 <tcp_poll+0x10>
 8014750:	0801e58c 	.word	0x0801e58c
 8014754:	0801e810 	.word	0x0801e810
 8014758:	0801cca4 	.word	0x0801cca4
 801475c:	0801e828 	.word	0x0801e828

08014760 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014760:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014762:	b130      	cbz	r0, 8014772 <tcp_next_iss+0x12>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014764:	4b07      	ldr	r3, [pc, #28]	; (8014784 <tcp_next_iss+0x24>)
 8014766:	6818      	ldr	r0, [r3, #0]
 8014768:	4a07      	ldr	r2, [pc, #28]	; (8014788 <tcp_next_iss+0x28>)
 801476a:	6812      	ldr	r2, [r2, #0]
 801476c:	4410      	add	r0, r2
 801476e:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014770:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014772:	4b06      	ldr	r3, [pc, #24]	; (801478c <tcp_next_iss+0x2c>)
 8014774:	f640 02af 	movw	r2, #2223	; 0x8af
 8014778:	4905      	ldr	r1, [pc, #20]	; (8014790 <tcp_next_iss+0x30>)
 801477a:	4806      	ldr	r0, [pc, #24]	; (8014794 <tcp_next_iss+0x34>)
 801477c:	f007 f980 	bl	801ba80 <iprintf>
 8014780:	e7f0      	b.n	8014764 <tcp_next_iss+0x4>
 8014782:	bf00      	nop
 8014784:	2000000c 	.word	0x2000000c
 8014788:	20007220 	.word	0x20007220
 801478c:	0801e58c 	.word	0x0801e58c
 8014790:	0801e848 	.word	0x0801e848
 8014794:	0801cca4 	.word	0x0801cca4

08014798 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014798:	b538      	push	{r3, r4, r5, lr}
 801479a:	4605      	mov	r5, r0
 801479c:	460c      	mov	r4, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801479e:	b15a      	cbz	r2, 80147b8 <tcp_eff_send_mss_netif+0x20>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80147a0:	b144      	cbz	r4, 80147b4 <tcp_eff_send_mss_netif+0x1c>
      return sendmss;
    }
    mtu = outif->mtu;
 80147a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80147a4:	b133      	cbz	r3, 80147b4 <tcp_eff_send_mss_netif+0x1c>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80147a6:	2b28      	cmp	r3, #40	; 0x28
 80147a8:	d90e      	bls.n	80147c8 <tcp_eff_send_mss_netif+0x30>
 80147aa:	3b28      	subs	r3, #40	; 0x28
 80147ac:	b29b      	uxth	r3, r3
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80147ae:	429d      	cmp	r5, r3
 80147b0:	bf28      	it	cs
 80147b2:	461d      	movcs	r5, r3
  }
  return sendmss;
}
 80147b4:	4628      	mov	r0, r5
 80147b6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80147b8:	4b04      	ldr	r3, [pc, #16]	; (80147cc <tcp_eff_send_mss_netif+0x34>)
 80147ba:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80147be:	4904      	ldr	r1, [pc, #16]	; (80147d0 <tcp_eff_send_mss_netif+0x38>)
 80147c0:	4804      	ldr	r0, [pc, #16]	; (80147d4 <tcp_eff_send_mss_netif+0x3c>)
 80147c2:	f007 f95d 	bl	801ba80 <iprintf>
 80147c6:	e7eb      	b.n	80147a0 <tcp_eff_send_mss_netif+0x8>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80147c8:	2300      	movs	r3, #0
 80147ca:	e7f0      	b.n	80147ae <tcp_eff_send_mss_netif+0x16>
 80147cc:	0801e58c 	.word	0x0801e58c
 80147d0:	0801e864 	.word	0x0801e864
 80147d4:	0801cca4 	.word	0x0801cca4

080147d8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80147d8:	b510      	push	{r4, lr}
 80147da:	4604      	mov	r4, r0
  if (pcb->ooseq) {
 80147dc:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80147de:	b118      	cbz	r0, 80147e8 <tcp_free_ooseq+0x10>
    tcp_segs_free(pcb->ooseq);
 80147e0:	f7ff fefd 	bl	80145de <tcp_segs_free>
    pcb->ooseq = NULL;
 80147e4:	2300      	movs	r3, #0
 80147e6:	6763      	str	r3, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80147e8:	bd10      	pop	{r4, pc}
	...

080147ec <tcp_pcb_purge>:
{
 80147ec:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80147ee:	b300      	cbz	r0, 8014832 <tcp_pcb_purge+0x46>
 80147f0:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 80147f2:	7d03      	ldrb	r3, [r0, #20]
 80147f4:	b1e3      	cbz	r3, 8014830 <tcp_pcb_purge+0x44>
 80147f6:	2b0a      	cmp	r3, #10
 80147f8:	d01a      	beq.n	8014830 <tcp_pcb_purge+0x44>
      pcb->state != TIME_WAIT &&
 80147fa:	2b01      	cmp	r3, #1
 80147fc:	d018      	beq.n	8014830 <tcp_pcb_purge+0x44>
    if (pcb->refused_data != NULL) {
 80147fe:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8014800:	b118      	cbz	r0, 801480a <tcp_pcb_purge+0x1e>
      pbuf_free(pcb->refused_data);
 8014802:	f7ff f909 	bl	8013a18 <pbuf_free>
      pcb->refused_data = NULL;
 8014806:	2300      	movs	r3, #0
 8014808:	67a3      	str	r3, [r4, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 801480a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801480c:	b113      	cbz	r3, 8014814 <tcp_pcb_purge+0x28>
      tcp_free_ooseq(pcb);
 801480e:	4620      	mov	r0, r4
 8014810:	f7ff ffe2 	bl	80147d8 <tcp_free_ooseq>
    pcb->rtime = -1;
 8014814:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014818:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 801481a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801481c:	f7ff fedf 	bl	80145de <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014820:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8014822:	f7ff fedc 	bl	80145de <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014826:	2300      	movs	r3, #0
 8014828:	66e3      	str	r3, [r4, #108]	; 0x6c
 801482a:	6723      	str	r3, [r4, #112]	; 0x70
    pcb->unsent_oversize = 0;
 801482c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 8014830:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014832:	4b04      	ldr	r3, [pc, #16]	; (8014844 <tcp_pcb_purge+0x58>)
 8014834:	f640 0251 	movw	r2, #2129	; 0x851
 8014838:	4903      	ldr	r1, [pc, #12]	; (8014848 <tcp_pcb_purge+0x5c>)
 801483a:	4804      	ldr	r0, [pc, #16]	; (801484c <tcp_pcb_purge+0x60>)
 801483c:	f007 f920 	bl	801ba80 <iprintf>
 8014840:	e7f6      	b.n	8014830 <tcp_pcb_purge+0x44>
 8014842:	bf00      	nop
 8014844:	0801e58c 	.word	0x0801e58c
 8014848:	0801e88c 	.word	0x0801e88c
 801484c:	0801cca4 	.word	0x0801cca4

08014850 <tcp_pcb_remove>:
{
 8014850:	b538      	push	{r3, r4, r5, lr}
 8014852:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8014854:	460c      	mov	r4, r1
 8014856:	b149      	cbz	r1, 801486c <tcp_pcb_remove+0x1c>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014858:	b185      	cbz	r5, 801487c <tcp_pcb_remove+0x2c>
  TCP_RMV(pcblist, pcb);
 801485a:	682b      	ldr	r3, [r5, #0]
 801485c:	42a3      	cmp	r3, r4
 801485e:	d015      	beq.n	801488c <tcp_pcb_remove+0x3c>
 8014860:	b1cb      	cbz	r3, 8014896 <tcp_pcb_remove+0x46>
 8014862:	68da      	ldr	r2, [r3, #12]
 8014864:	42a2      	cmp	r2, r4
 8014866:	d014      	beq.n	8014892 <tcp_pcb_remove+0x42>
 8014868:	4613      	mov	r3, r2
 801486a:	e7f9      	b.n	8014860 <tcp_pcb_remove+0x10>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801486c:	4b25      	ldr	r3, [pc, #148]	; (8014904 <tcp_pcb_remove+0xb4>)
 801486e:	f640 0283 	movw	r2, #2179	; 0x883
 8014872:	4925      	ldr	r1, [pc, #148]	; (8014908 <tcp_pcb_remove+0xb8>)
 8014874:	4825      	ldr	r0, [pc, #148]	; (801490c <tcp_pcb_remove+0xbc>)
 8014876:	f007 f903 	bl	801ba80 <iprintf>
 801487a:	e7ed      	b.n	8014858 <tcp_pcb_remove+0x8>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801487c:	4b21      	ldr	r3, [pc, #132]	; (8014904 <tcp_pcb_remove+0xb4>)
 801487e:	f640 0284 	movw	r2, #2180	; 0x884
 8014882:	4923      	ldr	r1, [pc, #140]	; (8014910 <tcp_pcb_remove+0xc0>)
 8014884:	4821      	ldr	r0, [pc, #132]	; (801490c <tcp_pcb_remove+0xbc>)
 8014886:	f007 f8fb 	bl	801ba80 <iprintf>
 801488a:	e7e6      	b.n	801485a <tcp_pcb_remove+0xa>
  TCP_RMV(pcblist, pcb);
 801488c:	68db      	ldr	r3, [r3, #12]
 801488e:	602b      	str	r3, [r5, #0]
 8014890:	e001      	b.n	8014896 <tcp_pcb_remove+0x46>
 8014892:	68e2      	ldr	r2, [r4, #12]
 8014894:	60da      	str	r2, [r3, #12]
 8014896:	2300      	movs	r3, #0
 8014898:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 801489a:	4620      	mov	r0, r4
 801489c:	f7ff ffa6 	bl	80147ec <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 80148a0:	7d23      	ldrb	r3, [r4, #20]
 80148a2:	2b0a      	cmp	r3, #10
 80148a4:	d005      	beq.n	80148b2 <tcp_pcb_remove+0x62>
 80148a6:	2b01      	cmp	r3, #1
 80148a8:	d003      	beq.n	80148b2 <tcp_pcb_remove+0x62>
      (pcb->flags & TF_ACK_DELAY)) {
 80148aa:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 80148ac:	f013 0f01 	tst.w	r3, #1
 80148b0:	d121      	bne.n	80148f6 <tcp_pcb_remove+0xa6>
  if (pcb->state != LISTEN) {
 80148b2:	7d23      	ldrb	r3, [r4, #20]
 80148b4:	2b01      	cmp	r3, #1
 80148b6:	d01a      	beq.n	80148ee <tcp_pcb_remove+0x9e>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80148b8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80148ba:	b133      	cbz	r3, 80148ca <tcp_pcb_remove+0x7a>
 80148bc:	4b11      	ldr	r3, [pc, #68]	; (8014904 <tcp_pcb_remove+0xb4>)
 80148be:	f640 0293 	movw	r2, #2195	; 0x893
 80148c2:	4914      	ldr	r1, [pc, #80]	; (8014914 <tcp_pcb_remove+0xc4>)
 80148c4:	4811      	ldr	r0, [pc, #68]	; (801490c <tcp_pcb_remove+0xbc>)
 80148c6:	f007 f8db 	bl	801ba80 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80148ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80148cc:	b133      	cbz	r3, 80148dc <tcp_pcb_remove+0x8c>
 80148ce:	4b0d      	ldr	r3, [pc, #52]	; (8014904 <tcp_pcb_remove+0xb4>)
 80148d0:	f640 0294 	movw	r2, #2196	; 0x894
 80148d4:	4910      	ldr	r1, [pc, #64]	; (8014918 <tcp_pcb_remove+0xc8>)
 80148d6:	480d      	ldr	r0, [pc, #52]	; (801490c <tcp_pcb_remove+0xbc>)
 80148d8:	f007 f8d2 	bl	801ba80 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80148dc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80148de:	b133      	cbz	r3, 80148ee <tcp_pcb_remove+0x9e>
 80148e0:	4b08      	ldr	r3, [pc, #32]	; (8014904 <tcp_pcb_remove+0xb4>)
 80148e2:	f640 0296 	movw	r2, #2198	; 0x896
 80148e6:	490d      	ldr	r1, [pc, #52]	; (801491c <tcp_pcb_remove+0xcc>)
 80148e8:	4808      	ldr	r0, [pc, #32]	; (801490c <tcp_pcb_remove+0xbc>)
 80148ea:	f007 f8c9 	bl	801ba80 <iprintf>
  pcb->state = CLOSED;
 80148ee:	2300      	movs	r3, #0
 80148f0:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 80148f2:	82e3      	strh	r3, [r4, #22]
}
 80148f4:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 80148f6:	f043 0302 	orr.w	r3, r3, #2
 80148fa:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 80148fc:	4620      	mov	r0, r4
 80148fe:	f003 fb17 	bl	8017f30 <tcp_output>
 8014902:	e7d6      	b.n	80148b2 <tcp_pcb_remove+0x62>
 8014904:	0801e58c 	.word	0x0801e58c
 8014908:	0801e8a8 	.word	0x0801e8a8
 801490c:	0801cca4 	.word	0x0801cca4
 8014910:	0801e8c4 	.word	0x0801e8c4
 8014914:	0801e8e4 	.word	0x0801e8e4
 8014918:	0801e8fc 	.word	0x0801e8fc
 801491c:	0801e918 	.word	0x0801e918

08014920 <tcp_abandon>:
{
 8014920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014924:	b084      	sub	sp, #16
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8014926:	b1f8      	cbz	r0, 8014968 <tcp_abandon+0x48>
 8014928:	460d      	mov	r5, r1
 801492a:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801492c:	7d03      	ldrb	r3, [r0, #20]
 801492e:	2b01      	cmp	r3, #1
 8014930:	d022      	beq.n	8014978 <tcp_abandon+0x58>
  if (pcb->state == TIME_WAIT) {
 8014932:	7d23      	ldrb	r3, [r4, #20]
 8014934:	2b0a      	cmp	r3, #10
 8014936:	d027      	beq.n	8014988 <tcp_abandon+0x68>
    seqno = pcb->snd_nxt;
 8014938:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 801493c:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 8014940:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 8014944:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 8014946:	2b00      	cmp	r3, #0
 8014948:	d147      	bne.n	80149da <tcp_abandon+0xba>
      if (pcb->local_port != 0) {
 801494a:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 801494e:	f1ba 0f00 	cmp.w	sl, #0
 8014952:	d04c      	beq.n	80149ee <tcp_abandon+0xce>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014954:	4b2d      	ldr	r3, [pc, #180]	; (8014a0c <tcp_abandon+0xec>)
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	42a3      	cmp	r3, r4
 801495a:	d01d      	beq.n	8014998 <tcp_abandon+0x78>
 801495c:	b313      	cbz	r3, 80149a4 <tcp_abandon+0x84>
 801495e:	68da      	ldr	r2, [r3, #12]
 8014960:	42a2      	cmp	r2, r4
 8014962:	d01d      	beq.n	80149a0 <tcp_abandon+0x80>
 8014964:	4613      	mov	r3, r2
 8014966:	e7f9      	b.n	801495c <tcp_abandon+0x3c>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8014968:	4b29      	ldr	r3, [pc, #164]	; (8014a10 <tcp_abandon+0xf0>)
 801496a:	f240 223d 	movw	r2, #573	; 0x23d
 801496e:	4929      	ldr	r1, [pc, #164]	; (8014a14 <tcp_abandon+0xf4>)
 8014970:	4829      	ldr	r0, [pc, #164]	; (8014a18 <tcp_abandon+0xf8>)
 8014972:	f007 f885 	bl	801ba80 <iprintf>
 8014976:	e02d      	b.n	80149d4 <tcp_abandon+0xb4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8014978:	4b25      	ldr	r3, [pc, #148]	; (8014a10 <tcp_abandon+0xf0>)
 801497a:	f44f 7210 	mov.w	r2, #576	; 0x240
 801497e:	4927      	ldr	r1, [pc, #156]	; (8014a1c <tcp_abandon+0xfc>)
 8014980:	4825      	ldr	r0, [pc, #148]	; (8014a18 <tcp_abandon+0xf8>)
 8014982:	f007 f87d 	bl	801ba80 <iprintf>
 8014986:	e7d4      	b.n	8014932 <tcp_abandon+0x12>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8014988:	4621      	mov	r1, r4
 801498a:	4825      	ldr	r0, [pc, #148]	; (8014a20 <tcp_abandon+0x100>)
 801498c:	f7ff ff60 	bl	8014850 <tcp_pcb_remove>
    tcp_free(pcb);
 8014990:	4620      	mov	r0, r4
 8014992:	f7ff fcad 	bl	80142f0 <tcp_free>
 8014996:	e01d      	b.n	80149d4 <tcp_abandon+0xb4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014998:	68da      	ldr	r2, [r3, #12]
 801499a:	4b1c      	ldr	r3, [pc, #112]	; (8014a0c <tcp_abandon+0xec>)
 801499c:	601a      	str	r2, [r3, #0]
 801499e:	e001      	b.n	80149a4 <tcp_abandon+0x84>
 80149a0:	68e2      	ldr	r2, [r4, #12]
 80149a2:	60da      	str	r2, [r3, #12]
 80149a4:	2500      	movs	r5, #0
 80149a6:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 80149a8:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 80149aa:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80149ac:	b108      	cbz	r0, 80149b2 <tcp_abandon+0x92>
      tcp_segs_free(pcb->unacked);
 80149ae:	f7ff fe16 	bl	80145de <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80149b2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80149b4:	b108      	cbz	r0, 80149ba <tcp_abandon+0x9a>
      tcp_segs_free(pcb->unsent);
 80149b6:	f7ff fe12 	bl	80145de <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80149ba:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80149bc:	b108      	cbz	r0, 80149c2 <tcp_abandon+0xa2>
      tcp_segs_free(pcb->ooseq);
 80149be:	f7ff fe0e 	bl	80145de <tcp_segs_free>
    if (send_rst) {
 80149c2:	b9b5      	cbnz	r5, 80149f2 <tcp_abandon+0xd2>
    tcp_free(pcb);
 80149c4:	4620      	mov	r0, r4
 80149c6:	f7ff fc93 	bl	80142f0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80149ca:	b11e      	cbz	r6, 80149d4 <tcp_abandon+0xb4>
 80149cc:	f06f 010c 	mvn.w	r1, #12
 80149d0:	4638      	mov	r0, r7
 80149d2:	47b0      	blx	r6
}
 80149d4:	b004      	add	sp, #16
 80149d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 80149da:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80149de:	4621      	mov	r1, r4
 80149e0:	4810      	ldr	r0, [pc, #64]	; (8014a24 <tcp_abandon+0x104>)
 80149e2:	f7ff ff35 	bl	8014850 <tcp_pcb_remove>
 80149e6:	4b10      	ldr	r3, [pc, #64]	; (8014a28 <tcp_abandon+0x108>)
 80149e8:	2201      	movs	r2, #1
 80149ea:	701a      	strb	r2, [r3, #0]
 80149ec:	e7dd      	b.n	80149aa <tcp_abandon+0x8a>
    int send_rst = 0;
 80149ee:	2500      	movs	r5, #0
 80149f0:	e7db      	b.n	80149aa <tcp_abandon+0x8a>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80149f2:	1d23      	adds	r3, r4, #4
 80149f4:	8b22      	ldrh	r2, [r4, #24]
 80149f6:	9202      	str	r2, [sp, #8]
 80149f8:	f8cd a004 	str.w	sl, [sp, #4]
 80149fc:	9300      	str	r3, [sp, #0]
 80149fe:	4623      	mov	r3, r4
 8014a00:	464a      	mov	r2, r9
 8014a02:	4641      	mov	r1, r8
 8014a04:	4620      	mov	r0, r4
 8014a06:	f003 fa11 	bl	8017e2c <tcp_rst>
 8014a0a:	e7db      	b.n	80149c4 <tcp_abandon+0xa4>
 8014a0c:	20007228 	.word	0x20007228
 8014a10:	0801e58c 	.word	0x0801e58c
 8014a14:	0801e930 	.word	0x0801e930
 8014a18:	0801cca4 	.word	0x0801cca4
 8014a1c:	0801e94c 	.word	0x0801e94c
 8014a20:	2000722c 	.word	0x2000722c
 8014a24:	2000721c 	.word	0x2000721c
 8014a28:	20007218 	.word	0x20007218

08014a2c <tcp_abort>:
{
 8014a2c:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 8014a2e:	2101      	movs	r1, #1
 8014a30:	f7ff ff76 	bl	8014920 <tcp_abandon>
}
 8014a34:	bd08      	pop	{r3, pc}
	...

08014a38 <tcp_accept_null>:
{
 8014a38:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8014a3a:	460c      	mov	r4, r1
 8014a3c:	b129      	cbz	r1, 8014a4a <tcp_accept_null+0x12>
  tcp_abort(pcb);
 8014a3e:	4620      	mov	r0, r4
 8014a40:	f7ff fff4 	bl	8014a2c <tcp_abort>
}
 8014a44:	f06f 000c 	mvn.w	r0, #12
 8014a48:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8014a4a:	4b04      	ldr	r3, [pc, #16]	; (8014a5c <tcp_accept_null+0x24>)
 8014a4c:	f240 320f 	movw	r2, #783	; 0x30f
 8014a50:	4903      	ldr	r1, [pc, #12]	; (8014a60 <tcp_accept_null+0x28>)
 8014a52:	4804      	ldr	r0, [pc, #16]	; (8014a64 <tcp_accept_null+0x2c>)
 8014a54:	f007 f814 	bl	801ba80 <iprintf>
 8014a58:	e7f1      	b.n	8014a3e <tcp_accept_null+0x6>
 8014a5a:	bf00      	nop
 8014a5c:	0801e58c 	.word	0x0801e58c
 8014a60:	0801e980 	.word	0x0801e980
 8014a64:	0801cca4 	.word	0x0801cca4

08014a68 <tcp_kill_timewait>:
{
 8014a68:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014a6a:	4b0a      	ldr	r3, [pc, #40]	; (8014a94 <tcp_kill_timewait+0x2c>)
 8014a6c:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8014a6e:	2400      	movs	r4, #0
  inactive = NULL;
 8014a70:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014a72:	e000      	b.n	8014a76 <tcp_kill_timewait+0xe>
 8014a74:	68db      	ldr	r3, [r3, #12]
 8014a76:	b143      	cbz	r3, 8014a8a <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014a78:	6a19      	ldr	r1, [r3, #32]
 8014a7a:	4a07      	ldr	r2, [pc, #28]	; (8014a98 <tcp_kill_timewait+0x30>)
 8014a7c:	6812      	ldr	r2, [r2, #0]
 8014a7e:	1a52      	subs	r2, r2, r1
 8014a80:	42a2      	cmp	r2, r4
 8014a82:	d3f7      	bcc.n	8014a74 <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 8014a84:	4614      	mov	r4, r2
      inactive = pcb;
 8014a86:	4618      	mov	r0, r3
 8014a88:	e7f4      	b.n	8014a74 <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 8014a8a:	b108      	cbz	r0, 8014a90 <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 8014a8c:	f7ff ffce 	bl	8014a2c <tcp_abort>
}
 8014a90:	bd10      	pop	{r4, pc}
 8014a92:	bf00      	nop
 8014a94:	2000722c 	.word	0x2000722c
 8014a98:	20007220 	.word	0x20007220

08014a9c <tcp_kill_prio>:
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8014a9c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8014aa0:	d101      	bne.n	8014aa6 <tcp_kill_prio+0xa>
  if (mprio == 0) {
 8014aa2:	b908      	cbnz	r0, 8014aa8 <tcp_kill_prio+0xc>
 8014aa4:	4770      	bx	lr
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8014aa6:	207f      	movs	r0, #127	; 0x7f
{
 8014aa8:	b570      	push	{r4, r5, r6, lr}
  mprio--;
 8014aaa:	3801      	subs	r0, #1
 8014aac:	b2c2      	uxtb	r2, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014aae:	4b0e      	ldr	r3, [pc, #56]	; (8014ae8 <tcp_kill_prio+0x4c>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8014ab2:	2400      	movs	r4, #0
  inactive = NULL;
 8014ab4:	4620      	mov	r0, r4
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014ab6:	e006      	b.n	8014ac6 <tcp_kill_prio+0x2a>
      inactivity = tcp_ticks - pcb->tmr;
 8014ab8:	4a0c      	ldr	r2, [pc, #48]	; (8014aec <tcp_kill_prio+0x50>)
 8014aba:	6812      	ldr	r2, [r2, #0]
 8014abc:	6a1c      	ldr	r4, [r3, #32]
 8014abe:	1b14      	subs	r4, r2, r4
      mprio      = pcb->prio;
 8014ac0:	460a      	mov	r2, r1
      inactive   = pcb;
 8014ac2:	4618      	mov	r0, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014ac4:	68db      	ldr	r3, [r3, #12]
 8014ac6:	b153      	cbz	r3, 8014ade <tcp_kill_prio+0x42>
    if ((pcb->prio < mprio) ||
 8014ac8:	7d59      	ldrb	r1, [r3, #21]
 8014aca:	4291      	cmp	r1, r2
 8014acc:	d3f4      	bcc.n	8014ab8 <tcp_kill_prio+0x1c>
 8014ace:	d1f9      	bne.n	8014ac4 <tcp_kill_prio+0x28>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014ad0:	6a1e      	ldr	r6, [r3, #32]
 8014ad2:	4d06      	ldr	r5, [pc, #24]	; (8014aec <tcp_kill_prio+0x50>)
 8014ad4:	682d      	ldr	r5, [r5, #0]
 8014ad6:	1bad      	subs	r5, r5, r6
 8014ad8:	42a5      	cmp	r5, r4
 8014ada:	d3f3      	bcc.n	8014ac4 <tcp_kill_prio+0x28>
 8014adc:	e7ec      	b.n	8014ab8 <tcp_kill_prio+0x1c>
  if (inactive != NULL) {
 8014ade:	b108      	cbz	r0, 8014ae4 <tcp_kill_prio+0x48>
    tcp_abort(inactive);
 8014ae0:	f7ff ffa4 	bl	8014a2c <tcp_abort>
}
 8014ae4:	bd70      	pop	{r4, r5, r6, pc}
 8014ae6:	bf00      	nop
 8014ae8:	2000721c 	.word	0x2000721c
 8014aec:	20007220 	.word	0x20007220

08014af0 <tcp_netif_ip_addr_changed_pcblist>:
{
 8014af0:	b570      	push	{r4, r5, r6, lr}
 8014af2:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8014af4:	4605      	mov	r5, r0
 8014af6:	b960      	cbnz	r0, 8014b12 <tcp_netif_ip_addr_changed_pcblist+0x22>
 8014af8:	4b0a      	ldr	r3, [pc, #40]	; (8014b24 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 8014afa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8014afe:	490a      	ldr	r1, [pc, #40]	; (8014b28 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 8014b00:	480a      	ldr	r0, [pc, #40]	; (8014b2c <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 8014b02:	f006 ffbd 	bl	801ba80 <iprintf>
 8014b06:	e004      	b.n	8014b12 <tcp_netif_ip_addr_changed_pcblist+0x22>
      struct tcp_pcb *next = pcb->next;
 8014b08:	68e6      	ldr	r6, [r4, #12]
      tcp_abort(pcb);
 8014b0a:	4620      	mov	r0, r4
 8014b0c:	f7ff ff8e 	bl	8014a2c <tcp_abort>
      pcb = next;
 8014b10:	4634      	mov	r4, r6
  while (pcb != NULL) {
 8014b12:	b12c      	cbz	r4, 8014b20 <tcp_netif_ip_addr_changed_pcblist+0x30>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8014b14:	6822      	ldr	r2, [r4, #0]
 8014b16:	682b      	ldr	r3, [r5, #0]
 8014b18:	429a      	cmp	r2, r3
 8014b1a:	d0f5      	beq.n	8014b08 <tcp_netif_ip_addr_changed_pcblist+0x18>
      pcb = pcb->next;
 8014b1c:	68e4      	ldr	r4, [r4, #12]
 8014b1e:	e7f8      	b.n	8014b12 <tcp_netif_ip_addr_changed_pcblist+0x22>
}
 8014b20:	bd70      	pop	{r4, r5, r6, pc}
 8014b22:	bf00      	nop
 8014b24:	0801e58c 	.word	0x0801e58c
 8014b28:	0801e9a0 	.word	0x0801e9a0
 8014b2c:	0801cca4 	.word	0x0801cca4

08014b30 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 8014b30:	b300      	cbz	r0, 8014b74 <tcp_netif_ip_addr_changed+0x44>
{
 8014b32:	b538      	push	{r3, r4, r5, lr}
 8014b34:	460d      	mov	r5, r1
 8014b36:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 8014b38:	6803      	ldr	r3, [r0, #0]
 8014b3a:	b903      	cbnz	r3, 8014b3e <tcp_netif_ip_addr_changed+0xe>
}
 8014b3c:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014b3e:	4b0e      	ldr	r3, [pc, #56]	; (8014b78 <tcp_netif_ip_addr_changed+0x48>)
 8014b40:	6819      	ldr	r1, [r3, #0]
 8014b42:	f7ff ffd5 	bl	8014af0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014b46:	4b0d      	ldr	r3, [pc, #52]	; (8014b7c <tcp_netif_ip_addr_changed+0x4c>)
 8014b48:	6819      	ldr	r1, [r3, #0]
 8014b4a:	4620      	mov	r0, r4
 8014b4c:	f7ff ffd0 	bl	8014af0 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8014b50:	2d00      	cmp	r5, #0
 8014b52:	d0f3      	beq.n	8014b3c <tcp_netif_ip_addr_changed+0xc>
 8014b54:	682b      	ldr	r3, [r5, #0]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d0f0      	beq.n	8014b3c <tcp_netif_ip_addr_changed+0xc>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014b5a:	4b09      	ldr	r3, [pc, #36]	; (8014b80 <tcp_netif_ip_addr_changed+0x50>)
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	e000      	b.n	8014b62 <tcp_netif_ip_addr_changed+0x32>
 8014b60:	68db      	ldr	r3, [r3, #12]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d0ea      	beq.n	8014b3c <tcp_netif_ip_addr_changed+0xc>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014b66:	6819      	ldr	r1, [r3, #0]
 8014b68:	6822      	ldr	r2, [r4, #0]
 8014b6a:	4291      	cmp	r1, r2
 8014b6c:	d1f8      	bne.n	8014b60 <tcp_netif_ip_addr_changed+0x30>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014b6e:	682a      	ldr	r2, [r5, #0]
 8014b70:	601a      	str	r2, [r3, #0]
 8014b72:	e7f5      	b.n	8014b60 <tcp_netif_ip_addr_changed+0x30>
 8014b74:	4770      	bx	lr
 8014b76:	bf00      	nop
 8014b78:	2000721c 	.word	0x2000721c
 8014b7c:	20007228 	.word	0x20007228
 8014b80:	20007224 	.word	0x20007224

08014b84 <tcp_kill_state>:
{
 8014b84:	b538      	push	{r3, r4, r5, lr}
 8014b86:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8014b88:	f1a0 0308 	sub.w	r3, r0, #8
 8014b8c:	b2db      	uxtb	r3, r3
 8014b8e:	2b01      	cmp	r3, #1
 8014b90:	d804      	bhi.n	8014b9c <tcp_kill_state+0x18>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b92:	4b10      	ldr	r3, [pc, #64]	; (8014bd4 <tcp_kill_state+0x50>)
 8014b94:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8014b96:	2100      	movs	r1, #0
  inactive = NULL;
 8014b98:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b9a:	e008      	b.n	8014bae <tcp_kill_state+0x2a>
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8014b9c:	4b0e      	ldr	r3, [pc, #56]	; (8014bd8 <tcp_kill_state+0x54>)
 8014b9e:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8014ba2:	490e      	ldr	r1, [pc, #56]	; (8014bdc <tcp_kill_state+0x58>)
 8014ba4:	480e      	ldr	r0, [pc, #56]	; (8014be0 <tcp_kill_state+0x5c>)
 8014ba6:	f006 ff6b 	bl	801ba80 <iprintf>
 8014baa:	e7f2      	b.n	8014b92 <tcp_kill_state+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014bac:	68db      	ldr	r3, [r3, #12]
 8014bae:	b15b      	cbz	r3, 8014bc8 <tcp_kill_state+0x44>
    if (pcb->state == state) {
 8014bb0:	7d1a      	ldrb	r2, [r3, #20]
 8014bb2:	42a2      	cmp	r2, r4
 8014bb4:	d1fa      	bne.n	8014bac <tcp_kill_state+0x28>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014bb6:	6a1d      	ldr	r5, [r3, #32]
 8014bb8:	4a0a      	ldr	r2, [pc, #40]	; (8014be4 <tcp_kill_state+0x60>)
 8014bba:	6812      	ldr	r2, [r2, #0]
 8014bbc:	1b52      	subs	r2, r2, r5
 8014bbe:	428a      	cmp	r2, r1
 8014bc0:	d3f4      	bcc.n	8014bac <tcp_kill_state+0x28>
        inactivity = tcp_ticks - pcb->tmr;
 8014bc2:	4611      	mov	r1, r2
        inactive = pcb;
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	e7f1      	b.n	8014bac <tcp_kill_state+0x28>
  if (inactive != NULL) {
 8014bc8:	b110      	cbz	r0, 8014bd0 <tcp_kill_state+0x4c>
    tcp_abandon(inactive, 0);
 8014bca:	2100      	movs	r1, #0
 8014bcc:	f7ff fea8 	bl	8014920 <tcp_abandon>
}
 8014bd0:	bd38      	pop	{r3, r4, r5, pc}
 8014bd2:	bf00      	nop
 8014bd4:	2000721c 	.word	0x2000721c
 8014bd8:	0801e58c 	.word	0x0801e58c
 8014bdc:	0801e9d4 	.word	0x0801e9d4
 8014be0:	0801cca4 	.word	0x0801cca4
 8014be4:	20007220 	.word	0x20007220

08014be8 <tcp_alloc>:
{
 8014be8:	b538      	push	{r3, r4, r5, lr}
 8014bea:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014bec:	2001      	movs	r0, #1
 8014bee:	f7fe fc35 	bl	801345c <memp_malloc>
  if (pcb == NULL) {
 8014bf2:	4604      	mov	r4, r0
 8014bf4:	b368      	cbz	r0, 8014c52 <tcp_alloc+0x6a>
  if (pcb != NULL) {
 8014bf6:	b354      	cbz	r4, 8014c4e <tcp_alloc+0x66>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8014bf8:	229c      	movs	r2, #156	; 0x9c
 8014bfa:	2100      	movs	r1, #0
 8014bfc:	4620      	mov	r0, r4
 8014bfe:	f006 ff37 	bl	801ba70 <memset>
    pcb->prio = prio;
 8014c02:	7565      	strb	r5, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8014c04:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8014c08:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8014c0c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8014c10:	8562      	strh	r2, [r4, #42]	; 0x2a
 8014c12:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8014c14:	22ff      	movs	r2, #255	; 0xff
 8014c16:	72e2      	strb	r2, [r4, #11]
    pcb->mss = INITIAL_MSS;
 8014c18:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014c1c:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014c1e:	2206      	movs	r2, #6
 8014c20:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8014c24:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8014c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014c2a:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8014c2c:	2201      	movs	r2, #1
 8014c2e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8014c32:	4a1a      	ldr	r2, [pc, #104]	; (8014c9c <tcp_alloc+0xb4>)
 8014c34:	6812      	ldr	r2, [r2, #0]
 8014c36:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 8014c38:	4a19      	ldr	r2, [pc, #100]	; (8014ca0 <tcp_alloc+0xb8>)
 8014c3a:	7812      	ldrb	r2, [r2, #0]
 8014c3c:	77a2      	strb	r2, [r4, #30]
    pcb->ssthresh = TCP_SND_BUF;
 8014c3e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8014c42:	4b18      	ldr	r3, [pc, #96]	; (8014ca4 <tcp_alloc+0xbc>)
 8014c44:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014c48:	4b17      	ldr	r3, [pc, #92]	; (8014ca8 <tcp_alloc+0xc0>)
 8014c4a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8014c4e:	4620      	mov	r0, r4
 8014c50:	bd38      	pop	{r3, r4, r5, pc}
    tcp_handle_closepend();
 8014c52:	f7ff fb2b 	bl	80142ac <tcp_handle_closepend>
    tcp_kill_timewait();
 8014c56:	f7ff ff07 	bl	8014a68 <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014c5a:	2001      	movs	r0, #1
 8014c5c:	f7fe fbfe 	bl	801345c <memp_malloc>
    if (pcb == NULL) {
 8014c60:	4604      	mov	r4, r0
 8014c62:	2800      	cmp	r0, #0
 8014c64:	d1c7      	bne.n	8014bf6 <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 8014c66:	2009      	movs	r0, #9
 8014c68:	f7ff ff8c 	bl	8014b84 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014c6c:	2001      	movs	r0, #1
 8014c6e:	f7fe fbf5 	bl	801345c <memp_malloc>
      if (pcb == NULL) {
 8014c72:	4604      	mov	r4, r0
 8014c74:	2800      	cmp	r0, #0
 8014c76:	d1be      	bne.n	8014bf6 <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 8014c78:	2008      	movs	r0, #8
 8014c7a:	f7ff ff83 	bl	8014b84 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014c7e:	2001      	movs	r0, #1
 8014c80:	f7fe fbec 	bl	801345c <memp_malloc>
        if (pcb == NULL) {
 8014c84:	4604      	mov	r4, r0
 8014c86:	2800      	cmp	r0, #0
 8014c88:	d1b5      	bne.n	8014bf6 <tcp_alloc+0xe>
          tcp_kill_prio(prio);
 8014c8a:	4628      	mov	r0, r5
 8014c8c:	f7ff ff06 	bl	8014a9c <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014c90:	2001      	movs	r0, #1
 8014c92:	f7fe fbe3 	bl	801345c <memp_malloc>
 8014c96:	4604      	mov	r4, r0
          if (pcb != NULL) {
 8014c98:	e7ad      	b.n	8014bf6 <tcp_alloc+0xe>
 8014c9a:	bf00      	nop
 8014c9c:	20007220 	.word	0x20007220
 8014ca0:	200009da 	.word	0x200009da
 8014ca4:	08014e45 	.word	0x08014e45
 8014ca8:	006ddd00 	.word	0x006ddd00

08014cac <tcp_new_ip_type>:
{
 8014cac:	b508      	push	{r3, lr}
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8014cae:	2040      	movs	r0, #64	; 0x40
 8014cb0:	f7ff ff9a 	bl	8014be8 <tcp_alloc>
}
 8014cb4:	bd08      	pop	{r3, pc}
	...

08014cb8 <tcp_close_shutdown>:
{
 8014cb8:	b530      	push	{r4, r5, lr}
 8014cba:	b085      	sub	sp, #20
 8014cbc:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014cbe:	4604      	mov	r4, r0
 8014cc0:	b180      	cbz	r0, 8014ce4 <tcp_close_shutdown+0x2c>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8014cc2:	b125      	cbz	r5, 8014cce <tcp_close_shutdown+0x16>
 8014cc4:	7d23      	ldrb	r3, [r4, #20]
 8014cc6:	2b04      	cmp	r3, #4
 8014cc8:	d014      	beq.n	8014cf4 <tcp_close_shutdown+0x3c>
 8014cca:	2b07      	cmp	r3, #7
 8014ccc:	d012      	beq.n	8014cf4 <tcp_close_shutdown+0x3c>
  switch (pcb->state) {
 8014cce:	7d23      	ldrb	r3, [r4, #20]
 8014cd0:	2b01      	cmp	r3, #1
 8014cd2:	d06c      	beq.n	8014dae <tcp_close_shutdown+0xf6>
 8014cd4:	2b02      	cmp	r3, #2
 8014cd6:	d076      	beq.n	8014dc6 <tcp_close_shutdown+0x10e>
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d04f      	beq.n	8014d7c <tcp_close_shutdown+0xc4>
      return tcp_close_shutdown_fin(pcb);
 8014cdc:	4620      	mov	r0, r4
 8014cde:	f7ff faa3 	bl	8014228 <tcp_close_shutdown_fin>
 8014ce2:	e046      	b.n	8014d72 <tcp_close_shutdown+0xba>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014ce4:	4b3e      	ldr	r3, [pc, #248]	; (8014de0 <tcp_close_shutdown+0x128>)
 8014ce6:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8014cea:	493e      	ldr	r1, [pc, #248]	; (8014de4 <tcp_close_shutdown+0x12c>)
 8014cec:	483e      	ldr	r0, [pc, #248]	; (8014de8 <tcp_close_shutdown+0x130>)
 8014cee:	f006 fec7 	bl	801ba80 <iprintf>
 8014cf2:	e7e6      	b.n	8014cc2 <tcp_close_shutdown+0xa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014cf4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014cf6:	b1e3      	cbz	r3, 8014d32 <tcp_close_shutdown+0x7a>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014cf8:	8b63      	ldrh	r3, [r4, #26]
 8014cfa:	f013 0f10 	tst.w	r3, #16
 8014cfe:	d01d      	beq.n	8014d3c <tcp_close_shutdown+0x84>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014d00:	1d23      	adds	r3, r4, #4
 8014d02:	8b22      	ldrh	r2, [r4, #24]
 8014d04:	9202      	str	r2, [sp, #8]
 8014d06:	8ae2      	ldrh	r2, [r4, #22]
 8014d08:	9201      	str	r2, [sp, #4]
 8014d0a:	9300      	str	r3, [sp, #0]
 8014d0c:	4623      	mov	r3, r4
 8014d0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8014d10:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8014d12:	4620      	mov	r0, r4
 8014d14:	f003 f88a 	bl	8017e2c <tcp_rst>
      tcp_pcb_purge(pcb);
 8014d18:	4620      	mov	r0, r4
 8014d1a:	f7ff fd67 	bl	80147ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014d1e:	4b33      	ldr	r3, [pc, #204]	; (8014dec <tcp_close_shutdown+0x134>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	42a3      	cmp	r3, r4
 8014d24:	d012      	beq.n	8014d4c <tcp_close_shutdown+0x94>
 8014d26:	b1bb      	cbz	r3, 8014d58 <tcp_close_shutdown+0xa0>
 8014d28:	68da      	ldr	r2, [r3, #12]
 8014d2a:	42a2      	cmp	r2, r4
 8014d2c:	d012      	beq.n	8014d54 <tcp_close_shutdown+0x9c>
 8014d2e:	4613      	mov	r3, r2
 8014d30:	e7f9      	b.n	8014d26 <tcp_close_shutdown+0x6e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014d32:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014d34:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014d38:	d0c9      	beq.n	8014cce <tcp_close_shutdown+0x16>
 8014d3a:	e7dd      	b.n	8014cf8 <tcp_close_shutdown+0x40>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014d3c:	4b28      	ldr	r3, [pc, #160]	; (8014de0 <tcp_close_shutdown+0x128>)
 8014d3e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8014d42:	492b      	ldr	r1, [pc, #172]	; (8014df0 <tcp_close_shutdown+0x138>)
 8014d44:	4828      	ldr	r0, [pc, #160]	; (8014de8 <tcp_close_shutdown+0x130>)
 8014d46:	f006 fe9b 	bl	801ba80 <iprintf>
 8014d4a:	e7d9      	b.n	8014d00 <tcp_close_shutdown+0x48>
      TCP_RMV_ACTIVE(pcb);
 8014d4c:	68da      	ldr	r2, [r3, #12]
 8014d4e:	4b27      	ldr	r3, [pc, #156]	; (8014dec <tcp_close_shutdown+0x134>)
 8014d50:	601a      	str	r2, [r3, #0]
 8014d52:	e001      	b.n	8014d58 <tcp_close_shutdown+0xa0>
 8014d54:	68e2      	ldr	r2, [r4, #12]
 8014d56:	60da      	str	r2, [r3, #12]
 8014d58:	2300      	movs	r3, #0
 8014d5a:	60e3      	str	r3, [r4, #12]
 8014d5c:	4b25      	ldr	r3, [pc, #148]	; (8014df4 <tcp_close_shutdown+0x13c>)
 8014d5e:	2201      	movs	r2, #1
 8014d60:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 8014d62:	4b25      	ldr	r3, [pc, #148]	; (8014df8 <tcp_close_shutdown+0x140>)
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	42a3      	cmp	r3, r4
 8014d68:	d005      	beq.n	8014d76 <tcp_close_shutdown+0xbe>
        tcp_free(pcb);
 8014d6a:	4620      	mov	r0, r4
 8014d6c:	f7ff fac0 	bl	80142f0 <tcp_free>
      return ERR_OK;
 8014d70:	2000      	movs	r0, #0
}
 8014d72:	b005      	add	sp, #20
 8014d74:	bd30      	pop	{r4, r5, pc}
        tcp_trigger_input_pcb_close();
 8014d76:	f001 fffd 	bl	8016d74 <tcp_trigger_input_pcb_close>
 8014d7a:	e7f9      	b.n	8014d70 <tcp_close_shutdown+0xb8>
      if (pcb->local_port != 0) {
 8014d7c:	8ae3      	ldrh	r3, [r4, #22]
 8014d7e:	b18b      	cbz	r3, 8014da4 <tcp_close_shutdown+0xec>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014d80:	4b1e      	ldr	r3, [pc, #120]	; (8014dfc <tcp_close_shutdown+0x144>)
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	42a3      	cmp	r3, r4
 8014d86:	d005      	beq.n	8014d94 <tcp_close_shutdown+0xdc>
 8014d88:	b153      	cbz	r3, 8014da0 <tcp_close_shutdown+0xe8>
 8014d8a:	68da      	ldr	r2, [r3, #12]
 8014d8c:	42a2      	cmp	r2, r4
 8014d8e:	d005      	beq.n	8014d9c <tcp_close_shutdown+0xe4>
 8014d90:	4613      	mov	r3, r2
 8014d92:	e7f9      	b.n	8014d88 <tcp_close_shutdown+0xd0>
 8014d94:	68da      	ldr	r2, [r3, #12]
 8014d96:	4b19      	ldr	r3, [pc, #100]	; (8014dfc <tcp_close_shutdown+0x144>)
 8014d98:	601a      	str	r2, [r3, #0]
 8014d9a:	e001      	b.n	8014da0 <tcp_close_shutdown+0xe8>
 8014d9c:	68e2      	ldr	r2, [r4, #12]
 8014d9e:	60da      	str	r2, [r3, #12]
 8014da0:	2300      	movs	r3, #0
 8014da2:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 8014da4:	4620      	mov	r0, r4
 8014da6:	f7ff faa3 	bl	80142f0 <tcp_free>
  return ERR_OK;
 8014daa:	2000      	movs	r0, #0
      break;
 8014dac:	e7e1      	b.n	8014d72 <tcp_close_shutdown+0xba>
      tcp_listen_closed(pcb);
 8014dae:	4620      	mov	r0, r4
 8014db0:	f7ff f9f4 	bl	801419c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014db4:	4621      	mov	r1, r4
 8014db6:	4812      	ldr	r0, [pc, #72]	; (8014e00 <tcp_close_shutdown+0x148>)
 8014db8:	f7ff fd4a 	bl	8014850 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014dbc:	4620      	mov	r0, r4
 8014dbe:	f7ff fa1b 	bl	80141f8 <tcp_free_listen>
  return ERR_OK;
 8014dc2:	2000      	movs	r0, #0
      break;
 8014dc4:	e7d5      	b.n	8014d72 <tcp_close_shutdown+0xba>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014dc6:	4621      	mov	r1, r4
 8014dc8:	4808      	ldr	r0, [pc, #32]	; (8014dec <tcp_close_shutdown+0x134>)
 8014dca:	f7ff fd41 	bl	8014850 <tcp_pcb_remove>
 8014dce:	4b09      	ldr	r3, [pc, #36]	; (8014df4 <tcp_close_shutdown+0x13c>)
 8014dd0:	2201      	movs	r2, #1
 8014dd2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8014dd4:	4620      	mov	r0, r4
 8014dd6:	f7ff fa8b 	bl	80142f0 <tcp_free>
  return ERR_OK;
 8014dda:	2000      	movs	r0, #0
      break;
 8014ddc:	e7c9      	b.n	8014d72 <tcp_close_shutdown+0xba>
 8014dde:	bf00      	nop
 8014de0:	0801e58c 	.word	0x0801e58c
 8014de4:	0801e9e4 	.word	0x0801e9e4
 8014de8:	0801cca4 	.word	0x0801cca4
 8014dec:	2000721c 	.word	0x2000721c
 8014df0:	0801ea04 	.word	0x0801ea04
 8014df4:	20007218 	.word	0x20007218
 8014df8:	20007230 	.word	0x20007230
 8014dfc:	20007228 	.word	0x20007228
 8014e00:	20007224 	.word	0x20007224

08014e04 <tcp_close>:
{
 8014e04:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014e06:	b160      	cbz	r0, 8014e22 <tcp_close+0x1e>
 8014e08:	4603      	mov	r3, r0
  if (pcb->state != LISTEN) {
 8014e0a:	7d02      	ldrb	r2, [r0, #20]
 8014e0c:	2a01      	cmp	r2, #1
 8014e0e:	d003      	beq.n	8014e18 <tcp_close+0x14>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014e10:	8b42      	ldrh	r2, [r0, #26]
 8014e12:	f042 0210 	orr.w	r2, r2, #16
 8014e16:	8342      	strh	r2, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8014e18:	2101      	movs	r1, #1
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	f7ff ff4c 	bl	8014cb8 <tcp_close_shutdown>
}
 8014e20:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014e22:	4b05      	ldr	r3, [pc, #20]	; (8014e38 <tcp_close+0x34>)
 8014e24:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8014e28:	4904      	ldr	r1, [pc, #16]	; (8014e3c <tcp_close+0x38>)
 8014e2a:	4805      	ldr	r0, [pc, #20]	; (8014e40 <tcp_close+0x3c>)
 8014e2c:	f006 fe28 	bl	801ba80 <iprintf>
 8014e30:	f06f 000f 	mvn.w	r0, #15
 8014e34:	e7f4      	b.n	8014e20 <tcp_close+0x1c>
 8014e36:	bf00      	nop
 8014e38:	0801e58c 	.word	0x0801e58c
 8014e3c:	0801ea20 	.word	0x0801ea20
 8014e40:	0801cca4 	.word	0x0801cca4

08014e44 <tcp_recv_null>:
{
 8014e44:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8014e46:	b151      	cbz	r1, 8014e5e <tcp_recv_null+0x1a>
 8014e48:	4614      	mov	r4, r2
 8014e4a:	4608      	mov	r0, r1
  if (p != NULL) {
 8014e4c:	b18a      	cbz	r2, 8014e72 <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 8014e4e:	8911      	ldrh	r1, [r2, #8]
 8014e50:	f7ff fb7c 	bl	801454c <tcp_recved>
    pbuf_free(p);
 8014e54:	4620      	mov	r0, r4
 8014e56:	f7fe fddf 	bl	8013a18 <pbuf_free>
  return ERR_OK;
 8014e5a:	2000      	movs	r0, #0
}
 8014e5c:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8014e5e:	4b08      	ldr	r3, [pc, #32]	; (8014e80 <tcp_recv_null+0x3c>)
 8014e60:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014e64:	4907      	ldr	r1, [pc, #28]	; (8014e84 <tcp_recv_null+0x40>)
 8014e66:	4808      	ldr	r0, [pc, #32]	; (8014e88 <tcp_recv_null+0x44>)
 8014e68:	f006 fe0a 	bl	801ba80 <iprintf>
 8014e6c:	f06f 000f 	mvn.w	r0, #15
 8014e70:	e7f4      	b.n	8014e5c <tcp_recv_null+0x18>
  } else if (err == ERR_OK) {
 8014e72:	b10b      	cbz	r3, 8014e78 <tcp_recv_null+0x34>
  return ERR_OK;
 8014e74:	2000      	movs	r0, #0
 8014e76:	e7f1      	b.n	8014e5c <tcp_recv_null+0x18>
    return tcp_close(pcb);
 8014e78:	f7ff ffc4 	bl	8014e04 <tcp_close>
 8014e7c:	e7ee      	b.n	8014e5c <tcp_recv_null+0x18>
 8014e7e:	bf00      	nop
 8014e80:	0801e58c 	.word	0x0801e58c
 8014e84:	0801ea38 	.word	0x0801ea38
 8014e88:	0801cca4 	.word	0x0801cca4

08014e8c <tcp_process_refused_data>:
{
 8014e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8014e8e:	b318      	cbz	r0, 8014ed8 <tcp_process_refused_data+0x4c>
 8014e90:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8014e92:	6f86      	ldr	r6, [r0, #120]	; 0x78
 8014e94:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8014e96:	2300      	movs	r3, #0
 8014e98:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8014e9a:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8014e9e:	b32d      	cbz	r5, 8014eec <tcp_process_refused_data+0x60>
 8014ea0:	4632      	mov	r2, r6
 8014ea2:	4601      	mov	r1, r0
 8014ea4:	6900      	ldr	r0, [r0, #16]
 8014ea6:	47a8      	blx	r5
 8014ea8:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8014eaa:	bb3d      	cbnz	r5, 8014efc <tcp_process_refused_data+0x70>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8014eac:	f017 0f20 	tst.w	r7, #32
 8014eb0:	d02a      	beq.n	8014f08 <tcp_process_refused_data+0x7c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014eb2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014eb4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014eb8:	d001      	beq.n	8014ebe <tcp_process_refused_data+0x32>
          pcb->rcv_wnd++;
 8014eba:	3301      	adds	r3, #1
 8014ebc:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8014ebe:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 8014ec2:	b30e      	cbz	r6, 8014f08 <tcp_process_refused_data+0x7c>
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	461a      	mov	r2, r3
 8014ec8:	4621      	mov	r1, r4
 8014eca:	6920      	ldr	r0, [r4, #16]
 8014ecc:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8014ece:	f110 0f0d 	cmn.w	r0, #13
 8014ed2:	d119      	bne.n	8014f08 <tcp_process_refused_data+0x7c>
          return ERR_ABRT;
 8014ed4:	4605      	mov	r5, r0
 8014ed6:	e017      	b.n	8014f08 <tcp_process_refused_data+0x7c>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8014ed8:	4b0c      	ldr	r3, [pc, #48]	; (8014f0c <tcp_process_refused_data+0x80>)
 8014eda:	f240 6209 	movw	r2, #1545	; 0x609
 8014ede:	490c      	ldr	r1, [pc, #48]	; (8014f10 <tcp_process_refused_data+0x84>)
 8014ee0:	480c      	ldr	r0, [pc, #48]	; (8014f14 <tcp_process_refused_data+0x88>)
 8014ee2:	f006 fdcd 	bl	801ba80 <iprintf>
 8014ee6:	f06f 050f 	mvn.w	r5, #15
 8014eea:	e00d      	b.n	8014f08 <tcp_process_refused_data+0x7c>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8014eec:	2300      	movs	r3, #0
 8014eee:	4632      	mov	r2, r6
 8014ef0:	4601      	mov	r1, r0
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	f7ff ffa6 	bl	8014e44 <tcp_recv_null>
 8014ef8:	4605      	mov	r5, r0
 8014efa:	e7d6      	b.n	8014eaa <tcp_process_refused_data+0x1e>
    } else if (err == ERR_ABRT) {
 8014efc:	f115 0f0d 	cmn.w	r5, #13
 8014f00:	d002      	beq.n	8014f08 <tcp_process_refused_data+0x7c>
      pcb->refused_data = refused_data;
 8014f02:	67a6      	str	r6, [r4, #120]	; 0x78
      return ERR_INPROGRESS;
 8014f04:	f06f 0504 	mvn.w	r5, #4
}
 8014f08:	4628      	mov	r0, r5
 8014f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f0c:	0801e58c 	.word	0x0801e58c
 8014f10:	0801ea54 	.word	0x0801ea54
 8014f14:	0801cca4 	.word	0x0801cca4

08014f18 <tcp_fasttmr>:
{
 8014f18:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 8014f1a:	4a1c      	ldr	r2, [pc, #112]	; (8014f8c <tcp_fasttmr+0x74>)
 8014f1c:	7813      	ldrb	r3, [r2, #0]
 8014f1e:	3301      	adds	r3, #1
 8014f20:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8014f22:	4b1b      	ldr	r3, [pc, #108]	; (8014f90 <tcp_fasttmr+0x78>)
 8014f24:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8014f26:	e013      	b.n	8014f50 <tcp_fasttmr+0x38>
        tcp_ack_now(pcb);
 8014f28:	f043 0302 	orr.w	r3, r3, #2
 8014f2c:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8014f2e:	4620      	mov	r0, r4
 8014f30:	f002 fffe 	bl	8017f30 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014f34:	8b63      	ldrh	r3, [r4, #26]
 8014f36:	f023 0303 	bic.w	r3, r3, #3
 8014f3a:	8363      	strh	r3, [r4, #26]
 8014f3c:	e013      	b.n	8014f66 <tcp_fasttmr+0x4e>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014f3e:	f023 0308 	bic.w	r3, r3, #8
 8014f42:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8014f44:	4620      	mov	r0, r4
 8014f46:	f7ff f96f 	bl	8014228 <tcp_close_shutdown_fin>
 8014f4a:	e010      	b.n	8014f6e <tcp_fasttmr+0x56>
      pcb = pcb->next;
 8014f4c:	68e5      	ldr	r5, [r4, #12]
{
 8014f4e:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8014f50:	b1dc      	cbz	r4, 8014f8a <tcp_fasttmr+0x72>
    if (pcb->last_timer != tcp_timer_ctr) {
 8014f52:	7fa2      	ldrb	r2, [r4, #30]
 8014f54:	4b0d      	ldr	r3, [pc, #52]	; (8014f8c <tcp_fasttmr+0x74>)
 8014f56:	781b      	ldrb	r3, [r3, #0]
 8014f58:	429a      	cmp	r2, r3
 8014f5a:	d0f7      	beq.n	8014f4c <tcp_fasttmr+0x34>
      pcb->last_timer = tcp_timer_ctr;
 8014f5c:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8014f5e:	8b63      	ldrh	r3, [r4, #26]
 8014f60:	f013 0f01 	tst.w	r3, #1
 8014f64:	d1e0      	bne.n	8014f28 <tcp_fasttmr+0x10>
      if (pcb->flags & TF_CLOSEPEND) {
 8014f66:	8b63      	ldrh	r3, [r4, #26]
 8014f68:	f013 0f08 	tst.w	r3, #8
 8014f6c:	d1e7      	bne.n	8014f3e <tcp_fasttmr+0x26>
      next = pcb->next;
 8014f6e:	68e5      	ldr	r5, [r4, #12]
      if (pcb->refused_data != NULL) {
 8014f70:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d0eb      	beq.n	8014f4e <tcp_fasttmr+0x36>
        tcp_active_pcbs_changed = 0;
 8014f76:	4e07      	ldr	r6, [pc, #28]	; (8014f94 <tcp_fasttmr+0x7c>)
 8014f78:	2300      	movs	r3, #0
 8014f7a:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 8014f7c:	4620      	mov	r0, r4
 8014f7e:	f7ff ff85 	bl	8014e8c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8014f82:	7833      	ldrb	r3, [r6, #0]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d0e2      	beq.n	8014f4e <tcp_fasttmr+0x36>
 8014f88:	e7cb      	b.n	8014f22 <tcp_fasttmr+0xa>
}
 8014f8a:	bd70      	pop	{r4, r5, r6, pc}
 8014f8c:	200009da 	.word	0x200009da
 8014f90:	2000721c 	.word	0x2000721c
 8014f94:	20007218 	.word	0x20007218

08014f98 <tcp_slowtmr>:
{
 8014f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f9c:	b084      	sub	sp, #16
  ++tcp_ticks;
 8014f9e:	4aac      	ldr	r2, [pc, #688]	; (8015250 <tcp_slowtmr+0x2b8>)
 8014fa0:	6813      	ldr	r3, [r2, #0]
 8014fa2:	3301      	adds	r3, #1
 8014fa4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8014fa6:	4aab      	ldr	r2, [pc, #684]	; (8015254 <tcp_slowtmr+0x2bc>)
 8014fa8:	7813      	ldrb	r3, [r2, #0]
 8014faa:	3301      	adds	r3, #1
 8014fac:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8014fae:	4baa      	ldr	r3, [pc, #680]	; (8015258 <tcp_slowtmr+0x2c0>)
 8014fb0:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 8014fb2:	2600      	movs	r6, #0
 8014fb4:	e194      	b.n	80152e0 <tcp_slowtmr+0x348>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8014fb6:	4ba9      	ldr	r3, [pc, #676]	; (801525c <tcp_slowtmr+0x2c4>)
 8014fb8:	f240 42be 	movw	r2, #1214	; 0x4be
 8014fbc:	49a8      	ldr	r1, [pc, #672]	; (8015260 <tcp_slowtmr+0x2c8>)
 8014fbe:	48a9      	ldr	r0, [pc, #676]	; (8015264 <tcp_slowtmr+0x2cc>)
 8014fc0:	f006 fd5e 	bl	801ba80 <iprintf>
 8014fc4:	e192      	b.n	80152ec <tcp_slowtmr+0x354>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8014fc6:	4ba5      	ldr	r3, [pc, #660]	; (801525c <tcp_slowtmr+0x2c4>)
 8014fc8:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8014fcc:	49a6      	ldr	r1, [pc, #664]	; (8015268 <tcp_slowtmr+0x2d0>)
 8014fce:	48a5      	ldr	r0, [pc, #660]	; (8015264 <tcp_slowtmr+0x2cc>)
 8014fd0:	f006 fd56 	bl	801ba80 <iprintf>
 8014fd4:	e18e      	b.n	80152f4 <tcp_slowtmr+0x35c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8014fd6:	4ba1      	ldr	r3, [pc, #644]	; (801525c <tcp_slowtmr+0x2c4>)
 8014fd8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8014fdc:	49a3      	ldr	r1, [pc, #652]	; (801526c <tcp_slowtmr+0x2d4>)
 8014fde:	48a1      	ldr	r0, [pc, #644]	; (8015264 <tcp_slowtmr+0x2cc>)
 8014fe0:	f006 fd4e 	bl	801ba80 <iprintf>
 8014fe4:	e18a      	b.n	80152fc <tcp_slowtmr+0x364>
      prev = pcb;
 8014fe6:	4626      	mov	r6, r4
      pcb = pcb->next;
 8014fe8:	68e4      	ldr	r4, [r4, #12]
      continue;
 8014fea:	e179      	b.n	80152e0 <tcp_slowtmr+0x348>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8014fec:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8014ff0:	2b05      	cmp	r3, #5
 8014ff2:	f240 818e 	bls.w	8015312 <tcp_slowtmr+0x37a>
      ++pcb_remove;
 8014ff6:	2501      	movs	r5, #1
 8014ff8:	e06f      	b.n	80150da <tcp_slowtmr+0x142>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8014ffa:	4b98      	ldr	r3, [pc, #608]	; (801525c <tcp_slowtmr+0x2c4>)
 8014ffc:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8015000:	499b      	ldr	r1, [pc, #620]	; (8015270 <tcp_slowtmr+0x2d8>)
 8015002:	4898      	ldr	r0, [pc, #608]	; (8015264 <tcp_slowtmr+0x2cc>)
 8015004:	f006 fd3c 	bl	801ba80 <iprintf>
 8015008:	e19a      	b.n	8015340 <tcp_slowtmr+0x3a8>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801500a:	4620      	mov	r0, r4
 801500c:	f002 fc7e 	bl	801790c <tcp_split_unsent_seg>
 8015010:	b160      	cbz	r0, 801502c <tcp_slowtmr+0x94>
              pcb->persist_cnt = 0;
 8015012:	2300      	movs	r3, #0
 8015014:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015018:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801501c:	2b06      	cmp	r3, #6
 801501e:	f200 80a0 	bhi.w	8015162 <tcp_slowtmr+0x1ca>
                pcb->persist_backoff++;
 8015022:	3301      	adds	r3, #1
 8015024:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    pcb_remove = 0;
 8015028:	2500      	movs	r5, #0
 801502a:	e056      	b.n	80150da <tcp_slowtmr+0x142>
                if (tcp_output(pcb) == ERR_OK) {
 801502c:	4620      	mov	r0, r4
 801502e:	f002 ff7f 	bl	8017f30 <tcp_output>
 8015032:	2800      	cmp	r0, #0
 8015034:	d1ed      	bne.n	8015012 <tcp_slowtmr+0x7a>
    pcb_remove = 0;
 8015036:	2500      	movs	r5, #0
 8015038:	e04f      	b.n	80150da <tcp_slowtmr+0x142>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801503a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 801503e:	b29b      	uxth	r3, r3
 8015040:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8015044:	4293      	cmp	r3, r2
 8015046:	d801      	bhi.n	801504c <tcp_slowtmr+0xb4>
          ++pcb->rtime;
 8015048:	3301      	adds	r3, #1
 801504a:	8623      	strh	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 801504c:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8015050:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8015054:	429a      	cmp	r2, r3
 8015056:	db40      	blt.n	80150da <tcp_slowtmr+0x142>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015058:	4620      	mov	r0, r4
 801505a:	f002 fe17 	bl	8017c8c <tcp_rexmit_rto_prepare>
 801505e:	b120      	cbz	r0, 801506a <tcp_slowtmr+0xd2>
 8015060:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015062:	2b00      	cmp	r3, #0
 8015064:	d139      	bne.n	80150da <tcp_slowtmr+0x142>
 8015066:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8015068:	b3bb      	cbz	r3, 80150da <tcp_slowtmr+0x142>
            if (pcb->state != SYN_SENT) {
 801506a:	7d23      	ldrb	r3, [r4, #20]
 801506c:	2b02      	cmp	r3, #2
 801506e:	d014      	beq.n	801509a <tcp_slowtmr+0x102>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8015070:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8015074:	2a0c      	cmp	r2, #12
 8015076:	bf28      	it	cs
 8015078:	220c      	movcs	r2, #12
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801507a:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 801507e:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8015082:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8015086:	497b      	ldr	r1, [pc, #492]	; (8015274 <tcp_slowtmr+0x2dc>)
 8015088:	5c8a      	ldrb	r2, [r1, r2]
 801508a:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801508c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8015090:	4293      	cmp	r3, r2
 8015092:	dc1e      	bgt.n	80150d2 <tcp_slowtmr+0x13a>
 8015094:	b21b      	sxth	r3, r3
 8015096:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            pcb->rtime = 0;
 801509a:	2300      	movs	r3, #0
 801509c:	8623      	strh	r3, [r4, #48]	; 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801509e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80150a2:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80150a6:	4293      	cmp	r3, r2
 80150a8:	bf28      	it	cs
 80150aa:	4613      	movcs	r3, r2
            pcb->ssthresh = eff_wnd >> 1;
 80150ac:	085b      	lsrs	r3, r3, #1
 80150ae:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80150b2:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 80150b4:	004a      	lsls	r2, r1, #1
 80150b6:	b292      	uxth	r2, r2
 80150b8:	4293      	cmp	r3, r2
 80150ba:	d201      	bcs.n	80150c0 <tcp_slowtmr+0x128>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80150bc:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
            pcb->cwnd = pcb->mss;
 80150c0:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
            pcb->bytes_acked = 0;
 80150c4:	2300      	movs	r3, #0
 80150c6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 80150ca:	4620      	mov	r0, r4
 80150cc:	f003 f888 	bl	80181e0 <tcp_rexmit_rto_commit>
 80150d0:	e003      	b.n	80150da <tcp_slowtmr+0x142>
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80150d2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80150d6:	e7de      	b.n	8015096 <tcp_slowtmr+0xfe>
      ++pcb_remove;
 80150d8:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 80150da:	7d22      	ldrb	r2, [r4, #20]
 80150dc:	2a06      	cmp	r2, #6
 80150de:	d042      	beq.n	8015166 <tcp_slowtmr+0x1ce>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80150e0:	7a63      	ldrb	r3, [r4, #9]
 80150e2:	f013 0708 	ands.w	r7, r3, #8
 80150e6:	d004      	beq.n	80150f2 <tcp_slowtmr+0x15a>
 80150e8:	2a04      	cmp	r2, #4
 80150ea:	d049      	beq.n	8015180 <tcp_slowtmr+0x1e8>
        ((pcb->state == ESTABLISHED) ||
 80150ec:	2a07      	cmp	r2, #7
 80150ee:	d047      	beq.n	8015180 <tcp_slowtmr+0x1e8>
    pcb_reset = 0;
 80150f0:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 80150f2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80150f4:	b153      	cbz	r3, 801510c <tcp_slowtmr+0x174>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80150f6:	6a23      	ldr	r3, [r4, #32]
 80150f8:	4a55      	ldr	r2, [pc, #340]	; (8015250 <tcp_slowtmr+0x2b8>)
 80150fa:	6812      	ldr	r2, [r2, #0]
 80150fc:	1ad2      	subs	r2, r2, r3
 80150fe:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8015102:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8015106:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 801510a:	d267      	bcs.n	80151dc <tcp_slowtmr+0x244>
    if (pcb->state == SYN_RCVD) {
 801510c:	7d23      	ldrb	r3, [r4, #20]
 801510e:	2b03      	cmp	r3, #3
 8015110:	d068      	beq.n	80151e4 <tcp_slowtmr+0x24c>
    if (pcb->state == LAST_ACK) {
 8015112:	2b09      	cmp	r3, #9
 8015114:	d06f      	beq.n	80151f6 <tcp_slowtmr+0x25e>
    if (pcb_remove) {
 8015116:	2d00      	cmp	r5, #0
 8015118:	d176      	bne.n	8015208 <tcp_slowtmr+0x270>
      pcb = pcb->next;
 801511a:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 801511c:	7f23      	ldrb	r3, [r4, #28]
 801511e:	3301      	adds	r3, #1
 8015120:	b2db      	uxtb	r3, r3
 8015122:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8015124:	7f62      	ldrb	r2, [r4, #29]
 8015126:	4293      	cmp	r3, r2
 8015128:	f0c0 80d8 	bcc.w	80152dc <tcp_slowtmr+0x344>
        prev->polltmr = 0;
 801512c:	2300      	movs	r3, #0
 801512e:	7723      	strb	r3, [r4, #28]
        tcp_active_pcbs_changed = 0;
 8015130:	4a51      	ldr	r2, [pc, #324]	; (8015278 <tcp_slowtmr+0x2e0>)
 8015132:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 8015134:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8015138:	2b00      	cmp	r3, #0
 801513a:	f000 80c7 	beq.w	80152cc <tcp_slowtmr+0x334>
 801513e:	4621      	mov	r1, r4
 8015140:	6920      	ldr	r0, [r4, #16]
 8015142:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8015144:	4b4c      	ldr	r3, [pc, #304]	; (8015278 <tcp_slowtmr+0x2e0>)
 8015146:	781b      	ldrb	r3, [r3, #0]
 8015148:	2b00      	cmp	r3, #0
 801514a:	f47f af30 	bne.w	8014fae <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 801514e:	2800      	cmp	r0, #0
 8015150:	f000 80be 	beq.w	80152d0 <tcp_slowtmr+0x338>
      prev = pcb;
 8015154:	4626      	mov	r6, r4
      pcb = pcb->next;
 8015156:	462c      	mov	r4, r5
 8015158:	e0c2      	b.n	80152e0 <tcp_slowtmr+0x348>
          ++pcb_remove; /* max probes reached */
 801515a:	2501      	movs	r5, #1
 801515c:	e7bd      	b.n	80150da <tcp_slowtmr+0x142>
    pcb_remove = 0;
 801515e:	2500      	movs	r5, #0
 8015160:	e7bb      	b.n	80150da <tcp_slowtmr+0x142>
 8015162:	2500      	movs	r5, #0
 8015164:	e7b9      	b.n	80150da <tcp_slowtmr+0x142>
      if (pcb->flags & TF_RXCLOSED) {
 8015166:	8b63      	ldrh	r3, [r4, #26]
 8015168:	f013 0f10 	tst.w	r3, #16
 801516c:	d0b8      	beq.n	80150e0 <tcp_slowtmr+0x148>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801516e:	6a21      	ldr	r1, [r4, #32]
 8015170:	4b37      	ldr	r3, [pc, #220]	; (8015250 <tcp_slowtmr+0x2b8>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	1a5b      	subs	r3, r3, r1
 8015176:	2b28      	cmp	r3, #40	; 0x28
 8015178:	d9b2      	bls.n	80150e0 <tcp_slowtmr+0x148>
          ++pcb_remove;
 801517a:	3501      	adds	r5, #1
 801517c:	b2ed      	uxtb	r5, r5
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in FIN-WAIT-2\n"));
 801517e:	e7af      	b.n	80150e0 <tcp_slowtmr+0x148>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015180:	4b33      	ldr	r3, [pc, #204]	; (8015250 <tcp_slowtmr+0x2b8>)
 8015182:	681a      	ldr	r2, [r3, #0]
 8015184:	6a23      	ldr	r3, [r4, #32]
 8015186:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8015188:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 801518c:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 8015190:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8015194:	4839      	ldr	r0, [pc, #228]	; (801527c <tcp_slowtmr+0x2e4>)
 8015196:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801519a:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 801519e:	d903      	bls.n	80151a8 <tcp_slowtmr+0x210>
        ++pcb_remove;
 80151a0:	3501      	adds	r5, #1
 80151a2:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 80151a4:	2701      	movs	r7, #1
 80151a6:	e7a4      	b.n	80150f2 <tcp_slowtmr+0x15a>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80151a8:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 80151ac:	4834      	ldr	r0, [pc, #208]	; (8015280 <tcp_slowtmr+0x2e8>)
 80151ae:	fb00 1303 	mla	r3, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 80151b2:	4932      	ldr	r1, [pc, #200]	; (801527c <tcp_slowtmr+0x2e4>)
 80151b4:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80151b8:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 80151bc:	d801      	bhi.n	80151c2 <tcp_slowtmr+0x22a>
    pcb_reset = 0;
 80151be:	2700      	movs	r7, #0
 80151c0:	e797      	b.n	80150f2 <tcp_slowtmr+0x15a>
        err = tcp_keepalive(pcb);
 80151c2:	4620      	mov	r0, r4
 80151c4:	f003 f842 	bl	801824c <tcp_keepalive>
        if (err == ERR_OK) {
 80151c8:	b930      	cbnz	r0, 80151d8 <tcp_slowtmr+0x240>
          pcb->keep_cnt_sent++;
 80151ca:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 80151ce:	3301      	adds	r3, #1
 80151d0:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 80151d4:	2700      	movs	r7, #0
 80151d6:	e78c      	b.n	80150f2 <tcp_slowtmr+0x15a>
 80151d8:	2700      	movs	r7, #0
 80151da:	e78a      	b.n	80150f2 <tcp_slowtmr+0x15a>
      tcp_free_ooseq(pcb);
 80151dc:	4620      	mov	r0, r4
 80151de:	f7ff fafb 	bl	80147d8 <tcp_free_ooseq>
 80151e2:	e793      	b.n	801510c <tcp_slowtmr+0x174>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80151e4:	6a21      	ldr	r1, [r4, #32]
 80151e6:	4a1a      	ldr	r2, [pc, #104]	; (8015250 <tcp_slowtmr+0x2b8>)
 80151e8:	6812      	ldr	r2, [r2, #0]
 80151ea:	1a52      	subs	r2, r2, r1
 80151ec:	2a28      	cmp	r2, #40	; 0x28
 80151ee:	d990      	bls.n	8015112 <tcp_slowtmr+0x17a>
        ++pcb_remove;
 80151f0:	3501      	adds	r5, #1
 80151f2:	b2ed      	uxtb	r5, r5
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
 80151f4:	e78d      	b.n	8015112 <tcp_slowtmr+0x17a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80151f6:	6a22      	ldr	r2, [r4, #32]
 80151f8:	4b15      	ldr	r3, [pc, #84]	; (8015250 <tcp_slowtmr+0x2b8>)
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	1a9b      	subs	r3, r3, r2
 80151fe:	2bf0      	cmp	r3, #240	; 0xf0
 8015200:	d989      	bls.n	8015116 <tcp_slowtmr+0x17e>
        ++pcb_remove;
 8015202:	3501      	adds	r5, #1
 8015204:	b2ed      	uxtb	r5, r5
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
 8015206:	e786      	b.n	8015116 <tcp_slowtmr+0x17e>
      tcp_err_fn err_fn = pcb->errf;
 8015208:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 801520c:	4620      	mov	r0, r4
 801520e:	f7ff faed 	bl	80147ec <tcp_pcb_purge>
      if (prev != NULL) {
 8015212:	2e00      	cmp	r6, #0
 8015214:	d03e      	beq.n	8015294 <tcp_slowtmr+0x2fc>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8015216:	4b10      	ldr	r3, [pc, #64]	; (8015258 <tcp_slowtmr+0x2c0>)
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	429c      	cmp	r4, r3
 801521c:	d032      	beq.n	8015284 <tcp_slowtmr+0x2ec>
        prev->next = pcb->next;
 801521e:	68e3      	ldr	r3, [r4, #12]
 8015220:	60f3      	str	r3, [r6, #12]
      if (pcb_reset) {
 8015222:	2f00      	cmp	r7, #0
 8015224:	d145      	bne.n	80152b2 <tcp_slowtmr+0x31a>
      err_arg = pcb->callback_arg;
 8015226:	f8d4 8010 	ldr.w	r8, [r4, #16]
      pcb = pcb->next;
 801522a:	68e7      	ldr	r7, [r4, #12]
      tcp_free(pcb2);
 801522c:	4620      	mov	r0, r4
 801522e:	f7ff f85f 	bl	80142f0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8015232:	4b11      	ldr	r3, [pc, #68]	; (8015278 <tcp_slowtmr+0x2e0>)
 8015234:	2200      	movs	r2, #0
 8015236:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015238:	b11d      	cbz	r5, 8015242 <tcp_slowtmr+0x2aa>
 801523a:	f06f 010c 	mvn.w	r1, #12
 801523e:	4640      	mov	r0, r8
 8015240:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 8015242:	4b0d      	ldr	r3, [pc, #52]	; (8015278 <tcp_slowtmr+0x2e0>)
 8015244:	781b      	ldrb	r3, [r3, #0]
 8015246:	2b00      	cmp	r3, #0
 8015248:	f47f aeb1 	bne.w	8014fae <tcp_slowtmr+0x16>
      pcb = pcb->next;
 801524c:	463c      	mov	r4, r7
 801524e:	e047      	b.n	80152e0 <tcp_slowtmr+0x348>
 8015250:	20007220 	.word	0x20007220
 8015254:	200009da 	.word	0x200009da
 8015258:	2000721c 	.word	0x2000721c
 801525c:	0801e58c 	.word	0x0801e58c
 8015260:	0801ea7c 	.word	0x0801ea7c
 8015264:	0801cca4 	.word	0x0801cca4
 8015268:	0801eaa8 	.word	0x0801eaa8
 801526c:	0801ead4 	.word	0x0801ead4
 8015270:	0801eb38 	.word	0x0801eb38
 8015274:	0801ec48 	.word	0x0801ec48
 8015278:	20007218 	.word	0x20007218
 801527c:	10624dd3 	.word	0x10624dd3
 8015280:	000124f8 	.word	0x000124f8
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8015284:	4b60      	ldr	r3, [pc, #384]	; (8015408 <tcp_slowtmr+0x470>)
 8015286:	f240 526d 	movw	r2, #1389	; 0x56d
 801528a:	4960      	ldr	r1, [pc, #384]	; (801540c <tcp_slowtmr+0x474>)
 801528c:	4860      	ldr	r0, [pc, #384]	; (8015410 <tcp_slowtmr+0x478>)
 801528e:	f006 fbf7 	bl	801ba80 <iprintf>
 8015292:	e7c4      	b.n	801521e <tcp_slowtmr+0x286>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8015294:	4b5f      	ldr	r3, [pc, #380]	; (8015414 <tcp_slowtmr+0x47c>)
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	429c      	cmp	r4, r3
 801529a:	d006      	beq.n	80152aa <tcp_slowtmr+0x312>
 801529c:	4b5a      	ldr	r3, [pc, #360]	; (8015408 <tcp_slowtmr+0x470>)
 801529e:	f240 5271 	movw	r2, #1393	; 0x571
 80152a2:	495d      	ldr	r1, [pc, #372]	; (8015418 <tcp_slowtmr+0x480>)
 80152a4:	485a      	ldr	r0, [pc, #360]	; (8015410 <tcp_slowtmr+0x478>)
 80152a6:	f006 fbeb 	bl	801ba80 <iprintf>
        tcp_active_pcbs = pcb->next;
 80152aa:	68e2      	ldr	r2, [r4, #12]
 80152ac:	4b59      	ldr	r3, [pc, #356]	; (8015414 <tcp_slowtmr+0x47c>)
 80152ae:	601a      	str	r2, [r3, #0]
 80152b0:	e7b7      	b.n	8015222 <tcp_slowtmr+0x28a>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80152b2:	1d23      	adds	r3, r4, #4
 80152b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80152b6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80152b8:	8b20      	ldrh	r0, [r4, #24]
 80152ba:	9002      	str	r0, [sp, #8]
 80152bc:	8ae0      	ldrh	r0, [r4, #22]
 80152be:	9001      	str	r0, [sp, #4]
 80152c0:	9300      	str	r3, [sp, #0]
 80152c2:	4623      	mov	r3, r4
 80152c4:	4620      	mov	r0, r4
 80152c6:	f002 fdb1 	bl	8017e2c <tcp_rst>
 80152ca:	e7ac      	b.n	8015226 <tcp_slowtmr+0x28e>
        TCP_EVENT_POLL(prev, err);
 80152cc:	2000      	movs	r0, #0
 80152ce:	e739      	b.n	8015144 <tcp_slowtmr+0x1ac>
          tcp_output(prev);
 80152d0:	4620      	mov	r0, r4
 80152d2:	f002 fe2d 	bl	8017f30 <tcp_output>
      prev = pcb;
 80152d6:	4626      	mov	r6, r4
      pcb = pcb->next;
 80152d8:	462c      	mov	r4, r5
 80152da:	e001      	b.n	80152e0 <tcp_slowtmr+0x348>
      prev = pcb;
 80152dc:	4626      	mov	r6, r4
      pcb = pcb->next;
 80152de:	462c      	mov	r4, r5
  while (pcb != NULL) {
 80152e0:	2c00      	cmp	r4, #0
 80152e2:	d050      	beq.n	8015386 <tcp_slowtmr+0x3ee>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80152e4:	7d23      	ldrb	r3, [r4, #20]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	f43f ae65 	beq.w	8014fb6 <tcp_slowtmr+0x1e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80152ec:	7d23      	ldrb	r3, [r4, #20]
 80152ee:	2b01      	cmp	r3, #1
 80152f0:	f43f ae69 	beq.w	8014fc6 <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80152f4:	7d23      	ldrb	r3, [r4, #20]
 80152f6:	2b0a      	cmp	r3, #10
 80152f8:	f43f ae6d 	beq.w	8014fd6 <tcp_slowtmr+0x3e>
    if (pcb->last_timer == tcp_timer_ctr) {
 80152fc:	7fa2      	ldrb	r2, [r4, #30]
 80152fe:	4b47      	ldr	r3, [pc, #284]	; (801541c <tcp_slowtmr+0x484>)
 8015300:	781b      	ldrb	r3, [r3, #0]
 8015302:	429a      	cmp	r2, r3
 8015304:	f43f ae6f 	beq.w	8014fe6 <tcp_slowtmr+0x4e>
    pcb->last_timer = tcp_timer_ctr;
 8015308:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801530a:	7d23      	ldrb	r3, [r4, #20]
 801530c:	2b02      	cmp	r3, #2
 801530e:	f43f ae6d 	beq.w	8014fec <tcp_slowtmr+0x54>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8015312:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8015316:	2b0b      	cmp	r3, #11
 8015318:	f63f aede 	bhi.w	80150d8 <tcp_slowtmr+0x140>
      if (pcb->persist_backoff > 0) {
 801531c:	f894 5099 	ldrb.w	r5, [r4, #153]	; 0x99
 8015320:	2d00      	cmp	r5, #0
 8015322:	f43f ae8a 	beq.w	801503a <tcp_slowtmr+0xa2>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8015326:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015328:	b133      	cbz	r3, 8015338 <tcp_slowtmr+0x3a0>
 801532a:	4b37      	ldr	r3, [pc, #220]	; (8015408 <tcp_slowtmr+0x470>)
 801532c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8015330:	493b      	ldr	r1, [pc, #236]	; (8015420 <tcp_slowtmr+0x488>)
 8015332:	4837      	ldr	r0, [pc, #220]	; (8015410 <tcp_slowtmr+0x478>)
 8015334:	f006 fba4 	bl	801ba80 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015338:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801533a:	2b00      	cmp	r3, #0
 801533c:	f43f ae5d 	beq.w	8014ffa <tcp_slowtmr+0x62>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8015340:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8015344:	2b0b      	cmp	r3, #11
 8015346:	f63f af08 	bhi.w	801515a <tcp_slowtmr+0x1c2>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801534a:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801534e:	3b01      	subs	r3, #1
 8015350:	4a34      	ldr	r2, [pc, #208]	; (8015424 <tcp_slowtmr+0x48c>)
 8015352:	5cd2      	ldrb	r2, [r2, r3]
          if (pcb->persist_cnt < backoff_cnt) {
 8015354:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 8015358:	4293      	cmp	r3, r2
 801535a:	d202      	bcs.n	8015362 <tcp_slowtmr+0x3ca>
            pcb->persist_cnt++;
 801535c:	3301      	adds	r3, #1
 801535e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8015362:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 8015366:	4293      	cmp	r3, r2
 8015368:	f4ff aef9 	bcc.w	801515e <tcp_slowtmr+0x1c6>
            if (pcb->snd_wnd == 0) {
 801536c:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8015370:	2900      	cmp	r1, #0
 8015372:	f47f ae4a 	bne.w	801500a <tcp_slowtmr+0x72>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8015376:	4620      	mov	r0, r4
 8015378:	f002 ff96 	bl	80182a8 <tcp_zero_window_probe>
 801537c:	2800      	cmp	r0, #0
 801537e:	f43f ae48 	beq.w	8015012 <tcp_slowtmr+0x7a>
    pcb_remove = 0;
 8015382:	2500      	movs	r5, #0
 8015384:	e6a9      	b.n	80150da <tcp_slowtmr+0x142>
  pcb = tcp_tw_pcbs;
 8015386:	4b28      	ldr	r3, [pc, #160]	; (8015428 <tcp_slowtmr+0x490>)
 8015388:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 801538a:	e00e      	b.n	80153aa <tcp_slowtmr+0x412>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801538c:	4b1e      	ldr	r3, [pc, #120]	; (8015408 <tcp_slowtmr+0x470>)
 801538e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8015392:	4926      	ldr	r1, [pc, #152]	; (801542c <tcp_slowtmr+0x494>)
 8015394:	481e      	ldr	r0, [pc, #120]	; (8015410 <tcp_slowtmr+0x478>)
 8015396:	f006 fb73 	bl	801ba80 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801539a:	6a2a      	ldr	r2, [r5, #32]
 801539c:	4b24      	ldr	r3, [pc, #144]	; (8015430 <tcp_slowtmr+0x498>)
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	1a9b      	subs	r3, r3, r2
 80153a2:	2bf0      	cmp	r3, #240	; 0xf0
 80153a4:	d806      	bhi.n	80153b4 <tcp_slowtmr+0x41c>
      prev = pcb;
 80153a6:	462c      	mov	r4, r5
      pcb = pcb->next;
 80153a8:	68ed      	ldr	r5, [r5, #12]
  while (pcb != NULL) {
 80153aa:	b355      	cbz	r5, 8015402 <tcp_slowtmr+0x46a>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80153ac:	7d2b      	ldrb	r3, [r5, #20]
 80153ae:	2b0a      	cmp	r3, #10
 80153b0:	d0f3      	beq.n	801539a <tcp_slowtmr+0x402>
 80153b2:	e7eb      	b.n	801538c <tcp_slowtmr+0x3f4>
      tcp_pcb_purge(pcb);
 80153b4:	4628      	mov	r0, r5
 80153b6:	f7ff fa19 	bl	80147ec <tcp_pcb_purge>
      if (prev != NULL) {
 80153ba:	b19c      	cbz	r4, 80153e4 <tcp_slowtmr+0x44c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80153bc:	4b1a      	ldr	r3, [pc, #104]	; (8015428 <tcp_slowtmr+0x490>)
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	429d      	cmp	r5, r3
 80153c2:	d007      	beq.n	80153d4 <tcp_slowtmr+0x43c>
        prev->next = pcb->next;
 80153c4:	68eb      	ldr	r3, [r5, #12]
 80153c6:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 80153c8:	68ee      	ldr	r6, [r5, #12]
      tcp_free(pcb2);
 80153ca:	4628      	mov	r0, r5
 80153cc:	f7fe ff90 	bl	80142f0 <tcp_free>
      pcb = pcb->next;
 80153d0:	4635      	mov	r5, r6
 80153d2:	e7ea      	b.n	80153aa <tcp_slowtmr+0x412>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80153d4:	4b0c      	ldr	r3, [pc, #48]	; (8015408 <tcp_slowtmr+0x470>)
 80153d6:	f240 52af 	movw	r2, #1455	; 0x5af
 80153da:	4916      	ldr	r1, [pc, #88]	; (8015434 <tcp_slowtmr+0x49c>)
 80153dc:	480c      	ldr	r0, [pc, #48]	; (8015410 <tcp_slowtmr+0x478>)
 80153de:	f006 fb4f 	bl	801ba80 <iprintf>
 80153e2:	e7ef      	b.n	80153c4 <tcp_slowtmr+0x42c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80153e4:	4b10      	ldr	r3, [pc, #64]	; (8015428 <tcp_slowtmr+0x490>)
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	429d      	cmp	r5, r3
 80153ea:	d006      	beq.n	80153fa <tcp_slowtmr+0x462>
 80153ec:	4b06      	ldr	r3, [pc, #24]	; (8015408 <tcp_slowtmr+0x470>)
 80153ee:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80153f2:	4911      	ldr	r1, [pc, #68]	; (8015438 <tcp_slowtmr+0x4a0>)
 80153f4:	4806      	ldr	r0, [pc, #24]	; (8015410 <tcp_slowtmr+0x478>)
 80153f6:	f006 fb43 	bl	801ba80 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80153fa:	68ea      	ldr	r2, [r5, #12]
 80153fc:	4b0a      	ldr	r3, [pc, #40]	; (8015428 <tcp_slowtmr+0x490>)
 80153fe:	601a      	str	r2, [r3, #0]
 8015400:	e7e2      	b.n	80153c8 <tcp_slowtmr+0x430>
}
 8015402:	b004      	add	sp, #16
 8015404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015408:	0801e58c 	.word	0x0801e58c
 801540c:	0801eb70 	.word	0x0801eb70
 8015410:	0801cca4 	.word	0x0801cca4
 8015414:	2000721c 	.word	0x2000721c
 8015418:	0801eb9c 	.word	0x0801eb9c
 801541c:	200009da 	.word	0x200009da
 8015420:	0801eb04 	.word	0x0801eb04
 8015424:	0801ec68 	.word	0x0801ec68
 8015428:	2000722c 	.word	0x2000722c
 801542c:	0801ebc8 	.word	0x0801ebc8
 8015430:	20007220 	.word	0x20007220
 8015434:	0801ebf8 	.word	0x0801ebf8
 8015438:	0801ec20 	.word	0x0801ec20

0801543c <tcp_tmr>:
{
 801543c:	b508      	push	{r3, lr}
  tcp_fasttmr();
 801543e:	f7ff fd6b 	bl	8014f18 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8015442:	4a06      	ldr	r2, [pc, #24]	; (801545c <tcp_tmr+0x20>)
 8015444:	7813      	ldrb	r3, [r2, #0]
 8015446:	3301      	adds	r3, #1
 8015448:	b2db      	uxtb	r3, r3
 801544a:	7013      	strb	r3, [r2, #0]
 801544c:	f013 0f01 	tst.w	r3, #1
 8015450:	d100      	bne.n	8015454 <tcp_tmr+0x18>
}
 8015452:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 8015454:	f7ff fda0 	bl	8014f98 <tcp_slowtmr>
}
 8015458:	e7fb      	b.n	8015452 <tcp_tmr+0x16>
 801545a:	bf00      	nop
 801545c:	200009d9 	.word	0x200009d9

08015460 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 8015460:	4a0a      	ldr	r2, [pc, #40]	; (801548c <tcp_get_next_optbyte+0x2c>)
 8015462:	8813      	ldrh	r3, [r2, #0]
 8015464:	1c59      	adds	r1, r3, #1
 8015466:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015468:	4a09      	ldr	r2, [pc, #36]	; (8015490 <tcp_get_next_optbyte+0x30>)
 801546a:	6811      	ldr	r1, [r2, #0]
 801546c:	b119      	cbz	r1, 8015476 <tcp_get_next_optbyte+0x16>
 801546e:	4a09      	ldr	r2, [pc, #36]	; (8015494 <tcp_get_next_optbyte+0x34>)
 8015470:	8812      	ldrh	r2, [r2, #0]
 8015472:	4293      	cmp	r3, r2
 8015474:	d204      	bcs.n	8015480 <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015476:	4a08      	ldr	r2, [pc, #32]	; (8015498 <tcp_get_next_optbyte+0x38>)
 8015478:	6812      	ldr	r2, [r2, #0]
    return opts[optidx];
 801547a:	4413      	add	r3, r2
 801547c:	7d18      	ldrb	r0, [r3, #20]
 801547e:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015480:	b2db      	uxtb	r3, r3
 8015482:	b2d2      	uxtb	r2, r2
 8015484:	1a9b      	subs	r3, r3, r2
 8015486:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 8015488:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 801548a:	4770      	bx	lr
 801548c:	20000a08 	.word	0x20000a08
 8015490:	20000a14 	.word	0x20000a14
 8015494:	20000a10 	.word	0x20000a10
 8015498:	20000a0c 	.word	0x20000a0c

0801549c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801549c:	b538      	push	{r3, r4, r5, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801549e:	4604      	mov	r4, r0
 80154a0:	b1e8      	cbz	r0, 80154de <tcp_parseopt+0x42>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80154a2:	4b22      	ldr	r3, [pc, #136]	; (801552c <tcp_parseopt+0x90>)
 80154a4:	881b      	ldrh	r3, [r3, #0]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d03e      	beq.n	8015528 <tcp_parseopt+0x8c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80154aa:	4b21      	ldr	r3, [pc, #132]	; (8015530 <tcp_parseopt+0x94>)
 80154ac:	2200      	movs	r2, #0
 80154ae:	801a      	strh	r2, [r3, #0]
 80154b0:	4b1f      	ldr	r3, [pc, #124]	; (8015530 <tcp_parseopt+0x94>)
 80154b2:	881a      	ldrh	r2, [r3, #0]
 80154b4:	4b1d      	ldr	r3, [pc, #116]	; (801552c <tcp_parseopt+0x90>)
 80154b6:	881b      	ldrh	r3, [r3, #0]
 80154b8:	429a      	cmp	r2, r3
 80154ba:	d235      	bcs.n	8015528 <tcp_parseopt+0x8c>
      u8_t opt = tcp_get_next_optbyte();
 80154bc:	f7ff ffd0 	bl	8015460 <tcp_get_next_optbyte>
      switch (opt) {
 80154c0:	2801      	cmp	r0, #1
 80154c2:	d0f5      	beq.n	80154b0 <tcp_parseopt+0x14>
 80154c4:	2802      	cmp	r0, #2
 80154c6:	d012      	beq.n	80154ee <tcp_parseopt+0x52>
 80154c8:	b370      	cbz	r0, 8015528 <tcp_parseopt+0x8c>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80154ca:	f7ff ffc9 	bl	8015460 <tcp_get_next_optbyte>
          if (data < 2) {
 80154ce:	2801      	cmp	r0, #1
 80154d0:	d92a      	bls.n	8015528 <tcp_parseopt+0x8c>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80154d2:	4b17      	ldr	r3, [pc, #92]	; (8015530 <tcp_parseopt+0x94>)
 80154d4:	881a      	ldrh	r2, [r3, #0]
 80154d6:	4410      	add	r0, r2
 80154d8:	3802      	subs	r0, #2
 80154da:	8018      	strh	r0, [r3, #0]
 80154dc:	e7e8      	b.n	80154b0 <tcp_parseopt+0x14>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80154de:	4b15      	ldr	r3, [pc, #84]	; (8015534 <tcp_parseopt+0x98>)
 80154e0:	f240 727d 	movw	r2, #1917	; 0x77d
 80154e4:	4914      	ldr	r1, [pc, #80]	; (8015538 <tcp_parseopt+0x9c>)
 80154e6:	4815      	ldr	r0, [pc, #84]	; (801553c <tcp_parseopt+0xa0>)
 80154e8:	f006 faca 	bl	801ba80 <iprintf>
 80154ec:	e7d9      	b.n	80154a2 <tcp_parseopt+0x6>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80154ee:	f7ff ffb7 	bl	8015460 <tcp_get_next_optbyte>
 80154f2:	2804      	cmp	r0, #4
 80154f4:	d118      	bne.n	8015528 <tcp_parseopt+0x8c>
 80154f6:	4b0e      	ldr	r3, [pc, #56]	; (8015530 <tcp_parseopt+0x94>)
 80154f8:	881b      	ldrh	r3, [r3, #0]
 80154fa:	3301      	adds	r3, #1
 80154fc:	4a0b      	ldr	r2, [pc, #44]	; (801552c <tcp_parseopt+0x90>)
 80154fe:	8812      	ldrh	r2, [r2, #0]
 8015500:	4293      	cmp	r3, r2
 8015502:	da11      	bge.n	8015528 <tcp_parseopt+0x8c>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015504:	f7ff ffac 	bl	8015460 <tcp_get_next_optbyte>
 8015508:	b285      	uxth	r5, r0
 801550a:	022d      	lsls	r5, r5, #8
 801550c:	b2ad      	uxth	r5, r5
          mss |= tcp_get_next_optbyte();
 801550e:	f7ff ffa7 	bl	8015460 <tcp_get_next_optbyte>
 8015512:	b280      	uxth	r0, r0
 8015514:	4305      	orrs	r5, r0
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015516:	1e6b      	subs	r3, r5, #1
 8015518:	b29b      	uxth	r3, r3
 801551a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801551e:	d301      	bcc.n	8015524 <tcp_parseopt+0x88>
 8015520:	f44f 7506 	mov.w	r5, #536	; 0x218
 8015524:	8665      	strh	r5, [r4, #50]	; 0x32
          break;
 8015526:	e7c3      	b.n	80154b0 <tcp_parseopt+0x14>
      }
    }
  }
}
 8015528:	bd38      	pop	{r3, r4, r5, pc}
 801552a:	bf00      	nop
 801552c:	20000a18 	.word	0x20000a18
 8015530:	20000a08 	.word	0x20000a08
 8015534:	0801ec70 	.word	0x0801ec70
 8015538:	0801eca4 	.word	0x0801eca4
 801553c:	0801cca4 	.word	0x0801cca4

08015540 <tcp_input_delayed_close>:
{
 8015540:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8015542:	4604      	mov	r4, r0
 8015544:	b130      	cbz	r0, 8015554 <tcp_input_delayed_close+0x14>
  if (recv_flags & TF_CLOSED) {
 8015546:	4b11      	ldr	r3, [pc, #68]	; (801558c <tcp_input_delayed_close+0x4c>)
 8015548:	781b      	ldrb	r3, [r3, #0]
 801554a:	f013 0f10 	tst.w	r3, #16
 801554e:	d109      	bne.n	8015564 <tcp_input_delayed_close+0x24>
  return 0;
 8015550:	2000      	movs	r0, #0
}
 8015552:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8015554:	4b0e      	ldr	r3, [pc, #56]	; (8015590 <tcp_input_delayed_close+0x50>)
 8015556:	f240 225a 	movw	r2, #602	; 0x25a
 801555a:	490e      	ldr	r1, [pc, #56]	; (8015594 <tcp_input_delayed_close+0x54>)
 801555c:	480e      	ldr	r0, [pc, #56]	; (8015598 <tcp_input_delayed_close+0x58>)
 801555e:	f006 fa8f 	bl	801ba80 <iprintf>
 8015562:	e7f0      	b.n	8015546 <tcp_input_delayed_close+0x6>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8015564:	8b63      	ldrh	r3, [r4, #26]
 8015566:	f013 0f10 	tst.w	r3, #16
 801556a:	d106      	bne.n	801557a <tcp_input_delayed_close+0x3a>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801556c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8015570:	b11b      	cbz	r3, 801557a <tcp_input_delayed_close+0x3a>
 8015572:	f06f 010e 	mvn.w	r1, #14
 8015576:	6920      	ldr	r0, [r4, #16]
 8015578:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801557a:	4621      	mov	r1, r4
 801557c:	4807      	ldr	r0, [pc, #28]	; (801559c <tcp_input_delayed_close+0x5c>)
 801557e:	f7ff f967 	bl	8014850 <tcp_pcb_remove>
    tcp_free(pcb);
 8015582:	4620      	mov	r0, r4
 8015584:	f7fe feb4 	bl	80142f0 <tcp_free>
    return 1;
 8015588:	2001      	movs	r0, #1
 801558a:	e7e2      	b.n	8015552 <tcp_input_delayed_close+0x12>
 801558c:	20000a00 	.word	0x20000a00
 8015590:	0801ec70 	.word	0x0801ec70
 8015594:	0801ecc0 	.word	0x0801ecc0
 8015598:	0801cca4 	.word	0x0801cca4
 801559c:	2000721c 	.word	0x2000721c

080155a0 <tcp_timewait_input>:
  if (flags & TCP_RST) {
 80155a0:	4b23      	ldr	r3, [pc, #140]	; (8015630 <tcp_timewait_input+0x90>)
 80155a2:	781b      	ldrb	r3, [r3, #0]
 80155a4:	f013 0f04 	tst.w	r3, #4
 80155a8:	d141      	bne.n	801562e <tcp_timewait_input+0x8e>
{
 80155aa:	b530      	push	{r4, r5, lr}
 80155ac:	b085      	sub	sp, #20
 80155ae:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80155b0:	b1a0      	cbz	r0, 80155dc <tcp_timewait_input+0x3c>
  if (flags & TCP_SYN) {
 80155b2:	4b1f      	ldr	r3, [pc, #124]	; (8015630 <tcp_timewait_input+0x90>)
 80155b4:	781b      	ldrb	r3, [r3, #0]
 80155b6:	f013 0f02 	tst.w	r3, #2
 80155ba:	d029      	beq.n	8015610 <tcp_timewait_input+0x70>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80155bc:	4b1d      	ldr	r3, [pc, #116]	; (8015634 <tcp_timewait_input+0x94>)
 80155be:	681a      	ldr	r2, [r3, #0]
 80155c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80155c2:	1ad1      	subs	r1, r2, r3
 80155c4:	2900      	cmp	r1, #0
 80155c6:	db04      	blt.n	80155d2 <tcp_timewait_input+0x32>
 80155c8:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80155ca:	440b      	add	r3, r1
 80155cc:	1ad3      	subs	r3, r2, r3
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	dd0c      	ble.n	80155ec <tcp_timewait_input+0x4c>
  if ((tcplen > 0)) {
 80155d2:	4b19      	ldr	r3, [pc, #100]	; (8015638 <tcp_timewait_input+0x98>)
 80155d4:	881b      	ldrh	r3, [r3, #0]
 80155d6:	bb13      	cbnz	r3, 801561e <tcp_timewait_input+0x7e>
}
 80155d8:	b005      	add	sp, #20
 80155da:	bd30      	pop	{r4, r5, pc}
  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80155dc:	4b17      	ldr	r3, [pc, #92]	; (801563c <tcp_timewait_input+0x9c>)
 80155de:	f240 22ee 	movw	r2, #750	; 0x2ee
 80155e2:	4917      	ldr	r1, [pc, #92]	; (8015640 <tcp_timewait_input+0xa0>)
 80155e4:	4817      	ldr	r0, [pc, #92]	; (8015644 <tcp_timewait_input+0xa4>)
 80155e6:	f006 fa4b 	bl	801ba80 <iprintf>
 80155ea:	e7e2      	b.n	80155b2 <tcp_timewait_input+0x12>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80155ec:	4b16      	ldr	r3, [pc, #88]	; (8015648 <tcp_timewait_input+0xa8>)
 80155ee:	6819      	ldr	r1, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80155f0:	4b16      	ldr	r3, [pc, #88]	; (801564c <tcp_timewait_input+0xac>)
 80155f2:	4811      	ldr	r0, [pc, #68]	; (8015638 <tcp_timewait_input+0x98>)
 80155f4:	8800      	ldrh	r0, [r0, #0]
 80155f6:	880d      	ldrh	r5, [r1, #0]
 80155f8:	9502      	str	r5, [sp, #8]
 80155fa:	8849      	ldrh	r1, [r1, #2]
 80155fc:	9101      	str	r1, [sp, #4]
 80155fe:	1f19      	subs	r1, r3, #4
 8015600:	9100      	str	r1, [sp, #0]
 8015602:	4402      	add	r2, r0
 8015604:	4912      	ldr	r1, [pc, #72]	; (8015650 <tcp_timewait_input+0xb0>)
 8015606:	6809      	ldr	r1, [r1, #0]
 8015608:	4620      	mov	r0, r4
 801560a:	f002 fc0f 	bl	8017e2c <tcp_rst>
      return;
 801560e:	e7e3      	b.n	80155d8 <tcp_timewait_input+0x38>
  } else if (flags & TCP_FIN) {
 8015610:	f013 0f01 	tst.w	r3, #1
 8015614:	d0dd      	beq.n	80155d2 <tcp_timewait_input+0x32>
    pcb->tmr = tcp_ticks;
 8015616:	4b0f      	ldr	r3, [pc, #60]	; (8015654 <tcp_timewait_input+0xb4>)
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	6223      	str	r3, [r4, #32]
 801561c:	e7d9      	b.n	80155d2 <tcp_timewait_input+0x32>
    tcp_ack_now(pcb);
 801561e:	8b63      	ldrh	r3, [r4, #26]
 8015620:	f043 0302 	orr.w	r3, r3, #2
 8015624:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8015626:	4620      	mov	r0, r4
 8015628:	f002 fc82 	bl	8017f30 <tcp_output>
 801562c:	e7d4      	b.n	80155d8 <tcp_timewait_input+0x38>
 801562e:	4770      	bx	lr
 8015630:	200009e0 	.word	0x200009e0
 8015634:	20000a04 	.word	0x20000a04
 8015638:	20000a1a 	.word	0x20000a1a
 801563c:	0801ec70 	.word	0x0801ec70
 8015640:	0801ece8 	.word	0x0801ece8
 8015644:	0801cca4 	.word	0x0801cca4
 8015648:	20000a0c 	.word	0x20000a0c
 801564c:	20003c7c 	.word	0x20003c7c
 8015650:	200009dc 	.word	0x200009dc
 8015654:	20007220 	.word	0x20007220

08015658 <tcp_listen_input>:
  if (flags & TCP_RST) {
 8015658:	4b47      	ldr	r3, [pc, #284]	; (8015778 <tcp_listen_input+0x120>)
 801565a:	781b      	ldrb	r3, [r3, #0]
 801565c:	f013 0f04 	tst.w	r3, #4
 8015660:	f040 8088 	bne.w	8015774 <tcp_listen_input+0x11c>
{
 8015664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015666:	b085      	sub	sp, #20
 8015668:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801566a:	b148      	cbz	r0, 8015680 <tcp_listen_input+0x28>
  if (flags & TCP_ACK) {
 801566c:	4b42      	ldr	r3, [pc, #264]	; (8015778 <tcp_listen_input+0x120>)
 801566e:	781b      	ldrb	r3, [r3, #0]
 8015670:	f013 0f10 	tst.w	r3, #16
 8015674:	d10c      	bne.n	8015690 <tcp_listen_input+0x38>
  } else if (flags & TCP_SYN) {
 8015676:	f013 0f02 	tst.w	r3, #2
 801567a:	d11d      	bne.n	80156b8 <tcp_listen_input+0x60>
}
 801567c:	b005      	add	sp, #20
 801567e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8015680:	4b3e      	ldr	r3, [pc, #248]	; (801577c <tcp_listen_input+0x124>)
 8015682:	f240 2281 	movw	r2, #641	; 0x281
 8015686:	493e      	ldr	r1, [pc, #248]	; (8015780 <tcp_listen_input+0x128>)
 8015688:	483e      	ldr	r0, [pc, #248]	; (8015784 <tcp_listen_input+0x12c>)
 801568a:	f006 f9f9 	bl	801ba80 <iprintf>
 801568e:	e7ed      	b.n	801566c <tcp_listen_input+0x14>
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015690:	4b3d      	ldr	r3, [pc, #244]	; (8015788 <tcp_listen_input+0x130>)
 8015692:	6819      	ldr	r1, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015694:	4b3d      	ldr	r3, [pc, #244]	; (801578c <tcp_listen_input+0x134>)
 8015696:	4a3e      	ldr	r2, [pc, #248]	; (8015790 <tcp_listen_input+0x138>)
 8015698:	8810      	ldrh	r0, [r2, #0]
 801569a:	4a3e      	ldr	r2, [pc, #248]	; (8015794 <tcp_listen_input+0x13c>)
 801569c:	6812      	ldr	r2, [r2, #0]
 801569e:	880d      	ldrh	r5, [r1, #0]
 80156a0:	9502      	str	r5, [sp, #8]
 80156a2:	8849      	ldrh	r1, [r1, #2]
 80156a4:	9101      	str	r1, [sp, #4]
 80156a6:	1f19      	subs	r1, r3, #4
 80156a8:	9100      	str	r1, [sp, #0]
 80156aa:	4402      	add	r2, r0
 80156ac:	493a      	ldr	r1, [pc, #232]	; (8015798 <tcp_listen_input+0x140>)
 80156ae:	6809      	ldr	r1, [r1, #0]
 80156b0:	4620      	mov	r0, r4
 80156b2:	f002 fbbb 	bl	8017e2c <tcp_rst>
 80156b6:	e7e1      	b.n	801567c <tcp_listen_input+0x24>
    npcb = tcp_alloc(pcb->prio);
 80156b8:	7d60      	ldrb	r0, [r4, #21]
 80156ba:	f7ff fa95 	bl	8014be8 <tcp_alloc>
    if (npcb == NULL) {
 80156be:	4605      	mov	r5, r0
 80156c0:	2800      	cmp	r0, #0
 80156c2:	d049      	beq.n	8015758 <tcp_listen_input+0x100>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80156c4:	4b35      	ldr	r3, [pc, #212]	; (801579c <tcp_listen_input+0x144>)
 80156c6:	695a      	ldr	r2, [r3, #20]
 80156c8:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80156ca:	691b      	ldr	r3, [r3, #16]
 80156cc:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 80156ce:	8ae3      	ldrh	r3, [r4, #22]
 80156d0:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 80156d2:	4e2d      	ldr	r6, [pc, #180]	; (8015788 <tcp_listen_input+0x130>)
 80156d4:	6833      	ldr	r3, [r6, #0]
 80156d6:	881b      	ldrh	r3, [r3, #0]
 80156d8:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 80156da:	2303      	movs	r3, #3
 80156dc:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 80156de:	4f2d      	ldr	r7, [pc, #180]	; (8015794 <tcp_listen_input+0x13c>)
 80156e0:	683b      	ldr	r3, [r7, #0]
 80156e2:	3301      	adds	r3, #1
 80156e4:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80156e6:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80156e8:	f7ff f83a 	bl	8014760 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 80156ec:	65a8      	str	r0, [r5, #88]	; 0x58
    npcb->snd_nxt = iss;
 80156ee:	6528      	str	r0, [r5, #80]	; 0x50
    npcb->lastack = iss;
 80156f0:	6468      	str	r0, [r5, #68]	; 0x44
    npcb->snd_lbb = iss;
 80156f2:	65e8      	str	r0, [r5, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	3b01      	subs	r3, #1
 80156f8:	656b      	str	r3, [r5, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80156fa:	6923      	ldr	r3, [r4, #16]
 80156fc:	612b      	str	r3, [r5, #16]
    npcb->listener = pcb;
 80156fe:	67ec      	str	r4, [r5, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8015700:	7a63      	ldrb	r3, [r4, #9]
 8015702:	f003 030c 	and.w	r3, r3, #12
 8015706:	726b      	strb	r3, [r5, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015708:	7a23      	ldrb	r3, [r4, #8]
 801570a:	722b      	strb	r3, [r5, #8]
    TCP_REG_ACTIVE(npcb);
 801570c:	4b24      	ldr	r3, [pc, #144]	; (80157a0 <tcp_listen_input+0x148>)
 801570e:	681a      	ldr	r2, [r3, #0]
 8015710:	60ea      	str	r2, [r5, #12]
 8015712:	601d      	str	r5, [r3, #0]
 8015714:	f002 feaa 	bl	801846c <tcp_timer_needed>
 8015718:	4b22      	ldr	r3, [pc, #136]	; (80157a4 <tcp_listen_input+0x14c>)
 801571a:	2201      	movs	r2, #1
 801571c:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801571e:	4628      	mov	r0, r5
 8015720:	f7ff febc 	bl	801549c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8015724:	6833      	ldr	r3, [r6, #0]
 8015726:	89db      	ldrh	r3, [r3, #14]
 8015728:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801572c:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8015730:	8e6e      	ldrh	r6, [r5, #50]	; 0x32
 8015732:	1d2c      	adds	r4, r5, #4
 8015734:	4620      	mov	r0, r4
 8015736:	f005 facd 	bl	801acd4 <ip4_route>
 801573a:	4601      	mov	r1, r0
 801573c:	4622      	mov	r2, r4
 801573e:	4630      	mov	r0, r6
 8015740:	f7ff f82a 	bl	8014798 <tcp_eff_send_mss_netif>
 8015744:	8668      	strh	r0, [r5, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8015746:	2112      	movs	r1, #18
 8015748:	4628      	mov	r0, r5
 801574a:	f002 f9bd 	bl	8017ac8 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 801574e:	b960      	cbnz	r0, 801576a <tcp_listen_input+0x112>
    tcp_output(npcb);
 8015750:	4628      	mov	r0, r5
 8015752:	f002 fbed 	bl	8017f30 <tcp_output>
 8015756:	e791      	b.n	801567c <tcp_listen_input+0x24>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015758:	69a3      	ldr	r3, [r4, #24]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d08e      	beq.n	801567c <tcp_listen_input+0x24>
 801575e:	f04f 32ff 	mov.w	r2, #4294967295
 8015762:	2100      	movs	r1, #0
 8015764:	6920      	ldr	r0, [r4, #16]
 8015766:	4798      	blx	r3
      return;
 8015768:	e788      	b.n	801567c <tcp_listen_input+0x24>
      tcp_abandon(npcb, 0);
 801576a:	2100      	movs	r1, #0
 801576c:	4628      	mov	r0, r5
 801576e:	f7ff f8d7 	bl	8014920 <tcp_abandon>
      return;
 8015772:	e783      	b.n	801567c <tcp_listen_input+0x24>
 8015774:	4770      	bx	lr
 8015776:	bf00      	nop
 8015778:	200009e0 	.word	0x200009e0
 801577c:	0801ec70 	.word	0x0801ec70
 8015780:	0801ed08 	.word	0x0801ed08
 8015784:	0801cca4 	.word	0x0801cca4
 8015788:	20000a0c 	.word	0x20000a0c
 801578c:	20003c7c 	.word	0x20003c7c
 8015790:	20000a1a 	.word	0x20000a1a
 8015794:	20000a04 	.word	0x20000a04
 8015798:	200009dc 	.word	0x200009dc
 801579c:	20003c68 	.word	0x20003c68
 80157a0:	2000721c 	.word	0x2000721c
 80157a4:	20007218 	.word	0x20007218

080157a8 <tcp_free_acked_segments>:
{
 80157a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157ac:	4606      	mov	r6, r0
 80157ae:	460c      	mov	r4, r1
 80157b0:	4699      	mov	r9, r3
  while (seg_list != NULL &&
 80157b2:	e008      	b.n	80157c6 <tcp_free_acked_segments+0x1e>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80157b4:	4b26      	ldr	r3, [pc, #152]	; (8015850 <tcp_free_acked_segments+0xa8>)
 80157b6:	f240 4257 	movw	r2, #1111	; 0x457
 80157ba:	4926      	ldr	r1, [pc, #152]	; (8015854 <tcp_free_acked_segments+0xac>)
 80157bc:	4826      	ldr	r0, [pc, #152]	; (8015858 <tcp_free_acked_segments+0xb0>)
 80157be:	f006 f95f 	bl	801ba80 <iprintf>
 80157c2:	e021      	b.n	8015808 <tcp_free_acked_segments+0x60>
{
 80157c4:	463c      	mov	r4, r7
  while (seg_list != NULL &&
 80157c6:	2c00      	cmp	r4, #0
 80157c8:	d03e      	beq.n	8015848 <tcp_free_acked_segments+0xa0>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80157ca:	6923      	ldr	r3, [r4, #16]
 80157cc:	6858      	ldr	r0, [r3, #4]
 80157ce:	f7fd f8d0 	bl	8012972 <lwip_htonl>
 80157d2:	4605      	mov	r5, r0
 80157d4:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 80157d8:	6923      	ldr	r3, [r4, #16]
 80157da:	8998      	ldrh	r0, [r3, #12]
 80157dc:	f7fd f8c4 	bl	8012968 <lwip_htons>
 80157e0:	f010 0f03 	tst.w	r0, #3
 80157e4:	d02e      	beq.n	8015844 <tcp_free_acked_segments+0x9c>
 80157e6:	2001      	movs	r0, #1
 80157e8:	4440      	add	r0, r8
 80157ea:	4405      	add	r5, r0
 80157ec:	4b1b      	ldr	r3, [pc, #108]	; (801585c <tcp_free_acked_segments+0xb4>)
 80157ee:	6818      	ldr	r0, [r3, #0]
 80157f0:	1a2d      	subs	r5, r5, r0
  while (seg_list != NULL &&
 80157f2:	2d00      	cmp	r5, #0
 80157f4:	dc28      	bgt.n	8015848 <tcp_free_acked_segments+0xa0>
    seg_list = seg_list->next;
 80157f6:	6827      	ldr	r7, [r4, #0]
    clen = pbuf_clen(next->p);
 80157f8:	6860      	ldr	r0, [r4, #4]
 80157fa:	f7fe fa71 	bl	8013ce0 <pbuf_clen>
 80157fe:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8015800:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 8015804:	4298      	cmp	r0, r3
 8015806:	d8d5      	bhi.n	80157b4 <tcp_free_acked_segments+0xc>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8015808:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
 801580c:	1b45      	subs	r5, r0, r5
 801580e:	f8a6 5066 	strh.w	r5, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8015812:	8923      	ldrh	r3, [r4, #8]
 8015814:	4a12      	ldr	r2, [pc, #72]	; (8015860 <tcp_free_acked_segments+0xb8>)
 8015816:	8811      	ldrh	r1, [r2, #0]
 8015818:	440b      	add	r3, r1
 801581a:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 801581c:	4620      	mov	r0, r4
 801581e:	f7fe fed1 	bl	80145c4 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 8015822:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 8015826:	2b00      	cmp	r3, #0
 8015828:	d0cc      	beq.n	80157c4 <tcp_free_acked_segments+0x1c>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801582a:	2f00      	cmp	r7, #0
 801582c:	d1ca      	bne.n	80157c4 <tcp_free_acked_segments+0x1c>
 801582e:	f1b9 0f00 	cmp.w	r9, #0
 8015832:	d1c7      	bne.n	80157c4 <tcp_free_acked_segments+0x1c>
 8015834:	4b06      	ldr	r3, [pc, #24]	; (8015850 <tcp_free_acked_segments+0xa8>)
 8015836:	f240 4261 	movw	r2, #1121	; 0x461
 801583a:	490a      	ldr	r1, [pc, #40]	; (8015864 <tcp_free_acked_segments+0xbc>)
 801583c:	4806      	ldr	r0, [pc, #24]	; (8015858 <tcp_free_acked_segments+0xb0>)
 801583e:	f006 f91f 	bl	801ba80 <iprintf>
 8015842:	e7bf      	b.n	80157c4 <tcp_free_acked_segments+0x1c>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8015844:	2000      	movs	r0, #0
 8015846:	e7cf      	b.n	80157e8 <tcp_free_acked_segments+0x40>
}
 8015848:	4620      	mov	r0, r4
 801584a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801584e:	bf00      	nop
 8015850:	0801ec70 	.word	0x0801ec70
 8015854:	0801ed28 	.word	0x0801ed28
 8015858:	0801cca4 	.word	0x0801cca4
 801585c:	200009dc 	.word	0x200009dc
 8015860:	200009f8 	.word	0x200009f8
 8015864:	0801ed50 	.word	0x0801ed50

08015868 <tcp_oos_insert_segment>:
{
 8015868:	b570      	push	{r4, r5, r6, lr}
 801586a:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801586c:	4605      	mov	r5, r0
 801586e:	b160      	cbz	r0, 801588a <tcp_oos_insert_segment+0x22>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015870:	692b      	ldr	r3, [r5, #16]
 8015872:	8998      	ldrh	r0, [r3, #12]
 8015874:	f7fd f878 	bl	8012968 <lwip_htons>
 8015878:	f010 0f01 	tst.w	r0, #1
 801587c:	d01a      	beq.n	80158b4 <tcp_oos_insert_segment+0x4c>
    tcp_segs_free(next);
 801587e:	4620      	mov	r0, r4
 8015880:	f7fe fead 	bl	80145de <tcp_segs_free>
    next = NULL;
 8015884:	2400      	movs	r4, #0
  cseg->next = next;
 8015886:	602c      	str	r4, [r5, #0]
}
 8015888:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801588a:	4b1d      	ldr	r3, [pc, #116]	; (8015900 <tcp_oos_insert_segment+0x98>)
 801588c:	f240 421f 	movw	r2, #1055	; 0x41f
 8015890:	491c      	ldr	r1, [pc, #112]	; (8015904 <tcp_oos_insert_segment+0x9c>)
 8015892:	481d      	ldr	r0, [pc, #116]	; (8015908 <tcp_oos_insert_segment+0xa0>)
 8015894:	f006 f8f4 	bl	801ba80 <iprintf>
 8015898:	e7ea      	b.n	8015870 <tcp_oos_insert_segment+0x8>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801589a:	692b      	ldr	r3, [r5, #16]
 801589c:	899e      	ldrh	r6, [r3, #12]
 801589e:	2001      	movs	r0, #1
 80158a0:	f7fd f862 	bl	8012968 <lwip_htons>
 80158a4:	692b      	ldr	r3, [r5, #16]
 80158a6:	4306      	orrs	r6, r0
 80158a8:	819e      	strh	r6, [r3, #12]
      next = next->next;
 80158aa:	6826      	ldr	r6, [r4, #0]
      tcp_seg_free(old_seg);
 80158ac:	4620      	mov	r0, r4
 80158ae:	f7fe fe89 	bl	80145c4 <tcp_seg_free>
      next = next->next;
 80158b2:	4634      	mov	r4, r6
    while (next &&
 80158b4:	b18c      	cbz	r4, 80158da <tcp_oos_insert_segment+0x72>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80158b6:	892b      	ldrh	r3, [r5, #8]
 80158b8:	4a14      	ldr	r2, [pc, #80]	; (801590c <tcp_oos_insert_segment+0xa4>)
 80158ba:	6812      	ldr	r2, [r2, #0]
 80158bc:	4413      	add	r3, r2
 80158be:	6921      	ldr	r1, [r4, #16]
 80158c0:	684a      	ldr	r2, [r1, #4]
 80158c2:	8920      	ldrh	r0, [r4, #8]
 80158c4:	4402      	add	r2, r0
 80158c6:	1a9b      	subs	r3, r3, r2
    while (next &&
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	db06      	blt.n	80158da <tcp_oos_insert_segment+0x72>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80158cc:	8988      	ldrh	r0, [r1, #12]
 80158ce:	f7fd f84b 	bl	8012968 <lwip_htons>
 80158d2:	f010 0f01 	tst.w	r0, #1
 80158d6:	d0e8      	beq.n	80158aa <tcp_oos_insert_segment+0x42>
 80158d8:	e7df      	b.n	801589a <tcp_oos_insert_segment+0x32>
    if (next &&
 80158da:	2c00      	cmp	r4, #0
 80158dc:	d0d3      	beq.n	8015886 <tcp_oos_insert_segment+0x1e>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80158de:	892b      	ldrh	r3, [r5, #8]
 80158e0:	4a0a      	ldr	r2, [pc, #40]	; (801590c <tcp_oos_insert_segment+0xa4>)
 80158e2:	6811      	ldr	r1, [r2, #0]
 80158e4:	440b      	add	r3, r1
 80158e6:	6922      	ldr	r2, [r4, #16]
 80158e8:	6852      	ldr	r2, [r2, #4]
 80158ea:	1a9b      	subs	r3, r3, r2
    if (next &&
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	ddca      	ble.n	8015886 <tcp_oos_insert_segment+0x1e>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80158f0:	1a52      	subs	r2, r2, r1
 80158f2:	b291      	uxth	r1, r2
 80158f4:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80158f6:	6868      	ldr	r0, [r5, #4]
 80158f8:	f7fe f99e 	bl	8013c38 <pbuf_realloc>
 80158fc:	e7c3      	b.n	8015886 <tcp_oos_insert_segment+0x1e>
 80158fe:	bf00      	nop
 8015900:	0801ec70 	.word	0x0801ec70
 8015904:	0801ed70 	.word	0x0801ed70
 8015908:	0801cca4 	.word	0x0801cca4
 801590c:	20000a04 	.word	0x20000a04

08015910 <tcp_receive>:
{
 8015910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8015912:	4604      	mov	r4, r0
 8015914:	2800      	cmp	r0, #0
 8015916:	d06f      	beq.n	80159f8 <tcp_receive+0xe8>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8015918:	7d23      	ldrb	r3, [r4, #20]
 801591a:	2b03      	cmp	r3, #3
 801591c:	d974      	bls.n	8015a08 <tcp_receive+0xf8>
  if (flags & TCP_ACK) {
 801591e:	4bb0      	ldr	r3, [pc, #704]	; (8015be0 <tcp_receive+0x2d0>)
 8015920:	781b      	ldrb	r3, [r3, #0]
 8015922:	f013 0f10 	tst.w	r3, #16
 8015926:	d03c      	beq.n	80159a2 <tcp_receive+0x92>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015928:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
 801592c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801592e:	1886      	adds	r6, r0, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015930:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8015932:	4bac      	ldr	r3, [pc, #688]	; (8015be4 <tcp_receive+0x2d4>)
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	1acd      	subs	r5, r1, r3
 8015938:	2d00      	cmp	r5, #0
 801593a:	db0a      	blt.n	8015952 <tcp_receive+0x42>
 801593c:	4299      	cmp	r1, r3
 801593e:	d06b      	beq.n	8015a18 <tcp_receive+0x108>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015940:	49a9      	ldr	r1, [pc, #676]	; (8015be8 <tcp_receive+0x2d8>)
 8015942:	6809      	ldr	r1, [r1, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015944:	428a      	cmp	r2, r1
 8015946:	d114      	bne.n	8015972 <tcp_receive+0x62>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015948:	4aa8      	ldr	r2, [pc, #672]	; (8015bec <tcp_receive+0x2dc>)
 801594a:	6812      	ldr	r2, [r2, #0]
 801594c:	89d2      	ldrh	r2, [r2, #14]
 801594e:	4290      	cmp	r0, r2
 8015950:	d20f      	bcs.n	8015972 <tcp_receive+0x62>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8015952:	4aa6      	ldr	r2, [pc, #664]	; (8015bec <tcp_receive+0x2dc>)
 8015954:	6812      	ldr	r2, [r2, #0]
 8015956:	89d2      	ldrh	r2, [r2, #14]
 8015958:	b290      	uxth	r0, r2
 801595a:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801595e:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
 8015962:	4288      	cmp	r0, r1
 8015964:	d901      	bls.n	801596a <tcp_receive+0x5a>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015966:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 801596a:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801596c:	4b9e      	ldr	r3, [pc, #632]	; (8015be8 <tcp_receive+0x2d8>)
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	65a3      	str	r3, [r4, #88]	; 0x58
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015972:	4b9d      	ldr	r3, [pc, #628]	; (8015be8 <tcp_receive+0x2d8>)
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8015978:	1a5a      	subs	r2, r3, r1
 801597a:	2a00      	cmp	r2, #0
 801597c:	dd52      	ble.n	8015a24 <tcp_receive+0x114>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801597e:	2a01      	cmp	r2, #1
 8015980:	d403      	bmi.n	801598a <tcp_receive+0x7a>
 8015982:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8015984:	1a9a      	subs	r2, r3, r2
 8015986:	2a00      	cmp	r2, #0
 8015988:	dd7e      	ble.n	8015a88 <tcp_receive+0x178>
      tcp_send_empty_ack(pcb);
 801598a:	4620      	mov	r0, r4
 801598c:	f002 fa96 	bl	8017ebc <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015990:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015992:	b133      	cbz	r3, 80159a2 <tcp_receive+0x92>
 8015994:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8015996:	4994      	ldr	r1, [pc, #592]	; (8015be8 <tcp_receive+0x2d8>)
 8015998:	6809      	ldr	r1, [r1, #0]
 801599a:	1a52      	subs	r2, r2, r1
 801599c:	2a00      	cmp	r2, #0
 801599e:	f2c0 8137 	blt.w	8015c10 <tcp_receive+0x300>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80159a2:	4b93      	ldr	r3, [pc, #588]	; (8015bf0 <tcp_receive+0x2e0>)
 80159a4:	881b      	ldrh	r3, [r3, #0]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	f000 8436 	beq.w	8016218 <tcp_receive+0x908>
 80159ac:	7d22      	ldrb	r2, [r4, #20]
 80159ae:	2a06      	cmp	r2, #6
 80159b0:	f200 8432 	bhi.w	8016218 <tcp_receive+0x908>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80159b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80159b6:	4a8b      	ldr	r2, [pc, #556]	; (8015be4 <tcp_receive+0x2d4>)
 80159b8:	6812      	ldr	r2, [r2, #0]
 80159ba:	1a8e      	subs	r6, r1, r2
 80159bc:	2e01      	cmp	r6, #1
 80159be:	d405      	bmi.n	80159cc <tcp_receive+0xbc>
 80159c0:	4413      	add	r3, r2
 80159c2:	1acb      	subs	r3, r1, r3
 80159c4:	3301      	adds	r3, #1
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	f340 8148 	ble.w	8015c5c <tcp_receive+0x34c>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80159cc:	1a52      	subs	r2, r2, r1
 80159ce:	2a00      	cmp	r2, #0
 80159d0:	f2c0 8186 	blt.w	8015ce0 <tcp_receive+0x3d0>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80159d4:	4b83      	ldr	r3, [pc, #524]	; (8015be4 <tcp_receive+0x2d4>)
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80159da:	1a5a      	subs	r2, r3, r1
 80159dc:	2a00      	cmp	r2, #0
 80159de:	db06      	blt.n	80159ee <tcp_receive+0xde>
 80159e0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80159e2:	440a      	add	r2, r1
 80159e4:	1a9a      	subs	r2, r3, r2
 80159e6:	3201      	adds	r2, #1
 80159e8:	2a00      	cmp	r2, #0
 80159ea:	f340 817e 	ble.w	8015cea <tcp_receive+0x3da>
      tcp_send_empty_ack(pcb);
 80159ee:	4620      	mov	r0, r4
 80159f0:	f002 fa64 	bl	8017ebc <tcp_send_empty_ack>
 80159f4:	f000 bc20 	b.w	8016238 <tcp_receive+0x928>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80159f8:	4b7e      	ldr	r3, [pc, #504]	; (8015bf4 <tcp_receive+0x2e4>)
 80159fa:	f240 427b 	movw	r2, #1147	; 0x47b
 80159fe:	497e      	ldr	r1, [pc, #504]	; (8015bf8 <tcp_receive+0x2e8>)
 8015a00:	487e      	ldr	r0, [pc, #504]	; (8015bfc <tcp_receive+0x2ec>)
 8015a02:	f006 f83d 	bl	801ba80 <iprintf>
 8015a06:	e787      	b.n	8015918 <tcp_receive+0x8>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8015a08:	4b7a      	ldr	r3, [pc, #488]	; (8015bf4 <tcp_receive+0x2e4>)
 8015a0a:	f240 427c 	movw	r2, #1148	; 0x47c
 8015a0e:	497c      	ldr	r1, [pc, #496]	; (8015c00 <tcp_receive+0x2f0>)
 8015a10:	487a      	ldr	r0, [pc, #488]	; (8015bfc <tcp_receive+0x2ec>)
 8015a12:	f006 f835 	bl	801ba80 <iprintf>
 8015a16:	e782      	b.n	801591e <tcp_receive+0xe>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015a18:	4973      	ldr	r1, [pc, #460]	; (8015be8 <tcp_receive+0x2d8>)
 8015a1a:	6809      	ldr	r1, [r1, #0]
 8015a1c:	1a51      	subs	r1, r2, r1
 8015a1e:	2900      	cmp	r1, #0
 8015a20:	da8e      	bge.n	8015940 <tcp_receive+0x30>
 8015a22:	e796      	b.n	8015952 <tcp_receive+0x42>
      if (tcplen == 0) {
 8015a24:	4a72      	ldr	r2, [pc, #456]	; (8015bf0 <tcp_receive+0x2e0>)
 8015a26:	8812      	ldrh	r2, [r2, #0]
 8015a28:	b92a      	cbnz	r2, 8015a36 <tcp_receive+0x126>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8015a2a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8015a2c:	f8b4 0060 	ldrh.w	r0, [r4, #96]	; 0x60
 8015a30:	4402      	add	r2, r0
 8015a32:	42b2      	cmp	r2, r6
 8015a34:	d003      	beq.n	8015a3e <tcp_receive+0x12e>
        pcb->dupacks = 0;
 8015a36:	2300      	movs	r3, #0
 8015a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a3c:	e7a8      	b.n	8015990 <tcp_receive+0x80>
          if (pcb->rtime >= 0) {
 8015a3e:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8015a42:	2a00      	cmp	r2, #0
 8015a44:	dbf7      	blt.n	8015a36 <tcp_receive+0x126>
            if (pcb->lastack == ackno) {
 8015a46:	428b      	cmp	r3, r1
 8015a48:	d1f5      	bne.n	8015a36 <tcp_receive+0x126>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8015a4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015a4e:	2bff      	cmp	r3, #255	; 0xff
 8015a50:	d002      	beq.n	8015a58 <tcp_receive+0x148>
                ++pcb->dupacks;
 8015a52:	3301      	adds	r3, #1
 8015a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8015a58:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015a5c:	2b03      	cmp	r3, #3
 8015a5e:	d908      	bls.n	8015a72 <tcp_receive+0x162>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015a60:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
 8015a64:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8015a66:	440a      	add	r2, r1
 8015a68:	b292      	uxth	r2, r2
 8015a6a:	4291      	cmp	r1, r2
 8015a6c:	d807      	bhi.n	8015a7e <tcp_receive+0x16e>
 8015a6e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
              if (pcb->dupacks >= 3) {
 8015a72:	2b02      	cmp	r3, #2
 8015a74:	d98c      	bls.n	8015990 <tcp_receive+0x80>
                tcp_rexmit_fast(pcb);
 8015a76:	4620      	mov	r0, r4
 8015a78:	f002 f99c 	bl	8017db4 <tcp_rexmit_fast>
      if (!found_dupack) {
 8015a7c:	e788      	b.n	8015990 <tcp_receive+0x80>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015a82:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 8015a86:	e7f4      	b.n	8015a72 <tcp_receive+0x162>
      if (pcb->flags & TF_INFR) {
 8015a88:	8b62      	ldrh	r2, [r4, #26]
 8015a8a:	f012 0f04 	tst.w	r2, #4
 8015a8e:	d009      	beq.n	8015aa4 <tcp_receive+0x194>
        tcp_clear_flags(pcb, TF_INFR);
 8015a90:	f022 0204 	bic.w	r2, r2, #4
 8015a94:	8362      	strh	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8015a96:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8015a9a:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      pcb->nrtx = 0;
 8015aa4:	2000      	movs	r0, #0
 8015aa6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015aaa:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 8015aae:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8015ab0:	eb02 02e5 	add.w	r2, r2, r5, asr #3
 8015ab4:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015ab8:	b29a      	uxth	r2, r3
 8015aba:	b289      	uxth	r1, r1
 8015abc:	1a51      	subs	r1, r2, r1
 8015abe:	b289      	uxth	r1, r1
      pcb->dupacks = 0;
 8015ac0:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 8015ac4:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8015ac6:	7d23      	ldrb	r3, [r4, #20]
 8015ac8:	2b03      	cmp	r3, #3
 8015aca:	d917      	bls.n	8015afc <tcp_receive+0x1ec>
        if (pcb->cwnd < pcb->ssthresh) {
 8015acc:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8015ad0:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8015ad4:	429a      	cmp	r2, r3
 8015ad6:	d24b      	bcs.n	8015b70 <tcp_receive+0x260>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015ad8:	8b63      	ldrh	r3, [r4, #26]
 8015ada:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8015ade:	d040      	beq.n	8015b62 <tcp_receive+0x252>
 8015ae0:	2301      	movs	r3, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015ae2:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8015ae4:	fb13 f300 	smulbb	r3, r3, r0
 8015ae8:	b29b      	uxth	r3, r3
          TCP_WND_INC(pcb->cwnd, increase);
 8015aea:	428b      	cmp	r3, r1
 8015aec:	bf94      	ite	ls
 8015aee:	18d1      	addls	r1, r2, r3
 8015af0:	1851      	addhi	r1, r2, r1
 8015af2:	b289      	uxth	r1, r1
 8015af4:	428a      	cmp	r2, r1
 8015af6:	d836      	bhi.n	8015b66 <tcp_receive+0x256>
 8015af8:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015afc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8015afe:	4a41      	ldr	r2, [pc, #260]	; (8015c04 <tcp_receive+0x2f4>)
 8015b00:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8015b02:	4620      	mov	r0, r4
 8015b04:	f7ff fe50 	bl	80157a8 <tcp_free_acked_segments>
 8015b08:	4603      	mov	r3, r0
 8015b0a:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015b0c:	4a3e      	ldr	r2, [pc, #248]	; (8015c08 <tcp_receive+0x2f8>)
 8015b0e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8015b10:	4620      	mov	r0, r4
 8015b12:	f7ff fe49 	bl	80157a8 <tcp_free_acked_segments>
 8015b16:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 8015b18:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8015b1a:	2a00      	cmp	r2, #0
 8015b1c:	d049      	beq.n	8015bb2 <tcp_receive+0x2a2>
        pcb->rtime = 0;
 8015b1e:	2300      	movs	r3, #0
 8015b20:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8015b22:	2300      	movs	r3, #0
 8015b24:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 8015b26:	2800      	cmp	r0, #0
 8015b28:	d047      	beq.n	8015bba <tcp_receive+0x2aa>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8015b2a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8015b2e:	4937      	ldr	r1, [pc, #220]	; (8015c0c <tcp_receive+0x2fc>)
 8015b30:	8809      	ldrh	r1, [r1, #0]
 8015b32:	440b      	add	r3, r1
 8015b34:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 8015b38:	8b63      	ldrh	r3, [r4, #26]
 8015b3a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8015b3e:	f43f af27 	beq.w	8015990 <tcp_receive+0x80>
        if (pcb->unacked == NULL) {
 8015b42:	2a00      	cmp	r2, #0
 8015b44:	d03c      	beq.n	8015bc0 <tcp_receive+0x2b0>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015b46:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8015b48:	6913      	ldr	r3, [r2, #16]
 8015b4a:	6858      	ldr	r0, [r3, #4]
 8015b4c:	f7fc ff11 	bl	8012972 <lwip_htonl>
 8015b50:	1a2d      	subs	r5, r5, r0
 8015b52:	2d00      	cmp	r5, #0
 8015b54:	f73f af1c 	bgt.w	8015990 <tcp_receive+0x80>
          tcp_clear_flags(pcb, TF_RTO);
 8015b58:	8b63      	ldrh	r3, [r4, #26]
 8015b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015b5e:	8363      	strh	r3, [r4, #26]
 8015b60:	e716      	b.n	8015990 <tcp_receive+0x80>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015b62:	2302      	movs	r3, #2
 8015b64:	e7bd      	b.n	8015ae2 <tcp_receive+0x1d2>
          TCP_WND_INC(pcb->cwnd, increase);
 8015b66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015b6a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8015b6e:	e7c5      	b.n	8015afc <tcp_receive+0x1ec>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015b70:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8015b74:	4419      	add	r1, r3
 8015b76:	b289      	uxth	r1, r1
 8015b78:	428b      	cmp	r3, r1
 8015b7a:	d810      	bhi.n	8015b9e <tcp_receive+0x28e>
 8015b7c:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8015b80:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8015b84:	429a      	cmp	r2, r3
 8015b86:	d8b9      	bhi.n	8015afc <tcp_receive+0x1ec>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015b88:	1a9b      	subs	r3, r3, r2
 8015b8a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015b8e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8015b90:	4413      	add	r3, r2
 8015b92:	b29b      	uxth	r3, r3
 8015b94:	429a      	cmp	r2, r3
 8015b96:	d807      	bhi.n	8015ba8 <tcp_receive+0x298>
 8015b98:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8015b9c:	e7ae      	b.n	8015afc <tcp_receive+0x1ec>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015b9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015ba2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8015ba6:	e7eb      	b.n	8015b80 <tcp_receive+0x270>
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015bac:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8015bb0:	e7a4      	b.n	8015afc <tcp_receive+0x1ec>
        pcb->rtime = -1;
 8015bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015bb6:	8623      	strh	r3, [r4, #48]	; 0x30
 8015bb8:	e7b3      	b.n	8015b22 <tcp_receive+0x212>
        pcb->unsent_oversize = 0;
 8015bba:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 8015bbe:	e7b4      	b.n	8015b2a <tcp_receive+0x21a>
          if ((pcb->unsent == NULL) ||
 8015bc0:	b140      	cbz	r0, 8015bd4 <tcp_receive+0x2c4>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015bc2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8015bc4:	6903      	ldr	r3, [r0, #16]
 8015bc6:	6858      	ldr	r0, [r3, #4]
 8015bc8:	f7fc fed3 	bl	8012972 <lwip_htonl>
 8015bcc:	1a2d      	subs	r5, r5, r0
          if ((pcb->unsent == NULL) ||
 8015bce:	2d00      	cmp	r5, #0
 8015bd0:	f73f aede 	bgt.w	8015990 <tcp_receive+0x80>
            tcp_clear_flags(pcb, TF_RTO);
 8015bd4:	8b63      	ldrh	r3, [r4, #26]
 8015bd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015bda:	8363      	strh	r3, [r4, #26]
 8015bdc:	e6d8      	b.n	8015990 <tcp_receive+0x80>
 8015bde:	bf00      	nop
 8015be0:	200009e0 	.word	0x200009e0
 8015be4:	20000a04 	.word	0x20000a04
 8015be8:	200009dc 	.word	0x200009dc
 8015bec:	20000a0c 	.word	0x20000a0c
 8015bf0:	20000a1a 	.word	0x20000a1a
 8015bf4:	0801ec70 	.word	0x0801ec70
 8015bf8:	0801ed98 	.word	0x0801ed98
 8015bfc:	0801cca4 	.word	0x0801cca4
 8015c00:	0801edb4 	.word	0x0801edb4
 8015c04:	0801edd0 	.word	0x0801edd0
 8015c08:	0801edd8 	.word	0x0801edd8
 8015c0c:	200009f8 	.word	0x200009f8
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015c10:	4aa4      	ldr	r2, [pc, #656]	; (8015ea4 <tcp_receive+0x594>)
 8015c12:	8816      	ldrh	r6, [r2, #0]
 8015c14:	b29b      	uxth	r3, r3
 8015c16:	1af2      	subs	r2, r6, r3
 8015c18:	b292      	uxth	r2, r2
      m = (s16_t)(m - (pcb->sa >> 3));
 8015c1a:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 8015c1e:	f3c0 05cf 	ubfx	r5, r0, #3, #16
 8015c22:	1b52      	subs	r2, r2, r5
 8015c24:	b211      	sxth	r1, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 8015c26:	b280      	uxth	r0, r0
 8015c28:	fa10 f282 	uxtah	r2, r0, r2
 8015c2c:	b212      	sxth	r2, r2
 8015c2e:	87a2      	strh	r2, [r4, #60]	; 0x3c
      if (m < 0) {
 8015c30:	2900      	cmp	r1, #0
 8015c32:	db0f      	blt.n	8015c54 <tcp_receive+0x344>
      m = (s16_t)(m - (pcb->sv >> 2));
 8015c34:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8015c38:	eba1 01a3 	sub.w	r1, r1, r3, asr #2
      pcb->sv = (s16_t)(pcb->sv + m);
 8015c3c:	b29b      	uxth	r3, r3
 8015c3e:	fa13 f181 	uxtah	r1, r3, r1
 8015c42:	87e1      	strh	r1, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015c44:	10d2      	asrs	r2, r2, #3
 8015c46:	fa12 f281 	uxtah	r2, r2, r1
 8015c4a:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8015c4e:	2300      	movs	r3, #0
 8015c50:	6363      	str	r3, [r4, #52]	; 0x34
 8015c52:	e6a6      	b.n	80159a2 <tcp_receive+0x92>
        m = (s16_t) - m;
 8015c54:	1b9b      	subs	r3, r3, r6
 8015c56:	442b      	add	r3, r5
 8015c58:	b219      	sxth	r1, r3
 8015c5a:	e7eb      	b.n	8015c34 <tcp_receive+0x324>
      struct pbuf *p = inseg.p;
 8015c5c:	4b92      	ldr	r3, [pc, #584]	; (8015ea8 <tcp_receive+0x598>)
 8015c5e:	685d      	ldr	r5, [r3, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015c60:	b1dd      	cbz	r5, 8015c9a <tcp_receive+0x38a>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015c62:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8015c66:	429e      	cmp	r6, r3
 8015c68:	d81f      	bhi.n	8015caa <tcp_receive+0x39a>
      off = (u16_t)off32;
 8015c6a:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015c6c:	4b8e      	ldr	r3, [pc, #568]	; (8015ea8 <tcp_receive+0x598>)
 8015c6e:	685b      	ldr	r3, [r3, #4]
 8015c70:	891b      	ldrh	r3, [r3, #8]
 8015c72:	42b3      	cmp	r3, r6
 8015c74:	d321      	bcc.n	8015cba <tcp_receive+0x3aa>
      inseg.len -= off;
 8015c76:	4b8c      	ldr	r3, [pc, #560]	; (8015ea8 <tcp_receive+0x598>)
 8015c78:	891a      	ldrh	r2, [r3, #8]
 8015c7a:	1b92      	subs	r2, r2, r6
 8015c7c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015c7e:	685b      	ldr	r3, [r3, #4]
 8015c80:	891a      	ldrh	r2, [r3, #8]
 8015c82:	1b92      	subs	r2, r2, r6
 8015c84:	b292      	uxth	r2, r2
      while (p->len < off) {
 8015c86:	8969      	ldrh	r1, [r5, #10]
 8015c88:	42b1      	cmp	r1, r6
 8015c8a:	d21e      	bcs.n	8015cca <tcp_receive+0x3ba>
        off -= p->len;
 8015c8c:	1a71      	subs	r1, r6, r1
 8015c8e:	b28e      	uxth	r6, r1
        p->tot_len = new_tot_len;
 8015c90:	812a      	strh	r2, [r5, #8]
        p->len = 0;
 8015c92:	2300      	movs	r3, #0
 8015c94:	816b      	strh	r3, [r5, #10]
        p = p->next;
 8015c96:	682d      	ldr	r5, [r5, #0]
 8015c98:	e7f5      	b.n	8015c86 <tcp_receive+0x376>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015c9a:	4b84      	ldr	r3, [pc, #528]	; (8015eac <tcp_receive+0x59c>)
 8015c9c:	f240 5294 	movw	r2, #1428	; 0x594
 8015ca0:	4983      	ldr	r1, [pc, #524]	; (8015eb0 <tcp_receive+0x5a0>)
 8015ca2:	4884      	ldr	r0, [pc, #528]	; (8015eb4 <tcp_receive+0x5a4>)
 8015ca4:	f005 feec 	bl	801ba80 <iprintf>
 8015ca8:	e7db      	b.n	8015c62 <tcp_receive+0x352>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015caa:	4b80      	ldr	r3, [pc, #512]	; (8015eac <tcp_receive+0x59c>)
 8015cac:	f240 5295 	movw	r2, #1429	; 0x595
 8015cb0:	4981      	ldr	r1, [pc, #516]	; (8015eb8 <tcp_receive+0x5a8>)
 8015cb2:	4880      	ldr	r0, [pc, #512]	; (8015eb4 <tcp_receive+0x5a4>)
 8015cb4:	f005 fee4 	bl	801ba80 <iprintf>
 8015cb8:	e7d7      	b.n	8015c6a <tcp_receive+0x35a>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015cba:	4b7c      	ldr	r3, [pc, #496]	; (8015eac <tcp_receive+0x59c>)
 8015cbc:	f240 5297 	movw	r2, #1431	; 0x597
 8015cc0:	497e      	ldr	r1, [pc, #504]	; (8015ebc <tcp_receive+0x5ac>)
 8015cc2:	487c      	ldr	r0, [pc, #496]	; (8015eb4 <tcp_receive+0x5a4>)
 8015cc4:	f005 fedc 	bl	801ba80 <iprintf>
 8015cc8:	e7d5      	b.n	8015c76 <tcp_receive+0x366>
      pbuf_remove_header(p, off);
 8015cca:	4631      	mov	r1, r6
 8015ccc:	4628      	mov	r0, r5
 8015cce:	f7fd fe5d 	bl	801398c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015cd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015cd4:	4a7a      	ldr	r2, [pc, #488]	; (8015ec0 <tcp_receive+0x5b0>)
 8015cd6:	6013      	str	r3, [r2, #0]
 8015cd8:	4a73      	ldr	r2, [pc, #460]	; (8015ea8 <tcp_receive+0x598>)
 8015cda:	6912      	ldr	r2, [r2, #16]
 8015cdc:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015cde:	e679      	b.n	80159d4 <tcp_receive+0xc4>
        tcp_ack_now(pcb);
 8015ce0:	8b63      	ldrh	r3, [r4, #26]
 8015ce2:	f043 0302 	orr.w	r3, r3, #2
 8015ce6:	8363      	strh	r3, [r4, #26]
 8015ce8:	e674      	b.n	80159d4 <tcp_receive+0xc4>
      if (pcb->rcv_nxt == seqno) {
 8015cea:	428b      	cmp	r3, r1
 8015cec:	d005      	beq.n	8015cfa <tcp_receive+0x3ea>
        if (pcb->ooseq == NULL) {
 8015cee:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8015cf0:	2d00      	cmp	r5, #0
 8015cf2:	f000 81aa 	beq.w	801604a <tcp_receive+0x73a>
          struct tcp_seg *next, *prev = NULL;
 8015cf6:	2600      	movs	r6, #0
 8015cf8:	e1cc      	b.n	8016094 <tcp_receive+0x784>
        tcplen = TCP_TCPLEN(&inseg);
 8015cfa:	4b6b      	ldr	r3, [pc, #428]	; (8015ea8 <tcp_receive+0x598>)
 8015cfc:	891d      	ldrh	r5, [r3, #8]
 8015cfe:	691b      	ldr	r3, [r3, #16]
 8015d00:	8998      	ldrh	r0, [r3, #12]
 8015d02:	f7fc fe31 	bl	8012968 <lwip_htons>
 8015d06:	f010 0f03 	tst.w	r0, #3
 8015d0a:	d014      	beq.n	8015d36 <tcp_receive+0x426>
 8015d0c:	2301      	movs	r3, #1
 8015d0e:	442b      	add	r3, r5
 8015d10:	b29b      	uxth	r3, r3
 8015d12:	4a6c      	ldr	r2, [pc, #432]	; (8015ec4 <tcp_receive+0x5b4>)
 8015d14:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 8015d16:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8015d18:	4293      	cmp	r3, r2
 8015d1a:	d80e      	bhi.n	8015d3a <tcp_receive+0x42a>
        if (pcb->ooseq != NULL) {
 8015d1c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d05e      	beq.n	8015de0 <tcp_receive+0x4d0>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015d22:	4b61      	ldr	r3, [pc, #388]	; (8015ea8 <tcp_receive+0x598>)
 8015d24:	691b      	ldr	r3, [r3, #16]
 8015d26:	8998      	ldrh	r0, [r3, #12]
 8015d28:	f7fc fe1e 	bl	8012968 <lwip_htons>
 8015d2c:	f010 0f01 	tst.w	r0, #1
 8015d30:	d153      	bne.n	8015dda <tcp_receive+0x4ca>
            struct tcp_seg *next = pcb->ooseq;
 8015d32:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 8015d34:	e087      	b.n	8015e46 <tcp_receive+0x536>
        tcplen = TCP_TCPLEN(&inseg);
 8015d36:	2300      	movs	r3, #0
 8015d38:	e7e9      	b.n	8015d0e <tcp_receive+0x3fe>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015d3a:	4b5b      	ldr	r3, [pc, #364]	; (8015ea8 <tcp_receive+0x598>)
 8015d3c:	691b      	ldr	r3, [r3, #16]
 8015d3e:	8998      	ldrh	r0, [r3, #12]
 8015d40:	f7fc fe12 	bl	8012968 <lwip_htons>
 8015d44:	f010 0f01 	tst.w	r0, #1
 8015d48:	d12f      	bne.n	8015daa <tcp_receive+0x49a>
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015d4a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8015d4c:	4b56      	ldr	r3, [pc, #344]	; (8015ea8 <tcp_receive+0x598>)
 8015d4e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015d50:	691b      	ldr	r3, [r3, #16]
 8015d52:	8998      	ldrh	r0, [r3, #12]
 8015d54:	f7fc fe08 	bl	8012968 <lwip_htons>
 8015d58:	f010 0f02 	tst.w	r0, #2
 8015d5c:	d003      	beq.n	8015d66 <tcp_receive+0x456>
            inseg.len -= 1;
 8015d5e:	4a52      	ldr	r2, [pc, #328]	; (8015ea8 <tcp_receive+0x598>)
 8015d60:	8913      	ldrh	r3, [r2, #8]
 8015d62:	3b01      	subs	r3, #1
 8015d64:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8015d66:	4d50      	ldr	r5, [pc, #320]	; (8015ea8 <tcp_receive+0x598>)
 8015d68:	8929      	ldrh	r1, [r5, #8]
 8015d6a:	6868      	ldr	r0, [r5, #4]
 8015d6c:	f7fd ff64 	bl	8013c38 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015d70:	892e      	ldrh	r6, [r5, #8]
 8015d72:	692b      	ldr	r3, [r5, #16]
 8015d74:	8998      	ldrh	r0, [r3, #12]
 8015d76:	f7fc fdf7 	bl	8012968 <lwip_htons>
 8015d7a:	f010 0f03 	tst.w	r0, #3
 8015d7e:	d026      	beq.n	8015dce <tcp_receive+0x4be>
 8015d80:	2301      	movs	r3, #1
 8015d82:	4433      	add	r3, r6
 8015d84:	b29b      	uxth	r3, r3
 8015d86:	4a4f      	ldr	r2, [pc, #316]	; (8015ec4 <tcp_receive+0x5b4>)
 8015d88:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015d8a:	4a4d      	ldr	r2, [pc, #308]	; (8015ec0 <tcp_receive+0x5b0>)
 8015d8c:	6812      	ldr	r2, [r2, #0]
 8015d8e:	4413      	add	r3, r2
 8015d90:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8015d92:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8015d94:	440a      	add	r2, r1
 8015d96:	4293      	cmp	r3, r2
 8015d98:	d0c0      	beq.n	8015d1c <tcp_receive+0x40c>
 8015d9a:	4b44      	ldr	r3, [pc, #272]	; (8015eac <tcp_receive+0x59c>)
 8015d9c:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8015da0:	4949      	ldr	r1, [pc, #292]	; (8015ec8 <tcp_receive+0x5b8>)
 8015da2:	4844      	ldr	r0, [pc, #272]	; (8015eb4 <tcp_receive+0x5a4>)
 8015da4:	f005 fe6c 	bl	801ba80 <iprintf>
 8015da8:	e7b8      	b.n	8015d1c <tcp_receive+0x40c>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015daa:	4e3f      	ldr	r6, [pc, #252]	; (8015ea8 <tcp_receive+0x598>)
 8015dac:	6933      	ldr	r3, [r6, #16]
 8015dae:	8998      	ldrh	r0, [r3, #12]
 8015db0:	b205      	sxth	r5, r0
 8015db2:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8015db6:	b280      	uxth	r0, r0
 8015db8:	f7fc fdd6 	bl	8012968 <lwip_htons>
 8015dbc:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8015dc0:	f7fc fdd2 	bl	8012968 <lwip_htons>
 8015dc4:	b203      	sxth	r3, r0
 8015dc6:	6932      	ldr	r2, [r6, #16]
 8015dc8:	431d      	orrs	r5, r3
 8015dca:	8195      	strh	r5, [r2, #12]
 8015dcc:	e7bd      	b.n	8015d4a <tcp_receive+0x43a>
          tcplen = TCP_TCPLEN(&inseg);
 8015dce:	2300      	movs	r3, #0
 8015dd0:	e7d7      	b.n	8015d82 <tcp_receive+0x472>
              pcb->ooseq = pcb->ooseq->next;
 8015dd2:	6803      	ldr	r3, [r0, #0]
 8015dd4:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015dd6:	f7fe fbf5 	bl	80145c4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015dda:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8015ddc:	2800      	cmp	r0, #0
 8015dde:	d1f8      	bne.n	8015dd2 <tcp_receive+0x4c2>
        pcb->rcv_nxt = seqno + tcplen;
 8015de0:	4b38      	ldr	r3, [pc, #224]	; (8015ec4 <tcp_receive+0x5b4>)
 8015de2:	881a      	ldrh	r2, [r3, #0]
 8015de4:	4b36      	ldr	r3, [pc, #216]	; (8015ec0 <tcp_receive+0x5b0>)
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	4413      	add	r3, r2
 8015dea:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015dec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8015dee:	429a      	cmp	r2, r3
 8015df0:	f200 80ae 	bhi.w	8015f50 <tcp_receive+0x640>
        pcb->rcv_wnd -= tcplen;
 8015df4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8015df6:	4a33      	ldr	r2, [pc, #204]	; (8015ec4 <tcp_receive+0x5b4>)
 8015df8:	8812      	ldrh	r2, [r2, #0]
 8015dfa:	1a9b      	subs	r3, r3, r2
 8015dfc:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8015dfe:	4620      	mov	r0, r4
 8015e00:	f7fe fb6a 	bl	80144d8 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8015e04:	4b28      	ldr	r3, [pc, #160]	; (8015ea8 <tcp_receive+0x598>)
 8015e06:	685b      	ldr	r3, [r3, #4]
 8015e08:	891a      	ldrh	r2, [r3, #8]
 8015e0a:	b122      	cbz	r2, 8015e16 <tcp_receive+0x506>
          recv_data = inseg.p;
 8015e0c:	4a2f      	ldr	r2, [pc, #188]	; (8015ecc <tcp_receive+0x5bc>)
 8015e0e:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 8015e10:	4b25      	ldr	r3, [pc, #148]	; (8015ea8 <tcp_receive+0x598>)
 8015e12:	2200      	movs	r2, #0
 8015e14:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015e16:	4b24      	ldr	r3, [pc, #144]	; (8015ea8 <tcp_receive+0x598>)
 8015e18:	691b      	ldr	r3, [r3, #16]
 8015e1a:	8998      	ldrh	r0, [r3, #12]
 8015e1c:	f7fc fda4 	bl	8012968 <lwip_htons>
 8015e20:	f010 0f01 	tst.w	r0, #1
 8015e24:	f000 80c2 	beq.w	8015fac <tcp_receive+0x69c>
          recv_flags |= TF_GOT_FIN;
 8015e28:	4a29      	ldr	r2, [pc, #164]	; (8015ed0 <tcp_receive+0x5c0>)
 8015e2a:	7813      	ldrb	r3, [r2, #0]
 8015e2c:	f043 0320 	orr.w	r3, r3, #32
 8015e30:	7013      	strb	r3, [r2, #0]
 8015e32:	e0bb      	b.n	8015fac <tcp_receive+0x69c>
                tcplen = TCP_TCPLEN(&inseg);
 8015e34:	2300      	movs	r3, #0
 8015e36:	443b      	add	r3, r7
 8015e38:	4a22      	ldr	r2, [pc, #136]	; (8015ec4 <tcp_receive+0x5b4>)
 8015e3a:	8013      	strh	r3, [r2, #0]
              next = next->next;
 8015e3c:	682e      	ldr	r6, [r5, #0]
              tcp_seg_free(tmp);
 8015e3e:	4628      	mov	r0, r5
 8015e40:	f7fe fbc0 	bl	80145c4 <tcp_seg_free>
              next = next->next;
 8015e44:	4635      	mov	r5, r6
            while (next &&
 8015e46:	2d00      	cmp	r5, #0
 8015e48:	d044      	beq.n	8015ed4 <tcp_receive+0x5c4>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015e4a:	4b1e      	ldr	r3, [pc, #120]	; (8015ec4 <tcp_receive+0x5b4>)
 8015e4c:	881b      	ldrh	r3, [r3, #0]
 8015e4e:	4a1c      	ldr	r2, [pc, #112]	; (8015ec0 <tcp_receive+0x5b0>)
 8015e50:	6812      	ldr	r2, [r2, #0]
 8015e52:	4413      	add	r3, r2
 8015e54:	6929      	ldr	r1, [r5, #16]
 8015e56:	684a      	ldr	r2, [r1, #4]
 8015e58:	8928      	ldrh	r0, [r5, #8]
 8015e5a:	4402      	add	r2, r0
 8015e5c:	1a9b      	subs	r3, r3, r2
            while (next &&
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	db38      	blt.n	8015ed4 <tcp_receive+0x5c4>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015e62:	8988      	ldrh	r0, [r1, #12]
 8015e64:	f7fc fd80 	bl	8012968 <lwip_htons>
 8015e68:	f010 0f01 	tst.w	r0, #1
 8015e6c:	d0e6      	beq.n	8015e3c <tcp_receive+0x52c>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015e6e:	4b0e      	ldr	r3, [pc, #56]	; (8015ea8 <tcp_receive+0x598>)
 8015e70:	691b      	ldr	r3, [r3, #16]
 8015e72:	8998      	ldrh	r0, [r3, #12]
 8015e74:	f7fc fd78 	bl	8012968 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015e78:	f010 0f02 	tst.w	r0, #2
 8015e7c:	d1de      	bne.n	8015e3c <tcp_receive+0x52c>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015e7e:	4e0a      	ldr	r6, [pc, #40]	; (8015ea8 <tcp_receive+0x598>)
 8015e80:	6933      	ldr	r3, [r6, #16]
 8015e82:	899f      	ldrh	r7, [r3, #12]
 8015e84:	2001      	movs	r0, #1
 8015e86:	f7fc fd6f 	bl	8012968 <lwip_htons>
 8015e8a:	6933      	ldr	r3, [r6, #16]
 8015e8c:	4307      	orrs	r7, r0
 8015e8e:	819f      	strh	r7, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015e90:	8937      	ldrh	r7, [r6, #8]
 8015e92:	6933      	ldr	r3, [r6, #16]
 8015e94:	8998      	ldrh	r0, [r3, #12]
 8015e96:	f7fc fd67 	bl	8012968 <lwip_htons>
 8015e9a:	f010 0f03 	tst.w	r0, #3
 8015e9e:	d0c9      	beq.n	8015e34 <tcp_receive+0x524>
 8015ea0:	2301      	movs	r3, #1
 8015ea2:	e7c8      	b.n	8015e36 <tcp_receive+0x526>
 8015ea4:	20007220 	.word	0x20007220
 8015ea8:	200009e4 	.word	0x200009e4
 8015eac:	0801ec70 	.word	0x0801ec70
 8015eb0:	0801ede0 	.word	0x0801ede0
 8015eb4:	0801cca4 	.word	0x0801cca4
 8015eb8:	0801edf0 	.word	0x0801edf0
 8015ebc:	0801ee00 	.word	0x0801ee00
 8015ec0:	20000a04 	.word	0x20000a04
 8015ec4:	20000a1a 	.word	0x20000a1a
 8015ec8:	0801ee10 	.word	0x0801ee10
 8015ecc:	200009fc 	.word	0x200009fc
 8015ed0:	20000a00 	.word	0x20000a00
            if (next &&
 8015ed4:	b14d      	cbz	r5, 8015eea <tcp_receive+0x5da>
                TCP_SEQ_GT(seqno + tcplen,
 8015ed6:	4b8d      	ldr	r3, [pc, #564]	; (801610c <tcp_receive+0x7fc>)
 8015ed8:	6819      	ldr	r1, [r3, #0]
 8015eda:	4b8d      	ldr	r3, [pc, #564]	; (8016110 <tcp_receive+0x800>)
 8015edc:	881b      	ldrh	r3, [r3, #0]
 8015ede:	440b      	add	r3, r1
 8015ee0:	692a      	ldr	r2, [r5, #16]
 8015ee2:	6852      	ldr	r2, [r2, #4]
 8015ee4:	1a9b      	subs	r3, r3, r2
            if (next &&
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	dc01      	bgt.n	8015eee <tcp_receive+0x5de>
            pcb->ooseq = next;
 8015eea:	6765      	str	r5, [r4, #116]	; 0x74
 8015eec:	e778      	b.n	8015de0 <tcp_receive+0x4d0>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015eee:	1a52      	subs	r2, r2, r1
 8015ef0:	4b88      	ldr	r3, [pc, #544]	; (8016114 <tcp_receive+0x804>)
 8015ef2:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015ef4:	691b      	ldr	r3, [r3, #16]
 8015ef6:	8998      	ldrh	r0, [r3, #12]
 8015ef8:	f7fc fd36 	bl	8012968 <lwip_htons>
 8015efc:	f010 0f02 	tst.w	r0, #2
 8015f00:	d003      	beq.n	8015f0a <tcp_receive+0x5fa>
                inseg.len -= 1;
 8015f02:	4a84      	ldr	r2, [pc, #528]	; (8016114 <tcp_receive+0x804>)
 8015f04:	8913      	ldrh	r3, [r2, #8]
 8015f06:	3b01      	subs	r3, #1
 8015f08:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8015f0a:	4e82      	ldr	r6, [pc, #520]	; (8016114 <tcp_receive+0x804>)
 8015f0c:	8931      	ldrh	r1, [r6, #8]
 8015f0e:	6870      	ldr	r0, [r6, #4]
 8015f10:	f7fd fe92 	bl	8013c38 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015f14:	8937      	ldrh	r7, [r6, #8]
 8015f16:	6933      	ldr	r3, [r6, #16]
 8015f18:	8998      	ldrh	r0, [r3, #12]
 8015f1a:	f7fc fd25 	bl	8012968 <lwip_htons>
 8015f1e:	f010 0f03 	tst.w	r0, #3
 8015f22:	d013      	beq.n	8015f4c <tcp_receive+0x63c>
 8015f24:	2301      	movs	r3, #1
 8015f26:	443b      	add	r3, r7
 8015f28:	b29b      	uxth	r3, r3
 8015f2a:	4a79      	ldr	r2, [pc, #484]	; (8016110 <tcp_receive+0x800>)
 8015f2c:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015f2e:	4a77      	ldr	r2, [pc, #476]	; (801610c <tcp_receive+0x7fc>)
 8015f30:	6812      	ldr	r2, [r2, #0]
 8015f32:	4413      	add	r3, r2
 8015f34:	692a      	ldr	r2, [r5, #16]
 8015f36:	6852      	ldr	r2, [r2, #4]
 8015f38:	4293      	cmp	r3, r2
 8015f3a:	d0d6      	beq.n	8015eea <tcp_receive+0x5da>
 8015f3c:	4b76      	ldr	r3, [pc, #472]	; (8016118 <tcp_receive+0x808>)
 8015f3e:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8015f42:	4976      	ldr	r1, [pc, #472]	; (801611c <tcp_receive+0x80c>)
 8015f44:	4876      	ldr	r0, [pc, #472]	; (8016120 <tcp_receive+0x810>)
 8015f46:	f005 fd9b 	bl	801ba80 <iprintf>
 8015f4a:	e7ce      	b.n	8015eea <tcp_receive+0x5da>
              tcplen = TCP_TCPLEN(&inseg);
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	e7ea      	b.n	8015f26 <tcp_receive+0x616>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015f50:	4b71      	ldr	r3, [pc, #452]	; (8016118 <tcp_receive+0x808>)
 8015f52:	f240 6207 	movw	r2, #1543	; 0x607
 8015f56:	4973      	ldr	r1, [pc, #460]	; (8016124 <tcp_receive+0x814>)
 8015f58:	4871      	ldr	r0, [pc, #452]	; (8016120 <tcp_receive+0x810>)
 8015f5a:	f005 fd91 	bl	801ba80 <iprintf>
 8015f5e:	e749      	b.n	8015df4 <tcp_receive+0x4e4>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015f60:	2300      	movs	r3, #0
 8015f62:	e035      	b.n	8015fd0 <tcp_receive+0x6c0>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015f64:	2300      	movs	r3, #0
 8015f66:	e041      	b.n	8015fec <tcp_receive+0x6dc>
 8015f68:	4b6b      	ldr	r3, [pc, #428]	; (8016118 <tcp_receive+0x808>)
 8015f6a:	f240 622b 	movw	r2, #1579	; 0x62b
 8015f6e:	496e      	ldr	r1, [pc, #440]	; (8016128 <tcp_receive+0x818>)
 8015f70:	486b      	ldr	r0, [pc, #428]	; (8016120 <tcp_receive+0x810>)
 8015f72:	f005 fd85 	bl	801ba80 <iprintf>
 8015f76:	e03c      	b.n	8015ff2 <tcp_receive+0x6e2>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8015f78:	2300      	movs	r3, #0
 8015f7a:	e043      	b.n	8016004 <tcp_receive+0x6f4>
              pbuf_cat(recv_data, cseg->p);
 8015f7c:	f7fd fed0 	bl	8013d20 <pbuf_cat>
            cseg->p = NULL;
 8015f80:	2300      	movs	r3, #0
 8015f82:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015f84:	692b      	ldr	r3, [r5, #16]
 8015f86:	8998      	ldrh	r0, [r3, #12]
 8015f88:	f7fc fcee 	bl	8012968 <lwip_htons>
 8015f8c:	f010 0f01 	tst.w	r0, #1
 8015f90:	d007      	beq.n	8015fa2 <tcp_receive+0x692>
            recv_flags |= TF_GOT_FIN;
 8015f92:	4a66      	ldr	r2, [pc, #408]	; (801612c <tcp_receive+0x81c>)
 8015f94:	7813      	ldrb	r3, [r2, #0]
 8015f96:	f043 0320 	orr.w	r3, r3, #32
 8015f9a:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8015f9c:	7d23      	ldrb	r3, [r4, #20]
 8015f9e:	2b04      	cmp	r3, #4
 8015fa0:	d042      	beq.n	8016028 <tcp_receive+0x718>
          pcb->ooseq = cseg->next;
 8015fa2:	682b      	ldr	r3, [r5, #0]
 8015fa4:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 8015fa6:	4628      	mov	r0, r5
 8015fa8:	f7fe fb0c 	bl	80145c4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015fac:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8015fae:	2d00      	cmp	r5, #0
 8015fb0:	d03d      	beq.n	801602e <tcp_receive+0x71e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8015fb2:	692a      	ldr	r2, [r5, #16]
 8015fb4:	6853      	ldr	r3, [r2, #4]
 8015fb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8015fb8:	428b      	cmp	r3, r1
 8015fba:	d138      	bne.n	801602e <tcp_receive+0x71e>
          seqno = pcb->ooseq->tcphdr->seqno;
 8015fbc:	4953      	ldr	r1, [pc, #332]	; (801610c <tcp_receive+0x7fc>)
 8015fbe:	600b      	str	r3, [r1, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015fc0:	892e      	ldrh	r6, [r5, #8]
 8015fc2:	8990      	ldrh	r0, [r2, #12]
 8015fc4:	f7fc fcd0 	bl	8012968 <lwip_htons>
 8015fc8:	f010 0f03 	tst.w	r0, #3
 8015fcc:	d0c8      	beq.n	8015f60 <tcp_receive+0x650>
 8015fce:	2301      	movs	r3, #1
 8015fd0:	199a      	adds	r2, r3, r6
 8015fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015fd4:	4413      	add	r3, r2
 8015fd6:	6263      	str	r3, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015fd8:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 8015fda:	892f      	ldrh	r7, [r5, #8]
 8015fdc:	692b      	ldr	r3, [r5, #16]
 8015fde:	8998      	ldrh	r0, [r3, #12]
 8015fe0:	f7fc fcc2 	bl	8012968 <lwip_htons>
 8015fe4:	f010 0f03 	tst.w	r0, #3
 8015fe8:	d0bc      	beq.n	8015f64 <tcp_receive+0x654>
 8015fea:	2301      	movs	r3, #1
 8015fec:	443b      	add	r3, r7
 8015fee:	429e      	cmp	r6, r3
 8015ff0:	d3ba      	bcc.n	8015f68 <tcp_receive+0x658>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8015ff2:	892e      	ldrh	r6, [r5, #8]
 8015ff4:	692b      	ldr	r3, [r5, #16]
 8015ff6:	8998      	ldrh	r0, [r3, #12]
 8015ff8:	f7fc fcb6 	bl	8012968 <lwip_htons>
 8015ffc:	f010 0f03 	tst.w	r0, #3
 8016000:	d0ba      	beq.n	8015f78 <tcp_receive+0x668>
 8016002:	2301      	movs	r3, #1
 8016004:	199a      	adds	r2, r3, r6
 8016006:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8016008:	1a9b      	subs	r3, r3, r2
 801600a:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801600c:	4620      	mov	r0, r4
 801600e:	f7fe fa63 	bl	80144d8 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8016012:	6869      	ldr	r1, [r5, #4]
 8016014:	890b      	ldrh	r3, [r1, #8]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d0b4      	beq.n	8015f84 <tcp_receive+0x674>
            if (recv_data) {
 801601a:	4b45      	ldr	r3, [pc, #276]	; (8016130 <tcp_receive+0x820>)
 801601c:	6818      	ldr	r0, [r3, #0]
 801601e:	2800      	cmp	r0, #0
 8016020:	d1ac      	bne.n	8015f7c <tcp_receive+0x66c>
              recv_data = cseg->p;
 8016022:	4b43      	ldr	r3, [pc, #268]	; (8016130 <tcp_receive+0x820>)
 8016024:	6019      	str	r1, [r3, #0]
 8016026:	e7ab      	b.n	8015f80 <tcp_receive+0x670>
              pcb->state = CLOSE_WAIT;
 8016028:	2307      	movs	r3, #7
 801602a:	7523      	strb	r3, [r4, #20]
 801602c:	e7b9      	b.n	8015fa2 <tcp_receive+0x692>
        tcp_ack(pcb);
 801602e:	8b63      	ldrh	r3, [r4, #26]
 8016030:	f013 0f01 	tst.w	r3, #1
 8016034:	d005      	beq.n	8016042 <tcp_receive+0x732>
 8016036:	f023 0301 	bic.w	r3, r3, #1
 801603a:	f043 0302 	orr.w	r3, r3, #2
 801603e:	8363      	strh	r3, [r4, #26]
 8016040:	e0fa      	b.n	8016238 <tcp_receive+0x928>
 8016042:	f043 0301 	orr.w	r3, r3, #1
 8016046:	8363      	strh	r3, [r4, #26]
 8016048:	e0f6      	b.n	8016238 <tcp_receive+0x928>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801604a:	4832      	ldr	r0, [pc, #200]	; (8016114 <tcp_receive+0x804>)
 801604c:	f7fe fae4 	bl	8014618 <tcp_seg_copy>
 8016050:	6760      	str	r0, [r4, #116]	; 0x74
 8016052:	e004      	b.n	801605e <tcp_receive+0x74e>
              if (inseg.len > next->len) {
 8016054:	4b2f      	ldr	r3, [pc, #188]	; (8016114 <tcp_receive+0x804>)
 8016056:	891a      	ldrh	r2, [r3, #8]
 8016058:	892b      	ldrh	r3, [r5, #8]
 801605a:	429a      	cmp	r2, r3
 801605c:	d803      	bhi.n	8016066 <tcp_receive+0x756>
        tcp_send_empty_ack(pcb);
 801605e:	4620      	mov	r0, r4
 8016060:	f001 ff2c 	bl	8017ebc <tcp_send_empty_ack>
 8016064:	e0e8      	b.n	8016238 <tcp_receive+0x928>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016066:	482b      	ldr	r0, [pc, #172]	; (8016114 <tcp_receive+0x804>)
 8016068:	f7fe fad6 	bl	8014618 <tcp_seg_copy>
                if (cseg != NULL) {
 801606c:	4603      	mov	r3, r0
 801606e:	2800      	cmp	r0, #0
 8016070:	d0f5      	beq.n	801605e <tcp_receive+0x74e>
                  if (prev != NULL) {
 8016072:	b12e      	cbz	r6, 8016080 <tcp_receive+0x770>
                    prev->next = cseg;
 8016074:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 8016076:	4629      	mov	r1, r5
 8016078:	4618      	mov	r0, r3
 801607a:	f7ff fbf5 	bl	8015868 <tcp_oos_insert_segment>
 801607e:	e7ee      	b.n	801605e <tcp_receive+0x74e>
                    pcb->ooseq = cseg;
 8016080:	6760      	str	r0, [r4, #116]	; 0x74
 8016082:	e7f8      	b.n	8016076 <tcp_receive+0x766>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016084:	1a99      	subs	r1, r3, r2
 8016086:	2900      	cmp	r1, #0
 8016088:	db2a      	blt.n	80160e0 <tcp_receive+0x7d0>
              if (next->next == NULL &&
 801608a:	6829      	ldr	r1, [r5, #0]
 801608c:	462e      	mov	r6, r5
 801608e:	2900      	cmp	r1, #0
 8016090:	d037      	beq.n	8016102 <tcp_receive+0x7f2>
 8016092:	460d      	mov	r5, r1
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016094:	2d00      	cmp	r5, #0
 8016096:	d0e2      	beq.n	801605e <tcp_receive+0x74e>
            if (seqno == next->tcphdr->seqno) {
 8016098:	6928      	ldr	r0, [r5, #16]
 801609a:	6842      	ldr	r2, [r0, #4]
 801609c:	4293      	cmp	r3, r2
 801609e:	d0d9      	beq.n	8016054 <tcp_receive+0x744>
              if (prev == NULL) {
 80160a0:	2e00      	cmp	r6, #0
 80160a2:	d0ef      	beq.n	8016084 <tcp_receive+0x774>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80160a4:	6931      	ldr	r1, [r6, #16]
 80160a6:	6849      	ldr	r1, [r1, #4]
 80160a8:	1a59      	subs	r1, r3, r1
 80160aa:	2901      	cmp	r1, #1
 80160ac:	d4ed      	bmi.n	801608a <tcp_receive+0x77a>
 80160ae:	1a99      	subs	r1, r3, r2
 80160b0:	3101      	adds	r1, #1
 80160b2:	2900      	cmp	r1, #0
 80160b4:	dce9      	bgt.n	801608a <tcp_receive+0x77a>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80160b6:	4817      	ldr	r0, [pc, #92]	; (8016114 <tcp_receive+0x804>)
 80160b8:	f7fe faae 	bl	8014618 <tcp_seg_copy>
                  if (cseg != NULL) {
 80160bc:	4607      	mov	r7, r0
 80160be:	2800      	cmp	r0, #0
 80160c0:	d0cd      	beq.n	801605e <tcp_receive+0x74e>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80160c2:	6933      	ldr	r3, [r6, #16]
 80160c4:	6859      	ldr	r1, [r3, #4]
 80160c6:	8933      	ldrh	r3, [r6, #8]
 80160c8:	440b      	add	r3, r1
 80160ca:	4a10      	ldr	r2, [pc, #64]	; (801610c <tcp_receive+0x7fc>)
 80160cc:	6812      	ldr	r2, [r2, #0]
 80160ce:	1a9b      	subs	r3, r3, r2
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	dc0f      	bgt.n	80160f4 <tcp_receive+0x7e4>
                    prev->next = cseg;
 80160d4:	6037      	str	r7, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 80160d6:	4629      	mov	r1, r5
 80160d8:	4638      	mov	r0, r7
 80160da:	f7ff fbc5 	bl	8015868 <tcp_oos_insert_segment>
 80160de:	e7be      	b.n	801605e <tcp_receive+0x74e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80160e0:	480c      	ldr	r0, [pc, #48]	; (8016114 <tcp_receive+0x804>)
 80160e2:	f7fe fa99 	bl	8014618 <tcp_seg_copy>
                  if (cseg != NULL) {
 80160e6:	2800      	cmp	r0, #0
 80160e8:	d0b9      	beq.n	801605e <tcp_receive+0x74e>
                    pcb->ooseq = cseg;
 80160ea:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80160ec:	4629      	mov	r1, r5
 80160ee:	f7ff fbbb 	bl	8015868 <tcp_oos_insert_segment>
 80160f2:	e7b4      	b.n	801605e <tcp_receive+0x74e>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80160f4:	1a52      	subs	r2, r2, r1
 80160f6:	b291      	uxth	r1, r2
 80160f8:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 80160fa:	6870      	ldr	r0, [r6, #4]
 80160fc:	f7fd fd9c 	bl	8013c38 <pbuf_realloc>
 8016100:	e7e8      	b.n	80160d4 <tcp_receive+0x7c4>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8016102:	1a9a      	subs	r2, r3, r2
              if (next->next == NULL &&
 8016104:	2a00      	cmp	r2, #0
 8016106:	dc15      	bgt.n	8016134 <tcp_receive+0x824>
 8016108:	460d      	mov	r5, r1
 801610a:	e7c3      	b.n	8016094 <tcp_receive+0x784>
 801610c:	20000a04 	.word	0x20000a04
 8016110:	20000a1a 	.word	0x20000a1a
 8016114:	200009e4 	.word	0x200009e4
 8016118:	0801ec70 	.word	0x0801ec70
 801611c:	0801ee48 	.word	0x0801ee48
 8016120:	0801cca4 	.word	0x0801cca4
 8016124:	0801ee84 	.word	0x0801ee84
 8016128:	0801eea4 	.word	0x0801eea4
 801612c:	20000a00 	.word	0x20000a00
 8016130:	200009fc 	.word	0x200009fc
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016134:	8980      	ldrh	r0, [r0, #12]
 8016136:	f7fc fc17 	bl	8012968 <lwip_htons>
 801613a:	f010 0f01 	tst.w	r0, #1
 801613e:	d18e      	bne.n	801605e <tcp_receive+0x74e>
                next->next = tcp_seg_copy(&inseg);
 8016140:	483e      	ldr	r0, [pc, #248]	; (801623c <tcp_receive+0x92c>)
 8016142:	f7fe fa69 	bl	8014618 <tcp_seg_copy>
 8016146:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8016148:	2800      	cmp	r0, #0
 801614a:	d088      	beq.n	801605e <tcp_receive+0x74e>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801614c:	692b      	ldr	r3, [r5, #16]
 801614e:	6859      	ldr	r1, [r3, #4]
 8016150:	892a      	ldrh	r2, [r5, #8]
 8016152:	440a      	add	r2, r1
 8016154:	4b3a      	ldr	r3, [pc, #232]	; (8016240 <tcp_receive+0x930>)
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	1ad2      	subs	r2, r2, r3
 801615a:	2a00      	cmp	r2, #0
 801615c:	dc40      	bgt.n	80161e0 <tcp_receive+0x8d0>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801615e:	4b39      	ldr	r3, [pc, #228]	; (8016244 <tcp_receive+0x934>)
 8016160:	881b      	ldrh	r3, [r3, #0]
 8016162:	4a37      	ldr	r2, [pc, #220]	; (8016240 <tcp_receive+0x930>)
 8016164:	6812      	ldr	r2, [r2, #0]
 8016166:	4413      	add	r3, r2
 8016168:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801616a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801616c:	440a      	add	r2, r1
 801616e:	1a9b      	subs	r3, r3, r2
 8016170:	2b00      	cmp	r3, #0
 8016172:	f77f af74 	ble.w	801605e <tcp_receive+0x74e>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8016176:	682b      	ldr	r3, [r5, #0]
 8016178:	691b      	ldr	r3, [r3, #16]
 801617a:	8998      	ldrh	r0, [r3, #12]
 801617c:	f7fc fbf4 	bl	8012968 <lwip_htons>
 8016180:	f010 0f01 	tst.w	r0, #1
 8016184:	d133      	bne.n	80161ee <tcp_receive+0x8de>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016186:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016188:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801618a:	4413      	add	r3, r2
 801618c:	b29b      	uxth	r3, r3
 801618e:	682a      	ldr	r2, [r5, #0]
 8016190:	492b      	ldr	r1, [pc, #172]	; (8016240 <tcp_receive+0x930>)
 8016192:	6809      	ldr	r1, [r1, #0]
 8016194:	1a5b      	subs	r3, r3, r1
 8016196:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8016198:	682b      	ldr	r3, [r5, #0]
 801619a:	8919      	ldrh	r1, [r3, #8]
 801619c:	6858      	ldr	r0, [r3, #4]
 801619e:	f7fd fd4b 	bl	8013c38 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80161a2:	682b      	ldr	r3, [r5, #0]
 80161a4:	891d      	ldrh	r5, [r3, #8]
 80161a6:	691b      	ldr	r3, [r3, #16]
 80161a8:	8998      	ldrh	r0, [r3, #12]
 80161aa:	f7fc fbdd 	bl	8012968 <lwip_htons>
 80161ae:	f010 0f03 	tst.w	r0, #3
 80161b2:	d02f      	beq.n	8016214 <tcp_receive+0x904>
 80161b4:	2301      	movs	r3, #1
 80161b6:	442b      	add	r3, r5
 80161b8:	b29b      	uxth	r3, r3
 80161ba:	4a22      	ldr	r2, [pc, #136]	; (8016244 <tcp_receive+0x934>)
 80161bc:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80161be:	4a20      	ldr	r2, [pc, #128]	; (8016240 <tcp_receive+0x930>)
 80161c0:	6812      	ldr	r2, [r2, #0]
 80161c2:	4413      	add	r3, r2
 80161c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80161c6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80161c8:	440a      	add	r2, r1
 80161ca:	4293      	cmp	r3, r2
 80161cc:	f43f af47 	beq.w	801605e <tcp_receive+0x74e>
 80161d0:	4b1d      	ldr	r3, [pc, #116]	; (8016248 <tcp_receive+0x938>)
 80161d2:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80161d6:	491d      	ldr	r1, [pc, #116]	; (801624c <tcp_receive+0x93c>)
 80161d8:	481d      	ldr	r0, [pc, #116]	; (8016250 <tcp_receive+0x940>)
 80161da:	f005 fc51 	bl	801ba80 <iprintf>
 80161de:	e73e      	b.n	801605e <tcp_receive+0x74e>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80161e0:	1a5b      	subs	r3, r3, r1
 80161e2:	b299      	uxth	r1, r3
 80161e4:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 80161e6:	6868      	ldr	r0, [r5, #4]
 80161e8:	f7fd fd26 	bl	8013c38 <pbuf_realloc>
 80161ec:	e7b7      	b.n	801615e <tcp_receive+0x84e>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80161ee:	682b      	ldr	r3, [r5, #0]
 80161f0:	691b      	ldr	r3, [r3, #16]
 80161f2:	8998      	ldrh	r0, [r3, #12]
 80161f4:	b206      	sxth	r6, r0
 80161f6:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 80161fa:	b280      	uxth	r0, r0
 80161fc:	f7fc fbb4 	bl	8012968 <lwip_htons>
 8016200:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8016204:	f7fc fbb0 	bl	8012968 <lwip_htons>
 8016208:	b203      	sxth	r3, r0
 801620a:	682a      	ldr	r2, [r5, #0]
 801620c:	6912      	ldr	r2, [r2, #16]
 801620e:	431e      	orrs	r6, r3
 8016210:	8196      	strh	r6, [r2, #12]
 8016212:	e7b8      	b.n	8016186 <tcp_receive+0x876>
                    tcplen = TCP_TCPLEN(next->next);
 8016214:	2300      	movs	r3, #0
 8016216:	e7ce      	b.n	80161b6 <tcp_receive+0x8a6>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8016218:	4b09      	ldr	r3, [pc, #36]	; (8016240 <tcp_receive+0x930>)
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801621e:	1a99      	subs	r1, r3, r2
 8016220:	2900      	cmp	r1, #0
 8016222:	db05      	blt.n	8016230 <tcp_receive+0x920>
 8016224:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8016226:	440a      	add	r2, r1
 8016228:	1a9b      	subs	r3, r3, r2
 801622a:	3301      	adds	r3, #1
 801622c:	2b00      	cmp	r3, #0
 801622e:	dd03      	ble.n	8016238 <tcp_receive+0x928>
      tcp_ack_now(pcb);
 8016230:	8b63      	ldrh	r3, [r4, #26]
 8016232:	f043 0302 	orr.w	r3, r3, #2
 8016236:	8363      	strh	r3, [r4, #26]
}
 8016238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801623a:	bf00      	nop
 801623c:	200009e4 	.word	0x200009e4
 8016240:	20000a04 	.word	0x20000a04
 8016244:	20000a1a 	.word	0x20000a1a
 8016248:	0801ec70 	.word	0x0801ec70
 801624c:	0801ee10 	.word	0x0801ee10
 8016250:	0801cca4 	.word	0x0801cca4

08016254 <tcp_process>:
{
 8016254:	b570      	push	{r4, r5, r6, lr}
 8016256:	b084      	sub	sp, #16
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8016258:	4604      	mov	r4, r0
 801625a:	b1c8      	cbz	r0, 8016290 <tcp_process+0x3c>
  if (flags & TCP_RST) {
 801625c:	4b99      	ldr	r3, [pc, #612]	; (80164c4 <tcp_process+0x270>)
 801625e:	781b      	ldrb	r3, [r3, #0]
 8016260:	f013 0f04 	tst.w	r3, #4
 8016264:	d03a      	beq.n	80162dc <tcp_process+0x88>
    if (pcb->state == SYN_SENT) {
 8016266:	7d21      	ldrb	r1, [r4, #20]
 8016268:	2902      	cmp	r1, #2
 801626a:	d019      	beq.n	80162a0 <tcp_process+0x4c>
      if (seqno == pcb->rcv_nxt) {
 801626c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801626e:	4b96      	ldr	r3, [pc, #600]	; (80164c8 <tcp_process+0x274>)
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	429a      	cmp	r2, r3
 8016274:	d01d      	beq.n	80162b2 <tcp_process+0x5e>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016276:	1a99      	subs	r1, r3, r2
 8016278:	2900      	cmp	r1, #0
 801627a:	db16      	blt.n	80162aa <tcp_process+0x56>
 801627c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801627e:	440a      	add	r2, r1
 8016280:	1a9b      	subs	r3, r3, r2
 8016282:	2b00      	cmp	r3, #0
 8016284:	dc11      	bgt.n	80162aa <tcp_process+0x56>
        tcp_ack_now(pcb);
 8016286:	8b63      	ldrh	r3, [r4, #26]
 8016288:	f043 0302 	orr.w	r3, r3, #2
 801628c:	8363      	strh	r3, [r4, #26]
    if (acceptable) {
 801628e:	e00c      	b.n	80162aa <tcp_process+0x56>
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8016290:	4b8e      	ldr	r3, [pc, #568]	; (80164cc <tcp_process+0x278>)
 8016292:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8016296:	498e      	ldr	r1, [pc, #568]	; (80164d0 <tcp_process+0x27c>)
 8016298:	488e      	ldr	r0, [pc, #568]	; (80164d4 <tcp_process+0x280>)
 801629a:	f005 fbf1 	bl	801ba80 <iprintf>
 801629e:	e7dd      	b.n	801625c <tcp_process+0x8>
      if (ackno == pcb->snd_nxt) {
 80162a0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80162a2:	4b8d      	ldr	r3, [pc, #564]	; (80164d8 <tcp_process+0x284>)
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	429a      	cmp	r2, r3
 80162a8:	d003      	beq.n	80162b2 <tcp_process+0x5e>
      return ERR_OK;
 80162aa:	2500      	movs	r5, #0
}
 80162ac:	4628      	mov	r0, r5
 80162ae:	b004      	add	sp, #16
 80162b0:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80162b2:	b159      	cbz	r1, 80162cc <tcp_process+0x78>
      recv_flags |= TF_RESET;
 80162b4:	4a89      	ldr	r2, [pc, #548]	; (80164dc <tcp_process+0x288>)
 80162b6:	7813      	ldrb	r3, [r2, #0]
 80162b8:	f043 0308 	orr.w	r3, r3, #8
 80162bc:	7013      	strb	r3, [r2, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80162be:	8b63      	ldrh	r3, [r4, #26]
 80162c0:	f023 0301 	bic.w	r3, r3, #1
 80162c4:	8363      	strh	r3, [r4, #26]
      return ERR_RST;
 80162c6:	f06f 050d 	mvn.w	r5, #13
 80162ca:	e7ef      	b.n	80162ac <tcp_process+0x58>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80162cc:	4b7f      	ldr	r3, [pc, #508]	; (80164cc <tcp_process+0x278>)
 80162ce:	f44f 724e 	mov.w	r2, #824	; 0x338
 80162d2:	4983      	ldr	r1, [pc, #524]	; (80164e0 <tcp_process+0x28c>)
 80162d4:	487f      	ldr	r0, [pc, #508]	; (80164d4 <tcp_process+0x280>)
 80162d6:	f005 fbd3 	bl	801ba80 <iprintf>
 80162da:	e7eb      	b.n	80162b4 <tcp_process+0x60>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80162dc:	f013 0f02 	tst.w	r3, #2
 80162e0:	d004      	beq.n	80162ec <tcp_process+0x98>
 80162e2:	7d23      	ldrb	r3, [r4, #20]
 80162e4:	3b02      	subs	r3, #2
 80162e6:	b2db      	uxtb	r3, r3
 80162e8:	2b01      	cmp	r3, #1
 80162ea:	d81d      	bhi.n	8016328 <tcp_process+0xd4>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80162ec:	8b63      	ldrh	r3, [r4, #26]
 80162ee:	f013 0f10 	tst.w	r3, #16
 80162f2:	d102      	bne.n	80162fa <tcp_process+0xa6>
    pcb->tmr = tcp_ticks;
 80162f4:	4b7b      	ldr	r3, [pc, #492]	; (80164e4 <tcp_process+0x290>)
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 80162fa:	2300      	movs	r3, #0
 80162fc:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
  pcb->persist_probe = 0;
 8016300:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  tcp_parseopt(pcb);
 8016304:	4620      	mov	r0, r4
 8016306:	f7ff f8c9 	bl	801549c <tcp_parseopt>
  switch (pcb->state) {
 801630a:	7d23      	ldrb	r3, [r4, #20]
 801630c:	3b02      	subs	r3, #2
 801630e:	2b07      	cmp	r3, #7
 8016310:	f200 823d 	bhi.w	801678e <tcp_process+0x53a>
 8016314:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016318:	00b2000e 	.word	0x00b2000e
 801631c:	016a0159 	.word	0x016a0159
 8016320:	015901c0 	.word	0x015901c0
 8016324:	022101ee 	.word	0x022101ee
    tcp_ack_now(pcb);
 8016328:	8b63      	ldrh	r3, [r4, #26]
 801632a:	f043 0302 	orr.w	r3, r3, #2
 801632e:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 8016330:	2500      	movs	r5, #0
 8016332:	e7bb      	b.n	80162ac <tcp_process+0x58>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8016334:	4b63      	ldr	r3, [pc, #396]	; (80164c4 <tcp_process+0x270>)
 8016336:	781b      	ldrb	r3, [r3, #0]
 8016338:	f003 0212 	and.w	r2, r3, #18
 801633c:	2a12      	cmp	r2, #18
 801633e:	d004      	beq.n	801634a <tcp_process+0xf6>
      else if (flags & TCP_ACK) {
 8016340:	f013 0f10 	tst.w	r3, #16
 8016344:	d17b      	bne.n	801643e <tcp_process+0x1ea>
  return ERR_OK;
 8016346:	2500      	movs	r5, #0
 8016348:	e7b0      	b.n	80162ac <tcp_process+0x58>
          && (ackno == pcb->lastack + 1)) {
 801634a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801634c:	3201      	adds	r2, #1
 801634e:	4962      	ldr	r1, [pc, #392]	; (80164d8 <tcp_process+0x284>)
 8016350:	6809      	ldr	r1, [r1, #0]
 8016352:	428a      	cmp	r2, r1
 8016354:	d1f4      	bne.n	8016340 <tcp_process+0xec>
        pcb->rcv_nxt = seqno + 1;
 8016356:	4b5c      	ldr	r3, [pc, #368]	; (80164c8 <tcp_process+0x274>)
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	1c5a      	adds	r2, r3, #1
 801635c:	6262      	str	r2, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801635e:	62e2      	str	r2, [r4, #44]	; 0x2c
        pcb->lastack = ackno;
 8016360:	6461      	str	r1, [r4, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8016362:	4a61      	ldr	r2, [pc, #388]	; (80164e8 <tcp_process+0x294>)
 8016364:	6812      	ldr	r2, [r2, #0]
 8016366:	89d2      	ldrh	r2, [r2, #14]
 8016368:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801636c:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8016370:	3b01      	subs	r3, #1
 8016372:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8016374:	2304      	movs	r3, #4
 8016376:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8016378:	8e66      	ldrh	r6, [r4, #50]	; 0x32
 801637a:	18e5      	adds	r5, r4, r3
 801637c:	4628      	mov	r0, r5
 801637e:	f004 fca9 	bl	801acd4 <ip4_route>
 8016382:	4601      	mov	r1, r0
 8016384:	462a      	mov	r2, r5
 8016386:	4630      	mov	r0, r6
 8016388:	f7fe fa06 	bl	8014798 <tcp_eff_send_mss_netif>
 801638c:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801638e:	0042      	lsls	r2, r0, #1
 8016390:	f241 131c 	movw	r3, #4380	; 0x111c
 8016394:	4293      	cmp	r3, r2
 8016396:	bf38      	it	cc
 8016398:	4613      	movcc	r3, r2
 801639a:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
 801639e:	d92b      	bls.n	80163f8 <tcp_process+0x1a4>
 80163a0:	0083      	lsls	r3, r0, #2
 80163a2:	b29b      	uxth	r3, r3
 80163a4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80163a8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 80163ac:	b373      	cbz	r3, 801640c <tcp_process+0x1b8>
        --pcb->snd_queuelen;
 80163ae:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 80163b2:	3b01      	subs	r3, #1
 80163b4:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 80163b8:	6f25      	ldr	r5, [r4, #112]	; 0x70
        if (rseg == NULL) {
 80163ba:	b37d      	cbz	r5, 801641c <tcp_process+0x1c8>
          pcb->unacked = rseg->next;
 80163bc:	682b      	ldr	r3, [r5, #0]
 80163be:	6723      	str	r3, [r4, #112]	; 0x70
        tcp_seg_free(rseg);
 80163c0:	4628      	mov	r0, r5
 80163c2:	f7fe f8ff 	bl	80145c4 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 80163c6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d034      	beq.n	8016436 <tcp_process+0x1e2>
          pcb->rtime = 0;
 80163cc:	2300      	movs	r3, #0
 80163ce:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 80163d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80163d4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80163d8:	b143      	cbz	r3, 80163ec <tcp_process+0x198>
 80163da:	2200      	movs	r2, #0
 80163dc:	4621      	mov	r1, r4
 80163de:	6920      	ldr	r0, [r4, #16]
 80163e0:	4798      	blx	r3
 80163e2:	4605      	mov	r5, r0
        if (err == ERR_ABRT) {
 80163e4:	f110 0f0d 	cmn.w	r0, #13
 80163e8:	f43f af60 	beq.w	80162ac <tcp_process+0x58>
        tcp_ack_now(pcb);
 80163ec:	8b63      	ldrh	r3, [r4, #26]
 80163ee:	f043 0302 	orr.w	r3, r3, #2
 80163f2:	8363      	strh	r3, [r4, #26]
  return ERR_OK;
 80163f4:	2500      	movs	r5, #0
        tcp_ack_now(pcb);
 80163f6:	e759      	b.n	80162ac <tcp_process+0x58>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80163f8:	f241 131c 	movw	r3, #4380	; 0x111c
 80163fc:	429a      	cmp	r2, r3
 80163fe:	d902      	bls.n	8016406 <tcp_process+0x1b2>
 8016400:	0043      	lsls	r3, r0, #1
 8016402:	b29b      	uxth	r3, r3
 8016404:	e7ce      	b.n	80163a4 <tcp_process+0x150>
 8016406:	f241 131c 	movw	r3, #4380	; 0x111c
 801640a:	e7cb      	b.n	80163a4 <tcp_process+0x150>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801640c:	4b2f      	ldr	r3, [pc, #188]	; (80164cc <tcp_process+0x278>)
 801640e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8016412:	4936      	ldr	r1, [pc, #216]	; (80164ec <tcp_process+0x298>)
 8016414:	482f      	ldr	r0, [pc, #188]	; (80164d4 <tcp_process+0x280>)
 8016416:	f005 fb33 	bl	801ba80 <iprintf>
 801641a:	e7c8      	b.n	80163ae <tcp_process+0x15a>
          rseg = pcb->unsent;
 801641c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801641e:	b115      	cbz	r5, 8016426 <tcp_process+0x1d2>
          pcb->unsent = rseg->next;
 8016420:	682b      	ldr	r3, [r5, #0]
 8016422:	66e3      	str	r3, [r4, #108]	; 0x6c
 8016424:	e7cc      	b.n	80163c0 <tcp_process+0x16c>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8016426:	4b29      	ldr	r3, [pc, #164]	; (80164cc <tcp_process+0x278>)
 8016428:	f44f 725d 	mov.w	r2, #884	; 0x374
 801642c:	4930      	ldr	r1, [pc, #192]	; (80164f0 <tcp_process+0x29c>)
 801642e:	4829      	ldr	r0, [pc, #164]	; (80164d4 <tcp_process+0x280>)
 8016430:	f005 fb26 	bl	801ba80 <iprintf>
 8016434:	e7f4      	b.n	8016420 <tcp_process+0x1cc>
          pcb->rtime = -1;
 8016436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801643a:	8623      	strh	r3, [r4, #48]	; 0x30
 801643c:	e7ca      	b.n	80163d4 <tcp_process+0x180>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801643e:	4b2a      	ldr	r3, [pc, #168]	; (80164e8 <tcp_process+0x294>)
 8016440:	6819      	ldr	r1, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016442:	4b2c      	ldr	r3, [pc, #176]	; (80164f4 <tcp_process+0x2a0>)
 8016444:	4a2c      	ldr	r2, [pc, #176]	; (80164f8 <tcp_process+0x2a4>)
 8016446:	8810      	ldrh	r0, [r2, #0]
 8016448:	4a1f      	ldr	r2, [pc, #124]	; (80164c8 <tcp_process+0x274>)
 801644a:	6812      	ldr	r2, [r2, #0]
 801644c:	880d      	ldrh	r5, [r1, #0]
 801644e:	9502      	str	r5, [sp, #8]
 8016450:	8849      	ldrh	r1, [r1, #2]
 8016452:	9101      	str	r1, [sp, #4]
 8016454:	1f19      	subs	r1, r3, #4
 8016456:	9100      	str	r1, [sp, #0]
 8016458:	4402      	add	r2, r0
 801645a:	491f      	ldr	r1, [pc, #124]	; (80164d8 <tcp_process+0x284>)
 801645c:	6809      	ldr	r1, [r1, #0]
 801645e:	4620      	mov	r0, r4
 8016460:	f001 fce4 	bl	8017e2c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8016464:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8016468:	2b05      	cmp	r3, #5
 801646a:	d901      	bls.n	8016470 <tcp_process+0x21c>
  return ERR_OK;
 801646c:	2500      	movs	r5, #0
 801646e:	e71d      	b.n	80162ac <tcp_process+0x58>
          pcb->rtime = 0;
 8016470:	2500      	movs	r5, #0
 8016472:	8625      	strh	r5, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8016474:	4620      	mov	r0, r4
 8016476:	f001 fecf 	bl	8018218 <tcp_rexmit_rto>
 801647a:	e717      	b.n	80162ac <tcp_process+0x58>
      if (flags & TCP_ACK) {
 801647c:	4b11      	ldr	r3, [pc, #68]	; (80164c4 <tcp_process+0x270>)
 801647e:	781b      	ldrb	r3, [r3, #0]
 8016480:	f013 0f10 	tst.w	r3, #16
 8016484:	f000 8090 	beq.w	80165a8 <tcp_process+0x354>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016488:	4b13      	ldr	r3, [pc, #76]	; (80164d8 <tcp_process+0x284>)
 801648a:	6819      	ldr	r1, [r3, #0]
 801648c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801648e:	1acb      	subs	r3, r1, r3
 8016490:	2b01      	cmp	r3, #1
 8016492:	d403      	bmi.n	801649c <tcp_process+0x248>
 8016494:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8016496:	1acb      	subs	r3, r1, r3
 8016498:	2b00      	cmp	r3, #0
 801649a:	dd2f      	ble.n	80164fc <tcp_process+0x2a8>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801649c:	4b12      	ldr	r3, [pc, #72]	; (80164e8 <tcp_process+0x294>)
 801649e:	6818      	ldr	r0, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80164a0:	4b14      	ldr	r3, [pc, #80]	; (80164f4 <tcp_process+0x2a0>)
 80164a2:	4a15      	ldr	r2, [pc, #84]	; (80164f8 <tcp_process+0x2a4>)
 80164a4:	8815      	ldrh	r5, [r2, #0]
 80164a6:	4a08      	ldr	r2, [pc, #32]	; (80164c8 <tcp_process+0x274>)
 80164a8:	6812      	ldr	r2, [r2, #0]
 80164aa:	8806      	ldrh	r6, [r0, #0]
 80164ac:	9602      	str	r6, [sp, #8]
 80164ae:	8840      	ldrh	r0, [r0, #2]
 80164b0:	9001      	str	r0, [sp, #4]
 80164b2:	1f18      	subs	r0, r3, #4
 80164b4:	9000      	str	r0, [sp, #0]
 80164b6:	442a      	add	r2, r5
 80164b8:	4620      	mov	r0, r4
 80164ba:	f001 fcb7 	bl	8017e2c <tcp_rst>
  return ERR_OK;
 80164be:	2500      	movs	r5, #0
 80164c0:	e6f4      	b.n	80162ac <tcp_process+0x58>
 80164c2:	bf00      	nop
 80164c4:	200009e0 	.word	0x200009e0
 80164c8:	20000a04 	.word	0x20000a04
 80164cc:	0801ec70 	.word	0x0801ec70
 80164d0:	0801eecc 	.word	0x0801eecc
 80164d4:	0801cca4 	.word	0x0801cca4
 80164d8:	200009dc 	.word	0x200009dc
 80164dc:	20000a00 	.word	0x20000a00
 80164e0:	0801eee8 	.word	0x0801eee8
 80164e4:	20007220 	.word	0x20007220
 80164e8:	20000a0c 	.word	0x20000a0c
 80164ec:	0801ef08 	.word	0x0801ef08
 80164f0:	0801ef20 	.word	0x0801ef20
 80164f4:	20003c7c 	.word	0x20003c7c
 80164f8:	20000a1a 	.word	0x20000a1a
          pcb->state = ESTABLISHED;
 80164fc:	2304      	movs	r3, #4
 80164fe:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 8016500:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8016502:	2b00      	cmp	r3, #0
 8016504:	d037      	beq.n	8016576 <tcp_process+0x322>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8016506:	699b      	ldr	r3, [r3, #24]
 8016508:	b36b      	cbz	r3, 8016566 <tcp_process+0x312>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801650a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801650c:	699b      	ldr	r3, [r3, #24]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d039      	beq.n	8016586 <tcp_process+0x332>
 8016512:	2200      	movs	r2, #0
 8016514:	4621      	mov	r1, r4
 8016516:	6920      	ldr	r0, [r4, #16]
 8016518:	4798      	blx	r3
          if (err != ERR_OK) {
 801651a:	4605      	mov	r5, r0
 801651c:	bb68      	cbnz	r0, 801657a <tcp_process+0x326>
          tcp_receive(pcb);
 801651e:	4620      	mov	r0, r4
 8016520:	f7ff f9f6 	bl	8015910 <tcp_receive>
          if (recv_acked != 0) {
 8016524:	4ba0      	ldr	r3, [pc, #640]	; (80167a8 <tcp_process+0x554>)
 8016526:	881b      	ldrh	r3, [r3, #0]
 8016528:	b113      	cbz	r3, 8016530 <tcp_process+0x2dc>
            recv_acked--;
 801652a:	3b01      	subs	r3, #1
 801652c:	4a9e      	ldr	r2, [pc, #632]	; (80167a8 <tcp_process+0x554>)
 801652e:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016530:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8016532:	0059      	lsls	r1, r3, #1
 8016534:	f241 121c 	movw	r2, #4380	; 0x111c
 8016538:	428a      	cmp	r2, r1
 801653a:	bf38      	it	cc
 801653c:	460a      	movcc	r2, r1
 801653e:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 8016542:	d927      	bls.n	8016594 <tcp_process+0x340>
 8016544:	009b      	lsls	r3, r3, #2
 8016546:	b29b      	uxth	r3, r3
 8016548:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 801654c:	4b97      	ldr	r3, [pc, #604]	; (80167ac <tcp_process+0x558>)
 801654e:	781b      	ldrb	r3, [r3, #0]
 8016550:	f013 0f20 	tst.w	r3, #32
 8016554:	f43f aeaa 	beq.w	80162ac <tcp_process+0x58>
            tcp_ack_now(pcb);
 8016558:	8b63      	ldrh	r3, [r4, #26]
 801655a:	f043 0302 	orr.w	r3, r3, #2
 801655e:	8363      	strh	r3, [r4, #26]
            pcb->state = CLOSE_WAIT;
 8016560:	2307      	movs	r3, #7
 8016562:	7523      	strb	r3, [r4, #20]
 8016564:	e6a2      	b.n	80162ac <tcp_process+0x58>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8016566:	4b92      	ldr	r3, [pc, #584]	; (80167b0 <tcp_process+0x55c>)
 8016568:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801656c:	4991      	ldr	r1, [pc, #580]	; (80167b4 <tcp_process+0x560>)
 801656e:	4892      	ldr	r0, [pc, #584]	; (80167b8 <tcp_process+0x564>)
 8016570:	f005 fa86 	bl	801ba80 <iprintf>
 8016574:	e7c9      	b.n	801650a <tcp_process+0x2b6>
            err = ERR_VAL;
 8016576:	f06f 0505 	mvn.w	r5, #5
            if (err != ERR_ABRT) {
 801657a:	f115 0f0d 	cmn.w	r5, #13
 801657e:	d105      	bne.n	801658c <tcp_process+0x338>
            return ERR_ABRT;
 8016580:	f06f 050c 	mvn.w	r5, #12
 8016584:	e692      	b.n	80162ac <tcp_process+0x58>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8016586:	f06f 050f 	mvn.w	r5, #15
 801658a:	e7f6      	b.n	801657a <tcp_process+0x326>
              tcp_abort(pcb);
 801658c:	4620      	mov	r0, r4
 801658e:	f7fe fa4d 	bl	8014a2c <tcp_abort>
 8016592:	e7f5      	b.n	8016580 <tcp_process+0x32c>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016594:	f241 121c 	movw	r2, #4380	; 0x111c
 8016598:	4291      	cmp	r1, r2
 801659a:	d902      	bls.n	80165a2 <tcp_process+0x34e>
 801659c:	005b      	lsls	r3, r3, #1
 801659e:	b29b      	uxth	r3, r3
 80165a0:	e7d2      	b.n	8016548 <tcp_process+0x2f4>
 80165a2:	f241 131c 	movw	r3, #4380	; 0x111c
 80165a6:	e7cf      	b.n	8016548 <tcp_process+0x2f4>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80165a8:	f013 0f02 	tst.w	r3, #2
 80165ac:	f000 80f1 	beq.w	8016792 <tcp_process+0x53e>
 80165b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80165b2:	3b01      	subs	r3, #1
 80165b4:	4a81      	ldr	r2, [pc, #516]	; (80167bc <tcp_process+0x568>)
 80165b6:	6812      	ldr	r2, [r2, #0]
 80165b8:	4293      	cmp	r3, r2
 80165ba:	d001      	beq.n	80165c0 <tcp_process+0x36c>
  return ERR_OK;
 80165bc:	2500      	movs	r5, #0
 80165be:	e675      	b.n	80162ac <tcp_process+0x58>
        tcp_rexmit(pcb);
 80165c0:	4620      	mov	r0, r4
 80165c2:	f001 fbb3 	bl	8017d2c <tcp_rexmit>
  return ERR_OK;
 80165c6:	2500      	movs	r5, #0
 80165c8:	e670      	b.n	80162ac <tcp_process+0x58>
      tcp_receive(pcb);
 80165ca:	4620      	mov	r0, r4
 80165cc:	f7ff f9a0 	bl	8015910 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80165d0:	4b76      	ldr	r3, [pc, #472]	; (80167ac <tcp_process+0x558>)
 80165d2:	781b      	ldrb	r3, [r3, #0]
 80165d4:	f013 0f20 	tst.w	r3, #32
 80165d8:	f000 80dd 	beq.w	8016796 <tcp_process+0x542>
        tcp_ack_now(pcb);
 80165dc:	8b63      	ldrh	r3, [r4, #26]
 80165de:	f043 0302 	orr.w	r3, r3, #2
 80165e2:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 80165e4:	2307      	movs	r3, #7
 80165e6:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 80165e8:	2500      	movs	r5, #0
 80165ea:	e65f      	b.n	80162ac <tcp_process+0x58>
      tcp_receive(pcb);
 80165ec:	4620      	mov	r0, r4
 80165ee:	f7ff f98f 	bl	8015910 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80165f2:	4b6e      	ldr	r3, [pc, #440]	; (80167ac <tcp_process+0x558>)
 80165f4:	781b      	ldrb	r3, [r3, #0]
 80165f6:	f013 0f20 	tst.w	r3, #32
 80165fa:	d038      	beq.n	801666e <tcp_process+0x41a>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80165fc:	4b70      	ldr	r3, [pc, #448]	; (80167c0 <tcp_process+0x56c>)
 80165fe:	781b      	ldrb	r3, [r3, #0]
 8016600:	f013 0f10 	tst.w	r3, #16
 8016604:	d004      	beq.n	8016610 <tcp_process+0x3bc>
 8016606:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8016608:	4b6e      	ldr	r3, [pc, #440]	; (80167c4 <tcp_process+0x570>)
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	429a      	cmp	r2, r3
 801660e:	d007      	beq.n	8016620 <tcp_process+0x3cc>
          tcp_ack_now(pcb);
 8016610:	8b63      	ldrh	r3, [r4, #26]
 8016612:	f043 0302 	orr.w	r3, r3, #2
 8016616:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 8016618:	2308      	movs	r3, #8
 801661a:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 801661c:	2500      	movs	r5, #0
 801661e:	e645      	b.n	80162ac <tcp_process+0x58>
            pcb->unsent == NULL) {
 8016620:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016622:	2b00      	cmp	r3, #0
 8016624:	d1f4      	bne.n	8016610 <tcp_process+0x3bc>
          tcp_ack_now(pcb);
 8016626:	8b63      	ldrh	r3, [r4, #26]
 8016628:	f043 0302 	orr.w	r3, r3, #2
 801662c:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 801662e:	4620      	mov	r0, r4
 8016630:	f7fe f8dc 	bl	80147ec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8016634:	4b64      	ldr	r3, [pc, #400]	; (80167c8 <tcp_process+0x574>)
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	429c      	cmp	r4, r3
 801663a:	d005      	beq.n	8016648 <tcp_process+0x3f4>
 801663c:	b153      	cbz	r3, 8016654 <tcp_process+0x400>
 801663e:	68da      	ldr	r2, [r3, #12]
 8016640:	4294      	cmp	r4, r2
 8016642:	d005      	beq.n	8016650 <tcp_process+0x3fc>
 8016644:	4613      	mov	r3, r2
 8016646:	e7f9      	b.n	801663c <tcp_process+0x3e8>
 8016648:	68da      	ldr	r2, [r3, #12]
 801664a:	4b5f      	ldr	r3, [pc, #380]	; (80167c8 <tcp_process+0x574>)
 801664c:	601a      	str	r2, [r3, #0]
 801664e:	e001      	b.n	8016654 <tcp_process+0x400>
 8016650:	68e2      	ldr	r2, [r4, #12]
 8016652:	60da      	str	r2, [r3, #12]
 8016654:	4b5d      	ldr	r3, [pc, #372]	; (80167cc <tcp_process+0x578>)
 8016656:	2201      	movs	r2, #1
 8016658:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801665a:	230a      	movs	r3, #10
 801665c:	7523      	strb	r3, [r4, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801665e:	4b5c      	ldr	r3, [pc, #368]	; (80167d0 <tcp_process+0x57c>)
 8016660:	681a      	ldr	r2, [r3, #0]
 8016662:	60e2      	str	r2, [r4, #12]
 8016664:	601c      	str	r4, [r3, #0]
 8016666:	f001 ff01 	bl	801846c <tcp_timer_needed>
  return ERR_OK;
 801666a:	2500      	movs	r5, #0
          TCP_REG(&tcp_tw_pcbs, pcb);
 801666c:	e61e      	b.n	80162ac <tcp_process+0x58>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801666e:	4b54      	ldr	r3, [pc, #336]	; (80167c0 <tcp_process+0x56c>)
 8016670:	781b      	ldrb	r3, [r3, #0]
 8016672:	f013 0f10 	tst.w	r3, #16
 8016676:	f000 8090 	beq.w	801679a <tcp_process+0x546>
 801667a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801667c:	4b51      	ldr	r3, [pc, #324]	; (80167c4 <tcp_process+0x570>)
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	429a      	cmp	r2, r3
 8016682:	d001      	beq.n	8016688 <tcp_process+0x434>
  return ERR_OK;
 8016684:	2500      	movs	r5, #0
 8016686:	e611      	b.n	80162ac <tcp_process+0x58>
                 pcb->unsent == NULL) {
 8016688:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801668a:	b10b      	cbz	r3, 8016690 <tcp_process+0x43c>
  return ERR_OK;
 801668c:	2500      	movs	r5, #0
 801668e:	e60d      	b.n	80162ac <tcp_process+0x58>
        pcb->state = FIN_WAIT_2;
 8016690:	2306      	movs	r3, #6
 8016692:	7523      	strb	r3, [r4, #20]
  return ERR_OK;
 8016694:	2500      	movs	r5, #0
 8016696:	e609      	b.n	80162ac <tcp_process+0x58>
      tcp_receive(pcb);
 8016698:	4620      	mov	r0, r4
 801669a:	f7ff f939 	bl	8015910 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801669e:	4b43      	ldr	r3, [pc, #268]	; (80167ac <tcp_process+0x558>)
 80166a0:	781b      	ldrb	r3, [r3, #0]
 80166a2:	f013 0f20 	tst.w	r3, #32
 80166a6:	d101      	bne.n	80166ac <tcp_process+0x458>
  return ERR_OK;
 80166a8:	2500      	movs	r5, #0
 80166aa:	e5ff      	b.n	80162ac <tcp_process+0x58>
        tcp_ack_now(pcb);
 80166ac:	8b63      	ldrh	r3, [r4, #26]
 80166ae:	f043 0302 	orr.w	r3, r3, #2
 80166b2:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 80166b4:	4620      	mov	r0, r4
 80166b6:	f7fe f899 	bl	80147ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80166ba:	4b43      	ldr	r3, [pc, #268]	; (80167c8 <tcp_process+0x574>)
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	429c      	cmp	r4, r3
 80166c0:	d005      	beq.n	80166ce <tcp_process+0x47a>
 80166c2:	b153      	cbz	r3, 80166da <tcp_process+0x486>
 80166c4:	68da      	ldr	r2, [r3, #12]
 80166c6:	4294      	cmp	r4, r2
 80166c8:	d005      	beq.n	80166d6 <tcp_process+0x482>
 80166ca:	4613      	mov	r3, r2
 80166cc:	e7f9      	b.n	80166c2 <tcp_process+0x46e>
 80166ce:	68da      	ldr	r2, [r3, #12]
 80166d0:	4b3d      	ldr	r3, [pc, #244]	; (80167c8 <tcp_process+0x574>)
 80166d2:	601a      	str	r2, [r3, #0]
 80166d4:	e001      	b.n	80166da <tcp_process+0x486>
 80166d6:	68e2      	ldr	r2, [r4, #12]
 80166d8:	60da      	str	r2, [r3, #12]
 80166da:	4b3c      	ldr	r3, [pc, #240]	; (80167cc <tcp_process+0x578>)
 80166dc:	2201      	movs	r2, #1
 80166de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80166e0:	230a      	movs	r3, #10
 80166e2:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80166e4:	4b3a      	ldr	r3, [pc, #232]	; (80167d0 <tcp_process+0x57c>)
 80166e6:	681a      	ldr	r2, [r3, #0]
 80166e8:	60e2      	str	r2, [r4, #12]
 80166ea:	601c      	str	r4, [r3, #0]
 80166ec:	f001 febe 	bl	801846c <tcp_timer_needed>
  return ERR_OK;
 80166f0:	2500      	movs	r5, #0
 80166f2:	e5db      	b.n	80162ac <tcp_process+0x58>
      tcp_receive(pcb);
 80166f4:	4620      	mov	r0, r4
 80166f6:	f7ff f90b 	bl	8015910 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80166fa:	4b31      	ldr	r3, [pc, #196]	; (80167c0 <tcp_process+0x56c>)
 80166fc:	781b      	ldrb	r3, [r3, #0]
 80166fe:	f013 0f10 	tst.w	r3, #16
 8016702:	d04c      	beq.n	801679e <tcp_process+0x54a>
 8016704:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8016706:	4b2f      	ldr	r3, [pc, #188]	; (80167c4 <tcp_process+0x570>)
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	429a      	cmp	r2, r3
 801670c:	d001      	beq.n	8016712 <tcp_process+0x4be>
  return ERR_OK;
 801670e:	2500      	movs	r5, #0
 8016710:	e5cc      	b.n	80162ac <tcp_process+0x58>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016712:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8016714:	b10b      	cbz	r3, 801671a <tcp_process+0x4c6>
  return ERR_OK;
 8016716:	2500      	movs	r5, #0
 8016718:	e5c8      	b.n	80162ac <tcp_process+0x58>
        tcp_pcb_purge(pcb);
 801671a:	4620      	mov	r0, r4
 801671c:	f7fe f866 	bl	80147ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016720:	4b29      	ldr	r3, [pc, #164]	; (80167c8 <tcp_process+0x574>)
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	429c      	cmp	r4, r3
 8016726:	d005      	beq.n	8016734 <tcp_process+0x4e0>
 8016728:	b153      	cbz	r3, 8016740 <tcp_process+0x4ec>
 801672a:	68da      	ldr	r2, [r3, #12]
 801672c:	4294      	cmp	r4, r2
 801672e:	d005      	beq.n	801673c <tcp_process+0x4e8>
 8016730:	4613      	mov	r3, r2
 8016732:	e7f9      	b.n	8016728 <tcp_process+0x4d4>
 8016734:	68da      	ldr	r2, [r3, #12]
 8016736:	4b24      	ldr	r3, [pc, #144]	; (80167c8 <tcp_process+0x574>)
 8016738:	601a      	str	r2, [r3, #0]
 801673a:	e001      	b.n	8016740 <tcp_process+0x4ec>
 801673c:	68e2      	ldr	r2, [r4, #12]
 801673e:	60da      	str	r2, [r3, #12]
 8016740:	4b22      	ldr	r3, [pc, #136]	; (80167cc <tcp_process+0x578>)
 8016742:	2201      	movs	r2, #1
 8016744:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016746:	230a      	movs	r3, #10
 8016748:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801674a:	4b21      	ldr	r3, [pc, #132]	; (80167d0 <tcp_process+0x57c>)
 801674c:	681a      	ldr	r2, [r3, #0]
 801674e:	60e2      	str	r2, [r4, #12]
 8016750:	601c      	str	r4, [r3, #0]
 8016752:	f001 fe8b 	bl	801846c <tcp_timer_needed>
  return ERR_OK;
 8016756:	2500      	movs	r5, #0
 8016758:	e5a8      	b.n	80162ac <tcp_process+0x58>
      tcp_receive(pcb);
 801675a:	4620      	mov	r0, r4
 801675c:	f7ff f8d8 	bl	8015910 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016760:	4b17      	ldr	r3, [pc, #92]	; (80167c0 <tcp_process+0x56c>)
 8016762:	781b      	ldrb	r3, [r3, #0]
 8016764:	f013 0f10 	tst.w	r3, #16
 8016768:	d01b      	beq.n	80167a2 <tcp_process+0x54e>
 801676a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801676c:	4b15      	ldr	r3, [pc, #84]	; (80167c4 <tcp_process+0x570>)
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	429a      	cmp	r2, r3
 8016772:	d001      	beq.n	8016778 <tcp_process+0x524>
  return ERR_OK;
 8016774:	2500      	movs	r5, #0
 8016776:	e599      	b.n	80162ac <tcp_process+0x58>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016778:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801677a:	b10b      	cbz	r3, 8016780 <tcp_process+0x52c>
  return ERR_OK;
 801677c:	2500      	movs	r5, #0
 801677e:	e595      	b.n	80162ac <tcp_process+0x58>
        recv_flags |= TF_CLOSED;
 8016780:	4a0a      	ldr	r2, [pc, #40]	; (80167ac <tcp_process+0x558>)
 8016782:	7813      	ldrb	r3, [r2, #0]
 8016784:	f043 0310 	orr.w	r3, r3, #16
 8016788:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 801678a:	2500      	movs	r5, #0
 801678c:	e58e      	b.n	80162ac <tcp_process+0x58>
  switch (pcb->state) {
 801678e:	2500      	movs	r5, #0
 8016790:	e58c      	b.n	80162ac <tcp_process+0x58>
  return ERR_OK;
 8016792:	2500      	movs	r5, #0
 8016794:	e58a      	b.n	80162ac <tcp_process+0x58>
 8016796:	2500      	movs	r5, #0
 8016798:	e588      	b.n	80162ac <tcp_process+0x58>
 801679a:	2500      	movs	r5, #0
 801679c:	e586      	b.n	80162ac <tcp_process+0x58>
 801679e:	2500      	movs	r5, #0
 80167a0:	e584      	b.n	80162ac <tcp_process+0x58>
 80167a2:	2500      	movs	r5, #0
 80167a4:	e582      	b.n	80162ac <tcp_process+0x58>
 80167a6:	bf00      	nop
 80167a8:	200009f8 	.word	0x200009f8
 80167ac:	20000a00 	.word	0x20000a00
 80167b0:	0801ec70 	.word	0x0801ec70
 80167b4:	0801ef34 	.word	0x0801ef34
 80167b8:	0801cca4 	.word	0x0801cca4
 80167bc:	20000a04 	.word	0x20000a04
 80167c0:	200009e0 	.word	0x200009e0
 80167c4:	200009dc 	.word	0x200009dc
 80167c8:	2000721c 	.word	0x2000721c
 80167cc:	20007218 	.word	0x20007218
 80167d0:	2000722c 	.word	0x2000722c

080167d4 <tcp_input>:
{
 80167d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167d6:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80167d8:	4605      	mov	r5, r0
 80167da:	b150      	cbz	r0, 80167f2 <tcp_input+0x1e>
  tcphdr = (struct tcp_hdr *)p->payload;
 80167dc:	686a      	ldr	r2, [r5, #4]
 80167de:	4b72      	ldr	r3, [pc, #456]	; (80169a8 <tcp_input+0x1d4>)
 80167e0:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 80167e2:	896b      	ldrh	r3, [r5, #10]
 80167e4:	2b13      	cmp	r3, #19
 80167e6:	d80b      	bhi.n	8016800 <tcp_input+0x2c>
  pbuf_free(p);
 80167e8:	4628      	mov	r0, r5
 80167ea:	f7fd f915 	bl	8013a18 <pbuf_free>
}
 80167ee:	b005      	add	sp, #20
 80167f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80167f2:	4b6e      	ldr	r3, [pc, #440]	; (80169ac <tcp_input+0x1d8>)
 80167f4:	2283      	movs	r2, #131	; 0x83
 80167f6:	496e      	ldr	r1, [pc, #440]	; (80169b0 <tcp_input+0x1dc>)
 80167f8:	486e      	ldr	r0, [pc, #440]	; (80169b4 <tcp_input+0x1e0>)
 80167fa:	f005 f941 	bl	801ba80 <iprintf>
 80167fe:	e7ed      	b.n	80167dc <tcp_input+0x8>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016800:	4b6d      	ldr	r3, [pc, #436]	; (80169b8 <tcp_input+0x1e4>)
 8016802:	6819      	ldr	r1, [r3, #0]
 8016804:	6958      	ldr	r0, [r3, #20]
 8016806:	f004 fc0a 	bl	801b01e <ip4_addr_isbroadcast_u32>
 801680a:	2800      	cmp	r0, #0
 801680c:	d1ec      	bne.n	80167e8 <tcp_input+0x14>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801680e:	4b6a      	ldr	r3, [pc, #424]	; (80169b8 <tcp_input+0x1e4>)
 8016810:	695b      	ldr	r3, [r3, #20]
 8016812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016816:	2be0      	cmp	r3, #224	; 0xe0
 8016818:	d0e6      	beq.n	80167e8 <tcp_input+0x14>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801681a:	4b63      	ldr	r3, [pc, #396]	; (80169a8 <tcp_input+0x1d4>)
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	8998      	ldrh	r0, [r3, #12]
 8016820:	f7fc f8a2 	bl	8012968 <lwip_htons>
 8016824:	f3c0 3107 	ubfx	r1, r0, #12, #8
 8016828:	0089      	lsls	r1, r1, #2
 801682a:	b2c9      	uxtb	r1, r1
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801682c:	2913      	cmp	r1, #19
 801682e:	d9db      	bls.n	80167e8 <tcp_input+0x14>
 8016830:	b28b      	uxth	r3, r1
 8016832:	892a      	ldrh	r2, [r5, #8]
 8016834:	4293      	cmp	r3, r2
 8016836:	d8d7      	bhi.n	80167e8 <tcp_input+0x14>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8016838:	f1a3 0214 	sub.w	r2, r3, #20
 801683c:	b292      	uxth	r2, r2
 801683e:	485f      	ldr	r0, [pc, #380]	; (80169bc <tcp_input+0x1e8>)
 8016840:	8002      	strh	r2, [r0, #0]
  tcphdr_opt2 = NULL;
 8016842:	485f      	ldr	r0, [pc, #380]	; (80169c0 <tcp_input+0x1ec>)
 8016844:	2400      	movs	r4, #0
 8016846:	6004      	str	r4, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 8016848:	8968      	ldrh	r0, [r5, #10]
 801684a:	4283      	cmp	r3, r0
 801684c:	d92e      	bls.n	80168ac <tcp_input+0xd8>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801684e:	682b      	ldr	r3, [r5, #0]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d067      	beq.n	8016924 <tcp_input+0x150>
    pbuf_remove_header(p, TCP_HLEN);
 8016854:	2114      	movs	r1, #20
 8016856:	4628      	mov	r0, r5
 8016858:	f7fd f898 	bl	801398c <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 801685c:	896c      	ldrh	r4, [r5, #10]
 801685e:	4b59      	ldr	r3, [pc, #356]	; (80169c4 <tcp_input+0x1f0>)
 8016860:	801c      	strh	r4, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016862:	4b56      	ldr	r3, [pc, #344]	; (80169bc <tcp_input+0x1e8>)
 8016864:	881f      	ldrh	r7, [r3, #0]
 8016866:	1b3e      	subs	r6, r7, r4
 8016868:	b2b6      	uxth	r6, r6
    pbuf_remove_header(p, tcphdr_opt1len);
 801686a:	4621      	mov	r1, r4
 801686c:	4628      	mov	r0, r5
 801686e:	f7fd f88d 	bl	801398c <pbuf_remove_header>
    if (opt2len > p->next->len) {
 8016872:	6828      	ldr	r0, [r5, #0]
 8016874:	8943      	ldrh	r3, [r0, #10]
 8016876:	42b3      	cmp	r3, r6
 8016878:	d3b6      	bcc.n	80167e8 <tcp_input+0x14>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801687a:	6842      	ldr	r2, [r0, #4]
 801687c:	4b50      	ldr	r3, [pc, #320]	; (80169c0 <tcp_input+0x1ec>)
 801687e:	601a      	str	r2, [r3, #0]
    pbuf_remove_header(p->next, opt2len);
 8016880:	4631      	mov	r1, r6
 8016882:	f7fd f883 	bl	801398c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016886:	892b      	ldrh	r3, [r5, #8]
 8016888:	1be4      	subs	r4, r4, r7
 801688a:	441c      	add	r4, r3
 801688c:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801688e:	896b      	ldrh	r3, [r5, #10]
 8016890:	2b00      	cmp	r3, #0
 8016892:	d14e      	bne.n	8016932 <tcp_input+0x15e>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8016894:	892a      	ldrh	r2, [r5, #8]
 8016896:	682b      	ldr	r3, [r5, #0]
 8016898:	891b      	ldrh	r3, [r3, #8]
 801689a:	429a      	cmp	r2, r3
 801689c:	d00b      	beq.n	80168b6 <tcp_input+0xe2>
 801689e:	4b43      	ldr	r3, [pc, #268]	; (80169ac <tcp_input+0x1d8>)
 80168a0:	22e0      	movs	r2, #224	; 0xe0
 80168a2:	4949      	ldr	r1, [pc, #292]	; (80169c8 <tcp_input+0x1f4>)
 80168a4:	4843      	ldr	r0, [pc, #268]	; (80169b4 <tcp_input+0x1e0>)
 80168a6:	f005 f8eb 	bl	801ba80 <iprintf>
 80168aa:	e004      	b.n	80168b6 <tcp_input+0xe2>
    tcphdr_opt1len = tcphdr_optlen;
 80168ac:	4b45      	ldr	r3, [pc, #276]	; (80169c4 <tcp_input+0x1f0>)
 80168ae:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80168b0:	4628      	mov	r0, r5
 80168b2:	f7fd f86b 	bl	801398c <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80168b6:	4c3c      	ldr	r4, [pc, #240]	; (80169a8 <tcp_input+0x1d4>)
 80168b8:	6826      	ldr	r6, [r4, #0]
 80168ba:	8830      	ldrh	r0, [r6, #0]
 80168bc:	f7fc f854 	bl	8012968 <lwip_htons>
 80168c0:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80168c2:	6826      	ldr	r6, [r4, #0]
 80168c4:	8870      	ldrh	r0, [r6, #2]
 80168c6:	f7fc f84f 	bl	8012968 <lwip_htons>
 80168ca:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80168cc:	6826      	ldr	r6, [r4, #0]
 80168ce:	6870      	ldr	r0, [r6, #4]
 80168d0:	f7fc f84f 	bl	8012972 <lwip_htonl>
 80168d4:	6070      	str	r0, [r6, #4]
 80168d6:	4b3d      	ldr	r3, [pc, #244]	; (80169cc <tcp_input+0x1f8>)
 80168d8:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80168da:	6826      	ldr	r6, [r4, #0]
 80168dc:	68b0      	ldr	r0, [r6, #8]
 80168de:	f7fc f848 	bl	8012972 <lwip_htonl>
 80168e2:	60b0      	str	r0, [r6, #8]
 80168e4:	4b3a      	ldr	r3, [pc, #232]	; (80169d0 <tcp_input+0x1fc>)
 80168e6:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80168e8:	6826      	ldr	r6, [r4, #0]
 80168ea:	89f0      	ldrh	r0, [r6, #14]
 80168ec:	f7fc f83c 	bl	8012968 <lwip_htons>
 80168f0:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 80168f2:	6823      	ldr	r3, [r4, #0]
 80168f4:	8998      	ldrh	r0, [r3, #12]
 80168f6:	f7fc f837 	bl	8012968 <lwip_htons>
 80168fa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80168fe:	4b35      	ldr	r3, [pc, #212]	; (80169d4 <tcp_input+0x200>)
 8016900:	7018      	strb	r0, [r3, #0]
  tcplen = p->tot_len;
 8016902:	892b      	ldrh	r3, [r5, #8]
 8016904:	4a34      	ldr	r2, [pc, #208]	; (80169d8 <tcp_input+0x204>)
 8016906:	8013      	strh	r3, [r2, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016908:	f010 0f03 	tst.w	r0, #3
 801690c:	d006      	beq.n	801691c <tcp_input+0x148>
    tcplen++;
 801690e:	1c5a      	adds	r2, r3, #1
 8016910:	b292      	uxth	r2, r2
 8016912:	4931      	ldr	r1, [pc, #196]	; (80169d8 <tcp_input+0x204>)
 8016914:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 8016916:	4293      	cmp	r3, r2
 8016918:	f63f af66 	bhi.w	80167e8 <tcp_input+0x14>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801691c:	4b2f      	ldr	r3, [pc, #188]	; (80169dc <tcp_input+0x208>)
 801691e:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 8016920:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016922:	e02a      	b.n	801697a <tcp_input+0x1a6>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8016924:	4b21      	ldr	r3, [pc, #132]	; (80169ac <tcp_input+0x1d8>)
 8016926:	22c2      	movs	r2, #194	; 0xc2
 8016928:	492d      	ldr	r1, [pc, #180]	; (80169e0 <tcp_input+0x20c>)
 801692a:	4822      	ldr	r0, [pc, #136]	; (80169b4 <tcp_input+0x1e0>)
 801692c:	f005 f8a8 	bl	801ba80 <iprintf>
 8016930:	e790      	b.n	8016854 <tcp_input+0x80>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8016932:	4b1e      	ldr	r3, [pc, #120]	; (80169ac <tcp_input+0x1d8>)
 8016934:	22df      	movs	r2, #223	; 0xdf
 8016936:	492b      	ldr	r1, [pc, #172]	; (80169e4 <tcp_input+0x210>)
 8016938:	481e      	ldr	r0, [pc, #120]	; (80169b4 <tcp_input+0x1e0>)
 801693a:	f005 f8a1 	bl	801ba80 <iprintf>
 801693e:	e7a9      	b.n	8016894 <tcp_input+0xc0>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8016940:	4b1a      	ldr	r3, [pc, #104]	; (80169ac <tcp_input+0x1d8>)
 8016942:	22fb      	movs	r2, #251	; 0xfb
 8016944:	4928      	ldr	r1, [pc, #160]	; (80169e8 <tcp_input+0x214>)
 8016946:	481b      	ldr	r0, [pc, #108]	; (80169b4 <tcp_input+0x1e0>)
 8016948:	f005 f89a 	bl	801ba80 <iprintf>
 801694c:	e01a      	b.n	8016984 <tcp_input+0x1b0>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801694e:	4b17      	ldr	r3, [pc, #92]	; (80169ac <tcp_input+0x1d8>)
 8016950:	22fc      	movs	r2, #252	; 0xfc
 8016952:	4926      	ldr	r1, [pc, #152]	; (80169ec <tcp_input+0x218>)
 8016954:	4817      	ldr	r0, [pc, #92]	; (80169b4 <tcp_input+0x1e0>)
 8016956:	f005 f893 	bl	801ba80 <iprintf>
 801695a:	e016      	b.n	801698a <tcp_input+0x1b6>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801695c:	4b13      	ldr	r3, [pc, #76]	; (80169ac <tcp_input+0x1d8>)
 801695e:	22fd      	movs	r2, #253	; 0xfd
 8016960:	4923      	ldr	r1, [pc, #140]	; (80169f0 <tcp_input+0x21c>)
 8016962:	4814      	ldr	r0, [pc, #80]	; (80169b4 <tcp_input+0x1e0>)
 8016964:	f005 f88c 	bl	801ba80 <iprintf>
 8016968:	e012      	b.n	8016990 <tcp_input+0x1bc>
    if (pcb->remote_port == tcphdr->src &&
 801696a:	8b21      	ldrh	r1, [r4, #24]
 801696c:	4b0e      	ldr	r3, [pc, #56]	; (80169a8 <tcp_input+0x1d4>)
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	881a      	ldrh	r2, [r3, #0]
 8016972:	4291      	cmp	r1, r2
 8016974:	d03e      	beq.n	80169f4 <tcp_input+0x220>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016976:	4626      	mov	r6, r4
 8016978:	68e4      	ldr	r4, [r4, #12]
 801697a:	2c00      	cmp	r4, #0
 801697c:	d055      	beq.n	8016a2a <tcp_input+0x256>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801697e:	7d23      	ldrb	r3, [r4, #20]
 8016980:	2b00      	cmp	r3, #0
 8016982:	d0dd      	beq.n	8016940 <tcp_input+0x16c>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8016984:	7d23      	ldrb	r3, [r4, #20]
 8016986:	2b0a      	cmp	r3, #10
 8016988:	d0e1      	beq.n	801694e <tcp_input+0x17a>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801698a:	7d23      	ldrb	r3, [r4, #20]
 801698c:	2b01      	cmp	r3, #1
 801698e:	d0e5      	beq.n	801695c <tcp_input+0x188>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016990:	7a22      	ldrb	r2, [r4, #8]
 8016992:	2a00      	cmp	r2, #0
 8016994:	d0e9      	beq.n	801696a <tcp_input+0x196>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016996:	4b08      	ldr	r3, [pc, #32]	; (80169b8 <tcp_input+0x1e4>)
 8016998:	685b      	ldr	r3, [r3, #4]
 801699a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801699e:	3301      	adds	r3, #1
 80169a0:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80169a2:	429a      	cmp	r2, r3
 80169a4:	d0e1      	beq.n	801696a <tcp_input+0x196>
 80169a6:	e7e6      	b.n	8016976 <tcp_input+0x1a2>
 80169a8:	20000a0c 	.word	0x20000a0c
 80169ac:	0801ec70 	.word	0x0801ec70
 80169b0:	0801ef54 	.word	0x0801ef54
 80169b4:	0801cca4 	.word	0x0801cca4
 80169b8:	20003c68 	.word	0x20003c68
 80169bc:	20000a18 	.word	0x20000a18
 80169c0:	20000a14 	.word	0x20000a14
 80169c4:	20000a10 	.word	0x20000a10
 80169c8:	0801ef88 	.word	0x0801ef88
 80169cc:	20000a04 	.word	0x20000a04
 80169d0:	200009dc 	.word	0x200009dc
 80169d4:	200009e0 	.word	0x200009e0
 80169d8:	20000a1a 	.word	0x20000a1a
 80169dc:	2000721c 	.word	0x2000721c
 80169e0:	0801ef6c 	.word	0x0801ef6c
 80169e4:	0801ef7c 	.word	0x0801ef7c
 80169e8:	0801efa8 	.word	0x0801efa8
 80169ec:	0801efd0 	.word	0x0801efd0
 80169f0:	0801effc 	.word	0x0801effc
        pcb->local_port == tcphdr->dest &&
 80169f4:	8ae2      	ldrh	r2, [r4, #22]
 80169f6:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 80169f8:	429a      	cmp	r2, r3
 80169fa:	d1bc      	bne.n	8016976 <tcp_input+0x1a2>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80169fc:	6862      	ldr	r2, [r4, #4]
 80169fe:	4b77      	ldr	r3, [pc, #476]	; (8016bdc <tcp_input+0x408>)
 8016a00:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8016a02:	429a      	cmp	r2, r3
 8016a04:	d1b7      	bne.n	8016976 <tcp_input+0x1a2>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016a06:	6822      	ldr	r2, [r4, #0]
 8016a08:	4b74      	ldr	r3, [pc, #464]	; (8016bdc <tcp_input+0x408>)
 8016a0a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016a0c:	429a      	cmp	r2, r3
 8016a0e:	d1b2      	bne.n	8016976 <tcp_input+0x1a2>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016a10:	68e3      	ldr	r3, [r4, #12]
 8016a12:	429c      	cmp	r4, r3
 8016a14:	d062      	beq.n	8016adc <tcp_input+0x308>
      if (prev != NULL) {
 8016a16:	b12e      	cbz	r6, 8016a24 <tcp_input+0x250>
        prev->next = pcb->next;
 8016a18:	68e3      	ldr	r3, [r4, #12]
 8016a1a:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 8016a1c:	4b70      	ldr	r3, [pc, #448]	; (8016be0 <tcp_input+0x40c>)
 8016a1e:	681a      	ldr	r2, [r3, #0]
 8016a20:	60e2      	str	r2, [r4, #12]
        tcp_active_pcbs = pcb;
 8016a22:	601c      	str	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8016a24:	68e3      	ldr	r3, [r4, #12]
 8016a26:	429c      	cmp	r4, r3
 8016a28:	d060      	beq.n	8016aec <tcp_input+0x318>
  if (pcb == NULL) {
 8016a2a:	2c00      	cmp	r4, #0
 8016a2c:	d066      	beq.n	8016afc <tcp_input+0x328>
  if (pcb != NULL) {
 8016a2e:	2c00      	cmp	r4, #0
 8016a30:	f000 8168 	beq.w	8016d04 <tcp_input+0x530>
    inseg.next = NULL;
 8016a34:	4a6b      	ldr	r2, [pc, #428]	; (8016be4 <tcp_input+0x410>)
 8016a36:	2300      	movs	r3, #0
 8016a38:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 8016a3a:	8929      	ldrh	r1, [r5, #8]
 8016a3c:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 8016a3e:	6055      	str	r5, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016a40:	4969      	ldr	r1, [pc, #420]	; (8016be8 <tcp_input+0x414>)
 8016a42:	6809      	ldr	r1, [r1, #0]
 8016a44:	6111      	str	r1, [r2, #16]
    recv_data = NULL;
 8016a46:	4a69      	ldr	r2, [pc, #420]	; (8016bec <tcp_input+0x418>)
 8016a48:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 8016a4a:	4a69      	ldr	r2, [pc, #420]	; (8016bf0 <tcp_input+0x41c>)
 8016a4c:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 8016a4e:	4a69      	ldr	r2, [pc, #420]	; (8016bf4 <tcp_input+0x420>)
 8016a50:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 8016a52:	4b69      	ldr	r3, [pc, #420]	; (8016bf8 <tcp_input+0x424>)
 8016a54:	781b      	ldrb	r3, [r3, #0]
 8016a56:	f013 0f08 	tst.w	r3, #8
 8016a5a:	d003      	beq.n	8016a64 <tcp_input+0x290>
      p->flags |= PBUF_FLAG_PUSH;
 8016a5c:	7b6b      	ldrb	r3, [r5, #13]
 8016a5e:	f043 0301 	orr.w	r3, r3, #1
 8016a62:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8016a64:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8016a66:	b16b      	cbz	r3, 8016a84 <tcp_input+0x2b0>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016a68:	4620      	mov	r0, r4
 8016a6a:	f7fe fa0f 	bl	8014e8c <tcp_process_refused_data>
 8016a6e:	f110 0f0d 	cmn.w	r0, #13
 8016a72:	f000 80ab 	beq.w	8016bcc <tcp_input+0x3f8>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016a76:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016a78:	b123      	cbz	r3, 8016a84 <tcp_input+0x2b0>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016a7a:	4b60      	ldr	r3, [pc, #384]	; (8016bfc <tcp_input+0x428>)
 8016a7c:	881b      	ldrh	r3, [r3, #0]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	f040 80a4 	bne.w	8016bcc <tcp_input+0x3f8>
    tcp_input_pcb = pcb;
 8016a84:	4b5e      	ldr	r3, [pc, #376]	; (8016c00 <tcp_input+0x42c>)
 8016a86:	601c      	str	r4, [r3, #0]
    err = tcp_process(pcb);
 8016a88:	4620      	mov	r0, r4
 8016a8a:	f7ff fbe3 	bl	8016254 <tcp_process>
    if (err != ERR_ABRT) {
 8016a8e:	f110 0f0d 	cmn.w	r0, #13
 8016a92:	d013      	beq.n	8016abc <tcp_input+0x2e8>
      if (recv_flags & TF_RESET) {
 8016a94:	4b56      	ldr	r3, [pc, #344]	; (8016bf0 <tcp_input+0x41c>)
 8016a96:	781b      	ldrb	r3, [r3, #0]
 8016a98:	f013 0f08 	tst.w	r3, #8
 8016a9c:	f000 80c0 	beq.w	8016c20 <tcp_input+0x44c>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8016aa0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8016aa4:	b11b      	cbz	r3, 8016aae <tcp_input+0x2da>
 8016aa6:	f06f 010d 	mvn.w	r1, #13
 8016aaa:	6920      	ldr	r0, [r4, #16]
 8016aac:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016aae:	4621      	mov	r1, r4
 8016ab0:	484b      	ldr	r0, [pc, #300]	; (8016be0 <tcp_input+0x40c>)
 8016ab2:	f7fd fecd 	bl	8014850 <tcp_pcb_remove>
        tcp_free(pcb);
 8016ab6:	4620      	mov	r0, r4
 8016ab8:	f7fd fc1a 	bl	80142f0 <tcp_free>
    tcp_input_pcb = NULL;
 8016abc:	2300      	movs	r3, #0
 8016abe:	4a50      	ldr	r2, [pc, #320]	; (8016c00 <tcp_input+0x42c>)
 8016ac0:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 8016ac2:	4a4a      	ldr	r2, [pc, #296]	; (8016bec <tcp_input+0x418>)
 8016ac4:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL) {
 8016ac6:	4b47      	ldr	r3, [pc, #284]	; (8016be4 <tcp_input+0x410>)
 8016ac8:	6858      	ldr	r0, [r3, #4]
 8016aca:	2800      	cmp	r0, #0
 8016acc:	f43f ae8f 	beq.w	80167ee <tcp_input+0x1a>
      pbuf_free(inseg.p);
 8016ad0:	f7fc ffa2 	bl	8013a18 <pbuf_free>
      inseg.p = NULL;
 8016ad4:	4b43      	ldr	r3, [pc, #268]	; (8016be4 <tcp_input+0x410>)
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	605a      	str	r2, [r3, #4]
 8016ada:	e688      	b.n	80167ee <tcp_input+0x1a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016adc:	4b49      	ldr	r3, [pc, #292]	; (8016c04 <tcp_input+0x430>)
 8016ade:	f240 120d 	movw	r2, #269	; 0x10d
 8016ae2:	4949      	ldr	r1, [pc, #292]	; (8016c08 <tcp_input+0x434>)
 8016ae4:	4849      	ldr	r0, [pc, #292]	; (8016c0c <tcp_input+0x438>)
 8016ae6:	f004 ffcb 	bl	801ba80 <iprintf>
 8016aea:	e794      	b.n	8016a16 <tcp_input+0x242>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8016aec:	4b45      	ldr	r3, [pc, #276]	; (8016c04 <tcp_input+0x430>)
 8016aee:	f240 1215 	movw	r2, #277	; 0x115
 8016af2:	4947      	ldr	r1, [pc, #284]	; (8016c10 <tcp_input+0x43c>)
 8016af4:	4845      	ldr	r0, [pc, #276]	; (8016c0c <tcp_input+0x438>)
 8016af6:	f004 ffc3 	bl	801ba80 <iprintf>
 8016afa:	e796      	b.n	8016a2a <tcp_input+0x256>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016afc:	4b45      	ldr	r3, [pc, #276]	; (8016c14 <tcp_input+0x440>)
 8016afe:	681c      	ldr	r4, [r3, #0]
 8016b00:	e00e      	b.n	8016b20 <tcp_input+0x34c>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016b02:	4b40      	ldr	r3, [pc, #256]	; (8016c04 <tcp_input+0x430>)
 8016b04:	f240 121f 	movw	r2, #287	; 0x11f
 8016b08:	4943      	ldr	r1, [pc, #268]	; (8016c18 <tcp_input+0x444>)
 8016b0a:	4840      	ldr	r0, [pc, #256]	; (8016c0c <tcp_input+0x438>)
 8016b0c:	f004 ffb8 	bl	801ba80 <iprintf>
 8016b10:	e00a      	b.n	8016b28 <tcp_input+0x354>
      if (pcb->remote_port == tcphdr->src &&
 8016b12:	8b21      	ldrh	r1, [r4, #24]
 8016b14:	4b34      	ldr	r3, [pc, #208]	; (8016be8 <tcp_input+0x414>)
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	881a      	ldrh	r2, [r3, #0]
 8016b1a:	4291      	cmp	r1, r2
 8016b1c:	d010      	beq.n	8016b40 <tcp_input+0x36c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016b1e:	68e4      	ldr	r4, [r4, #12]
 8016b20:	b31c      	cbz	r4, 8016b6a <tcp_input+0x396>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016b22:	7d23      	ldrb	r3, [r4, #20]
 8016b24:	2b0a      	cmp	r3, #10
 8016b26:	d1ec      	bne.n	8016b02 <tcp_input+0x32e>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016b28:	7a22      	ldrb	r2, [r4, #8]
 8016b2a:	2a00      	cmp	r2, #0
 8016b2c:	d0f1      	beq.n	8016b12 <tcp_input+0x33e>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016b2e:	4b2b      	ldr	r3, [pc, #172]	; (8016bdc <tcp_input+0x408>)
 8016b30:	685b      	ldr	r3, [r3, #4]
 8016b32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016b36:	3301      	adds	r3, #1
 8016b38:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016b3a:	429a      	cmp	r2, r3
 8016b3c:	d0e9      	beq.n	8016b12 <tcp_input+0x33e>
 8016b3e:	e7ee      	b.n	8016b1e <tcp_input+0x34a>
          pcb->local_port == tcphdr->dest &&
 8016b40:	8ae2      	ldrh	r2, [r4, #22]
 8016b42:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 8016b44:	429a      	cmp	r2, r3
 8016b46:	d1ea      	bne.n	8016b1e <tcp_input+0x34a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016b48:	6862      	ldr	r2, [r4, #4]
 8016b4a:	4b24      	ldr	r3, [pc, #144]	; (8016bdc <tcp_input+0x408>)
 8016b4c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8016b4e:	429a      	cmp	r2, r3
 8016b50:	d1e5      	bne.n	8016b1e <tcp_input+0x34a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016b52:	6822      	ldr	r2, [r4, #0]
 8016b54:	4b21      	ldr	r3, [pc, #132]	; (8016bdc <tcp_input+0x408>)
 8016b56:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016b58:	429a      	cmp	r2, r3
 8016b5a:	d1e0      	bne.n	8016b1e <tcp_input+0x34a>
          tcp_timewait_input(pcb);
 8016b5c:	4620      	mov	r0, r4
 8016b5e:	f7fe fd1f 	bl	80155a0 <tcp_timewait_input>
        pbuf_free(p);
 8016b62:	4628      	mov	r0, r5
 8016b64:	f7fc ff58 	bl	8013a18 <pbuf_free>
        return;
 8016b68:	e641      	b.n	80167ee <tcp_input+0x1a>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016b6a:	4b2c      	ldr	r3, [pc, #176]	; (8016c1c <tcp_input+0x448>)
 8016b6c:	681e      	ldr	r6, [r3, #0]
 8016b6e:	4630      	mov	r0, r6
    prev = NULL;
 8016b70:	4621      	mov	r1, r4
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016b72:	e007      	b.n	8016b84 <tcp_input+0x3b0>
      if (lpcb->local_port == tcphdr->dest) {
 8016b74:	8ac2      	ldrh	r2, [r0, #22]
 8016b76:	4b1c      	ldr	r3, [pc, #112]	; (8016be8 <tcp_input+0x414>)
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	885b      	ldrh	r3, [r3, #2]
 8016b7c:	429a      	cmp	r2, r3
 8016b7e:	d00e      	beq.n	8016b9e <tcp_input+0x3ca>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016b80:	4601      	mov	r1, r0
 8016b82:	68c0      	ldr	r0, [r0, #12]
 8016b84:	b198      	cbz	r0, 8016bae <tcp_input+0x3da>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016b86:	7a02      	ldrb	r2, [r0, #8]
 8016b88:	2a00      	cmp	r2, #0
 8016b8a:	d0f3      	beq.n	8016b74 <tcp_input+0x3a0>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016b8c:	4b13      	ldr	r3, [pc, #76]	; (8016bdc <tcp_input+0x408>)
 8016b8e:	685b      	ldr	r3, [r3, #4]
 8016b90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016b94:	3301      	adds	r3, #1
 8016b96:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016b98:	429a      	cmp	r2, r3
 8016b9a:	d0eb      	beq.n	8016b74 <tcp_input+0x3a0>
 8016b9c:	e7f0      	b.n	8016b80 <tcp_input+0x3ac>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016b9e:	6803      	ldr	r3, [r0, #0]
 8016ba0:	4a0e      	ldr	r2, [pc, #56]	; (8016bdc <tcp_input+0x408>)
 8016ba2:	6952      	ldr	r2, [r2, #20]
 8016ba4:	4293      	cmp	r3, r2
 8016ba6:	d002      	beq.n	8016bae <tcp_input+0x3da>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8016ba8:	b108      	cbz	r0, 8016bae <tcp_input+0x3da>
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d1e8      	bne.n	8016b80 <tcp_input+0x3ac>
    if (lpcb != NULL) {
 8016bae:	2800      	cmp	r0, #0
 8016bb0:	f43f af3d 	beq.w	8016a2e <tcp_input+0x25a>
      if (prev != NULL) {
 8016bb4:	b121      	cbz	r1, 8016bc0 <tcp_input+0x3ec>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8016bb6:	68c3      	ldr	r3, [r0, #12]
 8016bb8:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8016bba:	60c6      	str	r6, [r0, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8016bbc:	4b17      	ldr	r3, [pc, #92]	; (8016c1c <tcp_input+0x448>)
 8016bbe:	6018      	str	r0, [r3, #0]
        tcp_listen_input(lpcb);
 8016bc0:	f7fe fd4a 	bl	8015658 <tcp_listen_input>
      pbuf_free(p);
 8016bc4:	4628      	mov	r0, r5
 8016bc6:	f7fc ff27 	bl	8013a18 <pbuf_free>
      return;
 8016bca:	e610      	b.n	80167ee <tcp_input+0x1a>
        if (pcb->rcv_ann_wnd == 0) {
 8016bcc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	f47f af74 	bne.w	8016abc <tcp_input+0x2e8>
          tcp_send_empty_ack(pcb);
 8016bd4:	4620      	mov	r0, r4
 8016bd6:	f001 f971 	bl	8017ebc <tcp_send_empty_ack>
        goto aborted;
 8016bda:	e76f      	b.n	8016abc <tcp_input+0x2e8>
 8016bdc:	20003c68 	.word	0x20003c68
 8016be0:	2000721c 	.word	0x2000721c
 8016be4:	200009e4 	.word	0x200009e4
 8016be8:	20000a0c 	.word	0x20000a0c
 8016bec:	200009fc 	.word	0x200009fc
 8016bf0:	20000a00 	.word	0x20000a00
 8016bf4:	200009f8 	.word	0x200009f8
 8016bf8:	200009e0 	.word	0x200009e0
 8016bfc:	20000a1a 	.word	0x20000a1a
 8016c00:	20007230 	.word	0x20007230
 8016c04:	0801ec70 	.word	0x0801ec70
 8016c08:	0801f024 	.word	0x0801f024
 8016c0c:	0801cca4 	.word	0x0801cca4
 8016c10:	0801f050 	.word	0x0801f050
 8016c14:	2000722c 	.word	0x2000722c
 8016c18:	0801f07c 	.word	0x0801f07c
 8016c1c:	20007224 	.word	0x20007224
        if (recv_acked > 0) {
 8016c20:	4b48      	ldr	r3, [pc, #288]	; (8016d44 <tcp_input+0x570>)
 8016c22:	881a      	ldrh	r2, [r3, #0]
 8016c24:	b162      	cbz	r2, 8016c40 <tcp_input+0x46c>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8016c26:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8016c2a:	b133      	cbz	r3, 8016c3a <tcp_input+0x466>
 8016c2c:	4621      	mov	r1, r4
 8016c2e:	6920      	ldr	r0, [r4, #16]
 8016c30:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8016c32:	f110 0f0d 	cmn.w	r0, #13
 8016c36:	f43f af41 	beq.w	8016abc <tcp_input+0x2e8>
          recv_acked = 0;
 8016c3a:	4b42      	ldr	r3, [pc, #264]	; (8016d44 <tcp_input+0x570>)
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016c40:	4620      	mov	r0, r4
 8016c42:	f7fe fc7d 	bl	8015540 <tcp_input_delayed_close>
 8016c46:	2800      	cmp	r0, #0
 8016c48:	f47f af38 	bne.w	8016abc <tcp_input+0x2e8>
        if (recv_data != NULL) {
 8016c4c:	4b3e      	ldr	r3, [pc, #248]	; (8016d48 <tcp_input+0x574>)
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	b1eb      	cbz	r3, 8016c8e <tcp_input+0x4ba>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016c52:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8016c54:	b133      	cbz	r3, 8016c64 <tcp_input+0x490>
 8016c56:	4b3d      	ldr	r3, [pc, #244]	; (8016d4c <tcp_input+0x578>)
 8016c58:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016c5c:	493c      	ldr	r1, [pc, #240]	; (8016d50 <tcp_input+0x57c>)
 8016c5e:	483d      	ldr	r0, [pc, #244]	; (8016d54 <tcp_input+0x580>)
 8016c60:	f004 ff0e 	bl	801ba80 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8016c64:	8b63      	ldrh	r3, [r4, #26]
 8016c66:	f013 0f10 	tst.w	r3, #16
 8016c6a:	d128      	bne.n	8016cbe <tcp_input+0x4ea>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016c6c:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8016c70:	b36d      	cbz	r5, 8016cce <tcp_input+0x4fa>
 8016c72:	2300      	movs	r3, #0
 8016c74:	4a34      	ldr	r2, [pc, #208]	; (8016d48 <tcp_input+0x574>)
 8016c76:	6812      	ldr	r2, [r2, #0]
 8016c78:	4621      	mov	r1, r4
 8016c7a:	6920      	ldr	r0, [r4, #16]
 8016c7c:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 8016c7e:	f110 0f0d 	cmn.w	r0, #13
 8016c82:	f43f af1b 	beq.w	8016abc <tcp_input+0x2e8>
          if (err != ERR_OK) {
 8016c86:	b110      	cbz	r0, 8016c8e <tcp_input+0x4ba>
            pcb->refused_data = recv_data;
 8016c88:	4b2f      	ldr	r3, [pc, #188]	; (8016d48 <tcp_input+0x574>)
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	67a3      	str	r3, [r4, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 8016c8e:	4b32      	ldr	r3, [pc, #200]	; (8016d58 <tcp_input+0x584>)
 8016c90:	781b      	ldrb	r3, [r3, #0]
 8016c92:	f013 0f20 	tst.w	r3, #32
 8016c96:	d005      	beq.n	8016ca4 <tcp_input+0x4d0>
          if (pcb->refused_data != NULL) {
 8016c98:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8016c9a:	b303      	cbz	r3, 8016cde <tcp_input+0x50a>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8016c9c:	7b5a      	ldrb	r2, [r3, #13]
 8016c9e:	f042 0220 	orr.w	r2, r2, #32
 8016ca2:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8016ca4:	4b2d      	ldr	r3, [pc, #180]	; (8016d5c <tcp_input+0x588>)
 8016ca6:	2200      	movs	r2, #0
 8016ca8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016caa:	4620      	mov	r0, r4
 8016cac:	f7fe fc48 	bl	8015540 <tcp_input_delayed_close>
 8016cb0:	2800      	cmp	r0, #0
 8016cb2:	f47f af03 	bne.w	8016abc <tcp_input+0x2e8>
        tcp_output(pcb);
 8016cb6:	4620      	mov	r0, r4
 8016cb8:	f001 f93a 	bl	8017f30 <tcp_output>
 8016cbc:	e6fe      	b.n	8016abc <tcp_input+0x2e8>
            pbuf_free(recv_data);
 8016cbe:	4b22      	ldr	r3, [pc, #136]	; (8016d48 <tcp_input+0x574>)
 8016cc0:	6818      	ldr	r0, [r3, #0]
 8016cc2:	f7fc fea9 	bl	8013a18 <pbuf_free>
            tcp_abort(pcb);
 8016cc6:	4620      	mov	r0, r4
 8016cc8:	f7fd feb0 	bl	8014a2c <tcp_abort>
            goto aborted;
 8016ccc:	e6f6      	b.n	8016abc <tcp_input+0x2e8>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016cce:	2300      	movs	r3, #0
 8016cd0:	4a1d      	ldr	r2, [pc, #116]	; (8016d48 <tcp_input+0x574>)
 8016cd2:	6812      	ldr	r2, [r2, #0]
 8016cd4:	4621      	mov	r1, r4
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	f7fe f8b4 	bl	8014e44 <tcp_recv_null>
 8016cdc:	e7cf      	b.n	8016c7e <tcp_input+0x4aa>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016cde:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8016ce0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016ce4:	d001      	beq.n	8016cea <tcp_input+0x516>
              pcb->rcv_wnd++;
 8016ce6:	3301      	adds	r3, #1
 8016ce8:	8523      	strh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8016cea:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8016cee:	2d00      	cmp	r5, #0
 8016cf0:	d0d8      	beq.n	8016ca4 <tcp_input+0x4d0>
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	461a      	mov	r2, r3
 8016cf6:	4621      	mov	r1, r4
 8016cf8:	6920      	ldr	r0, [r4, #16]
 8016cfa:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 8016cfc:	f110 0f0d 	cmn.w	r0, #13
 8016d00:	d1d0      	bne.n	8016ca4 <tcp_input+0x4d0>
 8016d02:	e6db      	b.n	8016abc <tcp_input+0x2e8>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8016d04:	4b16      	ldr	r3, [pc, #88]	; (8016d60 <tcp_input+0x58c>)
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	8998      	ldrh	r0, [r3, #12]
 8016d0a:	f7fb fe2d 	bl	8012968 <lwip_htons>
 8016d0e:	f010 0f04 	tst.w	r0, #4
 8016d12:	d003      	beq.n	8016d1c <tcp_input+0x548>
    pbuf_free(p);
 8016d14:	4628      	mov	r0, r5
 8016d16:	f7fc fe7f 	bl	8013a18 <pbuf_free>
 8016d1a:	e568      	b.n	80167ee <tcp_input+0x1a>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016d1c:	4b10      	ldr	r3, [pc, #64]	; (8016d60 <tcp_input+0x58c>)
 8016d1e:	6819      	ldr	r1, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016d20:	4b10      	ldr	r3, [pc, #64]	; (8016d64 <tcp_input+0x590>)
 8016d22:	4a11      	ldr	r2, [pc, #68]	; (8016d68 <tcp_input+0x594>)
 8016d24:	8810      	ldrh	r0, [r2, #0]
 8016d26:	4a11      	ldr	r2, [pc, #68]	; (8016d6c <tcp_input+0x598>)
 8016d28:	6812      	ldr	r2, [r2, #0]
 8016d2a:	880c      	ldrh	r4, [r1, #0]
 8016d2c:	9402      	str	r4, [sp, #8]
 8016d2e:	8849      	ldrh	r1, [r1, #2]
 8016d30:	9101      	str	r1, [sp, #4]
 8016d32:	1f19      	subs	r1, r3, #4
 8016d34:	9100      	str	r1, [sp, #0]
 8016d36:	4402      	add	r2, r0
 8016d38:	490d      	ldr	r1, [pc, #52]	; (8016d70 <tcp_input+0x59c>)
 8016d3a:	6809      	ldr	r1, [r1, #0]
 8016d3c:	2000      	movs	r0, #0
 8016d3e:	f001 f875 	bl	8017e2c <tcp_rst>
 8016d42:	e7e7      	b.n	8016d14 <tcp_input+0x540>
 8016d44:	200009f8 	.word	0x200009f8
 8016d48:	200009fc 	.word	0x200009fc
 8016d4c:	0801ec70 	.word	0x0801ec70
 8016d50:	0801f0ac 	.word	0x0801f0ac
 8016d54:	0801cca4 	.word	0x0801cca4
 8016d58:	20000a00 	.word	0x20000a00
 8016d5c:	20007230 	.word	0x20007230
 8016d60:	20000a0c 	.word	0x20000a0c
 8016d64:	20003c7c 	.word	0x20003c7c
 8016d68:	20000a1a 	.word	0x20000a1a
 8016d6c:	20000a04 	.word	0x20000a04
 8016d70:	200009dc 	.word	0x200009dc

08016d74 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8016d74:	4a02      	ldr	r2, [pc, #8]	; (8016d80 <tcp_trigger_input_pcb_close+0xc>)
 8016d76:	7813      	ldrb	r3, [r2, #0]
 8016d78:	f043 0310 	orr.w	r3, r3, #16
 8016d7c:	7013      	strb	r3, [r2, #0]
}
 8016d7e:	4770      	bx	lr
 8016d80:	20000a00 	.word	0x20000a00

08016d84 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8016d84:	b538      	push	{r3, r4, r5, lr}
 8016d86:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8016d88:	4605      	mov	r5, r0
 8016d8a:	b1b8      	cbz	r0, 8016dbc <tcp_write_checks+0x38>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8016d8c:	7d2b      	ldrb	r3, [r5, #20]
 8016d8e:	2b04      	cmp	r3, #4
 8016d90:	d005      	beq.n	8016d9e <tcp_write_checks+0x1a>
 8016d92:	2b07      	cmp	r3, #7
 8016d94:	d003      	beq.n	8016d9e <tcp_write_checks+0x1a>
      (pcb->state != CLOSE_WAIT) &&
 8016d96:	2b02      	cmp	r3, #2
 8016d98:	d001      	beq.n	8016d9e <tcp_write_checks+0x1a>
      (pcb->state != SYN_SENT) &&
 8016d9a:	2b03      	cmp	r3, #3
 8016d9c:	d141      	bne.n	8016e22 <tcp_write_checks+0x9e>
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
 8016d9e:	2c00      	cmp	r4, #0
 8016da0:	d042      	beq.n	8016e28 <tcp_write_checks+0xa4>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8016da2:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8016da6:	42a3      	cmp	r3, r4
 8016da8:	d310      	bcc.n	8016dcc <tcp_write_checks+0x48>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8016daa:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 8016dae:	2b08      	cmp	r3, #8
 8016db0:	d813      	bhi.n	8016dda <tcp_write_checks+0x56>
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
    return ERR_MEM;
  }
  if (pcb->snd_queuelen != 0) {
 8016db2:	b333      	cbz	r3, 8016e02 <tcp_write_checks+0x7e>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8016db4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8016db6:	b1bb      	cbz	r3, 8016de8 <tcp_write_checks+0x64>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8016db8:	2000      	movs	r0, #0
 8016dba:	e036      	b.n	8016e2a <tcp_write_checks+0xa6>
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8016dbc:	4b1b      	ldr	r3, [pc, #108]	; (8016e2c <tcp_write_checks+0xa8>)
 8016dbe:	f240 1233 	movw	r2, #307	; 0x133
 8016dc2:	491b      	ldr	r1, [pc, #108]	; (8016e30 <tcp_write_checks+0xac>)
 8016dc4:	481b      	ldr	r0, [pc, #108]	; (8016e34 <tcp_write_checks+0xb0>)
 8016dc6:	f004 fe5b 	bl	801ba80 <iprintf>
 8016dca:	e7df      	b.n	8016d8c <tcp_write_checks+0x8>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016dcc:	8b6b      	ldrh	r3, [r5, #26]
 8016dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016dd2:	836b      	strh	r3, [r5, #26]
    return ERR_MEM;
 8016dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8016dd8:	e027      	b.n	8016e2a <tcp_write_checks+0xa6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016dda:	8b6b      	ldrh	r3, [r5, #26]
 8016ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016de0:	836b      	strh	r3, [r5, #26]
    return ERR_MEM;
 8016de2:	f04f 30ff 	mov.w	r0, #4294967295
 8016de6:	e020      	b.n	8016e2a <tcp_write_checks+0xa6>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8016de8:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8016dea:	b10b      	cbz	r3, 8016df0 <tcp_write_checks+0x6c>
  return ERR_OK;
 8016dec:	2000      	movs	r0, #0
 8016dee:	e01c      	b.n	8016e2a <tcp_write_checks+0xa6>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8016df0:	4b0e      	ldr	r3, [pc, #56]	; (8016e2c <tcp_write_checks+0xa8>)
 8016df2:	f240 1255 	movw	r2, #341	; 0x155
 8016df6:	4910      	ldr	r1, [pc, #64]	; (8016e38 <tcp_write_checks+0xb4>)
 8016df8:	480e      	ldr	r0, [pc, #56]	; (8016e34 <tcp_write_checks+0xb0>)
 8016dfa:	f004 fe41 	bl	801ba80 <iprintf>
  return ERR_OK;
 8016dfe:	2000      	movs	r0, #0
 8016e00:	e013      	b.n	8016e2a <tcp_write_checks+0xa6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8016e02:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8016e04:	b143      	cbz	r3, 8016e18 <tcp_write_checks+0x94>
 8016e06:	4b09      	ldr	r3, [pc, #36]	; (8016e2c <tcp_write_checks+0xa8>)
 8016e08:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8016e0c:	490b      	ldr	r1, [pc, #44]	; (8016e3c <tcp_write_checks+0xb8>)
 8016e0e:	4809      	ldr	r0, [pc, #36]	; (8016e34 <tcp_write_checks+0xb0>)
 8016e10:	f004 fe36 	bl	801ba80 <iprintf>
  return ERR_OK;
 8016e14:	2000      	movs	r0, #0
 8016e16:	e008      	b.n	8016e2a <tcp_write_checks+0xa6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8016e18:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d1f3      	bne.n	8016e06 <tcp_write_checks+0x82>
  return ERR_OK;
 8016e1e:	2000      	movs	r0, #0
 8016e20:	e003      	b.n	8016e2a <tcp_write_checks+0xa6>
    return ERR_CONN;
 8016e22:	f06f 000a 	mvn.w	r0, #10
 8016e26:	e000      	b.n	8016e2a <tcp_write_checks+0xa6>
    return ERR_OK;
 8016e28:	2000      	movs	r0, #0
}
 8016e2a:	bd38      	pop	{r3, r4, r5, pc}
 8016e2c:	0801f0c8 	.word	0x0801f0c8
 8016e30:	0801f0fc 	.word	0x0801f0fc
 8016e34:	0801cca4 	.word	0x0801cca4
 8016e38:	0801f11c 	.word	0x0801f11c
 8016e3c:	0801f158 	.word	0x0801f158

08016e40 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016e40:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016e42:	4604      	mov	r4, r0
 8016e44:	b128      	cbz	r0, 8016e52 <tcp_output_segment_busy+0x12>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016e46:	6863      	ldr	r3, [r4, #4]
 8016e48:	7b9b      	ldrb	r3, [r3, #14]
 8016e4a:	2b01      	cmp	r3, #1
 8016e4c:	d109      	bne.n	8016e62 <tcp_output_segment_busy+0x22>
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
 8016e4e:	2000      	movs	r0, #0
}
 8016e50:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016e52:	4b05      	ldr	r3, [pc, #20]	; (8016e68 <tcp_output_segment_busy+0x28>)
 8016e54:	f240 529a 	movw	r2, #1434	; 0x59a
 8016e58:	4904      	ldr	r1, [pc, #16]	; (8016e6c <tcp_output_segment_busy+0x2c>)
 8016e5a:	4805      	ldr	r0, [pc, #20]	; (8016e70 <tcp_output_segment_busy+0x30>)
 8016e5c:	f004 fe10 	bl	801ba80 <iprintf>
 8016e60:	e7f1      	b.n	8016e46 <tcp_output_segment_busy+0x6>
    return 1;
 8016e62:	2001      	movs	r0, #1
 8016e64:	e7f4      	b.n	8016e50 <tcp_output_segment_busy+0x10>
 8016e66:	bf00      	nop
 8016e68:	0801f0c8 	.word	0x0801f0c8
 8016e6c:	0801f18c 	.word	0x0801f18c
 8016e70:	0801cca4 	.word	0x0801cca4

08016e74 <tcp_output_fill_options>:
}

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8016e74:	b538      	push	{r3, r4, r5, lr}
 8016e76:	4614      	mov	r4, r2
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8016e78:	460d      	mov	r5, r1
 8016e7a:	b189      	cbz	r1, 8016ea0 <tcp_output_fill_options+0x2c>

  tcphdr = (struct tcp_hdr *)p->payload;
 8016e7c:	686b      	ldr	r3, [r5, #4]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8016e7e:	f103 0214 	add.w	r2, r3, #20
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8016e82:	00a4      	lsls	r4, r4, #2
 8016e84:	f004 0404 	and.w	r4, r4, #4
 8016e88:	3414      	adds	r4, #20
 8016e8a:	441c      	add	r4, r3
 8016e8c:	4294      	cmp	r4, r2
 8016e8e:	d006      	beq.n	8016e9e <tcp_output_fill_options+0x2a>
 8016e90:	4b07      	ldr	r3, [pc, #28]	; (8016eb0 <tcp_output_fill_options+0x3c>)
 8016e92:	f240 7275 	movw	r2, #1909	; 0x775
 8016e96:	4907      	ldr	r1, [pc, #28]	; (8016eb4 <tcp_output_fill_options+0x40>)
 8016e98:	4807      	ldr	r0, [pc, #28]	; (8016eb8 <tcp_output_fill_options+0x44>)
 8016e9a:	f004 fdf1 	bl	801ba80 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016e9e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8016ea0:	4b03      	ldr	r3, [pc, #12]	; (8016eb0 <tcp_output_fill_options+0x3c>)
 8016ea2:	f240 7256 	movw	r2, #1878	; 0x756
 8016ea6:	4905      	ldr	r1, [pc, #20]	; (8016ebc <tcp_output_fill_options+0x48>)
 8016ea8:	4803      	ldr	r0, [pc, #12]	; (8016eb8 <tcp_output_fill_options+0x44>)
 8016eaa:	f004 fde9 	bl	801ba80 <iprintf>
 8016eae:	e7e5      	b.n	8016e7c <tcp_output_fill_options+0x8>
 8016eb0:	0801f0c8 	.word	0x0801f0c8
 8016eb4:	0801f1dc 	.word	0x0801f1dc
 8016eb8:	0801cca4 	.word	0x0801cca4
 8016ebc:	0801f1b4 	.word	0x0801f1b4

08016ec0 <tcp_pbuf_prealloc>:
{
 8016ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ec4:	4606      	mov	r6, r0
 8016ec6:	460c      	mov	r4, r1
 8016ec8:	4615      	mov	r5, r2
 8016eca:	9f08      	ldr	r7, [sp, #32]
 8016ecc:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8016ed0:	4698      	mov	r8, r3
 8016ed2:	b1cb      	cbz	r3, 8016f08 <tcp_pbuf_prealloc+0x48>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8016ed4:	b1ff      	cbz	r7, 8016f16 <tcp_pbuf_prealloc+0x56>
  if (length < max_length) {
 8016ed6:	42ac      	cmp	r4, r5
 8016ed8:	d229      	bcs.n	8016f2e <tcp_pbuf_prealloc+0x6e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016eda:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8016ede:	f013 0f02 	tst.w	r3, #2
 8016ee2:	d108      	bne.n	8016ef6 <tcp_pbuf_prealloc+0x36>
        (!(pcb->flags & TF_NODELAY) &&
 8016ee4:	8b7b      	ldrh	r3, [r7, #26]
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016ee6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016eea:	d13a      	bne.n	8016f62 <tcp_pbuf_prealloc+0xa2>
        (!(pcb->flags & TF_NODELAY) &&
 8016eec:	f1b9 0f00 	cmp.w	r9, #0
 8016ef0:	d001      	beq.n	8016ef6 <tcp_pbuf_prealloc+0x36>
          pcb->unsent != NULL ||
 8016ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
         (!first_seg ||
 8016ef4:	b1b3      	cbz	r3, 8016f24 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8016ef6:	f204 211b 	addw	r1, r4, #539	; 0x21b
 8016efa:	f021 0103 	bic.w	r1, r1, #3
 8016efe:	428d      	cmp	r5, r1
 8016f00:	bf28      	it	cs
 8016f02:	460d      	movcs	r5, r1
 8016f04:	b2a9      	uxth	r1, r5
 8016f06:	e013      	b.n	8016f30 <tcp_pbuf_prealloc+0x70>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8016f08:	4b17      	ldr	r3, [pc, #92]	; (8016f68 <tcp_pbuf_prealloc+0xa8>)
 8016f0a:	22e8      	movs	r2, #232	; 0xe8
 8016f0c:	4917      	ldr	r1, [pc, #92]	; (8016f6c <tcp_pbuf_prealloc+0xac>)
 8016f0e:	4818      	ldr	r0, [pc, #96]	; (8016f70 <tcp_pbuf_prealloc+0xb0>)
 8016f10:	f004 fdb6 	bl	801ba80 <iprintf>
 8016f14:	e7de      	b.n	8016ed4 <tcp_pbuf_prealloc+0x14>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8016f16:	4b14      	ldr	r3, [pc, #80]	; (8016f68 <tcp_pbuf_prealloc+0xa8>)
 8016f18:	22e9      	movs	r2, #233	; 0xe9
 8016f1a:	4916      	ldr	r1, [pc, #88]	; (8016f74 <tcp_pbuf_prealloc+0xb4>)
 8016f1c:	4814      	ldr	r0, [pc, #80]	; (8016f70 <tcp_pbuf_prealloc+0xb0>)
 8016f1e:	f004 fdaf 	bl	801ba80 <iprintf>
 8016f22:	e7d8      	b.n	8016ed6 <tcp_pbuf_prealloc+0x16>
          pcb->unacked != NULL))) {
 8016f24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
          pcb->unsent != NULL ||
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d1e5      	bne.n	8016ef6 <tcp_pbuf_prealloc+0x36>
  u16_t alloc = length;
 8016f2a:	4621      	mov	r1, r4
 8016f2c:	e000      	b.n	8016f30 <tcp_pbuf_prealloc+0x70>
 8016f2e:	4621      	mov	r1, r4
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8016f30:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016f34:	4630      	mov	r0, r6
 8016f36:	f7fc fdd1 	bl	8013adc <pbuf_alloc>
  if (p == NULL) {
 8016f3a:	4605      	mov	r5, r0
 8016f3c:	b170      	cbz	r0, 8016f5c <tcp_pbuf_prealloc+0x9c>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8016f3e:	6803      	ldr	r3, [r0, #0]
 8016f40:	b133      	cbz	r3, 8016f50 <tcp_pbuf_prealloc+0x90>
 8016f42:	4b09      	ldr	r3, [pc, #36]	; (8016f68 <tcp_pbuf_prealloc+0xa8>)
 8016f44:	f240 120b 	movw	r2, #267	; 0x10b
 8016f48:	490b      	ldr	r1, [pc, #44]	; (8016f78 <tcp_pbuf_prealloc+0xb8>)
 8016f4a:	4809      	ldr	r0, [pc, #36]	; (8016f70 <tcp_pbuf_prealloc+0xb0>)
 8016f4c:	f004 fd98 	bl	801ba80 <iprintf>
  *oversize = p->len - length;
 8016f50:	896b      	ldrh	r3, [r5, #10]
 8016f52:	1b1b      	subs	r3, r3, r4
 8016f54:	f8a8 3000 	strh.w	r3, [r8]
  p->len = p->tot_len = length;
 8016f58:	812c      	strh	r4, [r5, #8]
 8016f5a:	816c      	strh	r4, [r5, #10]
}
 8016f5c:	4628      	mov	r0, r5
 8016f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u16_t alloc = length;
 8016f62:	4621      	mov	r1, r4
 8016f64:	e7e4      	b.n	8016f30 <tcp_pbuf_prealloc+0x70>
 8016f66:	bf00      	nop
 8016f68:	0801f0c8 	.word	0x0801f0c8
 8016f6c:	0801f1f0 	.word	0x0801f1f0
 8016f70:	0801cca4 	.word	0x0801cca4
 8016f74:	0801f214 	.word	0x0801f214
 8016f78:	0801f234 	.word	0x0801f234

08016f7c <tcp_create_segment>:
{
 8016f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f80:	460e      	mov	r6, r1
 8016f82:	4617      	mov	r7, r2
 8016f84:	4698      	mov	r8, r3
 8016f86:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8016f8a:	4681      	mov	r9, r0
 8016f8c:	2800      	cmp	r0, #0
 8016f8e:	d043      	beq.n	8017018 <tcp_create_segment+0x9c>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8016f90:	2e00      	cmp	r6, #0
 8016f92:	d048      	beq.n	8017026 <tcp_create_segment+0xaa>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016f94:	ea4f 058a 	mov.w	r5, sl, lsl #2
 8016f98:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8016f9c:	2003      	movs	r0, #3
 8016f9e:	f7fc fa5d 	bl	801345c <memp_malloc>
 8016fa2:	4604      	mov	r4, r0
 8016fa4:	2800      	cmp	r0, #0
 8016fa6:	d045      	beq.n	8017034 <tcp_create_segment+0xb8>
  seg->flags = optflags;
 8016fa8:	f880 a00c 	strb.w	sl, [r0, #12]
  seg->next = NULL;
 8016fac:	2300      	movs	r3, #0
 8016fae:	6003      	str	r3, [r0, #0]
  seg->p = p;
 8016fb0:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8016fb2:	8933      	ldrh	r3, [r6, #8]
 8016fb4:	fa1f fa85 	uxth.w	sl, r5
 8016fb8:	4553      	cmp	r3, sl
 8016fba:	d33f      	bcc.n	801703c <tcp_create_segment+0xc0>
  seg->len = p->tot_len - optlen;
 8016fbc:	8931      	ldrh	r1, [r6, #8]
 8016fbe:	eba1 010a 	sub.w	r1, r1, sl
 8016fc2:	8121      	strh	r1, [r4, #8]
  seg->oversize_left = 0;
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	8163      	strh	r3, [r4, #10]
  if (pbuf_add_header(p, TCP_HLEN)) {
 8016fc8:	2114      	movs	r1, #20
 8016fca:	4630      	mov	r0, r6
 8016fcc:	f7fc fcd9 	bl	8013982 <pbuf_add_header>
 8016fd0:	2800      	cmp	r0, #0
 8016fd2:	d13a      	bne.n	801704a <tcp_create_segment+0xce>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8016fd4:	6863      	ldr	r3, [r4, #4]
 8016fd6:	685e      	ldr	r6, [r3, #4]
 8016fd8:	6126      	str	r6, [r4, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8016fda:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 8016fde:	f7fb fcc3 	bl	8012968 <lwip_htons>
 8016fe2:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8016fe4:	6926      	ldr	r6, [r4, #16]
 8016fe6:	f8b9 0018 	ldrh.w	r0, [r9, #24]
 8016fea:	f7fb fcbd 	bl	8012968 <lwip_htons>
 8016fee:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8016ff0:	6926      	ldr	r6, [r4, #16]
 8016ff2:	4640      	mov	r0, r8
 8016ff4:	f7fb fcbd 	bl	8012972 <lwip_htonl>
 8016ff8:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8016ffa:	08a8      	lsrs	r0, r5, #2
 8016ffc:	3005      	adds	r0, #5
 8016ffe:	6925      	ldr	r5, [r4, #16]
 8017000:	ea47 3000 	orr.w	r0, r7, r0, lsl #12
 8017004:	f7fb fcb0 	bl	8012968 <lwip_htons>
 8017008:	81a8      	strh	r0, [r5, #12]
  seg->tcphdr->urgp = 0;
 801700a:	6923      	ldr	r3, [r4, #16]
 801700c:	2200      	movs	r2, #0
 801700e:	749a      	strb	r2, [r3, #18]
 8017010:	74da      	strb	r2, [r3, #19]
}
 8017012:	4620      	mov	r0, r4
 8017014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8017018:	4b0e      	ldr	r3, [pc, #56]	; (8017054 <tcp_create_segment+0xd8>)
 801701a:	22a3      	movs	r2, #163	; 0xa3
 801701c:	490e      	ldr	r1, [pc, #56]	; (8017058 <tcp_create_segment+0xdc>)
 801701e:	480f      	ldr	r0, [pc, #60]	; (801705c <tcp_create_segment+0xe0>)
 8017020:	f004 fd2e 	bl	801ba80 <iprintf>
 8017024:	e7b4      	b.n	8016f90 <tcp_create_segment+0x14>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8017026:	4b0b      	ldr	r3, [pc, #44]	; (8017054 <tcp_create_segment+0xd8>)
 8017028:	22a4      	movs	r2, #164	; 0xa4
 801702a:	490d      	ldr	r1, [pc, #52]	; (8017060 <tcp_create_segment+0xe4>)
 801702c:	480b      	ldr	r0, [pc, #44]	; (801705c <tcp_create_segment+0xe0>)
 801702e:	f004 fd27 	bl	801ba80 <iprintf>
 8017032:	e7af      	b.n	8016f94 <tcp_create_segment+0x18>
    pbuf_free(p);
 8017034:	4630      	mov	r0, r6
 8017036:	f7fc fcef 	bl	8013a18 <pbuf_free>
    return NULL;
 801703a:	e7ea      	b.n	8017012 <tcp_create_segment+0x96>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801703c:	4b05      	ldr	r3, [pc, #20]	; (8017054 <tcp_create_segment+0xd8>)
 801703e:	22b0      	movs	r2, #176	; 0xb0
 8017040:	4908      	ldr	r1, [pc, #32]	; (8017064 <tcp_create_segment+0xe8>)
 8017042:	4806      	ldr	r0, [pc, #24]	; (801705c <tcp_create_segment+0xe0>)
 8017044:	f004 fd1c 	bl	801ba80 <iprintf>
 8017048:	e7b8      	b.n	8016fbc <tcp_create_segment+0x40>
    tcp_seg_free(seg);
 801704a:	4620      	mov	r0, r4
 801704c:	f7fd faba 	bl	80145c4 <tcp_seg_free>
    return NULL;
 8017050:	2400      	movs	r4, #0
 8017052:	e7de      	b.n	8017012 <tcp_create_segment+0x96>
 8017054:	0801f0c8 	.word	0x0801f0c8
 8017058:	0801f248 	.word	0x0801f248
 801705c:	0801cca4 	.word	0x0801cca4
 8017060:	0801f268 	.word	0x0801f268
 8017064:	0801f28c 	.word	0x0801f28c

08017068 <tcp_output_alloc_header_common>:
{
 8017068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801706c:	4606      	mov	r6, r0
 801706e:	460c      	mov	r4, r1
 8017070:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8017072:	4411      	add	r1, r2
 8017074:	b289      	uxth	r1, r1
 8017076:	3114      	adds	r1, #20
 8017078:	f44f 7220 	mov.w	r2, #640	; 0x280
 801707c:	b289      	uxth	r1, r1
 801707e:	2022      	movs	r0, #34	; 0x22
 8017080:	f7fc fd2c 	bl	8013adc <pbuf_alloc>
  if (p != NULL) {
 8017084:	4607      	mov	r7, r0
 8017086:	b348      	cbz	r0, 80170dc <tcp_output_alloc_header_common+0x74>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8017088:	f104 0313 	add.w	r3, r4, #19
 801708c:	8942      	ldrh	r2, [r0, #10]
 801708e:	4293      	cmp	r3, r2
 8017090:	da27      	bge.n	80170e2 <tcp_output_alloc_header_common+0x7a>
    tcphdr = (struct tcp_hdr *)p->payload;
 8017092:	687d      	ldr	r5, [r7, #4]
    tcphdr->src = lwip_htons(src_port);
 8017094:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8017098:	f7fb fc66 	bl	8012968 <lwip_htons>
 801709c:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801709e:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 80170a2:	f7fb fc61 	bl	8012968 <lwip_htons>
 80170a6:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 80170a8:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80170ac:	4630      	mov	r0, r6
 80170ae:	f7fb fc60 	bl	8012972 <lwip_htonl>
 80170b2:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80170b4:	08a4      	lsrs	r4, r4, #2
 80170b6:	3405      	adds	r4, #5
 80170b8:	0324      	lsls	r4, r4, #12
 80170ba:	b2a4      	uxth	r4, r4
 80170bc:	f89d 0020 	ldrb.w	r0, [sp, #32]
 80170c0:	4320      	orrs	r0, r4
 80170c2:	f7fb fc51 	bl	8012968 <lwip_htons>
 80170c6:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80170c8:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 80170cc:	f7fb fc4c 	bl	8012968 <lwip_htons>
 80170d0:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 80170d2:	2300      	movs	r3, #0
 80170d4:	742b      	strb	r3, [r5, #16]
 80170d6:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 80170d8:	74ab      	strb	r3, [r5, #18]
 80170da:	74eb      	strb	r3, [r5, #19]
}
 80170dc:	4638      	mov	r0, r7
 80170de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80170e2:	4b04      	ldr	r3, [pc, #16]	; (80170f4 <tcp_output_alloc_header_common+0x8c>)
 80170e4:	f240 7223 	movw	r2, #1827	; 0x723
 80170e8:	4903      	ldr	r1, [pc, #12]	; (80170f8 <tcp_output_alloc_header_common+0x90>)
 80170ea:	4804      	ldr	r0, [pc, #16]	; (80170fc <tcp_output_alloc_header_common+0x94>)
 80170ec:	f004 fcc8 	bl	801ba80 <iprintf>
 80170f0:	e7cf      	b.n	8017092 <tcp_output_alloc_header_common+0x2a>
 80170f2:	bf00      	nop
 80170f4:	0801f0c8 	.word	0x0801f0c8
 80170f8:	0801f2a4 	.word	0x0801f2a4
 80170fc:	0801cca4 	.word	0x0801cca4

08017100 <tcp_output_alloc_header>:
{
 8017100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017102:	b085      	sub	sp, #20
 8017104:	460d      	mov	r5, r1
 8017106:	4616      	mov	r6, r2
 8017108:	461f      	mov	r7, r3
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801710a:	4604      	mov	r4, r0
 801710c:	b1a0      	cbz	r0, 8017138 <tcp_output_alloc_header+0x38>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801710e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8017110:	9303      	str	r3, [sp, #12]
 8017112:	2310      	movs	r3, #16
 8017114:	9302      	str	r3, [sp, #8]
 8017116:	8b23      	ldrh	r3, [r4, #24]
 8017118:	9301      	str	r3, [sp, #4]
 801711a:	8ae3      	ldrh	r3, [r4, #22]
 801711c:	9300      	str	r3, [sp, #0]
 801711e:	463b      	mov	r3, r7
 8017120:	4632      	mov	r2, r6
 8017122:	4629      	mov	r1, r5
 8017124:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017126:	f7ff ff9f 	bl	8017068 <tcp_output_alloc_header_common>
  if (p != NULL) {
 801712a:	b118      	cbz	r0, 8017134 <tcp_output_alloc_header+0x34>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801712c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801712e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8017130:	4413      	add	r3, r2
 8017132:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8017134:	b005      	add	sp, #20
 8017136:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017138:	4b03      	ldr	r3, [pc, #12]	; (8017148 <tcp_output_alloc_header+0x48>)
 801713a:	f240 7242 	movw	r2, #1858	; 0x742
 801713e:	4903      	ldr	r1, [pc, #12]	; (801714c <tcp_output_alloc_header+0x4c>)
 8017140:	4803      	ldr	r0, [pc, #12]	; (8017150 <tcp_output_alloc_header+0x50>)
 8017142:	f004 fc9d 	bl	801ba80 <iprintf>
 8017146:	e7e2      	b.n	801710e <tcp_output_alloc_header+0xe>
 8017148:	0801f0c8 	.word	0x0801f0c8
 801714c:	0801f2d4 	.word	0x0801f2d4
 8017150:	0801cca4 	.word	0x0801cca4

08017154 <tcp_route>:
{
 8017154:	b508      	push	{r3, lr}
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8017156:	b108      	cbz	r0, 801715c <tcp_route+0x8>
 8017158:	7a00      	ldrb	r0, [r0, #8]
 801715a:	b918      	cbnz	r0, 8017164 <tcp_route+0x10>
    return ip_route(src, dst);
 801715c:	4610      	mov	r0, r2
 801715e:	f003 fdb9 	bl	801acd4 <ip4_route>
}
 8017162:	bd08      	pop	{r3, pc}
    return netif_get_by_index(pcb->netif_idx);
 8017164:	f7fc fb42 	bl	80137ec <netif_get_by_index>
 8017168:	e7fb      	b.n	8017162 <tcp_route+0xe>
	...

0801716c <tcp_output_segment>:
{
 801716c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017170:	b084      	sub	sp, #16
 8017172:	460c      	mov	r4, r1
 8017174:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017176:	4605      	mov	r5, r0
 8017178:	b148      	cbz	r0, 801718e <tcp_output_segment+0x22>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801717a:	b184      	cbz	r4, 801719e <tcp_output_segment+0x32>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801717c:	b1be      	cbz	r6, 80171ae <tcp_output_segment+0x42>
  if (tcp_output_segment_busy(seg)) {
 801717e:	4628      	mov	r0, r5
 8017180:	f7ff fe5e 	bl	8016e40 <tcp_output_segment_busy>
 8017184:	b1d8      	cbz	r0, 80171be <tcp_output_segment+0x52>
    return ERR_OK;
 8017186:	2000      	movs	r0, #0
}
 8017188:	b004      	add	sp, #16
 801718a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801718e:	4b3f      	ldr	r3, [pc, #252]	; (801728c <tcp_output_segment+0x120>)
 8017190:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8017194:	493e      	ldr	r1, [pc, #248]	; (8017290 <tcp_output_segment+0x124>)
 8017196:	483f      	ldr	r0, [pc, #252]	; (8017294 <tcp_output_segment+0x128>)
 8017198:	f004 fc72 	bl	801ba80 <iprintf>
 801719c:	e7ed      	b.n	801717a <tcp_output_segment+0xe>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801719e:	4b3b      	ldr	r3, [pc, #236]	; (801728c <tcp_output_segment+0x120>)
 80171a0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80171a4:	493c      	ldr	r1, [pc, #240]	; (8017298 <tcp_output_segment+0x12c>)
 80171a6:	483b      	ldr	r0, [pc, #236]	; (8017294 <tcp_output_segment+0x128>)
 80171a8:	f004 fc6a 	bl	801ba80 <iprintf>
 80171ac:	e7e6      	b.n	801717c <tcp_output_segment+0x10>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80171ae:	4b37      	ldr	r3, [pc, #220]	; (801728c <tcp_output_segment+0x120>)
 80171b0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80171b4:	4939      	ldr	r1, [pc, #228]	; (801729c <tcp_output_segment+0x130>)
 80171b6:	4837      	ldr	r0, [pc, #220]	; (8017294 <tcp_output_segment+0x128>)
 80171b8:	f004 fc62 	bl	801ba80 <iprintf>
 80171bc:	e7df      	b.n	801717e <tcp_output_segment+0x12>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80171be:	692f      	ldr	r7, [r5, #16]
 80171c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80171c2:	f7fb fbd6 	bl	8012972 <lwip_htonl>
 80171c6:	60b8      	str	r0, [r7, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80171c8:	692f      	ldr	r7, [r5, #16]
 80171ca:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80171cc:	f7fb fbcc 	bl	8012968 <lwip_htons>
 80171d0:	81f8      	strh	r0, [r7, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80171d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80171d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80171d6:	4413      	add	r3, r2
 80171d8:	62e3      	str	r3, [r4, #44]	; 0x2c
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80171da:	f8d5 8010 	ldr.w	r8, [r5, #16]
 80171de:	f108 0714 	add.w	r7, r8, #20
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80171e2:	7b2b      	ldrb	r3, [r5, #12]
 80171e4:	f013 0f01 	tst.w	r3, #1
 80171e8:	d134      	bne.n	8017254 <tcp_output_segment+0xe8>
  if (pcb->rtime < 0) {
 80171ea:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	db3f      	blt.n	8017272 <tcp_output_segment+0x106>
  if (pcb->rttest == 0) {
 80171f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d03f      	beq.n	8017278 <tcp_output_segment+0x10c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80171f8:	692b      	ldr	r3, [r5, #16]
 80171fa:	686a      	ldr	r2, [r5, #4]
 80171fc:	6851      	ldr	r1, [r2, #4]
 80171fe:	1a5b      	subs	r3, r3, r1
 8017200:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 8017202:	8951      	ldrh	r1, [r2, #10]
 8017204:	1ac9      	subs	r1, r1, r3
 8017206:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 8017208:	6869      	ldr	r1, [r5, #4]
 801720a:	890a      	ldrh	r2, [r1, #8]
 801720c:	1ad3      	subs	r3, r2, r3
 801720e:	810b      	strh	r3, [r1, #8]
  seg->p->payload = seg->tcphdr;
 8017210:	686a      	ldr	r2, [r5, #4]
 8017212:	692b      	ldr	r3, [r5, #16]
 8017214:	6053      	str	r3, [r2, #4]
  seg->tcphdr->chksum = 0;
 8017216:	2200      	movs	r2, #0
 8017218:	741a      	strb	r2, [r3, #16]
 801721a:	745a      	strb	r2, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801721c:	692a      	ldr	r2, [r5, #16]
 801721e:	7b2b      	ldrb	r3, [r5, #12]
 8017220:	009b      	lsls	r3, r3, #2
 8017222:	f003 0304 	and.w	r3, r3, #4
 8017226:	3314      	adds	r3, #20
 8017228:	4413      	add	r3, r2
 801722a:	429f      	cmp	r7, r3
 801722c:	d006      	beq.n	801723c <tcp_output_segment+0xd0>
 801722e:	4b17      	ldr	r3, [pc, #92]	; (801728c <tcp_output_segment+0x120>)
 8017230:	f240 621c 	movw	r2, #1564	; 0x61c
 8017234:	491a      	ldr	r1, [pc, #104]	; (80172a0 <tcp_output_segment+0x134>)
 8017236:	4817      	ldr	r0, [pc, #92]	; (8017294 <tcp_output_segment+0x128>)
 8017238:	f004 fc22 	bl	801ba80 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801723c:	9602      	str	r6, [sp, #8]
 801723e:	2306      	movs	r3, #6
 8017240:	9301      	str	r3, [sp, #4]
 8017242:	7aa3      	ldrb	r3, [r4, #10]
 8017244:	9300      	str	r3, [sp, #0]
 8017246:	7ae3      	ldrb	r3, [r4, #11]
 8017248:	1d22      	adds	r2, r4, #4
 801724a:	4621      	mov	r1, r4
 801724c:	6868      	ldr	r0, [r5, #4]
 801724e:	f003 fed1 	bl	801aff4 <ip4_output_if>
  return err;
 8017252:	e799      	b.n	8017188 <tcp_output_segment+0x1c>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8017254:	1d22      	adds	r2, r4, #4
 8017256:	4631      	mov	r1, r6
 8017258:	f44f 7006 	mov.w	r0, #536	; 0x218
 801725c:	f7fd fa9c 	bl	8014798 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8017260:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8017264:	f7fb fb85 	bl	8012972 <lwip_htonl>
 8017268:	f8c8 0014 	str.w	r0, [r8, #20]
    opts += 1;
 801726c:	f108 0718 	add.w	r7, r8, #24
 8017270:	e7bb      	b.n	80171ea <tcp_output_segment+0x7e>
    pcb->rtime = 0;
 8017272:	2300      	movs	r3, #0
 8017274:	8623      	strh	r3, [r4, #48]	; 0x30
 8017276:	e7bc      	b.n	80171f2 <tcp_output_segment+0x86>
    pcb->rttest = tcp_ticks;
 8017278:	4b0a      	ldr	r3, [pc, #40]	; (80172a4 <tcp_output_segment+0x138>)
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801727e:	692b      	ldr	r3, [r5, #16]
 8017280:	6858      	ldr	r0, [r3, #4]
 8017282:	f7fb fb76 	bl	8012972 <lwip_htonl>
 8017286:	63a0      	str	r0, [r4, #56]	; 0x38
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_output_segment: rtseq %"U32_F"\n", pcb->rtseq));
 8017288:	e7b6      	b.n	80171f8 <tcp_output_segment+0x8c>
 801728a:	bf00      	nop
 801728c:	0801f0c8 	.word	0x0801f0c8
 8017290:	0801f2fc 	.word	0x0801f2fc
 8017294:	0801cca4 	.word	0x0801cca4
 8017298:	0801f31c 	.word	0x0801f31c
 801729c:	0801f33c 	.word	0x0801f33c
 80172a0:	0801f1dc 	.word	0x0801f1dc
 80172a4:	20007220 	.word	0x20007220

080172a8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80172a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172aa:	b085      	sub	sp, #20
 80172ac:	4604      	mov	r4, r0
 80172ae:	4615      	mov	r5, r2
 80172b0:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80172b2:	460f      	mov	r7, r1
 80172b4:	b1c9      	cbz	r1, 80172ea <tcp_output_control_segment+0x42>

  netif = tcp_route(pcb, src, dst);
 80172b6:	4632      	mov	r2, r6
 80172b8:	4629      	mov	r1, r5
 80172ba:	4620      	mov	r0, r4
 80172bc:	f7ff ff4a 	bl	8017154 <tcp_route>
  if (netif == NULL) {
 80172c0:	4602      	mov	r2, r0
 80172c2:	b1e8      	cbz	r0, 8017300 <tcp_output_control_segment+0x58>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80172c4:	b1cc      	cbz	r4, 80172fa <tcp_output_control_segment+0x52>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80172c6:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 80172c8:	7aa1      	ldrb	r1, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80172ca:	9202      	str	r2, [sp, #8]
 80172cc:	2206      	movs	r2, #6
 80172ce:	9201      	str	r2, [sp, #4]
 80172d0:	9100      	str	r1, [sp, #0]
 80172d2:	4632      	mov	r2, r6
 80172d4:	4629      	mov	r1, r5
 80172d6:	4638      	mov	r0, r7
 80172d8:	f003 fe8c 	bl	801aff4 <ip4_output_if>
 80172dc:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80172de:	4638      	mov	r0, r7
 80172e0:	f7fc fb9a 	bl	8013a18 <pbuf_free>
  return err;
}
 80172e4:	4620      	mov	r0, r4
 80172e6:	b005      	add	sp, #20
 80172e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80172ea:	4b07      	ldr	r3, [pc, #28]	; (8017308 <tcp_output_control_segment+0x60>)
 80172ec:	f240 7287 	movw	r2, #1927	; 0x787
 80172f0:	4906      	ldr	r1, [pc, #24]	; (801730c <tcp_output_control_segment+0x64>)
 80172f2:	4807      	ldr	r0, [pc, #28]	; (8017310 <tcp_output_control_segment+0x68>)
 80172f4:	f004 fbc4 	bl	801ba80 <iprintf>
 80172f8:	e7dd      	b.n	80172b6 <tcp_output_control_segment+0xe>
      tos = 0;
 80172fa:	2100      	movs	r1, #0
      ttl = TCP_TTL;
 80172fc:	23ff      	movs	r3, #255	; 0xff
 80172fe:	e7e4      	b.n	80172ca <tcp_output_control_segment+0x22>
    err = ERR_RTE;
 8017300:	f06f 0403 	mvn.w	r4, #3
 8017304:	e7eb      	b.n	80172de <tcp_output_control_segment+0x36>
 8017306:	bf00      	nop
 8017308:	0801f0c8 	.word	0x0801f0c8
 801730c:	0801f360 	.word	0x0801f360
 8017310:	0801cca4 	.word	0x0801cca4

08017314 <tcp_write>:
{
 8017314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017318:	b091      	sub	sp, #68	; 0x44
 801731a:	9107      	str	r1, [sp, #28]
 801731c:	9306      	str	r3, [sp, #24]
  u16_t oversize = 0;
 801731e:	2300      	movs	r3, #0
 8017320:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8017324:	2800      	cmp	r0, #0
 8017326:	f000 80a7 	beq.w	8017478 <tcp_write+0x164>
 801732a:	4692      	mov	sl, r2
 801732c:	4680      	mov	r8, r0
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801732e:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8017332:	085b      	lsrs	r3, r3, #1
 8017334:	f8b0 b032 	ldrh.w	fp, [r0, #50]	; 0x32
 8017338:	455b      	cmp	r3, fp
 801733a:	bf28      	it	cs
 801733c:	465b      	movcs	r3, fp
  mss_local = mss_local ? mss_local : pcb->mss;
 801733e:	b103      	cbz	r3, 8017342 <tcp_write+0x2e>
 8017340:	469b      	mov	fp, r3
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8017342:	9b07      	ldr	r3, [sp, #28]
 8017344:	2b00      	cmp	r3, #0
 8017346:	f000 80a2 	beq.w	801748e <tcp_write+0x17a>
  err = tcp_write_checks(pcb, len);
 801734a:	4651      	mov	r1, sl
 801734c:	4640      	mov	r0, r8
 801734e:	f7ff fd19 	bl	8016d84 <tcp_write_checks>
  if (err != ERR_OK) {
 8017352:	9009      	str	r0, [sp, #36]	; 0x24
 8017354:	2800      	cmp	r0, #0
 8017356:	f040 81b9 	bne.w	80176cc <tcp_write+0x3b8>
  queuelen = pcb->snd_queuelen;
 801735a:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
  if (pcb->unsent != NULL) {
 801735e:	f8d8 906c 	ldr.w	r9, [r8, #108]	; 0x6c
 8017362:	f1b9 0f00 	cmp.w	r9, #0
 8017366:	f000 80f2 	beq.w	801754e <tcp_write+0x23a>
 801736a:	464b      	mov	r3, r9
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801736c:	9308      	str	r3, [sp, #32]
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	2b00      	cmp	r3, #0
 8017372:	d1fb      	bne.n	801736c <tcp_write+0x58>
 8017374:	4699      	mov	r9, r3
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8017376:	9b08      	ldr	r3, [sp, #32]
 8017378:	7b1c      	ldrb	r4, [r3, #12]
 801737a:	00a4      	lsls	r4, r4, #2
 801737c:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8017380:	891b      	ldrh	r3, [r3, #8]
 8017382:	4423      	add	r3, r4
 8017384:	459b      	cmp	fp, r3
 8017386:	f2c0 808d 	blt.w	80174a4 <tcp_write+0x190>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801738a:	9908      	ldr	r1, [sp, #32]
 801738c:	890b      	ldrh	r3, [r1, #8]
 801738e:	441c      	add	r4, r3
 8017390:	b2a4      	uxth	r4, r4
 8017392:	ebab 0404 	sub.w	r4, fp, r4
 8017396:	b2a3      	uxth	r3, r4
 8017398:	930b      	str	r3, [sp, #44]	; 0x2c
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 801739a:	f8b8 2068 	ldrh.w	r2, [r8, #104]	; 0x68
 801739e:	894b      	ldrh	r3, [r1, #10]
 80173a0:	429a      	cmp	r2, r3
 80173a2:	f040 8087 	bne.w	80174b4 <tcp_write+0x1a0>
    oversize = pcb->unsent_oversize;
 80173a6:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 80173aa:	930a      	str	r3, [sp, #40]	; 0x28
 80173ac:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	f000 808f 	beq.w	80174d4 <tcp_write+0x1c0>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80173b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80173b8:	4293      	cmp	r3, r2
 80173ba:	f200 8083 	bhi.w	80174c4 <tcp_write+0x1b0>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80173be:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80173c2:	461a      	mov	r2, r3
 80173c4:	4553      	cmp	r3, sl
 80173c6:	bf28      	it	cs
 80173c8:	4652      	movcs	r2, sl
 80173ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80173cc:	428a      	cmp	r2, r1
 80173ce:	bf28      	it	cs
 80173d0:	460a      	movcs	r2, r1
 80173d2:	b292      	uxth	r2, r2
 80173d4:	920a      	str	r2, [sp, #40]	; 0x28
      oversize -= oversize_used;
 80173d6:	1a9b      	subs	r3, r3, r2
 80173d8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 80173dc:	1a8b      	subs	r3, r1, r2
 80173de:	b29b      	uxth	r3, r3
 80173e0:	930b      	str	r3, [sp, #44]	; 0x2c
      seg = last_unsent;
 80173e2:	9f08      	ldr	r7, [sp, #32]
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80173e4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80173e8:	b113      	cbz	r3, 80173f0 <tcp_write+0xdc>
 80173ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173ec:	4553      	cmp	r3, sl
 80173ee:	d173      	bne.n	80174d8 <tcp_write+0x1c4>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80173f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173f2:	4553      	cmp	r3, sl
 80173f4:	f080 8178 	bcs.w	80176e8 <tcp_write+0x3d4>
 80173f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80173fa:	2a00      	cmp	r2, #0
 80173fc:	f000 817e 	beq.w	80176fc <tcp_write+0x3e8>
 8017400:	9908      	ldr	r1, [sp, #32]
 8017402:	8909      	ldrh	r1, [r1, #8]
 8017404:	910d      	str	r1, [sp, #52]	; 0x34
 8017406:	2900      	cmp	r1, #0
 8017408:	f000 817c 	beq.w	8017704 <tcp_write+0x3f0>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801740c:	ebaa 0403 	sub.w	r4, sl, r3
 8017410:	4294      	cmp	r4, r2
 8017412:	bfa8      	it	ge
 8017414:	4614      	movge	r4, r2
 8017416:	b2a5      	uxth	r5, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017418:	9b06      	ldr	r3, [sp, #24]
 801741a:	f013 0f01 	tst.w	r3, #1
 801741e:	d163      	bne.n	80174e8 <tcp_write+0x1d4>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8017420:	9b08      	ldr	r3, [sp, #32]
 8017422:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8017426:	464a      	mov	r2, r9
 8017428:	4613      	mov	r3, r2
 801742a:	6812      	ldr	r2, [r2, #0]
 801742c:	2a00      	cmp	r2, #0
 801742e:	d1fb      	bne.n	8017428 <tcp_write+0x114>
 8017430:	4691      	mov	r9, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017432:	7b1a      	ldrb	r2, [r3, #12]
 8017434:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8017438:	d105      	bne.n	8017446 <tcp_write+0x132>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801743a:	685a      	ldr	r2, [r3, #4]
 801743c:	895b      	ldrh	r3, [r3, #10]
 801743e:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017440:	9a07      	ldr	r2, [sp, #28]
 8017442:	4293      	cmp	r3, r2
 8017444:	d072      	beq.n	801752c <tcp_write+0x218>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8017446:	2201      	movs	r2, #1
 8017448:	4629      	mov	r1, r5
 801744a:	2000      	movs	r0, #0
 801744c:	f7fc fb46 	bl	8013adc <pbuf_alloc>
 8017450:	4681      	mov	r9, r0
 8017452:	2800      	cmp	r0, #0
 8017454:	f000 822f 	beq.w	80178b6 <tcp_write+0x5a2>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8017458:	9b07      	ldr	r3, [sp, #28]
 801745a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801745c:	4413      	add	r3, r2
 801745e:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 8017460:	f7fc fc3e 	bl	8013ce0 <pbuf_clen>
 8017464:	4406      	add	r6, r0
 8017466:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 8017468:	2300      	movs	r3, #0
 801746a:	930d      	str	r3, [sp, #52]	; 0x34
  u16_t oversize_add = 0;
 801746c:	930b      	str	r3, [sp, #44]	; 0x2c
      pos += seglen;
 801746e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017470:	195c      	adds	r4, r3, r5
 8017472:	b2a4      	uxth	r4, r4
      seg = last_unsent;
 8017474:	9f08      	ldr	r7, [sp, #32]
 8017476:	e13b      	b.n	80176f0 <tcp_write+0x3dc>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8017478:	4bad      	ldr	r3, [pc, #692]	; (8017730 <tcp_write+0x41c>)
 801747a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801747e:	49ad      	ldr	r1, [pc, #692]	; (8017734 <tcp_write+0x420>)
 8017480:	48ad      	ldr	r0, [pc, #692]	; (8017738 <tcp_write+0x424>)
 8017482:	f004 fafd 	bl	801ba80 <iprintf>
 8017486:	f06f 030f 	mvn.w	r3, #15
 801748a:	9309      	str	r3, [sp, #36]	; 0x24
 801748c:	e11e      	b.n	80176cc <tcp_write+0x3b8>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801748e:	4ba8      	ldr	r3, [pc, #672]	; (8017730 <tcp_write+0x41c>)
 8017490:	f240 12ad 	movw	r2, #429	; 0x1ad
 8017494:	49a9      	ldr	r1, [pc, #676]	; (801773c <tcp_write+0x428>)
 8017496:	48a8      	ldr	r0, [pc, #672]	; (8017738 <tcp_write+0x424>)
 8017498:	f004 faf2 	bl	801ba80 <iprintf>
 801749c:	f06f 030f 	mvn.w	r3, #15
 80174a0:	9309      	str	r3, [sp, #36]	; 0x24
 80174a2:	e113      	b.n	80176cc <tcp_write+0x3b8>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80174a4:	4ba2      	ldr	r3, [pc, #648]	; (8017730 <tcp_write+0x41c>)
 80174a6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80174aa:	49a5      	ldr	r1, [pc, #660]	; (8017740 <tcp_write+0x42c>)
 80174ac:	48a2      	ldr	r0, [pc, #648]	; (8017738 <tcp_write+0x424>)
 80174ae:	f004 fae7 	bl	801ba80 <iprintf>
 80174b2:	e76a      	b.n	801738a <tcp_write+0x76>
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 80174b4:	4b9e      	ldr	r3, [pc, #632]	; (8017730 <tcp_write+0x41c>)
 80174b6:	f240 12f3 	movw	r2, #499	; 0x1f3
 80174ba:	49a2      	ldr	r1, [pc, #648]	; (8017744 <tcp_write+0x430>)
 80174bc:	489e      	ldr	r0, [pc, #632]	; (8017738 <tcp_write+0x424>)
 80174be:	f004 fadf 	bl	801ba80 <iprintf>
 80174c2:	e770      	b.n	80173a6 <tcp_write+0x92>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80174c4:	4b9a      	ldr	r3, [pc, #616]	; (8017730 <tcp_write+0x41c>)
 80174c6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80174ca:	499f      	ldr	r1, [pc, #636]	; (8017748 <tcp_write+0x434>)
 80174cc:	489a      	ldr	r0, [pc, #616]	; (8017738 <tcp_write+0x424>)
 80174ce:	f004 fad7 	bl	801ba80 <iprintf>
 80174d2:	e774      	b.n	80173be <tcp_write+0xaa>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80174d4:	464f      	mov	r7, r9
 80174d6:	e785      	b.n	80173e4 <tcp_write+0xd0>
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80174d8:	4b95      	ldr	r3, [pc, #596]	; (8017730 <tcp_write+0x41c>)
 80174da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80174de:	499b      	ldr	r1, [pc, #620]	; (801774c <tcp_write+0x438>)
 80174e0:	4895      	ldr	r0, [pc, #596]	; (8017738 <tcp_write+0x424>)
 80174e2:	f004 facd 	bl	801ba80 <iprintf>
 80174e6:	e783      	b.n	80173f0 <tcp_write+0xdc>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80174e8:	2301      	movs	r3, #1
 80174ea:	9302      	str	r3, [sp, #8]
 80174ec:	9b06      	ldr	r3, [sp, #24]
 80174ee:	9301      	str	r3, [sp, #4]
 80174f0:	f8cd 8000 	str.w	r8, [sp]
 80174f4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80174f8:	4629      	mov	r1, r5
 80174fa:	2000      	movs	r0, #0
 80174fc:	f7ff fce0 	bl	8016ec0 <tcp_pbuf_prealloc>
 8017500:	4681      	mov	r9, r0
 8017502:	2800      	cmp	r0, #0
 8017504:	f000 81d5 	beq.w	80178b2 <tcp_write+0x59e>
        oversize_add = oversize;
 8017508:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801750c:	930b      	str	r3, [sp, #44]	; 0x2c
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801750e:	462a      	mov	r2, r5
 8017510:	9b07      	ldr	r3, [sp, #28]
 8017512:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017514:	1859      	adds	r1, r3, r1
 8017516:	6840      	ldr	r0, [r0, #4]
 8017518:	f004 fa9c 	bl	801ba54 <memcpy>
        queuelen += pbuf_clen(concat_p);
 801751c:	4648      	mov	r0, r9
 801751e:	f7fc fbdf 	bl	8013ce0 <pbuf_clen>
 8017522:	4406      	add	r6, r0
 8017524:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 8017526:	2300      	movs	r3, #0
 8017528:	930d      	str	r3, [sp, #52]	; 0x34
 801752a:	e7a0      	b.n	801746e <tcp_write+0x15a>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801752c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801752e:	b91b      	cbnz	r3, 8017538 <tcp_write+0x224>
          extendlen = seglen;
 8017530:	950d      	str	r5, [sp, #52]	; 0x34
  u16_t oversize_add = 0;
 8017532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017534:	930b      	str	r3, [sp, #44]	; 0x2c
 8017536:	e79a      	b.n	801746e <tcp_write+0x15a>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017538:	4b7d      	ldr	r3, [pc, #500]	; (8017730 <tcp_write+0x41c>)
 801753a:	f240 2231 	movw	r2, #561	; 0x231
 801753e:	4984      	ldr	r1, [pc, #528]	; (8017750 <tcp_write+0x43c>)
 8017540:	487d      	ldr	r0, [pc, #500]	; (8017738 <tcp_write+0x424>)
 8017542:	f004 fa9d 	bl	801ba80 <iprintf>
          extendlen = seglen;
 8017546:	950d      	str	r5, [sp, #52]	; 0x34
  u16_t oversize_add = 0;
 8017548:	2300      	movs	r3, #0
 801754a:	930b      	str	r3, [sp, #44]	; 0x2c
 801754c:	e78f      	b.n	801746e <tcp_write+0x15a>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801754e:	f8b8 4068 	ldrh.w	r4, [r8, #104]	; 0x68
 8017552:	b934      	cbnz	r4, 8017562 <tcp_write+0x24e>
  u16_t extendlen = 0;
 8017554:	940d      	str	r4, [sp, #52]	; 0x34
  u16_t oversize_add = 0;
 8017556:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 8017558:	940a      	str	r4, [sp, #40]	; 0x28
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801755a:	464f      	mov	r7, r9
 801755c:	f8cd 9020 	str.w	r9, [sp, #32]
 8017560:	e0c6      	b.n	80176f0 <tcp_write+0x3dc>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8017562:	4b73      	ldr	r3, [pc, #460]	; (8017730 <tcp_write+0x41c>)
 8017564:	f240 224a 	movw	r2, #586	; 0x24a
 8017568:	497a      	ldr	r1, [pc, #488]	; (8017754 <tcp_write+0x440>)
 801756a:	4873      	ldr	r0, [pc, #460]	; (8017738 <tcp_write+0x424>)
 801756c:	f004 fa88 	bl	801ba80 <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8017570:	464f      	mov	r7, r9
 8017572:	f8cd 9020 	str.w	r9, [sp, #32]
  u16_t extendlen = 0;
 8017576:	2400      	movs	r4, #0
 8017578:	940d      	str	r4, [sp, #52]	; 0x34
  u16_t oversize_add = 0;
 801757a:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 801757c:	940a      	str	r4, [sp, #40]	; 0x28
 801757e:	e0b7      	b.n	80176f0 <tcp_write+0x3dc>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017580:	9b05      	ldr	r3, [sp, #20]
 8017582:	fab3 f383 	clz	r3, r3
 8017586:	095b      	lsrs	r3, r3, #5
 8017588:	9302      	str	r3, [sp, #8]
 801758a:	9b06      	ldr	r3, [sp, #24]
 801758c:	9301      	str	r3, [sp, #4]
 801758e:	f8cd 8000 	str.w	r8, [sp]
 8017592:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8017596:	465a      	mov	r2, fp
 8017598:	4629      	mov	r1, r5
 801759a:	2036      	movs	r0, #54	; 0x36
 801759c:	f7ff fc90 	bl	8016ec0 <tcp_pbuf_prealloc>
 80175a0:	4607      	mov	r7, r0
 80175a2:	2800      	cmp	r0, #0
 80175a4:	f000 8189 	beq.w	80178ba <tcp_write+0x5a6>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80175a8:	8943      	ldrh	r3, [r0, #10]
 80175aa:	42ab      	cmp	r3, r5
 80175ac:	d306      	bcc.n	80175bc <tcp_write+0x2a8>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80175ae:	462a      	mov	r2, r5
 80175b0:	9b07      	ldr	r3, [sp, #28]
 80175b2:	1919      	adds	r1, r3, r4
 80175b4:	6878      	ldr	r0, [r7, #4]
 80175b6:	f004 fa4d 	bl	801ba54 <memcpy>
 80175ba:	e026      	b.n	801760a <tcp_write+0x2f6>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80175bc:	4b5c      	ldr	r3, [pc, #368]	; (8017730 <tcp_write+0x41c>)
 80175be:	f240 2266 	movw	r2, #614	; 0x266
 80175c2:	4965      	ldr	r1, [pc, #404]	; (8017758 <tcp_write+0x444>)
 80175c4:	485c      	ldr	r0, [pc, #368]	; (8017738 <tcp_write+0x424>)
 80175c6:	f004 fa5b 	bl	801ba80 <iprintf>
 80175ca:	e7f0      	b.n	80175ae <tcp_write+0x29a>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80175cc:	4b58      	ldr	r3, [pc, #352]	; (8017730 <tcp_write+0x41c>)
 80175ce:	f240 2271 	movw	r2, #625	; 0x271
 80175d2:	4962      	ldr	r1, [pc, #392]	; (801775c <tcp_write+0x448>)
 80175d4:	4858      	ldr	r0, [pc, #352]	; (8017738 <tcp_write+0x424>)
 80175d6:	f004 fa53 	bl	801ba80 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80175da:	2201      	movs	r2, #1
 80175dc:	4629      	mov	r1, r5
 80175de:	2036      	movs	r0, #54	; 0x36
 80175e0:	f7fc fa7c 	bl	8013adc <pbuf_alloc>
 80175e4:	4681      	mov	r9, r0
 80175e6:	2800      	cmp	r0, #0
 80175e8:	f000 816a 	beq.w	80178c0 <tcp_write+0x5ac>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80175ec:	9b07      	ldr	r3, [sp, #28]
 80175ee:	4423      	add	r3, r4
 80175f0:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80175f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80175f6:	2100      	movs	r1, #0
 80175f8:	2036      	movs	r0, #54	; 0x36
 80175fa:	f7fc fa6f 	bl	8013adc <pbuf_alloc>
 80175fe:	4607      	mov	r7, r0
 8017600:	2800      	cmp	r0, #0
 8017602:	d035      	beq.n	8017670 <tcp_write+0x35c>
      pbuf_cat(p/*header*/, p2/*data*/);
 8017604:	4649      	mov	r1, r9
 8017606:	f7fc fb8b 	bl	8013d20 <pbuf_cat>
    queuelen += pbuf_clen(p);
 801760a:	4638      	mov	r0, r7
 801760c:	f7fc fb68 	bl	8013ce0 <pbuf_clen>
 8017610:	4406      	add	r6, r0
 8017612:	b2b6      	uxth	r6, r6
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8017614:	2e09      	cmp	r6, #9
 8017616:	d831      	bhi.n	801767c <tcp_write+0x368>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8017618:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 801761c:	2200      	movs	r2, #0
 801761e:	9200      	str	r2, [sp, #0]
 8017620:	4423      	add	r3, r4
 8017622:	4639      	mov	r1, r7
 8017624:	4640      	mov	r0, r8
 8017626:	f7ff fca9 	bl	8016f7c <tcp_create_segment>
 801762a:	4607      	mov	r7, r0
 801762c:	2800      	cmp	r0, #0
 801762e:	f000 814a 	beq.w	80178c6 <tcp_write+0x5b2>
    seg->oversize_left = oversize;
 8017632:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8017636:	8143      	strh	r3, [r0, #10]
    if (queue == NULL) {
 8017638:	9b05      	ldr	r3, [sp, #20]
 801763a:	2b00      	cmp	r3, #0
 801763c:	d052      	beq.n	80176e4 <tcp_write+0x3d0>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801763e:	9b04      	ldr	r3, [sp, #16]
 8017640:	2b00      	cmp	r3, #0
 8017642:	d047      	beq.n	80176d4 <tcp_write+0x3c0>
      prev_seg->next = seg;
 8017644:	9b04      	ldr	r3, [sp, #16]
 8017646:	601f      	str	r7, [r3, #0]
    pos += seglen;
 8017648:	442c      	add	r4, r5
 801764a:	b2a4      	uxth	r4, r4
    prev_seg = seg;
 801764c:	9704      	str	r7, [sp, #16]
  while (pos < len) {
 801764e:	4554      	cmp	r4, sl
 8017650:	d25c      	bcs.n	801770c <tcp_write+0x3f8>
    u16_t left = len - pos;
 8017652:	ebaa 0504 	sub.w	r5, sl, r4
 8017656:	b2ad      	uxth	r5, r5
    u16_t seglen = LWIP_MIN(left, max_len);
 8017658:	455d      	cmp	r5, fp
 801765a:	bf28      	it	cs
 801765c:	465d      	movcs	r5, fp
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801765e:	9b06      	ldr	r3, [sp, #24]
 8017660:	f013 0f01 	tst.w	r3, #1
 8017664:	d18c      	bne.n	8017580 <tcp_write+0x26c>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8017666:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801766a:	2b00      	cmp	r3, #0
 801766c:	d0b5      	beq.n	80175da <tcp_write+0x2c6>
 801766e:	e7ad      	b.n	80175cc <tcp_write+0x2b8>
 8017670:	4648      	mov	r0, r9
 8017672:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
        pbuf_free(p2);
 8017676:	f7fc f9cf 	bl	8013a18 <pbuf_free>
        goto memerr;
 801767a:	e004      	b.n	8017686 <tcp_write+0x372>
 801767c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
      pbuf_free(p);
 8017680:	4638      	mov	r0, r7
 8017682:	f7fc f9c9 	bl	8013a18 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017686:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 801768a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801768e:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (concat_p != NULL) {
 8017692:	f1b9 0f00 	cmp.w	r9, #0
 8017696:	d002      	beq.n	801769e <tcp_write+0x38a>
    pbuf_free(concat_p);
 8017698:	4648      	mov	r0, r9
 801769a:	f7fc f9bd 	bl	8013a18 <pbuf_free>
  if (queue != NULL) {
 801769e:	9b05      	ldr	r3, [sp, #20]
 80176a0:	b113      	cbz	r3, 80176a8 <tcp_write+0x394>
    tcp_segs_free(queue);
 80176a2:	4618      	mov	r0, r3
 80176a4:	f7fc ff9b 	bl	80145de <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 80176a8:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	f000 8118 	beq.w	80178e2 <tcp_write+0x5ce>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80176b2:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	f040 8117 	bne.w	80178ea <tcp_write+0x5d6>
 80176bc:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	f000 8103 	beq.w	80178cc <tcp_write+0x5b8>
  return ERR_MEM;
 80176c6:	f04f 33ff 	mov.w	r3, #4294967295
 80176ca:	9309      	str	r3, [sp, #36]	; 0x24
}
 80176cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80176ce:	b011      	add	sp, #68	; 0x44
 80176d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80176d4:	4b16      	ldr	r3, [pc, #88]	; (8017730 <tcp_write+0x41c>)
 80176d6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80176da:	4921      	ldr	r1, [pc, #132]	; (8017760 <tcp_write+0x44c>)
 80176dc:	4816      	ldr	r0, [pc, #88]	; (8017738 <tcp_write+0x424>)
 80176de:	f004 f9cf 	bl	801ba80 <iprintf>
 80176e2:	e7af      	b.n	8017644 <tcp_write+0x330>
      queue = seg;
 80176e4:	9005      	str	r0, [sp, #20]
 80176e6:	e7af      	b.n	8017648 <tcp_write+0x334>
 80176e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  u16_t extendlen = 0;
 80176ea:	2300      	movs	r3, #0
 80176ec:	930d      	str	r3, [sp, #52]	; 0x34
  u16_t oversize_add = 0;
 80176ee:	930b      	str	r3, [sp, #44]	; 0x2c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80176f0:	2300      	movs	r3, #0
 80176f2:	9305      	str	r3, [sp, #20]
 80176f4:	9304      	str	r3, [sp, #16]
 80176f6:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80176fa:	e7a8      	b.n	801764e <tcp_write+0x33a>
  u16_t extendlen = 0;
 80176fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176fe:	930d      	str	r3, [sp, #52]	; 0x34
 8017700:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017702:	e7f5      	b.n	80176f0 <tcp_write+0x3dc>
  u16_t oversize_add = 0;
 8017704:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017706:	930b      	str	r3, [sp, #44]	; 0x2c
 8017708:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801770a:	e7f1      	b.n	80176f0 <tcp_write+0x3dc>
 801770c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 8017710:	9a08      	ldr	r2, [sp, #32]
 8017712:	b122      	cbz	r2, 801771e <tcp_write+0x40a>
 8017714:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017716:	b111      	cbz	r1, 801771e <tcp_write+0x40a>
    last_unsent->oversize_left += oversize_add;
 8017718:	8953      	ldrh	r3, [r2, #10]
 801771a:	4419      	add	r1, r3
 801771c:	8151      	strh	r1, [r2, #10]
  if (oversize_used > 0) {
 801771e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8017720:	2d00      	cmp	r5, #0
 8017722:	d03f      	beq.n	80177a4 <tcp_write+0x490>
    for (p = last_unsent->p; p; p = p->next) {
 8017724:	9b08      	ldr	r3, [sp, #32]
 8017726:	685c      	ldr	r4, [r3, #4]
 8017728:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801772c:	e01b      	b.n	8017766 <tcp_write+0x452>
 801772e:	bf00      	nop
 8017730:	0801f0c8 	.word	0x0801f0c8
 8017734:	0801f38c 	.word	0x0801f38c
 8017738:	0801cca4 	.word	0x0801cca4
 801773c:	0801f3a4 	.word	0x0801f3a4
 8017740:	0801f3d8 	.word	0x0801f3d8
 8017744:	0801f3f0 	.word	0x0801f3f0
 8017748:	0801f420 	.word	0x0801f420
 801774c:	0801f440 	.word	0x0801f440
 8017750:	0801f460 	.word	0x0801f460
 8017754:	0801f48c 	.word	0x0801f48c
 8017758:	0801f4bc 	.word	0x0801f4bc
 801775c:	0801f4fc 	.word	0x0801f4fc
 8017760:	0801f50c 	.word	0x0801f50c
 8017764:	6824      	ldr	r4, [r4, #0]
 8017766:	b184      	cbz	r4, 801778a <tcp_write+0x476>
      p->tot_len += oversize_used;
 8017768:	8923      	ldrh	r3, [r4, #8]
 801776a:	442b      	add	r3, r5
 801776c:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801776e:	6823      	ldr	r3, [r4, #0]
 8017770:	2b00      	cmp	r3, #0
 8017772:	d1f7      	bne.n	8017764 <tcp_write+0x450>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8017774:	6860      	ldr	r0, [r4, #4]
 8017776:	8963      	ldrh	r3, [r4, #10]
 8017778:	462a      	mov	r2, r5
 801777a:	4659      	mov	r1, fp
 801777c:	4418      	add	r0, r3
 801777e:	f004 f969 	bl	801ba54 <memcpy>
        p->len += oversize_used;
 8017782:	8963      	ldrh	r3, [r4, #10]
 8017784:	442b      	add	r3, r5
 8017786:	8163      	strh	r3, [r4, #10]
 8017788:	e7ec      	b.n	8017764 <tcp_write+0x450>
    last_unsent->len += oversize_used;
 801778a:	9a08      	ldr	r2, [sp, #32]
 801778c:	8913      	ldrh	r3, [r2, #8]
 801778e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017790:	4403      	add	r3, r0
 8017792:	8113      	strh	r3, [r2, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 8017794:	8953      	ldrh	r3, [r2, #10]
 8017796:	4283      	cmp	r3, r0
 8017798:	d345      	bcc.n	8017826 <tcp_write+0x512>
    last_unsent->oversize_left -= oversize_used;
 801779a:	9a08      	ldr	r2, [sp, #32]
 801779c:	8953      	ldrh	r3, [r2, #10]
 801779e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80177a0:	1a5b      	subs	r3, r3, r1
 80177a2:	8153      	strh	r3, [r2, #10]
  pcb->unsent_oversize = oversize;
 80177a4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80177a8:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  if (concat_p != NULL) {
 80177ac:	f1b9 0f00 	cmp.w	r9, #0
 80177b0:	d049      	beq.n	8017846 <tcp_write+0x532>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80177b2:	9b08      	ldr	r3, [sp, #32]
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d03e      	beq.n	8017836 <tcp_write+0x522>
    pbuf_cat(last_unsent->p, concat_p);
 80177b8:	4649      	mov	r1, r9
 80177ba:	9c08      	ldr	r4, [sp, #32]
 80177bc:	6860      	ldr	r0, [r4, #4]
 80177be:	f7fc faaf 	bl	8013d20 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80177c2:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 80177c6:	8922      	ldrh	r2, [r4, #8]
 80177c8:	4413      	add	r3, r2
 80177ca:	8123      	strh	r3, [r4, #8]
  if (last_unsent == NULL) {
 80177cc:	9b08      	ldr	r3, [sp, #32]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d05f      	beq.n	8017892 <tcp_write+0x57e>
    last_unsent->next = queue;
 80177d2:	9b08      	ldr	r3, [sp, #32]
 80177d4:	461a      	mov	r2, r3
 80177d6:	9b05      	ldr	r3, [sp, #20]
 80177d8:	6013      	str	r3, [r2, #0]
  pcb->snd_lbb += len;
 80177da:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 80177de:	4453      	add	r3, sl
 80177e0:	f8c8 305c 	str.w	r3, [r8, #92]	; 0x5c
  pcb->snd_buf -= len;
 80177e4:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80177e8:	eba3 0a0a 	sub.w	sl, r3, sl
 80177ec:	f8a8 a064 	strh.w	sl, [r8, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80177f0:	f8a8 6066 	strh.w	r6, [r8, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 80177f4:	b11e      	cbz	r6, 80177fe <tcp_write+0x4ea>
    LWIP_ASSERT("tcp_write: valid queue length",
 80177f6:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d04d      	beq.n	801789a <tcp_write+0x586>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80177fe:	2f00      	cmp	r7, #0
 8017800:	f43f af64 	beq.w	80176cc <tcp_write+0x3b8>
 8017804:	693b      	ldr	r3, [r7, #16]
 8017806:	2b00      	cmp	r3, #0
 8017808:	f43f af60 	beq.w	80176cc <tcp_write+0x3b8>
 801780c:	9a06      	ldr	r2, [sp, #24]
 801780e:	f012 0f02 	tst.w	r2, #2
 8017812:	f47f af5b 	bne.w	80176cc <tcp_write+0x3b8>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8017816:	899c      	ldrh	r4, [r3, #12]
 8017818:	2008      	movs	r0, #8
 801781a:	f7fb f8a5 	bl	8012968 <lwip_htons>
 801781e:	693b      	ldr	r3, [r7, #16]
 8017820:	4304      	orrs	r4, r0
 8017822:	819c      	strh	r4, [r3, #12]
 8017824:	e752      	b.n	80176cc <tcp_write+0x3b8>
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 8017826:	4b33      	ldr	r3, [pc, #204]	; (80178f4 <tcp_write+0x5e0>)
 8017828:	f240 22d3 	movw	r2, #723	; 0x2d3
 801782c:	4932      	ldr	r1, [pc, #200]	; (80178f8 <tcp_write+0x5e4>)
 801782e:	4833      	ldr	r0, [pc, #204]	; (80178fc <tcp_write+0x5e8>)
 8017830:	f004 f926 	bl	801ba80 <iprintf>
 8017834:	e7b1      	b.n	801779a <tcp_write+0x486>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8017836:	4b2f      	ldr	r3, [pc, #188]	; (80178f4 <tcp_write+0x5e0>)
 8017838:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801783c:	4930      	ldr	r1, [pc, #192]	; (8017900 <tcp_write+0x5ec>)
 801783e:	482f      	ldr	r0, [pc, #188]	; (80178fc <tcp_write+0x5e8>)
 8017840:	f004 f91e 	bl	801ba80 <iprintf>
 8017844:	e7b8      	b.n	80177b8 <tcp_write+0x4a4>
  } else if (extendlen > 0) {
 8017846:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017848:	2b00      	cmp	r3, #0
 801784a:	d0bf      	beq.n	80177cc <tcp_write+0x4b8>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801784c:	9b08      	ldr	r3, [sp, #32]
 801784e:	b12b      	cbz	r3, 801785c <tcp_write+0x548>
 8017850:	685b      	ldr	r3, [r3, #4]
 8017852:	b11b      	cbz	r3, 801785c <tcp_write+0x548>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017854:	9b08      	ldr	r3, [sp, #32]
 8017856:	685b      	ldr	r3, [r3, #4]
 8017858:	980d      	ldr	r0, [sp, #52]	; 0x34
 801785a:	e00b      	b.n	8017874 <tcp_write+0x560>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801785c:	4b25      	ldr	r3, [pc, #148]	; (80178f4 <tcp_write+0x5e0>)
 801785e:	f240 22e6 	movw	r2, #742	; 0x2e6
 8017862:	4928      	ldr	r1, [pc, #160]	; (8017904 <tcp_write+0x5f0>)
 8017864:	4825      	ldr	r0, [pc, #148]	; (80178fc <tcp_write+0x5e8>)
 8017866:	f004 f90b 	bl	801ba80 <iprintf>
 801786a:	e7f3      	b.n	8017854 <tcp_write+0x540>
      p->tot_len += extendlen;
 801786c:	891a      	ldrh	r2, [r3, #8]
 801786e:	4402      	add	r2, r0
 8017870:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017872:	460b      	mov	r3, r1
 8017874:	6819      	ldr	r1, [r3, #0]
 8017876:	2900      	cmp	r1, #0
 8017878:	d1f8      	bne.n	801786c <tcp_write+0x558>
    p->tot_len += extendlen;
 801787a:	891a      	ldrh	r2, [r3, #8]
 801787c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801787e:	440a      	add	r2, r1
 8017880:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8017882:	895a      	ldrh	r2, [r3, #10]
 8017884:	440a      	add	r2, r1
 8017886:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8017888:	9a08      	ldr	r2, [sp, #32]
 801788a:	8913      	ldrh	r3, [r2, #8]
 801788c:	440b      	add	r3, r1
 801788e:	8113      	strh	r3, [r2, #8]
 8017890:	e79c      	b.n	80177cc <tcp_write+0x4b8>
    pcb->unsent = queue;
 8017892:	9b05      	ldr	r3, [sp, #20]
 8017894:	f8c8 306c 	str.w	r3, [r8, #108]	; 0x6c
 8017898:	e79f      	b.n	80177da <tcp_write+0x4c6>
    LWIP_ASSERT("tcp_write: valid queue length",
 801789a:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d1ad      	bne.n	80177fe <tcp_write+0x4ea>
 80178a2:	4b14      	ldr	r3, [pc, #80]	; (80178f4 <tcp_write+0x5e0>)
 80178a4:	f240 3212 	movw	r2, #786	; 0x312
 80178a8:	4917      	ldr	r1, [pc, #92]	; (8017908 <tcp_write+0x5f4>)
 80178aa:	4814      	ldr	r0, [pc, #80]	; (80178fc <tcp_write+0x5e8>)
 80178ac:	f004 f8e8 	bl	801ba80 <iprintf>
 80178b0:	e7a5      	b.n	80177fe <tcp_write+0x4ea>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80178b2:	9005      	str	r0, [sp, #20]
 80178b4:	e6e7      	b.n	8017686 <tcp_write+0x372>
 80178b6:	9005      	str	r0, [sp, #20]
 80178b8:	e6e5      	b.n	8017686 <tcp_write+0x372>
 80178ba:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80178be:	e6e2      	b.n	8017686 <tcp_write+0x372>
 80178c0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80178c4:	e6df      	b.n	8017686 <tcp_write+0x372>
 80178c6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80178ca:	e6dc      	b.n	8017686 <tcp_write+0x372>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80178cc:	4b09      	ldr	r3, [pc, #36]	; (80178f4 <tcp_write+0x5e0>)
 80178ce:	f240 3227 	movw	r2, #807	; 0x327
 80178d2:	490d      	ldr	r1, [pc, #52]	; (8017908 <tcp_write+0x5f4>)
 80178d4:	4809      	ldr	r0, [pc, #36]	; (80178fc <tcp_write+0x5e8>)
 80178d6:	f004 f8d3 	bl	801ba80 <iprintf>
  return ERR_MEM;
 80178da:	f04f 33ff 	mov.w	r3, #4294967295
 80178de:	9309      	str	r3, [sp, #36]	; 0x24
 80178e0:	e6f4      	b.n	80176cc <tcp_write+0x3b8>
 80178e2:	f04f 33ff 	mov.w	r3, #4294967295
 80178e6:	9309      	str	r3, [sp, #36]	; 0x24
 80178e8:	e6f0      	b.n	80176cc <tcp_write+0x3b8>
 80178ea:	f04f 33ff 	mov.w	r3, #4294967295
 80178ee:	9309      	str	r3, [sp, #36]	; 0x24
 80178f0:	e6ec      	b.n	80176cc <tcp_write+0x3b8>
 80178f2:	bf00      	nop
 80178f4:	0801f0c8 	.word	0x0801f0c8
 80178f8:	0801f520 	.word	0x0801f520
 80178fc:	0801cca4 	.word	0x0801cca4
 8017900:	0801f54c 	.word	0x0801f54c
 8017904:	0801f584 	.word	0x0801f584
 8017908:	0801f5bc 	.word	0x0801f5bc

0801790c <tcp_split_unsent_seg>:
{
 801790c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017910:	b083      	sub	sp, #12
 8017912:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8017914:	4607      	mov	r7, r0
 8017916:	2800      	cmp	r0, #0
 8017918:	d03d      	beq.n	8017996 <tcp_split_unsent_seg+0x8a>
  useg = pcb->unsent;
 801791a:	6efd      	ldr	r5, [r7, #108]	; 0x6c
  if (useg == NULL) {
 801791c:	2d00      	cmp	r5, #0
 801791e:	f000 80bd 	beq.w	8017a9c <tcp_split_unsent_seg+0x190>
  if (split == 0) {
 8017922:	2c00      	cmp	r4, #0
 8017924:	d03f      	beq.n	80179a6 <tcp_split_unsent_seg+0x9a>
  if (useg->len <= split) {
 8017926:	892b      	ldrh	r3, [r5, #8]
 8017928:	42a3      	cmp	r3, r4
 801792a:	f240 80ba 	bls.w	8017aa2 <tcp_split_unsent_seg+0x196>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801792e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8017930:	42a3      	cmp	r3, r4
 8017932:	d342      	bcc.n	80179ba <tcp_split_unsent_seg+0xae>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8017934:	892b      	ldrh	r3, [r5, #8]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d047      	beq.n	80179ca <tcp_split_unsent_seg+0xbe>
  optflags = useg->flags;
 801793a:	f895 900c 	ldrb.w	r9, [r5, #12]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801793e:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8017942:	f00b 0b04 	and.w	fp, fp, #4
  remainder = useg->len - split;
 8017946:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801794a:	ebaa 0604 	sub.w	r6, sl, r4
 801794e:	b2b6      	uxth	r6, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8017950:	eb06 010b 	add.w	r1, r6, fp
 8017954:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017958:	b289      	uxth	r1, r1
 801795a:	2036      	movs	r0, #54	; 0x36
 801795c:	f7fc f8be 	bl	8013adc <pbuf_alloc>
  if (p == NULL) {
 8017960:	4680      	mov	r8, r0
 8017962:	b170      	cbz	r0, 8017982 <tcp_split_unsent_seg+0x76>
  offset = useg->p->tot_len - useg->len + split;
 8017964:	6868      	ldr	r0, [r5, #4]
 8017966:	8903      	ldrh	r3, [r0, #8]
 8017968:	892a      	ldrh	r2, [r5, #8]
 801796a:	1a9b      	subs	r3, r3, r2
 801796c:	fa14 f383 	uxtah	r3, r4, r3
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8017970:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017974:	b29b      	uxth	r3, r3
 8017976:	4632      	mov	r2, r6
 8017978:	4459      	add	r1, fp
 801797a:	f7fc faa3 	bl	8013ec4 <pbuf_copy_partial>
 801797e:	42b0      	cmp	r0, r6
 8017980:	d02b      	beq.n	80179da <tcp_split_unsent_seg+0xce>
  if (p != NULL) {
 8017982:	f1b8 0f00 	cmp.w	r8, #0
 8017986:	f000 8090 	beq.w	8017aaa <tcp_split_unsent_seg+0x19e>
    pbuf_free(p);
 801798a:	4640      	mov	r0, r8
 801798c:	f7fc f844 	bl	8013a18 <pbuf_free>
  return ERR_MEM;
 8017990:	f04f 30ff 	mov.w	r0, #4294967295
 8017994:	e086      	b.n	8017aa4 <tcp_split_unsent_seg+0x198>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8017996:	4b46      	ldr	r3, [pc, #280]	; (8017ab0 <tcp_split_unsent_seg+0x1a4>)
 8017998:	f240 324b 	movw	r2, #843	; 0x34b
 801799c:	4945      	ldr	r1, [pc, #276]	; (8017ab4 <tcp_split_unsent_seg+0x1a8>)
 801799e:	4846      	ldr	r0, [pc, #280]	; (8017ab8 <tcp_split_unsent_seg+0x1ac>)
 80179a0:	f004 f86e 	bl	801ba80 <iprintf>
 80179a4:	e7b9      	b.n	801791a <tcp_split_unsent_seg+0xe>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80179a6:	4b42      	ldr	r3, [pc, #264]	; (8017ab0 <tcp_split_unsent_seg+0x1a4>)
 80179a8:	f240 3253 	movw	r2, #851	; 0x353
 80179ac:	4943      	ldr	r1, [pc, #268]	; (8017abc <tcp_split_unsent_seg+0x1b0>)
 80179ae:	4842      	ldr	r0, [pc, #264]	; (8017ab8 <tcp_split_unsent_seg+0x1ac>)
 80179b0:	f004 f866 	bl	801ba80 <iprintf>
    return ERR_VAL;
 80179b4:	f06f 0005 	mvn.w	r0, #5
 80179b8:	e074      	b.n	8017aa4 <tcp_split_unsent_seg+0x198>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80179ba:	4b3d      	ldr	r3, [pc, #244]	; (8017ab0 <tcp_split_unsent_seg+0x1a4>)
 80179bc:	f240 325b 	movw	r2, #859	; 0x35b
 80179c0:	493f      	ldr	r1, [pc, #252]	; (8017ac0 <tcp_split_unsent_seg+0x1b4>)
 80179c2:	483d      	ldr	r0, [pc, #244]	; (8017ab8 <tcp_split_unsent_seg+0x1ac>)
 80179c4:	f004 f85c 	bl	801ba80 <iprintf>
 80179c8:	e7b4      	b.n	8017934 <tcp_split_unsent_seg+0x28>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80179ca:	4b39      	ldr	r3, [pc, #228]	; (8017ab0 <tcp_split_unsent_seg+0x1a4>)
 80179cc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80179d0:	493c      	ldr	r1, [pc, #240]	; (8017ac4 <tcp_split_unsent_seg+0x1b8>)
 80179d2:	4839      	ldr	r0, [pc, #228]	; (8017ab8 <tcp_split_unsent_seg+0x1ac>)
 80179d4:	f004 f854 	bl	801ba80 <iprintf>
 80179d8:	e7af      	b.n	801793a <tcp_split_unsent_seg+0x2e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80179da:	692b      	ldr	r3, [r5, #16]
 80179dc:	8998      	ldrh	r0, [r3, #12]
 80179de:	f7fa ffc3 	bl	8012968 <lwip_htons>
 80179e2:	b2c3      	uxtb	r3, r0
 80179e4:	f000 063f 	and.w	r6, r0, #63	; 0x3f
  if (split_flags & TCP_PSH) {
 80179e8:	f010 0b08 	ands.w	fp, r0, #8
 80179ec:	d003      	beq.n	80179f6 <tcp_split_unsent_seg+0xea>
    split_flags &= ~TCP_PSH;
 80179ee:	f003 0637 	and.w	r6, r3, #55	; 0x37
    remainder_flags |= TCP_PSH;
 80179f2:	f04f 0b08 	mov.w	fp, #8
  if (split_flags & TCP_FIN) {
 80179f6:	f016 0f01 	tst.w	r6, #1
 80179fa:	d003      	beq.n	8017a04 <tcp_split_unsent_seg+0xf8>
    split_flags &= ~TCP_FIN;
 80179fc:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 8017a00:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8017a04:	692b      	ldr	r3, [r5, #16]
 8017a06:	6858      	ldr	r0, [r3, #4]
 8017a08:	f7fa ffb3 	bl	8012972 <lwip_htonl>
 8017a0c:	f8cd 9000 	str.w	r9, [sp]
 8017a10:	1823      	adds	r3, r4, r0
 8017a12:	465a      	mov	r2, fp
 8017a14:	4641      	mov	r1, r8
 8017a16:	4638      	mov	r0, r7
 8017a18:	f7ff fab0 	bl	8016f7c <tcp_create_segment>
  if (seg == NULL) {
 8017a1c:	4681      	mov	r9, r0
 8017a1e:	2800      	cmp	r0, #0
 8017a20:	d0af      	beq.n	8017982 <tcp_split_unsent_seg+0x76>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8017a22:	6868      	ldr	r0, [r5, #4]
 8017a24:	f7fc f95c 	bl	8013ce0 <pbuf_clen>
 8017a28:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8017a2c:	1a1b      	subs	r3, r3, r0
 8017a2e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8017a32:	6868      	ldr	r0, [r5, #4]
 8017a34:	8901      	ldrh	r1, [r0, #8]
 8017a36:	eba4 040a 	sub.w	r4, r4, sl
 8017a3a:	b2a4      	uxth	r4, r4
 8017a3c:	4421      	add	r1, r4
 8017a3e:	b289      	uxth	r1, r1
 8017a40:	f7fc f8fa 	bl	8013c38 <pbuf_realloc>
  useg->len -= remainder;
 8017a44:	892b      	ldrh	r3, [r5, #8]
 8017a46:	441c      	add	r4, r3
 8017a48:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8017a4a:	692b      	ldr	r3, [r5, #16]
 8017a4c:	899c      	ldrh	r4, [r3, #12]
 8017a4e:	4630      	mov	r0, r6
 8017a50:	f7fa ff8a 	bl	8012968 <lwip_htons>
 8017a54:	692b      	ldr	r3, [r5, #16]
 8017a56:	4304      	orrs	r4, r0
 8017a58:	819c      	strh	r4, [r3, #12]
  useg->oversize_left = 0;
 8017a5a:	2300      	movs	r3, #0
 8017a5c:	816b      	strh	r3, [r5, #10]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8017a5e:	6868      	ldr	r0, [r5, #4]
 8017a60:	f7fc f93e 	bl	8013ce0 <pbuf_clen>
 8017a64:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8017a68:	4418      	add	r0, r3
 8017a6a:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017a6e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8017a72:	f7fc f935 	bl	8013ce0 <pbuf_clen>
 8017a76:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8017a7a:	4418      	add	r0, r3
 8017a7c:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  seg->next = useg->next;
 8017a80:	682b      	ldr	r3, [r5, #0]
 8017a82:	f8c9 3000 	str.w	r3, [r9]
  useg->next = seg;
 8017a86:	f8c5 9000 	str.w	r9, [r5]
  if (seg->next == NULL) {
 8017a8a:	f8d9 3000 	ldr.w	r3, [r9]
 8017a8e:	b10b      	cbz	r3, 8017a94 <tcp_split_unsent_seg+0x188>
  return ERR_OK;
 8017a90:	2000      	movs	r0, #0
 8017a92:	e007      	b.n	8017aa4 <tcp_split_unsent_seg+0x198>
    pcb->unsent_oversize = 0;
 8017a94:	2000      	movs	r0, #0
 8017a96:	f8a7 0068 	strh.w	r0, [r7, #104]	; 0x68
 8017a9a:	e003      	b.n	8017aa4 <tcp_split_unsent_seg+0x198>
    return ERR_MEM;
 8017a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8017aa0:	e000      	b.n	8017aa4 <tcp_split_unsent_seg+0x198>
    return ERR_OK;
 8017aa2:	2000      	movs	r0, #0
}
 8017aa4:	b003      	add	sp, #12
 8017aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 8017aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8017aae:	e7f9      	b.n	8017aa4 <tcp_split_unsent_seg+0x198>
 8017ab0:	0801f0c8 	.word	0x0801f0c8
 8017ab4:	0801f5dc 	.word	0x0801f5dc
 8017ab8:	0801cca4 	.word	0x0801cca4
 8017abc:	0801f600 	.word	0x0801f600
 8017ac0:	0801f624 	.word	0x0801f624
 8017ac4:	0801f634 	.word	0x0801f634

08017ac8 <tcp_enqueue_flags>:
{
 8017ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017acc:	b083      	sub	sp, #12
 8017ace:	4604      	mov	r4, r0
 8017ad0:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8017ad2:	f011 0703 	ands.w	r7, r1, #3
 8017ad6:	d04e      	beq.n	8017b76 <tcp_enqueue_flags+0xae>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8017ad8:	2c00      	cmp	r4, #0
 8017ada:	d054      	beq.n	8017b86 <tcp_enqueue_flags+0xbe>
  if (flags & TCP_SYN) {
 8017adc:	f015 0802 	ands.w	r8, r5, #2
 8017ae0:	d001      	beq.n	8017ae6 <tcp_enqueue_flags+0x1e>
    optflags = TF_SEG_OPTS_MSS;
 8017ae2:	f04f 0801 	mov.w	r8, #1
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017ae6:	ea4f 0688 	mov.w	r6, r8, lsl #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017aea:	f006 0604 	and.w	r6, r6, #4
 8017aee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017af2:	4631      	mov	r1, r6
 8017af4:	2036      	movs	r0, #54	; 0x36
 8017af6:	f7fb fff1 	bl	8013adc <pbuf_alloc>
 8017afa:	4681      	mov	r9, r0
 8017afc:	2800      	cmp	r0, #0
 8017afe:	d04a      	beq.n	8017b96 <tcp_enqueue_flags+0xce>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8017b00:	8943      	ldrh	r3, [r0, #10]
 8017b02:	429e      	cmp	r6, r3
 8017b04:	d84e      	bhi.n	8017ba4 <tcp_enqueue_flags+0xdc>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8017b06:	f8cd 8000 	str.w	r8, [sp]
 8017b0a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8017b0c:	462a      	mov	r2, r5
 8017b0e:	4649      	mov	r1, r9
 8017b10:	4620      	mov	r0, r4
 8017b12:	f7ff fa33 	bl	8016f7c <tcp_create_segment>
 8017b16:	4606      	mov	r6, r0
 8017b18:	2800      	cmp	r0, #0
 8017b1a:	d04b      	beq.n	8017bb4 <tcp_enqueue_flags+0xec>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8017b1c:	6903      	ldr	r3, [r0, #16]
 8017b1e:	f013 0f03 	tst.w	r3, #3
 8017b22:	d14e      	bne.n	8017bc2 <tcp_enqueue_flags+0xfa>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8017b24:	8933      	ldrh	r3, [r6, #8]
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d153      	bne.n	8017bd2 <tcp_enqueue_flags+0x10a>
  if (pcb->unsent == NULL) {
 8017b2a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d058      	beq.n	8017be2 <tcp_enqueue_flags+0x11a>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8017b30:	461a      	mov	r2, r3
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d1fb      	bne.n	8017b30 <tcp_enqueue_flags+0x68>
    useg->next = seg;
 8017b38:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8017b40:	b117      	cbz	r7, 8017b48 <tcp_enqueue_flags+0x80>
    pcb->snd_lbb++;
 8017b42:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8017b44:	3301      	adds	r3, #1
 8017b46:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 8017b48:	f015 0f01 	tst.w	r5, #1
 8017b4c:	d003      	beq.n	8017b56 <tcp_enqueue_flags+0x8e>
    tcp_set_flags(pcb, TF_FIN);
 8017b4e:	8b63      	ldrh	r3, [r4, #26]
 8017b50:	f043 0320 	orr.w	r3, r3, #32
 8017b54:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017b56:	6870      	ldr	r0, [r6, #4]
 8017b58:	f7fc f8c2 	bl	8013ce0 <pbuf_clen>
 8017b5c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8017b60:	4418      	add	r0, r3
 8017b62:	b280      	uxth	r0, r0
 8017b64:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 8017b68:	2800      	cmp	r0, #0
 8017b6a:	d049      	beq.n	8017c00 <tcp_enqueue_flags+0x138>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8017b6c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d039      	beq.n	8017be6 <tcp_enqueue_flags+0x11e>
  return ERR_OK;
 8017b72:	2000      	movs	r0, #0
 8017b74:	e045      	b.n	8017c02 <tcp_enqueue_flags+0x13a>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8017b76:	4b24      	ldr	r3, [pc, #144]	; (8017c08 <tcp_enqueue_flags+0x140>)
 8017b78:	f240 4211 	movw	r2, #1041	; 0x411
 8017b7c:	4923      	ldr	r1, [pc, #140]	; (8017c0c <tcp_enqueue_flags+0x144>)
 8017b7e:	4824      	ldr	r0, [pc, #144]	; (8017c10 <tcp_enqueue_flags+0x148>)
 8017b80:	f003 ff7e 	bl	801ba80 <iprintf>
 8017b84:	e7a8      	b.n	8017ad8 <tcp_enqueue_flags+0x10>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8017b86:	4b20      	ldr	r3, [pc, #128]	; (8017c08 <tcp_enqueue_flags+0x140>)
 8017b88:	f240 4213 	movw	r2, #1043	; 0x413
 8017b8c:	4921      	ldr	r1, [pc, #132]	; (8017c14 <tcp_enqueue_flags+0x14c>)
 8017b8e:	4820      	ldr	r0, [pc, #128]	; (8017c10 <tcp_enqueue_flags+0x148>)
 8017b90:	f003 ff76 	bl	801ba80 <iprintf>
 8017b94:	e7a2      	b.n	8017adc <tcp_enqueue_flags+0x14>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017b96:	8b63      	ldrh	r3, [r4, #26]
 8017b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b9c:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 8017b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8017ba2:	e02e      	b.n	8017c02 <tcp_enqueue_flags+0x13a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8017ba4:	4b18      	ldr	r3, [pc, #96]	; (8017c08 <tcp_enqueue_flags+0x140>)
 8017ba6:	f240 4239 	movw	r2, #1081	; 0x439
 8017baa:	491b      	ldr	r1, [pc, #108]	; (8017c18 <tcp_enqueue_flags+0x150>)
 8017bac:	4818      	ldr	r0, [pc, #96]	; (8017c10 <tcp_enqueue_flags+0x148>)
 8017bae:	f003 ff67 	bl	801ba80 <iprintf>
 8017bb2:	e7a8      	b.n	8017b06 <tcp_enqueue_flags+0x3e>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017bb4:	8b63      	ldrh	r3, [r4, #26]
 8017bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017bba:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 8017bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8017bc0:	e01f      	b.n	8017c02 <tcp_enqueue_flags+0x13a>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8017bc2:	4b11      	ldr	r3, [pc, #68]	; (8017c08 <tcp_enqueue_flags+0x140>)
 8017bc4:	f240 4242 	movw	r2, #1090	; 0x442
 8017bc8:	4914      	ldr	r1, [pc, #80]	; (8017c1c <tcp_enqueue_flags+0x154>)
 8017bca:	4811      	ldr	r0, [pc, #68]	; (8017c10 <tcp_enqueue_flags+0x148>)
 8017bcc:	f003 ff58 	bl	801ba80 <iprintf>
 8017bd0:	e7a8      	b.n	8017b24 <tcp_enqueue_flags+0x5c>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8017bd2:	4b0d      	ldr	r3, [pc, #52]	; (8017c08 <tcp_enqueue_flags+0x140>)
 8017bd4:	f240 4243 	movw	r2, #1091	; 0x443
 8017bd8:	4911      	ldr	r1, [pc, #68]	; (8017c20 <tcp_enqueue_flags+0x158>)
 8017bda:	480d      	ldr	r0, [pc, #52]	; (8017c10 <tcp_enqueue_flags+0x148>)
 8017bdc:	f003 ff50 	bl	801ba80 <iprintf>
 8017be0:	e7a3      	b.n	8017b2a <tcp_enqueue_flags+0x62>
    pcb->unsent = seg;
 8017be2:	66e6      	str	r6, [r4, #108]	; 0x6c
 8017be4:	e7a9      	b.n	8017b3a <tcp_enqueue_flags+0x72>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8017be6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8017be8:	b10b      	cbz	r3, 8017bee <tcp_enqueue_flags+0x126>
  return ERR_OK;
 8017bea:	2000      	movs	r0, #0
 8017bec:	e009      	b.n	8017c02 <tcp_enqueue_flags+0x13a>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8017bee:	4b06      	ldr	r3, [pc, #24]	; (8017c08 <tcp_enqueue_flags+0x140>)
 8017bf0:	f240 4265 	movw	r2, #1125	; 0x465
 8017bf4:	490b      	ldr	r1, [pc, #44]	; (8017c24 <tcp_enqueue_flags+0x15c>)
 8017bf6:	4806      	ldr	r0, [pc, #24]	; (8017c10 <tcp_enqueue_flags+0x148>)
 8017bf8:	f003 ff42 	bl	801ba80 <iprintf>
  return ERR_OK;
 8017bfc:	2000      	movs	r0, #0
 8017bfe:	e000      	b.n	8017c02 <tcp_enqueue_flags+0x13a>
 8017c00:	2000      	movs	r0, #0
}
 8017c02:	b003      	add	sp, #12
 8017c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c08:	0801f0c8 	.word	0x0801f0c8
 8017c0c:	0801f644 	.word	0x0801f644
 8017c10:	0801cca4 	.word	0x0801cca4
 8017c14:	0801f69c 	.word	0x0801f69c
 8017c18:	0801f6bc 	.word	0x0801f6bc
 8017c1c:	0801f6f8 	.word	0x0801f6f8
 8017c20:	0801f710 	.word	0x0801f710
 8017c24:	0801f73c 	.word	0x0801f73c

08017c28 <tcp_send_fin>:
{
 8017c28:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8017c2a:	4605      	mov	r5, r0
 8017c2c:	b188      	cbz	r0, 8017c52 <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 8017c2e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8017c30:	b153      	cbz	r3, 8017c48 <tcp_send_fin+0x20>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017c32:	461c      	mov	r4, r3
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d1fb      	bne.n	8017c32 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8017c3a:	6923      	ldr	r3, [r4, #16]
 8017c3c:	8998      	ldrh	r0, [r3, #12]
 8017c3e:	f7fa fe93 	bl	8012968 <lwip_htons>
 8017c42:	f010 0f07 	tst.w	r0, #7
 8017c46:	d00c      	beq.n	8017c62 <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8017c48:	2101      	movs	r1, #1
 8017c4a:	4628      	mov	r0, r5
 8017c4c:	f7ff ff3c 	bl	8017ac8 <tcp_enqueue_flags>
}
 8017c50:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8017c52:	4b0b      	ldr	r3, [pc, #44]	; (8017c80 <tcp_send_fin+0x58>)
 8017c54:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8017c58:	490a      	ldr	r1, [pc, #40]	; (8017c84 <tcp_send_fin+0x5c>)
 8017c5a:	480b      	ldr	r0, [pc, #44]	; (8017c88 <tcp_send_fin+0x60>)
 8017c5c:	f003 ff10 	bl	801ba80 <iprintf>
 8017c60:	e7e5      	b.n	8017c2e <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8017c62:	6923      	ldr	r3, [r4, #16]
 8017c64:	899e      	ldrh	r6, [r3, #12]
 8017c66:	2001      	movs	r0, #1
 8017c68:	f7fa fe7e 	bl	8012968 <lwip_htons>
 8017c6c:	6923      	ldr	r3, [r4, #16]
 8017c6e:	4306      	orrs	r6, r0
 8017c70:	819e      	strh	r6, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8017c72:	8b6b      	ldrh	r3, [r5, #26]
 8017c74:	f043 0320 	orr.w	r3, r3, #32
 8017c78:	836b      	strh	r3, [r5, #26]
      return ERR_OK;
 8017c7a:	2000      	movs	r0, #0
 8017c7c:	e7e8      	b.n	8017c50 <tcp_send_fin+0x28>
 8017c7e:	bf00      	nop
 8017c80:	0801f0c8 	.word	0x0801f0c8
 8017c84:	0801f764 	.word	0x0801f764
 8017c88:	0801cca4 	.word	0x0801cca4

08017c8c <tcp_rexmit_rto_prepare>:
{
 8017c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017c8e:	4605      	mov	r5, r0
 8017c90:	b158      	cbz	r0, 8017caa <tcp_rexmit_rto_prepare+0x1e>
  if (pcb->unacked == NULL) {
 8017c92:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 8017c94:	2c00      	cmp	r4, #0
 8017c96:	d039      	beq.n	8017d0c <tcp_rexmit_rto_prepare+0x80>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017c98:	6823      	ldr	r3, [r4, #0]
 8017c9a:	b173      	cbz	r3, 8017cba <tcp_rexmit_rto_prepare+0x2e>
    if (tcp_output_segment_busy(seg)) {
 8017c9c:	4620      	mov	r0, r4
 8017c9e:	f7ff f8cf 	bl	8016e40 <tcp_output_segment_busy>
 8017ca2:	2800      	cmp	r0, #0
 8017ca4:	d135      	bne.n	8017d12 <tcp_rexmit_rto_prepare+0x86>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017ca6:	6824      	ldr	r4, [r4, #0]
 8017ca8:	e7f6      	b.n	8017c98 <tcp_rexmit_rto_prepare+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017caa:	4b1d      	ldr	r3, [pc, #116]	; (8017d20 <tcp_rexmit_rto_prepare+0x94>)
 8017cac:	f240 6263 	movw	r2, #1635	; 0x663
 8017cb0:	491c      	ldr	r1, [pc, #112]	; (8017d24 <tcp_rexmit_rto_prepare+0x98>)
 8017cb2:	481d      	ldr	r0, [pc, #116]	; (8017d28 <tcp_rexmit_rto_prepare+0x9c>)
 8017cb4:	f003 fee4 	bl	801ba80 <iprintf>
 8017cb8:	e7eb      	b.n	8017c92 <tcp_rexmit_rto_prepare+0x6>
  if (tcp_output_segment_busy(seg)) {
 8017cba:	4620      	mov	r0, r4
 8017cbc:	f7ff f8c0 	bl	8016e40 <tcp_output_segment_busy>
 8017cc0:	bb50      	cbnz	r0, 8017d18 <tcp_rexmit_rto_prepare+0x8c>
  seg->next = pcb->unsent;
 8017cc2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8017cc4:	6023      	str	r3, [r4, #0]
  if (pcb->unsent == NULL) {
 8017cc6:	b1db      	cbz	r3, 8017d00 <tcp_rexmit_rto_prepare+0x74>
  pcb->unsent = pcb->unacked;
 8017cc8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8017cca:	66eb      	str	r3, [r5, #108]	; 0x6c
  pcb->unacked = NULL;
 8017ccc:	2300      	movs	r3, #0
 8017cce:	672b      	str	r3, [r5, #112]	; 0x70
  tcp_set_flags(pcb, TF_RTO);
 8017cd0:	8b6b      	ldrh	r3, [r5, #26]
 8017cd2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8017cd6:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017cd8:	6923      	ldr	r3, [r4, #16]
 8017cda:	6858      	ldr	r0, [r3, #4]
 8017cdc:	f7fa fe49 	bl	8012972 <lwip_htonl>
 8017ce0:	4606      	mov	r6, r0
 8017ce2:	8927      	ldrh	r7, [r4, #8]
 8017ce4:	6923      	ldr	r3, [r4, #16]
 8017ce6:	8998      	ldrh	r0, [r3, #12]
 8017ce8:	f7fa fe3e 	bl	8012968 <lwip_htons>
 8017cec:	f010 0f03 	tst.w	r0, #3
 8017cf0:	d00a      	beq.n	8017d08 <tcp_rexmit_rto_prepare+0x7c>
 8017cf2:	2301      	movs	r3, #1
 8017cf4:	441f      	add	r7, r3
 8017cf6:	443e      	add	r6, r7
 8017cf8:	64ee      	str	r6, [r5, #76]	; 0x4c
  pcb->rttest = 0;
 8017cfa:	2000      	movs	r0, #0
 8017cfc:	6368      	str	r0, [r5, #52]	; 0x34
}
 8017cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = seg->oversize_left;
 8017d00:	8963      	ldrh	r3, [r4, #10]
 8017d02:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 8017d06:	e7df      	b.n	8017cc8 <tcp_rexmit_rto_prepare+0x3c>
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017d08:	2300      	movs	r3, #0
 8017d0a:	e7f3      	b.n	8017cf4 <tcp_rexmit_rto_prepare+0x68>
    return ERR_VAL;
 8017d0c:	f06f 0005 	mvn.w	r0, #5
 8017d10:	e7f5      	b.n	8017cfe <tcp_rexmit_rto_prepare+0x72>
      return ERR_VAL;
 8017d12:	f06f 0005 	mvn.w	r0, #5
 8017d16:	e7f2      	b.n	8017cfe <tcp_rexmit_rto_prepare+0x72>
    return ERR_VAL;
 8017d18:	f06f 0005 	mvn.w	r0, #5
 8017d1c:	e7ef      	b.n	8017cfe <tcp_rexmit_rto_prepare+0x72>
 8017d1e:	bf00      	nop
 8017d20:	0801f0c8 	.word	0x0801f0c8
 8017d24:	0801f780 	.word	0x0801f780
 8017d28:	0801cca4 	.word	0x0801cca4

08017d2c <tcp_rexmit>:
{
 8017d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017d2e:	4607      	mov	r7, r0
 8017d30:	b1c8      	cbz	r0, 8017d66 <tcp_rexmit+0x3a>
  if (pcb->unacked == NULL) {
 8017d32:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 8017d34:	b38e      	cbz	r6, 8017d9a <tcp_rexmit+0x6e>
  if (tcp_output_segment_busy(seg)) {
 8017d36:	4630      	mov	r0, r6
 8017d38:	f7ff f882 	bl	8016e40 <tcp_output_segment_busy>
 8017d3c:	bb80      	cbnz	r0, 8017da0 <tcp_rexmit+0x74>
  pcb->unacked = seg->next;
 8017d3e:	6833      	ldr	r3, [r6, #0]
 8017d40:	673b      	str	r3, [r7, #112]	; 0x70
  cur_seg = &(pcb->unsent);
 8017d42:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 8017d46:	682b      	ldr	r3, [r5, #0]
 8017d48:	b1ab      	cbz	r3, 8017d76 <tcp_rexmit+0x4a>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017d4a:	691b      	ldr	r3, [r3, #16]
 8017d4c:	6858      	ldr	r0, [r3, #4]
 8017d4e:	f7fa fe10 	bl	8012972 <lwip_htonl>
 8017d52:	4604      	mov	r4, r0
 8017d54:	6933      	ldr	r3, [r6, #16]
 8017d56:	6858      	ldr	r0, [r3, #4]
 8017d58:	f7fa fe0b 	bl	8012972 <lwip_htonl>
 8017d5c:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 8017d5e:	2c00      	cmp	r4, #0
 8017d60:	da09      	bge.n	8017d76 <tcp_rexmit+0x4a>
    cur_seg = &((*cur_seg)->next );
 8017d62:	682d      	ldr	r5, [r5, #0]
 8017d64:	e7ef      	b.n	8017d46 <tcp_rexmit+0x1a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017d66:	4b10      	ldr	r3, [pc, #64]	; (8017da8 <tcp_rexmit+0x7c>)
 8017d68:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8017d6c:	490f      	ldr	r1, [pc, #60]	; (8017dac <tcp_rexmit+0x80>)
 8017d6e:	4810      	ldr	r0, [pc, #64]	; (8017db0 <tcp_rexmit+0x84>)
 8017d70:	f003 fe86 	bl	801ba80 <iprintf>
 8017d74:	e7dd      	b.n	8017d32 <tcp_rexmit+0x6>
  seg->next = *cur_seg;
 8017d76:	682b      	ldr	r3, [r5, #0]
 8017d78:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 8017d7a:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 8017d7c:	6833      	ldr	r3, [r6, #0]
 8017d7e:	b14b      	cbz	r3, 8017d94 <tcp_rexmit+0x68>
  if (pcb->nrtx < 0xFF) {
 8017d80:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8017d84:	2bff      	cmp	r3, #255	; 0xff
 8017d86:	d002      	beq.n	8017d8e <tcp_rexmit+0x62>
    ++pcb->nrtx;
 8017d88:	3301      	adds	r3, #1
 8017d8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 8017d8e:	2000      	movs	r0, #0
 8017d90:	6378      	str	r0, [r7, #52]	; 0x34
}
 8017d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 8017d94:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8017d98:	e7f2      	b.n	8017d80 <tcp_rexmit+0x54>
    return ERR_VAL;
 8017d9a:	f06f 0005 	mvn.w	r0, #5
 8017d9e:	e7f8      	b.n	8017d92 <tcp_rexmit+0x66>
    return ERR_VAL;
 8017da0:	f06f 0005 	mvn.w	r0, #5
 8017da4:	e7f5      	b.n	8017d92 <tcp_rexmit+0x66>
 8017da6:	bf00      	nop
 8017da8:	0801f0c8 	.word	0x0801f0c8
 8017dac:	0801f7a4 	.word	0x0801f7a4
 8017db0:	0801cca4 	.word	0x0801cca4

08017db4 <tcp_rexmit_fast>:
{
 8017db4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017db6:	4604      	mov	r4, r0
 8017db8:	b130      	cbz	r0, 8017dc8 <tcp_rexmit_fast+0x14>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017dba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017dbc:	b11b      	cbz	r3, 8017dc6 <tcp_rexmit_fast+0x12>
 8017dbe:	8b63      	ldrh	r3, [r4, #26]
 8017dc0:	f013 0f04 	tst.w	r3, #4
 8017dc4:	d008      	beq.n	8017dd8 <tcp_rexmit_fast+0x24>
}
 8017dc6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017dc8:	4b15      	ldr	r3, [pc, #84]	; (8017e20 <tcp_rexmit_fast+0x6c>)
 8017dca:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8017dce:	4915      	ldr	r1, [pc, #84]	; (8017e24 <tcp_rexmit_fast+0x70>)
 8017dd0:	4815      	ldr	r0, [pc, #84]	; (8017e28 <tcp_rexmit_fast+0x74>)
 8017dd2:	f003 fe55 	bl	801ba80 <iprintf>
 8017dd6:	e7f0      	b.n	8017dba <tcp_rexmit_fast+0x6>
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017dd8:	4620      	mov	r0, r4
 8017dda:	f7ff ffa7 	bl	8017d2c <tcp_rexmit>
 8017dde:	2800      	cmp	r0, #0
 8017de0:	d1f1      	bne.n	8017dc6 <tcp_rexmit_fast+0x12>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017de2:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8017de6:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8017dea:	4293      	cmp	r3, r2
 8017dec:	bf28      	it	cs
 8017dee:	4613      	movcs	r3, r2
 8017df0:	085b      	lsrs	r3, r3, #1
 8017df2:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017df6:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8017df8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8017dfc:	d202      	bcs.n	8017e04 <tcp_rexmit_fast+0x50>
        pcb->ssthresh = 2 * pcb->mss;
 8017dfe:	0053      	lsls	r3, r2, #1
 8017e00:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017e04:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8017e08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017e0c:	441a      	add	r2, r3
 8017e0e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017e12:	8b63      	ldrh	r3, [r4, #26]
 8017e14:	f043 0304 	orr.w	r3, r3, #4
 8017e18:	8363      	strh	r3, [r4, #26]
      pcb->rtime = 0;
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	8623      	strh	r3, [r4, #48]	; 0x30
}
 8017e1e:	e7d2      	b.n	8017dc6 <tcp_rexmit_fast+0x12>
 8017e20:	0801f0c8 	.word	0x0801f0c8
 8017e24:	0801f7bc 	.word	0x0801f7bc
 8017e28:	0801cca4 	.word	0x0801cca4

08017e2c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e30:	b084      	sub	sp, #16
 8017e32:	4604      	mov	r4, r0
 8017e34:	460e      	mov	r6, r1
 8017e36:	4615      	mov	r5, r2
 8017e38:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017e3a:	4698      	mov	r8, r3
 8017e3c:	b32b      	cbz	r3, 8017e8a <tcp_rst+0x5e>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8017e3e:	b367      	cbz	r7, 8017e9a <tcp_rst+0x6e>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017e40:	4630      	mov	r0, r6
 8017e42:	f7fa fd96 	bl	8012972 <lwip_htonl>
 8017e46:	4603      	mov	r3, r0
 8017e48:	f246 0208 	movw	r2, #24584	; 0x6008
 8017e4c:	9203      	str	r2, [sp, #12]
 8017e4e:	2214      	movs	r2, #20
 8017e50:	9202      	str	r2, [sp, #8]
 8017e52:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8017e56:	9201      	str	r2, [sp, #4]
 8017e58:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8017e5c:	9200      	str	r2, [sp, #0]
 8017e5e:	2200      	movs	r2, #0
 8017e60:	4611      	mov	r1, r2
 8017e62:	4628      	mov	r0, r5
 8017e64:	f7ff f900 	bl	8017068 <tcp_output_alloc_header_common>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017e68:	4605      	mov	r5, r0
 8017e6a:	b158      	cbz	r0, 8017e84 <tcp_rst+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017e6c:	2300      	movs	r3, #0
 8017e6e:	461a      	mov	r2, r3
 8017e70:	4601      	mov	r1, r0
 8017e72:	4620      	mov	r0, r4
 8017e74:	f7fe fffe 	bl	8016e74 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017e78:	463b      	mov	r3, r7
 8017e7a:	4642      	mov	r2, r8
 8017e7c:	4629      	mov	r1, r5
 8017e7e:	4620      	mov	r0, r4
 8017e80:	f7ff fa12 	bl	80172a8 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017e84:	b004      	add	sp, #16
 8017e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017e8a:	4b08      	ldr	r3, [pc, #32]	; (8017eac <tcp_rst+0x80>)
 8017e8c:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8017e90:	4907      	ldr	r1, [pc, #28]	; (8017eb0 <tcp_rst+0x84>)
 8017e92:	4808      	ldr	r0, [pc, #32]	; (8017eb4 <tcp_rst+0x88>)
 8017e94:	f003 fdf4 	bl	801ba80 <iprintf>
 8017e98:	e7d1      	b.n	8017e3e <tcp_rst+0x12>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8017e9a:	4b04      	ldr	r3, [pc, #16]	; (8017eac <tcp_rst+0x80>)
 8017e9c:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8017ea0:	4905      	ldr	r1, [pc, #20]	; (8017eb8 <tcp_rst+0x8c>)
 8017ea2:	4804      	ldr	r0, [pc, #16]	; (8017eb4 <tcp_rst+0x88>)
 8017ea4:	f003 fdec 	bl	801ba80 <iprintf>
 8017ea8:	e7ca      	b.n	8017e40 <tcp_rst+0x14>
 8017eaa:	bf00      	nop
 8017eac:	0801f0c8 	.word	0x0801f0c8
 8017eb0:	0801f7dc 	.word	0x0801f7dc
 8017eb4:	0801cca4 	.word	0x0801cca4
 8017eb8:	0801f7f8 	.word	0x0801f7f8

08017ebc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017ebc:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017ebe:	4604      	mov	r4, r0
 8017ec0:	b1e0      	cbz	r0, 8017efc <tcp_send_empty_ack+0x40>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017ec2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8017ec4:	f7fa fd55 	bl	8012972 <lwip_htonl>
 8017ec8:	4603      	mov	r3, r0
 8017eca:	2200      	movs	r2, #0
 8017ecc:	4611      	mov	r1, r2
 8017ece:	4620      	mov	r0, r4
 8017ed0:	f7ff f916 	bl	8017100 <tcp_output_alloc_header>
  if (p == NULL) {
 8017ed4:	4605      	mov	r5, r0
 8017ed6:	b1c8      	cbz	r0, 8017f0c <tcp_send_empty_ack+0x50>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017ed8:	2300      	movs	r3, #0
 8017eda:	461a      	mov	r2, r3
 8017edc:	4601      	mov	r1, r0
 8017ede:	4620      	mov	r0, r4
 8017ee0:	f7fe ffc8 	bl	8016e74 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017ee4:	1d23      	adds	r3, r4, #4
 8017ee6:	4622      	mov	r2, r4
 8017ee8:	4629      	mov	r1, r5
 8017eea:	4620      	mov	r0, r4
 8017eec:	f7ff f9dc 	bl	80172a8 <tcp_output_control_segment>
  if (err != ERR_OK) {
 8017ef0:	b198      	cbz	r0, 8017f1a <tcp_send_empty_ack+0x5e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017ef2:	8b63      	ldrh	r3, [r4, #26]
 8017ef4:	f043 0303 	orr.w	r3, r3, #3
 8017ef8:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 8017efa:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017efc:	4b09      	ldr	r3, [pc, #36]	; (8017f24 <tcp_send_empty_ack+0x68>)
 8017efe:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8017f02:	4909      	ldr	r1, [pc, #36]	; (8017f28 <tcp_send_empty_ack+0x6c>)
 8017f04:	4809      	ldr	r0, [pc, #36]	; (8017f2c <tcp_send_empty_ack+0x70>)
 8017f06:	f003 fdbb 	bl	801ba80 <iprintf>
 8017f0a:	e7da      	b.n	8017ec2 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017f0c:	8b63      	ldrh	r3, [r4, #26]
 8017f0e:	f043 0303 	orr.w	r3, r3, #3
 8017f12:	8363      	strh	r3, [r4, #26]
    return ERR_BUF;
 8017f14:	f06f 0001 	mvn.w	r0, #1
 8017f18:	e7ef      	b.n	8017efa <tcp_send_empty_ack+0x3e>
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017f1a:	8b63      	ldrh	r3, [r4, #26]
 8017f1c:	f023 0303 	bic.w	r3, r3, #3
 8017f20:	8363      	strh	r3, [r4, #26]
 8017f22:	e7ea      	b.n	8017efa <tcp_send_empty_ack+0x3e>
 8017f24:	0801f0c8 	.word	0x0801f0c8
 8017f28:	0801f814 	.word	0x0801f814
 8017f2c:	0801cca4 	.word	0x0801cca4

08017f30 <tcp_output>:
{
 8017f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8017f34:	4605      	mov	r5, r0
 8017f36:	2800      	cmp	r0, #0
 8017f38:	d03b      	beq.n	8017fb2 <tcp_output+0x82>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8017f3a:	7d2b      	ldrb	r3, [r5, #20]
 8017f3c:	2b01      	cmp	r3, #1
 8017f3e:	d040      	beq.n	8017fc2 <tcp_output+0x92>
  if (tcp_input_pcb == pcb) {
 8017f40:	4ba1      	ldr	r3, [pc, #644]	; (80181c8 <tcp_output+0x298>)
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	42ab      	cmp	r3, r5
 8017f46:	f000 8137 	beq.w	80181b8 <tcp_output+0x288>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8017f4a:	f8b5 6048 	ldrh.w	r6, [r5, #72]	; 0x48
 8017f4e:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8017f52:	429e      	cmp	r6, r3
 8017f54:	bf28      	it	cs
 8017f56:	461e      	movcs	r6, r3
 8017f58:	46b0      	mov	r8, r6
  seg = pcb->unsent;
 8017f5a:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (seg == NULL) {
 8017f5c:	2c00      	cmp	r4, #0
 8017f5e:	d038      	beq.n	8017fd2 <tcp_output+0xa2>
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8017f60:	1d2a      	adds	r2, r5, #4
 8017f62:	4629      	mov	r1, r5
 8017f64:	4628      	mov	r0, r5
 8017f66:	f7ff f8f5 	bl	8017154 <tcp_route>
  if (netif == NULL) {
 8017f6a:	4607      	mov	r7, r0
 8017f6c:	2800      	cmp	r0, #0
 8017f6e:	f000 8125 	beq.w	80181bc <tcp_output+0x28c>
  if (ip_addr_isany(&pcb->local_ip)) {
 8017f72:	b10d      	cbz	r5, 8017f78 <tcp_output+0x48>
 8017f74:	682b      	ldr	r3, [r5, #0]
 8017f76:	b92b      	cbnz	r3, 8017f84 <tcp_output+0x54>
    if (local_ip == NULL) {
 8017f78:	f117 0f04 	cmn.w	r7, #4
 8017f7c:	f000 8121 	beq.w	80181c2 <tcp_output+0x292>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	602b      	str	r3, [r5, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8017f84:	6923      	ldr	r3, [r4, #16]
 8017f86:	6858      	ldr	r0, [r3, #4]
 8017f88:	f7fa fcf3 	bl	8012972 <lwip_htonl>
 8017f8c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8017f8e:	1ac0      	subs	r0, r0, r3
 8017f90:	8923      	ldrh	r3, [r4, #8]
 8017f92:	4418      	add	r0, r3
 8017f94:	42b0      	cmp	r0, r6
 8017f96:	d93c      	bls.n	8018012 <tcp_output+0xe2>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017f98:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8017f9c:	429e      	cmp	r6, r3
 8017f9e:	d029      	beq.n	8017ff4 <tcp_output+0xc4>
    if (pcb->flags & TF_ACK_NOW) {
 8017fa0:	8b6b      	ldrh	r3, [r5, #26]
 8017fa2:	f013 0f02 	tst.w	r3, #2
 8017fa6:	d018      	beq.n	8017fda <tcp_output+0xaa>
      return tcp_send_empty_ack(pcb);
 8017fa8:	4628      	mov	r0, r5
 8017faa:	f7ff ff87 	bl	8017ebc <tcp_send_empty_ack>
 8017fae:	4603      	mov	r3, r0
 8017fb0:	e018      	b.n	8017fe4 <tcp_output+0xb4>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8017fb2:	4b86      	ldr	r3, [pc, #536]	; (80181cc <tcp_output+0x29c>)
 8017fb4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8017fb8:	4985      	ldr	r1, [pc, #532]	; (80181d0 <tcp_output+0x2a0>)
 8017fba:	4886      	ldr	r0, [pc, #536]	; (80181d4 <tcp_output+0x2a4>)
 8017fbc:	f003 fd60 	bl	801ba80 <iprintf>
 8017fc0:	e7bb      	b.n	8017f3a <tcp_output+0xa>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8017fc2:	4b82      	ldr	r3, [pc, #520]	; (80181cc <tcp_output+0x29c>)
 8017fc4:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8017fc8:	4983      	ldr	r1, [pc, #524]	; (80181d8 <tcp_output+0x2a8>)
 8017fca:	4882      	ldr	r0, [pc, #520]	; (80181d4 <tcp_output+0x2a4>)
 8017fcc:	f003 fd58 	bl	801ba80 <iprintf>
 8017fd0:	e7b6      	b.n	8017f40 <tcp_output+0x10>
    if (pcb->flags & TF_ACK_NOW) {
 8017fd2:	8b6b      	ldrh	r3, [r5, #26]
 8017fd4:	f013 0f02 	tst.w	r3, #2
 8017fd8:	d107      	bne.n	8017fea <tcp_output+0xba>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8017fda:	8b6b      	ldrh	r3, [r5, #26]
 8017fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017fe0:	836b      	strh	r3, [r5, #26]
  return ERR_OK;
 8017fe2:	2300      	movs	r3, #0
}
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return tcp_send_empty_ack(pcb);
 8017fea:	4628      	mov	r0, r5
 8017fec:	f7ff ff66 	bl	8017ebc <tcp_send_empty_ack>
 8017ff0:	4603      	mov	r3, r0
 8017ff2:	e7f7      	b.n	8017fe4 <tcp_output+0xb4>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017ff4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d1d2      	bne.n	8017fa0 <tcp_output+0x70>
 8017ffa:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d1ce      	bne.n	8017fa0 <tcp_output+0x70>
      pcb->persist_cnt = 0;
 8018002:	f885 3098 	strb.w	r3, [r5, #152]	; 0x98
      pcb->persist_backoff = 1;
 8018006:	2201      	movs	r2, #1
 8018008:	f885 2099 	strb.w	r2, [r5, #153]	; 0x99
      pcb->persist_probe = 0;
 801800c:	f885 309a 	strb.w	r3, [r5, #154]	; 0x9a
 8018010:	e7c6      	b.n	8017fa0 <tcp_output+0x70>
  pcb->persist_backoff = 0;
 8018012:	2300      	movs	r3, #0
 8018014:	f885 3099 	strb.w	r3, [r5, #153]	; 0x99
  useg = pcb->unacked;
 8018018:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  if (useg != NULL) {
 801801a:	2b00      	cmp	r3, #0
 801801c:	f000 80ca 	beq.w	80181b4 <tcp_output+0x284>
    for (; useg->next != NULL; useg = useg->next);
 8018020:	461e      	mov	r6, r3
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	2b00      	cmp	r3, #0
 8018026:	d1fb      	bne.n	8018020 <tcp_output+0xf0>
 8018028:	e056      	b.n	80180d8 <tcp_output+0x1a8>
    LWIP_ASSERT("RST not expected here!",
 801802a:	4b68      	ldr	r3, [pc, #416]	; (80181cc <tcp_output+0x29c>)
 801802c:	f240 5236 	movw	r2, #1334	; 0x536
 8018030:	496a      	ldr	r1, [pc, #424]	; (80181dc <tcp_output+0x2ac>)
 8018032:	4868      	ldr	r0, [pc, #416]	; (80181d4 <tcp_output+0x2a4>)
 8018034:	f003 fd24 	bl	801ba80 <iprintf>
 8018038:	e061      	b.n	80180fe <tcp_output+0x1ce>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801803a:	8911      	ldrh	r1, [r2, #8]
 801803c:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 801803e:	4291      	cmp	r1, r2
 8018040:	d269      	bcs.n	8018116 <tcp_output+0x1e6>
 8018042:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 8018046:	2a00      	cmp	r2, #0
 8018048:	d065      	beq.n	8018116 <tcp_output+0x1e6>
 801804a:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 801804e:	2a08      	cmp	r2, #8
 8018050:	d861      	bhi.n	8018116 <tcp_output+0x1e6>
 8018052:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8018056:	d15e      	bne.n	8018116 <tcp_output+0x1e6>
  if (pcb->unsent == NULL) {
 8018058:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801805a:	2b00      	cmp	r3, #0
 801805c:	d1bd      	bne.n	8017fda <tcp_output+0xaa>
    pcb->unsent_oversize = 0;
 801805e:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 8018062:	e7ba      	b.n	8017fda <tcp_output+0xaa>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8018064:	6923      	ldr	r3, [r4, #16]
 8018066:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 801806a:	2010      	movs	r0, #16
 801806c:	f7fa fc7c 	bl	8012968 <lwip_htons>
 8018070:	6923      	ldr	r3, [r4, #16]
 8018072:	ea49 0900 	orr.w	r9, r9, r0
 8018076:	f8a3 900c 	strh.w	r9, [r3, #12]
 801807a:	e04f      	b.n	801811c <tcp_output+0x1ec>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801807c:	8b6a      	ldrh	r2, [r5, #26]
 801807e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8018082:	836a      	strh	r2, [r5, #26]
      return err;
 8018084:	e7ae      	b.n	8017fe4 <tcp_output+0xb4>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018086:	2000      	movs	r0, #0
 8018088:	e06a      	b.n	8018160 <tcp_output+0x230>
      pcb->snd_nxt = snd_nxt;
 801808a:	6528      	str	r0, [r5, #80]	; 0x50
 801808c:	e06e      	b.n	801816c <tcp_output+0x23c>
    if (TCP_TCPLEN(seg) > 0) {
 801808e:	2300      	movs	r3, #0
 8018090:	e076      	b.n	8018180 <tcp_output+0x250>
        pcb->unacked = seg;
 8018092:	672c      	str	r4, [r5, #112]	; 0x70
        useg = seg;
 8018094:	4626      	mov	r6, r4
 8018096:	e01e      	b.n	80180d6 <tcp_output+0x1a6>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8018098:	f105 0a70 	add.w	sl, r5, #112	; 0x70
          while (*cur_seg &&
 801809c:	e001      	b.n	80180a2 <tcp_output+0x172>
            cur_seg = &((*cur_seg)->next );
 801809e:	f8da a000 	ldr.w	sl, [sl]
          while (*cur_seg &&
 80180a2:	f8da 3000 	ldr.w	r3, [sl]
 80180a6:	b16b      	cbz	r3, 80180c4 <tcp_output+0x194>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80180a8:	691b      	ldr	r3, [r3, #16]
 80180aa:	6858      	ldr	r0, [r3, #4]
 80180ac:	f7fa fc61 	bl	8012972 <lwip_htonl>
 80180b0:	4681      	mov	r9, r0
 80180b2:	6923      	ldr	r3, [r4, #16]
 80180b4:	6858      	ldr	r0, [r3, #4]
 80180b6:	f7fa fc5c 	bl	8012972 <lwip_htonl>
 80180ba:	eba9 0900 	sub.w	r9, r9, r0
          while (*cur_seg &&
 80180be:	f1b9 0f00 	cmp.w	r9, #0
 80180c2:	dbec      	blt.n	801809e <tcp_output+0x16e>
          seg->next = (*cur_seg);
 80180c4:	f8da 3000 	ldr.w	r3, [sl]
 80180c8:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 80180ca:	f8ca 4000 	str.w	r4, [sl]
 80180ce:	e002      	b.n	80180d6 <tcp_output+0x1a6>
      tcp_seg_free(seg);
 80180d0:	4620      	mov	r0, r4
 80180d2:	f7fc fa77 	bl	80145c4 <tcp_seg_free>
    seg = pcb->unsent;
 80180d6:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  while (seg != NULL &&
 80180d8:	2c00      	cmp	r4, #0
 80180da:	d0bd      	beq.n	8018058 <tcp_output+0x128>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80180dc:	6923      	ldr	r3, [r4, #16]
 80180de:	6858      	ldr	r0, [r3, #4]
 80180e0:	f7fa fc47 	bl	8012972 <lwip_htonl>
 80180e4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80180e6:	1ac0      	subs	r0, r0, r3
 80180e8:	8923      	ldrh	r3, [r4, #8]
 80180ea:	4418      	add	r0, r3
  while (seg != NULL &&
 80180ec:	4540      	cmp	r0, r8
 80180ee:	d8b3      	bhi.n	8018058 <tcp_output+0x128>
    LWIP_ASSERT("RST not expected here!",
 80180f0:	6923      	ldr	r3, [r4, #16]
 80180f2:	8998      	ldrh	r0, [r3, #12]
 80180f4:	f7fa fc38 	bl	8012968 <lwip_htons>
 80180f8:	f010 0f04 	tst.w	r0, #4
 80180fc:	d195      	bne.n	801802a <tcp_output+0xfa>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80180fe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8018100:	b14b      	cbz	r3, 8018116 <tcp_output+0x1e6>
 8018102:	8b6b      	ldrh	r3, [r5, #26]
 8018104:	f013 0f44 	tst.w	r3, #68	; 0x44
 8018108:	d105      	bne.n	8018116 <tcp_output+0x1e6>
 801810a:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 801810c:	2a00      	cmp	r2, #0
 801810e:	d098      	beq.n	8018042 <tcp_output+0x112>
 8018110:	6811      	ldr	r1, [r2, #0]
 8018112:	2900      	cmp	r1, #0
 8018114:	d091      	beq.n	801803a <tcp_output+0x10a>
    if (pcb->state != SYN_SENT) {
 8018116:	7d2b      	ldrb	r3, [r5, #20]
 8018118:	2b02      	cmp	r3, #2
 801811a:	d1a3      	bne.n	8018064 <tcp_output+0x134>
    err = tcp_output_segment(seg, pcb, netif);
 801811c:	463a      	mov	r2, r7
 801811e:	4629      	mov	r1, r5
 8018120:	4620      	mov	r0, r4
 8018122:	f7ff f823 	bl	801716c <tcp_output_segment>
    if (err != ERR_OK) {
 8018126:	4603      	mov	r3, r0
 8018128:	2800      	cmp	r0, #0
 801812a:	d1a7      	bne.n	801807c <tcp_output+0x14c>
    seg->oversize_left = 0;
 801812c:	2300      	movs	r3, #0
 801812e:	8163      	strh	r3, [r4, #10]
    pcb->unsent = seg->next;
 8018130:	6823      	ldr	r3, [r4, #0]
 8018132:	66eb      	str	r3, [r5, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8018134:	7d2b      	ldrb	r3, [r5, #20]
 8018136:	2b02      	cmp	r3, #2
 8018138:	d003      	beq.n	8018142 <tcp_output+0x212>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801813a:	8b6b      	ldrh	r3, [r5, #26]
 801813c:	f023 0303 	bic.w	r3, r3, #3
 8018140:	836b      	strh	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018142:	6923      	ldr	r3, [r4, #16]
 8018144:	6858      	ldr	r0, [r3, #4]
 8018146:	f7fa fc14 	bl	8012972 <lwip_htonl>
 801814a:	4681      	mov	r9, r0
 801814c:	f8b4 a008 	ldrh.w	sl, [r4, #8]
 8018150:	6923      	ldr	r3, [r4, #16]
 8018152:	8998      	ldrh	r0, [r3, #12]
 8018154:	f7fa fc08 	bl	8012968 <lwip_htons>
 8018158:	f010 0f03 	tst.w	r0, #3
 801815c:	d093      	beq.n	8018086 <tcp_output+0x156>
 801815e:	2001      	movs	r0, #1
 8018160:	4450      	add	r0, sl
 8018162:	4448      	add	r0, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018164:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8018166:	1a1b      	subs	r3, r3, r0
 8018168:	2b00      	cmp	r3, #0
 801816a:	db8e      	blt.n	801808a <tcp_output+0x15a>
    if (TCP_TCPLEN(seg) > 0) {
 801816c:	f8b4 9008 	ldrh.w	r9, [r4, #8]
 8018170:	6923      	ldr	r3, [r4, #16]
 8018172:	8998      	ldrh	r0, [r3, #12]
 8018174:	f7fa fbf8 	bl	8012968 <lwip_htons>
 8018178:	f010 0f03 	tst.w	r0, #3
 801817c:	d087      	beq.n	801808e <tcp_output+0x15e>
 801817e:	2301      	movs	r3, #1
 8018180:	eb13 0f09 	cmn.w	r3, r9
 8018184:	d0a4      	beq.n	80180d0 <tcp_output+0x1a0>
      seg->next = NULL;
 8018186:	2300      	movs	r3, #0
 8018188:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 801818a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801818c:	2b00      	cmp	r3, #0
 801818e:	d080      	beq.n	8018092 <tcp_output+0x162>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8018190:	6923      	ldr	r3, [r4, #16]
 8018192:	6858      	ldr	r0, [r3, #4]
 8018194:	f7fa fbed 	bl	8012972 <lwip_htonl>
 8018198:	4681      	mov	r9, r0
 801819a:	6933      	ldr	r3, [r6, #16]
 801819c:	6858      	ldr	r0, [r3, #4]
 801819e:	f7fa fbe8 	bl	8012972 <lwip_htonl>
 80181a2:	eba9 0900 	sub.w	r9, r9, r0
 80181a6:	f1b9 0f00 	cmp.w	r9, #0
 80181aa:	f6ff af75 	blt.w	8018098 <tcp_output+0x168>
          useg->next = seg;
 80181ae:	6034      	str	r4, [r6, #0]
          useg = useg->next;
 80181b0:	4626      	mov	r6, r4
 80181b2:	e790      	b.n	80180d6 <tcp_output+0x1a6>
  useg = pcb->unacked;
 80181b4:	461e      	mov	r6, r3
 80181b6:	e78f      	b.n	80180d8 <tcp_output+0x1a8>
    return ERR_OK;
 80181b8:	2300      	movs	r3, #0
 80181ba:	e713      	b.n	8017fe4 <tcp_output+0xb4>
    return ERR_RTE;
 80181bc:	f06f 0303 	mvn.w	r3, #3
 80181c0:	e710      	b.n	8017fe4 <tcp_output+0xb4>
      return ERR_RTE;
 80181c2:	f06f 0303 	mvn.w	r3, #3
 80181c6:	e70d      	b.n	8017fe4 <tcp_output+0xb4>
 80181c8:	20007230 	.word	0x20007230
 80181cc:	0801f0c8 	.word	0x0801f0c8
 80181d0:	0801f834 	.word	0x0801f834
 80181d4:	0801cca4 	.word	0x0801cca4
 80181d8:	0801f84c 	.word	0x0801f84c
 80181dc:	0801f874 	.word	0x0801f874

080181e0 <tcp_rexmit_rto_commit>:
{
 80181e0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80181e2:	4604      	mov	r4, r0
 80181e4:	b150      	cbz	r0, 80181fc <tcp_rexmit_rto_commit+0x1c>
  if (pcb->nrtx < 0xFF) {
 80181e6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80181ea:	2bff      	cmp	r3, #255	; 0xff
 80181ec:	d002      	beq.n	80181f4 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 80181ee:	3301      	adds	r3, #1
 80181f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 80181f4:	4620      	mov	r0, r4
 80181f6:	f7ff fe9b 	bl	8017f30 <tcp_output>
}
 80181fa:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80181fc:	4b03      	ldr	r3, [pc, #12]	; (801820c <tcp_rexmit_rto_commit+0x2c>)
 80181fe:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018202:	4903      	ldr	r1, [pc, #12]	; (8018210 <tcp_rexmit_rto_commit+0x30>)
 8018204:	4803      	ldr	r0, [pc, #12]	; (8018214 <tcp_rexmit_rto_commit+0x34>)
 8018206:	f003 fc3b 	bl	801ba80 <iprintf>
 801820a:	e7ec      	b.n	80181e6 <tcp_rexmit_rto_commit+0x6>
 801820c:	0801f0c8 	.word	0x0801f0c8
 8018210:	0801f88c 	.word	0x0801f88c
 8018214:	0801cca4 	.word	0x0801cca4

08018218 <tcp_rexmit_rto>:
{
 8018218:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801821a:	4604      	mov	r4, r0
 801821c:	b120      	cbz	r0, 8018228 <tcp_rexmit_rto+0x10>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801821e:	4620      	mov	r0, r4
 8018220:	f7ff fd34 	bl	8017c8c <tcp_rexmit_rto_prepare>
 8018224:	b140      	cbz	r0, 8018238 <tcp_rexmit_rto+0x20>
}
 8018226:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018228:	4b05      	ldr	r3, [pc, #20]	; (8018240 <tcp_rexmit_rto+0x28>)
 801822a:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801822e:	4905      	ldr	r1, [pc, #20]	; (8018244 <tcp_rexmit_rto+0x2c>)
 8018230:	4805      	ldr	r0, [pc, #20]	; (8018248 <tcp_rexmit_rto+0x30>)
 8018232:	f003 fc25 	bl	801ba80 <iprintf>
 8018236:	e7f2      	b.n	801821e <tcp_rexmit_rto+0x6>
    tcp_rexmit_rto_commit(pcb);
 8018238:	4620      	mov	r0, r4
 801823a:	f7ff ffd1 	bl	80181e0 <tcp_rexmit_rto_commit>
}
 801823e:	e7f2      	b.n	8018226 <tcp_rexmit_rto+0xe>
 8018240:	0801f0c8 	.word	0x0801f0c8
 8018244:	0801f8b0 	.word	0x0801f8b0
 8018248:	0801cca4 	.word	0x0801cca4

0801824c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801824c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801824e:	4604      	mov	r4, r0
 8018250:	b1c0      	cbz	r0, 8018284 <tcp_keepalive+0x38>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8018252:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8018254:	3801      	subs	r0, #1
 8018256:	f7fa fb8c 	bl	8012972 <lwip_htonl>
 801825a:	4603      	mov	r3, r0
 801825c:	2200      	movs	r2, #0
 801825e:	4611      	mov	r1, r2
 8018260:	4620      	mov	r0, r4
 8018262:	f7fe ff4d 	bl	8017100 <tcp_output_alloc_header>
  if (p == NULL) {
 8018266:	4605      	mov	r5, r0
 8018268:	b1a0      	cbz	r0, 8018294 <tcp_keepalive+0x48>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801826a:	2300      	movs	r3, #0
 801826c:	461a      	mov	r2, r3
 801826e:	4601      	mov	r1, r0
 8018270:	4620      	mov	r0, r4
 8018272:	f7fe fdff 	bl	8016e74 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018276:	1d23      	adds	r3, r4, #4
 8018278:	4622      	mov	r2, r4
 801827a:	4629      	mov	r1, r5
 801827c:	4620      	mov	r0, r4
 801827e:	f7ff f813 	bl	80172a8 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8018282:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8018284:	4b05      	ldr	r3, [pc, #20]	; (801829c <tcp_keepalive+0x50>)
 8018286:	f640 0224 	movw	r2, #2084	; 0x824
 801828a:	4905      	ldr	r1, [pc, #20]	; (80182a0 <tcp_keepalive+0x54>)
 801828c:	4805      	ldr	r0, [pc, #20]	; (80182a4 <tcp_keepalive+0x58>)
 801828e:	f003 fbf7 	bl	801ba80 <iprintf>
 8018292:	e7de      	b.n	8018252 <tcp_keepalive+0x6>
    return ERR_MEM;
 8018294:	f04f 30ff 	mov.w	r0, #4294967295
 8018298:	e7f3      	b.n	8018282 <tcp_keepalive+0x36>
 801829a:	bf00      	nop
 801829c:	0801f0c8 	.word	0x0801f0c8
 80182a0:	0801f8cc 	.word	0x0801f8cc
 80182a4:	0801cca4 	.word	0x0801cca4

080182a8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80182a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80182ac:	4604      	mov	r4, r0
 80182ae:	b1a8      	cbz	r0, 80182dc <tcp_zero_window_probe+0x34>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80182b0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 80182b2:	2d00      	cmp	r5, #0
 80182b4:	d05b      	beq.n	801836e <tcp_zero_window_probe+0xc6>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80182b6:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80182ba:	2bff      	cmp	r3, #255	; 0xff
 80182bc:	d002      	beq.n	80182c4 <tcp_zero_window_probe+0x1c>
    ++pcb->persist_probe;
 80182be:	3301      	adds	r3, #1
 80182c0:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80182c4:	692b      	ldr	r3, [r5, #16]
 80182c6:	8998      	ldrh	r0, [r3, #12]
 80182c8:	f7fa fb4e 	bl	8012968 <lwip_htons>
 80182cc:	f010 0f01 	tst.w	r0, #1
 80182d0:	d00c      	beq.n	80182ec <tcp_zero_window_probe+0x44>
 80182d2:	892b      	ldrh	r3, [r5, #8]
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d03b      	beq.n	8018350 <tcp_zero_window_probe+0xa8>
 80182d8:	2200      	movs	r2, #0
 80182da:	e008      	b.n	80182ee <tcp_zero_window_probe+0x46>
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80182dc:	4b26      	ldr	r3, [pc, #152]	; (8018378 <tcp_zero_window_probe+0xd0>)
 80182de:	f640 024f 	movw	r2, #2127	; 0x84f
 80182e2:	4926      	ldr	r1, [pc, #152]	; (801837c <tcp_zero_window_probe+0xd4>)
 80182e4:	4826      	ldr	r0, [pc, #152]	; (8018380 <tcp_zero_window_probe+0xd8>)
 80182e6:	f003 fbcb 	bl	801ba80 <iprintf>
 80182ea:	e7e1      	b.n	80182b0 <tcp_zero_window_probe+0x8>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80182ec:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80182ee:	f002 07ff 	and.w	r7, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80182f2:	692b      	ldr	r3, [r5, #16]
 80182f4:	685b      	ldr	r3, [r3, #4]
 80182f6:	f082 0201 	eor.w	r2, r2, #1
 80182fa:	2100      	movs	r1, #0
 80182fc:	4620      	mov	r0, r4
 80182fe:	f7fe feff 	bl	8017100 <tcp_output_alloc_header>
  if (p == NULL) {
 8018302:	4606      	mov	r6, r0
 8018304:	b3a8      	cbz	r0, 8018372 <tcp_zero_window_probe+0xca>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8018306:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 801830a:	b31f      	cbz	r7, 8018354 <tcp_zero_window_probe+0xac>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801830c:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 8018310:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 8018314:	2011      	movs	r0, #17
 8018316:	f7fa fb27 	bl	8012968 <lwip_htons>
 801831a:	b200      	sxth	r0, r0
 801831c:	4307      	orrs	r7, r0
 801831e:	f8a8 700c 	strh.w	r7, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8018322:	692b      	ldr	r3, [r5, #16]
 8018324:	6858      	ldr	r0, [r3, #4]
 8018326:	f7fa fb24 	bl	8012972 <lwip_htonl>
 801832a:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801832c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801832e:	1a1b      	subs	r3, r3, r0
 8018330:	2b00      	cmp	r3, #0
 8018332:	db1a      	blt.n	801836a <tcp_zero_window_probe+0xc2>
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018334:	2300      	movs	r3, #0
 8018336:	461a      	mov	r2, r3
 8018338:	4631      	mov	r1, r6
 801833a:	4620      	mov	r0, r4
 801833c:	f7fe fd9a 	bl	8016e74 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018340:	1d23      	adds	r3, r4, #4
 8018342:	4622      	mov	r2, r4
 8018344:	4631      	mov	r1, r6
 8018346:	4620      	mov	r0, r4
 8018348:	f7fe ffae 	bl	80172a8 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801834c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8018350:	2201      	movs	r2, #1
 8018352:	e7cc      	b.n	80182ee <tcp_zero_window_probe+0x46>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8018354:	6868      	ldr	r0, [r5, #4]
 8018356:	8903      	ldrh	r3, [r0, #8]
 8018358:	892a      	ldrh	r2, [r5, #8]
 801835a:	1a9b      	subs	r3, r3, r2
 801835c:	b29b      	uxth	r3, r3
 801835e:	2201      	movs	r2, #1
 8018360:	f108 0114 	add.w	r1, r8, #20
 8018364:	f7fb fdae 	bl	8013ec4 <pbuf_copy_partial>
 8018368:	e7db      	b.n	8018322 <tcp_zero_window_probe+0x7a>
    pcb->snd_nxt = snd_nxt;
 801836a:	6520      	str	r0, [r4, #80]	; 0x50
 801836c:	e7e2      	b.n	8018334 <tcp_zero_window_probe+0x8c>
    return ERR_OK;
 801836e:	2000      	movs	r0, #0
 8018370:	e7ec      	b.n	801834c <tcp_zero_window_probe+0xa4>
    return ERR_MEM;
 8018372:	f04f 30ff 	mov.w	r0, #4294967295
 8018376:	e7e9      	b.n	801834c <tcp_zero_window_probe+0xa4>
 8018378:	0801f0c8 	.word	0x0801f0c8
 801837c:	0801f8e8 	.word	0x0801f8e8
 8018380:	0801cca4 	.word	0x0801cca4

08018384 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8018384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018386:	4604      	mov	r4, r0
 8018388:	460f      	mov	r7, r1
 801838a:	4616      	mov	r6, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801838c:	2006      	movs	r0, #6
 801838e:	f7fb f865 	bl	801345c <memp_malloc>
  if (timeout == NULL) {
 8018392:	b180      	cbz	r0, 80183b6 <sys_timeout_abs+0x32>
 8018394:	4605      	mov	r5, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 8018396:	2300      	movs	r3, #0
 8018398:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
 801839a:	6087      	str	r7, [r0, #8]
  timeout->arg = arg;
 801839c:	60c6      	str	r6, [r0, #12]
  timeout->time = abs_time;
 801839e:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80183a0:	4b10      	ldr	r3, [pc, #64]	; (80183e4 <sys_timeout_abs+0x60>)
 80183a2:	681a      	ldr	r2, [r3, #0]
 80183a4:	b172      	cbz	r2, 80183c4 <sys_timeout_abs+0x40>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80183a6:	6853      	ldr	r3, [r2, #4]
 80183a8:	1ae3      	subs	r3, r4, r3
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	da0f      	bge.n	80183ce <sys_timeout_abs+0x4a>
    timeout->next = next_timeout;
 80183ae:	6002      	str	r2, [r0, #0]
    next_timeout = timeout;
 80183b0:	4b0c      	ldr	r3, [pc, #48]	; (80183e4 <sys_timeout_abs+0x60>)
 80183b2:	6018      	str	r0, [r3, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 80183b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80183b6:	4b0c      	ldr	r3, [pc, #48]	; (80183e8 <sys_timeout_abs+0x64>)
 80183b8:	22be      	movs	r2, #190	; 0xbe
 80183ba:	490c      	ldr	r1, [pc, #48]	; (80183ec <sys_timeout_abs+0x68>)
 80183bc:	480c      	ldr	r0, [pc, #48]	; (80183f0 <sys_timeout_abs+0x6c>)
 80183be:	f003 fb5f 	bl	801ba80 <iprintf>
    return;
 80183c2:	e7f7      	b.n	80183b4 <sys_timeout_abs+0x30>
    next_timeout = timeout;
 80183c4:	6018      	str	r0, [r3, #0]
    return;
 80183c6:	e7f5      	b.n	80183b4 <sys_timeout_abs+0x30>
        timeout->next = t->next;
 80183c8:	602b      	str	r3, [r5, #0]
        t->next = timeout;
 80183ca:	6015      	str	r5, [r2, #0]
        break;
 80183cc:	e7f2      	b.n	80183b4 <sys_timeout_abs+0x30>
    for (t = next_timeout; t != NULL; t = t->next) {
 80183ce:	2a00      	cmp	r2, #0
 80183d0:	d0f0      	beq.n	80183b4 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80183d2:	6813      	ldr	r3, [r2, #0]
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d0f7      	beq.n	80183c8 <sys_timeout_abs+0x44>
 80183d8:	6859      	ldr	r1, [r3, #4]
 80183da:	1a61      	subs	r1, r4, r1
 80183dc:	2900      	cmp	r1, #0
 80183de:	dbf3      	blt.n	80183c8 <sys_timeout_abs+0x44>
    for (t = next_timeout; t != NULL; t = t->next) {
 80183e0:	461a      	mov	r2, r3
 80183e2:	e7f4      	b.n	80183ce <sys_timeout_abs+0x4a>
 80183e4:	20000a20 	.word	0x20000a20
 80183e8:	0801f90c 	.word	0x0801f90c
 80183ec:	0801f940 	.word	0x0801f940
 80183f0:	0801cca4 	.word	0x0801cca4

080183f4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80183f4:	b570      	push	{r4, r5, r6, lr}
 80183f6:	4604      	mov	r4, r0
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80183f8:	6843      	ldr	r3, [r0, #4]
 80183fa:	4798      	blx	r3

  now = sys_now();
 80183fc:	f7f9 fe46 	bl	801208c <sys_now>
 8018400:	4605      	mov	r5, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8018402:	6826      	ldr	r6, [r4, #0]
 8018404:	4b08      	ldr	r3, [pc, #32]	; (8018428 <lwip_cyclic_timer+0x34>)
 8018406:	6818      	ldr	r0, [r3, #0]
 8018408:	4430      	add	r0, r6
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801840a:	1b43      	subs	r3, r0, r5
 801840c:	2b00      	cmp	r3, #0
 801840e:	da05      	bge.n	801841c <lwip_cyclic_timer+0x28>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8018410:	4622      	mov	r2, r4
 8018412:	4906      	ldr	r1, [pc, #24]	; (801842c <lwip_cyclic_timer+0x38>)
 8018414:	1970      	adds	r0, r6, r5
 8018416:	f7ff ffb5 	bl	8018384 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801841a:	bd70      	pop	{r4, r5, r6, pc}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801841c:	4622      	mov	r2, r4
 801841e:	4903      	ldr	r1, [pc, #12]	; (801842c <lwip_cyclic_timer+0x38>)
 8018420:	f7ff ffb0 	bl	8018384 <sys_timeout_abs>
}
 8018424:	e7f9      	b.n	801841a <lwip_cyclic_timer+0x26>
 8018426:	bf00      	nop
 8018428:	20000a1c 	.word	0x20000a1c
 801842c:	080183f5 	.word	0x080183f5

08018430 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8018430:	b570      	push	{r4, r5, r6, lr}
 8018432:	4604      	mov	r4, r0
 8018434:	460d      	mov	r5, r1
 8018436:	4616      	mov	r6, r2
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8018438:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801843c:	d207      	bcs.n	801844e <sys_timeout+0x1e>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801843e:	f7f9 fe25 	bl	801208c <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8018442:	4632      	mov	r2, r6
 8018444:	4629      	mov	r1, r5
 8018446:	4420      	add	r0, r4
 8018448:	f7ff ff9c 	bl	8018384 <sys_timeout_abs>
#endif
}
 801844c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801844e:	4b04      	ldr	r3, [pc, #16]	; (8018460 <sys_timeout+0x30>)
 8018450:	f240 1229 	movw	r2, #297	; 0x129
 8018454:	4903      	ldr	r1, [pc, #12]	; (8018464 <sys_timeout+0x34>)
 8018456:	4804      	ldr	r0, [pc, #16]	; (8018468 <sys_timeout+0x38>)
 8018458:	f003 fb12 	bl	801ba80 <iprintf>
 801845c:	e7ef      	b.n	801843e <sys_timeout+0xe>
 801845e:	bf00      	nop
 8018460:	0801f90c 	.word	0x0801f90c
 8018464:	0801f980 	.word	0x0801f980
 8018468:	0801cca4 	.word	0x0801cca4

0801846c <tcp_timer_needed>:
{
 801846c:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801846e:	4b0a      	ldr	r3, [pc, #40]	; (8018498 <tcp_timer_needed+0x2c>)
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	b953      	cbnz	r3, 801848a <tcp_timer_needed+0x1e>
 8018474:	4b09      	ldr	r3, [pc, #36]	; (801849c <tcp_timer_needed+0x30>)
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	b143      	cbz	r3, 801848c <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 801847a:	4b07      	ldr	r3, [pc, #28]	; (8018498 <tcp_timer_needed+0x2c>)
 801847c:	2201      	movs	r2, #1
 801847e:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018480:	2200      	movs	r2, #0
 8018482:	4907      	ldr	r1, [pc, #28]	; (80184a0 <tcp_timer_needed+0x34>)
 8018484:	20fa      	movs	r0, #250	; 0xfa
 8018486:	f7ff ffd3 	bl	8018430 <sys_timeout>
}
 801848a:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801848c:	4b05      	ldr	r3, [pc, #20]	; (80184a4 <tcp_timer_needed+0x38>)
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	2b00      	cmp	r3, #0
 8018492:	d1f2      	bne.n	801847a <tcp_timer_needed+0xe>
 8018494:	e7f9      	b.n	801848a <tcp_timer_needed+0x1e>
 8018496:	bf00      	nop
 8018498:	20000a24 	.word	0x20000a24
 801849c:	2000721c 	.word	0x2000721c
 80184a0:	080184a9 	.word	0x080184a9
 80184a4:	2000722c 	.word	0x2000722c

080184a8 <tcpip_tcp_timer>:
{
 80184a8:	b508      	push	{r3, lr}
  tcp_tmr();
 80184aa:	f7fc ffc7 	bl	801543c <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80184ae:	4b08      	ldr	r3, [pc, #32]	; (80184d0 <tcpip_tcp_timer+0x28>)
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	b12b      	cbz	r3, 80184c0 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80184b4:	2200      	movs	r2, #0
 80184b6:	4907      	ldr	r1, [pc, #28]	; (80184d4 <tcpip_tcp_timer+0x2c>)
 80184b8:	20fa      	movs	r0, #250	; 0xfa
 80184ba:	f7ff ffb9 	bl	8018430 <sys_timeout>
}
 80184be:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80184c0:	4b05      	ldr	r3, [pc, #20]	; (80184d8 <tcpip_tcp_timer+0x30>)
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d1f5      	bne.n	80184b4 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 80184c8:	4b04      	ldr	r3, [pc, #16]	; (80184dc <tcpip_tcp_timer+0x34>)
 80184ca:	2200      	movs	r2, #0
 80184cc:	601a      	str	r2, [r3, #0]
}
 80184ce:	e7f6      	b.n	80184be <tcpip_tcp_timer+0x16>
 80184d0:	2000721c 	.word	0x2000721c
 80184d4:	080184a9 	.word	0x080184a9
 80184d8:	2000722c 	.word	0x2000722c
 80184dc:	20000a24 	.word	0x20000a24

080184e0 <sys_timeouts_init>:
{
 80184e0:	b510      	push	{r4, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80184e2:	2401      	movs	r4, #1
 80184e4:	2c05      	cmp	r4, #5
 80184e6:	d809      	bhi.n	80184fc <sys_timeouts_init+0x1c>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80184e8:	4b05      	ldr	r3, [pc, #20]	; (8018500 <sys_timeouts_init+0x20>)
 80184ea:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 80184ee:	4905      	ldr	r1, [pc, #20]	; (8018504 <sys_timeouts_init+0x24>)
 80184f0:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 80184f4:	f7ff ff9c 	bl	8018430 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80184f8:	3401      	adds	r4, #1
 80184fa:	e7f3      	b.n	80184e4 <sys_timeouts_init+0x4>
}
 80184fc:	bd10      	pop	{r4, pc}
 80184fe:	bf00      	nop
 8018500:	0801f9b8 	.word	0x0801f9b8
 8018504:	080183f5 	.word	0x080183f5

08018508 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8018508:	b570      	push	{r4, r5, r6, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801850a:	f7f9 fdbf 	bl	801208c <sys_now>
 801850e:	4605      	mov	r5, r0
 8018510:	e013      	b.n	801853a <sys_check_timeouts+0x32>
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8018512:	f7fb f9df 	bl	80138d4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8018516:	4b0d      	ldr	r3, [pc, #52]	; (801854c <sys_check_timeouts+0x44>)
 8018518:	6819      	ldr	r1, [r3, #0]
    if (tmptimeout == NULL) {
 801851a:	b1b1      	cbz	r1, 801854a <sys_check_timeouts+0x42>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801851c:	684b      	ldr	r3, [r1, #4]
 801851e:	1aea      	subs	r2, r5, r3
 8018520:	2a00      	cmp	r2, #0
 8018522:	db12      	blt.n	801854a <sys_check_timeouts+0x42>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8018524:	6808      	ldr	r0, [r1, #0]
 8018526:	4a09      	ldr	r2, [pc, #36]	; (801854c <sys_check_timeouts+0x44>)
 8018528:	6010      	str	r0, [r2, #0]
    handler = tmptimeout->h;
 801852a:	688c      	ldr	r4, [r1, #8]
    arg = tmptimeout->arg;
 801852c:	68ce      	ldr	r6, [r1, #12]
    current_timeout_due_time = tmptimeout->time;
 801852e:	4a08      	ldr	r2, [pc, #32]	; (8018550 <sys_check_timeouts+0x48>)
 8018530:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8018532:	2006      	movs	r0, #6
 8018534:	f7fa ffac 	bl	8013490 <memp_free>
    if (handler != NULL) {
 8018538:	b924      	cbnz	r4, 8018544 <sys_check_timeouts+0x3c>
    PBUF_CHECK_FREE_OOSEQ();
 801853a:	4b06      	ldr	r3, [pc, #24]	; (8018554 <sys_check_timeouts+0x4c>)
 801853c:	781b      	ldrb	r3, [r3, #0]
 801853e:	2b00      	cmp	r3, #0
 8018540:	d0e9      	beq.n	8018516 <sys_check_timeouts+0xe>
 8018542:	e7e6      	b.n	8018512 <sys_check_timeouts+0xa>
      handler(arg);
 8018544:	4630      	mov	r0, r6
 8018546:	47a0      	blx	r4
 8018548:	e7f7      	b.n	801853a <sys_check_timeouts+0x32>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801854a:	bd70      	pop	{r4, r5, r6, pc}
 801854c:	20000a20 	.word	0x20000a20
 8018550:	20000a1c 	.word	0x20000a1c
 8018554:	20007214 	.word	0x20007214

08018558 <udp_new_port>:
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  u16_t n = 0;
 8018558:	2000      	movs	r0, #0
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801855a:	4a10      	ldr	r2, [pc, #64]	; (801859c <udp_new_port+0x44>)
 801855c:	8813      	ldrh	r3, [r2, #0]
 801855e:	1c59      	adds	r1, r3, #1
 8018560:	8011      	strh	r1, [r2, #0]
 8018562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018566:	4293      	cmp	r3, r2
 8018568:	d009      	beq.n	801857e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801856a:	4b0d      	ldr	r3, [pc, #52]	; (80185a0 <udp_new_port+0x48>)
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	b193      	cbz	r3, 8018596 <udp_new_port+0x3e>
    if (pcb->local_port == udp_port) {
 8018570:	8a59      	ldrh	r1, [r3, #18]
 8018572:	4a0a      	ldr	r2, [pc, #40]	; (801859c <udp_new_port+0x44>)
 8018574:	8812      	ldrh	r2, [r2, #0]
 8018576:	4291      	cmp	r1, r2
 8018578:	d006      	beq.n	8018588 <udp_new_port+0x30>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801857a:	68db      	ldr	r3, [r3, #12]
 801857c:	e7f7      	b.n	801856e <udp_new_port+0x16>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801857e:	4b07      	ldr	r3, [pc, #28]	; (801859c <udp_new_port+0x44>)
 8018580:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8018584:	801a      	strh	r2, [r3, #0]
 8018586:	e7f0      	b.n	801856a <udp_new_port+0x12>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8018588:	3001      	adds	r0, #1
 801858a:	b280      	uxth	r0, r0
 801858c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8018590:	d3e3      	bcc.n	801855a <udp_new_port+0x2>
        return 0;
 8018592:	2000      	movs	r0, #0
      }
      goto again;
    }
  }
  return udp_port;
}
 8018594:	4770      	bx	lr
  return udp_port;
 8018596:	4b01      	ldr	r3, [pc, #4]	; (801859c <udp_new_port+0x44>)
 8018598:	8818      	ldrh	r0, [r3, #0]
 801859a:	4770      	bx	lr
 801859c:	20000012 	.word	0x20000012
 80185a0:	20007234 	.word	0x20007234

080185a4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80185a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185a6:	460e      	mov	r6, r1
 80185a8:	4615      	mov	r5, r2
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80185aa:	4607      	mov	r7, r0
 80185ac:	b1c8      	cbz	r0, 80185e2 <udp_input_local_match+0x3e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80185ae:	b1fe      	cbz	r6, 80185f0 <udp_input_local_match+0x4c>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80185b0:	7a3c      	ldrb	r4, [r7, #8]
 80185b2:	b13c      	cbz	r4, 80185c4 <udp_input_local_match+0x20>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80185b4:	4b1e      	ldr	r3, [pc, #120]	; (8018630 <udp_input_local_match+0x8c>)
 80185b6:	685b      	ldr	r3, [r3, #4]
 80185b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80185bc:	3301      	adds	r3, #1
 80185be:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80185c0:	429c      	cmp	r4, r3
 80185c2:	d125      	bne.n	8018610 <udp_input_local_match+0x6c>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80185c4:	b1dd      	cbz	r5, 80185fe <udp_input_local_match+0x5a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80185c6:	b32f      	cbz	r7, 8018614 <udp_input_local_match+0x70>
 80185c8:	683b      	ldr	r3, [r7, #0]
 80185ca:	b32b      	cbz	r3, 8018618 <udp_input_local_match+0x74>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80185cc:	4a18      	ldr	r2, [pc, #96]	; (8018630 <udp_input_local_match+0x8c>)
 80185ce:	6952      	ldr	r2, [r2, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80185d0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80185d4:	d022      	beq.n	801861c <udp_input_local_match+0x78>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80185d6:	68b1      	ldr	r1, [r6, #8]
 80185d8:	4053      	eors	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80185da:	420b      	tst	r3, r1
 80185dc:	d020      	beq.n	8018620 <udp_input_local_match+0x7c>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
        return 1;
      }
  }

  return 0;
 80185de:	2000      	movs	r0, #0
 80185e0:	e017      	b.n	8018612 <udp_input_local_match+0x6e>
  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80185e2:	4b14      	ldr	r3, [pc, #80]	; (8018634 <udp_input_local_match+0x90>)
 80185e4:	2287      	movs	r2, #135	; 0x87
 80185e6:	4914      	ldr	r1, [pc, #80]	; (8018638 <udp_input_local_match+0x94>)
 80185e8:	4814      	ldr	r0, [pc, #80]	; (801863c <udp_input_local_match+0x98>)
 80185ea:	f003 fa49 	bl	801ba80 <iprintf>
 80185ee:	e7de      	b.n	80185ae <udp_input_local_match+0xa>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80185f0:	4b10      	ldr	r3, [pc, #64]	; (8018634 <udp_input_local_match+0x90>)
 80185f2:	2288      	movs	r2, #136	; 0x88
 80185f4:	4912      	ldr	r1, [pc, #72]	; (8018640 <udp_input_local_match+0x9c>)
 80185f6:	4811      	ldr	r0, [pc, #68]	; (801863c <udp_input_local_match+0x98>)
 80185f8:	f003 fa42 	bl	801ba80 <iprintf>
 80185fc:	e7d8      	b.n	80185b0 <udp_input_local_match+0xc>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80185fe:	b18f      	cbz	r7, 8018624 <udp_input_local_match+0x80>
 8018600:	683b      	ldr	r3, [r7, #0]
 8018602:	b18b      	cbz	r3, 8018628 <udp_input_local_match+0x84>
 8018604:	4a0a      	ldr	r2, [pc, #40]	; (8018630 <udp_input_local_match+0x8c>)
 8018606:	6952      	ldr	r2, [r2, #20]
 8018608:	4293      	cmp	r3, r2
 801860a:	d00f      	beq.n	801862c <udp_input_local_match+0x88>
  return 0;
 801860c:	4628      	mov	r0, r5
 801860e:	e000      	b.n	8018612 <udp_input_local_match+0x6e>
    return 0;
 8018610:	2000      	movs	r0, #0
}
 8018612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return 1;
 8018614:	2001      	movs	r0, #1
 8018616:	e7fc      	b.n	8018612 <udp_input_local_match+0x6e>
 8018618:	2001      	movs	r0, #1
 801861a:	e7fa      	b.n	8018612 <udp_input_local_match+0x6e>
 801861c:	2001      	movs	r0, #1
 801861e:	e7f8      	b.n	8018612 <udp_input_local_match+0x6e>
 8018620:	2001      	movs	r0, #1
 8018622:	e7f6      	b.n	8018612 <udp_input_local_match+0x6e>
        return 1;
 8018624:	2001      	movs	r0, #1
 8018626:	e7f4      	b.n	8018612 <udp_input_local_match+0x6e>
 8018628:	2001      	movs	r0, #1
 801862a:	e7f2      	b.n	8018612 <udp_input_local_match+0x6e>
 801862c:	2001      	movs	r0, #1
 801862e:	e7f0      	b.n	8018612 <udp_input_local_match+0x6e>
 8018630:	20003c68 	.word	0x20003c68
 8018634:	0801f9e8 	.word	0x0801f9e8
 8018638:	0801fa18 	.word	0x0801fa18
 801863c:	0801cca4 	.word	0x0801cca4
 8018640:	0801fa3c 	.word	0x0801fa3c

08018644 <udp_init>:
{
 8018644:	b508      	push	{r3, lr}
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018646:	f003 faa9 	bl	801bb9c <rand>
 801864a:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 801864e:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8018652:	4b01      	ldr	r3, [pc, #4]	; (8018658 <udp_init+0x14>)
 8018654:	8018      	strh	r0, [r3, #0]
}
 8018656:	bd08      	pop	{r3, pc}
 8018658:	20000012 	.word	0x20000012

0801865c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801865c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018660:	b083      	sub	sp, #12
 8018662:	460f      	mov	r7, r1

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8018664:	4681      	mov	r9, r0
 8018666:	b1d0      	cbz	r0, 801869e <udp_input+0x42>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8018668:	b307      	cbz	r7, 80186ac <udp_input+0x50>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801866a:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 801866e:	2b07      	cmp	r3, #7
 8018670:	d923      	bls.n	80186ba <udp_input+0x5e>
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 8018672:	f8d9 4004 	ldr.w	r4, [r9, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8018676:	4b52      	ldr	r3, [pc, #328]	; (80187c0 <udp_input+0x164>)
 8018678:	6819      	ldr	r1, [r3, #0]
 801867a:	6958      	ldr	r0, [r3, #20]
 801867c:	f002 fccf 	bl	801b01e <ip4_addr_isbroadcast_u32>
 8018680:	4680      	mov	r8, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8018682:	8820      	ldrh	r0, [r4, #0]
 8018684:	f7fa f970 	bl	8012968 <lwip_htons>
 8018688:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 801868a:	8860      	ldrh	r0, [r4, #2]
 801868c:	f7fa f96c 	bl	8012968 <lwip_htons>
 8018690:	4605      	mov	r5, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018692:	4b4c      	ldr	r3, [pc, #304]	; (80187c4 <udp_input+0x168>)
 8018694:	681c      	ldr	r4, [r3, #0]
  uncon_pcb = NULL;
 8018696:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 801869a:	465e      	mov	r6, fp
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801869c:	e019      	b.n	80186d2 <udp_input+0x76>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801869e:	4b4a      	ldr	r3, [pc, #296]	; (80187c8 <udp_input+0x16c>)
 80186a0:	22cf      	movs	r2, #207	; 0xcf
 80186a2:	494a      	ldr	r1, [pc, #296]	; (80187cc <udp_input+0x170>)
 80186a4:	484a      	ldr	r0, [pc, #296]	; (80187d0 <udp_input+0x174>)
 80186a6:	f003 f9eb 	bl	801ba80 <iprintf>
 80186aa:	e7dd      	b.n	8018668 <udp_input+0xc>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80186ac:	4b46      	ldr	r3, [pc, #280]	; (80187c8 <udp_input+0x16c>)
 80186ae:	22d0      	movs	r2, #208	; 0xd0
 80186b0:	4948      	ldr	r1, [pc, #288]	; (80187d4 <udp_input+0x178>)
 80186b2:	4847      	ldr	r0, [pc, #284]	; (80187d0 <udp_input+0x174>)
 80186b4:	f003 f9e4 	bl	801ba80 <iprintf>
 80186b8:	e7d7      	b.n	801866a <udp_input+0xe>
    pbuf_free(p);
 80186ba:	4648      	mov	r0, r9
 80186bc:	f7fb f9ac 	bl	8013a18 <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80186c0:	b003      	add	sp, #12
 80186c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          uncon_pcb = pcb;
 80186c6:	46a3      	mov	fp, r4
      if ((pcb->remote_port == src) &&
 80186c8:	8aa3      	ldrh	r3, [r4, #20]
 80186ca:	459a      	cmp	sl, r3
 80186cc:	d026      	beq.n	801871c <udp_input+0xc0>
    prev = pcb;
 80186ce:	4626      	mov	r6, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80186d0:	68e4      	ldr	r4, [r4, #12]
 80186d2:	2c00      	cmp	r4, #0
 80186d4:	d02f      	beq.n	8018736 <udp_input+0xda>
    if ((pcb->local_port == dest) &&
 80186d6:	8a63      	ldrh	r3, [r4, #18]
 80186d8:	429d      	cmp	r5, r3
 80186da:	d1f8      	bne.n	80186ce <udp_input+0x72>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80186dc:	4642      	mov	r2, r8
 80186de:	4639      	mov	r1, r7
 80186e0:	4620      	mov	r0, r4
 80186e2:	f7ff ff5f 	bl	80185a4 <udp_input_local_match>
    if ((pcb->local_port == dest) &&
 80186e6:	2800      	cmp	r0, #0
 80186e8:	d0f1      	beq.n	80186ce <udp_input+0x72>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80186ea:	7c23      	ldrb	r3, [r4, #16]
 80186ec:	f013 0f04 	tst.w	r3, #4
 80186f0:	d1ea      	bne.n	80186c8 <udp_input+0x6c>
        if (uncon_pcb == NULL) {
 80186f2:	f1bb 0f00 	cmp.w	fp, #0
 80186f6:	d0e6      	beq.n	80186c6 <udp_input+0x6a>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80186f8:	f1b8 0f00 	cmp.w	r8, #0
 80186fc:	d0e4      	beq.n	80186c8 <udp_input+0x6c>
 80186fe:	4b30      	ldr	r3, [pc, #192]	; (80187c0 <udp_input+0x164>)
 8018700:	695b      	ldr	r3, [r3, #20]
 8018702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018706:	d1df      	bne.n	80186c8 <udp_input+0x6c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8018708:	f8db 2000 	ldr.w	r2, [fp]
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	429a      	cmp	r2, r3
 8018710:	d0da      	beq.n	80186c8 <udp_input+0x6c>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8018712:	6822      	ldr	r2, [r4, #0]
 8018714:	4293      	cmp	r3, r2
 8018716:	d1d7      	bne.n	80186c8 <udp_input+0x6c>
              uncon_pcb = pcb;
 8018718:	46a3      	mov	fp, r4
 801871a:	e7d5      	b.n	80186c8 <udp_input+0x6c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801871c:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 801871e:	b11b      	cbz	r3, 8018728 <udp_input+0xcc>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8018720:	4a27      	ldr	r2, [pc, #156]	; (80187c0 <udp_input+0x164>)
 8018722:	6912      	ldr	r2, [r2, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018724:	4293      	cmp	r3, r2
 8018726:	d1d2      	bne.n	80186ce <udp_input+0x72>
        if (prev != NULL) {
 8018728:	b12e      	cbz	r6, 8018736 <udp_input+0xda>
          prev->next = pcb->next;
 801872a:	68e3      	ldr	r3, [r4, #12]
 801872c:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 801872e:	4b25      	ldr	r3, [pc, #148]	; (80187c4 <udp_input+0x168>)
 8018730:	681a      	ldr	r2, [r3, #0]
 8018732:	60e2      	str	r2, [r4, #12]
          udp_pcbs = pcb;
 8018734:	601c      	str	r4, [r3, #0]
  if (pcb == NULL) {
 8018736:	b184      	cbz	r4, 801875a <udp_input+0xfe>
  if (pcb != NULL) {
 8018738:	b18c      	cbz	r4, 801875e <udp_input+0x102>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801873a:	2108      	movs	r1, #8
 801873c:	4648      	mov	r0, r9
 801873e:	f7fb f925 	bl	801398c <pbuf_remove_header>
 8018742:	b9a8      	cbnz	r0, 8018770 <udp_input+0x114>
    if (pcb != NULL) {
 8018744:	b31c      	cbz	r4, 801878e <udp_input+0x132>
      if (pcb->recv != NULL) {
 8018746:	69a5      	ldr	r5, [r4, #24]
 8018748:	b1ed      	cbz	r5, 8018786 <udp_input+0x12a>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801874a:	69e0      	ldr	r0, [r4, #28]
 801874c:	f8cd a000 	str.w	sl, [sp]
 8018750:	4b21      	ldr	r3, [pc, #132]	; (80187d8 <udp_input+0x17c>)
 8018752:	464a      	mov	r2, r9
 8018754:	4621      	mov	r1, r4
 8018756:	47a8      	blx	r5
 8018758:	e7b2      	b.n	80186c0 <udp_input+0x64>
    pcb = uncon_pcb;
 801875a:	465c      	mov	r4, fp
 801875c:	e7ec      	b.n	8018738 <udp_input+0xdc>
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801875e:	687a      	ldr	r2, [r7, #4]
 8018760:	4b17      	ldr	r3, [pc, #92]	; (80187c0 <udp_input+0x164>)
 8018762:	695b      	ldr	r3, [r3, #20]
  if (for_us) {
 8018764:	429a      	cmp	r2, r3
 8018766:	d0e8      	beq.n	801873a <udp_input+0xde>
    pbuf_free(p);
 8018768:	4648      	mov	r0, r9
 801876a:	f7fb f955 	bl	8013a18 <pbuf_free>
  return;
 801876e:	e7a7      	b.n	80186c0 <udp_input+0x64>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018770:	4b15      	ldr	r3, [pc, #84]	; (80187c8 <udp_input+0x16c>)
 8018772:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8018776:	4919      	ldr	r1, [pc, #100]	; (80187dc <udp_input+0x180>)
 8018778:	4815      	ldr	r0, [pc, #84]	; (80187d0 <udp_input+0x174>)
 801877a:	f003 f981 	bl	801ba80 <iprintf>
      pbuf_free(p);
 801877e:	4648      	mov	r0, r9
 8018780:	f7fb f94a 	bl	8013a18 <pbuf_free>
      goto end;
 8018784:	e79c      	b.n	80186c0 <udp_input+0x64>
        pbuf_free(p);
 8018786:	4648      	mov	r0, r9
 8018788:	f7fb f946 	bl	8013a18 <pbuf_free>
        goto end;
 801878c:	e798      	b.n	80186c0 <udp_input+0x64>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801878e:	f1b8 0f00 	cmp.w	r8, #0
 8018792:	d105      	bne.n	80187a0 <udp_input+0x144>
 8018794:	4b0a      	ldr	r3, [pc, #40]	; (80187c0 <udp_input+0x164>)
 8018796:	695b      	ldr	r3, [r3, #20]
 8018798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801879c:	2be0      	cmp	r3, #224	; 0xe0
 801879e:	d103      	bne.n	80187a8 <udp_input+0x14c>
      pbuf_free(p);
 80187a0:	4648      	mov	r0, r9
 80187a2:	f7fb f939 	bl	8013a18 <pbuf_free>
 80187a6:	e78b      	b.n	80186c0 <udp_input+0x64>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80187a8:	4b05      	ldr	r3, [pc, #20]	; (80187c0 <udp_input+0x164>)
 80187aa:	8999      	ldrh	r1, [r3, #12]
 80187ac:	3108      	adds	r1, #8
 80187ae:	b209      	sxth	r1, r1
 80187b0:	4648      	mov	r0, r9
 80187b2:	f7fb f92b 	bl	8013a0c <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80187b6:	2103      	movs	r1, #3
 80187b8:	4648      	mov	r0, r9
 80187ba:	f002 fa65 	bl	801ac88 <icmp_dest_unreach>
 80187be:	e7ef      	b.n	80187a0 <udp_input+0x144>
 80187c0:	20003c68 	.word	0x20003c68
 80187c4:	20007234 	.word	0x20007234
 80187c8:	0801f9e8 	.word	0x0801f9e8
 80187cc:	0801fa64 	.word	0x0801fa64
 80187d0:	0801cca4 	.word	0x0801cca4
 80187d4:	0801fa7c 	.word	0x0801fa7c
 80187d8:	20003c78 	.word	0x20003c78
 80187dc:	0801fa98 	.word	0x0801fa98

080187e0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80187e0:	b570      	push	{r4, r5, r6, lr}
 80187e2:	4604      	mov	r4, r0

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80187e4:	460d      	mov	r5, r1
 80187e6:	b141      	cbz	r1, 80187fa <udp_bind+0x1a>
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80187e8:	b14c      	cbz	r4, 80187fe <udp_bind+0x1e>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80187ea:	4b27      	ldr	r3, [pc, #156]	; (8018888 <udp_bind+0xa8>)
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	4619      	mov	r1, r3
 80187f0:	b179      	cbz	r1, 8018812 <udp_bind+0x32>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80187f2:	42a1      	cmp	r1, r4
 80187f4:	d01e      	beq.n	8018834 <udp_bind+0x54>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80187f6:	68c9      	ldr	r1, [r1, #12]
 80187f8:	e7fa      	b.n	80187f0 <udp_bind+0x10>
    ipaddr = IP4_ADDR_ANY;
 80187fa:	4d24      	ldr	r5, [pc, #144]	; (801888c <udp_bind+0xac>)
 80187fc:	e7f4      	b.n	80187e8 <udp_bind+0x8>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80187fe:	4b24      	ldr	r3, [pc, #144]	; (8018890 <udp_bind+0xb0>)
 8018800:	f240 32b7 	movw	r2, #951	; 0x3b7
 8018804:	4923      	ldr	r1, [pc, #140]	; (8018894 <udp_bind+0xb4>)
 8018806:	4824      	ldr	r0, [pc, #144]	; (8018898 <udp_bind+0xb8>)
 8018808:	f003 f93a 	bl	801ba80 <iprintf>
 801880c:	f06f 000f 	mvn.w	r0, #15
 8018810:	e00f      	b.n	8018832 <udp_bind+0x52>
  rebind = 0;
 8018812:	2600      	movs	r6, #0
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8018814:	b98a      	cbnz	r2, 801883a <udp_bind+0x5a>
    port = udp_new_port();
 8018816:	f7ff fe9f 	bl	8018558 <udp_new_port>
    if (port == 0) {
 801881a:	4602      	mov	r2, r0
 801881c:	b310      	cbz	r0, 8018864 <udp_bind+0x84>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801881e:	b1fd      	cbz	r5, 8018860 <udp_bind+0x80>
 8018820:	682b      	ldr	r3, [r5, #0]
 8018822:	6023      	str	r3, [r4, #0]

  pcb->local_port = port;
 8018824:	8262      	strh	r2, [r4, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8018826:	bb66      	cbnz	r6, 8018882 <udp_bind+0xa2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8018828:	4b17      	ldr	r3, [pc, #92]	; (8018888 <udp_bind+0xa8>)
 801882a:	681a      	ldr	r2, [r3, #0]
 801882c:	60e2      	str	r2, [r4, #12]
    udp_pcbs = pcb;
 801882e:	601c      	str	r4, [r3, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8018830:	2000      	movs	r0, #0
}
 8018832:	bd70      	pop	{r4, r5, r6, pc}
      rebind = 1;
 8018834:	2601      	movs	r6, #1
 8018836:	e7ed      	b.n	8018814 <udp_bind+0x34>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018838:	68db      	ldr	r3, [r3, #12]
 801883a:	2b00      	cmp	r3, #0
 801883c:	d0ef      	beq.n	801881e <udp_bind+0x3e>
      if (pcb != ipcb) {
 801883e:	42a3      	cmp	r3, r4
 8018840:	d0fa      	beq.n	8018838 <udp_bind+0x58>
          if ((ipcb->local_port == port) &&
 8018842:	8a59      	ldrh	r1, [r3, #18]
 8018844:	428a      	cmp	r2, r1
 8018846:	d1f7      	bne.n	8018838 <udp_bind+0x58>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018848:	6818      	ldr	r0, [r3, #0]
 801884a:	6829      	ldr	r1, [r5, #0]
          if ((ipcb->local_port == port) &&
 801884c:	4288      	cmp	r0, r1
 801884e:	d00c      	beq.n	801886a <udp_bind+0x8a>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018850:	b175      	cbz	r5, 8018870 <udp_bind+0x90>
 8018852:	b181      	cbz	r1, 8018876 <udp_bind+0x96>
 8018854:	b193      	cbz	r3, 801887c <udp_bind+0x9c>
              ip_addr_isany(&ipcb->local_ip))) {
 8018856:	2800      	cmp	r0, #0
 8018858:	d1ee      	bne.n	8018838 <udp_bind+0x58>
            return ERR_USE;
 801885a:	f06f 0007 	mvn.w	r0, #7
 801885e:	e7e8      	b.n	8018832 <udp_bind+0x52>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8018860:	2300      	movs	r3, #0
 8018862:	e7de      	b.n	8018822 <udp_bind+0x42>
      return ERR_USE;
 8018864:	f06f 0007 	mvn.w	r0, #7
 8018868:	e7e3      	b.n	8018832 <udp_bind+0x52>
            return ERR_USE;
 801886a:	f06f 0007 	mvn.w	r0, #7
 801886e:	e7e0      	b.n	8018832 <udp_bind+0x52>
 8018870:	f06f 0007 	mvn.w	r0, #7
 8018874:	e7dd      	b.n	8018832 <udp_bind+0x52>
 8018876:	f06f 0007 	mvn.w	r0, #7
 801887a:	e7da      	b.n	8018832 <udp_bind+0x52>
 801887c:	f06f 0007 	mvn.w	r0, #7
 8018880:	e7d7      	b.n	8018832 <udp_bind+0x52>
  return ERR_OK;
 8018882:	2000      	movs	r0, #0
 8018884:	e7d5      	b.n	8018832 <udp_bind+0x52>
 8018886:	bf00      	nop
 8018888:	20007234 	.word	0x20007234
 801888c:	0802035c 	.word	0x0802035c
 8018890:	0801f9e8 	.word	0x0801f9e8
 8018894:	0801fab4 	.word	0x0801fab4
 8018898:	0801cca4 	.word	0x0801cca4

0801889c <udp_sendto_if_src>:
{
 801889c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188a0:	b085      	sub	sp, #20
 80188a2:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80188a6:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80188aa:	2800      	cmp	r0, #0
 80188ac:	d045      	beq.n	801893a <udp_sendto_if_src+0x9e>
 80188ae:	460c      	mov	r4, r1
 80188b0:	4690      	mov	r8, r2
 80188b2:	4699      	mov	r9, r3
 80188b4:	4606      	mov	r6, r0
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80188b6:	2900      	cmp	r1, #0
 80188b8:	d049      	beq.n	801894e <udp_sendto_if_src+0xb2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80188ba:	2a00      	cmp	r2, #0
 80188bc:	d051      	beq.n	8018962 <udp_sendto_if_src+0xc6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80188be:	f1ba 0f00 	cmp.w	sl, #0
 80188c2:	d058      	beq.n	8018976 <udp_sendto_if_src+0xda>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80188c4:	f1bb 0f00 	cmp.w	fp, #0
 80188c8:	d05f      	beq.n	801898a <udp_sendto_if_src+0xee>
  if (pcb->local_port == 0) {
 80188ca:	8a42      	ldrh	r2, [r0, #18]
 80188cc:	2a00      	cmp	r2, #0
 80188ce:	d066      	beq.n	801899e <udp_sendto_if_src+0x102>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80188d0:	8922      	ldrh	r2, [r4, #8]
 80188d2:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80188d6:	429a      	cmp	r2, r3
 80188d8:	d87f      	bhi.n	80189da <udp_sendto_if_src+0x13e>
  if (pbuf_add_header(p, UDP_HLEN)) {
 80188da:	2108      	movs	r1, #8
 80188dc:	4620      	mov	r0, r4
 80188de:	f7fb f850 	bl	8013982 <pbuf_add_header>
 80188e2:	2800      	cmp	r0, #0
 80188e4:	d162      	bne.n	80189ac <udp_sendto_if_src+0x110>
    q = p;
 80188e6:	4625      	mov	r5, r4
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80188e8:	896b      	ldrh	r3, [r5, #10]
 80188ea:	2b07      	cmp	r3, #7
 80188ec:	d96d      	bls.n	80189ca <udp_sendto_if_src+0x12e>
  udphdr = (struct udp_hdr *)q->payload;
 80188ee:	686f      	ldr	r7, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 80188f0:	8a70      	ldrh	r0, [r6, #18]
 80188f2:	f7fa f839 	bl	8012968 <lwip_htons>
 80188f6:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 80188f8:	4648      	mov	r0, r9
 80188fa:	f7fa f835 	bl	8012968 <lwip_htons>
 80188fe:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 8018900:	2300      	movs	r3, #0
 8018902:	71bb      	strb	r3, [r7, #6]
 8018904:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 8018906:	8928      	ldrh	r0, [r5, #8]
 8018908:	f7fa f82e 	bl	8012968 <lwip_htons>
 801890c:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801890e:	f8cd b008 	str.w	fp, [sp, #8]
 8018912:	2311      	movs	r3, #17
 8018914:	9301      	str	r3, [sp, #4]
 8018916:	7ab3      	ldrb	r3, [r6, #10]
 8018918:	9300      	str	r3, [sp, #0]
 801891a:	7af3      	ldrb	r3, [r6, #11]
 801891c:	4642      	mov	r2, r8
 801891e:	4651      	mov	r1, sl
 8018920:	4628      	mov	r0, r5
 8018922:	f002 fae7 	bl	801aef4 <ip4_output_if_src>
 8018926:	4607      	mov	r7, r0
  if (q != p) {
 8018928:	42a5      	cmp	r5, r4
 801892a:	d002      	beq.n	8018932 <udp_sendto_if_src+0x96>
    pbuf_free(q);
 801892c:	4628      	mov	r0, r5
 801892e:	f7fb f873 	bl	8013a18 <pbuf_free>
}
 8018932:	4638      	mov	r0, r7
 8018934:	b005      	add	sp, #20
 8018936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801893a:	4b2b      	ldr	r3, [pc, #172]	; (80189e8 <udp_sendto_if_src+0x14c>)
 801893c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8018940:	492a      	ldr	r1, [pc, #168]	; (80189ec <udp_sendto_if_src+0x150>)
 8018942:	482b      	ldr	r0, [pc, #172]	; (80189f0 <udp_sendto_if_src+0x154>)
 8018944:	f003 f89c 	bl	801ba80 <iprintf>
 8018948:	f06f 070f 	mvn.w	r7, #15
 801894c:	e7f1      	b.n	8018932 <udp_sendto_if_src+0x96>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801894e:	4b26      	ldr	r3, [pc, #152]	; (80189e8 <udp_sendto_if_src+0x14c>)
 8018950:	f240 22d2 	movw	r2, #722	; 0x2d2
 8018954:	4927      	ldr	r1, [pc, #156]	; (80189f4 <udp_sendto_if_src+0x158>)
 8018956:	4826      	ldr	r0, [pc, #152]	; (80189f0 <udp_sendto_if_src+0x154>)
 8018958:	f003 f892 	bl	801ba80 <iprintf>
 801895c:	f06f 070f 	mvn.w	r7, #15
 8018960:	e7e7      	b.n	8018932 <udp_sendto_if_src+0x96>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018962:	4b21      	ldr	r3, [pc, #132]	; (80189e8 <udp_sendto_if_src+0x14c>)
 8018964:	f240 22d3 	movw	r2, #723	; 0x2d3
 8018968:	4923      	ldr	r1, [pc, #140]	; (80189f8 <udp_sendto_if_src+0x15c>)
 801896a:	4821      	ldr	r0, [pc, #132]	; (80189f0 <udp_sendto_if_src+0x154>)
 801896c:	f003 f888 	bl	801ba80 <iprintf>
 8018970:	f06f 070f 	mvn.w	r7, #15
 8018974:	e7dd      	b.n	8018932 <udp_sendto_if_src+0x96>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8018976:	4b1c      	ldr	r3, [pc, #112]	; (80189e8 <udp_sendto_if_src+0x14c>)
 8018978:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801897c:	491f      	ldr	r1, [pc, #124]	; (80189fc <udp_sendto_if_src+0x160>)
 801897e:	481c      	ldr	r0, [pc, #112]	; (80189f0 <udp_sendto_if_src+0x154>)
 8018980:	f003 f87e 	bl	801ba80 <iprintf>
 8018984:	f06f 070f 	mvn.w	r7, #15
 8018988:	e7d3      	b.n	8018932 <udp_sendto_if_src+0x96>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801898a:	4b17      	ldr	r3, [pc, #92]	; (80189e8 <udp_sendto_if_src+0x14c>)
 801898c:	f240 22d5 	movw	r2, #725	; 0x2d5
 8018990:	491b      	ldr	r1, [pc, #108]	; (8018a00 <udp_sendto_if_src+0x164>)
 8018992:	4817      	ldr	r0, [pc, #92]	; (80189f0 <udp_sendto_if_src+0x154>)
 8018994:	f003 f874 	bl	801ba80 <iprintf>
 8018998:	f06f 070f 	mvn.w	r7, #15
 801899c:	e7c9      	b.n	8018932 <udp_sendto_if_src+0x96>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801899e:	4601      	mov	r1, r0
 80189a0:	f7ff ff1e 	bl	80187e0 <udp_bind>
    if (err != ERR_OK) {
 80189a4:	4607      	mov	r7, r0
 80189a6:	2800      	cmp	r0, #0
 80189a8:	d092      	beq.n	80188d0 <udp_sendto_if_src+0x34>
 80189aa:	e7c2      	b.n	8018932 <udp_sendto_if_src+0x96>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80189ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 80189b0:	2108      	movs	r1, #8
 80189b2:	2022      	movs	r0, #34	; 0x22
 80189b4:	f7fb f892 	bl	8013adc <pbuf_alloc>
    if (q == NULL) {
 80189b8:	4605      	mov	r5, r0
 80189ba:	b188      	cbz	r0, 80189e0 <udp_sendto_if_src+0x144>
    if (p->tot_len != 0) {
 80189bc:	8923      	ldrh	r3, [r4, #8]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d092      	beq.n	80188e8 <udp_sendto_if_src+0x4c>
      pbuf_chain(q, p);
 80189c2:	4621      	mov	r1, r4
 80189c4:	f7fb f9e6 	bl	8013d94 <pbuf_chain>
 80189c8:	e78e      	b.n	80188e8 <udp_sendto_if_src+0x4c>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80189ca:	4b07      	ldr	r3, [pc, #28]	; (80189e8 <udp_sendto_if_src+0x14c>)
 80189cc:	f240 320d 	movw	r2, #781	; 0x30d
 80189d0:	490c      	ldr	r1, [pc, #48]	; (8018a04 <udp_sendto_if_src+0x168>)
 80189d2:	4807      	ldr	r0, [pc, #28]	; (80189f0 <udp_sendto_if_src+0x154>)
 80189d4:	f003 f854 	bl	801ba80 <iprintf>
 80189d8:	e789      	b.n	80188ee <udp_sendto_if_src+0x52>
    return ERR_MEM;
 80189da:	f04f 37ff 	mov.w	r7, #4294967295
 80189de:	e7a8      	b.n	8018932 <udp_sendto_if_src+0x96>
      return ERR_MEM;
 80189e0:	f04f 37ff 	mov.w	r7, #4294967295
 80189e4:	e7a5      	b.n	8018932 <udp_sendto_if_src+0x96>
 80189e6:	bf00      	nop
 80189e8:	0801f9e8 	.word	0x0801f9e8
 80189ec:	0801facc 	.word	0x0801facc
 80189f0:	0801cca4 	.word	0x0801cca4
 80189f4:	0801faec 	.word	0x0801faec
 80189f8:	0801fb0c 	.word	0x0801fb0c
 80189fc:	0801fb30 	.word	0x0801fb30
 8018a00:	0801fb54 	.word	0x0801fb54
 8018a04:	0801fb78 	.word	0x0801fb78

08018a08 <udp_sendto_if>:
{
 8018a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a0a:	b083      	sub	sp, #12
 8018a0c:	9d08      	ldr	r5, [sp, #32]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8018a0e:	b188      	cbz	r0, 8018a34 <udp_sendto_if+0x2c>
 8018a10:	4604      	mov	r4, r0
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8018a12:	b1c9      	cbz	r1, 8018a48 <udp_sendto_if+0x40>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018a14:	b312      	cbz	r2, 8018a5c <udp_sendto_if+0x54>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8018a16:	b35d      	cbz	r5, 8018a70 <udp_sendto_if+0x68>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018a18:	2800      	cmp	r0, #0
 8018a1a:	d033      	beq.n	8018a84 <udp_sendto_if+0x7c>
 8018a1c:	6806      	ldr	r6, [r0, #0]
 8018a1e:	b38e      	cbz	r6, 8018a84 <udp_sendto_if+0x7c>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8018a20:	f006 07f0 	and.w	r7, r6, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018a24:	2fe0      	cmp	r7, #224	; 0xe0
 8018a26:	d02d      	beq.n	8018a84 <udp_sendto_if+0x7c>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8018a28:	686f      	ldr	r7, [r5, #4]
 8018a2a:	42be      	cmp	r6, r7
 8018a2c:	d02b      	beq.n	8018a86 <udp_sendto_if+0x7e>
        return ERR_RTE;
 8018a2e:	f06f 0003 	mvn.w	r0, #3
 8018a32:	e02d      	b.n	8018a90 <udp_sendto_if+0x88>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8018a34:	4b17      	ldr	r3, [pc, #92]	; (8018a94 <udp_sendto_if+0x8c>)
 8018a36:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018a3a:	4917      	ldr	r1, [pc, #92]	; (8018a98 <udp_sendto_if+0x90>)
 8018a3c:	4817      	ldr	r0, [pc, #92]	; (8018a9c <udp_sendto_if+0x94>)
 8018a3e:	f003 f81f 	bl	801ba80 <iprintf>
 8018a42:	f06f 000f 	mvn.w	r0, #15
 8018a46:	e023      	b.n	8018a90 <udp_sendto_if+0x88>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8018a48:	4b12      	ldr	r3, [pc, #72]	; (8018a94 <udp_sendto_if+0x8c>)
 8018a4a:	f240 2281 	movw	r2, #641	; 0x281
 8018a4e:	4914      	ldr	r1, [pc, #80]	; (8018aa0 <udp_sendto_if+0x98>)
 8018a50:	4812      	ldr	r0, [pc, #72]	; (8018a9c <udp_sendto_if+0x94>)
 8018a52:	f003 f815 	bl	801ba80 <iprintf>
 8018a56:	f06f 000f 	mvn.w	r0, #15
 8018a5a:	e019      	b.n	8018a90 <udp_sendto_if+0x88>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018a5c:	4b0d      	ldr	r3, [pc, #52]	; (8018a94 <udp_sendto_if+0x8c>)
 8018a5e:	f240 2282 	movw	r2, #642	; 0x282
 8018a62:	4910      	ldr	r1, [pc, #64]	; (8018aa4 <udp_sendto_if+0x9c>)
 8018a64:	480d      	ldr	r0, [pc, #52]	; (8018a9c <udp_sendto_if+0x94>)
 8018a66:	f003 f80b 	bl	801ba80 <iprintf>
 8018a6a:	f06f 000f 	mvn.w	r0, #15
 8018a6e:	e00f      	b.n	8018a90 <udp_sendto_if+0x88>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8018a70:	4b08      	ldr	r3, [pc, #32]	; (8018a94 <udp_sendto_if+0x8c>)
 8018a72:	f240 2283 	movw	r2, #643	; 0x283
 8018a76:	490c      	ldr	r1, [pc, #48]	; (8018aa8 <udp_sendto_if+0xa0>)
 8018a78:	4808      	ldr	r0, [pc, #32]	; (8018a9c <udp_sendto_if+0x94>)
 8018a7a:	f003 f801 	bl	801ba80 <iprintf>
 8018a7e:	f06f 000f 	mvn.w	r0, #15
 8018a82:	e005      	b.n	8018a90 <udp_sendto_if+0x88>
      src_ip = netif_ip_addr4(netif);
 8018a84:	1d28      	adds	r0, r5, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8018a86:	9001      	str	r0, [sp, #4]
 8018a88:	9500      	str	r5, [sp, #0]
 8018a8a:	4620      	mov	r0, r4
 8018a8c:	f7ff ff06 	bl	801889c <udp_sendto_if_src>
}
 8018a90:	b003      	add	sp, #12
 8018a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a94:	0801f9e8 	.word	0x0801f9e8
 8018a98:	0801fba8 	.word	0x0801fba8
 8018a9c:	0801cca4 	.word	0x0801cca4
 8018aa0:	0801fbc4 	.word	0x0801fbc4
 8018aa4:	0801fbe0 	.word	0x0801fbe0
 8018aa8:	0801fc00 	.word	0x0801fc00

08018aac <udp_sendto>:
{
 8018aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018aae:	b083      	sub	sp, #12
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8018ab0:	b198      	cbz	r0, 8018ada <udp_sendto+0x2e>
 8018ab2:	460d      	mov	r5, r1
 8018ab4:	4614      	mov	r4, r2
 8018ab6:	461e      	mov	r6, r3
 8018ab8:	4607      	mov	r7, r0
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8018aba:	b1c1      	cbz	r1, 8018aee <udp_sendto+0x42>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018abc:	b30a      	cbz	r2, 8018b02 <udp_sendto+0x56>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8018abe:	7a00      	ldrb	r0, [r0, #8]
 8018ac0:	b348      	cbz	r0, 8018b16 <udp_sendto+0x6a>
    netif = netif_get_by_index(pcb->netif_idx);
 8018ac2:	f7fa fe93 	bl	80137ec <netif_get_by_index>
  if (netif == NULL) {
 8018ac6:	b350      	cbz	r0, 8018b1e <udp_sendto+0x72>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8018ac8:	9000      	str	r0, [sp, #0]
 8018aca:	4633      	mov	r3, r6
 8018acc:	4622      	mov	r2, r4
 8018ace:	4629      	mov	r1, r5
 8018ad0:	4638      	mov	r0, r7
 8018ad2:	f7ff ff99 	bl	8018a08 <udp_sendto_if>
}
 8018ad6:	b003      	add	sp, #12
 8018ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8018ada:	4b12      	ldr	r3, [pc, #72]	; (8018b24 <udp_sendto+0x78>)
 8018adc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018ae0:	4911      	ldr	r1, [pc, #68]	; (8018b28 <udp_sendto+0x7c>)
 8018ae2:	4812      	ldr	r0, [pc, #72]	; (8018b2c <udp_sendto+0x80>)
 8018ae4:	f002 ffcc 	bl	801ba80 <iprintf>
 8018ae8:	f06f 000f 	mvn.w	r0, #15
 8018aec:	e7f3      	b.n	8018ad6 <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8018aee:	4b0d      	ldr	r3, [pc, #52]	; (8018b24 <udp_sendto+0x78>)
 8018af0:	f240 2219 	movw	r2, #537	; 0x219
 8018af4:	490e      	ldr	r1, [pc, #56]	; (8018b30 <udp_sendto+0x84>)
 8018af6:	480d      	ldr	r0, [pc, #52]	; (8018b2c <udp_sendto+0x80>)
 8018af8:	f002 ffc2 	bl	801ba80 <iprintf>
 8018afc:	f06f 000f 	mvn.w	r0, #15
 8018b00:	e7e9      	b.n	8018ad6 <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018b02:	4b08      	ldr	r3, [pc, #32]	; (8018b24 <udp_sendto+0x78>)
 8018b04:	f240 221a 	movw	r2, #538	; 0x21a
 8018b08:	490a      	ldr	r1, [pc, #40]	; (8018b34 <udp_sendto+0x88>)
 8018b0a:	4808      	ldr	r0, [pc, #32]	; (8018b2c <udp_sendto+0x80>)
 8018b0c:	f002 ffb8 	bl	801ba80 <iprintf>
 8018b10:	f06f 000f 	mvn.w	r0, #15
 8018b14:	e7df      	b.n	8018ad6 <udp_sendto+0x2a>
      netif = ip_route(&pcb->local_ip, dst_ip);
 8018b16:	4610      	mov	r0, r2
 8018b18:	f002 f8dc 	bl	801acd4 <ip4_route>
 8018b1c:	e7d3      	b.n	8018ac6 <udp_sendto+0x1a>
    return ERR_RTE;
 8018b1e:	f06f 0003 	mvn.w	r0, #3
 8018b22:	e7d8      	b.n	8018ad6 <udp_sendto+0x2a>
 8018b24:	0801f9e8 	.word	0x0801f9e8
 8018b28:	0801fc20 	.word	0x0801fc20
 8018b2c:	0801cca4 	.word	0x0801cca4
 8018b30:	0801fc38 	.word	0x0801fc38
 8018b34:	0801fc54 	.word	0x0801fc54

08018b38 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018b38:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8018b3a:	b1a0      	cbz	r0, 8018b66 <udp_connect+0x2e>
 8018b3c:	460d      	mov	r5, r1
 8018b3e:	4616      	mov	r6, r2
 8018b40:	4604      	mov	r4, r0
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8018b42:	b1d1      	cbz	r1, 8018b7a <udp_connect+0x42>

  if (pcb->local_port == 0) {
 8018b44:	8a42      	ldrh	r2, [r0, #18]
 8018b46:	b312      	cbz	r2, 8018b8e <udp_connect+0x56>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8018b48:	682b      	ldr	r3, [r5, #0]
 8018b4a:	6063      	str	r3, [r4, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8018b4c:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8018b4e:	7c23      	ldrb	r3, [r4, #16]
 8018b50:	f043 0304 	orr.w	r3, r3, #4
 8018b54:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018b56:	4b14      	ldr	r3, [pc, #80]	; (8018ba8 <udp_connect+0x70>)
 8018b58:	681a      	ldr	r2, [r3, #0]
 8018b5a:	4613      	mov	r3, r2
 8018b5c:	b1eb      	cbz	r3, 8018b9a <udp_connect+0x62>
    if (pcb == ipcb) {
 8018b5e:	429c      	cmp	r4, r3
 8018b60:	d020      	beq.n	8018ba4 <udp_connect+0x6c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018b62:	68db      	ldr	r3, [r3, #12]
 8018b64:	e7fa      	b.n	8018b5c <udp_connect+0x24>
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8018b66:	4b11      	ldr	r3, [pc, #68]	; (8018bac <udp_connect+0x74>)
 8018b68:	f240 4235 	movw	r2, #1077	; 0x435
 8018b6c:	4910      	ldr	r1, [pc, #64]	; (8018bb0 <udp_connect+0x78>)
 8018b6e:	4811      	ldr	r0, [pc, #68]	; (8018bb4 <udp_connect+0x7c>)
 8018b70:	f002 ff86 	bl	801ba80 <iprintf>
 8018b74:	f06f 000f 	mvn.w	r0, #15
 8018b78:	e013      	b.n	8018ba2 <udp_connect+0x6a>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8018b7a:	4b0c      	ldr	r3, [pc, #48]	; (8018bac <udp_connect+0x74>)
 8018b7c:	f240 4236 	movw	r2, #1078	; 0x436
 8018b80:	490d      	ldr	r1, [pc, #52]	; (8018bb8 <udp_connect+0x80>)
 8018b82:	480c      	ldr	r0, [pc, #48]	; (8018bb4 <udp_connect+0x7c>)
 8018b84:	f002 ff7c 	bl	801ba80 <iprintf>
 8018b88:	f06f 000f 	mvn.w	r0, #15
 8018b8c:	e009      	b.n	8018ba2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018b8e:	4601      	mov	r1, r0
 8018b90:	f7ff fe26 	bl	80187e0 <udp_bind>
    if (err != ERR_OK) {
 8018b94:	2800      	cmp	r0, #0
 8018b96:	d0d7      	beq.n	8018b48 <udp_connect+0x10>
 8018b98:	e003      	b.n	8018ba2 <udp_connect+0x6a>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8018b9a:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 8018b9c:	4b02      	ldr	r3, [pc, #8]	; (8018ba8 <udp_connect+0x70>)
 8018b9e:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 8018ba0:	2000      	movs	r0, #0
}
 8018ba2:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 8018ba4:	2000      	movs	r0, #0
 8018ba6:	e7fc      	b.n	8018ba2 <udp_connect+0x6a>
 8018ba8:	20007234 	.word	0x20007234
 8018bac:	0801f9e8 	.word	0x0801f9e8
 8018bb0:	0801fc70 	.word	0x0801fc70
 8018bb4:	0801cca4 	.word	0x0801cca4
 8018bb8:	0801fc8c 	.word	0x0801fc8c

08018bbc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8018bbc:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8018bbe:	b110      	cbz	r0, 8018bc6 <udp_recv+0xa>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8018bc0:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 8018bc2:	61c2      	str	r2, [r0, #28]
}
 8018bc4:	bd08      	pop	{r3, pc}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8018bc6:	4b04      	ldr	r3, [pc, #16]	; (8018bd8 <udp_recv+0x1c>)
 8018bc8:	f240 428a 	movw	r2, #1162	; 0x48a
 8018bcc:	4903      	ldr	r1, [pc, #12]	; (8018bdc <udp_recv+0x20>)
 8018bce:	4804      	ldr	r0, [pc, #16]	; (8018be0 <udp_recv+0x24>)
 8018bd0:	f002 ff56 	bl	801ba80 <iprintf>
 8018bd4:	e7f6      	b.n	8018bc4 <udp_recv+0x8>
 8018bd6:	bf00      	nop
 8018bd8:	0801f9e8 	.word	0x0801f9e8
 8018bdc:	0801fca8 	.word	0x0801fca8
 8018be0:	0801cca4 	.word	0x0801cca4

08018be4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8018be4:	b508      	push	{r3, lr}
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8018be6:	b150      	cbz	r0, 8018bfe <udp_remove+0x1a>
 8018be8:	4601      	mov	r1, r0

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8018bea:	4b0f      	ldr	r3, [pc, #60]	; (8018c28 <udp_remove+0x44>)
 8018bec:	681a      	ldr	r2, [r3, #0]
 8018bee:	4282      	cmp	r2, r0
 8018bf0:	d111      	bne.n	8018c16 <udp_remove+0x32>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8018bf2:	68d2      	ldr	r2, [r2, #12]
 8018bf4:	601a      	str	r2, [r3, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8018bf6:	2000      	movs	r0, #0
 8018bf8:	f7fa fc4a 	bl	8013490 <memp_free>
}
 8018bfc:	bd08      	pop	{r3, pc}
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8018bfe:	4b0b      	ldr	r3, [pc, #44]	; (8018c2c <udp_remove+0x48>)
 8018c00:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8018c04:	490a      	ldr	r1, [pc, #40]	; (8018c30 <udp_remove+0x4c>)
 8018c06:	480b      	ldr	r0, [pc, #44]	; (8018c34 <udp_remove+0x50>)
 8018c08:	f002 ff3a 	bl	801ba80 <iprintf>
 8018c0c:	e7f6      	b.n	8018bfc <udp_remove+0x18>
        pcb2->next = pcb->next;
 8018c0e:	68cb      	ldr	r3, [r1, #12]
 8018c10:	60d3      	str	r3, [r2, #12]
        break;
 8018c12:	e7f0      	b.n	8018bf6 <udp_remove+0x12>
 8018c14:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018c16:	2a00      	cmp	r2, #0
 8018c18:	d0ed      	beq.n	8018bf6 <udp_remove+0x12>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8018c1a:	68d3      	ldr	r3, [r2, #12]
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d0f9      	beq.n	8018c14 <udp_remove+0x30>
 8018c20:	428b      	cmp	r3, r1
 8018c22:	d0f4      	beq.n	8018c0e <udp_remove+0x2a>
 8018c24:	461a      	mov	r2, r3
 8018c26:	e7f6      	b.n	8018c16 <udp_remove+0x32>
 8018c28:	20007234 	.word	0x20007234
 8018c2c:	0801f9e8 	.word	0x0801f9e8
 8018c30:	0801fcc0 	.word	0x0801fcc0
 8018c34:	0801cca4 	.word	0x0801cca4

08018c38 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018c38:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8018c3a:	2000      	movs	r0, #0
 8018c3c:	f7fa fc0e 	bl	801345c <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8018c40:	4604      	mov	r4, r0
 8018c42:	b128      	cbz	r0, 8018c50 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8018c44:	2220      	movs	r2, #32
 8018c46:	2100      	movs	r1, #0
 8018c48:	f002 ff12 	bl	801ba70 <memset>
    pcb->ttl = UDP_TTL;
 8018c4c:	23ff      	movs	r3, #255	; 0xff
 8018c4e:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 8018c50:	4620      	mov	r0, r4
 8018c52:	bd10      	pop	{r4, pc}

08018c54 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8018c54:	b1b8      	cbz	r0, 8018c86 <udp_netif_ip_addr_changed+0x32>
 8018c56:	4602      	mov	r2, r0
 8018c58:	6803      	ldr	r3, [r0, #0]
 8018c5a:	b1a3      	cbz	r3, 8018c86 <udp_netif_ip_addr_changed+0x32>
 8018c5c:	b199      	cbz	r1, 8018c86 <udp_netif_ip_addr_changed+0x32>
 8018c5e:	680b      	ldr	r3, [r1, #0]
 8018c60:	b18b      	cbz	r3, 8018c86 <udp_netif_ip_addr_changed+0x32>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018c62:	4b09      	ldr	r3, [pc, #36]	; (8018c88 <udp_netif_ip_addr_changed+0x34>)
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	b16b      	cbz	r3, 8018c84 <udp_netif_ip_addr_changed+0x30>
{
 8018c68:	b410      	push	{r4}
 8018c6a:	e001      	b.n	8018c70 <udp_netif_ip_addr_changed+0x1c>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018c6c:	68db      	ldr	r3, [r3, #12]
 8018c6e:	b133      	cbz	r3, 8018c7e <udp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018c70:	681c      	ldr	r4, [r3, #0]
 8018c72:	6810      	ldr	r0, [r2, #0]
 8018c74:	4284      	cmp	r4, r0
 8018c76:	d1f9      	bne.n	8018c6c <udp_netif_ip_addr_changed+0x18>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018c78:	6808      	ldr	r0, [r1, #0]
 8018c7a:	6018      	str	r0, [r3, #0]
 8018c7c:	e7f6      	b.n	8018c6c <udp_netif_ip_addr_changed+0x18>
      }
    }
  }
}
 8018c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c82:	4770      	bx	lr
 8018c84:	4770      	bx	lr
 8018c86:	4770      	bx	lr
 8018c88:	20007234 	.word	0x20007234

08018c8c <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8018c8c:	7943      	ldrb	r3, [r0, #5]
 8018c8e:	428b      	cmp	r3, r1
 8018c90:	d003      	beq.n	8018c9a <dhcp_set_state+0xe>
    dhcp->state = new_state;
 8018c92:	7141      	strb	r1, [r0, #5]
    dhcp->tries = 0;
 8018c94:	2300      	movs	r3, #0
 8018c96:	7183      	strb	r3, [r0, #6]
    dhcp->request_timeout = 0;
 8018c98:	8103      	strh	r3, [r0, #8]
  }
}
 8018c9a:	4770      	bx	lr

08018c9c <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8018c9c:	b570      	push	{r4, r5, r6, lr}
 8018c9e:	4604      	mov	r4, r0
 8018ca0:	460d      	mov	r5, r1
 8018ca2:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8018ca4:	1c83      	adds	r3, r0, #2
 8018ca6:	2b44      	cmp	r3, #68	; 0x44
 8018ca8:	d807      	bhi.n	8018cba <dhcp_option_short+0x1e>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8018caa:	1c63      	adds	r3, r4, #1
 8018cac:	b29b      	uxth	r3, r3
 8018cae:	0a32      	lsrs	r2, r6, #8
 8018cb0:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8018cb2:	1ca0      	adds	r0, r4, #2
 8018cb4:	54ee      	strb	r6, [r5, r3]
  return options_out_len;
}
 8018cb6:	b280      	uxth	r0, r0
 8018cb8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8018cba:	4b04      	ldr	r3, [pc, #16]	; (8018ccc <dhcp_option_short+0x30>)
 8018cbc:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8018cc0:	4903      	ldr	r1, [pc, #12]	; (8018cd0 <dhcp_option_short+0x34>)
 8018cc2:	4804      	ldr	r0, [pc, #16]	; (8018cd4 <dhcp_option_short+0x38>)
 8018cc4:	f002 fedc 	bl	801ba80 <iprintf>
 8018cc8:	e7ef      	b.n	8018caa <dhcp_option_short+0xe>
 8018cca:	bf00      	nop
 8018ccc:	0801fcd8 	.word	0x0801fcd8
 8018cd0:	0801fd10 	.word	0x0801fd10
 8018cd4:	0801cca4 	.word	0x0801cca4

08018cd8 <dhcp_option>:
{
 8018cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cda:	4604      	mov	r4, r0
 8018cdc:	460d      	mov	r5, r1
 8018cde:	4617      	mov	r7, r2
 8018ce0:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8018ce2:	4403      	add	r3, r0
 8018ce4:	3302      	adds	r3, #2
 8018ce6:	2b44      	cmp	r3, #68	; 0x44
 8018ce8:	d806      	bhi.n	8018cf8 <dhcp_option+0x20>
  options[options_out_len++] = option_type;
 8018cea:	1c63      	adds	r3, r4, #1
 8018cec:	b29b      	uxth	r3, r3
 8018cee:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 8018cf0:	1ca0      	adds	r0, r4, #2
 8018cf2:	54ee      	strb	r6, [r5, r3]
}
 8018cf4:	b280      	uxth	r0, r0
 8018cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8018cf8:	4b03      	ldr	r3, [pc, #12]	; (8018d08 <dhcp_option+0x30>)
 8018cfa:	f240 529a 	movw	r2, #1434	; 0x59a
 8018cfe:	4903      	ldr	r1, [pc, #12]	; (8018d0c <dhcp_option+0x34>)
 8018d00:	4803      	ldr	r0, [pc, #12]	; (8018d10 <dhcp_option+0x38>)
 8018d02:	f002 febd 	bl	801ba80 <iprintf>
 8018d06:	e7f0      	b.n	8018cea <dhcp_option+0x12>
 8018d08:	0801fcd8 	.word	0x0801fcd8
 8018d0c:	0801fd4c 	.word	0x0801fd4c
 8018d10:	0801cca4 	.word	0x0801cca4

08018d14 <dhcp_option_byte>:
{
 8018d14:	b570      	push	{r4, r5, r6, lr}
 8018d16:	4604      	mov	r4, r0
 8018d18:	460d      	mov	r5, r1
 8018d1a:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8018d1c:	2843      	cmp	r0, #67	; 0x43
 8018d1e:	d803      	bhi.n	8018d28 <dhcp_option_byte+0x14>
  options[options_out_len++] = value;
 8018d20:	1c60      	adds	r0, r4, #1
 8018d22:	552e      	strb	r6, [r5, r4]
}
 8018d24:	b280      	uxth	r0, r0
 8018d26:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8018d28:	4b03      	ldr	r3, [pc, #12]	; (8018d38 <dhcp_option_byte+0x24>)
 8018d2a:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8018d2e:	4903      	ldr	r1, [pc, #12]	; (8018d3c <dhcp_option_byte+0x28>)
 8018d30:	4803      	ldr	r0, [pc, #12]	; (8018d40 <dhcp_option_byte+0x2c>)
 8018d32:	f002 fea5 	bl	801ba80 <iprintf>
 8018d36:	e7f3      	b.n	8018d20 <dhcp_option_byte+0xc>
 8018d38:	0801fcd8 	.word	0x0801fcd8
 8018d3c:	0801fd90 	.word	0x0801fd90
 8018d40:	0801cca4 	.word	0x0801cca4

08018d44 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8018d44:	b570      	push	{r4, r5, r6, lr}
 8018d46:	4604      	mov	r4, r0
 8018d48:	460d      	mov	r5, r1
 8018d4a:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8018d4c:	1d03      	adds	r3, r0, #4
 8018d4e:	2b44      	cmp	r3, #68	; 0x44
 8018d50:	d811      	bhi.n	8018d76 <dhcp_option_long+0x32>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8018d52:	1c63      	adds	r3, r4, #1
 8018d54:	b29b      	uxth	r3, r3
 8018d56:	0e32      	lsrs	r2, r6, #24
 8018d58:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8018d5a:	1ca2      	adds	r2, r4, #2
 8018d5c:	b292      	uxth	r2, r2
 8018d5e:	f3c6 4107 	ubfx	r1, r6, #16, #8
 8018d62:	54e9      	strb	r1, [r5, r3]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8018d64:	1ce3      	adds	r3, r4, #3
 8018d66:	b29b      	uxth	r3, r3
 8018d68:	f3c6 2107 	ubfx	r1, r6, #8, #8
 8018d6c:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8018d6e:	1d20      	adds	r0, r4, #4
 8018d70:	54ee      	strb	r6, [r5, r3]
  return options_out_len;
}
 8018d72:	b280      	uxth	r0, r0
 8018d74:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8018d76:	4b04      	ldr	r3, [pc, #16]	; (8018d88 <dhcp_option_long+0x44>)
 8018d78:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8018d7c:	4903      	ldr	r1, [pc, #12]	; (8018d8c <dhcp_option_long+0x48>)
 8018d7e:	4804      	ldr	r0, [pc, #16]	; (8018d90 <dhcp_option_long+0x4c>)
 8018d80:	f002 fe7e 	bl	801ba80 <iprintf>
 8018d84:	e7e5      	b.n	8018d52 <dhcp_option_long+0xe>
 8018d86:	bf00      	nop
 8018d88:	0801fcd8 	.word	0x0801fcd8
 8018d8c:	0801fdc8 	.word	0x0801fdc8
 8018d90:	0801cca4 	.word	0x0801cca4

08018d94 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8018d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8018d98:	4680      	mov	r8, r0
 8018d9a:	2800      	cmp	r0, #0
 8018d9c:	d04b      	beq.n	8018e36 <dhcp_create_msg+0xa2>
 8018d9e:	4689      	mov	r9, r1
 8018da0:	4615      	mov	r5, r2
 8018da2:	461e      	mov	r6, r3
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8018da4:	2900      	cmp	r1, #0
 8018da6:	d04f      	beq.n	8018e48 <dhcp_create_msg+0xb4>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8018da8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018dac:	f44f 719a 	mov.w	r1, #308	; 0x134
 8018db0:	2036      	movs	r0, #54	; 0x36
 8018db2:	f7fa fe93 	bl	8013adc <pbuf_alloc>
  if (p_out == NULL) {
 8018db6:	4607      	mov	r7, r0
 8018db8:	2800      	cmp	r0, #0
 8018dba:	d079      	beq.n	8018eb0 <dhcp_create_msg+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8018dbc:	8943      	ldrh	r3, [r0, #10]
 8018dbe:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8018dc2:	d34a      	bcc.n	8018e5a <dhcp_create_msg+0xc6>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8018dc4:	2d03      	cmp	r5, #3
 8018dc6:	d050      	beq.n	8018e6a <dhcp_create_msg+0xd6>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8018dc8:	f899 3006 	ldrb.w	r3, [r9, #6]
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d051      	beq.n	8018e74 <dhcp_create_msg+0xe0>
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8018dd0:	4b39      	ldr	r3, [pc, #228]	; (8018eb8 <dhcp_create_msg+0x124>)
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	f8c9 3000 	str.w	r3, [r9]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8018dd8:	687c      	ldr	r4, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8018dda:	f44f 729a 	mov.w	r2, #308	; 0x134
 8018dde:	2100      	movs	r1, #0
 8018de0:	4620      	mov	r0, r4
 8018de2:	f002 fe45 	bl	801ba70 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8018de6:	2301      	movs	r3, #1
 8018de8:	7023      	strb	r3, [r4, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8018dea:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 8018dec:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
 8018df0:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8018df2:	f8d9 0000 	ldr.w	r0, [r9]
 8018df6:	f7f9 fdbc 	bl	8012972 <lwip_htonl>
 8018dfa:	6060      	str	r0, [r4, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8018dfc:	2d08      	cmp	r5, #8
 8018dfe:	d00b      	beq.n	8018e18 <dhcp_create_msg+0x84>
 8018e00:	2d04      	cmp	r5, #4
 8018e02:	d009      	beq.n	8018e18 <dhcp_create_msg+0x84>
 8018e04:	2d07      	cmp	r5, #7
 8018e06:	d007      	beq.n	8018e18 <dhcp_create_msg+0x84>
 8018e08:	2d03      	cmp	r5, #3
 8018e0a:	d108      	bne.n	8018e1e <dhcp_create_msg+0x8a>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8018e0c:	f899 3005 	ldrb.w	r3, [r9, #5]
 8018e10:	3b04      	subs	r3, #4
 8018e12:	b2db      	uxtb	r3, r3
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8018e14:	2b01      	cmp	r3, #1
 8018e16:	d802      	bhi.n	8018e1e <dhcp_create_msg+0x8a>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8018e18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018e1c:	60e3      	str	r3, [r4, #12]
{
 8018e1e:	2000      	movs	r0, #0
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018e20:	2805      	cmp	r0, #5
 8018e22:	d82c      	bhi.n	8018e7e <dhcp_create_msg+0xea>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8018e24:	eb08 0300 	add.w	r3, r8, r0
 8018e28:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8018e2c:	1821      	adds	r1, r4, r0
 8018e2e:	770b      	strb	r3, [r1, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018e30:	3001      	adds	r0, #1
 8018e32:	b280      	uxth	r0, r0
 8018e34:	e7f4      	b.n	8018e20 <dhcp_create_msg+0x8c>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8018e36:	4b21      	ldr	r3, [pc, #132]	; (8018ebc <dhcp_create_msg+0x128>)
 8018e38:	f240 7269 	movw	r2, #1897	; 0x769
 8018e3c:	4920      	ldr	r1, [pc, #128]	; (8018ec0 <dhcp_create_msg+0x12c>)
 8018e3e:	4821      	ldr	r0, [pc, #132]	; (8018ec4 <dhcp_create_msg+0x130>)
 8018e40:	f002 fe1e 	bl	801ba80 <iprintf>
 8018e44:	4647      	mov	r7, r8
 8018e46:	e033      	b.n	8018eb0 <dhcp_create_msg+0x11c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8018e48:	4b1c      	ldr	r3, [pc, #112]	; (8018ebc <dhcp_create_msg+0x128>)
 8018e4a:	f240 726a 	movw	r2, #1898	; 0x76a
 8018e4e:	491e      	ldr	r1, [pc, #120]	; (8018ec8 <dhcp_create_msg+0x134>)
 8018e50:	481c      	ldr	r0, [pc, #112]	; (8018ec4 <dhcp_create_msg+0x130>)
 8018e52:	f002 fe15 	bl	801ba80 <iprintf>
 8018e56:	464f      	mov	r7, r9
 8018e58:	e02a      	b.n	8018eb0 <dhcp_create_msg+0x11c>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8018e5a:	4b18      	ldr	r3, [pc, #96]	; (8018ebc <dhcp_create_msg+0x128>)
 8018e5c:	f240 7271 	movw	r2, #1905	; 0x771
 8018e60:	491a      	ldr	r1, [pc, #104]	; (8018ecc <dhcp_create_msg+0x138>)
 8018e62:	4818      	ldr	r0, [pc, #96]	; (8018ec4 <dhcp_create_msg+0x130>)
 8018e64:	f002 fe0c 	bl	801ba80 <iprintf>
 8018e68:	e7ac      	b.n	8018dc4 <dhcp_create_msg+0x30>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8018e6a:	f899 3005 	ldrb.w	r3, [r9, #5]
 8018e6e:	2b03      	cmp	r3, #3
 8018e70:	d1b2      	bne.n	8018dd8 <dhcp_create_msg+0x44>
 8018e72:	e7a9      	b.n	8018dc8 <dhcp_create_msg+0x34>
      xid = LWIP_RAND();
 8018e74:	f002 fe92 	bl	801bb9c <rand>
 8018e78:	4b0f      	ldr	r3, [pc, #60]	; (8018eb8 <dhcp_create_msg+0x124>)
 8018e7a:	6018      	str	r0, [r3, #0]
 8018e7c:	e7a8      	b.n	8018dd0 <dhcp_create_msg+0x3c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8018e7e:	2363      	movs	r3, #99	; 0x63
 8018e80:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 8018e84:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8018e88:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
 8018e8c:	2253      	movs	r2, #83	; 0x53
 8018e8e:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
 8018e92:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8018e96:	34f0      	adds	r4, #240	; 0xf0
 8018e98:	2301      	movs	r3, #1
 8018e9a:	2235      	movs	r2, #53	; 0x35
 8018e9c:	4621      	mov	r1, r4
 8018e9e:	2000      	movs	r0, #0
 8018ea0:	f7ff ff1a 	bl	8018cd8 <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8018ea4:	462a      	mov	r2, r5
 8018ea6:	4621      	mov	r1, r4
 8018ea8:	f7ff ff34 	bl	8018d14 <dhcp_option_byte>
  if (options_out_len) {
 8018eac:	b106      	cbz	r6, 8018eb0 <dhcp_create_msg+0x11c>
    *options_out_len = options_out_len_loc;
 8018eae:	8030      	strh	r0, [r6, #0]
  }
  return p_out;
}
 8018eb0:	4638      	mov	r0, r7
 8018eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018eb6:	bf00      	nop
 8018eb8:	20000a30 	.word	0x20000a30
 8018ebc:	0801fcd8 	.word	0x0801fcd8
 8018ec0:	0801fe04 	.word	0x0801fe04
 8018ec4:	0801cca4 	.word	0x0801cca4
 8018ec8:	0801fe24 	.word	0x0801fe24
 8018ecc:	0801fe44 	.word	0x0801fe44

08018ed0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8018ed0:	b538      	push	{r3, r4, r5, lr}
 8018ed2:	4604      	mov	r4, r0
 8018ed4:	4610      	mov	r0, r2
  options[options_out_len++] = DHCP_OPTION_END;
 8018ed6:	1c63      	adds	r3, r4, #1
 8018ed8:	b29b      	uxth	r3, r3
 8018eda:	22ff      	movs	r2, #255	; 0xff
 8018edc:	550a      	strb	r2, [r1, r4]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8018ede:	e005      	b.n	8018eec <dhcp_option_trailer+0x1c>
 8018ee0:	2b43      	cmp	r3, #67	; 0x43
 8018ee2:	d808      	bhi.n	8018ef6 <dhcp_option_trailer+0x26>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8018ee4:	1c5c      	adds	r4, r3, #1
 8018ee6:	2500      	movs	r5, #0
 8018ee8:	54cd      	strb	r5, [r1, r3]
 8018eea:	b2a3      	uxth	r3, r4
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8018eec:	2b43      	cmp	r3, #67	; 0x43
 8018eee:	d9f7      	bls.n	8018ee0 <dhcp_option_trailer+0x10>
 8018ef0:	f013 0f03 	tst.w	r3, #3
 8018ef4:	d1f4      	bne.n	8018ee0 <dhcp_option_trailer+0x10>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8018ef6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018efa:	b289      	uxth	r1, r1
 8018efc:	f7fa fe9c 	bl	8013c38 <pbuf_realloc>
}
 8018f00:	bd38      	pop	{r3, r4, r5, pc}
	...

08018f04 <dhcp_rebind>:
{
 8018f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f08:	b084      	sub	sp, #16
 8018f0a:	4680      	mov	r8, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018f0c:	6a45      	ldr	r5, [r0, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8018f0e:	2104      	movs	r1, #4
 8018f10:	4628      	mov	r0, r5
 8018f12:	f7ff febb 	bl	8018c8c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8018f16:	f10d 030e 	add.w	r3, sp, #14
 8018f1a:	2203      	movs	r2, #3
 8018f1c:	4629      	mov	r1, r5
 8018f1e:	4640      	mov	r0, r8
 8018f20:	f7ff ff38 	bl	8018d94 <dhcp_create_msg>
  if (p_out != NULL) {
 8018f24:	2800      	cmp	r0, #0
 8018f26:	d04a      	beq.n	8018fbe <dhcp_rebind+0xba>
 8018f28:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018f2a:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018f2c:	36f0      	adds	r6, #240	; 0xf0
 8018f2e:	2302      	movs	r3, #2
 8018f30:	2239      	movs	r2, #57	; 0x39
 8018f32:	4631      	mov	r1, r6
 8018f34:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8018f38:	f7ff fece 	bl	8018cd8 <dhcp_option>
 8018f3c:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018f40:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 8018f44:	4631      	mov	r1, r6
 8018f46:	f7ff fea9 	bl	8018c9c <dhcp_option_short>
 8018f4a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018f4e:	2304      	movs	r3, #4
 8018f50:	2237      	movs	r2, #55	; 0x37
 8018f52:	4631      	mov	r1, r6
 8018f54:	f7ff fec0 	bl	8018cd8 <dhcp_option>
 8018f58:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018f5c:	2400      	movs	r4, #0
 8018f5e:	e00a      	b.n	8018f76 <dhcp_rebind+0x72>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018f60:	4b20      	ldr	r3, [pc, #128]	; (8018fe4 <dhcp_rebind+0xe0>)
 8018f62:	5d1a      	ldrb	r2, [r3, r4]
 8018f64:	4631      	mov	r1, r6
 8018f66:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8018f6a:	f7ff fed3 	bl	8018d14 <dhcp_option_byte>
 8018f6e:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018f72:	3401      	adds	r4, #1
 8018f74:	b2e4      	uxtb	r4, r4
 8018f76:	2c03      	cmp	r4, #3
 8018f78:	d9f2      	bls.n	8018f60 <dhcp_rebind+0x5c>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018f7a:	463a      	mov	r2, r7
 8018f7c:	4631      	mov	r1, r6
 8018f7e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8018f82:	f7ff ffa5 	bl	8018ed0 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8018f86:	f8cd 8000 	str.w	r8, [sp]
 8018f8a:	2343      	movs	r3, #67	; 0x43
 8018f8c:	4a16      	ldr	r2, [pc, #88]	; (8018fe8 <dhcp_rebind+0xe4>)
 8018f8e:	4639      	mov	r1, r7
 8018f90:	4816      	ldr	r0, [pc, #88]	; (8018fec <dhcp_rebind+0xe8>)
 8018f92:	6800      	ldr	r0, [r0, #0]
 8018f94:	f7ff fd38 	bl	8018a08 <udp_sendto_if>
 8018f98:	4604      	mov	r4, r0
    pbuf_free(p_out);
 8018f9a:	4638      	mov	r0, r7
 8018f9c:	f7fa fd3c 	bl	8013a18 <pbuf_free>
  if (dhcp->tries < 255) {
 8018fa0:	79ab      	ldrb	r3, [r5, #6]
 8018fa2:	2bff      	cmp	r3, #255	; 0xff
 8018fa4:	d001      	beq.n	8018faa <dhcp_rebind+0xa6>
    dhcp->tries++;
 8018fa6:	3301      	adds	r3, #1
 8018fa8:	71ab      	strb	r3, [r5, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8018faa:	79ab      	ldrb	r3, [r5, #6]
 8018fac:	2b09      	cmp	r3, #9
 8018fae:	d809      	bhi.n	8018fc4 <dhcp_rebind+0xc0>
 8018fb0:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8018fb4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8018fb8:	00db      	lsls	r3, r3, #3
 8018fba:	b29b      	uxth	r3, r3
 8018fbc:	e004      	b.n	8018fc8 <dhcp_rebind+0xc4>
    result = ERR_MEM;
 8018fbe:	f04f 34ff 	mov.w	r4, #4294967295
 8018fc2:	e7ed      	b.n	8018fa0 <dhcp_rebind+0x9c>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8018fc4:	f242 7310 	movw	r3, #10000	; 0x2710
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018fc8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8018fcc:	4a08      	ldr	r2, [pc, #32]	; (8018ff0 <dhcp_rebind+0xec>)
 8018fce:	fb82 1203 	smull	r1, r2, r2, r3
 8018fd2:	17db      	asrs	r3, r3, #31
 8018fd4:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8018fd8:	812b      	strh	r3, [r5, #8]
}
 8018fda:	4620      	mov	r0, r4
 8018fdc:	b004      	add	sp, #16
 8018fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fe2:	bf00      	nop
 8018fe4:	0802003c 	.word	0x0802003c
 8018fe8:	08020360 	.word	0x08020360
 8018fec:	20000a28 	.word	0x20000a28
 8018ff0:	10624dd3 	.word	0x10624dd3

08018ff4 <dhcp_t2_timeout>:
{
 8018ff4:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018ff6:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018ff8:	7963      	ldrb	r3, [r4, #5]
 8018ffa:	2b01      	cmp	r3, #1
 8018ffc:	d005      	beq.n	801900a <dhcp_t2_timeout+0x16>
 8018ffe:	2b0a      	cmp	r3, #10
 8019000:	d003      	beq.n	801900a <dhcp_t2_timeout+0x16>
 8019002:	2b05      	cmp	r3, #5
 8019004:	d001      	beq.n	801900a <dhcp_t2_timeout+0x16>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8019006:	2b04      	cmp	r3, #4
 8019008:	d10b      	bne.n	8019022 <dhcp_t2_timeout+0x2e>
    dhcp_rebind(netif);
 801900a:	f7ff ff7b 	bl	8018f04 <dhcp_rebind>
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801900e:	8aa3      	ldrh	r3, [r4, #20]
 8019010:	8a62      	ldrh	r2, [r4, #18]
 8019012:	1a9b      	subs	r3, r3, r2
 8019014:	2b01      	cmp	r3, #1
 8019016:	dd04      	ble.n	8019022 <dhcp_t2_timeout+0x2e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8019018:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 801901c:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8019020:	8223      	strh	r3, [r4, #16]
}
 8019022:	bd10      	pop	{r4, pc}

08019024 <dhcp_reboot>:
{
 8019024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019028:	b084      	sub	sp, #16
 801902a:	4680      	mov	r8, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801902c:	6a45      	ldr	r5, [r0, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801902e:	2103      	movs	r1, #3
 8019030:	4628      	mov	r0, r5
 8019032:	f7ff fe2b 	bl	8018c8c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019036:	f10d 030e 	add.w	r3, sp, #14
 801903a:	2203      	movs	r2, #3
 801903c:	4629      	mov	r1, r5
 801903e:	4640      	mov	r0, r8
 8019040:	f7ff fea8 	bl	8018d94 <dhcp_create_msg>
  if (p_out != NULL) {
 8019044:	2800      	cmp	r0, #0
 8019046:	d05c      	beq.n	8019102 <dhcp_reboot+0xde>
 8019048:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801904a:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801904c:	36f0      	adds	r6, #240	; 0xf0
 801904e:	2302      	movs	r3, #2
 8019050:	2239      	movs	r2, #57	; 0x39
 8019052:	4631      	mov	r1, r6
 8019054:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8019058:	f7ff fe3e 	bl	8018cd8 <dhcp_option>
 801905c:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8019060:	f44f 7210 	mov.w	r2, #576	; 0x240
 8019064:	4631      	mov	r1, r6
 8019066:	f7ff fe19 	bl	8018c9c <dhcp_option_short>
 801906a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801906e:	2304      	movs	r3, #4
 8019070:	2232      	movs	r2, #50	; 0x32
 8019072:	4631      	mov	r1, r6
 8019074:	f7ff fe30 	bl	8018cd8 <dhcp_option>
 8019078:	4604      	mov	r4, r0
 801907a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801907e:	69e8      	ldr	r0, [r5, #28]
 8019080:	f7f9 fc77 	bl	8012972 <lwip_htonl>
 8019084:	4602      	mov	r2, r0
 8019086:	4631      	mov	r1, r6
 8019088:	4620      	mov	r0, r4
 801908a:	f7ff fe5b 	bl	8018d44 <dhcp_option_long>
 801908e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019092:	2304      	movs	r3, #4
 8019094:	2237      	movs	r2, #55	; 0x37
 8019096:	4631      	mov	r1, r6
 8019098:	f7ff fe1e 	bl	8018cd8 <dhcp_option>
 801909c:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80190a0:	2400      	movs	r4, #0
 80190a2:	e00a      	b.n	80190ba <dhcp_reboot+0x96>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80190a4:	4b20      	ldr	r3, [pc, #128]	; (8019128 <dhcp_reboot+0x104>)
 80190a6:	5d1a      	ldrb	r2, [r3, r4]
 80190a8:	4631      	mov	r1, r6
 80190aa:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80190ae:	f7ff fe31 	bl	8018d14 <dhcp_option_byte>
 80190b2:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80190b6:	3401      	adds	r4, #1
 80190b8:	b2e4      	uxtb	r4, r4
 80190ba:	2c03      	cmp	r4, #3
 80190bc:	d9f2      	bls.n	80190a4 <dhcp_reboot+0x80>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80190be:	463a      	mov	r2, r7
 80190c0:	4631      	mov	r1, r6
 80190c2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80190c6:	f7ff ff03 	bl	8018ed0 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80190ca:	f8cd 8000 	str.w	r8, [sp]
 80190ce:	2343      	movs	r3, #67	; 0x43
 80190d0:	4a16      	ldr	r2, [pc, #88]	; (801912c <dhcp_reboot+0x108>)
 80190d2:	4639      	mov	r1, r7
 80190d4:	4816      	ldr	r0, [pc, #88]	; (8019130 <dhcp_reboot+0x10c>)
 80190d6:	6800      	ldr	r0, [r0, #0]
 80190d8:	f7ff fc96 	bl	8018a08 <udp_sendto_if>
 80190dc:	4604      	mov	r4, r0
    pbuf_free(p_out);
 80190de:	4638      	mov	r0, r7
 80190e0:	f7fa fc9a 	bl	8013a18 <pbuf_free>
  if (dhcp->tries < 255) {
 80190e4:	79ab      	ldrb	r3, [r5, #6]
 80190e6:	2bff      	cmp	r3, #255	; 0xff
 80190e8:	d001      	beq.n	80190ee <dhcp_reboot+0xca>
    dhcp->tries++;
 80190ea:	3301      	adds	r3, #1
 80190ec:	71ab      	strb	r3, [r5, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80190ee:	79ab      	ldrb	r3, [r5, #6]
 80190f0:	2b09      	cmp	r3, #9
 80190f2:	d809      	bhi.n	8019108 <dhcp_reboot+0xe4>
 80190f4:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 80190f8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80190fc:	00db      	lsls	r3, r3, #3
 80190fe:	b29b      	uxth	r3, r3
 8019100:	e004      	b.n	801910c <dhcp_reboot+0xe8>
    result = ERR_MEM;
 8019102:	f04f 34ff 	mov.w	r4, #4294967295
 8019106:	e7ed      	b.n	80190e4 <dhcp_reboot+0xc0>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8019108:	f242 7310 	movw	r3, #10000	; 0x2710
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801910c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8019110:	4a08      	ldr	r2, [pc, #32]	; (8019134 <dhcp_reboot+0x110>)
 8019112:	fb82 1203 	smull	r1, r2, r2, r3
 8019116:	17db      	asrs	r3, r3, #31
 8019118:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 801911c:	812b      	strh	r3, [r5, #8]
}
 801911e:	4620      	mov	r0, r4
 8019120:	b004      	add	sp, #16
 8019122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019126:	bf00      	nop
 8019128:	0802003c 	.word	0x0802003c
 801912c:	08020360 	.word	0x08020360
 8019130:	20000a28 	.word	0x20000a28
 8019134:	10624dd3 	.word	0x10624dd3

08019138 <dhcp_select>:
{
 8019138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801913c:	b084      	sub	sp, #16
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801913e:	2800      	cmp	r0, #0
 8019140:	d051      	beq.n	80191e6 <dhcp_select+0xae>
 8019142:	4680      	mov	r8, r0
  dhcp = netif_dhcp_data(netif);
 8019144:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8019146:	2c00      	cmp	r4, #0
 8019148:	d057      	beq.n	80191fa <dhcp_select+0xc2>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801914a:	2101      	movs	r1, #1
 801914c:	4620      	mov	r0, r4
 801914e:	f7ff fd9d 	bl	8018c8c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019152:	f10d 030e 	add.w	r3, sp, #14
 8019156:	2203      	movs	r2, #3
 8019158:	4621      	mov	r1, r4
 801915a:	4640      	mov	r0, r8
 801915c:	f7ff fe1a 	bl	8018d94 <dhcp_create_msg>
  if (p_out != NULL) {
 8019160:	4607      	mov	r7, r0
 8019162:	2800      	cmp	r0, #0
 8019164:	f000 8092 	beq.w	801928c <dhcp_select+0x154>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019168:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801916a:	36f0      	adds	r6, #240	; 0xf0
 801916c:	2302      	movs	r3, #2
 801916e:	2239      	movs	r2, #57	; 0x39
 8019170:	4631      	mov	r1, r6
 8019172:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8019176:	f7ff fdaf 	bl	8018cd8 <dhcp_option>
 801917a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801917e:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 8019182:	4631      	mov	r1, r6
 8019184:	f7ff fd8a 	bl	8018c9c <dhcp_option_short>
 8019188:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801918c:	2304      	movs	r3, #4
 801918e:	2232      	movs	r2, #50	; 0x32
 8019190:	4631      	mov	r1, r6
 8019192:	f7ff fda1 	bl	8018cd8 <dhcp_option>
 8019196:	4605      	mov	r5, r0
 8019198:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801919c:	69e0      	ldr	r0, [r4, #28]
 801919e:	f7f9 fbe8 	bl	8012972 <lwip_htonl>
 80191a2:	4602      	mov	r2, r0
 80191a4:	4631      	mov	r1, r6
 80191a6:	4628      	mov	r0, r5
 80191a8:	f7ff fdcc 	bl	8018d44 <dhcp_option_long>
 80191ac:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80191b0:	2304      	movs	r3, #4
 80191b2:	2236      	movs	r2, #54	; 0x36
 80191b4:	4631      	mov	r1, r6
 80191b6:	f7ff fd8f 	bl	8018cd8 <dhcp_option>
 80191ba:	4605      	mov	r5, r0
 80191bc:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80191c0:	69a0      	ldr	r0, [r4, #24]
 80191c2:	f7f9 fbd6 	bl	8012972 <lwip_htonl>
 80191c6:	4602      	mov	r2, r0
 80191c8:	4631      	mov	r1, r6
 80191ca:	4628      	mov	r0, r5
 80191cc:	f7ff fdba 	bl	8018d44 <dhcp_option_long>
 80191d0:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80191d4:	2304      	movs	r3, #4
 80191d6:	2237      	movs	r2, #55	; 0x37
 80191d8:	4631      	mov	r1, r6
 80191da:	f7ff fd7d 	bl	8018cd8 <dhcp_option>
 80191de:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80191e2:	2500      	movs	r5, #0
 80191e4:	e01e      	b.n	8019224 <dhcp_select+0xec>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80191e6:	4b2c      	ldr	r3, [pc, #176]	; (8019298 <dhcp_select+0x160>)
 80191e8:	f240 1277 	movw	r2, #375	; 0x177
 80191ec:	492b      	ldr	r1, [pc, #172]	; (801929c <dhcp_select+0x164>)
 80191ee:	482c      	ldr	r0, [pc, #176]	; (80192a0 <dhcp_select+0x168>)
 80191f0:	f002 fc46 	bl	801ba80 <iprintf>
 80191f4:	f06f 050f 	mvn.w	r5, #15
 80191f8:	e044      	b.n	8019284 <dhcp_select+0x14c>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80191fa:	4b27      	ldr	r3, [pc, #156]	; (8019298 <dhcp_select+0x160>)
 80191fc:	f240 1279 	movw	r2, #377	; 0x179
 8019200:	4928      	ldr	r1, [pc, #160]	; (80192a4 <dhcp_select+0x16c>)
 8019202:	4827      	ldr	r0, [pc, #156]	; (80192a0 <dhcp_select+0x168>)
 8019204:	f002 fc3c 	bl	801ba80 <iprintf>
 8019208:	f06f 0505 	mvn.w	r5, #5
 801920c:	e03a      	b.n	8019284 <dhcp_select+0x14c>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801920e:	4b26      	ldr	r3, [pc, #152]	; (80192a8 <dhcp_select+0x170>)
 8019210:	5d5a      	ldrb	r2, [r3, r5]
 8019212:	4631      	mov	r1, r6
 8019214:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8019218:	f7ff fd7c 	bl	8018d14 <dhcp_option_byte>
 801921c:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019220:	3501      	adds	r5, #1
 8019222:	b2ed      	uxtb	r5, r5
 8019224:	2d03      	cmp	r5, #3
 8019226:	d9f2      	bls.n	801920e <dhcp_select+0xd6>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019228:	463a      	mov	r2, r7
 801922a:	4631      	mov	r1, r6
 801922c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8019230:	f7ff fe4e 	bl	8018ed0 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8019234:	4b1d      	ldr	r3, [pc, #116]	; (80192ac <dhcp_select+0x174>)
 8019236:	9301      	str	r3, [sp, #4]
 8019238:	f8cd 8000 	str.w	r8, [sp]
 801923c:	2343      	movs	r3, #67	; 0x43
 801923e:	4a1c      	ldr	r2, [pc, #112]	; (80192b0 <dhcp_select+0x178>)
 8019240:	4639      	mov	r1, r7
 8019242:	481c      	ldr	r0, [pc, #112]	; (80192b4 <dhcp_select+0x17c>)
 8019244:	6800      	ldr	r0, [r0, #0]
 8019246:	f7ff fb29 	bl	801889c <udp_sendto_if_src>
 801924a:	4605      	mov	r5, r0
    pbuf_free(p_out);
 801924c:	4638      	mov	r0, r7
 801924e:	f7fa fbe3 	bl	8013a18 <pbuf_free>
  if (dhcp->tries < 255) {
 8019252:	79a3      	ldrb	r3, [r4, #6]
 8019254:	2bff      	cmp	r3, #255	; 0xff
 8019256:	d001      	beq.n	801925c <dhcp_select+0x124>
    dhcp->tries++;
 8019258:	3301      	adds	r3, #1
 801925a:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801925c:	79a2      	ldrb	r2, [r4, #6]
 801925e:	2a05      	cmp	r2, #5
 8019260:	d817      	bhi.n	8019292 <dhcp_select+0x15a>
 8019262:	2301      	movs	r3, #1
 8019264:	4093      	lsls	r3, r2
 8019266:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 801926a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801926e:	00db      	lsls	r3, r3, #3
 8019270:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019272:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8019276:	4a10      	ldr	r2, [pc, #64]	; (80192b8 <dhcp_select+0x180>)
 8019278:	fb82 1203 	smull	r1, r2, r2, r3
 801927c:	17db      	asrs	r3, r3, #31
 801927e:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8019282:	8123      	strh	r3, [r4, #8]
}
 8019284:	4628      	mov	r0, r5
 8019286:	b004      	add	sp, #16
 8019288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 801928c:	f04f 35ff 	mov.w	r5, #4294967295
 8019290:	e7df      	b.n	8019252 <dhcp_select+0x11a>
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8019292:	f64e 2360 	movw	r3, #60000	; 0xea60
 8019296:	e7ec      	b.n	8019272 <dhcp_select+0x13a>
 8019298:	0801fcd8 	.word	0x0801fcd8
 801929c:	0801fe84 	.word	0x0801fe84
 80192a0:	0801cca4 	.word	0x0801cca4
 80192a4:	0801fea0 	.word	0x0801fea0
 80192a8:	0802003c 	.word	0x0802003c
 80192ac:	0802035c 	.word	0x0802035c
 80192b0:	08020360 	.word	0x08020360
 80192b4:	20000a28 	.word	0x20000a28
 80192b8:	10624dd3 	.word	0x10624dd3

080192bc <dhcp_handle_offer>:
{
 80192bc:	b570      	push	{r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80192be:	6a46      	ldr	r6, [r0, #36]	; 0x24
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80192c0:	4b09      	ldr	r3, [pc, #36]	; (80192e8 <dhcp_handle_offer+0x2c>)
 80192c2:	789b      	ldrb	r3, [r3, #2]
 80192c4:	b903      	cbnz	r3, 80192c8 <dhcp_handle_offer+0xc>
}
 80192c6:	bd70      	pop	{r4, r5, r6, pc}
 80192c8:	4604      	mov	r4, r0
 80192ca:	460d      	mov	r5, r1
    dhcp->request_timeout = 0; /* stop timer */
 80192cc:	2300      	movs	r3, #0
 80192ce:	8133      	strh	r3, [r6, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80192d0:	4b06      	ldr	r3, [pc, #24]	; (80192ec <dhcp_handle_offer+0x30>)
 80192d2:	6898      	ldr	r0, [r3, #8]
 80192d4:	f7f9 fb4d 	bl	8012972 <lwip_htonl>
 80192d8:	61b0      	str	r0, [r6, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80192da:	692b      	ldr	r3, [r5, #16]
 80192dc:	61f3      	str	r3, [r6, #28]
    dhcp_select(netif);
 80192de:	4620      	mov	r0, r4
 80192e0:	f7ff ff2a 	bl	8019138 <dhcp_select>
}
 80192e4:	e7ef      	b.n	80192c6 <dhcp_handle_offer+0xa>
 80192e6:	bf00      	nop
 80192e8:	20007238 	.word	0x20007238
 80192ec:	20007244 	.word	0x20007244

080192f0 <dhcp_discover>:
{
 80192f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192f4:	b084      	sub	sp, #16
 80192f6:	4606      	mov	r6, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80192f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80192fa:	2300      	movs	r3, #0
 80192fc:	61e3      	str	r3, [r4, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80192fe:	2106      	movs	r1, #6
 8019300:	4620      	mov	r0, r4
 8019302:	f7ff fcc3 	bl	8018c8c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8019306:	f10d 030e 	add.w	r3, sp, #14
 801930a:	2201      	movs	r2, #1
 801930c:	4621      	mov	r1, r4
 801930e:	4630      	mov	r0, r6
 8019310:	f7ff fd40 	bl	8018d94 <dhcp_create_msg>
  if (p_out != NULL) {
 8019314:	2800      	cmp	r0, #0
 8019316:	d03a      	beq.n	801938e <dhcp_discover+0x9e>
 8019318:	4680      	mov	r8, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801931a:	6847      	ldr	r7, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801931c:	37f0      	adds	r7, #240	; 0xf0
 801931e:	2302      	movs	r3, #2
 8019320:	2239      	movs	r2, #57	; 0x39
 8019322:	4639      	mov	r1, r7
 8019324:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8019328:	f7ff fcd6 	bl	8018cd8 <dhcp_option>
 801932c:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8019330:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8019332:	4639      	mov	r1, r7
 8019334:	f7ff fcb2 	bl	8018c9c <dhcp_option_short>
 8019338:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801933c:	2304      	movs	r3, #4
 801933e:	2237      	movs	r2, #55	; 0x37
 8019340:	4639      	mov	r1, r7
 8019342:	f7ff fcc9 	bl	8018cd8 <dhcp_option>
 8019346:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801934a:	2500      	movs	r5, #0
 801934c:	e00a      	b.n	8019364 <dhcp_discover+0x74>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801934e:	4b20      	ldr	r3, [pc, #128]	; (80193d0 <dhcp_discover+0xe0>)
 8019350:	5d5a      	ldrb	r2, [r3, r5]
 8019352:	4639      	mov	r1, r7
 8019354:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8019358:	f7ff fcdc 	bl	8018d14 <dhcp_option_byte>
 801935c:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019360:	3501      	adds	r5, #1
 8019362:	b2ed      	uxtb	r5, r5
 8019364:	2d03      	cmp	r5, #3
 8019366:	d9f2      	bls.n	801934e <dhcp_discover+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019368:	4642      	mov	r2, r8
 801936a:	4639      	mov	r1, r7
 801936c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8019370:	f7ff fdae 	bl	8018ed0 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8019374:	4b17      	ldr	r3, [pc, #92]	; (80193d4 <dhcp_discover+0xe4>)
 8019376:	9301      	str	r3, [sp, #4]
 8019378:	9600      	str	r6, [sp, #0]
 801937a:	2343      	movs	r3, #67	; 0x43
 801937c:	4a16      	ldr	r2, [pc, #88]	; (80193d8 <dhcp_discover+0xe8>)
 801937e:	4641      	mov	r1, r8
 8019380:	4816      	ldr	r0, [pc, #88]	; (80193dc <dhcp_discover+0xec>)
 8019382:	6800      	ldr	r0, [r0, #0]
 8019384:	f7ff fa8a 	bl	801889c <udp_sendto_if_src>
    pbuf_free(p_out);
 8019388:	4640      	mov	r0, r8
 801938a:	f7fa fb45 	bl	8013a18 <pbuf_free>
  if (dhcp->tries < 255) {
 801938e:	79a3      	ldrb	r3, [r4, #6]
 8019390:	2bff      	cmp	r3, #255	; 0xff
 8019392:	d001      	beq.n	8019398 <dhcp_discover+0xa8>
    dhcp->tries++;
 8019394:	3301      	adds	r3, #1
 8019396:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8019398:	79a2      	ldrb	r2, [r4, #6]
 801939a:	2a05      	cmp	r2, #5
 801939c:	d814      	bhi.n	80193c8 <dhcp_discover+0xd8>
 801939e:	2301      	movs	r3, #1
 80193a0:	4093      	lsls	r3, r2
 80193a2:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 80193a6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80193aa:	00db      	lsls	r3, r3, #3
 80193ac:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80193ae:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80193b2:	4a0b      	ldr	r2, [pc, #44]	; (80193e0 <dhcp_discover+0xf0>)
 80193b4:	fb82 1203 	smull	r1, r2, r2, r3
 80193b8:	17db      	asrs	r3, r3, #31
 80193ba:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 80193be:	8123      	strh	r3, [r4, #8]
}
 80193c0:	2000      	movs	r0, #0
 80193c2:	b004      	add	sp, #16
 80193c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80193c8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80193cc:	e7ef      	b.n	80193ae <dhcp_discover+0xbe>
 80193ce:	bf00      	nop
 80193d0:	0802003c 	.word	0x0802003c
 80193d4:	0802035c 	.word	0x0802035c
 80193d8:	08020360 	.word	0x08020360
 80193dc:	20000a28 	.word	0x20000a28
 80193e0:	10624dd3 	.word	0x10624dd3

080193e4 <dhcp_decline>:
{
 80193e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193e8:	b084      	sub	sp, #16
 80193ea:	4605      	mov	r5, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80193ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80193ee:	210c      	movs	r1, #12
 80193f0:	4620      	mov	r0, r4
 80193f2:	f7ff fc4b 	bl	8018c8c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80193f6:	f10d 030e 	add.w	r3, sp, #14
 80193fa:	2204      	movs	r2, #4
 80193fc:	4621      	mov	r1, r4
 80193fe:	4628      	mov	r0, r5
 8019400:	f7ff fcc8 	bl	8018d94 <dhcp_create_msg>
  if (p_out != NULL) {
 8019404:	b398      	cbz	r0, 801946e <dhcp_decline+0x8a>
 8019406:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019408:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801940a:	36f0      	adds	r6, #240	; 0xf0
 801940c:	2304      	movs	r3, #4
 801940e:	2232      	movs	r2, #50	; 0x32
 8019410:	4631      	mov	r1, r6
 8019412:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8019416:	f7ff fc5f 	bl	8018cd8 <dhcp_option>
 801941a:	4680      	mov	r8, r0
 801941c:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8019420:	69e0      	ldr	r0, [r4, #28]
 8019422:	f7f9 faa6 	bl	8012972 <lwip_htonl>
 8019426:	4602      	mov	r2, r0
 8019428:	4631      	mov	r1, r6
 801942a:	4640      	mov	r0, r8
 801942c:	f7ff fc8a 	bl	8018d44 <dhcp_option_long>
 8019430:	f8ad 000e 	strh.w	r0, [sp, #14]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019434:	463a      	mov	r2, r7
 8019436:	4631      	mov	r1, r6
 8019438:	f7ff fd4a 	bl	8018ed0 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801943c:	4b0d      	ldr	r3, [pc, #52]	; (8019474 <dhcp_decline+0x90>)
 801943e:	9301      	str	r3, [sp, #4]
 8019440:	9500      	str	r5, [sp, #0]
 8019442:	2343      	movs	r3, #67	; 0x43
 8019444:	4a0c      	ldr	r2, [pc, #48]	; (8019478 <dhcp_decline+0x94>)
 8019446:	4639      	mov	r1, r7
 8019448:	480c      	ldr	r0, [pc, #48]	; (801947c <dhcp_decline+0x98>)
 801944a:	6800      	ldr	r0, [r0, #0]
 801944c:	f7ff fa26 	bl	801889c <udp_sendto_if_src>
 8019450:	4605      	mov	r5, r0
    pbuf_free(p_out);
 8019452:	4638      	mov	r0, r7
 8019454:	f7fa fae0 	bl	8013a18 <pbuf_free>
  if (dhcp->tries < 255) {
 8019458:	79a3      	ldrb	r3, [r4, #6]
 801945a:	2bff      	cmp	r3, #255	; 0xff
 801945c:	d001      	beq.n	8019462 <dhcp_decline+0x7e>
    dhcp->tries++;
 801945e:	3301      	adds	r3, #1
 8019460:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019462:	2314      	movs	r3, #20
 8019464:	8123      	strh	r3, [r4, #8]
}
 8019466:	4628      	mov	r0, r5
 8019468:	b004      	add	sp, #16
 801946a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 801946e:	f04f 35ff 	mov.w	r5, #4294967295
 8019472:	e7f1      	b.n	8019458 <dhcp_decline+0x74>
 8019474:	0802035c 	.word	0x0802035c
 8019478:	08020360 	.word	0x08020360
 801947c:	20000a28 	.word	0x20000a28

08019480 <dhcp_check>:
{
 8019480:	b538      	push	{r3, r4, r5, lr}
 8019482:	4605      	mov	r5, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019484:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8019486:	2108      	movs	r1, #8
 8019488:	4620      	mov	r0, r4
 801948a:	f7ff fbff 	bl	8018c8c <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801948e:	2200      	movs	r2, #0
 8019490:	f104 011c 	add.w	r1, r4, #28
 8019494:	4628      	mov	r0, r5
 8019496:	f001 f971 	bl	801a77c <etharp_query>
  if (dhcp->tries < 255) {
 801949a:	79a3      	ldrb	r3, [r4, #6]
 801949c:	2bff      	cmp	r3, #255	; 0xff
 801949e:	d001      	beq.n	80194a4 <dhcp_check+0x24>
    dhcp->tries++;
 80194a0:	3301      	adds	r3, #1
 80194a2:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80194a4:	2301      	movs	r3, #1
 80194a6:	8123      	strh	r3, [r4, #8]
}
 80194a8:	bd38      	pop	{r3, r4, r5, pc}
	...

080194ac <dhcp_bind>:
{
 80194ac:	b530      	push	{r4, r5, lr}
 80194ae:	b083      	sub	sp, #12
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80194b0:	2800      	cmp	r0, #0
 80194b2:	d064      	beq.n	801957e <dhcp_bind+0xd2>
 80194b4:	4605      	mov	r5, r0
  dhcp = netif_dhcp_data(netif);
 80194b6:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80194b8:	2c00      	cmp	r4, #0
 80194ba:	d068      	beq.n	801958e <dhcp_bind+0xe2>
  dhcp->lease_used = 0;
 80194bc:	2300      	movs	r3, #0
 80194be:	8263      	strh	r3, [r4, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80194c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80194c2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80194c6:	d00f      	beq.n	80194e8 <dhcp_bind+0x3c>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80194c8:	321e      	adds	r2, #30
 80194ca:	f1a3 3377 	sub.w	r3, r3, #2004318071	; 0x77777777
 80194ce:	fba3 1302 	umull	r1, r3, r3, r2
 80194d2:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 80194d4:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 80194d8:	d301      	bcc.n	80194de <dhcp_bind+0x32>
      timeout = 0xffff;
 80194da:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t0_timeout = (u16_t)timeout;
 80194de:	b29b      	uxth	r3, r3
 80194e0:	82a3      	strh	r3, [r4, #20]
    if (dhcp->t0_timeout == 0) {
 80194e2:	b90b      	cbnz	r3, 80194e8 <dhcp_bind+0x3c>
      dhcp->t0_timeout = 1;
 80194e4:	2301      	movs	r3, #1
 80194e6:	82a3      	strh	r3, [r4, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80194e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80194ea:	f1b2 3fff 	cmp.w	r2, #4294967295
 80194ee:	d010      	beq.n	8019512 <dhcp_bind+0x66>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80194f0:	321e      	adds	r2, #30
 80194f2:	4b34      	ldr	r3, [pc, #208]	; (80195c4 <dhcp_bind+0x118>)
 80194f4:	fba3 1302 	umull	r1, r3, r3, r2
 80194f8:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 80194fa:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 80194fe:	d301      	bcc.n	8019504 <dhcp_bind+0x58>
      timeout = 0xffff;
 8019500:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t1_timeout = (u16_t)timeout;
 8019504:	b29b      	uxth	r3, r3
 8019506:	8163      	strh	r3, [r4, #10]
    if (dhcp->t1_timeout == 0) {
 8019508:	b90b      	cbnz	r3, 801950e <dhcp_bind+0x62>
      dhcp->t1_timeout = 1;
 801950a:	2301      	movs	r3, #1
 801950c:	8163      	strh	r3, [r4, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801950e:	8963      	ldrh	r3, [r4, #10]
 8019510:	81e3      	strh	r3, [r4, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8019512:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8019514:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019518:	d010      	beq.n	801953c <dhcp_bind+0x90>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801951a:	321e      	adds	r2, #30
 801951c:	4b29      	ldr	r3, [pc, #164]	; (80195c4 <dhcp_bind+0x118>)
 801951e:	fba3 1302 	umull	r1, r3, r3, r2
 8019522:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 8019524:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 8019528:	d301      	bcc.n	801952e <dhcp_bind+0x82>
      timeout = 0xffff;
 801952a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t2_timeout = (u16_t)timeout;
 801952e:	b29b      	uxth	r3, r3
 8019530:	81a3      	strh	r3, [r4, #12]
    if (dhcp->t2_timeout == 0) {
 8019532:	b90b      	cbnz	r3, 8019538 <dhcp_bind+0x8c>
      dhcp->t2_timeout = 1;
 8019534:	2301      	movs	r3, #1
 8019536:	81a3      	strh	r3, [r4, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8019538:	89a3      	ldrh	r3, [r4, #12]
 801953a:	8223      	strh	r3, [r4, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801953c:	8962      	ldrh	r2, [r4, #10]
 801953e:	89a3      	ldrh	r3, [r4, #12]
 8019540:	429a      	cmp	r2, r3
 8019542:	d302      	bcc.n	801954a <dhcp_bind+0x9e>
 8019544:	b10b      	cbz	r3, 801954a <dhcp_bind+0x9e>
    dhcp->t1_timeout = 0;
 8019546:	2300      	movs	r3, #0
 8019548:	8163      	strh	r3, [r4, #10]
  if (dhcp->subnet_mask_given) {
 801954a:	79e3      	ldrb	r3, [r4, #7]
 801954c:	b33b      	cbz	r3, 801959e <dhcp_bind+0xf2>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801954e:	6a23      	ldr	r3, [r4, #32]
 8019550:	9301      	str	r3, [sp, #4]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8019552:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019554:	9300      	str	r3, [sp, #0]
  if (ip4_addr_isany_val(gw_addr)) {
 8019556:	b92b      	cbnz	r3, 8019564 <dhcp_bind+0xb8>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8019558:	69e3      	ldr	r3, [r4, #28]
 801955a:	9a01      	ldr	r2, [sp, #4]
 801955c:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801955e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8019562:	9300      	str	r3, [sp, #0]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8019564:	210a      	movs	r1, #10
 8019566:	4620      	mov	r0, r4
 8019568:	f7ff fb90 	bl	8018c8c <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801956c:	466b      	mov	r3, sp
 801956e:	aa01      	add	r2, sp, #4
 8019570:	f104 011c 	add.w	r1, r4, #28
 8019574:	4628      	mov	r0, r5
 8019576:	f7fa f829 	bl	80135cc <netif_set_addr>
}
 801957a:	b003      	add	sp, #12
 801957c:	bd30      	pop	{r4, r5, pc}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801957e:	4b12      	ldr	r3, [pc, #72]	; (80195c8 <dhcp_bind+0x11c>)
 8019580:	f240 4215 	movw	r2, #1045	; 0x415
 8019584:	4911      	ldr	r1, [pc, #68]	; (80195cc <dhcp_bind+0x120>)
 8019586:	4812      	ldr	r0, [pc, #72]	; (80195d0 <dhcp_bind+0x124>)
 8019588:	f002 fa7a 	bl	801ba80 <iprintf>
 801958c:	e7f5      	b.n	801957a <dhcp_bind+0xce>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801958e:	4b0e      	ldr	r3, [pc, #56]	; (80195c8 <dhcp_bind+0x11c>)
 8019590:	f240 4217 	movw	r2, #1047	; 0x417
 8019594:	490f      	ldr	r1, [pc, #60]	; (80195d4 <dhcp_bind+0x128>)
 8019596:	480e      	ldr	r0, [pc, #56]	; (80195d0 <dhcp_bind+0x124>)
 8019598:	f002 fa72 	bl	801ba80 <iprintf>
 801959c:	e7ed      	b.n	801957a <dhcp_bind+0xce>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801959e:	7f22      	ldrb	r2, [r4, #28]
    if (first_octet <= 127) {
 80195a0:	f994 301c 	ldrsb.w	r3, [r4, #28]
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	db02      	blt.n	80195ae <dhcp_bind+0x102>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80195a8:	23ff      	movs	r3, #255	; 0xff
 80195aa:	9301      	str	r3, [sp, #4]
 80195ac:	e7d1      	b.n	8019552 <dhcp_bind+0xa6>
    } else if (first_octet >= 192) {
 80195ae:	2abf      	cmp	r2, #191	; 0xbf
 80195b0:	d903      	bls.n	80195ba <dhcp_bind+0x10e>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80195b2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80195b6:	9301      	str	r3, [sp, #4]
 80195b8:	e7cb      	b.n	8019552 <dhcp_bind+0xa6>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80195ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80195be:	9301      	str	r3, [sp, #4]
 80195c0:	e7c7      	b.n	8019552 <dhcp_bind+0xa6>
 80195c2:	bf00      	nop
 80195c4:	88888889 	.word	0x88888889
 80195c8:	0801fcd8 	.word	0x0801fcd8
 80195cc:	0801febc 	.word	0x0801febc
 80195d0:	0801cca4 	.word	0x0801cca4
 80195d4:	0801fed8 	.word	0x0801fed8

080195d8 <dhcp_handle_nak>:
{
 80195d8:	b510      	push	{r4, lr}
 80195da:	4604      	mov	r4, r0
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80195dc:	210c      	movs	r1, #12
 80195de:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80195e0:	f7ff fb54 	bl	8018c8c <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80195e4:	4904      	ldr	r1, [pc, #16]	; (80195f8 <dhcp_handle_nak+0x20>)
 80195e6:	460b      	mov	r3, r1
 80195e8:	460a      	mov	r2, r1
 80195ea:	4620      	mov	r0, r4
 80195ec:	f7f9 ffee 	bl	80135cc <netif_set_addr>
  dhcp_discover(netif);
 80195f0:	4620      	mov	r0, r4
 80195f2:	f7ff fe7d 	bl	80192f0 <dhcp_discover>
}
 80195f6:	bd10      	pop	{r4, pc}
 80195f8:	0802035c 	.word	0x0802035c

080195fc <dhcp_dec_pcb_refcount>:
{
 80195fc:	b510      	push	{r4, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80195fe:	4b0c      	ldr	r3, [pc, #48]	; (8019630 <dhcp_dec_pcb_refcount+0x34>)
 8019600:	781b      	ldrb	r3, [r3, #0]
 8019602:	b133      	cbz	r3, 8019612 <dhcp_dec_pcb_refcount+0x16>
  dhcp_pcb_refcount--;
 8019604:	4a0a      	ldr	r2, [pc, #40]	; (8019630 <dhcp_dec_pcb_refcount+0x34>)
 8019606:	7813      	ldrb	r3, [r2, #0]
 8019608:	3b01      	subs	r3, #1
 801960a:	b2db      	uxtb	r3, r3
 801960c:	7013      	strb	r3, [r2, #0]
  if (dhcp_pcb_refcount == 0) {
 801960e:	b13b      	cbz	r3, 8019620 <dhcp_dec_pcb_refcount+0x24>
}
 8019610:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8019612:	4b08      	ldr	r3, [pc, #32]	; (8019634 <dhcp_dec_pcb_refcount+0x38>)
 8019614:	22ff      	movs	r2, #255	; 0xff
 8019616:	4908      	ldr	r1, [pc, #32]	; (8019638 <dhcp_dec_pcb_refcount+0x3c>)
 8019618:	4808      	ldr	r0, [pc, #32]	; (801963c <dhcp_dec_pcb_refcount+0x40>)
 801961a:	f002 fa31 	bl	801ba80 <iprintf>
 801961e:	e7f1      	b.n	8019604 <dhcp_dec_pcb_refcount+0x8>
    udp_remove(dhcp_pcb);
 8019620:	4c07      	ldr	r4, [pc, #28]	; (8019640 <dhcp_dec_pcb_refcount+0x44>)
 8019622:	6820      	ldr	r0, [r4, #0]
 8019624:	f7ff fade 	bl	8018be4 <udp_remove>
    dhcp_pcb = NULL;
 8019628:	2300      	movs	r3, #0
 801962a:	6023      	str	r3, [r4, #0]
}
 801962c:	e7f0      	b.n	8019610 <dhcp_dec_pcb_refcount+0x14>
 801962e:	bf00      	nop
 8019630:	20000a2c 	.word	0x20000a2c
 8019634:	0801fcd8 	.word	0x0801fcd8
 8019638:	0801fef0 	.word	0x0801fef0
 801963c:	0801cca4 	.word	0x0801cca4
 8019640:	20000a28 	.word	0x20000a28

08019644 <dhcp_inc_pcb_refcount>:
{
 8019644:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 8019646:	4b17      	ldr	r3, [pc, #92]	; (80196a4 <dhcp_inc_pcb_refcount+0x60>)
 8019648:	781b      	ldrb	r3, [r3, #0]
 801964a:	bb0b      	cbnz	r3, 8019690 <dhcp_inc_pcb_refcount+0x4c>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801964c:	4b16      	ldr	r3, [pc, #88]	; (80196a8 <dhcp_inc_pcb_refcount+0x64>)
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	b12b      	cbz	r3, 801965e <dhcp_inc_pcb_refcount+0x1a>
 8019652:	4b16      	ldr	r3, [pc, #88]	; (80196ac <dhcp_inc_pcb_refcount+0x68>)
 8019654:	22e5      	movs	r2, #229	; 0xe5
 8019656:	4916      	ldr	r1, [pc, #88]	; (80196b0 <dhcp_inc_pcb_refcount+0x6c>)
 8019658:	4816      	ldr	r0, [pc, #88]	; (80196b4 <dhcp_inc_pcb_refcount+0x70>)
 801965a:	f002 fa11 	bl	801ba80 <iprintf>
    dhcp_pcb = udp_new();
 801965e:	f7ff faeb 	bl	8018c38 <udp_new>
 8019662:	4b11      	ldr	r3, [pc, #68]	; (80196a8 <dhcp_inc_pcb_refcount+0x64>)
 8019664:	6018      	str	r0, [r3, #0]
    if (dhcp_pcb == NULL) {
 8019666:	b1c8      	cbz	r0, 801969c <dhcp_inc_pcb_refcount+0x58>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8019668:	7a43      	ldrb	r3, [r0, #9]
 801966a:	f043 0320 	orr.w	r3, r3, #32
 801966e:	7243      	strb	r3, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8019670:	4d11      	ldr	r5, [pc, #68]	; (80196b8 <dhcp_inc_pcb_refcount+0x74>)
 8019672:	2244      	movs	r2, #68	; 0x44
 8019674:	4629      	mov	r1, r5
 8019676:	f7ff f8b3 	bl	80187e0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801967a:	4c0b      	ldr	r4, [pc, #44]	; (80196a8 <dhcp_inc_pcb_refcount+0x64>)
 801967c:	2243      	movs	r2, #67	; 0x43
 801967e:	4629      	mov	r1, r5
 8019680:	6820      	ldr	r0, [r4, #0]
 8019682:	f7ff fa59 	bl	8018b38 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8019686:	2200      	movs	r2, #0
 8019688:	490c      	ldr	r1, [pc, #48]	; (80196bc <dhcp_inc_pcb_refcount+0x78>)
 801968a:	6820      	ldr	r0, [r4, #0]
 801968c:	f7ff fa96 	bl	8018bbc <udp_recv>
  dhcp_pcb_refcount++;
 8019690:	4a04      	ldr	r2, [pc, #16]	; (80196a4 <dhcp_inc_pcb_refcount+0x60>)
 8019692:	7813      	ldrb	r3, [r2, #0]
 8019694:	3301      	adds	r3, #1
 8019696:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 8019698:	2000      	movs	r0, #0
}
 801969a:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 801969c:	f04f 30ff 	mov.w	r0, #4294967295
 80196a0:	e7fb      	b.n	801969a <dhcp_inc_pcb_refcount+0x56>
 80196a2:	bf00      	nop
 80196a4:	20000a2c 	.word	0x20000a2c
 80196a8:	20000a28 	.word	0x20000a28
 80196ac:	0801fcd8 	.word	0x0801fcd8
 80196b0:	0801ff14 	.word	0x0801ff14
 80196b4:	0801cca4 	.word	0x0801cca4
 80196b8:	0802035c 	.word	0x0802035c
 80196bc:	08019c39 	.word	0x08019c39

080196c0 <dhcp_parse_reply>:
{
 80196c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196c4:	b087      	sub	sp, #28
 80196c6:	9002      	str	r0, [sp, #8]
  dhcp_clear_all_options(dhcp);
 80196c8:	4b6d      	ldr	r3, [pc, #436]	; (8019880 <dhcp_parse_reply+0x1c0>)
 80196ca:	2200      	movs	r2, #0
 80196cc:	601a      	str	r2, [r3, #0]
 80196ce:	605a      	str	r2, [r3, #4]
 80196d0:	811a      	strh	r2, [r3, #8]
  if (p->len < DHCP_SNAME_OFS) {
 80196d2:	8943      	ldrh	r3, [r0, #10]
 80196d4:	2b2b      	cmp	r3, #43	; 0x2b
 80196d6:	f240 823a 	bls.w	8019b4e <dhcp_parse_reply+0x48e>
  options_idx_max = p->tot_len;
 80196da:	8904      	ldrh	r4, [r0, #8]
  int parse_sname_as_options = 0;
 80196dc:	2300      	movs	r3, #0
 80196de:	9303      	str	r3, [sp, #12]
  options_idx = DHCP_OPTIONS_OFS;
 80196e0:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
  q = p;
 80196e4:	9e02      	ldr	r6, [sp, #8]
  while ((q != NULL) && (options_idx >= q->len)) {
 80196e6:	b156      	cbz	r6, 80196fe <dhcp_parse_reply+0x3e>
 80196e8:	8973      	ldrh	r3, [r6, #10]
 80196ea:	455b      	cmp	r3, fp
 80196ec:	d807      	bhi.n	80196fe <dhcp_parse_reply+0x3e>
    options_idx = (u16_t)(options_idx - q->len);
 80196ee:	ebab 0b03 	sub.w	fp, fp, r3
 80196f2:	fa1f fb8b 	uxth.w	fp, fp
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80196f6:	1ae4      	subs	r4, r4, r3
 80196f8:	b2a4      	uxth	r4, r4
    q = q->next;
 80196fa:	6836      	ldr	r6, [r6, #0]
 80196fc:	e7f3      	b.n	80196e6 <dhcp_parse_reply+0x26>
  if (q == NULL) {
 80196fe:	2e00      	cmp	r6, #0
 8019700:	f000 8228 	beq.w	8019b54 <dhcp_parse_reply+0x494>
  options = (u8_t *)q->payload;
 8019704:	6873      	ldr	r3, [r6, #4]
 8019706:	9301      	str	r3, [sp, #4]
  offset = options_idx;
 8019708:	465d      	mov	r5, fp
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801970a:	e0e1      	b.n	80198d0 <dhcp_parse_reply+0x210>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801970c:	6833      	ldr	r3, [r6, #0]
 801970e:	b113      	cbz	r3, 8019716 <dhcp_parse_reply+0x56>
 8019710:	685b      	ldr	r3, [r3, #4]
 8019712:	781b      	ldrb	r3, [r3, #0]
 8019714:	e0f8      	b.n	8019908 <dhcp_parse_reply+0x248>
 8019716:	2300      	movs	r3, #0
 8019718:	e0f6      	b.n	8019908 <dhcp_parse_reply+0x248>
        decode_len = 0;
 801971a:	4617      	mov	r7, r2
 801971c:	4613      	mov	r3, r2
 801971e:	f04f 39ff 	mov.w	r9, #4294967295
 8019722:	e0c0      	b.n	80198a6 <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019724:	2b04      	cmp	r3, #4
 8019726:	d103      	bne.n	8019730 <dhcp_parse_reply+0x70>
    decode_len = len;
 8019728:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801972a:	f04f 0906 	mov.w	r9, #6
 801972e:	e0ba      	b.n	80198a6 <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019730:	4b54      	ldr	r3, [pc, #336]	; (8019884 <dhcp_parse_reply+0x1c4>)
 8019732:	f240 622e 	movw	r2, #1582	; 0x62e
 8019736:	4954      	ldr	r1, [pc, #336]	; (8019888 <dhcp_parse_reply+0x1c8>)
 8019738:	4854      	ldr	r0, [pc, #336]	; (801988c <dhcp_parse_reply+0x1cc>)
 801973a:	f002 f9a1 	bl	801ba80 <iprintf>
 801973e:	f06f 0005 	mvn.w	r0, #5
 8019742:	e1d3      	b.n	8019aec <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8019744:	2b03      	cmp	r3, #3
 8019746:	d903      	bls.n	8019750 <dhcp_parse_reply+0x90>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8019748:	f04f 0907 	mov.w	r9, #7
        decode_len = 4; /* only copy the first given router */
 801974c:	2704      	movs	r7, #4
 801974e:	e0aa      	b.n	80198a6 <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8019750:	4b4c      	ldr	r3, [pc, #304]	; (8019884 <dhcp_parse_reply+0x1c4>)
 8019752:	f240 6233 	movw	r2, #1587	; 0x633
 8019756:	494e      	ldr	r1, [pc, #312]	; (8019890 <dhcp_parse_reply+0x1d0>)
 8019758:	484c      	ldr	r0, [pc, #304]	; (801988c <dhcp_parse_reply+0x1cc>)
 801975a:	f002 f991 	bl	801ba80 <iprintf>
 801975e:	f06f 0005 	mvn.w	r0, #5
 8019762:	e1c3      	b.n	8019aec <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8019764:	f013 0f03 	tst.w	r3, #3
 8019768:	d109      	bne.n	801977e <dhcp_parse_reply+0xbe>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801976a:	461f      	mov	r7, r3
 801976c:	2b08      	cmp	r3, #8
 801976e:	bf28      	it	cs
 8019770:	2708      	movcs	r7, #8
 8019772:	b2ff      	uxtb	r7, r7
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8019774:	42bb      	cmp	r3, r7
 8019776:	d30c      	bcc.n	8019792 <dhcp_parse_reply+0xd2>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 8019778:	f04f 0908 	mov.w	r9, #8
 801977c:	e093      	b.n	80198a6 <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801977e:	4b41      	ldr	r3, [pc, #260]	; (8019884 <dhcp_parse_reply+0x1c4>)
 8019780:	f240 6239 	movw	r2, #1593	; 0x639
 8019784:	4943      	ldr	r1, [pc, #268]	; (8019894 <dhcp_parse_reply+0x1d4>)
 8019786:	4841      	ldr	r0, [pc, #260]	; (801988c <dhcp_parse_reply+0x1cc>)
 8019788:	f002 f97a 	bl	801ba80 <iprintf>
 801978c:	f06f 0005 	mvn.w	r0, #5
 8019790:	e1ac      	b.n	8019aec <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8019792:	4b3c      	ldr	r3, [pc, #240]	; (8019884 <dhcp_parse_reply+0x1c4>)
 8019794:	f240 623c 	movw	r2, #1596	; 0x63c
 8019798:	493d      	ldr	r1, [pc, #244]	; (8019890 <dhcp_parse_reply+0x1d0>)
 801979a:	483c      	ldr	r0, [pc, #240]	; (801988c <dhcp_parse_reply+0x1cc>)
 801979c:	f002 f970 	bl	801ba80 <iprintf>
 80197a0:	f06f 0005 	mvn.w	r0, #5
 80197a4:	e1a2      	b.n	8019aec <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80197a6:	2b04      	cmp	r3, #4
 80197a8:	d103      	bne.n	80197b2 <dhcp_parse_reply+0xf2>
    decode_len = len;
 80197aa:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80197ac:	f04f 0903 	mov.w	r9, #3
 80197b0:	e079      	b.n	80198a6 <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80197b2:	4b34      	ldr	r3, [pc, #208]	; (8019884 <dhcp_parse_reply+0x1c4>)
 80197b4:	f240 6241 	movw	r2, #1601	; 0x641
 80197b8:	4933      	ldr	r1, [pc, #204]	; (8019888 <dhcp_parse_reply+0x1c8>)
 80197ba:	4834      	ldr	r0, [pc, #208]	; (801988c <dhcp_parse_reply+0x1cc>)
 80197bc:	f002 f960 	bl	801ba80 <iprintf>
 80197c0:	f06f 0005 	mvn.w	r0, #5
 80197c4:	e192      	b.n	8019aec <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80197c6:	2b01      	cmp	r3, #1
 80197c8:	d106      	bne.n	80197d8 <dhcp_parse_reply+0x118>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80197ca:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
 80197ce:	d10d      	bne.n	80197ec <dhcp_parse_reply+0x12c>
    decode_len = len;
 80197d0:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80197d2:	f04f 0900 	mov.w	r9, #0
 80197d6:	e066      	b.n	80198a6 <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80197d8:	4b2a      	ldr	r3, [pc, #168]	; (8019884 <dhcp_parse_reply+0x1c4>)
 80197da:	f240 624f 	movw	r2, #1615	; 0x64f
 80197de:	492e      	ldr	r1, [pc, #184]	; (8019898 <dhcp_parse_reply+0x1d8>)
 80197e0:	482a      	ldr	r0, [pc, #168]	; (801988c <dhcp_parse_reply+0x1cc>)
 80197e2:	f002 f94d 	bl	801ba80 <iprintf>
 80197e6:	f06f 0005 	mvn.w	r0, #5
 80197ea:	e17f      	b.n	8019aec <dhcp_parse_reply+0x42c>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80197ec:	4b25      	ldr	r3, [pc, #148]	; (8019884 <dhcp_parse_reply+0x1c4>)
 80197ee:	f240 6251 	movw	r2, #1617	; 0x651
 80197f2:	492a      	ldr	r1, [pc, #168]	; (801989c <dhcp_parse_reply+0x1dc>)
 80197f4:	4825      	ldr	r0, [pc, #148]	; (801988c <dhcp_parse_reply+0x1cc>)
 80197f6:	f002 f943 	bl	801ba80 <iprintf>
 80197fa:	f06f 0005 	mvn.w	r0, #5
 80197fe:	e175      	b.n	8019aec <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8019800:	2b01      	cmp	r3, #1
 8019802:	d103      	bne.n	801980c <dhcp_parse_reply+0x14c>
    decode_len = len;
 8019804:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8019806:	f04f 0901 	mov.w	r9, #1
 801980a:	e04c      	b.n	80198a6 <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801980c:	4b1d      	ldr	r3, [pc, #116]	; (8019884 <dhcp_parse_reply+0x1c4>)
 801980e:	f240 6255 	movw	r2, #1621	; 0x655
 8019812:	4921      	ldr	r1, [pc, #132]	; (8019898 <dhcp_parse_reply+0x1d8>)
 8019814:	481d      	ldr	r0, [pc, #116]	; (801988c <dhcp_parse_reply+0x1cc>)
 8019816:	f002 f933 	bl	801ba80 <iprintf>
 801981a:	f06f 0005 	mvn.w	r0, #5
 801981e:	e165      	b.n	8019aec <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019820:	2b04      	cmp	r3, #4
 8019822:	d103      	bne.n	801982c <dhcp_parse_reply+0x16c>
    decode_len = len;
 8019824:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8019826:	f04f 0902 	mov.w	r9, #2
 801982a:	e03c      	b.n	80198a6 <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801982c:	4b15      	ldr	r3, [pc, #84]	; (8019884 <dhcp_parse_reply+0x1c4>)
 801982e:	f240 6259 	movw	r2, #1625	; 0x659
 8019832:	4915      	ldr	r1, [pc, #84]	; (8019888 <dhcp_parse_reply+0x1c8>)
 8019834:	4815      	ldr	r0, [pc, #84]	; (801988c <dhcp_parse_reply+0x1cc>)
 8019836:	f002 f923 	bl	801ba80 <iprintf>
 801983a:	f06f 0005 	mvn.w	r0, #5
 801983e:	e155      	b.n	8019aec <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019840:	2b04      	cmp	r3, #4
 8019842:	d103      	bne.n	801984c <dhcp_parse_reply+0x18c>
    decode_len = len;
 8019844:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 8019846:	f04f 0904 	mov.w	r9, #4
 801984a:	e02c      	b.n	80198a6 <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801984c:	4b0d      	ldr	r3, [pc, #52]	; (8019884 <dhcp_parse_reply+0x1c4>)
 801984e:	f240 625d 	movw	r2, #1629	; 0x65d
 8019852:	490d      	ldr	r1, [pc, #52]	; (8019888 <dhcp_parse_reply+0x1c8>)
 8019854:	480d      	ldr	r0, [pc, #52]	; (801988c <dhcp_parse_reply+0x1cc>)
 8019856:	f002 f913 	bl	801ba80 <iprintf>
 801985a:	f06f 0005 	mvn.w	r0, #5
 801985e:	e145      	b.n	8019aec <dhcp_parse_reply+0x42c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019860:	2b04      	cmp	r3, #4
 8019862:	d103      	bne.n	801986c <dhcp_parse_reply+0x1ac>
    decode_len = len;
 8019864:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 8019866:	f04f 0905 	mov.w	r9, #5
 801986a:	e01c      	b.n	80198a6 <dhcp_parse_reply+0x1e6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801986c:	4b05      	ldr	r3, [pc, #20]	; (8019884 <dhcp_parse_reply+0x1c4>)
 801986e:	f240 6261 	movw	r2, #1633	; 0x661
 8019872:	4905      	ldr	r1, [pc, #20]	; (8019888 <dhcp_parse_reply+0x1c8>)
 8019874:	4805      	ldr	r0, [pc, #20]	; (801988c <dhcp_parse_reply+0x1cc>)
 8019876:	f002 f903 	bl	801ba80 <iprintf>
 801987a:	f06f 0005 	mvn.w	r0, #5
 801987e:	e135      	b.n	8019aec <dhcp_parse_reply+0x42c>
 8019880:	20007238 	.word	0x20007238
 8019884:	0801fcd8 	.word	0x0801fcd8
 8019888:	0801ff3c 	.word	0x0801ff3c
 801988c:	0801cca4 	.word	0x0801cca4
 8019890:	0801ff48 	.word	0x0801ff48
 8019894:	0801ff5c 	.word	0x0801ff5c
 8019898:	0801ff6c 	.word	0x0801ff6c
 801989c:	0801ff78 	.word	0x0801ff78
    int decode_idx = -1;
 80198a0:	f04f 39ff 	mov.w	r9, #4294967295
        decode_len = 0;
 80198a4:	2700      	movs	r7, #0
    if (op == DHCP_OPTION_PAD) {
 80198a6:	2a00      	cmp	r2, #0
 80198a8:	f040 80ac 	bne.w	8019a04 <dhcp_parse_reply+0x344>
      offset++;
 80198ac:	3501      	adds	r5, #1
 80198ae:	b2ad      	uxth	r5, r5
    if (offset >= q->len) {
 80198b0:	8973      	ldrh	r3, [r6, #10]
 80198b2:	429d      	cmp	r5, r3
 80198b4:	d30c      	bcc.n	80198d0 <dhcp_parse_reply+0x210>
      offset = (u16_t)(offset - q->len);
 80198b6:	1aed      	subs	r5, r5, r3
 80198b8:	b2ad      	uxth	r5, r5
      offset_max = (u16_t)(offset_max - q->len);
 80198ba:	1ae4      	subs	r4, r4, r3
 80198bc:	b2a4      	uxth	r4, r4
      if (offset < offset_max) {
 80198be:	42a5      	cmp	r5, r4
 80198c0:	f080 8151 	bcs.w	8019b66 <dhcp_parse_reply+0x4a6>
        q = q->next;
 80198c4:	6836      	ldr	r6, [r6, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80198c6:	2e00      	cmp	r6, #0
 80198c8:	f000 8116 	beq.w	8019af8 <dhcp_parse_reply+0x438>
        options = (u8_t *)q->payload;
 80198cc:	6873      	ldr	r3, [r6, #4]
 80198ce:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80198d0:	2e00      	cmp	r6, #0
 80198d2:	f000 811b 	beq.w	8019b0c <dhcp_parse_reply+0x44c>
 80198d6:	42a5      	cmp	r5, r4
 80198d8:	f080 8118 	bcs.w	8019b0c <dhcp_parse_reply+0x44c>
 80198dc:	4629      	mov	r1, r5
 80198de:	9b01      	ldr	r3, [sp, #4]
 80198e0:	5d5a      	ldrb	r2, [r3, r5]
 80198e2:	2aff      	cmp	r2, #255	; 0xff
 80198e4:	f000 8112 	beq.w	8019b0c <dhcp_parse_reply+0x44c>
    u16_t val_offset = (u16_t)(offset + 2);
 80198e8:	f105 0802 	add.w	r8, r5, #2
 80198ec:	fa1f f888 	uxth.w	r8, r8
    if (val_offset < offset) {
 80198f0:	4545      	cmp	r5, r8
 80198f2:	f200 8132 	bhi.w	8019b5a <dhcp_parse_reply+0x49a>
    if ((offset + 1) < q->len) {
 80198f6:	4628      	mov	r0, r5
 80198f8:	1c6b      	adds	r3, r5, #1
 80198fa:	8977      	ldrh	r7, [r6, #10]
 80198fc:	42bb      	cmp	r3, r7
 80198fe:	f6bf af05 	bge.w	801970c <dhcp_parse_reply+0x4c>
      len = options[offset + 1];
 8019902:	3101      	adds	r1, #1
 8019904:	9b01      	ldr	r3, [sp, #4]
 8019906:	5c5b      	ldrb	r3, [r3, r1]
    switch (op) {
 8019908:	2a3b      	cmp	r2, #59	; 0x3b
 801990a:	d8c9      	bhi.n	80198a0 <dhcp_parse_reply+0x1e0>
 801990c:	a101      	add	r1, pc, #4	; (adr r1, 8019914 <dhcp_parse_reply+0x254>)
 801990e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019912:	bf00      	nop
 8019914:	0801971b 	.word	0x0801971b
 8019918:	08019725 	.word	0x08019725
 801991c:	080198a1 	.word	0x080198a1
 8019920:	08019745 	.word	0x08019745
 8019924:	080198a1 	.word	0x080198a1
 8019928:	080198a1 	.word	0x080198a1
 801992c:	08019765 	.word	0x08019765
 8019930:	080198a1 	.word	0x080198a1
 8019934:	080198a1 	.word	0x080198a1
 8019938:	080198a1 	.word	0x080198a1
 801993c:	080198a1 	.word	0x080198a1
 8019940:	080198a1 	.word	0x080198a1
 8019944:	080198a1 	.word	0x080198a1
 8019948:	080198a1 	.word	0x080198a1
 801994c:	080198a1 	.word	0x080198a1
 8019950:	080198a1 	.word	0x080198a1
 8019954:	080198a1 	.word	0x080198a1
 8019958:	080198a1 	.word	0x080198a1
 801995c:	080198a1 	.word	0x080198a1
 8019960:	080198a1 	.word	0x080198a1
 8019964:	080198a1 	.word	0x080198a1
 8019968:	080198a1 	.word	0x080198a1
 801996c:	080198a1 	.word	0x080198a1
 8019970:	080198a1 	.word	0x080198a1
 8019974:	080198a1 	.word	0x080198a1
 8019978:	080198a1 	.word	0x080198a1
 801997c:	080198a1 	.word	0x080198a1
 8019980:	080198a1 	.word	0x080198a1
 8019984:	080198a1 	.word	0x080198a1
 8019988:	080198a1 	.word	0x080198a1
 801998c:	080198a1 	.word	0x080198a1
 8019990:	080198a1 	.word	0x080198a1
 8019994:	080198a1 	.word	0x080198a1
 8019998:	080198a1 	.word	0x080198a1
 801999c:	080198a1 	.word	0x080198a1
 80199a0:	080198a1 	.word	0x080198a1
 80199a4:	080198a1 	.word	0x080198a1
 80199a8:	080198a1 	.word	0x080198a1
 80199ac:	080198a1 	.word	0x080198a1
 80199b0:	080198a1 	.word	0x080198a1
 80199b4:	080198a1 	.word	0x080198a1
 80199b8:	080198a1 	.word	0x080198a1
 80199bc:	080198a1 	.word	0x080198a1
 80199c0:	080198a1 	.word	0x080198a1
 80199c4:	080198a1 	.word	0x080198a1
 80199c8:	080198a1 	.word	0x080198a1
 80199cc:	080198a1 	.word	0x080198a1
 80199d0:	080198a1 	.word	0x080198a1
 80199d4:	080198a1 	.word	0x080198a1
 80199d8:	080198a1 	.word	0x080198a1
 80199dc:	080198a1 	.word	0x080198a1
 80199e0:	080197a7 	.word	0x080197a7
 80199e4:	080197c7 	.word	0x080197c7
 80199e8:	08019801 	.word	0x08019801
 80199ec:	08019821 	.word	0x08019821
 80199f0:	080198a1 	.word	0x080198a1
 80199f4:	080198a1 	.word	0x080198a1
 80199f8:	080198a1 	.word	0x080198a1
 80199fc:	08019841 	.word	0x08019841
 8019a00:	08019861 	.word	0x08019861
      if (offset + len + 2 > 0xFFFF) {
 8019a04:	4418      	add	r0, r3
 8019a06:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8019a0a:	4290      	cmp	r0, r2
 8019a0c:	f300 80a8 	bgt.w	8019b60 <dhcp_parse_reply+0x4a0>
      offset = (u16_t)(offset + len + 2);
 8019a10:	441d      	add	r5, r3
 8019a12:	b2ad      	uxth	r5, r5
 8019a14:	3502      	adds	r5, #2
 8019a16:	b2ad      	uxth	r5, r5
      if (decode_len > 0) {
 8019a18:	2f00      	cmp	r7, #0
 8019a1a:	f43f af49 	beq.w	80198b0 <dhcp_parse_reply+0x1f0>
        u32_t value = 0;
 8019a1e:	2300      	movs	r3, #0
 8019a20:	9305      	str	r3, [sp, #20]
 8019a22:	e034      	b.n	8019a8e <dhcp_parse_reply+0x3ce>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8019a24:	4b51      	ldr	r3, [pc, #324]	; (8019b6c <dhcp_parse_reply+0x4ac>)
 8019a26:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8019a2a:	4951      	ldr	r1, [pc, #324]	; (8019b70 <dhcp_parse_reply+0x4b0>)
 8019a2c:	4851      	ldr	r0, [pc, #324]	; (8019b74 <dhcp_parse_reply+0x4b4>)
 8019a2e:	f002 f827 	bl	801ba80 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8019a32:	4b51      	ldr	r3, [pc, #324]	; (8019b78 <dhcp_parse_reply+0x4b8>)
 8019a34:	f813 3009 	ldrb.w	r3, [r3, r9]
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	f47f af39 	bne.w	80198b0 <dhcp_parse_reply+0x1f0>
          copy_len = LWIP_MIN(decode_len, 4);
 8019a3e:	46ba      	mov	sl, r7
 8019a40:	2f04      	cmp	r7, #4
 8019a42:	bf28      	it	cs
 8019a44:	f04f 0a04 	movcs.w	sl, #4
 8019a48:	fa5f fa8a 	uxtb.w	sl, sl
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8019a4c:	4643      	mov	r3, r8
 8019a4e:	4652      	mov	r2, sl
 8019a50:	a905      	add	r1, sp, #20
 8019a52:	4630      	mov	r0, r6
 8019a54:	f7fa fa36 	bl	8013ec4 <pbuf_copy_partial>
 8019a58:	4550      	cmp	r0, sl
 8019a5a:	d145      	bne.n	8019ae8 <dhcp_parse_reply+0x428>
          if (decode_len > 4) {
 8019a5c:	2f04      	cmp	r7, #4
 8019a5e:	d924      	bls.n	8019aaa <dhcp_parse_reply+0x3ea>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8019a60:	f017 0f03 	tst.w	r7, #3
 8019a64:	d117      	bne.n	8019a96 <dhcp_parse_reply+0x3d6>
            dhcp_got_option(dhcp, decode_idx);
 8019a66:	4b44      	ldr	r3, [pc, #272]	; (8019b78 <dhcp_parse_reply+0x4b8>)
 8019a68:	2201      	movs	r2, #1
 8019a6a:	f803 2009 	strb.w	r2, [r3, r9]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8019a6e:	9805      	ldr	r0, [sp, #20]
 8019a70:	f7f8 ff7f 	bl	8012972 <lwip_htonl>
 8019a74:	4b41      	ldr	r3, [pc, #260]	; (8019b7c <dhcp_parse_reply+0x4bc>)
 8019a76:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8019a7a:	3f04      	subs	r7, #4
 8019a7c:	b2ff      	uxtb	r7, r7
            next_val_offset = (u16_t)(val_offset + 4);
 8019a7e:	f108 0304 	add.w	r3, r8, #4
 8019a82:	b29b      	uxth	r3, r3
            if (next_val_offset < val_offset) {
 8019a84:	4598      	cmp	r8, r3
 8019a86:	d834      	bhi.n	8019af2 <dhcp_parse_reply+0x432>
            decode_idx++;
 8019a88:	f109 0901 	add.w	r9, r9, #1
            val_offset = next_val_offset;
 8019a8c:	4698      	mov	r8, r3
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8019a8e:	f1b9 0f09 	cmp.w	r9, #9
 8019a92:	d9ce      	bls.n	8019a32 <dhcp_parse_reply+0x372>
 8019a94:	e7c6      	b.n	8019a24 <dhcp_parse_reply+0x364>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8019a96:	4b35      	ldr	r3, [pc, #212]	; (8019b6c <dhcp_parse_reply+0x4ac>)
 8019a98:	f240 6281 	movw	r2, #1665	; 0x681
 8019a9c:	4938      	ldr	r1, [pc, #224]	; (8019b80 <dhcp_parse_reply+0x4c0>)
 8019a9e:	4835      	ldr	r0, [pc, #212]	; (8019b74 <dhcp_parse_reply+0x4b4>)
 8019aa0:	f001 ffee 	bl	801ba80 <iprintf>
 8019aa4:	f06f 0005 	mvn.w	r0, #5
 8019aa8:	e020      	b.n	8019aec <dhcp_parse_reply+0x42c>
          } else if (decode_len == 4) {
 8019aaa:	2f04      	cmp	r7, #4
 8019aac:	d00d      	beq.n	8019aca <dhcp_parse_reply+0x40a>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8019aae:	2f01      	cmp	r7, #1
 8019ab0:	d110      	bne.n	8019ad4 <dhcp_parse_reply+0x414>
            value = ((u8_t *)&value)[0];
 8019ab2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019ab6:	9305      	str	r3, [sp, #20]
          dhcp_got_option(dhcp, decode_idx);
 8019ab8:	4b2f      	ldr	r3, [pc, #188]	; (8019b78 <dhcp_parse_reply+0x4b8>)
 8019aba:	2201      	movs	r2, #1
 8019abc:	f803 2009 	strb.w	r2, [r3, r9]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8019ac0:	4b2e      	ldr	r3, [pc, #184]	; (8019b7c <dhcp_parse_reply+0x4bc>)
 8019ac2:	9a05      	ldr	r2, [sp, #20]
 8019ac4:	f843 2029 	str.w	r2, [r3, r9, lsl #2]
 8019ac8:	e6f2      	b.n	80198b0 <dhcp_parse_reply+0x1f0>
            value = lwip_ntohl(value);
 8019aca:	9805      	ldr	r0, [sp, #20]
 8019acc:	f7f8 ff51 	bl	8012972 <lwip_htonl>
 8019ad0:	9005      	str	r0, [sp, #20]
 8019ad2:	e7f1      	b.n	8019ab8 <dhcp_parse_reply+0x3f8>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8019ad4:	4b25      	ldr	r3, [pc, #148]	; (8019b6c <dhcp_parse_reply+0x4ac>)
 8019ad6:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8019ada:	492a      	ldr	r1, [pc, #168]	; (8019b84 <dhcp_parse_reply+0x4c4>)
 8019adc:	4825      	ldr	r0, [pc, #148]	; (8019b74 <dhcp_parse_reply+0x4b4>)
 8019ade:	f001 ffcf 	bl	801ba80 <iprintf>
 8019ae2:	f06f 0005 	mvn.w	r0, #5
 8019ae6:	e001      	b.n	8019aec <dhcp_parse_reply+0x42c>
            return ERR_BUF;
 8019ae8:	f06f 0001 	mvn.w	r0, #1
}
 8019aec:	b007      	add	sp, #28
 8019aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              return ERR_BUF;
 8019af2:	f06f 0001 	mvn.w	r0, #1
 8019af6:	e7f9      	b.n	8019aec <dhcp_parse_reply+0x42c>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8019af8:	4b1c      	ldr	r3, [pc, #112]	; (8019b6c <dhcp_parse_reply+0x4ac>)
 8019afa:	f240 629d 	movw	r2, #1693	; 0x69d
 8019afe:	4922      	ldr	r1, [pc, #136]	; (8019b88 <dhcp_parse_reply+0x4c8>)
 8019b00:	481c      	ldr	r0, [pc, #112]	; (8019b74 <dhcp_parse_reply+0x4b4>)
 8019b02:	f001 ffbd 	bl	801ba80 <iprintf>
 8019b06:	f06f 0005 	mvn.w	r0, #5
 8019b0a:	e7ef      	b.n	8019aec <dhcp_parse_reply+0x42c>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8019b0c:	4b1a      	ldr	r3, [pc, #104]	; (8019b78 <dhcp_parse_reply+0x4b8>)
 8019b0e:	781b      	ldrb	r3, [r3, #0]
 8019b10:	b153      	cbz	r3, 8019b28 <dhcp_parse_reply+0x468>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8019b12:	4b1a      	ldr	r3, [pc, #104]	; (8019b7c <dhcp_parse_reply+0x4bc>)
 8019b14:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8019b16:	4a18      	ldr	r2, [pc, #96]	; (8019b78 <dhcp_parse_reply+0x4b8>)
 8019b18:	2100      	movs	r1, #0
 8019b1a:	7011      	strb	r1, [r2, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8019b1c:	2b01      	cmp	r3, #1
 8019b1e:	d012      	beq.n	8019b46 <dhcp_parse_reply+0x486>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8019b20:	2b02      	cmp	r3, #2
 8019b22:	d009      	beq.n	8019b38 <dhcp_parse_reply+0x478>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8019b24:	2b03      	cmp	r3, #3
 8019b26:	d00c      	beq.n	8019b42 <dhcp_parse_reply+0x482>
  } else if (parse_sname_as_options) {
 8019b28:	9b03      	ldr	r3, [sp, #12]
 8019b2a:	b143      	cbz	r3, 8019b3e <dhcp_parse_reply+0x47e>
    parse_sname_as_options = 0;
 8019b2c:	2300      	movs	r3, #0
 8019b2e:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8019b30:	246c      	movs	r4, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 8019b32:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 8019b36:	e5d5      	b.n	80196e4 <dhcp_parse_reply+0x24>
      parse_sname_as_options = 1;
 8019b38:	2301      	movs	r3, #1
 8019b3a:	9303      	str	r3, [sp, #12]
 8019b3c:	e7f4      	b.n	8019b28 <dhcp_parse_reply+0x468>
  return ERR_OK;
 8019b3e:	2000      	movs	r0, #0
 8019b40:	e7d4      	b.n	8019aec <dhcp_parse_reply+0x42c>
      parse_sname_as_options = 1;
 8019b42:	2301      	movs	r3, #1
 8019b44:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8019b46:	24ec      	movs	r4, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 8019b48:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    goto again;
 8019b4c:	e5ca      	b.n	80196e4 <dhcp_parse_reply+0x24>
    return ERR_BUF;
 8019b4e:	f06f 0001 	mvn.w	r0, #1
 8019b52:	e7cb      	b.n	8019aec <dhcp_parse_reply+0x42c>
    return ERR_BUF;
 8019b54:	f06f 0001 	mvn.w	r0, #1
 8019b58:	e7c8      	b.n	8019aec <dhcp_parse_reply+0x42c>
      return ERR_BUF;
 8019b5a:	f06f 0001 	mvn.w	r0, #1
 8019b5e:	e7c5      	b.n	8019aec <dhcp_parse_reply+0x42c>
        return ERR_BUF;
 8019b60:	f06f 0001 	mvn.w	r0, #1
 8019b64:	e7c2      	b.n	8019aec <dhcp_parse_reply+0x42c>
        return ERR_BUF;
 8019b66:	f06f 0001 	mvn.w	r0, #1
 8019b6a:	e7bf      	b.n	8019aec <dhcp_parse_reply+0x42c>
 8019b6c:	0801fcd8 	.word	0x0801fcd8
 8019b70:	0801ff90 	.word	0x0801ff90
 8019b74:	0801cca4 	.word	0x0801cca4
 8019b78:	20007238 	.word	0x20007238
 8019b7c:	20007244 	.word	0x20007244
 8019b80:	0801ffa4 	.word	0x0801ffa4
 8019b84:	0801ffbc 	.word	0x0801ffbc
 8019b88:	0801ffd0 	.word	0x0801ffd0

08019b8c <dhcp_handle_ack>:
{
 8019b8c:	b510      	push	{r4, lr}
 8019b8e:	b082      	sub	sp, #8
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019b90:	6a44      	ldr	r4, [r0, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8019b92:	2300      	movs	r3, #0
 8019b94:	6223      	str	r3, [r4, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8019b96:	6263      	str	r3, [r4, #36]	; 0x24
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8019b98:	4b25      	ldr	r3, [pc, #148]	; (8019c30 <dhcp_handle_ack+0xa4>)
 8019b9a:	78db      	ldrb	r3, [r3, #3]
 8019b9c:	b113      	cbz	r3, 8019ba4 <dhcp_handle_ack+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8019b9e:	4b25      	ldr	r3, [pc, #148]	; (8019c34 <dhcp_handle_ack+0xa8>)
 8019ba0:	68db      	ldr	r3, [r3, #12]
 8019ba2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8019ba4:	4b22      	ldr	r3, [pc, #136]	; (8019c30 <dhcp_handle_ack+0xa4>)
 8019ba6:	791b      	ldrb	r3, [r3, #4]
 8019ba8:	b1a3      	cbz	r3, 8019bd4 <dhcp_handle_ack+0x48>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8019baa:	4b22      	ldr	r3, [pc, #136]	; (8019c34 <dhcp_handle_ack+0xa8>)
 8019bac:	691b      	ldr	r3, [r3, #16]
 8019bae:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8019bb0:	4b1f      	ldr	r3, [pc, #124]	; (8019c30 <dhcp_handle_ack+0xa4>)
 8019bb2:	795b      	ldrb	r3, [r3, #5]
 8019bb4:	b193      	cbz	r3, 8019bdc <dhcp_handle_ack+0x50>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8019bb6:	4b1f      	ldr	r3, [pc, #124]	; (8019c34 <dhcp_handle_ack+0xa8>)
 8019bb8:	695b      	ldr	r3, [r3, #20]
 8019bba:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8019bbc:	690b      	ldr	r3, [r1, #16]
 8019bbe:	61e3      	str	r3, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8019bc0:	4b1b      	ldr	r3, [pc, #108]	; (8019c30 <dhcp_handle_ack+0xa4>)
 8019bc2:	799b      	ldrb	r3, [r3, #6]
 8019bc4:	b983      	cbnz	r3, 8019be8 <dhcp_handle_ack+0x5c>
    dhcp->subnet_mask_given = 0;
 8019bc6:	2300      	movs	r3, #0
 8019bc8:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8019bca:	4b19      	ldr	r3, [pc, #100]	; (8019c30 <dhcp_handle_ack+0xa4>)
 8019bcc:	79db      	ldrb	r3, [r3, #7]
 8019bce:	b99b      	cbnz	r3, 8019bf8 <dhcp_handle_ack+0x6c>
{
 8019bd0:	2400      	movs	r4, #0
 8019bd2:	e023      	b.n	8019c1c <dhcp_handle_ack+0x90>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8019bd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019bd6:	085b      	lsrs	r3, r3, #1
 8019bd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019bda:	e7e9      	b.n	8019bb0 <dhcp_handle_ack+0x24>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8019bdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019bde:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8019be2:	08db      	lsrs	r3, r3, #3
 8019be4:	6323      	str	r3, [r4, #48]	; 0x30
 8019be6:	e7e9      	b.n	8019bbc <dhcp_handle_ack+0x30>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8019be8:	4b12      	ldr	r3, [pc, #72]	; (8019c34 <dhcp_handle_ack+0xa8>)
 8019bea:	6998      	ldr	r0, [r3, #24]
 8019bec:	f7f8 fec1 	bl	8012972 <lwip_htonl>
 8019bf0:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 8019bf2:	2301      	movs	r3, #1
 8019bf4:	71e3      	strb	r3, [r4, #7]
 8019bf6:	e7e8      	b.n	8019bca <dhcp_handle_ack+0x3e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8019bf8:	4b0e      	ldr	r3, [pc, #56]	; (8019c34 <dhcp_handle_ack+0xa8>)
 8019bfa:	69d8      	ldr	r0, [r3, #28]
 8019bfc:	f7f8 feb9 	bl	8012972 <lwip_htonl>
 8019c00:	6260      	str	r0, [r4, #36]	; 0x24
 8019c02:	e7e5      	b.n	8019bd0 <dhcp_handle_ack+0x44>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8019c04:	4a0b      	ldr	r2, [pc, #44]	; (8019c34 <dhcp_handle_ack+0xa8>)
 8019c06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8019c0a:	f7f8 feb2 	bl	8012972 <lwip_htonl>
 8019c0e:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 8019c10:	a901      	add	r1, sp, #4
 8019c12:	4620      	mov	r0, r4
 8019c14:	f7f9 f8fa 	bl	8012e0c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8019c18:	3401      	adds	r4, #1
 8019c1a:	b2e4      	uxtb	r4, r4
 8019c1c:	2c01      	cmp	r4, #1
 8019c1e:	d805      	bhi.n	8019c2c <dhcp_handle_ack+0xa0>
 8019c20:	f104 0308 	add.w	r3, r4, #8
 8019c24:	4a02      	ldr	r2, [pc, #8]	; (8019c30 <dhcp_handle_ack+0xa4>)
 8019c26:	5cd2      	ldrb	r2, [r2, r3]
 8019c28:	2a00      	cmp	r2, #0
 8019c2a:	d1eb      	bne.n	8019c04 <dhcp_handle_ack+0x78>
}
 8019c2c:	b002      	add	sp, #8
 8019c2e:	bd10      	pop	{r4, pc}
 8019c30:	20007238 	.word	0x20007238
 8019c34:	20007244 	.word	0x20007244

08019c38 <dhcp_recv>:
{
 8019c38:	b570      	push	{r4, r5, r6, lr}
 8019c3a:	4614      	mov	r4, r2
  struct netif *netif = ip_current_input_netif();
 8019c3c:	4b36      	ldr	r3, [pc, #216]	; (8019d18 <dhcp_recv+0xe0>)
 8019c3e:	685d      	ldr	r5, [r3, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019c40:	6a6e      	ldr	r6, [r5, #36]	; 0x24
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8019c42:	6852      	ldr	r2, [r2, #4]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8019c44:	b1fe      	cbz	r6, 8019c86 <dhcp_recv+0x4e>
 8019c46:	7933      	ldrb	r3, [r6, #4]
 8019c48:	b1eb      	cbz	r3, 8019c86 <dhcp_recv+0x4e>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8019c4a:	8963      	ldrh	r3, [r4, #10]
 8019c4c:	2b2b      	cmp	r3, #43	; 0x2b
 8019c4e:	d91a      	bls.n	8019c86 <dhcp_recv+0x4e>
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8019c50:	7813      	ldrb	r3, [r2, #0]
 8019c52:	2b02      	cmp	r3, #2
 8019c54:	d117      	bne.n	8019c86 <dhcp_recv+0x4e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8019c56:	2300      	movs	r3, #0
 8019c58:	e001      	b.n	8019c5e <dhcp_recv+0x26>
 8019c5a:	3301      	adds	r3, #1
 8019c5c:	b2db      	uxtb	r3, r3
 8019c5e:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
 8019c62:	4299      	cmp	r1, r3
 8019c64:	d909      	bls.n	8019c7a <dhcp_recv+0x42>
 8019c66:	2b05      	cmp	r3, #5
 8019c68:	d807      	bhi.n	8019c7a <dhcp_recv+0x42>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8019c6a:	18e9      	adds	r1, r5, r3
 8019c6c:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
 8019c70:	18d1      	adds	r1, r2, r3
 8019c72:	7f09      	ldrb	r1, [r1, #28]
 8019c74:	4288      	cmp	r0, r1
 8019c76:	d0f0      	beq.n	8019c5a <dhcp_recv+0x22>
 8019c78:	e005      	b.n	8019c86 <dhcp_recv+0x4e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8019c7a:	6850      	ldr	r0, [r2, #4]
 8019c7c:	f7f8 fe79 	bl	8012972 <lwip_htonl>
 8019c80:	6833      	ldr	r3, [r6, #0]
 8019c82:	4298      	cmp	r0, r3
 8019c84:	d003      	beq.n	8019c8e <dhcp_recv+0x56>
  pbuf_free(p);
 8019c86:	4620      	mov	r0, r4
 8019c88:	f7f9 fec6 	bl	8013a18 <pbuf_free>
}
 8019c8c:	bd70      	pop	{r4, r5, r6, pc}
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8019c8e:	4631      	mov	r1, r6
 8019c90:	4620      	mov	r0, r4
 8019c92:	f7ff fd15 	bl	80196c0 <dhcp_parse_reply>
 8019c96:	2800      	cmp	r0, #0
 8019c98:	d1f5      	bne.n	8019c86 <dhcp_recv+0x4e>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8019c9a:	4b20      	ldr	r3, [pc, #128]	; (8019d1c <dhcp_recv+0xe4>)
 8019c9c:	785b      	ldrb	r3, [r3, #1]
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d0f1      	beq.n	8019c86 <dhcp_recv+0x4e>
  msg_in = (struct dhcp_msg *)p->payload;
 8019ca2:	6861      	ldr	r1, [r4, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8019ca4:	4b1e      	ldr	r3, [pc, #120]	; (8019d20 <dhcp_recv+0xe8>)
 8019ca6:	791b      	ldrb	r3, [r3, #4]
  if (msg_type == DHCP_ACK) {
 8019ca8:	2b05      	cmp	r3, #5
 8019caa:	d00a      	beq.n	8019cc2 <dhcp_recv+0x8a>
  else if ((msg_type == DHCP_NAK) &&
 8019cac:	2b06      	cmp	r3, #6
 8019cae:	d026      	beq.n	8019cfe <dhcp_recv+0xc6>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8019cb0:	2b02      	cmp	r3, #2
 8019cb2:	d1e8      	bne.n	8019c86 <dhcp_recv+0x4e>
 8019cb4:	7973      	ldrb	r3, [r6, #5]
 8019cb6:	2b06      	cmp	r3, #6
 8019cb8:	d1e5      	bne.n	8019c86 <dhcp_recv+0x4e>
    dhcp_handle_offer(netif, msg_in);
 8019cba:	4628      	mov	r0, r5
 8019cbc:	f7ff fafe 	bl	80192bc <dhcp_handle_offer>
 8019cc0:	e7e1      	b.n	8019c86 <dhcp_recv+0x4e>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8019cc2:	7973      	ldrb	r3, [r6, #5]
 8019cc4:	2b01      	cmp	r3, #1
 8019cc6:	d00a      	beq.n	8019cde <dhcp_recv+0xa6>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8019cc8:	3b03      	subs	r3, #3
 8019cca:	b2db      	uxtb	r3, r3
 8019ccc:	2b02      	cmp	r3, #2
 8019cce:	d8da      	bhi.n	8019c86 <dhcp_recv+0x4e>
      dhcp_handle_ack(netif, msg_in);
 8019cd0:	4628      	mov	r0, r5
 8019cd2:	f7ff ff5b 	bl	8019b8c <dhcp_handle_ack>
      dhcp_bind(netif);
 8019cd6:	4628      	mov	r0, r5
 8019cd8:	f7ff fbe8 	bl	80194ac <dhcp_bind>
 8019cdc:	e7d3      	b.n	8019c86 <dhcp_recv+0x4e>
      dhcp_handle_ack(netif, msg_in);
 8019cde:	4628      	mov	r0, r5
 8019ce0:	f7ff ff54 	bl	8019b8c <dhcp_handle_ack>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8019ce4:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 8019ce8:	f013 0f08 	tst.w	r3, #8
 8019cec:	d003      	beq.n	8019cf6 <dhcp_recv+0xbe>
        dhcp_check(netif);
 8019cee:	4628      	mov	r0, r5
 8019cf0:	f7ff fbc6 	bl	8019480 <dhcp_check>
 8019cf4:	e7c7      	b.n	8019c86 <dhcp_recv+0x4e>
        dhcp_bind(netif);
 8019cf6:	4628      	mov	r0, r5
 8019cf8:	f7ff fbd8 	bl	80194ac <dhcp_bind>
 8019cfc:	e7c3      	b.n	8019c86 <dhcp_recv+0x4e>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8019cfe:	7972      	ldrb	r2, [r6, #5]
  else if ((msg_type == DHCP_NAK) &&
 8019d00:	2a03      	cmp	r2, #3
 8019d02:	d005      	beq.n	8019d10 <dhcp_recv+0xd8>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8019d04:	2a01      	cmp	r2, #1
 8019d06:	d003      	beq.n	8019d10 <dhcp_recv+0xd8>
 8019d08:	2a04      	cmp	r2, #4
 8019d0a:	d001      	beq.n	8019d10 <dhcp_recv+0xd8>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8019d0c:	2a05      	cmp	r2, #5
 8019d0e:	d1cf      	bne.n	8019cb0 <dhcp_recv+0x78>
    dhcp_handle_nak(netif);
 8019d10:	4628      	mov	r0, r5
 8019d12:	f7ff fc61 	bl	80195d8 <dhcp_handle_nak>
 8019d16:	e7b6      	b.n	8019c86 <dhcp_recv+0x4e>
 8019d18:	20003c68 	.word	0x20003c68
 8019d1c:	20007238 	.word	0x20007238
 8019d20:	20007244 	.word	0x20007244

08019d24 <dhcp_arp_reply>:
{
 8019d24:	b508      	push	{r3, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019d26:	b130      	cbz	r0, 8019d36 <dhcp_arp_reply+0x12>
 8019d28:	4602      	mov	r2, r0
  dhcp = netif_dhcp_data(netif);
 8019d2a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8019d2c:	b113      	cbz	r3, 8019d34 <dhcp_arp_reply+0x10>
 8019d2e:	7958      	ldrb	r0, [r3, #5]
 8019d30:	2808      	cmp	r0, #8
 8019d32:	d008      	beq.n	8019d46 <dhcp_arp_reply+0x22>
}
 8019d34:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019d36:	4b08      	ldr	r3, [pc, #32]	; (8019d58 <dhcp_arp_reply+0x34>)
 8019d38:	f240 328b 	movw	r2, #907	; 0x38b
 8019d3c:	4907      	ldr	r1, [pc, #28]	; (8019d5c <dhcp_arp_reply+0x38>)
 8019d3e:	4808      	ldr	r0, [pc, #32]	; (8019d60 <dhcp_arp_reply+0x3c>)
 8019d40:	f001 fe9e 	bl	801ba80 <iprintf>
 8019d44:	e7f6      	b.n	8019d34 <dhcp_arp_reply+0x10>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8019d46:	6809      	ldr	r1, [r1, #0]
 8019d48:	69db      	ldr	r3, [r3, #28]
 8019d4a:	4299      	cmp	r1, r3
 8019d4c:	d1f2      	bne.n	8019d34 <dhcp_arp_reply+0x10>
      dhcp_decline(netif);
 8019d4e:	4610      	mov	r0, r2
 8019d50:	f7ff fb48 	bl	80193e4 <dhcp_decline>
 8019d54:	e7ee      	b.n	8019d34 <dhcp_arp_reply+0x10>
 8019d56:	bf00      	nop
 8019d58:	0801fcd8 	.word	0x0801fcd8
 8019d5c:	0801cc94 	.word	0x0801cc94
 8019d60:	0801cca4 	.word	0x0801cca4

08019d64 <dhcp_renew>:
{
 8019d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d68:	b084      	sub	sp, #16
 8019d6a:	4680      	mov	r8, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019d6c:	6a45      	ldr	r5, [r0, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8019d6e:	2105      	movs	r1, #5
 8019d70:	4628      	mov	r0, r5
 8019d72:	f7fe ff8b 	bl	8018c8c <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019d76:	f10d 030e 	add.w	r3, sp, #14
 8019d7a:	2203      	movs	r2, #3
 8019d7c:	4629      	mov	r1, r5
 8019d7e:	4640      	mov	r0, r8
 8019d80:	f7ff f808 	bl	8018d94 <dhcp_create_msg>
  if (p_out != NULL) {
 8019d84:	2800      	cmp	r0, #0
 8019d86:	d04b      	beq.n	8019e20 <dhcp_renew+0xbc>
 8019d88:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019d8a:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019d8c:	36f0      	adds	r6, #240	; 0xf0
 8019d8e:	2302      	movs	r3, #2
 8019d90:	2239      	movs	r2, #57	; 0x39
 8019d92:	4631      	mov	r1, r6
 8019d94:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8019d98:	f7fe ff9e 	bl	8018cd8 <dhcp_option>
 8019d9c:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8019da0:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 8019da4:	4631      	mov	r1, r6
 8019da6:	f7fe ff79 	bl	8018c9c <dhcp_option_short>
 8019daa:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019dae:	2304      	movs	r3, #4
 8019db0:	2237      	movs	r2, #55	; 0x37
 8019db2:	4631      	mov	r1, r6
 8019db4:	f7fe ff90 	bl	8018cd8 <dhcp_option>
 8019db8:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019dbc:	2400      	movs	r4, #0
 8019dbe:	e00a      	b.n	8019dd6 <dhcp_renew+0x72>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019dc0:	4b20      	ldr	r3, [pc, #128]	; (8019e44 <dhcp_renew+0xe0>)
 8019dc2:	5d1a      	ldrb	r2, [r3, r4]
 8019dc4:	4631      	mov	r1, r6
 8019dc6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8019dca:	f7fe ffa3 	bl	8018d14 <dhcp_option_byte>
 8019dce:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019dd2:	3401      	adds	r4, #1
 8019dd4:	b2e4      	uxtb	r4, r4
 8019dd6:	2c03      	cmp	r4, #3
 8019dd8:	d9f2      	bls.n	8019dc0 <dhcp_renew+0x5c>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019dda:	463a      	mov	r2, r7
 8019ddc:	4631      	mov	r1, r6
 8019dde:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8019de2:	f7ff f875 	bl	8018ed0 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019de6:	f8cd 8000 	str.w	r8, [sp]
 8019dea:	2343      	movs	r3, #67	; 0x43
 8019dec:	f105 0218 	add.w	r2, r5, #24
 8019df0:	4639      	mov	r1, r7
 8019df2:	4815      	ldr	r0, [pc, #84]	; (8019e48 <dhcp_renew+0xe4>)
 8019df4:	6800      	ldr	r0, [r0, #0]
 8019df6:	f7fe fe07 	bl	8018a08 <udp_sendto_if>
 8019dfa:	4604      	mov	r4, r0
    pbuf_free(p_out);
 8019dfc:	4638      	mov	r0, r7
 8019dfe:	f7f9 fe0b 	bl	8013a18 <pbuf_free>
  if (dhcp->tries < 255) {
 8019e02:	79ab      	ldrb	r3, [r5, #6]
 8019e04:	2bff      	cmp	r3, #255	; 0xff
 8019e06:	d001      	beq.n	8019e0c <dhcp_renew+0xa8>
    dhcp->tries++;
 8019e08:	3301      	adds	r3, #1
 8019e0a:	71ab      	strb	r3, [r5, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8019e0c:	79ab      	ldrb	r3, [r5, #6]
 8019e0e:	2b09      	cmp	r3, #9
 8019e10:	d809      	bhi.n	8019e26 <dhcp_renew+0xc2>
 8019e12:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8019e16:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8019e1a:	011b      	lsls	r3, r3, #4
 8019e1c:	b29b      	uxth	r3, r3
 8019e1e:	e004      	b.n	8019e2a <dhcp_renew+0xc6>
    result = ERR_MEM;
 8019e20:	f04f 34ff 	mov.w	r4, #4294967295
 8019e24:	e7ed      	b.n	8019e02 <dhcp_renew+0x9e>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8019e26:	f644 6320 	movw	r3, #20000	; 0x4e20
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019e2a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8019e2e:	4a07      	ldr	r2, [pc, #28]	; (8019e4c <dhcp_renew+0xe8>)
 8019e30:	fb82 1203 	smull	r1, r2, r2, r3
 8019e34:	17db      	asrs	r3, r3, #31
 8019e36:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8019e3a:	812b      	strh	r3, [r5, #8]
}
 8019e3c:	4620      	mov	r0, r4
 8019e3e:	b004      	add	sp, #16
 8019e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e44:	0802003c 	.word	0x0802003c
 8019e48:	20000a28 	.word	0x20000a28
 8019e4c:	10624dd3 	.word	0x10624dd3

08019e50 <dhcp_t1_timeout>:
{
 8019e50:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019e52:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019e54:	7963      	ldrb	r3, [r4, #5]
 8019e56:	2b01      	cmp	r3, #1
 8019e58:	d003      	beq.n	8019e62 <dhcp_t1_timeout+0x12>
 8019e5a:	2b0a      	cmp	r3, #10
 8019e5c:	d001      	beq.n	8019e62 <dhcp_t1_timeout+0x12>
 8019e5e:	2b05      	cmp	r3, #5
 8019e60:	d10b      	bne.n	8019e7a <dhcp_t1_timeout+0x2a>
    dhcp_renew(netif);
 8019e62:	f7ff ff7f 	bl	8019d64 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8019e66:	89a3      	ldrh	r3, [r4, #12]
 8019e68:	8a62      	ldrh	r2, [r4, #18]
 8019e6a:	1a9b      	subs	r3, r3, r2
 8019e6c:	2b01      	cmp	r3, #1
 8019e6e:	dd04      	ble.n	8019e7a <dhcp_t1_timeout+0x2a>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8019e70:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8019e74:	f3c3 034f 	ubfx	r3, r3, #1, #16
 8019e78:	81e3      	strh	r3, [r4, #14]
}
 8019e7a:	bd10      	pop	{r4, pc}

08019e7c <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8019e7c:	b188      	cbz	r0, 8019ea2 <dhcp_supplied_address+0x26>
 8019e7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019e80:	b18b      	cbz	r3, 8019ea6 <dhcp_supplied_address+0x2a>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8019e82:	795b      	ldrb	r3, [r3, #5]
 8019e84:	2b0a      	cmp	r3, #10
 8019e86:	d007      	beq.n	8019e98 <dhcp_supplied_address+0x1c>
 8019e88:	2b05      	cmp	r3, #5
 8019e8a:	d008      	beq.n	8019e9e <dhcp_supplied_address+0x22>
 8019e8c:	2b04      	cmp	r3, #4
 8019e8e:	d001      	beq.n	8019e94 <dhcp_supplied_address+0x18>
 8019e90:	2000      	movs	r0, #0
 8019e92:	e002      	b.n	8019e9a <dhcp_supplied_address+0x1e>
 8019e94:	2001      	movs	r0, #1
 8019e96:	e000      	b.n	8019e9a <dhcp_supplied_address+0x1e>
 8019e98:	2001      	movs	r0, #1
 8019e9a:	b2c0      	uxtb	r0, r0
 8019e9c:	4770      	bx	lr
 8019e9e:	2001      	movs	r0, #1
 8019ea0:	e7fb      	b.n	8019e9a <dhcp_supplied_address+0x1e>
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
 8019ea2:	2000      	movs	r0, #0
 8019ea4:	4770      	bx	lr
 8019ea6:	2000      	movs	r0, #0
}
 8019ea8:	4770      	bx	lr
	...

08019eac <dhcp_release_and_stop>:
{
 8019eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019eb0:	b084      	sub	sp, #16
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019eb2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (dhcp == NULL) {
 8019eb4:	b1fc      	cbz	r4, 8019ef6 <dhcp_release_and_stop+0x4a>
 8019eb6:	4605      	mov	r5, r0
  if (dhcp->state == DHCP_STATE_OFF) {
 8019eb8:	7963      	ldrb	r3, [r4, #5]
 8019eba:	b1e3      	cbz	r3, 8019ef6 <dhcp_release_and_stop+0x4a>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8019ebc:	69a3      	ldr	r3, [r4, #24]
 8019ebe:	9303      	str	r3, [sp, #12]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8019ec0:	2300      	movs	r3, #0
 8019ec2:	61a3      	str	r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8019ec4:	61e3      	str	r3, [r4, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8019ec6:	6223      	str	r3, [r4, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8019ec8:	6263      	str	r3, [r4, #36]	; 0x24
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8019eca:	6323      	str	r3, [r4, #48]	; 0x30
 8019ecc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019ece:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8019ed0:	82a3      	strh	r3, [r4, #20]
 8019ed2:	8263      	strh	r3, [r4, #18]
 8019ed4:	8223      	strh	r3, [r4, #16]
 8019ed6:	81e3      	strh	r3, [r4, #14]
  if (dhcp_supplied_address(netif)) {
 8019ed8:	f7ff ffd0 	bl	8019e7c <dhcp_supplied_address>
 8019edc:	b970      	cbnz	r0, 8019efc <dhcp_release_and_stop+0x50>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8019ede:	4922      	ldr	r1, [pc, #136]	; (8019f68 <dhcp_release_and_stop+0xbc>)
 8019ee0:	460b      	mov	r3, r1
 8019ee2:	460a      	mov	r2, r1
 8019ee4:	4628      	mov	r0, r5
 8019ee6:	f7f9 fb71 	bl	80135cc <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8019eea:	2100      	movs	r1, #0
 8019eec:	4620      	mov	r0, r4
 8019eee:	f7fe fecd 	bl	8018c8c <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 8019ef2:	7923      	ldrb	r3, [r4, #4]
 8019ef4:	bb93      	cbnz	r3, 8019f5c <dhcp_release_and_stop+0xb0>
}
 8019ef6:	b004      	add	sp, #16
 8019ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8019efc:	f10d 030a 	add.w	r3, sp, #10
 8019f00:	2207      	movs	r2, #7
 8019f02:	4621      	mov	r1, r4
 8019f04:	4628      	mov	r0, r5
 8019f06:	f7fe ff45 	bl	8018d94 <dhcp_create_msg>
    if (p_out != NULL) {
 8019f0a:	4607      	mov	r7, r0
 8019f0c:	2800      	cmp	r0, #0
 8019f0e:	d0e6      	beq.n	8019ede <dhcp_release_and_stop+0x32>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019f10:	6846      	ldr	r6, [r0, #4]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8019f12:	36f0      	adds	r6, #240	; 0xf0
 8019f14:	2304      	movs	r3, #4
 8019f16:	2236      	movs	r2, #54	; 0x36
 8019f18:	4631      	mov	r1, r6
 8019f1a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8019f1e:	f7fe fedb 	bl	8018cd8 <dhcp_option>
 8019f22:	4680      	mov	r8, r0
 8019f24:	f8ad 000a 	strh.w	r0, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8019f28:	9803      	ldr	r0, [sp, #12]
 8019f2a:	f7f8 fd22 	bl	8012972 <lwip_htonl>
 8019f2e:	4602      	mov	r2, r0
 8019f30:	4631      	mov	r1, r6
 8019f32:	4640      	mov	r0, r8
 8019f34:	f7fe ff06 	bl	8018d44 <dhcp_option_long>
 8019f38:	f8ad 000a 	strh.w	r0, [sp, #10]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019f3c:	463a      	mov	r2, r7
 8019f3e:	4631      	mov	r1, r6
 8019f40:	f7fe ffc6 	bl	8018ed0 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019f44:	9500      	str	r5, [sp, #0]
 8019f46:	2343      	movs	r3, #67	; 0x43
 8019f48:	aa03      	add	r2, sp, #12
 8019f4a:	4639      	mov	r1, r7
 8019f4c:	4807      	ldr	r0, [pc, #28]	; (8019f6c <dhcp_release_and_stop+0xc0>)
 8019f4e:	6800      	ldr	r0, [r0, #0]
 8019f50:	f7fe fd5a 	bl	8018a08 <udp_sendto_if>
      pbuf_free(p_out);
 8019f54:	4638      	mov	r0, r7
 8019f56:	f7f9 fd5f 	bl	8013a18 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
 8019f5a:	e7c0      	b.n	8019ede <dhcp_release_and_stop+0x32>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8019f5c:	f7ff fb4e 	bl	80195fc <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8019f60:	2300      	movs	r3, #0
 8019f62:	7123      	strb	r3, [r4, #4]
 8019f64:	e7c7      	b.n	8019ef6 <dhcp_release_and_stop+0x4a>
 8019f66:	bf00      	nop
 8019f68:	0802035c 	.word	0x0802035c
 8019f6c:	20000a28 	.word	0x20000a28

08019f70 <dhcp_start>:
{
 8019f70:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8019f72:	b328      	cbz	r0, 8019fc0 <dhcp_start+0x50>
 8019f74:	4604      	mov	r4, r0
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8019f76:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8019f7a:	f013 0f01 	tst.w	r3, #1
 8019f7e:	d029      	beq.n	8019fd4 <dhcp_start+0x64>
  dhcp = netif_dhcp_data(netif);
 8019f80:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8019f82:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8019f84:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8019f88:	d343      	bcc.n	801a012 <dhcp_start+0xa2>
  if (dhcp == NULL) {
 8019f8a:	b36d      	cbz	r5, 8019fe8 <dhcp_start+0x78>
    if (dhcp->pcb_allocated != 0) {
 8019f8c:	792b      	ldrb	r3, [r5, #4]
 8019f8e:	bb93      	cbnz	r3, 8019ff6 <dhcp_start+0x86>
  memset(dhcp, 0, sizeof(struct dhcp));
 8019f90:	2234      	movs	r2, #52	; 0x34
 8019f92:	2100      	movs	r1, #0
 8019f94:	4628      	mov	r0, r5
 8019f96:	f001 fd6b 	bl	801ba70 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8019f9a:	f7ff fb53 	bl	8019644 <dhcp_inc_pcb_refcount>
 8019f9e:	4606      	mov	r6, r0
 8019fa0:	2800      	cmp	r0, #0
 8019fa2:	d13c      	bne.n	801a01e <dhcp_start+0xae>
  dhcp->pcb_allocated = 1;
 8019fa4:	2301      	movs	r3, #1
 8019fa6:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8019fa8:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8019fac:	f013 0f04 	tst.w	r3, #4
 8019fb0:	d024      	beq.n	8019ffc <dhcp_start+0x8c>
  result = dhcp_discover(netif);
 8019fb2:	4620      	mov	r0, r4
 8019fb4:	f7ff f99c 	bl	80192f0 <dhcp_discover>
  if (result != ERR_OK) {
 8019fb8:	4606      	mov	r6, r0
 8019fba:	bb20      	cbnz	r0, 801a006 <dhcp_start+0x96>
}
 8019fbc:	4630      	mov	r0, r6
 8019fbe:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8019fc0:	4b18      	ldr	r3, [pc, #96]	; (801a024 <dhcp_start+0xb4>)
 8019fc2:	f240 22e7 	movw	r2, #743	; 0x2e7
 8019fc6:	4918      	ldr	r1, [pc, #96]	; (801a028 <dhcp_start+0xb8>)
 8019fc8:	4818      	ldr	r0, [pc, #96]	; (801a02c <dhcp_start+0xbc>)
 8019fca:	f001 fd59 	bl	801ba80 <iprintf>
 8019fce:	f06f 060f 	mvn.w	r6, #15
 8019fd2:	e7f3      	b.n	8019fbc <dhcp_start+0x4c>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8019fd4:	4b13      	ldr	r3, [pc, #76]	; (801a024 <dhcp_start+0xb4>)
 8019fd6:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8019fda:	4915      	ldr	r1, [pc, #84]	; (801a030 <dhcp_start+0xc0>)
 8019fdc:	4813      	ldr	r0, [pc, #76]	; (801a02c <dhcp_start+0xbc>)
 8019fde:	f001 fd4f 	bl	801ba80 <iprintf>
 8019fe2:	f06f 060f 	mvn.w	r6, #15
 8019fe6:	e7e9      	b.n	8019fbc <dhcp_start+0x4c>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8019fe8:	2034      	movs	r0, #52	; 0x34
 8019fea:	f7f9 f92b 	bl	8013244 <mem_malloc>
    if (dhcp == NULL) {
 8019fee:	4605      	mov	r5, r0
 8019ff0:	b190      	cbz	r0, 801a018 <dhcp_start+0xa8>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8019ff2:	6260      	str	r0, [r4, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 8019ff4:	e7cc      	b.n	8019f90 <dhcp_start+0x20>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8019ff6:	f7ff fb01 	bl	80195fc <dhcp_dec_pcb_refcount>
 8019ffa:	e7c9      	b.n	8019f90 <dhcp_start+0x20>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8019ffc:	2102      	movs	r1, #2
 8019ffe:	4628      	mov	r0, r5
 801a000:	f7fe fe44 	bl	8018c8c <dhcp_set_state>
    return ERR_OK;
 801a004:	e7da      	b.n	8019fbc <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 801a006:	4620      	mov	r0, r4
 801a008:	f7ff ff50 	bl	8019eac <dhcp_release_and_stop>
    return ERR_MEM;
 801a00c:	f04f 36ff 	mov.w	r6, #4294967295
 801a010:	e7d4      	b.n	8019fbc <dhcp_start+0x4c>
    return ERR_MEM;
 801a012:	f04f 36ff 	mov.w	r6, #4294967295
 801a016:	e7d1      	b.n	8019fbc <dhcp_start+0x4c>
      return ERR_MEM;
 801a018:	f04f 36ff 	mov.w	r6, #4294967295
 801a01c:	e7ce      	b.n	8019fbc <dhcp_start+0x4c>
    return ERR_MEM;
 801a01e:	f04f 36ff 	mov.w	r6, #4294967295
 801a022:	e7cb      	b.n	8019fbc <dhcp_start+0x4c>
 801a024:	0801fcd8 	.word	0x0801fcd8
 801a028:	0801cc94 	.word	0x0801cc94
 801a02c:	0801cca4 	.word	0x0801cca4
 801a030:	08020018 	.word	0x08020018

0801a034 <dhcp_coarse_tmr>:
{
 801a034:	b510      	push	{r4, lr}
  NETIF_FOREACH(netif) {
 801a036:	4b17      	ldr	r3, [pc, #92]	; (801a094 <dhcp_coarse_tmr+0x60>)
 801a038:	681c      	ldr	r4, [r3, #0]
 801a03a:	e006      	b.n	801a04a <dhcp_coarse_tmr+0x16>
        dhcp_release_and_stop(netif);
 801a03c:	4620      	mov	r0, r4
 801a03e:	f7ff ff35 	bl	8019eac <dhcp_release_and_stop>
        dhcp_start(netif);
 801a042:	4620      	mov	r0, r4
 801a044:	f7ff ff94 	bl	8019f70 <dhcp_start>
  NETIF_FOREACH(netif) {
 801a048:	6824      	ldr	r4, [r4, #0]
 801a04a:	b314      	cbz	r4, 801a092 <dhcp_coarse_tmr+0x5e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a04c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d0fa      	beq.n	801a048 <dhcp_coarse_tmr+0x14>
 801a052:	795a      	ldrb	r2, [r3, #5]
 801a054:	2a00      	cmp	r2, #0
 801a056:	d0f7      	beq.n	801a048 <dhcp_coarse_tmr+0x14>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801a058:	8a99      	ldrh	r1, [r3, #20]
 801a05a:	b129      	cbz	r1, 801a068 <dhcp_coarse_tmr+0x34>
 801a05c:	8a5a      	ldrh	r2, [r3, #18]
 801a05e:	3201      	adds	r2, #1
 801a060:	b292      	uxth	r2, r2
 801a062:	825a      	strh	r2, [r3, #18]
 801a064:	4291      	cmp	r1, r2
 801a066:	d0e9      	beq.n	801a03c <dhcp_coarse_tmr+0x8>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801a068:	8a1a      	ldrh	r2, [r3, #16]
 801a06a:	b11a      	cbz	r2, 801a074 <dhcp_coarse_tmr+0x40>
 801a06c:	1e51      	subs	r1, r2, #1
 801a06e:	8219      	strh	r1, [r3, #16]
 801a070:	2a01      	cmp	r2, #1
 801a072:	d00a      	beq.n	801a08a <dhcp_coarse_tmr+0x56>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801a074:	89da      	ldrh	r2, [r3, #14]
 801a076:	2a00      	cmp	r2, #0
 801a078:	d0e6      	beq.n	801a048 <dhcp_coarse_tmr+0x14>
 801a07a:	1e51      	subs	r1, r2, #1
 801a07c:	81d9      	strh	r1, [r3, #14]
 801a07e:	2a01      	cmp	r2, #1
 801a080:	d1e2      	bne.n	801a048 <dhcp_coarse_tmr+0x14>
        dhcp_t1_timeout(netif);
 801a082:	4620      	mov	r0, r4
 801a084:	f7ff fee4 	bl	8019e50 <dhcp_t1_timeout>
 801a088:	e7de      	b.n	801a048 <dhcp_coarse_tmr+0x14>
        dhcp_t2_timeout(netif);
 801a08a:	4620      	mov	r0, r4
 801a08c:	f7fe ffb2 	bl	8018ff4 <dhcp_t2_timeout>
 801a090:	e7da      	b.n	801a048 <dhcp_coarse_tmr+0x14>
}
 801a092:	bd10      	pop	{r4, pc}
 801a094:	2000720c 	.word	0x2000720c

0801a098 <dhcp_timeout>:
{
 801a098:	b510      	push	{r4, lr}
 801a09a:	4604      	mov	r4, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a09c:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801a09e:	7953      	ldrb	r3, [r2, #5]
 801a0a0:	2b0c      	cmp	r3, #12
 801a0a2:	d00d      	beq.n	801a0c0 <dhcp_timeout+0x28>
 801a0a4:	2b06      	cmp	r3, #6
 801a0a6:	d00b      	beq.n	801a0c0 <dhcp_timeout+0x28>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801a0a8:	2b01      	cmp	r3, #1
 801a0aa:	d00d      	beq.n	801a0c8 <dhcp_timeout+0x30>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801a0ac:	2b08      	cmp	r3, #8
 801a0ae:	d017      	beq.n	801a0e0 <dhcp_timeout+0x48>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801a0b0:	2b03      	cmp	r3, #3
 801a0b2:	d108      	bne.n	801a0c6 <dhcp_timeout+0x2e>
    if (dhcp->tries < REBOOT_TRIES) {
 801a0b4:	7993      	ldrb	r3, [r2, #6]
 801a0b6:	2b01      	cmp	r3, #1
 801a0b8:	d91b      	bls.n	801a0f2 <dhcp_timeout+0x5a>
      dhcp_discover(netif);
 801a0ba:	f7ff f919 	bl	80192f0 <dhcp_discover>
}
 801a0be:	e002      	b.n	801a0c6 <dhcp_timeout+0x2e>
    dhcp_discover(netif);
 801a0c0:	4620      	mov	r0, r4
 801a0c2:	f7ff f915 	bl	80192f0 <dhcp_discover>
}
 801a0c6:	bd10      	pop	{r4, pc}
    if (dhcp->tries <= 5) {
 801a0c8:	7993      	ldrb	r3, [r2, #6]
 801a0ca:	2b05      	cmp	r3, #5
 801a0cc:	d802      	bhi.n	801a0d4 <dhcp_timeout+0x3c>
      dhcp_select(netif);
 801a0ce:	f7ff f833 	bl	8019138 <dhcp_select>
 801a0d2:	e7f8      	b.n	801a0c6 <dhcp_timeout+0x2e>
      dhcp_release_and_stop(netif);
 801a0d4:	f7ff feea 	bl	8019eac <dhcp_release_and_stop>
      dhcp_start(netif);
 801a0d8:	4620      	mov	r0, r4
 801a0da:	f7ff ff49 	bl	8019f70 <dhcp_start>
 801a0de:	e7f2      	b.n	801a0c6 <dhcp_timeout+0x2e>
    if (dhcp->tries <= 1) {
 801a0e0:	7993      	ldrb	r3, [r2, #6]
 801a0e2:	2b01      	cmp	r3, #1
 801a0e4:	d902      	bls.n	801a0ec <dhcp_timeout+0x54>
      dhcp_bind(netif);
 801a0e6:	f7ff f9e1 	bl	80194ac <dhcp_bind>
 801a0ea:	e7ec      	b.n	801a0c6 <dhcp_timeout+0x2e>
      dhcp_check(netif);
 801a0ec:	f7ff f9c8 	bl	8019480 <dhcp_check>
 801a0f0:	e7e9      	b.n	801a0c6 <dhcp_timeout+0x2e>
      dhcp_reboot(netif);
 801a0f2:	f7fe ff97 	bl	8019024 <dhcp_reboot>
 801a0f6:	e7e6      	b.n	801a0c6 <dhcp_timeout+0x2e>

0801a0f8 <dhcp_fine_tmr>:
{
 801a0f8:	b510      	push	{r4, lr}
  NETIF_FOREACH(netif) {
 801a0fa:	4b0b      	ldr	r3, [pc, #44]	; (801a128 <dhcp_fine_tmr+0x30>)
 801a0fc:	681c      	ldr	r4, [r3, #0]
 801a0fe:	e002      	b.n	801a106 <dhcp_fine_tmr+0xe>
      } else if (dhcp->request_timeout == 1) {
 801a100:	2a01      	cmp	r2, #1
 801a102:	d00a      	beq.n	801a11a <dhcp_fine_tmr+0x22>
  NETIF_FOREACH(netif) {
 801a104:	6824      	ldr	r4, [r4, #0]
 801a106:	b174      	cbz	r4, 801a126 <dhcp_fine_tmr+0x2e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a108:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (dhcp != NULL) {
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	d0fa      	beq.n	801a104 <dhcp_fine_tmr+0xc>
      if (dhcp->request_timeout > 1) {
 801a10e:	891a      	ldrh	r2, [r3, #8]
 801a110:	2a01      	cmp	r2, #1
 801a112:	d9f5      	bls.n	801a100 <dhcp_fine_tmr+0x8>
        dhcp->request_timeout--;
 801a114:	3a01      	subs	r2, #1
 801a116:	811a      	strh	r2, [r3, #8]
 801a118:	e7f4      	b.n	801a104 <dhcp_fine_tmr+0xc>
        dhcp->request_timeout--;
 801a11a:	3a01      	subs	r2, #1
 801a11c:	811a      	strh	r2, [r3, #8]
        dhcp_timeout(netif);
 801a11e:	4620      	mov	r0, r4
 801a120:	f7ff ffba 	bl	801a098 <dhcp_timeout>
 801a124:	e7ee      	b.n	801a104 <dhcp_fine_tmr+0xc>
}
 801a126:	bd10      	pop	{r4, pc}
 801a128:	2000720c 	.word	0x2000720c

0801a12c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a12c:	b510      	push	{r4, lr}
 801a12e:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a130:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 801a134:	4b0e      	ldr	r3, [pc, #56]	; (801a170 <etharp_free_entry+0x44>)
 801a136:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 801a13a:	b138      	cbz	r0, 801a14c <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a13c:	f7f9 fc6c 	bl	8013a18 <pbuf_free>
    arp_table[i].q = NULL;
 801a140:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801a144:	00db      	lsls	r3, r3, #3
 801a146:	4a0a      	ldr	r2, [pc, #40]	; (801a170 <etharp_free_entry+0x44>)
 801a148:	2100      	movs	r1, #0
 801a14a:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a14c:	4808      	ldr	r0, [pc, #32]	; (801a170 <etharp_free_entry+0x44>)
 801a14e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801a152:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801a156:	2200      	movs	r2, #0
 801a158:	751a      	strb	r2, [r3, #20]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 801a15a:	825a      	strh	r2, [r3, #18]
  arp_table[i].netif = NULL;
 801a15c:	609a      	str	r2, [r3, #8]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 801a15e:	605a      	str	r2, [r3, #4]
  arp_table[i].ethaddr = ethzero;
 801a160:	461c      	mov	r4, r3
 801a162:	4b04      	ldr	r3, [pc, #16]	; (801a174 <etharp_free_entry+0x48>)
 801a164:	6818      	ldr	r0, [r3, #0]
 801a166:	60e0      	str	r0, [r4, #12]
 801a168:	889b      	ldrh	r3, [r3, #4]
 801a16a:	8223      	strh	r3, [r4, #16]
#endif /* LWIP_DEBUG */
}
 801a16c:	bd10      	pop	{r4, pc}
 801a16e:	bf00      	nop
 801a170:	20000a34 	.word	0x20000a34
 801a174:	080205c0 	.word	0x080205c0

0801a178 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801a178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a17c:	b083      	sub	sp, #12
 801a17e:	4607      	mov	r7, r0
 801a180:	4690      	mov	r8, r2
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801a182:	f04f 0e00 	mov.w	lr, #0
 801a186:	f8cd e000 	str.w	lr, [sp]
 801a18a:	46f3      	mov	fp, lr
  s16_t old_queue = ARP_TABLE_SIZE;
 801a18c:	f04f 0a0a 	mov.w	sl, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a190:	4673      	mov	r3, lr
  s16_t empty = ARP_TABLE_SIZE;
 801a192:	4656      	mov	r6, sl
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801a194:	46d1      	mov	r9, sl
 801a196:	f8cd a004 	str.w	sl, [sp, #4]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a19a:	e003      	b.n	801a1a4 <etharp_find_entry+0x2c>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a19c:	b968      	cbnz	r0, 801a1ba <etharp_find_entry+0x42>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801a19e:	461e      	mov	r6, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a1a0:	3301      	adds	r3, #1
 801a1a2:	b21b      	sxth	r3, r3
 801a1a4:	2b09      	cmp	r3, #9
 801a1a6:	dc4b      	bgt.n	801a240 <etharp_find_entry+0xc8>
    u8_t state = arp_table[i].state;
 801a1a8:	461c      	mov	r4, r3
 801a1aa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801a1ae:	485c      	ldr	r0, [pc, #368]	; (801a320 <etharp_find_entry+0x1a8>)
 801a1b0:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 801a1b4:	7d10      	ldrb	r0, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a1b6:	2e0a      	cmp	r6, #10
 801a1b8:	d0f0      	beq.n	801a19c <etharp_find_entry+0x24>
    } else if (state != ETHARP_STATE_EMPTY) {
 801a1ba:	2800      	cmp	r0, #0
 801a1bc:	d0f0      	beq.n	801a1a0 <etharp_find_entry+0x28>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801a1be:	b147      	cbz	r7, 801a1d2 <etharp_find_entry+0x5a>
 801a1c0:	683a      	ldr	r2, [r7, #0]
 801a1c2:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
 801a1c6:	4d56      	ldr	r5, [pc, #344]	; (801a320 <etharp_find_entry+0x1a8>)
 801a1c8:	eb05 05cc 	add.w	r5, r5, ip, lsl #3
 801a1cc:	686d      	ldr	r5, [r5, #4]
 801a1ce:	42aa      	cmp	r2, r5
 801a1d0:	d00e      	beq.n	801a1f0 <etharp_find_entry+0x78>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801a1d2:	2801      	cmp	r0, #1
 801a1d4:	d018      	beq.n	801a208 <etharp_find_entry+0x90>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a1d6:	2801      	cmp	r0, #1
 801a1d8:	d9e2      	bls.n	801a1a0 <etharp_find_entry+0x28>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a1da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a1de:	4a50      	ldr	r2, [pc, #320]	; (801a320 <etharp_find_entry+0x1a8>)
 801a1e0:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 801a1e4:	8a62      	ldrh	r2, [r4, #18]
 801a1e6:	4572      	cmp	r2, lr
 801a1e8:	d3da      	bcc.n	801a1a0 <etharp_find_entry+0x28>
            old_stable = i;
            age_stable = arp_table[i].ctime;
 801a1ea:	4696      	mov	lr, r2
            old_stable = i;
 801a1ec:	4699      	mov	r9, r3
 801a1ee:	e7d7      	b.n	801a1a0 <etharp_find_entry+0x28>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801a1f0:	f1b8 0f00 	cmp.w	r8, #0
 801a1f4:	f000 808c 	beq.w	801a310 <etharp_find_entry+0x198>
 801a1f8:	4d49      	ldr	r5, [pc, #292]	; (801a320 <etharp_find_entry+0x1a8>)
 801a1fa:	eb05 02cc 	add.w	r2, r5, ip, lsl #3
 801a1fe:	6892      	ldr	r2, [r2, #8]
 801a200:	4542      	cmp	r2, r8
 801a202:	d1e6      	bne.n	801a1d2 <etharp_find_entry+0x5a>
        return i;
 801a204:	461e      	mov	r6, r3
 801a206:	e055      	b.n	801a2b4 <etharp_find_entry+0x13c>
        if (arp_table[i].q != NULL) {
 801a208:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801a20c:	4844      	ldr	r0, [pc, #272]	; (801a320 <etharp_find_entry+0x1a8>)
 801a20e:	f850 2032 	ldr.w	r2, [r0, r2, lsl #3]
 801a212:	b14a      	cbz	r2, 801a228 <etharp_find_entry+0xb0>
          if (arp_table[i].ctime >= age_queue) {
 801a214:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a218:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 801a21c:	8a62      	ldrh	r2, [r4, #18]
 801a21e:	455a      	cmp	r2, fp
 801a220:	d3be      	bcc.n	801a1a0 <etharp_find_entry+0x28>
            age_queue = arp_table[i].ctime;
 801a222:	4693      	mov	fp, r2
            old_queue = i;
 801a224:	469a      	mov	sl, r3
 801a226:	e7bb      	b.n	801a1a0 <etharp_find_entry+0x28>
          if (arp_table[i].ctime >= age_pending) {
 801a228:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a22c:	4a3c      	ldr	r2, [pc, #240]	; (801a320 <etharp_find_entry+0x1a8>)
 801a22e:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 801a232:	8a62      	ldrh	r2, [r4, #18]
 801a234:	9800      	ldr	r0, [sp, #0]
 801a236:	4282      	cmp	r2, r0
 801a238:	d3b2      	bcc.n	801a1a0 <etharp_find_entry+0x28>
            age_pending = arp_table[i].ctime;
 801a23a:	9200      	str	r2, [sp, #0]
            old_pending = i;
 801a23c:	9301      	str	r3, [sp, #4]
 801a23e:	e7af      	b.n	801a1a0 <etharp_find_entry+0x28>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a240:	f011 0f02 	tst.w	r1, #2
 801a244:	d166      	bne.n	801a314 <etharp_find_entry+0x19c>
 801a246:	2e0a      	cmp	r6, #10
 801a248:	d038      	beq.n	801a2bc <etharp_find_entry+0x144>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a24a:	2e09      	cmp	r6, #9
 801a24c:	dd16      	ble.n	801a27c <etharp_find_entry+0x104>
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a24e:	f1b9 0f09 	cmp.w	r9, #9
 801a252:	dc39      	bgt.n	801a2c8 <etharp_find_entry+0x150>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a254:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 801a258:	4a31      	ldr	r2, [pc, #196]	; (801a320 <etharp_find_entry+0x1a8>)
 801a25a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d03a      	beq.n	801a2d8 <etharp_find_entry+0x160>
 801a262:	4b30      	ldr	r3, [pc, #192]	; (801a324 <etharp_find_entry+0x1ac>)
 801a264:	f240 126d 	movw	r2, #365	; 0x16d
 801a268:	492f      	ldr	r1, [pc, #188]	; (801a328 <etharp_find_entry+0x1b0>)
 801a26a:	4830      	ldr	r0, [pc, #192]	; (801a32c <etharp_find_entry+0x1b4>)
 801a26c:	f001 fc08 	bl	801ba80 <iprintf>
      i = old_stable;
 801a270:	464e      	mov	r6, r9
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a272:	2e09      	cmp	r6, #9
 801a274:	dc34      	bgt.n	801a2e0 <etharp_find_entry+0x168>
    etharp_free_entry(i);
 801a276:	4630      	mov	r0, r6
 801a278:	f7ff ff58 	bl	801a12c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a27c:	2e09      	cmp	r6, #9
 801a27e:	dc37      	bgt.n	801a2f0 <etharp_find_entry+0x178>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801a280:	4634      	mov	r4, r6
 801a282:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 801a286:	4a26      	ldr	r2, [pc, #152]	; (801a320 <etharp_find_entry+0x1a8>)
 801a288:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a28c:	7d1b      	ldrb	r3, [r3, #20]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d136      	bne.n	801a300 <etharp_find_entry+0x188>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801a292:	b137      	cbz	r7, 801a2a2 <etharp_find_entry+0x12a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801a294:	6839      	ldr	r1, [r7, #0]
 801a296:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801a29a:	4a21      	ldr	r2, [pc, #132]	; (801a320 <etharp_find_entry+0x1a8>)
 801a29c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a2a0:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 801a2a2:	4b1f      	ldr	r3, [pc, #124]	; (801a320 <etharp_find_entry+0x1a8>)
 801a2a4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801a2a8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801a2ac:	2100      	movs	r1, #0
 801a2ae:	8251      	strh	r1, [r2, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801a2b0:	f8c2 8008 	str.w	r8, [r2, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 801a2b4:	4630      	mov	r0, r6
 801a2b6:	b003      	add	sp, #12
 801a2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a2bc:	f011 0f01 	tst.w	r1, #1
 801a2c0:	d1c3      	bne.n	801a24a <etharp_find_entry+0xd2>
    return (s16_t)ERR_MEM;
 801a2c2:	f04f 36ff 	mov.w	r6, #4294967295
 801a2c6:	e7f5      	b.n	801a2b4 <etharp_find_entry+0x13c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a2c8:	9b01      	ldr	r3, [sp, #4]
 801a2ca:	2b09      	cmp	r3, #9
 801a2cc:	dd06      	ble.n	801a2dc <etharp_find_entry+0x164>
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a2ce:	f1ba 0f09 	cmp.w	sl, #9
 801a2d2:	dc22      	bgt.n	801a31a <etharp_find_entry+0x1a2>
      i = old_queue;
 801a2d4:	4656      	mov	r6, sl
 801a2d6:	e7cc      	b.n	801a272 <etharp_find_entry+0xfa>
      i = old_stable;
 801a2d8:	464e      	mov	r6, r9
 801a2da:	e7ca      	b.n	801a272 <etharp_find_entry+0xfa>
      i = old_pending;
 801a2dc:	9e01      	ldr	r6, [sp, #4]
 801a2de:	e7c8      	b.n	801a272 <etharp_find_entry+0xfa>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a2e0:	4b10      	ldr	r3, [pc, #64]	; (801a324 <etharp_find_entry+0x1ac>)
 801a2e2:	f240 127f 	movw	r2, #383	; 0x17f
 801a2e6:	4912      	ldr	r1, [pc, #72]	; (801a330 <etharp_find_entry+0x1b8>)
 801a2e8:	4810      	ldr	r0, [pc, #64]	; (801a32c <etharp_find_entry+0x1b4>)
 801a2ea:	f001 fbc9 	bl	801ba80 <iprintf>
 801a2ee:	e7c2      	b.n	801a276 <etharp_find_entry+0xfe>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a2f0:	4b0c      	ldr	r3, [pc, #48]	; (801a324 <etharp_find_entry+0x1ac>)
 801a2f2:	f240 1283 	movw	r2, #387	; 0x183
 801a2f6:	490e      	ldr	r1, [pc, #56]	; (801a330 <etharp_find_entry+0x1b8>)
 801a2f8:	480c      	ldr	r0, [pc, #48]	; (801a32c <etharp_find_entry+0x1b4>)
 801a2fa:	f001 fbc1 	bl	801ba80 <iprintf>
 801a2fe:	e7bf      	b.n	801a280 <etharp_find_entry+0x108>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801a300:	4b08      	ldr	r3, [pc, #32]	; (801a324 <etharp_find_entry+0x1ac>)
 801a302:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801a306:	490b      	ldr	r1, [pc, #44]	; (801a334 <etharp_find_entry+0x1bc>)
 801a308:	4808      	ldr	r0, [pc, #32]	; (801a32c <etharp_find_entry+0x1b4>)
 801a30a:	f001 fbb9 	bl	801ba80 <iprintf>
 801a30e:	e7c0      	b.n	801a292 <etharp_find_entry+0x11a>
        return i;
 801a310:	461e      	mov	r6, r3
 801a312:	e7cf      	b.n	801a2b4 <etharp_find_entry+0x13c>
    return (s16_t)ERR_MEM;
 801a314:	f04f 36ff 	mov.w	r6, #4294967295
 801a318:	e7cc      	b.n	801a2b4 <etharp_find_entry+0x13c>
      return (s16_t)ERR_MEM;
 801a31a:	f04f 36ff 	mov.w	r6, #4294967295
 801a31e:	e7c9      	b.n	801a2b4 <etharp_find_entry+0x13c>
 801a320:	20000a34 	.word	0x20000a34
 801a324:	08020040 	.word	0x08020040
 801a328:	08020078 	.word	0x08020078
 801a32c:	0801cca4 	.word	0x0801cca4
 801a330:	08020090 	.word	0x08020090
 801a334:	080200a4 	.word	0x080200a4

0801a338 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801a338:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a33a:	b083      	sub	sp, #12
 801a33c:	4605      	mov	r5, r0
 801a33e:	460c      	mov	r4, r1
 801a340:	4616      	mov	r6, r2
 801a342:	461f      	mov	r7, r3
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a344:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 801a348:	2a06      	cmp	r2, #6
 801a34a:	d13b      	bne.n	801a3c4 <etharp_update_arp_entry+0x8c>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801a34c:	2c00      	cmp	r4, #0
 801a34e:	d041      	beq.n	801a3d4 <etharp_update_arp_entry+0x9c>
 801a350:	6820      	ldr	r0, [r4, #0]
 801a352:	2800      	cmp	r0, #0
 801a354:	d03e      	beq.n	801a3d4 <etharp_update_arp_entry+0x9c>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a356:	4629      	mov	r1, r5
 801a358:	f000 fe61 	bl	801b01e <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 801a35c:	2800      	cmp	r0, #0
 801a35e:	d139      	bne.n	801a3d4 <etharp_update_arp_entry+0x9c>
      ip4_addr_ismulticast(ipaddr)) {
 801a360:	6822      	ldr	r2, [r4, #0]
 801a362:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a366:	2ae0      	cmp	r2, #224	; 0xe0
 801a368:	d034      	beq.n	801a3d4 <etharp_update_arp_entry+0x9c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801a36a:	462a      	mov	r2, r5
 801a36c:	4639      	mov	r1, r7
 801a36e:	4620      	mov	r0, r4
 801a370:	f7ff ff02 	bl	801a178 <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 801a374:	1e03      	subs	r3, r0, #0
 801a376:	db30      	blt.n	801a3da <etharp_update_arp_entry+0xa2>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801a378:	4a1a      	ldr	r2, [pc, #104]	; (801a3e4 <etharp_update_arp_entry+0xac>)
 801a37a:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 801a37e:	eb02 00c4 	add.w	r0, r2, r4, lsl #3
 801a382:	2102      	movs	r1, #2
 801a384:	7501      	strb	r1, [r0, #20]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801a386:	6085      	str	r5, [r0, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801a388:	00e1      	lsls	r1, r4, #3
 801a38a:	3108      	adds	r1, #8
 801a38c:	4411      	add	r1, r2
 801a38e:	6837      	ldr	r7, [r6, #0]
 801a390:	604f      	str	r7, [r1, #4]
 801a392:	88b7      	ldrh	r7, [r6, #4]
 801a394:	810f      	strh	r7, [r1, #8]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801a396:	2100      	movs	r1, #0
 801a398:	8241      	strh	r1, [r0, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801a39a:	f852 7034 	ldr.w	r7, [r2, r4, lsl #3]
 801a39e:	b1ff      	cbz	r7, 801a3e0 <etharp_update_arp_entry+0xa8>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 801a3a0:	00e3      	lsls	r3, r4, #3
 801a3a2:	460c      	mov	r4, r1
 801a3a4:	50d1      	str	r1, [r2, r3]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801a3a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a3aa:	9300      	str	r3, [sp, #0]
 801a3ac:	4633      	mov	r3, r6
 801a3ae:	f105 022a 	add.w	r2, r5, #42	; 0x2a
 801a3b2:	4639      	mov	r1, r7
 801a3b4:	4628      	mov	r0, r5
 801a3b6:	f001 fae3 	bl	801b980 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801a3ba:	4638      	mov	r0, r7
 801a3bc:	f7f9 fb2c 	bl	8013a18 <pbuf_free>
  }
  return ERR_OK;
 801a3c0:	4620      	mov	r0, r4
 801a3c2:	e00b      	b.n	801a3dc <etharp_update_arp_entry+0xa4>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a3c4:	4b08      	ldr	r3, [pc, #32]	; (801a3e8 <etharp_update_arp_entry+0xb0>)
 801a3c6:	f240 12a9 	movw	r2, #425	; 0x1a9
 801a3ca:	4908      	ldr	r1, [pc, #32]	; (801a3ec <etharp_update_arp_entry+0xb4>)
 801a3cc:	4808      	ldr	r0, [pc, #32]	; (801a3f0 <etharp_update_arp_entry+0xb8>)
 801a3ce:	f001 fb57 	bl	801ba80 <iprintf>
 801a3d2:	e7bb      	b.n	801a34c <etharp_update_arp_entry+0x14>
    return ERR_ARG;
 801a3d4:	f06f 000f 	mvn.w	r0, #15
 801a3d8:	e000      	b.n	801a3dc <etharp_update_arp_entry+0xa4>
    return (err_t)i;
 801a3da:	b258      	sxtb	r0, r3
}
 801a3dc:	b003      	add	sp, #12
 801a3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ERR_OK;
 801a3e0:	2000      	movs	r0, #0
 801a3e2:	e7fb      	b.n	801a3dc <etharp_update_arp_entry+0xa4>
 801a3e4:	20000a34 	.word	0x20000a34
 801a3e8:	08020040 	.word	0x08020040
 801a3ec:	080200d0 	.word	0x080200d0
 801a3f0:	0801cca4 	.word	0x0801cca4

0801a3f4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801a3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a3f8:	b082      	sub	sp, #8
 801a3fa:	460f      	mov	r7, r1
 801a3fc:	4690      	mov	r8, r2
 801a3fe:	461d      	mov	r5, r3
 801a400:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a404:	4681      	mov	r9, r0
 801a406:	2800      	cmp	r0, #0
 801a408:	d042      	beq.n	801a490 <etharp_raw+0x9c>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801a40a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a40e:	211c      	movs	r1, #28
 801a410:	200e      	movs	r0, #14
 801a412:	f7f9 fb63 	bl	8013adc <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801a416:	4606      	mov	r6, r0
 801a418:	2800      	cmp	r0, #0
 801a41a:	d051      	beq.n	801a4c0 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801a41c:	8943      	ldrh	r3, [r0, #10]
 801a41e:	2b1b      	cmp	r3, #27
 801a420:	d93e      	bls.n	801a4a0 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801a422:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801a424:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801a428:	f7f8 fa9e 	bl	8012968 <lwip_htons>
 801a42c:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801a42e:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
 801a432:	2b06      	cmp	r3, #6
 801a434:	d13c      	bne.n	801a4b0 <etharp_raw+0xbc>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801a436:	682b      	ldr	r3, [r5, #0]
 801a438:	60a3      	str	r3, [r4, #8]
 801a43a:	88ab      	ldrh	r3, [r5, #4]
 801a43c:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801a43e:	f8da 3000 	ldr.w	r3, [sl]
 801a442:	f8c4 3012 	str.w	r3, [r4, #18]
 801a446:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 801a44a:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801a44c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801a454:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801a45a:	2500      	movs	r5, #0
 801a45c:	7025      	strb	r5, [r4, #0]
 801a45e:	2301      	movs	r3, #1
 801a460:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801a462:	2308      	movs	r3, #8
 801a464:	70a3      	strb	r3, [r4, #2]
 801a466:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801a468:	2306      	movs	r3, #6
 801a46a:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801a46c:	2304      	movs	r3, #4
 801a46e:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801a470:	f640 0306 	movw	r3, #2054	; 0x806
 801a474:	9300      	str	r3, [sp, #0]
 801a476:	4643      	mov	r3, r8
 801a478:	463a      	mov	r2, r7
 801a47a:	4631      	mov	r1, r6
 801a47c:	4648      	mov	r0, r9
 801a47e:	f001 fa7f 	bl	801b980 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801a482:	4630      	mov	r0, r6
 801a484:	f7f9 fac8 	bl	8013a18 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 801a488:	4628      	mov	r0, r5
}
 801a48a:	b002      	add	sp, #8
 801a48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a490:	4b0d      	ldr	r3, [pc, #52]	; (801a4c8 <etharp_raw+0xd4>)
 801a492:	f240 4257 	movw	r2, #1111	; 0x457
 801a496:	490d      	ldr	r1, [pc, #52]	; (801a4cc <etharp_raw+0xd8>)
 801a498:	480d      	ldr	r0, [pc, #52]	; (801a4d0 <etharp_raw+0xdc>)
 801a49a:	f001 faf1 	bl	801ba80 <iprintf>
 801a49e:	e7b4      	b.n	801a40a <etharp_raw+0x16>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801a4a0:	4b09      	ldr	r3, [pc, #36]	; (801a4c8 <etharp_raw+0xd4>)
 801a4a2:	f240 4262 	movw	r2, #1122	; 0x462
 801a4a6:	490b      	ldr	r1, [pc, #44]	; (801a4d4 <etharp_raw+0xe0>)
 801a4a8:	4809      	ldr	r0, [pc, #36]	; (801a4d0 <etharp_raw+0xdc>)
 801a4aa:	f001 fae9 	bl	801ba80 <iprintf>
 801a4ae:	e7b8      	b.n	801a422 <etharp_raw+0x2e>
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801a4b0:	4b05      	ldr	r3, [pc, #20]	; (801a4c8 <etharp_raw+0xd4>)
 801a4b2:	f240 4269 	movw	r2, #1129	; 0x469
 801a4b6:	4908      	ldr	r1, [pc, #32]	; (801a4d8 <etharp_raw+0xe4>)
 801a4b8:	4805      	ldr	r0, [pc, #20]	; (801a4d0 <etharp_raw+0xdc>)
 801a4ba:	f001 fae1 	bl	801ba80 <iprintf>
 801a4be:	e7ba      	b.n	801a436 <etharp_raw+0x42>
    return ERR_MEM;
 801a4c0:	f04f 30ff 	mov.w	r0, #4294967295
 801a4c4:	e7e1      	b.n	801a48a <etharp_raw+0x96>
 801a4c6:	bf00      	nop
 801a4c8:	08020040 	.word	0x08020040
 801a4cc:	0801cc94 	.word	0x0801cc94
 801a4d0:	0801cca4 	.word	0x0801cca4
 801a4d4:	080200f4 	.word	0x080200f4
 801a4d8:	08020128 	.word	0x08020128

0801a4dc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801a4dc:	b530      	push	{r4, r5, lr}
 801a4de:	b085      	sub	sp, #20
 801a4e0:	4604      	mov	r4, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a4e2:	f100 032a 	add.w	r3, r0, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801a4e6:	3404      	adds	r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a4e8:	2501      	movs	r5, #1
 801a4ea:	9503      	str	r5, [sp, #12]
 801a4ec:	9102      	str	r1, [sp, #8]
 801a4ee:	4904      	ldr	r1, [pc, #16]	; (801a500 <etharp_request_dst+0x24>)
 801a4f0:	9101      	str	r1, [sp, #4]
 801a4f2:	9400      	str	r4, [sp, #0]
 801a4f4:	4619      	mov	r1, r3
 801a4f6:	f7ff ff7d 	bl	801a3f4 <etharp_raw>
                    ipaddr, ARP_REQUEST);
}
 801a4fa:	b005      	add	sp, #20
 801a4fc:	bd30      	pop	{r4, r5, pc}
 801a4fe:	bf00      	nop
 801a500:	080205c0 	.word	0x080205c0

0801a504 <etharp_cleanup_netif>:
{
 801a504:	b538      	push	{r3, r4, r5, lr}
 801a506:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a508:	2400      	movs	r4, #0
 801a50a:	e000      	b.n	801a50e <etharp_cleanup_netif+0xa>
 801a50c:	3401      	adds	r4, #1
 801a50e:	2c09      	cmp	r4, #9
 801a510:	dc12      	bgt.n	801a538 <etharp_cleanup_netif+0x34>
    u8_t state = arp_table[i].state;
 801a512:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801a516:	4a09      	ldr	r2, [pc, #36]	; (801a53c <etharp_cleanup_netif+0x38>)
 801a518:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a51c:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d0f4      	beq.n	801a50c <etharp_cleanup_netif+0x8>
 801a522:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801a526:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a52a:	689b      	ldr	r3, [r3, #8]
 801a52c:	42ab      	cmp	r3, r5
 801a52e:	d1ed      	bne.n	801a50c <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 801a530:	4620      	mov	r0, r4
 801a532:	f7ff fdfb 	bl	801a12c <etharp_free_entry>
 801a536:	e7e9      	b.n	801a50c <etharp_cleanup_netif+0x8>
}
 801a538:	bd38      	pop	{r3, r4, r5, pc}
 801a53a:	bf00      	nop
 801a53c:	20000a34 	.word	0x20000a34

0801a540 <etharp_input>:
{
 801a540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a544:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a546:	b1a9      	cbz	r1, 801a574 <etharp_input+0x34>
 801a548:	4604      	mov	r4, r0
 801a54a:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 801a54c:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a54e:	882b      	ldrh	r3, [r5, #0]
 801a550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a554:	d108      	bne.n	801a568 <etharp_input+0x28>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a556:	792b      	ldrb	r3, [r5, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a558:	2b06      	cmp	r3, #6
 801a55a:	d105      	bne.n	801a568 <etharp_input+0x28>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a55c:	796b      	ldrb	r3, [r5, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a55e:	2b04      	cmp	r3, #4
 801a560:	d102      	bne.n	801a568 <etharp_input+0x28>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a562:	886b      	ldrh	r3, [r5, #2]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a564:	2b08      	cmp	r3, #8
 801a566:	d00d      	beq.n	801a584 <etharp_input+0x44>
    pbuf_free(p);
 801a568:	4620      	mov	r0, r4
 801a56a:	f7f9 fa55 	bl	8013a18 <pbuf_free>
}
 801a56e:	b006      	add	sp, #24
 801a570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a574:	4b21      	ldr	r3, [pc, #132]	; (801a5fc <etharp_input+0xbc>)
 801a576:	f240 228a 	movw	r2, #650	; 0x28a
 801a57a:	4921      	ldr	r1, [pc, #132]	; (801a600 <etharp_input+0xc0>)
 801a57c:	4821      	ldr	r0, [pc, #132]	; (801a604 <etharp_input+0xc4>)
 801a57e:	f001 fa7f 	bl	801ba80 <iprintf>
 801a582:	e7f4      	b.n	801a56e <etharp_input+0x2e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a584:	f8d5 300e 	ldr.w	r3, [r5, #14]
 801a588:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a58a:	69af      	ldr	r7, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a58c:	684b      	ldr	r3, [r1, #4]
 801a58e:	b99b      	cbnz	r3, 801a5b8 <etharp_input+0x78>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a590:	f105 0808 	add.w	r8, r5, #8
    for_us = 0;
 801a594:	2700      	movs	r7, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a596:	2302      	movs	r3, #2
 801a598:	4642      	mov	r2, r8
 801a59a:	a905      	add	r1, sp, #20
 801a59c:	4630      	mov	r0, r6
 801a59e:	f7ff fecb 	bl	801a338 <etharp_update_arp_entry>
  switch (hdr->opcode) {
 801a5a2:	88eb      	ldrh	r3, [r5, #6]
 801a5a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a5a8:	d011      	beq.n	801a5ce <etharp_input+0x8e>
 801a5aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a5ae:	d020      	beq.n	801a5f2 <etharp_input+0xb2>
  pbuf_free(p);
 801a5b0:	4620      	mov	r0, r4
 801a5b2:	f7f9 fa31 	bl	8013a18 <pbuf_free>
 801a5b6:	e7da      	b.n	801a56e <etharp_input+0x2e>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a5b8:	42bb      	cmp	r3, r7
 801a5ba:	bf14      	ite	ne
 801a5bc:	2700      	movne	r7, #0
 801a5be:	2701      	moveq	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a5c0:	f105 0808 	add.w	r8, r5, #8
 801a5c4:	b10f      	cbz	r7, 801a5ca <etharp_input+0x8a>
 801a5c6:	2301      	movs	r3, #1
 801a5c8:	e7e6      	b.n	801a598 <etharp_input+0x58>
 801a5ca:	2302      	movs	r3, #2
 801a5cc:	e7e4      	b.n	801a598 <etharp_input+0x58>
      if (for_us) {
 801a5ce:	2f00      	cmp	r7, #0
 801a5d0:	d0ee      	beq.n	801a5b0 <etharp_input+0x70>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a5d2:	f106 012a 	add.w	r1, r6, #42	; 0x2a
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a5d6:	1d33      	adds	r3, r6, #4
        etharp_raw(netif,
 801a5d8:	2202      	movs	r2, #2
 801a5da:	9203      	str	r2, [sp, #12]
 801a5dc:	aa05      	add	r2, sp, #20
 801a5de:	9202      	str	r2, [sp, #8]
 801a5e0:	f8cd 8004 	str.w	r8, [sp, #4]
 801a5e4:	9300      	str	r3, [sp, #0]
 801a5e6:	460b      	mov	r3, r1
 801a5e8:	4642      	mov	r2, r8
 801a5ea:	4630      	mov	r0, r6
 801a5ec:	f7ff ff02 	bl	801a3f4 <etharp_raw>
 801a5f0:	e7de      	b.n	801a5b0 <etharp_input+0x70>
      dhcp_arp_reply(netif, &sipaddr);
 801a5f2:	a905      	add	r1, sp, #20
 801a5f4:	4630      	mov	r0, r6
 801a5f6:	f7ff fb95 	bl	8019d24 <dhcp_arp_reply>
      break;
 801a5fa:	e7d9      	b.n	801a5b0 <etharp_input+0x70>
 801a5fc:	08020040 	.word	0x08020040
 801a600:	0801cc94 	.word	0x0801cc94
 801a604:	0801cca4 	.word	0x0801cca4

0801a608 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801a608:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801a60a:	4a02      	ldr	r2, [pc, #8]	; (801a614 <etharp_request+0xc>)
 801a60c:	f7ff ff66 	bl	801a4dc <etharp_request_dst>
}
 801a610:	bd08      	pop	{r3, pc}
 801a612:	bf00      	nop
 801a614:	080205b8 	.word	0x080205b8

0801a618 <etharp_tmr>:
{
 801a618:	b510      	push	{r4, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a61a:	2400      	movs	r4, #0
 801a61c:	e005      	b.n	801a62a <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a61e:	2b04      	cmp	r3, #4
 801a620:	d91b      	bls.n	801a65a <etharp_tmr+0x42>
        etharp_free_entry(i);
 801a622:	4620      	mov	r0, r4
 801a624:	f7ff fd82 	bl	801a12c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a628:	3401      	adds	r4, #1
 801a62a:	2c09      	cmp	r4, #9
 801a62c:	dc35      	bgt.n	801a69a <etharp_tmr+0x82>
    u8_t state = arp_table[i].state;
 801a62e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801a632:	00da      	lsls	r2, r3, #3
 801a634:	4b19      	ldr	r3, [pc, #100]	; (801a69c <etharp_tmr+0x84>)
 801a636:	4413      	add	r3, r2
 801a638:	7d1a      	ldrb	r2, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 801a63a:	2a00      	cmp	r2, #0
 801a63c:	d0f4      	beq.n	801a628 <etharp_tmr+0x10>
      arp_table[i].ctime++;
 801a63e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801a642:	00cb      	lsls	r3, r1, #3
 801a644:	4915      	ldr	r1, [pc, #84]	; (801a69c <etharp_tmr+0x84>)
 801a646:	4419      	add	r1, r3
 801a648:	8a4b      	ldrh	r3, [r1, #18]
 801a64a:	3301      	adds	r3, #1
 801a64c:	b29b      	uxth	r3, r3
 801a64e:	824b      	strh	r3, [r1, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a650:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801a654:	d2e5      	bcs.n	801a622 <etharp_tmr+0xa>
 801a656:	2a01      	cmp	r2, #1
 801a658:	d0e1      	beq.n	801a61e <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a65a:	2a03      	cmp	r2, #3
 801a65c:	d00d      	beq.n	801a67a <etharp_tmr+0x62>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801a65e:	2a04      	cmp	r2, #4
 801a660:	d013      	beq.n	801a68a <etharp_tmr+0x72>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a662:	2a01      	cmp	r2, #1
 801a664:	d1e0      	bne.n	801a628 <etharp_tmr+0x10>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801a666:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801a66a:	00da      	lsls	r2, r3, #3
 801a66c:	4b0b      	ldr	r3, [pc, #44]	; (801a69c <etharp_tmr+0x84>)
 801a66e:	4413      	add	r3, r2
 801a670:	1d19      	adds	r1, r3, #4
 801a672:	6898      	ldr	r0, [r3, #8]
 801a674:	f7ff ffc8 	bl	801a608 <etharp_request>
 801a678:	e7d6      	b.n	801a628 <etharp_tmr+0x10>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a67a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801a67e:	00da      	lsls	r2, r3, #3
 801a680:	4b06      	ldr	r3, [pc, #24]	; (801a69c <etharp_tmr+0x84>)
 801a682:	4413      	add	r3, r2
 801a684:	2204      	movs	r2, #4
 801a686:	751a      	strb	r2, [r3, #20]
 801a688:	e7ce      	b.n	801a628 <etharp_tmr+0x10>
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a68a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801a68e:	00da      	lsls	r2, r3, #3
 801a690:	4b02      	ldr	r3, [pc, #8]	; (801a69c <etharp_tmr+0x84>)
 801a692:	4413      	add	r3, r2
 801a694:	2202      	movs	r2, #2
 801a696:	751a      	strb	r2, [r3, #20]
 801a698:	e7c6      	b.n	801a628 <etharp_tmr+0x10>
}
 801a69a:	bd10      	pop	{r4, pc}
 801a69c:	20000a34 	.word	0x20000a34

0801a6a0 <etharp_output_to_arp_index>:
{
 801a6a0:	b570      	push	{r4, r5, r6, lr}
 801a6a2:	b082      	sub	sp, #8
 801a6a4:	4605      	mov	r5, r0
 801a6a6:	460e      	mov	r6, r1
 801a6a8:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a6aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a6ae:	4b2f      	ldr	r3, [pc, #188]	; (801a76c <etharp_output_to_arp_index+0xcc>)
 801a6b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a6b4:	7d1b      	ldrb	r3, [r3, #20]
 801a6b6:	2b01      	cmp	r3, #1
 801a6b8:	d919      	bls.n	801a6ee <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a6ba:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801a6be:	4a2b      	ldr	r2, [pc, #172]	; (801a76c <etharp_output_to_arp_index+0xcc>)
 801a6c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a6c4:	7d1b      	ldrb	r3, [r3, #20]
 801a6c6:	2b02      	cmp	r3, #2
 801a6c8:	d019      	beq.n	801a6fe <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a6ca:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801a6ce:	00db      	lsls	r3, r3, #3
 801a6d0:	3308      	adds	r3, #8
 801a6d2:	4c26      	ldr	r4, [pc, #152]	; (801a76c <etharp_output_to_arp_index+0xcc>)
 801a6d4:	4423      	add	r3, r4
 801a6d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a6da:	9200      	str	r2, [sp, #0]
 801a6dc:	3304      	adds	r3, #4
 801a6de:	f105 022a 	add.w	r2, r5, #42	; 0x2a
 801a6e2:	4631      	mov	r1, r6
 801a6e4:	4628      	mov	r0, r5
 801a6e6:	f001 f94b 	bl	801b980 <ethernet_output>
}
 801a6ea:	b002      	add	sp, #8
 801a6ec:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a6ee:	4b20      	ldr	r3, [pc, #128]	; (801a770 <etharp_output_to_arp_index+0xd0>)
 801a6f0:	f240 22ee 	movw	r2, #750	; 0x2ee
 801a6f4:	491f      	ldr	r1, [pc, #124]	; (801a774 <etharp_output_to_arp_index+0xd4>)
 801a6f6:	4820      	ldr	r0, [pc, #128]	; (801a778 <etharp_output_to_arp_index+0xd8>)
 801a6f8:	f001 f9c2 	bl	801ba80 <iprintf>
 801a6fc:	e7dd      	b.n	801a6ba <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a6fe:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801a702:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a706:	8a5b      	ldrh	r3, [r3, #18]
 801a708:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801a70c:	d81b      	bhi.n	801a746 <etharp_output_to_arp_index+0xa6>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a70e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801a712:	d3da      	bcc.n	801a6ca <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a714:	4b15      	ldr	r3, [pc, #84]	; (801a76c <etharp_output_to_arp_index+0xcc>)
 801a716:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801a71a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801a71e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 801a722:	00d2      	lsls	r2, r2, #3
 801a724:	3208      	adds	r2, #8
 801a726:	441a      	add	r2, r3
 801a728:	3204      	adds	r2, #4
 801a72a:	3104      	adds	r1, #4
 801a72c:	4628      	mov	r0, r5
 801a72e:	f7ff fed5 	bl	801a4dc <etharp_request_dst>
 801a732:	2800      	cmp	r0, #0
 801a734:	d1c9      	bne.n	801a6ca <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a736:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801a73a:	4a0c      	ldr	r2, [pc, #48]	; (801a76c <etharp_output_to_arp_index+0xcc>)
 801a73c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a740:	2203      	movs	r2, #3
 801a742:	751a      	strb	r2, [r3, #20]
 801a744:	e7c1      	b.n	801a6ca <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a746:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801a74a:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801a74e:	3104      	adds	r1, #4
 801a750:	4628      	mov	r0, r5
 801a752:	f7ff ff59 	bl	801a608 <etharp_request>
 801a756:	2800      	cmp	r0, #0
 801a758:	d1b7      	bne.n	801a6ca <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a75a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801a75e:	4a03      	ldr	r2, [pc, #12]	; (801a76c <etharp_output_to_arp_index+0xcc>)
 801a760:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a764:	2203      	movs	r2, #3
 801a766:	751a      	strb	r2, [r3, #20]
 801a768:	e7af      	b.n	801a6ca <etharp_output_to_arp_index+0x2a>
 801a76a:	bf00      	nop
 801a76c:	20000a34 	.word	0x20000a34
 801a770:	08020040 	.word	0x08020040
 801a774:	0802018c 	.word	0x0802018c
 801a778:	0801cca4 	.word	0x0801cca4

0801a77c <etharp_query>:
{
 801a77c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a780:	b083      	sub	sp, #12
 801a782:	4680      	mov	r8, r0
 801a784:	460e      	mov	r6, r1
 801a786:	4617      	mov	r7, r2
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801a788:	f100 092a 	add.w	r9, r0, #42	; 0x2a
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a78c:	4601      	mov	r1, r0
 801a78e:	6830      	ldr	r0, [r6, #0]
 801a790:	f000 fc45 	bl	801b01e <ip4_addr_isbroadcast_u32>
 801a794:	2800      	cmp	r0, #0
 801a796:	f040 80ab 	bne.w	801a8f0 <etharp_query+0x174>
      ip4_addr_ismulticast(ipaddr) ||
 801a79a:	6833      	ldr	r3, [r6, #0]
 801a79c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a7a0:	2ae0      	cmp	r2, #224	; 0xe0
 801a7a2:	f000 80a8 	beq.w	801a8f6 <etharp_query+0x17a>
      ip4_addr_ismulticast(ipaddr) ||
 801a7a6:	2e00      	cmp	r6, #0
 801a7a8:	f000 80a8 	beq.w	801a8fc <etharp_query+0x180>
      ip4_addr_isany(ipaddr)) {
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	f000 80a8 	beq.w	801a902 <etharp_query+0x186>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801a7b2:	4642      	mov	r2, r8
 801a7b4:	2101      	movs	r1, #1
 801a7b6:	4630      	mov	r0, r6
 801a7b8:	f7ff fcde 	bl	801a178 <etharp_find_entry>
  if (i_err < 0) {
 801a7bc:	1e05      	subs	r5, r0, #0
 801a7be:	db13      	blt.n	801a7e8 <etharp_query+0x6c>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801a7c0:	b2ab      	uxth	r3, r5
 801a7c2:	2b7e      	cmp	r3, #126	; 0x7e
 801a7c4:	d812      	bhi.n	801a7ec <etharp_query+0x70>
  i = (netif_addr_idx_t)i_err;
 801a7c6:	b2ed      	uxtb	r5, r5
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801a7c8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801a7cc:	4b50      	ldr	r3, [pc, #320]	; (801a910 <etharp_query+0x194>)
 801a7ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a7d2:	7d1b      	ldrb	r3, [r3, #20]
 801a7d4:	b993      	cbnz	r3, 801a7fc <etharp_query+0x80>
    arp_table[i].state = ETHARP_STATE_PENDING;
 801a7d6:	4613      	mov	r3, r2
 801a7d8:	4a4d      	ldr	r2, [pc, #308]	; (801a910 <etharp_query+0x194>)
 801a7da:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a7de:	2401      	movs	r4, #1
 801a7e0:	751c      	strb	r4, [r3, #20]
    arp_table[i].netif = netif;
 801a7e2:	f8c3 8008 	str.w	r8, [r3, #8]
 801a7e6:	e00a      	b.n	801a7fe <etharp_query+0x82>
    return (err_t)i_err;
 801a7e8:	b26c      	sxtb	r4, r5
 801a7ea:	e049      	b.n	801a880 <etharp_query+0x104>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801a7ec:	4b49      	ldr	r3, [pc, #292]	; (801a914 <etharp_query+0x198>)
 801a7ee:	f240 32c1 	movw	r2, #961	; 0x3c1
 801a7f2:	4949      	ldr	r1, [pc, #292]	; (801a918 <etharp_query+0x19c>)
 801a7f4:	4849      	ldr	r0, [pc, #292]	; (801a91c <etharp_query+0x1a0>)
 801a7f6:	f001 f943 	bl	801ba80 <iprintf>
 801a7fa:	e7e4      	b.n	801a7c6 <etharp_query+0x4a>
  int is_new_entry = 0;
 801a7fc:	2400      	movs	r4, #0
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801a7fe:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801a802:	4a43      	ldr	r2, [pc, #268]	; (801a910 <etharp_query+0x194>)
 801a804:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a808:	7d1b      	ldrb	r3, [r3, #20]
 801a80a:	b183      	cbz	r3, 801a82e <etharp_query+0xb2>
  if (is_new_entry || (q == NULL)) {
 801a80c:	b9bc      	cbnz	r4, 801a83e <etharp_query+0xc2>
 801a80e:	b1b7      	cbz	r7, 801a83e <etharp_query+0xc2>
  err_t result = ERR_MEM;
 801a810:	f04f 34ff 	mov.w	r4, #4294967295
  LWIP_ASSERT("q != NULL", q != NULL);
 801a814:	b1df      	cbz	r7, 801a84e <etharp_query+0xd2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801a816:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801a81a:	4a3d      	ldr	r2, [pc, #244]	; (801a910 <etharp_query+0x194>)
 801a81c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801a820:	7d1b      	ldrb	r3, [r3, #20]
 801a822:	2b01      	cmp	r3, #1
 801a824:	d81b      	bhi.n	801a85e <etharp_query+0xe2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a826:	2b01      	cmp	r3, #1
 801a828:	d12a      	bne.n	801a880 <etharp_query+0x104>
    p = q;
 801a82a:	463c      	mov	r4, r7
 801a82c:	e038      	b.n	801a8a0 <etharp_query+0x124>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801a82e:	4b39      	ldr	r3, [pc, #228]	; (801a914 <etharp_query+0x198>)
 801a830:	f240 32cd 	movw	r2, #973	; 0x3cd
 801a834:	493a      	ldr	r1, [pc, #232]	; (801a920 <etharp_query+0x1a4>)
 801a836:	4839      	ldr	r0, [pc, #228]	; (801a91c <etharp_query+0x1a0>)
 801a838:	f001 f922 	bl	801ba80 <iprintf>
 801a83c:	e7e6      	b.n	801a80c <etharp_query+0x90>
    result = etharp_request(netif, ipaddr);
 801a83e:	4631      	mov	r1, r6
 801a840:	4640      	mov	r0, r8
 801a842:	f7ff fee1 	bl	801a608 <etharp_request>
 801a846:	4604      	mov	r4, r0
    if (q == NULL) {
 801a848:	2f00      	cmp	r7, #0
 801a84a:	d1e3      	bne.n	801a814 <etharp_query+0x98>
 801a84c:	e018      	b.n	801a880 <etharp_query+0x104>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a84e:	4b31      	ldr	r3, [pc, #196]	; (801a914 <etharp_query+0x198>)
 801a850:	f240 32e1 	movw	r2, #993	; 0x3e1
 801a854:	4933      	ldr	r1, [pc, #204]	; (801a924 <etharp_query+0x1a8>)
 801a856:	4831      	ldr	r0, [pc, #196]	; (801a91c <etharp_query+0x1a0>)
 801a858:	f001 f912 	bl	801ba80 <iprintf>
 801a85c:	e7db      	b.n	801a816 <etharp_query+0x9a>
    ETHARP_SET_ADDRHINT(netif, i);
 801a85e:	4b32      	ldr	r3, [pc, #200]	; (801a928 <etharp_query+0x1ac>)
 801a860:	701d      	strb	r5, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801a862:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801a866:	00db      	lsls	r3, r3, #3
 801a868:	3308      	adds	r3, #8
 801a86a:	4413      	add	r3, r2
 801a86c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a870:	9200      	str	r2, [sp, #0]
 801a872:	3304      	adds	r3, #4
 801a874:	464a      	mov	r2, r9
 801a876:	4639      	mov	r1, r7
 801a878:	4640      	mov	r0, r8
 801a87a:	f001 f881 	bl	801b980 <ethernet_output>
 801a87e:	4604      	mov	r4, r0
}
 801a880:	4620      	mov	r0, r4
 801a882:	b003      	add	sp, #12
 801a884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801a888:	4b22      	ldr	r3, [pc, #136]	; (801a914 <etharp_query+0x198>)
 801a88a:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801a88e:	4927      	ldr	r1, [pc, #156]	; (801a92c <etharp_query+0x1b0>)
 801a890:	4822      	ldr	r0, [pc, #136]	; (801a91c <etharp_query+0x1a0>)
 801a892:	f001 f8f5 	bl	801ba80 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801a896:	7b23      	ldrb	r3, [r4, #12]
 801a898:	f013 0f40 	tst.w	r3, #64	; 0x40
 801a89c:	d122      	bne.n	801a8e4 <etharp_query+0x168>
      p = p->next;
 801a89e:	6824      	ldr	r4, [r4, #0]
    while (p) {
 801a8a0:	b13c      	cbz	r4, 801a8b2 <etharp_query+0x136>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801a8a2:	8962      	ldrh	r2, [r4, #10]
 801a8a4:	8923      	ldrh	r3, [r4, #8]
 801a8a6:	429a      	cmp	r2, r3
 801a8a8:	d1f5      	bne.n	801a896 <etharp_query+0x11a>
 801a8aa:	6823      	ldr	r3, [r4, #0]
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d1eb      	bne.n	801a888 <etharp_query+0x10c>
 801a8b0:	e7f1      	b.n	801a896 <etharp_query+0x11a>
    int copy_needed = 0;
 801a8b2:	2300      	movs	r3, #0
    if (copy_needed) {
 801a8b4:	b1c3      	cbz	r3, 801a8e8 <etharp_query+0x16c>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801a8b6:	463a      	mov	r2, r7
 801a8b8:	f44f 7120 	mov.w	r1, #640	; 0x280
 801a8bc:	200e      	movs	r0, #14
 801a8be:	f7f9 fbf1 	bl	80140a4 <pbuf_clone>
 801a8c2:	4607      	mov	r7, r0
    if (p != NULL) {
 801a8c4:	b307      	cbz	r7, 801a908 <etharp_query+0x18c>
      if (arp_table[i].q != NULL) {
 801a8c6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801a8ca:	4a11      	ldr	r2, [pc, #68]	; (801a910 <etharp_query+0x194>)
 801a8cc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801a8d0:	b108      	cbz	r0, 801a8d6 <etharp_query+0x15a>
        pbuf_free(arp_table[i].q);
 801a8d2:	f7f9 f8a1 	bl	8013a18 <pbuf_free>
      arp_table[i].q = p;
 801a8d6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801a8da:	4a0d      	ldr	r2, [pc, #52]	; (801a910 <etharp_query+0x194>)
 801a8dc:	f842 7033 	str.w	r7, [r2, r3, lsl #3]
      result = ERR_OK;
 801a8e0:	2400      	movs	r4, #0
 801a8e2:	e7cd      	b.n	801a880 <etharp_query+0x104>
        copy_needed = 1;
 801a8e4:	2301      	movs	r3, #1
 801a8e6:	e7e5      	b.n	801a8b4 <etharp_query+0x138>
      pbuf_ref(p);
 801a8e8:	4638      	mov	r0, r7
 801a8ea:	f7f9 fa01 	bl	8013cf0 <pbuf_ref>
 801a8ee:	e7e9      	b.n	801a8c4 <etharp_query+0x148>
    return ERR_ARG;
 801a8f0:	f06f 040f 	mvn.w	r4, #15
 801a8f4:	e7c4      	b.n	801a880 <etharp_query+0x104>
 801a8f6:	f06f 040f 	mvn.w	r4, #15
 801a8fa:	e7c1      	b.n	801a880 <etharp_query+0x104>
 801a8fc:	f06f 040f 	mvn.w	r4, #15
 801a900:	e7be      	b.n	801a880 <etharp_query+0x104>
 801a902:	f06f 040f 	mvn.w	r4, #15
 801a906:	e7bb      	b.n	801a880 <etharp_query+0x104>
      result = ERR_MEM;
 801a908:	f04f 34ff 	mov.w	r4, #4294967295
 801a90c:	e7b8      	b.n	801a880 <etharp_query+0x104>
 801a90e:	bf00      	nop
 801a910:	20000a34 	.word	0x20000a34
 801a914:	08020040 	.word	0x08020040
 801a918:	080201bc 	.word	0x080201bc
 801a91c:	0801cca4 	.word	0x0801cca4
 801a920:	080201cc 	.word	0x080201cc
 801a924:	080201f4 	.word	0x080201f4
 801a928:	20000b24 	.word	0x20000b24
 801a92c:	08020200 	.word	0x08020200

0801a930 <etharp_output>:
{
 801a930:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a932:	b085      	sub	sp, #20
 801a934:	460f      	mov	r7, r1
 801a936:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a938:	4606      	mov	r6, r0
 801a93a:	2800      	cmp	r0, #0
 801a93c:	d03d      	beq.n	801a9ba <etharp_output+0x8a>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a93e:	2f00      	cmp	r7, #0
 801a940:	d043      	beq.n	801a9ca <etharp_output+0x9a>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a942:	2d00      	cmp	r5, #0
 801a944:	d049      	beq.n	801a9da <etharp_output+0xaa>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801a946:	4631      	mov	r1, r6
 801a948:	6828      	ldr	r0, [r5, #0]
 801a94a:	f000 fb68 	bl	801b01e <ip4_addr_isbroadcast_u32>
 801a94e:	4603      	mov	r3, r0
 801a950:	2800      	cmp	r0, #0
 801a952:	f040 8081 	bne.w	801aa58 <etharp_output+0x128>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801a956:	682a      	ldr	r2, [r5, #0]
 801a958:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
 801a95c:	29e0      	cmp	r1, #224	; 0xe0
 801a95e:	d044      	beq.n	801a9ea <etharp_output+0xba>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a960:	6871      	ldr	r1, [r6, #4]
 801a962:	68b0      	ldr	r0, [r6, #8]
 801a964:	4051      	eors	r1, r2
 801a966:	4201      	tst	r1, r0
 801a968:	d009      	beq.n	801a97e <etharp_output+0x4e>
        !ip4_addr_islinklocal(ipaddr)) {
 801a96a:	b292      	uxth	r2, r2
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a96c:	f64f 61a9 	movw	r1, #65193	; 0xfea9
 801a970:	428a      	cmp	r2, r1
 801a972:	d004      	beq.n	801a97e <etharp_output+0x4e>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801a974:	68f2      	ldr	r2, [r6, #12]
 801a976:	2a00      	cmp	r2, #0
 801a978:	d07a      	beq.n	801aa70 <etharp_output+0x140>
            dst_addr = netif_ip4_gw(netif);
 801a97a:	f106 050c 	add.w	r5, r6, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a97e:	4a3e      	ldr	r2, [pc, #248]	; (801aa78 <etharp_output+0x148>)
 801a980:	7812      	ldrb	r2, [r2, #0]
 801a982:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 801a986:	493d      	ldr	r1, [pc, #244]	; (801aa7c <etharp_output+0x14c>)
 801a988:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801a98c:	7d09      	ldrb	r1, [r1, #20]
 801a98e:	2901      	cmp	r1, #1
 801a990:	d943      	bls.n	801aa1a <etharp_output+0xea>
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a992:	4601      	mov	r1, r0
 801a994:	4839      	ldr	r0, [pc, #228]	; (801aa7c <etharp_output+0x14c>)
 801a996:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801a99a:	6889      	ldr	r1, [r1, #8]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a99c:	42b1      	cmp	r1, r6
 801a99e:	d13c      	bne.n	801aa1a <etharp_output+0xea>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801a9a0:	682c      	ldr	r4, [r5, #0]
 801a9a2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801a9a6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801a9aa:	6849      	ldr	r1, [r1, #4]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a9ac:	428c      	cmp	r4, r1
 801a9ae:	d134      	bne.n	801aa1a <etharp_output+0xea>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801a9b0:	4639      	mov	r1, r7
 801a9b2:	4630      	mov	r0, r6
 801a9b4:	f7ff fe74 	bl	801a6a0 <etharp_output_to_arp_index>
 801a9b8:	e058      	b.n	801aa6c <etharp_output+0x13c>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a9ba:	4b31      	ldr	r3, [pc, #196]	; (801aa80 <etharp_output+0x150>)
 801a9bc:	f240 321e 	movw	r2, #798	; 0x31e
 801a9c0:	4930      	ldr	r1, [pc, #192]	; (801aa84 <etharp_output+0x154>)
 801a9c2:	4831      	ldr	r0, [pc, #196]	; (801aa88 <etharp_output+0x158>)
 801a9c4:	f001 f85c 	bl	801ba80 <iprintf>
 801a9c8:	e7b9      	b.n	801a93e <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a9ca:	4b2d      	ldr	r3, [pc, #180]	; (801aa80 <etharp_output+0x150>)
 801a9cc:	f240 321f 	movw	r2, #799	; 0x31f
 801a9d0:	492e      	ldr	r1, [pc, #184]	; (801aa8c <etharp_output+0x15c>)
 801a9d2:	482d      	ldr	r0, [pc, #180]	; (801aa88 <etharp_output+0x158>)
 801a9d4:	f001 f854 	bl	801ba80 <iprintf>
 801a9d8:	e7b3      	b.n	801a942 <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a9da:	4b29      	ldr	r3, [pc, #164]	; (801aa80 <etharp_output+0x150>)
 801a9dc:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a9e0:	492b      	ldr	r1, [pc, #172]	; (801aa90 <etharp_output+0x160>)
 801a9e2:	4829      	ldr	r0, [pc, #164]	; (801aa88 <etharp_output+0x158>)
 801a9e4:	f001 f84c 	bl	801ba80 <iprintf>
 801a9e8:	e7ad      	b.n	801a946 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801a9ea:	2301      	movs	r3, #1
 801a9ec:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801a9f0:	2300      	movs	r3, #0
 801a9f2:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801a9f6:	235e      	movs	r3, #94	; 0x5e
 801a9f8:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801a9fc:	786b      	ldrb	r3, [r5, #1]
 801a9fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801aa02:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801aa06:	78ab      	ldrb	r3, [r5, #2]
 801aa08:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801aa0c:	78eb      	ldrb	r3, [r5, #3]
 801aa0e:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 801aa12:	ab02      	add	r3, sp, #8
 801aa14:	e021      	b.n	801aa5a <etharp_output+0x12a>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801aa16:	3301      	adds	r3, #1
 801aa18:	b2db      	uxtb	r3, r3
 801aa1a:	2b09      	cmp	r3, #9
 801aa1c:	d816      	bhi.n	801aa4c <etharp_output+0x11c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801aa1e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 801aa22:	4c16      	ldr	r4, [pc, #88]	; (801aa7c <etharp_output+0x14c>)
 801aa24:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 801aa28:	7d02      	ldrb	r2, [r0, #20]
 801aa2a:	2a01      	cmp	r2, #1
 801aa2c:	d9f3      	bls.n	801aa16 <etharp_output+0xe6>
          (arp_table[i].netif == netif) &&
 801aa2e:	6882      	ldr	r2, [r0, #8]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801aa30:	42b2      	cmp	r2, r6
 801aa32:	d1f0      	bne.n	801aa16 <etharp_output+0xe6>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801aa34:	682a      	ldr	r2, [r5, #0]
 801aa36:	6841      	ldr	r1, [r0, #4]
          (arp_table[i].netif == netif) &&
 801aa38:	428a      	cmp	r2, r1
 801aa3a:	d1ec      	bne.n	801aa16 <etharp_output+0xe6>
        ETHARP_SET_ADDRHINT(netif, i);
 801aa3c:	4a0e      	ldr	r2, [pc, #56]	; (801aa78 <etharp_output+0x148>)
 801aa3e:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801aa40:	461a      	mov	r2, r3
 801aa42:	4639      	mov	r1, r7
 801aa44:	4630      	mov	r0, r6
 801aa46:	f7ff fe2b 	bl	801a6a0 <etharp_output_to_arp_index>
 801aa4a:	e00f      	b.n	801aa6c <etharp_output+0x13c>
    return etharp_query(netif, dst_addr, q);
 801aa4c:	463a      	mov	r2, r7
 801aa4e:	4629      	mov	r1, r5
 801aa50:	4630      	mov	r0, r6
 801aa52:	f7ff fe93 	bl	801a77c <etharp_query>
 801aa56:	e009      	b.n	801aa6c <etharp_output+0x13c>
    dest = (const struct eth_addr *)&ethbroadcast;
 801aa58:	4b0e      	ldr	r3, [pc, #56]	; (801aa94 <etharp_output+0x164>)
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801aa5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801aa5e:	9200      	str	r2, [sp, #0]
 801aa60:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 801aa64:	4639      	mov	r1, r7
 801aa66:	4630      	mov	r0, r6
 801aa68:	f000 ff8a 	bl	801b980 <ethernet_output>
}
 801aa6c:	b005      	add	sp, #20
 801aa6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ERR_RTE;
 801aa70:	f06f 0003 	mvn.w	r0, #3
 801aa74:	e7fa      	b.n	801aa6c <etharp_output+0x13c>
 801aa76:	bf00      	nop
 801aa78:	20000b24 	.word	0x20000b24
 801aa7c:	20000a34 	.word	0x20000a34
 801aa80:	08020040 	.word	0x08020040
 801aa84:	0801cc94 	.word	0x0801cc94
 801aa88:	0801cca4 	.word	0x0801cca4
 801aa8c:	080201f4 	.word	0x080201f4
 801aa90:	0802016c 	.word	0x0802016c
 801aa94:	080205b8 	.word	0x080205b8

0801aa98 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801aa98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa9c:	b086      	sub	sp, #24
 801aa9e:	4606      	mov	r6, r0
 801aaa0:	4688      	mov	r8, r1
 801aaa2:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801aaa4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aaa8:	2124      	movs	r1, #36	; 0x24
 801aaaa:	2022      	movs	r0, #34	; 0x22
 801aaac:	f7f9 f816 	bl	8013adc <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 801aab0:	b3a0      	cbz	r0, 801ab1c <icmp_send_response+0x84>
 801aab2:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801aab4:	8943      	ldrh	r3, [r0, #10]
 801aab6:	2b23      	cmp	r3, #35	; 0x23
 801aab8:	d933      	bls.n	801ab22 <icmp_send_response+0x8a>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801aaba:	f8d6 c004 	ldr.w	ip, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801aabe:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 801aac0:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 801aac4:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 801aac6:	2300      	movs	r3, #0
 801aac8:	7123      	strb	r3, [r4, #4]
 801aaca:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 801aacc:	71a3      	strb	r3, [r4, #6]
 801aace:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801aad0:	686b      	ldr	r3, [r5, #4]
 801aad2:	6872      	ldr	r2, [r6, #4]
 801aad4:	6816      	ldr	r6, [r2, #0]
 801aad6:	6850      	ldr	r0, [r2, #4]
 801aad8:	6891      	ldr	r1, [r2, #8]
 801aada:	68d7      	ldr	r7, [r2, #12]
 801aadc:	609e      	str	r6, [r3, #8]
 801aade:	60d8      	str	r0, [r3, #12]
 801aae0:	6119      	str	r1, [r3, #16]
 801aae2:	615f      	str	r7, [r3, #20]
 801aae4:	6916      	ldr	r6, [r2, #16]
 801aae6:	6950      	ldr	r0, [r2, #20]
 801aae8:	6991      	ldr	r1, [r2, #24]
 801aaea:	619e      	str	r6, [r3, #24]
 801aaec:	61d8      	str	r0, [r3, #28]
 801aaee:	6219      	str	r1, [r3, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801aaf0:	f8dc 300c 	ldr.w	r3, [ip, #12]
 801aaf4:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801aaf6:	a805      	add	r0, sp, #20
 801aaf8:	f000 f8ec 	bl	801acd4 <ip4_route>
#endif
  if (netif != NULL) {
 801aafc:	b158      	cbz	r0, 801ab16 <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801aafe:	2100      	movs	r1, #0
 801ab00:	70a1      	strb	r1, [r4, #2]
 801ab02:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801ab04:	9002      	str	r0, [sp, #8]
 801ab06:	2301      	movs	r3, #1
 801ab08:	9301      	str	r3, [sp, #4]
 801ab0a:	9100      	str	r1, [sp, #0]
 801ab0c:	23ff      	movs	r3, #255	; 0xff
 801ab0e:	aa05      	add	r2, sp, #20
 801ab10:	4628      	mov	r0, r5
 801ab12:	f000 fa6f 	bl	801aff4 <ip4_output_if>
  }
  pbuf_free(q);
 801ab16:	4628      	mov	r0, r5
 801ab18:	f7f8 ff7e 	bl	8013a18 <pbuf_free>
}
 801ab1c:	b006      	add	sp, #24
 801ab1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801ab22:	4b04      	ldr	r3, [pc, #16]	; (801ab34 <icmp_send_response+0x9c>)
 801ab24:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801ab28:	4903      	ldr	r1, [pc, #12]	; (801ab38 <icmp_send_response+0xa0>)
 801ab2a:	4804      	ldr	r0, [pc, #16]	; (801ab3c <icmp_send_response+0xa4>)
 801ab2c:	f000 ffa8 	bl	801ba80 <iprintf>
 801ab30:	e7c3      	b.n	801aaba <icmp_send_response+0x22>
 801ab32:	bf00      	nop
 801ab34:	0802021c 	.word	0x0802021c
 801ab38:	08020254 	.word	0x08020254
 801ab3c:	0801cca4 	.word	0x0801cca4

0801ab40 <icmp_input>:
{
 801ab40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ab44:	b085      	sub	sp, #20
 801ab46:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 801ab48:	4b4a      	ldr	r3, [pc, #296]	; (801ac74 <icmp_input+0x134>)
 801ab4a:	689f      	ldr	r7, [r3, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 801ab4c:	783b      	ldrb	r3, [r7, #0]
 801ab4e:	f003 030f 	and.w	r3, r3, #15
 801ab52:	ea4f 0883 	mov.w	r8, r3, lsl #2
 801ab56:	4644      	mov	r4, r8
  if (hlen < IP_HLEN) {
 801ab58:	2c13      	cmp	r4, #19
 801ab5a:	d915      	bls.n	801ab88 <icmp_input+0x48>
 801ab5c:	460e      	mov	r6, r1
  if (p->len < sizeof(u16_t) * 2) {
 801ab5e:	8943      	ldrh	r3, [r0, #10]
 801ab60:	2b03      	cmp	r3, #3
 801ab62:	d911      	bls.n	801ab88 <icmp_input+0x48>
  type = *((u8_t *)p->payload);
 801ab64:	6843      	ldr	r3, [r0, #4]
 801ab66:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 801ab68:	2b08      	cmp	r3, #8
 801ab6a:	d161      	bne.n	801ac30 <icmp_input+0xf0>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ab6c:	4b41      	ldr	r3, [pc, #260]	; (801ac74 <icmp_input+0x134>)
 801ab6e:	6958      	ldr	r0, [r3, #20]
 801ab70:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 801ab74:	2be0      	cmp	r3, #224	; 0xe0
 801ab76:	d01a      	beq.n	801abae <icmp_input+0x6e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801ab78:	4b3e      	ldr	r3, [pc, #248]	; (801ac74 <icmp_input+0x134>)
 801ab7a:	6819      	ldr	r1, [r3, #0]
 801ab7c:	f000 fa4f 	bl	801b01e <ip4_addr_isbroadcast_u32>
 801ab80:	b9a8      	cbnz	r0, 801abae <icmp_input+0x6e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801ab82:	892b      	ldrh	r3, [r5, #8]
 801ab84:	2b07      	cmp	r3, #7
 801ab86:	d805      	bhi.n	801ab94 <icmp_input+0x54>
  pbuf_free(p);
 801ab88:	4628      	mov	r0, r5
 801ab8a:	f7f8 ff45 	bl	8013a18 <pbuf_free>
}
 801ab8e:	b005      	add	sp, #20
 801ab90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ab94:	f108 090e 	add.w	r9, r8, #14
 801ab98:	4649      	mov	r1, r9
 801ab9a:	4628      	mov	r0, r5
 801ab9c:	f7f8 fef1 	bl	8013982 <pbuf_add_header>
 801aba0:	2800      	cmp	r0, #0
 801aba2:	d03a      	beq.n	801ac1a <icmp_input+0xda>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801aba4:	892a      	ldrh	r2, [r5, #8]
 801aba6:	1913      	adds	r3, r2, r4
 801aba8:	b299      	uxth	r1, r3
        if (alloc_len < p->tot_len) {
 801abaa:	428a      	cmp	r2, r1
 801abac:	d903      	bls.n	801abb6 <icmp_input+0x76>
  pbuf_free(p);
 801abae:	4628      	mov	r0, r5
 801abb0:	f7f8 ff32 	bl	8013a18 <pbuf_free>
  return;
 801abb4:	e7eb      	b.n	801ab8e <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801abb6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801abba:	200e      	movs	r0, #14
 801abbc:	f7f8 ff8e 	bl	8013adc <pbuf_alloc>
        if (r == NULL) {
 801abc0:	4604      	mov	r4, r0
 801abc2:	2800      	cmp	r0, #0
 801abc4:	d0f3      	beq.n	801abae <icmp_input+0x6e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801abc6:	8942      	ldrh	r2, [r0, #10]
 801abc8:	f108 0308 	add.w	r3, r8, #8
 801abcc:	429a      	cmp	r2, r3
 801abce:	d313      	bcc.n	801abf8 <icmp_input+0xb8>
        MEMCPY(r->payload, iphdr_in, hlen);
 801abd0:	4642      	mov	r2, r8
 801abd2:	4639      	mov	r1, r7
 801abd4:	6840      	ldr	r0, [r0, #4]
 801abd6:	f000 ff3d 	bl	801ba54 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 801abda:	4641      	mov	r1, r8
 801abdc:	4620      	mov	r0, r4
 801abde:	f7f8 fed5 	bl	801398c <pbuf_remove_header>
 801abe2:	b960      	cbnz	r0, 801abfe <icmp_input+0xbe>
        if (pbuf_copy(r, p) != ERR_OK) {
 801abe4:	4629      	mov	r1, r5
 801abe6:	4620      	mov	r0, r4
 801abe8:	f7f9 f8dc 	bl	8013da4 <pbuf_copy>
 801abec:	b988      	cbnz	r0, 801ac12 <icmp_input+0xd2>
        pbuf_free(p);
 801abee:	4628      	mov	r0, r5
 801abf0:	f7f8 ff12 	bl	8013a18 <pbuf_free>
        p = r;
 801abf4:	4625      	mov	r5, r4
 801abf6:	e015      	b.n	801ac24 <icmp_input+0xe4>
          pbuf_free(r);
 801abf8:	f7f8 ff0e 	bl	8013a18 <pbuf_free>
          goto icmperr;
 801abfc:	e7d7      	b.n	801abae <icmp_input+0x6e>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801abfe:	4b1e      	ldr	r3, [pc, #120]	; (801ac78 <icmp_input+0x138>)
 801ac00:	22b6      	movs	r2, #182	; 0xb6
 801ac02:	491e      	ldr	r1, [pc, #120]	; (801ac7c <icmp_input+0x13c>)
 801ac04:	481e      	ldr	r0, [pc, #120]	; (801ac80 <icmp_input+0x140>)
 801ac06:	f000 ff3b 	bl	801ba80 <iprintf>
          pbuf_free(r);
 801ac0a:	4620      	mov	r0, r4
 801ac0c:	f7f8 ff04 	bl	8013a18 <pbuf_free>
          goto icmperr;
 801ac10:	e7cd      	b.n	801abae <icmp_input+0x6e>
          pbuf_free(r);
 801ac12:	4620      	mov	r0, r4
 801ac14:	f7f8 ff00 	bl	8013a18 <pbuf_free>
          goto icmperr;
 801ac18:	e7c9      	b.n	801abae <icmp_input+0x6e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ac1a:	4649      	mov	r1, r9
 801ac1c:	4628      	mov	r0, r5
 801ac1e:	f7f8 feb5 	bl	801398c <pbuf_remove_header>
 801ac22:	b948      	cbnz	r0, 801ac38 <icmp_input+0xf8>
      iecho = (struct icmp_echo_hdr *)p->payload;
 801ac24:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 801ac26:	4641      	mov	r1, r8
 801ac28:	4628      	mov	r0, r5
 801ac2a:	f7f8 feaa 	bl	8013982 <pbuf_add_header>
 801ac2e:	b150      	cbz	r0, 801ac46 <icmp_input+0x106>
  pbuf_free(p);
 801ac30:	4628      	mov	r0, r5
 801ac32:	f7f8 fef1 	bl	8013a18 <pbuf_free>
  return;
 801ac36:	e7aa      	b.n	801ab8e <icmp_input+0x4e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801ac38:	4b0f      	ldr	r3, [pc, #60]	; (801ac78 <icmp_input+0x138>)
 801ac3a:	22c7      	movs	r2, #199	; 0xc7
 801ac3c:	4911      	ldr	r1, [pc, #68]	; (801ac84 <icmp_input+0x144>)
 801ac3e:	4810      	ldr	r0, [pc, #64]	; (801ac80 <icmp_input+0x140>)
 801ac40:	f000 ff1e 	bl	801ba80 <iprintf>
          goto icmperr;
 801ac44:	e7b3      	b.n	801abae <icmp_input+0x6e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801ac46:	6868      	ldr	r0, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 801ac48:	490a      	ldr	r1, [pc, #40]	; (801ac74 <icmp_input+0x134>)
 801ac4a:	694b      	ldr	r3, [r1, #20]
 801ac4c:	60c3      	str	r3, [r0, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801ac4e:	690b      	ldr	r3, [r1, #16]
 801ac50:	6103      	str	r3, [r0, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801ac52:	2200      	movs	r2, #0
 801ac54:	7022      	strb	r2, [r4, #0]
        iecho->chksum = 0;
 801ac56:	70a2      	strb	r2, [r4, #2]
 801ac58:	70e2      	strb	r2, [r4, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801ac5a:	23ff      	movs	r3, #255	; 0xff
 801ac5c:	7203      	strb	r3, [r0, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801ac5e:	7282      	strb	r2, [r0, #10]
 801ac60:	72c2      	strb	r2, [r0, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801ac62:	9602      	str	r6, [sp, #8]
 801ac64:	2001      	movs	r0, #1
 801ac66:	9001      	str	r0, [sp, #4]
 801ac68:	9200      	str	r2, [sp, #0]
 801ac6a:	3114      	adds	r1, #20
 801ac6c:	4628      	mov	r0, r5
 801ac6e:	f000 f9c1 	bl	801aff4 <ip4_output_if>
        if (ret != ERR_OK) {
 801ac72:	e7dd      	b.n	801ac30 <icmp_input+0xf0>
 801ac74:	20003c68 	.word	0x20003c68
 801ac78:	0802021c 	.word	0x0802021c
 801ac7c:	08020280 	.word	0x08020280
 801ac80:	0801cca4 	.word	0x0801cca4
 801ac84:	080202b8 	.word	0x080202b8

0801ac88 <icmp_dest_unreach>:
{
 801ac88:	b508      	push	{r3, lr}
 801ac8a:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 801ac8c:	2103      	movs	r1, #3
 801ac8e:	f7ff ff03 	bl	801aa98 <icmp_send_response>
}
 801ac92:	bd08      	pop	{r3, pc}

0801ac94 <icmp_time_exceeded>:
{
 801ac94:	b508      	push	{r3, lr}
 801ac96:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 801ac98:	210b      	movs	r1, #11
 801ac9a:	f7ff fefd 	bl	801aa98 <icmp_send_response>
}
 801ac9e:	bd08      	pop	{r3, pc}

0801aca0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801aca0:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801aca2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 801aca6:	f013 0f01 	tst.w	r3, #1
 801acaa:	d00d      	beq.n	801acc8 <ip4_input_accept+0x28>
 801acac:	4601      	mov	r1, r0
 801acae:	6843      	ldr	r3, [r0, #4]
 801acb0:	b163      	cbz	r3, 801accc <ip4_input_accept+0x2c>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801acb2:	4a07      	ldr	r2, [pc, #28]	; (801acd0 <ip4_input_accept+0x30>)
 801acb4:	6950      	ldr	r0, [r2, #20]
 801acb6:	4283      	cmp	r3, r0
 801acb8:	d004      	beq.n	801acc4 <ip4_input_accept+0x24>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801acba:	f000 f9b0 	bl	801b01e <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801acbe:	b908      	cbnz	r0, 801acc4 <ip4_input_accept+0x24>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801acc0:	2000      	movs	r0, #0
 801acc2:	e002      	b.n	801acca <ip4_input_accept+0x2a>
      return 1;
 801acc4:	2001      	movs	r0, #1
 801acc6:	e000      	b.n	801acca <ip4_input_accept+0x2a>
  return 0;
 801acc8:	2000      	movs	r0, #0
}
 801acca:	bd08      	pop	{r3, pc}
  return 0;
 801accc:	2000      	movs	r0, #0
 801acce:	e7fc      	b.n	801acca <ip4_input_accept+0x2a>
 801acd0:	20003c68 	.word	0x20003c68

0801acd4 <ip4_route>:
{
 801acd4:	b430      	push	{r4, r5}
 801acd6:	4604      	mov	r4, r0
  NETIF_FOREACH(netif) {
 801acd8:	4b16      	ldr	r3, [pc, #88]	; (801ad34 <ip4_route+0x60>)
 801acda:	6818      	ldr	r0, [r3, #0]
 801acdc:	e000      	b.n	801ace0 <ip4_route+0xc>
 801acde:	6800      	ldr	r0, [r0, #0]
 801ace0:	b1b0      	cbz	r0, 801ad10 <ip4_route+0x3c>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ace2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 801ace6:	f013 0f01 	tst.w	r3, #1
 801acea:	d0f8      	beq.n	801acde <ip4_route+0xa>
 801acec:	f013 0f04 	tst.w	r3, #4
 801acf0:	d0f5      	beq.n	801acde <ip4_route+0xa>
 801acf2:	6842      	ldr	r2, [r0, #4]
 801acf4:	2a00      	cmp	r2, #0
 801acf6:	d0f2      	beq.n	801acde <ip4_route+0xa>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801acf8:	6821      	ldr	r1, [r4, #0]
 801acfa:	6885      	ldr	r5, [r0, #8]
 801acfc:	404a      	eors	r2, r1
 801acfe:	422a      	tst	r2, r5
 801ad00:	d015      	beq.n	801ad2e <ip4_route+0x5a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801ad02:	f013 0f02 	tst.w	r3, #2
 801ad06:	d1ea      	bne.n	801acde <ip4_route+0xa>
 801ad08:	68c3      	ldr	r3, [r0, #12]
 801ad0a:	4299      	cmp	r1, r3
 801ad0c:	d1e7      	bne.n	801acde <ip4_route+0xa>
 801ad0e:	e00e      	b.n	801ad2e <ip4_route+0x5a>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ad10:	4b09      	ldr	r3, [pc, #36]	; (801ad38 <ip4_route+0x64>)
 801ad12:	681b      	ldr	r3, [r3, #0]
 801ad14:	b15b      	cbz	r3, 801ad2e <ip4_route+0x5a>
 801ad16:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 801ad1a:	f002 0205 	and.w	r2, r2, #5
 801ad1e:	2a05      	cmp	r2, #5
 801ad20:	d105      	bne.n	801ad2e <ip4_route+0x5a>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ad22:	685a      	ldr	r2, [r3, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ad24:	b11a      	cbz	r2, 801ad2e <ip4_route+0x5a>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ad26:	7822      	ldrb	r2, [r4, #0]
 801ad28:	2a7f      	cmp	r2, #127	; 0x7f
 801ad2a:	d000      	beq.n	801ad2e <ip4_route+0x5a>
  return netif_default;
 801ad2c:	4618      	mov	r0, r3
}
 801ad2e:	bc30      	pop	{r4, r5}
 801ad30:	4770      	bx	lr
 801ad32:	bf00      	nop
 801ad34:	2000720c 	.word	0x2000720c
 801ad38:	20007210 	.word	0x20007210

0801ad3c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801ad3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad40:	4604      	mov	r4, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801ad42:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 801ad46:	f898 3000 	ldrb.w	r3, [r8]
 801ad4a:	091a      	lsrs	r2, r3, #4
 801ad4c:	2a04      	cmp	r2, #4
 801ad4e:	d004      	beq.n	801ad5a <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801ad50:	f7f8 fe62 	bl	8013a18 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 801ad54:	2000      	movs	r0, #0
 801ad56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad5a:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801ad5c:	f003 030f 	and.w	r3, r3, #15
 801ad60:	ea4f 0983 	mov.w	r9, r3, lsl #2
 801ad64:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801ad66:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 801ad6a:	f7f7 fdfd 	bl	8012968 <lwip_htons>
 801ad6e:	4606      	mov	r6, r0
  if (iphdr_len < p->tot_len) {
 801ad70:	8923      	ldrh	r3, [r4, #8]
 801ad72:	4283      	cmp	r3, r0
 801ad74:	d81b      	bhi.n	801adae <ip4_input+0x72>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801ad76:	8963      	ldrh	r3, [r4, #10]
 801ad78:	42ab      	cmp	r3, r5
 801ad7a:	d31d      	bcc.n	801adb8 <ip4_input+0x7c>
 801ad7c:	8923      	ldrh	r3, [r4, #8]
 801ad7e:	42b3      	cmp	r3, r6
 801ad80:	d31a      	bcc.n	801adb8 <ip4_input+0x7c>
 801ad82:	2d13      	cmp	r5, #19
 801ad84:	d918      	bls.n	801adb8 <ip4_input+0x7c>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801ad86:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801ad8a:	4a58      	ldr	r2, [pc, #352]	; (801aeec <ip4_input+0x1b0>)
 801ad8c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801ad8e:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801ad92:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ad94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ad98:	2be0      	cmp	r3, #224	; 0xe0
 801ad9a:	d111      	bne.n	801adc0 <ip4_input+0x84>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801ad9c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 801ada0:	f013 0f01 	tst.w	r3, #1
 801ada4:	d026      	beq.n	801adf4 <ip4_input+0xb8>
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	b9fb      	cbnz	r3, 801adea <ip4_input+0xae>
      netif = NULL;
 801adaa:	2500      	movs	r5, #0
 801adac:	e023      	b.n	801adf6 <ip4_input+0xba>
    pbuf_realloc(p, iphdr_len);
 801adae:	4601      	mov	r1, r0
 801adb0:	4620      	mov	r0, r4
 801adb2:	f7f8 ff41 	bl	8013c38 <pbuf_realloc>
 801adb6:	e7de      	b.n	801ad76 <ip4_input+0x3a>
    pbuf_free(p);
 801adb8:	4620      	mov	r0, r4
 801adba:	f7f8 fe2d 	bl	8013a18 <pbuf_free>
    return ERR_OK;
 801adbe:	e7c9      	b.n	801ad54 <ip4_input+0x18>
    if (ip4_input_accept(inp)) {
 801adc0:	4638      	mov	r0, r7
 801adc2:	f7ff ff6d 	bl	801aca0 <ip4_input_accept>
 801adc6:	b990      	cbnz	r0, 801adee <ip4_input+0xb2>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801adc8:	4b48      	ldr	r3, [pc, #288]	; (801aeec <ip4_input+0x1b0>)
 801adca:	7d1b      	ldrb	r3, [r3, #20]
 801adcc:	2b7f      	cmp	r3, #127	; 0x7f
 801adce:	d051      	beq.n	801ae74 <ip4_input+0x138>
        NETIF_FOREACH(netif) {
 801add0:	4b47      	ldr	r3, [pc, #284]	; (801aef0 <ip4_input+0x1b4>)
 801add2:	681d      	ldr	r5, [r3, #0]
 801add4:	e000      	b.n	801add8 <ip4_input+0x9c>
 801add6:	682d      	ldr	r5, [r5, #0]
 801add8:	b155      	cbz	r5, 801adf0 <ip4_input+0xb4>
          if (netif == inp) {
 801adda:	42af      	cmp	r7, r5
 801addc:	d0fb      	beq.n	801add6 <ip4_input+0x9a>
          if (ip4_input_accept(netif)) {
 801adde:	4628      	mov	r0, r5
 801ade0:	f7ff ff5e 	bl	801aca0 <ip4_input_accept>
 801ade4:	2800      	cmp	r0, #0
 801ade6:	d0f6      	beq.n	801add6 <ip4_input+0x9a>
 801ade8:	e002      	b.n	801adf0 <ip4_input+0xb4>
      netif = inp;
 801adea:	463d      	mov	r5, r7
 801adec:	e000      	b.n	801adf0 <ip4_input+0xb4>
      netif = inp;
 801adee:	463d      	mov	r5, r7
  if (netif == NULL) {
 801adf0:	b92d      	cbnz	r5, 801adfe <ip4_input+0xc2>
 801adf2:	e000      	b.n	801adf6 <ip4_input+0xba>
      netif = NULL;
 801adf4:	2500      	movs	r5, #0
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801adf6:	f898 3009 	ldrb.w	r3, [r8, #9]
 801adfa:	2b11      	cmp	r3, #17
 801adfc:	d03c      	beq.n	801ae78 <ip4_input+0x13c>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801adfe:	4b3b      	ldr	r3, [pc, #236]	; (801aeec <ip4_input+0x1b0>)
 801ae00:	6918      	ldr	r0, [r3, #16]
 801ae02:	2800      	cmp	r0, #0
 801ae04:	d140      	bne.n	801ae88 <ip4_input+0x14c>
  if (netif == NULL) {
 801ae06:	2d00      	cmp	r5, #0
 801ae08:	d04c      	beq.n	801aea4 <ip4_input+0x168>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801ae0a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801ae0e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801ae12:	b29b      	uxth	r3, r3
 801ae14:	b13b      	cbz	r3, 801ae26 <ip4_input+0xea>
    p = ip4_reass(p);
 801ae16:	4620      	mov	r0, r4
 801ae18:	f000 fb58 	bl	801b4cc <ip4_reass>
    if (p == NULL) {
 801ae1c:	4604      	mov	r4, r0
 801ae1e:	2800      	cmp	r0, #0
 801ae20:	d098      	beq.n	801ad54 <ip4_input+0x18>
    iphdr = (const struct ip_hdr *)p->payload;
 801ae22:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 801ae26:	4a31      	ldr	r2, [pc, #196]	; (801aeec <ip4_input+0x1b0>)
 801ae28:	6015      	str	r5, [r2, #0]
  ip_data.current_input_netif = inp;
 801ae2a:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801ae2c:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801ae30:	f898 3000 	ldrb.w	r3, [r8]
 801ae34:	f003 030f 	and.w	r3, r3, #15
 801ae38:	009b      	lsls	r3, r3, #2
 801ae3a:	8193      	strh	r3, [r2, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801ae3c:	4649      	mov	r1, r9
 801ae3e:	4620      	mov	r0, r4
 801ae40:	f7f8 fda4 	bl	801398c <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 801ae44:	f898 3009 	ldrb.w	r3, [r8, #9]
 801ae48:	2b06      	cmp	r3, #6
 801ae4a:	d03c      	beq.n	801aec6 <ip4_input+0x18a>
 801ae4c:	2b11      	cmp	r3, #17
 801ae4e:	d02d      	beq.n	801aeac <ip4_input+0x170>
 801ae50:	2b01      	cmp	r3, #1
 801ae52:	d03d      	beq.n	801aed0 <ip4_input+0x194>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ae54:	4629      	mov	r1, r5
 801ae56:	4b25      	ldr	r3, [pc, #148]	; (801aeec <ip4_input+0x1b0>)
 801ae58:	6958      	ldr	r0, [r3, #20]
 801ae5a:	f000 f8e0 	bl	801b01e <ip4_addr_isbroadcast_u32>
 801ae5e:	b928      	cbnz	r0, 801ae6c <ip4_input+0x130>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ae60:	4b22      	ldr	r3, [pc, #136]	; (801aeec <ip4_input+0x1b0>)
 801ae62:	695b      	ldr	r3, [r3, #20]
 801ae64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ae68:	2be0      	cmp	r3, #224	; 0xe0
 801ae6a:	d136      	bne.n	801aeda <ip4_input+0x19e>
        pbuf_free(p);
 801ae6c:	4620      	mov	r0, r4
 801ae6e:	f7f8 fdd3 	bl	8013a18 <pbuf_free>
        break;
 801ae72:	e01f      	b.n	801aeb4 <ip4_input+0x178>
      netif = NULL;
 801ae74:	2500      	movs	r5, #0
 801ae76:	e7be      	b.n	801adf6 <ip4_input+0xba>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801ae78:	eb08 0309 	add.w	r3, r8, r9
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801ae7c:	885b      	ldrh	r3, [r3, #2]
 801ae7e:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801ae82:	d1bc      	bne.n	801adfe <ip4_input+0xc2>
        netif = inp;
 801ae84:	463d      	mov	r5, r7
 801ae86:	e7be      	b.n	801ae06 <ip4_input+0xca>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ae88:	4639      	mov	r1, r7
 801ae8a:	f000 f8c8 	bl	801b01e <ip4_addr_isbroadcast_u32>
 801ae8e:	b928      	cbnz	r0, 801ae9c <ip4_input+0x160>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801ae90:	4b16      	ldr	r3, [pc, #88]	; (801aeec <ip4_input+0x1b0>)
 801ae92:	691b      	ldr	r3, [r3, #16]
 801ae94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ae98:	2be0      	cmp	r3, #224	; 0xe0
 801ae9a:	d1b4      	bne.n	801ae06 <ip4_input+0xca>
      pbuf_free(p);
 801ae9c:	4620      	mov	r0, r4
 801ae9e:	f7f8 fdbb 	bl	8013a18 <pbuf_free>
      return ERR_OK;
 801aea2:	e757      	b.n	801ad54 <ip4_input+0x18>
    pbuf_free(p);
 801aea4:	4620      	mov	r0, r4
 801aea6:	f7f8 fdb7 	bl	8013a18 <pbuf_free>
    return ERR_OK;
 801aeaa:	e753      	b.n	801ad54 <ip4_input+0x18>
        udp_input(p, inp);
 801aeac:	4639      	mov	r1, r7
 801aeae:	4620      	mov	r0, r4
 801aeb0:	f7fd fbd4 	bl	801865c <udp_input>
  ip_data.current_netif = NULL;
 801aeb4:	4b0d      	ldr	r3, [pc, #52]	; (801aeec <ip4_input+0x1b0>)
 801aeb6:	2200      	movs	r2, #0
 801aeb8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801aeba:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801aebc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801aebe:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801aec0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801aec2:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 801aec4:	e746      	b.n	801ad54 <ip4_input+0x18>
        tcp_input(p, inp);
 801aec6:	4639      	mov	r1, r7
 801aec8:	4620      	mov	r0, r4
 801aeca:	f7fb fc83 	bl	80167d4 <tcp_input>
        break;
 801aece:	e7f1      	b.n	801aeb4 <ip4_input+0x178>
        icmp_input(p, inp);
 801aed0:	4639      	mov	r1, r7
 801aed2:	4620      	mov	r0, r4
 801aed4:	f7ff fe34 	bl	801ab40 <icmp_input>
        break;
 801aed8:	e7ec      	b.n	801aeb4 <ip4_input+0x178>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801aeda:	4649      	mov	r1, r9
 801aedc:	4620      	mov	r0, r4
 801aede:	f7f8 fd95 	bl	8013a0c <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801aee2:	2102      	movs	r1, #2
 801aee4:	4620      	mov	r0, r4
 801aee6:	f7ff fecf 	bl	801ac88 <icmp_dest_unreach>
 801aeea:	e7bf      	b.n	801ae6c <ip4_input+0x130>
 801aeec:	20003c68 	.word	0x20003c68
 801aef0:	2000720c 	.word	0x2000720c

0801aef4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801aef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aef8:	b083      	sub	sp, #12
 801aefa:	4604      	mov	r4, r0
 801aefc:	460f      	mov	r7, r1
 801aefe:	4616      	mov	r6, r2
 801af00:	4699      	mov	r9, r3
 801af02:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801af06:	7b82      	ldrb	r2, [r0, #14]
 801af08:	2a01      	cmp	r2, #1
 801af0a:	d13f      	bne.n	801af8c <ip4_output_if_src+0x98>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801af0c:	2e00      	cmp	r6, #0
 801af0e:	d051      	beq.n	801afb4 <ip4_output_if_src+0xc0>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801af10:	2114      	movs	r1, #20
 801af12:	4620      	mov	r0, r4
 801af14:	f7f8 fd35 	bl	8013982 <pbuf_add_header>
 801af18:	2800      	cmp	r0, #0
 801af1a:	d159      	bne.n	801afd0 <ip4_output_if_src+0xdc>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 801af1c:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801af1e:	8963      	ldrh	r3, [r4, #10]
 801af20:	2b13      	cmp	r3, #19
 801af22:	d93b      	bls.n	801af9c <ip4_output_if_src+0xa8>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801af24:	f885 9008 	strb.w	r9, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 801af28:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801af2c:	726b      	strb	r3, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801af2e:	6833      	ldr	r3, [r6, #0]
 801af30:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801af32:	2345      	movs	r3, #69	; 0x45
 801af34:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 801af36:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 801af3a:	706b      	strb	r3, [r5, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801af3c:	8920      	ldrh	r0, [r4, #8]
 801af3e:	f7f7 fd13 	bl	8012968 <lwip_htons>
 801af42:	8068      	strh	r0, [r5, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801af44:	2300      	movs	r3, #0
 801af46:	71ab      	strb	r3, [r5, #6]
 801af48:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801af4a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 801aff0 <ip4_output_if_src+0xfc>
 801af4e:	f8b9 0000 	ldrh.w	r0, [r9]
 801af52:	f7f7 fd09 	bl	8012968 <lwip_htons>
 801af56:	80a8      	strh	r0, [r5, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801af58:	f8b9 3000 	ldrh.w	r3, [r9]
 801af5c:	3301      	adds	r3, #1
 801af5e:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 801af62:	b31f      	cbz	r7, 801afac <ip4_output_if_src+0xb8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801af64:	683b      	ldr	r3, [r7, #0]
 801af66:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801af68:	2300      	movs	r3, #0
 801af6a:	72ab      	strb	r3, [r5, #10]
 801af6c:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801af6e:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
 801af72:	b113      	cbz	r3, 801af7a <ip4_output_if_src+0x86>
 801af74:	8922      	ldrh	r2, [r4, #8]
 801af76:	4293      	cmp	r3, r2
 801af78:	d324      	bcc.n	801afc4 <ip4_output_if_src+0xd0>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801af7a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801af7e:	4632      	mov	r2, r6
 801af80:	4621      	mov	r1, r4
 801af82:	4640      	mov	r0, r8
 801af84:	4798      	blx	r3
}
 801af86:	b003      	add	sp, #12
 801af88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801af8c:	4b13      	ldr	r3, [pc, #76]	; (801afdc <ip4_output_if_src+0xe8>)
 801af8e:	f44f 7255 	mov.w	r2, #852	; 0x354
 801af92:	4913      	ldr	r1, [pc, #76]	; (801afe0 <ip4_output_if_src+0xec>)
 801af94:	4813      	ldr	r0, [pc, #76]	; (801afe4 <ip4_output_if_src+0xf0>)
 801af96:	f000 fd73 	bl	801ba80 <iprintf>
 801af9a:	e7b7      	b.n	801af0c <ip4_output_if_src+0x18>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801af9c:	4b0f      	ldr	r3, [pc, #60]	; (801afdc <ip4_output_if_src+0xe8>)
 801af9e:	f44f 7262 	mov.w	r2, #904	; 0x388
 801afa2:	4911      	ldr	r1, [pc, #68]	; (801afe8 <ip4_output_if_src+0xf4>)
 801afa4:	480f      	ldr	r0, [pc, #60]	; (801afe4 <ip4_output_if_src+0xf0>)
 801afa6:	f000 fd6b 	bl	801ba80 <iprintf>
 801afaa:	e7bb      	b.n	801af24 <ip4_output_if_src+0x30>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801afac:	4b0f      	ldr	r3, [pc, #60]	; (801afec <ip4_output_if_src+0xf8>)
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	60eb      	str	r3, [r5, #12]
 801afb2:	e7d9      	b.n	801af68 <ip4_output_if_src+0x74>
    if (p->len < IP_HLEN) {
 801afb4:	8963      	ldrh	r3, [r4, #10]
 801afb6:	2b13      	cmp	r3, #19
 801afb8:	d90d      	bls.n	801afd6 <ip4_output_if_src+0xe2>
    iphdr = (struct ip_hdr *)p->payload;
 801afba:	6863      	ldr	r3, [r4, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801afbc:	691b      	ldr	r3, [r3, #16]
 801afbe:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 801afc0:	ae01      	add	r6, sp, #4
 801afc2:	e7d4      	b.n	801af6e <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 801afc4:	4632      	mov	r2, r6
 801afc6:	4641      	mov	r1, r8
 801afc8:	4620      	mov	r0, r4
 801afca:	f000 fb8b 	bl	801b6e4 <ip4_frag>
 801afce:	e7da      	b.n	801af86 <ip4_output_if_src+0x92>
      return ERR_BUF;
 801afd0:	f06f 0001 	mvn.w	r0, #1
 801afd4:	e7d7      	b.n	801af86 <ip4_output_if_src+0x92>
      return ERR_BUF;
 801afd6:	f06f 0001 	mvn.w	r0, #1
 801afda:	e7d4      	b.n	801af86 <ip4_output_if_src+0x92>
 801afdc:	080202ec 	.word	0x080202ec
 801afe0:	08020320 	.word	0x08020320
 801afe4:	0801cca4 	.word	0x0801cca4
 801afe8:	0802032c 	.word	0x0802032c
 801afec:	0802035c 	.word	0x0802035c
 801aff0:	20000b26 	.word	0x20000b26

0801aff4 <ip4_output_if>:
{
 801aff4:	b530      	push	{r4, r5, lr}
 801aff6:	b085      	sub	sp, #20
 801aff8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
 801affa:	4615      	mov	r5, r2
 801affc:	b11a      	cbz	r2, 801b006 <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 801affe:	b109      	cbz	r1, 801b004 <ip4_output_if+0x10>
 801b000:	680a      	ldr	r2, [r1, #0]
 801b002:	b902      	cbnz	r2, 801b006 <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 801b004:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801b006:	9402      	str	r4, [sp, #8]
 801b008:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 801b00c:	9201      	str	r2, [sp, #4]
 801b00e:	f89d 2020 	ldrb.w	r2, [sp, #32]
 801b012:	9200      	str	r2, [sp, #0]
 801b014:	462a      	mov	r2, r5
 801b016:	f7ff ff6d 	bl	801aef4 <ip4_output_if_src>
}
 801b01a:	b005      	add	sp, #20
 801b01c:	bd30      	pop	{r4, r5, pc}

0801b01e <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b01e:	4603      	mov	r3, r0
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b020:	1e42      	subs	r2, r0, #1
 801b022:	f112 0f03 	cmn.w	r2, #3
 801b026:	d812      	bhi.n	801b04e <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b028:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
 801b02c:	f010 0002 	ands.w	r0, r0, #2
 801b030:	d014      	beq.n	801b05c <ip4_addr_isbroadcast_u32+0x3e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b032:	684a      	ldr	r2, [r1, #4]
 801b034:	429a      	cmp	r2, r3
 801b036:	d00c      	beq.n	801b052 <ip4_addr_isbroadcast_u32+0x34>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b038:	6888      	ldr	r0, [r1, #8]
 801b03a:	405a      	eors	r2, r3
 801b03c:	4202      	tst	r2, r0
 801b03e:	d10a      	bne.n	801b056 <ip4_addr_isbroadcast_u32+0x38>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b040:	43c2      	mvns	r2, r0
 801b042:	ea23 0300 	bic.w	r3, r3, r0
 801b046:	429a      	cmp	r2, r3
 801b048:	d007      	beq.n	801b05a <ip4_addr_isbroadcast_u32+0x3c>
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 801b04a:	2000      	movs	r0, #0
 801b04c:	4770      	bx	lr
    return 1;
 801b04e:	2001      	movs	r0, #1
 801b050:	4770      	bx	lr
    return 0;
 801b052:	2000      	movs	r0, #0
 801b054:	4770      	bx	lr
    return 0;
 801b056:	2000      	movs	r0, #0
 801b058:	4770      	bx	lr
    return 1;
 801b05a:	2001      	movs	r0, #1
  }
}
 801b05c:	4770      	bx	lr
	...

0801b060 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b060:	b538      	push	{r3, r4, r5, lr}
 801b062:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801b064:	4b0c      	ldr	r3, [pc, #48]	; (801b098 <ip_reass_dequeue_datagram+0x38>)
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	4283      	cmp	r3, r0
 801b06a:	d008      	beq.n	801b07e <ip_reass_dequeue_datagram+0x1e>
 801b06c:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801b06e:	b151      	cbz	r1, 801b086 <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 801b070:	6823      	ldr	r3, [r4, #0]
 801b072:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801b074:	4621      	mov	r1, r4
 801b076:	2004      	movs	r0, #4
 801b078:	f7f8 fa0a 	bl	8013490 <memp_free>
}
 801b07c:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 801b07e:	6802      	ldr	r2, [r0, #0]
 801b080:	4b05      	ldr	r3, [pc, #20]	; (801b098 <ip_reass_dequeue_datagram+0x38>)
 801b082:	601a      	str	r2, [r3, #0]
 801b084:	e7f6      	b.n	801b074 <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801b086:	4b05      	ldr	r3, [pc, #20]	; (801b09c <ip_reass_dequeue_datagram+0x3c>)
 801b088:	f240 1245 	movw	r2, #325	; 0x145
 801b08c:	4904      	ldr	r1, [pc, #16]	; (801b0a0 <ip_reass_dequeue_datagram+0x40>)
 801b08e:	4805      	ldr	r0, [pc, #20]	; (801b0a4 <ip_reass_dequeue_datagram+0x44>)
 801b090:	f000 fcf6 	bl	801ba80 <iprintf>
 801b094:	e7ec      	b.n	801b070 <ip_reass_dequeue_datagram+0x10>
 801b096:	bf00      	nop
 801b098:	20000b2c 	.word	0x20000b2c
 801b09c:	08020364 	.word	0x08020364
 801b0a0:	080203a0 	.word	0x080203a0
 801b0a4:	0801cca4 	.word	0x0801cca4

0801b0a8 <ip_reass_free_complete_datagram>:
{
 801b0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b0ac:	4680      	mov	r8, r0
 801b0ae:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b0b0:	4281      	cmp	r1, r0
 801b0b2:	d015      	beq.n	801b0e0 <ip_reass_free_complete_datagram+0x38>
  if (prev != NULL) {
 801b0b4:	f1b9 0f00 	cmp.w	r9, #0
 801b0b8:	d009      	beq.n	801b0ce <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b0ba:	f8d9 3000 	ldr.w	r3, [r9]
 801b0be:	4543      	cmp	r3, r8
 801b0c0:	d005      	beq.n	801b0ce <ip_reass_free_complete_datagram+0x26>
 801b0c2:	4b30      	ldr	r3, [pc, #192]	; (801b184 <ip_reass_free_complete_datagram+0xdc>)
 801b0c4:	22ad      	movs	r2, #173	; 0xad
 801b0c6:	4930      	ldr	r1, [pc, #192]	; (801b188 <ip_reass_free_complete_datagram+0xe0>)
 801b0c8:	4830      	ldr	r0, [pc, #192]	; (801b18c <ip_reass_free_complete_datagram+0xe4>)
 801b0ca:	f000 fcd9 	bl	801ba80 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b0ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b0d2:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 801b0d4:	889a      	ldrh	r2, [r3, #4]
 801b0d6:	b152      	cbz	r2, 801b0ee <ip_reass_free_complete_datagram+0x46>
  u16_t pbufs_freed = 0;
 801b0d8:	2600      	movs	r6, #0
  p = ipr->p;
 801b0da:	f8d8 5004 	ldr.w	r5, [r8, #4]
  while (p != NULL) {
 801b0de:	e02e      	b.n	801b13e <ip_reass_free_complete_datagram+0x96>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b0e0:	4b28      	ldr	r3, [pc, #160]	; (801b184 <ip_reass_free_complete_datagram+0xdc>)
 801b0e2:	22ab      	movs	r2, #171	; 0xab
 801b0e4:	492a      	ldr	r1, [pc, #168]	; (801b190 <ip_reass_free_complete_datagram+0xe8>)
 801b0e6:	4829      	ldr	r0, [pc, #164]	; (801b18c <ip_reass_free_complete_datagram+0xe4>)
 801b0e8:	f000 fcca 	bl	801ba80 <iprintf>
 801b0ec:	e7e2      	b.n	801b0b4 <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 801b0ee:	681b      	ldr	r3, [r3, #0]
 801b0f0:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b0f4:	4643      	mov	r3, r8
 801b0f6:	686a      	ldr	r2, [r5, #4]
 801b0f8:	f853 1f08 	ldr.w	r1, [r3, #8]!
 801b0fc:	685e      	ldr	r6, [r3, #4]
 801b0fe:	689c      	ldr	r4, [r3, #8]
 801b100:	68d8      	ldr	r0, [r3, #12]
 801b102:	6011      	str	r1, [r2, #0]
 801b104:	6056      	str	r6, [r2, #4]
 801b106:	6094      	str	r4, [r2, #8]
 801b108:	60d0      	str	r0, [r2, #12]
 801b10a:	6919      	ldr	r1, [r3, #16]
 801b10c:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801b10e:	2101      	movs	r1, #1
 801b110:	4628      	mov	r0, r5
 801b112:	f7ff fdbf 	bl	801ac94 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801b116:	4628      	mov	r0, r5
 801b118:	f7f8 fde2 	bl	8013ce0 <pbuf_clen>
 801b11c:	4606      	mov	r6, r0
    pbuf_free(p);
 801b11e:	4628      	mov	r0, r5
 801b120:	f7f8 fc7a 	bl	8013a18 <pbuf_free>
 801b124:	e7d9      	b.n	801b0da <ip_reass_free_complete_datagram+0x32>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b126:	4b17      	ldr	r3, [pc, #92]	; (801b184 <ip_reass_free_complete_datagram+0xdc>)
 801b128:	22cc      	movs	r2, #204	; 0xcc
 801b12a:	491a      	ldr	r1, [pc, #104]	; (801b194 <ip_reass_free_complete_datagram+0xec>)
 801b12c:	4817      	ldr	r0, [pc, #92]	; (801b18c <ip_reass_free_complete_datagram+0xe4>)
 801b12e:	f000 fca7 	bl	801ba80 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b132:	4434      	add	r4, r6
 801b134:	b2a6      	uxth	r6, r4
    pbuf_free(pcur);
 801b136:	4628      	mov	r0, r5
 801b138:	f7f8 fc6e 	bl	8013a18 <pbuf_free>
    p = iprh->next_pbuf;
 801b13c:	463d      	mov	r5, r7
  while (p != NULL) {
 801b13e:	b155      	cbz	r5, 801b156 <ip_reass_free_complete_datagram+0xae>
    iprh = (struct ip_reass_helper *)p->payload;
 801b140:	686b      	ldr	r3, [r5, #4]
    p = iprh->next_pbuf;
 801b142:	681f      	ldr	r7, [r3, #0]
    clen = pbuf_clen(pcur);
 801b144:	4628      	mov	r0, r5
 801b146:	f7f8 fdcb 	bl	8013ce0 <pbuf_clen>
 801b14a:	4604      	mov	r4, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b14c:	1833      	adds	r3, r6, r0
 801b14e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b152:	dbee      	blt.n	801b132 <ip_reass_free_complete_datagram+0x8a>
 801b154:	e7e7      	b.n	801b126 <ip_reass_free_complete_datagram+0x7e>
  ip_reass_dequeue_datagram(ipr, prev);
 801b156:	4649      	mov	r1, r9
 801b158:	4640      	mov	r0, r8
 801b15a:	f7ff ff81 	bl	801b060 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801b15e:	4b0e      	ldr	r3, [pc, #56]	; (801b198 <ip_reass_free_complete_datagram+0xf0>)
 801b160:	881b      	ldrh	r3, [r3, #0]
 801b162:	42b3      	cmp	r3, r6
 801b164:	d306      	bcc.n	801b174 <ip_reass_free_complete_datagram+0xcc>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801b166:	4a0c      	ldr	r2, [pc, #48]	; (801b198 <ip_reass_free_complete_datagram+0xf0>)
 801b168:	8813      	ldrh	r3, [r2, #0]
 801b16a:	1b9b      	subs	r3, r3, r6
 801b16c:	8013      	strh	r3, [r2, #0]
}
 801b16e:	4630      	mov	r0, r6
 801b170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801b174:	4b03      	ldr	r3, [pc, #12]	; (801b184 <ip_reass_free_complete_datagram+0xdc>)
 801b176:	22d2      	movs	r2, #210	; 0xd2
 801b178:	4908      	ldr	r1, [pc, #32]	; (801b19c <ip_reass_free_complete_datagram+0xf4>)
 801b17a:	4804      	ldr	r0, [pc, #16]	; (801b18c <ip_reass_free_complete_datagram+0xe4>)
 801b17c:	f000 fc80 	bl	801ba80 <iprintf>
 801b180:	e7f1      	b.n	801b166 <ip_reass_free_complete_datagram+0xbe>
 801b182:	bf00      	nop
 801b184:	08020364 	.word	0x08020364
 801b188:	080203c8 	.word	0x080203c8
 801b18c:	0801cca4 	.word	0x0801cca4
 801b190:	080203bc 	.word	0x080203bc
 801b194:	080203dc 	.word	0x080203dc
 801b198:	20000b28 	.word	0x20000b28
 801b19c:	080203fc 	.word	0x080203fc

0801b1a0 <ip_reass_remove_oldest_datagram>:
{
 801b1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1a4:	4606      	mov	r6, r0
 801b1a6:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 801b1a8:	2700      	movs	r7, #0
 801b1aa:	e02b      	b.n	801b204 <ip_reass_remove_oldest_datagram+0x64>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801b1ac:	699a      	ldr	r2, [r3, #24]
 801b1ae:	f8d6 c010 	ldr.w	ip, [r6, #16]
 801b1b2:	4562      	cmp	r2, ip
 801b1b4:	d111      	bne.n	801b1da <ip_reass_remove_oldest_datagram+0x3a>
 801b1b6:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 801b1ba:	88b2      	ldrh	r2, [r6, #4]
 801b1bc:	4594      	cmp	ip, r2
 801b1be:	d10c      	bne.n	801b1da <ip_reass_remove_oldest_datagram+0x3a>
 801b1c0:	e001      	b.n	801b1c6 <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 801b1c2:	4629      	mov	r1, r5
          oldest = r;
 801b1c4:	4618      	mov	r0, r3
      if (r->next != NULL) {
 801b1c6:	681a      	ldr	r2, [r3, #0]
 801b1c8:	b192      	cbz	r2, 801b1f0 <ip_reass_remove_oldest_datagram+0x50>
 801b1ca:	461d      	mov	r5, r3
 801b1cc:	4613      	mov	r3, r2
    while (r != NULL) {
 801b1ce:	b18b      	cbz	r3, 801b1f4 <ip_reass_remove_oldest_datagram+0x54>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801b1d0:	695a      	ldr	r2, [r3, #20]
 801b1d2:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 801b1d6:	4562      	cmp	r2, ip
 801b1d8:	d0e8      	beq.n	801b1ac <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 801b1da:	3401      	adds	r4, #1
        if (oldest == NULL) {
 801b1dc:	2800      	cmp	r0, #0
 801b1de:	d0f0      	beq.n	801b1c2 <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 801b1e0:	f893 c01f 	ldrb.w	ip, [r3, #31]
 801b1e4:	7fc2      	ldrb	r2, [r0, #31]
 801b1e6:	4594      	cmp	ip, r2
 801b1e8:	d8ed      	bhi.n	801b1c6 <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 801b1ea:	4629      	mov	r1, r5
          oldest = r;
 801b1ec:	4618      	mov	r0, r3
 801b1ee:	e7ea      	b.n	801b1c6 <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 801b1f0:	462b      	mov	r3, r5
 801b1f2:	e7ea      	b.n	801b1ca <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 801b1f4:	b110      	cbz	r0, 801b1fc <ip_reass_remove_oldest_datagram+0x5c>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801b1f6:	f7ff ff57 	bl	801b0a8 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 801b1fa:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801b1fc:	4547      	cmp	r7, r8
 801b1fe:	da08      	bge.n	801b212 <ip_reass_remove_oldest_datagram+0x72>
 801b200:	2c01      	cmp	r4, #1
 801b202:	dd06      	ble.n	801b212 <ip_reass_remove_oldest_datagram+0x72>
    r = reassdatagrams;
 801b204:	4b04      	ldr	r3, [pc, #16]	; (801b218 <ip_reass_remove_oldest_datagram+0x78>)
 801b206:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 801b208:	2400      	movs	r4, #0
    oldest_prev = NULL;
 801b20a:	4621      	mov	r1, r4
    prev = NULL;
 801b20c:	4625      	mov	r5, r4
    oldest = NULL;
 801b20e:	4620      	mov	r0, r4
    while (r != NULL) {
 801b210:	e7dd      	b.n	801b1ce <ip_reass_remove_oldest_datagram+0x2e>
}
 801b212:	4638      	mov	r0, r7
 801b214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b218:	20000b2c 	.word	0x20000b2c

0801b21c <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801b21c:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801b21e:	4604      	mov	r4, r0
 801b220:	b120      	cbz	r0, 801b22c <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 801b222:	4621      	mov	r1, r4
 801b224:	2005      	movs	r0, #5
 801b226:	f7f8 f933 	bl	8013490 <memp_free>
}
 801b22a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801b22c:	4b03      	ldr	r3, [pc, #12]	; (801b23c <ip_frag_free_pbuf_custom_ref+0x20>)
 801b22e:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801b232:	4903      	ldr	r1, [pc, #12]	; (801b240 <ip_frag_free_pbuf_custom_ref+0x24>)
 801b234:	4803      	ldr	r0, [pc, #12]	; (801b244 <ip_frag_free_pbuf_custom_ref+0x28>)
 801b236:	f000 fc23 	bl	801ba80 <iprintf>
 801b23a:	e7f2      	b.n	801b222 <ip_frag_free_pbuf_custom_ref+0x6>
 801b23c:	08020364 	.word	0x08020364
 801b240:	0801fe38 	.word	0x0801fe38
 801b244:	0801cca4 	.word	0x0801cca4

0801b248 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801b248:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801b24a:	4604      	mov	r4, r0
 801b24c:	b138      	cbz	r0, 801b25e <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 801b24e:	6960      	ldr	r0, [r4, #20]
 801b250:	b108      	cbz	r0, 801b256 <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 801b252:	f7f8 fbe1 	bl	8013a18 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801b256:	4620      	mov	r0, r4
 801b258:	f7ff ffe0 	bl	801b21c <ip_frag_free_pbuf_custom_ref>
}
 801b25c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801b25e:	4b04      	ldr	r3, [pc, #16]	; (801b270 <ipfrag_free_pbuf_custom+0x28>)
 801b260:	f240 22ce 	movw	r2, #718	; 0x2ce
 801b264:	4903      	ldr	r1, [pc, #12]	; (801b274 <ipfrag_free_pbuf_custom+0x2c>)
 801b266:	4804      	ldr	r0, [pc, #16]	; (801b278 <ipfrag_free_pbuf_custom+0x30>)
 801b268:	f000 fc0a 	bl	801ba80 <iprintf>
 801b26c:	e7ef      	b.n	801b24e <ipfrag_free_pbuf_custom+0x6>
 801b26e:	bf00      	nop
 801b270:	08020364 	.word	0x08020364
 801b274:	08020420 	.word	0x08020420
 801b278:	0801cca4 	.word	0x0801cca4

0801b27c <ip_reass_chain_frag_into_datagram_and_validate>:
{
 801b27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b280:	4681      	mov	r9, r0
 801b282:	460e      	mov	r6, r1
 801b284:	4692      	mov	sl, r2
  fraghdr = (struct ip_hdr *)new_p->payload;
 801b286:	684c      	ldr	r4, [r1, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b288:	8860      	ldrh	r0, [r4, #2]
 801b28a:	f7f7 fb6d 	bl	8012968 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 801b28e:	7823      	ldrb	r3, [r4, #0]
 801b290:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 801b294:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 801b298:	d203      	bcs.n	801b2a2 <ip_reass_chain_frag_into_datagram_and_validate+0x26>
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b29a:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2a2:	009a      	lsls	r2, r3, #2
  len = (u16_t)(len - hlen);
 801b2a4:	1a80      	subs	r0, r0, r2
 801b2a6:	b285      	uxth	r5, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 801b2a8:	88e0      	ldrh	r0, [r4, #6]
 801b2aa:	f7f7 fb5d 	bl	8012968 <lwip_htons>
 801b2ae:	f3c0 040c 	ubfx	r4, r0, #0, #13
 801b2b2:	00e4      	lsls	r4, r4, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 801b2b4:	6877      	ldr	r7, [r6, #4]
  iprh->next_pbuf = NULL;
 801b2b6:	2300      	movs	r3, #0
 801b2b8:	703b      	strb	r3, [r7, #0]
 801b2ba:	707b      	strb	r3, [r7, #1]
 801b2bc:	70bb      	strb	r3, [r7, #2]
 801b2be:	70fb      	strb	r3, [r7, #3]
  iprh->start = offset;
 801b2c0:	80bc      	strh	r4, [r7, #4]
  iprh->end = (u16_t)(offset + len);
 801b2c2:	1928      	adds	r0, r5, r4
 801b2c4:	fa1f fc80 	uxth.w	ip, r0
 801b2c8:	80f8      	strh	r0, [r7, #6]
  if (iprh->end < offset) {
 801b2ca:	45a4      	cmp	ip, r4
 801b2cc:	f0c0 8092 	bcc.w	801b3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x178>
  for (q = ipr->p; q != NULL;) {
 801b2d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
  int valid = 1;
 801b2d4:	f04f 0801 	mov.w	r8, #1
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801b2d8:	461d      	mov	r5, r3
  for (q = ipr->p; q != NULL;) {
 801b2da:	e022      	b.n	801b322 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
      iprh->next_pbuf = q;
 801b2dc:	6039      	str	r1, [r7, #0]
      if (iprh_prev != NULL) {
 801b2de:	b1c5      	cbz	r5, 801b312 <ip_reass_chain_frag_into_datagram_and_validate+0x96>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801b2e0:	88ea      	ldrh	r2, [r5, #6]
 801b2e2:	42a2      	cmp	r2, r4
 801b2e4:	f200 8089 	bhi.w	801b3fa <ip_reass_chain_frag_into_datagram_and_validate+0x17e>
 801b2e8:	889b      	ldrh	r3, [r3, #4]
 801b2ea:	459c      	cmp	ip, r3
 801b2ec:	f200 8088 	bhi.w	801b400 <ip_reass_chain_frag_into_datagram_and_validate+0x184>
        iprh_prev->next_pbuf = new_p;
 801b2f0:	602e      	str	r6, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 801b2f2:	88bb      	ldrh	r3, [r7, #4]
 801b2f4:	429a      	cmp	r2, r3
 801b2f6:	d001      	beq.n	801b2fc <ip_reass_chain_frag_into_datagram_and_validate+0x80>
          valid = 0;
 801b2f8:	f04f 0800 	mov.w	r8, #0
  if (q == NULL) {
 801b2fc:	b321      	cbz	r1, 801b348 <ip_reass_chain_frag_into_datagram_and_validate+0xcc>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801b2fe:	f1ba 0f00 	cmp.w	sl, #0
 801b302:	d143      	bne.n	801b38c <ip_reass_chain_frag_into_datagram_and_validate+0x110>
 801b304:	f899 301e 	ldrb.w	r3, [r9, #30]
 801b308:	f013 0f01 	tst.w	r3, #1
 801b30c:	d13e      	bne.n	801b38c <ip_reass_chain_frag_into_datagram_and_validate+0x110>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801b30e:	4650      	mov	r0, sl
 801b310:	e7c5      	b.n	801b29e <ip_reass_chain_frag_into_datagram_and_validate+0x22>
        if (iprh->end > iprh_tmp->start) {
 801b312:	889b      	ldrh	r3, [r3, #4]
 801b314:	459c      	cmp	ip, r3
 801b316:	d876      	bhi.n	801b406 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
        ipr->p = new_p;
 801b318:	f8c9 6004 	str.w	r6, [r9, #4]
 801b31c:	e7ee      	b.n	801b2fc <ip_reass_chain_frag_into_datagram_and_validate+0x80>
    q = iprh_tmp->next_pbuf;
 801b31e:	6819      	ldr	r1, [r3, #0]
    iprh_prev = iprh_tmp;
 801b320:	461d      	mov	r5, r3
  for (q = ipr->p; q != NULL;) {
 801b322:	2900      	cmp	r1, #0
 801b324:	d0ea      	beq.n	801b2fc <ip_reass_chain_frag_into_datagram_and_validate+0x80>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801b326:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 801b328:	889a      	ldrh	r2, [r3, #4]
 801b32a:	42a2      	cmp	r2, r4
 801b32c:	d8d6      	bhi.n	801b2dc <ip_reass_chain_frag_into_datagram_and_validate+0x60>
    } else if (iprh->start == iprh_tmp->start) {
 801b32e:	42a2      	cmp	r2, r4
 801b330:	d06c      	beq.n	801b40c <ip_reass_chain_frag_into_datagram_and_validate+0x190>
    } else if (iprh->start < iprh_tmp->end) {
 801b332:	88d9      	ldrh	r1, [r3, #6]
 801b334:	42a1      	cmp	r1, r4
 801b336:	d86c      	bhi.n	801b412 <ip_reass_chain_frag_into_datagram_and_validate+0x196>
      if (iprh_prev != NULL) {
 801b338:	2d00      	cmp	r5, #0
 801b33a:	d0f0      	beq.n	801b31e <ip_reass_chain_frag_into_datagram_and_validate+0xa2>
        if (iprh_prev->end != iprh_tmp->start) {
 801b33c:	88e9      	ldrh	r1, [r5, #6]
 801b33e:	428a      	cmp	r2, r1
 801b340:	d0ed      	beq.n	801b31e <ip_reass_chain_frag_into_datagram_and_validate+0xa2>
          valid = 0;
 801b342:	f04f 0800 	mov.w	r8, #0
 801b346:	e7ea      	b.n	801b31e <ip_reass_chain_frag_into_datagram_and_validate+0xa2>
    if (iprh_prev != NULL) {
 801b348:	b19d      	cbz	r5, 801b372 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801b34a:	88ea      	ldrh	r2, [r5, #6]
 801b34c:	88bb      	ldrh	r3, [r7, #4]
 801b34e:	429a      	cmp	r2, r3
 801b350:	d807      	bhi.n	801b362 <ip_reass_chain_frag_into_datagram_and_validate+0xe6>
      iprh_prev->next_pbuf = new_p;
 801b352:	602e      	str	r6, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 801b354:	88ea      	ldrh	r2, [r5, #6]
 801b356:	88bb      	ldrh	r3, [r7, #4]
 801b358:	429a      	cmp	r2, r3
 801b35a:	d0d0      	beq.n	801b2fe <ip_reass_chain_frag_into_datagram_and_validate+0x82>
        valid = 0;
 801b35c:	f04f 0800 	mov.w	r8, #0
 801b360:	e7cd      	b.n	801b2fe <ip_reass_chain_frag_into_datagram_and_validate+0x82>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801b362:	4b2d      	ldr	r3, [pc, #180]	; (801b418 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>)
 801b364:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801b368:	492c      	ldr	r1, [pc, #176]	; (801b41c <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>)
 801b36a:	482d      	ldr	r0, [pc, #180]	; (801b420 <ip_reass_chain_frag_into_datagram_and_validate+0x1a4>)
 801b36c:	f000 fb88 	bl	801ba80 <iprintf>
 801b370:	e7ef      	b.n	801b352 <ip_reass_chain_frag_into_datagram_and_validate+0xd6>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801b372:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801b376:	b133      	cbz	r3, 801b386 <ip_reass_chain_frag_into_datagram_and_validate+0x10a>
 801b378:	4b27      	ldr	r3, [pc, #156]	; (801b418 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>)
 801b37a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801b37e:	4929      	ldr	r1, [pc, #164]	; (801b424 <ip_reass_chain_frag_into_datagram_and_validate+0x1a8>)
 801b380:	4827      	ldr	r0, [pc, #156]	; (801b420 <ip_reass_chain_frag_into_datagram_and_validate+0x1a4>)
 801b382:	f000 fb7d 	bl	801ba80 <iprintf>
      ipr->p = new_p;
 801b386:	f8c9 6004 	str.w	r6, [r9, #4]
 801b38a:	e7b8      	b.n	801b2fe <ip_reass_chain_frag_into_datagram_and_validate+0x82>
    if (valid) {
 801b38c:	f1b8 0f00 	cmp.w	r8, #0
 801b390:	d02e      	beq.n	801b3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801b392:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801b396:	b333      	cbz	r3, 801b3e6 <ip_reass_chain_frag_into_datagram_and_validate+0x16a>
 801b398:	6858      	ldr	r0, [r3, #4]
 801b39a:	8883      	ldrh	r3, [r0, #4]
 801b39c:	bb33      	cbnz	r3, 801b3ec <ip_reass_chain_frag_into_datagram_and_validate+0x170>
        q = iprh->next_pbuf;
 801b39e:	683a      	ldr	r2, [r7, #0]
        while (q != NULL) {
 801b3a0:	b152      	cbz	r2, 801b3b8 <ip_reass_chain_frag_into_datagram_and_validate+0x13c>
          iprh = (struct ip_reass_helper *)q->payload;
 801b3a2:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 801b3a4:	88f9      	ldrh	r1, [r7, #6]
 801b3a6:	889a      	ldrh	r2, [r3, #4]
 801b3a8:	4291      	cmp	r1, r2
 801b3aa:	d102      	bne.n	801b3b2 <ip_reass_chain_frag_into_datagram_and_validate+0x136>
          q = iprh->next_pbuf;
 801b3ac:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper *)q->payload;
 801b3ae:	461f      	mov	r7, r3
 801b3b0:	e7f6      	b.n	801b3a0 <ip_reass_chain_frag_into_datagram_and_validate+0x124>
 801b3b2:	461f      	mov	r7, r3
            valid = 0;
 801b3b4:	f04f 0800 	mov.w	r8, #0
        if (valid) {
 801b3b8:	f1b8 0f00 	cmp.w	r8, #0
 801b3bc:	d018      	beq.n	801b3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
          LWIP_ASSERT("sanity check",
 801b3be:	42b8      	cmp	r0, r7
 801b3c0:	d009      	beq.n	801b3d6 <ip_reass_chain_frag_into_datagram_and_validate+0x15a>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801b3c2:	683b      	ldr	r3, [r7, #0]
 801b3c4:	b1a3      	cbz	r3, 801b3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
 801b3c6:	4b14      	ldr	r3, [pc, #80]	; (801b418 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>)
 801b3c8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801b3cc:	4916      	ldr	r1, [pc, #88]	; (801b428 <ip_reass_chain_frag_into_datagram_and_validate+0x1ac>)
 801b3ce:	4814      	ldr	r0, [pc, #80]	; (801b420 <ip_reass_chain_frag_into_datagram_and_validate+0x1a4>)
 801b3d0:	f000 fb56 	bl	801ba80 <iprintf>
 801b3d4:	e00c      	b.n	801b3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
          LWIP_ASSERT("sanity check",
 801b3d6:	4b10      	ldr	r3, [pc, #64]	; (801b418 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>)
 801b3d8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801b3dc:	4913      	ldr	r1, [pc, #76]	; (801b42c <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>)
 801b3de:	4810      	ldr	r0, [pc, #64]	; (801b420 <ip_reass_chain_frag_into_datagram_and_validate+0x1a4>)
 801b3e0:	f000 fb4e 	bl	801ba80 <iprintf>
 801b3e4:	e7ed      	b.n	801b3c2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
        valid = 0;
 801b3e6:	f04f 0800 	mov.w	r8, #0
 801b3ea:	e001      	b.n	801b3f0 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
 801b3ec:	f04f 0800 	mov.w	r8, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801b3f0:	4640      	mov	r0, r8
 801b3f2:	e754      	b.n	801b29e <ip_reass_chain_frag_into_datagram_and_validate+0x22>
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b3f4:	f04f 30ff 	mov.w	r0, #4294967295
 801b3f8:	e751      	b.n	801b29e <ip_reass_chain_frag_into_datagram_and_validate+0x22>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b3fa:	f04f 30ff 	mov.w	r0, #4294967295
 801b3fe:	e74e      	b.n	801b29e <ip_reass_chain_frag_into_datagram_and_validate+0x22>
 801b400:	f04f 30ff 	mov.w	r0, #4294967295
 801b404:	e74b      	b.n	801b29e <ip_reass_chain_frag_into_datagram_and_validate+0x22>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b406:	f04f 30ff 	mov.w	r0, #4294967295
 801b40a:	e748      	b.n	801b29e <ip_reass_chain_frag_into_datagram_and_validate+0x22>
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b40c:	f04f 30ff 	mov.w	r0, #4294967295
 801b410:	e745      	b.n	801b29e <ip_reass_chain_frag_into_datagram_and_validate+0x22>
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b412:	f04f 30ff 	mov.w	r0, #4294967295
 801b416:	e742      	b.n	801b29e <ip_reass_chain_frag_into_datagram_and_validate+0x22>
 801b418:	08020364 	.word	0x08020364
 801b41c:	0802042c 	.word	0x0802042c
 801b420:	0801cca4 	.word	0x0801cca4
 801b424:	0802044c 	.word	0x0802044c
 801b428:	08020494 	.word	0x08020494
 801b42c:	08020484 	.word	0x08020484

0801b430 <ip_frag_alloc_pbuf_custom_ref>:
{
 801b430:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801b432:	2005      	movs	r0, #5
 801b434:	f7f8 f812 	bl	801345c <memp_malloc>
}
 801b438:	bd08      	pop	{r3, pc}
	...

0801b43c <ip_reass_enqueue_new_datagram>:
{
 801b43c:	b570      	push	{r4, r5, r6, lr}
 801b43e:	4605      	mov	r5, r0
 801b440:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b442:	2004      	movs	r0, #4
 801b444:	f7f8 f80a 	bl	801345c <memp_malloc>
  if (ipr == NULL) {
 801b448:	4604      	mov	r4, r0
 801b44a:	b1c8      	cbz	r0, 801b480 <ip_reass_enqueue_new_datagram+0x44>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801b44c:	2300      	movs	r3, #0
 801b44e:	6063      	str	r3, [r4, #4]
 801b450:	60a3      	str	r3, [r4, #8]
 801b452:	60e3      	str	r3, [r4, #12]
 801b454:	6123      	str	r3, [r4, #16]
 801b456:	6163      	str	r3, [r4, #20]
 801b458:	61a3      	str	r3, [r4, #24]
 801b45a:	61e3      	str	r3, [r4, #28]
  ipr->timer = IP_REASS_MAXAGE;
 801b45c:	230f      	movs	r3, #15
 801b45e:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 801b460:	4b0e      	ldr	r3, [pc, #56]	; (801b49c <ip_reass_enqueue_new_datagram+0x60>)
 801b462:	681a      	ldr	r2, [r3, #0]
 801b464:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 801b466:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801b468:	682b      	ldr	r3, [r5, #0]
 801b46a:	6868      	ldr	r0, [r5, #4]
 801b46c:	68a9      	ldr	r1, [r5, #8]
 801b46e:	68ea      	ldr	r2, [r5, #12]
 801b470:	60a3      	str	r3, [r4, #8]
 801b472:	60e0      	str	r0, [r4, #12]
 801b474:	6121      	str	r1, [r4, #16]
 801b476:	6162      	str	r2, [r4, #20]
 801b478:	692b      	ldr	r3, [r5, #16]
 801b47a:	61a3      	str	r3, [r4, #24]
}
 801b47c:	4620      	mov	r0, r4
 801b47e:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801b480:	4631      	mov	r1, r6
 801b482:	4628      	mov	r0, r5
 801b484:	f7ff fe8c 	bl	801b1a0 <ip_reass_remove_oldest_datagram>
 801b488:	42b0      	cmp	r0, r6
 801b48a:	da02      	bge.n	801b492 <ip_reass_enqueue_new_datagram+0x56>
    if (ipr == NULL)
 801b48c:	2c00      	cmp	r4, #0
 801b48e:	d1dd      	bne.n	801b44c <ip_reass_enqueue_new_datagram+0x10>
 801b490:	e7f4      	b.n	801b47c <ip_reass_enqueue_new_datagram+0x40>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b492:	2004      	movs	r0, #4
 801b494:	f7f7 ffe2 	bl	801345c <memp_malloc>
 801b498:	4604      	mov	r4, r0
 801b49a:	e7f7      	b.n	801b48c <ip_reass_enqueue_new_datagram+0x50>
 801b49c:	20000b2c 	.word	0x20000b2c

0801b4a0 <ip_reass_tmr>:
{
 801b4a0:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 801b4a2:	4b09      	ldr	r3, [pc, #36]	; (801b4c8 <ip_reass_tmr+0x28>)
 801b4a4:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 801b4a6:	2400      	movs	r4, #0
  while (r != NULL) {
 801b4a8:	e004      	b.n	801b4b4 <ip_reass_tmr+0x14>
      r = r->next;
 801b4aa:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 801b4ac:	4621      	mov	r1, r4
 801b4ae:	f7ff fdfb 	bl	801b0a8 <ip_reass_free_complete_datagram>
      r = r->next;
 801b4b2:	4628      	mov	r0, r5
  while (r != NULL) {
 801b4b4:	b138      	cbz	r0, 801b4c6 <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 801b4b6:	7fc3      	ldrb	r3, [r0, #31]
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	d0f6      	beq.n	801b4aa <ip_reass_tmr+0xa>
      r->timer--;
 801b4bc:	3b01      	subs	r3, #1
 801b4be:	77c3      	strb	r3, [r0, #31]
      prev = r;
 801b4c0:	4604      	mov	r4, r0
      r = r->next;
 801b4c2:	6800      	ldr	r0, [r0, #0]
 801b4c4:	e7f6      	b.n	801b4b4 <ip_reass_tmr+0x14>
}
 801b4c6:	bd38      	pop	{r3, r4, r5, pc}
 801b4c8:	20000b2c 	.word	0x20000b2c

0801b4cc <ip4_reass>:
{
 801b4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b4d0:	4606      	mov	r6, r0
  fraghdr = (struct ip_hdr *)p->payload;
 801b4d2:	6845      	ldr	r5, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801b4d4:	782b      	ldrb	r3, [r5, #0]
 801b4d6:	f003 030f 	and.w	r3, r3, #15
 801b4da:	2b05      	cmp	r3, #5
 801b4dc:	f040 80d5 	bne.w	801b68a <ip4_reass+0x1be>
  offset = IPH_OFFSET_BYTES(fraghdr);
 801b4e0:	88e8      	ldrh	r0, [r5, #6]
 801b4e2:	f7f7 fa41 	bl	8012968 <lwip_htons>
 801b4e6:	f3c0 080c 	ubfx	r8, r0, #0, #13
 801b4ea:	ea4f 08c8 	mov.w	r8, r8, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b4ee:	8868      	ldrh	r0, [r5, #2]
 801b4f0:	f7f7 fa3a 	bl	8012968 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 801b4f4:	782b      	ldrb	r3, [r5, #0]
 801b4f6:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 801b4fa:	009f      	lsls	r7, r3, #2
 801b4fc:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 801b500:	f0c0 80c3 	bcc.w	801b68a <ip4_reass+0x1be>
  len = (u16_t)(len - hlen);
 801b504:	1bc0      	subs	r0, r0, r7
 801b506:	b287      	uxth	r7, r0
  clen = pbuf_clen(p);
 801b508:	4630      	mov	r0, r6
 801b50a:	f7f8 fbe9 	bl	8013ce0 <pbuf_clen>
 801b50e:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801b510:	4b6d      	ldr	r3, [pc, #436]	; (801b6c8 <ip4_reass+0x1fc>)
 801b512:	881b      	ldrh	r3, [r3, #0]
 801b514:	4403      	add	r3, r0
 801b516:	2b0a      	cmp	r3, #10
 801b518:	dc02      	bgt.n	801b520 <ip4_reass+0x54>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b51a:	4b6c      	ldr	r3, [pc, #432]	; (801b6cc <ip4_reass+0x200>)
 801b51c:	681c      	ldr	r4, [r3, #0]
 801b51e:	e00d      	b.n	801b53c <ip4_reass+0x70>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b520:	4601      	mov	r1, r0
 801b522:	4628      	mov	r0, r5
 801b524:	f7ff fe3c 	bl	801b1a0 <ip_reass_remove_oldest_datagram>
 801b528:	2800      	cmp	r0, #0
 801b52a:	f000 80ae 	beq.w	801b68a <ip4_reass+0x1be>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801b52e:	4b66      	ldr	r3, [pc, #408]	; (801b6c8 <ip4_reass+0x1fc>)
 801b530:	881b      	ldrh	r3, [r3, #0]
 801b532:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b534:	2b0a      	cmp	r3, #10
 801b536:	ddf0      	ble.n	801b51a <ip4_reass+0x4e>
 801b538:	e0a7      	b.n	801b68a <ip4_reass+0x1be>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b53a:	6824      	ldr	r4, [r4, #0]
 801b53c:	b15c      	cbz	r4, 801b556 <ip4_reass+0x8a>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801b53e:	6962      	ldr	r2, [r4, #20]
 801b540:	68eb      	ldr	r3, [r5, #12]
 801b542:	429a      	cmp	r2, r3
 801b544:	d1f9      	bne.n	801b53a <ip4_reass+0x6e>
 801b546:	69a2      	ldr	r2, [r4, #24]
 801b548:	692b      	ldr	r3, [r5, #16]
 801b54a:	429a      	cmp	r2, r3
 801b54c:	d1f5      	bne.n	801b53a <ip4_reass+0x6e>
 801b54e:	89a2      	ldrh	r2, [r4, #12]
 801b550:	88ab      	ldrh	r3, [r5, #4]
 801b552:	429a      	cmp	r2, r3
 801b554:	d1f1      	bne.n	801b53a <ip4_reass+0x6e>
  if (ipr == NULL) {
 801b556:	b374      	cbz	r4, 801b5b6 <ip4_reass+0xea>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b558:	88e8      	ldrh	r0, [r5, #6]
 801b55a:	f7f7 fa05 	bl	8012968 <lwip_htons>
 801b55e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801b562:	b380      	cbz	r0, 801b5c6 <ip4_reass+0xfa>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801b564:	88ed      	ldrh	r5, [r5, #6]
 801b566:	f005 0520 	and.w	r5, r5, #32
 801b56a:	2d00      	cmp	r5, #0
 801b56c:	bf0c      	ite	eq
 801b56e:	2201      	moveq	r2, #1
 801b570:	2200      	movne	r2, #0
  if (is_last) {
 801b572:	d109      	bne.n	801b588 <ip4_reass+0xbc>
    u16_t datagram_len = (u16_t)(offset + len);
 801b574:	eb08 0307 	add.w	r3, r8, r7
 801b578:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801b57a:	4598      	cmp	r8, r3
 801b57c:	f200 8082 	bhi.w	801b684 <ip4_reass+0x1b8>
 801b580:	f64f 71eb 	movw	r1, #65515	; 0xffeb
 801b584:	428b      	cmp	r3, r1
 801b586:	d87d      	bhi.n	801b684 <ip4_reass+0x1b8>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801b588:	4631      	mov	r1, r6
 801b58a:	4620      	mov	r0, r4
 801b58c:	f7ff fe76 	bl	801b27c <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801b590:	f1b0 3fff 	cmp.w	r0, #4294967295
 801b594:	d076      	beq.n	801b684 <ip4_reass+0x1b8>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801b596:	4b4c      	ldr	r3, [pc, #304]	; (801b6c8 <ip4_reass+0x1fc>)
 801b598:	881a      	ldrh	r2, [r3, #0]
 801b59a:	4491      	add	r9, r2
 801b59c:	f8a3 9000 	strh.w	r9, [r3]
  if (is_last) {
 801b5a0:	b92d      	cbnz	r5, 801b5ae <ip4_reass+0xe2>
    u16_t datagram_len = (u16_t)(offset + len);
 801b5a2:	4447      	add	r7, r8
    ipr->datagram_len = datagram_len;
 801b5a4:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801b5a6:	7fa3      	ldrb	r3, [r4, #30]
 801b5a8:	f043 0301 	orr.w	r3, r3, #1
 801b5ac:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801b5ae:	2801      	cmp	r0, #1
 801b5b0:	d01b      	beq.n	801b5ea <ip4_reass+0x11e>
  return NULL;
 801b5b2:	2500      	movs	r5, #0
 801b5b4:	e06d      	b.n	801b692 <ip4_reass+0x1c6>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801b5b6:	4649      	mov	r1, r9
 801b5b8:	4628      	mov	r0, r5
 801b5ba:	f7ff ff3f 	bl	801b43c <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 801b5be:	4604      	mov	r4, r0
 801b5c0:	2800      	cmp	r0, #0
 801b5c2:	d1cf      	bne.n	801b564 <ip4_reass+0x98>
 801b5c4:	e061      	b.n	801b68a <ip4_reass+0x1be>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801b5c6:	89e0      	ldrh	r0, [r4, #14]
 801b5c8:	f7f7 f9ce 	bl	8012968 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b5cc:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801b5d0:	2800      	cmp	r0, #0
 801b5d2:	d0c7      	beq.n	801b564 <ip4_reass+0x98>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801b5d4:	682b      	ldr	r3, [r5, #0]
 801b5d6:	6868      	ldr	r0, [r5, #4]
 801b5d8:	68a9      	ldr	r1, [r5, #8]
 801b5da:	68ea      	ldr	r2, [r5, #12]
 801b5dc:	60a3      	str	r3, [r4, #8]
 801b5de:	60e0      	str	r0, [r4, #12]
 801b5e0:	6121      	str	r1, [r4, #16]
 801b5e2:	6162      	str	r2, [r4, #20]
 801b5e4:	692b      	ldr	r3, [r5, #16]
 801b5e6:	61a3      	str	r3, [r4, #24]
 801b5e8:	e7bc      	b.n	801b564 <ip4_reass+0x98>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801b5ea:	8ba0      	ldrh	r0, [r4, #28]
 801b5ec:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801b5ee:	6863      	ldr	r3, [r4, #4]
 801b5f0:	685d      	ldr	r5, [r3, #4]
 801b5f2:	682e      	ldr	r6, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801b5f4:	4623      	mov	r3, r4
 801b5f6:	f853 2f08 	ldr.w	r2, [r3, #8]!
 801b5fa:	f8d3 c004 	ldr.w	ip, [r3, #4]
 801b5fe:	689f      	ldr	r7, [r3, #8]
 801b600:	68d9      	ldr	r1, [r3, #12]
 801b602:	602a      	str	r2, [r5, #0]
 801b604:	f8c5 c004 	str.w	ip, [r5, #4]
 801b608:	60af      	str	r7, [r5, #8]
 801b60a:	60e9      	str	r1, [r5, #12]
 801b60c:	691a      	ldr	r2, [r3, #16]
 801b60e:	612a      	str	r2, [r5, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801b610:	b280      	uxth	r0, r0
 801b612:	f7f7 f9a9 	bl	8012968 <lwip_htons>
 801b616:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801b618:	2300      	movs	r3, #0
 801b61a:	71ab      	strb	r3, [r5, #6]
 801b61c:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801b61e:	72ab      	strb	r3, [r5, #10]
 801b620:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 801b622:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 801b624:	e009      	b.n	801b63a <ip4_reass+0x16e>
      iprh = (struct ip_reass_helper *)r->payload;
 801b626:	6877      	ldr	r7, [r6, #4]
      pbuf_remove_header(r, IP_HLEN);
 801b628:	2114      	movs	r1, #20
 801b62a:	4630      	mov	r0, r6
 801b62c:	f7f8 f9ae 	bl	801398c <pbuf_remove_header>
      pbuf_cat(p, r);
 801b630:	4631      	mov	r1, r6
 801b632:	4628      	mov	r0, r5
 801b634:	f7f8 fb74 	bl	8013d20 <pbuf_cat>
      r = iprh->next_pbuf;
 801b638:	683e      	ldr	r6, [r7, #0]
    while (r != NULL) {
 801b63a:	2e00      	cmp	r6, #0
 801b63c:	d1f3      	bne.n	801b626 <ip4_reass+0x15a>
    if (ipr == reassdatagrams) {
 801b63e:	4b23      	ldr	r3, [pc, #140]	; (801b6cc <ip4_reass+0x200>)
 801b640:	6819      	ldr	r1, [r3, #0]
 801b642:	428c      	cmp	r4, r1
 801b644:	d005      	beq.n	801b652 <ip4_reass+0x186>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b646:	b129      	cbz	r1, 801b654 <ip4_reass+0x188>
        if (ipr_prev->next == ipr) {
 801b648:	680b      	ldr	r3, [r1, #0]
 801b64a:	429c      	cmp	r4, r3
 801b64c:	d002      	beq.n	801b654 <ip4_reass+0x188>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b64e:	4619      	mov	r1, r3
 801b650:	e7f9      	b.n	801b646 <ip4_reass+0x17a>
      ipr_prev = NULL;
 801b652:	4631      	mov	r1, r6
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801b654:	4620      	mov	r0, r4
 801b656:	f7ff fd03 	bl	801b060 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 801b65a:	4628      	mov	r0, r5
 801b65c:	f7f8 fb40 	bl	8013ce0 <pbuf_clen>
 801b660:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801b662:	4b19      	ldr	r3, [pc, #100]	; (801b6c8 <ip4_reass+0x1fc>)
 801b664:	881b      	ldrh	r3, [r3, #0]
 801b666:	4283      	cmp	r3, r0
 801b668:	d304      	bcc.n	801b674 <ip4_reass+0x1a8>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801b66a:	4a17      	ldr	r2, [pc, #92]	; (801b6c8 <ip4_reass+0x1fc>)
 801b66c:	8813      	ldrh	r3, [r2, #0]
 801b66e:	1b1c      	subs	r4, r3, r4
 801b670:	8014      	strh	r4, [r2, #0]
    return p;
 801b672:	e00e      	b.n	801b692 <ip4_reass+0x1c6>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801b674:	4b16      	ldr	r3, [pc, #88]	; (801b6d0 <ip4_reass+0x204>)
 801b676:	f240 229b 	movw	r2, #667	; 0x29b
 801b67a:	4916      	ldr	r1, [pc, #88]	; (801b6d4 <ip4_reass+0x208>)
 801b67c:	4816      	ldr	r0, [pc, #88]	; (801b6d8 <ip4_reass+0x20c>)
 801b67e:	f000 f9ff 	bl	801ba80 <iprintf>
 801b682:	e7f2      	b.n	801b66a <ip4_reass+0x19e>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801b684:	b144      	cbz	r4, 801b698 <ip4_reass+0x1cc>
  if (ipr->p == NULL) {
 801b686:	6863      	ldr	r3, [r4, #4]
 801b688:	b173      	cbz	r3, 801b6a8 <ip4_reass+0x1dc>
  pbuf_free(p);
 801b68a:	4630      	mov	r0, r6
 801b68c:	f7f8 f9c4 	bl	8013a18 <pbuf_free>
  return NULL;
 801b690:	2500      	movs	r5, #0
}
 801b692:	4628      	mov	r0, r5
 801b694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801b698:	4b0d      	ldr	r3, [pc, #52]	; (801b6d0 <ip4_reass+0x204>)
 801b69a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801b69e:	490f      	ldr	r1, [pc, #60]	; (801b6dc <ip4_reass+0x210>)
 801b6a0:	480d      	ldr	r0, [pc, #52]	; (801b6d8 <ip4_reass+0x20c>)
 801b6a2:	f000 f9ed 	bl	801ba80 <iprintf>
 801b6a6:	e7ee      	b.n	801b686 <ip4_reass+0x1ba>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801b6a8:	4b08      	ldr	r3, [pc, #32]	; (801b6cc <ip4_reass+0x200>)
 801b6aa:	681b      	ldr	r3, [r3, #0]
 801b6ac:	429c      	cmp	r4, r3
 801b6ae:	d006      	beq.n	801b6be <ip4_reass+0x1f2>
 801b6b0:	4b07      	ldr	r3, [pc, #28]	; (801b6d0 <ip4_reass+0x204>)
 801b6b2:	f240 22ab 	movw	r2, #683	; 0x2ab
 801b6b6:	490a      	ldr	r1, [pc, #40]	; (801b6e0 <ip4_reass+0x214>)
 801b6b8:	4807      	ldr	r0, [pc, #28]	; (801b6d8 <ip4_reass+0x20c>)
 801b6ba:	f000 f9e1 	bl	801ba80 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801b6be:	2100      	movs	r1, #0
 801b6c0:	4620      	mov	r0, r4
 801b6c2:	f7ff fccd 	bl	801b060 <ip_reass_dequeue_datagram>
 801b6c6:	e7e0      	b.n	801b68a <ip4_reass+0x1be>
 801b6c8:	20000b28 	.word	0x20000b28
 801b6cc:	20000b2c 	.word	0x20000b2c
 801b6d0:	08020364 	.word	0x08020364
 801b6d4:	080204b8 	.word	0x080204b8
 801b6d8:	0801cca4 	.word	0x0801cca4
 801b6dc:	080204d4 	.word	0x080204d4
 801b6e0:	080204e0 	.word	0x080204e0

0801b6e4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801b6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6e8:	b08b      	sub	sp, #44	; 0x2c
 801b6ea:	4606      	mov	r6, r0
 801b6ec:	9106      	str	r1, [sp, #24]
 801b6ee:	9208      	str	r2, [sp, #32]
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801b6f0:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
 801b6f2:	3b14      	subs	r3, #20
 801b6f4:	d450      	bmi.n	801b798 <ip4_frag+0xb4>
 801b6f6:	f3c3 03cf 	ubfx	r3, r3, #3, #16
 801b6fa:	9304      	str	r3, [sp, #16]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801b6fc:	f8d6 b004 	ldr.w	fp, [r6, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801b700:	f89b 3000 	ldrb.w	r3, [fp]
 801b704:	f003 030f 	and.w	r3, r3, #15
 801b708:	2b05      	cmp	r3, #5
 801b70a:	f040 80d3 	bne.w	801b8b4 <ip4_frag+0x1d0>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801b70e:	8973      	ldrh	r3, [r6, #10]
 801b710:	2b13      	cmp	r3, #19
 801b712:	d943      	bls.n	801b79c <ip4_frag+0xb8>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801b714:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801b718:	f7f7 f926 	bl	8012968 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 801b71c:	f3c0 030c 	ubfx	r3, r0, #0, #13
 801b720:	9305      	str	r3, [sp, #20]
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801b722:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 801b726:	9309      	str	r3, [sp, #36]	; 0x24

  left = (u16_t)(p->tot_len - IP_HLEN);
 801b728:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 801b72c:	f1aa 0a14 	sub.w	sl, sl, #20
 801b730:	fa1f f38a 	uxth.w	r3, sl
 801b734:	9302      	str	r3, [sp, #8]
  u16_t poff = IP_HLEN;
 801b736:	2714      	movs	r7, #20
  u16_t newpbuflen = 0;
 801b738:	2400      	movs	r4, #0

  while (left) {
 801b73a:	9b02      	ldr	r3, [sp, #8]
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	f000 80b7 	beq.w	801b8b0 <ip4_frag+0x1cc>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801b742:	9b04      	ldr	r3, [sp, #16]
 801b744:	00db      	lsls	r3, r3, #3
 801b746:	b29b      	uxth	r3, r3
 801b748:	9a02      	ldr	r2, [sp, #8]
 801b74a:	4293      	cmp	r3, r2
 801b74c:	bf28      	it	cs
 801b74e:	4613      	movcs	r3, r2
 801b750:	9303      	str	r3, [sp, #12]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801b752:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b756:	2114      	movs	r1, #20
 801b758:	200e      	movs	r0, #14
 801b75a:	f7f8 f9bf 	bl	8013adc <pbuf_alloc>
    if (rambuf == NULL) {
 801b75e:	4682      	mov	sl, r0
 801b760:	2800      	cmp	r0, #0
 801b762:	f000 80aa 	beq.w	801b8ba <ip4_frag+0x1d6>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b766:	8943      	ldrh	r3, [r0, #10]
 801b768:	2b13      	cmp	r3, #19
 801b76a:	d921      	bls.n	801b7b0 <ip4_frag+0xcc>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b76c:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b770:	f8db 2000 	ldr.w	r2, [fp]
 801b774:	f8db 5004 	ldr.w	r5, [fp, #4]
 801b778:	f8db 0008 	ldr.w	r0, [fp, #8]
 801b77c:	f8db 100c 	ldr.w	r1, [fp, #12]
 801b780:	601a      	str	r2, [r3, #0]
 801b782:	605d      	str	r5, [r3, #4]
 801b784:	6098      	str	r0, [r3, #8]
 801b786:	60d9      	str	r1, [r3, #12]
 801b788:	f8db 2010 	ldr.w	r2, [fp, #16]
 801b78c:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b78e:	f8da 3004 	ldr.w	r3, [sl, #4]
 801b792:	9307      	str	r3, [sp, #28]

    left_to_copy = fragsize;
 801b794:	9d03      	ldr	r5, [sp, #12]
    while (left_to_copy) {
 801b796:	e03c      	b.n	801b812 <ip4_frag+0x12e>
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801b798:	3307      	adds	r3, #7
 801b79a:	e7ac      	b.n	801b6f6 <ip4_frag+0x12>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801b79c:	4b48      	ldr	r3, [pc, #288]	; (801b8c0 <ip4_frag+0x1dc>)
 801b79e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801b7a2:	4948      	ldr	r1, [pc, #288]	; (801b8c4 <ip4_frag+0x1e0>)
 801b7a4:	4848      	ldr	r0, [pc, #288]	; (801b8c8 <ip4_frag+0x1e4>)
 801b7a6:	f000 f96b 	bl	801ba80 <iprintf>
 801b7aa:	f06f 0005 	mvn.w	r0, #5
 801b7ae:	e043      	b.n	801b838 <ip4_frag+0x154>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b7b0:	4b43      	ldr	r3, [pc, #268]	; (801b8c0 <ip4_frag+0x1dc>)
 801b7b2:	f44f 7249 	mov.w	r2, #804	; 0x324
 801b7b6:	4945      	ldr	r1, [pc, #276]	; (801b8cc <ip4_frag+0x1e8>)
 801b7b8:	4843      	ldr	r0, [pc, #268]	; (801b8c8 <ip4_frag+0x1e4>)
 801b7ba:	f000 f961 	bl	801ba80 <iprintf>
 801b7be:	e7d5      	b.n	801b76c <ip4_frag+0x88>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801b7c0:	4b3f      	ldr	r3, [pc, #252]	; (801b8c0 <ip4_frag+0x1dc>)
 801b7c2:	f240 322d 	movw	r2, #813	; 0x32d
 801b7c6:	4942      	ldr	r1, [pc, #264]	; (801b8d0 <ip4_frag+0x1ec>)
 801b7c8:	483f      	ldr	r0, [pc, #252]	; (801b8c8 <ip4_frag+0x1e4>)
 801b7ca:	f000 f959 	bl	801ba80 <iprintf>
 801b7ce:	e026      	b.n	801b81e <ip4_frag+0x13a>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b7d0:	f7ff fe2e 	bl	801b430 <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 801b7d4:	4680      	mov	r8, r0
 801b7d6:	b350      	cbz	r0, 801b82e <ip4_frag+0x14a>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
                                    (u8_t *)p->payload + poff, newpbuflen);
 801b7d8:	6873      	ldr	r3, [r6, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b7da:	9401      	str	r4, [sp, #4]
 801b7dc:	443b      	add	r3, r7
 801b7de:	9300      	str	r3, [sp, #0]
 801b7e0:	4603      	mov	r3, r0
 801b7e2:	2241      	movs	r2, #65	; 0x41
 801b7e4:	4621      	mov	r1, r4
 801b7e6:	2000      	movs	r0, #0
 801b7e8:	f7f8 f8ae 	bl	8013948 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 801b7ec:	4681      	mov	r9, r0
 801b7ee:	b330      	cbz	r0, 801b83e <ip4_frag+0x15a>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 801b7f0:	4630      	mov	r0, r6
 801b7f2:	f7f8 fa7d 	bl	8013cf0 <pbuf_ref>
      pcr->original = p;
 801b7f6:	f8c8 6014 	str.w	r6, [r8, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801b7fa:	4b36      	ldr	r3, [pc, #216]	; (801b8d4 <ip4_frag+0x1f0>)
 801b7fc:	f8c8 3010 	str.w	r3, [r8, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801b800:	4649      	mov	r1, r9
 801b802:	4650      	mov	r0, sl
 801b804:	f7f8 fa8c 	bl	8013d20 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801b808:	1b2d      	subs	r5, r5, r4
 801b80a:	b2ad      	uxth	r5, r5
      if (left_to_copy) {
 801b80c:	b10d      	cbz	r5, 801b812 <ip4_frag+0x12e>
        poff = 0;
        p = p->next;
 801b80e:	6836      	ldr	r6, [r6, #0]
        poff = 0;
 801b810:	2700      	movs	r7, #0
    while (left_to_copy) {
 801b812:	b1ed      	cbz	r5, 801b850 <ip4_frag+0x16c>
      u16_t plen = (u16_t)(p->len - poff);
 801b814:	8973      	ldrh	r3, [r6, #10]
 801b816:	1bdc      	subs	r4, r3, r7
 801b818:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801b81a:	42bb      	cmp	r3, r7
 801b81c:	d3d0      	bcc.n	801b7c0 <ip4_frag+0xdc>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b81e:	42ac      	cmp	r4, r5
 801b820:	bf28      	it	cs
 801b822:	462c      	movcs	r4, r5
      if (!newpbuflen) {
 801b824:	2c00      	cmp	r4, #0
 801b826:	d1d3      	bne.n	801b7d0 <ip4_frag+0xec>
        p = p->next;
 801b828:	6836      	ldr	r6, [r6, #0]
        poff = 0;
 801b82a:	4627      	mov	r7, r4
        continue;
 801b82c:	e7f1      	b.n	801b812 <ip4_frag+0x12e>
        pbuf_free(rambuf);
 801b82e:	4650      	mov	r0, sl
 801b830:	f7f8 f8f2 	bl	8013a18 <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801b834:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b838:	b00b      	add	sp, #44	; 0x2c
 801b83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 801b83e:	4640      	mov	r0, r8
 801b840:	f7ff fcec 	bl	801b21c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801b844:	4650      	mov	r0, sl
 801b846:	f7f8 f8e7 	bl	8013a18 <pbuf_free>
  return ERR_MEM;
 801b84a:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 801b84e:	e7f3      	b.n	801b838 <ip4_frag+0x154>
    poff = (u16_t)(poff + newpbuflen);
 801b850:	4427      	add	r7, r4
 801b852:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 801b854:	9b06      	ldr	r3, [sp, #24]
 801b856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b858:	3b13      	subs	r3, #19
    tmp = (IP_OFFMASK & (ofo));
 801b85a:	9a05      	ldr	r2, [sp, #20]
 801b85c:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 801b860:	9a02      	ldr	r2, [sp, #8]
 801b862:	4293      	cmp	r3, r2
 801b864:	dd01      	ble.n	801b86a <ip4_frag+0x186>
 801b866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b868:	b10b      	cbz	r3, 801b86e <ip4_frag+0x18a>
      tmp = tmp | IP_MF;
 801b86a:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801b86e:	f7f7 f87b 	bl	8012968 <lwip_htons>
 801b872:	9d07      	ldr	r5, [sp, #28]
 801b874:	80e8      	strh	r0, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801b876:	9b03      	ldr	r3, [sp, #12]
 801b878:	f103 0014 	add.w	r0, r3, #20
 801b87c:	b280      	uxth	r0, r0
 801b87e:	f7f7 f873 	bl	8012968 <lwip_htons>
 801b882:	8068      	strh	r0, [r5, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801b884:	2300      	movs	r3, #0
 801b886:	72ab      	strb	r3, [r5, #10]
 801b888:	72eb      	strb	r3, [r5, #11]
    netif->output(netif, rambuf, dest);
 801b88a:	9806      	ldr	r0, [sp, #24]
 801b88c:	6943      	ldr	r3, [r0, #20]
 801b88e:	9a08      	ldr	r2, [sp, #32]
 801b890:	4651      	mov	r1, sl
 801b892:	4798      	blx	r3
    pbuf_free(rambuf);
 801b894:	4650      	mov	r0, sl
 801b896:	f7f8 f8bf 	bl	8013a18 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801b89a:	9a02      	ldr	r2, [sp, #8]
 801b89c:	9b03      	ldr	r3, [sp, #12]
 801b89e:	1ad3      	subs	r3, r2, r3
 801b8a0:	b29b      	uxth	r3, r3
 801b8a2:	9302      	str	r3, [sp, #8]
    ofo = (u16_t)(ofo + nfb);
 801b8a4:	9b05      	ldr	r3, [sp, #20]
 801b8a6:	9a04      	ldr	r2, [sp, #16]
 801b8a8:	4413      	add	r3, r2
 801b8aa:	b29b      	uxth	r3, r3
 801b8ac:	9305      	str	r3, [sp, #20]
 801b8ae:	e744      	b.n	801b73a <ip4_frag+0x56>
  return ERR_OK;
 801b8b0:	2000      	movs	r0, #0
 801b8b2:	e7c1      	b.n	801b838 <ip4_frag+0x154>
    return ERR_VAL;
 801b8b4:	f06f 0005 	mvn.w	r0, #5
 801b8b8:	e7be      	b.n	801b838 <ip4_frag+0x154>
  return ERR_MEM;
 801b8ba:	f04f 30ff 	mov.w	r0, #4294967295
 801b8be:	e7bb      	b.n	801b838 <ip4_frag+0x154>
 801b8c0:	08020364 	.word	0x08020364
 801b8c4:	08020500 	.word	0x08020500
 801b8c8:	0801cca4 	.word	0x0801cca4
 801b8cc:	0802051c 	.word	0x0802051c
 801b8d0:	0802053c 	.word	0x0802053c
 801b8d4:	0801b249 	.word	0x0801b249

0801b8d8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801b8d8:	b570      	push	{r4, r5, r6, lr}
 801b8da:	4604      	mov	r4, r0
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801b8dc:	8943      	ldrh	r3, [r0, #10]
 801b8de:	2b0e      	cmp	r3, #14
 801b8e0:	d91c      	bls.n	801b91c <ethernet_input+0x44>
 801b8e2:	460d      	mov	r5, r1
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801b8e4:	7bc3      	ldrb	r3, [r0, #15]
 801b8e6:	b91b      	cbnz	r3, 801b8f0 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 801b8e8:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 801b8ec:	3301      	adds	r3, #1
 801b8ee:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801b8f0:	6860      	ldr	r0, [r4, #4]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801b8f2:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801b8f4:	7803      	ldrb	r3, [r0, #0]
 801b8f6:	f013 0f01 	tst.w	r3, #1
 801b8fa:	d00a      	beq.n	801b912 <ethernet_input+0x3a>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801b8fc:	2b01      	cmp	r3, #1
 801b8fe:	d012      	beq.n	801b926 <ethernet_input+0x4e>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801b900:	2206      	movs	r2, #6
 801b902:	491e      	ldr	r1, [pc, #120]	; (801b97c <ethernet_input+0xa4>)
 801b904:	f000 f898 	bl	801ba38 <memcmp>
 801b908:	b918      	cbnz	r0, 801b912 <ethernet_input+0x3a>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801b90a:	7b63      	ldrb	r3, [r4, #13]
 801b90c:	f043 0308 	orr.w	r3, r3, #8
 801b910:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 801b912:	2e08      	cmp	r6, #8
 801b914:	d012      	beq.n	801b93c <ethernet_input+0x64>
 801b916:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 801b91a:	d01f      	beq.n	801b95c <ethernet_input+0x84>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 801b91c:	4620      	mov	r0, r4
 801b91e:	f7f8 f87b 	bl	8013a18 <pbuf_free>
  return ERR_OK;
}
 801b922:	2000      	movs	r0, #0
 801b924:	bd70      	pop	{r4, r5, r6, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b926:	7843      	ldrb	r3, [r0, #1]
 801b928:	2b00      	cmp	r3, #0
 801b92a:	d1f2      	bne.n	801b912 <ethernet_input+0x3a>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801b92c:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b92e:	2b5e      	cmp	r3, #94	; 0x5e
 801b930:	d1ef      	bne.n	801b912 <ethernet_input+0x3a>
        p->flags |= PBUF_FLAG_LLMCAST;
 801b932:	7b63      	ldrb	r3, [r4, #13]
 801b934:	f043 0310 	orr.w	r3, r3, #16
 801b938:	7363      	strb	r3, [r4, #13]
 801b93a:	e7ea      	b.n	801b912 <ethernet_input+0x3a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b93c:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 801b940:	f013 0f08 	tst.w	r3, #8
 801b944:	d0ea      	beq.n	801b91c <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b946:	210e      	movs	r1, #14
 801b948:	4620      	mov	r0, r4
 801b94a:	f7f8 f81f 	bl	801398c <pbuf_remove_header>
 801b94e:	2800      	cmp	r0, #0
 801b950:	d1e4      	bne.n	801b91c <ethernet_input+0x44>
        ip4_input(p, netif);
 801b952:	4629      	mov	r1, r5
 801b954:	4620      	mov	r0, r4
 801b956:	f7ff f9f1 	bl	801ad3c <ip4_input>
      break;
 801b95a:	e7e2      	b.n	801b922 <ethernet_input+0x4a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b95c:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 801b960:	f013 0f08 	tst.w	r3, #8
 801b964:	d0da      	beq.n	801b91c <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b966:	210e      	movs	r1, #14
 801b968:	4620      	mov	r0, r4
 801b96a:	f7f8 f80f 	bl	801398c <pbuf_remove_header>
 801b96e:	2800      	cmp	r0, #0
 801b970:	d1d4      	bne.n	801b91c <ethernet_input+0x44>
        etharp_input(p, netif);
 801b972:	4629      	mov	r1, r5
 801b974:	4620      	mov	r0, r4
 801b976:	f7fe fde3 	bl	801a540 <etharp_input>
      break;
 801b97a:	e7d2      	b.n	801b922 <ethernet_input+0x4a>
 801b97c:	080205b8 	.word	0x080205b8

0801b980 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801b980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b984:	4605      	mov	r5, r0
 801b986:	460c      	mov	r4, r1
 801b988:	4616      	mov	r6, r2
 801b98a:	461f      	mov	r7, r3
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801b98c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 801b990:	f7f6 ffea 	bl	8012968 <lwip_htons>
 801b994:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801b996:	210e      	movs	r1, #14
 801b998:	4620      	mov	r0, r4
 801b99a:	f7f7 fff2 	bl	8013982 <pbuf_add_header>
 801b99e:	b9e8      	cbnz	r0, 801b9dc <ethernet_output+0x5c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801b9a0:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 801b9a2:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801b9a6:	683b      	ldr	r3, [r7, #0]
 801b9a8:	600b      	str	r3, [r1, #0]
 801b9aa:	88bb      	ldrh	r3, [r7, #4]
 801b9ac:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801b9ae:	6833      	ldr	r3, [r6, #0]
 801b9b0:	f8c1 3006 	str.w	r3, [r1, #6]
 801b9b4:	88b3      	ldrh	r3, [r6, #4]
 801b9b6:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801b9b8:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 801b9bc:	2b06      	cmp	r3, #6
 801b9be:	d105      	bne.n	801b9cc <ethernet_output+0x4c>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801b9c0:	69ab      	ldr	r3, [r5, #24]
 801b9c2:	4621      	mov	r1, r4
 801b9c4:	4628      	mov	r0, r5
 801b9c6:	4798      	blx	r3
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 801b9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801b9cc:	4b05      	ldr	r3, [pc, #20]	; (801b9e4 <ethernet_output+0x64>)
 801b9ce:	f44f 7299 	mov.w	r2, #306	; 0x132
 801b9d2:	4905      	ldr	r1, [pc, #20]	; (801b9e8 <ethernet_output+0x68>)
 801b9d4:	4805      	ldr	r0, [pc, #20]	; (801b9ec <ethernet_output+0x6c>)
 801b9d6:	f000 f853 	bl	801ba80 <iprintf>
 801b9da:	e7f1      	b.n	801b9c0 <ethernet_output+0x40>
  return ERR_BUF;
 801b9dc:	f06f 0001 	mvn.w	r0, #1
 801b9e0:	e7f2      	b.n	801b9c8 <ethernet_output+0x48>
 801b9e2:	bf00      	nop
 801b9e4:	0802054c 	.word	0x0802054c
 801b9e8:	08020584 	.word	0x08020584
 801b9ec:	0801cca4 	.word	0x0801cca4

0801b9f0 <__libc_init_array>:
 801b9f0:	b570      	push	{r4, r5, r6, lr}
 801b9f2:	4d0d      	ldr	r5, [pc, #52]	; (801ba28 <__libc_init_array+0x38>)
 801b9f4:	4c0d      	ldr	r4, [pc, #52]	; (801ba2c <__libc_init_array+0x3c>)
 801b9f6:	1b64      	subs	r4, r4, r5
 801b9f8:	10a4      	asrs	r4, r4, #2
 801b9fa:	2600      	movs	r6, #0
 801b9fc:	42a6      	cmp	r6, r4
 801b9fe:	d109      	bne.n	801ba14 <__libc_init_array+0x24>
 801ba00:	4d0b      	ldr	r5, [pc, #44]	; (801ba30 <__libc_init_array+0x40>)
 801ba02:	4c0c      	ldr	r4, [pc, #48]	; (801ba34 <__libc_init_array+0x44>)
 801ba04:	f001 f8ec 	bl	801cbe0 <_init>
 801ba08:	1b64      	subs	r4, r4, r5
 801ba0a:	10a4      	asrs	r4, r4, #2
 801ba0c:	2600      	movs	r6, #0
 801ba0e:	42a6      	cmp	r6, r4
 801ba10:	d105      	bne.n	801ba1e <__libc_init_array+0x2e>
 801ba12:	bd70      	pop	{r4, r5, r6, pc}
 801ba14:	f855 3b04 	ldr.w	r3, [r5], #4
 801ba18:	4798      	blx	r3
 801ba1a:	3601      	adds	r6, #1
 801ba1c:	e7ee      	b.n	801b9fc <__libc_init_array+0xc>
 801ba1e:	f855 3b04 	ldr.w	r3, [r5], #4
 801ba22:	4798      	blx	r3
 801ba24:	3601      	adds	r6, #1
 801ba26:	e7f2      	b.n	801ba0e <__libc_init_array+0x1e>
 801ba28:	0802071c 	.word	0x0802071c
 801ba2c:	0802071c 	.word	0x0802071c
 801ba30:	0802071c 	.word	0x0802071c
 801ba34:	08020720 	.word	0x08020720

0801ba38 <memcmp>:
 801ba38:	b530      	push	{r4, r5, lr}
 801ba3a:	3901      	subs	r1, #1
 801ba3c:	2400      	movs	r4, #0
 801ba3e:	42a2      	cmp	r2, r4
 801ba40:	d101      	bne.n	801ba46 <memcmp+0xe>
 801ba42:	2000      	movs	r0, #0
 801ba44:	e005      	b.n	801ba52 <memcmp+0x1a>
 801ba46:	5d03      	ldrb	r3, [r0, r4]
 801ba48:	3401      	adds	r4, #1
 801ba4a:	5d0d      	ldrb	r5, [r1, r4]
 801ba4c:	42ab      	cmp	r3, r5
 801ba4e:	d0f6      	beq.n	801ba3e <memcmp+0x6>
 801ba50:	1b58      	subs	r0, r3, r5
 801ba52:	bd30      	pop	{r4, r5, pc}

0801ba54 <memcpy>:
 801ba54:	440a      	add	r2, r1
 801ba56:	4291      	cmp	r1, r2
 801ba58:	f100 33ff 	add.w	r3, r0, #4294967295
 801ba5c:	d100      	bne.n	801ba60 <memcpy+0xc>
 801ba5e:	4770      	bx	lr
 801ba60:	b510      	push	{r4, lr}
 801ba62:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ba66:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ba6a:	4291      	cmp	r1, r2
 801ba6c:	d1f9      	bne.n	801ba62 <memcpy+0xe>
 801ba6e:	bd10      	pop	{r4, pc}

0801ba70 <memset>:
 801ba70:	4402      	add	r2, r0
 801ba72:	4603      	mov	r3, r0
 801ba74:	4293      	cmp	r3, r2
 801ba76:	d100      	bne.n	801ba7a <memset+0xa>
 801ba78:	4770      	bx	lr
 801ba7a:	f803 1b01 	strb.w	r1, [r3], #1
 801ba7e:	e7f9      	b.n	801ba74 <memset+0x4>

0801ba80 <iprintf>:
 801ba80:	b40f      	push	{r0, r1, r2, r3}
 801ba82:	4b0a      	ldr	r3, [pc, #40]	; (801baac <iprintf+0x2c>)
 801ba84:	b513      	push	{r0, r1, r4, lr}
 801ba86:	681c      	ldr	r4, [r3, #0]
 801ba88:	b124      	cbz	r4, 801ba94 <iprintf+0x14>
 801ba8a:	69a3      	ldr	r3, [r4, #24]
 801ba8c:	b913      	cbnz	r3, 801ba94 <iprintf+0x14>
 801ba8e:	4620      	mov	r0, r4
 801ba90:	f000 fadc 	bl	801c04c <__sinit>
 801ba94:	ab05      	add	r3, sp, #20
 801ba96:	9a04      	ldr	r2, [sp, #16]
 801ba98:	68a1      	ldr	r1, [r4, #8]
 801ba9a:	9301      	str	r3, [sp, #4]
 801ba9c:	4620      	mov	r0, r4
 801ba9e:	f000 fcc7 	bl	801c430 <_vfiprintf_r>
 801baa2:	b002      	add	sp, #8
 801baa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801baa8:	b004      	add	sp, #16
 801baaa:	4770      	bx	lr
 801baac:	20000014 	.word	0x20000014

0801bab0 <_puts_r>:
 801bab0:	b570      	push	{r4, r5, r6, lr}
 801bab2:	460e      	mov	r6, r1
 801bab4:	4605      	mov	r5, r0
 801bab6:	b118      	cbz	r0, 801bac0 <_puts_r+0x10>
 801bab8:	6983      	ldr	r3, [r0, #24]
 801baba:	b90b      	cbnz	r3, 801bac0 <_puts_r+0x10>
 801babc:	f000 fac6 	bl	801c04c <__sinit>
 801bac0:	69ab      	ldr	r3, [r5, #24]
 801bac2:	68ac      	ldr	r4, [r5, #8]
 801bac4:	b913      	cbnz	r3, 801bacc <_puts_r+0x1c>
 801bac6:	4628      	mov	r0, r5
 801bac8:	f000 fac0 	bl	801c04c <__sinit>
 801bacc:	4b2c      	ldr	r3, [pc, #176]	; (801bb80 <_puts_r+0xd0>)
 801bace:	429c      	cmp	r4, r3
 801bad0:	d120      	bne.n	801bb14 <_puts_r+0x64>
 801bad2:	686c      	ldr	r4, [r5, #4]
 801bad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bad6:	07db      	lsls	r3, r3, #31
 801bad8:	d405      	bmi.n	801bae6 <_puts_r+0x36>
 801bada:	89a3      	ldrh	r3, [r4, #12]
 801badc:	0598      	lsls	r0, r3, #22
 801bade:	d402      	bmi.n	801bae6 <_puts_r+0x36>
 801bae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bae2:	f000 fb63 	bl	801c1ac <__retarget_lock_acquire_recursive>
 801bae6:	89a3      	ldrh	r3, [r4, #12]
 801bae8:	0719      	lsls	r1, r3, #28
 801baea:	d51d      	bpl.n	801bb28 <_puts_r+0x78>
 801baec:	6923      	ldr	r3, [r4, #16]
 801baee:	b1db      	cbz	r3, 801bb28 <_puts_r+0x78>
 801baf0:	3e01      	subs	r6, #1
 801baf2:	68a3      	ldr	r3, [r4, #8]
 801baf4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801baf8:	3b01      	subs	r3, #1
 801bafa:	60a3      	str	r3, [r4, #8]
 801bafc:	bb39      	cbnz	r1, 801bb4e <_puts_r+0x9e>
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	da38      	bge.n	801bb74 <_puts_r+0xc4>
 801bb02:	4622      	mov	r2, r4
 801bb04:	210a      	movs	r1, #10
 801bb06:	4628      	mov	r0, r5
 801bb08:	f000 f8a8 	bl	801bc5c <__swbuf_r>
 801bb0c:	3001      	adds	r0, #1
 801bb0e:	d011      	beq.n	801bb34 <_puts_r+0x84>
 801bb10:	250a      	movs	r5, #10
 801bb12:	e011      	b.n	801bb38 <_puts_r+0x88>
 801bb14:	4b1b      	ldr	r3, [pc, #108]	; (801bb84 <_puts_r+0xd4>)
 801bb16:	429c      	cmp	r4, r3
 801bb18:	d101      	bne.n	801bb1e <_puts_r+0x6e>
 801bb1a:	68ac      	ldr	r4, [r5, #8]
 801bb1c:	e7da      	b.n	801bad4 <_puts_r+0x24>
 801bb1e:	4b1a      	ldr	r3, [pc, #104]	; (801bb88 <_puts_r+0xd8>)
 801bb20:	429c      	cmp	r4, r3
 801bb22:	bf08      	it	eq
 801bb24:	68ec      	ldreq	r4, [r5, #12]
 801bb26:	e7d5      	b.n	801bad4 <_puts_r+0x24>
 801bb28:	4621      	mov	r1, r4
 801bb2a:	4628      	mov	r0, r5
 801bb2c:	f000 f8e8 	bl	801bd00 <__swsetup_r>
 801bb30:	2800      	cmp	r0, #0
 801bb32:	d0dd      	beq.n	801baf0 <_puts_r+0x40>
 801bb34:	f04f 35ff 	mov.w	r5, #4294967295
 801bb38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bb3a:	07da      	lsls	r2, r3, #31
 801bb3c:	d405      	bmi.n	801bb4a <_puts_r+0x9a>
 801bb3e:	89a3      	ldrh	r3, [r4, #12]
 801bb40:	059b      	lsls	r3, r3, #22
 801bb42:	d402      	bmi.n	801bb4a <_puts_r+0x9a>
 801bb44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bb46:	f000 fb32 	bl	801c1ae <__retarget_lock_release_recursive>
 801bb4a:	4628      	mov	r0, r5
 801bb4c:	bd70      	pop	{r4, r5, r6, pc}
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	da04      	bge.n	801bb5c <_puts_r+0xac>
 801bb52:	69a2      	ldr	r2, [r4, #24]
 801bb54:	429a      	cmp	r2, r3
 801bb56:	dc06      	bgt.n	801bb66 <_puts_r+0xb6>
 801bb58:	290a      	cmp	r1, #10
 801bb5a:	d004      	beq.n	801bb66 <_puts_r+0xb6>
 801bb5c:	6823      	ldr	r3, [r4, #0]
 801bb5e:	1c5a      	adds	r2, r3, #1
 801bb60:	6022      	str	r2, [r4, #0]
 801bb62:	7019      	strb	r1, [r3, #0]
 801bb64:	e7c5      	b.n	801baf2 <_puts_r+0x42>
 801bb66:	4622      	mov	r2, r4
 801bb68:	4628      	mov	r0, r5
 801bb6a:	f000 f877 	bl	801bc5c <__swbuf_r>
 801bb6e:	3001      	adds	r0, #1
 801bb70:	d1bf      	bne.n	801baf2 <_puts_r+0x42>
 801bb72:	e7df      	b.n	801bb34 <_puts_r+0x84>
 801bb74:	6823      	ldr	r3, [r4, #0]
 801bb76:	250a      	movs	r5, #10
 801bb78:	1c5a      	adds	r2, r3, #1
 801bb7a:	6022      	str	r2, [r4, #0]
 801bb7c:	701d      	strb	r5, [r3, #0]
 801bb7e:	e7db      	b.n	801bb38 <_puts_r+0x88>
 801bb80:	080206a0 	.word	0x080206a0
 801bb84:	080206c0 	.word	0x080206c0
 801bb88:	08020680 	.word	0x08020680

0801bb8c <puts>:
 801bb8c:	4b02      	ldr	r3, [pc, #8]	; (801bb98 <puts+0xc>)
 801bb8e:	4601      	mov	r1, r0
 801bb90:	6818      	ldr	r0, [r3, #0]
 801bb92:	f7ff bf8d 	b.w	801bab0 <_puts_r>
 801bb96:	bf00      	nop
 801bb98:	20000014 	.word	0x20000014

0801bb9c <rand>:
 801bb9c:	4b17      	ldr	r3, [pc, #92]	; (801bbfc <rand+0x60>)
 801bb9e:	b510      	push	{r4, lr}
 801bba0:	681c      	ldr	r4, [r3, #0]
 801bba2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bba4:	b9b3      	cbnz	r3, 801bbd4 <rand+0x38>
 801bba6:	2018      	movs	r0, #24
 801bba8:	f000 fb66 	bl	801c278 <malloc>
 801bbac:	63a0      	str	r0, [r4, #56]	; 0x38
 801bbae:	b928      	cbnz	r0, 801bbbc <rand+0x20>
 801bbb0:	4602      	mov	r2, r0
 801bbb2:	4b13      	ldr	r3, [pc, #76]	; (801bc00 <rand+0x64>)
 801bbb4:	4813      	ldr	r0, [pc, #76]	; (801bc04 <rand+0x68>)
 801bbb6:	214e      	movs	r1, #78	; 0x4e
 801bbb8:	f000 f910 	bl	801bddc <__assert_func>
 801bbbc:	4a12      	ldr	r2, [pc, #72]	; (801bc08 <rand+0x6c>)
 801bbbe:	4b13      	ldr	r3, [pc, #76]	; (801bc0c <rand+0x70>)
 801bbc0:	e9c0 2300 	strd	r2, r3, [r0]
 801bbc4:	4b12      	ldr	r3, [pc, #72]	; (801bc10 <rand+0x74>)
 801bbc6:	6083      	str	r3, [r0, #8]
 801bbc8:	230b      	movs	r3, #11
 801bbca:	8183      	strh	r3, [r0, #12]
 801bbcc:	2201      	movs	r2, #1
 801bbce:	2300      	movs	r3, #0
 801bbd0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801bbd4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801bbd6:	480f      	ldr	r0, [pc, #60]	; (801bc14 <rand+0x78>)
 801bbd8:	690a      	ldr	r2, [r1, #16]
 801bbda:	694b      	ldr	r3, [r1, #20]
 801bbdc:	4c0e      	ldr	r4, [pc, #56]	; (801bc18 <rand+0x7c>)
 801bbde:	4350      	muls	r0, r2
 801bbe0:	fb04 0003 	mla	r0, r4, r3, r0
 801bbe4:	fba2 3404 	umull	r3, r4, r2, r4
 801bbe8:	1c5a      	adds	r2, r3, #1
 801bbea:	4404      	add	r4, r0
 801bbec:	f144 0000 	adc.w	r0, r4, #0
 801bbf0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801bbf4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801bbf8:	bd10      	pop	{r4, pc}
 801bbfa:	bf00      	nop
 801bbfc:	20000014 	.word	0x20000014
 801bc00:	080205cc 	.word	0x080205cc
 801bc04:	080205e3 	.word	0x080205e3
 801bc08:	abcd330e 	.word	0xabcd330e
 801bc0c:	e66d1234 	.word	0xe66d1234
 801bc10:	0005deec 	.word	0x0005deec
 801bc14:	5851f42d 	.word	0x5851f42d
 801bc18:	4c957f2d 	.word	0x4c957f2d

0801bc1c <strchr>:
 801bc1c:	b2c9      	uxtb	r1, r1
 801bc1e:	4603      	mov	r3, r0
 801bc20:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bc24:	b11a      	cbz	r2, 801bc2e <strchr+0x12>
 801bc26:	428a      	cmp	r2, r1
 801bc28:	d1f9      	bne.n	801bc1e <strchr+0x2>
 801bc2a:	4618      	mov	r0, r3
 801bc2c:	4770      	bx	lr
 801bc2e:	2900      	cmp	r1, #0
 801bc30:	bf18      	it	ne
 801bc32:	2300      	movne	r3, #0
 801bc34:	e7f9      	b.n	801bc2a <strchr+0xe>

0801bc36 <strncmp>:
 801bc36:	b510      	push	{r4, lr}
 801bc38:	b16a      	cbz	r2, 801bc56 <strncmp+0x20>
 801bc3a:	3901      	subs	r1, #1
 801bc3c:	1884      	adds	r4, r0, r2
 801bc3e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801bc42:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801bc46:	4293      	cmp	r3, r2
 801bc48:	d103      	bne.n	801bc52 <strncmp+0x1c>
 801bc4a:	42a0      	cmp	r0, r4
 801bc4c:	d001      	beq.n	801bc52 <strncmp+0x1c>
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d1f5      	bne.n	801bc3e <strncmp+0x8>
 801bc52:	1a98      	subs	r0, r3, r2
 801bc54:	bd10      	pop	{r4, pc}
 801bc56:	4610      	mov	r0, r2
 801bc58:	e7fc      	b.n	801bc54 <strncmp+0x1e>
	...

0801bc5c <__swbuf_r>:
 801bc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc5e:	460e      	mov	r6, r1
 801bc60:	4614      	mov	r4, r2
 801bc62:	4605      	mov	r5, r0
 801bc64:	b118      	cbz	r0, 801bc6e <__swbuf_r+0x12>
 801bc66:	6983      	ldr	r3, [r0, #24]
 801bc68:	b90b      	cbnz	r3, 801bc6e <__swbuf_r+0x12>
 801bc6a:	f000 f9ef 	bl	801c04c <__sinit>
 801bc6e:	4b21      	ldr	r3, [pc, #132]	; (801bcf4 <__swbuf_r+0x98>)
 801bc70:	429c      	cmp	r4, r3
 801bc72:	d12b      	bne.n	801bccc <__swbuf_r+0x70>
 801bc74:	686c      	ldr	r4, [r5, #4]
 801bc76:	69a3      	ldr	r3, [r4, #24]
 801bc78:	60a3      	str	r3, [r4, #8]
 801bc7a:	89a3      	ldrh	r3, [r4, #12]
 801bc7c:	071a      	lsls	r2, r3, #28
 801bc7e:	d52f      	bpl.n	801bce0 <__swbuf_r+0x84>
 801bc80:	6923      	ldr	r3, [r4, #16]
 801bc82:	b36b      	cbz	r3, 801bce0 <__swbuf_r+0x84>
 801bc84:	6923      	ldr	r3, [r4, #16]
 801bc86:	6820      	ldr	r0, [r4, #0]
 801bc88:	1ac0      	subs	r0, r0, r3
 801bc8a:	6963      	ldr	r3, [r4, #20]
 801bc8c:	b2f6      	uxtb	r6, r6
 801bc8e:	4283      	cmp	r3, r0
 801bc90:	4637      	mov	r7, r6
 801bc92:	dc04      	bgt.n	801bc9e <__swbuf_r+0x42>
 801bc94:	4621      	mov	r1, r4
 801bc96:	4628      	mov	r0, r5
 801bc98:	f000 f944 	bl	801bf24 <_fflush_r>
 801bc9c:	bb30      	cbnz	r0, 801bcec <__swbuf_r+0x90>
 801bc9e:	68a3      	ldr	r3, [r4, #8]
 801bca0:	3b01      	subs	r3, #1
 801bca2:	60a3      	str	r3, [r4, #8]
 801bca4:	6823      	ldr	r3, [r4, #0]
 801bca6:	1c5a      	adds	r2, r3, #1
 801bca8:	6022      	str	r2, [r4, #0]
 801bcaa:	701e      	strb	r6, [r3, #0]
 801bcac:	6963      	ldr	r3, [r4, #20]
 801bcae:	3001      	adds	r0, #1
 801bcb0:	4283      	cmp	r3, r0
 801bcb2:	d004      	beq.n	801bcbe <__swbuf_r+0x62>
 801bcb4:	89a3      	ldrh	r3, [r4, #12]
 801bcb6:	07db      	lsls	r3, r3, #31
 801bcb8:	d506      	bpl.n	801bcc8 <__swbuf_r+0x6c>
 801bcba:	2e0a      	cmp	r6, #10
 801bcbc:	d104      	bne.n	801bcc8 <__swbuf_r+0x6c>
 801bcbe:	4621      	mov	r1, r4
 801bcc0:	4628      	mov	r0, r5
 801bcc2:	f000 f92f 	bl	801bf24 <_fflush_r>
 801bcc6:	b988      	cbnz	r0, 801bcec <__swbuf_r+0x90>
 801bcc8:	4638      	mov	r0, r7
 801bcca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bccc:	4b0a      	ldr	r3, [pc, #40]	; (801bcf8 <__swbuf_r+0x9c>)
 801bcce:	429c      	cmp	r4, r3
 801bcd0:	d101      	bne.n	801bcd6 <__swbuf_r+0x7a>
 801bcd2:	68ac      	ldr	r4, [r5, #8]
 801bcd4:	e7cf      	b.n	801bc76 <__swbuf_r+0x1a>
 801bcd6:	4b09      	ldr	r3, [pc, #36]	; (801bcfc <__swbuf_r+0xa0>)
 801bcd8:	429c      	cmp	r4, r3
 801bcda:	bf08      	it	eq
 801bcdc:	68ec      	ldreq	r4, [r5, #12]
 801bcde:	e7ca      	b.n	801bc76 <__swbuf_r+0x1a>
 801bce0:	4621      	mov	r1, r4
 801bce2:	4628      	mov	r0, r5
 801bce4:	f000 f80c 	bl	801bd00 <__swsetup_r>
 801bce8:	2800      	cmp	r0, #0
 801bcea:	d0cb      	beq.n	801bc84 <__swbuf_r+0x28>
 801bcec:	f04f 37ff 	mov.w	r7, #4294967295
 801bcf0:	e7ea      	b.n	801bcc8 <__swbuf_r+0x6c>
 801bcf2:	bf00      	nop
 801bcf4:	080206a0 	.word	0x080206a0
 801bcf8:	080206c0 	.word	0x080206c0
 801bcfc:	08020680 	.word	0x08020680

0801bd00 <__swsetup_r>:
 801bd00:	4b32      	ldr	r3, [pc, #200]	; (801bdcc <__swsetup_r+0xcc>)
 801bd02:	b570      	push	{r4, r5, r6, lr}
 801bd04:	681d      	ldr	r5, [r3, #0]
 801bd06:	4606      	mov	r6, r0
 801bd08:	460c      	mov	r4, r1
 801bd0a:	b125      	cbz	r5, 801bd16 <__swsetup_r+0x16>
 801bd0c:	69ab      	ldr	r3, [r5, #24]
 801bd0e:	b913      	cbnz	r3, 801bd16 <__swsetup_r+0x16>
 801bd10:	4628      	mov	r0, r5
 801bd12:	f000 f99b 	bl	801c04c <__sinit>
 801bd16:	4b2e      	ldr	r3, [pc, #184]	; (801bdd0 <__swsetup_r+0xd0>)
 801bd18:	429c      	cmp	r4, r3
 801bd1a:	d10f      	bne.n	801bd3c <__swsetup_r+0x3c>
 801bd1c:	686c      	ldr	r4, [r5, #4]
 801bd1e:	89a3      	ldrh	r3, [r4, #12]
 801bd20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bd24:	0719      	lsls	r1, r3, #28
 801bd26:	d42c      	bmi.n	801bd82 <__swsetup_r+0x82>
 801bd28:	06dd      	lsls	r5, r3, #27
 801bd2a:	d411      	bmi.n	801bd50 <__swsetup_r+0x50>
 801bd2c:	2309      	movs	r3, #9
 801bd2e:	6033      	str	r3, [r6, #0]
 801bd30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bd34:	81a3      	strh	r3, [r4, #12]
 801bd36:	f04f 30ff 	mov.w	r0, #4294967295
 801bd3a:	e03e      	b.n	801bdba <__swsetup_r+0xba>
 801bd3c:	4b25      	ldr	r3, [pc, #148]	; (801bdd4 <__swsetup_r+0xd4>)
 801bd3e:	429c      	cmp	r4, r3
 801bd40:	d101      	bne.n	801bd46 <__swsetup_r+0x46>
 801bd42:	68ac      	ldr	r4, [r5, #8]
 801bd44:	e7eb      	b.n	801bd1e <__swsetup_r+0x1e>
 801bd46:	4b24      	ldr	r3, [pc, #144]	; (801bdd8 <__swsetup_r+0xd8>)
 801bd48:	429c      	cmp	r4, r3
 801bd4a:	bf08      	it	eq
 801bd4c:	68ec      	ldreq	r4, [r5, #12]
 801bd4e:	e7e6      	b.n	801bd1e <__swsetup_r+0x1e>
 801bd50:	0758      	lsls	r0, r3, #29
 801bd52:	d512      	bpl.n	801bd7a <__swsetup_r+0x7a>
 801bd54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bd56:	b141      	cbz	r1, 801bd6a <__swsetup_r+0x6a>
 801bd58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bd5c:	4299      	cmp	r1, r3
 801bd5e:	d002      	beq.n	801bd66 <__swsetup_r+0x66>
 801bd60:	4630      	mov	r0, r6
 801bd62:	f000 fa91 	bl	801c288 <_free_r>
 801bd66:	2300      	movs	r3, #0
 801bd68:	6363      	str	r3, [r4, #52]	; 0x34
 801bd6a:	89a3      	ldrh	r3, [r4, #12]
 801bd6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bd70:	81a3      	strh	r3, [r4, #12]
 801bd72:	2300      	movs	r3, #0
 801bd74:	6063      	str	r3, [r4, #4]
 801bd76:	6923      	ldr	r3, [r4, #16]
 801bd78:	6023      	str	r3, [r4, #0]
 801bd7a:	89a3      	ldrh	r3, [r4, #12]
 801bd7c:	f043 0308 	orr.w	r3, r3, #8
 801bd80:	81a3      	strh	r3, [r4, #12]
 801bd82:	6923      	ldr	r3, [r4, #16]
 801bd84:	b94b      	cbnz	r3, 801bd9a <__swsetup_r+0x9a>
 801bd86:	89a3      	ldrh	r3, [r4, #12]
 801bd88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bd8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bd90:	d003      	beq.n	801bd9a <__swsetup_r+0x9a>
 801bd92:	4621      	mov	r1, r4
 801bd94:	4630      	mov	r0, r6
 801bd96:	f000 fa2f 	bl	801c1f8 <__smakebuf_r>
 801bd9a:	89a0      	ldrh	r0, [r4, #12]
 801bd9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bda0:	f010 0301 	ands.w	r3, r0, #1
 801bda4:	d00a      	beq.n	801bdbc <__swsetup_r+0xbc>
 801bda6:	2300      	movs	r3, #0
 801bda8:	60a3      	str	r3, [r4, #8]
 801bdaa:	6963      	ldr	r3, [r4, #20]
 801bdac:	425b      	negs	r3, r3
 801bdae:	61a3      	str	r3, [r4, #24]
 801bdb0:	6923      	ldr	r3, [r4, #16]
 801bdb2:	b943      	cbnz	r3, 801bdc6 <__swsetup_r+0xc6>
 801bdb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bdb8:	d1ba      	bne.n	801bd30 <__swsetup_r+0x30>
 801bdba:	bd70      	pop	{r4, r5, r6, pc}
 801bdbc:	0781      	lsls	r1, r0, #30
 801bdbe:	bf58      	it	pl
 801bdc0:	6963      	ldrpl	r3, [r4, #20]
 801bdc2:	60a3      	str	r3, [r4, #8]
 801bdc4:	e7f4      	b.n	801bdb0 <__swsetup_r+0xb0>
 801bdc6:	2000      	movs	r0, #0
 801bdc8:	e7f7      	b.n	801bdba <__swsetup_r+0xba>
 801bdca:	bf00      	nop
 801bdcc:	20000014 	.word	0x20000014
 801bdd0:	080206a0 	.word	0x080206a0
 801bdd4:	080206c0 	.word	0x080206c0
 801bdd8:	08020680 	.word	0x08020680

0801bddc <__assert_func>:
 801bddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bdde:	4614      	mov	r4, r2
 801bde0:	461a      	mov	r2, r3
 801bde2:	4b09      	ldr	r3, [pc, #36]	; (801be08 <__assert_func+0x2c>)
 801bde4:	681b      	ldr	r3, [r3, #0]
 801bde6:	4605      	mov	r5, r0
 801bde8:	68d8      	ldr	r0, [r3, #12]
 801bdea:	b14c      	cbz	r4, 801be00 <__assert_func+0x24>
 801bdec:	4b07      	ldr	r3, [pc, #28]	; (801be0c <__assert_func+0x30>)
 801bdee:	9100      	str	r1, [sp, #0]
 801bdf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bdf4:	4906      	ldr	r1, [pc, #24]	; (801be10 <__assert_func+0x34>)
 801bdf6:	462b      	mov	r3, r5
 801bdf8:	f000 f9a6 	bl	801c148 <fiprintf>
 801bdfc:	f000 fe42 	bl	801ca84 <abort>
 801be00:	4b04      	ldr	r3, [pc, #16]	; (801be14 <__assert_func+0x38>)
 801be02:	461c      	mov	r4, r3
 801be04:	e7f3      	b.n	801bdee <__assert_func+0x12>
 801be06:	bf00      	nop
 801be08:	20000014 	.word	0x20000014
 801be0c:	08020642 	.word	0x08020642
 801be10:	0802064f 	.word	0x0802064f
 801be14:	0802067d 	.word	0x0802067d

0801be18 <__sflush_r>:
 801be18:	898a      	ldrh	r2, [r1, #12]
 801be1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be1e:	4605      	mov	r5, r0
 801be20:	0710      	lsls	r0, r2, #28
 801be22:	460c      	mov	r4, r1
 801be24:	d458      	bmi.n	801bed8 <__sflush_r+0xc0>
 801be26:	684b      	ldr	r3, [r1, #4]
 801be28:	2b00      	cmp	r3, #0
 801be2a:	dc05      	bgt.n	801be38 <__sflush_r+0x20>
 801be2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801be2e:	2b00      	cmp	r3, #0
 801be30:	dc02      	bgt.n	801be38 <__sflush_r+0x20>
 801be32:	2000      	movs	r0, #0
 801be34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801be3a:	2e00      	cmp	r6, #0
 801be3c:	d0f9      	beq.n	801be32 <__sflush_r+0x1a>
 801be3e:	2300      	movs	r3, #0
 801be40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801be44:	682f      	ldr	r7, [r5, #0]
 801be46:	602b      	str	r3, [r5, #0]
 801be48:	d032      	beq.n	801beb0 <__sflush_r+0x98>
 801be4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801be4c:	89a3      	ldrh	r3, [r4, #12]
 801be4e:	075a      	lsls	r2, r3, #29
 801be50:	d505      	bpl.n	801be5e <__sflush_r+0x46>
 801be52:	6863      	ldr	r3, [r4, #4]
 801be54:	1ac0      	subs	r0, r0, r3
 801be56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801be58:	b10b      	cbz	r3, 801be5e <__sflush_r+0x46>
 801be5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801be5c:	1ac0      	subs	r0, r0, r3
 801be5e:	2300      	movs	r3, #0
 801be60:	4602      	mov	r2, r0
 801be62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801be64:	6a21      	ldr	r1, [r4, #32]
 801be66:	4628      	mov	r0, r5
 801be68:	47b0      	blx	r6
 801be6a:	1c43      	adds	r3, r0, #1
 801be6c:	89a3      	ldrh	r3, [r4, #12]
 801be6e:	d106      	bne.n	801be7e <__sflush_r+0x66>
 801be70:	6829      	ldr	r1, [r5, #0]
 801be72:	291d      	cmp	r1, #29
 801be74:	d82c      	bhi.n	801bed0 <__sflush_r+0xb8>
 801be76:	4a2a      	ldr	r2, [pc, #168]	; (801bf20 <__sflush_r+0x108>)
 801be78:	40ca      	lsrs	r2, r1
 801be7a:	07d6      	lsls	r6, r2, #31
 801be7c:	d528      	bpl.n	801bed0 <__sflush_r+0xb8>
 801be7e:	2200      	movs	r2, #0
 801be80:	6062      	str	r2, [r4, #4]
 801be82:	04d9      	lsls	r1, r3, #19
 801be84:	6922      	ldr	r2, [r4, #16]
 801be86:	6022      	str	r2, [r4, #0]
 801be88:	d504      	bpl.n	801be94 <__sflush_r+0x7c>
 801be8a:	1c42      	adds	r2, r0, #1
 801be8c:	d101      	bne.n	801be92 <__sflush_r+0x7a>
 801be8e:	682b      	ldr	r3, [r5, #0]
 801be90:	b903      	cbnz	r3, 801be94 <__sflush_r+0x7c>
 801be92:	6560      	str	r0, [r4, #84]	; 0x54
 801be94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801be96:	602f      	str	r7, [r5, #0]
 801be98:	2900      	cmp	r1, #0
 801be9a:	d0ca      	beq.n	801be32 <__sflush_r+0x1a>
 801be9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bea0:	4299      	cmp	r1, r3
 801bea2:	d002      	beq.n	801beaa <__sflush_r+0x92>
 801bea4:	4628      	mov	r0, r5
 801bea6:	f000 f9ef 	bl	801c288 <_free_r>
 801beaa:	2000      	movs	r0, #0
 801beac:	6360      	str	r0, [r4, #52]	; 0x34
 801beae:	e7c1      	b.n	801be34 <__sflush_r+0x1c>
 801beb0:	6a21      	ldr	r1, [r4, #32]
 801beb2:	2301      	movs	r3, #1
 801beb4:	4628      	mov	r0, r5
 801beb6:	47b0      	blx	r6
 801beb8:	1c41      	adds	r1, r0, #1
 801beba:	d1c7      	bne.n	801be4c <__sflush_r+0x34>
 801bebc:	682b      	ldr	r3, [r5, #0]
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	d0c4      	beq.n	801be4c <__sflush_r+0x34>
 801bec2:	2b1d      	cmp	r3, #29
 801bec4:	d001      	beq.n	801beca <__sflush_r+0xb2>
 801bec6:	2b16      	cmp	r3, #22
 801bec8:	d101      	bne.n	801bece <__sflush_r+0xb6>
 801beca:	602f      	str	r7, [r5, #0]
 801becc:	e7b1      	b.n	801be32 <__sflush_r+0x1a>
 801bece:	89a3      	ldrh	r3, [r4, #12]
 801bed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bed4:	81a3      	strh	r3, [r4, #12]
 801bed6:	e7ad      	b.n	801be34 <__sflush_r+0x1c>
 801bed8:	690f      	ldr	r7, [r1, #16]
 801beda:	2f00      	cmp	r7, #0
 801bedc:	d0a9      	beq.n	801be32 <__sflush_r+0x1a>
 801bede:	0793      	lsls	r3, r2, #30
 801bee0:	680e      	ldr	r6, [r1, #0]
 801bee2:	bf08      	it	eq
 801bee4:	694b      	ldreq	r3, [r1, #20]
 801bee6:	600f      	str	r7, [r1, #0]
 801bee8:	bf18      	it	ne
 801beea:	2300      	movne	r3, #0
 801beec:	eba6 0807 	sub.w	r8, r6, r7
 801bef0:	608b      	str	r3, [r1, #8]
 801bef2:	f1b8 0f00 	cmp.w	r8, #0
 801bef6:	dd9c      	ble.n	801be32 <__sflush_r+0x1a>
 801bef8:	6a21      	ldr	r1, [r4, #32]
 801befa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801befc:	4643      	mov	r3, r8
 801befe:	463a      	mov	r2, r7
 801bf00:	4628      	mov	r0, r5
 801bf02:	47b0      	blx	r6
 801bf04:	2800      	cmp	r0, #0
 801bf06:	dc06      	bgt.n	801bf16 <__sflush_r+0xfe>
 801bf08:	89a3      	ldrh	r3, [r4, #12]
 801bf0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bf0e:	81a3      	strh	r3, [r4, #12]
 801bf10:	f04f 30ff 	mov.w	r0, #4294967295
 801bf14:	e78e      	b.n	801be34 <__sflush_r+0x1c>
 801bf16:	4407      	add	r7, r0
 801bf18:	eba8 0800 	sub.w	r8, r8, r0
 801bf1c:	e7e9      	b.n	801bef2 <__sflush_r+0xda>
 801bf1e:	bf00      	nop
 801bf20:	20400001 	.word	0x20400001

0801bf24 <_fflush_r>:
 801bf24:	b538      	push	{r3, r4, r5, lr}
 801bf26:	690b      	ldr	r3, [r1, #16]
 801bf28:	4605      	mov	r5, r0
 801bf2a:	460c      	mov	r4, r1
 801bf2c:	b913      	cbnz	r3, 801bf34 <_fflush_r+0x10>
 801bf2e:	2500      	movs	r5, #0
 801bf30:	4628      	mov	r0, r5
 801bf32:	bd38      	pop	{r3, r4, r5, pc}
 801bf34:	b118      	cbz	r0, 801bf3e <_fflush_r+0x1a>
 801bf36:	6983      	ldr	r3, [r0, #24]
 801bf38:	b90b      	cbnz	r3, 801bf3e <_fflush_r+0x1a>
 801bf3a:	f000 f887 	bl	801c04c <__sinit>
 801bf3e:	4b14      	ldr	r3, [pc, #80]	; (801bf90 <_fflush_r+0x6c>)
 801bf40:	429c      	cmp	r4, r3
 801bf42:	d11b      	bne.n	801bf7c <_fflush_r+0x58>
 801bf44:	686c      	ldr	r4, [r5, #4]
 801bf46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf4a:	2b00      	cmp	r3, #0
 801bf4c:	d0ef      	beq.n	801bf2e <_fflush_r+0xa>
 801bf4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bf50:	07d0      	lsls	r0, r2, #31
 801bf52:	d404      	bmi.n	801bf5e <_fflush_r+0x3a>
 801bf54:	0599      	lsls	r1, r3, #22
 801bf56:	d402      	bmi.n	801bf5e <_fflush_r+0x3a>
 801bf58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bf5a:	f000 f927 	bl	801c1ac <__retarget_lock_acquire_recursive>
 801bf5e:	4628      	mov	r0, r5
 801bf60:	4621      	mov	r1, r4
 801bf62:	f7ff ff59 	bl	801be18 <__sflush_r>
 801bf66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bf68:	07da      	lsls	r2, r3, #31
 801bf6a:	4605      	mov	r5, r0
 801bf6c:	d4e0      	bmi.n	801bf30 <_fflush_r+0xc>
 801bf6e:	89a3      	ldrh	r3, [r4, #12]
 801bf70:	059b      	lsls	r3, r3, #22
 801bf72:	d4dd      	bmi.n	801bf30 <_fflush_r+0xc>
 801bf74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bf76:	f000 f91a 	bl	801c1ae <__retarget_lock_release_recursive>
 801bf7a:	e7d9      	b.n	801bf30 <_fflush_r+0xc>
 801bf7c:	4b05      	ldr	r3, [pc, #20]	; (801bf94 <_fflush_r+0x70>)
 801bf7e:	429c      	cmp	r4, r3
 801bf80:	d101      	bne.n	801bf86 <_fflush_r+0x62>
 801bf82:	68ac      	ldr	r4, [r5, #8]
 801bf84:	e7df      	b.n	801bf46 <_fflush_r+0x22>
 801bf86:	4b04      	ldr	r3, [pc, #16]	; (801bf98 <_fflush_r+0x74>)
 801bf88:	429c      	cmp	r4, r3
 801bf8a:	bf08      	it	eq
 801bf8c:	68ec      	ldreq	r4, [r5, #12]
 801bf8e:	e7da      	b.n	801bf46 <_fflush_r+0x22>
 801bf90:	080206a0 	.word	0x080206a0
 801bf94:	080206c0 	.word	0x080206c0
 801bf98:	08020680 	.word	0x08020680

0801bf9c <std>:
 801bf9c:	2300      	movs	r3, #0
 801bf9e:	b510      	push	{r4, lr}
 801bfa0:	4604      	mov	r4, r0
 801bfa2:	e9c0 3300 	strd	r3, r3, [r0]
 801bfa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bfaa:	6083      	str	r3, [r0, #8]
 801bfac:	8181      	strh	r1, [r0, #12]
 801bfae:	6643      	str	r3, [r0, #100]	; 0x64
 801bfb0:	81c2      	strh	r2, [r0, #14]
 801bfb2:	6183      	str	r3, [r0, #24]
 801bfb4:	4619      	mov	r1, r3
 801bfb6:	2208      	movs	r2, #8
 801bfb8:	305c      	adds	r0, #92	; 0x5c
 801bfba:	f7ff fd59 	bl	801ba70 <memset>
 801bfbe:	4b05      	ldr	r3, [pc, #20]	; (801bfd4 <std+0x38>)
 801bfc0:	6263      	str	r3, [r4, #36]	; 0x24
 801bfc2:	4b05      	ldr	r3, [pc, #20]	; (801bfd8 <std+0x3c>)
 801bfc4:	62a3      	str	r3, [r4, #40]	; 0x28
 801bfc6:	4b05      	ldr	r3, [pc, #20]	; (801bfdc <std+0x40>)
 801bfc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bfca:	4b05      	ldr	r3, [pc, #20]	; (801bfe0 <std+0x44>)
 801bfcc:	6224      	str	r4, [r4, #32]
 801bfce:	6323      	str	r3, [r4, #48]	; 0x30
 801bfd0:	bd10      	pop	{r4, pc}
 801bfd2:	bf00      	nop
 801bfd4:	0801c9d9 	.word	0x0801c9d9
 801bfd8:	0801c9fb 	.word	0x0801c9fb
 801bfdc:	0801ca33 	.word	0x0801ca33
 801bfe0:	0801ca57 	.word	0x0801ca57

0801bfe4 <_cleanup_r>:
 801bfe4:	4901      	ldr	r1, [pc, #4]	; (801bfec <_cleanup_r+0x8>)
 801bfe6:	f000 b8c1 	b.w	801c16c <_fwalk_reent>
 801bfea:	bf00      	nop
 801bfec:	0801bf25 	.word	0x0801bf25

0801bff0 <__sfmoreglue>:
 801bff0:	b570      	push	{r4, r5, r6, lr}
 801bff2:	1e4a      	subs	r2, r1, #1
 801bff4:	2568      	movs	r5, #104	; 0x68
 801bff6:	4355      	muls	r5, r2
 801bff8:	460e      	mov	r6, r1
 801bffa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801bffe:	f000 f993 	bl	801c328 <_malloc_r>
 801c002:	4604      	mov	r4, r0
 801c004:	b140      	cbz	r0, 801c018 <__sfmoreglue+0x28>
 801c006:	2100      	movs	r1, #0
 801c008:	e9c0 1600 	strd	r1, r6, [r0]
 801c00c:	300c      	adds	r0, #12
 801c00e:	60a0      	str	r0, [r4, #8]
 801c010:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c014:	f7ff fd2c 	bl	801ba70 <memset>
 801c018:	4620      	mov	r0, r4
 801c01a:	bd70      	pop	{r4, r5, r6, pc}

0801c01c <__sfp_lock_acquire>:
 801c01c:	4801      	ldr	r0, [pc, #4]	; (801c024 <__sfp_lock_acquire+0x8>)
 801c01e:	f000 b8c5 	b.w	801c1ac <__retarget_lock_acquire_recursive>
 801c022:	bf00      	nop
 801c024:	20007278 	.word	0x20007278

0801c028 <__sfp_lock_release>:
 801c028:	4801      	ldr	r0, [pc, #4]	; (801c030 <__sfp_lock_release+0x8>)
 801c02a:	f000 b8c0 	b.w	801c1ae <__retarget_lock_release_recursive>
 801c02e:	bf00      	nop
 801c030:	20007278 	.word	0x20007278

0801c034 <__sinit_lock_acquire>:
 801c034:	4801      	ldr	r0, [pc, #4]	; (801c03c <__sinit_lock_acquire+0x8>)
 801c036:	f000 b8b9 	b.w	801c1ac <__retarget_lock_acquire_recursive>
 801c03a:	bf00      	nop
 801c03c:	20007273 	.word	0x20007273

0801c040 <__sinit_lock_release>:
 801c040:	4801      	ldr	r0, [pc, #4]	; (801c048 <__sinit_lock_release+0x8>)
 801c042:	f000 b8b4 	b.w	801c1ae <__retarget_lock_release_recursive>
 801c046:	bf00      	nop
 801c048:	20007273 	.word	0x20007273

0801c04c <__sinit>:
 801c04c:	b510      	push	{r4, lr}
 801c04e:	4604      	mov	r4, r0
 801c050:	f7ff fff0 	bl	801c034 <__sinit_lock_acquire>
 801c054:	69a3      	ldr	r3, [r4, #24]
 801c056:	b11b      	cbz	r3, 801c060 <__sinit+0x14>
 801c058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c05c:	f7ff bff0 	b.w	801c040 <__sinit_lock_release>
 801c060:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c064:	6523      	str	r3, [r4, #80]	; 0x50
 801c066:	4b13      	ldr	r3, [pc, #76]	; (801c0b4 <__sinit+0x68>)
 801c068:	4a13      	ldr	r2, [pc, #76]	; (801c0b8 <__sinit+0x6c>)
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	62a2      	str	r2, [r4, #40]	; 0x28
 801c06e:	42a3      	cmp	r3, r4
 801c070:	bf04      	itt	eq
 801c072:	2301      	moveq	r3, #1
 801c074:	61a3      	streq	r3, [r4, #24]
 801c076:	4620      	mov	r0, r4
 801c078:	f000 f820 	bl	801c0bc <__sfp>
 801c07c:	6060      	str	r0, [r4, #4]
 801c07e:	4620      	mov	r0, r4
 801c080:	f000 f81c 	bl	801c0bc <__sfp>
 801c084:	60a0      	str	r0, [r4, #8]
 801c086:	4620      	mov	r0, r4
 801c088:	f000 f818 	bl	801c0bc <__sfp>
 801c08c:	2200      	movs	r2, #0
 801c08e:	60e0      	str	r0, [r4, #12]
 801c090:	2104      	movs	r1, #4
 801c092:	6860      	ldr	r0, [r4, #4]
 801c094:	f7ff ff82 	bl	801bf9c <std>
 801c098:	68a0      	ldr	r0, [r4, #8]
 801c09a:	2201      	movs	r2, #1
 801c09c:	2109      	movs	r1, #9
 801c09e:	f7ff ff7d 	bl	801bf9c <std>
 801c0a2:	68e0      	ldr	r0, [r4, #12]
 801c0a4:	2202      	movs	r2, #2
 801c0a6:	2112      	movs	r1, #18
 801c0a8:	f7ff ff78 	bl	801bf9c <std>
 801c0ac:	2301      	movs	r3, #1
 801c0ae:	61a3      	str	r3, [r4, #24]
 801c0b0:	e7d2      	b.n	801c058 <__sinit+0xc>
 801c0b2:	bf00      	nop
 801c0b4:	080205c8 	.word	0x080205c8
 801c0b8:	0801bfe5 	.word	0x0801bfe5

0801c0bc <__sfp>:
 801c0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0be:	4607      	mov	r7, r0
 801c0c0:	f7ff ffac 	bl	801c01c <__sfp_lock_acquire>
 801c0c4:	4b1e      	ldr	r3, [pc, #120]	; (801c140 <__sfp+0x84>)
 801c0c6:	681e      	ldr	r6, [r3, #0]
 801c0c8:	69b3      	ldr	r3, [r6, #24]
 801c0ca:	b913      	cbnz	r3, 801c0d2 <__sfp+0x16>
 801c0cc:	4630      	mov	r0, r6
 801c0ce:	f7ff ffbd 	bl	801c04c <__sinit>
 801c0d2:	3648      	adds	r6, #72	; 0x48
 801c0d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c0d8:	3b01      	subs	r3, #1
 801c0da:	d503      	bpl.n	801c0e4 <__sfp+0x28>
 801c0dc:	6833      	ldr	r3, [r6, #0]
 801c0de:	b30b      	cbz	r3, 801c124 <__sfp+0x68>
 801c0e0:	6836      	ldr	r6, [r6, #0]
 801c0e2:	e7f7      	b.n	801c0d4 <__sfp+0x18>
 801c0e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c0e8:	b9d5      	cbnz	r5, 801c120 <__sfp+0x64>
 801c0ea:	4b16      	ldr	r3, [pc, #88]	; (801c144 <__sfp+0x88>)
 801c0ec:	60e3      	str	r3, [r4, #12]
 801c0ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c0f2:	6665      	str	r5, [r4, #100]	; 0x64
 801c0f4:	f000 f859 	bl	801c1aa <__retarget_lock_init_recursive>
 801c0f8:	f7ff ff96 	bl	801c028 <__sfp_lock_release>
 801c0fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c100:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c104:	6025      	str	r5, [r4, #0]
 801c106:	61a5      	str	r5, [r4, #24]
 801c108:	2208      	movs	r2, #8
 801c10a:	4629      	mov	r1, r5
 801c10c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c110:	f7ff fcae 	bl	801ba70 <memset>
 801c114:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c118:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c11c:	4620      	mov	r0, r4
 801c11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c120:	3468      	adds	r4, #104	; 0x68
 801c122:	e7d9      	b.n	801c0d8 <__sfp+0x1c>
 801c124:	2104      	movs	r1, #4
 801c126:	4638      	mov	r0, r7
 801c128:	f7ff ff62 	bl	801bff0 <__sfmoreglue>
 801c12c:	4604      	mov	r4, r0
 801c12e:	6030      	str	r0, [r6, #0]
 801c130:	2800      	cmp	r0, #0
 801c132:	d1d5      	bne.n	801c0e0 <__sfp+0x24>
 801c134:	f7ff ff78 	bl	801c028 <__sfp_lock_release>
 801c138:	230c      	movs	r3, #12
 801c13a:	603b      	str	r3, [r7, #0]
 801c13c:	e7ee      	b.n	801c11c <__sfp+0x60>
 801c13e:	bf00      	nop
 801c140:	080205c8 	.word	0x080205c8
 801c144:	ffff0001 	.word	0xffff0001

0801c148 <fiprintf>:
 801c148:	b40e      	push	{r1, r2, r3}
 801c14a:	b503      	push	{r0, r1, lr}
 801c14c:	4601      	mov	r1, r0
 801c14e:	ab03      	add	r3, sp, #12
 801c150:	4805      	ldr	r0, [pc, #20]	; (801c168 <fiprintf+0x20>)
 801c152:	f853 2b04 	ldr.w	r2, [r3], #4
 801c156:	6800      	ldr	r0, [r0, #0]
 801c158:	9301      	str	r3, [sp, #4]
 801c15a:	f000 f969 	bl	801c430 <_vfiprintf_r>
 801c15e:	b002      	add	sp, #8
 801c160:	f85d eb04 	ldr.w	lr, [sp], #4
 801c164:	b003      	add	sp, #12
 801c166:	4770      	bx	lr
 801c168:	20000014 	.word	0x20000014

0801c16c <_fwalk_reent>:
 801c16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c170:	4606      	mov	r6, r0
 801c172:	4688      	mov	r8, r1
 801c174:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c178:	2700      	movs	r7, #0
 801c17a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c17e:	f1b9 0901 	subs.w	r9, r9, #1
 801c182:	d505      	bpl.n	801c190 <_fwalk_reent+0x24>
 801c184:	6824      	ldr	r4, [r4, #0]
 801c186:	2c00      	cmp	r4, #0
 801c188:	d1f7      	bne.n	801c17a <_fwalk_reent+0xe>
 801c18a:	4638      	mov	r0, r7
 801c18c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c190:	89ab      	ldrh	r3, [r5, #12]
 801c192:	2b01      	cmp	r3, #1
 801c194:	d907      	bls.n	801c1a6 <_fwalk_reent+0x3a>
 801c196:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c19a:	3301      	adds	r3, #1
 801c19c:	d003      	beq.n	801c1a6 <_fwalk_reent+0x3a>
 801c19e:	4629      	mov	r1, r5
 801c1a0:	4630      	mov	r0, r6
 801c1a2:	47c0      	blx	r8
 801c1a4:	4307      	orrs	r7, r0
 801c1a6:	3568      	adds	r5, #104	; 0x68
 801c1a8:	e7e9      	b.n	801c17e <_fwalk_reent+0x12>

0801c1aa <__retarget_lock_init_recursive>:
 801c1aa:	4770      	bx	lr

0801c1ac <__retarget_lock_acquire_recursive>:
 801c1ac:	4770      	bx	lr

0801c1ae <__retarget_lock_release_recursive>:
 801c1ae:	4770      	bx	lr

0801c1b0 <__swhatbuf_r>:
 801c1b0:	b570      	push	{r4, r5, r6, lr}
 801c1b2:	460e      	mov	r6, r1
 801c1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c1b8:	2900      	cmp	r1, #0
 801c1ba:	b096      	sub	sp, #88	; 0x58
 801c1bc:	4614      	mov	r4, r2
 801c1be:	461d      	mov	r5, r3
 801c1c0:	da07      	bge.n	801c1d2 <__swhatbuf_r+0x22>
 801c1c2:	2300      	movs	r3, #0
 801c1c4:	602b      	str	r3, [r5, #0]
 801c1c6:	89b3      	ldrh	r3, [r6, #12]
 801c1c8:	061a      	lsls	r2, r3, #24
 801c1ca:	d410      	bmi.n	801c1ee <__swhatbuf_r+0x3e>
 801c1cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c1d0:	e00e      	b.n	801c1f0 <__swhatbuf_r+0x40>
 801c1d2:	466a      	mov	r2, sp
 801c1d4:	f000 fc6e 	bl	801cab4 <_fstat_r>
 801c1d8:	2800      	cmp	r0, #0
 801c1da:	dbf2      	blt.n	801c1c2 <__swhatbuf_r+0x12>
 801c1dc:	9a01      	ldr	r2, [sp, #4]
 801c1de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c1e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c1e6:	425a      	negs	r2, r3
 801c1e8:	415a      	adcs	r2, r3
 801c1ea:	602a      	str	r2, [r5, #0]
 801c1ec:	e7ee      	b.n	801c1cc <__swhatbuf_r+0x1c>
 801c1ee:	2340      	movs	r3, #64	; 0x40
 801c1f0:	2000      	movs	r0, #0
 801c1f2:	6023      	str	r3, [r4, #0]
 801c1f4:	b016      	add	sp, #88	; 0x58
 801c1f6:	bd70      	pop	{r4, r5, r6, pc}

0801c1f8 <__smakebuf_r>:
 801c1f8:	898b      	ldrh	r3, [r1, #12]
 801c1fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c1fc:	079d      	lsls	r5, r3, #30
 801c1fe:	4606      	mov	r6, r0
 801c200:	460c      	mov	r4, r1
 801c202:	d507      	bpl.n	801c214 <__smakebuf_r+0x1c>
 801c204:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c208:	6023      	str	r3, [r4, #0]
 801c20a:	6123      	str	r3, [r4, #16]
 801c20c:	2301      	movs	r3, #1
 801c20e:	6163      	str	r3, [r4, #20]
 801c210:	b002      	add	sp, #8
 801c212:	bd70      	pop	{r4, r5, r6, pc}
 801c214:	ab01      	add	r3, sp, #4
 801c216:	466a      	mov	r2, sp
 801c218:	f7ff ffca 	bl	801c1b0 <__swhatbuf_r>
 801c21c:	9900      	ldr	r1, [sp, #0]
 801c21e:	4605      	mov	r5, r0
 801c220:	4630      	mov	r0, r6
 801c222:	f000 f881 	bl	801c328 <_malloc_r>
 801c226:	b948      	cbnz	r0, 801c23c <__smakebuf_r+0x44>
 801c228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c22c:	059a      	lsls	r2, r3, #22
 801c22e:	d4ef      	bmi.n	801c210 <__smakebuf_r+0x18>
 801c230:	f023 0303 	bic.w	r3, r3, #3
 801c234:	f043 0302 	orr.w	r3, r3, #2
 801c238:	81a3      	strh	r3, [r4, #12]
 801c23a:	e7e3      	b.n	801c204 <__smakebuf_r+0xc>
 801c23c:	4b0d      	ldr	r3, [pc, #52]	; (801c274 <__smakebuf_r+0x7c>)
 801c23e:	62b3      	str	r3, [r6, #40]	; 0x28
 801c240:	89a3      	ldrh	r3, [r4, #12]
 801c242:	6020      	str	r0, [r4, #0]
 801c244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c248:	81a3      	strh	r3, [r4, #12]
 801c24a:	9b00      	ldr	r3, [sp, #0]
 801c24c:	6163      	str	r3, [r4, #20]
 801c24e:	9b01      	ldr	r3, [sp, #4]
 801c250:	6120      	str	r0, [r4, #16]
 801c252:	b15b      	cbz	r3, 801c26c <__smakebuf_r+0x74>
 801c254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c258:	4630      	mov	r0, r6
 801c25a:	f000 fc3d 	bl	801cad8 <_isatty_r>
 801c25e:	b128      	cbz	r0, 801c26c <__smakebuf_r+0x74>
 801c260:	89a3      	ldrh	r3, [r4, #12]
 801c262:	f023 0303 	bic.w	r3, r3, #3
 801c266:	f043 0301 	orr.w	r3, r3, #1
 801c26a:	81a3      	strh	r3, [r4, #12]
 801c26c:	89a0      	ldrh	r0, [r4, #12]
 801c26e:	4305      	orrs	r5, r0
 801c270:	81a5      	strh	r5, [r4, #12]
 801c272:	e7cd      	b.n	801c210 <__smakebuf_r+0x18>
 801c274:	0801bfe5 	.word	0x0801bfe5

0801c278 <malloc>:
 801c278:	4b02      	ldr	r3, [pc, #8]	; (801c284 <malloc+0xc>)
 801c27a:	4601      	mov	r1, r0
 801c27c:	6818      	ldr	r0, [r3, #0]
 801c27e:	f000 b853 	b.w	801c328 <_malloc_r>
 801c282:	bf00      	nop
 801c284:	20000014 	.word	0x20000014

0801c288 <_free_r>:
 801c288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c28a:	2900      	cmp	r1, #0
 801c28c:	d048      	beq.n	801c320 <_free_r+0x98>
 801c28e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c292:	9001      	str	r0, [sp, #4]
 801c294:	2b00      	cmp	r3, #0
 801c296:	f1a1 0404 	sub.w	r4, r1, #4
 801c29a:	bfb8      	it	lt
 801c29c:	18e4      	addlt	r4, r4, r3
 801c29e:	f000 fc3d 	bl	801cb1c <__malloc_lock>
 801c2a2:	4a20      	ldr	r2, [pc, #128]	; (801c324 <_free_r+0x9c>)
 801c2a4:	9801      	ldr	r0, [sp, #4]
 801c2a6:	6813      	ldr	r3, [r2, #0]
 801c2a8:	4615      	mov	r5, r2
 801c2aa:	b933      	cbnz	r3, 801c2ba <_free_r+0x32>
 801c2ac:	6063      	str	r3, [r4, #4]
 801c2ae:	6014      	str	r4, [r2, #0]
 801c2b0:	b003      	add	sp, #12
 801c2b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c2b6:	f000 bc37 	b.w	801cb28 <__malloc_unlock>
 801c2ba:	42a3      	cmp	r3, r4
 801c2bc:	d90b      	bls.n	801c2d6 <_free_r+0x4e>
 801c2be:	6821      	ldr	r1, [r4, #0]
 801c2c0:	1862      	adds	r2, r4, r1
 801c2c2:	4293      	cmp	r3, r2
 801c2c4:	bf04      	itt	eq
 801c2c6:	681a      	ldreq	r2, [r3, #0]
 801c2c8:	685b      	ldreq	r3, [r3, #4]
 801c2ca:	6063      	str	r3, [r4, #4]
 801c2cc:	bf04      	itt	eq
 801c2ce:	1852      	addeq	r2, r2, r1
 801c2d0:	6022      	streq	r2, [r4, #0]
 801c2d2:	602c      	str	r4, [r5, #0]
 801c2d4:	e7ec      	b.n	801c2b0 <_free_r+0x28>
 801c2d6:	461a      	mov	r2, r3
 801c2d8:	685b      	ldr	r3, [r3, #4]
 801c2da:	b10b      	cbz	r3, 801c2e0 <_free_r+0x58>
 801c2dc:	42a3      	cmp	r3, r4
 801c2de:	d9fa      	bls.n	801c2d6 <_free_r+0x4e>
 801c2e0:	6811      	ldr	r1, [r2, #0]
 801c2e2:	1855      	adds	r5, r2, r1
 801c2e4:	42a5      	cmp	r5, r4
 801c2e6:	d10b      	bne.n	801c300 <_free_r+0x78>
 801c2e8:	6824      	ldr	r4, [r4, #0]
 801c2ea:	4421      	add	r1, r4
 801c2ec:	1854      	adds	r4, r2, r1
 801c2ee:	42a3      	cmp	r3, r4
 801c2f0:	6011      	str	r1, [r2, #0]
 801c2f2:	d1dd      	bne.n	801c2b0 <_free_r+0x28>
 801c2f4:	681c      	ldr	r4, [r3, #0]
 801c2f6:	685b      	ldr	r3, [r3, #4]
 801c2f8:	6053      	str	r3, [r2, #4]
 801c2fa:	4421      	add	r1, r4
 801c2fc:	6011      	str	r1, [r2, #0]
 801c2fe:	e7d7      	b.n	801c2b0 <_free_r+0x28>
 801c300:	d902      	bls.n	801c308 <_free_r+0x80>
 801c302:	230c      	movs	r3, #12
 801c304:	6003      	str	r3, [r0, #0]
 801c306:	e7d3      	b.n	801c2b0 <_free_r+0x28>
 801c308:	6825      	ldr	r5, [r4, #0]
 801c30a:	1961      	adds	r1, r4, r5
 801c30c:	428b      	cmp	r3, r1
 801c30e:	bf04      	itt	eq
 801c310:	6819      	ldreq	r1, [r3, #0]
 801c312:	685b      	ldreq	r3, [r3, #4]
 801c314:	6063      	str	r3, [r4, #4]
 801c316:	bf04      	itt	eq
 801c318:	1949      	addeq	r1, r1, r5
 801c31a:	6021      	streq	r1, [r4, #0]
 801c31c:	6054      	str	r4, [r2, #4]
 801c31e:	e7c7      	b.n	801c2b0 <_free_r+0x28>
 801c320:	b003      	add	sp, #12
 801c322:	bd30      	pop	{r4, r5, pc}
 801c324:	20000b30 	.word	0x20000b30

0801c328 <_malloc_r>:
 801c328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c32a:	1ccd      	adds	r5, r1, #3
 801c32c:	f025 0503 	bic.w	r5, r5, #3
 801c330:	3508      	adds	r5, #8
 801c332:	2d0c      	cmp	r5, #12
 801c334:	bf38      	it	cc
 801c336:	250c      	movcc	r5, #12
 801c338:	2d00      	cmp	r5, #0
 801c33a:	4606      	mov	r6, r0
 801c33c:	db01      	blt.n	801c342 <_malloc_r+0x1a>
 801c33e:	42a9      	cmp	r1, r5
 801c340:	d903      	bls.n	801c34a <_malloc_r+0x22>
 801c342:	230c      	movs	r3, #12
 801c344:	6033      	str	r3, [r6, #0]
 801c346:	2000      	movs	r0, #0
 801c348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c34a:	f000 fbe7 	bl	801cb1c <__malloc_lock>
 801c34e:	4921      	ldr	r1, [pc, #132]	; (801c3d4 <_malloc_r+0xac>)
 801c350:	680a      	ldr	r2, [r1, #0]
 801c352:	4614      	mov	r4, r2
 801c354:	b99c      	cbnz	r4, 801c37e <_malloc_r+0x56>
 801c356:	4f20      	ldr	r7, [pc, #128]	; (801c3d8 <_malloc_r+0xb0>)
 801c358:	683b      	ldr	r3, [r7, #0]
 801c35a:	b923      	cbnz	r3, 801c366 <_malloc_r+0x3e>
 801c35c:	4621      	mov	r1, r4
 801c35e:	4630      	mov	r0, r6
 801c360:	f000 fb2a 	bl	801c9b8 <_sbrk_r>
 801c364:	6038      	str	r0, [r7, #0]
 801c366:	4629      	mov	r1, r5
 801c368:	4630      	mov	r0, r6
 801c36a:	f000 fb25 	bl	801c9b8 <_sbrk_r>
 801c36e:	1c43      	adds	r3, r0, #1
 801c370:	d123      	bne.n	801c3ba <_malloc_r+0x92>
 801c372:	230c      	movs	r3, #12
 801c374:	6033      	str	r3, [r6, #0]
 801c376:	4630      	mov	r0, r6
 801c378:	f000 fbd6 	bl	801cb28 <__malloc_unlock>
 801c37c:	e7e3      	b.n	801c346 <_malloc_r+0x1e>
 801c37e:	6823      	ldr	r3, [r4, #0]
 801c380:	1b5b      	subs	r3, r3, r5
 801c382:	d417      	bmi.n	801c3b4 <_malloc_r+0x8c>
 801c384:	2b0b      	cmp	r3, #11
 801c386:	d903      	bls.n	801c390 <_malloc_r+0x68>
 801c388:	6023      	str	r3, [r4, #0]
 801c38a:	441c      	add	r4, r3
 801c38c:	6025      	str	r5, [r4, #0]
 801c38e:	e004      	b.n	801c39a <_malloc_r+0x72>
 801c390:	6863      	ldr	r3, [r4, #4]
 801c392:	42a2      	cmp	r2, r4
 801c394:	bf0c      	ite	eq
 801c396:	600b      	streq	r3, [r1, #0]
 801c398:	6053      	strne	r3, [r2, #4]
 801c39a:	4630      	mov	r0, r6
 801c39c:	f000 fbc4 	bl	801cb28 <__malloc_unlock>
 801c3a0:	f104 000b 	add.w	r0, r4, #11
 801c3a4:	1d23      	adds	r3, r4, #4
 801c3a6:	f020 0007 	bic.w	r0, r0, #7
 801c3aa:	1ac2      	subs	r2, r0, r3
 801c3ac:	d0cc      	beq.n	801c348 <_malloc_r+0x20>
 801c3ae:	1a1b      	subs	r3, r3, r0
 801c3b0:	50a3      	str	r3, [r4, r2]
 801c3b2:	e7c9      	b.n	801c348 <_malloc_r+0x20>
 801c3b4:	4622      	mov	r2, r4
 801c3b6:	6864      	ldr	r4, [r4, #4]
 801c3b8:	e7cc      	b.n	801c354 <_malloc_r+0x2c>
 801c3ba:	1cc4      	adds	r4, r0, #3
 801c3bc:	f024 0403 	bic.w	r4, r4, #3
 801c3c0:	42a0      	cmp	r0, r4
 801c3c2:	d0e3      	beq.n	801c38c <_malloc_r+0x64>
 801c3c4:	1a21      	subs	r1, r4, r0
 801c3c6:	4630      	mov	r0, r6
 801c3c8:	f000 faf6 	bl	801c9b8 <_sbrk_r>
 801c3cc:	3001      	adds	r0, #1
 801c3ce:	d1dd      	bne.n	801c38c <_malloc_r+0x64>
 801c3d0:	e7cf      	b.n	801c372 <_malloc_r+0x4a>
 801c3d2:	bf00      	nop
 801c3d4:	20000b30 	.word	0x20000b30
 801c3d8:	20000b34 	.word	0x20000b34

0801c3dc <__sfputc_r>:
 801c3dc:	6893      	ldr	r3, [r2, #8]
 801c3de:	3b01      	subs	r3, #1
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	b410      	push	{r4}
 801c3e4:	6093      	str	r3, [r2, #8]
 801c3e6:	da08      	bge.n	801c3fa <__sfputc_r+0x1e>
 801c3e8:	6994      	ldr	r4, [r2, #24]
 801c3ea:	42a3      	cmp	r3, r4
 801c3ec:	db01      	blt.n	801c3f2 <__sfputc_r+0x16>
 801c3ee:	290a      	cmp	r1, #10
 801c3f0:	d103      	bne.n	801c3fa <__sfputc_r+0x1e>
 801c3f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c3f6:	f7ff bc31 	b.w	801bc5c <__swbuf_r>
 801c3fa:	6813      	ldr	r3, [r2, #0]
 801c3fc:	1c58      	adds	r0, r3, #1
 801c3fe:	6010      	str	r0, [r2, #0]
 801c400:	7019      	strb	r1, [r3, #0]
 801c402:	4608      	mov	r0, r1
 801c404:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c408:	4770      	bx	lr

0801c40a <__sfputs_r>:
 801c40a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c40c:	4606      	mov	r6, r0
 801c40e:	460f      	mov	r7, r1
 801c410:	4614      	mov	r4, r2
 801c412:	18d5      	adds	r5, r2, r3
 801c414:	42ac      	cmp	r4, r5
 801c416:	d101      	bne.n	801c41c <__sfputs_r+0x12>
 801c418:	2000      	movs	r0, #0
 801c41a:	e007      	b.n	801c42c <__sfputs_r+0x22>
 801c41c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c420:	463a      	mov	r2, r7
 801c422:	4630      	mov	r0, r6
 801c424:	f7ff ffda 	bl	801c3dc <__sfputc_r>
 801c428:	1c43      	adds	r3, r0, #1
 801c42a:	d1f3      	bne.n	801c414 <__sfputs_r+0xa>
 801c42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c430 <_vfiprintf_r>:
 801c430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c434:	460d      	mov	r5, r1
 801c436:	b09d      	sub	sp, #116	; 0x74
 801c438:	4614      	mov	r4, r2
 801c43a:	4698      	mov	r8, r3
 801c43c:	4606      	mov	r6, r0
 801c43e:	b118      	cbz	r0, 801c448 <_vfiprintf_r+0x18>
 801c440:	6983      	ldr	r3, [r0, #24]
 801c442:	b90b      	cbnz	r3, 801c448 <_vfiprintf_r+0x18>
 801c444:	f7ff fe02 	bl	801c04c <__sinit>
 801c448:	4b89      	ldr	r3, [pc, #548]	; (801c670 <_vfiprintf_r+0x240>)
 801c44a:	429d      	cmp	r5, r3
 801c44c:	d11b      	bne.n	801c486 <_vfiprintf_r+0x56>
 801c44e:	6875      	ldr	r5, [r6, #4]
 801c450:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c452:	07d9      	lsls	r1, r3, #31
 801c454:	d405      	bmi.n	801c462 <_vfiprintf_r+0x32>
 801c456:	89ab      	ldrh	r3, [r5, #12]
 801c458:	059a      	lsls	r2, r3, #22
 801c45a:	d402      	bmi.n	801c462 <_vfiprintf_r+0x32>
 801c45c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c45e:	f7ff fea5 	bl	801c1ac <__retarget_lock_acquire_recursive>
 801c462:	89ab      	ldrh	r3, [r5, #12]
 801c464:	071b      	lsls	r3, r3, #28
 801c466:	d501      	bpl.n	801c46c <_vfiprintf_r+0x3c>
 801c468:	692b      	ldr	r3, [r5, #16]
 801c46a:	b9eb      	cbnz	r3, 801c4a8 <_vfiprintf_r+0x78>
 801c46c:	4629      	mov	r1, r5
 801c46e:	4630      	mov	r0, r6
 801c470:	f7ff fc46 	bl	801bd00 <__swsetup_r>
 801c474:	b1c0      	cbz	r0, 801c4a8 <_vfiprintf_r+0x78>
 801c476:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c478:	07dc      	lsls	r4, r3, #31
 801c47a:	d50e      	bpl.n	801c49a <_vfiprintf_r+0x6a>
 801c47c:	f04f 30ff 	mov.w	r0, #4294967295
 801c480:	b01d      	add	sp, #116	; 0x74
 801c482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c486:	4b7b      	ldr	r3, [pc, #492]	; (801c674 <_vfiprintf_r+0x244>)
 801c488:	429d      	cmp	r5, r3
 801c48a:	d101      	bne.n	801c490 <_vfiprintf_r+0x60>
 801c48c:	68b5      	ldr	r5, [r6, #8]
 801c48e:	e7df      	b.n	801c450 <_vfiprintf_r+0x20>
 801c490:	4b79      	ldr	r3, [pc, #484]	; (801c678 <_vfiprintf_r+0x248>)
 801c492:	429d      	cmp	r5, r3
 801c494:	bf08      	it	eq
 801c496:	68f5      	ldreq	r5, [r6, #12]
 801c498:	e7da      	b.n	801c450 <_vfiprintf_r+0x20>
 801c49a:	89ab      	ldrh	r3, [r5, #12]
 801c49c:	0598      	lsls	r0, r3, #22
 801c49e:	d4ed      	bmi.n	801c47c <_vfiprintf_r+0x4c>
 801c4a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c4a2:	f7ff fe84 	bl	801c1ae <__retarget_lock_release_recursive>
 801c4a6:	e7e9      	b.n	801c47c <_vfiprintf_r+0x4c>
 801c4a8:	2300      	movs	r3, #0
 801c4aa:	9309      	str	r3, [sp, #36]	; 0x24
 801c4ac:	2320      	movs	r3, #32
 801c4ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c4b2:	f8cd 800c 	str.w	r8, [sp, #12]
 801c4b6:	2330      	movs	r3, #48	; 0x30
 801c4b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c67c <_vfiprintf_r+0x24c>
 801c4bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c4c0:	f04f 0901 	mov.w	r9, #1
 801c4c4:	4623      	mov	r3, r4
 801c4c6:	469a      	mov	sl, r3
 801c4c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c4cc:	b10a      	cbz	r2, 801c4d2 <_vfiprintf_r+0xa2>
 801c4ce:	2a25      	cmp	r2, #37	; 0x25
 801c4d0:	d1f9      	bne.n	801c4c6 <_vfiprintf_r+0x96>
 801c4d2:	ebba 0b04 	subs.w	fp, sl, r4
 801c4d6:	d00b      	beq.n	801c4f0 <_vfiprintf_r+0xc0>
 801c4d8:	465b      	mov	r3, fp
 801c4da:	4622      	mov	r2, r4
 801c4dc:	4629      	mov	r1, r5
 801c4de:	4630      	mov	r0, r6
 801c4e0:	f7ff ff93 	bl	801c40a <__sfputs_r>
 801c4e4:	3001      	adds	r0, #1
 801c4e6:	f000 80aa 	beq.w	801c63e <_vfiprintf_r+0x20e>
 801c4ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c4ec:	445a      	add	r2, fp
 801c4ee:	9209      	str	r2, [sp, #36]	; 0x24
 801c4f0:	f89a 3000 	ldrb.w	r3, [sl]
 801c4f4:	2b00      	cmp	r3, #0
 801c4f6:	f000 80a2 	beq.w	801c63e <_vfiprintf_r+0x20e>
 801c4fa:	2300      	movs	r3, #0
 801c4fc:	f04f 32ff 	mov.w	r2, #4294967295
 801c500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c504:	f10a 0a01 	add.w	sl, sl, #1
 801c508:	9304      	str	r3, [sp, #16]
 801c50a:	9307      	str	r3, [sp, #28]
 801c50c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c510:	931a      	str	r3, [sp, #104]	; 0x68
 801c512:	4654      	mov	r4, sl
 801c514:	2205      	movs	r2, #5
 801c516:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c51a:	4858      	ldr	r0, [pc, #352]	; (801c67c <_vfiprintf_r+0x24c>)
 801c51c:	f7f3 fe70 	bl	8010200 <memchr>
 801c520:	9a04      	ldr	r2, [sp, #16]
 801c522:	b9d8      	cbnz	r0, 801c55c <_vfiprintf_r+0x12c>
 801c524:	06d1      	lsls	r1, r2, #27
 801c526:	bf44      	itt	mi
 801c528:	2320      	movmi	r3, #32
 801c52a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c52e:	0713      	lsls	r3, r2, #28
 801c530:	bf44      	itt	mi
 801c532:	232b      	movmi	r3, #43	; 0x2b
 801c534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c538:	f89a 3000 	ldrb.w	r3, [sl]
 801c53c:	2b2a      	cmp	r3, #42	; 0x2a
 801c53e:	d015      	beq.n	801c56c <_vfiprintf_r+0x13c>
 801c540:	9a07      	ldr	r2, [sp, #28]
 801c542:	4654      	mov	r4, sl
 801c544:	2000      	movs	r0, #0
 801c546:	f04f 0c0a 	mov.w	ip, #10
 801c54a:	4621      	mov	r1, r4
 801c54c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c550:	3b30      	subs	r3, #48	; 0x30
 801c552:	2b09      	cmp	r3, #9
 801c554:	d94e      	bls.n	801c5f4 <_vfiprintf_r+0x1c4>
 801c556:	b1b0      	cbz	r0, 801c586 <_vfiprintf_r+0x156>
 801c558:	9207      	str	r2, [sp, #28]
 801c55a:	e014      	b.n	801c586 <_vfiprintf_r+0x156>
 801c55c:	eba0 0308 	sub.w	r3, r0, r8
 801c560:	fa09 f303 	lsl.w	r3, r9, r3
 801c564:	4313      	orrs	r3, r2
 801c566:	9304      	str	r3, [sp, #16]
 801c568:	46a2      	mov	sl, r4
 801c56a:	e7d2      	b.n	801c512 <_vfiprintf_r+0xe2>
 801c56c:	9b03      	ldr	r3, [sp, #12]
 801c56e:	1d19      	adds	r1, r3, #4
 801c570:	681b      	ldr	r3, [r3, #0]
 801c572:	9103      	str	r1, [sp, #12]
 801c574:	2b00      	cmp	r3, #0
 801c576:	bfbb      	ittet	lt
 801c578:	425b      	neglt	r3, r3
 801c57a:	f042 0202 	orrlt.w	r2, r2, #2
 801c57e:	9307      	strge	r3, [sp, #28]
 801c580:	9307      	strlt	r3, [sp, #28]
 801c582:	bfb8      	it	lt
 801c584:	9204      	strlt	r2, [sp, #16]
 801c586:	7823      	ldrb	r3, [r4, #0]
 801c588:	2b2e      	cmp	r3, #46	; 0x2e
 801c58a:	d10c      	bne.n	801c5a6 <_vfiprintf_r+0x176>
 801c58c:	7863      	ldrb	r3, [r4, #1]
 801c58e:	2b2a      	cmp	r3, #42	; 0x2a
 801c590:	d135      	bne.n	801c5fe <_vfiprintf_r+0x1ce>
 801c592:	9b03      	ldr	r3, [sp, #12]
 801c594:	1d1a      	adds	r2, r3, #4
 801c596:	681b      	ldr	r3, [r3, #0]
 801c598:	9203      	str	r2, [sp, #12]
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	bfb8      	it	lt
 801c59e:	f04f 33ff 	movlt.w	r3, #4294967295
 801c5a2:	3402      	adds	r4, #2
 801c5a4:	9305      	str	r3, [sp, #20]
 801c5a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c68c <_vfiprintf_r+0x25c>
 801c5aa:	7821      	ldrb	r1, [r4, #0]
 801c5ac:	2203      	movs	r2, #3
 801c5ae:	4650      	mov	r0, sl
 801c5b0:	f7f3 fe26 	bl	8010200 <memchr>
 801c5b4:	b140      	cbz	r0, 801c5c8 <_vfiprintf_r+0x198>
 801c5b6:	2340      	movs	r3, #64	; 0x40
 801c5b8:	eba0 000a 	sub.w	r0, r0, sl
 801c5bc:	fa03 f000 	lsl.w	r0, r3, r0
 801c5c0:	9b04      	ldr	r3, [sp, #16]
 801c5c2:	4303      	orrs	r3, r0
 801c5c4:	3401      	adds	r4, #1
 801c5c6:	9304      	str	r3, [sp, #16]
 801c5c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c5cc:	482c      	ldr	r0, [pc, #176]	; (801c680 <_vfiprintf_r+0x250>)
 801c5ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c5d2:	2206      	movs	r2, #6
 801c5d4:	f7f3 fe14 	bl	8010200 <memchr>
 801c5d8:	2800      	cmp	r0, #0
 801c5da:	d03f      	beq.n	801c65c <_vfiprintf_r+0x22c>
 801c5dc:	4b29      	ldr	r3, [pc, #164]	; (801c684 <_vfiprintf_r+0x254>)
 801c5de:	bb1b      	cbnz	r3, 801c628 <_vfiprintf_r+0x1f8>
 801c5e0:	9b03      	ldr	r3, [sp, #12]
 801c5e2:	3307      	adds	r3, #7
 801c5e4:	f023 0307 	bic.w	r3, r3, #7
 801c5e8:	3308      	adds	r3, #8
 801c5ea:	9303      	str	r3, [sp, #12]
 801c5ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c5ee:	443b      	add	r3, r7
 801c5f0:	9309      	str	r3, [sp, #36]	; 0x24
 801c5f2:	e767      	b.n	801c4c4 <_vfiprintf_r+0x94>
 801c5f4:	fb0c 3202 	mla	r2, ip, r2, r3
 801c5f8:	460c      	mov	r4, r1
 801c5fa:	2001      	movs	r0, #1
 801c5fc:	e7a5      	b.n	801c54a <_vfiprintf_r+0x11a>
 801c5fe:	2300      	movs	r3, #0
 801c600:	3401      	adds	r4, #1
 801c602:	9305      	str	r3, [sp, #20]
 801c604:	4619      	mov	r1, r3
 801c606:	f04f 0c0a 	mov.w	ip, #10
 801c60a:	4620      	mov	r0, r4
 801c60c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c610:	3a30      	subs	r2, #48	; 0x30
 801c612:	2a09      	cmp	r2, #9
 801c614:	d903      	bls.n	801c61e <_vfiprintf_r+0x1ee>
 801c616:	2b00      	cmp	r3, #0
 801c618:	d0c5      	beq.n	801c5a6 <_vfiprintf_r+0x176>
 801c61a:	9105      	str	r1, [sp, #20]
 801c61c:	e7c3      	b.n	801c5a6 <_vfiprintf_r+0x176>
 801c61e:	fb0c 2101 	mla	r1, ip, r1, r2
 801c622:	4604      	mov	r4, r0
 801c624:	2301      	movs	r3, #1
 801c626:	e7f0      	b.n	801c60a <_vfiprintf_r+0x1da>
 801c628:	ab03      	add	r3, sp, #12
 801c62a:	9300      	str	r3, [sp, #0]
 801c62c:	462a      	mov	r2, r5
 801c62e:	4b16      	ldr	r3, [pc, #88]	; (801c688 <_vfiprintf_r+0x258>)
 801c630:	a904      	add	r1, sp, #16
 801c632:	4630      	mov	r0, r6
 801c634:	f3af 8000 	nop.w
 801c638:	4607      	mov	r7, r0
 801c63a:	1c78      	adds	r0, r7, #1
 801c63c:	d1d6      	bne.n	801c5ec <_vfiprintf_r+0x1bc>
 801c63e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c640:	07d9      	lsls	r1, r3, #31
 801c642:	d405      	bmi.n	801c650 <_vfiprintf_r+0x220>
 801c644:	89ab      	ldrh	r3, [r5, #12]
 801c646:	059a      	lsls	r2, r3, #22
 801c648:	d402      	bmi.n	801c650 <_vfiprintf_r+0x220>
 801c64a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c64c:	f7ff fdaf 	bl	801c1ae <__retarget_lock_release_recursive>
 801c650:	89ab      	ldrh	r3, [r5, #12]
 801c652:	065b      	lsls	r3, r3, #25
 801c654:	f53f af12 	bmi.w	801c47c <_vfiprintf_r+0x4c>
 801c658:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c65a:	e711      	b.n	801c480 <_vfiprintf_r+0x50>
 801c65c:	ab03      	add	r3, sp, #12
 801c65e:	9300      	str	r3, [sp, #0]
 801c660:	462a      	mov	r2, r5
 801c662:	4b09      	ldr	r3, [pc, #36]	; (801c688 <_vfiprintf_r+0x258>)
 801c664:	a904      	add	r1, sp, #16
 801c666:	4630      	mov	r0, r6
 801c668:	f000 f880 	bl	801c76c <_printf_i>
 801c66c:	e7e4      	b.n	801c638 <_vfiprintf_r+0x208>
 801c66e:	bf00      	nop
 801c670:	080206a0 	.word	0x080206a0
 801c674:	080206c0 	.word	0x080206c0
 801c678:	08020680 	.word	0x08020680
 801c67c:	080206e0 	.word	0x080206e0
 801c680:	080206ea 	.word	0x080206ea
 801c684:	00000000 	.word	0x00000000
 801c688:	0801c40b 	.word	0x0801c40b
 801c68c:	080206e6 	.word	0x080206e6

0801c690 <_printf_common>:
 801c690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c694:	4616      	mov	r6, r2
 801c696:	4699      	mov	r9, r3
 801c698:	688a      	ldr	r2, [r1, #8]
 801c69a:	690b      	ldr	r3, [r1, #16]
 801c69c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c6a0:	4293      	cmp	r3, r2
 801c6a2:	bfb8      	it	lt
 801c6a4:	4613      	movlt	r3, r2
 801c6a6:	6033      	str	r3, [r6, #0]
 801c6a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c6ac:	4607      	mov	r7, r0
 801c6ae:	460c      	mov	r4, r1
 801c6b0:	b10a      	cbz	r2, 801c6b6 <_printf_common+0x26>
 801c6b2:	3301      	adds	r3, #1
 801c6b4:	6033      	str	r3, [r6, #0]
 801c6b6:	6823      	ldr	r3, [r4, #0]
 801c6b8:	0699      	lsls	r1, r3, #26
 801c6ba:	bf42      	ittt	mi
 801c6bc:	6833      	ldrmi	r3, [r6, #0]
 801c6be:	3302      	addmi	r3, #2
 801c6c0:	6033      	strmi	r3, [r6, #0]
 801c6c2:	6825      	ldr	r5, [r4, #0]
 801c6c4:	f015 0506 	ands.w	r5, r5, #6
 801c6c8:	d106      	bne.n	801c6d8 <_printf_common+0x48>
 801c6ca:	f104 0a19 	add.w	sl, r4, #25
 801c6ce:	68e3      	ldr	r3, [r4, #12]
 801c6d0:	6832      	ldr	r2, [r6, #0]
 801c6d2:	1a9b      	subs	r3, r3, r2
 801c6d4:	42ab      	cmp	r3, r5
 801c6d6:	dc26      	bgt.n	801c726 <_printf_common+0x96>
 801c6d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c6dc:	1e13      	subs	r3, r2, #0
 801c6de:	6822      	ldr	r2, [r4, #0]
 801c6e0:	bf18      	it	ne
 801c6e2:	2301      	movne	r3, #1
 801c6e4:	0692      	lsls	r2, r2, #26
 801c6e6:	d42b      	bmi.n	801c740 <_printf_common+0xb0>
 801c6e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c6ec:	4649      	mov	r1, r9
 801c6ee:	4638      	mov	r0, r7
 801c6f0:	47c0      	blx	r8
 801c6f2:	3001      	adds	r0, #1
 801c6f4:	d01e      	beq.n	801c734 <_printf_common+0xa4>
 801c6f6:	6823      	ldr	r3, [r4, #0]
 801c6f8:	68e5      	ldr	r5, [r4, #12]
 801c6fa:	6832      	ldr	r2, [r6, #0]
 801c6fc:	f003 0306 	and.w	r3, r3, #6
 801c700:	2b04      	cmp	r3, #4
 801c702:	bf08      	it	eq
 801c704:	1aad      	subeq	r5, r5, r2
 801c706:	68a3      	ldr	r3, [r4, #8]
 801c708:	6922      	ldr	r2, [r4, #16]
 801c70a:	bf0c      	ite	eq
 801c70c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c710:	2500      	movne	r5, #0
 801c712:	4293      	cmp	r3, r2
 801c714:	bfc4      	itt	gt
 801c716:	1a9b      	subgt	r3, r3, r2
 801c718:	18ed      	addgt	r5, r5, r3
 801c71a:	2600      	movs	r6, #0
 801c71c:	341a      	adds	r4, #26
 801c71e:	42b5      	cmp	r5, r6
 801c720:	d11a      	bne.n	801c758 <_printf_common+0xc8>
 801c722:	2000      	movs	r0, #0
 801c724:	e008      	b.n	801c738 <_printf_common+0xa8>
 801c726:	2301      	movs	r3, #1
 801c728:	4652      	mov	r2, sl
 801c72a:	4649      	mov	r1, r9
 801c72c:	4638      	mov	r0, r7
 801c72e:	47c0      	blx	r8
 801c730:	3001      	adds	r0, #1
 801c732:	d103      	bne.n	801c73c <_printf_common+0xac>
 801c734:	f04f 30ff 	mov.w	r0, #4294967295
 801c738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c73c:	3501      	adds	r5, #1
 801c73e:	e7c6      	b.n	801c6ce <_printf_common+0x3e>
 801c740:	18e1      	adds	r1, r4, r3
 801c742:	1c5a      	adds	r2, r3, #1
 801c744:	2030      	movs	r0, #48	; 0x30
 801c746:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c74a:	4422      	add	r2, r4
 801c74c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c750:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c754:	3302      	adds	r3, #2
 801c756:	e7c7      	b.n	801c6e8 <_printf_common+0x58>
 801c758:	2301      	movs	r3, #1
 801c75a:	4622      	mov	r2, r4
 801c75c:	4649      	mov	r1, r9
 801c75e:	4638      	mov	r0, r7
 801c760:	47c0      	blx	r8
 801c762:	3001      	adds	r0, #1
 801c764:	d0e6      	beq.n	801c734 <_printf_common+0xa4>
 801c766:	3601      	adds	r6, #1
 801c768:	e7d9      	b.n	801c71e <_printf_common+0x8e>
	...

0801c76c <_printf_i>:
 801c76c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c770:	460c      	mov	r4, r1
 801c772:	4691      	mov	r9, r2
 801c774:	7e27      	ldrb	r7, [r4, #24]
 801c776:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c778:	2f78      	cmp	r7, #120	; 0x78
 801c77a:	4680      	mov	r8, r0
 801c77c:	469a      	mov	sl, r3
 801c77e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c782:	d807      	bhi.n	801c794 <_printf_i+0x28>
 801c784:	2f62      	cmp	r7, #98	; 0x62
 801c786:	d80a      	bhi.n	801c79e <_printf_i+0x32>
 801c788:	2f00      	cmp	r7, #0
 801c78a:	f000 80d8 	beq.w	801c93e <_printf_i+0x1d2>
 801c78e:	2f58      	cmp	r7, #88	; 0x58
 801c790:	f000 80a3 	beq.w	801c8da <_printf_i+0x16e>
 801c794:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c798:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c79c:	e03a      	b.n	801c814 <_printf_i+0xa8>
 801c79e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c7a2:	2b15      	cmp	r3, #21
 801c7a4:	d8f6      	bhi.n	801c794 <_printf_i+0x28>
 801c7a6:	a001      	add	r0, pc, #4	; (adr r0, 801c7ac <_printf_i+0x40>)
 801c7a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801c7ac:	0801c805 	.word	0x0801c805
 801c7b0:	0801c819 	.word	0x0801c819
 801c7b4:	0801c795 	.word	0x0801c795
 801c7b8:	0801c795 	.word	0x0801c795
 801c7bc:	0801c795 	.word	0x0801c795
 801c7c0:	0801c795 	.word	0x0801c795
 801c7c4:	0801c819 	.word	0x0801c819
 801c7c8:	0801c795 	.word	0x0801c795
 801c7cc:	0801c795 	.word	0x0801c795
 801c7d0:	0801c795 	.word	0x0801c795
 801c7d4:	0801c795 	.word	0x0801c795
 801c7d8:	0801c925 	.word	0x0801c925
 801c7dc:	0801c849 	.word	0x0801c849
 801c7e0:	0801c907 	.word	0x0801c907
 801c7e4:	0801c795 	.word	0x0801c795
 801c7e8:	0801c795 	.word	0x0801c795
 801c7ec:	0801c947 	.word	0x0801c947
 801c7f0:	0801c795 	.word	0x0801c795
 801c7f4:	0801c849 	.word	0x0801c849
 801c7f8:	0801c795 	.word	0x0801c795
 801c7fc:	0801c795 	.word	0x0801c795
 801c800:	0801c90f 	.word	0x0801c90f
 801c804:	680b      	ldr	r3, [r1, #0]
 801c806:	1d1a      	adds	r2, r3, #4
 801c808:	681b      	ldr	r3, [r3, #0]
 801c80a:	600a      	str	r2, [r1, #0]
 801c80c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c814:	2301      	movs	r3, #1
 801c816:	e0a3      	b.n	801c960 <_printf_i+0x1f4>
 801c818:	6825      	ldr	r5, [r4, #0]
 801c81a:	6808      	ldr	r0, [r1, #0]
 801c81c:	062e      	lsls	r6, r5, #24
 801c81e:	f100 0304 	add.w	r3, r0, #4
 801c822:	d50a      	bpl.n	801c83a <_printf_i+0xce>
 801c824:	6805      	ldr	r5, [r0, #0]
 801c826:	600b      	str	r3, [r1, #0]
 801c828:	2d00      	cmp	r5, #0
 801c82a:	da03      	bge.n	801c834 <_printf_i+0xc8>
 801c82c:	232d      	movs	r3, #45	; 0x2d
 801c82e:	426d      	negs	r5, r5
 801c830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c834:	485e      	ldr	r0, [pc, #376]	; (801c9b0 <_printf_i+0x244>)
 801c836:	230a      	movs	r3, #10
 801c838:	e019      	b.n	801c86e <_printf_i+0x102>
 801c83a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801c83e:	6805      	ldr	r5, [r0, #0]
 801c840:	600b      	str	r3, [r1, #0]
 801c842:	bf18      	it	ne
 801c844:	b22d      	sxthne	r5, r5
 801c846:	e7ef      	b.n	801c828 <_printf_i+0xbc>
 801c848:	680b      	ldr	r3, [r1, #0]
 801c84a:	6825      	ldr	r5, [r4, #0]
 801c84c:	1d18      	adds	r0, r3, #4
 801c84e:	6008      	str	r0, [r1, #0]
 801c850:	0628      	lsls	r0, r5, #24
 801c852:	d501      	bpl.n	801c858 <_printf_i+0xec>
 801c854:	681d      	ldr	r5, [r3, #0]
 801c856:	e002      	b.n	801c85e <_printf_i+0xf2>
 801c858:	0669      	lsls	r1, r5, #25
 801c85a:	d5fb      	bpl.n	801c854 <_printf_i+0xe8>
 801c85c:	881d      	ldrh	r5, [r3, #0]
 801c85e:	4854      	ldr	r0, [pc, #336]	; (801c9b0 <_printf_i+0x244>)
 801c860:	2f6f      	cmp	r7, #111	; 0x6f
 801c862:	bf0c      	ite	eq
 801c864:	2308      	moveq	r3, #8
 801c866:	230a      	movne	r3, #10
 801c868:	2100      	movs	r1, #0
 801c86a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c86e:	6866      	ldr	r6, [r4, #4]
 801c870:	60a6      	str	r6, [r4, #8]
 801c872:	2e00      	cmp	r6, #0
 801c874:	bfa2      	ittt	ge
 801c876:	6821      	ldrge	r1, [r4, #0]
 801c878:	f021 0104 	bicge.w	r1, r1, #4
 801c87c:	6021      	strge	r1, [r4, #0]
 801c87e:	b90d      	cbnz	r5, 801c884 <_printf_i+0x118>
 801c880:	2e00      	cmp	r6, #0
 801c882:	d04d      	beq.n	801c920 <_printf_i+0x1b4>
 801c884:	4616      	mov	r6, r2
 801c886:	fbb5 f1f3 	udiv	r1, r5, r3
 801c88a:	fb03 5711 	mls	r7, r3, r1, r5
 801c88e:	5dc7      	ldrb	r7, [r0, r7]
 801c890:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c894:	462f      	mov	r7, r5
 801c896:	42bb      	cmp	r3, r7
 801c898:	460d      	mov	r5, r1
 801c89a:	d9f4      	bls.n	801c886 <_printf_i+0x11a>
 801c89c:	2b08      	cmp	r3, #8
 801c89e:	d10b      	bne.n	801c8b8 <_printf_i+0x14c>
 801c8a0:	6823      	ldr	r3, [r4, #0]
 801c8a2:	07df      	lsls	r7, r3, #31
 801c8a4:	d508      	bpl.n	801c8b8 <_printf_i+0x14c>
 801c8a6:	6923      	ldr	r3, [r4, #16]
 801c8a8:	6861      	ldr	r1, [r4, #4]
 801c8aa:	4299      	cmp	r1, r3
 801c8ac:	bfde      	ittt	le
 801c8ae:	2330      	movle	r3, #48	; 0x30
 801c8b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c8b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c8b8:	1b92      	subs	r2, r2, r6
 801c8ba:	6122      	str	r2, [r4, #16]
 801c8bc:	f8cd a000 	str.w	sl, [sp]
 801c8c0:	464b      	mov	r3, r9
 801c8c2:	aa03      	add	r2, sp, #12
 801c8c4:	4621      	mov	r1, r4
 801c8c6:	4640      	mov	r0, r8
 801c8c8:	f7ff fee2 	bl	801c690 <_printf_common>
 801c8cc:	3001      	adds	r0, #1
 801c8ce:	d14c      	bne.n	801c96a <_printf_i+0x1fe>
 801c8d0:	f04f 30ff 	mov.w	r0, #4294967295
 801c8d4:	b004      	add	sp, #16
 801c8d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c8da:	4835      	ldr	r0, [pc, #212]	; (801c9b0 <_printf_i+0x244>)
 801c8dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c8e0:	6823      	ldr	r3, [r4, #0]
 801c8e2:	680e      	ldr	r6, [r1, #0]
 801c8e4:	061f      	lsls	r7, r3, #24
 801c8e6:	f856 5b04 	ldr.w	r5, [r6], #4
 801c8ea:	600e      	str	r6, [r1, #0]
 801c8ec:	d514      	bpl.n	801c918 <_printf_i+0x1ac>
 801c8ee:	07d9      	lsls	r1, r3, #31
 801c8f0:	bf44      	itt	mi
 801c8f2:	f043 0320 	orrmi.w	r3, r3, #32
 801c8f6:	6023      	strmi	r3, [r4, #0]
 801c8f8:	b91d      	cbnz	r5, 801c902 <_printf_i+0x196>
 801c8fa:	6823      	ldr	r3, [r4, #0]
 801c8fc:	f023 0320 	bic.w	r3, r3, #32
 801c900:	6023      	str	r3, [r4, #0]
 801c902:	2310      	movs	r3, #16
 801c904:	e7b0      	b.n	801c868 <_printf_i+0xfc>
 801c906:	6823      	ldr	r3, [r4, #0]
 801c908:	f043 0320 	orr.w	r3, r3, #32
 801c90c:	6023      	str	r3, [r4, #0]
 801c90e:	2378      	movs	r3, #120	; 0x78
 801c910:	4828      	ldr	r0, [pc, #160]	; (801c9b4 <_printf_i+0x248>)
 801c912:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c916:	e7e3      	b.n	801c8e0 <_printf_i+0x174>
 801c918:	065e      	lsls	r6, r3, #25
 801c91a:	bf48      	it	mi
 801c91c:	b2ad      	uxthmi	r5, r5
 801c91e:	e7e6      	b.n	801c8ee <_printf_i+0x182>
 801c920:	4616      	mov	r6, r2
 801c922:	e7bb      	b.n	801c89c <_printf_i+0x130>
 801c924:	680b      	ldr	r3, [r1, #0]
 801c926:	6826      	ldr	r6, [r4, #0]
 801c928:	6960      	ldr	r0, [r4, #20]
 801c92a:	1d1d      	adds	r5, r3, #4
 801c92c:	600d      	str	r5, [r1, #0]
 801c92e:	0635      	lsls	r5, r6, #24
 801c930:	681b      	ldr	r3, [r3, #0]
 801c932:	d501      	bpl.n	801c938 <_printf_i+0x1cc>
 801c934:	6018      	str	r0, [r3, #0]
 801c936:	e002      	b.n	801c93e <_printf_i+0x1d2>
 801c938:	0671      	lsls	r1, r6, #25
 801c93a:	d5fb      	bpl.n	801c934 <_printf_i+0x1c8>
 801c93c:	8018      	strh	r0, [r3, #0]
 801c93e:	2300      	movs	r3, #0
 801c940:	6123      	str	r3, [r4, #16]
 801c942:	4616      	mov	r6, r2
 801c944:	e7ba      	b.n	801c8bc <_printf_i+0x150>
 801c946:	680b      	ldr	r3, [r1, #0]
 801c948:	1d1a      	adds	r2, r3, #4
 801c94a:	600a      	str	r2, [r1, #0]
 801c94c:	681e      	ldr	r6, [r3, #0]
 801c94e:	6862      	ldr	r2, [r4, #4]
 801c950:	2100      	movs	r1, #0
 801c952:	4630      	mov	r0, r6
 801c954:	f7f3 fc54 	bl	8010200 <memchr>
 801c958:	b108      	cbz	r0, 801c95e <_printf_i+0x1f2>
 801c95a:	1b80      	subs	r0, r0, r6
 801c95c:	6060      	str	r0, [r4, #4]
 801c95e:	6863      	ldr	r3, [r4, #4]
 801c960:	6123      	str	r3, [r4, #16]
 801c962:	2300      	movs	r3, #0
 801c964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c968:	e7a8      	b.n	801c8bc <_printf_i+0x150>
 801c96a:	6923      	ldr	r3, [r4, #16]
 801c96c:	4632      	mov	r2, r6
 801c96e:	4649      	mov	r1, r9
 801c970:	4640      	mov	r0, r8
 801c972:	47d0      	blx	sl
 801c974:	3001      	adds	r0, #1
 801c976:	d0ab      	beq.n	801c8d0 <_printf_i+0x164>
 801c978:	6823      	ldr	r3, [r4, #0]
 801c97a:	079b      	lsls	r3, r3, #30
 801c97c:	d413      	bmi.n	801c9a6 <_printf_i+0x23a>
 801c97e:	68e0      	ldr	r0, [r4, #12]
 801c980:	9b03      	ldr	r3, [sp, #12]
 801c982:	4298      	cmp	r0, r3
 801c984:	bfb8      	it	lt
 801c986:	4618      	movlt	r0, r3
 801c988:	e7a4      	b.n	801c8d4 <_printf_i+0x168>
 801c98a:	2301      	movs	r3, #1
 801c98c:	4632      	mov	r2, r6
 801c98e:	4649      	mov	r1, r9
 801c990:	4640      	mov	r0, r8
 801c992:	47d0      	blx	sl
 801c994:	3001      	adds	r0, #1
 801c996:	d09b      	beq.n	801c8d0 <_printf_i+0x164>
 801c998:	3501      	adds	r5, #1
 801c99a:	68e3      	ldr	r3, [r4, #12]
 801c99c:	9903      	ldr	r1, [sp, #12]
 801c99e:	1a5b      	subs	r3, r3, r1
 801c9a0:	42ab      	cmp	r3, r5
 801c9a2:	dcf2      	bgt.n	801c98a <_printf_i+0x21e>
 801c9a4:	e7eb      	b.n	801c97e <_printf_i+0x212>
 801c9a6:	2500      	movs	r5, #0
 801c9a8:	f104 0619 	add.w	r6, r4, #25
 801c9ac:	e7f5      	b.n	801c99a <_printf_i+0x22e>
 801c9ae:	bf00      	nop
 801c9b0:	080206f1 	.word	0x080206f1
 801c9b4:	08020702 	.word	0x08020702

0801c9b8 <_sbrk_r>:
 801c9b8:	b538      	push	{r3, r4, r5, lr}
 801c9ba:	4d06      	ldr	r5, [pc, #24]	; (801c9d4 <_sbrk_r+0x1c>)
 801c9bc:	2300      	movs	r3, #0
 801c9be:	4604      	mov	r4, r0
 801c9c0:	4608      	mov	r0, r1
 801c9c2:	602b      	str	r3, [r5, #0]
 801c9c4:	f7f4 f84a 	bl	8010a5c <_sbrk>
 801c9c8:	1c43      	adds	r3, r0, #1
 801c9ca:	d102      	bne.n	801c9d2 <_sbrk_r+0x1a>
 801c9cc:	682b      	ldr	r3, [r5, #0]
 801c9ce:	b103      	cbz	r3, 801c9d2 <_sbrk_r+0x1a>
 801c9d0:	6023      	str	r3, [r4, #0]
 801c9d2:	bd38      	pop	{r3, r4, r5, pc}
 801c9d4:	2000726c 	.word	0x2000726c

0801c9d8 <__sread>:
 801c9d8:	b510      	push	{r4, lr}
 801c9da:	460c      	mov	r4, r1
 801c9dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c9e0:	f000 f8a8 	bl	801cb34 <_read_r>
 801c9e4:	2800      	cmp	r0, #0
 801c9e6:	bfab      	itete	ge
 801c9e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c9ea:	89a3      	ldrhlt	r3, [r4, #12]
 801c9ec:	181b      	addge	r3, r3, r0
 801c9ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c9f2:	bfac      	ite	ge
 801c9f4:	6563      	strge	r3, [r4, #84]	; 0x54
 801c9f6:	81a3      	strhlt	r3, [r4, #12]
 801c9f8:	bd10      	pop	{r4, pc}

0801c9fa <__swrite>:
 801c9fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c9fe:	461f      	mov	r7, r3
 801ca00:	898b      	ldrh	r3, [r1, #12]
 801ca02:	05db      	lsls	r3, r3, #23
 801ca04:	4605      	mov	r5, r0
 801ca06:	460c      	mov	r4, r1
 801ca08:	4616      	mov	r6, r2
 801ca0a:	d505      	bpl.n	801ca18 <__swrite+0x1e>
 801ca0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ca10:	2302      	movs	r3, #2
 801ca12:	2200      	movs	r2, #0
 801ca14:	f000 f870 	bl	801caf8 <_lseek_r>
 801ca18:	89a3      	ldrh	r3, [r4, #12]
 801ca1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ca1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ca22:	81a3      	strh	r3, [r4, #12]
 801ca24:	4632      	mov	r2, r6
 801ca26:	463b      	mov	r3, r7
 801ca28:	4628      	mov	r0, r5
 801ca2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ca2e:	f000 b817 	b.w	801ca60 <_write_r>

0801ca32 <__sseek>:
 801ca32:	b510      	push	{r4, lr}
 801ca34:	460c      	mov	r4, r1
 801ca36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ca3a:	f000 f85d 	bl	801caf8 <_lseek_r>
 801ca3e:	1c43      	adds	r3, r0, #1
 801ca40:	89a3      	ldrh	r3, [r4, #12]
 801ca42:	bf15      	itete	ne
 801ca44:	6560      	strne	r0, [r4, #84]	; 0x54
 801ca46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ca4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ca4e:	81a3      	strheq	r3, [r4, #12]
 801ca50:	bf18      	it	ne
 801ca52:	81a3      	strhne	r3, [r4, #12]
 801ca54:	bd10      	pop	{r4, pc}

0801ca56 <__sclose>:
 801ca56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ca5a:	f000 b81b 	b.w	801ca94 <_close_r>
	...

0801ca60 <_write_r>:
 801ca60:	b538      	push	{r3, r4, r5, lr}
 801ca62:	4d07      	ldr	r5, [pc, #28]	; (801ca80 <_write_r+0x20>)
 801ca64:	4604      	mov	r4, r0
 801ca66:	4608      	mov	r0, r1
 801ca68:	4611      	mov	r1, r2
 801ca6a:	2200      	movs	r2, #0
 801ca6c:	602a      	str	r2, [r5, #0]
 801ca6e:	461a      	mov	r2, r3
 801ca70:	f7f3 ffda 	bl	8010a28 <_write>
 801ca74:	1c43      	adds	r3, r0, #1
 801ca76:	d102      	bne.n	801ca7e <_write_r+0x1e>
 801ca78:	682b      	ldr	r3, [r5, #0]
 801ca7a:	b103      	cbz	r3, 801ca7e <_write_r+0x1e>
 801ca7c:	6023      	str	r3, [r4, #0]
 801ca7e:	bd38      	pop	{r3, r4, r5, pc}
 801ca80:	2000726c 	.word	0x2000726c

0801ca84 <abort>:
 801ca84:	b508      	push	{r3, lr}
 801ca86:	2006      	movs	r0, #6
 801ca88:	f000 f88e 	bl	801cba8 <raise>
 801ca8c:	2001      	movs	r0, #1
 801ca8e:	f7f3 ffb5 	bl	80109fc <_exit>
	...

0801ca94 <_close_r>:
 801ca94:	b538      	push	{r3, r4, r5, lr}
 801ca96:	4d06      	ldr	r5, [pc, #24]	; (801cab0 <_close_r+0x1c>)
 801ca98:	2300      	movs	r3, #0
 801ca9a:	4604      	mov	r4, r0
 801ca9c:	4608      	mov	r0, r1
 801ca9e:	602b      	str	r3, [r5, #0]
 801caa0:	f7f3 ffd0 	bl	8010a44 <_close>
 801caa4:	1c43      	adds	r3, r0, #1
 801caa6:	d102      	bne.n	801caae <_close_r+0x1a>
 801caa8:	682b      	ldr	r3, [r5, #0]
 801caaa:	b103      	cbz	r3, 801caae <_close_r+0x1a>
 801caac:	6023      	str	r3, [r4, #0]
 801caae:	bd38      	pop	{r3, r4, r5, pc}
 801cab0:	2000726c 	.word	0x2000726c

0801cab4 <_fstat_r>:
 801cab4:	b538      	push	{r3, r4, r5, lr}
 801cab6:	4d07      	ldr	r5, [pc, #28]	; (801cad4 <_fstat_r+0x20>)
 801cab8:	2300      	movs	r3, #0
 801caba:	4604      	mov	r4, r0
 801cabc:	4608      	mov	r0, r1
 801cabe:	4611      	mov	r1, r2
 801cac0:	602b      	str	r3, [r5, #0]
 801cac2:	f7f3 ffc2 	bl	8010a4a <_fstat>
 801cac6:	1c43      	adds	r3, r0, #1
 801cac8:	d102      	bne.n	801cad0 <_fstat_r+0x1c>
 801caca:	682b      	ldr	r3, [r5, #0]
 801cacc:	b103      	cbz	r3, 801cad0 <_fstat_r+0x1c>
 801cace:	6023      	str	r3, [r4, #0]
 801cad0:	bd38      	pop	{r3, r4, r5, pc}
 801cad2:	bf00      	nop
 801cad4:	2000726c 	.word	0x2000726c

0801cad8 <_isatty_r>:
 801cad8:	b538      	push	{r3, r4, r5, lr}
 801cada:	4d06      	ldr	r5, [pc, #24]	; (801caf4 <_isatty_r+0x1c>)
 801cadc:	2300      	movs	r3, #0
 801cade:	4604      	mov	r4, r0
 801cae0:	4608      	mov	r0, r1
 801cae2:	602b      	str	r3, [r5, #0]
 801cae4:	f7f3 ffb6 	bl	8010a54 <_isatty>
 801cae8:	1c43      	adds	r3, r0, #1
 801caea:	d102      	bne.n	801caf2 <_isatty_r+0x1a>
 801caec:	682b      	ldr	r3, [r5, #0]
 801caee:	b103      	cbz	r3, 801caf2 <_isatty_r+0x1a>
 801caf0:	6023      	str	r3, [r4, #0]
 801caf2:	bd38      	pop	{r3, r4, r5, pc}
 801caf4:	2000726c 	.word	0x2000726c

0801caf8 <_lseek_r>:
 801caf8:	b538      	push	{r3, r4, r5, lr}
 801cafa:	4d07      	ldr	r5, [pc, #28]	; (801cb18 <_lseek_r+0x20>)
 801cafc:	4604      	mov	r4, r0
 801cafe:	4608      	mov	r0, r1
 801cb00:	4611      	mov	r1, r2
 801cb02:	2200      	movs	r2, #0
 801cb04:	602a      	str	r2, [r5, #0]
 801cb06:	461a      	mov	r2, r3
 801cb08:	f7f3 ffa6 	bl	8010a58 <_lseek>
 801cb0c:	1c43      	adds	r3, r0, #1
 801cb0e:	d102      	bne.n	801cb16 <_lseek_r+0x1e>
 801cb10:	682b      	ldr	r3, [r5, #0]
 801cb12:	b103      	cbz	r3, 801cb16 <_lseek_r+0x1e>
 801cb14:	6023      	str	r3, [r4, #0]
 801cb16:	bd38      	pop	{r3, r4, r5, pc}
 801cb18:	2000726c 	.word	0x2000726c

0801cb1c <__malloc_lock>:
 801cb1c:	4801      	ldr	r0, [pc, #4]	; (801cb24 <__malloc_lock+0x8>)
 801cb1e:	f7ff bb45 	b.w	801c1ac <__retarget_lock_acquire_recursive>
 801cb22:	bf00      	nop
 801cb24:	20007274 	.word	0x20007274

0801cb28 <__malloc_unlock>:
 801cb28:	4801      	ldr	r0, [pc, #4]	; (801cb30 <__malloc_unlock+0x8>)
 801cb2a:	f7ff bb40 	b.w	801c1ae <__retarget_lock_release_recursive>
 801cb2e:	bf00      	nop
 801cb30:	20007274 	.word	0x20007274

0801cb34 <_read_r>:
 801cb34:	b538      	push	{r3, r4, r5, lr}
 801cb36:	4d07      	ldr	r5, [pc, #28]	; (801cb54 <_read_r+0x20>)
 801cb38:	4604      	mov	r4, r0
 801cb3a:	4608      	mov	r0, r1
 801cb3c:	4611      	mov	r1, r2
 801cb3e:	2200      	movs	r2, #0
 801cb40:	602a      	str	r2, [r5, #0]
 801cb42:	461a      	mov	r2, r3
 801cb44:	f7f3 ff60 	bl	8010a08 <_read>
 801cb48:	1c43      	adds	r3, r0, #1
 801cb4a:	d102      	bne.n	801cb52 <_read_r+0x1e>
 801cb4c:	682b      	ldr	r3, [r5, #0]
 801cb4e:	b103      	cbz	r3, 801cb52 <_read_r+0x1e>
 801cb50:	6023      	str	r3, [r4, #0]
 801cb52:	bd38      	pop	{r3, r4, r5, pc}
 801cb54:	2000726c 	.word	0x2000726c

0801cb58 <_raise_r>:
 801cb58:	291f      	cmp	r1, #31
 801cb5a:	b538      	push	{r3, r4, r5, lr}
 801cb5c:	4604      	mov	r4, r0
 801cb5e:	460d      	mov	r5, r1
 801cb60:	d904      	bls.n	801cb6c <_raise_r+0x14>
 801cb62:	2316      	movs	r3, #22
 801cb64:	6003      	str	r3, [r0, #0]
 801cb66:	f04f 30ff 	mov.w	r0, #4294967295
 801cb6a:	bd38      	pop	{r3, r4, r5, pc}
 801cb6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801cb6e:	b112      	cbz	r2, 801cb76 <_raise_r+0x1e>
 801cb70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cb74:	b94b      	cbnz	r3, 801cb8a <_raise_r+0x32>
 801cb76:	4620      	mov	r0, r4
 801cb78:	f000 f830 	bl	801cbdc <_getpid_r>
 801cb7c:	462a      	mov	r2, r5
 801cb7e:	4601      	mov	r1, r0
 801cb80:	4620      	mov	r0, r4
 801cb82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cb86:	f000 b817 	b.w	801cbb8 <_kill_r>
 801cb8a:	2b01      	cmp	r3, #1
 801cb8c:	d00a      	beq.n	801cba4 <_raise_r+0x4c>
 801cb8e:	1c59      	adds	r1, r3, #1
 801cb90:	d103      	bne.n	801cb9a <_raise_r+0x42>
 801cb92:	2316      	movs	r3, #22
 801cb94:	6003      	str	r3, [r0, #0]
 801cb96:	2001      	movs	r0, #1
 801cb98:	e7e7      	b.n	801cb6a <_raise_r+0x12>
 801cb9a:	2400      	movs	r4, #0
 801cb9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cba0:	4628      	mov	r0, r5
 801cba2:	4798      	blx	r3
 801cba4:	2000      	movs	r0, #0
 801cba6:	e7e0      	b.n	801cb6a <_raise_r+0x12>

0801cba8 <raise>:
 801cba8:	4b02      	ldr	r3, [pc, #8]	; (801cbb4 <raise+0xc>)
 801cbaa:	4601      	mov	r1, r0
 801cbac:	6818      	ldr	r0, [r3, #0]
 801cbae:	f7ff bfd3 	b.w	801cb58 <_raise_r>
 801cbb2:	bf00      	nop
 801cbb4:	20000014 	.word	0x20000014

0801cbb8 <_kill_r>:
 801cbb8:	b538      	push	{r3, r4, r5, lr}
 801cbba:	4d07      	ldr	r5, [pc, #28]	; (801cbd8 <_kill_r+0x20>)
 801cbbc:	2300      	movs	r3, #0
 801cbbe:	4604      	mov	r4, r0
 801cbc0:	4608      	mov	r0, r1
 801cbc2:	4611      	mov	r1, r2
 801cbc4:	602b      	str	r3, [r5, #0]
 801cbc6:	f7f3 ff11 	bl	80109ec <_kill>
 801cbca:	1c43      	adds	r3, r0, #1
 801cbcc:	d102      	bne.n	801cbd4 <_kill_r+0x1c>
 801cbce:	682b      	ldr	r3, [r5, #0]
 801cbd0:	b103      	cbz	r3, 801cbd4 <_kill_r+0x1c>
 801cbd2:	6023      	str	r3, [r4, #0]
 801cbd4:	bd38      	pop	{r3, r4, r5, pc}
 801cbd6:	bf00      	nop
 801cbd8:	2000726c 	.word	0x2000726c

0801cbdc <_getpid_r>:
 801cbdc:	f7f3 bf04 	b.w	80109e8 <_getpid>

0801cbe0 <_init>:
 801cbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbe2:	bf00      	nop
 801cbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cbe6:	bc08      	pop	{r3}
 801cbe8:	469e      	mov	lr, r3
 801cbea:	4770      	bx	lr

0801cbec <_fini>:
 801cbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbee:	bf00      	nop
 801cbf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cbf2:	bc08      	pop	{r3}
 801cbf4:	469e      	mov	lr, r3
 801cbf6:	4770      	bx	lr
