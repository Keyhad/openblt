
openblt_discovery_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  080060e0  080060e0  000160e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006948  08006948  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006948  08006948  00016948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006950  08006950  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006950  08006950  00016950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006954  08006954  00016954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010d0  200001e0  08006b38  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200012b0  08006b38  000212b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169d3  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d31  00000000  00000000  00036be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c0  00000000  00000000  0003a918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f38  00000000  00000000  0003b9d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002529f  00000000  00000000  0003c910  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fdf9  00000000  00000000  00061baf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d70c6  00000000  00000000  000719a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00148a6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cac  00000000  00000000  00148aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000c7b6  00000000  00000000  0014b798  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e0 	.word	0x200001e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080060c8 	.word	0x080060c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e4 	.word	0x200001e4
 80001c4:	080060c8 	.word	0x080060c8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <AppInit>:
**            software program initialization.
** \return    none.
**
****************************************************************************************/
void AppInit(void)
{
 80004c8:	b508      	push	{r3, lr}
  /* initialize the bootloader */
  BootInit();
 80004ca:	f002 ff09 	bl	80032e0 <BootInit>
} /*** end of AppInit ***/
 80004ce:	bd08      	pop	{r3, pc}

080004d0 <AppTask>:
**            in the program loop.
** \return    none.
**
****************************************************************************************/
void AppTask(void)
{
 80004d0:	b508      	push	{r3, lr}
  /* Run the bootloader task. */
  BootTask();
 80004d2:	f002 ff15 	bl	8003300 <BootTask>
} /*** end of AppTask ***/
 80004d6:	bd08      	pop	{r3, pc}

080004d8 <CpuUserProgramStartHook>:
** \return    BLT_TRUE if it is okay to start the user program, BLT_FALSE to keep
**            keep the bootloader active.
**
****************************************************************************************/
blt_bool CpuUserProgramStartHook(void)
{
 80004d8:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80004da:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <CpuUserProgramStartHook+0x18>)
 80004dc:	691b      	ldr	r3, [r3, #16]
  /* additional and optional backdoor entry through the pushbutton on the board. to
   * force the bootloader to stay active after reset, keep it pressed during reset.
   */
  if (LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_0) != 0)
 80004de:	f013 0f01 	tst.w	r3, #1
 80004e2:	d001      	beq.n	80004e8 <CpuUserProgramStartHook+0x10>
  {
    /* pushbutton pressed, so do not start the user program and keep the
     * bootloader active instead.
     */
    return BLT_FALSE;
 80004e4:	2000      	movs	r0, #0
  /* clean up the LED driver */
  LedBlinkExit();

  /* okay to start the user program */
  return BLT_TRUE;
} /*** end of CpuUserProgramStartHook ***/
 80004e6:	bd08      	pop	{r3, pc}
  LedBlinkExit();
 80004e8:	f000 f8e4 	bl	80006b4 <LedBlinkExit>
  return BLT_TRUE;
 80004ec:	2001      	movs	r0, #1
 80004ee:	e7fa      	b.n	80004e6 <CpuUserProgramStartHook+0xe>
 80004f0:	40020000 	.word	0x40020000

080004f4 <CopInitHook>:
**            watchdog.
** \return    none.
**
****************************************************************************************/
void CopInitHook(void)
{
 80004f4:	b508      	push	{r3, lr}
  /* this function is called upon initialization. might as well use it to initialize
   * the LED driver. It is kind of a visual watchdog anyways.
   */
  LedBlinkInit(100);
 80004f6:	2064      	movs	r0, #100	; 0x64
 80004f8:	f000 f8ac 	bl	8000654 <LedBlinkInit>
} /*** end of CopInitHook ***/
 80004fc:	bd08      	pop	{r3, pc}

080004fe <CopServiceHook>:
**            the watchdog to prevent a watchdog reset.
** \return    none.
**
****************************************************************************************/
void CopServiceHook(void)
{
 80004fe:	b508      	push	{r3, lr}
  /* run the LED blink task. this is a better place to do it than in the main() program
   * loop. certain operations such as flash erase can take a long time, which would cause
   * a blink interval to be skipped. this function is also called during such operations,
   * so no blink intervals will be skipped when calling the LED blink task here.
   */
  LedBlinkTask();
 8000500:	f000 f8ae 	bl	8000660 <LedBlinkTask>
} /*** end of CopServiceHook ***/
 8000504:	bd08      	pop	{r3, pc}
	...

08000508 <FileIsFirmwareUpdateRequestedHook>:
**            storage, etc.
** \return    BLT_TRUE if a firmware update is requested, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FileIsFirmwareUpdateRequestedHook(void)
{
 8000508:	b500      	push	{lr}
 800050a:	b0c7      	sub	sp, #284	; 0x11c
  FILINFO fileInfoObject = { 0 }; /* needs to be zeroed according to f_stat docs */;
 800050c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8000510:	2100      	movs	r1, #0
 8000512:	4668      	mov	r0, sp
 8000514:	f005 fdc2 	bl	800609c <memset>
   * update is started. When successfully completed, the firmware file is deleted.
   * During the firmware update, progress information is written to a file called
   * bootlog.txt and additionally outputted on UART @57600 bps for debugging purposes.
   */
  /* check if firmware file is present and SD-card is accessible */
  if (f_stat(firmwareFilename, &fileInfoObject) == FR_OK) 
 8000518:	4669      	mov	r1, sp
 800051a:	4809      	ldr	r0, [pc, #36]	; (8000540 <FileIsFirmwareUpdateRequestedHook+0x38>)
 800051c:	f005 fc36 	bl	8005d8c <f_stat>
 8000520:	b940      	cbnz	r0, 8000534 <FileIsFirmwareUpdateRequestedHook+0x2c>
  {
    /* check if the filesize is valid and that it is not a directory */
    if ( (fileInfoObject.fsize > 0) && (!(fileInfoObject.fattrib & AM_DIR)) )
 8000522:	9b00      	ldr	r3, [sp, #0]
 8000524:	b153      	cbz	r3, 800053c <FileIsFirmwareUpdateRequestedHook+0x34>
 8000526:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800052a:	f013 0f10 	tst.w	r3, #16
 800052e:	d102      	bne.n	8000536 <FileIsFirmwareUpdateRequestedHook+0x2e>
    {
      /* all conditions are met to start a firmware update from local file storage */
      return BLT_TRUE;
 8000530:	2001      	movs	r0, #1
 8000532:	e000      	b.n	8000536 <FileIsFirmwareUpdateRequestedHook+0x2e>
    }
  }
  /* still here so no firmware update request is pending */  
  return BLT_FALSE;
 8000534:	2000      	movs	r0, #0
} /*** end of FileIsFirmwareUpdateRequestedHook ***/
 8000536:	b047      	add	sp, #284	; 0x11c
 8000538:	f85d fb04 	ldr.w	pc, [sp], #4
  return BLT_FALSE;
 800053c:	2000      	movs	r0, #0
 800053e:	e7fa      	b.n	8000536 <FileIsFirmwareUpdateRequestedHook+0x2e>
 8000540:	080060f0 	.word	0x080060f0

08000544 <FileGetFirmwareFilenameHook>:
**
****************************************************************************************/
const blt_char *FileGetFirmwareFilenameHook(void)
{
  return firmwareFilename;
} /*** end of FileGetFirmwareFilenameHook ***/
 8000544:	4800      	ldr	r0, [pc, #0]	; (8000548 <FileGetFirmwareFilenameHook+0x4>)
 8000546:	4770      	bx	lr
 8000548:	080060f0 	.word	0x080060f0

0800054c <FileFirmwareUpdateStartedHook>:
**            update from local storage just started. 
** \return    none.
**
****************************************************************************************/
void FileFirmwareUpdateStartedHook(void)
{
 800054c:	b508      	push	{r3, lr}
  #if (BOOT_FILE_LOGGING_ENABLE > 0)
  /* create/overwrite the logfile */
  logfile.canUse = BLT_FALSE;
 800054e:	4807      	ldr	r0, [pc, #28]	; (800056c <FileFirmwareUpdateStartedHook+0x20>)
 8000550:	2300      	movs	r3, #0
 8000552:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  if (f_open(&logfile.handle, "/bootlog.txt", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8000556:	220a      	movs	r2, #10
 8000558:	4905      	ldr	r1, [pc, #20]	; (8000570 <FileFirmwareUpdateStartedHook+0x24>)
 800055a:	f005 f87d 	bl	8005658 <f_open>
 800055e:	b918      	cbnz	r0, 8000568 <FileFirmwareUpdateStartedHook+0x1c>
  {
    logfile.canUse = BLT_TRUE;
 8000560:	4b02      	ldr	r3, [pc, #8]	; (800056c <FileFirmwareUpdateStartedHook+0x20>)
 8000562:	2201      	movs	r2, #1
 8000564:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  }
  #endif
} /*** end of FileFirmwareUpdateStartedHook ***/
 8000568:	bd08      	pop	{r3, pc}
 800056a:	bf00      	nop
 800056c:	200001fc 	.word	0x200001fc
 8000570:	080060e0 	.word	0x080060e0

08000574 <FileFirmwareUpdateCompletedHook>:
**            update was successfully completed.
** \return    none.
**
****************************************************************************************/
void FileFirmwareUpdateCompletedHook(void)
{
 8000574:	b510      	push	{r4, lr}
  #if (BOOT_FILE_LOGGING_ENABLE > 0)
  blt_int32u timeoutTime;

  /* close the log file */
  if (logfile.canUse == BLT_TRUE)
 8000576:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <FileFirmwareUpdateCompletedHook+0x38>)
 8000578:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800057c:	2b01      	cmp	r3, #1
 800057e:	d010      	beq.n	80005a2 <FileFirmwareUpdateCompletedHook+0x2e>
    f_close(&logfile.handle);
  }
  /* wait for all logging related transmission to complete with a maximum wait time of
   * 100ms.
   */
  timeoutTime = TimerGet() + 100;
 8000580:	f002 fe5a 	bl	8003238 <TimerGet>
 8000584:	f100 0464 	add.w	r4, r0, #100	; 0x64
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <FileFirmwareUpdateCompletedHook+0x3c>)
 800058a:	681b      	ldr	r3, [r3, #0]
  while (LL_USART_IsActiveFlag_TC(USART6) == 0)
 800058c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000590:	d103      	bne.n	800059a <FileFirmwareUpdateCompletedHook+0x26>
  {
    /* check for timeout */
    if (TimerGet() > timeoutTime)
 8000592:	f002 fe51 	bl	8003238 <TimerGet>
 8000596:	42a0      	cmp	r0, r4
 8000598:	d9f6      	bls.n	8000588 <FileFirmwareUpdateCompletedHook+0x14>
      break;
    }
  }
  #endif
  /* now delete the firmware file from the disk since the update was successful */
  f_unlink(firmwareFilename);
 800059a:	4806      	ldr	r0, [pc, #24]	; (80005b4 <FileFirmwareUpdateCompletedHook+0x40>)
 800059c:	f005 fc20 	bl	8005de0 <f_unlink>
} /*** end of FileFirmwareUpdateCompletedHook ***/
 80005a0:	bd10      	pop	{r4, pc}
    f_close(&logfile.handle);
 80005a2:	4802      	ldr	r0, [pc, #8]	; (80005ac <FileFirmwareUpdateCompletedHook+0x38>)
 80005a4:	f005 fb24 	bl	8005bf0 <f_close>
 80005a8:	e7ea      	b.n	8000580 <FileFirmwareUpdateCompletedHook+0xc>
 80005aa:	bf00      	nop
 80005ac:	200001fc 	.word	0x200001fc
 80005b0:	40011400 	.word	0x40011400
 80005b4:	080060f0 	.word	0x080060f0

080005b8 <FileFirmwareUpdateErrorHook>:
**            update. Refer to <file.h> for a list of available error codes.
** \return    none.
**
****************************************************************************************/
void FileFirmwareUpdateErrorHook(blt_int8u error_code)
{
 80005b8:	b508      	push	{r3, lr}
  #if (BOOT_FILE_LOGGING_ENABLE > 0)
  /* error detected which stops the firmware update, so close the log file */
  if (logfile.canUse == BLT_TRUE)
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <FileFirmwareUpdateErrorHook+0x18>)
 80005bc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d000      	beq.n	80005c6 <FileFirmwareUpdateErrorHook+0xe>
  {
    f_close(&logfile.handle);
  }
  #endif
} /*** end of FileFirmwareUpdateErrorHook ***/
 80005c4:	bd08      	pop	{r3, pc}
    f_close(&logfile.handle);
 80005c6:	4802      	ldr	r0, [pc, #8]	; (80005d0 <FileFirmwareUpdateErrorHook+0x18>)
 80005c8:	f005 fb12 	bl	8005bf0 <f_close>
} /*** end of FileFirmwareUpdateErrorHook ***/
 80005cc:	e7fa      	b.n	80005c4 <FileFirmwareUpdateErrorHook+0xc>
 80005ce:	bf00      	nop
 80005d0:	200001fc 	.word	0x200001fc

080005d4 <FileFirmwareUpdateLogHook>:
** \param     info_string Pointer to a character array with the log entry info.
** \return    none.
**
****************************************************************************************/
void FileFirmwareUpdateLogHook(blt_char *info_string)
{
 80005d4:	b538      	push	{r3, r4, r5, lr}
 80005d6:	4605      	mov	r5, r0
  blt_int32u timeoutTime;

  /* write the string to the log file */
  if (logfile.canUse == BLT_TRUE)
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <FileFirmwareUpdateLogHook+0x54>)
 80005da:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d10c      	bne.n	80005fc <FileFirmwareUpdateLogHook+0x28>
  {
    if (f_puts(info_string, &logfile.handle) < 0)
 80005e2:	4911      	ldr	r1, [pc, #68]	; (8000628 <FileFirmwareUpdateLogHook+0x54>)
 80005e4:	f005 fc84 	bl	8005ef0 <f_puts>
 80005e8:	2800      	cmp	r0, #0
 80005ea:	da07      	bge.n	80005fc <FileFirmwareUpdateLogHook+0x28>
    {
      logfile.canUse = BLT_FALSE;
 80005ec:	480e      	ldr	r0, [pc, #56]	; (8000628 <FileFirmwareUpdateLogHook+0x54>)
 80005ee:	2300      	movs	r3, #0
 80005f0:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
      f_close(&logfile.handle);
 80005f4:	f005 fafc 	bl	8005bf0 <f_close>
 80005f8:	e000      	b.n	80005fc <FileFirmwareUpdateLogHook+0x28>
      {
        break;
      }
    }
    /* point to the next character in the string */
    info_string++;
 80005fa:	3501      	adds	r5, #1
  while(*info_string != '\0')
 80005fc:	782b      	ldrb	r3, [r5, #0]
 80005fe:	b18b      	cbz	r3, 8000624 <FileFirmwareUpdateLogHook+0x50>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8000600:	4a0a      	ldr	r2, [pc, #40]	; (800062c <FileFirmwareUpdateLogHook+0x58>)
 8000602:	6053      	str	r3, [r2, #4]
    timeoutTime = TimerGet() + 10;
 8000604:	f002 fe18 	bl	8003238 <TimerGet>
 8000608:	f100 040a 	add.w	r4, r0, #10
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <FileFirmwareUpdateLogHook+0x58>)
 800060e:	681b      	ldr	r3, [r3, #0]
    while (LL_USART_IsActiveFlag_TXE(USART6) == 0)
 8000610:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000614:	d1f1      	bne.n	80005fa <FileFirmwareUpdateLogHook+0x26>
      CopService();
 8000616:	f002 fee5 	bl	80033e4 <CopService>
      if (TimerGet() > timeoutTime)
 800061a:	f002 fe0d 	bl	8003238 <TimerGet>
 800061e:	42a0      	cmp	r0, r4
 8000620:	d9f4      	bls.n	800060c <FileFirmwareUpdateLogHook+0x38>
 8000622:	e7ea      	b.n	80005fa <FileFirmwareUpdateLogHook+0x26>
  }
} /*** end of FileFirmwareUpdateLogHook ***/
 8000624:	bd38      	pop	{r3, r4, r5, pc}
 8000626:	bf00      	nop
 8000628:	200001fc 	.word	0x200001fc
 800062c:	40011400 	.word	0x40011400

08000630 <XcpGetSeedHook>:
**
****************************************************************************************/
blt_int8u XcpGetSeedHook(blt_int8u resource, blt_int8u *seed)
{
  /* request seed for unlocking ProGraMming resource */
  if ((resource & XCP_RES_PGM) != 0)
 8000630:	f010 0f10 	tst.w	r0, #16
 8000634:	d001      	beq.n	800063a <XcpGetSeedHook+0xa>
  {
    seed[0] = 0x55;
 8000636:	2355      	movs	r3, #85	; 0x55
 8000638:	700b      	strb	r3, [r1, #0]
  }

  /* return seed length */
  return 1;
} /*** end of XcpGetSeedHook ***/
 800063a:	2001      	movs	r0, #1
 800063c:	4770      	bx	lr

0800063e <XcpVerifyKeyHook>:
  /* the example key algorithm in "libseednkey.dll" works as follows:
   *  - PGM will be unlocked if key = seed - 1
   */

  /* check key for unlocking ProGraMming resource */
  if ((resource == XCP_RES_PGM) && (key[0] == (0x55-1)))
 800063e:	2810      	cmp	r0, #16
 8000640:	d001      	beq.n	8000646 <XcpVerifyKeyHook+0x8>
    /* correct key received for unlocking PGM resource */
    return 1;
  }

  /* still here so key incorrect */
  return 0;
 8000642:	2000      	movs	r0, #0
 8000644:	4770      	bx	lr
  if ((resource == XCP_RES_PGM) && (key[0] == (0x55-1)))
 8000646:	780b      	ldrb	r3, [r1, #0]
 8000648:	2b54      	cmp	r3, #84	; 0x54
 800064a:	d001      	beq.n	8000650 <XcpVerifyKeyHook+0x12>
  return 0;
 800064c:	2000      	movs	r0, #0
 800064e:	4770      	bx	lr
    return 1;
 8000650:	2001      	movs	r0, #1
} /*** end of XcpVerifyKeyHook ***/
 8000652:	4770      	bx	lr

08000654 <LedBlinkInit>:
**
****************************************************************************************/
void LedBlinkInit(blt_int16u interval_ms)
{
  /* store the interval time between LED toggles */
  ledBlinkIntervalMs = interval_ms;
 8000654:	4b01      	ldr	r3, [pc, #4]	; (800065c <LedBlinkInit+0x8>)
 8000656:	8018      	strh	r0, [r3, #0]
} /*** end of LedBlinkInit ***/
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000428 	.word	0x20000428

08000660 <LedBlinkTask>:
** \brief     Task function for blinking the LED as a fixed timer interval.
** \return    none.
**
****************************************************************************************/
void LedBlinkTask(void)
{
 8000660:	b508      	push	{r3, lr}
  static blt_bool ledOn = BLT_FALSE;
  static blt_int32u nextBlinkEvent = 0;

  /* check for blink event */
  if (TimerGet() >= nextBlinkEvent)
 8000662:	f002 fde9 	bl	8003238 <TimerGet>
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <LedBlinkTask+0x44>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4298      	cmp	r0, r3
 800066c:	d310      	bcc.n	8000690 <LedBlinkTask+0x30>
  {
    /* toggle the LED state */
    if (ledOn == BLT_FALSE)
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <LedBlinkTask+0x48>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	b973      	cbnz	r3, 8000692 <LedBlinkTask+0x32>
    {
      ledOn = BLT_TRUE;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <LedBlinkTask+0x48>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <LedBlinkTask+0x4c>)
 800067c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000680:	619a      	str	r2, [r3, #24]
    {
      ledOn = BLT_FALSE;
      LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
    }
    /* schedule the next blink event */
    nextBlinkEvent = TimerGet() + ledBlinkIntervalMs;
 8000682:	f002 fdd9 	bl	8003238 <TimerGet>
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <LedBlinkTask+0x50>)
 8000688:	881b      	ldrh	r3, [r3, #0]
 800068a:	4418      	add	r0, r3
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <LedBlinkTask+0x44>)
 800068e:	6018      	str	r0, [r3, #0]
  }
} /*** end of LedBlinkTask ***/
 8000690:	bd08      	pop	{r3, pc}
      ledOn = BLT_FALSE;
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <LedBlinkTask+0x48>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000698:	4b04      	ldr	r3, [pc, #16]	; (80006ac <LedBlinkTask+0x4c>)
 800069a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800069e:	619a      	str	r2, [r3, #24]
 80006a0:	e7ef      	b.n	8000682 <LedBlinkTask+0x22>
 80006a2:	bf00      	nop
 80006a4:	2000042c 	.word	0x2000042c
 80006a8:	2000042a 	.word	0x2000042a
 80006ac:	40020800 	.word	0x40020800
 80006b0:	20000428 	.word	0x20000428

080006b4 <LedBlinkExit>:
 80006b4:	4b02      	ldr	r3, [pc, #8]	; (80006c0 <LedBlinkExit+0xc>)
 80006b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006ba:	619a      	str	r2, [r3, #24]
****************************************************************************************/
void LedBlinkExit(void)
{
  /* turn the LED off */
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
} /*** end of LedBlinkExit ***/
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40020800 	.word	0x40020800

080006c4 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	b08d      	sub	sp, #52	; 0x34
{
 80006c8:	2400      	movs	r4, #0
 80006ca:	9408      	str	r4, [sp, #32]
 80006cc:	9409      	str	r4, [sp, #36]	; 0x24
 80006ce:	940a      	str	r4, [sp, #40]	; 0x28
 80006d0:	940b      	str	r4, [sp, #44]	; 0x2c
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <MX_GPIO_Init+0x90>)
 80006d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006d6:	f042 0204 	orr.w	r2, r2, #4
 80006da:	631a      	str	r2, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80006dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006de:	f002 0204 	and.w	r2, r2, #4
 80006e2:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 80006e4:	9a05      	ldr	r2, [sp, #20]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80006e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006ec:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80006ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006f0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80006f4:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80006f6:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80006f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006fa:	f042 0201 	orr.w	r2, r2, #1
 80006fe:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000702:	f002 0201 	and.w	r2, r2, #1
 8000706:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000708:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800070a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800070c:	f042 0208 	orr.w	r2, r2, #8
 8000710:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000714:	f002 0208 	and.w	r2, r2, #8
 8000718:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800071a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800071c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800071e:	f042 0202 	orr.w	r2, r2, #2
 8000722:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800072c:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800072e:	480a      	ldr	r0, [pc, #40]	; (8000758 <MX_GPIO_Init+0x94>)
 8000730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000734:	6183      	str	r3, [r0, #24]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);

  /**/
 8000736:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000738:	2501      	movs	r5, #1
 800073a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800073c:	a906      	add	r1, sp, #24
 800073e:	f001 fbbb 	bl	8001eb8 <LL_GPIO_Init>
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /**/
 8000742:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000744:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000746:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000748:	a906      	add	r1, sp, #24
 800074a:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_GPIO_Init+0x98>)
 800074c:	f001 fbb4 	bl	8001eb8 <LL_GPIO_Init>
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);

 8000750:	b00d      	add	sp, #52	; 0x34
 8000752:	bd30      	pop	{r4, r5, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40020800 	.word	0x40020800
 800075c:	40020000 	.word	0x40020000

08000760 <MX_USART6_UART_Init>:
static void MX_USART6_UART_Init(void)
 8000760:	b510      	push	{r4, lr}
 8000762:	b090      	sub	sp, #64	; 0x40

 8000764:	2400      	movs	r4, #0
 8000766:	9409      	str	r4, [sp, #36]	; 0x24
 8000768:	940a      	str	r4, [sp, #40]	; 0x28
 800076a:	940b      	str	r4, [sp, #44]	; 0x2c
 800076c:	940c      	str	r4, [sp, #48]	; 0x30
 800076e:	940d      	str	r4, [sp, #52]	; 0x34
 8000770:	940e      	str	r4, [sp, #56]	; 0x38
 8000772:	940f      	str	r4, [sp, #60]	; 0x3c

 8000774:	9406      	str	r4, [sp, #24]
 8000776:	9407      	str	r4, [sp, #28]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000778:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <MX_USART6_UART_Init+0x90>)
 800077a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800077c:	f042 0220 	orr.w	r2, r2, #32
 8000780:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000782:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000784:	f002 0220 	and.w	r2, r2, #32
 8000788:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800078a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800078c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800078e:	f042 0204 	orr.w	r2, r2, #4
 8000792:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800079c:	9b01      	ldr	r3, [sp, #4]
  */
 800079e:	23c0      	movs	r3, #192	; 0xc0
 80007a0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80007a2:	2302      	movs	r3, #2
 80007a4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80007a6:	2303      	movs	r3, #3
 80007a8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007aa:	2308      	movs	r3, #8
 80007ac:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80007ae:	a903      	add	r1, sp, #12
 80007b0:	4810      	ldr	r0, [pc, #64]	; (80007f4 <MX_USART6_UART_Init+0x94>)
 80007b2:	f001 fb81 	bl	8001eb8 <LL_GPIO_Init>
  /* USER CODE END USART6_Init 1 */
 80007b6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80007ba:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.BaudRate = 115200;
 80007bc:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80007be:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80007c0:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80007c2:	230c      	movs	r3, #12
 80007c4:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80007c6:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80007c8:	940f      	str	r4, [sp, #60]	; 0x3c
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80007ca:	4c0b      	ldr	r4, [pc, #44]	; (80007f8 <MX_USART6_UART_Init+0x98>)
 80007cc:	a909      	add	r1, sp, #36	; 0x24
 80007ce:	4620      	mov	r0, r4
 80007d0:	f002 f85a 	bl	8002888 <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80007d4:	6923      	ldr	r3, [r4, #16]
 80007d6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80007da:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80007dc:	6963      	ldr	r3, [r4, #20]
 80007de:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80007e2:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80007e4:	68e3      	ldr	r3, [r4, #12]
 80007e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007ea:	60e3      	str	r3, [r4, #12]

 80007ec:	b010      	add	sp, #64	; 0x40
 80007ee:	bd10      	pop	{r4, pc}
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020800 	.word	0x40020800
 80007f8:	40011400 	.word	0x40011400

080007fc <SystemClock_Config>:
  */
 80007fc:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80007fe:	4a2e      	ldr	r2, [pc, #184]	; (80008b8 <SystemClock_Config+0xbc>)
 8000800:	6813      	ldr	r3, [r2, #0]
 8000802:	f023 030f 	bic.w	r3, r3, #15
 8000806:	f043 0305 	orr.w	r3, r3, #5
 800080a:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800080c:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <SystemClock_Config+0xbc>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f003 030f 	and.w	r3, r3, #15
{
 8000814:	2b05      	cmp	r3, #5
 8000816:	d1f9      	bne.n	800080c <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000818:	4a28      	ldr	r2, [pc, #160]	; (80008bc <SystemClock_Config+0xc0>)
 800081a:	6813      	ldr	r3, [r2, #0]
 800081c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000820:	6013      	str	r3, [r2, #0]
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000822:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8000826:	6813      	ldr	r3, [r2, #0]
 8000828:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800082c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000830:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000832:	6813      	ldr	r3, [r2, #0]
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800083a:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <SystemClock_Config+0xc4>)
 800083c:	681b      	ldr	r3, [r3, #0]
   /* Wait till HSE is ready */
 800083e:	f013 0f02 	tst.w	r3, #2
 8000842:	d0fa      	beq.n	800083a <SystemClock_Config+0x3e>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000844:	4a1e      	ldr	r2, [pc, #120]	; (80008c0 <SystemClock_Config+0xc4>)
 8000846:	6851      	ldr	r1, [r2, #4]
 8000848:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <SystemClock_Config+0xc8>)
 800084a:	400b      	ands	r3, r1
 800084c:	f443 5328 	orr.w	r3, r3, #10752	; 0x2a00
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	6053      	str	r3, [r2, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000856:	6853      	ldr	r3, [r2, #4]
 8000858:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800085c:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800085e:	6813      	ldr	r3, [r2, #0]
 8000860:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000864:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <SystemClock_Config+0xc4>)
 8000868:	681b      	ldr	r3, [r3, #0]
   /* Wait till PLL is ready */
 800086a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800086e:	d0fa      	beq.n	8000866 <SystemClock_Config+0x6a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <SystemClock_Config+0xc4>)
 8000872:	689a      	ldr	r2, [r3, #8]
 8000874:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000878:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800087a:	689a      	ldr	r2, [r3, #8]
 800087c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8000880:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000884:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000886:	689a      	ldr	r2, [r3, #8]
 8000888:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800088c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000890:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000892:	689a      	ldr	r2, [r3, #8]
 8000894:	f022 0203 	bic.w	r2, r2, #3
 8000898:	f042 0202 	orr.w	r2, r2, #2
 800089c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <SystemClock_Config+0xc4>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	f003 030c 	and.w	r3, r3, #12
   /* Wait till System clock is ready */
 80008a6:	2b08      	cmp	r3, #8
 80008a8:	d1f9      	bne.n	800089e <SystemClock_Config+0xa2>
  }
 80008aa:	4807      	ldr	r0, [pc, #28]	; (80008c8 <SystemClock_Config+0xcc>)
 80008ac:	f002 f8b6 	bl	8002a1c <LL_SetSystemCoreClock>
   /* Update the time base */
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 f925 	bl	8000b00 <HAL_InitTick>
  }
 80008b6:	bd08      	pop	{r3, pc}
 80008b8:	40023c00 	.word	0x40023c00
 80008bc:	40007000 	.word	0x40007000
 80008c0:	40023800 	.word	0x40023800
 80008c4:	ffbf8000 	.word	0xffbf8000
 80008c8:	0a037a00 	.word	0x0a037a00

080008cc <main>:
  */
 80008cc:	b508      	push	{r3, lr}

 80008ce:	f000 f93d 	bl	8000b4c <HAL_Init>

 80008d2:	f7ff ff93 	bl	80007fc <SystemClock_Config>

 80008d6:	f7ff fef5 	bl	80006c4 <MX_GPIO_Init>
  /* Initialize all configured peripherals */
 80008da:	f7ff ff41 	bl	8000760 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
 80008de:	f7ff fdf3 	bl	80004c8 <AppInit>
  {
 80008e2:	f7ff fdf5 	bl	80004d0 <AppTask>
 80008e6:	e7fc      	b.n	80008e2 <main+0x16>

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2100      	movs	r1, #0
 80008ec:	9100      	str	r1, [sp, #0]
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <HAL_MspInit+0x34>)
 80008f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008f6:	645a      	str	r2, [r3, #68]	; 0x44
 80008f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008fa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80008fe:	9200      	str	r2, [sp, #0]
 8000900:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	9101      	str	r1, [sp, #4]
 8000904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000906:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800090a:	641a      	str	r2, [r3, #64]	; 0x40
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	9301      	str	r3, [sp, #4]
 8000914:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	b002      	add	sp, #8
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000922:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	2300      	movs	r3, #0
 8000926:	9303      	str	r3, [sp, #12]
 8000928:	9304      	str	r3, [sp, #16]
 800092a:	9305      	str	r3, [sp, #20]
 800092c:	9306      	str	r3, [sp, #24]
 800092e:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDIO)
 8000930:	6802      	ldr	r2, [r0, #0]
 8000932:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <HAL_SD_MspInit+0x94>)
 8000934:	429a      	cmp	r2, r3
 8000936:	d001      	beq.n	800093c <HAL_SD_MspInit+0x1c>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000938:	b009      	add	sp, #36	; 0x24
 800093a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDIO_CLK_ENABLE();
 800093c:	2400      	movs	r4, #0
 800093e:	9400      	str	r4, [sp, #0]
 8000940:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8000944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800094a:	645a      	str	r2, [r3, #68]	; 0x44
 800094c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800094e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8000952:	9200      	str	r2, [sp, #0]
 8000954:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	9401      	str	r4, [sp, #4]
 8000958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800095a:	f042 0204 	orr.w	r2, r2, #4
 800095e:	631a      	str	r2, [r3, #48]	; 0x30
 8000960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000962:	f002 0204 	and.w	r2, r2, #4
 8000966:	9201      	str	r2, [sp, #4]
 8000968:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	9402      	str	r4, [sp, #8]
 800096c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800096e:	f042 0208 	orr.w	r2, r2, #8
 8000972:	631a      	str	r2, [r3, #48]	; 0x30
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	9302      	str	r3, [sp, #8]
 800097c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800097e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000982:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2702      	movs	r7, #2
 8000986:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2603      	movs	r6, #3
 800098a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800098c:	250c      	movs	r5, #12
 800098e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000990:	eb0d 0105 	add.w	r1, sp, r5
 8000994:	4808      	ldr	r0, [pc, #32]	; (80009b8 <HAL_SD_MspInit+0x98>)
 8000996:	f000 fb4d 	bl	8001034 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800099a:	2304      	movs	r3, #4
 800099c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009a4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a6:	eb0d 0105 	add.w	r1, sp, r5
 80009aa:	4804      	ldr	r0, [pc, #16]	; (80009bc <HAL_SD_MspInit+0x9c>)
 80009ac:	f000 fb42 	bl	8001034 <HAL_GPIO_Init>
}
 80009b0:	e7c2      	b.n	8000938 <HAL_SD_MspInit+0x18>
 80009b2:	bf00      	nop
 80009b4:	40012c00 	.word	0x40012c00
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40020c00 	.word	0x40020c00

080009c0 <HAL_MspDeInit>:
/* USER CODE BEGIN 1 */
/**
  * De-Initializes the Global MSP.
  */
void HAL_MspDeInit(void)
{
 80009c0:	b508      	push	{r3, lr}
  /* Reset the RCC clock configuration to the default reset state. */
  LL_RCC_DeInit();
 80009c2:	f001 fb0f 	bl	8001fe4 <LL_RCC_DeInit>

  /* Deinit used GPIOs. */
  LL_GPIO_DeInit(GPIOD);
 80009c6:	481b      	ldr	r0, [pc, #108]	; (8000a34 <HAL_MspDeInit+0x74>)
 80009c8:	f001 f9da 	bl	8001d80 <LL_GPIO_DeInit>
  LL_GPIO_DeInit(GPIOC);
 80009cc:	481a      	ldr	r0, [pc, #104]	; (8000a38 <HAL_MspDeInit+0x78>)
 80009ce:	f001 f9d7 	bl	8001d80 <LL_GPIO_DeInit>
  LL_GPIO_DeInit(GPIOB);
 80009d2:	481a      	ldr	r0, [pc, #104]	; (8000a3c <HAL_MspDeInit+0x7c>)
 80009d4:	f001 f9d4 	bl	8001d80 <LL_GPIO_DeInit>
  LL_GPIO_DeInit(GPIOA);
 80009d8:	4819      	ldr	r0, [pc, #100]	; (8000a40 <HAL_MspDeInit+0x80>)
 80009da:	f001 f9d1 	bl	8001d80 <LL_GPIO_DeInit>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <HAL_MspDeInit+0x84>)
 80009e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80009e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009e6:	645a      	str	r2, [r3, #68]	; 0x44
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80009e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ea:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80009ee:	641a      	str	r2, [r3, #64]	; 0x40
 80009f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009f2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80009f6:	641a      	str	r2, [r3, #64]	; 0x40
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80009f8:	4913      	ldr	r1, [pc, #76]	; (8000a48 <HAL_MspDeInit+0x88>)
 80009fa:	68ca      	ldr	r2, [r1, #12]
 80009fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a00:	60ca      	str	r2, [r1, #12]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000a02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a04:	f022 0220 	bic.w	r2, r2, #32
 8000a08:	645a      	str	r2, [r3, #68]	; 0x44
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8000a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a0c:	f022 0204 	bic.w	r2, r2, #4
 8000a10:	631a      	str	r2, [r3, #48]	; 0x30
 8000a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a14:	f022 0202 	bic.w	r2, r2, #2
 8000a18:	631a      	str	r2, [r3, #48]	; 0x30
 8000a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a1c:	f022 0201 	bic.w	r2, r2, #1
 8000a20:	631a      	str	r2, [r3, #48]	; 0x30
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8000a22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a24:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8000a28:	641a      	str	r2, [r3, #64]	; 0x40
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000a2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000a30:	645a      	str	r2, [r3, #68]	; 0x44
  LL_AHB1_GRP1_DisableClock(LL_AHB1_GRP1_PERIPH_GPIOA);

  /* SYSCFG and PWR clock disable. */
  LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_PWR);
  LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
}
 8000a32:	bd08      	pop	{r3, pc}
 8000a34:	40020c00 	.word	0x40020c00
 8000a38:	40020800 	.word	0x40020800
 8000a3c:	40020400 	.word	0x40020400
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40011400 	.word	0x40011400

08000a4c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a4c:	4770      	bx	lr

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	e7fe      	b.n	8000a50 <MemManage_Handler>

08000a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	e7fe      	b.n	8000a54 <UsageFault_Handler>

08000a56 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a56:	4770      	bx	lr

08000a58 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a58:	4770      	bx	lr

08000a5a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5a:	4770      	bx	lr

08000a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5e:	f000 f88f 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a62:	bd08      	pop	{r3, pc}

08000a64 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <SystemInit+0x18>)
 8000a66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000a6a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a76:	609a      	str	r2, [r3, #8]
#endif
}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a86:	e003      	b.n	8000a90 <LoopCopyDataInit>

08000a88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a8e:	3104      	adds	r1, #4

08000a90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a90:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a98:	d3f6      	bcc.n	8000a88 <CopyDataInit>
  ldr  r2, =_sbss
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a9c:	e002      	b.n	8000aa4 <LoopFillZerobss>

08000a9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000aa0:	f842 3b04 	str.w	r3, [r2], #4

08000aa4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000aa6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000aa8:	d3f9      	bcc.n	8000a9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aaa:	f7ff ffdb 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aae:	f005 fab1 	bl	8006014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab2:	f7ff ff0b 	bl	80008cc <main>
  bx  lr    
 8000ab6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ab8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000abc:	08006958 	.word	0x08006958
  ldr  r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ac4:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8000ac8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8000acc:	200012b0 	.word	0x200012b0

08000ad0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC_IRQHandler>
	...

08000ad4 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000ad4:	b510      	push	{r4, lr}
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_DeInit+0x28>)
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8000adc:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000ade:	2400      	movs	r4, #0
 8000ae0:	621c      	str	r4, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000ae2:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000ae4:	625c      	str	r4, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000ae6:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000ae8:	611c      	str	r4, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000aea:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000aec:	615c      	str	r4, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000aee:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000af0:	619c      	str	r4, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000af2:	f7ff ff65 	bl	80009c0 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
}
 8000af6:	4620      	mov	r0, r4
 8000af8:	bd10      	pop	{r4, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b510      	push	{r4, lr}
 8000b02:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_InitTick+0x40>)
 8000b06:	7818      	ldrb	r0, [r3, #0]
 8000b08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b10:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <HAL_InitTick+0x44>)
 8000b12:	6810      	ldr	r0, [r2, #0]
 8000b14:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b18:	f000 f898 	bl	8000c4c <HAL_SYSTICK_Config>
 8000b1c:	b968      	cbnz	r0, 8000b3a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1e:	2c0f      	cmp	r4, #15
 8000b20:	d901      	bls.n	8000b26 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000b22:	2001      	movs	r0, #1
 8000b24:	e00a      	b.n	8000b3c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b26:	2200      	movs	r2, #0
 8000b28:	4621      	mov	r1, r4
 8000b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2e:	f000 f859 	bl	8000be4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b32:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <HAL_InitTick+0x48>)
 8000b34:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000b36:	2000      	movs	r0, #0
 8000b38:	e000      	b.n	8000b3c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000b3a:	2001      	movs	r0, #1
}
 8000b3c:	bd10      	pop	{r4, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000004 	.word	0x20000004
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000008 	.word	0x20000008

08000b4c <HAL_Init>:
{
 8000b4c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_Init+0x30>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b56:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b5e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b66:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f000 f829 	bl	8000bc0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff ffc6 	bl	8000b00 <HAL_InitTick>
  HAL_MspInit();
 8000b74:	f7ff feb8 	bl	80008e8 <HAL_MspInit>
}
 8000b78:	2000      	movs	r0, #0
 8000b7a:	bd08      	pop	{r3, pc}
 8000b7c:	40023c00 	.word	0x40023c00

08000b80 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b80:	4a03      	ldr	r2, [pc, #12]	; (8000b90 <HAL_IncTick+0x10>)
 8000b82:	6811      	ldr	r1, [r2, #0]
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <HAL_IncTick+0x14>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	440b      	add	r3, r1
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	2000128c 	.word	0x2000128c
 8000b94:	20000004 	.word	0x20000004

08000b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b98:	b538      	push	{r3, r4, r5, lr}
 8000b9a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b9c:	f002 fb54 	bl	8003248 <HAL_GetTick>
 8000ba0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000ba6:	d002      	beq.n	8000bae <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <HAL_Delay+0x24>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bae:	f002 fb4b 	bl	8003248 <HAL_GetTick>
 8000bb2:	1b40      	subs	r0, r0, r5
 8000bb4:	42a0      	cmp	r0, r4
 8000bb6:	d3fa      	bcc.n	8000bae <HAL_Delay+0x16>
  {
  }
}
 8000bb8:	bd38      	pop	{r3, r4, r5, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000004 	.word	0x20000004

08000bc0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000bc2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bc8:	041b      	lsls	r3, r3, #16
 8000bca:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	0200      	lsls	r0, r0, #8
 8000bce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000bd4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000bd8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000bdc:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_NVIC_SetPriority+0x60>)
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bee:	f1c3 0407 	rsb	r4, r3, #7
 8000bf2:	2c04      	cmp	r4, #4
 8000bf4:	bf28      	it	cs
 8000bf6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf8:	1d1d      	adds	r5, r3, #4
 8000bfa:	2d06      	cmp	r5, #6
 8000bfc:	d918      	bls.n	8000c30 <HAL_NVIC_SetPriority+0x4c>
 8000bfe:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 35ff 	mov.w	r5, #4294967295
 8000c04:	fa05 f404 	lsl.w	r4, r5, r4
 8000c08:	ea21 0104 	bic.w	r1, r1, r4
 8000c0c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0e:	fa05 f303 	lsl.w	r3, r5, r3
 8000c12:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c16:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	db0b      	blt.n	8000c34 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	0109      	lsls	r1, r1, #4
 8000c1e:	b2c9      	uxtb	r1, r1
 8000c20:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c24:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c28:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c2c:	bc30      	pop	{r4, r5}
 8000c2e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c30:	2300      	movs	r3, #0
 8000c32:	e7e5      	b.n	8000c00 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	f000 000f 	and.w	r0, r0, #15
 8000c38:	0109      	lsls	r1, r1, #4
 8000c3a:	b2c9      	uxtb	r1, r1
 8000c3c:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <HAL_NVIC_SetPriority+0x64>)
 8000c3e:	5419      	strb	r1, [r3, r0]
 8000c40:	e7f4      	b.n	8000c2c <HAL_NVIC_SetPriority+0x48>
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00
 8000c48:	e000ed14 	.word	0xe000ed14

08000c4c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	3801      	subs	r0, #1
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c52:	d20a      	bcs.n	8000c6a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_SYSTICK_Config+0x24>)
 8000c56:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <HAL_SYSTICK_Config+0x28>)
 8000c5a:	21f0      	movs	r1, #240	; 0xf0
 8000c5c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c60:	2000      	movs	r0, #0
 8000c62:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c64:	2207      	movs	r2, #7
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c6a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e010 	.word	0xe000e010
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000c78:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000c7a:	490a      	ldr	r1, [pc, #40]	; (8000ca4 <FLASH_Program_DoubleWord+0x2c>)
 8000c7c:	690c      	ldr	r4, [r1, #16]
 8000c7e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8000c82:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000c84:	690c      	ldr	r4, [r1, #16]
 8000c86:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8000c8a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000c8c:	690c      	ldr	r4, [r1, #16]
 8000c8e:	f044 0401 	orr.w	r4, r4, #1
 8000c92:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000c94:	6002      	str	r2, [r0, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000c96:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000c9a:	6043      	str	r3, [r0, #4]
}
 8000c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40023c00 	.word	0x40023c00

08000ca8 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <FLASH_Program_Word+0x20>)
 8000caa:	691a      	ldr	r2, [r3, #16]
 8000cac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000cb0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000cb2:	691a      	ldr	r2, [r3, #16]
 8000cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cb8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000cba:	691a      	ldr	r2, [r3, #16]
 8000cbc:	f042 0201 	orr.w	r2, r2, #1
 8000cc0:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8000cc2:	6001      	str	r1, [r0, #0]
}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40023c00 	.word	0x40023c00

08000ccc <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <FLASH_Program_HalfWord+0x20>)
 8000cce:	691a      	ldr	r2, [r3, #16]
 8000cd0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000cd4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000cd6:	691a      	ldr	r2, [r3, #16]
 8000cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cdc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000cde:	691a      	ldr	r2, [r3, #16]
 8000ce0:	f042 0201 	orr.w	r2, r2, #1
 8000ce4:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8000ce6:	8001      	strh	r1, [r0, #0]
}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40023c00 	.word	0x40023c00

08000cf0 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <FLASH_Program_Byte+0x1c>)
 8000cf2:	691a      	ldr	r2, [r3, #16]
 8000cf4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000cf8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000cfa:	691a      	ldr	r2, [r3, #16]
 8000cfc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000cfe:	691a      	ldr	r2, [r3, #16]
 8000d00:	f042 0201 	orr.w	r2, r2, #1
 8000d04:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 8000d06:	7001      	strb	r1, [r0, #0]
}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40023c00 	.word	0x40023c00

08000d10 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <FLASH_SetErrorCode+0x84>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	f013 0f10 	tst.w	r3, #16
 8000d18:	d007      	beq.n	8000d2a <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000d1a:	4a1f      	ldr	r2, [pc, #124]	; (8000d98 <FLASH_SetErrorCode+0x88>)
 8000d1c:	69d3      	ldr	r3, [r2, #28]
 8000d1e:	f043 0310 	orr.w	r3, r3, #16
 8000d22:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <FLASH_SetErrorCode+0x84>)
 8000d26:	2210      	movs	r2, #16
 8000d28:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <FLASH_SetErrorCode+0x84>)
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	f013 0f20 	tst.w	r3, #32
 8000d32:	d007      	beq.n	8000d44 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000d34:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <FLASH_SetErrorCode+0x88>)
 8000d36:	69d3      	ldr	r3, [r2, #28]
 8000d38:	f043 0308 	orr.w	r3, r3, #8
 8000d3c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <FLASH_SetErrorCode+0x84>)
 8000d40:	2220      	movs	r2, #32
 8000d42:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <FLASH_SetErrorCode+0x84>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000d4c:	d007      	beq.n	8000d5e <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <FLASH_SetErrorCode+0x88>)
 8000d50:	69d3      	ldr	r3, [r2, #28]
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <FLASH_SetErrorCode+0x84>)
 8000d5a:	2240      	movs	r2, #64	; 0x40
 8000d5c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <FLASH_SetErrorCode+0x84>)
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000d66:	d007      	beq.n	8000d78 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000d68:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <FLASH_SetErrorCode+0x88>)
 8000d6a:	69d3      	ldr	r3, [r2, #28]
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <FLASH_SetErrorCode+0x84>)
 8000d74:	2280      	movs	r2, #128	; 0x80
 8000d76:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <FLASH_SetErrorCode+0x84>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	f013 0f02 	tst.w	r3, #2
 8000d80:	d007      	beq.n	8000d92 <FLASH_SetErrorCode+0x82>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <FLASH_SetErrorCode+0x88>)
 8000d84:	69d3      	ldr	r3, [r2, #28]
 8000d86:	f043 0320 	orr.w	r3, r3, #32
 8000d8a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000d8c:	4b01      	ldr	r3, [pc, #4]	; (8000d94 <FLASH_SetErrorCode+0x84>)
 8000d8e:	2202      	movs	r2, #2
 8000d90:	60da      	str	r2, [r3, #12]
  }
}
 8000d92:	4770      	bx	lr
 8000d94:	40023c00 	.word	0x40023c00
 8000d98:	20001290 	.word	0x20001290

08000d9c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_FLASH_Unlock+0x28>)
 8000d9e:	691b      	ldr	r3, [r3, #16]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db01      	blt.n	8000da8 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8000da4:	2000      	movs	r0, #0
 8000da6:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_FLASH_Unlock+0x28>)
 8000daa:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_FLASH_Unlock+0x2c>)
 8000dac:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000dae:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000db2:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db01      	blt.n	8000dbe <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8000dba:	2000      	movs	r0, #0
 8000dbc:	4770      	bx	lr
      status = HAL_ERROR;
 8000dbe:	2001      	movs	r0, #1
}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40023c00 	.word	0x40023c00
 8000dc8:	45670123 	.word	0x45670123

08000dcc <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8000dcc:	4a03      	ldr	r2, [pc, #12]	; (8000ddc <HAL_FLASH_Lock+0x10>)
 8000dce:	6913      	ldr	r3, [r2, #16]
 8000dd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dd4:	6113      	str	r3, [r2, #16]
}
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40023c00 	.word	0x40023c00

08000de0 <FLASH_WaitForLastOperation>:
{ 
 8000de0:	b538      	push	{r3, r4, r5, lr}
 8000de2:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <FLASH_WaitForLastOperation+0x5c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8000dea:	f002 fa2d 	bl	8003248 <HAL_GetTick>
 8000dee:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <FLASH_WaitForLastOperation+0x60>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000df8:	d00a      	beq.n	8000e10 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 8000dfa:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000dfe:	d0f7      	beq.n	8000df0 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000e00:	b1cc      	cbz	r4, 8000e36 <FLASH_WaitForLastOperation+0x56>
 8000e02:	f002 fa21 	bl	8003248 <HAL_GetTick>
 8000e06:	1b40      	subs	r0, r0, r5
 8000e08:	42a0      	cmp	r0, r4
 8000e0a:	d9f1      	bls.n	8000df0 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	e00d      	b.n	8000e2c <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <FLASH_WaitForLastOperation+0x60>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	f013 0f01 	tst.w	r3, #1
 8000e18:	d002      	beq.n	8000e20 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <FLASH_WaitForLastOperation+0x60>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <FLASH_WaitForLastOperation+0x60>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	f013 0ff2 	tst.w	r3, #242	; 0xf2
 8000e28:	d101      	bne.n	8000e2e <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 8000e2a:	2000      	movs	r0, #0
}  
 8000e2c:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 8000e2e:	f7ff ff6f 	bl	8000d10 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e32:	2001      	movs	r0, #1
 8000e34:	e7fa      	b.n	8000e2c <FLASH_WaitForLastOperation+0x4c>
        return HAL_TIMEOUT;
 8000e36:	2003      	movs	r0, #3
 8000e38:	e7f8      	b.n	8000e2c <FLASH_WaitForLastOperation+0x4c>
 8000e3a:	bf00      	nop
 8000e3c:	20001290 	.word	0x20001290
 8000e40:	40023c00 	.word	0x40023c00

08000e44 <HAL_FLASH_Program>:
{
 8000e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8000e46:	4c1d      	ldr	r4, [pc, #116]	; (8000ebc <HAL_FLASH_Program+0x78>)
 8000e48:	7e24      	ldrb	r4, [r4, #24]
 8000e4a:	2c01      	cmp	r4, #1
 8000e4c:	d034      	beq.n	8000eb8 <HAL_FLASH_Program+0x74>
 8000e4e:	461f      	mov	r7, r3
 8000e50:	4616      	mov	r6, r2
 8000e52:	460d      	mov	r5, r1
 8000e54:	4604      	mov	r4, r0
 8000e56:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <HAL_FLASH_Program+0x78>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e60:	f7ff ffbe 	bl	8000de0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000e64:	4601      	mov	r1, r0
 8000e66:	b998      	cbnz	r0, 8000e90 <HAL_FLASH_Program+0x4c>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000e68:	b1bc      	cbz	r4, 8000e9a <HAL_FLASH_Program+0x56>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000e6a:	2c01      	cmp	r4, #1
 8000e6c:	d01a      	beq.n	8000ea4 <HAL_FLASH_Program+0x60>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000e6e:	2c02      	cmp	r4, #2
 8000e70:	d01d      	beq.n	8000eae <HAL_FLASH_Program+0x6a>
      FLASH_Program_DoubleWord(Address, Data);
 8000e72:	4632      	mov	r2, r6
 8000e74:	463b      	mov	r3, r7
 8000e76:	4628      	mov	r0, r5
 8000e78:	f7ff fefe 	bl	8000c78 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e80:	f7ff ffae 	bl	8000de0 <FLASH_WaitForLastOperation>
 8000e84:	4601      	mov	r1, r0
    FLASH->CR &= (~FLASH_CR_PG);  
 8000e86:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <HAL_FLASH_Program+0x7c>)
 8000e88:	6913      	ldr	r3, [r2, #16]
 8000e8a:	f023 0301 	bic.w	r3, r3, #1
 8000e8e:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <HAL_FLASH_Program+0x78>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	761a      	strb	r2, [r3, #24]
}
 8000e96:	4608      	mov	r0, r1
 8000e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000e9a:	b2f1      	uxtb	r1, r6
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	f7ff ff27 	bl	8000cf0 <FLASH_Program_Byte>
 8000ea2:	e7eb      	b.n	8000e7c <HAL_FLASH_Program+0x38>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000ea4:	b2b1      	uxth	r1, r6
 8000ea6:	4628      	mov	r0, r5
 8000ea8:	f7ff ff10 	bl	8000ccc <FLASH_Program_HalfWord>
 8000eac:	e7e6      	b.n	8000e7c <HAL_FLASH_Program+0x38>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000eae:	4631      	mov	r1, r6
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	f7ff fef9 	bl	8000ca8 <FLASH_Program_Word>
 8000eb6:	e7e1      	b.n	8000e7c <HAL_FLASH_Program+0x38>
  __HAL_LOCK(&pFlash);
 8000eb8:	2102      	movs	r1, #2
 8000eba:	e7ec      	b.n	8000e96 <HAL_FLASH_Program+0x52>
 8000ebc:	20001290 	.word	0x20001290
 8000ec0:	40023c00 	.word	0x40023c00

08000ec4 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <FLASH_MassErase+0x20>)
 8000ec6:	691a      	ldr	r2, [r3, #16]
 8000ec8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000ecc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	f042 0204 	orr.w	r2, r2, #4
 8000ed4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8000ed6:	691a      	ldr	r2, [r3, #16]
 8000ed8:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8000edc:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8000ee0:	6118      	str	r0, [r3, #16]
}
 8000ee2:	4770      	bx	lr
 8000ee4:	40023c00 	.word	0x40023c00

08000ee8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8000ee8:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000eea:	b149      	cbz	r1, 8000f00 <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000eec:	2901      	cmp	r1, #1
 8000eee:	d021      	beq.n	8000f34 <FLASH_Erase_Sector+0x4c>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8000ef0:	2902      	cmp	r1, #2
 8000ef2:	d002      	beq.n	8000efa <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000ef4:	f44f 7440 	mov.w	r4, #768	; 0x300
 8000ef8:	e003      	b.n	8000f02 <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_WORD;
 8000efa:	f44f 7400 	mov.w	r4, #512	; 0x200
 8000efe:	e000      	b.n	8000f02 <FLASH_Erase_Sector+0x1a>
     tmp_psize = FLASH_PSIZE_BYTE;
 8000f00:	2400      	movs	r4, #0
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <FLASH_Erase_Sector+0x54>)
 8000f04:	6919      	ldr	r1, [r3, #16]
 8000f06:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8000f0a:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 8000f0c:	691a      	ldr	r2, [r3, #16]
 8000f0e:	4322      	orrs	r2, r4
 8000f10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000f12:	691a      	ldr	r2, [r3, #16]
 8000f14:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000f18:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000f1a:	691a      	ldr	r2, [r3, #16]
 8000f1c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000f20:	f040 0002 	orr.w	r0, r0, #2
 8000f24:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000f26:	691a      	ldr	r2, [r3, #16]
 8000f28:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f2c:	611a      	str	r2, [r3, #16]
}
 8000f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f32:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000f34:	f44f 7480 	mov.w	r4, #256	; 0x100
 8000f38:	e7e3      	b.n	8000f02 <FLASH_Erase_Sector+0x1a>
 8000f3a:	bf00      	nop
 8000f3c:	40023c00 	.word	0x40023c00

08000f40 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <FLASH_FlushCaches+0x5c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f413 7f00 	tst.w	r3, #512	; 0x200
 8000f48:	d010      	beq.n	8000f6c <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <FLASH_FlushCaches+0x5c>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f52:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f62:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f6a:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <FLASH_FlushCaches+0x5c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000f74:	d010      	beq.n	8000f98 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <FLASH_FlushCaches+0x5c>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f7e:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f8e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f96:	601a      	str	r2, [r3, #0]
  }
}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40023c00 	.word	0x40023c00

08000fa0 <HAL_FLASHEx_Erase>:
{
 8000fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <HAL_FLASHEx_Erase+0x8c>)
 8000fa4:	7e1b      	ldrb	r3, [r3, #24]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d03e      	beq.n	8001028 <HAL_FLASHEx_Erase+0x88>
 8000faa:	460e      	mov	r6, r1
 8000fac:	4604      	mov	r4, r0
 8000fae:	4b1f      	ldr	r3, [pc, #124]	; (800102c <HAL_FLASHEx_Erase+0x8c>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fb8:	f7ff ff12 	bl	8000de0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000fbc:	4607      	mov	r7, r0
 8000fbe:	bb70      	cbnz	r0, 800101e <HAL_FLASHEx_Erase+0x7e>
    *SectorError = 0xFFFFFFFFU;
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc4:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000fc6:	6823      	ldr	r3, [r4, #0]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d016      	beq.n	8000ffa <HAL_FLASHEx_Erase+0x5a>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000fcc:	68a5      	ldr	r5, [r4, #8]
 8000fce:	68e3      	ldr	r3, [r4, #12]
 8000fd0:	68a2      	ldr	r2, [r4, #8]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	42ab      	cmp	r3, r5
 8000fd6:	d920      	bls.n	800101a <HAL_FLASHEx_Erase+0x7a>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000fd8:	7c21      	ldrb	r1, [r4, #16]
 8000fda:	4628      	mov	r0, r5
 8000fdc:	f7ff ff84 	bl	8000ee8 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fe0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fe4:	f7ff fefc 	bl	8000de0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000fe8:	4a11      	ldr	r2, [pc, #68]	; (8001030 <HAL_FLASHEx_Erase+0x90>)
 8000fea:	6913      	ldr	r3, [r2, #16]
 8000fec:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8000ff0:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 8000ff2:	4607      	mov	r7, r0
 8000ff4:	b980      	cbnz	r0, 8001018 <HAL_FLASHEx_Erase+0x78>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000ff6:	3501      	adds	r5, #1
 8000ff8:	e7e9      	b.n	8000fce <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8000ffa:	6861      	ldr	r1, [r4, #4]
 8000ffc:	7c20      	ldrb	r0, [r4, #16]
 8000ffe:	f7ff ff61 	bl	8000ec4 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001002:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001006:	f7ff feeb 	bl	8000de0 <FLASH_WaitForLastOperation>
 800100a:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800100c:	4a08      	ldr	r2, [pc, #32]	; (8001030 <HAL_FLASHEx_Erase+0x90>)
 800100e:	6913      	ldr	r3, [r2, #16]
 8001010:	f023 0304 	bic.w	r3, r3, #4
 8001014:	6113      	str	r3, [r2, #16]
 8001016:	e000      	b.n	800101a <HAL_FLASHEx_Erase+0x7a>
          *SectorError = index;
 8001018:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();    
 800101a:	f7ff ff91 	bl	8000f40 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800101e:	4b03      	ldr	r3, [pc, #12]	; (800102c <HAL_FLASHEx_Erase+0x8c>)
 8001020:	2200      	movs	r2, #0
 8001022:	761a      	strb	r2, [r3, #24]
}
 8001024:	4638      	mov	r0, r7
 8001026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8001028:	2702      	movs	r7, #2
 800102a:	e7fb      	b.n	8001024 <HAL_FLASHEx_Erase+0x84>
 800102c:	20001290 	.word	0x20001290
 8001030:	40023c00 	.word	0x40023c00

08001034 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001034:	2300      	movs	r3, #0
 8001036:	2b0f      	cmp	r3, #15
 8001038:	f200 80d7 	bhi.w	80011ea <HAL_GPIO_Init+0x1b6>
{
 800103c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103e:	b083      	sub	sp, #12
 8001040:	e039      	b.n	80010b6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001042:	2207      	movs	r2, #7
 8001044:	e000      	b.n	8001048 <HAL_GPIO_Init+0x14>
 8001046:	2200      	movs	r2, #0
 8001048:	40aa      	lsls	r2, r5
 800104a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800104c:	3402      	adds	r4, #2
 800104e:	4d67      	ldr	r5, [pc, #412]	; (80011ec <HAL_GPIO_Init+0x1b8>)
 8001050:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001054:	4a66      	ldr	r2, [pc, #408]	; (80011f0 <HAL_GPIO_Init+0x1bc>)
 8001056:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001058:	43f2      	mvns	r2, r6
 800105a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800105e:	684f      	ldr	r7, [r1, #4]
 8001060:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001064:	d001      	beq.n	800106a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8001066:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 800106a:	4c61      	ldr	r4, [pc, #388]	; (80011f0 <HAL_GPIO_Init+0x1bc>)
 800106c:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 800106e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001070:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001074:	684f      	ldr	r7, [r1, #4]
 8001076:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800107a:	d001      	beq.n	8001080 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 800107c:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 8001080:	4c5b      	ldr	r4, [pc, #364]	; (80011f0 <HAL_GPIO_Init+0x1bc>)
 8001082:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001084:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001086:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800108a:	684f      	ldr	r7, [r1, #4]
 800108c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001090:	d001      	beq.n	8001096 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8001092:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 8001096:	4c56      	ldr	r4, [pc, #344]	; (80011f0 <HAL_GPIO_Init+0x1bc>)
 8001098:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800109a:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800109c:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800109e:	684d      	ldr	r5, [r1, #4]
 80010a0:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 80010a4:	d001      	beq.n	80010aa <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80010a6:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 80010aa:	4c51      	ldr	r4, [pc, #324]	; (80011f0 <HAL_GPIO_Init+0x1bc>)
 80010ac:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ae:	3301      	adds	r3, #1
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	f200 8098 	bhi.w	80011e6 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 80010b6:	2201      	movs	r2, #1
 80010b8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ba:	680c      	ldr	r4, [r1, #0]
 80010bc:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 80010c0:	42b2      	cmp	r2, r6
 80010c2:	d1f4      	bne.n	80010ae <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c4:	684c      	ldr	r4, [r1, #4]
 80010c6:	1e65      	subs	r5, r4, #1
 80010c8:	2d01      	cmp	r5, #1
 80010ca:	d903      	bls.n	80010d4 <HAL_GPIO_Init+0xa0>
 80010cc:	2c11      	cmp	r4, #17
 80010ce:	d001      	beq.n	80010d4 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d0:	2c12      	cmp	r4, #18
 80010d2:	d112      	bne.n	80010fa <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 80010d4:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d6:	005f      	lsls	r7, r3, #1
 80010d8:	2403      	movs	r4, #3
 80010da:	40bc      	lsls	r4, r7
 80010dc:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e0:	68cc      	ldr	r4, [r1, #12]
 80010e2:	40bc      	lsls	r4, r7
 80010e4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80010e6:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80010e8:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ea:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010ee:	684c      	ldr	r4, [r1, #4]
 80010f0:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80010f4:	409a      	lsls	r2, r3
 80010f6:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 80010f8:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80010fa:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010fc:	005f      	lsls	r7, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	40ba      	lsls	r2, r7
 8001102:	43d2      	mvns	r2, r2
 8001104:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001106:	688d      	ldr	r5, [r1, #8]
 8001108:	40bd      	lsls	r5, r7
 800110a:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 800110c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800110e:	684c      	ldr	r4, [r1, #4]
 8001110:	2c02      	cmp	r4, #2
 8001112:	d001      	beq.n	8001118 <HAL_GPIO_Init+0xe4>
 8001114:	2c12      	cmp	r4, #18
 8001116:	d113      	bne.n	8001140 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8001118:	08dd      	lsrs	r5, r3, #3
 800111a:	3508      	adds	r5, #8
 800111c:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001120:	f003 0407 	and.w	r4, r3, #7
 8001124:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8001128:	240f      	movs	r4, #15
 800112a:	fa04 f40c 	lsl.w	r4, r4, ip
 800112e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001132:	690c      	ldr	r4, [r1, #16]
 8001134:	fa04 f40c 	lsl.w	r4, r4, ip
 8001138:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 800113c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8001140:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001142:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001144:	684c      	ldr	r4, [r1, #4]
 8001146:	f004 0403 	and.w	r4, r4, #3
 800114a:	40bc      	lsls	r4, r7
 800114c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800114e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001150:	684a      	ldr	r2, [r1, #4]
 8001152:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001156:	d0aa      	beq.n	80010ae <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001158:	2200      	movs	r2, #0
 800115a:	9201      	str	r2, [sp, #4]
 800115c:	4a25      	ldr	r2, [pc, #148]	; (80011f4 <HAL_GPIO_Init+0x1c0>)
 800115e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001160:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001164:	6454      	str	r4, [r2, #68]	; 0x44
 8001166:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001168:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800116c:	9201      	str	r2, [sp, #4]
 800116e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001170:	089c      	lsrs	r4, r3, #2
 8001172:	1ca5      	adds	r5, r4, #2
 8001174:	4a1d      	ldr	r2, [pc, #116]	; (80011ec <HAL_GPIO_Init+0x1b8>)
 8001176:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800117a:	f003 0203 	and.w	r2, r3, #3
 800117e:	0095      	lsls	r5, r2, #2
 8001180:	220f      	movs	r2, #15
 8001182:	40aa      	lsls	r2, r5
 8001184:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001188:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <HAL_GPIO_Init+0x1c4>)
 800118a:	4290      	cmp	r0, r2
 800118c:	f43f af5b 	beq.w	8001046 <HAL_GPIO_Init+0x12>
 8001190:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001194:	4290      	cmp	r0, r2
 8001196:	d01a      	beq.n	80011ce <HAL_GPIO_Init+0x19a>
 8001198:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800119c:	4290      	cmp	r0, r2
 800119e:	d018      	beq.n	80011d2 <HAL_GPIO_Init+0x19e>
 80011a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011a4:	4290      	cmp	r0, r2
 80011a6:	d016      	beq.n	80011d6 <HAL_GPIO_Init+0x1a2>
 80011a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011ac:	4290      	cmp	r0, r2
 80011ae:	d014      	beq.n	80011da <HAL_GPIO_Init+0x1a6>
 80011b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011b4:	4290      	cmp	r0, r2
 80011b6:	d012      	beq.n	80011de <HAL_GPIO_Init+0x1aa>
 80011b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011bc:	4290      	cmp	r0, r2
 80011be:	d010      	beq.n	80011e2 <HAL_GPIO_Init+0x1ae>
 80011c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011c4:	4290      	cmp	r0, r2
 80011c6:	f43f af3c 	beq.w	8001042 <HAL_GPIO_Init+0xe>
 80011ca:	2208      	movs	r2, #8
 80011cc:	e73c      	b.n	8001048 <HAL_GPIO_Init+0x14>
 80011ce:	2201      	movs	r2, #1
 80011d0:	e73a      	b.n	8001048 <HAL_GPIO_Init+0x14>
 80011d2:	2202      	movs	r2, #2
 80011d4:	e738      	b.n	8001048 <HAL_GPIO_Init+0x14>
 80011d6:	2203      	movs	r2, #3
 80011d8:	e736      	b.n	8001048 <HAL_GPIO_Init+0x14>
 80011da:	2204      	movs	r2, #4
 80011dc:	e734      	b.n	8001048 <HAL_GPIO_Init+0x14>
 80011de:	2205      	movs	r2, #5
 80011e0:	e732      	b.n	8001048 <HAL_GPIO_Init+0x14>
 80011e2:	2206      	movs	r2, #6
 80011e4:	e730      	b.n	8001048 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80011e6:	b003      	add	sp, #12
 80011e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ea:	4770      	bx	lr
 80011ec:	40013800 	.word	0x40013800
 80011f0:	40013c00 	.word	0x40013c00
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000

080011fc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80011fc:	b570      	push	{r4, r5, r6, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001202:	2300      	movs	r3, #0
 8001204:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001206:	6800      	ldr	r0, [r0, #0]
 8001208:	f001 fa58 	bl	80026bc <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800120c:	4606      	mov	r6, r0
 800120e:	b110      	cbz	r0, 8001216 <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 8001210:	4630      	mov	r0, r6
 8001212:	b002      	add	sp, #8
 8001214:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8001216:	6820      	ldr	r0, [r4, #0]
 8001218:	f001 fa63 	bl	80026e2 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800121c:	b938      	cbnz	r0, 800122e <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800121e:	2301      	movs	r3, #1
 8001220:	64a3      	str	r3, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8001222:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001224:	2b01      	cmp	r3, #1
 8001226:	d00b      	beq.n	8001240 <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8001228:	4635      	mov	r5, r6
 800122a:	4630      	mov	r0, r6
 800122c:	e014      	b.n	8001258 <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800122e:	2300      	movs	r3, #0
 8001230:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001232:	6820      	ldr	r0, [r4, #0]
 8001234:	f001 fa42 	bl	80026bc <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001238:	2800      	cmp	r0, #0
 800123a:	d0f2      	beq.n	8001222 <SD_PowerON+0x26>
      return errorstate;
 800123c:	4606      	mov	r6, r0
 800123e:	e7e7      	b.n	8001210 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8001240:	2100      	movs	r1, #0
 8001242:	6820      	ldr	r0, [r4, #0]
 8001244:	f001 fa64 	bl	8002710 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001248:	2800      	cmp	r0, #0
 800124a:	d0ed      	beq.n	8001228 <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800124c:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8001250:	e7de      	b.n	8001210 <SD_PowerON+0x14>
    count++;
 8001252:	9b01      	ldr	r3, [sp, #4]
 8001254:	3301      	adds	r3, #1
 8001256:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8001258:	9a01      	ldr	r2, [sp, #4]
 800125a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800125e:	429a      	cmp	r2, r3
 8001260:	d813      	bhi.n	800128a <SD_PowerON+0x8e>
 8001262:	b995      	cbnz	r5, 800128a <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8001264:	2100      	movs	r1, #0
 8001266:	6820      	ldr	r0, [r4, #0]
 8001268:	f001 fa52 	bl	8002710 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800126c:	b9d8      	cbnz	r0, 80012a6 <SD_PowerON+0xaa>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800126e:	4912      	ldr	r1, [pc, #72]	; (80012b8 <SD_PowerON+0xbc>)
 8001270:	6820      	ldr	r0, [r4, #0]
 8001272:	f001 fa65 	bl	8002740 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001276:	4605      	mov	r5, r0
 8001278:	b9b8      	cbnz	r0, 80012aa <SD_PowerON+0xae>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800127a:	2100      	movs	r1, #0
 800127c:	6820      	ldr	r0, [r4, #0]
 800127e:	f001 f860 	bl	8002342 <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8001282:	0fc3      	lsrs	r3, r0, #31
 8001284:	d0e5      	beq.n	8001252 <SD_PowerON+0x56>
 8001286:	461d      	mov	r5, r3
 8001288:	e7e3      	b.n	8001252 <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800128a:	9a01      	ldr	r2, [sp, #4]
 800128c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001290:	429a      	cmp	r2, r3
 8001292:	d80d      	bhi.n	80012b0 <SD_PowerON+0xb4>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8001294:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8001298:	d102      	bne.n	80012a0 <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDSC;
 800129a:	2300      	movs	r3, #0
 800129c:	6463      	str	r3, [r4, #68]	; 0x44
 800129e:	e7b7      	b.n	8001210 <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80012a0:	2301      	movs	r3, #1
 80012a2:	6463      	str	r3, [r4, #68]	; 0x44
 80012a4:	e7b4      	b.n	8001210 <SD_PowerON+0x14>
      return errorstate;
 80012a6:	4606      	mov	r6, r0
 80012a8:	e7b2      	b.n	8001210 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80012aa:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80012ae:	e7af      	b.n	8001210 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80012b0:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 80012b4:	e7ac      	b.n	8001210 <SD_PowerON+0x14>
 80012b6:	bf00      	nop
 80012b8:	c1100000 	.word	0xc1100000

080012bc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80012bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012c0:	b088      	sub	sp, #32
 80012c2:	4604      	mov	r4, r0
 80012c4:	460f      	mov	r7, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80012c6:	f001 ffbf 	bl	8003248 <HAL_GetTick>
 80012ca:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 80012cc:	2300      	movs	r3, #0
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80012d2:	2108      	movs	r1, #8
 80012d4:	6820      	ldr	r0, [r4, #0]
 80012d6:	f001 f947 	bl	8002568 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80012da:	4605      	mov	r5, r0
 80012dc:	b118      	cbz	r0, 80012e6 <SD_FindSCR+0x2a>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 80012de:	4628      	mov	r0, r5
 80012e0:	b008      	add	sp, #32
 80012e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80012e6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80012e8:	0409      	lsls	r1, r1, #16
 80012ea:	6820      	ldr	r0, [r4, #0]
 80012ec:	f001 fa10 	bl	8002710 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80012f0:	4605      	mov	r5, r0
 80012f2:	2800      	cmp	r0, #0
 80012f4:	d1f3      	bne.n	80012de <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 80012fc:	2308      	movs	r3, #8
 80012fe:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8001300:	2330      	movs	r3, #48	; 0x30
 8001302:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001304:	2302      	movs	r3, #2
 8001306:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001308:	2300      	movs	r3, #0
 800130a:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800130c:	2301      	movs	r3, #1
 800130e:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8001310:	a902      	add	r1, sp, #8
 8001312:	6820      	ldr	r0, [r4, #0]
 8001314:	f001 f916 	bl	8002544 <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8001318:	6820      	ldr	r0, [r4, #0]
 800131a:	f001 fa42 	bl	80027a2 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800131e:	4605      	mov	r5, r0
 8001320:	2800      	cmp	r0, #0
 8001322:	d1dc      	bne.n	80012de <SD_FindSCR+0x22>
  uint32_t index = 0U;
 8001324:	4680      	mov	r8, r0
 8001326:	e005      	b.n	8001334 <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8001328:	f001 ff8e 	bl	8003248 <HAL_GetTick>
 800132c:	1b80      	subs	r0, r0, r6
 800132e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001332:	d043      	beq.n	80013bc <SD_FindSCR+0x100>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8001334:	6820      	ldr	r0, [r4, #0]
 8001336:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001338:	f240 432a 	movw	r3, #1066	; 0x42a
 800133c:	421a      	tst	r2, r3
 800133e:	d10a      	bne.n	8001356 <SD_FindSCR+0x9a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8001340:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001342:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001346:	d0ef      	beq.n	8001328 <SD_FindSCR+0x6c>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8001348:	f000 ffd2 	bl	80022f0 <SDIO_ReadFIFO>
 800134c:	f84d 0028 	str.w	r0, [sp, r8, lsl #2]
      index++;
 8001350:	f108 0801 	add.w	r8, r8, #1
 8001354:	e7e8      	b.n	8001328 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001356:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001358:	f013 0f08 	tst.w	r3, #8
 800135c:	d125      	bne.n	80013aa <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800135e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001360:	f013 0f02 	tst.w	r3, #2
 8001364:	d124      	bne.n	80013b0 <SD_FindSCR+0xf4>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001366:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001368:	f013 0f20 	tst.w	r3, #32
 800136c:	d123      	bne.n	80013b6 <SD_FindSCR+0xfa>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800136e:	f240 533a 	movw	r3, #1338	; 0x53a
 8001372:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8001374:	9a01      	ldr	r2, [sp, #4]
 8001376:	0213      	lsls	r3, r2, #8
 8001378:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800137c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8001380:	0a11      	lsrs	r1, r2, #8
 8001382:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8001386:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8001388:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800138c:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800138e:	9a00      	ldr	r2, [sp, #0]
 8001390:	0213      	lsls	r3, r2, #8
 8001392:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001396:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800139a:	0a11      	lsrs	r1, r2, #8
 800139c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80013a0:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80013a2:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80013a6:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 80013a8:	e799      	b.n	80012de <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80013aa:	2508      	movs	r5, #8
 80013ac:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80013ae:	e796      	b.n	80012de <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80013b0:	2502      	movs	r5, #2
 80013b2:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80013b4:	e793      	b.n	80012de <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80013b6:	2520      	movs	r5, #32
 80013b8:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80013ba:	e790      	b.n	80012de <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 80013bc:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80013c0:	e78d      	b.n	80012de <SD_FindSCR+0x22>

080013c2 <SD_WideBus_Enable>:
{
 80013c2:	b510      	push	{r4, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 80013c8:	2100      	movs	r1, #0
 80013ca:	9100      	str	r1, [sp, #0]
 80013cc:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80013ce:	6800      	ldr	r0, [r0, #0]
 80013d0:	f000 ffb7 	bl	8002342 <SDIO_GetResponse>
 80013d4:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80013d8:	d116      	bne.n	8001408 <SD_WideBus_Enable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 80013da:	4669      	mov	r1, sp
 80013dc:	4620      	mov	r0, r4
 80013de:	f7ff ff6d 	bl	80012bc <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80013e2:	4603      	mov	r3, r0
 80013e4:	b990      	cbnz	r0, 800140c <SD_WideBus_Enable+0x4a>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80013e6:	9b01      	ldr	r3, [sp, #4]
 80013e8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80013ec:	d011      	beq.n	8001412 <SD_WideBus_Enable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80013ee:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80013f0:	0409      	lsls	r1, r1, #16
 80013f2:	6820      	ldr	r0, [r4, #0]
 80013f4:	f001 f98c 	bl	8002710 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80013f8:	4603      	mov	r3, r0
 80013fa:	b938      	cbnz	r0, 800140c <SD_WideBus_Enable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80013fc:	2102      	movs	r1, #2
 80013fe:	6820      	ldr	r0, [r4, #0]
 8001400:	f001 f9b7 	bl	8002772 <SDMMC_CmdBusWidth>
 8001404:	4603      	mov	r3, r0
 8001406:	e001      	b.n	800140c <SD_WideBus_Enable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8001408:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 800140c:	4618      	mov	r0, r3
 800140e:	b002      	add	sp, #8
 8001410:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8001412:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001416:	e7f9      	b.n	800140c <SD_WideBus_Enable+0x4a>

08001418 <SD_WideBus_Disable>:
{
 8001418:	b510      	push	{r4, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 800141e:	2100      	movs	r1, #0
 8001420:	9100      	str	r1, [sp, #0]
 8001422:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8001424:	6800      	ldr	r0, [r0, #0]
 8001426:	f000 ff8c 	bl	8002342 <SDIO_GetResponse>
 800142a:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800142e:	d116      	bne.n	800145e <SD_WideBus_Disable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8001430:	4669      	mov	r1, sp
 8001432:	4620      	mov	r0, r4
 8001434:	f7ff ff42 	bl	80012bc <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001438:	4603      	mov	r3, r0
 800143a:	b990      	cbnz	r0, 8001462 <SD_WideBus_Disable+0x4a>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800143c:	9b01      	ldr	r3, [sp, #4]
 800143e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001442:	d011      	beq.n	8001468 <SD_WideBus_Disable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001444:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001446:	0409      	lsls	r1, r1, #16
 8001448:	6820      	ldr	r0, [r4, #0]
 800144a:	f001 f961 	bl	8002710 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800144e:	4603      	mov	r3, r0
 8001450:	b938      	cbnz	r0, 8001462 <SD_WideBus_Disable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8001452:	2100      	movs	r1, #0
 8001454:	6820      	ldr	r0, [r4, #0]
 8001456:	f001 f98c 	bl	8002772 <SDMMC_CmdBusWidth>
 800145a:	4603      	mov	r3, r0
 800145c:	e001      	b.n	8001462 <SD_WideBus_Disable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800145e:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8001462:	4618      	mov	r0, r3
 8001464:	b002      	add	sp, #8
 8001466:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8001468:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800146c:	e7f9      	b.n	8001462 <SD_WideBus_Disable+0x4a>

0800146e <SD_SendStatus>:
{
 800146e:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 8001470:	b181      	cbz	r1, 8001494 <SD_SendStatus+0x26>
 8001472:	460d      	mov	r5, r1
 8001474:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001476:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8001478:	0409      	lsls	r1, r1, #16
 800147a:	6800      	ldr	r0, [r0, #0]
 800147c:	f001 f9eb 	bl	8002856 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001480:	4606      	mov	r6, r0
 8001482:	b108      	cbz	r0, 8001488 <SD_SendStatus+0x1a>
}
 8001484:	4630      	mov	r0, r6
 8001486:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001488:	2100      	movs	r1, #0
 800148a:	6820      	ldr	r0, [r4, #0]
 800148c:	f000 ff59 	bl	8002342 <SDIO_GetResponse>
 8001490:	6028      	str	r0, [r5, #0]
  return HAL_SD_ERROR_NONE;
 8001492:	e7f7      	b.n	8001484 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 8001494:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8001498:	e7f4      	b.n	8001484 <SD_SendStatus+0x16>
	...

0800149c <HAL_SD_ReadBlocks>:
{
 800149c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	4604      	mov	r4, r0
 80014a4:	460d      	mov	r5, r1
 80014a6:	4690      	mov	r8, r2
 80014a8:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 80014aa:	f001 fecd 	bl	8003248 <HAL_GetTick>
  if(NULL == pData)
 80014ae:	b16d      	cbz	r5, 80014cc <HAL_SD_ReadBlocks+0x30>
 80014b0:	4607      	mov	r7, r0
  if(hsd->State == HAL_SD_STATE_READY)
 80014b2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d00d      	beq.n	80014d8 <HAL_SD_ReadBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80014bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80014be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014c2:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80014c4:	2001      	movs	r0, #1
}
 80014c6:	b006      	add	sp, #24
 80014c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80014cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80014ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80014d2:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80014d4:	2001      	movs	r0, #1
 80014d6:	e7f6      	b.n	80014c6 <HAL_SD_ReadBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80014d8:	2300      	movs	r3, #0
 80014da:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80014dc:	eb08 0306 	add.w	r3, r8, r6
 80014e0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d81b      	bhi.n	800151e <HAL_SD_ReadBlocks+0x82>
    hsd->State = HAL_SD_STATE_BUSY;
 80014e6:	2303      	movs	r3, #3
 80014e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	2200      	movs	r2, #0
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80014f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d001      	beq.n	80014fc <HAL_SD_ReadBlocks+0x60>
      add *= 512U;
 80014f8:	ea4f 2848 	mov.w	r8, r8, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80014fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001500:	6820      	ldr	r0, [r4, #0]
 8001502:	f001 f831 	bl	8002568 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001506:	4603      	mov	r3, r0
 8001508:	b178      	cbz	r0, 800152a <HAL_SD_ReadBlocks+0x8e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800150a:	6822      	ldr	r2, [r4, #0]
 800150c:	497c      	ldr	r1, [pc, #496]	; (8001700 <HAL_SD_ReadBlocks+0x264>)
 800150e:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001510:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001512:	4318      	orrs	r0, r3
 8001514:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001516:	2001      	movs	r0, #1
 8001518:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 800151c:	e7d3      	b.n	80014c6 <HAL_SD_ReadBlocks+0x2a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800151e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001520:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001524:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8001526:	2001      	movs	r0, #1
 8001528:	e7cd      	b.n	80014c6 <HAL_SD_ReadBlocks+0x2a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001530:	0273      	lsls	r3, r6, #9
 8001532:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001534:	2390      	movs	r3, #144	; 0x90
 8001536:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001538:	2302      	movs	r3, #2
 800153a:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800153c:	2300      	movs	r3, #0
 800153e:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001540:	2301      	movs	r3, #1
 8001542:	9305      	str	r3, [sp, #20]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001544:	4669      	mov	r1, sp
 8001546:	6820      	ldr	r0, [r4, #0]
 8001548:	f000 fffc 	bl	8002544 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 800154c:	2e01      	cmp	r6, #1
 800154e:	d90c      	bls.n	800156a <HAL_SD_ReadBlocks+0xce>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001550:	2302      	movs	r3, #2
 8001552:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001554:	4641      	mov	r1, r8
 8001556:	6820      	ldr	r0, [r4, #0]
 8001558:	f001 f836 	bl	80025c8 <SDMMC_CmdReadMultiBlock>
 800155c:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 800155e:	f1ba 0f00 	cmp.w	sl, #0
 8001562:	d10a      	bne.n	800157a <HAL_SD_ReadBlocks+0xde>
    dataremaining = config.DataLength;
 8001564:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001568:	e02f      	b.n	80015ca <HAL_SD_ReadBlocks+0x12e>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800156a:	2301      	movs	r3, #1
 800156c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800156e:	4641      	mov	r1, r8
 8001570:	6820      	ldr	r0, [r4, #0]
 8001572:	f001 f811 	bl	8002598 <SDMMC_CmdReadSingleBlock>
 8001576:	4682      	mov	sl, r0
 8001578:	e7f1      	b.n	800155e <HAL_SD_ReadBlocks+0xc2>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	4a60      	ldr	r2, [pc, #384]	; (8001700 <HAL_SD_ReadBlocks+0x264>)
 800157e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001580:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001582:	ea43 030a 	orr.w	r3, r3, sl
 8001586:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001588:	2001      	movs	r0, #1
 800158a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800158e:	2300      	movs	r3, #0
 8001590:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001592:	e798      	b.n	80014c6 <HAL_SD_ReadBlocks+0x2a>
          data = SDIO_ReadFIFO(hsd->Instance);
 8001594:	6820      	ldr	r0, [r4, #0]
 8001596:	f000 feab 	bl	80022f0 <SDIO_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800159a:	7028      	strb	r0, [r5, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800159c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80015a0:	706b      	strb	r3, [r5, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80015a2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80015a6:	70ab      	strb	r3, [r5, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80015a8:	0e00      	lsrs	r0, r0, #24
 80015aa:	70e8      	strb	r0, [r5, #3]
          tempbuff++;
 80015ac:	3504      	adds	r5, #4
          dataremaining--;
 80015ae:	f1a9 0904 	sub.w	r9, r9, #4
        for(count = 0U; count < 8U; count++)
 80015b2:	f108 0801 	add.w	r8, r8, #1
 80015b6:	f1b8 0f07 	cmp.w	r8, #7
 80015ba:	d9eb      	bls.n	8001594 <HAL_SD_ReadBlocks+0xf8>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80015bc:	f001 fe44 	bl	8003248 <HAL_GetTick>
 80015c0:	1bc0      	subs	r0, r0, r7
 80015c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80015c4:	4298      	cmp	r0, r3
 80015c6:	d20f      	bcs.n	80015e8 <HAL_SD_ReadBlocks+0x14c>
 80015c8:	b173      	cbz	r3, 80015e8 <HAL_SD_ReadBlocks+0x14c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80015ca:	6820      	ldr	r0, [r4, #0]
 80015cc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80015ce:	f240 332a 	movw	r3, #810	; 0x32a
 80015d2:	421a      	tst	r2, r3
 80015d4:	d116      	bne.n	8001604 <HAL_SD_ReadBlocks+0x168>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80015d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80015d8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80015dc:	d0ee      	beq.n	80015bc <HAL_SD_ReadBlocks+0x120>
 80015de:	f1b9 0f00 	cmp.w	r9, #0
 80015e2:	d0eb      	beq.n	80015bc <HAL_SD_ReadBlocks+0x120>
        for(count = 0U; count < 8U; count++)
 80015e4:	46d0      	mov	r8, sl
 80015e6:	e7e6      	b.n	80015b6 <HAL_SD_ReadBlocks+0x11a>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80015e8:	6823      	ldr	r3, [r4, #0]
 80015ea:	4a45      	ldr	r2, [pc, #276]	; (8001700 <HAL_SD_ReadBlocks+0x264>)
 80015ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80015ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015f4:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80015f6:	2301      	movs	r3, #1
 80015f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8001600:	2003      	movs	r0, #3
 8001602:	e760      	b.n	80014c6 <HAL_SD_ReadBlocks+0x2a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001604:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001606:	f413 7f80 	tst.w	r3, #256	; 0x100
 800160a:	d008      	beq.n	800161e <HAL_SD_ReadBlocks+0x182>
 800160c:	2e01      	cmp	r6, #1
 800160e:	d906      	bls.n	800161e <HAL_SD_ReadBlocks+0x182>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001610:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001612:	2b03      	cmp	r3, #3
 8001614:	d003      	beq.n	800161e <HAL_SD_ReadBlocks+0x182>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001616:	f001 f81f 	bl	8002658 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800161a:	2800      	cmp	r0, #0
 800161c:	d137      	bne.n	800168e <HAL_SD_ReadBlocks+0x1f2>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800161e:	6823      	ldr	r3, [r4, #0]
 8001620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001622:	f012 0f08 	tst.w	r2, #8
 8001626:	d13e      	bne.n	80016a6 <HAL_SD_ReadBlocks+0x20a>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800162a:	f012 0f02 	tst.w	r2, #2
 800162e:	d146      	bne.n	80016be <HAL_SD_ReadBlocks+0x222>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001632:	f012 0f20 	tst.w	r2, #32
 8001636:	d14e      	bne.n	80016d6 <HAL_SD_ReadBlocks+0x23a>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8001638:	6820      	ldr	r0, [r4, #0]
 800163a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800163c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001640:	d055      	beq.n	80016ee <HAL_SD_ReadBlocks+0x252>
 8001642:	f1b9 0f00 	cmp.w	r9, #0
 8001646:	d052      	beq.n	80016ee <HAL_SD_ReadBlocks+0x252>
      data = SDIO_ReadFIFO(hsd->Instance);
 8001648:	f000 fe52 	bl	80022f0 <SDIO_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 800164c:	7028      	strb	r0, [r5, #0]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800164e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8001652:	706b      	strb	r3, [r5, #1]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001654:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8001658:	70ab      	strb	r3, [r5, #2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800165a:	0e00      	lsrs	r0, r0, #24
 800165c:	70e8      	strb	r0, [r5, #3]
      tempbuff++;
 800165e:	3504      	adds	r5, #4
      dataremaining--;
 8001660:	f1a9 0904 	sub.w	r9, r9, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001664:	f001 fdf0 	bl	8003248 <HAL_GetTick>
 8001668:	1bc0      	subs	r0, r0, r7
 800166a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800166c:	4298      	cmp	r0, r3
 800166e:	d201      	bcs.n	8001674 <HAL_SD_ReadBlocks+0x1d8>
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1e1      	bne.n	8001638 <HAL_SD_ReadBlocks+0x19c>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001674:	6823      	ldr	r3, [r4, #0]
 8001676:	4a22      	ldr	r2, [pc, #136]	; (8001700 <HAL_SD_ReadBlocks+0x264>)
 8001678:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800167a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800167c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001680:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001682:	2001      	movs	r0, #1
 8001684:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001688:	2300      	movs	r3, #0
 800168a:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 800168c:	e71b      	b.n	80014c6 <HAL_SD_ReadBlocks+0x2a>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	491b      	ldr	r1, [pc, #108]	; (8001700 <HAL_SD_ReadBlocks+0x264>)
 8001692:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001694:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001696:	4303      	orrs	r3, r0
 8001698:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800169a:	2001      	movs	r0, #1
 800169c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 80016a4:	e70f      	b.n	80014c6 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80016a6:	4a16      	ldr	r2, [pc, #88]	; (8001700 <HAL_SD_ReadBlocks+0x264>)
 80016a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80016aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016ac:	f043 0308 	orr.w	r3, r3, #8
 80016b0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80016b2:	2001      	movs	r0, #1
 80016b4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80016b8:	2300      	movs	r3, #0
 80016ba:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80016bc:	e703      	b.n	80014c6 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <HAL_SD_ReadBlocks+0x264>)
 80016c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80016c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80016ca:	2001      	movs	r0, #1
 80016cc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80016d4:	e6f7      	b.n	80014c6 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <HAL_SD_ReadBlocks+0x264>)
 80016d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80016da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016dc:	f043 0320 	orr.w	r3, r3, #32
 80016e0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80016e2:	2001      	movs	r0, #1
 80016e4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80016ec:	e6eb      	b.n	80014c6 <HAL_SD_ReadBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80016ee:	f240 533a 	movw	r3, #1338	; 0x53a
 80016f2:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80016f4:	2301      	movs	r3, #1
 80016f6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 80016fa:	2000      	movs	r0, #0
 80016fc:	e6e3      	b.n	80014c6 <HAL_SD_ReadBlocks+0x2a>
 80016fe:	bf00      	nop
 8001700:	004005ff 	.word	0x004005ff

08001704 <HAL_SD_WriteBlocks>:
{
 8001704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001708:	b088      	sub	sp, #32
 800170a:	4604      	mov	r4, r0
 800170c:	460d      	mov	r5, r1
 800170e:	4690      	mov	r8, r2
 8001710:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 8001712:	f001 fd99 	bl	8003248 <HAL_GetTick>
  if(NULL == pData)
 8001716:	b16d      	cbz	r5, 8001734 <HAL_SD_WriteBlocks+0x30>
 8001718:	4607      	mov	r7, r0
  if(hsd->State == HAL_SD_STATE_READY)
 800171a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b01      	cmp	r3, #1
 8001722:	d00d      	beq.n	8001740 <HAL_SD_WriteBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001724:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001726:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800172a:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800172c:	2001      	movs	r0, #1
}
 800172e:	b008      	add	sp, #32
 8001730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001734:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001736:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800173a:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800173c:	2001      	movs	r0, #1
 800173e:	e7f6      	b.n	800172e <HAL_SD_WriteBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001740:	2300      	movs	r3, #0
 8001742:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001744:	eb08 0306 	add.w	r3, r8, r6
 8001748:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800174a:	4293      	cmp	r3, r2
 800174c:	d81b      	bhi.n	8001786 <HAL_SD_WriteBlocks+0x82>
    hsd->State = HAL_SD_STATE_BUSY;
 800174e:	2303      	movs	r3, #3
 8001750:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	2200      	movs	r2, #0
 8001758:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800175a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800175c:	2b01      	cmp	r3, #1
 800175e:	d001      	beq.n	8001764 <HAL_SD_WriteBlocks+0x60>
      add *= 512U;
 8001760:	ea4f 2848 	mov.w	r8, r8, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001764:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001768:	6820      	ldr	r0, [r4, #0]
 800176a:	f000 fefd 	bl	8002568 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 800176e:	4603      	mov	r3, r0
 8001770:	b178      	cbz	r0, 8001792 <HAL_SD_WriteBlocks+0x8e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001772:	6822      	ldr	r2, [r4, #0]
 8001774:	4967      	ldr	r1, [pc, #412]	; (8001914 <HAL_SD_WriteBlocks+0x210>)
 8001776:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001778:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800177a:	4318      	orrs	r0, r3
 800177c:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800177e:	2001      	movs	r0, #1
 8001780:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8001784:	e7d3      	b.n	800172e <HAL_SD_WriteBlocks+0x2a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001786:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001788:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800178c:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 800178e:	2001      	movs	r0, #1
 8001790:	e7cd      	b.n	800172e <HAL_SD_WriteBlocks+0x2a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001798:	0273      	lsls	r3, r6, #9
 800179a:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800179c:	2390      	movs	r3, #144	; 0x90
 800179e:	9304      	str	r3, [sp, #16]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80017a0:	2300      	movs	r3, #0
 80017a2:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80017a4:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80017a6:	2301      	movs	r3, #1
 80017a8:	9307      	str	r3, [sp, #28]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80017aa:	a902      	add	r1, sp, #8
 80017ac:	6820      	ldr	r0, [r4, #0]
 80017ae:	f000 fec9 	bl	8002544 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 80017b2:	2e01      	cmp	r6, #1
 80017b4:	d90c      	bls.n	80017d0 <HAL_SD_WriteBlocks+0xcc>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80017b6:	2320      	movs	r3, #32
 80017b8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80017ba:	4641      	mov	r1, r8
 80017bc:	6820      	ldr	r0, [r4, #0]
 80017be:	f000 ff33 	bl	8002628 <SDMMC_CmdWriteMultiBlock>
 80017c2:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 80017c4:	f1ba 0f00 	cmp.w	sl, #0
 80017c8:	d10a      	bne.n	80017e0 <HAL_SD_WriteBlocks+0xdc>
    dataremaining = config.DataLength;
 80017ca:	f8dd 900c 	ldr.w	r9, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80017ce:	e033      	b.n	8001838 <HAL_SD_WriteBlocks+0x134>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80017d0:	2310      	movs	r3, #16
 80017d2:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80017d4:	4641      	mov	r1, r8
 80017d6:	6820      	ldr	r0, [r4, #0]
 80017d8:	f000 ff0e 	bl	80025f8 <SDMMC_CmdWriteSingleBlock>
 80017dc:	4682      	mov	sl, r0
 80017de:	e7f1      	b.n	80017c4 <HAL_SD_WriteBlocks+0xc0>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	4a4c      	ldr	r2, [pc, #304]	; (8001914 <HAL_SD_WriteBlocks+0x210>)
 80017e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80017e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017e8:	ea43 030a 	orr.w	r3, r3, sl
 80017ec:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80017ee:	2001      	movs	r0, #1
 80017f0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80017f8:	e799      	b.n	800172e <HAL_SD_WriteBlocks+0x2a>
          data = (uint32_t)(*tempbuff);
 80017fa:	782b      	ldrb	r3, [r5, #0]
          data |= ((uint32_t)(*tempbuff) << 8U);
 80017fc:	786a      	ldrb	r2, [r5, #1]
 80017fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
          data |= ((uint32_t)(*tempbuff) << 16U);
 8001802:	78aa      	ldrb	r2, [r5, #2]
 8001804:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
          data |= ((uint32_t)(*tempbuff) << 24U);
 8001808:	78ea      	ldrb	r2, [r5, #3]
 800180a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800180e:	a908      	add	r1, sp, #32
 8001810:	f841 3d1c 	str.w	r3, [r1, #-28]!
          tempbuff++;
 8001814:	3504      	adds	r5, #4
          dataremaining--;
 8001816:	f1a9 0904 	sub.w	r9, r9, #4
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800181a:	6820      	ldr	r0, [r4, #0]
 800181c:	f000 fd6b 	bl	80022f6 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8001820:	f108 0801 	add.w	r8, r8, #1
 8001824:	f1b8 0f07 	cmp.w	r8, #7
 8001828:	d9e7      	bls.n	80017fa <HAL_SD_WriteBlocks+0xf6>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800182a:	f001 fd0d 	bl	8003248 <HAL_GetTick>
 800182e:	1bc0      	subs	r0, r0, r7
 8001830:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001832:	4298      	cmp	r0, r3
 8001834:	d20f      	bcs.n	8001856 <HAL_SD_WriteBlocks+0x152>
 8001836:	b173      	cbz	r3, 8001856 <HAL_SD_WriteBlocks+0x152>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001838:	6820      	ldr	r0, [r4, #0]
 800183a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800183c:	f240 331a 	movw	r3, #794	; 0x31a
 8001840:	421a      	tst	r2, r3
 8001842:	d116      	bne.n	8001872 <HAL_SD_WriteBlocks+0x16e>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8001844:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001846:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800184a:	d0ee      	beq.n	800182a <HAL_SD_WriteBlocks+0x126>
 800184c:	f1b9 0f00 	cmp.w	r9, #0
 8001850:	d0eb      	beq.n	800182a <HAL_SD_WriteBlocks+0x126>
        for(count = 0U; count < 8U; count++)
 8001852:	46d0      	mov	r8, sl
 8001854:	e7e6      	b.n	8001824 <HAL_SD_WriteBlocks+0x120>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001856:	6823      	ldr	r3, [r4, #0]
 8001858:	4a2e      	ldr	r2, [pc, #184]	; (8001914 <HAL_SD_WriteBlocks+0x210>)
 800185a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800185c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800185e:	ea43 030a 	orr.w	r3, r3, sl
 8001862:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001864:	2301      	movs	r3, #1
 8001866:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800186a:	2300      	movs	r3, #0
 800186c:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800186e:	2003      	movs	r0, #3
 8001870:	e75d      	b.n	800172e <HAL_SD_WriteBlocks+0x2a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001872:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001874:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001878:	d007      	beq.n	800188a <HAL_SD_WriteBlocks+0x186>
 800187a:	2e01      	cmp	r6, #1
 800187c:	d905      	bls.n	800188a <HAL_SD_WriteBlocks+0x186>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800187e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001880:	2b03      	cmp	r3, #3
 8001882:	d002      	beq.n	800188a <HAL_SD_WriteBlocks+0x186>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001884:	f000 fee8 	bl	8002658 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8001888:	b9c0      	cbnz	r0, 80018bc <HAL_SD_WriteBlocks+0x1b8>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800188e:	f012 0f08 	tst.w	r2, #8
 8001892:	d11f      	bne.n	80018d4 <HAL_SD_WriteBlocks+0x1d0>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001896:	f012 0f02 	tst.w	r2, #2
 800189a:	d127      	bne.n	80018ec <HAL_SD_WriteBlocks+0x1e8>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800189c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800189e:	f012 0f10 	tst.w	r2, #16
 80018a2:	d02f      	beq.n	8001904 <HAL_SD_WriteBlocks+0x200>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80018a4:	4a1b      	ldr	r2, [pc, #108]	; (8001914 <HAL_SD_WriteBlocks+0x210>)
 80018a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80018a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018aa:	f043 0310 	orr.w	r3, r3, #16
 80018ae:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80018b0:	2001      	movs	r0, #1
 80018b2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80018ba:	e738      	b.n	800172e <HAL_SD_WriteBlocks+0x2a>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	4915      	ldr	r1, [pc, #84]	; (8001914 <HAL_SD_WriteBlocks+0x210>)
 80018c0:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80018c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018c4:	4303      	orrs	r3, r0
 80018c6:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80018c8:	2001      	movs	r0, #1
 80018ca:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 80018d2:	e72c      	b.n	800172e <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80018d4:	4a0f      	ldr	r2, [pc, #60]	; (8001914 <HAL_SD_WriteBlocks+0x210>)
 80018d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80018d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018da:	f043 0308 	orr.w	r3, r3, #8
 80018de:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80018e0:	2001      	movs	r0, #1
 80018e2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80018ea:	e720      	b.n	800172e <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80018ec:	4a09      	ldr	r2, [pc, #36]	; (8001914 <HAL_SD_WriteBlocks+0x210>)
 80018ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80018f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018f2:	f043 0302 	orr.w	r3, r3, #2
 80018f6:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80018f8:	2001      	movs	r0, #1
 80018fa:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80018fe:	2300      	movs	r3, #0
 8001900:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001902:	e714      	b.n	800172e <HAL_SD_WriteBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001904:	f240 523a 	movw	r2, #1338	; 0x53a
 8001908:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800190a:	2301      	movs	r3, #1
 800190c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8001910:	2000      	movs	r0, #0
 8001912:	e70c      	b.n	800172e <HAL_SD_WriteBlocks+0x2a>
 8001914:	004005ff 	.word	0x004005ff

08001918 <HAL_SD_GetCardCSD>:
{
 8001918:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800191a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800191c:	0f9b      	lsrs	r3, r3, #30
 800191e:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8001920:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001922:	f3c3 6383 	ubfx	r3, r3, #26, #4
 8001926:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8001928:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8001932:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8001936:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8001938:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 800193c:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800193e:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8001942:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8001944:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001946:	0d1b      	lsrs	r3, r3, #20
 8001948:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800194a:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8001954:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001956:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800195a:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800195c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800195e:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8001962:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8001964:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001966:	f3c3 3340 	ubfx	r3, r3, #13, #1
 800196a:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800196c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800196e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8001972:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8001974:	2300      	movs	r3, #0
 8001976:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8001978:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800197a:	2b00      	cmp	r3, #0
 800197c:	f040 8088 	bne.w	8001a90 <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8001980:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8001982:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001986:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 800198a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800198c:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8001990:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8001992:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8001994:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 8001998:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800199a:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80019a4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80019a6:	f3c3 5342 	ubfx	r3, r3, #21, #3
 80019aa:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80019ac:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80019ae:	f3c3 4382 	ubfx	r3, r3, #18, #3
 80019b2:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80019b4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80019b6:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 80019ba:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80019bc:	690b      	ldr	r3, [r1, #16]
 80019be:	3301      	adds	r3, #1
 80019c0:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80019c2:	7e0a      	ldrb	r2, [r1, #24]
 80019c4:	f002 0207 	and.w	r2, r2, #7
 80019c8:	3202      	adds	r2, #2
 80019ca:	fa03 f202 	lsl.w	r2, r3, r2
 80019ce:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80019d0:	7a0b      	ldrb	r3, [r1, #8]
 80019d2:	f003 040f 	and.w	r4, r3, #15
 80019d6:	2301      	movs	r3, #1
 80019d8:	40a3      	lsls	r3, r4
 80019da:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80019dc:	0a5b      	lsrs	r3, r3, #9
 80019de:	fb03 f302 	mul.w	r3, r3, r2
 80019e2:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80019e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e8:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80019ea:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80019ec:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80019f0:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80019f2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80019f4:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 80019f8:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80019fa:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80019fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a00:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8001a02:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001a04:	0fdb      	lsrs	r3, r3, #31
 8001a06:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8001a08:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001a0a:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8001a0e:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8001a10:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001a12:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8001a16:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8001a18:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001a1a:	f3c3 5383 	ubfx	r3, r3, #22, #4
 8001a1e:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8001a20:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001a22:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8001a26:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8001a30:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 8001a34:	f002 0201 	and.w	r2, r2, #1
 8001a38:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8001a3c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8001a3e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8001a42:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8001a46:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8001a48:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8001a4c:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8001a50:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8001a52:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8001a56:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8001a5a:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8001a5c:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8001a60:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8001a64:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8001a66:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8001a6a:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8001a6e:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8001a70:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8001a74:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8001a78:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8001a7a:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8001a7e:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8001a82:	2201      	movs	r2, #1
 8001a84:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 8001a88:	4618      	mov	r0, r3
}
 8001a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a8e:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d00b      	beq.n	8001aac <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001a94:	6803      	ldr	r3, [r0, #0]
 8001a96:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <HAL_SD_GetCardCSD+0x1b8>)
 8001a98:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001a9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	e7ee      	b.n	8001a8a <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8001aac:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001aae:	041b      	lsls	r3, r3, #16
 8001ab0:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8001ab4:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8001abc:	690b      	ldr	r3, [r1, #16]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	029b      	lsls	r3, r3, #10
 8001ac2:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8001ac4:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8001ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aca:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8001acc:	6603      	str	r3, [r0, #96]	; 0x60
 8001ace:	e78c      	b.n	80019ea <HAL_SD_GetCardCSD+0xd2>
 8001ad0:	004005ff 	.word	0x004005ff

08001ad4 <SD_InitCard>:
{
 8001ad4:	b570      	push	{r4, r5, r6, lr}
 8001ad6:	b090      	sub	sp, #64	; 0x40
 8001ad8:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8001ada:	2301      	movs	r3, #1
 8001adc:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8001ae0:	6800      	ldr	r0, [r0, #0]
 8001ae2:	f000 fc15 	bl	8002310 <SDIO_GetPowerState>
 8001ae6:	2800      	cmp	r0, #0
 8001ae8:	d06c      	beq.n	8001bc4 <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8001aea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d145      	bne.n	8001b7c <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8001af0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d15d      	bne.n	8001bb2 <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8001af6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d01d      	beq.n	8001b38 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8001afc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8001b00:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001b02:	0409      	lsls	r1, r1, #16
 8001b04:	6820      	ldr	r0, [r4, #0]
 8001b06:	f000 fe79 	bl	80027fc <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001b0a:	4605      	mov	r5, r0
 8001b0c:	2800      	cmp	r0, #0
 8001b0e:	d15b      	bne.n	8001bc8 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001b10:	2100      	movs	r1, #0
 8001b12:	6820      	ldr	r0, [r4, #0]
 8001b14:	f000 fc15 	bl	8002342 <SDIO_GetResponse>
 8001b18:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	6820      	ldr	r0, [r4, #0]
 8001b1e:	f000 fc10 	bl	8002342 <SDIO_GetResponse>
 8001b22:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8001b24:	2108      	movs	r1, #8
 8001b26:	6820      	ldr	r0, [r4, #0]
 8001b28:	f000 fc0b 	bl	8002342 <SDIO_GetResponse>
 8001b2c:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8001b2e:	210c      	movs	r1, #12
 8001b30:	6820      	ldr	r0, [r4, #0]
 8001b32:	f000 fc06 	bl	8002342 <SDIO_GetResponse>
 8001b36:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8001b38:	2104      	movs	r1, #4
 8001b3a:	6820      	ldr	r0, [r4, #0]
 8001b3c:	f000 fc01 	bl	8002342 <SDIO_GetResponse>
 8001b40:	0d00      	lsrs	r0, r0, #20
 8001b42:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8001b44:	a905      	add	r1, sp, #20
 8001b46:	4620      	mov	r0, r4
 8001b48:	f7ff fee6 	bl	8001918 <HAL_SD_GetCardCSD>
 8001b4c:	2800      	cmp	r0, #0
 8001b4e:	d13e      	bne.n	8001bce <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8001b50:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001b52:	0412      	lsls	r2, r2, #16
 8001b54:	2300      	movs	r3, #0
 8001b56:	6820      	ldr	r0, [r4, #0]
 8001b58:	f000 fd98 	bl	800268c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001b5c:	4605      	mov	r5, r0
 8001b5e:	bb98      	cbnz	r0, 8001bc8 <SD_InitCard+0xf4>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8001b60:	4623      	mov	r3, r4
 8001b62:	f853 6b10 	ldr.w	r6, [r3], #16
 8001b66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b6a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8001b6e:	3404      	adds	r4, #4
 8001b70:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001b74:	4630      	mov	r0, r6
 8001b76:	f000 fb9f 	bl	80022b8 <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 8001b7a:	e025      	b.n	8001bc8 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8001b7c:	6820      	ldr	r0, [r4, #0]
 8001b7e:	f000 fe28 	bl	80027d2 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001b82:	4605      	mov	r5, r0
 8001b84:	bb00      	cbnz	r0, 8001bc8 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001b86:	2100      	movs	r1, #0
 8001b88:	6820      	ldr	r0, [r4, #0]
 8001b8a:	f000 fbda 	bl	8002342 <SDIO_GetResponse>
 8001b8e:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001b90:	2104      	movs	r1, #4
 8001b92:	6820      	ldr	r0, [r4, #0]
 8001b94:	f000 fbd5 	bl	8002342 <SDIO_GetResponse>
 8001b98:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8001b9a:	2108      	movs	r1, #8
 8001b9c:	6820      	ldr	r0, [r4, #0]
 8001b9e:	f000 fbd0 	bl	8002342 <SDIO_GetResponse>
 8001ba2:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8001ba4:	210c      	movs	r1, #12
 8001ba6:	6820      	ldr	r0, [r4, #0]
 8001ba8:	f000 fbcb 	bl	8002342 <SDIO_GetResponse>
 8001bac:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 8001bb0:	e79e      	b.n	8001af0 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8001bb2:	f10d 0112 	add.w	r1, sp, #18
 8001bb6:	6820      	ldr	r0, [r4, #0]
 8001bb8:	f000 fe35 	bl	8002826 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001bbc:	4605      	mov	r5, r0
 8001bbe:	2800      	cmp	r0, #0
 8001bc0:	d099      	beq.n	8001af6 <SD_InitCard+0x22>
 8001bc2:	e001      	b.n	8001bc8 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8001bc4:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8001bc8:	4628      	mov	r0, r5
 8001bca:	b010      	add	sp, #64	; 0x40
 8001bcc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001bce:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8001bd2:	e7f9      	b.n	8001bc8 <SD_InitCard+0xf4>

08001bd4 <HAL_SD_InitCard>:
{
 8001bd4:	b570      	push	{r4, r5, r6, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	4605      	mov	r5, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001bde:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001be0:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001be2:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001be4:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001be6:	2376      	movs	r3, #118	; 0x76
 8001be8:	9309      	str	r3, [sp, #36]	; 0x24
  status = SDIO_Init(hsd->Instance, Init);
 8001bea:	ab0a      	add	r3, sp, #40	; 0x28
 8001bec:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8001bf0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8001bf4:	ab04      	add	r3, sp, #16
 8001bf6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bf8:	6828      	ldr	r0, [r5, #0]
 8001bfa:	f000 fb5d 	bl	80022b8 <SDIO_Init>
  if(status != HAL_OK)
 8001bfe:	b118      	cbz	r0, 8001c08 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 8001c00:	2401      	movs	r4, #1
}
 8001c02:	4620      	mov	r0, r4
 8001c04:	b00a      	add	sp, #40	; 0x28
 8001c06:	bd70      	pop	{r4, r5, r6, pc}
 8001c08:	4604      	mov	r4, r0
  __HAL_SD_DISABLE(hsd);
 8001c0a:	4e10      	ldr	r6, [pc, #64]	; (8001c4c <HAL_SD_InitCard+0x78>)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	6033      	str	r3, [r6, #0]
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001c10:	6828      	ldr	r0, [r5, #0]
 8001c12:	f000 fb75 	bl	8002300 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8001c16:	2301      	movs	r3, #1
 8001c18:	6033      	str	r3, [r6, #0]
  errorstate = SD_PowerON(hsd);
 8001c1a:	4628      	mov	r0, r5
 8001c1c:	f7ff faee 	bl	80011fc <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001c20:	4603      	mov	r3, r0
 8001c22:	b130      	cbz	r0, 8001c32 <HAL_SD_InitCard+0x5e>
    hsd->State = HAL_SD_STATE_READY;
 8001c24:	2401      	movs	r4, #1
 8001c26:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001c2a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8001c2c:	4318      	orrs	r0, r3
 8001c2e:	63a8      	str	r0, [r5, #56]	; 0x38
    return HAL_ERROR;
 8001c30:	e7e7      	b.n	8001c02 <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 8001c32:	4628      	mov	r0, r5
 8001c34:	f7ff ff4e 	bl	8001ad4 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2800      	cmp	r0, #0
 8001c3c:	d0e1      	beq.n	8001c02 <HAL_SD_InitCard+0x2e>
    hsd->State = HAL_SD_STATE_READY;
 8001c3e:	2401      	movs	r4, #1
 8001c40:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001c44:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8001c46:	4318      	orrs	r0, r3
 8001c48:	63a8      	str	r0, [r5, #56]	; 0x38
    return HAL_ERROR;
 8001c4a:	e7da      	b.n	8001c02 <HAL_SD_InitCard+0x2e>
 8001c4c:	422580a0 	.word	0x422580a0

08001c50 <HAL_SD_Init>:
  if(hsd == NULL)
 8001c50:	b1c0      	cbz	r0, 8001c84 <HAL_SD_Init+0x34>
{
 8001c52:	b510      	push	{r4, lr}
 8001c54:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8001c56:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8001c5a:	b17b      	cbz	r3, 8001c7c <HAL_SD_Init+0x2c>
  hsd->State = HAL_SD_STATE_BUSY;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001c62:	4620      	mov	r0, r4
 8001c64:	f7ff ffb6 	bl	8001bd4 <HAL_SD_InitCard>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	b970      	cbnz	r0, 8001c8a <HAL_SD_Init+0x3a>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	63a2      	str	r2, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8001c70:	6322      	str	r2, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8001c72:	2201      	movs	r2, #1
 8001c74:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8001c7c:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8001c7e:	f7fe fe4f 	bl	8000920 <HAL_SD_MspInit>
 8001c82:	e7eb      	b.n	8001c5c <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	4770      	bx	lr
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e7f4      	b.n	8001c78 <HAL_SD_Init+0x28>

08001c8e <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8001c8e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001c90:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8001c92:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001c94:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8001c96:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001c98:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8001c9a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001c9c:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8001c9e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001ca0:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8001ca2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001ca4:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8001ca6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001ca8:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8001caa:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001cac:	61cb      	str	r3, [r1, #28]
}
 8001cae:	2000      	movs	r0, #0
 8001cb0:	4770      	bx	lr
	...

08001cb4 <HAL_SD_ConfigWideBusOperation>:
{
 8001cb4:	b530      	push	{r4, r5, lr}
 8001cb6:	b08b      	sub	sp, #44	; 0x2c
 8001cb8:	4604      	mov	r4, r0
 8001cba:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8001cc2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d01c      	beq.n	8001d02 <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8001cc8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001ccc:	d008      	beq.n	8001ce0 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8001cce:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001cd2:	d00a      	beq.n	8001cea <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8001cd4:	b179      	cbz	r1, 8001cf6 <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001cd6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001cd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001cdc:	6383      	str	r3, [r0, #56]	; 0x38
 8001cde:	e014      	b.n	8001d0a <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001ce0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	6383      	str	r3, [r0, #56]	; 0x38
 8001ce8:	e00f      	b.n	8001d0a <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8001cea:	f7ff fb6a 	bl	80013c2 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8001cee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cf0:	4318      	orrs	r0, r3
 8001cf2:	63a0      	str	r0, [r4, #56]	; 0x38
 8001cf4:	e009      	b.n	8001d0a <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8001cf6:	f7ff fb8f 	bl	8001418 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8001cfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cfc:	4318      	orrs	r0, r3
 8001cfe:	63a0      	str	r0, [r4, #56]	; 0x38
 8001d00:	e003      	b.n	8001d0a <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001d02:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d08:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8001d0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d0c:	b13b      	cbz	r3, 8001d1e <HAL_SD_ConfigWideBusOperation+0x6a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d0e:	6823      	ldr	r3, [r4, #0]
 8001d10:	4a10      	ldr	r2, [pc, #64]	; (8001d54 <HAL_SD_ConfigWideBusOperation+0xa0>)
 8001d12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001d14:	2001      	movs	r0, #1
 8001d16:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8001d1a:	b00b      	add	sp, #44	; 0x2c
 8001d1c:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8001d1e:	6863      	ldr	r3, [r4, #4]
 8001d20:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8001d22:	68a3      	ldr	r3, [r4, #8]
 8001d24:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8001d26:	68e3      	ldr	r3, [r4, #12]
 8001d28:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8001d2a:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8001d2c:	6963      	ldr	r3, [r4, #20]
 8001d2e:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8001d30:	69a3      	ldr	r3, [r4, #24]
 8001d32:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 8001d34:	ab0a      	add	r3, sp, #40	; 0x28
 8001d36:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8001d3a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8001d3e:	ab04      	add	r3, sp, #16
 8001d40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d42:	6820      	ldr	r0, [r4, #0]
 8001d44:	f000 fab8 	bl	80022b8 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8001d4e:	2000      	movs	r0, #0
 8001d50:	e7e3      	b.n	8001d1a <HAL_SD_ConfigWideBusOperation+0x66>
 8001d52:	bf00      	nop
 8001d54:	004005ff 	.word	0x004005ff

08001d58 <HAL_SD_GetCardState>:
{
 8001d58:	b510      	push	{r4, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8001d5e:	a902      	add	r1, sp, #8
 8001d60:	2300      	movs	r3, #0
 8001d62:	f841 3d04 	str.w	r3, [r1, #-4]!
  errorstate = SD_SendStatus(hsd, &resp1);
 8001d66:	f7ff fb82 	bl	800146e <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001d6a:	b118      	cbz	r0, 8001d74 <HAL_SD_GetCardState+0x1c>
 8001d6c:	4603      	mov	r3, r0
    hsd->ErrorCode |= errorstate;
 8001d6e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001d70:	4318      	orrs	r0, r3
 8001d72:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8001d74:	9801      	ldr	r0, [sp, #4]
 8001d76:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8001d7a:	b002      	add	sp, #8
 8001d7c:	bd10      	pop	{r4, pc}
	...

08001d80 <LL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Force and Release reset on clock of GPIOx Port */
  if (GPIOx == GPIOA)
 8001d80:	4b44      	ldr	r3, [pc, #272]	; (8001e94 <LL_GPIO_DeInit+0x114>)
 8001d82:	4298      	cmp	r0, r3
 8001d84:	d019      	beq.n	8001dba <LL_GPIO_DeInit+0x3a>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOA);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOA);
  }
  else if (GPIOx == GPIOB)
 8001d86:	4b44      	ldr	r3, [pc, #272]	; (8001e98 <LL_GPIO_DeInit+0x118>)
 8001d88:	4298      	cmp	r0, r3
 8001d8a:	d022      	beq.n	8001dd2 <LL_GPIO_DeInit+0x52>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOB);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOB);
  }
  else if (GPIOx == GPIOC)
 8001d8c:	4b43      	ldr	r3, [pc, #268]	; (8001e9c <LL_GPIO_DeInit+0x11c>)
 8001d8e:	4298      	cmp	r0, r3
 8001d90:	d02b      	beq.n	8001dea <LL_GPIO_DeInit+0x6a>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOC);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOC);
  }
#if defined(GPIOD)
  else if (GPIOx == GPIOD)
 8001d92:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <LL_GPIO_DeInit+0x120>)
 8001d94:	4298      	cmp	r0, r3
 8001d96:	d034      	beq.n	8001e02 <LL_GPIO_DeInit+0x82>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOD);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOD);
  }
#endif /* GPIOD */
#if defined(GPIOE)
  else if (GPIOx == GPIOE)
 8001d98:	4b42      	ldr	r3, [pc, #264]	; (8001ea4 <LL_GPIO_DeInit+0x124>)
 8001d9a:	4298      	cmp	r0, r3
 8001d9c:	d03d      	beq.n	8001e1a <LL_GPIO_DeInit+0x9a>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOE);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOE);
  }
#endif /* GPIOE */
#if defined(GPIOF)
  else if (GPIOx == GPIOF)
 8001d9e:	4b42      	ldr	r3, [pc, #264]	; (8001ea8 <LL_GPIO_DeInit+0x128>)
 8001da0:	4298      	cmp	r0, r3
 8001da2:	d046      	beq.n	8001e32 <LL_GPIO_DeInit+0xb2>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOF);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOF);
  }
#endif /* GPIOF */
#if defined(GPIOG)
  else if (GPIOx == GPIOG)
 8001da4:	4b41      	ldr	r3, [pc, #260]	; (8001eac <LL_GPIO_DeInit+0x12c>)
 8001da6:	4298      	cmp	r0, r3
 8001da8:	d04f      	beq.n	8001e4a <LL_GPIO_DeInit+0xca>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOG);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOG);
  }
#endif /* GPIOG */
#if defined(GPIOH)
  else if (GPIOx == GPIOH)
 8001daa:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <LL_GPIO_DeInit+0x130>)
 8001dac:	4298      	cmp	r0, r3
 8001dae:	d058      	beq.n	8001e62 <LL_GPIO_DeInit+0xe2>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOH);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOH);
  }
#endif /* GPIOH */
#if defined(GPIOI)
  else if (GPIOx == GPIOI)
 8001db0:	4b40      	ldr	r3, [pc, #256]	; (8001eb4 <LL_GPIO_DeInit+0x134>)
 8001db2:	4298      	cmp	r0, r3
 8001db4:	d061      	beq.n	8001e7a <LL_GPIO_DeInit+0xfa>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOK);
  }
#endif /* GPIOK */
  else
  {
    status = ERROR;
 8001db6:	2001      	movs	r0, #1
  }

  return (status);
}
 8001db8:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8001dba:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	f042 0201 	orr.w	r2, r2, #1
 8001dc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	f022 0201 	bic.w	r2, r2, #1
 8001dcc:	611a      	str	r2, [r3, #16]
  ErrorStatus status = SUCCESS;
 8001dce:	2000      	movs	r0, #0
 8001dd0:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8001dd2:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	f042 0202 	orr.w	r2, r2, #2
 8001ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	f022 0202 	bic.w	r2, r2, #2
 8001de4:	611a      	str	r2, [r3, #16]
 8001de6:	2000      	movs	r0, #0
 8001de8:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8001dea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	f042 0204 	orr.w	r2, r2, #4
 8001df4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	f022 0204 	bic.w	r2, r2, #4
 8001dfc:	611a      	str	r2, [r3, #16]
 8001dfe:	2000      	movs	r0, #0
 8001e00:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8001e02:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	f042 0208 	orr.w	r2, r2, #8
 8001e0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	f022 0208 	bic.w	r2, r2, #8
 8001e14:	611a      	str	r2, [r3, #16]
 8001e16:	2000      	movs	r0, #0
 8001e18:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8001e1a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	f042 0210 	orr.w	r2, r2, #16
 8001e24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	f022 0210 	bic.w	r2, r2, #16
 8001e2c:	611a      	str	r2, [r3, #16]
 8001e2e:	2000      	movs	r0, #0
 8001e30:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8001e32:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	f042 0220 	orr.w	r2, r2, #32
 8001e3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	f022 0220 	bic.w	r2, r2, #32
 8001e44:	611a      	str	r2, [r3, #16]
 8001e46:	2000      	movs	r0, #0
 8001e48:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8001e4a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e5c:	611a      	str	r2, [r3, #16]
 8001e5e:	2000      	movs	r0, #0
 8001e60:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8001e62:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e74:	611a      	str	r2, [r3, #16]
 8001e76:	2000      	movs	r0, #0
 8001e78:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8001e7a:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e8c:	611a      	str	r2, [r3, #16]
 8001e8e:	2000      	movs	r0, #0
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40020000 	.word	0x40020000
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	40020800 	.word	0x40020800
 8001ea0:	40020c00 	.word	0x40020c00
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40021400 	.word	0x40021400
 8001eac:	40021800 	.word	0x40021800
 8001eb0:	40021c00 	.word	0x40021c00
 8001eb4:	40022000 	.word	0x40022000

08001eb8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001eb8:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001eba:	680a      	ldr	r2, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	fa92 f2a2 	rbit	r2, r2
 8001ec0:	fab2 f282 	clz	r2, r2
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001ec4:	e02d      	b.n	8001f22 <LL_GPIO_Init+0x6a>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001ec6:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001ec8:	68c4      	ldr	r4, [r0, #12]
 8001eca:	fa93 f5a3 	rbit	r5, r3
 8001ece:	fab5 f585 	clz	r5, r5
 8001ed2:	006d      	lsls	r5, r5, #1
 8001ed4:	2703      	movs	r7, #3
 8001ed6:	fa07 f505 	lsl.w	r5, r7, r5
 8001eda:	ea24 0405 	bic.w	r4, r4, r5
 8001ede:	fa93 f5a3 	rbit	r5, r3
 8001ee2:	fab5 f585 	clz	r5, r5
 8001ee6:	006d      	lsls	r5, r5, #1
 8001ee8:	fa06 f505 	lsl.w	r5, r6, r5
 8001eec:	432c      	orrs	r4, r5
 8001eee:	60c4      	str	r4, [r0, #12]
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001ef0:	684c      	ldr	r4, [r1, #4]
 8001ef2:	2c02      	cmp	r4, #2
 8001ef4:	d03f      	beq.n	8001f76 <LL_GPIO_Init+0xbe>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001ef6:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001ef8:	6805      	ldr	r5, [r0, #0]
 8001efa:	fa93 f6a3 	rbit	r6, r3
 8001efe:	fab6 f686 	clz	r6, r6
 8001f02:	0076      	lsls	r6, r6, #1
 8001f04:	2703      	movs	r7, #3
 8001f06:	fa07 f606 	lsl.w	r6, r7, r6
 8001f0a:	ea25 0506 	bic.w	r5, r5, r6
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa04 f303 	lsl.w	r3, r4, r3
 8001f1c:	432b      	orrs	r3, r5
 8001f1e:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8001f20:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001f22:	680b      	ldr	r3, [r1, #0]
 8001f24:	fa33 f402 	lsrs.w	r4, r3, r2
 8001f28:	d059      	beq.n	8001fde <LL_GPIO_Init+0x126>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001f2a:	2401      	movs	r4, #1
 8001f2c:	4094      	lsls	r4, r2
    if (currentpin)
 8001f2e:	4023      	ands	r3, r4
 8001f30:	d0f6      	beq.n	8001f20 <LL_GPIO_Init+0x68>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f32:	684c      	ldr	r4, [r1, #4]
 8001f34:	3c01      	subs	r4, #1
 8001f36:	2c01      	cmp	r4, #1
 8001f38:	d8c5      	bhi.n	8001ec6 <LL_GPIO_Init+0xe>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001f3a:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001f3c:	6884      	ldr	r4, [r0, #8]
 8001f3e:	fa93 f5a3 	rbit	r5, r3
 8001f42:	fab5 f585 	clz	r5, r5
 8001f46:	006d      	lsls	r5, r5, #1
 8001f48:	2703      	movs	r7, #3
 8001f4a:	fa07 f505 	lsl.w	r5, r7, r5
 8001f4e:	ea24 0405 	bic.w	r4, r4, r5
 8001f52:	fa93 f5a3 	rbit	r5, r3
 8001f56:	fab5 f585 	clz	r5, r5
 8001f5a:	006d      	lsls	r5, r5, #1
 8001f5c:	fa06 f505 	lsl.w	r5, r6, r5
 8001f60:	432c      	orrs	r4, r5
 8001f62:	6084      	str	r4, [r0, #8]
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001f64:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001f66:	6844      	ldr	r4, [r0, #4]
 8001f68:	ea24 0403 	bic.w	r4, r4, r3
 8001f6c:	fb03 f505 	mul.w	r5, r3, r5
 8001f70:	432c      	orrs	r4, r5
 8001f72:	6044      	str	r4, [r0, #4]
 8001f74:	e7a7      	b.n	8001ec6 <LL_GPIO_Init+0xe>
 8001f76:	fa93 f4a3 	rbit	r4, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001f7a:	fab4 f484 	clz	r4, r4
 8001f7e:	2c07      	cmp	r4, #7
 8001f80:	d815      	bhi.n	8001fae <LL_GPIO_Init+0xf6>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001f82:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001f84:	6a04      	ldr	r4, [r0, #32]
 8001f86:	fa93 f5a3 	rbit	r5, r3
 8001f8a:	fab5 f585 	clz	r5, r5
 8001f8e:	00ad      	lsls	r5, r5, #2
 8001f90:	270f      	movs	r7, #15
 8001f92:	fa07 f505 	lsl.w	r5, r7, r5
 8001f96:	ea24 0405 	bic.w	r4, r4, r5
 8001f9a:	fa93 f5a3 	rbit	r5, r3
 8001f9e:	fab5 f585 	clz	r5, r5
 8001fa2:	00ad      	lsls	r5, r5, #2
 8001fa4:	fa06 f505 	lsl.w	r5, r6, r5
 8001fa8:	432c      	orrs	r4, r5
 8001faa:	6204      	str	r4, [r0, #32]
 8001fac:	e7a3      	b.n	8001ef6 <LL_GPIO_Init+0x3e>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001fae:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001fb0:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8001fb2:	0a1c      	lsrs	r4, r3, #8
 8001fb4:	fa94 f7a4 	rbit	r7, r4
 8001fb8:	fab7 f787 	clz	r7, r7
 8001fbc:	00bf      	lsls	r7, r7, #2
 8001fbe:	f04f 0c0f 	mov.w	ip, #15
 8001fc2:	fa0c f707 	lsl.w	r7, ip, r7
 8001fc6:	ea26 0607 	bic.w	r6, r6, r7
 8001fca:	fa94 f4a4 	rbit	r4, r4
 8001fce:	fab4 f484 	clz	r4, r4
 8001fd2:	00a4      	lsls	r4, r4, #2
 8001fd4:	fa05 f404 	lsl.w	r4, r5, r4
 8001fd8:	4334      	orrs	r4, r6
 8001fda:	6244      	str	r4, [r0, #36]	; 0x24
 8001fdc:	e78b      	b.n	8001ef6 <LL_GPIO_Init+0x3e>
  }

  return (SUCCESS);
}
 8001fde:	2000      	movs	r0, #0
 8001fe0:	bcf0      	pop	{r4, r5, r6, r7}
 8001fe2:	4770      	bx	lr

08001fe4 <LL_RCC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RCC registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_RCC_DeInit(void)
{
 8001fe4:	b082      	sub	sp, #8
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001fe6:	4a23      	ldr	r2, [pc, #140]	; (8002074 <LL_RCC_DeInit+0x90>)
 8001fe8:	6813      	ldr	r3, [r2, #0]
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001ff0:	4b20      	ldr	r3, [pc, #128]	; (8002074 <LL_RCC_DeInit+0x90>)
 8001ff2:	681b      	ldr	r3, [r3, #0]

  /* Set HSION bit */
  LL_RCC_HSI_Enable();

  /* Wait for HSI READY bit */
  while(LL_RCC_HSI_IsReady() != 1U)
 8001ff4:	f013 0f02 	tst.w	r3, #2
 8001ff8:	d0fa      	beq.n	8001ff0 <LL_RCC_DeInit+0xc>
  {}

  /* Reset CFGR register */
  LL_RCC_WriteReg(CFGR, 0x00000000U);
 8001ffa:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <LL_RCC_DeInit+0x90>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]

  /* Read CR register */
  vl_mask = LL_RCC_ReadReg(CR);
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	9201      	str	r2, [sp, #4]

  /* Reset HSEON, HSEBYP, PLLON, CSSON bits */
  CLEAR_BIT(vl_mask,
 8002004:	9a01      	ldr	r2, [sp, #4]
 8002006:	f022 7286 	bic.w	r2, r2, #17563648	; 0x10c0000
 800200a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800200e:	9201      	str	r2, [sp, #4]
  CLEAR_BIT(vl_mask, RCC_CR_PLLSAION);
#endif /* RCC_PLLSAI_SUPPORT */

#if defined(RCC_PLLI2S_SUPPORT)
  /* Reset PLLI2SON bit */
  CLEAR_BIT(vl_mask, RCC_CR_PLLI2SON);
 8002010:	9a01      	ldr	r2, [sp, #4]
 8002012:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002016:	9201      	str	r2, [sp, #4]
#endif /* RCC_PLLI2S_SUPPORT */

  /* Write new value in CR register */
  LL_RCC_WriteReg(CR, vl_mask);
 8002018:	9a01      	ldr	r2, [sp, #4]
 800201a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002022:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002026:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <LL_RCC_DeInit+0x90>)
 800202a:	681b      	ldr	r3, [r3, #0]

  /* Set HSITRIM bits to the reset value*/
  LL_RCC_HSI_SetCalibTrimming(0x10U);

  /* Wait for PLL READY bit to be reset */
  while(LL_RCC_PLL_IsReady() != 0U)
 800202c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002030:	d1fa      	bne.n	8002028 <LL_RCC_DeInit+0x44>
  {}

  /* Reset PLLCFGR register */
  LL_RCC_WriteReg(PLLCFGR, RCC_PLLCFGR_RST_VALUE);
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <LL_RCC_DeInit+0x90>)
 8002034:	4a10      	ldr	r2, [pc, #64]	; (8002078 <LL_RCC_DeInit+0x94>)
 8002036:	605a      	str	r2, [r3, #4]

#if defined(RCC_PLLI2S_SUPPORT)
  /* Reset PLLI2SCFGR register */
  LL_RCC_WriteReg(PLLI2SCFGR, RCC_PLLI2SCFGR_RST_VALUE);
 8002038:	4a10      	ldr	r2, [pc, #64]	; (800207c <LL_RCC_DeInit+0x98>)
 800203a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  /* Reset PLLSAICFGR register */
  LL_RCC_WriteReg(PLLSAICFGR, RCC_PLLSAICFGR_RST_VALUE);
#endif /* RCC_PLLSAI_SUPPORT */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8002044:	60da      	str	r2, [r3, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800204c:	60da      	str	r2, [r3, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	f442 021f 	orr.w	r2, r2, #10420224	; 0x9f0000
 8002054:	60da      	str	r2, [r3, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800205c:	60da      	str	r2, [r3, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800205e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002060:	f022 0201 	bic.w	r2, r2, #1
 8002064:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002066:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002068:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800206c:	675a      	str	r2, [r3, #116]	; 0x74

  return SUCCESS;
}
 800206e:	2000      	movs	r0, #0
 8002070:	b002      	add	sp, #8
 8002072:	4770      	bx	lr
 8002074:	40023800 	.word	0x40023800
 8002078:	24003010 	.word	0x24003010
 800207c:	20003000 	.word	0x20003000

08002080 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002080:	4b03      	ldr	r3, [pc, #12]	; (8002090 <RCC_GetHCLKClockFreq+0x10>)
 8002082:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002084:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002088:	4a02      	ldr	r2, [pc, #8]	; (8002094 <RCC_GetHCLKClockFreq+0x14>)
 800208a:	5cd3      	ldrb	r3, [r2, r3]
}
 800208c:	40d8      	lsrs	r0, r3
 800208e:	4770      	bx	lr
 8002090:	40023800 	.word	0x40023800
 8002094:	08006110 	.word	0x08006110

08002098 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002098:	4b03      	ldr	r3, [pc, #12]	; (80020a8 <RCC_GetPCLK1ClockFreq+0x10>)
 800209a:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800209c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80020a0:	4a02      	ldr	r2, [pc, #8]	; (80020ac <RCC_GetPCLK1ClockFreq+0x14>)
 80020a2:	5cd3      	ldrb	r3, [r2, r3]
}
 80020a4:	40d8      	lsrs	r0, r3
 80020a6:	4770      	bx	lr
 80020a8:	40023800 	.word	0x40023800
 80020ac:	08006120 	.word	0x08006120

080020b0 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <RCC_GetPCLK2ClockFreq+0x10>)
 80020b2:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80020b4:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80020b8:	4a02      	ldr	r2, [pc, #8]	; (80020c4 <RCC_GetPCLK2ClockFreq+0x14>)
 80020ba:	5cd3      	ldrb	r3, [r2, r3]
}
 80020bc:	40d8      	lsrs	r0, r3
 80020be:	4770      	bx	lr
 80020c0:	40023800 	.word	0x40023800
 80020c4:	08006120 	.word	0x08006120

080020c8 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 80020d0:	b923      	cbnz	r3, 80020dc <RCC_PLL_GetFreqDomain_SYS+0x14>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <RCC_PLL_GetFreqDomain_SYS+0x44>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80020d4:	2808      	cmp	r0, #8
 80020d6:	d003      	beq.n	80020e0 <RCC_PLL_GetFreqDomain_SYS+0x18>
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80020d8:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 80020da:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 80020de:	e7f9      	b.n	80020d4 <RCC_PLL_GetFreqDomain_SYS+0xc>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80020e0:	4a09      	ldr	r2, [pc, #36]	; (8002108 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 80020e2:	6850      	ldr	r0, [r2, #4]
 80020e4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80020e8:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80020ec:	6850      	ldr	r0, [r2, #4]
 80020ee:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80020f2:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80020f6:	6853      	ldr	r3, [r2, #4]
 80020f8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80020fc:	3301      	adds	r3, #1
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fbb0 f0f3 	udiv	r0, r0, r3
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800
 800210c:	00f42400 	.word	0x00f42400
 8002110:	007a1200 	.word	0x007a1200

08002114 <RCC_GetSystemClockFreq>:
{
 8002114:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <RCC_GetSystemClockFreq+0x24>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 800211e:	2b04      	cmp	r3, #4
 8002120:	d007      	beq.n	8002132 <RCC_GetSystemClockFreq+0x1e>
 8002122:	2b08      	cmp	r3, #8
 8002124:	d001      	beq.n	800212a <RCC_GetSystemClockFreq+0x16>
      frequency = HSI_VALUE;
 8002126:	4805      	ldr	r0, [pc, #20]	; (800213c <RCC_GetSystemClockFreq+0x28>)
}
 8002128:	bd08      	pop	{r3, pc}
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800212a:	2008      	movs	r0, #8
 800212c:	f7ff ffcc 	bl	80020c8 <RCC_PLL_GetFreqDomain_SYS>
      break;
 8002130:	e7fa      	b.n	8002128 <RCC_GetSystemClockFreq+0x14>
      frequency = HSE_VALUE;
 8002132:	4803      	ldr	r0, [pc, #12]	; (8002140 <RCC_GetSystemClockFreq+0x2c>)
  return frequency;
 8002134:	e7f8      	b.n	8002128 <RCC_GetSystemClockFreq+0x14>
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800
 800213c:	00f42400 	.word	0x00f42400
 8002140:	007a1200 	.word	0x007a1200

08002144 <LL_RCC_GetSystemClocksFreq>:
{
 8002144:	b510      	push	{r4, lr}
 8002146:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002148:	f7ff ffe4 	bl	8002114 <RCC_GetSystemClockFreq>
 800214c:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800214e:	f7ff ff97 	bl	8002080 <RCC_GetHCLKClockFreq>
 8002152:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002154:	f7ff ffa0 	bl	8002098 <RCC_GetPCLK1ClockFreq>
 8002158:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800215a:	6860      	ldr	r0, [r4, #4]
 800215c:	f7ff ffa8 	bl	80020b0 <RCC_GetPCLK2ClockFreq>
 8002160:	60e0      	str	r0, [r4, #12]
}
 8002162:	bd10      	pop	{r4, pc}

08002164 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <SDMMC_GetCmdError+0x30>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0b      	ldr	r2, [pc, #44]	; (8002198 <SDMMC_GetCmdError+0x34>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0a5a      	lsrs	r2, r3, #9
 8002170:	f241 3388 	movw	r3, #5000	; 0x1388
 8002174:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8002178:	1e5a      	subs	r2, r3, #1
 800217a:	b143      	cbz	r3, 800218e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800217c:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 800217e:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8002180:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002184:	d0f8      	beq.n	8002178 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002186:	23c5      	movs	r3, #197	; 0xc5
 8002188:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800218a:	2000      	movs	r0, #0
 800218c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800218e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002192:	4770      	bx	lr
 8002194:	20000000 	.word	0x20000000
 8002198:	10624dd3 	.word	0x10624dd3

0800219c <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800219c:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <SDMMC_GetCmdResp2+0x58>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a15      	ldr	r2, [pc, #84]	; (80021f8 <SDMMC_GetCmdResp2+0x5c>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0a5a      	lsrs	r2, r3, #9
 80021a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80021ac:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 80021b0:	1e5a      	subs	r2, r3, #1
 80021b2:	b1db      	cbz	r3, 80021ec <SDMMC_GetCmdResp2+0x50>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 80021b4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80021b6:	4613      	mov	r3, r2
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80021b8:	f011 0f45 	tst.w	r1, #69	; 0x45
 80021bc:	d0f8      	beq.n	80021b0 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80021be:	f411 6f00 	tst.w	r1, #2048	; 0x800
 80021c2:	d1f5      	bne.n	80021b0 <SDMMC_GetCmdResp2+0x14>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80021c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80021c6:	f013 0f04 	tst.w	r3, #4
 80021ca:	d107      	bne.n	80021dc <SDMMC_GetCmdResp2+0x40>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80021cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80021ce:	f013 0f01 	tst.w	r3, #1
 80021d2:	d107      	bne.n	80021e4 <SDMMC_GetCmdResp2+0x48>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80021d4:	23c5      	movs	r3, #197	; 0xc5
 80021d6:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80021d8:	2000      	movs	r0, #0
 80021da:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80021dc:	2304      	movs	r3, #4
 80021de:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80021e0:	4618      	mov	r0, r3
 80021e2:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80021e4:	2301      	movs	r3, #1
 80021e6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80021e8:	4618      	mov	r0, r3
 80021ea:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80021ec:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000000 	.word	0x20000000
 80021f8:	10624dd3 	.word	0x10624dd3

080021fc <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <SDMMC_GetCmdResp3+0x48>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a11      	ldr	r2, [pc, #68]	; (8002248 <SDMMC_GetCmdResp3+0x4c>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0a5a      	lsrs	r2, r3, #9
 8002208:	f241 3388 	movw	r3, #5000	; 0x1388
 800220c:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8002210:	1e5a      	subs	r2, r3, #1
 8002212:	b19b      	cbz	r3, 800223c <SDMMC_GetCmdResp3+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8002214:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002216:	4613      	mov	r3, r2
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002218:	f011 0f45 	tst.w	r1, #69	; 0x45
 800221c:	d0f8      	beq.n	8002210 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800221e:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8002222:	d1f5      	bne.n	8002210 <SDMMC_GetCmdResp3+0x14>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002224:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002226:	f013 0f04 	tst.w	r3, #4
 800222a:	d103      	bne.n	8002234 <SDMMC_GetCmdResp3+0x38>
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800222c:	23c5      	movs	r3, #197	; 0xc5
 800222e:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002230:	2000      	movs	r0, #0
 8002232:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002234:	2304      	movs	r3, #4
 8002236:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002238:	4618      	mov	r0, r3
 800223a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800223c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000000 	.word	0x20000000
 8002248:	10624dd3 	.word	0x10624dd3

0800224c <SDMMC_GetCmdResp7>:
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800224c:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <SDMMC_GetCmdResp7+0x64>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a18      	ldr	r2, [pc, #96]	; (80022b4 <SDMMC_GetCmdResp7+0x68>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	0a5a      	lsrs	r2, r3, #9
 8002258:	f241 3388 	movw	r3, #5000	; 0x1388
 800225c:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8002260:	1e5a      	subs	r2, r3, #1
 8002262:	b1fb      	cbz	r3, 80022a4 <SDMMC_GetCmdResp7+0x58>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8002264:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002266:	4613      	mov	r3, r2
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002268:	f011 0f45 	tst.w	r1, #69	; 0x45
 800226c:	d0f8      	beq.n	8002260 <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800226e:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8002272:	d1f5      	bne.n	8002260 <SDMMC_GetCmdResp7+0x14>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002274:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002276:	f013 0f04 	tst.w	r3, #4
 800227a:	d10b      	bne.n	8002294 <SDMMC_GetCmdResp7+0x48>
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800227c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800227e:	f013 0f01 	tst.w	r3, #1
 8002282:	d10b      	bne.n	800229c <SDMMC_GetCmdResp7+0x50>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8002284:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002286:	f013 0f40 	tst.w	r3, #64	; 0x40
 800228a:	d00e      	beq.n	80022aa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800228c:	2340      	movs	r3, #64	; 0x40
 800228e:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002290:	2000      	movs	r0, #0
 8002292:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002294:	2304      	movs	r3, #4
 8002296:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002298:	4618      	mov	r0, r3
 800229a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800229c:	2301      	movs	r3, #1
 800229e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80022a0:	4618      	mov	r0, r3
 80022a2:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80022a4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80022a8:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 80022aa:	2000      	movs	r0, #0
  
}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000000 	.word	0x20000000
 80022b4:	10624dd3 	.word	0x10624dd3

080022b8 <SDIO_Init>:
{
 80022b8:	b084      	sub	sp, #16
 80022ba:	b410      	push	{r4}
 80022bc:	ac02      	add	r4, sp, #8
 80022be:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 80022c2:	460b      	mov	r3, r1
 80022c4:	9a03      	ldr	r2, [sp, #12]
 80022c6:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 80022c8:	9a04      	ldr	r2, [sp, #16]
             Init.ClockBypass         |\
 80022ca:	4313      	orrs	r3, r2
             Init.BusWide             |\
 80022cc:	9a05      	ldr	r2, [sp, #20]
             Init.ClockPowerSave      |\
 80022ce:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 80022d0:	9a06      	ldr	r2, [sp, #24]
             Init.BusWide             |\
 80022d2:	4313      	orrs	r3, r2
             Init.ClockDiv
 80022d4:	9a07      	ldr	r2, [sp, #28]
             Init.HardwareFlowControl |\
 80022d6:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80022d8:	6842      	ldr	r2, [r0, #4]
 80022da:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 80022de:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80022e2:	4313      	orrs	r3, r2
 80022e4:	6043      	str	r3, [r0, #4]
}
 80022e6:	2000      	movs	r0, #0
 80022e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022ec:	b004      	add	sp, #16
 80022ee:	4770      	bx	lr

080022f0 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 80022f0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80022f4:	4770      	bx	lr

080022f6 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 80022f6:	680b      	ldr	r3, [r1, #0]
 80022f8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 80022fc:	2000      	movs	r0, #0
 80022fe:	4770      	bx	lr

08002300 <SDIO_PowerState_ON>:
{  
 8002300:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002302:	2303      	movs	r3, #3
 8002304:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 8002306:	2002      	movs	r0, #2
 8002308:	f7fe fc46 	bl	8000b98 <HAL_Delay>
}
 800230c:	2000      	movs	r0, #0
 800230e:	bd08      	pop	{r3, pc}

08002310 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8002310:	6800      	ldr	r0, [r0, #0]
}
 8002312:	f000 0003 	and.w	r0, r0, #3
 8002316:	4770      	bx	lr

08002318 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8002318:	680b      	ldr	r3, [r1, #0]
 800231a:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800231c:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 800231e:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002320:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8002322:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8002324:	4313      	orrs	r3, r2
                       Command->CPSM);
 8002326:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8002328:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800232a:	68c2      	ldr	r2, [r0, #12]
 800232c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8002330:	f022 020f 	bic.w	r2, r2, #15
 8002334:	4313      	orrs	r3, r2
 8002336:	60c3      	str	r3, [r0, #12]
}
 8002338:	2000      	movs	r0, #0
 800233a:	4770      	bx	lr

0800233c <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 800233c:	6900      	ldr	r0, [r0, #16]
}
 800233e:	b2c0      	uxtb	r0, r0
 8002340:	4770      	bx	lr

08002342 <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8002342:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8002344:	5840      	ldr	r0, [r0, r1]
}  
 8002346:	4770      	bx	lr

08002348 <SDMMC_GetCmdResp1>:
{
 8002348:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800234a:	4b52      	ldr	r3, [pc, #328]	; (8002494 <SDMMC_GetCmdResp1+0x14c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4c52      	ldr	r4, [pc, #328]	; (8002498 <SDMMC_GetCmdResp1+0x150>)
 8002350:	fba4 4303 	umull	r4, r3, r4, r3
 8002354:	0a5b      	lsrs	r3, r3, #9
 8002356:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 800235a:	1e53      	subs	r3, r2, #1
 800235c:	2a00      	cmp	r2, #0
 800235e:	d060      	beq.n	8002422 <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDIOx->STA;
 8002360:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002362:	461a      	mov	r2, r3
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002364:	f014 0f45 	tst.w	r4, #69	; 0x45
 8002368:	d0f7      	beq.n	800235a <SDMMC_GetCmdResp1+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800236a:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800236e:	d1f4      	bne.n	800235a <SDMMC_GetCmdResp1+0x12>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002370:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002372:	f013 0f04 	tst.w	r3, #4
 8002376:	d107      	bne.n	8002388 <SDMMC_GetCmdResp1+0x40>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002378:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800237a:	f013 0f01 	tst.w	r3, #1
 800237e:	d007      	beq.n	8002390 <SDMMC_GetCmdResp1+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002380:	2301      	movs	r3, #1
 8002382:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002384:	4618      	mov	r0, r3
 8002386:	e04e      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002388:	2304      	movs	r3, #4
 800238a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800238c:	4618      	mov	r0, r3
 800238e:	e04a      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
 8002390:	460d      	mov	r5, r1
 8002392:	4604      	mov	r4, r0
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002394:	23c5      	movs	r3, #197	; 0xc5
 8002396:	6383      	str	r3, [r0, #56]	; 0x38
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002398:	f7ff ffd0 	bl	800233c <SDIO_GetCommandResponse>
 800239c:	42a8      	cmp	r0, r5
 800239e:	d001      	beq.n	80023a4 <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80023a0:	2001      	movs	r0, #1
 80023a2:	e040      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80023a4:	2100      	movs	r1, #0
 80023a6:	4620      	mov	r0, r4
 80023a8:	f7ff ffcb 	bl	8002342 <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80023ac:	4b3b      	ldr	r3, [pc, #236]	; (800249c <SDMMC_GetCmdResp1+0x154>)
 80023ae:	4003      	ands	r3, r0
 80023b0:	b3d3      	cbz	r3, 8002428 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80023b2:	2800      	cmp	r0, #0
 80023b4:	db3a      	blt.n	800242c <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80023b6:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80023ba:	d13a      	bne.n	8002432 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80023bc:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 80023c0:	d139      	bne.n	8002436 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80023c2:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 80023c6:	d138      	bne.n	800243a <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80023c8:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 80023cc:	d138      	bne.n	8002440 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80023ce:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80023d2:	d138      	bne.n	8002446 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80023d4:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80023d8:	d138      	bne.n	800244c <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80023da:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80023de:	d138      	bne.n	8002452 <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80023e0:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80023e4:	d138      	bne.n	8002458 <SDMMC_GetCmdResp1+0x110>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80023e6:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80023ea:	d138      	bne.n	800245e <SDMMC_GetCmdResp1+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80023ec:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80023f0:	d138      	bne.n	8002464 <SDMMC_GetCmdResp1+0x11c>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80023f2:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 80023f6:	d138      	bne.n	800246a <SDMMC_GetCmdResp1+0x122>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80023f8:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 80023fc:	d138      	bne.n	8002470 <SDMMC_GetCmdResp1+0x128>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80023fe:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8002402:	d138      	bne.n	8002476 <SDMMC_GetCmdResp1+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002404:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8002408:	d138      	bne.n	800247c <SDMMC_GetCmdResp1+0x134>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800240a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800240e:	d138      	bne.n	8002482 <SDMMC_GetCmdResp1+0x13a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8002410:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8002414:	d138      	bne.n	8002488 <SDMMC_GetCmdResp1+0x140>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8002416:	f010 0f08 	tst.w	r0, #8
 800241a:	d038      	beq.n	800248e <SDMMC_GetCmdResp1+0x146>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800241c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002420:	e001      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 8002422:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002426:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 8002428:	2000      	movs	r0, #0
 800242a:	e7fc      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800242c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8002430:	e7f9      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8002432:	2040      	movs	r0, #64	; 0x40
 8002434:	e7f7      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8002436:	2080      	movs	r0, #128	; 0x80
 8002438:	e7f5      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800243a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800243e:	e7f2      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002440:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002444:	e7ef      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8002446:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800244a:	e7ec      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800244c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002450:	e7e9      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002452:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002456:	e7e6      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002458:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800245c:	e7e3      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800245e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002462:	e7e0      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 8002464:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002468:	e7dd      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800246a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800246e:	e7da      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8002470:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002474:	e7d7      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8002476:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800247a:	e7d4      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800247c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002480:	e7d1      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8002482:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002486:	e7ce      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 8002488:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800248c:	e7cb      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800248e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002492:	e7c8      	b.n	8002426 <SDMMC_GetCmdResp1+0xde>
 8002494:	20000000 	.word	0x20000000
 8002498:	10624dd3 	.word	0x10624dd3
 800249c:	fdffe008 	.word	0xfdffe008

080024a0 <SDMMC_GetCmdResp6>:
{
 80024a0:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80024a2:	4b26      	ldr	r3, [pc, #152]	; (800253c <SDMMC_GetCmdResp6+0x9c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4c26      	ldr	r4, [pc, #152]	; (8002540 <SDMMC_GetCmdResp6+0xa0>)
 80024a8:	fba4 4303 	umull	r4, r3, r4, r3
 80024ac:	0a5c      	lsrs	r4, r3, #9
 80024ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80024b2:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 80024b6:	1e5c      	subs	r4, r3, #1
 80024b8:	b3b3      	cbz	r3, 8002528 <SDMMC_GetCmdResp6+0x88>
    sta_reg = SDIOx->STA;
 80024ba:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80024bc:	4623      	mov	r3, r4
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80024be:	f015 0f45 	tst.w	r5, #69	; 0x45
 80024c2:	d0f8      	beq.n	80024b6 <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80024c4:	f415 6f00 	tst.w	r5, #2048	; 0x800
 80024c8:	d1f5      	bne.n	80024b6 <SDMMC_GetCmdResp6+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80024ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80024cc:	f013 0f04 	tst.w	r3, #4
 80024d0:	d107      	bne.n	80024e2 <SDMMC_GetCmdResp6+0x42>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80024d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80024d4:	f013 0f01 	tst.w	r3, #1
 80024d8:	d007      	beq.n	80024ea <SDMMC_GetCmdResp6+0x4a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80024da:	2301      	movs	r3, #1
 80024dc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80024de:	4618      	mov	r0, r3
 80024e0:	e024      	b.n	800252c <SDMMC_GetCmdResp6+0x8c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80024e2:	2304      	movs	r3, #4
 80024e4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80024e6:	4618      	mov	r0, r3
 80024e8:	e020      	b.n	800252c <SDMMC_GetCmdResp6+0x8c>
 80024ea:	4616      	mov	r6, r2
 80024ec:	460d      	mov	r5, r1
 80024ee:	4604      	mov	r4, r0
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80024f0:	f7ff ff24 	bl	800233c <SDIO_GetCommandResponse>
 80024f4:	42a8      	cmp	r0, r5
 80024f6:	d001      	beq.n	80024fc <SDMMC_GetCmdResp6+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80024f8:	2001      	movs	r0, #1
 80024fa:	e017      	b.n	800252c <SDMMC_GetCmdResp6+0x8c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80024fc:	23c5      	movs	r3, #197	; 0xc5
 80024fe:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002500:	2100      	movs	r1, #0
 8002502:	4620      	mov	r0, r4
 8002504:	f7ff ff1d 	bl	8002342 <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8002508:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 800250c:	d008      	beq.n	8002520 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800250e:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8002512:	d10c      	bne.n	800252e <SDMMC_GetCmdResp6+0x8e>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8002514:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8002518:	d00c      	beq.n	8002534 <SDMMC_GetCmdResp6+0x94>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800251a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800251e:	e005      	b.n	800252c <SDMMC_GetCmdResp6+0x8c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8002520:	0c00      	lsrs	r0, r0, #16
 8002522:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 8002524:	2000      	movs	r0, #0
 8002526:	e001      	b.n	800252c <SDMMC_GetCmdResp6+0x8c>
      return SDMMC_ERROR_TIMEOUT;
 8002528:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800252c:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 800252e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002532:	e7fb      	b.n	800252c <SDMMC_GetCmdResp6+0x8c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002534:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002538:	e7f8      	b.n	800252c <SDMMC_GetCmdResp6+0x8c>
 800253a:	bf00      	nop
 800253c:	20000000 	.word	0x20000000
 8002540:	10624dd3 	.word	0x10624dd3

08002544 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8002544:	680b      	ldr	r3, [r1, #0]
 8002546:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8002548:	684b      	ldr	r3, [r1, #4]
 800254a:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800254c:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 800254e:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002550:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8002552:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8002554:	4313      	orrs	r3, r2
                       Data->DPSM);
 8002556:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8002558:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800255a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800255c:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8002560:	4313      	orrs	r3, r2
 8002562:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8002564:	2000      	movs	r0, #0
 8002566:	4770      	bx	lr

08002568 <SDMMC_CmdBlockLength>:
{
 8002568:	b530      	push	{r4, r5, lr}
 800256a:	b087      	sub	sp, #28
 800256c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800256e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002570:	2410      	movs	r4, #16
 8002572:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002574:	2340      	movs	r3, #64	; 0x40
 8002576:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002578:	2300      	movs	r3, #0
 800257a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800257c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002580:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002582:	a901      	add	r1, sp, #4
 8002584:	f7ff fec8 	bl	8002318 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8002588:	f241 3288 	movw	r2, #5000	; 0x1388
 800258c:	4621      	mov	r1, r4
 800258e:	4628      	mov	r0, r5
 8002590:	f7ff feda 	bl	8002348 <SDMMC_GetCmdResp1>
}
 8002594:	b007      	add	sp, #28
 8002596:	bd30      	pop	{r4, r5, pc}

08002598 <SDMMC_CmdReadSingleBlock>:
{
 8002598:	b530      	push	{r4, r5, lr}
 800259a:	b087      	sub	sp, #28
 800259c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800259e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80025a0:	2411      	movs	r4, #17
 80025a2:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80025a4:	2340      	movs	r3, #64	; 0x40
 80025a6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80025a8:	2300      	movs	r3, #0
 80025aa:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80025ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025b0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80025b2:	a901      	add	r1, sp, #4
 80025b4:	f7ff feb0 	bl	8002318 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80025b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025bc:	4621      	mov	r1, r4
 80025be:	4628      	mov	r0, r5
 80025c0:	f7ff fec2 	bl	8002348 <SDMMC_GetCmdResp1>
}
 80025c4:	b007      	add	sp, #28
 80025c6:	bd30      	pop	{r4, r5, pc}

080025c8 <SDMMC_CmdReadMultiBlock>:
{
 80025c8:	b530      	push	{r4, r5, lr}
 80025ca:	b087      	sub	sp, #28
 80025cc:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80025ce:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80025d0:	2412      	movs	r4, #18
 80025d2:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80025d4:	2340      	movs	r3, #64	; 0x40
 80025d6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80025d8:	2300      	movs	r3, #0
 80025da:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80025dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025e0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80025e2:	a901      	add	r1, sp, #4
 80025e4:	f7ff fe98 	bl	8002318 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80025e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ec:	4621      	mov	r1, r4
 80025ee:	4628      	mov	r0, r5
 80025f0:	f7ff feaa 	bl	8002348 <SDMMC_GetCmdResp1>
}
 80025f4:	b007      	add	sp, #28
 80025f6:	bd30      	pop	{r4, r5, pc}

080025f8 <SDMMC_CmdWriteSingleBlock>:
{
 80025f8:	b530      	push	{r4, r5, lr}
 80025fa:	b087      	sub	sp, #28
 80025fc:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80025fe:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002600:	2418      	movs	r4, #24
 8002602:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002604:	2340      	movs	r3, #64	; 0x40
 8002606:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002608:	2300      	movs	r3, #0
 800260a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800260c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002610:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002612:	a901      	add	r1, sp, #4
 8002614:	f7ff fe80 	bl	8002318 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002618:	f241 3288 	movw	r2, #5000	; 0x1388
 800261c:	4621      	mov	r1, r4
 800261e:	4628      	mov	r0, r5
 8002620:	f7ff fe92 	bl	8002348 <SDMMC_GetCmdResp1>
}
 8002624:	b007      	add	sp, #28
 8002626:	bd30      	pop	{r4, r5, pc}

08002628 <SDMMC_CmdWriteMultiBlock>:
{
 8002628:	b530      	push	{r4, r5, lr}
 800262a:	b087      	sub	sp, #28
 800262c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800262e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002630:	2419      	movs	r4, #25
 8002632:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002634:	2340      	movs	r3, #64	; 0x40
 8002636:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002638:	2300      	movs	r3, #0
 800263a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800263c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002640:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002642:	a901      	add	r1, sp, #4
 8002644:	f7ff fe68 	bl	8002318 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002648:	f241 3288 	movw	r2, #5000	; 0x1388
 800264c:	4621      	mov	r1, r4
 800264e:	4628      	mov	r0, r5
 8002650:	f7ff fe7a 	bl	8002348 <SDMMC_GetCmdResp1>
}
 8002654:	b007      	add	sp, #28
 8002656:	bd30      	pop	{r4, r5, pc}

08002658 <SDMMC_CmdStopTransfer>:
{
 8002658:	b530      	push	{r4, r5, lr}
 800265a:	b087      	sub	sp, #28
 800265c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002662:	240c      	movs	r4, #12
 8002664:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002666:	2240      	movs	r2, #64	; 0x40
 8002668:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800266a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800266c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002670:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002672:	a901      	add	r1, sp, #4
 8002674:	f7ff fe50 	bl	8002318 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8002678:	4a03      	ldr	r2, [pc, #12]	; (8002688 <SDMMC_CmdStopTransfer+0x30>)
 800267a:	4621      	mov	r1, r4
 800267c:	4628      	mov	r0, r5
 800267e:	f7ff fe63 	bl	8002348 <SDMMC_GetCmdResp1>
}
 8002682:	b007      	add	sp, #28
 8002684:	bd30      	pop	{r4, r5, pc}
 8002686:	bf00      	nop
 8002688:	05f5e100 	.word	0x05f5e100

0800268c <SDMMC_CmdSelDesel>:
{
 800268c:	b530      	push	{r4, r5, lr}
 800268e:	b087      	sub	sp, #28
 8002690:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8002692:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002694:	2407      	movs	r4, #7
 8002696:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002698:	2340      	movs	r3, #64	; 0x40
 800269a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800269c:	2300      	movs	r3, #0
 800269e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80026a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026a4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80026a6:	a901      	add	r1, sp, #4
 80026a8:	f7ff fe36 	bl	8002318 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80026ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b0:	4621      	mov	r1, r4
 80026b2:	4628      	mov	r0, r5
 80026b4:	f7ff fe48 	bl	8002348 <SDMMC_GetCmdResp1>
}
 80026b8:	b007      	add	sp, #28
 80026ba:	bd30      	pop	{r4, r5, pc}

080026bc <SDMMC_CmdGoIdleState>:
{
 80026bc:	b510      	push	{r4, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80026c6:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80026c8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80026ca:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80026cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d0:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80026d2:	a901      	add	r1, sp, #4
 80026d4:	f7ff fe20 	bl	8002318 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 80026d8:	4620      	mov	r0, r4
 80026da:	f7ff fd43 	bl	8002164 <SDMMC_GetCmdError>
}
 80026de:	b006      	add	sp, #24
 80026e0:	bd10      	pop	{r4, pc}

080026e2 <SDMMC_CmdOperCond>:
{
 80026e2:	b510      	push	{r4, lr}
 80026e4:	b086      	sub	sp, #24
 80026e6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80026e8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80026ec:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80026ee:	2308      	movs	r3, #8
 80026f0:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80026f2:	2340      	movs	r3, #64	; 0x40
 80026f4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80026f6:	2300      	movs	r3, #0
 80026f8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80026fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026fe:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002700:	a901      	add	r1, sp, #4
 8002702:	f7ff fe09 	bl	8002318 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8002706:	4620      	mov	r0, r4
 8002708:	f7ff fda0 	bl	800224c <SDMMC_GetCmdResp7>
}
 800270c:	b006      	add	sp, #24
 800270e:	bd10      	pop	{r4, pc}

08002710 <SDMMC_CmdAppCommand>:
{
 8002710:	b530      	push	{r4, r5, lr}
 8002712:	b087      	sub	sp, #28
 8002714:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002716:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002718:	2437      	movs	r4, #55	; 0x37
 800271a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800271c:	2340      	movs	r3, #64	; 0x40
 800271e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002720:	2300      	movs	r3, #0
 8002722:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002728:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800272a:	a901      	add	r1, sp, #4
 800272c:	f7ff fdf4 	bl	8002318 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8002730:	f241 3288 	movw	r2, #5000	; 0x1388
 8002734:	4621      	mov	r1, r4
 8002736:	4628      	mov	r0, r5
 8002738:	f7ff fe06 	bl	8002348 <SDMMC_GetCmdResp1>
}
 800273c:	b007      	add	sp, #28
 800273e:	bd30      	pop	{r4, r5, pc}

08002740 <SDMMC_CmdAppOperCommand>:
{
 8002740:	b510      	push	{r4, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002746:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800274a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800274e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8002750:	2329      	movs	r3, #41	; 0x29
 8002752:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002754:	2340      	movs	r3, #64	; 0x40
 8002756:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002758:	2300      	movs	r3, #0
 800275a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800275c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002760:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002762:	a901      	add	r1, sp, #4
 8002764:	f7ff fdd8 	bl	8002318 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8002768:	4620      	mov	r0, r4
 800276a:	f7ff fd47 	bl	80021fc <SDMMC_GetCmdResp3>
}
 800276e:	b006      	add	sp, #24
 8002770:	bd10      	pop	{r4, pc}

08002772 <SDMMC_CmdBusWidth>:
{
 8002772:	b530      	push	{r4, r5, lr}
 8002774:	b087      	sub	sp, #28
 8002776:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8002778:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800277a:	2406      	movs	r4, #6
 800277c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800277e:	2340      	movs	r3, #64	; 0x40
 8002780:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002782:	2300      	movs	r3, #0
 8002784:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800278a:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800278c:	a901      	add	r1, sp, #4
 800278e:	f7ff fdc3 	bl	8002318 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4621      	mov	r1, r4
 8002798:	4628      	mov	r0, r5
 800279a:	f7ff fdd5 	bl	8002348 <SDMMC_GetCmdResp1>
}
 800279e:	b007      	add	sp, #28
 80027a0:	bd30      	pop	{r4, r5, pc}

080027a2 <SDMMC_CmdSendSCR>:
{
 80027a2:	b530      	push	{r4, r5, lr}
 80027a4:	b087      	sub	sp, #28
 80027a6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80027ac:	2433      	movs	r4, #51	; 0x33
 80027ae:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80027b0:	2240      	movs	r2, #64	; 0x40
 80027b2:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80027b4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80027b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027ba:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80027bc:	a901      	add	r1, sp, #4
 80027be:	f7ff fdab 	bl	8002318 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80027c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c6:	4621      	mov	r1, r4
 80027c8:	4628      	mov	r0, r5
 80027ca:	f7ff fdbd 	bl	8002348 <SDMMC_GetCmdResp1>
}
 80027ce:	b007      	add	sp, #28
 80027d0:	bd30      	pop	{r4, r5, pc}

080027d2 <SDMMC_CmdSendCID>:
{
 80027d2:	b510      	push	{r4, lr}
 80027d4:	b086      	sub	sp, #24
 80027d6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80027dc:	2202      	movs	r2, #2
 80027de:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80027e0:	22c0      	movs	r2, #192	; 0xc0
 80027e2:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80027e4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80027e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027ea:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80027ec:	a901      	add	r1, sp, #4
 80027ee:	f7ff fd93 	bl	8002318 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80027f2:	4620      	mov	r0, r4
 80027f4:	f7ff fcd2 	bl	800219c <SDMMC_GetCmdResp2>
}
 80027f8:	b006      	add	sp, #24
 80027fa:	bd10      	pop	{r4, pc}

080027fc <SDMMC_CmdSendCSD>:
{
 80027fc:	b510      	push	{r4, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8002802:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8002804:	2309      	movs	r3, #9
 8002806:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002808:	23c0      	movs	r3, #192	; 0xc0
 800280a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800280c:	2300      	movs	r3, #0
 800280e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002814:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002816:	a901      	add	r1, sp, #4
 8002818:	f7ff fd7e 	bl	8002318 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800281c:	4620      	mov	r0, r4
 800281e:	f7ff fcbd 	bl	800219c <SDMMC_GetCmdResp2>
}
 8002822:	b006      	add	sp, #24
 8002824:	bd10      	pop	{r4, pc}

08002826 <SDMMC_CmdSetRelAdd>:
{
 8002826:	b570      	push	{r4, r5, r6, lr}
 8002828:	b086      	sub	sp, #24
 800282a:	4605      	mov	r5, r0
 800282c:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002832:	2403      	movs	r4, #3
 8002834:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002836:	2240      	movs	r2, #64	; 0x40
 8002838:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800283a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800283c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002840:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002842:	a901      	add	r1, sp, #4
 8002844:	f7ff fd68 	bl	8002318 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8002848:	4632      	mov	r2, r6
 800284a:	4621      	mov	r1, r4
 800284c:	4628      	mov	r0, r5
 800284e:	f7ff fe27 	bl	80024a0 <SDMMC_GetCmdResp6>
}
 8002852:	b006      	add	sp, #24
 8002854:	bd70      	pop	{r4, r5, r6, pc}

08002856 <SDMMC_CmdSendStatus>:
{
 8002856:	b530      	push	{r4, r5, lr}
 8002858:	b087      	sub	sp, #28
 800285a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 800285c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800285e:	240d      	movs	r4, #13
 8002860:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002862:	2340      	movs	r3, #64	; 0x40
 8002864:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002866:	2300      	movs	r3, #0
 8002868:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800286a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800286e:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002870:	a901      	add	r1, sp, #4
 8002872:	f7ff fd51 	bl	8002318 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8002876:	f241 3288 	movw	r2, #5000	; 0x1388
 800287a:	4621      	mov	r1, r4
 800287c:	4628      	mov	r0, r5
 800287e:	f7ff fd63 	bl	8002348 <SDMMC_GetCmdResp1>
}
 8002882:	b007      	add	sp, #28
 8002884:	bd30      	pop	{r4, r5, pc}
	...

08002888 <LL_USART_Init>:
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002888:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800288a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800288e:	d001      	beq.n	8002894 <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 8002890:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8002892:	4770      	bx	lr
{
 8002894:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	460d      	mov	r5, r1
 800289c:	4604      	mov	r4, r0
    MODIFY_REG(USARTx->CR1,
 800289e:	68c3      	ldr	r3, [r0, #12]
 80028a0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80028a4:	f023 030c 	bic.w	r3, r3, #12
 80028a8:	684a      	ldr	r2, [r1, #4]
 80028aa:	68c9      	ldr	r1, [r1, #12]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	6929      	ldr	r1, [r5, #16]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	69a9      	ldr	r1, [r5, #24]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60c3      	str	r3, [r0, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80028ba:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80028bc:	6902      	ldr	r2, [r0, #16]
 80028be:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80028c2:	4313      	orrs	r3, r2
 80028c4:	6103      	str	r3, [r0, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80028c6:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80028c8:	6942      	ldr	r2, [r0, #20]
 80028ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028ce:	4313      	orrs	r3, r2
 80028d0:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80028d2:	4668      	mov	r0, sp
 80028d4:	f7ff fc36 	bl	8002144 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80028d8:	4b49      	ldr	r3, [pc, #292]	; (8002a00 <LL_USART_Init+0x178>)
 80028da:	429c      	cmp	r4, r3
 80028dc:	d010      	beq.n	8002900 <LL_USART_Init+0x78>
    else if (USARTx == USART2)
 80028de:	4b49      	ldr	r3, [pc, #292]	; (8002a04 <LL_USART_Init+0x17c>)
 80028e0:	429c      	cmp	r4, r3
 80028e2:	d014      	beq.n	800290e <LL_USART_Init+0x86>
    else if (USARTx == USART3)
 80028e4:	4b48      	ldr	r3, [pc, #288]	; (8002a08 <LL_USART_Init+0x180>)
 80028e6:	429c      	cmp	r4, r3
 80028e8:	d013      	beq.n	8002912 <LL_USART_Init+0x8a>
    else if (USARTx == USART6)
 80028ea:	4b48      	ldr	r3, [pc, #288]	; (8002a0c <LL_USART_Init+0x184>)
 80028ec:	429c      	cmp	r4, r3
 80028ee:	d012      	beq.n	8002916 <LL_USART_Init+0x8e>
    else if (USARTx == UART4)
 80028f0:	4b47      	ldr	r3, [pc, #284]	; (8002a10 <LL_USART_Init+0x188>)
 80028f2:	429c      	cmp	r4, r3
 80028f4:	d011      	beq.n	800291a <LL_USART_Init+0x92>
    else if (USARTx == UART5)
 80028f6:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <LL_USART_Init+0x18c>)
 80028f8:	429c      	cmp	r4, r3
 80028fa:	d010      	beq.n	800291e <LL_USART_Init+0x96>
  ErrorStatus status = ERROR;
 80028fc:	2001      	movs	r0, #1
 80028fe:	e07c      	b.n	80029fa <LL_USART_Init+0x172>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002900:	9803      	ldr	r0, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002902:	2800      	cmp	r0, #0
 8002904:	d078      	beq.n	80029f8 <LL_USART_Init+0x170>
        && (USART_InitStruct->BaudRate != 0U))
 8002906:	682b      	ldr	r3, [r5, #0]
 8002908:	b95b      	cbnz	r3, 8002922 <LL_USART_Init+0x9a>
  ErrorStatus status = ERROR;
 800290a:	2001      	movs	r0, #1
 800290c:	e075      	b.n	80029fa <LL_USART_Init+0x172>
      periphclk = rcc_clocks.PCLK1_Frequency;
 800290e:	9802      	ldr	r0, [sp, #8]
 8002910:	e7f7      	b.n	8002902 <LL_USART_Init+0x7a>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002912:	9802      	ldr	r0, [sp, #8]
 8002914:	e7f5      	b.n	8002902 <LL_USART_Init+0x7a>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002916:	9803      	ldr	r0, [sp, #12]
 8002918:	e7f3      	b.n	8002902 <LL_USART_Init+0x7a>
      periphclk = rcc_clocks.PCLK1_Frequency;
 800291a:	9802      	ldr	r0, [sp, #8]
 800291c:	e7f1      	b.n	8002902 <LL_USART_Init+0x7a>
      periphclk = rcc_clocks.PCLK1_Frequency;
 800291e:	9802      	ldr	r0, [sp, #8]
 8002920:	e7ef      	b.n	8002902 <LL_USART_Init+0x7a>
      LL_USART_SetBaudRate(USARTx,
 8002922:	69aa      	ldr	r2, [r5, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002924:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002928:	d030      	beq.n	800298c <LL_USART_Init+0x104>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800292a:	f04f 0900 	mov.w	r9, #0
 800292e:	1806      	adds	r6, r0, r0
 8002930:	eb49 0709 	adc.w	r7, r9, r9
 8002934:	eb16 0b00 	adds.w	fp, r6, r0
 8002938:	eb47 0c09 	adc.w	ip, r7, r9
 800293c:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8002940:	ea42 725b 	orr.w	r2, r2, fp, lsr #29
 8002944:	ea4f 05cb 	mov.w	r5, fp, lsl #3
 8002948:	4694      	mov	ip, r2
 800294a:	009a      	lsls	r2, r3, #2
 800294c:	0f9b      	lsrs	r3, r3, #30
 800294e:	1940      	adds	r0, r0, r5
 8002950:	eb49 010c 	adc.w	r1, r9, ip
 8002954:	f7fd fc38 	bl	80001c8 <__aeabi_uldivmod>
 8002958:	4d2f      	ldr	r5, [pc, #188]	; (8002a18 <LL_USART_Init+0x190>)
 800295a:	fba5 3100 	umull	r3, r1, r5, r0
 800295e:	0949      	lsrs	r1, r1, #5
 8002960:	010a      	lsls	r2, r1, #4
 8002962:	b292      	uxth	r2, r2
 8002964:	2364      	movs	r3, #100	; 0x64
 8002966:	fb03 0311 	mls	r3, r3, r1, r0
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	3332      	adds	r3, #50	; 0x32
 800296e:	fba5 1303 	umull	r1, r3, r5, r3
 8002972:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8002976:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 800297a:	440a      	add	r2, r1
 800297c:	b292      	uxth	r2, r2
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	4413      	add	r3, r2
 8002984:	b29b      	uxth	r3, r3
 8002986:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8002988:	2000      	movs	r0, #0
 800298a:	e036      	b.n	80029fa <LL_USART_Init+0x172>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800298c:	4683      	mov	fp, r0
 800298e:	f04f 0c00 	mov.w	ip, #0
 8002992:	1806      	adds	r6, r0, r0
 8002994:	eb4c 070c 	adc.w	r7, ip, ip
 8002998:	eb16 0800 	adds.w	r8, r6, r0
 800299c:	eb47 090c 	adc.w	r9, r7, ip
 80029a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80029a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029a8:	ea4f 05c8 	mov.w	r5, r8, lsl #3
 80029ac:	4691      	mov	r9, r2
 80029ae:	2100      	movs	r1, #0
 80029b0:	18da      	adds	r2, r3, r3
 80029b2:	eb41 0301 	adc.w	r3, r1, r1
 80029b6:	eb1b 0005 	adds.w	r0, fp, r5
 80029ba:	eb4c 0109 	adc.w	r1, ip, r9
 80029be:	f7fd fc03 	bl	80001c8 <__aeabi_uldivmod>
 80029c2:	4d15      	ldr	r5, [pc, #84]	; (8002a18 <LL_USART_Init+0x190>)
 80029c4:	fba5 3100 	umull	r3, r1, r5, r0
 80029c8:	0949      	lsrs	r1, r1, #5
 80029ca:	010a      	lsls	r2, r1, #4
 80029cc:	b292      	uxth	r2, r2
 80029ce:	2364      	movs	r3, #100	; 0x64
 80029d0:	fb03 0311 	mls	r3, r3, r1, r0
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	3332      	adds	r3, #50	; 0x32
 80029d8:	fba5 1303 	umull	r1, r3, r5, r3
 80029dc:	f3c3 134f 	ubfx	r3, r3, #5, #16
 80029e0:	0059      	lsls	r1, r3, #1
 80029e2:	f401 71f8 	and.w	r1, r1, #496	; 0x1f0
 80029e6:	440a      	add	r2, r1
 80029e8:	b292      	uxth	r2, r2
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	4413      	add	r3, r2
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	60a3      	str	r3, [r4, #8]
 80029f4:	2000      	movs	r0, #0
 80029f6:	e000      	b.n	80029fa <LL_USART_Init+0x172>
  ErrorStatus status = ERROR;
 80029f8:	2001      	movs	r0, #1
}
 80029fa:	b004      	add	sp, #16
 80029fc:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8002a00:	40011000 	.word	0x40011000
 8002a04:	40004400 	.word	0x40004400
 8002a08:	40004800 	.word	0x40004800
 8002a0c:	40011400 	.word	0x40011400
 8002a10:	40004c00 	.word	0x40004c00
 8002a14:	40005000 	.word	0x40005000
 8002a18:	51eb851f 	.word	0x51eb851f

08002a1c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002a1c:	4b01      	ldr	r3, [pc, #4]	; (8002a24 <LL_SetSystemCoreClock+0x8>)
 8002a1e:	6018      	str	r0, [r3, #0]
}
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20000000 	.word	0x20000000

08002a28 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8002a28:	b500      	push	{lr}
 8002a2a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	460a      	mov	r2, r1
 8002a32:	4601      	mov	r1, r0
 8002a34:	4803      	ldr	r0, [pc, #12]	; (8002a44 <BSP_SD_ReadBlocks+0x1c>)
 8002a36:	f7fe fd31 	bl	800149c <HAL_SD_ReadBlocks>
 8002a3a:	b100      	cbz	r0, 8002a3e <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8002a3c:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8002a3e:	b003      	add	sp, #12
 8002a40:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a44:	20001208 	.word	0x20001208

08002a48 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8002a48:	b500      	push	{lr}
 8002a4a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	460a      	mov	r2, r1
 8002a52:	4601      	mov	r1, r0
 8002a54:	4803      	ldr	r0, [pc, #12]	; (8002a64 <BSP_SD_WriteBlocks+0x1c>)
 8002a56:	f7fe fe55 	bl	8001704 <HAL_SD_WriteBlocks>
 8002a5a:	b100      	cbz	r0, 8002a5e <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8002a5c:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8002a5e:	b003      	add	sp, #12
 8002a60:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a64:	20001208 	.word	0x20001208

08002a68 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8002a68:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8002a6a:	4803      	ldr	r0, [pc, #12]	; (8002a78 <BSP_SD_GetCardState+0x10>)
 8002a6c:	f7ff f974 	bl	8001d58 <HAL_SD_GetCardState>
}
 8002a70:	3804      	subs	r0, #4
 8002a72:	bf18      	it	ne
 8002a74:	2001      	movne	r0, #1
 8002a76:	bd08      	pop	{r3, pc}
 8002a78:	20001208 	.word	0x20001208

08002a7c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8002a7c:	b508      	push	{r3, lr}
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8002a7e:	4601      	mov	r1, r0
 8002a80:	4801      	ldr	r0, [pc, #4]	; (8002a88 <BSP_SD_GetCardInfo+0xc>)
 8002a82:	f7ff f904 	bl	8001c8e <HAL_SD_GetCardInfo>
}
 8002a86:	bd08      	pop	{r3, pc}
 8002a88:	20001208 	.word	0x20001208

08002a8c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8002a8c:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8002a94:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8002a98:	b002      	add	sp, #8
 8002a9a:	4770      	bx	lr

08002a9c <BSP_SD_Init>:
{
 8002a9c:	b510      	push	{r4, lr}
  hsd.Instance = SDIO;
 8002a9e:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <BSP_SD_Init+0x44>)
 8002aa0:	4a10      	ldr	r2, [pc, #64]	; (8002ae4 <BSP_SD_Init+0x48>)
 8002aa2:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002aa8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002aaa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002aac:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002aae:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	619a      	str	r2, [r3, #24]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8002ab4:	f7ff ffea 	bl	8002a8c <BSP_SD_IsDetected>
 8002ab8:	2801      	cmp	r0, #1
 8002aba:	d002      	beq.n	8002ac2 <BSP_SD_Init+0x26>
    return MSD_ERROR;
 8002abc:	2401      	movs	r4, #1
}
 8002abe:	4620      	mov	r0, r4
 8002ac0:	bd10      	pop	{r4, pc}
  sd_state = HAL_SD_Init(&hsd);
 8002ac2:	4807      	ldr	r0, [pc, #28]	; (8002ae0 <BSP_SD_Init+0x44>)
 8002ac4:	f7ff f8c4 	bl	8001c50 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8002ac8:	4604      	mov	r4, r0
 8002aca:	2800      	cmp	r0, #0
 8002acc:	d1f7      	bne.n	8002abe <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8002ace:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ad2:	4803      	ldr	r0, [pc, #12]	; (8002ae0 <BSP_SD_Init+0x44>)
 8002ad4:	f7ff f8ee 	bl	8001cb4 <HAL_SD_ConfigWideBusOperation>
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	d0f0      	beq.n	8002abe <BSP_SD_Init+0x22>
      sd_state = MSD_ERROR;
 8002adc:	2401      	movs	r4, #1
 8002ade:	e7ee      	b.n	8002abe <BSP_SD_Init+0x22>
 8002ae0:	20001208 	.word	0x20001208
 8002ae4:	40012c00 	.word	0x40012c00

08002ae8 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive number (0) */
)
{
 8002ae8:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if (DiskInitialized == 0)
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <disk_initialize+0x1c>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	b10b      	cbz	r3, 8002af4 <disk_initialize+0xc>
  DSTATUS stat = RES_OK;
 8002af0:	2000      	movs	r0, #0
  {
    DiskInitialized = 1;
    stat = SD_initialize(0);
  }
  return stat;
}
 8002af2:	bd08      	pop	{r3, pc}
    DiskInitialized = 1;
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <disk_initialize+0x1c>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	701a      	strb	r2, [r3, #0]
    stat = SD_initialize(0);
 8002afa:	2000      	movs	r0, #0
 8002afc:	f000 f82a 	bl	8002b54 <SD_initialize>
 8002b00:	e7f7      	b.n	8002af2 <disk_initialize+0xa>
 8002b02:	bf00      	nop
 8002b04:	20000430 	.word	0x20000430

08002b08 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv  /* Physical drive nmuber (0) */
)
{
 8002b08:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = SD_status(0);
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f000 f836 	bl	8002b7c <SD_status>
  return stat;
}
 8002b10:	bd08      	pop	{r3, pc}

08002b12 <disk_read>:
	BYTE pdrv,     /* Physical drive nmuber to identify the drive */
	BYTE *buff,    /* Data buffer to store read data */
	DWORD sector,  /* Sector address in LBA */
	UINT count     /* Number of sectors to read */
)
{
 8002b12:	b508      	push	{r3, lr}
  DRESULT res;

  res = SD_read(0, buff, sector, count);
 8002b14:	2000      	movs	r0, #0
 8002b16:	f000 f835 	bl	8002b84 <SD_read>
  return res;
}
 8002b1a:	bd08      	pop	{r3, pc}

08002b1c <disk_write>:
	BYTE pdrv,         /* Physical drive nmuber to identify the drive */
	const BYTE *buff,  /* Data to be written */
	DWORD sector,      /* Sector address in LBA */
	UINT count         /* Number of sectors to write */
)
{
 8002b1c:	b508      	push	{r3, lr}
  DRESULT res;

  res = SD_write(0, buff, sector, count);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f000 f840 	bl	8002ba4 <SD_write>
  return res;
}
 8002b24:	bd08      	pop	{r3, pc}

08002b26 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,    /* Physical drive nmuber (0) */
	BYTE cmd,     /* Control code */
	void *buff    /* Buffer to send/receive data block */
)
{
 8002b26:	b508      	push	{r3, lr}
  DRESULT res;

  res = SD_ioctl(0, cmd, buff);
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f000 f84b 	bl	8002bc4 <SD_ioctl>
  return res;
}
 8002b2e:	bd08      	pop	{r3, pc}

08002b30 <SD_CheckStatus>:
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8002b30:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8002b32:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <SD_CheckStatus+0x20>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8002b38:	f7ff ff96 	bl	8002a68 <BSP_SD_GetCardState>
 8002b3c:	b920      	cbnz	r0, 8002b48 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 8002b3e:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <SD_CheckStatus+0x20>)
 8002b40:	7813      	ldrb	r3, [r2, #0]
 8002b42:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002b46:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8002b48:	4b01      	ldr	r3, [pc, #4]	; (8002b50 <SD_CheckStatus+0x20>)
 8002b4a:	7818      	ldrb	r0, [r3, #0]
}
 8002b4c:	bd08      	pop	{r3, pc}
 8002b4e:	bf00      	nop
 8002b50:	2000000c 	.word	0x2000000c

08002b54 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8002b54:	b510      	push	{r4, lr}
 8002b56:	4604      	mov	r4, r0
  Stat = STA_NOINIT;
 8002b58:	4b07      	ldr	r3, [pc, #28]	; (8002b78 <SD_initialize+0x24>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8002b5e:	f7ff ff9d 	bl	8002a9c <BSP_SD_Init>
 8002b62:	b110      	cbz	r0, 8002b6a <SD_initialize+0x16>
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8002b64:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <SD_initialize+0x24>)
 8002b66:	7818      	ldrb	r0, [r3, #0]
}
 8002b68:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	f7ff ffe0 	bl	8002b30 <SD_CheckStatus>
 8002b70:	4b01      	ldr	r3, [pc, #4]	; (8002b78 <SD_initialize+0x24>)
 8002b72:	7018      	strb	r0, [r3, #0]
 8002b74:	e7f6      	b.n	8002b64 <SD_initialize+0x10>
 8002b76:	bf00      	nop
 8002b78:	2000000c 	.word	0x2000000c

08002b7c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8002b7c:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 8002b7e:	f7ff ffd7 	bl	8002b30 <SD_CheckStatus>
}
 8002b82:	bd08      	pop	{r3, pc}

08002b84 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8002b84:	b508      	push	{r3, lr}
 8002b86:	4608      	mov	r0, r1
 8002b88:	4611      	mov	r1, r2
 8002b8a:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8002b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b90:	f7ff ff4a 	bl	8002a28 <BSP_SD_ReadBlocks>
 8002b94:	b920      	cbnz	r0, 8002ba0 <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8002b96:	f7ff ff67 	bl	8002a68 <BSP_SD_GetCardState>
 8002b9a:	2800      	cmp	r0, #0
 8002b9c:	d1fb      	bne.n	8002b96 <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8002b9e:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	e7fc      	b.n	8002b9e <SD_read+0x1a>

08002ba4 <SD_write>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8002ba4:	b508      	push	{r3, lr}
 8002ba6:	4608      	mov	r0, r1
 8002ba8:	4611      	mov	r1, r2
 8002baa:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8002bac:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb0:	f7ff ff4a 	bl	8002a48 <BSP_SD_WriteBlocks>
 8002bb4:	b920      	cbnz	r0, 8002bc0 <SD_write+0x1c>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8002bb6:	f7ff ff57 	bl	8002a68 <BSP_SD_GetCardState>
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	d1fb      	bne.n	8002bb6 <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8002bbe:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	e7fc      	b.n	8002bbe <SD_write+0x1a>

08002bc4 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002bc4:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <SD_ioctl+0x58>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	f013 0f01 	tst.w	r3, #1
 8002bcc:	d121      	bne.n	8002c12 <SD_ioctl+0x4e>
{
 8002bce:	b510      	push	{r4, lr}
 8002bd0:	b088      	sub	sp, #32
 8002bd2:	4614      	mov	r4, r2

  switch (cmd)
 8002bd4:	2903      	cmp	r1, #3
 8002bd6:	d81e      	bhi.n	8002c16 <SD_ioctl+0x52>
 8002bd8:	e8df f001 	tbb	[pc, r1]
 8002bdc:	130c0502 	.word	0x130c0502
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8002be0:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }

  return res;
}
 8002be2:	b008      	add	sp, #32
 8002be4:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8002be6:	4668      	mov	r0, sp
 8002be8:	f7ff ff48 	bl	8002a7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8002bec:	9b06      	ldr	r3, [sp, #24]
 8002bee:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8002bf0:	2000      	movs	r0, #0
    break;
 8002bf2:	e7f6      	b.n	8002be2 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8002bf4:	4668      	mov	r0, sp
 8002bf6:	f7ff ff41 	bl	8002a7c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8002bfa:	9b07      	ldr	r3, [sp, #28]
 8002bfc:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8002bfe:	2000      	movs	r0, #0
    break;
 8002c00:	e7ef      	b.n	8002be2 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8002c02:	4668      	mov	r0, sp
 8002c04:	f7ff ff3a 	bl	8002a7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8002c08:	9b07      	ldr	r3, [sp, #28]
 8002c0a:	0a5b      	lsrs	r3, r3, #9
 8002c0c:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8002c0e:	2000      	movs	r0, #0
    break;
 8002c10:	e7e7      	b.n	8002be2 <SD_ioctl+0x1e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002c12:	2003      	movs	r0, #3
}
 8002c14:	4770      	bx	lr
    res = RES_PARERR;
 8002c16:	2004      	movs	r0, #4
 8002c18:	e7e3      	b.n	8002be2 <SD_ioctl+0x1e>
 8002c1a:	bf00      	nop
 8002c1c:	2000000c 	.word	0x2000000c

08002c20 <CpuIrqDisable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
  __asm volatile ("cpsid i");
 8002c20:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 8002c22:	4770      	bx	lr

08002c24 <CpuIrqEnable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
  __asm volatile ("cpsie i");
 8002c24:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 8002c26:	4770      	bx	lr

08002c28 <CpuInit>:
** \brief     Initializes the CPU module.
** \return    none.
**
****************************************************************************************/
void CpuInit(void)
{
 8002c28:	b508      	push	{r3, lr}
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals.
   */
  CpuIrqDisable();
 8002c2a:	f7ff fff9 	bl	8002c20 <CpuIrqDisable>
} /*** end of CpuInit ***/
 8002c2e:	bd08      	pop	{r3, pc}

08002c30 <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 8002c30:	b510      	push	{r4, lr}
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 8002c32:	f000 fa0f 	bl	8003054 <NvmVerifyChecksum>
 8002c36:	b900      	cbnz	r0, 8002c3a <CpuStartUserProgram+0xa>
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
#endif
} /*** end of CpuStartUserProgram ***/
 8002c38:	bd10      	pop	{r4, pc}
  if (CpuUserProgramStartHook() == BLT_FALSE)
 8002c3a:	f7fd fc4d 	bl	80004d8 <CpuUserProgramStartHook>
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	d0fa      	beq.n	8002c38 <CpuStartUserProgram+0x8>
  ComFree();
 8002c42:	f000 fb8f 	bl	8003364 <ComFree>
  HAL_DeInit();
 8002c46:	f7fd ff45 	bl	8000ad4 <HAL_DeInit>
  TimerReset();
 8002c4a:	f000 facb 	bl	80031e4 <TimerReset>
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 8002c4e:	f000 fa05 	bl	800305c <NvmGetUserProgBaseAddress>
 8002c52:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8002c56:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8002c5a:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <CpuStartUserProgram+0x3c>)
 8002c5c:	6098      	str	r0, [r3, #8]
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 8002c5e:	f000 f9fd 	bl	800305c <NvmGetUserProgBaseAddress>
 8002c62:	6844      	ldr	r4, [r0, #4]
  CpuIrqEnable();
 8002c64:	f7ff ffde 	bl	8002c24 <CpuIrqEnable>
  pProgResetHandler();
 8002c68:	47a0      	blx	r4
 8002c6a:	e7e5      	b.n	8002c38 <CpuStartUserProgram+0x8>
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 8002c70:	b570      	push	{r4, r5, r6, lr}
  /* set casted pointers */
  from = (blt_int8u *)src;
  to = (blt_int8u *)dest;

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 8002c72:	e008      	b.n	8002c86 <CpuMemCopy+0x16>
  {
    /* store byte value from source to destination */
    *to++ = *from++;
 8002c74:	1c4d      	adds	r5, r1, #1
 8002c76:	1c46      	adds	r6, r0, #1
 8002c78:	780b      	ldrb	r3, [r1, #0]
 8002c7a:	7003      	strb	r3, [r0, #0]
    /* keep the watchdog happy */
    CopService();
 8002c7c:	f000 fbb2 	bl	80033e4 <CopService>
    *to++ = *from++;
 8002c80:	4630      	mov	r0, r6
 8002c82:	4629      	mov	r1, r5
  while (len-- > 0)
 8002c84:	4622      	mov	r2, r4
 8002c86:	1e53      	subs	r3, r2, #1
 8002c88:	b29c      	uxth	r4, r3
 8002c8a:	2a00      	cmp	r2, #0
 8002c8c:	d1f2      	bne.n	8002c74 <CpuMemCopy+0x4>
  }
} /*** end of CpuMemCopy ***/
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}

08002c90 <CpuMemSet>:
** \param     len  Number of bytes to write.
** \return    none.
**
****************************************************************************************/
void CpuMemSet(blt_addr dest, blt_int8u value, blt_int16u len)
{
 8002c90:	b570      	push	{r4, r5, r6, lr}
 8002c92:	460e      	mov	r6, r1

  /* set casted pointer */
  to = (blt_int8u *)dest;

  /* set all bytes at the destination address to the specified value */
  while (len-- > 0)
 8002c94:	e005      	b.n	8002ca2 <CpuMemSet+0x12>
  {
    /* set byte value */
    *to++ = value;
 8002c96:	1c45      	adds	r5, r0, #1
 8002c98:	7006      	strb	r6, [r0, #0]
    /* keep the watchdog happy */
    CopService();
 8002c9a:	f000 fba3 	bl	80033e4 <CopService>
    *to++ = value;
 8002c9e:	4628      	mov	r0, r5
  while (len-- > 0)
 8002ca0:	4622      	mov	r2, r4
 8002ca2:	1e53      	subs	r3, r2, #1
 8002ca4:	b29c      	uxth	r4, r3
 8002ca6:	2a00      	cmp	r2, #0
 8002ca8:	d1f5      	bne.n	8002c96 <CpuMemSet+0x6>
  }
} /*** end of CpuMemSet ***/
 8002caa:	bd70      	pop	{r4, r5, r6, pc}

08002cac <FlashGetSector>:
** \param     address Address in the flash sector.
** \return    Flash sector number or FLASH_INVALID_SECTOR.
**
****************************************************************************************/
static blt_int8u FlashGetSector(blt_addr address)
{
 8002cac:	b538      	push	{r3, r4, r5, lr}
 8002cae:	4605      	mov	r5, r0
  blt_int8u result = FLASH_INVALID_SECTOR;
  blt_int8u sectorIdx;

  /* search through the sectors to find the right one */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8002cb0:	2400      	movs	r4, #0
 8002cb2:	e001      	b.n	8002cb8 <FlashGetSector+0xc>
 8002cb4:	3401      	adds	r4, #1
 8002cb6:	b2e4      	uxtb	r4, r4
 8002cb8:	2c09      	cmp	r4, #9
 8002cba:	d815      	bhi.n	8002ce8 <FlashGetSector+0x3c>
  {
    /* keep the watchdog happy */
    CopService();
 8002cbc:	f000 fb92 	bl	80033e4 <CopService>
    /* is the address in this sector? */
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8002cc0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8002cc4:	0093      	lsls	r3, r2, #2
 8002cc6:	4a09      	ldr	r2, [pc, #36]	; (8002cec <FlashGetSector+0x40>)
 8002cc8:	58d3      	ldr	r3, [r2, r3]
 8002cca:	42ab      	cmp	r3, r5
 8002ccc:	d8f2      	bhi.n	8002cb4 <FlashGetSector+0x8>
        (address < (flashLayout[sectorIdx].sector_start + \
                    flashLayout[sectorIdx].sector_size)))
 8002cce:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8002cd2:	0091      	lsls	r1, r2, #2
 8002cd4:	4a05      	ldr	r2, [pc, #20]	; (8002cec <FlashGetSector+0x40>)
 8002cd6:	440a      	add	r2, r1
 8002cd8:	6852      	ldr	r2, [r2, #4]
        (address < (flashLayout[sectorIdx].sector_start + \
 8002cda:	4413      	add	r3, r2
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8002cdc:	42ab      	cmp	r3, r5
 8002cde:	d9e9      	bls.n	8002cb4 <FlashGetSector+0x8>
    {
      /* found the sector we are looking for so store it */
      result = flashLayout[sectorIdx].sector_num;
 8002ce0:	4b02      	ldr	r3, [pc, #8]	; (8002cec <FlashGetSector+0x40>)
 8002ce2:	440b      	add	r3, r1
 8002ce4:	7a18      	ldrb	r0, [r3, #8]
      /* all done so no need to continue looping */
      break;
 8002ce6:	e000      	b.n	8002cea <FlashGetSector+0x3e>
  blt_int8u result = FLASH_INVALID_SECTOR;
 8002ce8:	20ff      	movs	r0, #255	; 0xff
    }
  }
  /* give the result back to the caller */
  return result;
} /*** end of FlashGetSector ***/
 8002cea:	bd38      	pop	{r3, r4, r5, pc}
 8002cec:	08006128 	.word	0x08006128

08002cf0 <FlashInitBlock>:
{
 8002cf0:	b508      	push	{r3, lr}
  if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
 8002cf2:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8002cf6:	b953      	cbnz	r3, 8002d0e <FlashInitBlock+0x1e>
  if (block->base_addr == address)
 8002cf8:	6803      	ldr	r3, [r0, #0]
 8002cfa:	428b      	cmp	r3, r1
 8002cfc:	d009      	beq.n	8002d12 <FlashInitBlock+0x22>
  block->base_addr = address;
 8002cfe:	f840 1b04 	str.w	r1, [r0], #4
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 8002d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d06:	f7ff ffb3 	bl	8002c70 <CpuMemCopy>
  return BLT_TRUE;
 8002d0a:	2001      	movs	r0, #1
 8002d0c:	e000      	b.n	8002d10 <FlashInitBlock+0x20>
    return BLT_FALSE;
 8002d0e:	2000      	movs	r0, #0
} /*** end of FlashInitBlock ***/
 8002d10:	bd08      	pop	{r3, pc}
    return BLT_TRUE;
 8002d12:	2001      	movs	r0, #1
 8002d14:	e7fc      	b.n	8002d10 <FlashInitBlock+0x20>

08002d16 <FlashWriteBlock>:
{
 8002d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d1a:	4607      	mov	r7, r0
  HAL_FLASH_Unlock();
 8002d1c:	f7fe f83e 	bl	8000d9c <HAL_FLASH_Unlock>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8002d20:	2400      	movs	r4, #0
 8002d22:	2c7f      	cmp	r4, #127	; 0x7f
 8002d24:	d814      	bhi.n	8002d50 <FlashWriteBlock+0x3a>
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 8002d26:	683e      	ldr	r6, [r7, #0]
 8002d28:	00a3      	lsls	r3, r4, #2
 8002d2a:	eb06 0803 	add.w	r8, r6, r3
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 8002d2e:	443b      	add	r3, r7
 8002d30:	685d      	ldr	r5, [r3, #4]
    CopService();
 8002d32:	f000 fb57 	bl	80033e4 <CopService>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 8002d36:	462a      	mov	r2, r5
 8002d38:	2300      	movs	r3, #0
 8002d3a:	4641      	mov	r1, r8
 8002d3c:	2002      	movs	r0, #2
 8002d3e:	f7fe f881 	bl	8000e44 <HAL_FLASH_Program>
 8002d42:	b938      	cbnz	r0, 8002d54 <FlashWriteBlock+0x3e>
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 8002d44:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8002d48:	42ab      	cmp	r3, r5
 8002d4a:	d109      	bne.n	8002d60 <FlashWriteBlock+0x4a>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8002d4c:	3401      	adds	r4, #1
 8002d4e:	e7e8      	b.n	8002d22 <FlashWriteBlock+0xc>
  blt_bool   result = BLT_TRUE;
 8002d50:	2401      	movs	r4, #1
 8002d52:	e000      	b.n	8002d56 <FlashWriteBlock+0x40>
      result = BLT_FALSE;
 8002d54:	2400      	movs	r4, #0
  HAL_FLASH_Lock();
 8002d56:	f7fe f839 	bl	8000dcc <HAL_FLASH_Lock>
} /*** end of FlashWriteBlock ***/
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      result = BLT_FALSE;
 8002d60:	2400      	movs	r4, #0
 8002d62:	e7f8      	b.n	8002d56 <FlashWriteBlock+0x40>

08002d64 <FlashSwitchBlock>:
{
 8002d64:	b538      	push	{r3, r4, r5, lr}
 8002d66:	460d      	mov	r5, r1
  if (block == &bootBlockInfo)
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <FlashSwitchBlock+0x38>)
 8002d6a:	4298      	cmp	r0, r3
 8002d6c:	d011      	beq.n	8002d92 <FlashSwitchBlock+0x2e>
 8002d6e:	4604      	mov	r4, r0
  else if (base_addr == flashLayout[0].sector_start)
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <FlashSwitchBlock+0x3c>)
 8002d72:	4299      	cmp	r1, r3
 8002d74:	d107      	bne.n	8002d86 <FlashSwitchBlock+0x22>
    block = &bootBlockInfo;
 8002d76:	4c09      	ldr	r4, [pc, #36]	; (8002d9c <FlashSwitchBlock+0x38>)
  if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 8002d78:	4629      	mov	r1, r5
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f7ff ffb8 	bl	8002cf0 <FlashInitBlock>
 8002d80:	b148      	cbz	r0, 8002d96 <FlashSwitchBlock+0x32>
} /*** end of FlashSwitchBlock ***/
 8002d82:	4620      	mov	r0, r4
 8002d84:	bd38      	pop	{r3, r4, r5, pc}
    if (FlashWriteBlock(block) == BLT_FALSE)
 8002d86:	f7ff ffc6 	bl	8002d16 <FlashWriteBlock>
 8002d8a:	2800      	cmp	r0, #0
 8002d8c:	d1f4      	bne.n	8002d78 <FlashSwitchBlock+0x14>
      return BLT_NULL;
 8002d8e:	2400      	movs	r4, #0
 8002d90:	e7f7      	b.n	8002d82 <FlashSwitchBlock+0x1e>
    block = &blockInfo;
 8002d92:	4c04      	ldr	r4, [pc, #16]	; (8002da4 <FlashSwitchBlock+0x40>)
 8002d94:	e7f0      	b.n	8002d78 <FlashSwitchBlock+0x14>
    return BLT_NULL;
 8002d96:	2400      	movs	r4, #0
 8002d98:	e7f3      	b.n	8002d82 <FlashSwitchBlock+0x1e>
 8002d9a:	bf00      	nop
 8002d9c:	20000638 	.word	0x20000638
 8002da0:	08008000 	.word	0x08008000
 8002da4:	20000434 	.word	0x20000434

08002da8 <FlashAddToBlock>:
{
 8002da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dac:	4606      	mov	r6, r0
 8002dae:	460c      	mov	r4, r1
 8002db0:	4617      	mov	r7, r2
 8002db2:	461d      	mov	r5, r3
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8002db4:	f421 78ff 	bic.w	r8, r1, #510	; 0x1fe
 8002db8:	f028 0801 	bic.w	r8, r8, #1
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 8002dbc:	6803      	ldr	r3, [r0, #0]
 8002dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc2:	d007      	beq.n	8002dd4 <FlashAddToBlock+0x2c>
  if (block->base_addr != current_base_addr)
 8002dc4:	6833      	ldr	r3, [r6, #0]
 8002dc6:	4543      	cmp	r3, r8
 8002dc8:	d10b      	bne.n	8002de2 <FlashAddToBlock+0x3a>
  dst = &(block->data[address - block->base_addr]);
 8002dca:	6833      	ldr	r3, [r6, #0]
 8002dcc:	1ae4      	subs	r4, r4, r3
 8002dce:	4434      	add	r4, r6
 8002dd0:	3404      	adds	r4, #4
 8002dd2:	e015      	b.n	8002e00 <FlashAddToBlock+0x58>
    if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 8002dd4:	4641      	mov	r1, r8
 8002dd6:	f7ff ff8b 	bl	8002cf0 <FlashInitBlock>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2800      	cmp	r0, #0
 8002dde:	d1f1      	bne.n	8002dc4 <FlashAddToBlock+0x1c>
 8002de0:	e01f      	b.n	8002e22 <FlashAddToBlock+0x7a>
    block = FlashSwitchBlock(block, current_base_addr);
 8002de2:	4641      	mov	r1, r8
 8002de4:	4630      	mov	r0, r6
 8002de6:	f7ff ffbd 	bl	8002d64 <FlashSwitchBlock>
    if (block == BLT_NULL)
 8002dea:	4606      	mov	r6, r0
 8002dec:	2800      	cmp	r0, #0
 8002dee:	d1ec      	bne.n	8002dca <FlashAddToBlock+0x22>
      return BLT_FALSE;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e016      	b.n	8002e22 <FlashAddToBlock+0x7a>
    *dst = *src;
 8002df4:	f817 3b01 	ldrb.w	r3, [r7], #1
 8002df8:	f804 3b01 	strb.w	r3, [r4], #1
  while (len > 0);
 8002dfc:	3d01      	subs	r5, #1
 8002dfe:	d00f      	beq.n	8002e20 <FlashAddToBlock+0x78>
    CopService();
 8002e00:	f000 faf0 	bl	80033e4 <CopService>
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 8002e04:	1d33      	adds	r3, r6, #4
 8002e06:	1ae3      	subs	r3, r4, r3
 8002e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e0c:	d3f2      	bcc.n	8002df4 <FlashAddToBlock+0x4c>
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 8002e0e:	f508 7100 	add.w	r1, r8, #512	; 0x200
 8002e12:	4630      	mov	r0, r6
 8002e14:	f7ff ffa6 	bl	8002d64 <FlashSwitchBlock>
      if (block == BLT_NULL)
 8002e18:	4606      	mov	r6, r0
 8002e1a:	b128      	cbz	r0, 8002e28 <FlashAddToBlock+0x80>
      dst = &(block->data[0]);
 8002e1c:	1d04      	adds	r4, r0, #4
 8002e1e:	e7e9      	b.n	8002df4 <FlashAddToBlock+0x4c>
  return BLT_TRUE;
 8002e20:	2301      	movs	r3, #1
} /*** end of FlashAddToBlock ***/
 8002e22:	4618      	mov	r0, r3
 8002e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLT_FALSE;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e7fa      	b.n	8002e22 <FlashAddToBlock+0x7a>

08002e2c <FlashEraseSectors>:
{
 8002e2c:	b570      	push	{r4, r5, r6, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	4604      	mov	r4, r0
 8002e32:	460d      	mov	r5, r1
  blt_int32u eraseSectorError = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	9300      	str	r3, [sp, #0]
  if (first_sector > last_sector)
 8002e38:	4288      	cmp	r0, r1
 8002e3a:	d80e      	bhi.n	8002e5a <FlashEraseSectors+0x2e>
  blt_bool result = BLT_TRUE;
 8002e3c:	2601      	movs	r6, #1
  if ((first_sector < flashLayout[0].sector_num) || \
 8002e3e:	2c01      	cmp	r4, #1
 8002e40:	d91e      	bls.n	8002e80 <FlashEraseSectors+0x54>
 8002e42:	2d0b      	cmp	r5, #11
 8002e44:	d820      	bhi.n	8002e88 <FlashEraseSectors+0x5c>
  if (result == BLT_TRUE)
 8002e46:	b1e6      	cbz	r6, 8002e82 <FlashEraseSectors+0x56>
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	9301      	str	r3, [sp, #4]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	9305      	str	r3, [sp, #20]
    eraseInitStruct.NbSectors = 1;
 8002e50:	2301      	movs	r3, #1
 8002e52:	9304      	str	r3, [sp, #16]
    HAL_FLASH_Unlock();
 8002e54:	f7fd ffa2 	bl	8000d9c <HAL_FLASH_Unlock>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8002e58:	e003      	b.n	8002e62 <FlashEraseSectors+0x36>
    result = BLT_FALSE;
 8002e5a:	2600      	movs	r6, #0
 8002e5c:	e7ef      	b.n	8002e3e <FlashEraseSectors+0x12>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8002e5e:	3401      	adds	r4, #1
 8002e60:	b2e4      	uxtb	r4, r4
 8002e62:	42ac      	cmp	r4, r5
 8002e64:	d809      	bhi.n	8002e7a <FlashEraseSectors+0x4e>
      CopService();
 8002e66:	f000 fabd 	bl	80033e4 <CopService>
      eraseInitStruct.Sector = sectorIdx;
 8002e6a:	9403      	str	r4, [sp, #12]
      if(HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&eraseSectorError) != HAL_OK)
 8002e6c:	4669      	mov	r1, sp
 8002e6e:	a801      	add	r0, sp, #4
 8002e70:	f7fe f896 	bl	8000fa0 <HAL_FLASHEx_Erase>
 8002e74:	2800      	cmp	r0, #0
 8002e76:	d0f2      	beq.n	8002e5e <FlashEraseSectors+0x32>
        result = BLT_FALSE;
 8002e78:	2600      	movs	r6, #0
    HAL_FLASH_Lock();
 8002e7a:	f7fd ffa7 	bl	8000dcc <HAL_FLASH_Lock>
 8002e7e:	e000      	b.n	8002e82 <FlashEraseSectors+0x56>
 8002e80:	2600      	movs	r6, #0
} /*** end of FlashEraseSectors ***/
 8002e82:	4630      	mov	r0, r6
 8002e84:	b006      	add	sp, #24
 8002e86:	bd70      	pop	{r4, r5, r6, pc}
 8002e88:	2600      	movs	r6, #0
 8002e8a:	e7fa      	b.n	8002e82 <FlashEraseSectors+0x56>

08002e8c <FlashInit>:
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e90:	4a02      	ldr	r2, [pc, #8]	; (8002e9c <FlashInit+0x10>)
 8002e92:	6013      	str	r3, [r2, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8002e94:	4a02      	ldr	r2, [pc, #8]	; (8002ea0 <FlashInit+0x14>)
 8002e96:	6013      	str	r3, [r2, #0]
} /*** end of FlashInit ***/
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20000434 	.word	0x20000434
 8002ea0:	20000638 	.word	0x20000638

08002ea4 <FlashWrite>:
{
 8002ea4:	b570      	push	{r4, r5, r6, lr}
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8002ea6:	1e4b      	subs	r3, r1, #1
 8002ea8:	4c15      	ldr	r4, [pc, #84]	; (8002f00 <FlashWrite+0x5c>)
 8002eaa:	1a24      	subs	r4, r4, r0
 8002eac:	42a3      	cmp	r3, r4
 8002eae:	d901      	bls.n	8002eb4 <FlashWrite+0x10>
    return BLT_FALSE;
 8002eb0:	2000      	movs	r0, #0
} /*** end of FlashWrite ***/
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}
 8002eb4:	4616      	mov	r6, r2
 8002eb6:	460d      	mov	r5, r1
 8002eb8:	4604      	mov	r4, r0
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8002eba:	f7ff fef7 	bl	8002cac <FlashGetSector>
 8002ebe:	28ff      	cmp	r0, #255	; 0xff
 8002ec0:	d01a      	beq.n	8002ef8 <FlashWrite+0x54>
      (FlashGetSector(addr+len-1) == FLASH_INVALID_SECTOR))
 8002ec2:	1928      	adds	r0, r5, r4
 8002ec4:	3801      	subs	r0, #1
 8002ec6:	f7ff fef1 	bl	8002cac <FlashGetSector>
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8002eca:	28ff      	cmp	r0, #255	; 0xff
 8002ecc:	d016      	beq.n	8002efc <FlashWrite+0x58>
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8002ece:	f424 73ff 	bic.w	r3, r4, #510	; 0x1fe
 8002ed2:	f023 0301 	bic.w	r3, r3, #1
  if (base_addr == flashLayout[0].sector_start)
 8002ed6:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <FlashWrite+0x60>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d006      	beq.n	8002eea <FlashWrite+0x46>
  return FlashAddToBlock(&blockInfo, addr, data, len);
 8002edc:	462b      	mov	r3, r5
 8002ede:	4632      	mov	r2, r6
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	4809      	ldr	r0, [pc, #36]	; (8002f08 <FlashWrite+0x64>)
 8002ee4:	f7ff ff60 	bl	8002da8 <FlashAddToBlock>
 8002ee8:	e7e3      	b.n	8002eb2 <FlashWrite+0xe>
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 8002eea:	462b      	mov	r3, r5
 8002eec:	4632      	mov	r2, r6
 8002eee:	4621      	mov	r1, r4
 8002ef0:	4806      	ldr	r0, [pc, #24]	; (8002f0c <FlashWrite+0x68>)
 8002ef2:	f7ff ff59 	bl	8002da8 <FlashAddToBlock>
 8002ef6:	e7dc      	b.n	8002eb2 <FlashWrite+0xe>
    return BLT_FALSE;
 8002ef8:	2000      	movs	r0, #0
 8002efa:	e7da      	b.n	8002eb2 <FlashWrite+0xe>
 8002efc:	2000      	movs	r0, #0
 8002efe:	e7d8      	b.n	8002eb2 <FlashWrite+0xe>
 8002f00:	080fffff 	.word	0x080fffff
 8002f04:	08008000 	.word	0x08008000
 8002f08:	20000434 	.word	0x20000434
 8002f0c:	20000638 	.word	0x20000638

08002f10 <FlashErase>:
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8002f10:	1e4a      	subs	r2, r1, #1
 8002f12:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <FlashErase+0x3c>)
 8002f14:	1a1b      	subs	r3, r3, r0
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d901      	bls.n	8002f1e <FlashErase+0xe>
    return BLT_FALSE;
 8002f1a:	2000      	movs	r0, #0
} /*** end of FlashErase ***/
 8002f1c:	4770      	bx	lr
{
 8002f1e:	b570      	push	{r4, r5, r6, lr}
 8002f20:	460c      	mov	r4, r1
 8002f22:	4605      	mov	r5, r0
  first_sector = FlashGetSector(addr);
 8002f24:	f7ff fec2 	bl	8002cac <FlashGetSector>
 8002f28:	4606      	mov	r6, r0
  last_sector  = FlashGetSector(addr+len-1);
 8002f2a:	1960      	adds	r0, r4, r5
 8002f2c:	3801      	subs	r0, #1
 8002f2e:	f7ff febd 	bl	8002cac <FlashGetSector>
  if ((first_sector == FLASH_INVALID_SECTOR) || (last_sector == FLASH_INVALID_SECTOR))
 8002f32:	2eff      	cmp	r6, #255	; 0xff
 8002f34:	d006      	beq.n	8002f44 <FlashErase+0x34>
 8002f36:	28ff      	cmp	r0, #255	; 0xff
 8002f38:	d006      	beq.n	8002f48 <FlashErase+0x38>
  return FlashEraseSectors(first_sector, last_sector);
 8002f3a:	4601      	mov	r1, r0
 8002f3c:	4630      	mov	r0, r6
 8002f3e:	f7ff ff75 	bl	8002e2c <FlashEraseSectors>
} /*** end of FlashErase ***/
 8002f42:	bd70      	pop	{r4, r5, r6, pc}
    return BLT_FALSE;
 8002f44:	2000      	movs	r0, #0
 8002f46:	e7fc      	b.n	8002f42 <FlashErase+0x32>
 8002f48:	2000      	movs	r0, #0
 8002f4a:	e7fa      	b.n	8002f42 <FlashErase+0x32>
 8002f4c:	080fffff 	.word	0x080fffff

08002f50 <FlashWriteChecksum>:
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 8002f50:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <FlashWriteChecksum+0x44>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f58:	d01a      	beq.n	8002f90 <FlashWriteChecksum+0x40>
{
 8002f5a:	b500      	push	{lr}
 8002f5c:	b083      	sub	sp, #12
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 8002f5e:	4a0d      	ldr	r2, [pc, #52]	; (8002f94 <FlashWriteChecksum+0x44>)
 8002f60:	6853      	ldr	r3, [r2, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 8002f62:	6891      	ldr	r1, [r2, #8]
 8002f64:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 8002f66:	68d1      	ldr	r1, [r2, #12]
 8002f68:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 8002f6a:	6911      	ldr	r1, [r2, #16]
 8002f6c:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 8002f6e:	6951      	ldr	r1, [r2, #20]
 8002f70:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 8002f72:	6991      	ldr	r1, [r2, #24]
 8002f74:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 8002f76:	69d2      	ldr	r2, [r2, #28]
 8002f78:	4413      	add	r3, r2
  signature_checksum += 1; /* two's complement */
 8002f7a:	425b      	negs	r3, r3
 8002f7c:	aa02      	add	r2, sp, #8
 8002f7e:	f842 3d04 	str.w	r3, [r2, #-4]!
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 8002f82:	2104      	movs	r1, #4
 8002f84:	4804      	ldr	r0, [pc, #16]	; (8002f98 <FlashWriteChecksum+0x48>)
 8002f86:	f7ff ff8d 	bl	8002ea4 <FlashWrite>
} /*** end of FlashWriteChecksum ***/
 8002f8a:	b003      	add	sp, #12
 8002f8c:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLT_TRUE;
 8002f90:	2001      	movs	r0, #1
} /*** end of FlashWriteChecksum ***/
 8002f92:	4770      	bx	lr
 8002f94:	20000638 	.word	0x20000638
 8002f98:	08008188 	.word	0x08008188

08002f9c <FlashVerifyChecksum>:
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <FlashVerifyChecksum+0x38>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 8002fa0:	4a0d      	ldr	r2, [pc, #52]	; (8002fd8 <FlashVerifyChecksum+0x3c>)
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <FlashVerifyChecksum+0x40>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 8002fac:	4a0c      	ldr	r2, [pc, #48]	; (8002fe0 <FlashVerifyChecksum+0x44>)
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 8002fb2:	4a0c      	ldr	r2, [pc, #48]	; (8002fe4 <FlashVerifyChecksum+0x48>)
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <FlashVerifyChecksum+0x4c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <FlashVerifyChecksum+0x50>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 8002fc4:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <FlashVerifyChecksum+0x54>)
 8002fc6:	6812      	ldr	r2, [r2, #0]
  if (signature_checksum == 0)
 8002fc8:	42da      	cmn	r2, r3
 8002fca:	d001      	beq.n	8002fd0 <FlashVerifyChecksum+0x34>
  return BLT_FALSE;
 8002fcc:	2000      	movs	r0, #0
} /*** end of FlashVerifyChecksum ***/
 8002fce:	4770      	bx	lr
    return BLT_TRUE;
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	4770      	bx	lr
 8002fd4:	08008000 	.word	0x08008000
 8002fd8:	08008004 	.word	0x08008004
 8002fdc:	08008008 	.word	0x08008008
 8002fe0:	0800800c 	.word	0x0800800c
 8002fe4:	08008010 	.word	0x08008010
 8002fe8:	08008014 	.word	0x08008014
 8002fec:	08008018 	.word	0x08008018
 8002ff0:	08008188 	.word	0x08008188

08002ff4 <FlashDone>:
{
 8002ff4:	b508      	push	{r3, lr}
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8002ff6:	4b0d      	ldr	r3, [pc, #52]	; (800302c <FlashDone+0x38>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffe:	d10b      	bne.n	8003018 <FlashDone+0x24>
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <FlashDone+0x3c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003008:	d00d      	beq.n	8003026 <FlashDone+0x32>
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 800300a:	4809      	ldr	r0, [pc, #36]	; (8003030 <FlashDone+0x3c>)
 800300c:	f7ff fe83 	bl	8002d16 <FlashWriteBlock>
 8003010:	4603      	mov	r3, r0
 8003012:	b148      	cbz	r0, 8003028 <FlashDone+0x34>
  return BLT_TRUE;
 8003014:	2301      	movs	r3, #1
 8003016:	e007      	b.n	8003028 <FlashDone+0x34>
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 8003018:	4804      	ldr	r0, [pc, #16]	; (800302c <FlashDone+0x38>)
 800301a:	f7ff fe7c 	bl	8002d16 <FlashWriteBlock>
 800301e:	4603      	mov	r3, r0
 8003020:	2800      	cmp	r0, #0
 8003022:	d1ed      	bne.n	8003000 <FlashDone+0xc>
 8003024:	e000      	b.n	8003028 <FlashDone+0x34>
  return BLT_TRUE;
 8003026:	2301      	movs	r3, #1
} /*** end of FlashDone ***/
 8003028:	4618      	mov	r0, r3
 800302a:	bd08      	pop	{r3, pc}
 800302c:	20000638 	.word	0x20000638
 8003030:	20000434 	.word	0x20000434

08003034 <FlashGetUserProgBaseAddress>:
} /*** end of FlashGetUserProgBaseAddress ***/
 8003034:	4800      	ldr	r0, [pc, #0]	; (8003038 <FlashGetUserProgBaseAddress+0x4>)
 8003036:	4770      	bx	lr
 8003038:	08008000 	.word	0x08008000

0800303c <NvmInit>:
** \brief     Initializes the NVM driver.
** \return    none.
**
****************************************************************************************/
void NvmInit(void)
{
 800303c:	b508      	push	{r3, lr}
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 800303e:	f7ff ff25 	bl	8002e8c <FlashInit>
} /*** end of NvmInit ***/
 8003042:	bd08      	pop	{r3, pc}

08003044 <NvmWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 8003044:	b508      	push	{r3, lr}
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 8003046:	f7ff ff2d 	bl	8002ea4 <FlashWrite>
} /*** end of NvmWrite ***/
 800304a:	bd08      	pop	{r3, pc}

0800304c <NvmErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmErase(blt_addr addr, blt_int32u len)
{
 800304c:	b508      	push	{r3, lr}
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 800304e:	f7ff ff5f 	bl	8002f10 <FlashErase>
} /*** end of NvmErase ***/
 8003052:	bd08      	pop	{r3, pc}

08003054 <NvmVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmVerifyChecksum(void)
{
 8003054:	b508      	push	{r3, lr}
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 8003056:	f7ff ffa1 	bl	8002f9c <FlashVerifyChecksum>
#endif
} /*** end of NvmVerifyChecksum ***/
 800305a:	bd08      	pop	{r3, pc}

0800305c <NvmGetUserProgBaseAddress>:
**            program. This is typically that start of the vector table.
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
 800305c:	b508      	push	{r3, lr}
  return FlashGetUserProgBaseAddress();
 800305e:	f7ff ffe9 	bl	8003034 <FlashGetUserProgBaseAddress>
} /*** end of NvmGetUserProgBaseAddress ***/
 8003062:	bd08      	pop	{r3, pc}

08003064 <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 8003064:	b508      	push	{r3, lr}
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 8003066:	f7ff ff73 	bl	8002f50 <FlashWriteChecksum>
 800306a:	4603      	mov	r3, r0
 800306c:	b908      	cbnz	r0, 8003072 <NvmDone+0xe>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
} /*** end of NvmDone ***/
 800306e:	4618      	mov	r0, r3
 8003070:	bd08      	pop	{r3, pc}
  return FlashDone();
 8003072:	f7ff ffbf 	bl	8002ff4 <FlashDone>
 8003076:	4603      	mov	r3, r0
 8003078:	e7f9      	b.n	800306e <NvmDone+0xa>
	...

0800307c <Rs232ReceiveByte>:
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <Rs232ReceiveByte+0x18>)
 800307e:	681b      	ldr	r3, [r3, #0]
** \return    BLT_TRUE if a byte was received, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool Rs232ReceiveByte(blt_int8u *data)
{
  if (LL_USART_IsActiveFlag_RXNE(USART_CHANNEL) != 0)
 8003080:	f013 0f20 	tst.w	r3, #32
 8003084:	d004      	beq.n	8003090 <Rs232ReceiveByte+0x14>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003086:	4b03      	ldr	r3, [pc, #12]	; (8003094 <Rs232ReceiveByte+0x18>)
 8003088:	685b      	ldr	r3, [r3, #4]
  {
    /* retrieve and store the newly received byte */
    *data = LL_USART_ReceiveData8(USART_CHANNEL);
 800308a:	7003      	strb	r3, [r0, #0]
    /* all done */
    return BLT_TRUE;
 800308c:	2001      	movs	r0, #1
 800308e:	4770      	bx	lr
  }
  /* still here to no new byte received */
  return BLT_FALSE;
 8003090:	2000      	movs	r0, #0
} /*** end of Rs232ReceiveByte ***/
 8003092:	4770      	bx	lr
 8003094:	40011400 	.word	0x40011400

08003098 <Rs232TransmitByte>:
** \param     data Value of byte that is to be transmitted.
** \return    none.
**
****************************************************************************************/
static void Rs232TransmitByte(blt_int8u data)
{
 8003098:	b510      	push	{r4, lr}
  USARTx->DR = Value;
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <Rs232TransmitByte+0x28>)
 800309c:	6058      	str	r0, [r3, #4]
  blt_int32u timeout;

  /* write byte to transmit holding register */
  LL_USART_TransmitData8(USART_CHANNEL, data);
  /* set timeout time to wait for transmit completion. */
  timeout = TimerGet() + RS232_BYTE_TX_TIMEOUT_MS;
 800309e:	f000 f8cb 	bl	8003238 <TimerGet>
 80030a2:	f100 040a 	add.w	r4, r0, #10
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <Rs232TransmitByte+0x28>)
 80030a8:	681b      	ldr	r3, [r3, #0]
  /* wait for tx holding register to be empty */
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 80030aa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80030ae:	d105      	bne.n	80030bc <Rs232TransmitByte+0x24>
  {
    /* keep the watchdog happy */
    CopService();
 80030b0:	f000 f998 	bl	80033e4 <CopService>
    /* break loop upon timeout. this would indicate a hardware failure. */
    if (TimerGet() > timeout)
 80030b4:	f000 f8c0 	bl	8003238 <TimerGet>
 80030b8:	42a0      	cmp	r0, r4
 80030ba:	d9f4      	bls.n	80030a6 <Rs232TransmitByte+0xe>
    {
      break;
    }
  }
} /*** end of Rs232TransmitByte ***/
 80030bc:	bd10      	pop	{r4, pc}
 80030be:	bf00      	nop
 80030c0:	40011400 	.word	0x40011400

080030c4 <Rs232Init>:
{
 80030c4:	b510      	push	{r4, lr}
 80030c6:	b088      	sub	sp, #32
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80030c8:	4c0c      	ldr	r4, [pc, #48]	; (80030fc <Rs232Init+0x38>)
 80030ca:	68e3      	ldr	r3, [r4, #12]
 80030cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030d0:	60e3      	str	r3, [r4, #12]
  USART_InitStruct.BaudRate = BOOT_COM_RS232_BAUDRATE;
 80030d2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80030d6:	9301      	str	r3, [sp, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80030d8:	2300      	movs	r3, #0
 80030da:	9302      	str	r3, [sp, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80030dc:	9303      	str	r3, [sp, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80030de:	9304      	str	r3, [sp, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80030e0:	220c      	movs	r2, #12
 80030e2:	9205      	str	r2, [sp, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80030e4:	9306      	str	r3, [sp, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80030e6:	9307      	str	r3, [sp, #28]
  LL_USART_Init(USART_CHANNEL, &USART_InitStruct);
 80030e8:	a901      	add	r1, sp, #4
 80030ea:	4620      	mov	r0, r4
 80030ec:	f7ff fbcc 	bl	8002888 <LL_USART_Init>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80030f0:	68e3      	ldr	r3, [r4, #12]
 80030f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030f6:	60e3      	str	r3, [r4, #12]
} /*** end of Rs232Init ***/
 80030f8:	b008      	add	sp, #32
 80030fa:	bd10      	pop	{r4, pc}
 80030fc:	40011400 	.word	0x40011400

08003100 <Rs232TransmitPacket>:
{
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	4606      	mov	r6, r0
 8003104:	460d      	mov	r5, r1
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 8003106:	2940      	cmp	r1, #64	; 0x40
 8003108:	d804      	bhi.n	8003114 <Rs232TransmitPacket+0x14>
  Rs232TransmitByte(len);
 800310a:	4628      	mov	r0, r5
 800310c:	f7ff ffc4 	bl	8003098 <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 8003110:	2400      	movs	r4, #0
 8003112:	e00b      	b.n	800312c <Rs232TransmitPacket+0x2c>
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 8003114:	217b      	movs	r1, #123	; 0x7b
 8003116:	4807      	ldr	r0, [pc, #28]	; (8003134 <Rs232TransmitPacket+0x34>)
 8003118:	f000 f89a 	bl	8003250 <AssertFailure>
 800311c:	e7f5      	b.n	800310a <Rs232TransmitPacket+0xa>
    CopService();
 800311e:	f000 f961 	bl	80033e4 <CopService>
    Rs232TransmitByte(data[data_index]);
 8003122:	5d30      	ldrb	r0, [r6, r4]
 8003124:	f7ff ffb8 	bl	8003098 <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 8003128:	3401      	adds	r4, #1
 800312a:	b2a4      	uxth	r4, r4
 800312c:	b2ab      	uxth	r3, r5
 800312e:	42a3      	cmp	r3, r4
 8003130:	d8f5      	bhi.n	800311e <Rs232TransmitPacket+0x1e>
} /*** end of Rs232TransmitPacket ***/
 8003132:	bd70      	pop	{r4, r5, r6, pc}
 8003134:	080061a0 	.word	0x080061a0

08003138 <Rs232ReceivePacket>:
{
 8003138:	b570      	push	{r4, r5, r6, lr}
  if (xcpCtoRxInProgress == BLT_FALSE)
 800313a:	4b25      	ldr	r3, [pc, #148]	; (80031d0 <Rs232ReceivePacket+0x98>)
 800313c:	781c      	ldrb	r4, [r3, #0]
 800313e:	b9bc      	cbnz	r4, 8003170 <Rs232ReceivePacket+0x38>
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == BLT_TRUE)
 8003140:	4824      	ldr	r0, [pc, #144]	; (80031d4 <Rs232ReceivePacket+0x9c>)
 8003142:	f7ff ff9b 	bl	800307c <Rs232ReceiveByte>
 8003146:	2801      	cmp	r0, #1
 8003148:	d001      	beq.n	800314e <Rs232ReceivePacket+0x16>
} /*** end of Rs232ReceivePacket ***/
 800314a:	4620      	mov	r0, r4
 800314c:	bd70      	pop	{r4, r5, r6, pc}
      if ( (xcpCtoReqPacket[0] > 0) &&
 800314e:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <Rs232ReceivePacket+0x9c>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	3b01      	subs	r3, #1
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b3f      	cmp	r3, #63	; 0x3f
 8003158:	d8f7      	bhi.n	800314a <Rs232ReceivePacket+0x12>
        xcpCtoRxStartTime = TimerGet();
 800315a:	f000 f86d 	bl	8003238 <TimerGet>
 800315e:	4b1e      	ldr	r3, [pc, #120]	; (80031d8 <Rs232ReceivePacket+0xa0>)
 8003160:	6018      	str	r0, [r3, #0]
        xcpCtoRxLength = 0;
 8003162:	4b1e      	ldr	r3, [pc, #120]	; (80031dc <Rs232ReceivePacket+0xa4>)
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]
        xcpCtoRxInProgress = BLT_TRUE;
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <Rs232ReceivePacket+0x98>)
 800316a:	2201      	movs	r2, #1
 800316c:	701a      	strb	r2, [r3, #0]
 800316e:	e7ec      	b.n	800314a <Rs232ReceivePacket+0x12>
 8003170:	4606      	mov	r6, r0
 8003172:	460d      	mov	r5, r1
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 8003174:	4b19      	ldr	r3, [pc, #100]	; (80031dc <Rs232ReceivePacket+0xa4>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	3301      	adds	r3, #1
 800317a:	4816      	ldr	r0, [pc, #88]	; (80031d4 <Rs232ReceivePacket+0x9c>)
 800317c:	4418      	add	r0, r3
 800317e:	f7ff ff7d 	bl	800307c <Rs232ReceiveByte>
 8003182:	4604      	mov	r4, r0
 8003184:	2801      	cmp	r0, #1
 8003186:	d115      	bne.n	80031b4 <Rs232ReceivePacket+0x7c>
      xcpCtoRxLength++;
 8003188:	4b14      	ldr	r3, [pc, #80]	; (80031dc <Rs232ReceivePacket+0xa4>)
 800318a:	781a      	ldrb	r2, [r3, #0]
 800318c:	3201      	adds	r2, #1
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	701a      	strb	r2, [r3, #0]
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <Rs232ReceivePacket+0x9c>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d001      	beq.n	800319e <Rs232ReceivePacket+0x66>
  return BLT_FALSE;
 800319a:	2400      	movs	r4, #0
 800319c:	e7d5      	b.n	800314a <Rs232ReceivePacket+0x12>
        CpuMemCopy((blt_int32u)data, (blt_int32u)&xcpCtoReqPacket[1], xcpCtoRxLength);
 800319e:	4910      	ldr	r1, [pc, #64]	; (80031e0 <Rs232ReceivePacket+0xa8>)
 80031a0:	4630      	mov	r0, r6
 80031a2:	f7ff fd65 	bl	8002c70 <CpuMemCopy>
        xcpCtoRxInProgress = BLT_FALSE;
 80031a6:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <Rs232ReceivePacket+0x98>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	701a      	strb	r2, [r3, #0]
        *len = xcpCtoRxLength;
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <Rs232ReceivePacket+0xa4>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	702b      	strb	r3, [r5, #0]
        return BLT_TRUE;
 80031b2:	e7ca      	b.n	800314a <Rs232ReceivePacket+0x12>
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 80031b4:	f000 f840 	bl	8003238 <TimerGet>
 80031b8:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <Rs232ReceivePacket+0xa0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3364      	adds	r3, #100	; 0x64
 80031be:	4298      	cmp	r0, r3
 80031c0:	d903      	bls.n	80031ca <Rs232ReceivePacket+0x92>
        xcpCtoRxInProgress = BLT_FALSE;
 80031c2:	2400      	movs	r4, #0
 80031c4:	4b02      	ldr	r3, [pc, #8]	; (80031d0 <Rs232ReceivePacket+0x98>)
 80031c6:	701c      	strb	r4, [r3, #0]
 80031c8:	e7bf      	b.n	800314a <Rs232ReceivePacket+0x12>
  return BLT_FALSE;
 80031ca:	2400      	movs	r4, #0
 80031cc:	e7bd      	b.n	800314a <Rs232ReceivePacket+0x12>
 80031ce:	bf00      	nop
 80031d0:	2000087d 	.word	0x2000087d
 80031d4:	2000083c 	.word	0x2000083c
 80031d8:	20000880 	.word	0x20000880
 80031dc:	2000087e 	.word	0x2000087e
 80031e0:	2000083d 	.word	0x2000083d

080031e4 <TimerReset>:
**
****************************************************************************************/
void TimerReset(void)
{
  /* Set the systick's registers back into the default reset value. */
  SysTick->CTRL = 0;
 80031e4:	4b02      	ldr	r3, [pc, #8]	; (80031f0 <TimerReset+0xc>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 80031ea:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 80031ec:	609a      	str	r2, [r3, #8]
} /* end of TimerReset */
 80031ee:	4770      	bx	lr
 80031f0:	e000e010 	.word	0xe000e010

080031f4 <TimerInit>:
{
 80031f4:	b508      	push	{r3, lr}
  TimerReset();
 80031f6:	f7ff fff5 	bl	80031e4 <TimerReset>
  SysTick->LOAD = BOOT_CPU_SYSTEM_SPEED_KHZ - 1;
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <TimerInit+0x1c>)
 80031fc:	4a05      	ldr	r2, [pc, #20]	; (8003214 <TimerInit+0x20>)
 80031fe:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8003200:	2200      	movs	r2, #0
 8003202:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 8003204:	2105      	movs	r1, #5
 8003206:	6019      	str	r1, [r3, #0]
  millisecond_counter = 0;
 8003208:	4b03      	ldr	r3, [pc, #12]	; (8003218 <TimerInit+0x24>)
 800320a:	601a      	str	r2, [r3, #0]
} /*** end of TimerInit ***/
 800320c:	bd08      	pop	{r3, pc}
 800320e:	bf00      	nop
 8003210:	e000e010 	.word	0xe000e010
 8003214:	0002903f 	.word	0x0002903f
 8003218:	20000884 	.word	0x20000884

0800321c <TimerUpdate>:
**
****************************************************************************************/
void TimerUpdate(void)
{
  /* Check if the millisecond event occurred. */
  if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <TimerUpdate+0x14>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003224:	d003      	beq.n	800322e <TimerUpdate+0x12>
  {
    /* Increment the millisecond counter. */
    millisecond_counter++;
 8003226:	4a03      	ldr	r2, [pc, #12]	; (8003234 <TimerUpdate+0x18>)
 8003228:	6813      	ldr	r3, [r2, #0]
 800322a:	3301      	adds	r3, #1
 800322c:	6013      	str	r3, [r2, #0]
  }
} /*** end of TimerUpdate ***/
 800322e:	4770      	bx	lr
 8003230:	e000e010 	.word	0xe000e010
 8003234:	20000884 	.word	0x20000884

08003238 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 8003238:	b508      	push	{r3, lr}
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 800323a:	f7ff ffef 	bl	800321c <TimerUpdate>
  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
} /*** end of TimerGet ***/
 800323e:	4b01      	ldr	r3, [pc, #4]	; (8003244 <TimerGet+0xc>)
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	bd08      	pop	{r3, pc}
 8003244:	20000884 	.word	0x20000884

08003248 <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 8003248:	b508      	push	{r3, lr}
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
 800324a:	f7ff fff5 	bl	8003238 <TimerGet>
} /*** end of HAL_GetTick ***/
 800324e:	bd08      	pop	{r3, pc}

08003250 <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 8003250:	b508      	push	{r3, lr}
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 8003252:	f000 f8c7 	bl	80033e4 <CopService>
 8003256:	e7fc      	b.n	8003252 <AssertFailure+0x2>

08003258 <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 8003258:	b508      	push	{r3, lr}
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 800325a:	f000 f8b7 	bl	80033cc <ComIsConnected>
 800325e:	2801      	cmp	r0, #1
 8003260:	d006      	beq.n	8003270 <BackDoorCheck+0x18>
#if (BOOT_FILE_SYS_ENABLE > 0)
  /* check if the file module is busy, indicating that a firmware update through the
   * locally attached storage is in progress. in this case the backdoor stays open
   * anyway, so no need to check if it needs to be closed.
   */
  if (FileIsIdle() == BLT_FALSE)
 8003262:	f000 f94f 	bl	8003504 <FileIsIdle>
 8003266:	b118      	cbz	r0, 8003270 <BackDoorCheck+0x18>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <BackDoorCheck+0x44>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d000      	beq.n	8003272 <BackDoorCheck+0x1a>
        CpuStartUserProgram();
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 8003270:	bd08      	pop	{r3, pc}
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 8003272:	f7ff ffe1 	bl	8003238 <TimerGet>
 8003276:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <BackDoorCheck+0x48>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a0a      	ldr	r2, [pc, #40]	; (80032a4 <BackDoorCheck+0x4c>)
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	4413      	add	r3, r2
 8003280:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003284:	4298      	cmp	r0, r3
 8003286:	d3f3      	bcc.n	8003270 <BackDoorCheck+0x18>
      backdoorOpen = BLT_FALSE;
 8003288:	4b04      	ldr	r3, [pc, #16]	; (800329c <BackDoorCheck+0x44>)
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
      if (FileHandleFirmwareUpdateRequest() == BLT_FALSE)
 800328e:	f000 f943 	bl	8003518 <FileHandleFirmwareUpdateRequest>
 8003292:	2800      	cmp	r0, #0
 8003294:	d1ec      	bne.n	8003270 <BackDoorCheck+0x18>
        CpuStartUserProgram();
 8003296:	f7ff fccb 	bl	8002c30 <CpuStartUserProgram>
 800329a:	e7e9      	b.n	8003270 <BackDoorCheck+0x18>
 800329c:	2000088c 	.word	0x2000088c
 80032a0:	20000888 	.word	0x20000888
 80032a4:	20000890 	.word	0x20000890

080032a8 <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 80032a8:	b508      	push	{r3, lr}
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <BackDoorRestartTimer+0x18>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d000      	beq.n	80032b4 <BackDoorRestartTimer+0xc>
  {
    backdoorOpenTime = TimerGet();
  }
} /*** end of BackDoorRestartTimer ***/
 80032b2:	bd08      	pop	{r3, pc}
    backdoorOpenTime = TimerGet();
 80032b4:	f7ff ffc0 	bl	8003238 <TimerGet>
 80032b8:	4b02      	ldr	r3, [pc, #8]	; (80032c4 <BackDoorRestartTimer+0x1c>)
 80032ba:	6018      	str	r0, [r3, #0]
} /*** end of BackDoorRestartTimer ***/
 80032bc:	e7f9      	b.n	80032b2 <BackDoorRestartTimer+0xa>
 80032be:	bf00      	nop
 80032c0:	2000088c 	.word	0x2000088c
 80032c4:	20000890 	.word	0x20000890

080032c8 <BackDoorInit>:
{
 80032c8:	b508      	push	{r3, lr}
  backdoorOpen = BLT_TRUE;
 80032ca:	4b04      	ldr	r3, [pc, #16]	; (80032dc <BackDoorInit+0x14>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 80032d0:	f7ff ffea 	bl	80032a8 <BackDoorRestartTimer>
  BackDoorCheck();
 80032d4:	f7ff ffc0 	bl	8003258 <BackDoorCheck>
} /*** end of BackDoorInit ***/
 80032d8:	bd08      	pop	{r3, pc}
 80032da:	bf00      	nop
 80032dc:	2000088c 	.word	0x2000088c

080032e0 <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 80032e0:	b508      	push	{r3, lr}
  /* initialize the CPU */
  CpuInit();
 80032e2:	f7ff fca1 	bl	8002c28 <CpuInit>
  /* initialize the watchdog */
  CopInit();
 80032e6:	f000 f879 	bl	80033dc <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 80032ea:	f7ff ff83 	bl	80031f4 <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 80032ee:	f7ff fea5 	bl	800303c <NvmInit>
#if (BOOT_FILE_SYS_ENABLE > 0)
  /* initialize the file system module */
  FileInit();
 80032f2:	f000 f8ef 	bl	80034d4 <FileInit>
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 80032f6:	f000 f80f 	bl	8003318 <ComInit>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
 80032fa:	f7ff ffe5 	bl	80032c8 <BackDoorInit>
} /*** end of BootInit ***/
 80032fe:	bd08      	pop	{r3, pc}

08003300 <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 8003300:	b508      	push	{r3, lr}
  /* service the watchdog */
  CopService();
 8003302:	f000 f86f 	bl	80033e4 <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 8003306:	f7ff ff89 	bl	800321c <TimerUpdate>
#if (BOOT_FILE_SYS_ENABLE > 0)
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
 800330a:	f000 f9ff 	bl	800370c <FileTask>
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 800330e:	f000 f80f 	bl	8003330 <ComTask>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
 8003312:	f7ff ffa1 	bl	8003258 <BackDoorCheck>
} /*** end of BootTask ***/
 8003316:	bd08      	pop	{r3, pc}

08003318 <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 8003318:	b508      	push	{r3, lr}
  /* initialize the XCP communication protocol */
  XcpInit();
 800331a:	f000 fec5 	bl	80040a8 <XcpInit>
  /* set it as active */
  comActiveInterface = COM_IF_CAN;
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* initialize the RS232 interface */
  Rs232Init();
 800331e:	f7ff fed1 	bl	80030c4 <Rs232Init>
  /* set it as active */
  comActiveInterface = COM_IF_RS232;
 8003322:	4b02      	ldr	r3, [pc, #8]	; (800332c <ComInit+0x14>)
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
  NetInit();
  /* set it as active */
  comActiveInterface = COM_IF_NET;
  #endif
#endif
} /*** end of ComInit ***/
 8003328:	bd08      	pop	{r3, pc}
 800332a:	bf00      	nop
 800332c:	2000000d 	.word	0x2000000d

08003330 <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 8003330:	b500      	push	{lr}
 8003332:	b083      	sub	sp, #12
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  if (Rs232ReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 8003334:	f10d 0107 	add.w	r1, sp, #7
 8003338:	4808      	ldr	r0, [pc, #32]	; (800335c <ComTask+0x2c>)
 800333a:	f7ff fefd 	bl	8003138 <Rs232ReceivePacket>
 800333e:	2801      	cmp	r0, #1
 8003340:	d002      	beq.n	8003348 <ComTask+0x18>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 8003342:	b003      	add	sp, #12
 8003344:	f85d fb04 	ldr.w	pc, [sp], #4
    comActiveInterface = COM_IF_RS232;
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <ComTask+0x30>)
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 800334e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003352:	4802      	ldr	r0, [pc, #8]	; (800335c <ComTask+0x2c>)
 8003354:	f000 fec8 	bl	80040e8 <XcpPacketReceived>
} /*** end of ComTask ***/
 8003358:	e7f3      	b.n	8003342 <ComTask+0x12>
 800335a:	bf00      	nop
 800335c:	20000894 	.word	0x20000894
 8003360:	2000000d 	.word	0x2000000d

08003364 <ComFree>:
{
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
#endif
} /*** end of ComFree ***/
 8003364:	4770      	bx	lr
	...

08003368 <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 8003368:	b508      	push	{r3, lr}
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* transmit the packet. note that len is limited to 255 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_RS232)
 800336a:	4b05      	ldr	r3, [pc, #20]	; (8003380 <ComTransmitPacket+0x18>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	b113      	cbz	r3, 8003376 <ComTransmitPacket+0xe>
    NetTransmitPacket(data, len);
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
 8003370:	f000 feb2 	bl	80040d8 <XcpPacketTransmitted>
} /*** end of ComTransmitPacket ***/
 8003374:	bd08      	pop	{r3, pc}
    Rs232TransmitPacket(data, (blt_int8u)len);
 8003376:	b2c9      	uxtb	r1, r1
 8003378:	f7ff fec2 	bl	8003100 <Rs232TransmitPacket>
 800337c:	e7f8      	b.n	8003370 <ComTransmitPacket+0x8>
 800337e:	bf00      	nop
 8003380:	2000000d 	.word	0x2000000d

08003384 <ComGetActiveInterfaceMaxRxLen>:
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8003384:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <ComGetActiveInterfaceMaxRxLen+0x20>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b02      	cmp	r3, #2
 800338a:	d005      	beq.n	8003398 <ComGetActiveInterfaceMaxRxLen+0x14>
 800338c:	2b03      	cmp	r3, #3
 800338e:	d005      	beq.n	800339c <ComGetActiveInterfaceMaxRxLen+0x18>
 8003390:	2b01      	cmp	r3, #1
 8003392:	d005      	beq.n	80033a0 <ComGetActiveInterfaceMaxRxLen+0x1c>
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_RX_MAX_DATA;
 8003394:	2040      	movs	r0, #64	; 0x40
 8003396:	4770      	bx	lr
    case COM_IF_CAN:
      result = BOOT_COM_CAN_RX_MAX_DATA;
      break;

    case COM_IF_USB:
      result = BOOT_COM_USB_RX_MAX_DATA;
 8003398:	2000      	movs	r0, #0
      break;
 800339a:	4770      	bx	lr

    case COM_IF_NET:
      result = BOOT_COM_NET_RX_MAX_DATA;
 800339c:	2000      	movs	r0, #0
      break;
 800339e:	4770      	bx	lr
      result = BOOT_COM_CAN_RX_MAX_DATA;
 80033a0:	2008      	movs	r0, #8
      result = BOOT_COM_RX_MAX_DATA;
      break;
  }

  return result;
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 80033a2:	4770      	bx	lr
 80033a4:	2000000d 	.word	0x2000000d

080033a8 <ComGetActiveInterfaceMaxTxLen>:
blt_int16u ComGetActiveInterfaceMaxTxLen(void)
{
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 80033a8:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <ComGetActiveInterfaceMaxTxLen+0x20>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d005      	beq.n	80033bc <ComGetActiveInterfaceMaxTxLen+0x14>
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d005      	beq.n	80033c0 <ComGetActiveInterfaceMaxTxLen+0x18>
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d005      	beq.n	80033c4 <ComGetActiveInterfaceMaxTxLen+0x1c>
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_TX_MAX_DATA;
 80033b8:	2040      	movs	r0, #64	; 0x40
 80033ba:	4770      	bx	lr
    case COM_IF_CAN:
      result = BOOT_COM_CAN_TX_MAX_DATA;
      break;

    case COM_IF_USB:
      result = BOOT_COM_USB_TX_MAX_DATA;
 80033bc:	2000      	movs	r0, #0
      break;
 80033be:	4770      	bx	lr

    case COM_IF_NET:
      result = BOOT_COM_NET_TX_MAX_DATA;
 80033c0:	2000      	movs	r0, #0
      break;
 80033c2:	4770      	bx	lr
      result = BOOT_COM_CAN_TX_MAX_DATA;
 80033c4:	2008      	movs	r0, #8
      result = BOOT_COM_TX_MAX_DATA;
      break;
  }

  return result;
} /*** end of ComGetActiveInterfaceMaxTxLen ***/
 80033c6:	4770      	bx	lr
 80033c8:	2000000d 	.word	0x2000000d

080033cc <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 80033cc:	b508      	push	{r3, lr}
  blt_bool result = BLT_FALSE;

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 80033ce:	f000 fe79 	bl	80040c4 <XcpIsConnected>
 80033d2:	4603      	mov	r3, r0
 80033d4:	b100      	cbz	r0, 80033d8 <ComIsConnected+0xc>
  {
    result = BLT_TRUE;
 80033d6:	2301      	movs	r3, #1
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
} /*** end of ComIsConnected ***/
 80033d8:	4618      	mov	r0, r3
 80033da:	bd08      	pop	{r3, pc}

080033dc <CopInit>:
** \brief     Watchdog initialization function.
** \return    none
**
****************************************************************************************/
void CopInit(void)
{
 80033dc:	b508      	push	{r3, lr}
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
 80033de:	f7fd f889 	bl	80004f4 <CopInitHook>
#endif
} /*** end of CopInit ***/
 80033e2:	bd08      	pop	{r3, pc}

080033e4 <CopService>:
** \brief     Watchdog service function to prevent the watchdog from timing out.
** \return    none
**
****************************************************************************************/
void CopService(void)
{
 80033e4:	b508      	push	{r3, lr}
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
 80033e6:	f7fd f88a 	bl	80004fe <CopServiceHook>
#endif
} /*** end of CopService ***/
 80033ea:	bd08      	pop	{r3, pc}

080033ec <FileLibLongToIntString>:
** \param     destination Pointer to character buffer for storing the results.
** \return    The resulting string.
**
****************************************************************************************/
static blt_char *FileLibLongToIntString(blt_int32u long_val, blt_char *destination)
{
 80033ec:	b410      	push	{r4}
  blt_int32u long_val_cpy = long_val;
 80033ee:	4603      	mov	r3, r0

  /* first determine how many digits there will be */
  do
  {
    destination++;
 80033f0:	3101      	adds	r1, #1
    long_val_cpy /= 10;
 80033f2:	4a0d      	ldr	r2, [pc, #52]	; (8003428 <FileLibLongToIntString+0x3c>)
 80033f4:	fba2 2303 	umull	r2, r3, r2, r3
  }
  while (long_val_cpy > 0);
 80033f8:	08db      	lsrs	r3, r3, #3
 80033fa:	d1f9      	bne.n	80033f0 <FileLibLongToIntString+0x4>
  /* add space for the string termination and add it */
  *destination = '\0';
 80033fc:	2300      	movs	r3, #0
 80033fe:	700b      	strb	r3, [r1, #0]
  do
  {
    /* set write pointer to where the next character should go */
    destination--;
    /* write digit in ASCII format */
    *destination = long_val_cpy % 10 + '0';
 8003400:	4b09      	ldr	r3, [pc, #36]	; (8003428 <FileLibLongToIntString+0x3c>)
 8003402:	fba3 2300 	umull	r2, r3, r3, r0
 8003406:	08db      	lsrs	r3, r3, #3
 8003408:	461a      	mov	r2, r3
 800340a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800340e:	005c      	lsls	r4, r3, #1
 8003410:	1b03      	subs	r3, r0, r4
 8003412:	3330      	adds	r3, #48	; 0x30
 8003414:	f801 3d01 	strb.w	r3, [r1, #-1]!
    /* move on to the next digit */
    long_val_cpy /= 10;
 8003418:	4610      	mov	r0, r2
  }
  while (long_val_cpy > 0);
 800341a:	2a00      	cmp	r2, #0
 800341c:	d1f0      	bne.n	8003400 <FileLibLongToIntString+0x14>

  return destination;
} /*** end of FileLibLongToIntString ***/
 800341e:	4608      	mov	r0, r1
 8003420:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	cccccccd 	.word	0xcccccccd

0800342c <FileLibByteNibbleToChar>:
  c = (nibble & 0x0f) + '0';
 800342c:	f000 030f 	and.w	r3, r0, #15
  if (nibble > 9)
 8003430:	2809      	cmp	r0, #9
 8003432:	d902      	bls.n	800343a <FileLibByteNibbleToChar+0xe>
    c += 7;
 8003434:	f103 0037 	add.w	r0, r3, #55	; 0x37
} /*** end of FileLibByteNibbleToChar ***/
 8003438:	4770      	bx	lr
{
 800343a:	b510      	push	{r4, lr}
 800343c:	f103 0430 	add.w	r4, r3, #48	; 0x30
    c = toupper((blt_int16s)c);
 8003440:	f002 fe0c 	bl	800605c <__locale_ctype_ptr>
 8003444:	4420      	add	r0, r4
 8003446:	7843      	ldrb	r3, [r0, #1]
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d001      	beq.n	8003454 <FileLibByteNibbleToChar+0x28>
 8003450:	b2e0      	uxtb	r0, r4
} /*** end of FileLibByteNibbleToChar ***/
 8003452:	bd10      	pop	{r4, pc}
    c = toupper((blt_int16s)c);
 8003454:	3c20      	subs	r4, #32
 8003456:	e7fb      	b.n	8003450 <FileLibByteNibbleToChar+0x24>

08003458 <FileLibByteToHexString>:
{
 8003458:	b538      	push	{r3, r4, r5, lr}
 800345a:	4605      	mov	r5, r0
 800345c:	460c      	mov	r4, r1
  destination[0] = FileLibByteNibbleToChar(byte_val >> 4);
 800345e:	0900      	lsrs	r0, r0, #4
 8003460:	f7ff ffe4 	bl	800342c <FileLibByteNibbleToChar>
 8003464:	7020      	strb	r0, [r4, #0]
  destination[1] = FileLibByteNibbleToChar(byte_val & 0x0f);
 8003466:	f005 000f 	and.w	r0, r5, #15
 800346a:	f7ff ffdf 	bl	800342c <FileLibByteNibbleToChar>
 800346e:	7060      	strb	r0, [r4, #1]
  destination[2] = '\0';
 8003470:	2300      	movs	r3, #0
 8003472:	70a3      	strb	r3, [r4, #2]
} /*** end of FileLibByteToHexString ***/
 8003474:	4620      	mov	r0, r4
 8003476:	bd38      	pop	{r3, r4, r5, pc}

08003478 <FileLibHexStringToByte>:
**                      decimal value.
** \return    The resulting byte value.
**
****************************************************************************************/
static blt_int8u FileLibHexStringToByte(const blt_char *hexstring)
{
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	4607      	mov	r7, r0
  blt_int8u result = 0;
  blt_char  c;
  blt_int8u counter;

  /* a hexadecimal character is 2 characters long (i.e 0x4F minus the 0x part) */
  for (counter=0; counter < 2; counter++)
 800347c:	2600      	movs	r6, #0
  blt_int8u result = 0;
 800347e:	4635      	mov	r5, r6
  for (counter=0; counter < 2; counter++)
 8003480:	e007      	b.n	8003492 <FileLibHexStringToByte+0x1a>
  {
    /* read out the character */
    c = toupper((blt_int16s)(hexstring[counter]));
 8003482:	3c20      	subs	r4, #32
 8003484:	e010      	b.n	80034a8 <FileLibHexStringToByte+0x30>
    if (c > 9)
    {
      c -= 7;
    }
    /* add it to the result */
    result = (result << 4) + c;
 8003486:	012d      	lsls	r5, r5, #4
 8003488:	b2ed      	uxtb	r5, r5
 800348a:	18ab      	adds	r3, r5, r2
 800348c:	b2dd      	uxtb	r5, r3
  for (counter=0; counter < 2; counter++)
 800348e:	3601      	adds	r6, #1
 8003490:	b2f6      	uxtb	r6, r6
 8003492:	2e01      	cmp	r6, #1
 8003494:	d819      	bhi.n	80034ca <FileLibHexStringToByte+0x52>
    c = toupper((blt_int16s)(hexstring[counter]));
 8003496:	5dbc      	ldrb	r4, [r7, r6]
 8003498:	f002 fde0 	bl	800605c <__locale_ctype_ptr>
 800349c:	4420      	add	r0, r4
 800349e:	7843      	ldrb	r3, [r0, #1]
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d0ec      	beq.n	8003482 <FileLibHexStringToByte+0xa>
 80034a8:	b2e3      	uxtb	r3, r4
    if ((c < '0') || (c > 'F') || ((c > '9') && (c < 'A')))
 80034aa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	2a16      	cmp	r2, #22
 80034b2:	d809      	bhi.n	80034c8 <FileLibHexStringToByte+0x50>
 80034b4:	f1a3 013a 	sub.w	r1, r3, #58	; 0x3a
 80034b8:	b2c9      	uxtb	r1, r1
 80034ba:	2906      	cmp	r1, #6
 80034bc:	d907      	bls.n	80034ce <FileLibHexStringToByte+0x56>
    if (c > 9)
 80034be:	2a09      	cmp	r2, #9
 80034c0:	d9e1      	bls.n	8003486 <FileLibHexStringToByte+0xe>
      c -= 7;
 80034c2:	3b37      	subs	r3, #55	; 0x37
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	e7de      	b.n	8003486 <FileLibHexStringToByte+0xe>
      return 0;
 80034c8:	2500      	movs	r5, #0
  }
  /* return the results */
  return result;
} /*** end of FileLibHexStringToByte ***/
 80034ca:	4628      	mov	r0, r5
 80034cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return 0;
 80034ce:	2500      	movs	r5, #0
 80034d0:	e7fb      	b.n	80034ca <FileLibHexStringToByte+0x52>
	...

080034d4 <FileInit>:
{
 80034d4:	b508      	push	{r3, lr}
  firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 80034d6:	2200      	movs	r2, #0
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <FileInit+0x20>)
 80034da:	701a      	strb	r2, [r3, #0]
  fresult = f_mount(&fatFsObjects.fs, "0:", 0);
 80034dc:	4906      	ldr	r1, [pc, #24]	; (80034f8 <FileInit+0x24>)
 80034de:	4807      	ldr	r0, [pc, #28]	; (80034fc <FileInit+0x28>)
 80034e0:	f002 f88e 	bl	8005600 <f_mount>
  ASSERT_RT(fresult == FR_OK);
 80034e4:	b900      	cbnz	r0, 80034e8 <FileInit+0x14>
} /*** end of FileInit ***/
 80034e6:	bd08      	pop	{r3, pc}
  ASSERT_RT(fresult == FR_OK);
 80034e8:	2177      	movs	r1, #119	; 0x77
 80034ea:	4805      	ldr	r0, [pc, #20]	; (8003500 <FileInit+0x2c>)
 80034ec:	f7ff feb0 	bl	8003250 <AssertFailure>
} /*** end of FileInit ***/
 80034f0:	e7f9      	b.n	80034e6 <FileInit+0x12>
 80034f2:	bf00      	nop
 80034f4:	20000d34 	.word	0x20000d34
 80034f8:	080061dc 	.word	0x080061dc
 80034fc:	200008dc 	.word	0x200008dc
 8003500:	080061e0 	.word	0x080061e0

08003504 <FileIsIdle>:
  if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_IDLE)
 8003504:	4b03      	ldr	r3, [pc, #12]	; (8003514 <FileIsIdle+0x10>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	b10b      	cbz	r3, 800350e <FileIsIdle+0xa>
  return BLT_FALSE;
 800350a:	2000      	movs	r0, #0
} /*** end of FileIsIdle ***/
 800350c:	4770      	bx	lr
    return BLT_TRUE;
 800350e:	2001      	movs	r0, #1
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	20000d34 	.word	0x20000d34

08003518 <FileHandleFirmwareUpdateRequest>:
{
 8003518:	b508      	push	{r3, lr}
  if (ComIsConnected() == BLT_TRUE)
 800351a:	f7ff ff57 	bl	80033cc <ComIsConnected>
 800351e:	2801      	cmp	r0, #1
 8003520:	d00e      	beq.n	8003540 <FileHandleFirmwareUpdateRequest+0x28>
  if (firmwareUpdateState != FIRMWARE_UPDATE_STATE_IDLE)
 8003522:	4b08      	ldr	r3, [pc, #32]	; (8003544 <FileHandleFirmwareUpdateRequest+0x2c>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	b10b      	cbz	r3, 800352c <FileHandleFirmwareUpdateRequest+0x14>
    return BLT_FALSE;
 8003528:	2000      	movs	r0, #0
} /*** end of FileHandleFirmwareUpdateRequest ***/
 800352a:	bd08      	pop	{r3, pc}
  if (FileIsFirmwareUpdateRequestedHook() == BLT_TRUE)
 800352c:	f7fc ffec 	bl	8000508 <FileIsFirmwareUpdateRequestedHook>
 8003530:	2801      	cmp	r0, #1
 8003532:	d001      	beq.n	8003538 <FileHandleFirmwareUpdateRequest+0x20>
  return BLT_FALSE;
 8003534:	2000      	movs	r0, #0
 8003536:	e7f8      	b.n	800352a <FileHandleFirmwareUpdateRequest+0x12>
    firmwareUpdateState = FIRMWARE_UPDATE_STATE_STARTING;
 8003538:	4b02      	ldr	r3, [pc, #8]	; (8003544 <FileHandleFirmwareUpdateRequest+0x2c>)
 800353a:	2201      	movs	r2, #1
 800353c:	701a      	strb	r2, [r3, #0]
    return BLT_TRUE;
 800353e:	e7f4      	b.n	800352a <FileHandleFirmwareUpdateRequest+0x12>
    return BLT_FALSE;
 8003540:	2000      	movs	r0, #0
 8003542:	e7f2      	b.n	800352a <FileHandleFirmwareUpdateRequest+0x12>
 8003544:	20000d34 	.word	0x20000d34

08003548 <FileSrecGetLineType>:
{
 8003548:	b538      	push	{r3, r4, r5, lr}
 800354a:	4605      	mov	r5, r0
  if ((toupper((blt_int16s)(line[0])) != 'S') || (isdigit((blt_int16s)(line[1])) == 0))
 800354c:	7804      	ldrb	r4, [r0, #0]
 800354e:	f002 fd85 	bl	800605c <__locale_ctype_ptr>
 8003552:	4420      	add	r0, r4
 8003554:	7843      	ldrb	r3, [r0, #1]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d003      	beq.n	8003566 <FileSrecGetLineType+0x1e>
 800355e:	2c53      	cmp	r4, #83	; 0x53
 8003560:	d003      	beq.n	800356a <FileSrecGetLineType+0x22>
    return LINE_TYPE_UNSUPPORTED;
 8003562:	2003      	movs	r0, #3
} /*** end of FileSrecGetLineType ***/
 8003564:	bd38      	pop	{r3, r4, r5, pc}
  if ((toupper((blt_int16s)(line[0])) != 'S') || (isdigit((blt_int16s)(line[1])) == 0))
 8003566:	3c20      	subs	r4, #32
 8003568:	e7f9      	b.n	800355e <FileSrecGetLineType+0x16>
 800356a:	f002 fd77 	bl	800605c <__locale_ctype_ptr>
 800356e:	786b      	ldrb	r3, [r5, #1]
 8003570:	4418      	add	r0, r3
 8003572:	7842      	ldrb	r2, [r0, #1]
 8003574:	f012 0f04 	tst.w	r2, #4
 8003578:	d009      	beq.n	800358e <FileSrecGetLineType+0x46>
  if (line[1] == '1')
 800357a:	2b31      	cmp	r3, #49	; 0x31
 800357c:	d009      	beq.n	8003592 <FileSrecGetLineType+0x4a>
  if (line[1] == '2')
 800357e:	2b32      	cmp	r3, #50	; 0x32
 8003580:	d009      	beq.n	8003596 <FileSrecGetLineType+0x4e>
  if (line[1] == '3')
 8003582:	2b33      	cmp	r3, #51	; 0x33
 8003584:	d001      	beq.n	800358a <FileSrecGetLineType+0x42>
  return LINE_TYPE_UNSUPPORTED;
 8003586:	2003      	movs	r0, #3
 8003588:	e7ec      	b.n	8003564 <FileSrecGetLineType+0x1c>
    return LINE_TYPE_S3;
 800358a:	2002      	movs	r0, #2
 800358c:	e7ea      	b.n	8003564 <FileSrecGetLineType+0x1c>
    return LINE_TYPE_UNSUPPORTED;
 800358e:	2003      	movs	r0, #3
 8003590:	e7e8      	b.n	8003564 <FileSrecGetLineType+0x1c>
    return LINE_TYPE_S1;
 8003592:	2000      	movs	r0, #0
 8003594:	e7e6      	b.n	8003564 <FileSrecGetLineType+0x1c>
    return LINE_TYPE_S2;
 8003596:	2001      	movs	r0, #1
 8003598:	e7e4      	b.n	8003564 <FileSrecGetLineType+0x1c>

0800359a <FileSrecVerifyChecksum>:
{
 800359a:	b570      	push	{r4, r5, r6, lr}
 800359c:	4606      	mov	r6, r0
  bytes_on_line = FileLibHexStringToByte(line);
 800359e:	3002      	adds	r0, #2
 80035a0:	f7ff ff6a 	bl	8003478 <FileLibHexStringToByte>
 80035a4:	4605      	mov	r5, r0
 80035a6:	b284      	uxth	r4, r0
  line += 2;
 80035a8:	3604      	adds	r6, #4
    checksum += FileLibHexStringToByte(line);
 80035aa:	4630      	mov	r0, r6
 80035ac:	f7ff ff64 	bl	8003478 <FileLibHexStringToByte>
 80035b0:	4405      	add	r5, r0
 80035b2:	b2ed      	uxtb	r5, r5
    bytes_on_line--;
 80035b4:	3c01      	subs	r4, #1
 80035b6:	b2a4      	uxth	r4, r4
    line += 2;
 80035b8:	3602      	adds	r6, #2
  while (bytes_on_line > 1);
 80035ba:	2c01      	cmp	r4, #1
 80035bc:	d8f5      	bhi.n	80035aa <FileSrecVerifyChecksum+0x10>
  checksum = ~checksum;
 80035be:	43ed      	mvns	r5, r5
 80035c0:	b2ed      	uxtb	r5, r5
  if (checksum != FileLibHexStringToByte(line))
 80035c2:	4630      	mov	r0, r6
 80035c4:	f7ff ff58 	bl	8003478 <FileLibHexStringToByte>
 80035c8:	42a8      	cmp	r0, r5
 80035ca:	d001      	beq.n	80035d0 <FileSrecVerifyChecksum+0x36>
    return BLT_FALSE;
 80035cc:	2000      	movs	r0, #0
} /*** end of FileSrecVerifyChecksum ***/
 80035ce:	bd70      	pop	{r4, r5, r6, pc}
  return BLT_TRUE;
 80035d0:	2001      	movs	r0, #1
 80035d2:	e7fc      	b.n	80035ce <FileSrecVerifyChecksum+0x34>

080035d4 <FileSrecParseLine>:
{
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	4604      	mov	r4, r0
 80035d8:	4617      	mov	r7, r2
  ASSERT_RT((address != BLT_NULL) && (line != BLT_NULL));
 80035da:	460e      	mov	r6, r1
 80035dc:	b1a1      	cbz	r1, 8003608 <FileSrecParseLine+0x34>
 80035de:	b198      	cbz	r0, 8003608 <FileSrecParseLine+0x34>
  lineType = FileSrecGetLineType(line);
 80035e0:	4620      	mov	r0, r4
 80035e2:	f7ff ffb1 	bl	8003548 <FileSrecGetLineType>
 80035e6:	4605      	mov	r5, r0
  if (lineType == LINE_TYPE_UNSUPPORTED)
 80035e8:	2803      	cmp	r0, #3
 80035ea:	f000 8087 	beq.w	80036fc <FileSrecParseLine+0x128>
  if (FileSrecVerifyChecksum(line) == BLT_FALSE)
 80035ee:	4620      	mov	r0, r4
 80035f0:	f7ff ffd3 	bl	800359a <FileSrecVerifyChecksum>
 80035f4:	2800      	cmp	r0, #0
 80035f6:	f000 8084 	beq.w	8003702 <FileSrecParseLine+0x12e>
  switch (lineType)
 80035fa:	2d01      	cmp	r5, #1
 80035fc:	d029      	beq.n	8003652 <FileSrecParseLine+0x7e>
 80035fe:	b14d      	cbz	r5, 8003614 <FileSrecParseLine+0x40>
 8003600:	2d02      	cmp	r5, #2
 8003602:	d04d      	beq.n	80036a0 <FileSrecParseLine+0xcc>
  blt_int16s    data_byte_count = 0;
 8003604:	2500      	movs	r5, #0
 8003606:	e07a      	b.n	80036fe <FileSrecParseLine+0x12a>
  ASSERT_RT((address != BLT_NULL) && (line != BLT_NULL));
 8003608:	f240 2163 	movw	r1, #611	; 0x263
 800360c:	483e      	ldr	r0, [pc, #248]	; (8003708 <FileSrecParseLine+0x134>)
 800360e:	f7ff fe1f 	bl	8003250 <AssertFailure>
 8003612:	e7e5      	b.n	80035e0 <FileSrecParseLine+0xc>
      bytes_on_line = FileLibHexStringToByte(line);
 8003614:	1ca0      	adds	r0, r4, #2
 8003616:	f7ff ff2f 	bl	8003478 <FileLibHexStringToByte>
 800361a:	b285      	uxth	r5, r0
      *address = FileLibHexStringToByte(line) << 8;
 800361c:	1d20      	adds	r0, r4, #4
 800361e:	f7ff ff2b 	bl	8003478 <FileLibHexStringToByte>
 8003622:	0200      	lsls	r0, r0, #8
 8003624:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line);
 8003626:	1da0      	adds	r0, r4, #6
 8003628:	f7ff ff26 	bl	8003478 <FileLibHexStringToByte>
 800362c:	6833      	ldr	r3, [r6, #0]
 800362e:	4418      	add	r0, r3
 8003630:	6030      	str	r0, [r6, #0]
      line += 2;
 8003632:	3408      	adds	r4, #8
      data_byte_count = bytes_on_line - 3; /* -2 bytes address, -1 byte checksum */
 8003634:	3d03      	subs	r5, #3
 8003636:	b22d      	sxth	r5, r5
      if (data != BLT_NULL)
 8003638:	2f00      	cmp	r7, #0
 800363a:	d060      	beq.n	80036fe <FileSrecParseLine+0x12a>
        for (i=0; i<data_byte_count; i++)
 800363c:	2600      	movs	r6, #0
 800363e:	42ae      	cmp	r6, r5
 8003640:	da5d      	bge.n	80036fe <FileSrecParseLine+0x12a>
          data[i] = FileLibHexStringToByte(line);
 8003642:	4620      	mov	r0, r4
 8003644:	f7ff ff18 	bl	8003478 <FileLibHexStringToByte>
 8003648:	55b8      	strb	r0, [r7, r6]
          line += 2;
 800364a:	3402      	adds	r4, #2
        for (i=0; i<data_byte_count; i++)
 800364c:	3601      	adds	r6, #1
 800364e:	b2b6      	uxth	r6, r6
 8003650:	e7f5      	b.n	800363e <FileSrecParseLine+0x6a>
      bytes_on_line = FileLibHexStringToByte(line);
 8003652:	1ca0      	adds	r0, r4, #2
 8003654:	f7ff ff10 	bl	8003478 <FileLibHexStringToByte>
 8003658:	b285      	uxth	r5, r0
      *address = FileLibHexStringToByte(line) << 16;
 800365a:	1d20      	adds	r0, r4, #4
 800365c:	f7ff ff0c 	bl	8003478 <FileLibHexStringToByte>
 8003660:	0400      	lsls	r0, r0, #16
 8003662:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line) << 8;
 8003664:	1da0      	adds	r0, r4, #6
 8003666:	f7ff ff07 	bl	8003478 <FileLibHexStringToByte>
 800366a:	6833      	ldr	r3, [r6, #0]
 800366c:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8003670:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line);
 8003672:	f104 0008 	add.w	r0, r4, #8
 8003676:	f7ff feff 	bl	8003478 <FileLibHexStringToByte>
 800367a:	6833      	ldr	r3, [r6, #0]
 800367c:	4418      	add	r0, r3
 800367e:	6030      	str	r0, [r6, #0]
      line += 2;
 8003680:	340a      	adds	r4, #10
      data_byte_count = bytes_on_line - 4; /* -3 bytes address, -1 byte checksum */
 8003682:	3d04      	subs	r5, #4
 8003684:	b22d      	sxth	r5, r5
      if (data != BLT_NULL)
 8003686:	2f00      	cmp	r7, #0
 8003688:	d039      	beq.n	80036fe <FileSrecParseLine+0x12a>
        for (i=0; i<data_byte_count; i++)
 800368a:	2600      	movs	r6, #0
 800368c:	42ae      	cmp	r6, r5
 800368e:	da36      	bge.n	80036fe <FileSrecParseLine+0x12a>
          data[i] = FileLibHexStringToByte(line);
 8003690:	4620      	mov	r0, r4
 8003692:	f7ff fef1 	bl	8003478 <FileLibHexStringToByte>
 8003696:	55b8      	strb	r0, [r7, r6]
          line += 2;
 8003698:	3402      	adds	r4, #2
        for (i=0; i<data_byte_count; i++)
 800369a:	3601      	adds	r6, #1
 800369c:	b2b6      	uxth	r6, r6
 800369e:	e7f5      	b.n	800368c <FileSrecParseLine+0xb8>
      bytes_on_line = FileLibHexStringToByte(line);
 80036a0:	1ca0      	adds	r0, r4, #2
 80036a2:	f7ff fee9 	bl	8003478 <FileLibHexStringToByte>
 80036a6:	b285      	uxth	r5, r0
      *address = FileLibHexStringToByte(line) << 24;
 80036a8:	1d20      	adds	r0, r4, #4
 80036aa:	f7ff fee5 	bl	8003478 <FileLibHexStringToByte>
 80036ae:	0600      	lsls	r0, r0, #24
 80036b0:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line) << 16;
 80036b2:	1da0      	adds	r0, r4, #6
 80036b4:	f7ff fee0 	bl	8003478 <FileLibHexStringToByte>
 80036b8:	6833      	ldr	r3, [r6, #0]
 80036ba:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 80036be:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line) << 8;
 80036c0:	f104 0008 	add.w	r0, r4, #8
 80036c4:	f7ff fed8 	bl	8003478 <FileLibHexStringToByte>
 80036c8:	6833      	ldr	r3, [r6, #0]
 80036ca:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80036ce:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line);
 80036d0:	f104 000a 	add.w	r0, r4, #10
 80036d4:	f7ff fed0 	bl	8003478 <FileLibHexStringToByte>
 80036d8:	6833      	ldr	r3, [r6, #0]
 80036da:	4418      	add	r0, r3
 80036dc:	6030      	str	r0, [r6, #0]
      line += 2;
 80036de:	340c      	adds	r4, #12
      data_byte_count = bytes_on_line - 5; /* -4 bytes address, -1 byte checksum */
 80036e0:	3d05      	subs	r5, #5
 80036e2:	b22d      	sxth	r5, r5
      if (data != BLT_NULL)
 80036e4:	b15f      	cbz	r7, 80036fe <FileSrecParseLine+0x12a>
        for (i=0; i<data_byte_count; i++)
 80036e6:	2600      	movs	r6, #0
 80036e8:	42ae      	cmp	r6, r5
 80036ea:	da08      	bge.n	80036fe <FileSrecParseLine+0x12a>
          data[i] = FileLibHexStringToByte(line);
 80036ec:	4620      	mov	r0, r4
 80036ee:	f7ff fec3 	bl	8003478 <FileLibHexStringToByte>
 80036f2:	55b8      	strb	r0, [r7, r6]
          line += 2;
 80036f4:	3402      	adds	r4, #2
        for (i=0; i<data_byte_count; i++)
 80036f6:	3601      	adds	r6, #1
 80036f8:	b2b6      	uxth	r6, r6
 80036fa:	e7f5      	b.n	80036e8 <FileSrecParseLine+0x114>
    return 0;
 80036fc:	2500      	movs	r5, #0
} /*** end of FileSrecParseLine ***/
 80036fe:	4628      	mov	r0, r5
 8003700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERROR_SREC_INVALID_CHECKSUM;
 8003702:	f04f 35ff 	mov.w	r5, #4294967295
 8003706:	e7fa      	b.n	80036fe <FileSrecParseLine+0x12a>
 8003708:	080061e0 	.word	0x080061e0

0800370c <FileTask>:
  if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_IDLE)
 800370c:	4bb5      	ldr	r3, [pc, #724]	; (80039e4 <FileTask+0x2d8>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 81f5 	beq.w	8003b00 <FileTask+0x3f4>
{
 8003716:	b570      	push	{r4, r5, r6, lr}
  else if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_STARTING)
 8003718:	2b01      	cmp	r3, #1
 800371a:	d005      	beq.n	8003728 <FileTask+0x1c>
  else if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_ERASING)
 800371c:	2b02      	cmp	r3, #2
 800371e:	d030      	beq.n	8003782 <FileTask+0x76>
  else if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_PROGRAMMING)
 8003720:	2b03      	cmp	r3, #3
 8003722:	f000 8120 	beq.w	8003966 <FileTask+0x25a>
} /*** end of FileTask ***/
 8003726:	bd70      	pop	{r4, r5, r6, pc}
    NvmInit();
 8003728:	f7ff fc88 	bl	800303c <NvmInit>
    FileFirmwareUpdateStartedHook();
 800372c:	f7fc ff0e 	bl	800054c <FileFirmwareUpdateStartedHook>
    FileFirmwareUpdateLogHook("Firmware update request detected\n\r");
 8003730:	48ad      	ldr	r0, [pc, #692]	; (80039e8 <FileTask+0x2dc>)
 8003732:	f7fc ff4f 	bl	80005d4 <FileFirmwareUpdateLogHook>
    FileFirmwareUpdateLogHook("Opening firmware file for reading...");
 8003736:	48ad      	ldr	r0, [pc, #692]	; (80039ec <FileTask+0x2e0>)
 8003738:	f7fc ff4c 	bl	80005d4 <FileFirmwareUpdateLogHook>
    if (f_open(&fatFsObjects.file, FileGetFirmwareFilenameHook(), FA_OPEN_EXISTING | FA_READ) != FR_OK)
 800373c:	f7fc ff02 	bl	8000544 <FileGetFirmwareFilenameHook>
 8003740:	2201      	movs	r2, #1
 8003742:	4601      	mov	r1, r0
 8003744:	48aa      	ldr	r0, [pc, #680]	; (80039f0 <FileTask+0x2e4>)
 8003746:	f001 ff87 	bl	8005658 <f_open>
 800374a:	b148      	cbz	r0, 8003760 <FileTask+0x54>
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 800374c:	4ba5      	ldr	r3, [pc, #660]	; (80039e4 <FileTask+0x2d8>)
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]
      FileFirmwareUpdateLogHook("ERROR\n\r");
 8003752:	48a8      	ldr	r0, [pc, #672]	; (80039f4 <FileTask+0x2e8>)
 8003754:	f7fc ff3e 	bl	80005d4 <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_OPEN_FIRMWARE_FILE);
 8003758:	2001      	movs	r0, #1
 800375a:	f7fc ff2d 	bl	80005b8 <FileFirmwareUpdateErrorHook>
      return;
 800375e:	e7e2      	b.n	8003726 <FileTask+0x1a>
    FileFirmwareUpdateLogHook("OK\n\r");
 8003760:	48a5      	ldr	r0, [pc, #660]	; (80039f8 <FileTask+0x2ec>)
 8003762:	f7fc ff37 	bl	80005d4 <FileFirmwareUpdateLogHook>
    FileFirmwareUpdateLogHook("Starting the programming sequence\n\r");
 8003766:	48a5      	ldr	r0, [pc, #660]	; (80039fc <FileTask+0x2f0>)
 8003768:	f7fc ff34 	bl	80005d4 <FileFirmwareUpdateLogHook>
    FileFirmwareUpdateLogHook("Parsing firmware file to detect erase blocks...");
 800376c:	48a4      	ldr	r0, [pc, #656]	; (8003a00 <FileTask+0x2f4>)
 800376e:	f7fc ff31 	bl	80005d4 <FileFirmwareUpdateLogHook>
    eraseInfo.start_address = 0;
 8003772:	4ba4      	ldr	r3, [pc, #656]	; (8003a04 <FileTask+0x2f8>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
    eraseInfo.total_size = 0;
 8003778:	605a      	str	r2, [r3, #4]
    firmwareUpdateState = FIRMWARE_UPDATE_STATE_ERASING;
 800377a:	4b9a      	ldr	r3, [pc, #616]	; (80039e4 <FileTask+0x2d8>)
 800377c:	2202      	movs	r2, #2
 800377e:	701a      	strb	r2, [r3, #0]
 8003780:	e7d1      	b.n	8003726 <FileTask+0x1a>
    read_line_ptr = f_gets(lineParseObject.line, sizeof(lineParseObject.line), &fatFsObjects.file);
 8003782:	4ca1      	ldr	r4, [pc, #644]	; (8003a08 <FileTask+0x2fc>)
 8003784:	f504 720c 	add.w	r2, r4, #560	; 0x230
 8003788:	f44f 7180 	mov.w	r1, #256	; 0x100
 800378c:	489f      	ldr	r0, [pc, #636]	; (8003a0c <FileTask+0x300>)
 800378e:	f002 fb85 	bl	8005e9c <f_gets>
    if (f_error(&fatFsObjects.file) > 0)
 8003792:	f894 3241 	ldrb.w	r3, [r4, #577]	; 0x241
 8003796:	2b00      	cmp	r3, #0
 8003798:	d15d      	bne.n	8003856 <FileTask+0x14a>
    if (read_line_ptr != BLT_NULL)
 800379a:	b1a8      	cbz	r0, 80037c8 <FileTask+0xbc>
      parse_result = FileSrecParseLine(lineParseObject.line, &lineParseObject.address, BLT_NULL);
 800379c:	489b      	ldr	r0, [pc, #620]	; (8003a0c <FileTask+0x300>)
 800379e:	2200      	movs	r2, #0
 80037a0:	f500 71c0 	add.w	r1, r0, #384	; 0x180
 80037a4:	f7ff ff16 	bl	80035d4 <FileSrecParseLine>
 80037a8:	4604      	mov	r4, r0
      if (parse_result == ERROR_SREC_INVALID_CHECKSUM)
 80037aa:	f1b0 3fff 	cmp.w	r0, #4294967295
 80037ae:	d060      	beq.n	8003872 <FileTask+0x166>
    if (parse_result > 0)
 80037b0:	2800      	cmp	r0, #0
 80037b2:	dd09      	ble.n	80037c8 <FileTask+0xbc>
      if (eraseInfo.total_size == 0)
 80037b4:	4b93      	ldr	r3, [pc, #588]	; (8003a04 <FileTask+0x2f8>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d167      	bne.n	800388c <FileTask+0x180>
        eraseInfo.start_address = lineParseObject.address;
 80037bc:	4b93      	ldr	r3, [pc, #588]	; (8003a0c <FileTask+0x300>)
 80037be:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80037c2:	4b90      	ldr	r3, [pc, #576]	; (8003a04 <FileTask+0x2f8>)
 80037c4:	601a      	str	r2, [r3, #0]
        eraseInfo.total_size = parse_result;
 80037c6:	6058      	str	r0, [r3, #4]
    if (f_eof(&fatFsObjects.file) > 0)
 80037c8:	4b8f      	ldr	r3, [pc, #572]	; (8003a08 <FileTask+0x2fc>)
 80037ca:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 80037ce:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d1a7      	bne.n	8003726 <FileTask+0x1a>
      if (f_lseek(&fatFsObjects.file, 0) != FR_OK)
 80037d6:	2100      	movs	r1, #0
 80037d8:	4885      	ldr	r0, [pc, #532]	; (80039f0 <FileTask+0x2e4>)
 80037da:	f002 fa1d 	bl	8005c18 <f_lseek>
 80037de:	2800      	cmp	r0, #0
 80037e0:	f040 80a7 	bne.w	8003932 <FileTask+0x226>
      if (eraseInfo.total_size > 0)
 80037e4:	4b87      	ldr	r3, [pc, #540]	; (8003a04 <FileTask+0x2f8>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	b373      	cbz	r3, 8003848 <FileTask+0x13c>
        FileFirmwareUpdateLogHook("OK\n\r");
 80037ea:	4883      	ldr	r0, [pc, #524]	; (80039f8 <FileTask+0x2ec>)
 80037ec:	f7fc fef2 	bl	80005d4 <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateLogHook("Erasing ");
 80037f0:	4887      	ldr	r0, [pc, #540]	; (8003a10 <FileTask+0x304>)
 80037f2:	f7fc feef 	bl	80005d4 <FileFirmwareUpdateLogHook>
        FileLibLongToIntString(eraseInfo.total_size, loggingStr);
 80037f6:	4d87      	ldr	r5, [pc, #540]	; (8003a14 <FileTask+0x308>)
 80037f8:	4c82      	ldr	r4, [pc, #520]	; (8003a04 <FileTask+0x2f8>)
 80037fa:	4629      	mov	r1, r5
 80037fc:	6860      	ldr	r0, [r4, #4]
 80037fe:	f7ff fdf5 	bl	80033ec <FileLibLongToIntString>
        FileFirmwareUpdateLogHook(loggingStr);
 8003802:	4628      	mov	r0, r5
 8003804:	f7fc fee6 	bl	80005d4 <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateLogHook(" bytes from memory at 0x");
 8003808:	4883      	ldr	r0, [pc, #524]	; (8003a18 <FileTask+0x30c>)
 800380a:	f7fc fee3 	bl	80005d4 <FileFirmwareUpdateLogHook>
        FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 24), &loggingStr[0]);
 800380e:	4629      	mov	r1, r5
 8003810:	78e0      	ldrb	r0, [r4, #3]
 8003812:	f7ff fe21 	bl	8003458 <FileLibByteToHexString>
        FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 16), &loggingStr[2]);
 8003816:	1ca9      	adds	r1, r5, #2
 8003818:	78a0      	ldrb	r0, [r4, #2]
 800381a:	f7ff fe1d 	bl	8003458 <FileLibByteToHexString>
        FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 8), &loggingStr[4]);
 800381e:	1d29      	adds	r1, r5, #4
 8003820:	7860      	ldrb	r0, [r4, #1]
 8003822:	f7ff fe19 	bl	8003458 <FileLibByteToHexString>
        FileLibByteToHexString((blt_int8u)eraseInfo.start_address, &loggingStr[6]);
 8003826:	1da9      	adds	r1, r5, #6
 8003828:	7820      	ldrb	r0, [r4, #0]
 800382a:	f7ff fe15 	bl	8003458 <FileLibByteToHexString>
        FileFirmwareUpdateLogHook(loggingStr);
 800382e:	4628      	mov	r0, r5
 8003830:	f7fc fed0 	bl	80005d4 <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateLogHook("...");
 8003834:	4879      	ldr	r0, [pc, #484]	; (8003a1c <FileTask+0x310>)
 8003836:	f7fc fecd 	bl	80005d4 <FileFirmwareUpdateLogHook>
        if (NvmErase(eraseInfo.start_address, eraseInfo.total_size) == BLT_FALSE)
 800383a:	6861      	ldr	r1, [r4, #4]
 800383c:	6820      	ldr	r0, [r4, #0]
 800383e:	f7ff fc05 	bl	800304c <NvmErase>
 8003842:	2800      	cmp	r0, #0
 8003844:	f000 8082 	beq.w	800394c <FileTask+0x240>
      FileFirmwareUpdateLogHook("OK\n\r");
 8003848:	486b      	ldr	r0, [pc, #428]	; (80039f8 <FileTask+0x2ec>)
 800384a:	f7fc fec3 	bl	80005d4 <FileFirmwareUpdateLogHook>
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_PROGRAMMING;
 800384e:	4b65      	ldr	r3, [pc, #404]	; (80039e4 <FileTask+0x2d8>)
 8003850:	2203      	movs	r2, #3
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	e767      	b.n	8003726 <FileTask+0x1a>
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8003856:	4b63      	ldr	r3, [pc, #396]	; (80039e4 <FileTask+0x2d8>)
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]
      FileFirmwareUpdateLogHook("ERROR\n\r");
 800385c:	4865      	ldr	r0, [pc, #404]	; (80039f4 <FileTask+0x2e8>)
 800385e:	f7fc feb9 	bl	80005d4 <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_READ_FROM_FILE);
 8003862:	2002      	movs	r0, #2
 8003864:	f7fc fea8 	bl	80005b8 <FileFirmwareUpdateErrorHook>
      f_close(&fatFsObjects.file);
 8003868:	f504 700c 	add.w	r0, r4, #560	; 0x230
 800386c:	f002 f9c0 	bl	8005bf0 <f_close>
      return;
 8003870:	e759      	b.n	8003726 <FileTask+0x1a>
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8003872:	4b5c      	ldr	r3, [pc, #368]	; (80039e4 <FileTask+0x2d8>)
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
        FileFirmwareUpdateLogHook("ERROR\n\r");
 8003878:	485e      	ldr	r0, [pc, #376]	; (80039f4 <FileTask+0x2e8>)
 800387a:	f7fc feab 	bl	80005d4 <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateErrorHook(FILE_ERROR_INVALID_CHECKSUM_IN_FILE);
 800387e:	2003      	movs	r0, #3
 8003880:	f7fc fe9a 	bl	80005b8 <FileFirmwareUpdateErrorHook>
        f_close(&fatFsObjects.file);
 8003884:	485a      	ldr	r0, [pc, #360]	; (80039f0 <FileTask+0x2e4>)
 8003886:	f002 f9b3 	bl	8005bf0 <f_close>
        return;
 800388a:	e74c      	b.n	8003726 <FileTask+0x1a>
        if (lineParseObject.address == (eraseInfo.start_address + eraseInfo.total_size))
 800388c:	4a5f      	ldr	r2, [pc, #380]	; (8003a0c <FileTask+0x300>)
 800388e:	f8d2 1180 	ldr.w	r1, [r2, #384]	; 0x180
 8003892:	4a5c      	ldr	r2, [pc, #368]	; (8003a04 <FileTask+0x2f8>)
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	441a      	add	r2, r3
 8003898:	4291      	cmp	r1, r2
 800389a:	d103      	bne.n	80038a4 <FileTask+0x198>
          eraseInfo.total_size += parse_result;
 800389c:	4403      	add	r3, r0
 800389e:	4a59      	ldr	r2, [pc, #356]	; (8003a04 <FileTask+0x2f8>)
 80038a0:	6053      	str	r3, [r2, #4]
 80038a2:	e791      	b.n	80037c8 <FileTask+0xbc>
          FileFirmwareUpdateLogHook("OK\n\r");
 80038a4:	4854      	ldr	r0, [pc, #336]	; (80039f8 <FileTask+0x2ec>)
 80038a6:	f7fc fe95 	bl	80005d4 <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateLogHook("Erasing ");
 80038aa:	4859      	ldr	r0, [pc, #356]	; (8003a10 <FileTask+0x304>)
 80038ac:	f7fc fe92 	bl	80005d4 <FileFirmwareUpdateLogHook>
          FileLibLongToIntString(eraseInfo.total_size, loggingStr);
 80038b0:	4e58      	ldr	r6, [pc, #352]	; (8003a14 <FileTask+0x308>)
 80038b2:	4d54      	ldr	r5, [pc, #336]	; (8003a04 <FileTask+0x2f8>)
 80038b4:	4631      	mov	r1, r6
 80038b6:	6868      	ldr	r0, [r5, #4]
 80038b8:	f7ff fd98 	bl	80033ec <FileLibLongToIntString>
          FileFirmwareUpdateLogHook(loggingStr);
 80038bc:	4630      	mov	r0, r6
 80038be:	f7fc fe89 	bl	80005d4 <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateLogHook(" bytes from memory at 0x");
 80038c2:	4855      	ldr	r0, [pc, #340]	; (8003a18 <FileTask+0x30c>)
 80038c4:	f7fc fe86 	bl	80005d4 <FileFirmwareUpdateLogHook>
          FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 24), &loggingStr[0]);
 80038c8:	4631      	mov	r1, r6
 80038ca:	78e8      	ldrb	r0, [r5, #3]
 80038cc:	f7ff fdc4 	bl	8003458 <FileLibByteToHexString>
          FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 16), &loggingStr[2]);
 80038d0:	1cb1      	adds	r1, r6, #2
 80038d2:	78a8      	ldrb	r0, [r5, #2]
 80038d4:	f7ff fdc0 	bl	8003458 <FileLibByteToHexString>
          FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 8), &loggingStr[4]);
 80038d8:	1d31      	adds	r1, r6, #4
 80038da:	7868      	ldrb	r0, [r5, #1]
 80038dc:	f7ff fdbc 	bl	8003458 <FileLibByteToHexString>
          FileLibByteToHexString((blt_int8u)eraseInfo.start_address, &loggingStr[6]);
 80038e0:	1db1      	adds	r1, r6, #6
 80038e2:	7828      	ldrb	r0, [r5, #0]
 80038e4:	f7ff fdb8 	bl	8003458 <FileLibByteToHexString>
          FileFirmwareUpdateLogHook(loggingStr);
 80038e8:	4630      	mov	r0, r6
 80038ea:	f7fc fe73 	bl	80005d4 <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateLogHook("...");
 80038ee:	484b      	ldr	r0, [pc, #300]	; (8003a1c <FileTask+0x310>)
 80038f0:	f7fc fe70 	bl	80005d4 <FileFirmwareUpdateLogHook>
          if (NvmErase(eraseInfo.start_address, eraseInfo.total_size) == BLT_FALSE)
 80038f4:	6869      	ldr	r1, [r5, #4]
 80038f6:	6828      	ldr	r0, [r5, #0]
 80038f8:	f7ff fba8 	bl	800304c <NvmErase>
 80038fc:	b160      	cbz	r0, 8003918 <FileTask+0x20c>
          FileFirmwareUpdateLogHook("OK\n\r");
 80038fe:	483e      	ldr	r0, [pc, #248]	; (80039f8 <FileTask+0x2ec>)
 8003900:	f7fc fe68 	bl	80005d4 <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateLogHook("Parsing firmware file to detect erase blocks...");
 8003904:	483e      	ldr	r0, [pc, #248]	; (8003a00 <FileTask+0x2f4>)
 8003906:	f7fc fe65 	bl	80005d4 <FileFirmwareUpdateLogHook>
          eraseInfo.start_address = lineParseObject.address;
 800390a:	4b40      	ldr	r3, [pc, #256]	; (8003a0c <FileTask+0x300>)
 800390c:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8003910:	4b3c      	ldr	r3, [pc, #240]	; (8003a04 <FileTask+0x2f8>)
 8003912:	601a      	str	r2, [r3, #0]
          eraseInfo.total_size = parse_result;
 8003914:	605c      	str	r4, [r3, #4]
 8003916:	e757      	b.n	80037c8 <FileTask+0xbc>
            firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8003918:	4b32      	ldr	r3, [pc, #200]	; (80039e4 <FileTask+0x2d8>)
 800391a:	2200      	movs	r2, #0
 800391c:	701a      	strb	r2, [r3, #0]
            FileFirmwareUpdateLogHook("ERROR\n\r");
 800391e:	4835      	ldr	r0, [pc, #212]	; (80039f4 <FileTask+0x2e8>)
 8003920:	f7fc fe58 	bl	80005d4 <FileFirmwareUpdateLogHook>
            FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_ERASE_MEMORY);
 8003924:	2005      	movs	r0, #5
 8003926:	f7fc fe47 	bl	80005b8 <FileFirmwareUpdateErrorHook>
            f_close(&fatFsObjects.file);
 800392a:	4831      	ldr	r0, [pc, #196]	; (80039f0 <FileTask+0x2e4>)
 800392c:	f002 f960 	bl	8005bf0 <f_close>
            return;
 8003930:	e6f9      	b.n	8003726 <FileTask+0x1a>
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8003932:	4b2c      	ldr	r3, [pc, #176]	; (80039e4 <FileTask+0x2d8>)
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
        FileFirmwareUpdateLogHook("ERROR\n\r");
 8003938:	482e      	ldr	r0, [pc, #184]	; (80039f4 <FileTask+0x2e8>)
 800393a:	f7fc fe4b 	bl	80005d4 <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateErrorHook(FILE_ERROR_REWINDING_FILE_READ_POINTER);
 800393e:	2004      	movs	r0, #4
 8003940:	f7fc fe3a 	bl	80005b8 <FileFirmwareUpdateErrorHook>
        f_close(&fatFsObjects.file);
 8003944:	482a      	ldr	r0, [pc, #168]	; (80039f0 <FileTask+0x2e4>)
 8003946:	f002 f953 	bl	8005bf0 <f_close>
        return;
 800394a:	e6ec      	b.n	8003726 <FileTask+0x1a>
          firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 800394c:	4b25      	ldr	r3, [pc, #148]	; (80039e4 <FileTask+0x2d8>)
 800394e:	2200      	movs	r2, #0
 8003950:	701a      	strb	r2, [r3, #0]
          FileFirmwareUpdateLogHook("ERROR\n\r");
 8003952:	4828      	ldr	r0, [pc, #160]	; (80039f4 <FileTask+0x2e8>)
 8003954:	f7fc fe3e 	bl	80005d4 <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_ERASE_MEMORY);
 8003958:	2005      	movs	r0, #5
 800395a:	f7fc fe2d 	bl	80005b8 <FileFirmwareUpdateErrorHook>
          f_close(&fatFsObjects.file);
 800395e:	4824      	ldr	r0, [pc, #144]	; (80039f0 <FileTask+0x2e4>)
 8003960:	f002 f946 	bl	8005bf0 <f_close>
          return;
 8003964:	e6df      	b.n	8003726 <FileTask+0x1a>
    read_line_ptr = f_gets(lineParseObject.line, sizeof(lineParseObject.line), &fatFsObjects.file);
 8003966:	4c28      	ldr	r4, [pc, #160]	; (8003a08 <FileTask+0x2fc>)
 8003968:	f504 720c 	add.w	r2, r4, #560	; 0x230
 800396c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003970:	4826      	ldr	r0, [pc, #152]	; (8003a0c <FileTask+0x300>)
 8003972:	f002 fa93 	bl	8005e9c <f_gets>
    if (f_error(&fatFsObjects.file) > 0)
 8003976:	f894 3241 	ldrb.w	r3, [r4, #577]	; 0x241
 800397a:	2b00      	cmp	r3, #0
 800397c:	d156      	bne.n	8003a2c <FileTask+0x320>
    if (read_line_ptr != BLT_NULL)
 800397e:	b160      	cbz	r0, 800399a <FileTask+0x28e>
      parse_result = FileSrecParseLine(lineParseObject.line, &lineParseObject.address, lineParseObject.data);
 8003980:	4822      	ldr	r0, [pc, #136]	; (8003a0c <FileTask+0x300>)
 8003982:	f500 7280 	add.w	r2, r0, #256	; 0x100
 8003986:	f500 71c0 	add.w	r1, r0, #384	; 0x180
 800398a:	f7ff fe23 	bl	80035d4 <FileSrecParseLine>
 800398e:	4604      	mov	r4, r0
      if (parse_result == ERROR_SREC_INVALID_CHECKSUM)
 8003990:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003994:	d058      	beq.n	8003a48 <FileTask+0x33c>
    if (parse_result > 0)
 8003996:	2800      	cmp	r0, #0
 8003998:	dc63      	bgt.n	8003a62 <FileTask+0x356>
    if (f_eof(&fatFsObjects.file) > 0)
 800399a:	4b1b      	ldr	r3, [pc, #108]	; (8003a08 <FileTask+0x2fc>)
 800399c:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 80039a0:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 80039a4:	429a      	cmp	r2, r3
 80039a6:	f47f aebe 	bne.w	8003726 <FileTask+0x1a>
      FileFirmwareUpdateLogHook("Writing program checksum...");
 80039aa:	481d      	ldr	r0, [pc, #116]	; (8003a20 <FileTask+0x314>)
 80039ac:	f7fc fe12 	bl	80005d4 <FileFirmwareUpdateLogHook>
      if (NvmDone() == BLT_FALSE)
 80039b0:	f7ff fb58 	bl	8003064 <NvmDone>
 80039b4:	2800      	cmp	r0, #0
 80039b6:	f000 8096 	beq.w	8003ae6 <FileTask+0x3da>
      FileFirmwareUpdateLogHook("OK\n\r");
 80039ba:	480f      	ldr	r0, [pc, #60]	; (80039f8 <FileTask+0x2ec>)
 80039bc:	f7fc fe0a 	bl	80005d4 <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateLogHook("Closing firmware file\n\r");
 80039c0:	4818      	ldr	r0, [pc, #96]	; (8003a24 <FileTask+0x318>)
 80039c2:	f7fc fe07 	bl	80005d4 <FileFirmwareUpdateLogHook>
      f_close(&fatFsObjects.file);
 80039c6:	480a      	ldr	r0, [pc, #40]	; (80039f0 <FileTask+0x2e4>)
 80039c8:	f002 f912 	bl	8005bf0 <f_close>
      FileFirmwareUpdateLogHook("Firmware update successfully completed\n\r");
 80039cc:	4816      	ldr	r0, [pc, #88]	; (8003a28 <FileTask+0x31c>)
 80039ce:	f7fc fe01 	bl	80005d4 <FileFirmwareUpdateLogHook>
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 80039d2:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <FileTask+0x2d8>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
      FileFirmwareUpdateCompletedHook();
 80039d8:	f7fc fdcc 	bl	8000574 <FileFirmwareUpdateCompletedHook>
      CpuStartUserProgram();
 80039dc:	f7ff f928 	bl	8002c30 <CpuStartUserProgram>
 80039e0:	e6a1      	b.n	8003726 <FileTask+0x1a>
 80039e2:	bf00      	nop
 80039e4:	20000d34 	.word	0x20000d34
 80039e8:	0800620c 	.word	0x0800620c
 80039ec:	08006230 	.word	0x08006230
 80039f0:	20000b0c 	.word	0x20000b0c
 80039f4:	08006258 	.word	0x08006258
 80039f8:	08006260 	.word	0x08006260
 80039fc:	08006268 	.word	0x08006268
 8003a00:	0800628c 	.word	0x0800628c
 8003a04:	200008d4 	.word	0x200008d4
 8003a08:	200008dc 	.word	0x200008dc
 8003a0c:	20000d38 	.word	0x20000d38
 8003a10:	080062bc 	.word	0x080062bc
 8003a14:	20000ebc 	.word	0x20000ebc
 8003a18:	080062c8 	.word	0x080062c8
 8003a1c:	0800636c 	.word	0x0800636c
 8003a20:	08006354 	.word	0x08006354
 8003a24:	08006370 	.word	0x08006370
 8003a28:	08006388 	.word	0x08006388
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8003a2c:	4b35      	ldr	r3, [pc, #212]	; (8003b04 <FileTask+0x3f8>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	701a      	strb	r2, [r3, #0]
      FileFirmwareUpdateLogHook("Reading line from file...ERROR\n\r");
 8003a32:	4835      	ldr	r0, [pc, #212]	; (8003b08 <FileTask+0x3fc>)
 8003a34:	f7fc fdce 	bl	80005d4 <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_READ_FROM_FILE);
 8003a38:	2002      	movs	r0, #2
 8003a3a:	f7fc fdbd 	bl	80005b8 <FileFirmwareUpdateErrorHook>
      f_close(&fatFsObjects.file);
 8003a3e:	f504 700c 	add.w	r0, r4, #560	; 0x230
 8003a42:	f002 f8d5 	bl	8005bf0 <f_close>
      return;
 8003a46:	e66e      	b.n	8003726 <FileTask+0x1a>
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8003a48:	4b2e      	ldr	r3, [pc, #184]	; (8003b04 <FileTask+0x3f8>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	701a      	strb	r2, [r3, #0]
        FileFirmwareUpdateLogHook("Invalid checksum found...ERROR\n\r");
 8003a4e:	482f      	ldr	r0, [pc, #188]	; (8003b0c <FileTask+0x400>)
 8003a50:	f7fc fdc0 	bl	80005d4 <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateErrorHook(FILE_ERROR_INVALID_CHECKSUM_IN_FILE);
 8003a54:	2003      	movs	r0, #3
 8003a56:	f7fc fdaf 	bl	80005b8 <FileFirmwareUpdateErrorHook>
        f_close(&fatFsObjects.file);
 8003a5a:	482d      	ldr	r0, [pc, #180]	; (8003b10 <FileTask+0x404>)
 8003a5c:	f002 f8c8 	bl	8005bf0 <f_close>
        return;
 8003a60:	e661      	b.n	8003726 <FileTask+0x1a>
      FileFirmwareUpdateLogHook("Programming ");
 8003a62:	482c      	ldr	r0, [pc, #176]	; (8003b14 <FileTask+0x408>)
 8003a64:	f7fc fdb6 	bl	80005d4 <FileFirmwareUpdateLogHook>
      FileLibLongToIntString(parse_result, loggingStr);
 8003a68:	4d2b      	ldr	r5, [pc, #172]	; (8003b18 <FileTask+0x40c>)
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	f7ff fcbd 	bl	80033ec <FileLibLongToIntString>
      FileFirmwareUpdateLogHook(loggingStr);
 8003a72:	4628      	mov	r0, r5
 8003a74:	f7fc fdae 	bl	80005d4 <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateLogHook(" bytes to memory at 0x");
 8003a78:	4828      	ldr	r0, [pc, #160]	; (8003b1c <FileTask+0x410>)
 8003a7a:	f7fc fdab 	bl	80005d4 <FileFirmwareUpdateLogHook>
      FileLibByteToHexString((blt_int8u)(lineParseObject.address >> 24), &loggingStr[0]);
 8003a7e:	4e28      	ldr	r6, [pc, #160]	; (8003b20 <FileTask+0x414>)
 8003a80:	4629      	mov	r1, r5
 8003a82:	f896 0183 	ldrb.w	r0, [r6, #387]	; 0x183
 8003a86:	f7ff fce7 	bl	8003458 <FileLibByteToHexString>
      FileLibByteToHexString((blt_int8u)(lineParseObject.address >> 16), &loggingStr[2]);
 8003a8a:	1ca9      	adds	r1, r5, #2
 8003a8c:	f896 0182 	ldrb.w	r0, [r6, #386]	; 0x182
 8003a90:	f7ff fce2 	bl	8003458 <FileLibByteToHexString>
      FileLibByteToHexString((blt_int8u)(lineParseObject.address >> 8), &loggingStr[4]);
 8003a94:	1d29      	adds	r1, r5, #4
 8003a96:	f896 0181 	ldrb.w	r0, [r6, #385]	; 0x181
 8003a9a:	f7ff fcdd 	bl	8003458 <FileLibByteToHexString>
      FileLibByteToHexString((blt_int8u)lineParseObject.address, &loggingStr[6]);
 8003a9e:	1da9      	adds	r1, r5, #6
 8003aa0:	f896 0180 	ldrb.w	r0, [r6, #384]	; 0x180
 8003aa4:	f7ff fcd8 	bl	8003458 <FileLibByteToHexString>
      FileFirmwareUpdateLogHook(loggingStr);
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	f7fc fd93 	bl	80005d4 <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateLogHook("...");
 8003aae:	481d      	ldr	r0, [pc, #116]	; (8003b24 <FileTask+0x418>)
 8003ab0:	f7fc fd90 	bl	80005d4 <FileFirmwareUpdateLogHook>
      if (NvmWrite(lineParseObject.address, parse_result, lineParseObject.data) == BLT_FALSE)
 8003ab4:	f506 7280 	add.w	r2, r6, #256	; 0x100
 8003ab8:	4621      	mov	r1, r4
 8003aba:	f8d6 0180 	ldr.w	r0, [r6, #384]	; 0x180
 8003abe:	f7ff fac1 	bl	8003044 <NvmWrite>
 8003ac2:	b118      	cbz	r0, 8003acc <FileTask+0x3c0>
      FileFirmwareUpdateLogHook("OK\n\r");
 8003ac4:	4818      	ldr	r0, [pc, #96]	; (8003b28 <FileTask+0x41c>)
 8003ac6:	f7fc fd85 	bl	80005d4 <FileFirmwareUpdateLogHook>
 8003aca:	e766      	b.n	800399a <FileTask+0x28e>
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8003acc:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <FileTask+0x3f8>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	701a      	strb	r2, [r3, #0]
        FileFirmwareUpdateLogHook("ERROR\n\r");
 8003ad2:	4816      	ldr	r0, [pc, #88]	; (8003b2c <FileTask+0x420>)
 8003ad4:	f7fc fd7e 	bl	80005d4 <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_PROGRAM_MEMORY);
 8003ad8:	2006      	movs	r0, #6
 8003ada:	f7fc fd6d 	bl	80005b8 <FileFirmwareUpdateErrorHook>
        f_close(&fatFsObjects.file);
 8003ade:	480c      	ldr	r0, [pc, #48]	; (8003b10 <FileTask+0x404>)
 8003ae0:	f002 f886 	bl	8005bf0 <f_close>
        return;
 8003ae4:	e61f      	b.n	8003726 <FileTask+0x1a>
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8003ae6:	4b07      	ldr	r3, [pc, #28]	; (8003b04 <FileTask+0x3f8>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	701a      	strb	r2, [r3, #0]
        FileFirmwareUpdateLogHook("ERROR\n\r");
 8003aec:	480f      	ldr	r0, [pc, #60]	; (8003b2c <FileTask+0x420>)
 8003aee:	f7fc fd71 	bl	80005d4 <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_WRITE_CHECKSUM);
 8003af2:	2007      	movs	r0, #7
 8003af4:	f7fc fd60 	bl	80005b8 <FileFirmwareUpdateErrorHook>
        f_close(&fatFsObjects.file);
 8003af8:	4805      	ldr	r0, [pc, #20]	; (8003b10 <FileTask+0x404>)
 8003afa:	f002 f879 	bl	8005bf0 <f_close>
        return;
 8003afe:	e612      	b.n	8003726 <FileTask+0x1a>
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	20000d34 	.word	0x20000d34
 8003b08:	080062e4 	.word	0x080062e4
 8003b0c:	08006308 	.word	0x08006308
 8003b10:	20000b0c 	.word	0x20000b0c
 8003b14:	0800632c 	.word	0x0800632c
 8003b18:	20000ebc 	.word	0x20000ebc
 8003b1c:	0800633c 	.word	0x0800633c
 8003b20:	20000d38 	.word	0x20000d38
 8003b24:	0800636c 	.word	0x0800636c
 8003b28:	08006260 	.word	0x08006260
 8003b2c:	08006258 	.word	0x08006258

08003b30 <XcpProtectResources>:
#if (XCP_RES_PAGING_EN == 1)
  xcpInfo.protection |= XCP_RES_CALPAG;
#endif

#if (XCP_RES_PROGRAMMING_EN == 1)
  xcpInfo.protection |= XCP_RES_PGM;
 8003b30:	4b01      	ldr	r3, [pc, #4]	; (8003b38 <XcpProtectResources+0x8>)
 8003b32:	2210      	movs	r2, #16
 8003b34:	705a      	strb	r2, [r3, #1]

#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.protection |= XCP_RES_STIM;
#endif
#endif /* XCP_SEED_KEY_PROTECTION_EN == 1 */
} /*** end of XcpProtectResources ***/
 8003b36:	4770      	bx	lr
 8003b38:	20000f8c 	.word	0x20000f8c

08003b3c <XcpSetCtoError>:
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 8003b3c:	4b03      	ldr	r3, [pc, #12]	; (8003b4c <XcpSetCtoError+0x10>)
 8003b3e:	22fe      	movs	r2, #254	; 0xfe
 8003b40:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[1] = error;
 8003b42:	7118      	strb	r0, [r3, #4]
  xcpInfo.ctoLen = 2;
 8003b44:	2202      	movs	r2, #2
 8003b46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpSetCtoError ***/
 8003b4a:	4770      	bx	lr
 8003b4c:	20000f8c 	.word	0x20000f8c

08003b50 <XcpCmdDisconnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdDisconnect(blt_int8u *data)
{
 8003b50:	b510      	push	{r4, lr}
  /* suppress compiler warning for unused parameter */
  data = data;

  /* indicate that the xcp connection is disconnected */
  xcpInfo.connected = 0;
 8003b52:	4c05      	ldr	r4, [pc, #20]	; (8003b68 <XcpCmdDisconnect+0x18>)
 8003b54:	2300      	movs	r3, #0
 8003b56:	7023      	strb	r3, [r4, #0]

  /* enable resource protection */
  XcpProtectResources();
 8003b58:	f7ff ffea 	bl	8003b30 <XcpProtectResources>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8003b5c:	23ff      	movs	r3, #255	; 0xff
 8003b5e:	70e3      	strb	r3, [r4, #3]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8003b60:	2301      	movs	r3, #1
 8003b62:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdDisconnect ***/
 8003b66:	bd10      	pop	{r4, pc}
 8003b68:	20000f8c 	.word	0x20000f8c

08003b6c <XcpCmdGetStatus>:
{
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8003b6c:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <XcpCmdGetStatus+0x1c>)
 8003b6e:	22ff      	movs	r2, #255	; 0xff
 8003b70:	70da      	strb	r2, [r3, #3]

  /* report session status */
  xcpInfo.ctoData[1] = 0;
 8003b72:	2200      	movs	r2, #0
 8003b74:	711a      	strb	r2, [r3, #4]

  /* report current resource protection status */
  xcpInfo.ctoData[2] = xcpInfo.protection;
 8003b76:	7859      	ldrb	r1, [r3, #1]
 8003b78:	7159      	strb	r1, [r3, #5]

  /* reset reserved and session configuration id values */
  xcpInfo.ctoData[3] = 0;
 8003b7a:	719a      	strb	r2, [r3, #6]
  xcpInfo.ctoData[4] = 0;
 8003b7c:	71da      	strb	r2, [r3, #7]
  xcpInfo.ctoData[5] = 0;
 8003b7e:	721a      	strb	r2, [r3, #8]

  /* set packet length */
  xcpInfo.ctoLen = 6;
 8003b80:	2206      	movs	r2, #6
 8003b82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetStatus ***/
 8003b86:	4770      	bx	lr
 8003b88:	20000f8c 	.word	0x20000f8c

08003b8c <XcpCmdSynch>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSynch(blt_int8u *data)
{
 8003b8c:	b508      	push	{r3, lr}
  /* suppress compiler warning for unused parameter */
  data = data;

  /* synch requires a negative response */
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 8003b8e:	2000      	movs	r0, #0
 8003b90:	f7ff ffd4 	bl	8003b3c <XcpSetCtoError>
} /*** end of XcpCmdSynch ***/
 8003b94:	bd08      	pop	{r3, pc}
	...

08003b98 <XcpCmdGetId>:
{
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8003b98:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <XcpCmdGetId+0x20>)
 8003b9a:	22ff      	movs	r2, #255	; 0xff
 8003b9c:	70da      	strb	r2, [r3, #3]

  /* point mta to start of station id string */
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 8003b9e:	4a07      	ldr	r2, [pc, #28]	; (8003bbc <XcpCmdGetId+0x24>)
 8003ba0:	649a      	str	r2, [r3, #72]	; 0x48

  /* set station id mode to 0 */
  xcpInfo.ctoData[1] = 0;
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	711a      	strb	r2, [r3, #4]

  /* reset reserved values */
  xcpInfo.ctoData[2] = 0;
 8003ba6:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[3] = 0;
 8003ba8:	719a      	strb	r2, [r3, #6]

  /* store station id length (excl. null termination) for response packet */
  *(blt_int32u *)&xcpInfo.ctoData[4] = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
 8003baa:	2207      	movs	r2, #7
 8003bac:	f8c3 2007 	str.w	r2, [r3, #7]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetId ***/
 8003bb6:	4770      	bx	lr
 8003bb8:	20000f8c 	.word	0x20000f8c
 8003bbc:	080063e0 	.word	0x080063e0

08003bc0 <XcpCmdSetMta>:
**
****************************************************************************************/
static void XcpCmdSetMta(blt_int8u *data)
{
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8003bc0:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <XcpCmdSetMta+0x14>)
 8003bc2:	22ff      	movs	r2, #255	; 0xff
 8003bc4:	70da      	strb	r2, [r3, #3]

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = *(blt_int32u *)&data[4];
 8003bc6:	6842      	ldr	r2, [r0, #4]
 8003bc8:	649a      	str	r2, [r3, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdSetMta ***/
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20000f8c 	.word	0x20000f8c

08003bd8 <XcpCmdProgramPrepare>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramPrepare(blt_int8u *data)
{
 8003bd8:	b508      	push	{r3, lr}
#if (XCP_SEED_KEY_PROTECTION_EN == 1)
  /* check if PGM resource is unlocked */
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8003bda:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <XcpCmdProgramPrepare+0x1c>)
 8003bdc:	785b      	ldrb	r3, [r3, #1]
 8003bde:	f013 0f10 	tst.w	r3, #16
 8003be2:	d103      	bne.n	8003bec <XcpCmdProgramPrepare+0x14>
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 8003be4:	2031      	movs	r0, #49	; 0x31
 8003be6:	f7ff ffa9 	bl	8003b3c <XcpSetCtoError>
  return;
} /*** end of XcpCmdProgramPrepare ***/
 8003bea:	bd08      	pop	{r3, pc}
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8003bec:	2025      	movs	r0, #37	; 0x25
 8003bee:	f7ff ffa5 	bl	8003b3c <XcpSetCtoError>
    return;
 8003bf2:	e7fa      	b.n	8003bea <XcpCmdProgramPrepare+0x12>
 8003bf4:	20000f8c 	.word	0x20000f8c

08003bf8 <XcpCmdProgramStart>:
{
 8003bf8:	b538      	push	{r3, r4, r5, lr}
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <XcpCmdProgramStart+0x34>)
 8003bfc:	785b      	ldrb	r3, [r3, #1]
 8003bfe:	f013 0f10 	tst.w	r3, #16
 8003c02:	d10f      	bne.n	8003c24 <XcpCmdProgramStart+0x2c>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8003c04:	4c09      	ldr	r4, [pc, #36]	; (8003c2c <XcpCmdProgramStart+0x34>)
 8003c06:	23ff      	movs	r3, #255	; 0xff
 8003c08:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] = 0;
 8003c0a:	2500      	movs	r5, #0
 8003c0c:	7125      	strb	r5, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8003c0e:	7165      	strb	r5, [r4, #5]
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8003c10:	f7ff fbb8 	bl	8003384 <ComGetActiveInterfaceMaxRxLen>
 8003c14:	71a0      	strb	r0, [r4, #6]
  xcpInfo.ctoData[4] = 0;
 8003c16:	71e5      	strb	r5, [r4, #7]
  xcpInfo.ctoData[5] = 0;
 8003c18:	7225      	strb	r5, [r4, #8]
  xcpInfo.ctoData[6] = 0;
 8003c1a:	7265      	strb	r5, [r4, #9]
  xcpInfo.ctoLen = 7;
 8003c1c:	2307      	movs	r3, #7
 8003c1e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdProgramStart ***/
 8003c22:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8003c24:	2025      	movs	r0, #37	; 0x25
 8003c26:	f7ff ff89 	bl	8003b3c <XcpSetCtoError>
    return;
 8003c2a:	e7fa      	b.n	8003c22 <XcpCmdProgramStart+0x2a>
 8003c2c:	20000f8c 	.word	0x20000f8c

08003c30 <XcpCmdConnect>:
{
 8003c30:	b538      	push	{r3, r4, r5, lr}
  if (FileIsIdle() == BLT_FALSE)
 8003c32:	f7ff fc67 	bl	8003504 <FileIsIdle>
 8003c36:	b1e8      	cbz	r0, 8003c74 <XcpCmdConnect+0x44>
  XcpProtectResources();
 8003c38:	f7ff ff7a 	bl	8003b30 <XcpProtectResources>
  xcpInfo.connected = 1;
 8003c3c:	4c0f      	ldr	r4, [pc, #60]	; (8003c7c <XcpCmdConnect+0x4c>)
 8003c3e:	2501      	movs	r5, #1
 8003c40:	7025      	strb	r5, [r4, #0]
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8003c42:	23ff      	movs	r3, #255	; 0xff
 8003c44:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 8003c46:	2310      	movs	r3, #16
 8003c48:	7123      	strb	r3, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	7163      	strb	r3, [r4, #5]
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8003c4e:	f7ff fb99 	bl	8003384 <ComGetActiveInterfaceMaxRxLen>
 8003c52:	71a0      	strb	r0, [r4, #6]
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 8003c54:	f7ff fba8 	bl	80033a8 <ComGetActiveInterfaceMaxTxLen>
 8003c58:	71e0      	strb	r0, [r4, #7]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 8003c5a:	f7ff fba5 	bl	80033a8 <ComGetActiveInterfaceMaxTxLen>
 8003c5e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8003c62:	7220      	strb	r0, [r4, #8]
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 8003c64:	7265      	strb	r5, [r4, #9]
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 8003c66:	72a5      	strb	r5, [r4, #10]
  xcpInfo.ctoLen = 8;
 8003c68:	2308      	movs	r3, #8
 8003c6a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  NvmInit();
 8003c6e:	f7ff f9e5 	bl	800303c <NvmInit>
} /*** end of XcpCmdConnect ***/
 8003c72:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 8003c74:	2010      	movs	r0, #16
 8003c76:	f7ff ff61 	bl	8003b3c <XcpSetCtoError>
    return;
 8003c7a:	e7fa      	b.n	8003c72 <XcpCmdConnect+0x42>
 8003c7c:	20000f8c 	.word	0x20000f8c

08003c80 <XcpCmdUpload>:
{
 8003c80:	b538      	push	{r3, r4, r5, lr}
 8003c82:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8003c84:	7845      	ldrb	r5, [r0, #1]
 8003c86:	f7ff fb7d 	bl	8003384 <ComGetActiveInterfaceMaxRxLen>
 8003c8a:	3801      	subs	r0, #1
 8003c8c:	4285      	cmp	r5, r0
 8003c8e:	dc15      	bgt.n	8003cbc <XcpCmdUpload+0x3c>
  len = data[1];
 8003c90:	7862      	ldrb	r2, [r4, #1]
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8003c92:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <XcpCmdUpload+0x50>)
 8003c94:	785b      	ldrb	r3, [r3, #1]
 8003c96:	f013 0f10 	tst.w	r3, #16
 8003c9a:	d013      	beq.n	8003cc4 <XcpCmdUpload+0x44>
    CpuMemSet((blt_addr)destPtr, 0, len);
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	480d      	ldr	r0, [pc, #52]	; (8003cd4 <XcpCmdUpload+0x54>)
 8003ca0:	f7fe fff6 	bl	8002c90 <CpuMemSet>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <XcpCmdUpload+0x50>)
 8003ca6:	22ff      	movs	r2, #255	; 0xff
 8003ca8:	70da      	strb	r2, [r3, #3]
  xcpInfo.mta += data[1];
 8003caa:	7861      	ldrb	r1, [r4, #1]
 8003cac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cae:	440a      	add	r2, r1
 8003cb0:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoLen = data[1]+1;
 8003cb2:	7862      	ldrb	r2, [r4, #1]
 8003cb4:	3201      	adds	r2, #1
 8003cb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdUpload ***/
 8003cba:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8003cbc:	2022      	movs	r0, #34	; 0x22
 8003cbe:	f7ff ff3d 	bl	8003b3c <XcpSetCtoError>
    return;
 8003cc2:	e7fa      	b.n	8003cba <XcpCmdUpload+0x3a>
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <XcpCmdUpload+0x50>)
 8003cc6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003cc8:	3004      	adds	r0, #4
 8003cca:	f7fe ffd1 	bl	8002c70 <CpuMemCopy>
 8003cce:	e7e9      	b.n	8003ca4 <XcpCmdUpload+0x24>
 8003cd0:	20000f8c 	.word	0x20000f8c
 8003cd4:	20000f90 	.word	0x20000f90

08003cd8 <XcpCmdShortUpload>:
{
 8003cd8:	b538      	push	{r3, r4, r5, lr}
 8003cda:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8003cdc:	7845      	ldrb	r5, [r0, #1]
 8003cde:	f7ff fb51 	bl	8003384 <ComGetActiveInterfaceMaxRxLen>
 8003ce2:	3801      	subs	r0, #1
 8003ce4:	4285      	cmp	r5, r0
 8003ce6:	dc17      	bgt.n	8003d18 <XcpCmdShortUpload+0x40>
  xcpInfo.mta = *(blt_int32u *)&data[4];
 8003ce8:	6861      	ldr	r1, [r4, #4]
 8003cea:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <XcpCmdShortUpload+0x50>)
 8003cec:	6499      	str	r1, [r3, #72]	; 0x48
  len = data[1];
 8003cee:	7862      	ldrb	r2, [r4, #1]
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8003cf0:	785b      	ldrb	r3, [r3, #1]
 8003cf2:	f013 0f10 	tst.w	r3, #16
 8003cf6:	d013      	beq.n	8003d20 <XcpCmdShortUpload+0x48>
    CpuMemSet((blt_addr)destPtr, 0, len);
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	480c      	ldr	r0, [pc, #48]	; (8003d2c <XcpCmdShortUpload+0x54>)
 8003cfc:	f7fe ffc8 	bl	8002c90 <CpuMemSet>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8003d00:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <XcpCmdShortUpload+0x50>)
 8003d02:	22ff      	movs	r2, #255	; 0xff
 8003d04:	70da      	strb	r2, [r3, #3]
  xcpInfo.mta += data[1];
 8003d06:	7861      	ldrb	r1, [r4, #1]
 8003d08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d0a:	440a      	add	r2, r1
 8003d0c:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoLen = data[1]+1;
 8003d0e:	7862      	ldrb	r2, [r4, #1]
 8003d10:	3201      	adds	r2, #1
 8003d12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdShortUpload ***/
 8003d16:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8003d18:	2022      	movs	r0, #34	; 0x22
 8003d1a:	f7ff ff0f 	bl	8003b3c <XcpSetCtoError>
    return;
 8003d1e:	e7fa      	b.n	8003d16 <XcpCmdShortUpload+0x3e>
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8003d20:	4802      	ldr	r0, [pc, #8]	; (8003d2c <XcpCmdShortUpload+0x54>)
 8003d22:	f7fe ffa5 	bl	8002c70 <CpuMemCopy>
 8003d26:	e7eb      	b.n	8003d00 <XcpCmdShortUpload+0x28>
 8003d28:	20000f8c 	.word	0x20000f8c
 8003d2c:	20000f90 	.word	0x20000f90

08003d30 <XcpComputeChecksum>:
{
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d32:	4605      	mov	r5, r0
 8003d34:	4617      	mov	r7, r2
  blt_int8u cs = 0;
 8003d36:	2400      	movs	r4, #0
  while (length-- > 0)
 8003d38:	e006      	b.n	8003d48 <XcpComputeChecksum+0x18>
    cs += *((blt_int8u *)(blt_addr)address);
 8003d3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d3e:	441c      	add	r4, r3
 8003d40:	b2e4      	uxtb	r4, r4
    CopService();
 8003d42:	f7ff fb4f 	bl	80033e4 <CopService>
  while (length-- > 0)
 8003d46:	4631      	mov	r1, r6
 8003d48:	1e4e      	subs	r6, r1, #1
 8003d4a:	2900      	cmp	r1, #0
 8003d4c:	d1f5      	bne.n	8003d3a <XcpComputeChecksum+0xa>
  *checksum = cs;
 8003d4e:	603c      	str	r4, [r7, #0]
} /*** end of XcpComputeChecksum ***/
 8003d50:	2001      	movs	r0, #1
 8003d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d54 <XcpCmdBuildCheckSum>:
{
 8003d54:	b510      	push	{r4, lr}
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8003d56:	4c08      	ldr	r4, [pc, #32]	; (8003d78 <XcpCmdBuildCheckSum+0x24>)
 8003d58:	23ff      	movs	r3, #255	; 0xff
 8003d5a:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] = XcpComputeChecksum(xcpInfo.mta, *(blt_int32u *)&data[4],
 8003d5c:	1de2      	adds	r2, r4, #7
 8003d5e:	6841      	ldr	r1, [r0, #4]
 8003d60:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003d62:	f7ff ffe5 	bl	8003d30 <XcpComputeChecksum>
 8003d66:	7120      	strb	r0, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	7163      	strb	r3, [r4, #5]
  xcpInfo.ctoData[3] = 0;
 8003d6c:	71a3      	strb	r3, [r4, #6]
  xcpInfo.ctoLen = 8;
 8003d6e:	2308      	movs	r3, #8
 8003d70:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdBuildCheckSum ***/
 8003d74:	bd10      	pop	{r4, pc}
 8003d76:	bf00      	nop
 8003d78:	20000f8c 	.word	0x20000f8c

08003d7c <XcpCmdProgramMax>:
{
 8003d7c:	b538      	push	{r3, r4, r5, lr}
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8003d7e:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <XcpCmdProgramMax+0x4c>)
 8003d80:	785b      	ldrb	r3, [r3, #1]
 8003d82:	f013 0f10 	tst.w	r3, #16
 8003d86:	d117      	bne.n	8003db8 <XcpCmdProgramMax+0x3c>
 8003d88:	4604      	mov	r4, r0
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 8003d8a:	4b0f      	ldr	r3, [pc, #60]	; (8003dc8 <XcpCmdProgramMax+0x4c>)
 8003d8c:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8003d8e:	f7ff faf9 	bl	8003384 <ComGetActiveInterfaceMaxRxLen>
 8003d92:	1c62      	adds	r2, r4, #1
 8003d94:	1e41      	subs	r1, r0, #1
 8003d96:	4628      	mov	r0, r5
 8003d98:	f7ff f954 	bl	8003044 <NvmWrite>
 8003d9c:	b180      	cbz	r0, 8003dc0 <XcpCmdProgramMax+0x44>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8003d9e:	4c0a      	ldr	r4, [pc, #40]	; (8003dc8 <XcpCmdProgramMax+0x4c>)
 8003da0:	23ff      	movs	r3, #255	; 0xff
 8003da2:	70e3      	strb	r3, [r4, #3]
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 8003da4:	f7ff faee 	bl	8003384 <ComGetActiveInterfaceMaxRxLen>
 8003da8:	3801      	subs	r0, #1
 8003daa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003dac:	4403      	add	r3, r0
 8003dae:	64a3      	str	r3, [r4, #72]	; 0x48
  xcpInfo.ctoLen = 1;
 8003db0:	2301      	movs	r3, #1
 8003db2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 8003db6:	e002      	b.n	8003dbe <XcpCmdProgramMax+0x42>
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8003db8:	2025      	movs	r0, #37	; 0x25
 8003dba:	f7ff febf 	bl	8003b3c <XcpSetCtoError>
} /*** end of XcpCmdProgramMax ***/
 8003dbe:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_GENERIC);
 8003dc0:	2031      	movs	r0, #49	; 0x31
 8003dc2:	f7ff febb 	bl	8003b3c <XcpSetCtoError>
    return;
 8003dc6:	e7fa      	b.n	8003dbe <XcpCmdProgramMax+0x42>
 8003dc8:	20000f8c 	.word	0x20000f8c

08003dcc <XcpCmdProgram>:
{
 8003dcc:	b538      	push	{r3, r4, r5, lr}
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8003dce:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <XcpCmdProgram+0x68>)
 8003dd0:	785b      	ldrb	r3, [r3, #1]
 8003dd2:	f013 0f10 	tst.w	r3, #16
 8003dd6:	d115      	bne.n	8003e04 <XcpCmdProgram+0x38>
 8003dd8:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 8003dda:	7845      	ldrb	r5, [r0, #1]
 8003ddc:	f7ff fad2 	bl	8003384 <ComGetActiveInterfaceMaxRxLen>
 8003de0:	3802      	subs	r0, #2
 8003de2:	4285      	cmp	r5, r0
 8003de4:	dc12      	bgt.n	8003e0c <XcpCmdProgram+0x40>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8003de6:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <XcpCmdProgram+0x68>)
 8003de8:	22ff      	movs	r2, #255	; 0xff
 8003dea:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 8003dec:	2201      	movs	r2, #1
 8003dee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (data[1] == 0)
 8003df2:	7861      	ldrb	r1, [r4, #1]
 8003df4:	b971      	cbnz	r1, 8003e14 <XcpCmdProgram+0x48>
    if (NvmDone() == BLT_FALSE)
 8003df6:	f7ff f935 	bl	8003064 <NvmDone>
 8003dfa:	b930      	cbnz	r0, 8003e0a <XcpCmdProgram+0x3e>
      XcpSetCtoError(XCP_ERR_GENERIC);
 8003dfc:	2031      	movs	r0, #49	; 0x31
 8003dfe:	f7ff fe9d 	bl	8003b3c <XcpSetCtoError>
 8003e02:	e002      	b.n	8003e0a <XcpCmdProgram+0x3e>
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8003e04:	2025      	movs	r0, #37	; 0x25
 8003e06:	f7ff fe99 	bl	8003b3c <XcpSetCtoError>
} /*** end of XcpCmdProgram ***/
 8003e0a:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8003e0c:	2022      	movs	r0, #34	; 0x22
 8003e0e:	f7ff fe95 	bl	8003b3c <XcpSetCtoError>
    return;
 8003e12:	e7fa      	b.n	8003e0a <XcpCmdProgram+0x3e>
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 8003e14:	1ca2      	adds	r2, r4, #2
 8003e16:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <XcpCmdProgram+0x68>)
 8003e18:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003e1a:	f7ff f913 	bl	8003044 <NvmWrite>
 8003e1e:	b128      	cbz	r0, 8003e2c <XcpCmdProgram+0x60>
  xcpInfo.mta += data[1];
 8003e20:	7861      	ldrb	r1, [r4, #1]
 8003e22:	4a04      	ldr	r2, [pc, #16]	; (8003e34 <XcpCmdProgram+0x68>)
 8003e24:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8003e26:	440b      	add	r3, r1
 8003e28:	6493      	str	r3, [r2, #72]	; 0x48
 8003e2a:	e7ee      	b.n	8003e0a <XcpCmdProgram+0x3e>
    XcpSetCtoError(XCP_ERR_GENERIC);
 8003e2c:	2031      	movs	r0, #49	; 0x31
 8003e2e:	f7ff fe85 	bl	8003b3c <XcpSetCtoError>
    return;
 8003e32:	e7ea      	b.n	8003e0a <XcpCmdProgram+0x3e>
 8003e34:	20000f8c 	.word	0x20000f8c

08003e38 <XcpCmdProgramClear>:
{
 8003e38:	b508      	push	{r3, lr}
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8003e3a:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <XcpCmdProgramClear+0x38>)
 8003e3c:	785b      	ldrb	r3, [r3, #1]
 8003e3e:	f013 0f10 	tst.w	r3, #16
 8003e42:	d10c      	bne.n	8003e5e <XcpCmdProgramClear+0x26>
  if (NvmErase((blt_addr)xcpInfo.mta, *(blt_int32u *)&data[4]) == BLT_FALSE)
 8003e44:	6841      	ldr	r1, [r0, #4]
 8003e46:	4b0a      	ldr	r3, [pc, #40]	; (8003e70 <XcpCmdProgramClear+0x38>)
 8003e48:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003e4a:	f7ff f8ff 	bl	800304c <NvmErase>
 8003e4e:	b150      	cbz	r0, 8003e66 <XcpCmdProgramClear+0x2e>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8003e50:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <XcpCmdProgramClear+0x38>)
 8003e52:	22ff      	movs	r2, #255	; 0xff
 8003e54:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 8003e56:	2201      	movs	r2, #1
 8003e58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8003e5c:	e002      	b.n	8003e64 <XcpCmdProgramClear+0x2c>
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8003e5e:	2025      	movs	r0, #37	; 0x25
 8003e60:	f7ff fe6c 	bl	8003b3c <XcpSetCtoError>
} /*** end of XcpCmdProgramClear ***/
 8003e64:	bd08      	pop	{r3, pc}
    XcpSetCtoError(XCP_ERR_GENERIC);
 8003e66:	2031      	movs	r0, #49	; 0x31
 8003e68:	f7ff fe68 	bl	8003b3c <XcpSetCtoError>
    return;
 8003e6c:	e7fa      	b.n	8003e64 <XcpCmdProgramClear+0x2c>
 8003e6e:	bf00      	nop
 8003e70:	20000f8c 	.word	0x20000f8c

08003e74 <XcpCmdProgramReset>:
{
 8003e74:	b508      	push	{r3, lr}
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8003e76:	4b09      	ldr	r3, [pc, #36]	; (8003e9c <XcpCmdProgramReset+0x28>)
 8003e78:	785b      	ldrb	r3, [r3, #1]
 8003e7a:	f013 0f10 	tst.w	r3, #16
 8003e7e:	d108      	bne.n	8003e92 <XcpCmdProgramReset+0x1e>
  CpuStartUserProgram();
 8003e80:	f7fe fed6 	bl	8002c30 <CpuStartUserProgram>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <XcpCmdProgramReset+0x28>)
 8003e86:	22ff      	movs	r2, #255	; 0xff
 8003e88:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramReset ***/
 8003e90:	bd08      	pop	{r3, pc}
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8003e92:	2025      	movs	r0, #37	; 0x25
 8003e94:	f7ff fe52 	bl	8003b3c <XcpSetCtoError>
    return;
 8003e98:	e7fa      	b.n	8003e90 <XcpCmdProgramReset+0x1c>
 8003e9a:	bf00      	nop
 8003e9c:	20000f8c 	.word	0x20000f8c

08003ea0 <XcpGetSeed>:
{
 8003ea0:	b508      	push	{r3, lr}
  return XcpGetSeedHook(resource, seed);
 8003ea2:	f7fc fbc5 	bl	8000630 <XcpGetSeedHook>
} /*** end of XcpGetSeed ***/
 8003ea6:	bd08      	pop	{r3, pc}

08003ea8 <XcpCmdGetSeed>:
{
 8003ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8003eaa:	4b3f      	ldr	r3, [pc, #252]	; (8003fa8 <XcpCmdGetSeed+0x100>)
 8003eac:	22ff      	movs	r2, #255	; 0xff
 8003eae:	70da      	strb	r2, [r3, #3]
  if (data[1] == 0)
 8003eb0:	7842      	ldrb	r2, [r0, #1]
 8003eb2:	bb1a      	cbnz	r2, 8003efc <XcpCmdGetSeed+0x54>
    if (((data[2] & XCP_RES_CALPAG) > 0) && ((data[2] & ~XCP_RES_CALPAG) == 0))
 8003eb4:	7883      	ldrb	r3, [r0, #2]
 8003eb6:	f013 0f01 	tst.w	r3, #1
 8003eba:	d003      	beq.n	8003ec4 <XcpCmdGetSeed+0x1c>
 8003ebc:	f033 0101 	bics.w	r1, r3, #1
 8003ec0:	d100      	bne.n	8003ec4 <XcpCmdGetSeed+0x1c>
      resourceOK = 1;
 8003ec2:	2201      	movs	r2, #1
    if (((data[2] & XCP_RES_PGM) > 0) && ((data[2] & ~XCP_RES_PGM) == 0))
 8003ec4:	f013 0f10 	tst.w	r3, #16
 8003ec8:	d003      	beq.n	8003ed2 <XcpCmdGetSeed+0x2a>
 8003eca:	f033 0110 	bics.w	r1, r3, #16
 8003ece:	d100      	bne.n	8003ed2 <XcpCmdGetSeed+0x2a>
      resourceOK = 1;
 8003ed0:	2201      	movs	r2, #1
    if (((data[2] & XCP_RES_DAQ) > 0) && ((data[2] & ~XCP_RES_DAQ) == 0))
 8003ed2:	f013 0f04 	tst.w	r3, #4
 8003ed6:	d003      	beq.n	8003ee0 <XcpCmdGetSeed+0x38>
 8003ed8:	f033 0104 	bics.w	r1, r3, #4
 8003edc:	d100      	bne.n	8003ee0 <XcpCmdGetSeed+0x38>
      resourceOK = 1;
 8003ede:	2201      	movs	r2, #1
    if (((data[2] & XCP_RES_STIM) > 0) && ((data[2] & ~XCP_RES_STIM) == 0))
 8003ee0:	f013 0f08 	tst.w	r3, #8
 8003ee4:	d002      	beq.n	8003eec <XcpCmdGetSeed+0x44>
 8003ee6:	f033 0108 	bics.w	r1, r3, #8
 8003eea:	d001      	beq.n	8003ef0 <XcpCmdGetSeed+0x48>
    if (resourceOK == 0)
 8003eec:	2a00      	cmp	r2, #0
 8003eee:	d02d      	beq.n	8003f4c <XcpCmdGetSeed+0xa4>
    if ((xcpInfo.protection & data[2]) == 0)
 8003ef0:	4a2d      	ldr	r2, [pc, #180]	; (8003fa8 <XcpCmdGetSeed+0x100>)
 8003ef2:	7852      	ldrb	r2, [r2, #1]
 8003ef4:	4213      	tst	r3, r2
 8003ef6:	d02d      	beq.n	8003f54 <XcpCmdGetSeed+0xac>
    xcpInfo.s_n_k_resource = data[2];
 8003ef8:	4a2b      	ldr	r2, [pc, #172]	; (8003fa8 <XcpCmdGetSeed+0x100>)
 8003efa:	7093      	strb	r3, [r2, #2]
  if (data[1] == 0)
 8003efc:	7843      	ldrb	r3, [r0, #1]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d02f      	beq.n	8003f62 <XcpCmdGetSeed+0xba>
    if (sequenceInProgress == BLT_FALSE)
 8003f02:	4b2a      	ldr	r3, [pc, #168]	; (8003fac <XcpCmdGetSeed+0x104>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d041      	beq.n	8003f8e <XcpCmdGetSeed+0xe6>
  seedCurrentLen = seedRemainderLen;
 8003f0a:	4b29      	ldr	r3, [pc, #164]	; (8003fb0 <XcpCmdGetSeed+0x108>)
 8003f0c:	781c      	ldrb	r4, [r3, #0]
  if (seedCurrentLen > (XCP_CTO_PACKET_LEN-2))
 8003f0e:	f7ff fa39 	bl	8003384 <ComGetActiveInterfaceMaxRxLen>
 8003f12:	3802      	subs	r0, #2
 8003f14:	4284      	cmp	r4, r0
 8003f16:	dc41      	bgt.n	8003f9c <XcpCmdGetSeed+0xf4>
  CpuMemCopy((blt_addr)(&xcpInfo.ctoData[2]), (blt_addr)seedCurrentPtr, seedCurrentLen);
 8003f18:	b2a5      	uxth	r5, r4
 8003f1a:	4e26      	ldr	r6, [pc, #152]	; (8003fb4 <XcpCmdGetSeed+0x10c>)
 8003f1c:	4f22      	ldr	r7, [pc, #136]	; (8003fa8 <XcpCmdGetSeed+0x100>)
 8003f1e:	462a      	mov	r2, r5
 8003f20:	6831      	ldr	r1, [r6, #0]
 8003f22:	1d78      	adds	r0, r7, #5
 8003f24:	f7fe fea4 	bl	8002c70 <CpuMemCopy>
  xcpInfo.ctoData[1] = seedRemainderLen;
 8003f28:	4a21      	ldr	r2, [pc, #132]	; (8003fb0 <XcpCmdGetSeed+0x108>)
 8003f2a:	7813      	ldrb	r3, [r2, #0]
 8003f2c:	713b      	strb	r3, [r7, #4]
  seedRemainderLen -= seedCurrentLen;
 8003f2e:	1b1b      	subs	r3, r3, r4
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	7013      	strb	r3, [r2, #0]
  seedCurrentPtr += seedCurrentLen;
 8003f34:	6830      	ldr	r0, [r6, #0]
 8003f36:	4404      	add	r4, r0
 8003f38:	6034      	str	r4, [r6, #0]
  if (seedRemainderLen == 0)
 8003f3a:	b913      	cbnz	r3, 8003f42 <XcpCmdGetSeed+0x9a>
    sequenceInProgress = BLT_FALSE;
 8003f3c:	4b1b      	ldr	r3, [pc, #108]	; (8003fac <XcpCmdGetSeed+0x104>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	701a      	strb	r2, [r3, #0]
  xcpInfo.ctoLen = seedCurrentLen + 2;
 8003f42:	3502      	adds	r5, #2
 8003f44:	4b18      	ldr	r3, [pc, #96]	; (8003fa8 <XcpCmdGetSeed+0x100>)
 8003f46:	f8a3 5044 	strh.w	r5, [r3, #68]	; 0x44
} /*** end of XcpCmdGetSeed ***/
 8003f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8003f4c:	2022      	movs	r0, #34	; 0x22
 8003f4e:	f7ff fdf5 	bl	8003b3c <XcpSetCtoError>
      return;
 8003f52:	e7fa      	b.n	8003f4a <XcpCmdGetSeed+0xa2>
      xcpInfo.ctoData[1] = 0;
 8003f54:	4b14      	ldr	r3, [pc, #80]	; (8003fa8 <XcpCmdGetSeed+0x100>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	711a      	strb	r2, [r3, #4]
      xcpInfo.ctoLen = 2;
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      return;
 8003f60:	e7f3      	b.n	8003f4a <XcpCmdGetSeed+0xa2>
    sequenceInProgress = BLT_TRUE;
 8003f62:	4b12      	ldr	r3, [pc, #72]	; (8003fac <XcpCmdGetSeed+0x104>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	701a      	strb	r2, [r3, #0]
    seedRemainderLen = XcpGetSeed(xcpInfo.s_n_k_resource, seedBuffer);
 8003f68:	4913      	ldr	r1, [pc, #76]	; (8003fb8 <XcpCmdGetSeed+0x110>)
 8003f6a:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <XcpCmdGetSeed+0x100>)
 8003f6c:	7898      	ldrb	r0, [r3, #2]
 8003f6e:	f7ff ff97 	bl	8003ea0 <XcpGetSeed>
 8003f72:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <XcpCmdGetSeed+0x108>)
 8003f74:	7018      	strb	r0, [r3, #0]
    ASSERT_RT(seedRemainderLen <= XCP_SEED_MAX_LEN);
 8003f76:	2840      	cmp	r0, #64	; 0x40
 8003f78:	d803      	bhi.n	8003f82 <XcpCmdGetSeed+0xda>
    seedCurrentPtr = &seedBuffer[0];
 8003f7a:	4b0e      	ldr	r3, [pc, #56]	; (8003fb4 <XcpCmdGetSeed+0x10c>)
 8003f7c:	4a0e      	ldr	r2, [pc, #56]	; (8003fb8 <XcpCmdGetSeed+0x110>)
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	e7c3      	b.n	8003f0a <XcpCmdGetSeed+0x62>
    ASSERT_RT(seedRemainderLen <= XCP_SEED_MAX_LEN);
 8003f82:	f44f 7179 	mov.w	r1, #996	; 0x3e4
 8003f86:	480d      	ldr	r0, [pc, #52]	; (8003fbc <XcpCmdGetSeed+0x114>)
 8003f88:	f7ff f962 	bl	8003250 <AssertFailure>
 8003f8c:	e7f5      	b.n	8003f7a <XcpCmdGetSeed+0xd2>
      XcpSetCtoError(XCP_ERR_SEQUENCE);
 8003f8e:	2029      	movs	r0, #41	; 0x29
 8003f90:	f7ff fdd4 	bl	8003b3c <XcpSetCtoError>
      xcpInfo.s_n_k_resource = 0;
 8003f94:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <XcpCmdGetSeed+0x100>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	709a      	strb	r2, [r3, #2]
      return;
 8003f9a:	e7d6      	b.n	8003f4a <XcpCmdGetSeed+0xa2>
    seedCurrentLen = XCP_CTO_PACKET_LEN-2;
 8003f9c:	f7ff f9f2 	bl	8003384 <ComGetActiveInterfaceMaxRxLen>
 8003fa0:	b2c4      	uxtb	r4, r0
 8003fa2:	3c02      	subs	r4, #2
 8003fa4:	b2e4      	uxtb	r4, r4
 8003fa6:	e7b7      	b.n	8003f18 <XcpCmdGetSeed+0x70>
 8003fa8:	20000f8c 	.word	0x20000f8c
 8003fac:	20000f89 	.word	0x20000f89
 8003fb0:	20000f88 	.word	0x20000f88
 8003fb4:	20000f84 	.word	0x20000f84
 8003fb8:	20000f44 	.word	0x20000f44
 8003fbc:	080063b4 	.word	0x080063b4

08003fc0 <XcpVerifyKey>:
{
 8003fc0:	b508      	push	{r3, lr}
  return XcpVerifyKeyHook(resource, key, len);
 8003fc2:	f7fc fb3c 	bl	800063e <XcpVerifyKeyHook>
} /*** end of XcpVerifyKey ***/
 8003fc6:	bd08      	pop	{r3, pc}

08003fc8 <XcpCmdUnlock>:
{
 8003fc8:	b570      	push	{r4, r5, r6, lr}
  if (data[1] > XCP_KEY_MAX_LEN)
 8003fca:	7844      	ldrb	r4, [r0, #1]
 8003fcc:	2c40      	cmp	r4, #64	; 0x40
 8003fce:	d82e      	bhi.n	800402e <XcpCmdUnlock+0x66>
 8003fd0:	4606      	mov	r6, r0
  if (data[1] >= keyPreviousRemainder)
 8003fd2:	4b2c      	ldr	r3, [pc, #176]	; (8004084 <XcpCmdUnlock+0xbc>)
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	429c      	cmp	r4, r3
 8003fd8:	d307      	bcc.n	8003fea <XcpCmdUnlock+0x22>
    keyTotalLen = data[1];
 8003fda:	4b2b      	ldr	r3, [pc, #172]	; (8004088 <XcpCmdUnlock+0xc0>)
 8003fdc:	701c      	strb	r4, [r3, #0]
    keyCurrentPtr = &keyBuffer[0];
 8003fde:	4b2b      	ldr	r3, [pc, #172]	; (800408c <XcpCmdUnlock+0xc4>)
 8003fe0:	4a2b      	ldr	r2, [pc, #172]	; (8004090 <XcpCmdUnlock+0xc8>)
 8003fe2:	601a      	str	r2, [r3, #0]
    keyReceivedLen = 0;
 8003fe4:	4b2b      	ldr	r3, [pc, #172]	; (8004094 <XcpCmdUnlock+0xcc>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	701a      	strb	r2, [r3, #0]
  keyPreviousRemainder = data[1];
 8003fea:	4b26      	ldr	r3, [pc, #152]	; (8004084 <XcpCmdUnlock+0xbc>)
 8003fec:	701c      	strb	r4, [r3, #0]
  if (keyCurrentLen > (XCP_CTO_PACKET_LEN-2))
 8003fee:	f7ff f9c9 	bl	8003384 <ComGetActiveInterfaceMaxRxLen>
 8003ff2:	3802      	subs	r0, #2
 8003ff4:	4284      	cmp	r4, r0
 8003ff6:	dc23      	bgt.n	8004040 <XcpCmdUnlock+0x78>
  CpuMemCopy((blt_addr)keyCurrentPtr, (blt_addr)(&data[2]), keyCurrentLen);
 8003ff8:	4d24      	ldr	r5, [pc, #144]	; (800408c <XcpCmdUnlock+0xc4>)
 8003ffa:	4622      	mov	r2, r4
 8003ffc:	1cb1      	adds	r1, r6, #2
 8003ffe:	6828      	ldr	r0, [r5, #0]
 8004000:	f7fe fe36 	bl	8002c70 <CpuMemCopy>
  keyCurrentPtr += keyCurrentLen;
 8004004:	682b      	ldr	r3, [r5, #0]
 8004006:	4423      	add	r3, r4
 8004008:	602b      	str	r3, [r5, #0]
  keyReceivedLen += keyCurrentLen;
 800400a:	4b22      	ldr	r3, [pc, #136]	; (8004094 <XcpCmdUnlock+0xcc>)
 800400c:	7818      	ldrb	r0, [r3, #0]
 800400e:	4404      	add	r4, r0
 8004010:	b2e4      	uxtb	r4, r4
 8004012:	701c      	strb	r4, [r3, #0]
  if (keyReceivedLen >= keyTotalLen)
 8004014:	4b1c      	ldr	r3, [pc, #112]	; (8004088 <XcpCmdUnlock+0xc0>)
 8004016:	781a      	ldrb	r2, [r3, #0]
 8004018:	4294      	cmp	r4, r2
 800401a:	d217      	bcs.n	800404c <XcpCmdUnlock+0x84>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800401c:	4b1e      	ldr	r3, [pc, #120]	; (8004098 <XcpCmdUnlock+0xd0>)
 800401e:	22ff      	movs	r2, #255	; 0xff
 8004020:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[1] = xcpInfo.protection;
 8004022:	785a      	ldrb	r2, [r3, #1]
 8004024:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoLen = 2;
 8004026:	2202      	movs	r2, #2
 8004028:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdUnlock ***/
 800402c:	bd70      	pop	{r4, r5, r6, pc}
    keyPreviousRemainder = 0;
 800402e:	2400      	movs	r4, #0
 8004030:	4b14      	ldr	r3, [pc, #80]	; (8004084 <XcpCmdUnlock+0xbc>)
 8004032:	701c      	strb	r4, [r3, #0]
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8004034:	2022      	movs	r0, #34	; 0x22
 8004036:	f7ff fd81 	bl	8003b3c <XcpSetCtoError>
    xcpInfo.s_n_k_resource = 0;
 800403a:	4b17      	ldr	r3, [pc, #92]	; (8004098 <XcpCmdUnlock+0xd0>)
 800403c:	709c      	strb	r4, [r3, #2]
    return;
 800403e:	e7f5      	b.n	800402c <XcpCmdUnlock+0x64>
    keyCurrentLen = XCP_CTO_PACKET_LEN-2;
 8004040:	f7ff f9a0 	bl	8003384 <ComGetActiveInterfaceMaxRxLen>
 8004044:	b2c4      	uxtb	r4, r0
 8004046:	3c02      	subs	r4, #2
 8004048:	b2e4      	uxtb	r4, r4
 800404a:	e7d5      	b.n	8003ff8 <XcpCmdUnlock+0x30>
    keyPreviousRemainder = 0;
 800404c:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <XcpCmdUnlock+0xbc>)
 800404e:	2100      	movs	r1, #0
 8004050:	7019      	strb	r1, [r3, #0]
    if (XcpVerifyKey(xcpInfo.s_n_k_resource, keyBuffer, keyTotalLen) == 0)
 8004052:	490f      	ldr	r1, [pc, #60]	; (8004090 <XcpCmdUnlock+0xc8>)
 8004054:	4b10      	ldr	r3, [pc, #64]	; (8004098 <XcpCmdUnlock+0xd0>)
 8004056:	7898      	ldrb	r0, [r3, #2]
 8004058:	f7ff ffb2 	bl	8003fc0 <XcpVerifyKey>
 800405c:	b140      	cbz	r0, 8004070 <XcpCmdUnlock+0xa8>
    xcpInfo.protection &= ~xcpInfo.s_n_k_resource;
 800405e:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <XcpCmdUnlock+0xd0>)
 8004060:	7899      	ldrb	r1, [r3, #2]
 8004062:	785a      	ldrb	r2, [r3, #1]
 8004064:	ea22 0201 	bic.w	r2, r2, r1
 8004068:	705a      	strb	r2, [r3, #1]
    xcpInfo.s_n_k_resource = 0;
 800406a:	2200      	movs	r2, #0
 800406c:	709a      	strb	r2, [r3, #2]
 800406e:	e7d5      	b.n	800401c <XcpCmdUnlock+0x54>
      XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8004070:	2025      	movs	r0, #37	; 0x25
 8004072:	f7ff fd63 	bl	8003b3c <XcpSetCtoError>
      xcpInfo.connected = 0;
 8004076:	4b08      	ldr	r3, [pc, #32]	; (8004098 <XcpCmdUnlock+0xd0>)
 8004078:	2200      	movs	r2, #0
 800407a:	701a      	strb	r2, [r3, #0]
      xcpInfo.s_n_k_resource = 0;
 800407c:	709a      	strb	r2, [r3, #2]
      XcpProtectResources();
 800407e:	f7ff fd57 	bl	8003b30 <XcpProtectResources>
      return;
 8004082:	e7d3      	b.n	800402c <XcpCmdUnlock+0x64>
 8004084:	20000f40 	.word	0x20000f40
 8004088:	20000f42 	.word	0x20000f42
 800408c:	20000f3c 	.word	0x20000f3c
 8004090:	20000efc 	.word	0x20000efc
 8004094:	20000f41 	.word	0x20000f41
 8004098:	20000f8c 	.word	0x20000f8c

0800409c <XcpTransmitPacket>:
{
 800409c:	b508      	push	{r3, lr}
  ComTransmitPacket(data, len);
 800409e:	b289      	uxth	r1, r1
 80040a0:	f7ff f962 	bl	8003368 <ComTransmitPacket>
} /*** end of XcpTransmitPacket ***/
 80040a4:	bd08      	pop	{r3, pc}
	...

080040a8 <XcpInit>:
  xcpInfo.connected = 0;
 80040a8:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <XcpInit+0x18>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	701a      	strb	r2, [r3, #0]
  xcpInfo.mta = 0;
 80040ae:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoPending = 0;
 80040b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  xcpInfo.ctoLen = 0;
 80040b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  xcpInfo.s_n_k_resource = 0;
 80040b8:	709a      	strb	r2, [r3, #2]
  xcpInfo.protection = 0;
 80040ba:	705a      	strb	r2, [r3, #1]
} /*** end of XcpInit ***/
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	20000f8c 	.word	0x20000f8c

080040c4 <XcpIsConnected>:
  if (xcpInfo.connected == 0)
 80040c4:	4b03      	ldr	r3, [pc, #12]	; (80040d4 <XcpIsConnected+0x10>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	b10b      	cbz	r3, 80040ce <XcpIsConnected+0xa>
  return BLT_TRUE;
 80040ca:	2001      	movs	r0, #1
} /*** end of XcpIsConnected ***/
 80040cc:	4770      	bx	lr
    return BLT_FALSE;
 80040ce:	2000      	movs	r0, #0
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	20000f8c 	.word	0x20000f8c

080040d8 <XcpPacketTransmitted>:
  xcpInfo.ctoPending = 0;
 80040d8:	4b02      	ldr	r3, [pc, #8]	; (80040e4 <XcpPacketTransmitted+0xc>)
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
} /*** end of XcpPacketTransmitted ***/
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000f8c 	.word	0x20000f8c

080040e8 <XcpPacketReceived>:
{
 80040e8:	b508      	push	{r3, lr}
  if (data[0] == XCP_CMD_CONNECT)
 80040ea:	7803      	ldrb	r3, [r0, #0]
 80040ec:	2bff      	cmp	r3, #255	; 0xff
 80040ee:	d004      	beq.n	80040fa <XcpPacketReceived+0x12>
  else if (xcpInfo.connected == 1)
 80040f0:	4a38      	ldr	r2, [pc, #224]	; (80041d4 <XcpPacketReceived+0xec>)
 80040f2:	7812      	ldrb	r2, [r2, #0]
 80040f4:	2a01      	cmp	r2, #1
 80040f6:	d014      	beq.n	8004122 <XcpPacketReceived+0x3a>
} /*** end of XcpPacketReceived ***/
 80040f8:	bd08      	pop	{r3, pc}
    XcpCmdConnect(data);
 80040fa:	f7ff fd99 	bl	8003c30 <XcpCmdConnect>
  if (xcpInfo.ctoPending == 1)
 80040fe:	4b35      	ldr	r3, [pc, #212]	; (80041d4 <XcpPacketReceived+0xec>)
 8004100:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004104:	2b01      	cmp	r3, #1
 8004106:	d060      	beq.n	80041ca <XcpPacketReceived+0xe2>
  if (xcpInfo.ctoLen > 0)
 8004108:	4b32      	ldr	r3, [pc, #200]	; (80041d4 <XcpPacketReceived+0xec>)
 800410a:	f9b3 1044 	ldrsh.w	r1, [r3, #68]	; 0x44
 800410e:	2900      	cmp	r1, #0
 8004110:	ddf2      	ble.n	80040f8 <XcpPacketReceived+0x10>
    xcpInfo.ctoPending = 1;
 8004112:	4618      	mov	r0, r3
 8004114:	2301      	movs	r3, #1
 8004116:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
    XcpTransmitPacket(xcpInfo.ctoData, xcpInfo.ctoLen);
 800411a:	3003      	adds	r0, #3
 800411c:	f7ff ffbe 	bl	800409c <XcpTransmitPacket>
 8004120:	e7ea      	b.n	80040f8 <XcpPacketReceived+0x10>
    switch (data[0])
 8004122:	3bc9      	subs	r3, #201	; 0xc9
 8004124:	2b35      	cmp	r3, #53	; 0x35
 8004126:	d84c      	bhi.n	80041c2 <XcpPacketReceived+0xda>
 8004128:	e8df f003 	tbb	[pc, r3]
 800412c:	424b4b33 	.word	0x424b4b33
 8004130:	363f4b4b 	.word	0x363f4b4b
 8004134:	4b4b393c 	.word	0x4b4b393c
 8004138:	4b4b4b4b 	.word	0x4b4b4b4b
 800413c:	4b4b4b4b 	.word	0x4b4b4b4b
 8004140:	4b4b4b4b 	.word	0x4b4b4b4b
 8004144:	4b4b4b4b 	.word	0x4b4b4b4b
 8004148:	4b4b4b4b 	.word	0x4b4b4b4b
 800414c:	4b4b4b4b 	.word	0x4b4b4b4b
 8004150:	4b4b4b4b 	.word	0x4b4b4b4b
 8004154:	1e244b4b 	.word	0x1e244b4b
 8004158:	4548211b 	.word	0x4548211b
 800415c:	2a4b274b 	.word	0x2a4b274b
 8004160:	302d      	.short	0x302d
        XcpCmdUpload(data);
 8004162:	f7ff fd8d 	bl	8003c80 <XcpCmdUpload>
        break;
 8004166:	e7ca      	b.n	80040fe <XcpPacketReceived+0x16>
        XcpCmdShortUpload(data);
 8004168:	f7ff fdb6 	bl	8003cd8 <XcpCmdShortUpload>
        break;
 800416c:	e7c7      	b.n	80040fe <XcpPacketReceived+0x16>
        XcpCmdSetMta(data);
 800416e:	f7ff fd27 	bl	8003bc0 <XcpCmdSetMta>
        break;
 8004172:	e7c4      	b.n	80040fe <XcpPacketReceived+0x16>
        XcpCmdBuildCheckSum(data);
 8004174:	f7ff fdee 	bl	8003d54 <XcpCmdBuildCheckSum>
        break;
 8004178:	e7c1      	b.n	80040fe <XcpPacketReceived+0x16>
        XcpCmdGetId(data);
 800417a:	f7ff fd0d 	bl	8003b98 <XcpCmdGetId>
        break;
 800417e:	e7be      	b.n	80040fe <XcpPacketReceived+0x16>
        XcpCmdSynch(data);
 8004180:	f7ff fd04 	bl	8003b8c <XcpCmdSynch>
        break;
 8004184:	e7bb      	b.n	80040fe <XcpPacketReceived+0x16>
        XcpCmdGetStatus(data);
 8004186:	f7ff fcf1 	bl	8003b6c <XcpCmdGetStatus>
        break;
 800418a:	e7b8      	b.n	80040fe <XcpPacketReceived+0x16>
        XcpCmdDisconnect(data);
 800418c:	f7ff fce0 	bl	8003b50 <XcpCmdDisconnect>
        break;
 8004190:	e7b5      	b.n	80040fe <XcpPacketReceived+0x16>
        XcpCmdProgramMax(data);
 8004192:	f7ff fdf3 	bl	8003d7c <XcpCmdProgramMax>
        break;
 8004196:	e7b2      	b.n	80040fe <XcpPacketReceived+0x16>
        XcpCmdProgram(data);
 8004198:	f7ff fe18 	bl	8003dcc <XcpCmdProgram>
        break;
 800419c:	e7af      	b.n	80040fe <XcpPacketReceived+0x16>
        XcpCmdProgramStart(data);
 800419e:	f7ff fd2b 	bl	8003bf8 <XcpCmdProgramStart>
        break;
 80041a2:	e7ac      	b.n	80040fe <XcpPacketReceived+0x16>
        XcpCmdProgramClear(data);
 80041a4:	f7ff fe48 	bl	8003e38 <XcpCmdProgramClear>
        break;
 80041a8:	e7a9      	b.n	80040fe <XcpPacketReceived+0x16>
        XcpCmdProgramReset(data);
 80041aa:	f7ff fe63 	bl	8003e74 <XcpCmdProgramReset>
        break;
 80041ae:	e7a6      	b.n	80040fe <XcpPacketReceived+0x16>
        XcpCmdProgramPrepare(data);
 80041b0:	f7ff fd12 	bl	8003bd8 <XcpCmdProgramPrepare>
        break;
 80041b4:	e7a3      	b.n	80040fe <XcpPacketReceived+0x16>
        XcpCmdGetSeed(data);
 80041b6:	f7ff fe77 	bl	8003ea8 <XcpCmdGetSeed>
        break;
 80041ba:	e7a0      	b.n	80040fe <XcpPacketReceived+0x16>
        XcpCmdUnlock(data);
 80041bc:	f7ff ff04 	bl	8003fc8 <XcpCmdUnlock>
        break;
 80041c0:	e79d      	b.n	80040fe <XcpPacketReceived+0x16>
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 80041c2:	2020      	movs	r0, #32
 80041c4:	f7ff fcba 	bl	8003b3c <XcpSetCtoError>
        break;
 80041c8:	e799      	b.n	80040fe <XcpPacketReceived+0x16>
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 80041ca:	2010      	movs	r0, #16
 80041cc:	f7ff fcb6 	bl	8003b3c <XcpSetCtoError>
 80041d0:	e79a      	b.n	8004108 <XcpPacketReceived+0x20>
 80041d2:	bf00      	nop
 80041d4:	20000f8c 	.word	0x20000f8c

080041d8 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 80041d8:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 80041da:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80041dc:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80041e0:	4770      	bx	lr

080041e2 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 80041e2:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 80041e4:	7883      	ldrb	r3, [r0, #2]
 80041e6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 80041ea:	7843      	ldrb	r3, [r0, #1]
 80041ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80041f0:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80041f2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80041f6:	4770      	bx	lr

080041f8 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80041f8:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 80041fa:	0a09      	lsrs	r1, r1, #8
 80041fc:	7041      	strb	r1, [r0, #1]
}
 80041fe:	4770      	bx	lr

08004200 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8004200:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004202:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8004206:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8004208:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800420c:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 800420e:	0e09      	lsrs	r1, r1, #24
 8004210:	70c1      	strb	r1, [r0, #3]
}
 8004212:	4770      	bx	lr

08004214 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8004214:	4613      	mov	r3, r2
 8004216:	b12a      	cbz	r2, 8004224 <mem_cpy+0x10>
		do *d++ = *s++; while (--cnt);
 8004218:	780a      	ldrb	r2, [r1, #0]
 800421a:	7002      	strb	r2, [r0, #0]
 800421c:	3001      	adds	r0, #1
 800421e:	3101      	adds	r1, #1
 8004220:	3b01      	subs	r3, #1
 8004222:	d1f9      	bne.n	8004218 <mem_cpy+0x4>
	}
}
 8004224:	4770      	bx	lr

08004226 <mem_set>:
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
 8004226:	7001      	strb	r1, [r0, #0]
 8004228:	3001      	adds	r0, #1
 800422a:	3a01      	subs	r2, #1
 800422c:	d1fb      	bne.n	8004226 <mem_set>
}
 800422e:	4770      	bx	lr

08004230 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004230:	b430      	push	{r4, r5}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 8004232:	1c45      	adds	r5, r0, #1
 8004234:	7803      	ldrb	r3, [r0, #0]
 8004236:	7808      	ldrb	r0, [r1, #0]
 8004238:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
 800423a:	3a01      	subs	r2, #1
 800423c:	d004      	beq.n	8004248 <mem_cmp+0x18>
 800423e:	1c4c      	adds	r4, r1, #1
		r = *d++ - *s++;
 8004240:	4628      	mov	r0, r5
 8004242:	4621      	mov	r1, r4
	} while (--cnt && r == 0);
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f4      	beq.n	8004232 <mem_cmp+0x2>

	return r;
}
 8004248:	4618      	mov	r0, r3
 800424a:	bc30      	pop	{r4, r5}
 800424c:	4770      	bx	lr

0800424e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
	while (*str && *str != chr) str++;
 800424e:	e000      	b.n	8004252 <chk_chr+0x4>
 8004250:	3001      	adds	r0, #1
 8004252:	7803      	ldrb	r3, [r0, #0]
 8004254:	b10b      	cbz	r3, 800425a <chk_chr+0xc>
 8004256:	428b      	cmp	r3, r1
 8004258:	d1fa      	bne.n	8004250 <chk_chr+0x2>
	return *str;
}
 800425a:	4618      	mov	r0, r3
 800425c:	4770      	bx	lr

0800425e <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 800425e:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004260:	6943      	ldr	r3, [r0, #20]
 8004262:	3b02      	subs	r3, #2
 8004264:	428b      	cmp	r3, r1
 8004266:	d904      	bls.n	8004272 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8004268:	8943      	ldrh	r3, [r0, #10]
 800426a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800426c:	fb01 0003 	mla	r0, r1, r3, r0
 8004270:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004272:	2000      	movs	r0, #0
}
 8004274:	4770      	bx	lr

08004276 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004276:	b570      	push	{r4, r5, r6, lr}
 8004278:	4606      	mov	r6, r0
 800427a:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800427c:	f101 001a 	add.w	r0, r1, #26
 8004280:	f7ff ffaa 	bl	80041d8 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 8004284:	7833      	ldrb	r3, [r6, #0]
 8004286:	2b03      	cmp	r3, #3
 8004288:	d000      	beq.n	800428c <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 800428a:	bd70      	pop	{r4, r5, r6, pc}
 800428c:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800428e:	f105 0014 	add.w	r0, r5, #20
 8004292:	f7ff ffa1 	bl	80041d8 <ld_word>
 8004296:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 800429a:	e7f6      	b.n	800428a <ld_clust+0x14>

0800429c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800429c:	b570      	push	{r4, r5, r6, lr}
 800429e:	4606      	mov	r6, r0
 80042a0:	460c      	mov	r4, r1
 80042a2:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80042a4:	b291      	uxth	r1, r2
 80042a6:	f104 001a 	add.w	r0, r4, #26
 80042aa:	f7ff ffa5 	bl	80041f8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80042ae:	7833      	ldrb	r3, [r6, #0]
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d000      	beq.n	80042b6 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 80042b4:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80042b6:	0c29      	lsrs	r1, r5, #16
 80042b8:	f104 0014 	add.w	r0, r4, #20
 80042bc:	f7ff ff9c 	bl	80041f8 <st_word>
}
 80042c0:	e7f8      	b.n	80042b4 <st_clust+0x18>
	...

080042c4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80042c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042c8:	4607      	mov	r7, r0
 80042ca:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80042cc:	f101 001a 	add.w	r0, r1, #26
 80042d0:	f7ff ff82 	bl	80041d8 <ld_word>
 80042d4:	bb60      	cbnz	r0, 8004330 <pick_lfn+0x6c>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80042d6:	7835      	ldrb	r5, [r6, #0]
 80042d8:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 80042dc:	3d01      	subs	r5, #1
 80042de:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80042e2:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80042e6:	f04f 0801 	mov.w	r8, #1
 80042ea:	2400      	movs	r4, #0
 80042ec:	e004      	b.n	80042f8 <pick_lfn+0x34>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80042ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042f2:	4298      	cmp	r0, r3
 80042f4:	d121      	bne.n	800433a <pick_lfn+0x76>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80042f6:	3401      	adds	r4, #1
 80042f8:	2c0c      	cmp	r4, #12
 80042fa:	d80e      	bhi.n	800431a <pick_lfn+0x56>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80042fc:	4b12      	ldr	r3, [pc, #72]	; (8004348 <pick_lfn+0x84>)
 80042fe:	5d18      	ldrb	r0, [r3, r4]
 8004300:	4430      	add	r0, r6
 8004302:	f7ff ff69 	bl	80041d8 <ld_word>
		if (wc) {
 8004306:	f1b8 0f00 	cmp.w	r8, #0
 800430a:	d0f0      	beq.n	80042ee <pick_lfn+0x2a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800430c:	2dfe      	cmp	r5, #254	; 0xfe
 800430e:	d812      	bhi.n	8004336 <pick_lfn+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8004310:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 8004314:	4680      	mov	r8, r0
 8004316:	3501      	adds	r5, #1
 8004318:	e7ed      	b.n	80042f6 <pick_lfn+0x32>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800431a:	7833      	ldrb	r3, [r6, #0]
 800431c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004320:	d00d      	beq.n	800433e <pick_lfn+0x7a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8004322:	2dfe      	cmp	r5, #254	; 0xfe
 8004324:	d80d      	bhi.n	8004342 <pick_lfn+0x7e>
		lfnbuf[i] = 0;
 8004326:	2300      	movs	r3, #0
 8004328:	f827 3015 	strh.w	r3, [r7, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
 800432c:	2001      	movs	r0, #1
 800432e:	e000      	b.n	8004332 <pick_lfn+0x6e>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8004330:	2000      	movs	r0, #0
}
 8004332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8004336:	2000      	movs	r0, #0
 8004338:	e7fb      	b.n	8004332 <pick_lfn+0x6e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800433a:	2000      	movs	r0, #0
 800433c:	e7f9      	b.n	8004332 <pick_lfn+0x6e>
	return 1;		/* The part of LFN is valid */
 800433e:	2001      	movs	r0, #1
 8004340:	e7f7      	b.n	8004332 <pick_lfn+0x6e>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8004342:	2000      	movs	r0, #0
 8004344:	e7f5      	b.n	8004332 <pick_lfn+0x6e>
 8004346:	bf00      	nop
 8004348:	08006468 	.word	0x08006468

0800434c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800434c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004350:	4680      	mov	r8, r0
 8004352:	460f      	mov	r7, r1
 8004354:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8004356:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004358:	230f      	movs	r3, #15
 800435a:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 800435c:	2400      	movs	r4, #0
 800435e:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 8004360:	4621      	mov	r1, r4
 8004362:	f107 001a 	add.w	r0, r7, #26
 8004366:	f7ff ff47 	bl	80041f8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800436a:	f109 36ff 	add.w	r6, r9, #4294967295
 800436e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8004372:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 8004376:	4625      	mov	r5, r4
 8004378:	e002      	b.n	8004380 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 800437a:	3401      	adds	r4, #1
 800437c:	2c0c      	cmp	r4, #12
 800437e:	d811      	bhi.n	80043a4 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8004380:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004384:	429d      	cmp	r5, r3
 8004386:	d002      	beq.n	800438e <put_lfn+0x42>
 8004388:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 800438c:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800438e:	4b0c      	ldr	r3, [pc, #48]	; (80043c0 <put_lfn+0x74>)
 8004390:	5d18      	ldrb	r0, [r3, r4]
 8004392:	4629      	mov	r1, r5
 8004394:	4438      	add	r0, r7
 8004396:	f7ff ff2f 	bl	80041f8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800439a:	2d00      	cmp	r5, #0
 800439c:	d1ed      	bne.n	800437a <put_lfn+0x2e>
 800439e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80043a2:	e7ea      	b.n	800437a <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80043a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80043a8:	429d      	cmp	r5, r3
 80043aa:	d002      	beq.n	80043b2 <put_lfn+0x66>
 80043ac:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 80043b0:	b90b      	cbnz	r3, 80043b6 <put_lfn+0x6a>
 80043b2:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80043b6:	f887 9000 	strb.w	r9, [r7]
}
 80043ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043be:	bf00      	nop
 80043c0:	08006468 	.word	0x08006468

080043c4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80043c4:	b570      	push	{r4, r5, r6, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	4605      	mov	r5, r0
 80043ca:	4616      	mov	r6, r2
 80043cc:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80043ce:	220b      	movs	r2, #11
 80043d0:	f7ff ff20 	bl	8004214 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80043d4:	2c05      	cmp	r4, #5
 80043d6:	d811      	bhi.n	80043fc <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 80043d8:	2207      	movs	r2, #7
 80043da:	e01d      	b.n	8004418 <gen_numname+0x54>
 80043dc:	3201      	adds	r2, #1
 80043de:	2a0f      	cmp	r2, #15
 80043e0:	d80c      	bhi.n	80043fc <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 80043e2:	f003 0101 	and.w	r1, r3, #1
 80043e6:	eb01 0444 	add.w	r4, r1, r4, lsl #1
				wc >>= 1;
 80043ea:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 80043ec:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80043f0:	d0f4      	beq.n	80043dc <gen_numname+0x18>
 80043f2:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 80043f6:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 80043fa:	e7ef      	b.n	80043dc <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 80043fc:	8833      	ldrh	r3, [r6, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0ea      	beq.n	80043d8 <gen_numname+0x14>
			wc = *lfn++;
 8004402:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 8004404:	2200      	movs	r2, #0
 8004406:	e7ea      	b.n	80043de <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (seq % 16) + '0';
		if (c > '9') c += 7;
		ns[i--] = c;
 8004408:	1e53      	subs	r3, r2, #1
 800440a:	a802      	add	r0, sp, #8
 800440c:	4402      	add	r2, r0
 800440e:	f802 1c08 	strb.w	r1, [r2, #-8]
		seq /= 16;
	} while (seq);
 8004412:	0924      	lsrs	r4, r4, #4
 8004414:	d009      	beq.n	800442a <gen_numname+0x66>
		ns[i--] = c;
 8004416:	461a      	mov	r2, r3
		c = (seq % 16) + '0';
 8004418:	f004 030f 	and.w	r3, r4, #15
 800441c:	f103 0130 	add.w	r1, r3, #48	; 0x30
		if (c > '9') c += 7;
 8004420:	2939      	cmp	r1, #57	; 0x39
 8004422:	d9f1      	bls.n	8004408 <gen_numname+0x44>
 8004424:	f103 0137 	add.w	r1, r3, #55	; 0x37
 8004428:	e7ee      	b.n	8004408 <gen_numname+0x44>
	ns[i] = '~';
 800442a:	217e      	movs	r1, #126	; 0x7e
 800442c:	4602      	mov	r2, r0
 800442e:	441a      	add	r2, r3
 8004430:	f802 1c08 	strb.w	r1, [r2, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004434:	e000      	b.n	8004438 <gen_numname+0x74>
 8004436:	3401      	adds	r4, #1
 8004438:	429c      	cmp	r4, r3
 800443a:	d209      	bcs.n	8004450 <gen_numname+0x8c>
 800443c:	5d2a      	ldrb	r2, [r5, r4]
 800443e:	2a20      	cmp	r2, #32
 8004440:	d1f9      	bne.n	8004436 <gen_numname+0x72>
 8004442:	e005      	b.n	8004450 <gen_numname+0x8c>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004444:	2120      	movs	r1, #32
 8004446:	1c62      	adds	r2, r4, #1
 8004448:	5529      	strb	r1, [r5, r4]
	} while (j < 8);
 800444a:	2a07      	cmp	r2, #7
 800444c:	d808      	bhi.n	8004460 <gen_numname+0x9c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800444e:	4614      	mov	r4, r2
 8004450:	2b07      	cmp	r3, #7
 8004452:	d8f7      	bhi.n	8004444 <gen_numname+0x80>
 8004454:	aa02      	add	r2, sp, #8
 8004456:	441a      	add	r2, r3
 8004458:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 800445c:	3301      	adds	r3, #1
 800445e:	e7f2      	b.n	8004446 <gen_numname+0x82>
}
 8004460:	b002      	add	sp, #8
 8004462:	bd70      	pop	{r4, r5, r6, pc}

08004464 <sum_sfn>:
#if _USE_LFN != 0
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004464:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 8004466:	220b      	movs	r2, #11
	BYTE sum = 0;
 8004468:	2000      	movs	r0, #0

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800446a:	01c3      	lsls	r3, r0, #7
 800446c:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8004470:	7808      	ldrb	r0, [r1, #0]
 8004472:	fa50 f383 	uxtab	r3, r0, r3
 8004476:	b2d8      	uxtb	r0, r3
 8004478:	3101      	adds	r1, #1
 800447a:	3a01      	subs	r2, #1
 800447c:	d1f5      	bne.n	800446a <sum_sfn+0x6>
	return sum;
}
 800447e:	4770      	bx	lr

08004480 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004480:	6801      	ldr	r1, [r0, #0]
 8004482:	b109      	cbz	r1, 8004488 <get_ldnumber+0x8>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004484:	460a      	mov	r2, r1
 8004486:	e003      	b.n	8004490 <get_ldnumber+0x10>
	int vol = -1;
 8004488:	f04f 33ff 	mov.w	r3, #4294967295
 800448c:	e008      	b.n	80044a0 <get_ldnumber+0x20>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800448e:	3201      	adds	r2, #1
 8004490:	7813      	ldrb	r3, [r2, #0]
 8004492:	2b1f      	cmp	r3, #31
 8004494:	d901      	bls.n	800449a <get_ldnumber+0x1a>
 8004496:	2b3a      	cmp	r3, #58	; 0x3a
 8004498:	d1f9      	bne.n	800448e <get_ldnumber+0xe>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800449a:	2b3a      	cmp	r3, #58	; 0x3a
 800449c:	d002      	beq.n	80044a4 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800449e:	2300      	movs	r3, #0
#endif
	}
	return vol;
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	4770      	bx	lr
{
 80044a4:	b410      	push	{r4}
			i = *tp++ - '0'; 
 80044a6:	1c4c      	adds	r4, r1, #1
 80044a8:	780b      	ldrb	r3, [r1, #0]
 80044aa:	3b30      	subs	r3, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80044ac:	2b09      	cmp	r3, #9
 80044ae:	d808      	bhi.n	80044c2 <get_ldnumber+0x42>
 80044b0:	42a2      	cmp	r2, r4
 80044b2:	d109      	bne.n	80044c8 <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80044b4:	b95b      	cbnz	r3, 80044ce <get_ldnumber+0x4e>
					*path = ++tt;
 80044b6:	3201      	adds	r2, #1
 80044b8:	6002      	str	r2, [r0, #0]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044c0:	4770      	bx	lr
	int vol = -1;
 80044c2:	f04f 33ff 	mov.w	r3, #4294967295
 80044c6:	e7f8      	b.n	80044ba <get_ldnumber+0x3a>
 80044c8:	f04f 33ff 	mov.w	r3, #4294967295
 80044cc:	e7f5      	b.n	80044ba <get_ldnumber+0x3a>
 80044ce:	f04f 33ff 	mov.w	r3, #4294967295
 80044d2:	e7f2      	b.n	80044ba <get_ldnumber+0x3a>

080044d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	void* dfp,		/* Pointer to the FIL/DIR object to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	460d      	mov	r5, r1
	_FDID *obj = (_FDID*)dfp;	/* Assuming .obj in the FIL/DIR is the first member */
	FRESULT res;


	if (!dfp || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 80044d8:	b140      	cbz	r0, 80044ec <validate+0x18>
 80044da:	4604      	mov	r4, r0
 80044dc:	6803      	ldr	r3, [r0, #0]
 80044de:	b12b      	cbz	r3, 80044ec <validate+0x18>
 80044e0:	781a      	ldrb	r2, [r3, #0]
 80044e2:	b11a      	cbz	r2, 80044ec <validate+0x18>
 80044e4:	88d9      	ldrh	r1, [r3, #6]
 80044e6:	8882      	ldrh	r2, [r0, #4]
 80044e8:	4291      	cmp	r1, r2
 80044ea:	d003      	beq.n	80044f4 <validate+0x20>
		*fs = 0;				/* The object is invalid */
 80044ec:	2300      	movs	r3, #0
 80044ee:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;
 80044f0:	2009      	movs	r0, #9
		*fs = obj->fs;			/* Owner file sytem object */
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;
	}
	return res;
}
 80044f2:	bd38      	pop	{r3, r4, r5, pc}
	if (!dfp || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 80044f4:	7858      	ldrb	r0, [r3, #1]
 80044f6:	f7fe fb07 	bl	8002b08 <disk_status>
 80044fa:	f010 0f01 	tst.w	r0, #1
 80044fe:	d1f5      	bne.n	80044ec <validate+0x18>
		*fs = obj->fs;			/* Owner file sytem object */
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	602b      	str	r3, [r5, #0]
		res = FR_OK;
 8004504:	2000      	movs	r0, #0
 8004506:	e7f4      	b.n	80044f2 <validate+0x1e>

08004508 <sync_window>:
{
 8004508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800450a:	78c3      	ldrb	r3, [r0, #3]
 800450c:	b90b      	cbnz	r3, 8004512 <sync_window+0xa>
	FRESULT res = FR_OK;
 800450e:	2000      	movs	r0, #0
}
 8004510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004512:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8004514:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004516:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800451a:	2301      	movs	r3, #1
 800451c:	462a      	mov	r2, r5
 800451e:	4639      	mov	r1, r7
 8004520:	7840      	ldrb	r0, [r0, #1]
 8004522:	f7fe fafb 	bl	8002b1c <disk_write>
 8004526:	b9a8      	cbnz	r0, 8004554 <sync_window+0x4c>
			fs->wflag = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800452c:	6a23      	ldr	r3, [r4, #32]
 800452e:	1aeb      	subs	r3, r5, r3
 8004530:	69a2      	ldr	r2, [r4, #24]
 8004532:	4293      	cmp	r3, r2
 8004534:	d210      	bcs.n	8004558 <sync_window+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004536:	78a6      	ldrb	r6, [r4, #2]
 8004538:	2e01      	cmp	r6, #1
 800453a:	d909      	bls.n	8004550 <sync_window+0x48>
					wsect += fs->fsize;
 800453c:	69a3      	ldr	r3, [r4, #24]
 800453e:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8004540:	2301      	movs	r3, #1
 8004542:	462a      	mov	r2, r5
 8004544:	4639      	mov	r1, r7
 8004546:	7860      	ldrb	r0, [r4, #1]
 8004548:	f7fe fae8 	bl	8002b1c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800454c:	3e01      	subs	r6, #1
 800454e:	e7f3      	b.n	8004538 <sync_window+0x30>
	FRESULT res = FR_OK;
 8004550:	2000      	movs	r0, #0
 8004552:	e7dd      	b.n	8004510 <sync_window+0x8>
			res = FR_DISK_ERR;
 8004554:	2001      	movs	r0, #1
 8004556:	e7db      	b.n	8004510 <sync_window+0x8>
	FRESULT res = FR_OK;
 8004558:	2000      	movs	r0, #0
 800455a:	e7d9      	b.n	8004510 <sync_window+0x8>

0800455c <move_window>:
{
 800455c:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800455e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004560:	428b      	cmp	r3, r1
 8004562:	d012      	beq.n	800458a <move_window+0x2e>
 8004564:	4604      	mov	r4, r0
 8004566:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8004568:	f7ff ffce 	bl	8004508 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800456c:	4606      	mov	r6, r0
 800456e:	b968      	cbnz	r0, 800458c <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004570:	2301      	movs	r3, #1
 8004572:	462a      	mov	r2, r5
 8004574:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8004578:	7860      	ldrb	r0, [r4, #1]
 800457a:	f7fe faca 	bl	8002b12 <disk_read>
 800457e:	b110      	cbz	r0, 8004586 <move_window+0x2a>
				res = FR_DISK_ERR;
 8004580:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004582:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 8004586:	62e5      	str	r5, [r4, #44]	; 0x2c
 8004588:	e000      	b.n	800458c <move_window+0x30>
	FRESULT res = FR_OK;
 800458a:	2600      	movs	r6, #0
}
 800458c:	4630      	mov	r0, r6
 800458e:	bd70      	pop	{r4, r5, r6, pc}

08004590 <check_fs>:
{
 8004590:	b510      	push	{r4, lr}
 8004592:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004594:	2300      	movs	r3, #0
 8004596:	70c3      	strb	r3, [r0, #3]
 8004598:	f04f 33ff 	mov.w	r3, #4294967295
 800459c:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800459e:	f7ff ffdd 	bl	800455c <move_window>
 80045a2:	b9d8      	cbnz	r0, 80045dc <check_fs+0x4c>
	if (ld_word(&fs->win[BS_55AA]) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80045a4:	f204 202e 	addw	r0, r4, #558	; 0x22e
 80045a8:	f7ff fe16 	bl	80041d8 <ld_word>
 80045ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80045b0:	4298      	cmp	r0, r3
 80045b2:	d115      	bne.n	80045e0 <check_fs+0x50>
	if ((ld_dword(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80045b4:	f104 0066 	add.w	r0, r4, #102	; 0x66
 80045b8:	f7ff fe13 	bl	80041e2 <ld_dword>
 80045bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80045c0:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <check_fs+0x5c>)
 80045c2:	4298      	cmp	r0, r3
 80045c4:	d00e      	beq.n	80045e4 <check_fs+0x54>
	if ((ld_dword(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80045c6:	f104 0082 	add.w	r0, r4, #130	; 0x82
 80045ca:	f7ff fe0a 	bl	80041e2 <ld_dword>
 80045ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80045d2:	4b06      	ldr	r3, [pc, #24]	; (80045ec <check_fs+0x5c>)
 80045d4:	4298      	cmp	r0, r3
 80045d6:	d107      	bne.n	80045e8 <check_fs+0x58>
 80045d8:	2000      	movs	r0, #0
 80045da:	e002      	b.n	80045e2 <check_fs+0x52>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80045dc:	2004      	movs	r0, #4
 80045de:	e000      	b.n	80045e2 <check_fs+0x52>
	if (ld_word(&fs->win[BS_55AA]) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80045e0:	2003      	movs	r0, #3
}
 80045e2:	bd10      	pop	{r4, pc}
	if ((ld_dword(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80045e4:	2000      	movs	r0, #0
 80045e6:	e7fc      	b.n	80045e2 <check_fs+0x52>
	return 2;
 80045e8:	2002      	movs	r0, #2
 80045ea:	e7fa      	b.n	80045e2 <check_fs+0x52>
 80045ec:	00544146 	.word	0x00544146

080045f0 <find_volume>:
{
 80045f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	460f      	mov	r7, r1
 80045f8:	4616      	mov	r6, r2
	*rfs = 0;
 80045fa:	2300      	movs	r3, #0
 80045fc:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 80045fe:	f7ff ff3f 	bl	8004480 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004602:	1e05      	subs	r5, r0, #0
 8004604:	f2c0 8141 	blt.w	800488a <find_volume+0x29a>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004608:	4bb5      	ldr	r3, [pc, #724]	; (80048e0 <find_volume+0x2f0>)
 800460a:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800460e:	2c00      	cmp	r4, #0
 8004610:	f000 813f 	beq.w	8004892 <find_volume+0x2a2>
	*rfs = fs;							/* Return pointer to the file system object */
 8004614:	603c      	str	r4, [r7, #0]
	mode &= ~FA_READ;					/* Desired access mode, write access or not */
 8004616:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800461a:	7823      	ldrb	r3, [r4, #0]
 800461c:	b173      	cbz	r3, 800463c <find_volume+0x4c>
		stat = disk_status(fs->drv);
 800461e:	7860      	ldrb	r0, [r4, #1]
 8004620:	f7fe fa72 	bl	8002b08 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004624:	f010 0f01 	tst.w	r0, #1
 8004628:	d108      	bne.n	800463c <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800462a:	2e00      	cmp	r6, #0
 800462c:	f000 8133 	beq.w	8004896 <find_volume+0x2a6>
 8004630:	f010 0f04 	tst.w	r0, #4
 8004634:	f040 8131 	bne.w	800489a <find_volume+0x2aa>
			return FR_OK;				/* The file system object is valid */
 8004638:	2000      	movs	r0, #0
 800463a:	e127      	b.n	800488c <find_volume+0x29c>
	fs->fs_type = 0;					/* Clear the file system object */
 800463c:	2300      	movs	r3, #0
 800463e:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004640:	b2e8      	uxtb	r0, r5
 8004642:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004644:	f7fe fa50 	bl	8002ae8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004648:	f010 0f01 	tst.w	r0, #1
 800464c:	f040 8127 	bne.w	800489e <find_volume+0x2ae>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004650:	b11e      	cbz	r6, 800465a <find_volume+0x6a>
 8004652:	f010 0f04 	tst.w	r0, #4
 8004656:	f040 8124 	bne.w	80048a2 <find_volume+0x2b2>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800465a:	2100      	movs	r1, #0
 800465c:	4620      	mov	r0, r4
 800465e:	f7ff ff97 	bl	8004590 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol))) {	/* Not an FAT boot sector or forced partition number */
 8004662:	2802      	cmp	r0, #2
 8004664:	f000 80b3 	beq.w	80047ce <find_volume+0x1de>
	bsect = 0;
 8004668:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800466a:	2804      	cmp	r0, #4
 800466c:	f000 811b 	beq.w	80048a6 <find_volume+0x2b6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004670:	2801      	cmp	r0, #1
 8004672:	f200 811a 	bhi.w	80048aa <find_volume+0x2ba>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004676:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 800467a:	f7ff fdad 	bl	80041d8 <ld_word>
 800467e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004682:	f040 8114 	bne.w	80048ae <find_volume+0x2be>
		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
 8004686:	f104 0046 	add.w	r0, r4, #70	; 0x46
 800468a:	f7ff fda5 	bl	80041d8 <ld_word>
 800468e:	4607      	mov	r7, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004690:	b920      	cbnz	r0, 800469c <find_volume+0xac>
 8004692:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8004696:	f7ff fda4 	bl	80041e2 <ld_dword>
 800469a:	4607      	mov	r7, r0
		fs->fsize = fasize;
 800469c:	61a7      	str	r7, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
 800469e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80046a2:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80046a4:	1e53      	subs	r3, r2, #1
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	f200 8102 	bhi.w	80048b2 <find_volume+0x2c2>
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80046ae:	fb07 f502 	mul.w	r5, r7, r2
		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
 80046b2:	f894 803d 	ldrb.w	r8, [r4, #61]	; 0x3d
 80046b6:	f8a4 800a 	strh.w	r8, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80046ba:	f1b8 0f00 	cmp.w	r8, #0
 80046be:	f000 80fa 	beq.w	80048b6 <find_volume+0x2c6>
 80046c2:	f108 33ff 	add.w	r3, r8, #4294967295
 80046c6:	ea18 0f03 	tst.w	r8, r3
 80046ca:	f040 80f6 	bne.w	80048ba <find_volume+0x2ca>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80046ce:	f104 0041 	add.w	r0, r4, #65	; 0x41
 80046d2:	f7ff fd81 	bl	80041d8 <ld_word>
 80046d6:	4682      	mov	sl, r0
 80046d8:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80046da:	f010 0f0f 	tst.w	r0, #15
 80046de:	f040 80ee 	bne.w	80048be <find_volume+0x2ce>
		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 80046e2:	f104 0043 	add.w	r0, r4, #67	; 0x43
 80046e6:	f7ff fd77 	bl	80041d8 <ld_word>
 80046ea:	4681      	mov	r9, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80046ec:	b920      	cbnz	r0, 80046f8 <find_volume+0x108>
 80046ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80046f2:	f7ff fd76 	bl	80041e2 <ld_dword>
 80046f6:	4681      	mov	r9, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80046f8:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 80046fc:	f7ff fd6c 	bl	80041d8 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
 8004700:	4601      	mov	r1, r0
 8004702:	2800      	cmp	r0, #0
 8004704:	f000 80dd 	beq.w	80048c2 <find_volume+0x2d2>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004708:	1942      	adds	r2, r0, r5
 800470a:	eb02 121a 	add.w	r2, r2, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800470e:	4591      	cmp	r9, r2
 8004710:	f0c0 80d9 	bcc.w	80048c6 <find_volume+0x2d6>
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8004714:	eba9 0302 	sub.w	r3, r9, r2
 8004718:	fbb3 f3f8 	udiv	r3, r3, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 80d4 	beq.w	80048ca <find_volume+0x2da>
		if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8004722:	f640 70f5 	movw	r0, #4085	; 0xff5
 8004726:	4283      	cmp	r3, r0
 8004728:	d869      	bhi.n	80047fe <find_volume+0x20e>
		fmt = FS_FAT12;
 800472a:	f04f 0901 	mov.w	r9, #1
		if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800472e:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8004732:	4283      	cmp	r3, r0
 8004734:	d901      	bls.n	800473a <find_volume+0x14a>
 8004736:	f04f 0903 	mov.w	r9, #3
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800473a:	f103 0802 	add.w	r8, r3, #2
 800473e:	f8c4 8014 	str.w	r8, [r4, #20]
		fs->volbase = bsect;								/* Volume start sector */
 8004742:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004744:	198b      	adds	r3, r1, r6
 8004746:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;						/* Data start sector */
 8004748:	4432      	add	r2, r6
 800474a:	62a2      	str	r2, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800474c:	f1b9 0f03 	cmp.w	r9, #3
 8004750:	d058      	beq.n	8004804 <find_volume+0x214>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004752:	f1ba 0f00 	cmp.w	sl, #0
 8004756:	f000 80be 	beq.w	80048d6 <find_volume+0x2e6>
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800475a:	442b      	add	r3, r5
 800475c:	6263      	str	r3, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800475e:	f1b9 0f02 	cmp.w	r9, #2
 8004762:	d060      	beq.n	8004826 <find_volume+0x236>
 8004764:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 8004768:	f008 0301 	and.w	r3, r8, #1
 800476c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004770:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004774:	ebb7 2f53 	cmp.w	r7, r3, lsr #9
 8004778:	f0c0 80af 	bcc.w	80048da <find_volume+0x2ea>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;
 800477c:	f04f 33ff 	mov.w	r3, #4294967295
 8004780:	6123      	str	r3, [r4, #16]
 8004782:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 8004784:	2380      	movs	r3, #128	; 0x80
 8004786:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004788:	f1b9 0f03 	cmp.w	r9, #3
 800478c:	d04e      	beq.n	800482c <find_volume+0x23c>
	fs->fs_type = fmt;	/* FAT sub-type */
 800478e:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;	/* File system mount ID */
 8004792:	4a54      	ldr	r2, [pc, #336]	; (80048e4 <find_volume+0x2f4>)
 8004794:	8813      	ldrh	r3, [r2, #0]
 8004796:	3301      	adds	r3, #1
 8004798:	b29b      	uxth	r3, r3
 800479a:	8013      	strh	r3, [r2, #0]
 800479c:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 800479e:	2000      	movs	r0, #0
 80047a0:	e074      	b.n	800488c <find_volume+0x29c>
			br[i] = pt[4] ? ld_dword(&pt[8]) : 0;
 80047a2:	2000      	movs	r0, #0
 80047a4:	ab04      	add	r3, sp, #16
 80047a6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80047aa:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80047ae:	3501      	adds	r5, #1
 80047b0:	2d03      	cmp	r5, #3
 80047b2:	d80e      	bhi.n	80047d2 <find_volume+0x1e2>
			pt = fs->win + MBR_Table + i * SZ_PTE;
 80047b4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80047b8:	012b      	lsls	r3, r5, #4
 80047ba:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80047be:	4418      	add	r0, r3
			br[i] = pt[4] ? ld_dword(&pt[8]) : 0;
 80047c0:	7903      	ldrb	r3, [r0, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0ed      	beq.n	80047a2 <find_volume+0x1b2>
 80047c6:	3008      	adds	r0, #8
 80047c8:	f7ff fd0b 	bl	80041e2 <ld_dword>
 80047cc:	e7ea      	b.n	80047a4 <find_volume+0x1b4>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80047ce:	2500      	movs	r5, #0
 80047d0:	e7ee      	b.n	80047b0 <find_volume+0x1c0>
 80047d2:	2500      	movs	r5, #0
 80047d4:	e00a      	b.n	80047ec <find_volume+0x1fc>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80047d6:	4631      	mov	r1, r6
 80047d8:	4620      	mov	r0, r4
 80047da:	f7ff fed9 	bl	8004590 <check_fs>
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
 80047de:	2801      	cmp	r0, #1
 80047e0:	f67f af43 	bls.w	800466a <find_volume+0x7a>
 80047e4:	3501      	adds	r5, #1
 80047e6:	2d03      	cmp	r5, #3
 80047e8:	f63f af3f 	bhi.w	800466a <find_volume+0x7a>
			bsect = br[i];
 80047ec:	ab04      	add	r3, sp, #16
 80047ee:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80047f2:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80047f6:	2e00      	cmp	r6, #0
 80047f8:	d1ed      	bne.n	80047d6 <find_volume+0x1e6>
 80047fa:	2003      	movs	r0, #3
 80047fc:	e7f2      	b.n	80047e4 <find_volume+0x1f4>
		if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80047fe:	f04f 0902 	mov.w	r9, #2
 8004802:	e794      	b.n	800472e <find_volume+0x13e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004804:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8004808:	f7ff fce6 	bl	80041d8 <ld_word>
 800480c:	2800      	cmp	r0, #0
 800480e:	d15e      	bne.n	80048ce <find_volume+0x2de>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004810:	f1ba 0f00 	cmp.w	sl, #0
 8004814:	d15d      	bne.n	80048d2 <find_volume+0x2e2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004816:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800481a:	f7ff fce2 	bl	80041e2 <ld_dword>
 800481e:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004820:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8004824:	e7a4      	b.n	8004770 <find_volume+0x180>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004826:	ea4f 0348 	mov.w	r3, r8, lsl #1
 800482a:	e7a1      	b.n	8004770 <find_volume+0x180>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800482c:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8004830:	f7ff fcd2 	bl	80041d8 <ld_word>
 8004834:	2801      	cmp	r0, #1
 8004836:	d1aa      	bne.n	800478e <find_volume+0x19e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004838:	1c71      	adds	r1, r6, #1
 800483a:	4620      	mov	r0, r4
 800483c:	f7ff fe8e 	bl	800455c <move_window>
 8004840:	2800      	cmp	r0, #0
 8004842:	d1a4      	bne.n	800478e <find_volume+0x19e>
			fs->fsi_flag = 0;
 8004844:	2300      	movs	r3, #0
 8004846:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004848:	f204 202e 	addw	r0, r4, #558	; 0x22e
 800484c:	f7ff fcc4 	bl	80041d8 <ld_word>
 8004850:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004854:	4298      	cmp	r0, r3
 8004856:	d19a      	bne.n	800478e <find_volume+0x19e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004858:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800485c:	f7ff fcc1 	bl	80041e2 <ld_dword>
 8004860:	4b21      	ldr	r3, [pc, #132]	; (80048e8 <find_volume+0x2f8>)
 8004862:	4298      	cmp	r0, r3
 8004864:	d193      	bne.n	800478e <find_volume+0x19e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004866:	f504 7005 	add.w	r0, r4, #532	; 0x214
 800486a:	f7ff fcba 	bl	80041e2 <ld_dword>
 800486e:	4b1f      	ldr	r3, [pc, #124]	; (80048ec <find_volume+0x2fc>)
 8004870:	4298      	cmp	r0, r3
 8004872:	d18c      	bne.n	800478e <find_volume+0x19e>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004874:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8004878:	f7ff fcb3 	bl	80041e2 <ld_dword>
 800487c:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800487e:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8004882:	f7ff fcae 	bl	80041e2 <ld_dword>
 8004886:	60e0      	str	r0, [r4, #12]
 8004888:	e781      	b.n	800478e <find_volume+0x19e>
	if (vol < 0) return FR_INVALID_DRIVE;
 800488a:	200b      	movs	r0, #11
}
 800488c:	b004      	add	sp, #16
 800488e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004892:	200c      	movs	r0, #12
 8004894:	e7fa      	b.n	800488c <find_volume+0x29c>
			return FR_OK;				/* The file system object is valid */
 8004896:	2000      	movs	r0, #0
 8004898:	e7f8      	b.n	800488c <find_volume+0x29c>
				return FR_WRITE_PROTECTED;
 800489a:	200a      	movs	r0, #10
 800489c:	e7f6      	b.n	800488c <find_volume+0x29c>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800489e:	2003      	movs	r0, #3
 80048a0:	e7f4      	b.n	800488c <find_volume+0x29c>
		return FR_WRITE_PROTECTED;
 80048a2:	200a      	movs	r0, #10
 80048a4:	e7f2      	b.n	800488c <find_volume+0x29c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80048a6:	2001      	movs	r0, #1
 80048a8:	e7f0      	b.n	800488c <find_volume+0x29c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80048aa:	200d      	movs	r0, #13
 80048ac:	e7ee      	b.n	800488c <find_volume+0x29c>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80048ae:	200d      	movs	r0, #13
 80048b0:	e7ec      	b.n	800488c <find_volume+0x29c>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80048b2:	200d      	movs	r0, #13
 80048b4:	e7ea      	b.n	800488c <find_volume+0x29c>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80048b6:	200d      	movs	r0, #13
 80048b8:	e7e8      	b.n	800488c <find_volume+0x29c>
 80048ba:	200d      	movs	r0, #13
 80048bc:	e7e6      	b.n	800488c <find_volume+0x29c>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80048be:	200d      	movs	r0, #13
 80048c0:	e7e4      	b.n	800488c <find_volume+0x29c>
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
 80048c2:	200d      	movs	r0, #13
 80048c4:	e7e2      	b.n	800488c <find_volume+0x29c>
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80048c6:	200d      	movs	r0, #13
 80048c8:	e7e0      	b.n	800488c <find_volume+0x29c>
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
 80048ca:	200d      	movs	r0, #13
 80048cc:	e7de      	b.n	800488c <find_volume+0x29c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80048ce:	200d      	movs	r0, #13
 80048d0:	e7dc      	b.n	800488c <find_volume+0x29c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80048d2:	200d      	movs	r0, #13
 80048d4:	e7da      	b.n	800488c <find_volume+0x29c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80048d6:	200d      	movs	r0, #13
 80048d8:	e7d8      	b.n	800488c <find_volume+0x29c>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80048da:	200d      	movs	r0, #13
 80048dc:	e7d6      	b.n	800488c <find_volume+0x29c>
 80048de:	bf00      	nop
 80048e0:	20000fd8 	.word	0x20000fd8
 80048e4:	20000fdc 	.word	0x20000fdc
 80048e8:	41615252 	.word	0x41615252
 80048ec:	61417272 	.word	0x61417272

080048f0 <get_fat>:
{
 80048f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 80048f2:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80048f4:	2901      	cmp	r1, #1
 80048f6:	d952      	bls.n	800499e <get_fat+0xae>
 80048f8:	6973      	ldr	r3, [r6, #20]
 80048fa:	428b      	cmp	r3, r1
 80048fc:	d951      	bls.n	80049a2 <get_fat+0xb2>
 80048fe:	460c      	mov	r4, r1
		switch (fs->fs_type) {
 8004900:	7833      	ldrb	r3, [r6, #0]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d02b      	beq.n	800495e <get_fat+0x6e>
 8004906:	2b03      	cmp	r3, #3
 8004908:	d038      	beq.n	800497c <get_fat+0x8c>
 800490a:	2b01      	cmp	r3, #1
 800490c:	d001      	beq.n	8004912 <get_fat+0x22>
			val = 1;	/* Internal error */
 800490e:	2001      	movs	r0, #1
 8004910:	e046      	b.n	80049a0 <get_fat+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 8004912:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004916:	6a31      	ldr	r1, [r6, #32]
 8004918:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 800491c:	4630      	mov	r0, r6
 800491e:	f7ff fe1d 	bl	800455c <move_window>
 8004922:	2800      	cmp	r0, #0
 8004924:	d13f      	bne.n	80049a6 <get_fat+0xb6>
			wc = fs->win[bc++ % SS(fs)];
 8004926:	1c6f      	adds	r7, r5, #1
 8004928:	f3c5 0508 	ubfx	r5, r5, #0, #9
 800492c:	4435      	add	r5, r6
 800492e:	f895 5030 	ldrb.w	r5, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004932:	6a31      	ldr	r1, [r6, #32]
 8004934:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8004938:	4630      	mov	r0, r6
 800493a:	f7ff fe0f 	bl	800455c <move_window>
 800493e:	bba8      	cbnz	r0, 80049ac <get_fat+0xbc>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004940:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8004944:	443e      	add	r6, r7
 8004946:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 800494a:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800494e:	f014 0f01 	tst.w	r4, #1
 8004952:	d001      	beq.n	8004958 <get_fat+0x68>
 8004954:	0900      	lsrs	r0, r0, #4
 8004956:	e023      	b.n	80049a0 <get_fat+0xb0>
 8004958:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800495c:	e020      	b.n	80049a0 <get_fat+0xb0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800495e:	6a31      	ldr	r1, [r6, #32]
 8004960:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8004964:	4630      	mov	r0, r6
 8004966:	f7ff fdf9 	bl	800455c <move_window>
 800496a:	bb10      	cbnz	r0, 80049b2 <get_fat+0xc2>
			val = ld_word(&fs->win[clst * 2 % SS(fs)]);
 800496c:	0060      	lsls	r0, r4, #1
 800496e:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
 8004972:	3030      	adds	r0, #48	; 0x30
 8004974:	4430      	add	r0, r6
 8004976:	f7ff fc2f 	bl	80041d8 <ld_word>
			break;
 800497a:	e011      	b.n	80049a0 <get_fat+0xb0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800497c:	6a31      	ldr	r1, [r6, #32]
 800497e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8004982:	4630      	mov	r0, r6
 8004984:	f7ff fdea 	bl	800455c <move_window>
 8004988:	b9b0      	cbnz	r0, 80049b8 <get_fat+0xc8>
			val = ld_dword(&fs->win[clst * 4 % SS(fs)]) & 0x0FFFFFFF;
 800498a:	00a0      	lsls	r0, r4, #2
 800498c:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
 8004990:	3030      	adds	r0, #48	; 0x30
 8004992:	4430      	add	r0, r6
 8004994:	f7ff fc25 	bl	80041e2 <ld_dword>
 8004998:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 800499c:	e000      	b.n	80049a0 <get_fat+0xb0>
		val = 1;	/* Internal error */
 800499e:	2001      	movs	r0, #1
}
 80049a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 80049a2:	2001      	movs	r0, #1
 80049a4:	e7fc      	b.n	80049a0 <get_fat+0xb0>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80049a6:	f04f 30ff 	mov.w	r0, #4294967295
 80049aa:	e7f9      	b.n	80049a0 <get_fat+0xb0>
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	e7f6      	b.n	80049a0 <get_fat+0xb0>
 80049b2:	f04f 30ff 	mov.w	r0, #4294967295
 80049b6:	e7f3      	b.n	80049a0 <get_fat+0xb0>
 80049b8:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 80049bc:	e7f0      	b.n	80049a0 <get_fat+0xb0>

080049be <dir_sdi>:
{
 80049be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 80049c2:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80049c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80049c8:	d23b      	bcs.n	8004a42 <dir_sdi+0x84>
 80049ca:	4606      	mov	r6, r0
 80049cc:	460d      	mov	r5, r1
 80049ce:	f011 0f1f 	tst.w	r1, #31
 80049d2:	d139      	bne.n	8004a48 <dir_sdi+0x8a>
	dp->dptr = ofs;				/* Set current offset */
 80049d4:	6131      	str	r1, [r6, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80049d6:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80049d8:	b91c      	cbnz	r4, 80049e2 <dir_sdi+0x24>
 80049da:	783b      	ldrb	r3, [r7, #0]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d900      	bls.n	80049e2 <dir_sdi+0x24>
		clst = fs->dirbase;
 80049e0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80049e2:	b994      	cbnz	r4, 8004a0a <dir_sdi+0x4c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80049e4:	893b      	ldrh	r3, [r7, #8]
 80049e6:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 80049ea:	d92f      	bls.n	8004a4c <dir_sdi+0x8e>
		dp->sect = fs->dirbase;
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	61b3      	str	r3, [r6, #24]
	dp->clust = clst;					/* Current cluster# */
 80049f0:	6174      	str	r4, [r6, #20]
	if (!dp->sect) return FR_INT_ERR;
 80049f2:	69b3      	ldr	r3, [r6, #24]
 80049f4:	b393      	cbz	r3, 8004a5c <dir_sdi+0x9e>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80049f6:	eb03 2355 	add.w	r3, r3, r5, lsr #9
 80049fa:	61b3      	str	r3, [r6, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80049fc:	3730      	adds	r7, #48	; 0x30
 80049fe:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8004a02:	443d      	add	r5, r7
 8004a04:	61f5      	str	r5, [r6, #28]
	return FR_OK;
 8004a06:	2000      	movs	r0, #0
 8004a08:	e01c      	b.n	8004a44 <dir_sdi+0x86>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004a0a:	f8b7 800a 	ldrh.w	r8, [r7, #10]
 8004a0e:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8004a12:	4545      	cmp	r5, r8
 8004a14:	d30f      	bcc.n	8004a36 <dir_sdi+0x78>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004a16:	4621      	mov	r1, r4
 8004a18:	4630      	mov	r0, r6
 8004a1a:	f7ff ff69 	bl	80048f0 <get_fat>
 8004a1e:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004a20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004a24:	d014      	beq.n	8004a50 <dir_sdi+0x92>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004a26:	2801      	cmp	r0, #1
 8004a28:	d914      	bls.n	8004a54 <dir_sdi+0x96>
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	4283      	cmp	r3, r0
 8004a2e:	d913      	bls.n	8004a58 <dir_sdi+0x9a>
			ofs -= csz;
 8004a30:	eba5 0508 	sub.w	r5, r5, r8
 8004a34:	e7ed      	b.n	8004a12 <dir_sdi+0x54>
		dp->sect = clust2sect(fs, clst);
 8004a36:	4621      	mov	r1, r4
 8004a38:	4638      	mov	r0, r7
 8004a3a:	f7ff fc10 	bl	800425e <clust2sect>
 8004a3e:	61b0      	str	r0, [r6, #24]
 8004a40:	e7d6      	b.n	80049f0 <dir_sdi+0x32>
		return FR_INT_ERR;
 8004a42:	2002      	movs	r0, #2
}
 8004a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 8004a48:	2002      	movs	r0, #2
 8004a4a:	e7fb      	b.n	8004a44 <dir_sdi+0x86>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004a4c:	2002      	movs	r0, #2
 8004a4e:	e7f9      	b.n	8004a44 <dir_sdi+0x86>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004a50:	2001      	movs	r0, #1
 8004a52:	e7f7      	b.n	8004a44 <dir_sdi+0x86>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004a54:	2002      	movs	r0, #2
 8004a56:	e7f5      	b.n	8004a44 <dir_sdi+0x86>
 8004a58:	2002      	movs	r0, #2
 8004a5a:	e7f3      	b.n	8004a44 <dir_sdi+0x86>
	if (!dp->sect) return FR_INT_ERR;
 8004a5c:	2002      	movs	r0, #2
 8004a5e:	e7f1      	b.n	8004a44 <dir_sdi+0x86>

08004a60 <put_fat>:
{
 8004a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004a64:	2901      	cmp	r1, #1
 8004a66:	d97c      	bls.n	8004b62 <put_fat+0x102>
 8004a68:	6943      	ldr	r3, [r0, #20]
 8004a6a:	428b      	cmp	r3, r1
 8004a6c:	d97b      	bls.n	8004b66 <put_fat+0x106>
 8004a6e:	4616      	mov	r6, r2
 8004a70:	460c      	mov	r4, r1
 8004a72:	4605      	mov	r5, r0
		switch (fs->fs_type) {
 8004a74:	7803      	ldrb	r3, [r0, #0]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d047      	beq.n	8004b0a <put_fat+0xaa>
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d057      	beq.n	8004b2e <put_fat+0xce>
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d001      	beq.n	8004a86 <put_fat+0x26>
	FRESULT res = FR_INT_ERR;
 8004a82:	2702      	movs	r7, #2
 8004a84:	e070      	b.n	8004b68 <put_fat+0x108>
			bc = (UINT)clst; bc += bc / 2;
 8004a86:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004a8a:	6a01      	ldr	r1, [r0, #32]
 8004a8c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8004a90:	f7ff fd64 	bl	800455c <move_window>
			if (res != FR_OK) break;
 8004a94:	4607      	mov	r7, r0
 8004a96:	2800      	cmp	r0, #0
 8004a98:	d166      	bne.n	8004b68 <put_fat+0x108>
			p = &fs->win[bc++ % SS(fs)];
 8004a9a:	f108 0901 	add.w	r9, r8, #1
 8004a9e:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004aa2:	f014 0401 	ands.w	r4, r4, #1
 8004aa6:	d023      	beq.n	8004af0 <put_fat+0x90>
 8004aa8:	eb05 0308 	add.w	r3, r5, r8
 8004aac:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	0132      	lsls	r2, r6, #4
 8004ab6:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8004aba:	4313      	orrs	r3, r2
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	44a8      	add	r8, r5
 8004ac0:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
			fs->wflag = 1;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004ac8:	6a29      	ldr	r1, [r5, #32]
 8004aca:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8004ace:	4628      	mov	r0, r5
 8004ad0:	f7ff fd44 	bl	800455c <move_window>
			if (res != FR_OK) break;
 8004ad4:	4607      	mov	r7, r0
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	d146      	bne.n	8004b68 <put_fat+0x108>
			p = &fs->win[bc % SS(fs)];
 8004ada:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004ade:	b14c      	cbz	r4, 8004af4 <put_fat+0x94>
 8004ae0:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8004ae4:	44a9      	add	r9, r5
 8004ae6:	f889 2030 	strb.w	r2, [r9, #48]	; 0x30
			fs->wflag = 1;
 8004aea:	2301      	movs	r3, #1
 8004aec:	70eb      	strb	r3, [r5, #3]
			break;
 8004aee:	e03b      	b.n	8004b68 <put_fat+0x108>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004af0:	b2f3      	uxtb	r3, r6
 8004af2:	e7e4      	b.n	8004abe <put_fat+0x5e>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004af4:	eb05 0309 	add.w	r3, r5, r9
 8004af8:	f993 2030 	ldrsb.w	r2, [r3, #48]	; 0x30
 8004afc:	f022 020f 	bic.w	r2, r2, #15
 8004b00:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8004b04:	4332      	orrs	r2, r6
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	e7ec      	b.n	8004ae4 <put_fat+0x84>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004b0a:	6a01      	ldr	r1, [r0, #32]
 8004b0c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8004b10:	f7ff fd24 	bl	800455c <move_window>
			if (res != FR_OK) break;
 8004b14:	4607      	mov	r7, r0
 8004b16:	bb38      	cbnz	r0, 8004b68 <put_fat+0x108>
			st_word(&fs->win[clst * 2 % SS(fs)], (WORD)val);
 8004b18:	0060      	lsls	r0, r4, #1
 8004b1a:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
 8004b1e:	3030      	adds	r0, #48	; 0x30
 8004b20:	b2b1      	uxth	r1, r6
 8004b22:	4428      	add	r0, r5
 8004b24:	f7ff fb68 	bl	80041f8 <st_word>
			fs->wflag = 1;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	70eb      	strb	r3, [r5, #3]
			break;
 8004b2c:	e01c      	b.n	8004b68 <put_fat+0x108>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004b2e:	6a01      	ldr	r1, [r0, #32]
 8004b30:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8004b34:	f7ff fd12 	bl	800455c <move_window>
			if (res != FR_OK) break;
 8004b38:	4607      	mov	r7, r0
 8004b3a:	b9a8      	cbnz	r0, 8004b68 <put_fat+0x108>
				val = (val & 0x0FFFFFFF) | (ld_dword(&fs->win[clst * 4 % SS(fs)]) & 0xF0000000);
 8004b3c:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 8004b40:	00a4      	lsls	r4, r4, #2
 8004b42:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8004b46:	3430      	adds	r4, #48	; 0x30
 8004b48:	442c      	add	r4, r5
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	f7ff fb49 	bl	80041e2 <ld_dword>
 8004b50:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(&fs->win[clst * 4 % SS(fs)], val);
 8004b54:	4331      	orrs	r1, r6
 8004b56:	4620      	mov	r0, r4
 8004b58:	f7ff fb52 	bl	8004200 <st_dword>
			fs->wflag = 1;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	70eb      	strb	r3, [r5, #3]
			break;
 8004b60:	e002      	b.n	8004b68 <put_fat+0x108>
	FRESULT res = FR_INT_ERR;
 8004b62:	2702      	movs	r7, #2
 8004b64:	e000      	b.n	8004b68 <put_fat+0x108>
 8004b66:	2702      	movs	r7, #2
}
 8004b68:	4638      	mov	r0, r7
 8004b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004b6e <create_chain>:
{
 8004b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b72:	4607      	mov	r7, r0
	FATFS *fs = obj->fs;
 8004b74:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8004b76:	4688      	mov	r8, r1
 8004b78:	b931      	cbnz	r1, 8004b88 <create_chain+0x1a>
		scl = fs->last_clst;				/* Get suggested cluster to start at */
 8004b7a:	68f5      	ldr	r5, [r6, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004b7c:	b18d      	cbz	r5, 8004ba2 <create_chain+0x34>
 8004b7e:	6973      	ldr	r3, [r6, #20]
 8004b80:	42ab      	cmp	r3, r5
 8004b82:	d80f      	bhi.n	8004ba4 <create_chain+0x36>
 8004b84:	2501      	movs	r5, #1
 8004b86:	e00d      	b.n	8004ba4 <create_chain+0x36>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004b88:	f7ff feb2 	bl	80048f0 <get_fat>
 8004b8c:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid value */
 8004b8e:	2801      	cmp	r0, #1
 8004b90:	d947      	bls.n	8004c22 <create_chain+0xb4>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004b92:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004b96:	d049      	beq.n	8004c2c <create_chain+0xbe>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004b98:	6972      	ldr	r2, [r6, #20]
 8004b9a:	4282      	cmp	r2, r0
 8004b9c:	d846      	bhi.n	8004c2c <create_chain+0xbe>
		scl = clst;
 8004b9e:	4645      	mov	r5, r8
 8004ba0:	e000      	b.n	8004ba4 <create_chain+0x36>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004ba2:	2501      	movs	r5, #1
		ncl = scl;	/* Start cluster */
 8004ba4:	462c      	mov	r4, r5
 8004ba6:	e00c      	b.n	8004bc2 <create_chain+0x54>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004ba8:	4621      	mov	r1, r4
 8004baa:	4638      	mov	r0, r7
 8004bac:	f7ff fea0 	bl	80048f0 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	b170      	cbz	r0, 8004bd2 <create_chain+0x64>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004bb4:	2801      	cmp	r0, #1
 8004bb6:	d039      	beq.n	8004c2c <create_chain+0xbe>
 8004bb8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004bbc:	d036      	beq.n	8004c2c <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 8004bbe:	42ac      	cmp	r4, r5
 8004bc0:	d033      	beq.n	8004c2a <create_chain+0xbc>
			ncl++;							/* Next cluster */
 8004bc2:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004bc4:	6973      	ldr	r3, [r6, #20]
 8004bc6:	42a3      	cmp	r3, r4
 8004bc8:	d8ee      	bhi.n	8004ba8 <create_chain+0x3a>
				if (ncl > scl) return 0;	/* No free cluster */
 8004bca:	2d01      	cmp	r5, #1
 8004bcc:	d92b      	bls.n	8004c26 <create_chain+0xb8>
				ncl = 2;
 8004bce:	2402      	movs	r4, #2
 8004bd0:	e7ea      	b.n	8004ba8 <create_chain+0x3a>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	4630      	mov	r0, r6
 8004bda:	f7ff ff41 	bl	8004a60 <put_fat>
		if (res == FR_OK && clst) {
 8004bde:	4603      	mov	r3, r0
 8004be0:	b910      	cbnz	r0, 8004be8 <create_chain+0x7a>
 8004be2:	f1b8 0f00 	cmp.w	r8, #0
 8004be6:	d10e      	bne.n	8004c06 <create_chain+0x98>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004be8:	b9a3      	cbnz	r3, 8004c14 <create_chain+0xa6>
		fs->last_clst = ncl;
 8004bea:	60f4      	str	r4, [r6, #12]
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
 8004bec:	6932      	ldr	r2, [r6, #16]
 8004bee:	6973      	ldr	r3, [r6, #20]
 8004bf0:	3b02      	subs	r3, #2
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d201      	bcs.n	8004bfa <create_chain+0x8c>
 8004bf6:	3a01      	subs	r2, #1
 8004bf8:	6132      	str	r2, [r6, #16]
		fs->fsi_flag |= 1;
 8004bfa:	7933      	ldrb	r3, [r6, #4]
 8004bfc:	f043 0301 	orr.w	r3, r3, #1
 8004c00:	7133      	strb	r3, [r6, #4]
 8004c02:	4623      	mov	r3, r4
 8004c04:	e012      	b.n	8004c2c <create_chain+0xbe>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004c06:	4622      	mov	r2, r4
 8004c08:	4641      	mov	r1, r8
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	f7ff ff28 	bl	8004a60 <put_fat>
 8004c10:	4603      	mov	r3, r0
 8004c12:	e7e9      	b.n	8004be8 <create_chain+0x7a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d001      	beq.n	8004c1c <create_chain+0xae>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e007      	b.n	8004c2c <create_chain+0xbe>
 8004c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c20:	e004      	b.n	8004c2c <create_chain+0xbe>
		if (cs < 2) return 1;				/* Invalid value */
 8004c22:	2301      	movs	r3, #1
 8004c24:	e002      	b.n	8004c2c <create_chain+0xbe>
				if (ncl > scl) return 0;	/* No free cluster */
 8004c26:	2300      	movs	r3, #0
 8004c28:	e000      	b.n	8004c2c <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004c32 <remove_chain>:
{
 8004c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c34:	460e      	mov	r6, r1
	FATFS *fs = obj->fs;
 8004c36:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004c38:	2901      	cmp	r1, #1
 8004c3a:	d92e      	bls.n	8004c9a <remove_chain+0x68>
 8004c3c:	4607      	mov	r7, r0
 8004c3e:	4611      	mov	r1, r2
 8004c40:	6963      	ldr	r3, [r4, #20]
 8004c42:	42b3      	cmp	r3, r6
 8004c44:	d92b      	bls.n	8004c9e <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004c46:	b15a      	cbz	r2, 8004c60 <remove_chain+0x2e>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004c48:	f04f 32ff 	mov.w	r2, #4294967295
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	f7ff ff07 	bl	8004a60 <put_fat>
		if (res != FR_OK) return res;
 8004c52:	4602      	mov	r2, r0
 8004c54:	b120      	cbz	r0, 8004c60 <remove_chain+0x2e>
 8004c56:	e023      	b.n	8004ca0 <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004c58:	6963      	ldr	r3, [r4, #20]
		clst = nxt;					/* Next cluster */
 8004c5a:	462e      	mov	r6, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004c5c:	42ab      	cmp	r3, r5
 8004c5e:	d91f      	bls.n	8004ca0 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004c60:	4631      	mov	r1, r6
 8004c62:	4638      	mov	r0, r7
 8004c64:	f7ff fe44 	bl	80048f0 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8004c68:	4605      	mov	r5, r0
 8004c6a:	b1d8      	cbz	r0, 8004ca4 <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004c6c:	2801      	cmp	r0, #1
 8004c6e:	d01b      	beq.n	8004ca8 <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004c70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004c74:	d01a      	beq.n	8004cac <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004c76:	2200      	movs	r2, #0
 8004c78:	4631      	mov	r1, r6
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f7ff fef0 	bl	8004a60 <put_fat>
			if (res != FR_OK) return res;
 8004c80:	4602      	mov	r2, r0
 8004c82:	b968      	cbnz	r0, 8004ca0 <remove_chain+0x6e>
		if (fs->free_clst != 0xFFFFFFFF) {	/* Update FSINFO */
 8004c84:	6923      	ldr	r3, [r4, #16]
 8004c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8a:	d0e5      	beq.n	8004c58 <remove_chain+0x26>
			fs->free_clst++;
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	6123      	str	r3, [r4, #16]
			fs->fsi_flag |= 1;
 8004c90:	7923      	ldrb	r3, [r4, #4]
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	7123      	strb	r3, [r4, #4]
 8004c98:	e7de      	b.n	8004c58 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	e000      	b.n	8004ca0 <remove_chain+0x6e>
 8004c9e:	2202      	movs	r2, #2
}
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	e7fb      	b.n	8004ca0 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004ca8:	2202      	movs	r2, #2
 8004caa:	e7f9      	b.n	8004ca0 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004cac:	2201      	movs	r2, #1
 8004cae:	e7f7      	b.n	8004ca0 <remove_chain+0x6e>

08004cb0 <dir_next>:
{
 8004cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 8004cb4:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004cb6:	6905      	ldr	r5, [r0, #16]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004cb8:	6983      	ldr	r3, [r0, #24]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d06d      	beq.n	8004d9a <dir_next+0xea>
 8004cbe:	3520      	adds	r5, #32
 8004cc0:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8004cc4:	d26b      	bcs.n	8004d9e <dir_next+0xee>
 8004cc6:	4688      	mov	r8, r1
 8004cc8:	4604      	mov	r4, r0
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004cca:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8004cce:	b93f      	cbnz	r7, 8004ce0 <dir_next+0x30>
		dp->sect++;				/* Next sector */
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	6183      	str	r3, [r0, #24]
		if (!dp->clust) {		/* Static table */
 8004cd4:	6941      	ldr	r1, [r0, #20]
 8004cd6:	b971      	cbnz	r1, 8004cf6 <dir_next+0x46>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004cd8:	8933      	ldrh	r3, [r6, #8]
 8004cda:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8004cde:	d906      	bls.n	8004cee <dir_next+0x3e>
	dp->dptr = ofs;						/* Current entry */
 8004ce0:	6125      	str	r5, [r4, #16]
	dp->dir = &fs->win[ofs % SS(fs)];	/* Pointer to the entry in the win[] */
 8004ce2:	3730      	adds	r7, #48	; 0x30
 8004ce4:	443e      	add	r6, r7
 8004ce6:	61e6      	str	r6, [r4, #28]
	return FR_OK;
 8004ce8:	2000      	movs	r0, #0
}
 8004cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				dp->sect = 0; return FR_NO_FILE;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	6183      	str	r3, [r0, #24]
 8004cf2:	2004      	movs	r0, #4
 8004cf4:	e7f9      	b.n	8004cea <dir_next+0x3a>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004cf6:	8973      	ldrh	r3, [r6, #10]
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 8004cfe:	d1ef      	bne.n	8004ce0 <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004d00:	f7ff fdf6 	bl	80048f0 <get_fat>
 8004d04:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004d06:	2801      	cmp	r0, #1
 8004d08:	d94b      	bls.n	8004da2 <dir_next+0xf2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004d0a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004d0e:	d04a      	beq.n	8004da6 <dir_next+0xf6>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004d10:	6973      	ldr	r3, [r6, #20]
 8004d12:	4283      	cmp	r3, r0
 8004d14:	d839      	bhi.n	8004d8a <dir_next+0xda>
					if (!stretch) {								/* If no stretch, report EOT */
 8004d16:	f1b8 0f00 	cmp.w	r8, #0
 8004d1a:	d011      	beq.n	8004d40 <dir_next+0x90>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004d1c:	6961      	ldr	r1, [r4, #20]
 8004d1e:	4620      	mov	r0, r4
 8004d20:	f7ff ff25 	bl	8004b6e <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004d24:	4681      	mov	r9, r0
 8004d26:	2800      	cmp	r0, #0
 8004d28:	d03f      	beq.n	8004daa <dir_next+0xfa>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004d2a:	2801      	cmp	r0, #1
 8004d2c:	d03f      	beq.n	8004dae <dir_next+0xfe>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d2e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004d32:	d03e      	beq.n	8004db2 <dir_next+0x102>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004d34:	4630      	mov	r0, r6
 8004d36:	f7ff fbe7 	bl	8004508 <sync_window>
 8004d3a:	b128      	cbz	r0, 8004d48 <dir_next+0x98>
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	e7d4      	b.n	8004cea <dir_next+0x3a>
						dp->sect = 0; return FR_NO_FILE;
 8004d40:	2300      	movs	r3, #0
 8004d42:	61a3      	str	r3, [r4, #24]
 8004d44:	2004      	movs	r0, #4
 8004d46:	e7d0      	b.n	8004cea <dir_next+0x3a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8004d52:	f7ff fa68 	bl	8004226 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004d56:	4649      	mov	r1, r9
 8004d58:	4630      	mov	r0, r6
 8004d5a:	f7ff fa80 	bl	800425e <clust2sect>
 8004d5e:	62f0      	str	r0, [r6, #44]	; 0x2c
 8004d60:	f04f 0800 	mov.w	r8, #0
 8004d64:	8973      	ldrh	r3, [r6, #10]
 8004d66:	4598      	cmp	r8, r3
 8004d68:	d20b      	bcs.n	8004d82 <dir_next+0xd2>
						fs->wflag = 1;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004d6e:	4630      	mov	r0, r6
 8004d70:	f7ff fbca 	bl	8004508 <sync_window>
 8004d74:	b9f8      	cbnz	r0, 8004db6 <dir_next+0x106>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004d76:	f108 0801 	add.w	r8, r8, #1
 8004d7a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	62f3      	str	r3, [r6, #44]	; 0x2c
 8004d80:	e7f0      	b.n	8004d64 <dir_next+0xb4>
					fs->winsect -= n;							/* Restore window offset */
 8004d82:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8004d84:	eba3 0308 	sub.w	r3, r3, r8
 8004d88:	62f3      	str	r3, [r6, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8004d8a:	f8c4 9014 	str.w	r9, [r4, #20]
				dp->sect = clust2sect(fs, clst);
 8004d8e:	4649      	mov	r1, r9
 8004d90:	4630      	mov	r0, r6
 8004d92:	f7ff fa64 	bl	800425e <clust2sect>
 8004d96:	61a0      	str	r0, [r4, #24]
 8004d98:	e7a2      	b.n	8004ce0 <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004d9a:	2004      	movs	r0, #4
 8004d9c:	e7a5      	b.n	8004cea <dir_next+0x3a>
 8004d9e:	2004      	movs	r0, #4
 8004da0:	e7a3      	b.n	8004cea <dir_next+0x3a>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004da2:	2002      	movs	r0, #2
 8004da4:	e7a1      	b.n	8004cea <dir_next+0x3a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004da6:	2001      	movs	r0, #1
 8004da8:	e79f      	b.n	8004cea <dir_next+0x3a>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004daa:	2007      	movs	r0, #7
 8004dac:	e79d      	b.n	8004cea <dir_next+0x3a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004dae:	2002      	movs	r0, #2
 8004db0:	e79b      	b.n	8004cea <dir_next+0x3a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004db2:	2001      	movs	r0, #1
 8004db4:	e799      	b.n	8004cea <dir_next+0x3a>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004db6:	2001      	movs	r0, #1
 8004db8:	e797      	b.n	8004cea <dir_next+0x3a>

08004dba <dir_alloc>:
{
 8004dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
 8004dc0:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	f7ff fdfb 	bl	80049be <dir_sdi>
	if (res == FR_OK) {
 8004dc8:	4603      	mov	r3, r0
 8004dca:	b9c0      	cbnz	r0, 8004dfe <dir_alloc+0x44>
		n = 0;
 8004dcc:	2500      	movs	r5, #0
 8004dce:	e008      	b.n	8004de2 <dir_alloc+0x28>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004dd0:	3501      	adds	r5, #1
 8004dd2:	42bd      	cmp	r5, r7
 8004dd4:	d013      	beq.n	8004dfe <dir_alloc+0x44>
			res = dir_next(dp, 1);
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f7ff ff69 	bl	8004cb0 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004dde:	4603      	mov	r3, r0
 8004de0:	b968      	cbnz	r0, 8004dfe <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
 8004de2:	69a1      	ldr	r1, [r4, #24]
 8004de4:	4630      	mov	r0, r6
 8004de6:	f7ff fbb9 	bl	800455c <move_window>
			if (res != FR_OK) break;
 8004dea:	4603      	mov	r3, r0
 8004dec:	b938      	cbnz	r0, 8004dfe <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004dee:	69e2      	ldr	r2, [r4, #28]
 8004df0:	7812      	ldrb	r2, [r2, #0]
 8004df2:	2ae5      	cmp	r2, #229	; 0xe5
 8004df4:	d0ec      	beq.n	8004dd0 <dir_alloc+0x16>
 8004df6:	2a00      	cmp	r2, #0
 8004df8:	d0ea      	beq.n	8004dd0 <dir_alloc+0x16>
				n = 0;					/* Not a blank entry. Restart to search */
 8004dfa:	2500      	movs	r5, #0
 8004dfc:	e7eb      	b.n	8004dd6 <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d001      	beq.n	8004e06 <dir_alloc+0x4c>
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004e06:	2307      	movs	r3, #7
 8004e08:	e7fb      	b.n	8004e02 <dir_alloc+0x48>

08004e0a <dir_read>:
{
 8004e0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e0e:	4604      	mov	r4, r0
 8004e10:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
 8004e12:	6807      	ldr	r7, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 8004e14:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8004e18:	464e      	mov	r6, r9
	FRESULT res = FR_NO_FILE;
 8004e1a:	2504      	movs	r5, #4
	while (dp->sect) {
 8004e1c:	e02e      	b.n	8004e7c <dir_read+0x72>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8004e1e:	2b0f      	cmp	r3, #15
 8004e20:	d119      	bne.n	8004e56 <dir_read+0x4c>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8004e22:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004e26:	d006      	beq.n	8004e36 <dir_read+0x2c>
						sum = dp->dir[LDIR_Chksum];
 8004e28:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= ~LLEF; ord = c;
 8004e2c:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 8004e30:	6923      	ldr	r3, [r4, #16]
 8004e32:	6263      	str	r3, [r4, #36]	; 0x24
						c &= ~LLEF; ord = c;
 8004e34:	4616      	mov	r6, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(dp->lfn, dp->dir)) ? ord - 1 : 0xFF;
 8004e36:	42b2      	cmp	r2, r6
 8004e38:	d001      	beq.n	8004e3e <dir_read+0x34>
 8004e3a:	26ff      	movs	r6, #255	; 0xff
 8004e3c:	e018      	b.n	8004e70 <dir_read+0x66>
 8004e3e:	7b4b      	ldrb	r3, [r1, #13]
 8004e40:	454b      	cmp	r3, r9
 8004e42:	d001      	beq.n	8004e48 <dir_read+0x3e>
 8004e44:	26ff      	movs	r6, #255	; 0xff
 8004e46:	e013      	b.n	8004e70 <dir_read+0x66>
 8004e48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004e4a:	f7ff fa3b 	bl	80042c4 <pick_lfn>
 8004e4e:	b388      	cbz	r0, 8004eb4 <dir_read+0xaa>
 8004e50:	3e01      	subs	r6, #1
 8004e52:	b2f6      	uxtb	r6, r6
 8004e54:	e00c      	b.n	8004e70 <dir_read+0x66>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8004e56:	b926      	cbnz	r6, 8004e62 <dir_read+0x58>
 8004e58:	4608      	mov	r0, r1
 8004e5a:	f7ff fb03 	bl	8004464 <sum_sfn>
 8004e5e:	4548      	cmp	r0, r9
 8004e60:	d02b      	beq.n	8004eba <dir_read+0xb0>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8004e62:	f04f 33ff 	mov.w	r3, #4294967295
 8004e66:	6263      	str	r3, [r4, #36]	; 0x24
 8004e68:	e027      	b.n	8004eba <dir_read+0xb0>
				ord = 0xFF;
 8004e6a:	26ff      	movs	r6, #255	; 0xff
 8004e6c:	e000      	b.n	8004e70 <dir_read+0x66>
 8004e6e:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 8004e70:	2100      	movs	r1, #0
 8004e72:	4620      	mov	r0, r4
 8004e74:	f7ff ff1c 	bl	8004cb0 <dir_next>
		if (res != FR_OK) break;
 8004e78:	4605      	mov	r5, r0
 8004e7a:	b9f0      	cbnz	r0, 8004eba <dir_read+0xb0>
	while (dp->sect) {
 8004e7c:	69a1      	ldr	r1, [r4, #24]
 8004e7e:	b1e1      	cbz	r1, 8004eba <dir_read+0xb0>
		res = move_window(fs, dp->sect);
 8004e80:	4638      	mov	r0, r7
 8004e82:	f7ff fb6b 	bl	800455c <move_window>
		if (res != FR_OK) break;
 8004e86:	4605      	mov	r5, r0
 8004e88:	b9b8      	cbnz	r0, 8004eba <dir_read+0xb0>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8004e8a:	69e1      	ldr	r1, [r4, #28]
 8004e8c:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
 8004e8e:	b19a      	cbz	r2, 8004eb8 <dir_read+0xae>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8004e90:	7acb      	ldrb	r3, [r1, #11]
 8004e92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e96:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8004e98:	2ae5      	cmp	r2, #229	; 0xe5
 8004e9a:	d0e6      	beq.n	8004e6a <dir_read+0x60>
 8004e9c:	2a2e      	cmp	r2, #46	; 0x2e
 8004e9e:	d0e6      	beq.n	8004e6e <dir_read+0x64>
 8004ea0:	f023 0020 	bic.w	r0, r3, #32
 8004ea4:	2808      	cmp	r0, #8
 8004ea6:	bf14      	ite	ne
 8004ea8:	2000      	movne	r0, #0
 8004eaa:	2001      	moveq	r0, #1
 8004eac:	4540      	cmp	r0, r8
 8004eae:	d0b6      	beq.n	8004e1e <dir_read+0x14>
				ord = 0xFF;
 8004eb0:	26ff      	movs	r6, #255	; 0xff
 8004eb2:	e7dd      	b.n	8004e70 <dir_read+0x66>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(dp->lfn, dp->dir)) ? ord - 1 : 0xFF;
 8004eb4:	26ff      	movs	r6, #255	; 0xff
 8004eb6:	e7db      	b.n	8004e70 <dir_read+0x66>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
 8004eb8:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8004eba:	b10d      	cbz	r5, 8004ec0 <dir_read+0xb6>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61a3      	str	r3, [r4, #24]
}
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004ec6 <dir_remove>:
{
 8004ec6:	b570      	push	{r4, r5, r6, lr}
 8004ec8:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8004eca:	6805      	ldr	r5, [r0, #0]
	DWORD last = dp->dptr;
 8004ecc:	6906      	ldr	r6, [r0, #16]
	res = dp->blk_ofs == 0xFFFFFFFF ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8004ece:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004ed0:	f1b1 3fff 	cmp.w	r1, #4294967295
 8004ed4:	d118      	bne.n	8004f08 <dir_remove+0x42>
			res = move_window(fs, dp->sect);
 8004ed6:	69a1      	ldr	r1, [r4, #24]
 8004ed8:	4628      	mov	r0, r5
 8004eda:	f7ff fb3f 	bl	800455c <move_window>
			if (res != FR_OK) break;
 8004ede:	4603      	mov	r3, r0
 8004ee0:	b970      	cbnz	r0, 8004f00 <dir_remove+0x3a>
				dp->dir[DIR_Name] = DDEM;
 8004ee2:	69e2      	ldr	r2, [r4, #28]
 8004ee4:	21e5      	movs	r1, #229	; 0xe5
 8004ee6:	7011      	strb	r1, [r2, #0]
			fs->wflag = 1;
 8004ee8:	2201      	movs	r2, #1
 8004eea:	70ea      	strb	r2, [r5, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8004eec:	6922      	ldr	r2, [r4, #16]
 8004eee:	42b2      	cmp	r2, r6
 8004ef0:	d206      	bcs.n	8004f00 <dir_remove+0x3a>
			res = dir_next(dp, 0);	/* Next entry */
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	f7ff fedb 	bl	8004cb0 <dir_next>
		} while (res == FR_OK);
 8004efa:	4603      	mov	r3, r0
 8004efc:	2800      	cmp	r0, #0
 8004efe:	d0ea      	beq.n	8004ed6 <dir_remove+0x10>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d007      	beq.n	8004f14 <dir_remove+0x4e>
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	bd70      	pop	{r4, r5, r6, pc}
	res = dp->blk_ofs == 0xFFFFFFFF ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8004f08:	f7ff fd59 	bl	80049be <dir_sdi>
	if (res == FR_OK) {
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d0e1      	beq.n	8004ed6 <dir_remove+0x10>
 8004f12:	e7f7      	b.n	8004f04 <dir_remove+0x3e>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8004f14:	2302      	movs	r3, #2
 8004f16:	e7f5      	b.n	8004f04 <dir_remove+0x3e>

08004f18 <create_name>:
{
 8004f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	4680      	mov	r8, r0
 8004f20:	468a      	mov	sl, r1
	p = *path; lfn = dp->lfn; si = di = 0;
 8004f22:	f8d1 9000 	ldr.w	r9, [r1]
 8004f26:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8004f28:	2400      	movs	r4, #0
 8004f2a:	e011      	b.n	8004f50 <create_name+0x38>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator */
 8004f2c:	3601      	adds	r6, #1
 8004f2e:	eb09 0206 	add.w	r2, r9, r6
 8004f32:	f819 3006 	ldrb.w	r3, [r9, r6]
 8004f36:	2b2f      	cmp	r3, #47	; 0x2f
 8004f38:	d0f8      	beq.n	8004f2c <create_name+0x14>
 8004f3a:	2b5c      	cmp	r3, #92	; 0x5c
 8004f3c:	d0f6      	beq.n	8004f2c <create_name+0x14>
	*path = &p[si];						/* Return pointer to the next segment */
 8004f3e:	f8ca 2000 	str.w	r2, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004f42:	281f      	cmp	r0, #31
 8004f44:	d821      	bhi.n	8004f8a <create_name+0x72>
 8004f46:	2704      	movs	r7, #4
 8004f48:	e022      	b.n	8004f90 <create_name+0x78>
		lfn[di++] = w;					/* Store the Unicode character */
 8004f4a:	f825 7014 	strh.w	r7, [r5, r4, lsl #1]
		w = p[si++];					/* Get a character */
 8004f4e:	4634      	mov	r4, r6
 8004f50:	1c66      	adds	r6, r4, #1
 8004f52:	f819 0004 	ldrb.w	r0, [r9, r4]
		if (w < ' ' || w == '/' || w == '\\') {		/* Break on end of segment */
 8004f56:	281f      	cmp	r0, #31
 8004f58:	d9e9      	bls.n	8004f2e <create_name+0x16>
 8004f5a:	282f      	cmp	r0, #47	; 0x2f
 8004f5c:	d0e7      	beq.n	8004f2e <create_name+0x16>
 8004f5e:	285c      	cmp	r0, #92	; 0x5c
 8004f60:	d0e5      	beq.n	8004f2e <create_name+0x16>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004f62:	2cfe      	cmp	r4, #254	; 0xfe
 8004f64:	f200 80df 	bhi.w	8005126 <create_name+0x20e>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004f68:	2101      	movs	r1, #1
 8004f6a:	f000 ffe9 	bl	8005f40 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004f6e:	4607      	mov	r7, r0
 8004f70:	2800      	cmp	r0, #0
 8004f72:	f000 80da 	beq.w	800512a <create_name+0x212>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8004f76:	287f      	cmp	r0, #127	; 0x7f
 8004f78:	d8e7      	bhi.n	8004f4a <create_name+0x32>
 8004f7a:	4601      	mov	r1, r0
 8004f7c:	486d      	ldr	r0, [pc, #436]	; (8005134 <create_name+0x21c>)
 8004f7e:	f7ff f966 	bl	800424e <chk_chr>
 8004f82:	2800      	cmp	r0, #0
 8004f84:	d0e1      	beq.n	8004f4a <create_name+0x32>
 8004f86:	2006      	movs	r0, #6
 8004f88:	e086      	b.n	8005098 <create_name+0x180>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004f8a:	2700      	movs	r7, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004f8c:	e000      	b.n	8004f90 <create_name+0x78>
		di--;
 8004f8e:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004f90:	b144      	cbz	r4, 8004fa4 <create_name+0x8c>
		w = lfn[di - 1];
 8004f92:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8004f96:	3b01      	subs	r3, #1
 8004f98:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d0f6      	beq.n	8004f8e <create_name+0x76>
 8004fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8004fa2:	d0f4      	beq.n	8004f8e <create_name+0x76>
	lfn[di] = 0;						/* LFN is created */
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8004faa:	2c00      	cmp	r4, #0
 8004fac:	f000 80bf 	beq.w	800512e <create_name+0x216>
	mem_set(dp->fn, ' ', 11);
 8004fb0:	220b      	movs	r2, #11
 8004fb2:	2120      	movs	r1, #32
 8004fb4:	f8d8 0020 	ldr.w	r0, [r8, #32]
 8004fb8:	f7ff f935 	bl	8004226 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	e000      	b.n	8004fc2 <create_name+0xaa>
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8004fc6:	2a20      	cmp	r2, #32
 8004fc8:	d0fa      	beq.n	8004fc0 <create_name+0xa8>
 8004fca:	2a2e      	cmp	r2, #46	; 0x2e
 8004fcc:	d0f8      	beq.n	8004fc0 <create_name+0xa8>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004fce:	b11b      	cbz	r3, 8004fd8 <create_name+0xc0>
 8004fd0:	f047 0703 	orr.w	r7, r7, #3
 8004fd4:	e000      	b.n	8004fd8 <create_name+0xc0>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004fd6:	3c01      	subs	r4, #1
 8004fd8:	b16c      	cbz	r4, 8004ff6 <create_name+0xde>
 8004fda:	f104 4200 	add.w	r2, r4, #2147483648	; 0x80000000
 8004fde:	3a01      	subs	r2, #1
 8004fe0:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8004fe4:	2a2e      	cmp	r2, #46	; 0x2e
 8004fe6:	d1f6      	bne.n	8004fd6 <create_name+0xbe>
 8004fe8:	f04f 0b08 	mov.w	fp, #8
 8004fec:	f04f 0a00 	mov.w	sl, #0
 8004ff0:	f8cd a004 	str.w	sl, [sp, #4]
 8004ff4:	e00a      	b.n	800500c <create_name+0xf4>
 8004ff6:	46a2      	mov	sl, r4
 8004ff8:	f04f 0b08 	mov.w	fp, #8
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	9201      	str	r2, [sp, #4]
 8005000:	e004      	b.n	800500c <create_name+0xf4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005002:	454c      	cmp	r4, r9
 8005004:	d00b      	beq.n	800501e <create_name+0x106>
			cf |= NS_LOSS | NS_LFN; continue;
 8005006:	f047 0703 	orr.w	r7, r7, #3
		w = lfn[si++];					/* Get an LFN character */
 800500a:	464b      	mov	r3, r9
 800500c:	f103 0901 	add.w	r9, r3, #1
 8005010:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 8005014:	b1fe      	cbz	r6, 8005056 <create_name+0x13e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005016:	2e20      	cmp	r6, #32
 8005018:	d0f5      	beq.n	8005006 <create_name+0xee>
 800501a:	2e2e      	cmp	r6, #46	; 0x2e
 800501c:	d0f1      	beq.n	8005002 <create_name+0xea>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800501e:	45da      	cmp	sl, fp
 8005020:	d210      	bcs.n	8005044 <create_name+0x12c>
 8005022:	454c      	cmp	r4, r9
 8005024:	d00e      	beq.n	8005044 <create_name+0x12c>
		if (w >= 0x80) {				/* Non ASCII character */
 8005026:	2e7f      	cmp	r6, #127	; 0x7f
 8005028:	d846      	bhi.n	80050b8 <create_name+0x1a0>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800502a:	2e00      	cmp	r6, #0
 800502c:	d151      	bne.n	80050d2 <create_name+0x1ba>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800502e:	f047 0703 	orr.w	r7, r7, #3
 8005032:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8005034:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8005038:	f803 600a 	strb.w	r6, [r3, sl]
		w = lfn[si++];					/* Get an LFN character */
 800503c:	464b      	mov	r3, r9
		dp->fn[i++] = (BYTE)w;
 800503e:	f10a 0a01 	add.w	sl, sl, #1
 8005042:	e7e3      	b.n	800500c <create_name+0xf4>
			if (ni == 11) {				/* Long extension */
 8005044:	f1bb 0f0b 	cmp.w	fp, #11
 8005048:	d029      	beq.n	800509e <create_name+0x186>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800504a:	454c      	cmp	r4, r9
 800504c:	d001      	beq.n	8005052 <create_name+0x13a>
 800504e:	f047 0703 	orr.w	r7, r7, #3
			if (si > di) break;			/* No extension */
 8005052:	454c      	cmp	r4, r9
 8005054:	d226      	bcs.n	80050a4 <create_name+0x18c>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005056:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800505a:	781a      	ldrb	r2, [r3, #0]
 800505c:	2ae5      	cmp	r2, #229	; 0xe5
 800505e:	d054      	beq.n	800510a <create_name+0x1f2>
	if (ni == 8) b <<= 2;
 8005060:	f1bb 0f08 	cmp.w	fp, #8
 8005064:	d054      	beq.n	8005110 <create_name+0x1f8>
 8005066:	9b01      	ldr	r3, [sp, #4]
 8005068:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800506c:	2a0c      	cmp	r2, #12
 800506e:	d003      	beq.n	8005078 <create_name+0x160>
 8005070:	f003 0303 	and.w	r3, r3, #3
 8005074:	2b03      	cmp	r3, #3
 8005076:	d101      	bne.n	800507c <create_name+0x164>
 8005078:	f047 0702 	orr.w	r7, r7, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800507c:	f017 0f02 	tst.w	r7, #2
 8005080:	d106      	bne.n	8005090 <create_name+0x178>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005082:	9b01      	ldr	r3, [sp, #4]
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	2b01      	cmp	r3, #1
 800508a:	d046      	beq.n	800511a <create_name+0x202>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800508c:	2a04      	cmp	r2, #4
 800508e:	d047      	beq.n	8005120 <create_name+0x208>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005090:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8005094:	72df      	strb	r7, [r3, #11]
	return FR_OK;
 8005096:	2000      	movs	r0, #0
}
 8005098:	b003      	add	sp, #12
 800509a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 800509e:	f047 0703 	orr.w	r7, r7, #3
 80050a2:	e7d8      	b.n	8005056 <create_name+0x13e>
			b <<= 2; continue;
 80050a4:	9b01      	ldr	r3, [sp, #4]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80050ac:	4623      	mov	r3, r4
 80050ae:	f04f 0b0b 	mov.w	fp, #11
 80050b2:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 80050b6:	e7a9      	b.n	800500c <create_name+0xf4>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80050b8:	2100      	movs	r1, #0
 80050ba:	4630      	mov	r0, r6
 80050bc:	f000 ff40 	bl	8005f40 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80050c0:	4606      	mov	r6, r0
 80050c2:	b118      	cbz	r0, 80050cc <create_name+0x1b4>
 80050c4:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
 80050c8:	4b1b      	ldr	r3, [pc, #108]	; (8005138 <create_name+0x220>)
 80050ca:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 80050cc:	f047 0702 	orr.w	r7, r7, #2
 80050d0:	e7ab      	b.n	800502a <create_name+0x112>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80050d2:	4631      	mov	r1, r6
 80050d4:	4819      	ldr	r0, [pc, #100]	; (800513c <create_name+0x224>)
 80050d6:	f7ff f8ba 	bl	800424e <chk_chr>
 80050da:	2800      	cmp	r0, #0
 80050dc:	d1a7      	bne.n	800502e <create_name+0x116>
				if (IsUpper(w)) {		/* ASCII large capital */
 80050de:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b19      	cmp	r3, #25
 80050e6:	d804      	bhi.n	80050f2 <create_name+0x1da>
					b |= 2;
 80050e8:	9b01      	ldr	r3, [sp, #4]
 80050ea:	f043 0302 	orr.w	r3, r3, #2
 80050ee:	9301      	str	r3, [sp, #4]
 80050f0:	e7a0      	b.n	8005034 <create_name+0x11c>
					if (IsLower(w)) {	/* ASCII small capital */
 80050f2:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b19      	cmp	r3, #25
 80050fa:	d89b      	bhi.n	8005034 <create_name+0x11c>
						b |= 1; w -= 0x20;
 80050fc:	9b01      	ldr	r3, [sp, #4]
 80050fe:	f043 0301 	orr.w	r3, r3, #1
 8005102:	9301      	str	r3, [sp, #4]
 8005104:	3e20      	subs	r6, #32
 8005106:	b2b6      	uxth	r6, r6
 8005108:	e794      	b.n	8005034 <create_name+0x11c>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800510a:	2205      	movs	r2, #5
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	e7a7      	b.n	8005060 <create_name+0x148>
	if (ni == 8) b <<= 2;
 8005110:	9b01      	ldr	r3, [sp, #4]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	b2db      	uxtb	r3, r3
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	e7a5      	b.n	8005066 <create_name+0x14e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800511a:	f047 0710 	orr.w	r7, r7, #16
 800511e:	e7b5      	b.n	800508c <create_name+0x174>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005120:	f047 0708 	orr.w	r7, r7, #8
 8005124:	e7b4      	b.n	8005090 <create_name+0x178>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005126:	2006      	movs	r0, #6
 8005128:	e7b6      	b.n	8005098 <create_name+0x180>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800512a:	2006      	movs	r0, #6
 800512c:	e7b4      	b.n	8005098 <create_name+0x180>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800512e:	2006      	movs	r0, #6
 8005130:	e7b2      	b.n	8005098 <create_name+0x180>
 8005132:	bf00      	nop
 8005134:	08006478 	.word	0x08006478
 8005138:	080063e8 	.word	0x080063e8
 800513c:	08006484 	.word	0x08006484

08005140 <get_fileinfo>:
{
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	fno->fname[0] = 0;		/* Invaidate file info */
 8005142:	2300      	movs	r3, #0
 8005144:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005146:	6983      	ldr	r3, [r0, #24]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d06b      	beq.n	8005224 <get_fileinfo+0xe4>
 800514c:	460d      	mov	r5, r1
 800514e:	4606      	mov	r6, r0
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8005150:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005156:	d013      	beq.n	8005180 <get_fileinfo+0x40>
			i = 0; lfn = dp->lfn;
 8005158:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800515a:	2400      	movs	r4, #0
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800515c:	1c9f      	adds	r7, r3, #2
 800515e:	8818      	ldrh	r0, [r3, #0]
 8005160:	b158      	cbz	r0, 800517a <get_fileinfo+0x3a>
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8005162:	2100      	movs	r1, #0
 8005164:	f000 feec 	bl	8005f40 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8005168:	b130      	cbz	r0, 8005178 <get_fileinfo+0x38>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800516a:	2cfe      	cmp	r4, #254	; 0xfe
 800516c:	d80c      	bhi.n	8005188 <get_fileinfo+0x48>
				fno->fname[i++] = (char)w;
 800516e:	192a      	adds	r2, r5, r4
 8005170:	7590      	strb	r0, [r2, #22]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 8005172:	463b      	mov	r3, r7
				fno->fname[i++] = (char)w;
 8005174:	3401      	adds	r4, #1
 8005176:	e7f1      	b.n	800515c <get_fileinfo+0x1c>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8005178:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800517a:	442c      	add	r4, r5
 800517c:	2300      	movs	r3, #0
 800517e:	75a3      	strb	r3, [r4, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8005180:	7da8      	ldrb	r0, [r5, #22]
	i = j = 0;
 8005182:	2200      	movs	r2, #0
 8005184:	4613      	mov	r3, r2
	while (i < 11) {		/* Copy name body and extension */
 8005186:	e012      	b.n	80051ae <get_fileinfo+0x6e>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8005188:	2400      	movs	r4, #0
 800518a:	e7f6      	b.n	800517a <get_fileinfo+0x3a>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800518c:	23e5      	movs	r3, #229	; 0xe5
 800518e:	e017      	b.n	80051c0 <get_fileinfo+0x80>
			if (!lfv) fno->fname[j] = '.';
 8005190:	b910      	cbnz	r0, 8005198 <get_fileinfo+0x58>
 8005192:	18a9      	adds	r1, r5, r2
 8005194:	272e      	movs	r7, #46	; 0x2e
 8005196:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
 8005198:	18a9      	adds	r1, r5, r2
 800519a:	272e      	movs	r7, #46	; 0x2e
 800519c:	724f      	strb	r7, [r1, #9]
 800519e:	3201      	adds	r2, #1
 80051a0:	e010      	b.n	80051c4 <get_fileinfo+0x84>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY))) {
 80051a2:	2110      	movs	r1, #16
 80051a4:	e01c      	b.n	80051e0 <get_fileinfo+0xa0>
			fno->fname[j] = c;
 80051a6:	18a9      	adds	r1, r5, r2
 80051a8:	758b      	strb	r3, [r1, #22]
		j++;
 80051aa:	3201      	adds	r2, #1
			if (IsUpper(c) && (dp->dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY))) {
 80051ac:	4623      	mov	r3, r4
	while (i < 11) {		/* Copy name body and extension */
 80051ae:	2b0a      	cmp	r3, #10
 80051b0:	d81b      	bhi.n	80051ea <get_fileinfo+0xaa>
		c = (TCHAR)dp->dir[i++];
 80051b2:	69f1      	ldr	r1, [r6, #28]
 80051b4:	1c5c      	adds	r4, r3, #1
 80051b6:	5ccb      	ldrb	r3, [r1, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d0f7      	beq.n	80051ac <get_fileinfo+0x6c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80051bc:	2b05      	cmp	r3, #5
 80051be:	d0e5      	beq.n	800518c <get_fileinfo+0x4c>
		if (i == 9) {						/* Insert a . if extension is exist */
 80051c0:	2c09      	cmp	r4, #9
 80051c2:	d0e5      	beq.n	8005190 <get_fileinfo+0x50>
		fno->altname[j] = c;
 80051c4:	18a9      	adds	r1, r5, r2
 80051c6:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d1ee      	bne.n	80051aa <get_fileinfo+0x6a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY))) {
 80051cc:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
 80051d0:	b2c9      	uxtb	r1, r1
 80051d2:	2919      	cmp	r1, #25
 80051d4:	d8e7      	bhi.n	80051a6 <get_fileinfo+0x66>
 80051d6:	69f1      	ldr	r1, [r6, #28]
 80051d8:	7b0f      	ldrb	r7, [r1, #12]
 80051da:	2c08      	cmp	r4, #8
 80051dc:	d8e1      	bhi.n	80051a2 <get_fileinfo+0x62>
 80051de:	2108      	movs	r1, #8
 80051e0:	420f      	tst	r7, r1
 80051e2:	d0e0      	beq.n	80051a6 <get_fileinfo+0x66>
				c += 0x20;			/* To lower */
 80051e4:	3320      	adds	r3, #32
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	e7dd      	b.n	80051a6 <get_fileinfo+0x66>
	if (!lfv) {
 80051ea:	b930      	cbnz	r0, 80051fa <get_fileinfo+0xba>
		fno->fname[j] = 0;
 80051ec:	18ab      	adds	r3, r5, r2
 80051ee:	2100      	movs	r1, #0
 80051f0:	7599      	strb	r1, [r3, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80051f2:	69f3      	ldr	r3, [r6, #28]
 80051f4:	7b1b      	ldrb	r3, [r3, #12]
 80051f6:	b903      	cbnz	r3, 80051fa <get_fileinfo+0xba>
 80051f8:	460a      	mov	r2, r1
	fno->altname[j] = 0;	/* Terminate the SFN */
 80051fa:	442a      	add	r2, r5
 80051fc:	2300      	movs	r3, #0
 80051fe:	7253      	strb	r3, [r2, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8005200:	69f3      	ldr	r3, [r6, #28]
 8005202:	7adb      	ldrb	r3, [r3, #11]
 8005204:	722b      	strb	r3, [r5, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8005206:	69f0      	ldr	r0, [r6, #28]
 8005208:	301c      	adds	r0, #28
 800520a:	f7fe ffea 	bl	80041e2 <ld_dword>
 800520e:	6028      	str	r0, [r5, #0]
	fno->fdate = ld_word(dp->dir + DIR_WrtDate);	/* Date */
 8005210:	69f0      	ldr	r0, [r6, #28]
 8005212:	3018      	adds	r0, #24
 8005214:	f7fe ffe0 	bl	80041d8 <ld_word>
 8005218:	80a8      	strh	r0, [r5, #4]
	fno->ftime = ld_word(dp->dir + DIR_WrtTime);	/* Time */
 800521a:	69f0      	ldr	r0, [r6, #28]
 800521c:	3016      	adds	r0, #22
 800521e:	f7fe ffdb 	bl	80041d8 <ld_word>
 8005222:	80e8      	strh	r0, [r5, #6]
}
 8005224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005228 <cmp_lfn>:
{
 8005228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800522c:	4681      	mov	r9, r0
 800522e:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005230:	f101 001a 	add.w	r0, r1, #26
 8005234:	f7fe ffd0 	bl	80041d8 <ld_word>
 8005238:	bbb8      	cbnz	r0, 80052aa <cmp_lfn+0x82>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800523a:	783d      	ldrb	r5, [r7, #0]
 800523c:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8005240:	3d01      	subs	r5, #1
 8005242:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8005246:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800524a:	f04f 0801 	mov.w	r8, #1
 800524e:	2400      	movs	r4, #0
 8005250:	e004      	b.n	800525c <cmp_lfn+0x34>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005252:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005256:	4298      	cmp	r0, r3
 8005258:	d12e      	bne.n	80052b8 <cmp_lfn+0x90>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800525a:	3401      	adds	r4, #1
 800525c:	2c0c      	cmp	r4, #12
 800525e:	d818      	bhi.n	8005292 <cmp_lfn+0x6a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005260:	4b19      	ldr	r3, [pc, #100]	; (80052c8 <cmp_lfn+0xa0>)
 8005262:	5d18      	ldrb	r0, [r3, r4]
 8005264:	4438      	add	r0, r7
 8005266:	f7fe ffb7 	bl	80041d8 <ld_word>
 800526a:	4606      	mov	r6, r0
		if (wc) {
 800526c:	f1b8 0f00 	cmp.w	r8, #0
 8005270:	d0ef      	beq.n	8005252 <cmp_lfn+0x2a>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005272:	2dfe      	cmp	r5, #254	; 0xfe
 8005274:	d81c      	bhi.n	80052b0 <cmp_lfn+0x88>
 8005276:	f000 fe7f 	bl	8005f78 <ff_wtoupper>
 800527a:	4680      	mov	r8, r0
 800527c:	f105 0a01 	add.w	sl, r5, #1
 8005280:	f839 0015 	ldrh.w	r0, [r9, r5, lsl #1]
 8005284:	f000 fe78 	bl	8005f78 <ff_wtoupper>
 8005288:	4580      	cmp	r8, r0
 800528a:	d113      	bne.n	80052b4 <cmp_lfn+0x8c>
			wc = uc;
 800528c:	46b0      	mov	r8, r6
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800528e:	4655      	mov	r5, sl
 8005290:	e7e3      	b.n	800525a <cmp_lfn+0x32>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005292:	783b      	ldrb	r3, [r7, #0]
 8005294:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005298:	d010      	beq.n	80052bc <cmp_lfn+0x94>
 800529a:	f1b8 0f00 	cmp.w	r8, #0
 800529e:	d00f      	beq.n	80052c0 <cmp_lfn+0x98>
 80052a0:	f839 3015 	ldrh.w	r3, [r9, r5, lsl #1]
 80052a4:	b973      	cbnz	r3, 80052c4 <cmp_lfn+0x9c>
	return 1;		/* The part of LFN matched */
 80052a6:	2001      	movs	r0, #1
 80052a8:	e000      	b.n	80052ac <cmp_lfn+0x84>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80052aa:	2000      	movs	r0, #0
}
 80052ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;					/* Not matched */
 80052b0:	2000      	movs	r0, #0
 80052b2:	e7fb      	b.n	80052ac <cmp_lfn+0x84>
 80052b4:	2000      	movs	r0, #0
 80052b6:	e7f9      	b.n	80052ac <cmp_lfn+0x84>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80052b8:	2000      	movs	r0, #0
 80052ba:	e7f7      	b.n	80052ac <cmp_lfn+0x84>
	return 1;		/* The part of LFN matched */
 80052bc:	2001      	movs	r0, #1
 80052be:	e7f5      	b.n	80052ac <cmp_lfn+0x84>
 80052c0:	2001      	movs	r0, #1
 80052c2:	e7f3      	b.n	80052ac <cmp_lfn+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80052c4:	2000      	movs	r0, #0
 80052c6:	e7f1      	b.n	80052ac <cmp_lfn+0x84>
 80052c8:	08006468 	.word	0x08006468

080052cc <dir_find>:
{
 80052cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052d0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80052d2:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80052d6:	2100      	movs	r1, #0
 80052d8:	f7ff fb71 	bl	80049be <dir_sdi>
	if (res != FR_OK) return res;
 80052dc:	4606      	mov	r6, r0
 80052de:	2800      	cmp	r0, #0
 80052e0:	d15e      	bne.n	80053a0 <dir_find+0xd4>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80052e2:	f04f 33ff 	mov.w	r3, #4294967295
 80052e6:	6263      	str	r3, [r4, #36]	; 0x24
 80052e8:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80052ec:	464f      	mov	r7, r9
 80052ee:	e00a      	b.n	8005306 <dir_find+0x3a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80052f0:	f04f 33ff 	mov.w	r3, #4294967295
 80052f4:	6263      	str	r3, [r4, #36]	; 0x24
 80052f6:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 80052f8:	2100      	movs	r1, #0
 80052fa:	4620      	mov	r0, r4
 80052fc:	f7ff fcd8 	bl	8004cb0 <dir_next>
	} while (res == FR_OK);
 8005300:	4606      	mov	r6, r0
 8005302:	2800      	cmp	r0, #0
 8005304:	d14c      	bne.n	80053a0 <dir_find+0xd4>
		res = move_window(fs, dp->sect);
 8005306:	69a1      	ldr	r1, [r4, #24]
 8005308:	4640      	mov	r0, r8
 800530a:	f7ff f927 	bl	800455c <move_window>
		if (res != FR_OK) break;
 800530e:	4606      	mov	r6, r0
 8005310:	2800      	cmp	r0, #0
 8005312:	d145      	bne.n	80053a0 <dir_find+0xd4>
		c = dp->dir[DIR_Name];
 8005314:	69e5      	ldr	r5, [r4, #28]
 8005316:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005318:	2b00      	cmp	r3, #0
 800531a:	d040      	beq.n	800539e <dir_find+0xd2>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800531c:	7ae9      	ldrb	r1, [r5, #11]
 800531e:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 8005322:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005324:	2be5      	cmp	r3, #229	; 0xe5
 8005326:	d0e3      	beq.n	80052f0 <dir_find+0x24>
 8005328:	f011 0f08 	tst.w	r1, #8
 800532c:	d001      	beq.n	8005332 <dir_find+0x66>
 800532e:	2a0f      	cmp	r2, #15
 8005330:	d1de      	bne.n	80052f0 <dir_find+0x24>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005332:	2a0f      	cmp	r2, #15
 8005334:	d014      	beq.n	8005360 <dir_find+0x94>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005336:	b927      	cbnz	r7, 8005342 <dir_find+0x76>
 8005338:	4628      	mov	r0, r5
 800533a:	f7ff f893 	bl	8004464 <sum_sfn>
 800533e:	4548      	cmp	r0, r9
 8005340:	d02e      	beq.n	80053a0 <dir_find+0xd4>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005342:	6a21      	ldr	r1, [r4, #32]
 8005344:	7acb      	ldrb	r3, [r1, #11]
 8005346:	f013 0f01 	tst.w	r3, #1
 800534a:	d104      	bne.n	8005356 <dir_find+0x8a>
 800534c:	220b      	movs	r2, #11
 800534e:	4628      	mov	r0, r5
 8005350:	f7fe ff6e 	bl	8004230 <mem_cmp>
 8005354:	b320      	cbz	r0, 80053a0 <dir_find+0xd4>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005356:	f04f 33ff 	mov.w	r3, #4294967295
 800535a:	6263      	str	r3, [r4, #36]	; 0x24
 800535c:	27ff      	movs	r7, #255	; 0xff
 800535e:	e7cb      	b.n	80052f8 <dir_find+0x2c>
				if (dp->lfn) {
 8005360:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005362:	2800      	cmp	r0, #0
 8005364:	d0c8      	beq.n	80052f8 <dir_find+0x2c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005366:	f013 0f40 	tst.w	r3, #64	; 0x40
 800536a:	d006      	beq.n	800537a <dir_find+0xae>
						sum = dp->dir[LDIR_Chksum];
 800536c:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8005370:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005374:	6922      	ldr	r2, [r4, #16]
 8005376:	6262      	str	r2, [r4, #36]	; 0x24
						c &= ~LLEF; ord = c;	/* LFN start order */
 8005378:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dp->dir)) ? ord - 1 : 0xFF;
 800537a:	42bb      	cmp	r3, r7
 800537c:	d001      	beq.n	8005382 <dir_find+0xb6>
 800537e:	27ff      	movs	r7, #255	; 0xff
 8005380:	e7ba      	b.n	80052f8 <dir_find+0x2c>
 8005382:	7b6b      	ldrb	r3, [r5, #13]
 8005384:	454b      	cmp	r3, r9
 8005386:	d001      	beq.n	800538c <dir_find+0xc0>
 8005388:	27ff      	movs	r7, #255	; 0xff
 800538a:	e7b5      	b.n	80052f8 <dir_find+0x2c>
 800538c:	4629      	mov	r1, r5
 800538e:	f7ff ff4b 	bl	8005228 <cmp_lfn>
 8005392:	b110      	cbz	r0, 800539a <dir_find+0xce>
 8005394:	3f01      	subs	r7, #1
 8005396:	b2ff      	uxtb	r7, r7
 8005398:	e7ae      	b.n	80052f8 <dir_find+0x2c>
 800539a:	27ff      	movs	r7, #255	; 0xff
 800539c:	e7ac      	b.n	80052f8 <dir_find+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800539e:	2604      	movs	r6, #4
}
 80053a0:	4630      	mov	r0, r6
 80053a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080053a6 <follow_path>:
{
 80053a6:	b530      	push	{r4, r5, lr}
 80053a8:	b083      	sub	sp, #12
 80053aa:	4604      	mov	r4, r0
 80053ac:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 80053ae:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80053b0:	e001      	b.n	80053b6 <follow_path+0x10>
 80053b2:	3301      	adds	r3, #1
 80053b4:	9301      	str	r3, [sp, #4]
 80053b6:	9b01      	ldr	r3, [sp, #4]
 80053b8:	781a      	ldrb	r2, [r3, #0]
 80053ba:	2a2f      	cmp	r2, #47	; 0x2f
 80053bc:	d0f9      	beq.n	80053b2 <follow_path+0xc>
 80053be:	2a5c      	cmp	r2, #92	; 0x5c
 80053c0:	d0f7      	beq.n	80053b2 <follow_path+0xc>
		obj->sclust = 0;					/* Start from the root directory */
 80053c2:	2200      	movs	r2, #0
 80053c4:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	2b1f      	cmp	r3, #31
 80053ca:	d91d      	bls.n	8005408 <follow_path+0x62>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80053cc:	a901      	add	r1, sp, #4
 80053ce:	4620      	mov	r0, r4
 80053d0:	f7ff fda2 	bl	8004f18 <create_name>
			if (res != FR_OK) break;
 80053d4:	4603      	mov	r3, r0
 80053d6:	b9f8      	cbnz	r0, 8005418 <follow_path+0x72>
			res = dir_find(dp);				/* Find an object with the segment name */
 80053d8:	4620      	mov	r0, r4
 80053da:	f7ff ff77 	bl	80052cc <dir_find>
			ns = dp->fn[NSFLAG];
 80053de:	6a23      	ldr	r3, [r4, #32]
 80053e0:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80053e2:	4603      	mov	r3, r0
 80053e4:	b9d8      	cbnz	r0, 800541e <follow_path+0x78>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80053e6:	f012 0f04 	tst.w	r2, #4
 80053ea:	d115      	bne.n	8005418 <follow_path+0x72>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80053ec:	79a3      	ldrb	r3, [r4, #6]
 80053ee:	f013 0f10 	tst.w	r3, #16
 80053f2:	d01b      	beq.n	800542c <follow_path+0x86>
				obj->sclust = ld_clust(fs, &fs->win[dp->dptr % SS(fs)]);	/* Open next directory */
 80053f4:	6921      	ldr	r1, [r4, #16]
 80053f6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80053fa:	3130      	adds	r1, #48	; 0x30
 80053fc:	4429      	add	r1, r5
 80053fe:	4628      	mov	r0, r5
 8005400:	f7fe ff39 	bl	8004276 <ld_clust>
 8005404:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005406:	e7e1      	b.n	80053cc <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 8005408:	6a23      	ldr	r3, [r4, #32]
 800540a:	2280      	movs	r2, #128	; 0x80
 800540c:	72da      	strb	r2, [r3, #11]
		res = dir_sdi(dp, 0);
 800540e:	2100      	movs	r1, #0
 8005410:	4620      	mov	r0, r4
 8005412:	f7ff fad4 	bl	80049be <dir_sdi>
 8005416:	4603      	mov	r3, r0
}
 8005418:	4618      	mov	r0, r3
 800541a:	b003      	add	sp, #12
 800541c:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 800541e:	2804      	cmp	r0, #4
 8005420:	d1fa      	bne.n	8005418 <follow_path+0x72>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005422:	f012 0f04 	tst.w	r2, #4
 8005426:	d1f7      	bne.n	8005418 <follow_path+0x72>
 8005428:	2305      	movs	r3, #5
 800542a:	e7f5      	b.n	8005418 <follow_path+0x72>
				res = FR_NO_PATH; break;
 800542c:	2305      	movs	r3, #5
 800542e:	e7f3      	b.n	8005418 <follow_path+0x72>

08005430 <dir_register>:
{
 8005430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005434:	b084      	sub	sp, #16
	FATFS *fs = dp->obj.fs;
 8005436:	6806      	ldr	r6, [r0, #0]
	fn = dp->fn; lfn = dp->lfn;
 8005438:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800543c:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
	if (fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005440:	f89a 300b 	ldrb.w	r3, [sl, #11]
 8005444:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8005448:	f040 8089 	bne.w	800555e <dir_register+0x12e>
	for (nlen = 0; lfn[nlen]; nlen++) ;	/* Get lfn length */
 800544c:	2400      	movs	r4, #0
 800544e:	e000      	b.n	8005452 <dir_register+0x22>
 8005450:	3401      	adds	r4, #1
 8005452:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1fa      	bne.n	8005450 <dir_register+0x20>
 800545a:	4605      	mov	r5, r0
	mem_cpy(sn, fn, 12);
 800545c:	220c      	movs	r2, #12
 800545e:	4651      	mov	r1, sl
 8005460:	a801      	add	r0, sp, #4
 8005462:	f7fe fed7 	bl	8004214 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005466:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800546a:	f013 0f01 	tst.w	r3, #1
 800546e:	d01e      	beq.n	80054ae <dir_register+0x7e>
		fn[NSFLAG] = 0; dp->lfn = 0;		/* Find only SFN */
 8005470:	2300      	movs	r3, #0
 8005472:	f88a 300b 	strb.w	r3, [sl, #11]
 8005476:	62ab      	str	r3, [r5, #40]	; 0x28
		for (n = 1; n < 100; n++) {
 8005478:	2701      	movs	r7, #1
 800547a:	2f63      	cmp	r7, #99	; 0x63
 800547c:	d80c      	bhi.n	8005498 <dir_register+0x68>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800547e:	463b      	mov	r3, r7
 8005480:	4642      	mov	r2, r8
 8005482:	a901      	add	r1, sp, #4
 8005484:	4650      	mov	r0, sl
 8005486:	f7fe ff9d 	bl	80043c4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800548a:	4628      	mov	r0, r5
 800548c:	f7ff ff1e 	bl	80052cc <dir_find>
			if (res != FR_OK) break;
 8005490:	4681      	mov	r9, r0
 8005492:	b908      	cbnz	r0, 8005498 <dir_register+0x68>
		for (n = 1; n < 100; n++) {
 8005494:	3701      	adds	r7, #1
 8005496:	e7f0      	b.n	800547a <dir_register+0x4a>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005498:	2f64      	cmp	r7, #100	; 0x64
 800549a:	d066      	beq.n	800556a <dir_register+0x13a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800549c:	f1b9 0f04 	cmp.w	r9, #4
 80054a0:	d15f      	bne.n	8005562 <dir_register+0x132>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80054a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80054a6:	f88a 300b 	strb.w	r3, [sl, #11]
 80054aa:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80054ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80054b2:	f013 0f02 	tst.w	r3, #2
 80054b6:	d02a      	beq.n	800550e <dir_register+0xde>
 80054b8:	340c      	adds	r4, #12
 80054ba:	4b2d      	ldr	r3, [pc, #180]	; (8005570 <dir_register+0x140>)
 80054bc:	fba3 3404 	umull	r3, r4, r3, r4
 80054c0:	08a4      	lsrs	r4, r4, #2
 80054c2:	3401      	adds	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80054c4:	4621      	mov	r1, r4
 80054c6:	4628      	mov	r0, r5
 80054c8:	f7ff fc77 	bl	8004dba <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80054cc:	4681      	mov	r9, r0
 80054ce:	b908      	cbnz	r0, 80054d4 <dir_register+0xa4>
 80054d0:	3c01      	subs	r4, #1
 80054d2:	d11e      	bne.n	8005512 <dir_register+0xe2>
	if (res == FR_OK) {
 80054d4:	f1b9 0f00 	cmp.w	r9, #0
 80054d8:	d143      	bne.n	8005562 <dir_register+0x132>
		res = move_window(fs, dp->sect);
 80054da:	69a9      	ldr	r1, [r5, #24]
 80054dc:	4630      	mov	r0, r6
 80054de:	f7ff f83d 	bl	800455c <move_window>
		if (res == FR_OK) {
 80054e2:	4681      	mov	r9, r0
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d13c      	bne.n	8005562 <dir_register+0x132>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80054e8:	2220      	movs	r2, #32
 80054ea:	2100      	movs	r1, #0
 80054ec:	69e8      	ldr	r0, [r5, #28]
 80054ee:	f7fe fe9a 	bl	8004226 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80054f2:	220b      	movs	r2, #11
 80054f4:	6a29      	ldr	r1, [r5, #32]
 80054f6:	69e8      	ldr	r0, [r5, #28]
 80054f8:	f7fe fe8c 	bl	8004214 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80054fc:	6a2b      	ldr	r3, [r5, #32]
 80054fe:	7adb      	ldrb	r3, [r3, #11]
 8005500:	69ea      	ldr	r2, [r5, #28]
 8005502:	f003 0318 	and.w	r3, r3, #24
 8005506:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8005508:	2301      	movs	r3, #1
 800550a:	70f3      	strb	r3, [r6, #3]
 800550c:	e029      	b.n	8005562 <dir_register+0x132>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800550e:	2401      	movs	r4, #1
 8005510:	e7d8      	b.n	80054c4 <dir_register+0x94>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005512:	6929      	ldr	r1, [r5, #16]
 8005514:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 8005518:	4628      	mov	r0, r5
 800551a:	f7ff fa50 	bl	80049be <dir_sdi>
		if (res == FR_OK) {
 800551e:	4681      	mov	r9, r0
 8005520:	2800      	cmp	r0, #0
 8005522:	d1d7      	bne.n	80054d4 <dir_register+0xa4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005524:	6a28      	ldr	r0, [r5, #32]
 8005526:	f7fe ff9d 	bl	8004464 <sum_sfn>
 800552a:	4607      	mov	r7, r0
				res = move_window(fs, dp->sect);
 800552c:	69a9      	ldr	r1, [r5, #24]
 800552e:	4630      	mov	r0, r6
 8005530:	f7ff f814 	bl	800455c <move_window>
				if (res != FR_OK) break;
 8005534:	4681      	mov	r9, r0
 8005536:	2800      	cmp	r0, #0
 8005538:	d1cc      	bne.n	80054d4 <dir_register+0xa4>
				put_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800553a:	463b      	mov	r3, r7
 800553c:	b2e2      	uxtb	r2, r4
 800553e:	69e9      	ldr	r1, [r5, #28]
 8005540:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8005542:	f7fe ff03 	bl	800434c <put_lfn>
				fs->wflag = 1;
 8005546:	2301      	movs	r3, #1
 8005548:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800554a:	2100      	movs	r1, #0
 800554c:	4628      	mov	r0, r5
 800554e:	f7ff fbaf 	bl	8004cb0 <dir_next>
			} while (res == FR_OK && --nent);
 8005552:	4681      	mov	r9, r0
 8005554:	2800      	cmp	r0, #0
 8005556:	d1bd      	bne.n	80054d4 <dir_register+0xa4>
 8005558:	3c01      	subs	r4, #1
 800555a:	d1e7      	bne.n	800552c <dir_register+0xfc>
 800555c:	e7ba      	b.n	80054d4 <dir_register+0xa4>
	if (fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800555e:	f04f 0906 	mov.w	r9, #6
}
 8005562:	4648      	mov	r0, r9
 8005564:	b004      	add	sp, #16
 8005566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800556a:	f04f 0907 	mov.w	r9, #7
 800556e:	e7f8      	b.n	8005562 <dir_register+0x132>
 8005570:	4ec4ec4f 	.word	0x4ec4ec4f

08005574 <sync_fs>:
{
 8005574:	b570      	push	{r4, r5, r6, lr}
 8005576:	4604      	mov	r4, r0
	res = sync_window(fs);
 8005578:	f7fe ffc6 	bl	8004508 <sync_window>
	if (res == FR_OK) {
 800557c:	4605      	mov	r5, r0
 800557e:	b948      	cbnz	r0, 8005594 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005580:	7823      	ldrb	r3, [r4, #0]
 8005582:	2b03      	cmp	r3, #3
 8005584:	d008      	beq.n	8005598 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005586:	2200      	movs	r2, #0
 8005588:	4611      	mov	r1, r2
 800558a:	7860      	ldrb	r0, [r4, #1]
 800558c:	f7fd facb 	bl	8002b26 <disk_ioctl>
 8005590:	b100      	cbz	r0, 8005594 <sync_fs+0x20>
 8005592:	2501      	movs	r5, #1
}
 8005594:	4628      	mov	r0, r5
 8005596:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005598:	7923      	ldrb	r3, [r4, #4]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d1f3      	bne.n	8005586 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 800559e:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80055a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055a6:	2100      	movs	r1, #0
 80055a8:	4630      	mov	r0, r6
 80055aa:	f7fe fe3c 	bl	8004226 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80055ae:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80055b2:	f204 202e 	addw	r0, r4, #558	; 0x22e
 80055b6:	f7fe fe1f 	bl	80041f8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80055ba:	490f      	ldr	r1, [pc, #60]	; (80055f8 <sync_fs+0x84>)
 80055bc:	4630      	mov	r0, r6
 80055be:	f7fe fe1f 	bl	8004200 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80055c2:	490e      	ldr	r1, [pc, #56]	; (80055fc <sync_fs+0x88>)
 80055c4:	f504 7005 	add.w	r0, r4, #532	; 0x214
 80055c8:	f7fe fe1a 	bl	8004200 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80055cc:	6921      	ldr	r1, [r4, #16]
 80055ce:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80055d2:	f7fe fe15 	bl	8004200 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80055d6:	68e1      	ldr	r1, [r4, #12]
 80055d8:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80055dc:	f7fe fe10 	bl	8004200 <st_dword>
			fs->winsect = fs->volbase + 1;
 80055e0:	69e2      	ldr	r2, [r4, #28]
 80055e2:	3201      	adds	r2, #1
 80055e4:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80055e6:	2301      	movs	r3, #1
 80055e8:	4631      	mov	r1, r6
 80055ea:	7860      	ldrb	r0, [r4, #1]
 80055ec:	f7fd fa96 	bl	8002b1c <disk_write>
			fs->fsi_flag = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	7123      	strb	r3, [r4, #4]
 80055f4:	e7c7      	b.n	8005586 <sync_fs+0x12>
 80055f6:	bf00      	nop
 80055f8:	41615252 	.word	0x41615252
 80055fc:	61417272 	.word	0x61417272

08005600 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005600:	b510      	push	{r4, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	9001      	str	r0, [sp, #4]
 8005606:	9100      	str	r1, [sp, #0]
 8005608:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800560a:	a804      	add	r0, sp, #16
 800560c:	f840 1d04 	str.w	r1, [r0, #-4]!


	vol = get_ldnumber(&rp);
 8005610:	f7fe ff36 	bl	8004480 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005614:	2800      	cmp	r0, #0
 8005616:	db19      	blt.n	800564c <f_mount+0x4c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005618:	4b0e      	ldr	r3, [pc, #56]	; (8005654 <f_mount+0x54>)
 800561a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
 800561e:	b10b      	cbz	r3, 8005624 <f_mount+0x24>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005620:	2200      	movs	r2, #0
 8005622:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005624:	9b01      	ldr	r3, [sp, #4]
 8005626:	b10b      	cbz	r3, 800562c <f_mount+0x2c>
		fs->fs_type = 0;				/* Clear new fs object */
 8005628:	2200      	movs	r2, #0
 800562a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800562c:	9b01      	ldr	r3, [sp, #4]
 800562e:	4a09      	ldr	r2, [pc, #36]	; (8005654 <f_mount+0x54>)
 8005630:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005634:	b163      	cbz	r3, 8005650 <f_mount+0x50>
 8005636:	2c01      	cmp	r4, #1
 8005638:	d002      	beq.n	8005640 <f_mount+0x40>
 800563a:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800563c:	b004      	add	sp, #16
 800563e:	bd10      	pop	{r4, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005640:	2200      	movs	r2, #0
 8005642:	a901      	add	r1, sp, #4
 8005644:	4668      	mov	r0, sp
 8005646:	f7fe ffd3 	bl	80045f0 <find_volume>
	LEAVE_FF(fs, res);
 800564a:	e7f7      	b.n	800563c <f_mount+0x3c>
	if (vol < 0) return FR_INVALID_DRIVE;
 800564c:	200b      	movs	r0, #11
 800564e:	e7f5      	b.n	800563c <f_mount+0x3c>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005650:	2000      	movs	r0, #0
 8005652:	e7f3      	b.n	800563c <f_mount+0x3c>
 8005654:	20000fd8 	.word	0x20000fd8

08005658 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800565c:	b093      	sub	sp, #76	; 0x4c
 800565e:	9101      	str	r1, [sp, #4]
	DWORD dw, cl;
#endif
	DEF_NAMBUF;


	if (!fp) return FR_INVALID_OBJECT;
 8005660:	2800      	cmp	r0, #0
 8005662:	f000 80af 	beq.w	80057c4 <f_open+0x16c>
 8005666:	4604      	mov	r4, r0
 8005668:	4615      	mov	r5, r2
	fp->obj.fs = 0;		/* Clear file object */
 800566a:	2300      	movs	r3, #0
 800566c:	6003      	str	r3, [r0, #0]

	/* Get logical drive number */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800566e:	f002 071f 	and.w	r7, r2, #31
	res = find_volume(&path, &fs, mode);
 8005672:	463a      	mov	r2, r7
 8005674:	a906      	add	r1, sp, #24
 8005676:	a801      	add	r0, sp, #4
 8005678:	f7fe ffba 	bl	80045f0 <find_volume>
	if (res == FR_OK) {
 800567c:	4606      	mov	r6, r0
 800567e:	b118      	cbz	r0, 8005688 <f_open+0x30>

		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 8005680:	4630      	mov	r0, r6
 8005682:	b013      	add	sp, #76	; 0x4c
 8005684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 8005688:	9b06      	ldr	r3, [sp, #24]
 800568a:	9307      	str	r3, [sp, #28]
		INIT_NAMBUF(dj);
 800568c:	ab03      	add	r3, sp, #12
 800568e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005690:	4b4d      	ldr	r3, [pc, #308]	; (80057c8 <f_open+0x170>)
 8005692:	9311      	str	r3, [sp, #68]	; 0x44
		res = follow_path(&dj, path);	/* Follow the file path */
 8005694:	9901      	ldr	r1, [sp, #4]
 8005696:	a807      	add	r0, sp, #28
 8005698:	f7ff fe85 	bl	80053a6 <follow_path>
		if (res == FR_OK) {
 800569c:	4606      	mov	r6, r0
 800569e:	b920      	cbnz	r0, 80056aa <f_open+0x52>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80056a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056a2:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	db46      	blt.n	8005738 <f_open+0xe0>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80056aa:	f015 0f1c 	tst.w	r5, #28
 80056ae:	d054      	beq.n	800575a <f_open+0x102>
			if (res != FR_OK) {					/* No file, create new */
 80056b0:	2e00      	cmp	r6, #0
 80056b2:	d048      	beq.n	8005746 <f_open+0xee>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80056b4:	2e04      	cmp	r6, #4
 80056b6:	d041      	beq.n	800573c <f_open+0xe4>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80056b8:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80056bc:	2e00      	cmp	r6, #0
 80056be:	d15b      	bne.n	8005778 <f_open+0x120>
 80056c0:	f017 0f08 	tst.w	r7, #8
 80056c4:	d058      	beq.n	8005778 <f_open+0x120>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80056c6:	4d41      	ldr	r5, [pc, #260]	; (80057cc <f_open+0x174>)
 80056c8:	4629      	mov	r1, r5
 80056ca:	980e      	ldr	r0, [sp, #56]	; 0x38
 80056cc:	300e      	adds	r0, #14
 80056ce:	f7fe fd97 	bl	8004200 <st_dword>
					st_dword(dj.dir + DIR_WrtTime, dw);	/* Set modified time */
 80056d2:	4629      	mov	r1, r5
 80056d4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80056d6:	3016      	adds	r0, #22
 80056d8:	f7fe fd92 	bl	8004200 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80056dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056de:	2220      	movs	r2, #32
 80056e0:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80056e2:	9d06      	ldr	r5, [sp, #24]
 80056e4:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80056e8:	4641      	mov	r1, r8
 80056ea:	4628      	mov	r0, r5
 80056ec:	f7fe fdc3 	bl	8004276 <ld_clust>
 80056f0:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80056f2:	2200      	movs	r2, #0
 80056f4:	4641      	mov	r1, r8
 80056f6:	4628      	mov	r0, r5
 80056f8:	f7fe fdd0 	bl	800429c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80056fc:	2100      	movs	r1, #0
 80056fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005700:	301c      	adds	r0, #28
 8005702:	f7fe fd7d 	bl	8004200 <st_dword>
					fs->wflag = 1;
 8005706:	9b06      	ldr	r3, [sp, #24]
 8005708:	2201      	movs	r2, #1
 800570a:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800570c:	f1b9 0f00 	cmp.w	r9, #0
 8005710:	d032      	beq.n	8005778 <f_open+0x120>
						dw = fs->winsect;
 8005712:	9b06      	ldr	r3, [sp, #24]
 8005714:	6add      	ldr	r5, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8005716:	2200      	movs	r2, #0
 8005718:	4649      	mov	r1, r9
 800571a:	a807      	add	r0, sp, #28
 800571c:	f7ff fa89 	bl	8004c32 <remove_chain>
						if (res == FR_OK) {
 8005720:	4606      	mov	r6, r0
 8005722:	bb48      	cbnz	r0, 8005778 <f_open+0x120>
							res = move_window(fs, dw);
 8005724:	4629      	mov	r1, r5
 8005726:	9806      	ldr	r0, [sp, #24]
 8005728:	f7fe ff18 	bl	800455c <move_window>
 800572c:	4606      	mov	r6, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800572e:	f109 33ff 	add.w	r3, r9, #4294967295
 8005732:	9a06      	ldr	r2, [sp, #24]
 8005734:	60d3      	str	r3, [r2, #12]
 8005736:	e01f      	b.n	8005778 <f_open+0x120>
				res = FR_INVALID_NAME;
 8005738:	2606      	movs	r6, #6
 800573a:	e7b6      	b.n	80056aa <f_open+0x52>
					res = dir_register(&dj);
 800573c:	a807      	add	r0, sp, #28
 800573e:	f7ff fe77 	bl	8005430 <dir_register>
 8005742:	4606      	mov	r6, r0
 8005744:	e7b8      	b.n	80056b8 <f_open+0x60>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005746:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 800574a:	f013 0f11 	tst.w	r3, #17
 800574e:	d112      	bne.n	8005776 <f_open+0x11e>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005750:	f015 0f04 	tst.w	r5, #4
 8005754:	d0b2      	beq.n	80056bc <f_open+0x64>
 8005756:	2608      	movs	r6, #8
 8005758:	e00e      	b.n	8005778 <f_open+0x120>
			if (res == FR_OK) {					/* Following succeeded */
 800575a:	b96e      	cbnz	r6, 8005778 <f_open+0x120>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800575c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8005760:	f013 0f10 	tst.w	r3, #16
 8005764:	d12c      	bne.n	80057c0 <f_open+0x168>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005766:	f015 0f02 	tst.w	r5, #2
 800576a:	d005      	beq.n	8005778 <f_open+0x120>
 800576c:	f013 0f01 	tst.w	r3, #1
 8005770:	d002      	beq.n	8005778 <f_open+0x120>
						res = FR_DENIED;
 8005772:	2607      	movs	r6, #7
 8005774:	e00b      	b.n	800578e <f_open+0x136>
					res = FR_DENIED;
 8005776:	2607      	movs	r6, #7
		if (res == FR_OK) {
 8005778:	b94e      	cbnz	r6, 800578e <f_open+0x136>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800577a:	f017 0f08 	tst.w	r7, #8
 800577e:	d001      	beq.n	8005784 <f_open+0x12c>
				mode |= _FA_MODIFIED;
 8005780:	f047 0720 	orr.w	r7, r7, #32
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005784:	9b06      	ldr	r3, [sp, #24]
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	6223      	str	r3, [r4, #32]
			fp->dir_ptr = dj.dir;
 800578a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800578c:	6263      	str	r3, [r4, #36]	; 0x24
		if (res == FR_OK) {
 800578e:	2e00      	cmp	r6, #0
 8005790:	f47f af76 	bne.w	8005680 <f_open+0x28>
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
 8005794:	9d06      	ldr	r5, [sp, #24]
 8005796:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800579a:	4641      	mov	r1, r8
 800579c:	4628      	mov	r0, r5
 800579e:	f7fe fd6a 	bl	8004276 <ld_clust>
 80057a2:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80057a4:	f108 001c 	add.w	r0, r8, #28
 80057a8:	f7fe fd1b 	bl	80041e2 <ld_dword>
 80057ac:	60e0      	str	r0, [r4, #12]
			fp->err = 0;			/* Clear error flag */
 80057ae:	2300      	movs	r3, #0
 80057b0:	7463      	strb	r3, [r4, #17]
			fp->fptr = 0;			/* Set file pointer */
 80057b2:	6163      	str	r3, [r4, #20]
			fp->sect = 0;			/* Invalidate current data sector */
 80057b4:	61e3      	str	r3, [r4, #28]
			fp->flag = mode;		/* File access mode */
 80057b6:	7427      	strb	r7, [r4, #16]
			fp->obj.fs = fs;	 	/* Validate the file object */
 80057b8:	6025      	str	r5, [r4, #0]
			fp->obj.id = fs->id;
 80057ba:	88eb      	ldrh	r3, [r5, #6]
 80057bc:	80a3      	strh	r3, [r4, #4]
 80057be:	e75f      	b.n	8005680 <f_open+0x28>
					res = FR_NO_FILE;
 80057c0:	2604      	movs	r6, #4
 80057c2:	e7e4      	b.n	800578e <f_open+0x136>
	if (!fp) return FR_INVALID_OBJECT;
 80057c4:	2609      	movs	r6, #9
 80057c6:	e75b      	b.n	8005680 <f_open+0x28>
 80057c8:	20000fe0 	.word	0x20000fe0
 80057cc:	48610000 	.word	0x48610000

080057d0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80057d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d4:	b085      	sub	sp, #20
 80057d6:	4604      	mov	r4, r0
 80057d8:	4689      	mov	r9, r1
 80057da:	4617      	mov	r7, r2
 80057dc:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80057de:	2300      	movs	r3, #0
 80057e0:	f8c8 3000 	str.w	r3, [r8]
	res = validate(fp, &fs);
 80057e4:	a903      	add	r1, sp, #12
 80057e6:	f7fe fe75 	bl	80044d4 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80057ea:	4606      	mov	r6, r0
 80057ec:	2800      	cmp	r0, #0
 80057ee:	f040 80a2 	bne.w	8005936 <f_read+0x166>
 80057f2:	7c66      	ldrb	r6, [r4, #17]
 80057f4:	2e00      	cmp	r6, #0
 80057f6:	f040 809e 	bne.w	8005936 <f_read+0x166>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80057fa:	7c23      	ldrb	r3, [r4, #16]
 80057fc:	f013 0f01 	tst.w	r3, #1
 8005800:	f000 80a3 	beq.w	800594a <f_read+0x17a>
	remain = fp->obj.objsize - fp->fptr;
 8005804:	68e5      	ldr	r5, [r4, #12]
 8005806:	6963      	ldr	r3, [r4, #20]
 8005808:	1aed      	subs	r5, r5, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800580a:	42bd      	cmp	r5, r7
 800580c:	d35d      	bcc.n	80058ca <f_read+0xfa>
 800580e:	463d      	mov	r5, r7
 8005810:	e05b      	b.n	80058ca <f_read+0xfa>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005812:	69a1      	ldr	r1, [r4, #24]
 8005814:	4620      	mov	r0, r4
 8005816:	f7ff f86b 	bl	80048f0 <get_fat>
 800581a:	e066      	b.n	80058ea <f_read+0x11a>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800581c:	2602      	movs	r6, #2
 800581e:	7466      	strb	r6, [r4, #17]
 8005820:	e089      	b.n	8005936 <f_read+0x166>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005822:	2601      	movs	r6, #1
 8005824:	7466      	strb	r6, [r4, #17]
 8005826:	e086      	b.n	8005936 <f_read+0x166>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005828:	2602      	movs	r6, #2
 800582a:	7466      	strb	r6, [r4, #17]
 800582c:	e083      	b.n	8005936 <f_read+0x166>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & _FA_DIRTY) && fp->sect - sect < cc) {
 800582e:	7c23      	ldrb	r3, [r4, #16]
 8005830:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005834:	d005      	beq.n	8005842 <f_read+0x72>
 8005836:	69e0      	ldr	r0, [r4, #28]
 8005838:	eba0 000a 	sub.w	r0, r0, sl
 800583c:	9b01      	ldr	r3, [sp, #4]
 800583e:	4298      	cmp	r0, r3
 8005840:	d302      	bcc.n	8005848 <f_read+0x78>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005842:	9b01      	ldr	r3, [sp, #4]
 8005844:	025f      	lsls	r7, r3, #9
				continue;
 8005846:	e036      	b.n	80058b6 <f_read+0xe6>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800584c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8005850:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8005854:	f7fe fcde 	bl	8004214 <mem_cpy>
 8005858:	e7f3      	b.n	8005842 <f_read+0x72>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800585a:	69e2      	ldr	r2, [r4, #28]
 800585c:	4552      	cmp	r2, sl
 800585e:	d01a      	beq.n	8005896 <f_read+0xc6>
#if !_FS_READONLY
				if (fp->flag & _FA_DIRTY) {		/* Write-back dirty sector cache */
 8005860:	7c23      	ldrb	r3, [r4, #16]
 8005862:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005866:	d00c      	beq.n	8005882 <f_read+0xb2>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 8005868:	2301      	movs	r3, #1
 800586a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800586e:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8005872:	f7fd f953 	bl	8002b1c <disk_write>
 8005876:	2800      	cmp	r0, #0
 8005878:	d161      	bne.n	800593e <f_read+0x16e>
						ABORT(fs, FR_DISK_ERR);
					}
					fp->flag &= ~_FA_DIRTY;
 800587a:	7c23      	ldrb	r3, [r4, #16]
 800587c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005880:	7423      	strb	r3, [r4, #16]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	{	/* Fill sector cache */
 8005882:	2301      	movs	r3, #1
 8005884:	4652      	mov	r2, sl
 8005886:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800588a:	9803      	ldr	r0, [sp, #12]
 800588c:	7840      	ldrb	r0, [r0, #1]
 800588e:	f7fd f940 	bl	8002b12 <disk_read>
 8005892:	2800      	cmp	r0, #0
 8005894:	d156      	bne.n	8005944 <f_read+0x174>
					ABORT(fs, FR_DISK_ERR);
				}
			}
#endif
			fp->sect = sect;
 8005896:	f8c4 a01c 	str.w	sl, [r4, #28]
		}
		rcnt = SS(fs) - ((UINT)fp->fptr % SS(fs));	/* Get partial sector data from sector buffer */
 800589a:	6961      	ldr	r1, [r4, #20]
 800589c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80058a0:	f5c1 7700 	rsb	r7, r1, #512	; 0x200
		if (rcnt > btr) rcnt = btr;
 80058a4:	42bd      	cmp	r5, r7
 80058a6:	d200      	bcs.n	80058aa <f_read+0xda>
 80058a8:	462f      	mov	r7, r5
		if (move_window(fs, fp->sect) != FR_OK) {	/* Move sector window */
			ABORT(fs, FR_DISK_ERR);
		}
		mem_cpy(rbuff, &fs->win[fp->fptr % SS(fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fs)], rcnt);	/* Pick partial sector */
 80058aa:	3128      	adds	r1, #40	; 0x28
 80058ac:	463a      	mov	r2, r7
 80058ae:	4421      	add	r1, r4
 80058b0:	4648      	mov	r0, r9
 80058b2:	f7fe fcaf 	bl	8004214 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80058b6:	44b9      	add	r9, r7
 80058b8:	6963      	ldr	r3, [r4, #20]
 80058ba:	443b      	add	r3, r7
 80058bc:	6163      	str	r3, [r4, #20]
 80058be:	f8d8 3000 	ldr.w	r3, [r8]
 80058c2:	443b      	add	r3, r7
 80058c4:	f8c8 3000 	str.w	r3, [r8]
 80058c8:	1bed      	subs	r5, r5, r7
	for ( ;  btr;								/* Repeat until all data read */
 80058ca:	2d00      	cmp	r5, #0
 80058cc:	d033      	beq.n	8005936 <f_read+0x166>
		if ((fp->fptr % SS(fs)) == 0) {			/* On the sector boundary? */
 80058ce:	6963      	ldr	r3, [r4, #20]
 80058d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058d4:	2a00      	cmp	r2, #0
 80058d6:	d1e0      	bne.n	800589a <f_read+0xca>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80058d8:	9a03      	ldr	r2, [sp, #12]
 80058da:	8957      	ldrh	r7, [r2, #10]
 80058dc:	3f01      	subs	r7, #1
			if (csect == 0) {					/* On the cluster boundary? */
 80058de:	ea17 2753 	ands.w	r7, r7, r3, lsr #9
 80058e2:	d108      	bne.n	80058f6 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d194      	bne.n	8005812 <f_read+0x42>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80058e8:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80058ea:	2801      	cmp	r0, #1
 80058ec:	d996      	bls.n	800581c <f_read+0x4c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80058ee:	f1b0 3fff 	cmp.w	r0, #4294967295
 80058f2:	d096      	beq.n	8005822 <f_read+0x52>
				fp->clust = clst;				/* Update current cluster */
 80058f4:	61a0      	str	r0, [r4, #24]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80058f6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80058fa:	69a1      	ldr	r1, [r4, #24]
 80058fc:	4658      	mov	r0, fp
 80058fe:	f7fe fcae 	bl	800425e <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005902:	4682      	mov	sl, r0
 8005904:	2800      	cmp	r0, #0
 8005906:	d08f      	beq.n	8005828 <f_read+0x58>
			sect += csect;
 8005908:	44ba      	add	sl, r7
			if (cc) {							/* Read maximum contiguous sectors directly */
 800590a:	0a6b      	lsrs	r3, r5, #9
 800590c:	9301      	str	r3, [sp, #4]
 800590e:	d0a4      	beq.n	800585a <f_read+0x8a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005910:	18fb      	adds	r3, r7, r3
 8005912:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8005916:	4293      	cmp	r3, r2
 8005918:	d901      	bls.n	800591e <f_read+0x14e>
					cc = fs->csize - csect;
 800591a:	1bd3      	subs	r3, r2, r7
 800591c:	9301      	str	r3, [sp, #4]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) {
 800591e:	9b01      	ldr	r3, [sp, #4]
 8005920:	4652      	mov	r2, sl
 8005922:	4649      	mov	r1, r9
 8005924:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8005928:	f7fd f8f3 	bl	8002b12 <disk_read>
 800592c:	2800      	cmp	r0, #0
 800592e:	f43f af7e 	beq.w	800582e <f_read+0x5e>
					ABORT(fs, FR_DISK_ERR);
 8005932:	2601      	movs	r6, #1
 8005934:	7466      	strb	r6, [r4, #17]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8005936:	4630      	mov	r0, r6
 8005938:	b005      	add	sp, #20
 800593a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						ABORT(fs, FR_DISK_ERR);
 800593e:	2601      	movs	r6, #1
 8005940:	7466      	strb	r6, [r4, #17]
 8005942:	e7f8      	b.n	8005936 <f_read+0x166>
					ABORT(fs, FR_DISK_ERR);
 8005944:	2601      	movs	r6, #1
 8005946:	7466      	strb	r6, [r4, #17]
 8005948:	e7f5      	b.n	8005936 <f_read+0x166>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800594a:	2607      	movs	r6, #7
 800594c:	e7f3      	b.n	8005936 <f_read+0x166>

0800594e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800594e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005952:	b085      	sub	sp, #20
 8005954:	4604      	mov	r4, r0
 8005956:	4688      	mov	r8, r1
 8005958:	4615      	mov	r5, r2
 800595a:	4699      	mov	r9, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800595c:	2300      	movs	r3, #0
 800595e:	f8c9 3000 	str.w	r3, [r9]
	res = validate(fp, &fs);
 8005962:	a903      	add	r1, sp, #12
 8005964:	f7fe fdb6 	bl	80044d4 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005968:	4607      	mov	r7, r0
 800596a:	2800      	cmp	r0, #0
 800596c:	f040 80b2 	bne.w	8005ad4 <f_write+0x186>
 8005970:	7c67      	ldrb	r7, [r4, #17]
 8005972:	2f00      	cmp	r7, #0
 8005974:	f040 80ae 	bne.w	8005ad4 <f_write+0x186>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005978:	7c23      	ldrb	r3, [r4, #16]
 800597a:	f013 0f02 	tst.w	r3, #2
 800597e:	f000 80bf 	beq.w	8005b00 <f_write+0x1b2>

	/* Check fptr wrap-around (file size cannot exceed the limit on each FAT specs) */
	if ((_FS_EXFAT && fs->fs_type == FS_EXFAT && fp->fptr + btw < fp->fptr)
		|| (DWORD)fp->fptr + btw < (DWORD)fp->fptr) {
 8005982:	6963      	ldr	r3, [r4, #20]
	if ((_FS_EXFAT && fs->fs_type == FS_EXFAT && fp->fptr + btw < fp->fptr)
 8005984:	42eb      	cmn	r3, r5
 8005986:	d364      	bcc.n	8005a52 <f_write+0x104>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005988:	43dd      	mvns	r5, r3
 800598a:	e062      	b.n	8005a52 <f_write+0x104>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
			if (csect == 0) {				/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->obj.sclust;	/* Follow from the origin */
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800598c:	2100      	movs	r1, #0
 800598e:	4620      	mov	r0, r4
 8005990:	f7ff f8ed 	bl	8004b6e <create_chain>
 8005994:	e06f      	b.n	8005a76 <f_write+0x128>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005996:	69a1      	ldr	r1, [r4, #24]
 8005998:	4620      	mov	r0, r4
 800599a:	f7ff f8e8 	bl	8004b6e <create_chain>
 800599e:	e06a      	b.n	8005a76 <f_write+0x128>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80059a0:	2702      	movs	r7, #2
 80059a2:	7467      	strb	r7, [r4, #17]
 80059a4:	e096      	b.n	8005ad4 <f_write+0x186>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80059a6:	2701      	movs	r7, #1
 80059a8:	7467      	strb	r7, [r4, #17]
 80059aa:	e093      	b.n	8005ad4 <f_write+0x186>
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK)	{	/* Write-back sector cache */
				ABORT(fs, FR_DISK_ERR);
			}
#else
			if (fp->flag & _FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 80059ac:	2301      	movs	r3, #1
 80059ae:	69e2      	ldr	r2, [r4, #28]
 80059b0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80059b4:	9803      	ldr	r0, [sp, #12]
 80059b6:	7840      	ldrb	r0, [r0, #1]
 80059b8:	f7fd f8b0 	bl	8002b1c <disk_write>
 80059bc:	b920      	cbnz	r0, 80059c8 <f_write+0x7a>
					ABORT(fs, FR_DISK_ERR);
				}
				fp->flag &= ~_FA_DIRTY;
 80059be:	7c23      	ldrb	r3, [r4, #16]
 80059c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059c4:	7423      	strb	r3, [r4, #16]
 80059c6:	e065      	b.n	8005a94 <f_write+0x146>
					ABORT(fs, FR_DISK_ERR);
 80059c8:	2701      	movs	r7, #1
 80059ca:	7467      	strb	r7, [r4, #17]
 80059cc:	e082      	b.n	8005ad4 <f_write+0x186>
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 80059ce:	2702      	movs	r7, #2
 80059d0:	7467      	strb	r7, [r4, #17]
 80059d2:	e07f      	b.n	8005ad4 <f_write+0x186>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80059d4:	69e1      	ldr	r1, [r4, #28]
 80059d6:	eba1 010a 	sub.w	r1, r1, sl
 80059da:	4559      	cmp	r1, fp
 80059dc:	d302      	bcc.n	80059e4 <f_write+0x96>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= ~_FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80059de:	ea4f 264b 	mov.w	r6, fp, lsl #9
				continue;
 80059e2:	e027      	b.n	8005a34 <f_write+0xe6>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80059e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e8:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 80059ec:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80059f0:	f7fe fc10 	bl	8004214 <mem_cpy>
					fp->flag &= ~_FA_DIRTY;
 80059f4:	7c23      	ldrb	r3, [r4, #16]
 80059f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059fa:	7423      	strb	r3, [r4, #16]
 80059fc:	e7ef      	b.n	80059de <f_write+0x90>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect) {		/* Fill sector cache with file data */
 80059fe:	69e3      	ldr	r3, [r4, #28]
 8005a00:	4553      	cmp	r3, sl
 8005a02:	d003      	beq.n	8005a0c <f_write+0xbe>
				if (fp->fptr < fp->obj.objsize &&
 8005a04:	6962      	ldr	r2, [r4, #20]
 8005a06:	68e3      	ldr	r3, [r4, #12]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d367      	bcc.n	8005adc <f_write+0x18e>
					disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
						ABORT(fs, FR_DISK_ERR);
				}
			}
#endif
			fp->sect = sect;
 8005a0c:	f8c4 a01c 	str.w	sl, [r4, #28]
		}
		wcnt = SS(fs) - ((UINT)fp->fptr % SS(fs));	/* Put partial sector into file I/O buffer */
 8005a10:	6960      	ldr	r0, [r4, #20]
 8005a12:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8005a16:	f5c0 7600 	rsb	r6, r0, #512	; 0x200
		if (wcnt > btw) wcnt = btw;
 8005a1a:	42b5      	cmp	r5, r6
 8005a1c:	d200      	bcs.n	8005a20 <f_write+0xd2>
 8005a1e:	462e      	mov	r6, r5
			ABORT(fs, FR_DISK_ERR);
		}
		mem_cpy(&fs->win[fp->fptr % SS(fs)], wbuff, wcnt);	/* Fit partial sector */
		fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fs)], wbuff, wcnt);	/* Fit partial sector */
 8005a20:	3028      	adds	r0, #40	; 0x28
 8005a22:	4632      	mov	r2, r6
 8005a24:	4641      	mov	r1, r8
 8005a26:	4420      	add	r0, r4
 8005a28:	f7fe fbf4 	bl	8004214 <mem_cpy>
		fp->flag |= _FA_DIRTY;
 8005a2c:	7c23      	ldrb	r3, [r4, #16]
 8005a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a32:	7423      	strb	r3, [r4, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005a34:	44b0      	add	r8, r6
 8005a36:	6963      	ldr	r3, [r4, #20]
 8005a38:	4433      	add	r3, r6
 8005a3a:	6163      	str	r3, [r4, #20]
 8005a3c:	68e2      	ldr	r2, [r4, #12]
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	bf38      	it	cc
 8005a42:	4613      	movcc	r3, r2
 8005a44:	60e3      	str	r3, [r4, #12]
 8005a46:	f8d9 3000 	ldr.w	r3, [r9]
 8005a4a:	4433      	add	r3, r6
 8005a4c:	f8c9 3000 	str.w	r3, [r9]
 8005a50:	1bad      	subs	r5, r5, r6
	for ( ;  btw;							/* Repeat until all data written */
 8005a52:	2d00      	cmp	r5, #0
 8005a54:	d04f      	beq.n	8005af6 <f_write+0x1a8>
		if ((fp->fptr % SS(fs)) == 0) {		/* On the sector boundary? */
 8005a56:	6963      	ldr	r3, [r4, #20]
 8005a58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a5c:	2a00      	cmp	r2, #0
 8005a5e:	d1d7      	bne.n	8005a10 <f_write+0xc2>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005a60:	9a03      	ldr	r2, [sp, #12]
 8005a62:	8956      	ldrh	r6, [r2, #10]
 8005a64:	3e01      	subs	r6, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8005a66:	ea16 2653 	ands.w	r6, r6, r3, lsr #9
 8005a6a:	d10f      	bne.n	8005a8c <f_write+0x13e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d192      	bne.n	8005996 <f_write+0x48>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005a70:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d08a      	beq.n	800598c <f_write+0x3e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d03d      	beq.n	8005af6 <f_write+0x1a8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005a7a:	2801      	cmp	r0, #1
 8005a7c:	d090      	beq.n	80059a0 <f_write+0x52>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005a7e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005a82:	d090      	beq.n	80059a6 <f_write+0x58>
				fp->clust = clst;			/* Update current cluster */
 8005a84:	61a0      	str	r0, [r4, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005a86:	68a3      	ldr	r3, [r4, #8]
 8005a88:	b903      	cbnz	r3, 8005a8c <f_write+0x13e>
 8005a8a:	60a0      	str	r0, [r4, #8]
			if (fp->flag & _FA_DIRTY) {		/* Write-back sector cache */
 8005a8c:	7c23      	ldrb	r3, [r4, #16]
 8005a8e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005a92:	d18b      	bne.n	80059ac <f_write+0x5e>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005a94:	9b03      	ldr	r3, [sp, #12]
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	69a1      	ldr	r1, [r4, #24]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fe fbdf 	bl	800425e <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005aa0:	4682      	mov	sl, r0
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d093      	beq.n	80059ce <f_write+0x80>
			sect += csect;
 8005aa6:	44b2      	add	sl, r6
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005aa8:	ea5f 2b55 	movs.w	fp, r5, lsr #9
 8005aac:	d0a7      	beq.n	80059fe <f_write+0xb0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005aae:	eb06 030b 	add.w	r3, r6, fp
 8005ab2:	9a01      	ldr	r2, [sp, #4]
 8005ab4:	8952      	ldrh	r2, [r2, #10]
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d901      	bls.n	8005abe <f_write+0x170>
					cc = fs->csize - csect;
 8005aba:	eba2 0b06 	sub.w	fp, r2, r6
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) {
 8005abe:	465b      	mov	r3, fp
 8005ac0:	4652      	mov	r2, sl
 8005ac2:	4641      	mov	r1, r8
 8005ac4:	9801      	ldr	r0, [sp, #4]
 8005ac6:	7840      	ldrb	r0, [r0, #1]
 8005ac8:	f7fd f828 	bl	8002b1c <disk_write>
 8005acc:	2800      	cmp	r0, #0
 8005ace:	d081      	beq.n	80059d4 <f_write+0x86>
					ABORT(fs, FR_DISK_ERR);
 8005ad0:	2701      	movs	r7, #1
 8005ad2:	7467      	strb	r7, [r4, #17]
	}

	fp->flag |= _FA_MODIFIED;						/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8005ad4:	4638      	mov	r0, r7
 8005ad6:	b005      	add	sp, #20
 8005ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005adc:	2301      	movs	r3, #1
 8005ade:	4652      	mov	r2, sl
 8005ae0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8005ae4:	9801      	ldr	r0, [sp, #4]
 8005ae6:	7840      	ldrb	r0, [r0, #1]
 8005ae8:	f7fd f813 	bl	8002b12 <disk_read>
				if (fp->fptr < fp->obj.objsize &&
 8005aec:	2800      	cmp	r0, #0
 8005aee:	d08d      	beq.n	8005a0c <f_write+0xbe>
						ABORT(fs, FR_DISK_ERR);
 8005af0:	2701      	movs	r7, #1
 8005af2:	7467      	strb	r7, [r4, #17]
 8005af4:	e7ee      	b.n	8005ad4 <f_write+0x186>
	fp->flag |= _FA_MODIFIED;						/* Set file change flag */
 8005af6:	7c23      	ldrb	r3, [r4, #16]
 8005af8:	f043 0320 	orr.w	r3, r3, #32
 8005afc:	7423      	strb	r3, [r4, #16]
	LEAVE_FF(fs, FR_OK);
 8005afe:	e7e9      	b.n	8005ad4 <f_write+0x186>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005b00:	2707      	movs	r7, #7
 8005b02:	e7e7      	b.n	8005ad4 <f_write+0x186>

08005b04 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8005b04:	b570      	push	{r4, r5, r6, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	4604      	mov	r4, r0
 8005b0a:	460d      	mov	r5, r1
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8005b0c:	290a      	cmp	r1, #10
 8005b0e:	d00d      	beq.n	8005b2c <putc_bfd+0x28>
		putc_bfd(pb, '\r');
	}

	i = pb->idx;	/* Buffer write index (-1:error) */
 8005b10:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	db08      	blt.n	8005b28 <putc_bfd+0x24>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8005b16:	1c5e      	adds	r6, r3, #1
 8005b18:	4423      	add	r3, r4
 8005b1a:	731d      	strb	r5, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8005b1c:	2e3c      	cmp	r6, #60	; 0x3c
 8005b1e:	dc09      	bgt.n	8005b34 <putc_bfd+0x30>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
 8005b20:	6066      	str	r6, [r4, #4]
	pb->nchr++;
 8005b22:	68a3      	ldr	r3, [r4, #8]
 8005b24:	3301      	adds	r3, #1
 8005b26:	60a3      	str	r3, [r4, #8]
}
 8005b28:	b002      	add	sp, #8
 8005b2a:	bd70      	pop	{r4, r5, r6, pc}
		putc_bfd(pb, '\r');
 8005b2c:	210d      	movs	r1, #13
 8005b2e:	f7ff ffe9 	bl	8005b04 <putc_bfd>
 8005b32:	e7ed      	b.n	8005b10 <putc_bfd+0xc>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8005b34:	ab01      	add	r3, sp, #4
 8005b36:	4632      	mov	r2, r6
 8005b38:	f104 010c 	add.w	r1, r4, #12
 8005b3c:	6820      	ldr	r0, [r4, #0]
 8005b3e:	f7ff ff06 	bl	800594e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8005b42:	9b01      	ldr	r3, [sp, #4]
 8005b44:	429e      	cmp	r6, r3
 8005b46:	d002      	beq.n	8005b4e <putc_bfd+0x4a>
 8005b48:	f04f 36ff 	mov.w	r6, #4294967295
 8005b4c:	e7e8      	b.n	8005b20 <putc_bfd+0x1c>
 8005b4e:	2600      	movs	r6, #0
 8005b50:	e7e6      	b.n	8005b20 <putc_bfd+0x1c>
	...

08005b54 <f_sync>:
{
 8005b54:	b530      	push	{r4, r5, lr}
 8005b56:	b083      	sub	sp, #12
 8005b58:	4604      	mov	r4, r0
	res = validate(fp, &fs);	/* Check validity of the object */
 8005b5a:	a901      	add	r1, sp, #4
 8005b5c:	f7fe fcba 	bl	80044d4 <validate>
	if (res == FR_OK) {
 8005b60:	4603      	mov	r3, r0
 8005b62:	b9c8      	cbnz	r0, 8005b98 <f_sync+0x44>
		if (fp->flag & _FA_MODIFIED) {	/* Is there any change to the file? */
 8005b64:	7c22      	ldrb	r2, [r4, #16]
 8005b66:	f012 0f20 	tst.w	r2, #32
 8005b6a:	d015      	beq.n	8005b98 <f_sync+0x44>
			if (fp->flag & _FA_DIRTY) {	/* Write-back cached data if needed */
 8005b6c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005b70:	d00c      	beq.n	8005b8c <f_sync+0x38>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 8005b72:	2301      	movs	r3, #1
 8005b74:	69e2      	ldr	r2, [r4, #28]
 8005b76:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8005b7a:	9801      	ldr	r0, [sp, #4]
 8005b7c:	7840      	ldrb	r0, [r0, #1]
 8005b7e:	f7fc ffcd 	bl	8002b1c <disk_write>
 8005b82:	bb88      	cbnz	r0, 8005be8 <f_sync+0x94>
				fp->flag &= ~_FA_DIRTY;
 8005b84:	7c23      	ldrb	r3, [r4, #16]
 8005b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b8a:	7423      	strb	r3, [r4, #16]
				res = move_window(fs, fp->dir_sect);
 8005b8c:	6a21      	ldr	r1, [r4, #32]
 8005b8e:	9801      	ldr	r0, [sp, #4]
 8005b90:	f7fe fce4 	bl	800455c <move_window>
				if (res == FR_OK) {
 8005b94:	4603      	mov	r3, r0
 8005b96:	b110      	cbz	r0, 8005b9e <f_sync+0x4a>
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	b003      	add	sp, #12
 8005b9c:	bd30      	pop	{r4, r5, pc}
					dir = fp->dir_ptr;
 8005b9e:	6a65      	ldr	r5, [r4, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005ba0:	7aeb      	ldrb	r3, [r5, #11]
 8005ba2:	f043 0320 	orr.w	r3, r3, #32
 8005ba6:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005ba8:	68a2      	ldr	r2, [r4, #8]
 8005baa:	4629      	mov	r1, r5
 8005bac:	6820      	ldr	r0, [r4, #0]
 8005bae:	f7fe fb75 	bl	800429c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005bb2:	68e1      	ldr	r1, [r4, #12]
 8005bb4:	f105 001c 	add.w	r0, r5, #28
 8005bb8:	f7fe fb22 	bl	8004200 <st_dword>
					st_dword(dir + DIR_WrtTime, tm);				/* Update modified time */
 8005bbc:	490b      	ldr	r1, [pc, #44]	; (8005bec <f_sync+0x98>)
 8005bbe:	f105 0016 	add.w	r0, r5, #22
 8005bc2:	f7fe fb1d 	bl	8004200 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	f105 0012 	add.w	r0, r5, #18
 8005bcc:	f7fe fb14 	bl	80041f8 <st_word>
					fs->wflag = 1;
 8005bd0:	9b01      	ldr	r3, [sp, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005bd6:	9801      	ldr	r0, [sp, #4]
 8005bd8:	f7ff fccc 	bl	8005574 <sync_fs>
 8005bdc:	4603      	mov	r3, r0
					fp->flag &= ~_FA_MODIFIED;
 8005bde:	7c22      	ldrb	r2, [r4, #16]
 8005be0:	f022 0220 	bic.w	r2, r2, #32
 8005be4:	7422      	strb	r2, [r4, #16]
 8005be6:	e7d7      	b.n	8005b98 <f_sync+0x44>
					LEAVE_FF(fs, FR_DISK_ERR);
 8005be8:	2301      	movs	r3, #1
 8005bea:	e7d5      	b.n	8005b98 <f_sync+0x44>
 8005bec:	48610000 	.word	0x48610000

08005bf0 <f_close>:
{
 8005bf0:	b510      	push	{r4, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 8005bf6:	f7ff ffad 	bl	8005b54 <f_sync>
	if (res == FR_OK)
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	b110      	cbz	r0, 8005c04 <f_close+0x14>
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	b002      	add	sp, #8
 8005c02:	bd10      	pop	{r4, pc}
		res = validate(fp, &fs);	/* Lock volume */
 8005c04:	a901      	add	r1, sp, #4
 8005c06:	4620      	mov	r0, r4
 8005c08:	f7fe fc64 	bl	80044d4 <validate>
		if (res == FR_OK) {
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	d1f5      	bne.n	8005bfe <f_close+0xe>
				fp->obj.fs = 0;			/* Invalidate file object */
 8005c12:	2200      	movs	r2, #0
 8005c14:	6022      	str	r2, [r4, #0]
 8005c16:	e7f2      	b.n	8005bfe <f_close+0xe>

08005c18 <f_lseek>:
{
 8005c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c1c:	b082      	sub	sp, #8
 8005c1e:	4604      	mov	r4, r0
 8005c20:	460f      	mov	r7, r1
	res = validate(fp, &fs);		/* Check validity of the object */
 8005c22:	a901      	add	r1, sp, #4
 8005c24:	f7fe fc56 	bl	80044d4 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005c28:	4606      	mov	r6, r0
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	f040 80a2 	bne.w	8005d74 <f_lseek+0x15c>
 8005c30:	7c66      	ldrb	r6, [r4, #17]
 8005c32:	2e00      	cmp	r6, #0
 8005c34:	f040 809e 	bne.w	8005d74 <f_lseek+0x15c>
		if (ofs > fp->obj.objsize				/* In read-only mode, clip offset with the file size */
 8005c38:	68e3      	ldr	r3, [r4, #12]
 8005c3a:	42bb      	cmp	r3, r7
 8005c3c:	d204      	bcs.n	8005c48 <f_lseek+0x30>
			 && !(fp->flag & FA_WRITE)
 8005c3e:	7c22      	ldrb	r2, [r4, #16]
 8005c40:	f012 0f02 	tst.w	r2, #2
 8005c44:	d100      	bne.n	8005c48 <f_lseek+0x30>
			) ofs = fp->obj.objsize;
 8005c46:	461f      	mov	r7, r3
		ifptr = fp->fptr;
 8005c48:	6963      	ldr	r3, [r4, #20]
		fp->fptr = nsect = 0;
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	6162      	str	r2, [r4, #20]
		if (ofs) {
 8005c4e:	2f00      	cmp	r7, #0
 8005c50:	d065      	beq.n	8005d1e <f_lseek+0x106>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8005c52:	9a01      	ldr	r2, [sp, #4]
 8005c54:	f8b2 800a 	ldrh.w	r8, [r2, #10]
 8005c58:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 8005c5c:	b173      	cbz	r3, 8005c7c <f_lseek+0x64>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8005c5e:	1e7a      	subs	r2, r7, #1
 8005c60:	fbb2 f2f8 	udiv	r2, r2, r8
 8005c64:	3b01      	subs	r3, #1
 8005c66:	fbb3 f1f8 	udiv	r1, r3, r8
			if (ifptr > 0 &&
 8005c6a:	428a      	cmp	r2, r1
 8005c6c:	d306      	bcc.n	8005c7c <f_lseek+0x64>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8005c6e:	f1c8 0200 	rsb	r2, r8, #0
 8005c72:	4013      	ands	r3, r2
 8005c74:	6163      	str	r3, [r4, #20]
				ofs -= fp->fptr;
 8005c76:	1aff      	subs	r7, r7, r3
				clst = fp->clust;
 8005c78:	69a5      	ldr	r5, [r4, #24]
 8005c7a:	e002      	b.n	8005c82 <f_lseek+0x6a>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8005c7c:	68a5      	ldr	r5, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8005c7e:	b115      	cbz	r5, 8005c86 <f_lseek+0x6e>
				fp->clust = clst;
 8005c80:	61a5      	str	r5, [r4, #24]
			if (clst != 0) {
 8005c82:	bb35      	cbnz	r5, 8005cd2 <f_lseek+0xba>
 8005c84:	e04c      	b.n	8005d20 <f_lseek+0x108>
					clst = create_chain(&fp->obj, 0);
 8005c86:	2100      	movs	r1, #0
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f7fe ff70 	bl	8004b6e <create_chain>
 8005c8e:	4605      	mov	r5, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005c90:	2801      	cmp	r0, #1
 8005c92:	d004      	beq.n	8005c9e <f_lseek+0x86>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005c94:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005c98:	d004      	beq.n	8005ca4 <f_lseek+0x8c>
					fp->obj.sclust = clst;
 8005c9a:	60a0      	str	r0, [r4, #8]
 8005c9c:	e7f0      	b.n	8005c80 <f_lseek+0x68>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005c9e:	2602      	movs	r6, #2
 8005ca0:	7466      	strb	r6, [r4, #17]
 8005ca2:	e067      	b.n	8005d74 <f_lseek+0x15c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005ca4:	2601      	movs	r6, #1
 8005ca6:	7466      	strb	r6, [r4, #17]
 8005ca8:	e064      	b.n	8005d74 <f_lseek+0x15c>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8005caa:	4629      	mov	r1, r5
 8005cac:	4620      	mov	r0, r4
 8005cae:	f7fe fe1f 	bl	80048f0 <get_fat>
 8005cb2:	4605      	mov	r5, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005cb4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005cb8:	d028      	beq.n	8005d0c <f_lseek+0xf4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8005cba:	2d01      	cmp	r5, #1
 8005cbc:	d929      	bls.n	8005d12 <f_lseek+0xfa>
 8005cbe:	9b01      	ldr	r3, [sp, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	42ab      	cmp	r3, r5
 8005cc4:	d925      	bls.n	8005d12 <f_lseek+0xfa>
					fp->clust = clst;
 8005cc6:	61a5      	str	r5, [r4, #24]
					fp->fptr += bcs;
 8005cc8:	6963      	ldr	r3, [r4, #20]
 8005cca:	4443      	add	r3, r8
 8005ccc:	6163      	str	r3, [r4, #20]
					ofs -= bcs;
 8005cce:	eba7 0708 	sub.w	r7, r7, r8
				while (ofs > bcs) {						/* Cluster following loop */
 8005cd2:	4547      	cmp	r7, r8
 8005cd4:	d90b      	bls.n	8005cee <f_lseek+0xd6>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8005cd6:	7c23      	ldrb	r3, [r4, #16]
 8005cd8:	f013 0f02 	tst.w	r3, #2
 8005cdc:	d0e5      	beq.n	8005caa <f_lseek+0x92>
						clst = create_chain(&fp->obj, clst);	/* Force stretch if in write mode */
 8005cde:	4629      	mov	r1, r5
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f7fe ff44 	bl	8004b6e <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 8005ce6:	4605      	mov	r5, r0
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d1e3      	bne.n	8005cb4 <f_lseek+0x9c>
							ofs = bcs; break;
 8005cec:	4647      	mov	r7, r8
				fp->fptr += ofs;
 8005cee:	6963      	ldr	r3, [r4, #20]
 8005cf0:	443b      	add	r3, r7
 8005cf2:	6163      	str	r3, [r4, #20]
				if (ofs % SS(fs)) {
 8005cf4:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d03f      	beq.n	8005d7c <f_lseek+0x164>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	9801      	ldr	r0, [sp, #4]
 8005d00:	f7fe faad 	bl	800425e <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8005d04:	b140      	cbz	r0, 8005d18 <f_lseek+0x100>
					nsect += (DWORD)(ofs / SS(fs));
 8005d06:	eb00 2557 	add.w	r5, r0, r7, lsr #9
 8005d0a:	e009      	b.n	8005d20 <f_lseek+0x108>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005d0c:	2601      	movs	r6, #1
 8005d0e:	7466      	strb	r6, [r4, #17]
 8005d10:	e030      	b.n	8005d74 <f_lseek+0x15c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8005d12:	2602      	movs	r6, #2
 8005d14:	7466      	strb	r6, [r4, #17]
 8005d16:	e02d      	b.n	8005d74 <f_lseek+0x15c>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8005d18:	2602      	movs	r6, #2
 8005d1a:	7466      	strb	r6, [r4, #17]
 8005d1c:	e02a      	b.n	8005d74 <f_lseek+0x15c>
		fp->fptr = nsect = 0;
 8005d1e:	2500      	movs	r5, #0
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8005d20:	6963      	ldr	r3, [r4, #20]
 8005d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d26:	b1e3      	cbz	r3, 8005d62 <f_lseek+0x14a>
 8005d28:	69e2      	ldr	r2, [r4, #28]
 8005d2a:	42aa      	cmp	r2, r5
 8005d2c:	d019      	beq.n	8005d62 <f_lseek+0x14a>
			if (fp->flag & _FA_DIRTY) {			/* Write-back dirty sector cache */
 8005d2e:	7c23      	ldrb	r3, [r4, #16]
 8005d30:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005d34:	d00b      	beq.n	8005d4e <f_lseek+0x136>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 8005d36:	2301      	movs	r3, #1
 8005d38:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8005d3c:	9801      	ldr	r0, [sp, #4]
 8005d3e:	7840      	ldrb	r0, [r0, #1]
 8005d40:	f7fc feec 	bl	8002b1c <disk_write>
 8005d44:	b9e0      	cbnz	r0, 8005d80 <f_lseek+0x168>
				fp->flag &= ~_FA_DIRTY;
 8005d46:	7c23      	ldrb	r3, [r4, #16]
 8005d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d4c:	7423      	strb	r3, [r4, #16]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) {	/* Fill sector cache */
 8005d4e:	2301      	movs	r3, #1
 8005d50:	462a      	mov	r2, r5
 8005d52:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8005d56:	9801      	ldr	r0, [sp, #4]
 8005d58:	7840      	ldrb	r0, [r0, #1]
 8005d5a:	f7fc feda 	bl	8002b12 <disk_read>
 8005d5e:	b990      	cbnz	r0, 8005d86 <f_lseek+0x16e>
			fp->sect = nsect;
 8005d60:	61e5      	str	r5, [r4, #28]
		if (fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8005d62:	6963      	ldr	r3, [r4, #20]
 8005d64:	68e2      	ldr	r2, [r4, #12]
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d904      	bls.n	8005d74 <f_lseek+0x15c>
			fp->obj.objsize = fp->fptr;
 8005d6a:	60e3      	str	r3, [r4, #12]
			fp->flag |= _FA_MODIFIED;
 8005d6c:	7c23      	ldrb	r3, [r4, #16]
 8005d6e:	f043 0320 	orr.w	r3, r3, #32
 8005d72:	7423      	strb	r3, [r4, #16]
}
 8005d74:	4630      	mov	r0, r6
 8005d76:	b002      	add	sp, #8
 8005d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		fp->fptr = nsect = 0;
 8005d7c:	2500      	movs	r5, #0
 8005d7e:	e7cf      	b.n	8005d20 <f_lseek+0x108>
					ABORT(fs, FR_DISK_ERR);
 8005d80:	2601      	movs	r6, #1
 8005d82:	7466      	strb	r6, [r4, #17]
 8005d84:	e7f6      	b.n	8005d74 <f_lseek+0x15c>
				ABORT(fs, FR_DISK_ERR);
 8005d86:	2601      	movs	r6, #1
 8005d88:	7466      	strb	r6, [r4, #17]
 8005d8a:	e7f3      	b.n	8005d74 <f_lseek+0x15c>

08005d8c <f_stat>:
{
 8005d8c:	b530      	push	{r4, r5, lr}
 8005d8e:	b091      	sub	sp, #68	; 0x44
 8005d90:	9001      	str	r0, [sp, #4]
 8005d92:	460d      	mov	r5, r1
	res = find_volume(&path, &dj.obj.fs, 0);
 8005d94:	2200      	movs	r2, #0
 8005d96:	a905      	add	r1, sp, #20
 8005d98:	a801      	add	r0, sp, #4
 8005d9a:	f7fe fc29 	bl	80045f0 <find_volume>
	if (res == FR_OK) {
 8005d9e:	4604      	mov	r4, r0
 8005da0:	b110      	cbz	r0, 8005da8 <f_stat+0x1c>
}
 8005da2:	4620      	mov	r0, r4
 8005da4:	b011      	add	sp, #68	; 0x44
 8005da6:	bd30      	pop	{r4, r5, pc}
		INIT_NAMBUF(dj);
 8005da8:	ab02      	add	r3, sp, #8
 8005daa:	930d      	str	r3, [sp, #52]	; 0x34
 8005dac:	4b0b      	ldr	r3, [pc, #44]	; (8005ddc <f_stat+0x50>)
 8005dae:	930f      	str	r3, [sp, #60]	; 0x3c
		res = follow_path(&dj, path);	/* Follow the file path */
 8005db0:	9901      	ldr	r1, [sp, #4]
 8005db2:	a805      	add	r0, sp, #20
 8005db4:	f7ff faf7 	bl	80053a6 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 8005db8:	4604      	mov	r4, r0
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	d1f1      	bne.n	8005da2 <f_stat+0x16>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8005dbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dc0:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	db06      	blt.n	8005dd6 <f_stat+0x4a>
				if (fno) get_fileinfo(&dj, fno);
 8005dc8:	2d00      	cmp	r5, #0
 8005dca:	d0ea      	beq.n	8005da2 <f_stat+0x16>
 8005dcc:	4629      	mov	r1, r5
 8005dce:	a805      	add	r0, sp, #20
 8005dd0:	f7ff f9b6 	bl	8005140 <get_fileinfo>
 8005dd4:	e7e5      	b.n	8005da2 <f_stat+0x16>
				res = FR_INVALID_NAME;
 8005dd6:	2406      	movs	r4, #6
 8005dd8:	e7e3      	b.n	8005da2 <f_stat+0x16>
 8005dda:	bf00      	nop
 8005ddc:	20000fe0 	.word	0x20000fe0

08005de0 <f_unlink>:
{
 8005de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005de2:	b09d      	sub	sp, #116	; 0x74
 8005de4:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
 8005de6:	2202      	movs	r2, #2
 8005de8:	a905      	add	r1, sp, #20
 8005dea:	a801      	add	r0, sp, #4
 8005dec:	f7fe fc00 	bl	80045f0 <find_volume>
	dj.obj.fs = fs;
 8005df0:	9b05      	ldr	r3, [sp, #20]
 8005df2:	9311      	str	r3, [sp, #68]	; 0x44
	if (res == FR_OK) {
 8005df4:	4604      	mov	r4, r0
 8005df6:	b110      	cbz	r0, 8005dfe <f_unlink+0x1e>
}
 8005df8:	4620      	mov	r0, r4
 8005dfa:	b01d      	add	sp, #116	; 0x74
 8005dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		INIT_NAMBUF(dj);
 8005dfe:	ab02      	add	r3, sp, #8
 8005e00:	9319      	str	r3, [sp, #100]	; 0x64
 8005e02:	4b25      	ldr	r3, [pc, #148]	; (8005e98 <f_unlink+0xb8>)
 8005e04:	931b      	str	r3, [sp, #108]	; 0x6c
		res = follow_path(&dj, path);		/* Follow the file path */
 8005e06:	9901      	ldr	r1, [sp, #4]
 8005e08:	a811      	add	r0, sp, #68	; 0x44
 8005e0a:	f7ff facc 	bl	80053a6 <follow_path>
		if (res == FR_OK) {					/* The object is accessible */
 8005e0e:	4604      	mov	r4, r0
 8005e10:	2800      	cmp	r0, #0
 8005e12:	d1f1      	bne.n	8005df8 <f_unlink+0x18>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8005e14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e16:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	db1e      	blt.n	8005e5c <f_unlink+0x7c>
				if (dj.obj.attr & AM_RDO) {
 8005e1e:	f89d 504a 	ldrb.w	r5, [sp, #74]	; 0x4a
 8005e22:	f015 0f01 	tst.w	r5, #1
 8005e26:	d12a      	bne.n	8005e7e <f_unlink+0x9e>
					dclst = ld_clust(fs, dj.dir);
 8005e28:	9f05      	ldr	r7, [sp, #20]
 8005e2a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	f7fe fa22 	bl	8004276 <ld_clust>
 8005e32:	4606      	mov	r6, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory ? */
 8005e34:	f015 0f10 	tst.w	r5, #16
 8005e38:	d012      	beq.n	8005e60 <f_unlink+0x80>
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8005e3a:	9706      	str	r7, [sp, #24]
						sdj.obj.sclust = dclst;
 8005e3c:	9008      	str	r0, [sp, #32]
						res = dir_sdi(&sdj, 0);
 8005e3e:	2100      	movs	r1, #0
 8005e40:	a806      	add	r0, sp, #24
 8005e42:	f7fe fdbc 	bl	80049be <dir_sdi>
						if (res == FR_OK) {
 8005e46:	4604      	mov	r4, r0
 8005e48:	b950      	cbnz	r0, 8005e60 <f_unlink+0x80>
							res = dir_read(&sdj, 0);			/* Read an item */
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	a806      	add	r0, sp, #24
 8005e4e:	f7fe ffdc 	bl	8004e0a <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8005e52:	4604      	mov	r4, r0
 8005e54:	b1b0      	cbz	r0, 8005e84 <f_unlink+0xa4>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8005e56:	2804      	cmp	r0, #4
 8005e58:	d102      	bne.n	8005e60 <f_unlink+0x80>
 8005e5a:	e003      	b.n	8005e64 <f_unlink+0x84>
	DWORD dclst = 0;
 8005e5c:	2600      	movs	r6, #0
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8005e5e:	2406      	movs	r4, #6
			if (res == FR_OK) {
 8005e60:	2c00      	cmp	r4, #0
 8005e62:	d1c9      	bne.n	8005df8 <f_unlink+0x18>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8005e64:	a811      	add	r0, sp, #68	; 0x44
 8005e66:	f7ff f82e 	bl	8004ec6 <dir_remove>
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	b900      	cbnz	r0, 8005e70 <f_unlink+0x90>
 8005e6e:	b95e      	cbnz	r6, 8005e88 <f_unlink+0xa8>
				if (res == FR_OK) res = sync_fs(fs);
 8005e70:	2c00      	cmp	r4, #0
 8005e72:	d1c1      	bne.n	8005df8 <f_unlink+0x18>
 8005e74:	9805      	ldr	r0, [sp, #20]
 8005e76:	f7ff fb7d 	bl	8005574 <sync_fs>
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	e7bc      	b.n	8005df8 <f_unlink+0x18>
	DWORD dclst = 0;
 8005e7e:	2600      	movs	r6, #0
					res = FR_DENIED;		/* Cannot remove R/O object */
 8005e80:	2407      	movs	r4, #7
 8005e82:	e7ed      	b.n	8005e60 <f_unlink+0x80>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8005e84:	2407      	movs	r4, #7
 8005e86:	e7eb      	b.n	8005e60 <f_unlink+0x80>
					res = remove_chain(&dj.obj, dclst, 0);
 8005e88:	2200      	movs	r2, #0
 8005e8a:	4631      	mov	r1, r6
 8005e8c:	a811      	add	r0, sp, #68	; 0x44
 8005e8e:	f7fe fed0 	bl	8004c32 <remove_chain>
 8005e92:	4604      	mov	r4, r0
 8005e94:	e7ec      	b.n	8005e70 <f_unlink+0x90>
 8005e96:	bf00      	nop
 8005e98:	20000fe0 	.word	0x20000fe0

08005e9c <f_gets>:
{
 8005e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea0:	b082      	sub	sp, #8
 8005ea2:	4680      	mov	r8, r0
 8005ea4:	460e      	mov	r6, r1
 8005ea6:	4617      	mov	r7, r2
	TCHAR c, *p = buff;
 8005ea8:	4604      	mov	r4, r0
	int n = 0;
 8005eaa:	2500      	movs	r5, #0
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005eac:	e001      	b.n	8005eb2 <f_gets+0x16>
 8005eae:	4622      	mov	r2, r4
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	1e73      	subs	r3, r6, #1
 8005eb4:	42ab      	cmp	r3, r5
 8005eb6:	dd12      	ble.n	8005ede <f_gets+0x42>
		f_read(fp, s, 1, &rc);
 8005eb8:	466b      	mov	r3, sp
 8005eba:	2201      	movs	r2, #1
 8005ebc:	a901      	add	r1, sp, #4
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	f7ff fc86 	bl	80057d0 <f_read>
		if (rc != 1) break;
 8005ec4:	9b00      	ldr	r3, [sp, #0]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d109      	bne.n	8005ede <f_gets+0x42>
		c = s[0];
 8005eca:	f89d 3004 	ldrb.w	r3, [sp, #4]
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005ece:	2b0d      	cmp	r3, #13
 8005ed0:	d0ed      	beq.n	8005eae <f_gets+0x12>
		*p++ = c;
 8005ed2:	1c62      	adds	r2, r4, #1
 8005ed4:	7023      	strb	r3, [r4, #0]
		n++;
 8005ed6:	3501      	adds	r5, #1
		if (c == '\n') break;		/* Break on EOL */
 8005ed8:	2b0a      	cmp	r3, #10
 8005eda:	d1e9      	bne.n	8005eb0 <f_gets+0x14>
		*p++ = c;
 8005edc:	4614      	mov	r4, r2
	*p = 0;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	7023      	strb	r3, [r4, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005ee2:	b11d      	cbz	r5, 8005eec <f_gets+0x50>
 8005ee4:	4640      	mov	r0, r8
}
 8005ee6:	b002      	add	sp, #8
 8005ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005eec:	2000      	movs	r0, #0
 8005eee:	e7fa      	b.n	8005ee6 <f_gets+0x4a>

08005ef0 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8005ef0:	b510      	push	{r4, lr}
 8005ef2:	b094      	sub	sp, #80	; 0x50
 8005ef4:	4604      	mov	r4, r0
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8005ef6:	9101      	str	r1, [sp, #4]
	pb.nchr = pb.idx = 0;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	9302      	str	r3, [sp, #8]
 8005efc:	9303      	str	r3, [sp, #12]

	while (*str)			/* Put the string */
 8005efe:	e003      	b.n	8005f08 <f_puts+0x18>
		putc_bfd(&pb, *str++);
 8005f00:	3401      	adds	r4, #1
 8005f02:	a801      	add	r0, sp, #4
 8005f04:	f7ff fdfe 	bl	8005b04 <putc_bfd>
	while (*str)			/* Put the string */
 8005f08:	7821      	ldrb	r1, [r4, #0]
 8005f0a:	2900      	cmp	r1, #0
 8005f0c:	d1f8      	bne.n	8005f00 <f_puts+0x10>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8005f0e:	9a02      	ldr	r2, [sp, #8]
 8005f10:	2a00      	cmp	r2, #0
 8005f12:	db0c      	blt.n	8005f2e <f_puts+0x3e>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8005f14:	466b      	mov	r3, sp
 8005f16:	a904      	add	r1, sp, #16
 8005f18:	9801      	ldr	r0, [sp, #4]
 8005f1a:	f7ff fd18 	bl	800594e <f_write>
 8005f1e:	b948      	cbnz	r0, 8005f34 <f_puts+0x44>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8005f20:	9a02      	ldr	r2, [sp, #8]
 8005f22:	9b00      	ldr	r3, [sp, #0]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d108      	bne.n	8005f3a <f_puts+0x4a>
 8005f28:	9803      	ldr	r0, [sp, #12]
	return EOF;
}
 8005f2a:	b014      	add	sp, #80	; 0x50
 8005f2c:	bd10      	pop	{r4, pc}
	return EOF;
 8005f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f32:	e7fa      	b.n	8005f2a <f_puts+0x3a>
 8005f34:	f04f 30ff 	mov.w	r0, #4294967295
 8005f38:	e7f7      	b.n	8005f2a <f_puts+0x3a>
 8005f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3e:	e7f4      	b.n	8005f2a <f_puts+0x3a>

08005f40 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8005f40:	287f      	cmp	r0, #127	; 0x7f
 8005f42:	d916      	bls.n	8005f72 <ff_convert+0x32>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8005f44:	b131      	cbz	r1, 8005f54 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8005f46:	28ff      	cmp	r0, #255	; 0xff
 8005f48:	d812      	bhi.n	8005f70 <ff_convert+0x30>
 8005f4a:	3880      	subs	r0, #128	; 0x80
 8005f4c:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <ff_convert+0x34>)
 8005f4e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8005f52:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8005f54:	2300      	movs	r3, #0
 8005f56:	2b7f      	cmp	r3, #127	; 0x7f
 8005f58:	d807      	bhi.n	8005f6a <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 8005f5a:	4a06      	ldr	r2, [pc, #24]	; (8005f74 <ff_convert+0x34>)
 8005f5c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005f60:	4282      	cmp	r2, r0
 8005f62:	d002      	beq.n	8005f6a <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 8005f64:	3301      	adds	r3, #1
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	e7f5      	b.n	8005f56 <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 8005f6a:	3380      	adds	r3, #128	; 0x80
 8005f6c:	b2d8      	uxtb	r0, r3
 8005f6e:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8005f70:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8005f72:	4770      	bx	lr
 8005f74:	0800648c 	.word	0x0800648c

08005f78 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8005f78:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8005f7c:	d207      	bcs.n	8005f8e <ff_wtoupper+0x16>
 8005f7e:	4b23      	ldr	r3, [pc, #140]	; (800600c <ff_wtoupper+0x94>)
	for (;;) {
		bc = *p++;								/* Get block base */
 8005f80:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 8005f82:	2a00      	cmp	r2, #0
 8005f84:	d040      	beq.n	8006008 <ff_wtoupper+0x90>
 8005f86:	4290      	cmp	r0, r2
 8005f88:	d33e      	bcc.n	8006008 <ff_wtoupper+0x90>
{
 8005f8a:	b4f0      	push	{r4, r5, r6, r7}
 8005f8c:	e006      	b.n	8005f9c <ff_wtoupper+0x24>
	p = chr < 0x1000 ? cvt1 : cvt2;
 8005f8e:	4b20      	ldr	r3, [pc, #128]	; (8006010 <ff_wtoupper+0x98>)
 8005f90:	e7f6      	b.n	8005f80 <ff_wtoupper+0x8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8005f92:	462b      	mov	r3, r5
		bc = *p++;								/* Get block base */
 8005f94:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 8005f96:	b1ca      	cbz	r2, 8005fcc <ff_wtoupper+0x54>
 8005f98:	4290      	cmp	r0, r2
 8005f9a:	d317      	bcc.n	8005fcc <ff_wtoupper+0x54>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8005f9c:	1d1d      	adds	r5, r3, #4
 8005f9e:	885b      	ldrh	r3, [r3, #2]
 8005fa0:	0a19      	lsrs	r1, r3, #8
 8005fa2:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 8005fa4:	189c      	adds	r4, r3, r2
 8005fa6:	42a0      	cmp	r0, r4
 8005fa8:	db04      	blt.n	8005fb4 <ff_wtoupper+0x3c>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8005faa:	2900      	cmp	r1, #0
 8005fac:	d1f1      	bne.n	8005f92 <ff_wtoupper+0x1a>
 8005fae:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8005fb2:	e7ef      	b.n	8005f94 <ff_wtoupper+0x1c>
			switch (cmd) {
 8005fb4:	2908      	cmp	r1, #8
 8005fb6:	d809      	bhi.n	8005fcc <ff_wtoupper+0x54>
 8005fb8:	e8df f001 	tbb	[pc, r1]
 8005fbc:	13100a05 	.word	0x13100a05
 8005fc0:	1f1c1916 	.word	0x1f1c1916
 8005fc4:	22          	.byte	0x22
 8005fc5:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8005fc6:	1a86      	subs	r6, r0, r2
 8005fc8:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
	}

	return chr;
}
 8005fcc:	bcf0      	pop	{r4, r5, r6, r7}
 8005fce:	4770      	bx	lr
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8005fd0:	1a82      	subs	r2, r0, r2
 8005fd2:	f002 0301 	and.w	r3, r2, #1
 8005fd6:	1ac0      	subs	r0, r0, r3
 8005fd8:	b280      	uxth	r0, r0
 8005fda:	e7f7      	b.n	8005fcc <ff_wtoupper+0x54>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005fdc:	3810      	subs	r0, #16
 8005fde:	b280      	uxth	r0, r0
 8005fe0:	e7f4      	b.n	8005fcc <ff_wtoupper+0x54>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8005fe2:	3820      	subs	r0, #32
 8005fe4:	b280      	uxth	r0, r0
 8005fe6:	e7f1      	b.n	8005fcc <ff_wtoupper+0x54>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8005fe8:	3830      	subs	r0, #48	; 0x30
 8005fea:	b280      	uxth	r0, r0
 8005fec:	e7ee      	b.n	8005fcc <ff_wtoupper+0x54>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8005fee:	381a      	subs	r0, #26
 8005ff0:	b280      	uxth	r0, r0
 8005ff2:	e7eb      	b.n	8005fcc <ff_wtoupper+0x54>
			case 6:	chr += 8; break;				/* Shift +8 */
 8005ff4:	3008      	adds	r0, #8
 8005ff6:	b280      	uxth	r0, r0
 8005ff8:	e7e8      	b.n	8005fcc <ff_wtoupper+0x54>
			case 7: chr -= 80; break;				/* Shift -80 */
 8005ffa:	3850      	subs	r0, #80	; 0x50
 8005ffc:	b280      	uxth	r0, r0
 8005ffe:	e7e5      	b.n	8005fcc <ff_wtoupper+0x54>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006000:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8006004:	b280      	uxth	r0, r0
 8006006:	e7e1      	b.n	8005fcc <ff_wtoupper+0x54>
}
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	0800658c 	.word	0x0800658c
 8006010:	08006780 	.word	0x08006780

08006014 <__libc_init_array>:
 8006014:	b570      	push	{r4, r5, r6, lr}
 8006016:	4e0d      	ldr	r6, [pc, #52]	; (800604c <__libc_init_array+0x38>)
 8006018:	4c0d      	ldr	r4, [pc, #52]	; (8006050 <__libc_init_array+0x3c>)
 800601a:	1ba4      	subs	r4, r4, r6
 800601c:	10a4      	asrs	r4, r4, #2
 800601e:	2500      	movs	r5, #0
 8006020:	42a5      	cmp	r5, r4
 8006022:	d109      	bne.n	8006038 <__libc_init_array+0x24>
 8006024:	4e0b      	ldr	r6, [pc, #44]	; (8006054 <__libc_init_array+0x40>)
 8006026:	4c0c      	ldr	r4, [pc, #48]	; (8006058 <__libc_init_array+0x44>)
 8006028:	f000 f84e 	bl	80060c8 <_init>
 800602c:	1ba4      	subs	r4, r4, r6
 800602e:	10a4      	asrs	r4, r4, #2
 8006030:	2500      	movs	r5, #0
 8006032:	42a5      	cmp	r5, r4
 8006034:	d105      	bne.n	8006042 <__libc_init_array+0x2e>
 8006036:	bd70      	pop	{r4, r5, r6, pc}
 8006038:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800603c:	4798      	blx	r3
 800603e:	3501      	adds	r5, #1
 8006040:	e7ee      	b.n	8006020 <__libc_init_array+0xc>
 8006042:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006046:	4798      	blx	r3
 8006048:	3501      	adds	r5, #1
 800604a:	e7f2      	b.n	8006032 <__libc_init_array+0x1e>
 800604c:	08006950 	.word	0x08006950
 8006050:	08006950 	.word	0x08006950
 8006054:	08006950 	.word	0x08006950
 8006058:	08006954 	.word	0x08006954

0800605c <__locale_ctype_ptr>:
 800605c:	4b04      	ldr	r3, [pc, #16]	; (8006070 <__locale_ctype_ptr+0x14>)
 800605e:	4a05      	ldr	r2, [pc, #20]	; (8006074 <__locale_ctype_ptr+0x18>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	2b00      	cmp	r3, #0
 8006066:	bf08      	it	eq
 8006068:	4613      	moveq	r3, r2
 800606a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800606e:	4770      	bx	lr
 8006070:	20000010 	.word	0x20000010
 8006074:	20000074 	.word	0x20000074

08006078 <__ascii_mbtowc>:
 8006078:	b082      	sub	sp, #8
 800607a:	b901      	cbnz	r1, 800607e <__ascii_mbtowc+0x6>
 800607c:	a901      	add	r1, sp, #4
 800607e:	b142      	cbz	r2, 8006092 <__ascii_mbtowc+0x1a>
 8006080:	b14b      	cbz	r3, 8006096 <__ascii_mbtowc+0x1e>
 8006082:	7813      	ldrb	r3, [r2, #0]
 8006084:	600b      	str	r3, [r1, #0]
 8006086:	7812      	ldrb	r2, [r2, #0]
 8006088:	1c10      	adds	r0, r2, #0
 800608a:	bf18      	it	ne
 800608c:	2001      	movne	r0, #1
 800608e:	b002      	add	sp, #8
 8006090:	4770      	bx	lr
 8006092:	4610      	mov	r0, r2
 8006094:	e7fb      	b.n	800608e <__ascii_mbtowc+0x16>
 8006096:	f06f 0001 	mvn.w	r0, #1
 800609a:	e7f8      	b.n	800608e <__ascii_mbtowc+0x16>

0800609c <memset>:
 800609c:	4402      	add	r2, r0
 800609e:	4603      	mov	r3, r0
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d100      	bne.n	80060a6 <memset+0xa>
 80060a4:	4770      	bx	lr
 80060a6:	f803 1b01 	strb.w	r1, [r3], #1
 80060aa:	e7f9      	b.n	80060a0 <memset+0x4>

080060ac <__ascii_wctomb>:
 80060ac:	b149      	cbz	r1, 80060c2 <__ascii_wctomb+0x16>
 80060ae:	2aff      	cmp	r2, #255	; 0xff
 80060b0:	bf85      	ittet	hi
 80060b2:	238a      	movhi	r3, #138	; 0x8a
 80060b4:	6003      	strhi	r3, [r0, #0]
 80060b6:	700a      	strbls	r2, [r1, #0]
 80060b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80060bc:	bf98      	it	ls
 80060be:	2001      	movls	r0, #1
 80060c0:	4770      	bx	lr
 80060c2:	4608      	mov	r0, r1
 80060c4:	4770      	bx	lr
	...

080060c8 <_init>:
 80060c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ca:	bf00      	nop
 80060cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ce:	bc08      	pop	{r3}
 80060d0:	469e      	mov	lr, r3
 80060d2:	4770      	bx	lr

080060d4 <_fini>:
 80060d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d6:	bf00      	nop
 80060d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060da:	bc08      	pop	{r3}
 80060dc:	469e      	mov	lr, r3
 80060de:	4770      	bx	lr
