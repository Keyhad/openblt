
openblt_discovery_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .hal_verctor  00000010  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00003420  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001d4  080035c0  080035c0  000135c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08003794  08003794  00020074  2**0
                  CONTENTS
  5 .ARM          00000008  08003794  08003794  00013794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800379c  0800379c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800379c  0800379c  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080037a0  080037a0  000137a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000074  20000000  080037a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000624  20000074  08003818  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20000698  08003818  00020698  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011122  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c1e  00000000  00000000  000311c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  00034de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d60  00000000  00000000  00035b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000251dc  00000000  00000000  000368a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121d3  00000000  00000000  0005ba7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d24ab  00000000  00000000  0006dc4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001400fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002684  00000000  00000000  00140150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00007714  00000000  00000000  001427d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080035a8 	.word	0x080035a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080035a8 	.word	0x080035a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <AppInit>:
**            software program initialization.
** \return    none.
**
****************************************************************************************/
void AppInit(void)
{
 8000578:	b508      	push	{r3, lr}
  /* initialize the bootloader */
  BootInit();
 800057a:	f001 fc51 	bl	8001e20 <BootInit>
} /*** end of AppInit ***/
 800057e:	bd08      	pop	{r3, pc}

08000580 <AppTask>:
**            in the program loop.
** \return    none.
**
****************************************************************************************/
void AppTask(void)
{
 8000580:	b508      	push	{r3, lr}
  /* Run the bootloader task. */
  BootTask();
 8000582:	f001 fc5b 	bl	8001e3c <BootTask>
} /*** end of AppTask ***/
 8000586:	bd08      	pop	{r3, pc}

08000588 <CpuUserProgramStartHook>:
** \return    BLT_TRUE if it is okay to start the user program, BLT_FALSE to keep
**            keep the bootloader active.
**
****************************************************************************************/
blt_bool CpuUserProgramStartHook(void)
{
 8000588:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <CpuUserProgramStartHook+0x18>)
 800058c:	691b      	ldr	r3, [r3, #16]
  /* additional and optional backdoor entry through the pushbutton on the board. to
   * force the bootloader to stay active after reset, keep it pressed during reset.
   */
  if (LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_0) != 0)
 800058e:	f013 0f01 	tst.w	r3, #1
 8000592:	d001      	beq.n	8000598 <CpuUserProgramStartHook+0x10>
  {
    /* pushbutton pressed, so do not start the user program and keep the
     * bootloader active instead.
     */
    return BLT_FALSE;
 8000594:	2000      	movs	r0, #0
  /* clean up the LED driver */
  LedBlinkExit();

  /* okay to start the user program */
  return BLT_TRUE;
} /*** end of CpuUserProgramStartHook ***/
 8000596:	bd08      	pop	{r3, pc}
  LedBlinkExit();
 8000598:	f000 f854 	bl	8000644 <LedBlinkExit>
  return BLT_TRUE;
 800059c:	2001      	movs	r0, #1
 800059e:	e7fa      	b.n	8000596 <CpuUserProgramStartHook+0xe>
 80005a0:	40020000 	.word	0x40020000

080005a4 <CopInitHook>:
**            watchdog.
** \return    none.
**
****************************************************************************************/
void CopInitHook(void)
{
 80005a4:	b508      	push	{r3, lr}
  /* this function is called upon initialization. might as well use it to initialize
   * the LED driver. It is kind of a visual watchdog anyways.
   */
  LedBlinkInit(100);
 80005a6:	2064      	movs	r0, #100	; 0x64
 80005a8:	f000 f818 	bl	80005dc <LedBlinkInit>
} /*** end of CopInitHook ***/
 80005ac:	bd08      	pop	{r3, pc}

080005ae <CopServiceHook>:
**            the watchdog to prevent a watchdog reset.
** \return    none.
**
****************************************************************************************/
void CopServiceHook(void)
{
 80005ae:	b508      	push	{r3, lr}
  /* run the LED blink task. this is a better place to do it than in the main() program
   * loop. certain operations such as flash erase can take a long time, which would cause
   * a blink interval to be skipped. this function is also called during such operations,
   * so no blink intervals will be skipped when calling the LED blink task here.
   */
  LedBlinkTask();
 80005b0:	f000 f81a 	bl	80005e8 <LedBlinkTask>
} /*** end of CopServiceHook ***/
 80005b4:	bd08      	pop	{r3, pc}

080005b6 <XcpGetSeedHook>:
**
****************************************************************************************/
blt_int8u XcpGetSeedHook(blt_int8u resource, blt_int8u *seed)
{
  /* request seed for unlocking ProGraMming resource */
  if ((resource & XCP_RES_PGM) != 0)
 80005b6:	f010 0f10 	tst.w	r0, #16
 80005ba:	d001      	beq.n	80005c0 <XcpGetSeedHook+0xa>
  {
    seed[0] = 0x55;
 80005bc:	2355      	movs	r3, #85	; 0x55
 80005be:	700b      	strb	r3, [r1, #0]
  }

  /* return seed length */
  return 1;
} /*** end of XcpGetSeedHook ***/
 80005c0:	2001      	movs	r0, #1
 80005c2:	4770      	bx	lr

080005c4 <XcpVerifyKeyHook>:
  /* the example key algorithm in "libseednkey.dll" works as follows:
   *  - PGM will be unlocked if key = seed - 1
   */

  /* check key for unlocking ProGraMming resource */
  if ((resource == XCP_RES_PGM) && (key[0] == (0x55-1)))
 80005c4:	2810      	cmp	r0, #16
 80005c6:	d001      	beq.n	80005cc <XcpVerifyKeyHook+0x8>
    /* correct key received for unlocking PGM resource */
    return 1;
  }

  /* still here so key incorrect */
  return 0;
 80005c8:	2000      	movs	r0, #0
 80005ca:	4770      	bx	lr
  if ((resource == XCP_RES_PGM) && (key[0] == (0x55-1)))
 80005cc:	780b      	ldrb	r3, [r1, #0]
 80005ce:	2b54      	cmp	r3, #84	; 0x54
 80005d0:	d001      	beq.n	80005d6 <XcpVerifyKeyHook+0x12>
  return 0;
 80005d2:	2000      	movs	r0, #0
 80005d4:	4770      	bx	lr
    return 1;
 80005d6:	2001      	movs	r0, #1
} /*** end of XcpVerifyKeyHook ***/
 80005d8:	4770      	bx	lr
	...

080005dc <LedBlinkInit>:
**
****************************************************************************************/
void LedBlinkInit(blt_int16u interval_ms)
{
  /* store the interval time between LED toggles */
  ledBlinkIntervalMs = interval_ms;
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <LedBlinkInit+0x8>)
 80005de:	8018      	strh	r0, [r3, #0]
} /*** end of LedBlinkInit ***/
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000090 	.word	0x20000090

080005e8 <LedBlinkTask>:
** \brief     Task function for blinking the LED as a fixed timer interval.
** \return    none.
**
****************************************************************************************/
void LedBlinkTask(void)
{
 80005e8:	b508      	push	{r3, lr}
  static blt_bool ledOn = BLT_FALSE;
  static blt_int32u nextBlinkEvent = 0;

  /* check for blink event */
  if (TimerGet() >= nextBlinkEvent)
 80005ea:	f001 fbcb 	bl	8001d84 <TimerGet>
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <LedBlinkTask+0x4c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4298      	cmp	r0, r3
 80005f4:	d312      	bcc.n	800061c <LedBlinkTask+0x34>
  {
    /* toggle the LED state */
    if (ledOn == BLT_FALSE)
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <LedBlinkTask+0x50>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	b983      	cbnz	r3, 800061e <LedBlinkTask+0x36>
    {
      ledOn = BLT_TRUE;
 80005fc:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <LedBlinkTask+0x50>)
 80005fe:	2201      	movs	r2, #1
 8000600:	701a      	strb	r2, [r3, #0]
      SET_LED3_ORANGE(RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000608:	480c      	ldr	r0, [pc, #48]	; (800063c <LedBlinkTask+0x54>)
 800060a:	f000 fdf9 	bl	8001200 <HAL_GPIO_WritePin>
    {
      ledOn = BLT_FALSE;
      SET_LED3_ORANGE(SET);
    }
    /* schedule the next blink event */
    nextBlinkEvent = TimerGet() + ledBlinkIntervalMs;
 800060e:	f001 fbb9 	bl	8001d84 <TimerGet>
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <LedBlinkTask+0x58>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	4403      	add	r3, r0
 8000618:	4a06      	ldr	r2, [pc, #24]	; (8000634 <LedBlinkTask+0x4c>)
 800061a:	6013      	str	r3, [r2, #0]
  }
} /*** end of LedBlinkTask ***/
 800061c:	bd08      	pop	{r3, pc}
      ledOn = BLT_FALSE;
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <LedBlinkTask+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
      SET_LED3_ORANGE(SET);
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062a:	4804      	ldr	r0, [pc, #16]	; (800063c <LedBlinkTask+0x54>)
 800062c:	f000 fde8 	bl	8001200 <HAL_GPIO_WritePin>
 8000630:	e7ed      	b.n	800060e <LedBlinkTask+0x26>
 8000632:	bf00      	nop
 8000634:	20000094 	.word	0x20000094
 8000638:	20000092 	.word	0x20000092
 800063c:	40020c00 	.word	0x40020c00
 8000640:	20000090 	.word	0x20000090

08000644 <LedBlinkExit>:
**            exit.
** \return    none.
**
****************************************************************************************/
void LedBlinkExit(void)
{
 8000644:	b508      	push	{r3, lr}
  /* turn the LED off */
  SET_LED3_ORANGE(SET);
 8000646:	2201      	movs	r2, #1
 8000648:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064c:	4801      	ldr	r0, [pc, #4]	; (8000654 <LedBlinkExit+0x10>)
 800064e:	f000 fdd7 	bl	8001200 <HAL_GPIO_WritePin>
} /*** end of LedBlinkExit ***/
 8000652:	bd08      	pop	{r3, pc}
 8000654:	40020c00 	.word	0x40020c00

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	b08c      	sub	sp, #48	; 0x30
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	2400      	movs	r4, #0
 800065e:	940b      	str	r4, [sp, #44]	; 0x2c
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000660:	4b30      	ldr	r3, [pc, #192]	; (8000724 <MX_GPIO_Init+0xcc>)
 8000662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000664:	f042 0204 	orr.w	r2, r2, #4
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800066a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800066c:	f002 0204 	and.w	r2, r2, #4
 8000670:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 8000672:	9a05      	ldr	r2, [sp, #20]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000676:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800067a:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800067c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800067e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000682:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8000684:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000688:	f042 0201 	orr.w	r2, r2, #1
 800068c:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800068e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000690:	f002 0201 	and.w	r2, r2, #1
 8000694:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000696:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800069a:	f042 0202 	orr.w	r2, r2, #2
 800069e:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80006a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006a2:	f002 0202 	and.w	r2, r2, #2
 80006a6:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80006a8:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80006aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ac:	f042 0208 	orr.w	r2, r2, #8
 80006b0:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80006b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b4:	f003 0308 	and.w	r3, r3, #8
 80006b8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80006ba:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80006bc:	481a      	ldr	r0, [pc, #104]	; (8000728 <MX_GPIO_Init+0xd0>)
 80006be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c2:	6183      	str	r3, [r0, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80006c4:	4e19      	ldr	r6, [pc, #100]	; (800072c <MX_GPIO_Init+0xd4>)
 80006c6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80006ca:	61b2      	str	r2, [r6, #24]

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LED4__Green_Pin|LED3__Orange_Pin|LED5__Red_Pin|LED6__Blue_Pin);

  /**/
  GPIO_InitStruct.Pin = Reset_Pin;
 80006cc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006ce:	2501      	movs	r5, #1
 80006d0:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006d2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006d4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006d6:	940a      	str	r4, [sp, #40]	; 0x28
  LL_GPIO_Init(Reset_GPIO_Port, &GPIO_InitStruct);
 80006d8:	a906      	add	r1, sp, #24
 80006da:	f000 fe7a 	bl	80013d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USER_Pin;
 80006de:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80006e0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006e2:	940a      	str	r4, [sp, #40]	; 0x28
  LL_GPIO_Init(USER_GPIO_Port, &GPIO_InitStruct);
 80006e4:	a906      	add	r1, sp, #24
 80006e6:	4812      	ldr	r0, [pc, #72]	; (8000730 <MX_GPIO_Init+0xd8>)
 80006e8:	f000 fe73 	bl	80013d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED4__Green_Pin|LED3__Orange_Pin|LED5__Red_Pin|LED6__Blue_Pin;
 80006ec:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006f0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006f2:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006f4:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006f6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006f8:	940a      	str	r4, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006fa:	a906      	add	r1, sp, #24
 80006fc:	4630      	mov	r0, r6
 80006fe:	f000 fe68 	bl	80013d2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000702:	2320      	movs	r3, #32
 8000704:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000706:	2302      	movs	r3, #2
 8000708:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800070a:	2303      	movs	r3, #3
 800070c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800070e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000710:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = LL_GPIO_AF_9;
 8000712:	2309      	movs	r3, #9
 8000714:	930b      	str	r3, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	a906      	add	r1, sp, #24
 8000718:	4806      	ldr	r0, [pc, #24]	; (8000734 <MX_GPIO_Init+0xdc>)
 800071a:	f000 fe5a 	bl	80013d2 <LL_GPIO_Init>

}
 800071e:	b00c      	add	sp, #48	; 0x30
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40020800 	.word	0x40020800
 800072c:	40020c00 	.word	0x40020c00
 8000730:	40020000 	.word	0x40020000
 8000734:	40020400 	.word	0x40020400

08000738 <MX_USART6_UART_Init>:
{
 8000738:	b510      	push	{r4, lr}
 800073a:	b090      	sub	sp, #64	; 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800073c:	2400      	movs	r4, #0
 800073e:	9409      	str	r4, [sp, #36]	; 0x24
 8000740:	940a      	str	r4, [sp, #40]	; 0x28
 8000742:	940b      	str	r4, [sp, #44]	; 0x2c
 8000744:	940c      	str	r4, [sp, #48]	; 0x30
 8000746:	940d      	str	r4, [sp, #52]	; 0x34
 8000748:	940e      	str	r4, [sp, #56]	; 0x38
 800074a:	940f      	str	r4, [sp, #60]	; 0x3c
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_USART6_UART_Init+0x90>)
 800074e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000750:	f042 0220 	orr.w	r2, r2, #32
 8000754:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000758:	f002 0220 	and.w	r2, r2, #32
 800075c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800075e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000762:	f042 0204 	orr.w	r2, r2, #4
 8000766:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000770:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000772:	23c0      	movs	r3, #192	; 0xc0
 8000774:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000776:	2302      	movs	r3, #2
 8000778:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800077e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000780:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000782:	2308      	movs	r3, #8
 8000784:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000786:	a903      	add	r1, sp, #12
 8000788:	4810      	ldr	r0, [pc, #64]	; (80007cc <MX_USART6_UART_Init+0x94>)
 800078a:	f000 fe22 	bl	80013d2 <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 115200;
 800078e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000792:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000794:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000796:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000798:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800079a:	230c      	movs	r3, #12
 800079c:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800079e:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80007a0:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART6, &USART_InitStruct);
 80007a2:	4c0b      	ldr	r4, [pc, #44]	; (80007d0 <MX_USART6_UART_Init+0x98>)
 80007a4:	a909      	add	r1, sp, #36	; 0x24
 80007a6:	4620      	mov	r0, r4
 80007a8:	f000 ff1c 	bl	80015e4 <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80007ac:	6923      	ldr	r3, [r4, #16]
 80007ae:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80007b2:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80007b4:	6963      	ldr	r3, [r4, #20]
 80007b6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80007ba:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80007bc:	68e3      	ldr	r3, [r4, #12]
 80007be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007c2:	60e3      	str	r3, [r4, #12]
}
 80007c4:	b010      	add	sp, #64	; 0x40
 80007c6:	bd10      	pop	{r4, pc}
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020800 	.word	0x40020800
 80007d0:	40011400 	.word	0x40011400

080007d4 <MX_USART3_UART_Init>:
{
 80007d4:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 80007d6:	4808      	ldr	r0, [pc, #32]	; (80007f8 <MX_USART3_UART_Init+0x24>)
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART3_UART_Init+0x28>)
 80007da:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80007dc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80007e0:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	2300      	movs	r3, #0
 80007e4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e6:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007e8:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007ea:	220c      	movs	r2, #12
 80007ec:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007f2:	f000 fdbf 	bl	8001374 <HAL_UART_Init>
}
 80007f6:	bd08      	pop	{r3, pc}
 80007f8:	20000620 	.word	0x20000620
 80007fc:	40004800 	.word	0x40004800

08000800 <__io_putchar>:
{
 8000800:	b510      	push	{r4, lr}
 8000802:	4604      	mov	r4, r0
  Rs232TransmitByte(ch);
 8000804:	b2c0      	uxtb	r0, r0
 8000806:	f001 fa61 	bl	8001ccc <Rs232TransmitByte>
}
 800080a:	4620      	mov	r0, r4
 800080c:	bd10      	pop	{r4, pc}
	...

08000810 <SystemClock_Config>:
{
 8000810:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000812:	4a2e      	ldr	r2, [pc, #184]	; (80008cc <SystemClock_Config+0xbc>)
 8000814:	6813      	ldr	r3, [r2, #0]
 8000816:	f023 0307 	bic.w	r3, r3, #7
 800081a:	f043 0305 	orr.w	r3, r3, #5
 800081e:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000820:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <SystemClock_Config+0xbc>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f003 0307 	and.w	r3, r3, #7
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000828:	2b05      	cmp	r3, #5
 800082a:	d1f9      	bne.n	8000820 <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800082c:	4a28      	ldr	r2, [pc, #160]	; (80008d0 <SystemClock_Config+0xc0>)
 800082e:	6813      	ldr	r3, [r2, #0]
 8000830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000834:	6013      	str	r3, [r2, #0]
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000836:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 800083a:	6813      	ldr	r3, [r2, #0]
 800083c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000846:	6813      	ldr	r3, [r2, #0]
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <SystemClock_Config+0xc4>)
 8000850:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSI_IsReady() != 1)
 8000852:	f013 0f02 	tst.w	r3, #2
 8000856:	d0fa      	beq.n	800084e <SystemClock_Config+0x3e>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000858:	4a1e      	ldr	r2, [pc, #120]	; (80008d4 <SystemClock_Config+0xc4>)
 800085a:	6851      	ldr	r1, [r2, #4]
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <SystemClock_Config+0xc8>)
 800085e:	400b      	ands	r3, r1
 8000860:	f443 5328 	orr.w	r3, r3, #10752	; 0x2a00
 8000864:	f043 0308 	orr.w	r3, r3, #8
 8000868:	6053      	str	r3, [r2, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800086a:	6853      	ldr	r3, [r2, #4]
 800086c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000870:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000872:	6813      	ldr	r3, [r2, #0]
 8000874:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000878:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <SystemClock_Config+0xc4>)
 800087c:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 800087e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000882:	d0fa      	beq.n	800087a <SystemClock_Config+0x6a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <SystemClock_Config+0xc4>)
 8000886:	689a      	ldr	r2, [r3, #8]
 8000888:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800088c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800088e:	689a      	ldr	r2, [r3, #8]
 8000890:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8000894:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000898:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800089a:	689a      	ldr	r2, [r3, #8]
 800089c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80008a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80008a4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80008a6:	689a      	ldr	r2, [r3, #8]
 80008a8:	f022 0203 	bic.w	r2, r2, #3
 80008ac:	f042 0202 	orr.w	r2, r2, #2
 80008b0:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <SystemClock_Config+0xc4>)
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80008ba:	2b08      	cmp	r3, #8
 80008bc:	d1f9      	bne.n	80008b2 <SystemClock_Config+0xa2>
  LL_SetSystemCoreClock(168000000);
 80008be:	4807      	ldr	r0, [pc, #28]	; (80008dc <SystemClock_Config+0xcc>)
 80008c0:	f000 ff4c 	bl	800175c <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80008c4:	2000      	movs	r0, #0
 80008c6:	f000 f92f 	bl	8000b28 <HAL_InitTick>
}
 80008ca:	bd08      	pop	{r3, pc}
 80008cc:	40023c00 	.word	0x40023c00
 80008d0:	40007000 	.word	0x40007000
 80008d4:	40023800 	.word	0x40023800
 80008d8:	ffbf8000 	.word	0xffbf8000
 80008dc:	0a037a00 	.word	0x0a037a00

080008e0 <main>:
{
 80008e0:	b510      	push	{r4, lr}
  HAL_Init();
 80008e2:	f000 f947 	bl	8000b74 <HAL_Init>
  SystemClock_Config();
 80008e6:	f7ff ff93 	bl	8000810 <SystemClock_Config>
  MX_GPIO_Init();
 80008ea:	f7ff feb5 	bl	8000658 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80008ee:	f7ff ff23 	bl	8000738 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 80008f2:	f7ff ff6f 	bl	80007d4 <MX_USART3_UART_Init>
  AppInit();
 80008f6:	f7ff fe3f 	bl	8000578 <AppInit>
  printf("... Main start ... \n");
 80008fa:	4809      	ldr	r0, [pc, #36]	; (8000920 <main+0x40>)
 80008fc:	f001 ff0e 	bl	800271c <puts>
  for (int i = 0; i < 4; i++)
 8000900:	2400      	movs	r4, #0
 8000902:	e007      	b.n	8000914 <main+0x34>
	  printf("hal_vector[%d] = 0x%8.8lX\n", i, (uint32_t)_hal_vector_[i]);
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <main+0x44>)
 8000906:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800090a:	4621      	mov	r1, r4
 800090c:	4806      	ldr	r0, [pc, #24]	; (8000928 <main+0x48>)
 800090e:	f001 fe7f 	bl	8002610 <iprintf>
  for (int i = 0; i < 4; i++)
 8000912:	3401      	adds	r4, #1
 8000914:	2c03      	cmp	r4, #3
 8000916:	ddf5      	ble.n	8000904 <main+0x24>
    AppTask();
 8000918:	f7ff fe32 	bl	8000580 <AppTask>
  while (1)
 800091c:	e7fc      	b.n	8000918 <main+0x38>
 800091e:	bf00      	nop
 8000920:	080035c0 	.word	0x080035c0
 8000924:	08000188 	.word	0x08000188
 8000928:	080035d4 	.word	0x080035d4

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2100      	movs	r1, #0
 8000930:	9100      	str	r1, [sp, #0]
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_MspInit+0x34>)
 8000934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800093a:	645a      	str	r2, [r3, #68]	; 0x44
 800093c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800093e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000942:	9200      	str	r2, [sp, #0]
 8000944:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	9101      	str	r1, [sp, #4]
 8000948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800094a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800094e:	641a      	str	r2, [r3, #64]	; 0x40
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	9301      	str	r3, [sp, #4]
 8000958:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	b002      	add	sp, #8
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000964:	b500      	push	{lr}
 8000966:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	2300      	movs	r3, #0
 800096a:	9303      	str	r3, [sp, #12]
 800096c:	9304      	str	r3, [sp, #16]
 800096e:	9305      	str	r3, [sp, #20]
 8000970:	9306      	str	r3, [sp, #24]
 8000972:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART3)
 8000974:	6802      	ldr	r2, [r0, #0]
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <HAL_UART_MspInit+0x6c>)
 8000978:	429a      	cmp	r2, r3
 800097a:	d002      	beq.n	8000982 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800097c:	b009      	add	sp, #36	; 0x24
 800097e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART3_CLK_ENABLE();
 8000982:	2200      	movs	r2, #0
 8000984:	9201      	str	r2, [sp, #4]
 8000986:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800098a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800098c:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8000990:	6419      	str	r1, [r3, #64]	; 0x40
 8000992:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000994:	f401 2180 	and.w	r1, r1, #262144	; 0x40000
 8000998:	9101      	str	r1, [sp, #4]
 800099a:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	9202      	str	r2, [sp, #8]
 800099e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009a0:	f041 0102 	orr.w	r1, r1, #2
 80009a4:	6319      	str	r1, [r3, #48]	; 0x30
 80009a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a8:	f003 0302 	and.w	r3, r3, #2
 80009ac:	9302      	str	r3, [sp, #8]
 80009ae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009c0:	2307      	movs	r3, #7
 80009c2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	a903      	add	r1, sp, #12
 80009c6:	4803      	ldr	r0, [pc, #12]	; (80009d4 <HAL_UART_MspInit+0x70>)
 80009c8:	f000 fb30 	bl	800102c <HAL_GPIO_Init>
}
 80009cc:	e7d6      	b.n	800097c <HAL_UART_MspInit+0x18>
 80009ce:	bf00      	nop
 80009d0:	40004800 	.word	0x40004800
 80009d4:	40020400 	.word	0x40020400

080009d8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009d8:	4770      	bx	lr

080009da <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler>

080009dc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler>

080009de <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <BusFault_Handler>

080009e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler>

080009e2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e2:	4770      	bx	lr

080009e4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e6:	4770      	bx	lr

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ea:	f000 f8dd 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ee:	bd08      	pop	{r3, pc}

080009f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	460c      	mov	r4, r1
 80009f4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f6:	2500      	movs	r5, #0
 80009f8:	42b5      	cmp	r5, r6
 80009fa:	da07      	bge.n	8000a0c <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 80009fc:	f3af 8000 	nop.w
 8000a00:	4621      	mov	r1, r4
 8000a02:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8000a08:	460c      	mov	r4, r1
 8000a0a:	e7f5      	b.n	80009f8 <_read+0x8>
	}

return len;
}
 8000a0c:	4630      	mov	r0, r6
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}

08000a10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a10:	b570      	push	{r4, r5, r6, lr}
 8000a12:	460c      	mov	r4, r1
 8000a14:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a16:	2500      	movs	r5, #0
 8000a18:	42b5      	cmp	r5, r6
 8000a1a:	da05      	bge.n	8000a28 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8000a1c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000a20:	f7ff feee 	bl	8000800 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a24:	3501      	adds	r5, #1
 8000a26:	e7f7      	b.n	8000a18 <_write+0x8>
	}
	return len;
}
 8000a28:	4630      	mov	r0, r6
 8000a2a:	bd70      	pop	{r4, r5, r6, pc}

08000a2c <_close>:

int _close(int file)
{
	return -1;
}
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	4770      	bx	lr

08000a32 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000a32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a36:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000a38:	2000      	movs	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	4770      	bx	lr

08000a40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000a40:	2000      	movs	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a44:	b510      	push	{r4, lr}
 8000a46:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a48:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <_sbrk+0x38>)
 8000a4a:	490d      	ldr	r1, [pc, #52]	; (8000a80 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a4c:	480d      	ldr	r0, [pc, #52]	; (8000a84 <_sbrk+0x40>)
 8000a4e:	6800      	ldr	r0, [r0, #0]
 8000a50:	b140      	cbz	r0, 8000a64 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a52:	480c      	ldr	r0, [pc, #48]	; (8000a84 <_sbrk+0x40>)
 8000a54:	6800      	ldr	r0, [r0, #0]
 8000a56:	4403      	add	r3, r0
 8000a58:	1a52      	subs	r2, r2, r1
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d806      	bhi.n	8000a6c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000a5e:	4a09      	ldr	r2, [pc, #36]	; (8000a84 <_sbrk+0x40>)
 8000a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000a62:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000a64:	4807      	ldr	r0, [pc, #28]	; (8000a84 <_sbrk+0x40>)
 8000a66:	4c08      	ldr	r4, [pc, #32]	; (8000a88 <_sbrk+0x44>)
 8000a68:	6004      	str	r4, [r0, #0]
 8000a6a:	e7f2      	b.n	8000a52 <_sbrk+0xe>
    errno = ENOMEM;
 8000a6c:	f001 fd9e 	bl	80025ac <__errno>
 8000a70:	230c      	movs	r3, #12
 8000a72:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	e7f3      	b.n	8000a62 <_sbrk+0x1e>
 8000a7a:	bf00      	nop
 8000a7c:	20020000 	.word	0x20020000
 8000a80:	00000800 	.word	0x00000800
 8000a84:	20000098 	.word	0x20000098
 8000a88:	20000698 	.word	0x20000698

08000a8c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <SystemInit+0x18>)
 8000a8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000a92:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a9e:	609a      	str	r2, [r3, #8]
#endif
}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <Reset_Handler>:
*/
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000aac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000aae:	e003      	b.n	8000ab8 <LoopCopyDataInit>

08000ab0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ab2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ab4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ab6:	3104      	adds	r1, #4

08000ab8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ab8:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000abc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000abe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ac0:	d3f6      	bcc.n	8000ab0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ac4:	e002      	b.n	8000acc <LoopFillZerobss>

08000ac6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ac6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ac8:	f842 3b04 	str.w	r3, [r2], #4

08000acc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ace:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ad0:	d3f9      	bcc.n	8000ac6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ad2:	f7ff ffdb 	bl	8000a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad6:	f001 fd6f 	bl	80025b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ada:	f7ff ff01 	bl	80008e0 <main>
  bx  lr    
 8000ade:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ae0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ae4:	080037a4 	.word	0x080037a4
  ldr  r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000aec:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000af0:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000af4:	20000698 	.word	0x20000698

08000af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC_IRQHandler>

08000afa <HAL_MspDeInit>:
__weak void HAL_MspDeInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000afa:	4770      	bx	lr

08000afc <HAL_DeInit>:
{
 8000afc:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_DeInit+0x28>)
 8000b00:	f04f 32ff 	mov.w	r2, #4294967295
 8000b04:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000b06:	2400      	movs	r4, #0
 8000b08:	621c      	str	r4, [r3, #32]
  __HAL_RCC_APB2_FORCE_RESET();
 8000b0a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000b0c:	625c      	str	r4, [r3, #36]	; 0x24
  __HAL_RCC_AHB1_FORCE_RESET();
 8000b0e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000b10:	611c      	str	r4, [r3, #16]
  __HAL_RCC_AHB2_FORCE_RESET();
 8000b12:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000b14:	615c      	str	r4, [r3, #20]
  __HAL_RCC_AHB3_FORCE_RESET();
 8000b16:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000b18:	619c      	str	r4, [r3, #24]
  HAL_MspDeInit();
 8000b1a:	f7ff ffee 	bl	8000afa <HAL_MspDeInit>
}
 8000b1e:	4620      	mov	r0, r4
 8000b20:	bd10      	pop	{r4, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b510      	push	{r4, lr}
 8000b2a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_InitTick+0x40>)
 8000b2e:	7818      	ldrb	r0, [r3, #0]
 8000b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b34:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b38:	4a0c      	ldr	r2, [pc, #48]	; (8000b6c <HAL_InitTick+0x44>)
 8000b3a:	6810      	ldr	r0, [r2, #0]
 8000b3c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b40:	f000 f884 	bl	8000c4c <HAL_SYSTICK_Config>
 8000b44:	b968      	cbnz	r0, 8000b62 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b46:	2c0f      	cmp	r4, #15
 8000b48:	d901      	bls.n	8000b4e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	e00a      	b.n	8000b64 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4621      	mov	r1, r4
 8000b52:	f04f 30ff 	mov.w	r0, #4294967295
 8000b56:	f000 f845 	bl	8000be4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_InitTick+0x48>)
 8000b5c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000b5e:	2000      	movs	r0, #0
 8000b60:	e000      	b.n	8000b64 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000b62:	2001      	movs	r0, #1
}
 8000b64:	bd10      	pop	{r4, pc}
 8000b66:	bf00      	nop
 8000b68:	20000004 	.word	0x20000004
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20000008 	.word	0x20000008

08000b74 <HAL_Init>:
{
 8000b74:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <HAL_Init+0x30>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b7e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b86:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b8e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f815 	bl	8000bc0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	2000      	movs	r0, #0
 8000b98:	f7ff ffc6 	bl	8000b28 <HAL_InitTick>
  HAL_MspInit();
 8000b9c:	f7ff fec6 	bl	800092c <HAL_MspInit>
}
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	bd08      	pop	{r3, pc}
 8000ba4:	40023c00 	.word	0x40023c00

08000ba8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ba8:	4a03      	ldr	r2, [pc, #12]	; (8000bb8 <HAL_IncTick+0x10>)
 8000baa:	6811      	ldr	r1, [r2, #0]
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <HAL_IncTick+0x14>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	440b      	add	r3, r1
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000664 	.word	0x20000664
 8000bbc:	20000004 	.word	0x20000004

08000bc0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000bc2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bc8:	041b      	lsls	r3, r3, #16
 8000bca:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	0200      	lsls	r0, r0, #8
 8000bce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd2:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000bdc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_NVIC_SetPriority+0x60>)
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bee:	f1c3 0407 	rsb	r4, r3, #7
 8000bf2:	2c04      	cmp	r4, #4
 8000bf4:	bf28      	it	cs
 8000bf6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf8:	1d1d      	adds	r5, r3, #4
 8000bfa:	2d06      	cmp	r5, #6
 8000bfc:	d918      	bls.n	8000c30 <HAL_NVIC_SetPriority+0x4c>
 8000bfe:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 35ff 	mov.w	r5, #4294967295
 8000c04:	fa05 f404 	lsl.w	r4, r5, r4
 8000c08:	ea21 0104 	bic.w	r1, r1, r4
 8000c0c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0e:	fa05 f303 	lsl.w	r3, r5, r3
 8000c12:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c16:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	db0b      	blt.n	8000c34 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	0109      	lsls	r1, r1, #4
 8000c1e:	b2c9      	uxtb	r1, r1
 8000c20:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c24:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c28:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c2c:	bc30      	pop	{r4, r5}
 8000c2e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c30:	2300      	movs	r3, #0
 8000c32:	e7e5      	b.n	8000c00 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c34:	f000 000f 	and.w	r0, r0, #15
 8000c38:	0109      	lsls	r1, r1, #4
 8000c3a:	b2c9      	uxtb	r1, r1
 8000c3c:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <HAL_NVIC_SetPriority+0x64>)
 8000c3e:	5419      	strb	r1, [r3, r0]
 8000c40:	e7f4      	b.n	8000c2c <HAL_NVIC_SetPriority+0x48>
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00
 8000c48:	e000ed14 	.word	0xe000ed14

08000c4c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	3801      	subs	r0, #1
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c52:	d20a      	bcs.n	8000c6a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_SYSTICK_Config+0x24>)
 8000c56:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <HAL_SYSTICK_Config+0x28>)
 8000c5a:	21f0      	movs	r1, #240	; 0xf0
 8000c5c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c60:	2000      	movs	r0, #0
 8000c62:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c64:	2207      	movs	r2, #7
 8000c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c68:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c6a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e010 	.word	0xe000e010
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000c78:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000c7a:	490a      	ldr	r1, [pc, #40]	; (8000ca4 <FLASH_Program_DoubleWord+0x2c>)
 8000c7c:	690c      	ldr	r4, [r1, #16]
 8000c7e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8000c82:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000c84:	690c      	ldr	r4, [r1, #16]
 8000c86:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8000c8a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000c8c:	690c      	ldr	r4, [r1, #16]
 8000c8e:	f044 0401 	orr.w	r4, r4, #1
 8000c92:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000c94:	6002      	str	r2, [r0, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000c96:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000c9a:	6043      	str	r3, [r0, #4]
}
 8000c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40023c00 	.word	0x40023c00

08000ca8 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <FLASH_Program_Word+0x20>)
 8000caa:	691a      	ldr	r2, [r3, #16]
 8000cac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000cb0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000cb2:	691a      	ldr	r2, [r3, #16]
 8000cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cb8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000cba:	691a      	ldr	r2, [r3, #16]
 8000cbc:	f042 0201 	orr.w	r2, r2, #1
 8000cc0:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 8000cc2:	6001      	str	r1, [r0, #0]
}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40023c00 	.word	0x40023c00

08000ccc <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <FLASH_Program_HalfWord+0x20>)
 8000cce:	691a      	ldr	r2, [r3, #16]
 8000cd0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000cd4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000cd6:	691a      	ldr	r2, [r3, #16]
 8000cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cdc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000cde:	691a      	ldr	r2, [r3, #16]
 8000ce0:	f042 0201 	orr.w	r2, r2, #1
 8000ce4:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8000ce6:	8001      	strh	r1, [r0, #0]
}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40023c00 	.word	0x40023c00

08000cf0 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <FLASH_Program_Byte+0x1c>)
 8000cf2:	691a      	ldr	r2, [r3, #16]
 8000cf4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000cf8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000cfa:	691a      	ldr	r2, [r3, #16]
 8000cfc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000cfe:	691a      	ldr	r2, [r3, #16]
 8000d00:	f042 0201 	orr.w	r2, r2, #1
 8000d04:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 8000d06:	7001      	strb	r1, [r0, #0]
}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40023c00 	.word	0x40023c00

08000d10 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <FLASH_SetErrorCode+0x84>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	f013 0f10 	tst.w	r3, #16
 8000d18:	d007      	beq.n	8000d2a <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000d1a:	4a1f      	ldr	r2, [pc, #124]	; (8000d98 <FLASH_SetErrorCode+0x88>)
 8000d1c:	69d3      	ldr	r3, [r2, #28]
 8000d1e:	f043 0310 	orr.w	r3, r3, #16
 8000d22:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <FLASH_SetErrorCode+0x84>)
 8000d26:	2210      	movs	r2, #16
 8000d28:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <FLASH_SetErrorCode+0x84>)
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	f013 0f20 	tst.w	r3, #32
 8000d32:	d007      	beq.n	8000d44 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000d34:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <FLASH_SetErrorCode+0x88>)
 8000d36:	69d3      	ldr	r3, [r2, #28]
 8000d38:	f043 0308 	orr.w	r3, r3, #8
 8000d3c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <FLASH_SetErrorCode+0x84>)
 8000d40:	2220      	movs	r2, #32
 8000d42:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <FLASH_SetErrorCode+0x84>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000d4c:	d007      	beq.n	8000d5e <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <FLASH_SetErrorCode+0x88>)
 8000d50:	69d3      	ldr	r3, [r2, #28]
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <FLASH_SetErrorCode+0x84>)
 8000d5a:	2240      	movs	r2, #64	; 0x40
 8000d5c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <FLASH_SetErrorCode+0x84>)
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000d66:	d007      	beq.n	8000d78 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000d68:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <FLASH_SetErrorCode+0x88>)
 8000d6a:	69d3      	ldr	r3, [r2, #28]
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <FLASH_SetErrorCode+0x84>)
 8000d74:	2280      	movs	r2, #128	; 0x80
 8000d76:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <FLASH_SetErrorCode+0x84>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	f013 0f02 	tst.w	r3, #2
 8000d80:	d007      	beq.n	8000d92 <FLASH_SetErrorCode+0x82>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <FLASH_SetErrorCode+0x88>)
 8000d84:	69d3      	ldr	r3, [r2, #28]
 8000d86:	f043 0320 	orr.w	r3, r3, #32
 8000d8a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000d8c:	4b01      	ldr	r3, [pc, #4]	; (8000d94 <FLASH_SetErrorCode+0x84>)
 8000d8e:	2202      	movs	r2, #2
 8000d90:	60da      	str	r2, [r3, #12]
  }
}
 8000d92:	4770      	bx	lr
 8000d94:	40023c00 	.word	0x40023c00
 8000d98:	20000668 	.word	0x20000668

08000d9c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_FLASH_Unlock+0x28>)
 8000d9e:	691b      	ldr	r3, [r3, #16]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db01      	blt.n	8000da8 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8000da4:	2000      	movs	r0, #0
 8000da6:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_FLASH_Unlock+0x28>)
 8000daa:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_FLASH_Unlock+0x2c>)
 8000dac:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000dae:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8000db2:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db01      	blt.n	8000dbe <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8000dba:	2000      	movs	r0, #0
 8000dbc:	4770      	bx	lr
      status = HAL_ERROR;
 8000dbe:	2001      	movs	r0, #1
}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40023c00 	.word	0x40023c00
 8000dc8:	45670123 	.word	0x45670123

08000dcc <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8000dcc:	4a03      	ldr	r2, [pc, #12]	; (8000ddc <HAL_FLASH_Lock+0x10>)
 8000dce:	6913      	ldr	r3, [r2, #16]
 8000dd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dd4:	6113      	str	r3, [r2, #16]
}
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40023c00 	.word	0x40023c00

08000de0 <FLASH_WaitForLastOperation>:
{ 
 8000de0:	b538      	push	{r3, r4, r5, lr}
 8000de2:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <FLASH_WaitForLastOperation+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8000dea:	f000 ffd3 	bl	8001d94 <HAL_GetTick>
 8000dee:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <FLASH_WaitForLastOperation+0x5c>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000df8:	d00a      	beq.n	8000e10 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 8000dfa:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000dfe:	d0f7      	beq.n	8000df0 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000e00:	b124      	cbz	r4, 8000e0c <FLASH_WaitForLastOperation+0x2c>
 8000e02:	f000 ffc7 	bl	8001d94 <HAL_GetTick>
 8000e06:	1b40      	subs	r0, r0, r5
 8000e08:	42a0      	cmp	r0, r4
 8000e0a:	d9f1      	bls.n	8000df0 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	e00d      	b.n	8000e2c <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <FLASH_WaitForLastOperation+0x5c>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	f013 0f01 	tst.w	r3, #1
 8000e18:	d002      	beq.n	8000e20 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <FLASH_WaitForLastOperation+0x5c>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <FLASH_WaitForLastOperation+0x5c>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	f013 0ff2 	tst.w	r3, #242	; 0xf2
 8000e28:	d101      	bne.n	8000e2e <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 8000e2a:	2000      	movs	r0, #0
}  
 8000e2c:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 8000e2e:	f7ff ff6f 	bl	8000d10 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e32:	2001      	movs	r0, #1
 8000e34:	e7fa      	b.n	8000e2c <FLASH_WaitForLastOperation+0x4c>
 8000e36:	bf00      	nop
 8000e38:	20000668 	.word	0x20000668
 8000e3c:	40023c00 	.word	0x40023c00

08000e40 <HAL_FLASH_Program>:
{
 8000e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e42:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 8000e44:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <HAL_FLASH_Program+0x74>)
 8000e46:	7e12      	ldrb	r2, [r2, #24]
 8000e48:	2a01      	cmp	r2, #1
 8000e4a:	d030      	beq.n	8000eae <HAL_FLASH_Program+0x6e>
 8000e4c:	4604      	mov	r4, r0
 8000e4e:	460d      	mov	r5, r1
 8000e50:	461f      	mov	r7, r3
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_FLASH_Program+0x74>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e5c:	f7ff ffc0 	bl	8000de0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000e60:	b990      	cbnz	r0, 8000e88 <HAL_FLASH_Program+0x48>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000e62:	b1ac      	cbz	r4, 8000e90 <HAL_FLASH_Program+0x50>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000e64:	2c01      	cmp	r4, #1
 8000e66:	d018      	beq.n	8000e9a <HAL_FLASH_Program+0x5a>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000e68:	2c02      	cmp	r4, #2
 8000e6a:	d01b      	beq.n	8000ea4 <HAL_FLASH_Program+0x64>
      FLASH_Program_DoubleWord(Address, Data);
 8000e6c:	4632      	mov	r2, r6
 8000e6e:	463b      	mov	r3, r7
 8000e70:	4628      	mov	r0, r5
 8000e72:	f7ff ff01 	bl	8000c78 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e76:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e7a:	f7ff ffb1 	bl	8000de0 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8000e7e:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <HAL_FLASH_Program+0x78>)
 8000e80:	6913      	ldr	r3, [r2, #16]
 8000e82:	f023 0301 	bic.w	r3, r3, #1
 8000e86:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8000e88:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_FLASH_Program+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	761a      	strb	r2, [r3, #24]
}
 8000e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000e90:	b2f1      	uxtb	r1, r6
 8000e92:	4628      	mov	r0, r5
 8000e94:	f7ff ff2c 	bl	8000cf0 <FLASH_Program_Byte>
 8000e98:	e7ed      	b.n	8000e76 <HAL_FLASH_Program+0x36>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000e9a:	b2b1      	uxth	r1, r6
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	f7ff ff15 	bl	8000ccc <FLASH_Program_HalfWord>
 8000ea2:	e7e8      	b.n	8000e76 <HAL_FLASH_Program+0x36>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	4628      	mov	r0, r5
 8000ea8:	f7ff fefe 	bl	8000ca8 <FLASH_Program_Word>
 8000eac:	e7e3      	b.n	8000e76 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 8000eae:	2002      	movs	r0, #2
 8000eb0:	e7ed      	b.n	8000e8e <HAL_FLASH_Program+0x4e>
 8000eb2:	bf00      	nop
 8000eb4:	20000668 	.word	0x20000668
 8000eb8:	40023c00 	.word	0x40023c00

08000ebc <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <FLASH_MassErase+0x20>)
 8000ebe:	6919      	ldr	r1, [r3, #16]
 8000ec0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8000ec4:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8000ec6:	6919      	ldr	r1, [r3, #16]
 8000ec8:	f041 0104 	orr.w	r1, r1, #4
 8000ecc:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000ed4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ed8:	611a      	str	r2, [r3, #16]
}
 8000eda:	4770      	bx	lr
 8000edc:	40023c00 	.word	0x40023c00

08000ee0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8000ee0:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000ee2:	b149      	cbz	r1, 8000ef8 <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000ee4:	2901      	cmp	r1, #1
 8000ee6:	d021      	beq.n	8000f2c <FLASH_Erase_Sector+0x4c>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8000ee8:	2902      	cmp	r1, #2
 8000eea:	d002      	beq.n	8000ef2 <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000eec:	f44f 7440 	mov.w	r4, #768	; 0x300
 8000ef0:	e003      	b.n	8000efa <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_WORD;
 8000ef2:	f44f 7400 	mov.w	r4, #512	; 0x200
 8000ef6:	e000      	b.n	8000efa <FLASH_Erase_Sector+0x1a>
     tmp_psize = FLASH_PSIZE_BYTE;
 8000ef8:	2400      	movs	r4, #0
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <FLASH_Erase_Sector+0x54>)
 8000efc:	6919      	ldr	r1, [r3, #16]
 8000efe:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8000f02:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 8000f04:	691a      	ldr	r2, [r3, #16]
 8000f06:	4322      	orrs	r2, r4
 8000f08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000f0a:	691a      	ldr	r2, [r3, #16]
 8000f0c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000f10:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8000f12:	691a      	ldr	r2, [r3, #16]
 8000f14:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8000f18:	f040 0002 	orr.w	r0, r0, #2
 8000f1c:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000f1e:	691a      	ldr	r2, [r3, #16]
 8000f20:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f24:	611a      	str	r2, [r3, #16]
}
 8000f26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f2a:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000f2c:	f44f 7480 	mov.w	r4, #256	; 0x100
 8000f30:	e7e3      	b.n	8000efa <FLASH_Erase_Sector+0x1a>
 8000f32:	bf00      	nop
 8000f34:	40023c00 	.word	0x40023c00

08000f38 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8000f38:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <FLASH_FlushCaches+0x5c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8000f40:	d010      	beq.n	8000f64 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <FLASH_FlushCaches+0x5c>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f4a:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f5a:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f62:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <FLASH_FlushCaches+0x5c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000f6c:	d010      	beq.n	8000f90 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <FLASH_FlushCaches+0x5c>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f76:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f86:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f8e:	601a      	str	r2, [r3, #0]
  }
}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40023c00 	.word	0x40023c00

08000f98 <HAL_FLASHEx_Erase>:
{
 8000f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8000f9a:	4b22      	ldr	r3, [pc, #136]	; (8001024 <HAL_FLASHEx_Erase+0x8c>)
 8000f9c:	7e1b      	ldrb	r3, [r3, #24]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d03e      	beq.n	8001020 <HAL_FLASHEx_Erase+0x88>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	460e      	mov	r6, r1
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <HAL_FLASHEx_Erase+0x8c>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fb0:	f7ff ff16 	bl	8000de0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000fb4:	4607      	mov	r7, r0
 8000fb6:	bb70      	cbnz	r0, 8001016 <HAL_FLASHEx_Erase+0x7e>
    *SectorError = 0xFFFFFFFFU;
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbc:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d016      	beq.n	8000ff2 <HAL_FLASHEx_Erase+0x5a>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000fc4:	68a5      	ldr	r5, [r4, #8]
 8000fc6:	68e3      	ldr	r3, [r4, #12]
 8000fc8:	68a2      	ldr	r2, [r4, #8]
 8000fca:	4413      	add	r3, r2
 8000fcc:	42ab      	cmp	r3, r5
 8000fce:	d920      	bls.n	8001012 <HAL_FLASHEx_Erase+0x7a>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000fd0:	7c21      	ldrb	r1, [r4, #16]
 8000fd2:	4628      	mov	r0, r5
 8000fd4:	f7ff ff84 	bl	8000ee0 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fdc:	f7ff ff00 	bl	8000de0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000fe0:	4a11      	ldr	r2, [pc, #68]	; (8001028 <HAL_FLASHEx_Erase+0x90>)
 8000fe2:	6913      	ldr	r3, [r2, #16]
 8000fe4:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8000fe8:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 8000fea:	4607      	mov	r7, r0
 8000fec:	b980      	cbnz	r0, 8001010 <HAL_FLASHEx_Erase+0x78>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000fee:	3501      	adds	r5, #1
 8000ff0:	e7e9      	b.n	8000fc6 <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8000ff2:	6861      	ldr	r1, [r4, #4]
 8000ff4:	7c20      	ldrb	r0, [r4, #16]
 8000ff6:	f7ff ff61 	bl	8000ebc <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ffa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ffe:	f7ff feef 	bl	8000de0 <FLASH_WaitForLastOperation>
 8001002:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8001004:	4a08      	ldr	r2, [pc, #32]	; (8001028 <HAL_FLASHEx_Erase+0x90>)
 8001006:	6913      	ldr	r3, [r2, #16]
 8001008:	f023 0304 	bic.w	r3, r3, #4
 800100c:	6113      	str	r3, [r2, #16]
 800100e:	e000      	b.n	8001012 <HAL_FLASHEx_Erase+0x7a>
          *SectorError = index;
 8001010:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();    
 8001012:	f7ff ff91 	bl	8000f38 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8001016:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_FLASHEx_Erase+0x8c>)
 8001018:	2200      	movs	r2, #0
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	4638      	mov	r0, r7
 800101e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8001020:	2702      	movs	r7, #2
 8001022:	e7fb      	b.n	800101c <HAL_FLASHEx_Erase+0x84>
 8001024:	20000668 	.word	0x20000668
 8001028:	40023c00 	.word	0x40023c00

0800102c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102c:	2300      	movs	r3, #0
 800102e:	2b0f      	cmp	r3, #15
 8001030:	f200 80dd 	bhi.w	80011ee <HAL_GPIO_Init+0x1c2>
{
 8001034:	b4f0      	push	{r4, r5, r6, r7}
 8001036:	b082      	sub	sp, #8
 8001038:	e05d      	b.n	80010f6 <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800103a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800103c:	005f      	lsls	r7, r3, #1
 800103e:	2403      	movs	r4, #3
 8001040:	40bc      	lsls	r4, r7
 8001042:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001046:	68cc      	ldr	r4, [r1, #12]
 8001048:	40bc      	lsls	r4, r7
 800104a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800104c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001050:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001054:	684c      	ldr	r4, [r1, #4]
 8001056:	f3c4 1200 	ubfx	r2, r4, #4, #1
 800105a:	409a      	lsls	r2, r3
 800105c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800105e:	6042      	str	r2, [r0, #4]
 8001060:	e057      	b.n	8001112 <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001062:	08dc      	lsrs	r4, r3, #3
 8001064:	3408      	adds	r4, #8
 8001066:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106a:	f003 0207 	and.w	r2, r3, #7
 800106e:	0096      	lsls	r6, r2, #2
 8001070:	220f      	movs	r2, #15
 8001072:	40b2      	lsls	r2, r6
 8001074:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001078:	690a      	ldr	r2, [r1, #16]
 800107a:	40b2      	lsls	r2, r6
 800107c:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 800107e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001082:	e05a      	b.n	800113a <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001084:	2207      	movs	r2, #7
 8001086:	e000      	b.n	800108a <HAL_GPIO_Init+0x5e>
 8001088:	2200      	movs	r2, #0
 800108a:	40b2      	lsls	r2, r6
 800108c:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800108e:	3402      	adds	r4, #2
 8001090:	4e57      	ldr	r6, [pc, #348]	; (80011f0 <HAL_GPIO_Init+0x1c4>)
 8001092:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001096:	4a57      	ldr	r2, [pc, #348]	; (80011f4 <HAL_GPIO_Init+0x1c8>)
 8001098:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800109a:	43ea      	mvns	r2, r5
 800109c:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010a0:	684f      	ldr	r7, [r1, #4]
 80010a2:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80010a6:	d001      	beq.n	80010ac <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 80010a8:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80010ac:	4c51      	ldr	r4, [pc, #324]	; (80011f4 <HAL_GPIO_Init+0x1c8>)
 80010ae:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80010b0:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b6:	684f      	ldr	r7, [r1, #4]
 80010b8:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80010bc:	d001      	beq.n	80010c2 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 80010be:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80010c2:	4c4c      	ldr	r4, [pc, #304]	; (80011f4 <HAL_GPIO_Init+0x1c8>)
 80010c4:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c6:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010cc:	684f      	ldr	r7, [r1, #4]
 80010ce:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80010d2:	d001      	beq.n	80010d8 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 80010d4:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80010d8:	4c46      	ldr	r4, [pc, #280]	; (80011f4 <HAL_GPIO_Init+0x1c8>)
 80010da:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80010dc:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80010de:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e0:	684e      	ldr	r6, [r1, #4]
 80010e2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80010e6:	d001      	beq.n	80010ec <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 80010e8:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80010ec:	4c41      	ldr	r4, [pc, #260]	; (80011f4 <HAL_GPIO_Init+0x1c8>)
 80010ee:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f0:	3301      	adds	r3, #1
 80010f2:	2b0f      	cmp	r3, #15
 80010f4:	d878      	bhi.n	80011e8 <HAL_GPIO_Init+0x1bc>
    ioposition = 0x01U << position;
 80010f6:	2201      	movs	r2, #1
 80010f8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010fa:	680c      	ldr	r4, [r1, #0]
 80010fc:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001100:	ea32 0404 	bics.w	r4, r2, r4
 8001104:	d1f4      	bne.n	80010f0 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001106:	684c      	ldr	r4, [r1, #4]
 8001108:	f004 0403 	and.w	r4, r4, #3
 800110c:	3c01      	subs	r4, #1
 800110e:	2c01      	cmp	r4, #1
 8001110:	d993      	bls.n	800103a <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001112:	684a      	ldr	r2, [r1, #4]
 8001114:	f002 0203 	and.w	r2, r2, #3
 8001118:	2a03      	cmp	r2, #3
 800111a:	d009      	beq.n	8001130 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 800111c:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800111e:	005e      	lsls	r6, r3, #1
 8001120:	2203      	movs	r2, #3
 8001122:	40b2      	lsls	r2, r6
 8001124:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001128:	688a      	ldr	r2, [r1, #8]
 800112a:	40b2      	lsls	r2, r6
 800112c:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800112e:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001130:	684a      	ldr	r2, [r1, #4]
 8001132:	f002 0203 	and.w	r2, r2, #3
 8001136:	2a02      	cmp	r2, #2
 8001138:	d093      	beq.n	8001062 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 800113a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800113c:	005e      	lsls	r6, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	40b2      	lsls	r2, r6
 8001142:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001146:	684a      	ldr	r2, [r1, #4]
 8001148:	f002 0203 	and.w	r2, r2, #3
 800114c:	40b2      	lsls	r2, r6
 800114e:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001150:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001152:	684a      	ldr	r2, [r1, #4]
 8001154:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001158:	d0ca      	beq.n	80010f0 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	2200      	movs	r2, #0
 800115c:	9201      	str	r2, [sp, #4]
 800115e:	4a26      	ldr	r2, [pc, #152]	; (80011f8 <HAL_GPIO_Init+0x1cc>)
 8001160:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001162:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001166:	6454      	str	r4, [r2, #68]	; 0x44
 8001168:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800116a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800116e:	9201      	str	r2, [sp, #4]
 8001170:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001172:	089c      	lsrs	r4, r3, #2
 8001174:	1ca6      	adds	r6, r4, #2
 8001176:	4a1e      	ldr	r2, [pc, #120]	; (80011f0 <HAL_GPIO_Init+0x1c4>)
 8001178:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800117c:	f003 0203 	and.w	r2, r3, #3
 8001180:	0096      	lsls	r6, r2, #2
 8001182:	220f      	movs	r2, #15
 8001184:	40b2      	lsls	r2, r6
 8001186:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800118a:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <HAL_GPIO_Init+0x1d0>)
 800118c:	4290      	cmp	r0, r2
 800118e:	f43f af7b 	beq.w	8001088 <HAL_GPIO_Init+0x5c>
 8001192:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001196:	4290      	cmp	r0, r2
 8001198:	d01a      	beq.n	80011d0 <HAL_GPIO_Init+0x1a4>
 800119a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800119e:	4290      	cmp	r0, r2
 80011a0:	d018      	beq.n	80011d4 <HAL_GPIO_Init+0x1a8>
 80011a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011a6:	4290      	cmp	r0, r2
 80011a8:	d016      	beq.n	80011d8 <HAL_GPIO_Init+0x1ac>
 80011aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011ae:	4290      	cmp	r0, r2
 80011b0:	d014      	beq.n	80011dc <HAL_GPIO_Init+0x1b0>
 80011b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011b6:	4290      	cmp	r0, r2
 80011b8:	d012      	beq.n	80011e0 <HAL_GPIO_Init+0x1b4>
 80011ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011be:	4290      	cmp	r0, r2
 80011c0:	d010      	beq.n	80011e4 <HAL_GPIO_Init+0x1b8>
 80011c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011c6:	4290      	cmp	r0, r2
 80011c8:	f43f af5c 	beq.w	8001084 <HAL_GPIO_Init+0x58>
 80011cc:	2208      	movs	r2, #8
 80011ce:	e75c      	b.n	800108a <HAL_GPIO_Init+0x5e>
 80011d0:	2201      	movs	r2, #1
 80011d2:	e75a      	b.n	800108a <HAL_GPIO_Init+0x5e>
 80011d4:	2202      	movs	r2, #2
 80011d6:	e758      	b.n	800108a <HAL_GPIO_Init+0x5e>
 80011d8:	2203      	movs	r2, #3
 80011da:	e756      	b.n	800108a <HAL_GPIO_Init+0x5e>
 80011dc:	2204      	movs	r2, #4
 80011de:	e754      	b.n	800108a <HAL_GPIO_Init+0x5e>
 80011e0:	2205      	movs	r2, #5
 80011e2:	e752      	b.n	800108a <HAL_GPIO_Init+0x5e>
 80011e4:	2206      	movs	r2, #6
 80011e6:	e750      	b.n	800108a <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 80011e8:	b002      	add	sp, #8
 80011ea:	bcf0      	pop	{r4, r5, r6, r7}
 80011ec:	4770      	bx	lr
 80011ee:	4770      	bx	lr
 80011f0:	40013800 	.word	0x40013800
 80011f4:	40013c00 	.word	0x40013c00
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020000 	.word	0x40020000

08001200 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001200:	b10a      	cbz	r2, 8001206 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001202:	6181      	str	r1, [r0, #24]
 8001204:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001206:	0409      	lsls	r1, r1, #16
 8001208:	6181      	str	r1, [r0, #24]
  }
}
 800120a:	4770      	bx	lr

0800120c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800120c:	4b01      	ldr	r3, [pc, #4]	; (8001214 <HAL_RCC_GetHCLKFreq+0x8>)
 800120e:	6818      	ldr	r0, [r3, #0]
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000000 	.word	0x20000000

08001218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001218:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800121a:	f7ff fff7 	bl	800120c <HAL_RCC_GetHCLKFreq>
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001226:	4a03      	ldr	r2, [pc, #12]	; (8001234 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001228:	5cd3      	ldrb	r3, [r2, r3]
}
 800122a:	40d8      	lsrs	r0, r3
 800122c:	bd08      	pop	{r3, pc}
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800
 8001234:	08003600 	.word	0x08003600

08001238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001238:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800123a:	f7ff ffe7 	bl	800120c <HAL_RCC_GetHCLKFreq>
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001246:	4a03      	ldr	r2, [pc, #12]	; (8001254 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001248:	5cd3      	ldrb	r3, [r2, r3]
}
 800124a:	40d8      	lsrs	r0, r3
 800124c:	bd08      	pop	{r3, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	08003600 	.word	0x08003600

08001258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800125c:	6802      	ldr	r2, [r0, #0]
 800125e:	6913      	ldr	r3, [r2, #16]
 8001260:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001264:	68c1      	ldr	r1, [r0, #12]
 8001266:	430b      	orrs	r3, r1
 8001268:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800126a:	6883      	ldr	r3, [r0, #8]
 800126c:	6902      	ldr	r2, [r0, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	6942      	ldr	r2, [r0, #20]
 8001272:	4313      	orrs	r3, r2
 8001274:	69c2      	ldr	r2, [r0, #28]
 8001276:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001278:	6801      	ldr	r1, [r0, #0]
 800127a:	68cb      	ldr	r3, [r1, #12]
 800127c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001280:	f023 030c 	bic.w	r3, r3, #12
 8001284:	4313      	orrs	r3, r2
 8001286:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001288:	6802      	ldr	r2, [r0, #0]
 800128a:	6953      	ldr	r3, [r2, #20]
 800128c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001290:	6981      	ldr	r1, [r0, #24]
 8001292:	430b      	orrs	r3, r1
 8001294:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001296:	6803      	ldr	r3, [r0, #0]
 8001298:	4a34      	ldr	r2, [pc, #208]	; (800136c <UART_SetConfig+0x114>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d006      	beq.n	80012ac <UART_SetConfig+0x54>
 800129e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d002      	beq.n	80012ac <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80012a6:	f7ff ffb7 	bl	8001218 <HAL_RCC_GetPCLK1Freq>
 80012aa:	e001      	b.n	80012b0 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80012ac:	f7ff ffc4 	bl	8001238 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012b0:	69e3      	ldr	r3, [r4, #28]
 80012b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012b6:	d02a      	beq.n	800130e <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80012b8:	2600      	movs	r6, #0
 80012ba:	1805      	adds	r5, r0, r0
 80012bc:	eb46 0106 	adc.w	r1, r6, r6
 80012c0:	182d      	adds	r5, r5, r0
 80012c2:	eb46 0101 	adc.w	r1, r6, r1
 80012c6:	00cb      	lsls	r3, r1, #3
 80012c8:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80012cc:	00ea      	lsls	r2, r5, #3
 80012ce:	4615      	mov	r5, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	6863      	ldr	r3, [r4, #4]
 80012d4:	009a      	lsls	r2, r3, #2
 80012d6:	0f9b      	lsrs	r3, r3, #30
 80012d8:	1828      	adds	r0, r5, r0
 80012da:	eb46 0101 	adc.w	r1, r6, r1
 80012de:	f7fe ffcf 	bl	8000280 <__aeabi_uldivmod>
 80012e2:	4d23      	ldr	r5, [pc, #140]	; (8001370 <UART_SetConfig+0x118>)
 80012e4:	fba5 3200 	umull	r3, r2, r5, r0
 80012e8:	0951      	lsrs	r1, r2, #5
 80012ea:	2364      	movs	r3, #100	; 0x64
 80012ec:	fb03 0311 	mls	r3, r3, r1, r0
 80012f0:	011b      	lsls	r3, r3, #4
 80012f2:	3332      	adds	r3, #50	; 0x32
 80012f4:	fba5 2303 	umull	r2, r3, r5, r3
 80012f8:	095b      	lsrs	r3, r3, #5
 80012fa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012fe:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	6821      	ldr	r1, [r4, #0]
 8001308:	4413      	add	r3, r2
 800130a:	608b      	str	r3, [r1, #8]
  }
}
 800130c:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800130e:	2600      	movs	r6, #0
 8001310:	1805      	adds	r5, r0, r0
 8001312:	eb46 0106 	adc.w	r1, r6, r6
 8001316:	182d      	adds	r5, r5, r0
 8001318:	eb46 0101 	adc.w	r1, r6, r1
 800131c:	00cb      	lsls	r3, r1, #3
 800131e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001322:	00ea      	lsls	r2, r5, #3
 8001324:	4615      	mov	r5, r2
 8001326:	4619      	mov	r1, r3
 8001328:	6862      	ldr	r2, [r4, #4]
 800132a:	4633      	mov	r3, r6
 800132c:	1892      	adds	r2, r2, r2
 800132e:	eb46 0303 	adc.w	r3, r6, r3
 8001332:	1828      	adds	r0, r5, r0
 8001334:	eb46 0101 	adc.w	r1, r6, r1
 8001338:	f7fe ffa2 	bl	8000280 <__aeabi_uldivmod>
 800133c:	4d0c      	ldr	r5, [pc, #48]	; (8001370 <UART_SetConfig+0x118>)
 800133e:	fba5 3200 	umull	r3, r2, r5, r0
 8001342:	0951      	lsrs	r1, r2, #5
 8001344:	2364      	movs	r3, #100	; 0x64
 8001346:	fb03 0311 	mls	r3, r3, r1, r0
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	3332      	adds	r3, #50	; 0x32
 800134e:	fba5 2303 	umull	r2, r3, r5, r3
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	005a      	lsls	r2, r3, #1
 8001356:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800135a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	6821      	ldr	r1, [r4, #0]
 8001364:	4413      	add	r3, r2
 8001366:	608b      	str	r3, [r1, #8]
 8001368:	e7d0      	b.n	800130c <UART_SetConfig+0xb4>
 800136a:	bf00      	nop
 800136c:	40011000 	.word	0x40011000
 8001370:	51eb851f 	.word	0x51eb851f

08001374 <HAL_UART_Init>:
  if (huart == NULL)
 8001374:	b358      	cbz	r0, 80013ce <HAL_UART_Init+0x5a>
{
 8001376:	b510      	push	{r4, lr}
 8001378:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800137a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800137e:	b30b      	cbz	r3, 80013c4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001380:	2324      	movs	r3, #36	; 0x24
 8001382:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001386:	6822      	ldr	r2, [r4, #0]
 8001388:	68d3      	ldr	r3, [r2, #12]
 800138a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800138e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001390:	4620      	mov	r0, r4
 8001392:	f7ff ff61 	bl	8001258 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001396:	6822      	ldr	r2, [r4, #0]
 8001398:	6913      	ldr	r3, [r2, #16]
 800139a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800139e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013a0:	6822      	ldr	r2, [r4, #0]
 80013a2:	6953      	ldr	r3, [r2, #20]
 80013a4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80013a8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80013aa:	6822      	ldr	r2, [r4, #0]
 80013ac:	68d3      	ldr	r3, [r2, #12]
 80013ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013b2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013b4:	2000      	movs	r0, #0
 80013b6:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80013b8:	2320      	movs	r3, #32
 80013ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80013be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80013c2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80013c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80013c8:	f7ff facc 	bl	8000964 <HAL_UART_MspInit>
 80013cc:	e7d8      	b.n	8001380 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80013ce:	2001      	movs	r0, #1
}
 80013d0:	4770      	bx	lr

080013d2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80013d2:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80013d4:	680c      	ldr	r4, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d6:	fa94 f4a4 	rbit	r4, r4
 80013da:	fab4 f484 	clz	r4, r4
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80013de:	e04a      	b.n	8001476 <LL_GPIO_Init+0xa4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80013e0:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80013e2:	6882      	ldr	r2, [r0, #8]
 80013e4:	fa93 f5a3 	rbit	r5, r3
 80013e8:	fab5 f585 	clz	r5, r5
 80013ec:	006d      	lsls	r5, r5, #1
 80013ee:	2703      	movs	r7, #3
 80013f0:	fa07 f505 	lsl.w	r5, r7, r5
 80013f4:	ea22 0205 	bic.w	r2, r2, r5
 80013f8:	fa93 f5a3 	rbit	r5, r3
 80013fc:	fab5 f585 	clz	r5, r5
 8001400:	006d      	lsls	r5, r5, #1
 8001402:	fa06 f505 	lsl.w	r5, r6, r5
 8001406:	432a      	orrs	r2, r5
 8001408:	6082      	str	r2, [r0, #8]
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800140a:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800140c:	6842      	ldr	r2, [r0, #4]
 800140e:	ea22 0203 	bic.w	r2, r2, r3
 8001412:	fb03 f505 	mul.w	r5, r3, r5
 8001416:	432a      	orrs	r2, r5
 8001418:	6042      	str	r2, [r0, #4]
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800141a:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800141c:	68c2      	ldr	r2, [r0, #12]
 800141e:	fa93 f5a3 	rbit	r5, r3
 8001422:	fab5 f585 	clz	r5, r5
 8001426:	006d      	lsls	r5, r5, #1
 8001428:	2703      	movs	r7, #3
 800142a:	fa07 f505 	lsl.w	r5, r7, r5
 800142e:	ea22 0205 	bic.w	r2, r2, r5
 8001432:	fa93 f5a3 	rbit	r5, r3
 8001436:	fab5 f585 	clz	r5, r5
 800143a:	006d      	lsls	r5, r5, #1
 800143c:	fa06 f505 	lsl.w	r5, r6, r5
 8001440:	432a      	orrs	r2, r5
 8001442:	60c2      	str	r2, [r0, #12]
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001444:	684a      	ldr	r2, [r1, #4]
 8001446:	2a02      	cmp	r2, #2
 8001448:	d022      	beq.n	8001490 <LL_GPIO_Init+0xbe>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800144a:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800144c:	6805      	ldr	r5, [r0, #0]
 800144e:	fa93 f6a3 	rbit	r6, r3
 8001452:	fab6 f686 	clz	r6, r6
 8001456:	0076      	lsls	r6, r6, #1
 8001458:	2703      	movs	r7, #3
 800145a:	fa07 f606 	lsl.w	r6, r7, r6
 800145e:	ea25 0506 	bic.w	r5, r5, r6
 8001462:	fa93 f3a3 	rbit	r3, r3
 8001466:	fab3 f383 	clz	r3, r3
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	432b      	orrs	r3, r5
 8001472:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8001474:	3401      	adds	r4, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001476:	680b      	ldr	r3, [r1, #0]
 8001478:	fa33 f204 	lsrs.w	r2, r3, r4
 800147c:	d03c      	beq.n	80014f8 <LL_GPIO_Init+0x126>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800147e:	2201      	movs	r2, #1
 8001480:	40a2      	lsls	r2, r4
    if (currentpin)
 8001482:	4013      	ands	r3, r2
 8001484:	d0f6      	beq.n	8001474 <LL_GPIO_Init+0xa2>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001486:	684a      	ldr	r2, [r1, #4]
 8001488:	3a01      	subs	r2, #1
 800148a:	2a01      	cmp	r2, #1
 800148c:	d8c5      	bhi.n	800141a <LL_GPIO_Init+0x48>
 800148e:	e7a7      	b.n	80013e0 <LL_GPIO_Init+0xe>
 8001490:	fa93 f2a3 	rbit	r2, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001494:	fab2 f282 	clz	r2, r2
 8001498:	2a07      	cmp	r2, #7
 800149a:	d815      	bhi.n	80014c8 <LL_GPIO_Init+0xf6>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800149c:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800149e:	6a02      	ldr	r2, [r0, #32]
 80014a0:	fa93 f5a3 	rbit	r5, r3
 80014a4:	fab5 f585 	clz	r5, r5
 80014a8:	00ad      	lsls	r5, r5, #2
 80014aa:	270f      	movs	r7, #15
 80014ac:	fa07 f505 	lsl.w	r5, r7, r5
 80014b0:	ea22 0205 	bic.w	r2, r2, r5
 80014b4:	fa93 f5a3 	rbit	r5, r3
 80014b8:	fab5 f585 	clz	r5, r5
 80014bc:	00ad      	lsls	r5, r5, #2
 80014be:	fa06 f505 	lsl.w	r5, r6, r5
 80014c2:	432a      	orrs	r2, r5
 80014c4:	6202      	str	r2, [r0, #32]
}
 80014c6:	e7c0      	b.n	800144a <LL_GPIO_Init+0x78>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80014c8:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80014ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80014cc:	0a1a      	lsrs	r2, r3, #8
 80014ce:	fa92 f7a2 	rbit	r7, r2
 80014d2:	fab7 f787 	clz	r7, r7
 80014d6:	00bf      	lsls	r7, r7, #2
 80014d8:	f04f 0c0f 	mov.w	ip, #15
 80014dc:	fa0c f707 	lsl.w	r7, ip, r7
 80014e0:	ea26 0607 	bic.w	r6, r6, r7
 80014e4:	fa92 f2a2 	rbit	r2, r2
 80014e8:	fab2 f282 	clz	r2, r2
 80014ec:	0092      	lsls	r2, r2, #2
 80014ee:	fa05 f202 	lsl.w	r2, r5, r2
 80014f2:	4332      	orrs	r2, r6
 80014f4:	6242      	str	r2, [r0, #36]	; 0x24
}
 80014f6:	e7a8      	b.n	800144a <LL_GPIO_Init+0x78>
  }

  return (SUCCESS);
}
 80014f8:	2000      	movs	r0, #0
 80014fa:	bcf0      	pop	{r4, r5, r6, r7}
 80014fc:	4770      	bx	lr
	...

08001500 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <RCC_GetHCLKClockFreq+0x10>)
 8001502:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001504:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001508:	4a02      	ldr	r2, [pc, #8]	; (8001514 <RCC_GetHCLKClockFreq+0x14>)
 800150a:	5cd3      	ldrb	r3, [r2, r3]
}
 800150c:	40d8      	lsrs	r0, r3
 800150e:	4770      	bx	lr
 8001510:	40023800 	.word	0x40023800
 8001514:	080035f0 	.word	0x080035f0

08001518 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <RCC_GetPCLK1ClockFreq+0x10>)
 800151a:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800151c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001520:	4a02      	ldr	r2, [pc, #8]	; (800152c <RCC_GetPCLK1ClockFreq+0x14>)
 8001522:	5cd3      	ldrb	r3, [r2, r3]
}
 8001524:	40d8      	lsrs	r0, r3
 8001526:	4770      	bx	lr
 8001528:	40023800 	.word	0x40023800
 800152c:	08003600 	.word	0x08003600

08001530 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <RCC_GetPCLK2ClockFreq+0x10>)
 8001532:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001534:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001538:	4a02      	ldr	r2, [pc, #8]	; (8001544 <RCC_GetPCLK2ClockFreq+0x14>)
 800153a:	5cd3      	ldrb	r3, [r2, r3]
}
 800153c:	40d8      	lsrs	r0, r3
 800153e:	4770      	bx	lr
 8001540:	40023800 	.word	0x40023800
 8001544:	08003600 	.word	0x08003600

08001548 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8001550:	b923      	cbnz	r3, 800155c <RCC_PLL_GetFreqDomain_SYS+0x14>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <RCC_PLL_GetFreqDomain_SYS+0x44>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001554:	2808      	cmp	r0, #8
 8001556:	d003      	beq.n	8001560 <RCC_PLL_GetFreqDomain_SYS+0x18>
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001558:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 800155a:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 800155e:	e7f9      	b.n	8001554 <RCC_PLL_GetFreqDomain_SYS+0xc>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001560:	4a09      	ldr	r2, [pc, #36]	; (8001588 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8001562:	6850      	ldr	r0, [r2, #4]
 8001564:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001568:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800156c:	6850      	ldr	r0, [r2, #4]
 800156e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8001572:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001576:	6853      	ldr	r3, [r2, #4]
 8001578:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800157c:	3301      	adds	r3, #1
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fbb0 f0f3 	udiv	r0, r0, r3
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800
 800158c:	00f42400 	.word	0x00f42400
 8001590:	007a1200 	.word	0x007a1200

08001594 <RCC_GetSystemClockFreq>:
{
 8001594:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <RCC_GetSystemClockFreq+0x24>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d005      	beq.n	80015ae <RCC_GetSystemClockFreq+0x1a>
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d105      	bne.n	80015b2 <RCC_GetSystemClockFreq+0x1e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80015a6:	2008      	movs	r0, #8
 80015a8:	f7ff ffce 	bl	8001548 <RCC_PLL_GetFreqDomain_SYS>
      break;
 80015ac:	e002      	b.n	80015b4 <RCC_GetSystemClockFreq+0x20>
      frequency = HSE_VALUE;
 80015ae:	4803      	ldr	r0, [pc, #12]	; (80015bc <RCC_GetSystemClockFreq+0x28>)
 80015b0:	e000      	b.n	80015b4 <RCC_GetSystemClockFreq+0x20>
  switch (LL_RCC_GetSysClkSource())
 80015b2:	4803      	ldr	r0, [pc, #12]	; (80015c0 <RCC_GetSystemClockFreq+0x2c>)
}
 80015b4:	bd08      	pop	{r3, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	007a1200 	.word	0x007a1200
 80015c0:	00f42400 	.word	0x00f42400

080015c4 <LL_RCC_GetSystemClocksFreq>:
{
 80015c4:	b510      	push	{r4, lr}
 80015c6:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80015c8:	f7ff ffe4 	bl	8001594 <RCC_GetSystemClockFreq>
 80015cc:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80015ce:	f7ff ff97 	bl	8001500 <RCC_GetHCLKClockFreq>
 80015d2:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80015d4:	f7ff ffa0 	bl	8001518 <RCC_GetPCLK1ClockFreq>
 80015d8:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80015da:	6860      	ldr	r0, [r4, #4]
 80015dc:	f7ff ffa8 	bl	8001530 <RCC_GetPCLK2ClockFreq>
 80015e0:	60e0      	str	r0, [r4, #12]
}
 80015e2:	bd10      	pop	{r4, pc}

080015e4 <LL_USART_Init>:
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80015e4:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80015e6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80015ea:	d001      	beq.n	80015f0 <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 80015ec:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80015ee:	4770      	bx	lr
{
 80015f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f2:	b085      	sub	sp, #20
 80015f4:	4604      	mov	r4, r0
 80015f6:	460d      	mov	r5, r1
    MODIFY_REG(USARTx->CR1,
 80015f8:	68c3      	ldr	r3, [r0, #12]
 80015fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80015fe:	f023 030c 	bic.w	r3, r3, #12
 8001602:	684a      	ldr	r2, [r1, #4]
 8001604:	68c9      	ldr	r1, [r1, #12]
 8001606:	430a      	orrs	r2, r1
 8001608:	6929      	ldr	r1, [r5, #16]
 800160a:	430a      	orrs	r2, r1
 800160c:	69a9      	ldr	r1, [r5, #24]
 800160e:	430a      	orrs	r2, r1
 8001610:	4313      	orrs	r3, r2
 8001612:	60c3      	str	r3, [r0, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001614:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001616:	6902      	ldr	r2, [r0, #16]
 8001618:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800161c:	4313      	orrs	r3, r2
 800161e:	6103      	str	r3, [r0, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001620:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001622:	6942      	ldr	r2, [r0, #20]
 8001624:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001628:	4313      	orrs	r3, r2
 800162a:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800162c:	4668      	mov	r0, sp
 800162e:	f7ff ffc9 	bl	80015c4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001632:	4b43      	ldr	r3, [pc, #268]	; (8001740 <LL_USART_Init+0x15c>)
 8001634:	429c      	cmp	r4, r3
 8001636:	d010      	beq.n	800165a <LL_USART_Init+0x76>
    else if (USARTx == USART2)
 8001638:	4b42      	ldr	r3, [pc, #264]	; (8001744 <LL_USART_Init+0x160>)
 800163a:	429c      	cmp	r4, r3
 800163c:	d014      	beq.n	8001668 <LL_USART_Init+0x84>
    else if (USARTx == USART3)
 800163e:	4b42      	ldr	r3, [pc, #264]	; (8001748 <LL_USART_Init+0x164>)
 8001640:	429c      	cmp	r4, r3
 8001642:	d013      	beq.n	800166c <LL_USART_Init+0x88>
    else if (USARTx == USART6)
 8001644:	4b41      	ldr	r3, [pc, #260]	; (800174c <LL_USART_Init+0x168>)
 8001646:	429c      	cmp	r4, r3
 8001648:	d012      	beq.n	8001670 <LL_USART_Init+0x8c>
    else if (USARTx == UART4)
 800164a:	4b41      	ldr	r3, [pc, #260]	; (8001750 <LL_USART_Init+0x16c>)
 800164c:	429c      	cmp	r4, r3
 800164e:	d011      	beq.n	8001674 <LL_USART_Init+0x90>
    else if (USARTx == UART5)
 8001650:	4b40      	ldr	r3, [pc, #256]	; (8001754 <LL_USART_Init+0x170>)
 8001652:	429c      	cmp	r4, r3
 8001654:	d010      	beq.n	8001678 <LL_USART_Init+0x94>
  ErrorStatus status = ERROR;
 8001656:	2001      	movs	r0, #1
 8001658:	e070      	b.n	800173c <LL_USART_Init+0x158>
      periphclk = rcc_clocks.PCLK2_Frequency;
 800165a:	9803      	ldr	r0, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800165c:	2800      	cmp	r0, #0
 800165e:	d06c      	beq.n	800173a <LL_USART_Init+0x156>
        && (USART_InitStruct->BaudRate != 0U))
 8001660:	682b      	ldr	r3, [r5, #0]
 8001662:	b95b      	cbnz	r3, 800167c <LL_USART_Init+0x98>
  ErrorStatus status = ERROR;
 8001664:	2001      	movs	r0, #1
 8001666:	e069      	b.n	800173c <LL_USART_Init+0x158>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001668:	9802      	ldr	r0, [sp, #8]
 800166a:	e7f7      	b.n	800165c <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK1_Frequency;
 800166c:	9802      	ldr	r0, [sp, #8]
 800166e:	e7f5      	b.n	800165c <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001670:	9803      	ldr	r0, [sp, #12]
 8001672:	e7f3      	b.n	800165c <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001674:	9802      	ldr	r0, [sp, #8]
 8001676:	e7f1      	b.n	800165c <LL_USART_Init+0x78>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001678:	9802      	ldr	r0, [sp, #8]
 800167a:	e7ef      	b.n	800165c <LL_USART_Init+0x78>
      LL_USART_SetBaudRate(USARTx,
 800167c:	69aa      	ldr	r2, [r5, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800167e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001682:	d02c      	beq.n	80016de <LL_USART_Init+0xfa>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001684:	2600      	movs	r6, #0
 8001686:	1805      	adds	r5, r0, r0
 8001688:	eb46 0106 	adc.w	r1, r6, r6
 800168c:	182d      	adds	r5, r5, r0
 800168e:	eb46 0101 	adc.w	r1, r6, r1
 8001692:	00ca      	lsls	r2, r1, #3
 8001694:	ea42 7255 	orr.w	r2, r2, r5, lsr #29
 8001698:	00ef      	lsls	r7, r5, #3
 800169a:	4611      	mov	r1, r2
 800169c:	009a      	lsls	r2, r3, #2
 800169e:	0f9b      	lsrs	r3, r3, #30
 80016a0:	1838      	adds	r0, r7, r0
 80016a2:	eb46 0101 	adc.w	r1, r6, r1
 80016a6:	f7fe fdeb 	bl	8000280 <__aeabi_uldivmod>
 80016aa:	492b      	ldr	r1, [pc, #172]	; (8001758 <LL_USART_Init+0x174>)
 80016ac:	fba1 3200 	umull	r3, r2, r1, r0
 80016b0:	0953      	lsrs	r3, r2, #5
 80016b2:	011a      	lsls	r2, r3, #4
 80016b4:	b292      	uxth	r2, r2
 80016b6:	2564      	movs	r5, #100	; 0x64
 80016b8:	fb05 0313 	mls	r3, r5, r3, r0
 80016bc:	011b      	lsls	r3, r3, #4
 80016be:	3332      	adds	r3, #50	; 0x32
 80016c0:	fba1 1303 	umull	r1, r3, r1, r3
 80016c4:	f3c3 134f 	ubfx	r3, r3, #5, #16
 80016c8:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 80016cc:	440a      	add	r2, r1
 80016ce:	b292      	uxth	r2, r2
 80016d0:	f003 030f 	and.w	r3, r3, #15
 80016d4:	4413      	add	r3, r2
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 80016da:	2000      	movs	r0, #0
}
 80016dc:	e02e      	b.n	800173c <LL_USART_Init+0x158>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80016de:	2600      	movs	r6, #0
 80016e0:	1805      	adds	r5, r0, r0
 80016e2:	eb46 0106 	adc.w	r1, r6, r6
 80016e6:	182d      	adds	r5, r5, r0
 80016e8:	eb46 0101 	adc.w	r1, r6, r1
 80016ec:	00ca      	lsls	r2, r1, #3
 80016ee:	ea42 7255 	orr.w	r2, r2, r5, lsr #29
 80016f2:	00ef      	lsls	r7, r5, #3
 80016f4:	4611      	mov	r1, r2
 80016f6:	18da      	adds	r2, r3, r3
 80016f8:	eb46 0306 	adc.w	r3, r6, r6
 80016fc:	1838      	adds	r0, r7, r0
 80016fe:	eb46 0101 	adc.w	r1, r6, r1
 8001702:	f7fe fdbd 	bl	8000280 <__aeabi_uldivmod>
 8001706:	4914      	ldr	r1, [pc, #80]	; (8001758 <LL_USART_Init+0x174>)
 8001708:	fba1 3200 	umull	r3, r2, r1, r0
 800170c:	0953      	lsrs	r3, r2, #5
 800170e:	011a      	lsls	r2, r3, #4
 8001710:	b292      	uxth	r2, r2
 8001712:	2564      	movs	r5, #100	; 0x64
 8001714:	fb05 0313 	mls	r3, r5, r3, r0
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	3332      	adds	r3, #50	; 0x32
 800171c:	fba1 1303 	umull	r1, r3, r1, r3
 8001720:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8001724:	0059      	lsls	r1, r3, #1
 8001726:	f401 71f8 	and.w	r1, r1, #496	; 0x1f0
 800172a:	440a      	add	r2, r1
 800172c:	b292      	uxth	r2, r2
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	4413      	add	r3, r2
 8001734:	b29b      	uxth	r3, r3
 8001736:	60a3      	str	r3, [r4, #8]
 8001738:	e7cf      	b.n	80016da <LL_USART_Init+0xf6>
  ErrorStatus status = ERROR;
 800173a:	2001      	movs	r0, #1
}
 800173c:	b005      	add	sp, #20
 800173e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001740:	40011000 	.word	0x40011000
 8001744:	40004400 	.word	0x40004400
 8001748:	40004800 	.word	0x40004800
 800174c:	40011400 	.word	0x40011400
 8001750:	40004c00 	.word	0x40004c00
 8001754:	40005000 	.word	0x40005000
 8001758:	51eb851f 	.word	0x51eb851f

0800175c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800175c:	4b01      	ldr	r3, [pc, #4]	; (8001764 <LL_SetSystemCoreClock+0x8>)
 800175e:	6018      	str	r0, [r3, #0]
}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000000 	.word	0x20000000

08001768 <CpuIrqDisable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
  __asm volatile ("cpsid i");
 8001768:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 800176a:	4770      	bx	lr

0800176c <CpuIrqEnable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
  __asm volatile ("cpsie i");
 800176c:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 800176e:	4770      	bx	lr

08001770 <CpuInit>:
** \brief     Initializes the CPU module.
** \return    none.
**
****************************************************************************************/
void CpuInit(void)
{
 8001770:	b508      	push	{r3, lr}
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals.
   */
  CpuIrqDisable();
 8001772:	f7ff fff9 	bl	8001768 <CpuIrqDisable>
} /*** end of CpuInit ***/
 8001776:	bd08      	pop	{r3, pc}

08001778 <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 8001778:	b510      	push	{r4, lr}
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 800177a:	f000 fa15 	bl	8001ba8 <NvmVerifyChecksum>
 800177e:	b900      	cbnz	r0, 8001782 <CpuStartUserProgram+0xa>
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
#endif
} /*** end of CpuStartUserProgram ***/
 8001780:	bd10      	pop	{r4, pc}
  if (CpuUserProgramStartHook() == BLT_FALSE)
 8001782:	f7fe ff01 	bl	8000588 <CpuUserProgramStartHook>
 8001786:	2800      	cmp	r0, #0
 8001788:	d0fa      	beq.n	8001780 <CpuStartUserProgram+0x8>
  ComFree();
 800178a:	f000 fb87 	bl	8001e9c <ComFree>
  HAL_DeInit();
 800178e:	f7ff f9b5 	bl	8000afc <HAL_DeInit>
  TimerReset();
 8001792:	f000 facd 	bl	8001d30 <TimerReset>
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 8001796:	f000 fa0b 	bl	8001bb0 <NvmGetUserProgBaseAddress>
 800179a:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 800179e:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <CpuStartUserProgram+0x3c>)
 80017a4:	6098      	str	r0, [r3, #8]
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 80017a6:	f000 fa03 	bl	8001bb0 <NvmGetUserProgBaseAddress>
 80017aa:	6844      	ldr	r4, [r0, #4]
  CpuIrqEnable();
 80017ac:	f7ff ffde 	bl	800176c <CpuIrqEnable>
  pProgResetHandler();
 80017b0:	47a0      	blx	r4
 80017b2:	e7e5      	b.n	8001780 <CpuStartUserProgram+0x8>
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 80017b8:	b570      	push	{r4, r5, r6, lr}
  blt_int8u *from, *to;

  /* set casted pointers */
  from = (blt_int8u *)src;
 80017ba:	460d      	mov	r5, r1
  to = (blt_int8u *)dest;
 80017bc:	4604      	mov	r4, r0

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 80017be:	1e53      	subs	r3, r2, #1
 80017c0:	b29e      	uxth	r6, r3
 80017c2:	b13a      	cbz	r2, 80017d4 <CpuMemCopy+0x1c>
  {
    /* store byte value from source to destination */
    *to++ = *from++;
 80017c4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80017c8:	f804 3b01 	strb.w	r3, [r4], #1
    /* keep the watchdog happy */
    CopService();
 80017cc:	f000 fb9c 	bl	8001f08 <CopService>
  while (len-- > 0)
 80017d0:	4632      	mov	r2, r6
 80017d2:	e7f4      	b.n	80017be <CpuMemCopy+0x6>
  }
} /*** end of CpuMemCopy ***/
 80017d4:	bd70      	pop	{r4, r5, r6, pc}

080017d6 <CpuMemSet>:
** \param     len  Number of bytes to write.
** \return    none.
**
****************************************************************************************/
void CpuMemSet(blt_addr dest, blt_int8u value, blt_int16u len)
{
 80017d6:	b570      	push	{r4, r5, r6, lr}
 80017d8:	460e      	mov	r6, r1
  blt_int8u *to;

  /* set casted pointer */
  to = (blt_int8u *)dest;
 80017da:	4604      	mov	r4, r0

  /* set all bytes at the destination address to the specified value */
  while (len-- > 0)
 80017dc:	1e53      	subs	r3, r2, #1
 80017de:	b29d      	uxth	r5, r3
 80017e0:	b12a      	cbz	r2, 80017ee <CpuMemSet+0x18>
  {
    /* set byte value */
    *to++ = value;
 80017e2:	f804 6b01 	strb.w	r6, [r4], #1
    /* keep the watchdog happy */
    CopService();
 80017e6:	f000 fb8f 	bl	8001f08 <CopService>
  while (len-- > 0)
 80017ea:	462a      	mov	r2, r5
 80017ec:	e7f6      	b.n	80017dc <CpuMemSet+0x6>
  }
} /*** end of CpuMemSet ***/
 80017ee:	bd70      	pop	{r4, r5, r6, pc}

080017f0 <FlashGetSector>:
** \param     address Address in the flash sector.
** \return    Flash sector number or FLASH_INVALID_SECTOR.
**
****************************************************************************************/
static blt_int8u FlashGetSector(blt_addr address)
{
 80017f0:	b538      	push	{r3, r4, r5, lr}
 80017f2:	4605      	mov	r5, r0
  blt_int8u result = FLASH_INVALID_SECTOR;
  blt_int8u sectorIdx;

  /* search through the sectors to find the right one */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 80017f4:	2400      	movs	r4, #0
 80017f6:	e001      	b.n	80017fc <FlashGetSector+0xc>
 80017f8:	3401      	adds	r4, #1
 80017fa:	b2e4      	uxtb	r4, r4
 80017fc:	2c0a      	cmp	r4, #10
 80017fe:	d817      	bhi.n	8001830 <FlashGetSector+0x40>
  {
    /* keep the watchdog happy */
    CopService();
 8001800:	f000 fb82 	bl	8001f08 <CopService>
    /* is the address in this sector? */
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8001804:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001808:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <FlashGetSector+0x44>)
 800180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180e:	42ab      	cmp	r3, r5
 8001810:	d8f2      	bhi.n	80017f8 <FlashGetSector+0x8>
        (address < (flashLayout[sectorIdx].sector_start + \
                    flashLayout[sectorIdx].sector_size)))
 8001812:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001816:	4907      	ldr	r1, [pc, #28]	; (8001834 <FlashGetSector+0x44>)
 8001818:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800181c:	6852      	ldr	r2, [r2, #4]
        (address < (flashLayout[sectorIdx].sector_start + \
 800181e:	4413      	add	r3, r2
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8001820:	42ab      	cmp	r3, r5
 8001822:	d9e9      	bls.n	80017f8 <FlashGetSector+0x8>
    {
      /* found the sector we are looking for so store it */
      result = flashLayout[sectorIdx].sector_num;
 8001824:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8001828:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800182c:	7a00      	ldrb	r0, [r0, #8]
      /* all done so no need to continue looping */
      break;
 800182e:	e000      	b.n	8001832 <FlashGetSector+0x42>
  blt_int8u result = FLASH_INVALID_SECTOR;
 8001830:	20ff      	movs	r0, #255	; 0xff
    }
  }
  /* give the result back to the caller */
  return result;
} /*** end of FlashGetSector ***/
 8001832:	bd38      	pop	{r3, r4, r5, pc}
 8001834:	08003608 	.word	0x08003608

08001838 <FlashInitBlock>:
{
 8001838:	b508      	push	{r3, lr}
  if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
 800183a:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800183e:	b953      	cbnz	r3, 8001856 <FlashInitBlock+0x1e>
  if (block->base_addr == address)
 8001840:	6803      	ldr	r3, [r0, #0]
 8001842:	428b      	cmp	r3, r1
 8001844:	d009      	beq.n	800185a <FlashInitBlock+0x22>
  block->base_addr = address;
 8001846:	f840 1b04 	str.w	r1, [r0], #4
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 800184a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800184e:	f7ff ffb3 	bl	80017b8 <CpuMemCopy>
  return BLT_TRUE;
 8001852:	2001      	movs	r0, #1
} /*** end of FlashInitBlock ***/
 8001854:	bd08      	pop	{r3, pc}
    return BLT_FALSE;
 8001856:	2000      	movs	r0, #0
 8001858:	e7fc      	b.n	8001854 <FlashInitBlock+0x1c>
    return BLT_TRUE;
 800185a:	2001      	movs	r0, #1
 800185c:	e7fa      	b.n	8001854 <FlashInitBlock+0x1c>

0800185e <FlashWriteBlock>:
{
 800185e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001862:	4607      	mov	r7, r0
  HAL_FLASH_Unlock();
 8001864:	f7ff fa9a 	bl	8000d9c <HAL_FLASH_Unlock>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8001868:	2400      	movs	r4, #0
 800186a:	e000      	b.n	800186e <FlashWriteBlock+0x10>
 800186c:	3401      	adds	r4, #1
 800186e:	2c7f      	cmp	r4, #127	; 0x7f
 8001870:	d814      	bhi.n	800189c <FlashWriteBlock+0x3e>
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 8001872:	683e      	ldr	r6, [r7, #0]
 8001874:	eb06 0884 	add.w	r8, r6, r4, lsl #2
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 8001878:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 800187c:	685d      	ldr	r5, [r3, #4]
    CopService();
 800187e:	f000 fb43 	bl	8001f08 <CopService>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 8001882:	462a      	mov	r2, r5
 8001884:	2300      	movs	r3, #0
 8001886:	4641      	mov	r1, r8
 8001888:	2002      	movs	r0, #2
 800188a:	f7ff fad9 	bl	8000e40 <HAL_FLASH_Program>
 800188e:	4680      	mov	r8, r0
 8001890:	b938      	cbnz	r0, 80018a2 <FlashWriteBlock+0x44>
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 8001892:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8001896:	42ab      	cmp	r3, r5
 8001898:	d0e8      	beq.n	800186c <FlashWriteBlock+0xe>
 800189a:	e004      	b.n	80018a6 <FlashWriteBlock+0x48>
  blt_bool   result = BLT_TRUE;
 800189c:	f04f 0801 	mov.w	r8, #1
 80018a0:	e001      	b.n	80018a6 <FlashWriteBlock+0x48>
      result = BLT_FALSE;
 80018a2:	f04f 0800 	mov.w	r8, #0
  HAL_FLASH_Lock();
 80018a6:	f7ff fa91 	bl	8000dcc <HAL_FLASH_Lock>
} /*** end of FlashWriteBlock ***/
 80018aa:	4640      	mov	r0, r8
 80018ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080018b0 <FlashSwitchBlock>:
{
 80018b0:	b538      	push	{r3, r4, r5, lr}
 80018b2:	460d      	mov	r5, r1
  if (block == &bootBlockInfo)
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <FlashSwitchBlock+0x38>)
 80018b6:	4298      	cmp	r0, r3
 80018b8:	d011      	beq.n	80018de <FlashSwitchBlock+0x2e>
 80018ba:	4604      	mov	r4, r0
  else if (base_addr == flashLayout[0].sector_start)
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <FlashSwitchBlock+0x3c>)
 80018be:	4299      	cmp	r1, r3
 80018c0:	d107      	bne.n	80018d2 <FlashSwitchBlock+0x22>
    block = &bootBlockInfo;
 80018c2:	4c09      	ldr	r4, [pc, #36]	; (80018e8 <FlashSwitchBlock+0x38>)
  if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 80018c4:	4629      	mov	r1, r5
 80018c6:	4620      	mov	r0, r4
 80018c8:	f7ff ffb6 	bl	8001838 <FlashInitBlock>
 80018cc:	b148      	cbz	r0, 80018e2 <FlashSwitchBlock+0x32>
} /*** end of FlashSwitchBlock ***/
 80018ce:	4620      	mov	r0, r4
 80018d0:	bd38      	pop	{r3, r4, r5, pc}
    if (FlashWriteBlock(block) == BLT_FALSE)
 80018d2:	f7ff ffc4 	bl	800185e <FlashWriteBlock>
 80018d6:	2800      	cmp	r0, #0
 80018d8:	d1f4      	bne.n	80018c4 <FlashSwitchBlock+0x14>
      return BLT_NULL;
 80018da:	2400      	movs	r4, #0
 80018dc:	e7f7      	b.n	80018ce <FlashSwitchBlock+0x1e>
    block = &blockInfo;
 80018de:	4c04      	ldr	r4, [pc, #16]	; (80018f0 <FlashSwitchBlock+0x40>)
 80018e0:	e7f0      	b.n	80018c4 <FlashSwitchBlock+0x14>
    return BLT_NULL;
 80018e2:	2400      	movs	r4, #0
 80018e4:	e7f3      	b.n	80018ce <FlashSwitchBlock+0x1e>
 80018e6:	bf00      	nop
 80018e8:	200002a0 	.word	0x200002a0
 80018ec:	08004000 	.word	0x08004000
 80018f0:	2000009c 	.word	0x2000009c

080018f4 <FlashAddToBlock>:
{
 80018f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018f8:	4606      	mov	r6, r0
 80018fa:	460c      	mov	r4, r1
 80018fc:	4617      	mov	r7, r2
 80018fe:	461d      	mov	r5, r3
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8001900:	f421 78ff 	bic.w	r8, r1, #510	; 0x1fe
 8001904:	f028 0801 	bic.w	r8, r8, #1
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 8001908:	6803      	ldr	r3, [r0, #0]
 800190a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190e:	d007      	beq.n	8001920 <FlashAddToBlock+0x2c>
  if (block->base_addr != current_base_addr)
 8001910:	6833      	ldr	r3, [r6, #0]
 8001912:	4543      	cmp	r3, r8
 8001914:	d10a      	bne.n	800192c <FlashAddToBlock+0x38>
  dst = &(block->data[address - block->base_addr]);
 8001916:	6831      	ldr	r1, [r6, #0]
 8001918:	1a64      	subs	r4, r4, r1
 800191a:	4434      	add	r4, r6
 800191c:	3404      	adds	r4, #4
  src = data;
 800191e:	e014      	b.n	800194a <FlashAddToBlock+0x56>
    if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 8001920:	4641      	mov	r1, r8
 8001922:	f7ff ff89 	bl	8001838 <FlashInitBlock>
 8001926:	2800      	cmp	r0, #0
 8001928:	d1f2      	bne.n	8001910 <FlashAddToBlock+0x1c>
 800192a:	e01f      	b.n	800196c <FlashAddToBlock+0x78>
    block = FlashSwitchBlock(block, current_base_addr);
 800192c:	4641      	mov	r1, r8
 800192e:	4630      	mov	r0, r6
 8001930:	f7ff ffbe 	bl	80018b0 <FlashSwitchBlock>
    if (block == BLT_NULL)
 8001934:	4606      	mov	r6, r0
 8001936:	2800      	cmp	r0, #0
 8001938:	d1ed      	bne.n	8001916 <FlashAddToBlock+0x22>
      return BLT_FALSE;
 800193a:	2000      	movs	r0, #0
 800193c:	e016      	b.n	800196c <FlashAddToBlock+0x78>
    *dst = *src;
 800193e:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001942:	f804 3b01 	strb.w	r3, [r4], #1
  while (len > 0);
 8001946:	3d01      	subs	r5, #1
 8001948:	d00f      	beq.n	800196a <FlashAddToBlock+0x76>
    CopService();
 800194a:	f000 fadd 	bl	8001f08 <CopService>
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 800194e:	1d31      	adds	r1, r6, #4
 8001950:	1a61      	subs	r1, r4, r1
 8001952:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001956:	d3f2      	bcc.n	800193e <FlashAddToBlock+0x4a>
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 8001958:	f508 7100 	add.w	r1, r8, #512	; 0x200
 800195c:	4630      	mov	r0, r6
 800195e:	f7ff ffa7 	bl	80018b0 <FlashSwitchBlock>
      if (block == BLT_NULL)
 8001962:	4606      	mov	r6, r0
 8001964:	b120      	cbz	r0, 8001970 <FlashAddToBlock+0x7c>
      dst = &(block->data[0]);
 8001966:	1d04      	adds	r4, r0, #4
 8001968:	e7e9      	b.n	800193e <FlashAddToBlock+0x4a>
  return BLT_TRUE;
 800196a:	2001      	movs	r0, #1
} /*** end of FlashAddToBlock ***/
 800196c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLT_FALSE;
 8001970:	2000      	movs	r0, #0
 8001972:	e7fb      	b.n	800196c <FlashAddToBlock+0x78>

08001974 <FlashEraseSectors>:
{
 8001974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	4604      	mov	r4, r0
 800197c:	4688      	mov	r8, r1
  blt_int32u eraseSectorError = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	9300      	str	r3, [sp, #0]
  if (first_sector > last_sector)
 8001982:	4288      	cmp	r0, r1
 8001984:	d807      	bhi.n	8001996 <FlashEraseSectors+0x22>
  blt_bool result = BLT_TRUE;
 8001986:	2701      	movs	r7, #1
  if ((first_sector < flashLayout[0].sector_num) || \
 8001988:	b354      	cbz	r4, 80019e0 <FlashEraseSectors+0x6c>
 800198a:	f1b8 0f0b 	cmp.w	r8, #11
 800198e:	d826      	bhi.n	80019de <FlashEraseSectors+0x6a>
  if (result == BLT_TRUE)
 8001990:	b91f      	cbnz	r7, 800199a <FlashEraseSectors+0x26>
 8001992:	463c      	mov	r4, r7
 8001994:	e024      	b.n	80019e0 <FlashEraseSectors+0x6c>
    result = BLT_FALSE;
 8001996:	2700      	movs	r7, #0
 8001998:	e7f6      	b.n	8001988 <FlashEraseSectors+0x14>
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800199a:	2300      	movs	r3, #0
 800199c:	9301      	str	r3, [sp, #4]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800199e:	2302      	movs	r3, #2
 80019a0:	9305      	str	r3, [sp, #20]
    eraseInitStruct.NbSectors = 1;
 80019a2:	2301      	movs	r3, #1
 80019a4:	9304      	str	r3, [sp, #16]
    HAL_FLASH_Unlock();
 80019a6:	f7ff f9f9 	bl	8000d9c <HAL_FLASH_Unlock>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 80019aa:	463e      	mov	r6, r7
 80019ac:	e002      	b.n	80019b4 <FlashEraseSectors+0x40>
	      result = BLT_TRUE;
 80019ae:	463e      	mov	r6, r7
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 80019b0:	3401      	adds	r4, #1
 80019b2:	b2e4      	uxtb	r4, r4
 80019b4:	4544      	cmp	r4, r8
 80019b6:	d80e      	bhi.n	80019d6 <FlashEraseSectors+0x62>
      CopService();
 80019b8:	f000 faa6 	bl	8001f08 <CopService>
      eraseInitStruct.Sector = sectorIdx;
 80019bc:	9403      	str	r4, [sp, #12]
      for (int i = 0; i < 8; i++)
 80019be:	2500      	movs	r5, #0
 80019c0:	2d07      	cmp	r5, #7
 80019c2:	dcf5      	bgt.n	80019b0 <FlashEraseSectors+0x3c>
	    if(HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&eraseSectorError) != HAL_OK)
 80019c4:	4669      	mov	r1, sp
 80019c6:	a801      	add	r0, sp, #4
 80019c8:	f7ff fae6 	bl	8000f98 <HAL_FLASHEx_Erase>
 80019cc:	2800      	cmp	r0, #0
 80019ce:	d0ee      	beq.n	80019ae <FlashEraseSectors+0x3a>
      for (int i = 0; i < 8; i++)
 80019d0:	3501      	adds	r5, #1
		  result = BLT_FALSE;
 80019d2:	2600      	movs	r6, #0
 80019d4:	e7f4      	b.n	80019c0 <FlashEraseSectors+0x4c>
    HAL_FLASH_Lock();
 80019d6:	f7ff f9f9 	bl	8000dcc <HAL_FLASH_Lock>
 80019da:	4634      	mov	r4, r6
 80019dc:	e000      	b.n	80019e0 <FlashEraseSectors+0x6c>
    result = BLT_FALSE;
 80019de:	2400      	movs	r4, #0
} /*** end of FlashEraseSectors ***/
 80019e0:	4620      	mov	r0, r4
 80019e2:	b006      	add	sp, #24
 80019e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080019e8 <FlashInit>:
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ec:	4a02      	ldr	r2, [pc, #8]	; (80019f8 <FlashInit+0x10>)
 80019ee:	6013      	str	r3, [r2, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 80019f0:	4a02      	ldr	r2, [pc, #8]	; (80019fc <FlashInit+0x14>)
 80019f2:	6013      	str	r3, [r2, #0]
} /*** end of FlashInit ***/
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	2000009c 	.word	0x2000009c
 80019fc:	200002a0 	.word	0x200002a0

08001a00 <FlashWrite>:
{
 8001a00:	b570      	push	{r4, r5, r6, lr}
 8001a02:	460d      	mov	r5, r1
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8001a04:	3901      	subs	r1, #1
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <FlashWrite+0x58>)
 8001a08:	1a1b      	subs	r3, r3, r0
 8001a0a:	4299      	cmp	r1, r3
 8001a0c:	d901      	bls.n	8001a12 <FlashWrite+0x12>
    return BLT_FALSE;
 8001a0e:	2000      	movs	r0, #0
} /*** end of FlashWrite ***/
 8001a10:	bd70      	pop	{r4, r5, r6, pc}
 8001a12:	4604      	mov	r4, r0
 8001a14:	4616      	mov	r6, r2
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8001a16:	f7ff feeb 	bl	80017f0 <FlashGetSector>
 8001a1a:	28ff      	cmp	r0, #255	; 0xff
 8001a1c:	d013      	beq.n	8001a46 <FlashWrite+0x46>
      (FlashGetSector(addr+len-1) == FLASH_INVALID_SECTOR))
 8001a1e:	1928      	adds	r0, r5, r4
 8001a20:	3801      	subs	r0, #1
 8001a22:	f7ff fee5 	bl	80017f0 <FlashGetSector>
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8001a26:	28ff      	cmp	r0, #255	; 0xff
 8001a28:	d00d      	beq.n	8001a46 <FlashWrite+0x46>
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8001a2a:	f424 73ff 	bic.w	r3, r4, #510	; 0x1fe
 8001a2e:	f023 0301 	bic.w	r3, r3, #1
  if (base_addr == flashLayout[0].sector_start)
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <FlashWrite+0x5c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d008      	beq.n	8001a4a <FlashWrite+0x4a>
  return FlashAddToBlock(&blockInfo, addr, data, len);
 8001a38:	462b      	mov	r3, r5
 8001a3a:	4632      	mov	r2, r6
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	4808      	ldr	r0, [pc, #32]	; (8001a60 <FlashWrite+0x60>)
 8001a40:	f7ff ff58 	bl	80018f4 <FlashAddToBlock>
 8001a44:	e7e4      	b.n	8001a10 <FlashWrite+0x10>
    return BLT_FALSE;
 8001a46:	2000      	movs	r0, #0
 8001a48:	e7e2      	b.n	8001a10 <FlashWrite+0x10>
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 8001a4a:	462b      	mov	r3, r5
 8001a4c:	4632      	mov	r2, r6
 8001a4e:	4621      	mov	r1, r4
 8001a50:	4804      	ldr	r0, [pc, #16]	; (8001a64 <FlashWrite+0x64>)
 8001a52:	f7ff ff4f 	bl	80018f4 <FlashAddToBlock>
 8001a56:	e7db      	b.n	8001a10 <FlashWrite+0x10>
 8001a58:	080fffff 	.word	0x080fffff
 8001a5c:	08004000 	.word	0x08004000
 8001a60:	2000009c 	.word	0x2000009c
 8001a64:	200002a0 	.word	0x200002a0

08001a68 <FlashErase>:
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8001a68:	1e4a      	subs	r2, r1, #1
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <FlashErase+0x3c>)
 8001a6c:	1a1b      	subs	r3, r3, r0
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d901      	bls.n	8001a76 <FlashErase+0xe>
    return BLT_FALSE;
 8001a72:	2000      	movs	r0, #0
} /*** end of FlashErase ***/
 8001a74:	4770      	bx	lr
{
 8001a76:	b570      	push	{r4, r5, r6, lr}
 8001a78:	4605      	mov	r5, r0
 8001a7a:	460c      	mov	r4, r1
  first_sector = FlashGetSector(addr);
 8001a7c:	f7ff feb8 	bl	80017f0 <FlashGetSector>
 8001a80:	4606      	mov	r6, r0
  last_sector  = FlashGetSector(addr+len-1);
 8001a82:	442c      	add	r4, r5
 8001a84:	1e60      	subs	r0, r4, #1
 8001a86:	f7ff feb3 	bl	80017f0 <FlashGetSector>
 8001a8a:	4601      	mov	r1, r0
  if ((first_sector == FLASH_INVALID_SECTOR) || (last_sector == FLASH_INVALID_SECTOR))
 8001a8c:	2eff      	cmp	r6, #255	; 0xff
 8001a8e:	d005      	beq.n	8001a9c <FlashErase+0x34>
 8001a90:	28ff      	cmp	r0, #255	; 0xff
 8001a92:	d005      	beq.n	8001aa0 <FlashErase+0x38>
  return FlashEraseSectors(first_sector, last_sector);
 8001a94:	4630      	mov	r0, r6
 8001a96:	f7ff ff6d 	bl	8001974 <FlashEraseSectors>
} /*** end of FlashErase ***/
 8001a9a:	bd70      	pop	{r4, r5, r6, pc}
    return BLT_FALSE;
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	e7fc      	b.n	8001a9a <FlashErase+0x32>
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	e7fa      	b.n	8001a9a <FlashErase+0x32>
 8001aa4:	080fffff 	.word	0x080fffff

08001aa8 <FlashWriteChecksum>:
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 8001aa8:	4b10      	ldr	r3, [pc, #64]	; (8001aec <FlashWriteChecksum+0x44>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d019      	beq.n	8001ae6 <FlashWriteChecksum+0x3e>
{
 8001ab2:	b500      	push	{lr}
 8001ab4:	b083      	sub	sp, #12
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 8001ab6:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <FlashWriteChecksum+0x44>)
 8001ab8:	6853      	ldr	r3, [r2, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 8001aba:	6891      	ldr	r1, [r2, #8]
 8001abc:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 8001abe:	68d1      	ldr	r1, [r2, #12]
 8001ac0:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 8001ac2:	6911      	ldr	r1, [r2, #16]
 8001ac4:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 8001ac6:	6951      	ldr	r1, [r2, #20]
 8001ac8:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 8001aca:	6991      	ldr	r1, [r2, #24]
 8001acc:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 8001ace:	69d2      	ldr	r2, [r2, #28]
 8001ad0:	4413      	add	r3, r2
  signature_checksum += 1; /* two's complement */
 8001ad2:	425b      	negs	r3, r3
 8001ad4:	9301      	str	r3, [sp, #4]
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 8001ad6:	aa01      	add	r2, sp, #4
 8001ad8:	2104      	movs	r1, #4
 8001ada:	4805      	ldr	r0, [pc, #20]	; (8001af0 <FlashWriteChecksum+0x48>)
 8001adc:	f7ff ff90 	bl	8001a00 <FlashWrite>
} /*** end of FlashWriteChecksum ***/
 8001ae0:	b003      	add	sp, #12
 8001ae2:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLT_TRUE;
 8001ae6:	2001      	movs	r0, #1
} /*** end of FlashWriteChecksum ***/
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	200002a0 	.word	0x200002a0
 8001af0:	08004188 	.word	0x08004188

08001af4 <FlashVerifyChecksum>:
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 8001af4:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <FlashVerifyChecksum+0x38>)
 8001af6:	681b      	ldr	r3, [r3, #0]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 8001af8:	4a0d      	ldr	r2, [pc, #52]	; (8001b30 <FlashVerifyChecksum+0x3c>)
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <FlashVerifyChecksum+0x40>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 8001b04:	4a0c      	ldr	r2, [pc, #48]	; (8001b38 <FlashVerifyChecksum+0x44>)
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 8001b0a:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <FlashVerifyChecksum+0x48>)
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <FlashVerifyChecksum+0x4c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <FlashVerifyChecksum+0x50>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <FlashVerifyChecksum+0x54>)
 8001b1e:	6812      	ldr	r2, [r2, #0]
  if (signature_checksum == 0)
 8001b20:	42da      	cmn	r2, r3
 8001b22:	d001      	beq.n	8001b28 <FlashVerifyChecksum+0x34>
  return BLT_FALSE;
 8001b24:	2000      	movs	r0, #0
 8001b26:	4770      	bx	lr
    return BLT_TRUE;
 8001b28:	2001      	movs	r0, #1
} /*** end of FlashVerifyChecksum ***/
 8001b2a:	4770      	bx	lr
 8001b2c:	08004000 	.word	0x08004000
 8001b30:	08004004 	.word	0x08004004
 8001b34:	08004008 	.word	0x08004008
 8001b38:	0800400c 	.word	0x0800400c
 8001b3c:	08004010 	.word	0x08004010
 8001b40:	08004014 	.word	0x08004014
 8001b44:	08004018 	.word	0x08004018
 8001b48:	08004188 	.word	0x08004188

08001b4c <FlashDone>:
{
 8001b4c:	b508      	push	{r3, lr}
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <FlashDone+0x34>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b56:	d106      	bne.n	8001b66 <FlashDone+0x1a>
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <FlashDone+0x38>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b60:	d107      	bne.n	8001b72 <FlashDone+0x26>
  return BLT_TRUE;
 8001b62:	2001      	movs	r0, #1
} /*** end of FlashDone ***/
 8001b64:	bd08      	pop	{r3, pc}
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 8001b66:	4806      	ldr	r0, [pc, #24]	; (8001b80 <FlashDone+0x34>)
 8001b68:	f7ff fe79 	bl	800185e <FlashWriteBlock>
 8001b6c:	2800      	cmp	r0, #0
 8001b6e:	d1f3      	bne.n	8001b58 <FlashDone+0xc>
 8001b70:	e7f8      	b.n	8001b64 <FlashDone+0x18>
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 8001b72:	4804      	ldr	r0, [pc, #16]	; (8001b84 <FlashDone+0x38>)
 8001b74:	f7ff fe73 	bl	800185e <FlashWriteBlock>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d0f3      	beq.n	8001b64 <FlashDone+0x18>
  return BLT_TRUE;
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	e7f1      	b.n	8001b64 <FlashDone+0x18>
 8001b80:	200002a0 	.word	0x200002a0
 8001b84:	2000009c 	.word	0x2000009c

08001b88 <FlashGetUserProgBaseAddress>:
} /*** end of FlashGetUserProgBaseAddress ***/
 8001b88:	4800      	ldr	r0, [pc, #0]	; (8001b8c <FlashGetUserProgBaseAddress+0x4>)
 8001b8a:	4770      	bx	lr
 8001b8c:	08004000 	.word	0x08004000

08001b90 <NvmInit>:
** \brief     Initializes the NVM driver.
** \return    none.
**
****************************************************************************************/
void NvmInit(void)
{
 8001b90:	b508      	push	{r3, lr}
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 8001b92:	f7ff ff29 	bl	80019e8 <FlashInit>
} /*** end of NvmInit ***/
 8001b96:	bd08      	pop	{r3, pc}

08001b98 <NvmWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 8001b98:	b508      	push	{r3, lr}
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 8001b9a:	f7ff ff31 	bl	8001a00 <FlashWrite>
} /*** end of NvmWrite ***/
 8001b9e:	bd08      	pop	{r3, pc}

08001ba0 <NvmErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmErase(blt_addr addr, blt_int32u len)
{
 8001ba0:	b508      	push	{r3, lr}
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 8001ba2:	f7ff ff61 	bl	8001a68 <FlashErase>
} /*** end of NvmErase ***/
 8001ba6:	bd08      	pop	{r3, pc}

08001ba8 <NvmVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmVerifyChecksum(void)
{
 8001ba8:	b508      	push	{r3, lr}
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 8001baa:	f7ff ffa3 	bl	8001af4 <FlashVerifyChecksum>
#endif
} /*** end of NvmVerifyChecksum ***/
 8001bae:	bd08      	pop	{r3, pc}

08001bb0 <NvmGetUserProgBaseAddress>:
**            program. This is typically that start of the vector table.
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
 8001bb0:	b508      	push	{r3, lr}
  return FlashGetUserProgBaseAddress();
 8001bb2:	f7ff ffe9 	bl	8001b88 <FlashGetUserProgBaseAddress>
} /*** end of NvmGetUserProgBaseAddress ***/
 8001bb6:	bd08      	pop	{r3, pc}

08001bb8 <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 8001bb8:	b508      	push	{r3, lr}
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 8001bba:	f7ff ff75 	bl	8001aa8 <FlashWriteChecksum>
 8001bbe:	b900      	cbnz	r0, 8001bc2 <NvmDone+0xa>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
} /*** end of NvmDone ***/
 8001bc0:	bd08      	pop	{r3, pc}
  return FlashDone();
 8001bc2:	f7ff ffc3 	bl	8001b4c <FlashDone>
 8001bc6:	e7fb      	b.n	8001bc0 <NvmDone+0x8>

08001bc8 <Rs232ReceiveByte>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <Rs232ReceiveByte+0x18>)
 8001bca:	681b      	ldr	r3, [r3, #0]
** \return    BLT_TRUE if a byte was received, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool Rs232ReceiveByte(blt_int8u *data)
{
  if (LL_USART_IsActiveFlag_RXNE(USART_CHANNEL) != 0)
 8001bcc:	f013 0f20 	tst.w	r3, #32
 8001bd0:	d101      	bne.n	8001bd6 <Rs232ReceiveByte+0xe>
    *data = LL_USART_ReceiveData8(USART_CHANNEL);
    /* all done */
    return BLT_TRUE;
  }
  /* still here to no new byte received */
  return BLT_FALSE;
 8001bd2:	2000      	movs	r0, #0
} /*** end of Rs232ReceiveByte ***/
 8001bd4:	4770      	bx	lr
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001bd6:	4b02      	ldr	r3, [pc, #8]	; (8001be0 <Rs232ReceiveByte+0x18>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
    *data = LL_USART_ReceiveData8(USART_CHANNEL);
 8001bda:	7003      	strb	r3, [r0, #0]
    return BLT_TRUE;
 8001bdc:	2001      	movs	r0, #1
 8001bde:	4770      	bx	lr
 8001be0:	40011400 	.word	0x40011400

08001be4 <Rs232Init>:
{
 8001be4:	b510      	push	{r4, lr}
 8001be6:	b088      	sub	sp, #32
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001be8:	4c0c      	ldr	r4, [pc, #48]	; (8001c1c <Rs232Init+0x38>)
 8001bea:	68e3      	ldr	r3, [r4, #12]
 8001bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bf0:	60e3      	str	r3, [r4, #12]
  USART_InitStruct.BaudRate = BOOT_COM_RS232_BAUDRATE;
 8001bf2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001bf6:	9301      	str	r3, [sp, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9302      	str	r3, [sp, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001bfc:	9303      	str	r3, [sp, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001bfe:	9304      	str	r3, [sp, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001c00:	220c      	movs	r2, #12
 8001c02:	9205      	str	r2, [sp, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001c04:	9306      	str	r3, [sp, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001c06:	9307      	str	r3, [sp, #28]
  LL_USART_Init(USART_CHANNEL, &USART_InitStruct);
 8001c08:	a901      	add	r1, sp, #4
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f7ff fcea 	bl	80015e4 <LL_USART_Init>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001c10:	68e3      	ldr	r3, [r4, #12]
 8001c12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c16:	60e3      	str	r3, [r4, #12]
} /*** end of Rs232Init ***/
 8001c18:	b008      	add	sp, #32
 8001c1a:	bd10      	pop	{r4, pc}
 8001c1c:	40011400 	.word	0x40011400

08001c20 <Rs232ReceivePacket>:
{
 8001c20:	b570      	push	{r4, r5, r6, lr}
  if (xcpCtoRxInProgress == BLT_FALSE)
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <Rs232ReceivePacket+0x98>)
 8001c24:	781c      	ldrb	r4, [r3, #0]
 8001c26:	b9bc      	cbnz	r4, 8001c58 <Rs232ReceivePacket+0x38>
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == BLT_TRUE)
 8001c28:	4824      	ldr	r0, [pc, #144]	; (8001cbc <Rs232ReceivePacket+0x9c>)
 8001c2a:	f7ff ffcd 	bl	8001bc8 <Rs232ReceiveByte>
 8001c2e:	2801      	cmp	r0, #1
 8001c30:	d001      	beq.n	8001c36 <Rs232ReceivePacket+0x16>
} /*** end of Rs232ReceivePacket ***/
 8001c32:	4620      	mov	r0, r4
 8001c34:	bd70      	pop	{r4, r5, r6, pc}
      if ( (xcpCtoReqPacket[0] > 0) &&
 8001c36:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <Rs232ReceivePacket+0x9c>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b3f      	cmp	r3, #63	; 0x3f
 8001c40:	d8f7      	bhi.n	8001c32 <Rs232ReceivePacket+0x12>
        xcpCtoRxStartTime = TimerGet();
 8001c42:	f000 f89f 	bl	8001d84 <TimerGet>
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <Rs232ReceivePacket+0xa0>)
 8001c48:	6018      	str	r0, [r3, #0]
        xcpCtoRxLength = 0;
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <Rs232ReceivePacket+0xa4>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
        xcpCtoRxInProgress = BLT_TRUE;
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <Rs232ReceivePacket+0x98>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	701a      	strb	r2, [r3, #0]
 8001c56:	e7ec      	b.n	8001c32 <Rs232ReceivePacket+0x12>
 8001c58:	4606      	mov	r6, r0
 8001c5a:	460d      	mov	r5, r1
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 8001c5c:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <Rs232ReceivePacket+0xa4>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	3301      	adds	r3, #1
 8001c62:	4816      	ldr	r0, [pc, #88]	; (8001cbc <Rs232ReceivePacket+0x9c>)
 8001c64:	4418      	add	r0, r3
 8001c66:	f7ff ffaf 	bl	8001bc8 <Rs232ReceiveByte>
 8001c6a:	4604      	mov	r4, r0
 8001c6c:	2801      	cmp	r0, #1
 8001c6e:	d115      	bne.n	8001c9c <Rs232ReceivePacket+0x7c>
      xcpCtoRxLength++;
 8001c70:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <Rs232ReceivePacket+0xa4>)
 8001c72:	781a      	ldrb	r2, [r3, #0]
 8001c74:	3201      	adds	r2, #1
 8001c76:	b2d2      	uxtb	r2, r2
 8001c78:	701a      	strb	r2, [r3, #0]
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <Rs232ReceivePacket+0x9c>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d001      	beq.n	8001c86 <Rs232ReceivePacket+0x66>
  return BLT_FALSE;
 8001c82:	2400      	movs	r4, #0
 8001c84:	e7d5      	b.n	8001c32 <Rs232ReceivePacket+0x12>
        CpuMemCopy((blt_int32u)data, (blt_int32u)&xcpCtoReqPacket[1], xcpCtoRxLength);
 8001c86:	4910      	ldr	r1, [pc, #64]	; (8001cc8 <Rs232ReceivePacket+0xa8>)
 8001c88:	4630      	mov	r0, r6
 8001c8a:	f7ff fd95 	bl	80017b8 <CpuMemCopy>
        xcpCtoRxInProgress = BLT_FALSE;
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <Rs232ReceivePacket+0x98>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
        *len = xcpCtoRxLength;
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <Rs232ReceivePacket+0xa4>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	702b      	strb	r3, [r5, #0]
        return BLT_TRUE;
 8001c9a:	e7ca      	b.n	8001c32 <Rs232ReceivePacket+0x12>
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 8001c9c:	f000 f872 	bl	8001d84 <TimerGet>
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <Rs232ReceivePacket+0xa0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	3364      	adds	r3, #100	; 0x64
 8001ca6:	4298      	cmp	r0, r3
 8001ca8:	d903      	bls.n	8001cb2 <Rs232ReceivePacket+0x92>
        xcpCtoRxInProgress = BLT_FALSE;
 8001caa:	2400      	movs	r4, #0
 8001cac:	4b02      	ldr	r3, [pc, #8]	; (8001cb8 <Rs232ReceivePacket+0x98>)
 8001cae:	701c      	strb	r4, [r3, #0]
 8001cb0:	e7bf      	b.n	8001c32 <Rs232ReceivePacket+0x12>
  return BLT_FALSE;
 8001cb2:	2400      	movs	r4, #0
 8001cb4:	e7bd      	b.n	8001c32 <Rs232ReceivePacket+0x12>
 8001cb6:	bf00      	nop
 8001cb8:	200004e5 	.word	0x200004e5
 8001cbc:	200004a4 	.word	0x200004a4
 8001cc0:	200004e8 	.word	0x200004e8
 8001cc4:	200004e6 	.word	0x200004e6
 8001cc8:	200004a5 	.word	0x200004a5

08001ccc <Rs232TransmitByte>:
** \param     data Value of byte that is to be transmitted.
** \return    none.
**
****************************************************************************************/
void Rs232TransmitByte(blt_int8u data)
{
 8001ccc:	b510      	push	{r4, lr}
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <Rs232TransmitByte+0x28>)
 8001cd0:	6058      	str	r0, [r3, #4]
  blt_int32u timeout;

  /* write byte to transmit holding register */
  LL_USART_TransmitData8(USART_CHANNEL, data);
  /* set timeout time to wait for transmit completion. */
  timeout = TimerGet() + RS232_BYTE_TX_TIMEOUT_MS;
 8001cd2:	f000 f857 	bl	8001d84 <TimerGet>
 8001cd6:	f100 040a 	add.w	r4, r0, #10
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <Rs232TransmitByte+0x28>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
  /* wait for tx holding register to be empty */
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 8001cde:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001ce2:	d105      	bne.n	8001cf0 <Rs232TransmitByte+0x24>
  {
    /* keep the watchdog happy */
    CopService();
 8001ce4:	f000 f910 	bl	8001f08 <CopService>
    /* break loop upon timeout. this would indicate a hardware failure. */
    if (TimerGet() > timeout)
 8001ce8:	f000 f84c 	bl	8001d84 <TimerGet>
 8001cec:	42a0      	cmp	r0, r4
 8001cee:	d9f4      	bls.n	8001cda <Rs232TransmitByte+0xe>
    {
      break;
    }
  }
} /*** end of Rs232TransmitByte ***/
 8001cf0:	bd10      	pop	{r4, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40011400 	.word	0x40011400

08001cf8 <Rs232TransmitPacket>:
{
 8001cf8:	b570      	push	{r4, r5, r6, lr}
 8001cfa:	4606      	mov	r6, r0
 8001cfc:	460d      	mov	r5, r1
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 8001cfe:	2940      	cmp	r1, #64	; 0x40
 8001d00:	d80e      	bhi.n	8001d20 <Rs232TransmitPacket+0x28>
  Rs232TransmitByte(len);
 8001d02:	4628      	mov	r0, r5
 8001d04:	f7ff ffe2 	bl	8001ccc <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 8001d08:	2400      	movs	r4, #0
 8001d0a:	b2ab      	uxth	r3, r5
 8001d0c:	42a3      	cmp	r3, r4
 8001d0e:	d90c      	bls.n	8001d2a <Rs232TransmitPacket+0x32>
    CopService();
 8001d10:	f000 f8fa 	bl	8001f08 <CopService>
    Rs232TransmitByte(data[data_index]);
 8001d14:	5d30      	ldrb	r0, [r6, r4]
 8001d16:	f7ff ffd9 	bl	8001ccc <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 8001d1a:	3401      	adds	r4, #1
 8001d1c:	b2a4      	uxth	r4, r4
 8001d1e:	e7f4      	b.n	8001d0a <Rs232TransmitPacket+0x12>
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 8001d20:	217b      	movs	r1, #123	; 0x7b
 8001d22:	4802      	ldr	r0, [pc, #8]	; (8001d2c <Rs232TransmitPacket+0x34>)
 8001d24:	f000 f83a 	bl	8001d9c <AssertFailure>
 8001d28:	e7eb      	b.n	8001d02 <Rs232TransmitPacket+0xa>
} /*** end of Rs232TransmitPacket ***/
 8001d2a:	bd70      	pop	{r4, r5, r6, pc}
 8001d2c:	0800368c 	.word	0x0800368c

08001d30 <TimerReset>:
**
****************************************************************************************/
void TimerReset(void)
{
  /* Set the systick's registers back into the default reset value. */
  SysTick->CTRL = 0;
 8001d30:	4b02      	ldr	r3, [pc, #8]	; (8001d3c <TimerReset+0xc>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8001d36:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8001d38:	609a      	str	r2, [r3, #8]
} /* end of TimerReset */
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e010 	.word	0xe000e010

08001d40 <TimerInit>:
{
 8001d40:	b508      	push	{r3, lr}
  TimerReset();
 8001d42:	f7ff fff5 	bl	8001d30 <TimerReset>
  SysTick->LOAD = BOOT_CPU_SYSTEM_SPEED_KHZ - 1;
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <TimerInit+0x1c>)
 8001d48:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <TimerInit+0x20>)
 8001d4a:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 8001d50:	2105      	movs	r1, #5
 8001d52:	6019      	str	r1, [r3, #0]
  millisecond_counter = 0;
 8001d54:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <TimerInit+0x24>)
 8001d56:	601a      	str	r2, [r3, #0]
} /*** end of TimerInit ***/
 8001d58:	bd08      	pop	{r3, pc}
 8001d5a:	bf00      	nop
 8001d5c:	e000e010 	.word	0xe000e010
 8001d60:	0002903f 	.word	0x0002903f
 8001d64:	200004ec 	.word	0x200004ec

08001d68 <TimerUpdate>:
**
****************************************************************************************/
void TimerUpdate(void)
{
  /* Check if the millisecond event occurred. */
  if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <TimerUpdate+0x14>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001d70:	d003      	beq.n	8001d7a <TimerUpdate+0x12>
  {
    /* Increment the millisecond counter. */
    millisecond_counter++;
 8001d72:	4a03      	ldr	r2, [pc, #12]	; (8001d80 <TimerUpdate+0x18>)
 8001d74:	6813      	ldr	r3, [r2, #0]
 8001d76:	3301      	adds	r3, #1
 8001d78:	6013      	str	r3, [r2, #0]
  }
} /*** end of TimerUpdate ***/
 8001d7a:	4770      	bx	lr
 8001d7c:	e000e010 	.word	0xe000e010
 8001d80:	200004ec 	.word	0x200004ec

08001d84 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 8001d84:	b508      	push	{r3, lr}
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 8001d86:	f7ff ffef 	bl	8001d68 <TimerUpdate>
  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
} /*** end of TimerGet ***/
 8001d8a:	4b01      	ldr	r3, [pc, #4]	; (8001d90 <TimerGet+0xc>)
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	bd08      	pop	{r3, pc}
 8001d90:	200004ec 	.word	0x200004ec

08001d94 <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 8001d94:	b508      	push	{r3, lr}
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
 8001d96:	f7ff fff5 	bl	8001d84 <TimerGet>
} /*** end of HAL_GetTick ***/
 8001d9a:	bd08      	pop	{r3, pc}

08001d9c <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 8001d9c:	b508      	push	{r3, lr}
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 8001d9e:	f000 f8b3 	bl	8001f08 <CopService>
  for (;;)
 8001da2:	e7fc      	b.n	8001d9e <AssertFailure+0x2>

08001da4 <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 8001da4:	b508      	push	{r3, lr}
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 8001da6:	f000 f8a5 	bl	8001ef4 <ComIsConnected>
 8001daa:	2801      	cmp	r0, #1
 8001dac:	d003      	beq.n	8001db6 <BackDoorCheck+0x12>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <BackDoorCheck+0x38>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d000      	beq.n	8001db8 <BackDoorCheck+0x14>
        CpuStartUserProgram();
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 8001db6:	bd08      	pop	{r3, pc}
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 8001db8:	f7ff ffe4 	bl	8001d84 <TimerGet>
 8001dbc:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <BackDoorCheck+0x3c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a08      	ldr	r2, [pc, #32]	; (8001de4 <BackDoorCheck+0x40>)
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001dca:	3308      	adds	r3, #8
 8001dcc:	4298      	cmp	r0, r3
 8001dce:	d3f2      	bcc.n	8001db6 <BackDoorCheck+0x12>
      backdoorOpen = BLT_FALSE;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <BackDoorCheck+0x38>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
        CpuStartUserProgram();
 8001dd6:	f7ff fccf 	bl	8001778 <CpuStartUserProgram>
 8001dda:	e7ec      	b.n	8001db6 <BackDoorCheck+0x12>
 8001ddc:	200004f4 	.word	0x200004f4
 8001de0:	200004f0 	.word	0x200004f0
 8001de4:	200004f8 	.word	0x200004f8

08001de8 <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 8001de8:	b508      	push	{r3, lr}
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <BackDoorRestartTimer+0x18>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d000      	beq.n	8001df4 <BackDoorRestartTimer+0xc>
  {
    backdoorOpenTime = TimerGet();
  }
} /*** end of BackDoorRestartTimer ***/
 8001df2:	bd08      	pop	{r3, pc}
    backdoorOpenTime = TimerGet();
 8001df4:	f7ff ffc6 	bl	8001d84 <TimerGet>
 8001df8:	4b02      	ldr	r3, [pc, #8]	; (8001e04 <BackDoorRestartTimer+0x1c>)
 8001dfa:	6018      	str	r0, [r3, #0]
} /*** end of BackDoorRestartTimer ***/
 8001dfc:	e7f9      	b.n	8001df2 <BackDoorRestartTimer+0xa>
 8001dfe:	bf00      	nop
 8001e00:	200004f4 	.word	0x200004f4
 8001e04:	200004f8 	.word	0x200004f8

08001e08 <BackDoorInit>:
{
 8001e08:	b508      	push	{r3, lr}
  backdoorOpen = BLT_TRUE;
 8001e0a:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <BackDoorInit+0x14>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 8001e10:	f7ff ffea 	bl	8001de8 <BackDoorRestartTimer>
  BackDoorCheck();
 8001e14:	f7ff ffc6 	bl	8001da4 <BackDoorCheck>
} /*** end of BackDoorInit ***/
 8001e18:	bd08      	pop	{r3, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200004f4 	.word	0x200004f4

08001e20 <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 8001e20:	b508      	push	{r3, lr}
  /* initialize the CPU */
  CpuInit();
 8001e22:	f7ff fca5 	bl	8001770 <CpuInit>
  /* initialize the watchdog */
  CopInit();
 8001e26:	f000 f86b 	bl	8001f00 <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 8001e2a:	f7ff ff89 	bl	8001d40 <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 8001e2e:	f7ff feaf 	bl	8001b90 <NvmInit>
  /* initialize the file system module */
  FileInit();
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 8001e32:	f000 f80d 	bl	8001e50 <ComInit>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
 8001e36:	f7ff ffe7 	bl	8001e08 <BackDoorInit>
} /*** end of BootInit ***/
 8001e3a:	bd08      	pop	{r3, pc}

08001e3c <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 8001e3c:	b508      	push	{r3, lr}
  /* service the watchdog */
  CopService();
 8001e3e:	f000 f863 	bl	8001f08 <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 8001e42:	f7ff ff91 	bl	8001d68 <TimerUpdate>
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 8001e46:	f000 f80f 	bl	8001e68 <ComTask>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
 8001e4a:	f7ff ffab 	bl	8001da4 <BackDoorCheck>
} /*** end of BootTask ***/
 8001e4e:	bd08      	pop	{r3, pc}

08001e50 <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 8001e50:	b508      	push	{r3, lr}
  /* initialize the XCP communication protocol */
  XcpInit();
 8001e52:	f000 fb15 	bl	8002480 <XcpInit>
  /* set it as active */
  comActiveInterface = COM_IF_CAN;
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* initialize the RS232 interface */
  Rs232Init();
 8001e56:	f7ff fec5 	bl	8001be4 <Rs232Init>
  /* set it as active */
  comActiveInterface = COM_IF_RS232;
 8001e5a:	4b02      	ldr	r3, [pc, #8]	; (8001e64 <ComInit+0x14>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
	NetInit();
  /* set it as active */
  comActiveInterface = COM_IF_NET;
  #endif
#endif
} /*** end of ComInit ***/
 8001e60:	bd08      	pop	{r3, pc}
 8001e62:	bf00      	nop
 8001e64:	2000000c 	.word	0x2000000c

08001e68 <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 8001e68:	b500      	push	{lr}
 8001e6a:	b083      	sub	sp, #12
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  if (Rs232ReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 8001e6c:	f10d 0107 	add.w	r1, sp, #7
 8001e70:	4808      	ldr	r0, [pc, #32]	; (8001e94 <ComTask+0x2c>)
 8001e72:	f7ff fed5 	bl	8001c20 <Rs232ReceivePacket>
 8001e76:	2801      	cmp	r0, #1
 8001e78:	d002      	beq.n	8001e80 <ComTask+0x18>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 8001e7a:	b003      	add	sp, #12
 8001e7c:	f85d fb04 	ldr.w	pc, [sp], #4
    comActiveInterface = COM_IF_RS232;
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <ComTask+0x30>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 8001e86:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001e8a:	4802      	ldr	r0, [pc, #8]	; (8001e94 <ComTask+0x2c>)
 8001e8c:	f000 fb16 	bl	80024bc <XcpPacketReceived>
} /*** end of ComTask ***/
 8001e90:	e7f3      	b.n	8001e7a <ComTask+0x12>
 8001e92:	bf00      	nop
 8001e94:	200004fc 	.word	0x200004fc
 8001e98:	2000000c 	.word	0x2000000c

08001e9c <ComFree>:
{
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
#endif
} /*** end of ComFree ***/
 8001e9c:	4770      	bx	lr
	...

08001ea0 <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 8001ea0:	b508      	push	{r3, lr}
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* transmit the packet. note that len is limited to 255 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_RS232)
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <ComTransmitPacket+0x18>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	b113      	cbz	r3, 8001eae <ComTransmitPacket+0xe>
    NetTransmitPacket(data, len);
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
 8001ea8:	f000 fb00 	bl	80024ac <XcpPacketTransmitted>
} /*** end of ComTransmitPacket ***/
 8001eac:	bd08      	pop	{r3, pc}
    Rs232TransmitPacket(data, (blt_int8u)len);
 8001eae:	b2c9      	uxtb	r1, r1
 8001eb0:	f7ff ff22 	bl	8001cf8 <Rs232TransmitPacket>
 8001eb4:	e7f8      	b.n	8001ea8 <ComTransmitPacket+0x8>
 8001eb6:	bf00      	nop
 8001eb8:	2000000c 	.word	0x2000000c

08001ebc <ComGetActiveInterfaceMaxRxLen>:
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <ComGetActiveInterfaceMaxRxLen+0x18>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d003      	beq.n	8001ecc <ComGetActiveInterfaceMaxRxLen+0x10>
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d103      	bne.n	8001ed0 <ComGetActiveInterfaceMaxRxLen+0x14>
    case COM_IF_CAN:
      result = BOOT_COM_CAN_RX_MAX_DATA;
      break;

    case COM_IF_USB:
      result = BOOT_COM_USB_RX_MAX_DATA;
 8001ec8:	2000      	movs	r0, #0
 8001eca:	4770      	bx	lr
      result = BOOT_COM_CAN_RX_MAX_DATA;
 8001ecc:	2008      	movs	r0, #8
 8001ece:	4770      	bx	lr
  switch (comActiveInterface)
 8001ed0:	2040      	movs	r0, #64	; 0x40
      result = BOOT_COM_RX_MAX_DATA;
      break;
  }

  return result;
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 8001ed2:	4770      	bx	lr
 8001ed4:	2000000c 	.word	0x2000000c

08001ed8 <ComGetActiveInterfaceMaxTxLen>:
blt_int16u ComGetActiveInterfaceMaxTxLen(void)
{
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8001ed8:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <ComGetActiveInterfaceMaxTxLen+0x18>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d003      	beq.n	8001ee8 <ComGetActiveInterfaceMaxTxLen+0x10>
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d103      	bne.n	8001eec <ComGetActiveInterfaceMaxTxLen+0x14>
    case COM_IF_CAN:
      result = BOOT_COM_CAN_TX_MAX_DATA;
      break;

    case COM_IF_USB:
      result = BOOT_COM_USB_TX_MAX_DATA;
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	4770      	bx	lr
      result = BOOT_COM_CAN_TX_MAX_DATA;
 8001ee8:	2008      	movs	r0, #8
 8001eea:	4770      	bx	lr
  switch (comActiveInterface)
 8001eec:	2040      	movs	r0, #64	; 0x40
      result = BOOT_COM_TX_MAX_DATA;
      break;
  }

  return result;
} /*** end of ComGetActiveInterfaceMaxTxLen ***/
 8001eee:	4770      	bx	lr
 8001ef0:	2000000c 	.word	0x2000000c

08001ef4 <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 8001ef4:	b508      	push	{r3, lr}
  blt_bool result = BLT_FALSE;

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 8001ef6:	f000 fad1 	bl	800249c <XcpIsConnected>
 8001efa:	b100      	cbz	r0, 8001efe <ComIsConnected+0xa>
  {
    result = BLT_TRUE;
 8001efc:	2001      	movs	r0, #1
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
} /*** end of ComIsConnected ***/
 8001efe:	bd08      	pop	{r3, pc}

08001f00 <CopInit>:
** \brief     Watchdog initialization function.
** \return    none
**
****************************************************************************************/
void CopInit(void)
{
 8001f00:	b508      	push	{r3, lr}
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
 8001f02:	f7fe fb4f 	bl	80005a4 <CopInitHook>
#endif
} /*** end of CopInit ***/
 8001f06:	bd08      	pop	{r3, pc}

08001f08 <CopService>:
** \brief     Watchdog service function to prevent the watchdog from timing out.
** \return    none
**
****************************************************************************************/
void CopService(void)
{
 8001f08:	b508      	push	{r3, lr}
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
 8001f0a:	f7fe fb50 	bl	80005ae <CopServiceHook>
#endif
} /*** end of CopService ***/
 8001f0e:	bd08      	pop	{r3, pc}

08001f10 <XcpProtectResources>:
#if (XCP_RES_PAGING_EN == 1)
  xcpInfo.protection |= XCP_RES_CALPAG;
#endif

#if (XCP_RES_PROGRAMMING_EN == 1)
  xcpInfo.protection |= XCP_RES_PGM;
 8001f10:	4b01      	ldr	r3, [pc, #4]	; (8001f18 <XcpProtectResources+0x8>)
 8001f12:	2210      	movs	r2, #16
 8001f14:	705a      	strb	r2, [r3, #1]

#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.protection |= XCP_RES_STIM;
#endif
#endif /* XCP_SEED_KEY_PROTECTION_EN == 1 */
} /*** end of XcpProtectResources ***/
 8001f16:	4770      	bx	lr
 8001f18:	200005cc 	.word	0x200005cc

08001f1c <XcpSetCtoError>:
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <XcpSetCtoError+0x10>)
 8001f1e:	22fe      	movs	r2, #254	; 0xfe
 8001f20:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[1] = error;
 8001f22:	7118      	strb	r0, [r3, #4]
  xcpInfo.ctoLen = 2;
 8001f24:	2202      	movs	r2, #2
 8001f26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpSetCtoError ***/
 8001f2a:	4770      	bx	lr
 8001f2c:	200005cc 	.word	0x200005cc

08001f30 <XcpCmdDisconnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdDisconnect(blt_int8u *data)
{
 8001f30:	b510      	push	{r4, lr}
  /* suppress compiler warning for unused parameter */
  data = data;

  /* indicate that the xcp connection is disconnected */
  xcpInfo.connected = 0;
 8001f32:	4c05      	ldr	r4, [pc, #20]	; (8001f48 <XcpCmdDisconnect+0x18>)
 8001f34:	2300      	movs	r3, #0
 8001f36:	7023      	strb	r3, [r4, #0]

  /* enable resource protection */
  XcpProtectResources();
 8001f38:	f7ff ffea 	bl	8001f10 <XcpProtectResources>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001f3c:	23ff      	movs	r3, #255	; 0xff
 8001f3e:	70e3      	strb	r3, [r4, #3]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001f40:	2301      	movs	r3, #1
 8001f42:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdDisconnect ***/
 8001f46:	bd10      	pop	{r4, pc}
 8001f48:	200005cc 	.word	0x200005cc

08001f4c <XcpCmdGetStatus>:
{
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <XcpCmdGetStatus+0x1c>)
 8001f4e:	22ff      	movs	r2, #255	; 0xff
 8001f50:	70da      	strb	r2, [r3, #3]

  /* report session status */
  xcpInfo.ctoData[1] = 0;
 8001f52:	2200      	movs	r2, #0
 8001f54:	711a      	strb	r2, [r3, #4]

  /* report current resource protection status */
  xcpInfo.ctoData[2] = xcpInfo.protection;
 8001f56:	7859      	ldrb	r1, [r3, #1]
 8001f58:	7159      	strb	r1, [r3, #5]

  /* reset reserved and session configuration id values */
  xcpInfo.ctoData[3] = 0;
 8001f5a:	719a      	strb	r2, [r3, #6]
  xcpInfo.ctoData[4] = 0;
 8001f5c:	71da      	strb	r2, [r3, #7]
  xcpInfo.ctoData[5] = 0;
 8001f5e:	721a      	strb	r2, [r3, #8]

  /* set packet length */
  xcpInfo.ctoLen = 6;
 8001f60:	2206      	movs	r2, #6
 8001f62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetStatus ***/
 8001f66:	4770      	bx	lr
 8001f68:	200005cc 	.word	0x200005cc

08001f6c <XcpCmdSynch>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSynch(blt_int8u *data)
{
 8001f6c:	b508      	push	{r3, lr}
  /* suppress compiler warning for unused parameter */
  data = data;

  /* synch requires a negative response */
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f7ff ffd4 	bl	8001f1c <XcpSetCtoError>
} /*** end of XcpCmdSynch ***/
 8001f74:	bd08      	pop	{r3, pc}
	...

08001f78 <XcpCmdGetId>:
{
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <XcpCmdGetId+0x20>)
 8001f7a:	22ff      	movs	r2, #255	; 0xff
 8001f7c:	70da      	strb	r2, [r3, #3]

  /* point mta to start of station id string */
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 8001f7e:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <XcpCmdGetId+0x24>)
 8001f80:	649a      	str	r2, [r3, #72]	; 0x48

  /* set station id mode to 0 */
  xcpInfo.ctoData[1] = 0;
 8001f82:	2200      	movs	r2, #0
 8001f84:	711a      	strb	r2, [r3, #4]

  /* reset reserved values */
  xcpInfo.ctoData[2] = 0;
 8001f86:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[3] = 0;
 8001f88:	719a      	strb	r2, [r3, #6]

  /* store station id length (excl. null termination) for response packet */
  *(blt_int32u *)&xcpInfo.ctoData[4] = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
 8001f8a:	2207      	movs	r2, #7
 8001f8c:	f8c3 2007 	str.w	r2, [r3, #7]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8001f90:	2208      	movs	r2, #8
 8001f92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetId ***/
 8001f96:	4770      	bx	lr
 8001f98:	200005cc 	.word	0x200005cc
 8001f9c:	080036f4 	.word	0x080036f4

08001fa0 <XcpCmdSetMta>:
**
****************************************************************************************/
static void XcpCmdSetMta(blt_int8u *data)
{
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <XcpCmdSetMta+0x14>)
 8001fa2:	22ff      	movs	r2, #255	; 0xff
 8001fa4:	70da      	strb	r2, [r3, #3]

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = *(blt_int32u *)&data[4];
 8001fa6:	6842      	ldr	r2, [r0, #4]
 8001fa8:	649a      	str	r2, [r3, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8001faa:	2201      	movs	r2, #1
 8001fac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdSetMta ***/
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	200005cc 	.word	0x200005cc

08001fb8 <XcpCmdProgramPrepare>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramPrepare(blt_int8u *data)
{
 8001fb8:	b508      	push	{r3, lr}
#if (XCP_SEED_KEY_PROTECTION_EN == 1)
  /* check if PGM resource is unlocked */
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <XcpCmdProgramPrepare+0x1c>)
 8001fbc:	785b      	ldrb	r3, [r3, #1]
 8001fbe:	f013 0f10 	tst.w	r3, #16
 8001fc2:	d103      	bne.n	8001fcc <XcpCmdProgramPrepare+0x14>
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 8001fc4:	2031      	movs	r0, #49	; 0x31
 8001fc6:	f7ff ffa9 	bl	8001f1c <XcpSetCtoError>
  return;
} /*** end of XcpCmdProgramPrepare ***/
 8001fca:	bd08      	pop	{r3, pc}
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8001fcc:	2025      	movs	r0, #37	; 0x25
 8001fce:	f7ff ffa5 	bl	8001f1c <XcpSetCtoError>
    return;
 8001fd2:	e7fa      	b.n	8001fca <XcpCmdProgramPrepare+0x12>
 8001fd4:	200005cc 	.word	0x200005cc

08001fd8 <XcpCmdProgramStart>:
{
 8001fd8:	b538      	push	{r3, r4, r5, lr}
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <XcpCmdProgramStart+0x34>)
 8001fdc:	785b      	ldrb	r3, [r3, #1]
 8001fde:	f013 0f10 	tst.w	r3, #16
 8001fe2:	d10f      	bne.n	8002004 <XcpCmdProgramStart+0x2c>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8001fe4:	4c09      	ldr	r4, [pc, #36]	; (800200c <XcpCmdProgramStart+0x34>)
 8001fe6:	23ff      	movs	r3, #255	; 0xff
 8001fe8:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] = 0;
 8001fea:	2500      	movs	r5, #0
 8001fec:	7125      	strb	r5, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8001fee:	7165      	strb	r5, [r4, #5]
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8001ff0:	f7ff ff64 	bl	8001ebc <ComGetActiveInterfaceMaxRxLen>
 8001ff4:	71a0      	strb	r0, [r4, #6]
  xcpInfo.ctoData[4] = 0;
 8001ff6:	71e5      	strb	r5, [r4, #7]
  xcpInfo.ctoData[5] = 0;
 8001ff8:	7225      	strb	r5, [r4, #8]
  xcpInfo.ctoData[6] = 0;
 8001ffa:	7265      	strb	r5, [r4, #9]
  xcpInfo.ctoLen = 7;
 8001ffc:	2307      	movs	r3, #7
 8001ffe:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdProgramStart ***/
 8002002:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8002004:	2025      	movs	r0, #37	; 0x25
 8002006:	f7ff ff89 	bl	8001f1c <XcpSetCtoError>
    return;
 800200a:	e7fa      	b.n	8002002 <XcpCmdProgramStart+0x2a>
 800200c:	200005cc 	.word	0x200005cc

08002010 <XcpCmdConnect>:
{
 8002010:	b538      	push	{r3, r4, r5, lr}
  XcpProtectResources();
 8002012:	f7ff ff7d 	bl	8001f10 <XcpProtectResources>
  xcpInfo.connected = 1;
 8002016:	4c0e      	ldr	r4, [pc, #56]	; (8002050 <XcpCmdConnect+0x40>)
 8002018:	2501      	movs	r5, #1
 800201a:	7025      	strb	r5, [r4, #0]
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800201c:	23ff      	movs	r3, #255	; 0xff
 800201e:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 8002020:	2310      	movs	r3, #16
 8002022:	7123      	strb	r3, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	7163      	strb	r3, [r4, #5]
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8002028:	f7ff ff48 	bl	8001ebc <ComGetActiveInterfaceMaxRxLen>
 800202c:	71a0      	strb	r0, [r4, #6]
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 800202e:	f7ff ff53 	bl	8001ed8 <ComGetActiveInterfaceMaxTxLen>
 8002032:	71e0      	strb	r0, [r4, #7]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 8002034:	f7ff ff50 	bl	8001ed8 <ComGetActiveInterfaceMaxTxLen>
 8002038:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800203c:	7220      	strb	r0, [r4, #8]
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 800203e:	7265      	strb	r5, [r4, #9]
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 8002040:	72a5      	strb	r5, [r4, #10]
  xcpInfo.ctoLen = 8;
 8002042:	2308      	movs	r3, #8
 8002044:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  NvmInit();
 8002048:	f7ff fda2 	bl	8001b90 <NvmInit>
} /*** end of XcpCmdConnect ***/
 800204c:	bd38      	pop	{r3, r4, r5, pc}
 800204e:	bf00      	nop
 8002050:	200005cc 	.word	0x200005cc

08002054 <XcpCmdUpload>:
{
 8002054:	b510      	push	{r4, lr}
 8002056:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8002058:	f7ff ff30 	bl	8001ebc <ComGetActiveInterfaceMaxRxLen>
 800205c:	7862      	ldrb	r2, [r4, #1]
 800205e:	4290      	cmp	r0, r2
 8002060:	d914      	bls.n	800208c <XcpCmdUpload+0x38>
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8002062:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <XcpCmdUpload+0x4c>)
 8002064:	785b      	ldrb	r3, [r3, #1]
 8002066:	f013 0f10 	tst.w	r3, #16
 800206a:	d013      	beq.n	8002094 <XcpCmdUpload+0x40>
    CpuMemSet((blt_addr)destPtr, 0, len);
 800206c:	2100      	movs	r1, #0
 800206e:	480d      	ldr	r0, [pc, #52]	; (80020a4 <XcpCmdUpload+0x50>)
 8002070:	f7ff fbb1 	bl	80017d6 <CpuMemSet>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8002074:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <XcpCmdUpload+0x4c>)
 8002076:	22ff      	movs	r2, #255	; 0xff
 8002078:	70da      	strb	r2, [r3, #3]
  xcpInfo.mta += data[1];
 800207a:	7861      	ldrb	r1, [r4, #1]
 800207c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800207e:	440a      	add	r2, r1
 8002080:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoLen = data[1]+1;
 8002082:	7862      	ldrb	r2, [r4, #1]
 8002084:	3201      	adds	r2, #1
 8002086:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdUpload ***/
 800208a:	bd10      	pop	{r4, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 800208c:	2022      	movs	r0, #34	; 0x22
 800208e:	f7ff ff45 	bl	8001f1c <XcpSetCtoError>
    return;
 8002092:	e7fa      	b.n	800208a <XcpCmdUpload+0x36>
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <XcpCmdUpload+0x4c>)
 8002096:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002098:	3004      	adds	r0, #4
 800209a:	f7ff fb8d 	bl	80017b8 <CpuMemCopy>
 800209e:	e7e9      	b.n	8002074 <XcpCmdUpload+0x20>
 80020a0:	200005cc 	.word	0x200005cc
 80020a4:	200005d0 	.word	0x200005d0

080020a8 <XcpCmdShortUpload>:
{
 80020a8:	b510      	push	{r4, lr}
 80020aa:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 80020ac:	f7ff ff06 	bl	8001ebc <ComGetActiveInterfaceMaxRxLen>
 80020b0:	7863      	ldrb	r3, [r4, #1]
 80020b2:	4298      	cmp	r0, r3
 80020b4:	d917      	bls.n	80020e6 <XcpCmdShortUpload+0x3e>
  xcpInfo.mta = *(blt_int32u *)&data[4];
 80020b6:	6861      	ldr	r1, [r4, #4]
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <XcpCmdShortUpload+0x50>)
 80020ba:	6499      	str	r1, [r3, #72]	; 0x48
  len = data[1];
 80020bc:	7862      	ldrb	r2, [r4, #1]
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 80020be:	785b      	ldrb	r3, [r3, #1]
 80020c0:	f013 0f10 	tst.w	r3, #16
 80020c4:	d013      	beq.n	80020ee <XcpCmdShortUpload+0x46>
    CpuMemSet((blt_addr)destPtr, 0, len);
 80020c6:	2100      	movs	r1, #0
 80020c8:	480c      	ldr	r0, [pc, #48]	; (80020fc <XcpCmdShortUpload+0x54>)
 80020ca:	f7ff fb84 	bl	80017d6 <CpuMemSet>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <XcpCmdShortUpload+0x50>)
 80020d0:	22ff      	movs	r2, #255	; 0xff
 80020d2:	70da      	strb	r2, [r3, #3]
  xcpInfo.mta += data[1];
 80020d4:	7861      	ldrb	r1, [r4, #1]
 80020d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020d8:	440a      	add	r2, r1
 80020da:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoLen = data[1]+1;
 80020dc:	7862      	ldrb	r2, [r4, #1]
 80020de:	3201      	adds	r2, #1
 80020e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdShortUpload ***/
 80020e4:	bd10      	pop	{r4, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 80020e6:	2022      	movs	r0, #34	; 0x22
 80020e8:	f7ff ff18 	bl	8001f1c <XcpSetCtoError>
    return;
 80020ec:	e7fa      	b.n	80020e4 <XcpCmdShortUpload+0x3c>
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 80020ee:	4803      	ldr	r0, [pc, #12]	; (80020fc <XcpCmdShortUpload+0x54>)
 80020f0:	f7ff fb62 	bl	80017b8 <CpuMemCopy>
 80020f4:	e7eb      	b.n	80020ce <XcpCmdShortUpload+0x26>
 80020f6:	bf00      	nop
 80020f8:	200005cc 	.word	0x200005cc
 80020fc:	200005d0 	.word	0x200005d0

08002100 <XcpComputeChecksum>:
{
 8002100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002102:	4605      	mov	r5, r0
 8002104:	4617      	mov	r7, r2
  blt_int8u cs = 0;
 8002106:	2400      	movs	r4, #0
  while (length-- > 0)
 8002108:	1e4e      	subs	r6, r1, #1
 800210a:	b139      	cbz	r1, 800211c <XcpComputeChecksum+0x1c>
    cs += *((blt_int8u *)(blt_addr)address);
 800210c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002110:	441c      	add	r4, r3
 8002112:	b2e4      	uxtb	r4, r4
    CopService();
 8002114:	f7ff fef8 	bl	8001f08 <CopService>
  while (length-- > 0)
 8002118:	4631      	mov	r1, r6
 800211a:	e7f5      	b.n	8002108 <XcpComputeChecksum+0x8>
  *checksum = cs;
 800211c:	603c      	str	r4, [r7, #0]
} /*** end of XcpComputeChecksum ***/
 800211e:	2001      	movs	r0, #1
 8002120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002124 <XcpCmdBuildCheckSum>:
{
 8002124:	b510      	push	{r4, lr}
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8002126:	4c08      	ldr	r4, [pc, #32]	; (8002148 <XcpCmdBuildCheckSum+0x24>)
 8002128:	23ff      	movs	r3, #255	; 0xff
 800212a:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] = XcpComputeChecksum(xcpInfo.mta, *(blt_int32u *)&data[4],
 800212c:	1de2      	adds	r2, r4, #7
 800212e:	6841      	ldr	r1, [r0, #4]
 8002130:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002132:	f7ff ffe5 	bl	8002100 <XcpComputeChecksum>
 8002136:	7120      	strb	r0, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	7163      	strb	r3, [r4, #5]
  xcpInfo.ctoData[3] = 0;
 800213c:	71a3      	strb	r3, [r4, #6]
  xcpInfo.ctoLen = 8;
 800213e:	2308      	movs	r3, #8
 8002140:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdBuildCheckSum ***/
 8002144:	bd10      	pop	{r4, pc}
 8002146:	bf00      	nop
 8002148:	200005cc 	.word	0x200005cc

0800214c <XcpCmdProgramMax>:
{
 800214c:	b538      	push	{r3, r4, r5, lr}
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <XcpCmdProgramMax+0x4c>)
 8002150:	785b      	ldrb	r3, [r3, #1]
 8002152:	f013 0f10 	tst.w	r3, #16
 8002156:	d117      	bne.n	8002188 <XcpCmdProgramMax+0x3c>
 8002158:	4604      	mov	r4, r0
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <XcpCmdProgramMax+0x4c>)
 800215c:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 800215e:	f7ff fead 	bl	8001ebc <ComGetActiveInterfaceMaxRxLen>
 8002162:	1c62      	adds	r2, r4, #1
 8002164:	1e41      	subs	r1, r0, #1
 8002166:	4628      	mov	r0, r5
 8002168:	f7ff fd16 	bl	8001b98 <NvmWrite>
 800216c:	b180      	cbz	r0, 8002190 <XcpCmdProgramMax+0x44>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800216e:	4c0a      	ldr	r4, [pc, #40]	; (8002198 <XcpCmdProgramMax+0x4c>)
 8002170:	23ff      	movs	r3, #255	; 0xff
 8002172:	70e3      	strb	r3, [r4, #3]
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 8002174:	f7ff fea2 	bl	8001ebc <ComGetActiveInterfaceMaxRxLen>
 8002178:	3801      	subs	r0, #1
 800217a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800217c:	4403      	add	r3, r0
 800217e:	64a3      	str	r3, [r4, #72]	; 0x48
  xcpInfo.ctoLen = 1;
 8002180:	2301      	movs	r3, #1
 8002182:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdProgramMax ***/
 8002186:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8002188:	2025      	movs	r0, #37	; 0x25
 800218a:	f7ff fec7 	bl	8001f1c <XcpSetCtoError>
    return;
 800218e:	e7fa      	b.n	8002186 <XcpCmdProgramMax+0x3a>
    XcpSetCtoError(XCP_ERR_GENERIC);
 8002190:	2031      	movs	r0, #49	; 0x31
 8002192:	f7ff fec3 	bl	8001f1c <XcpSetCtoError>
    return;
 8002196:	e7f6      	b.n	8002186 <XcpCmdProgramMax+0x3a>
 8002198:	200005cc 	.word	0x200005cc

0800219c <XcpCmdProgram>:
{
 800219c:	b510      	push	{r4, lr}
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 800219e:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <XcpCmdProgram+0x6c>)
 80021a0:	785b      	ldrb	r3, [r3, #1]
 80021a2:	f013 0f10 	tst.w	r3, #16
 80021a6:	d11a      	bne.n	80021de <XcpCmdProgram+0x42>
 80021a8:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 80021aa:	f7ff fe87 	bl	8001ebc <ComGetActiveInterfaceMaxRxLen>
 80021ae:	3801      	subs	r0, #1
 80021b0:	7863      	ldrb	r3, [r4, #1]
 80021b2:	4298      	cmp	r0, r3
 80021b4:	dd17      	ble.n	80021e6 <XcpCmdProgram+0x4a>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80021b6:	4b14      	ldr	r3, [pc, #80]	; (8002208 <XcpCmdProgram+0x6c>)
 80021b8:	22ff      	movs	r2, #255	; 0xff
 80021ba:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 80021bc:	2201      	movs	r2, #1
 80021be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (data[1] == 0)
 80021c2:	7861      	ldrb	r1, [r4, #1]
 80021c4:	b199      	cbz	r1, 80021ee <XcpCmdProgram+0x52>
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 80021c6:	1ca2      	adds	r2, r4, #2
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <XcpCmdProgram+0x6c>)
 80021ca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80021cc:	f7ff fce4 	bl	8001b98 <NvmWrite>
 80021d0:	b1a8      	cbz	r0, 80021fe <XcpCmdProgram+0x62>
  xcpInfo.mta += data[1];
 80021d2:	7861      	ldrb	r1, [r4, #1]
 80021d4:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <XcpCmdProgram+0x6c>)
 80021d6:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80021d8:	440b      	add	r3, r1
 80021da:	6493      	str	r3, [r2, #72]	; 0x48
 80021dc:	e002      	b.n	80021e4 <XcpCmdProgram+0x48>
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 80021de:	2025      	movs	r0, #37	; 0x25
 80021e0:	f7ff fe9c 	bl	8001f1c <XcpSetCtoError>
} /*** end of XcpCmdProgram ***/
 80021e4:	bd10      	pop	{r4, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 80021e6:	2022      	movs	r0, #34	; 0x22
 80021e8:	f7ff fe98 	bl	8001f1c <XcpSetCtoError>
    return;
 80021ec:	e7fa      	b.n	80021e4 <XcpCmdProgram+0x48>
    if (NvmDone() == BLT_FALSE)
 80021ee:	f7ff fce3 	bl	8001bb8 <NvmDone>
 80021f2:	2800      	cmp	r0, #0
 80021f4:	d1f6      	bne.n	80021e4 <XcpCmdProgram+0x48>
      XcpSetCtoError(XCP_ERR_GENERIC);
 80021f6:	2031      	movs	r0, #49	; 0x31
 80021f8:	f7ff fe90 	bl	8001f1c <XcpSetCtoError>
    return;
 80021fc:	e7f2      	b.n	80021e4 <XcpCmdProgram+0x48>
    XcpSetCtoError(XCP_ERR_GENERIC);
 80021fe:	2031      	movs	r0, #49	; 0x31
 8002200:	f7ff fe8c 	bl	8001f1c <XcpSetCtoError>
    return;
 8002204:	e7ee      	b.n	80021e4 <XcpCmdProgram+0x48>
 8002206:	bf00      	nop
 8002208:	200005cc 	.word	0x200005cc

0800220c <XcpCmdProgramClear>:
{
 800220c:	b508      	push	{r3, lr}
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 800220e:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <XcpCmdProgramClear+0x38>)
 8002210:	785b      	ldrb	r3, [r3, #1]
 8002212:	f013 0f10 	tst.w	r3, #16
 8002216:	d10c      	bne.n	8002232 <XcpCmdProgramClear+0x26>
  if (NvmErase((blt_addr)xcpInfo.mta, *(blt_int32u *)&data[4]) == BLT_FALSE)
 8002218:	6841      	ldr	r1, [r0, #4]
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <XcpCmdProgramClear+0x38>)
 800221c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800221e:	f7ff fcbf 	bl	8001ba0 <NvmErase>
 8002222:	b150      	cbz	r0, 800223a <XcpCmdProgramClear+0x2e>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8002224:	4b07      	ldr	r3, [pc, #28]	; (8002244 <XcpCmdProgramClear+0x38>)
 8002226:	22ff      	movs	r2, #255	; 0xff
 8002228:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 800222a:	2201      	movs	r2, #1
 800222c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramClear ***/
 8002230:	bd08      	pop	{r3, pc}
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8002232:	2025      	movs	r0, #37	; 0x25
 8002234:	f7ff fe72 	bl	8001f1c <XcpSetCtoError>
    return;
 8002238:	e7fa      	b.n	8002230 <XcpCmdProgramClear+0x24>
    XcpSetCtoError(XCP_ERR_GENERIC);
 800223a:	2031      	movs	r0, #49	; 0x31
 800223c:	f7ff fe6e 	bl	8001f1c <XcpSetCtoError>
    return;
 8002240:	e7f6      	b.n	8002230 <XcpCmdProgramClear+0x24>
 8002242:	bf00      	nop
 8002244:	200005cc 	.word	0x200005cc

08002248 <XcpCmdProgramReset>:
{
 8002248:	b508      	push	{r3, lr}
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <XcpCmdProgramReset+0x28>)
 800224c:	785b      	ldrb	r3, [r3, #1]
 800224e:	f013 0f10 	tst.w	r3, #16
 8002252:	d108      	bne.n	8002266 <XcpCmdProgramReset+0x1e>
  CpuStartUserProgram();
 8002254:	f7ff fa90 	bl	8001778 <CpuStartUserProgram>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <XcpCmdProgramReset+0x28>)
 800225a:	22ff      	movs	r2, #255	; 0xff
 800225c:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 800225e:	2201      	movs	r2, #1
 8002260:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramReset ***/
 8002264:	bd08      	pop	{r3, pc}
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8002266:	2025      	movs	r0, #37	; 0x25
 8002268:	f7ff fe58 	bl	8001f1c <XcpSetCtoError>
    return;
 800226c:	e7fa      	b.n	8002264 <XcpCmdProgramReset+0x1c>
 800226e:	bf00      	nop
 8002270:	200005cc 	.word	0x200005cc

08002274 <XcpGetSeed>:
{
 8002274:	b508      	push	{r3, lr}
  return XcpGetSeedHook(resource, seed);
 8002276:	f7fe f99e 	bl	80005b6 <XcpGetSeedHook>
} /*** end of XcpGetSeed ***/
 800227a:	bd08      	pop	{r3, pc}

0800227c <XcpCmdGetSeed>:
{
 800227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800227e:	4b40      	ldr	r3, [pc, #256]	; (8002380 <XcpCmdGetSeed+0x104>)
 8002280:	22ff      	movs	r2, #255	; 0xff
 8002282:	70da      	strb	r2, [r3, #3]
  if (data[1] == 0)
 8002284:	7842      	ldrb	r2, [r0, #1]
 8002286:	bb1a      	cbnz	r2, 80022d0 <XcpCmdGetSeed+0x54>
    if (((data[2] & XCP_RES_CALPAG) > 0) && ((data[2] & ~XCP_RES_CALPAG) == 0))
 8002288:	7883      	ldrb	r3, [r0, #2]
 800228a:	f013 0101 	ands.w	r1, r3, #1
 800228e:	d003      	beq.n	8002298 <XcpCmdGetSeed+0x1c>
 8002290:	f033 0101 	bics.w	r1, r3, #1
 8002294:	d044      	beq.n	8002320 <XcpCmdGetSeed+0xa4>
    resourceOK = 0;
 8002296:	4611      	mov	r1, r2
    if (((data[2] & XCP_RES_PGM) > 0) && ((data[2] & ~XCP_RES_PGM) == 0))
 8002298:	f013 0f10 	tst.w	r3, #16
 800229c:	d003      	beq.n	80022a6 <XcpCmdGetSeed+0x2a>
 800229e:	f033 0210 	bics.w	r2, r3, #16
 80022a2:	d100      	bne.n	80022a6 <XcpCmdGetSeed+0x2a>
      resourceOK = 1;
 80022a4:	2101      	movs	r1, #1
    if (((data[2] & XCP_RES_DAQ) > 0) && ((data[2] & ~XCP_RES_DAQ) == 0))
 80022a6:	f013 0f04 	tst.w	r3, #4
 80022aa:	d003      	beq.n	80022b4 <XcpCmdGetSeed+0x38>
 80022ac:	f033 0204 	bics.w	r2, r3, #4
 80022b0:	d100      	bne.n	80022b4 <XcpCmdGetSeed+0x38>
      resourceOK = 1;
 80022b2:	2101      	movs	r1, #1
    if (((data[2] & XCP_RES_STIM) > 0) && ((data[2] & ~XCP_RES_STIM) == 0))
 80022b4:	f013 0f08 	tst.w	r3, #8
 80022b8:	d002      	beq.n	80022c0 <XcpCmdGetSeed+0x44>
 80022ba:	f033 0208 	bics.w	r2, r3, #8
 80022be:	d001      	beq.n	80022c4 <XcpCmdGetSeed+0x48>
    if (resourceOK == 0)
 80022c0:	2900      	cmp	r1, #0
 80022c2:	d02f      	beq.n	8002324 <XcpCmdGetSeed+0xa8>
    if ((xcpInfo.protection & data[2]) == 0)
 80022c4:	4a2e      	ldr	r2, [pc, #184]	; (8002380 <XcpCmdGetSeed+0x104>)
 80022c6:	7852      	ldrb	r2, [r2, #1]
 80022c8:	4213      	tst	r3, r2
 80022ca:	d02f      	beq.n	800232c <XcpCmdGetSeed+0xb0>
    xcpInfo.s_n_k_resource = data[2];
 80022cc:	4a2c      	ldr	r2, [pc, #176]	; (8002380 <XcpCmdGetSeed+0x104>)
 80022ce:	7093      	strb	r3, [r2, #2]
  if (data[1] == 0)
 80022d0:	7843      	ldrb	r3, [r0, #1]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d031      	beq.n	800233a <XcpCmdGetSeed+0xbe>
    if (sequenceInProgress == BLT_FALSE)
 80022d6:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <XcpCmdGetSeed+0x108>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d043      	beq.n	8002366 <XcpCmdGetSeed+0xea>
  seedCurrentLen = seedRemainderLen;
 80022de:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <XcpCmdGetSeed+0x10c>)
 80022e0:	781c      	ldrb	r4, [r3, #0]
  if (seedCurrentLen > (XCP_CTO_PACKET_LEN-2))
 80022e2:	f7ff fdeb 	bl	8001ebc <ComGetActiveInterfaceMaxRxLen>
 80022e6:	3801      	subs	r0, #1
 80022e8:	42a0      	cmp	r0, r4
 80022ea:	dd43      	ble.n	8002374 <XcpCmdGetSeed+0xf8>
  CpuMemCopy((blt_addr)(&xcpInfo.ctoData[2]), (blt_addr)seedCurrentPtr, seedCurrentLen);
 80022ec:	b2a5      	uxth	r5, r4
 80022ee:	4e27      	ldr	r6, [pc, #156]	; (800238c <XcpCmdGetSeed+0x110>)
 80022f0:	4f23      	ldr	r7, [pc, #140]	; (8002380 <XcpCmdGetSeed+0x104>)
 80022f2:	462a      	mov	r2, r5
 80022f4:	6831      	ldr	r1, [r6, #0]
 80022f6:	1d78      	adds	r0, r7, #5
 80022f8:	f7ff fa5e 	bl	80017b8 <CpuMemCopy>
  xcpInfo.ctoData[1] = seedRemainderLen;
 80022fc:	4a22      	ldr	r2, [pc, #136]	; (8002388 <XcpCmdGetSeed+0x10c>)
 80022fe:	7813      	ldrb	r3, [r2, #0]
 8002300:	713b      	strb	r3, [r7, #4]
  seedRemainderLen -= seedCurrentLen;
 8002302:	1b1b      	subs	r3, r3, r4
 8002304:	b2db      	uxtb	r3, r3
 8002306:	7013      	strb	r3, [r2, #0]
  seedCurrentPtr += seedCurrentLen;
 8002308:	6832      	ldr	r2, [r6, #0]
 800230a:	4414      	add	r4, r2
 800230c:	6034      	str	r4, [r6, #0]
  if (seedRemainderLen == 0)
 800230e:	b913      	cbnz	r3, 8002316 <XcpCmdGetSeed+0x9a>
    sequenceInProgress = BLT_FALSE;
 8002310:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <XcpCmdGetSeed+0x108>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
  xcpInfo.ctoLen = seedCurrentLen + 2;
 8002316:	3502      	adds	r5, #2
 8002318:	4b19      	ldr	r3, [pc, #100]	; (8002380 <XcpCmdGetSeed+0x104>)
 800231a:	f8a3 5044 	strh.w	r5, [r3, #68]	; 0x44
} /*** end of XcpCmdGetSeed ***/
 800231e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      resourceOK = 1;
 8002320:	2101      	movs	r1, #1
 8002322:	e7b9      	b.n	8002298 <XcpCmdGetSeed+0x1c>
      XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8002324:	2022      	movs	r0, #34	; 0x22
 8002326:	f7ff fdf9 	bl	8001f1c <XcpSetCtoError>
      return;
 800232a:	e7f8      	b.n	800231e <XcpCmdGetSeed+0xa2>
      xcpInfo.ctoData[1] = 0;
 800232c:	4b14      	ldr	r3, [pc, #80]	; (8002380 <XcpCmdGetSeed+0x104>)
 800232e:	2200      	movs	r2, #0
 8002330:	711a      	strb	r2, [r3, #4]
      xcpInfo.ctoLen = 2;
 8002332:	2202      	movs	r2, #2
 8002334:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      return;
 8002338:	e7f1      	b.n	800231e <XcpCmdGetSeed+0xa2>
    sequenceInProgress = BLT_TRUE;
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <XcpCmdGetSeed+0x108>)
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
    seedRemainderLen = XcpGetSeed(xcpInfo.s_n_k_resource, seedBuffer);
 8002340:	4913      	ldr	r1, [pc, #76]	; (8002390 <XcpCmdGetSeed+0x114>)
 8002342:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <XcpCmdGetSeed+0x104>)
 8002344:	7898      	ldrb	r0, [r3, #2]
 8002346:	f7ff ff95 	bl	8002274 <XcpGetSeed>
 800234a:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <XcpCmdGetSeed+0x10c>)
 800234c:	7018      	strb	r0, [r3, #0]
    ASSERT_RT(seedRemainderLen <= XCP_SEED_MAX_LEN);
 800234e:	2840      	cmp	r0, #64	; 0x40
 8002350:	d803      	bhi.n	800235a <XcpCmdGetSeed+0xde>
    seedCurrentPtr = &seedBuffer[0];
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <XcpCmdGetSeed+0x110>)
 8002354:	4a0e      	ldr	r2, [pc, #56]	; (8002390 <XcpCmdGetSeed+0x114>)
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	e7c1      	b.n	80022de <XcpCmdGetSeed+0x62>
    ASSERT_RT(seedRemainderLen <= XCP_SEED_MAX_LEN);
 800235a:	f44f 7179 	mov.w	r1, #996	; 0x3e4
 800235e:	480d      	ldr	r0, [pc, #52]	; (8002394 <XcpCmdGetSeed+0x118>)
 8002360:	f7ff fd1c 	bl	8001d9c <AssertFailure>
 8002364:	e7f5      	b.n	8002352 <XcpCmdGetSeed+0xd6>
      XcpSetCtoError(XCP_ERR_SEQUENCE);
 8002366:	2029      	movs	r0, #41	; 0x29
 8002368:	f7ff fdd8 	bl	8001f1c <XcpSetCtoError>
      xcpInfo.s_n_k_resource = 0;
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <XcpCmdGetSeed+0x104>)
 800236e:	2200      	movs	r2, #0
 8002370:	709a      	strb	r2, [r3, #2]
      return;
 8002372:	e7d4      	b.n	800231e <XcpCmdGetSeed+0xa2>
    seedCurrentLen = XCP_CTO_PACKET_LEN-2;
 8002374:	f7ff fda2 	bl	8001ebc <ComGetActiveInterfaceMaxRxLen>
 8002378:	b2c4      	uxtb	r4, r0
 800237a:	3c02      	subs	r4, #2
 800237c:	b2e4      	uxtb	r4, r4
 800237e:	e7b5      	b.n	80022ec <XcpCmdGetSeed+0x70>
 8002380:	200005cc 	.word	0x200005cc
 8002384:	200005c9 	.word	0x200005c9
 8002388:	200005c8 	.word	0x200005c8
 800238c:	200005c4 	.word	0x200005c4
 8002390:	20000584 	.word	0x20000584
 8002394:	080036c8 	.word	0x080036c8

08002398 <XcpVerifyKey>:
{
 8002398:	b508      	push	{r3, lr}
  return XcpVerifyKeyHook(resource, key, len);
 800239a:	f7fe f913 	bl	80005c4 <XcpVerifyKeyHook>
} /*** end of XcpVerifyKey ***/
 800239e:	bd08      	pop	{r3, pc}

080023a0 <XcpCmdUnlock>:
{
 80023a0:	b570      	push	{r4, r5, r6, lr}
  if (data[1] > XCP_KEY_MAX_LEN)
 80023a2:	7844      	ldrb	r4, [r0, #1]
 80023a4:	2c40      	cmp	r4, #64	; 0x40
 80023a6:	d82e      	bhi.n	8002406 <XcpCmdUnlock+0x66>
 80023a8:	4605      	mov	r5, r0
  if (data[1] >= keyPreviousRemainder)
 80023aa:	4b2c      	ldr	r3, [pc, #176]	; (800245c <XcpCmdUnlock+0xbc>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	429c      	cmp	r4, r3
 80023b0:	d307      	bcc.n	80023c2 <XcpCmdUnlock+0x22>
    keyTotalLen = data[1];
 80023b2:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <XcpCmdUnlock+0xc0>)
 80023b4:	701c      	strb	r4, [r3, #0]
    keyCurrentPtr = &keyBuffer[0];
 80023b6:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <XcpCmdUnlock+0xc4>)
 80023b8:	4a2b      	ldr	r2, [pc, #172]	; (8002468 <XcpCmdUnlock+0xc8>)
 80023ba:	601a      	str	r2, [r3, #0]
    keyReceivedLen = 0;
 80023bc:	4b2b      	ldr	r3, [pc, #172]	; (800246c <XcpCmdUnlock+0xcc>)
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
  keyPreviousRemainder = data[1];
 80023c2:	4b26      	ldr	r3, [pc, #152]	; (800245c <XcpCmdUnlock+0xbc>)
 80023c4:	701c      	strb	r4, [r3, #0]
  if (keyCurrentLen > (XCP_CTO_PACKET_LEN-2))
 80023c6:	f7ff fd79 	bl	8001ebc <ComGetActiveInterfaceMaxRxLen>
 80023ca:	3801      	subs	r0, #1
 80023cc:	42a0      	cmp	r0, r4
 80023ce:	dd23      	ble.n	8002418 <XcpCmdUnlock+0x78>
  CpuMemCopy((blt_addr)keyCurrentPtr, (blt_addr)(&data[2]), keyCurrentLen);
 80023d0:	4e24      	ldr	r6, [pc, #144]	; (8002464 <XcpCmdUnlock+0xc4>)
 80023d2:	4622      	mov	r2, r4
 80023d4:	1ca9      	adds	r1, r5, #2
 80023d6:	6830      	ldr	r0, [r6, #0]
 80023d8:	f7ff f9ee 	bl	80017b8 <CpuMemCopy>
  keyCurrentPtr += keyCurrentLen;
 80023dc:	6833      	ldr	r3, [r6, #0]
 80023de:	4423      	add	r3, r4
 80023e0:	6033      	str	r3, [r6, #0]
  keyReceivedLen += keyCurrentLen;
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <XcpCmdUnlock+0xcc>)
 80023e4:	781a      	ldrb	r2, [r3, #0]
 80023e6:	4414      	add	r4, r2
 80023e8:	b2e4      	uxtb	r4, r4
 80023ea:	701c      	strb	r4, [r3, #0]
  if (keyReceivedLen >= keyTotalLen)
 80023ec:	4b1c      	ldr	r3, [pc, #112]	; (8002460 <XcpCmdUnlock+0xc0>)
 80023ee:	781a      	ldrb	r2, [r3, #0]
 80023f0:	4294      	cmp	r4, r2
 80023f2:	d217      	bcs.n	8002424 <XcpCmdUnlock+0x84>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80023f4:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <XcpCmdUnlock+0xd0>)
 80023f6:	22ff      	movs	r2, #255	; 0xff
 80023f8:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[1] = xcpInfo.protection;
 80023fa:	785a      	ldrb	r2, [r3, #1]
 80023fc:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoLen = 2;
 80023fe:	2202      	movs	r2, #2
 8002400:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdUnlock ***/
 8002404:	bd70      	pop	{r4, r5, r6, pc}
    keyPreviousRemainder = 0;
 8002406:	2400      	movs	r4, #0
 8002408:	4b14      	ldr	r3, [pc, #80]	; (800245c <XcpCmdUnlock+0xbc>)
 800240a:	701c      	strb	r4, [r3, #0]
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 800240c:	2022      	movs	r0, #34	; 0x22
 800240e:	f7ff fd85 	bl	8001f1c <XcpSetCtoError>
    xcpInfo.s_n_k_resource = 0;
 8002412:	4b17      	ldr	r3, [pc, #92]	; (8002470 <XcpCmdUnlock+0xd0>)
 8002414:	709c      	strb	r4, [r3, #2]
    return;
 8002416:	e7f5      	b.n	8002404 <XcpCmdUnlock+0x64>
    keyCurrentLen = XCP_CTO_PACKET_LEN-2;
 8002418:	f7ff fd50 	bl	8001ebc <ComGetActiveInterfaceMaxRxLen>
 800241c:	b2c4      	uxtb	r4, r0
 800241e:	3c02      	subs	r4, #2
 8002420:	b2e4      	uxtb	r4, r4
 8002422:	e7d5      	b.n	80023d0 <XcpCmdUnlock+0x30>
    keyPreviousRemainder = 0;
 8002424:	4b0d      	ldr	r3, [pc, #52]	; (800245c <XcpCmdUnlock+0xbc>)
 8002426:	2100      	movs	r1, #0
 8002428:	7019      	strb	r1, [r3, #0]
    if (XcpVerifyKey(xcpInfo.s_n_k_resource, keyBuffer, keyTotalLen) == 0)
 800242a:	490f      	ldr	r1, [pc, #60]	; (8002468 <XcpCmdUnlock+0xc8>)
 800242c:	4b10      	ldr	r3, [pc, #64]	; (8002470 <XcpCmdUnlock+0xd0>)
 800242e:	7898      	ldrb	r0, [r3, #2]
 8002430:	f7ff ffb2 	bl	8002398 <XcpVerifyKey>
 8002434:	b140      	cbz	r0, 8002448 <XcpCmdUnlock+0xa8>
    xcpInfo.protection &= ~xcpInfo.s_n_k_resource;
 8002436:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <XcpCmdUnlock+0xd0>)
 8002438:	7899      	ldrb	r1, [r3, #2]
 800243a:	785a      	ldrb	r2, [r3, #1]
 800243c:	ea22 0201 	bic.w	r2, r2, r1
 8002440:	705a      	strb	r2, [r3, #1]
    xcpInfo.s_n_k_resource = 0;
 8002442:	2200      	movs	r2, #0
 8002444:	709a      	strb	r2, [r3, #2]
 8002446:	e7d5      	b.n	80023f4 <XcpCmdUnlock+0x54>
      XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8002448:	2025      	movs	r0, #37	; 0x25
 800244a:	f7ff fd67 	bl	8001f1c <XcpSetCtoError>
      xcpInfo.connected = 0;
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <XcpCmdUnlock+0xd0>)
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
      xcpInfo.s_n_k_resource = 0;
 8002454:	709a      	strb	r2, [r3, #2]
      XcpProtectResources();
 8002456:	f7ff fd5b 	bl	8001f10 <XcpProtectResources>
      return;
 800245a:	e7d3      	b.n	8002404 <XcpCmdUnlock+0x64>
 800245c:	20000580 	.word	0x20000580
 8002460:	20000582 	.word	0x20000582
 8002464:	2000057c 	.word	0x2000057c
 8002468:	2000053c 	.word	0x2000053c
 800246c:	20000581 	.word	0x20000581
 8002470:	200005cc 	.word	0x200005cc

08002474 <XcpTransmitPacket>:
{
 8002474:	b508      	push	{r3, lr}
  ComTransmitPacket(data, len);
 8002476:	b289      	uxth	r1, r1
 8002478:	f7ff fd12 	bl	8001ea0 <ComTransmitPacket>
} /*** end of XcpTransmitPacket ***/
 800247c:	bd08      	pop	{r3, pc}
	...

08002480 <XcpInit>:
  xcpInfo.connected = 0;
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <XcpInit+0x18>)
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
  xcpInfo.mta = 0;
 8002486:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoPending = 0;
 8002488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  xcpInfo.ctoLen = 0;
 800248c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  xcpInfo.s_n_k_resource = 0;
 8002490:	709a      	strb	r2, [r3, #2]
  xcpInfo.protection = 0;
 8002492:	705a      	strb	r2, [r3, #1]
} /*** end of XcpInit ***/
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	200005cc 	.word	0x200005cc

0800249c <XcpIsConnected>:
  if (xcpInfo.connected == 0)
 800249c:	4b02      	ldr	r3, [pc, #8]	; (80024a8 <XcpIsConnected+0xc>)
 800249e:	7818      	ldrb	r0, [r3, #0]
 80024a0:	b100      	cbz	r0, 80024a4 <XcpIsConnected+0x8>
  return BLT_TRUE;
 80024a2:	2001      	movs	r0, #1
} /*** end of XcpIsConnected ***/
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	200005cc 	.word	0x200005cc

080024ac <XcpPacketTransmitted>:
  xcpInfo.ctoPending = 0;
 80024ac:	4b02      	ldr	r3, [pc, #8]	; (80024b8 <XcpPacketTransmitted+0xc>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
} /*** end of XcpPacketTransmitted ***/
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	200005cc 	.word	0x200005cc

080024bc <XcpPacketReceived>:
{
 80024bc:	b508      	push	{r3, lr}
  if (data[0] == XCP_CMD_CONNECT)
 80024be:	7803      	ldrb	r3, [r0, #0]
 80024c0:	2bff      	cmp	r3, #255	; 0xff
 80024c2:	d023      	beq.n	800250c <XcpPacketReceived+0x50>
  else if (xcpInfo.connected == 1)
 80024c4:	4a38      	ldr	r2, [pc, #224]	; (80025a8 <XcpPacketReceived+0xec>)
 80024c6:	7812      	ldrb	r2, [r2, #0]
 80024c8:	2a01      	cmp	r2, #1
 80024ca:	d12b      	bne.n	8002524 <XcpPacketReceived+0x68>
    switch (data[0])
 80024cc:	3bc9      	subs	r3, #201	; 0xc9
 80024ce:	2b35      	cmp	r3, #53	; 0x35
 80024d0:	d859      	bhi.n	8002586 <XcpPacketReceived+0xca>
 80024d2:	e8df f003 	tbb	[pc, r3]
 80024d6:	5840      	.short	0x5840
 80024d8:	58584f58 	.word	0x58584f58
 80024dc:	4649434c 	.word	0x4649434c
 80024e0:	58585858 	.word	0x58585858
 80024e4:	58585858 	.word	0x58585858
 80024e8:	58585858 	.word	0x58585858
 80024ec:	58585858 	.word	0x58585858
 80024f0:	58585858 	.word	0x58585858
 80024f4:	58585858 	.word	0x58585858
 80024f8:	58585858 	.word	0x58585858
 80024fc:	58585858 	.word	0x58585858
 8002500:	2e282b31 	.word	0x2e282b31
 8002504:	34585255 	.word	0x34585255
 8002508:	3d3a3758 	.word	0x3d3a3758
    XcpCmdConnect(data);
 800250c:	f7ff fd80 	bl	8002010 <XcpCmdConnect>
  if (xcpInfo.ctoPending == 1)
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <XcpPacketReceived+0xec>)
 8002512:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002516:	2b01      	cmp	r3, #1
 8002518:	d039      	beq.n	800258e <XcpPacketReceived+0xd2>
  if (xcpInfo.ctoLen > 0)
 800251a:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <XcpPacketReceived+0xec>)
 800251c:	f9b3 1044 	ldrsh.w	r1, [r3, #68]	; 0x44
 8002520:	2900      	cmp	r1, #0
 8002522:	dc38      	bgt.n	8002596 <XcpPacketReceived+0xda>
} /*** end of XcpPacketReceived ***/
 8002524:	bd08      	pop	{r3, pc}
        XcpCmdUpload(data);
 8002526:	f7ff fd95 	bl	8002054 <XcpCmdUpload>
        break;
 800252a:	e7f1      	b.n	8002510 <XcpPacketReceived+0x54>
        XcpCmdShortUpload(data);
 800252c:	f7ff fdbc 	bl	80020a8 <XcpCmdShortUpload>
        break;
 8002530:	e7ee      	b.n	8002510 <XcpPacketReceived+0x54>
        XcpCmdSetMta(data);
 8002532:	f7ff fd35 	bl	8001fa0 <XcpCmdSetMta>
        break;
 8002536:	e7eb      	b.n	8002510 <XcpPacketReceived+0x54>
        XcpCmdBuildCheckSum(data);
 8002538:	f7ff fdf4 	bl	8002124 <XcpCmdBuildCheckSum>
        break;
 800253c:	e7e8      	b.n	8002510 <XcpPacketReceived+0x54>
        XcpCmdGetId(data);
 800253e:	f7ff fd1b 	bl	8001f78 <XcpCmdGetId>
        break;
 8002542:	e7e5      	b.n	8002510 <XcpPacketReceived+0x54>
        XcpCmdSynch(data);
 8002544:	f7ff fd12 	bl	8001f6c <XcpCmdSynch>
        break;
 8002548:	e7e2      	b.n	8002510 <XcpPacketReceived+0x54>
        XcpCmdGetStatus(data);
 800254a:	f7ff fcff 	bl	8001f4c <XcpCmdGetStatus>
        break;
 800254e:	e7df      	b.n	8002510 <XcpPacketReceived+0x54>
        XcpCmdDisconnect(data);
 8002550:	f7ff fcee 	bl	8001f30 <XcpCmdDisconnect>
        break;
 8002554:	e7dc      	b.n	8002510 <XcpPacketReceived+0x54>
        XcpCmdProgramMax(data);
 8002556:	f7ff fdf9 	bl	800214c <XcpCmdProgramMax>
        break;
 800255a:	e7d9      	b.n	8002510 <XcpPacketReceived+0x54>
        XcpCmdProgram(data);
 800255c:	f7ff fe1e 	bl	800219c <XcpCmdProgram>
        break;
 8002560:	e7d6      	b.n	8002510 <XcpPacketReceived+0x54>
        XcpCmdProgramStart(data);
 8002562:	f7ff fd39 	bl	8001fd8 <XcpCmdProgramStart>
        break;
 8002566:	e7d3      	b.n	8002510 <XcpPacketReceived+0x54>
        XcpCmdProgramClear(data);
 8002568:	f7ff fe50 	bl	800220c <XcpCmdProgramClear>
        break;
 800256c:	e7d0      	b.n	8002510 <XcpPacketReceived+0x54>
        XcpCmdProgramReset(data);
 800256e:	f7ff fe6b 	bl	8002248 <XcpCmdProgramReset>
        break;
 8002572:	e7cd      	b.n	8002510 <XcpPacketReceived+0x54>
        XcpCmdProgramPrepare(data);
 8002574:	f7ff fd20 	bl	8001fb8 <XcpCmdProgramPrepare>
        break;
 8002578:	e7ca      	b.n	8002510 <XcpPacketReceived+0x54>
        XcpCmdGetSeed(data);
 800257a:	f7ff fe7f 	bl	800227c <XcpCmdGetSeed>
        break;
 800257e:	e7c7      	b.n	8002510 <XcpPacketReceived+0x54>
        XcpCmdUnlock(data);
 8002580:	f7ff ff0e 	bl	80023a0 <XcpCmdUnlock>
        break;
 8002584:	e7c4      	b.n	8002510 <XcpPacketReceived+0x54>
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 8002586:	2020      	movs	r0, #32
 8002588:	f7ff fcc8 	bl	8001f1c <XcpSetCtoError>
        break;
 800258c:	e7c0      	b.n	8002510 <XcpPacketReceived+0x54>
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 800258e:	2010      	movs	r0, #16
 8002590:	f7ff fcc4 	bl	8001f1c <XcpSetCtoError>
 8002594:	e7c1      	b.n	800251a <XcpPacketReceived+0x5e>
    xcpInfo.ctoPending = 1;
 8002596:	4618      	mov	r0, r3
 8002598:	2301      	movs	r3, #1
 800259a:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
    XcpTransmitPacket(xcpInfo.ctoData, xcpInfo.ctoLen);
 800259e:	3003      	adds	r0, #3
 80025a0:	f7ff ff68 	bl	8002474 <XcpTransmitPacket>
 80025a4:	e7be      	b.n	8002524 <XcpPacketReceived+0x68>
 80025a6:	bf00      	nop
 80025a8:	200005cc 	.word	0x200005cc

080025ac <__errno>:
 80025ac:	4b01      	ldr	r3, [pc, #4]	; (80025b4 <__errno+0x8>)
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000010 	.word	0x20000010

080025b8 <__libc_init_array>:
 80025b8:	b570      	push	{r4, r5, r6, lr}
 80025ba:	4d0d      	ldr	r5, [pc, #52]	; (80025f0 <__libc_init_array+0x38>)
 80025bc:	4c0d      	ldr	r4, [pc, #52]	; (80025f4 <__libc_init_array+0x3c>)
 80025be:	1b64      	subs	r4, r4, r5
 80025c0:	10a4      	asrs	r4, r4, #2
 80025c2:	2600      	movs	r6, #0
 80025c4:	42a6      	cmp	r6, r4
 80025c6:	d109      	bne.n	80025dc <__libc_init_array+0x24>
 80025c8:	4d0b      	ldr	r5, [pc, #44]	; (80025f8 <__libc_init_array+0x40>)
 80025ca:	4c0c      	ldr	r4, [pc, #48]	; (80025fc <__libc_init_array+0x44>)
 80025cc:	f000 ffec 	bl	80035a8 <_init>
 80025d0:	1b64      	subs	r4, r4, r5
 80025d2:	10a4      	asrs	r4, r4, #2
 80025d4:	2600      	movs	r6, #0
 80025d6:	42a6      	cmp	r6, r4
 80025d8:	d105      	bne.n	80025e6 <__libc_init_array+0x2e>
 80025da:	bd70      	pop	{r4, r5, r6, pc}
 80025dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80025e0:	4798      	blx	r3
 80025e2:	3601      	adds	r6, #1
 80025e4:	e7ee      	b.n	80025c4 <__libc_init_array+0xc>
 80025e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ea:	4798      	blx	r3
 80025ec:	3601      	adds	r6, #1
 80025ee:	e7f2      	b.n	80025d6 <__libc_init_array+0x1e>
 80025f0:	0800379c 	.word	0x0800379c
 80025f4:	0800379c 	.word	0x0800379c
 80025f8:	0800379c 	.word	0x0800379c
 80025fc:	080037a0 	.word	0x080037a0

08002600 <memset>:
 8002600:	4402      	add	r2, r0
 8002602:	4603      	mov	r3, r0
 8002604:	4293      	cmp	r3, r2
 8002606:	d100      	bne.n	800260a <memset+0xa>
 8002608:	4770      	bx	lr
 800260a:	f803 1b01 	strb.w	r1, [r3], #1
 800260e:	e7f9      	b.n	8002604 <memset+0x4>

08002610 <iprintf>:
 8002610:	b40f      	push	{r0, r1, r2, r3}
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <iprintf+0x2c>)
 8002614:	b513      	push	{r0, r1, r4, lr}
 8002616:	681c      	ldr	r4, [r3, #0]
 8002618:	b124      	cbz	r4, 8002624 <iprintf+0x14>
 800261a:	69a3      	ldr	r3, [r4, #24]
 800261c:	b913      	cbnz	r3, 8002624 <iprintf+0x14>
 800261e:	4620      	mov	r0, r4
 8002620:	f000 fa5e 	bl	8002ae0 <__sinit>
 8002624:	ab05      	add	r3, sp, #20
 8002626:	9a04      	ldr	r2, [sp, #16]
 8002628:	68a1      	ldr	r1, [r4, #8]
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	4620      	mov	r0, r4
 800262e:	f000 fc2f 	bl	8002e90 <_vfiprintf_r>
 8002632:	b002      	add	sp, #8
 8002634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002638:	b004      	add	sp, #16
 800263a:	4770      	bx	lr
 800263c:	20000010 	.word	0x20000010

08002640 <_puts_r>:
 8002640:	b570      	push	{r4, r5, r6, lr}
 8002642:	460e      	mov	r6, r1
 8002644:	4605      	mov	r5, r0
 8002646:	b118      	cbz	r0, 8002650 <_puts_r+0x10>
 8002648:	6983      	ldr	r3, [r0, #24]
 800264a:	b90b      	cbnz	r3, 8002650 <_puts_r+0x10>
 800264c:	f000 fa48 	bl	8002ae0 <__sinit>
 8002650:	69ab      	ldr	r3, [r5, #24]
 8002652:	68ac      	ldr	r4, [r5, #8]
 8002654:	b913      	cbnz	r3, 800265c <_puts_r+0x1c>
 8002656:	4628      	mov	r0, r5
 8002658:	f000 fa42 	bl	8002ae0 <__sinit>
 800265c:	4b2c      	ldr	r3, [pc, #176]	; (8002710 <_puts_r+0xd0>)
 800265e:	429c      	cmp	r4, r3
 8002660:	d120      	bne.n	80026a4 <_puts_r+0x64>
 8002662:	686c      	ldr	r4, [r5, #4]
 8002664:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002666:	07db      	lsls	r3, r3, #31
 8002668:	d405      	bmi.n	8002676 <_puts_r+0x36>
 800266a:	89a3      	ldrh	r3, [r4, #12]
 800266c:	0598      	lsls	r0, r3, #22
 800266e:	d402      	bmi.n	8002676 <_puts_r+0x36>
 8002670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002672:	f000 fad3 	bl	8002c1c <__retarget_lock_acquire_recursive>
 8002676:	89a3      	ldrh	r3, [r4, #12]
 8002678:	0719      	lsls	r1, r3, #28
 800267a:	d51d      	bpl.n	80026b8 <_puts_r+0x78>
 800267c:	6923      	ldr	r3, [r4, #16]
 800267e:	b1db      	cbz	r3, 80026b8 <_puts_r+0x78>
 8002680:	3e01      	subs	r6, #1
 8002682:	68a3      	ldr	r3, [r4, #8]
 8002684:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002688:	3b01      	subs	r3, #1
 800268a:	60a3      	str	r3, [r4, #8]
 800268c:	bb39      	cbnz	r1, 80026de <_puts_r+0x9e>
 800268e:	2b00      	cmp	r3, #0
 8002690:	da38      	bge.n	8002704 <_puts_r+0xc4>
 8002692:	4622      	mov	r2, r4
 8002694:	210a      	movs	r1, #10
 8002696:	4628      	mov	r0, r5
 8002698:	f000 f848 	bl	800272c <__swbuf_r>
 800269c:	3001      	adds	r0, #1
 800269e:	d011      	beq.n	80026c4 <_puts_r+0x84>
 80026a0:	250a      	movs	r5, #10
 80026a2:	e011      	b.n	80026c8 <_puts_r+0x88>
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <_puts_r+0xd4>)
 80026a6:	429c      	cmp	r4, r3
 80026a8:	d101      	bne.n	80026ae <_puts_r+0x6e>
 80026aa:	68ac      	ldr	r4, [r5, #8]
 80026ac:	e7da      	b.n	8002664 <_puts_r+0x24>
 80026ae:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <_puts_r+0xd8>)
 80026b0:	429c      	cmp	r4, r3
 80026b2:	bf08      	it	eq
 80026b4:	68ec      	ldreq	r4, [r5, #12]
 80026b6:	e7d5      	b.n	8002664 <_puts_r+0x24>
 80026b8:	4621      	mov	r1, r4
 80026ba:	4628      	mov	r0, r5
 80026bc:	f000 f888 	bl	80027d0 <__swsetup_r>
 80026c0:	2800      	cmp	r0, #0
 80026c2:	d0dd      	beq.n	8002680 <_puts_r+0x40>
 80026c4:	f04f 35ff 	mov.w	r5, #4294967295
 80026c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026ca:	07da      	lsls	r2, r3, #31
 80026cc:	d405      	bmi.n	80026da <_puts_r+0x9a>
 80026ce:	89a3      	ldrh	r3, [r4, #12]
 80026d0:	059b      	lsls	r3, r3, #22
 80026d2:	d402      	bmi.n	80026da <_puts_r+0x9a>
 80026d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026d6:	f000 faa2 	bl	8002c1e <__retarget_lock_release_recursive>
 80026da:	4628      	mov	r0, r5
 80026dc:	bd70      	pop	{r4, r5, r6, pc}
 80026de:	2b00      	cmp	r3, #0
 80026e0:	da04      	bge.n	80026ec <_puts_r+0xac>
 80026e2:	69a2      	ldr	r2, [r4, #24]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	dc06      	bgt.n	80026f6 <_puts_r+0xb6>
 80026e8:	290a      	cmp	r1, #10
 80026ea:	d004      	beq.n	80026f6 <_puts_r+0xb6>
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	6022      	str	r2, [r4, #0]
 80026f2:	7019      	strb	r1, [r3, #0]
 80026f4:	e7c5      	b.n	8002682 <_puts_r+0x42>
 80026f6:	4622      	mov	r2, r4
 80026f8:	4628      	mov	r0, r5
 80026fa:	f000 f817 	bl	800272c <__swbuf_r>
 80026fe:	3001      	adds	r0, #1
 8002700:	d1bf      	bne.n	8002682 <_puts_r+0x42>
 8002702:	e7df      	b.n	80026c4 <_puts_r+0x84>
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	250a      	movs	r5, #10
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	6022      	str	r2, [r4, #0]
 800270c:	701d      	strb	r5, [r3, #0]
 800270e:	e7db      	b.n	80026c8 <_puts_r+0x88>
 8002710:	08003720 	.word	0x08003720
 8002714:	08003740 	.word	0x08003740
 8002718:	08003700 	.word	0x08003700

0800271c <puts>:
 800271c:	4b02      	ldr	r3, [pc, #8]	; (8002728 <puts+0xc>)
 800271e:	4601      	mov	r1, r0
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	f7ff bf8d 	b.w	8002640 <_puts_r>
 8002726:	bf00      	nop
 8002728:	20000010 	.word	0x20000010

0800272c <__swbuf_r>:
 800272c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272e:	460e      	mov	r6, r1
 8002730:	4614      	mov	r4, r2
 8002732:	4605      	mov	r5, r0
 8002734:	b118      	cbz	r0, 800273e <__swbuf_r+0x12>
 8002736:	6983      	ldr	r3, [r0, #24]
 8002738:	b90b      	cbnz	r3, 800273e <__swbuf_r+0x12>
 800273a:	f000 f9d1 	bl	8002ae0 <__sinit>
 800273e:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <__swbuf_r+0x98>)
 8002740:	429c      	cmp	r4, r3
 8002742:	d12b      	bne.n	800279c <__swbuf_r+0x70>
 8002744:	686c      	ldr	r4, [r5, #4]
 8002746:	69a3      	ldr	r3, [r4, #24]
 8002748:	60a3      	str	r3, [r4, #8]
 800274a:	89a3      	ldrh	r3, [r4, #12]
 800274c:	071a      	lsls	r2, r3, #28
 800274e:	d52f      	bpl.n	80027b0 <__swbuf_r+0x84>
 8002750:	6923      	ldr	r3, [r4, #16]
 8002752:	b36b      	cbz	r3, 80027b0 <__swbuf_r+0x84>
 8002754:	6923      	ldr	r3, [r4, #16]
 8002756:	6820      	ldr	r0, [r4, #0]
 8002758:	1ac0      	subs	r0, r0, r3
 800275a:	6963      	ldr	r3, [r4, #20]
 800275c:	b2f6      	uxtb	r6, r6
 800275e:	4283      	cmp	r3, r0
 8002760:	4637      	mov	r7, r6
 8002762:	dc04      	bgt.n	800276e <__swbuf_r+0x42>
 8002764:	4621      	mov	r1, r4
 8002766:	4628      	mov	r0, r5
 8002768:	f000 f926 	bl	80029b8 <_fflush_r>
 800276c:	bb30      	cbnz	r0, 80027bc <__swbuf_r+0x90>
 800276e:	68a3      	ldr	r3, [r4, #8]
 8002770:	3b01      	subs	r3, #1
 8002772:	60a3      	str	r3, [r4, #8]
 8002774:	6823      	ldr	r3, [r4, #0]
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	6022      	str	r2, [r4, #0]
 800277a:	701e      	strb	r6, [r3, #0]
 800277c:	6963      	ldr	r3, [r4, #20]
 800277e:	3001      	adds	r0, #1
 8002780:	4283      	cmp	r3, r0
 8002782:	d004      	beq.n	800278e <__swbuf_r+0x62>
 8002784:	89a3      	ldrh	r3, [r4, #12]
 8002786:	07db      	lsls	r3, r3, #31
 8002788:	d506      	bpl.n	8002798 <__swbuf_r+0x6c>
 800278a:	2e0a      	cmp	r6, #10
 800278c:	d104      	bne.n	8002798 <__swbuf_r+0x6c>
 800278e:	4621      	mov	r1, r4
 8002790:	4628      	mov	r0, r5
 8002792:	f000 f911 	bl	80029b8 <_fflush_r>
 8002796:	b988      	cbnz	r0, 80027bc <__swbuf_r+0x90>
 8002798:	4638      	mov	r0, r7
 800279a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800279c:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <__swbuf_r+0x9c>)
 800279e:	429c      	cmp	r4, r3
 80027a0:	d101      	bne.n	80027a6 <__swbuf_r+0x7a>
 80027a2:	68ac      	ldr	r4, [r5, #8]
 80027a4:	e7cf      	b.n	8002746 <__swbuf_r+0x1a>
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <__swbuf_r+0xa0>)
 80027a8:	429c      	cmp	r4, r3
 80027aa:	bf08      	it	eq
 80027ac:	68ec      	ldreq	r4, [r5, #12]
 80027ae:	e7ca      	b.n	8002746 <__swbuf_r+0x1a>
 80027b0:	4621      	mov	r1, r4
 80027b2:	4628      	mov	r0, r5
 80027b4:	f000 f80c 	bl	80027d0 <__swsetup_r>
 80027b8:	2800      	cmp	r0, #0
 80027ba:	d0cb      	beq.n	8002754 <__swbuf_r+0x28>
 80027bc:	f04f 37ff 	mov.w	r7, #4294967295
 80027c0:	e7ea      	b.n	8002798 <__swbuf_r+0x6c>
 80027c2:	bf00      	nop
 80027c4:	08003720 	.word	0x08003720
 80027c8:	08003740 	.word	0x08003740
 80027cc:	08003700 	.word	0x08003700

080027d0 <__swsetup_r>:
 80027d0:	4b32      	ldr	r3, [pc, #200]	; (800289c <__swsetup_r+0xcc>)
 80027d2:	b570      	push	{r4, r5, r6, lr}
 80027d4:	681d      	ldr	r5, [r3, #0]
 80027d6:	4606      	mov	r6, r0
 80027d8:	460c      	mov	r4, r1
 80027da:	b125      	cbz	r5, 80027e6 <__swsetup_r+0x16>
 80027dc:	69ab      	ldr	r3, [r5, #24]
 80027de:	b913      	cbnz	r3, 80027e6 <__swsetup_r+0x16>
 80027e0:	4628      	mov	r0, r5
 80027e2:	f000 f97d 	bl	8002ae0 <__sinit>
 80027e6:	4b2e      	ldr	r3, [pc, #184]	; (80028a0 <__swsetup_r+0xd0>)
 80027e8:	429c      	cmp	r4, r3
 80027ea:	d10f      	bne.n	800280c <__swsetup_r+0x3c>
 80027ec:	686c      	ldr	r4, [r5, #4]
 80027ee:	89a3      	ldrh	r3, [r4, #12]
 80027f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80027f4:	0719      	lsls	r1, r3, #28
 80027f6:	d42c      	bmi.n	8002852 <__swsetup_r+0x82>
 80027f8:	06dd      	lsls	r5, r3, #27
 80027fa:	d411      	bmi.n	8002820 <__swsetup_r+0x50>
 80027fc:	2309      	movs	r3, #9
 80027fe:	6033      	str	r3, [r6, #0]
 8002800:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002804:	81a3      	strh	r3, [r4, #12]
 8002806:	f04f 30ff 	mov.w	r0, #4294967295
 800280a:	e03e      	b.n	800288a <__swsetup_r+0xba>
 800280c:	4b25      	ldr	r3, [pc, #148]	; (80028a4 <__swsetup_r+0xd4>)
 800280e:	429c      	cmp	r4, r3
 8002810:	d101      	bne.n	8002816 <__swsetup_r+0x46>
 8002812:	68ac      	ldr	r4, [r5, #8]
 8002814:	e7eb      	b.n	80027ee <__swsetup_r+0x1e>
 8002816:	4b24      	ldr	r3, [pc, #144]	; (80028a8 <__swsetup_r+0xd8>)
 8002818:	429c      	cmp	r4, r3
 800281a:	bf08      	it	eq
 800281c:	68ec      	ldreq	r4, [r5, #12]
 800281e:	e7e6      	b.n	80027ee <__swsetup_r+0x1e>
 8002820:	0758      	lsls	r0, r3, #29
 8002822:	d512      	bpl.n	800284a <__swsetup_r+0x7a>
 8002824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002826:	b141      	cbz	r1, 800283a <__swsetup_r+0x6a>
 8002828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800282c:	4299      	cmp	r1, r3
 800282e:	d002      	beq.n	8002836 <__swsetup_r+0x66>
 8002830:	4630      	mov	r0, r6
 8002832:	f000 fa59 	bl	8002ce8 <_free_r>
 8002836:	2300      	movs	r3, #0
 8002838:	6363      	str	r3, [r4, #52]	; 0x34
 800283a:	89a3      	ldrh	r3, [r4, #12]
 800283c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002840:	81a3      	strh	r3, [r4, #12]
 8002842:	2300      	movs	r3, #0
 8002844:	6063      	str	r3, [r4, #4]
 8002846:	6923      	ldr	r3, [r4, #16]
 8002848:	6023      	str	r3, [r4, #0]
 800284a:	89a3      	ldrh	r3, [r4, #12]
 800284c:	f043 0308 	orr.w	r3, r3, #8
 8002850:	81a3      	strh	r3, [r4, #12]
 8002852:	6923      	ldr	r3, [r4, #16]
 8002854:	b94b      	cbnz	r3, 800286a <__swsetup_r+0x9a>
 8002856:	89a3      	ldrh	r3, [r4, #12]
 8002858:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800285c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002860:	d003      	beq.n	800286a <__swsetup_r+0x9a>
 8002862:	4621      	mov	r1, r4
 8002864:	4630      	mov	r0, r6
 8002866:	f000 f9ff 	bl	8002c68 <__smakebuf_r>
 800286a:	89a0      	ldrh	r0, [r4, #12]
 800286c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002870:	f010 0301 	ands.w	r3, r0, #1
 8002874:	d00a      	beq.n	800288c <__swsetup_r+0xbc>
 8002876:	2300      	movs	r3, #0
 8002878:	60a3      	str	r3, [r4, #8]
 800287a:	6963      	ldr	r3, [r4, #20]
 800287c:	425b      	negs	r3, r3
 800287e:	61a3      	str	r3, [r4, #24]
 8002880:	6923      	ldr	r3, [r4, #16]
 8002882:	b943      	cbnz	r3, 8002896 <__swsetup_r+0xc6>
 8002884:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002888:	d1ba      	bne.n	8002800 <__swsetup_r+0x30>
 800288a:	bd70      	pop	{r4, r5, r6, pc}
 800288c:	0781      	lsls	r1, r0, #30
 800288e:	bf58      	it	pl
 8002890:	6963      	ldrpl	r3, [r4, #20]
 8002892:	60a3      	str	r3, [r4, #8]
 8002894:	e7f4      	b.n	8002880 <__swsetup_r+0xb0>
 8002896:	2000      	movs	r0, #0
 8002898:	e7f7      	b.n	800288a <__swsetup_r+0xba>
 800289a:	bf00      	nop
 800289c:	20000010 	.word	0x20000010
 80028a0:	08003720 	.word	0x08003720
 80028a4:	08003740 	.word	0x08003740
 80028a8:	08003700 	.word	0x08003700

080028ac <__sflush_r>:
 80028ac:	898a      	ldrh	r2, [r1, #12]
 80028ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028b2:	4605      	mov	r5, r0
 80028b4:	0710      	lsls	r0, r2, #28
 80028b6:	460c      	mov	r4, r1
 80028b8:	d458      	bmi.n	800296c <__sflush_r+0xc0>
 80028ba:	684b      	ldr	r3, [r1, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	dc05      	bgt.n	80028cc <__sflush_r+0x20>
 80028c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	dc02      	bgt.n	80028cc <__sflush_r+0x20>
 80028c6:	2000      	movs	r0, #0
 80028c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028ce:	2e00      	cmp	r6, #0
 80028d0:	d0f9      	beq.n	80028c6 <__sflush_r+0x1a>
 80028d2:	2300      	movs	r3, #0
 80028d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80028d8:	682f      	ldr	r7, [r5, #0]
 80028da:	602b      	str	r3, [r5, #0]
 80028dc:	d032      	beq.n	8002944 <__sflush_r+0x98>
 80028de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80028e0:	89a3      	ldrh	r3, [r4, #12]
 80028e2:	075a      	lsls	r2, r3, #29
 80028e4:	d505      	bpl.n	80028f2 <__sflush_r+0x46>
 80028e6:	6863      	ldr	r3, [r4, #4]
 80028e8:	1ac0      	subs	r0, r0, r3
 80028ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80028ec:	b10b      	cbz	r3, 80028f2 <__sflush_r+0x46>
 80028ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028f0:	1ac0      	subs	r0, r0, r3
 80028f2:	2300      	movs	r3, #0
 80028f4:	4602      	mov	r2, r0
 80028f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028f8:	6a21      	ldr	r1, [r4, #32]
 80028fa:	4628      	mov	r0, r5
 80028fc:	47b0      	blx	r6
 80028fe:	1c43      	adds	r3, r0, #1
 8002900:	89a3      	ldrh	r3, [r4, #12]
 8002902:	d106      	bne.n	8002912 <__sflush_r+0x66>
 8002904:	6829      	ldr	r1, [r5, #0]
 8002906:	291d      	cmp	r1, #29
 8002908:	d82c      	bhi.n	8002964 <__sflush_r+0xb8>
 800290a:	4a2a      	ldr	r2, [pc, #168]	; (80029b4 <__sflush_r+0x108>)
 800290c:	40ca      	lsrs	r2, r1
 800290e:	07d6      	lsls	r6, r2, #31
 8002910:	d528      	bpl.n	8002964 <__sflush_r+0xb8>
 8002912:	2200      	movs	r2, #0
 8002914:	6062      	str	r2, [r4, #4]
 8002916:	04d9      	lsls	r1, r3, #19
 8002918:	6922      	ldr	r2, [r4, #16]
 800291a:	6022      	str	r2, [r4, #0]
 800291c:	d504      	bpl.n	8002928 <__sflush_r+0x7c>
 800291e:	1c42      	adds	r2, r0, #1
 8002920:	d101      	bne.n	8002926 <__sflush_r+0x7a>
 8002922:	682b      	ldr	r3, [r5, #0]
 8002924:	b903      	cbnz	r3, 8002928 <__sflush_r+0x7c>
 8002926:	6560      	str	r0, [r4, #84]	; 0x54
 8002928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800292a:	602f      	str	r7, [r5, #0]
 800292c:	2900      	cmp	r1, #0
 800292e:	d0ca      	beq.n	80028c6 <__sflush_r+0x1a>
 8002930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002934:	4299      	cmp	r1, r3
 8002936:	d002      	beq.n	800293e <__sflush_r+0x92>
 8002938:	4628      	mov	r0, r5
 800293a:	f000 f9d5 	bl	8002ce8 <_free_r>
 800293e:	2000      	movs	r0, #0
 8002940:	6360      	str	r0, [r4, #52]	; 0x34
 8002942:	e7c1      	b.n	80028c8 <__sflush_r+0x1c>
 8002944:	6a21      	ldr	r1, [r4, #32]
 8002946:	2301      	movs	r3, #1
 8002948:	4628      	mov	r0, r5
 800294a:	47b0      	blx	r6
 800294c:	1c41      	adds	r1, r0, #1
 800294e:	d1c7      	bne.n	80028e0 <__sflush_r+0x34>
 8002950:	682b      	ldr	r3, [r5, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0c4      	beq.n	80028e0 <__sflush_r+0x34>
 8002956:	2b1d      	cmp	r3, #29
 8002958:	d001      	beq.n	800295e <__sflush_r+0xb2>
 800295a:	2b16      	cmp	r3, #22
 800295c:	d101      	bne.n	8002962 <__sflush_r+0xb6>
 800295e:	602f      	str	r7, [r5, #0]
 8002960:	e7b1      	b.n	80028c6 <__sflush_r+0x1a>
 8002962:	89a3      	ldrh	r3, [r4, #12]
 8002964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002968:	81a3      	strh	r3, [r4, #12]
 800296a:	e7ad      	b.n	80028c8 <__sflush_r+0x1c>
 800296c:	690f      	ldr	r7, [r1, #16]
 800296e:	2f00      	cmp	r7, #0
 8002970:	d0a9      	beq.n	80028c6 <__sflush_r+0x1a>
 8002972:	0793      	lsls	r3, r2, #30
 8002974:	680e      	ldr	r6, [r1, #0]
 8002976:	bf08      	it	eq
 8002978:	694b      	ldreq	r3, [r1, #20]
 800297a:	600f      	str	r7, [r1, #0]
 800297c:	bf18      	it	ne
 800297e:	2300      	movne	r3, #0
 8002980:	eba6 0807 	sub.w	r8, r6, r7
 8002984:	608b      	str	r3, [r1, #8]
 8002986:	f1b8 0f00 	cmp.w	r8, #0
 800298a:	dd9c      	ble.n	80028c6 <__sflush_r+0x1a>
 800298c:	6a21      	ldr	r1, [r4, #32]
 800298e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002990:	4643      	mov	r3, r8
 8002992:	463a      	mov	r2, r7
 8002994:	4628      	mov	r0, r5
 8002996:	47b0      	blx	r6
 8002998:	2800      	cmp	r0, #0
 800299a:	dc06      	bgt.n	80029aa <__sflush_r+0xfe>
 800299c:	89a3      	ldrh	r3, [r4, #12]
 800299e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029a2:	81a3      	strh	r3, [r4, #12]
 80029a4:	f04f 30ff 	mov.w	r0, #4294967295
 80029a8:	e78e      	b.n	80028c8 <__sflush_r+0x1c>
 80029aa:	4407      	add	r7, r0
 80029ac:	eba8 0800 	sub.w	r8, r8, r0
 80029b0:	e7e9      	b.n	8002986 <__sflush_r+0xda>
 80029b2:	bf00      	nop
 80029b4:	20400001 	.word	0x20400001

080029b8 <_fflush_r>:
 80029b8:	b538      	push	{r3, r4, r5, lr}
 80029ba:	690b      	ldr	r3, [r1, #16]
 80029bc:	4605      	mov	r5, r0
 80029be:	460c      	mov	r4, r1
 80029c0:	b913      	cbnz	r3, 80029c8 <_fflush_r+0x10>
 80029c2:	2500      	movs	r5, #0
 80029c4:	4628      	mov	r0, r5
 80029c6:	bd38      	pop	{r3, r4, r5, pc}
 80029c8:	b118      	cbz	r0, 80029d2 <_fflush_r+0x1a>
 80029ca:	6983      	ldr	r3, [r0, #24]
 80029cc:	b90b      	cbnz	r3, 80029d2 <_fflush_r+0x1a>
 80029ce:	f000 f887 	bl	8002ae0 <__sinit>
 80029d2:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <_fflush_r+0x6c>)
 80029d4:	429c      	cmp	r4, r3
 80029d6:	d11b      	bne.n	8002a10 <_fflush_r+0x58>
 80029d8:	686c      	ldr	r4, [r5, #4]
 80029da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ef      	beq.n	80029c2 <_fflush_r+0xa>
 80029e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80029e4:	07d0      	lsls	r0, r2, #31
 80029e6:	d404      	bmi.n	80029f2 <_fflush_r+0x3a>
 80029e8:	0599      	lsls	r1, r3, #22
 80029ea:	d402      	bmi.n	80029f2 <_fflush_r+0x3a>
 80029ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029ee:	f000 f915 	bl	8002c1c <__retarget_lock_acquire_recursive>
 80029f2:	4628      	mov	r0, r5
 80029f4:	4621      	mov	r1, r4
 80029f6:	f7ff ff59 	bl	80028ac <__sflush_r>
 80029fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029fc:	07da      	lsls	r2, r3, #31
 80029fe:	4605      	mov	r5, r0
 8002a00:	d4e0      	bmi.n	80029c4 <_fflush_r+0xc>
 8002a02:	89a3      	ldrh	r3, [r4, #12]
 8002a04:	059b      	lsls	r3, r3, #22
 8002a06:	d4dd      	bmi.n	80029c4 <_fflush_r+0xc>
 8002a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a0a:	f000 f908 	bl	8002c1e <__retarget_lock_release_recursive>
 8002a0e:	e7d9      	b.n	80029c4 <_fflush_r+0xc>
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <_fflush_r+0x70>)
 8002a12:	429c      	cmp	r4, r3
 8002a14:	d101      	bne.n	8002a1a <_fflush_r+0x62>
 8002a16:	68ac      	ldr	r4, [r5, #8]
 8002a18:	e7df      	b.n	80029da <_fflush_r+0x22>
 8002a1a:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <_fflush_r+0x74>)
 8002a1c:	429c      	cmp	r4, r3
 8002a1e:	bf08      	it	eq
 8002a20:	68ec      	ldreq	r4, [r5, #12]
 8002a22:	e7da      	b.n	80029da <_fflush_r+0x22>
 8002a24:	08003720 	.word	0x08003720
 8002a28:	08003740 	.word	0x08003740
 8002a2c:	08003700 	.word	0x08003700

08002a30 <std>:
 8002a30:	2300      	movs	r3, #0
 8002a32:	b510      	push	{r4, lr}
 8002a34:	4604      	mov	r4, r0
 8002a36:	e9c0 3300 	strd	r3, r3, [r0]
 8002a3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a3e:	6083      	str	r3, [r0, #8]
 8002a40:	8181      	strh	r1, [r0, #12]
 8002a42:	6643      	str	r3, [r0, #100]	; 0x64
 8002a44:	81c2      	strh	r2, [r0, #14]
 8002a46:	6183      	str	r3, [r0, #24]
 8002a48:	4619      	mov	r1, r3
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	305c      	adds	r0, #92	; 0x5c
 8002a4e:	f7ff fdd7 	bl	8002600 <memset>
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <std+0x38>)
 8002a54:	6263      	str	r3, [r4, #36]	; 0x24
 8002a56:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <std+0x3c>)
 8002a58:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a5a:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <std+0x40>)
 8002a5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a5e:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <std+0x44>)
 8002a60:	6224      	str	r4, [r4, #32]
 8002a62:	6323      	str	r3, [r4, #48]	; 0x30
 8002a64:	bd10      	pop	{r4, pc}
 8002a66:	bf00      	nop
 8002a68:	08003439 	.word	0x08003439
 8002a6c:	0800345b 	.word	0x0800345b
 8002a70:	08003493 	.word	0x08003493
 8002a74:	080034b7 	.word	0x080034b7

08002a78 <_cleanup_r>:
 8002a78:	4901      	ldr	r1, [pc, #4]	; (8002a80 <_cleanup_r+0x8>)
 8002a7a:	f000 b8af 	b.w	8002bdc <_fwalk_reent>
 8002a7e:	bf00      	nop
 8002a80:	080029b9 	.word	0x080029b9

08002a84 <__sfmoreglue>:
 8002a84:	b570      	push	{r4, r5, r6, lr}
 8002a86:	1e4a      	subs	r2, r1, #1
 8002a88:	2568      	movs	r5, #104	; 0x68
 8002a8a:	4355      	muls	r5, r2
 8002a8c:	460e      	mov	r6, r1
 8002a8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002a92:	f000 f979 	bl	8002d88 <_malloc_r>
 8002a96:	4604      	mov	r4, r0
 8002a98:	b140      	cbz	r0, 8002aac <__sfmoreglue+0x28>
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	e9c0 1600 	strd	r1, r6, [r0]
 8002aa0:	300c      	adds	r0, #12
 8002aa2:	60a0      	str	r0, [r4, #8]
 8002aa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002aa8:	f7ff fdaa 	bl	8002600 <memset>
 8002aac:	4620      	mov	r0, r4
 8002aae:	bd70      	pop	{r4, r5, r6, pc}

08002ab0 <__sfp_lock_acquire>:
 8002ab0:	4801      	ldr	r0, [pc, #4]	; (8002ab8 <__sfp_lock_acquire+0x8>)
 8002ab2:	f000 b8b3 	b.w	8002c1c <__retarget_lock_acquire_recursive>
 8002ab6:	bf00      	nop
 8002ab8:	20000690 	.word	0x20000690

08002abc <__sfp_lock_release>:
 8002abc:	4801      	ldr	r0, [pc, #4]	; (8002ac4 <__sfp_lock_release+0x8>)
 8002abe:	f000 b8ae 	b.w	8002c1e <__retarget_lock_release_recursive>
 8002ac2:	bf00      	nop
 8002ac4:	20000690 	.word	0x20000690

08002ac8 <__sinit_lock_acquire>:
 8002ac8:	4801      	ldr	r0, [pc, #4]	; (8002ad0 <__sinit_lock_acquire+0x8>)
 8002aca:	f000 b8a7 	b.w	8002c1c <__retarget_lock_acquire_recursive>
 8002ace:	bf00      	nop
 8002ad0:	2000068b 	.word	0x2000068b

08002ad4 <__sinit_lock_release>:
 8002ad4:	4801      	ldr	r0, [pc, #4]	; (8002adc <__sinit_lock_release+0x8>)
 8002ad6:	f000 b8a2 	b.w	8002c1e <__retarget_lock_release_recursive>
 8002ada:	bf00      	nop
 8002adc:	2000068b 	.word	0x2000068b

08002ae0 <__sinit>:
 8002ae0:	b510      	push	{r4, lr}
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	f7ff fff0 	bl	8002ac8 <__sinit_lock_acquire>
 8002ae8:	69a3      	ldr	r3, [r4, #24]
 8002aea:	b11b      	cbz	r3, 8002af4 <__sinit+0x14>
 8002aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002af0:	f7ff bff0 	b.w	8002ad4 <__sinit_lock_release>
 8002af4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002af8:	6523      	str	r3, [r4, #80]	; 0x50
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <__sinit+0x68>)
 8002afc:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <__sinit+0x6c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	62a2      	str	r2, [r4, #40]	; 0x28
 8002b02:	42a3      	cmp	r3, r4
 8002b04:	bf04      	itt	eq
 8002b06:	2301      	moveq	r3, #1
 8002b08:	61a3      	streq	r3, [r4, #24]
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	f000 f820 	bl	8002b50 <__sfp>
 8002b10:	6060      	str	r0, [r4, #4]
 8002b12:	4620      	mov	r0, r4
 8002b14:	f000 f81c 	bl	8002b50 <__sfp>
 8002b18:	60a0      	str	r0, [r4, #8]
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	f000 f818 	bl	8002b50 <__sfp>
 8002b20:	2200      	movs	r2, #0
 8002b22:	60e0      	str	r0, [r4, #12]
 8002b24:	2104      	movs	r1, #4
 8002b26:	6860      	ldr	r0, [r4, #4]
 8002b28:	f7ff ff82 	bl	8002a30 <std>
 8002b2c:	68a0      	ldr	r0, [r4, #8]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	2109      	movs	r1, #9
 8002b32:	f7ff ff7d 	bl	8002a30 <std>
 8002b36:	68e0      	ldr	r0, [r4, #12]
 8002b38:	2202      	movs	r2, #2
 8002b3a:	2112      	movs	r1, #18
 8002b3c:	f7ff ff78 	bl	8002a30 <std>
 8002b40:	2301      	movs	r3, #1
 8002b42:	61a3      	str	r3, [r4, #24]
 8002b44:	e7d2      	b.n	8002aec <__sinit+0xc>
 8002b46:	bf00      	nop
 8002b48:	080036fc 	.word	0x080036fc
 8002b4c:	08002a79 	.word	0x08002a79

08002b50 <__sfp>:
 8002b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b52:	4607      	mov	r7, r0
 8002b54:	f7ff ffac 	bl	8002ab0 <__sfp_lock_acquire>
 8002b58:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <__sfp+0x84>)
 8002b5a:	681e      	ldr	r6, [r3, #0]
 8002b5c:	69b3      	ldr	r3, [r6, #24]
 8002b5e:	b913      	cbnz	r3, 8002b66 <__sfp+0x16>
 8002b60:	4630      	mov	r0, r6
 8002b62:	f7ff ffbd 	bl	8002ae0 <__sinit>
 8002b66:	3648      	adds	r6, #72	; 0x48
 8002b68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	d503      	bpl.n	8002b78 <__sfp+0x28>
 8002b70:	6833      	ldr	r3, [r6, #0]
 8002b72:	b30b      	cbz	r3, 8002bb8 <__sfp+0x68>
 8002b74:	6836      	ldr	r6, [r6, #0]
 8002b76:	e7f7      	b.n	8002b68 <__sfp+0x18>
 8002b78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002b7c:	b9d5      	cbnz	r5, 8002bb4 <__sfp+0x64>
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <__sfp+0x88>)
 8002b80:	60e3      	str	r3, [r4, #12]
 8002b82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002b86:	6665      	str	r5, [r4, #100]	; 0x64
 8002b88:	f000 f847 	bl	8002c1a <__retarget_lock_init_recursive>
 8002b8c:	f7ff ff96 	bl	8002abc <__sfp_lock_release>
 8002b90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002b94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002b98:	6025      	str	r5, [r4, #0]
 8002b9a:	61a5      	str	r5, [r4, #24]
 8002b9c:	2208      	movs	r2, #8
 8002b9e:	4629      	mov	r1, r5
 8002ba0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002ba4:	f7ff fd2c 	bl	8002600 <memset>
 8002ba8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002bac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bb4:	3468      	adds	r4, #104	; 0x68
 8002bb6:	e7d9      	b.n	8002b6c <__sfp+0x1c>
 8002bb8:	2104      	movs	r1, #4
 8002bba:	4638      	mov	r0, r7
 8002bbc:	f7ff ff62 	bl	8002a84 <__sfmoreglue>
 8002bc0:	4604      	mov	r4, r0
 8002bc2:	6030      	str	r0, [r6, #0]
 8002bc4:	2800      	cmp	r0, #0
 8002bc6:	d1d5      	bne.n	8002b74 <__sfp+0x24>
 8002bc8:	f7ff ff78 	bl	8002abc <__sfp_lock_release>
 8002bcc:	230c      	movs	r3, #12
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	e7ee      	b.n	8002bb0 <__sfp+0x60>
 8002bd2:	bf00      	nop
 8002bd4:	080036fc 	.word	0x080036fc
 8002bd8:	ffff0001 	.word	0xffff0001

08002bdc <_fwalk_reent>:
 8002bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002be0:	4606      	mov	r6, r0
 8002be2:	4688      	mov	r8, r1
 8002be4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002be8:	2700      	movs	r7, #0
 8002bea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002bee:	f1b9 0901 	subs.w	r9, r9, #1
 8002bf2:	d505      	bpl.n	8002c00 <_fwalk_reent+0x24>
 8002bf4:	6824      	ldr	r4, [r4, #0]
 8002bf6:	2c00      	cmp	r4, #0
 8002bf8:	d1f7      	bne.n	8002bea <_fwalk_reent+0xe>
 8002bfa:	4638      	mov	r0, r7
 8002bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c00:	89ab      	ldrh	r3, [r5, #12]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d907      	bls.n	8002c16 <_fwalk_reent+0x3a>
 8002c06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	d003      	beq.n	8002c16 <_fwalk_reent+0x3a>
 8002c0e:	4629      	mov	r1, r5
 8002c10:	4630      	mov	r0, r6
 8002c12:	47c0      	blx	r8
 8002c14:	4307      	orrs	r7, r0
 8002c16:	3568      	adds	r5, #104	; 0x68
 8002c18:	e7e9      	b.n	8002bee <_fwalk_reent+0x12>

08002c1a <__retarget_lock_init_recursive>:
 8002c1a:	4770      	bx	lr

08002c1c <__retarget_lock_acquire_recursive>:
 8002c1c:	4770      	bx	lr

08002c1e <__retarget_lock_release_recursive>:
 8002c1e:	4770      	bx	lr

08002c20 <__swhatbuf_r>:
 8002c20:	b570      	push	{r4, r5, r6, lr}
 8002c22:	460e      	mov	r6, r1
 8002c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c28:	2900      	cmp	r1, #0
 8002c2a:	b096      	sub	sp, #88	; 0x58
 8002c2c:	4614      	mov	r4, r2
 8002c2e:	461d      	mov	r5, r3
 8002c30:	da07      	bge.n	8002c42 <__swhatbuf_r+0x22>
 8002c32:	2300      	movs	r3, #0
 8002c34:	602b      	str	r3, [r5, #0]
 8002c36:	89b3      	ldrh	r3, [r6, #12]
 8002c38:	061a      	lsls	r2, r3, #24
 8002c3a:	d410      	bmi.n	8002c5e <__swhatbuf_r+0x3e>
 8002c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c40:	e00e      	b.n	8002c60 <__swhatbuf_r+0x40>
 8002c42:	466a      	mov	r2, sp
 8002c44:	f000 fc5e 	bl	8003504 <_fstat_r>
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	dbf2      	blt.n	8002c32 <__swhatbuf_r+0x12>
 8002c4c:	9a01      	ldr	r2, [sp, #4]
 8002c4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002c52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002c56:	425a      	negs	r2, r3
 8002c58:	415a      	adcs	r2, r3
 8002c5a:	602a      	str	r2, [r5, #0]
 8002c5c:	e7ee      	b.n	8002c3c <__swhatbuf_r+0x1c>
 8002c5e:	2340      	movs	r3, #64	; 0x40
 8002c60:	2000      	movs	r0, #0
 8002c62:	6023      	str	r3, [r4, #0]
 8002c64:	b016      	add	sp, #88	; 0x58
 8002c66:	bd70      	pop	{r4, r5, r6, pc}

08002c68 <__smakebuf_r>:
 8002c68:	898b      	ldrh	r3, [r1, #12]
 8002c6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c6c:	079d      	lsls	r5, r3, #30
 8002c6e:	4606      	mov	r6, r0
 8002c70:	460c      	mov	r4, r1
 8002c72:	d507      	bpl.n	8002c84 <__smakebuf_r+0x1c>
 8002c74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002c78:	6023      	str	r3, [r4, #0]
 8002c7a:	6123      	str	r3, [r4, #16]
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	6163      	str	r3, [r4, #20]
 8002c80:	b002      	add	sp, #8
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	ab01      	add	r3, sp, #4
 8002c86:	466a      	mov	r2, sp
 8002c88:	f7ff ffca 	bl	8002c20 <__swhatbuf_r>
 8002c8c:	9900      	ldr	r1, [sp, #0]
 8002c8e:	4605      	mov	r5, r0
 8002c90:	4630      	mov	r0, r6
 8002c92:	f000 f879 	bl	8002d88 <_malloc_r>
 8002c96:	b948      	cbnz	r0, 8002cac <__smakebuf_r+0x44>
 8002c98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c9c:	059a      	lsls	r2, r3, #22
 8002c9e:	d4ef      	bmi.n	8002c80 <__smakebuf_r+0x18>
 8002ca0:	f023 0303 	bic.w	r3, r3, #3
 8002ca4:	f043 0302 	orr.w	r3, r3, #2
 8002ca8:	81a3      	strh	r3, [r4, #12]
 8002caa:	e7e3      	b.n	8002c74 <__smakebuf_r+0xc>
 8002cac:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <__smakebuf_r+0x7c>)
 8002cae:	62b3      	str	r3, [r6, #40]	; 0x28
 8002cb0:	89a3      	ldrh	r3, [r4, #12]
 8002cb2:	6020      	str	r0, [r4, #0]
 8002cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb8:	81a3      	strh	r3, [r4, #12]
 8002cba:	9b00      	ldr	r3, [sp, #0]
 8002cbc:	6163      	str	r3, [r4, #20]
 8002cbe:	9b01      	ldr	r3, [sp, #4]
 8002cc0:	6120      	str	r0, [r4, #16]
 8002cc2:	b15b      	cbz	r3, 8002cdc <__smakebuf_r+0x74>
 8002cc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cc8:	4630      	mov	r0, r6
 8002cca:	f000 fc2d 	bl	8003528 <_isatty_r>
 8002cce:	b128      	cbz	r0, 8002cdc <__smakebuf_r+0x74>
 8002cd0:	89a3      	ldrh	r3, [r4, #12]
 8002cd2:	f023 0303 	bic.w	r3, r3, #3
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	81a3      	strh	r3, [r4, #12]
 8002cdc:	89a0      	ldrh	r0, [r4, #12]
 8002cde:	4305      	orrs	r5, r0
 8002ce0:	81a5      	strh	r5, [r4, #12]
 8002ce2:	e7cd      	b.n	8002c80 <__smakebuf_r+0x18>
 8002ce4:	08002a79 	.word	0x08002a79

08002ce8 <_free_r>:
 8002ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002cea:	2900      	cmp	r1, #0
 8002cec:	d048      	beq.n	8002d80 <_free_r+0x98>
 8002cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cf2:	9001      	str	r0, [sp, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f1a1 0404 	sub.w	r4, r1, #4
 8002cfa:	bfb8      	it	lt
 8002cfc:	18e4      	addlt	r4, r4, r3
 8002cfe:	f000 fc35 	bl	800356c <__malloc_lock>
 8002d02:	4a20      	ldr	r2, [pc, #128]	; (8002d84 <_free_r+0x9c>)
 8002d04:	9801      	ldr	r0, [sp, #4]
 8002d06:	6813      	ldr	r3, [r2, #0]
 8002d08:	4615      	mov	r5, r2
 8002d0a:	b933      	cbnz	r3, 8002d1a <_free_r+0x32>
 8002d0c:	6063      	str	r3, [r4, #4]
 8002d0e:	6014      	str	r4, [r2, #0]
 8002d10:	b003      	add	sp, #12
 8002d12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d16:	f000 bc2f 	b.w	8003578 <__malloc_unlock>
 8002d1a:	42a3      	cmp	r3, r4
 8002d1c:	d90b      	bls.n	8002d36 <_free_r+0x4e>
 8002d1e:	6821      	ldr	r1, [r4, #0]
 8002d20:	1862      	adds	r2, r4, r1
 8002d22:	4293      	cmp	r3, r2
 8002d24:	bf04      	itt	eq
 8002d26:	681a      	ldreq	r2, [r3, #0]
 8002d28:	685b      	ldreq	r3, [r3, #4]
 8002d2a:	6063      	str	r3, [r4, #4]
 8002d2c:	bf04      	itt	eq
 8002d2e:	1852      	addeq	r2, r2, r1
 8002d30:	6022      	streq	r2, [r4, #0]
 8002d32:	602c      	str	r4, [r5, #0]
 8002d34:	e7ec      	b.n	8002d10 <_free_r+0x28>
 8002d36:	461a      	mov	r2, r3
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	b10b      	cbz	r3, 8002d40 <_free_r+0x58>
 8002d3c:	42a3      	cmp	r3, r4
 8002d3e:	d9fa      	bls.n	8002d36 <_free_r+0x4e>
 8002d40:	6811      	ldr	r1, [r2, #0]
 8002d42:	1855      	adds	r5, r2, r1
 8002d44:	42a5      	cmp	r5, r4
 8002d46:	d10b      	bne.n	8002d60 <_free_r+0x78>
 8002d48:	6824      	ldr	r4, [r4, #0]
 8002d4a:	4421      	add	r1, r4
 8002d4c:	1854      	adds	r4, r2, r1
 8002d4e:	42a3      	cmp	r3, r4
 8002d50:	6011      	str	r1, [r2, #0]
 8002d52:	d1dd      	bne.n	8002d10 <_free_r+0x28>
 8002d54:	681c      	ldr	r4, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	6053      	str	r3, [r2, #4]
 8002d5a:	4421      	add	r1, r4
 8002d5c:	6011      	str	r1, [r2, #0]
 8002d5e:	e7d7      	b.n	8002d10 <_free_r+0x28>
 8002d60:	d902      	bls.n	8002d68 <_free_r+0x80>
 8002d62:	230c      	movs	r3, #12
 8002d64:	6003      	str	r3, [r0, #0]
 8002d66:	e7d3      	b.n	8002d10 <_free_r+0x28>
 8002d68:	6825      	ldr	r5, [r4, #0]
 8002d6a:	1961      	adds	r1, r4, r5
 8002d6c:	428b      	cmp	r3, r1
 8002d6e:	bf04      	itt	eq
 8002d70:	6819      	ldreq	r1, [r3, #0]
 8002d72:	685b      	ldreq	r3, [r3, #4]
 8002d74:	6063      	str	r3, [r4, #4]
 8002d76:	bf04      	itt	eq
 8002d78:	1949      	addeq	r1, r1, r5
 8002d7a:	6021      	streq	r1, [r4, #0]
 8002d7c:	6054      	str	r4, [r2, #4]
 8002d7e:	e7c7      	b.n	8002d10 <_free_r+0x28>
 8002d80:	b003      	add	sp, #12
 8002d82:	bd30      	pop	{r4, r5, pc}
 8002d84:	20000618 	.word	0x20000618

08002d88 <_malloc_r>:
 8002d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8a:	1ccd      	adds	r5, r1, #3
 8002d8c:	f025 0503 	bic.w	r5, r5, #3
 8002d90:	3508      	adds	r5, #8
 8002d92:	2d0c      	cmp	r5, #12
 8002d94:	bf38      	it	cc
 8002d96:	250c      	movcc	r5, #12
 8002d98:	2d00      	cmp	r5, #0
 8002d9a:	4606      	mov	r6, r0
 8002d9c:	db01      	blt.n	8002da2 <_malloc_r+0x1a>
 8002d9e:	42a9      	cmp	r1, r5
 8002da0:	d903      	bls.n	8002daa <_malloc_r+0x22>
 8002da2:	230c      	movs	r3, #12
 8002da4:	6033      	str	r3, [r6, #0]
 8002da6:	2000      	movs	r0, #0
 8002da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002daa:	f000 fbdf 	bl	800356c <__malloc_lock>
 8002dae:	4921      	ldr	r1, [pc, #132]	; (8002e34 <_malloc_r+0xac>)
 8002db0:	680a      	ldr	r2, [r1, #0]
 8002db2:	4614      	mov	r4, r2
 8002db4:	b99c      	cbnz	r4, 8002dde <_malloc_r+0x56>
 8002db6:	4f20      	ldr	r7, [pc, #128]	; (8002e38 <_malloc_r+0xb0>)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	b923      	cbnz	r3, 8002dc6 <_malloc_r+0x3e>
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	4630      	mov	r0, r6
 8002dc0:	f000 fb2a 	bl	8003418 <_sbrk_r>
 8002dc4:	6038      	str	r0, [r7, #0]
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	4630      	mov	r0, r6
 8002dca:	f000 fb25 	bl	8003418 <_sbrk_r>
 8002dce:	1c43      	adds	r3, r0, #1
 8002dd0:	d123      	bne.n	8002e1a <_malloc_r+0x92>
 8002dd2:	230c      	movs	r3, #12
 8002dd4:	6033      	str	r3, [r6, #0]
 8002dd6:	4630      	mov	r0, r6
 8002dd8:	f000 fbce 	bl	8003578 <__malloc_unlock>
 8002ddc:	e7e3      	b.n	8002da6 <_malloc_r+0x1e>
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	1b5b      	subs	r3, r3, r5
 8002de2:	d417      	bmi.n	8002e14 <_malloc_r+0x8c>
 8002de4:	2b0b      	cmp	r3, #11
 8002de6:	d903      	bls.n	8002df0 <_malloc_r+0x68>
 8002de8:	6023      	str	r3, [r4, #0]
 8002dea:	441c      	add	r4, r3
 8002dec:	6025      	str	r5, [r4, #0]
 8002dee:	e004      	b.n	8002dfa <_malloc_r+0x72>
 8002df0:	6863      	ldr	r3, [r4, #4]
 8002df2:	42a2      	cmp	r2, r4
 8002df4:	bf0c      	ite	eq
 8002df6:	600b      	streq	r3, [r1, #0]
 8002df8:	6053      	strne	r3, [r2, #4]
 8002dfa:	4630      	mov	r0, r6
 8002dfc:	f000 fbbc 	bl	8003578 <__malloc_unlock>
 8002e00:	f104 000b 	add.w	r0, r4, #11
 8002e04:	1d23      	adds	r3, r4, #4
 8002e06:	f020 0007 	bic.w	r0, r0, #7
 8002e0a:	1ac2      	subs	r2, r0, r3
 8002e0c:	d0cc      	beq.n	8002da8 <_malloc_r+0x20>
 8002e0e:	1a1b      	subs	r3, r3, r0
 8002e10:	50a3      	str	r3, [r4, r2]
 8002e12:	e7c9      	b.n	8002da8 <_malloc_r+0x20>
 8002e14:	4622      	mov	r2, r4
 8002e16:	6864      	ldr	r4, [r4, #4]
 8002e18:	e7cc      	b.n	8002db4 <_malloc_r+0x2c>
 8002e1a:	1cc4      	adds	r4, r0, #3
 8002e1c:	f024 0403 	bic.w	r4, r4, #3
 8002e20:	42a0      	cmp	r0, r4
 8002e22:	d0e3      	beq.n	8002dec <_malloc_r+0x64>
 8002e24:	1a21      	subs	r1, r4, r0
 8002e26:	4630      	mov	r0, r6
 8002e28:	f000 faf6 	bl	8003418 <_sbrk_r>
 8002e2c:	3001      	adds	r0, #1
 8002e2e:	d1dd      	bne.n	8002dec <_malloc_r+0x64>
 8002e30:	e7cf      	b.n	8002dd2 <_malloc_r+0x4a>
 8002e32:	bf00      	nop
 8002e34:	20000618 	.word	0x20000618
 8002e38:	2000061c 	.word	0x2000061c

08002e3c <__sfputc_r>:
 8002e3c:	6893      	ldr	r3, [r2, #8]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	b410      	push	{r4}
 8002e44:	6093      	str	r3, [r2, #8]
 8002e46:	da08      	bge.n	8002e5a <__sfputc_r+0x1e>
 8002e48:	6994      	ldr	r4, [r2, #24]
 8002e4a:	42a3      	cmp	r3, r4
 8002e4c:	db01      	blt.n	8002e52 <__sfputc_r+0x16>
 8002e4e:	290a      	cmp	r1, #10
 8002e50:	d103      	bne.n	8002e5a <__sfputc_r+0x1e>
 8002e52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e56:	f7ff bc69 	b.w	800272c <__swbuf_r>
 8002e5a:	6813      	ldr	r3, [r2, #0]
 8002e5c:	1c58      	adds	r0, r3, #1
 8002e5e:	6010      	str	r0, [r2, #0]
 8002e60:	7019      	strb	r1, [r3, #0]
 8002e62:	4608      	mov	r0, r1
 8002e64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <__sfputs_r>:
 8002e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6c:	4606      	mov	r6, r0
 8002e6e:	460f      	mov	r7, r1
 8002e70:	4614      	mov	r4, r2
 8002e72:	18d5      	adds	r5, r2, r3
 8002e74:	42ac      	cmp	r4, r5
 8002e76:	d101      	bne.n	8002e7c <__sfputs_r+0x12>
 8002e78:	2000      	movs	r0, #0
 8002e7a:	e007      	b.n	8002e8c <__sfputs_r+0x22>
 8002e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e80:	463a      	mov	r2, r7
 8002e82:	4630      	mov	r0, r6
 8002e84:	f7ff ffda 	bl	8002e3c <__sfputc_r>
 8002e88:	1c43      	adds	r3, r0, #1
 8002e8a:	d1f3      	bne.n	8002e74 <__sfputs_r+0xa>
 8002e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002e90 <_vfiprintf_r>:
 8002e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e94:	460d      	mov	r5, r1
 8002e96:	b09d      	sub	sp, #116	; 0x74
 8002e98:	4614      	mov	r4, r2
 8002e9a:	4698      	mov	r8, r3
 8002e9c:	4606      	mov	r6, r0
 8002e9e:	b118      	cbz	r0, 8002ea8 <_vfiprintf_r+0x18>
 8002ea0:	6983      	ldr	r3, [r0, #24]
 8002ea2:	b90b      	cbnz	r3, 8002ea8 <_vfiprintf_r+0x18>
 8002ea4:	f7ff fe1c 	bl	8002ae0 <__sinit>
 8002ea8:	4b89      	ldr	r3, [pc, #548]	; (80030d0 <_vfiprintf_r+0x240>)
 8002eaa:	429d      	cmp	r5, r3
 8002eac:	d11b      	bne.n	8002ee6 <_vfiprintf_r+0x56>
 8002eae:	6875      	ldr	r5, [r6, #4]
 8002eb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002eb2:	07d9      	lsls	r1, r3, #31
 8002eb4:	d405      	bmi.n	8002ec2 <_vfiprintf_r+0x32>
 8002eb6:	89ab      	ldrh	r3, [r5, #12]
 8002eb8:	059a      	lsls	r2, r3, #22
 8002eba:	d402      	bmi.n	8002ec2 <_vfiprintf_r+0x32>
 8002ebc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ebe:	f7ff fead 	bl	8002c1c <__retarget_lock_acquire_recursive>
 8002ec2:	89ab      	ldrh	r3, [r5, #12]
 8002ec4:	071b      	lsls	r3, r3, #28
 8002ec6:	d501      	bpl.n	8002ecc <_vfiprintf_r+0x3c>
 8002ec8:	692b      	ldr	r3, [r5, #16]
 8002eca:	b9eb      	cbnz	r3, 8002f08 <_vfiprintf_r+0x78>
 8002ecc:	4629      	mov	r1, r5
 8002ece:	4630      	mov	r0, r6
 8002ed0:	f7ff fc7e 	bl	80027d0 <__swsetup_r>
 8002ed4:	b1c0      	cbz	r0, 8002f08 <_vfiprintf_r+0x78>
 8002ed6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ed8:	07dc      	lsls	r4, r3, #31
 8002eda:	d50e      	bpl.n	8002efa <_vfiprintf_r+0x6a>
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee0:	b01d      	add	sp, #116	; 0x74
 8002ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ee6:	4b7b      	ldr	r3, [pc, #492]	; (80030d4 <_vfiprintf_r+0x244>)
 8002ee8:	429d      	cmp	r5, r3
 8002eea:	d101      	bne.n	8002ef0 <_vfiprintf_r+0x60>
 8002eec:	68b5      	ldr	r5, [r6, #8]
 8002eee:	e7df      	b.n	8002eb0 <_vfiprintf_r+0x20>
 8002ef0:	4b79      	ldr	r3, [pc, #484]	; (80030d8 <_vfiprintf_r+0x248>)
 8002ef2:	429d      	cmp	r5, r3
 8002ef4:	bf08      	it	eq
 8002ef6:	68f5      	ldreq	r5, [r6, #12]
 8002ef8:	e7da      	b.n	8002eb0 <_vfiprintf_r+0x20>
 8002efa:	89ab      	ldrh	r3, [r5, #12]
 8002efc:	0598      	lsls	r0, r3, #22
 8002efe:	d4ed      	bmi.n	8002edc <_vfiprintf_r+0x4c>
 8002f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f02:	f7ff fe8c 	bl	8002c1e <__retarget_lock_release_recursive>
 8002f06:	e7e9      	b.n	8002edc <_vfiprintf_r+0x4c>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f12:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f16:	2330      	movs	r3, #48	; 0x30
 8002f18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80030dc <_vfiprintf_r+0x24c>
 8002f1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f20:	f04f 0901 	mov.w	r9, #1
 8002f24:	4623      	mov	r3, r4
 8002f26:	469a      	mov	sl, r3
 8002f28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f2c:	b10a      	cbz	r2, 8002f32 <_vfiprintf_r+0xa2>
 8002f2e:	2a25      	cmp	r2, #37	; 0x25
 8002f30:	d1f9      	bne.n	8002f26 <_vfiprintf_r+0x96>
 8002f32:	ebba 0b04 	subs.w	fp, sl, r4
 8002f36:	d00b      	beq.n	8002f50 <_vfiprintf_r+0xc0>
 8002f38:	465b      	mov	r3, fp
 8002f3a:	4622      	mov	r2, r4
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	4630      	mov	r0, r6
 8002f40:	f7ff ff93 	bl	8002e6a <__sfputs_r>
 8002f44:	3001      	adds	r0, #1
 8002f46:	f000 80aa 	beq.w	800309e <_vfiprintf_r+0x20e>
 8002f4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f4c:	445a      	add	r2, fp
 8002f4e:	9209      	str	r2, [sp, #36]	; 0x24
 8002f50:	f89a 3000 	ldrb.w	r3, [sl]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80a2 	beq.w	800309e <_vfiprintf_r+0x20e>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f64:	f10a 0a01 	add.w	sl, sl, #1
 8002f68:	9304      	str	r3, [sp, #16]
 8002f6a:	9307      	str	r3, [sp, #28]
 8002f6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f70:	931a      	str	r3, [sp, #104]	; 0x68
 8002f72:	4654      	mov	r4, sl
 8002f74:	2205      	movs	r2, #5
 8002f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f7a:	4858      	ldr	r0, [pc, #352]	; (80030dc <_vfiprintf_r+0x24c>)
 8002f7c:	f7fd f930 	bl	80001e0 <memchr>
 8002f80:	9a04      	ldr	r2, [sp, #16]
 8002f82:	b9d8      	cbnz	r0, 8002fbc <_vfiprintf_r+0x12c>
 8002f84:	06d1      	lsls	r1, r2, #27
 8002f86:	bf44      	itt	mi
 8002f88:	2320      	movmi	r3, #32
 8002f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f8e:	0713      	lsls	r3, r2, #28
 8002f90:	bf44      	itt	mi
 8002f92:	232b      	movmi	r3, #43	; 0x2b
 8002f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f98:	f89a 3000 	ldrb.w	r3, [sl]
 8002f9c:	2b2a      	cmp	r3, #42	; 0x2a
 8002f9e:	d015      	beq.n	8002fcc <_vfiprintf_r+0x13c>
 8002fa0:	9a07      	ldr	r2, [sp, #28]
 8002fa2:	4654      	mov	r4, sl
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f04f 0c0a 	mov.w	ip, #10
 8002faa:	4621      	mov	r1, r4
 8002fac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fb0:	3b30      	subs	r3, #48	; 0x30
 8002fb2:	2b09      	cmp	r3, #9
 8002fb4:	d94e      	bls.n	8003054 <_vfiprintf_r+0x1c4>
 8002fb6:	b1b0      	cbz	r0, 8002fe6 <_vfiprintf_r+0x156>
 8002fb8:	9207      	str	r2, [sp, #28]
 8002fba:	e014      	b.n	8002fe6 <_vfiprintf_r+0x156>
 8002fbc:	eba0 0308 	sub.w	r3, r0, r8
 8002fc0:	fa09 f303 	lsl.w	r3, r9, r3
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	9304      	str	r3, [sp, #16]
 8002fc8:	46a2      	mov	sl, r4
 8002fca:	e7d2      	b.n	8002f72 <_vfiprintf_r+0xe2>
 8002fcc:	9b03      	ldr	r3, [sp, #12]
 8002fce:	1d19      	adds	r1, r3, #4
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	9103      	str	r1, [sp, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bfbb      	ittet	lt
 8002fd8:	425b      	neglt	r3, r3
 8002fda:	f042 0202 	orrlt.w	r2, r2, #2
 8002fde:	9307      	strge	r3, [sp, #28]
 8002fe0:	9307      	strlt	r3, [sp, #28]
 8002fe2:	bfb8      	it	lt
 8002fe4:	9204      	strlt	r2, [sp, #16]
 8002fe6:	7823      	ldrb	r3, [r4, #0]
 8002fe8:	2b2e      	cmp	r3, #46	; 0x2e
 8002fea:	d10c      	bne.n	8003006 <_vfiprintf_r+0x176>
 8002fec:	7863      	ldrb	r3, [r4, #1]
 8002fee:	2b2a      	cmp	r3, #42	; 0x2a
 8002ff0:	d135      	bne.n	800305e <_vfiprintf_r+0x1ce>
 8002ff2:	9b03      	ldr	r3, [sp, #12]
 8002ff4:	1d1a      	adds	r2, r3, #4
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	9203      	str	r2, [sp, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	bfb8      	it	lt
 8002ffe:	f04f 33ff 	movlt.w	r3, #4294967295
 8003002:	3402      	adds	r4, #2
 8003004:	9305      	str	r3, [sp, #20]
 8003006:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80030ec <_vfiprintf_r+0x25c>
 800300a:	7821      	ldrb	r1, [r4, #0]
 800300c:	2203      	movs	r2, #3
 800300e:	4650      	mov	r0, sl
 8003010:	f7fd f8e6 	bl	80001e0 <memchr>
 8003014:	b140      	cbz	r0, 8003028 <_vfiprintf_r+0x198>
 8003016:	2340      	movs	r3, #64	; 0x40
 8003018:	eba0 000a 	sub.w	r0, r0, sl
 800301c:	fa03 f000 	lsl.w	r0, r3, r0
 8003020:	9b04      	ldr	r3, [sp, #16]
 8003022:	4303      	orrs	r3, r0
 8003024:	3401      	adds	r4, #1
 8003026:	9304      	str	r3, [sp, #16]
 8003028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800302c:	482c      	ldr	r0, [pc, #176]	; (80030e0 <_vfiprintf_r+0x250>)
 800302e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003032:	2206      	movs	r2, #6
 8003034:	f7fd f8d4 	bl	80001e0 <memchr>
 8003038:	2800      	cmp	r0, #0
 800303a:	d03f      	beq.n	80030bc <_vfiprintf_r+0x22c>
 800303c:	4b29      	ldr	r3, [pc, #164]	; (80030e4 <_vfiprintf_r+0x254>)
 800303e:	bb1b      	cbnz	r3, 8003088 <_vfiprintf_r+0x1f8>
 8003040:	9b03      	ldr	r3, [sp, #12]
 8003042:	3307      	adds	r3, #7
 8003044:	f023 0307 	bic.w	r3, r3, #7
 8003048:	3308      	adds	r3, #8
 800304a:	9303      	str	r3, [sp, #12]
 800304c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800304e:	443b      	add	r3, r7
 8003050:	9309      	str	r3, [sp, #36]	; 0x24
 8003052:	e767      	b.n	8002f24 <_vfiprintf_r+0x94>
 8003054:	fb0c 3202 	mla	r2, ip, r2, r3
 8003058:	460c      	mov	r4, r1
 800305a:	2001      	movs	r0, #1
 800305c:	e7a5      	b.n	8002faa <_vfiprintf_r+0x11a>
 800305e:	2300      	movs	r3, #0
 8003060:	3401      	adds	r4, #1
 8003062:	9305      	str	r3, [sp, #20]
 8003064:	4619      	mov	r1, r3
 8003066:	f04f 0c0a 	mov.w	ip, #10
 800306a:	4620      	mov	r0, r4
 800306c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003070:	3a30      	subs	r2, #48	; 0x30
 8003072:	2a09      	cmp	r2, #9
 8003074:	d903      	bls.n	800307e <_vfiprintf_r+0x1ee>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0c5      	beq.n	8003006 <_vfiprintf_r+0x176>
 800307a:	9105      	str	r1, [sp, #20]
 800307c:	e7c3      	b.n	8003006 <_vfiprintf_r+0x176>
 800307e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003082:	4604      	mov	r4, r0
 8003084:	2301      	movs	r3, #1
 8003086:	e7f0      	b.n	800306a <_vfiprintf_r+0x1da>
 8003088:	ab03      	add	r3, sp, #12
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	462a      	mov	r2, r5
 800308e:	4b16      	ldr	r3, [pc, #88]	; (80030e8 <_vfiprintf_r+0x258>)
 8003090:	a904      	add	r1, sp, #16
 8003092:	4630      	mov	r0, r6
 8003094:	f3af 8000 	nop.w
 8003098:	4607      	mov	r7, r0
 800309a:	1c78      	adds	r0, r7, #1
 800309c:	d1d6      	bne.n	800304c <_vfiprintf_r+0x1bc>
 800309e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030a0:	07d9      	lsls	r1, r3, #31
 80030a2:	d405      	bmi.n	80030b0 <_vfiprintf_r+0x220>
 80030a4:	89ab      	ldrh	r3, [r5, #12]
 80030a6:	059a      	lsls	r2, r3, #22
 80030a8:	d402      	bmi.n	80030b0 <_vfiprintf_r+0x220>
 80030aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030ac:	f7ff fdb7 	bl	8002c1e <__retarget_lock_release_recursive>
 80030b0:	89ab      	ldrh	r3, [r5, #12]
 80030b2:	065b      	lsls	r3, r3, #25
 80030b4:	f53f af12 	bmi.w	8002edc <_vfiprintf_r+0x4c>
 80030b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030ba:	e711      	b.n	8002ee0 <_vfiprintf_r+0x50>
 80030bc:	ab03      	add	r3, sp, #12
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	462a      	mov	r2, r5
 80030c2:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <_vfiprintf_r+0x258>)
 80030c4:	a904      	add	r1, sp, #16
 80030c6:	4630      	mov	r0, r6
 80030c8:	f000 f880 	bl	80031cc <_printf_i>
 80030cc:	e7e4      	b.n	8003098 <_vfiprintf_r+0x208>
 80030ce:	bf00      	nop
 80030d0:	08003720 	.word	0x08003720
 80030d4:	08003740 	.word	0x08003740
 80030d8:	08003700 	.word	0x08003700
 80030dc:	08003760 	.word	0x08003760
 80030e0:	0800376a 	.word	0x0800376a
 80030e4:	00000000 	.word	0x00000000
 80030e8:	08002e6b 	.word	0x08002e6b
 80030ec:	08003766 	.word	0x08003766

080030f0 <_printf_common>:
 80030f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030f4:	4616      	mov	r6, r2
 80030f6:	4699      	mov	r9, r3
 80030f8:	688a      	ldr	r2, [r1, #8]
 80030fa:	690b      	ldr	r3, [r1, #16]
 80030fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003100:	4293      	cmp	r3, r2
 8003102:	bfb8      	it	lt
 8003104:	4613      	movlt	r3, r2
 8003106:	6033      	str	r3, [r6, #0]
 8003108:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800310c:	4607      	mov	r7, r0
 800310e:	460c      	mov	r4, r1
 8003110:	b10a      	cbz	r2, 8003116 <_printf_common+0x26>
 8003112:	3301      	adds	r3, #1
 8003114:	6033      	str	r3, [r6, #0]
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	0699      	lsls	r1, r3, #26
 800311a:	bf42      	ittt	mi
 800311c:	6833      	ldrmi	r3, [r6, #0]
 800311e:	3302      	addmi	r3, #2
 8003120:	6033      	strmi	r3, [r6, #0]
 8003122:	6825      	ldr	r5, [r4, #0]
 8003124:	f015 0506 	ands.w	r5, r5, #6
 8003128:	d106      	bne.n	8003138 <_printf_common+0x48>
 800312a:	f104 0a19 	add.w	sl, r4, #25
 800312e:	68e3      	ldr	r3, [r4, #12]
 8003130:	6832      	ldr	r2, [r6, #0]
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	42ab      	cmp	r3, r5
 8003136:	dc26      	bgt.n	8003186 <_printf_common+0x96>
 8003138:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800313c:	1e13      	subs	r3, r2, #0
 800313e:	6822      	ldr	r2, [r4, #0]
 8003140:	bf18      	it	ne
 8003142:	2301      	movne	r3, #1
 8003144:	0692      	lsls	r2, r2, #26
 8003146:	d42b      	bmi.n	80031a0 <_printf_common+0xb0>
 8003148:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800314c:	4649      	mov	r1, r9
 800314e:	4638      	mov	r0, r7
 8003150:	47c0      	blx	r8
 8003152:	3001      	adds	r0, #1
 8003154:	d01e      	beq.n	8003194 <_printf_common+0xa4>
 8003156:	6823      	ldr	r3, [r4, #0]
 8003158:	68e5      	ldr	r5, [r4, #12]
 800315a:	6832      	ldr	r2, [r6, #0]
 800315c:	f003 0306 	and.w	r3, r3, #6
 8003160:	2b04      	cmp	r3, #4
 8003162:	bf08      	it	eq
 8003164:	1aad      	subeq	r5, r5, r2
 8003166:	68a3      	ldr	r3, [r4, #8]
 8003168:	6922      	ldr	r2, [r4, #16]
 800316a:	bf0c      	ite	eq
 800316c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003170:	2500      	movne	r5, #0
 8003172:	4293      	cmp	r3, r2
 8003174:	bfc4      	itt	gt
 8003176:	1a9b      	subgt	r3, r3, r2
 8003178:	18ed      	addgt	r5, r5, r3
 800317a:	2600      	movs	r6, #0
 800317c:	341a      	adds	r4, #26
 800317e:	42b5      	cmp	r5, r6
 8003180:	d11a      	bne.n	80031b8 <_printf_common+0xc8>
 8003182:	2000      	movs	r0, #0
 8003184:	e008      	b.n	8003198 <_printf_common+0xa8>
 8003186:	2301      	movs	r3, #1
 8003188:	4652      	mov	r2, sl
 800318a:	4649      	mov	r1, r9
 800318c:	4638      	mov	r0, r7
 800318e:	47c0      	blx	r8
 8003190:	3001      	adds	r0, #1
 8003192:	d103      	bne.n	800319c <_printf_common+0xac>
 8003194:	f04f 30ff 	mov.w	r0, #4294967295
 8003198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800319c:	3501      	adds	r5, #1
 800319e:	e7c6      	b.n	800312e <_printf_common+0x3e>
 80031a0:	18e1      	adds	r1, r4, r3
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	2030      	movs	r0, #48	; 0x30
 80031a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031aa:	4422      	add	r2, r4
 80031ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031b4:	3302      	adds	r3, #2
 80031b6:	e7c7      	b.n	8003148 <_printf_common+0x58>
 80031b8:	2301      	movs	r3, #1
 80031ba:	4622      	mov	r2, r4
 80031bc:	4649      	mov	r1, r9
 80031be:	4638      	mov	r0, r7
 80031c0:	47c0      	blx	r8
 80031c2:	3001      	adds	r0, #1
 80031c4:	d0e6      	beq.n	8003194 <_printf_common+0xa4>
 80031c6:	3601      	adds	r6, #1
 80031c8:	e7d9      	b.n	800317e <_printf_common+0x8e>
	...

080031cc <_printf_i>:
 80031cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031d0:	460c      	mov	r4, r1
 80031d2:	4691      	mov	r9, r2
 80031d4:	7e27      	ldrb	r7, [r4, #24]
 80031d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80031d8:	2f78      	cmp	r7, #120	; 0x78
 80031da:	4680      	mov	r8, r0
 80031dc:	469a      	mov	sl, r3
 80031de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031e2:	d807      	bhi.n	80031f4 <_printf_i+0x28>
 80031e4:	2f62      	cmp	r7, #98	; 0x62
 80031e6:	d80a      	bhi.n	80031fe <_printf_i+0x32>
 80031e8:	2f00      	cmp	r7, #0
 80031ea:	f000 80d8 	beq.w	800339e <_printf_i+0x1d2>
 80031ee:	2f58      	cmp	r7, #88	; 0x58
 80031f0:	f000 80a3 	beq.w	800333a <_printf_i+0x16e>
 80031f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80031f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031fc:	e03a      	b.n	8003274 <_printf_i+0xa8>
 80031fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003202:	2b15      	cmp	r3, #21
 8003204:	d8f6      	bhi.n	80031f4 <_printf_i+0x28>
 8003206:	a001      	add	r0, pc, #4	; (adr r0, 800320c <_printf_i+0x40>)
 8003208:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800320c:	08003265 	.word	0x08003265
 8003210:	08003279 	.word	0x08003279
 8003214:	080031f5 	.word	0x080031f5
 8003218:	080031f5 	.word	0x080031f5
 800321c:	080031f5 	.word	0x080031f5
 8003220:	080031f5 	.word	0x080031f5
 8003224:	08003279 	.word	0x08003279
 8003228:	080031f5 	.word	0x080031f5
 800322c:	080031f5 	.word	0x080031f5
 8003230:	080031f5 	.word	0x080031f5
 8003234:	080031f5 	.word	0x080031f5
 8003238:	08003385 	.word	0x08003385
 800323c:	080032a9 	.word	0x080032a9
 8003240:	08003367 	.word	0x08003367
 8003244:	080031f5 	.word	0x080031f5
 8003248:	080031f5 	.word	0x080031f5
 800324c:	080033a7 	.word	0x080033a7
 8003250:	080031f5 	.word	0x080031f5
 8003254:	080032a9 	.word	0x080032a9
 8003258:	080031f5 	.word	0x080031f5
 800325c:	080031f5 	.word	0x080031f5
 8003260:	0800336f 	.word	0x0800336f
 8003264:	680b      	ldr	r3, [r1, #0]
 8003266:	1d1a      	adds	r2, r3, #4
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	600a      	str	r2, [r1, #0]
 800326c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003270:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003274:	2301      	movs	r3, #1
 8003276:	e0a3      	b.n	80033c0 <_printf_i+0x1f4>
 8003278:	6825      	ldr	r5, [r4, #0]
 800327a:	6808      	ldr	r0, [r1, #0]
 800327c:	062e      	lsls	r6, r5, #24
 800327e:	f100 0304 	add.w	r3, r0, #4
 8003282:	d50a      	bpl.n	800329a <_printf_i+0xce>
 8003284:	6805      	ldr	r5, [r0, #0]
 8003286:	600b      	str	r3, [r1, #0]
 8003288:	2d00      	cmp	r5, #0
 800328a:	da03      	bge.n	8003294 <_printf_i+0xc8>
 800328c:	232d      	movs	r3, #45	; 0x2d
 800328e:	426d      	negs	r5, r5
 8003290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003294:	485e      	ldr	r0, [pc, #376]	; (8003410 <_printf_i+0x244>)
 8003296:	230a      	movs	r3, #10
 8003298:	e019      	b.n	80032ce <_printf_i+0x102>
 800329a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800329e:	6805      	ldr	r5, [r0, #0]
 80032a0:	600b      	str	r3, [r1, #0]
 80032a2:	bf18      	it	ne
 80032a4:	b22d      	sxthne	r5, r5
 80032a6:	e7ef      	b.n	8003288 <_printf_i+0xbc>
 80032a8:	680b      	ldr	r3, [r1, #0]
 80032aa:	6825      	ldr	r5, [r4, #0]
 80032ac:	1d18      	adds	r0, r3, #4
 80032ae:	6008      	str	r0, [r1, #0]
 80032b0:	0628      	lsls	r0, r5, #24
 80032b2:	d501      	bpl.n	80032b8 <_printf_i+0xec>
 80032b4:	681d      	ldr	r5, [r3, #0]
 80032b6:	e002      	b.n	80032be <_printf_i+0xf2>
 80032b8:	0669      	lsls	r1, r5, #25
 80032ba:	d5fb      	bpl.n	80032b4 <_printf_i+0xe8>
 80032bc:	881d      	ldrh	r5, [r3, #0]
 80032be:	4854      	ldr	r0, [pc, #336]	; (8003410 <_printf_i+0x244>)
 80032c0:	2f6f      	cmp	r7, #111	; 0x6f
 80032c2:	bf0c      	ite	eq
 80032c4:	2308      	moveq	r3, #8
 80032c6:	230a      	movne	r3, #10
 80032c8:	2100      	movs	r1, #0
 80032ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032ce:	6866      	ldr	r6, [r4, #4]
 80032d0:	60a6      	str	r6, [r4, #8]
 80032d2:	2e00      	cmp	r6, #0
 80032d4:	bfa2      	ittt	ge
 80032d6:	6821      	ldrge	r1, [r4, #0]
 80032d8:	f021 0104 	bicge.w	r1, r1, #4
 80032dc:	6021      	strge	r1, [r4, #0]
 80032de:	b90d      	cbnz	r5, 80032e4 <_printf_i+0x118>
 80032e0:	2e00      	cmp	r6, #0
 80032e2:	d04d      	beq.n	8003380 <_printf_i+0x1b4>
 80032e4:	4616      	mov	r6, r2
 80032e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80032ea:	fb03 5711 	mls	r7, r3, r1, r5
 80032ee:	5dc7      	ldrb	r7, [r0, r7]
 80032f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80032f4:	462f      	mov	r7, r5
 80032f6:	42bb      	cmp	r3, r7
 80032f8:	460d      	mov	r5, r1
 80032fa:	d9f4      	bls.n	80032e6 <_printf_i+0x11a>
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d10b      	bne.n	8003318 <_printf_i+0x14c>
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	07df      	lsls	r7, r3, #31
 8003304:	d508      	bpl.n	8003318 <_printf_i+0x14c>
 8003306:	6923      	ldr	r3, [r4, #16]
 8003308:	6861      	ldr	r1, [r4, #4]
 800330a:	4299      	cmp	r1, r3
 800330c:	bfde      	ittt	le
 800330e:	2330      	movle	r3, #48	; 0x30
 8003310:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003314:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003318:	1b92      	subs	r2, r2, r6
 800331a:	6122      	str	r2, [r4, #16]
 800331c:	f8cd a000 	str.w	sl, [sp]
 8003320:	464b      	mov	r3, r9
 8003322:	aa03      	add	r2, sp, #12
 8003324:	4621      	mov	r1, r4
 8003326:	4640      	mov	r0, r8
 8003328:	f7ff fee2 	bl	80030f0 <_printf_common>
 800332c:	3001      	adds	r0, #1
 800332e:	d14c      	bne.n	80033ca <_printf_i+0x1fe>
 8003330:	f04f 30ff 	mov.w	r0, #4294967295
 8003334:	b004      	add	sp, #16
 8003336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800333a:	4835      	ldr	r0, [pc, #212]	; (8003410 <_printf_i+0x244>)
 800333c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	680e      	ldr	r6, [r1, #0]
 8003344:	061f      	lsls	r7, r3, #24
 8003346:	f856 5b04 	ldr.w	r5, [r6], #4
 800334a:	600e      	str	r6, [r1, #0]
 800334c:	d514      	bpl.n	8003378 <_printf_i+0x1ac>
 800334e:	07d9      	lsls	r1, r3, #31
 8003350:	bf44      	itt	mi
 8003352:	f043 0320 	orrmi.w	r3, r3, #32
 8003356:	6023      	strmi	r3, [r4, #0]
 8003358:	b91d      	cbnz	r5, 8003362 <_printf_i+0x196>
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	f023 0320 	bic.w	r3, r3, #32
 8003360:	6023      	str	r3, [r4, #0]
 8003362:	2310      	movs	r3, #16
 8003364:	e7b0      	b.n	80032c8 <_printf_i+0xfc>
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	f043 0320 	orr.w	r3, r3, #32
 800336c:	6023      	str	r3, [r4, #0]
 800336e:	2378      	movs	r3, #120	; 0x78
 8003370:	4828      	ldr	r0, [pc, #160]	; (8003414 <_printf_i+0x248>)
 8003372:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003376:	e7e3      	b.n	8003340 <_printf_i+0x174>
 8003378:	065e      	lsls	r6, r3, #25
 800337a:	bf48      	it	mi
 800337c:	b2ad      	uxthmi	r5, r5
 800337e:	e7e6      	b.n	800334e <_printf_i+0x182>
 8003380:	4616      	mov	r6, r2
 8003382:	e7bb      	b.n	80032fc <_printf_i+0x130>
 8003384:	680b      	ldr	r3, [r1, #0]
 8003386:	6826      	ldr	r6, [r4, #0]
 8003388:	6960      	ldr	r0, [r4, #20]
 800338a:	1d1d      	adds	r5, r3, #4
 800338c:	600d      	str	r5, [r1, #0]
 800338e:	0635      	lsls	r5, r6, #24
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	d501      	bpl.n	8003398 <_printf_i+0x1cc>
 8003394:	6018      	str	r0, [r3, #0]
 8003396:	e002      	b.n	800339e <_printf_i+0x1d2>
 8003398:	0671      	lsls	r1, r6, #25
 800339a:	d5fb      	bpl.n	8003394 <_printf_i+0x1c8>
 800339c:	8018      	strh	r0, [r3, #0]
 800339e:	2300      	movs	r3, #0
 80033a0:	6123      	str	r3, [r4, #16]
 80033a2:	4616      	mov	r6, r2
 80033a4:	e7ba      	b.n	800331c <_printf_i+0x150>
 80033a6:	680b      	ldr	r3, [r1, #0]
 80033a8:	1d1a      	adds	r2, r3, #4
 80033aa:	600a      	str	r2, [r1, #0]
 80033ac:	681e      	ldr	r6, [r3, #0]
 80033ae:	6862      	ldr	r2, [r4, #4]
 80033b0:	2100      	movs	r1, #0
 80033b2:	4630      	mov	r0, r6
 80033b4:	f7fc ff14 	bl	80001e0 <memchr>
 80033b8:	b108      	cbz	r0, 80033be <_printf_i+0x1f2>
 80033ba:	1b80      	subs	r0, r0, r6
 80033bc:	6060      	str	r0, [r4, #4]
 80033be:	6863      	ldr	r3, [r4, #4]
 80033c0:	6123      	str	r3, [r4, #16]
 80033c2:	2300      	movs	r3, #0
 80033c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033c8:	e7a8      	b.n	800331c <_printf_i+0x150>
 80033ca:	6923      	ldr	r3, [r4, #16]
 80033cc:	4632      	mov	r2, r6
 80033ce:	4649      	mov	r1, r9
 80033d0:	4640      	mov	r0, r8
 80033d2:	47d0      	blx	sl
 80033d4:	3001      	adds	r0, #1
 80033d6:	d0ab      	beq.n	8003330 <_printf_i+0x164>
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	079b      	lsls	r3, r3, #30
 80033dc:	d413      	bmi.n	8003406 <_printf_i+0x23a>
 80033de:	68e0      	ldr	r0, [r4, #12]
 80033e0:	9b03      	ldr	r3, [sp, #12]
 80033e2:	4298      	cmp	r0, r3
 80033e4:	bfb8      	it	lt
 80033e6:	4618      	movlt	r0, r3
 80033e8:	e7a4      	b.n	8003334 <_printf_i+0x168>
 80033ea:	2301      	movs	r3, #1
 80033ec:	4632      	mov	r2, r6
 80033ee:	4649      	mov	r1, r9
 80033f0:	4640      	mov	r0, r8
 80033f2:	47d0      	blx	sl
 80033f4:	3001      	adds	r0, #1
 80033f6:	d09b      	beq.n	8003330 <_printf_i+0x164>
 80033f8:	3501      	adds	r5, #1
 80033fa:	68e3      	ldr	r3, [r4, #12]
 80033fc:	9903      	ldr	r1, [sp, #12]
 80033fe:	1a5b      	subs	r3, r3, r1
 8003400:	42ab      	cmp	r3, r5
 8003402:	dcf2      	bgt.n	80033ea <_printf_i+0x21e>
 8003404:	e7eb      	b.n	80033de <_printf_i+0x212>
 8003406:	2500      	movs	r5, #0
 8003408:	f104 0619 	add.w	r6, r4, #25
 800340c:	e7f5      	b.n	80033fa <_printf_i+0x22e>
 800340e:	bf00      	nop
 8003410:	08003771 	.word	0x08003771
 8003414:	08003782 	.word	0x08003782

08003418 <_sbrk_r>:
 8003418:	b538      	push	{r3, r4, r5, lr}
 800341a:	4d06      	ldr	r5, [pc, #24]	; (8003434 <_sbrk_r+0x1c>)
 800341c:	2300      	movs	r3, #0
 800341e:	4604      	mov	r4, r0
 8003420:	4608      	mov	r0, r1
 8003422:	602b      	str	r3, [r5, #0]
 8003424:	f7fd fb0e 	bl	8000a44 <_sbrk>
 8003428:	1c43      	adds	r3, r0, #1
 800342a:	d102      	bne.n	8003432 <_sbrk_r+0x1a>
 800342c:	682b      	ldr	r3, [r5, #0]
 800342e:	b103      	cbz	r3, 8003432 <_sbrk_r+0x1a>
 8003430:	6023      	str	r3, [r4, #0]
 8003432:	bd38      	pop	{r3, r4, r5, pc}
 8003434:	20000694 	.word	0x20000694

08003438 <__sread>:
 8003438:	b510      	push	{r4, lr}
 800343a:	460c      	mov	r4, r1
 800343c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003440:	f000 f8a0 	bl	8003584 <_read_r>
 8003444:	2800      	cmp	r0, #0
 8003446:	bfab      	itete	ge
 8003448:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800344a:	89a3      	ldrhlt	r3, [r4, #12]
 800344c:	181b      	addge	r3, r3, r0
 800344e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003452:	bfac      	ite	ge
 8003454:	6563      	strge	r3, [r4, #84]	; 0x54
 8003456:	81a3      	strhlt	r3, [r4, #12]
 8003458:	bd10      	pop	{r4, pc}

0800345a <__swrite>:
 800345a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800345e:	461f      	mov	r7, r3
 8003460:	898b      	ldrh	r3, [r1, #12]
 8003462:	05db      	lsls	r3, r3, #23
 8003464:	4605      	mov	r5, r0
 8003466:	460c      	mov	r4, r1
 8003468:	4616      	mov	r6, r2
 800346a:	d505      	bpl.n	8003478 <__swrite+0x1e>
 800346c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003470:	2302      	movs	r3, #2
 8003472:	2200      	movs	r2, #0
 8003474:	f000 f868 	bl	8003548 <_lseek_r>
 8003478:	89a3      	ldrh	r3, [r4, #12]
 800347a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800347e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003482:	81a3      	strh	r3, [r4, #12]
 8003484:	4632      	mov	r2, r6
 8003486:	463b      	mov	r3, r7
 8003488:	4628      	mov	r0, r5
 800348a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800348e:	f000 b817 	b.w	80034c0 <_write_r>

08003492 <__sseek>:
 8003492:	b510      	push	{r4, lr}
 8003494:	460c      	mov	r4, r1
 8003496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800349a:	f000 f855 	bl	8003548 <_lseek_r>
 800349e:	1c43      	adds	r3, r0, #1
 80034a0:	89a3      	ldrh	r3, [r4, #12]
 80034a2:	bf15      	itete	ne
 80034a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80034a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80034aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80034ae:	81a3      	strheq	r3, [r4, #12]
 80034b0:	bf18      	it	ne
 80034b2:	81a3      	strhne	r3, [r4, #12]
 80034b4:	bd10      	pop	{r4, pc}

080034b6 <__sclose>:
 80034b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ba:	f000 b813 	b.w	80034e4 <_close_r>
	...

080034c0 <_write_r>:
 80034c0:	b538      	push	{r3, r4, r5, lr}
 80034c2:	4d07      	ldr	r5, [pc, #28]	; (80034e0 <_write_r+0x20>)
 80034c4:	4604      	mov	r4, r0
 80034c6:	4608      	mov	r0, r1
 80034c8:	4611      	mov	r1, r2
 80034ca:	2200      	movs	r2, #0
 80034cc:	602a      	str	r2, [r5, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	f7fd fa9e 	bl	8000a10 <_write>
 80034d4:	1c43      	adds	r3, r0, #1
 80034d6:	d102      	bne.n	80034de <_write_r+0x1e>
 80034d8:	682b      	ldr	r3, [r5, #0]
 80034da:	b103      	cbz	r3, 80034de <_write_r+0x1e>
 80034dc:	6023      	str	r3, [r4, #0]
 80034de:	bd38      	pop	{r3, r4, r5, pc}
 80034e0:	20000694 	.word	0x20000694

080034e4 <_close_r>:
 80034e4:	b538      	push	{r3, r4, r5, lr}
 80034e6:	4d06      	ldr	r5, [pc, #24]	; (8003500 <_close_r+0x1c>)
 80034e8:	2300      	movs	r3, #0
 80034ea:	4604      	mov	r4, r0
 80034ec:	4608      	mov	r0, r1
 80034ee:	602b      	str	r3, [r5, #0]
 80034f0:	f7fd fa9c 	bl	8000a2c <_close>
 80034f4:	1c43      	adds	r3, r0, #1
 80034f6:	d102      	bne.n	80034fe <_close_r+0x1a>
 80034f8:	682b      	ldr	r3, [r5, #0]
 80034fa:	b103      	cbz	r3, 80034fe <_close_r+0x1a>
 80034fc:	6023      	str	r3, [r4, #0]
 80034fe:	bd38      	pop	{r3, r4, r5, pc}
 8003500:	20000694 	.word	0x20000694

08003504 <_fstat_r>:
 8003504:	b538      	push	{r3, r4, r5, lr}
 8003506:	4d07      	ldr	r5, [pc, #28]	; (8003524 <_fstat_r+0x20>)
 8003508:	2300      	movs	r3, #0
 800350a:	4604      	mov	r4, r0
 800350c:	4608      	mov	r0, r1
 800350e:	4611      	mov	r1, r2
 8003510:	602b      	str	r3, [r5, #0]
 8003512:	f7fd fa8e 	bl	8000a32 <_fstat>
 8003516:	1c43      	adds	r3, r0, #1
 8003518:	d102      	bne.n	8003520 <_fstat_r+0x1c>
 800351a:	682b      	ldr	r3, [r5, #0]
 800351c:	b103      	cbz	r3, 8003520 <_fstat_r+0x1c>
 800351e:	6023      	str	r3, [r4, #0]
 8003520:	bd38      	pop	{r3, r4, r5, pc}
 8003522:	bf00      	nop
 8003524:	20000694 	.word	0x20000694

08003528 <_isatty_r>:
 8003528:	b538      	push	{r3, r4, r5, lr}
 800352a:	4d06      	ldr	r5, [pc, #24]	; (8003544 <_isatty_r+0x1c>)
 800352c:	2300      	movs	r3, #0
 800352e:	4604      	mov	r4, r0
 8003530:	4608      	mov	r0, r1
 8003532:	602b      	str	r3, [r5, #0]
 8003534:	f7fd fa82 	bl	8000a3c <_isatty>
 8003538:	1c43      	adds	r3, r0, #1
 800353a:	d102      	bne.n	8003542 <_isatty_r+0x1a>
 800353c:	682b      	ldr	r3, [r5, #0]
 800353e:	b103      	cbz	r3, 8003542 <_isatty_r+0x1a>
 8003540:	6023      	str	r3, [r4, #0]
 8003542:	bd38      	pop	{r3, r4, r5, pc}
 8003544:	20000694 	.word	0x20000694

08003548 <_lseek_r>:
 8003548:	b538      	push	{r3, r4, r5, lr}
 800354a:	4d07      	ldr	r5, [pc, #28]	; (8003568 <_lseek_r+0x20>)
 800354c:	4604      	mov	r4, r0
 800354e:	4608      	mov	r0, r1
 8003550:	4611      	mov	r1, r2
 8003552:	2200      	movs	r2, #0
 8003554:	602a      	str	r2, [r5, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	f7fd fa72 	bl	8000a40 <_lseek>
 800355c:	1c43      	adds	r3, r0, #1
 800355e:	d102      	bne.n	8003566 <_lseek_r+0x1e>
 8003560:	682b      	ldr	r3, [r5, #0]
 8003562:	b103      	cbz	r3, 8003566 <_lseek_r+0x1e>
 8003564:	6023      	str	r3, [r4, #0]
 8003566:	bd38      	pop	{r3, r4, r5, pc}
 8003568:	20000694 	.word	0x20000694

0800356c <__malloc_lock>:
 800356c:	4801      	ldr	r0, [pc, #4]	; (8003574 <__malloc_lock+0x8>)
 800356e:	f7ff bb55 	b.w	8002c1c <__retarget_lock_acquire_recursive>
 8003572:	bf00      	nop
 8003574:	2000068c 	.word	0x2000068c

08003578 <__malloc_unlock>:
 8003578:	4801      	ldr	r0, [pc, #4]	; (8003580 <__malloc_unlock+0x8>)
 800357a:	f7ff bb50 	b.w	8002c1e <__retarget_lock_release_recursive>
 800357e:	bf00      	nop
 8003580:	2000068c 	.word	0x2000068c

08003584 <_read_r>:
 8003584:	b538      	push	{r3, r4, r5, lr}
 8003586:	4d07      	ldr	r5, [pc, #28]	; (80035a4 <_read_r+0x20>)
 8003588:	4604      	mov	r4, r0
 800358a:	4608      	mov	r0, r1
 800358c:	4611      	mov	r1, r2
 800358e:	2200      	movs	r2, #0
 8003590:	602a      	str	r2, [r5, #0]
 8003592:	461a      	mov	r2, r3
 8003594:	f7fd fa2c 	bl	80009f0 <_read>
 8003598:	1c43      	adds	r3, r0, #1
 800359a:	d102      	bne.n	80035a2 <_read_r+0x1e>
 800359c:	682b      	ldr	r3, [r5, #0]
 800359e:	b103      	cbz	r3, 80035a2 <_read_r+0x1e>
 80035a0:	6023      	str	r3, [r4, #0]
 80035a2:	bd38      	pop	{r3, r4, r5, pc}
 80035a4:	20000694 	.word	0x20000694

080035a8 <_init>:
 80035a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035aa:	bf00      	nop
 80035ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ae:	bc08      	pop	{r3}
 80035b0:	469e      	mov	lr, r3
 80035b2:	4770      	bx	lr

080035b4 <_fini>:
 80035b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b6:	bf00      	nop
 80035b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ba:	bc08      	pop	{r3}
 80035bc:	469e      	mov	lr, r3
 80035be:	4770      	bx	lr
