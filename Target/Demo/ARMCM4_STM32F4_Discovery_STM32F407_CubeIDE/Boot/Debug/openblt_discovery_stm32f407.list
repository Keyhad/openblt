
openblt_discovery_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000153a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000343c  08015530  08015530  00025530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801896c  0801896c  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801896c  0801896c  0002896c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018974  08018974  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018974  08018974  00028974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018978  08018978  00028978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801897c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008e64  200001f0  08018b6c  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20009054  08018b6c  00039054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005cb60  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000ab55  00000000  00000000  0008cd80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023c0  00000000  00000000  000978d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002960  00000000  00000000  00099c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00037af0  00000000  00000000  0009c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003439d  00000000  00000000  000d40e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f985a  00000000  00000000  00108485  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00201cdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fc0  00000000  00000000  00201d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00024aa8  00000000  00000000  00208d1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015518 	.word	0x08015518

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08015518 	.word	0x08015518

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <AppInit>:
**            software program initialization.
** \return    none.
**
****************************************************************************************/
void AppInit(void)
{
 8000580:	b508      	push	{r3, lr}
  /* initialize the bootloader */
  BootInit();
 8000582:	f003 ff83 	bl	800448c <BootInit>
} /*** end of AppInit ***/
 8000586:	bd08      	pop	{r3, pc}

08000588 <AppTask>:
**            in the program loop.
** \return    none.
**
****************************************************************************************/
void AppTask(void)
{
 8000588:	b508      	push	{r3, lr}
  /* Run the bootloader task. */
  BootTask();
 800058a:	f003 ff8f 	bl	80044ac <BootTask>
} /*** end of AppTask ***/
 800058e:	bd08      	pop	{r3, pc}

08000590 <CpuUserProgramStartHook>:
** \return    BLT_TRUE if it is okay to start the user program, BLT_FALSE to keep
**            keep the bootloader active.
**
****************************************************************************************/
blt_bool CpuUserProgramStartHook(void)
{
 8000590:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <CpuUserProgramStartHook+0x18>)
 8000594:	691b      	ldr	r3, [r3, #16]
  /* additional and optional backdoor entry through the pushbutton on the board. to
   * force the bootloader to stay active after reset, keep it pressed during reset.
   */
  if (LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_0) != 0)
 8000596:	f013 0f01 	tst.w	r3, #1
 800059a:	d001      	beq.n	80005a0 <CpuUserProgramStartHook+0x10>
  {
    /* pushbutton pressed, so do not start the user program and keep the
     * bootloader active instead.
     */
    return BLT_FALSE;
 800059c:	2000      	movs	r0, #0
  /* clean up the LED driver */
  LedBlinkExit();

  /* okay to start the user program */
  return BLT_TRUE;
} /*** end of CpuUserProgramStartHook ***/
 800059e:	bd08      	pop	{r3, pc}
  LedBlinkExit();
 80005a0:	f000 f8e8 	bl	8000774 <LedBlinkExit>
  return BLT_TRUE;
 80005a4:	2001      	movs	r0, #1
 80005a6:	e7fa      	b.n	800059e <CpuUserProgramStartHook+0xe>
 80005a8:	40020000 	.word	0x40020000

080005ac <CopInitHook>:
**            watchdog.
** \return    none.
**
****************************************************************************************/
void CopInitHook(void)
{
 80005ac:	b508      	push	{r3, lr}
  /* this function is called upon initialization. might as well use it to initialize
   * the LED driver. It is kind of a visual watchdog anyways.
   */
  LedBlinkInit(100);
 80005ae:	2064      	movs	r0, #100	; 0x64
 80005b0:	f000 f8ac 	bl	800070c <LedBlinkInit>
} /*** end of CopInitHook ***/
 80005b4:	bd08      	pop	{r3, pc}

080005b6 <CopServiceHook>:
**            the watchdog to prevent a watchdog reset.
** \return    none.
**
****************************************************************************************/
void CopServiceHook(void)
{
 80005b6:	b508      	push	{r3, lr}
  /* run the LED blink task. this is a better place to do it than in the main() program
   * loop. certain operations such as flash erase can take a long time, which would cause
   * a blink interval to be skipped. this function is also called during such operations,
   * so no blink intervals will be skipped when calling the LED blink task here.
   */
  LedBlinkTask();
 80005b8:	f000 f8ae 	bl	8000718 <LedBlinkTask>
} /*** end of CopServiceHook ***/
 80005bc:	bd08      	pop	{r3, pc}
	...

080005c0 <FileIsFirmwareUpdateRequestedHook>:
**            storage, etc.
** \return    BLT_TRUE if a firmware update is requested, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FileIsFirmwareUpdateRequestedHook(void)
{
 80005c0:	b500      	push	{lr}
 80005c2:	b0c7      	sub	sp, #284	; 0x11c
  FILINFO fileInfoObject = { 0 }; /* needs to be zeroed according to f_stat docs */;
 80005c4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80005c8:	2100      	movs	r1, #0
 80005ca:	4668      	mov	r0, sp
 80005cc:	f014 f809 	bl	80145e2 <memset>
   * update is started. When successfully completed, the firmware file is deleted.
   * During the firmware update, progress information is written to a file called
   * bootlog.txt and additionally outputted on UART @57600 bps for debugging purposes.
   */
  /* check if firmware file is present and SD-card is accessible */
  if (f_stat(firmwareFilename, &fileInfoObject) == FR_OK) 
 80005d0:	4669      	mov	r1, sp
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <FileIsFirmwareUpdateRequestedHook+0x38>)
 80005d4:	f006 fcc6 	bl	8006f64 <f_stat>
 80005d8:	b940      	cbnz	r0, 80005ec <FileIsFirmwareUpdateRequestedHook+0x2c>
  {
    /* check if the filesize is valid and that it is not a directory */
    if ( (fileInfoObject.fsize > 0) && (!(fileInfoObject.fattrib & AM_DIR)) )
 80005da:	9b00      	ldr	r3, [sp, #0]
 80005dc:	b153      	cbz	r3, 80005f4 <FileIsFirmwareUpdateRequestedHook+0x34>
 80005de:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80005e2:	f013 0f10 	tst.w	r3, #16
 80005e6:	d102      	bne.n	80005ee <FileIsFirmwareUpdateRequestedHook+0x2e>
    {
      /* all conditions are met to start a firmware update from local file storage */
      return BLT_TRUE;
 80005e8:	2001      	movs	r0, #1
 80005ea:	e000      	b.n	80005ee <FileIsFirmwareUpdateRequestedHook+0x2e>
    }
  }
  /* still here so no firmware update request is pending */  
  return BLT_FALSE;
 80005ec:	2000      	movs	r0, #0
} /*** end of FileIsFirmwareUpdateRequestedHook ***/
 80005ee:	b047      	add	sp, #284	; 0x11c
 80005f0:	f85d fb04 	ldr.w	pc, [sp], #4
  return BLT_FALSE;
 80005f4:	2000      	movs	r0, #0
 80005f6:	e7fa      	b.n	80005ee <FileIsFirmwareUpdateRequestedHook+0x2e>
 80005f8:	08015540 	.word	0x08015540

080005fc <FileGetFirmwareFilenameHook>:
**
****************************************************************************************/
const blt_char *FileGetFirmwareFilenameHook(void)
{
  return firmwareFilename;
} /*** end of FileGetFirmwareFilenameHook ***/
 80005fc:	4800      	ldr	r0, [pc, #0]	; (8000600 <FileGetFirmwareFilenameHook+0x4>)
 80005fe:	4770      	bx	lr
 8000600:	08015540 	.word	0x08015540

08000604 <FileFirmwareUpdateStartedHook>:
**            update from local storage just started. 
** \return    none.
**
****************************************************************************************/
void FileFirmwareUpdateStartedHook(void)
{
 8000604:	b508      	push	{r3, lr}
  #if (BOOT_FILE_LOGGING_ENABLE > 0)
  /* create/overwrite the logfile */
  logfile.canUse = BLT_FALSE;
 8000606:	4807      	ldr	r0, [pc, #28]	; (8000624 <FileFirmwareUpdateStartedHook+0x20>)
 8000608:	2300      	movs	r3, #0
 800060a:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  if (f_open(&logfile.handle, "/bootlog.txt", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800060e:	220a      	movs	r2, #10
 8000610:	4905      	ldr	r1, [pc, #20]	; (8000628 <FileFirmwareUpdateStartedHook+0x24>)
 8000612:	f006 f90d 	bl	8006830 <f_open>
 8000616:	b918      	cbnz	r0, 8000620 <FileFirmwareUpdateStartedHook+0x1c>
  {
    logfile.canUse = BLT_TRUE;
 8000618:	4b02      	ldr	r3, [pc, #8]	; (8000624 <FileFirmwareUpdateStartedHook+0x20>)
 800061a:	2201      	movs	r2, #1
 800061c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  }
  #endif
} /*** end of FileFirmwareUpdateStartedHook ***/
 8000620:	bd08      	pop	{r3, pc}
 8000622:	bf00      	nop
 8000624:	2000020c 	.word	0x2000020c
 8000628:	08015530 	.word	0x08015530

0800062c <FileFirmwareUpdateCompletedHook>:
**            update was successfully completed.
** \return    none.
**
****************************************************************************************/
void FileFirmwareUpdateCompletedHook(void)
{
 800062c:	b510      	push	{r4, lr}
  #if (BOOT_FILE_LOGGING_ENABLE > 0)
  blt_int32u timeoutTime;

  /* close the log file */
  if (logfile.canUse == BLT_TRUE)
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <FileFirmwareUpdateCompletedHook+0x38>)
 8000630:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000634:	2b01      	cmp	r3, #1
 8000636:	d010      	beq.n	800065a <FileFirmwareUpdateCompletedHook+0x2e>
    f_close(&logfile.handle);
  }
  /* wait for all logging related transmission to complete with a maximum wait time of
   * 100ms.
   */
  timeoutTime = TimerGet() + 100;
 8000638:	f003 fed4 	bl	80043e4 <TimerGet>
 800063c:	f100 0464 	add.w	r4, r0, #100	; 0x64
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <FileFirmwareUpdateCompletedHook+0x3c>)
 8000642:	681b      	ldr	r3, [r3, #0]
  while (LL_USART_IsActiveFlag_TC(USART6) == 0)
 8000644:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000648:	d103      	bne.n	8000652 <FileFirmwareUpdateCompletedHook+0x26>
  {
    /* check for timeout */
    if (TimerGet() > timeoutTime)
 800064a:	f003 fecb 	bl	80043e4 <TimerGet>
 800064e:	42a0      	cmp	r0, r4
 8000650:	d9f6      	bls.n	8000640 <FileFirmwareUpdateCompletedHook+0x14>
      break;
    }
  }
  #endif
  /* now delete the firmware file from the disk since the update was successful */
  f_unlink(firmwareFilename);
 8000652:	4806      	ldr	r0, [pc, #24]	; (800066c <FileFirmwareUpdateCompletedHook+0x40>)
 8000654:	f006 fcb0 	bl	8006fb8 <f_unlink>
} /*** end of FileFirmwareUpdateCompletedHook ***/
 8000658:	bd10      	pop	{r4, pc}
    f_close(&logfile.handle);
 800065a:	4802      	ldr	r0, [pc, #8]	; (8000664 <FileFirmwareUpdateCompletedHook+0x38>)
 800065c:	f006 fbb4 	bl	8006dc8 <f_close>
 8000660:	e7ea      	b.n	8000638 <FileFirmwareUpdateCompletedHook+0xc>
 8000662:	bf00      	nop
 8000664:	2000020c 	.word	0x2000020c
 8000668:	40011400 	.word	0x40011400
 800066c:	08015540 	.word	0x08015540

08000670 <FileFirmwareUpdateErrorHook>:
**            update. Refer to <file.h> for a list of available error codes.
** \return    none.
**
****************************************************************************************/
void FileFirmwareUpdateErrorHook(blt_int8u error_code)
{
 8000670:	b508      	push	{r3, lr}
  #if (BOOT_FILE_LOGGING_ENABLE > 0)
  /* error detected which stops the firmware update, so close the log file */
  if (logfile.canUse == BLT_TRUE)
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <FileFirmwareUpdateErrorHook+0x18>)
 8000674:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000678:	2b01      	cmp	r3, #1
 800067a:	d000      	beq.n	800067e <FileFirmwareUpdateErrorHook+0xe>
  {
    f_close(&logfile.handle);
  }
  #endif
} /*** end of FileFirmwareUpdateErrorHook ***/
 800067c:	bd08      	pop	{r3, pc}
    f_close(&logfile.handle);
 800067e:	4802      	ldr	r0, [pc, #8]	; (8000688 <FileFirmwareUpdateErrorHook+0x18>)
 8000680:	f006 fba2 	bl	8006dc8 <f_close>
} /*** end of FileFirmwareUpdateErrorHook ***/
 8000684:	e7fa      	b.n	800067c <FileFirmwareUpdateErrorHook+0xc>
 8000686:	bf00      	nop
 8000688:	2000020c 	.word	0x2000020c

0800068c <FileFirmwareUpdateLogHook>:
** \param     info_string Pointer to a character array with the log entry info.
** \return    none.
**
****************************************************************************************/
void FileFirmwareUpdateLogHook(blt_char *info_string)
{
 800068c:	b538      	push	{r3, r4, r5, lr}
 800068e:	4605      	mov	r5, r0
  blt_int32u timeoutTime;

  /* write the string to the log file */
  if (logfile.canUse == BLT_TRUE)
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <FileFirmwareUpdateLogHook+0x54>)
 8000692:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000696:	2b01      	cmp	r3, #1
 8000698:	d10c      	bne.n	80006b4 <FileFirmwareUpdateLogHook+0x28>
  {
    if (f_puts(info_string, &logfile.handle) < 0)
 800069a:	4911      	ldr	r1, [pc, #68]	; (80006e0 <FileFirmwareUpdateLogHook+0x54>)
 800069c:	f006 fd14 	bl	80070c8 <f_puts>
 80006a0:	2800      	cmp	r0, #0
 80006a2:	da07      	bge.n	80006b4 <FileFirmwareUpdateLogHook+0x28>
    {
      logfile.canUse = BLT_FALSE;
 80006a4:	480e      	ldr	r0, [pc, #56]	; (80006e0 <FileFirmwareUpdateLogHook+0x54>)
 80006a6:	2300      	movs	r3, #0
 80006a8:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
      f_close(&logfile.handle);
 80006ac:	f006 fb8c 	bl	8006dc8 <f_close>
 80006b0:	e000      	b.n	80006b4 <FileFirmwareUpdateLogHook+0x28>
      {
        break;
      }
    }
    /* point to the next character in the string */
    info_string++;
 80006b2:	3501      	adds	r5, #1
  while(*info_string != '\0')
 80006b4:	782b      	ldrb	r3, [r5, #0]
 80006b6:	b18b      	cbz	r3, 80006dc <FileFirmwareUpdateLogHook+0x50>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80006b8:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <FileFirmwareUpdateLogHook+0x58>)
 80006ba:	6053      	str	r3, [r2, #4]
    timeoutTime = TimerGet() + 10;
 80006bc:	f003 fe92 	bl	80043e4 <TimerGet>
 80006c0:	f100 040a 	add.w	r4, r0, #10
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <FileFirmwareUpdateLogHook+0x58>)
 80006c6:	681b      	ldr	r3, [r3, #0]
    while (LL_USART_IsActiveFlag_TXE(USART6) == 0)
 80006c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80006cc:	d1f1      	bne.n	80006b2 <FileFirmwareUpdateLogHook+0x26>
      CopService();
 80006ce:	f003 ff75 	bl	80045bc <CopService>
      if (TimerGet() > timeoutTime)
 80006d2:	f003 fe87 	bl	80043e4 <TimerGet>
 80006d6:	42a0      	cmp	r0, r4
 80006d8:	d9f4      	bls.n	80006c4 <FileFirmwareUpdateLogHook+0x38>
 80006da:	e7ea      	b.n	80006b2 <FileFirmwareUpdateLogHook+0x26>
  }
} /*** end of FileFirmwareUpdateLogHook ***/
 80006dc:	bd38      	pop	{r3, r4, r5, pc}
 80006de:	bf00      	nop
 80006e0:	2000020c 	.word	0x2000020c
 80006e4:	40011400 	.word	0x40011400

080006e8 <XcpGetSeedHook>:
**
****************************************************************************************/
blt_int8u XcpGetSeedHook(blt_int8u resource, blt_int8u *seed)
{
  /* request seed for unlocking ProGraMming resource */
  if ((resource & XCP_RES_PGM) != 0)
 80006e8:	f010 0f10 	tst.w	r0, #16
 80006ec:	d001      	beq.n	80006f2 <XcpGetSeedHook+0xa>
  {
    seed[0] = 0x55;
 80006ee:	2355      	movs	r3, #85	; 0x55
 80006f0:	700b      	strb	r3, [r1, #0]
  }

  /* return seed length */
  return 1;
} /*** end of XcpGetSeedHook ***/
 80006f2:	2001      	movs	r0, #1
 80006f4:	4770      	bx	lr

080006f6 <XcpVerifyKeyHook>:
  /* the example key algorithm in "libseednkey.dll" works as follows:
   *  - PGM will be unlocked if key = seed - 1
   */

  /* check key for unlocking ProGraMming resource */
  if ((resource == XCP_RES_PGM) && (key[0] == (0x55-1)))
 80006f6:	2810      	cmp	r0, #16
 80006f8:	d001      	beq.n	80006fe <XcpVerifyKeyHook+0x8>
    /* correct key received for unlocking PGM resource */
    return 1;
  }

  /* still here so key incorrect */
  return 0;
 80006fa:	2000      	movs	r0, #0
 80006fc:	4770      	bx	lr
  if ((resource == XCP_RES_PGM) && (key[0] == (0x55-1)))
 80006fe:	780b      	ldrb	r3, [r1, #0]
 8000700:	2b54      	cmp	r3, #84	; 0x54
 8000702:	d001      	beq.n	8000708 <XcpVerifyKeyHook+0x12>
  return 0;
 8000704:	2000      	movs	r0, #0
 8000706:	4770      	bx	lr
    return 1;
 8000708:	2001      	movs	r0, #1
} /*** end of XcpVerifyKeyHook ***/
 800070a:	4770      	bx	lr

0800070c <LedBlinkInit>:
**
****************************************************************************************/
void LedBlinkInit(blt_int16u interval_ms)
{
  /* store the interval time between LED toggles */
  ledBlinkIntervalMs = interval_ms;
 800070c:	4b01      	ldr	r3, [pc, #4]	; (8000714 <LedBlinkInit+0x8>)
 800070e:	8018      	strh	r0, [r3, #0]
} /*** end of LedBlinkInit ***/
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	20000438 	.word	0x20000438

08000718 <LedBlinkTask>:
** \brief     Task function for blinking the LED as a fixed timer interval.
** \return    none.
**
****************************************************************************************/
void LedBlinkTask(void)
{
 8000718:	b508      	push	{r3, lr}
  static blt_bool ledOn = BLT_FALSE;
  static blt_int32u nextBlinkEvent = 0;

  /* check for blink event */
  if (TimerGet() >= nextBlinkEvent)
 800071a:	f003 fe63 	bl	80043e4 <TimerGet>
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <LedBlinkTask+0x4c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4298      	cmp	r0, r3
 8000724:	d312      	bcc.n	800074c <LedBlinkTask+0x34>
  {
    /* toggle the LED state */
    if (ledOn == BLT_FALSE)
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <LedBlinkTask+0x50>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	b983      	cbnz	r3, 800074e <LedBlinkTask+0x36>
    {
      ledOn = BLT_TRUE;
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <LedBlinkTask+0x50>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
      SET_LED3_ORANGE(RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <LedBlinkTask+0x54>)
 800073a:	f001 fb6f 	bl	8001e1c <HAL_GPIO_WritePin>
    {
      ledOn = BLT_FALSE;
      SET_LED3_ORANGE(SET);
    }
    /* schedule the next blink event */
    nextBlinkEvent = TimerGet() + ledBlinkIntervalMs;
 800073e:	f003 fe51 	bl	80043e4 <TimerGet>
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <LedBlinkTask+0x58>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	4418      	add	r0, r3
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <LedBlinkTask+0x4c>)
 800074a:	6018      	str	r0, [r3, #0]
  }
} /*** end of LedBlinkTask ***/
 800074c:	bd08      	pop	{r3, pc}
      ledOn = BLT_FALSE;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <LedBlinkTask+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
      SET_LED3_ORANGE(SET);
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075a:	4804      	ldr	r0, [pc, #16]	; (800076c <LedBlinkTask+0x54>)
 800075c:	f001 fb5e 	bl	8001e1c <HAL_GPIO_WritePin>
 8000760:	e7ed      	b.n	800073e <LedBlinkTask+0x26>
 8000762:	bf00      	nop
 8000764:	2000043c 	.word	0x2000043c
 8000768:	2000043a 	.word	0x2000043a
 800076c:	40020c00 	.word	0x40020c00
 8000770:	20000438 	.word	0x20000438

08000774 <LedBlinkExit>:
**            exit.
** \return    none.
**
****************************************************************************************/
void LedBlinkExit(void)
{
 8000774:	b508      	push	{r3, lr}
  /* turn the LED off */
  SET_LED3_ORANGE(SET);
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077c:	4801      	ldr	r0, [pc, #4]	; (8000784 <LedBlinkExit+0x10>)
 800077e:	f001 fb4d 	bl	8001e1c <HAL_GPIO_WritePin>
} /*** end of LedBlinkExit ***/
 8000782:	bd08      	pop	{r3, pc}
 8000784:	40020c00 	.word	0x40020c00

08000788 <NetInit>:
/**
 *
 */
void NetInit(void)
{
}
 8000788:	4770      	bx	lr

0800078a <NetTransmitPacket>:
//	struct pbuf buf;
//	buf.payload = data;
//	buf.len = len;
//	gnetif.output(&gnetif, &buf, gnetif. const struct eth_addr * src, const struct eth_addr * dst,
//            u16_t eth_type);
}
 800078a:	4770      	bx	lr

0800078c <NetReceivePacket>:
//	struct netif *n = &gnetif;
//	n->input(p, n);

//	data = buf.payload;
//	*len = buf.len;
}
 800078c:	4770      	bx	lr
	...

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b570      	push	{r4, r5, r6, lr}
 8000792:	b08c      	sub	sp, #48	; 0x30
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	2400      	movs	r4, #0
 8000796:	9408      	str	r4, [sp, #32]
 8000798:	9409      	str	r4, [sp, #36]	; 0x24
 800079a:	940a      	str	r4, [sp, #40]	; 0x28
 800079c:	940b      	str	r4, [sp, #44]	; 0x2c
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800079e:	4b28      	ldr	r3, [pc, #160]	; (8000840 <MX_GPIO_Init+0xb0>)
 80007a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007a2:	f042 0204 	orr.w	r2, r2, #4
 80007a6:	631a      	str	r2, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007aa:	f002 0204 	and.w	r2, r2, #4
 80007ae:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 80007b0:	9a05      	ldr	r2, [sp, #20]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007b8:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007bc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80007c0:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80007c2:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007c6:	f042 0201 	orr.w	r2, r2, #1
 80007ca:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ce:	f002 0201 	and.w	r2, r2, #1
 80007d2:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 80007d4:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d8:	f042 0202 	orr.w	r2, r2, #2
 80007dc:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007e0:	f002 0202 	and.w	r2, r2, #2
 80007e4:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80007e6:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ea:	f042 0208 	orr.w	r2, r2, #8
 80007ee:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80007f8:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80007fa:	4812      	ldr	r0, [pc, #72]	; (8000844 <MX_GPIO_Init+0xb4>)
 80007fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000800:	6183      	str	r3, [r0, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000802:	4e11      	ldr	r6, [pc, #68]	; (8000848 <MX_GPIO_Init+0xb8>)
 8000804:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8000808:	61b2      	str	r2, [r6, #24]

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800080a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800080c:	2501      	movs	r5, #1
 800080e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000810:	a906      	add	r1, sp, #24
 8000812:	f002 f96d 	bl	8002af0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000816:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000818:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800081a:	940a      	str	r4, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	a906      	add	r1, sp, #24
 800081e:	480b      	ldr	r0, [pc, #44]	; (800084c <MX_GPIO_Init+0xbc>)
 8000820:	f002 f966 	bl	8002af0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8000824:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000828:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800082a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800082c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800082e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000830:	940a      	str	r4, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000832:	a906      	add	r1, sp, #24
 8000834:	4630      	mov	r0, r6
 8000836:	f002 f95b 	bl	8002af0 <LL_GPIO_Init>

}
 800083a:	b00c      	add	sp, #48	; 0x30
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40020800 	.word	0x40020800
 8000848:	40020c00 	.word	0x40020c00
 800084c:	40020000 	.word	0x40020000

08000850 <MX_USART6_UART_Init>:
{
 8000850:	b510      	push	{r4, lr}
 8000852:	b090      	sub	sp, #64	; 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000854:	2400      	movs	r4, #0
 8000856:	9409      	str	r4, [sp, #36]	; 0x24
 8000858:	940a      	str	r4, [sp, #40]	; 0x28
 800085a:	940b      	str	r4, [sp, #44]	; 0x2c
 800085c:	940c      	str	r4, [sp, #48]	; 0x30
 800085e:	940d      	str	r4, [sp, #52]	; 0x34
 8000860:	940e      	str	r4, [sp, #56]	; 0x38
 8000862:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	9406      	str	r4, [sp, #24]
 8000866:	9407      	str	r4, [sp, #28]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_USART6_UART_Init+0x90>)
 800086a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800086c:	f042 0220 	orr.w	r2, r2, #32
 8000870:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000874:	f002 0220 	and.w	r2, r2, #32
 8000878:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800087a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800087c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800087e:	f042 0204 	orr.w	r2, r2, #4
 8000882:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800088c:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800088e:	23c0      	movs	r3, #192	; 0xc0
 8000890:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000892:	2302      	movs	r3, #2
 8000894:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800089a:	2308      	movs	r3, #8
 800089c:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089e:	a903      	add	r1, sp, #12
 80008a0:	4810      	ldr	r0, [pc, #64]	; (80008e4 <MX_USART6_UART_Init+0x94>)
 80008a2:	f002 f925 	bl	8002af0 <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 115200;
 80008a6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80008aa:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80008ac:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80008ae:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80008b0:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80008b2:	230c      	movs	r3, #12
 80008b4:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80008b6:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80008b8:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART6, &USART_InitStruct);
 80008ba:	4c0b      	ldr	r4, [pc, #44]	; (80008e8 <MX_USART6_UART_Init+0x98>)
 80008bc:	a909      	add	r1, sp, #36	; 0x24
 80008be:	4620      	mov	r0, r4
 80008c0:	f002 fdfe 	bl	80034c0 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80008c4:	6923      	ldr	r3, [r4, #16]
 80008c6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80008ca:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80008cc:	6963      	ldr	r3, [r4, #20]
 80008ce:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80008d2:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80008d4:	68e3      	ldr	r3, [r4, #12]
 80008d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008da:	60e3      	str	r3, [r4, #12]
}
 80008dc:	b010      	add	sp, #64	; 0x40
 80008de:	bd10      	pop	{r4, pc}
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020800 	.word	0x40020800
 80008e8:	40011400 	.word	0x40011400

080008ec <SystemClock_Config>:
{
 80008ec:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80008ee:	4a2e      	ldr	r2, [pc, #184]	; (80009a8 <SystemClock_Config+0xbc>)
 80008f0:	6813      	ldr	r3, [r2, #0]
 80008f2:	f023 030f 	bic.w	r3, r3, #15
 80008f6:	f043 0305 	orr.w	r3, r3, #5
 80008fa:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80008fc:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <SystemClock_Config+0xbc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f003 030f 	and.w	r3, r3, #15
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000904:	2b05      	cmp	r3, #5
 8000906:	d1f9      	bne.n	80008fc <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000908:	4a28      	ldr	r2, [pc, #160]	; (80009ac <SystemClock_Config+0xc0>)
 800090a:	6813      	ldr	r3, [r2, #0]
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6013      	str	r3, [r2, #0]
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000912:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8000916:	6813      	ldr	r3, [r2, #0]
 8000918:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000920:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000922:	6813      	ldr	r3, [r2, #0]
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <SystemClock_Config+0xc4>)
 800092c:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSI_IsReady() != 1)
 800092e:	f013 0f02 	tst.w	r3, #2
 8000932:	d0fa      	beq.n	800092a <SystemClock_Config+0x3e>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000934:	4a1e      	ldr	r2, [pc, #120]	; (80009b0 <SystemClock_Config+0xc4>)
 8000936:	6851      	ldr	r1, [r2, #4]
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <SystemClock_Config+0xc8>)
 800093a:	400b      	ands	r3, r1
 800093c:	f443 5328 	orr.w	r3, r3, #10752	; 0x2a00
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	6053      	str	r3, [r2, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000946:	6853      	ldr	r3, [r2, #4]
 8000948:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800094c:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800094e:	6813      	ldr	r3, [r2, #0]
 8000950:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000954:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <SystemClock_Config+0xc4>)
 8000958:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 800095a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800095e:	d0fa      	beq.n	8000956 <SystemClock_Config+0x6a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <SystemClock_Config+0xc4>)
 8000962:	689a      	ldr	r2, [r3, #8]
 8000964:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000968:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8000970:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000974:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800097c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000980:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000982:	689a      	ldr	r2, [r3, #8]
 8000984:	f022 0203 	bic.w	r2, r2, #3
 8000988:	f042 0202 	orr.w	r2, r2, #2
 800098c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <SystemClock_Config+0xc4>)
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000996:	2b08      	cmp	r3, #8
 8000998:	d1f9      	bne.n	800098e <SystemClock_Config+0xa2>
  LL_SetSystemCoreClock(168000000);
 800099a:	4807      	ldr	r0, [pc, #28]	; (80009b8 <SystemClock_Config+0xcc>)
 800099c:	f002 fe5a 	bl	8003654 <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 f9b1 	bl	8000d08 <HAL_InitTick>
}
 80009a6:	bd08      	pop	{r3, pc}
 80009a8:	40023c00 	.word	0x40023c00
 80009ac:	40007000 	.word	0x40007000
 80009b0:	40023800 	.word	0x40023800
 80009b4:	ffbf8000 	.word	0xffbf8000
 80009b8:	0a037a00 	.word	0x0a037a00

080009bc <main>:
{
 80009bc:	b570      	push	{r4, r5, r6, lr}
 80009be:	b084      	sub	sp, #16
  HAL_Init();
 80009c0:	f000 f9c8 	bl	8000d54 <HAL_Init>
  SystemClock_Config();
 80009c4:	f7ff ff92 	bl	80008ec <SystemClock_Config>
  MX_GPIO_Init();
 80009c8:	f7ff fee2 	bl	8000790 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80009cc:	f7ff ff40 	bl	8000850 <MX_USART6_UART_Init>
  MX_LWIP_Init();
 80009d0:	f002 fe46 	bl	8003660 <MX_LWIP_Init>
  AppInit();
 80009d4:	f7ff fdd4 	bl	8000580 <AppInit>
  printf("... Main start ... \n");
 80009d8:	4816      	ldr	r0, [pc, #88]	; (8000a34 <main+0x78>)
 80009da:	f013 fe7f 	bl	80146dc <puts>
  printf("... Mac ... %2.2X:%2.2X:%2.2X:%2.2X:%2.2X:%2.2X\n", gnetif.hwaddr[0], gnetif.hwaddr[1],
 80009de:	4c16      	ldr	r4, [pc, #88]	; (8000a38 <main+0x7c>)
 80009e0:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
 80009e4:	f894 20bd 	ldrb.w	r2, [r4, #189]	; 0xbd
		  gnetif.hwaddr[2], gnetif.hwaddr[3], gnetif.hwaddr[4], gnetif.hwaddr[5]);
 80009e8:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
 80009ec:	f894 00bf 	ldrb.w	r0, [r4, #191]	; 0xbf
 80009f0:	f894 50c0 	ldrb.w	r5, [r4, #192]	; 0xc0
 80009f4:	f894 60c1 	ldrb.w	r6, [r4, #193]	; 0xc1
  printf("... Mac ... %2.2X:%2.2X:%2.2X:%2.2X:%2.2X:%2.2X\n", gnetif.hwaddr[0], gnetif.hwaddr[1],
 80009f8:	9602      	str	r6, [sp, #8]
 80009fa:	9501      	str	r5, [sp, #4]
 80009fc:	9000      	str	r0, [sp, #0]
 80009fe:	480f      	ldr	r0, [pc, #60]	; (8000a3c <main+0x80>)
 8000a00:	f013 fdf8 	bl	80145f4 <iprintf>
  u32_t ip = gnetif.ip_addr.u_addr.ip4.addr;
 8000a04:	6825      	ldr	r5, [r4, #0]
 8000a06:	e003      	b.n	8000a10 <main+0x54>
    MX_LWIP_Process();
 8000a08:	f002 fe72 	bl	80036f0 <MX_LWIP_Process>
    AppTask();
 8000a0c:	f7ff fdbc 	bl	8000588 <AppTask>
	if (!ip && gnetif.ip_addr.u_addr.ip4.addr) {
 8000a10:	2d00      	cmp	r5, #0
 8000a12:	d1f9      	bne.n	8000a08 <main+0x4c>
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <main+0x7c>)
 8000a16:	681c      	ldr	r4, [r3, #0]
 8000a18:	2c00      	cmp	r4, #0
 8000a1a:	d0f5      	beq.n	8000a08 <main+0x4c>
			  (u8_t)(ip >> 24));
 8000a1c:	0e23      	lsrs	r3, r4, #24
	  printf("... IP  ... %d.%d.%d.%d\n",
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8000a24:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8000a28:	b2e1      	uxtb	r1, r4
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <main+0x84>)
 8000a2c:	f013 fde2 	bl	80145f4 <iprintf>
	  ip = gnetif.ip_addr.u_addr.ip4.addr;
 8000a30:	4625      	mov	r5, r4
 8000a32:	e7e9      	b.n	8000a08 <main+0x4c>
 8000a34:	08015560 	.word	0x08015560
 8000a38:	200019bc 	.word	0x200019bc
 8000a3c:	08015574 	.word	0x08015574
 8000a40:	080155a8 	.word	0x080155a8

08000a44 <__io_putchar>:
/* USER CODE END ExternalFunctions */

/* USER CODE BEGIN 0 */
extern void Rs232TransmitByte(unsigned char data);
int __io_putchar(int ch)
{
 8000a44:	b510      	push	{r4, lr}
 8000a46:	4604      	mov	r4, r0
  Rs232TransmitByte(ch);
 8000a48:	b2c0      	uxtb	r0, r0
 8000a4a:	f003 fc6f 	bl	800432c <Rs232TransmitByte>
  //ITM_SendChar(ch);
  return(ch);
}
 8000a4e:	4620      	mov	r0, r4
 8000a50:	bd10      	pop	{r4, pc}
	...

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	2100      	movs	r1, #0
 8000a58:	9100      	str	r1, [sp, #0]
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <HAL_MspInit+0x34>)
 8000a5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a62:	645a      	str	r2, [r3, #68]	; 0x44
 8000a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a66:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000a6a:	9200      	str	r2, [sp, #0]
 8000a6c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	9101      	str	r1, [sp, #4]
 8000a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a76:	641a      	str	r2, [r3, #64]	; 0x40
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	9301      	str	r3, [sp, #4]
 8000a80:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	b002      	add	sp, #8
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800

08000a8c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	2300      	movs	r3, #0
 8000a92:	9303      	str	r3, [sp, #12]
 8000a94:	9304      	str	r3, [sp, #16]
 8000a96:	9305      	str	r3, [sp, #20]
 8000a98:	9306      	str	r3, [sp, #24]
 8000a9a:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDIO)
 8000a9c:	6802      	ldr	r2, [r0, #0]
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <HAL_SD_MspInit+0x94>)
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d001      	beq.n	8000aa8 <HAL_SD_MspInit+0x1c>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000aa4:	b009      	add	sp, #36	; 0x24
 8000aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000aa8:	2400      	movs	r4, #0
 8000aaa:	9400      	str	r4, [sp, #0]
 8000aac:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8000ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ab6:	645a      	str	r2, [r3, #68]	; 0x44
 8000ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000aba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8000abe:	9200      	str	r2, [sp, #0]
 8000ac0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	9401      	str	r4, [sp, #4]
 8000ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ac6:	f042 0204 	orr.w	r2, r2, #4
 8000aca:	631a      	str	r2, [r3, #48]	; 0x30
 8000acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ace:	f002 0204 	and.w	r2, r2, #4
 8000ad2:	9201      	str	r2, [sp, #4]
 8000ad4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad6:	9402      	str	r4, [sp, #8]
 8000ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ada:	f042 0208 	orr.w	r2, r2, #8
 8000ade:	631a      	str	r2, [r3, #48]	; 0x30
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0308 	and.w	r3, r3, #8
 8000ae6:	9302      	str	r3, [sp, #8]
 8000ae8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000aea:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000aee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2702      	movs	r7, #2
 8000af2:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2603      	movs	r6, #3
 8000af6:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000af8:	250c      	movs	r5, #12
 8000afa:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afc:	eb0d 0105 	add.w	r1, sp, r5
 8000b00:	4808      	ldr	r0, [pc, #32]	; (8000b24 <HAL_SD_MspInit+0x98>)
 8000b02:	f001 f8a7 	bl	8001c54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b06:	2304      	movs	r3, #4
 8000b08:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b10:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b12:	eb0d 0105 	add.w	r1, sp, r5
 8000b16:	4804      	ldr	r0, [pc, #16]	; (8000b28 <HAL_SD_MspInit+0x9c>)
 8000b18:	f001 f89c 	bl	8001c54 <HAL_GPIO_Init>
}
 8000b1c:	e7c2      	b.n	8000aa4 <HAL_SD_MspInit+0x18>
 8000b1e:	bf00      	nop
 8000b20:	40012c00 	.word	0x40012c00
 8000b24:	40020800 	.word	0x40020800
 8000b28:	40020c00 	.word	0x40020c00

08000b2c <HAL_MspDeInit>:
/* USER CODE BEGIN 1 */
/**
  * De-Initializes the Global MSP.
  */
void HAL_MspDeInit(void)
{
 8000b2c:	b508      	push	{r3, lr}
  /* Reset the RCC clock configuration to the default reset state. */
  LL_RCC_DeInit();
 8000b2e:	f002 f875 	bl	8002c1c <LL_RCC_DeInit>

  /* Deinit used GPIOs. */
  LL_GPIO_DeInit(GPIOD);
 8000b32:	481b      	ldr	r0, [pc, #108]	; (8000ba0 <HAL_MspDeInit+0x74>)
 8000b34:	f001 ff40 	bl	80029b8 <LL_GPIO_DeInit>
  LL_GPIO_DeInit(GPIOC);
 8000b38:	481a      	ldr	r0, [pc, #104]	; (8000ba4 <HAL_MspDeInit+0x78>)
 8000b3a:	f001 ff3d 	bl	80029b8 <LL_GPIO_DeInit>
  LL_GPIO_DeInit(GPIOB);
 8000b3e:	481a      	ldr	r0, [pc, #104]	; (8000ba8 <HAL_MspDeInit+0x7c>)
 8000b40:	f001 ff3a 	bl	80029b8 <LL_GPIO_DeInit>
  LL_GPIO_DeInit(GPIOA);
 8000b44:	4819      	ldr	r0, [pc, #100]	; (8000bac <HAL_MspDeInit+0x80>)
 8000b46:	f001 ff37 	bl	80029b8 <LL_GPIO_DeInit>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000b4a:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <HAL_MspDeInit+0x84>)
 8000b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b52:	645a      	str	r2, [r3, #68]	; 0x44
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8000b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b56:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8000b5a:	641a      	str	r2, [r3, #64]	; 0x40
 8000b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b5e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8000b62:	641a      	str	r2, [r3, #64]	; 0x40
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8000b64:	4913      	ldr	r1, [pc, #76]	; (8000bb4 <HAL_MspDeInit+0x88>)
 8000b66:	68ca      	ldr	r2, [r1, #12]
 8000b68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000b6c:	60ca      	str	r2, [r1, #12]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000b6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b70:	f022 0220 	bic.w	r2, r2, #32
 8000b74:	645a      	str	r2, [r3, #68]	; 0x44
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8000b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b78:	f022 0204 	bic.w	r2, r2, #4
 8000b7c:	631a      	str	r2, [r3, #48]	; 0x30
 8000b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b80:	f022 0202 	bic.w	r2, r2, #2
 8000b84:	631a      	str	r2, [r3, #48]	; 0x30
 8000b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b88:	f022 0201 	bic.w	r2, r2, #1
 8000b8c:	631a      	str	r2, [r3, #48]	; 0x30
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8000b8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b90:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8000b94:	641a      	str	r2, [r3, #64]	; 0x40
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000b96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000b9c:	645a      	str	r2, [r3, #68]	; 0x44
  LL_AHB1_GRP1_DisableClock(LL_AHB1_GRP1_PERIPH_GPIOA);

  /* SYSCFG and PWR clock disable. */
  LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_PWR);
  LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
}
 8000b9e:	bd08      	pop	{r3, pc}
 8000ba0:	40020c00 	.word	0x40020c00
 8000ba4:	40020800 	.word	0x40020800
 8000ba8:	40020400 	.word	0x40020400
 8000bac:	40020000 	.word	0x40020000
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40011400 	.word	0x40011400

08000bb8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bb8:	4770      	bx	lr

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	e7fe      	b.n	8000bbe <BusFault_Handler>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler>

08000bc2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc2:	4770      	bx	lr

08000bc4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc4:	4770      	bx	lr

08000bc6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc6:	4770      	bx	lr

08000bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bca:	f000 f8dd 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bce:	bd08      	pop	{r3, pc}

08000bd0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bd0:	b570      	push	{r4, r5, r6, lr}
 8000bd2:	460d      	mov	r5, r1
 8000bd4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	2400      	movs	r4, #0
 8000bd8:	e004      	b.n	8000be4 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 8000bda:	f3af 8000 	nop.w
 8000bde:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be0:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8000be2:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be4:	42b4      	cmp	r4, r6
 8000be6:	dbf8      	blt.n	8000bda <_read+0xa>
	}

return len;
}
 8000be8:	4630      	mov	r0, r6
 8000bea:	bd70      	pop	{r4, r5, r6, pc}

08000bec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bec:	b570      	push	{r4, r5, r6, lr}
 8000bee:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf0:	2400      	movs	r4, #0
 8000bf2:	e005      	b.n	8000c00 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8000bf4:	1c4d      	adds	r5, r1, #1
 8000bf6:	7808      	ldrb	r0, [r1, #0]
 8000bf8:	f7ff ff24 	bl	8000a44 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfc:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8000bfe:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c00:	42b4      	cmp	r4, r6
 8000c02:	dbf7      	blt.n	8000bf4 <_write+0x8>
	}
	return len;
}
 8000c04:	4630      	mov	r0, r6
 8000c06:	bd70      	pop	{r4, r5, r6, pc}

08000c08 <_close>:

int _close(int file)
{
	return -1;
}
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0c:	4770      	bx	lr

08000c0e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000c0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c12:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000c14:	2000      	movs	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000c18:	2001      	movs	r0, #1
 8000c1a:	4770      	bx	lr

08000c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	4770      	bx	lr

08000c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c20:	b410      	push	{r4}
 8000c22:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c24:	4a0c      	ldr	r2, [pc, #48]	; (8000c58 <_sbrk+0x38>)
 8000c26:	490d      	ldr	r1, [pc, #52]	; (8000c5c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	480d      	ldr	r0, [pc, #52]	; (8000c60 <_sbrk+0x40>)
 8000c2a:	6800      	ldr	r0, [r0, #0]
 8000c2c:	b150      	cbz	r0, 8000c44 <_sbrk+0x24>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2e:	480c      	ldr	r0, [pc, #48]	; (8000c60 <_sbrk+0x40>)
 8000c30:	6800      	ldr	r0, [r0, #0]
 8000c32:	4403      	add	r3, r0
 8000c34:	1a52      	subs	r2, r2, r1
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d808      	bhi.n	8000c4c <_sbrk+0x2c>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000c3a:	4a09      	ldr	r2, [pc, #36]	; (8000c60 <_sbrk+0x40>)
 8000c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c42:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8000c44:	4806      	ldr	r0, [pc, #24]	; (8000c60 <_sbrk+0x40>)
 8000c46:	4c07      	ldr	r4, [pc, #28]	; (8000c64 <_sbrk+0x44>)
 8000c48:	6004      	str	r4, [r0, #0]
 8000c4a:	e7f0      	b.n	8000c2e <_sbrk+0xe>
    errno = ENOMEM;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <_sbrk+0x48>)
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	f04f 30ff 	mov.w	r0, #4294967295
 8000c56:	e7f2      	b.n	8000c3e <_sbrk+0x1e>
 8000c58:	20020000 	.word	0x20020000
 8000c5c:	00000800 	.word	0x00000800
 8000c60:	20000440 	.word	0x20000440
 8000c64:	20009058 	.word	0x20009058
 8000c68:	20009050 	.word	0x20009050

08000c6c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SystemInit+0x18>)
 8000c6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000c72:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000c76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c7e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c8e:	e003      	b.n	8000c98 <LoopCopyDataInit>

08000c90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c96:	3104      	adds	r1, #4

08000c98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c98:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ca0:	d3f6      	bcc.n	8000c90 <CopyDataInit>
  ldr  r2, =_sbss
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ca4:	e002      	b.n	8000cac <LoopFillZerobss>

08000ca6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ca6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ca8:	f842 3b04 	str.w	r3, [r2], #4

08000cac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cb0:	d3f9      	bcc.n	8000ca6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cb2:	f7ff ffdb 	bl	8000c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f013 fc1d 	bl	80144f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cba:	f7ff fe7f 	bl	80009bc <main>
  bx  lr    
 8000cbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cc0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cc4:	0801897c 	.word	0x0801897c
  ldr  r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ccc:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8000cd0:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8000cd4:	20009054 	.word	0x20009054

08000cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>
	...

08000cdc <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000cdc:	b510      	push	{r4, lr}
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_DeInit+0x28>)
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000ce6:	2400      	movs	r4, #0
 8000ce8:	621c      	str	r4, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000cec:	625c      	str	r4, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000cee:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000cf0:	611c      	str	r4, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000cf2:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000cf4:	615c      	str	r4, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000cf6:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000cf8:	619c      	str	r4, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000cfa:	f7ff ff17 	bl	8000b2c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
}
 8000cfe:	4620      	mov	r0, r4
 8000d00:	bd10      	pop	{r4, pc}
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b510      	push	{r4, lr}
 8000d0a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_InitTick+0x40>)
 8000d0e:	7818      	ldrb	r0, [r3, #0]
 8000d10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d14:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d18:	4a0c      	ldr	r2, [pc, #48]	; (8000d4c <HAL_InitTick+0x44>)
 8000d1a:	6810      	ldr	r0, [r2, #0]
 8000d1c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d20:	f000 f898 	bl	8000e54 <HAL_SYSTICK_Config>
 8000d24:	b968      	cbnz	r0, 8000d42 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d26:	2c0f      	cmp	r4, #15
 8000d28:	d901      	bls.n	8000d2e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	e00a      	b.n	8000d44 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	4621      	mov	r1, r4
 8000d32:	f04f 30ff 	mov.w	r0, #4294967295
 8000d36:	f000 f859 	bl	8000dec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3a:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_InitTick+0x48>)
 8000d3c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000d3e:	2000      	movs	r0, #0
 8000d40:	e000      	b.n	8000d44 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000d42:	2001      	movs	r0, #1
}
 8000d44:	bd10      	pop	{r4, pc}
 8000d46:	bf00      	nop
 8000d48:	20000004 	.word	0x20000004
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000008 	.word	0x20000008

08000d54 <HAL_Init>:
{
 8000d54:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_Init+0x30>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d5e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d66:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d6e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 f829 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f7ff ffc6 	bl	8000d08 <HAL_InitTick>
  HAL_MspInit();
 8000d7c:	f7ff fe6a 	bl	8000a54 <HAL_MspInit>
}
 8000d80:	2000      	movs	r0, #0
 8000d82:	bd08      	pop	{r3, pc}
 8000d84:	40023c00 	.word	0x40023c00

08000d88 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d88:	4a03      	ldr	r2, [pc, #12]	; (8000d98 <HAL_IncTick+0x10>)
 8000d8a:	6811      	ldr	r1, [r2, #0]
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <HAL_IncTick+0x14>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	440b      	add	r3, r1
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20001988 	.word	0x20001988
 8000d9c:	20000004 	.word	0x20000004

08000da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da0:	b538      	push	{r3, r4, r5, lr}
 8000da2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000da4:	f003 fb26 	bl	80043f4 <HAL_GetTick>
 8000da8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000daa:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000dae:	d002      	beq.n	8000db6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <HAL_Delay+0x24>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000db6:	f003 fb1d 	bl	80043f4 <HAL_GetTick>
 8000dba:	1b40      	subs	r0, r0, r5
 8000dbc:	42a0      	cmp	r0, r4
 8000dbe:	d3fa      	bcc.n	8000db6 <HAL_Delay+0x16>
  {
  }
}
 8000dc0:	bd38      	pop	{r3, r4, r5, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000004 	.word	0x20000004

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000dca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dcc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dd0:	041b      	lsls	r3, r3, #16
 8000dd2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd4:	0200      	lsls	r0, r0, #8
 8000dd6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dda:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000ddc:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000de0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000de4:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dec:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_NVIC_SetPriority+0x60>)
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df6:	f1c3 0407 	rsb	r4, r3, #7
 8000dfa:	2c04      	cmp	r4, #4
 8000dfc:	bf28      	it	cs
 8000dfe:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e00:	1d1d      	adds	r5, r3, #4
 8000e02:	2d06      	cmp	r5, #6
 8000e04:	d918      	bls.n	8000e38 <HAL_NVIC_SetPriority+0x4c>
 8000e06:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	f04f 35ff 	mov.w	r5, #4294967295
 8000e0c:	fa05 f404 	lsl.w	r4, r5, r4
 8000e10:	ea21 0104 	bic.w	r1, r1, r4
 8000e14:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e16:	fa05 f303 	lsl.w	r3, r5, r3
 8000e1a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000e20:	2800      	cmp	r0, #0
 8000e22:	db0b      	blt.n	8000e3c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	0109      	lsls	r1, r1, #4
 8000e26:	b2c9      	uxtb	r1, r1
 8000e28:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000e2c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000e30:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000e34:	bc30      	pop	{r4, r5}
 8000e36:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e38:	2300      	movs	r3, #0
 8000e3a:	e7e5      	b.n	8000e08 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	f000 000f 	and.w	r0, r0, #15
 8000e40:	0109      	lsls	r1, r1, #4
 8000e42:	b2c9      	uxtb	r1, r1
 8000e44:	4b02      	ldr	r3, [pc, #8]	; (8000e50 <HAL_NVIC_SetPriority+0x64>)
 8000e46:	5419      	strb	r1, [r3, r0]
 8000e48:	e7f4      	b.n	8000e34 <HAL_NVIC_SetPriority+0x48>
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00
 8000e50:	e000ed14 	.word	0xe000ed14

08000e54 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e54:	3801      	subs	r0, #1
 8000e56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e5a:	d20a      	bcs.n	8000e72 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_SYSTICK_Config+0x24>)
 8000e5e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_SYSTICK_Config+0x28>)
 8000e62:	21f0      	movs	r1, #240	; 0xf0
 8000e64:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e68:	2000      	movs	r0, #0
 8000e6a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6c:	2207      	movs	r2, #7
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e72:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000e80:	7950      	ldrb	r0, [r2, #5]
 8000e82:	7913      	ldrb	r3, [r2, #4]
 8000e84:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000e88:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <ETH_MACAddressConfig+0x28>)
 8000e8a:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000e8c:	78d0      	ldrb	r0, [r2, #3]
 8000e8e:	7893      	ldrb	r3, [r2, #2]
 8000e90:	041b      	lsls	r3, r3, #16
 8000e92:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8000e96:	7850      	ldrb	r0, [r2, #1]
 8000e98:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000e9c:	7812      	ldrb	r2, [r2, #0]
 8000e9e:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000ea0:	4a02      	ldr	r2, [pc, #8]	; (8000eac <ETH_MACAddressConfig+0x2c>)
 8000ea2:	508b      	str	r3, [r1, r2]
}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40028040 	.word	0x40028040
 8000eac:	40028044 	.word	0x40028044

08000eb0 <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000eb0:	6801      	ldr	r1, [r0, #0]
 8000eb2:	f241 0218 	movw	r2, #4120	; 0x1018
 8000eb6:	588b      	ldr	r3, [r1, r2]
 8000eb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ebc:	508b      	str	r3, [r1, r2]
}
 8000ebe:	4770      	bx	lr

08000ec0 <ETH_DMATransmissionDisable>:
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8000ec0:	6801      	ldr	r1, [r0, #0]
 8000ec2:	f241 0218 	movw	r2, #4120	; 0x1018
 8000ec6:	588b      	ldr	r3, [r1, r2]
 8000ec8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ecc:	508b      	str	r3, [r1, r2]
}
 8000ece:	4770      	bx	lr

08000ed0 <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000ed0:	6801      	ldr	r1, [r0, #0]
 8000ed2:	f241 0218 	movw	r2, #4120	; 0x1018
 8000ed6:	588b      	ldr	r3, [r1, r2]
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	508b      	str	r3, [r1, r2]
}
 8000ede:	4770      	bx	lr

08000ee0 <ETH_DMAReceptionDisable>:
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8000ee0:	6801      	ldr	r1, [r0, #0]
 8000ee2:	f241 0218 	movw	r2, #4120	; 0x1018
 8000ee6:	588b      	ldr	r3, [r1, r2]
 8000ee8:	f023 0302 	bic.w	r3, r3, #2
 8000eec:	508b      	str	r3, [r1, r2]
}
 8000eee:	4770      	bx	lr

08000ef0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8000ef0:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <ETH_Delay+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <ETH_Delay+0x28>)
 8000ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8000efc:	0a5b      	lsrs	r3, r3, #9
 8000efe:	fb00 f003 	mul.w	r0, r0, r3
 8000f02:	9001      	str	r0, [sp, #4]
  do 
  {
    __NOP();
 8000f04:	bf00      	nop
  } 
  while (Delay --);
 8000f06:	9b01      	ldr	r3, [sp, #4]
 8000f08:	1e5a      	subs	r2, r3, #1
 8000f0a:	9201      	str	r2, [sp, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1f9      	bne.n	8000f04 <ETH_Delay+0x14>
}
 8000f10:	b002      	add	sp, #8
 8000f12:	4770      	bx	lr
 8000f14:	20000000 	.word	0x20000000
 8000f18:	10624dd3 	.word	0x10624dd3

08000f1c <ETH_MACTransmissionEnable>:
{ 
 8000f1c:	b510      	push	{r4, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000f26:	6802      	ldr	r2, [r0, #0]
 8000f28:	6813      	ldr	r3, [r2, #0]
 8000f2a:	f043 0308 	orr.w	r3, r3, #8
 8000f2e:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000f30:	6803      	ldr	r3, [r0, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f7ff ffda 	bl	8000ef0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8000f3c:	6823      	ldr	r3, [r4, #0]
 8000f3e:	9a01      	ldr	r2, [sp, #4]
 8000f40:	601a      	str	r2, [r3, #0]
}
 8000f42:	b002      	add	sp, #8
 8000f44:	bd10      	pop	{r4, pc}

08000f46 <ETH_MACReceptionEnable>:
{ 
 8000f46:	b510      	push	{r4, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000f50:	6802      	ldr	r2, [r0, #0]
 8000f52:	6813      	ldr	r3, [r2, #0]
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000f5a:	6803      	ldr	r3, [r0, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff ffc5 	bl	8000ef0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8000f66:	6823      	ldr	r3, [r4, #0]
 8000f68:	9a01      	ldr	r2, [sp, #4]
 8000f6a:	601a      	str	r2, [r3, #0]
}
 8000f6c:	b002      	add	sp, #8
 8000f6e:	bd10      	pop	{r4, pc}

08000f70 <ETH_FlushTransmitFIFO>:
{
 8000f70:	b530      	push	{r4, r5, lr}
 8000f72:	b083      	sub	sp, #12
 8000f74:	4605      	mov	r5, r0
  __IO uint32_t tmpreg1 = 0U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000f7a:	6802      	ldr	r2, [r0, #0]
 8000f7c:	f241 0418 	movw	r4, #4120	; 0x1018
 8000f80:	5913      	ldr	r3, [r2, r4]
 8000f82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f86:	5113      	str	r3, [r2, r4]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000f88:	6803      	ldr	r3, [r0, #0]
 8000f8a:	591b      	ldr	r3, [r3, r4]
 8000f8c:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f7ff ffae 	bl	8000ef0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8000f94:	682b      	ldr	r3, [r5, #0]
 8000f96:	9a01      	ldr	r2, [sp, #4]
 8000f98:	511a      	str	r2, [r3, r4]
}
 8000f9a:	b003      	add	sp, #12
 8000f9c:	bd30      	pop	{r4, r5, pc}

08000f9e <ETH_MACReceptionDisable>:
{ 
 8000f9e:	b510      	push	{r4, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8000fa8:	6802      	ldr	r2, [r0, #0]
 8000faa:	6813      	ldr	r3, [r2, #0]
 8000fac:	f023 0304 	bic.w	r3, r3, #4
 8000fb0:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000fb2:	6803      	ldr	r3, [r0, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f7ff ff99 	bl	8000ef0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	9a01      	ldr	r2, [sp, #4]
 8000fc2:	601a      	str	r2, [r3, #0]
}
 8000fc4:	b002      	add	sp, #8
 8000fc6:	bd10      	pop	{r4, pc}

08000fc8 <ETH_MACTransmissionDisable>:
{ 
 8000fc8:	b510      	push	{r4, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8000fd2:	6802      	ldr	r2, [r0, #0]
 8000fd4:	6813      	ldr	r3, [r2, #0]
 8000fd6:	f023 0308 	bic.w	r3, r3, #8
 8000fda:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000fdc:	6803      	ldr	r3, [r0, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f7ff ff84 	bl	8000ef0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8000fe8:	6823      	ldr	r3, [r4, #0]
 8000fea:	9a01      	ldr	r2, [sp, #4]
 8000fec:	601a      	str	r2, [r3, #0]
}
 8000fee:	b002      	add	sp, #8
 8000ff0:	bd10      	pop	{r4, pc}
	...

08000ff4 <ETH_MACDMAConfig>:
{
 8000ff4:	b570      	push	{r4, r5, r6, lr}
 8000ff6:	b09e      	sub	sp, #120	; 0x78
 8000ff8:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000ffa:	b129      	cbz	r1, 8001008 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000ffc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001000:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8001002:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001006:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001008:	69e3      	ldr	r3, [r4, #28]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d16a      	bne.n	80010e4 <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800100e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001012:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8001014:	6821      	ldr	r1, [r4, #0]
 8001016:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001018:	4a39      	ldr	r2, [pc, #228]	; (8001100 <ETH_MACDMAConfig+0x10c>)
 800101a:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 800101c:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 800101e:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8001020:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8001022:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 8001024:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8001026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800102a:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800102c:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001032:	2001      	movs	r0, #1
 8001034:	f7ff feb4 	bl	8000da0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001038:	6823      	ldr	r3, [r4, #0]
 800103a:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800103c:	6823      	ldr	r3, [r4, #0]
 800103e:	2240      	movs	r2, #64	; 0x40
 8001040:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8001042:	6823      	ldr	r3, [r4, #0]
 8001044:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001046:	2001      	movs	r0, #1
 8001048:	f7ff feaa 	bl	8000da0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800104c:	6823      	ldr	r3, [r4, #0]
 800104e:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001050:	6823      	ldr	r3, [r4, #0]
 8001052:	2500      	movs	r5, #0
 8001054:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001056:	6823      	ldr	r3, [r4, #0]
 8001058:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 800105a:	6822      	ldr	r2, [r4, #0]
 800105c:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800105e:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 8001062:	041b      	lsls	r3, r3, #16
 8001064:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800106a:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001070:	2001      	movs	r0, #1
 8001072:	f7ff fe95 	bl	8000da0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001076:	6823      	ldr	r3, [r4, #0]
 8001078:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800107e:	6823      	ldr	r3, [r4, #0]
 8001080:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff fe8c 	bl	8000da0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001088:	6823      	ldr	r3, [r4, #0]
 800108a:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 800108c:	6822      	ldr	r2, [r4, #0]
 800108e:	f241 0518 	movw	r5, #4120	; 0x1018
 8001092:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001094:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <ETH_MACDMAConfig+0x110>)
 8001096:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001098:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 800109c:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80010a0:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80010a2:	6823      	ldr	r3, [r4, #0]
 80010a4:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f7ff fe7a 	bl	8000da0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80010b0:	6823      	ldr	r3, [r4, #0]
 80010b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010b6:	4a14      	ldr	r2, [pc, #80]	; (8001108 <ETH_MACDMAConfig+0x114>)
 80010b8:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010c0:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f7ff fe6c 	bl	8000da0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80010c8:	6823      	ldr	r3, [r4, #0]
 80010ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010ce:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80010d0:	69a3      	ldr	r3, [r4, #24]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d009      	beq.n	80010ea <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80010d6:	6962      	ldr	r2, [r4, #20]
 80010d8:	2100      	movs	r1, #0
 80010da:	4620      	mov	r0, r4
 80010dc:	f7ff fed0 	bl	8000e80 <ETH_MACAddressConfig>
}
 80010e0:	b01e      	add	sp, #120	; 0x78
 80010e2:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	9307      	str	r3, [sp, #28]
 80010e8:	e794      	b.n	8001014 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80010ea:	6821      	ldr	r1, [r4, #0]
 80010ec:	f241 021c 	movw	r2, #4124	; 0x101c
 80010f0:	588b      	ldr	r3, [r1, r2]
 80010f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010fa:	508b      	str	r3, [r1, r2]
 80010fc:	e7eb      	b.n	80010d6 <ETH_MACDMAConfig+0xe2>
 80010fe:	bf00      	nop
 8001100:	ff20810f 	.word	0xff20810f
 8001104:	f8de3f23 	.word	0xf8de3f23
 8001108:	02c12080 	.word	0x02c12080

0800110c <HAL_ETH_DMATxDescListInit>:
{
 800110c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 800110e:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8001112:	2c01      	cmp	r4, #1
 8001114:	d031      	beq.n	800117a <HAL_ETH_DMATxDescListInit+0x6e>
 8001116:	2401      	movs	r4, #1
 8001118:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800111c:	2402      	movs	r4, #2
 800111e:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8001122:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 8001124:	2400      	movs	r4, #0
 8001126:	e001      	b.n	800112c <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001128:	60f9      	str	r1, [r7, #12]
  for(i=0U; i < TxBuffCount; i++)
 800112a:	3401      	adds	r4, #1
 800112c:	429c      	cmp	r4, r3
 800112e:	d217      	bcs.n	8001160 <HAL_ETH_DMATxDescListInit+0x54>
    dmatxdesc = DMATxDescTab + i;
 8001130:	0165      	lsls	r5, r4, #5
 8001132:	194f      	adds	r7, r1, r5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001134:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8001138:	514e      	str	r6, [r1, r5]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800113a:	f240 56f4 	movw	r6, #1524	; 0x5f4
 800113e:	fb06 2604 	mla	r6, r6, r4, r2
 8001142:	60be      	str	r6, [r7, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001144:	69c6      	ldr	r6, [r0, #28]
 8001146:	b91e      	cbnz	r6, 8001150 <HAL_ETH_DMATxDescListInit+0x44>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001148:	594e      	ldr	r6, [r1, r5]
 800114a:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 800114e:	514e      	str	r6, [r1, r5]
    if(i < (TxBuffCount-1U))
 8001150:	1e5d      	subs	r5, r3, #1
 8001152:	42a5      	cmp	r5, r4
 8001154:	d9e8      	bls.n	8001128 <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001156:	1c65      	adds	r5, r4, #1
 8001158:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800115c:	60fd      	str	r5, [r7, #12]
 800115e:	e7e4      	b.n	800112a <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001160:	6802      	ldr	r2, [r0, #0]
 8001162:	f241 0310 	movw	r3, #4112	; 0x1010
 8001166:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8001168:	2301      	movs	r3, #1
 800116a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800116e:	2300      	movs	r3, #0
 8001170:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8001174:	4618      	mov	r0, r3
}
 8001176:	bcf0      	pop	{r4, r5, r6, r7}
 8001178:	4770      	bx	lr
  __HAL_LOCK(heth);
 800117a:	2002      	movs	r0, #2
 800117c:	e7fb      	b.n	8001176 <HAL_ETH_DMATxDescListInit+0x6a>

0800117e <HAL_ETH_DMARxDescListInit>:
{
 800117e:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8001180:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8001184:	2c01      	cmp	r4, #1
 8001186:	d02e      	beq.n	80011e6 <HAL_ETH_DMARxDescListInit+0x68>
 8001188:	2401      	movs	r4, #1
 800118a:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800118e:	2402      	movs	r4, #2
 8001190:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8001194:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 8001196:	2400      	movs	r4, #0
 8001198:	e001      	b.n	800119e <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800119a:	60e9      	str	r1, [r5, #12]
  for(i=0U; i < RxBuffCount; i++)
 800119c:	3401      	adds	r4, #1
 800119e:	429c      	cmp	r4, r3
 80011a0:	d214      	bcs.n	80011cc <HAL_ETH_DMARxDescListInit+0x4e>
    DMARxDesc = DMARxDescTab+i;
 80011a2:	0166      	lsls	r6, r4, #5
 80011a4:	198d      	adds	r5, r1, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80011a6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80011aa:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80011ac:	f244 56f4 	movw	r6, #17908	; 0x45f4
 80011b0:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80011b2:	f240 56f4 	movw	r6, #1524	; 0x5f4
 80011b6:	fb06 2604 	mla	r6, r6, r4, r2
 80011ba:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1U))
 80011bc:	1e5e      	subs	r6, r3, #1
 80011be:	42a6      	cmp	r6, r4
 80011c0:	d9eb      	bls.n	800119a <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80011c2:	1c66      	adds	r6, r4, #1
 80011c4:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 80011c8:	60ee      	str	r6, [r5, #12]
 80011ca:	e7e7      	b.n	800119c <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80011cc:	6802      	ldr	r2, [r0, #0]
 80011ce:	f241 030c 	movw	r3, #4108	; 0x100c
 80011d2:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80011d4:	2301      	movs	r3, #1
 80011d6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80011da:	2300      	movs	r3, #0
 80011dc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80011e0:	4618      	mov	r0, r3
}
 80011e2:	bcf0      	pop	{r4, r5, r6, r7}
 80011e4:	4770      	bx	lr
  __HAL_LOCK(heth);
 80011e6:	2002      	movs	r0, #2
 80011e8:	e7fb      	b.n	80011e2 <HAL_ETH_DMARxDescListInit+0x64>
	...

080011ec <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 80011ec:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	f000 8085 	beq.w	8001300 <HAL_ETH_TransmitFrame+0x114>
 80011f6:	2301      	movs	r3, #1
 80011f8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80011fc:	2302      	movs	r3, #2
 80011fe:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8001202:	b1b1      	cbz	r1, 8001232 <HAL_ETH_TransmitFrame+0x46>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001204:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	2a00      	cmp	r2, #0
 800120a:	db1a      	blt.n	8001242 <HAL_ETH_TransmitFrame+0x56>
{
 800120c:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 800120e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001212:	4291      	cmp	r1, r2
 8001214:	d91d      	bls.n	8001252 <HAL_ETH_TransmitFrame+0x66>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001216:	4a3b      	ldr	r2, [pc, #236]	; (8001304 <HAL_ETH_TransmitFrame+0x118>)
 8001218:	fba2 4201 	umull	r4, r2, r2, r1
 800121c:	0a92      	lsrs	r2, r2, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800121e:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8001222:	fb04 1412 	mls	r4, r4, r2, r1
 8001226:	b104      	cbz	r4, 800122a <HAL_ETH_TransmitFrame+0x3e>
      bufcount++;
 8001228:	3201      	adds	r2, #1
  if (bufcount == 1U)
 800122a:	2a01      	cmp	r2, #1
 800122c:	d011      	beq.n	8001252 <HAL_ETH_TransmitFrame+0x66>
    for (i=0U; i< bufcount; i++)
 800122e:	2300      	movs	r3, #0
 8001230:	e047      	b.n	80012c2 <HAL_ETH_TransmitFrame+0xd6>
    heth->State = HAL_ETH_STATE_READY;
 8001232:	2301      	movs	r3, #1
 8001234:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8001238:	2200      	movs	r2, #0
 800123a:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 800123e:	4618      	mov	r0, r3
 8001240:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001242:	2312      	movs	r3, #18
 8001244:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8001248:	2300      	movs	r3, #0
 800124a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 800124e:	2001      	movs	r0, #1
 8001250:	4770      	bx	lr
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001258:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800125a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800125c:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8001260:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001262:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001264:	6813      	ldr	r3, [r2, #0]
 8001266:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800126a:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800126c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001272:	6803      	ldr	r3, [r0, #0]
 8001274:	f241 0214 	movw	r2, #4116	; 0x1014
 8001278:	589a      	ldr	r2, [r3, r2]
 800127a:	f012 0f04 	tst.w	r2, #4
 800127e:	d008      	beq.n	8001292 <HAL_ETH_TransmitFrame+0xa6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001280:	f241 0214 	movw	r2, #4116	; 0x1014
 8001284:	2104      	movs	r1, #4
 8001286:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8001288:	6802      	ldr	r2, [r0, #0]
 800128a:	f241 0304 	movw	r3, #4100	; 0x1004
 800128e:	2100      	movs	r1, #0
 8001290:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 8001292:	2301      	movs	r3, #1
 8001294:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001298:	2300      	movs	r3, #0
 800129a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800129e:	4618      	mov	r0, r3
}
 80012a0:	bc30      	pop	{r4, r5}
 80012a2:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80012a4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80012a6:	682c      	ldr	r4, [r5, #0]
 80012a8:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80012ac:	602c      	str	r4, [r5, #0]
 80012ae:	e011      	b.n	80012d4 <HAL_ETH_TransmitFrame+0xe8>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80012b0:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80012b2:	682c      	ldr	r4, [r5, #0]
 80012b4:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80012b8:	602c      	str	r4, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80012ba:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80012bc:	68e4      	ldr	r4, [r4, #12]
 80012be:	62c4      	str	r4, [r0, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80012c0:	3301      	adds	r3, #1
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d9d5      	bls.n	8001272 <HAL_ETH_TransmitFrame+0x86>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80012c6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80012c8:	682c      	ldr	r4, [r5, #0]
 80012ca:	f024 5440 	bic.w	r4, r4, #805306368	; 0x30000000
 80012ce:	602c      	str	r4, [r5, #0]
      if (i == 0U) 
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0e7      	beq.n	80012a4 <HAL_ETH_TransmitFrame+0xb8>
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80012d4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80012d6:	f240 55f4 	movw	r5, #1524	; 0x5f4
 80012da:	6065      	str	r5, [r4, #4]
      if (i == (bufcount-1U))
 80012dc:	1e54      	subs	r4, r2, #1
 80012de:	429c      	cmp	r4, r3
 80012e0:	d1e6      	bne.n	80012b0 <HAL_ETH_TransmitFrame+0xc4>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80012e2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80012e4:	682c      	ldr	r4, [r5, #0]
 80012e6:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 80012ea:	602c      	str	r4, [r5, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80012ec:	4c06      	ldr	r4, [pc, #24]	; (8001308 <HAL_ETH_TransmitFrame+0x11c>)
 80012ee:	fb04 1402 	mla	r4, r4, r2, r1
 80012f2:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80012f6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80012f8:	f3c4 040c 	ubfx	r4, r4, #0, #13
 80012fc:	606c      	str	r4, [r5, #4]
 80012fe:	e7d7      	b.n	80012b0 <HAL_ETH_TransmitFrame+0xc4>
  __HAL_LOCK(heth);
 8001300:	2002      	movs	r0, #2
}
 8001302:	4770      	bx	lr
 8001304:	ac02b00b 	.word	0xac02b00b
 8001308:	fffffa0c 	.word	0xfffffa0c

0800130c <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 800130c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8001310:	2b01      	cmp	r3, #1
 8001312:	d040      	beq.n	8001396 <HAL_ETH_GetReceivedFrame+0x8a>
 8001314:	2301      	movs	r3, #1
 8001316:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800131a:	2302      	movs	r3, #2
 800131c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001320:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	2a00      	cmp	r2, #0
 8001326:	db28      	blt.n	800137a <HAL_ETH_GetReceivedFrame+0x6e>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800132e:	d019      	beq.n	8001364 <HAL_ETH_GetReceivedFrame+0x58>
      (heth->RxFrameInfos).SegCount++;
 8001330:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001332:	3201      	adds	r2, #1
 8001334:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001336:	2a01      	cmp	r2, #1
 8001338:	d012      	beq.n	8001360 <HAL_ETH_GetReceivedFrame+0x54>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800133a:	6343      	str	r3, [r0, #52]	; 0x34
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8001342:	3a04      	subs	r2, #4
      heth->RxFrameInfos.length = framelength;
 8001344:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001346:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001348:	6892      	ldr	r2, [r2, #8]
 800134a:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8001350:	2301      	movs	r3, #1
 8001352:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8001356:	2300      	movs	r3, #0
 8001358:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 800135c:	4618      	mov	r0, r3
 800135e:	4770      	bx	lr
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001360:	6303      	str	r3, [r0, #48]	; 0x30
 8001362:	e7ea      	b.n	800133a <HAL_ETH_GetReceivedFrame+0x2e>
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	f412 7f00 	tst.w	r2, #512	; 0x200
 800136a:	d00e      	beq.n	800138a <HAL_ETH_GetReceivedFrame+0x7e>
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800136c:	6303      	str	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800136e:	2200      	movs	r2, #0
 8001370:	6342      	str	r2, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001372:	2201      	movs	r2, #1
 8001374:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	6283      	str	r3, [r0, #40]	; 0x28
  heth->State = HAL_ETH_STATE_READY;
 800137a:	2301      	movs	r3, #1
 800137c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001380:	2200      	movs	r2, #0
 8001382:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8001386:	4618      	mov	r0, r3
 8001388:	4770      	bx	lr
      (heth->RxFrameInfos).SegCount++;
 800138a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800138c:	3201      	adds	r2, #1
 800138e:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	6283      	str	r3, [r0, #40]	; 0x28
 8001394:	e7f1      	b.n	800137a <HAL_ETH_GetReceivedFrame+0x6e>
  __HAL_LOCK(heth);
 8001396:	2002      	movs	r0, #2
}
 8001398:	4770      	bx	lr

0800139a <HAL_ETH_ReadPHYRegister>:
{
 800139a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800139c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b82      	cmp	r3, #130	; 0x82
 80013a4:	d033      	beq.n	800140e <HAL_ETH_ReadPHYRegister+0x74>
 80013a6:	4616      	mov	r6, r2
 80013a8:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80013aa:	2382      	movs	r3, #130	; 0x82
 80013ac:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 80013b0:	6802      	ldr	r2, [r0, #0]
 80013b2:	6913      	ldr	r3, [r2, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80013b4:	f003 031c 	and.w	r3, r3, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80013b8:	8a04      	ldrh	r4, [r0, #16]
 80013ba:	02e4      	lsls	r4, r4, #11
 80013bc:	b2a4      	uxth	r4, r4
 80013be:	4323      	orrs	r3, r4
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80013c0:	018c      	lsls	r4, r1, #6
 80013c2:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80013c6:	431c      	orrs	r4, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80013c8:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 80013cc:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 80013ce:	f003 f811 	bl	80043f4 <HAL_GetTick>
 80013d2:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80013d4:	f014 0f01 	tst.w	r4, #1
 80013d8:	d010      	beq.n	80013fc <HAL_ETH_ReadPHYRegister+0x62>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80013da:	f003 f80b 	bl	80043f4 <HAL_GetTick>
 80013de:	1bc0      	subs	r0, r0, r7
 80013e0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80013e4:	d202      	bcs.n	80013ec <HAL_ETH_ReadPHYRegister+0x52>
    tmpreg1 = heth->Instance->MACMIIAR;
 80013e6:	682b      	ldr	r3, [r5, #0]
 80013e8:	691c      	ldr	r4, [r3, #16]
 80013ea:	e7f3      	b.n	80013d4 <HAL_ETH_ReadPHYRegister+0x3a>
      heth->State= HAL_ETH_STATE_READY;
 80013ec:	2301      	movs	r3, #1
 80013ee:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80013f2:	2300      	movs	r3, #0
 80013f4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80013f8:	2003      	movs	r0, #3
 80013fa:	e007      	b.n	800140c <HAL_ETH_ReadPHYRegister+0x72>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80013fc:	682b      	ldr	r3, [r5, #0]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	b29b      	uxth	r3, r3
 8001402:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8001404:	2301      	movs	r3, #1
 8001406:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 800140a:	2000      	movs	r0, #0
}
 800140c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800140e:	2002      	movs	r0, #2
 8001410:	e7fc      	b.n	800140c <HAL_ETH_ReadPHYRegister+0x72>

08001412 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001412:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2b42      	cmp	r3, #66	; 0x42
 800141a:	d032      	beq.n	8001482 <HAL_ETH_WritePHYRegister+0x70>
{
 800141c:	b570      	push	{r4, r5, r6, lr}
 800141e:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001420:	2342      	movs	r3, #66	; 0x42
 8001422:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8001426:	6800      	ldr	r0, [r0, #0]
 8001428:	6903      	ldr	r3, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800142a:	f003 031c 	and.w	r3, r3, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800142e:	8a2c      	ldrh	r4, [r5, #16]
 8001430:	02e4      	lsls	r4, r4, #11
 8001432:	b2a4      	uxth	r4, r4
 8001434:	4323      	orrs	r3, r4
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001436:	018c      	lsls	r4, r1, #6
 8001438:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 800143c:	431c      	orrs	r4, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800143e:	f044 0403 	orr.w	r4, r4, #3
 8001442:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001444:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8001446:	682b      	ldr	r3, [r5, #0]
 8001448:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 800144a:	f002 ffd3 	bl	80043f4 <HAL_GetTick>
 800144e:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001450:	f014 0f01 	tst.w	r4, #1
 8001454:	d010      	beq.n	8001478 <HAL_ETH_WritePHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001456:	f002 ffcd 	bl	80043f4 <HAL_GetTick>
 800145a:	1b80      	subs	r0, r0, r6
 800145c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001460:	d202      	bcs.n	8001468 <HAL_ETH_WritePHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001462:	682b      	ldr	r3, [r5, #0]
 8001464:	691c      	ldr	r4, [r3, #16]
 8001466:	e7f3      	b.n	8001450 <HAL_ETH_WritePHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8001468:	2301      	movs	r3, #1
 800146a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800146e:	2300      	movs	r3, #0
 8001470:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8001474:	2003      	movs	r0, #3
 8001476:	e003      	b.n	8001480 <HAL_ETH_WritePHYRegister+0x6e>
  heth->State = HAL_ETH_STATE_READY;
 8001478:	2301      	movs	r3, #1
 800147a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 800147e:	2000      	movs	r0, #0
}
 8001480:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8001482:	2002      	movs	r0, #2
}
 8001484:	4770      	bx	lr
	...

08001488 <HAL_ETH_Init>:
{
 8001488:	b570      	push	{r4, r5, r6, lr}
 800148a:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8001490:	2800      	cmp	r0, #0
 8001492:	f000 810f 	beq.w	80016b4 <HAL_ETH_Init+0x22c>
 8001496:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8001498:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800149c:	2b00      	cmp	r3, #0
 800149e:	d034      	beq.n	800150a <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	4b84      	ldr	r3, [pc, #528]	; (80016b8 <HAL_ETH_Init+0x230>)
 80014a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014ac:	645a      	str	r2, [r3, #68]	; 0x44
 80014ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80014b8:	4b80      	ldr	r3, [pc, #512]	; (80016bc <HAL_ETH_Init+0x234>)
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80014c0:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	6a21      	ldr	r1, [r4, #32]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80014ca:	6823      	ldr	r3, [r4, #0]
 80014cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	f042 0201 	orr.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80014d8:	f002 ff8c 	bl	80043f4 <HAL_GetTick>
 80014dc:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	f012 0f01 	tst.w	r2, #1
 80014ea:	d013      	beq.n	8001514 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80014ec:	f002 ff82 	bl	80043f4 <HAL_GetTick>
 80014f0:	1b40      	subs	r0, r0, r5
 80014f2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80014f6:	d9f2      	bls.n	80014de <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80014f8:	2503      	movs	r5, #3
 80014fa:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80014fe:	2300      	movs	r3, #0
 8001500:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8001504:	4628      	mov	r0, r5
 8001506:	b002      	add	sp, #8
 8001508:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 800150a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800150e:	f002 fa37 	bl	8003980 <HAL_ETH_MspInit>
 8001512:	e7c5      	b.n	80014a0 <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001514:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001516:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 800151a:	f000 fc85 	bl	8001e28 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800151e:	4b68      	ldr	r3, [pc, #416]	; (80016c0 <HAL_ETH_Init+0x238>)
 8001520:	4403      	add	r3, r0
 8001522:	4a68      	ldr	r2, [pc, #416]	; (80016c4 <HAL_ETH_Init+0x23c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d856      	bhi.n	80015d6 <HAL_ETH_Init+0x14e>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001528:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800152c:	6823      	ldr	r3, [r4, #0]
 800152e:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001530:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001534:	2100      	movs	r1, #0
 8001536:	4620      	mov	r0, r4
 8001538:	f7ff ff6b 	bl	8001412 <HAL_ETH_WritePHYRegister>
 800153c:	4605      	mov	r5, r0
 800153e:	2800      	cmp	r0, #0
 8001540:	d161      	bne.n	8001606 <HAL_ETH_Init+0x17e>
  HAL_Delay(PHY_RESET_DELAY);
 8001542:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001546:	f7ff fc2b 	bl	8000da0 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800154a:	6863      	ldr	r3, [r4, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 8091 	beq.w	8001674 <HAL_ETH_Init+0x1ec>
    tickstart = HAL_GetTick();
 8001552:	f002 ff4f 	bl	80043f4 <HAL_GetTick>
 8001556:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001558:	aa01      	add	r2, sp, #4
 800155a:	2101      	movs	r1, #1
 800155c:	4620      	mov	r0, r4
 800155e:	f7ff ff1c 	bl	800139a <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001562:	f002 ff47 	bl	80043f4 <HAL_GetTick>
 8001566:	1b80      	subs	r0, r0, r6
 8001568:	f241 3388 	movw	r3, #5000	; 0x1388
 800156c:	4298      	cmp	r0, r3
 800156e:	d852      	bhi.n	8001616 <HAL_ETH_Init+0x18e>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001570:	9b01      	ldr	r3, [sp, #4]
 8001572:	f013 0f04 	tst.w	r3, #4
 8001576:	d0ef      	beq.n	8001558 <HAL_ETH_Init+0xd0>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001578:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800157c:	2100      	movs	r1, #0
 800157e:	4620      	mov	r0, r4
 8001580:	f7ff ff47 	bl	8001412 <HAL_ETH_WritePHYRegister>
 8001584:	2800      	cmp	r0, #0
 8001586:	d152      	bne.n	800162e <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 8001588:	f002 ff34 	bl	80043f4 <HAL_GetTick>
 800158c:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800158e:	aa01      	add	r2, sp, #4
 8001590:	2101      	movs	r1, #1
 8001592:	4620      	mov	r0, r4
 8001594:	f7ff ff01 	bl	800139a <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001598:	f002 ff2c 	bl	80043f4 <HAL_GetTick>
 800159c:	1b80      	subs	r0, r0, r6
 800159e:	f241 3388 	movw	r3, #5000	; 0x1388
 80015a2:	4298      	cmp	r0, r3
 80015a4:	d84b      	bhi.n	800163e <HAL_ETH_Init+0x1b6>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80015a6:	9b01      	ldr	r3, [sp, #4]
 80015a8:	f013 0f20 	tst.w	r3, #32
 80015ac:	d0ef      	beq.n	800158e <HAL_ETH_Init+0x106>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80015ae:	aa01      	add	r2, sp, #4
 80015b0:	211f      	movs	r1, #31
 80015b2:	4620      	mov	r0, r4
 80015b4:	f7ff fef1 	bl	800139a <HAL_ETH_ReadPHYRegister>
 80015b8:	2800      	cmp	r0, #0
 80015ba:	d14c      	bne.n	8001656 <HAL_ETH_Init+0x1ce>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80015bc:	9b01      	ldr	r3, [sp, #4]
 80015be:	f013 0f10 	tst.w	r3, #16
 80015c2:	d050      	beq.n	8001666 <HAL_ETH_Init+0x1de>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80015c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015c8:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80015ca:	f013 0f04 	tst.w	r3, #4
 80015ce:	d04d      	beq.n	800166c <HAL_ETH_Init+0x1e4>
      (heth->Init).Speed = ETH_SPEED_10M; 
 80015d0:	2300      	movs	r3, #0
 80015d2:	60a3      	str	r3, [r4, #8]
 80015d4:	e05e      	b.n	8001694 <HAL_ETH_Init+0x20c>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80015d6:	4b3c      	ldr	r3, [pc, #240]	; (80016c8 <HAL_ETH_Init+0x240>)
 80015d8:	4403      	add	r3, r0
 80015da:	4a3c      	ldr	r2, [pc, #240]	; (80016cc <HAL_ETH_Init+0x244>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d802      	bhi.n	80015e6 <HAL_ETH_Init+0x15e>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80015e0:	f045 050c 	orr.w	r5, r5, #12
 80015e4:	e7a2      	b.n	800152c <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80015e6:	4b3a      	ldr	r3, [pc, #232]	; (80016d0 <HAL_ETH_Init+0x248>)
 80015e8:	4403      	add	r3, r0
 80015ea:	4a3a      	ldr	r2, [pc, #232]	; (80016d4 <HAL_ETH_Init+0x24c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d99d      	bls.n	800152c <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80015f0:	4b39      	ldr	r3, [pc, #228]	; (80016d8 <HAL_ETH_Init+0x250>)
 80015f2:	4403      	add	r3, r0
 80015f4:	4a39      	ldr	r2, [pc, #228]	; (80016dc <HAL_ETH_Init+0x254>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d802      	bhi.n	8001600 <HAL_ETH_Init+0x178>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80015fa:	f045 0504 	orr.w	r5, r5, #4
 80015fe:	e795      	b.n	800152c <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001600:	f045 0510 	orr.w	r5, r5, #16
 8001604:	e792      	b.n	800152c <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 8001606:	2101      	movs	r1, #1
 8001608:	4620      	mov	r0, r4
 800160a:	f7ff fcf3 	bl	8000ff4 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 800160e:	2501      	movs	r5, #1
 8001610:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 8001614:	e776      	b.n	8001504 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 8001616:	2101      	movs	r1, #1
 8001618:	4620      	mov	r0, r4
 800161a:	f7ff fceb 	bl	8000ff4 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 800161e:	2301      	movs	r3, #1
 8001620:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8001624:	2300      	movs	r3, #0
 8001626:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 800162a:	2503      	movs	r5, #3
 800162c:	e76a      	b.n	8001504 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 800162e:	2101      	movs	r1, #1
 8001630:	4620      	mov	r0, r4
 8001632:	f7ff fcdf 	bl	8000ff4 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8001636:	2501      	movs	r5, #1
 8001638:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 800163c:	e762      	b.n	8001504 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 800163e:	2101      	movs	r1, #1
 8001640:	4620      	mov	r0, r4
 8001642:	f7ff fcd7 	bl	8000ff4 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8001646:	2301      	movs	r3, #1
 8001648:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800164c:	2300      	movs	r3, #0
 800164e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8001652:	2503      	movs	r5, #3
 8001654:	e756      	b.n	8001504 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8001656:	2101      	movs	r1, #1
 8001658:	4620      	mov	r0, r4
 800165a:	f7ff fccb 	bl	8000ff4 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800165e:	2501      	movs	r5, #1
 8001660:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8001664:	e74e      	b.n	8001504 <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001666:	2200      	movs	r2, #0
 8001668:	60e2      	str	r2, [r4, #12]
 800166a:	e7ae      	b.n	80015ca <HAL_ETH_Init+0x142>
      (heth->Init).Speed = ETH_SPEED_100M;
 800166c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001670:	60a3      	str	r3, [r4, #8]
 8001672:	e00f      	b.n	8001694 <HAL_ETH_Init+0x20c>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001674:	68e2      	ldr	r2, [r4, #12]
 8001676:	f3c2 02cf 	ubfx	r2, r2, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800167a:	68a3      	ldr	r3, [r4, #8]
 800167c:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001680:	431a      	orrs	r2, r3
 8001682:	2100      	movs	r1, #0
 8001684:	4620      	mov	r0, r4
 8001686:	f7ff fec4 	bl	8001412 <HAL_ETH_WritePHYRegister>
 800168a:	b958      	cbnz	r0, 80016a4 <HAL_ETH_Init+0x21c>
    HAL_Delay(PHY_CONFIG_DELAY);
 800168c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001690:	f7ff fb86 	bl	8000da0 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8001694:	2100      	movs	r1, #0
 8001696:	4620      	mov	r0, r4
 8001698:	f7ff fcac 	bl	8000ff4 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 800169c:	2301      	movs	r3, #1
 800169e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 80016a2:	e72f      	b.n	8001504 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 80016a4:	2101      	movs	r1, #1
 80016a6:	4620      	mov	r0, r4
 80016a8:	f7ff fca4 	bl	8000ff4 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80016ac:	2501      	movs	r5, #1
 80016ae:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 80016b2:	e727      	b.n	8001504 <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 80016b4:	2501      	movs	r5, #1
 80016b6:	e725      	b.n	8001504 <HAL_ETH_Init+0x7c>
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40013800 	.word	0x40013800
 80016c0:	feced300 	.word	0xfeced300
 80016c4:	00e4e1bf 	.word	0x00e4e1bf
 80016c8:	fde9f140 	.word	0xfde9f140
 80016cc:	017d783f 	.word	0x017d783f
 80016d0:	fc6c7900 	.word	0xfc6c7900
 80016d4:	026259ff 	.word	0x026259ff
 80016d8:	fa0a1f00 	.word	0xfa0a1f00
 80016dc:	02faf07f 	.word	0x02faf07f

080016e0 <HAL_ETH_Start>:
{  
 80016e0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 80016e2:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d01a      	beq.n	8001720 <HAL_ETH_Start+0x40>
 80016ea:	4604      	mov	r4, r0
 80016ec:	2501      	movs	r5, #1
 80016ee:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80016f2:	2302      	movs	r3, #2
 80016f4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 80016f8:	f7ff fc10 	bl	8000f1c <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 80016fc:	4620      	mov	r0, r4
 80016fe:	f7ff fc22 	bl	8000f46 <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 8001702:	4620      	mov	r0, r4
 8001704:	f7ff fc34 	bl	8000f70 <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 8001708:	4620      	mov	r0, r4
 800170a:	f7ff fbd1 	bl	8000eb0 <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 800170e:	4620      	mov	r0, r4
 8001710:	f7ff fbde 	bl	8000ed0 <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 8001714:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001718:	2000      	movs	r0, #0
 800171a:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
}
 800171e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(heth);
 8001720:	2002      	movs	r0, #2
 8001722:	e7fc      	b.n	800171e <HAL_ETH_Start+0x3e>

08001724 <HAL_ETH_Stop>:
{  
 8001724:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 8001726:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800172a:	2b01      	cmp	r3, #1
 800172c:	d01a      	beq.n	8001764 <HAL_ETH_Stop+0x40>
 800172e:	4604      	mov	r4, r0
 8001730:	2501      	movs	r5, #1
 8001732:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8001736:	2302      	movs	r3, #2
 8001738:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_DMATransmissionDisable(heth);
 800173c:	f7ff fbc0 	bl	8000ec0 <ETH_DMATransmissionDisable>
  ETH_DMAReceptionDisable(heth);
 8001740:	4620      	mov	r0, r4
 8001742:	f7ff fbcd 	bl	8000ee0 <ETH_DMAReceptionDisable>
  ETH_MACReceptionDisable(heth);
 8001746:	4620      	mov	r0, r4
 8001748:	f7ff fc29 	bl	8000f9e <ETH_MACReceptionDisable>
  ETH_FlushTransmitFIFO(heth);
 800174c:	4620      	mov	r0, r4
 800174e:	f7ff fc0f 	bl	8000f70 <ETH_FlushTransmitFIFO>
  ETH_MACTransmissionDisable(heth);
 8001752:	4620      	mov	r0, r4
 8001754:	f7ff fc38 	bl	8000fc8 <ETH_MACTransmissionDisable>
  heth->State = HAL_ETH_STATE_READY;
 8001758:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800175c:	2000      	movs	r0, #0
 800175e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
}
 8001762:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(heth);
 8001764:	2002      	movs	r0, #2
 8001766:	e7fc      	b.n	8001762 <HAL_ETH_Stop+0x3e>

08001768 <HAL_ETH_ConfigMAC>:
  __HAL_LOCK(heth);
 8001768:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800176c:	2b01      	cmp	r3, #1
 800176e:	f000 808e 	beq.w	800188e <HAL_ETH_ConfigMAC+0x126>
{
 8001772:	b570      	push	{r4, r5, r6, lr}
 8001774:	460c      	mov	r4, r1
 8001776:	4605      	mov	r5, r0
  __HAL_LOCK(heth);
 8001778:	2301      	movs	r3, #1
 800177a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State= HAL_ETH_STATE_BUSY;
 800177e:	2302      	movs	r3, #2
 8001780:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (macconf != NULL)
 8001784:	2900      	cmp	r1, #0
 8001786:	d071      	beq.n	800186c <HAL_ETH_ConfigMAC+0x104>
    tmpreg1 = (heth->Instance)->MACCR;
 8001788:	6802      	ldr	r2, [r0, #0]
 800178a:	6813      	ldr	r3, [r2, #0]
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800178c:	4941      	ldr	r1, [pc, #260]	; (8001894 <HAL_ETH_ConfigMAC+0x12c>)
 800178e:	4019      	ands	r1, r3
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001790:	6823      	ldr	r3, [r4, #0]
                         macconf->Jabber | 
 8001792:	6860      	ldr	r0, [r4, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001794:	4303      	orrs	r3, r0
                         macconf->InterFrameGap |
 8001796:	68a0      	ldr	r0, [r4, #8]
                         macconf->Jabber | 
 8001798:	4303      	orrs	r3, r0
                         macconf->CarrierSense |
 800179a:	68e0      	ldr	r0, [r4, #12]
                         macconf->InterFrameGap |
 800179c:	4303      	orrs	r3, r0
                         (heth->Init).Speed | 
 800179e:	68a8      	ldr	r0, [r5, #8]
                         macconf->CarrierSense |
 80017a0:	4303      	orrs	r3, r0
                         macconf->ReceiveOwn |
 80017a2:	6920      	ldr	r0, [r4, #16]
                         (heth->Init).Speed | 
 80017a4:	4303      	orrs	r3, r0
                         macconf->LoopbackMode |
 80017a6:	6960      	ldr	r0, [r4, #20]
                         macconf->ReceiveOwn |
 80017a8:	4303      	orrs	r3, r0
                         (heth->Init).DuplexMode | 
 80017aa:	68e8      	ldr	r0, [r5, #12]
                         macconf->LoopbackMode |
 80017ac:	4303      	orrs	r3, r0
                         macconf->ChecksumOffload |    
 80017ae:	69a0      	ldr	r0, [r4, #24]
                         (heth->Init).DuplexMode | 
 80017b0:	4303      	orrs	r3, r0
                         macconf->RetryTransmission | 
 80017b2:	69e0      	ldr	r0, [r4, #28]
                         macconf->ChecksumOffload |    
 80017b4:	4303      	orrs	r3, r0
                         macconf->AutomaticPadCRCStrip | 
 80017b6:	6a20      	ldr	r0, [r4, #32]
                         macconf->RetryTransmission | 
 80017b8:	4303      	orrs	r3, r0
                         macconf->BackOffLimit | 
 80017ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80017bc:	4303      	orrs	r3, r0
                         macconf->DeferralCheck);
 80017be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                         macconf->BackOffLimit | 
 80017c0:	4303      	orrs	r3, r0
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80017c2:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80017c4:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80017c6:	682b      	ldr	r3, [r5, #0]
 80017c8:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f7ff fae8 	bl	8000da0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80017d0:	682b      	ldr	r3, [r5, #0]
 80017d2:	601e      	str	r6, [r3, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80017d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80017d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80017d8:	4313      	orrs	r3, r2
                                          macconf->PassControlFrames |
 80017da:	6b62      	ldr	r2, [r4, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80017dc:	4313      	orrs	r3, r2
                                          macconf->BroadcastFramesReception | 
 80017de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
                                          macconf->PassControlFrames |
 80017e0:	4313      	orrs	r3, r2
                                          macconf->DestinationAddrFilter |
 80017e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80017e4:	4313      	orrs	r3, r2
                                          macconf->PromiscuousMode |
 80017e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80017e8:	4313      	orrs	r3, r2
                                          macconf->MulticastFramesFilter |
 80017ea:	6c62      	ldr	r2, [r4, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80017ec:	4313      	orrs	r3, r2
                                          macconf->UnicastFramesFilter);
 80017ee:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80017f0:	682a      	ldr	r2, [r5, #0]
                                          macconf->MulticastFramesFilter |
 80017f2:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80017f4:	6053      	str	r3, [r2, #4]
     tmpreg1 = (heth->Instance)->MACFFR;
 80017f6:	682b      	ldr	r3, [r5, #0]
 80017f8:	685e      	ldr	r6, [r3, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80017fa:	2001      	movs	r0, #1
 80017fc:	f7ff fad0 	bl	8000da0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	605e      	str	r6, [r3, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001804:	682b      	ldr	r3, [r5, #0]
 8001806:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001808:	609a      	str	r2, [r3, #8]
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800180a:	682b      	ldr	r3, [r5, #0]
 800180c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800180e:	60da      	str	r2, [r3, #12]
     tmpreg1 = (heth->Instance)->MACFCR;
 8001810:	6829      	ldr	r1, [r5, #0]
 8001812:	698a      	ldr	r2, [r1, #24]
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001814:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8001818:	0412      	lsls	r2, r2, #16
 800181a:	0c12      	lsrs	r2, r2, #16
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800181c:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ZeroQuantaPause |
 800181e:	6da3      	ldr	r3, [r4, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001820:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                          macconf->PauseLowThreshold |
 8001824:	6de0      	ldr	r0, [r4, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001826:	4303      	orrs	r3, r0
                          macconf->UnicastPauseFrameDetect | 
 8001828:	6e20      	ldr	r0, [r4, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800182a:	4303      	orrs	r3, r0
                          macconf->ReceiveFlowControl |
 800182c:	6e60      	ldr	r0, [r4, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800182e:	4303      	orrs	r3, r0
                          macconf->TransmitFlowControl); 
 8001830:	6ea0      	ldr	r0, [r4, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001832:	4303      	orrs	r3, r0
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001834:	4313      	orrs	r3, r2
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001836:	618b      	str	r3, [r1, #24]
     tmpreg1 = (heth->Instance)->MACFCR;
 8001838:	682b      	ldr	r3, [r5, #0]
 800183a:	699e      	ldr	r6, [r3, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800183c:	2001      	movs	r0, #1
 800183e:	f7ff faaf 	bl	8000da0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001842:	682b      	ldr	r3, [r5, #0]
 8001844:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001846:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001848:	6f21      	ldr	r1, [r4, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800184a:	682a      	ldr	r2, [r5, #0]
 800184c:	430b      	orrs	r3, r1
 800184e:	61d3      	str	r3, [r2, #28]
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001850:	682b      	ldr	r3, [r5, #0]
 8001852:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001854:	2001      	movs	r0, #1
 8001856:	f7ff faa3 	bl	8000da0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800185a:	682b      	ldr	r3, [r5, #0]
 800185c:	61dc      	str	r4, [r3, #28]
  heth->State= HAL_ETH_STATE_READY;
 800185e:	2301      	movs	r3, #1
 8001860:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001864:	2000      	movs	r0, #0
 8001866:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
}
 800186a:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = (heth->Instance)->MACCR;
 800186c:	6801      	ldr	r1, [r0, #0]
 800186e:	680a      	ldr	r2, [r1, #0]
    tmpreg1 &= ~(0x00004800U);
 8001870:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001874:	6883      	ldr	r3, [r0, #8]
 8001876:	68c0      	ldr	r0, [r0, #12]
 8001878:	4303      	orrs	r3, r0
 800187a:	4313      	orrs	r3, r2
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800187c:	600b      	str	r3, [r1, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 800187e:	682b      	ldr	r3, [r5, #0]
 8001880:	681c      	ldr	r4, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001882:	2001      	movs	r0, #1
 8001884:	f7ff fa8c 	bl	8000da0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001888:	682b      	ldr	r3, [r5, #0]
 800188a:	601c      	str	r4, [r3, #0]
 800188c:	e7e7      	b.n	800185e <HAL_ETH_ConfigMAC+0xf6>
  __HAL_LOCK(heth);
 800188e:	2002      	movs	r0, #2
}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	ff20810f 	.word	0xff20810f

08001898 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001898:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800189a:	490a      	ldr	r1, [pc, #40]	; (80018c4 <FLASH_Program_DoubleWord+0x2c>)
 800189c:	690c      	ldr	r4, [r1, #16]
 800189e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 80018a2:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80018a4:	690c      	ldr	r4, [r1, #16]
 80018a6:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80018aa:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 80018ac:	690c      	ldr	r4, [r1, #16]
 80018ae:	f044 0401 	orr.w	r4, r4, #1
 80018b2:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80018b4:	6002      	str	r2, [r0, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80018ba:	6043      	str	r3, [r0, #4]
}
 80018bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40023c00 	.word	0x40023c00

080018c8 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <FLASH_Program_Word+0x20>)
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80018d0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018d8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	f042 0201 	orr.w	r2, r2, #1
 80018e0:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80018e2:	6001      	str	r1, [r0, #0]
}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40023c00 	.word	0x40023c00

080018ec <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <FLASH_Program_HalfWord+0x20>)
 80018ee:	691a      	ldr	r2, [r3, #16]
 80018f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80018f4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018fc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80018fe:	691a      	ldr	r2, [r3, #16]
 8001900:	f042 0201 	orr.w	r2, r2, #1
 8001904:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8001906:	8001      	strh	r1, [r0, #0]
}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40023c00 	.word	0x40023c00

08001910 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <FLASH_Program_Byte+0x1c>)
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001918:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800191a:	691a      	ldr	r2, [r3, #16]
 800191c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800191e:	691a      	ldr	r2, [r3, #16]
 8001920:	f042 0201 	orr.w	r2, r2, #1
 8001924:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 8001926:	7001      	strb	r1, [r0, #0]
}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40023c00 	.word	0x40023c00

08001930 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001930:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <FLASH_SetErrorCode+0x84>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f013 0f10 	tst.w	r3, #16
 8001938:	d007      	beq.n	800194a <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800193a:	4a1f      	ldr	r2, [pc, #124]	; (80019b8 <FLASH_SetErrorCode+0x88>)
 800193c:	69d3      	ldr	r3, [r2, #28]
 800193e:	f043 0310 	orr.w	r3, r3, #16
 8001942:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <FLASH_SetErrorCode+0x84>)
 8001946:	2210      	movs	r2, #16
 8001948:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <FLASH_SetErrorCode+0x84>)
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	f013 0f20 	tst.w	r3, #32
 8001952:	d007      	beq.n	8001964 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001954:	4a18      	ldr	r2, [pc, #96]	; (80019b8 <FLASH_SetErrorCode+0x88>)
 8001956:	69d3      	ldr	r3, [r2, #28]
 8001958:	f043 0308 	orr.w	r3, r3, #8
 800195c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <FLASH_SetErrorCode+0x84>)
 8001960:	2220      	movs	r2, #32
 8001962:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <FLASH_SetErrorCode+0x84>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f013 0f40 	tst.w	r3, #64	; 0x40
 800196c:	d007      	beq.n	800197e <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <FLASH_SetErrorCode+0x88>)
 8001970:	69d3      	ldr	r3, [r2, #28]
 8001972:	f043 0304 	orr.w	r3, r3, #4
 8001976:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <FLASH_SetErrorCode+0x84>)
 800197a:	2240      	movs	r2, #64	; 0x40
 800197c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <FLASH_SetErrorCode+0x84>)
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001986:	d007      	beq.n	8001998 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001988:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <FLASH_SetErrorCode+0x88>)
 800198a:	69d3      	ldr	r3, [r2, #28]
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <FLASH_SetErrorCode+0x84>)
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <FLASH_SetErrorCode+0x84>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f013 0f02 	tst.w	r3, #2
 80019a0:	d007      	beq.n	80019b2 <FLASH_SetErrorCode+0x82>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80019a2:	4a05      	ldr	r2, [pc, #20]	; (80019b8 <FLASH_SetErrorCode+0x88>)
 80019a4:	69d3      	ldr	r3, [r2, #28]
 80019a6:	f043 0320 	orr.w	r3, r3, #32
 80019aa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80019ac:	4b01      	ldr	r3, [pc, #4]	; (80019b4 <FLASH_SetErrorCode+0x84>)
 80019ae:	2202      	movs	r2, #2
 80019b0:	60da      	str	r2, [r3, #12]
  }
}
 80019b2:	4770      	bx	lr
 80019b4:	40023c00 	.word	0x40023c00
 80019b8:	2000198c 	.word	0x2000198c

080019bc <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_FLASH_Unlock+0x28>)
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db01      	blt.n	80019c8 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80019c4:	2000      	movs	r0, #0
 80019c6:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <HAL_FLASH_Unlock+0x28>)
 80019ca:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <HAL_FLASH_Unlock+0x2c>)
 80019cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80019ce:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80019d2:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db01      	blt.n	80019de <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80019da:	2000      	movs	r0, #0
 80019dc:	4770      	bx	lr
      status = HAL_ERROR;
 80019de:	2001      	movs	r0, #1
}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40023c00 	.word	0x40023c00
 80019e8:	45670123 	.word	0x45670123

080019ec <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 80019ec:	4a03      	ldr	r2, [pc, #12]	; (80019fc <HAL_FLASH_Lock+0x10>)
 80019ee:	6913      	ldr	r3, [r2, #16]
 80019f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019f4:	6113      	str	r3, [r2, #16]
}
 80019f6:	2000      	movs	r0, #0
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40023c00 	.word	0x40023c00

08001a00 <FLASH_WaitForLastOperation>:
{ 
 8001a00:	b538      	push	{r3, r4, r5, lr}
 8001a02:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <FLASH_WaitForLastOperation+0x5c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 8001a0a:	f002 fcf3 	bl	80043f4 <HAL_GetTick>
 8001a0e:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <FLASH_WaitForLastOperation+0x60>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001a18:	d00a      	beq.n	8001a30 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 8001a1a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001a1e:	d0f7      	beq.n	8001a10 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001a20:	b1cc      	cbz	r4, 8001a56 <FLASH_WaitForLastOperation+0x56>
 8001a22:	f002 fce7 	bl	80043f4 <HAL_GetTick>
 8001a26:	1b40      	subs	r0, r0, r5
 8001a28:	42a0      	cmp	r0, r4
 8001a2a:	d9f1      	bls.n	8001a10 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	e00d      	b.n	8001a4c <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <FLASH_WaitForLastOperation+0x60>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f013 0f01 	tst.w	r3, #1
 8001a38:	d002      	beq.n	8001a40 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <FLASH_WaitForLastOperation+0x60>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001a40:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <FLASH_WaitForLastOperation+0x60>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f013 0ff2 	tst.w	r3, #242	; 0xf2
 8001a48:	d101      	bne.n	8001a4e <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 8001a4a:	2000      	movs	r0, #0
}  
 8001a4c:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 8001a4e:	f7ff ff6f 	bl	8001930 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001a52:	2001      	movs	r0, #1
 8001a54:	e7fa      	b.n	8001a4c <FLASH_WaitForLastOperation+0x4c>
        return HAL_TIMEOUT;
 8001a56:	2003      	movs	r0, #3
 8001a58:	e7f8      	b.n	8001a4c <FLASH_WaitForLastOperation+0x4c>
 8001a5a:	bf00      	nop
 8001a5c:	2000198c 	.word	0x2000198c
 8001a60:	40023c00 	.word	0x40023c00

08001a64 <HAL_FLASH_Program>:
{
 8001a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8001a66:	4c1d      	ldr	r4, [pc, #116]	; (8001adc <HAL_FLASH_Program+0x78>)
 8001a68:	7e24      	ldrb	r4, [r4, #24]
 8001a6a:	2c01      	cmp	r4, #1
 8001a6c:	d034      	beq.n	8001ad8 <HAL_FLASH_Program+0x74>
 8001a6e:	461f      	mov	r7, r3
 8001a70:	4616      	mov	r6, r2
 8001a72:	460d      	mov	r5, r1
 8001a74:	4604      	mov	r4, r0
 8001a76:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_FLASH_Program+0x78>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a80:	f7ff ffbe 	bl	8001a00 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001a84:	4601      	mov	r1, r0
 8001a86:	b998      	cbnz	r0, 8001ab0 <HAL_FLASH_Program+0x4c>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a88:	b1bc      	cbz	r4, 8001aba <HAL_FLASH_Program+0x56>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a8a:	2c01      	cmp	r4, #1
 8001a8c:	d01a      	beq.n	8001ac4 <HAL_FLASH_Program+0x60>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a8e:	2c02      	cmp	r4, #2
 8001a90:	d01d      	beq.n	8001ace <HAL_FLASH_Program+0x6a>
      FLASH_Program_DoubleWord(Address, Data);
 8001a92:	4632      	mov	r2, r6
 8001a94:	463b      	mov	r3, r7
 8001a96:	4628      	mov	r0, r5
 8001a98:	f7ff fefe 	bl	8001898 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001aa0:	f7ff ffae 	bl	8001a00 <FLASH_WaitForLastOperation>
 8001aa4:	4601      	mov	r1, r0
    FLASH->CR &= (~FLASH_CR_PG);  
 8001aa6:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <HAL_FLASH_Program+0x7c>)
 8001aa8:	6913      	ldr	r3, [r2, #16]
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_FLASH_Program+0x78>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	761a      	strb	r2, [r3, #24]
}
 8001ab6:	4608      	mov	r0, r1
 8001ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001aba:	b2f1      	uxtb	r1, r6
 8001abc:	4628      	mov	r0, r5
 8001abe:	f7ff ff27 	bl	8001910 <FLASH_Program_Byte>
 8001ac2:	e7eb      	b.n	8001a9c <HAL_FLASH_Program+0x38>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001ac4:	b2b1      	uxth	r1, r6
 8001ac6:	4628      	mov	r0, r5
 8001ac8:	f7ff ff10 	bl	80018ec <FLASH_Program_HalfWord>
 8001acc:	e7e6      	b.n	8001a9c <HAL_FLASH_Program+0x38>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001ace:	4631      	mov	r1, r6
 8001ad0:	4628      	mov	r0, r5
 8001ad2:	f7ff fef9 	bl	80018c8 <FLASH_Program_Word>
 8001ad6:	e7e1      	b.n	8001a9c <HAL_FLASH_Program+0x38>
  __HAL_LOCK(&pFlash);
 8001ad8:	2102      	movs	r1, #2
 8001ada:	e7ec      	b.n	8001ab6 <HAL_FLASH_Program+0x52>
 8001adc:	2000198c 	.word	0x2000198c
 8001ae0:	40023c00 	.word	0x40023c00

08001ae4 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <FLASH_MassErase+0x20>)
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001aec:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	f042 0204 	orr.w	r2, r2, #4
 8001af4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8001afc:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8001b00:	6118      	str	r0, [r3, #16]
}
 8001b02:	4770      	bx	lr
 8001b04:	40023c00 	.word	0x40023c00

08001b08 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001b08:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001b0a:	b149      	cbz	r1, 8001b20 <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001b0c:	2901      	cmp	r1, #1
 8001b0e:	d021      	beq.n	8001b54 <FLASH_Erase_Sector+0x4c>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001b10:	2902      	cmp	r1, #2
 8001b12:	d002      	beq.n	8001b1a <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001b14:	f44f 7440 	mov.w	r4, #768	; 0x300
 8001b18:	e003      	b.n	8001b22 <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_WORD;
 8001b1a:	f44f 7400 	mov.w	r4, #512	; 0x200
 8001b1e:	e000      	b.n	8001b22 <FLASH_Erase_Sector+0x1a>
     tmp_psize = FLASH_PSIZE_BYTE;
 8001b20:	2400      	movs	r4, #0
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <FLASH_Erase_Sector+0x54>)
 8001b24:	6919      	ldr	r1, [r3, #16]
 8001b26:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001b2a:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	4322      	orrs	r2, r4
 8001b30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001b38:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8001b40:	f040 0002 	orr.w	r0, r0, #2
 8001b44:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b4c:	611a      	str	r2, [r3, #16]
}
 8001b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b52:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001b54:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001b58:	e7e3      	b.n	8001b22 <FLASH_Erase_Sector+0x1a>
 8001b5a:	bf00      	nop
 8001b5c:	40023c00 	.word	0x40023c00

08001b60 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001b60:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <FLASH_FlushCaches+0x5c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001b68:	d010      	beq.n	8001b8c <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <FLASH_FlushCaches+0x5c>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b72:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b82:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b8a:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <FLASH_FlushCaches+0x5c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001b94:	d010      	beq.n	8001bb8 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <FLASH_FlushCaches+0x5c>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b9e:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bae:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bb6:	601a      	str	r2, [r3, #0]
  }
}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023c00 	.word	0x40023c00

08001bc0 <HAL_FLASHEx_Erase>:
{
 8001bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8001bc2:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <HAL_FLASHEx_Erase+0x8c>)
 8001bc4:	7e1b      	ldrb	r3, [r3, #24]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d03e      	beq.n	8001c48 <HAL_FLASHEx_Erase+0x88>
 8001bca:	460e      	mov	r6, r1
 8001bcc:	4604      	mov	r4, r0
 8001bce:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <HAL_FLASHEx_Erase+0x8c>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bd8:	f7ff ff12 	bl	8001a00 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001bdc:	4607      	mov	r7, r0
 8001bde:	bb70      	cbnz	r0, 8001c3e <HAL_FLASHEx_Erase+0x7e>
    *SectorError = 0xFFFFFFFFU;
 8001be0:	f04f 33ff 	mov.w	r3, #4294967295
 8001be4:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d016      	beq.n	8001c1a <HAL_FLASHEx_Erase+0x5a>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001bec:	68a5      	ldr	r5, [r4, #8]
 8001bee:	68e3      	ldr	r3, [r4, #12]
 8001bf0:	68a2      	ldr	r2, [r4, #8]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	42ab      	cmp	r3, r5
 8001bf6:	d920      	bls.n	8001c3a <HAL_FLASHEx_Erase+0x7a>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001bf8:	7c21      	ldrb	r1, [r4, #16]
 8001bfa:	4628      	mov	r0, r5
 8001bfc:	f7ff ff84 	bl	8001b08 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c04:	f7ff fefc 	bl	8001a00 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001c08:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <HAL_FLASHEx_Erase+0x90>)
 8001c0a:	6913      	ldr	r3, [r2, #16]
 8001c0c:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001c10:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 8001c12:	4607      	mov	r7, r0
 8001c14:	b980      	cbnz	r0, 8001c38 <HAL_FLASHEx_Erase+0x78>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001c16:	3501      	adds	r5, #1
 8001c18:	e7e9      	b.n	8001bee <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001c1a:	6861      	ldr	r1, [r4, #4]
 8001c1c:	7c20      	ldrb	r0, [r4, #16]
 8001c1e:	f7ff ff61 	bl	8001ae4 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c22:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c26:	f7ff feeb 	bl	8001a00 <FLASH_WaitForLastOperation>
 8001c2a:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8001c2c:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <HAL_FLASHEx_Erase+0x90>)
 8001c2e:	6913      	ldr	r3, [r2, #16]
 8001c30:	f023 0304 	bic.w	r3, r3, #4
 8001c34:	6113      	str	r3, [r2, #16]
 8001c36:	e000      	b.n	8001c3a <HAL_FLASHEx_Erase+0x7a>
          *SectorError = index;
 8001c38:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();    
 8001c3a:	f7ff ff91 	bl	8001b60 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8001c3e:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_FLASHEx_Erase+0x8c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	761a      	strb	r2, [r3, #24]
}
 8001c44:	4638      	mov	r0, r7
 8001c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8001c48:	2702      	movs	r7, #2
 8001c4a:	e7fb      	b.n	8001c44 <HAL_FLASHEx_Erase+0x84>
 8001c4c:	2000198c 	.word	0x2000198c
 8001c50:	40023c00 	.word	0x40023c00

08001c54 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	2b0f      	cmp	r3, #15
 8001c58:	f200 80d7 	bhi.w	8001e0a <HAL_GPIO_Init+0x1b6>
{
 8001c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	e039      	b.n	8001cd6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c62:	2207      	movs	r2, #7
 8001c64:	e000      	b.n	8001c68 <HAL_GPIO_Init+0x14>
 8001c66:	2200      	movs	r2, #0
 8001c68:	40aa      	lsls	r2, r5
 8001c6a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c6c:	3402      	adds	r4, #2
 8001c6e:	4d67      	ldr	r5, [pc, #412]	; (8001e0c <HAL_GPIO_Init+0x1b8>)
 8001c70:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c74:	4a66      	ldr	r2, [pc, #408]	; (8001e10 <HAL_GPIO_Init+0x1bc>)
 8001c76:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001c78:	43f2      	mvns	r2, r6
 8001c7a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c7e:	684f      	ldr	r7, [r1, #4]
 8001c80:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001c84:	d001      	beq.n	8001c8a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8001c86:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 8001c8a:	4c61      	ldr	r4, [pc, #388]	; (8001e10 <HAL_GPIO_Init+0x1bc>)
 8001c8c:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8001c8e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001c90:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c94:	684f      	ldr	r7, [r1, #4]
 8001c96:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001c9a:	d001      	beq.n	8001ca0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001c9c:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 8001ca0:	4c5b      	ldr	r4, [pc, #364]	; (8001e10 <HAL_GPIO_Init+0x1bc>)
 8001ca2:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001ca6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001caa:	684f      	ldr	r7, [r1, #4]
 8001cac:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001cb0:	d001      	beq.n	8001cb6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8001cb2:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 8001cb6:	4c56      	ldr	r4, [pc, #344]	; (8001e10 <HAL_GPIO_Init+0x1bc>)
 8001cb8:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001cba:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cbe:	684d      	ldr	r5, [r1, #4]
 8001cc0:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8001cc4:	d001      	beq.n	8001cca <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8001cc6:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 8001cca:	4c51      	ldr	r4, [pc, #324]	; (8001e10 <HAL_GPIO_Init+0x1bc>)
 8001ccc:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cce:	3301      	adds	r3, #1
 8001cd0:	2b0f      	cmp	r3, #15
 8001cd2:	f200 8098 	bhi.w	8001e06 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cda:	680c      	ldr	r4, [r1, #0]
 8001cdc:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8001ce0:	42b2      	cmp	r2, r6
 8001ce2:	d1f4      	bne.n	8001cce <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ce4:	684c      	ldr	r4, [r1, #4]
 8001ce6:	1e65      	subs	r5, r4, #1
 8001ce8:	2d01      	cmp	r5, #1
 8001cea:	d903      	bls.n	8001cf4 <HAL_GPIO_Init+0xa0>
 8001cec:	2c11      	cmp	r4, #17
 8001cee:	d001      	beq.n	8001cf4 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cf0:	2c12      	cmp	r4, #18
 8001cf2:	d112      	bne.n	8001d1a <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8001cf4:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf6:	005f      	lsls	r7, r3, #1
 8001cf8:	2403      	movs	r4, #3
 8001cfa:	40bc      	lsls	r4, r7
 8001cfc:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d00:	68cc      	ldr	r4, [r1, #12]
 8001d02:	40bc      	lsls	r4, r7
 8001d04:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001d06:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001d08:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d0a:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d0e:	684c      	ldr	r4, [r1, #4]
 8001d10:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001d14:	409a      	lsls	r2, r3
 8001d16:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8001d18:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001d1a:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d1c:	005f      	lsls	r7, r3, #1
 8001d1e:	2203      	movs	r2, #3
 8001d20:	40ba      	lsls	r2, r7
 8001d22:	43d2      	mvns	r2, r2
 8001d24:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d26:	688d      	ldr	r5, [r1, #8]
 8001d28:	40bd      	lsls	r5, r7
 8001d2a:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8001d2c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d2e:	684c      	ldr	r4, [r1, #4]
 8001d30:	2c02      	cmp	r4, #2
 8001d32:	d001      	beq.n	8001d38 <HAL_GPIO_Init+0xe4>
 8001d34:	2c12      	cmp	r4, #18
 8001d36:	d113      	bne.n	8001d60 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8001d38:	08dd      	lsrs	r5, r3, #3
 8001d3a:	3508      	adds	r5, #8
 8001d3c:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d40:	f003 0407 	and.w	r4, r3, #7
 8001d44:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8001d48:	240f      	movs	r4, #15
 8001d4a:	fa04 f40c 	lsl.w	r4, r4, ip
 8001d4e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d52:	690c      	ldr	r4, [r1, #16]
 8001d54:	fa04 f40c 	lsl.w	r4, r4, ip
 8001d58:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001d5c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8001d60:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d62:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d64:	684c      	ldr	r4, [r1, #4]
 8001d66:	f004 0403 	and.w	r4, r4, #3
 8001d6a:	40bc      	lsls	r4, r7
 8001d6c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001d6e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d70:	684a      	ldr	r2, [r1, #4]
 8001d72:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001d76:	d0aa      	beq.n	8001cce <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d78:	2200      	movs	r2, #0
 8001d7a:	9201      	str	r2, [sp, #4]
 8001d7c:	4a25      	ldr	r2, [pc, #148]	; (8001e14 <HAL_GPIO_Init+0x1c0>)
 8001d7e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001d80:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001d84:	6454      	str	r4, [r2, #68]	; 0x44
 8001d86:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d88:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d8c:	9201      	str	r2, [sp, #4]
 8001d8e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001d90:	089c      	lsrs	r4, r3, #2
 8001d92:	1ca5      	adds	r5, r4, #2
 8001d94:	4a1d      	ldr	r2, [pc, #116]	; (8001e0c <HAL_GPIO_Init+0x1b8>)
 8001d96:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d9a:	f003 0203 	and.w	r2, r3, #3
 8001d9e:	0095      	lsls	r5, r2, #2
 8001da0:	220f      	movs	r2, #15
 8001da2:	40aa      	lsls	r2, r5
 8001da4:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001da8:	4a1b      	ldr	r2, [pc, #108]	; (8001e18 <HAL_GPIO_Init+0x1c4>)
 8001daa:	4290      	cmp	r0, r2
 8001dac:	f43f af5b 	beq.w	8001c66 <HAL_GPIO_Init+0x12>
 8001db0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001db4:	4290      	cmp	r0, r2
 8001db6:	d01a      	beq.n	8001dee <HAL_GPIO_Init+0x19a>
 8001db8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dbc:	4290      	cmp	r0, r2
 8001dbe:	d018      	beq.n	8001df2 <HAL_GPIO_Init+0x19e>
 8001dc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dc4:	4290      	cmp	r0, r2
 8001dc6:	d016      	beq.n	8001df6 <HAL_GPIO_Init+0x1a2>
 8001dc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dcc:	4290      	cmp	r0, r2
 8001dce:	d014      	beq.n	8001dfa <HAL_GPIO_Init+0x1a6>
 8001dd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dd4:	4290      	cmp	r0, r2
 8001dd6:	d012      	beq.n	8001dfe <HAL_GPIO_Init+0x1aa>
 8001dd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ddc:	4290      	cmp	r0, r2
 8001dde:	d010      	beq.n	8001e02 <HAL_GPIO_Init+0x1ae>
 8001de0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001de4:	4290      	cmp	r0, r2
 8001de6:	f43f af3c 	beq.w	8001c62 <HAL_GPIO_Init+0xe>
 8001dea:	2208      	movs	r2, #8
 8001dec:	e73c      	b.n	8001c68 <HAL_GPIO_Init+0x14>
 8001dee:	2201      	movs	r2, #1
 8001df0:	e73a      	b.n	8001c68 <HAL_GPIO_Init+0x14>
 8001df2:	2202      	movs	r2, #2
 8001df4:	e738      	b.n	8001c68 <HAL_GPIO_Init+0x14>
 8001df6:	2203      	movs	r2, #3
 8001df8:	e736      	b.n	8001c68 <HAL_GPIO_Init+0x14>
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	e734      	b.n	8001c68 <HAL_GPIO_Init+0x14>
 8001dfe:	2205      	movs	r2, #5
 8001e00:	e732      	b.n	8001c68 <HAL_GPIO_Init+0x14>
 8001e02:	2206      	movs	r2, #6
 8001e04:	e730      	b.n	8001c68 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001e06:	b003      	add	sp, #12
 8001e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e0a:	4770      	bx	lr
 8001e0c:	40013800 	.word	0x40013800
 8001e10:	40013c00 	.word	0x40013c00
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020000 	.word	0x40020000

08001e1c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e1c:	b912      	cbnz	r2, 8001e24 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e1e:	0409      	lsls	r1, r1, #16
 8001e20:	6181      	str	r1, [r0, #24]
  }
}
 8001e22:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001e24:	6181      	str	r1, [r0, #24]
 8001e26:	4770      	bx	lr

08001e28 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001e28:	4b01      	ldr	r3, [pc, #4]	; (8001e30 <HAL_RCC_GetHCLKFreq+0x8>)
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000000 	.word	0x20000000

08001e34 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8001e34:	b570      	push	{r4, r5, r6, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001e3e:	6800      	ldr	r0, [r0, #0]
 8001e40:	f001 fa58 	bl	80032f4 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001e44:	4606      	mov	r6, r0
 8001e46:	b110      	cbz	r0, 8001e4e <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 8001e48:	4630      	mov	r0, r6
 8001e4a:	b002      	add	sp, #8
 8001e4c:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8001e4e:	6820      	ldr	r0, [r4, #0]
 8001e50:	f001 fa63 	bl	800331a <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001e54:	b938      	cbnz	r0, 8001e66 <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8001e56:	2301      	movs	r3, #1
 8001e58:	64a3      	str	r3, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8001e5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d00b      	beq.n	8001e78 <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8001e60:	4635      	mov	r5, r6
 8001e62:	4630      	mov	r0, r6
 8001e64:	e014      	b.n	8001e90 <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8001e66:	2300      	movs	r3, #0
 8001e68:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001e6a:	6820      	ldr	r0, [r4, #0]
 8001e6c:	f001 fa42 	bl	80032f4 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e70:	2800      	cmp	r0, #0
 8001e72:	d0f2      	beq.n	8001e5a <SD_PowerON+0x26>
      return errorstate;
 8001e74:	4606      	mov	r6, r0
 8001e76:	e7e7      	b.n	8001e48 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8001e78:	2100      	movs	r1, #0
 8001e7a:	6820      	ldr	r0, [r4, #0]
 8001e7c:	f001 fa64 	bl	8003348 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e80:	2800      	cmp	r0, #0
 8001e82:	d0ed      	beq.n	8001e60 <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001e84:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8001e88:	e7de      	b.n	8001e48 <SD_PowerON+0x14>
    count++;
 8001e8a:	9b01      	ldr	r3, [sp, #4]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8001e90:	9a01      	ldr	r2, [sp, #4]
 8001e92:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d813      	bhi.n	8001ec2 <SD_PowerON+0x8e>
 8001e9a:	b995      	cbnz	r5, 8001ec2 <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	6820      	ldr	r0, [r4, #0]
 8001ea0:	f001 fa52 	bl	8003348 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001ea4:	b9d8      	cbnz	r0, 8001ede <SD_PowerON+0xaa>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8001ea6:	4912      	ldr	r1, [pc, #72]	; (8001ef0 <SD_PowerON+0xbc>)
 8001ea8:	6820      	ldr	r0, [r4, #0]
 8001eaa:	f001 fa65 	bl	8003378 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001eae:	4605      	mov	r5, r0
 8001eb0:	b9b8      	cbnz	r0, 8001ee2 <SD_PowerON+0xae>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	6820      	ldr	r0, [r4, #0]
 8001eb6:	f001 f860 	bl	8002f7a <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8001eba:	0fc3      	lsrs	r3, r0, #31
 8001ebc:	d0e5      	beq.n	8001e8a <SD_PowerON+0x56>
 8001ebe:	461d      	mov	r5, r3
 8001ec0:	e7e3      	b.n	8001e8a <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8001ec2:	9a01      	ldr	r2, [sp, #4]
 8001ec4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d80d      	bhi.n	8001ee8 <SD_PowerON+0xb4>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8001ecc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8001ed0:	d102      	bne.n	8001ed8 <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDSC;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	6463      	str	r3, [r4, #68]	; 0x44
 8001ed6:	e7b7      	b.n	8001e48 <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	6463      	str	r3, [r4, #68]	; 0x44
 8001edc:	e7b4      	b.n	8001e48 <SD_PowerON+0x14>
      return errorstate;
 8001ede:	4606      	mov	r6, r0
 8001ee0:	e7b2      	b.n	8001e48 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001ee2:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8001ee6:	e7af      	b.n	8001e48 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8001ee8:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 8001eec:	e7ac      	b.n	8001e48 <SD_PowerON+0x14>
 8001eee:	bf00      	nop
 8001ef0:	c1100000 	.word	0xc1100000

08001ef4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8001ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ef8:	b088      	sub	sp, #32
 8001efa:	4604      	mov	r4, r0
 8001efc:	460f      	mov	r7, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001efe:	f002 fa79 	bl	80043f4 <HAL_GetTick>
 8001f02:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8001f04:	2300      	movs	r3, #0
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8001f0a:	2108      	movs	r1, #8
 8001f0c:	6820      	ldr	r0, [r4, #0]
 8001f0e:	f001 f947 	bl	80031a0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f12:	4605      	mov	r5, r0
 8001f14:	b118      	cbz	r0, 8001f1e <SD_FindSCR+0x2a>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8001f16:	4628      	mov	r0, r5
 8001f18:	b008      	add	sp, #32
 8001f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8001f1e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001f20:	0409      	lsls	r1, r1, #16
 8001f22:	6820      	ldr	r0, [r4, #0]
 8001f24:	f001 fa10 	bl	8003348 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f28:	4605      	mov	r5, r0
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	d1f3      	bne.n	8001f16 <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8001f34:	2308      	movs	r3, #8
 8001f36:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8001f38:	2330      	movs	r3, #48	; 0x30
 8001f3a:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8001f44:	2301      	movs	r3, #1
 8001f46:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8001f48:	a902      	add	r1, sp, #8
 8001f4a:	6820      	ldr	r0, [r4, #0]
 8001f4c:	f001 f916 	bl	800317c <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8001f50:	6820      	ldr	r0, [r4, #0]
 8001f52:	f001 fa42 	bl	80033da <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f56:	4605      	mov	r5, r0
 8001f58:	2800      	cmp	r0, #0
 8001f5a:	d1dc      	bne.n	8001f16 <SD_FindSCR+0x22>
  uint32_t index = 0U;
 8001f5c:	4680      	mov	r8, r0
 8001f5e:	e005      	b.n	8001f6c <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8001f60:	f002 fa48 	bl	80043f4 <HAL_GetTick>
 8001f64:	1b80      	subs	r0, r0, r6
 8001f66:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001f6a:	d043      	beq.n	8001ff4 <SD_FindSCR+0x100>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8001f6c:	6820      	ldr	r0, [r4, #0]
 8001f6e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001f70:	f240 432a 	movw	r3, #1066	; 0x42a
 8001f74:	421a      	tst	r2, r3
 8001f76:	d10a      	bne.n	8001f8e <SD_FindSCR+0x9a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8001f78:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001f7a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001f7e:	d0ef      	beq.n	8001f60 <SD_FindSCR+0x6c>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8001f80:	f000 ffd2 	bl	8002f28 <SDIO_ReadFIFO>
 8001f84:	f84d 0028 	str.w	r0, [sp, r8, lsl #2]
      index++;
 8001f88:	f108 0801 	add.w	r8, r8, #1
 8001f8c:	e7e8      	b.n	8001f60 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001f8e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001f90:	f013 0f08 	tst.w	r3, #8
 8001f94:	d125      	bne.n	8001fe2 <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001f96:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001f98:	f013 0f02 	tst.w	r3, #2
 8001f9c:	d124      	bne.n	8001fe8 <SD_FindSCR+0xf4>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001f9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001fa0:	f013 0f20 	tst.w	r3, #32
 8001fa4:	d123      	bne.n	8001fee <SD_FindSCR+0xfa>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001fa6:	f240 533a 	movw	r3, #1338	; 0x53a
 8001faa:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8001fac:	9a01      	ldr	r2, [sp, #4]
 8001fae:	0213      	lsls	r3, r2, #8
 8001fb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001fb4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8001fb8:	0a11      	lsrs	r1, r2, #8
 8001fba:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8001fbe:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8001fc0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8001fc4:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8001fc6:	9a00      	ldr	r2, [sp, #0]
 8001fc8:	0213      	lsls	r3, r2, #8
 8001fca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001fce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8001fd2:	0a11      	lsrs	r1, r2, #8
 8001fd4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8001fd8:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8001fda:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8001fde:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8001fe0:	e799      	b.n	8001f16 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8001fe2:	2508      	movs	r5, #8
 8001fe4:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8001fe6:	e796      	b.n	8001f16 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8001fe8:	2502      	movs	r5, #2
 8001fea:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8001fec:	e793      	b.n	8001f16 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8001fee:	2520      	movs	r5, #32
 8001ff0:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8001ff2:	e790      	b.n	8001f16 <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8001ff4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8001ff8:	e78d      	b.n	8001f16 <SD_FindSCR+0x22>

08001ffa <SD_WideBus_Enable>:
{
 8001ffa:	b510      	push	{r4, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8002000:	2100      	movs	r1, #0
 8002002:	9100      	str	r1, [sp, #0]
 8002004:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002006:	6800      	ldr	r0, [r0, #0]
 8002008:	f000 ffb7 	bl	8002f7a <SDIO_GetResponse>
 800200c:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8002010:	d116      	bne.n	8002040 <SD_WideBus_Enable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8002012:	4669      	mov	r1, sp
 8002014:	4620      	mov	r0, r4
 8002016:	f7ff ff6d 	bl	8001ef4 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800201a:	4603      	mov	r3, r0
 800201c:	b990      	cbnz	r0, 8002044 <SD_WideBus_Enable+0x4a>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800201e:	9b01      	ldr	r3, [sp, #4]
 8002020:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002024:	d011      	beq.n	800204a <SD_WideBus_Enable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002026:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002028:	0409      	lsls	r1, r1, #16
 800202a:	6820      	ldr	r0, [r4, #0]
 800202c:	f001 f98c 	bl	8003348 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002030:	4603      	mov	r3, r0
 8002032:	b938      	cbnz	r0, 8002044 <SD_WideBus_Enable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002034:	2102      	movs	r1, #2
 8002036:	6820      	ldr	r0, [r4, #0]
 8002038:	f001 f9b7 	bl	80033aa <SDMMC_CmdBusWidth>
 800203c:	4603      	mov	r3, r0
 800203e:	e001      	b.n	8002044 <SD_WideBus_Enable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002040:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8002044:	4618      	mov	r0, r3
 8002046:	b002      	add	sp, #8
 8002048:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800204a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800204e:	e7f9      	b.n	8002044 <SD_WideBus_Enable+0x4a>

08002050 <SD_WideBus_Disable>:
{
 8002050:	b510      	push	{r4, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8002056:	2100      	movs	r1, #0
 8002058:	9100      	str	r1, [sp, #0]
 800205a:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800205c:	6800      	ldr	r0, [r0, #0]
 800205e:	f000 ff8c 	bl	8002f7a <SDIO_GetResponse>
 8002062:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8002066:	d116      	bne.n	8002096 <SD_WideBus_Disable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8002068:	4669      	mov	r1, sp
 800206a:	4620      	mov	r0, r4
 800206c:	f7ff ff42 	bl	8001ef4 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002070:	4603      	mov	r3, r0
 8002072:	b990      	cbnz	r0, 800209a <SD_WideBus_Disable+0x4a>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002074:	9b01      	ldr	r3, [sp, #4]
 8002076:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800207a:	d011      	beq.n	80020a0 <SD_WideBus_Disable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800207c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800207e:	0409      	lsls	r1, r1, #16
 8002080:	6820      	ldr	r0, [r4, #0]
 8002082:	f001 f961 	bl	8003348 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002086:	4603      	mov	r3, r0
 8002088:	b938      	cbnz	r0, 800209a <SD_WideBus_Disable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800208a:	2100      	movs	r1, #0
 800208c:	6820      	ldr	r0, [r4, #0]
 800208e:	f001 f98c 	bl	80033aa <SDMMC_CmdBusWidth>
 8002092:	4603      	mov	r3, r0
 8002094:	e001      	b.n	800209a <SD_WideBus_Disable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002096:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 800209a:	4618      	mov	r0, r3
 800209c:	b002      	add	sp, #8
 800209e:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80020a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80020a4:	e7f9      	b.n	800209a <SD_WideBus_Disable+0x4a>

080020a6 <SD_SendStatus>:
{
 80020a6:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 80020a8:	b181      	cbz	r1, 80020cc <SD_SendStatus+0x26>
 80020aa:	460d      	mov	r5, r1
 80020ac:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80020ae:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80020b0:	0409      	lsls	r1, r1, #16
 80020b2:	6800      	ldr	r0, [r0, #0]
 80020b4:	f001 f9eb 	bl	800348e <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80020b8:	4606      	mov	r6, r0
 80020ba:	b108      	cbz	r0, 80020c0 <SD_SendStatus+0x1a>
}
 80020bc:	4630      	mov	r0, r6
 80020be:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80020c0:	2100      	movs	r1, #0
 80020c2:	6820      	ldr	r0, [r4, #0]
 80020c4:	f000 ff59 	bl	8002f7a <SDIO_GetResponse>
 80020c8:	6028      	str	r0, [r5, #0]
  return HAL_SD_ERROR_NONE;
 80020ca:	e7f7      	b.n	80020bc <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 80020cc:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 80020d0:	e7f4      	b.n	80020bc <SD_SendStatus+0x16>
	...

080020d4 <HAL_SD_ReadBlocks>:
{
 80020d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	4604      	mov	r4, r0
 80020dc:	460d      	mov	r5, r1
 80020de:	4690      	mov	r8, r2
 80020e0:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 80020e2:	f002 f987 	bl	80043f4 <HAL_GetTick>
  if(NULL == pData)
 80020e6:	b16d      	cbz	r5, 8002104 <HAL_SD_ReadBlocks+0x30>
 80020e8:	4607      	mov	r7, r0
  if(hsd->State == HAL_SD_STATE_READY)
 80020ea:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d00d      	beq.n	8002110 <HAL_SD_ReadBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80020f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020fa:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80020fc:	2001      	movs	r0, #1
}
 80020fe:	b006      	add	sp, #24
 8002100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002104:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002106:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800210a:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800210c:	2001      	movs	r0, #1
 800210e:	e7f6      	b.n	80020fe <HAL_SD_ReadBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002110:	2300      	movs	r3, #0
 8002112:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002114:	eb08 0306 	add.w	r3, r8, r6
 8002118:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800211a:	4293      	cmp	r3, r2
 800211c:	d81b      	bhi.n	8002156 <HAL_SD_ReadBlocks+0x82>
    hsd->State = HAL_SD_STATE_BUSY;
 800211e:	2303      	movs	r3, #3
 8002120:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	2200      	movs	r2, #0
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800212a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800212c:	2b01      	cmp	r3, #1
 800212e:	d001      	beq.n	8002134 <HAL_SD_ReadBlocks+0x60>
      add *= 512U;
 8002130:	ea4f 2848 	mov.w	r8, r8, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002134:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002138:	6820      	ldr	r0, [r4, #0]
 800213a:	f001 f831 	bl	80031a0 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 800213e:	4603      	mov	r3, r0
 8002140:	b178      	cbz	r0, 8002162 <HAL_SD_ReadBlocks+0x8e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002142:	6822      	ldr	r2, [r4, #0]
 8002144:	497c      	ldr	r1, [pc, #496]	; (8002338 <HAL_SD_ReadBlocks+0x264>)
 8002146:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002148:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800214a:	4318      	orrs	r0, r3
 800214c:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800214e:	2001      	movs	r0, #1
 8002150:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002154:	e7d3      	b.n	80020fe <HAL_SD_ReadBlocks+0x2a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002156:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002158:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800215c:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 800215e:	2001      	movs	r0, #1
 8002160:	e7cd      	b.n	80020fe <HAL_SD_ReadBlocks+0x2a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
 8002166:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002168:	0273      	lsls	r3, r6, #9
 800216a:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800216c:	2390      	movs	r3, #144	; 0x90
 800216e:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002170:	2302      	movs	r3, #2
 8002172:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002174:	2300      	movs	r3, #0
 8002176:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002178:	2301      	movs	r3, #1
 800217a:	9305      	str	r3, [sp, #20]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800217c:	4669      	mov	r1, sp
 800217e:	6820      	ldr	r0, [r4, #0]
 8002180:	f000 fffc 	bl	800317c <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8002184:	2e01      	cmp	r6, #1
 8002186:	d90c      	bls.n	80021a2 <HAL_SD_ReadBlocks+0xce>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002188:	2302      	movs	r3, #2
 800218a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800218c:	4641      	mov	r1, r8
 800218e:	6820      	ldr	r0, [r4, #0]
 8002190:	f001 f836 	bl	8003200 <SDMMC_CmdReadMultiBlock>
 8002194:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8002196:	f1ba 0f00 	cmp.w	sl, #0
 800219a:	d10a      	bne.n	80021b2 <HAL_SD_ReadBlocks+0xde>
    dataremaining = config.DataLength;
 800219c:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80021a0:	e02f      	b.n	8002202 <HAL_SD_ReadBlocks+0x12e>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80021a2:	2301      	movs	r3, #1
 80021a4:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80021a6:	4641      	mov	r1, r8
 80021a8:	6820      	ldr	r0, [r4, #0]
 80021aa:	f001 f811 	bl	80031d0 <SDMMC_CmdReadSingleBlock>
 80021ae:	4682      	mov	sl, r0
 80021b0:	e7f1      	b.n	8002196 <HAL_SD_ReadBlocks+0xc2>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	4a60      	ldr	r2, [pc, #384]	; (8002338 <HAL_SD_ReadBlocks+0x264>)
 80021b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80021b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021ba:	ea43 030a 	orr.w	r3, r3, sl
 80021be:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80021c0:	2001      	movs	r0, #1
 80021c2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80021c6:	2300      	movs	r3, #0
 80021c8:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80021ca:	e798      	b.n	80020fe <HAL_SD_ReadBlocks+0x2a>
          data = SDIO_ReadFIFO(hsd->Instance);
 80021cc:	6820      	ldr	r0, [r4, #0]
 80021ce:	f000 feab 	bl	8002f28 <SDIO_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 80021d2:	7028      	strb	r0, [r5, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80021d4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80021d8:	706b      	strb	r3, [r5, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80021da:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80021de:	70ab      	strb	r3, [r5, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80021e0:	0e00      	lsrs	r0, r0, #24
 80021e2:	70e8      	strb	r0, [r5, #3]
          tempbuff++;
 80021e4:	3504      	adds	r5, #4
          dataremaining--;
 80021e6:	f1a9 0904 	sub.w	r9, r9, #4
        for(count = 0U; count < 8U; count++)
 80021ea:	f108 0801 	add.w	r8, r8, #1
 80021ee:	f1b8 0f07 	cmp.w	r8, #7
 80021f2:	d9eb      	bls.n	80021cc <HAL_SD_ReadBlocks+0xf8>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80021f4:	f002 f8fe 	bl	80043f4 <HAL_GetTick>
 80021f8:	1bc0      	subs	r0, r0, r7
 80021fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80021fc:	4298      	cmp	r0, r3
 80021fe:	d20f      	bcs.n	8002220 <HAL_SD_ReadBlocks+0x14c>
 8002200:	b173      	cbz	r3, 8002220 <HAL_SD_ReadBlocks+0x14c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002202:	6820      	ldr	r0, [r4, #0]
 8002204:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002206:	f240 332a 	movw	r3, #810	; 0x32a
 800220a:	421a      	tst	r2, r3
 800220c:	d116      	bne.n	800223c <HAL_SD_ReadBlocks+0x168>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800220e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002210:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002214:	d0ee      	beq.n	80021f4 <HAL_SD_ReadBlocks+0x120>
 8002216:	f1b9 0f00 	cmp.w	r9, #0
 800221a:	d0eb      	beq.n	80021f4 <HAL_SD_ReadBlocks+0x120>
        for(count = 0U; count < 8U; count++)
 800221c:	46d0      	mov	r8, sl
 800221e:	e7e6      	b.n	80021ee <HAL_SD_ReadBlocks+0x11a>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002220:	6823      	ldr	r3, [r4, #0]
 8002222:	4a45      	ldr	r2, [pc, #276]	; (8002338 <HAL_SD_ReadBlocks+0x264>)
 8002224:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002226:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002228:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800222c:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800222e:	2301      	movs	r3, #1
 8002230:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002234:	2300      	movs	r3, #0
 8002236:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8002238:	2003      	movs	r0, #3
 800223a:	e760      	b.n	80020fe <HAL_SD_ReadBlocks+0x2a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800223c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800223e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002242:	d008      	beq.n	8002256 <HAL_SD_ReadBlocks+0x182>
 8002244:	2e01      	cmp	r6, #1
 8002246:	d906      	bls.n	8002256 <HAL_SD_ReadBlocks+0x182>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002248:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800224a:	2b03      	cmp	r3, #3
 800224c:	d003      	beq.n	8002256 <HAL_SD_ReadBlocks+0x182>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800224e:	f001 f81f 	bl	8003290 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002252:	2800      	cmp	r0, #0
 8002254:	d137      	bne.n	80022c6 <HAL_SD_ReadBlocks+0x1f2>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002256:	6823      	ldr	r3, [r4, #0]
 8002258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800225a:	f012 0f08 	tst.w	r2, #8
 800225e:	d13e      	bne.n	80022de <HAL_SD_ReadBlocks+0x20a>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002262:	f012 0f02 	tst.w	r2, #2
 8002266:	d146      	bne.n	80022f6 <HAL_SD_ReadBlocks+0x222>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800226a:	f012 0f20 	tst.w	r2, #32
 800226e:	d14e      	bne.n	800230e <HAL_SD_ReadBlocks+0x23a>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002270:	6820      	ldr	r0, [r4, #0]
 8002272:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002274:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002278:	d055      	beq.n	8002326 <HAL_SD_ReadBlocks+0x252>
 800227a:	f1b9 0f00 	cmp.w	r9, #0
 800227e:	d052      	beq.n	8002326 <HAL_SD_ReadBlocks+0x252>
      data = SDIO_ReadFIFO(hsd->Instance);
 8002280:	f000 fe52 	bl	8002f28 <SDIO_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002284:	7028      	strb	r0, [r5, #0]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002286:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800228a:	706b      	strb	r3, [r5, #1]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800228c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8002290:	70ab      	strb	r3, [r5, #2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002292:	0e00      	lsrs	r0, r0, #24
 8002294:	70e8      	strb	r0, [r5, #3]
      tempbuff++;
 8002296:	3504      	adds	r5, #4
      dataremaining--;
 8002298:	f1a9 0904 	sub.w	r9, r9, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800229c:	f002 f8aa 	bl	80043f4 <HAL_GetTick>
 80022a0:	1bc0      	subs	r0, r0, r7
 80022a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80022a4:	4298      	cmp	r0, r3
 80022a6:	d201      	bcs.n	80022ac <HAL_SD_ReadBlocks+0x1d8>
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1e1      	bne.n	8002270 <HAL_SD_ReadBlocks+0x19c>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	4a22      	ldr	r2, [pc, #136]	; (8002338 <HAL_SD_ReadBlocks+0x264>)
 80022b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80022b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022b8:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80022ba:	2001      	movs	r0, #1
 80022bc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 80022c4:	e71b      	b.n	80020fe <HAL_SD_ReadBlocks+0x2a>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	491b      	ldr	r1, [pc, #108]	; (8002338 <HAL_SD_ReadBlocks+0x264>)
 80022ca:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80022cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022ce:	4303      	orrs	r3, r0
 80022d0:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80022d2:	2001      	movs	r0, #1
 80022d4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80022d8:	2300      	movs	r3, #0
 80022da:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 80022dc:	e70f      	b.n	80020fe <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022de:	4a16      	ldr	r2, [pc, #88]	; (8002338 <HAL_SD_ReadBlocks+0x264>)
 80022e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80022e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022e4:	f043 0308 	orr.w	r3, r3, #8
 80022e8:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80022ea:	2001      	movs	r0, #1
 80022ec:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80022f4:	e703      	b.n	80020fe <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022f6:	4a10      	ldr	r2, [pc, #64]	; (8002338 <HAL_SD_ReadBlocks+0x264>)
 80022f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80022fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002302:	2001      	movs	r0, #1
 8002304:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002308:	2300      	movs	r3, #0
 800230a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800230c:	e6f7      	b.n	80020fe <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800230e:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <HAL_SD_ReadBlocks+0x264>)
 8002310:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002312:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002314:	f043 0320 	orr.w	r3, r3, #32
 8002318:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800231a:	2001      	movs	r0, #1
 800231c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002320:	2300      	movs	r3, #0
 8002322:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002324:	e6eb      	b.n	80020fe <HAL_SD_ReadBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002326:	f240 533a 	movw	r3, #1338	; 0x53a
 800232a:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800232c:	2301      	movs	r3, #1
 800232e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8002332:	2000      	movs	r0, #0
 8002334:	e6e3      	b.n	80020fe <HAL_SD_ReadBlocks+0x2a>
 8002336:	bf00      	nop
 8002338:	004005ff 	.word	0x004005ff

0800233c <HAL_SD_WriteBlocks>:
{
 800233c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002340:	b088      	sub	sp, #32
 8002342:	4604      	mov	r4, r0
 8002344:	460d      	mov	r5, r1
 8002346:	4690      	mov	r8, r2
 8002348:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 800234a:	f002 f853 	bl	80043f4 <HAL_GetTick>
  if(NULL == pData)
 800234e:	b16d      	cbz	r5, 800236c <HAL_SD_WriteBlocks+0x30>
 8002350:	4607      	mov	r7, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8002352:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b01      	cmp	r3, #1
 800235a:	d00d      	beq.n	8002378 <HAL_SD_WriteBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800235c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800235e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002362:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002364:	2001      	movs	r0, #1
}
 8002366:	b008      	add	sp, #32
 8002368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800236c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800236e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002372:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002374:	2001      	movs	r0, #1
 8002376:	e7f6      	b.n	8002366 <HAL_SD_WriteBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002378:	2300      	movs	r3, #0
 800237a:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800237c:	eb08 0306 	add.w	r3, r8, r6
 8002380:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002382:	4293      	cmp	r3, r2
 8002384:	d81b      	bhi.n	80023be <HAL_SD_WriteBlocks+0x82>
    hsd->State = HAL_SD_STATE_BUSY;
 8002386:	2303      	movs	r3, #3
 8002388:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 800238c:	6823      	ldr	r3, [r4, #0]
 800238e:	2200      	movs	r2, #0
 8002390:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002392:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002394:	2b01      	cmp	r3, #1
 8002396:	d001      	beq.n	800239c <HAL_SD_WriteBlocks+0x60>
      add *= 512U;
 8002398:	ea4f 2848 	mov.w	r8, r8, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800239c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023a0:	6820      	ldr	r0, [r4, #0]
 80023a2:	f000 fefd 	bl	80031a0 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80023a6:	4603      	mov	r3, r0
 80023a8:	b178      	cbz	r0, 80023ca <HAL_SD_WriteBlocks+0x8e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023aa:	6822      	ldr	r2, [r4, #0]
 80023ac:	4967      	ldr	r1, [pc, #412]	; (800254c <HAL_SD_WriteBlocks+0x210>)
 80023ae:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80023b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80023b2:	4318      	orrs	r0, r3
 80023b4:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80023b6:	2001      	movs	r0, #1
 80023b8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80023bc:	e7d3      	b.n	8002366 <HAL_SD_WriteBlocks+0x2a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80023be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023c4:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 80023c6:	2001      	movs	r0, #1
 80023c8:	e7cd      	b.n	8002366 <HAL_SD_WriteBlocks+0x2a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80023ca:	f04f 33ff 	mov.w	r3, #4294967295
 80023ce:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80023d0:	0273      	lsls	r3, r6, #9
 80023d2:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80023d4:	2390      	movs	r3, #144	; 0x90
 80023d6:	9304      	str	r3, [sp, #16]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80023d8:	2300      	movs	r3, #0
 80023da:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80023dc:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80023de:	2301      	movs	r3, #1
 80023e0:	9307      	str	r3, [sp, #28]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80023e2:	a902      	add	r1, sp, #8
 80023e4:	6820      	ldr	r0, [r4, #0]
 80023e6:	f000 fec9 	bl	800317c <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 80023ea:	2e01      	cmp	r6, #1
 80023ec:	d90c      	bls.n	8002408 <HAL_SD_WriteBlocks+0xcc>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80023ee:	2320      	movs	r3, #32
 80023f0:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80023f2:	4641      	mov	r1, r8
 80023f4:	6820      	ldr	r0, [r4, #0]
 80023f6:	f000 ff33 	bl	8003260 <SDMMC_CmdWriteMultiBlock>
 80023fa:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 80023fc:	f1ba 0f00 	cmp.w	sl, #0
 8002400:	d10a      	bne.n	8002418 <HAL_SD_WriteBlocks+0xdc>
    dataremaining = config.DataLength;
 8002402:	f8dd 900c 	ldr.w	r9, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002406:	e033      	b.n	8002470 <HAL_SD_WriteBlocks+0x134>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002408:	2310      	movs	r3, #16
 800240a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800240c:	4641      	mov	r1, r8
 800240e:	6820      	ldr	r0, [r4, #0]
 8002410:	f000 ff0e 	bl	8003230 <SDMMC_CmdWriteSingleBlock>
 8002414:	4682      	mov	sl, r0
 8002416:	e7f1      	b.n	80023fc <HAL_SD_WriteBlocks+0xc0>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	4a4c      	ldr	r2, [pc, #304]	; (800254c <HAL_SD_WriteBlocks+0x210>)
 800241c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800241e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002420:	ea43 030a 	orr.w	r3, r3, sl
 8002424:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002426:	2001      	movs	r0, #1
 8002428:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800242c:	2300      	movs	r3, #0
 800242e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002430:	e799      	b.n	8002366 <HAL_SD_WriteBlocks+0x2a>
          data = (uint32_t)(*tempbuff);
 8002432:	782b      	ldrb	r3, [r5, #0]
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002434:	786a      	ldrb	r2, [r5, #1]
 8002436:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
          data |= ((uint32_t)(*tempbuff) << 16U);
 800243a:	78aa      	ldrb	r2, [r5, #2]
 800243c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002440:	78ea      	ldrb	r2, [r5, #3]
 8002442:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002446:	a908      	add	r1, sp, #32
 8002448:	f841 3d1c 	str.w	r3, [r1, #-28]!
          tempbuff++;
 800244c:	3504      	adds	r5, #4
          dataremaining--;
 800244e:	f1a9 0904 	sub.w	r9, r9, #4
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002452:	6820      	ldr	r0, [r4, #0]
 8002454:	f000 fd6b 	bl	8002f2e <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002458:	f108 0801 	add.w	r8, r8, #1
 800245c:	f1b8 0f07 	cmp.w	r8, #7
 8002460:	d9e7      	bls.n	8002432 <HAL_SD_WriteBlocks+0xf6>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002462:	f001 ffc7 	bl	80043f4 <HAL_GetTick>
 8002466:	1bc0      	subs	r0, r0, r7
 8002468:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800246a:	4298      	cmp	r0, r3
 800246c:	d20f      	bcs.n	800248e <HAL_SD_WriteBlocks+0x152>
 800246e:	b173      	cbz	r3, 800248e <HAL_SD_WriteBlocks+0x152>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002470:	6820      	ldr	r0, [r4, #0]
 8002472:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002474:	f240 331a 	movw	r3, #794	; 0x31a
 8002478:	421a      	tst	r2, r3
 800247a:	d116      	bne.n	80024aa <HAL_SD_WriteBlocks+0x16e>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800247c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800247e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002482:	d0ee      	beq.n	8002462 <HAL_SD_WriteBlocks+0x126>
 8002484:	f1b9 0f00 	cmp.w	r9, #0
 8002488:	d0eb      	beq.n	8002462 <HAL_SD_WriteBlocks+0x126>
        for(count = 0U; count < 8U; count++)
 800248a:	46d0      	mov	r8, sl
 800248c:	e7e6      	b.n	800245c <HAL_SD_WriteBlocks+0x120>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800248e:	6823      	ldr	r3, [r4, #0]
 8002490:	4a2e      	ldr	r2, [pc, #184]	; (800254c <HAL_SD_WriteBlocks+0x210>)
 8002492:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002494:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002496:	ea43 030a 	orr.w	r3, r3, sl
 800249a:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800249c:	2301      	movs	r3, #1
 800249e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80024a2:	2300      	movs	r3, #0
 80024a4:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 80024a6:	2003      	movs	r0, #3
 80024a8:	e75d      	b.n	8002366 <HAL_SD_WriteBlocks+0x2a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80024aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80024ac:	f413 7f80 	tst.w	r3, #256	; 0x100
 80024b0:	d007      	beq.n	80024c2 <HAL_SD_WriteBlocks+0x186>
 80024b2:	2e01      	cmp	r6, #1
 80024b4:	d905      	bls.n	80024c2 <HAL_SD_WriteBlocks+0x186>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80024b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d002      	beq.n	80024c2 <HAL_SD_WriteBlocks+0x186>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80024bc:	f000 fee8 	bl	8003290 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80024c0:	b9c0      	cbnz	r0, 80024f4 <HAL_SD_WriteBlocks+0x1b8>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024c6:	f012 0f08 	tst.w	r2, #8
 80024ca:	d11f      	bne.n	800250c <HAL_SD_WriteBlocks+0x1d0>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80024cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ce:	f012 0f02 	tst.w	r2, #2
 80024d2:	d127      	bne.n	8002524 <HAL_SD_WriteBlocks+0x1e8>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80024d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024d6:	f012 0f10 	tst.w	r2, #16
 80024da:	d02f      	beq.n	800253c <HAL_SD_WriteBlocks+0x200>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024dc:	4a1b      	ldr	r2, [pc, #108]	; (800254c <HAL_SD_WriteBlocks+0x210>)
 80024de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80024e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024e2:	f043 0310 	orr.w	r3, r3, #16
 80024e6:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80024e8:	2001      	movs	r0, #1
 80024ea:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80024f2:	e738      	b.n	8002366 <HAL_SD_WriteBlocks+0x2a>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024f4:	6823      	ldr	r3, [r4, #0]
 80024f6:	4915      	ldr	r1, [pc, #84]	; (800254c <HAL_SD_WriteBlocks+0x210>)
 80024f8:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80024fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024fc:	4303      	orrs	r3, r0
 80024fe:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002500:	2001      	movs	r0, #1
 8002502:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002506:	2300      	movs	r3, #0
 8002508:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 800250a:	e72c      	b.n	8002366 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800250c:	4a0f      	ldr	r2, [pc, #60]	; (800254c <HAL_SD_WriteBlocks+0x210>)
 800250e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002510:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002512:	f043 0308 	orr.w	r3, r3, #8
 8002516:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002518:	2001      	movs	r0, #1
 800251a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800251e:	2300      	movs	r3, #0
 8002520:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002522:	e720      	b.n	8002366 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002524:	4a09      	ldr	r2, [pc, #36]	; (800254c <HAL_SD_WriteBlocks+0x210>)
 8002526:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002528:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800252a:	f043 0302 	orr.w	r3, r3, #2
 800252e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002530:	2001      	movs	r0, #1
 8002532:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002536:	2300      	movs	r3, #0
 8002538:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800253a:	e714      	b.n	8002366 <HAL_SD_WriteBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800253c:	f240 523a 	movw	r2, #1338	; 0x53a
 8002540:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002542:	2301      	movs	r3, #1
 8002544:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8002548:	2000      	movs	r0, #0
 800254a:	e70c      	b.n	8002366 <HAL_SD_WriteBlocks+0x2a>
 800254c:	004005ff 	.word	0x004005ff

08002550 <HAL_SD_GetCardCSD>:
{
 8002550:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002552:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002554:	0f9b      	lsrs	r3, r3, #30
 8002556:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002558:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800255a:	f3c3 6383 	ubfx	r3, r3, #26, #4
 800255e:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002560:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800256a:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 800256e:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002570:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 8002574:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002576:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 800257a:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800257c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800257e:	0d1b      	lsrs	r3, r3, #20
 8002580:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002582:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800258c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800258e:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8002592:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002594:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8002596:	f3c3 3380 	ubfx	r3, r3, #14, #1
 800259a:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800259c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800259e:	f3c3 3340 	ubfx	r3, r3, #13, #1
 80025a2:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80025a4:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80025a6:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80025aa:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80025ac:	2300      	movs	r3, #0
 80025ae:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80025b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f040 8088 	bne.w	80026c8 <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80025b8:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80025ba:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025be:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 80025c2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80025c4:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80025c8:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80025ca:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80025cc:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 80025d0:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80025d2:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80025dc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80025de:	f3c3 5342 	ubfx	r3, r3, #21, #3
 80025e2:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80025e4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80025e6:	f3c3 4382 	ubfx	r3, r3, #18, #3
 80025ea:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80025ec:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80025ee:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 80025f2:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80025f4:	690b      	ldr	r3, [r1, #16]
 80025f6:	3301      	adds	r3, #1
 80025f8:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80025fa:	7e0a      	ldrb	r2, [r1, #24]
 80025fc:	f002 0207 	and.w	r2, r2, #7
 8002600:	3202      	adds	r2, #2
 8002602:	fa03 f202 	lsl.w	r2, r3, r2
 8002606:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002608:	7a0b      	ldrb	r3, [r1, #8]
 800260a:	f003 040f 	and.w	r4, r3, #15
 800260e:	2301      	movs	r3, #1
 8002610:	40a3      	lsls	r3, r4
 8002612:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002614:	0a5b      	lsrs	r3, r3, #9
 8002616:	fb03 f302 	mul.w	r3, r3, r2
 800261a:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800261c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002620:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002622:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002624:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8002628:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800262a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800262c:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8002630:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002632:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002638:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800263a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800263c:	0fdb      	lsrs	r3, r3, #31
 800263e:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002640:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002642:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8002646:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002648:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800264a:	f3c3 6382 	ubfx	r3, r3, #26, #3
 800264e:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002650:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002652:	f3c3 5383 	ubfx	r3, r3, #22, #4
 8002656:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002658:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800265a:	f3c3 5340 	ubfx	r3, r3, #21, #1
 800265e:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002668:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 800266c:	f002 0201 	and.w	r2, r2, #1
 8002670:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002674:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8002676:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800267a:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800267e:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8002680:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8002684:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002688:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800268a:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800268e:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002692:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8002694:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8002698:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800269c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800269e:	f3c2 2281 	ubfx	r2, r2, #10, #2
 80026a2:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80026a6:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80026a8:	f3c2 2201 	ubfx	r2, r2, #8, #2
 80026ac:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80026b0:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80026b2:	f3c2 0246 	ubfx	r2, r2, #1, #7
 80026b6:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80026ba:	2201      	movs	r2, #1
 80026bc:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 80026c0:	4618      	mov	r0, r3
}
 80026c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026c6:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d00b      	beq.n	80026e4 <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026cc:	6803      	ldr	r3, [r0, #0]
 80026ce:	4a0e      	ldr	r2, [pc, #56]	; (8002708 <HAL_SD_GetCardCSD+0x1b8>)
 80026d0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80026d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80026d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d8:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80026da:	2301      	movs	r3, #1
 80026dc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 80026e0:	4618      	mov	r0, r3
 80026e2:	e7ee      	b.n	80026c2 <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80026e4:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80026e6:	041b      	lsls	r3, r3, #16
 80026e8:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80026ec:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 80026f0:	4313      	orrs	r3, r2
 80026f2:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80026f4:	690b      	ldr	r3, [r1, #16]
 80026f6:	3301      	adds	r3, #1
 80026f8:	029b      	lsls	r3, r3, #10
 80026fa:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80026fc:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80026fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002702:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002704:	6603      	str	r3, [r0, #96]	; 0x60
 8002706:	e78c      	b.n	8002622 <HAL_SD_GetCardCSD+0xd2>
 8002708:	004005ff 	.word	0x004005ff

0800270c <SD_InitCard>:
{
 800270c:	b570      	push	{r4, r5, r6, lr}
 800270e:	b090      	sub	sp, #64	; 0x40
 8002710:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8002712:	2301      	movs	r3, #1
 8002714:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002718:	6800      	ldr	r0, [r0, #0]
 800271a:	f000 fc15 	bl	8002f48 <SDIO_GetPowerState>
 800271e:	2800      	cmp	r0, #0
 8002720:	d06c      	beq.n	80027fc <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002722:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002724:	2b03      	cmp	r3, #3
 8002726:	d145      	bne.n	80027b4 <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002728:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800272a:	2b03      	cmp	r3, #3
 800272c:	d15d      	bne.n	80027ea <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800272e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002730:	2b03      	cmp	r3, #3
 8002732:	d01d      	beq.n	8002770 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8002734:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8002738:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800273a:	0409      	lsls	r1, r1, #16
 800273c:	6820      	ldr	r0, [r4, #0]
 800273e:	f000 fe79 	bl	8003434 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002742:	4605      	mov	r5, r0
 8002744:	2800      	cmp	r0, #0
 8002746:	d15b      	bne.n	8002800 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002748:	2100      	movs	r1, #0
 800274a:	6820      	ldr	r0, [r4, #0]
 800274c:	f000 fc15 	bl	8002f7a <SDIO_GetResponse>
 8002750:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002752:	2104      	movs	r1, #4
 8002754:	6820      	ldr	r0, [r4, #0]
 8002756:	f000 fc10 	bl	8002f7a <SDIO_GetResponse>
 800275a:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800275c:	2108      	movs	r1, #8
 800275e:	6820      	ldr	r0, [r4, #0]
 8002760:	f000 fc0b 	bl	8002f7a <SDIO_GetResponse>
 8002764:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002766:	210c      	movs	r1, #12
 8002768:	6820      	ldr	r0, [r4, #0]
 800276a:	f000 fc06 	bl	8002f7a <SDIO_GetResponse>
 800276e:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002770:	2104      	movs	r1, #4
 8002772:	6820      	ldr	r0, [r4, #0]
 8002774:	f000 fc01 	bl	8002f7a <SDIO_GetResponse>
 8002778:	0d00      	lsrs	r0, r0, #20
 800277a:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800277c:	a905      	add	r1, sp, #20
 800277e:	4620      	mov	r0, r4
 8002780:	f7ff fee6 	bl	8002550 <HAL_SD_GetCardCSD>
 8002784:	2800      	cmp	r0, #0
 8002786:	d13e      	bne.n	8002806 <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002788:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800278a:	0412      	lsls	r2, r2, #16
 800278c:	2300      	movs	r3, #0
 800278e:	6820      	ldr	r0, [r4, #0]
 8002790:	f000 fd98 	bl	80032c4 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002794:	4605      	mov	r5, r0
 8002796:	bb98      	cbnz	r0, 8002800 <SD_InitCard+0xf4>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002798:	4623      	mov	r3, r4
 800279a:	f853 6b10 	ldr.w	r6, [r3], #16
 800279e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027a2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80027a6:	3404      	adds	r4, #4
 80027a8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80027ac:	4630      	mov	r0, r6
 80027ae:	f000 fb9f 	bl	8002ef0 <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 80027b2:	e025      	b.n	8002800 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80027b4:	6820      	ldr	r0, [r4, #0]
 80027b6:	f000 fe28 	bl	800340a <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80027ba:	4605      	mov	r5, r0
 80027bc:	bb00      	cbnz	r0, 8002800 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80027be:	2100      	movs	r1, #0
 80027c0:	6820      	ldr	r0, [r4, #0]
 80027c2:	f000 fbda 	bl	8002f7a <SDIO_GetResponse>
 80027c6:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80027c8:	2104      	movs	r1, #4
 80027ca:	6820      	ldr	r0, [r4, #0]
 80027cc:	f000 fbd5 	bl	8002f7a <SDIO_GetResponse>
 80027d0:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80027d2:	2108      	movs	r1, #8
 80027d4:	6820      	ldr	r0, [r4, #0]
 80027d6:	f000 fbd0 	bl	8002f7a <SDIO_GetResponse>
 80027da:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80027dc:	210c      	movs	r1, #12
 80027de:	6820      	ldr	r0, [r4, #0]
 80027e0:	f000 fbcb 	bl	8002f7a <SDIO_GetResponse>
 80027e4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 80027e8:	e79e      	b.n	8002728 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80027ea:	f10d 0112 	add.w	r1, sp, #18
 80027ee:	6820      	ldr	r0, [r4, #0]
 80027f0:	f000 fe35 	bl	800345e <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80027f4:	4605      	mov	r5, r0
 80027f6:	2800      	cmp	r0, #0
 80027f8:	d099      	beq.n	800272e <SD_InitCard+0x22>
 80027fa:	e001      	b.n	8002800 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80027fc:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8002800:	4628      	mov	r0, r5
 8002802:	b010      	add	sp, #64	; 0x40
 8002804:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002806:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800280a:	e7f9      	b.n	8002800 <SD_InitCard+0xf4>

0800280c <HAL_SD_InitCard>:
{
 800280c:	b570      	push	{r4, r5, r6, lr}
 800280e:	b08a      	sub	sp, #40	; 0x28
 8002810:	4605      	mov	r5, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002812:	2300      	movs	r3, #0
 8002814:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002816:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002818:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800281a:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800281c:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800281e:	2376      	movs	r3, #118	; 0x76
 8002820:	9309      	str	r3, [sp, #36]	; 0x24
  status = SDIO_Init(hsd->Instance, Init);
 8002822:	ab0a      	add	r3, sp, #40	; 0x28
 8002824:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8002828:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800282c:	ab04      	add	r3, sp, #16
 800282e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002830:	6828      	ldr	r0, [r5, #0]
 8002832:	f000 fb5d 	bl	8002ef0 <SDIO_Init>
  if(status != HAL_OK)
 8002836:	b118      	cbz	r0, 8002840 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 8002838:	2401      	movs	r4, #1
}
 800283a:	4620      	mov	r0, r4
 800283c:	b00a      	add	sp, #40	; 0x28
 800283e:	bd70      	pop	{r4, r5, r6, pc}
 8002840:	4604      	mov	r4, r0
  __HAL_SD_DISABLE(hsd);
 8002842:	4e10      	ldr	r6, [pc, #64]	; (8002884 <HAL_SD_InitCard+0x78>)
 8002844:	2300      	movs	r3, #0
 8002846:	6033      	str	r3, [r6, #0]
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002848:	6828      	ldr	r0, [r5, #0]
 800284a:	f000 fb75 	bl	8002f38 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 800284e:	2301      	movs	r3, #1
 8002850:	6033      	str	r3, [r6, #0]
  errorstate = SD_PowerON(hsd);
 8002852:	4628      	mov	r0, r5
 8002854:	f7ff faee 	bl	8001e34 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002858:	4603      	mov	r3, r0
 800285a:	b130      	cbz	r0, 800286a <HAL_SD_InitCard+0x5e>
    hsd->State = HAL_SD_STATE_READY;
 800285c:	2401      	movs	r4, #1
 800285e:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002862:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8002864:	4318      	orrs	r0, r3
 8002866:	63a8      	str	r0, [r5, #56]	; 0x38
    return HAL_ERROR;
 8002868:	e7e7      	b.n	800283a <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 800286a:	4628      	mov	r0, r5
 800286c:	f7ff ff4e 	bl	800270c <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002870:	4603      	mov	r3, r0
 8002872:	2800      	cmp	r0, #0
 8002874:	d0e1      	beq.n	800283a <HAL_SD_InitCard+0x2e>
    hsd->State = HAL_SD_STATE_READY;
 8002876:	2401      	movs	r4, #1
 8002878:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800287c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800287e:	4318      	orrs	r0, r3
 8002880:	63a8      	str	r0, [r5, #56]	; 0x38
    return HAL_ERROR;
 8002882:	e7da      	b.n	800283a <HAL_SD_InitCard+0x2e>
 8002884:	422580a0 	.word	0x422580a0

08002888 <HAL_SD_Init>:
  if(hsd == NULL)
 8002888:	b1c0      	cbz	r0, 80028bc <HAL_SD_Init+0x34>
{
 800288a:	b510      	push	{r4, lr}
 800288c:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 800288e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8002892:	b17b      	cbz	r3, 80028b4 <HAL_SD_Init+0x2c>
  hsd->State = HAL_SD_STATE_BUSY;
 8002894:	2303      	movs	r3, #3
 8002896:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800289a:	4620      	mov	r0, r4
 800289c:	f7ff ffb6 	bl	800280c <HAL_SD_InitCard>
 80028a0:	4603      	mov	r3, r0
 80028a2:	b970      	cbnz	r0, 80028c2 <HAL_SD_Init+0x3a>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80028a4:	2200      	movs	r2, #0
 80028a6:	63a2      	str	r2, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80028a8:	6322      	str	r2, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80028aa:	2201      	movs	r2, #1
 80028ac:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 80028b4:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 80028b6:	f7fe f8e9 	bl	8000a8c <HAL_SD_MspInit>
 80028ba:	e7eb      	b.n	8002894 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
}
 80028be:	4618      	mov	r0, r3
 80028c0:	4770      	bx	lr
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e7f4      	b.n	80028b0 <HAL_SD_Init+0x28>

080028c6 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80028c6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80028c8:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80028ca:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80028cc:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80028ce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80028d0:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80028d2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80028d4:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80028d6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80028d8:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80028da:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80028dc:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80028de:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80028e0:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80028e2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80028e4:	61cb      	str	r3, [r1, #28]
}
 80028e6:	2000      	movs	r0, #0
 80028e8:	4770      	bx	lr
	...

080028ec <HAL_SD_ConfigWideBusOperation>:
{
 80028ec:	b530      	push	{r4, r5, lr}
 80028ee:	b08b      	sub	sp, #44	; 0x2c
 80028f0:	4604      	mov	r4, r0
 80028f2:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 80028f4:	2303      	movs	r3, #3
 80028f6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 80028fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d01c      	beq.n	800293a <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002900:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002904:	d008      	beq.n	8002918 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002906:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800290a:	d00a      	beq.n	8002922 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800290c:	b179      	cbz	r1, 800292e <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800290e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002910:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002914:	6383      	str	r3, [r0, #56]	; 0x38
 8002916:	e014      	b.n	8002942 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002918:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800291a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291e:	6383      	str	r3, [r0, #56]	; 0x38
 8002920:	e00f      	b.n	8002942 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8002922:	f7ff fb6a 	bl	8001ffa <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8002926:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002928:	4318      	orrs	r0, r3
 800292a:	63a0      	str	r0, [r4, #56]	; 0x38
 800292c:	e009      	b.n	8002942 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 800292e:	f7ff fb8f 	bl	8002050 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8002932:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002934:	4318      	orrs	r0, r3
 8002936:	63a0      	str	r0, [r4, #56]	; 0x38
 8002938:	e003      	b.n	8002942 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800293a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800293c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002940:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002942:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002944:	b13b      	cbz	r3, 8002956 <HAL_SD_ConfigWideBusOperation+0x6a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	4a10      	ldr	r2, [pc, #64]	; (800298c <HAL_SD_ConfigWideBusOperation+0xa0>)
 800294a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800294c:	2001      	movs	r0, #1
 800294e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8002952:	b00b      	add	sp, #44	; 0x2c
 8002954:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002956:	6863      	ldr	r3, [r4, #4]
 8002958:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800295a:	68a3      	ldr	r3, [r4, #8]
 800295c:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800295e:	68e3      	ldr	r3, [r4, #12]
 8002960:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8002962:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002964:	6963      	ldr	r3, [r4, #20]
 8002966:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002968:	69a3      	ldr	r3, [r4, #24]
 800296a:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 800296c:	ab0a      	add	r3, sp, #40	; 0x28
 800296e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8002972:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002976:	ab04      	add	r3, sp, #16
 8002978:	cb0e      	ldmia	r3, {r1, r2, r3}
 800297a:	6820      	ldr	r0, [r4, #0]
 800297c:	f000 fab8 	bl	8002ef0 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 8002980:	2301      	movs	r3, #1
 8002982:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8002986:	2000      	movs	r0, #0
 8002988:	e7e3      	b.n	8002952 <HAL_SD_ConfigWideBusOperation+0x66>
 800298a:	bf00      	nop
 800298c:	004005ff 	.word	0x004005ff

08002990 <HAL_SD_GetCardState>:
{
 8002990:	b510      	push	{r4, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8002996:	a902      	add	r1, sp, #8
 8002998:	2300      	movs	r3, #0
 800299a:	f841 3d04 	str.w	r3, [r1, #-4]!
  errorstate = SD_SendStatus(hsd, &resp1);
 800299e:	f7ff fb82 	bl	80020a6 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80029a2:	b118      	cbz	r0, 80029ac <HAL_SD_GetCardState+0x1c>
 80029a4:	4603      	mov	r3, r0
    hsd->ErrorCode |= errorstate;
 80029a6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80029a8:	4318      	orrs	r0, r3
 80029aa:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80029ac:	9801      	ldr	r0, [sp, #4]
 80029ae:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80029b2:	b002      	add	sp, #8
 80029b4:	bd10      	pop	{r4, pc}
	...

080029b8 <LL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Force and Release reset on clock of GPIOx Port */
  if (GPIOx == GPIOA)
 80029b8:	4b44      	ldr	r3, [pc, #272]	; (8002acc <LL_GPIO_DeInit+0x114>)
 80029ba:	4298      	cmp	r0, r3
 80029bc:	d019      	beq.n	80029f2 <LL_GPIO_DeInit+0x3a>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOA);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOA);
  }
  else if (GPIOx == GPIOB)
 80029be:	4b44      	ldr	r3, [pc, #272]	; (8002ad0 <LL_GPIO_DeInit+0x118>)
 80029c0:	4298      	cmp	r0, r3
 80029c2:	d022      	beq.n	8002a0a <LL_GPIO_DeInit+0x52>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOB);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOB);
  }
  else if (GPIOx == GPIOC)
 80029c4:	4b43      	ldr	r3, [pc, #268]	; (8002ad4 <LL_GPIO_DeInit+0x11c>)
 80029c6:	4298      	cmp	r0, r3
 80029c8:	d02b      	beq.n	8002a22 <LL_GPIO_DeInit+0x6a>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOC);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOC);
  }
#if defined(GPIOD)
  else if (GPIOx == GPIOD)
 80029ca:	4b43      	ldr	r3, [pc, #268]	; (8002ad8 <LL_GPIO_DeInit+0x120>)
 80029cc:	4298      	cmp	r0, r3
 80029ce:	d034      	beq.n	8002a3a <LL_GPIO_DeInit+0x82>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOD);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOD);
  }
#endif /* GPIOD */
#if defined(GPIOE)
  else if (GPIOx == GPIOE)
 80029d0:	4b42      	ldr	r3, [pc, #264]	; (8002adc <LL_GPIO_DeInit+0x124>)
 80029d2:	4298      	cmp	r0, r3
 80029d4:	d03d      	beq.n	8002a52 <LL_GPIO_DeInit+0x9a>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOE);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOE);
  }
#endif /* GPIOE */
#if defined(GPIOF)
  else if (GPIOx == GPIOF)
 80029d6:	4b42      	ldr	r3, [pc, #264]	; (8002ae0 <LL_GPIO_DeInit+0x128>)
 80029d8:	4298      	cmp	r0, r3
 80029da:	d046      	beq.n	8002a6a <LL_GPIO_DeInit+0xb2>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOF);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOF);
  }
#endif /* GPIOF */
#if defined(GPIOG)
  else if (GPIOx == GPIOG)
 80029dc:	4b41      	ldr	r3, [pc, #260]	; (8002ae4 <LL_GPIO_DeInit+0x12c>)
 80029de:	4298      	cmp	r0, r3
 80029e0:	d04f      	beq.n	8002a82 <LL_GPIO_DeInit+0xca>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOG);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOG);
  }
#endif /* GPIOG */
#if defined(GPIOH)
  else if (GPIOx == GPIOH)
 80029e2:	4b41      	ldr	r3, [pc, #260]	; (8002ae8 <LL_GPIO_DeInit+0x130>)
 80029e4:	4298      	cmp	r0, r3
 80029e6:	d058      	beq.n	8002a9a <LL_GPIO_DeInit+0xe2>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOH);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOH);
  }
#endif /* GPIOH */
#if defined(GPIOI)
  else if (GPIOx == GPIOI)
 80029e8:	4b40      	ldr	r3, [pc, #256]	; (8002aec <LL_GPIO_DeInit+0x134>)
 80029ea:	4298      	cmp	r0, r3
 80029ec:	d061      	beq.n	8002ab2 <LL_GPIO_DeInit+0xfa>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOK);
  }
#endif /* GPIOK */
  else
  {
    status = ERROR;
 80029ee:	2001      	movs	r0, #1
  }

  return (status);
}
 80029f0:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 80029f2:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	f042 0201 	orr.w	r2, r2, #1
 80029fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	611a      	str	r2, [r3, #16]
  ErrorStatus status = SUCCESS;
 8002a06:	2000      	movs	r0, #0
 8002a08:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8002a0a:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	f042 0202 	orr.w	r2, r2, #2
 8002a14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	f022 0202 	bic.w	r2, r2, #2
 8002a1c:	611a      	str	r2, [r3, #16]
 8002a1e:	2000      	movs	r0, #0
 8002a20:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8002a22:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	f042 0204 	orr.w	r2, r2, #4
 8002a2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	f022 0204 	bic.w	r2, r2, #4
 8002a34:	611a      	str	r2, [r3, #16]
 8002a36:	2000      	movs	r0, #0
 8002a38:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8002a3a:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	f042 0208 	orr.w	r2, r2, #8
 8002a44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	f022 0208 	bic.w	r2, r2, #8
 8002a4c:	611a      	str	r2, [r3, #16]
 8002a4e:	2000      	movs	r0, #0
 8002a50:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8002a52:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	f042 0210 	orr.w	r2, r2, #16
 8002a5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	f022 0210 	bic.w	r2, r2, #16
 8002a64:	611a      	str	r2, [r3, #16]
 8002a66:	2000      	movs	r0, #0
 8002a68:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8002a6a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	f042 0220 	orr.w	r2, r2, #32
 8002a74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	f022 0220 	bic.w	r2, r2, #32
 8002a7c:	611a      	str	r2, [r3, #16]
 8002a7e:	2000      	movs	r0, #0
 8002a80:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8002a82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a94:	611a      	str	r2, [r3, #16]
 8002a96:	2000      	movs	r0, #0
 8002a98:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8002a9a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aac:	611a      	str	r2, [r3, #16]
 8002aae:	2000      	movs	r0, #0
 8002ab0:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8002ab2:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002abc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ac4:	611a      	str	r2, [r3, #16]
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40020000 	.word	0x40020000
 8002ad0:	40020400 	.word	0x40020400
 8002ad4:	40020800 	.word	0x40020800
 8002ad8:	40020c00 	.word	0x40020c00
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40021400 	.word	0x40021400
 8002ae4:	40021800 	.word	0x40021800
 8002ae8:	40021c00 	.word	0x40021c00
 8002aec:	40022000 	.word	0x40022000

08002af0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002af0:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002af2:	680a      	ldr	r2, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	fa92 f2a2 	rbit	r2, r2
 8002af8:	fab2 f282 	clz	r2, r2
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002afc:	e02d      	b.n	8002b5a <LL_GPIO_Init+0x6a>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002afe:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002b00:	68c4      	ldr	r4, [r0, #12]
 8002b02:	fa93 f5a3 	rbit	r5, r3
 8002b06:	fab5 f585 	clz	r5, r5
 8002b0a:	006d      	lsls	r5, r5, #1
 8002b0c:	2703      	movs	r7, #3
 8002b0e:	fa07 f505 	lsl.w	r5, r7, r5
 8002b12:	ea24 0405 	bic.w	r4, r4, r5
 8002b16:	fa93 f5a3 	rbit	r5, r3
 8002b1a:	fab5 f585 	clz	r5, r5
 8002b1e:	006d      	lsls	r5, r5, #1
 8002b20:	fa06 f505 	lsl.w	r5, r6, r5
 8002b24:	432c      	orrs	r4, r5
 8002b26:	60c4      	str	r4, [r0, #12]
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002b28:	684c      	ldr	r4, [r1, #4]
 8002b2a:	2c02      	cmp	r4, #2
 8002b2c:	d03f      	beq.n	8002bae <LL_GPIO_Init+0xbe>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002b2e:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002b30:	6805      	ldr	r5, [r0, #0]
 8002b32:	fa93 f6a3 	rbit	r6, r3
 8002b36:	fab6 f686 	clz	r6, r6
 8002b3a:	0076      	lsls	r6, r6, #1
 8002b3c:	2703      	movs	r7, #3
 8002b3e:	fa07 f606 	lsl.w	r6, r7, r6
 8002b42:	ea25 0506 	bic.w	r5, r5, r6
 8002b46:	fa93 f3a3 	rbit	r3, r3
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fa04 f303 	lsl.w	r3, r4, r3
 8002b54:	432b      	orrs	r3, r5
 8002b56:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8002b58:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002b5a:	680b      	ldr	r3, [r1, #0]
 8002b5c:	fa33 f402 	lsrs.w	r4, r3, r2
 8002b60:	d059      	beq.n	8002c16 <LL_GPIO_Init+0x126>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002b62:	2401      	movs	r4, #1
 8002b64:	4094      	lsls	r4, r2
    if (currentpin)
 8002b66:	4023      	ands	r3, r4
 8002b68:	d0f6      	beq.n	8002b58 <LL_GPIO_Init+0x68>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002b6a:	684c      	ldr	r4, [r1, #4]
 8002b6c:	3c01      	subs	r4, #1
 8002b6e:	2c01      	cmp	r4, #1
 8002b70:	d8c5      	bhi.n	8002afe <LL_GPIO_Init+0xe>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002b72:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002b74:	6884      	ldr	r4, [r0, #8]
 8002b76:	fa93 f5a3 	rbit	r5, r3
 8002b7a:	fab5 f585 	clz	r5, r5
 8002b7e:	006d      	lsls	r5, r5, #1
 8002b80:	2703      	movs	r7, #3
 8002b82:	fa07 f505 	lsl.w	r5, r7, r5
 8002b86:	ea24 0405 	bic.w	r4, r4, r5
 8002b8a:	fa93 f5a3 	rbit	r5, r3
 8002b8e:	fab5 f585 	clz	r5, r5
 8002b92:	006d      	lsls	r5, r5, #1
 8002b94:	fa06 f505 	lsl.w	r5, r6, r5
 8002b98:	432c      	orrs	r4, r5
 8002b9a:	6084      	str	r4, [r0, #8]
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002b9c:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002b9e:	6844      	ldr	r4, [r0, #4]
 8002ba0:	ea24 0403 	bic.w	r4, r4, r3
 8002ba4:	fb03 f505 	mul.w	r5, r3, r5
 8002ba8:	432c      	orrs	r4, r5
 8002baa:	6044      	str	r4, [r0, #4]
 8002bac:	e7a7      	b.n	8002afe <LL_GPIO_Init+0xe>
 8002bae:	fa93 f4a3 	rbit	r4, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002bb2:	fab4 f484 	clz	r4, r4
 8002bb6:	2c07      	cmp	r4, #7
 8002bb8:	d815      	bhi.n	8002be6 <LL_GPIO_Init+0xf6>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002bba:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002bbc:	6a04      	ldr	r4, [r0, #32]
 8002bbe:	fa93 f5a3 	rbit	r5, r3
 8002bc2:	fab5 f585 	clz	r5, r5
 8002bc6:	00ad      	lsls	r5, r5, #2
 8002bc8:	270f      	movs	r7, #15
 8002bca:	fa07 f505 	lsl.w	r5, r7, r5
 8002bce:	ea24 0405 	bic.w	r4, r4, r5
 8002bd2:	fa93 f5a3 	rbit	r5, r3
 8002bd6:	fab5 f585 	clz	r5, r5
 8002bda:	00ad      	lsls	r5, r5, #2
 8002bdc:	fa06 f505 	lsl.w	r5, r6, r5
 8002be0:	432c      	orrs	r4, r5
 8002be2:	6204      	str	r4, [r0, #32]
 8002be4:	e7a3      	b.n	8002b2e <LL_GPIO_Init+0x3e>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002be6:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002be8:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002bea:	0a1c      	lsrs	r4, r3, #8
 8002bec:	fa94 f7a4 	rbit	r7, r4
 8002bf0:	fab7 f787 	clz	r7, r7
 8002bf4:	00bf      	lsls	r7, r7, #2
 8002bf6:	f04f 0c0f 	mov.w	ip, #15
 8002bfa:	fa0c f707 	lsl.w	r7, ip, r7
 8002bfe:	ea26 0607 	bic.w	r6, r6, r7
 8002c02:	fa94 f4a4 	rbit	r4, r4
 8002c06:	fab4 f484 	clz	r4, r4
 8002c0a:	00a4      	lsls	r4, r4, #2
 8002c0c:	fa05 f404 	lsl.w	r4, r5, r4
 8002c10:	4334      	orrs	r4, r6
 8002c12:	6244      	str	r4, [r0, #36]	; 0x24
 8002c14:	e78b      	b.n	8002b2e <LL_GPIO_Init+0x3e>
  }

  return (SUCCESS);
}
 8002c16:	2000      	movs	r0, #0
 8002c18:	bcf0      	pop	{r4, r5, r6, r7}
 8002c1a:	4770      	bx	lr

08002c1c <LL_RCC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RCC registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_RCC_DeInit(void)
{
 8002c1c:	b082      	sub	sp, #8
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002c1e:	4a23      	ldr	r2, [pc, #140]	; (8002cac <LL_RCC_DeInit+0x90>)
 8002c20:	6813      	ldr	r3, [r2, #0]
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002c28:	4b20      	ldr	r3, [pc, #128]	; (8002cac <LL_RCC_DeInit+0x90>)
 8002c2a:	681b      	ldr	r3, [r3, #0]

  /* Set HSION bit */
  LL_RCC_HSI_Enable();

  /* Wait for HSI READY bit */
  while(LL_RCC_HSI_IsReady() != 1U)
 8002c2c:	f013 0f02 	tst.w	r3, #2
 8002c30:	d0fa      	beq.n	8002c28 <LL_RCC_DeInit+0xc>
  {}

  /* Reset CFGR register */
  LL_RCC_WriteReg(CFGR, 0x00000000U);
 8002c32:	4b1e      	ldr	r3, [pc, #120]	; (8002cac <LL_RCC_DeInit+0x90>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]

  /* Read CR register */
  vl_mask = LL_RCC_ReadReg(CR);
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	9201      	str	r2, [sp, #4]

  /* Reset HSEON, HSEBYP, PLLON, CSSON bits */
  CLEAR_BIT(vl_mask,
 8002c3c:	9a01      	ldr	r2, [sp, #4]
 8002c3e:	f022 7286 	bic.w	r2, r2, #17563648	; 0x10c0000
 8002c42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c46:	9201      	str	r2, [sp, #4]
  CLEAR_BIT(vl_mask, RCC_CR_PLLSAION);
#endif /* RCC_PLLSAI_SUPPORT */

#if defined(RCC_PLLI2S_SUPPORT)
  /* Reset PLLI2SON bit */
  CLEAR_BIT(vl_mask, RCC_CR_PLLI2SON);
 8002c48:	9a01      	ldr	r2, [sp, #4]
 8002c4a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002c4e:	9201      	str	r2, [sp, #4]
#endif /* RCC_PLLI2S_SUPPORT */

  /* Write new value in CR register */
  LL_RCC_WriteReg(CR, vl_mask);
 8002c50:	9a01      	ldr	r2, [sp, #4]
 8002c52:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002c5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c5e:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002c60:	4b12      	ldr	r3, [pc, #72]	; (8002cac <LL_RCC_DeInit+0x90>)
 8002c62:	681b      	ldr	r3, [r3, #0]

  /* Set HSITRIM bits to the reset value*/
  LL_RCC_HSI_SetCalibTrimming(0x10U);

  /* Wait for PLL READY bit to be reset */
  while(LL_RCC_PLL_IsReady() != 0U)
 8002c64:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c68:	d1fa      	bne.n	8002c60 <LL_RCC_DeInit+0x44>
  {}

  /* Reset PLLCFGR register */
  LL_RCC_WriteReg(PLLCFGR, RCC_PLLCFGR_RST_VALUE);
 8002c6a:	4b10      	ldr	r3, [pc, #64]	; (8002cac <LL_RCC_DeInit+0x90>)
 8002c6c:	4a10      	ldr	r2, [pc, #64]	; (8002cb0 <LL_RCC_DeInit+0x94>)
 8002c6e:	605a      	str	r2, [r3, #4]

#if defined(RCC_PLLI2S_SUPPORT)
  /* Reset PLLI2SCFGR register */
  LL_RCC_WriteReg(PLLI2SCFGR, RCC_PLLI2SCFGR_RST_VALUE);
 8002c70:	4a10      	ldr	r2, [pc, #64]	; (8002cb4 <LL_RCC_DeInit+0x98>)
 8002c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  /* Reset PLLSAICFGR register */
  LL_RCC_WriteReg(PLLSAICFGR, RCC_PLLSAICFGR_RST_VALUE);
#endif /* RCC_PLLSAI_SUPPORT */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8002c7c:	60da      	str	r2, [r3, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c84:	60da      	str	r2, [r3, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	f442 021f 	orr.w	r2, r2, #10420224	; 0x9f0000
 8002c8c:	60da      	str	r2, [r3, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002c94:	60da      	str	r2, [r3, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c96:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002c98:	f022 0201 	bic.w	r2, r2, #1
 8002c9c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002c9e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002ca0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002ca4:	675a      	str	r2, [r3, #116]	; 0x74

  return SUCCESS;
}
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	b002      	add	sp, #8
 8002caa:	4770      	bx	lr
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	24003010 	.word	0x24003010
 8002cb4:	20003000 	.word	0x20003000

08002cb8 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <RCC_GetHCLKClockFreq+0x10>)
 8002cba:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002cbc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002cc0:	4a02      	ldr	r2, [pc, #8]	; (8002ccc <RCC_GetHCLKClockFreq+0x14>)
 8002cc2:	5cd3      	ldrb	r3, [r2, r3]
}
 8002cc4:	40d8      	lsrs	r0, r3
 8002cc6:	4770      	bx	lr
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	080155c4 	.word	0x080155c4

08002cd0 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002cd0:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <RCC_GetPCLK1ClockFreq+0x10>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002cd4:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002cd8:	4a02      	ldr	r2, [pc, #8]	; (8002ce4 <RCC_GetPCLK1ClockFreq+0x14>)
 8002cda:	5cd3      	ldrb	r3, [r2, r3]
}
 8002cdc:	40d8      	lsrs	r0, r3
 8002cde:	4770      	bx	lr
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	080155d4 	.word	0x080155d4

08002ce8 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <RCC_GetPCLK2ClockFreq+0x10>)
 8002cea:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002cec:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002cf0:	4a02      	ldr	r2, [pc, #8]	; (8002cfc <RCC_GetPCLK2ClockFreq+0x14>)
 8002cf2:	5cd3      	ldrb	r3, [r2, r3]
}
 8002cf4:	40d8      	lsrs	r0, r3
 8002cf6:	4770      	bx	lr
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	080155d4 	.word	0x080155d4

08002d00 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d00:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8002d08:	b923      	cbnz	r3, 8002d14 <RCC_PLL_GetFreqDomain_SYS+0x14>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <RCC_PLL_GetFreqDomain_SYS+0x44>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002d0c:	2808      	cmp	r0, #8
 8002d0e:	d003      	beq.n	8002d18 <RCC_PLL_GetFreqDomain_SYS+0x18>
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002d10:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 8002d12:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8002d16:	e7f9      	b.n	8002d0c <RCC_PLL_GetFreqDomain_SYS+0xc>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002d18:	4a09      	ldr	r2, [pc, #36]	; (8002d40 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8002d1a:	6850      	ldr	r0, [r2, #4]
 8002d1c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002d20:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002d24:	6850      	ldr	r0, [r2, #4]
 8002d26:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002d2a:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002d2e:	6853      	ldr	r3, [r2, #4]
 8002d30:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002d34:	3301      	adds	r3, #1
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800
 8002d44:	00f42400 	.word	0x00f42400
 8002d48:	007a1200 	.word	0x007a1200

08002d4c <RCC_GetSystemClockFreq>:
{
 8002d4c:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <RCC_GetSystemClockFreq+0x24>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d007      	beq.n	8002d6a <RCC_GetSystemClockFreq+0x1e>
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d001      	beq.n	8002d62 <RCC_GetSystemClockFreq+0x16>
      frequency = HSI_VALUE;
 8002d5e:	4805      	ldr	r0, [pc, #20]	; (8002d74 <RCC_GetSystemClockFreq+0x28>)
}
 8002d60:	bd08      	pop	{r3, pc}
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002d62:	2008      	movs	r0, #8
 8002d64:	f7ff ffcc 	bl	8002d00 <RCC_PLL_GetFreqDomain_SYS>
      break;
 8002d68:	e7fa      	b.n	8002d60 <RCC_GetSystemClockFreq+0x14>
      frequency = HSE_VALUE;
 8002d6a:	4803      	ldr	r0, [pc, #12]	; (8002d78 <RCC_GetSystemClockFreq+0x2c>)
  return frequency;
 8002d6c:	e7f8      	b.n	8002d60 <RCC_GetSystemClockFreq+0x14>
 8002d6e:	bf00      	nop
 8002d70:	40023800 	.word	0x40023800
 8002d74:	00f42400 	.word	0x00f42400
 8002d78:	007a1200 	.word	0x007a1200

08002d7c <LL_RCC_GetSystemClocksFreq>:
{
 8002d7c:	b510      	push	{r4, lr}
 8002d7e:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002d80:	f7ff ffe4 	bl	8002d4c <RCC_GetSystemClockFreq>
 8002d84:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002d86:	f7ff ff97 	bl	8002cb8 <RCC_GetHCLKClockFreq>
 8002d8a:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002d8c:	f7ff ffa0 	bl	8002cd0 <RCC_GetPCLK1ClockFreq>
 8002d90:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002d92:	6860      	ldr	r0, [r4, #4]
 8002d94:	f7ff ffa8 	bl	8002ce8 <RCC_GetPCLK2ClockFreq>
 8002d98:	60e0      	str	r0, [r4, #12]
}
 8002d9a:	bd10      	pop	{r4, pc}

08002d9c <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <SDMMC_GetCmdError+0x30>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <SDMMC_GetCmdError+0x34>)
 8002da2:	fba2 2303 	umull	r2, r3, r2, r3
 8002da6:	0a5a      	lsrs	r2, r3, #9
 8002da8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002dac:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8002db0:	1e5a      	subs	r2, r3, #1
 8002db2:	b143      	cbz	r3, 8002dc6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8002db4:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 8002db6:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8002db8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002dbc:	d0f8      	beq.n	8002db0 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002dbe:	23c5      	movs	r3, #197	; 0xc5
 8002dc0:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8002dc6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002dca:	4770      	bx	lr
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	10624dd3 	.word	0x10624dd3

08002dd4 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002dd4:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <SDMMC_GetCmdResp2+0x58>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a15      	ldr	r2, [pc, #84]	; (8002e30 <SDMMC_GetCmdResp2+0x5c>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	0a5a      	lsrs	r2, r3, #9
 8002de0:	f241 3388 	movw	r3, #5000	; 0x1388
 8002de4:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8002de8:	1e5a      	subs	r2, r3, #1
 8002dea:	b1db      	cbz	r3, 8002e24 <SDMMC_GetCmdResp2+0x50>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8002dec:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002dee:	4613      	mov	r3, r2
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002df0:	f011 0f45 	tst.w	r1, #69	; 0x45
 8002df4:	d0f8      	beq.n	8002de8 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002df6:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8002dfa:	d1f5      	bne.n	8002de8 <SDMMC_GetCmdResp2+0x14>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002dfc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002dfe:	f013 0f04 	tst.w	r3, #4
 8002e02:	d107      	bne.n	8002e14 <SDMMC_GetCmdResp2+0x40>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002e04:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e06:	f013 0f01 	tst.w	r3, #1
 8002e0a:	d107      	bne.n	8002e1c <SDMMC_GetCmdResp2+0x48>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002e0c:	23c5      	movs	r3, #197	; 0xc5
 8002e0e:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8002e10:	2000      	movs	r0, #0
 8002e12:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002e14:	2304      	movs	r3, #4
 8002e16:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002e18:	4618      	mov	r0, r3
 8002e1a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002e20:	4618      	mov	r0, r3
 8002e22:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8002e24:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	10624dd3 	.word	0x10624dd3

08002e34 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002e34:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <SDMMC_GetCmdResp3+0x48>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a11      	ldr	r2, [pc, #68]	; (8002e80 <SDMMC_GetCmdResp3+0x4c>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	0a5a      	lsrs	r2, r3, #9
 8002e40:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e44:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8002e48:	1e5a      	subs	r2, r3, #1
 8002e4a:	b19b      	cbz	r3, 8002e74 <SDMMC_GetCmdResp3+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8002e4c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002e4e:	4613      	mov	r3, r2
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002e50:	f011 0f45 	tst.w	r1, #69	; 0x45
 8002e54:	d0f8      	beq.n	8002e48 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002e56:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8002e5a:	d1f5      	bne.n	8002e48 <SDMMC_GetCmdResp3+0x14>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002e5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e5e:	f013 0f04 	tst.w	r3, #4
 8002e62:	d103      	bne.n	8002e6c <SDMMC_GetCmdResp3+0x38>
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002e64:	23c5      	movs	r3, #197	; 0xc5
 8002e66:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002e68:	2000      	movs	r0, #0
 8002e6a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002e70:	4618      	mov	r0, r3
 8002e72:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8002e74:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	10624dd3 	.word	0x10624dd3

08002e84 <SDMMC_GetCmdResp7>:
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002e84:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <SDMMC_GetCmdResp7+0x64>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a18      	ldr	r2, [pc, #96]	; (8002eec <SDMMC_GetCmdResp7+0x68>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	0a5a      	lsrs	r2, r3, #9
 8002e90:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e94:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8002e98:	1e5a      	subs	r2, r3, #1
 8002e9a:	b1fb      	cbz	r3, 8002edc <SDMMC_GetCmdResp7+0x58>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8002e9c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002e9e:	4613      	mov	r3, r2
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002ea0:	f011 0f45 	tst.w	r1, #69	; 0x45
 8002ea4:	d0f8      	beq.n	8002e98 <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002ea6:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8002eaa:	d1f5      	bne.n	8002e98 <SDMMC_GetCmdResp7+0x14>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002eac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002eae:	f013 0f04 	tst.w	r3, #4
 8002eb2:	d10b      	bne.n	8002ecc <SDMMC_GetCmdResp7+0x48>
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002eb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002eb6:	f013 0f01 	tst.w	r3, #1
 8002eba:	d10b      	bne.n	8002ed4 <SDMMC_GetCmdResp7+0x50>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8002ebc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ebe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ec2:	d00e      	beq.n	8002ee2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8002ec4:	2340      	movs	r3, #64	; 0x40
 8002ec6:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002ec8:	2000      	movs	r0, #0
 8002eca:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002ecc:	2304      	movs	r3, #4
 8002ece:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002ed8:	4618      	mov	r0, r3
 8002eda:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8002edc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002ee0:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 8002ee2:	2000      	movs	r0, #0
  
}
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	20000000 	.word	0x20000000
 8002eec:	10624dd3 	.word	0x10624dd3

08002ef0 <SDIO_Init>:
{
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	b410      	push	{r4}
 8002ef4:	ac02      	add	r4, sp, #8
 8002ef6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8002efa:	460b      	mov	r3, r1
 8002efc:	9a03      	ldr	r2, [sp, #12]
 8002efe:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 8002f00:	9a04      	ldr	r2, [sp, #16]
             Init.ClockBypass         |\
 8002f02:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8002f04:	9a05      	ldr	r2, [sp, #20]
             Init.ClockPowerSave      |\
 8002f06:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8002f08:	9a06      	ldr	r2, [sp, #24]
             Init.BusWide             |\
 8002f0a:	4313      	orrs	r3, r2
             Init.ClockDiv
 8002f0c:	9a07      	ldr	r2, [sp, #28]
             Init.HardwareFlowControl |\
 8002f0e:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002f10:	6842      	ldr	r2, [r0, #4]
 8002f12:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 8002f16:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	6043      	str	r3, [r0, #4]
}
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f24:	b004      	add	sp, #16
 8002f26:	4770      	bx	lr

08002f28 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 8002f28:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8002f2c:	4770      	bx	lr

08002f2e <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8002f2e:	680b      	ldr	r3, [r1, #0]
 8002f30:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8002f34:	2000      	movs	r0, #0
 8002f36:	4770      	bx	lr

08002f38 <SDIO_PowerState_ON>:
{  
 8002f38:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 8002f3e:	2002      	movs	r0, #2
 8002f40:	f7fd ff2e 	bl	8000da0 <HAL_Delay>
}
 8002f44:	2000      	movs	r0, #0
 8002f46:	bd08      	pop	{r3, pc}

08002f48 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8002f48:	6800      	ldr	r0, [r0, #0]
}
 8002f4a:	f000 0003 	and.w	r0, r0, #3
 8002f4e:	4770      	bx	lr

08002f50 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8002f50:	680b      	ldr	r3, [r1, #0]
 8002f52:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002f54:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 8002f56:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002f58:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8002f5a:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8002f5c:	4313      	orrs	r3, r2
                       Command->CPSM);
 8002f5e:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8002f60:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002f62:	68c2      	ldr	r2, [r0, #12]
 8002f64:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8002f68:	f022 020f 	bic.w	r2, r2, #15
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60c3      	str	r3, [r0, #12]
}
 8002f70:	2000      	movs	r0, #0
 8002f72:	4770      	bx	lr

08002f74 <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 8002f74:	6900      	ldr	r0, [r0, #16]
}
 8002f76:	b2c0      	uxtb	r0, r0
 8002f78:	4770      	bx	lr

08002f7a <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8002f7a:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8002f7c:	5840      	ldr	r0, [r0, r1]
}  
 8002f7e:	4770      	bx	lr

08002f80 <SDMMC_GetCmdResp1>:
{
 8002f80:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002f82:	4b52      	ldr	r3, [pc, #328]	; (80030cc <SDMMC_GetCmdResp1+0x14c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4c52      	ldr	r4, [pc, #328]	; (80030d0 <SDMMC_GetCmdResp1+0x150>)
 8002f88:	fba4 4303 	umull	r4, r3, r4, r3
 8002f8c:	0a5b      	lsrs	r3, r3, #9
 8002f8e:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 8002f92:	1e53      	subs	r3, r2, #1
 8002f94:	2a00      	cmp	r2, #0
 8002f96:	d060      	beq.n	800305a <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDIOx->STA;
 8002f98:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002f9a:	461a      	mov	r2, r3
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002f9c:	f014 0f45 	tst.w	r4, #69	; 0x45
 8002fa0:	d0f7      	beq.n	8002f92 <SDMMC_GetCmdResp1+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002fa2:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8002fa6:	d1f4      	bne.n	8002f92 <SDMMC_GetCmdResp1+0x12>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002fa8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002faa:	f013 0f04 	tst.w	r3, #4
 8002fae:	d107      	bne.n	8002fc0 <SDMMC_GetCmdResp1+0x40>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002fb0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002fb2:	f013 0f01 	tst.w	r3, #1
 8002fb6:	d007      	beq.n	8002fc8 <SDMMC_GetCmdResp1+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002fb8:	2301      	movs	r3, #1
 8002fba:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	e04e      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	e04a      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
 8002fc8:	460d      	mov	r5, r1
 8002fca:	4604      	mov	r4, r0
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002fcc:	23c5      	movs	r3, #197	; 0xc5
 8002fce:	6383      	str	r3, [r0, #56]	; 0x38
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002fd0:	f7ff ffd0 	bl	8002f74 <SDIO_GetCommandResponse>
 8002fd4:	42a8      	cmp	r0, r5
 8002fd6:	d001      	beq.n	8002fdc <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002fd8:	2001      	movs	r0, #1
 8002fda:	e040      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f7ff ffcb 	bl	8002f7a <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002fe4:	4b3b      	ldr	r3, [pc, #236]	; (80030d4 <SDMMC_GetCmdResp1+0x154>)
 8002fe6:	4003      	ands	r3, r0
 8002fe8:	b3d3      	cbz	r3, 8003060 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8002fea:	2800      	cmp	r0, #0
 8002fec:	db3a      	blt.n	8003064 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002fee:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8002ff2:	d13a      	bne.n	800306a <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002ff4:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8002ff8:	d139      	bne.n	800306e <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8002ffa:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 8002ffe:	d138      	bne.n	8003072 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003000:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8003004:	d138      	bne.n	8003078 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003006:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800300a:	d138      	bne.n	800307e <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800300c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8003010:	d138      	bne.n	8003084 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003012:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8003016:	d138      	bne.n	800308a <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003018:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800301c:	d138      	bne.n	8003090 <SDMMC_GetCmdResp1+0x110>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800301e:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8003022:	d138      	bne.n	8003096 <SDMMC_GetCmdResp1+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003024:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8003028:	d138      	bne.n	800309c <SDMMC_GetCmdResp1+0x11c>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800302a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 800302e:	d138      	bne.n	80030a2 <SDMMC_GetCmdResp1+0x122>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003030:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8003034:	d138      	bne.n	80030a8 <SDMMC_GetCmdResp1+0x128>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003036:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 800303a:	d138      	bne.n	80030ae <SDMMC_GetCmdResp1+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800303c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003040:	d138      	bne.n	80030b4 <SDMMC_GetCmdResp1+0x134>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003042:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8003046:	d138      	bne.n	80030ba <SDMMC_GetCmdResp1+0x13a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003048:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800304c:	d138      	bne.n	80030c0 <SDMMC_GetCmdResp1+0x140>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800304e:	f010 0f08 	tst.w	r0, #8
 8003052:	d038      	beq.n	80030c6 <SDMMC_GetCmdResp1+0x146>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003054:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003058:	e001      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 800305a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800305e:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 8003060:	2000      	movs	r0, #0
 8003062:	e7fc      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003064:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8003068:	e7f9      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800306a:	2040      	movs	r0, #64	; 0x40
 800306c:	e7f7      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800306e:	2080      	movs	r0, #128	; 0x80
 8003070:	e7f5      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003072:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003076:	e7f2      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003078:	f44f 7000 	mov.w	r0, #512	; 0x200
 800307c:	e7ef      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800307e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003082:	e7ec      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003084:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003088:	e7e9      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800308a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800308e:	e7e6      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003090:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003094:	e7e3      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003096:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800309a:	e7e0      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 800309c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80030a0:	e7dd      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80030a2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80030a6:	e7da      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80030a8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80030ac:	e7d7      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80030ae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80030b2:	e7d4      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80030b4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80030b8:	e7d1      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80030ba:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80030be:	e7ce      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 80030c0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80030c4:	e7cb      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80030c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80030ca:	e7c8      	b.n	800305e <SDMMC_GetCmdResp1+0xde>
 80030cc:	20000000 	.word	0x20000000
 80030d0:	10624dd3 	.word	0x10624dd3
 80030d4:	fdffe008 	.word	0xfdffe008

080030d8 <SDMMC_GetCmdResp6>:
{
 80030d8:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80030da:	4b26      	ldr	r3, [pc, #152]	; (8003174 <SDMMC_GetCmdResp6+0x9c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4c26      	ldr	r4, [pc, #152]	; (8003178 <SDMMC_GetCmdResp6+0xa0>)
 80030e0:	fba4 4303 	umull	r4, r3, r4, r3
 80030e4:	0a5c      	lsrs	r4, r3, #9
 80030e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80030ea:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 80030ee:	1e5c      	subs	r4, r3, #1
 80030f0:	b3b3      	cbz	r3, 8003160 <SDMMC_GetCmdResp6+0x88>
    sta_reg = SDIOx->STA;
 80030f2:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80030f4:	4623      	mov	r3, r4
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80030f6:	f015 0f45 	tst.w	r5, #69	; 0x45
 80030fa:	d0f8      	beq.n	80030ee <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80030fc:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8003100:	d1f5      	bne.n	80030ee <SDMMC_GetCmdResp6+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003102:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003104:	f013 0f04 	tst.w	r3, #4
 8003108:	d107      	bne.n	800311a <SDMMC_GetCmdResp6+0x42>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800310a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800310c:	f013 0f01 	tst.w	r3, #1
 8003110:	d007      	beq.n	8003122 <SDMMC_GetCmdResp6+0x4a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003112:	2301      	movs	r3, #1
 8003114:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003116:	4618      	mov	r0, r3
 8003118:	e024      	b.n	8003164 <SDMMC_GetCmdResp6+0x8c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800311a:	2304      	movs	r3, #4
 800311c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800311e:	4618      	mov	r0, r3
 8003120:	e020      	b.n	8003164 <SDMMC_GetCmdResp6+0x8c>
 8003122:	4616      	mov	r6, r2
 8003124:	460d      	mov	r5, r1
 8003126:	4604      	mov	r4, r0
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003128:	f7ff ff24 	bl	8002f74 <SDIO_GetCommandResponse>
 800312c:	42a8      	cmp	r0, r5
 800312e:	d001      	beq.n	8003134 <SDMMC_GetCmdResp6+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003130:	2001      	movs	r0, #1
 8003132:	e017      	b.n	8003164 <SDMMC_GetCmdResp6+0x8c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003134:	23c5      	movs	r3, #197	; 0xc5
 8003136:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003138:	2100      	movs	r1, #0
 800313a:	4620      	mov	r0, r4
 800313c:	f7ff ff1d 	bl	8002f7a <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003140:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8003144:	d008      	beq.n	8003158 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003146:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800314a:	d10c      	bne.n	8003166 <SDMMC_GetCmdResp6+0x8e>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800314c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003150:	d00c      	beq.n	800316c <SDMMC_GetCmdResp6+0x94>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003152:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003156:	e005      	b.n	8003164 <SDMMC_GetCmdResp6+0x8c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003158:	0c00      	lsrs	r0, r0, #16
 800315a:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 800315c:	2000      	movs	r0, #0
 800315e:	e001      	b.n	8003164 <SDMMC_GetCmdResp6+0x8c>
      return SDMMC_ERROR_TIMEOUT;
 8003160:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003164:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003166:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800316a:	e7fb      	b.n	8003164 <SDMMC_GetCmdResp6+0x8c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800316c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003170:	e7f8      	b.n	8003164 <SDMMC_GetCmdResp6+0x8c>
 8003172:	bf00      	nop
 8003174:	20000000 	.word	0x20000000
 8003178:	10624dd3 	.word	0x10624dd3

0800317c <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 800317c:	680b      	ldr	r3, [r1, #0]
 800317e:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8003180:	684b      	ldr	r3, [r1, #4]
 8003182:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003184:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 8003186:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003188:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 800318a:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 800318c:	4313      	orrs	r3, r2
                       Data->DPSM);
 800318e:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8003190:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003192:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8003194:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8003198:	4313      	orrs	r3, r2
 800319a:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800319c:	2000      	movs	r0, #0
 800319e:	4770      	bx	lr

080031a0 <SDMMC_CmdBlockLength>:
{
 80031a0:	b530      	push	{r4, r5, lr}
 80031a2:	b087      	sub	sp, #28
 80031a4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80031a6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80031a8:	2410      	movs	r4, #16
 80031aa:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80031ac:	2340      	movs	r3, #64	; 0x40
 80031ae:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80031b0:	2300      	movs	r3, #0
 80031b2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80031b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031b8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80031ba:	a901      	add	r1, sp, #4
 80031bc:	f7ff fec8 	bl	8002f50 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80031c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c4:	4621      	mov	r1, r4
 80031c6:	4628      	mov	r0, r5
 80031c8:	f7ff feda 	bl	8002f80 <SDMMC_GetCmdResp1>
}
 80031cc:	b007      	add	sp, #28
 80031ce:	bd30      	pop	{r4, r5, pc}

080031d0 <SDMMC_CmdReadSingleBlock>:
{
 80031d0:	b530      	push	{r4, r5, lr}
 80031d2:	b087      	sub	sp, #28
 80031d4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80031d6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80031d8:	2411      	movs	r4, #17
 80031da:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80031dc:	2340      	movs	r3, #64	; 0x40
 80031de:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80031e0:	2300      	movs	r3, #0
 80031e2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80031e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031e8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80031ea:	a901      	add	r1, sp, #4
 80031ec:	f7ff feb0 	bl	8002f50 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80031f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f4:	4621      	mov	r1, r4
 80031f6:	4628      	mov	r0, r5
 80031f8:	f7ff fec2 	bl	8002f80 <SDMMC_GetCmdResp1>
}
 80031fc:	b007      	add	sp, #28
 80031fe:	bd30      	pop	{r4, r5, pc}

08003200 <SDMMC_CmdReadMultiBlock>:
{
 8003200:	b530      	push	{r4, r5, lr}
 8003202:	b087      	sub	sp, #28
 8003204:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003206:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003208:	2412      	movs	r4, #18
 800320a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800320c:	2340      	movs	r3, #64	; 0x40
 800320e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003210:	2300      	movs	r3, #0
 8003212:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003218:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800321a:	a901      	add	r1, sp, #4
 800321c:	f7ff fe98 	bl	8002f50 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003220:	f241 3288 	movw	r2, #5000	; 0x1388
 8003224:	4621      	mov	r1, r4
 8003226:	4628      	mov	r0, r5
 8003228:	f7ff feaa 	bl	8002f80 <SDMMC_GetCmdResp1>
}
 800322c:	b007      	add	sp, #28
 800322e:	bd30      	pop	{r4, r5, pc}

08003230 <SDMMC_CmdWriteSingleBlock>:
{
 8003230:	b530      	push	{r4, r5, lr}
 8003232:	b087      	sub	sp, #28
 8003234:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003236:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003238:	2418      	movs	r4, #24
 800323a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800323c:	2340      	movs	r3, #64	; 0x40
 800323e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003240:	2300      	movs	r3, #0
 8003242:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003248:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800324a:	a901      	add	r1, sp, #4
 800324c:	f7ff fe80 	bl	8002f50 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003250:	f241 3288 	movw	r2, #5000	; 0x1388
 8003254:	4621      	mov	r1, r4
 8003256:	4628      	mov	r0, r5
 8003258:	f7ff fe92 	bl	8002f80 <SDMMC_GetCmdResp1>
}
 800325c:	b007      	add	sp, #28
 800325e:	bd30      	pop	{r4, r5, pc}

08003260 <SDMMC_CmdWriteMultiBlock>:
{
 8003260:	b530      	push	{r4, r5, lr}
 8003262:	b087      	sub	sp, #28
 8003264:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003266:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003268:	2419      	movs	r4, #25
 800326a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800326c:	2340      	movs	r3, #64	; 0x40
 800326e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003270:	2300      	movs	r3, #0
 8003272:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003278:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800327a:	a901      	add	r1, sp, #4
 800327c:	f7ff fe68 	bl	8002f50 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003280:	f241 3288 	movw	r2, #5000	; 0x1388
 8003284:	4621      	mov	r1, r4
 8003286:	4628      	mov	r0, r5
 8003288:	f7ff fe7a 	bl	8002f80 <SDMMC_GetCmdResp1>
}
 800328c:	b007      	add	sp, #28
 800328e:	bd30      	pop	{r4, r5, pc}

08003290 <SDMMC_CmdStopTransfer>:
{
 8003290:	b530      	push	{r4, r5, lr}
 8003292:	b087      	sub	sp, #28
 8003294:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800329a:	240c      	movs	r4, #12
 800329c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800329e:	2240      	movs	r2, #64	; 0x40
 80032a0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80032a2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80032a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032a8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80032aa:	a901      	add	r1, sp, #4
 80032ac:	f7ff fe50 	bl	8002f50 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80032b0:	4a03      	ldr	r2, [pc, #12]	; (80032c0 <SDMMC_CmdStopTransfer+0x30>)
 80032b2:	4621      	mov	r1, r4
 80032b4:	4628      	mov	r0, r5
 80032b6:	f7ff fe63 	bl	8002f80 <SDMMC_GetCmdResp1>
}
 80032ba:	b007      	add	sp, #28
 80032bc:	bd30      	pop	{r4, r5, pc}
 80032be:	bf00      	nop
 80032c0:	05f5e100 	.word	0x05f5e100

080032c4 <SDMMC_CmdSelDesel>:
{
 80032c4:	b530      	push	{r4, r5, lr}
 80032c6:	b087      	sub	sp, #28
 80032c8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80032ca:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80032cc:	2407      	movs	r4, #7
 80032ce:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80032d0:	2340      	movs	r3, #64	; 0x40
 80032d2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80032d4:	2300      	movs	r3, #0
 80032d6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80032d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032dc:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80032de:	a901      	add	r1, sp, #4
 80032e0:	f7ff fe36 	bl	8002f50 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	4621      	mov	r1, r4
 80032ea:	4628      	mov	r0, r5
 80032ec:	f7ff fe48 	bl	8002f80 <SDMMC_GetCmdResp1>
}
 80032f0:	b007      	add	sp, #28
 80032f2:	bd30      	pop	{r4, r5, pc}

080032f4 <SDMMC_CmdGoIdleState>:
{
 80032f4:	b510      	push	{r4, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80032fe:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003300:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003302:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003308:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800330a:	a901      	add	r1, sp, #4
 800330c:	f7ff fe20 	bl	8002f50 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 8003310:	4620      	mov	r0, r4
 8003312:	f7ff fd43 	bl	8002d9c <SDMMC_GetCmdError>
}
 8003316:	b006      	add	sp, #24
 8003318:	bd10      	pop	{r4, pc}

0800331a <SDMMC_CmdOperCond>:
{
 800331a:	b510      	push	{r4, lr}
 800331c:	b086      	sub	sp, #24
 800331e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003320:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003324:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003326:	2308      	movs	r3, #8
 8003328:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800332a:	2340      	movs	r3, #64	; 0x40
 800332c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800332e:	2300      	movs	r3, #0
 8003330:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003336:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003338:	a901      	add	r1, sp, #4
 800333a:	f7ff fe09 	bl	8002f50 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800333e:	4620      	mov	r0, r4
 8003340:	f7ff fda0 	bl	8002e84 <SDMMC_GetCmdResp7>
}
 8003344:	b006      	add	sp, #24
 8003346:	bd10      	pop	{r4, pc}

08003348 <SDMMC_CmdAppCommand>:
{
 8003348:	b530      	push	{r4, r5, lr}
 800334a:	b087      	sub	sp, #28
 800334c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800334e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003350:	2437      	movs	r4, #55	; 0x37
 8003352:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003354:	2340      	movs	r3, #64	; 0x40
 8003356:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003358:	2300      	movs	r3, #0
 800335a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800335c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003360:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003362:	a901      	add	r1, sp, #4
 8003364:	f7ff fdf4 	bl	8002f50 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003368:	f241 3288 	movw	r2, #5000	; 0x1388
 800336c:	4621      	mov	r1, r4
 800336e:	4628      	mov	r0, r5
 8003370:	f7ff fe06 	bl	8002f80 <SDMMC_GetCmdResp1>
}
 8003374:	b007      	add	sp, #28
 8003376:	bd30      	pop	{r4, r5, pc}

08003378 <SDMMC_CmdAppOperCommand>:
{
 8003378:	b510      	push	{r4, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800337e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8003382:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003386:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003388:	2329      	movs	r3, #41	; 0x29
 800338a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800338c:	2340      	movs	r3, #64	; 0x40
 800338e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003390:	2300      	movs	r3, #0
 8003392:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003398:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800339a:	a901      	add	r1, sp, #4
 800339c:	f7ff fdd8 	bl	8002f50 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80033a0:	4620      	mov	r0, r4
 80033a2:	f7ff fd47 	bl	8002e34 <SDMMC_GetCmdResp3>
}
 80033a6:	b006      	add	sp, #24
 80033a8:	bd10      	pop	{r4, pc}

080033aa <SDMMC_CmdBusWidth>:
{
 80033aa:	b530      	push	{r4, r5, lr}
 80033ac:	b087      	sub	sp, #28
 80033ae:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80033b0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80033b2:	2406      	movs	r4, #6
 80033b4:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80033b6:	2340      	movs	r3, #64	; 0x40
 80033b8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033ba:	2300      	movs	r3, #0
 80033bc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033c2:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033c4:	a901      	add	r1, sp, #4
 80033c6:	f7ff fdc3 	bl	8002f50 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80033ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ce:	4621      	mov	r1, r4
 80033d0:	4628      	mov	r0, r5
 80033d2:	f7ff fdd5 	bl	8002f80 <SDMMC_GetCmdResp1>
}
 80033d6:	b007      	add	sp, #28
 80033d8:	bd30      	pop	{r4, r5, pc}

080033da <SDMMC_CmdSendSCR>:
{
 80033da:	b530      	push	{r4, r5, lr}
 80033dc:	b087      	sub	sp, #28
 80033de:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80033e4:	2433      	movs	r4, #51	; 0x33
 80033e6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80033e8:	2240      	movs	r2, #64	; 0x40
 80033ea:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033ec:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033f2:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033f4:	a901      	add	r1, sp, #4
 80033f6:	f7ff fdab 	bl	8002f50 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80033fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fe:	4621      	mov	r1, r4
 8003400:	4628      	mov	r0, r5
 8003402:	f7ff fdbd 	bl	8002f80 <SDMMC_GetCmdResp1>
}
 8003406:	b007      	add	sp, #28
 8003408:	bd30      	pop	{r4, r5, pc}

0800340a <SDMMC_CmdSendCID>:
{
 800340a:	b510      	push	{r4, lr}
 800340c:	b086      	sub	sp, #24
 800340e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003414:	2202      	movs	r2, #2
 8003416:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003418:	22c0      	movs	r2, #192	; 0xc0
 800341a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800341c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800341e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003422:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003424:	a901      	add	r1, sp, #4
 8003426:	f7ff fd93 	bl	8002f50 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800342a:	4620      	mov	r0, r4
 800342c:	f7ff fcd2 	bl	8002dd4 <SDMMC_GetCmdResp2>
}
 8003430:	b006      	add	sp, #24
 8003432:	bd10      	pop	{r4, pc}

08003434 <SDMMC_CmdSendCSD>:
{
 8003434:	b510      	push	{r4, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800343a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800343c:	2309      	movs	r3, #9
 800343e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003440:	23c0      	movs	r3, #192	; 0xc0
 8003442:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003444:	2300      	movs	r3, #0
 8003446:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800344c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800344e:	a901      	add	r1, sp, #4
 8003450:	f7ff fd7e 	bl	8002f50 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003454:	4620      	mov	r0, r4
 8003456:	f7ff fcbd 	bl	8002dd4 <SDMMC_GetCmdResp2>
}
 800345a:	b006      	add	sp, #24
 800345c:	bd10      	pop	{r4, pc}

0800345e <SDMMC_CmdSetRelAdd>:
{
 800345e:	b570      	push	{r4, r5, r6, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	4605      	mov	r5, r0
 8003464:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800346a:	2403      	movs	r4, #3
 800346c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800346e:	2240      	movs	r2, #64	; 0x40
 8003470:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003472:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003478:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800347a:	a901      	add	r1, sp, #4
 800347c:	f7ff fd68 	bl	8002f50 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003480:	4632      	mov	r2, r6
 8003482:	4621      	mov	r1, r4
 8003484:	4628      	mov	r0, r5
 8003486:	f7ff fe27 	bl	80030d8 <SDMMC_GetCmdResp6>
}
 800348a:	b006      	add	sp, #24
 800348c:	bd70      	pop	{r4, r5, r6, pc}

0800348e <SDMMC_CmdSendStatus>:
{
 800348e:	b530      	push	{r4, r5, lr}
 8003490:	b087      	sub	sp, #28
 8003492:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8003494:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003496:	240d      	movs	r4, #13
 8003498:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800349a:	2340      	movs	r3, #64	; 0x40
 800349c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800349e:	2300      	movs	r3, #0
 80034a0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80034a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a6:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034a8:	a901      	add	r1, sp, #4
 80034aa:	f7ff fd51 	bl	8002f50 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80034ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b2:	4621      	mov	r1, r4
 80034b4:	4628      	mov	r0, r5
 80034b6:	f7ff fd63 	bl	8002f80 <SDMMC_GetCmdResp1>
}
 80034ba:	b007      	add	sp, #28
 80034bc:	bd30      	pop	{r4, r5, pc}
	...

080034c0 <LL_USART_Init>:
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80034c0:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80034c2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80034c6:	d001      	beq.n	80034cc <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 80034c8:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80034ca:	4770      	bx	lr
{
 80034cc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	460d      	mov	r5, r1
 80034d4:	4604      	mov	r4, r0
    MODIFY_REG(USARTx->CR1,
 80034d6:	68c3      	ldr	r3, [r0, #12]
 80034d8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80034dc:	f023 030c 	bic.w	r3, r3, #12
 80034e0:	684a      	ldr	r2, [r1, #4]
 80034e2:	68c9      	ldr	r1, [r1, #12]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	6929      	ldr	r1, [r5, #16]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	69a9      	ldr	r1, [r5, #24]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60c3      	str	r3, [r0, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80034f2:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80034f4:	6902      	ldr	r2, [r0, #16]
 80034f6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80034fa:	4313      	orrs	r3, r2
 80034fc:	6103      	str	r3, [r0, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80034fe:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003500:	6942      	ldr	r2, [r0, #20]
 8003502:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003506:	4313      	orrs	r3, r2
 8003508:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800350a:	4668      	mov	r0, sp
 800350c:	f7ff fc36 	bl	8002d7c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003510:	4b49      	ldr	r3, [pc, #292]	; (8003638 <LL_USART_Init+0x178>)
 8003512:	429c      	cmp	r4, r3
 8003514:	d010      	beq.n	8003538 <LL_USART_Init+0x78>
    else if (USARTx == USART2)
 8003516:	4b49      	ldr	r3, [pc, #292]	; (800363c <LL_USART_Init+0x17c>)
 8003518:	429c      	cmp	r4, r3
 800351a:	d014      	beq.n	8003546 <LL_USART_Init+0x86>
    else if (USARTx == USART3)
 800351c:	4b48      	ldr	r3, [pc, #288]	; (8003640 <LL_USART_Init+0x180>)
 800351e:	429c      	cmp	r4, r3
 8003520:	d013      	beq.n	800354a <LL_USART_Init+0x8a>
    else if (USARTx == USART6)
 8003522:	4b48      	ldr	r3, [pc, #288]	; (8003644 <LL_USART_Init+0x184>)
 8003524:	429c      	cmp	r4, r3
 8003526:	d012      	beq.n	800354e <LL_USART_Init+0x8e>
    else if (USARTx == UART4)
 8003528:	4b47      	ldr	r3, [pc, #284]	; (8003648 <LL_USART_Init+0x188>)
 800352a:	429c      	cmp	r4, r3
 800352c:	d011      	beq.n	8003552 <LL_USART_Init+0x92>
    else if (USARTx == UART5)
 800352e:	4b47      	ldr	r3, [pc, #284]	; (800364c <LL_USART_Init+0x18c>)
 8003530:	429c      	cmp	r4, r3
 8003532:	d010      	beq.n	8003556 <LL_USART_Init+0x96>
  ErrorStatus status = ERROR;
 8003534:	2001      	movs	r0, #1
 8003536:	e07c      	b.n	8003632 <LL_USART_Init+0x172>
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003538:	9803      	ldr	r0, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800353a:	2800      	cmp	r0, #0
 800353c:	d078      	beq.n	8003630 <LL_USART_Init+0x170>
        && (USART_InitStruct->BaudRate != 0U))
 800353e:	682b      	ldr	r3, [r5, #0]
 8003540:	b95b      	cbnz	r3, 800355a <LL_USART_Init+0x9a>
  ErrorStatus status = ERROR;
 8003542:	2001      	movs	r0, #1
 8003544:	e075      	b.n	8003632 <LL_USART_Init+0x172>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003546:	9802      	ldr	r0, [sp, #8]
 8003548:	e7f7      	b.n	800353a <LL_USART_Init+0x7a>
      periphclk = rcc_clocks.PCLK1_Frequency;
 800354a:	9802      	ldr	r0, [sp, #8]
 800354c:	e7f5      	b.n	800353a <LL_USART_Init+0x7a>
      periphclk = rcc_clocks.PCLK2_Frequency;
 800354e:	9803      	ldr	r0, [sp, #12]
 8003550:	e7f3      	b.n	800353a <LL_USART_Init+0x7a>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003552:	9802      	ldr	r0, [sp, #8]
 8003554:	e7f1      	b.n	800353a <LL_USART_Init+0x7a>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003556:	9802      	ldr	r0, [sp, #8]
 8003558:	e7ef      	b.n	800353a <LL_USART_Init+0x7a>
      LL_USART_SetBaudRate(USARTx,
 800355a:	69aa      	ldr	r2, [r5, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800355c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003560:	d030      	beq.n	80035c4 <LL_USART_Init+0x104>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003562:	f04f 0900 	mov.w	r9, #0
 8003566:	1806      	adds	r6, r0, r0
 8003568:	eb49 0709 	adc.w	r7, r9, r9
 800356c:	eb16 0b00 	adds.w	fp, r6, r0
 8003570:	eb47 0c09 	adc.w	ip, r7, r9
 8003574:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8003578:	ea42 725b 	orr.w	r2, r2, fp, lsr #29
 800357c:	ea4f 05cb 	mov.w	r5, fp, lsl #3
 8003580:	4694      	mov	ip, r2
 8003582:	009a      	lsls	r2, r3, #2
 8003584:	0f9b      	lsrs	r3, r3, #30
 8003586:	1940      	adds	r0, r0, r5
 8003588:	eb49 010c 	adc.w	r1, r9, ip
 800358c:	f7fc fe78 	bl	8000280 <__aeabi_uldivmod>
 8003590:	4d2f      	ldr	r5, [pc, #188]	; (8003650 <LL_USART_Init+0x190>)
 8003592:	fba5 3100 	umull	r3, r1, r5, r0
 8003596:	0949      	lsrs	r1, r1, #5
 8003598:	010a      	lsls	r2, r1, #4
 800359a:	b292      	uxth	r2, r2
 800359c:	2364      	movs	r3, #100	; 0x64
 800359e:	fb03 0311 	mls	r3, r3, r1, r0
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	3332      	adds	r3, #50	; 0x32
 80035a6:	fba5 1303 	umull	r1, r3, r5, r3
 80035aa:	f3c3 134f 	ubfx	r3, r3, #5, #16
 80035ae:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 80035b2:	440a      	add	r2, r1
 80035b4:	b292      	uxth	r2, r2
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	4413      	add	r3, r2
 80035bc:	b29b      	uxth	r3, r3
 80035be:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 80035c0:	2000      	movs	r0, #0
 80035c2:	e036      	b.n	8003632 <LL_USART_Init+0x172>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80035c4:	4683      	mov	fp, r0
 80035c6:	f04f 0c00 	mov.w	ip, #0
 80035ca:	1806      	adds	r6, r0, r0
 80035cc:	eb4c 070c 	adc.w	r7, ip, ip
 80035d0:	eb16 0800 	adds.w	r8, r6, r0
 80035d4:	eb47 090c 	adc.w	r9, r7, ip
 80035d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80035dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80035e0:	ea4f 05c8 	mov.w	r5, r8, lsl #3
 80035e4:	4691      	mov	r9, r2
 80035e6:	2100      	movs	r1, #0
 80035e8:	18da      	adds	r2, r3, r3
 80035ea:	eb41 0301 	adc.w	r3, r1, r1
 80035ee:	eb1b 0005 	adds.w	r0, fp, r5
 80035f2:	eb4c 0109 	adc.w	r1, ip, r9
 80035f6:	f7fc fe43 	bl	8000280 <__aeabi_uldivmod>
 80035fa:	4d15      	ldr	r5, [pc, #84]	; (8003650 <LL_USART_Init+0x190>)
 80035fc:	fba5 3100 	umull	r3, r1, r5, r0
 8003600:	0949      	lsrs	r1, r1, #5
 8003602:	010a      	lsls	r2, r1, #4
 8003604:	b292      	uxth	r2, r2
 8003606:	2364      	movs	r3, #100	; 0x64
 8003608:	fb03 0311 	mls	r3, r3, r1, r0
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	3332      	adds	r3, #50	; 0x32
 8003610:	fba5 1303 	umull	r1, r3, r5, r3
 8003614:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8003618:	0059      	lsls	r1, r3, #1
 800361a:	f401 71f8 	and.w	r1, r1, #496	; 0x1f0
 800361e:	440a      	add	r2, r1
 8003620:	b292      	uxth	r2, r2
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	4413      	add	r3, r2
 8003628:	b29b      	uxth	r3, r3
 800362a:	60a3      	str	r3, [r4, #8]
 800362c:	2000      	movs	r0, #0
 800362e:	e000      	b.n	8003632 <LL_USART_Init+0x172>
  ErrorStatus status = ERROR;
 8003630:	2001      	movs	r0, #1
}
 8003632:	b004      	add	sp, #16
 8003634:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8003638:	40011000 	.word	0x40011000
 800363c:	40004400 	.word	0x40004400
 8003640:	40004800 	.word	0x40004800
 8003644:	40011400 	.word	0x40011400
 8003648:	40004c00 	.word	0x40004c00
 800364c:	40005000 	.word	0x40005000
 8003650:	51eb851f 	.word	0x51eb851f

08003654 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003654:	4b01      	ldr	r3, [pc, #4]	; (800365c <LL_SetSystemCoreClock+0x8>)
 8003656:	6018      	str	r0, [r3, #0]
}
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	20000000 	.word	0x20000000

08003660 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003660:	b530      	push	{r4, r5, lr}
 8003662:	b085      	sub	sp, #20
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003664:	f004 f8ec 	bl	8007840 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8003668:	491a      	ldr	r1, [pc, #104]	; (80036d4 <MX_LWIP_Init+0x74>)
 800366a:	2500      	movs	r5, #0
 800366c:	600d      	str	r5, [r1, #0]
  netmask.addr = 0;
 800366e:	4a1a      	ldr	r2, [pc, #104]	; (80036d8 <MX_LWIP_Init+0x78>)
 8003670:	6015      	str	r5, [r2, #0]
  gw.addr = 0;
 8003672:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <MX_LWIP_Init+0x7c>)
 8003674:	601d      	str	r5, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003676:	4c1a      	ldr	r4, [pc, #104]	; (80036e0 <MX_LWIP_Init+0x80>)
 8003678:	481a      	ldr	r0, [pc, #104]	; (80036e4 <MX_LWIP_Init+0x84>)
 800367a:	9002      	str	r0, [sp, #8]
 800367c:	481a      	ldr	r0, [pc, #104]	; (80036e8 <MX_LWIP_Init+0x88>)
 800367e:	9001      	str	r0, [sp, #4]
 8003680:	9500      	str	r5, [sp, #0]
 8003682:	4620      	mov	r0, r4
 8003684:	f004 fd0e 	bl	80080a4 <netif_add>

  /* Create IPv6 local address */
  netif_create_ip6_linklocal_address(&gnetif, 0);
 8003688:	4629      	mov	r1, r5
 800368a:	4620      	mov	r0, r4
 800368c:	f004 fec8 	bl	8008420 <netif_create_ip6_linklocal_address>
  netif_ip6_addr_set_state(&gnetif, 0, IP6_ADDR_VALID);
 8003690:	2210      	movs	r2, #16
 8003692:	4629      	mov	r1, r5
 8003694:	4620      	mov	r0, r4
 8003696:	f004 fe27 	bl	80082e8 <netif_ip6_addr_set_state>
  gnetif.ip6_autoconfig_enabled = 1;
 800369a:	2301      	movs	r3, #1
 800369c:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80036a0:	4620      	mov	r0, r4
 80036a2:	f004 fdd1 	bl	8008248 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80036a6:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 80036aa:	f013 0f04 	tst.w	r3, #4
 80036ae:	d10c      	bne.n	80036ca <MX_LWIP_Init+0x6a>
    netif_set_up(&gnetif);
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80036b0:	480b      	ldr	r0, [pc, #44]	; (80036e0 <MX_LWIP_Init+0x80>)
 80036b2:	f004 fdf1 	bl	8008298 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80036b6:	4c0a      	ldr	r4, [pc, #40]	; (80036e0 <MX_LWIP_Init+0x80>)
 80036b8:	490c      	ldr	r1, [pc, #48]	; (80036ec <MX_LWIP_Init+0x8c>)
 80036ba:	4620      	mov	r0, r4
 80036bc:	f004 fe10 	bl	80082e0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80036c0:	4620      	mov	r0, r4
 80036c2:	f00b fc53 	bl	800ef6c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80036c6:	b005      	add	sp, #20
 80036c8:	bd30      	pop	{r4, r5, pc}
    netif_set_up(&gnetif);
 80036ca:	4620      	mov	r0, r4
 80036cc:	f004 fdc2 	bl	8008254 <netif_set_up>
 80036d0:	e7f1      	b.n	80036b6 <MX_LWIP_Init+0x56>
 80036d2:	bf00      	nop
 80036d4:	20001a90 	.word	0x20001a90
 80036d8:	20001a94 	.word	0x20001a94
 80036dc:	20001a98 	.word	0x20001a98
 80036e0:	200019bc 	.word	0x200019bc
 80036e4:	080143a5 	.word	0x080143a5
 80036e8:	08003a91 	.word	0x08003a91
 80036ec:	08003af5 	.word	0x08003af5

080036f0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80036f0:	b508      	push	{r3, lr}
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80036f2:	4803      	ldr	r0, [pc, #12]	; (8003700 <MX_LWIP_Process+0x10>)
 80036f4:	f000 f9bc 	bl	8003a70 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80036f8:	f009 fbb2 	bl	800ce60 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80036fc:	bd08      	pop	{r3, pc}
 80036fe:	bf00      	nop
 8003700:	200019bc 	.word	0x200019bc

08003704 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t payloadoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t i=0;

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003708:	4833      	ldr	r0, [pc, #204]	; (80037d8 <low_level_input+0xd4>)
 800370a:	f7fd fdff 	bl	800130c <HAL_ETH_GetReceivedFrame>
 800370e:	2800      	cmp	r0, #0
 8003710:	d15e      	bne.n	80037d0 <low_level_input+0xcc>

    return NULL;

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003712:	4b31      	ldr	r3, [pc, #196]	; (80037d8 <low_level_input+0xd4>)
 8003714:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003716:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40

  if (len > 0)
 800371a:	b929      	cbnz	r1, 8003728 <low_level_input+0x24>
  struct pbuf *p = NULL;
 800371c:	f04f 0800 	mov.w	r8, #0
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003720:	4b2d      	ldr	r3, [pc, #180]	; (80037d8 <low_level_input+0xd4>)
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003724:	2100      	movs	r1, #0
 8003726:	e03a      	b.n	800379e <low_level_input+0x9a>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003728:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800372c:	f005 f85e 	bl	80087ec <pbuf_alloc>
  if (p != NULL)
 8003730:	4680      	mov	r8, r0
 8003732:	2800      	cmp	r0, #0
 8003734:	d0f4      	beq.n	8003720 <low_level_input+0x1c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003736:	4b28      	ldr	r3, [pc, #160]	; (80037d8 <low_level_input+0xd4>)
 8003738:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800373a:	4682      	mov	sl, r0
    bufferoffset = 0;
 800373c:	2400      	movs	r4, #0
    for(q = p; q != NULL; q = q->next)
 800373e:	e021      	b.n	8003784 <low_level_input+0x80>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003740:	f8da 0004 	ldr.w	r0, [sl, #4]
 8003744:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 8003748:	3204      	adds	r2, #4
 800374a:	eb09 0104 	add.w	r1, r9, r4
 800374e:	4430      	add	r0, r6
 8003750:	f010 ff23 	bl	801459a <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003754:	68ff      	ldr	r7, [r7, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003756:	f8d7 9008 	ldr.w	r9, [r7, #8]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800375a:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800375e:	1b36      	subs	r6, r6, r4
 8003760:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
        bufferoffset = 0;
 8003764:	2400      	movs	r4, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003766:	18a5      	adds	r5, r4, r2
 8003768:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800376c:	429d      	cmp	r5, r3
 800376e:	d8e7      	bhi.n	8003740 <low_level_input+0x3c>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003770:	f8da 0004 	ldr.w	r0, [sl, #4]
 8003774:	eb09 0104 	add.w	r1, r9, r4
 8003778:	4430      	add	r0, r6
 800377a:	f010 ff0e 	bl	801459a <memcpy>
    for(q = p; q != NULL; q = q->next)
 800377e:	f8da a000 	ldr.w	sl, [sl]
      bufferoffset = bufferoffset + byteslefttocopy;
 8003782:	462c      	mov	r4, r5
    for(q = p; q != NULL; q = q->next)
 8003784:	f1ba 0f00 	cmp.w	sl, #0
 8003788:	d0ca      	beq.n	8003720 <low_level_input+0x1c>
      byteslefttocopy = q->len;
 800378a:	f8ba 200a 	ldrh.w	r2, [sl, #10]
      payloadoffset = 0;
 800378e:	2600      	movs	r6, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003790:	e7e9      	b.n	8003766 <low_level_input+0x62>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003798:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800379a:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800379c:	3101      	adds	r1, #1
 800379e:	4a0e      	ldr	r2, [pc, #56]	; (80037d8 <low_level_input+0xd4>)
 80037a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037a2:	428a      	cmp	r2, r1
 80037a4:	d8f5      	bhi.n	8003792 <low_level_input+0x8e>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80037a6:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <low_level_input+0xd4>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f241 0214 	movw	r2, #4116	; 0x1014
 80037b2:	589a      	ldr	r2, [r3, r2]
 80037b4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80037b8:	d007      	beq.n	80037ca <low_level_input+0xc6>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80037ba:	f241 0214 	movw	r2, #4116	; 0x1014
 80037be:	2180      	movs	r1, #128	; 0x80
 80037c0:	5099      	str	r1, [r3, r2]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80037c2:	f241 0208 	movw	r2, #4104	; 0x1008
 80037c6:	2100      	movs	r1, #0
 80037c8:	5099      	str	r1, [r3, r2]
  }
  return p;
}
 80037ca:	4640      	mov	r0, r8
 80037cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return NULL;
 80037d0:	f04f 0800 	mov.w	r8, #0
 80037d4:	e7f9      	b.n	80037ca <low_level_input+0xc6>
 80037d6:	bf00      	nop
 80037d8:	2000336c 	.word	0x2000336c

080037dc <low_level_output>:
{
 80037dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e0:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80037e2:	4b2c      	ldr	r3, [pc, #176]	; (8003894 <low_level_output+0xb8>)
 80037e4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80037e6:	f8d6 a008 	ldr.w	sl, [r6, #8]
  bufferoffset = 0;
 80037ea:	2400      	movs	r4, #0
  uint32_t framelength = 0;
 80037ec:	4627      	mov	r7, r4
  for(q = p; q != NULL; q = q->next)
 80037ee:	f1bb 0f00 	cmp.w	fp, #0
 80037f2:	d032      	beq.n	800385a <low_level_output+0x7e>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80037f4:	6833      	ldr	r3, [r6, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	db35      	blt.n	8003866 <low_level_output+0x8a>
      byteslefttocopy = q->len;
 80037fa:	f8bb 900a 	ldrh.w	r9, [fp, #10]
      payloadoffset = 0;
 80037fe:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003800:	eb04 0809 	add.w	r8, r4, r9
 8003804:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8003808:	4598      	cmp	r8, r3
 800380a:	d919      	bls.n	8003840 <low_level_output+0x64>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800380c:	f8db 1004 	ldr.w	r1, [fp, #4]
 8003810:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 8003814:	3204      	adds	r2, #4
 8003816:	4429      	add	r1, r5
 8003818:	eb0a 0004 	add.w	r0, sl, r4
 800381c:	f010 febd 	bl	801459a <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003820:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003822:	6833      	ldr	r3, [r6, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	db21      	blt.n	800386c <low_level_output+0x90>
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003828:	f8d6 a008 	ldr.w	sl, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800382c:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003830:	1b2d      	subs	r5, r5, r4
 8003832:	f205 55f4 	addw	r5, r5, #1524	; 0x5f4
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003836:	1b3f      	subs	r7, r7, r4
 8003838:	f207 57f4 	addw	r7, r7, #1524	; 0x5f4
        bufferoffset = 0;
 800383c:	2400      	movs	r4, #0
 800383e:	e7df      	b.n	8003800 <low_level_output+0x24>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003840:	f8db 1004 	ldr.w	r1, [fp, #4]
 8003844:	464a      	mov	r2, r9
 8003846:	4429      	add	r1, r5
 8003848:	eb0a 0004 	add.w	r0, sl, r4
 800384c:	f010 fea5 	bl	801459a <memcpy>
      framelength = framelength + byteslefttocopy;
 8003850:	444f      	add	r7, r9
  for(q = p; q != NULL; q = q->next)
 8003852:	f8db b000 	ldr.w	fp, [fp]
      bufferoffset = bufferoffset + byteslefttocopy;
 8003856:	4644      	mov	r4, r8
 8003858:	e7c9      	b.n	80037ee <low_level_output+0x12>
  HAL_ETH_TransmitFrame(&heth, framelength);
 800385a:	4639      	mov	r1, r7
 800385c:	480d      	ldr	r0, [pc, #52]	; (8003894 <low_level_output+0xb8>)
 800385e:	f7fd fcc5 	bl	80011ec <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 8003862:	2000      	movs	r0, #0
 8003864:	e004      	b.n	8003870 <low_level_output+0x94>
        errval = ERR_USE;
 8003866:	f06f 0007 	mvn.w	r0, #7
 800386a:	e001      	b.n	8003870 <low_level_output+0x94>
          errval = ERR_USE;
 800386c:	f06f 0007 	mvn.w	r0, #7
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003870:	4b08      	ldr	r3, [pc, #32]	; (8003894 <low_level_output+0xb8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f241 0214 	movw	r2, #4116	; 0x1014
 8003878:	589a      	ldr	r2, [r3, r2]
 800387a:	f012 0f20 	tst.w	r2, #32
 800387e:	d007      	beq.n	8003890 <low_level_output+0xb4>
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003880:	f241 0214 	movw	r2, #4116	; 0x1014
 8003884:	2120      	movs	r1, #32
 8003886:	5099      	str	r1, [r3, r2]
    heth.Instance->DMATPDR = 0;
 8003888:	f241 0204 	movw	r2, #4100	; 0x1004
 800388c:	2100      	movs	r1, #0
 800388e:	5099      	str	r1, [r3, r2]
}
 8003890:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003894:	2000336c 	.word	0x2000336c

08003898 <low_level_init>:
{
 8003898:	b530      	push	{r4, r5, lr}
 800389a:	b083      	sub	sp, #12
 800389c:	4604      	mov	r4, r0
  heth.Instance = ETH;
 800389e:	4832      	ldr	r0, [pc, #200]	; (8003968 <low_level_init+0xd0>)
 80038a0:	4b32      	ldr	r3, [pc, #200]	; (800396c <low_level_init+0xd4>)
 80038a2:	6003      	str	r3, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80038a4:	2201      	movs	r2, #1
 80038a6:	6042      	str	r2, [r0, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80038a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038ac:	6083      	str	r3, [r0, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80038ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038b2:	60c3      	str	r3, [r0, #12]
  heth.Init.PhyAddress = LAN8720_PHY_ADDRESS;
 80038b4:	2300      	movs	r3, #0
 80038b6:	8203      	strh	r3, [r0, #16]
  MACAddr[0] = 0x00;
 80038b8:	f88d 3000 	strb.w	r3, [sp]
  MACAddr[1] = 0x80;
 80038bc:	2180      	movs	r1, #128	; 0x80
 80038be:	f88d 1001 	strb.w	r1, [sp, #1]
  MACAddr[2] = 0xE1;
 80038c2:	21e1      	movs	r1, #225	; 0xe1
 80038c4:	f88d 1002 	strb.w	r1, [sp, #2]
  MACAddr[3] = 0x01;
 80038c8:	f88d 2003 	strb.w	r2, [sp, #3]
  MACAddr[4] = 0x02;
 80038cc:	2202      	movs	r2, #2
 80038ce:	f88d 2004 	strb.w	r2, [sp, #4]
  MACAddr[5] = 0x03;
 80038d2:	2203      	movs	r2, #3
 80038d4:	f88d 2005 	strb.w	r2, [sp, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80038d8:	f8c0 d014 	str.w	sp, [r0, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80038dc:	6183      	str	r3, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80038de:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80038e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80038e4:	6203      	str	r3, [r0, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80038e6:	f7fd fdcf 	bl	8001488 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 80038ea:	b928      	cbnz	r0, 80038f8 <low_level_init+0x60>
    netif->flags |= NETIF_FLAG_LINK_UP;
 80038ec:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 80038f0:	f043 0304 	orr.w	r3, r3, #4
 80038f4:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
  heth.Instance->MACFFR |= ETH_MULTICASTFRAMESFILTER_NONE;
 80038f8:	4d1b      	ldr	r5, [pc, #108]	; (8003968 <low_level_init+0xd0>)
 80038fa:	682a      	ldr	r2, [r5, #0]
 80038fc:	6853      	ldr	r3, [r2, #4]
 80038fe:	f043 0310 	orr.w	r3, r3, #16
 8003902:	6053      	str	r3, [r2, #4]
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003904:	2304      	movs	r3, #4
 8003906:	4a1a      	ldr	r2, [pc, #104]	; (8003970 <low_level_init+0xd8>)
 8003908:	491a      	ldr	r1, [pc, #104]	; (8003974 <low_level_init+0xdc>)
 800390a:	4628      	mov	r0, r5
 800390c:	f7fd fbfe 	bl	800110c <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003910:	2304      	movs	r3, #4
 8003912:	4a19      	ldr	r2, [pc, #100]	; (8003978 <low_level_init+0xe0>)
 8003914:	4919      	ldr	r1, [pc, #100]	; (800397c <low_level_init+0xe4>)
 8003916:	4628      	mov	r0, r5
 8003918:	f7fd fc31 	bl	800117e <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800391c:	2306      	movs	r3, #6
 800391e:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003922:	696b      	ldr	r3, [r5, #20]
 8003924:	781a      	ldrb	r2, [r3, #0]
 8003926:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800392a:	785a      	ldrb	r2, [r3, #1]
 800392c:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003930:	789a      	ldrb	r2, [r3, #2]
 8003932:	f884 20be 	strb.w	r2, [r4, #190]	; 0xbe
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003936:	78da      	ldrb	r2, [r3, #3]
 8003938:	f884 20bf 	strb.w	r2, [r4, #191]	; 0xbf
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800393c:	791a      	ldrb	r2, [r3, #4]
 800393e:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003942:	795b      	ldrb	r3, [r3, #5]
 8003944:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
  netif->mtu = 1500;
 8003948:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800394c:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003950:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 8003954:	f043 030a 	orr.w	r3, r3, #10
 8003958:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
  HAL_ETH_Start(&heth);
 800395c:	4628      	mov	r0, r5
 800395e:	f7fd febf 	bl	80016e0 <HAL_ETH_Start>
}
 8003962:	b003      	add	sp, #12
 8003964:	bd30      	pop	{r4, r5, pc}
 8003966:	bf00      	nop
 8003968:	2000336c 	.word	0x2000336c
 800396c:	40028000 	.word	0x40028000
 8003970:	200033b4 	.word	0x200033b4
 8003974:	20001a9c 	.word	0x20001a9c
 8003978:	20001b1c 	.word	0x20001b1c
 800397c:	200032ec 	.word	0x200032ec

08003980 <HAL_ETH_MspInit>:
{
 8003980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003982:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003984:	2300      	movs	r3, #0
 8003986:	9307      	str	r3, [sp, #28]
 8003988:	9308      	str	r3, [sp, #32]
 800398a:	9309      	str	r3, [sp, #36]	; 0x24
 800398c:	930a      	str	r3, [sp, #40]	; 0x28
 800398e:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8003990:	6802      	ldr	r2, [r0, #0]
 8003992:	4b33      	ldr	r3, [pc, #204]	; (8003a60 <HAL_ETH_MspInit+0xe0>)
 8003994:	429a      	cmp	r2, r3
 8003996:	d001      	beq.n	800399c <HAL_ETH_MspInit+0x1c>
}
 8003998:	b00d      	add	sp, #52	; 0x34
 800399a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 800399c:	2400      	movs	r4, #0
 800399e:	9401      	str	r4, [sp, #4]
 80039a0:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 80039a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30
 80039ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ae:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80039b2:	9201      	str	r2, [sp, #4]
 80039b4:	9a01      	ldr	r2, [sp, #4]
 80039b6:	9402      	str	r4, [sp, #8]
 80039b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
 80039c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039c2:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80039c6:	9202      	str	r2, [sp, #8]
 80039c8:	9a02      	ldr	r2, [sp, #8]
 80039ca:	9403      	str	r4, [sp, #12]
 80039cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ce:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
 80039d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039d6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80039da:	9203      	str	r2, [sp, #12]
 80039dc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039de:	9404      	str	r4, [sp, #16]
 80039e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e2:	f042 0204 	orr.w	r2, r2, #4
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
 80039e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ea:	f002 0204 	and.w	r2, r2, #4
 80039ee:	9204      	str	r2, [sp, #16]
 80039f0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039f2:	9405      	str	r4, [sp, #20]
 80039f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
 80039fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039fe:	f002 0201 	and.w	r2, r2, #1
 8003a02:	9205      	str	r2, [sp, #20]
 8003a04:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a06:	9406      	str	r4, [sp, #24]
 8003a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a0a:	f042 0202 	orr.w	r2, r2, #2
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	9306      	str	r3, [sp, #24]
 8003a18:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003a1a:	2332      	movs	r3, #50	; 0x32
 8003a1c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1e:	2702      	movs	r7, #2
 8003a20:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a22:	2603      	movs	r6, #3
 8003a24:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a26:	250b      	movs	r5, #11
 8003a28:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a2a:	a907      	add	r1, sp, #28
 8003a2c:	480d      	ldr	r0, [pc, #52]	; (8003a64 <HAL_ETH_MspInit+0xe4>)
 8003a2e:	f7fe f911 	bl	8001c54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003a32:	2386      	movs	r3, #134	; 0x86
 8003a34:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a36:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a38:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a3c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a3e:	a907      	add	r1, sp, #28
 8003a40:	4809      	ldr	r0, [pc, #36]	; (8003a68 <HAL_ETH_MspInit+0xe8>)
 8003a42:	f7fe f907 	bl	8001c54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003a46:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003a4a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a50:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a52:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a54:	a907      	add	r1, sp, #28
 8003a56:	4805      	ldr	r0, [pc, #20]	; (8003a6c <HAL_ETH_MspInit+0xec>)
 8003a58:	f7fe f8fc 	bl	8001c54 <HAL_GPIO_Init>
}
 8003a5c:	e79c      	b.n	8003998 <HAL_ETH_MspInit+0x18>
 8003a5e:	bf00      	nop
 8003a60:	40028000 	.word	0x40028000
 8003a64:	40020800 	.word	0x40020800
 8003a68:	40020000 	.word	0x40020000
 8003a6c:	40020400 	.word	0x40020400

08003a70 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003a70:	b538      	push	{r3, r4, r5, lr}
 8003a72:	4604      	mov	r4, r0
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003a74:	f7ff fe46 	bl	8003704 <low_level_input>

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003a78:	b128      	cbz	r0, 8003a86 <ethernetif_input+0x16>
 8003a7a:	4605      	mov	r5, r0

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003a7c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003a80:	4621      	mov	r1, r4
 8003a82:	4798      	blx	r3

  if (err != ERR_OK)
 8003a84:	b900      	cbnz	r0, 8003a88 <ethernetif_input+0x18>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
    p = NULL;
  }
}
 8003a86:	bd38      	pop	{r3, r4, r5, pc}
    pbuf_free(p);
 8003a88:	4628      	mov	r0, r5
 8003a8a:	f004 fe4d 	bl	8008728 <pbuf_free>
 8003a8e:	e7fa      	b.n	8003a86 <ethernetif_input+0x16>

08003a90 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003a90:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003a92:	4604      	mov	r4, r0
 8003a94:	b198      	cbz	r0, 8003abe <ethernetif_init+0x2e>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003a96:	2373      	movs	r3, #115	; 0x73
 8003a98:	f884 30c4 	strb.w	r3, [r4, #196]	; 0xc4
  netif->name[1] = IFNAME1;
 8003a9c:	2374      	movs	r3, #116	; 0x74
 8003a9e:	f884 30c5 	strb.w	r3, [r4, #197]	; 0xc5
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003aa2:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <ethernetif_init+0x40>)
 8003aa4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
#endif /* LWIP_ARP */
#endif /* LWIP_ARP || LWIP_ETHERNET */
#endif /* LWIP_IPV4 */

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <ethernetif_init+0x44>)
 8003aaa:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003aae:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <ethernetif_init+0x48>)
 8003ab0:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

  /* initialize the hardware */
  low_level_init(netif);
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f7ff feef 	bl	8003898 <low_level_init>

  return ERR_OK;
}
 8003aba:	2000      	movs	r0, #0
 8003abc:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <ethernetif_init+0x4c>)
 8003ac0:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8003ac4:	4906      	ldr	r1, [pc, #24]	; (8003ae0 <ethernetif_init+0x50>)
 8003ac6:	4807      	ldr	r0, [pc, #28]	; (8003ae4 <ethernetif_init+0x54>)
 8003ac8:	f010 fd94 	bl	80145f4 <iprintf>
 8003acc:	e7e3      	b.n	8003a96 <ethernetif_init+0x6>
 8003ace:	bf00      	nop
 8003ad0:	0800f911 	.word	0x0800f911
 8003ad4:	08010cc5 	.word	0x08010cc5
 8003ad8:	080037dd 	.word	0x080037dd
 8003adc:	080155dc 	.word	0x080155dc
 8003ae0:	080155f8 	.word	0x080155f8
 8003ae4:	08015608 	.word	0x08015608

08003ae8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003ae8:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8003aea:	f000 fc83 	bl	80043f4 <HAL_GetTick>
}
 8003aee:	bd08      	pop	{r3, pc}

08003af0 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003af0:	4770      	bx	lr
	...

08003af4 <ethernetif_update_config>:
{
 8003af4:	b530      	push	{r4, r5, lr}
 8003af6:	b083      	sub	sp, #12
 8003af8:	4604      	mov	r4, r0
  __IO uint32_t tickstart = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	9301      	str	r3, [sp, #4]
  uint32_t regvalue = 0;
 8003afe:	9300      	str	r3, [sp, #0]
  if(netif_is_link_up(netif))
 8003b00:	f890 30c3 	ldrb.w	r3, [r0, #195]	; 0xc3
 8003b04:	f013 0f04 	tst.w	r3, #4
 8003b08:	d051      	beq.n	8003bae <ethernetif_update_config+0xba>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003b0a:	4b2b      	ldr	r3, [pc, #172]	; (8003bb8 <ethernetif_update_config+0xc4>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d035      	beq.n	8003b7e <ethernetif_update_config+0x8a>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003b12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b16:	2100      	movs	r1, #0
 8003b18:	4827      	ldr	r0, [pc, #156]	; (8003bb8 <ethernetif_update_config+0xc4>)
 8003b1a:	f7fd fc7a 	bl	8001412 <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 8003b1e:	f000 fc69 	bl	80043f4 <HAL_GetTick>
 8003b22:	9001      	str	r0, [sp, #4]
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003b24:	466a      	mov	r2, sp
 8003b26:	2101      	movs	r1, #1
 8003b28:	4823      	ldr	r0, [pc, #140]	; (8003bb8 <ethernetif_update_config+0xc4>)
 8003b2a:	f7fd fc36 	bl	800139a <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 8003b2e:	f000 fc61 	bl	80043f4 <HAL_GetTick>
 8003b32:	9b01      	ldr	r3, [sp, #4]
 8003b34:	1ac0      	subs	r0, r0, r3
 8003b36:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003b3a:	d820      	bhi.n	8003b7e <ethernetif_update_config+0x8a>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003b3c:	9b00      	ldr	r3, [sp, #0]
 8003b3e:	f013 0f20 	tst.w	r3, #32
 8003b42:	d0ef      	beq.n	8003b24 <ethernetif_update_config+0x30>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003b44:	466a      	mov	r2, sp
 8003b46:	211f      	movs	r1, #31
 8003b48:	481b      	ldr	r0, [pc, #108]	; (8003bb8 <ethernetif_update_config+0xc4>)
 8003b4a:	f7fd fc26 	bl	800139a <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003b4e:	9b00      	ldr	r3, [sp, #0]
 8003b50:	f013 0f10 	tst.w	r3, #16
 8003b54:	d00a      	beq.n	8003b6c <ethernetif_update_config+0x78>
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003b56:	4a18      	ldr	r2, [pc, #96]	; (8003bb8 <ethernetif_update_config+0xc4>)
 8003b58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b5c:	60d1      	str	r1, [r2, #12]
      if(regvalue & PHY_SPEED_STATUS)
 8003b5e:	f013 0f04 	tst.w	r3, #4
 8003b62:	d007      	beq.n	8003b74 <ethernetif_update_config+0x80>
        heth.Init.Speed = ETH_SPEED_10M;
 8003b64:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <ethernetif_update_config+0xc4>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	609a      	str	r2, [r3, #8]
 8003b6a:	e013      	b.n	8003b94 <ethernetif_update_config+0xa0>
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003b6c:	4a12      	ldr	r2, [pc, #72]	; (8003bb8 <ethernetif_update_config+0xc4>)
 8003b6e:	2100      	movs	r1, #0
 8003b70:	60d1      	str	r1, [r2, #12]
 8003b72:	e7f4      	b.n	8003b5e <ethernetif_update_config+0x6a>
        heth.Init.Speed = ETH_SPEED_100M;
 8003b74:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <ethernetif_update_config+0xc4>)
 8003b76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b7a:	609a      	str	r2, [r3, #8]
 8003b7c:	e00a      	b.n	8003b94 <ethernetif_update_config+0xa0>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003b7e:	480e      	ldr	r0, [pc, #56]	; (8003bb8 <ethernetif_update_config+0xc4>)
 8003b80:	68c2      	ldr	r2, [r0, #12]
 8003b82:	f3c2 02cf 	ubfx	r2, r2, #3, #16
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003b86:	6883      	ldr	r3, [r0, #8]
 8003b88:	f3c3 034f 	ubfx	r3, r3, #1, #16
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	2100      	movs	r1, #0
 8003b90:	f7fd fc3f 	bl	8001412 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003b94:	4d08      	ldr	r5, [pc, #32]	; (8003bb8 <ethernetif_update_config+0xc4>)
 8003b96:	2100      	movs	r1, #0
 8003b98:	4628      	mov	r0, r5
 8003b9a:	f7fd fde5 	bl	8001768 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	f7fd fd9e 	bl	80016e0 <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f7ff ffa3 	bl	8003af0 <ethernetif_notify_conn_changed>
}
 8003baa:	b003      	add	sp, #12
 8003bac:	bd30      	pop	{r4, r5, pc}
    HAL_ETH_Stop(&heth);
 8003bae:	4802      	ldr	r0, [pc, #8]	; (8003bb8 <ethernetif_update_config+0xc4>)
 8003bb0:	f7fd fdb8 	bl	8001724 <HAL_ETH_Stop>
 8003bb4:	e7f6      	b.n	8003ba4 <ethernetif_update_config+0xb0>
 8003bb6:	bf00      	nop
 8003bb8:	2000336c 	.word	0x2000336c

08003bbc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003bbc:	b500      	push	{lr}
 8003bbe:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	460a      	mov	r2, r1
 8003bc6:	4601      	mov	r1, r0
 8003bc8:	4803      	ldr	r0, [pc, #12]	; (8003bd8 <BSP_SD_ReadBlocks+0x1c>)
 8003bca:	f7fe fa83 	bl	80020d4 <HAL_SD_ReadBlocks>
 8003bce:	b100      	cbz	r0, 8003bd2 <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8003bd0:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8003bd2:	b003      	add	sp, #12
 8003bd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bd8:	20001904 	.word	0x20001904

08003bdc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003bdc:	b500      	push	{lr}
 8003bde:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	4613      	mov	r3, r2
 8003be4:	460a      	mov	r2, r1
 8003be6:	4601      	mov	r1, r0
 8003be8:	4803      	ldr	r0, [pc, #12]	; (8003bf8 <BSP_SD_WriteBlocks+0x1c>)
 8003bea:	f7fe fba7 	bl	800233c <HAL_SD_WriteBlocks>
 8003bee:	b100      	cbz	r0, 8003bf2 <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8003bf0:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8003bf2:	b003      	add	sp, #12
 8003bf4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bf8:	20001904 	.word	0x20001904

08003bfc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8003bfc:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003bfe:	4803      	ldr	r0, [pc, #12]	; (8003c0c <BSP_SD_GetCardState+0x10>)
 8003c00:	f7fe fec6 	bl	8002990 <HAL_SD_GetCardState>
}
 8003c04:	3804      	subs	r0, #4
 8003c06:	bf18      	it	ne
 8003c08:	2001      	movne	r0, #1
 8003c0a:	bd08      	pop	{r3, pc}
 8003c0c:	20001904 	.word	0x20001904

08003c10 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8003c10:	b508      	push	{r3, lr}
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8003c12:	4601      	mov	r1, r0
 8003c14:	4801      	ldr	r0, [pc, #4]	; (8003c1c <BSP_SD_GetCardInfo+0xc>)
 8003c16:	f7fe fe56 	bl	80028c6 <HAL_SD_GetCardInfo>
}
 8003c1a:	bd08      	pop	{r3, pc}
 8003c1c:	20001904 	.word	0x20001904

08003c20 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8003c20:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 8003c22:	2301      	movs	r3, #1
 8003c24:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8003c28:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8003c2c:	b002      	add	sp, #8
 8003c2e:	4770      	bx	lr

08003c30 <BSP_SD_Init>:
{
 8003c30:	b510      	push	{r4, lr}
  hsd.Instance = SDIO;
 8003c32:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <BSP_SD_Init+0x44>)
 8003c34:	4a10      	ldr	r2, [pc, #64]	; (8003c78 <BSP_SD_Init+0x48>)
 8003c36:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003c38:	2200      	movs	r2, #0
 8003c3a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003c3c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003c3e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003c40:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003c42:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8003c44:	2203      	movs	r2, #3
 8003c46:	619a      	str	r2, [r3, #24]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8003c48:	f7ff ffea 	bl	8003c20 <BSP_SD_IsDetected>
 8003c4c:	2801      	cmp	r0, #1
 8003c4e:	d002      	beq.n	8003c56 <BSP_SD_Init+0x26>
    return MSD_ERROR;
 8003c50:	2401      	movs	r4, #1
}
 8003c52:	4620      	mov	r0, r4
 8003c54:	bd10      	pop	{r4, pc}
  sd_state = HAL_SD_Init(&hsd);
 8003c56:	4807      	ldr	r0, [pc, #28]	; (8003c74 <BSP_SD_Init+0x44>)
 8003c58:	f7fe fe16 	bl	8002888 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8003c5c:	4604      	mov	r4, r0
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	d1f7      	bne.n	8003c52 <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8003c62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c66:	4803      	ldr	r0, [pc, #12]	; (8003c74 <BSP_SD_Init+0x44>)
 8003c68:	f7fe fe40 	bl	80028ec <HAL_SD_ConfigWideBusOperation>
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	d0f0      	beq.n	8003c52 <BSP_SD_Init+0x22>
      sd_state = MSD_ERROR;
 8003c70:	2401      	movs	r4, #1
 8003c72:	e7ee      	b.n	8003c52 <BSP_SD_Init+0x22>
 8003c74:	20001904 	.word	0x20001904
 8003c78:	40012c00 	.word	0x40012c00

08003c7c <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive number (0) */
)
{
 8003c7c:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if (DiskInitialized == 0)
 8003c7e:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <disk_initialize+0x1c>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	b10b      	cbz	r3, 8003c88 <disk_initialize+0xc>
  DSTATUS stat = RES_OK;
 8003c84:	2000      	movs	r0, #0
  {
    DiskInitialized = 1;
    stat = SD_initialize(0);
  }
  return stat;
}
 8003c86:	bd08      	pop	{r3, pc}
    DiskInitialized = 1;
 8003c88:	4b03      	ldr	r3, [pc, #12]	; (8003c98 <disk_initialize+0x1c>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	701a      	strb	r2, [r3, #0]
    stat = SD_initialize(0);
 8003c8e:	2000      	movs	r0, #0
 8003c90:	f000 f82a 	bl	8003ce8 <SD_initialize>
 8003c94:	e7f7      	b.n	8003c86 <disk_initialize+0xa>
 8003c96:	bf00      	nop
 8003c98:	20000444 	.word	0x20000444

08003c9c <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv  /* Physical drive nmuber (0) */
)
{
 8003c9c:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = SD_status(0);
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	f000 f836 	bl	8003d10 <SD_status>
  return stat;
}
 8003ca4:	bd08      	pop	{r3, pc}

08003ca6 <disk_read>:
	BYTE pdrv,     /* Physical drive nmuber to identify the drive */
	BYTE *buff,    /* Data buffer to store read data */
	DWORD sector,  /* Sector address in LBA */
	UINT count     /* Number of sectors to read */
)
{
 8003ca6:	b508      	push	{r3, lr}
  DRESULT res;

  res = SD_read(0, buff, sector, count);
 8003ca8:	2000      	movs	r0, #0
 8003caa:	f000 f835 	bl	8003d18 <SD_read>
  return res;
}
 8003cae:	bd08      	pop	{r3, pc}

08003cb0 <disk_write>:
	BYTE pdrv,         /* Physical drive nmuber to identify the drive */
	const BYTE *buff,  /* Data to be written */
	DWORD sector,      /* Sector address in LBA */
	UINT count         /* Number of sectors to write */
)
{
 8003cb0:	b508      	push	{r3, lr}
  DRESULT res;

  res = SD_write(0, buff, sector, count);
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	f000 f840 	bl	8003d38 <SD_write>
  return res;
}
 8003cb8:	bd08      	pop	{r3, pc}

08003cba <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,    /* Physical drive nmuber (0) */
	BYTE cmd,     /* Control code */
	void *buff    /* Buffer to send/receive data block */
)
{
 8003cba:	b508      	push	{r3, lr}
  DRESULT res;

  res = SD_ioctl(0, cmd, buff);
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	f000 f84b 	bl	8003d58 <SD_ioctl>
  return res;
}
 8003cc2:	bd08      	pop	{r3, pc}

08003cc4 <SD_CheckStatus>:
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8003cc4:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8003cc6:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <SD_CheckStatus+0x20>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8003ccc:	f7ff ff96 	bl	8003bfc <BSP_SD_GetCardState>
 8003cd0:	b920      	cbnz	r0, 8003cdc <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 8003cd2:	4a04      	ldr	r2, [pc, #16]	; (8003ce4 <SD_CheckStatus+0x20>)
 8003cd4:	7813      	ldrb	r3, [r2, #0]
 8003cd6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003cda:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8003cdc:	4b01      	ldr	r3, [pc, #4]	; (8003ce4 <SD_CheckStatus+0x20>)
 8003cde:	7818      	ldrb	r0, [r3, #0]
}
 8003ce0:	bd08      	pop	{r3, pc}
 8003ce2:	bf00      	nop
 8003ce4:	2000000c 	.word	0x2000000c

08003ce8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003ce8:	b510      	push	{r4, lr}
 8003cea:	4604      	mov	r4, r0
  Stat = STA_NOINIT;
 8003cec:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <SD_initialize+0x24>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003cf2:	f7ff ff9d 	bl	8003c30 <BSP_SD_Init>
 8003cf6:	b110      	cbz	r0, 8003cfe <SD_initialize+0x16>
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <SD_initialize+0x24>)
 8003cfa:	7818      	ldrb	r0, [r3, #0]
}
 8003cfc:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 8003cfe:	4620      	mov	r0, r4
 8003d00:	f7ff ffe0 	bl	8003cc4 <SD_CheckStatus>
 8003d04:	4b01      	ldr	r3, [pc, #4]	; (8003d0c <SD_initialize+0x24>)
 8003d06:	7018      	strb	r0, [r3, #0]
 8003d08:	e7f6      	b.n	8003cf8 <SD_initialize+0x10>
 8003d0a:	bf00      	nop
 8003d0c:	2000000c 	.word	0x2000000c

08003d10 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8003d10:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 8003d12:	f7ff ffd7 	bl	8003cc4 <SD_CheckStatus>
}
 8003d16:	bd08      	pop	{r3, pc}

08003d18 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8003d18:	b508      	push	{r3, lr}
 8003d1a:	4608      	mov	r0, r1
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8003d20:	f04f 33ff 	mov.w	r3, #4294967295
 8003d24:	f7ff ff4a 	bl	8003bbc <BSP_SD_ReadBlocks>
 8003d28:	b920      	cbnz	r0, 8003d34 <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8003d2a:	f7ff ff67 	bl	8003bfc <BSP_SD_GetCardState>
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	d1fb      	bne.n	8003d2a <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8003d32:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8003d34:	2001      	movs	r0, #1
 8003d36:	e7fc      	b.n	8003d32 <SD_read+0x1a>

08003d38 <SD_write>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003d38:	b508      	push	{r3, lr}
 8003d3a:	4608      	mov	r0, r1
 8003d3c:	4611      	mov	r1, r2
 8003d3e:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8003d40:	f04f 33ff 	mov.w	r3, #4294967295
 8003d44:	f7ff ff4a 	bl	8003bdc <BSP_SD_WriteBlocks>
 8003d48:	b920      	cbnz	r0, 8003d54 <SD_write+0x1c>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8003d4a:	f7ff ff57 	bl	8003bfc <BSP_SD_GetCardState>
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	d1fb      	bne.n	8003d4a <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8003d52:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8003d54:	2001      	movs	r0, #1
 8003d56:	e7fc      	b.n	8003d52 <SD_write+0x1a>

08003d58 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003d58:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <SD_ioctl+0x58>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	f013 0f01 	tst.w	r3, #1
 8003d60:	d121      	bne.n	8003da6 <SD_ioctl+0x4e>
{
 8003d62:	b510      	push	{r4, lr}
 8003d64:	b088      	sub	sp, #32
 8003d66:	4614      	mov	r4, r2

  switch (cmd)
 8003d68:	2903      	cmp	r1, #3
 8003d6a:	d81e      	bhi.n	8003daa <SD_ioctl+0x52>
 8003d6c:	e8df f001 	tbb	[pc, r1]
 8003d70:	130c0502 	.word	0x130c0502
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8003d74:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }

  return res;
}
 8003d76:	b008      	add	sp, #32
 8003d78:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8003d7a:	4668      	mov	r0, sp
 8003d7c:	f7ff ff48 	bl	8003c10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003d80:	9b06      	ldr	r3, [sp, #24]
 8003d82:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8003d84:	2000      	movs	r0, #0
    break;
 8003d86:	e7f6      	b.n	8003d76 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8003d88:	4668      	mov	r0, sp
 8003d8a:	f7ff ff41 	bl	8003c10 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003d8e:	9b07      	ldr	r3, [sp, #28]
 8003d90:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8003d92:	2000      	movs	r0, #0
    break;
 8003d94:	e7ef      	b.n	8003d76 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8003d96:	4668      	mov	r0, sp
 8003d98:	f7ff ff3a 	bl	8003c10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003d9c:	9b07      	ldr	r3, [sp, #28]
 8003d9e:	0a5b      	lsrs	r3, r3, #9
 8003da0:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8003da2:	2000      	movs	r0, #0
    break;
 8003da4:	e7e7      	b.n	8003d76 <SD_ioctl+0x1e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003da6:	2003      	movs	r0, #3
}
 8003da8:	4770      	bx	lr
    res = RES_PARERR;
 8003daa:	2004      	movs	r0, #4
 8003dac:	e7e3      	b.n	8003d76 <SD_ioctl+0x1e>
 8003dae:	bf00      	nop
 8003db0:	2000000c 	.word	0x2000000c

08003db4 <CpuIrqDisable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
  __asm volatile ("cpsid i");
 8003db4:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 8003db6:	4770      	bx	lr

08003db8 <CpuIrqEnable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
  __asm volatile ("cpsie i");
 8003db8:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 8003dba:	4770      	bx	lr

08003dbc <CpuInit>:
** \brief     Initializes the CPU module.
** \return    none.
**
****************************************************************************************/
void CpuInit(void)
{
 8003dbc:	b508      	push	{r3, lr}
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals.
   */
  CpuIrqDisable();
 8003dbe:	f7ff fff9 	bl	8003db4 <CpuIrqDisable>
} /*** end of CpuInit ***/
 8003dc2:	bd08      	pop	{r3, pc}

08003dc4 <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 8003dc4:	b510      	push	{r4, lr}
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 8003dc6:	f000 fa1b 	bl	8004200 <NvmVerifyChecksum>
 8003dca:	b900      	cbnz	r0, 8003dce <CpuStartUserProgram+0xa>
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
#endif
} /*** end of CpuStartUserProgram ***/
 8003dcc:	bd10      	pop	{r4, pc}
  if (CpuUserProgramStartHook() == BLT_FALSE)
 8003dce:	f7fc fbdf 	bl	8000590 <CpuUserProgramStartHook>
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	d0fa      	beq.n	8003dcc <CpuStartUserProgram+0x8>
  ComFree();
 8003dd6:	f000 fbaf 	bl	8004538 <ComFree>
  HAL_DeInit();
 8003dda:	f7fc ff7f 	bl	8000cdc <HAL_DeInit>
  TimerReset();
 8003dde:	f000 fad7 	bl	8004390 <TimerReset>
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 8003de2:	f000 fa11 	bl	8004208 <NvmGetUserProgBaseAddress>
 8003de6:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8003dea:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8003dee:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <CpuStartUserProgram+0x3c>)
 8003df0:	6098      	str	r0, [r3, #8]
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 8003df2:	f000 fa09 	bl	8004208 <NvmGetUserProgBaseAddress>
 8003df6:	6844      	ldr	r4, [r0, #4]
  CpuIrqEnable();
 8003df8:	f7ff ffde 	bl	8003db8 <CpuIrqEnable>
  pProgResetHandler();
 8003dfc:	47a0      	blx	r4
 8003dfe:	e7e5      	b.n	8003dcc <CpuStartUserProgram+0x8>
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 8003e04:	b570      	push	{r4, r5, r6, lr}
  /* set casted pointers */
  from = (blt_int8u *)src;
  to = (blt_int8u *)dest;

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 8003e06:	e008      	b.n	8003e1a <CpuMemCopy+0x16>
  {
    /* store byte value from source to destination */
    *to++ = *from++;
 8003e08:	1c4d      	adds	r5, r1, #1
 8003e0a:	1c46      	adds	r6, r0, #1
 8003e0c:	780b      	ldrb	r3, [r1, #0]
 8003e0e:	7003      	strb	r3, [r0, #0]
    /* keep the watchdog happy */
    CopService();
 8003e10:	f000 fbd4 	bl	80045bc <CopService>
    *to++ = *from++;
 8003e14:	4630      	mov	r0, r6
 8003e16:	4629      	mov	r1, r5
  while (len-- > 0)
 8003e18:	4622      	mov	r2, r4
 8003e1a:	1e53      	subs	r3, r2, #1
 8003e1c:	b29c      	uxth	r4, r3
 8003e1e:	2a00      	cmp	r2, #0
 8003e20:	d1f2      	bne.n	8003e08 <CpuMemCopy+0x4>
  }
} /*** end of CpuMemCopy ***/
 8003e22:	bd70      	pop	{r4, r5, r6, pc}

08003e24 <CpuMemSet>:
** \param     len  Number of bytes to write.
** \return    none.
**
****************************************************************************************/
void CpuMemSet(blt_addr dest, blt_int8u value, blt_int16u len)
{
 8003e24:	b570      	push	{r4, r5, r6, lr}
 8003e26:	460e      	mov	r6, r1

  /* set casted pointer */
  to = (blt_int8u *)dest;

  /* set all bytes at the destination address to the specified value */
  while (len-- > 0)
 8003e28:	e005      	b.n	8003e36 <CpuMemSet+0x12>
  {
    /* set byte value */
    *to++ = value;
 8003e2a:	1c45      	adds	r5, r0, #1
 8003e2c:	7006      	strb	r6, [r0, #0]
    /* keep the watchdog happy */
    CopService();
 8003e2e:	f000 fbc5 	bl	80045bc <CopService>
    *to++ = value;
 8003e32:	4628      	mov	r0, r5
  while (len-- > 0)
 8003e34:	4622      	mov	r2, r4
 8003e36:	1e53      	subs	r3, r2, #1
 8003e38:	b29c      	uxth	r4, r3
 8003e3a:	2a00      	cmp	r2, #0
 8003e3c:	d1f5      	bne.n	8003e2a <CpuMemSet+0x6>
  }
} /*** end of CpuMemSet ***/
 8003e3e:	bd70      	pop	{r4, r5, r6, pc}

08003e40 <FlashGetSector>:
** \param     address Address in the flash sector.
** \return    Flash sector number or FLASH_INVALID_SECTOR.
**
****************************************************************************************/
static blt_int8u FlashGetSector(blt_addr address)
{
 8003e40:	b538      	push	{r3, r4, r5, lr}
 8003e42:	4605      	mov	r5, r0
  blt_int8u result = FLASH_INVALID_SECTOR;
  blt_int8u sectorIdx;

  /* search through the sectors to find the right one */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8003e44:	2400      	movs	r4, #0
 8003e46:	e001      	b.n	8003e4c <FlashGetSector+0xc>
 8003e48:	3401      	adds	r4, #1
 8003e4a:	b2e4      	uxtb	r4, r4
 8003e4c:	2c06      	cmp	r4, #6
 8003e4e:	d815      	bhi.n	8003e7c <FlashGetSector+0x3c>
  {
    /* keep the watchdog happy */
    CopService();
 8003e50:	f000 fbb4 	bl	80045bc <CopService>
    /* is the address in this sector? */
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8003e54:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003e58:	0093      	lsls	r3, r2, #2
 8003e5a:	4a09      	ldr	r2, [pc, #36]	; (8003e80 <FlashGetSector+0x40>)
 8003e5c:	58d3      	ldr	r3, [r2, r3]
 8003e5e:	42ab      	cmp	r3, r5
 8003e60:	d8f2      	bhi.n	8003e48 <FlashGetSector+0x8>
        (address < (flashLayout[sectorIdx].sector_start + \
                    flashLayout[sectorIdx].sector_size)))
 8003e62:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003e66:	0091      	lsls	r1, r2, #2
 8003e68:	4a05      	ldr	r2, [pc, #20]	; (8003e80 <FlashGetSector+0x40>)
 8003e6a:	440a      	add	r2, r1
 8003e6c:	6852      	ldr	r2, [r2, #4]
        (address < (flashLayout[sectorIdx].sector_start + \
 8003e6e:	4413      	add	r3, r2
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8003e70:	42ab      	cmp	r3, r5
 8003e72:	d9e9      	bls.n	8003e48 <FlashGetSector+0x8>
    {
      /* found the sector we are looking for so store it */
      result = flashLayout[sectorIdx].sector_num;
 8003e74:	4b02      	ldr	r3, [pc, #8]	; (8003e80 <FlashGetSector+0x40>)
 8003e76:	440b      	add	r3, r1
 8003e78:	7a18      	ldrb	r0, [r3, #8]
      /* all done so no need to continue looping */
      break;
 8003e7a:	e000      	b.n	8003e7e <FlashGetSector+0x3e>
  blt_int8u result = FLASH_INVALID_SECTOR;
 8003e7c:	20ff      	movs	r0, #255	; 0xff
    }
  }
  /* give the result back to the caller */
  return result;
} /*** end of FlashGetSector ***/
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
 8003e80:	08015630 	.word	0x08015630

08003e84 <FlashInitBlock>:
{
 8003e84:	b508      	push	{r3, lr}
  if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
 8003e86:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8003e8a:	b953      	cbnz	r3, 8003ea2 <FlashInitBlock+0x1e>
  if (block->base_addr == address)
 8003e8c:	6803      	ldr	r3, [r0, #0]
 8003e8e:	428b      	cmp	r3, r1
 8003e90:	d009      	beq.n	8003ea6 <FlashInitBlock+0x22>
  block->base_addr = address;
 8003e92:	f840 1b04 	str.w	r1, [r0], #4
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 8003e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e9a:	f7ff ffb3 	bl	8003e04 <CpuMemCopy>
  return BLT_TRUE;
 8003e9e:	2001      	movs	r0, #1
 8003ea0:	e000      	b.n	8003ea4 <FlashInitBlock+0x20>
    return BLT_FALSE;
 8003ea2:	2000      	movs	r0, #0
} /*** end of FlashInitBlock ***/
 8003ea4:	bd08      	pop	{r3, pc}
    return BLT_TRUE;
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	e7fc      	b.n	8003ea4 <FlashInitBlock+0x20>

08003eaa <FlashWriteBlock>:
{
 8003eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eae:	4607      	mov	r7, r0
  HAL_FLASH_Unlock();
 8003eb0:	f7fd fd84 	bl	80019bc <HAL_FLASH_Unlock>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8003eb4:	2400      	movs	r4, #0
 8003eb6:	2c7f      	cmp	r4, #127	; 0x7f
 8003eb8:	d814      	bhi.n	8003ee4 <FlashWriteBlock+0x3a>
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 8003eba:	683e      	ldr	r6, [r7, #0]
 8003ebc:	00a3      	lsls	r3, r4, #2
 8003ebe:	eb06 0803 	add.w	r8, r6, r3
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 8003ec2:	443b      	add	r3, r7
 8003ec4:	685d      	ldr	r5, [r3, #4]
    CopService();
 8003ec6:	f000 fb79 	bl	80045bc <CopService>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 8003eca:	462a      	mov	r2, r5
 8003ecc:	2300      	movs	r3, #0
 8003ece:	4641      	mov	r1, r8
 8003ed0:	2002      	movs	r0, #2
 8003ed2:	f7fd fdc7 	bl	8001a64 <HAL_FLASH_Program>
 8003ed6:	b938      	cbnz	r0, 8003ee8 <FlashWriteBlock+0x3e>
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 8003ed8:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8003edc:	42ab      	cmp	r3, r5
 8003ede:	d109      	bne.n	8003ef4 <FlashWriteBlock+0x4a>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8003ee0:	3401      	adds	r4, #1
 8003ee2:	e7e8      	b.n	8003eb6 <FlashWriteBlock+0xc>
  blt_bool   result = BLT_TRUE;
 8003ee4:	2401      	movs	r4, #1
 8003ee6:	e000      	b.n	8003eea <FlashWriteBlock+0x40>
      result = BLT_FALSE;
 8003ee8:	2400      	movs	r4, #0
  HAL_FLASH_Lock();
 8003eea:	f7fd fd7f 	bl	80019ec <HAL_FLASH_Lock>
} /*** end of FlashWriteBlock ***/
 8003eee:	4620      	mov	r0, r4
 8003ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      result = BLT_FALSE;
 8003ef4:	2400      	movs	r4, #0
 8003ef6:	e7f8      	b.n	8003eea <FlashWriteBlock+0x40>

08003ef8 <FlashSwitchBlock>:
{
 8003ef8:	b538      	push	{r3, r4, r5, lr}
 8003efa:	460d      	mov	r5, r1
  if (block == &bootBlockInfo)
 8003efc:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <FlashSwitchBlock+0x38>)
 8003efe:	4298      	cmp	r0, r3
 8003f00:	d011      	beq.n	8003f26 <FlashSwitchBlock+0x2e>
 8003f02:	4604      	mov	r4, r0
  else if (base_addr == flashLayout[0].sector_start)
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <FlashSwitchBlock+0x3c>)
 8003f06:	4299      	cmp	r1, r3
 8003f08:	d107      	bne.n	8003f1a <FlashSwitchBlock+0x22>
    block = &bootBlockInfo;
 8003f0a:	4c09      	ldr	r4, [pc, #36]	; (8003f30 <FlashSwitchBlock+0x38>)
  if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 8003f0c:	4629      	mov	r1, r5
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f7ff ffb8 	bl	8003e84 <FlashInitBlock>
 8003f14:	b148      	cbz	r0, 8003f2a <FlashSwitchBlock+0x32>
} /*** end of FlashSwitchBlock ***/
 8003f16:	4620      	mov	r0, r4
 8003f18:	bd38      	pop	{r3, r4, r5, pc}
    if (FlashWriteBlock(block) == BLT_FALSE)
 8003f1a:	f7ff ffc6 	bl	8003eaa <FlashWriteBlock>
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	d1f4      	bne.n	8003f0c <FlashSwitchBlock+0x14>
      return BLT_NULL;
 8003f22:	2400      	movs	r4, #0
 8003f24:	e7f7      	b.n	8003f16 <FlashSwitchBlock+0x1e>
    block = &blockInfo;
 8003f26:	4c04      	ldr	r4, [pc, #16]	; (8003f38 <FlashSwitchBlock+0x40>)
 8003f28:	e7f0      	b.n	8003f0c <FlashSwitchBlock+0x14>
    return BLT_NULL;
 8003f2a:	2400      	movs	r4, #0
 8003f2c:	e7f3      	b.n	8003f16 <FlashSwitchBlock+0x1e>
 8003f2e:	bf00      	nop
 8003f30:	2000064c 	.word	0x2000064c
 8003f34:	08020000 	.word	0x08020000
 8003f38:	20000448 	.word	0x20000448

08003f3c <FlashAddToBlock>:
{
 8003f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f40:	4606      	mov	r6, r0
 8003f42:	460c      	mov	r4, r1
 8003f44:	4617      	mov	r7, r2
 8003f46:	461d      	mov	r5, r3
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8003f48:	f421 78ff 	bic.w	r8, r1, #510	; 0x1fe
 8003f4c:	f028 0801 	bic.w	r8, r8, #1
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 8003f50:	6803      	ldr	r3, [r0, #0]
 8003f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f56:	d007      	beq.n	8003f68 <FlashAddToBlock+0x2c>
  if (block->base_addr != current_base_addr)
 8003f58:	6833      	ldr	r3, [r6, #0]
 8003f5a:	4543      	cmp	r3, r8
 8003f5c:	d10b      	bne.n	8003f76 <FlashAddToBlock+0x3a>
  dst = &(block->data[address - block->base_addr]);
 8003f5e:	6833      	ldr	r3, [r6, #0]
 8003f60:	1ae4      	subs	r4, r4, r3
 8003f62:	4434      	add	r4, r6
 8003f64:	3404      	adds	r4, #4
 8003f66:	e015      	b.n	8003f94 <FlashAddToBlock+0x58>
    if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 8003f68:	4641      	mov	r1, r8
 8003f6a:	f7ff ff8b 	bl	8003e84 <FlashInitBlock>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2800      	cmp	r0, #0
 8003f72:	d1f1      	bne.n	8003f58 <FlashAddToBlock+0x1c>
 8003f74:	e01f      	b.n	8003fb6 <FlashAddToBlock+0x7a>
    block = FlashSwitchBlock(block, current_base_addr);
 8003f76:	4641      	mov	r1, r8
 8003f78:	4630      	mov	r0, r6
 8003f7a:	f7ff ffbd 	bl	8003ef8 <FlashSwitchBlock>
    if (block == BLT_NULL)
 8003f7e:	4606      	mov	r6, r0
 8003f80:	2800      	cmp	r0, #0
 8003f82:	d1ec      	bne.n	8003f5e <FlashAddToBlock+0x22>
      return BLT_FALSE;
 8003f84:	2300      	movs	r3, #0
 8003f86:	e016      	b.n	8003fb6 <FlashAddToBlock+0x7a>
    *dst = *src;
 8003f88:	f817 3b01 	ldrb.w	r3, [r7], #1
 8003f8c:	f804 3b01 	strb.w	r3, [r4], #1
  while (len > 0);
 8003f90:	3d01      	subs	r5, #1
 8003f92:	d00f      	beq.n	8003fb4 <FlashAddToBlock+0x78>
    CopService();
 8003f94:	f000 fb12 	bl	80045bc <CopService>
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 8003f98:	1d33      	adds	r3, r6, #4
 8003f9a:	1ae3      	subs	r3, r4, r3
 8003f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa0:	d3f2      	bcc.n	8003f88 <FlashAddToBlock+0x4c>
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 8003fa2:	f508 7100 	add.w	r1, r8, #512	; 0x200
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	f7ff ffa6 	bl	8003ef8 <FlashSwitchBlock>
      if (block == BLT_NULL)
 8003fac:	4606      	mov	r6, r0
 8003fae:	b128      	cbz	r0, 8003fbc <FlashAddToBlock+0x80>
      dst = &(block->data[0]);
 8003fb0:	1d04      	adds	r4, r0, #4
 8003fb2:	e7e9      	b.n	8003f88 <FlashAddToBlock+0x4c>
  return BLT_TRUE;
 8003fb4:	2301      	movs	r3, #1
} /*** end of FlashAddToBlock ***/
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLT_FALSE;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	e7fa      	b.n	8003fb6 <FlashAddToBlock+0x7a>

08003fc0 <FlashEraseSectors>:
{
 8003fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc4:	b086      	sub	sp, #24
 8003fc6:	4605      	mov	r5, r0
 8003fc8:	4688      	mov	r8, r1
  blt_int32u eraseSectorError = 0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	9300      	str	r3, [sp, #0]
  if (first_sector > last_sector)
 8003fce:	4288      	cmp	r0, r1
 8003fd0:	d811      	bhi.n	8003ff6 <FlashEraseSectors+0x36>
  blt_bool result = BLT_TRUE;
 8003fd2:	2601      	movs	r6, #1
  if ((first_sector < flashLayout[0].sector_num) || \
 8003fd4:	2d04      	cmp	r5, #4
 8003fd6:	d928      	bls.n	800402a <FlashEraseSectors+0x6a>
 8003fd8:	f1b8 0f0b 	cmp.w	r8, #11
 8003fdc:	d82a      	bhi.n	8004034 <FlashEraseSectors+0x74>
  if (result == BLT_TRUE)
 8003fde:	2e01      	cmp	r6, #1
 8003fe0:	d124      	bne.n	800402c <FlashEraseSectors+0x6c>
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	9301      	str	r3, [sp, #4]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	9305      	str	r3, [sp, #20]
    eraseInitStruct.NbSectors = 1;
 8003fea:	2301      	movs	r3, #1
 8003fec:	9304      	str	r3, [sp, #16]
    HAL_FLASH_Unlock();
 8003fee:	f7fd fce5 	bl	80019bc <HAL_FLASH_Unlock>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8003ff2:	4637      	mov	r7, r6
 8003ff4:	e004      	b.n	8004000 <FlashEraseSectors+0x40>
    result = BLT_FALSE;
 8003ff6:	2600      	movs	r6, #0
 8003ff8:	e7ec      	b.n	8003fd4 <FlashEraseSectors+0x14>
	      result = BLT_TRUE;
 8003ffa:	4637      	mov	r7, r6
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8003ffc:	3501      	adds	r5, #1
 8003ffe:	b2ed      	uxtb	r5, r5
 8004000:	4545      	cmp	r5, r8
 8004002:	d80e      	bhi.n	8004022 <FlashEraseSectors+0x62>
      CopService();
 8004004:	f000 fada 	bl	80045bc <CopService>
      eraseInitStruct.Sector = sectorIdx;
 8004008:	9503      	str	r5, [sp, #12]
      for (int i = 0; i < 8; i++)
 800400a:	2400      	movs	r4, #0
 800400c:	2c07      	cmp	r4, #7
 800400e:	dcf5      	bgt.n	8003ffc <FlashEraseSectors+0x3c>
	    if(HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&eraseSectorError) != HAL_OK)
 8004010:	4669      	mov	r1, sp
 8004012:	a801      	add	r0, sp, #4
 8004014:	f7fd fdd4 	bl	8001bc0 <HAL_FLASHEx_Erase>
 8004018:	2800      	cmp	r0, #0
 800401a:	d0ee      	beq.n	8003ffa <FlashEraseSectors+0x3a>
      for (int i = 0; i < 8; i++)
 800401c:	3401      	adds	r4, #1
		  result = BLT_FALSE;
 800401e:	2700      	movs	r7, #0
 8004020:	e7f4      	b.n	800400c <FlashEraseSectors+0x4c>
    HAL_FLASH_Lock();
 8004022:	f7fd fce3 	bl	80019ec <HAL_FLASH_Lock>
 8004026:	463e      	mov	r6, r7
 8004028:	e000      	b.n	800402c <FlashEraseSectors+0x6c>
 800402a:	2600      	movs	r6, #0
} /*** end of FlashEraseSectors ***/
 800402c:	4630      	mov	r0, r6
 800402e:	b006      	add	sp, #24
 8004030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004034:	2600      	movs	r6, #0
 8004036:	e7f9      	b.n	800402c <FlashEraseSectors+0x6c>

08004038 <FlashInit>:
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8004038:	f04f 33ff 	mov.w	r3, #4294967295
 800403c:	4a02      	ldr	r2, [pc, #8]	; (8004048 <FlashInit+0x10>)
 800403e:	6013      	str	r3, [r2, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8004040:	4a02      	ldr	r2, [pc, #8]	; (800404c <FlashInit+0x14>)
 8004042:	6013      	str	r3, [r2, #0]
} /*** end of FlashInit ***/
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20000448 	.word	0x20000448
 800404c:	2000064c 	.word	0x2000064c

08004050 <FlashWrite>:
{
 8004050:	b570      	push	{r4, r5, r6, lr}
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8004052:	1e4b      	subs	r3, r1, #1
 8004054:	4c15      	ldr	r4, [pc, #84]	; (80040ac <FlashWrite+0x5c>)
 8004056:	1a24      	subs	r4, r4, r0
 8004058:	42a3      	cmp	r3, r4
 800405a:	d901      	bls.n	8004060 <FlashWrite+0x10>
    return BLT_FALSE;
 800405c:	2000      	movs	r0, #0
} /*** end of FlashWrite ***/
 800405e:	bd70      	pop	{r4, r5, r6, pc}
 8004060:	4616      	mov	r6, r2
 8004062:	460d      	mov	r5, r1
 8004064:	4604      	mov	r4, r0
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8004066:	f7ff feeb 	bl	8003e40 <FlashGetSector>
 800406a:	28ff      	cmp	r0, #255	; 0xff
 800406c:	d01a      	beq.n	80040a4 <FlashWrite+0x54>
      (FlashGetSector(addr+len-1) == FLASH_INVALID_SECTOR))
 800406e:	1928      	adds	r0, r5, r4
 8004070:	3801      	subs	r0, #1
 8004072:	f7ff fee5 	bl	8003e40 <FlashGetSector>
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 8004076:	28ff      	cmp	r0, #255	; 0xff
 8004078:	d016      	beq.n	80040a8 <FlashWrite+0x58>
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 800407a:	f424 73ff 	bic.w	r3, r4, #510	; 0x1fe
 800407e:	f023 0301 	bic.w	r3, r3, #1
  if (base_addr == flashLayout[0].sector_start)
 8004082:	4a0b      	ldr	r2, [pc, #44]	; (80040b0 <FlashWrite+0x60>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d006      	beq.n	8004096 <FlashWrite+0x46>
  return FlashAddToBlock(&blockInfo, addr, data, len);
 8004088:	462b      	mov	r3, r5
 800408a:	4632      	mov	r2, r6
 800408c:	4621      	mov	r1, r4
 800408e:	4809      	ldr	r0, [pc, #36]	; (80040b4 <FlashWrite+0x64>)
 8004090:	f7ff ff54 	bl	8003f3c <FlashAddToBlock>
 8004094:	e7e3      	b.n	800405e <FlashWrite+0xe>
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 8004096:	462b      	mov	r3, r5
 8004098:	4632      	mov	r2, r6
 800409a:	4621      	mov	r1, r4
 800409c:	4806      	ldr	r0, [pc, #24]	; (80040b8 <FlashWrite+0x68>)
 800409e:	f7ff ff4d 	bl	8003f3c <FlashAddToBlock>
 80040a2:	e7dc      	b.n	800405e <FlashWrite+0xe>
    return BLT_FALSE;
 80040a4:	2000      	movs	r0, #0
 80040a6:	e7da      	b.n	800405e <FlashWrite+0xe>
 80040a8:	2000      	movs	r0, #0
 80040aa:	e7d8      	b.n	800405e <FlashWrite+0xe>
 80040ac:	080fffff 	.word	0x080fffff
 80040b0:	08020000 	.word	0x08020000
 80040b4:	20000448 	.word	0x20000448
 80040b8:	2000064c 	.word	0x2000064c

080040bc <FlashErase>:
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 80040bc:	1e4a      	subs	r2, r1, #1
 80040be:	4b0e      	ldr	r3, [pc, #56]	; (80040f8 <FlashErase+0x3c>)
 80040c0:	1a1b      	subs	r3, r3, r0
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d901      	bls.n	80040ca <FlashErase+0xe>
    return BLT_FALSE;
 80040c6:	2000      	movs	r0, #0
} /*** end of FlashErase ***/
 80040c8:	4770      	bx	lr
{
 80040ca:	b570      	push	{r4, r5, r6, lr}
 80040cc:	460c      	mov	r4, r1
 80040ce:	4605      	mov	r5, r0
  first_sector = FlashGetSector(addr);
 80040d0:	f7ff feb6 	bl	8003e40 <FlashGetSector>
 80040d4:	4606      	mov	r6, r0
  last_sector  = FlashGetSector(addr+len-1);
 80040d6:	1960      	adds	r0, r4, r5
 80040d8:	3801      	subs	r0, #1
 80040da:	f7ff feb1 	bl	8003e40 <FlashGetSector>
  if ((first_sector == FLASH_INVALID_SECTOR) || (last_sector == FLASH_INVALID_SECTOR))
 80040de:	2eff      	cmp	r6, #255	; 0xff
 80040e0:	d006      	beq.n	80040f0 <FlashErase+0x34>
 80040e2:	28ff      	cmp	r0, #255	; 0xff
 80040e4:	d006      	beq.n	80040f4 <FlashErase+0x38>
  return FlashEraseSectors(first_sector, last_sector);
 80040e6:	4601      	mov	r1, r0
 80040e8:	4630      	mov	r0, r6
 80040ea:	f7ff ff69 	bl	8003fc0 <FlashEraseSectors>
} /*** end of FlashErase ***/
 80040ee:	bd70      	pop	{r4, r5, r6, pc}
    return BLT_FALSE;
 80040f0:	2000      	movs	r0, #0
 80040f2:	e7fc      	b.n	80040ee <FlashErase+0x32>
 80040f4:	2000      	movs	r0, #0
 80040f6:	e7fa      	b.n	80040ee <FlashErase+0x32>
 80040f8:	080fffff 	.word	0x080fffff

080040fc <FlashWriteChecksum>:
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 80040fc:	4b10      	ldr	r3, [pc, #64]	; (8004140 <FlashWriteChecksum+0x44>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004104:	d01a      	beq.n	800413c <FlashWriteChecksum+0x40>
{
 8004106:	b500      	push	{lr}
 8004108:	b083      	sub	sp, #12
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 800410a:	4a0d      	ldr	r2, [pc, #52]	; (8004140 <FlashWriteChecksum+0x44>)
 800410c:	6853      	ldr	r3, [r2, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 800410e:	6891      	ldr	r1, [r2, #8]
 8004110:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 8004112:	68d1      	ldr	r1, [r2, #12]
 8004114:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 8004116:	6911      	ldr	r1, [r2, #16]
 8004118:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 800411a:	6951      	ldr	r1, [r2, #20]
 800411c:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 800411e:	6991      	ldr	r1, [r2, #24]
 8004120:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 8004122:	69d2      	ldr	r2, [r2, #28]
 8004124:	4413      	add	r3, r2
  signature_checksum += 1; /* two's complement */
 8004126:	425b      	negs	r3, r3
 8004128:	aa02      	add	r2, sp, #8
 800412a:	f842 3d04 	str.w	r3, [r2, #-4]!
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 800412e:	2104      	movs	r1, #4
 8004130:	4804      	ldr	r0, [pc, #16]	; (8004144 <FlashWriteChecksum+0x48>)
 8004132:	f7ff ff8d 	bl	8004050 <FlashWrite>
} /*** end of FlashWriteChecksum ***/
 8004136:	b003      	add	sp, #12
 8004138:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLT_TRUE;
 800413c:	2001      	movs	r0, #1
} /*** end of FlashWriteChecksum ***/
 800413e:	4770      	bx	lr
 8004140:	2000064c 	.word	0x2000064c
 8004144:	08020188 	.word	0x08020188

08004148 <FlashVerifyChecksum>:
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 8004148:	4b0d      	ldr	r3, [pc, #52]	; (8004180 <FlashVerifyChecksum+0x38>)
 800414a:	681b      	ldr	r3, [r3, #0]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 800414c:	4a0d      	ldr	r2, [pc, #52]	; (8004184 <FlashVerifyChecksum+0x3c>)
 800414e:	6812      	ldr	r2, [r2, #0]
 8004150:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 8004152:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <FlashVerifyChecksum+0x40>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 8004158:	4a0c      	ldr	r2, [pc, #48]	; (800418c <FlashVerifyChecksum+0x44>)
 800415a:	6812      	ldr	r2, [r2, #0]
 800415c:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 800415e:	4a0c      	ldr	r2, [pc, #48]	; (8004190 <FlashVerifyChecksum+0x48>)
 8004160:	6812      	ldr	r2, [r2, #0]
 8004162:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 8004164:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <FlashVerifyChecksum+0x4c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 800416a:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <FlashVerifyChecksum+0x50>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 8004170:	4a0a      	ldr	r2, [pc, #40]	; (800419c <FlashVerifyChecksum+0x54>)
 8004172:	6812      	ldr	r2, [r2, #0]
  if (signature_checksum == 0)
 8004174:	42da      	cmn	r2, r3
 8004176:	d001      	beq.n	800417c <FlashVerifyChecksum+0x34>
  return BLT_FALSE;
 8004178:	2000      	movs	r0, #0
} /*** end of FlashVerifyChecksum ***/
 800417a:	4770      	bx	lr
    return BLT_TRUE;
 800417c:	2001      	movs	r0, #1
 800417e:	4770      	bx	lr
 8004180:	08020000 	.word	0x08020000
 8004184:	08020004 	.word	0x08020004
 8004188:	08020008 	.word	0x08020008
 800418c:	0802000c 	.word	0x0802000c
 8004190:	08020010 	.word	0x08020010
 8004194:	08020014 	.word	0x08020014
 8004198:	08020018 	.word	0x08020018
 800419c:	08020188 	.word	0x08020188

080041a0 <FlashDone>:
{
 80041a0:	b508      	push	{r3, lr}
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 80041a2:	4b0d      	ldr	r3, [pc, #52]	; (80041d8 <FlashDone+0x38>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041aa:	d10b      	bne.n	80041c4 <FlashDone+0x24>
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 80041ac:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <FlashDone+0x3c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b4:	d00d      	beq.n	80041d2 <FlashDone+0x32>
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 80041b6:	4809      	ldr	r0, [pc, #36]	; (80041dc <FlashDone+0x3c>)
 80041b8:	f7ff fe77 	bl	8003eaa <FlashWriteBlock>
 80041bc:	4603      	mov	r3, r0
 80041be:	b148      	cbz	r0, 80041d4 <FlashDone+0x34>
  return BLT_TRUE;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e007      	b.n	80041d4 <FlashDone+0x34>
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 80041c4:	4804      	ldr	r0, [pc, #16]	; (80041d8 <FlashDone+0x38>)
 80041c6:	f7ff fe70 	bl	8003eaa <FlashWriteBlock>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2800      	cmp	r0, #0
 80041ce:	d1ed      	bne.n	80041ac <FlashDone+0xc>
 80041d0:	e000      	b.n	80041d4 <FlashDone+0x34>
  return BLT_TRUE;
 80041d2:	2301      	movs	r3, #1
} /*** end of FlashDone ***/
 80041d4:	4618      	mov	r0, r3
 80041d6:	bd08      	pop	{r3, pc}
 80041d8:	2000064c 	.word	0x2000064c
 80041dc:	20000448 	.word	0x20000448

080041e0 <FlashGetUserProgBaseAddress>:
} /*** end of FlashGetUserProgBaseAddress ***/
 80041e0:	4800      	ldr	r0, [pc, #0]	; (80041e4 <FlashGetUserProgBaseAddress+0x4>)
 80041e2:	4770      	bx	lr
 80041e4:	08020000 	.word	0x08020000

080041e8 <NvmInit>:
** \brief     Initializes the NVM driver.
** \return    none.
**
****************************************************************************************/
void NvmInit(void)
{
 80041e8:	b508      	push	{r3, lr}
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 80041ea:	f7ff ff25 	bl	8004038 <FlashInit>
} /*** end of NvmInit ***/
 80041ee:	bd08      	pop	{r3, pc}

080041f0 <NvmWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 80041f0:	b508      	push	{r3, lr}
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 80041f2:	f7ff ff2d 	bl	8004050 <FlashWrite>
} /*** end of NvmWrite ***/
 80041f6:	bd08      	pop	{r3, pc}

080041f8 <NvmErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmErase(blt_addr addr, blt_int32u len)
{
 80041f8:	b508      	push	{r3, lr}
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 80041fa:	f7ff ff5f 	bl	80040bc <FlashErase>
} /*** end of NvmErase ***/
 80041fe:	bd08      	pop	{r3, pc}

08004200 <NvmVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmVerifyChecksum(void)
{
 8004200:	b508      	push	{r3, lr}
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 8004202:	f7ff ffa1 	bl	8004148 <FlashVerifyChecksum>
#endif
} /*** end of NvmVerifyChecksum ***/
 8004206:	bd08      	pop	{r3, pc}

08004208 <NvmGetUserProgBaseAddress>:
**            program. This is typically that start of the vector table.
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
 8004208:	b508      	push	{r3, lr}
  return FlashGetUserProgBaseAddress();
 800420a:	f7ff ffe9 	bl	80041e0 <FlashGetUserProgBaseAddress>
} /*** end of NvmGetUserProgBaseAddress ***/
 800420e:	bd08      	pop	{r3, pc}

08004210 <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 8004210:	b508      	push	{r3, lr}
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 8004212:	f7ff ff73 	bl	80040fc <FlashWriteChecksum>
 8004216:	4603      	mov	r3, r0
 8004218:	b908      	cbnz	r0, 800421e <NvmDone+0xe>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
} /*** end of NvmDone ***/
 800421a:	4618      	mov	r0, r3
 800421c:	bd08      	pop	{r3, pc}
  return FlashDone();
 800421e:	f7ff ffbf 	bl	80041a0 <FlashDone>
 8004222:	4603      	mov	r3, r0
 8004224:	e7f9      	b.n	800421a <NvmDone+0xa>
	...

08004228 <Rs232ReceiveByte>:
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <Rs232ReceiveByte+0x18>)
 800422a:	681b      	ldr	r3, [r3, #0]
** \return    BLT_TRUE if a byte was received, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool Rs232ReceiveByte(blt_int8u *data)
{
  if (LL_USART_IsActiveFlag_RXNE(USART_CHANNEL) != 0)
 800422c:	f013 0f20 	tst.w	r3, #32
 8004230:	d004      	beq.n	800423c <Rs232ReceiveByte+0x14>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004232:	4b03      	ldr	r3, [pc, #12]	; (8004240 <Rs232ReceiveByte+0x18>)
 8004234:	685b      	ldr	r3, [r3, #4]
  {
    /* retrieve and store the newly received byte */
    *data = LL_USART_ReceiveData8(USART_CHANNEL);
 8004236:	7003      	strb	r3, [r0, #0]
    /* all done */
    return BLT_TRUE;
 8004238:	2001      	movs	r0, #1
 800423a:	4770      	bx	lr
  }
  /* still here to no new byte received */
  return BLT_FALSE;
 800423c:	2000      	movs	r0, #0
} /*** end of Rs232ReceiveByte ***/
 800423e:	4770      	bx	lr
 8004240:	40011400 	.word	0x40011400

08004244 <Rs232Init>:
{
 8004244:	b510      	push	{r4, lr}
 8004246:	b088      	sub	sp, #32
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8004248:	4c0c      	ldr	r4, [pc, #48]	; (800427c <Rs232Init+0x38>)
 800424a:	68e3      	ldr	r3, [r4, #12]
 800424c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004250:	60e3      	str	r3, [r4, #12]
  USART_InitStruct.BaudRate = BOOT_COM_RS232_BAUDRATE;
 8004252:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004256:	9301      	str	r3, [sp, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004258:	2300      	movs	r3, #0
 800425a:	9302      	str	r3, [sp, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800425c:	9303      	str	r3, [sp, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800425e:	9304      	str	r3, [sp, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004260:	220c      	movs	r2, #12
 8004262:	9205      	str	r2, [sp, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004264:	9306      	str	r3, [sp, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004266:	9307      	str	r3, [sp, #28]
  LL_USART_Init(USART_CHANNEL, &USART_InitStruct);
 8004268:	a901      	add	r1, sp, #4
 800426a:	4620      	mov	r0, r4
 800426c:	f7ff f928 	bl	80034c0 <LL_USART_Init>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004270:	68e3      	ldr	r3, [r4, #12]
 8004272:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004276:	60e3      	str	r3, [r4, #12]
} /*** end of Rs232Init ***/
 8004278:	b008      	add	sp, #32
 800427a:	bd10      	pop	{r4, pc}
 800427c:	40011400 	.word	0x40011400

08004280 <Rs232ReceivePacket>:
{
 8004280:	b570      	push	{r4, r5, r6, lr}
  if (xcpCtoRxInProgress == BLT_FALSE)
 8004282:	4b25      	ldr	r3, [pc, #148]	; (8004318 <Rs232ReceivePacket+0x98>)
 8004284:	781c      	ldrb	r4, [r3, #0]
 8004286:	b9bc      	cbnz	r4, 80042b8 <Rs232ReceivePacket+0x38>
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == BLT_TRUE)
 8004288:	4824      	ldr	r0, [pc, #144]	; (800431c <Rs232ReceivePacket+0x9c>)
 800428a:	f7ff ffcd 	bl	8004228 <Rs232ReceiveByte>
 800428e:	2801      	cmp	r0, #1
 8004290:	d001      	beq.n	8004296 <Rs232ReceivePacket+0x16>
} /*** end of Rs232ReceivePacket ***/
 8004292:	4620      	mov	r0, r4
 8004294:	bd70      	pop	{r4, r5, r6, pc}
      if ( (xcpCtoReqPacket[0] > 0) &&
 8004296:	4b21      	ldr	r3, [pc, #132]	; (800431c <Rs232ReceivePacket+0x9c>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	3b01      	subs	r3, #1
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b3f      	cmp	r3, #63	; 0x3f
 80042a0:	d8f7      	bhi.n	8004292 <Rs232ReceivePacket+0x12>
        xcpCtoRxStartTime = TimerGet();
 80042a2:	f000 f89f 	bl	80043e4 <TimerGet>
 80042a6:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <Rs232ReceivePacket+0xa0>)
 80042a8:	6018      	str	r0, [r3, #0]
        xcpCtoRxLength = 0;
 80042aa:	4b1e      	ldr	r3, [pc, #120]	; (8004324 <Rs232ReceivePacket+0xa4>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	701a      	strb	r2, [r3, #0]
        xcpCtoRxInProgress = BLT_TRUE;
 80042b0:	4b19      	ldr	r3, [pc, #100]	; (8004318 <Rs232ReceivePacket+0x98>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	701a      	strb	r2, [r3, #0]
 80042b6:	e7ec      	b.n	8004292 <Rs232ReceivePacket+0x12>
 80042b8:	4606      	mov	r6, r0
 80042ba:	460d      	mov	r5, r1
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 80042bc:	4b19      	ldr	r3, [pc, #100]	; (8004324 <Rs232ReceivePacket+0xa4>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	3301      	adds	r3, #1
 80042c2:	4816      	ldr	r0, [pc, #88]	; (800431c <Rs232ReceivePacket+0x9c>)
 80042c4:	4418      	add	r0, r3
 80042c6:	f7ff ffaf 	bl	8004228 <Rs232ReceiveByte>
 80042ca:	4604      	mov	r4, r0
 80042cc:	2801      	cmp	r0, #1
 80042ce:	d115      	bne.n	80042fc <Rs232ReceivePacket+0x7c>
      xcpCtoRxLength++;
 80042d0:	4b14      	ldr	r3, [pc, #80]	; (8004324 <Rs232ReceivePacket+0xa4>)
 80042d2:	781a      	ldrb	r2, [r3, #0]
 80042d4:	3201      	adds	r2, #1
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 80042da:	4b10      	ldr	r3, [pc, #64]	; (800431c <Rs232ReceivePacket+0x9c>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d001      	beq.n	80042e6 <Rs232ReceivePacket+0x66>
  return BLT_FALSE;
 80042e2:	2400      	movs	r4, #0
 80042e4:	e7d5      	b.n	8004292 <Rs232ReceivePacket+0x12>
        CpuMemCopy((blt_int32u)data, (blt_int32u)&xcpCtoReqPacket[1], xcpCtoRxLength);
 80042e6:	4910      	ldr	r1, [pc, #64]	; (8004328 <Rs232ReceivePacket+0xa8>)
 80042e8:	4630      	mov	r0, r6
 80042ea:	f7ff fd8b 	bl	8003e04 <CpuMemCopy>
        xcpCtoRxInProgress = BLT_FALSE;
 80042ee:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <Rs232ReceivePacket+0x98>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	701a      	strb	r2, [r3, #0]
        *len = xcpCtoRxLength;
 80042f4:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <Rs232ReceivePacket+0xa4>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	702b      	strb	r3, [r5, #0]
        return BLT_TRUE;
 80042fa:	e7ca      	b.n	8004292 <Rs232ReceivePacket+0x12>
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 80042fc:	f000 f872 	bl	80043e4 <TimerGet>
 8004300:	4b07      	ldr	r3, [pc, #28]	; (8004320 <Rs232ReceivePacket+0xa0>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3364      	adds	r3, #100	; 0x64
 8004306:	4298      	cmp	r0, r3
 8004308:	d903      	bls.n	8004312 <Rs232ReceivePacket+0x92>
        xcpCtoRxInProgress = BLT_FALSE;
 800430a:	2400      	movs	r4, #0
 800430c:	4b02      	ldr	r3, [pc, #8]	; (8004318 <Rs232ReceivePacket+0x98>)
 800430e:	701c      	strb	r4, [r3, #0]
 8004310:	e7bf      	b.n	8004292 <Rs232ReceivePacket+0x12>
  return BLT_FALSE;
 8004312:	2400      	movs	r4, #0
 8004314:	e7bd      	b.n	8004292 <Rs232ReceivePacket+0x12>
 8004316:	bf00      	nop
 8004318:	20000891 	.word	0x20000891
 800431c:	20000850 	.word	0x20000850
 8004320:	20000894 	.word	0x20000894
 8004324:	20000892 	.word	0x20000892
 8004328:	20000851 	.word	0x20000851

0800432c <Rs232TransmitByte>:
** \param     data Value of byte that is to be transmitted.
** \return    none.
**
****************************************************************************************/
void Rs232TransmitByte(blt_int8u data)
{
 800432c:	b510      	push	{r4, lr}
  USARTx->DR = Value;
 800432e:	4b09      	ldr	r3, [pc, #36]	; (8004354 <Rs232TransmitByte+0x28>)
 8004330:	6058      	str	r0, [r3, #4]
  blt_int32u timeout;

  /* write byte to transmit holding register */
  LL_USART_TransmitData8(USART_CHANNEL, data);
  /* set timeout time to wait for transmit completion. */
  timeout = TimerGet() + RS232_BYTE_TX_TIMEOUT_MS;
 8004332:	f000 f857 	bl	80043e4 <TimerGet>
 8004336:	f100 040a 	add.w	r4, r0, #10
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800433a:	4b06      	ldr	r3, [pc, #24]	; (8004354 <Rs232TransmitByte+0x28>)
 800433c:	681b      	ldr	r3, [r3, #0]
  /* wait for tx holding register to be empty */
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 800433e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004342:	d105      	bne.n	8004350 <Rs232TransmitByte+0x24>
  {
    /* keep the watchdog happy */
    CopService();
 8004344:	f000 f93a 	bl	80045bc <CopService>
    /* break loop upon timeout. this would indicate a hardware failure. */
    if (TimerGet() > timeout)
 8004348:	f000 f84c 	bl	80043e4 <TimerGet>
 800434c:	42a0      	cmp	r0, r4
 800434e:	d9f4      	bls.n	800433a <Rs232TransmitByte+0xe>
    {
      break;
    }
  }
} /*** end of Rs232TransmitByte ***/
 8004350:	bd10      	pop	{r4, pc}
 8004352:	bf00      	nop
 8004354:	40011400 	.word	0x40011400

08004358 <Rs232TransmitPacket>:
{
 8004358:	b570      	push	{r4, r5, r6, lr}
 800435a:	4606      	mov	r6, r0
 800435c:	460d      	mov	r5, r1
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 800435e:	2940      	cmp	r1, #64	; 0x40
 8004360:	d804      	bhi.n	800436c <Rs232TransmitPacket+0x14>
  Rs232TransmitByte(len);
 8004362:	4628      	mov	r0, r5
 8004364:	f7ff ffe2 	bl	800432c <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 8004368:	2400      	movs	r4, #0
 800436a:	e00b      	b.n	8004384 <Rs232TransmitPacket+0x2c>
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 800436c:	217b      	movs	r1, #123	; 0x7b
 800436e:	4807      	ldr	r0, [pc, #28]	; (800438c <Rs232TransmitPacket+0x34>)
 8004370:	f000 f844 	bl	80043fc <AssertFailure>
 8004374:	e7f5      	b.n	8004362 <Rs232TransmitPacket+0xa>
    CopService();
 8004376:	f000 f921 	bl	80045bc <CopService>
    Rs232TransmitByte(data[data_index]);
 800437a:	5d30      	ldrb	r0, [r6, r4]
 800437c:	f7ff ffd6 	bl	800432c <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 8004380:	3401      	adds	r4, #1
 8004382:	b2a4      	uxth	r4, r4
 8004384:	b2ab      	uxth	r3, r5
 8004386:	42a3      	cmp	r3, r4
 8004388:	d8f5      	bhi.n	8004376 <Rs232TransmitPacket+0x1e>
} /*** end of Rs232TransmitPacket ***/
 800438a:	bd70      	pop	{r4, r5, r6, pc}
 800438c:	08015684 	.word	0x08015684

08004390 <TimerReset>:
**
****************************************************************************************/
void TimerReset(void)
{
  /* Set the systick's registers back into the default reset value. */
  SysTick->CTRL = 0;
 8004390:	4b02      	ldr	r3, [pc, #8]	; (800439c <TimerReset+0xc>)
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8004396:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8004398:	609a      	str	r2, [r3, #8]
} /* end of TimerReset */
 800439a:	4770      	bx	lr
 800439c:	e000e010 	.word	0xe000e010

080043a0 <TimerInit>:
{
 80043a0:	b508      	push	{r3, lr}
  TimerReset();
 80043a2:	f7ff fff5 	bl	8004390 <TimerReset>
  SysTick->LOAD = BOOT_CPU_SYSTEM_SPEED_KHZ - 1;
 80043a6:	4b05      	ldr	r3, [pc, #20]	; (80043bc <TimerInit+0x1c>)
 80043a8:	4a05      	ldr	r2, [pc, #20]	; (80043c0 <TimerInit+0x20>)
 80043aa:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 80043ac:	2200      	movs	r2, #0
 80043ae:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 80043b0:	2105      	movs	r1, #5
 80043b2:	6019      	str	r1, [r3, #0]
  millisecond_counter = 0;
 80043b4:	4b03      	ldr	r3, [pc, #12]	; (80043c4 <TimerInit+0x24>)
 80043b6:	601a      	str	r2, [r3, #0]
} /*** end of TimerInit ***/
 80043b8:	bd08      	pop	{r3, pc}
 80043ba:	bf00      	nop
 80043bc:	e000e010 	.word	0xe000e010
 80043c0:	0002903f 	.word	0x0002903f
 80043c4:	20000898 	.word	0x20000898

080043c8 <TimerUpdate>:
**
****************************************************************************************/
void TimerUpdate(void)
{
  /* Check if the millisecond event occurred. */
  if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 80043c8:	4b04      	ldr	r3, [pc, #16]	; (80043dc <TimerUpdate+0x14>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80043d0:	d003      	beq.n	80043da <TimerUpdate+0x12>
  {
    /* Increment the millisecond counter. */
    millisecond_counter++;
 80043d2:	4a03      	ldr	r2, [pc, #12]	; (80043e0 <TimerUpdate+0x18>)
 80043d4:	6813      	ldr	r3, [r2, #0]
 80043d6:	3301      	adds	r3, #1
 80043d8:	6013      	str	r3, [r2, #0]
  }
} /*** end of TimerUpdate ***/
 80043da:	4770      	bx	lr
 80043dc:	e000e010 	.word	0xe000e010
 80043e0:	20000898 	.word	0x20000898

080043e4 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 80043e4:	b508      	push	{r3, lr}
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 80043e6:	f7ff ffef 	bl	80043c8 <TimerUpdate>
  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
} /*** end of TimerGet ***/
 80043ea:	4b01      	ldr	r3, [pc, #4]	; (80043f0 <TimerGet+0xc>)
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	bd08      	pop	{r3, pc}
 80043f0:	20000898 	.word	0x20000898

080043f4 <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 80043f4:	b508      	push	{r3, lr}
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
 80043f6:	f7ff fff5 	bl	80043e4 <TimerGet>
} /*** end of HAL_GetTick ***/
 80043fa:	bd08      	pop	{r3, pc}

080043fc <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 80043fc:	b508      	push	{r3, lr}
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 80043fe:	f000 f8dd 	bl	80045bc <CopService>
 8004402:	e7fc      	b.n	80043fe <AssertFailure+0x2>

08004404 <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 8004404:	b508      	push	{r3, lr}
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 8004406:	f000 f8cd 	bl	80045a4 <ComIsConnected>
 800440a:	2801      	cmp	r0, #1
 800440c:	d006      	beq.n	800441c <BackDoorCheck+0x18>
#if (BOOT_FILE_SYS_ENABLE > 0)
  /* check if the file module is busy, indicating that a firmware update through the
   * locally attached storage is in progress. in this case the backdoor stays open
   * anyway, so no need to check if it needs to be closed.
   */
  if (FileIsIdle() == BLT_FALSE)
 800440e:	f000 f965 	bl	80046dc <FileIsIdle>
 8004412:	b118      	cbz	r0, 800441c <BackDoorCheck+0x18>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 8004414:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <BackDoorCheck+0x44>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d000      	beq.n	800441e <BackDoorCheck+0x1a>
        CpuStartUserProgram();
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 800441c:	bd08      	pop	{r3, pc}
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 800441e:	f7ff ffe1 	bl	80043e4 <TimerGet>
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <BackDoorCheck+0x48>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <BackDoorCheck+0x4c>)
 8004428:	6812      	ldr	r2, [r2, #0]
 800442a:	4413      	add	r3, r2
 800442c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004430:	4298      	cmp	r0, r3
 8004432:	d3f3      	bcc.n	800441c <BackDoorCheck+0x18>
      backdoorOpen = BLT_FALSE;
 8004434:	4b04      	ldr	r3, [pc, #16]	; (8004448 <BackDoorCheck+0x44>)
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]
      if (FileHandleFirmwareUpdateRequest() == BLT_FALSE)
 800443a:	f000 f959 	bl	80046f0 <FileHandleFirmwareUpdateRequest>
 800443e:	2800      	cmp	r0, #0
 8004440:	d1ec      	bne.n	800441c <BackDoorCheck+0x18>
        CpuStartUserProgram();
 8004442:	f7ff fcbf 	bl	8003dc4 <CpuStartUserProgram>
 8004446:	e7e9      	b.n	800441c <BackDoorCheck+0x18>
 8004448:	200008a0 	.word	0x200008a0
 800444c:	2000089c 	.word	0x2000089c
 8004450:	200008a4 	.word	0x200008a4

08004454 <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 8004454:	b508      	push	{r3, lr}
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 8004456:	4b05      	ldr	r3, [pc, #20]	; (800446c <BackDoorRestartTimer+0x18>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d000      	beq.n	8004460 <BackDoorRestartTimer+0xc>
  {
    backdoorOpenTime = TimerGet();
  }
} /*** end of BackDoorRestartTimer ***/
 800445e:	bd08      	pop	{r3, pc}
    backdoorOpenTime = TimerGet();
 8004460:	f7ff ffc0 	bl	80043e4 <TimerGet>
 8004464:	4b02      	ldr	r3, [pc, #8]	; (8004470 <BackDoorRestartTimer+0x1c>)
 8004466:	6018      	str	r0, [r3, #0]
} /*** end of BackDoorRestartTimer ***/
 8004468:	e7f9      	b.n	800445e <BackDoorRestartTimer+0xa>
 800446a:	bf00      	nop
 800446c:	200008a0 	.word	0x200008a0
 8004470:	200008a4 	.word	0x200008a4

08004474 <BackDoorInit>:
{
 8004474:	b508      	push	{r3, lr}
  backdoorOpen = BLT_TRUE;
 8004476:	4b04      	ldr	r3, [pc, #16]	; (8004488 <BackDoorInit+0x14>)
 8004478:	2201      	movs	r2, #1
 800447a:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 800447c:	f7ff ffea 	bl	8004454 <BackDoorRestartTimer>
  BackDoorCheck();
 8004480:	f7ff ffc0 	bl	8004404 <BackDoorCheck>
} /*** end of BackDoorInit ***/
 8004484:	bd08      	pop	{r3, pc}
 8004486:	bf00      	nop
 8004488:	200008a0 	.word	0x200008a0

0800448c <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 800448c:	b508      	push	{r3, lr}
  /* initialize the CPU */
  CpuInit();
 800448e:	f7ff fc95 	bl	8003dbc <CpuInit>
  /* initialize the watchdog */
  CopInit();
 8004492:	f000 f88f 	bl	80045b4 <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 8004496:	f7ff ff83 	bl	80043a0 <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 800449a:	f7ff fea5 	bl	80041e8 <NvmInit>
#if (BOOT_FILE_SYS_ENABLE > 0)
  /* initialize the file system module */
  FileInit();
 800449e:	f000 f905 	bl	80046ac <FileInit>
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 80044a2:	f000 f80f 	bl	80044c4 <ComInit>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
 80044a6:	f7ff ffe5 	bl	8004474 <BackDoorInit>
} /*** end of BootInit ***/
 80044aa:	bd08      	pop	{r3, pc}

080044ac <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 80044ac:	b508      	push	{r3, lr}
  /* service the watchdog */
  CopService();
 80044ae:	f000 f885 	bl	80045bc <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 80044b2:	f7ff ff89 	bl	80043c8 <TimerUpdate>
#if (BOOT_FILE_SYS_ENABLE > 0)
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
 80044b6:	f000 fa15 	bl	80048e4 <FileTask>
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 80044ba:	f000 f813 	bl	80044e4 <ComTask>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
 80044be:	f7ff ffa1 	bl	8004404 <BackDoorCheck>
} /*** end of BootTask ***/
 80044c2:	bd08      	pop	{r3, pc}

080044c4 <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 80044c4:	b510      	push	{r4, lr}
  /* initialize the XCP communication protocol */
  XcpInit();
 80044c6:	f000 fedb 	bl	8005280 <XcpInit>
  /* set it as active */
  comActiveInterface = COM_IF_CAN;
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* initialize the RS232 interface */
  Rs232Init();
 80044ca:	f7ff febb 	bl	8004244 <Rs232Init>
  /* set it as active */
  comActiveInterface = COM_IF_RS232;
 80044ce:	4c04      	ldr	r4, [pc, #16]	; (80044e0 <ComInit+0x1c>)
 80044d0:	2300      	movs	r3, #0
 80044d2:	7023      	strb	r3, [r4, #0]
  comActiveInterface = COM_IF_USB;
#endif
#if (BOOT_COM_NET_ENABLE > 0)
  #if (BOOT_COM_NET_DEFERRED_INIT_ENABLE == 0)
  /* initialize the TCP/IP interface */
	NetInit();
 80044d4:	f7fc f958 	bl	8000788 <NetInit>
  /* set it as active */
  comActiveInterface = COM_IF_NET;
 80044d8:	2303      	movs	r3, #3
 80044da:	7023      	strb	r3, [r4, #0]
  #endif
#endif
} /*** end of ComInit ***/
 80044dc:	bd10      	pop	{r4, pc}
 80044de:	bf00      	nop
 80044e0:	2000000d 	.word	0x2000000d

080044e4 <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 80044e4:	b500      	push	{lr}
 80044e6:	b083      	sub	sp, #12
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  if (Rs232ReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 80044e8:	f10d 0107 	add.w	r1, sp, #7
 80044ec:	4810      	ldr	r0, [pc, #64]	; (8004530 <ComTask+0x4c>)
 80044ee:	f7ff fec7 	bl	8004280 <Rs232ReceivePacket>
 80044f2:	2801      	cmp	r0, #1
 80044f4:	d009      	beq.n	800450a <ComTask+0x26>
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
#if (BOOT_COM_NET_ENABLE > 0)
  if (NetReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 80044f6:	f10d 0107 	add.w	r1, sp, #7
 80044fa:	480d      	ldr	r0, [pc, #52]	; (8004530 <ComTask+0x4c>)
 80044fc:	f7fc f946 	bl	800078c <NetReceivePacket>
 8004500:	2801      	cmp	r0, #1
 8004502:	d00b      	beq.n	800451c <ComTask+0x38>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 8004504:	b003      	add	sp, #12
 8004506:	f85d fb04 	ldr.w	pc, [sp], #4
    comActiveInterface = COM_IF_RS232;
 800450a:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <ComTask+0x50>)
 800450c:	2200      	movs	r2, #0
 800450e:	701a      	strb	r2, [r3, #0]
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 8004510:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004514:	4806      	ldr	r0, [pc, #24]	; (8004530 <ComTask+0x4c>)
 8004516:	f000 fed3 	bl	80052c0 <XcpPacketReceived>
 800451a:	e7ec      	b.n	80044f6 <ComTask+0x12>
    comActiveInterface = COM_IF_NET;
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <ComTask+0x50>)
 800451e:	2203      	movs	r2, #3
 8004520:	701a      	strb	r2, [r3, #0]
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 8004522:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004526:	4802      	ldr	r0, [pc, #8]	; (8004530 <ComTask+0x4c>)
 8004528:	f000 feca 	bl	80052c0 <XcpPacketReceived>
} /*** end of ComTask ***/
 800452c:	e7ea      	b.n	8004504 <ComTask+0x20>
 800452e:	bf00      	nop
 8004530:	200008a8 	.word	0x200008a8
 8004534:	2000000d 	.word	0x2000000d

08004538 <ComFree>:
{
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
#endif
} /*** end of ComFree ***/
 8004538:	4770      	bx	lr
	...

0800453c <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 800453c:	b538      	push	{r3, r4, r5, lr}
 800453e:	4604      	mov	r4, r0
 8004540:	460d      	mov	r5, r1
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* transmit the packet. note that len is limited to 255 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_RS232)
 8004542:	4b09      	ldr	r3, [pc, #36]	; (8004568 <ComTransmitPacket+0x2c>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	b133      	cbz	r3, 8004556 <ComTransmitPacket+0x1a>
  {
    UsbTransmitPacket(data, len);
  }
#endif
#if (BOOT_COM_NET_ENABLE > 0)
  if (comActiveInterface == COM_IF_NET)
 8004548:	4b07      	ldr	r3, [pc, #28]	; (8004568 <ComTransmitPacket+0x2c>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b03      	cmp	r3, #3
 800454e:	d006      	beq.n	800455e <ComTransmitPacket+0x22>
    NetTransmitPacket(data, len);
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
 8004550:	f000 feae 	bl	80052b0 <XcpPacketTransmitted>
} /*** end of ComTransmitPacket ***/
 8004554:	bd38      	pop	{r3, r4, r5, pc}
    Rs232TransmitPacket(data, (blt_int8u)len);
 8004556:	b2c9      	uxtb	r1, r1
 8004558:	f7ff fefe 	bl	8004358 <Rs232TransmitPacket>
 800455c:	e7f4      	b.n	8004548 <ComTransmitPacket+0xc>
    NetTransmitPacket(data, len);
 800455e:	b2e9      	uxtb	r1, r5
 8004560:	4620      	mov	r0, r4
 8004562:	f7fc f912 	bl	800078a <NetTransmitPacket>
 8004566:	e7f3      	b.n	8004550 <ComTransmitPacket+0x14>
 8004568:	2000000d 	.word	0x2000000d

0800456c <ComGetActiveInterfaceMaxRxLen>:
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <ComGetActiveInterfaceMaxRxLen+0x18>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d005      	beq.n	8004580 <ComGetActiveInterfaceMaxRxLen+0x14>
 8004574:	2b02      	cmp	r3, #2
 8004576:	d001      	beq.n	800457c <ComGetActiveInterfaceMaxRxLen+0x10>
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_RX_MAX_DATA;
 8004578:	2040      	movs	r0, #64	; 0x40
 800457a:	4770      	bx	lr
    case COM_IF_CAN:
      result = BOOT_COM_CAN_RX_MAX_DATA;
      break;

    case COM_IF_USB:
      result = BOOT_COM_USB_RX_MAX_DATA;
 800457c:	2000      	movs	r0, #0
      break;
 800457e:	4770      	bx	lr
      result = BOOT_COM_CAN_RX_MAX_DATA;
 8004580:	2008      	movs	r0, #8
      result = BOOT_COM_RX_MAX_DATA;
      break;
  }

  return result;
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 8004582:	4770      	bx	lr
 8004584:	2000000d 	.word	0x2000000d

08004588 <ComGetActiveInterfaceMaxTxLen>:
blt_int16u ComGetActiveInterfaceMaxTxLen(void)
{
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <ComGetActiveInterfaceMaxTxLen+0x18>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d005      	beq.n	800459c <ComGetActiveInterfaceMaxTxLen+0x14>
 8004590:	2b02      	cmp	r3, #2
 8004592:	d001      	beq.n	8004598 <ComGetActiveInterfaceMaxTxLen+0x10>
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_TX_MAX_DATA;
 8004594:	2040      	movs	r0, #64	; 0x40
 8004596:	4770      	bx	lr
    case COM_IF_CAN:
      result = BOOT_COM_CAN_TX_MAX_DATA;
      break;

    case COM_IF_USB:
      result = BOOT_COM_USB_TX_MAX_DATA;
 8004598:	2000      	movs	r0, #0
      break;
 800459a:	4770      	bx	lr
      result = BOOT_COM_CAN_TX_MAX_DATA;
 800459c:	2008      	movs	r0, #8
      result = BOOT_COM_TX_MAX_DATA;
      break;
  }

  return result;
} /*** end of ComGetActiveInterfaceMaxTxLen ***/
 800459e:	4770      	bx	lr
 80045a0:	2000000d 	.word	0x2000000d

080045a4 <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 80045a4:	b508      	push	{r3, lr}
  blt_bool result = BLT_FALSE;

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 80045a6:	f000 fe79 	bl	800529c <XcpIsConnected>
 80045aa:	4603      	mov	r3, r0
 80045ac:	b100      	cbz	r0, 80045b0 <ComIsConnected+0xc>
  {
    result = BLT_TRUE;
 80045ae:	2301      	movs	r3, #1
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
} /*** end of ComIsConnected ***/
 80045b0:	4618      	mov	r0, r3
 80045b2:	bd08      	pop	{r3, pc}

080045b4 <CopInit>:
** \brief     Watchdog initialization function.
** \return    none
**
****************************************************************************************/
void CopInit(void)
{
 80045b4:	b508      	push	{r3, lr}
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
 80045b6:	f7fb fff9 	bl	80005ac <CopInitHook>
#endif
} /*** end of CopInit ***/
 80045ba:	bd08      	pop	{r3, pc}

080045bc <CopService>:
** \brief     Watchdog service function to prevent the watchdog from timing out.
** \return    none
**
****************************************************************************************/
void CopService(void)
{
 80045bc:	b508      	push	{r3, lr}
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
 80045be:	f7fb fffa 	bl	80005b6 <CopServiceHook>
#endif
} /*** end of CopService ***/
 80045c2:	bd08      	pop	{r3, pc}

080045c4 <FileLibLongToIntString>:
** \param     destination Pointer to character buffer for storing the results.
** \return    The resulting string.
**
****************************************************************************************/
static blt_char *FileLibLongToIntString(blt_int32u long_val, blt_char *destination)
{
 80045c4:	b410      	push	{r4}
  blt_int32u long_val_cpy = long_val;
 80045c6:	4603      	mov	r3, r0

  /* first determine how many digits there will be */
  do
  {
    destination++;
 80045c8:	3101      	adds	r1, #1
    long_val_cpy /= 10;
 80045ca:	4a0d      	ldr	r2, [pc, #52]	; (8004600 <FileLibLongToIntString+0x3c>)
 80045cc:	fba2 2303 	umull	r2, r3, r2, r3
  }
  while (long_val_cpy > 0);
 80045d0:	08db      	lsrs	r3, r3, #3
 80045d2:	d1f9      	bne.n	80045c8 <FileLibLongToIntString+0x4>
  /* add space for the string termination and add it */
  *destination = '\0';
 80045d4:	2300      	movs	r3, #0
 80045d6:	700b      	strb	r3, [r1, #0]
  do
  {
    /* set write pointer to where the next character should go */
    destination--;
    /* write digit in ASCII format */
    *destination = long_val_cpy % 10 + '0';
 80045d8:	4b09      	ldr	r3, [pc, #36]	; (8004600 <FileLibLongToIntString+0x3c>)
 80045da:	fba3 2300 	umull	r2, r3, r3, r0
 80045de:	08db      	lsrs	r3, r3, #3
 80045e0:	461a      	mov	r2, r3
 80045e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80045e6:	005c      	lsls	r4, r3, #1
 80045e8:	1b03      	subs	r3, r0, r4
 80045ea:	3330      	adds	r3, #48	; 0x30
 80045ec:	f801 3d01 	strb.w	r3, [r1, #-1]!
    /* move on to the next digit */
    long_val_cpy /= 10;
 80045f0:	4610      	mov	r0, r2
  }
  while (long_val_cpy > 0);
 80045f2:	2a00      	cmp	r2, #0
 80045f4:	d1f0      	bne.n	80045d8 <FileLibLongToIntString+0x14>

  return destination;
} /*** end of FileLibLongToIntString ***/
 80045f6:	4608      	mov	r0, r1
 80045f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	cccccccd 	.word	0xcccccccd

08004604 <FileLibByteNibbleToChar>:
  c = (nibble & 0x0f) + '0';
 8004604:	f000 030f 	and.w	r3, r0, #15
  if (nibble > 9)
 8004608:	2809      	cmp	r0, #9
 800460a:	d902      	bls.n	8004612 <FileLibByteNibbleToChar+0xe>
    c += 7;
 800460c:	f103 0037 	add.w	r0, r3, #55	; 0x37
} /*** end of FileLibByteNibbleToChar ***/
 8004610:	4770      	bx	lr
{
 8004612:	b510      	push	{r4, lr}
 8004614:	f103 0430 	add.w	r4, r3, #48	; 0x30
    c = toupper((blt_int16s)c);
 8004618:	f00f ff90 	bl	801453c <__locale_ctype_ptr>
 800461c:	4420      	add	r0, r4
 800461e:	7843      	ldrb	r3, [r0, #1]
 8004620:	f003 0303 	and.w	r3, r3, #3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d001      	beq.n	800462c <FileLibByteNibbleToChar+0x28>
 8004628:	b2e0      	uxtb	r0, r4
} /*** end of FileLibByteNibbleToChar ***/
 800462a:	bd10      	pop	{r4, pc}
    c = toupper((blt_int16s)c);
 800462c:	3c20      	subs	r4, #32
 800462e:	e7fb      	b.n	8004628 <FileLibByteNibbleToChar+0x24>

08004630 <FileLibByteToHexString>:
{
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	4605      	mov	r5, r0
 8004634:	460c      	mov	r4, r1
  destination[0] = FileLibByteNibbleToChar(byte_val >> 4);
 8004636:	0900      	lsrs	r0, r0, #4
 8004638:	f7ff ffe4 	bl	8004604 <FileLibByteNibbleToChar>
 800463c:	7020      	strb	r0, [r4, #0]
  destination[1] = FileLibByteNibbleToChar(byte_val & 0x0f);
 800463e:	f005 000f 	and.w	r0, r5, #15
 8004642:	f7ff ffdf 	bl	8004604 <FileLibByteNibbleToChar>
 8004646:	7060      	strb	r0, [r4, #1]
  destination[2] = '\0';
 8004648:	2300      	movs	r3, #0
 800464a:	70a3      	strb	r3, [r4, #2]
} /*** end of FileLibByteToHexString ***/
 800464c:	4620      	mov	r0, r4
 800464e:	bd38      	pop	{r3, r4, r5, pc}

08004650 <FileLibHexStringToByte>:
**                      decimal value.
** \return    The resulting byte value.
**
****************************************************************************************/
static blt_int8u FileLibHexStringToByte(const blt_char *hexstring)
{
 8004650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004652:	4607      	mov	r7, r0
  blt_int8u result = 0;
  blt_char  c;
  blt_int8u counter;

  /* a hexadecimal character is 2 characters long (i.e 0x4F minus the 0x part) */
  for (counter=0; counter < 2; counter++)
 8004654:	2600      	movs	r6, #0
  blt_int8u result = 0;
 8004656:	4635      	mov	r5, r6
  for (counter=0; counter < 2; counter++)
 8004658:	e007      	b.n	800466a <FileLibHexStringToByte+0x1a>
  {
    /* read out the character */
    c = toupper((blt_int16s)(hexstring[counter]));
 800465a:	3c20      	subs	r4, #32
 800465c:	e010      	b.n	8004680 <FileLibHexStringToByte+0x30>
    if (c > 9)
    {
      c -= 7;
    }
    /* add it to the result */
    result = (result << 4) + c;
 800465e:	012d      	lsls	r5, r5, #4
 8004660:	b2ed      	uxtb	r5, r5
 8004662:	18ab      	adds	r3, r5, r2
 8004664:	b2dd      	uxtb	r5, r3
  for (counter=0; counter < 2; counter++)
 8004666:	3601      	adds	r6, #1
 8004668:	b2f6      	uxtb	r6, r6
 800466a:	2e01      	cmp	r6, #1
 800466c:	d819      	bhi.n	80046a2 <FileLibHexStringToByte+0x52>
    c = toupper((blt_int16s)(hexstring[counter]));
 800466e:	5dbc      	ldrb	r4, [r7, r6]
 8004670:	f00f ff64 	bl	801453c <__locale_ctype_ptr>
 8004674:	4420      	add	r0, r4
 8004676:	7843      	ldrb	r3, [r0, #1]
 8004678:	f003 0303 	and.w	r3, r3, #3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d0ec      	beq.n	800465a <FileLibHexStringToByte+0xa>
 8004680:	b2e3      	uxtb	r3, r4
    if ((c < '0') || (c > 'F') || ((c > '9') && (c < 'A')))
 8004682:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	2a16      	cmp	r2, #22
 800468a:	d809      	bhi.n	80046a0 <FileLibHexStringToByte+0x50>
 800468c:	f1a3 013a 	sub.w	r1, r3, #58	; 0x3a
 8004690:	b2c9      	uxtb	r1, r1
 8004692:	2906      	cmp	r1, #6
 8004694:	d907      	bls.n	80046a6 <FileLibHexStringToByte+0x56>
    if (c > 9)
 8004696:	2a09      	cmp	r2, #9
 8004698:	d9e1      	bls.n	800465e <FileLibHexStringToByte+0xe>
      c -= 7;
 800469a:	3b37      	subs	r3, #55	; 0x37
 800469c:	b2da      	uxtb	r2, r3
 800469e:	e7de      	b.n	800465e <FileLibHexStringToByte+0xe>
      return 0;
 80046a0:	2500      	movs	r5, #0
  }
  /* return the results */
  return result;
} /*** end of FileLibHexStringToByte ***/
 80046a2:	4628      	mov	r0, r5
 80046a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return 0;
 80046a6:	2500      	movs	r5, #0
 80046a8:	e7fb      	b.n	80046a2 <FileLibHexStringToByte+0x52>
	...

080046ac <FileInit>:
{
 80046ac:	b508      	push	{r3, lr}
  firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 80046ae:	2200      	movs	r2, #0
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <FileInit+0x20>)
 80046b2:	701a      	strb	r2, [r3, #0]
  fresult = f_mount(&fatFsObjects.fs, "0:", 0);
 80046b4:	4906      	ldr	r1, [pc, #24]	; (80046d0 <FileInit+0x24>)
 80046b6:	4807      	ldr	r0, [pc, #28]	; (80046d4 <FileInit+0x28>)
 80046b8:	f002 f88e 	bl	80067d8 <f_mount>
  ASSERT_RT(fresult == FR_OK);
 80046bc:	b900      	cbnz	r0, 80046c0 <FileInit+0x14>
} /*** end of FileInit ***/
 80046be:	bd08      	pop	{r3, pc}
  ASSERT_RT(fresult == FR_OK);
 80046c0:	2177      	movs	r1, #119	; 0x77
 80046c2:	4805      	ldr	r0, [pc, #20]	; (80046d8 <FileInit+0x2c>)
 80046c4:	f7ff fe9a 	bl	80043fc <AssertFailure>
} /*** end of FileInit ***/
 80046c8:	e7f9      	b.n	80046be <FileInit+0x12>
 80046ca:	bf00      	nop
 80046cc:	20000d48 	.word	0x20000d48
 80046d0:	080156c0 	.word	0x080156c0
 80046d4:	200008f0 	.word	0x200008f0
 80046d8:	080156c4 	.word	0x080156c4

080046dc <FileIsIdle>:
  if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_IDLE)
 80046dc:	4b03      	ldr	r3, [pc, #12]	; (80046ec <FileIsIdle+0x10>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	b10b      	cbz	r3, 80046e6 <FileIsIdle+0xa>
  return BLT_FALSE;
 80046e2:	2000      	movs	r0, #0
} /*** end of FileIsIdle ***/
 80046e4:	4770      	bx	lr
    return BLT_TRUE;
 80046e6:	2001      	movs	r0, #1
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20000d48 	.word	0x20000d48

080046f0 <FileHandleFirmwareUpdateRequest>:
{
 80046f0:	b508      	push	{r3, lr}
  if (ComIsConnected() == BLT_TRUE)
 80046f2:	f7ff ff57 	bl	80045a4 <ComIsConnected>
 80046f6:	2801      	cmp	r0, #1
 80046f8:	d00e      	beq.n	8004718 <FileHandleFirmwareUpdateRequest+0x28>
  if (firmwareUpdateState != FIRMWARE_UPDATE_STATE_IDLE)
 80046fa:	4b08      	ldr	r3, [pc, #32]	; (800471c <FileHandleFirmwareUpdateRequest+0x2c>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	b10b      	cbz	r3, 8004704 <FileHandleFirmwareUpdateRequest+0x14>
    return BLT_FALSE;
 8004700:	2000      	movs	r0, #0
} /*** end of FileHandleFirmwareUpdateRequest ***/
 8004702:	bd08      	pop	{r3, pc}
  if (FileIsFirmwareUpdateRequestedHook() == BLT_TRUE)
 8004704:	f7fb ff5c 	bl	80005c0 <FileIsFirmwareUpdateRequestedHook>
 8004708:	2801      	cmp	r0, #1
 800470a:	d001      	beq.n	8004710 <FileHandleFirmwareUpdateRequest+0x20>
  return BLT_FALSE;
 800470c:	2000      	movs	r0, #0
 800470e:	e7f8      	b.n	8004702 <FileHandleFirmwareUpdateRequest+0x12>
    firmwareUpdateState = FIRMWARE_UPDATE_STATE_STARTING;
 8004710:	4b02      	ldr	r3, [pc, #8]	; (800471c <FileHandleFirmwareUpdateRequest+0x2c>)
 8004712:	2201      	movs	r2, #1
 8004714:	701a      	strb	r2, [r3, #0]
    return BLT_TRUE;
 8004716:	e7f4      	b.n	8004702 <FileHandleFirmwareUpdateRequest+0x12>
    return BLT_FALSE;
 8004718:	2000      	movs	r0, #0
 800471a:	e7f2      	b.n	8004702 <FileHandleFirmwareUpdateRequest+0x12>
 800471c:	20000d48 	.word	0x20000d48

08004720 <FileSrecGetLineType>:
{
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	4605      	mov	r5, r0
  if ((toupper((blt_int16s)(line[0])) != 'S') || (isdigit((blt_int16s)(line[1])) == 0))
 8004724:	7804      	ldrb	r4, [r0, #0]
 8004726:	f00f ff09 	bl	801453c <__locale_ctype_ptr>
 800472a:	4420      	add	r0, r4
 800472c:	7843      	ldrb	r3, [r0, #1]
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d003      	beq.n	800473e <FileSrecGetLineType+0x1e>
 8004736:	2c53      	cmp	r4, #83	; 0x53
 8004738:	d003      	beq.n	8004742 <FileSrecGetLineType+0x22>
    return LINE_TYPE_UNSUPPORTED;
 800473a:	2003      	movs	r0, #3
} /*** end of FileSrecGetLineType ***/
 800473c:	bd38      	pop	{r3, r4, r5, pc}
  if ((toupper((blt_int16s)(line[0])) != 'S') || (isdigit((blt_int16s)(line[1])) == 0))
 800473e:	3c20      	subs	r4, #32
 8004740:	e7f9      	b.n	8004736 <FileSrecGetLineType+0x16>
 8004742:	f00f fefb 	bl	801453c <__locale_ctype_ptr>
 8004746:	786b      	ldrb	r3, [r5, #1]
 8004748:	4418      	add	r0, r3
 800474a:	7842      	ldrb	r2, [r0, #1]
 800474c:	f012 0f04 	tst.w	r2, #4
 8004750:	d009      	beq.n	8004766 <FileSrecGetLineType+0x46>
  if (line[1] == '1')
 8004752:	2b31      	cmp	r3, #49	; 0x31
 8004754:	d009      	beq.n	800476a <FileSrecGetLineType+0x4a>
  if (line[1] == '2')
 8004756:	2b32      	cmp	r3, #50	; 0x32
 8004758:	d009      	beq.n	800476e <FileSrecGetLineType+0x4e>
  if (line[1] == '3')
 800475a:	2b33      	cmp	r3, #51	; 0x33
 800475c:	d001      	beq.n	8004762 <FileSrecGetLineType+0x42>
  return LINE_TYPE_UNSUPPORTED;
 800475e:	2003      	movs	r0, #3
 8004760:	e7ec      	b.n	800473c <FileSrecGetLineType+0x1c>
    return LINE_TYPE_S3;
 8004762:	2002      	movs	r0, #2
 8004764:	e7ea      	b.n	800473c <FileSrecGetLineType+0x1c>
    return LINE_TYPE_UNSUPPORTED;
 8004766:	2003      	movs	r0, #3
 8004768:	e7e8      	b.n	800473c <FileSrecGetLineType+0x1c>
    return LINE_TYPE_S1;
 800476a:	2000      	movs	r0, #0
 800476c:	e7e6      	b.n	800473c <FileSrecGetLineType+0x1c>
    return LINE_TYPE_S2;
 800476e:	2001      	movs	r0, #1
 8004770:	e7e4      	b.n	800473c <FileSrecGetLineType+0x1c>

08004772 <FileSrecVerifyChecksum>:
{
 8004772:	b570      	push	{r4, r5, r6, lr}
 8004774:	4606      	mov	r6, r0
  bytes_on_line = FileLibHexStringToByte(line);
 8004776:	3002      	adds	r0, #2
 8004778:	f7ff ff6a 	bl	8004650 <FileLibHexStringToByte>
 800477c:	4605      	mov	r5, r0
 800477e:	b284      	uxth	r4, r0
  line += 2;
 8004780:	3604      	adds	r6, #4
    checksum += FileLibHexStringToByte(line);
 8004782:	4630      	mov	r0, r6
 8004784:	f7ff ff64 	bl	8004650 <FileLibHexStringToByte>
 8004788:	4405      	add	r5, r0
 800478a:	b2ed      	uxtb	r5, r5
    bytes_on_line--;
 800478c:	3c01      	subs	r4, #1
 800478e:	b2a4      	uxth	r4, r4
    line += 2;
 8004790:	3602      	adds	r6, #2
  while (bytes_on_line > 1);
 8004792:	2c01      	cmp	r4, #1
 8004794:	d8f5      	bhi.n	8004782 <FileSrecVerifyChecksum+0x10>
  checksum = ~checksum;
 8004796:	43ed      	mvns	r5, r5
 8004798:	b2ed      	uxtb	r5, r5
  if (checksum != FileLibHexStringToByte(line))
 800479a:	4630      	mov	r0, r6
 800479c:	f7ff ff58 	bl	8004650 <FileLibHexStringToByte>
 80047a0:	42a8      	cmp	r0, r5
 80047a2:	d001      	beq.n	80047a8 <FileSrecVerifyChecksum+0x36>
    return BLT_FALSE;
 80047a4:	2000      	movs	r0, #0
} /*** end of FileSrecVerifyChecksum ***/
 80047a6:	bd70      	pop	{r4, r5, r6, pc}
  return BLT_TRUE;
 80047a8:	2001      	movs	r0, #1
 80047aa:	e7fc      	b.n	80047a6 <FileSrecVerifyChecksum+0x34>

080047ac <FileSrecParseLine>:
{
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ae:	4604      	mov	r4, r0
 80047b0:	4617      	mov	r7, r2
  ASSERT_RT((address != BLT_NULL) && (line != BLT_NULL));
 80047b2:	460e      	mov	r6, r1
 80047b4:	b1a1      	cbz	r1, 80047e0 <FileSrecParseLine+0x34>
 80047b6:	b198      	cbz	r0, 80047e0 <FileSrecParseLine+0x34>
  lineType = FileSrecGetLineType(line);
 80047b8:	4620      	mov	r0, r4
 80047ba:	f7ff ffb1 	bl	8004720 <FileSrecGetLineType>
 80047be:	4605      	mov	r5, r0
  if (lineType == LINE_TYPE_UNSUPPORTED)
 80047c0:	2803      	cmp	r0, #3
 80047c2:	f000 8087 	beq.w	80048d4 <FileSrecParseLine+0x128>
  if (FileSrecVerifyChecksum(line) == BLT_FALSE)
 80047c6:	4620      	mov	r0, r4
 80047c8:	f7ff ffd3 	bl	8004772 <FileSrecVerifyChecksum>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	f000 8084 	beq.w	80048da <FileSrecParseLine+0x12e>
  switch (lineType)
 80047d2:	2d01      	cmp	r5, #1
 80047d4:	d029      	beq.n	800482a <FileSrecParseLine+0x7e>
 80047d6:	b14d      	cbz	r5, 80047ec <FileSrecParseLine+0x40>
 80047d8:	2d02      	cmp	r5, #2
 80047da:	d04d      	beq.n	8004878 <FileSrecParseLine+0xcc>
  blt_int16s    data_byte_count = 0;
 80047dc:	2500      	movs	r5, #0
 80047de:	e07a      	b.n	80048d6 <FileSrecParseLine+0x12a>
  ASSERT_RT((address != BLT_NULL) && (line != BLT_NULL));
 80047e0:	f240 2163 	movw	r1, #611	; 0x263
 80047e4:	483e      	ldr	r0, [pc, #248]	; (80048e0 <FileSrecParseLine+0x134>)
 80047e6:	f7ff fe09 	bl	80043fc <AssertFailure>
 80047ea:	e7e5      	b.n	80047b8 <FileSrecParseLine+0xc>
      bytes_on_line = FileLibHexStringToByte(line);
 80047ec:	1ca0      	adds	r0, r4, #2
 80047ee:	f7ff ff2f 	bl	8004650 <FileLibHexStringToByte>
 80047f2:	b285      	uxth	r5, r0
      *address = FileLibHexStringToByte(line) << 8;
 80047f4:	1d20      	adds	r0, r4, #4
 80047f6:	f7ff ff2b 	bl	8004650 <FileLibHexStringToByte>
 80047fa:	0200      	lsls	r0, r0, #8
 80047fc:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line);
 80047fe:	1da0      	adds	r0, r4, #6
 8004800:	f7ff ff26 	bl	8004650 <FileLibHexStringToByte>
 8004804:	6833      	ldr	r3, [r6, #0]
 8004806:	4418      	add	r0, r3
 8004808:	6030      	str	r0, [r6, #0]
      line += 2;
 800480a:	3408      	adds	r4, #8
      data_byte_count = bytes_on_line - 3; /* -2 bytes address, -1 byte checksum */
 800480c:	3d03      	subs	r5, #3
 800480e:	b22d      	sxth	r5, r5
      if (data != BLT_NULL)
 8004810:	2f00      	cmp	r7, #0
 8004812:	d060      	beq.n	80048d6 <FileSrecParseLine+0x12a>
        for (i=0; i<data_byte_count; i++)
 8004814:	2600      	movs	r6, #0
 8004816:	42ae      	cmp	r6, r5
 8004818:	da5d      	bge.n	80048d6 <FileSrecParseLine+0x12a>
          data[i] = FileLibHexStringToByte(line);
 800481a:	4620      	mov	r0, r4
 800481c:	f7ff ff18 	bl	8004650 <FileLibHexStringToByte>
 8004820:	55b8      	strb	r0, [r7, r6]
          line += 2;
 8004822:	3402      	adds	r4, #2
        for (i=0; i<data_byte_count; i++)
 8004824:	3601      	adds	r6, #1
 8004826:	b2b6      	uxth	r6, r6
 8004828:	e7f5      	b.n	8004816 <FileSrecParseLine+0x6a>
      bytes_on_line = FileLibHexStringToByte(line);
 800482a:	1ca0      	adds	r0, r4, #2
 800482c:	f7ff ff10 	bl	8004650 <FileLibHexStringToByte>
 8004830:	b285      	uxth	r5, r0
      *address = FileLibHexStringToByte(line) << 16;
 8004832:	1d20      	adds	r0, r4, #4
 8004834:	f7ff ff0c 	bl	8004650 <FileLibHexStringToByte>
 8004838:	0400      	lsls	r0, r0, #16
 800483a:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line) << 8;
 800483c:	1da0      	adds	r0, r4, #6
 800483e:	f7ff ff07 	bl	8004650 <FileLibHexStringToByte>
 8004842:	6833      	ldr	r3, [r6, #0]
 8004844:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8004848:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line);
 800484a:	f104 0008 	add.w	r0, r4, #8
 800484e:	f7ff feff 	bl	8004650 <FileLibHexStringToByte>
 8004852:	6833      	ldr	r3, [r6, #0]
 8004854:	4418      	add	r0, r3
 8004856:	6030      	str	r0, [r6, #0]
      line += 2;
 8004858:	340a      	adds	r4, #10
      data_byte_count = bytes_on_line - 4; /* -3 bytes address, -1 byte checksum */
 800485a:	3d04      	subs	r5, #4
 800485c:	b22d      	sxth	r5, r5
      if (data != BLT_NULL)
 800485e:	2f00      	cmp	r7, #0
 8004860:	d039      	beq.n	80048d6 <FileSrecParseLine+0x12a>
        for (i=0; i<data_byte_count; i++)
 8004862:	2600      	movs	r6, #0
 8004864:	42ae      	cmp	r6, r5
 8004866:	da36      	bge.n	80048d6 <FileSrecParseLine+0x12a>
          data[i] = FileLibHexStringToByte(line);
 8004868:	4620      	mov	r0, r4
 800486a:	f7ff fef1 	bl	8004650 <FileLibHexStringToByte>
 800486e:	55b8      	strb	r0, [r7, r6]
          line += 2;
 8004870:	3402      	adds	r4, #2
        for (i=0; i<data_byte_count; i++)
 8004872:	3601      	adds	r6, #1
 8004874:	b2b6      	uxth	r6, r6
 8004876:	e7f5      	b.n	8004864 <FileSrecParseLine+0xb8>
      bytes_on_line = FileLibHexStringToByte(line);
 8004878:	1ca0      	adds	r0, r4, #2
 800487a:	f7ff fee9 	bl	8004650 <FileLibHexStringToByte>
 800487e:	b285      	uxth	r5, r0
      *address = FileLibHexStringToByte(line) << 24;
 8004880:	1d20      	adds	r0, r4, #4
 8004882:	f7ff fee5 	bl	8004650 <FileLibHexStringToByte>
 8004886:	0600      	lsls	r0, r0, #24
 8004888:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line) << 16;
 800488a:	1da0      	adds	r0, r4, #6
 800488c:	f7ff fee0 	bl	8004650 <FileLibHexStringToByte>
 8004890:	6833      	ldr	r3, [r6, #0]
 8004892:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 8004896:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line) << 8;
 8004898:	f104 0008 	add.w	r0, r4, #8
 800489c:	f7ff fed8 	bl	8004650 <FileLibHexStringToByte>
 80048a0:	6833      	ldr	r3, [r6, #0]
 80048a2:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80048a6:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line);
 80048a8:	f104 000a 	add.w	r0, r4, #10
 80048ac:	f7ff fed0 	bl	8004650 <FileLibHexStringToByte>
 80048b0:	6833      	ldr	r3, [r6, #0]
 80048b2:	4418      	add	r0, r3
 80048b4:	6030      	str	r0, [r6, #0]
      line += 2;
 80048b6:	340c      	adds	r4, #12
      data_byte_count = bytes_on_line - 5; /* -4 bytes address, -1 byte checksum */
 80048b8:	3d05      	subs	r5, #5
 80048ba:	b22d      	sxth	r5, r5
      if (data != BLT_NULL)
 80048bc:	b15f      	cbz	r7, 80048d6 <FileSrecParseLine+0x12a>
        for (i=0; i<data_byte_count; i++)
 80048be:	2600      	movs	r6, #0
 80048c0:	42ae      	cmp	r6, r5
 80048c2:	da08      	bge.n	80048d6 <FileSrecParseLine+0x12a>
          data[i] = FileLibHexStringToByte(line);
 80048c4:	4620      	mov	r0, r4
 80048c6:	f7ff fec3 	bl	8004650 <FileLibHexStringToByte>
 80048ca:	55b8      	strb	r0, [r7, r6]
          line += 2;
 80048cc:	3402      	adds	r4, #2
        for (i=0; i<data_byte_count; i++)
 80048ce:	3601      	adds	r6, #1
 80048d0:	b2b6      	uxth	r6, r6
 80048d2:	e7f5      	b.n	80048c0 <FileSrecParseLine+0x114>
    return 0;
 80048d4:	2500      	movs	r5, #0
} /*** end of FileSrecParseLine ***/
 80048d6:	4628      	mov	r0, r5
 80048d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERROR_SREC_INVALID_CHECKSUM;
 80048da:	f04f 35ff 	mov.w	r5, #4294967295
 80048de:	e7fa      	b.n	80048d6 <FileSrecParseLine+0x12a>
 80048e0:	080156c4 	.word	0x080156c4

080048e4 <FileTask>:
  if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_IDLE)
 80048e4:	4bb5      	ldr	r3, [pc, #724]	; (8004bbc <FileTask+0x2d8>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 81f5 	beq.w	8004cd8 <FileTask+0x3f4>
{
 80048ee:	b570      	push	{r4, r5, r6, lr}
  else if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_STARTING)
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d005      	beq.n	8004900 <FileTask+0x1c>
  else if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_ERASING)
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d030      	beq.n	800495a <FileTask+0x76>
  else if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_PROGRAMMING)
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	f000 8120 	beq.w	8004b3e <FileTask+0x25a>
} /*** end of FileTask ***/
 80048fe:	bd70      	pop	{r4, r5, r6, pc}
    NvmInit();
 8004900:	f7ff fc72 	bl	80041e8 <NvmInit>
    FileFirmwareUpdateStartedHook();
 8004904:	f7fb fe7e 	bl	8000604 <FileFirmwareUpdateStartedHook>
    FileFirmwareUpdateLogHook("Firmware update request detected\n\r");
 8004908:	48ad      	ldr	r0, [pc, #692]	; (8004bc0 <FileTask+0x2dc>)
 800490a:	f7fb febf 	bl	800068c <FileFirmwareUpdateLogHook>
    FileFirmwareUpdateLogHook("Opening firmware file for reading...");
 800490e:	48ad      	ldr	r0, [pc, #692]	; (8004bc4 <FileTask+0x2e0>)
 8004910:	f7fb febc 	bl	800068c <FileFirmwareUpdateLogHook>
    if (f_open(&fatFsObjects.file, FileGetFirmwareFilenameHook(), FA_OPEN_EXISTING | FA_READ) != FR_OK)
 8004914:	f7fb fe72 	bl	80005fc <FileGetFirmwareFilenameHook>
 8004918:	2201      	movs	r2, #1
 800491a:	4601      	mov	r1, r0
 800491c:	48aa      	ldr	r0, [pc, #680]	; (8004bc8 <FileTask+0x2e4>)
 800491e:	f001 ff87 	bl	8006830 <f_open>
 8004922:	b148      	cbz	r0, 8004938 <FileTask+0x54>
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004924:	4ba5      	ldr	r3, [pc, #660]	; (8004bbc <FileTask+0x2d8>)
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
      FileFirmwareUpdateLogHook("ERROR\n\r");
 800492a:	48a8      	ldr	r0, [pc, #672]	; (8004bcc <FileTask+0x2e8>)
 800492c:	f7fb feae 	bl	800068c <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_OPEN_FIRMWARE_FILE);
 8004930:	2001      	movs	r0, #1
 8004932:	f7fb fe9d 	bl	8000670 <FileFirmwareUpdateErrorHook>
      return;
 8004936:	e7e2      	b.n	80048fe <FileTask+0x1a>
    FileFirmwareUpdateLogHook("OK\n\r");
 8004938:	48a5      	ldr	r0, [pc, #660]	; (8004bd0 <FileTask+0x2ec>)
 800493a:	f7fb fea7 	bl	800068c <FileFirmwareUpdateLogHook>
    FileFirmwareUpdateLogHook("Starting the programming sequence\n\r");
 800493e:	48a5      	ldr	r0, [pc, #660]	; (8004bd4 <FileTask+0x2f0>)
 8004940:	f7fb fea4 	bl	800068c <FileFirmwareUpdateLogHook>
    FileFirmwareUpdateLogHook("Parsing firmware file to detect erase blocks...");
 8004944:	48a4      	ldr	r0, [pc, #656]	; (8004bd8 <FileTask+0x2f4>)
 8004946:	f7fb fea1 	bl	800068c <FileFirmwareUpdateLogHook>
    eraseInfo.start_address = 0;
 800494a:	4ba4      	ldr	r3, [pc, #656]	; (8004bdc <FileTask+0x2f8>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]
    eraseInfo.total_size = 0;
 8004950:	605a      	str	r2, [r3, #4]
    firmwareUpdateState = FIRMWARE_UPDATE_STATE_ERASING;
 8004952:	4b9a      	ldr	r3, [pc, #616]	; (8004bbc <FileTask+0x2d8>)
 8004954:	2202      	movs	r2, #2
 8004956:	701a      	strb	r2, [r3, #0]
 8004958:	e7d1      	b.n	80048fe <FileTask+0x1a>
    read_line_ptr = f_gets(lineParseObject.line, sizeof(lineParseObject.line), &fatFsObjects.file);
 800495a:	4ca1      	ldr	r4, [pc, #644]	; (8004be0 <FileTask+0x2fc>)
 800495c:	f504 720c 	add.w	r2, r4, #560	; 0x230
 8004960:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004964:	489f      	ldr	r0, [pc, #636]	; (8004be4 <FileTask+0x300>)
 8004966:	f002 fb85 	bl	8007074 <f_gets>
    if (f_error(&fatFsObjects.file) > 0)
 800496a:	f894 3241 	ldrb.w	r3, [r4, #577]	; 0x241
 800496e:	2b00      	cmp	r3, #0
 8004970:	d15d      	bne.n	8004a2e <FileTask+0x14a>
    if (read_line_ptr != BLT_NULL)
 8004972:	b1a8      	cbz	r0, 80049a0 <FileTask+0xbc>
      parse_result = FileSrecParseLine(lineParseObject.line, &lineParseObject.address, BLT_NULL);
 8004974:	489b      	ldr	r0, [pc, #620]	; (8004be4 <FileTask+0x300>)
 8004976:	2200      	movs	r2, #0
 8004978:	f500 71c0 	add.w	r1, r0, #384	; 0x180
 800497c:	f7ff ff16 	bl	80047ac <FileSrecParseLine>
 8004980:	4604      	mov	r4, r0
      if (parse_result == ERROR_SREC_INVALID_CHECKSUM)
 8004982:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004986:	d060      	beq.n	8004a4a <FileTask+0x166>
    if (parse_result > 0)
 8004988:	2800      	cmp	r0, #0
 800498a:	dd09      	ble.n	80049a0 <FileTask+0xbc>
      if (eraseInfo.total_size == 0)
 800498c:	4b93      	ldr	r3, [pc, #588]	; (8004bdc <FileTask+0x2f8>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d167      	bne.n	8004a64 <FileTask+0x180>
        eraseInfo.start_address = lineParseObject.address;
 8004994:	4b93      	ldr	r3, [pc, #588]	; (8004be4 <FileTask+0x300>)
 8004996:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800499a:	4b90      	ldr	r3, [pc, #576]	; (8004bdc <FileTask+0x2f8>)
 800499c:	601a      	str	r2, [r3, #0]
        eraseInfo.total_size = parse_result;
 800499e:	6058      	str	r0, [r3, #4]
    if (f_eof(&fatFsObjects.file) > 0)
 80049a0:	4b8f      	ldr	r3, [pc, #572]	; (8004be0 <FileTask+0x2fc>)
 80049a2:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 80049a6:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d1a7      	bne.n	80048fe <FileTask+0x1a>
      if (f_lseek(&fatFsObjects.file, 0) != FR_OK)
 80049ae:	2100      	movs	r1, #0
 80049b0:	4885      	ldr	r0, [pc, #532]	; (8004bc8 <FileTask+0x2e4>)
 80049b2:	f002 fa1d 	bl	8006df0 <f_lseek>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	f040 80a7 	bne.w	8004b0a <FileTask+0x226>
      if (eraseInfo.total_size > 0)
 80049bc:	4b87      	ldr	r3, [pc, #540]	; (8004bdc <FileTask+0x2f8>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	b373      	cbz	r3, 8004a20 <FileTask+0x13c>
        FileFirmwareUpdateLogHook("OK\n\r");
 80049c2:	4883      	ldr	r0, [pc, #524]	; (8004bd0 <FileTask+0x2ec>)
 80049c4:	f7fb fe62 	bl	800068c <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateLogHook("Erasing ");
 80049c8:	4887      	ldr	r0, [pc, #540]	; (8004be8 <FileTask+0x304>)
 80049ca:	f7fb fe5f 	bl	800068c <FileFirmwareUpdateLogHook>
        FileLibLongToIntString(eraseInfo.total_size, loggingStr);
 80049ce:	4d87      	ldr	r5, [pc, #540]	; (8004bec <FileTask+0x308>)
 80049d0:	4c82      	ldr	r4, [pc, #520]	; (8004bdc <FileTask+0x2f8>)
 80049d2:	4629      	mov	r1, r5
 80049d4:	6860      	ldr	r0, [r4, #4]
 80049d6:	f7ff fdf5 	bl	80045c4 <FileLibLongToIntString>
        FileFirmwareUpdateLogHook(loggingStr);
 80049da:	4628      	mov	r0, r5
 80049dc:	f7fb fe56 	bl	800068c <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateLogHook(" bytes from memory at 0x");
 80049e0:	4883      	ldr	r0, [pc, #524]	; (8004bf0 <FileTask+0x30c>)
 80049e2:	f7fb fe53 	bl	800068c <FileFirmwareUpdateLogHook>
        FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 24), &loggingStr[0]);
 80049e6:	4629      	mov	r1, r5
 80049e8:	78e0      	ldrb	r0, [r4, #3]
 80049ea:	f7ff fe21 	bl	8004630 <FileLibByteToHexString>
        FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 16), &loggingStr[2]);
 80049ee:	1ca9      	adds	r1, r5, #2
 80049f0:	78a0      	ldrb	r0, [r4, #2]
 80049f2:	f7ff fe1d 	bl	8004630 <FileLibByteToHexString>
        FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 8), &loggingStr[4]);
 80049f6:	1d29      	adds	r1, r5, #4
 80049f8:	7860      	ldrb	r0, [r4, #1]
 80049fa:	f7ff fe19 	bl	8004630 <FileLibByteToHexString>
        FileLibByteToHexString((blt_int8u)eraseInfo.start_address, &loggingStr[6]);
 80049fe:	1da9      	adds	r1, r5, #6
 8004a00:	7820      	ldrb	r0, [r4, #0]
 8004a02:	f7ff fe15 	bl	8004630 <FileLibByteToHexString>
        FileFirmwareUpdateLogHook(loggingStr);
 8004a06:	4628      	mov	r0, r5
 8004a08:	f7fb fe40 	bl	800068c <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateLogHook("...");
 8004a0c:	4879      	ldr	r0, [pc, #484]	; (8004bf4 <FileTask+0x310>)
 8004a0e:	f7fb fe3d 	bl	800068c <FileFirmwareUpdateLogHook>
        if (NvmErase(eraseInfo.start_address, eraseInfo.total_size) == BLT_FALSE)
 8004a12:	6861      	ldr	r1, [r4, #4]
 8004a14:	6820      	ldr	r0, [r4, #0]
 8004a16:	f7ff fbef 	bl	80041f8 <NvmErase>
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	f000 8082 	beq.w	8004b24 <FileTask+0x240>
      FileFirmwareUpdateLogHook("OK\n\r");
 8004a20:	486b      	ldr	r0, [pc, #428]	; (8004bd0 <FileTask+0x2ec>)
 8004a22:	f7fb fe33 	bl	800068c <FileFirmwareUpdateLogHook>
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_PROGRAMMING;
 8004a26:	4b65      	ldr	r3, [pc, #404]	; (8004bbc <FileTask+0x2d8>)
 8004a28:	2203      	movs	r2, #3
 8004a2a:	701a      	strb	r2, [r3, #0]
 8004a2c:	e767      	b.n	80048fe <FileTask+0x1a>
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004a2e:	4b63      	ldr	r3, [pc, #396]	; (8004bbc <FileTask+0x2d8>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	701a      	strb	r2, [r3, #0]
      FileFirmwareUpdateLogHook("ERROR\n\r");
 8004a34:	4865      	ldr	r0, [pc, #404]	; (8004bcc <FileTask+0x2e8>)
 8004a36:	f7fb fe29 	bl	800068c <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_READ_FROM_FILE);
 8004a3a:	2002      	movs	r0, #2
 8004a3c:	f7fb fe18 	bl	8000670 <FileFirmwareUpdateErrorHook>
      f_close(&fatFsObjects.file);
 8004a40:	f504 700c 	add.w	r0, r4, #560	; 0x230
 8004a44:	f002 f9c0 	bl	8006dc8 <f_close>
      return;
 8004a48:	e759      	b.n	80048fe <FileTask+0x1a>
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004a4a:	4b5c      	ldr	r3, [pc, #368]	; (8004bbc <FileTask+0x2d8>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	701a      	strb	r2, [r3, #0]
        FileFirmwareUpdateLogHook("ERROR\n\r");
 8004a50:	485e      	ldr	r0, [pc, #376]	; (8004bcc <FileTask+0x2e8>)
 8004a52:	f7fb fe1b 	bl	800068c <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateErrorHook(FILE_ERROR_INVALID_CHECKSUM_IN_FILE);
 8004a56:	2003      	movs	r0, #3
 8004a58:	f7fb fe0a 	bl	8000670 <FileFirmwareUpdateErrorHook>
        f_close(&fatFsObjects.file);
 8004a5c:	485a      	ldr	r0, [pc, #360]	; (8004bc8 <FileTask+0x2e4>)
 8004a5e:	f002 f9b3 	bl	8006dc8 <f_close>
        return;
 8004a62:	e74c      	b.n	80048fe <FileTask+0x1a>
        if (lineParseObject.address == (eraseInfo.start_address + eraseInfo.total_size))
 8004a64:	4a5f      	ldr	r2, [pc, #380]	; (8004be4 <FileTask+0x300>)
 8004a66:	f8d2 1180 	ldr.w	r1, [r2, #384]	; 0x180
 8004a6a:	4a5c      	ldr	r2, [pc, #368]	; (8004bdc <FileTask+0x2f8>)
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	441a      	add	r2, r3
 8004a70:	4291      	cmp	r1, r2
 8004a72:	d103      	bne.n	8004a7c <FileTask+0x198>
          eraseInfo.total_size += parse_result;
 8004a74:	4403      	add	r3, r0
 8004a76:	4a59      	ldr	r2, [pc, #356]	; (8004bdc <FileTask+0x2f8>)
 8004a78:	6053      	str	r3, [r2, #4]
 8004a7a:	e791      	b.n	80049a0 <FileTask+0xbc>
          FileFirmwareUpdateLogHook("OK\n\r");
 8004a7c:	4854      	ldr	r0, [pc, #336]	; (8004bd0 <FileTask+0x2ec>)
 8004a7e:	f7fb fe05 	bl	800068c <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateLogHook("Erasing ");
 8004a82:	4859      	ldr	r0, [pc, #356]	; (8004be8 <FileTask+0x304>)
 8004a84:	f7fb fe02 	bl	800068c <FileFirmwareUpdateLogHook>
          FileLibLongToIntString(eraseInfo.total_size, loggingStr);
 8004a88:	4e58      	ldr	r6, [pc, #352]	; (8004bec <FileTask+0x308>)
 8004a8a:	4d54      	ldr	r5, [pc, #336]	; (8004bdc <FileTask+0x2f8>)
 8004a8c:	4631      	mov	r1, r6
 8004a8e:	6868      	ldr	r0, [r5, #4]
 8004a90:	f7ff fd98 	bl	80045c4 <FileLibLongToIntString>
          FileFirmwareUpdateLogHook(loggingStr);
 8004a94:	4630      	mov	r0, r6
 8004a96:	f7fb fdf9 	bl	800068c <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateLogHook(" bytes from memory at 0x");
 8004a9a:	4855      	ldr	r0, [pc, #340]	; (8004bf0 <FileTask+0x30c>)
 8004a9c:	f7fb fdf6 	bl	800068c <FileFirmwareUpdateLogHook>
          FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 24), &loggingStr[0]);
 8004aa0:	4631      	mov	r1, r6
 8004aa2:	78e8      	ldrb	r0, [r5, #3]
 8004aa4:	f7ff fdc4 	bl	8004630 <FileLibByteToHexString>
          FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 16), &loggingStr[2]);
 8004aa8:	1cb1      	adds	r1, r6, #2
 8004aaa:	78a8      	ldrb	r0, [r5, #2]
 8004aac:	f7ff fdc0 	bl	8004630 <FileLibByteToHexString>
          FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 8), &loggingStr[4]);
 8004ab0:	1d31      	adds	r1, r6, #4
 8004ab2:	7868      	ldrb	r0, [r5, #1]
 8004ab4:	f7ff fdbc 	bl	8004630 <FileLibByteToHexString>
          FileLibByteToHexString((blt_int8u)eraseInfo.start_address, &loggingStr[6]);
 8004ab8:	1db1      	adds	r1, r6, #6
 8004aba:	7828      	ldrb	r0, [r5, #0]
 8004abc:	f7ff fdb8 	bl	8004630 <FileLibByteToHexString>
          FileFirmwareUpdateLogHook(loggingStr);
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	f7fb fde3 	bl	800068c <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateLogHook("...");
 8004ac6:	484b      	ldr	r0, [pc, #300]	; (8004bf4 <FileTask+0x310>)
 8004ac8:	f7fb fde0 	bl	800068c <FileFirmwareUpdateLogHook>
          if (NvmErase(eraseInfo.start_address, eraseInfo.total_size) == BLT_FALSE)
 8004acc:	6869      	ldr	r1, [r5, #4]
 8004ace:	6828      	ldr	r0, [r5, #0]
 8004ad0:	f7ff fb92 	bl	80041f8 <NvmErase>
 8004ad4:	b160      	cbz	r0, 8004af0 <FileTask+0x20c>
          FileFirmwareUpdateLogHook("OK\n\r");
 8004ad6:	483e      	ldr	r0, [pc, #248]	; (8004bd0 <FileTask+0x2ec>)
 8004ad8:	f7fb fdd8 	bl	800068c <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateLogHook("Parsing firmware file to detect erase blocks...");
 8004adc:	483e      	ldr	r0, [pc, #248]	; (8004bd8 <FileTask+0x2f4>)
 8004ade:	f7fb fdd5 	bl	800068c <FileFirmwareUpdateLogHook>
          eraseInfo.start_address = lineParseObject.address;
 8004ae2:	4b40      	ldr	r3, [pc, #256]	; (8004be4 <FileTask+0x300>)
 8004ae4:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8004ae8:	4b3c      	ldr	r3, [pc, #240]	; (8004bdc <FileTask+0x2f8>)
 8004aea:	601a      	str	r2, [r3, #0]
          eraseInfo.total_size = parse_result;
 8004aec:	605c      	str	r4, [r3, #4]
 8004aee:	e757      	b.n	80049a0 <FileTask+0xbc>
            firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004af0:	4b32      	ldr	r3, [pc, #200]	; (8004bbc <FileTask+0x2d8>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	701a      	strb	r2, [r3, #0]
            FileFirmwareUpdateLogHook("ERROR\n\r");
 8004af6:	4835      	ldr	r0, [pc, #212]	; (8004bcc <FileTask+0x2e8>)
 8004af8:	f7fb fdc8 	bl	800068c <FileFirmwareUpdateLogHook>
            FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_ERASE_MEMORY);
 8004afc:	2005      	movs	r0, #5
 8004afe:	f7fb fdb7 	bl	8000670 <FileFirmwareUpdateErrorHook>
            f_close(&fatFsObjects.file);
 8004b02:	4831      	ldr	r0, [pc, #196]	; (8004bc8 <FileTask+0x2e4>)
 8004b04:	f002 f960 	bl	8006dc8 <f_close>
            return;
 8004b08:	e6f9      	b.n	80048fe <FileTask+0x1a>
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004b0a:	4b2c      	ldr	r3, [pc, #176]	; (8004bbc <FileTask+0x2d8>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	701a      	strb	r2, [r3, #0]
        FileFirmwareUpdateLogHook("ERROR\n\r");
 8004b10:	482e      	ldr	r0, [pc, #184]	; (8004bcc <FileTask+0x2e8>)
 8004b12:	f7fb fdbb 	bl	800068c <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateErrorHook(FILE_ERROR_REWINDING_FILE_READ_POINTER);
 8004b16:	2004      	movs	r0, #4
 8004b18:	f7fb fdaa 	bl	8000670 <FileFirmwareUpdateErrorHook>
        f_close(&fatFsObjects.file);
 8004b1c:	482a      	ldr	r0, [pc, #168]	; (8004bc8 <FileTask+0x2e4>)
 8004b1e:	f002 f953 	bl	8006dc8 <f_close>
        return;
 8004b22:	e6ec      	b.n	80048fe <FileTask+0x1a>
          firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004b24:	4b25      	ldr	r3, [pc, #148]	; (8004bbc <FileTask+0x2d8>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	701a      	strb	r2, [r3, #0]
          FileFirmwareUpdateLogHook("ERROR\n\r");
 8004b2a:	4828      	ldr	r0, [pc, #160]	; (8004bcc <FileTask+0x2e8>)
 8004b2c:	f7fb fdae 	bl	800068c <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_ERASE_MEMORY);
 8004b30:	2005      	movs	r0, #5
 8004b32:	f7fb fd9d 	bl	8000670 <FileFirmwareUpdateErrorHook>
          f_close(&fatFsObjects.file);
 8004b36:	4824      	ldr	r0, [pc, #144]	; (8004bc8 <FileTask+0x2e4>)
 8004b38:	f002 f946 	bl	8006dc8 <f_close>
          return;
 8004b3c:	e6df      	b.n	80048fe <FileTask+0x1a>
    read_line_ptr = f_gets(lineParseObject.line, sizeof(lineParseObject.line), &fatFsObjects.file);
 8004b3e:	4c28      	ldr	r4, [pc, #160]	; (8004be0 <FileTask+0x2fc>)
 8004b40:	f504 720c 	add.w	r2, r4, #560	; 0x230
 8004b44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b48:	4826      	ldr	r0, [pc, #152]	; (8004be4 <FileTask+0x300>)
 8004b4a:	f002 fa93 	bl	8007074 <f_gets>
    if (f_error(&fatFsObjects.file) > 0)
 8004b4e:	f894 3241 	ldrb.w	r3, [r4, #577]	; 0x241
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d156      	bne.n	8004c04 <FileTask+0x320>
    if (read_line_ptr != BLT_NULL)
 8004b56:	b160      	cbz	r0, 8004b72 <FileTask+0x28e>
      parse_result = FileSrecParseLine(lineParseObject.line, &lineParseObject.address, lineParseObject.data);
 8004b58:	4822      	ldr	r0, [pc, #136]	; (8004be4 <FileTask+0x300>)
 8004b5a:	f500 7280 	add.w	r2, r0, #256	; 0x100
 8004b5e:	f500 71c0 	add.w	r1, r0, #384	; 0x180
 8004b62:	f7ff fe23 	bl	80047ac <FileSrecParseLine>
 8004b66:	4604      	mov	r4, r0
      if (parse_result == ERROR_SREC_INVALID_CHECKSUM)
 8004b68:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004b6c:	d058      	beq.n	8004c20 <FileTask+0x33c>
    if (parse_result > 0)
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	dc63      	bgt.n	8004c3a <FileTask+0x356>
    if (f_eof(&fatFsObjects.file) > 0)
 8004b72:	4b1b      	ldr	r3, [pc, #108]	; (8004be0 <FileTask+0x2fc>)
 8004b74:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8004b78:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	f47f aebe 	bne.w	80048fe <FileTask+0x1a>
      FileFirmwareUpdateLogHook("Writing program checksum...");
 8004b82:	481d      	ldr	r0, [pc, #116]	; (8004bf8 <FileTask+0x314>)
 8004b84:	f7fb fd82 	bl	800068c <FileFirmwareUpdateLogHook>
      if (NvmDone() == BLT_FALSE)
 8004b88:	f7ff fb42 	bl	8004210 <NvmDone>
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	f000 8096 	beq.w	8004cbe <FileTask+0x3da>
      FileFirmwareUpdateLogHook("OK\n\r");
 8004b92:	480f      	ldr	r0, [pc, #60]	; (8004bd0 <FileTask+0x2ec>)
 8004b94:	f7fb fd7a 	bl	800068c <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateLogHook("Closing firmware file\n\r");
 8004b98:	4818      	ldr	r0, [pc, #96]	; (8004bfc <FileTask+0x318>)
 8004b9a:	f7fb fd77 	bl	800068c <FileFirmwareUpdateLogHook>
      f_close(&fatFsObjects.file);
 8004b9e:	480a      	ldr	r0, [pc, #40]	; (8004bc8 <FileTask+0x2e4>)
 8004ba0:	f002 f912 	bl	8006dc8 <f_close>
      FileFirmwareUpdateLogHook("Firmware update successfully completed\n\r");
 8004ba4:	4816      	ldr	r0, [pc, #88]	; (8004c00 <FileTask+0x31c>)
 8004ba6:	f7fb fd71 	bl	800068c <FileFirmwareUpdateLogHook>
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004baa:	4b04      	ldr	r3, [pc, #16]	; (8004bbc <FileTask+0x2d8>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	701a      	strb	r2, [r3, #0]
      FileFirmwareUpdateCompletedHook();
 8004bb0:	f7fb fd3c 	bl	800062c <FileFirmwareUpdateCompletedHook>
      CpuStartUserProgram();
 8004bb4:	f7ff f906 	bl	8003dc4 <CpuStartUserProgram>
 8004bb8:	e6a1      	b.n	80048fe <FileTask+0x1a>
 8004bba:	bf00      	nop
 8004bbc:	20000d48 	.word	0x20000d48
 8004bc0:	080156f0 	.word	0x080156f0
 8004bc4:	08015714 	.word	0x08015714
 8004bc8:	20000b20 	.word	0x20000b20
 8004bcc:	0801573c 	.word	0x0801573c
 8004bd0:	08015744 	.word	0x08015744
 8004bd4:	0801574c 	.word	0x0801574c
 8004bd8:	08015770 	.word	0x08015770
 8004bdc:	200008e8 	.word	0x200008e8
 8004be0:	200008f0 	.word	0x200008f0
 8004be4:	20000d4c 	.word	0x20000d4c
 8004be8:	080157a0 	.word	0x080157a0
 8004bec:	20000ed0 	.word	0x20000ed0
 8004bf0:	080157ac 	.word	0x080157ac
 8004bf4:	08015850 	.word	0x08015850
 8004bf8:	08015838 	.word	0x08015838
 8004bfc:	08015854 	.word	0x08015854
 8004c00:	0801586c 	.word	0x0801586c
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004c04:	4b35      	ldr	r3, [pc, #212]	; (8004cdc <FileTask+0x3f8>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	701a      	strb	r2, [r3, #0]
      FileFirmwareUpdateLogHook("Reading line from file...ERROR\n\r");
 8004c0a:	4835      	ldr	r0, [pc, #212]	; (8004ce0 <FileTask+0x3fc>)
 8004c0c:	f7fb fd3e 	bl	800068c <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_READ_FROM_FILE);
 8004c10:	2002      	movs	r0, #2
 8004c12:	f7fb fd2d 	bl	8000670 <FileFirmwareUpdateErrorHook>
      f_close(&fatFsObjects.file);
 8004c16:	f504 700c 	add.w	r0, r4, #560	; 0x230
 8004c1a:	f002 f8d5 	bl	8006dc8 <f_close>
      return;
 8004c1e:	e66e      	b.n	80048fe <FileTask+0x1a>
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004c20:	4b2e      	ldr	r3, [pc, #184]	; (8004cdc <FileTask+0x3f8>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	701a      	strb	r2, [r3, #0]
        FileFirmwareUpdateLogHook("Invalid checksum found...ERROR\n\r");
 8004c26:	482f      	ldr	r0, [pc, #188]	; (8004ce4 <FileTask+0x400>)
 8004c28:	f7fb fd30 	bl	800068c <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateErrorHook(FILE_ERROR_INVALID_CHECKSUM_IN_FILE);
 8004c2c:	2003      	movs	r0, #3
 8004c2e:	f7fb fd1f 	bl	8000670 <FileFirmwareUpdateErrorHook>
        f_close(&fatFsObjects.file);
 8004c32:	482d      	ldr	r0, [pc, #180]	; (8004ce8 <FileTask+0x404>)
 8004c34:	f002 f8c8 	bl	8006dc8 <f_close>
        return;
 8004c38:	e661      	b.n	80048fe <FileTask+0x1a>
      FileFirmwareUpdateLogHook("Programming ");
 8004c3a:	482c      	ldr	r0, [pc, #176]	; (8004cec <FileTask+0x408>)
 8004c3c:	f7fb fd26 	bl	800068c <FileFirmwareUpdateLogHook>
      FileLibLongToIntString(parse_result, loggingStr);
 8004c40:	4d2b      	ldr	r5, [pc, #172]	; (8004cf0 <FileTask+0x40c>)
 8004c42:	4629      	mov	r1, r5
 8004c44:	4620      	mov	r0, r4
 8004c46:	f7ff fcbd 	bl	80045c4 <FileLibLongToIntString>
      FileFirmwareUpdateLogHook(loggingStr);
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	f7fb fd1e 	bl	800068c <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateLogHook(" bytes to memory at 0x");
 8004c50:	4828      	ldr	r0, [pc, #160]	; (8004cf4 <FileTask+0x410>)
 8004c52:	f7fb fd1b 	bl	800068c <FileFirmwareUpdateLogHook>
      FileLibByteToHexString((blt_int8u)(lineParseObject.address >> 24), &loggingStr[0]);
 8004c56:	4e28      	ldr	r6, [pc, #160]	; (8004cf8 <FileTask+0x414>)
 8004c58:	4629      	mov	r1, r5
 8004c5a:	f896 0183 	ldrb.w	r0, [r6, #387]	; 0x183
 8004c5e:	f7ff fce7 	bl	8004630 <FileLibByteToHexString>
      FileLibByteToHexString((blt_int8u)(lineParseObject.address >> 16), &loggingStr[2]);
 8004c62:	1ca9      	adds	r1, r5, #2
 8004c64:	f896 0182 	ldrb.w	r0, [r6, #386]	; 0x182
 8004c68:	f7ff fce2 	bl	8004630 <FileLibByteToHexString>
      FileLibByteToHexString((blt_int8u)(lineParseObject.address >> 8), &loggingStr[4]);
 8004c6c:	1d29      	adds	r1, r5, #4
 8004c6e:	f896 0181 	ldrb.w	r0, [r6, #385]	; 0x181
 8004c72:	f7ff fcdd 	bl	8004630 <FileLibByteToHexString>
      FileLibByteToHexString((blt_int8u)lineParseObject.address, &loggingStr[6]);
 8004c76:	1da9      	adds	r1, r5, #6
 8004c78:	f896 0180 	ldrb.w	r0, [r6, #384]	; 0x180
 8004c7c:	f7ff fcd8 	bl	8004630 <FileLibByteToHexString>
      FileFirmwareUpdateLogHook(loggingStr);
 8004c80:	4628      	mov	r0, r5
 8004c82:	f7fb fd03 	bl	800068c <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateLogHook("...");
 8004c86:	481d      	ldr	r0, [pc, #116]	; (8004cfc <FileTask+0x418>)
 8004c88:	f7fb fd00 	bl	800068c <FileFirmwareUpdateLogHook>
      if (NvmWrite(lineParseObject.address, parse_result, lineParseObject.data) == BLT_FALSE)
 8004c8c:	f506 7280 	add.w	r2, r6, #256	; 0x100
 8004c90:	4621      	mov	r1, r4
 8004c92:	f8d6 0180 	ldr.w	r0, [r6, #384]	; 0x180
 8004c96:	f7ff faab 	bl	80041f0 <NvmWrite>
 8004c9a:	b118      	cbz	r0, 8004ca4 <FileTask+0x3c0>
      FileFirmwareUpdateLogHook("OK\n\r");
 8004c9c:	4818      	ldr	r0, [pc, #96]	; (8004d00 <FileTask+0x41c>)
 8004c9e:	f7fb fcf5 	bl	800068c <FileFirmwareUpdateLogHook>
 8004ca2:	e766      	b.n	8004b72 <FileTask+0x28e>
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004ca4:	4b0d      	ldr	r3, [pc, #52]	; (8004cdc <FileTask+0x3f8>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
        FileFirmwareUpdateLogHook("ERROR\n\r");
 8004caa:	4816      	ldr	r0, [pc, #88]	; (8004d04 <FileTask+0x420>)
 8004cac:	f7fb fcee 	bl	800068c <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_PROGRAM_MEMORY);
 8004cb0:	2006      	movs	r0, #6
 8004cb2:	f7fb fcdd 	bl	8000670 <FileFirmwareUpdateErrorHook>
        f_close(&fatFsObjects.file);
 8004cb6:	480c      	ldr	r0, [pc, #48]	; (8004ce8 <FileTask+0x404>)
 8004cb8:	f002 f886 	bl	8006dc8 <f_close>
        return;
 8004cbc:	e61f      	b.n	80048fe <FileTask+0x1a>
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004cbe:	4b07      	ldr	r3, [pc, #28]	; (8004cdc <FileTask+0x3f8>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
        FileFirmwareUpdateLogHook("ERROR\n\r");
 8004cc4:	480f      	ldr	r0, [pc, #60]	; (8004d04 <FileTask+0x420>)
 8004cc6:	f7fb fce1 	bl	800068c <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_WRITE_CHECKSUM);
 8004cca:	2007      	movs	r0, #7
 8004ccc:	f7fb fcd0 	bl	8000670 <FileFirmwareUpdateErrorHook>
        f_close(&fatFsObjects.file);
 8004cd0:	4805      	ldr	r0, [pc, #20]	; (8004ce8 <FileTask+0x404>)
 8004cd2:	f002 f879 	bl	8006dc8 <f_close>
        return;
 8004cd6:	e612      	b.n	80048fe <FileTask+0x1a>
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	20000d48 	.word	0x20000d48
 8004ce0:	080157c8 	.word	0x080157c8
 8004ce4:	080157ec 	.word	0x080157ec
 8004ce8:	20000b20 	.word	0x20000b20
 8004cec:	08015810 	.word	0x08015810
 8004cf0:	20000ed0 	.word	0x20000ed0
 8004cf4:	08015820 	.word	0x08015820
 8004cf8:	20000d4c 	.word	0x20000d4c
 8004cfc:	08015850 	.word	0x08015850
 8004d00:	08015744 	.word	0x08015744
 8004d04:	0801573c 	.word	0x0801573c

08004d08 <XcpProtectResources>:
#if (XCP_RES_PAGING_EN == 1)
  xcpInfo.protection |= XCP_RES_CALPAG;
#endif

#if (XCP_RES_PROGRAMMING_EN == 1)
  xcpInfo.protection |= XCP_RES_PGM;
 8004d08:	4b01      	ldr	r3, [pc, #4]	; (8004d10 <XcpProtectResources+0x8>)
 8004d0a:	2210      	movs	r2, #16
 8004d0c:	705a      	strb	r2, [r3, #1]

#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.protection |= XCP_RES_STIM;
#endif
#endif /* XCP_SEED_KEY_PROTECTION_EN == 1 */
} /*** end of XcpProtectResources ***/
 8004d0e:	4770      	bx	lr
 8004d10:	20000fa0 	.word	0x20000fa0

08004d14 <XcpSetCtoError>:
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 8004d14:	4b03      	ldr	r3, [pc, #12]	; (8004d24 <XcpSetCtoError+0x10>)
 8004d16:	22fe      	movs	r2, #254	; 0xfe
 8004d18:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[1] = error;
 8004d1a:	7118      	strb	r0, [r3, #4]
  xcpInfo.ctoLen = 2;
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpSetCtoError ***/
 8004d22:	4770      	bx	lr
 8004d24:	20000fa0 	.word	0x20000fa0

08004d28 <XcpCmdDisconnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdDisconnect(blt_int8u *data)
{
 8004d28:	b510      	push	{r4, lr}
  /* suppress compiler warning for unused parameter */
  data = data;

  /* indicate that the xcp connection is disconnected */
  xcpInfo.connected = 0;
 8004d2a:	4c05      	ldr	r4, [pc, #20]	; (8004d40 <XcpCmdDisconnect+0x18>)
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	7023      	strb	r3, [r4, #0]

  /* enable resource protection */
  XcpProtectResources();
 8004d30:	f7ff ffea 	bl	8004d08 <XcpProtectResources>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004d34:	23ff      	movs	r3, #255	; 0xff
 8004d36:	70e3      	strb	r3, [r4, #3]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdDisconnect ***/
 8004d3e:	bd10      	pop	{r4, pc}
 8004d40:	20000fa0 	.word	0x20000fa0

08004d44 <XcpCmdGetStatus>:
{
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004d44:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <XcpCmdGetStatus+0x1c>)
 8004d46:	22ff      	movs	r2, #255	; 0xff
 8004d48:	70da      	strb	r2, [r3, #3]

  /* report session status */
  xcpInfo.ctoData[1] = 0;
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	711a      	strb	r2, [r3, #4]

  /* report current resource protection status */
  xcpInfo.ctoData[2] = xcpInfo.protection;
 8004d4e:	7859      	ldrb	r1, [r3, #1]
 8004d50:	7159      	strb	r1, [r3, #5]

  /* reset reserved and session configuration id values */
  xcpInfo.ctoData[3] = 0;
 8004d52:	719a      	strb	r2, [r3, #6]
  xcpInfo.ctoData[4] = 0;
 8004d54:	71da      	strb	r2, [r3, #7]
  xcpInfo.ctoData[5] = 0;
 8004d56:	721a      	strb	r2, [r3, #8]

  /* set packet length */
  xcpInfo.ctoLen = 6;
 8004d58:	2206      	movs	r2, #6
 8004d5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetStatus ***/
 8004d5e:	4770      	bx	lr
 8004d60:	20000fa0 	.word	0x20000fa0

08004d64 <XcpCmdSynch>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSynch(blt_int8u *data)
{
 8004d64:	b508      	push	{r3, lr}
  /* suppress compiler warning for unused parameter */
  data = data;

  /* synch requires a negative response */
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 8004d66:	2000      	movs	r0, #0
 8004d68:	f7ff ffd4 	bl	8004d14 <XcpSetCtoError>
} /*** end of XcpCmdSynch ***/
 8004d6c:	bd08      	pop	{r3, pc}
	...

08004d70 <XcpCmdGetId>:
{
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004d70:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <XcpCmdGetId+0x20>)
 8004d72:	22ff      	movs	r2, #255	; 0xff
 8004d74:	70da      	strb	r2, [r3, #3]

  /* point mta to start of station id string */
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 8004d76:	4a07      	ldr	r2, [pc, #28]	; (8004d94 <XcpCmdGetId+0x24>)
 8004d78:	649a      	str	r2, [r3, #72]	; 0x48

  /* set station id mode to 0 */
  xcpInfo.ctoData[1] = 0;
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	711a      	strb	r2, [r3, #4]

  /* reset reserved values */
  xcpInfo.ctoData[2] = 0;
 8004d7e:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[3] = 0;
 8004d80:	719a      	strb	r2, [r3, #6]

  /* store station id length (excl. null termination) for response packet */
  *(blt_int32u *)&xcpInfo.ctoData[4] = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
 8004d82:	2207      	movs	r2, #7
 8004d84:	f8c3 2007 	str.w	r2, [r3, #7]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8004d88:	2208      	movs	r2, #8
 8004d8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetId ***/
 8004d8e:	4770      	bx	lr
 8004d90:	20000fa0 	.word	0x20000fa0
 8004d94:	080158c4 	.word	0x080158c4

08004d98 <XcpCmdSetMta>:
**
****************************************************************************************/
static void XcpCmdSetMta(blt_int8u *data)
{
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004d98:	4b04      	ldr	r3, [pc, #16]	; (8004dac <XcpCmdSetMta+0x14>)
 8004d9a:	22ff      	movs	r2, #255	; 0xff
 8004d9c:	70da      	strb	r2, [r3, #3]

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = *(blt_int32u *)&data[4];
 8004d9e:	6842      	ldr	r2, [r0, #4]
 8004da0:	649a      	str	r2, [r3, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8004da2:	2201      	movs	r2, #1
 8004da4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdSetMta ***/
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	20000fa0 	.word	0x20000fa0

08004db0 <XcpCmdProgramPrepare>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramPrepare(blt_int8u *data)
{
 8004db0:	b508      	push	{r3, lr}
#if (XCP_SEED_KEY_PROTECTION_EN == 1)
  /* check if PGM resource is unlocked */
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8004db2:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <XcpCmdProgramPrepare+0x1c>)
 8004db4:	785b      	ldrb	r3, [r3, #1]
 8004db6:	f013 0f10 	tst.w	r3, #16
 8004dba:	d103      	bne.n	8004dc4 <XcpCmdProgramPrepare+0x14>
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 8004dbc:	2031      	movs	r0, #49	; 0x31
 8004dbe:	f7ff ffa9 	bl	8004d14 <XcpSetCtoError>
  return;
} /*** end of XcpCmdProgramPrepare ***/
 8004dc2:	bd08      	pop	{r3, pc}
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8004dc4:	2025      	movs	r0, #37	; 0x25
 8004dc6:	f7ff ffa5 	bl	8004d14 <XcpSetCtoError>
    return;
 8004dca:	e7fa      	b.n	8004dc2 <XcpCmdProgramPrepare+0x12>
 8004dcc:	20000fa0 	.word	0x20000fa0

08004dd0 <XcpCmdProgramStart>:
{
 8004dd0:	b538      	push	{r3, r4, r5, lr}
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8004dd2:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <XcpCmdProgramStart+0x34>)
 8004dd4:	785b      	ldrb	r3, [r3, #1]
 8004dd6:	f013 0f10 	tst.w	r3, #16
 8004dda:	d10f      	bne.n	8004dfc <XcpCmdProgramStart+0x2c>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004ddc:	4c09      	ldr	r4, [pc, #36]	; (8004e04 <XcpCmdProgramStart+0x34>)
 8004dde:	23ff      	movs	r3, #255	; 0xff
 8004de0:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] = 0;
 8004de2:	2500      	movs	r5, #0
 8004de4:	7125      	strb	r5, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8004de6:	7165      	strb	r5, [r4, #5]
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8004de8:	f7ff fbc0 	bl	800456c <ComGetActiveInterfaceMaxRxLen>
 8004dec:	71a0      	strb	r0, [r4, #6]
  xcpInfo.ctoData[4] = 0;
 8004dee:	71e5      	strb	r5, [r4, #7]
  xcpInfo.ctoData[5] = 0;
 8004df0:	7225      	strb	r5, [r4, #8]
  xcpInfo.ctoData[6] = 0;
 8004df2:	7265      	strb	r5, [r4, #9]
  xcpInfo.ctoLen = 7;
 8004df4:	2307      	movs	r3, #7
 8004df6:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdProgramStart ***/
 8004dfa:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8004dfc:	2025      	movs	r0, #37	; 0x25
 8004dfe:	f7ff ff89 	bl	8004d14 <XcpSetCtoError>
    return;
 8004e02:	e7fa      	b.n	8004dfa <XcpCmdProgramStart+0x2a>
 8004e04:	20000fa0 	.word	0x20000fa0

08004e08 <XcpCmdConnect>:
{
 8004e08:	b538      	push	{r3, r4, r5, lr}
  if (FileIsIdle() == BLT_FALSE)
 8004e0a:	f7ff fc67 	bl	80046dc <FileIsIdle>
 8004e0e:	b1e8      	cbz	r0, 8004e4c <XcpCmdConnect+0x44>
  XcpProtectResources();
 8004e10:	f7ff ff7a 	bl	8004d08 <XcpProtectResources>
  xcpInfo.connected = 1;
 8004e14:	4c0f      	ldr	r4, [pc, #60]	; (8004e54 <XcpCmdConnect+0x4c>)
 8004e16:	2501      	movs	r5, #1
 8004e18:	7025      	strb	r5, [r4, #0]
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004e1a:	23ff      	movs	r3, #255	; 0xff
 8004e1c:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 8004e1e:	2310      	movs	r3, #16
 8004e20:	7123      	strb	r3, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	7163      	strb	r3, [r4, #5]
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8004e26:	f7ff fba1 	bl	800456c <ComGetActiveInterfaceMaxRxLen>
 8004e2a:	71a0      	strb	r0, [r4, #6]
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 8004e2c:	f7ff fbac 	bl	8004588 <ComGetActiveInterfaceMaxTxLen>
 8004e30:	71e0      	strb	r0, [r4, #7]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 8004e32:	f7ff fba9 	bl	8004588 <ComGetActiveInterfaceMaxTxLen>
 8004e36:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004e3a:	7220      	strb	r0, [r4, #8]
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 8004e3c:	7265      	strb	r5, [r4, #9]
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 8004e3e:	72a5      	strb	r5, [r4, #10]
  xcpInfo.ctoLen = 8;
 8004e40:	2308      	movs	r3, #8
 8004e42:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  NvmInit();
 8004e46:	f7ff f9cf 	bl	80041e8 <NvmInit>
} /*** end of XcpCmdConnect ***/
 8004e4a:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 8004e4c:	2010      	movs	r0, #16
 8004e4e:	f7ff ff61 	bl	8004d14 <XcpSetCtoError>
    return;
 8004e52:	e7fa      	b.n	8004e4a <XcpCmdConnect+0x42>
 8004e54:	20000fa0 	.word	0x20000fa0

08004e58 <XcpCmdUpload>:
{
 8004e58:	b538      	push	{r3, r4, r5, lr}
 8004e5a:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8004e5c:	7845      	ldrb	r5, [r0, #1]
 8004e5e:	f7ff fb85 	bl	800456c <ComGetActiveInterfaceMaxRxLen>
 8004e62:	3801      	subs	r0, #1
 8004e64:	4285      	cmp	r5, r0
 8004e66:	dc15      	bgt.n	8004e94 <XcpCmdUpload+0x3c>
  len = data[1];
 8004e68:	7862      	ldrb	r2, [r4, #1]
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8004e6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <XcpCmdUpload+0x50>)
 8004e6c:	785b      	ldrb	r3, [r3, #1]
 8004e6e:	f013 0f10 	tst.w	r3, #16
 8004e72:	d013      	beq.n	8004e9c <XcpCmdUpload+0x44>
    CpuMemSet((blt_addr)destPtr, 0, len);
 8004e74:	2100      	movs	r1, #0
 8004e76:	480d      	ldr	r0, [pc, #52]	; (8004eac <XcpCmdUpload+0x54>)
 8004e78:	f7fe ffd4 	bl	8003e24 <CpuMemSet>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004e7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ea8 <XcpCmdUpload+0x50>)
 8004e7e:	22ff      	movs	r2, #255	; 0xff
 8004e80:	70da      	strb	r2, [r3, #3]
  xcpInfo.mta += data[1];
 8004e82:	7861      	ldrb	r1, [r4, #1]
 8004e84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e86:	440a      	add	r2, r1
 8004e88:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoLen = data[1]+1;
 8004e8a:	7862      	ldrb	r2, [r4, #1]
 8004e8c:	3201      	adds	r2, #1
 8004e8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdUpload ***/
 8004e92:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8004e94:	2022      	movs	r0, #34	; 0x22
 8004e96:	f7ff ff3d 	bl	8004d14 <XcpSetCtoError>
    return;
 8004e9a:	e7fa      	b.n	8004e92 <XcpCmdUpload+0x3a>
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8004e9c:	4802      	ldr	r0, [pc, #8]	; (8004ea8 <XcpCmdUpload+0x50>)
 8004e9e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004ea0:	3004      	adds	r0, #4
 8004ea2:	f7fe ffaf 	bl	8003e04 <CpuMemCopy>
 8004ea6:	e7e9      	b.n	8004e7c <XcpCmdUpload+0x24>
 8004ea8:	20000fa0 	.word	0x20000fa0
 8004eac:	20000fa4 	.word	0x20000fa4

08004eb0 <XcpCmdShortUpload>:
{
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8004eb4:	7845      	ldrb	r5, [r0, #1]
 8004eb6:	f7ff fb59 	bl	800456c <ComGetActiveInterfaceMaxRxLen>
 8004eba:	3801      	subs	r0, #1
 8004ebc:	4285      	cmp	r5, r0
 8004ebe:	dc17      	bgt.n	8004ef0 <XcpCmdShortUpload+0x40>
  xcpInfo.mta = *(blt_int32u *)&data[4];
 8004ec0:	6861      	ldr	r1, [r4, #4]
 8004ec2:	4b0f      	ldr	r3, [pc, #60]	; (8004f00 <XcpCmdShortUpload+0x50>)
 8004ec4:	6499      	str	r1, [r3, #72]	; 0x48
  len = data[1];
 8004ec6:	7862      	ldrb	r2, [r4, #1]
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8004ec8:	785b      	ldrb	r3, [r3, #1]
 8004eca:	f013 0f10 	tst.w	r3, #16
 8004ece:	d013      	beq.n	8004ef8 <XcpCmdShortUpload+0x48>
    CpuMemSet((blt_addr)destPtr, 0, len);
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	480c      	ldr	r0, [pc, #48]	; (8004f04 <XcpCmdShortUpload+0x54>)
 8004ed4:	f7fe ffa6 	bl	8003e24 <CpuMemSet>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004ed8:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <XcpCmdShortUpload+0x50>)
 8004eda:	22ff      	movs	r2, #255	; 0xff
 8004edc:	70da      	strb	r2, [r3, #3]
  xcpInfo.mta += data[1];
 8004ede:	7861      	ldrb	r1, [r4, #1]
 8004ee0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ee2:	440a      	add	r2, r1
 8004ee4:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoLen = data[1]+1;
 8004ee6:	7862      	ldrb	r2, [r4, #1]
 8004ee8:	3201      	adds	r2, #1
 8004eea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdShortUpload ***/
 8004eee:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8004ef0:	2022      	movs	r0, #34	; 0x22
 8004ef2:	f7ff ff0f 	bl	8004d14 <XcpSetCtoError>
    return;
 8004ef6:	e7fa      	b.n	8004eee <XcpCmdShortUpload+0x3e>
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8004ef8:	4802      	ldr	r0, [pc, #8]	; (8004f04 <XcpCmdShortUpload+0x54>)
 8004efa:	f7fe ff83 	bl	8003e04 <CpuMemCopy>
 8004efe:	e7eb      	b.n	8004ed8 <XcpCmdShortUpload+0x28>
 8004f00:	20000fa0 	.word	0x20000fa0
 8004f04:	20000fa4 	.word	0x20000fa4

08004f08 <XcpComputeChecksum>:
{
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	4605      	mov	r5, r0
 8004f0c:	4617      	mov	r7, r2
  blt_int8u cs = 0;
 8004f0e:	2400      	movs	r4, #0
  while (length-- > 0)
 8004f10:	e006      	b.n	8004f20 <XcpComputeChecksum+0x18>
    cs += *((blt_int8u *)(blt_addr)address);
 8004f12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f16:	441c      	add	r4, r3
 8004f18:	b2e4      	uxtb	r4, r4
    CopService();
 8004f1a:	f7ff fb4f 	bl	80045bc <CopService>
  while (length-- > 0)
 8004f1e:	4631      	mov	r1, r6
 8004f20:	1e4e      	subs	r6, r1, #1
 8004f22:	2900      	cmp	r1, #0
 8004f24:	d1f5      	bne.n	8004f12 <XcpComputeChecksum+0xa>
  *checksum = cs;
 8004f26:	603c      	str	r4, [r7, #0]
} /*** end of XcpComputeChecksum ***/
 8004f28:	2001      	movs	r0, #1
 8004f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004f2c <XcpCmdBuildCheckSum>:
{
 8004f2c:	b510      	push	{r4, lr}
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004f2e:	4c08      	ldr	r4, [pc, #32]	; (8004f50 <XcpCmdBuildCheckSum+0x24>)
 8004f30:	23ff      	movs	r3, #255	; 0xff
 8004f32:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] = XcpComputeChecksum(xcpInfo.mta, *(blt_int32u *)&data[4],
 8004f34:	1de2      	adds	r2, r4, #7
 8004f36:	6841      	ldr	r1, [r0, #4]
 8004f38:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004f3a:	f7ff ffe5 	bl	8004f08 <XcpComputeChecksum>
 8004f3e:	7120      	strb	r0, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	7163      	strb	r3, [r4, #5]
  xcpInfo.ctoData[3] = 0;
 8004f44:	71a3      	strb	r3, [r4, #6]
  xcpInfo.ctoLen = 8;
 8004f46:	2308      	movs	r3, #8
 8004f48:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdBuildCheckSum ***/
 8004f4c:	bd10      	pop	{r4, pc}
 8004f4e:	bf00      	nop
 8004f50:	20000fa0 	.word	0x20000fa0

08004f54 <XcpCmdProgramMax>:
{
 8004f54:	b538      	push	{r3, r4, r5, lr}
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8004f56:	4b12      	ldr	r3, [pc, #72]	; (8004fa0 <XcpCmdProgramMax+0x4c>)
 8004f58:	785b      	ldrb	r3, [r3, #1]
 8004f5a:	f013 0f10 	tst.w	r3, #16
 8004f5e:	d117      	bne.n	8004f90 <XcpCmdProgramMax+0x3c>
 8004f60:	4604      	mov	r4, r0
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 8004f62:	4b0f      	ldr	r3, [pc, #60]	; (8004fa0 <XcpCmdProgramMax+0x4c>)
 8004f64:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8004f66:	f7ff fb01 	bl	800456c <ComGetActiveInterfaceMaxRxLen>
 8004f6a:	1c62      	adds	r2, r4, #1
 8004f6c:	1e41      	subs	r1, r0, #1
 8004f6e:	4628      	mov	r0, r5
 8004f70:	f7ff f93e 	bl	80041f0 <NvmWrite>
 8004f74:	b180      	cbz	r0, 8004f98 <XcpCmdProgramMax+0x44>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004f76:	4c0a      	ldr	r4, [pc, #40]	; (8004fa0 <XcpCmdProgramMax+0x4c>)
 8004f78:	23ff      	movs	r3, #255	; 0xff
 8004f7a:	70e3      	strb	r3, [r4, #3]
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 8004f7c:	f7ff faf6 	bl	800456c <ComGetActiveInterfaceMaxRxLen>
 8004f80:	3801      	subs	r0, #1
 8004f82:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004f84:	4403      	add	r3, r0
 8004f86:	64a3      	str	r3, [r4, #72]	; 0x48
  xcpInfo.ctoLen = 1;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 8004f8e:	e002      	b.n	8004f96 <XcpCmdProgramMax+0x42>
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8004f90:	2025      	movs	r0, #37	; 0x25
 8004f92:	f7ff febf 	bl	8004d14 <XcpSetCtoError>
} /*** end of XcpCmdProgramMax ***/
 8004f96:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_GENERIC);
 8004f98:	2031      	movs	r0, #49	; 0x31
 8004f9a:	f7ff febb 	bl	8004d14 <XcpSetCtoError>
    return;
 8004f9e:	e7fa      	b.n	8004f96 <XcpCmdProgramMax+0x42>
 8004fa0:	20000fa0 	.word	0x20000fa0

08004fa4 <XcpCmdProgram>:
{
 8004fa4:	b538      	push	{r3, r4, r5, lr}
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8004fa6:	4b19      	ldr	r3, [pc, #100]	; (800500c <XcpCmdProgram+0x68>)
 8004fa8:	785b      	ldrb	r3, [r3, #1]
 8004faa:	f013 0f10 	tst.w	r3, #16
 8004fae:	d115      	bne.n	8004fdc <XcpCmdProgram+0x38>
 8004fb0:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 8004fb2:	7845      	ldrb	r5, [r0, #1]
 8004fb4:	f7ff fada 	bl	800456c <ComGetActiveInterfaceMaxRxLen>
 8004fb8:	3802      	subs	r0, #2
 8004fba:	4285      	cmp	r5, r0
 8004fbc:	dc12      	bgt.n	8004fe4 <XcpCmdProgram+0x40>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004fbe:	4b13      	ldr	r3, [pc, #76]	; (800500c <XcpCmdProgram+0x68>)
 8004fc0:	22ff      	movs	r2, #255	; 0xff
 8004fc2:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (data[1] == 0)
 8004fca:	7861      	ldrb	r1, [r4, #1]
 8004fcc:	b971      	cbnz	r1, 8004fec <XcpCmdProgram+0x48>
    if (NvmDone() == BLT_FALSE)
 8004fce:	f7ff f91f 	bl	8004210 <NvmDone>
 8004fd2:	b930      	cbnz	r0, 8004fe2 <XcpCmdProgram+0x3e>
      XcpSetCtoError(XCP_ERR_GENERIC);
 8004fd4:	2031      	movs	r0, #49	; 0x31
 8004fd6:	f7ff fe9d 	bl	8004d14 <XcpSetCtoError>
 8004fda:	e002      	b.n	8004fe2 <XcpCmdProgram+0x3e>
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8004fdc:	2025      	movs	r0, #37	; 0x25
 8004fde:	f7ff fe99 	bl	8004d14 <XcpSetCtoError>
} /*** end of XcpCmdProgram ***/
 8004fe2:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8004fe4:	2022      	movs	r0, #34	; 0x22
 8004fe6:	f7ff fe95 	bl	8004d14 <XcpSetCtoError>
    return;
 8004fea:	e7fa      	b.n	8004fe2 <XcpCmdProgram+0x3e>
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 8004fec:	1ca2      	adds	r2, r4, #2
 8004fee:	4b07      	ldr	r3, [pc, #28]	; (800500c <XcpCmdProgram+0x68>)
 8004ff0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004ff2:	f7ff f8fd 	bl	80041f0 <NvmWrite>
 8004ff6:	b128      	cbz	r0, 8005004 <XcpCmdProgram+0x60>
  xcpInfo.mta += data[1];
 8004ff8:	7861      	ldrb	r1, [r4, #1]
 8004ffa:	4a04      	ldr	r2, [pc, #16]	; (800500c <XcpCmdProgram+0x68>)
 8004ffc:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8004ffe:	440b      	add	r3, r1
 8005000:	6493      	str	r3, [r2, #72]	; 0x48
 8005002:	e7ee      	b.n	8004fe2 <XcpCmdProgram+0x3e>
    XcpSetCtoError(XCP_ERR_GENERIC);
 8005004:	2031      	movs	r0, #49	; 0x31
 8005006:	f7ff fe85 	bl	8004d14 <XcpSetCtoError>
    return;
 800500a:	e7ea      	b.n	8004fe2 <XcpCmdProgram+0x3e>
 800500c:	20000fa0 	.word	0x20000fa0

08005010 <XcpCmdProgramClear>:
{
 8005010:	b508      	push	{r3, lr}
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8005012:	4b0d      	ldr	r3, [pc, #52]	; (8005048 <XcpCmdProgramClear+0x38>)
 8005014:	785b      	ldrb	r3, [r3, #1]
 8005016:	f013 0f10 	tst.w	r3, #16
 800501a:	d10c      	bne.n	8005036 <XcpCmdProgramClear+0x26>
  if (NvmErase((blt_addr)xcpInfo.mta, *(blt_int32u *)&data[4]) == BLT_FALSE)
 800501c:	6841      	ldr	r1, [r0, #4]
 800501e:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <XcpCmdProgramClear+0x38>)
 8005020:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005022:	f7ff f8e9 	bl	80041f8 <NvmErase>
 8005026:	b150      	cbz	r0, 800503e <XcpCmdProgramClear+0x2e>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8005028:	4b07      	ldr	r3, [pc, #28]	; (8005048 <XcpCmdProgramClear+0x38>)
 800502a:	22ff      	movs	r2, #255	; 0xff
 800502c:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 800502e:	2201      	movs	r2, #1
 8005030:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005034:	e002      	b.n	800503c <XcpCmdProgramClear+0x2c>
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8005036:	2025      	movs	r0, #37	; 0x25
 8005038:	f7ff fe6c 	bl	8004d14 <XcpSetCtoError>
} /*** end of XcpCmdProgramClear ***/
 800503c:	bd08      	pop	{r3, pc}
    XcpSetCtoError(XCP_ERR_GENERIC);
 800503e:	2031      	movs	r0, #49	; 0x31
 8005040:	f7ff fe68 	bl	8004d14 <XcpSetCtoError>
    return;
 8005044:	e7fa      	b.n	800503c <XcpCmdProgramClear+0x2c>
 8005046:	bf00      	nop
 8005048:	20000fa0 	.word	0x20000fa0

0800504c <XcpCmdProgramReset>:
{
 800504c:	b508      	push	{r3, lr}
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 800504e:	4b09      	ldr	r3, [pc, #36]	; (8005074 <XcpCmdProgramReset+0x28>)
 8005050:	785b      	ldrb	r3, [r3, #1]
 8005052:	f013 0f10 	tst.w	r3, #16
 8005056:	d108      	bne.n	800506a <XcpCmdProgramReset+0x1e>
  CpuStartUserProgram();
 8005058:	f7fe feb4 	bl	8003dc4 <CpuStartUserProgram>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800505c:	4b05      	ldr	r3, [pc, #20]	; (8005074 <XcpCmdProgramReset+0x28>)
 800505e:	22ff      	movs	r2, #255	; 0xff
 8005060:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 8005062:	2201      	movs	r2, #1
 8005064:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramReset ***/
 8005068:	bd08      	pop	{r3, pc}
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 800506a:	2025      	movs	r0, #37	; 0x25
 800506c:	f7ff fe52 	bl	8004d14 <XcpSetCtoError>
    return;
 8005070:	e7fa      	b.n	8005068 <XcpCmdProgramReset+0x1c>
 8005072:	bf00      	nop
 8005074:	20000fa0 	.word	0x20000fa0

08005078 <XcpGetSeed>:
{
 8005078:	b508      	push	{r3, lr}
  return XcpGetSeedHook(resource, seed);
 800507a:	f7fb fb35 	bl	80006e8 <XcpGetSeedHook>
} /*** end of XcpGetSeed ***/
 800507e:	bd08      	pop	{r3, pc}

08005080 <XcpCmdGetSeed>:
{
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8005082:	4b3f      	ldr	r3, [pc, #252]	; (8005180 <XcpCmdGetSeed+0x100>)
 8005084:	22ff      	movs	r2, #255	; 0xff
 8005086:	70da      	strb	r2, [r3, #3]
  if (data[1] == 0)
 8005088:	7842      	ldrb	r2, [r0, #1]
 800508a:	bb1a      	cbnz	r2, 80050d4 <XcpCmdGetSeed+0x54>
    if (((data[2] & XCP_RES_CALPAG) > 0) && ((data[2] & ~XCP_RES_CALPAG) == 0))
 800508c:	7883      	ldrb	r3, [r0, #2]
 800508e:	f013 0f01 	tst.w	r3, #1
 8005092:	d003      	beq.n	800509c <XcpCmdGetSeed+0x1c>
 8005094:	f033 0101 	bics.w	r1, r3, #1
 8005098:	d100      	bne.n	800509c <XcpCmdGetSeed+0x1c>
      resourceOK = 1;
 800509a:	2201      	movs	r2, #1
    if (((data[2] & XCP_RES_PGM) > 0) && ((data[2] & ~XCP_RES_PGM) == 0))
 800509c:	f013 0f10 	tst.w	r3, #16
 80050a0:	d003      	beq.n	80050aa <XcpCmdGetSeed+0x2a>
 80050a2:	f033 0110 	bics.w	r1, r3, #16
 80050a6:	d100      	bne.n	80050aa <XcpCmdGetSeed+0x2a>
      resourceOK = 1;
 80050a8:	2201      	movs	r2, #1
    if (((data[2] & XCP_RES_DAQ) > 0) && ((data[2] & ~XCP_RES_DAQ) == 0))
 80050aa:	f013 0f04 	tst.w	r3, #4
 80050ae:	d003      	beq.n	80050b8 <XcpCmdGetSeed+0x38>
 80050b0:	f033 0104 	bics.w	r1, r3, #4
 80050b4:	d100      	bne.n	80050b8 <XcpCmdGetSeed+0x38>
      resourceOK = 1;
 80050b6:	2201      	movs	r2, #1
    if (((data[2] & XCP_RES_STIM) > 0) && ((data[2] & ~XCP_RES_STIM) == 0))
 80050b8:	f013 0f08 	tst.w	r3, #8
 80050bc:	d002      	beq.n	80050c4 <XcpCmdGetSeed+0x44>
 80050be:	f033 0108 	bics.w	r1, r3, #8
 80050c2:	d001      	beq.n	80050c8 <XcpCmdGetSeed+0x48>
    if (resourceOK == 0)
 80050c4:	2a00      	cmp	r2, #0
 80050c6:	d02d      	beq.n	8005124 <XcpCmdGetSeed+0xa4>
    if ((xcpInfo.protection & data[2]) == 0)
 80050c8:	4a2d      	ldr	r2, [pc, #180]	; (8005180 <XcpCmdGetSeed+0x100>)
 80050ca:	7852      	ldrb	r2, [r2, #1]
 80050cc:	4213      	tst	r3, r2
 80050ce:	d02d      	beq.n	800512c <XcpCmdGetSeed+0xac>
    xcpInfo.s_n_k_resource = data[2];
 80050d0:	4a2b      	ldr	r2, [pc, #172]	; (8005180 <XcpCmdGetSeed+0x100>)
 80050d2:	7093      	strb	r3, [r2, #2]
  if (data[1] == 0)
 80050d4:	7843      	ldrb	r3, [r0, #1]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d02f      	beq.n	800513a <XcpCmdGetSeed+0xba>
    if (sequenceInProgress == BLT_FALSE)
 80050da:	4b2a      	ldr	r3, [pc, #168]	; (8005184 <XcpCmdGetSeed+0x104>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d041      	beq.n	8005166 <XcpCmdGetSeed+0xe6>
  seedCurrentLen = seedRemainderLen;
 80050e2:	4b29      	ldr	r3, [pc, #164]	; (8005188 <XcpCmdGetSeed+0x108>)
 80050e4:	781c      	ldrb	r4, [r3, #0]
  if (seedCurrentLen > (XCP_CTO_PACKET_LEN-2))
 80050e6:	f7ff fa41 	bl	800456c <ComGetActiveInterfaceMaxRxLen>
 80050ea:	3802      	subs	r0, #2
 80050ec:	4284      	cmp	r4, r0
 80050ee:	dc41      	bgt.n	8005174 <XcpCmdGetSeed+0xf4>
  CpuMemCopy((blt_addr)(&xcpInfo.ctoData[2]), (blt_addr)seedCurrentPtr, seedCurrentLen);
 80050f0:	b2a5      	uxth	r5, r4
 80050f2:	4e26      	ldr	r6, [pc, #152]	; (800518c <XcpCmdGetSeed+0x10c>)
 80050f4:	4f22      	ldr	r7, [pc, #136]	; (8005180 <XcpCmdGetSeed+0x100>)
 80050f6:	462a      	mov	r2, r5
 80050f8:	6831      	ldr	r1, [r6, #0]
 80050fa:	1d78      	adds	r0, r7, #5
 80050fc:	f7fe fe82 	bl	8003e04 <CpuMemCopy>
  xcpInfo.ctoData[1] = seedRemainderLen;
 8005100:	4a21      	ldr	r2, [pc, #132]	; (8005188 <XcpCmdGetSeed+0x108>)
 8005102:	7813      	ldrb	r3, [r2, #0]
 8005104:	713b      	strb	r3, [r7, #4]
  seedRemainderLen -= seedCurrentLen;
 8005106:	1b1b      	subs	r3, r3, r4
 8005108:	b2db      	uxtb	r3, r3
 800510a:	7013      	strb	r3, [r2, #0]
  seedCurrentPtr += seedCurrentLen;
 800510c:	6830      	ldr	r0, [r6, #0]
 800510e:	4404      	add	r4, r0
 8005110:	6034      	str	r4, [r6, #0]
  if (seedRemainderLen == 0)
 8005112:	b913      	cbnz	r3, 800511a <XcpCmdGetSeed+0x9a>
    sequenceInProgress = BLT_FALSE;
 8005114:	4b1b      	ldr	r3, [pc, #108]	; (8005184 <XcpCmdGetSeed+0x104>)
 8005116:	2200      	movs	r2, #0
 8005118:	701a      	strb	r2, [r3, #0]
  xcpInfo.ctoLen = seedCurrentLen + 2;
 800511a:	3502      	adds	r5, #2
 800511c:	4b18      	ldr	r3, [pc, #96]	; (8005180 <XcpCmdGetSeed+0x100>)
 800511e:	f8a3 5044 	strh.w	r5, [r3, #68]	; 0x44
} /*** end of XcpCmdGetSeed ***/
 8005122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8005124:	2022      	movs	r0, #34	; 0x22
 8005126:	f7ff fdf5 	bl	8004d14 <XcpSetCtoError>
      return;
 800512a:	e7fa      	b.n	8005122 <XcpCmdGetSeed+0xa2>
      xcpInfo.ctoData[1] = 0;
 800512c:	4b14      	ldr	r3, [pc, #80]	; (8005180 <XcpCmdGetSeed+0x100>)
 800512e:	2200      	movs	r2, #0
 8005130:	711a      	strb	r2, [r3, #4]
      xcpInfo.ctoLen = 2;
 8005132:	2202      	movs	r2, #2
 8005134:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      return;
 8005138:	e7f3      	b.n	8005122 <XcpCmdGetSeed+0xa2>
    sequenceInProgress = BLT_TRUE;
 800513a:	4b12      	ldr	r3, [pc, #72]	; (8005184 <XcpCmdGetSeed+0x104>)
 800513c:	2201      	movs	r2, #1
 800513e:	701a      	strb	r2, [r3, #0]
    seedRemainderLen = XcpGetSeed(xcpInfo.s_n_k_resource, seedBuffer);
 8005140:	4913      	ldr	r1, [pc, #76]	; (8005190 <XcpCmdGetSeed+0x110>)
 8005142:	4b0f      	ldr	r3, [pc, #60]	; (8005180 <XcpCmdGetSeed+0x100>)
 8005144:	7898      	ldrb	r0, [r3, #2]
 8005146:	f7ff ff97 	bl	8005078 <XcpGetSeed>
 800514a:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <XcpCmdGetSeed+0x108>)
 800514c:	7018      	strb	r0, [r3, #0]
    ASSERT_RT(seedRemainderLen <= XCP_SEED_MAX_LEN);
 800514e:	2840      	cmp	r0, #64	; 0x40
 8005150:	d803      	bhi.n	800515a <XcpCmdGetSeed+0xda>
    seedCurrentPtr = &seedBuffer[0];
 8005152:	4b0e      	ldr	r3, [pc, #56]	; (800518c <XcpCmdGetSeed+0x10c>)
 8005154:	4a0e      	ldr	r2, [pc, #56]	; (8005190 <XcpCmdGetSeed+0x110>)
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	e7c3      	b.n	80050e2 <XcpCmdGetSeed+0x62>
    ASSERT_RT(seedRemainderLen <= XCP_SEED_MAX_LEN);
 800515a:	f44f 7179 	mov.w	r1, #996	; 0x3e4
 800515e:	480d      	ldr	r0, [pc, #52]	; (8005194 <XcpCmdGetSeed+0x114>)
 8005160:	f7ff f94c 	bl	80043fc <AssertFailure>
 8005164:	e7f5      	b.n	8005152 <XcpCmdGetSeed+0xd2>
      XcpSetCtoError(XCP_ERR_SEQUENCE);
 8005166:	2029      	movs	r0, #41	; 0x29
 8005168:	f7ff fdd4 	bl	8004d14 <XcpSetCtoError>
      xcpInfo.s_n_k_resource = 0;
 800516c:	4b04      	ldr	r3, [pc, #16]	; (8005180 <XcpCmdGetSeed+0x100>)
 800516e:	2200      	movs	r2, #0
 8005170:	709a      	strb	r2, [r3, #2]
      return;
 8005172:	e7d6      	b.n	8005122 <XcpCmdGetSeed+0xa2>
    seedCurrentLen = XCP_CTO_PACKET_LEN-2;
 8005174:	f7ff f9fa 	bl	800456c <ComGetActiveInterfaceMaxRxLen>
 8005178:	b2c4      	uxtb	r4, r0
 800517a:	3c02      	subs	r4, #2
 800517c:	b2e4      	uxtb	r4, r4
 800517e:	e7b7      	b.n	80050f0 <XcpCmdGetSeed+0x70>
 8005180:	20000fa0 	.word	0x20000fa0
 8005184:	20000f9d 	.word	0x20000f9d
 8005188:	20000f9c 	.word	0x20000f9c
 800518c:	20000f98 	.word	0x20000f98
 8005190:	20000f58 	.word	0x20000f58
 8005194:	08015898 	.word	0x08015898

08005198 <XcpVerifyKey>:
{
 8005198:	b508      	push	{r3, lr}
  return XcpVerifyKeyHook(resource, key, len);
 800519a:	f7fb faac 	bl	80006f6 <XcpVerifyKeyHook>
} /*** end of XcpVerifyKey ***/
 800519e:	bd08      	pop	{r3, pc}

080051a0 <XcpCmdUnlock>:
{
 80051a0:	b570      	push	{r4, r5, r6, lr}
  if (data[1] > XCP_KEY_MAX_LEN)
 80051a2:	7844      	ldrb	r4, [r0, #1]
 80051a4:	2c40      	cmp	r4, #64	; 0x40
 80051a6:	d82e      	bhi.n	8005206 <XcpCmdUnlock+0x66>
 80051a8:	4606      	mov	r6, r0
  if (data[1] >= keyPreviousRemainder)
 80051aa:	4b2c      	ldr	r3, [pc, #176]	; (800525c <XcpCmdUnlock+0xbc>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	429c      	cmp	r4, r3
 80051b0:	d307      	bcc.n	80051c2 <XcpCmdUnlock+0x22>
    keyTotalLen = data[1];
 80051b2:	4b2b      	ldr	r3, [pc, #172]	; (8005260 <XcpCmdUnlock+0xc0>)
 80051b4:	701c      	strb	r4, [r3, #0]
    keyCurrentPtr = &keyBuffer[0];
 80051b6:	4b2b      	ldr	r3, [pc, #172]	; (8005264 <XcpCmdUnlock+0xc4>)
 80051b8:	4a2b      	ldr	r2, [pc, #172]	; (8005268 <XcpCmdUnlock+0xc8>)
 80051ba:	601a      	str	r2, [r3, #0]
    keyReceivedLen = 0;
 80051bc:	4b2b      	ldr	r3, [pc, #172]	; (800526c <XcpCmdUnlock+0xcc>)
 80051be:	2200      	movs	r2, #0
 80051c0:	701a      	strb	r2, [r3, #0]
  keyPreviousRemainder = data[1];
 80051c2:	4b26      	ldr	r3, [pc, #152]	; (800525c <XcpCmdUnlock+0xbc>)
 80051c4:	701c      	strb	r4, [r3, #0]
  if (keyCurrentLen > (XCP_CTO_PACKET_LEN-2))
 80051c6:	f7ff f9d1 	bl	800456c <ComGetActiveInterfaceMaxRxLen>
 80051ca:	3802      	subs	r0, #2
 80051cc:	4284      	cmp	r4, r0
 80051ce:	dc23      	bgt.n	8005218 <XcpCmdUnlock+0x78>
  CpuMemCopy((blt_addr)keyCurrentPtr, (blt_addr)(&data[2]), keyCurrentLen);
 80051d0:	4d24      	ldr	r5, [pc, #144]	; (8005264 <XcpCmdUnlock+0xc4>)
 80051d2:	4622      	mov	r2, r4
 80051d4:	1cb1      	adds	r1, r6, #2
 80051d6:	6828      	ldr	r0, [r5, #0]
 80051d8:	f7fe fe14 	bl	8003e04 <CpuMemCopy>
  keyCurrentPtr += keyCurrentLen;
 80051dc:	682b      	ldr	r3, [r5, #0]
 80051de:	4423      	add	r3, r4
 80051e0:	602b      	str	r3, [r5, #0]
  keyReceivedLen += keyCurrentLen;
 80051e2:	4b22      	ldr	r3, [pc, #136]	; (800526c <XcpCmdUnlock+0xcc>)
 80051e4:	7818      	ldrb	r0, [r3, #0]
 80051e6:	4404      	add	r4, r0
 80051e8:	b2e4      	uxtb	r4, r4
 80051ea:	701c      	strb	r4, [r3, #0]
  if (keyReceivedLen >= keyTotalLen)
 80051ec:	4b1c      	ldr	r3, [pc, #112]	; (8005260 <XcpCmdUnlock+0xc0>)
 80051ee:	781a      	ldrb	r2, [r3, #0]
 80051f0:	4294      	cmp	r4, r2
 80051f2:	d217      	bcs.n	8005224 <XcpCmdUnlock+0x84>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80051f4:	4b1e      	ldr	r3, [pc, #120]	; (8005270 <XcpCmdUnlock+0xd0>)
 80051f6:	22ff      	movs	r2, #255	; 0xff
 80051f8:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[1] = xcpInfo.protection;
 80051fa:	785a      	ldrb	r2, [r3, #1]
 80051fc:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoLen = 2;
 80051fe:	2202      	movs	r2, #2
 8005200:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdUnlock ***/
 8005204:	bd70      	pop	{r4, r5, r6, pc}
    keyPreviousRemainder = 0;
 8005206:	2400      	movs	r4, #0
 8005208:	4b14      	ldr	r3, [pc, #80]	; (800525c <XcpCmdUnlock+0xbc>)
 800520a:	701c      	strb	r4, [r3, #0]
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 800520c:	2022      	movs	r0, #34	; 0x22
 800520e:	f7ff fd81 	bl	8004d14 <XcpSetCtoError>
    xcpInfo.s_n_k_resource = 0;
 8005212:	4b17      	ldr	r3, [pc, #92]	; (8005270 <XcpCmdUnlock+0xd0>)
 8005214:	709c      	strb	r4, [r3, #2]
    return;
 8005216:	e7f5      	b.n	8005204 <XcpCmdUnlock+0x64>
    keyCurrentLen = XCP_CTO_PACKET_LEN-2;
 8005218:	f7ff f9a8 	bl	800456c <ComGetActiveInterfaceMaxRxLen>
 800521c:	b2c4      	uxtb	r4, r0
 800521e:	3c02      	subs	r4, #2
 8005220:	b2e4      	uxtb	r4, r4
 8005222:	e7d5      	b.n	80051d0 <XcpCmdUnlock+0x30>
    keyPreviousRemainder = 0;
 8005224:	4b0d      	ldr	r3, [pc, #52]	; (800525c <XcpCmdUnlock+0xbc>)
 8005226:	2100      	movs	r1, #0
 8005228:	7019      	strb	r1, [r3, #0]
    if (XcpVerifyKey(xcpInfo.s_n_k_resource, keyBuffer, keyTotalLen) == 0)
 800522a:	490f      	ldr	r1, [pc, #60]	; (8005268 <XcpCmdUnlock+0xc8>)
 800522c:	4b10      	ldr	r3, [pc, #64]	; (8005270 <XcpCmdUnlock+0xd0>)
 800522e:	7898      	ldrb	r0, [r3, #2]
 8005230:	f7ff ffb2 	bl	8005198 <XcpVerifyKey>
 8005234:	b140      	cbz	r0, 8005248 <XcpCmdUnlock+0xa8>
    xcpInfo.protection &= ~xcpInfo.s_n_k_resource;
 8005236:	4b0e      	ldr	r3, [pc, #56]	; (8005270 <XcpCmdUnlock+0xd0>)
 8005238:	7899      	ldrb	r1, [r3, #2]
 800523a:	785a      	ldrb	r2, [r3, #1]
 800523c:	ea22 0201 	bic.w	r2, r2, r1
 8005240:	705a      	strb	r2, [r3, #1]
    xcpInfo.s_n_k_resource = 0;
 8005242:	2200      	movs	r2, #0
 8005244:	709a      	strb	r2, [r3, #2]
 8005246:	e7d5      	b.n	80051f4 <XcpCmdUnlock+0x54>
      XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8005248:	2025      	movs	r0, #37	; 0x25
 800524a:	f7ff fd63 	bl	8004d14 <XcpSetCtoError>
      xcpInfo.connected = 0;
 800524e:	4b08      	ldr	r3, [pc, #32]	; (8005270 <XcpCmdUnlock+0xd0>)
 8005250:	2200      	movs	r2, #0
 8005252:	701a      	strb	r2, [r3, #0]
      xcpInfo.s_n_k_resource = 0;
 8005254:	709a      	strb	r2, [r3, #2]
      XcpProtectResources();
 8005256:	f7ff fd57 	bl	8004d08 <XcpProtectResources>
      return;
 800525a:	e7d3      	b.n	8005204 <XcpCmdUnlock+0x64>
 800525c:	20000f54 	.word	0x20000f54
 8005260:	20000f56 	.word	0x20000f56
 8005264:	20000f50 	.word	0x20000f50
 8005268:	20000f10 	.word	0x20000f10
 800526c:	20000f55 	.word	0x20000f55
 8005270:	20000fa0 	.word	0x20000fa0

08005274 <XcpTransmitPacket>:
{
 8005274:	b508      	push	{r3, lr}
  ComTransmitPacket(data, len);
 8005276:	b289      	uxth	r1, r1
 8005278:	f7ff f960 	bl	800453c <ComTransmitPacket>
} /*** end of XcpTransmitPacket ***/
 800527c:	bd08      	pop	{r3, pc}
	...

08005280 <XcpInit>:
  xcpInfo.connected = 0;
 8005280:	4b05      	ldr	r3, [pc, #20]	; (8005298 <XcpInit+0x18>)
 8005282:	2200      	movs	r2, #0
 8005284:	701a      	strb	r2, [r3, #0]
  xcpInfo.mta = 0;
 8005286:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoPending = 0;
 8005288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  xcpInfo.ctoLen = 0;
 800528c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  xcpInfo.s_n_k_resource = 0;
 8005290:	709a      	strb	r2, [r3, #2]
  xcpInfo.protection = 0;
 8005292:	705a      	strb	r2, [r3, #1]
} /*** end of XcpInit ***/
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000fa0 	.word	0x20000fa0

0800529c <XcpIsConnected>:
  if (xcpInfo.connected == 0)
 800529c:	4b03      	ldr	r3, [pc, #12]	; (80052ac <XcpIsConnected+0x10>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	b10b      	cbz	r3, 80052a6 <XcpIsConnected+0xa>
  return BLT_TRUE;
 80052a2:	2001      	movs	r0, #1
} /*** end of XcpIsConnected ***/
 80052a4:	4770      	bx	lr
    return BLT_FALSE;
 80052a6:	2000      	movs	r0, #0
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	20000fa0 	.word	0x20000fa0

080052b0 <XcpPacketTransmitted>:
  xcpInfo.ctoPending = 0;
 80052b0:	4b02      	ldr	r3, [pc, #8]	; (80052bc <XcpPacketTransmitted+0xc>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
} /*** end of XcpPacketTransmitted ***/
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	20000fa0 	.word	0x20000fa0

080052c0 <XcpPacketReceived>:
{
 80052c0:	b508      	push	{r3, lr}
  if (data[0] == XCP_CMD_CONNECT)
 80052c2:	7803      	ldrb	r3, [r0, #0]
 80052c4:	2bff      	cmp	r3, #255	; 0xff
 80052c6:	d004      	beq.n	80052d2 <XcpPacketReceived+0x12>
  else if (xcpInfo.connected == 1)
 80052c8:	4a38      	ldr	r2, [pc, #224]	; (80053ac <XcpPacketReceived+0xec>)
 80052ca:	7812      	ldrb	r2, [r2, #0]
 80052cc:	2a01      	cmp	r2, #1
 80052ce:	d014      	beq.n	80052fa <XcpPacketReceived+0x3a>
} /*** end of XcpPacketReceived ***/
 80052d0:	bd08      	pop	{r3, pc}
    XcpCmdConnect(data);
 80052d2:	f7ff fd99 	bl	8004e08 <XcpCmdConnect>
  if (xcpInfo.ctoPending == 1)
 80052d6:	4b35      	ldr	r3, [pc, #212]	; (80053ac <XcpPacketReceived+0xec>)
 80052d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d060      	beq.n	80053a2 <XcpPacketReceived+0xe2>
  if (xcpInfo.ctoLen > 0)
 80052e0:	4b32      	ldr	r3, [pc, #200]	; (80053ac <XcpPacketReceived+0xec>)
 80052e2:	f9b3 1044 	ldrsh.w	r1, [r3, #68]	; 0x44
 80052e6:	2900      	cmp	r1, #0
 80052e8:	ddf2      	ble.n	80052d0 <XcpPacketReceived+0x10>
    xcpInfo.ctoPending = 1;
 80052ea:	4618      	mov	r0, r3
 80052ec:	2301      	movs	r3, #1
 80052ee:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
    XcpTransmitPacket(xcpInfo.ctoData, xcpInfo.ctoLen);
 80052f2:	3003      	adds	r0, #3
 80052f4:	f7ff ffbe 	bl	8005274 <XcpTransmitPacket>
 80052f8:	e7ea      	b.n	80052d0 <XcpPacketReceived+0x10>
    switch (data[0])
 80052fa:	3bc9      	subs	r3, #201	; 0xc9
 80052fc:	2b35      	cmp	r3, #53	; 0x35
 80052fe:	d84c      	bhi.n	800539a <XcpPacketReceived+0xda>
 8005300:	e8df f003 	tbb	[pc, r3]
 8005304:	424b4b33 	.word	0x424b4b33
 8005308:	363f4b4b 	.word	0x363f4b4b
 800530c:	4b4b393c 	.word	0x4b4b393c
 8005310:	4b4b4b4b 	.word	0x4b4b4b4b
 8005314:	4b4b4b4b 	.word	0x4b4b4b4b
 8005318:	4b4b4b4b 	.word	0x4b4b4b4b
 800531c:	4b4b4b4b 	.word	0x4b4b4b4b
 8005320:	4b4b4b4b 	.word	0x4b4b4b4b
 8005324:	4b4b4b4b 	.word	0x4b4b4b4b
 8005328:	4b4b4b4b 	.word	0x4b4b4b4b
 800532c:	1e244b4b 	.word	0x1e244b4b
 8005330:	4548211b 	.word	0x4548211b
 8005334:	2a4b274b 	.word	0x2a4b274b
 8005338:	302d      	.short	0x302d
        XcpCmdUpload(data);
 800533a:	f7ff fd8d 	bl	8004e58 <XcpCmdUpload>
        break;
 800533e:	e7ca      	b.n	80052d6 <XcpPacketReceived+0x16>
        XcpCmdShortUpload(data);
 8005340:	f7ff fdb6 	bl	8004eb0 <XcpCmdShortUpload>
        break;
 8005344:	e7c7      	b.n	80052d6 <XcpPacketReceived+0x16>
        XcpCmdSetMta(data);
 8005346:	f7ff fd27 	bl	8004d98 <XcpCmdSetMta>
        break;
 800534a:	e7c4      	b.n	80052d6 <XcpPacketReceived+0x16>
        XcpCmdBuildCheckSum(data);
 800534c:	f7ff fdee 	bl	8004f2c <XcpCmdBuildCheckSum>
        break;
 8005350:	e7c1      	b.n	80052d6 <XcpPacketReceived+0x16>
        XcpCmdGetId(data);
 8005352:	f7ff fd0d 	bl	8004d70 <XcpCmdGetId>
        break;
 8005356:	e7be      	b.n	80052d6 <XcpPacketReceived+0x16>
        XcpCmdSynch(data);
 8005358:	f7ff fd04 	bl	8004d64 <XcpCmdSynch>
        break;
 800535c:	e7bb      	b.n	80052d6 <XcpPacketReceived+0x16>
        XcpCmdGetStatus(data);
 800535e:	f7ff fcf1 	bl	8004d44 <XcpCmdGetStatus>
        break;
 8005362:	e7b8      	b.n	80052d6 <XcpPacketReceived+0x16>
        XcpCmdDisconnect(data);
 8005364:	f7ff fce0 	bl	8004d28 <XcpCmdDisconnect>
        break;
 8005368:	e7b5      	b.n	80052d6 <XcpPacketReceived+0x16>
        XcpCmdProgramMax(data);
 800536a:	f7ff fdf3 	bl	8004f54 <XcpCmdProgramMax>
        break;
 800536e:	e7b2      	b.n	80052d6 <XcpPacketReceived+0x16>
        XcpCmdProgram(data);
 8005370:	f7ff fe18 	bl	8004fa4 <XcpCmdProgram>
        break;
 8005374:	e7af      	b.n	80052d6 <XcpPacketReceived+0x16>
        XcpCmdProgramStart(data);
 8005376:	f7ff fd2b 	bl	8004dd0 <XcpCmdProgramStart>
        break;
 800537a:	e7ac      	b.n	80052d6 <XcpPacketReceived+0x16>
        XcpCmdProgramClear(data);
 800537c:	f7ff fe48 	bl	8005010 <XcpCmdProgramClear>
        break;
 8005380:	e7a9      	b.n	80052d6 <XcpPacketReceived+0x16>
        XcpCmdProgramReset(data);
 8005382:	f7ff fe63 	bl	800504c <XcpCmdProgramReset>
        break;
 8005386:	e7a6      	b.n	80052d6 <XcpPacketReceived+0x16>
        XcpCmdProgramPrepare(data);
 8005388:	f7ff fd12 	bl	8004db0 <XcpCmdProgramPrepare>
        break;
 800538c:	e7a3      	b.n	80052d6 <XcpPacketReceived+0x16>
        XcpCmdGetSeed(data);
 800538e:	f7ff fe77 	bl	8005080 <XcpCmdGetSeed>
        break;
 8005392:	e7a0      	b.n	80052d6 <XcpPacketReceived+0x16>
        XcpCmdUnlock(data);
 8005394:	f7ff ff04 	bl	80051a0 <XcpCmdUnlock>
        break;
 8005398:	e79d      	b.n	80052d6 <XcpPacketReceived+0x16>
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 800539a:	2020      	movs	r0, #32
 800539c:	f7ff fcba 	bl	8004d14 <XcpSetCtoError>
        break;
 80053a0:	e799      	b.n	80052d6 <XcpPacketReceived+0x16>
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 80053a2:	2010      	movs	r0, #16
 80053a4:	f7ff fcb6 	bl	8004d14 <XcpSetCtoError>
 80053a8:	e79a      	b.n	80052e0 <XcpPacketReceived+0x20>
 80053aa:	bf00      	nop
 80053ac:	20000fa0 	.word	0x20000fa0

080053b0 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 80053b0:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 80053b2:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80053b4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80053b8:	4770      	bx	lr

080053ba <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 80053ba:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 80053bc:	7883      	ldrb	r3, [r0, #2]
 80053be:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 80053c2:	7843      	ldrb	r3, [r0, #1]
 80053c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80053c8:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80053ca:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80053ce:	4770      	bx	lr

080053d0 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80053d0:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 80053d2:	0a09      	lsrs	r1, r1, #8
 80053d4:	7041      	strb	r1, [r0, #1]
}
 80053d6:	4770      	bx	lr

080053d8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80053d8:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80053da:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80053de:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 80053e0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80053e4:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80053e6:	0e09      	lsrs	r1, r1, #24
 80053e8:	70c1      	strb	r1, [r0, #3]
}
 80053ea:	4770      	bx	lr

080053ec <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 80053ec:	4613      	mov	r3, r2
 80053ee:	b12a      	cbz	r2, 80053fc <mem_cpy+0x10>
		do *d++ = *s++; while (--cnt);
 80053f0:	780a      	ldrb	r2, [r1, #0]
 80053f2:	7002      	strb	r2, [r0, #0]
 80053f4:	3001      	adds	r0, #1
 80053f6:	3101      	adds	r1, #1
 80053f8:	3b01      	subs	r3, #1
 80053fa:	d1f9      	bne.n	80053f0 <mem_cpy+0x4>
	}
}
 80053fc:	4770      	bx	lr

080053fe <mem_set>:
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
 80053fe:	7001      	strb	r1, [r0, #0]
 8005400:	3001      	adds	r0, #1
 8005402:	3a01      	subs	r2, #1
 8005404:	d1fb      	bne.n	80053fe <mem_set>
}
 8005406:	4770      	bx	lr

08005408 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005408:	b430      	push	{r4, r5}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 800540a:	1c45      	adds	r5, r0, #1
 800540c:	7803      	ldrb	r3, [r0, #0]
 800540e:	7808      	ldrb	r0, [r1, #0]
 8005410:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
 8005412:	3a01      	subs	r2, #1
 8005414:	d004      	beq.n	8005420 <mem_cmp+0x18>
 8005416:	1c4c      	adds	r4, r1, #1
		r = *d++ - *s++;
 8005418:	4628      	mov	r0, r5
 800541a:	4621      	mov	r1, r4
	} while (--cnt && r == 0);
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0f4      	beq.n	800540a <mem_cmp+0x2>

	return r;
}
 8005420:	4618      	mov	r0, r3
 8005422:	bc30      	pop	{r4, r5}
 8005424:	4770      	bx	lr

08005426 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
	while (*str && *str != chr) str++;
 8005426:	e000      	b.n	800542a <chk_chr+0x4>
 8005428:	3001      	adds	r0, #1
 800542a:	7803      	ldrb	r3, [r0, #0]
 800542c:	b10b      	cbz	r3, 8005432 <chk_chr+0xc>
 800542e:	428b      	cmp	r3, r1
 8005430:	d1fa      	bne.n	8005428 <chk_chr+0x2>
	return *str;
}
 8005432:	4618      	mov	r0, r3
 8005434:	4770      	bx	lr

08005436 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8005436:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005438:	6943      	ldr	r3, [r0, #20]
 800543a:	3b02      	subs	r3, #2
 800543c:	428b      	cmp	r3, r1
 800543e:	d904      	bls.n	800544a <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8005440:	8943      	ldrh	r3, [r0, #10]
 8005442:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005444:	fb01 0003 	mla	r0, r1, r3, r0
 8005448:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800544a:	2000      	movs	r0, #0
}
 800544c:	4770      	bx	lr

0800544e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800544e:	b570      	push	{r4, r5, r6, lr}
 8005450:	4606      	mov	r6, r0
 8005452:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005454:	f101 001a 	add.w	r0, r1, #26
 8005458:	f7ff ffaa 	bl	80053b0 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 800545c:	7833      	ldrb	r3, [r6, #0]
 800545e:	2b03      	cmp	r3, #3
 8005460:	d000      	beq.n	8005464 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 8005462:	bd70      	pop	{r4, r5, r6, pc}
 8005464:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005466:	f105 0014 	add.w	r0, r5, #20
 800546a:	f7ff ffa1 	bl	80053b0 <ld_word>
 800546e:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 8005472:	e7f6      	b.n	8005462 <ld_clust+0x14>

08005474 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	4606      	mov	r6, r0
 8005478:	460c      	mov	r4, r1
 800547a:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800547c:	b291      	uxth	r1, r2
 800547e:	f104 001a 	add.w	r0, r4, #26
 8005482:	f7ff ffa5 	bl	80053d0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005486:	7833      	ldrb	r3, [r6, #0]
 8005488:	2b03      	cmp	r3, #3
 800548a:	d000      	beq.n	800548e <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 800548c:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800548e:	0c29      	lsrs	r1, r5, #16
 8005490:	f104 0014 	add.w	r0, r4, #20
 8005494:	f7ff ff9c 	bl	80053d0 <st_word>
}
 8005498:	e7f8      	b.n	800548c <st_clust+0x18>
	...

0800549c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800549c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054a0:	4607      	mov	r7, r0
 80054a2:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80054a4:	f101 001a 	add.w	r0, r1, #26
 80054a8:	f7ff ff82 	bl	80053b0 <ld_word>
 80054ac:	bb60      	cbnz	r0, 8005508 <pick_lfn+0x6c>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80054ae:	7835      	ldrb	r5, [r6, #0]
 80054b0:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 80054b4:	3d01      	subs	r5, #1
 80054b6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80054ba:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80054be:	f04f 0801 	mov.w	r8, #1
 80054c2:	2400      	movs	r4, #0
 80054c4:	e004      	b.n	80054d0 <pick_lfn+0x34>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80054c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054ca:	4298      	cmp	r0, r3
 80054cc:	d121      	bne.n	8005512 <pick_lfn+0x76>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80054ce:	3401      	adds	r4, #1
 80054d0:	2c0c      	cmp	r4, #12
 80054d2:	d80e      	bhi.n	80054f2 <pick_lfn+0x56>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80054d4:	4b12      	ldr	r3, [pc, #72]	; (8005520 <pick_lfn+0x84>)
 80054d6:	5d18      	ldrb	r0, [r3, r4]
 80054d8:	4430      	add	r0, r6
 80054da:	f7ff ff69 	bl	80053b0 <ld_word>
		if (wc) {
 80054de:	f1b8 0f00 	cmp.w	r8, #0
 80054e2:	d0f0      	beq.n	80054c6 <pick_lfn+0x2a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80054e4:	2dfe      	cmp	r5, #254	; 0xfe
 80054e6:	d812      	bhi.n	800550e <pick_lfn+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80054e8:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 80054ec:	4680      	mov	r8, r0
 80054ee:	3501      	adds	r5, #1
 80054f0:	e7ed      	b.n	80054ce <pick_lfn+0x32>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80054f2:	7833      	ldrb	r3, [r6, #0]
 80054f4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80054f8:	d00d      	beq.n	8005516 <pick_lfn+0x7a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80054fa:	2dfe      	cmp	r5, #254	; 0xfe
 80054fc:	d80d      	bhi.n	800551a <pick_lfn+0x7e>
		lfnbuf[i] = 0;
 80054fe:	2300      	movs	r3, #0
 8005500:	f827 3015 	strh.w	r3, [r7, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
 8005504:	2001      	movs	r0, #1
 8005506:	e000      	b.n	800550a <pick_lfn+0x6e>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005508:	2000      	movs	r0, #0
}
 800550a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800550e:	2000      	movs	r0, #0
 8005510:	e7fb      	b.n	800550a <pick_lfn+0x6e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005512:	2000      	movs	r0, #0
 8005514:	e7f9      	b.n	800550a <pick_lfn+0x6e>
	return 1;		/* The part of LFN is valid */
 8005516:	2001      	movs	r0, #1
 8005518:	e7f7      	b.n	800550a <pick_lfn+0x6e>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800551a:	2000      	movs	r0, #0
 800551c:	e7f5      	b.n	800550a <pick_lfn+0x6e>
 800551e:	bf00      	nop
 8005520:	0801594c 	.word	0x0801594c

08005524 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005528:	4680      	mov	r8, r0
 800552a:	460f      	mov	r7, r1
 800552c:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800552e:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005530:	230f      	movs	r3, #15
 8005532:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 8005534:	2400      	movs	r4, #0
 8005536:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 8005538:	4621      	mov	r1, r4
 800553a:	f107 001a 	add.w	r0, r7, #26
 800553e:	f7ff ff47 	bl	80053d0 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005542:	f109 36ff 	add.w	r6, r9, #4294967295
 8005546:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800554a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 800554e:	4625      	mov	r5, r4
 8005550:	e002      	b.n	8005558 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 8005552:	3401      	adds	r4, #1
 8005554:	2c0c      	cmp	r4, #12
 8005556:	d811      	bhi.n	800557c <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800555c:	429d      	cmp	r5, r3
 800555e:	d002      	beq.n	8005566 <put_lfn+0x42>
 8005560:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 8005564:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005566:	4b0c      	ldr	r3, [pc, #48]	; (8005598 <put_lfn+0x74>)
 8005568:	5d18      	ldrb	r0, [r3, r4]
 800556a:	4629      	mov	r1, r5
 800556c:	4438      	add	r0, r7
 800556e:	f7ff ff2f 	bl	80053d0 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005572:	2d00      	cmp	r5, #0
 8005574:	d1ed      	bne.n	8005552 <put_lfn+0x2e>
 8005576:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800557a:	e7ea      	b.n	8005552 <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800557c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005580:	429d      	cmp	r5, r3
 8005582:	d002      	beq.n	800558a <put_lfn+0x66>
 8005584:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 8005588:	b90b      	cbnz	r3, 800558e <put_lfn+0x6a>
 800558a:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800558e:	f887 9000 	strb.w	r9, [r7]
}
 8005592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005596:	bf00      	nop
 8005598:	0801594c 	.word	0x0801594c

0800559c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	4605      	mov	r5, r0
 80055a2:	4616      	mov	r6, r2
 80055a4:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80055a6:	220b      	movs	r2, #11
 80055a8:	f7ff ff20 	bl	80053ec <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80055ac:	2c05      	cmp	r4, #5
 80055ae:	d811      	bhi.n	80055d4 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 80055b0:	2207      	movs	r2, #7
 80055b2:	e01d      	b.n	80055f0 <gen_numname+0x54>
 80055b4:	3201      	adds	r2, #1
 80055b6:	2a0f      	cmp	r2, #15
 80055b8:	d80c      	bhi.n	80055d4 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 80055ba:	f003 0101 	and.w	r1, r3, #1
 80055be:	eb01 0444 	add.w	r4, r1, r4, lsl #1
				wc >>= 1;
 80055c2:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 80055c4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80055c8:	d0f4      	beq.n	80055b4 <gen_numname+0x18>
 80055ca:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 80055ce:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 80055d2:	e7ef      	b.n	80055b4 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 80055d4:	8833      	ldrh	r3, [r6, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0ea      	beq.n	80055b0 <gen_numname+0x14>
			wc = *lfn++;
 80055da:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 80055dc:	2200      	movs	r2, #0
 80055de:	e7ea      	b.n	80055b6 <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (seq % 16) + '0';
		if (c > '9') c += 7;
		ns[i--] = c;
 80055e0:	1e53      	subs	r3, r2, #1
 80055e2:	a802      	add	r0, sp, #8
 80055e4:	4402      	add	r2, r0
 80055e6:	f802 1c08 	strb.w	r1, [r2, #-8]
		seq /= 16;
	} while (seq);
 80055ea:	0924      	lsrs	r4, r4, #4
 80055ec:	d009      	beq.n	8005602 <gen_numname+0x66>
		ns[i--] = c;
 80055ee:	461a      	mov	r2, r3
		c = (seq % 16) + '0';
 80055f0:	f004 030f 	and.w	r3, r4, #15
 80055f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
		if (c > '9') c += 7;
 80055f8:	2939      	cmp	r1, #57	; 0x39
 80055fa:	d9f1      	bls.n	80055e0 <gen_numname+0x44>
 80055fc:	f103 0137 	add.w	r1, r3, #55	; 0x37
 8005600:	e7ee      	b.n	80055e0 <gen_numname+0x44>
	ns[i] = '~';
 8005602:	217e      	movs	r1, #126	; 0x7e
 8005604:	4602      	mov	r2, r0
 8005606:	441a      	add	r2, r3
 8005608:	f802 1c08 	strb.w	r1, [r2, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800560c:	e000      	b.n	8005610 <gen_numname+0x74>
 800560e:	3401      	adds	r4, #1
 8005610:	429c      	cmp	r4, r3
 8005612:	d209      	bcs.n	8005628 <gen_numname+0x8c>
 8005614:	5d2a      	ldrb	r2, [r5, r4]
 8005616:	2a20      	cmp	r2, #32
 8005618:	d1f9      	bne.n	800560e <gen_numname+0x72>
 800561a:	e005      	b.n	8005628 <gen_numname+0x8c>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800561c:	2120      	movs	r1, #32
 800561e:	1c62      	adds	r2, r4, #1
 8005620:	5529      	strb	r1, [r5, r4]
	} while (j < 8);
 8005622:	2a07      	cmp	r2, #7
 8005624:	d808      	bhi.n	8005638 <gen_numname+0x9c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005626:	4614      	mov	r4, r2
 8005628:	2b07      	cmp	r3, #7
 800562a:	d8f7      	bhi.n	800561c <gen_numname+0x80>
 800562c:	aa02      	add	r2, sp, #8
 800562e:	441a      	add	r2, r3
 8005630:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8005634:	3301      	adds	r3, #1
 8005636:	e7f2      	b.n	800561e <gen_numname+0x82>
}
 8005638:	b002      	add	sp, #8
 800563a:	bd70      	pop	{r4, r5, r6, pc}

0800563c <sum_sfn>:
#if _USE_LFN != 0
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800563c:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 800563e:	220b      	movs	r2, #11
	BYTE sum = 0;
 8005640:	2000      	movs	r0, #0

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8005642:	01c3      	lsls	r3, r0, #7
 8005644:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8005648:	7808      	ldrb	r0, [r1, #0]
 800564a:	fa50 f383 	uxtab	r3, r0, r3
 800564e:	b2d8      	uxtb	r0, r3
 8005650:	3101      	adds	r1, #1
 8005652:	3a01      	subs	r2, #1
 8005654:	d1f5      	bne.n	8005642 <sum_sfn+0x6>
	return sum;
}
 8005656:	4770      	bx	lr

08005658 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005658:	6801      	ldr	r1, [r0, #0]
 800565a:	b109      	cbz	r1, 8005660 <get_ldnumber+0x8>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800565c:	460a      	mov	r2, r1
 800565e:	e003      	b.n	8005668 <get_ldnumber+0x10>
	int vol = -1;
 8005660:	f04f 33ff 	mov.w	r3, #4294967295
 8005664:	e008      	b.n	8005678 <get_ldnumber+0x20>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005666:	3201      	adds	r2, #1
 8005668:	7813      	ldrb	r3, [r2, #0]
 800566a:	2b1f      	cmp	r3, #31
 800566c:	d901      	bls.n	8005672 <get_ldnumber+0x1a>
 800566e:	2b3a      	cmp	r3, #58	; 0x3a
 8005670:	d1f9      	bne.n	8005666 <get_ldnumber+0xe>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005672:	2b3a      	cmp	r3, #58	; 0x3a
 8005674:	d002      	beq.n	800567c <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005676:	2300      	movs	r3, #0
#endif
	}
	return vol;
}
 8005678:	4618      	mov	r0, r3
 800567a:	4770      	bx	lr
{
 800567c:	b410      	push	{r4}
			i = *tp++ - '0'; 
 800567e:	1c4c      	adds	r4, r1, #1
 8005680:	780b      	ldrb	r3, [r1, #0]
 8005682:	3b30      	subs	r3, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005684:	2b09      	cmp	r3, #9
 8005686:	d808      	bhi.n	800569a <get_ldnumber+0x42>
 8005688:	42a2      	cmp	r2, r4
 800568a:	d109      	bne.n	80056a0 <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800568c:	b95b      	cbnz	r3, 80056a6 <get_ldnumber+0x4e>
					*path = ++tt;
 800568e:	3201      	adds	r2, #1
 8005690:	6002      	str	r2, [r0, #0]
}
 8005692:	4618      	mov	r0, r3
 8005694:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005698:	4770      	bx	lr
	int vol = -1;
 800569a:	f04f 33ff 	mov.w	r3, #4294967295
 800569e:	e7f8      	b.n	8005692 <get_ldnumber+0x3a>
 80056a0:	f04f 33ff 	mov.w	r3, #4294967295
 80056a4:	e7f5      	b.n	8005692 <get_ldnumber+0x3a>
 80056a6:	f04f 33ff 	mov.w	r3, #4294967295
 80056aa:	e7f2      	b.n	8005692 <get_ldnumber+0x3a>

080056ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	void* dfp,		/* Pointer to the FIL/DIR object to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80056ac:	b538      	push	{r3, r4, r5, lr}
 80056ae:	460d      	mov	r5, r1
	_FDID *obj = (_FDID*)dfp;	/* Assuming .obj in the FIL/DIR is the first member */
	FRESULT res;


	if (!dfp || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 80056b0:	b140      	cbz	r0, 80056c4 <validate+0x18>
 80056b2:	4604      	mov	r4, r0
 80056b4:	6803      	ldr	r3, [r0, #0]
 80056b6:	b12b      	cbz	r3, 80056c4 <validate+0x18>
 80056b8:	781a      	ldrb	r2, [r3, #0]
 80056ba:	b11a      	cbz	r2, 80056c4 <validate+0x18>
 80056bc:	88d9      	ldrh	r1, [r3, #6]
 80056be:	8882      	ldrh	r2, [r0, #4]
 80056c0:	4291      	cmp	r1, r2
 80056c2:	d003      	beq.n	80056cc <validate+0x20>
		*fs = 0;				/* The object is invalid */
 80056c4:	2300      	movs	r3, #0
 80056c6:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;
 80056c8:	2009      	movs	r0, #9
		*fs = obj->fs;			/* Owner file sytem object */
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;
	}
	return res;
}
 80056ca:	bd38      	pop	{r3, r4, r5, pc}
	if (!dfp || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 80056cc:	7858      	ldrb	r0, [r3, #1]
 80056ce:	f7fe fae5 	bl	8003c9c <disk_status>
 80056d2:	f010 0f01 	tst.w	r0, #1
 80056d6:	d1f5      	bne.n	80056c4 <validate+0x18>
		*fs = obj->fs;			/* Owner file sytem object */
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	602b      	str	r3, [r5, #0]
		res = FR_OK;
 80056dc:	2000      	movs	r0, #0
 80056de:	e7f4      	b.n	80056ca <validate+0x1e>

080056e0 <sync_window>:
{
 80056e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80056e2:	78c3      	ldrb	r3, [r0, #3]
 80056e4:	b90b      	cbnz	r3, 80056ea <sync_window+0xa>
	FRESULT res = FR_OK;
 80056e6:	2000      	movs	r0, #0
}
 80056e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ea:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 80056ec:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80056ee:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80056f2:	2301      	movs	r3, #1
 80056f4:	462a      	mov	r2, r5
 80056f6:	4639      	mov	r1, r7
 80056f8:	7840      	ldrb	r0, [r0, #1]
 80056fa:	f7fe fad9 	bl	8003cb0 <disk_write>
 80056fe:	b9a8      	cbnz	r0, 800572c <sync_window+0x4c>
			fs->wflag = 0;
 8005700:	2300      	movs	r3, #0
 8005702:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005704:	6a23      	ldr	r3, [r4, #32]
 8005706:	1aeb      	subs	r3, r5, r3
 8005708:	69a2      	ldr	r2, [r4, #24]
 800570a:	4293      	cmp	r3, r2
 800570c:	d210      	bcs.n	8005730 <sync_window+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800570e:	78a6      	ldrb	r6, [r4, #2]
 8005710:	2e01      	cmp	r6, #1
 8005712:	d909      	bls.n	8005728 <sync_window+0x48>
					wsect += fs->fsize;
 8005714:	69a3      	ldr	r3, [r4, #24]
 8005716:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8005718:	2301      	movs	r3, #1
 800571a:	462a      	mov	r2, r5
 800571c:	4639      	mov	r1, r7
 800571e:	7860      	ldrb	r0, [r4, #1]
 8005720:	f7fe fac6 	bl	8003cb0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005724:	3e01      	subs	r6, #1
 8005726:	e7f3      	b.n	8005710 <sync_window+0x30>
	FRESULT res = FR_OK;
 8005728:	2000      	movs	r0, #0
 800572a:	e7dd      	b.n	80056e8 <sync_window+0x8>
			res = FR_DISK_ERR;
 800572c:	2001      	movs	r0, #1
 800572e:	e7db      	b.n	80056e8 <sync_window+0x8>
	FRESULT res = FR_OK;
 8005730:	2000      	movs	r0, #0
 8005732:	e7d9      	b.n	80056e8 <sync_window+0x8>

08005734 <move_window>:
{
 8005734:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8005736:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005738:	428b      	cmp	r3, r1
 800573a:	d012      	beq.n	8005762 <move_window+0x2e>
 800573c:	4604      	mov	r4, r0
 800573e:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8005740:	f7ff ffce 	bl	80056e0 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005744:	4606      	mov	r6, r0
 8005746:	b968      	cbnz	r0, 8005764 <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005748:	2301      	movs	r3, #1
 800574a:	462a      	mov	r2, r5
 800574c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8005750:	7860      	ldrb	r0, [r4, #1]
 8005752:	f7fe faa8 	bl	8003ca6 <disk_read>
 8005756:	b110      	cbz	r0, 800575e <move_window+0x2a>
				res = FR_DISK_ERR;
 8005758:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800575a:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 800575e:	62e5      	str	r5, [r4, #44]	; 0x2c
 8005760:	e000      	b.n	8005764 <move_window+0x30>
	FRESULT res = FR_OK;
 8005762:	2600      	movs	r6, #0
}
 8005764:	4630      	mov	r0, r6
 8005766:	bd70      	pop	{r4, r5, r6, pc}

08005768 <check_fs>:
{
 8005768:	b510      	push	{r4, lr}
 800576a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800576c:	2300      	movs	r3, #0
 800576e:	70c3      	strb	r3, [r0, #3]
 8005770:	f04f 33ff 	mov.w	r3, #4294967295
 8005774:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005776:	f7ff ffdd 	bl	8005734 <move_window>
 800577a:	b9d8      	cbnz	r0, 80057b4 <check_fs+0x4c>
	if (ld_word(&fs->win[BS_55AA]) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800577c:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8005780:	f7ff fe16 	bl	80053b0 <ld_word>
 8005784:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005788:	4298      	cmp	r0, r3
 800578a:	d115      	bne.n	80057b8 <check_fs+0x50>
	if ((ld_dword(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800578c:	f104 0066 	add.w	r0, r4, #102	; 0x66
 8005790:	f7ff fe13 	bl	80053ba <ld_dword>
 8005794:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8005798:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <check_fs+0x5c>)
 800579a:	4298      	cmp	r0, r3
 800579c:	d00e      	beq.n	80057bc <check_fs+0x54>
	if ((ld_dword(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800579e:	f104 0082 	add.w	r0, r4, #130	; 0x82
 80057a2:	f7ff fe0a 	bl	80053ba <ld_dword>
 80057a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80057aa:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <check_fs+0x5c>)
 80057ac:	4298      	cmp	r0, r3
 80057ae:	d107      	bne.n	80057c0 <check_fs+0x58>
 80057b0:	2000      	movs	r0, #0
 80057b2:	e002      	b.n	80057ba <check_fs+0x52>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80057b4:	2004      	movs	r0, #4
 80057b6:	e000      	b.n	80057ba <check_fs+0x52>
	if (ld_word(&fs->win[BS_55AA]) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80057b8:	2003      	movs	r0, #3
}
 80057ba:	bd10      	pop	{r4, pc}
	if ((ld_dword(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80057bc:	2000      	movs	r0, #0
 80057be:	e7fc      	b.n	80057ba <check_fs+0x52>
	return 2;
 80057c0:	2002      	movs	r0, #2
 80057c2:	e7fa      	b.n	80057ba <check_fs+0x52>
 80057c4:	00544146 	.word	0x00544146

080057c8 <find_volume>:
{
 80057c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	460f      	mov	r7, r1
 80057d0:	4616      	mov	r6, r2
	*rfs = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 80057d6:	f7ff ff3f 	bl	8005658 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80057da:	1e05      	subs	r5, r0, #0
 80057dc:	f2c0 8141 	blt.w	8005a62 <find_volume+0x29a>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80057e0:	4bb5      	ldr	r3, [pc, #724]	; (8005ab8 <find_volume+0x2f0>)
 80057e2:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80057e6:	2c00      	cmp	r4, #0
 80057e8:	f000 813f 	beq.w	8005a6a <find_volume+0x2a2>
	*rfs = fs;							/* Return pointer to the file system object */
 80057ec:	603c      	str	r4, [r7, #0]
	mode &= ~FA_READ;					/* Desired access mode, write access or not */
 80057ee:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80057f2:	7823      	ldrb	r3, [r4, #0]
 80057f4:	b173      	cbz	r3, 8005814 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 80057f6:	7860      	ldrb	r0, [r4, #1]
 80057f8:	f7fe fa50 	bl	8003c9c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80057fc:	f010 0f01 	tst.w	r0, #1
 8005800:	d108      	bne.n	8005814 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005802:	2e00      	cmp	r6, #0
 8005804:	f000 8133 	beq.w	8005a6e <find_volume+0x2a6>
 8005808:	f010 0f04 	tst.w	r0, #4
 800580c:	f040 8131 	bne.w	8005a72 <find_volume+0x2aa>
			return FR_OK;				/* The file system object is valid */
 8005810:	2000      	movs	r0, #0
 8005812:	e127      	b.n	8005a64 <find_volume+0x29c>
	fs->fs_type = 0;					/* Clear the file system object */
 8005814:	2300      	movs	r3, #0
 8005816:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005818:	b2e8      	uxtb	r0, r5
 800581a:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800581c:	f7fe fa2e 	bl	8003c7c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005820:	f010 0f01 	tst.w	r0, #1
 8005824:	f040 8127 	bne.w	8005a76 <find_volume+0x2ae>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005828:	b11e      	cbz	r6, 8005832 <find_volume+0x6a>
 800582a:	f010 0f04 	tst.w	r0, #4
 800582e:	f040 8124 	bne.w	8005a7a <find_volume+0x2b2>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005832:	2100      	movs	r1, #0
 8005834:	4620      	mov	r0, r4
 8005836:	f7ff ff97 	bl	8005768 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol))) {	/* Not an FAT boot sector or forced partition number */
 800583a:	2802      	cmp	r0, #2
 800583c:	f000 80b3 	beq.w	80059a6 <find_volume+0x1de>
	bsect = 0;
 8005840:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005842:	2804      	cmp	r0, #4
 8005844:	f000 811b 	beq.w	8005a7e <find_volume+0x2b6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005848:	2801      	cmp	r0, #1
 800584a:	f200 811a 	bhi.w	8005a82 <find_volume+0x2ba>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800584e:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8005852:	f7ff fdad 	bl	80053b0 <ld_word>
 8005856:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800585a:	f040 8114 	bne.w	8005a86 <find_volume+0x2be>
		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
 800585e:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8005862:	f7ff fda5 	bl	80053b0 <ld_word>
 8005866:	4607      	mov	r7, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005868:	b920      	cbnz	r0, 8005874 <find_volume+0xac>
 800586a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800586e:	f7ff fda4 	bl	80053ba <ld_dword>
 8005872:	4607      	mov	r7, r0
		fs->fsize = fasize;
 8005874:	61a7      	str	r7, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
 8005876:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800587a:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800587c:	1e53      	subs	r3, r2, #1
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b01      	cmp	r3, #1
 8005882:	f200 8102 	bhi.w	8005a8a <find_volume+0x2c2>
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005886:	fb07 f502 	mul.w	r5, r7, r2
		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
 800588a:	f894 803d 	ldrb.w	r8, [r4, #61]	; 0x3d
 800588e:	f8a4 800a 	strh.w	r8, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005892:	f1b8 0f00 	cmp.w	r8, #0
 8005896:	f000 80fa 	beq.w	8005a8e <find_volume+0x2c6>
 800589a:	f108 33ff 	add.w	r3, r8, #4294967295
 800589e:	ea18 0f03 	tst.w	r8, r3
 80058a2:	f040 80f6 	bne.w	8005a92 <find_volume+0x2ca>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80058a6:	f104 0041 	add.w	r0, r4, #65	; 0x41
 80058aa:	f7ff fd81 	bl	80053b0 <ld_word>
 80058ae:	4682      	mov	sl, r0
 80058b0:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80058b2:	f010 0f0f 	tst.w	r0, #15
 80058b6:	f040 80ee 	bne.w	8005a96 <find_volume+0x2ce>
		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 80058ba:	f104 0043 	add.w	r0, r4, #67	; 0x43
 80058be:	f7ff fd77 	bl	80053b0 <ld_word>
 80058c2:	4681      	mov	r9, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80058c4:	b920      	cbnz	r0, 80058d0 <find_volume+0x108>
 80058c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058ca:	f7ff fd76 	bl	80053ba <ld_dword>
 80058ce:	4681      	mov	r9, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80058d0:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 80058d4:	f7ff fd6c 	bl	80053b0 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
 80058d8:	4601      	mov	r1, r0
 80058da:	2800      	cmp	r0, #0
 80058dc:	f000 80dd 	beq.w	8005a9a <find_volume+0x2d2>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80058e0:	1942      	adds	r2, r0, r5
 80058e2:	eb02 121a 	add.w	r2, r2, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80058e6:	4591      	cmp	r9, r2
 80058e8:	f0c0 80d9 	bcc.w	8005a9e <find_volume+0x2d6>
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80058ec:	eba9 0302 	sub.w	r3, r9, r2
 80058f0:	fbb3 f3f8 	udiv	r3, r3, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 80d4 	beq.w	8005aa2 <find_volume+0x2da>
		if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80058fa:	f640 70f5 	movw	r0, #4085	; 0xff5
 80058fe:	4283      	cmp	r3, r0
 8005900:	d869      	bhi.n	80059d6 <find_volume+0x20e>
		fmt = FS_FAT12;
 8005902:	f04f 0901 	mov.w	r9, #1
		if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005906:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800590a:	4283      	cmp	r3, r0
 800590c:	d901      	bls.n	8005912 <find_volume+0x14a>
 800590e:	f04f 0903 	mov.w	r9, #3
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005912:	f103 0802 	add.w	r8, r3, #2
 8005916:	f8c4 8014 	str.w	r8, [r4, #20]
		fs->volbase = bsect;								/* Volume start sector */
 800591a:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800591c:	198b      	adds	r3, r1, r6
 800591e:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;						/* Data start sector */
 8005920:	4432      	add	r2, r6
 8005922:	62a2      	str	r2, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005924:	f1b9 0f03 	cmp.w	r9, #3
 8005928:	d058      	beq.n	80059dc <find_volume+0x214>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800592a:	f1ba 0f00 	cmp.w	sl, #0
 800592e:	f000 80be 	beq.w	8005aae <find_volume+0x2e6>
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005932:	442b      	add	r3, r5
 8005934:	6263      	str	r3, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005936:	f1b9 0f02 	cmp.w	r9, #2
 800593a:	d060      	beq.n	80059fe <find_volume+0x236>
 800593c:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 8005940:	f008 0301 	and.w	r3, r8, #1
 8005944:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005948:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800594c:	ebb7 2f53 	cmp.w	r7, r3, lsr #9
 8005950:	f0c0 80af 	bcc.w	8005ab2 <find_volume+0x2ea>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;
 8005954:	f04f 33ff 	mov.w	r3, #4294967295
 8005958:	6123      	str	r3, [r4, #16]
 800595a:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 800595c:	2380      	movs	r3, #128	; 0x80
 800595e:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005960:	f1b9 0f03 	cmp.w	r9, #3
 8005964:	d04e      	beq.n	8005a04 <find_volume+0x23c>
	fs->fs_type = fmt;	/* FAT sub-type */
 8005966:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;	/* File system mount ID */
 800596a:	4a54      	ldr	r2, [pc, #336]	; (8005abc <find_volume+0x2f4>)
 800596c:	8813      	ldrh	r3, [r2, #0]
 800596e:	3301      	adds	r3, #1
 8005970:	b29b      	uxth	r3, r3
 8005972:	8013      	strh	r3, [r2, #0]
 8005974:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 8005976:	2000      	movs	r0, #0
 8005978:	e074      	b.n	8005a64 <find_volume+0x29c>
			br[i] = pt[4] ? ld_dword(&pt[8]) : 0;
 800597a:	2000      	movs	r0, #0
 800597c:	ab04      	add	r3, sp, #16
 800597e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8005982:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005986:	3501      	adds	r5, #1
 8005988:	2d03      	cmp	r5, #3
 800598a:	d80e      	bhi.n	80059aa <find_volume+0x1e2>
			pt = fs->win + MBR_Table + i * SZ_PTE;
 800598c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8005990:	012b      	lsls	r3, r5, #4
 8005992:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005996:	4418      	add	r0, r3
			br[i] = pt[4] ? ld_dword(&pt[8]) : 0;
 8005998:	7903      	ldrb	r3, [r0, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0ed      	beq.n	800597a <find_volume+0x1b2>
 800599e:	3008      	adds	r0, #8
 80059a0:	f7ff fd0b 	bl	80053ba <ld_dword>
 80059a4:	e7ea      	b.n	800597c <find_volume+0x1b4>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80059a6:	2500      	movs	r5, #0
 80059a8:	e7ee      	b.n	8005988 <find_volume+0x1c0>
 80059aa:	2500      	movs	r5, #0
 80059ac:	e00a      	b.n	80059c4 <find_volume+0x1fc>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80059ae:	4631      	mov	r1, r6
 80059b0:	4620      	mov	r0, r4
 80059b2:	f7ff fed9 	bl	8005768 <check_fs>
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
 80059b6:	2801      	cmp	r0, #1
 80059b8:	f67f af43 	bls.w	8005842 <find_volume+0x7a>
 80059bc:	3501      	adds	r5, #1
 80059be:	2d03      	cmp	r5, #3
 80059c0:	f63f af3f 	bhi.w	8005842 <find_volume+0x7a>
			bsect = br[i];
 80059c4:	ab04      	add	r3, sp, #16
 80059c6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80059ca:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80059ce:	2e00      	cmp	r6, #0
 80059d0:	d1ed      	bne.n	80059ae <find_volume+0x1e6>
 80059d2:	2003      	movs	r0, #3
 80059d4:	e7f2      	b.n	80059bc <find_volume+0x1f4>
		if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80059d6:	f04f 0902 	mov.w	r9, #2
 80059da:	e794      	b.n	8005906 <find_volume+0x13e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80059dc:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 80059e0:	f7ff fce6 	bl	80053b0 <ld_word>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	d15e      	bne.n	8005aa6 <find_volume+0x2de>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80059e8:	f1ba 0f00 	cmp.w	sl, #0
 80059ec:	d15d      	bne.n	8005aaa <find_volume+0x2e2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80059ee:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059f2:	f7ff fce2 	bl	80053ba <ld_dword>
 80059f6:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80059f8:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80059fc:	e7a4      	b.n	8005948 <find_volume+0x180>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80059fe:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8005a02:	e7a1      	b.n	8005948 <find_volume+0x180>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005a04:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8005a08:	f7ff fcd2 	bl	80053b0 <ld_word>
 8005a0c:	2801      	cmp	r0, #1
 8005a0e:	d1aa      	bne.n	8005966 <find_volume+0x19e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005a10:	1c71      	adds	r1, r6, #1
 8005a12:	4620      	mov	r0, r4
 8005a14:	f7ff fe8e 	bl	8005734 <move_window>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	d1a4      	bne.n	8005966 <find_volume+0x19e>
			fs->fsi_flag = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005a20:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8005a24:	f7ff fcc4 	bl	80053b0 <ld_word>
 8005a28:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005a2c:	4298      	cmp	r0, r3
 8005a2e:	d19a      	bne.n	8005966 <find_volume+0x19e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005a30:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8005a34:	f7ff fcc1 	bl	80053ba <ld_dword>
 8005a38:	4b21      	ldr	r3, [pc, #132]	; (8005ac0 <find_volume+0x2f8>)
 8005a3a:	4298      	cmp	r0, r3
 8005a3c:	d193      	bne.n	8005966 <find_volume+0x19e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005a3e:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8005a42:	f7ff fcba 	bl	80053ba <ld_dword>
 8005a46:	4b1f      	ldr	r3, [pc, #124]	; (8005ac4 <find_volume+0x2fc>)
 8005a48:	4298      	cmp	r0, r3
 8005a4a:	d18c      	bne.n	8005966 <find_volume+0x19e>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005a4c:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8005a50:	f7ff fcb3 	bl	80053ba <ld_dword>
 8005a54:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005a56:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8005a5a:	f7ff fcae 	bl	80053ba <ld_dword>
 8005a5e:	60e0      	str	r0, [r4, #12]
 8005a60:	e781      	b.n	8005966 <find_volume+0x19e>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005a62:	200b      	movs	r0, #11
}
 8005a64:	b004      	add	sp, #16
 8005a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005a6a:	200c      	movs	r0, #12
 8005a6c:	e7fa      	b.n	8005a64 <find_volume+0x29c>
			return FR_OK;				/* The file system object is valid */
 8005a6e:	2000      	movs	r0, #0
 8005a70:	e7f8      	b.n	8005a64 <find_volume+0x29c>
				return FR_WRITE_PROTECTED;
 8005a72:	200a      	movs	r0, #10
 8005a74:	e7f6      	b.n	8005a64 <find_volume+0x29c>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005a76:	2003      	movs	r0, #3
 8005a78:	e7f4      	b.n	8005a64 <find_volume+0x29c>
		return FR_WRITE_PROTECTED;
 8005a7a:	200a      	movs	r0, #10
 8005a7c:	e7f2      	b.n	8005a64 <find_volume+0x29c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005a7e:	2001      	movs	r0, #1
 8005a80:	e7f0      	b.n	8005a64 <find_volume+0x29c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005a82:	200d      	movs	r0, #13
 8005a84:	e7ee      	b.n	8005a64 <find_volume+0x29c>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005a86:	200d      	movs	r0, #13
 8005a88:	e7ec      	b.n	8005a64 <find_volume+0x29c>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005a8a:	200d      	movs	r0, #13
 8005a8c:	e7ea      	b.n	8005a64 <find_volume+0x29c>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005a8e:	200d      	movs	r0, #13
 8005a90:	e7e8      	b.n	8005a64 <find_volume+0x29c>
 8005a92:	200d      	movs	r0, #13
 8005a94:	e7e6      	b.n	8005a64 <find_volume+0x29c>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005a96:	200d      	movs	r0, #13
 8005a98:	e7e4      	b.n	8005a64 <find_volume+0x29c>
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
 8005a9a:	200d      	movs	r0, #13
 8005a9c:	e7e2      	b.n	8005a64 <find_volume+0x29c>
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005a9e:	200d      	movs	r0, #13
 8005aa0:	e7e0      	b.n	8005a64 <find_volume+0x29c>
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
 8005aa2:	200d      	movs	r0, #13
 8005aa4:	e7de      	b.n	8005a64 <find_volume+0x29c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005aa6:	200d      	movs	r0, #13
 8005aa8:	e7dc      	b.n	8005a64 <find_volume+0x29c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005aaa:	200d      	movs	r0, #13
 8005aac:	e7da      	b.n	8005a64 <find_volume+0x29c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005aae:	200d      	movs	r0, #13
 8005ab0:	e7d8      	b.n	8005a64 <find_volume+0x29c>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005ab2:	200d      	movs	r0, #13
 8005ab4:	e7d6      	b.n	8005a64 <find_volume+0x29c>
 8005ab6:	bf00      	nop
 8005ab8:	20000fec 	.word	0x20000fec
 8005abc:	20000ff0 	.word	0x20000ff0
 8005ac0:	41615252 	.word	0x41615252
 8005ac4:	61417272 	.word	0x61417272

08005ac8 <get_fat>:
{
 8005ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8005aca:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005acc:	2901      	cmp	r1, #1
 8005ace:	d952      	bls.n	8005b76 <get_fat+0xae>
 8005ad0:	6973      	ldr	r3, [r6, #20]
 8005ad2:	428b      	cmp	r3, r1
 8005ad4:	d951      	bls.n	8005b7a <get_fat+0xb2>
 8005ad6:	460c      	mov	r4, r1
		switch (fs->fs_type) {
 8005ad8:	7833      	ldrb	r3, [r6, #0]
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d02b      	beq.n	8005b36 <get_fat+0x6e>
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d038      	beq.n	8005b54 <get_fat+0x8c>
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d001      	beq.n	8005aea <get_fat+0x22>
			val = 1;	/* Internal error */
 8005ae6:	2001      	movs	r0, #1
 8005ae8:	e046      	b.n	8005b78 <get_fat+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 8005aea:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005aee:	6a31      	ldr	r1, [r6, #32]
 8005af0:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 8005af4:	4630      	mov	r0, r6
 8005af6:	f7ff fe1d 	bl	8005734 <move_window>
 8005afa:	2800      	cmp	r0, #0
 8005afc:	d13f      	bne.n	8005b7e <get_fat+0xb6>
			wc = fs->win[bc++ % SS(fs)];
 8005afe:	1c6f      	adds	r7, r5, #1
 8005b00:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8005b04:	4435      	add	r5, r6
 8005b06:	f895 5030 	ldrb.w	r5, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b0a:	6a31      	ldr	r1, [r6, #32]
 8005b0c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8005b10:	4630      	mov	r0, r6
 8005b12:	f7ff fe0f 	bl	8005734 <move_window>
 8005b16:	bba8      	cbnz	r0, 8005b84 <get_fat+0xbc>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005b18:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8005b1c:	443e      	add	r6, r7
 8005b1e:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8005b22:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005b26:	f014 0f01 	tst.w	r4, #1
 8005b2a:	d001      	beq.n	8005b30 <get_fat+0x68>
 8005b2c:	0900      	lsrs	r0, r0, #4
 8005b2e:	e023      	b.n	8005b78 <get_fat+0xb0>
 8005b30:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8005b34:	e020      	b.n	8005b78 <get_fat+0xb0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005b36:	6a31      	ldr	r1, [r6, #32]
 8005b38:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	f7ff fdf9 	bl	8005734 <move_window>
 8005b42:	bb10      	cbnz	r0, 8005b8a <get_fat+0xc2>
			val = ld_word(&fs->win[clst * 2 % SS(fs)]);
 8005b44:	0060      	lsls	r0, r4, #1
 8005b46:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
 8005b4a:	3030      	adds	r0, #48	; 0x30
 8005b4c:	4430      	add	r0, r6
 8005b4e:	f7ff fc2f 	bl	80053b0 <ld_word>
			break;
 8005b52:	e011      	b.n	8005b78 <get_fat+0xb0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005b54:	6a31      	ldr	r1, [r6, #32]
 8005b56:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	f7ff fdea 	bl	8005734 <move_window>
 8005b60:	b9b0      	cbnz	r0, 8005b90 <get_fat+0xc8>
			val = ld_dword(&fs->win[clst * 4 % SS(fs)]) & 0x0FFFFFFF;
 8005b62:	00a0      	lsls	r0, r4, #2
 8005b64:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
 8005b68:	3030      	adds	r0, #48	; 0x30
 8005b6a:	4430      	add	r0, r6
 8005b6c:	f7ff fc25 	bl	80053ba <ld_dword>
 8005b70:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8005b74:	e000      	b.n	8005b78 <get_fat+0xb0>
		val = 1;	/* Internal error */
 8005b76:	2001      	movs	r0, #1
}
 8005b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8005b7a:	2001      	movs	r0, #1
 8005b7c:	e7fc      	b.n	8005b78 <get_fat+0xb0>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b82:	e7f9      	b.n	8005b78 <get_fat+0xb0>
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295
 8005b88:	e7f6      	b.n	8005b78 <get_fat+0xb0>
 8005b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8e:	e7f3      	b.n	8005b78 <get_fat+0xb0>
 8005b90:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 8005b94:	e7f0      	b.n	8005b78 <get_fat+0xb0>

08005b96 <dir_sdi>:
{
 8005b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8005b9a:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005b9c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005ba0:	d23b      	bcs.n	8005c1a <dir_sdi+0x84>
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	460d      	mov	r5, r1
 8005ba6:	f011 0f1f 	tst.w	r1, #31
 8005baa:	d139      	bne.n	8005c20 <dir_sdi+0x8a>
	dp->dptr = ofs;				/* Set current offset */
 8005bac:	6131      	str	r1, [r6, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005bae:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005bb0:	b91c      	cbnz	r4, 8005bba <dir_sdi+0x24>
 8005bb2:	783b      	ldrb	r3, [r7, #0]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d900      	bls.n	8005bba <dir_sdi+0x24>
		clst = fs->dirbase;
 8005bb8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005bba:	b994      	cbnz	r4, 8005be2 <dir_sdi+0x4c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005bbc:	893b      	ldrh	r3, [r7, #8]
 8005bbe:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8005bc2:	d92f      	bls.n	8005c24 <dir_sdi+0x8e>
		dp->sect = fs->dirbase;
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	61b3      	str	r3, [r6, #24]
	dp->clust = clst;					/* Current cluster# */
 8005bc8:	6174      	str	r4, [r6, #20]
	if (!dp->sect) return FR_INT_ERR;
 8005bca:	69b3      	ldr	r3, [r6, #24]
 8005bcc:	b393      	cbz	r3, 8005c34 <dir_sdi+0x9e>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005bce:	eb03 2355 	add.w	r3, r3, r5, lsr #9
 8005bd2:	61b3      	str	r3, [r6, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005bd4:	3730      	adds	r7, #48	; 0x30
 8005bd6:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8005bda:	443d      	add	r5, r7
 8005bdc:	61f5      	str	r5, [r6, #28]
	return FR_OK;
 8005bde:	2000      	movs	r0, #0
 8005be0:	e01c      	b.n	8005c1c <dir_sdi+0x86>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005be2:	f8b7 800a 	ldrh.w	r8, [r7, #10]
 8005be6:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8005bea:	4545      	cmp	r5, r8
 8005bec:	d30f      	bcc.n	8005c0e <dir_sdi+0x78>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005bee:	4621      	mov	r1, r4
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	f7ff ff69 	bl	8005ac8 <get_fat>
 8005bf6:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005bf8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005bfc:	d014      	beq.n	8005c28 <dir_sdi+0x92>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005bfe:	2801      	cmp	r0, #1
 8005c00:	d914      	bls.n	8005c2c <dir_sdi+0x96>
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	4283      	cmp	r3, r0
 8005c06:	d913      	bls.n	8005c30 <dir_sdi+0x9a>
			ofs -= csz;
 8005c08:	eba5 0508 	sub.w	r5, r5, r8
 8005c0c:	e7ed      	b.n	8005bea <dir_sdi+0x54>
		dp->sect = clust2sect(fs, clst);
 8005c0e:	4621      	mov	r1, r4
 8005c10:	4638      	mov	r0, r7
 8005c12:	f7ff fc10 	bl	8005436 <clust2sect>
 8005c16:	61b0      	str	r0, [r6, #24]
 8005c18:	e7d6      	b.n	8005bc8 <dir_sdi+0x32>
		return FR_INT_ERR;
 8005c1a:	2002      	movs	r0, #2
}
 8005c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 8005c20:	2002      	movs	r0, #2
 8005c22:	e7fb      	b.n	8005c1c <dir_sdi+0x86>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005c24:	2002      	movs	r0, #2
 8005c26:	e7f9      	b.n	8005c1c <dir_sdi+0x86>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005c28:	2001      	movs	r0, #1
 8005c2a:	e7f7      	b.n	8005c1c <dir_sdi+0x86>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005c2c:	2002      	movs	r0, #2
 8005c2e:	e7f5      	b.n	8005c1c <dir_sdi+0x86>
 8005c30:	2002      	movs	r0, #2
 8005c32:	e7f3      	b.n	8005c1c <dir_sdi+0x86>
	if (!dp->sect) return FR_INT_ERR;
 8005c34:	2002      	movs	r0, #2
 8005c36:	e7f1      	b.n	8005c1c <dir_sdi+0x86>

08005c38 <put_fat>:
{
 8005c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005c3c:	2901      	cmp	r1, #1
 8005c3e:	d97c      	bls.n	8005d3a <put_fat+0x102>
 8005c40:	6943      	ldr	r3, [r0, #20]
 8005c42:	428b      	cmp	r3, r1
 8005c44:	d97b      	bls.n	8005d3e <put_fat+0x106>
 8005c46:	4616      	mov	r6, r2
 8005c48:	460c      	mov	r4, r1
 8005c4a:	4605      	mov	r5, r0
		switch (fs->fs_type) {
 8005c4c:	7803      	ldrb	r3, [r0, #0]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d047      	beq.n	8005ce2 <put_fat+0xaa>
 8005c52:	2b03      	cmp	r3, #3
 8005c54:	d057      	beq.n	8005d06 <put_fat+0xce>
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d001      	beq.n	8005c5e <put_fat+0x26>
	FRESULT res = FR_INT_ERR;
 8005c5a:	2702      	movs	r7, #2
 8005c5c:	e070      	b.n	8005d40 <put_fat+0x108>
			bc = (UINT)clst; bc += bc / 2;
 8005c5e:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005c62:	6a01      	ldr	r1, [r0, #32]
 8005c64:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8005c68:	f7ff fd64 	bl	8005734 <move_window>
			if (res != FR_OK) break;
 8005c6c:	4607      	mov	r7, r0
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	d166      	bne.n	8005d40 <put_fat+0x108>
			p = &fs->win[bc++ % SS(fs)];
 8005c72:	f108 0901 	add.w	r9, r8, #1
 8005c76:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005c7a:	f014 0401 	ands.w	r4, r4, #1
 8005c7e:	d023      	beq.n	8005cc8 <put_fat+0x90>
 8005c80:	eb05 0308 	add.w	r3, r5, r8
 8005c84:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	0132      	lsls	r2, r6, #4
 8005c8e:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8005c92:	4313      	orrs	r3, r2
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	44a8      	add	r8, r5
 8005c98:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
			fs->wflag = 1;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ca0:	6a29      	ldr	r1, [r5, #32]
 8005ca2:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f7ff fd44 	bl	8005734 <move_window>
			if (res != FR_OK) break;
 8005cac:	4607      	mov	r7, r0
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	d146      	bne.n	8005d40 <put_fat+0x108>
			p = &fs->win[bc % SS(fs)];
 8005cb2:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005cb6:	b14c      	cbz	r4, 8005ccc <put_fat+0x94>
 8005cb8:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8005cbc:	44a9      	add	r9, r5
 8005cbe:	f889 2030 	strb.w	r2, [r9, #48]	; 0x30
			fs->wflag = 1;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	70eb      	strb	r3, [r5, #3]
			break;
 8005cc6:	e03b      	b.n	8005d40 <put_fat+0x108>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005cc8:	b2f3      	uxtb	r3, r6
 8005cca:	e7e4      	b.n	8005c96 <put_fat+0x5e>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005ccc:	eb05 0309 	add.w	r3, r5, r9
 8005cd0:	f993 2030 	ldrsb.w	r2, [r3, #48]	; 0x30
 8005cd4:	f022 020f 	bic.w	r2, r2, #15
 8005cd8:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8005cdc:	4332      	orrs	r2, r6
 8005cde:	b2d2      	uxtb	r2, r2
 8005ce0:	e7ec      	b.n	8005cbc <put_fat+0x84>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005ce2:	6a01      	ldr	r1, [r0, #32]
 8005ce4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8005ce8:	f7ff fd24 	bl	8005734 <move_window>
			if (res != FR_OK) break;
 8005cec:	4607      	mov	r7, r0
 8005cee:	bb38      	cbnz	r0, 8005d40 <put_fat+0x108>
			st_word(&fs->win[clst * 2 % SS(fs)], (WORD)val);
 8005cf0:	0060      	lsls	r0, r4, #1
 8005cf2:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
 8005cf6:	3030      	adds	r0, #48	; 0x30
 8005cf8:	b2b1      	uxth	r1, r6
 8005cfa:	4428      	add	r0, r5
 8005cfc:	f7ff fb68 	bl	80053d0 <st_word>
			fs->wflag = 1;
 8005d00:	2301      	movs	r3, #1
 8005d02:	70eb      	strb	r3, [r5, #3]
			break;
 8005d04:	e01c      	b.n	8005d40 <put_fat+0x108>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005d06:	6a01      	ldr	r1, [r0, #32]
 8005d08:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8005d0c:	f7ff fd12 	bl	8005734 <move_window>
			if (res != FR_OK) break;
 8005d10:	4607      	mov	r7, r0
 8005d12:	b9a8      	cbnz	r0, 8005d40 <put_fat+0x108>
				val = (val & 0x0FFFFFFF) | (ld_dword(&fs->win[clst * 4 % SS(fs)]) & 0xF0000000);
 8005d14:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 8005d18:	00a4      	lsls	r4, r4, #2
 8005d1a:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8005d1e:	3430      	adds	r4, #48	; 0x30
 8005d20:	442c      	add	r4, r5
 8005d22:	4620      	mov	r0, r4
 8005d24:	f7ff fb49 	bl	80053ba <ld_dword>
 8005d28:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(&fs->win[clst * 4 % SS(fs)], val);
 8005d2c:	4331      	orrs	r1, r6
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f7ff fb52 	bl	80053d8 <st_dword>
			fs->wflag = 1;
 8005d34:	2301      	movs	r3, #1
 8005d36:	70eb      	strb	r3, [r5, #3]
			break;
 8005d38:	e002      	b.n	8005d40 <put_fat+0x108>
	FRESULT res = FR_INT_ERR;
 8005d3a:	2702      	movs	r7, #2
 8005d3c:	e000      	b.n	8005d40 <put_fat+0x108>
 8005d3e:	2702      	movs	r7, #2
}
 8005d40:	4638      	mov	r0, r7
 8005d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005d46 <create_chain>:
{
 8005d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d4a:	4607      	mov	r7, r0
	FATFS *fs = obj->fs;
 8005d4c:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8005d4e:	4688      	mov	r8, r1
 8005d50:	b931      	cbnz	r1, 8005d60 <create_chain+0x1a>
		scl = fs->last_clst;				/* Get suggested cluster to start at */
 8005d52:	68f5      	ldr	r5, [r6, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005d54:	b18d      	cbz	r5, 8005d7a <create_chain+0x34>
 8005d56:	6973      	ldr	r3, [r6, #20]
 8005d58:	42ab      	cmp	r3, r5
 8005d5a:	d80f      	bhi.n	8005d7c <create_chain+0x36>
 8005d5c:	2501      	movs	r5, #1
 8005d5e:	e00d      	b.n	8005d7c <create_chain+0x36>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005d60:	f7ff feb2 	bl	8005ac8 <get_fat>
 8005d64:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid value */
 8005d66:	2801      	cmp	r0, #1
 8005d68:	d947      	bls.n	8005dfa <create_chain+0xb4>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005d6a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005d6e:	d049      	beq.n	8005e04 <create_chain+0xbe>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005d70:	6972      	ldr	r2, [r6, #20]
 8005d72:	4282      	cmp	r2, r0
 8005d74:	d846      	bhi.n	8005e04 <create_chain+0xbe>
		scl = clst;
 8005d76:	4645      	mov	r5, r8
 8005d78:	e000      	b.n	8005d7c <create_chain+0x36>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005d7a:	2501      	movs	r5, #1
		ncl = scl;	/* Start cluster */
 8005d7c:	462c      	mov	r4, r5
 8005d7e:	e00c      	b.n	8005d9a <create_chain+0x54>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005d80:	4621      	mov	r1, r4
 8005d82:	4638      	mov	r0, r7
 8005d84:	f7ff fea0 	bl	8005ac8 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8005d88:	4603      	mov	r3, r0
 8005d8a:	b170      	cbz	r0, 8005daa <create_chain+0x64>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005d8c:	2801      	cmp	r0, #1
 8005d8e:	d039      	beq.n	8005e04 <create_chain+0xbe>
 8005d90:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005d94:	d036      	beq.n	8005e04 <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 8005d96:	42ac      	cmp	r4, r5
 8005d98:	d033      	beq.n	8005e02 <create_chain+0xbc>
			ncl++;							/* Next cluster */
 8005d9a:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005d9c:	6973      	ldr	r3, [r6, #20]
 8005d9e:	42a3      	cmp	r3, r4
 8005da0:	d8ee      	bhi.n	8005d80 <create_chain+0x3a>
				if (ncl > scl) return 0;	/* No free cluster */
 8005da2:	2d01      	cmp	r5, #1
 8005da4:	d92b      	bls.n	8005dfe <create_chain+0xb8>
				ncl = 2;
 8005da6:	2402      	movs	r4, #2
 8005da8:	e7ea      	b.n	8005d80 <create_chain+0x3a>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005daa:	f04f 32ff 	mov.w	r2, #4294967295
 8005dae:	4621      	mov	r1, r4
 8005db0:	4630      	mov	r0, r6
 8005db2:	f7ff ff41 	bl	8005c38 <put_fat>
		if (res == FR_OK && clst) {
 8005db6:	4603      	mov	r3, r0
 8005db8:	b910      	cbnz	r0, 8005dc0 <create_chain+0x7a>
 8005dba:	f1b8 0f00 	cmp.w	r8, #0
 8005dbe:	d10e      	bne.n	8005dde <create_chain+0x98>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005dc0:	b9a3      	cbnz	r3, 8005dec <create_chain+0xa6>
		fs->last_clst = ncl;
 8005dc2:	60f4      	str	r4, [r6, #12]
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
 8005dc4:	6932      	ldr	r2, [r6, #16]
 8005dc6:	6973      	ldr	r3, [r6, #20]
 8005dc8:	3b02      	subs	r3, #2
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d201      	bcs.n	8005dd2 <create_chain+0x8c>
 8005dce:	3a01      	subs	r2, #1
 8005dd0:	6132      	str	r2, [r6, #16]
		fs->fsi_flag |= 1;
 8005dd2:	7933      	ldrb	r3, [r6, #4]
 8005dd4:	f043 0301 	orr.w	r3, r3, #1
 8005dd8:	7133      	strb	r3, [r6, #4]
 8005dda:	4623      	mov	r3, r4
 8005ddc:	e012      	b.n	8005e04 <create_chain+0xbe>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005dde:	4622      	mov	r2, r4
 8005de0:	4641      	mov	r1, r8
 8005de2:	4630      	mov	r0, r6
 8005de4:	f7ff ff28 	bl	8005c38 <put_fat>
 8005de8:	4603      	mov	r3, r0
 8005dea:	e7e9      	b.n	8005dc0 <create_chain+0x7a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d001      	beq.n	8005df4 <create_chain+0xae>
 8005df0:	2301      	movs	r3, #1
 8005df2:	e007      	b.n	8005e04 <create_chain+0xbe>
 8005df4:	f04f 33ff 	mov.w	r3, #4294967295
 8005df8:	e004      	b.n	8005e04 <create_chain+0xbe>
		if (cs < 2) return 1;				/* Invalid value */
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e002      	b.n	8005e04 <create_chain+0xbe>
				if (ncl > scl) return 0;	/* No free cluster */
 8005dfe:	2300      	movs	r3, #0
 8005e00:	e000      	b.n	8005e04 <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e0a <remove_chain>:
{
 8005e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0c:	460e      	mov	r6, r1
	FATFS *fs = obj->fs;
 8005e0e:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005e10:	2901      	cmp	r1, #1
 8005e12:	d92e      	bls.n	8005e72 <remove_chain+0x68>
 8005e14:	4607      	mov	r7, r0
 8005e16:	4611      	mov	r1, r2
 8005e18:	6963      	ldr	r3, [r4, #20]
 8005e1a:	42b3      	cmp	r3, r6
 8005e1c:	d92b      	bls.n	8005e76 <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005e1e:	b15a      	cbz	r2, 8005e38 <remove_chain+0x2e>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005e20:	f04f 32ff 	mov.w	r2, #4294967295
 8005e24:	4620      	mov	r0, r4
 8005e26:	f7ff ff07 	bl	8005c38 <put_fat>
		if (res != FR_OK) return res;
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	b120      	cbz	r0, 8005e38 <remove_chain+0x2e>
 8005e2e:	e023      	b.n	8005e78 <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005e30:	6963      	ldr	r3, [r4, #20]
		clst = nxt;					/* Next cluster */
 8005e32:	462e      	mov	r6, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005e34:	42ab      	cmp	r3, r5
 8005e36:	d91f      	bls.n	8005e78 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005e38:	4631      	mov	r1, r6
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	f7ff fe44 	bl	8005ac8 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8005e40:	4605      	mov	r5, r0
 8005e42:	b1d8      	cbz	r0, 8005e7c <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005e44:	2801      	cmp	r0, #1
 8005e46:	d01b      	beq.n	8005e80 <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005e48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005e4c:	d01a      	beq.n	8005e84 <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005e4e:	2200      	movs	r2, #0
 8005e50:	4631      	mov	r1, r6
 8005e52:	4620      	mov	r0, r4
 8005e54:	f7ff fef0 	bl	8005c38 <put_fat>
			if (res != FR_OK) return res;
 8005e58:	4602      	mov	r2, r0
 8005e5a:	b968      	cbnz	r0, 8005e78 <remove_chain+0x6e>
		if (fs->free_clst != 0xFFFFFFFF) {	/* Update FSINFO */
 8005e5c:	6923      	ldr	r3, [r4, #16]
 8005e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e62:	d0e5      	beq.n	8005e30 <remove_chain+0x26>
			fs->free_clst++;
 8005e64:	3301      	adds	r3, #1
 8005e66:	6123      	str	r3, [r4, #16]
			fs->fsi_flag |= 1;
 8005e68:	7923      	ldrb	r3, [r4, #4]
 8005e6a:	f043 0301 	orr.w	r3, r3, #1
 8005e6e:	7123      	strb	r3, [r4, #4]
 8005e70:	e7de      	b.n	8005e30 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005e72:	2202      	movs	r2, #2
 8005e74:	e000      	b.n	8005e78 <remove_chain+0x6e>
 8005e76:	2202      	movs	r2, #2
}
 8005e78:	4610      	mov	r0, r2
 8005e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	e7fb      	b.n	8005e78 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005e80:	2202      	movs	r2, #2
 8005e82:	e7f9      	b.n	8005e78 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005e84:	2201      	movs	r2, #1
 8005e86:	e7f7      	b.n	8005e78 <remove_chain+0x6e>

08005e88 <dir_next>:
{
 8005e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 8005e8c:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005e8e:	6905      	ldr	r5, [r0, #16]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005e90:	6983      	ldr	r3, [r0, #24]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d06d      	beq.n	8005f72 <dir_next+0xea>
 8005e96:	3520      	adds	r5, #32
 8005e98:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8005e9c:	d26b      	bcs.n	8005f76 <dir_next+0xee>
 8005e9e:	4688      	mov	r8, r1
 8005ea0:	4604      	mov	r4, r0
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005ea2:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8005ea6:	b93f      	cbnz	r7, 8005eb8 <dir_next+0x30>
		dp->sect++;				/* Next sector */
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	6183      	str	r3, [r0, #24]
		if (!dp->clust) {		/* Static table */
 8005eac:	6941      	ldr	r1, [r0, #20]
 8005eae:	b971      	cbnz	r1, 8005ece <dir_next+0x46>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005eb0:	8933      	ldrh	r3, [r6, #8]
 8005eb2:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8005eb6:	d906      	bls.n	8005ec6 <dir_next+0x3e>
	dp->dptr = ofs;						/* Current entry */
 8005eb8:	6125      	str	r5, [r4, #16]
	dp->dir = &fs->win[ofs % SS(fs)];	/* Pointer to the entry in the win[] */
 8005eba:	3730      	adds	r7, #48	; 0x30
 8005ebc:	443e      	add	r6, r7
 8005ebe:	61e6      	str	r6, [r4, #28]
	return FR_OK;
 8005ec0:	2000      	movs	r0, #0
}
 8005ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				dp->sect = 0; return FR_NO_FILE;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	6183      	str	r3, [r0, #24]
 8005eca:	2004      	movs	r0, #4
 8005ecc:	e7f9      	b.n	8005ec2 <dir_next+0x3a>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005ece:	8973      	ldrh	r3, [r6, #10]
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 8005ed6:	d1ef      	bne.n	8005eb8 <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005ed8:	f7ff fdf6 	bl	8005ac8 <get_fat>
 8005edc:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005ede:	2801      	cmp	r0, #1
 8005ee0:	d94b      	bls.n	8005f7a <dir_next+0xf2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005ee2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005ee6:	d04a      	beq.n	8005f7e <dir_next+0xf6>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005ee8:	6973      	ldr	r3, [r6, #20]
 8005eea:	4283      	cmp	r3, r0
 8005eec:	d839      	bhi.n	8005f62 <dir_next+0xda>
					if (!stretch) {								/* If no stretch, report EOT */
 8005eee:	f1b8 0f00 	cmp.w	r8, #0
 8005ef2:	d011      	beq.n	8005f18 <dir_next+0x90>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005ef4:	6961      	ldr	r1, [r4, #20]
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f7ff ff25 	bl	8005d46 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005efc:	4681      	mov	r9, r0
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d03f      	beq.n	8005f82 <dir_next+0xfa>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005f02:	2801      	cmp	r0, #1
 8005f04:	d03f      	beq.n	8005f86 <dir_next+0xfe>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005f06:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005f0a:	d03e      	beq.n	8005f8a <dir_next+0x102>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	f7ff fbe7 	bl	80056e0 <sync_window>
 8005f12:	b128      	cbz	r0, 8005f20 <dir_next+0x98>
 8005f14:	2001      	movs	r0, #1
 8005f16:	e7d4      	b.n	8005ec2 <dir_next+0x3a>
						dp->sect = 0; return FR_NO_FILE;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	61a3      	str	r3, [r4, #24]
 8005f1c:	2004      	movs	r0, #4
 8005f1e:	e7d0      	b.n	8005ec2 <dir_next+0x3a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f24:	2100      	movs	r1, #0
 8005f26:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8005f2a:	f7ff fa68 	bl	80053fe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005f2e:	4649      	mov	r1, r9
 8005f30:	4630      	mov	r0, r6
 8005f32:	f7ff fa80 	bl	8005436 <clust2sect>
 8005f36:	62f0      	str	r0, [r6, #44]	; 0x2c
 8005f38:	f04f 0800 	mov.w	r8, #0
 8005f3c:	8973      	ldrh	r3, [r6, #10]
 8005f3e:	4598      	cmp	r8, r3
 8005f40:	d20b      	bcs.n	8005f5a <dir_next+0xd2>
						fs->wflag = 1;
 8005f42:	2301      	movs	r3, #1
 8005f44:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005f46:	4630      	mov	r0, r6
 8005f48:	f7ff fbca 	bl	80056e0 <sync_window>
 8005f4c:	b9f8      	cbnz	r0, 8005f8e <dir_next+0x106>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005f4e:	f108 0801 	add.w	r8, r8, #1
 8005f52:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8005f54:	3301      	adds	r3, #1
 8005f56:	62f3      	str	r3, [r6, #44]	; 0x2c
 8005f58:	e7f0      	b.n	8005f3c <dir_next+0xb4>
					fs->winsect -= n;							/* Restore window offset */
 8005f5a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8005f5c:	eba3 0308 	sub.w	r3, r3, r8
 8005f60:	62f3      	str	r3, [r6, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8005f62:	f8c4 9014 	str.w	r9, [r4, #20]
				dp->sect = clust2sect(fs, clst);
 8005f66:	4649      	mov	r1, r9
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f7ff fa64 	bl	8005436 <clust2sect>
 8005f6e:	61a0      	str	r0, [r4, #24]
 8005f70:	e7a2      	b.n	8005eb8 <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005f72:	2004      	movs	r0, #4
 8005f74:	e7a5      	b.n	8005ec2 <dir_next+0x3a>
 8005f76:	2004      	movs	r0, #4
 8005f78:	e7a3      	b.n	8005ec2 <dir_next+0x3a>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005f7a:	2002      	movs	r0, #2
 8005f7c:	e7a1      	b.n	8005ec2 <dir_next+0x3a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005f7e:	2001      	movs	r0, #1
 8005f80:	e79f      	b.n	8005ec2 <dir_next+0x3a>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005f82:	2007      	movs	r0, #7
 8005f84:	e79d      	b.n	8005ec2 <dir_next+0x3a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005f86:	2002      	movs	r0, #2
 8005f88:	e79b      	b.n	8005ec2 <dir_next+0x3a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005f8a:	2001      	movs	r0, #1
 8005f8c:	e799      	b.n	8005ec2 <dir_next+0x3a>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005f8e:	2001      	movs	r0, #1
 8005f90:	e797      	b.n	8005ec2 <dir_next+0x3a>

08005f92 <dir_alloc>:
{
 8005f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f94:	4604      	mov	r4, r0
 8005f96:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
 8005f98:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	f7ff fdfb 	bl	8005b96 <dir_sdi>
	if (res == FR_OK) {
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	b9c0      	cbnz	r0, 8005fd6 <dir_alloc+0x44>
		n = 0;
 8005fa4:	2500      	movs	r5, #0
 8005fa6:	e008      	b.n	8005fba <dir_alloc+0x28>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005fa8:	3501      	adds	r5, #1
 8005faa:	42bd      	cmp	r5, r7
 8005fac:	d013      	beq.n	8005fd6 <dir_alloc+0x44>
			res = dir_next(dp, 1);
 8005fae:	2101      	movs	r1, #1
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f7ff ff69 	bl	8005e88 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	b968      	cbnz	r0, 8005fd6 <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
 8005fba:	69a1      	ldr	r1, [r4, #24]
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	f7ff fbb9 	bl	8005734 <move_window>
			if (res != FR_OK) break;
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	b938      	cbnz	r0, 8005fd6 <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005fc6:	69e2      	ldr	r2, [r4, #28]
 8005fc8:	7812      	ldrb	r2, [r2, #0]
 8005fca:	2ae5      	cmp	r2, #229	; 0xe5
 8005fcc:	d0ec      	beq.n	8005fa8 <dir_alloc+0x16>
 8005fce:	2a00      	cmp	r2, #0
 8005fd0:	d0ea      	beq.n	8005fa8 <dir_alloc+0x16>
				n = 0;					/* Not a blank entry. Restart to search */
 8005fd2:	2500      	movs	r5, #0
 8005fd4:	e7eb      	b.n	8005fae <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	d001      	beq.n	8005fde <dir_alloc+0x4c>
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005fde:	2307      	movs	r3, #7
 8005fe0:	e7fb      	b.n	8005fda <dir_alloc+0x48>

08005fe2 <dir_read>:
{
 8005fe2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
 8005fea:	6807      	ldr	r7, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 8005fec:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8005ff0:	464e      	mov	r6, r9
	FRESULT res = FR_NO_FILE;
 8005ff2:	2504      	movs	r5, #4
	while (dp->sect) {
 8005ff4:	e02e      	b.n	8006054 <dir_read+0x72>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8005ff6:	2b0f      	cmp	r3, #15
 8005ff8:	d119      	bne.n	800602e <dir_read+0x4c>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8005ffa:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005ffe:	d006      	beq.n	800600e <dir_read+0x2c>
						sum = dp->dir[LDIR_Chksum];
 8006000:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= ~LLEF; ord = c;
 8006004:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 8006008:	6923      	ldr	r3, [r4, #16]
 800600a:	6263      	str	r3, [r4, #36]	; 0x24
						c &= ~LLEF; ord = c;
 800600c:	4616      	mov	r6, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(dp->lfn, dp->dir)) ? ord - 1 : 0xFF;
 800600e:	42b2      	cmp	r2, r6
 8006010:	d001      	beq.n	8006016 <dir_read+0x34>
 8006012:	26ff      	movs	r6, #255	; 0xff
 8006014:	e018      	b.n	8006048 <dir_read+0x66>
 8006016:	7b4b      	ldrb	r3, [r1, #13]
 8006018:	454b      	cmp	r3, r9
 800601a:	d001      	beq.n	8006020 <dir_read+0x3e>
 800601c:	26ff      	movs	r6, #255	; 0xff
 800601e:	e013      	b.n	8006048 <dir_read+0x66>
 8006020:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006022:	f7ff fa3b 	bl	800549c <pick_lfn>
 8006026:	b388      	cbz	r0, 800608c <dir_read+0xaa>
 8006028:	3e01      	subs	r6, #1
 800602a:	b2f6      	uxtb	r6, r6
 800602c:	e00c      	b.n	8006048 <dir_read+0x66>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800602e:	b926      	cbnz	r6, 800603a <dir_read+0x58>
 8006030:	4608      	mov	r0, r1
 8006032:	f7ff fb03 	bl	800563c <sum_sfn>
 8006036:	4548      	cmp	r0, r9
 8006038:	d02b      	beq.n	8006092 <dir_read+0xb0>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800603a:	f04f 33ff 	mov.w	r3, #4294967295
 800603e:	6263      	str	r3, [r4, #36]	; 0x24
 8006040:	e027      	b.n	8006092 <dir_read+0xb0>
				ord = 0xFF;
 8006042:	26ff      	movs	r6, #255	; 0xff
 8006044:	e000      	b.n	8006048 <dir_read+0x66>
 8006046:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 8006048:	2100      	movs	r1, #0
 800604a:	4620      	mov	r0, r4
 800604c:	f7ff ff1c 	bl	8005e88 <dir_next>
		if (res != FR_OK) break;
 8006050:	4605      	mov	r5, r0
 8006052:	b9f0      	cbnz	r0, 8006092 <dir_read+0xb0>
	while (dp->sect) {
 8006054:	69a1      	ldr	r1, [r4, #24]
 8006056:	b1e1      	cbz	r1, 8006092 <dir_read+0xb0>
		res = move_window(fs, dp->sect);
 8006058:	4638      	mov	r0, r7
 800605a:	f7ff fb6b 	bl	8005734 <move_window>
		if (res != FR_OK) break;
 800605e:	4605      	mov	r5, r0
 8006060:	b9b8      	cbnz	r0, 8006092 <dir_read+0xb0>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006062:	69e1      	ldr	r1, [r4, #28]
 8006064:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
 8006066:	b19a      	cbz	r2, 8006090 <dir_read+0xae>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006068:	7acb      	ldrb	r3, [r1, #11]
 800606a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800606e:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8006070:	2ae5      	cmp	r2, #229	; 0xe5
 8006072:	d0e6      	beq.n	8006042 <dir_read+0x60>
 8006074:	2a2e      	cmp	r2, #46	; 0x2e
 8006076:	d0e6      	beq.n	8006046 <dir_read+0x64>
 8006078:	f023 0020 	bic.w	r0, r3, #32
 800607c:	2808      	cmp	r0, #8
 800607e:	bf14      	ite	ne
 8006080:	2000      	movne	r0, #0
 8006082:	2001      	moveq	r0, #1
 8006084:	4540      	cmp	r0, r8
 8006086:	d0b6      	beq.n	8005ff6 <dir_read+0x14>
				ord = 0xFF;
 8006088:	26ff      	movs	r6, #255	; 0xff
 800608a:	e7dd      	b.n	8006048 <dir_read+0x66>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(dp->lfn, dp->dir)) ? ord - 1 : 0xFF;
 800608c:	26ff      	movs	r6, #255	; 0xff
 800608e:	e7db      	b.n	8006048 <dir_read+0x66>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
 8006090:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006092:	b10d      	cbz	r5, 8006098 <dir_read+0xb6>
 8006094:	2300      	movs	r3, #0
 8006096:	61a3      	str	r3, [r4, #24]
}
 8006098:	4628      	mov	r0, r5
 800609a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800609e <dir_remove>:
{
 800609e:	b570      	push	{r4, r5, r6, lr}
 80060a0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80060a2:	6805      	ldr	r5, [r0, #0]
	DWORD last = dp->dptr;
 80060a4:	6906      	ldr	r6, [r0, #16]
	res = dp->blk_ofs == 0xFFFFFFFF ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80060a6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80060a8:	f1b1 3fff 	cmp.w	r1, #4294967295
 80060ac:	d118      	bne.n	80060e0 <dir_remove+0x42>
			res = move_window(fs, dp->sect);
 80060ae:	69a1      	ldr	r1, [r4, #24]
 80060b0:	4628      	mov	r0, r5
 80060b2:	f7ff fb3f 	bl	8005734 <move_window>
			if (res != FR_OK) break;
 80060b6:	4603      	mov	r3, r0
 80060b8:	b970      	cbnz	r0, 80060d8 <dir_remove+0x3a>
				dp->dir[DIR_Name] = DDEM;
 80060ba:	69e2      	ldr	r2, [r4, #28]
 80060bc:	21e5      	movs	r1, #229	; 0xe5
 80060be:	7011      	strb	r1, [r2, #0]
			fs->wflag = 1;
 80060c0:	2201      	movs	r2, #1
 80060c2:	70ea      	strb	r2, [r5, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80060c4:	6922      	ldr	r2, [r4, #16]
 80060c6:	42b2      	cmp	r2, r6
 80060c8:	d206      	bcs.n	80060d8 <dir_remove+0x3a>
			res = dir_next(dp, 0);	/* Next entry */
 80060ca:	2100      	movs	r1, #0
 80060cc:	4620      	mov	r0, r4
 80060ce:	f7ff fedb 	bl	8005e88 <dir_next>
		} while (res == FR_OK);
 80060d2:	4603      	mov	r3, r0
 80060d4:	2800      	cmp	r0, #0
 80060d6:	d0ea      	beq.n	80060ae <dir_remove+0x10>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80060d8:	2b04      	cmp	r3, #4
 80060da:	d007      	beq.n	80060ec <dir_remove+0x4e>
}
 80060dc:	4618      	mov	r0, r3
 80060de:	bd70      	pop	{r4, r5, r6, pc}
	res = dp->blk_ofs == 0xFFFFFFFF ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80060e0:	f7ff fd59 	bl	8005b96 <dir_sdi>
	if (res == FR_OK) {
 80060e4:	4603      	mov	r3, r0
 80060e6:	2800      	cmp	r0, #0
 80060e8:	d0e1      	beq.n	80060ae <dir_remove+0x10>
 80060ea:	e7f7      	b.n	80060dc <dir_remove+0x3e>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80060ec:	2302      	movs	r3, #2
 80060ee:	e7f5      	b.n	80060dc <dir_remove+0x3e>

080060f0 <create_name>:
{
 80060f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f4:	b083      	sub	sp, #12
 80060f6:	4680      	mov	r8, r0
 80060f8:	468a      	mov	sl, r1
	p = *path; lfn = dp->lfn; si = di = 0;
 80060fa:	f8d1 9000 	ldr.w	r9, [r1]
 80060fe:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8006100:	2400      	movs	r4, #0
 8006102:	e011      	b.n	8006128 <create_name+0x38>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator */
 8006104:	3601      	adds	r6, #1
 8006106:	eb09 0206 	add.w	r2, r9, r6
 800610a:	f819 3006 	ldrb.w	r3, [r9, r6]
 800610e:	2b2f      	cmp	r3, #47	; 0x2f
 8006110:	d0f8      	beq.n	8006104 <create_name+0x14>
 8006112:	2b5c      	cmp	r3, #92	; 0x5c
 8006114:	d0f6      	beq.n	8006104 <create_name+0x14>
	*path = &p[si];						/* Return pointer to the next segment */
 8006116:	f8ca 2000 	str.w	r2, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800611a:	281f      	cmp	r0, #31
 800611c:	d821      	bhi.n	8006162 <create_name+0x72>
 800611e:	2704      	movs	r7, #4
 8006120:	e022      	b.n	8006168 <create_name+0x78>
		lfn[di++] = w;					/* Store the Unicode character */
 8006122:	f825 7014 	strh.w	r7, [r5, r4, lsl #1]
		w = p[si++];					/* Get a character */
 8006126:	4634      	mov	r4, r6
 8006128:	1c66      	adds	r6, r4, #1
 800612a:	f819 0004 	ldrb.w	r0, [r9, r4]
		if (w < ' ' || w == '/' || w == '\\') {		/* Break on end of segment */
 800612e:	281f      	cmp	r0, #31
 8006130:	d9e9      	bls.n	8006106 <create_name+0x16>
 8006132:	282f      	cmp	r0, #47	; 0x2f
 8006134:	d0e7      	beq.n	8006106 <create_name+0x16>
 8006136:	285c      	cmp	r0, #92	; 0x5c
 8006138:	d0e5      	beq.n	8006106 <create_name+0x16>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800613a:	2cfe      	cmp	r4, #254	; 0xfe
 800613c:	f200 80df 	bhi.w	80062fe <create_name+0x20e>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006140:	2101      	movs	r1, #1
 8006142:	f000 ffe9 	bl	8007118 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006146:	4607      	mov	r7, r0
 8006148:	2800      	cmp	r0, #0
 800614a:	f000 80da 	beq.w	8006302 <create_name+0x212>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800614e:	287f      	cmp	r0, #127	; 0x7f
 8006150:	d8e7      	bhi.n	8006122 <create_name+0x32>
 8006152:	4601      	mov	r1, r0
 8006154:	486d      	ldr	r0, [pc, #436]	; (800630c <create_name+0x21c>)
 8006156:	f7ff f966 	bl	8005426 <chk_chr>
 800615a:	2800      	cmp	r0, #0
 800615c:	d0e1      	beq.n	8006122 <create_name+0x32>
 800615e:	2006      	movs	r0, #6
 8006160:	e086      	b.n	8006270 <create_name+0x180>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006162:	2700      	movs	r7, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006164:	e000      	b.n	8006168 <create_name+0x78>
		di--;
 8006166:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006168:	b144      	cbz	r4, 800617c <create_name+0x8c>
		w = lfn[di - 1];
 800616a:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 800616e:	3b01      	subs	r3, #1
 8006170:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 8006174:	2b20      	cmp	r3, #32
 8006176:	d0f6      	beq.n	8006166 <create_name+0x76>
 8006178:	2b2e      	cmp	r3, #46	; 0x2e
 800617a:	d0f4      	beq.n	8006166 <create_name+0x76>
	lfn[di] = 0;						/* LFN is created */
 800617c:	2300      	movs	r3, #0
 800617e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006182:	2c00      	cmp	r4, #0
 8006184:	f000 80bf 	beq.w	8006306 <create_name+0x216>
	mem_set(dp->fn, ' ', 11);
 8006188:	220b      	movs	r2, #11
 800618a:	2120      	movs	r1, #32
 800618c:	f8d8 0020 	ldr.w	r0, [r8, #32]
 8006190:	f7ff f935 	bl	80053fe <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006194:	2300      	movs	r3, #0
 8006196:	e000      	b.n	800619a <create_name+0xaa>
 8006198:	3301      	adds	r3, #1
 800619a:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 800619e:	2a20      	cmp	r2, #32
 80061a0:	d0fa      	beq.n	8006198 <create_name+0xa8>
 80061a2:	2a2e      	cmp	r2, #46	; 0x2e
 80061a4:	d0f8      	beq.n	8006198 <create_name+0xa8>
	if (si) cf |= NS_LOSS | NS_LFN;
 80061a6:	b11b      	cbz	r3, 80061b0 <create_name+0xc0>
 80061a8:	f047 0703 	orr.w	r7, r7, #3
 80061ac:	e000      	b.n	80061b0 <create_name+0xc0>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80061ae:	3c01      	subs	r4, #1
 80061b0:	b16c      	cbz	r4, 80061ce <create_name+0xde>
 80061b2:	f104 4200 	add.w	r2, r4, #2147483648	; 0x80000000
 80061b6:	3a01      	subs	r2, #1
 80061b8:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 80061bc:	2a2e      	cmp	r2, #46	; 0x2e
 80061be:	d1f6      	bne.n	80061ae <create_name+0xbe>
 80061c0:	f04f 0b08 	mov.w	fp, #8
 80061c4:	f04f 0a00 	mov.w	sl, #0
 80061c8:	f8cd a004 	str.w	sl, [sp, #4]
 80061cc:	e00a      	b.n	80061e4 <create_name+0xf4>
 80061ce:	46a2      	mov	sl, r4
 80061d0:	f04f 0b08 	mov.w	fp, #8
 80061d4:	2200      	movs	r2, #0
 80061d6:	9201      	str	r2, [sp, #4]
 80061d8:	e004      	b.n	80061e4 <create_name+0xf4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80061da:	454c      	cmp	r4, r9
 80061dc:	d00b      	beq.n	80061f6 <create_name+0x106>
			cf |= NS_LOSS | NS_LFN; continue;
 80061de:	f047 0703 	orr.w	r7, r7, #3
		w = lfn[si++];					/* Get an LFN character */
 80061e2:	464b      	mov	r3, r9
 80061e4:	f103 0901 	add.w	r9, r3, #1
 80061e8:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 80061ec:	b1fe      	cbz	r6, 800622e <create_name+0x13e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80061ee:	2e20      	cmp	r6, #32
 80061f0:	d0f5      	beq.n	80061de <create_name+0xee>
 80061f2:	2e2e      	cmp	r6, #46	; 0x2e
 80061f4:	d0f1      	beq.n	80061da <create_name+0xea>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80061f6:	45da      	cmp	sl, fp
 80061f8:	d210      	bcs.n	800621c <create_name+0x12c>
 80061fa:	454c      	cmp	r4, r9
 80061fc:	d00e      	beq.n	800621c <create_name+0x12c>
		if (w >= 0x80) {				/* Non ASCII character */
 80061fe:	2e7f      	cmp	r6, #127	; 0x7f
 8006200:	d846      	bhi.n	8006290 <create_name+0x1a0>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006202:	2e00      	cmp	r6, #0
 8006204:	d151      	bne.n	80062aa <create_name+0x1ba>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006206:	f047 0703 	orr.w	r7, r7, #3
 800620a:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800620c:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8006210:	f803 600a 	strb.w	r6, [r3, sl]
		w = lfn[si++];					/* Get an LFN character */
 8006214:	464b      	mov	r3, r9
		dp->fn[i++] = (BYTE)w;
 8006216:	f10a 0a01 	add.w	sl, sl, #1
 800621a:	e7e3      	b.n	80061e4 <create_name+0xf4>
			if (ni == 11) {				/* Long extension */
 800621c:	f1bb 0f0b 	cmp.w	fp, #11
 8006220:	d029      	beq.n	8006276 <create_name+0x186>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006222:	454c      	cmp	r4, r9
 8006224:	d001      	beq.n	800622a <create_name+0x13a>
 8006226:	f047 0703 	orr.w	r7, r7, #3
			if (si > di) break;			/* No extension */
 800622a:	454c      	cmp	r4, r9
 800622c:	d226      	bcs.n	800627c <create_name+0x18c>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800622e:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8006232:	781a      	ldrb	r2, [r3, #0]
 8006234:	2ae5      	cmp	r2, #229	; 0xe5
 8006236:	d054      	beq.n	80062e2 <create_name+0x1f2>
	if (ni == 8) b <<= 2;
 8006238:	f1bb 0f08 	cmp.w	fp, #8
 800623c:	d054      	beq.n	80062e8 <create_name+0x1f8>
 800623e:	9b01      	ldr	r3, [sp, #4]
 8006240:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006244:	2a0c      	cmp	r2, #12
 8006246:	d003      	beq.n	8006250 <create_name+0x160>
 8006248:	f003 0303 	and.w	r3, r3, #3
 800624c:	2b03      	cmp	r3, #3
 800624e:	d101      	bne.n	8006254 <create_name+0x164>
 8006250:	f047 0702 	orr.w	r7, r7, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006254:	f017 0f02 	tst.w	r7, #2
 8006258:	d106      	bne.n	8006268 <create_name+0x178>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800625a:	9b01      	ldr	r3, [sp, #4]
 800625c:	f003 0303 	and.w	r3, r3, #3
 8006260:	2b01      	cmp	r3, #1
 8006262:	d046      	beq.n	80062f2 <create_name+0x202>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006264:	2a04      	cmp	r2, #4
 8006266:	d047      	beq.n	80062f8 <create_name+0x208>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006268:	f8d8 3020 	ldr.w	r3, [r8, #32]
 800626c:	72df      	strb	r7, [r3, #11]
	return FR_OK;
 800626e:	2000      	movs	r0, #0
}
 8006270:	b003      	add	sp, #12
 8006272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 8006276:	f047 0703 	orr.w	r7, r7, #3
 800627a:	e7d8      	b.n	800622e <create_name+0x13e>
			b <<= 2; continue;
 800627c:	9b01      	ldr	r3, [sp, #4]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	b2db      	uxtb	r3, r3
 8006282:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006284:	4623      	mov	r3, r4
 8006286:	f04f 0b0b 	mov.w	fp, #11
 800628a:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 800628e:	e7a9      	b.n	80061e4 <create_name+0xf4>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006290:	2100      	movs	r1, #0
 8006292:	4630      	mov	r0, r6
 8006294:	f000 ff40 	bl	8007118 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006298:	4606      	mov	r6, r0
 800629a:	b118      	cbz	r0, 80062a4 <create_name+0x1b4>
 800629c:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
 80062a0:	4b1b      	ldr	r3, [pc, #108]	; (8006310 <create_name+0x220>)
 80062a2:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 80062a4:	f047 0702 	orr.w	r7, r7, #2
 80062a8:	e7ab      	b.n	8006202 <create_name+0x112>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80062aa:	4631      	mov	r1, r6
 80062ac:	4819      	ldr	r0, [pc, #100]	; (8006314 <create_name+0x224>)
 80062ae:	f7ff f8ba 	bl	8005426 <chk_chr>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	d1a7      	bne.n	8006206 <create_name+0x116>
				if (IsUpper(w)) {		/* ASCII large capital */
 80062b6:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	2b19      	cmp	r3, #25
 80062be:	d804      	bhi.n	80062ca <create_name+0x1da>
					b |= 2;
 80062c0:	9b01      	ldr	r3, [sp, #4]
 80062c2:	f043 0302 	orr.w	r3, r3, #2
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	e7a0      	b.n	800620c <create_name+0x11c>
					if (IsLower(w)) {	/* ASCII small capital */
 80062ca:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	2b19      	cmp	r3, #25
 80062d2:	d89b      	bhi.n	800620c <create_name+0x11c>
						b |= 1; w -= 0x20;
 80062d4:	9b01      	ldr	r3, [sp, #4]
 80062d6:	f043 0301 	orr.w	r3, r3, #1
 80062da:	9301      	str	r3, [sp, #4]
 80062dc:	3e20      	subs	r6, #32
 80062de:	b2b6      	uxth	r6, r6
 80062e0:	e794      	b.n	800620c <create_name+0x11c>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80062e2:	2205      	movs	r2, #5
 80062e4:	701a      	strb	r2, [r3, #0]
 80062e6:	e7a7      	b.n	8006238 <create_name+0x148>
	if (ni == 8) b <<= 2;
 80062e8:	9b01      	ldr	r3, [sp, #4]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	9301      	str	r3, [sp, #4]
 80062f0:	e7a5      	b.n	800623e <create_name+0x14e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80062f2:	f047 0710 	orr.w	r7, r7, #16
 80062f6:	e7b5      	b.n	8006264 <create_name+0x174>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80062f8:	f047 0708 	orr.w	r7, r7, #8
 80062fc:	e7b4      	b.n	8006268 <create_name+0x178>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80062fe:	2006      	movs	r0, #6
 8006300:	e7b6      	b.n	8006270 <create_name+0x180>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006302:	2006      	movs	r0, #6
 8006304:	e7b4      	b.n	8006270 <create_name+0x180>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006306:	2006      	movs	r0, #6
 8006308:	e7b2      	b.n	8006270 <create_name+0x180>
 800630a:	bf00      	nop
 800630c:	0801595c 	.word	0x0801595c
 8006310:	080158cc 	.word	0x080158cc
 8006314:	08015968 	.word	0x08015968

08006318 <get_fileinfo>:
{
 8006318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	fno->fname[0] = 0;		/* Invaidate file info */
 800631a:	2300      	movs	r3, #0
 800631c:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800631e:	6983      	ldr	r3, [r0, #24]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d06b      	beq.n	80063fc <get_fileinfo+0xe4>
 8006324:	460d      	mov	r5, r1
 8006326:	4606      	mov	r6, r0
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8006328:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800632a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632e:	d013      	beq.n	8006358 <get_fileinfo+0x40>
			i = 0; lfn = dp->lfn;
 8006330:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006332:	2400      	movs	r4, #0
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 8006334:	1c9f      	adds	r7, r3, #2
 8006336:	8818      	ldrh	r0, [r3, #0]
 8006338:	b158      	cbz	r0, 8006352 <get_fileinfo+0x3a>
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800633a:	2100      	movs	r1, #0
 800633c:	f000 feec 	bl	8007118 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8006340:	b130      	cbz	r0, 8006350 <get_fileinfo+0x38>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8006342:	2cfe      	cmp	r4, #254	; 0xfe
 8006344:	d80c      	bhi.n	8006360 <get_fileinfo+0x48>
				fno->fname[i++] = (char)w;
 8006346:	192a      	adds	r2, r5, r4
 8006348:	7590      	strb	r0, [r2, #22]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800634a:	463b      	mov	r3, r7
				fno->fname[i++] = (char)w;
 800634c:	3401      	adds	r4, #1
 800634e:	e7f1      	b.n	8006334 <get_fileinfo+0x1c>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8006350:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 8006352:	442c      	add	r4, r5
 8006354:	2300      	movs	r3, #0
 8006356:	75a3      	strb	r3, [r4, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8006358:	7da8      	ldrb	r0, [r5, #22]
	i = j = 0;
 800635a:	2200      	movs	r2, #0
 800635c:	4613      	mov	r3, r2
	while (i < 11) {		/* Copy name body and extension */
 800635e:	e012      	b.n	8006386 <get_fileinfo+0x6e>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8006360:	2400      	movs	r4, #0
 8006362:	e7f6      	b.n	8006352 <get_fileinfo+0x3a>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006364:	23e5      	movs	r3, #229	; 0xe5
 8006366:	e017      	b.n	8006398 <get_fileinfo+0x80>
			if (!lfv) fno->fname[j] = '.';
 8006368:	b910      	cbnz	r0, 8006370 <get_fileinfo+0x58>
 800636a:	18a9      	adds	r1, r5, r2
 800636c:	272e      	movs	r7, #46	; 0x2e
 800636e:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
 8006370:	18a9      	adds	r1, r5, r2
 8006372:	272e      	movs	r7, #46	; 0x2e
 8006374:	724f      	strb	r7, [r1, #9]
 8006376:	3201      	adds	r2, #1
 8006378:	e010      	b.n	800639c <get_fileinfo+0x84>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY))) {
 800637a:	2110      	movs	r1, #16
 800637c:	e01c      	b.n	80063b8 <get_fileinfo+0xa0>
			fno->fname[j] = c;
 800637e:	18a9      	adds	r1, r5, r2
 8006380:	758b      	strb	r3, [r1, #22]
		j++;
 8006382:	3201      	adds	r2, #1
			if (IsUpper(c) && (dp->dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY))) {
 8006384:	4623      	mov	r3, r4
	while (i < 11) {		/* Copy name body and extension */
 8006386:	2b0a      	cmp	r3, #10
 8006388:	d81b      	bhi.n	80063c2 <get_fileinfo+0xaa>
		c = (TCHAR)dp->dir[i++];
 800638a:	69f1      	ldr	r1, [r6, #28]
 800638c:	1c5c      	adds	r4, r3, #1
 800638e:	5ccb      	ldrb	r3, [r1, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006390:	2b20      	cmp	r3, #32
 8006392:	d0f7      	beq.n	8006384 <get_fileinfo+0x6c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006394:	2b05      	cmp	r3, #5
 8006396:	d0e5      	beq.n	8006364 <get_fileinfo+0x4c>
		if (i == 9) {						/* Insert a . if extension is exist */
 8006398:	2c09      	cmp	r4, #9
 800639a:	d0e5      	beq.n	8006368 <get_fileinfo+0x50>
		fno->altname[j] = c;
 800639c:	18a9      	adds	r1, r5, r2
 800639e:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d1ee      	bne.n	8006382 <get_fileinfo+0x6a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY))) {
 80063a4:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
 80063a8:	b2c9      	uxtb	r1, r1
 80063aa:	2919      	cmp	r1, #25
 80063ac:	d8e7      	bhi.n	800637e <get_fileinfo+0x66>
 80063ae:	69f1      	ldr	r1, [r6, #28]
 80063b0:	7b0f      	ldrb	r7, [r1, #12]
 80063b2:	2c08      	cmp	r4, #8
 80063b4:	d8e1      	bhi.n	800637a <get_fileinfo+0x62>
 80063b6:	2108      	movs	r1, #8
 80063b8:	420f      	tst	r7, r1
 80063ba:	d0e0      	beq.n	800637e <get_fileinfo+0x66>
				c += 0x20;			/* To lower */
 80063bc:	3320      	adds	r3, #32
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	e7dd      	b.n	800637e <get_fileinfo+0x66>
	if (!lfv) {
 80063c2:	b930      	cbnz	r0, 80063d2 <get_fileinfo+0xba>
		fno->fname[j] = 0;
 80063c4:	18ab      	adds	r3, r5, r2
 80063c6:	2100      	movs	r1, #0
 80063c8:	7599      	strb	r1, [r3, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80063ca:	69f3      	ldr	r3, [r6, #28]
 80063cc:	7b1b      	ldrb	r3, [r3, #12]
 80063ce:	b903      	cbnz	r3, 80063d2 <get_fileinfo+0xba>
 80063d0:	460a      	mov	r2, r1
	fno->altname[j] = 0;	/* Terminate the SFN */
 80063d2:	442a      	add	r2, r5
 80063d4:	2300      	movs	r3, #0
 80063d6:	7253      	strb	r3, [r2, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80063d8:	69f3      	ldr	r3, [r6, #28]
 80063da:	7adb      	ldrb	r3, [r3, #11]
 80063dc:	722b      	strb	r3, [r5, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80063de:	69f0      	ldr	r0, [r6, #28]
 80063e0:	301c      	adds	r0, #28
 80063e2:	f7fe ffea 	bl	80053ba <ld_dword>
 80063e6:	6028      	str	r0, [r5, #0]
	fno->fdate = ld_word(dp->dir + DIR_WrtDate);	/* Date */
 80063e8:	69f0      	ldr	r0, [r6, #28]
 80063ea:	3018      	adds	r0, #24
 80063ec:	f7fe ffe0 	bl	80053b0 <ld_word>
 80063f0:	80a8      	strh	r0, [r5, #4]
	fno->ftime = ld_word(dp->dir + DIR_WrtTime);	/* Time */
 80063f2:	69f0      	ldr	r0, [r6, #28]
 80063f4:	3016      	adds	r0, #22
 80063f6:	f7fe ffdb 	bl	80053b0 <ld_word>
 80063fa:	80e8      	strh	r0, [r5, #6]
}
 80063fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006400 <cmp_lfn>:
{
 8006400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006404:	4681      	mov	r9, r0
 8006406:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006408:	f101 001a 	add.w	r0, r1, #26
 800640c:	f7fe ffd0 	bl	80053b0 <ld_word>
 8006410:	bbb8      	cbnz	r0, 8006482 <cmp_lfn+0x82>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006412:	783d      	ldrb	r5, [r7, #0]
 8006414:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8006418:	3d01      	subs	r5, #1
 800641a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800641e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006422:	f04f 0801 	mov.w	r8, #1
 8006426:	2400      	movs	r4, #0
 8006428:	e004      	b.n	8006434 <cmp_lfn+0x34>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800642a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800642e:	4298      	cmp	r0, r3
 8006430:	d12e      	bne.n	8006490 <cmp_lfn+0x90>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006432:	3401      	adds	r4, #1
 8006434:	2c0c      	cmp	r4, #12
 8006436:	d818      	bhi.n	800646a <cmp_lfn+0x6a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006438:	4b19      	ldr	r3, [pc, #100]	; (80064a0 <cmp_lfn+0xa0>)
 800643a:	5d18      	ldrb	r0, [r3, r4]
 800643c:	4438      	add	r0, r7
 800643e:	f7fe ffb7 	bl	80053b0 <ld_word>
 8006442:	4606      	mov	r6, r0
		if (wc) {
 8006444:	f1b8 0f00 	cmp.w	r8, #0
 8006448:	d0ef      	beq.n	800642a <cmp_lfn+0x2a>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800644a:	2dfe      	cmp	r5, #254	; 0xfe
 800644c:	d81c      	bhi.n	8006488 <cmp_lfn+0x88>
 800644e:	f000 fe7f 	bl	8007150 <ff_wtoupper>
 8006452:	4680      	mov	r8, r0
 8006454:	f105 0a01 	add.w	sl, r5, #1
 8006458:	f839 0015 	ldrh.w	r0, [r9, r5, lsl #1]
 800645c:	f000 fe78 	bl	8007150 <ff_wtoupper>
 8006460:	4580      	cmp	r8, r0
 8006462:	d113      	bne.n	800648c <cmp_lfn+0x8c>
			wc = uc;
 8006464:	46b0      	mov	r8, r6
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006466:	4655      	mov	r5, sl
 8006468:	e7e3      	b.n	8006432 <cmp_lfn+0x32>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800646a:	783b      	ldrb	r3, [r7, #0]
 800646c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006470:	d010      	beq.n	8006494 <cmp_lfn+0x94>
 8006472:	f1b8 0f00 	cmp.w	r8, #0
 8006476:	d00f      	beq.n	8006498 <cmp_lfn+0x98>
 8006478:	f839 3015 	ldrh.w	r3, [r9, r5, lsl #1]
 800647c:	b973      	cbnz	r3, 800649c <cmp_lfn+0x9c>
	return 1;		/* The part of LFN matched */
 800647e:	2001      	movs	r0, #1
 8006480:	e000      	b.n	8006484 <cmp_lfn+0x84>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006482:	2000      	movs	r0, #0
}
 8006484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;					/* Not matched */
 8006488:	2000      	movs	r0, #0
 800648a:	e7fb      	b.n	8006484 <cmp_lfn+0x84>
 800648c:	2000      	movs	r0, #0
 800648e:	e7f9      	b.n	8006484 <cmp_lfn+0x84>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006490:	2000      	movs	r0, #0
 8006492:	e7f7      	b.n	8006484 <cmp_lfn+0x84>
	return 1;		/* The part of LFN matched */
 8006494:	2001      	movs	r0, #1
 8006496:	e7f5      	b.n	8006484 <cmp_lfn+0x84>
 8006498:	2001      	movs	r0, #1
 800649a:	e7f3      	b.n	8006484 <cmp_lfn+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800649c:	2000      	movs	r0, #0
 800649e:	e7f1      	b.n	8006484 <cmp_lfn+0x84>
 80064a0:	0801594c 	.word	0x0801594c

080064a4 <dir_find>:
{
 80064a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064a8:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80064aa:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80064ae:	2100      	movs	r1, #0
 80064b0:	f7ff fb71 	bl	8005b96 <dir_sdi>
	if (res != FR_OK) return res;
 80064b4:	4606      	mov	r6, r0
 80064b6:	2800      	cmp	r0, #0
 80064b8:	d15e      	bne.n	8006578 <dir_find+0xd4>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80064ba:	f04f 33ff 	mov.w	r3, #4294967295
 80064be:	6263      	str	r3, [r4, #36]	; 0x24
 80064c0:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80064c4:	464f      	mov	r7, r9
 80064c6:	e00a      	b.n	80064de <dir_find+0x3a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80064c8:	f04f 33ff 	mov.w	r3, #4294967295
 80064cc:	6263      	str	r3, [r4, #36]	; 0x24
 80064ce:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 80064d0:	2100      	movs	r1, #0
 80064d2:	4620      	mov	r0, r4
 80064d4:	f7ff fcd8 	bl	8005e88 <dir_next>
	} while (res == FR_OK);
 80064d8:	4606      	mov	r6, r0
 80064da:	2800      	cmp	r0, #0
 80064dc:	d14c      	bne.n	8006578 <dir_find+0xd4>
		res = move_window(fs, dp->sect);
 80064de:	69a1      	ldr	r1, [r4, #24]
 80064e0:	4640      	mov	r0, r8
 80064e2:	f7ff f927 	bl	8005734 <move_window>
		if (res != FR_OK) break;
 80064e6:	4606      	mov	r6, r0
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d145      	bne.n	8006578 <dir_find+0xd4>
		c = dp->dir[DIR_Name];
 80064ec:	69e5      	ldr	r5, [r4, #28]
 80064ee:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d040      	beq.n	8006576 <dir_find+0xd2>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80064f4:	7ae9      	ldrb	r1, [r5, #11]
 80064f6:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 80064fa:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80064fc:	2be5      	cmp	r3, #229	; 0xe5
 80064fe:	d0e3      	beq.n	80064c8 <dir_find+0x24>
 8006500:	f011 0f08 	tst.w	r1, #8
 8006504:	d001      	beq.n	800650a <dir_find+0x66>
 8006506:	2a0f      	cmp	r2, #15
 8006508:	d1de      	bne.n	80064c8 <dir_find+0x24>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800650a:	2a0f      	cmp	r2, #15
 800650c:	d014      	beq.n	8006538 <dir_find+0x94>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800650e:	b927      	cbnz	r7, 800651a <dir_find+0x76>
 8006510:	4628      	mov	r0, r5
 8006512:	f7ff f893 	bl	800563c <sum_sfn>
 8006516:	4548      	cmp	r0, r9
 8006518:	d02e      	beq.n	8006578 <dir_find+0xd4>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800651a:	6a21      	ldr	r1, [r4, #32]
 800651c:	7acb      	ldrb	r3, [r1, #11]
 800651e:	f013 0f01 	tst.w	r3, #1
 8006522:	d104      	bne.n	800652e <dir_find+0x8a>
 8006524:	220b      	movs	r2, #11
 8006526:	4628      	mov	r0, r5
 8006528:	f7fe ff6e 	bl	8005408 <mem_cmp>
 800652c:	b320      	cbz	r0, 8006578 <dir_find+0xd4>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800652e:	f04f 33ff 	mov.w	r3, #4294967295
 8006532:	6263      	str	r3, [r4, #36]	; 0x24
 8006534:	27ff      	movs	r7, #255	; 0xff
 8006536:	e7cb      	b.n	80064d0 <dir_find+0x2c>
				if (dp->lfn) {
 8006538:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800653a:	2800      	cmp	r0, #0
 800653c:	d0c8      	beq.n	80064d0 <dir_find+0x2c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800653e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006542:	d006      	beq.n	8006552 <dir_find+0xae>
						sum = dp->dir[LDIR_Chksum];
 8006544:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8006548:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800654c:	6922      	ldr	r2, [r4, #16]
 800654e:	6262      	str	r2, [r4, #36]	; 0x24
						c &= ~LLEF; ord = c;	/* LFN start order */
 8006550:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dp->dir)) ? ord - 1 : 0xFF;
 8006552:	42bb      	cmp	r3, r7
 8006554:	d001      	beq.n	800655a <dir_find+0xb6>
 8006556:	27ff      	movs	r7, #255	; 0xff
 8006558:	e7ba      	b.n	80064d0 <dir_find+0x2c>
 800655a:	7b6b      	ldrb	r3, [r5, #13]
 800655c:	454b      	cmp	r3, r9
 800655e:	d001      	beq.n	8006564 <dir_find+0xc0>
 8006560:	27ff      	movs	r7, #255	; 0xff
 8006562:	e7b5      	b.n	80064d0 <dir_find+0x2c>
 8006564:	4629      	mov	r1, r5
 8006566:	f7ff ff4b 	bl	8006400 <cmp_lfn>
 800656a:	b110      	cbz	r0, 8006572 <dir_find+0xce>
 800656c:	3f01      	subs	r7, #1
 800656e:	b2ff      	uxtb	r7, r7
 8006570:	e7ae      	b.n	80064d0 <dir_find+0x2c>
 8006572:	27ff      	movs	r7, #255	; 0xff
 8006574:	e7ac      	b.n	80064d0 <dir_find+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006576:	2604      	movs	r6, #4
}
 8006578:	4630      	mov	r0, r6
 800657a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800657e <follow_path>:
{
 800657e:	b530      	push	{r4, r5, lr}
 8006580:	b083      	sub	sp, #12
 8006582:	4604      	mov	r4, r0
 8006584:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8006586:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006588:	e001      	b.n	800658e <follow_path+0x10>
 800658a:	3301      	adds	r3, #1
 800658c:	9301      	str	r3, [sp, #4]
 800658e:	9b01      	ldr	r3, [sp, #4]
 8006590:	781a      	ldrb	r2, [r3, #0]
 8006592:	2a2f      	cmp	r2, #47	; 0x2f
 8006594:	d0f9      	beq.n	800658a <follow_path+0xc>
 8006596:	2a5c      	cmp	r2, #92	; 0x5c
 8006598:	d0f7      	beq.n	800658a <follow_path+0xc>
		obj->sclust = 0;					/* Start from the root directory */
 800659a:	2200      	movs	r2, #0
 800659c:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2b1f      	cmp	r3, #31
 80065a2:	d91d      	bls.n	80065e0 <follow_path+0x62>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80065a4:	a901      	add	r1, sp, #4
 80065a6:	4620      	mov	r0, r4
 80065a8:	f7ff fda2 	bl	80060f0 <create_name>
			if (res != FR_OK) break;
 80065ac:	4603      	mov	r3, r0
 80065ae:	b9f8      	cbnz	r0, 80065f0 <follow_path+0x72>
			res = dir_find(dp);				/* Find an object with the segment name */
 80065b0:	4620      	mov	r0, r4
 80065b2:	f7ff ff77 	bl	80064a4 <dir_find>
			ns = dp->fn[NSFLAG];
 80065b6:	6a23      	ldr	r3, [r4, #32]
 80065b8:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80065ba:	4603      	mov	r3, r0
 80065bc:	b9d8      	cbnz	r0, 80065f6 <follow_path+0x78>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80065be:	f012 0f04 	tst.w	r2, #4
 80065c2:	d115      	bne.n	80065f0 <follow_path+0x72>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80065c4:	79a3      	ldrb	r3, [r4, #6]
 80065c6:	f013 0f10 	tst.w	r3, #16
 80065ca:	d01b      	beq.n	8006604 <follow_path+0x86>
				obj->sclust = ld_clust(fs, &fs->win[dp->dptr % SS(fs)]);	/* Open next directory */
 80065cc:	6921      	ldr	r1, [r4, #16]
 80065ce:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80065d2:	3130      	adds	r1, #48	; 0x30
 80065d4:	4429      	add	r1, r5
 80065d6:	4628      	mov	r0, r5
 80065d8:	f7fe ff39 	bl	800544e <ld_clust>
 80065dc:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80065de:	e7e1      	b.n	80065a4 <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 80065e0:	6a23      	ldr	r3, [r4, #32]
 80065e2:	2280      	movs	r2, #128	; 0x80
 80065e4:	72da      	strb	r2, [r3, #11]
		res = dir_sdi(dp, 0);
 80065e6:	2100      	movs	r1, #0
 80065e8:	4620      	mov	r0, r4
 80065ea:	f7ff fad4 	bl	8005b96 <dir_sdi>
 80065ee:	4603      	mov	r3, r0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	b003      	add	sp, #12
 80065f4:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 80065f6:	2804      	cmp	r0, #4
 80065f8:	d1fa      	bne.n	80065f0 <follow_path+0x72>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80065fa:	f012 0f04 	tst.w	r2, #4
 80065fe:	d1f7      	bne.n	80065f0 <follow_path+0x72>
 8006600:	2305      	movs	r3, #5
 8006602:	e7f5      	b.n	80065f0 <follow_path+0x72>
				res = FR_NO_PATH; break;
 8006604:	2305      	movs	r3, #5
 8006606:	e7f3      	b.n	80065f0 <follow_path+0x72>

08006608 <dir_register>:
{
 8006608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800660c:	b084      	sub	sp, #16
	FATFS *fs = dp->obj.fs;
 800660e:	6806      	ldr	r6, [r0, #0]
	fn = dp->fn; lfn = dp->lfn;
 8006610:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8006614:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
	if (fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006618:	f89a 300b 	ldrb.w	r3, [sl, #11]
 800661c:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8006620:	f040 8089 	bne.w	8006736 <dir_register+0x12e>
	for (nlen = 0; lfn[nlen]; nlen++) ;	/* Get lfn length */
 8006624:	2400      	movs	r4, #0
 8006626:	e000      	b.n	800662a <dir_register+0x22>
 8006628:	3401      	adds	r4, #1
 800662a:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1fa      	bne.n	8006628 <dir_register+0x20>
 8006632:	4605      	mov	r5, r0
	mem_cpy(sn, fn, 12);
 8006634:	220c      	movs	r2, #12
 8006636:	4651      	mov	r1, sl
 8006638:	a801      	add	r0, sp, #4
 800663a:	f7fe fed7 	bl	80053ec <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800663e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8006642:	f013 0f01 	tst.w	r3, #1
 8006646:	d01e      	beq.n	8006686 <dir_register+0x7e>
		fn[NSFLAG] = 0; dp->lfn = 0;		/* Find only SFN */
 8006648:	2300      	movs	r3, #0
 800664a:	f88a 300b 	strb.w	r3, [sl, #11]
 800664e:	62ab      	str	r3, [r5, #40]	; 0x28
		for (n = 1; n < 100; n++) {
 8006650:	2701      	movs	r7, #1
 8006652:	2f63      	cmp	r7, #99	; 0x63
 8006654:	d80c      	bhi.n	8006670 <dir_register+0x68>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8006656:	463b      	mov	r3, r7
 8006658:	4642      	mov	r2, r8
 800665a:	a901      	add	r1, sp, #4
 800665c:	4650      	mov	r0, sl
 800665e:	f7fe ff9d 	bl	800559c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006662:	4628      	mov	r0, r5
 8006664:	f7ff ff1e 	bl	80064a4 <dir_find>
			if (res != FR_OK) break;
 8006668:	4681      	mov	r9, r0
 800666a:	b908      	cbnz	r0, 8006670 <dir_register+0x68>
		for (n = 1; n < 100; n++) {
 800666c:	3701      	adds	r7, #1
 800666e:	e7f0      	b.n	8006652 <dir_register+0x4a>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006670:	2f64      	cmp	r7, #100	; 0x64
 8006672:	d066      	beq.n	8006742 <dir_register+0x13a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006674:	f1b9 0f04 	cmp.w	r9, #4
 8006678:	d15f      	bne.n	800673a <dir_register+0x132>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800667a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800667e:	f88a 300b 	strb.w	r3, [sl, #11]
 8006682:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006686:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800668a:	f013 0f02 	tst.w	r3, #2
 800668e:	d02a      	beq.n	80066e6 <dir_register+0xde>
 8006690:	340c      	adds	r4, #12
 8006692:	4b2d      	ldr	r3, [pc, #180]	; (8006748 <dir_register+0x140>)
 8006694:	fba3 3404 	umull	r3, r4, r3, r4
 8006698:	08a4      	lsrs	r4, r4, #2
 800669a:	3401      	adds	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800669c:	4621      	mov	r1, r4
 800669e:	4628      	mov	r0, r5
 80066a0:	f7ff fc77 	bl	8005f92 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80066a4:	4681      	mov	r9, r0
 80066a6:	b908      	cbnz	r0, 80066ac <dir_register+0xa4>
 80066a8:	3c01      	subs	r4, #1
 80066aa:	d11e      	bne.n	80066ea <dir_register+0xe2>
	if (res == FR_OK) {
 80066ac:	f1b9 0f00 	cmp.w	r9, #0
 80066b0:	d143      	bne.n	800673a <dir_register+0x132>
		res = move_window(fs, dp->sect);
 80066b2:	69a9      	ldr	r1, [r5, #24]
 80066b4:	4630      	mov	r0, r6
 80066b6:	f7ff f83d 	bl	8005734 <move_window>
		if (res == FR_OK) {
 80066ba:	4681      	mov	r9, r0
 80066bc:	2800      	cmp	r0, #0
 80066be:	d13c      	bne.n	800673a <dir_register+0x132>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80066c0:	2220      	movs	r2, #32
 80066c2:	2100      	movs	r1, #0
 80066c4:	69e8      	ldr	r0, [r5, #28]
 80066c6:	f7fe fe9a 	bl	80053fe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80066ca:	220b      	movs	r2, #11
 80066cc:	6a29      	ldr	r1, [r5, #32]
 80066ce:	69e8      	ldr	r0, [r5, #28]
 80066d0:	f7fe fe8c 	bl	80053ec <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80066d4:	6a2b      	ldr	r3, [r5, #32]
 80066d6:	7adb      	ldrb	r3, [r3, #11]
 80066d8:	69ea      	ldr	r2, [r5, #28]
 80066da:	f003 0318 	and.w	r3, r3, #24
 80066de:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 80066e0:	2301      	movs	r3, #1
 80066e2:	70f3      	strb	r3, [r6, #3]
 80066e4:	e029      	b.n	800673a <dir_register+0x132>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80066e6:	2401      	movs	r4, #1
 80066e8:	e7d8      	b.n	800669c <dir_register+0x94>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80066ea:	6929      	ldr	r1, [r5, #16]
 80066ec:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 80066f0:	4628      	mov	r0, r5
 80066f2:	f7ff fa50 	bl	8005b96 <dir_sdi>
		if (res == FR_OK) {
 80066f6:	4681      	mov	r9, r0
 80066f8:	2800      	cmp	r0, #0
 80066fa:	d1d7      	bne.n	80066ac <dir_register+0xa4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80066fc:	6a28      	ldr	r0, [r5, #32]
 80066fe:	f7fe ff9d 	bl	800563c <sum_sfn>
 8006702:	4607      	mov	r7, r0
				res = move_window(fs, dp->sect);
 8006704:	69a9      	ldr	r1, [r5, #24]
 8006706:	4630      	mov	r0, r6
 8006708:	f7ff f814 	bl	8005734 <move_window>
				if (res != FR_OK) break;
 800670c:	4681      	mov	r9, r0
 800670e:	2800      	cmp	r0, #0
 8006710:	d1cc      	bne.n	80066ac <dir_register+0xa4>
				put_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8006712:	463b      	mov	r3, r7
 8006714:	b2e2      	uxtb	r2, r4
 8006716:	69e9      	ldr	r1, [r5, #28]
 8006718:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800671a:	f7fe ff03 	bl	8005524 <put_lfn>
				fs->wflag = 1;
 800671e:	2301      	movs	r3, #1
 8006720:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006722:	2100      	movs	r1, #0
 8006724:	4628      	mov	r0, r5
 8006726:	f7ff fbaf 	bl	8005e88 <dir_next>
			} while (res == FR_OK && --nent);
 800672a:	4681      	mov	r9, r0
 800672c:	2800      	cmp	r0, #0
 800672e:	d1bd      	bne.n	80066ac <dir_register+0xa4>
 8006730:	3c01      	subs	r4, #1
 8006732:	d1e7      	bne.n	8006704 <dir_register+0xfc>
 8006734:	e7ba      	b.n	80066ac <dir_register+0xa4>
	if (fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006736:	f04f 0906 	mov.w	r9, #6
}
 800673a:	4648      	mov	r0, r9
 800673c:	b004      	add	sp, #16
 800673e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006742:	f04f 0907 	mov.w	r9, #7
 8006746:	e7f8      	b.n	800673a <dir_register+0x132>
 8006748:	4ec4ec4f 	.word	0x4ec4ec4f

0800674c <sync_fs>:
{
 800674c:	b570      	push	{r4, r5, r6, lr}
 800674e:	4604      	mov	r4, r0
	res = sync_window(fs);
 8006750:	f7fe ffc6 	bl	80056e0 <sync_window>
	if (res == FR_OK) {
 8006754:	4605      	mov	r5, r0
 8006756:	b948      	cbnz	r0, 800676c <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006758:	7823      	ldrb	r3, [r4, #0]
 800675a:	2b03      	cmp	r3, #3
 800675c:	d008      	beq.n	8006770 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800675e:	2200      	movs	r2, #0
 8006760:	4611      	mov	r1, r2
 8006762:	7860      	ldrb	r0, [r4, #1]
 8006764:	f7fd faa9 	bl	8003cba <disk_ioctl>
 8006768:	b100      	cbz	r0, 800676c <sync_fs+0x20>
 800676a:	2501      	movs	r5, #1
}
 800676c:	4628      	mov	r0, r5
 800676e:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006770:	7923      	ldrb	r3, [r4, #4]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d1f3      	bne.n	800675e <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 8006776:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800677a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800677e:	2100      	movs	r1, #0
 8006780:	4630      	mov	r0, r6
 8006782:	f7fe fe3c 	bl	80053fe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006786:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800678a:	f204 202e 	addw	r0, r4, #558	; 0x22e
 800678e:	f7fe fe1f 	bl	80053d0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006792:	490f      	ldr	r1, [pc, #60]	; (80067d0 <sync_fs+0x84>)
 8006794:	4630      	mov	r0, r6
 8006796:	f7fe fe1f 	bl	80053d8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800679a:	490e      	ldr	r1, [pc, #56]	; (80067d4 <sync_fs+0x88>)
 800679c:	f504 7005 	add.w	r0, r4, #532	; 0x214
 80067a0:	f7fe fe1a 	bl	80053d8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80067a4:	6921      	ldr	r1, [r4, #16]
 80067a6:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80067aa:	f7fe fe15 	bl	80053d8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80067ae:	68e1      	ldr	r1, [r4, #12]
 80067b0:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80067b4:	f7fe fe10 	bl	80053d8 <st_dword>
			fs->winsect = fs->volbase + 1;
 80067b8:	69e2      	ldr	r2, [r4, #28]
 80067ba:	3201      	adds	r2, #1
 80067bc:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80067be:	2301      	movs	r3, #1
 80067c0:	4631      	mov	r1, r6
 80067c2:	7860      	ldrb	r0, [r4, #1]
 80067c4:	f7fd fa74 	bl	8003cb0 <disk_write>
			fs->fsi_flag = 0;
 80067c8:	2300      	movs	r3, #0
 80067ca:	7123      	strb	r3, [r4, #4]
 80067cc:	e7c7      	b.n	800675e <sync_fs+0x12>
 80067ce:	bf00      	nop
 80067d0:	41615252 	.word	0x41615252
 80067d4:	61417272 	.word	0x61417272

080067d8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80067d8:	b510      	push	{r4, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	9001      	str	r0, [sp, #4]
 80067de:	9100      	str	r1, [sp, #0]
 80067e0:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80067e2:	a804      	add	r0, sp, #16
 80067e4:	f840 1d04 	str.w	r1, [r0, #-4]!


	vol = get_ldnumber(&rp);
 80067e8:	f7fe ff36 	bl	8005658 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80067ec:	2800      	cmp	r0, #0
 80067ee:	db19      	blt.n	8006824 <f_mount+0x4c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80067f0:	4b0e      	ldr	r3, [pc, #56]	; (800682c <f_mount+0x54>)
 80067f2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
 80067f6:	b10b      	cbz	r3, 80067fc <f_mount+0x24>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80067f8:	2200      	movs	r2, #0
 80067fa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80067fc:	9b01      	ldr	r3, [sp, #4]
 80067fe:	b10b      	cbz	r3, 8006804 <f_mount+0x2c>
		fs->fs_type = 0;				/* Clear new fs object */
 8006800:	2200      	movs	r2, #0
 8006802:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006804:	9b01      	ldr	r3, [sp, #4]
 8006806:	4a09      	ldr	r2, [pc, #36]	; (800682c <f_mount+0x54>)
 8006808:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800680c:	b163      	cbz	r3, 8006828 <f_mount+0x50>
 800680e:	2c01      	cmp	r4, #1
 8006810:	d002      	beq.n	8006818 <f_mount+0x40>
 8006812:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8006814:	b004      	add	sp, #16
 8006816:	bd10      	pop	{r4, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006818:	2200      	movs	r2, #0
 800681a:	a901      	add	r1, sp, #4
 800681c:	4668      	mov	r0, sp
 800681e:	f7fe ffd3 	bl	80057c8 <find_volume>
	LEAVE_FF(fs, res);
 8006822:	e7f7      	b.n	8006814 <f_mount+0x3c>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006824:	200b      	movs	r0, #11
 8006826:	e7f5      	b.n	8006814 <f_mount+0x3c>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006828:	2000      	movs	r0, #0
 800682a:	e7f3      	b.n	8006814 <f_mount+0x3c>
 800682c:	20000fec 	.word	0x20000fec

08006830 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006834:	b093      	sub	sp, #76	; 0x4c
 8006836:	9101      	str	r1, [sp, #4]
	DWORD dw, cl;
#endif
	DEF_NAMBUF;


	if (!fp) return FR_INVALID_OBJECT;
 8006838:	2800      	cmp	r0, #0
 800683a:	f000 80af 	beq.w	800699c <f_open+0x16c>
 800683e:	4604      	mov	r4, r0
 8006840:	4615      	mov	r5, r2
	fp->obj.fs = 0;		/* Clear file object */
 8006842:	2300      	movs	r3, #0
 8006844:	6003      	str	r3, [r0, #0]

	/* Get logical drive number */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006846:	f002 071f 	and.w	r7, r2, #31
	res = find_volume(&path, &fs, mode);
 800684a:	463a      	mov	r2, r7
 800684c:	a906      	add	r1, sp, #24
 800684e:	a801      	add	r0, sp, #4
 8006850:	f7fe ffba 	bl	80057c8 <find_volume>
	if (res == FR_OK) {
 8006854:	4606      	mov	r6, r0
 8006856:	b118      	cbz	r0, 8006860 <f_open+0x30>

		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 8006858:	4630      	mov	r0, r6
 800685a:	b013      	add	sp, #76	; 0x4c
 800685c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 8006860:	9b06      	ldr	r3, [sp, #24]
 8006862:	9307      	str	r3, [sp, #28]
		INIT_NAMBUF(dj);
 8006864:	ab03      	add	r3, sp, #12
 8006866:	930f      	str	r3, [sp, #60]	; 0x3c
 8006868:	4b4d      	ldr	r3, [pc, #308]	; (80069a0 <f_open+0x170>)
 800686a:	9311      	str	r3, [sp, #68]	; 0x44
		res = follow_path(&dj, path);	/* Follow the file path */
 800686c:	9901      	ldr	r1, [sp, #4]
 800686e:	a807      	add	r0, sp, #28
 8006870:	f7ff fe85 	bl	800657e <follow_path>
		if (res == FR_OK) {
 8006874:	4606      	mov	r6, r0
 8006876:	b920      	cbnz	r0, 8006882 <f_open+0x52>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006878:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800687a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 800687e:	2b00      	cmp	r3, #0
 8006880:	db46      	blt.n	8006910 <f_open+0xe0>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006882:	f015 0f1c 	tst.w	r5, #28
 8006886:	d054      	beq.n	8006932 <f_open+0x102>
			if (res != FR_OK) {					/* No file, create new */
 8006888:	2e00      	cmp	r6, #0
 800688a:	d048      	beq.n	800691e <f_open+0xee>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800688c:	2e04      	cmp	r6, #4
 800688e:	d041      	beq.n	8006914 <f_open+0xe4>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006890:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006894:	2e00      	cmp	r6, #0
 8006896:	d15b      	bne.n	8006950 <f_open+0x120>
 8006898:	f017 0f08 	tst.w	r7, #8
 800689c:	d058      	beq.n	8006950 <f_open+0x120>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800689e:	4d41      	ldr	r5, [pc, #260]	; (80069a4 <f_open+0x174>)
 80068a0:	4629      	mov	r1, r5
 80068a2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80068a4:	300e      	adds	r0, #14
 80068a6:	f7fe fd97 	bl	80053d8 <st_dword>
					st_dword(dj.dir + DIR_WrtTime, dw);	/* Set modified time */
 80068aa:	4629      	mov	r1, r5
 80068ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 80068ae:	3016      	adds	r0, #22
 80068b0:	f7fe fd92 	bl	80053d8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80068b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068b6:	2220      	movs	r2, #32
 80068b8:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80068ba:	9d06      	ldr	r5, [sp, #24]
 80068bc:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80068c0:	4641      	mov	r1, r8
 80068c2:	4628      	mov	r0, r5
 80068c4:	f7fe fdc3 	bl	800544e <ld_clust>
 80068c8:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80068ca:	2200      	movs	r2, #0
 80068cc:	4641      	mov	r1, r8
 80068ce:	4628      	mov	r0, r5
 80068d0:	f7fe fdd0 	bl	8005474 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80068d4:	2100      	movs	r1, #0
 80068d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80068d8:	301c      	adds	r0, #28
 80068da:	f7fe fd7d 	bl	80053d8 <st_dword>
					fs->wflag = 1;
 80068de:	9b06      	ldr	r3, [sp, #24]
 80068e0:	2201      	movs	r2, #1
 80068e2:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 80068e4:	f1b9 0f00 	cmp.w	r9, #0
 80068e8:	d032      	beq.n	8006950 <f_open+0x120>
						dw = fs->winsect;
 80068ea:	9b06      	ldr	r3, [sp, #24]
 80068ec:	6add      	ldr	r5, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 80068ee:	2200      	movs	r2, #0
 80068f0:	4649      	mov	r1, r9
 80068f2:	a807      	add	r0, sp, #28
 80068f4:	f7ff fa89 	bl	8005e0a <remove_chain>
						if (res == FR_OK) {
 80068f8:	4606      	mov	r6, r0
 80068fa:	bb48      	cbnz	r0, 8006950 <f_open+0x120>
							res = move_window(fs, dw);
 80068fc:	4629      	mov	r1, r5
 80068fe:	9806      	ldr	r0, [sp, #24]
 8006900:	f7fe ff18 	bl	8005734 <move_window>
 8006904:	4606      	mov	r6, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006906:	f109 33ff 	add.w	r3, r9, #4294967295
 800690a:	9a06      	ldr	r2, [sp, #24]
 800690c:	60d3      	str	r3, [r2, #12]
 800690e:	e01f      	b.n	8006950 <f_open+0x120>
				res = FR_INVALID_NAME;
 8006910:	2606      	movs	r6, #6
 8006912:	e7b6      	b.n	8006882 <f_open+0x52>
					res = dir_register(&dj);
 8006914:	a807      	add	r0, sp, #28
 8006916:	f7ff fe77 	bl	8006608 <dir_register>
 800691a:	4606      	mov	r6, r0
 800691c:	e7b8      	b.n	8006890 <f_open+0x60>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800691e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8006922:	f013 0f11 	tst.w	r3, #17
 8006926:	d112      	bne.n	800694e <f_open+0x11e>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006928:	f015 0f04 	tst.w	r5, #4
 800692c:	d0b2      	beq.n	8006894 <f_open+0x64>
 800692e:	2608      	movs	r6, #8
 8006930:	e00e      	b.n	8006950 <f_open+0x120>
			if (res == FR_OK) {					/* Following succeeded */
 8006932:	b96e      	cbnz	r6, 8006950 <f_open+0x120>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006934:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8006938:	f013 0f10 	tst.w	r3, #16
 800693c:	d12c      	bne.n	8006998 <f_open+0x168>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800693e:	f015 0f02 	tst.w	r5, #2
 8006942:	d005      	beq.n	8006950 <f_open+0x120>
 8006944:	f013 0f01 	tst.w	r3, #1
 8006948:	d002      	beq.n	8006950 <f_open+0x120>
						res = FR_DENIED;
 800694a:	2607      	movs	r6, #7
 800694c:	e00b      	b.n	8006966 <f_open+0x136>
					res = FR_DENIED;
 800694e:	2607      	movs	r6, #7
		if (res == FR_OK) {
 8006950:	b94e      	cbnz	r6, 8006966 <f_open+0x136>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006952:	f017 0f08 	tst.w	r7, #8
 8006956:	d001      	beq.n	800695c <f_open+0x12c>
				mode |= _FA_MODIFIED;
 8006958:	f047 0720 	orr.w	r7, r7, #32
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800695c:	9b06      	ldr	r3, [sp, #24]
 800695e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006960:	6223      	str	r3, [r4, #32]
			fp->dir_ptr = dj.dir;
 8006962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006964:	6263      	str	r3, [r4, #36]	; 0x24
		if (res == FR_OK) {
 8006966:	2e00      	cmp	r6, #0
 8006968:	f47f af76 	bne.w	8006858 <f_open+0x28>
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
 800696c:	9d06      	ldr	r5, [sp, #24]
 800696e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8006972:	4641      	mov	r1, r8
 8006974:	4628      	mov	r0, r5
 8006976:	f7fe fd6a 	bl	800544e <ld_clust>
 800697a:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800697c:	f108 001c 	add.w	r0, r8, #28
 8006980:	f7fe fd1b 	bl	80053ba <ld_dword>
 8006984:	60e0      	str	r0, [r4, #12]
			fp->err = 0;			/* Clear error flag */
 8006986:	2300      	movs	r3, #0
 8006988:	7463      	strb	r3, [r4, #17]
			fp->fptr = 0;			/* Set file pointer */
 800698a:	6163      	str	r3, [r4, #20]
			fp->sect = 0;			/* Invalidate current data sector */
 800698c:	61e3      	str	r3, [r4, #28]
			fp->flag = mode;		/* File access mode */
 800698e:	7427      	strb	r7, [r4, #16]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006990:	6025      	str	r5, [r4, #0]
			fp->obj.id = fs->id;
 8006992:	88eb      	ldrh	r3, [r5, #6]
 8006994:	80a3      	strh	r3, [r4, #4]
 8006996:	e75f      	b.n	8006858 <f_open+0x28>
					res = FR_NO_FILE;
 8006998:	2604      	movs	r6, #4
 800699a:	e7e4      	b.n	8006966 <f_open+0x136>
	if (!fp) return FR_INVALID_OBJECT;
 800699c:	2609      	movs	r6, #9
 800699e:	e75b      	b.n	8006858 <f_open+0x28>
 80069a0:	20000ff4 	.word	0x20000ff4
 80069a4:	48610000 	.word	0x48610000

080069a8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80069a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ac:	b085      	sub	sp, #20
 80069ae:	4604      	mov	r4, r0
 80069b0:	4689      	mov	r9, r1
 80069b2:	4617      	mov	r7, r2
 80069b4:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80069b6:	2300      	movs	r3, #0
 80069b8:	f8c8 3000 	str.w	r3, [r8]
	res = validate(fp, &fs);
 80069bc:	a903      	add	r1, sp, #12
 80069be:	f7fe fe75 	bl	80056ac <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80069c2:	4606      	mov	r6, r0
 80069c4:	2800      	cmp	r0, #0
 80069c6:	f040 80a2 	bne.w	8006b0e <f_read+0x166>
 80069ca:	7c66      	ldrb	r6, [r4, #17]
 80069cc:	2e00      	cmp	r6, #0
 80069ce:	f040 809e 	bne.w	8006b0e <f_read+0x166>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80069d2:	7c23      	ldrb	r3, [r4, #16]
 80069d4:	f013 0f01 	tst.w	r3, #1
 80069d8:	f000 80a3 	beq.w	8006b22 <f_read+0x17a>
	remain = fp->obj.objsize - fp->fptr;
 80069dc:	68e5      	ldr	r5, [r4, #12]
 80069de:	6963      	ldr	r3, [r4, #20]
 80069e0:	1aed      	subs	r5, r5, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80069e2:	42bd      	cmp	r5, r7
 80069e4:	d35d      	bcc.n	8006aa2 <f_read+0xfa>
 80069e6:	463d      	mov	r5, r7
 80069e8:	e05b      	b.n	8006aa2 <f_read+0xfa>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80069ea:	69a1      	ldr	r1, [r4, #24]
 80069ec:	4620      	mov	r0, r4
 80069ee:	f7ff f86b 	bl	8005ac8 <get_fat>
 80069f2:	e066      	b.n	8006ac2 <f_read+0x11a>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80069f4:	2602      	movs	r6, #2
 80069f6:	7466      	strb	r6, [r4, #17]
 80069f8:	e089      	b.n	8006b0e <f_read+0x166>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80069fa:	2601      	movs	r6, #1
 80069fc:	7466      	strb	r6, [r4, #17]
 80069fe:	e086      	b.n	8006b0e <f_read+0x166>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006a00:	2602      	movs	r6, #2
 8006a02:	7466      	strb	r6, [r4, #17]
 8006a04:	e083      	b.n	8006b0e <f_read+0x166>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & _FA_DIRTY) && fp->sect - sect < cc) {
 8006a06:	7c23      	ldrb	r3, [r4, #16]
 8006a08:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a0c:	d005      	beq.n	8006a1a <f_read+0x72>
 8006a0e:	69e0      	ldr	r0, [r4, #28]
 8006a10:	eba0 000a 	sub.w	r0, r0, sl
 8006a14:	9b01      	ldr	r3, [sp, #4]
 8006a16:	4298      	cmp	r0, r3
 8006a18:	d302      	bcc.n	8006a20 <f_read+0x78>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006a1a:	9b01      	ldr	r3, [sp, #4]
 8006a1c:	025f      	lsls	r7, r3, #9
				continue;
 8006a1e:	e036      	b.n	8006a8e <f_read+0xe6>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a24:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8006a28:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8006a2c:	f7fe fcde 	bl	80053ec <mem_cpy>
 8006a30:	e7f3      	b.n	8006a1a <f_read+0x72>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006a32:	69e2      	ldr	r2, [r4, #28]
 8006a34:	4552      	cmp	r2, sl
 8006a36:	d01a      	beq.n	8006a6e <f_read+0xc6>
#if !_FS_READONLY
				if (fp->flag & _FA_DIRTY) {		/* Write-back dirty sector cache */
 8006a38:	7c23      	ldrb	r3, [r4, #16]
 8006a3a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a3e:	d00c      	beq.n	8006a5a <f_read+0xb2>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 8006a40:	2301      	movs	r3, #1
 8006a42:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8006a46:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8006a4a:	f7fd f931 	bl	8003cb0 <disk_write>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d161      	bne.n	8006b16 <f_read+0x16e>
						ABORT(fs, FR_DISK_ERR);
					}
					fp->flag &= ~_FA_DIRTY;
 8006a52:	7c23      	ldrb	r3, [r4, #16]
 8006a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a58:	7423      	strb	r3, [r4, #16]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	{	/* Fill sector cache */
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4652      	mov	r2, sl
 8006a5e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8006a62:	9803      	ldr	r0, [sp, #12]
 8006a64:	7840      	ldrb	r0, [r0, #1]
 8006a66:	f7fd f91e 	bl	8003ca6 <disk_read>
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	d156      	bne.n	8006b1c <f_read+0x174>
					ABORT(fs, FR_DISK_ERR);
				}
			}
#endif
			fp->sect = sect;
 8006a6e:	f8c4 a01c 	str.w	sl, [r4, #28]
		}
		rcnt = SS(fs) - ((UINT)fp->fptr % SS(fs));	/* Get partial sector data from sector buffer */
 8006a72:	6961      	ldr	r1, [r4, #20]
 8006a74:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006a78:	f5c1 7700 	rsb	r7, r1, #512	; 0x200
		if (rcnt > btr) rcnt = btr;
 8006a7c:	42bd      	cmp	r5, r7
 8006a7e:	d200      	bcs.n	8006a82 <f_read+0xda>
 8006a80:	462f      	mov	r7, r5
		if (move_window(fs, fp->sect) != FR_OK) {	/* Move sector window */
			ABORT(fs, FR_DISK_ERR);
		}
		mem_cpy(rbuff, &fs->win[fp->fptr % SS(fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fs)], rcnt);	/* Pick partial sector */
 8006a82:	3128      	adds	r1, #40	; 0x28
 8006a84:	463a      	mov	r2, r7
 8006a86:	4421      	add	r1, r4
 8006a88:	4648      	mov	r0, r9
 8006a8a:	f7fe fcaf 	bl	80053ec <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006a8e:	44b9      	add	r9, r7
 8006a90:	6963      	ldr	r3, [r4, #20]
 8006a92:	443b      	add	r3, r7
 8006a94:	6163      	str	r3, [r4, #20]
 8006a96:	f8d8 3000 	ldr.w	r3, [r8]
 8006a9a:	443b      	add	r3, r7
 8006a9c:	f8c8 3000 	str.w	r3, [r8]
 8006aa0:	1bed      	subs	r5, r5, r7
	for ( ;  btr;								/* Repeat until all data read */
 8006aa2:	2d00      	cmp	r5, #0
 8006aa4:	d033      	beq.n	8006b0e <f_read+0x166>
		if ((fp->fptr % SS(fs)) == 0) {			/* On the sector boundary? */
 8006aa6:	6963      	ldr	r3, [r4, #20]
 8006aa8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006aac:	2a00      	cmp	r2, #0
 8006aae:	d1e0      	bne.n	8006a72 <f_read+0xca>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006ab0:	9a03      	ldr	r2, [sp, #12]
 8006ab2:	8957      	ldrh	r7, [r2, #10]
 8006ab4:	3f01      	subs	r7, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8006ab6:	ea17 2753 	ands.w	r7, r7, r3, lsr #9
 8006aba:	d108      	bne.n	8006ace <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d194      	bne.n	80069ea <f_read+0x42>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006ac0:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006ac2:	2801      	cmp	r0, #1
 8006ac4:	d996      	bls.n	80069f4 <f_read+0x4c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006ac6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006aca:	d096      	beq.n	80069fa <f_read+0x52>
				fp->clust = clst;				/* Update current cluster */
 8006acc:	61a0      	str	r0, [r4, #24]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006ace:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006ad2:	69a1      	ldr	r1, [r4, #24]
 8006ad4:	4658      	mov	r0, fp
 8006ad6:	f7fe fcae 	bl	8005436 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006ada:	4682      	mov	sl, r0
 8006adc:	2800      	cmp	r0, #0
 8006ade:	d08f      	beq.n	8006a00 <f_read+0x58>
			sect += csect;
 8006ae0:	44ba      	add	sl, r7
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006ae2:	0a6b      	lsrs	r3, r5, #9
 8006ae4:	9301      	str	r3, [sp, #4]
 8006ae6:	d0a4      	beq.n	8006a32 <f_read+0x8a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006ae8:	18fb      	adds	r3, r7, r3
 8006aea:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d901      	bls.n	8006af6 <f_read+0x14e>
					cc = fs->csize - csect;
 8006af2:	1bd3      	subs	r3, r2, r7
 8006af4:	9301      	str	r3, [sp, #4]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) {
 8006af6:	9b01      	ldr	r3, [sp, #4]
 8006af8:	4652      	mov	r2, sl
 8006afa:	4649      	mov	r1, r9
 8006afc:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8006b00:	f7fd f8d1 	bl	8003ca6 <disk_read>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	f43f af7e 	beq.w	8006a06 <f_read+0x5e>
					ABORT(fs, FR_DISK_ERR);
 8006b0a:	2601      	movs	r6, #1
 8006b0c:	7466      	strb	r6, [r4, #17]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8006b0e:	4630      	mov	r0, r6
 8006b10:	b005      	add	sp, #20
 8006b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						ABORT(fs, FR_DISK_ERR);
 8006b16:	2601      	movs	r6, #1
 8006b18:	7466      	strb	r6, [r4, #17]
 8006b1a:	e7f8      	b.n	8006b0e <f_read+0x166>
					ABORT(fs, FR_DISK_ERR);
 8006b1c:	2601      	movs	r6, #1
 8006b1e:	7466      	strb	r6, [r4, #17]
 8006b20:	e7f5      	b.n	8006b0e <f_read+0x166>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006b22:	2607      	movs	r6, #7
 8006b24:	e7f3      	b.n	8006b0e <f_read+0x166>

08006b26 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006b26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	4688      	mov	r8, r1
 8006b30:	4615      	mov	r5, r2
 8006b32:	4699      	mov	r9, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8006b34:	2300      	movs	r3, #0
 8006b36:	f8c9 3000 	str.w	r3, [r9]
	res = validate(fp, &fs);
 8006b3a:	a903      	add	r1, sp, #12
 8006b3c:	f7fe fdb6 	bl	80056ac <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006b40:	4607      	mov	r7, r0
 8006b42:	2800      	cmp	r0, #0
 8006b44:	f040 80b2 	bne.w	8006cac <f_write+0x186>
 8006b48:	7c67      	ldrb	r7, [r4, #17]
 8006b4a:	2f00      	cmp	r7, #0
 8006b4c:	f040 80ae 	bne.w	8006cac <f_write+0x186>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006b50:	7c23      	ldrb	r3, [r4, #16]
 8006b52:	f013 0f02 	tst.w	r3, #2
 8006b56:	f000 80bf 	beq.w	8006cd8 <f_write+0x1b2>

	/* Check fptr wrap-around (file size cannot exceed the limit on each FAT specs) */
	if ((_FS_EXFAT && fs->fs_type == FS_EXFAT && fp->fptr + btw < fp->fptr)
		|| (DWORD)fp->fptr + btw < (DWORD)fp->fptr) {
 8006b5a:	6963      	ldr	r3, [r4, #20]
	if ((_FS_EXFAT && fs->fs_type == FS_EXFAT && fp->fptr + btw < fp->fptr)
 8006b5c:	42eb      	cmn	r3, r5
 8006b5e:	d364      	bcc.n	8006c2a <f_write+0x104>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006b60:	43dd      	mvns	r5, r3
 8006b62:	e062      	b.n	8006c2a <f_write+0x104>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
			if (csect == 0) {				/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->obj.sclust;	/* Follow from the origin */
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006b64:	2100      	movs	r1, #0
 8006b66:	4620      	mov	r0, r4
 8006b68:	f7ff f8ed 	bl	8005d46 <create_chain>
 8006b6c:	e06f      	b.n	8006c4e <f_write+0x128>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006b6e:	69a1      	ldr	r1, [r4, #24]
 8006b70:	4620      	mov	r0, r4
 8006b72:	f7ff f8e8 	bl	8005d46 <create_chain>
 8006b76:	e06a      	b.n	8006c4e <f_write+0x128>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006b78:	2702      	movs	r7, #2
 8006b7a:	7467      	strb	r7, [r4, #17]
 8006b7c:	e096      	b.n	8006cac <f_write+0x186>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006b7e:	2701      	movs	r7, #1
 8006b80:	7467      	strb	r7, [r4, #17]
 8006b82:	e093      	b.n	8006cac <f_write+0x186>
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK)	{	/* Write-back sector cache */
				ABORT(fs, FR_DISK_ERR);
			}
#else
			if (fp->flag & _FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 8006b84:	2301      	movs	r3, #1
 8006b86:	69e2      	ldr	r2, [r4, #28]
 8006b88:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8006b8c:	9803      	ldr	r0, [sp, #12]
 8006b8e:	7840      	ldrb	r0, [r0, #1]
 8006b90:	f7fd f88e 	bl	8003cb0 <disk_write>
 8006b94:	b920      	cbnz	r0, 8006ba0 <f_write+0x7a>
					ABORT(fs, FR_DISK_ERR);
				}
				fp->flag &= ~_FA_DIRTY;
 8006b96:	7c23      	ldrb	r3, [r4, #16]
 8006b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b9c:	7423      	strb	r3, [r4, #16]
 8006b9e:	e065      	b.n	8006c6c <f_write+0x146>
					ABORT(fs, FR_DISK_ERR);
 8006ba0:	2701      	movs	r7, #1
 8006ba2:	7467      	strb	r7, [r4, #17]
 8006ba4:	e082      	b.n	8006cac <f_write+0x186>
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006ba6:	2702      	movs	r7, #2
 8006ba8:	7467      	strb	r7, [r4, #17]
 8006baa:	e07f      	b.n	8006cac <f_write+0x186>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006bac:	69e1      	ldr	r1, [r4, #28]
 8006bae:	eba1 010a 	sub.w	r1, r1, sl
 8006bb2:	4559      	cmp	r1, fp
 8006bb4:	d302      	bcc.n	8006bbc <f_write+0x96>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= ~_FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006bb6:	ea4f 264b 	mov.w	r6, fp, lsl #9
				continue;
 8006bba:	e027      	b.n	8006c0c <f_write+0xe6>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bc0:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 8006bc4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006bc8:	f7fe fc10 	bl	80053ec <mem_cpy>
					fp->flag &= ~_FA_DIRTY;
 8006bcc:	7c23      	ldrb	r3, [r4, #16]
 8006bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bd2:	7423      	strb	r3, [r4, #16]
 8006bd4:	e7ef      	b.n	8006bb6 <f_write+0x90>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect) {		/* Fill sector cache with file data */
 8006bd6:	69e3      	ldr	r3, [r4, #28]
 8006bd8:	4553      	cmp	r3, sl
 8006bda:	d003      	beq.n	8006be4 <f_write+0xbe>
				if (fp->fptr < fp->obj.objsize &&
 8006bdc:	6962      	ldr	r2, [r4, #20]
 8006bde:	68e3      	ldr	r3, [r4, #12]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d367      	bcc.n	8006cb4 <f_write+0x18e>
					disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
						ABORT(fs, FR_DISK_ERR);
				}
			}
#endif
			fp->sect = sect;
 8006be4:	f8c4 a01c 	str.w	sl, [r4, #28]
		}
		wcnt = SS(fs) - ((UINT)fp->fptr % SS(fs));	/* Put partial sector into file I/O buffer */
 8006be8:	6960      	ldr	r0, [r4, #20]
 8006bea:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8006bee:	f5c0 7600 	rsb	r6, r0, #512	; 0x200
		if (wcnt > btw) wcnt = btw;
 8006bf2:	42b5      	cmp	r5, r6
 8006bf4:	d200      	bcs.n	8006bf8 <f_write+0xd2>
 8006bf6:	462e      	mov	r6, r5
			ABORT(fs, FR_DISK_ERR);
		}
		mem_cpy(&fs->win[fp->fptr % SS(fs)], wbuff, wcnt);	/* Fit partial sector */
		fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fs)], wbuff, wcnt);	/* Fit partial sector */
 8006bf8:	3028      	adds	r0, #40	; 0x28
 8006bfa:	4632      	mov	r2, r6
 8006bfc:	4641      	mov	r1, r8
 8006bfe:	4420      	add	r0, r4
 8006c00:	f7fe fbf4 	bl	80053ec <mem_cpy>
		fp->flag |= _FA_DIRTY;
 8006c04:	7c23      	ldrb	r3, [r4, #16]
 8006c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c0a:	7423      	strb	r3, [r4, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006c0c:	44b0      	add	r8, r6
 8006c0e:	6963      	ldr	r3, [r4, #20]
 8006c10:	4433      	add	r3, r6
 8006c12:	6163      	str	r3, [r4, #20]
 8006c14:	68e2      	ldr	r2, [r4, #12]
 8006c16:	4293      	cmp	r3, r2
 8006c18:	bf38      	it	cc
 8006c1a:	4613      	movcc	r3, r2
 8006c1c:	60e3      	str	r3, [r4, #12]
 8006c1e:	f8d9 3000 	ldr.w	r3, [r9]
 8006c22:	4433      	add	r3, r6
 8006c24:	f8c9 3000 	str.w	r3, [r9]
 8006c28:	1bad      	subs	r5, r5, r6
	for ( ;  btw;							/* Repeat until all data written */
 8006c2a:	2d00      	cmp	r5, #0
 8006c2c:	d04f      	beq.n	8006cce <f_write+0x1a8>
		if ((fp->fptr % SS(fs)) == 0) {		/* On the sector boundary? */
 8006c2e:	6963      	ldr	r3, [r4, #20]
 8006c30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c34:	2a00      	cmp	r2, #0
 8006c36:	d1d7      	bne.n	8006be8 <f_write+0xc2>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006c38:	9a03      	ldr	r2, [sp, #12]
 8006c3a:	8956      	ldrh	r6, [r2, #10]
 8006c3c:	3e01      	subs	r6, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8006c3e:	ea16 2653 	ands.w	r6, r6, r3, lsr #9
 8006c42:	d10f      	bne.n	8006c64 <f_write+0x13e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d192      	bne.n	8006b6e <f_write+0x48>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006c48:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d08a      	beq.n	8006b64 <f_write+0x3e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d03d      	beq.n	8006cce <f_write+0x1a8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006c52:	2801      	cmp	r0, #1
 8006c54:	d090      	beq.n	8006b78 <f_write+0x52>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006c56:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c5a:	d090      	beq.n	8006b7e <f_write+0x58>
				fp->clust = clst;			/* Update current cluster */
 8006c5c:	61a0      	str	r0, [r4, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006c5e:	68a3      	ldr	r3, [r4, #8]
 8006c60:	b903      	cbnz	r3, 8006c64 <f_write+0x13e>
 8006c62:	60a0      	str	r0, [r4, #8]
			if (fp->flag & _FA_DIRTY) {		/* Write-back sector cache */
 8006c64:	7c23      	ldrb	r3, [r4, #16]
 8006c66:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006c6a:	d18b      	bne.n	8006b84 <f_write+0x5e>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006c6c:	9b03      	ldr	r3, [sp, #12]
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	69a1      	ldr	r1, [r4, #24]
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fe fbdf 	bl	8005436 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006c78:	4682      	mov	sl, r0
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	d093      	beq.n	8006ba6 <f_write+0x80>
			sect += csect;
 8006c7e:	44b2      	add	sl, r6
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006c80:	ea5f 2b55 	movs.w	fp, r5, lsr #9
 8006c84:	d0a7      	beq.n	8006bd6 <f_write+0xb0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006c86:	eb06 030b 	add.w	r3, r6, fp
 8006c8a:	9a01      	ldr	r2, [sp, #4]
 8006c8c:	8952      	ldrh	r2, [r2, #10]
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d901      	bls.n	8006c96 <f_write+0x170>
					cc = fs->csize - csect;
 8006c92:	eba2 0b06 	sub.w	fp, r2, r6
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) {
 8006c96:	465b      	mov	r3, fp
 8006c98:	4652      	mov	r2, sl
 8006c9a:	4641      	mov	r1, r8
 8006c9c:	9801      	ldr	r0, [sp, #4]
 8006c9e:	7840      	ldrb	r0, [r0, #1]
 8006ca0:	f7fd f806 	bl	8003cb0 <disk_write>
 8006ca4:	2800      	cmp	r0, #0
 8006ca6:	d081      	beq.n	8006bac <f_write+0x86>
					ABORT(fs, FR_DISK_ERR);
 8006ca8:	2701      	movs	r7, #1
 8006caa:	7467      	strb	r7, [r4, #17]
	}

	fp->flag |= _FA_MODIFIED;						/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8006cac:	4638      	mov	r0, r7
 8006cae:	b005      	add	sp, #20
 8006cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	4652      	mov	r2, sl
 8006cb8:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8006cbc:	9801      	ldr	r0, [sp, #4]
 8006cbe:	7840      	ldrb	r0, [r0, #1]
 8006cc0:	f7fc fff1 	bl	8003ca6 <disk_read>
				if (fp->fptr < fp->obj.objsize &&
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d08d      	beq.n	8006be4 <f_write+0xbe>
						ABORT(fs, FR_DISK_ERR);
 8006cc8:	2701      	movs	r7, #1
 8006cca:	7467      	strb	r7, [r4, #17]
 8006ccc:	e7ee      	b.n	8006cac <f_write+0x186>
	fp->flag |= _FA_MODIFIED;						/* Set file change flag */
 8006cce:	7c23      	ldrb	r3, [r4, #16]
 8006cd0:	f043 0320 	orr.w	r3, r3, #32
 8006cd4:	7423      	strb	r3, [r4, #16]
	LEAVE_FF(fs, FR_OK);
 8006cd6:	e7e9      	b.n	8006cac <f_write+0x186>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006cd8:	2707      	movs	r7, #7
 8006cda:	e7e7      	b.n	8006cac <f_write+0x186>

08006cdc <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8006cdc:	b570      	push	{r4, r5, r6, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	460d      	mov	r5, r1
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8006ce4:	290a      	cmp	r1, #10
 8006ce6:	d00d      	beq.n	8006d04 <putc_bfd+0x28>
		putc_bfd(pb, '\r');
	}

	i = pb->idx;	/* Buffer write index (-1:error) */
 8006ce8:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	db08      	blt.n	8006d00 <putc_bfd+0x24>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006cee:	1c5e      	adds	r6, r3, #1
 8006cf0:	4423      	add	r3, r4
 8006cf2:	731d      	strb	r5, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006cf4:	2e3c      	cmp	r6, #60	; 0x3c
 8006cf6:	dc09      	bgt.n	8006d0c <putc_bfd+0x30>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
 8006cf8:	6066      	str	r6, [r4, #4]
	pb->nchr++;
 8006cfa:	68a3      	ldr	r3, [r4, #8]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	60a3      	str	r3, [r4, #8]
}
 8006d00:	b002      	add	sp, #8
 8006d02:	bd70      	pop	{r4, r5, r6, pc}
		putc_bfd(pb, '\r');
 8006d04:	210d      	movs	r1, #13
 8006d06:	f7ff ffe9 	bl	8006cdc <putc_bfd>
 8006d0a:	e7ed      	b.n	8006ce8 <putc_bfd+0xc>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006d0c:	ab01      	add	r3, sp, #4
 8006d0e:	4632      	mov	r2, r6
 8006d10:	f104 010c 	add.w	r1, r4, #12
 8006d14:	6820      	ldr	r0, [r4, #0]
 8006d16:	f7ff ff06 	bl	8006b26 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006d1a:	9b01      	ldr	r3, [sp, #4]
 8006d1c:	429e      	cmp	r6, r3
 8006d1e:	d002      	beq.n	8006d26 <putc_bfd+0x4a>
 8006d20:	f04f 36ff 	mov.w	r6, #4294967295
 8006d24:	e7e8      	b.n	8006cf8 <putc_bfd+0x1c>
 8006d26:	2600      	movs	r6, #0
 8006d28:	e7e6      	b.n	8006cf8 <putc_bfd+0x1c>
	...

08006d2c <f_sync>:
{
 8006d2c:	b530      	push	{r4, r5, lr}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	4604      	mov	r4, r0
	res = validate(fp, &fs);	/* Check validity of the object */
 8006d32:	a901      	add	r1, sp, #4
 8006d34:	f7fe fcba 	bl	80056ac <validate>
	if (res == FR_OK) {
 8006d38:	4603      	mov	r3, r0
 8006d3a:	b9c8      	cbnz	r0, 8006d70 <f_sync+0x44>
		if (fp->flag & _FA_MODIFIED) {	/* Is there any change to the file? */
 8006d3c:	7c22      	ldrb	r2, [r4, #16]
 8006d3e:	f012 0f20 	tst.w	r2, #32
 8006d42:	d015      	beq.n	8006d70 <f_sync+0x44>
			if (fp->flag & _FA_DIRTY) {	/* Write-back cached data if needed */
 8006d44:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006d48:	d00c      	beq.n	8006d64 <f_sync+0x38>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	69e2      	ldr	r2, [r4, #28]
 8006d4e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8006d52:	9801      	ldr	r0, [sp, #4]
 8006d54:	7840      	ldrb	r0, [r0, #1]
 8006d56:	f7fc ffab 	bl	8003cb0 <disk_write>
 8006d5a:	bb88      	cbnz	r0, 8006dc0 <f_sync+0x94>
				fp->flag &= ~_FA_DIRTY;
 8006d5c:	7c23      	ldrb	r3, [r4, #16]
 8006d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d62:	7423      	strb	r3, [r4, #16]
				res = move_window(fs, fp->dir_sect);
 8006d64:	6a21      	ldr	r1, [r4, #32]
 8006d66:	9801      	ldr	r0, [sp, #4]
 8006d68:	f7fe fce4 	bl	8005734 <move_window>
				if (res == FR_OK) {
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	b110      	cbz	r0, 8006d76 <f_sync+0x4a>
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	b003      	add	sp, #12
 8006d74:	bd30      	pop	{r4, r5, pc}
					dir = fp->dir_ptr;
 8006d76:	6a65      	ldr	r5, [r4, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006d78:	7aeb      	ldrb	r3, [r5, #11]
 8006d7a:	f043 0320 	orr.w	r3, r3, #32
 8006d7e:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006d80:	68a2      	ldr	r2, [r4, #8]
 8006d82:	4629      	mov	r1, r5
 8006d84:	6820      	ldr	r0, [r4, #0]
 8006d86:	f7fe fb75 	bl	8005474 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006d8a:	68e1      	ldr	r1, [r4, #12]
 8006d8c:	f105 001c 	add.w	r0, r5, #28
 8006d90:	f7fe fb22 	bl	80053d8 <st_dword>
					st_dword(dir + DIR_WrtTime, tm);				/* Update modified time */
 8006d94:	490b      	ldr	r1, [pc, #44]	; (8006dc4 <f_sync+0x98>)
 8006d96:	f105 0016 	add.w	r0, r5, #22
 8006d9a:	f7fe fb1d 	bl	80053d8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006d9e:	2100      	movs	r1, #0
 8006da0:	f105 0012 	add.w	r0, r5, #18
 8006da4:	f7fe fb14 	bl	80053d0 <st_word>
					fs->wflag = 1;
 8006da8:	9b01      	ldr	r3, [sp, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006dae:	9801      	ldr	r0, [sp, #4]
 8006db0:	f7ff fccc 	bl	800674c <sync_fs>
 8006db4:	4603      	mov	r3, r0
					fp->flag &= ~_FA_MODIFIED;
 8006db6:	7c22      	ldrb	r2, [r4, #16]
 8006db8:	f022 0220 	bic.w	r2, r2, #32
 8006dbc:	7422      	strb	r2, [r4, #16]
 8006dbe:	e7d7      	b.n	8006d70 <f_sync+0x44>
					LEAVE_FF(fs, FR_DISK_ERR);
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e7d5      	b.n	8006d70 <f_sync+0x44>
 8006dc4:	48610000 	.word	0x48610000

08006dc8 <f_close>:
{
 8006dc8:	b510      	push	{r4, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 8006dce:	f7ff ffad 	bl	8006d2c <f_sync>
	if (res == FR_OK)
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	b110      	cbz	r0, 8006ddc <f_close+0x14>
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	b002      	add	sp, #8
 8006dda:	bd10      	pop	{r4, pc}
		res = validate(fp, &fs);	/* Lock volume */
 8006ddc:	a901      	add	r1, sp, #4
 8006dde:	4620      	mov	r0, r4
 8006de0:	f7fe fc64 	bl	80056ac <validate>
		if (res == FR_OK) {
 8006de4:	4603      	mov	r3, r0
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d1f5      	bne.n	8006dd6 <f_close+0xe>
				fp->obj.fs = 0;			/* Invalidate file object */
 8006dea:	2200      	movs	r2, #0
 8006dec:	6022      	str	r2, [r4, #0]
 8006dee:	e7f2      	b.n	8006dd6 <f_close+0xe>

08006df0 <f_lseek>:
{
 8006df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df4:	b082      	sub	sp, #8
 8006df6:	4604      	mov	r4, r0
 8006df8:	460f      	mov	r7, r1
	res = validate(fp, &fs);		/* Check validity of the object */
 8006dfa:	a901      	add	r1, sp, #4
 8006dfc:	f7fe fc56 	bl	80056ac <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006e00:	4606      	mov	r6, r0
 8006e02:	2800      	cmp	r0, #0
 8006e04:	f040 80a2 	bne.w	8006f4c <f_lseek+0x15c>
 8006e08:	7c66      	ldrb	r6, [r4, #17]
 8006e0a:	2e00      	cmp	r6, #0
 8006e0c:	f040 809e 	bne.w	8006f4c <f_lseek+0x15c>
		if (ofs > fp->obj.objsize				/* In read-only mode, clip offset with the file size */
 8006e10:	68e3      	ldr	r3, [r4, #12]
 8006e12:	42bb      	cmp	r3, r7
 8006e14:	d204      	bcs.n	8006e20 <f_lseek+0x30>
			 && !(fp->flag & FA_WRITE)
 8006e16:	7c22      	ldrb	r2, [r4, #16]
 8006e18:	f012 0f02 	tst.w	r2, #2
 8006e1c:	d100      	bne.n	8006e20 <f_lseek+0x30>
			) ofs = fp->obj.objsize;
 8006e1e:	461f      	mov	r7, r3
		ifptr = fp->fptr;
 8006e20:	6963      	ldr	r3, [r4, #20]
		fp->fptr = nsect = 0;
 8006e22:	2200      	movs	r2, #0
 8006e24:	6162      	str	r2, [r4, #20]
		if (ofs) {
 8006e26:	2f00      	cmp	r7, #0
 8006e28:	d065      	beq.n	8006ef6 <f_lseek+0x106>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006e2a:	9a01      	ldr	r2, [sp, #4]
 8006e2c:	f8b2 800a 	ldrh.w	r8, [r2, #10]
 8006e30:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 8006e34:	b173      	cbz	r3, 8006e54 <f_lseek+0x64>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006e36:	1e7a      	subs	r2, r7, #1
 8006e38:	fbb2 f2f8 	udiv	r2, r2, r8
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	fbb3 f1f8 	udiv	r1, r3, r8
			if (ifptr > 0 &&
 8006e42:	428a      	cmp	r2, r1
 8006e44:	d306      	bcc.n	8006e54 <f_lseek+0x64>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8006e46:	f1c8 0200 	rsb	r2, r8, #0
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	6163      	str	r3, [r4, #20]
				ofs -= fp->fptr;
 8006e4e:	1aff      	subs	r7, r7, r3
				clst = fp->clust;
 8006e50:	69a5      	ldr	r5, [r4, #24]
 8006e52:	e002      	b.n	8006e5a <f_lseek+0x6a>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8006e54:	68a5      	ldr	r5, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006e56:	b115      	cbz	r5, 8006e5e <f_lseek+0x6e>
				fp->clust = clst;
 8006e58:	61a5      	str	r5, [r4, #24]
			if (clst != 0) {
 8006e5a:	bb35      	cbnz	r5, 8006eaa <f_lseek+0xba>
 8006e5c:	e04c      	b.n	8006ef8 <f_lseek+0x108>
					clst = create_chain(&fp->obj, 0);
 8006e5e:	2100      	movs	r1, #0
 8006e60:	4620      	mov	r0, r4
 8006e62:	f7fe ff70 	bl	8005d46 <create_chain>
 8006e66:	4605      	mov	r5, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006e68:	2801      	cmp	r0, #1
 8006e6a:	d004      	beq.n	8006e76 <f_lseek+0x86>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006e6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006e70:	d004      	beq.n	8006e7c <f_lseek+0x8c>
					fp->obj.sclust = clst;
 8006e72:	60a0      	str	r0, [r4, #8]
 8006e74:	e7f0      	b.n	8006e58 <f_lseek+0x68>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006e76:	2602      	movs	r6, #2
 8006e78:	7466      	strb	r6, [r4, #17]
 8006e7a:	e067      	b.n	8006f4c <f_lseek+0x15c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006e7c:	2601      	movs	r6, #1
 8006e7e:	7466      	strb	r6, [r4, #17]
 8006e80:	e064      	b.n	8006f4c <f_lseek+0x15c>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8006e82:	4629      	mov	r1, r5
 8006e84:	4620      	mov	r0, r4
 8006e86:	f7fe fe1f 	bl	8005ac8 <get_fat>
 8006e8a:	4605      	mov	r5, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006e8c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006e90:	d028      	beq.n	8006ee4 <f_lseek+0xf4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8006e92:	2d01      	cmp	r5, #1
 8006e94:	d929      	bls.n	8006eea <f_lseek+0xfa>
 8006e96:	9b01      	ldr	r3, [sp, #4]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	42ab      	cmp	r3, r5
 8006e9c:	d925      	bls.n	8006eea <f_lseek+0xfa>
					fp->clust = clst;
 8006e9e:	61a5      	str	r5, [r4, #24]
					fp->fptr += bcs;
 8006ea0:	6963      	ldr	r3, [r4, #20]
 8006ea2:	4443      	add	r3, r8
 8006ea4:	6163      	str	r3, [r4, #20]
					ofs -= bcs;
 8006ea6:	eba7 0708 	sub.w	r7, r7, r8
				while (ofs > bcs) {						/* Cluster following loop */
 8006eaa:	4547      	cmp	r7, r8
 8006eac:	d90b      	bls.n	8006ec6 <f_lseek+0xd6>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006eae:	7c23      	ldrb	r3, [r4, #16]
 8006eb0:	f013 0f02 	tst.w	r3, #2
 8006eb4:	d0e5      	beq.n	8006e82 <f_lseek+0x92>
						clst = create_chain(&fp->obj, clst);	/* Force stretch if in write mode */
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f7fe ff44 	bl	8005d46 <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 8006ebe:	4605      	mov	r5, r0
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	d1e3      	bne.n	8006e8c <f_lseek+0x9c>
							ofs = bcs; break;
 8006ec4:	4647      	mov	r7, r8
				fp->fptr += ofs;
 8006ec6:	6963      	ldr	r3, [r4, #20]
 8006ec8:	443b      	add	r3, r7
 8006eca:	6163      	str	r3, [r4, #20]
				if (ofs % SS(fs)) {
 8006ecc:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d03f      	beq.n	8006f54 <f_lseek+0x164>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	9801      	ldr	r0, [sp, #4]
 8006ed8:	f7fe faad 	bl	8005436 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8006edc:	b140      	cbz	r0, 8006ef0 <f_lseek+0x100>
					nsect += (DWORD)(ofs / SS(fs));
 8006ede:	eb00 2557 	add.w	r5, r0, r7, lsr #9
 8006ee2:	e009      	b.n	8006ef8 <f_lseek+0x108>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006ee4:	2601      	movs	r6, #1
 8006ee6:	7466      	strb	r6, [r4, #17]
 8006ee8:	e030      	b.n	8006f4c <f_lseek+0x15c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8006eea:	2602      	movs	r6, #2
 8006eec:	7466      	strb	r6, [r4, #17]
 8006eee:	e02d      	b.n	8006f4c <f_lseek+0x15c>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8006ef0:	2602      	movs	r6, #2
 8006ef2:	7466      	strb	r6, [r4, #17]
 8006ef4:	e02a      	b.n	8006f4c <f_lseek+0x15c>
		fp->fptr = nsect = 0;
 8006ef6:	2500      	movs	r5, #0
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8006ef8:	6963      	ldr	r3, [r4, #20]
 8006efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efe:	b1e3      	cbz	r3, 8006f3a <f_lseek+0x14a>
 8006f00:	69e2      	ldr	r2, [r4, #28]
 8006f02:	42aa      	cmp	r2, r5
 8006f04:	d019      	beq.n	8006f3a <f_lseek+0x14a>
			if (fp->flag & _FA_DIRTY) {			/* Write-back dirty sector cache */
 8006f06:	7c23      	ldrb	r3, [r4, #16]
 8006f08:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006f0c:	d00b      	beq.n	8006f26 <f_lseek+0x136>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 8006f0e:	2301      	movs	r3, #1
 8006f10:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8006f14:	9801      	ldr	r0, [sp, #4]
 8006f16:	7840      	ldrb	r0, [r0, #1]
 8006f18:	f7fc feca 	bl	8003cb0 <disk_write>
 8006f1c:	b9e0      	cbnz	r0, 8006f58 <f_lseek+0x168>
				fp->flag &= ~_FA_DIRTY;
 8006f1e:	7c23      	ldrb	r3, [r4, #16]
 8006f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f24:	7423      	strb	r3, [r4, #16]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) {	/* Fill sector cache */
 8006f26:	2301      	movs	r3, #1
 8006f28:	462a      	mov	r2, r5
 8006f2a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8006f2e:	9801      	ldr	r0, [sp, #4]
 8006f30:	7840      	ldrb	r0, [r0, #1]
 8006f32:	f7fc feb8 	bl	8003ca6 <disk_read>
 8006f36:	b990      	cbnz	r0, 8006f5e <f_lseek+0x16e>
			fp->sect = nsect;
 8006f38:	61e5      	str	r5, [r4, #28]
		if (fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8006f3a:	6963      	ldr	r3, [r4, #20]
 8006f3c:	68e2      	ldr	r2, [r4, #12]
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d904      	bls.n	8006f4c <f_lseek+0x15c>
			fp->obj.objsize = fp->fptr;
 8006f42:	60e3      	str	r3, [r4, #12]
			fp->flag |= _FA_MODIFIED;
 8006f44:	7c23      	ldrb	r3, [r4, #16]
 8006f46:	f043 0320 	orr.w	r3, r3, #32
 8006f4a:	7423      	strb	r3, [r4, #16]
}
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	b002      	add	sp, #8
 8006f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		fp->fptr = nsect = 0;
 8006f54:	2500      	movs	r5, #0
 8006f56:	e7cf      	b.n	8006ef8 <f_lseek+0x108>
					ABORT(fs, FR_DISK_ERR);
 8006f58:	2601      	movs	r6, #1
 8006f5a:	7466      	strb	r6, [r4, #17]
 8006f5c:	e7f6      	b.n	8006f4c <f_lseek+0x15c>
				ABORT(fs, FR_DISK_ERR);
 8006f5e:	2601      	movs	r6, #1
 8006f60:	7466      	strb	r6, [r4, #17]
 8006f62:	e7f3      	b.n	8006f4c <f_lseek+0x15c>

08006f64 <f_stat>:
{
 8006f64:	b530      	push	{r4, r5, lr}
 8006f66:	b091      	sub	sp, #68	; 0x44
 8006f68:	9001      	str	r0, [sp, #4]
 8006f6a:	460d      	mov	r5, r1
	res = find_volume(&path, &dj.obj.fs, 0);
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	a905      	add	r1, sp, #20
 8006f70:	a801      	add	r0, sp, #4
 8006f72:	f7fe fc29 	bl	80057c8 <find_volume>
	if (res == FR_OK) {
 8006f76:	4604      	mov	r4, r0
 8006f78:	b110      	cbz	r0, 8006f80 <f_stat+0x1c>
}
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	b011      	add	sp, #68	; 0x44
 8006f7e:	bd30      	pop	{r4, r5, pc}
		INIT_NAMBUF(dj);
 8006f80:	ab02      	add	r3, sp, #8
 8006f82:	930d      	str	r3, [sp, #52]	; 0x34
 8006f84:	4b0b      	ldr	r3, [pc, #44]	; (8006fb4 <f_stat+0x50>)
 8006f86:	930f      	str	r3, [sp, #60]	; 0x3c
		res = follow_path(&dj, path);	/* Follow the file path */
 8006f88:	9901      	ldr	r1, [sp, #4]
 8006f8a:	a805      	add	r0, sp, #20
 8006f8c:	f7ff faf7 	bl	800657e <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 8006f90:	4604      	mov	r4, r0
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d1f1      	bne.n	8006f7a <f_stat+0x16>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8006f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f98:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	db06      	blt.n	8006fae <f_stat+0x4a>
				if (fno) get_fileinfo(&dj, fno);
 8006fa0:	2d00      	cmp	r5, #0
 8006fa2:	d0ea      	beq.n	8006f7a <f_stat+0x16>
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	a805      	add	r0, sp, #20
 8006fa8:	f7ff f9b6 	bl	8006318 <get_fileinfo>
 8006fac:	e7e5      	b.n	8006f7a <f_stat+0x16>
				res = FR_INVALID_NAME;
 8006fae:	2406      	movs	r4, #6
 8006fb0:	e7e3      	b.n	8006f7a <f_stat+0x16>
 8006fb2:	bf00      	nop
 8006fb4:	20000ff4 	.word	0x20000ff4

08006fb8 <f_unlink>:
{
 8006fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fba:	b09d      	sub	sp, #116	; 0x74
 8006fbc:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	a905      	add	r1, sp, #20
 8006fc2:	a801      	add	r0, sp, #4
 8006fc4:	f7fe fc00 	bl	80057c8 <find_volume>
	dj.obj.fs = fs;
 8006fc8:	9b05      	ldr	r3, [sp, #20]
 8006fca:	9311      	str	r3, [sp, #68]	; 0x44
	if (res == FR_OK) {
 8006fcc:	4604      	mov	r4, r0
 8006fce:	b110      	cbz	r0, 8006fd6 <f_unlink+0x1e>
}
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	b01d      	add	sp, #116	; 0x74
 8006fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		INIT_NAMBUF(dj);
 8006fd6:	ab02      	add	r3, sp, #8
 8006fd8:	9319      	str	r3, [sp, #100]	; 0x64
 8006fda:	4b25      	ldr	r3, [pc, #148]	; (8007070 <f_unlink+0xb8>)
 8006fdc:	931b      	str	r3, [sp, #108]	; 0x6c
		res = follow_path(&dj, path);		/* Follow the file path */
 8006fde:	9901      	ldr	r1, [sp, #4]
 8006fe0:	a811      	add	r0, sp, #68	; 0x44
 8006fe2:	f7ff facc 	bl	800657e <follow_path>
		if (res == FR_OK) {					/* The object is accessible */
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	d1f1      	bne.n	8006fd0 <f_unlink+0x18>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8006fec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fee:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	db1e      	blt.n	8007034 <f_unlink+0x7c>
				if (dj.obj.attr & AM_RDO) {
 8006ff6:	f89d 504a 	ldrb.w	r5, [sp, #74]	; 0x4a
 8006ffa:	f015 0f01 	tst.w	r5, #1
 8006ffe:	d12a      	bne.n	8007056 <f_unlink+0x9e>
					dclst = ld_clust(fs, dj.dir);
 8007000:	9f05      	ldr	r7, [sp, #20]
 8007002:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007004:	4638      	mov	r0, r7
 8007006:	f7fe fa22 	bl	800544e <ld_clust>
 800700a:	4606      	mov	r6, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory ? */
 800700c:	f015 0f10 	tst.w	r5, #16
 8007010:	d012      	beq.n	8007038 <f_unlink+0x80>
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8007012:	9706      	str	r7, [sp, #24]
						sdj.obj.sclust = dclst;
 8007014:	9008      	str	r0, [sp, #32]
						res = dir_sdi(&sdj, 0);
 8007016:	2100      	movs	r1, #0
 8007018:	a806      	add	r0, sp, #24
 800701a:	f7fe fdbc 	bl	8005b96 <dir_sdi>
						if (res == FR_OK) {
 800701e:	4604      	mov	r4, r0
 8007020:	b950      	cbnz	r0, 8007038 <f_unlink+0x80>
							res = dir_read(&sdj, 0);			/* Read an item */
 8007022:	2100      	movs	r1, #0
 8007024:	a806      	add	r0, sp, #24
 8007026:	f7fe ffdc 	bl	8005fe2 <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800702a:	4604      	mov	r4, r0
 800702c:	b1b0      	cbz	r0, 800705c <f_unlink+0xa4>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800702e:	2804      	cmp	r0, #4
 8007030:	d102      	bne.n	8007038 <f_unlink+0x80>
 8007032:	e003      	b.n	800703c <f_unlink+0x84>
	DWORD dclst = 0;
 8007034:	2600      	movs	r6, #0
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8007036:	2406      	movs	r4, #6
			if (res == FR_OK) {
 8007038:	2c00      	cmp	r4, #0
 800703a:	d1c9      	bne.n	8006fd0 <f_unlink+0x18>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800703c:	a811      	add	r0, sp, #68	; 0x44
 800703e:	f7ff f82e 	bl	800609e <dir_remove>
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8007042:	4604      	mov	r4, r0
 8007044:	b900      	cbnz	r0, 8007048 <f_unlink+0x90>
 8007046:	b95e      	cbnz	r6, 8007060 <f_unlink+0xa8>
				if (res == FR_OK) res = sync_fs(fs);
 8007048:	2c00      	cmp	r4, #0
 800704a:	d1c1      	bne.n	8006fd0 <f_unlink+0x18>
 800704c:	9805      	ldr	r0, [sp, #20]
 800704e:	f7ff fb7d 	bl	800674c <sync_fs>
 8007052:	4604      	mov	r4, r0
 8007054:	e7bc      	b.n	8006fd0 <f_unlink+0x18>
	DWORD dclst = 0;
 8007056:	2600      	movs	r6, #0
					res = FR_DENIED;		/* Cannot remove R/O object */
 8007058:	2407      	movs	r4, #7
 800705a:	e7ed      	b.n	8007038 <f_unlink+0x80>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800705c:	2407      	movs	r4, #7
 800705e:	e7eb      	b.n	8007038 <f_unlink+0x80>
					res = remove_chain(&dj.obj, dclst, 0);
 8007060:	2200      	movs	r2, #0
 8007062:	4631      	mov	r1, r6
 8007064:	a811      	add	r0, sp, #68	; 0x44
 8007066:	f7fe fed0 	bl	8005e0a <remove_chain>
 800706a:	4604      	mov	r4, r0
 800706c:	e7ec      	b.n	8007048 <f_unlink+0x90>
 800706e:	bf00      	nop
 8007070:	20000ff4 	.word	0x20000ff4

08007074 <f_gets>:
{
 8007074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007078:	b082      	sub	sp, #8
 800707a:	4680      	mov	r8, r0
 800707c:	460e      	mov	r6, r1
 800707e:	4617      	mov	r7, r2
	TCHAR c, *p = buff;
 8007080:	4604      	mov	r4, r0
	int n = 0;
 8007082:	2500      	movs	r5, #0
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007084:	e001      	b.n	800708a <f_gets+0x16>
 8007086:	4622      	mov	r2, r4
 8007088:	4614      	mov	r4, r2
 800708a:	1e73      	subs	r3, r6, #1
 800708c:	42ab      	cmp	r3, r5
 800708e:	dd12      	ble.n	80070b6 <f_gets+0x42>
		f_read(fp, s, 1, &rc);
 8007090:	466b      	mov	r3, sp
 8007092:	2201      	movs	r2, #1
 8007094:	a901      	add	r1, sp, #4
 8007096:	4638      	mov	r0, r7
 8007098:	f7ff fc86 	bl	80069a8 <f_read>
		if (rc != 1) break;
 800709c:	9b00      	ldr	r3, [sp, #0]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d109      	bne.n	80070b6 <f_gets+0x42>
		c = s[0];
 80070a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80070a6:	2b0d      	cmp	r3, #13
 80070a8:	d0ed      	beq.n	8007086 <f_gets+0x12>
		*p++ = c;
 80070aa:	1c62      	adds	r2, r4, #1
 80070ac:	7023      	strb	r3, [r4, #0]
		n++;
 80070ae:	3501      	adds	r5, #1
		if (c == '\n') break;		/* Break on EOL */
 80070b0:	2b0a      	cmp	r3, #10
 80070b2:	d1e9      	bne.n	8007088 <f_gets+0x14>
		*p++ = c;
 80070b4:	4614      	mov	r4, r2
	*p = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	7023      	strb	r3, [r4, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80070ba:	b11d      	cbz	r5, 80070c4 <f_gets+0x50>
 80070bc:	4640      	mov	r0, r8
}
 80070be:	b002      	add	sp, #8
 80070c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80070c4:	2000      	movs	r0, #0
 80070c6:	e7fa      	b.n	80070be <f_gets+0x4a>

080070c8 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80070c8:	b510      	push	{r4, lr}
 80070ca:	b094      	sub	sp, #80	; 0x50
 80070cc:	4604      	mov	r4, r0
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 80070ce:	9101      	str	r1, [sp, #4]
	pb.nchr = pb.idx = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	9302      	str	r3, [sp, #8]
 80070d4:	9303      	str	r3, [sp, #12]

	while (*str)			/* Put the string */
 80070d6:	e003      	b.n	80070e0 <f_puts+0x18>
		putc_bfd(&pb, *str++);
 80070d8:	3401      	adds	r4, #1
 80070da:	a801      	add	r0, sp, #4
 80070dc:	f7ff fdfe 	bl	8006cdc <putc_bfd>
	while (*str)			/* Put the string */
 80070e0:	7821      	ldrb	r1, [r4, #0]
 80070e2:	2900      	cmp	r1, #0
 80070e4:	d1f8      	bne.n	80070d8 <f_puts+0x10>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80070e6:	9a02      	ldr	r2, [sp, #8]
 80070e8:	2a00      	cmp	r2, #0
 80070ea:	db0c      	blt.n	8007106 <f_puts+0x3e>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80070ec:	466b      	mov	r3, sp
 80070ee:	a904      	add	r1, sp, #16
 80070f0:	9801      	ldr	r0, [sp, #4]
 80070f2:	f7ff fd18 	bl	8006b26 <f_write>
 80070f6:	b948      	cbnz	r0, 800710c <f_puts+0x44>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80070f8:	9a02      	ldr	r2, [sp, #8]
 80070fa:	9b00      	ldr	r3, [sp, #0]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d108      	bne.n	8007112 <f_puts+0x4a>
 8007100:	9803      	ldr	r0, [sp, #12]
	return EOF;
}
 8007102:	b014      	add	sp, #80	; 0x50
 8007104:	bd10      	pop	{r4, pc}
	return EOF;
 8007106:	f04f 30ff 	mov.w	r0, #4294967295
 800710a:	e7fa      	b.n	8007102 <f_puts+0x3a>
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	e7f7      	b.n	8007102 <f_puts+0x3a>
 8007112:	f04f 30ff 	mov.w	r0, #4294967295
 8007116:	e7f4      	b.n	8007102 <f_puts+0x3a>

08007118 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007118:	287f      	cmp	r0, #127	; 0x7f
 800711a:	d916      	bls.n	800714a <ff_convert+0x32>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800711c:	b131      	cbz	r1, 800712c <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800711e:	28ff      	cmp	r0, #255	; 0xff
 8007120:	d812      	bhi.n	8007148 <ff_convert+0x30>
 8007122:	3880      	subs	r0, #128	; 0x80
 8007124:	4b09      	ldr	r3, [pc, #36]	; (800714c <ff_convert+0x34>)
 8007126:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800712a:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800712c:	2300      	movs	r3, #0
 800712e:	2b7f      	cmp	r3, #127	; 0x7f
 8007130:	d807      	bhi.n	8007142 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 8007132:	4a06      	ldr	r2, [pc, #24]	; (800714c <ff_convert+0x34>)
 8007134:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8007138:	4282      	cmp	r2, r0
 800713a:	d002      	beq.n	8007142 <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 800713c:	3301      	adds	r3, #1
 800713e:	b29b      	uxth	r3, r3
 8007140:	e7f5      	b.n	800712e <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 8007142:	3380      	adds	r3, #128	; 0x80
 8007144:	b2d8      	uxtb	r0, r3
 8007146:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007148:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800714a:	4770      	bx	lr
 800714c:	08015970 	.word	0x08015970

08007150 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007150:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8007154:	d207      	bcs.n	8007166 <ff_wtoupper+0x16>
 8007156:	4b23      	ldr	r3, [pc, #140]	; (80071e4 <ff_wtoupper+0x94>)
	for (;;) {
		bc = *p++;								/* Get block base */
 8007158:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 800715a:	2a00      	cmp	r2, #0
 800715c:	d040      	beq.n	80071e0 <ff_wtoupper+0x90>
 800715e:	4290      	cmp	r0, r2
 8007160:	d33e      	bcc.n	80071e0 <ff_wtoupper+0x90>
{
 8007162:	b4f0      	push	{r4, r5, r6, r7}
 8007164:	e006      	b.n	8007174 <ff_wtoupper+0x24>
	p = chr < 0x1000 ? cvt1 : cvt2;
 8007166:	4b20      	ldr	r3, [pc, #128]	; (80071e8 <ff_wtoupper+0x98>)
 8007168:	e7f6      	b.n	8007158 <ff_wtoupper+0x8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800716a:	462b      	mov	r3, r5
		bc = *p++;								/* Get block base */
 800716c:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 800716e:	b1ca      	cbz	r2, 80071a4 <ff_wtoupper+0x54>
 8007170:	4290      	cmp	r0, r2
 8007172:	d317      	bcc.n	80071a4 <ff_wtoupper+0x54>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007174:	1d1d      	adds	r5, r3, #4
 8007176:	885b      	ldrh	r3, [r3, #2]
 8007178:	0a19      	lsrs	r1, r3, #8
 800717a:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 800717c:	189c      	adds	r4, r3, r2
 800717e:	42a0      	cmp	r0, r4
 8007180:	db04      	blt.n	800718c <ff_wtoupper+0x3c>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8007182:	2900      	cmp	r1, #0
 8007184:	d1f1      	bne.n	800716a <ff_wtoupper+0x1a>
 8007186:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800718a:	e7ef      	b.n	800716c <ff_wtoupper+0x1c>
			switch (cmd) {
 800718c:	2908      	cmp	r1, #8
 800718e:	d809      	bhi.n	80071a4 <ff_wtoupper+0x54>
 8007190:	e8df f001 	tbb	[pc, r1]
 8007194:	13100a05 	.word	0x13100a05
 8007198:	1f1c1916 	.word	0x1f1c1916
 800719c:	22          	.byte	0x22
 800719d:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800719e:	1a86      	subs	r6, r0, r2
 80071a0:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
	}

	return chr;
}
 80071a4:	bcf0      	pop	{r4, r5, r6, r7}
 80071a6:	4770      	bx	lr
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80071a8:	1a82      	subs	r2, r0, r2
 80071aa:	f002 0301 	and.w	r3, r2, #1
 80071ae:	1ac0      	subs	r0, r0, r3
 80071b0:	b280      	uxth	r0, r0
 80071b2:	e7f7      	b.n	80071a4 <ff_wtoupper+0x54>
			case 2: chr -= 16; break;				/* Shift -16 */
 80071b4:	3810      	subs	r0, #16
 80071b6:	b280      	uxth	r0, r0
 80071b8:	e7f4      	b.n	80071a4 <ff_wtoupper+0x54>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80071ba:	3820      	subs	r0, #32
 80071bc:	b280      	uxth	r0, r0
 80071be:	e7f1      	b.n	80071a4 <ff_wtoupper+0x54>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80071c0:	3830      	subs	r0, #48	; 0x30
 80071c2:	b280      	uxth	r0, r0
 80071c4:	e7ee      	b.n	80071a4 <ff_wtoupper+0x54>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80071c6:	381a      	subs	r0, #26
 80071c8:	b280      	uxth	r0, r0
 80071ca:	e7eb      	b.n	80071a4 <ff_wtoupper+0x54>
			case 6:	chr += 8; break;				/* Shift +8 */
 80071cc:	3008      	adds	r0, #8
 80071ce:	b280      	uxth	r0, r0
 80071d0:	e7e8      	b.n	80071a4 <ff_wtoupper+0x54>
			case 7: chr -= 80; break;				/* Shift -80 */
 80071d2:	3850      	subs	r0, #80	; 0x50
 80071d4:	b280      	uxth	r0, r0
 80071d6:	e7e5      	b.n	80071a4 <ff_wtoupper+0x54>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80071d8:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 80071dc:	b280      	uxth	r0, r0
 80071de:	e7e1      	b.n	80071a4 <ff_wtoupper+0x54>
}
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	08015a70 	.word	0x08015a70
 80071e8:	08015c64 	.word	0x08015c64

080071ec <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 80071ec:	0a03      	lsrs	r3, r0, #8
 80071ee:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 80071f2:	b280      	uxth	r0, r0
 80071f4:	4770      	bx	lr

080071f6 <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
 80071f6:	0203      	lsls	r3, r0, #8
 80071f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071fc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007200:	0a02      	lsrs	r2, r0, #8
 8007202:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8007206:	4313      	orrs	r3, r2
}
 8007208:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 800720c:	4770      	bx	lr
	...

08007210 <dns_backupserver_available>:
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
  u8_t ret = 0;

  if (pentry) {
 8007210:	2800      	cmp	r0, #0
 8007212:	d039      	beq.n	8007288 <dns_backupserver_available+0x78>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8007214:	7ec3      	ldrb	r3, [r0, #27]
 8007216:	3301      	adds	r3, #1
 8007218:	2b01      	cmp	r3, #1
 800721a:	dd01      	ble.n	8007220 <dns_backupserver_available+0x10>
  u8_t ret = 0;
 800721c:	2000      	movs	r0, #0
 800721e:	4770      	bx	lr
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8007220:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007224:	0091      	lsls	r1, r2, #2
 8007226:	4a19      	ldr	r2, [pc, #100]	; (800728c <dns_backupserver_available+0x7c>)
 8007228:	440a      	add	r2, r1
 800722a:	7c12      	ldrb	r2, [r2, #16]
 800722c:	2a06      	cmp	r2, #6
 800722e:	d00a      	beq.n	8007246 <dns_backupserver_available+0x36>
 8007230:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007234:	009a      	lsls	r2, r3, #2
 8007236:	4b15      	ldr	r3, [pc, #84]	; (800728c <dns_backupserver_available+0x7c>)
 8007238:	589b      	ldr	r3, [r3, r2]
 800723a:	3300      	adds	r3, #0
 800723c:	bf18      	it	ne
 800723e:	2301      	movne	r3, #1
 8007240:	b303      	cbz	r3, 8007284 <dns_backupserver_available+0x74>
      ret = 1;
 8007242:	2001      	movs	r0, #1
    }
  }

  return ret;
}
 8007244:	4770      	bx	lr
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8007246:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800724a:	008a      	lsls	r2, r1, #2
 800724c:	490f      	ldr	r1, [pc, #60]	; (800728c <dns_backupserver_available+0x7c>)
 800724e:	588a      	ldr	r2, [r1, r2]
 8007250:	b982      	cbnz	r2, 8007274 <dns_backupserver_available+0x64>
 8007252:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007256:	0091      	lsls	r1, r2, #2
 8007258:	4a0c      	ldr	r2, [pc, #48]	; (800728c <dns_backupserver_available+0x7c>)
 800725a:	440a      	add	r2, r1
 800725c:	6852      	ldr	r2, [r2, #4]
 800725e:	b95a      	cbnz	r2, 8007278 <dns_backupserver_available+0x68>
 8007260:	4a0a      	ldr	r2, [pc, #40]	; (800728c <dns_backupserver_available+0x7c>)
 8007262:	440a      	add	r2, r1
 8007264:	6892      	ldr	r2, [r2, #8]
 8007266:	b94a      	cbnz	r2, 800727c <dns_backupserver_available+0x6c>
 8007268:	4b08      	ldr	r3, [pc, #32]	; (800728c <dns_backupserver_available+0x7c>)
 800726a:	440b      	add	r3, r1
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	b13b      	cbz	r3, 8007280 <dns_backupserver_available+0x70>
 8007270:	2301      	movs	r3, #1
 8007272:	e7e5      	b.n	8007240 <dns_backupserver_available+0x30>
 8007274:	2301      	movs	r3, #1
 8007276:	e7e3      	b.n	8007240 <dns_backupserver_available+0x30>
 8007278:	2301      	movs	r3, #1
 800727a:	e7e1      	b.n	8007240 <dns_backupserver_available+0x30>
 800727c:	2301      	movs	r3, #1
 800727e:	e7df      	b.n	8007240 <dns_backupserver_available+0x30>
 8007280:	2300      	movs	r3, #0
 8007282:	e7dd      	b.n	8007240 <dns_backupserver_available+0x30>
  u8_t ret = 0;
 8007284:	2000      	movs	r0, #0
 8007286:	4770      	bx	lr
 8007288:	2000      	movs	r0, #0
 800728a:	4770      	bx	lr
 800728c:	20001234 	.word	0x20001234

08007290 <dns_create_txid>:
{
 8007290:	b508      	push	{r3, lr}
  txid = (u16_t)DNS_RAND_TXID();
 8007292:	f00d fa2b 	bl	80146ec <rand>
 8007296:	b280      	uxth	r0, r0
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8007298:	2300      	movs	r3, #0
 800729a:	e001      	b.n	80072a0 <dns_create_txid+0x10>
 800729c:	3301      	adds	r3, #1
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	d80f      	bhi.n	80072c4 <dns_create_txid+0x34>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80072a4:	4908      	ldr	r1, [pc, #32]	; (80072c8 <dns_create_txid+0x38>)
 80072a6:	f44f 7292 	mov.w	r2, #292	; 0x124
 80072aa:	fb02 1203 	mla	r2, r2, r3, r1
 80072ae:	7e92      	ldrb	r2, [r2, #26]
 80072b0:	2a02      	cmp	r2, #2
 80072b2:	d1f3      	bne.n	800729c <dns_create_txid+0xc>
        (dns_table[i].txid == txid)) {
 80072b4:	f44f 7292 	mov.w	r2, #292	; 0x124
 80072b8:	fb02 1203 	mla	r2, r2, r3, r1
 80072bc:	8b12      	ldrh	r2, [r2, #24]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80072be:	4282      	cmp	r2, r0
 80072c0:	d1ec      	bne.n	800729c <dns_create_txid+0xc>
again:
 80072c2:	e7e6      	b.n	8007292 <dns_create_txid+0x2>
}
 80072c4:	bd08      	pop	{r3, pc}
 80072c6:	bf00      	nop
 80072c8:	2000125c 	.word	0x2000125c

080072cc <dns_call_found>:
{
 80072cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d0:	4605      	mov	r5, r0
  if (addr != NULL) {
 80072d2:	4688      	mov	r8, r1
 80072d4:	b1a9      	cbz	r1, 8007302 <dns_call_found+0x36>
    if (IP_IS_V6_VAL(*addr)) {
 80072d6:	7c0b      	ldrb	r3, [r1, #16]
 80072d8:	2b06      	cmp	r3, #6
 80072da:	d014      	beq.n	8007306 <dns_call_found+0x3a>
      LWIP_ASSERT("invalid response", !LWIP_DNS_ADDRTYPE_IS_IPV6(dns_table[idx].reqaddrtype));
 80072dc:	4a4e      	ldr	r2, [pc, #312]	; (8007418 <dns_call_found+0x14c>)
 80072de:	f44f 7392 	mov.w	r3, #292	; 0x124
 80072e2:	fb03 2300 	mla	r3, r3, r0, r2
 80072e6:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d027      	beq.n	800733e <dns_call_found+0x72>
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d025      	beq.n	800733e <dns_call_found+0x72>
      dns_table[idx].reqaddrtype = LWIP_DNS_ADDRTYPE_IPV4;
 80072f2:	4a49      	ldr	r2, [pc, #292]	; (8007418 <dns_call_found+0x14c>)
 80072f4:	f44f 7392 	mov.w	r3, #292	; 0x124
 80072f8:	fb03 2305 	mla	r3, r3, r5, r2
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
{
 8007302:	2400      	movs	r4, #0
 8007304:	e025      	b.n	8007352 <dns_call_found+0x86>
      LWIP_ASSERT("invalid response", LWIP_DNS_ADDRTYPE_IS_IPV6(dns_table[idx].reqaddrtype));
 8007306:	4a44      	ldr	r2, [pc, #272]	; (8007418 <dns_call_found+0x14c>)
 8007308:	f44f 7392 	mov.w	r3, #292	; 0x124
 800730c:	fb03 2300 	mla	r3, r3, r0, r2
 8007310:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8007314:	2b03      	cmp	r3, #3
 8007316:	d001      	beq.n	800731c <dns_call_found+0x50>
 8007318:	2b01      	cmp	r3, #1
 800731a:	d108      	bne.n	800732e <dns_call_found+0x62>
      dns_table[idx].reqaddrtype = LWIP_DNS_ADDRTYPE_IPV6;
 800731c:	4a3e      	ldr	r2, [pc, #248]	; (8007418 <dns_call_found+0x14c>)
 800731e:	f44f 7392 	mov.w	r3, #292	; 0x124
 8007322:	fb03 2305 	mla	r3, r3, r5, r2
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
 800732c:	e7e9      	b.n	8007302 <dns_call_found+0x36>
      LWIP_ASSERT("invalid response", LWIP_DNS_ADDRTYPE_IS_IPV6(dns_table[idx].reqaddrtype));
 800732e:	4b3b      	ldr	r3, [pc, #236]	; (800741c <dns_call_found+0x150>)
 8007330:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8007334:	493a      	ldr	r1, [pc, #232]	; (8007420 <dns_call_found+0x154>)
 8007336:	483b      	ldr	r0, [pc, #236]	; (8007424 <dns_call_found+0x158>)
 8007338:	f00d f95c 	bl	80145f4 <iprintf>
 800733c:	e7ee      	b.n	800731c <dns_call_found+0x50>
      LWIP_ASSERT("invalid response", !LWIP_DNS_ADDRTYPE_IS_IPV6(dns_table[idx].reqaddrtype));
 800733e:	4b37      	ldr	r3, [pc, #220]	; (800741c <dns_call_found+0x150>)
 8007340:	f240 32bb 	movw	r2, #955	; 0x3bb
 8007344:	4936      	ldr	r1, [pc, #216]	; (8007420 <dns_call_found+0x154>)
 8007346:	4837      	ldr	r0, [pc, #220]	; (8007424 <dns_call_found+0x158>)
 8007348:	f00d f954 	bl	80145f4 <iprintf>
 800734c:	e7d1      	b.n	80072f2 <dns_call_found+0x26>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800734e:	3401      	adds	r4, #1
 8007350:	b2e4      	uxtb	r4, r4
 8007352:	2c03      	cmp	r4, #3
 8007354:	d824      	bhi.n	80073a0 <dns_call_found+0xd4>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8007356:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800735a:	0093      	lsls	r3, r2, #2
 800735c:	4a32      	ldr	r2, [pc, #200]	; (8007428 <dns_call_found+0x15c>)
 800735e:	f852 a003 	ldr.w	sl, [r2, r3]
 8007362:	f1ba 0f00 	cmp.w	sl, #0
 8007366:	d0f2      	beq.n	800734e <dns_call_found+0x82>
 8007368:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800736c:	009a      	lsls	r2, r3, #2
 800736e:	4b2e      	ldr	r3, [pc, #184]	; (8007428 <dns_call_found+0x15c>)
 8007370:	4413      	add	r3, r2
 8007372:	7a1b      	ldrb	r3, [r3, #8]
 8007374:	42ab      	cmp	r3, r5
 8007376:	d1ea      	bne.n	800734e <dns_call_found+0x82>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8007378:	f44f 7392 	mov.w	r3, #292	; 0x124
 800737c:	fb03 f305 	mul.w	r3, r3, r5
 8007380:	3320      	adds	r3, #32
 8007382:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8007428 <dns_call_found+0x15c>
 8007386:	0066      	lsls	r6, r4, #1
 8007388:	444a      	add	r2, r9
 800738a:	6852      	ldr	r2, [r2, #4]
 800738c:	4641      	mov	r1, r8
 800738e:	4822      	ldr	r0, [pc, #136]	; (8007418 <dns_call_found+0x14c>)
 8007390:	4418      	add	r0, r3
 8007392:	47d0      	blx	sl
      dns_requests[i].found = NULL;
 8007394:	4426      	add	r6, r4
 8007396:	00b3      	lsls	r3, r6, #2
 8007398:	2200      	movs	r2, #0
 800739a:	f849 2003 	str.w	r2, [r9, r3]
 800739e:	e7d6      	b.n	800734e <dns_call_found+0x82>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80073a0:	2300      	movs	r3, #0
 80073a2:	e001      	b.n	80073a8 <dns_call_found+0xdc>
 80073a4:	3301      	adds	r3, #1
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d819      	bhi.n	80073e0 <dns_call_found+0x114>
    if (i == idx) {
 80073ac:	42ab      	cmp	r3, r5
 80073ae:	d0f9      	beq.n	80073a4 <dns_call_found+0xd8>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 80073b0:	4919      	ldr	r1, [pc, #100]	; (8007418 <dns_call_found+0x14c>)
 80073b2:	f44f 7292 	mov.w	r2, #292	; 0x124
 80073b6:	fb02 1203 	mla	r2, r2, r3, r1
 80073ba:	7e92      	ldrb	r2, [r2, #26]
 80073bc:	2a02      	cmp	r2, #2
 80073be:	d1f1      	bne.n	80073a4 <dns_call_found+0xd8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 80073c0:	f44f 7292 	mov.w	r2, #292	; 0x124
 80073c4:	fb02 1003 	mla	r0, r2, r3, r1
 80073c8:	7fc0      	ldrb	r0, [r0, #31]
 80073ca:	fb02 1205 	mla	r2, r2, r5, r1
 80073ce:	7fd2      	ldrb	r2, [r2, #31]
 80073d0:	4290      	cmp	r0, r2
 80073d2:	d1e7      	bne.n	80073a4 <dns_call_found+0xd8>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80073d4:	f44f 7292 	mov.w	r2, #292	; 0x124
 80073d8:	fb02 1405 	mla	r4, r2, r5, r1
 80073dc:	2304      	movs	r3, #4
 80073de:	77e3      	strb	r3, [r4, #31]
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 80073e0:	4a0d      	ldr	r2, [pc, #52]	; (8007418 <dns_call_found+0x14c>)
 80073e2:	f44f 7392 	mov.w	r3, #292	; 0x124
 80073e6:	fb03 2305 	mla	r3, r3, r5, r2
 80073ea:	7fdb      	ldrb	r3, [r3, #31]
 80073ec:	2b03      	cmp	r3, #3
 80073ee:	d901      	bls.n	80073f4 <dns_call_found+0x128>
}
 80073f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 80073f4:	4c0d      	ldr	r4, [pc, #52]	; (800742c <dns_call_found+0x160>)
 80073f6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80073fa:	f006 fb1f 	bl	800da3c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80073fe:	4b06      	ldr	r3, [pc, #24]	; (8007418 <dns_call_found+0x14c>)
 8007400:	f44f 7292 	mov.w	r2, #292	; 0x124
 8007404:	fb02 3505 	mla	r5, r2, r5, r3
 8007408:	7feb      	ldrb	r3, [r5, #31]
 800740a:	2200      	movs	r2, #0
 800740c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8007410:	2304      	movs	r3, #4
 8007412:	77eb      	strb	r3, [r5, #31]
}
 8007414:	e7ec      	b.n	80073f0 <dns_call_found+0x124>
 8007416:	bf00      	nop
 8007418:	2000125c 	.word	0x2000125c
 800741c:	08015d20 	.word	0x08015d20
 8007420:	08015d50 	.word	0x08015d50
 8007424:	08015608 	.word	0x08015608
 8007428:	20001204 	.word	0x20001204
 800742c:	200011f4 	.word	0x200011f4

08007430 <dns_send>:
{
 8007430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007434:	b084      	sub	sp, #16
 8007436:	4606      	mov	r6, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8007438:	4a7c      	ldr	r2, [pc, #496]	; (800762c <dns_send+0x1fc>)
 800743a:	f44f 7392 	mov.w	r3, #292	; 0x124
 800743e:	fb03 2300 	mla	r3, r3, r0, r2
 8007442:	7edb      	ldrb	r3, [r3, #27]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d84b      	bhi.n	80074e0 <dns_send+0xb0>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8007448:	4a78      	ldr	r2, [pc, #480]	; (800762c <dns_send+0x1fc>)
 800744a:	f44f 7392 	mov.w	r3, #292	; 0x124
 800744e:	fb03 2306 	mla	r3, r3, r6, r2
 8007452:	7edb      	ldrb	r3, [r3, #27]
 8007454:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007458:	0091      	lsls	r1, r2, #2
 800745a:	4a75      	ldr	r2, [pc, #468]	; (8007630 <dns_send+0x200>)
 800745c:	440a      	add	r2, r1
 800745e:	7c12      	ldrb	r2, [r2, #16]
 8007460:	2a06      	cmp	r2, #6
 8007462:	d045      	beq.n	80074f0 <dns_send+0xc0>
 8007464:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007468:	009a      	lsls	r2, r3, #2
 800746a:	4b71      	ldr	r3, [pc, #452]	; (8007630 <dns_send+0x200>)
 800746c:	589b      	ldr	r3, [r3, r2]
 800746e:	fab3 f383 	clz	r3, r3
 8007472:	095b      	lsrs	r3, r3, #5
 8007474:	2b00      	cmp	r3, #0
 8007476:	d15a      	bne.n	800752e <dns_send+0xfe>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8007478:	f44f 7392 	mov.w	r3, #292	; 0x124
 800747c:	fb03 f306 	mul.w	r3, r3, r6
 8007480:	3320      	adds	r3, #32
 8007482:	4f6a      	ldr	r7, [pc, #424]	; (800762c <dns_send+0x1fc>)
 8007484:	441f      	add	r7, r3
 8007486:	4638      	mov	r0, r7
 8007488:	f7f8 fea2 	bl	80001d0 <strlen>
 800748c:	f100 0112 	add.w	r1, r0, #18
 8007490:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007494:	b289      	uxth	r1, r1
 8007496:	204a      	movs	r0, #74	; 0x4a
 8007498:	f001 f9a8 	bl	80087ec <pbuf_alloc>
  if (p != NULL) {
 800749c:	4605      	mov	r5, r0
 800749e:	2800      	cmp	r0, #0
 80074a0:	f000 80c1 	beq.w	8007626 <dns_send+0x1f6>
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80074a4:	2300      	movs	r3, #0
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	9302      	str	r3, [sp, #8]
 80074aa:	9303      	str	r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 80074ac:	4a5f      	ldr	r2, [pc, #380]	; (800762c <dns_send+0x1fc>)
 80074ae:	f44f 7392 	mov.w	r3, #292	; 0x124
 80074b2:	fb03 2306 	mla	r3, r3, r6, r2
 80074b6:	8b18      	ldrh	r0, [r3, #24]
 80074b8:	f7ff fe98 	bl	80071ec <lwip_htons>
 80074bc:	f8ad 0004 	strh.w	r0, [sp, #4]
    hdr.flags1 = DNS_FLAG1_RD;
 80074c0:	2301      	movs	r3, #1
 80074c2:	f88d 3006 	strb.w	r3, [sp, #6]
    hdr.numquestions = PP_HTONS(1);
 80074c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074ca:	f8ad 3008 	strh.w	r3, [sp, #8]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80074ce:	220c      	movs	r2, #12
 80074d0:	a901      	add	r1, sp, #4
 80074d2:	4628      	mov	r0, r5
 80074d4:	f001 fbca 	bl	8008c6c <pbuf_take>
    --hostname;
 80074d8:	3f01      	subs	r7, #1
    query_idx = SIZEOF_DNS_HDR;
 80074da:	f04f 080c 	mov.w	r8, #12
 80074de:	e05c      	b.n	800759a <dns_send+0x16a>
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 80074e0:	4b54      	ldr	r3, [pc, #336]	; (8007634 <dns_send+0x204>)
 80074e2:	f240 22fa 	movw	r2, #762	; 0x2fa
 80074e6:	4954      	ldr	r1, [pc, #336]	; (8007638 <dns_send+0x208>)
 80074e8:	4854      	ldr	r0, [pc, #336]	; (800763c <dns_send+0x20c>)
 80074ea:	f00d f883 	bl	80145f4 <iprintf>
 80074ee:	e7ab      	b.n	8007448 <dns_send+0x18>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 80074f0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80074f4:	008a      	lsls	r2, r1, #2
 80074f6:	494e      	ldr	r1, [pc, #312]	; (8007630 <dns_send+0x200>)
 80074f8:	588a      	ldr	r2, [r1, r2]
 80074fa:	b982      	cbnz	r2, 800751e <dns_send+0xee>
 80074fc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007500:	0091      	lsls	r1, r2, #2
 8007502:	4a4b      	ldr	r2, [pc, #300]	; (8007630 <dns_send+0x200>)
 8007504:	440a      	add	r2, r1
 8007506:	6852      	ldr	r2, [r2, #4]
 8007508:	b95a      	cbnz	r2, 8007522 <dns_send+0xf2>
 800750a:	4a49      	ldr	r2, [pc, #292]	; (8007630 <dns_send+0x200>)
 800750c:	440a      	add	r2, r1
 800750e:	6892      	ldr	r2, [r2, #8]
 8007510:	b94a      	cbnz	r2, 8007526 <dns_send+0xf6>
 8007512:	4b47      	ldr	r3, [pc, #284]	; (8007630 <dns_send+0x200>)
 8007514:	440b      	add	r3, r1
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	b13b      	cbz	r3, 800752a <dns_send+0xfa>
 800751a:	2300      	movs	r3, #0
 800751c:	e7aa      	b.n	8007474 <dns_send+0x44>
 800751e:	2300      	movs	r3, #0
 8007520:	e7a8      	b.n	8007474 <dns_send+0x44>
 8007522:	2300      	movs	r3, #0
 8007524:	e7a6      	b.n	8007474 <dns_send+0x44>
 8007526:	2300      	movs	r3, #0
 8007528:	e7a4      	b.n	8007474 <dns_send+0x44>
 800752a:	2301      	movs	r3, #1
 800752c:	e7a2      	b.n	8007474 <dns_send+0x44>
    dns_call_found(idx, NULL);
 800752e:	2100      	movs	r1, #0
 8007530:	4630      	mov	r0, r6
 8007532:	f7ff fecb 	bl	80072cc <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 8007536:	4a3d      	ldr	r2, [pc, #244]	; (800762c <dns_send+0x1fc>)
 8007538:	f44f 7392 	mov.w	r3, #292	; 0x124
 800753c:	fb03 2606 	mla	r6, r3, r6, r2
 8007540:	2400      	movs	r4, #0
 8007542:	76b4      	strb	r4, [r6, #26]
}
 8007544:	4620      	mov	r0, r4
 8007546:	b004      	add	sp, #16
 8007548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ++n;
 800754c:	3401      	adds	r4, #1
 800754e:	b2e4      	uxtb	r4, r4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8007550:	3701      	adds	r7, #1
 8007552:	783b      	ldrb	r3, [r7, #0]
 8007554:	2b2e      	cmp	r3, #46	; 0x2e
 8007556:	d001      	beq.n	800755c <dns_send+0x12c>
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1f7      	bne.n	800754c <dns_send+0x11c>
      copy_len = (u16_t)(hostname - hostname_part);
 800755c:	eba7 0a09 	sub.w	sl, r7, r9
 8007560:	fa1f fa8a 	uxth.w	sl, sl
      if (query_idx + n + 1 > 0xFFFF) {
 8007564:	eb08 0304 	add.w	r3, r8, r4
 8007568:	3301      	adds	r3, #1
 800756a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800756e:	da54      	bge.n	800761a <dns_send+0x1ea>
      pbuf_put_at(p, query_idx, n);
 8007570:	4622      	mov	r2, r4
 8007572:	4641      	mov	r1, r8
 8007574:	4628      	mov	r0, r5
 8007576:	f001 fc57 	bl	8008e28 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800757a:	f108 0301 	add.w	r3, r8, #1
 800757e:	b29b      	uxth	r3, r3
 8007580:	4652      	mov	r2, sl
 8007582:	4649      	mov	r1, r9
 8007584:	4628      	mov	r0, r5
 8007586:	f001 fbd1 	bl	8008d2c <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800758a:	4444      	add	r4, r8
 800758c:	b2a4      	uxth	r4, r4
 800758e:	f104 0801 	add.w	r8, r4, #1
 8007592:	fa1f f888 	uxth.w	r8, r8
    } while (*hostname != 0);
 8007596:	783b      	ldrb	r3, [r7, #0]
 8007598:	b11b      	cbz	r3, 80075a2 <dns_send+0x172>
      ++hostname;
 800759a:	3701      	adds	r7, #1
 800759c:	46b9      	mov	r9, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800759e:	2400      	movs	r4, #0
 80075a0:	e7d7      	b.n	8007552 <dns_send+0x122>
    pbuf_put_at(p, query_idx, 0);
 80075a2:	2200      	movs	r2, #0
 80075a4:	4641      	mov	r1, r8
 80075a6:	4628      	mov	r0, r5
 80075a8:	f001 fc3e 	bl	8008e28 <pbuf_put_at>
    query_idx++;
 80075ac:	1ca3      	adds	r3, r4, #2
 80075ae:	b29b      	uxth	r3, r3
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
 80075b0:	491e      	ldr	r1, [pc, #120]	; (800762c <dns_send+0x1fc>)
 80075b2:	f44f 7292 	mov.w	r2, #292	; 0x124
 80075b6:	fb02 1206 	mla	r2, r2, r6, r1
 80075ba:	f892 2120 	ldrb.w	r2, [r2, #288]	; 0x120
 80075be:	2a03      	cmp	r2, #3
 80075c0:	d006      	beq.n	80075d0 <dns_send+0x1a0>
 80075c2:	2a01      	cmp	r2, #1
 80075c4:	d004      	beq.n	80075d0 <dns_send+0x1a0>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 80075c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075ca:	f8ad 2000 	strh.w	r2, [sp]
 80075ce:	e003      	b.n	80075d8 <dns_send+0x1a8>
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
 80075d0:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80075d4:	f8ad 2000 	strh.w	r2, [sp]
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 80075d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075dc:	f8ad 2002 	strh.w	r2, [sp, #2]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 80075e0:	2204      	movs	r2, #4
 80075e2:	4669      	mov	r1, sp
 80075e4:	4628      	mov	r0, r5
 80075e6:	f001 fba1 	bl	8008d2c <pbuf_take_at>
    pcb_idx = entry->pcb_idx;
 80075ea:	4b10      	ldr	r3, [pc, #64]	; (800762c <dns_send+0x1fc>)
 80075ec:	f44f 7292 	mov.w	r2, #292	; 0x124
 80075f0:	fb02 3606 	mla	r6, r2, r6, r3
 80075f4:	7ff4      	ldrb	r4, [r6, #31]
      dst = &dns_servers[entry->server_idx];
 80075f6:	7ef3      	ldrb	r3, [r6, #27]
 80075f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80075fc:	009a      	lsls	r2, r3, #2
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 80075fe:	2335      	movs	r3, #53	; 0x35
 8007600:	490b      	ldr	r1, [pc, #44]	; (8007630 <dns_send+0x200>)
 8007602:	440a      	add	r2, r1
 8007604:	4629      	mov	r1, r5
 8007606:	480e      	ldr	r0, [pc, #56]	; (8007640 <dns_send+0x210>)
 8007608:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800760c:	f006 f90c 	bl	800d828 <udp_sendto>
 8007610:	4604      	mov	r4, r0
    pbuf_free(p);
 8007612:	4628      	mov	r0, r5
 8007614:	f001 f888 	bl	8008728 <pbuf_free>
 8007618:	e794      	b.n	8007544 <dns_send+0x114>
  pbuf_free(p);
 800761a:	4628      	mov	r0, r5
 800761c:	f001 f884 	bl	8008728 <pbuf_free>
  return ERR_VAL;
 8007620:	f06f 0405 	mvn.w	r4, #5
 8007624:	e78e      	b.n	8007544 <dns_send+0x114>
    err = ERR_MEM;
 8007626:	f04f 34ff 	mov.w	r4, #4294967295
 800762a:	e78b      	b.n	8007544 <dns_send+0x114>
 800762c:	2000125c 	.word	0x2000125c
 8007630:	20001234 	.word	0x20001234
 8007634:	08015d20 	.word	0x08015d20
 8007638:	08015da0 	.word	0x08015da0
 800763c:	08015608 	.word	0x08015608
 8007640:	200011f4 	.word	0x200011f4

08007644 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8007644:	b538      	push	{r3, r4, r5, lr}
 8007646:	4604      	mov	r4, r0
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8007648:	4d45      	ldr	r5, [pc, #276]	; (8007760 <dns_check_entry+0x11c>)
 800764a:	f44f 7092 	mov.w	r0, #292	; 0x124
 800764e:	fb00 5504 	mla	r5, r0, r4, r5

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8007652:	2c03      	cmp	r4, #3
 8007654:	d80b      	bhi.n	800766e <dns_check_entry+0x2a>

  switch (entry->state) {
 8007656:	4a42      	ldr	r2, [pc, #264]	; (8007760 <dns_check_entry+0x11c>)
 8007658:	f44f 7392 	mov.w	r3, #292	; 0x124
 800765c:	fb03 2304 	mla	r3, r3, r4, r2
 8007660:	7e9b      	ldrb	r3, [r3, #26]
 8007662:	2b03      	cmp	r3, #3
 8007664:	d873      	bhi.n	800774e <dns_check_entry+0x10a>
 8007666:	e8df f003 	tbb	[pc, r3]
 800766a:	0a1c      	.short	0x0a1c
 800766c:	5a1d      	.short	0x5a1d
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800766e:	4b3d      	ldr	r3, [pc, #244]	; (8007764 <dns_check_entry+0x120>)
 8007670:	f240 421c 	movw	r2, #1052	; 0x41c
 8007674:	493c      	ldr	r1, [pc, #240]	; (8007768 <dns_check_entry+0x124>)
 8007676:	483d      	ldr	r0, [pc, #244]	; (800776c <dns_check_entry+0x128>)
 8007678:	f00c ffbc 	bl	80145f4 <iprintf>
 800767c:	e7eb      	b.n	8007656 <dns_check_entry+0x12>
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800767e:	f7ff fe07 	bl	8007290 <dns_create_txid>
 8007682:	4a37      	ldr	r2, [pc, #220]	; (8007760 <dns_check_entry+0x11c>)
 8007684:	f44f 7392 	mov.w	r3, #292	; 0x124
 8007688:	fb03 2304 	mla	r3, r3, r4, r2
 800768c:	8318      	strh	r0, [r3, #24]
      entry->state = DNS_STATE_ASKING;
 800768e:	2202      	movs	r2, #2
 8007690:	769a      	strb	r2, [r3, #26]
      entry->server_idx = 0;
 8007692:	2200      	movs	r2, #0
 8007694:	76da      	strb	r2, [r3, #27]
      entry->tmr = 1;
 8007696:	2101      	movs	r1, #1
 8007698:	7719      	strb	r1, [r3, #28]
      entry->retries = 0;
 800769a:	775a      	strb	r2, [r3, #29]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800769c:	4620      	mov	r0, r4
 800769e:	f7ff fec7 	bl	8007430 <dns_send>
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
      if (--entry->tmr == 0) {
 80076a4:	4b2e      	ldr	r3, [pc, #184]	; (8007760 <dns_check_entry+0x11c>)
 80076a6:	f44f 7292 	mov.w	r2, #292	; 0x124
 80076aa:	fb02 3204 	mla	r2, r2, r4, r3
 80076ae:	7f13      	ldrb	r3, [r2, #28]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	7713      	strb	r3, [r2, #28]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1f3      	bne.n	80076a2 <dns_check_entry+0x5e>
        if (++entry->retries == DNS_MAX_RETRIES) {
 80076ba:	4b29      	ldr	r3, [pc, #164]	; (8007760 <dns_check_entry+0x11c>)
 80076bc:	f44f 7292 	mov.w	r2, #292	; 0x124
 80076c0:	fb02 3204 	mla	r2, r2, r4, r3
 80076c4:	7f53      	ldrb	r3, [r2, #29]
 80076c6:	3301      	adds	r3, #1
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	7753      	strb	r3, [r2, #29]
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d009      	beq.n	80076e4 <dns_check_entry+0xa0>
          entry->tmr = entry->retries;
 80076d0:	4923      	ldr	r1, [pc, #140]	; (8007760 <dns_check_entry+0x11c>)
 80076d2:	f44f 7292 	mov.w	r2, #292	; 0x124
 80076d6:	fb02 1204 	mla	r2, r2, r4, r1
 80076da:	7713      	strb	r3, [r2, #28]
        err = dns_send(i);
 80076dc:	4620      	mov	r0, r4
 80076de:	f7ff fea7 	bl	8007430 <dns_send>
 80076e2:	e7de      	b.n	80076a2 <dns_check_entry+0x5e>
          if (dns_backupserver_available(entry)
 80076e4:	4628      	mov	r0, r5
 80076e6:	f7ff fd93 	bl	8007210 <dns_backupserver_available>
 80076ea:	b160      	cbz	r0, 8007706 <dns_check_entry+0xc2>
            entry->server_idx++;
 80076ec:	4a1c      	ldr	r2, [pc, #112]	; (8007760 <dns_check_entry+0x11c>)
 80076ee:	f44f 7392 	mov.w	r3, #292	; 0x124
 80076f2:	fb03 2304 	mla	r3, r3, r4, r2
 80076f6:	7eda      	ldrb	r2, [r3, #27]
 80076f8:	3201      	adds	r2, #1
 80076fa:	76da      	strb	r2, [r3, #27]
            entry->tmr = 1;
 80076fc:	2201      	movs	r2, #1
 80076fe:	771a      	strb	r2, [r3, #28]
            entry->retries = 0;
 8007700:	2200      	movs	r2, #0
 8007702:	775a      	strb	r2, [r3, #29]
 8007704:	e7ea      	b.n	80076dc <dns_check_entry+0x98>
            dns_call_found(i, NULL);
 8007706:	2100      	movs	r1, #0
 8007708:	4620      	mov	r0, r4
 800770a:	f7ff fddf 	bl	80072cc <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 800770e:	4a14      	ldr	r2, [pc, #80]	; (8007760 <dns_check_entry+0x11c>)
 8007710:	f44f 7392 	mov.w	r3, #292	; 0x124
 8007714:	fb03 2404 	mla	r4, r3, r4, r2
 8007718:	2300      	movs	r3, #0
 800771a:	76a3      	strb	r3, [r4, #26]
            break;
 800771c:	e7c1      	b.n	80076a2 <dns_check_entry+0x5e>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800771e:	f44f 7392 	mov.w	r3, #292	; 0x124
 8007722:	fb03 f304 	mul.w	r3, r3, r4
 8007726:	4a0e      	ldr	r2, [pc, #56]	; (8007760 <dns_check_entry+0x11c>)
 8007728:	58d3      	ldr	r3, [r2, r3]
 800772a:	b143      	cbz	r3, 800773e <dns_check_entry+0xfa>
 800772c:	3b01      	subs	r3, #1
 800772e:	f44f 7292 	mov.w	r2, #292	; 0x124
 8007732:	fb02 f204 	mul.w	r2, r2, r4
 8007736:	490a      	ldr	r1, [pc, #40]	; (8007760 <dns_check_entry+0x11c>)
 8007738:	508b      	str	r3, [r1, r2]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1b1      	bne.n	80076a2 <dns_check_entry+0x5e>
        entry->state = DNS_STATE_UNUSED;
 800773e:	4b08      	ldr	r3, [pc, #32]	; (8007760 <dns_check_entry+0x11c>)
 8007740:	f44f 7292 	mov.w	r2, #292	; 0x124
 8007744:	fb02 3404 	mla	r4, r2, r4, r3
 8007748:	2300      	movs	r3, #0
 800774a:	76a3      	strb	r3, [r4, #26]
 800774c:	e7a9      	b.n	80076a2 <dns_check_entry+0x5e>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800774e:	4b05      	ldr	r3, [pc, #20]	; (8007764 <dns_check_entry+0x120>)
 8007750:	f240 425b 	movw	r2, #1115	; 0x45b
 8007754:	4906      	ldr	r1, [pc, #24]	; (8007770 <dns_check_entry+0x12c>)
 8007756:	4805      	ldr	r0, [pc, #20]	; (800776c <dns_check_entry+0x128>)
 8007758:	f00c ff4c 	bl	80145f4 <iprintf>
}
 800775c:	e7a1      	b.n	80076a2 <dns_check_entry+0x5e>
 800775e:	bf00      	nop
 8007760:	2000125c 	.word	0x2000125c
 8007764:	08015d20 	.word	0x08015d20
 8007768:	08015d64 	.word	0x08015d64
 800776c:	08015608 	.word	0x08015608
 8007770:	08015d80 	.word	0x08015d80

08007774 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8007774:	b510      	push	{r4, lr}
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8007776:	2400      	movs	r4, #0
 8007778:	e004      	b.n	8007784 <dns_check_entries+0x10>
    dns_check_entry(i);
 800777a:	4620      	mov	r0, r4
 800777c:	f7ff ff62 	bl	8007644 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8007780:	3401      	adds	r4, #1
 8007782:	b2e4      	uxtb	r4, r4
 8007784:	2c03      	cmp	r4, #3
 8007786:	d9f8      	bls.n	800777a <dns_check_entries+0x6>
  }
}
 8007788:	bd10      	pop	{r4, pc}

0800778a <dns_init>:
}
 800778a:	4770      	bx	lr

0800778c <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 800778c:	2801      	cmp	r0, #1
 800778e:	d900      	bls.n	8007792 <dns_setserver+0x6>
 8007790:	4770      	bx	lr
{
 8007792:	b430      	push	{r4, r5}
    if (dnsserver != NULL) {
 8007794:	b159      	cbz	r1, 80077ae <dns_setserver+0x22>
      dns_servers[numdns] = (*dnsserver);
 8007796:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800779a:	0083      	lsls	r3, r0, #2
 800779c:	4d09      	ldr	r5, [pc, #36]	; (80077c4 <dns_setserver+0x38>)
 800779e:	441d      	add	r5, r3
 80077a0:	460c      	mov	r4, r1
 80077a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	602b      	str	r3, [r5, #0]
}
 80077aa:	bc30      	pop	{r4, r5}
 80077ac:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 80077ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80077b2:	0083      	lsls	r3, r0, #2
 80077b4:	4c03      	ldr	r4, [pc, #12]	; (80077c4 <dns_setserver+0x38>)
 80077b6:	441c      	add	r4, r3
 80077b8:	4d03      	ldr	r5, [pc, #12]	; (80077c8 <dns_setserver+0x3c>)
 80077ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077be:	682b      	ldr	r3, [r5, #0]
 80077c0:	6023      	str	r3, [r4, #0]
}
 80077c2:	e7f2      	b.n	80077aa <dns_setserver+0x1e>
 80077c4:	20001234 	.word	0x20001234
 80077c8:	08018250 	.word	0x08018250

080077cc <dns_tmr>:
{
 80077cc:	b508      	push	{r3, lr}
  dns_check_entries();
 80077ce:	f7ff ffd1 	bl	8007774 <dns_check_entries>
}
 80077d2:	bd08      	pop	{r3, pc}

080077d4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80077d4:	b410      	push	{r4}
 80077d6:	b083      	sub	sp, #12
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 80077d8:	2300      	movs	r3, #0
 80077da:	f8ad 3006 	strh.w	r3, [sp, #6]
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80077de:	f010 0401 	ands.w	r4, r0, #1
 80077e2:	d006      	beq.n	80077f2 <lwip_standard_chksum+0x1e>
 80077e4:	4299      	cmp	r1, r3
 80077e6:	dd04      	ble.n	80077f2 <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 80077e8:	7803      	ldrb	r3, [r0, #0]
 80077ea:	f88d 3007 	strb.w	r3, [sp, #7]
    len--;
 80077ee:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 80077f0:	3001      	adds	r0, #1
  u32_t sum = 0;
 80077f2:	2300      	movs	r3, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 80077f4:	e003      	b.n	80077fe <lwip_standard_chksum+0x2a>
    sum += *ps++;
 80077f6:	8802      	ldrh	r2, [r0, #0]
 80077f8:	4413      	add	r3, r2
    len -= 2;
 80077fa:	3902      	subs	r1, #2
    sum += *ps++;
 80077fc:	3002      	adds	r0, #2
  while (len > 1) {
 80077fe:	2901      	cmp	r1, #1
 8007800:	dcf9      	bgt.n	80077f6 <lwip_standard_chksum+0x22>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8007802:	2900      	cmp	r1, #0
 8007804:	dd02      	ble.n	800780c <lwip_standard_chksum+0x38>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8007806:	7802      	ldrb	r2, [r0, #0]
 8007808:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 800780c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8007810:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8007812:	b298      	uxth	r0, r3
 8007814:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8007818:	b298      	uxth	r0, r3
 800781a:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 800781e:	b124      	cbz	r4, 800782a <lwip_standard_chksum+0x56>
    sum = SWAP_BYTES_IN_WORD(sum);
 8007820:	0203      	lsls	r3, r0, #8
 8007822:	b29b      	uxth	r3, r3
 8007824:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8007828:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 800782a:	b280      	uxth	r0, r0
 800782c:	b003      	add	sp, #12
 800782e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007832:	4770      	bx	lr

08007834 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8007834:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8007836:	f7ff ffcd 	bl	80077d4 <lwip_standard_chksum>
 800783a:	43c0      	mvns	r0, r0
}
 800783c:	b280      	uxth	r0, r0
 800783e:	bd08      	pop	{r3, pc}

08007840 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007840:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8007842:	f000 f8cb 	bl	80079dc <mem_init>
  memp_init();
 8007846:	f000 faff 	bl	8007e48 <memp_init>
  pbuf_init();
  netif_init();
 800784a:	f000 fbf3 	bl	8008034 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800784e:	f005 fbfd 	bl	800d04c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007852:	f001 fbbb 	bl	8008fcc <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 8007856:	f008 fab5 	bl	800fdc4 <igmp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800785a:	f7ff ff96 	bl	800778a <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800785e:	f005 faeb 	bl	800ce38 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007862:	bd08      	pop	{r3, pc}

08007864 <ptr_to_mem>:
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
  return (struct mem *)(void *)&ram[ptr];
 8007864:	4b01      	ldr	r3, [pc, #4]	; (800786c <ptr_to_mem+0x8>)
 8007866:	681b      	ldr	r3, [r3, #0]
}
 8007868:	4418      	add	r0, r3
 800786a:	4770      	bx	lr
 800786c:	200016f0 	.word	0x200016f0

08007870 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
  return (mem_size_t)((u8_t *)mem - ram);
 8007870:	4b02      	ldr	r3, [pc, #8]	; (800787c <mem_to_ptr+0xc>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	1ac0      	subs	r0, r0, r3
}
 8007876:	b280      	uxth	r0, r0
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	200016f0 	.word	0x200016f0

08007880 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007882:	4605      	mov	r5, r0
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007884:	f7ff fff4 	bl	8007870 <mem_to_ptr>
 8007888:	4606      	mov	r6, r0
  nmem = ptr_to_mem(mem->next);
 800788a:	882c      	ldrh	r4, [r5, #0]
 800788c:	4620      	mov	r0, r4
 800788e:	f7ff ffe9 	bl	8007864 <ptr_to_mem>
 8007892:	4607      	mov	r7, r0
  pmem = ptr_to_mem(mem->prev);
 8007894:	886d      	ldrh	r5, [r5, #2]
 8007896:	4628      	mov	r0, r5
 8007898:	f7ff ffe4 	bl	8007864 <ptr_to_mem>
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800789c:	f5b4 6f48 	cmp.w	r4, #3200	; 0xc80
 80078a0:	d814      	bhi.n	80078cc <mem_link_valid+0x4c>
 80078a2:	f5b5 6f48 	cmp.w	r5, #3200	; 0xc80
 80078a6:	d813      	bhi.n	80078d0 <mem_link_valid+0x50>
 80078a8:	42b5      	cmp	r5, r6
 80078aa:	d004      	beq.n	80078b6 <mem_link_valid+0x36>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80078ac:	8803      	ldrh	r3, [r0, #0]
 80078ae:	42b3      	cmp	r3, r6
 80078b0:	d001      	beq.n	80078b6 <mem_link_valid+0x36>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
    return 0;
 80078b2:	2000      	movs	r0, #0
 80078b4:	e00b      	b.n	80078ce <mem_link_valid+0x4e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80078b6:	4b08      	ldr	r3, [pc, #32]	; (80078d8 <mem_link_valid+0x58>)
 80078b8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80078ba:	42bb      	cmp	r3, r7
 80078bc:	d00a      	beq.n	80078d4 <mem_link_valid+0x54>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80078be:	887b      	ldrh	r3, [r7, #2]
 80078c0:	42b3      	cmp	r3, r6
 80078c2:	d001      	beq.n	80078c8 <mem_link_valid+0x48>
    return 0;
 80078c4:	2000      	movs	r0, #0
 80078c6:	e002      	b.n	80078ce <mem_link_valid+0x4e>
  }
  return 1;
 80078c8:	2001      	movs	r0, #1
 80078ca:	e000      	b.n	80078ce <mem_link_valid+0x4e>
    return 0;
 80078cc:	2000      	movs	r0, #0
}
 80078ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return 0;
 80078d0:	2000      	movs	r0, #0
 80078d2:	e7fc      	b.n	80078ce <mem_link_valid+0x4e>
  return 1;
 80078d4:	2001      	movs	r0, #1
 80078d6:	e7fa      	b.n	80078ce <mem_link_valid+0x4e>
 80078d8:	200016f4 	.word	0x200016f4

080078dc <plug_holes>:
{
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	4604      	mov	r4, r0
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80078e0:	4b35      	ldr	r3, [pc, #212]	; (80079b8 <plug_holes+0xdc>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4283      	cmp	r3, r0
 80078e6:	d840      	bhi.n	800796a <plug_holes+0x8e>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80078e8:	4b34      	ldr	r3, [pc, #208]	; (80079bc <plug_holes+0xe0>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	42a3      	cmp	r3, r4
 80078ee:	d944      	bls.n	800797a <plug_holes+0x9e>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80078f0:	7923      	ldrb	r3, [r4, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d149      	bne.n	800798a <plug_holes+0xae>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80078f6:	8823      	ldrh	r3, [r4, #0]
 80078f8:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 80078fc:	d84d      	bhi.n	800799a <plug_holes+0xbe>
  nmem = ptr_to_mem(mem->next);
 80078fe:	8820      	ldrh	r0, [r4, #0]
 8007900:	f7ff ffb0 	bl	8007864 <ptr_to_mem>
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007904:	4284      	cmp	r4, r0
 8007906:	d016      	beq.n	8007936 <plug_holes+0x5a>
 8007908:	7903      	ldrb	r3, [r0, #4]
 800790a:	b9a3      	cbnz	r3, 8007936 <plug_holes+0x5a>
 800790c:	4b2b      	ldr	r3, [pc, #172]	; (80079bc <plug_holes+0xe0>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4283      	cmp	r3, r0
 8007912:	d010      	beq.n	8007936 <plug_holes+0x5a>
    if (lfree == nmem) {
 8007914:	4b2a      	ldr	r3, [pc, #168]	; (80079c0 <plug_holes+0xe4>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4283      	cmp	r3, r0
 800791a:	d046      	beq.n	80079aa <plug_holes+0xce>
    mem->next = nmem->next;
 800791c:	8803      	ldrh	r3, [r0, #0]
 800791e:	8023      	strh	r3, [r4, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007920:	8800      	ldrh	r0, [r0, #0]
 8007922:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
 8007926:	d006      	beq.n	8007936 <plug_holes+0x5a>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007928:	f7ff ff9c 	bl	8007864 <ptr_to_mem>
 800792c:	4605      	mov	r5, r0
 800792e:	4620      	mov	r0, r4
 8007930:	f7ff ff9e 	bl	8007870 <mem_to_ptr>
 8007934:	8068      	strh	r0, [r5, #2]
  pmem = ptr_to_mem(mem->prev);
 8007936:	8860      	ldrh	r0, [r4, #2]
 8007938:	f7ff ff94 	bl	8007864 <ptr_to_mem>
 800793c:	4605      	mov	r5, r0
  if (pmem != mem && pmem->used == 0) {
 800793e:	4284      	cmp	r4, r0
 8007940:	d012      	beq.n	8007968 <plug_holes+0x8c>
 8007942:	7903      	ldrb	r3, [r0, #4]
 8007944:	b983      	cbnz	r3, 8007968 <plug_holes+0x8c>
    if (lfree == mem) {
 8007946:	4b1e      	ldr	r3, [pc, #120]	; (80079c0 <plug_holes+0xe4>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	42a3      	cmp	r3, r4
 800794c:	d030      	beq.n	80079b0 <plug_holes+0xd4>
    pmem->next = mem->next;
 800794e:	8823      	ldrh	r3, [r4, #0]
 8007950:	802b      	strh	r3, [r5, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007952:	8820      	ldrh	r0, [r4, #0]
 8007954:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
 8007958:	d006      	beq.n	8007968 <plug_holes+0x8c>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800795a:	f7ff ff83 	bl	8007864 <ptr_to_mem>
 800795e:	4604      	mov	r4, r0
 8007960:	4628      	mov	r0, r5
 8007962:	f7ff ff85 	bl	8007870 <mem_to_ptr>
 8007966:	8060      	strh	r0, [r4, #2]
}
 8007968:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800796a:	4b16      	ldr	r3, [pc, #88]	; (80079c4 <plug_holes+0xe8>)
 800796c:	f240 12df 	movw	r2, #479	; 0x1df
 8007970:	4915      	ldr	r1, [pc, #84]	; (80079c8 <plug_holes+0xec>)
 8007972:	4816      	ldr	r0, [pc, #88]	; (80079cc <plug_holes+0xf0>)
 8007974:	f00c fe3e 	bl	80145f4 <iprintf>
 8007978:	e7b6      	b.n	80078e8 <plug_holes+0xc>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800797a:	4b12      	ldr	r3, [pc, #72]	; (80079c4 <plug_holes+0xe8>)
 800797c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007980:	4913      	ldr	r1, [pc, #76]	; (80079d0 <plug_holes+0xf4>)
 8007982:	4812      	ldr	r0, [pc, #72]	; (80079cc <plug_holes+0xf0>)
 8007984:	f00c fe36 	bl	80145f4 <iprintf>
 8007988:	e7b2      	b.n	80078f0 <plug_holes+0x14>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800798a:	4b0e      	ldr	r3, [pc, #56]	; (80079c4 <plug_holes+0xe8>)
 800798c:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007990:	4910      	ldr	r1, [pc, #64]	; (80079d4 <plug_holes+0xf8>)
 8007992:	480e      	ldr	r0, [pc, #56]	; (80079cc <plug_holes+0xf0>)
 8007994:	f00c fe2e 	bl	80145f4 <iprintf>
 8007998:	e7ad      	b.n	80078f6 <plug_holes+0x1a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800799a:	4b0a      	ldr	r3, [pc, #40]	; (80079c4 <plug_holes+0xe8>)
 800799c:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80079a0:	490d      	ldr	r1, [pc, #52]	; (80079d8 <plug_holes+0xfc>)
 80079a2:	480a      	ldr	r0, [pc, #40]	; (80079cc <plug_holes+0xf0>)
 80079a4:	f00c fe26 	bl	80145f4 <iprintf>
 80079a8:	e7a9      	b.n	80078fe <plug_holes+0x22>
      lfree = mem;
 80079aa:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <plug_holes+0xe4>)
 80079ac:	601c      	str	r4, [r3, #0]
 80079ae:	e7b5      	b.n	800791c <plug_holes+0x40>
      lfree = pmem;
 80079b0:	4b03      	ldr	r3, [pc, #12]	; (80079c0 <plug_holes+0xe4>)
 80079b2:	6018      	str	r0, [r3, #0]
 80079b4:	e7cb      	b.n	800794e <plug_holes+0x72>
 80079b6:	bf00      	nop
 80079b8:	200016f0 	.word	0x200016f0
 80079bc:	200016f4 	.word	0x200016f4
 80079c0:	200016ec 	.word	0x200016ec
 80079c4:	08015f40 	.word	0x08015f40
 80079c8:	08015f70 	.word	0x08015f70
 80079cc:	08015608 	.word	0x08015608
 80079d0:	08015f88 	.word	0x08015f88
 80079d4:	08015fa4 	.word	0x08015fa4
 80079d8:	08015fc0 	.word	0x08015fc0

080079dc <mem_init>:
{
 80079dc:	b538      	push	{r3, r4, r5, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80079de:	4c0b      	ldr	r4, [pc, #44]	; (8007a0c <mem_init+0x30>)
 80079e0:	f024 0403 	bic.w	r4, r4, #3
 80079e4:	4b0a      	ldr	r3, [pc, #40]	; (8007a10 <mem_init+0x34>)
 80079e6:	601c      	str	r4, [r3, #0]
  mem->next = MEM_SIZE_ALIGNED;
 80079e8:	f44f 6548 	mov.w	r5, #3200	; 0xc80
 80079ec:	8025      	strh	r5, [r4, #0]
  mem->prev = 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	8063      	strh	r3, [r4, #2]
  mem->used = 0;
 80079f2:	7123      	strb	r3, [r4, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80079f4:	4628      	mov	r0, r5
 80079f6:	f7ff ff35 	bl	8007864 <ptr_to_mem>
 80079fa:	4b06      	ldr	r3, [pc, #24]	; (8007a14 <mem_init+0x38>)
 80079fc:	6018      	str	r0, [r3, #0]
  ram_end->used = 1;
 80079fe:	2301      	movs	r3, #1
 8007a00:	7103      	strb	r3, [r0, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007a02:	8005      	strh	r5, [r0, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007a04:	8045      	strh	r5, [r0, #2]
  lfree = (struct mem *)(void *)ram;
 8007a06:	4b04      	ldr	r3, [pc, #16]	; (8007a18 <mem_init+0x3c>)
 8007a08:	601c      	str	r4, [r3, #0]
}
 8007a0a:	bd38      	pop	{r3, r4, r5, pc}
 8007a0c:	20004bc3 	.word	0x20004bc3
 8007a10:	200016f0 	.word	0x200016f0
 8007a14:	200016f4 	.word	0x200016f4
 8007a18:	200016ec 	.word	0x200016ec

08007a1c <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d044      	beq.n	8007aaa <mem_free+0x8e>
{
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007a24:	f010 0f03 	tst.w	r0, #3
 8007a28:	d11f      	bne.n	8007a6a <mem_free+0x4e>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007a2a:	f1a0 0508 	sub.w	r5, r0, #8

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007a2e:	4b1f      	ldr	r3, [pc, #124]	; (8007aac <mem_free+0x90>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	42ab      	cmp	r3, r5
 8007a34:	d821      	bhi.n	8007a7a <mem_free+0x5e>
 8007a36:	f100 030c 	add.w	r3, r0, #12
 8007a3a:	4a1d      	ldr	r2, [pc, #116]	; (8007ab0 <mem_free+0x94>)
 8007a3c:	6812      	ldr	r2, [r2, #0]
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d81b      	bhi.n	8007a7a <mem_free+0x5e>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007a42:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 8007a46:	b303      	cbz	r3, 8007a8a <mem_free+0x6e>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
 8007a48:	4628      	mov	r0, r5
 8007a4a:	f7ff ff19 	bl	8007880 <mem_link_valid>
 8007a4e:	b320      	cbz	r0, 8007a9a <mem_free+0x7e>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 8007a50:	2300      	movs	r3, #0
 8007a52:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 8007a56:	4b17      	ldr	r3, [pc, #92]	; (8007ab4 <mem_free+0x98>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	42ab      	cmp	r3, r5
 8007a5c:	d901      	bls.n	8007a62 <mem_free+0x46>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007a5e:	4b15      	ldr	r3, [pc, #84]	; (8007ab4 <mem_free+0x98>)
 8007a60:	601d      	str	r5, [r3, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007a62:	4628      	mov	r0, r5
 8007a64:	f7ff ff3a 	bl	80078dc <plug_holes>
 8007a68:	e00e      	b.n	8007a88 <mem_free+0x6c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007a6a:	4b13      	ldr	r3, [pc, #76]	; (8007ab8 <mem_free+0x9c>)
 8007a6c:	f240 2273 	movw	r2, #627	; 0x273
 8007a70:	4912      	ldr	r1, [pc, #72]	; (8007abc <mem_free+0xa0>)
 8007a72:	4813      	ldr	r0, [pc, #76]	; (8007ac0 <mem_free+0xa4>)
 8007a74:	f00c fdbe 	bl	80145f4 <iprintf>
 8007a78:	e006      	b.n	8007a88 <mem_free+0x6c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007a7a:	4b0f      	ldr	r3, [pc, #60]	; (8007ab8 <mem_free+0x9c>)
 8007a7c:	f240 227f 	movw	r2, #639	; 0x27f
 8007a80:	4910      	ldr	r1, [pc, #64]	; (8007ac4 <mem_free+0xa8>)
 8007a82:	480f      	ldr	r0, [pc, #60]	; (8007ac0 <mem_free+0xa4>)
 8007a84:	f00c fdb6 	bl	80145f4 <iprintf>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007a88:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007a8a:	4b0b      	ldr	r3, [pc, #44]	; (8007ab8 <mem_free+0x9c>)
 8007a8c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007a90:	490d      	ldr	r1, [pc, #52]	; (8007ac8 <mem_free+0xac>)
 8007a92:	480b      	ldr	r0, [pc, #44]	; (8007ac0 <mem_free+0xa4>)
 8007a94:	f00c fdae 	bl	80145f4 <iprintf>
 8007a98:	e7f6      	b.n	8007a88 <mem_free+0x6c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007a9a:	4b07      	ldr	r3, [pc, #28]	; (8007ab8 <mem_free+0x9c>)
 8007a9c:	f240 2295 	movw	r2, #661	; 0x295
 8007aa0:	490a      	ldr	r1, [pc, #40]	; (8007acc <mem_free+0xb0>)
 8007aa2:	4807      	ldr	r0, [pc, #28]	; (8007ac0 <mem_free+0xa4>)
 8007aa4:	f00c fda6 	bl	80145f4 <iprintf>
 8007aa8:	e7ee      	b.n	8007a88 <mem_free+0x6c>
 8007aaa:	4770      	bx	lr
 8007aac:	200016f0 	.word	0x200016f0
 8007ab0:	200016f4 	.word	0x200016f4
 8007ab4:	200016ec 	.word	0x200016ec
 8007ab8:	08015f40 	.word	0x08015f40
 8007abc:	08015db8 	.word	0x08015db8
 8007ac0:	08015608 	.word	0x08015608
 8007ac4:	08015ddc 	.word	0x08015ddc
 8007ac8:	08015df8 	.word	0x08015df8
 8007acc:	08015e20 	.word	0x08015e20

08007ad0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ad4:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007ad6:	1ccc      	adds	r4, r1, #3
 8007ad8:	b2a4      	uxth	r4, r4
 8007ada:	f024 0403 	bic.w	r4, r4, #3
 8007ade:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8007ae0:	2c0b      	cmp	r4, #11
 8007ae2:	d904      	bls.n	8007aee <mem_trim+0x1e>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007ae4:	f5b4 6f48 	cmp.w	r4, #3200	; 0xc80
 8007ae8:	d902      	bls.n	8007af0 <mem_trim+0x20>
    return NULL;
 8007aea:	2500      	movs	r5, #0
 8007aec:	e099      	b.n	8007c22 <mem_trim+0x152>
    newsize = MIN_SIZE_ALIGNED;
 8007aee:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007af0:	428c      	cmp	r4, r1
 8007af2:	f0c0 8095 	bcc.w	8007c20 <mem_trim+0x150>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007af6:	4b4d      	ldr	r3, [pc, #308]	; (8007c2c <mem_trim+0x15c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	42ab      	cmp	r3, r5
 8007afc:	d803      	bhi.n	8007b06 <mem_trim+0x36>
 8007afe:	4b4c      	ldr	r3, [pc, #304]	; (8007c30 <mem_trim+0x160>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	42ab      	cmp	r3, r5
 8007b04:	d806      	bhi.n	8007b14 <mem_trim+0x44>
 8007b06:	4b4b      	ldr	r3, [pc, #300]	; (8007c34 <mem_trim+0x164>)
 8007b08:	f240 22d2 	movw	r2, #722	; 0x2d2
 8007b0c:	494a      	ldr	r1, [pc, #296]	; (8007c38 <mem_trim+0x168>)
 8007b0e:	484b      	ldr	r0, [pc, #300]	; (8007c3c <mem_trim+0x16c>)
 8007b10:	f00c fd70 	bl	80145f4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007b14:	4b45      	ldr	r3, [pc, #276]	; (8007c2c <mem_trim+0x15c>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	42ab      	cmp	r3, r5
 8007b1a:	f200 8082 	bhi.w	8007c22 <mem_trim+0x152>
 8007b1e:	4b44      	ldr	r3, [pc, #272]	; (8007c30 <mem_trim+0x160>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	42ab      	cmp	r3, r5
 8007b24:	d97d      	bls.n	8007c22 <mem_trim+0x152>
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007b26:	f1a5 0008 	sub.w	r0, r5, #8
 8007b2a:	f7ff fea1 	bl	8007870 <mem_to_ptr>
 8007b2e:	4606      	mov	r6, r0

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007b30:	f835 8c08 	ldrh.w	r8, [r5, #-8]
 8007b34:	eba8 0800 	sub.w	r8, r8, r0
 8007b38:	fa1f f888 	uxth.w	r8, r8
 8007b3c:	f1a8 0808 	sub.w	r8, r8, #8
 8007b40:	fa1f f888 	uxth.w	r8, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007b44:	4544      	cmp	r4, r8
 8007b46:	d829      	bhi.n	8007b9c <mem_trim+0xcc>
  if (newsize > size) {
 8007b48:	4544      	cmp	r4, r8
 8007b4a:	d86d      	bhi.n	8007c28 <mem_trim+0x158>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8007b4c:	d069      	beq.n	8007c22 <mem_trim+0x152>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007b4e:	f835 7c08 	ldrh.w	r7, [r5, #-8]
 8007b52:	4638      	mov	r0, r7
 8007b54:	f7ff fe86 	bl	8007864 <ptr_to_mem>
 8007b58:	4681      	mov	r9, r0
  if (mem2->used == 0) {
 8007b5a:	7903      	ldrb	r3, [r0, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d133      	bne.n	8007bc8 <mem_trim+0xf8>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007b60:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
 8007b64:	d022      	beq.n	8007bac <mem_trim+0xdc>
    /* remember the old next pointer */
    next = mem2->next;
 8007b66:	f8b9 7000 	ldrh.w	r7, [r9]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007b6a:	4434      	add	r4, r6
 8007b6c:	b2a4      	uxth	r4, r4
 8007b6e:	3408      	adds	r4, #8
 8007b70:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 8007b72:	4b33      	ldr	r3, [pc, #204]	; (8007c40 <mem_trim+0x170>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	454b      	cmp	r3, r9
 8007b78:	d020      	beq.n	8007bbc <mem_trim+0xec>
      lfree = ptr_to_mem(ptr2);
    }
    mem2 = ptr_to_mem(ptr2);
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f7ff fe72 	bl	8007864 <ptr_to_mem>
    mem2->used = 0;
 8007b80:	2300      	movs	r3, #0
 8007b82:	7103      	strb	r3, [r0, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007b84:	8007      	strh	r7, [r0, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007b86:	8046      	strh	r6, [r0, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007b88:	f825 4c08 	strh.w	r4, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007b8c:	8800      	ldrh	r0, [r0, #0]
 8007b8e:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
 8007b92:	d046      	beq.n	8007c22 <mem_trim+0x152>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007b94:	f7ff fe66 	bl	8007864 <ptr_to_mem>
 8007b98:	8044      	strh	r4, [r0, #2]
 8007b9a:	e042      	b.n	8007c22 <mem_trim+0x152>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007b9c:	4b25      	ldr	r3, [pc, #148]	; (8007c34 <mem_trim+0x164>)
 8007b9e:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007ba2:	4928      	ldr	r1, [pc, #160]	; (8007c44 <mem_trim+0x174>)
 8007ba4:	4825      	ldr	r0, [pc, #148]	; (8007c3c <mem_trim+0x16c>)
 8007ba6:	f00c fd25 	bl	80145f4 <iprintf>
 8007baa:	e7cd      	b.n	8007b48 <mem_trim+0x78>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007bac:	4b21      	ldr	r3, [pc, #132]	; (8007c34 <mem_trim+0x164>)
 8007bae:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007bb2:	4925      	ldr	r1, [pc, #148]	; (8007c48 <mem_trim+0x178>)
 8007bb4:	4821      	ldr	r0, [pc, #132]	; (8007c3c <mem_trim+0x16c>)
 8007bb6:	f00c fd1d 	bl	80145f4 <iprintf>
 8007bba:	e7d4      	b.n	8007b66 <mem_trim+0x96>
      lfree = ptr_to_mem(ptr2);
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f7ff fe51 	bl	8007864 <ptr_to_mem>
 8007bc2:	4b1f      	ldr	r3, [pc, #124]	; (8007c40 <mem_trim+0x170>)
 8007bc4:	6018      	str	r0, [r3, #0]
 8007bc6:	e7d8      	b.n	8007b7a <mem_trim+0xaa>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007bc8:	f104 0314 	add.w	r3, r4, #20
 8007bcc:	4543      	cmp	r3, r8
 8007bce:	d828      	bhi.n	8007c22 <mem_trim+0x152>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007bd0:	4434      	add	r4, r6
 8007bd2:	b2a4      	uxth	r4, r4
 8007bd4:	3408      	adds	r4, #8
 8007bd6:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007bd8:	f5b7 6f48 	cmp.w	r7, #3200	; 0xc80
 8007bdc:	d018      	beq.n	8007c10 <mem_trim+0x140>
    mem2 = ptr_to_mem(ptr2);
 8007bde:	4620      	mov	r0, r4
 8007be0:	f7ff fe40 	bl	8007864 <ptr_to_mem>
    if (mem2 < lfree) {
 8007be4:	4b16      	ldr	r3, [pc, #88]	; (8007c40 <mem_trim+0x170>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4283      	cmp	r3, r0
 8007bea:	d901      	bls.n	8007bf0 <mem_trim+0x120>
      lfree = mem2;
 8007bec:	4b14      	ldr	r3, [pc, #80]	; (8007c40 <mem_trim+0x170>)
 8007bee:	6018      	str	r0, [r3, #0]
    }
    mem2->used = 0;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	7103      	strb	r3, [r0, #4]
    mem2->next = mem->next;
 8007bf4:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 8007bf8:	8003      	strh	r3, [r0, #0]
    mem2->prev = ptr;
 8007bfa:	8046      	strh	r6, [r0, #2]
    mem->next = ptr2;
 8007bfc:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007c00:	8800      	ldrh	r0, [r0, #0]
 8007c02:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
 8007c06:	d00c      	beq.n	8007c22 <mem_trim+0x152>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007c08:	f7ff fe2c 	bl	8007864 <ptr_to_mem>
 8007c0c:	8044      	strh	r4, [r0, #2]
 8007c0e:	e008      	b.n	8007c22 <mem_trim+0x152>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007c10:	4b08      	ldr	r3, [pc, #32]	; (8007c34 <mem_trim+0x164>)
 8007c12:	f240 3216 	movw	r2, #790	; 0x316
 8007c16:	490c      	ldr	r1, [pc, #48]	; (8007c48 <mem_trim+0x178>)
 8007c18:	4808      	ldr	r0, [pc, #32]	; (8007c3c <mem_trim+0x16c>)
 8007c1a:	f00c fceb 	bl	80145f4 <iprintf>
 8007c1e:	e7de      	b.n	8007bde <mem_trim+0x10e>
    return NULL;
 8007c20:	2500      	movs	r5, #0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8007c22:	4628      	mov	r0, r5
 8007c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8007c28:	2500      	movs	r5, #0
 8007c2a:	e7fa      	b.n	8007c22 <mem_trim+0x152>
 8007c2c:	200016f0 	.word	0x200016f0
 8007c30:	200016f4 	.word	0x200016f4
 8007c34:	08015f40 	.word	0x08015f40
 8007c38:	08015ef4 	.word	0x08015ef4
 8007c3c:	08015608 	.word	0x08015608
 8007c40:	200016ec 	.word	0x200016ec
 8007c44:	08015f0c 	.word	0x08015f0c
 8007c48:	08015f2c 	.word	0x08015f2c

08007c4c <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	f000 809a 	beq.w	8007d86 <mem_malloc+0x13a>
{
 8007c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c56:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007c58:	1cc6      	adds	r6, r0, #3
 8007c5a:	b2b6      	uxth	r6, r6
 8007c5c:	f026 0603 	bic.w	r6, r6, #3
 8007c60:	b2b6      	uxth	r6, r6
  if (size < MIN_SIZE_ALIGNED) {
 8007c62:	2e0b      	cmp	r6, #11
 8007c64:	d904      	bls.n	8007c70 <mem_malloc+0x24>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007c66:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
 8007c6a:	d902      	bls.n	8007c72 <mem_malloc+0x26>
    return NULL;
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	e088      	b.n	8007d82 <mem_malloc+0x136>
    size = MIN_SIZE_ALIGNED;
 8007c70:	260c      	movs	r6, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007c72:	429e      	cmp	r6, r3
 8007c74:	f0c0 8089 	bcc.w	8007d8a <mem_malloc+0x13e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007c78:	4b45      	ldr	r3, [pc, #276]	; (8007d90 <mem_malloc+0x144>)
 8007c7a:	6818      	ldr	r0, [r3, #0]
 8007c7c:	f7ff fdf8 	bl	8007870 <mem_to_ptr>
 8007c80:	4604      	mov	r4, r0
 8007c82:	e04c      	b.n	8007d1e <mem_malloc+0xd2>
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007c84:	4b43      	ldr	r3, [pc, #268]	; (8007d94 <mem_malloc+0x148>)
 8007c86:	f240 3287 	movw	r2, #903	; 0x387
 8007c8a:	4943      	ldr	r1, [pc, #268]	; (8007d98 <mem_malloc+0x14c>)
 8007c8c:	4843      	ldr	r0, [pc, #268]	; (8007d9c <mem_malloc+0x150>)
 8007c8e:	f00c fcb1 	bl	80145f4 <iprintf>
 8007c92:	e062      	b.n	8007d5a <mem_malloc+0x10e>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007c94:	2301      	movs	r3, #1
 8007c96:	7103      	strb	r3, [r0, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007c98:	4b3d      	ldr	r3, [pc, #244]	; (8007d90 <mem_malloc+0x144>)
 8007c9a:	6818      	ldr	r0, [r3, #0]
 8007c9c:	42a8      	cmp	r0, r5
 8007c9e:	d00f      	beq.n	8007cc0 <mem_malloc+0x74>
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007ca0:	442f      	add	r7, r5
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	4b3e      	ldr	r3, [pc, #248]	; (8007da0 <mem_malloc+0x154>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	429f      	cmp	r7, r3
 8007caa:	d81f      	bhi.n	8007cec <mem_malloc+0xa0>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007cac:	f015 0403 	ands.w	r4, r5, #3
 8007cb0:	d124      	bne.n	8007cfc <mem_malloc+0xb0>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007cb2:	bb5c      	cbnz	r4, 8007d0c <mem_malloc+0xc0>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007cb4:	f105 0008 	add.w	r0, r5, #8
 8007cb8:	e063      	b.n	8007d82 <mem_malloc+0x136>
            cur = ptr_to_mem(cur->next);
 8007cba:	8800      	ldrh	r0, [r0, #0]
 8007cbc:	f7ff fdd2 	bl	8007864 <ptr_to_mem>
          while (cur->used && cur != ram_end) {
 8007cc0:	7903      	ldrb	r3, [r0, #4]
 8007cc2:	b11b      	cbz	r3, 8007ccc <mem_malloc+0x80>
 8007cc4:	4a36      	ldr	r2, [pc, #216]	; (8007da0 <mem_malloc+0x154>)
 8007cc6:	6812      	ldr	r2, [r2, #0]
 8007cc8:	4282      	cmp	r2, r0
 8007cca:	d1f6      	bne.n	8007cba <mem_malloc+0x6e>
          lfree = cur;
 8007ccc:	4a30      	ldr	r2, [pc, #192]	; (8007d90 <mem_malloc+0x144>)
 8007cce:	6010      	str	r0, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007cd0:	4a33      	ldr	r2, [pc, #204]	; (8007da0 <mem_malloc+0x154>)
 8007cd2:	6812      	ldr	r2, [r2, #0]
 8007cd4:	4282      	cmp	r2, r0
 8007cd6:	d0e3      	beq.n	8007ca0 <mem_malloc+0x54>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d0e1      	beq.n	8007ca0 <mem_malloc+0x54>
 8007cdc:	4b2d      	ldr	r3, [pc, #180]	; (8007d94 <mem_malloc+0x148>)
 8007cde:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007ce2:	4930      	ldr	r1, [pc, #192]	; (8007da4 <mem_malloc+0x158>)
 8007ce4:	482d      	ldr	r0, [pc, #180]	; (8007d9c <mem_malloc+0x150>)
 8007ce6:	f00c fc85 	bl	80145f4 <iprintf>
 8007cea:	e7d9      	b.n	8007ca0 <mem_malloc+0x54>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007cec:	4b29      	ldr	r3, [pc, #164]	; (8007d94 <mem_malloc+0x148>)
 8007cee:	f240 32ba 	movw	r2, #954	; 0x3ba
 8007cf2:	492d      	ldr	r1, [pc, #180]	; (8007da8 <mem_malloc+0x15c>)
 8007cf4:	4829      	ldr	r0, [pc, #164]	; (8007d9c <mem_malloc+0x150>)
 8007cf6:	f00c fc7d 	bl	80145f4 <iprintf>
 8007cfa:	e7d7      	b.n	8007cac <mem_malloc+0x60>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007cfc:	4b25      	ldr	r3, [pc, #148]	; (8007d94 <mem_malloc+0x148>)
 8007cfe:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8007d02:	492a      	ldr	r1, [pc, #168]	; (8007dac <mem_malloc+0x160>)
 8007d04:	4825      	ldr	r0, [pc, #148]	; (8007d9c <mem_malloc+0x150>)
 8007d06:	f00c fc75 	bl	80145f4 <iprintf>
 8007d0a:	e7d2      	b.n	8007cb2 <mem_malloc+0x66>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007d0c:	4b21      	ldr	r3, [pc, #132]	; (8007d94 <mem_malloc+0x148>)
 8007d0e:	f240 32be 	movw	r2, #958	; 0x3be
 8007d12:	4927      	ldr	r1, [pc, #156]	; (8007db0 <mem_malloc+0x164>)
 8007d14:	4821      	ldr	r0, [pc, #132]	; (8007d9c <mem_malloc+0x150>)
 8007d16:	f00c fc6d 	bl	80145f4 <iprintf>
 8007d1a:	e7cb      	b.n	8007cb4 <mem_malloc+0x68>
         ptr = ptr_to_mem(ptr)->next) {
 8007d1c:	882c      	ldrh	r4, [r5, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007d1e:	46a0      	mov	r8, r4
 8007d20:	4637      	mov	r7, r6
 8007d22:	f5c6 6348 	rsb	r3, r6, #3200	; 0xc80
 8007d26:	429c      	cmp	r4, r3
 8007d28:	d22a      	bcs.n	8007d80 <mem_malloc+0x134>
      mem = ptr_to_mem(ptr);
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f7ff fd9a 	bl	8007864 <ptr_to_mem>
 8007d30:	4605      	mov	r5, r0
      if ((!mem->used) &&
 8007d32:	7903      	ldrb	r3, [r0, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1f1      	bne.n	8007d1c <mem_malloc+0xd0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007d38:	8803      	ldrh	r3, [r0, #0]
 8007d3a:	eba3 0308 	sub.w	r3, r3, r8
 8007d3e:	3b08      	subs	r3, #8
      if ((!mem->used) &&
 8007d40:	42bb      	cmp	r3, r7
 8007d42:	d3eb      	bcc.n	8007d1c <mem_malloc+0xd0>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007d44:	f107 0214 	add.w	r2, r7, #20
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d3a3      	bcc.n	8007c94 <mem_malloc+0x48>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007d4c:	4426      	add	r6, r4
 8007d4e:	b2b6      	uxth	r6, r6
 8007d50:	3608      	adds	r6, #8
 8007d52:	b2b6      	uxth	r6, r6
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007d54:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
 8007d58:	d094      	beq.n	8007c84 <mem_malloc+0x38>
          mem2 = ptr_to_mem(ptr2);
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f7ff fd82 	bl	8007864 <ptr_to_mem>
          mem2->used = 0;
 8007d60:	2300      	movs	r3, #0
 8007d62:	7103      	strb	r3, [r0, #4]
          mem2->next = mem->next;
 8007d64:	882b      	ldrh	r3, [r5, #0]
 8007d66:	8003      	strh	r3, [r0, #0]
          mem2->prev = ptr;
 8007d68:	8044      	strh	r4, [r0, #2]
          mem->next = ptr2;
 8007d6a:	802e      	strh	r6, [r5, #0]
          mem->used = 1;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	712b      	strb	r3, [r5, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007d70:	8800      	ldrh	r0, [r0, #0]
 8007d72:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
 8007d76:	d08f      	beq.n	8007c98 <mem_malloc+0x4c>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007d78:	f7ff fd74 	bl	8007864 <ptr_to_mem>
 8007d7c:	8046      	strh	r6, [r0, #2]
 8007d7e:	e78b      	b.n	8007c98 <mem_malloc+0x4c>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007d80:	2000      	movs	r0, #0
}
 8007d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return NULL;
 8007d86:	2000      	movs	r0, #0
}
 8007d88:	4770      	bx	lr
    return NULL;
 8007d8a:	2000      	movs	r0, #0
 8007d8c:	e7f9      	b.n	8007d82 <mem_malloc+0x136>
 8007d8e:	bf00      	nop
 8007d90:	200016ec 	.word	0x200016ec
 8007d94:	08015f40 	.word	0x08015f40
 8007d98:	08015f2c 	.word	0x08015f2c
 8007d9c:	08015608 	.word	0x08015608
 8007da0:	200016f4 	.word	0x200016f4
 8007da4:	08015e54 	.word	0x08015e54
 8007da8:	08015e70 	.word	0x08015e70
 8007dac:	08015ea0 	.word	0x08015ea0
 8007db0:	08015ed0 	.word	0x08015ed0

08007db4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007db4:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007db6:	68c3      	ldr	r3, [r0, #12]
 8007db8:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007dba:	b174      	cbz	r4, 8007dda <do_memp_malloc_pool+0x26>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007dbc:	6822      	ldr	r2, [r4, #0]
 8007dbe:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007dc0:	f014 0f03 	tst.w	r4, #3
 8007dc4:	d101      	bne.n	8007dca <do_memp_malloc_pool+0x16>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007dca:	4b05      	ldr	r3, [pc, #20]	; (8007de0 <do_memp_malloc_pool+0x2c>)
 8007dcc:	f240 1219 	movw	r2, #281	; 0x119
 8007dd0:	4904      	ldr	r1, [pc, #16]	; (8007de4 <do_memp_malloc_pool+0x30>)
 8007dd2:	4805      	ldr	r0, [pc, #20]	; (8007de8 <do_memp_malloc_pool+0x34>)
 8007dd4:	f00c fc0e 	bl	80145f4 <iprintf>
 8007dd8:	e7f5      	b.n	8007dc6 <do_memp_malloc_pool+0x12>
  return NULL;
 8007dda:	2400      	movs	r4, #0
 8007ddc:	e7f3      	b.n	8007dc6 <do_memp_malloc_pool+0x12>
 8007dde:	bf00      	nop
 8007de0:	0801600c 	.word	0x0801600c
 8007de4:	0801603c 	.word	0x0801603c
 8007de8:	08015608 	.word	0x08015608

08007dec <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4605      	mov	r5, r0
 8007df0:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007df2:	f011 0f03 	tst.w	r1, #3
 8007df6:	d105      	bne.n	8007e04 <do_memp_free_pool+0x18>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007df8:	68eb      	ldr	r3, [r5, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 8007dfe:	68eb      	ldr	r3, [r5, #12]
 8007e00:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8007e04:	4b03      	ldr	r3, [pc, #12]	; (8007e14 <do_memp_free_pool+0x28>)
 8007e06:	f240 126d 	movw	r2, #365	; 0x16d
 8007e0a:	4903      	ldr	r1, [pc, #12]	; (8007e18 <do_memp_free_pool+0x2c>)
 8007e0c:	4803      	ldr	r0, [pc, #12]	; (8007e1c <do_memp_free_pool+0x30>)
 8007e0e:	f00c fbf1 	bl	80145f4 <iprintf>
 8007e12:	e7f1      	b.n	8007df8 <do_memp_free_pool+0xc>
 8007e14:	0801600c 	.word	0x0801600c
 8007e18:	08015fec 	.word	0x08015fec
 8007e1c:	08015608 	.word	0x08015608

08007e20 <memp_init_pool>:
  *desc->tab = NULL;
 8007e20:	68c3      	ldr	r3, [r0, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007e26:	6883      	ldr	r3, [r0, #8]
 8007e28:	3303      	adds	r3, #3
 8007e2a:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8007e2e:	e007      	b.n	8007e40 <memp_init_pool+0x20>
    memp->next = *desc->tab;
 8007e30:	68c1      	ldr	r1, [r0, #12]
 8007e32:	6809      	ldr	r1, [r1, #0]
 8007e34:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8007e36:	68c1      	ldr	r1, [r0, #12]
 8007e38:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007e3a:	8881      	ldrh	r1, [r0, #4]
 8007e3c:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 8007e3e:	3201      	adds	r2, #1
 8007e40:	88c1      	ldrh	r1, [r0, #6]
 8007e42:	4291      	cmp	r1, r2
 8007e44:	dcf4      	bgt.n	8007e30 <memp_init_pool+0x10>
}
 8007e46:	4770      	bx	lr

08007e48 <memp_init>:
{
 8007e48:	b510      	push	{r4, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007e4a:	2400      	movs	r4, #0
 8007e4c:	e006      	b.n	8007e5c <memp_init+0x14>
    memp_init_pool(memp_pools[i]);
 8007e4e:	4b05      	ldr	r3, [pc, #20]	; (8007e64 <memp_init+0x1c>)
 8007e50:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007e54:	f7ff ffe4 	bl	8007e20 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007e58:	3401      	adds	r4, #1
 8007e5a:	b2a4      	uxth	r4, r4
 8007e5c:	2c0c      	cmp	r4, #12
 8007e5e:	d9f6      	bls.n	8007e4e <memp_init+0x6>
}
 8007e60:	bd10      	pop	{r4, pc}
 8007e62:	bf00      	nop
 8007e64:	0801616c 	.word	0x0801616c

08007e68 <memp_malloc>:
{
 8007e68:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007e6a:	280c      	cmp	r0, #12
 8007e6c:	d805      	bhi.n	8007e7a <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007e6e:	4b07      	ldr	r3, [pc, #28]	; (8007e8c <memp_malloc+0x24>)
 8007e70:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007e74:	f7ff ff9e 	bl	8007db4 <do_memp_malloc_pool>
}
 8007e78:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007e7a:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <memp_malloc+0x28>)
 8007e7c:	f240 1257 	movw	r2, #343	; 0x157
 8007e80:	4904      	ldr	r1, [pc, #16]	; (8007e94 <memp_malloc+0x2c>)
 8007e82:	4805      	ldr	r0, [pc, #20]	; (8007e98 <memp_malloc+0x30>)
 8007e84:	f00c fbb6 	bl	80145f4 <iprintf>
 8007e88:	2000      	movs	r0, #0
 8007e8a:	e7f5      	b.n	8007e78 <memp_malloc+0x10>
 8007e8c:	0801616c 	.word	0x0801616c
 8007e90:	0801600c 	.word	0x0801600c
 8007e94:	0801614c 	.word	0x0801614c
 8007e98:	08015608 	.word	0x08015608

08007e9c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007e9c:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007e9e:	280c      	cmp	r0, #12
 8007ea0:	d806      	bhi.n	8007eb0 <memp_free+0x14>

  if (mem == NULL) {
 8007ea2:	b121      	cbz	r1, 8007eae <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007ea4:	4b06      	ldr	r3, [pc, #24]	; (8007ec0 <memp_free+0x24>)
 8007ea6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007eaa:	f7ff ff9f 	bl	8007dec <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007eae:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007eb0:	4b04      	ldr	r3, [pc, #16]	; (8007ec4 <memp_free+0x28>)
 8007eb2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007eb6:	4904      	ldr	r1, [pc, #16]	; (8007ec8 <memp_free+0x2c>)
 8007eb8:	4804      	ldr	r0, [pc, #16]	; (8007ecc <memp_free+0x30>)
 8007eba:	f00c fb9b 	bl	80145f4 <iprintf>
 8007ebe:	e7f6      	b.n	8007eae <memp_free+0x12>
 8007ec0:	0801616c 	.word	0x0801616c
 8007ec4:	0801600c 	.word	0x0801600c
 8007ec8:	08016130 	.word	0x08016130
 8007ecc:	08015608 	.word	0x08015608

08007ed0 <netif_do_set_netmask>:

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007ed0:	680b      	ldr	r3, [r1, #0]
 8007ed2:	6942      	ldr	r2, [r0, #20]
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d008      	beq.n	8007eea <netif_do_set_netmask+0x1a>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007ed8:	b129      	cbz	r1, 8007ee6 <netif_do_set_netmask+0x16>
 8007eda:	6143      	str	r3, [r0, #20]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
 8007edc:	2300      	movs	r3, #0
 8007ede:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007ee2:	2001      	movs	r0, #1
 8007ee4:	4770      	bx	lr
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	e7f7      	b.n	8007eda <netif_do_set_netmask+0xa>
  }
  return 0; /* netmask unchanged */
 8007eea:	2000      	movs	r0, #0
}
 8007eec:	4770      	bx	lr

08007eee <netif_do_set_gw>:

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007eee:	680b      	ldr	r3, [r1, #0]
 8007ef0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d008      	beq.n	8007f08 <netif_do_set_gw+0x1a>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007ef6:	b129      	cbz	r1, 8007f04 <netif_do_set_gw+0x16>
 8007ef8:	6283      	str	r3, [r0, #40]	; 0x28
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
 8007efa:	2300      	movs	r3, #0
 8007efc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007f00:	2001      	movs	r0, #1
 8007f02:	4770      	bx	lr
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007f04:	2300      	movs	r3, #0
 8007f06:	e7f7      	b.n	8007ef8 <netif_do_set_gw+0xa>
  }
  return 0; /* gateway unchanged */
 8007f08:	2000      	movs	r0, #0
}
 8007f0a:	4770      	bx	lr

08007f0c <netif_null_output_ip6>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8007f0c:	f06f 000b 	mvn.w	r0, #11
 8007f10:	4770      	bx	lr

08007f12 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8007f12:	f06f 000b 	mvn.w	r0, #11
 8007f16:	4770      	bx	lr

08007f18 <netif_do_ip_addr_changed>:
{
 8007f18:	b538      	push	{r3, r4, r5, lr}
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	460d      	mov	r5, r1
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007f1e:	f001 fb53 	bl	80095c8 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007f22:	4629      	mov	r1, r5
 8007f24:	4620      	mov	r0, r4
 8007f26:	f005 fdc5 	bl	800dab4 <udp_netif_ip_addr_changed>
}
 8007f2a:	bd38      	pop	{r3, r4, r5, pc}

08007f2c <netif_issue_reports>:
{
 8007f2c:	b538      	push	{r3, r4, r5, lr}
 8007f2e:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007f30:	4604      	mov	r4, r0
 8007f32:	b130      	cbz	r0, 8007f42 <netif_issue_reports+0x16>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007f34:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 8007f38:	f003 0205 	and.w	r2, r3, #5
 8007f3c:	2a05      	cmp	r2, #5
 8007f3e:	d008      	beq.n	8007f52 <netif_issue_reports+0x26>
}
 8007f40:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007f42:	4b12      	ldr	r3, [pc, #72]	; (8007f8c <netif_issue_reports+0x60>)
 8007f44:	f240 326d 	movw	r2, #877	; 0x36d
 8007f48:	4911      	ldr	r1, [pc, #68]	; (8007f90 <netif_issue_reports+0x64>)
 8007f4a:	4812      	ldr	r0, [pc, #72]	; (8007f94 <netif_issue_reports+0x68>)
 8007f4c:	f00c fb52 	bl	80145f4 <iprintf>
 8007f50:	e7f0      	b.n	8007f34 <netif_issue_reports+0x8>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007f52:	f015 0f01 	tst.w	r5, #1
 8007f56:	d009      	beq.n	8007f6c <netif_issue_reports+0x40>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007f58:	6822      	ldr	r2, [r4, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007f5a:	b13a      	cbz	r2, 8007f6c <netif_issue_reports+0x40>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007f5c:	f013 0f08 	tst.w	r3, #8
 8007f60:	d10b      	bne.n	8007f7a <netif_issue_reports+0x4e>
    if (netif->flags & NETIF_FLAG_IGMP) {
 8007f62:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 8007f66:	f013 0f20 	tst.w	r3, #32
 8007f6a:	d10b      	bne.n	8007f84 <netif_issue_reports+0x58>
  if (report_type & NETIF_REPORT_TYPE_IPV6) {
 8007f6c:	f015 0f02 	tst.w	r5, #2
 8007f70:	d0e6      	beq.n	8007f40 <netif_issue_reports+0x14>
    mld6_report_groups(netif);
 8007f72:	4620      	mov	r0, r4
 8007f74:	f00a f8e0 	bl	8012138 <mld6_report_groups>
 8007f78:	e7e2      	b.n	8007f40 <netif_issue_reports+0x14>
      etharp_gratuitous(netif);
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	f007 fb33 	bl	800f5e8 <etharp_request>
 8007f82:	e7ee      	b.n	8007f62 <netif_issue_reports+0x36>
      igmp_report_groups(netif);
 8007f84:	4620      	mov	r0, r4
 8007f86:	f007 ff2b 	bl	800fde0 <igmp_report_groups>
 8007f8a:	e7ef      	b.n	8007f6c <netif_issue_reports+0x40>
 8007f8c:	08016334 	.word	0x08016334
 8007f90:	08016368 	.word	0x08016368
 8007f94:	08015608 	.word	0x08015608

08007f98 <netif_do_set_ipaddr>:
{
 8007f98:	b570      	push	{r4, r5, r6, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007fa0:	460e      	mov	r6, r1
 8007fa2:	b319      	cbz	r1, 8007fec <netif_do_set_ipaddr+0x54>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007fa4:	b355      	cbz	r5, 8007ffc <netif_do_set_ipaddr+0x64>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007fa6:	6832      	ldr	r2, [r6, #0]
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d039      	beq.n	8008022 <netif_do_set_ipaddr+0x8a>
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007fae:	9201      	str	r2, [sp, #4]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f88d 3014 	strb.w	r3, [sp, #20]
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007fb6:	7c23      	ldrb	r3, [r4, #16]
 8007fb8:	742b      	strb	r3, [r5, #16]
 8007fba:	7c23      	ldrb	r3, [r4, #16]
 8007fbc:	2b06      	cmp	r3, #6
 8007fbe:	d025      	beq.n	800800c <netif_do_set_ipaddr+0x74>
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	602b      	str	r3, [r5, #0]
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	60eb      	str	r3, [r5, #12]
 8007fc8:	60ab      	str	r3, [r5, #8]
 8007fca:	606b      	str	r3, [r5, #4]
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007fcc:	a901      	add	r1, sp, #4
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f7ff ffa2 	bl	8007f18 <netif_do_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007fd4:	b31e      	cbz	r6, 800801e <netif_do_set_ipaddr+0x86>
 8007fd6:	6833      	ldr	r3, [r6, #0]
 8007fd8:	6023      	str	r3, [r4, #0]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
 8007fda:	2300      	movs	r3, #0
 8007fdc:	7423      	strb	r3, [r4, #16]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007fde:	2101      	movs	r1, #1
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f7ff ffa3 	bl	8007f2c <netif_issue_reports>
    return 1; /* address changed */
 8007fe6:	2001      	movs	r0, #1
}
 8007fe8:	b006      	add	sp, #24
 8007fea:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007fec:	4b0e      	ldr	r3, [pc, #56]	; (8008028 <netif_do_set_ipaddr+0x90>)
 8007fee:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007ff2:	490e      	ldr	r1, [pc, #56]	; (800802c <netif_do_set_ipaddr+0x94>)
 8007ff4:	480e      	ldr	r0, [pc, #56]	; (8008030 <netif_do_set_ipaddr+0x98>)
 8007ff6:	f00c fafd 	bl	80145f4 <iprintf>
 8007ffa:	e7d3      	b.n	8007fa4 <netif_do_set_ipaddr+0xc>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007ffc:	4b0a      	ldr	r3, [pc, #40]	; (8008028 <netif_do_set_ipaddr+0x90>)
 8007ffe:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008002:	490a      	ldr	r1, [pc, #40]	; (800802c <netif_do_set_ipaddr+0x94>)
 8008004:	480a      	ldr	r0, [pc, #40]	; (8008030 <netif_do_set_ipaddr+0x98>)
 8008006:	f00c faf5 	bl	80145f4 <iprintf>
 800800a:	e7cc      	b.n	8007fa6 <netif_do_set_ipaddr+0xe>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	602b      	str	r3, [r5, #0]
 8008010:	6863      	ldr	r3, [r4, #4]
 8008012:	606b      	str	r3, [r5, #4]
 8008014:	68a3      	ldr	r3, [r4, #8]
 8008016:	60ab      	str	r3, [r5, #8]
 8008018:	68e3      	ldr	r3, [r4, #12]
 800801a:	60eb      	str	r3, [r5, #12]
 800801c:	e7d6      	b.n	8007fcc <netif_do_set_ipaddr+0x34>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800801e:	2300      	movs	r3, #0
 8008020:	e7da      	b.n	8007fd8 <netif_do_set_ipaddr+0x40>
  return 0; /* address unchanged */
 8008022:	2000      	movs	r0, #0
 8008024:	e7e0      	b.n	8007fe8 <netif_do_set_ipaddr+0x50>
 8008026:	bf00      	nop
 8008028:	08016334 	.word	0x08016334
 800802c:	080162c0 	.word	0x080162c0
 8008030:	08015608 	.word	0x08015608

08008034 <netif_init>:
}
 8008034:	4770      	bx	lr
	...

08008038 <netif_set_addr>:
{
 8008038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800803c:	b086      	sub	sp, #24
 800803e:	4605      	mov	r5, r0
 8008040:	4617      	mov	r7, r2
 8008042:	461e      	mov	r6, r3
  if (ipaddr == NULL) {
 8008044:	460c      	mov	r4, r1
 8008046:	b1d9      	cbz	r1, 8008080 <netif_set_addr+0x48>
  if (netmask == NULL) {
 8008048:	b1e7      	cbz	r7, 8008084 <netif_set_addr+0x4c>
  if (gw == NULL) {
 800804a:	b1ee      	cbz	r6, 8008088 <netif_set_addr+0x50>
  remove = ip4_addr_isany(ipaddr);
 800804c:	b10c      	cbz	r4, 8008052 <netif_set_addr+0x1a>
 800804e:	6823      	ldr	r3, [r4, #0]
 8008050:	b9e3      	cbnz	r3, 800808c <netif_set_addr+0x54>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008052:	aa01      	add	r2, sp, #4
 8008054:	4621      	mov	r1, r4
 8008056:	4628      	mov	r0, r5
 8008058:	f7ff ff9e 	bl	8007f98 <netif_do_set_ipaddr>
 800805c:	f04f 0801 	mov.w	r8, #1
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008060:	2200      	movs	r2, #0
 8008062:	4639      	mov	r1, r7
 8008064:	4628      	mov	r0, r5
 8008066:	f7ff ff33 	bl	8007ed0 <netif_do_set_netmask>
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800806a:	2200      	movs	r2, #0
 800806c:	4631      	mov	r1, r6
 800806e:	4628      	mov	r0, r5
 8008070:	f7ff ff3d 	bl	8007eee <netif_do_set_gw>
  if (!remove) {
 8008074:	f1b8 0f00 	cmp.w	r8, #0
 8008078:	d00b      	beq.n	8008092 <netif_set_addr+0x5a>
}
 800807a:	b006      	add	sp, #24
 800807c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ipaddr = IP4_ADDR_ANY4;
 8008080:	4c07      	ldr	r4, [pc, #28]	; (80080a0 <netif_set_addr+0x68>)
 8008082:	e7e1      	b.n	8008048 <netif_set_addr+0x10>
    netmask = IP4_ADDR_ANY4;
 8008084:	4f06      	ldr	r7, [pc, #24]	; (80080a0 <netif_set_addr+0x68>)
 8008086:	e7e0      	b.n	800804a <netif_set_addr+0x12>
    gw = IP4_ADDR_ANY4;
 8008088:	4e05      	ldr	r6, [pc, #20]	; (80080a0 <netif_set_addr+0x68>)
 800808a:	e7df      	b.n	800804c <netif_set_addr+0x14>
  remove = ip4_addr_isany(ipaddr);
 800808c:	f04f 0800 	mov.w	r8, #0
 8008090:	e7e6      	b.n	8008060 <netif_set_addr+0x28>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008092:	aa01      	add	r2, sp, #4
 8008094:	4621      	mov	r1, r4
 8008096:	4628      	mov	r0, r5
 8008098:	f7ff ff7e 	bl	8007f98 <netif_do_set_ipaddr>
}
 800809c:	e7ed      	b.n	800807a <netif_set_addr+0x42>
 800809e:	bf00      	nop
 80080a0:	08018250 	.word	0x08018250

080080a4 <netif_add>:
{
 80080a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a8:	461f      	mov	r7, r3
 80080aa:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  if (netif_default != NULL) {
 80080ae:	4b5d      	ldr	r3, [pc, #372]	; (8008224 <netif_add+0x180>)
 80080b0:	f8d3 9000 	ldr.w	r9, [r3]
 80080b4:	f1b9 0f00 	cmp.w	r9, #0
 80080b8:	d12d      	bne.n	8008116 <netif_add+0x72>
 80080ba:	4604      	mov	r4, r0
 80080bc:	468b      	mov	fp, r1
 80080be:	4616      	mov	r6, r2
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80080c0:	2800      	cmp	r0, #0
 80080c2:	d031      	beq.n	8008128 <netif_add+0x84>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80080c4:	f1b8 0f00 	cmp.w	r8, #0
 80080c8:	d036      	beq.n	8008138 <netif_add+0x94>
  if (ipaddr == NULL) {
 80080ca:	2900      	cmp	r1, #0
 80080cc:	d03d      	beq.n	800814a <netif_add+0xa6>
  if (netmask == NULL) {
 80080ce:	2e00      	cmp	r6, #0
 80080d0:	d03e      	beq.n	8008150 <netif_add+0xac>
  if (gw == NULL) {
 80080d2:	2f00      	cmp	r7, #0
 80080d4:	d03e      	beq.n	8008154 <netif_add+0xb0>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80080d6:	2300      	movs	r3, #0
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	6063      	str	r3, [r4, #4]
 80080dc:	60a3      	str	r3, [r4, #8]
 80080de:	60e3      	str	r3, [r4, #12]
 80080e0:	b104      	cbz	r4, 80080e4 <netif_add+0x40>
 80080e2:	7423      	strb	r3, [r4, #16]
  ip_addr_set_zero_ip4(&netif->netmask);
 80080e4:	2300      	movs	r3, #0
 80080e6:	6163      	str	r3, [r4, #20]
 80080e8:	61a3      	str	r3, [r4, #24]
 80080ea:	61e3      	str	r3, [r4, #28]
 80080ec:	6223      	str	r3, [r4, #32]
 80080ee:	f114 0f14 	cmn.w	r4, #20
 80080f2:	d001      	beq.n	80080f8 <netif_add+0x54>
 80080f4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  ip_addr_set_zero_ip4(&netif->gw);
 80080f8:	2300      	movs	r3, #0
 80080fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80080fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080fe:	6323      	str	r3, [r4, #48]	; 0x30
 8008100:	6363      	str	r3, [r4, #52]	; 0x34
 8008102:	f114 0f28 	cmn.w	r4, #40	; 0x28
 8008106:	d001      	beq.n	800810c <netif_add+0x68>
 8008108:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  netif->output = netif_null_output_ip4;
 800810c:	4b46      	ldr	r3, [pc, #280]	; (8008228 <netif_add+0x184>)
 800810e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8008112:	2300      	movs	r3, #0
 8008114:	e02e      	b.n	8008174 <netif_add+0xd0>
    LWIP_ASSERT("single netif already set", 0);
 8008116:	4b45      	ldr	r3, [pc, #276]	; (800822c <netif_add+0x188>)
 8008118:	f44f 7291 	mov.w	r2, #290	; 0x122
 800811c:	4944      	ldr	r1, [pc, #272]	; (8008230 <netif_add+0x18c>)
 800811e:	4845      	ldr	r0, [pc, #276]	; (8008234 <netif_add+0x190>)
 8008120:	f00c fa68 	bl	80145f4 <iprintf>
    return NULL;
 8008124:	2400      	movs	r4, #0
 8008126:	e074      	b.n	8008212 <netif_add+0x16e>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008128:	4b40      	ldr	r3, [pc, #256]	; (800822c <netif_add+0x188>)
 800812a:	f240 1227 	movw	r2, #295	; 0x127
 800812e:	4942      	ldr	r1, [pc, #264]	; (8008238 <netif_add+0x194>)
 8008130:	4840      	ldr	r0, [pc, #256]	; (8008234 <netif_add+0x190>)
 8008132:	f00c fa5f 	bl	80145f4 <iprintf>
 8008136:	e06c      	b.n	8008212 <netif_add+0x16e>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008138:	4b3c      	ldr	r3, [pc, #240]	; (800822c <netif_add+0x188>)
 800813a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800813e:	493f      	ldr	r1, [pc, #252]	; (800823c <netif_add+0x198>)
 8008140:	483c      	ldr	r0, [pc, #240]	; (8008234 <netif_add+0x190>)
 8008142:	f00c fa57 	bl	80145f4 <iprintf>
 8008146:	464c      	mov	r4, r9
 8008148:	e063      	b.n	8008212 <netif_add+0x16e>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800814a:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 8008240 <netif_add+0x19c>
 800814e:	e7be      	b.n	80080ce <netif_add+0x2a>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008150:	4e3b      	ldr	r6, [pc, #236]	; (8008240 <netif_add+0x19c>)
 8008152:	e7be      	b.n	80080d2 <netif_add+0x2e>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008154:	4f3a      	ldr	r7, [pc, #232]	; (8008240 <netif_add+0x19c>)
 8008156:	e7be      	b.n	80080d6 <netif_add+0x32>
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
 8008158:	1860      	adds	r0, r4, r1
 800815a:	2200      	movs	r2, #0
 800815c:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
    netif->ip6_addr_valid_life[i] = IP6_ADDR_LIFE_STATIC;
 8008160:	f101 001e 	add.w	r0, r1, #30
 8008164:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8008168:	6042      	str	r2, [r0, #4]
    netif->ip6_addr_pref_life[i] = IP6_ADDR_LIFE_STATIC;
 800816a:	3122      	adds	r1, #34	; 0x22
 800816c:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8008170:	3301      	adds	r3, #1
 8008172:	b25b      	sxtb	r3, r3
 8008174:	2b02      	cmp	r3, #2
 8008176:	dc18      	bgt.n	80081aa <netif_add+0x106>
    ip_addr_set_zero_ip6(&netif->ip6_addr[i]);
 8008178:	4619      	mov	r1, r3
 800817a:	0098      	lsls	r0, r3, #2
 800817c:	eb00 0c03 	add.w	ip, r0, r3
 8008180:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8008184:	4694      	mov	ip, r2
 8008186:	4422      	add	r2, r4
 8008188:	2500      	movs	r5, #0
 800818a:	63d5      	str	r5, [r2, #60]	; 0x3c
 800818c:	6415      	str	r5, [r2, #64]	; 0x40
 800818e:	6455      	str	r5, [r2, #68]	; 0x44
 8008190:	6495      	str	r5, [r2, #72]	; 0x48
 8008192:	4662      	mov	r2, ip
 8008194:	3238      	adds	r2, #56	; 0x38
 8008196:	4422      	add	r2, r4
 8008198:	f112 0f04 	cmn.w	r2, #4
 800819c:	d0dc      	beq.n	8008158 <netif_add+0xb4>
 800819e:	4662      	mov	r2, ip
 80081a0:	4422      	add	r2, r4
 80081a2:	2006      	movs	r0, #6
 80081a4:	f882 004c 	strb.w	r0, [r2, #76]	; 0x4c
 80081a8:	e7d6      	b.n	8008158 <netif_add+0xb4>
  netif->output_ip6 = netif_null_output_ip6;
 80081aa:	4b26      	ldr	r3, [pc, #152]	; (8008244 <netif_add+0x1a0>)
 80081ac:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
  netif->mtu = 0;
 80081b0:	f04f 0a00 	mov.w	sl, #0
 80081b4:	f8a4 a0b8 	strh.w	sl, [r4, #184]	; 0xb8
  netif->flags = 0;
 80081b8:	f884 a0c3 	strb.w	sl, [r4, #195]	; 0xc3
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80081bc:	f8c4 a0ac 	str.w	sl, [r4, #172]	; 0xac
 80081c0:	f8c4 a0b0 	str.w	sl, [r4, #176]	; 0xb0
 80081c4:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
  netif->ip6_autoconfig_enabled = 0;
 80081c8:	f884 a0c7 	strb.w	sl, [r4, #199]	; 0xc7
  nd6_restart_netif(netif);
 80081cc:	4620      	mov	r0, r4
 80081ce:	f00c f8e5 	bl	801439c <nd6_restart_netif>
  netif->link_callback = NULL;
 80081d2:	f8c4 a0a4 	str.w	sl, [r4, #164]	; 0xa4
  netif->igmp_mac_filter = NULL;
 80081d6:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
  netif->mld_mac_filter = NULL;
 80081da:	f8c4 a0d0 	str.w	sl, [r4, #208]	; 0xd0
  netif->state = state;
 80081de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
  netif->num = netif_num;
 80081e4:	f884 a0c6 	strb.w	sl, [r4, #198]	; 0xc6
  netif->input = input;
 80081e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081ea:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  netif_set_addr(netif, ipaddr, netmask, gw);
 80081ee:	463b      	mov	r3, r7
 80081f0:	4632      	mov	r2, r6
 80081f2:	4659      	mov	r1, fp
 80081f4:	4620      	mov	r0, r4
 80081f6:	f7ff ff1f 	bl	8008038 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80081fa:	4620      	mov	r0, r4
 80081fc:	47c0      	blx	r8
 80081fe:	b978      	cbnz	r0, 8008220 <netif_add+0x17c>
  netif->mtu6 = netif->mtu;
 8008200:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
 8008204:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
  if (netif->flags & NETIF_FLAG_IGMP) {
 8008208:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 800820c:	f013 0f20 	tst.w	r3, #32
 8008210:	d102      	bne.n	8008218 <netif_add+0x174>
}
 8008212:	4620      	mov	r0, r4
 8008214:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    igmp_start(netif);
 8008218:	4620      	mov	r0, r4
 800821a:	f007 fe41 	bl	800fea0 <igmp_start>
 800821e:	e7f8      	b.n	8008212 <netif_add+0x16e>
    return NULL;
 8008220:	464c      	mov	r4, r9
 8008222:	e7f6      	b.n	8008212 <netif_add+0x16e>
 8008224:	20008c38 	.word	0x20008c38
 8008228:	08007f13 	.word	0x08007f13
 800822c:	08016334 	.word	0x08016334
 8008230:	08016230 	.word	0x08016230
 8008234:	08015608 	.word	0x08015608
 8008238:	0801624c 	.word	0x0801624c
 800823c:	08016268 	.word	0x08016268
 8008240:	08018250 	.word	0x08018250
 8008244:	08007f0d 	.word	0x08007f0d

08008248 <netif_set_default>:
  netif_default = netif;
 8008248:	4b01      	ldr	r3, [pc, #4]	; (8008250 <netif_set_default+0x8>)
 800824a:	6018      	str	r0, [r3, #0]
}
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	20008c38 	.word	0x20008c38

08008254 <netif_set_up>:
{
 8008254:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008256:	b130      	cbz	r0, 8008266 <netif_set_up+0x12>
 8008258:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800825a:	f890 30c3 	ldrb.w	r3, [r0, #195]	; 0xc3
 800825e:	f013 0f01 	tst.w	r3, #1
 8008262:	d008      	beq.n	8008276 <netif_set_up+0x22>
}
 8008264:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008266:	4b09      	ldr	r3, [pc, #36]	; (800828c <netif_set_up+0x38>)
 8008268:	f44f 7254 	mov.w	r2, #848	; 0x350
 800826c:	4908      	ldr	r1, [pc, #32]	; (8008290 <netif_set_up+0x3c>)
 800826e:	4809      	ldr	r0, [pc, #36]	; (8008294 <netif_set_up+0x40>)
 8008270:	f00c f9c0 	bl	80145f4 <iprintf>
 8008274:	e7f6      	b.n	8008264 <netif_set_up+0x10>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008276:	f043 0301 	orr.w	r3, r3, #1
 800827a:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800827e:	2103      	movs	r1, #3
 8008280:	f7ff fe54 	bl	8007f2c <netif_issue_reports>
    nd6_restart_netif(netif);
 8008284:	4620      	mov	r0, r4
 8008286:	f00c f889 	bl	801439c <nd6_restart_netif>
 800828a:	e7eb      	b.n	8008264 <netif_set_up+0x10>
 800828c:	08016334 	.word	0x08016334
 8008290:	080163ac 	.word	0x080163ac
 8008294:	08015608 	.word	0x08015608

08008298 <netif_set_down>:
{
 8008298:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800829a:	b180      	cbz	r0, 80082be <netif_set_down+0x26>
 800829c:	4604      	mov	r4, r0
  if (netif->flags & NETIF_FLAG_UP) {
 800829e:	f890 30c3 	ldrb.w	r3, [r0, #195]	; 0xc3
 80082a2:	f013 0f01 	tst.w	r3, #1
 80082a6:	d009      	beq.n	80082bc <netif_set_down+0x24>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80082a8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80082ac:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80082b0:	f013 0f08 	tst.w	r3, #8
 80082b4:	d10b      	bne.n	80082ce <netif_set_down+0x36>
    nd6_cleanup_netif(netif);
 80082b6:	4620      	mov	r0, r4
 80082b8:	f00b ffe0 	bl	801427c <nd6_cleanup_netif>
}
 80082bc:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80082be:	4b05      	ldr	r3, [pc, #20]	; (80082d4 <netif_set_down+0x3c>)
 80082c0:	f240 329b 	movw	r2, #923	; 0x39b
 80082c4:	4904      	ldr	r1, [pc, #16]	; (80082d8 <netif_set_down+0x40>)
 80082c6:	4805      	ldr	r0, [pc, #20]	; (80082dc <netif_set_down+0x44>)
 80082c8:	f00c f994 	bl	80145f4 <iprintf>
 80082cc:	e7f6      	b.n	80082bc <netif_set_down+0x24>
      etharp_cleanup_netif(netif);
 80082ce:	f007 f90b 	bl	800f4e8 <etharp_cleanup_netif>
 80082d2:	e7f0      	b.n	80082b6 <netif_set_down+0x1e>
 80082d4:	08016334 	.word	0x08016334
 80082d8:	0801638c 	.word	0x0801638c
 80082dc:	08015608 	.word	0x08015608

080082e0 <netif_set_link_callback>:
  if (netif) {
 80082e0:	b108      	cbz	r0, 80082e6 <netif_set_link_callback+0x6>
    netif->link_callback = link_callback;
 80082e2:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
}
 80082e6:	4770      	bx	lr

080082e8 <netif_ip6_addr_set_state>:
{
 80082e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ec:	460c      	mov	r4, r1
 80082ee:	4617      	mov	r7, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80082f0:	4606      	mov	r6, r0
 80082f2:	b1e0      	cbz	r0, 800832e <netif_ip6_addr_set_state+0x46>
  LWIP_ASSERT("invalid index", addr_idx < LWIP_IPV6_NUM_ADDRESSES);
 80082f4:	2c02      	cmp	r4, #2
 80082f6:	dc22      	bgt.n	800833e <netif_ip6_addr_set_state+0x56>
  old_state = netif_ip6_addr_state(netif, addr_idx);
 80082f8:	1933      	adds	r3, r6, r4
 80082fa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
  if (old_state != state) {
 80082fe:	42bb      	cmp	r3, r7
 8008300:	d013      	beq.n	800832a <netif_ip6_addr_set_state+0x42>
    u8_t old_valid = old_state & IP6_ADDR_VALID;
 8008302:	f003 0510 	and.w	r5, r3, #16
    u8_t new_valid = state & IP6_ADDR_VALID;
 8008306:	f007 0810 	and.w	r8, r7, #16
    if (netif->flags & NETIF_FLAG_MLD6) {
 800830a:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
 800830e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008312:	d11c      	bne.n	800834e <netif_ip6_addr_set_state+0x66>
    if (old_valid && !new_valid) {
 8008314:	b115      	cbz	r5, 800831c <netif_ip6_addr_set_state+0x34>
 8008316:	f1b8 0f00 	cmp.w	r8, #0
 800831a:	d01e      	beq.n	800835a <netif_ip6_addr_set_state+0x72>
    netif->ip6_addr_state[addr_idx] = state;
 800831c:	4434      	add	r4, r6
 800831e:	f884 7078 	strb.w	r7, [r4, #120]	; 0x78
    if (!old_valid && new_valid) {
 8008322:	b915      	cbnz	r5, 800832a <netif_ip6_addr_set_state+0x42>
 8008324:	f1b8 0f00 	cmp.w	r8, #0
 8008328:	d121      	bne.n	800836e <netif_ip6_addr_set_state+0x86>
}
 800832a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800832e:	4b12      	ldr	r3, [pc, #72]	; (8008378 <netif_ip6_addr_set_state+0x90>)
 8008330:	f240 5275 	movw	r2, #1397	; 0x575
 8008334:	4911      	ldr	r1, [pc, #68]	; (800837c <netif_ip6_addr_set_state+0x94>)
 8008336:	4812      	ldr	r0, [pc, #72]	; (8008380 <netif_ip6_addr_set_state+0x98>)
 8008338:	f00c f95c 	bl	80145f4 <iprintf>
 800833c:	e7da      	b.n	80082f4 <netif_ip6_addr_set_state+0xc>
  LWIP_ASSERT("invalid index", addr_idx < LWIP_IPV6_NUM_ADDRESSES);
 800833e:	4b0e      	ldr	r3, [pc, #56]	; (8008378 <netif_ip6_addr_set_state+0x90>)
 8008340:	f240 5276 	movw	r2, #1398	; 0x576
 8008344:	490f      	ldr	r1, [pc, #60]	; (8008384 <netif_ip6_addr_set_state+0x9c>)
 8008346:	480e      	ldr	r0, [pc, #56]	; (8008380 <netif_ip6_addr_set_state+0x98>)
 8008348:	f00c f954 	bl	80145f4 <iprintf>
 800834c:	e7d4      	b.n	80082f8 <netif_ip6_addr_set_state+0x10>
      nd6_adjust_mld_membership(netif, addr_idx, state);
 800834e:	463a      	mov	r2, r7
 8008350:	4621      	mov	r1, r4
 8008352:	4630      	mov	r0, r6
 8008354:	f00b ffe6 	bl	8014324 <nd6_adjust_mld_membership>
 8008358:	e7dc      	b.n	8008314 <netif_ip6_addr_set_state+0x2c>
      netif_do_ip_addr_changed(netif_ip_addr6(netif, addr_idx), NULL);
 800835a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800835e:	0098      	lsls	r0, r3, #2
 8008360:	3038      	adds	r0, #56	; 0x38
 8008362:	4430      	add	r0, r6
 8008364:	2100      	movs	r1, #0
 8008366:	3004      	adds	r0, #4
 8008368:	f7ff fdd6 	bl	8007f18 <netif_do_ip_addr_changed>
 800836c:	e7d6      	b.n	800831c <netif_ip6_addr_set_state+0x34>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV6);
 800836e:	2102      	movs	r1, #2
 8008370:	4630      	mov	r0, r6
 8008372:	f7ff fddb 	bl	8007f2c <netif_issue_reports>
}
 8008376:	e7d8      	b.n	800832a <netif_ip6_addr_set_state+0x42>
 8008378:	08016334 	.word	0x08016334
 800837c:	080155f8 	.word	0x080155f8
 8008380:	08015608 	.word	0x08015608
 8008384:	08016324 	.word	0x08016324

08008388 <netif_get_ip6_addr_match>:
{
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_get_ip6_addr_match: invalid netif", netif != NULL);
 800838c:	4604      	mov	r4, r0
 800838e:	b110      	cbz	r0, 8008396 <netif_get_ip6_addr_match+0xe>
  LWIP_ASSERT("netif_get_ip6_addr_match: invalid ip6addr", ip6addr != NULL);
 8008390:	b14d      	cbz	r5, 80083a6 <netif_get_ip6_addr_match+0x1e>
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8008392:	2000      	movs	r0, #0
 8008394:	e011      	b.n	80083ba <netif_get_ip6_addr_match+0x32>
  LWIP_ASSERT("netif_get_ip6_addr_match: invalid netif", netif != NULL);
 8008396:	4b1e      	ldr	r3, [pc, #120]	; (8008410 <netif_get_ip6_addr_match+0x88>)
 8008398:	f240 52be 	movw	r2, #1470	; 0x5be
 800839c:	491d      	ldr	r1, [pc, #116]	; (8008414 <netif_get_ip6_addr_match+0x8c>)
 800839e:	481e      	ldr	r0, [pc, #120]	; (8008418 <netif_get_ip6_addr_match+0x90>)
 80083a0:	f00c f928 	bl	80145f4 <iprintf>
 80083a4:	e7f4      	b.n	8008390 <netif_get_ip6_addr_match+0x8>
  LWIP_ASSERT("netif_get_ip6_addr_match: invalid ip6addr", ip6addr != NULL);
 80083a6:	4b1a      	ldr	r3, [pc, #104]	; (8008410 <netif_get_ip6_addr_match+0x88>)
 80083a8:	f240 52bf 	movw	r2, #1471	; 0x5bf
 80083ac:	491b      	ldr	r1, [pc, #108]	; (800841c <netif_get_ip6_addr_match+0x94>)
 80083ae:	481a      	ldr	r0, [pc, #104]	; (8008418 <netif_get_ip6_addr_match+0x90>)
 80083b0:	f00c f920 	bl	80145f4 <iprintf>
 80083b4:	e7ed      	b.n	8008392 <netif_get_ip6_addr_match+0xa>
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80083b6:	3001      	adds	r0, #1
 80083b8:	b240      	sxtb	r0, r0
 80083ba:	2802      	cmp	r0, #2
 80083bc:	dc25      	bgt.n	800840a <netif_get_ip6_addr_match+0x82>
    if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i)) &&
 80083be:	1823      	adds	r3, r4, r0
 80083c0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d0f6      	beq.n	80083b6 <netif_get_ip6_addr_match+0x2e>
        ip6_addr_cmp_zoneless(netif_ip6_addr(netif, i), ip6addr)) {
 80083c8:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80083cc:	008b      	lsls	r3, r1, #2
 80083ce:	4423      	add	r3, r4
 80083d0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80083d2:	682b      	ldr	r3, [r5, #0]
    if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i)) &&
 80083d4:	4299      	cmp	r1, r3
 80083d6:	d1ee      	bne.n	80083b6 <netif_get_ip6_addr_match+0x2e>
        ip6_addr_cmp_zoneless(netif_ip6_addr(netif, i), ip6addr)) {
 80083d8:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80083dc:	008b      	lsls	r3, r1, #2
 80083de:	4423      	add	r3, r4
 80083e0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80083e2:	686b      	ldr	r3, [r5, #4]
 80083e4:	4299      	cmp	r1, r3
 80083e6:	d1e6      	bne.n	80083b6 <netif_get_ip6_addr_match+0x2e>
 80083e8:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80083ec:	008b      	lsls	r3, r1, #2
 80083ee:	4423      	add	r3, r4
 80083f0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80083f2:	68ab      	ldr	r3, [r5, #8]
 80083f4:	4299      	cmp	r1, r3
 80083f6:	d1de      	bne.n	80083b6 <netif_get_ip6_addr_match+0x2e>
 80083f8:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80083fc:	0093      	lsls	r3, r2, #2
 80083fe:	4423      	add	r3, r4
 8008400:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008402:	68eb      	ldr	r3, [r5, #12]
 8008404:	429a      	cmp	r2, r3
 8008406:	d1d6      	bne.n	80083b6 <netif_get_ip6_addr_match+0x2e>
 8008408:	e001      	b.n	800840e <netif_get_ip6_addr_match+0x86>
  return -1;
 800840a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	08016334 	.word	0x08016334
 8008414:	080162d0 	.word	0x080162d0
 8008418:	08015608 	.word	0x08015608
 800841c:	080162f8 	.word	0x080162f8

08008420 <netif_create_ip6_linklocal_address>:
{
 8008420:	b570      	push	{r4, r5, r6, lr}
 8008422:	460c      	mov	r4, r1
  LWIP_ASSERT("netif_create_ip6_linklocal_address: invalid netif", netif != NULL);
 8008424:	4605      	mov	r5, r0
 8008426:	b150      	cbz	r0, 800843e <netif_create_ip6_linklocal_address+0x1e>
  ip_2_ip6(&netif->ip6_addr[0])->addr[0] = PP_HTONL(0xfe800000ul);
 8008428:	f248 03fe 	movw	r3, #33022	; 0x80fe
 800842c:	63eb      	str	r3, [r5, #60]	; 0x3c
  ip_2_ip6(&netif->ip6_addr[0])->addr[1] = 0;
 800842e:	2300      	movs	r3, #0
 8008430:	642b      	str	r3, [r5, #64]	; 0x40
  if (from_mac_48bit) {
 8008432:	b964      	cbnz	r4, 800844e <netif_create_ip6_linklocal_address+0x2e>
    ip_2_ip6(&netif->ip6_addr[0])->addr[2] = 0;
 8008434:	2300      	movs	r3, #0
 8008436:	646b      	str	r3, [r5, #68]	; 0x44
    ip_2_ip6(&netif->ip6_addr[0])->addr[3] = 0;
 8008438:	64ab      	str	r3, [r5, #72]	; 0x48
    addr_index = 3;
 800843a:	2603      	movs	r6, #3
    for (i = 0; (i < 8) && (i < netif->hwaddr_len); i++) {
 800843c:	e042      	b.n	80084c4 <netif_create_ip6_linklocal_address+0xa4>
  LWIP_ASSERT("netif_create_ip6_linklocal_address: invalid netif", netif != NULL);
 800843e:	4b27      	ldr	r3, [pc, #156]	; (80084dc <netif_create_ip6_linklocal_address+0xbc>)
 8008440:	f240 52df 	movw	r2, #1503	; 0x5df
 8008444:	4926      	ldr	r1, [pc, #152]	; (80084e0 <netif_create_ip6_linklocal_address+0xc0>)
 8008446:	4827      	ldr	r0, [pc, #156]	; (80084e4 <netif_create_ip6_linklocal_address+0xc4>)
 8008448:	f00c f8d4 	bl	80145f4 <iprintf>
 800844c:	e7ec      	b.n	8008428 <netif_create_ip6_linklocal_address+0x8>
    ip_2_ip6(&netif->ip6_addr[0])->addr[2] = lwip_htonl((((u32_t)(netif->hwaddr[0] ^ 0x02)) << 24) |
 800844e:	f895 00bc 	ldrb.w	r0, [r5, #188]	; 0xbc
 8008452:	f080 0302 	eor.w	r3, r0, #2
        ((u32_t)(netif->hwaddr[1]) << 16) |
 8008456:	f895 00bd 	ldrb.w	r0, [r5, #189]	; 0xbd
 800845a:	0400      	lsls	r0, r0, #16
    ip_2_ip6(&netif->ip6_addr[0])->addr[2] = lwip_htonl((((u32_t)(netif->hwaddr[0] ^ 0x02)) << 24) |
 800845c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
        ((u32_t)(netif->hwaddr[2]) << 8) |
 8008460:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
        ((u32_t)(netif->hwaddr[1]) << 16) |
 8008464:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    ip_2_ip6(&netif->ip6_addr[0])->addr[2] = lwip_htonl((((u32_t)(netif->hwaddr[0] ^ 0x02)) << 24) |
 8008468:	f040 00ff 	orr.w	r0, r0, #255	; 0xff
 800846c:	f7fe fec3 	bl	80071f6 <lwip_htonl>
 8008470:	6468      	str	r0, [r5, #68]	; 0x44
        ((u32_t)(netif->hwaddr[3]) << 16) |
 8008472:	f895 30bf 	ldrb.w	r3, [r5, #191]	; 0xbf
        ((u32_t)(netif->hwaddr[4]) << 8) |
 8008476:	f895 00c0 	ldrb.w	r0, [r5, #192]	; 0xc0
 800847a:	0200      	lsls	r0, r0, #8
        ((u32_t)(netif->hwaddr[3]) << 16) |
 800847c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
        (netif->hwaddr[5]));
 8008480:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
        ((u32_t)(netif->hwaddr[4]) << 8) |
 8008484:	4318      	orrs	r0, r3
    ip_2_ip6(&netif->ip6_addr[0])->addr[3] = lwip_htonl((u32_t)(0xfeul << 24) |
 8008486:	f040 407e 	orr.w	r0, r0, #4261412864	; 0xfe000000
 800848a:	f7fe feb4 	bl	80071f6 <lwip_htonl>
 800848e:	64a8      	str	r0, [r5, #72]	; 0x48
  netif_ip6_addr_set_state(netif, 0, IP6_ADDR_TENTATIVE);
 8008490:	2208      	movs	r2, #8
 8008492:	2100      	movs	r1, #0
 8008494:	4628      	mov	r0, r5
 8008496:	f7ff ff27 	bl	80082e8 <netif_ip6_addr_set_state>
}
 800849a:	bd70      	pop	{r4, r5, r6, pc}
      ip_2_ip6(&netif->ip6_addr[0])->addr[addr_index] |= lwip_htonl(((u32_t)(netif->hwaddr[netif->hwaddr_len - i - 1])) << (8 * (i & 0x03)));
 800849c:	1b1b      	subs	r3, r3, r4
 800849e:	3b01      	subs	r3, #1
 80084a0:	442b      	add	r3, r5
 80084a2:	f893 00bc 	ldrb.w	r0, [r3, #188]	; 0xbc
 80084a6:	f004 0303 	and.w	r3, r4, #3
 80084aa:	00db      	lsls	r3, r3, #3
 80084ac:	4098      	lsls	r0, r3
 80084ae:	f7fe fea2 	bl	80071f6 <lwip_htonl>
 80084b2:	f106 030e 	add.w	r3, r6, #14
 80084b6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	4310      	orrs	r0, r2
 80084be:	6058      	str	r0, [r3, #4]
    for (i = 0; (i < 8) && (i < netif->hwaddr_len); i++) {
 80084c0:	3401      	adds	r4, #1
 80084c2:	b2e4      	uxtb	r4, r4
 80084c4:	2c07      	cmp	r4, #7
 80084c6:	d8e3      	bhi.n	8008490 <netif_create_ip6_linklocal_address+0x70>
 80084c8:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
 80084cc:	42a3      	cmp	r3, r4
 80084ce:	d9df      	bls.n	8008490 <netif_create_ip6_linklocal_address+0x70>
      if (i == 4) {
 80084d0:	2c04      	cmp	r4, #4
 80084d2:	d1e3      	bne.n	800849c <netif_create_ip6_linklocal_address+0x7c>
        addr_index--;
 80084d4:	3e01      	subs	r6, #1
 80084d6:	b2f6      	uxtb	r6, r6
 80084d8:	e7e0      	b.n	800849c <netif_create_ip6_linklocal_address+0x7c>
 80084da:	bf00      	nop
 80084dc:	08016334 	.word	0x08016334
 80084e0:	0801628c 	.word	0x0801628c
 80084e4:	08015608 	.word	0x08015608

080084e8 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80084e8:	4602      	mov	r2, r0
 80084ea:	b158      	cbz	r0, 8008504 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 80084ec:	4b07      	ldr	r3, [pc, #28]	; (800850c <netif_get_by_index+0x24>)
 80084ee:	6818      	ldr	r0, [r3, #0]
 80084f0:	b150      	cbz	r0, 8008508 <netif_get_by_index+0x20>
      if (idx == netif_get_index(netif)) {
 80084f2:	f890 30c6 	ldrb.w	r3, [r0, #198]	; 0xc6
 80084f6:	3301      	adds	r3, #1
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d100      	bne.n	8008500 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
}
 80084fe:	4770      	bx	lr
  return NULL;
 8008500:	2000      	movs	r0, #0
 8008502:	4770      	bx	lr
 8008504:	2000      	movs	r0, #0
 8008506:	4770      	bx	lr
 8008508:	2000      	movs	r0, #0
 800850a:	e7f8      	b.n	80084fe <netif_get_by_index+0x16>
 800850c:	20008c38 	.word	0x20008c38

08008510 <pbuf_pool_is_empty>:
/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8008510:	4b01      	ldr	r3, [pc, #4]	; (8008518 <pbuf_pool_is_empty+0x8>)
 8008512:	2201      	movs	r2, #1
 8008514:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008516:	4770      	bx	lr
 8008518:	20008c3c 	.word	0x20008c3c

0800851c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800851c:	b410      	push	{r4}
  p->next = NULL;
 800851e:	2400      	movs	r4, #0
 8008520:	6004      	str	r4, [r0, #0]
  p->payload = payload;
 8008522:	6041      	str	r1, [r0, #4]
  p->tot_len = tot_len;
 8008524:	8102      	strh	r2, [r0, #8]
  p->len = len;
 8008526:	8143      	strh	r3, [r0, #10]
  p->type_internal = (u8_t)type;
 8008528:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800852c:	7303      	strb	r3, [r0, #12]
  p->flags = flags;
 800852e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008532:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8008534:	2301      	movs	r3, #1
 8008536:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008538:	73c4      	strb	r4, [r0, #15]
}
 800853a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800853e:	4770      	bx	lr

08008540 <pbuf_skip_const>:
{
  u16_t offset_left = in_offset;
  const struct pbuf *q = in;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8008540:	e002      	b.n	8008548 <pbuf_skip_const+0x8>
    offset_left = (u16_t)(offset_left - q->len);
 8008542:	1ac9      	subs	r1, r1, r3
 8008544:	b289      	uxth	r1, r1
    q = q->next;
 8008546:	6800      	ldr	r0, [r0, #0]
  while ((q != NULL) && (q->len <= offset_left)) {
 8008548:	b110      	cbz	r0, 8008550 <pbuf_skip_const+0x10>
 800854a:	8943      	ldrh	r3, [r0, #10]
 800854c:	428b      	cmp	r3, r1
 800854e:	d9f8      	bls.n	8008542 <pbuf_skip_const+0x2>
  }
  if (out_offset != NULL) {
 8008550:	b102      	cbz	r2, 8008554 <pbuf_skip_const+0x14>
    *out_offset = offset_left;
 8008552:	8011      	strh	r1, [r2, #0]
  }
  return q;
}
 8008554:	4770      	bx	lr
	...

08008558 <pbuf_add_header_impl>:
{
 8008558:	b570      	push	{r4, r5, r6, lr}
 800855a:	460d      	mov	r5, r1
 800855c:	4616      	mov	r6, r2
  LWIP_ASSERT("p != NULL", p != NULL);
 800855e:	4604      	mov	r4, r0
 8008560:	b1c0      	cbz	r0, 8008594 <pbuf_add_header_impl+0x3c>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008562:	b33c      	cbz	r4, 80085b4 <pbuf_add_header_impl+0x5c>
 8008564:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008568:	d226      	bcs.n	80085b8 <pbuf_add_header_impl+0x60>
  if (header_size_increment == 0) {
 800856a:	b33d      	cbz	r5, 80085bc <pbuf_add_header_impl+0x64>
  increment_magnitude = (u16_t)header_size_increment;
 800856c:	b2aa      	uxth	r2, r5
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800856e:	8923      	ldrh	r3, [r4, #8]
 8008570:	4413      	add	r3, r2
 8008572:	b29b      	uxth	r3, r3
 8008574:	4293      	cmp	r3, r2
 8008576:	d323      	bcc.n	80085c0 <pbuf_add_header_impl+0x68>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008578:	f994 100c 	ldrsb.w	r1, [r4, #12]
 800857c:	2900      	cmp	r1, #0
 800857e:	db11      	blt.n	80085a4 <pbuf_add_header_impl+0x4c>
    if (force) {
 8008580:	b306      	cbz	r6, 80085c4 <pbuf_add_header_impl+0x6c>
      payload = (u8_t *)p->payload - header_size_increment;
 8008582:	6861      	ldr	r1, [r4, #4]
 8008584:	1b4d      	subs	r5, r1, r5
  p->payload = payload;
 8008586:	6065      	str	r5, [r4, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008588:	8961      	ldrh	r1, [r4, #10]
 800858a:	440a      	add	r2, r1
 800858c:	8162      	strh	r2, [r4, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800858e:	8123      	strh	r3, [r4, #8]
  return 0;
 8008590:	2000      	movs	r0, #0
 8008592:	e012      	b.n	80085ba <pbuf_add_header_impl+0x62>
  LWIP_ASSERT("p != NULL", p != NULL);
 8008594:	4b0c      	ldr	r3, [pc, #48]	; (80085c8 <pbuf_add_header_impl+0x70>)
 8008596:	f240 12df 	movw	r2, #479	; 0x1df
 800859a:	490c      	ldr	r1, [pc, #48]	; (80085cc <pbuf_add_header_impl+0x74>)
 800859c:	480c      	ldr	r0, [pc, #48]	; (80085d0 <pbuf_add_header_impl+0x78>)
 800859e:	f00c f829 	bl	80145f4 <iprintf>
 80085a2:	e7de      	b.n	8008562 <pbuf_add_header_impl+0xa>
    payload = (u8_t *)p->payload - header_size_increment;
 80085a4:	6861      	ldr	r1, [r4, #4]
 80085a6:	1b4d      	subs	r5, r1, r5
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80085a8:	f104 0110 	add.w	r1, r4, #16
 80085ac:	42a9      	cmp	r1, r5
 80085ae:	d9ea      	bls.n	8008586 <pbuf_add_header_impl+0x2e>
      return 1;
 80085b0:	2001      	movs	r0, #1
 80085b2:	e002      	b.n	80085ba <pbuf_add_header_impl+0x62>
    return 1;
 80085b4:	2001      	movs	r0, #1
 80085b6:	e000      	b.n	80085ba <pbuf_add_header_impl+0x62>
 80085b8:	2001      	movs	r0, #1
}
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 80085bc:	2000      	movs	r0, #0
 80085be:	e7fc      	b.n	80085ba <pbuf_add_header_impl+0x62>
    return 1;
 80085c0:	2001      	movs	r0, #1
 80085c2:	e7fa      	b.n	80085ba <pbuf_add_header_impl+0x62>
      return 1;
 80085c4:	2001      	movs	r0, #1
 80085c6:	e7f8      	b.n	80085ba <pbuf_add_header_impl+0x62>
 80085c8:	080163c8 	.word	0x080163c8
 80085cc:	08017b2c 	.word	0x08017b2c
 80085d0:	08015608 	.word	0x08015608

080085d4 <pbuf_free_ooseq>:
{
 80085d4:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80085d6:	4b07      	ldr	r3, [pc, #28]	; (80085f4 <pbuf_free_ooseq+0x20>)
 80085d8:	2200      	movs	r2, #0
 80085da:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80085dc:	4b06      	ldr	r3, [pc, #24]	; (80085f8 <pbuf_free_ooseq+0x24>)
 80085de:	6818      	ldr	r0, [r3, #0]
 80085e0:	b130      	cbz	r0, 80085f0 <pbuf_free_ooseq+0x1c>
    if (pcb->ooseq != NULL) {
 80085e2:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 80085e6:	b90b      	cbnz	r3, 80085ec <pbuf_free_ooseq+0x18>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80085e8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80085ea:	e7f9      	b.n	80085e0 <pbuf_free_ooseq+0xc>
      tcp_free_ooseq(pcb);
 80085ec:	f000 fe1e 	bl	800922c <tcp_free_ooseq>
}
 80085f0:	bd08      	pop	{r3, pc}
 80085f2:	bf00      	nop
 80085f4:	20008c3c 	.word	0x20008c3c
 80085f8:	20008c44 	.word	0x20008c44

080085fc <pbuf_alloc_reference>:
{
 80085fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085fe:	b083      	sub	sp, #12
 8008600:	4607      	mov	r7, r0
 8008602:	460e      	mov	r6, r1
 8008604:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008606:	2a41      	cmp	r2, #65	; 0x41
 8008608:	d001      	beq.n	800860e <pbuf_alloc_reference+0x12>
 800860a:	2a01      	cmp	r2, #1
 800860c:	d10f      	bne.n	800862e <pbuf_alloc_reference+0x32>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800860e:	200b      	movs	r0, #11
 8008610:	f7ff fc2a 	bl	8007e68 <memp_malloc>
  if (p == NULL) {
 8008614:	4605      	mov	r5, r0
 8008616:	b138      	cbz	r0, 8008628 <pbuf_alloc_reference+0x2c>
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008618:	2300      	movs	r3, #0
 800861a:	9301      	str	r3, [sp, #4]
 800861c:	9400      	str	r4, [sp, #0]
 800861e:	4633      	mov	r3, r6
 8008620:	4632      	mov	r2, r6
 8008622:	4639      	mov	r1, r7
 8008624:	f7ff ff7a 	bl	800851c <pbuf_init_alloced_pbuf>
}
 8008628:	4628      	mov	r0, r5
 800862a:	b003      	add	sp, #12
 800862c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800862e:	4b04      	ldr	r3, [pc, #16]	; (8008640 <pbuf_alloc_reference+0x44>)
 8008630:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008634:	4903      	ldr	r1, [pc, #12]	; (8008644 <pbuf_alloc_reference+0x48>)
 8008636:	4804      	ldr	r0, [pc, #16]	; (8008648 <pbuf_alloc_reference+0x4c>)
 8008638:	f00b ffdc 	bl	80145f4 <iprintf>
 800863c:	e7e7      	b.n	800860e <pbuf_alloc_reference+0x12>
 800863e:	bf00      	nop
 8008640:	080163c8 	.word	0x080163c8
 8008644:	080164a4 	.word	0x080164a4
 8008648:	08015608 	.word	0x08015608

0800864c <pbuf_alloced_custom>:
{
 800864c:	b570      	push	{r4, r5, r6, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	9c06      	ldr	r4, [sp, #24]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008652:	3003      	adds	r0, #3
 8008654:	f020 0003 	bic.w	r0, r0, #3
 8008658:	180e      	adds	r6, r1, r0
 800865a:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 800865e:	42ae      	cmp	r6, r5
 8008660:	d80f      	bhi.n	8008682 <pbuf_alloced_custom+0x36>
  if (payload_mem != NULL) {
 8008662:	b104      	cbz	r4, 8008666 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008664:	4404      	add	r4, r0
 8008666:	4618      	mov	r0, r3
 8008668:	4613      	mov	r3, r2
 800866a:	460a      	mov	r2, r1
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800866c:	4605      	mov	r5, r0
 800866e:	2102      	movs	r1, #2
 8008670:	9101      	str	r1, [sp, #4]
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	4613      	mov	r3, r2
 8008676:	4621      	mov	r1, r4
 8008678:	f7ff ff50 	bl	800851c <pbuf_init_alloced_pbuf>
}
 800867c:	4628      	mov	r0, r5
 800867e:	b002      	add	sp, #8
 8008680:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 8008682:	2500      	movs	r5, #0
 8008684:	e7fa      	b.n	800867c <pbuf_alloced_custom+0x30>

08008686 <pbuf_add_header>:
{
 8008686:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008688:	2200      	movs	r2, #0
 800868a:	f7ff ff65 	bl	8008558 <pbuf_add_header_impl>
}
 800868e:	bd08      	pop	{r3, pc}

08008690 <pbuf_add_header_force>:
{
 8008690:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 1);
 8008692:	2201      	movs	r2, #1
 8008694:	f7ff ff60 	bl	8008558 <pbuf_add_header_impl>
}
 8008698:	bd08      	pop	{r3, pc}
	...

0800869c <pbuf_remove_header>:
{
 800869c:	b538      	push	{r3, r4, r5, lr}
 800869e:	460d      	mov	r5, r1
  LWIP_ASSERT("p != NULL", p != NULL);
 80086a0:	4604      	mov	r4, r0
 80086a2:	b190      	cbz	r0, 80086ca <pbuf_remove_header+0x2e>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80086a4:	b314      	cbz	r4, 80086ec <pbuf_remove_header+0x50>
 80086a6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80086aa:	d221      	bcs.n	80086f0 <pbuf_remove_header+0x54>
  if (header_size_decrement == 0) {
 80086ac:	b315      	cbz	r5, 80086f4 <pbuf_remove_header+0x58>
  increment_magnitude = (u16_t)header_size_decrement;
 80086ae:	b2aa      	uxth	r2, r5
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80086b0:	8963      	ldrh	r3, [r4, #10]
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d311      	bcc.n	80086da <pbuf_remove_header+0x3e>
  payload = p->payload;
 80086b6:	6861      	ldr	r1, [r4, #4]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80086b8:	440d      	add	r5, r1
 80086ba:	6065      	str	r5, [r4, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 80086bc:	1a9b      	subs	r3, r3, r2
 80086be:	8163      	strh	r3, [r4, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80086c0:	8923      	ldrh	r3, [r4, #8]
 80086c2:	1a9a      	subs	r2, r3, r2
 80086c4:	8122      	strh	r2, [r4, #8]
  return 0;
 80086c6:	2000      	movs	r0, #0
 80086c8:	e013      	b.n	80086f2 <pbuf_remove_header+0x56>
  LWIP_ASSERT("p != NULL", p != NULL);
 80086ca:	4b0b      	ldr	r3, [pc, #44]	; (80086f8 <pbuf_remove_header+0x5c>)
 80086cc:	f240 224b 	movw	r2, #587	; 0x24b
 80086d0:	490a      	ldr	r1, [pc, #40]	; (80086fc <pbuf_remove_header+0x60>)
 80086d2:	480b      	ldr	r0, [pc, #44]	; (8008700 <pbuf_remove_header+0x64>)
 80086d4:	f00b ff8e 	bl	80145f4 <iprintf>
 80086d8:	e7e4      	b.n	80086a4 <pbuf_remove_header+0x8>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80086da:	4b07      	ldr	r3, [pc, #28]	; (80086f8 <pbuf_remove_header+0x5c>)
 80086dc:	f240 2255 	movw	r2, #597	; 0x255
 80086e0:	4908      	ldr	r1, [pc, #32]	; (8008704 <pbuf_remove_header+0x68>)
 80086e2:	4807      	ldr	r0, [pc, #28]	; (8008700 <pbuf_remove_header+0x64>)
 80086e4:	f00b ff86 	bl	80145f4 <iprintf>
 80086e8:	2001      	movs	r0, #1
 80086ea:	e002      	b.n	80086f2 <pbuf_remove_header+0x56>
    return 1;
 80086ec:	2001      	movs	r0, #1
 80086ee:	e000      	b.n	80086f2 <pbuf_remove_header+0x56>
 80086f0:	2001      	movs	r0, #1
}
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
 80086f4:	2000      	movs	r0, #0
 80086f6:	e7fc      	b.n	80086f2 <pbuf_remove_header+0x56>
 80086f8:	080163c8 	.word	0x080163c8
 80086fc:	08017b2c 	.word	0x08017b2c
 8008700:	08015608 	.word	0x08015608
 8008704:	080166d8 	.word	0x080166d8

08008708 <pbuf_header_impl>:
{
 8008708:	b508      	push	{r3, lr}
  if (header_size_increment < 0) {
 800870a:	2900      	cmp	r1, #0
 800870c:	db02      	blt.n	8008714 <pbuf_header_impl+0xc>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800870e:	f7ff ff23 	bl	8008558 <pbuf_add_header_impl>
}
 8008712:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008714:	4249      	negs	r1, r1
 8008716:	f7ff ffc1 	bl	800869c <pbuf_remove_header>
 800871a:	e7fa      	b.n	8008712 <pbuf_header_impl+0xa>

0800871c <pbuf_header_force>:
{
 800871c:	b508      	push	{r3, lr}
  return pbuf_header_impl(p, header_size_increment, 1);
 800871e:	2201      	movs	r2, #1
 8008720:	f7ff fff2 	bl	8008708 <pbuf_header_impl>
}
 8008724:	bd08      	pop	{r3, pc}
	...

08008728 <pbuf_free>:
{
 8008728:	b570      	push	{r4, r5, r6, lr}
  if (p == NULL) {
 800872a:	b110      	cbz	r0, 8008732 <pbuf_free+0xa>
 800872c:	4604      	mov	r4, r0
  count = 0;
 800872e:	2500      	movs	r5, #0
 8008730:	e017      	b.n	8008762 <pbuf_free+0x3a>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008732:	4b28      	ldr	r3, [pc, #160]	; (80087d4 <pbuf_free+0xac>)
 8008734:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008738:	4927      	ldr	r1, [pc, #156]	; (80087d8 <pbuf_free+0xb0>)
 800873a:	4828      	ldr	r0, [pc, #160]	; (80087dc <pbuf_free+0xb4>)
 800873c:	f00b ff5a 	bl	80145f4 <iprintf>
    return 0;
 8008740:	2500      	movs	r5, #0
}
 8008742:	4628      	mov	r0, r5
 8008744:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008746:	4b23      	ldr	r3, [pc, #140]	; (80087d4 <pbuf_free+0xac>)
 8008748:	f240 22f1 	movw	r2, #753	; 0x2f1
 800874c:	4924      	ldr	r1, [pc, #144]	; (80087e0 <pbuf_free+0xb8>)
 800874e:	4823      	ldr	r0, [pc, #140]	; (80087dc <pbuf_free+0xb4>)
 8008750:	f00b ff50 	bl	80145f4 <iprintf>
 8008754:	e00a      	b.n	800876c <pbuf_free+0x44>
        pc->custom_free_function(p);
 8008756:	6923      	ldr	r3, [r4, #16]
 8008758:	4620      	mov	r0, r4
 800875a:	4798      	blx	r3
      count++;
 800875c:	3501      	adds	r5, #1
 800875e:	b2ed      	uxtb	r5, r5
      p = q;
 8008760:	4634      	mov	r4, r6
  while (p != NULL) {
 8008762:	2c00      	cmp	r4, #0
 8008764:	d0ed      	beq.n	8008742 <pbuf_free+0x1a>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008766:	7ba3      	ldrb	r3, [r4, #14]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d0ec      	beq.n	8008746 <pbuf_free+0x1e>
    ref = --(p->ref);
 800876c:	7ba3      	ldrb	r3, [r4, #14]
 800876e:	3b01      	subs	r3, #1
 8008770:	b2db      	uxtb	r3, r3
 8008772:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1e4      	bne.n	8008742 <pbuf_free+0x1a>
      q = p->next;
 8008778:	6826      	ldr	r6, [r4, #0]
      alloc_src = pbuf_get_allocsrc(p);
 800877a:	7b23      	ldrb	r3, [r4, #12]
 800877c:	f003 030f 	and.w	r3, r3, #15
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008780:	7b62      	ldrb	r2, [r4, #13]
 8008782:	f012 0f02 	tst.w	r2, #2
 8008786:	d00a      	beq.n	800879e <pbuf_free+0x76>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008788:	6923      	ldr	r3, [r4, #16]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e3      	bne.n	8008756 <pbuf_free+0x2e>
 800878e:	4b11      	ldr	r3, [pc, #68]	; (80087d4 <pbuf_free+0xac>)
 8008790:	f240 22ff 	movw	r2, #767	; 0x2ff
 8008794:	4913      	ldr	r1, [pc, #76]	; (80087e4 <pbuf_free+0xbc>)
 8008796:	4811      	ldr	r0, [pc, #68]	; (80087dc <pbuf_free+0xb4>)
 8008798:	f00b ff2c 	bl	80145f4 <iprintf>
 800879c:	e7db      	b.n	8008756 <pbuf_free+0x2e>
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d006      	beq.n	80087b0 <pbuf_free+0x88>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d009      	beq.n	80087ba <pbuf_free+0x92>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80087a6:	b96b      	cbnz	r3, 80087c4 <pbuf_free+0x9c>
          mem_free(p);
 80087a8:	4620      	mov	r0, r4
 80087aa:	f7ff f937 	bl	8007a1c <mem_free>
 80087ae:	e7d5      	b.n	800875c <pbuf_free+0x34>
          memp_free(MEMP_PBUF_POOL, p);
 80087b0:	4621      	mov	r1, r4
 80087b2:	200c      	movs	r0, #12
 80087b4:	f7ff fb72 	bl	8007e9c <memp_free>
 80087b8:	e7d0      	b.n	800875c <pbuf_free+0x34>
          memp_free(MEMP_PBUF, p);
 80087ba:	4621      	mov	r1, r4
 80087bc:	200b      	movs	r0, #11
 80087be:	f7ff fb6d 	bl	8007e9c <memp_free>
 80087c2:	e7cb      	b.n	800875c <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 80087c4:	4b03      	ldr	r3, [pc, #12]	; (80087d4 <pbuf_free+0xac>)
 80087c6:	f240 320f 	movw	r2, #783	; 0x30f
 80087ca:	4907      	ldr	r1, [pc, #28]	; (80087e8 <pbuf_free+0xc0>)
 80087cc:	4803      	ldr	r0, [pc, #12]	; (80087dc <pbuf_free+0xb4>)
 80087ce:	f00b ff11 	bl	80145f4 <iprintf>
 80087d2:	e7c3      	b.n	800875c <pbuf_free+0x34>
 80087d4:	080163c8 	.word	0x080163c8
 80087d8:	08017b2c 	.word	0x08017b2c
 80087dc:	08015608 	.word	0x08015608
 80087e0:	08016628 	.word	0x08016628
 80087e4:	08016640 	.word	0x08016640
 80087e8:	08016664 	.word	0x08016664

080087ec <pbuf_alloc>:
{
 80087ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f0:	b082      	sub	sp, #8
 80087f2:	460e      	mov	r6, r1
 80087f4:	4690      	mov	r8, r2
  switch (type) {
 80087f6:	2a41      	cmp	r2, #65	; 0x41
 80087f8:	d046      	beq.n	8008888 <pbuf_alloc+0x9c>
 80087fa:	4604      	mov	r4, r0
 80087fc:	b285      	uxth	r5, r0
 80087fe:	d937      	bls.n	8008870 <pbuf_alloc+0x84>
 8008800:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 8008804:	d04a      	beq.n	800889c <pbuf_alloc+0xb0>
 8008806:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800880a:	d133      	bne.n	8008874 <pbuf_alloc+0x88>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800880c:	3503      	adds	r5, #3
 800880e:	f025 0503 	bic.w	r5, r5, #3
 8008812:	b2ad      	uxth	r5, r5
 8008814:	1cca      	adds	r2, r1, #3
 8008816:	b293      	uxth	r3, r2
 8008818:	f023 0303 	bic.w	r3, r3, #3
 800881c:	441d      	add	r5, r3
 800881e:	b2ad      	uxth	r5, r5
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008820:	f105 0010 	add.w	r0, r5, #16
 8008824:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008826:	f022 0203 	bic.w	r2, r2, #3
 800882a:	4295      	cmp	r5, r2
 800882c:	d37b      	bcc.n	8008926 <pbuf_alloc+0x13a>
 800882e:	4282      	cmp	r2, r0
 8008830:	d87c      	bhi.n	800892c <pbuf_alloc+0x140>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008832:	f7ff fa0b 	bl	8007c4c <mem_malloc>
      if (p == NULL) {
 8008836:	4681      	mov	r9, r0
 8008838:	b360      	cbz	r0, 8008894 <pbuf_alloc+0xa8>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800883a:	f104 0110 	add.w	r1, r4, #16
 800883e:	4401      	add	r1, r0
 8008840:	3103      	adds	r1, #3
 8008842:	2300      	movs	r3, #0
 8008844:	9301      	str	r3, [sp, #4]
 8008846:	f8cd 8000 	str.w	r8, [sp]
 800884a:	4633      	mov	r3, r6
 800884c:	4632      	mov	r2, r6
 800884e:	f021 0103 	bic.w	r1, r1, #3
 8008852:	f7ff fe63 	bl	800851c <pbuf_init_alloced_pbuf>
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008856:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800885a:	f013 0f03 	tst.w	r3, #3
 800885e:	d019      	beq.n	8008894 <pbuf_alloc+0xa8>
 8008860:	4b34      	ldr	r3, [pc, #208]	; (8008934 <pbuf_alloc+0x148>)
 8008862:	f240 1223 	movw	r2, #291	; 0x123
 8008866:	4934      	ldr	r1, [pc, #208]	; (8008938 <pbuf_alloc+0x14c>)
 8008868:	4834      	ldr	r0, [pc, #208]	; (800893c <pbuf_alloc+0x150>)
 800886a:	f00b fec3 	bl	80145f4 <iprintf>
 800886e:	e011      	b.n	8008894 <pbuf_alloc+0xa8>
  switch (type) {
 8008870:	2a01      	cmp	r2, #1
 8008872:	d009      	beq.n	8008888 <pbuf_alloc+0x9c>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008874:	4b2f      	ldr	r3, [pc, #188]	; (8008934 <pbuf_alloc+0x148>)
 8008876:	f240 1227 	movw	r2, #295	; 0x127
 800887a:	4931      	ldr	r1, [pc, #196]	; (8008940 <pbuf_alloc+0x154>)
 800887c:	482f      	ldr	r0, [pc, #188]	; (800893c <pbuf_alloc+0x150>)
 800887e:	f00b feb9 	bl	80145f4 <iprintf>
      return NULL;
 8008882:	f04f 0900 	mov.w	r9, #0
 8008886:	e005      	b.n	8008894 <pbuf_alloc+0xa8>
      p = pbuf_alloc_reference(NULL, length, type);
 8008888:	4642      	mov	r2, r8
 800888a:	4631      	mov	r1, r6
 800888c:	2000      	movs	r0, #0
 800888e:	f7ff feb5 	bl	80085fc <pbuf_alloc_reference>
 8008892:	4681      	mov	r9, r0
}
 8008894:	4648      	mov	r0, r9
 8008896:	b002      	add	sp, #8
 8008898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      last = NULL;
 800889c:	f04f 0a00 	mov.w	sl, #0
      p = NULL;
 80088a0:	46d1      	mov	r9, sl
 80088a2:	e014      	b.n	80088ce <pbuf_alloc+0xe2>
          PBUF_POOL_IS_EMPTY();
 80088a4:	f7ff fe34 	bl	8008510 <pbuf_pool_is_empty>
          if (p) {
 80088a8:	f1b9 0f00 	cmp.w	r9, #0
 80088ac:	d0f2      	beq.n	8008894 <pbuf_alloc+0xa8>
            pbuf_free(p);
 80088ae:	4648      	mov	r0, r9
 80088b0:	f7ff ff3a 	bl	8008728 <pbuf_free>
          return NULL;
 80088b4:	46b9      	mov	r9, r7
 80088b6:	e7ed      	b.n	8008894 <pbuf_alloc+0xa8>
        if (p == NULL) {
 80088b8:	f1b9 0f00 	cmp.w	r9, #0
 80088bc:	d031      	beq.n	8008922 <pbuf_alloc+0x136>
          last->next = q;
 80088be:	f8ca 7000 	str.w	r7, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 80088c2:	1b36      	subs	r6, r6, r4
 80088c4:	b2b6      	uxth	r6, r6
        offset = 0;
 80088c6:	2500      	movs	r5, #0
        last = q;
 80088c8:	46ba      	mov	sl, r7
      } while (rem_len > 0);
 80088ca:	2e00      	cmp	r6, #0
 80088cc:	d0e2      	beq.n	8008894 <pbuf_alloc+0xa8>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80088ce:	200c      	movs	r0, #12
 80088d0:	f7ff faca 	bl	8007e68 <memp_malloc>
        if (q == NULL) {
 80088d4:	4607      	mov	r7, r0
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d0e4      	beq.n	80088a4 <pbuf_alloc+0xb8>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80088da:	1cec      	adds	r4, r5, #3
 80088dc:	f024 0403 	bic.w	r4, r4, #3
 80088e0:	b2a4      	uxth	r4, r4
 80088e2:	f5c4 7414 	rsb	r4, r4, #592	; 0x250
 80088e6:	b2a4      	uxth	r4, r4
 80088e8:	42b4      	cmp	r4, r6
 80088ea:	bf28      	it	cs
 80088ec:	4634      	movcs	r4, r6
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80088ee:	f105 0110 	add.w	r1, r5, #16
 80088f2:	4401      	add	r1, r0
 80088f4:	3103      	adds	r1, #3
 80088f6:	2300      	movs	r3, #0
 80088f8:	9301      	str	r3, [sp, #4]
 80088fa:	f8cd 8000 	str.w	r8, [sp]
 80088fe:	4623      	mov	r3, r4
 8008900:	4632      	mov	r2, r6
 8008902:	f021 0103 	bic.w	r1, r1, #3
 8008906:	f7ff fe09 	bl	800851c <pbuf_init_alloced_pbuf>
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f013 0f03 	tst.w	r3, #3
 8008910:	d0d2      	beq.n	80088b8 <pbuf_alloc+0xcc>
 8008912:	4b08      	ldr	r3, [pc, #32]	; (8008934 <pbuf_alloc+0x148>)
 8008914:	f240 1201 	movw	r2, #257	; 0x101
 8008918:	490a      	ldr	r1, [pc, #40]	; (8008944 <pbuf_alloc+0x158>)
 800891a:	4808      	ldr	r0, [pc, #32]	; (800893c <pbuf_alloc+0x150>)
 800891c:	f00b fe6a 	bl	80145f4 <iprintf>
 8008920:	e7ca      	b.n	80088b8 <pbuf_alloc+0xcc>
          p = q;
 8008922:	46b9      	mov	r9, r7
 8008924:	e7cd      	b.n	80088c2 <pbuf_alloc+0xd6>
        return NULL;
 8008926:	f04f 0900 	mov.w	r9, #0
 800892a:	e7b3      	b.n	8008894 <pbuf_alloc+0xa8>
 800892c:	f04f 0900 	mov.w	r9, #0
 8008930:	e7b0      	b.n	8008894 <pbuf_alloc+0xa8>
 8008932:	bf00      	nop
 8008934:	080163c8 	.word	0x080163c8
 8008938:	0801645c 	.word	0x0801645c
 800893c:	08015608 	.word	0x08015608
 8008940:	08016488 	.word	0x08016488
 8008944:	080163f8 	.word	0x080163f8

08008948 <pbuf_realloc>:
{
 8008948:	b570      	push	{r4, r5, r6, lr}
 800894a:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800894c:	4604      	mov	r4, r0
 800894e:	b1b8      	cbz	r0, 8008980 <pbuf_realloc+0x38>
  if (new_len >= p->tot_len) {
 8008950:	8926      	ldrh	r6, [r4, #8]
 8008952:	42ae      	cmp	r6, r5
 8008954:	d92e      	bls.n	80089b4 <pbuf_realloc+0x6c>
  shrink = (u16_t)(p->tot_len - new_len);
 8008956:	1b76      	subs	r6, r6, r5
 8008958:	b2b6      	uxth	r6, r6
  while (rem_len > q->len) {
 800895a:	8961      	ldrh	r1, [r4, #10]
 800895c:	42a9      	cmp	r1, r5
 800895e:	d217      	bcs.n	8008990 <pbuf_realloc+0x48>
    rem_len = (u16_t)(rem_len - q->len);
 8008960:	1a69      	subs	r1, r5, r1
 8008962:	b28d      	uxth	r5, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008964:	8923      	ldrh	r3, [r4, #8]
 8008966:	1b9b      	subs	r3, r3, r6
 8008968:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800896a:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800896c:	2c00      	cmp	r4, #0
 800896e:	d1f4      	bne.n	800895a <pbuf_realloc+0x12>
 8008970:	4b1a      	ldr	r3, [pc, #104]	; (80089dc <pbuf_realloc+0x94>)
 8008972:	f240 12af 	movw	r2, #431	; 0x1af
 8008976:	491a      	ldr	r1, [pc, #104]	; (80089e0 <pbuf_realloc+0x98>)
 8008978:	481a      	ldr	r0, [pc, #104]	; (80089e4 <pbuf_realloc+0x9c>)
 800897a:	f00b fe3b 	bl	80145f4 <iprintf>
 800897e:	e7ec      	b.n	800895a <pbuf_realloc+0x12>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008980:	4b16      	ldr	r3, [pc, #88]	; (80089dc <pbuf_realloc+0x94>)
 8008982:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008986:	4918      	ldr	r1, [pc, #96]	; (80089e8 <pbuf_realloc+0xa0>)
 8008988:	4816      	ldr	r0, [pc, #88]	; (80089e4 <pbuf_realloc+0x9c>)
 800898a:	f00b fe33 	bl	80145f4 <iprintf>
 800898e:	e7df      	b.n	8008950 <pbuf_realloc+0x8>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008990:	7b23      	ldrb	r3, [r4, #12]
 8008992:	f013 0f0f 	tst.w	r3, #15
 8008996:	d105      	bne.n	80089a4 <pbuf_realloc+0x5c>
 8008998:	42a9      	cmp	r1, r5
 800899a:	d003      	beq.n	80089a4 <pbuf_realloc+0x5c>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800899c:	7b63      	ldrb	r3, [r4, #13]
 800899e:	f013 0f02 	tst.w	r3, #2
 80089a2:	d008      	beq.n	80089b6 <pbuf_realloc+0x6e>
  q->len = rem_len;
 80089a4:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80089a6:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80089a8:	6820      	ldr	r0, [r4, #0]
 80089aa:	b108      	cbz	r0, 80089b0 <pbuf_realloc+0x68>
    pbuf_free(q->next);
 80089ac:	f7ff febc 	bl	8008728 <pbuf_free>
  q->next = NULL;
 80089b0:	2300      	movs	r3, #0
 80089b2:	6023      	str	r3, [r4, #0]
}
 80089b4:	bd70      	pop	{r4, r5, r6, pc}
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80089b6:	6863      	ldr	r3, [r4, #4]
 80089b8:	1b1b      	subs	r3, r3, r4
 80089ba:	18e9      	adds	r1, r5, r3
 80089bc:	b289      	uxth	r1, r1
 80089be:	4620      	mov	r0, r4
 80089c0:	f7ff f886 	bl	8007ad0 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80089c4:	4604      	mov	r4, r0
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d1ec      	bne.n	80089a4 <pbuf_realloc+0x5c>
 80089ca:	4b04      	ldr	r3, [pc, #16]	; (80089dc <pbuf_realloc+0x94>)
 80089cc:	f240 12bd 	movw	r2, #445	; 0x1bd
 80089d0:	4906      	ldr	r1, [pc, #24]	; (80089ec <pbuf_realloc+0xa4>)
 80089d2:	4804      	ldr	r0, [pc, #16]	; (80089e4 <pbuf_realloc+0x9c>)
 80089d4:	f00b fe0e 	bl	80145f4 <iprintf>
 80089d8:	e7e4      	b.n	80089a4 <pbuf_realloc+0x5c>
 80089da:	bf00      	nop
 80089dc:	080163c8 	.word	0x080163c8
 80089e0:	08016690 	.word	0x08016690
 80089e4:	08015608 	.word	0x08015608
 80089e8:	08016678 	.word	0x08016678
 80089ec:	080166a8 	.word	0x080166a8

080089f0 <pbuf_clen>:
  len = 0;
 80089f0:	2300      	movs	r3, #0
  while (p != NULL) {
 80089f2:	e002      	b.n	80089fa <pbuf_clen+0xa>
    ++len;
 80089f4:	3301      	adds	r3, #1
 80089f6:	b29b      	uxth	r3, r3
    p = p->next;
 80089f8:	6800      	ldr	r0, [r0, #0]
  while (p != NULL) {
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d1fa      	bne.n	80089f4 <pbuf_clen+0x4>
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	4770      	bx	lr
	...

08008a04 <pbuf_ref>:
  if (p != NULL) {
 8008a04:	b170      	cbz	r0, 8008a24 <pbuf_ref+0x20>
{
 8008a06:	b508      	push	{r3, lr}
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008a08:	7b83      	ldrb	r3, [r0, #14]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008a10:	b103      	cbz	r3, 8008a14 <pbuf_ref+0x10>
}
 8008a12:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008a14:	4b04      	ldr	r3, [pc, #16]	; (8008a28 <pbuf_ref+0x24>)
 8008a16:	f240 3242 	movw	r2, #834	; 0x342
 8008a1a:	4904      	ldr	r1, [pc, #16]	; (8008a2c <pbuf_ref+0x28>)
 8008a1c:	4804      	ldr	r0, [pc, #16]	; (8008a30 <pbuf_ref+0x2c>)
 8008a1e:	f00b fde9 	bl	80145f4 <iprintf>
}
 8008a22:	e7f6      	b.n	8008a12 <pbuf_ref+0xe>
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	080163c8 	.word	0x080163c8
 8008a2c:	080166c4 	.word	0x080166c4
 8008a30:	08015608 	.word	0x08015608

08008a34 <pbuf_cat>:
{
 8008a34:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008a36:	b110      	cbz	r0, 8008a3e <pbuf_cat+0xa>
 8008a38:	460d      	mov	r5, r1
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	b961      	cbnz	r1, 8008a58 <pbuf_cat+0x24>
 8008a3e:	4b15      	ldr	r3, [pc, #84]	; (8008a94 <pbuf_cat+0x60>)
 8008a40:	f240 325a 	movw	r2, #858	; 0x35a
 8008a44:	4914      	ldr	r1, [pc, #80]	; (8008a98 <pbuf_cat+0x64>)
 8008a46:	4815      	ldr	r0, [pc, #84]	; (8008a9c <pbuf_cat+0x68>)
 8008a48:	f00b fdd4 	bl	80145f4 <iprintf>
 8008a4c:	e019      	b.n	8008a82 <pbuf_cat+0x4e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008a4e:	8923      	ldrh	r3, [r4, #8]
 8008a50:	8929      	ldrh	r1, [r5, #8]
 8008a52:	440b      	add	r3, r1
 8008a54:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008a56:	4614      	mov	r4, r2
 8008a58:	6822      	ldr	r2, [r4, #0]
 8008a5a:	2a00      	cmp	r2, #0
 8008a5c:	d1f7      	bne.n	8008a4e <pbuf_cat+0x1a>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008a5e:	8922      	ldrh	r2, [r4, #8]
 8008a60:	8963      	ldrh	r3, [r4, #10]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d10e      	bne.n	8008a84 <pbuf_cat+0x50>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	b133      	cbz	r3, 8008a78 <pbuf_cat+0x44>
 8008a6a:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <pbuf_cat+0x60>)
 8008a6c:	f240 3263 	movw	r2, #867	; 0x363
 8008a70:	490b      	ldr	r1, [pc, #44]	; (8008aa0 <pbuf_cat+0x6c>)
 8008a72:	480a      	ldr	r0, [pc, #40]	; (8008a9c <pbuf_cat+0x68>)
 8008a74:	f00b fdbe 	bl	80145f4 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008a78:	8923      	ldrh	r3, [r4, #8]
 8008a7a:	892a      	ldrh	r2, [r5, #8]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	8123      	strh	r3, [r4, #8]
  p->next = t;
 8008a80:	6025      	str	r5, [r4, #0]
}
 8008a82:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008a84:	4b03      	ldr	r3, [pc, #12]	; (8008a94 <pbuf_cat+0x60>)
 8008a86:	f240 3262 	movw	r2, #866	; 0x362
 8008a8a:	4906      	ldr	r1, [pc, #24]	; (8008aa4 <pbuf_cat+0x70>)
 8008a8c:	4803      	ldr	r0, [pc, #12]	; (8008a9c <pbuf_cat+0x68>)
 8008a8e:	f00b fdb1 	bl	80145f4 <iprintf>
 8008a92:	e7e8      	b.n	8008a66 <pbuf_cat+0x32>
 8008a94:	080163c8 	.word	0x080163c8
 8008a98:	080164b8 	.word	0x080164b8
 8008a9c:	08015608 	.word	0x08015608
 8008aa0:	08016520 	.word	0x08016520
 8008aa4:	080164f0 	.word	0x080164f0

08008aa8 <pbuf_chain>:
{
 8008aa8:	b510      	push	{r4, lr}
 8008aaa:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8008aac:	f7ff ffc2 	bl	8008a34 <pbuf_cat>
  pbuf_ref(t);
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f7ff ffa7 	bl	8008a04 <pbuf_ref>
}
 8008ab6:	bd10      	pop	{r4, pc}

08008ab8 <pbuf_copy>:
{
 8008ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008abc:	b148      	cbz	r0, 8008ad2 <pbuf_copy+0x1a>
 8008abe:	460c      	mov	r4, r1
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	b131      	cbz	r1, 8008ad2 <pbuf_copy+0x1a>
 8008ac4:	8902      	ldrh	r2, [r0, #8]
 8008ac6:	890b      	ldrh	r3, [r1, #8]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d302      	bcc.n	8008ad2 <pbuf_copy+0x1a>
  size_t offset_to = 0, offset_from = 0, len;
 8008acc:	2700      	movs	r7, #0
 8008ace:	46b8      	mov	r8, r7
 8008ad0:	e03a      	b.n	8008b48 <pbuf_copy+0x90>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008ad2:	4b3a      	ldr	r3, [pc, #232]	; (8008bbc <pbuf_copy+0x104>)
 8008ad4:	f240 32ca 	movw	r2, #970	; 0x3ca
 8008ad8:	4939      	ldr	r1, [pc, #228]	; (8008bc0 <pbuf_copy+0x108>)
 8008ada:	483a      	ldr	r0, [pc, #232]	; (8008bc4 <pbuf_copy+0x10c>)
 8008adc:	f00b fd8a 	bl	80145f4 <iprintf>
 8008ae0:	f06f 000f 	mvn.w	r0, #15
 8008ae4:	e068      	b.n	8008bb8 <pbuf_copy+0x100>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008ae6:	4b35      	ldr	r3, [pc, #212]	; (8008bbc <pbuf_copy+0x104>)
 8008ae8:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008aec:	4936      	ldr	r1, [pc, #216]	; (8008bc8 <pbuf_copy+0x110>)
 8008aee:	4835      	ldr	r0, [pc, #212]	; (8008bc4 <pbuf_copy+0x10c>)
 8008af0:	f00b fd80 	bl	80145f4 <iprintf>
 8008af4:	e03c      	b.n	8008b70 <pbuf_copy+0xb8>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008af6:	4b31      	ldr	r3, [pc, #196]	; (8008bbc <pbuf_copy+0x104>)
 8008af8:	f240 32da 	movw	r2, #986	; 0x3da
 8008afc:	4933      	ldr	r1, [pc, #204]	; (8008bcc <pbuf_copy+0x114>)
 8008afe:	4831      	ldr	r0, [pc, #196]	; (8008bc4 <pbuf_copy+0x10c>)
 8008b00:	f00b fd78 	bl	80145f4 <iprintf>
 8008b04:	e037      	b.n	8008b76 <pbuf_copy+0xbe>
      p_to = p_to->next;
 8008b06:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008b08:	b115      	cbz	r5, 8008b10 <pbuf_copy+0x58>
      offset_to = 0;
 8008b0a:	f04f 0800 	mov.w	r8, #0
 8008b0e:	e03a      	b.n	8008b86 <pbuf_copy+0xce>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008b10:	b914      	cbnz	r4, 8008b18 <pbuf_copy+0x60>
      offset_to = 0;
 8008b12:	f04f 0800 	mov.w	r8, #0
 8008b16:	e036      	b.n	8008b86 <pbuf_copy+0xce>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008b18:	4b28      	ldr	r3, [pc, #160]	; (8008bbc <pbuf_copy+0x104>)
 8008b1a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008b1e:	492c      	ldr	r1, [pc, #176]	; (8008bd0 <pbuf_copy+0x118>)
 8008b20:	4828      	ldr	r0, [pc, #160]	; (8008bc4 <pbuf_copy+0x10c>)
 8008b22:	f00b fd67 	bl	80145f4 <iprintf>
 8008b26:	f06f 000f 	mvn.w	r0, #15
 8008b2a:	e045      	b.n	8008bb8 <pbuf_copy+0x100>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	b37b      	cbz	r3, 8008b90 <pbuf_copy+0xd8>
 8008b30:	4b22      	ldr	r3, [pc, #136]	; (8008bbc <pbuf_copy+0x104>)
 8008b32:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8008b36:	4927      	ldr	r1, [pc, #156]	; (8008bd4 <pbuf_copy+0x11c>)
 8008b38:	4822      	ldr	r0, [pc, #136]	; (8008bc4 <pbuf_copy+0x10c>)
 8008b3a:	f00b fd5b 	bl	80145f4 <iprintf>
 8008b3e:	f06f 0005 	mvn.w	r0, #5
 8008b42:	e039      	b.n	8008bb8 <pbuf_copy+0x100>
  } while (p_from);
 8008b44:	2c00      	cmp	r4, #0
 8008b46:	d036      	beq.n	8008bb6 <pbuf_copy+0xfe>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008b48:	896e      	ldrh	r6, [r5, #10]
 8008b4a:	eba6 0608 	sub.w	r6, r6, r8
 8008b4e:	8963      	ldrh	r3, [r4, #10]
 8008b50:	1bdb      	subs	r3, r3, r7
 8008b52:	429e      	cmp	r6, r3
 8008b54:	d300      	bcc.n	8008b58 <pbuf_copy+0xa0>
      len = p_from->len - offset_from;
 8008b56:	461e      	mov	r6, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008b58:	6868      	ldr	r0, [r5, #4]
 8008b5a:	6861      	ldr	r1, [r4, #4]
 8008b5c:	4632      	mov	r2, r6
 8008b5e:	4439      	add	r1, r7
 8008b60:	4440      	add	r0, r8
 8008b62:	f00b fd1a 	bl	801459a <memcpy>
    offset_to += len;
 8008b66:	44b0      	add	r8, r6
    offset_from += len;
 8008b68:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008b6a:	896b      	ldrh	r3, [r5, #10]
 8008b6c:	4543      	cmp	r3, r8
 8008b6e:	d3ba      	bcc.n	8008ae6 <pbuf_copy+0x2e>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008b70:	8963      	ldrh	r3, [r4, #10]
 8008b72:	42bb      	cmp	r3, r7
 8008b74:	d3bf      	bcc.n	8008af6 <pbuf_copy+0x3e>
    if (offset_from >= p_from->len) {
 8008b76:	8963      	ldrh	r3, [r4, #10]
 8008b78:	42bb      	cmp	r3, r7
 8008b7a:	d801      	bhi.n	8008b80 <pbuf_copy+0xc8>
      p_from = p_from->next;
 8008b7c:	6824      	ldr	r4, [r4, #0]
      offset_from = 0;
 8008b7e:	2700      	movs	r7, #0
    if (offset_to == p_to->len) {
 8008b80:	896b      	ldrh	r3, [r5, #10]
 8008b82:	4543      	cmp	r3, r8
 8008b84:	d0bf      	beq.n	8008b06 <pbuf_copy+0x4e>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008b86:	b11c      	cbz	r4, 8008b90 <pbuf_copy+0xd8>
 8008b88:	8962      	ldrh	r2, [r4, #10]
 8008b8a:	8923      	ldrh	r3, [r4, #8]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d0cd      	beq.n	8008b2c <pbuf_copy+0x74>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008b90:	2d00      	cmp	r5, #0
 8008b92:	d0d7      	beq.n	8008b44 <pbuf_copy+0x8c>
 8008b94:	896a      	ldrh	r2, [r5, #10]
 8008b96:	892b      	ldrh	r3, [r5, #8]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d1d3      	bne.n	8008b44 <pbuf_copy+0x8c>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d0d0      	beq.n	8008b44 <pbuf_copy+0x8c>
 8008ba2:	4b06      	ldr	r3, [pc, #24]	; (8008bbc <pbuf_copy+0x104>)
 8008ba4:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8008ba8:	490a      	ldr	r1, [pc, #40]	; (8008bd4 <pbuf_copy+0x11c>)
 8008baa:	4806      	ldr	r0, [pc, #24]	; (8008bc4 <pbuf_copy+0x10c>)
 8008bac:	f00b fd22 	bl	80145f4 <iprintf>
 8008bb0:	f06f 0005 	mvn.w	r0, #5
 8008bb4:	e000      	b.n	8008bb8 <pbuf_copy+0x100>
  return ERR_OK;
 8008bb6:	2000      	movs	r0, #0
}
 8008bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bbc:	080163c8 	.word	0x080163c8
 8008bc0:	08016544 	.word	0x08016544
 8008bc4:	08015608 	.word	0x08015608
 8008bc8:	08016574 	.word	0x08016574
 8008bcc:	0801658c 	.word	0x0801658c
 8008bd0:	080165a8 	.word	0x080165a8
 8008bd4:	080165b8 	.word	0x080165b8

08008bd8 <pbuf_copy_partial>:
{
 8008bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008bdc:	b128      	cbz	r0, 8008bea <pbuf_copy_partial+0x12>
 8008bde:	460f      	mov	r7, r1
 8008be0:	4690      	mov	r8, r2
 8008be2:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008be4:	b161      	cbz	r1, 8008c00 <pbuf_copy_partial+0x28>
  u16_t left = 0;
 8008be6:	2600      	movs	r6, #0
 8008be8:	e027      	b.n	8008c3a <pbuf_copy_partial+0x62>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008bea:	4b1a      	ldr	r3, [pc, #104]	; (8008c54 <pbuf_copy_partial+0x7c>)
 8008bec:	f240 420a 	movw	r2, #1034	; 0x40a
 8008bf0:	4919      	ldr	r1, [pc, #100]	; (8008c58 <pbuf_copy_partial+0x80>)
 8008bf2:	481a      	ldr	r0, [pc, #104]	; (8008c5c <pbuf_copy_partial+0x84>)
 8008bf4:	f00b fcfe 	bl	80145f4 <iprintf>
 8008bf8:	2600      	movs	r6, #0
}
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008c00:	4b14      	ldr	r3, [pc, #80]	; (8008c54 <pbuf_copy_partial+0x7c>)
 8008c02:	f240 420b 	movw	r2, #1035	; 0x40b
 8008c06:	4916      	ldr	r1, [pc, #88]	; (8008c60 <pbuf_copy_partial+0x88>)
 8008c08:	4814      	ldr	r0, [pc, #80]	; (8008c5c <pbuf_copy_partial+0x84>)
 8008c0a:	f00b fcf3 	bl	80145f4 <iprintf>
 8008c0e:	2600      	movs	r6, #0
 8008c10:	e7f3      	b.n	8008bfa <pbuf_copy_partial+0x22>
      buf_copy_len = (u16_t)(p->len - offset);
 8008c12:	896a      	ldrh	r2, [r5, #10]
 8008c14:	1ad2      	subs	r2, r2, r3
 8008c16:	b294      	uxth	r4, r2
      if (buf_copy_len > len) {
 8008c18:	45a0      	cmp	r8, r4
 8008c1a:	d200      	bcs.n	8008c1e <pbuf_copy_partial+0x46>
        buf_copy_len = len;
 8008c1c:	4644      	mov	r4, r8
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008c1e:	6869      	ldr	r1, [r5, #4]
 8008c20:	4622      	mov	r2, r4
 8008c22:	4419      	add	r1, r3
 8008c24:	19b8      	adds	r0, r7, r6
 8008c26:	f00b fcb8 	bl	801459a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008c2a:	4426      	add	r6, r4
 8008c2c:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 8008c2e:	eba8 0404 	sub.w	r4, r8, r4
 8008c32:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8008c36:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008c38:	682d      	ldr	r5, [r5, #0]
 8008c3a:	f1b8 0f00 	cmp.w	r8, #0
 8008c3e:	d0dc      	beq.n	8008bfa <pbuf_copy_partial+0x22>
 8008c40:	2d00      	cmp	r5, #0
 8008c42:	d0da      	beq.n	8008bfa <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d0e4      	beq.n	8008c12 <pbuf_copy_partial+0x3a>
 8008c48:	8969      	ldrh	r1, [r5, #10]
 8008c4a:	4299      	cmp	r1, r3
 8008c4c:	d8e1      	bhi.n	8008c12 <pbuf_copy_partial+0x3a>
      offset = (u16_t)(offset - p->len);
 8008c4e:	1a5b      	subs	r3, r3, r1
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	e7f1      	b.n	8008c38 <pbuf_copy_partial+0x60>
 8008c54:	080163c8 	.word	0x080163c8
 8008c58:	080165e4 	.word	0x080165e4
 8008c5c:	08015608 	.word	0x08015608
 8008c60:	08016604 	.word	0x08016604

08008c64 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8008c64:	b508      	push	{r3, lr}
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8008c66:	f7ff fc6b 	bl	8008540 <pbuf_skip_const>
  return LWIP_CONST_CAST(struct pbuf *, out);
}
 8008c6a:	bd08      	pop	{r3, pc}

08008c6c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8008c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8008c70:	b148      	cbz	r0, 8008c86 <pbuf_take+0x1a>
 8008c72:	4688      	mov	r8, r1
 8008c74:	4691      	mov	r9, r2
 8008c76:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8008c78:	b179      	cbz	r1, 8008c9a <pbuf_take+0x2e>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8008c7a:	8903      	ldrh	r3, [r0, #8]
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d316      	bcc.n	8008cae <pbuf_take+0x42>
  size_t total_copy_len = len;
 8008c80:	4616      	mov	r6, r2
  size_t copied_total = 0;
 8008c82:	2700      	movs	r7, #0
 8008c84:	e02e      	b.n	8008ce4 <pbuf_take+0x78>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8008c86:	4b22      	ldr	r3, [pc, #136]	; (8008d10 <pbuf_take+0xa4>)
 8008c88:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8008c8c:	4921      	ldr	r1, [pc, #132]	; (8008d14 <pbuf_take+0xa8>)
 8008c8e:	4822      	ldr	r0, [pc, #136]	; (8008d18 <pbuf_take+0xac>)
 8008c90:	f00b fcb0 	bl	80145f4 <iprintf>
 8008c94:	f06f 000f 	mvn.w	r0, #15
 8008c98:	e036      	b.n	8008d08 <pbuf_take+0x9c>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8008c9a:	4b1d      	ldr	r3, [pc, #116]	; (8008d10 <pbuf_take+0xa4>)
 8008c9c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8008ca0:	491e      	ldr	r1, [pc, #120]	; (8008d1c <pbuf_take+0xb0>)
 8008ca2:	481d      	ldr	r0, [pc, #116]	; (8008d18 <pbuf_take+0xac>)
 8008ca4:	f00b fca6 	bl	80145f4 <iprintf>
 8008ca8:	f06f 000f 	mvn.w	r0, #15
 8008cac:	e02c      	b.n	8008d08 <pbuf_take+0x9c>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8008cae:	4b18      	ldr	r3, [pc, #96]	; (8008d10 <pbuf_take+0xa4>)
 8008cb0:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8008cb4:	491a      	ldr	r1, [pc, #104]	; (8008d20 <pbuf_take+0xb4>)
 8008cb6:	4818      	ldr	r0, [pc, #96]	; (8008d18 <pbuf_take+0xac>)
 8008cb8:	f00b fc9c 	bl	80145f4 <iprintf>
 8008cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc0:	e022      	b.n	8008d08 <pbuf_take+0x9c>
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8008cc2:	4b13      	ldr	r3, [pc, #76]	; (8008d10 <pbuf_take+0xa4>)
 8008cc4:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8008cc8:	4916      	ldr	r1, [pc, #88]	; (8008d24 <pbuf_take+0xb8>)
 8008cca:	4813      	ldr	r0, [pc, #76]	; (8008d18 <pbuf_take+0xac>)
 8008ccc:	f00b fc92 	bl	80145f4 <iprintf>
 8008cd0:	e00b      	b.n	8008cea <pbuf_take+0x7e>
    if (buf_copy_len > p->len) {
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8008cd2:	4622      	mov	r2, r4
 8008cd4:	eb08 0107 	add.w	r1, r8, r7
 8008cd8:	6868      	ldr	r0, [r5, #4]
 8008cda:	f00b fc5e 	bl	801459a <memcpy>
    total_copy_len -= buf_copy_len;
 8008cde:	1b36      	subs	r6, r6, r4
    copied_total += buf_copy_len;
 8008ce0:	4427      	add	r7, r4
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008ce2:	682d      	ldr	r5, [r5, #0]
 8008ce4:	b136      	cbz	r6, 8008cf4 <pbuf_take+0x88>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8008ce6:	2d00      	cmp	r5, #0
 8008ce8:	d0eb      	beq.n	8008cc2 <pbuf_take+0x56>
    if (buf_copy_len > p->len) {
 8008cea:	896c      	ldrh	r4, [r5, #10]
 8008cec:	42b4      	cmp	r4, r6
 8008cee:	d3f0      	bcc.n	8008cd2 <pbuf_take+0x66>
    buf_copy_len = total_copy_len;
 8008cf0:	4634      	mov	r4, r6
 8008cf2:	e7ee      	b.n	8008cd2 <pbuf_take+0x66>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8008cf4:	454f      	cmp	r7, r9
 8008cf6:	d009      	beq.n	8008d0c <pbuf_take+0xa0>
 8008cf8:	4b05      	ldr	r3, [pc, #20]	; (8008d10 <pbuf_take+0xa4>)
 8008cfa:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8008cfe:	490a      	ldr	r1, [pc, #40]	; (8008d28 <pbuf_take+0xbc>)
 8008d00:	4805      	ldr	r0, [pc, #20]	; (8008d18 <pbuf_take+0xac>)
 8008d02:	f00b fc77 	bl	80145f4 <iprintf>
  return ERR_OK;
 8008d06:	2000      	movs	r0, #0
}
 8008d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return ERR_OK;
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	e7fb      	b.n	8008d08 <pbuf_take+0x9c>
 8008d10:	080163c8 	.word	0x080163c8
 8008d14:	080166f8 	.word	0x080166f8
 8008d18:	08015608 	.word	0x08015608
 8008d1c:	08016710 	.word	0x08016710
 8008d20:	0801672c 	.word	0x0801672c
 8008d24:	0801674c 	.word	0x0801674c
 8008d28:	08016764 	.word	0x08016764

08008d2c <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8008d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	460f      	mov	r7, r1
 8008d32:	4614      	mov	r4, r2
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8008d34:	f10d 0206 	add.w	r2, sp, #6
 8008d38:	4619      	mov	r1, r3
 8008d3a:	f7ff ff93 	bl	8008c64 <pbuf_skip>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8008d3e:	b358      	cbz	r0, 8008d98 <pbuf_take_at+0x6c>
 8008d40:	4606      	mov	r6, r0
 8008d42:	8901      	ldrh	r1, [r0, #8]
 8008d44:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008d48:	191a      	adds	r2, r3, r4
 8008d4a:	4291      	cmp	r1, r2
 8008d4c:	db27      	blt.n	8008d9e <pbuf_take_at+0x72>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8008d4e:	8942      	ldrh	r2, [r0, #10]
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d207      	bcs.n	8008d64 <pbuf_take_at+0x38>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8008d54:	8973      	ldrh	r3, [r6, #10]
 8008d56:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8008d5a:	1a1a      	subs	r2, r3, r0
 8008d5c:	4294      	cmp	r4, r2
 8008d5e:	dd09      	ble.n	8008d74 <pbuf_take_at+0x48>
 8008d60:	b295      	uxth	r5, r2
 8008d62:	e008      	b.n	8008d76 <pbuf_take_at+0x4a>
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8008d64:	4b0f      	ldr	r3, [pc, #60]	; (8008da4 <pbuf_take_at+0x78>)
 8008d66:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8008d6a:	490f      	ldr	r1, [pc, #60]	; (8008da8 <pbuf_take_at+0x7c>)
 8008d6c:	480f      	ldr	r0, [pc, #60]	; (8008dac <pbuf_take_at+0x80>)
 8008d6e:	f00b fc41 	bl	80145f4 <iprintf>
 8008d72:	e7ef      	b.n	8008d54 <pbuf_take_at+0x28>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8008d74:	4625      	mov	r5, r4
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8008d76:	6873      	ldr	r3, [r6, #4]
 8008d78:	462a      	mov	r2, r5
 8008d7a:	4639      	mov	r1, r7
 8008d7c:	4418      	add	r0, r3
 8008d7e:	f00b fc0c 	bl	801459a <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8008d82:	1b62      	subs	r2, r4, r5
 8008d84:	b292      	uxth	r2, r2
    src_ptr += first_copy_len;
 8008d86:	1979      	adds	r1, r7, r5
    if (remaining_len > 0) {
 8008d88:	b912      	cbnz	r2, 8008d90 <pbuf_take_at+0x64>
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
 8008d8a:	2000      	movs	r0, #0
  }
  return ERR_MEM;
}
 8008d8c:	b003      	add	sp, #12
 8008d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return pbuf_take(q->next, src_ptr, remaining_len);
 8008d90:	6830      	ldr	r0, [r6, #0]
 8008d92:	f7ff ff6b 	bl	8008c6c <pbuf_take>
 8008d96:	e7f9      	b.n	8008d8c <pbuf_take_at+0x60>
  return ERR_MEM;
 8008d98:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9c:	e7f6      	b.n	8008d8c <pbuf_take_at+0x60>
 8008d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008da2:	e7f3      	b.n	8008d8c <pbuf_take_at+0x60>
 8008da4:	080163c8 	.word	0x080163c8
 8008da8:	0801677c 	.word	0x0801677c
 8008dac:	08015608 	.word	0x08015608

08008db0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008db0:	b538      	push	{r3, r4, r5, lr}
 8008db2:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008db4:	460a      	mov	r2, r1
 8008db6:	8929      	ldrh	r1, [r5, #8]
 8008db8:	f7ff fd18 	bl	80087ec <pbuf_alloc>
  if (q == NULL) {
 8008dbc:	4604      	mov	r4, r0
 8008dbe:	b118      	cbz	r0, 8008dc8 <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	f7ff fe79 	bl	8008ab8 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008dc6:	b908      	cbnz	r0, 8008dcc <pbuf_clone+0x1c>
  return q;
}
 8008dc8:	4620      	mov	r0, r4
 8008dca:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008dcc:	4b03      	ldr	r3, [pc, #12]	; (8008ddc <pbuf_clone+0x2c>)
 8008dce:	f240 5224 	movw	r2, #1316	; 0x524
 8008dd2:	4903      	ldr	r1, [pc, #12]	; (8008de0 <pbuf_clone+0x30>)
 8008dd4:	4803      	ldr	r0, [pc, #12]	; (8008de4 <pbuf_clone+0x34>)
 8008dd6:	f00b fc0d 	bl	80145f4 <iprintf>
 8008dda:	e7f5      	b.n	8008dc8 <pbuf_clone+0x18>
 8008ddc:	080163c8 	.word	0x080163c8
 8008de0:	08016530 	.word	0x08016530
 8008de4:	08015608 	.word	0x08015608

08008de8 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8008de8:	b500      	push	{lr}
 8008dea:	b083      	sub	sp, #12
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8008dec:	f10d 0206 	add.w	r2, sp, #6
 8008df0:	f7ff fba6 	bl	8008540 <pbuf_skip_const>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8008df4:	b148      	cbz	r0, 8008e0a <pbuf_try_get_at+0x22>
 8008df6:	8941      	ldrh	r1, [r0, #10]
 8008df8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008dfc:	4291      	cmp	r1, r2
 8008dfe:	d907      	bls.n	8008e10 <pbuf_try_get_at+0x28>
    return ((u8_t *)q->payload)[q_idx];
 8008e00:	6843      	ldr	r3, [r0, #4]
 8008e02:	5c98      	ldrb	r0, [r3, r2]
  }
  return -1;
}
 8008e04:	b003      	add	sp, #12
 8008e06:	f85d fb04 	ldr.w	pc, [sp], #4
  return -1;
 8008e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0e:	e7f9      	b.n	8008e04 <pbuf_try_get_at+0x1c>
 8008e10:	f04f 30ff 	mov.w	r0, #4294967295
 8008e14:	e7f6      	b.n	8008e04 <pbuf_try_get_at+0x1c>

08008e16 <pbuf_get_at>:
{
 8008e16:	b508      	push	{r3, lr}
  int ret = pbuf_try_get_at(p, offset);
 8008e18:	f7ff ffe6 	bl	8008de8 <pbuf_try_get_at>
  if (ret >= 0) {
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	db01      	blt.n	8008e24 <pbuf_get_at+0xe>
    return (u8_t)ret;
 8008e20:	b2c0      	uxtb	r0, r0
}
 8008e22:	bd08      	pop	{r3, pc}
  return 0;
 8008e24:	2000      	movs	r0, #0
 8008e26:	e7fc      	b.n	8008e22 <pbuf_get_at+0xc>

08008e28 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8008e28:	b510      	push	{r4, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	4614      	mov	r4, r2
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8008e2e:	f10d 0206 	add.w	r2, sp, #6
 8008e32:	f7ff ff17 	bl	8008c64 <pbuf_skip>

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8008e36:	b130      	cbz	r0, 8008e46 <pbuf_put_at+0x1e>
 8008e38:	8941      	ldrh	r1, [r0, #10]
 8008e3a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008e3e:	4291      	cmp	r1, r2
 8008e40:	d901      	bls.n	8008e46 <pbuf_put_at+0x1e>
    ((u8_t *)q->payload)[q_idx] = data;
 8008e42:	6843      	ldr	r3, [r0, #4]
 8008e44:	549c      	strb	r4, [r3, r2]
  }
}
 8008e46:	b002      	add	sp, #8
 8008e48:	bd10      	pop	{r4, pc}
	...

08008e4c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008e4c:	b538      	push	{r3, r4, r5, lr}
 8008e4e:	4604      	mov	r4, r0
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008e50:	460d      	mov	r5, r1
 8008e52:	b939      	cbnz	r1, 8008e64 <tcp_remove_listener+0x18>
 8008e54:	4b08      	ldr	r3, [pc, #32]	; (8008e78 <tcp_remove_listener+0x2c>)
 8008e56:	22ff      	movs	r2, #255	; 0xff
 8008e58:	4908      	ldr	r1, [pc, #32]	; (8008e7c <tcp_remove_listener+0x30>)
 8008e5a:	4809      	ldr	r0, [pc, #36]	; (8008e80 <tcp_remove_listener+0x34>)
 8008e5c:	f00b fbca 	bl	80145f4 <iprintf>
 8008e60:	e000      	b.n	8008e64 <tcp_remove_listener+0x18>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008e62:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8008e64:	b13c      	cbz	r4, 8008e76 <tcp_remove_listener+0x2a>
    if (pcb->listener == lpcb) {
 8008e66:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8008e6a:	42ab      	cmp	r3, r5
 8008e6c:	d1f9      	bne.n	8008e62 <tcp_remove_listener+0x16>
      pcb->listener = NULL;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8008e74:	e7f5      	b.n	8008e62 <tcp_remove_listener+0x16>
    }
  }
}
 8008e76:	bd38      	pop	{r3, r4, r5, pc}
 8008e78:	08016a64 	.word	0x08016a64
 8008e7c:	08016a94 	.word	0x08016a94
 8008e80:	08015608 	.word	0x08015608

08008e84 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008e84:	b538      	push	{r3, r4, r5, lr}
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008e86:	4605      	mov	r5, r0
 8008e88:	b128      	cbz	r0, 8008e96 <tcp_listen_closed+0x12>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008e8a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d109      	bne.n	8008ea6 <tcp_listen_closed+0x22>
{
 8008e92:	2401      	movs	r4, #1
 8008e94:	e017      	b.n	8008ec6 <tcp_listen_closed+0x42>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008e96:	4b0d      	ldr	r3, [pc, #52]	; (8008ecc <tcp_listen_closed+0x48>)
 8008e98:	f240 1211 	movw	r2, #273	; 0x111
 8008e9c:	490c      	ldr	r1, [pc, #48]	; (8008ed0 <tcp_listen_closed+0x4c>)
 8008e9e:	480d      	ldr	r0, [pc, #52]	; (8008ed4 <tcp_listen_closed+0x50>)
 8008ea0:	f00b fba8 	bl	80145f4 <iprintf>
 8008ea4:	e7f1      	b.n	8008e8a <tcp_listen_closed+0x6>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008ea6:	4b09      	ldr	r3, [pc, #36]	; (8008ecc <tcp_listen_closed+0x48>)
 8008ea8:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008eac:	490a      	ldr	r1, [pc, #40]	; (8008ed8 <tcp_listen_closed+0x54>)
 8008eae:	4809      	ldr	r0, [pc, #36]	; (8008ed4 <tcp_listen_closed+0x50>)
 8008eb0:	f00b fba0 	bl	80145f4 <iprintf>
 8008eb4:	e7ed      	b.n	8008e92 <tcp_listen_closed+0xe>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008eb6:	4b09      	ldr	r3, [pc, #36]	; (8008edc <tcp_listen_closed+0x58>)
 8008eb8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	6818      	ldr	r0, [r3, #0]
 8008ec0:	f7ff ffc4 	bl	8008e4c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008ec4:	3401      	adds	r4, #1
 8008ec6:	2c03      	cmp	r4, #3
 8008ec8:	d9f5      	bls.n	8008eb6 <tcp_listen_closed+0x32>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008eca:	bd38      	pop	{r3, r4, r5, pc}
 8008ecc:	08016a64 	.word	0x08016a64
 8008ed0:	080168b0 	.word	0x080168b0
 8008ed4:	08015608 	.word	0x08015608
 8008ed8:	080168bc 	.word	0x080168bc
 8008edc:	08016924 	.word	0x08016924

08008ee0 <tcp_free_listen>:
{
 8008ee0:	b510      	push	{r4, lr}
 8008ee2:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008ee4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d004      	beq.n	8008ef6 <tcp_free_listen+0x16>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008eec:	4621      	mov	r1, r4
 8008eee:	2002      	movs	r0, #2
 8008ef0:	f7fe ffd4 	bl	8007e9c <memp_free>
}
 8008ef4:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008ef6:	4b03      	ldr	r3, [pc, #12]	; (8008f04 <tcp_free_listen+0x24>)
 8008ef8:	22df      	movs	r2, #223	; 0xdf
 8008efa:	4903      	ldr	r1, [pc, #12]	; (8008f08 <tcp_free_listen+0x28>)
 8008efc:	4803      	ldr	r0, [pc, #12]	; (8008f0c <tcp_free_listen+0x2c>)
 8008efe:	f00b fb79 	bl	80145f4 <iprintf>
 8008f02:	e7f3      	b.n	8008eec <tcp_free_listen+0xc>
 8008f04:	08016a64 	.word	0x08016a64
 8008f08:	08016884 	.word	0x08016884
 8008f0c:	08015608 	.word	0x08015608

08008f10 <tcp_close_shutdown_fin>:
  return ERR_OK;
}

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008f10:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008f12:	4604      	mov	r4, r0
 8008f14:	b148      	cbz	r0, 8008f2a <tcp_close_shutdown_fin+0x1a>

  switch (pcb->state) {
 8008f16:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008f1a:	2b04      	cmp	r3, #4
 8008f1c:	d01b      	beq.n	8008f56 <tcp_close_shutdown_fin+0x46>
 8008f1e:	2b07      	cmp	r3, #7
 8008f20:	d023      	beq.n	8008f6a <tcp_close_shutdown_fin+0x5a>
 8008f22:	2b03      	cmp	r3, #3
 8008f24:	d009      	beq.n	8008f3a <tcp_close_shutdown_fin+0x2a>
        pcb->state = LAST_ACK;
      }
      break;
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008f26:	2500      	movs	r5, #0
 8008f28:	e013      	b.n	8008f52 <tcp_close_shutdown_fin+0x42>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008f2a:	4b1a      	ldr	r3, [pc, #104]	; (8008f94 <tcp_close_shutdown_fin+0x84>)
 8008f2c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008f30:	4919      	ldr	r1, [pc, #100]	; (8008f98 <tcp_close_shutdown_fin+0x88>)
 8008f32:	481a      	ldr	r0, [pc, #104]	; (8008f9c <tcp_close_shutdown_fin+0x8c>)
 8008f34:	f00b fb5e 	bl	80145f4 <iprintf>
 8008f38:	e7ed      	b.n	8008f16 <tcp_close_shutdown_fin+0x6>
      err = tcp_send_fin(pcb);
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f003 fac0 	bl	800c4c0 <tcp_send_fin>
      if (err == ERR_OK) {
 8008f40:	4605      	mov	r5, r0
 8008f42:	b910      	cbnz	r0, 8008f4a <tcp_close_shutdown_fin+0x3a>
        pcb->state = FIN_WAIT_1;
 8008f44:	2305      	movs	r3, #5
 8008f46:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  }

  if (err == ERR_OK) {
 8008f4a:	b1c5      	cbz	r5, 8008f7e <tcp_close_shutdown_fin+0x6e>
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
  } else if (err == ERR_MEM) {
 8008f4c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008f50:	d019      	beq.n	8008f86 <tcp_close_shutdown_fin+0x76>
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
  }
  return err;
}
 8008f52:	4628      	mov	r0, r5
 8008f54:	bd38      	pop	{r3, r4, r5, pc}
      err = tcp_send_fin(pcb);
 8008f56:	4620      	mov	r0, r4
 8008f58:	f003 fab2 	bl	800c4c0 <tcp_send_fin>
      if (err == ERR_OK) {
 8008f5c:	4605      	mov	r5, r0
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d1f3      	bne.n	8008f4a <tcp_close_shutdown_fin+0x3a>
        pcb->state = FIN_WAIT_1;
 8008f62:	2305      	movs	r3, #5
 8008f64:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8008f68:	e7ef      	b.n	8008f4a <tcp_close_shutdown_fin+0x3a>
      err = tcp_send_fin(pcb);
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f003 faa8 	bl	800c4c0 <tcp_send_fin>
      if (err == ERR_OK) {
 8008f70:	4605      	mov	r5, r0
 8008f72:	2800      	cmp	r0, #0
 8008f74:	d1e9      	bne.n	8008f4a <tcp_close_shutdown_fin+0x3a>
        pcb->state = LAST_ACK;
 8008f76:	2309      	movs	r3, #9
 8008f78:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8008f7c:	e7e5      	b.n	8008f4a <tcp_close_shutdown_fin+0x3a>
    tcp_output(pcb);
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f003 fc34 	bl	800c7ec <tcp_output>
 8008f84:	e7e5      	b.n	8008f52 <tcp_close_shutdown_fin+0x42>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008f86:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8008f88:	f043 0308 	orr.w	r3, r3, #8
 8008f8c:	8763      	strh	r3, [r4, #58]	; 0x3a
    return ERR_OK;
 8008f8e:	2500      	movs	r5, #0
 8008f90:	e7df      	b.n	8008f52 <tcp_close_shutdown_fin+0x42>
 8008f92:	bf00      	nop
 8008f94:	08016a64 	.word	0x08016a64
 8008f98:	080168b0 	.word	0x080168b0
 8008f9c:	08015608 	.word	0x08015608

08008fa0 <tcp_handle_closepend>:
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008fa0:	4b09      	ldr	r3, [pc, #36]	; (8008fc8 <tcp_handle_closepend+0x28>)
 8008fa2:	6818      	ldr	r0, [r3, #0]

  while (pcb != NULL) {
 8008fa4:	b178      	cbz	r0, 8008fc6 <tcp_handle_closepend+0x26>
{
 8008fa6:	b510      	push	{r4, lr}
 8008fa8:	e001      	b.n	8008fae <tcp_handle_closepend+0xe>
 8008faa:	4620      	mov	r0, r4
  while (pcb != NULL) {
 8008fac:	b154      	cbz	r4, 8008fc4 <tcp_handle_closepend+0x24>
    struct tcp_pcb *next = pcb->next;
 8008fae:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008fb0:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 8008fb2:	f013 0f08 	tst.w	r3, #8
 8008fb6:	d0f8      	beq.n	8008faa <tcp_handle_closepend+0xa>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008fb8:	f023 0308 	bic.w	r3, r3, #8
 8008fbc:	8743      	strh	r3, [r0, #58]	; 0x3a
      tcp_close_shutdown_fin(pcb);
 8008fbe:	f7ff ffa7 	bl	8008f10 <tcp_close_shutdown_fin>
 8008fc2:	e7f2      	b.n	8008faa <tcp_handle_closepend+0xa>
    }
    pcb = next;
  }
}
 8008fc4:	bd10      	pop	{r4, pc}
 8008fc6:	4770      	bx	lr
 8008fc8:	20008c44 	.word	0x20008c44

08008fcc <tcp_init>:
{
 8008fcc:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008fce:	f00b fb8d 	bl	80146ec <rand>
 8008fd2:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8008fd6:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8008fda:	4b01      	ldr	r3, [pc, #4]	; (8008fe0 <tcp_init+0x14>)
 8008fdc:	8018      	strh	r0, [r3, #0]
}
 8008fde:	bd08      	pop	{r3, pc}
 8008fe0:	20000014 	.word	0x20000014

08008fe4 <tcp_free>:
{
 8008fe4:	b510      	push	{r4, lr}
 8008fe6:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008fe8:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d004      	beq.n	8008ffa <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	2001      	movs	r0, #1
 8008ff4:	f7fe ff52 	bl	8007e9c <memp_free>
}
 8008ff8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008ffa:	4b03      	ldr	r3, [pc, #12]	; (8009008 <tcp_free+0x24>)
 8008ffc:	22d4      	movs	r2, #212	; 0xd4
 8008ffe:	4903      	ldr	r1, [pc, #12]	; (800900c <tcp_free+0x28>)
 8009000:	4803      	ldr	r0, [pc, #12]	; (8009010 <tcp_free+0x2c>)
 8009002:	f00b faf7 	bl	80145f4 <iprintf>
 8009006:	e7f3      	b.n	8008ff0 <tcp_free+0xc>
 8009008:	08016a64 	.word	0x08016a64
 800900c:	08016870 	.word	0x08016870
 8009010:	08015608 	.word	0x08015608

08009014 <tcp_update_rcv_ann_wnd>:
{
 8009014:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009016:	4604      	mov	r4, r0
 8009018:	b198      	cbz	r0, 8009042 <tcp_update_rcv_ann_wnd+0x2e>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800901a:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800901c:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
 8009020:	1868      	adds	r0, r5, r1
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009022:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009024:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8009028:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800902c:	bf94      	ite	ls
 800902e:	18d3      	addls	r3, r2, r3
 8009030:	f502 6386 	addhi.w	r3, r2, #1072	; 0x430
 8009034:	1ac3      	subs	r3, r0, r3
 8009036:	2b00      	cmp	r3, #0
 8009038:	db0b      	blt.n	8009052 <tcp_update_rcv_ann_wnd+0x3e>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800903a:	f8a4 104a 	strh.w	r1, [r4, #74]	; 0x4a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800903e:	1a80      	subs	r0, r0, r2
}
 8009040:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009042:	4b0f      	ldr	r3, [pc, #60]	; (8009080 <tcp_update_rcv_ann_wnd+0x6c>)
 8009044:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009048:	490e      	ldr	r1, [pc, #56]	; (8009084 <tcp_update_rcv_ann_wnd+0x70>)
 800904a:	480f      	ldr	r0, [pc, #60]	; (8009088 <tcp_update_rcv_ann_wnd+0x74>)
 800904c:	f00b fad2 	bl	80145f4 <iprintf>
 8009050:	e7e3      	b.n	800901a <tcp_update_rcv_ann_wnd+0x6>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009052:	1aab      	subs	r3, r5, r2
 8009054:	2b00      	cmp	r3, #0
 8009056:	dd03      	ble.n	8009060 <tcp_update_rcv_ann_wnd+0x4c>
      pcb->rcv_ann_wnd = 0;
 8009058:	2000      	movs	r0, #0
 800905a:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
 800905e:	e7ef      	b.n	8009040 <tcp_update_rcv_ann_wnd+0x2c>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009060:	1b55      	subs	r5, r2, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009062:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8009066:	d203      	bcs.n	8009070 <tcp_update_rcv_ann_wnd+0x5c>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009068:	f8a4 504a 	strh.w	r5, [r4, #74]	; 0x4a
    return 0;
 800906c:	2000      	movs	r0, #0
 800906e:	e7e7      	b.n	8009040 <tcp_update_rcv_ann_wnd+0x2c>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009070:	4b03      	ldr	r3, [pc, #12]	; (8009080 <tcp_update_rcv_ann_wnd+0x6c>)
 8009072:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009076:	4905      	ldr	r1, [pc, #20]	; (800908c <tcp_update_rcv_ann_wnd+0x78>)
 8009078:	4803      	ldr	r0, [pc, #12]	; (8009088 <tcp_update_rcv_ann_wnd+0x74>)
 800907a:	f00b fabb 	bl	80145f4 <iprintf>
 800907e:	e7f3      	b.n	8009068 <tcp_update_rcv_ann_wnd+0x54>
 8009080:	08016a64 	.word	0x08016a64
 8009084:	08016ca4 	.word	0x08016ca4
 8009088:	08015608 	.word	0x08015608
 800908c:	08016cc8 	.word	0x08016cc8

08009090 <tcp_recved>:
{
 8009090:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009092:	b1c8      	cbz	r0, 80090c8 <tcp_recved+0x38>
 8009094:	460c      	mov	r4, r1
 8009096:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009098:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800909c:	2b01      	cmp	r3, #1
 800909e:	d01b      	beq.n	80090d8 <tcp_recved+0x48>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80090a0:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 80090a4:	1919      	adds	r1, r3, r4
 80090a6:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80090a8:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 80090ac:	d801      	bhi.n	80090b2 <tcp_recved+0x22>
 80090ae:	428b      	cmp	r3, r1
 80090b0:	d91a      	bls.n	80090e8 <tcp_recved+0x58>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80090b2:	f44f 6306 	mov.w	r3, #2144	; 0x860
 80090b6:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80090ba:	4628      	mov	r0, r5
 80090bc:	f7ff ffaa 	bl	8009014 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80090c0:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 80090c4:	d213      	bcs.n	80090ee <tcp_recved+0x5e>
}
 80090c6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80090c8:	4b0d      	ldr	r3, [pc, #52]	; (8009100 <tcp_recved+0x70>)
 80090ca:	f240 32cf 	movw	r2, #975	; 0x3cf
 80090ce:	490d      	ldr	r1, [pc, #52]	; (8009104 <tcp_recved+0x74>)
 80090d0:	480d      	ldr	r0, [pc, #52]	; (8009108 <tcp_recved+0x78>)
 80090d2:	f00b fa8f 	bl	80145f4 <iprintf>
 80090d6:	e7f6      	b.n	80090c6 <tcp_recved+0x36>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80090d8:	4b09      	ldr	r3, [pc, #36]	; (8009100 <tcp_recved+0x70>)
 80090da:	f240 32d3 	movw	r2, #979	; 0x3d3
 80090de:	490b      	ldr	r1, [pc, #44]	; (800910c <tcp_recved+0x7c>)
 80090e0:	4809      	ldr	r0, [pc, #36]	; (8009108 <tcp_recved+0x78>)
 80090e2:	f00b fa87 	bl	80145f4 <iprintf>
 80090e6:	e7db      	b.n	80090a0 <tcp_recved+0x10>
    pcb->rcv_wnd = rcv_wnd;
 80090e8:	f8a5 1048 	strh.w	r1, [r5, #72]	; 0x48
 80090ec:	e7e5      	b.n	80090ba <tcp_recved+0x2a>
    tcp_ack_now(pcb);
 80090ee:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
 80090f0:	f043 0302 	orr.w	r3, r3, #2
 80090f4:	876b      	strh	r3, [r5, #58]	; 0x3a
    tcp_output(pcb);
 80090f6:	4628      	mov	r0, r5
 80090f8:	f003 fb78 	bl	800c7ec <tcp_output>
 80090fc:	e7e3      	b.n	80090c6 <tcp_recved+0x36>
 80090fe:	bf00      	nop
 8009100:	08016a64 	.word	0x08016a64
 8009104:	08016a24 	.word	0x08016a24
 8009108:	08015608 	.word	0x08015608
 800910c:	08016a3c 	.word	0x08016a3c

08009110 <tcp_seg_free>:
  if (seg != NULL) {
 8009110:	b150      	cbz	r0, 8009128 <tcp_seg_free+0x18>
{
 8009112:	b510      	push	{r4, lr}
 8009114:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8009116:	6840      	ldr	r0, [r0, #4]
 8009118:	b108      	cbz	r0, 800911e <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800911a:	f7ff fb05 	bl	8008728 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800911e:	4621      	mov	r1, r4
 8009120:	2003      	movs	r0, #3
 8009122:	f7fe febb 	bl	8007e9c <memp_free>
}
 8009126:	bd10      	pop	{r4, pc}
 8009128:	4770      	bx	lr

0800912a <tcp_segs_free>:
  while (seg != NULL) {
 800912a:	b138      	cbz	r0, 800913c <tcp_segs_free+0x12>
{
 800912c:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 800912e:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8009130:	f7ff ffee 	bl	8009110 <tcp_seg_free>
    seg = next;
 8009134:	4620      	mov	r0, r4
  while (seg != NULL) {
 8009136:	2c00      	cmp	r4, #0
 8009138:	d1f9      	bne.n	800912e <tcp_segs_free+0x4>
}
 800913a:	bd10      	pop	{r4, pc}
 800913c:	4770      	bx	lr
	...

08009140 <tcp_seg_copy>:
{
 8009140:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009142:	4605      	mov	r5, r0
 8009144:	b198      	cbz	r0, 800916e <tcp_seg_copy+0x2e>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009146:	2003      	movs	r0, #3
 8009148:	f7fe fe8e 	bl	8007e68 <memp_malloc>
  if (cseg == NULL) {
 800914c:	4604      	mov	r4, r0
 800914e:	b160      	cbz	r0, 800916a <tcp_seg_copy+0x2a>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009150:	682b      	ldr	r3, [r5, #0]
 8009152:	6868      	ldr	r0, [r5, #4]
 8009154:	68a9      	ldr	r1, [r5, #8]
 8009156:	68ea      	ldr	r2, [r5, #12]
 8009158:	6023      	str	r3, [r4, #0]
 800915a:	6060      	str	r0, [r4, #4]
 800915c:	60a1      	str	r1, [r4, #8]
 800915e:	60e2      	str	r2, [r4, #12]
 8009160:	692b      	ldr	r3, [r5, #16]
 8009162:	6123      	str	r3, [r4, #16]
  pbuf_ref(cseg->p);
 8009164:	6860      	ldr	r0, [r4, #4]
 8009166:	f7ff fc4d 	bl	8008a04 <pbuf_ref>
}
 800916a:	4620      	mov	r0, r4
 800916c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800916e:	4b04      	ldr	r3, [pc, #16]	; (8009180 <tcp_seg_copy+0x40>)
 8009170:	f240 6282 	movw	r2, #1666	; 0x682
 8009174:	4903      	ldr	r1, [pc, #12]	; (8009184 <tcp_seg_copy+0x44>)
 8009176:	4804      	ldr	r0, [pc, #16]	; (8009188 <tcp_seg_copy+0x48>)
 8009178:	f00b fa3c 	bl	80145f4 <iprintf>
 800917c:	e7e3      	b.n	8009146 <tcp_seg_copy+0x6>
 800917e:	bf00      	nop
 8009180:	08016a64 	.word	0x08016a64
 8009184:	08016abc 	.word	0x08016abc
 8009188:	08015608 	.word	0x08015608

0800918c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800918c:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800918e:	b130      	cbz	r0, 800919e <tcp_next_iss+0x12>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009190:	4b07      	ldr	r3, [pc, #28]	; (80091b0 <tcp_next_iss+0x24>)
 8009192:	6818      	ldr	r0, [r3, #0]
 8009194:	4a07      	ldr	r2, [pc, #28]	; (80091b4 <tcp_next_iss+0x28>)
 8009196:	6812      	ldr	r2, [r2, #0]
 8009198:	4410      	add	r0, r2
 800919a:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 800919c:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800919e:	4b06      	ldr	r3, [pc, #24]	; (80091b8 <tcp_next_iss+0x2c>)
 80091a0:	f640 02af 	movw	r2, #2223	; 0x8af
 80091a4:	4905      	ldr	r1, [pc, #20]	; (80091bc <tcp_next_iss+0x30>)
 80091a6:	4806      	ldr	r0, [pc, #24]	; (80091c0 <tcp_next_iss+0x34>)
 80091a8:	f00b fa24 	bl	80145f4 <iprintf>
 80091ac:	e7f0      	b.n	8009190 <tcp_next_iss+0x4>
 80091ae:	bf00      	nop
 80091b0:	20000010 	.word	0x20000010
 80091b4:	20008c48 	.word	0x20008c48
 80091b8:	08016a64 	.word	0x08016a64
 80091bc:	08016908 	.word	0x08016908
 80091c0:	08015608 	.word	0x08015608

080091c4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	4605      	mov	r5, r0
 80091c8:	460e      	mov	r6, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80091ca:	4614      	mov	r4, r2
 80091cc:	b18a      	cbz	r2, 80091f2 <tcp_eff_send_mss_netif+0x2e>

#if LWIP_IPV6
#if LWIP_IPV4
  if (IP_IS_V6(dest))
 80091ce:	b114      	cbz	r4, 80091d6 <tcp_eff_send_mss_netif+0x12>
 80091d0:	7c23      	ldrb	r3, [r4, #16]
 80091d2:	2b06      	cmp	r3, #6
 80091d4:	d015      	beq.n	8009202 <tcp_eff_send_mss_netif+0x3e>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80091d6:	b30e      	cbz	r6, 800921c <tcp_eff_send_mss_netif+0x58>
      return sendmss;
    }
    mtu = outif->mtu;
 80091d8:	f8b6 00b8 	ldrh.w	r0, [r6, #184]	; 0xb8
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80091dc:	b1f0      	cbz	r0, 800921c <tcp_eff_send_mss_netif+0x58>
    u16_t offset;
#if LWIP_IPV6
#if LWIP_IPV4
    if (IP_IS_V6(dest))
 80091de:	b1ac      	cbz	r4, 800920c <tcp_eff_send_mss_netif+0x48>
 80091e0:	7c23      	ldrb	r3, [r4, #16]
 80091e2:	2b06      	cmp	r3, #6
 80091e4:	d014      	beq.n	8009210 <tcp_eff_send_mss_netif+0x4c>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80091e6:	2328      	movs	r3, #40	; 0x28
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80091e8:	4298      	cmp	r0, r3
 80091ea:	d913      	bls.n	8009214 <tcp_eff_send_mss_netif+0x50>
 80091ec:	1ac0      	subs	r0, r0, r3
 80091ee:	b280      	uxth	r0, r0
 80091f0:	e011      	b.n	8009216 <tcp_eff_send_mss_netif+0x52>
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80091f2:	4b0b      	ldr	r3, [pc, #44]	; (8009220 <tcp_eff_send_mss_netif+0x5c>)
 80091f4:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80091f8:	490a      	ldr	r1, [pc, #40]	; (8009224 <tcp_eff_send_mss_netif+0x60>)
 80091fa:	480b      	ldr	r0, [pc, #44]	; (8009228 <tcp_eff_send_mss_netif+0x64>)
 80091fc:	f00b f9fa 	bl	80145f4 <iprintf>
 8009200:	e7e5      	b.n	80091ce <tcp_eff_send_mss_netif+0xa>
    mtu = nd6_get_destination_mtu(ip_2_ip6(dest), outif);
 8009202:	4631      	mov	r1, r6
 8009204:	4620      	mov	r0, r4
 8009206:	f00a ff97 	bl	8014138 <nd6_get_destination_mtu>
 800920a:	e7e7      	b.n	80091dc <tcp_eff_send_mss_netif+0x18>
      offset = IP_HLEN + TCP_HLEN;
 800920c:	2328      	movs	r3, #40	; 0x28
 800920e:	e7eb      	b.n	80091e8 <tcp_eff_send_mss_netif+0x24>
      offset = IP6_HLEN + TCP_HLEN;
 8009210:	233c      	movs	r3, #60	; 0x3c
 8009212:	e7e9      	b.n	80091e8 <tcp_eff_send_mss_netif+0x24>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009214:	2000      	movs	r0, #0
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009216:	4285      	cmp	r5, r0
 8009218:	bf28      	it	cs
 800921a:	4605      	movcs	r5, r0
  }
  return sendmss;
}
 800921c:	4628      	mov	r0, r5
 800921e:	bd70      	pop	{r4, r5, r6, pc}
 8009220:	08016a64 	.word	0x08016a64
 8009224:	08016848 	.word	0x08016848
 8009228:	08015608 	.word	0x08015608

0800922c <tcp_free_ooseq>:
#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
 800922c:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8009230:	b143      	cbz	r3, 8009244 <tcp_free_ooseq+0x18>
{
 8009232:	b510      	push	{r4, lr}
 8009234:	4604      	mov	r4, r0
    tcp_segs_free(pcb->ooseq);
 8009236:	4618      	mov	r0, r3
 8009238:	f7ff ff77 	bl	800912a <tcp_segs_free>
    pcb->ooseq = NULL;
 800923c:	2300      	movs	r3, #0
 800923e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009242:	bd10      	pop	{r4, pc}
 8009244:	4770      	bx	lr
	...

08009248 <tcp_pcb_purge>:
{
 8009248:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800924a:	b348      	cbz	r0, 80092a0 <tcp_pcb_purge+0x58>
 800924c:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 800924e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8009252:	b323      	cbz	r3, 800929e <tcp_pcb_purge+0x56>
 8009254:	2b0a      	cmp	r3, #10
 8009256:	d022      	beq.n	800929e <tcp_pcb_purge+0x56>
      pcb->state != TIME_WAIT &&
 8009258:	2b01      	cmp	r3, #1
 800925a:	d020      	beq.n	800929e <tcp_pcb_purge+0x56>
    if (pcb->refused_data != NULL) {
 800925c:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 8009260:	b120      	cbz	r0, 800926c <tcp_pcb_purge+0x24>
      pbuf_free(pcb->refused_data);
 8009262:	f7ff fa61 	bl	8008728 <pbuf_free>
      pcb->refused_data = NULL;
 8009266:	2300      	movs	r3, #0
 8009268:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    if (pcb->ooseq != NULL) {
 800926c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009270:	b113      	cbz	r3, 8009278 <tcp_pcb_purge+0x30>
      tcp_free_ooseq(pcb);
 8009272:	4620      	mov	r0, r4
 8009274:	f7ff ffda 	bl	800922c <tcp_free_ooseq>
    pcb->rtime = -1;
 8009278:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800927c:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    tcp_segs_free(pcb->unsent);
 8009280:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009284:	f7ff ff51 	bl	800912a <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009288:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800928c:	f7ff ff4d 	bl	800912a <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009290:	2300      	movs	r3, #0
 8009292:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8009296:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    pcb->unsent_oversize = 0;
 800929a:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
}
 800929e:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80092a0:	4b03      	ldr	r3, [pc, #12]	; (80092b0 <tcp_pcb_purge+0x68>)
 80092a2:	f640 0251 	movw	r2, #2129	; 0x851
 80092a6:	4903      	ldr	r1, [pc, #12]	; (80092b4 <tcp_pcb_purge+0x6c>)
 80092a8:	4803      	ldr	r0, [pc, #12]	; (80092b8 <tcp_pcb_purge+0x70>)
 80092aa:	f00b f9a3 	bl	80145f4 <iprintf>
 80092ae:	e7f6      	b.n	800929e <tcp_pcb_purge+0x56>
 80092b0:	08016a64 	.word	0x08016a64
 80092b4:	08016934 	.word	0x08016934
 80092b8:	08015608 	.word	0x08015608

080092bc <tcp_pcb_remove>:
{
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80092c0:	460c      	mov	r4, r1
 80092c2:	b149      	cbz	r1, 80092d8 <tcp_pcb_remove+0x1c>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80092c4:	b185      	cbz	r5, 80092e8 <tcp_pcb_remove+0x2c>
  TCP_RMV(pcblist, pcb);
 80092c6:	682b      	ldr	r3, [r5, #0]
 80092c8:	42a3      	cmp	r3, r4
 80092ca:	d015      	beq.n	80092f8 <tcp_pcb_remove+0x3c>
 80092cc:	b1cb      	cbz	r3, 8009302 <tcp_pcb_remove+0x46>
 80092ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d0:	42a2      	cmp	r2, r4
 80092d2:	d014      	beq.n	80092fe <tcp_pcb_remove+0x42>
 80092d4:	4613      	mov	r3, r2
 80092d6:	e7f9      	b.n	80092cc <tcp_pcb_remove+0x10>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80092d8:	4b28      	ldr	r3, [pc, #160]	; (800937c <tcp_pcb_remove+0xc0>)
 80092da:	f640 0283 	movw	r2, #2179	; 0x883
 80092de:	4928      	ldr	r1, [pc, #160]	; (8009380 <tcp_pcb_remove+0xc4>)
 80092e0:	4828      	ldr	r0, [pc, #160]	; (8009384 <tcp_pcb_remove+0xc8>)
 80092e2:	f00b f987 	bl	80145f4 <iprintf>
 80092e6:	e7ed      	b.n	80092c4 <tcp_pcb_remove+0x8>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80092e8:	4b24      	ldr	r3, [pc, #144]	; (800937c <tcp_pcb_remove+0xc0>)
 80092ea:	f640 0284 	movw	r2, #2180	; 0x884
 80092ee:	4926      	ldr	r1, [pc, #152]	; (8009388 <tcp_pcb_remove+0xcc>)
 80092f0:	4824      	ldr	r0, [pc, #144]	; (8009384 <tcp_pcb_remove+0xc8>)
 80092f2:	f00b f97f 	bl	80145f4 <iprintf>
 80092f6:	e7e6      	b.n	80092c6 <tcp_pcb_remove+0xa>
  TCP_RMV(pcblist, pcb);
 80092f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fa:	602b      	str	r3, [r5, #0]
 80092fc:	e001      	b.n	8009302 <tcp_pcb_remove+0x46>
 80092fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009300:	62da      	str	r2, [r3, #44]	; 0x2c
 8009302:	2300      	movs	r3, #0
 8009304:	62e3      	str	r3, [r4, #44]	; 0x2c
  tcp_pcb_purge(pcb);
 8009306:	4620      	mov	r0, r4
 8009308:	f7ff ff9e 	bl	8009248 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 800930c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009310:	2b0a      	cmp	r3, #10
 8009312:	d005      	beq.n	8009320 <tcp_pcb_remove+0x64>
 8009314:	2b01      	cmp	r3, #1
 8009316:	d003      	beq.n	8009320 <tcp_pcb_remove+0x64>
      (pcb->flags & TF_ACK_DELAY)) {
 8009318:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
      (pcb->state != LISTEN) &&
 800931a:	f013 0f01 	tst.w	r3, #1
 800931e:	d126      	bne.n	800936e <tcp_pcb_remove+0xb2>
  if (pcb->state != LISTEN) {
 8009320:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009324:	2b01      	cmp	r3, #1
 8009326:	d01d      	beq.n	8009364 <tcp_pcb_remove+0xa8>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009328:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800932c:	b133      	cbz	r3, 800933c <tcp_pcb_remove+0x80>
 800932e:	4b13      	ldr	r3, [pc, #76]	; (800937c <tcp_pcb_remove+0xc0>)
 8009330:	f640 0293 	movw	r2, #2195	; 0x893
 8009334:	4915      	ldr	r1, [pc, #84]	; (800938c <tcp_pcb_remove+0xd0>)
 8009336:	4813      	ldr	r0, [pc, #76]	; (8009384 <tcp_pcb_remove+0xc8>)
 8009338:	f00b f95c 	bl	80145f4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800933c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009340:	b133      	cbz	r3, 8009350 <tcp_pcb_remove+0x94>
 8009342:	4b0e      	ldr	r3, [pc, #56]	; (800937c <tcp_pcb_remove+0xc0>)
 8009344:	f640 0294 	movw	r2, #2196	; 0x894
 8009348:	4911      	ldr	r1, [pc, #68]	; (8009390 <tcp_pcb_remove+0xd4>)
 800934a:	480e      	ldr	r0, [pc, #56]	; (8009384 <tcp_pcb_remove+0xc8>)
 800934c:	f00b f952 	bl	80145f4 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009350:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009354:	b133      	cbz	r3, 8009364 <tcp_pcb_remove+0xa8>
 8009356:	4b09      	ldr	r3, [pc, #36]	; (800937c <tcp_pcb_remove+0xc0>)
 8009358:	f640 0296 	movw	r2, #2198	; 0x896
 800935c:	490d      	ldr	r1, [pc, #52]	; (8009394 <tcp_pcb_remove+0xd8>)
 800935e:	4809      	ldr	r0, [pc, #36]	; (8009384 <tcp_pcb_remove+0xc8>)
 8009360:	f00b f948 	bl	80145f4 <iprintf>
  pcb->state = CLOSED;
 8009364:	2300      	movs	r3, #0
 8009366:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  pcb->local_port = 0;
 800936a:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 800936c:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 800936e:	f043 0302 	orr.w	r3, r3, #2
 8009372:	8763      	strh	r3, [r4, #58]	; 0x3a
    tcp_output(pcb);
 8009374:	4620      	mov	r0, r4
 8009376:	f003 fa39 	bl	800c7ec <tcp_output>
 800937a:	e7d1      	b.n	8009320 <tcp_pcb_remove+0x64>
 800937c:	08016a64 	.word	0x08016a64
 8009380:	08016950 	.word	0x08016950
 8009384:	08015608 	.word	0x08015608
 8009388:	0801696c 	.word	0x0801696c
 800938c:	0801698c 	.word	0x0801698c
 8009390:	080169a4 	.word	0x080169a4
 8009394:	080169c0 	.word	0x080169c0

08009398 <tcp_abandon>:
{
 8009398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800939c:	b084      	sub	sp, #16
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800939e:	b308      	cbz	r0, 80093e4 <tcp_abandon+0x4c>
 80093a0:	460d      	mov	r5, r1
 80093a2:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80093a4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d023      	beq.n	80093f4 <tcp_abandon+0x5c>
  if (pcb->state == TIME_WAIT) {
 80093ac:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80093b0:	2b0a      	cmp	r3, #10
 80093b2:	d027      	beq.n	8009404 <tcp_abandon+0x6c>
    seqno = pcb->snd_nxt;
 80093b4:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
    ackno = pcb->rcv_nxt;
 80093b8:	f8d4 9044 	ldr.w	r9, [r4, #68]	; 0x44
    errf = pcb->errf;
 80093bc:	f8d4 60b0 	ldr.w	r6, [r4, #176]	; 0xb0
    errf_arg = pcb->callback_arg;
 80093c0:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if (pcb->state == CLOSED) {
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d14a      	bne.n	800945c <tcp_abandon+0xc4>
      if (pcb->local_port != 0) {
 80093c6:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 80093ca:	f1ba 0f00 	cmp.w	sl, #0
 80093ce:	d04f      	beq.n	8009470 <tcp_abandon+0xd8>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80093d0:	4b2f      	ldr	r3, [pc, #188]	; (8009490 <tcp_abandon+0xf8>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	42a3      	cmp	r3, r4
 80093d6:	d01d      	beq.n	8009414 <tcp_abandon+0x7c>
 80093d8:	b313      	cbz	r3, 8009420 <tcp_abandon+0x88>
 80093da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093dc:	42a2      	cmp	r2, r4
 80093de:	d01d      	beq.n	800941c <tcp_abandon+0x84>
 80093e0:	4613      	mov	r3, r2
 80093e2:	e7f9      	b.n	80093d8 <tcp_abandon+0x40>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80093e4:	4b2b      	ldr	r3, [pc, #172]	; (8009494 <tcp_abandon+0xfc>)
 80093e6:	f240 223d 	movw	r2, #573	; 0x23d
 80093ea:	492b      	ldr	r1, [pc, #172]	; (8009498 <tcp_abandon+0x100>)
 80093ec:	482b      	ldr	r0, [pc, #172]	; (800949c <tcp_abandon+0x104>)
 80093ee:	f00b f901 	bl	80145f4 <iprintf>
 80093f2:	e030      	b.n	8009456 <tcp_abandon+0xbe>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80093f4:	4b27      	ldr	r3, [pc, #156]	; (8009494 <tcp_abandon+0xfc>)
 80093f6:	f240 2241 	movw	r2, #577	; 0x241
 80093fa:	4929      	ldr	r1, [pc, #164]	; (80094a0 <tcp_abandon+0x108>)
 80093fc:	4827      	ldr	r0, [pc, #156]	; (800949c <tcp_abandon+0x104>)
 80093fe:	f00b f8f9 	bl	80145f4 <iprintf>
 8009402:	e7d3      	b.n	80093ac <tcp_abandon+0x14>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009404:	4621      	mov	r1, r4
 8009406:	4827      	ldr	r0, [pc, #156]	; (80094a4 <tcp_abandon+0x10c>)
 8009408:	f7ff ff58 	bl	80092bc <tcp_pcb_remove>
    tcp_free(pcb);
 800940c:	4620      	mov	r0, r4
 800940e:	f7ff fde9 	bl	8008fe4 <tcp_free>
 8009412:	e020      	b.n	8009456 <tcp_abandon+0xbe>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009416:	4b1e      	ldr	r3, [pc, #120]	; (8009490 <tcp_abandon+0xf8>)
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	e001      	b.n	8009420 <tcp_abandon+0x88>
 800941c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800941e:	62da      	str	r2, [r3, #44]	; 0x2c
 8009420:	2500      	movs	r5, #0
 8009422:	62e5      	str	r5, [r4, #44]	; 0x2c
    u16_t local_port = 0;
 8009424:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 8009426:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800942a:	b108      	cbz	r0, 8009430 <tcp_abandon+0x98>
      tcp_segs_free(pcb->unacked);
 800942c:	f7ff fe7d 	bl	800912a <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8009430:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8009434:	b108      	cbz	r0, 800943a <tcp_abandon+0xa2>
      tcp_segs_free(pcb->unsent);
 8009436:	f7ff fe78 	bl	800912a <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800943a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800943e:	b108      	cbz	r0, 8009444 <tcp_abandon+0xac>
      tcp_segs_free(pcb->ooseq);
 8009440:	f7ff fe73 	bl	800912a <tcp_segs_free>
    if (send_rst) {
 8009444:	b9b5      	cbnz	r5, 8009474 <tcp_abandon+0xdc>
    tcp_free(pcb);
 8009446:	4620      	mov	r0, r4
 8009448:	f7ff fdcc 	bl	8008fe4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800944c:	b11e      	cbz	r6, 8009456 <tcp_abandon+0xbe>
 800944e:	f06f 010c 	mvn.w	r1, #12
 8009452:	4638      	mov	r0, r7
 8009454:	47b0      	blx	r6
}
 8009456:	b004      	add	sp, #16
 8009458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 800945c:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009460:	4621      	mov	r1, r4
 8009462:	4811      	ldr	r0, [pc, #68]	; (80094a8 <tcp_abandon+0x110>)
 8009464:	f7ff ff2a 	bl	80092bc <tcp_pcb_remove>
 8009468:	4b10      	ldr	r3, [pc, #64]	; (80094ac <tcp_abandon+0x114>)
 800946a:	2201      	movs	r2, #1
 800946c:	701a      	strb	r2, [r3, #0]
 800946e:	e7da      	b.n	8009426 <tcp_abandon+0x8e>
    int send_rst = 0;
 8009470:	2500      	movs	r5, #0
 8009472:	e7d8      	b.n	8009426 <tcp_abandon+0x8e>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009474:	f104 0314 	add.w	r3, r4, #20
 8009478:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800947a:	9202      	str	r2, [sp, #8]
 800947c:	f8cd a004 	str.w	sl, [sp, #4]
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	4623      	mov	r3, r4
 8009484:	464a      	mov	r2, r9
 8009486:	4641      	mov	r1, r8
 8009488:	4620      	mov	r0, r4
 800948a:	f003 f929 	bl	800c6e0 <tcp_rst>
 800948e:	e7da      	b.n	8009446 <tcp_abandon+0xae>
 8009490:	20008c50 	.word	0x20008c50
 8009494:	08016a64 	.word	0x08016a64
 8009498:	08016794 	.word	0x08016794
 800949c:	08015608 	.word	0x08015608
 80094a0:	080167b0 	.word	0x080167b0
 80094a4:	20008c54 	.word	0x20008c54
 80094a8:	20008c44 	.word	0x20008c44
 80094ac:	20008c40 	.word	0x20008c40

080094b0 <tcp_abort>:
{
 80094b0:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 80094b2:	2101      	movs	r1, #1
 80094b4:	f7ff ff70 	bl	8009398 <tcp_abandon>
}
 80094b8:	bd08      	pop	{r3, pc}
	...

080094bc <tcp_kill_timewait>:
{
 80094bc:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80094be:	4b0a      	ldr	r3, [pc, #40]	; (80094e8 <tcp_kill_timewait+0x2c>)
 80094c0:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 80094c2:	2400      	movs	r4, #0
  inactive = NULL;
 80094c4:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80094c6:	e000      	b.n	80094ca <tcp_kill_timewait+0xe>
 80094c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ca:	b143      	cbz	r3, 80094de <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80094cc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80094ce:	4a07      	ldr	r2, [pc, #28]	; (80094ec <tcp_kill_timewait+0x30>)
 80094d0:	6812      	ldr	r2, [r2, #0]
 80094d2:	1a52      	subs	r2, r2, r1
 80094d4:	42a2      	cmp	r2, r4
 80094d6:	d3f7      	bcc.n	80094c8 <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 80094d8:	4614      	mov	r4, r2
      inactive = pcb;
 80094da:	4618      	mov	r0, r3
 80094dc:	e7f4      	b.n	80094c8 <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 80094de:	b108      	cbz	r0, 80094e4 <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 80094e0:	f7ff ffe6 	bl	80094b0 <tcp_abort>
}
 80094e4:	bd10      	pop	{r4, pc}
 80094e6:	bf00      	nop
 80094e8:	20008c54 	.word	0x20008c54
 80094ec:	20008c48 	.word	0x20008c48

080094f0 <tcp_kill_prio>:
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80094f0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80094f4:	d101      	bne.n	80094fa <tcp_kill_prio+0xa>
  if (mprio == 0) {
 80094f6:	b908      	cbnz	r0, 80094fc <tcp_kill_prio+0xc>
 80094f8:	4770      	bx	lr
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80094fa:	207f      	movs	r0, #127	; 0x7f
{
 80094fc:	b570      	push	{r4, r5, r6, lr}
  mprio--;
 80094fe:	3801      	subs	r0, #1
 8009500:	b2c3      	uxtb	r3, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009502:	4a0e      	ldr	r2, [pc, #56]	; (800953c <tcp_kill_prio+0x4c>)
 8009504:	6812      	ldr	r2, [r2, #0]
  inactivity = 0;
 8009506:	2100      	movs	r1, #0
  inactive = NULL;
 8009508:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800950a:	b91a      	cbnz	r2, 8009514 <tcp_kill_prio+0x24>
  if (inactive != NULL) {
 800950c:	b108      	cbz	r0, 8009512 <tcp_kill_prio+0x22>
    tcp_abort(inactive);
 800950e:	f7ff ffcf 	bl	80094b0 <tcp_abort>
}
 8009512:	bd70      	pop	{r4, r5, r6, pc}
    if ((pcb->prio < mprio) ||
 8009514:	f892 4035 	ldrb.w	r4, [r2, #53]	; 0x35
 8009518:	429c      	cmp	r4, r3
 800951a:	d306      	bcc.n	800952a <tcp_kill_prio+0x3a>
 800951c:	d10b      	bne.n	8009536 <tcp_kill_prio+0x46>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800951e:	6c16      	ldr	r6, [r2, #64]	; 0x40
 8009520:	4d07      	ldr	r5, [pc, #28]	; (8009540 <tcp_kill_prio+0x50>)
 8009522:	682d      	ldr	r5, [r5, #0]
 8009524:	1bad      	subs	r5, r5, r6
 8009526:	428d      	cmp	r5, r1
 8009528:	d305      	bcc.n	8009536 <tcp_kill_prio+0x46>
      inactivity = tcp_ticks - pcb->tmr;
 800952a:	4b05      	ldr	r3, [pc, #20]	; (8009540 <tcp_kill_prio+0x50>)
 800952c:	6819      	ldr	r1, [r3, #0]
 800952e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009530:	1ac9      	subs	r1, r1, r3
      mprio      = pcb->prio;
 8009532:	4623      	mov	r3, r4
      inactive   = pcb;
 8009534:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009536:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009538:	e7e7      	b.n	800950a <tcp_kill_prio+0x1a>
 800953a:	bf00      	nop
 800953c:	20008c44 	.word	0x20008c44
 8009540:	20008c48 	.word	0x20008c48

08009544 <tcp_netif_ip_addr_changed_pcblist>:
{
 8009544:	b570      	push	{r4, r5, r6, lr}
 8009546:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009548:	4605      	mov	r5, r0
 800954a:	b970      	cbnz	r0, 800956a <tcp_netif_ip_addr_changed_pcblist+0x26>
 800954c:	4b1b      	ldr	r3, [pc, #108]	; (80095bc <tcp_netif_ip_addr_changed_pcblist+0x78>)
 800954e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009552:	491b      	ldr	r1, [pc, #108]	; (80095c0 <tcp_netif_ip_addr_changed_pcblist+0x7c>)
 8009554:	481b      	ldr	r0, [pc, #108]	; (80095c4 <tcp_netif_ip_addr_changed_pcblist+0x80>)
 8009556:	f00b f84d 	bl	80145f4 <iprintf>
 800955a:	e006      	b.n	800956a <tcp_netif_ip_addr_changed_pcblist+0x26>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800955c:	6822      	ldr	r2, [r4, #0]
 800955e:	682b      	ldr	r3, [r5, #0]
 8009560:	429a      	cmp	r2, r3
 8009562:	d010      	beq.n	8009586 <tcp_netif_ip_addr_changed_pcblist+0x42>
 8009564:	2300      	movs	r3, #0
 8009566:	bb13      	cbnz	r3, 80095ae <tcp_netif_ip_addr_changed_pcblist+0x6a>
      pcb = pcb->next;
 8009568:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
  while (pcb != NULL) {
 800956a:	b334      	cbz	r4, 80095ba <tcp_netif_ip_addr_changed_pcblist+0x76>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800956c:	7c23      	ldrb	r3, [r4, #16]
 800956e:	7c2a      	ldrb	r2, [r5, #16]
 8009570:	4293      	cmp	r3, r2
 8009572:	d1f9      	bne.n	8009568 <tcp_netif_ip_addr_changed_pcblist+0x24>
 8009574:	2b06      	cmp	r3, #6
 8009576:	d0f1      	beq.n	800955c <tcp_netif_ip_addr_changed_pcblist+0x18>
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	682a      	ldr	r2, [r5, #0]
 800957c:	4293      	cmp	r3, r2
 800957e:	bf14      	ite	ne
 8009580:	2300      	movne	r3, #0
 8009582:	2301      	moveq	r3, #1
 8009584:	e7ef      	b.n	8009566 <tcp_netif_ip_addr_changed_pcblist+0x22>
 8009586:	6862      	ldr	r2, [r4, #4]
 8009588:	686b      	ldr	r3, [r5, #4]
 800958a:	429a      	cmp	r2, r3
 800958c:	d001      	beq.n	8009592 <tcp_netif_ip_addr_changed_pcblist+0x4e>
 800958e:	2300      	movs	r3, #0
 8009590:	e7e9      	b.n	8009566 <tcp_netif_ip_addr_changed_pcblist+0x22>
 8009592:	68a2      	ldr	r2, [r4, #8]
 8009594:	68ab      	ldr	r3, [r5, #8]
 8009596:	429a      	cmp	r2, r3
 8009598:	d001      	beq.n	800959e <tcp_netif_ip_addr_changed_pcblist+0x5a>
 800959a:	2300      	movs	r3, #0
 800959c:	e7e3      	b.n	8009566 <tcp_netif_ip_addr_changed_pcblist+0x22>
 800959e:	68e2      	ldr	r2, [r4, #12]
 80095a0:	68eb      	ldr	r3, [r5, #12]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d001      	beq.n	80095aa <tcp_netif_ip_addr_changed_pcblist+0x66>
 80095a6:	2300      	movs	r3, #0
 80095a8:	e7dd      	b.n	8009566 <tcp_netif_ip_addr_changed_pcblist+0x22>
 80095aa:	2301      	movs	r3, #1
 80095ac:	e7db      	b.n	8009566 <tcp_netif_ip_addr_changed_pcblist+0x22>
      struct tcp_pcb *next = pcb->next;
 80095ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
      tcp_abort(pcb);
 80095b0:	4620      	mov	r0, r4
 80095b2:	f7ff ff7d 	bl	80094b0 <tcp_abort>
      pcb = next;
 80095b6:	4634      	mov	r4, r6
 80095b8:	e7d7      	b.n	800956a <tcp_netif_ip_addr_changed_pcblist+0x26>
}
 80095ba:	bd70      	pop	{r4, r5, r6, pc}
 80095bc:	08016a64 	.word	0x08016a64
 80095c0:	080168d4 	.word	0x080168d4
 80095c4:	08015608 	.word	0x08015608

080095c8 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 80095c8:	2800      	cmp	r0, #0
 80095ca:	f000 8091 	beq.w	80096f0 <tcp_netif_ip_addr_changed+0x128>
{
 80095ce:	b538      	push	{r3, r4, r5, lr}
 80095d0:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 80095d2:	7c02      	ldrb	r2, [r0, #16]
 80095d4:	2a06      	cmp	r2, #6
 80095d6:	d004      	beq.n	80095e2 <tcp_netif_ip_addr_changed+0x1a>
 80095d8:	b1b8      	cbz	r0, 800960a <tcp_netif_ip_addr_changed+0x42>
 80095da:	6802      	ldr	r2, [r0, #0]
 80095dc:	b9ba      	cbnz	r2, 800960e <tcp_netif_ip_addr_changed+0x46>
 80095de:	b9c2      	cbnz	r2, 8009612 <tcp_netif_ip_addr_changed+0x4a>
}
 80095e0:	bd38      	pop	{r3, r4, r5, pc}
  if (!ip_addr_isany(old_addr)) {
 80095e2:	b150      	cbz	r0, 80095fa <tcp_netif_ip_addr_changed+0x32>
 80095e4:	6802      	ldr	r2, [r0, #0]
 80095e6:	b952      	cbnz	r2, 80095fe <tcp_netif_ip_addr_changed+0x36>
 80095e8:	6842      	ldr	r2, [r0, #4]
 80095ea:	b952      	cbnz	r2, 8009602 <tcp_netif_ip_addr_changed+0x3a>
 80095ec:	6882      	ldr	r2, [r0, #8]
 80095ee:	b952      	cbnz	r2, 8009606 <tcp_netif_ip_addr_changed+0x3e>
 80095f0:	68c2      	ldr	r2, [r0, #12]
 80095f2:	2a00      	cmp	r2, #0
 80095f4:	d0f3      	beq.n	80095de <tcp_netif_ip_addr_changed+0x16>
 80095f6:	2201      	movs	r2, #1
 80095f8:	e7f1      	b.n	80095de <tcp_netif_ip_addr_changed+0x16>
 80095fa:	2200      	movs	r2, #0
 80095fc:	e7ef      	b.n	80095de <tcp_netif_ip_addr_changed+0x16>
 80095fe:	2201      	movs	r2, #1
 8009600:	e7ed      	b.n	80095de <tcp_netif_ip_addr_changed+0x16>
 8009602:	2201      	movs	r2, #1
 8009604:	e7eb      	b.n	80095de <tcp_netif_ip_addr_changed+0x16>
 8009606:	2201      	movs	r2, #1
 8009608:	e7e9      	b.n	80095de <tcp_netif_ip_addr_changed+0x16>
 800960a:	2200      	movs	r2, #0
 800960c:	e7e7      	b.n	80095de <tcp_netif_ip_addr_changed+0x16>
 800960e:	2201      	movs	r2, #1
 8009610:	e7e5      	b.n	80095de <tcp_netif_ip_addr_changed+0x16>
 8009612:	460d      	mov	r5, r1
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009614:	4b37      	ldr	r3, [pc, #220]	; (80096f4 <tcp_netif_ip_addr_changed+0x12c>)
 8009616:	6819      	ldr	r1, [r3, #0]
 8009618:	4620      	mov	r0, r4
 800961a:	f7ff ff93 	bl	8009544 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800961e:	4b36      	ldr	r3, [pc, #216]	; (80096f8 <tcp_netif_ip_addr_changed+0x130>)
 8009620:	6819      	ldr	r1, [r3, #0]
 8009622:	4620      	mov	r0, r4
 8009624:	f7ff ff8e 	bl	8009544 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8009628:	2d00      	cmp	r5, #0
 800962a:	d0d9      	beq.n	80095e0 <tcp_netif_ip_addr_changed+0x18>
 800962c:	7c2b      	ldrb	r3, [r5, #16]
 800962e:	2b06      	cmp	r3, #6
 8009630:	d007      	beq.n	8009642 <tcp_netif_ip_addr_changed+0x7a>
 8009632:	b1d5      	cbz	r5, 800966a <tcp_netif_ip_addr_changed+0xa2>
 8009634:	682b      	ldr	r3, [r5, #0]
 8009636:	b9d3      	cbnz	r3, 800966e <tcp_netif_ip_addr_changed+0xa6>
 8009638:	2b00      	cmp	r3, #0
 800963a:	d0d1      	beq.n	80095e0 <tcp_netif_ip_addr_changed+0x18>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800963c:	4b2f      	ldr	r3, [pc, #188]	; (80096fc <tcp_netif_ip_addr_changed+0x134>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	e03a      	b.n	80096b8 <tcp_netif_ip_addr_changed+0xf0>
    if (!ip_addr_isany(new_addr)) {
 8009642:	b155      	cbz	r5, 800965a <tcp_netif_ip_addr_changed+0x92>
 8009644:	682b      	ldr	r3, [r5, #0]
 8009646:	b953      	cbnz	r3, 800965e <tcp_netif_ip_addr_changed+0x96>
 8009648:	686b      	ldr	r3, [r5, #4]
 800964a:	b953      	cbnz	r3, 8009662 <tcp_netif_ip_addr_changed+0x9a>
 800964c:	68ab      	ldr	r3, [r5, #8]
 800964e:	b953      	cbnz	r3, 8009666 <tcp_netif_ip_addr_changed+0x9e>
 8009650:	68eb      	ldr	r3, [r5, #12]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d0f0      	beq.n	8009638 <tcp_netif_ip_addr_changed+0x70>
 8009656:	2301      	movs	r3, #1
 8009658:	e7ee      	b.n	8009638 <tcp_netif_ip_addr_changed+0x70>
 800965a:	2300      	movs	r3, #0
 800965c:	e7ec      	b.n	8009638 <tcp_netif_ip_addr_changed+0x70>
 800965e:	2301      	movs	r3, #1
 8009660:	e7ea      	b.n	8009638 <tcp_netif_ip_addr_changed+0x70>
 8009662:	2301      	movs	r3, #1
 8009664:	e7e8      	b.n	8009638 <tcp_netif_ip_addr_changed+0x70>
 8009666:	2301      	movs	r3, #1
 8009668:	e7e6      	b.n	8009638 <tcp_netif_ip_addr_changed+0x70>
 800966a:	2300      	movs	r3, #0
 800966c:	e7e4      	b.n	8009638 <tcp_netif_ip_addr_changed+0x70>
 800966e:	2301      	movs	r3, #1
 8009670:	e7e2      	b.n	8009638 <tcp_netif_ip_addr_changed+0x70>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009672:	6819      	ldr	r1, [r3, #0]
 8009674:	6822      	ldr	r2, [r4, #0]
 8009676:	4291      	cmp	r1, r2
 8009678:	d001      	beq.n	800967e <tcp_netif_ip_addr_changed+0xb6>
 800967a:	2200      	movs	r2, #0
 800967c:	e02a      	b.n	80096d4 <tcp_netif_ip_addr_changed+0x10c>
 800967e:	6859      	ldr	r1, [r3, #4]
 8009680:	6862      	ldr	r2, [r4, #4]
 8009682:	4291      	cmp	r1, r2
 8009684:	d001      	beq.n	800968a <tcp_netif_ip_addr_changed+0xc2>
 8009686:	2200      	movs	r2, #0
 8009688:	e024      	b.n	80096d4 <tcp_netif_ip_addr_changed+0x10c>
 800968a:	6899      	ldr	r1, [r3, #8]
 800968c:	68a2      	ldr	r2, [r4, #8]
 800968e:	4291      	cmp	r1, r2
 8009690:	d001      	beq.n	8009696 <tcp_netif_ip_addr_changed+0xce>
 8009692:	2200      	movs	r2, #0
 8009694:	e01e      	b.n	80096d4 <tcp_netif_ip_addr_changed+0x10c>
 8009696:	68d9      	ldr	r1, [r3, #12]
 8009698:	68e2      	ldr	r2, [r4, #12]
 800969a:	4291      	cmp	r1, r2
 800969c:	d001      	beq.n	80096a2 <tcp_netif_ip_addr_changed+0xda>
 800969e:	2200      	movs	r2, #0
 80096a0:	e018      	b.n	80096d4 <tcp_netif_ip_addr_changed+0x10c>
 80096a2:	2201      	movs	r2, #1
 80096a4:	e016      	b.n	80096d4 <tcp_netif_ip_addr_changed+0x10c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80096a6:	682a      	ldr	r2, [r5, #0]
 80096a8:	601a      	str	r2, [r3, #0]
 80096aa:	686a      	ldr	r2, [r5, #4]
 80096ac:	605a      	str	r2, [r3, #4]
 80096ae:	68aa      	ldr	r2, [r5, #8]
 80096b0:	609a      	str	r2, [r3, #8]
 80096b2:	68ea      	ldr	r2, [r5, #12]
 80096b4:	60da      	str	r2, [r3, #12]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80096b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d091      	beq.n	80095e0 <tcp_netif_ip_addr_changed+0x18>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80096bc:	7c1a      	ldrb	r2, [r3, #16]
 80096be:	7c21      	ldrb	r1, [r4, #16]
 80096c0:	428a      	cmp	r2, r1
 80096c2:	d1f8      	bne.n	80096b6 <tcp_netif_ip_addr_changed+0xee>
 80096c4:	2a06      	cmp	r2, #6
 80096c6:	d0d4      	beq.n	8009672 <tcp_netif_ip_addr_changed+0xaa>
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	6821      	ldr	r1, [r4, #0]
 80096cc:	428a      	cmp	r2, r1
 80096ce:	bf14      	ite	ne
 80096d0:	2200      	movne	r2, #0
 80096d2:	2201      	moveq	r2, #1
 80096d4:	2a00      	cmp	r2, #0
 80096d6:	d0ee      	beq.n	80096b6 <tcp_netif_ip_addr_changed+0xee>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80096d8:	7c2a      	ldrb	r2, [r5, #16]
 80096da:	741a      	strb	r2, [r3, #16]
 80096dc:	7c2a      	ldrb	r2, [r5, #16]
 80096de:	2a06      	cmp	r2, #6
 80096e0:	d0e1      	beq.n	80096a6 <tcp_netif_ip_addr_changed+0xde>
 80096e2:	682a      	ldr	r2, [r5, #0]
 80096e4:	601a      	str	r2, [r3, #0]
 80096e6:	2200      	movs	r2, #0
 80096e8:	60da      	str	r2, [r3, #12]
 80096ea:	609a      	str	r2, [r3, #8]
 80096ec:	605a      	str	r2, [r3, #4]
 80096ee:	e7e2      	b.n	80096b6 <tcp_netif_ip_addr_changed+0xee>
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	20008c44 	.word	0x20008c44
 80096f8:	20008c50 	.word	0x20008c50
 80096fc:	20008c4c 	.word	0x20008c4c

08009700 <tcp_kill_state>:
{
 8009700:	b538      	push	{r3, r4, r5, lr}
 8009702:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009704:	f1a0 0308 	sub.w	r3, r0, #8
 8009708:	b2db      	uxtb	r3, r3
 800970a:	2b01      	cmp	r3, #1
 800970c:	d804      	bhi.n	8009718 <tcp_kill_state+0x18>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800970e:	4b10      	ldr	r3, [pc, #64]	; (8009750 <tcp_kill_state+0x50>)
 8009710:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8009712:	2100      	movs	r1, #0
  inactive = NULL;
 8009714:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009716:	e008      	b.n	800972a <tcp_kill_state+0x2a>
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009718:	4b0e      	ldr	r3, [pc, #56]	; (8009754 <tcp_kill_state+0x54>)
 800971a:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800971e:	490e      	ldr	r1, [pc, #56]	; (8009758 <tcp_kill_state+0x58>)
 8009720:	480e      	ldr	r0, [pc, #56]	; (800975c <tcp_kill_state+0x5c>)
 8009722:	f00a ff67 	bl	80145f4 <iprintf>
 8009726:	e7f2      	b.n	800970e <tcp_kill_state+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972a:	b163      	cbz	r3, 8009746 <tcp_kill_state+0x46>
    if (pcb->state == state) {
 800972c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8009730:	42a2      	cmp	r2, r4
 8009732:	d1f9      	bne.n	8009728 <tcp_kill_state+0x28>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009734:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8009736:	4a0a      	ldr	r2, [pc, #40]	; (8009760 <tcp_kill_state+0x60>)
 8009738:	6812      	ldr	r2, [r2, #0]
 800973a:	1b52      	subs	r2, r2, r5
 800973c:	428a      	cmp	r2, r1
 800973e:	d3f3      	bcc.n	8009728 <tcp_kill_state+0x28>
        inactivity = tcp_ticks - pcb->tmr;
 8009740:	4611      	mov	r1, r2
        inactive = pcb;
 8009742:	4618      	mov	r0, r3
 8009744:	e7f0      	b.n	8009728 <tcp_kill_state+0x28>
  if (inactive != NULL) {
 8009746:	b110      	cbz	r0, 800974e <tcp_kill_state+0x4e>
    tcp_abandon(inactive, 0);
 8009748:	2100      	movs	r1, #0
 800974a:	f7ff fe25 	bl	8009398 <tcp_abandon>
}
 800974e:	bd38      	pop	{r3, r4, r5, pc}
 8009750:	20008c44 	.word	0x20008c44
 8009754:	08016a64 	.word	0x08016a64
 8009758:	080168a0 	.word	0x080168a0
 800975c:	08015608 	.word	0x08015608
 8009760:	20008c48 	.word	0x20008c48

08009764 <tcp_alloc>:
{
 8009764:	b538      	push	{r3, r4, r5, lr}
 8009766:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009768:	2001      	movs	r0, #1
 800976a:	f7fe fb7d 	bl	8007e68 <memp_malloc>
  if (pcb == NULL) {
 800976e:	4604      	mov	r4, r0
 8009770:	b3a8      	cbz	r0, 80097de <tcp_alloc+0x7a>
  if (pcb != NULL) {
 8009772:	b394      	cbz	r4, 80097da <tcp_alloc+0x76>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009774:	22bc      	movs	r2, #188	; 0xbc
 8009776:	2100      	movs	r1, #0
 8009778:	4620      	mov	r0, r4
 800977a:	f00a ff32 	bl	80145e2 <memset>
    pcb->prio = prio;
 800977e:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
    pcb->snd_buf = TCP_SND_BUF;
 8009782:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8009786:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800978a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800978e:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
 8009792:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->ttl = TCP_TTL;
 8009796:	22ff      	movs	r2, #255	; 0xff
 8009798:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
    pcb->mss = INITIAL_MSS;
 800979c:	f44f 7206 	mov.w	r2, #536	; 0x218
 80097a0:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80097a4:	2206      	movs	r2, #6
 80097a6:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80097aa:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
    pcb->rtime = -1;
 80097ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097b2:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    pcb->cwnd = 1;
 80097b6:	2201      	movs	r2, #1
 80097b8:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
    pcb->tmr = tcp_ticks;
 80097bc:	4a1a      	ldr	r2, [pc, #104]	; (8009828 <tcp_alloc+0xc4>)
 80097be:	6812      	ldr	r2, [r2, #0]
 80097c0:	6422      	str	r2, [r4, #64]	; 0x40
    pcb->last_timer = tcp_timer_ctr;
 80097c2:	4a1a      	ldr	r2, [pc, #104]	; (800982c <tcp_alloc+0xc8>)
 80097c4:	7812      	ldrb	r2, [r2, #0]
 80097c6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    pcb->ssthresh = TCP_SND_BUF;
 80097ca:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    pcb->recv = tcp_recv_null;
 80097ce:	4b18      	ldr	r3, [pc, #96]	; (8009830 <tcp_alloc+0xcc>)
 80097d0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80097d4:	4b17      	ldr	r3, [pc, #92]	; (8009834 <tcp_alloc+0xd0>)
 80097d6:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
}
 80097da:	4620      	mov	r0, r4
 80097dc:	bd38      	pop	{r3, r4, r5, pc}
    tcp_handle_closepend();
 80097de:	f7ff fbdf 	bl	8008fa0 <tcp_handle_closepend>
    tcp_kill_timewait();
 80097e2:	f7ff fe6b 	bl	80094bc <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80097e6:	2001      	movs	r0, #1
 80097e8:	f7fe fb3e 	bl	8007e68 <memp_malloc>
    if (pcb == NULL) {
 80097ec:	4604      	mov	r4, r0
 80097ee:	2800      	cmp	r0, #0
 80097f0:	d1bf      	bne.n	8009772 <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 80097f2:	2009      	movs	r0, #9
 80097f4:	f7ff ff84 	bl	8009700 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80097f8:	2001      	movs	r0, #1
 80097fa:	f7fe fb35 	bl	8007e68 <memp_malloc>
      if (pcb == NULL) {
 80097fe:	4604      	mov	r4, r0
 8009800:	2800      	cmp	r0, #0
 8009802:	d1b6      	bne.n	8009772 <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 8009804:	2008      	movs	r0, #8
 8009806:	f7ff ff7b 	bl	8009700 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800980a:	2001      	movs	r0, #1
 800980c:	f7fe fb2c 	bl	8007e68 <memp_malloc>
        if (pcb == NULL) {
 8009810:	4604      	mov	r4, r0
 8009812:	2800      	cmp	r0, #0
 8009814:	d1ad      	bne.n	8009772 <tcp_alloc+0xe>
          tcp_kill_prio(prio);
 8009816:	4628      	mov	r0, r5
 8009818:	f7ff fe6a 	bl	80094f0 <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800981c:	2001      	movs	r0, #1
 800981e:	f7fe fb23 	bl	8007e68 <memp_malloc>
 8009822:	4604      	mov	r4, r0
 8009824:	e7a5      	b.n	8009772 <tcp_alloc+0xe>
 8009826:	bf00      	nop
 8009828:	20008c48 	.word	0x20008c48
 800982c:	2000172d 	.word	0x2000172d
 8009830:	080099d1 	.word	0x080099d1
 8009834:	006ddd00 	.word	0x006ddd00

08009838 <tcp_close_shutdown>:
{
 8009838:	b530      	push	{r4, r5, lr}
 800983a:	b085      	sub	sp, #20
 800983c:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800983e:	4604      	mov	r4, r0
 8009840:	b190      	cbz	r0, 8009868 <tcp_close_shutdown+0x30>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009842:	b12d      	cbz	r5, 8009850 <tcp_close_shutdown+0x18>
 8009844:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009848:	2b04      	cmp	r3, #4
 800984a:	d015      	beq.n	8009878 <tcp_close_shutdown+0x40>
 800984c:	2b07      	cmp	r3, #7
 800984e:	d013      	beq.n	8009878 <tcp_close_shutdown+0x40>
  switch (pcb->state) {
 8009850:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009854:	2b01      	cmp	r3, #1
 8009856:	d070      	beq.n	800993a <tcp_close_shutdown+0x102>
 8009858:	2b00      	cmp	r3, #0
 800985a:	d054      	beq.n	8009906 <tcp_close_shutdown+0xce>
 800985c:	2b02      	cmp	r3, #2
 800985e:	d078      	beq.n	8009952 <tcp_close_shutdown+0x11a>
      return tcp_close_shutdown_fin(pcb);
 8009860:	4620      	mov	r0, r4
 8009862:	f7ff fb55 	bl	8008f10 <tcp_close_shutdown_fin>
 8009866:	e066      	b.n	8009936 <tcp_close_shutdown+0xfe>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009868:	4b40      	ldr	r3, [pc, #256]	; (800996c <tcp_close_shutdown+0x134>)
 800986a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800986e:	4940      	ldr	r1, [pc, #256]	; (8009970 <tcp_close_shutdown+0x138>)
 8009870:	4840      	ldr	r0, [pc, #256]	; (8009974 <tcp_close_shutdown+0x13c>)
 8009872:	f00a febf 	bl	80145f4 <iprintf>
 8009876:	e7e4      	b.n	8009842 <tcp_close_shutdown+0xa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009878:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800987c:	b1eb      	cbz	r3, 80098ba <tcp_close_shutdown+0x82>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800987e:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8009880:	f013 0f10 	tst.w	r3, #16
 8009884:	d01f      	beq.n	80098c6 <tcp_close_shutdown+0x8e>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009886:	f104 0314 	add.w	r3, r4, #20
 800988a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800988c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800988e:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 8009890:	9002      	str	r0, [sp, #8]
 8009892:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8009894:	9001      	str	r0, [sp, #4]
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	4623      	mov	r3, r4
 800989a:	4620      	mov	r0, r4
 800989c:	f002 ff20 	bl	800c6e0 <tcp_rst>
      tcp_pcb_purge(pcb);
 80098a0:	4620      	mov	r0, r4
 80098a2:	f7ff fcd1 	bl	8009248 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80098a6:	4b34      	ldr	r3, [pc, #208]	; (8009978 <tcp_close_shutdown+0x140>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	42a3      	cmp	r3, r4
 80098ac:	d013      	beq.n	80098d6 <tcp_close_shutdown+0x9e>
 80098ae:	b1c3      	cbz	r3, 80098e2 <tcp_close_shutdown+0xaa>
 80098b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b2:	42a2      	cmp	r2, r4
 80098b4:	d013      	beq.n	80098de <tcp_close_shutdown+0xa6>
 80098b6:	4613      	mov	r3, r2
 80098b8:	e7f9      	b.n	80098ae <tcp_close_shutdown+0x76>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80098ba:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80098be:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80098c2:	d1dc      	bne.n	800987e <tcp_close_shutdown+0x46>
 80098c4:	e7c4      	b.n	8009850 <tcp_close_shutdown+0x18>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80098c6:	4b29      	ldr	r3, [pc, #164]	; (800996c <tcp_close_shutdown+0x134>)
 80098c8:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80098cc:	492b      	ldr	r1, [pc, #172]	; (800997c <tcp_close_shutdown+0x144>)
 80098ce:	4829      	ldr	r0, [pc, #164]	; (8009974 <tcp_close_shutdown+0x13c>)
 80098d0:	f00a fe90 	bl	80145f4 <iprintf>
 80098d4:	e7d7      	b.n	8009886 <tcp_close_shutdown+0x4e>
      TCP_RMV_ACTIVE(pcb);
 80098d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d8:	4b27      	ldr	r3, [pc, #156]	; (8009978 <tcp_close_shutdown+0x140>)
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	e001      	b.n	80098e2 <tcp_close_shutdown+0xaa>
 80098de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80098e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80098e2:	2300      	movs	r3, #0
 80098e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098e6:	4b26      	ldr	r3, [pc, #152]	; (8009980 <tcp_close_shutdown+0x148>)
 80098e8:	2201      	movs	r2, #1
 80098ea:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 80098ec:	4b25      	ldr	r3, [pc, #148]	; (8009984 <tcp_close_shutdown+0x14c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	42a3      	cmp	r3, r4
 80098f2:	d004      	beq.n	80098fe <tcp_close_shutdown+0xc6>
        tcp_free(pcb);
 80098f4:	4620      	mov	r0, r4
 80098f6:	f7ff fb75 	bl	8008fe4 <tcp_free>
      return ERR_OK;
 80098fa:	2000      	movs	r0, #0
 80098fc:	e01b      	b.n	8009936 <tcp_close_shutdown+0xfe>
        tcp_trigger_input_pcb_close();
 80098fe:	f002 fa07 	bl	800bd10 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 8009902:	2000      	movs	r0, #0
 8009904:	e017      	b.n	8009936 <tcp_close_shutdown+0xfe>
      if (pcb->local_port != 0) {
 8009906:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009908:	b18b      	cbz	r3, 800992e <tcp_close_shutdown+0xf6>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800990a:	4b1f      	ldr	r3, [pc, #124]	; (8009988 <tcp_close_shutdown+0x150>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	42a3      	cmp	r3, r4
 8009910:	d005      	beq.n	800991e <tcp_close_shutdown+0xe6>
 8009912:	b153      	cbz	r3, 800992a <tcp_close_shutdown+0xf2>
 8009914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009916:	42a2      	cmp	r2, r4
 8009918:	d005      	beq.n	8009926 <tcp_close_shutdown+0xee>
 800991a:	4613      	mov	r3, r2
 800991c:	e7f9      	b.n	8009912 <tcp_close_shutdown+0xda>
 800991e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009920:	4b19      	ldr	r3, [pc, #100]	; (8009988 <tcp_close_shutdown+0x150>)
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	e001      	b.n	800992a <tcp_close_shutdown+0xf2>
 8009926:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009928:	62da      	str	r2, [r3, #44]	; 0x2c
 800992a:	2300      	movs	r3, #0
 800992c:	62e3      	str	r3, [r4, #44]	; 0x2c
      tcp_free(pcb);
 800992e:	4620      	mov	r0, r4
 8009930:	f7ff fb58 	bl	8008fe4 <tcp_free>
  return ERR_OK;
 8009934:	2000      	movs	r0, #0
}
 8009936:	b005      	add	sp, #20
 8009938:	bd30      	pop	{r4, r5, pc}
      tcp_listen_closed(pcb);
 800993a:	4620      	mov	r0, r4
 800993c:	f7ff faa2 	bl	8008e84 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009940:	4621      	mov	r1, r4
 8009942:	4812      	ldr	r0, [pc, #72]	; (800998c <tcp_close_shutdown+0x154>)
 8009944:	f7ff fcba 	bl	80092bc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009948:	4620      	mov	r0, r4
 800994a:	f7ff fac9 	bl	8008ee0 <tcp_free_listen>
  return ERR_OK;
 800994e:	2000      	movs	r0, #0
      break;
 8009950:	e7f1      	b.n	8009936 <tcp_close_shutdown+0xfe>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009952:	4621      	mov	r1, r4
 8009954:	4808      	ldr	r0, [pc, #32]	; (8009978 <tcp_close_shutdown+0x140>)
 8009956:	f7ff fcb1 	bl	80092bc <tcp_pcb_remove>
 800995a:	4b09      	ldr	r3, [pc, #36]	; (8009980 <tcp_close_shutdown+0x148>)
 800995c:	2201      	movs	r2, #1
 800995e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009960:	4620      	mov	r0, r4
 8009962:	f7ff fb3f 	bl	8008fe4 <tcp_free>
  return ERR_OK;
 8009966:	2000      	movs	r0, #0
      break;
 8009968:	e7e5      	b.n	8009936 <tcp_close_shutdown+0xfe>
 800996a:	bf00      	nop
 800996c:	08016a64 	.word	0x08016a64
 8009970:	0801680c 	.word	0x0801680c
 8009974:	08015608 	.word	0x08015608
 8009978:	20008c44 	.word	0x20008c44
 800997c:	0801682c 	.word	0x0801682c
 8009980:	20008c40 	.word	0x20008c40
 8009984:	20008c58 	.word	0x20008c58
 8009988:	20008c50 	.word	0x20008c50
 800998c:	20008c4c 	.word	0x20008c4c

08009990 <tcp_close>:
{
 8009990:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009992:	b168      	cbz	r0, 80099b0 <tcp_close+0x20>
 8009994:	4603      	mov	r3, r0
  if (pcb->state != LISTEN) {
 8009996:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800999a:	2a01      	cmp	r2, #1
 800999c:	d003      	beq.n	80099a6 <tcp_close+0x16>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800999e:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
 80099a0:	f042 0210 	orr.w	r2, r2, #16
 80099a4:	8742      	strh	r2, [r0, #58]	; 0x3a
  return tcp_close_shutdown(pcb, 1);
 80099a6:	2101      	movs	r1, #1
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7ff ff45 	bl	8009838 <tcp_close_shutdown>
}
 80099ae:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80099b0:	4b04      	ldr	r3, [pc, #16]	; (80099c4 <tcp_close+0x34>)
 80099b2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80099b6:	4904      	ldr	r1, [pc, #16]	; (80099c8 <tcp_close+0x38>)
 80099b8:	4804      	ldr	r0, [pc, #16]	; (80099cc <tcp_close+0x3c>)
 80099ba:	f00a fe1b 	bl	80145f4 <iprintf>
 80099be:	f06f 000f 	mvn.w	r0, #15
 80099c2:	e7f4      	b.n	80099ae <tcp_close+0x1e>
 80099c4:	08016a64 	.word	0x08016a64
 80099c8:	080167f4 	.word	0x080167f4
 80099cc:	08015608 	.word	0x08015608

080099d0 <tcp_recv_null>:
{
 80099d0:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80099d2:	b129      	cbz	r1, 80099e0 <tcp_recv_null+0x10>
 80099d4:	4614      	mov	r4, r2
 80099d6:	4608      	mov	r0, r1
  if (p != NULL) {
 80099d8:	b962      	cbnz	r2, 80099f4 <tcp_recv_null+0x24>
  } else if (err == ERR_OK) {
 80099da:	b19b      	cbz	r3, 8009a04 <tcp_recv_null+0x34>
  return ERR_OK;
 80099dc:	2000      	movs	r0, #0
 80099de:	e010      	b.n	8009a02 <tcp_recv_null+0x32>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80099e0:	4b0a      	ldr	r3, [pc, #40]	; (8009a0c <tcp_recv_null+0x3c>)
 80099e2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80099e6:	490a      	ldr	r1, [pc, #40]	; (8009a10 <tcp_recv_null+0x40>)
 80099e8:	480a      	ldr	r0, [pc, #40]	; (8009a14 <tcp_recv_null+0x44>)
 80099ea:	f00a fe03 	bl	80145f4 <iprintf>
 80099ee:	f06f 000f 	mvn.w	r0, #15
 80099f2:	e006      	b.n	8009a02 <tcp_recv_null+0x32>
    tcp_recved(pcb, p->tot_len);
 80099f4:	8911      	ldrh	r1, [r2, #8]
 80099f6:	f7ff fb4b 	bl	8009090 <tcp_recved>
    pbuf_free(p);
 80099fa:	4620      	mov	r0, r4
 80099fc:	f7fe fe94 	bl	8008728 <pbuf_free>
  return ERR_OK;
 8009a00:	2000      	movs	r0, #0
}
 8009a02:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
 8009a04:	f7ff ffc4 	bl	8009990 <tcp_close>
 8009a08:	e7fb      	b.n	8009a02 <tcp_recv_null+0x32>
 8009a0a:	bf00      	nop
 8009a0c:	08016a64 	.word	0x08016a64
 8009a10:	08016a08 	.word	0x08016a08
 8009a14:	08015608 	.word	0x08015608

08009a18 <tcp_process_refused_data>:
{
 8009a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a1a:	b338      	cbz	r0, 8009a6c <tcp_process_refused_data+0x54>
 8009a1c:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8009a1e:	f8d0 6098 	ldr.w	r6, [r0, #152]	; 0x98
 8009a22:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8009a24:	2300      	movs	r3, #0
 8009a26:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009a2a:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
 8009a2e:	b33d      	cbz	r5, 8009a80 <tcp_process_refused_data+0x68>
 8009a30:	4632      	mov	r2, r6
 8009a32:	4601      	mov	r1, r0
 8009a34:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8009a36:	47a8      	blx	r5
 8009a38:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8009a3a:	bb4d      	cbnz	r5, 8009a90 <tcp_process_refused_data+0x78>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009a3c:	f017 0f20 	tst.w	r7, #32
 8009a40:	d02d      	beq.n	8009a9e <tcp_process_refused_data+0x86>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009a42:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8009a46:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009a4a:	d002      	beq.n	8009a52 <tcp_process_refused_data+0x3a>
          pcb->rcv_wnd++;
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        TCP_EVENT_CLOSED(pcb, err);
 8009a52:	f8d4 60a4 	ldr.w	r6, [r4, #164]	; 0xa4
 8009a56:	b316      	cbz	r6, 8009a9e <tcp_process_refused_data+0x86>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009a60:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8009a62:	f110 0f0d 	cmn.w	r0, #13
 8009a66:	d11a      	bne.n	8009a9e <tcp_process_refused_data+0x86>
          return ERR_ABRT;
 8009a68:	4605      	mov	r5, r0
 8009a6a:	e018      	b.n	8009a9e <tcp_process_refused_data+0x86>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a6c:	4b0d      	ldr	r3, [pc, #52]	; (8009aa4 <tcp_process_refused_data+0x8c>)
 8009a6e:	f240 6209 	movw	r2, #1545	; 0x609
 8009a72:	490d      	ldr	r1, [pc, #52]	; (8009aa8 <tcp_process_refused_data+0x90>)
 8009a74:	480d      	ldr	r0, [pc, #52]	; (8009aac <tcp_process_refused_data+0x94>)
 8009a76:	f00a fdbd 	bl	80145f4 <iprintf>
 8009a7a:	f06f 050f 	mvn.w	r5, #15
 8009a7e:	e00e      	b.n	8009a9e <tcp_process_refused_data+0x86>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009a80:	2300      	movs	r3, #0
 8009a82:	4632      	mov	r2, r6
 8009a84:	4601      	mov	r1, r0
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7ff ffa2 	bl	80099d0 <tcp_recv_null>
 8009a8c:	4605      	mov	r5, r0
 8009a8e:	e7d4      	b.n	8009a3a <tcp_process_refused_data+0x22>
    } else if (err == ERR_ABRT) {
 8009a90:	f115 0f0d 	cmn.w	r5, #13
 8009a94:	d003      	beq.n	8009a9e <tcp_process_refused_data+0x86>
      pcb->refused_data = refused_data;
 8009a96:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
      return ERR_INPROGRESS;
 8009a9a:	f06f 0504 	mvn.w	r5, #4
}
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	08016a64 	.word	0x08016a64
 8009aa8:	080169e0 	.word	0x080169e0
 8009aac:	08015608 	.word	0x08015608

08009ab0 <tcp_fasttmr>:
{
 8009ab0:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 8009ab2:	4a1e      	ldr	r2, [pc, #120]	; (8009b2c <tcp_fasttmr+0x7c>)
 8009ab4:	7813      	ldrb	r3, [r2, #0]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8009aba:	4b1d      	ldr	r3, [pc, #116]	; (8009b30 <tcp_fasttmr+0x80>)
 8009abc:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8009abe:	e013      	b.n	8009ae8 <tcp_fasttmr+0x38>
        tcp_ack_now(pcb);
 8009ac0:	f043 0302 	orr.w	r3, r3, #2
 8009ac4:	8763      	strh	r3, [r4, #58]	; 0x3a
        tcp_output(pcb);
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	f002 fe90 	bl	800c7ec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009acc:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8009ace:	f023 0303 	bic.w	r3, r3, #3
 8009ad2:	8763      	strh	r3, [r4, #58]	; 0x3a
 8009ad4:	e015      	b.n	8009b02 <tcp_fasttmr+0x52>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009ad6:	f023 0308 	bic.w	r3, r3, #8
 8009ada:	8763      	strh	r3, [r4, #58]	; 0x3a
        tcp_close_shutdown_fin(pcb);
 8009adc:	4620      	mov	r0, r4
 8009ade:	f7ff fa17 	bl	8008f10 <tcp_close_shutdown_fin>
 8009ae2:	e012      	b.n	8009b0a <tcp_fasttmr+0x5a>
      pcb = pcb->next;
 8009ae4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
{
 8009ae6:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8009ae8:	b1f4      	cbz	r4, 8009b28 <tcp_fasttmr+0x78>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009aea:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8009aee:	4b0f      	ldr	r3, [pc, #60]	; (8009b2c <tcp_fasttmr+0x7c>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d0f6      	beq.n	8009ae4 <tcp_fasttmr+0x34>
      pcb->last_timer = tcp_timer_ctr;
 8009af6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      if (pcb->flags & TF_ACK_DELAY) {
 8009afa:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8009afc:	f013 0f01 	tst.w	r3, #1
 8009b00:	d1de      	bne.n	8009ac0 <tcp_fasttmr+0x10>
      if (pcb->flags & TF_CLOSEPEND) {
 8009b02:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8009b04:	f013 0f08 	tst.w	r3, #8
 8009b08:	d1e5      	bne.n	8009ad6 <tcp_fasttmr+0x26>
      next = pcb->next;
 8009b0a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      if (pcb->refused_data != NULL) {
 8009b0c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d0e8      	beq.n	8009ae6 <tcp_fasttmr+0x36>
        tcp_active_pcbs_changed = 0;
 8009b14:	4e07      	ldr	r6, [pc, #28]	; (8009b34 <tcp_fasttmr+0x84>)
 8009b16:	2300      	movs	r3, #0
 8009b18:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f7ff ff7c 	bl	8009a18 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009b20:	7833      	ldrb	r3, [r6, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d0df      	beq.n	8009ae6 <tcp_fasttmr+0x36>
 8009b26:	e7c8      	b.n	8009aba <tcp_fasttmr+0xa>
}
 8009b28:	bd70      	pop	{r4, r5, r6, pc}
 8009b2a:	bf00      	nop
 8009b2c:	2000172d 	.word	0x2000172d
 8009b30:	20008c44 	.word	0x20008c44
 8009b34:	20008c40 	.word	0x20008c40

08009b38 <tcp_slowtmr>:
{
 8009b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b3c:	b084      	sub	sp, #16
  ++tcp_ticks;
 8009b3e:	4ab4      	ldr	r2, [pc, #720]	; (8009e10 <tcp_slowtmr+0x2d8>)
 8009b40:	6813      	ldr	r3, [r2, #0]
 8009b42:	3301      	adds	r3, #1
 8009b44:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009b46:	4ab3      	ldr	r2, [pc, #716]	; (8009e14 <tcp_slowtmr+0x2dc>)
 8009b48:	7813      	ldrb	r3, [r2, #0]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8009b4e:	4bb2      	ldr	r3, [pc, #712]	; (8009e18 <tcp_slowtmr+0x2e0>)
 8009b50:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 8009b52:	2600      	movs	r6, #0
 8009b54:	e1a5      	b.n	8009ea2 <tcp_slowtmr+0x36a>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009b56:	4bb1      	ldr	r3, [pc, #708]	; (8009e1c <tcp_slowtmr+0x2e4>)
 8009b58:	f240 42be 	movw	r2, #1214	; 0x4be
 8009b5c:	49b0      	ldr	r1, [pc, #704]	; (8009e20 <tcp_slowtmr+0x2e8>)
 8009b5e:	48b1      	ldr	r0, [pc, #708]	; (8009e24 <tcp_slowtmr+0x2ec>)
 8009b60:	f00a fd48 	bl	80145f4 <iprintf>
 8009b64:	e1a4      	b.n	8009eb0 <tcp_slowtmr+0x378>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009b66:	4bad      	ldr	r3, [pc, #692]	; (8009e1c <tcp_slowtmr+0x2e4>)
 8009b68:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009b6c:	49ae      	ldr	r1, [pc, #696]	; (8009e28 <tcp_slowtmr+0x2f0>)
 8009b6e:	48ad      	ldr	r0, [pc, #692]	; (8009e24 <tcp_slowtmr+0x2ec>)
 8009b70:	f00a fd40 	bl	80145f4 <iprintf>
 8009b74:	e1a1      	b.n	8009eba <tcp_slowtmr+0x382>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009b76:	4ba9      	ldr	r3, [pc, #676]	; (8009e1c <tcp_slowtmr+0x2e4>)
 8009b78:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009b7c:	49ab      	ldr	r1, [pc, #684]	; (8009e2c <tcp_slowtmr+0x2f4>)
 8009b7e:	48a9      	ldr	r0, [pc, #676]	; (8009e24 <tcp_slowtmr+0x2ec>)
 8009b80:	f00a fd38 	bl	80145f4 <iprintf>
 8009b84:	e19e      	b.n	8009ec4 <tcp_slowtmr+0x38c>
      prev = pcb;
 8009b86:	4626      	mov	r6, r4
      pcb = pcb->next;
 8009b88:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
      continue;
 8009b8a:	e18a      	b.n	8009ea2 <tcp_slowtmr+0x36a>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009b8c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 8009b90:	2b05      	cmp	r3, #5
 8009b92:	f240 81a5 	bls.w	8009ee0 <tcp_slowtmr+0x3a8>
      ++pcb_remove;
 8009b96:	2501      	movs	r5, #1
 8009b98:	e075      	b.n	8009c86 <tcp_slowtmr+0x14e>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009b9a:	4ba0      	ldr	r3, [pc, #640]	; (8009e1c <tcp_slowtmr+0x2e4>)
 8009b9c:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009ba0:	49a3      	ldr	r1, [pc, #652]	; (8009e30 <tcp_slowtmr+0x2f8>)
 8009ba2:	48a0      	ldr	r0, [pc, #640]	; (8009e24 <tcp_slowtmr+0x2ec>)
 8009ba4:	f00a fd26 	bl	80145f4 <iprintf>
 8009ba8:	e1b3      	b.n	8009f12 <tcp_slowtmr+0x3da>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009baa:	4620      	mov	r0, r4
 8009bac:	f002 fb00 	bl	800c1b0 <tcp_split_unsent_seg>
 8009bb0:	b158      	cbz	r0, 8009bca <tcp_slowtmr+0x92>
              pcb->persist_cnt = 0;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009bb8:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8009bbc:	2b06      	cmp	r3, #6
 8009bbe:	d875      	bhi.n	8009cac <tcp_slowtmr+0x174>
                pcb->persist_backoff++;
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    pcb_remove = 0;
 8009bc6:	2500      	movs	r5, #0
 8009bc8:	e05d      	b.n	8009c86 <tcp_slowtmr+0x14e>
                if (tcp_output(pcb) == ERR_OK) {
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f002 fe0e 	bl	800c7ec <tcp_output>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d1ee      	bne.n	8009bb2 <tcp_slowtmr+0x7a>
    pcb_remove = 0;
 8009bd4:	2500      	movs	r5, #0
 8009bd6:	e056      	b.n	8009c86 <tcp_slowtmr+0x14e>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009bd8:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	db06      	blt.n	8009bee <tcp_slowtmr+0xb6>
 8009be0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d002      	beq.n	8009bee <tcp_slowtmr+0xb6>
          ++pcb->rtime;
 8009be8:	3301      	adds	r3, #1
 8009bea:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
        if (pcb->rtime >= pcb->rto) {
 8009bee:	f9b4 2050 	ldrsh.w	r2, [r4, #80]	; 0x50
 8009bf2:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	db45      	blt.n	8009c86 <tcp_slowtmr+0x14e>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f002 fc94 	bl	800c528 <tcp_rexmit_rto_prepare>
 8009c00:	b130      	cbz	r0, 8009c10 <tcp_slowtmr+0xd8>
 8009c02:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d13d      	bne.n	8009c86 <tcp_slowtmr+0x14e>
 8009c0a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009c0e:	b3d3      	cbz	r3, 8009c86 <tcp_slowtmr+0x14e>
            if (pcb->state != SYN_SENT) {
 8009c10:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d014      	beq.n	8009c42 <tcp_slowtmr+0x10a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009c18:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8009c1c:	2a0c      	cmp	r2, #12
 8009c1e:	bf28      	it	cs
 8009c20:	220c      	movcs	r2, #12
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009c22:	f9b4 105c 	ldrsh.w	r1, [r4, #92]	; 0x5c
 8009c26:	f9b4 305e 	ldrsh.w	r3, [r4, #94]	; 0x5e
 8009c2a:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8009c2e:	4981      	ldr	r1, [pc, #516]	; (8009e34 <tcp_slowtmr+0x2fc>)
 8009c30:	5c8a      	ldrb	r2, [r1, r2]
 8009c32:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009c34:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	dc20      	bgt.n	8009c7e <tcp_slowtmr+0x146>
 8009c3c:	b21b      	sxth	r3, r3
 8009c3e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
            pcb->rtime = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009c48:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 8009c4c:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8009c50:	4293      	cmp	r3, r2
 8009c52:	bf28      	it	cs
 8009c54:	4613      	movcs	r3, r2
            pcb->ssthresh = eff_wnd >> 1;
 8009c56:	085b      	lsrs	r3, r3, #1
 8009c58:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009c5c:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
 8009c60:	004a      	lsls	r2, r1, #1
 8009c62:	b292      	uxth	r2, r2
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d201      	bcs.n	8009c6c <tcp_slowtmr+0x134>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009c68:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
            pcb->cwnd = pcb->mss;
 8009c6c:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
            pcb->bytes_acked = 0;
 8009c70:	2300      	movs	r3, #0
 8009c72:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
            tcp_rexmit_rto_commit(pcb);
 8009c76:	4620      	mov	r0, r4
 8009c78:	f002 ff5c 	bl	800cb34 <tcp_rexmit_rto_commit>
 8009c7c:	e003      	b.n	8009c86 <tcp_slowtmr+0x14e>
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009c7e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8009c82:	e7dc      	b.n	8009c3e <tcp_slowtmr+0x106>
      ++pcb_remove;
 8009c84:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 8009c86:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009c8a:	2b06      	cmp	r3, #6
 8009c8c:	d010      	beq.n	8009cb0 <tcp_slowtmr+0x178>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009c8e:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8009c92:	f012 0f08 	tst.w	r2, #8
 8009c96:	d045      	beq.n	8009d24 <tcp_slowtmr+0x1ec>
 8009c98:	2b04      	cmp	r3, #4
 8009c9a:	d016      	beq.n	8009cca <tcp_slowtmr+0x192>
        ((pcb->state == ESTABLISHED) ||
 8009c9c:	2b07      	cmp	r3, #7
 8009c9e:	d014      	beq.n	8009cca <tcp_slowtmr+0x192>
    pcb_reset = 0;
 8009ca0:	2700      	movs	r7, #0
 8009ca2:	e040      	b.n	8009d26 <tcp_slowtmr+0x1ee>
          ++pcb_remove; /* max probes reached */
 8009ca4:	2501      	movs	r5, #1
 8009ca6:	e7ee      	b.n	8009c86 <tcp_slowtmr+0x14e>
    pcb_remove = 0;
 8009ca8:	2500      	movs	r5, #0
 8009caa:	e7ec      	b.n	8009c86 <tcp_slowtmr+0x14e>
 8009cac:	2500      	movs	r5, #0
 8009cae:	e7ea      	b.n	8009c86 <tcp_slowtmr+0x14e>
      if (pcb->flags & TF_RXCLOSED) {
 8009cb0:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8009cb2:	f012 0f10 	tst.w	r2, #16
 8009cb6:	d0ea      	beq.n	8009c8e <tcp_slowtmr+0x156>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009cb8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009cba:	4a55      	ldr	r2, [pc, #340]	; (8009e10 <tcp_slowtmr+0x2d8>)
 8009cbc:	6812      	ldr	r2, [r2, #0]
 8009cbe:	1a52      	subs	r2, r2, r1
 8009cc0:	2a28      	cmp	r2, #40	; 0x28
 8009cc2:	d9e4      	bls.n	8009c8e <tcp_slowtmr+0x156>
          ++pcb_remove;
 8009cc4:	3501      	adds	r5, #1
 8009cc6:	b2ed      	uxtb	r5, r5
 8009cc8:	e7e1      	b.n	8009c8e <tcp_slowtmr+0x156>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009cca:	4b51      	ldr	r3, [pc, #324]	; (8009e10 <tcp_slowtmr+0x2d8>)
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cd0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009cd2:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8009cd6:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 8009cda:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8009cde:	4856      	ldr	r0, [pc, #344]	; (8009e38 <tcp_slowtmr+0x300>)
 8009ce0:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009ce4:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8009ce8:	d903      	bls.n	8009cf2 <tcp_slowtmr+0x1ba>
        ++pcb_remove;
 8009cea:	3501      	adds	r5, #1
 8009cec:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 8009cee:	2701      	movs	r7, #1
 8009cf0:	e019      	b.n	8009d26 <tcp_slowtmr+0x1ee>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009cf2:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
 8009cf6:	4851      	ldr	r0, [pc, #324]	; (8009e3c <tcp_slowtmr+0x304>)
 8009cf8:	fb00 1303 	mla	r3, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009cfc:	494e      	ldr	r1, [pc, #312]	; (8009e38 <tcp_slowtmr+0x300>)
 8009cfe:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d02:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8009d06:	d801      	bhi.n	8009d0c <tcp_slowtmr+0x1d4>
    pcb_reset = 0;
 8009d08:	2700      	movs	r7, #0
 8009d0a:	e00c      	b.n	8009d26 <tcp_slowtmr+0x1ee>
        err = tcp_keepalive(pcb);
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f002 ff47 	bl	800cba0 <tcp_keepalive>
        if (err == ERR_OK) {
 8009d12:	2800      	cmp	r0, #0
 8009d14:	d140      	bne.n	8009d98 <tcp_slowtmr+0x260>
          pcb->keep_cnt_sent++;
 8009d16:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
    pcb_reset = 0;
 8009d20:	2700      	movs	r7, #0
 8009d22:	e000      	b.n	8009d26 <tcp_slowtmr+0x1ee>
 8009d24:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 8009d26:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009d2a:	b153      	cbz	r3, 8009d42 <tcp_slowtmr+0x20a>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009d2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d2e:	4a38      	ldr	r2, [pc, #224]	; (8009e10 <tcp_slowtmr+0x2d8>)
 8009d30:	6812      	ldr	r2, [r2, #0]
 8009d32:	1ad2      	subs	r2, r2, r3
 8009d34:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8009d38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009d3c:	0059      	lsls	r1, r3, #1
    if (pcb->ooseq != NULL &&
 8009d3e:	428a      	cmp	r2, r1
 8009d40:	d22c      	bcs.n	8009d9c <tcp_slowtmr+0x264>
    if (pcb->state == SYN_RCVD) {
 8009d42:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	d02c      	beq.n	8009da4 <tcp_slowtmr+0x26c>
    if (pcb->state == LAST_ACK) {
 8009d4a:	2b09      	cmp	r3, #9
 8009d4c:	d033      	beq.n	8009db6 <tcp_slowtmr+0x27e>
    if (pcb_remove) {
 8009d4e:	2d00      	cmp	r5, #0
 8009d50:	d13a      	bne.n	8009dc8 <tcp_slowtmr+0x290>
      pcb = pcb->next;
 8009d52:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      ++prev->polltmr;
 8009d54:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009d58:	3301      	adds	r3, #1
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      if (prev->polltmr >= prev->pollinterval) {
 8009d60:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8009d64:	4293      	cmp	r3, r2
 8009d66:	f0c0 809a 	bcc.w	8009e9e <tcp_slowtmr+0x366>
        prev->polltmr = 0;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        tcp_active_pcbs_changed = 0;
 8009d70:	4a33      	ldr	r2, [pc, #204]	; (8009e40 <tcp_slowtmr+0x308>)
 8009d72:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 8009d74:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f000 8088 	beq.w	8009e8e <tcp_slowtmr+0x356>
 8009d7e:	4621      	mov	r1, r4
 8009d80:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009d82:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8009d84:	4b2e      	ldr	r3, [pc, #184]	; (8009e40 <tcp_slowtmr+0x308>)
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f47f aee0 	bne.w	8009b4e <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d07f      	beq.n	8009e92 <tcp_slowtmr+0x35a>
      prev = pcb;
 8009d92:	4626      	mov	r6, r4
      pcb = pcb->next;
 8009d94:	462c      	mov	r4, r5
 8009d96:	e084      	b.n	8009ea2 <tcp_slowtmr+0x36a>
    pcb_reset = 0;
 8009d98:	2700      	movs	r7, #0
 8009d9a:	e7c4      	b.n	8009d26 <tcp_slowtmr+0x1ee>
      tcp_free_ooseq(pcb);
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f7ff fa45 	bl	800922c <tcp_free_ooseq>
 8009da2:	e7ce      	b.n	8009d42 <tcp_slowtmr+0x20a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009da4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009da6:	4a1a      	ldr	r2, [pc, #104]	; (8009e10 <tcp_slowtmr+0x2d8>)
 8009da8:	6812      	ldr	r2, [r2, #0]
 8009daa:	1a52      	subs	r2, r2, r1
 8009dac:	2a28      	cmp	r2, #40	; 0x28
 8009dae:	d9cc      	bls.n	8009d4a <tcp_slowtmr+0x212>
        ++pcb_remove;
 8009db0:	3501      	adds	r5, #1
 8009db2:	b2ed      	uxtb	r5, r5
 8009db4:	e7c9      	b.n	8009d4a <tcp_slowtmr+0x212>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009db6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009db8:	4b15      	ldr	r3, [pc, #84]	; (8009e10 <tcp_slowtmr+0x2d8>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	1a9b      	subs	r3, r3, r2
 8009dbe:	2bf0      	cmp	r3, #240	; 0xf0
 8009dc0:	d9c5      	bls.n	8009d4e <tcp_slowtmr+0x216>
        ++pcb_remove;
 8009dc2:	3501      	adds	r5, #1
 8009dc4:	b2ed      	uxtb	r5, r5
 8009dc6:	e7c2      	b.n	8009d4e <tcp_slowtmr+0x216>
      tcp_err_fn err_fn = pcb->errf;
 8009dc8:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
      tcp_pcb_purge(pcb);
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f7ff fa3b 	bl	8009248 <tcp_pcb_purge>
      if (prev != NULL) {
 8009dd2:	2e00      	cmp	r6, #0
 8009dd4:	d03e      	beq.n	8009e54 <tcp_slowtmr+0x31c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009dd6:	4b10      	ldr	r3, [pc, #64]	; (8009e18 <tcp_slowtmr+0x2e0>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	429c      	cmp	r4, r3
 8009ddc:	d032      	beq.n	8009e44 <tcp_slowtmr+0x30c>
        prev->next = pcb->next;
 8009dde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009de0:	62f3      	str	r3, [r6, #44]	; 0x2c
      if (pcb_reset) {
 8009de2:	2f00      	cmp	r7, #0
 8009de4:	d145      	bne.n	8009e72 <tcp_slowtmr+0x33a>
      err_arg = pcb->callback_arg;
 8009de6:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
      pcb = pcb->next;
 8009dea:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
      tcp_free(pcb2);
 8009dec:	4620      	mov	r0, r4
 8009dee:	f7ff f8f9 	bl	8008fe4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8009df2:	4b13      	ldr	r3, [pc, #76]	; (8009e40 <tcp_slowtmr+0x308>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009df8:	b11d      	cbz	r5, 8009e02 <tcp_slowtmr+0x2ca>
 8009dfa:	f06f 010c 	mvn.w	r1, #12
 8009dfe:	4640      	mov	r0, r8
 8009e00:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 8009e02:	4b0f      	ldr	r3, [pc, #60]	; (8009e40 <tcp_slowtmr+0x308>)
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f47f aea1 	bne.w	8009b4e <tcp_slowtmr+0x16>
      pcb = pcb->next;
 8009e0c:	463c      	mov	r4, r7
 8009e0e:	e048      	b.n	8009ea2 <tcp_slowtmr+0x36a>
 8009e10:	20008c48 	.word	0x20008c48
 8009e14:	2000172d 	.word	0x2000172d
 8009e18:	20008c44 	.word	0x20008c44
 8009e1c:	08016a64 	.word	0x08016a64
 8009e20:	08016ad8 	.word	0x08016ad8
 8009e24:	08015608 	.word	0x08015608
 8009e28:	08016b04 	.word	0x08016b04
 8009e2c:	08016b30 	.word	0x08016b30
 8009e30:	08016b94 	.word	0x08016b94
 8009e34:	080167e4 	.word	0x080167e4
 8009e38:	10624dd3 	.word	0x10624dd3
 8009e3c:	000124f8 	.word	0x000124f8
 8009e40:	20008c40 	.word	0x20008c40
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009e44:	4b66      	ldr	r3, [pc, #408]	; (8009fe0 <tcp_slowtmr+0x4a8>)
 8009e46:	f240 526d 	movw	r2, #1389	; 0x56d
 8009e4a:	4966      	ldr	r1, [pc, #408]	; (8009fe4 <tcp_slowtmr+0x4ac>)
 8009e4c:	4866      	ldr	r0, [pc, #408]	; (8009fe8 <tcp_slowtmr+0x4b0>)
 8009e4e:	f00a fbd1 	bl	80145f4 <iprintf>
 8009e52:	e7c4      	b.n	8009dde <tcp_slowtmr+0x2a6>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009e54:	4b65      	ldr	r3, [pc, #404]	; (8009fec <tcp_slowtmr+0x4b4>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	429c      	cmp	r4, r3
 8009e5a:	d006      	beq.n	8009e6a <tcp_slowtmr+0x332>
 8009e5c:	4b60      	ldr	r3, [pc, #384]	; (8009fe0 <tcp_slowtmr+0x4a8>)
 8009e5e:	f240 5271 	movw	r2, #1393	; 0x571
 8009e62:	4963      	ldr	r1, [pc, #396]	; (8009ff0 <tcp_slowtmr+0x4b8>)
 8009e64:	4860      	ldr	r0, [pc, #384]	; (8009fe8 <tcp_slowtmr+0x4b0>)
 8009e66:	f00a fbc5 	bl	80145f4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009e6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009e6c:	4b5f      	ldr	r3, [pc, #380]	; (8009fec <tcp_slowtmr+0x4b4>)
 8009e6e:	601a      	str	r2, [r3, #0]
 8009e70:	e7b7      	b.n	8009de2 <tcp_slowtmr+0x2aa>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009e72:	f104 0314 	add.w	r3, r4, #20
 8009e76:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009e78:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8009e7a:	8f20      	ldrh	r0, [r4, #56]	; 0x38
 8009e7c:	9002      	str	r0, [sp, #8]
 8009e7e:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8009e80:	9001      	str	r0, [sp, #4]
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	4623      	mov	r3, r4
 8009e86:	4620      	mov	r0, r4
 8009e88:	f002 fc2a 	bl	800c6e0 <tcp_rst>
 8009e8c:	e7ab      	b.n	8009de6 <tcp_slowtmr+0x2ae>
        TCP_EVENT_POLL(prev, err);
 8009e8e:	2000      	movs	r0, #0
 8009e90:	e778      	b.n	8009d84 <tcp_slowtmr+0x24c>
          tcp_output(prev);
 8009e92:	4620      	mov	r0, r4
 8009e94:	f002 fcaa 	bl	800c7ec <tcp_output>
      prev = pcb;
 8009e98:	4626      	mov	r6, r4
      pcb = pcb->next;
 8009e9a:	462c      	mov	r4, r5
 8009e9c:	e001      	b.n	8009ea2 <tcp_slowtmr+0x36a>
      prev = pcb;
 8009e9e:	4626      	mov	r6, r4
      pcb = pcb->next;
 8009ea0:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8009ea2:	2c00      	cmp	r4, #0
 8009ea4:	d058      	beq.n	8009f58 <tcp_slowtmr+0x420>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009ea6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	f43f ae53 	beq.w	8009b56 <tcp_slowtmr+0x1e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009eb0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	f43f ae56 	beq.w	8009b66 <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009eba:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009ebe:	2b0a      	cmp	r3, #10
 8009ec0:	f43f ae59 	beq.w	8009b76 <tcp_slowtmr+0x3e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009ec4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8009ec8:	4b4a      	ldr	r3, [pc, #296]	; (8009ff4 <tcp_slowtmr+0x4bc>)
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	f43f ae5a 	beq.w	8009b86 <tcp_slowtmr+0x4e>
    pcb->last_timer = tcp_timer_ctr;
 8009ed2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009ed6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	f43f ae56 	beq.w	8009b8c <tcp_slowtmr+0x54>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009ee0:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 8009ee4:	2b0b      	cmp	r3, #11
 8009ee6:	f63f aecd 	bhi.w	8009c84 <tcp_slowtmr+0x14c>
      if (pcb->persist_backoff > 0) {
 8009eea:	f894 50b9 	ldrb.w	r5, [r4, #185]	; 0xb9
 8009eee:	2d00      	cmp	r5, #0
 8009ef0:	f43f ae72 	beq.w	8009bd8 <tcp_slowtmr+0xa0>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009ef4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009ef8:	b133      	cbz	r3, 8009f08 <tcp_slowtmr+0x3d0>
 8009efa:	4b39      	ldr	r3, [pc, #228]	; (8009fe0 <tcp_slowtmr+0x4a8>)
 8009efc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009f00:	493d      	ldr	r1, [pc, #244]	; (8009ff8 <tcp_slowtmr+0x4c0>)
 8009f02:	4839      	ldr	r0, [pc, #228]	; (8009fe8 <tcp_slowtmr+0x4b0>)
 8009f04:	f00a fb76 	bl	80145f4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009f08:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f43f ae44 	beq.w	8009b9a <tcp_slowtmr+0x62>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009f12:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
 8009f16:	2b0b      	cmp	r3, #11
 8009f18:	f63f aec4 	bhi.w	8009ca4 <tcp_slowtmr+0x16c>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009f1c:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8009f20:	3b01      	subs	r3, #1
 8009f22:	4a36      	ldr	r2, [pc, #216]	; (8009ffc <tcp_slowtmr+0x4c4>)
 8009f24:	5cd2      	ldrb	r2, [r2, r3]
          if (pcb->persist_cnt < backoff_cnt) {
 8009f26:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d202      	bcs.n	8009f34 <tcp_slowtmr+0x3fc>
            pcb->persist_cnt++;
 8009f2e:	3301      	adds	r3, #1
 8009f30:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
          if (pcb->persist_cnt >= backoff_cnt) {
 8009f34:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	f4ff aeb5 	bcc.w	8009ca8 <tcp_slowtmr+0x170>
            if (pcb->snd_wnd == 0) {
 8009f3e:	f8b4 1080 	ldrh.w	r1, [r4, #128]	; 0x80
 8009f42:	2900      	cmp	r1, #0
 8009f44:	f47f ae31 	bne.w	8009baa <tcp_slowtmr+0x72>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f002 fe57 	bl	800cbfc <tcp_zero_window_probe>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	f43f ae2f 	beq.w	8009bb2 <tcp_slowtmr+0x7a>
    pcb_remove = 0;
 8009f54:	2500      	movs	r5, #0
 8009f56:	e696      	b.n	8009c86 <tcp_slowtmr+0x14e>
  pcb = tcp_tw_pcbs;
 8009f58:	4b29      	ldr	r3, [pc, #164]	; (800a000 <tcp_slowtmr+0x4c8>)
 8009f5a:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 8009f5c:	e007      	b.n	8009f6e <tcp_slowtmr+0x436>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009f5e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8009f60:	4b28      	ldr	r3, [pc, #160]	; (800a004 <tcp_slowtmr+0x4cc>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	1a9b      	subs	r3, r3, r2
 8009f66:	2bf0      	cmp	r3, #240	; 0xf0
 8009f68:	d80f      	bhi.n	8009f8a <tcp_slowtmr+0x452>
      prev = pcb;
 8009f6a:	462c      	mov	r4, r5
      pcb = pcb->next;
 8009f6c:	6aed      	ldr	r5, [r5, #44]	; 0x2c
  while (pcb != NULL) {
 8009f6e:	2d00      	cmp	r5, #0
 8009f70:	d032      	beq.n	8009fd8 <tcp_slowtmr+0x4a0>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009f72:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8009f76:	2b0a      	cmp	r3, #10
 8009f78:	d0f1      	beq.n	8009f5e <tcp_slowtmr+0x426>
 8009f7a:	4b19      	ldr	r3, [pc, #100]	; (8009fe0 <tcp_slowtmr+0x4a8>)
 8009f7c:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009f80:	4921      	ldr	r1, [pc, #132]	; (800a008 <tcp_slowtmr+0x4d0>)
 8009f82:	4819      	ldr	r0, [pc, #100]	; (8009fe8 <tcp_slowtmr+0x4b0>)
 8009f84:	f00a fb36 	bl	80145f4 <iprintf>
 8009f88:	e7e9      	b.n	8009f5e <tcp_slowtmr+0x426>
      tcp_pcb_purge(pcb);
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	f7ff f95c 	bl	8009248 <tcp_pcb_purge>
      if (prev != NULL) {
 8009f90:	b19c      	cbz	r4, 8009fba <tcp_slowtmr+0x482>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009f92:	4b1b      	ldr	r3, [pc, #108]	; (800a000 <tcp_slowtmr+0x4c8>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	429d      	cmp	r5, r3
 8009f98:	d007      	beq.n	8009faa <tcp_slowtmr+0x472>
        prev->next = pcb->next;
 8009f9a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009f9c:	62e3      	str	r3, [r4, #44]	; 0x2c
      pcb = pcb->next;
 8009f9e:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      tcp_free(pcb2);
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	f7ff f81f 	bl	8008fe4 <tcp_free>
      pcb = pcb->next;
 8009fa6:	4635      	mov	r5, r6
 8009fa8:	e7e1      	b.n	8009f6e <tcp_slowtmr+0x436>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009faa:	4b0d      	ldr	r3, [pc, #52]	; (8009fe0 <tcp_slowtmr+0x4a8>)
 8009fac:	f240 52af 	movw	r2, #1455	; 0x5af
 8009fb0:	4916      	ldr	r1, [pc, #88]	; (800a00c <tcp_slowtmr+0x4d4>)
 8009fb2:	480d      	ldr	r0, [pc, #52]	; (8009fe8 <tcp_slowtmr+0x4b0>)
 8009fb4:	f00a fb1e 	bl	80145f4 <iprintf>
 8009fb8:	e7ef      	b.n	8009f9a <tcp_slowtmr+0x462>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009fba:	4b11      	ldr	r3, [pc, #68]	; (800a000 <tcp_slowtmr+0x4c8>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	429d      	cmp	r5, r3
 8009fc0:	d006      	beq.n	8009fd0 <tcp_slowtmr+0x498>
 8009fc2:	4b07      	ldr	r3, [pc, #28]	; (8009fe0 <tcp_slowtmr+0x4a8>)
 8009fc4:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009fc8:	4911      	ldr	r1, [pc, #68]	; (800a010 <tcp_slowtmr+0x4d8>)
 8009fca:	4807      	ldr	r0, [pc, #28]	; (8009fe8 <tcp_slowtmr+0x4b0>)
 8009fcc:	f00a fb12 	bl	80145f4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009fd0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8009fd2:	4b0b      	ldr	r3, [pc, #44]	; (800a000 <tcp_slowtmr+0x4c8>)
 8009fd4:	601a      	str	r2, [r3, #0]
 8009fd6:	e7e2      	b.n	8009f9e <tcp_slowtmr+0x466>
}
 8009fd8:	b004      	add	sp, #16
 8009fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fde:	bf00      	nop
 8009fe0:	08016a64 	.word	0x08016a64
 8009fe4:	08016bcc 	.word	0x08016bcc
 8009fe8:	08015608 	.word	0x08015608
 8009fec:	20008c44 	.word	0x20008c44
 8009ff0:	08016bf8 	.word	0x08016bf8
 8009ff4:	2000172d 	.word	0x2000172d
 8009ff8:	08016b60 	.word	0x08016b60
 8009ffc:	080169d8 	.word	0x080169d8
 800a000:	20008c54 	.word	0x20008c54
 800a004:	20008c48 	.word	0x20008c48
 800a008:	08016c24 	.word	0x08016c24
 800a00c:	08016c54 	.word	0x08016c54
 800a010:	08016c7c 	.word	0x08016c7c

0800a014 <tcp_tmr>:
{
 800a014:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800a016:	f7ff fd4b 	bl	8009ab0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800a01a:	4a06      	ldr	r2, [pc, #24]	; (800a034 <tcp_tmr+0x20>)
 800a01c:	7813      	ldrb	r3, [r2, #0]
 800a01e:	3301      	adds	r3, #1
 800a020:	b2db      	uxtb	r3, r3
 800a022:	7013      	strb	r3, [r2, #0]
 800a024:	f013 0f01 	tst.w	r3, #1
 800a028:	d100      	bne.n	800a02c <tcp_tmr+0x18>
}
 800a02a:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 800a02c:	f7ff fd84 	bl	8009b38 <tcp_slowtmr>
}
 800a030:	e7fb      	b.n	800a02a <tcp_tmr+0x16>
 800a032:	bf00      	nop
 800a034:	2000172c 	.word	0x2000172c

0800a038 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 800a038:	4a0a      	ldr	r2, [pc, #40]	; (800a064 <tcp_get_next_optbyte+0x2c>)
 800a03a:	8813      	ldrh	r3, [r2, #0]
 800a03c:	1c59      	adds	r1, r3, #1
 800a03e:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a040:	4a09      	ldr	r2, [pc, #36]	; (800a068 <tcp_get_next_optbyte+0x30>)
 800a042:	6811      	ldr	r1, [r2, #0]
 800a044:	b149      	cbz	r1, 800a05a <tcp_get_next_optbyte+0x22>
 800a046:	4a09      	ldr	r2, [pc, #36]	; (800a06c <tcp_get_next_optbyte+0x34>)
 800a048:	8812      	ldrh	r2, [r2, #0]
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d305      	bcc.n	800a05a <tcp_get_next_optbyte+0x22>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	b2d2      	uxtb	r2, r2
 800a052:	1a9b      	subs	r3, r3, r2
 800a054:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 800a056:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800a058:	4770      	bx	lr
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a05a:	4a05      	ldr	r2, [pc, #20]	; (800a070 <tcp_get_next_optbyte+0x38>)
 800a05c:	6812      	ldr	r2, [r2, #0]
    return opts[optidx];
 800a05e:	4413      	add	r3, r2
 800a060:	7d18      	ldrb	r0, [r3, #20]
 800a062:	4770      	bx	lr
 800a064:	2000175c 	.word	0x2000175c
 800a068:	20001768 	.word	0x20001768
 800a06c:	20001764 	.word	0x20001764
 800a070:	20001760 	.word	0x20001760

0800a074 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a074:	b538      	push	{r3, r4, r5, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a076:	4604      	mov	r4, r0
 800a078:	2800      	cmp	r0, #0
 800a07a:	d031      	beq.n	800a0e0 <tcp_parseopt+0x6c>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a07c:	4b22      	ldr	r3, [pc, #136]	; (800a108 <tcp_parseopt+0x94>)
 800a07e:	881b      	ldrh	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d03f      	beq.n	800a104 <tcp_parseopt+0x90>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a084:	4b21      	ldr	r3, [pc, #132]	; (800a10c <tcp_parseopt+0x98>)
 800a086:	2200      	movs	r2, #0
 800a088:	801a      	strh	r2, [r3, #0]
 800a08a:	4b20      	ldr	r3, [pc, #128]	; (800a10c <tcp_parseopt+0x98>)
 800a08c:	881a      	ldrh	r2, [r3, #0]
 800a08e:	4b1e      	ldr	r3, [pc, #120]	; (800a108 <tcp_parseopt+0x94>)
 800a090:	881b      	ldrh	r3, [r3, #0]
 800a092:	429a      	cmp	r2, r3
 800a094:	d236      	bcs.n	800a104 <tcp_parseopt+0x90>
      u8_t opt = tcp_get_next_optbyte();
 800a096:	f7ff ffcf 	bl	800a038 <tcp_get_next_optbyte>
      switch (opt) {
 800a09a:	2801      	cmp	r0, #1
 800a09c:	d0f5      	beq.n	800a08a <tcp_parseopt+0x16>
 800a09e:	b388      	cbz	r0, 800a104 <tcp_parseopt+0x90>
 800a0a0:	2802      	cmp	r0, #2
 800a0a2:	d125      	bne.n	800a0f0 <tcp_parseopt+0x7c>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a0a4:	f7ff ffc8 	bl	800a038 <tcp_get_next_optbyte>
 800a0a8:	2804      	cmp	r0, #4
 800a0aa:	d12b      	bne.n	800a104 <tcp_parseopt+0x90>
 800a0ac:	4b17      	ldr	r3, [pc, #92]	; (800a10c <tcp_parseopt+0x98>)
 800a0ae:	881b      	ldrh	r3, [r3, #0]
 800a0b0:	3302      	adds	r3, #2
 800a0b2:	4a15      	ldr	r2, [pc, #84]	; (800a108 <tcp_parseopt+0x94>)
 800a0b4:	8812      	ldrh	r2, [r2, #0]
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	dc24      	bgt.n	800a104 <tcp_parseopt+0x90>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a0ba:	f7ff ffbd 	bl	800a038 <tcp_get_next_optbyte>
 800a0be:	b285      	uxth	r5, r0
 800a0c0:	022d      	lsls	r5, r5, #8
 800a0c2:	b2ad      	uxth	r5, r5
          mss |= tcp_get_next_optbyte();
 800a0c4:	f7ff ffb8 	bl	800a038 <tcp_get_next_optbyte>
 800a0c8:	b280      	uxth	r0, r0
 800a0ca:	4305      	orrs	r5, r0
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a0cc:	1e6b      	subs	r3, r5, #1
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a0d4:	d301      	bcc.n	800a0da <tcp_parseopt+0x66>
 800a0d6:	f44f 7506 	mov.w	r5, #536	; 0x218
 800a0da:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
          break;
 800a0de:	e7d4      	b.n	800a08a <tcp_parseopt+0x16>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a0e0:	4b0b      	ldr	r3, [pc, #44]	; (800a110 <tcp_parseopt+0x9c>)
 800a0e2:	f240 727d 	movw	r2, #1917	; 0x77d
 800a0e6:	490b      	ldr	r1, [pc, #44]	; (800a114 <tcp_parseopt+0xa0>)
 800a0e8:	480b      	ldr	r0, [pc, #44]	; (800a118 <tcp_parseopt+0xa4>)
 800a0ea:	f00a fa83 	bl	80145f4 <iprintf>
 800a0ee:	e7c5      	b.n	800a07c <tcp_parseopt+0x8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a0f0:	f7ff ffa2 	bl	800a038 <tcp_get_next_optbyte>
          if (data < 2) {
 800a0f4:	2801      	cmp	r0, #1
 800a0f6:	d905      	bls.n	800a104 <tcp_parseopt+0x90>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a0f8:	4b04      	ldr	r3, [pc, #16]	; (800a10c <tcp_parseopt+0x98>)
 800a0fa:	881a      	ldrh	r2, [r3, #0]
 800a0fc:	4410      	add	r0, r2
 800a0fe:	3802      	subs	r0, #2
 800a100:	8018      	strh	r0, [r3, #0]
 800a102:	e7c2      	b.n	800a08a <tcp_parseopt+0x16>
      }
    }
  }
}
 800a104:	bd38      	pop	{r3, r4, r5, pc}
 800a106:	bf00      	nop
 800a108:	2000176c 	.word	0x2000176c
 800a10c:	2000175c 	.word	0x2000175c
 800a110:	08016f10 	.word	0x08016f10
 800a114:	08016f44 	.word	0x08016f44
 800a118:	08015608 	.word	0x08015608

0800a11c <tcp_input_delayed_close>:
{
 800a11c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a11e:	4604      	mov	r4, r0
 800a120:	b1c0      	cbz	r0, 800a154 <tcp_input_delayed_close+0x38>
  if (recv_flags & TF_CLOSED) {
 800a122:	4b11      	ldr	r3, [pc, #68]	; (800a168 <tcp_input_delayed_close+0x4c>)
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	f013 0f10 	tst.w	r3, #16
 800a12a:	d01b      	beq.n	800a164 <tcp_input_delayed_close+0x48>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a12c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800a12e:	f013 0f10 	tst.w	r3, #16
 800a132:	d106      	bne.n	800a142 <tcp_input_delayed_close+0x26>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a134:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800a138:	b11b      	cbz	r3, 800a142 <tcp_input_delayed_close+0x26>
 800a13a:	f06f 010e 	mvn.w	r1, #14
 800a13e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a140:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a142:	4621      	mov	r1, r4
 800a144:	4809      	ldr	r0, [pc, #36]	; (800a16c <tcp_input_delayed_close+0x50>)
 800a146:	f7ff f8b9 	bl	80092bc <tcp_pcb_remove>
    tcp_free(pcb);
 800a14a:	4620      	mov	r0, r4
 800a14c:	f7fe ff4a 	bl	8008fe4 <tcp_free>
    return 1;
 800a150:	2001      	movs	r0, #1
}
 800a152:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a154:	4b06      	ldr	r3, [pc, #24]	; (800a170 <tcp_input_delayed_close+0x54>)
 800a156:	f240 225a 	movw	r2, #602	; 0x25a
 800a15a:	4906      	ldr	r1, [pc, #24]	; (800a174 <tcp_input_delayed_close+0x58>)
 800a15c:	4806      	ldr	r0, [pc, #24]	; (800a178 <tcp_input_delayed_close+0x5c>)
 800a15e:	f00a fa49 	bl	80145f4 <iprintf>
 800a162:	e7de      	b.n	800a122 <tcp_input_delayed_close+0x6>
  return 0;
 800a164:	2000      	movs	r0, #0
 800a166:	e7f4      	b.n	800a152 <tcp_input_delayed_close+0x36>
 800a168:	20001754 	.word	0x20001754
 800a16c:	20008c44 	.word	0x20008c44
 800a170:	08016f10 	.word	0x08016f10
 800a174:	08016ea0 	.word	0x08016ea0
 800a178:	08015608 	.word	0x08015608

0800a17c <tcp_timewait_input>:
  if (flags & TCP_RST) {
 800a17c:	4b23      	ldr	r3, [pc, #140]	; (800a20c <tcp_timewait_input+0x90>)
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	f013 0f04 	tst.w	r3, #4
 800a184:	d141      	bne.n	800a20a <tcp_timewait_input+0x8e>
{
 800a186:	b530      	push	{r4, r5, lr}
 800a188:	b085      	sub	sp, #20
 800a18a:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a18c:	b930      	cbnz	r0, 800a19c <tcp_timewait_input+0x20>
 800a18e:	4b20      	ldr	r3, [pc, #128]	; (800a210 <tcp_timewait_input+0x94>)
 800a190:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a194:	491f      	ldr	r1, [pc, #124]	; (800a214 <tcp_timewait_input+0x98>)
 800a196:	4820      	ldr	r0, [pc, #128]	; (800a218 <tcp_timewait_input+0x9c>)
 800a198:	f00a fa2c 	bl	80145f4 <iprintf>
  if (flags & TCP_SYN) {
 800a19c:	4b1b      	ldr	r3, [pc, #108]	; (800a20c <tcp_timewait_input+0x90>)
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	f013 0f02 	tst.w	r3, #2
 800a1a4:	d01f      	beq.n	800a1e6 <tcp_timewait_input+0x6a>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a1a6:	4b1d      	ldr	r3, [pc, #116]	; (800a21c <tcp_timewait_input+0xa0>)
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a1ac:	1ad1      	subs	r1, r2, r3
 800a1ae:	2900      	cmp	r1, #0
 800a1b0:	db1f      	blt.n	800a1f2 <tcp_timewait_input+0x76>
 800a1b2:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
 800a1b6:	440b      	add	r3, r1
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	dc19      	bgt.n	800a1f2 <tcp_timewait_input+0x76>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a1be:	4b18      	ldr	r3, [pc, #96]	; (800a220 <tcp_timewait_input+0xa4>)
 800a1c0:	6819      	ldr	r1, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a1c2:	4b18      	ldr	r3, [pc, #96]	; (800a224 <tcp_timewait_input+0xa8>)
 800a1c4:	4818      	ldr	r0, [pc, #96]	; (800a228 <tcp_timewait_input+0xac>)
 800a1c6:	8800      	ldrh	r0, [r0, #0]
 800a1c8:	880d      	ldrh	r5, [r1, #0]
 800a1ca:	9502      	str	r5, [sp, #8]
 800a1cc:	8849      	ldrh	r1, [r1, #2]
 800a1ce:	9101      	str	r1, [sp, #4]
 800a1d0:	f1a3 0114 	sub.w	r1, r3, #20
 800a1d4:	9100      	str	r1, [sp, #0]
 800a1d6:	4402      	add	r2, r0
 800a1d8:	4914      	ldr	r1, [pc, #80]	; (800a22c <tcp_timewait_input+0xb0>)
 800a1da:	6809      	ldr	r1, [r1, #0]
 800a1dc:	4620      	mov	r0, r4
 800a1de:	f002 fa7f 	bl	800c6e0 <tcp_rst>
}
 800a1e2:	b005      	add	sp, #20
 800a1e4:	bd30      	pop	{r4, r5, pc}
  } else if (flags & TCP_FIN) {
 800a1e6:	f013 0f01 	tst.w	r3, #1
 800a1ea:	d002      	beq.n	800a1f2 <tcp_timewait_input+0x76>
    pcb->tmr = tcp_ticks;
 800a1ec:	4b10      	ldr	r3, [pc, #64]	; (800a230 <tcp_timewait_input+0xb4>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6423      	str	r3, [r4, #64]	; 0x40
  if ((tcplen > 0)) {
 800a1f2:	4b0d      	ldr	r3, [pc, #52]	; (800a228 <tcp_timewait_input+0xac>)
 800a1f4:	881b      	ldrh	r3, [r3, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d0f3      	beq.n	800a1e2 <tcp_timewait_input+0x66>
    tcp_ack_now(pcb);
 800a1fa:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800a1fc:	f043 0302 	orr.w	r3, r3, #2
 800a200:	8763      	strh	r3, [r4, #58]	; 0x3a
    tcp_output(pcb);
 800a202:	4620      	mov	r0, r4
 800a204:	f002 faf2 	bl	800c7ec <tcp_output>
 800a208:	e7eb      	b.n	800a1e2 <tcp_timewait_input+0x66>
 800a20a:	4770      	bx	lr
 800a20c:	20001734 	.word	0x20001734
 800a210:	08016f10 	.word	0x08016f10
 800a214:	0801711c 	.word	0x0801711c
 800a218:	08015608 	.word	0x08015608
 800a21c:	20001758 	.word	0x20001758
 800a220:	20001760 	.word	0x20001760
 800a224:	20004bac 	.word	0x20004bac
 800a228:	2000176e 	.word	0x2000176e
 800a22c:	20001730 	.word	0x20001730
 800a230:	20008c48 	.word	0x20008c48

0800a234 <tcp_listen_input>:
  if (flags & TCP_RST) {
 800a234:	4b6a      	ldr	r3, [pc, #424]	; (800a3e0 <tcp_listen_input+0x1ac>)
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	f013 0f04 	tst.w	r3, #4
 800a23c:	f040 80cf 	bne.w	800a3de <tcp_listen_input+0x1aa>
{
 800a240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a242:	b085      	sub	sp, #20
 800a244:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a246:	b148      	cbz	r0, 800a25c <tcp_listen_input+0x28>
  if (flags & TCP_ACK) {
 800a248:	4b65      	ldr	r3, [pc, #404]	; (800a3e0 <tcp_listen_input+0x1ac>)
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	f013 0f10 	tst.w	r3, #16
 800a250:	d10c      	bne.n	800a26c <tcp_listen_input+0x38>
  } else if (flags & TCP_SYN) {
 800a252:	f013 0f02 	tst.w	r3, #2
 800a256:	d11e      	bne.n	800a296 <tcp_listen_input+0x62>
}
 800a258:	b005      	add	sp, #20
 800a25a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a25c:	4b61      	ldr	r3, [pc, #388]	; (800a3e4 <tcp_listen_input+0x1b0>)
 800a25e:	f240 2281 	movw	r2, #641	; 0x281
 800a262:	4961      	ldr	r1, [pc, #388]	; (800a3e8 <tcp_listen_input+0x1b4>)
 800a264:	4861      	ldr	r0, [pc, #388]	; (800a3ec <tcp_listen_input+0x1b8>)
 800a266:	f00a f9c5 	bl	80145f4 <iprintf>
 800a26a:	e7ed      	b.n	800a248 <tcp_listen_input+0x14>
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a26c:	4b60      	ldr	r3, [pc, #384]	; (800a3f0 <tcp_listen_input+0x1bc>)
 800a26e:	6818      	ldr	r0, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a270:	4b60      	ldr	r3, [pc, #384]	; (800a3f4 <tcp_listen_input+0x1c0>)
 800a272:	4a61      	ldr	r2, [pc, #388]	; (800a3f8 <tcp_listen_input+0x1c4>)
 800a274:	8814      	ldrh	r4, [r2, #0]
 800a276:	4a61      	ldr	r2, [pc, #388]	; (800a3fc <tcp_listen_input+0x1c8>)
 800a278:	6812      	ldr	r2, [r2, #0]
 800a27a:	4961      	ldr	r1, [pc, #388]	; (800a400 <tcp_listen_input+0x1cc>)
 800a27c:	6809      	ldr	r1, [r1, #0]
 800a27e:	8806      	ldrh	r6, [r0, #0]
 800a280:	9602      	str	r6, [sp, #8]
 800a282:	8840      	ldrh	r0, [r0, #2]
 800a284:	9001      	str	r0, [sp, #4]
 800a286:	f1a3 0014 	sub.w	r0, r3, #20
 800a28a:	9000      	str	r0, [sp, #0]
 800a28c:	4422      	add	r2, r4
 800a28e:	4628      	mov	r0, r5
 800a290:	f002 fa26 	bl	800c6e0 <tcp_rst>
 800a294:	e7e0      	b.n	800a258 <tcp_listen_input+0x24>
    npcb = tcp_alloc(pcb->prio);
 800a296:	f895 0035 	ldrb.w	r0, [r5, #53]	; 0x35
 800a29a:	f7ff fa63 	bl	8009764 <tcp_alloc>
    if (npcb == NULL) {
 800a29e:	4604      	mov	r4, r0
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d073      	beq.n	800a38c <tcp_listen_input+0x158>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a2a4:	4b57      	ldr	r3, [pc, #348]	; (800a404 <tcp_listen_input+0x1d0>)
 800a2a6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800a2aa:	7402      	strb	r2, [r0, #16]
 800a2ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a2b0:	2b06      	cmp	r3, #6
 800a2b2:	d075      	beq.n	800a3a0 <tcp_listen_input+0x16c>
 800a2b4:	4b53      	ldr	r3, [pc, #332]	; (800a404 <tcp_listen_input+0x1d0>)
 800a2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b8:	6003      	str	r3, [r0, #0]
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	60c3      	str	r3, [r0, #12]
 800a2be:	6083      	str	r3, [r0, #8]
 800a2c0:	6043      	str	r3, [r0, #4]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a2c2:	4b50      	ldr	r3, [pc, #320]	; (800a404 <tcp_listen_input+0x1d0>)
 800a2c4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800a2c8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800a2cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a2d0:	2b06      	cmp	r3, #6
 800a2d2:	d06f      	beq.n	800a3b4 <tcp_listen_input+0x180>
 800a2d4:	4b4b      	ldr	r3, [pc, #300]	; (800a404 <tcp_listen_input+0x1d0>)
 800a2d6:	695b      	ldr	r3, [r3, #20]
 800a2d8:	6163      	str	r3, [r4, #20]
 800a2da:	2300      	movs	r3, #0
 800a2dc:	6223      	str	r3, [r4, #32]
 800a2de:	61e3      	str	r3, [r4, #28]
 800a2e0:	61a3      	str	r3, [r4, #24]
    npcb->local_port = pcb->local_port;
 800a2e2:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 800a2e4:	86e3      	strh	r3, [r4, #54]	; 0x36
    npcb->remote_port = tcphdr->src;
 800a2e6:	4e42      	ldr	r6, [pc, #264]	; (800a3f0 <tcp_listen_input+0x1bc>)
 800a2e8:	6833      	ldr	r3, [r6, #0]
 800a2ea:	881b      	ldrh	r3, [r3, #0]
 800a2ec:	8723      	strh	r3, [r4, #56]	; 0x38
    npcb->state = SYN_RCVD;
 800a2ee:	2303      	movs	r3, #3
 800a2f0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    npcb->rcv_nxt = seqno + 1;
 800a2f4:	4f41      	ldr	r7, [pc, #260]	; (800a3fc <tcp_listen_input+0x1c8>)
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	6463      	str	r3, [r4, #68]	; 0x44
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a2fc:	64e3      	str	r3, [r4, #76]	; 0x4c
    iss = tcp_next_iss(npcb);
 800a2fe:	4620      	mov	r0, r4
 800a300:	f7fe ff44 	bl	800918c <tcp_next_iss>
    npcb->snd_wl2 = iss;
 800a304:	67a0      	str	r0, [r4, #120]	; 0x78
    npcb->snd_nxt = iss;
 800a306:	6720      	str	r0, [r4, #112]	; 0x70
    npcb->lastack = iss;
 800a308:	6660      	str	r0, [r4, #100]	; 0x64
    npcb->snd_lbb = iss;
 800a30a:	67e0      	str	r0, [r4, #124]	; 0x7c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	3b01      	subs	r3, #1
 800a310:	6763      	str	r3, [r4, #116]	; 0x74
    npcb->callback_arg = pcb->callback_arg;
 800a312:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800a314:	6323      	str	r3, [r4, #48]	; 0x30
    npcb->listener = pcb;
 800a316:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a31a:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800a31e:	f003 030c 	and.w	r3, r3, #12
 800a322:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    npcb->netif_idx = pcb->netif_idx;
 800a326:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800a32a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    TCP_REG_ACTIVE(npcb);
 800a32e:	4b36      	ldr	r3, [pc, #216]	; (800a408 <tcp_listen_input+0x1d4>)
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	62e2      	str	r2, [r4, #44]	; 0x2c
 800a334:	601c      	str	r4, [r3, #0]
 800a336:	f002 fd45 	bl	800cdc4 <tcp_timer_needed>
 800a33a:	4b34      	ldr	r3, [pc, #208]	; (800a40c <tcp_listen_input+0x1d8>)
 800a33c:	2201      	movs	r2, #1
 800a33e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a340:	4620      	mov	r0, r4
 800a342:	f7ff fe97 	bl	800a074 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a346:	6833      	ldr	r3, [r6, #0]
 800a348:	89db      	ldrh	r3, [r3, #14]
 800a34a:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a34e:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a352:	f8b4 5052 	ldrh.w	r5, [r4, #82]	; 0x52
 800a356:	f114 0614 	adds.w	r6, r4, #20
 800a35a:	d003      	beq.n	800a364 <tcp_listen_input+0x130>
 800a35c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800a360:	2b06      	cmp	r3, #6
 800a362:	d031      	beq.n	800a3c8 <tcp_listen_input+0x194>
 800a364:	f104 0014 	add.w	r0, r4, #20
 800a368:	f005 fe52 	bl	8010010 <ip4_route>
 800a36c:	4601      	mov	r1, r0
 800a36e:	4632      	mov	r2, r6
 800a370:	4628      	mov	r0, r5
 800a372:	f7fe ff27 	bl	80091c4 <tcp_eff_send_mss_netif>
 800a376:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a37a:	2112      	movs	r1, #18
 800a37c:	4620      	mov	r0, r4
 800a37e:	f001 fff1 	bl	800c364 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800a382:	bb38      	cbnz	r0, 800a3d4 <tcp_listen_input+0x1a0>
    tcp_output(npcb);
 800a384:	4620      	mov	r0, r4
 800a386:	f002 fa31 	bl	800c7ec <tcp_output>
 800a38a:	e765      	b.n	800a258 <tcp_listen_input+0x24>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a38c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f43f af62 	beq.w	800a258 <tcp_listen_input+0x24>
 800a394:	f04f 32ff 	mov.w	r2, #4294967295
 800a398:	2100      	movs	r1, #0
 800a39a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800a39c:	4798      	blx	r3
 800a39e:	e75b      	b.n	800a258 <tcp_listen_input+0x24>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a3a0:	4b18      	ldr	r3, [pc, #96]	; (800a404 <tcp_listen_input+0x1d0>)
 800a3a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3a4:	6002      	str	r2, [r0, #0]
 800a3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a8:	6042      	str	r2, [r0, #4]
 800a3aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3ac:	6082      	str	r2, [r0, #8]
 800a3ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3b0:	60c3      	str	r3, [r0, #12]
 800a3b2:	e786      	b.n	800a2c2 <tcp_listen_input+0x8e>
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a3b4:	4b13      	ldr	r3, [pc, #76]	; (800a404 <tcp_listen_input+0x1d0>)
 800a3b6:	695a      	ldr	r2, [r3, #20]
 800a3b8:	6162      	str	r2, [r4, #20]
 800a3ba:	699a      	ldr	r2, [r3, #24]
 800a3bc:	61a2      	str	r2, [r4, #24]
 800a3be:	69da      	ldr	r2, [r3, #28]
 800a3c0:	61e2      	str	r2, [r4, #28]
 800a3c2:	6a1b      	ldr	r3, [r3, #32]
 800a3c4:	6223      	str	r3, [r4, #32]
 800a3c6:	e78c      	b.n	800a2e2 <tcp_listen_input+0xae>
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f006 fe2c 	bl	8011028 <ip6_route>
 800a3d0:	4601      	mov	r1, r0
 800a3d2:	e7cc      	b.n	800a36e <tcp_listen_input+0x13a>
      tcp_abandon(npcb, 0);
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	f7fe ffde 	bl	8009398 <tcp_abandon>
      return;
 800a3dc:	e73c      	b.n	800a258 <tcp_listen_input+0x24>
 800a3de:	4770      	bx	lr
 800a3e0:	20001734 	.word	0x20001734
 800a3e4:	08016f10 	.word	0x08016f10
 800a3e8:	08016ec8 	.word	0x08016ec8
 800a3ec:	08015608 	.word	0x08015608
 800a3f0:	20001760 	.word	0x20001760
 800a3f4:	20004bac 	.word	0x20004bac
 800a3f8:	2000176e 	.word	0x2000176e
 800a3fc:	20001758 	.word	0x20001758
 800a400:	20001730 	.word	0x20001730
 800a404:	20004b84 	.word	0x20004b84
 800a408:	20008c44 	.word	0x20008c44
 800a40c:	20008c40 	.word	0x20008c40

0800a410 <tcp_free_acked_segments>:
{
 800a410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a414:	4606      	mov	r6, r0
 800a416:	460c      	mov	r4, r1
 800a418:	461f      	mov	r7, r3
  while (seg_list != NULL &&
 800a41a:	e008      	b.n	800a42e <tcp_free_acked_segments+0x1e>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a41c:	4b26      	ldr	r3, [pc, #152]	; (800a4b8 <tcp_free_acked_segments+0xa8>)
 800a41e:	f240 4257 	movw	r2, #1111	; 0x457
 800a422:	4926      	ldr	r1, [pc, #152]	; (800a4bc <tcp_free_acked_segments+0xac>)
 800a424:	4826      	ldr	r0, [pc, #152]	; (800a4c0 <tcp_free_acked_segments+0xb0>)
 800a426:	f00a f8e5 	bl	80145f4 <iprintf>
 800a42a:	e021      	b.n	800a470 <tcp_free_acked_segments+0x60>
{
 800a42c:	462c      	mov	r4, r5
  while (seg_list != NULL &&
 800a42e:	2c00      	cmp	r4, #0
 800a430:	d03e      	beq.n	800a4b0 <tcp_free_acked_segments+0xa0>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a432:	6923      	ldr	r3, [r4, #16]
 800a434:	6858      	ldr	r0, [r3, #4]
 800a436:	f7fc fede 	bl	80071f6 <lwip_htonl>
 800a43a:	4605      	mov	r5, r0
 800a43c:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 800a440:	6923      	ldr	r3, [r4, #16]
 800a442:	8998      	ldrh	r0, [r3, #12]
 800a444:	f7fc fed2 	bl	80071ec <lwip_htons>
 800a448:	f010 0f03 	tst.w	r0, #3
 800a44c:	d02e      	beq.n	800a4ac <tcp_free_acked_segments+0x9c>
 800a44e:	2301      	movs	r3, #1
 800a450:	4443      	add	r3, r8
 800a452:	441d      	add	r5, r3
 800a454:	4b1b      	ldr	r3, [pc, #108]	; (800a4c4 <tcp_free_acked_segments+0xb4>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	1aed      	subs	r5, r5, r3
  while (seg_list != NULL &&
 800a45a:	2d00      	cmp	r5, #0
 800a45c:	dc28      	bgt.n	800a4b0 <tcp_free_acked_segments+0xa0>
    seg_list = seg_list->next;
 800a45e:	6825      	ldr	r5, [r4, #0]
    clen = pbuf_clen(next->p);
 800a460:	6860      	ldr	r0, [r4, #4]
 800a462:	f7fe fac5 	bl	80089f0 <pbuf_clen>
 800a466:	4680      	mov	r8, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a468:	f8b6 3086 	ldrh.w	r3, [r6, #134]	; 0x86
 800a46c:	4298      	cmp	r0, r3
 800a46e:	d8d5      	bhi.n	800a41c <tcp_free_acked_segments+0xc>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a470:	f8b6 0086 	ldrh.w	r0, [r6, #134]	; 0x86
 800a474:	eba0 0008 	sub.w	r0, r0, r8
 800a478:	f8a6 0086 	strh.w	r0, [r6, #134]	; 0x86
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a47c:	8923      	ldrh	r3, [r4, #8]
 800a47e:	4a12      	ldr	r2, [pc, #72]	; (800a4c8 <tcp_free_acked_segments+0xb8>)
 800a480:	8811      	ldrh	r1, [r2, #0]
 800a482:	440b      	add	r3, r1
 800a484:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 800a486:	4620      	mov	r0, r4
 800a488:	f7fe fe42 	bl	8009110 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800a48c:	f8b6 3086 	ldrh.w	r3, [r6, #134]	; 0x86
 800a490:	2b00      	cmp	r3, #0
 800a492:	d0cb      	beq.n	800a42c <tcp_free_acked_segments+0x1c>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a494:	2d00      	cmp	r5, #0
 800a496:	d1c9      	bne.n	800a42c <tcp_free_acked_segments+0x1c>
 800a498:	2f00      	cmp	r7, #0
 800a49a:	d1c7      	bne.n	800a42c <tcp_free_acked_segments+0x1c>
 800a49c:	4b06      	ldr	r3, [pc, #24]	; (800a4b8 <tcp_free_acked_segments+0xa8>)
 800a49e:	f240 4262 	movw	r2, #1122	; 0x462
 800a4a2:	490a      	ldr	r1, [pc, #40]	; (800a4cc <tcp_free_acked_segments+0xbc>)
 800a4a4:	4806      	ldr	r0, [pc, #24]	; (800a4c0 <tcp_free_acked_segments+0xb0>)
 800a4a6:	f00a f8a5 	bl	80145f4 <iprintf>
 800a4aa:	e7bf      	b.n	800a42c <tcp_free_acked_segments+0x1c>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	e7cf      	b.n	800a450 <tcp_free_acked_segments+0x40>
}
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4b6:	bf00      	nop
 800a4b8:	08016f10 	.word	0x08016f10
 800a4bc:	08016ce4 	.word	0x08016ce4
 800a4c0:	08015608 	.word	0x08015608
 800a4c4:	20001730 	.word	0x20001730
 800a4c8:	2000174c 	.word	0x2000174c
 800a4cc:	08016d0c 	.word	0x08016d0c

0800a4d0 <tcp_oos_insert_segment>:
{
 800a4d0:	b570      	push	{r4, r5, r6, lr}
 800a4d2:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a4d4:	4605      	mov	r5, r0
 800a4d6:	b160      	cbz	r0, 800a4f2 <tcp_oos_insert_segment+0x22>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a4d8:	692b      	ldr	r3, [r5, #16]
 800a4da:	8998      	ldrh	r0, [r3, #12]
 800a4dc:	f7fc fe86 	bl	80071ec <lwip_htons>
 800a4e0:	f010 0f01 	tst.w	r0, #1
 800a4e4:	d01a      	beq.n	800a51c <tcp_oos_insert_segment+0x4c>
    tcp_segs_free(next);
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f7fe fe1f 	bl	800912a <tcp_segs_free>
    next = NULL;
 800a4ec:	2400      	movs	r4, #0
  cseg->next = next;
 800a4ee:	602c      	str	r4, [r5, #0]
}
 800a4f0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a4f2:	4b1d      	ldr	r3, [pc, #116]	; (800a568 <tcp_oos_insert_segment+0x98>)
 800a4f4:	f240 421f 	movw	r2, #1055	; 0x41f
 800a4f8:	491c      	ldr	r1, [pc, #112]	; (800a56c <tcp_oos_insert_segment+0x9c>)
 800a4fa:	481d      	ldr	r0, [pc, #116]	; (800a570 <tcp_oos_insert_segment+0xa0>)
 800a4fc:	f00a f87a 	bl	80145f4 <iprintf>
 800a500:	e7ea      	b.n	800a4d8 <tcp_oos_insert_segment+0x8>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a502:	692b      	ldr	r3, [r5, #16]
 800a504:	899e      	ldrh	r6, [r3, #12]
 800a506:	2001      	movs	r0, #1
 800a508:	f7fc fe70 	bl	80071ec <lwip_htons>
 800a50c:	692b      	ldr	r3, [r5, #16]
 800a50e:	4330      	orrs	r0, r6
 800a510:	8198      	strh	r0, [r3, #12]
      next = next->next;
 800a512:	6826      	ldr	r6, [r4, #0]
      tcp_seg_free(old_seg);
 800a514:	4620      	mov	r0, r4
 800a516:	f7fe fdfb 	bl	8009110 <tcp_seg_free>
      next = next->next;
 800a51a:	4634      	mov	r4, r6
    while (next &&
 800a51c:	b18c      	cbz	r4, 800a542 <tcp_oos_insert_segment+0x72>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a51e:	892b      	ldrh	r3, [r5, #8]
 800a520:	4a14      	ldr	r2, [pc, #80]	; (800a574 <tcp_oos_insert_segment+0xa4>)
 800a522:	6812      	ldr	r2, [r2, #0]
 800a524:	4413      	add	r3, r2
 800a526:	6921      	ldr	r1, [r4, #16]
 800a528:	684a      	ldr	r2, [r1, #4]
 800a52a:	8920      	ldrh	r0, [r4, #8]
 800a52c:	4402      	add	r2, r0
 800a52e:	1a9b      	subs	r3, r3, r2
    while (next &&
 800a530:	2b00      	cmp	r3, #0
 800a532:	db06      	blt.n	800a542 <tcp_oos_insert_segment+0x72>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a534:	8988      	ldrh	r0, [r1, #12]
 800a536:	f7fc fe59 	bl	80071ec <lwip_htons>
 800a53a:	f010 0f01 	tst.w	r0, #1
 800a53e:	d0e8      	beq.n	800a512 <tcp_oos_insert_segment+0x42>
 800a540:	e7df      	b.n	800a502 <tcp_oos_insert_segment+0x32>
    if (next &&
 800a542:	2c00      	cmp	r4, #0
 800a544:	d0d3      	beq.n	800a4ee <tcp_oos_insert_segment+0x1e>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a546:	892b      	ldrh	r3, [r5, #8]
 800a548:	4a0a      	ldr	r2, [pc, #40]	; (800a574 <tcp_oos_insert_segment+0xa4>)
 800a54a:	6811      	ldr	r1, [r2, #0]
 800a54c:	440b      	add	r3, r1
 800a54e:	6922      	ldr	r2, [r4, #16]
 800a550:	6852      	ldr	r2, [r2, #4]
 800a552:	1a9b      	subs	r3, r3, r2
    if (next &&
 800a554:	2b00      	cmp	r3, #0
 800a556:	ddca      	ble.n	800a4ee <tcp_oos_insert_segment+0x1e>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a558:	1a52      	subs	r2, r2, r1
 800a55a:	b291      	uxth	r1, r2
 800a55c:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a55e:	6868      	ldr	r0, [r5, #4]
 800a560:	f7fe f9f2 	bl	8008948 <pbuf_realloc>
 800a564:	e7c3      	b.n	800a4ee <tcp_oos_insert_segment+0x1e>
 800a566:	bf00      	nop
 800a568:	08016f10 	.word	0x08016f10
 800a56c:	08016ee8 	.word	0x08016ee8
 800a570:	08015608 	.word	0x08015608
 800a574:	20001758 	.word	0x20001758

0800a578 <tcp_receive>:
{
 800a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a57a:	4604      	mov	r4, r0
 800a57c:	2800      	cmp	r0, #0
 800a57e:	d073      	beq.n	800a668 <tcp_receive+0xf0>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a580:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800a584:	2b03      	cmp	r3, #3
 800a586:	d977      	bls.n	800a678 <tcp_receive+0x100>
  if (flags & TCP_ACK) {
 800a588:	4bb4      	ldr	r3, [pc, #720]	; (800a85c <tcp_receive+0x2e4>)
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	f013 0f10 	tst.w	r3, #16
 800a590:	d03d      	beq.n	800a60e <tcp_receive+0x96>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a592:	f8b4 0080 	ldrh.w	r0, [r4, #128]	; 0x80
 800a596:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a598:	1886      	adds	r6, r0, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a59a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800a59c:	4bb0      	ldr	r3, [pc, #704]	; (800a860 <tcp_receive+0x2e8>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	1acd      	subs	r5, r1, r3
 800a5a2:	2d00      	cmp	r5, #0
 800a5a4:	db0a      	blt.n	800a5bc <tcp_receive+0x44>
 800a5a6:	4299      	cmp	r1, r3
 800a5a8:	d06e      	beq.n	800a688 <tcp_receive+0x110>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a5aa:	49ae      	ldr	r1, [pc, #696]	; (800a864 <tcp_receive+0x2ec>)
 800a5ac:	6809      	ldr	r1, [r1, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a5ae:	428a      	cmp	r2, r1
 800a5b0:	d114      	bne.n	800a5dc <tcp_receive+0x64>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a5b2:	4aad      	ldr	r2, [pc, #692]	; (800a868 <tcp_receive+0x2f0>)
 800a5b4:	6812      	ldr	r2, [r2, #0]
 800a5b6:	89d2      	ldrh	r2, [r2, #14]
 800a5b8:	4290      	cmp	r0, r2
 800a5ba:	d20f      	bcs.n	800a5dc <tcp_receive+0x64>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a5bc:	4aaa      	ldr	r2, [pc, #680]	; (800a868 <tcp_receive+0x2f0>)
 800a5be:	6812      	ldr	r2, [r2, #0]
 800a5c0:	89d2      	ldrh	r2, [r2, #14]
 800a5c2:	b290      	uxth	r0, r2
 800a5c4:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a5c8:	f8b4 1082 	ldrh.w	r1, [r4, #130]	; 0x82
 800a5cc:	4288      	cmp	r0, r1
 800a5ce:	d901      	bls.n	800a5d4 <tcp_receive+0x5c>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a5d0:	f8a4 2082 	strh.w	r2, [r4, #130]	; 0x82
      pcb->snd_wl1 = seqno;
 800a5d4:	6763      	str	r3, [r4, #116]	; 0x74
      pcb->snd_wl2 = ackno;
 800a5d6:	4ba3      	ldr	r3, [pc, #652]	; (800a864 <tcp_receive+0x2ec>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	67a3      	str	r3, [r4, #120]	; 0x78
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a5dc:	4ba1      	ldr	r3, [pc, #644]	; (800a864 <tcp_receive+0x2ec>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a5e2:	1a5a      	subs	r2, r3, r1
 800a5e4:	2a00      	cmp	r2, #0
 800a5e6:	dd55      	ble.n	800a694 <tcp_receive+0x11c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a5e8:	2a01      	cmp	r2, #1
 800a5ea:	d404      	bmi.n	800a5f6 <tcp_receive+0x7e>
 800a5ec:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800a5ee:	1a9a      	subs	r2, r3, r2
 800a5f0:	2a00      	cmp	r2, #0
 800a5f2:	f340 8082 	ble.w	800a6fa <tcp_receive+0x182>
      tcp_send_empty_ack(pcb);
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f002 f8ba 	bl	800c770 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a5fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a5fe:	b133      	cbz	r3, 800a60e <tcp_receive+0x96>
 800a600:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800a602:	4998      	ldr	r1, [pc, #608]	; (800a864 <tcp_receive+0x2ec>)
 800a604:	6809      	ldr	r1, [r1, #0]
 800a606:	1a52      	subs	r2, r2, r1
 800a608:	2a00      	cmp	r2, #0
 800a60a:	f2c0 8154 	blt.w	800a8b6 <tcp_receive+0x33e>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a60e:	4b97      	ldr	r3, [pc, #604]	; (800a86c <tcp_receive+0x2f4>)
 800a610:	881b      	ldrh	r3, [r3, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	f000 8475 	beq.w	800af02 <tcp_receive+0x98a>
 800a618:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800a61c:	2a06      	cmp	r2, #6
 800a61e:	f200 8470 	bhi.w	800af02 <tcp_receive+0x98a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a622:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a624:	4a8e      	ldr	r2, [pc, #568]	; (800a860 <tcp_receive+0x2e8>)
 800a626:	6812      	ldr	r2, [r2, #0]
 800a628:	1a8e      	subs	r6, r1, r2
 800a62a:	2e01      	cmp	r6, #1
 800a62c:	d405      	bmi.n	800a63a <tcp_receive+0xc2>
 800a62e:	4413      	add	r3, r2
 800a630:	1acb      	subs	r3, r1, r3
 800a632:	3301      	adds	r3, #1
 800a634:	2b00      	cmp	r3, #0
 800a636:	f340 8163 	ble.w	800a900 <tcp_receive+0x388>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a63a:	1a52      	subs	r2, r2, r1
 800a63c:	2a00      	cmp	r2, #0
 800a63e:	f2c0 81a1 	blt.w	800a984 <tcp_receive+0x40c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a642:	4b87      	ldr	r3, [pc, #540]	; (800a860 <tcp_receive+0x2e8>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a648:	1a5a      	subs	r2, r3, r1
 800a64a:	2a00      	cmp	r2, #0
 800a64c:	db07      	blt.n	800a65e <tcp_receive+0xe6>
 800a64e:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a652:	440a      	add	r2, r1
 800a654:	1a9a      	subs	r2, r3, r2
 800a656:	3201      	adds	r2, #1
 800a658:	2a00      	cmp	r2, #0
 800a65a:	f340 8198 	ble.w	800a98e <tcp_receive+0x416>
      tcp_send_empty_ack(pcb);
 800a65e:	4620      	mov	r0, r4
 800a660:	f002 f886 	bl	800c770 <tcp_send_empty_ack>
 800a664:	f000 bc5e 	b.w	800af24 <tcp_receive+0x9ac>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a668:	4b81      	ldr	r3, [pc, #516]	; (800a870 <tcp_receive+0x2f8>)
 800a66a:	f240 427b 	movw	r2, #1147	; 0x47b
 800a66e:	4981      	ldr	r1, [pc, #516]	; (800a874 <tcp_receive+0x2fc>)
 800a670:	4881      	ldr	r0, [pc, #516]	; (800a878 <tcp_receive+0x300>)
 800a672:	f009 ffbf 	bl	80145f4 <iprintf>
 800a676:	e783      	b.n	800a580 <tcp_receive+0x8>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a678:	4b7d      	ldr	r3, [pc, #500]	; (800a870 <tcp_receive+0x2f8>)
 800a67a:	f240 427c 	movw	r2, #1148	; 0x47c
 800a67e:	497f      	ldr	r1, [pc, #508]	; (800a87c <tcp_receive+0x304>)
 800a680:	487d      	ldr	r0, [pc, #500]	; (800a878 <tcp_receive+0x300>)
 800a682:	f009 ffb7 	bl	80145f4 <iprintf>
 800a686:	e77f      	b.n	800a588 <tcp_receive+0x10>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a688:	4976      	ldr	r1, [pc, #472]	; (800a864 <tcp_receive+0x2ec>)
 800a68a:	6809      	ldr	r1, [r1, #0]
 800a68c:	1a51      	subs	r1, r2, r1
 800a68e:	2900      	cmp	r1, #0
 800a690:	da8b      	bge.n	800a5aa <tcp_receive+0x32>
 800a692:	e793      	b.n	800a5bc <tcp_receive+0x44>
      if (tcplen == 0) {
 800a694:	4a75      	ldr	r2, [pc, #468]	; (800a86c <tcp_receive+0x2f4>)
 800a696:	8812      	ldrh	r2, [r2, #0]
 800a698:	b92a      	cbnz	r2, 800a6a6 <tcp_receive+0x12e>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a69a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a69c:	f8b4 0080 	ldrh.w	r0, [r4, #128]	; 0x80
 800a6a0:	4402      	add	r2, r0
 800a6a2:	42b2      	cmp	r2, r6
 800a6a4:	d003      	beq.n	800a6ae <tcp_receive+0x136>
        pcb->dupacks = 0;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
 800a6ac:	e7a6      	b.n	800a5fc <tcp_receive+0x84>
          if (pcb->rtime >= 0) {
 800a6ae:	f9b4 2050 	ldrsh.w	r2, [r4, #80]	; 0x50
 800a6b2:	2a00      	cmp	r2, #0
 800a6b4:	dbf7      	blt.n	800a6a6 <tcp_receive+0x12e>
            if (pcb->lastack == ackno) {
 800a6b6:	428b      	cmp	r3, r1
 800a6b8:	d1f5      	bne.n	800a6a6 <tcp_receive+0x12e>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a6ba:	f894 3063 	ldrb.w	r3, [r4, #99]	; 0x63
 800a6be:	2bff      	cmp	r3, #255	; 0xff
 800a6c0:	d002      	beq.n	800a6c8 <tcp_receive+0x150>
                ++pcb->dupacks;
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
              if (pcb->dupacks > 3) {
 800a6c8:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
 800a6cc:	2a03      	cmp	r2, #3
 800a6ce:	d909      	bls.n	800a6e4 <tcp_receive+0x16c>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a6d0:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68
 800a6d4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800a6d8:	440b      	add	r3, r1
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	4299      	cmp	r1, r3
 800a6de:	d807      	bhi.n	800a6f0 <tcp_receive+0x178>
 800a6e0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
              if (pcb->dupacks >= 3) {
 800a6e4:	2a02      	cmp	r2, #2
 800a6e6:	d989      	bls.n	800a5fc <tcp_receive+0x84>
                tcp_rexmit_fast(pcb);
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f001 ffb9 	bl	800c660 <tcp_rexmit_fast>
 800a6ee:	e785      	b.n	800a5fc <tcp_receive+0x84>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a6f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a6f4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 800a6f8:	e7f4      	b.n	800a6e4 <tcp_receive+0x16c>
      if (pcb->flags & TF_INFR) {
 800a6fa:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 800a6fc:	f012 0f04 	tst.w	r2, #4
 800a700:	d009      	beq.n	800a716 <tcp_receive+0x19e>
        tcp_clear_flags(pcb, TF_INFR);
 800a702:	f022 0204 	bic.w	r2, r2, #4
 800a706:	8762      	strh	r2, [r4, #58]	; 0x3a
        pcb->cwnd = pcb->ssthresh;
 800a708:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800a70c:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
        pcb->bytes_acked = 0;
 800a710:	2200      	movs	r2, #0
 800a712:	f8a4 208a 	strh.w	r2, [r4, #138]	; 0x8a
      pcb->nrtx = 0;
 800a716:	2000      	movs	r0, #0
 800a718:	f884 0062 	strb.w	r0, [r4, #98]	; 0x62
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a71c:	f9b4 505c 	ldrsh.w	r5, [r4, #92]	; 0x5c
 800a720:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 800a724:	eb02 02e5 	add.w	r2, r2, r5, asr #3
 800a728:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a72c:	b29a      	uxth	r2, r3
 800a72e:	b289      	uxth	r1, r1
 800a730:	1a51      	subs	r1, r2, r1
 800a732:	b289      	uxth	r1, r1
      pcb->dupacks = 0;
 800a734:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
      pcb->lastack = ackno;
 800a738:	6663      	str	r3, [r4, #100]	; 0x64
      if (pcb->state >= ESTABLISHED) {
 800a73a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800a73e:	2b03      	cmp	r3, #3
 800a740:	d918      	bls.n	800a774 <tcp_receive+0x1fc>
        if (pcb->cwnd < pcb->ssthresh) {
 800a742:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800a746:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d25c      	bcs.n	800a808 <tcp_receive+0x290>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a74e:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800a750:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a754:	d051      	beq.n	800a7fa <tcp_receive+0x282>
 800a756:	2301      	movs	r3, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a758:	f8b4 0052 	ldrh.w	r0, [r4, #82]	; 0x52
 800a75c:	fb13 f300 	smulbb	r3, r3, r0
 800a760:	b29b      	uxth	r3, r3
          TCP_WND_INC(pcb->cwnd, increase);
 800a762:	428b      	cmp	r3, r1
 800a764:	bf94      	ite	ls
 800a766:	18d1      	addls	r1, r2, r3
 800a768:	1851      	addhi	r1, r2, r1
 800a76a:	b289      	uxth	r1, r1
 800a76c:	428a      	cmp	r2, r1
 800a76e:	d846      	bhi.n	800a7fe <tcp_receive+0x286>
 800a770:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a774:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a778:	4a41      	ldr	r2, [pc, #260]	; (800a880 <tcp_receive+0x308>)
 800a77a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800a77e:	4620      	mov	r0, r4
 800a780:	f7ff fe46 	bl	800a410 <tcp_free_acked_segments>
 800a784:	4603      	mov	r3, r0
 800a786:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a78a:	4a3e      	ldr	r2, [pc, #248]	; (800a884 <tcp_receive+0x30c>)
 800a78c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800a790:	4620      	mov	r0, r4
 800a792:	f7ff fe3d 	bl	800a410 <tcp_free_acked_segments>
 800a796:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
      if (pcb->unacked == NULL) {
 800a79a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d054      	beq.n	800a84c <tcp_receive+0x2d4>
        pcb->rtime = 0;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
      pcb->polltmr = 0;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      if (pcb->unsent == NULL) {
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d051      	beq.n	800a856 <tcp_receive+0x2de>
      if (ip_current_is_v6()) {
 800a7b2:	4b35      	ldr	r3, [pc, #212]	; (800a888 <tcp_receive+0x310>)
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	b113      	cbz	r3, 800a7be <tcp_receive+0x246>
        nd6_reachability_hint(ip6_current_src_addr());
 800a7b8:	4834      	ldr	r0, [pc, #208]	; (800a88c <tcp_receive+0x314>)
 800a7ba:	f009 fcd3 	bl	8014164 <nd6_reachability_hint>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a7be:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 800a7c2:	4a33      	ldr	r2, [pc, #204]	; (800a890 <tcp_receive+0x318>)
 800a7c4:	8812      	ldrh	r2, [r2, #0]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
      if (pcb->flags & TF_RTO) {
 800a7cc:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800a7ce:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a7d2:	f43f af13 	beq.w	800a5fc <tcp_receive+0x84>
        if (pcb->unacked == NULL) {
 800a7d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d05a      	beq.n	800a894 <tcp_receive+0x31c>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a7de:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	6858      	ldr	r0, [r3, #4]
 800a7e4:	f7fc fd07 	bl	80071f6 <lwip_htonl>
 800a7e8:	1a28      	subs	r0, r5, r0
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	f73f af06 	bgt.w	800a5fc <tcp_receive+0x84>
          tcp_clear_flags(pcb, TF_RTO);
 800a7f0:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800a7f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7f6:	8763      	strh	r3, [r4, #58]	; 0x3a
 800a7f8:	e700      	b.n	800a5fc <tcp_receive+0x84>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	e7ac      	b.n	800a758 <tcp_receive+0x1e0>
          TCP_WND_INC(pcb->cwnd, increase);
 800a7fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a802:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 800a806:	e7b5      	b.n	800a774 <tcp_receive+0x1fc>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a808:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 800a80c:	4419      	add	r1, r3
 800a80e:	b289      	uxth	r1, r1
 800a810:	428b      	cmp	r3, r1
 800a812:	d811      	bhi.n	800a838 <tcp_receive+0x2c0>
 800a814:	f8a4 108a 	strh.w	r1, [r4, #138]	; 0x8a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a818:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d8a9      	bhi.n	800a774 <tcp_receive+0x1fc>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a820:	1a9b      	subs	r3, r3, r2
 800a822:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a826:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800a82a:	4413      	add	r3, r2
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	429a      	cmp	r2, r3
 800a830:	d807      	bhi.n	800a842 <tcp_receive+0x2ca>
 800a832:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 800a836:	e79d      	b.n	800a774 <tcp_receive+0x1fc>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a83c:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
 800a840:	e7ea      	b.n	800a818 <tcp_receive+0x2a0>
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a846:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 800a84a:	e793      	b.n	800a774 <tcp_receive+0x1fc>
        pcb->rtime = -1;
 800a84c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a850:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 800a854:	e7a8      	b.n	800a7a8 <tcp_receive+0x230>
        pcb->unsent_oversize = 0;
 800a856:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
 800a85a:	e7aa      	b.n	800a7b2 <tcp_receive+0x23a>
 800a85c:	20001734 	.word	0x20001734
 800a860:	20001758 	.word	0x20001758
 800a864:	20001730 	.word	0x20001730
 800a868:	20001760 	.word	0x20001760
 800a86c:	2000176e 	.word	0x2000176e
 800a870:	08016f10 	.word	0x08016f10
 800a874:	08016fe8 	.word	0x08016fe8
 800a878:	08015608 	.word	0x08015608
 800a87c:	08017004 	.word	0x08017004
 800a880:	08017020 	.word	0x08017020
 800a884:	08017028 	.word	0x08017028
 800a888:	20004b84 	.word	0x20004b84
 800a88c:	20004b98 	.word	0x20004b98
 800a890:	2000174c 	.word	0x2000174c
          if ((pcb->unsent == NULL) ||
 800a894:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a898:	b143      	cbz	r3, 800a8ac <tcp_receive+0x334>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a89a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	6858      	ldr	r0, [r3, #4]
 800a8a0:	f7fc fca9 	bl	80071f6 <lwip_htonl>
 800a8a4:	1a28      	subs	r0, r5, r0
          if ((pcb->unsent == NULL) ||
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	f73f aea8 	bgt.w	800a5fc <tcp_receive+0x84>
            tcp_clear_flags(pcb, TF_RTO);
 800a8ac:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800a8ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a8b2:	8763      	strh	r3, [r4, #58]	; 0x3a
 800a8b4:	e6a2      	b.n	800a5fc <tcp_receive+0x84>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a8b6:	4aa9      	ldr	r2, [pc, #676]	; (800ab5c <tcp_receive+0x5e4>)
 800a8b8:	6812      	ldr	r2, [r2, #0]
 800a8ba:	1ad2      	subs	r2, r2, r3
 800a8bc:	b292      	uxth	r2, r2
      m = (s16_t)(m - (pcb->sa >> 3));
 800a8be:	f9b4 105c 	ldrsh.w	r1, [r4, #92]	; 0x5c
 800a8c2:	eba2 02e1 	sub.w	r2, r2, r1, asr #3
 800a8c6:	b292      	uxth	r2, r2
 800a8c8:	b213      	sxth	r3, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 800a8ca:	fa12 f181 	uxtah	r1, r2, r1
 800a8ce:	b209      	sxth	r1, r1
 800a8d0:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
      if (m < 0) {
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	db10      	blt.n	800a8fa <tcp_receive+0x382>
      m = (s16_t)(m - (pcb->sv >> 2));
 800a8d8:	f9b4 205e 	ldrsh.w	r2, [r4, #94]	; 0x5e
 800a8dc:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
      pcb->sv = (s16_t)(pcb->sv + m);
 800a8e0:	b292      	uxth	r2, r2
 800a8e2:	fa12 f383 	uxtah	r3, r2, r3
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a8ec:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800a8f0:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
      pcb->rttest = 0;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	6563      	str	r3, [r4, #84]	; 0x54
 800a8f8:	e689      	b.n	800a60e <tcp_receive+0x96>
        m = (s16_t) - m;
 800a8fa:	4252      	negs	r2, r2
 800a8fc:	b213      	sxth	r3, r2
 800a8fe:	e7eb      	b.n	800a8d8 <tcp_receive+0x360>
      struct pbuf *p = inseg.p;
 800a900:	4b97      	ldr	r3, [pc, #604]	; (800ab60 <tcp_receive+0x5e8>)
 800a902:	685d      	ldr	r5, [r3, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a904:	b195      	cbz	r5, 800a92c <tcp_receive+0x3b4>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a906:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800a90a:	429e      	cmp	r6, r3
 800a90c:	d816      	bhi.n	800a93c <tcp_receive+0x3c4>
      off = (u16_t)off32;
 800a90e:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a910:	4b93      	ldr	r3, [pc, #588]	; (800ab60 <tcp_receive+0x5e8>)
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	891b      	ldrh	r3, [r3, #8]
 800a916:	42b3      	cmp	r3, r6
 800a918:	d318      	bcc.n	800a94c <tcp_receive+0x3d4>
      inseg.len -= off;
 800a91a:	4b91      	ldr	r3, [pc, #580]	; (800ab60 <tcp_receive+0x5e8>)
 800a91c:	891a      	ldrh	r2, [r3, #8]
 800a91e:	1b92      	subs	r2, r2, r6
 800a920:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	891a      	ldrh	r2, [r3, #8]
 800a926:	1b92      	subs	r2, r2, r6
 800a928:	b292      	uxth	r2, r2
      while (p->len < off) {
 800a92a:	e01d      	b.n	800a968 <tcp_receive+0x3f0>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a92c:	4b8d      	ldr	r3, [pc, #564]	; (800ab64 <tcp_receive+0x5ec>)
 800a92e:	f240 5294 	movw	r2, #1428	; 0x594
 800a932:	498d      	ldr	r1, [pc, #564]	; (800ab68 <tcp_receive+0x5f0>)
 800a934:	488d      	ldr	r0, [pc, #564]	; (800ab6c <tcp_receive+0x5f4>)
 800a936:	f009 fe5d 	bl	80145f4 <iprintf>
 800a93a:	e7e4      	b.n	800a906 <tcp_receive+0x38e>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a93c:	4b89      	ldr	r3, [pc, #548]	; (800ab64 <tcp_receive+0x5ec>)
 800a93e:	f240 5295 	movw	r2, #1429	; 0x595
 800a942:	498b      	ldr	r1, [pc, #556]	; (800ab70 <tcp_receive+0x5f8>)
 800a944:	4889      	ldr	r0, [pc, #548]	; (800ab6c <tcp_receive+0x5f4>)
 800a946:	f009 fe55 	bl	80145f4 <iprintf>
 800a94a:	e7e0      	b.n	800a90e <tcp_receive+0x396>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a94c:	4b85      	ldr	r3, [pc, #532]	; (800ab64 <tcp_receive+0x5ec>)
 800a94e:	f240 5297 	movw	r2, #1431	; 0x597
 800a952:	4988      	ldr	r1, [pc, #544]	; (800ab74 <tcp_receive+0x5fc>)
 800a954:	4885      	ldr	r0, [pc, #532]	; (800ab6c <tcp_receive+0x5f4>)
 800a956:	f009 fe4d 	bl	80145f4 <iprintf>
 800a95a:	e7de      	b.n	800a91a <tcp_receive+0x3a2>
        off -= p->len;
 800a95c:	1af3      	subs	r3, r6, r3
 800a95e:	b29e      	uxth	r6, r3
        p->tot_len = new_tot_len;
 800a960:	812a      	strh	r2, [r5, #8]
        p->len = 0;
 800a962:	2300      	movs	r3, #0
 800a964:	816b      	strh	r3, [r5, #10]
        p = p->next;
 800a966:	682d      	ldr	r5, [r5, #0]
      while (p->len < off) {
 800a968:	896b      	ldrh	r3, [r5, #10]
 800a96a:	42b3      	cmp	r3, r6
 800a96c:	d3f6      	bcc.n	800a95c <tcp_receive+0x3e4>
      pbuf_remove_header(p, off);
 800a96e:	4631      	mov	r1, r6
 800a970:	4628      	mov	r0, r5
 800a972:	f7fd fe93 	bl	800869c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a976:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a978:	4a7f      	ldr	r2, [pc, #508]	; (800ab78 <tcp_receive+0x600>)
 800a97a:	6013      	str	r3, [r2, #0]
 800a97c:	4a78      	ldr	r2, [pc, #480]	; (800ab60 <tcp_receive+0x5e8>)
 800a97e:	6912      	ldr	r2, [r2, #16]
 800a980:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a982:	e65e      	b.n	800a642 <tcp_receive+0xca>
        tcp_ack_now(pcb);
 800a984:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800a986:	f043 0302 	orr.w	r3, r3, #2
 800a98a:	8763      	strh	r3, [r4, #58]	; 0x3a
 800a98c:	e659      	b.n	800a642 <tcp_receive+0xca>
      if (pcb->rcv_nxt == seqno) {
 800a98e:	428b      	cmp	r3, r1
 800a990:	d006      	beq.n	800a9a0 <tcp_receive+0x428>
        if (pcb->ooseq == NULL) {
 800a992:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 800a996:	2d00      	cmp	r5, #0
 800a998:	f000 81c3 	beq.w	800ad22 <tcp_receive+0x7aa>
          struct tcp_seg *next, *prev = NULL;
 800a99c:	2600      	movs	r6, #0
 800a99e:	e1e6      	b.n	800ad6e <tcp_receive+0x7f6>
        tcplen = TCP_TCPLEN(&inseg);
 800a9a0:	4b6f      	ldr	r3, [pc, #444]	; (800ab60 <tcp_receive+0x5e8>)
 800a9a2:	891d      	ldrh	r5, [r3, #8]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	8998      	ldrh	r0, [r3, #12]
 800a9a8:	f7fc fc20 	bl	80071ec <lwip_htons>
 800a9ac:	f010 0f03 	tst.w	r0, #3
 800a9b0:	d017      	beq.n	800a9e2 <tcp_receive+0x46a>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	442b      	add	r3, r5
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	4a70      	ldr	r2, [pc, #448]	; (800ab7c <tcp_receive+0x604>)
 800a9ba:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 800a9bc:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d810      	bhi.n	800a9e6 <tcp_receive+0x46e>
        if (pcb->ooseq != NULL) {
 800a9c4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d062      	beq.n	800aa92 <tcp_receive+0x51a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a9cc:	4b64      	ldr	r3, [pc, #400]	; (800ab60 <tcp_receive+0x5e8>)
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	8998      	ldrh	r0, [r3, #12]
 800a9d2:	f7fc fc0b 	bl	80071ec <lwip_htons>
 800a9d6:	f010 0f01 	tst.w	r0, #1
 800a9da:	d156      	bne.n	800aa8a <tcp_receive+0x512>
            struct tcp_seg *next = pcb->ooseq;
 800a9dc:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
            while (next &&
 800a9e0:	e08d      	b.n	800aafe <tcp_receive+0x586>
        tcplen = TCP_TCPLEN(&inseg);
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	e7e6      	b.n	800a9b4 <tcp_receive+0x43c>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a9e6:	4b5e      	ldr	r3, [pc, #376]	; (800ab60 <tcp_receive+0x5e8>)
 800a9e8:	691b      	ldr	r3, [r3, #16]
 800a9ea:	8998      	ldrh	r0, [r3, #12]
 800a9ec:	f7fc fbfe 	bl	80071ec <lwip_htons>
 800a9f0:	f010 0f01 	tst.w	r0, #1
 800a9f4:	d131      	bne.n	800aa5a <tcp_receive+0x4e2>
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a9f6:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a9fa:	4b59      	ldr	r3, [pc, #356]	; (800ab60 <tcp_receive+0x5e8>)
 800a9fc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	8998      	ldrh	r0, [r3, #12]
 800aa02:	f7fc fbf3 	bl	80071ec <lwip_htons>
 800aa06:	f010 0f02 	tst.w	r0, #2
 800aa0a:	d003      	beq.n	800aa14 <tcp_receive+0x49c>
            inseg.len -= 1;
 800aa0c:	4a54      	ldr	r2, [pc, #336]	; (800ab60 <tcp_receive+0x5e8>)
 800aa0e:	8913      	ldrh	r3, [r2, #8]
 800aa10:	3b01      	subs	r3, #1
 800aa12:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800aa14:	4d52      	ldr	r5, [pc, #328]	; (800ab60 <tcp_receive+0x5e8>)
 800aa16:	8929      	ldrh	r1, [r5, #8]
 800aa18:	6868      	ldr	r0, [r5, #4]
 800aa1a:	f7fd ff95 	bl	8008948 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800aa1e:	892e      	ldrh	r6, [r5, #8]
 800aa20:	692b      	ldr	r3, [r5, #16]
 800aa22:	8998      	ldrh	r0, [r3, #12]
 800aa24:	f7fc fbe2 	bl	80071ec <lwip_htons>
 800aa28:	f010 0f03 	tst.w	r0, #3
 800aa2c:	d026      	beq.n	800aa7c <tcp_receive+0x504>
 800aa2e:	2301      	movs	r3, #1
 800aa30:	4433      	add	r3, r6
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	4a51      	ldr	r2, [pc, #324]	; (800ab7c <tcp_receive+0x604>)
 800aa36:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800aa38:	4a4f      	ldr	r2, [pc, #316]	; (800ab78 <tcp_receive+0x600>)
 800aa3a:	6812      	ldr	r2, [r2, #0]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800aa40:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
 800aa44:	440a      	add	r2, r1
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d0bc      	beq.n	800a9c4 <tcp_receive+0x44c>
 800aa4a:	4b46      	ldr	r3, [pc, #280]	; (800ab64 <tcp_receive+0x5ec>)
 800aa4c:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800aa50:	494b      	ldr	r1, [pc, #300]	; (800ab80 <tcp_receive+0x608>)
 800aa52:	4846      	ldr	r0, [pc, #280]	; (800ab6c <tcp_receive+0x5f4>)
 800aa54:	f009 fdce 	bl	80145f4 <iprintf>
 800aa58:	e7b4      	b.n	800a9c4 <tcp_receive+0x44c>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800aa5a:	4e41      	ldr	r6, [pc, #260]	; (800ab60 <tcp_receive+0x5e8>)
 800aa5c:	6933      	ldr	r3, [r6, #16]
 800aa5e:	8998      	ldrh	r0, [r3, #12]
 800aa60:	b205      	sxth	r5, r0
 800aa62:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800aa66:	f7fc fbc1 	bl	80071ec <lwip_htons>
 800aa6a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800aa6e:	f7fc fbbd 	bl	80071ec <lwip_htons>
 800aa72:	b200      	sxth	r0, r0
 800aa74:	6933      	ldr	r3, [r6, #16]
 800aa76:	4305      	orrs	r5, r0
 800aa78:	819d      	strh	r5, [r3, #12]
 800aa7a:	e7bc      	b.n	800a9f6 <tcp_receive+0x47e>
          tcplen = TCP_TCPLEN(&inseg);
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	e7d7      	b.n	800aa30 <tcp_receive+0x4b8>
              pcb->ooseq = pcb->ooseq->next;
 800aa80:	6803      	ldr	r3, [r0, #0]
 800aa82:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
              tcp_seg_free(old_ooseq);
 800aa86:	f7fe fb43 	bl	8009110 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800aa8a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	d1f6      	bne.n	800aa80 <tcp_receive+0x508>
        pcb->rcv_nxt = seqno + tcplen;
 800aa92:	4b3a      	ldr	r3, [pc, #232]	; (800ab7c <tcp_receive+0x604>)
 800aa94:	881a      	ldrh	r2, [r3, #0]
 800aa96:	4b38      	ldr	r3, [pc, #224]	; (800ab78 <tcp_receive+0x600>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	6463      	str	r3, [r4, #68]	; 0x44
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800aa9e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	f200 80b1 	bhi.w	800ac0a <tcp_receive+0x692>
        pcb->rcv_wnd -= tcplen;
 800aaa8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800aaac:	4a33      	ldr	r2, [pc, #204]	; (800ab7c <tcp_receive+0x604>)
 800aaae:	8812      	ldrh	r2, [r2, #0]
 800aab0:	1a9b      	subs	r3, r3, r2
 800aab2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        tcp_update_rcv_ann_wnd(pcb);
 800aab6:	4620      	mov	r0, r4
 800aab8:	f7fe faac 	bl	8009014 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800aabc:	4b28      	ldr	r3, [pc, #160]	; (800ab60 <tcp_receive+0x5e8>)
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	891a      	ldrh	r2, [r3, #8]
 800aac2:	b122      	cbz	r2, 800aace <tcp_receive+0x556>
          recv_data = inseg.p;
 800aac4:	4a2f      	ldr	r2, [pc, #188]	; (800ab84 <tcp_receive+0x60c>)
 800aac6:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800aac8:	4b25      	ldr	r3, [pc, #148]	; (800ab60 <tcp_receive+0x5e8>)
 800aaca:	2200      	movs	r2, #0
 800aacc:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aace:	4b24      	ldr	r3, [pc, #144]	; (800ab60 <tcp_receive+0x5e8>)
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	8998      	ldrh	r0, [r3, #12]
 800aad4:	f7fc fb8a 	bl	80071ec <lwip_htons>
 800aad8:	f010 0f01 	tst.w	r0, #1
 800aadc:	f000 80c5 	beq.w	800ac6a <tcp_receive+0x6f2>
          recv_flags |= TF_GOT_FIN;
 800aae0:	4a29      	ldr	r2, [pc, #164]	; (800ab88 <tcp_receive+0x610>)
 800aae2:	7813      	ldrb	r3, [r2, #0]
 800aae4:	f043 0320 	orr.w	r3, r3, #32
 800aae8:	7013      	strb	r3, [r2, #0]
 800aaea:	e0be      	b.n	800ac6a <tcp_receive+0x6f2>
                tcplen = TCP_TCPLEN(&inseg);
 800aaec:	2300      	movs	r3, #0
 800aaee:	443b      	add	r3, r7
 800aaf0:	4a22      	ldr	r2, [pc, #136]	; (800ab7c <tcp_receive+0x604>)
 800aaf2:	8013      	strh	r3, [r2, #0]
              next = next->next;
 800aaf4:	682e      	ldr	r6, [r5, #0]
              tcp_seg_free(tmp);
 800aaf6:	4628      	mov	r0, r5
 800aaf8:	f7fe fb0a 	bl	8009110 <tcp_seg_free>
              next = next->next;
 800aafc:	4635      	mov	r5, r6
            while (next &&
 800aafe:	2d00      	cmp	r5, #0
 800ab00:	d044      	beq.n	800ab8c <tcp_receive+0x614>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ab02:	4b1e      	ldr	r3, [pc, #120]	; (800ab7c <tcp_receive+0x604>)
 800ab04:	881b      	ldrh	r3, [r3, #0]
 800ab06:	4a1c      	ldr	r2, [pc, #112]	; (800ab78 <tcp_receive+0x600>)
 800ab08:	6812      	ldr	r2, [r2, #0]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	6929      	ldr	r1, [r5, #16]
 800ab0e:	684a      	ldr	r2, [r1, #4]
 800ab10:	8928      	ldrh	r0, [r5, #8]
 800ab12:	4402      	add	r2, r0
 800ab14:	1a9b      	subs	r3, r3, r2
            while (next &&
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	db38      	blt.n	800ab8c <tcp_receive+0x614>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ab1a:	8988      	ldrh	r0, [r1, #12]
 800ab1c:	f7fc fb66 	bl	80071ec <lwip_htons>
 800ab20:	f010 0f01 	tst.w	r0, #1
 800ab24:	d0e6      	beq.n	800aaf4 <tcp_receive+0x57c>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ab26:	4b0e      	ldr	r3, [pc, #56]	; (800ab60 <tcp_receive+0x5e8>)
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	8998      	ldrh	r0, [r3, #12]
 800ab2c:	f7fc fb5e 	bl	80071ec <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ab30:	f010 0f02 	tst.w	r0, #2
 800ab34:	d1de      	bne.n	800aaf4 <tcp_receive+0x57c>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ab36:	4e0a      	ldr	r6, [pc, #40]	; (800ab60 <tcp_receive+0x5e8>)
 800ab38:	6933      	ldr	r3, [r6, #16]
 800ab3a:	899f      	ldrh	r7, [r3, #12]
 800ab3c:	2001      	movs	r0, #1
 800ab3e:	f7fc fb55 	bl	80071ec <lwip_htons>
 800ab42:	6933      	ldr	r3, [r6, #16]
 800ab44:	4338      	orrs	r0, r7
 800ab46:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ab48:	8937      	ldrh	r7, [r6, #8]
 800ab4a:	6933      	ldr	r3, [r6, #16]
 800ab4c:	8998      	ldrh	r0, [r3, #12]
 800ab4e:	f7fc fb4d 	bl	80071ec <lwip_htons>
 800ab52:	f010 0f03 	tst.w	r0, #3
 800ab56:	d0c9      	beq.n	800aaec <tcp_receive+0x574>
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e7c8      	b.n	800aaee <tcp_receive+0x576>
 800ab5c:	20008c48 	.word	0x20008c48
 800ab60:	20001738 	.word	0x20001738
 800ab64:	08016f10 	.word	0x08016f10
 800ab68:	08017030 	.word	0x08017030
 800ab6c:	08015608 	.word	0x08015608
 800ab70:	08017040 	.word	0x08017040
 800ab74:	08017050 	.word	0x08017050
 800ab78:	20001758 	.word	0x20001758
 800ab7c:	2000176e 	.word	0x2000176e
 800ab80:	08017060 	.word	0x08017060
 800ab84:	20001750 	.word	0x20001750
 800ab88:	20001754 	.word	0x20001754
            if (next &&
 800ab8c:	b14d      	cbz	r5, 800aba2 <tcp_receive+0x62a>
                TCP_SEQ_GT(seqno + tcplen,
 800ab8e:	4b96      	ldr	r3, [pc, #600]	; (800ade8 <tcp_receive+0x870>)
 800ab90:	6819      	ldr	r1, [r3, #0]
 800ab92:	4b96      	ldr	r3, [pc, #600]	; (800adec <tcp_receive+0x874>)
 800ab94:	881b      	ldrh	r3, [r3, #0]
 800ab96:	440b      	add	r3, r1
 800ab98:	692a      	ldr	r2, [r5, #16]
 800ab9a:	6852      	ldr	r2, [r2, #4]
 800ab9c:	1a9b      	subs	r3, r3, r2
            if (next &&
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	dc02      	bgt.n	800aba8 <tcp_receive+0x630>
            pcb->ooseq = next;
 800aba2:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
 800aba6:	e774      	b.n	800aa92 <tcp_receive+0x51a>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800aba8:	1a52      	subs	r2, r2, r1
 800abaa:	4b91      	ldr	r3, [pc, #580]	; (800adf0 <tcp_receive+0x878>)
 800abac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800abae:	691b      	ldr	r3, [r3, #16]
 800abb0:	8998      	ldrh	r0, [r3, #12]
 800abb2:	f7fc fb1b 	bl	80071ec <lwip_htons>
 800abb6:	f010 0f02 	tst.w	r0, #2
 800abba:	d003      	beq.n	800abc4 <tcp_receive+0x64c>
                inseg.len -= 1;
 800abbc:	4a8c      	ldr	r2, [pc, #560]	; (800adf0 <tcp_receive+0x878>)
 800abbe:	8913      	ldrh	r3, [r2, #8]
 800abc0:	3b01      	subs	r3, #1
 800abc2:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800abc4:	4e8a      	ldr	r6, [pc, #552]	; (800adf0 <tcp_receive+0x878>)
 800abc6:	8931      	ldrh	r1, [r6, #8]
 800abc8:	6870      	ldr	r0, [r6, #4]
 800abca:	f7fd febd 	bl	8008948 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800abce:	8937      	ldrh	r7, [r6, #8]
 800abd0:	6933      	ldr	r3, [r6, #16]
 800abd2:	8998      	ldrh	r0, [r3, #12]
 800abd4:	f7fc fb0a 	bl	80071ec <lwip_htons>
 800abd8:	f010 0f03 	tst.w	r0, #3
 800abdc:	d013      	beq.n	800ac06 <tcp_receive+0x68e>
 800abde:	2301      	movs	r3, #1
 800abe0:	443b      	add	r3, r7
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	4a81      	ldr	r2, [pc, #516]	; (800adec <tcp_receive+0x874>)
 800abe6:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800abe8:	4a7f      	ldr	r2, [pc, #508]	; (800ade8 <tcp_receive+0x870>)
 800abea:	6812      	ldr	r2, [r2, #0]
 800abec:	4413      	add	r3, r2
 800abee:	692a      	ldr	r2, [r5, #16]
 800abf0:	6852      	ldr	r2, [r2, #4]
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d0d5      	beq.n	800aba2 <tcp_receive+0x62a>
 800abf6:	4b7f      	ldr	r3, [pc, #508]	; (800adf4 <tcp_receive+0x87c>)
 800abf8:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800abfc:	497e      	ldr	r1, [pc, #504]	; (800adf8 <tcp_receive+0x880>)
 800abfe:	487f      	ldr	r0, [pc, #508]	; (800adfc <tcp_receive+0x884>)
 800ac00:	f009 fcf8 	bl	80145f4 <iprintf>
 800ac04:	e7cd      	b.n	800aba2 <tcp_receive+0x62a>
              tcplen = TCP_TCPLEN(&inseg);
 800ac06:	2300      	movs	r3, #0
 800ac08:	e7ea      	b.n	800abe0 <tcp_receive+0x668>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ac0a:	4b7a      	ldr	r3, [pc, #488]	; (800adf4 <tcp_receive+0x87c>)
 800ac0c:	f240 6207 	movw	r2, #1543	; 0x607
 800ac10:	497b      	ldr	r1, [pc, #492]	; (800ae00 <tcp_receive+0x888>)
 800ac12:	487a      	ldr	r0, [pc, #488]	; (800adfc <tcp_receive+0x884>)
 800ac14:	f009 fcee 	bl	80145f4 <iprintf>
 800ac18:	e746      	b.n	800aaa8 <tcp_receive+0x530>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	e038      	b.n	800ac90 <tcp_receive+0x718>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ac1e:	2300      	movs	r3, #0
 800ac20:	e045      	b.n	800acae <tcp_receive+0x736>
 800ac22:	4b74      	ldr	r3, [pc, #464]	; (800adf4 <tcp_receive+0x87c>)
 800ac24:	f240 622c 	movw	r2, #1580	; 0x62c
 800ac28:	4976      	ldr	r1, [pc, #472]	; (800ae04 <tcp_receive+0x88c>)
 800ac2a:	4874      	ldr	r0, [pc, #464]	; (800adfc <tcp_receive+0x884>)
 800ac2c:	f009 fce2 	bl	80145f4 <iprintf>
 800ac30:	e040      	b.n	800acb4 <tcp_receive+0x73c>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ac32:	2300      	movs	r3, #0
 800ac34:	e047      	b.n	800acc6 <tcp_receive+0x74e>
              recv_data = cseg->p;
 800ac36:	4b74      	ldr	r3, [pc, #464]	; (800ae08 <tcp_receive+0x890>)
 800ac38:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ac3e:	692b      	ldr	r3, [r5, #16]
 800ac40:	8998      	ldrh	r0, [r3, #12]
 800ac42:	f7fc fad3 	bl	80071ec <lwip_htons>
 800ac46:	f010 0f01 	tst.w	r0, #1
 800ac4a:	d008      	beq.n	800ac5e <tcp_receive+0x6e6>
            recv_flags |= TF_GOT_FIN;
 800ac4c:	4a6f      	ldr	r2, [pc, #444]	; (800ae0c <tcp_receive+0x894>)
 800ac4e:	7813      	ldrb	r3, [r2, #0]
 800ac50:	f043 0320 	orr.w	r3, r3, #32
 800ac54:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ac56:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800ac5a:	2b04      	cmp	r3, #4
 800ac5c:	d047      	beq.n	800acee <tcp_receive+0x776>
          pcb->ooseq = cseg->next;
 800ac5e:	682b      	ldr	r3, [r5, #0]
 800ac60:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
          tcp_seg_free(cseg);
 800ac64:	4628      	mov	r0, r5
 800ac66:	f7fe fa53 	bl	8009110 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ac6a:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 800ac6e:	2d00      	cmp	r5, #0
 800ac70:	d041      	beq.n	800acf6 <tcp_receive+0x77e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ac72:	692a      	ldr	r2, [r5, #16]
 800ac74:	6853      	ldr	r3, [r2, #4]
 800ac76:	6c61      	ldr	r1, [r4, #68]	; 0x44
        while (pcb->ooseq != NULL &&
 800ac78:	428b      	cmp	r3, r1
 800ac7a:	d13c      	bne.n	800acf6 <tcp_receive+0x77e>
          seqno = pcb->ooseq->tcphdr->seqno;
 800ac7c:	495a      	ldr	r1, [pc, #360]	; (800ade8 <tcp_receive+0x870>)
 800ac7e:	600b      	str	r3, [r1, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ac80:	892e      	ldrh	r6, [r5, #8]
 800ac82:	8990      	ldrh	r0, [r2, #12]
 800ac84:	f7fc fab2 	bl	80071ec <lwip_htons>
 800ac88:	f010 0f03 	tst.w	r0, #3
 800ac8c:	d0c5      	beq.n	800ac1a <tcp_receive+0x6a2>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	199a      	adds	r2, r3, r6
 800ac92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ac94:	4413      	add	r3, r2
 800ac96:	6463      	str	r3, [r4, #68]	; 0x44
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ac98:	f8b4 6048 	ldrh.w	r6, [r4, #72]	; 0x48
 800ac9c:	892f      	ldrh	r7, [r5, #8]
 800ac9e:	692b      	ldr	r3, [r5, #16]
 800aca0:	8998      	ldrh	r0, [r3, #12]
 800aca2:	f7fc faa3 	bl	80071ec <lwip_htons>
 800aca6:	f010 0f03 	tst.w	r0, #3
 800acaa:	d0b8      	beq.n	800ac1e <tcp_receive+0x6a6>
 800acac:	2301      	movs	r3, #1
 800acae:	443b      	add	r3, r7
 800acb0:	429e      	cmp	r6, r3
 800acb2:	d3b6      	bcc.n	800ac22 <tcp_receive+0x6aa>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800acb4:	892e      	ldrh	r6, [r5, #8]
 800acb6:	692b      	ldr	r3, [r5, #16]
 800acb8:	8998      	ldrh	r0, [r3, #12]
 800acba:	f7fc fa97 	bl	80071ec <lwip_htons>
 800acbe:	f010 0f03 	tst.w	r0, #3
 800acc2:	d0b6      	beq.n	800ac32 <tcp_receive+0x6ba>
 800acc4:	2301      	movs	r3, #1
 800acc6:	199a      	adds	r2, r3, r6
 800acc8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800accc:	1a9b      	subs	r3, r3, r2
 800acce:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          tcp_update_rcv_ann_wnd(pcb);
 800acd2:	4620      	mov	r0, r4
 800acd4:	f7fe f99e 	bl	8009014 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800acd8:	6869      	ldr	r1, [r5, #4]
 800acda:	890b      	ldrh	r3, [r1, #8]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d0ae      	beq.n	800ac3e <tcp_receive+0x6c6>
            if (recv_data) {
 800ace0:	4b49      	ldr	r3, [pc, #292]	; (800ae08 <tcp_receive+0x890>)
 800ace2:	6818      	ldr	r0, [r3, #0]
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d0a6      	beq.n	800ac36 <tcp_receive+0x6be>
              pbuf_cat(recv_data, cseg->p);
 800ace8:	f7fd fea4 	bl	8008a34 <pbuf_cat>
 800acec:	e7a5      	b.n	800ac3a <tcp_receive+0x6c2>
              pcb->state = CLOSE_WAIT;
 800acee:	2307      	movs	r3, #7
 800acf0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800acf4:	e7b3      	b.n	800ac5e <tcp_receive+0x6e6>
        tcp_ack(pcb);
 800acf6:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800acf8:	f013 0f01 	tst.w	r3, #1
 800acfc:	d00d      	beq.n	800ad1a <tcp_receive+0x7a2>
 800acfe:	f023 0301 	bic.w	r3, r3, #1
 800ad02:	f043 0302 	orr.w	r3, r3, #2
 800ad06:	8763      	strh	r3, [r4, #58]	; 0x3a
        if (ip_current_is_v6()) {
 800ad08:	4b41      	ldr	r3, [pc, #260]	; (800ae10 <tcp_receive+0x898>)
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f000 8109 	beq.w	800af24 <tcp_receive+0x9ac>
          nd6_reachability_hint(ip6_current_src_addr());
 800ad12:	4840      	ldr	r0, [pc, #256]	; (800ae14 <tcp_receive+0x89c>)
 800ad14:	f009 fa26 	bl	8014164 <nd6_reachability_hint>
 800ad18:	e104      	b.n	800af24 <tcp_receive+0x9ac>
        tcp_ack(pcb);
 800ad1a:	f043 0301 	orr.w	r3, r3, #1
 800ad1e:	8763      	strh	r3, [r4, #58]	; 0x3a
 800ad20:	e7f2      	b.n	800ad08 <tcp_receive+0x790>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ad22:	4833      	ldr	r0, [pc, #204]	; (800adf0 <tcp_receive+0x878>)
 800ad24:	f7fe fa0c 	bl	8009140 <tcp_seg_copy>
 800ad28:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
        tcp_send_empty_ack(pcb);
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	f001 fd1f 	bl	800c770 <tcp_send_empty_ack>
 800ad32:	e0f7      	b.n	800af24 <tcp_receive+0x9ac>
              if (inseg.len > next->len) {
 800ad34:	4b2e      	ldr	r3, [pc, #184]	; (800adf0 <tcp_receive+0x878>)
 800ad36:	891a      	ldrh	r2, [r3, #8]
 800ad38:	892b      	ldrh	r3, [r5, #8]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d9f6      	bls.n	800ad2c <tcp_receive+0x7b4>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ad3e:	482c      	ldr	r0, [pc, #176]	; (800adf0 <tcp_receive+0x878>)
 800ad40:	f7fe f9fe 	bl	8009140 <tcp_seg_copy>
                if (cseg != NULL) {
 800ad44:	4603      	mov	r3, r0
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d0f0      	beq.n	800ad2c <tcp_receive+0x7b4>
                  if (prev != NULL) {
 800ad4a:	b12e      	cbz	r6, 800ad58 <tcp_receive+0x7e0>
                    prev->next = cseg;
 800ad4c:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 800ad4e:	4629      	mov	r1, r5
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7ff fbbd 	bl	800a4d0 <tcp_oos_insert_segment>
 800ad56:	e7e9      	b.n	800ad2c <tcp_receive+0x7b4>
                    pcb->ooseq = cseg;
 800ad58:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
 800ad5c:	e7f7      	b.n	800ad4e <tcp_receive+0x7d6>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ad5e:	1a99      	subs	r1, r3, r2
 800ad60:	2900      	cmp	r1, #0
 800ad62:	db2a      	blt.n	800adba <tcp_receive+0x842>
              if (next->next == NULL &&
 800ad64:	6829      	ldr	r1, [r5, #0]
 800ad66:	462e      	mov	r6, r5
 800ad68:	2900      	cmp	r1, #0
 800ad6a:	d038      	beq.n	800adde <tcp_receive+0x866>
 800ad6c:	460d      	mov	r5, r1
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ad6e:	2d00      	cmp	r5, #0
 800ad70:	d0dc      	beq.n	800ad2c <tcp_receive+0x7b4>
            if (seqno == next->tcphdr->seqno) {
 800ad72:	6928      	ldr	r0, [r5, #16]
 800ad74:	6842      	ldr	r2, [r0, #4]
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d0dc      	beq.n	800ad34 <tcp_receive+0x7bc>
              if (prev == NULL) {
 800ad7a:	2e00      	cmp	r6, #0
 800ad7c:	d0ef      	beq.n	800ad5e <tcp_receive+0x7e6>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ad7e:	6931      	ldr	r1, [r6, #16]
 800ad80:	6849      	ldr	r1, [r1, #4]
 800ad82:	1a59      	subs	r1, r3, r1
 800ad84:	2901      	cmp	r1, #1
 800ad86:	d4ed      	bmi.n	800ad64 <tcp_receive+0x7ec>
 800ad88:	1a99      	subs	r1, r3, r2
 800ad8a:	3101      	adds	r1, #1
 800ad8c:	2900      	cmp	r1, #0
 800ad8e:	dce9      	bgt.n	800ad64 <tcp_receive+0x7ec>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ad90:	4817      	ldr	r0, [pc, #92]	; (800adf0 <tcp_receive+0x878>)
 800ad92:	f7fe f9d5 	bl	8009140 <tcp_seg_copy>
                  if (cseg != NULL) {
 800ad96:	4607      	mov	r7, r0
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	d0c7      	beq.n	800ad2c <tcp_receive+0x7b4>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ad9c:	6933      	ldr	r3, [r6, #16]
 800ad9e:	6859      	ldr	r1, [r3, #4]
 800ada0:	8933      	ldrh	r3, [r6, #8]
 800ada2:	440b      	add	r3, r1
 800ada4:	4a10      	ldr	r2, [pc, #64]	; (800ade8 <tcp_receive+0x870>)
 800ada6:	6812      	ldr	r2, [r2, #0]
 800ada8:	1a9b      	subs	r3, r3, r2
 800adaa:	2b00      	cmp	r3, #0
 800adac:	dc10      	bgt.n	800add0 <tcp_receive+0x858>
                    prev->next = cseg;
 800adae:	6037      	str	r7, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 800adb0:	4629      	mov	r1, r5
 800adb2:	4638      	mov	r0, r7
 800adb4:	f7ff fb8c 	bl	800a4d0 <tcp_oos_insert_segment>
 800adb8:	e7b8      	b.n	800ad2c <tcp_receive+0x7b4>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800adba:	480d      	ldr	r0, [pc, #52]	; (800adf0 <tcp_receive+0x878>)
 800adbc:	f7fe f9c0 	bl	8009140 <tcp_seg_copy>
                  if (cseg != NULL) {
 800adc0:	2800      	cmp	r0, #0
 800adc2:	d0b3      	beq.n	800ad2c <tcp_receive+0x7b4>
                    pcb->ooseq = cseg;
 800adc4:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
                    tcp_oos_insert_segment(cseg, next);
 800adc8:	4629      	mov	r1, r5
 800adca:	f7ff fb81 	bl	800a4d0 <tcp_oos_insert_segment>
 800adce:	e7ad      	b.n	800ad2c <tcp_receive+0x7b4>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800add0:	1a52      	subs	r2, r2, r1
 800add2:	b291      	uxth	r1, r2
 800add4:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 800add6:	6870      	ldr	r0, [r6, #4]
 800add8:	f7fd fdb6 	bl	8008948 <pbuf_realloc>
 800addc:	e7e7      	b.n	800adae <tcp_receive+0x836>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800adde:	1a9a      	subs	r2, r3, r2
              if (next->next == NULL &&
 800ade0:	2a00      	cmp	r2, #0
 800ade2:	dc19      	bgt.n	800ae18 <tcp_receive+0x8a0>
 800ade4:	460d      	mov	r5, r1
 800ade6:	e7c2      	b.n	800ad6e <tcp_receive+0x7f6>
 800ade8:	20001758 	.word	0x20001758
 800adec:	2000176e 	.word	0x2000176e
 800adf0:	20001738 	.word	0x20001738
 800adf4:	08016f10 	.word	0x08016f10
 800adf8:	08017098 	.word	0x08017098
 800adfc:	08015608 	.word	0x08015608
 800ae00:	080170d4 	.word	0x080170d4
 800ae04:	080170f4 	.word	0x080170f4
 800ae08:	20001750 	.word	0x20001750
 800ae0c:	20001754 	.word	0x20001754
 800ae10:	20004b84 	.word	0x20004b84
 800ae14:	20004b98 	.word	0x20004b98
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ae18:	8980      	ldrh	r0, [r0, #12]
 800ae1a:	f7fc f9e7 	bl	80071ec <lwip_htons>
 800ae1e:	f010 0f01 	tst.w	r0, #1
 800ae22:	d183      	bne.n	800ad2c <tcp_receive+0x7b4>
                next->next = tcp_seg_copy(&inseg);
 800ae24:	4840      	ldr	r0, [pc, #256]	; (800af28 <tcp_receive+0x9b0>)
 800ae26:	f7fe f98b 	bl	8009140 <tcp_seg_copy>
 800ae2a:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	f43f af7d 	beq.w	800ad2c <tcp_receive+0x7b4>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ae32:	692b      	ldr	r3, [r5, #16]
 800ae34:	6859      	ldr	r1, [r3, #4]
 800ae36:	892a      	ldrh	r2, [r5, #8]
 800ae38:	440a      	add	r2, r1
 800ae3a:	4b3c      	ldr	r3, [pc, #240]	; (800af2c <tcp_receive+0x9b4>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	1ad2      	subs	r2, r2, r3
 800ae40:	2a00      	cmp	r2, #0
 800ae42:	dc43      	bgt.n	800aecc <tcp_receive+0x954>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ae44:	4b3a      	ldr	r3, [pc, #232]	; (800af30 <tcp_receive+0x9b8>)
 800ae46:	881b      	ldrh	r3, [r3, #0]
 800ae48:	4a38      	ldr	r2, [pc, #224]	; (800af2c <tcp_receive+0x9b4>)
 800ae4a:	6812      	ldr	r2, [r2, #0]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ae50:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
 800ae54:	440a      	add	r2, r1
 800ae56:	1a9b      	subs	r3, r3, r2
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f77f af67 	ble.w	800ad2c <tcp_receive+0x7b4>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ae5e:	682b      	ldr	r3, [r5, #0]
 800ae60:	691b      	ldr	r3, [r3, #16]
 800ae62:	8998      	ldrh	r0, [r3, #12]
 800ae64:	f7fc f9c2 	bl	80071ec <lwip_htons>
 800ae68:	f010 0f01 	tst.w	r0, #1
 800ae6c:	d135      	bne.n	800aeda <tcp_receive+0x962>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ae6e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ae70:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800ae74:	4413      	add	r3, r2
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	682a      	ldr	r2, [r5, #0]
 800ae7a:	492c      	ldr	r1, [pc, #176]	; (800af2c <tcp_receive+0x9b4>)
 800ae7c:	6809      	ldr	r1, [r1, #0]
 800ae7e:	1a5b      	subs	r3, r3, r1
 800ae80:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ae82:	682b      	ldr	r3, [r5, #0]
 800ae84:	8919      	ldrh	r1, [r3, #8]
 800ae86:	6858      	ldr	r0, [r3, #4]
 800ae88:	f7fd fd5e 	bl	8008948 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ae8c:	682b      	ldr	r3, [r5, #0]
 800ae8e:	891d      	ldrh	r5, [r3, #8]
 800ae90:	691b      	ldr	r3, [r3, #16]
 800ae92:	8998      	ldrh	r0, [r3, #12]
 800ae94:	f7fc f9aa 	bl	80071ec <lwip_htons>
 800ae98:	f010 0f03 	tst.w	r0, #3
 800ae9c:	d02f      	beq.n	800aefe <tcp_receive+0x986>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	442b      	add	r3, r5
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	4a22      	ldr	r2, [pc, #136]	; (800af30 <tcp_receive+0x9b8>)
 800aea6:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800aea8:	4a20      	ldr	r2, [pc, #128]	; (800af2c <tcp_receive+0x9b4>)
 800aeaa:	6812      	ldr	r2, [r2, #0]
 800aeac:	4413      	add	r3, r2
 800aeae:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800aeb0:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
 800aeb4:	440a      	add	r2, r1
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	f43f af38 	beq.w	800ad2c <tcp_receive+0x7b4>
 800aebc:	4b1d      	ldr	r3, [pc, #116]	; (800af34 <tcp_receive+0x9bc>)
 800aebe:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800aec2:	491d      	ldr	r1, [pc, #116]	; (800af38 <tcp_receive+0x9c0>)
 800aec4:	481d      	ldr	r0, [pc, #116]	; (800af3c <tcp_receive+0x9c4>)
 800aec6:	f009 fb95 	bl	80145f4 <iprintf>
 800aeca:	e72f      	b.n	800ad2c <tcp_receive+0x7b4>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800aecc:	1a5b      	subs	r3, r3, r1
 800aece:	b299      	uxth	r1, r3
 800aed0:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800aed2:	6868      	ldr	r0, [r5, #4]
 800aed4:	f7fd fd38 	bl	8008948 <pbuf_realloc>
 800aed8:	e7b4      	b.n	800ae44 <tcp_receive+0x8cc>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800aeda:	682b      	ldr	r3, [r5, #0]
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	8998      	ldrh	r0, [r3, #12]
 800aee0:	b206      	sxth	r6, r0
 800aee2:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800aee6:	f7fc f981 	bl	80071ec <lwip_htons>
 800aeea:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800aeee:	f7fc f97d 	bl	80071ec <lwip_htons>
 800aef2:	b200      	sxth	r0, r0
 800aef4:	682b      	ldr	r3, [r5, #0]
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	4306      	orrs	r6, r0
 800aefa:	819e      	strh	r6, [r3, #12]
 800aefc:	e7b7      	b.n	800ae6e <tcp_receive+0x8f6>
                    tcplen = TCP_TCPLEN(next->next);
 800aefe:	2300      	movs	r3, #0
 800af00:	e7ce      	b.n	800aea0 <tcp_receive+0x928>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800af02:	4b0a      	ldr	r3, [pc, #40]	; (800af2c <tcp_receive+0x9b4>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800af08:	1a99      	subs	r1, r3, r2
 800af0a:	2900      	cmp	r1, #0
 800af0c:	db06      	blt.n	800af1c <tcp_receive+0x9a4>
 800af0e:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
 800af12:	440a      	add	r2, r1
 800af14:	1a9b      	subs	r3, r3, r2
 800af16:	3301      	adds	r3, #1
 800af18:	2b00      	cmp	r3, #0
 800af1a:	dd03      	ble.n	800af24 <tcp_receive+0x9ac>
      tcp_ack_now(pcb);
 800af1c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800af1e:	f043 0302 	orr.w	r3, r3, #2
 800af22:	8763      	strh	r3, [r4, #58]	; 0x3a
}
 800af24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af26:	bf00      	nop
 800af28:	20001738 	.word	0x20001738
 800af2c:	20001758 	.word	0x20001758
 800af30:	2000176e 	.word	0x2000176e
 800af34:	08016f10 	.word	0x08016f10
 800af38:	08017060 	.word	0x08017060
 800af3c:	08015608 	.word	0x08015608

0800af40 <tcp_process>:
{
 800af40:	b570      	push	{r4, r5, r6, lr}
 800af42:	b084      	sub	sp, #16
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800af44:	4604      	mov	r4, r0
 800af46:	b1c8      	cbz	r0, 800af7c <tcp_process+0x3c>
  if (flags & TCP_RST) {
 800af48:	4bab      	ldr	r3, [pc, #684]	; (800b1f8 <tcp_process+0x2b8>)
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	f013 0f04 	tst.w	r3, #4
 800af50:	d040      	beq.n	800afd4 <tcp_process+0x94>
    if (pcb->state == SYN_SENT) {
 800af52:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 800af56:	2902      	cmp	r1, #2
 800af58:	d018      	beq.n	800af8c <tcp_process+0x4c>
      if (seqno == pcb->rcv_nxt) {
 800af5a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800af5c:	4ba7      	ldr	r3, [pc, #668]	; (800b1fc <tcp_process+0x2bc>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	429a      	cmp	r2, r3
 800af62:	d022      	beq.n	800afaa <tcp_process+0x6a>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800af64:	1a99      	subs	r1, r3, r2
 800af66:	2900      	cmp	r1, #0
 800af68:	f2c0 82b9 	blt.w	800b4de <tcp_process+0x59e>
 800af6c:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
 800af70:	440a      	add	r2, r1
 800af72:	1a9b      	subs	r3, r3, r2
 800af74:	2b00      	cmp	r3, #0
 800af76:	dd12      	ble.n	800af9e <tcp_process+0x5e>
      return ERR_OK;
 800af78:	2500      	movs	r5, #0
 800af7a:	e00d      	b.n	800af98 <tcp_process+0x58>
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800af7c:	4ba0      	ldr	r3, [pc, #640]	; (800b200 <tcp_process+0x2c0>)
 800af7e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800af82:	49a0      	ldr	r1, [pc, #640]	; (800b204 <tcp_process+0x2c4>)
 800af84:	48a0      	ldr	r0, [pc, #640]	; (800b208 <tcp_process+0x2c8>)
 800af86:	f009 fb35 	bl	80145f4 <iprintf>
 800af8a:	e7dd      	b.n	800af48 <tcp_process+0x8>
      if (ackno == pcb->snd_nxt) {
 800af8c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800af8e:	4b9f      	ldr	r3, [pc, #636]	; (800b20c <tcp_process+0x2cc>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	429a      	cmp	r2, r3
 800af94:	d009      	beq.n	800afaa <tcp_process+0x6a>
      return ERR_OK;
 800af96:	2500      	movs	r5, #0
}
 800af98:	4628      	mov	r0, r5
 800af9a:	b004      	add	sp, #16
 800af9c:	bd70      	pop	{r4, r5, r6, pc}
        tcp_ack_now(pcb);
 800af9e:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800afa0:	f043 0302 	orr.w	r3, r3, #2
 800afa4:	8763      	strh	r3, [r4, #58]	; 0x3a
      return ERR_OK;
 800afa6:	2500      	movs	r5, #0
 800afa8:	e7f6      	b.n	800af98 <tcp_process+0x58>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800afaa:	b159      	cbz	r1, 800afc4 <tcp_process+0x84>
      recv_flags |= TF_RESET;
 800afac:	4a98      	ldr	r2, [pc, #608]	; (800b210 <tcp_process+0x2d0>)
 800afae:	7813      	ldrb	r3, [r2, #0]
 800afb0:	f043 0308 	orr.w	r3, r3, #8
 800afb4:	7013      	strb	r3, [r2, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800afb6:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800afb8:	f023 0301 	bic.w	r3, r3, #1
 800afbc:	8763      	strh	r3, [r4, #58]	; 0x3a
      return ERR_RST;
 800afbe:	f06f 050d 	mvn.w	r5, #13
 800afc2:	e7e9      	b.n	800af98 <tcp_process+0x58>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800afc4:	4b8e      	ldr	r3, [pc, #568]	; (800b200 <tcp_process+0x2c0>)
 800afc6:	f44f 724e 	mov.w	r2, #824	; 0x338
 800afca:	4992      	ldr	r1, [pc, #584]	; (800b214 <tcp_process+0x2d4>)
 800afcc:	488e      	ldr	r0, [pc, #568]	; (800b208 <tcp_process+0x2c8>)
 800afce:	f009 fb11 	bl	80145f4 <iprintf>
 800afd2:	e7eb      	b.n	800afac <tcp_process+0x6c>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800afd4:	f013 0f02 	tst.w	r3, #2
 800afd8:	d00b      	beq.n	800aff2 <tcp_process+0xb2>
 800afda:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800afde:	3b02      	subs	r3, #2
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d905      	bls.n	800aff2 <tcp_process+0xb2>
    tcp_ack_now(pcb);
 800afe6:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800afe8:	f043 0302 	orr.w	r3, r3, #2
 800afec:	8763      	strh	r3, [r4, #58]	; 0x3a
    return ERR_OK;
 800afee:	2500      	movs	r5, #0
 800aff0:	e7d2      	b.n	800af98 <tcp_process+0x58>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800aff2:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800aff4:	f013 0f10 	tst.w	r3, #16
 800aff8:	d102      	bne.n	800b000 <tcp_process+0xc0>
    pcb->tmr = tcp_ticks;
 800affa:	4b87      	ldr	r3, [pc, #540]	; (800b218 <tcp_process+0x2d8>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	6423      	str	r3, [r4, #64]	; 0x40
  pcb->keep_cnt_sent = 0;
 800b000:	2300      	movs	r3, #0
 800b002:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
  pcb->persist_probe = 0;
 800b006:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
  tcp_parseopt(pcb);
 800b00a:	4620      	mov	r0, r4
 800b00c:	f7ff f832 	bl	800a074 <tcp_parseopt>
  switch (pcb->state) {
 800b010:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800b014:	3b02      	subs	r3, #2
 800b016:	2b07      	cmp	r3, #7
 800b018:	f200 8263 	bhi.w	800b4e2 <tcp_process+0x5a2>
 800b01c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b020:	00c80008 	.word	0x00c80008
 800b024:	01850173 	.word	0x01850173
 800b028:	017301e0 	.word	0x017301e0
 800b02c:	0244020f 	.word	0x0244020f
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b030:	4b71      	ldr	r3, [pc, #452]	; (800b1f8 <tcp_process+0x2b8>)
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	f003 0212 	and.w	r2, r3, #18
 800b038:	2a12      	cmp	r2, #18
 800b03a:	d005      	beq.n	800b048 <tcp_process+0x108>
      else if (flags & TCP_ACK) {
 800b03c:	f013 0f10 	tst.w	r3, #16
 800b040:	f040 8095 	bne.w	800b16e <tcp_process+0x22e>
  return ERR_OK;
 800b044:	2500      	movs	r5, #0
 800b046:	e7a7      	b.n	800af98 <tcp_process+0x58>
          && (ackno == pcb->lastack + 1)) {
 800b048:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b04a:	3201      	adds	r2, #1
 800b04c:	496f      	ldr	r1, [pc, #444]	; (800b20c <tcp_process+0x2cc>)
 800b04e:	6809      	ldr	r1, [r1, #0]
 800b050:	428a      	cmp	r2, r1
 800b052:	d1f3      	bne.n	800b03c <tcp_process+0xfc>
        pcb->rcv_nxt = seqno + 1;
 800b054:	4b69      	ldr	r3, [pc, #420]	; (800b1fc <tcp_process+0x2bc>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	1c5a      	adds	r2, r3, #1
 800b05a:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b05c:	64e2      	str	r2, [r4, #76]	; 0x4c
        pcb->lastack = ackno;
 800b05e:	6661      	str	r1, [r4, #100]	; 0x64
        pcb->snd_wnd = tcphdr->wnd;
 800b060:	4a6e      	ldr	r2, [pc, #440]	; (800b21c <tcp_process+0x2dc>)
 800b062:	6812      	ldr	r2, [r2, #0]
 800b064:	89d2      	ldrh	r2, [r2, #14]
 800b066:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b06a:	f8a4 2082 	strh.w	r2, [r4, #130]	; 0x82
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b06e:	3b01      	subs	r3, #1
 800b070:	6763      	str	r3, [r4, #116]	; 0x74
        pcb->state = ESTABLISHED;
 800b072:	2304      	movs	r3, #4
 800b074:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b078:	f8b4 5052 	ldrh.w	r5, [r4, #82]	; 0x52
 800b07c:	f114 0614 	adds.w	r6, r4, #20
 800b080:	d003      	beq.n	800b08a <tcp_process+0x14a>
 800b082:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800b086:	2b06      	cmp	r3, #6
 800b088:	d045      	beq.n	800b116 <tcp_process+0x1d6>
 800b08a:	f104 0014 	add.w	r0, r4, #20
 800b08e:	f004 ffbf 	bl	8010010 <ip4_route>
 800b092:	4601      	mov	r1, r0
 800b094:	4632      	mov	r2, r6
 800b096:	4628      	mov	r0, r5
 800b098:	f7fe f894 	bl	80091c4 <tcp_eff_send_mss_netif>
 800b09c:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b0a0:	0042      	lsls	r2, r0, #1
 800b0a2:	f241 131c 	movw	r3, #4380	; 0x111c
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	bf38      	it	cc
 800b0aa:	4613      	movcc	r3, r2
 800b0ac:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
 800b0b0:	d937      	bls.n	800b122 <tcp_process+0x1e2>
 800b0b2:	0083      	lsls	r3, r0, #2
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b0ba:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d039      	beq.n	800b136 <tcp_process+0x1f6>
        --pcb->snd_queuelen;
 800b0c2:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
        rseg = pcb->unacked;
 800b0cc:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
        if (rseg == NULL) {
 800b0d0:	2d00      	cmp	r5, #0
 800b0d2:	d038      	beq.n	800b146 <tcp_process+0x206>
          pcb->unacked = rseg->next;
 800b0d4:	682b      	ldr	r3, [r5, #0]
 800b0d6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        tcp_seg_free(rseg);
 800b0da:	4628      	mov	r0, r5
 800b0dc:	f7fe f818 	bl	8009110 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800b0e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d03d      	beq.n	800b164 <tcp_process+0x224>
          pcb->rtime = 0;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
          pcb->nrtx = 0;
 800b0ee:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b0f2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800b0f6:	b143      	cbz	r3, 800b10a <tcp_process+0x1ca>
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	4621      	mov	r1, r4
 800b0fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b0fe:	4798      	blx	r3
 800b100:	4605      	mov	r5, r0
        if (err == ERR_ABRT) {
 800b102:	f110 0f0d 	cmn.w	r0, #13
 800b106:	f43f af47 	beq.w	800af98 <tcp_process+0x58>
        tcp_ack_now(pcb);
 800b10a:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800b10c:	f043 0302 	orr.w	r3, r3, #2
 800b110:	8763      	strh	r3, [r4, #58]	; 0x3a
  return ERR_OK;
 800b112:	2500      	movs	r5, #0
        tcp_ack_now(pcb);
 800b114:	e740      	b.n	800af98 <tcp_process+0x58>
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b116:	4631      	mov	r1, r6
 800b118:	4620      	mov	r0, r4
 800b11a:	f005 ff85 	bl	8011028 <ip6_route>
 800b11e:	4601      	mov	r1, r0
 800b120:	e7b8      	b.n	800b094 <tcp_process+0x154>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b122:	f241 131c 	movw	r3, #4380	; 0x111c
 800b126:	429a      	cmp	r2, r3
 800b128:	d902      	bls.n	800b130 <tcp_process+0x1f0>
 800b12a:	0043      	lsls	r3, r0, #1
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	e7c2      	b.n	800b0b6 <tcp_process+0x176>
 800b130:	f241 131c 	movw	r3, #4380	; 0x111c
 800b134:	e7bf      	b.n	800b0b6 <tcp_process+0x176>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b136:	4b32      	ldr	r3, [pc, #200]	; (800b200 <tcp_process+0x2c0>)
 800b138:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b13c:	4938      	ldr	r1, [pc, #224]	; (800b220 <tcp_process+0x2e0>)
 800b13e:	4832      	ldr	r0, [pc, #200]	; (800b208 <tcp_process+0x2c8>)
 800b140:	f009 fa58 	bl	80145f4 <iprintf>
 800b144:	e7bd      	b.n	800b0c2 <tcp_process+0x182>
          rseg = pcb->unsent;
 800b146:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b14a:	b11d      	cbz	r5, 800b154 <tcp_process+0x214>
          pcb->unsent = rseg->next;
 800b14c:	682b      	ldr	r3, [r5, #0]
 800b14e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800b152:	e7c2      	b.n	800b0da <tcp_process+0x19a>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b154:	4b2a      	ldr	r3, [pc, #168]	; (800b200 <tcp_process+0x2c0>)
 800b156:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b15a:	4932      	ldr	r1, [pc, #200]	; (800b224 <tcp_process+0x2e4>)
 800b15c:	482a      	ldr	r0, [pc, #168]	; (800b208 <tcp_process+0x2c8>)
 800b15e:	f009 fa49 	bl	80145f4 <iprintf>
 800b162:	e7f3      	b.n	800b14c <tcp_process+0x20c>
          pcb->rtime = -1;
 800b164:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b168:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 800b16c:	e7c1      	b.n	800b0f2 <tcp_process+0x1b2>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b16e:	4b2b      	ldr	r3, [pc, #172]	; (800b21c <tcp_process+0x2dc>)
 800b170:	6818      	ldr	r0, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b172:	4b2d      	ldr	r3, [pc, #180]	; (800b228 <tcp_process+0x2e8>)
 800b174:	4a2d      	ldr	r2, [pc, #180]	; (800b22c <tcp_process+0x2ec>)
 800b176:	8815      	ldrh	r5, [r2, #0]
 800b178:	4a20      	ldr	r2, [pc, #128]	; (800b1fc <tcp_process+0x2bc>)
 800b17a:	6812      	ldr	r2, [r2, #0]
 800b17c:	4923      	ldr	r1, [pc, #140]	; (800b20c <tcp_process+0x2cc>)
 800b17e:	6809      	ldr	r1, [r1, #0]
 800b180:	8806      	ldrh	r6, [r0, #0]
 800b182:	9602      	str	r6, [sp, #8]
 800b184:	8840      	ldrh	r0, [r0, #2]
 800b186:	9001      	str	r0, [sp, #4]
 800b188:	f1a3 0014 	sub.w	r0, r3, #20
 800b18c:	9000      	str	r0, [sp, #0]
 800b18e:	442a      	add	r2, r5
 800b190:	4620      	mov	r0, r4
 800b192:	f001 faa5 	bl	800c6e0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b196:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 800b19a:	2b05      	cmp	r3, #5
 800b19c:	d901      	bls.n	800b1a2 <tcp_process+0x262>
  return ERR_OK;
 800b19e:	2500      	movs	r5, #0
 800b1a0:	e6fa      	b.n	800af98 <tcp_process+0x58>
          pcb->rtime = 0;
 800b1a2:	2500      	movs	r5, #0
 800b1a4:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
          tcp_rexmit_rto(pcb);
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f001 fcdf 	bl	800cb6c <tcp_rexmit_rto>
 800b1ae:	e6f3      	b.n	800af98 <tcp_process+0x58>
      if (flags & TCP_ACK) {
 800b1b0:	4b11      	ldr	r3, [pc, #68]	; (800b1f8 <tcp_process+0x2b8>)
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	f013 0f10 	tst.w	r3, #16
 800b1b8:	f000 8094 	beq.w	800b2e4 <tcp_process+0x3a4>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b1bc:	4b13      	ldr	r3, [pc, #76]	; (800b20c <tcp_process+0x2cc>)
 800b1be:	6819      	ldr	r1, [r3, #0]
 800b1c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1c2:	1acb      	subs	r3, r1, r3
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d403      	bmi.n	800b1d0 <tcp_process+0x290>
 800b1c8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b1ca:	1acb      	subs	r3, r1, r3
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	dd2f      	ble.n	800b230 <tcp_process+0x2f0>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b1d0:	4b12      	ldr	r3, [pc, #72]	; (800b21c <tcp_process+0x2dc>)
 800b1d2:	6818      	ldr	r0, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b1d4:	4b14      	ldr	r3, [pc, #80]	; (800b228 <tcp_process+0x2e8>)
 800b1d6:	4a15      	ldr	r2, [pc, #84]	; (800b22c <tcp_process+0x2ec>)
 800b1d8:	8815      	ldrh	r5, [r2, #0]
 800b1da:	4a08      	ldr	r2, [pc, #32]	; (800b1fc <tcp_process+0x2bc>)
 800b1dc:	6812      	ldr	r2, [r2, #0]
 800b1de:	8806      	ldrh	r6, [r0, #0]
 800b1e0:	9602      	str	r6, [sp, #8]
 800b1e2:	8840      	ldrh	r0, [r0, #2]
 800b1e4:	9001      	str	r0, [sp, #4]
 800b1e6:	f1a3 0014 	sub.w	r0, r3, #20
 800b1ea:	9000      	str	r0, [sp, #0]
 800b1ec:	442a      	add	r2, r5
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f001 fa76 	bl	800c6e0 <tcp_rst>
  return ERR_OK;
 800b1f4:	2500      	movs	r5, #0
 800b1f6:	e6cf      	b.n	800af98 <tcp_process+0x58>
 800b1f8:	20001734 	.word	0x20001734
 800b1fc:	20001758 	.word	0x20001758
 800b200:	08016f10 	.word	0x08016f10
 800b204:	08016f60 	.word	0x08016f60
 800b208:	08015608 	.word	0x08015608
 800b20c:	20001730 	.word	0x20001730
 800b210:	20001754 	.word	0x20001754
 800b214:	08016f7c 	.word	0x08016f7c
 800b218:	20008c48 	.word	0x20008c48
 800b21c:	20001760 	.word	0x20001760
 800b220:	08016f9c 	.word	0x08016f9c
 800b224:	08016fb4 	.word	0x08016fb4
 800b228:	20004bac 	.word	0x20004bac
 800b22c:	2000176e 	.word	0x2000176e
          pcb->state = ESTABLISHED;
 800b230:	2304      	movs	r3, #4
 800b232:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if (pcb->listener == NULL) {
 800b236:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800b23a:	b1eb      	cbz	r3, 800b278 <tcp_process+0x338>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23e:	b19b      	cbz	r3, 800b268 <tcp_process+0x328>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b240:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800b244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b246:	b1d3      	cbz	r3, 800b27e <tcp_process+0x33e>
 800b248:	2200      	movs	r2, #0
 800b24a:	4621      	mov	r1, r4
 800b24c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b24e:	4798      	blx	r3
          if (err != ERR_OK) {
 800b250:	4605      	mov	r5, r0
 800b252:	b1b8      	cbz	r0, 800b284 <tcp_process+0x344>
            if (err != ERR_ABRT) {
 800b254:	f115 0f0d 	cmn.w	r5, #13
 800b258:	f43f ae9e 	beq.w	800af98 <tcp_process+0x58>
              tcp_abort(pcb);
 800b25c:	4620      	mov	r0, r4
 800b25e:	f7fe f927 	bl	80094b0 <tcp_abort>
            return ERR_ABRT;
 800b262:	f06f 050c 	mvn.w	r5, #12
 800b266:	e697      	b.n	800af98 <tcp_process+0x58>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b268:	4ba4      	ldr	r3, [pc, #656]	; (800b4fc <tcp_process+0x5bc>)
 800b26a:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b26e:	49a4      	ldr	r1, [pc, #656]	; (800b500 <tcp_process+0x5c0>)
 800b270:	48a4      	ldr	r0, [pc, #656]	; (800b504 <tcp_process+0x5c4>)
 800b272:	f009 f9bf 	bl	80145f4 <iprintf>
 800b276:	e7e3      	b.n	800b240 <tcp_process+0x300>
            err = ERR_VAL;
 800b278:	f06f 0505 	mvn.w	r5, #5
 800b27c:	e7ea      	b.n	800b254 <tcp_process+0x314>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b27e:	f06f 050f 	mvn.w	r5, #15
 800b282:	e7e7      	b.n	800b254 <tcp_process+0x314>
          tcp_receive(pcb);
 800b284:	4620      	mov	r0, r4
 800b286:	f7ff f977 	bl	800a578 <tcp_receive>
          if (recv_acked != 0) {
 800b28a:	4b9f      	ldr	r3, [pc, #636]	; (800b508 <tcp_process+0x5c8>)
 800b28c:	881b      	ldrh	r3, [r3, #0]
 800b28e:	b113      	cbz	r3, 800b296 <tcp_process+0x356>
            recv_acked--;
 800b290:	3b01      	subs	r3, #1
 800b292:	4a9d      	ldr	r2, [pc, #628]	; (800b508 <tcp_process+0x5c8>)
 800b294:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b296:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800b29a:	0059      	lsls	r1, r3, #1
 800b29c:	f241 121c 	movw	r2, #4380	; 0x111c
 800b2a0:	428a      	cmp	r2, r1
 800b2a2:	bf38      	it	cc
 800b2a4:	460a      	movcc	r2, r1
 800b2a6:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800b2aa:	d911      	bls.n	800b2d0 <tcp_process+0x390>
 800b2ac:	009b      	lsls	r3, r3, #2
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
          if (recv_flags & TF_GOT_FIN) {
 800b2b4:	4b95      	ldr	r3, [pc, #596]	; (800b50c <tcp_process+0x5cc>)
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	f013 0f20 	tst.w	r3, #32
 800b2bc:	f43f ae6c 	beq.w	800af98 <tcp_process+0x58>
            tcp_ack_now(pcb);
 800b2c0:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800b2c2:	f043 0302 	orr.w	r3, r3, #2
 800b2c6:	8763      	strh	r3, [r4, #58]	; 0x3a
            pcb->state = CLOSE_WAIT;
 800b2c8:	2307      	movs	r3, #7
 800b2ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800b2ce:	e663      	b.n	800af98 <tcp_process+0x58>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b2d0:	f241 121c 	movw	r2, #4380	; 0x111c
 800b2d4:	4291      	cmp	r1, r2
 800b2d6:	d902      	bls.n	800b2de <tcp_process+0x39e>
 800b2d8:	005b      	lsls	r3, r3, #1
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	e7e8      	b.n	800b2b0 <tcp_process+0x370>
 800b2de:	f241 131c 	movw	r3, #4380	; 0x111c
 800b2e2:	e7e5      	b.n	800b2b0 <tcp_process+0x370>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b2e4:	f013 0f02 	tst.w	r3, #2
 800b2e8:	f000 80fd 	beq.w	800b4e6 <tcp_process+0x5a6>
 800b2ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	4a87      	ldr	r2, [pc, #540]	; (800b510 <tcp_process+0x5d0>)
 800b2f2:	6812      	ldr	r2, [r2, #0]
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d001      	beq.n	800b2fc <tcp_process+0x3bc>
  return ERR_OK;
 800b2f8:	2500      	movs	r5, #0
 800b2fa:	e64d      	b.n	800af98 <tcp_process+0x58>
        tcp_rexmit(pcb);
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f001 f969 	bl	800c5d4 <tcp_rexmit>
  return ERR_OK;
 800b302:	2500      	movs	r5, #0
 800b304:	e648      	b.n	800af98 <tcp_process+0x58>
      tcp_receive(pcb);
 800b306:	4620      	mov	r0, r4
 800b308:	f7ff f936 	bl	800a578 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b30c:	4b7f      	ldr	r3, [pc, #508]	; (800b50c <tcp_process+0x5cc>)
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	f013 0f20 	tst.w	r3, #32
 800b314:	f000 80e9 	beq.w	800b4ea <tcp_process+0x5aa>
        tcp_ack_now(pcb);
 800b318:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800b31a:	f043 0302 	orr.w	r3, r3, #2
 800b31e:	8763      	strh	r3, [r4, #58]	; 0x3a
        pcb->state = CLOSE_WAIT;
 800b320:	2307      	movs	r3, #7
 800b322:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return ERR_OK;
 800b326:	2500      	movs	r5, #0
 800b328:	e636      	b.n	800af98 <tcp_process+0x58>
      tcp_receive(pcb);
 800b32a:	4620      	mov	r0, r4
 800b32c:	f7ff f924 	bl	800a578 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b330:	4b76      	ldr	r3, [pc, #472]	; (800b50c <tcp_process+0x5cc>)
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	f013 0f20 	tst.w	r3, #32
 800b338:	d03b      	beq.n	800b3b2 <tcp_process+0x472>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b33a:	4b76      	ldr	r3, [pc, #472]	; (800b514 <tcp_process+0x5d4>)
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	f013 0f10 	tst.w	r3, #16
 800b342:	d004      	beq.n	800b34e <tcp_process+0x40e>
 800b344:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800b346:	4b74      	ldr	r3, [pc, #464]	; (800b518 <tcp_process+0x5d8>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d008      	beq.n	800b360 <tcp_process+0x420>
          tcp_ack_now(pcb);
 800b34e:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800b350:	f043 0302 	orr.w	r3, r3, #2
 800b354:	8763      	strh	r3, [r4, #58]	; 0x3a
          pcb->state = CLOSING;
 800b356:	2308      	movs	r3, #8
 800b358:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return ERR_OK;
 800b35c:	2500      	movs	r5, #0
 800b35e:	e61b      	b.n	800af98 <tcp_process+0x58>
            pcb->unsent == NULL) {
 800b360:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1f2      	bne.n	800b34e <tcp_process+0x40e>
          tcp_ack_now(pcb);
 800b368:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800b36a:	f043 0302 	orr.w	r3, r3, #2
 800b36e:	8763      	strh	r3, [r4, #58]	; 0x3a
          tcp_pcb_purge(pcb);
 800b370:	4620      	mov	r0, r4
 800b372:	f7fd ff69 	bl	8009248 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b376:	4b69      	ldr	r3, [pc, #420]	; (800b51c <tcp_process+0x5dc>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	429c      	cmp	r4, r3
 800b37c:	d005      	beq.n	800b38a <tcp_process+0x44a>
 800b37e:	b13b      	cbz	r3, 800b390 <tcp_process+0x450>
 800b380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b382:	4294      	cmp	r4, r2
 800b384:	d012      	beq.n	800b3ac <tcp_process+0x46c>
 800b386:	4613      	mov	r3, r2
 800b388:	e7f9      	b.n	800b37e <tcp_process+0x43e>
 800b38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b38c:	4b63      	ldr	r3, [pc, #396]	; (800b51c <tcp_process+0x5dc>)
 800b38e:	601a      	str	r2, [r3, #0]
 800b390:	4b63      	ldr	r3, [pc, #396]	; (800b520 <tcp_process+0x5e0>)
 800b392:	2201      	movs	r2, #1
 800b394:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b396:	230a      	movs	r3, #10
 800b398:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b39c:	4b61      	ldr	r3, [pc, #388]	; (800b524 <tcp_process+0x5e4>)
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	62e2      	str	r2, [r4, #44]	; 0x2c
 800b3a2:	601c      	str	r4, [r3, #0]
 800b3a4:	f001 fd0e 	bl	800cdc4 <tcp_timer_needed>
  return ERR_OK;
 800b3a8:	2500      	movs	r5, #0
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b3aa:	e5f5      	b.n	800af98 <tcp_process+0x58>
          TCP_RMV_ACTIVE(pcb);
 800b3ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b3ae:	62da      	str	r2, [r3, #44]	; 0x2c
 800b3b0:	e7ee      	b.n	800b390 <tcp_process+0x450>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b3b2:	4b58      	ldr	r3, [pc, #352]	; (800b514 <tcp_process+0x5d4>)
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	f013 0f10 	tst.w	r3, #16
 800b3ba:	f000 8098 	beq.w	800b4ee <tcp_process+0x5ae>
 800b3be:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800b3c0:	4b55      	ldr	r3, [pc, #340]	; (800b518 <tcp_process+0x5d8>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d001      	beq.n	800b3cc <tcp_process+0x48c>
  return ERR_OK;
 800b3c8:	2500      	movs	r5, #0
 800b3ca:	e5e5      	b.n	800af98 <tcp_process+0x58>
                 pcb->unsent == NULL) {
 800b3cc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b3d0:	b10b      	cbz	r3, 800b3d6 <tcp_process+0x496>
  return ERR_OK;
 800b3d2:	2500      	movs	r5, #0
 800b3d4:	e5e0      	b.n	800af98 <tcp_process+0x58>
        pcb->state = FIN_WAIT_2;
 800b3d6:	2306      	movs	r3, #6
 800b3d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return ERR_OK;
 800b3dc:	2500      	movs	r5, #0
 800b3de:	e5db      	b.n	800af98 <tcp_process+0x58>
      tcp_receive(pcb);
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f7ff f8c9 	bl	800a578 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b3e6:	4b49      	ldr	r3, [pc, #292]	; (800b50c <tcp_process+0x5cc>)
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	f013 0f20 	tst.w	r3, #32
 800b3ee:	d101      	bne.n	800b3f4 <tcp_process+0x4b4>
  return ERR_OK;
 800b3f0:	2500      	movs	r5, #0
 800b3f2:	e5d1      	b.n	800af98 <tcp_process+0x58>
        tcp_ack_now(pcb);
 800b3f4:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800b3f6:	f043 0302 	orr.w	r3, r3, #2
 800b3fa:	8763      	strh	r3, [r4, #58]	; 0x3a
        tcp_pcb_purge(pcb);
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	f7fd ff23 	bl	8009248 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b402:	4b46      	ldr	r3, [pc, #280]	; (800b51c <tcp_process+0x5dc>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	429c      	cmp	r4, r3
 800b408:	d005      	beq.n	800b416 <tcp_process+0x4d6>
 800b40a:	b153      	cbz	r3, 800b422 <tcp_process+0x4e2>
 800b40c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b40e:	4294      	cmp	r4, r2
 800b410:	d005      	beq.n	800b41e <tcp_process+0x4de>
 800b412:	4613      	mov	r3, r2
 800b414:	e7f9      	b.n	800b40a <tcp_process+0x4ca>
 800b416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b418:	4b40      	ldr	r3, [pc, #256]	; (800b51c <tcp_process+0x5dc>)
 800b41a:	601a      	str	r2, [r3, #0]
 800b41c:	e001      	b.n	800b422 <tcp_process+0x4e2>
 800b41e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b420:	62da      	str	r2, [r3, #44]	; 0x2c
 800b422:	4b3f      	ldr	r3, [pc, #252]	; (800b520 <tcp_process+0x5e0>)
 800b424:	2201      	movs	r2, #1
 800b426:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b428:	230a      	movs	r3, #10
 800b42a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b42e:	4b3d      	ldr	r3, [pc, #244]	; (800b524 <tcp_process+0x5e4>)
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	62e2      	str	r2, [r4, #44]	; 0x2c
 800b434:	601c      	str	r4, [r3, #0]
 800b436:	f001 fcc5 	bl	800cdc4 <tcp_timer_needed>
  return ERR_OK;
 800b43a:	2500      	movs	r5, #0
 800b43c:	e5ac      	b.n	800af98 <tcp_process+0x58>
      tcp_receive(pcb);
 800b43e:	4620      	mov	r0, r4
 800b440:	f7ff f89a 	bl	800a578 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b444:	4b33      	ldr	r3, [pc, #204]	; (800b514 <tcp_process+0x5d4>)
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	f013 0f10 	tst.w	r3, #16
 800b44c:	d051      	beq.n	800b4f2 <tcp_process+0x5b2>
 800b44e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800b450:	4b31      	ldr	r3, [pc, #196]	; (800b518 <tcp_process+0x5d8>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	429a      	cmp	r2, r3
 800b456:	d001      	beq.n	800b45c <tcp_process+0x51c>
  return ERR_OK;
 800b458:	2500      	movs	r5, #0
 800b45a:	e59d      	b.n	800af98 <tcp_process+0x58>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b45c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b460:	b10b      	cbz	r3, 800b466 <tcp_process+0x526>
  return ERR_OK;
 800b462:	2500      	movs	r5, #0
 800b464:	e598      	b.n	800af98 <tcp_process+0x58>
        tcp_pcb_purge(pcb);
 800b466:	4620      	mov	r0, r4
 800b468:	f7fd feee 	bl	8009248 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b46c:	4b2b      	ldr	r3, [pc, #172]	; (800b51c <tcp_process+0x5dc>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	429c      	cmp	r4, r3
 800b472:	d005      	beq.n	800b480 <tcp_process+0x540>
 800b474:	b153      	cbz	r3, 800b48c <tcp_process+0x54c>
 800b476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b478:	4294      	cmp	r4, r2
 800b47a:	d005      	beq.n	800b488 <tcp_process+0x548>
 800b47c:	4613      	mov	r3, r2
 800b47e:	e7f9      	b.n	800b474 <tcp_process+0x534>
 800b480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b482:	4b26      	ldr	r3, [pc, #152]	; (800b51c <tcp_process+0x5dc>)
 800b484:	601a      	str	r2, [r3, #0]
 800b486:	e001      	b.n	800b48c <tcp_process+0x54c>
 800b488:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b48a:	62da      	str	r2, [r3, #44]	; 0x2c
 800b48c:	4b24      	ldr	r3, [pc, #144]	; (800b520 <tcp_process+0x5e0>)
 800b48e:	2201      	movs	r2, #1
 800b490:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b492:	230a      	movs	r3, #10
 800b494:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b498:	4b22      	ldr	r3, [pc, #136]	; (800b524 <tcp_process+0x5e4>)
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	62e2      	str	r2, [r4, #44]	; 0x2c
 800b49e:	601c      	str	r4, [r3, #0]
 800b4a0:	f001 fc90 	bl	800cdc4 <tcp_timer_needed>
  return ERR_OK;
 800b4a4:	2500      	movs	r5, #0
 800b4a6:	e577      	b.n	800af98 <tcp_process+0x58>
      tcp_receive(pcb);
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	f7ff f865 	bl	800a578 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b4ae:	4b19      	ldr	r3, [pc, #100]	; (800b514 <tcp_process+0x5d4>)
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	f013 0f10 	tst.w	r3, #16
 800b4b6:	d01e      	beq.n	800b4f6 <tcp_process+0x5b6>
 800b4b8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800b4ba:	4b17      	ldr	r3, [pc, #92]	; (800b518 <tcp_process+0x5d8>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d001      	beq.n	800b4c6 <tcp_process+0x586>
  return ERR_OK;
 800b4c2:	2500      	movs	r5, #0
 800b4c4:	e568      	b.n	800af98 <tcp_process+0x58>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b4c6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b4ca:	b10b      	cbz	r3, 800b4d0 <tcp_process+0x590>
  return ERR_OK;
 800b4cc:	2500      	movs	r5, #0
 800b4ce:	e563      	b.n	800af98 <tcp_process+0x58>
        recv_flags |= TF_CLOSED;
 800b4d0:	4a0e      	ldr	r2, [pc, #56]	; (800b50c <tcp_process+0x5cc>)
 800b4d2:	7813      	ldrb	r3, [r2, #0]
 800b4d4:	f043 0310 	orr.w	r3, r3, #16
 800b4d8:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 800b4da:	2500      	movs	r5, #0
 800b4dc:	e55c      	b.n	800af98 <tcp_process+0x58>
      return ERR_OK;
 800b4de:	2500      	movs	r5, #0
 800b4e0:	e55a      	b.n	800af98 <tcp_process+0x58>
  return ERR_OK;
 800b4e2:	2500      	movs	r5, #0
 800b4e4:	e558      	b.n	800af98 <tcp_process+0x58>
 800b4e6:	2500      	movs	r5, #0
 800b4e8:	e556      	b.n	800af98 <tcp_process+0x58>
 800b4ea:	2500      	movs	r5, #0
 800b4ec:	e554      	b.n	800af98 <tcp_process+0x58>
 800b4ee:	2500      	movs	r5, #0
 800b4f0:	e552      	b.n	800af98 <tcp_process+0x58>
 800b4f2:	2500      	movs	r5, #0
 800b4f4:	e550      	b.n	800af98 <tcp_process+0x58>
 800b4f6:	2500      	movs	r5, #0
 800b4f8:	e54e      	b.n	800af98 <tcp_process+0x58>
 800b4fa:	bf00      	nop
 800b4fc:	08016f10 	.word	0x08016f10
 800b500:	08016fc8 	.word	0x08016fc8
 800b504:	08015608 	.word	0x08015608
 800b508:	2000174c 	.word	0x2000174c
 800b50c:	20001754 	.word	0x20001754
 800b510:	20001758 	.word	0x20001758
 800b514:	20001734 	.word	0x20001734
 800b518:	20001730 	.word	0x20001730
 800b51c:	20008c44 	.word	0x20008c44
 800b520:	20008c40 	.word	0x20008c40
 800b524:	20008c54 	.word	0x20008c54

0800b528 <tcp_input>:
{
 800b528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b52a:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b52c:	4605      	mov	r5, r0
 800b52e:	2800      	cmp	r0, #0
 800b530:	d05c      	beq.n	800b5ec <tcp_input+0xc4>
  tcphdr = (struct tcp_hdr *)p->payload;
 800b532:	686a      	ldr	r2, [r5, #4]
 800b534:	4b7a      	ldr	r3, [pc, #488]	; (800b720 <tcp_input+0x1f8>)
 800b536:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 800b538:	896b      	ldrh	r3, [r5, #10]
 800b53a:	2b13      	cmp	r3, #19
 800b53c:	d964      	bls.n	800b608 <tcp_input+0xe0>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b53e:	4b79      	ldr	r3, [pc, #484]	; (800b724 <tcp_input+0x1fc>)
 800b540:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b544:	2b06      	cmp	r3, #6
 800b546:	d158      	bne.n	800b5fa <tcp_input+0xd2>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b548:	4b76      	ldr	r3, [pc, #472]	; (800b724 <tcp_input+0x1fc>)
 800b54a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b54e:	2b06      	cmp	r3, #6
 800b550:	d05f      	beq.n	800b612 <tcp_input+0xea>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b552:	4b74      	ldr	r3, [pc, #464]	; (800b724 <tcp_input+0x1fc>)
 800b554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b55a:	2be0      	cmp	r3, #224	; 0xe0
 800b55c:	d054      	beq.n	800b608 <tcp_input+0xe0>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b55e:	4b70      	ldr	r3, [pc, #448]	; (800b720 <tcp_input+0x1f8>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	8998      	ldrh	r0, [r3, #12]
 800b564:	f7fb fe42 	bl	80071ec <lwip_htons>
 800b568:	f3c0 3107 	ubfx	r1, r0, #12, #8
 800b56c:	0089      	lsls	r1, r1, #2
 800b56e:	b2c9      	uxtb	r1, r1
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b570:	2913      	cmp	r1, #19
 800b572:	d949      	bls.n	800b608 <tcp_input+0xe0>
 800b574:	b28b      	uxth	r3, r1
 800b576:	892a      	ldrh	r2, [r5, #8]
 800b578:	4293      	cmp	r3, r2
 800b57a:	d845      	bhi.n	800b608 <tcp_input+0xe0>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b57c:	f1a3 0214 	sub.w	r2, r3, #20
 800b580:	b292      	uxth	r2, r2
 800b582:	4869      	ldr	r0, [pc, #420]	; (800b728 <tcp_input+0x200>)
 800b584:	8002      	strh	r2, [r0, #0]
  tcphdr_opt2 = NULL;
 800b586:	4869      	ldr	r0, [pc, #420]	; (800b72c <tcp_input+0x204>)
 800b588:	2400      	movs	r4, #0
 800b58a:	6004      	str	r4, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 800b58c:	8968      	ldrh	r0, [r5, #10]
 800b58e:	4283      	cmp	r3, r0
 800b590:	d945      	bls.n	800b61e <tcp_input+0xf6>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b592:	682b      	ldr	r3, [r5, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d07d      	beq.n	800b694 <tcp_input+0x16c>
    pbuf_remove_header(p, TCP_HLEN);
 800b598:	2114      	movs	r1, #20
 800b59a:	4628      	mov	r0, r5
 800b59c:	f7fd f87e 	bl	800869c <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800b5a0:	8969      	ldrh	r1, [r5, #10]
 800b5a2:	4b63      	ldr	r3, [pc, #396]	; (800b730 <tcp_input+0x208>)
 800b5a4:	8019      	strh	r1, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b5a6:	4b60      	ldr	r3, [pc, #384]	; (800b728 <tcp_input+0x200>)
 800b5a8:	881c      	ldrh	r4, [r3, #0]
 800b5aa:	1a64      	subs	r4, r4, r1
 800b5ac:	b2a4      	uxth	r4, r4
    pbuf_remove_header(p, tcphdr_opt1len);
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	f7fd f874 	bl	800869c <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800b5b4:	6828      	ldr	r0, [r5, #0]
 800b5b6:	8943      	ldrh	r3, [r0, #10]
 800b5b8:	42a3      	cmp	r3, r4
 800b5ba:	d325      	bcc.n	800b608 <tcp_input+0xe0>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b5bc:	6842      	ldr	r2, [r0, #4]
 800b5be:	4b5b      	ldr	r3, [pc, #364]	; (800b72c <tcp_input+0x204>)
 800b5c0:	601a      	str	r2, [r3, #0]
    pbuf_remove_header(p->next, opt2len);
 800b5c2:	4621      	mov	r1, r4
 800b5c4:	f7fd f86a 	bl	800869c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b5c8:	892b      	ldrh	r3, [r5, #8]
 800b5ca:	1b1c      	subs	r4, r3, r4
 800b5cc:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b5ce:	896b      	ldrh	r3, [r5, #10]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d166      	bne.n	800b6a2 <tcp_input+0x17a>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b5d4:	892a      	ldrh	r2, [r5, #8]
 800b5d6:	682b      	ldr	r3, [r5, #0]
 800b5d8:	891b      	ldrh	r3, [r3, #8]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d024      	beq.n	800b628 <tcp_input+0x100>
 800b5de:	4b55      	ldr	r3, [pc, #340]	; (800b734 <tcp_input+0x20c>)
 800b5e0:	22e0      	movs	r2, #224	; 0xe0
 800b5e2:	4955      	ldr	r1, [pc, #340]	; (800b738 <tcp_input+0x210>)
 800b5e4:	4855      	ldr	r0, [pc, #340]	; (800b73c <tcp_input+0x214>)
 800b5e6:	f009 f805 	bl	80145f4 <iprintf>
 800b5ea:	e01d      	b.n	800b628 <tcp_input+0x100>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b5ec:	4b51      	ldr	r3, [pc, #324]	; (800b734 <tcp_input+0x20c>)
 800b5ee:	2283      	movs	r2, #131	; 0x83
 800b5f0:	4953      	ldr	r1, [pc, #332]	; (800b740 <tcp_input+0x218>)
 800b5f2:	4852      	ldr	r0, [pc, #328]	; (800b73c <tcp_input+0x214>)
 800b5f4:	f008 fffe 	bl	80145f4 <iprintf>
 800b5f8:	e79b      	b.n	800b532 <tcp_input+0xa>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b5fa:	4b4a      	ldr	r3, [pc, #296]	; (800b724 <tcp_input+0x1fc>)
 800b5fc:	6819      	ldr	r1, [r3, #0]
 800b5fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b600:	f004 ff02 	bl	8010408 <ip4_addr_isbroadcast_u32>
 800b604:	2800      	cmp	r0, #0
 800b606:	d09f      	beq.n	800b548 <tcp_input+0x20>
  pbuf_free(p);
 800b608:	4628      	mov	r0, r5
 800b60a:	f7fd f88d 	bl	8008728 <pbuf_free>
}
 800b60e:	b005      	add	sp, #20
 800b610:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b612:	4b44      	ldr	r3, [pc, #272]	; (800b724 <tcp_input+0x1fc>)
 800b614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b618:	2bff      	cmp	r3, #255	; 0xff
 800b61a:	d1a0      	bne.n	800b55e <tcp_input+0x36>
 800b61c:	e7f4      	b.n	800b608 <tcp_input+0xe0>
    tcphdr_opt1len = tcphdr_optlen;
 800b61e:	4b44      	ldr	r3, [pc, #272]	; (800b730 <tcp_input+0x208>)
 800b620:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b622:	4628      	mov	r0, r5
 800b624:	f7fd f83a 	bl	800869c <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b628:	4c3d      	ldr	r4, [pc, #244]	; (800b720 <tcp_input+0x1f8>)
 800b62a:	6826      	ldr	r6, [r4, #0]
 800b62c:	8830      	ldrh	r0, [r6, #0]
 800b62e:	f7fb fddd 	bl	80071ec <lwip_htons>
 800b632:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b634:	6826      	ldr	r6, [r4, #0]
 800b636:	8870      	ldrh	r0, [r6, #2]
 800b638:	f7fb fdd8 	bl	80071ec <lwip_htons>
 800b63c:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b63e:	6826      	ldr	r6, [r4, #0]
 800b640:	6870      	ldr	r0, [r6, #4]
 800b642:	f7fb fdd8 	bl	80071f6 <lwip_htonl>
 800b646:	6070      	str	r0, [r6, #4]
 800b648:	4b3e      	ldr	r3, [pc, #248]	; (800b744 <tcp_input+0x21c>)
 800b64a:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b64c:	6826      	ldr	r6, [r4, #0]
 800b64e:	68b0      	ldr	r0, [r6, #8]
 800b650:	f7fb fdd1 	bl	80071f6 <lwip_htonl>
 800b654:	60b0      	str	r0, [r6, #8]
 800b656:	4b3c      	ldr	r3, [pc, #240]	; (800b748 <tcp_input+0x220>)
 800b658:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b65a:	6826      	ldr	r6, [r4, #0]
 800b65c:	89f0      	ldrh	r0, [r6, #14]
 800b65e:	f7fb fdc5 	bl	80071ec <lwip_htons>
 800b662:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 800b664:	6823      	ldr	r3, [r4, #0]
 800b666:	8998      	ldrh	r0, [r3, #12]
 800b668:	f7fb fdc0 	bl	80071ec <lwip_htons>
 800b66c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800b670:	4b36      	ldr	r3, [pc, #216]	; (800b74c <tcp_input+0x224>)
 800b672:	7018      	strb	r0, [r3, #0]
  tcplen = p->tot_len;
 800b674:	892b      	ldrh	r3, [r5, #8]
 800b676:	4a36      	ldr	r2, [pc, #216]	; (800b750 <tcp_input+0x228>)
 800b678:	8013      	strh	r3, [r2, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b67a:	f010 0f03 	tst.w	r0, #3
 800b67e:	d005      	beq.n	800b68c <tcp_input+0x164>
    tcplen++;
 800b680:	1c5a      	adds	r2, r3, #1
 800b682:	b292      	uxth	r2, r2
 800b684:	4932      	ldr	r1, [pc, #200]	; (800b750 <tcp_input+0x228>)
 800b686:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 800b688:	4293      	cmp	r3, r2
 800b68a:	d8bd      	bhi.n	800b608 <tcp_input+0xe0>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b68c:	4b31      	ldr	r3, [pc, #196]	; (800b754 <tcp_input+0x22c>)
 800b68e:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 800b690:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b692:	e02a      	b.n	800b6ea <tcp_input+0x1c2>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b694:	4b27      	ldr	r3, [pc, #156]	; (800b734 <tcp_input+0x20c>)
 800b696:	22c2      	movs	r2, #194	; 0xc2
 800b698:	492f      	ldr	r1, [pc, #188]	; (800b758 <tcp_input+0x230>)
 800b69a:	4828      	ldr	r0, [pc, #160]	; (800b73c <tcp_input+0x214>)
 800b69c:	f008 ffaa 	bl	80145f4 <iprintf>
 800b6a0:	e77a      	b.n	800b598 <tcp_input+0x70>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b6a2:	4b24      	ldr	r3, [pc, #144]	; (800b734 <tcp_input+0x20c>)
 800b6a4:	22df      	movs	r2, #223	; 0xdf
 800b6a6:	492d      	ldr	r1, [pc, #180]	; (800b75c <tcp_input+0x234>)
 800b6a8:	4824      	ldr	r0, [pc, #144]	; (800b73c <tcp_input+0x214>)
 800b6aa:	f008 ffa3 	bl	80145f4 <iprintf>
 800b6ae:	e791      	b.n	800b5d4 <tcp_input+0xac>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b6b0:	4b20      	ldr	r3, [pc, #128]	; (800b734 <tcp_input+0x20c>)
 800b6b2:	22fb      	movs	r2, #251	; 0xfb
 800b6b4:	492a      	ldr	r1, [pc, #168]	; (800b760 <tcp_input+0x238>)
 800b6b6:	4821      	ldr	r0, [pc, #132]	; (800b73c <tcp_input+0x214>)
 800b6b8:	f008 ff9c 	bl	80145f4 <iprintf>
 800b6bc:	e01b      	b.n	800b6f6 <tcp_input+0x1ce>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b6be:	4b1d      	ldr	r3, [pc, #116]	; (800b734 <tcp_input+0x20c>)
 800b6c0:	22fc      	movs	r2, #252	; 0xfc
 800b6c2:	4928      	ldr	r1, [pc, #160]	; (800b764 <tcp_input+0x23c>)
 800b6c4:	481d      	ldr	r0, [pc, #116]	; (800b73c <tcp_input+0x214>)
 800b6c6:	f008 ff95 	bl	80145f4 <iprintf>
 800b6ca:	e018      	b.n	800b6fe <tcp_input+0x1d6>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b6cc:	4b19      	ldr	r3, [pc, #100]	; (800b734 <tcp_input+0x20c>)
 800b6ce:	22fd      	movs	r2, #253	; 0xfd
 800b6d0:	4925      	ldr	r1, [pc, #148]	; (800b768 <tcp_input+0x240>)
 800b6d2:	481a      	ldr	r0, [pc, #104]	; (800b73c <tcp_input+0x214>)
 800b6d4:	f008 ff8e 	bl	80145f4 <iprintf>
 800b6d8:	e015      	b.n	800b706 <tcp_input+0x1de>
    if (pcb->remote_port == tcphdr->src &&
 800b6da:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 800b6dc:	4b10      	ldr	r3, [pc, #64]	; (800b720 <tcp_input+0x1f8>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	881a      	ldrh	r2, [r3, #0]
 800b6e2:	4291      	cmp	r1, r2
 800b6e4:	d042      	beq.n	800b76c <tcp_input+0x244>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6e6:	4626      	mov	r6, r4
 800b6e8:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800b6ea:	2c00      	cmp	r4, #0
 800b6ec:	d074      	beq.n	800b7d8 <tcp_input+0x2b0>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b6ee:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d0dc      	beq.n	800b6b0 <tcp_input+0x188>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b6f6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800b6fa:	2b0a      	cmp	r3, #10
 800b6fc:	d0df      	beq.n	800b6be <tcp_input+0x196>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b6fe:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800b702:	2b01      	cmp	r3, #1
 800b704:	d0e2      	beq.n	800b6cc <tcp_input+0x1a4>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b706:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800b70a:	2a00      	cmp	r2, #0
 800b70c:	d0e5      	beq.n	800b6da <tcp_input+0x1b2>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b70e:	4b05      	ldr	r3, [pc, #20]	; (800b724 <tcp_input+0x1fc>)
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800b716:	3301      	adds	r3, #1
 800b718:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d0dd      	beq.n	800b6da <tcp_input+0x1b2>
 800b71e:	e7e2      	b.n	800b6e6 <tcp_input+0x1be>
 800b720:	20001760 	.word	0x20001760
 800b724:	20004b84 	.word	0x20004b84
 800b728:	2000176c 	.word	0x2000176c
 800b72c:	20001768 	.word	0x20001768
 800b730:	20001764 	.word	0x20001764
 800b734:	08016f10 	.word	0x08016f10
 800b738:	08016d60 	.word	0x08016d60
 800b73c:	08015608 	.word	0x08015608
 800b740:	08016d2c 	.word	0x08016d2c
 800b744:	20001758 	.word	0x20001758
 800b748:	20001730 	.word	0x20001730
 800b74c:	20001734 	.word	0x20001734
 800b750:	2000176e 	.word	0x2000176e
 800b754:	20008c44 	.word	0x20008c44
 800b758:	08016d44 	.word	0x08016d44
 800b75c:	08016d54 	.word	0x08016d54
 800b760:	08016d80 	.word	0x08016d80
 800b764:	08016da8 	.word	0x08016da8
 800b768:	08016dd4 	.word	0x08016dd4
        pcb->local_port == tcphdr->dest &&
 800b76c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800b76e:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 800b770:	429a      	cmp	r2, r3
 800b772:	d1b8      	bne.n	800b6e6 <tcp_input+0x1be>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b774:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800b778:	4a9a      	ldr	r2, [pc, #616]	; (800b9e4 <tcp_input+0x4bc>)
 800b77a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
        pcb->local_port == tcphdr->dest &&
 800b77e:	4293      	cmp	r3, r2
 800b780:	d1b1      	bne.n	800b6e6 <tcp_input+0x1be>
 800b782:	2b06      	cmp	r3, #6
 800b784:	d070      	beq.n	800b868 <tcp_input+0x340>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b786:	6963      	ldr	r3, [r4, #20]
 800b788:	4a96      	ldr	r2, [pc, #600]	; (800b9e4 <tcp_input+0x4bc>)
 800b78a:	6952      	ldr	r2, [r2, #20]
        pcb->local_port == tcphdr->dest &&
 800b78c:	4293      	cmp	r3, r2
 800b78e:	bf14      	ite	ne
 800b790:	2300      	movne	r3, #0
 800b792:	2301      	moveq	r3, #1
 800b794:	2b00      	cmp	r3, #0
 800b796:	d0a6      	beq.n	800b6e6 <tcp_input+0x1be>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b798:	7c23      	ldrb	r3, [r4, #16]
 800b79a:	4a92      	ldr	r2, [pc, #584]	; (800b9e4 <tcp_input+0x4bc>)
 800b79c:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d1a0      	bne.n	800b6e6 <tcp_input+0x1be>
 800b7a4:	2b06      	cmp	r3, #6
 800b7a6:	d07d      	beq.n	800b8a4 <tcp_input+0x37c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b7a8:	6823      	ldr	r3, [r4, #0]
 800b7aa:	4a8e      	ldr	r2, [pc, #568]	; (800b9e4 <tcp_input+0x4bc>)
 800b7ac:	6a92      	ldr	r2, [r2, #40]	; 0x28
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	bf14      	ite	ne
 800b7b2:	2300      	movne	r3, #0
 800b7b4:	2301      	moveq	r3, #1
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d095      	beq.n	800b6e6 <tcp_input+0x1be>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b7ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b7bc:	429c      	cmp	r4, r3
 800b7be:	f000 808f 	beq.w	800b8e0 <tcp_input+0x3b8>
      if (prev != NULL) {
 800b7c2:	b12e      	cbz	r6, 800b7d0 <tcp_input+0x2a8>
        prev->next = pcb->next;
 800b7c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b7c6:	62f3      	str	r3, [r6, #44]	; 0x2c
        pcb->next = tcp_active_pcbs;
 800b7c8:	4b87      	ldr	r3, [pc, #540]	; (800b9e8 <tcp_input+0x4c0>)
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	62e2      	str	r2, [r4, #44]	; 0x2c
        tcp_active_pcbs = pcb;
 800b7ce:	601c      	str	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b7d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b7d2:	429c      	cmp	r4, r3
 800b7d4:	f000 808c 	beq.w	800b8f0 <tcp_input+0x3c8>
  if (pcb == NULL) {
 800b7d8:	2c00      	cmp	r4, #0
 800b7da:	f000 8091 	beq.w	800b900 <tcp_input+0x3d8>
  if (pcb != NULL) {
 800b7de:	2c00      	cmp	r4, #0
 800b7e0:	f000 826a 	beq.w	800bcb8 <tcp_input+0x790>
    inseg.next = NULL;
 800b7e4:	4a81      	ldr	r2, [pc, #516]	; (800b9ec <tcp_input+0x4c4>)
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 800b7ea:	8929      	ldrh	r1, [r5, #8]
 800b7ec:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 800b7ee:	6055      	str	r5, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b7f0:	497f      	ldr	r1, [pc, #508]	; (800b9f0 <tcp_input+0x4c8>)
 800b7f2:	6809      	ldr	r1, [r1, #0]
 800b7f4:	6111      	str	r1, [r2, #16]
    recv_data = NULL;
 800b7f6:	4a7f      	ldr	r2, [pc, #508]	; (800b9f4 <tcp_input+0x4cc>)
 800b7f8:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 800b7fa:	4a7f      	ldr	r2, [pc, #508]	; (800b9f8 <tcp_input+0x4d0>)
 800b7fc:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 800b7fe:	4a7f      	ldr	r2, [pc, #508]	; (800b9fc <tcp_input+0x4d4>)
 800b800:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 800b802:	4b7f      	ldr	r3, [pc, #508]	; (800ba00 <tcp_input+0x4d8>)
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	f013 0f08 	tst.w	r3, #8
 800b80a:	d003      	beq.n	800b814 <tcp_input+0x2ec>
      p->flags |= PBUF_FLAG_PUSH;
 800b80c:	7b6b      	ldrb	r3, [r5, #13]
 800b80e:	f043 0301 	orr.w	r3, r3, #1
 800b812:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 800b814:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f000 81a3 	beq.w	800bb64 <tcp_input+0x63c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b81e:	4620      	mov	r0, r4
 800b820:	f7fe f8fa 	bl	8009a18 <tcp_process_refused_data>
 800b824:	f110 0f0d 	cmn.w	r0, #13
 800b828:	d009      	beq.n	800b83e <tcp_input+0x316>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b82a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b82e:	2b00      	cmp	r3, #0
 800b830:	f000 8198 	beq.w	800bb64 <tcp_input+0x63c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b834:	4b73      	ldr	r3, [pc, #460]	; (800ba04 <tcp_input+0x4dc>)
 800b836:	881b      	ldrh	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f000 8193 	beq.w	800bb64 <tcp_input+0x63c>
        if (pcb->rcv_ann_wnd == 0) {
 800b83e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800b842:	2b00      	cmp	r3, #0
 800b844:	f000 818a 	beq.w	800bb5c <tcp_input+0x634>
    tcp_input_pcb = NULL;
 800b848:	2300      	movs	r3, #0
 800b84a:	4a6f      	ldr	r2, [pc, #444]	; (800ba08 <tcp_input+0x4e0>)
 800b84c:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 800b84e:	4a69      	ldr	r2, [pc, #420]	; (800b9f4 <tcp_input+0x4cc>)
 800b850:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL) {
 800b852:	4b66      	ldr	r3, [pc, #408]	; (800b9ec <tcp_input+0x4c4>)
 800b854:	6858      	ldr	r0, [r3, #4]
 800b856:	2800      	cmp	r0, #0
 800b858:	f43f aed9 	beq.w	800b60e <tcp_input+0xe6>
      pbuf_free(inseg.p);
 800b85c:	f7fc ff64 	bl	8008728 <pbuf_free>
      inseg.p = NULL;
 800b860:	4b62      	ldr	r3, [pc, #392]	; (800b9ec <tcp_input+0x4c4>)
 800b862:	2200      	movs	r2, #0
 800b864:	605a      	str	r2, [r3, #4]
 800b866:	e6d2      	b.n	800b60e <tcp_input+0xe6>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b868:	6962      	ldr	r2, [r4, #20]
 800b86a:	4b5e      	ldr	r3, [pc, #376]	; (800b9e4 <tcp_input+0x4bc>)
 800b86c:	695b      	ldr	r3, [r3, #20]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d001      	beq.n	800b876 <tcp_input+0x34e>
 800b872:	2300      	movs	r3, #0
 800b874:	e78e      	b.n	800b794 <tcp_input+0x26c>
 800b876:	69a2      	ldr	r2, [r4, #24]
 800b878:	4b5a      	ldr	r3, [pc, #360]	; (800b9e4 <tcp_input+0x4bc>)
 800b87a:	699b      	ldr	r3, [r3, #24]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d001      	beq.n	800b884 <tcp_input+0x35c>
 800b880:	2300      	movs	r3, #0
 800b882:	e787      	b.n	800b794 <tcp_input+0x26c>
 800b884:	69e2      	ldr	r2, [r4, #28]
 800b886:	4b57      	ldr	r3, [pc, #348]	; (800b9e4 <tcp_input+0x4bc>)
 800b888:	69db      	ldr	r3, [r3, #28]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d001      	beq.n	800b892 <tcp_input+0x36a>
 800b88e:	2300      	movs	r3, #0
 800b890:	e780      	b.n	800b794 <tcp_input+0x26c>
 800b892:	6a22      	ldr	r2, [r4, #32]
 800b894:	4b53      	ldr	r3, [pc, #332]	; (800b9e4 <tcp_input+0x4bc>)
 800b896:	6a1b      	ldr	r3, [r3, #32]
 800b898:	429a      	cmp	r2, r3
 800b89a:	d001      	beq.n	800b8a0 <tcp_input+0x378>
 800b89c:	2300      	movs	r3, #0
 800b89e:	e779      	b.n	800b794 <tcp_input+0x26c>
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	e777      	b.n	800b794 <tcp_input+0x26c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b8a4:	6822      	ldr	r2, [r4, #0]
 800b8a6:	4b4f      	ldr	r3, [pc, #316]	; (800b9e4 <tcp_input+0x4bc>)
 800b8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d001      	beq.n	800b8b2 <tcp_input+0x38a>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	e781      	b.n	800b7b6 <tcp_input+0x28e>
 800b8b2:	6862      	ldr	r2, [r4, #4]
 800b8b4:	4b4b      	ldr	r3, [pc, #300]	; (800b9e4 <tcp_input+0x4bc>)
 800b8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d10d      	bne.n	800b8d8 <tcp_input+0x3b0>
 800b8bc:	68a2      	ldr	r2, [r4, #8]
 800b8be:	4b49      	ldr	r3, [pc, #292]	; (800b9e4 <tcp_input+0x4bc>)
 800b8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d001      	beq.n	800b8ca <tcp_input+0x3a2>
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	e775      	b.n	800b7b6 <tcp_input+0x28e>
 800b8ca:	68e2      	ldr	r2, [r4, #12]
 800b8cc:	4b45      	ldr	r3, [pc, #276]	; (800b9e4 <tcp_input+0x4bc>)
 800b8ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d003      	beq.n	800b8dc <tcp_input+0x3b4>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	e76e      	b.n	800b7b6 <tcp_input+0x28e>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	e76c      	b.n	800b7b6 <tcp_input+0x28e>
 800b8dc:	2301      	movs	r3, #1
 800b8de:	e76a      	b.n	800b7b6 <tcp_input+0x28e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b8e0:	4b4a      	ldr	r3, [pc, #296]	; (800ba0c <tcp_input+0x4e4>)
 800b8e2:	f240 120d 	movw	r2, #269	; 0x10d
 800b8e6:	494a      	ldr	r1, [pc, #296]	; (800ba10 <tcp_input+0x4e8>)
 800b8e8:	484a      	ldr	r0, [pc, #296]	; (800ba14 <tcp_input+0x4ec>)
 800b8ea:	f008 fe83 	bl	80145f4 <iprintf>
 800b8ee:	e768      	b.n	800b7c2 <tcp_input+0x29a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b8f0:	4b46      	ldr	r3, [pc, #280]	; (800ba0c <tcp_input+0x4e4>)
 800b8f2:	f240 1215 	movw	r2, #277	; 0x115
 800b8f6:	4948      	ldr	r1, [pc, #288]	; (800ba18 <tcp_input+0x4f0>)
 800b8f8:	4846      	ldr	r0, [pc, #280]	; (800ba14 <tcp_input+0x4ec>)
 800b8fa:	f008 fe7b 	bl	80145f4 <iprintf>
 800b8fe:	e76b      	b.n	800b7d8 <tcp_input+0x2b0>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b900:	4b46      	ldr	r3, [pc, #280]	; (800ba1c <tcp_input+0x4f4>)
 800b902:	681c      	ldr	r4, [r3, #0]
 800b904:	e00e      	b.n	800b924 <tcp_input+0x3fc>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b906:	4b41      	ldr	r3, [pc, #260]	; (800ba0c <tcp_input+0x4e4>)
 800b908:	f240 121f 	movw	r2, #287	; 0x11f
 800b90c:	4944      	ldr	r1, [pc, #272]	; (800ba20 <tcp_input+0x4f8>)
 800b90e:	4841      	ldr	r0, [pc, #260]	; (800ba14 <tcp_input+0x4ec>)
 800b910:	f008 fe70 	bl	80145f4 <iprintf>
 800b914:	e00d      	b.n	800b932 <tcp_input+0x40a>
      if (pcb->remote_port == tcphdr->src &&
 800b916:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 800b918:	4b35      	ldr	r3, [pc, #212]	; (800b9f0 <tcp_input+0x4c8>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	881a      	ldrh	r2, [r3, #0]
 800b91e:	4291      	cmp	r1, r2
 800b920:	d014      	beq.n	800b94c <tcp_input+0x424>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b922:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800b924:	2c00      	cmp	r4, #0
 800b926:	f000 809b 	beq.w	800ba60 <tcp_input+0x538>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b92a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800b92e:	2b0a      	cmp	r3, #10
 800b930:	d1e9      	bne.n	800b906 <tcp_input+0x3de>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b932:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800b936:	2a00      	cmp	r2, #0
 800b938:	d0ed      	beq.n	800b916 <tcp_input+0x3ee>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b93a:	4b2a      	ldr	r3, [pc, #168]	; (800b9e4 <tcp_input+0x4bc>)
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800b942:	3301      	adds	r3, #1
 800b944:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b946:	429a      	cmp	r2, r3
 800b948:	d0e5      	beq.n	800b916 <tcp_input+0x3ee>
 800b94a:	e7ea      	b.n	800b922 <tcp_input+0x3fa>
          pcb->local_port == tcphdr->dest &&
 800b94c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800b94e:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800b950:	429a      	cmp	r2, r3
 800b952:	d1e6      	bne.n	800b922 <tcp_input+0x3fa>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b954:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800b958:	4a22      	ldr	r2, [pc, #136]	; (800b9e4 <tcp_input+0x4bc>)
 800b95a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
          pcb->local_port == tcphdr->dest &&
 800b95e:	4293      	cmp	r3, r2
 800b960:	d1df      	bne.n	800b922 <tcp_input+0x3fa>
 800b962:	2b06      	cmp	r3, #6
 800b964:	d020      	beq.n	800b9a8 <tcp_input+0x480>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b966:	6963      	ldr	r3, [r4, #20]
 800b968:	4a1e      	ldr	r2, [pc, #120]	; (800b9e4 <tcp_input+0x4bc>)
 800b96a:	6952      	ldr	r2, [r2, #20]
          pcb->local_port == tcphdr->dest &&
 800b96c:	4293      	cmp	r3, r2
 800b96e:	bf14      	ite	ne
 800b970:	2300      	movne	r3, #0
 800b972:	2301      	moveq	r3, #1
 800b974:	2b00      	cmp	r3, #0
 800b976:	d0d4      	beq.n	800b922 <tcp_input+0x3fa>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b978:	7c23      	ldrb	r3, [r4, #16]
 800b97a:	4a1a      	ldr	r2, [pc, #104]	; (800b9e4 <tcp_input+0x4bc>)
 800b97c:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b980:	4293      	cmp	r3, r2
 800b982:	d1ce      	bne.n	800b922 <tcp_input+0x3fa>
 800b984:	2b06      	cmp	r3, #6
 800b986:	d04d      	beq.n	800ba24 <tcp_input+0x4fc>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b988:	6823      	ldr	r3, [r4, #0]
 800b98a:	4a16      	ldr	r2, [pc, #88]	; (800b9e4 <tcp_input+0x4bc>)
 800b98c:	6a92      	ldr	r2, [r2, #40]	; 0x28
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b98e:	4293      	cmp	r3, r2
 800b990:	bf14      	ite	ne
 800b992:	2300      	movne	r3, #0
 800b994:	2301      	moveq	r3, #1
 800b996:	2b00      	cmp	r3, #0
 800b998:	d0c3      	beq.n	800b922 <tcp_input+0x3fa>
          tcp_timewait_input(pcb);
 800b99a:	4620      	mov	r0, r4
 800b99c:	f7fe fbee 	bl	800a17c <tcp_timewait_input>
        pbuf_free(p);
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	f7fc fec1 	bl	8008728 <pbuf_free>
        return;
 800b9a6:	e632      	b.n	800b60e <tcp_input+0xe6>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b9a8:	6962      	ldr	r2, [r4, #20]
 800b9aa:	4b0e      	ldr	r3, [pc, #56]	; (800b9e4 <tcp_input+0x4bc>)
 800b9ac:	695b      	ldr	r3, [r3, #20]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d001      	beq.n	800b9b6 <tcp_input+0x48e>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	e7de      	b.n	800b974 <tcp_input+0x44c>
 800b9b6:	69a2      	ldr	r2, [r4, #24]
 800b9b8:	4b0a      	ldr	r3, [pc, #40]	; (800b9e4 <tcp_input+0x4bc>)
 800b9ba:	699b      	ldr	r3, [r3, #24]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d001      	beq.n	800b9c4 <tcp_input+0x49c>
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	e7d7      	b.n	800b974 <tcp_input+0x44c>
 800b9c4:	69e2      	ldr	r2, [r4, #28]
 800b9c6:	4b07      	ldr	r3, [pc, #28]	; (800b9e4 <tcp_input+0x4bc>)
 800b9c8:	69db      	ldr	r3, [r3, #28]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d001      	beq.n	800b9d2 <tcp_input+0x4aa>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	e7d0      	b.n	800b974 <tcp_input+0x44c>
 800b9d2:	6a22      	ldr	r2, [r4, #32]
 800b9d4:	4b03      	ldr	r3, [pc, #12]	; (800b9e4 <tcp_input+0x4bc>)
 800b9d6:	6a1b      	ldr	r3, [r3, #32]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d001      	beq.n	800b9e0 <tcp_input+0x4b8>
 800b9dc:	2300      	movs	r3, #0
 800b9de:	e7c9      	b.n	800b974 <tcp_input+0x44c>
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	e7c7      	b.n	800b974 <tcp_input+0x44c>
 800b9e4:	20004b84 	.word	0x20004b84
 800b9e8:	20008c44 	.word	0x20008c44
 800b9ec:	20001738 	.word	0x20001738
 800b9f0:	20001760 	.word	0x20001760
 800b9f4:	20001750 	.word	0x20001750
 800b9f8:	20001754 	.word	0x20001754
 800b9fc:	2000174c 	.word	0x2000174c
 800ba00:	20001734 	.word	0x20001734
 800ba04:	2000176e 	.word	0x2000176e
 800ba08:	20008c58 	.word	0x20008c58
 800ba0c:	08016f10 	.word	0x08016f10
 800ba10:	08016dfc 	.word	0x08016dfc
 800ba14:	08015608 	.word	0x08015608
 800ba18:	08016e28 	.word	0x08016e28
 800ba1c:	20008c54 	.word	0x20008c54
 800ba20:	08016e54 	.word	0x08016e54
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ba24:	6822      	ldr	r2, [r4, #0]
 800ba26:	4b99      	ldr	r3, [pc, #612]	; (800bc8c <tcp_input+0x764>)
 800ba28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d112      	bne.n	800ba54 <tcp_input+0x52c>
 800ba2e:	6862      	ldr	r2, [r4, #4]
 800ba30:	4b96      	ldr	r3, [pc, #600]	; (800bc8c <tcp_input+0x764>)
 800ba32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d001      	beq.n	800ba3c <tcp_input+0x514>
 800ba38:	2300      	movs	r3, #0
 800ba3a:	e7ac      	b.n	800b996 <tcp_input+0x46e>
 800ba3c:	68a2      	ldr	r2, [r4, #8]
 800ba3e:	4b93      	ldr	r3, [pc, #588]	; (800bc8c <tcp_input+0x764>)
 800ba40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d108      	bne.n	800ba58 <tcp_input+0x530>
 800ba46:	68e2      	ldr	r2, [r4, #12]
 800ba48:	4b90      	ldr	r3, [pc, #576]	; (800bc8c <tcp_input+0x764>)
 800ba4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d005      	beq.n	800ba5c <tcp_input+0x534>
 800ba50:	2300      	movs	r3, #0
 800ba52:	e7a0      	b.n	800b996 <tcp_input+0x46e>
 800ba54:	2300      	movs	r3, #0
 800ba56:	e79e      	b.n	800b996 <tcp_input+0x46e>
 800ba58:	2300      	movs	r3, #0
 800ba5a:	e79c      	b.n	800b996 <tcp_input+0x46e>
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e79a      	b.n	800b996 <tcp_input+0x46e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ba60:	4b8b      	ldr	r3, [pc, #556]	; (800bc90 <tcp_input+0x768>)
 800ba62:	681e      	ldr	r6, [r3, #0]
 800ba64:	4630      	mov	r0, r6
    prev = NULL;
 800ba66:	4621      	mov	r1, r4
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ba68:	e007      	b.n	800ba7a <tcp_input+0x552>
      if (lpcb->local_port == tcphdr->dest) {
 800ba6a:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 800ba6c:	4b89      	ldr	r3, [pc, #548]	; (800bc94 <tcp_input+0x76c>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	885b      	ldrh	r3, [r3, #2]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d00f      	beq.n	800ba96 <tcp_input+0x56e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ba76:	4601      	mov	r1, r0
 800ba78:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800ba7a:	b348      	cbz	r0, 800bad0 <tcp_input+0x5a8>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ba7c:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 800ba80:	2a00      	cmp	r2, #0
 800ba82:	d0f2      	beq.n	800ba6a <tcp_input+0x542>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ba84:	4b81      	ldr	r3, [pc, #516]	; (800bc8c <tcp_input+0x764>)
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d0ea      	beq.n	800ba6a <tcp_input+0x542>
 800ba94:	e7ef      	b.n	800ba76 <tcp_input+0x54e>
        if (IP_IS_ANY_TYPE_VAL(lpcb->local_ip)) {
 800ba96:	7c03      	ldrb	r3, [r0, #16]
 800ba98:	2b2e      	cmp	r3, #46	; 0x2e
 800ba9a:	d019      	beq.n	800bad0 <tcp_input+0x5a8>
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
 800ba9c:	4a7b      	ldr	r2, [pc, #492]	; (800bc8c <tcp_input+0x764>)
 800ba9e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d1e7      	bne.n	800ba76 <tcp_input+0x54e>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800baa6:	2b06      	cmp	r3, #6
 800baa8:	d021      	beq.n	800baee <tcp_input+0x5c6>
 800baaa:	6802      	ldr	r2, [r0, #0]
 800baac:	4f77      	ldr	r7, [pc, #476]	; (800bc8c <tcp_input+0x764>)
 800baae:	6abf      	ldr	r7, [r7, #40]	; 0x28
 800bab0:	42ba      	cmp	r2, r7
 800bab2:	bf14      	ite	ne
 800bab4:	2200      	movne	r2, #0
 800bab6:	2201      	moveq	r2, #1
 800bab8:	b952      	cbnz	r2, 800bad0 <tcp_input+0x5a8>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800baba:	b148      	cbz	r0, 800bad0 <tcp_input+0x5a8>
 800babc:	2b06      	cmp	r3, #6
 800babe:	d034      	beq.n	800bb2a <tcp_input+0x602>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	d047      	beq.n	800bb54 <tcp_input+0x62c>
 800bac4:	6803      	ldr	r3, [r0, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d146      	bne.n	800bb58 <tcp_input+0x630>
 800baca:	2301      	movs	r3, #1
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d0d2      	beq.n	800ba76 <tcp_input+0x54e>
    if (lpcb != NULL) {
 800bad0:	2800      	cmp	r0, #0
 800bad2:	f43f ae84 	beq.w	800b7de <tcp_input+0x2b6>
      if (prev != NULL) {
 800bad6:	b121      	cbz	r1, 800bae2 <tcp_input+0x5ba>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bad8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bada:	62cb      	str	r3, [r1, #44]	; 0x2c
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800badc:	62c6      	str	r6, [r0, #44]	; 0x2c
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bade:	4b6c      	ldr	r3, [pc, #432]	; (800bc90 <tcp_input+0x768>)
 800bae0:	6018      	str	r0, [r3, #0]
        tcp_listen_input(lpcb);
 800bae2:	f7fe fba7 	bl	800a234 <tcp_listen_input>
      pbuf_free(p);
 800bae6:	4628      	mov	r0, r5
 800bae8:	f7fc fe1e 	bl	8008728 <pbuf_free>
      return;
 800baec:	e58f      	b.n	800b60e <tcp_input+0xe6>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800baee:	6807      	ldr	r7, [r0, #0]
 800baf0:	4a66      	ldr	r2, [pc, #408]	; (800bc8c <tcp_input+0x764>)
 800baf2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800baf4:	4297      	cmp	r7, r2
 800baf6:	d001      	beq.n	800bafc <tcp_input+0x5d4>
 800baf8:	2200      	movs	r2, #0
 800bafa:	e7dd      	b.n	800bab8 <tcp_input+0x590>
 800bafc:	6847      	ldr	r7, [r0, #4]
 800bafe:	4a63      	ldr	r2, [pc, #396]	; (800bc8c <tcp_input+0x764>)
 800bb00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bb02:	4297      	cmp	r7, r2
 800bb04:	d001      	beq.n	800bb0a <tcp_input+0x5e2>
 800bb06:	2200      	movs	r2, #0
 800bb08:	e7d6      	b.n	800bab8 <tcp_input+0x590>
 800bb0a:	6887      	ldr	r7, [r0, #8]
 800bb0c:	4a5f      	ldr	r2, [pc, #380]	; (800bc8c <tcp_input+0x764>)
 800bb0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bb10:	4297      	cmp	r7, r2
 800bb12:	d001      	beq.n	800bb18 <tcp_input+0x5f0>
 800bb14:	2200      	movs	r2, #0
 800bb16:	e7cf      	b.n	800bab8 <tcp_input+0x590>
 800bb18:	68c7      	ldr	r7, [r0, #12]
 800bb1a:	4a5c      	ldr	r2, [pc, #368]	; (800bc8c <tcp_input+0x764>)
 800bb1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bb1e:	4297      	cmp	r7, r2
 800bb20:	d001      	beq.n	800bb26 <tcp_input+0x5fe>
 800bb22:	2200      	movs	r2, #0
 800bb24:	e7c8      	b.n	800bab8 <tcp_input+0x590>
 800bb26:	2201      	movs	r2, #1
 800bb28:	e7c6      	b.n	800bab8 <tcp_input+0x590>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bb2a:	b148      	cbz	r0, 800bb40 <tcp_input+0x618>
 800bb2c:	6803      	ldr	r3, [r0, #0]
 800bb2e:	b94b      	cbnz	r3, 800bb44 <tcp_input+0x61c>
 800bb30:	6843      	ldr	r3, [r0, #4]
 800bb32:	b94b      	cbnz	r3, 800bb48 <tcp_input+0x620>
 800bb34:	6883      	ldr	r3, [r0, #8]
 800bb36:	b94b      	cbnz	r3, 800bb4c <tcp_input+0x624>
 800bb38:	68c3      	ldr	r3, [r0, #12]
 800bb3a:	b14b      	cbz	r3, 800bb50 <tcp_input+0x628>
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	e7c5      	b.n	800bacc <tcp_input+0x5a4>
 800bb40:	2301      	movs	r3, #1
 800bb42:	e7c3      	b.n	800bacc <tcp_input+0x5a4>
 800bb44:	2300      	movs	r3, #0
 800bb46:	e7c1      	b.n	800bacc <tcp_input+0x5a4>
 800bb48:	2300      	movs	r3, #0
 800bb4a:	e7bf      	b.n	800bacc <tcp_input+0x5a4>
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	e7bd      	b.n	800bacc <tcp_input+0x5a4>
 800bb50:	2301      	movs	r3, #1
 800bb52:	e7bb      	b.n	800bacc <tcp_input+0x5a4>
 800bb54:	2301      	movs	r3, #1
 800bb56:	e7b9      	b.n	800bacc <tcp_input+0x5a4>
 800bb58:	2300      	movs	r3, #0
 800bb5a:	e7b7      	b.n	800bacc <tcp_input+0x5a4>
          tcp_send_empty_ack(pcb);
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	f000 fe07 	bl	800c770 <tcp_send_empty_ack>
 800bb62:	e671      	b.n	800b848 <tcp_input+0x320>
    tcp_input_pcb = pcb;
 800bb64:	4b4c      	ldr	r3, [pc, #304]	; (800bc98 <tcp_input+0x770>)
 800bb66:	601c      	str	r4, [r3, #0]
    err = tcp_process(pcb);
 800bb68:	4620      	mov	r0, r4
 800bb6a:	f7ff f9e9 	bl	800af40 <tcp_process>
    if (err != ERR_ABRT) {
 800bb6e:	f110 0f0d 	cmn.w	r0, #13
 800bb72:	f43f ae69 	beq.w	800b848 <tcp_input+0x320>
      if (recv_flags & TF_RESET) {
 800bb76:	4b49      	ldr	r3, [pc, #292]	; (800bc9c <tcp_input+0x774>)
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	f013 0f08 	tst.w	r3, #8
 800bb7e:	d00e      	beq.n	800bb9e <tcp_input+0x676>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800bb80:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800bb84:	b11b      	cbz	r3, 800bb8e <tcp_input+0x666>
 800bb86:	f06f 010d 	mvn.w	r1, #13
 800bb8a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bb8c:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bb8e:	4621      	mov	r1, r4
 800bb90:	4843      	ldr	r0, [pc, #268]	; (800bca0 <tcp_input+0x778>)
 800bb92:	f7fd fb93 	bl	80092bc <tcp_pcb_remove>
        tcp_free(pcb);
 800bb96:	4620      	mov	r0, r4
 800bb98:	f7fd fa24 	bl	8008fe4 <tcp_free>
 800bb9c:	e654      	b.n	800b848 <tcp_input+0x320>
        if (recv_acked > 0) {
 800bb9e:	4b41      	ldr	r3, [pc, #260]	; (800bca4 <tcp_input+0x77c>)
 800bba0:	881a      	ldrh	r2, [r3, #0]
 800bba2:	b162      	cbz	r2, 800bbbe <tcp_input+0x696>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bba4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800bba8:	b133      	cbz	r3, 800bbb8 <tcp_input+0x690>
 800bbaa:	4621      	mov	r1, r4
 800bbac:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bbae:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800bbb0:	f110 0f0d 	cmn.w	r0, #13
 800bbb4:	f43f ae48 	beq.w	800b848 <tcp_input+0x320>
          recv_acked = 0;
 800bbb8:	4b3a      	ldr	r3, [pc, #232]	; (800bca4 <tcp_input+0x77c>)
 800bbba:	2200      	movs	r2, #0
 800bbbc:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f7fe faac 	bl	800a11c <tcp_input_delayed_close>
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	f47f ae3f 	bne.w	800b848 <tcp_input+0x320>
        if (recv_data != NULL) {
 800bbca:	4b37      	ldr	r3, [pc, #220]	; (800bca8 <tcp_input+0x780>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	b1fb      	cbz	r3, 800bc10 <tcp_input+0x6e8>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800bbd0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800bbd4:	b133      	cbz	r3, 800bbe4 <tcp_input+0x6bc>
 800bbd6:	4b35      	ldr	r3, [pc, #212]	; (800bcac <tcp_input+0x784>)
 800bbd8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bbdc:	4934      	ldr	r1, [pc, #208]	; (800bcb0 <tcp_input+0x788>)
 800bbde:	4835      	ldr	r0, [pc, #212]	; (800bcb4 <tcp_input+0x78c>)
 800bbe0:	f008 fd08 	bl	80145f4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800bbe4:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800bbe6:	f013 0f10 	tst.w	r3, #16
 800bbea:	d12a      	bne.n	800bc42 <tcp_input+0x71a>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bbec:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 800bbf0:	b37d      	cbz	r5, 800bc52 <tcp_input+0x72a>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	4a2c      	ldr	r2, [pc, #176]	; (800bca8 <tcp_input+0x780>)
 800bbf6:	6812      	ldr	r2, [r2, #0]
 800bbf8:	4621      	mov	r1, r4
 800bbfa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bbfc:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 800bbfe:	f110 0f0d 	cmn.w	r0, #13
 800bc02:	f43f ae21 	beq.w	800b848 <tcp_input+0x320>
          if (err != ERR_OK) {
 800bc06:	b118      	cbz	r0, 800bc10 <tcp_input+0x6e8>
            pcb->refused_data = recv_data;
 800bc08:	4b27      	ldr	r3, [pc, #156]	; (800bca8 <tcp_input+0x780>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
        if (recv_flags & TF_GOT_FIN) {
 800bc10:	4b22      	ldr	r3, [pc, #136]	; (800bc9c <tcp_input+0x774>)
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	f013 0f20 	tst.w	r3, #32
 800bc18:	d006      	beq.n	800bc28 <tcp_input+0x700>
          if (pcb->refused_data != NULL) {
 800bc1a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800bc1e:	b303      	cbz	r3, 800bc62 <tcp_input+0x73a>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800bc20:	7b5a      	ldrb	r2, [r3, #13]
 800bc22:	f042 0220 	orr.w	r2, r2, #32
 800bc26:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800bc28:	4b1b      	ldr	r3, [pc, #108]	; (800bc98 <tcp_input+0x770>)
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f7fe fa74 	bl	800a11c <tcp_input_delayed_close>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	f47f ae07 	bne.w	800b848 <tcp_input+0x320>
        tcp_output(pcb);
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	f000 fdd6 	bl	800c7ec <tcp_output>
 800bc40:	e602      	b.n	800b848 <tcp_input+0x320>
            pbuf_free(recv_data);
 800bc42:	4b19      	ldr	r3, [pc, #100]	; (800bca8 <tcp_input+0x780>)
 800bc44:	6818      	ldr	r0, [r3, #0]
 800bc46:	f7fc fd6f 	bl	8008728 <pbuf_free>
            tcp_abort(pcb);
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f7fd fc30 	bl	80094b0 <tcp_abort>
            goto aborted;
 800bc50:	e5fa      	b.n	800b848 <tcp_input+0x320>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bc52:	2300      	movs	r3, #0
 800bc54:	4a14      	ldr	r2, [pc, #80]	; (800bca8 <tcp_input+0x780>)
 800bc56:	6812      	ldr	r2, [r2, #0]
 800bc58:	4621      	mov	r1, r4
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fd feb8 	bl	80099d0 <tcp_recv_null>
 800bc60:	e7cd      	b.n	800bbfe <tcp_input+0x6d6>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bc62:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800bc66:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bc6a:	d002      	beq.n	800bc72 <tcp_input+0x74a>
              pcb->rcv_wnd++;
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
            TCP_EVENT_CLOSED(pcb, err);
 800bc72:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 800bc76:	2d00      	cmp	r5, #0
 800bc78:	d0d6      	beq.n	800bc28 <tcp_input+0x700>
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	4621      	mov	r1, r4
 800bc80:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bc82:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 800bc84:	f110 0f0d 	cmn.w	r0, #13
 800bc88:	d1ce      	bne.n	800bc28 <tcp_input+0x700>
aborted:
 800bc8a:	e5dd      	b.n	800b848 <tcp_input+0x320>
 800bc8c:	20004b84 	.word	0x20004b84
 800bc90:	20008c4c 	.word	0x20008c4c
 800bc94:	20001760 	.word	0x20001760
 800bc98:	20008c58 	.word	0x20008c58
 800bc9c:	20001754 	.word	0x20001754
 800bca0:	20008c44 	.word	0x20008c44
 800bca4:	2000174c 	.word	0x2000174c
 800bca8:	20001750 	.word	0x20001750
 800bcac:	08016f10 	.word	0x08016f10
 800bcb0:	08016e84 	.word	0x08016e84
 800bcb4:	08015608 	.word	0x08015608
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800bcb8:	4b10      	ldr	r3, [pc, #64]	; (800bcfc <tcp_input+0x7d4>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	8998      	ldrh	r0, [r3, #12]
 800bcbe:	f7fb fa95 	bl	80071ec <lwip_htons>
 800bcc2:	f010 0f04 	tst.w	r0, #4
 800bcc6:	d003      	beq.n	800bcd0 <tcp_input+0x7a8>
    pbuf_free(p);
 800bcc8:	4628      	mov	r0, r5
 800bcca:	f7fc fd2d 	bl	8008728 <pbuf_free>
 800bcce:	e49e      	b.n	800b60e <tcp_input+0xe6>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bcd0:	4b0a      	ldr	r3, [pc, #40]	; (800bcfc <tcp_input+0x7d4>)
 800bcd2:	6818      	ldr	r0, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bcd4:	4b0a      	ldr	r3, [pc, #40]	; (800bd00 <tcp_input+0x7d8>)
 800bcd6:	4a0b      	ldr	r2, [pc, #44]	; (800bd04 <tcp_input+0x7dc>)
 800bcd8:	8814      	ldrh	r4, [r2, #0]
 800bcda:	4a0b      	ldr	r2, [pc, #44]	; (800bd08 <tcp_input+0x7e0>)
 800bcdc:	6812      	ldr	r2, [r2, #0]
 800bcde:	490b      	ldr	r1, [pc, #44]	; (800bd0c <tcp_input+0x7e4>)
 800bce0:	6809      	ldr	r1, [r1, #0]
 800bce2:	8806      	ldrh	r6, [r0, #0]
 800bce4:	9602      	str	r6, [sp, #8]
 800bce6:	8840      	ldrh	r0, [r0, #2]
 800bce8:	9001      	str	r0, [sp, #4]
 800bcea:	f1a3 0014 	sub.w	r0, r3, #20
 800bcee:	9000      	str	r0, [sp, #0]
 800bcf0:	4422      	add	r2, r4
 800bcf2:	2000      	movs	r0, #0
 800bcf4:	f000 fcf4 	bl	800c6e0 <tcp_rst>
 800bcf8:	e7e6      	b.n	800bcc8 <tcp_input+0x7a0>
 800bcfa:	bf00      	nop
 800bcfc:	20001760 	.word	0x20001760
 800bd00:	20004bac 	.word	0x20004bac
 800bd04:	2000176e 	.word	0x2000176e
 800bd08:	20001758 	.word	0x20001758
 800bd0c:	20001730 	.word	0x20001730

0800bd10 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800bd10:	4a02      	ldr	r2, [pc, #8]	; (800bd1c <tcp_trigger_input_pcb_close+0xc>)
 800bd12:	7813      	ldrb	r3, [r2, #0]
 800bd14:	f043 0310 	orr.w	r3, r3, #16
 800bd18:	7013      	strb	r3, [r2, #0]
}
 800bd1a:	4770      	bx	lr
 800bd1c:	20001754 	.word	0x20001754

0800bd20 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bd20:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bd22:	4604      	mov	r4, r0
 800bd24:	b128      	cbz	r0, 800bd32 <tcp_output_segment_busy+0x12>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bd26:	6863      	ldr	r3, [r4, #4]
 800bd28:	7b9b      	ldrb	r3, [r3, #14]
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d009      	beq.n	800bd42 <tcp_output_segment_busy+0x22>
    /* other reference found */
    return 1;
 800bd2e:	2001      	movs	r0, #1
  }
  /* no other references found */
  return 0;
}
 800bd30:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bd32:	4b05      	ldr	r3, [pc, #20]	; (800bd48 <tcp_output_segment_busy+0x28>)
 800bd34:	f240 529a 	movw	r2, #1434	; 0x59a
 800bd38:	4904      	ldr	r1, [pc, #16]	; (800bd4c <tcp_output_segment_busy+0x2c>)
 800bd3a:	4805      	ldr	r0, [pc, #20]	; (800bd50 <tcp_output_segment_busy+0x30>)
 800bd3c:	f008 fc5a 	bl	80145f4 <iprintf>
 800bd40:	e7f1      	b.n	800bd26 <tcp_output_segment_busy+0x6>
  return 0;
 800bd42:	2000      	movs	r0, #0
 800bd44:	e7f4      	b.n	800bd30 <tcp_output_segment_busy+0x10>
 800bd46:	bf00      	nop
 800bd48:	080175f0 	.word	0x080175f0
 800bd4c:	08017450 	.word	0x08017450
 800bd50:	08015608 	.word	0x08015608

0800bd54 <tcp_output_fill_options>:
}

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4614      	mov	r4, r2
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800bd58:	460d      	mov	r5, r1
 800bd5a:	b189      	cbz	r1, 800bd80 <tcp_output_fill_options+0x2c>

  tcphdr = (struct tcp_hdr *)p->payload;
 800bd5c:	686b      	ldr	r3, [r5, #4]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800bd5e:	f103 0214 	add.w	r2, r3, #20
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800bd62:	00a4      	lsls	r4, r4, #2
 800bd64:	f004 0404 	and.w	r4, r4, #4
 800bd68:	3414      	adds	r4, #20
 800bd6a:	441c      	add	r4, r3
 800bd6c:	4294      	cmp	r4, r2
 800bd6e:	d006      	beq.n	800bd7e <tcp_output_fill_options+0x2a>
 800bd70:	4b07      	ldr	r3, [pc, #28]	; (800bd90 <tcp_output_fill_options+0x3c>)
 800bd72:	f240 7275 	movw	r2, #1909	; 0x775
 800bd76:	4907      	ldr	r1, [pc, #28]	; (800bd94 <tcp_output_fill_options+0x40>)
 800bd78:	4807      	ldr	r0, [pc, #28]	; (800bd98 <tcp_output_fill_options+0x44>)
 800bd7a:	f008 fc3b 	bl	80145f4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800bd80:	4b03      	ldr	r3, [pc, #12]	; (800bd90 <tcp_output_fill_options+0x3c>)
 800bd82:	f240 7256 	movw	r2, #1878	; 0x756
 800bd86:	4905      	ldr	r1, [pc, #20]	; (800bd9c <tcp_output_fill_options+0x48>)
 800bd88:	4803      	ldr	r0, [pc, #12]	; (800bd98 <tcp_output_fill_options+0x44>)
 800bd8a:	f008 fc33 	bl	80145f4 <iprintf>
 800bd8e:	e7e5      	b.n	800bd5c <tcp_output_fill_options+0x8>
 800bd90:	080175f0 	.word	0x080175f0
 800bd94:	080173d8 	.word	0x080173d8
 800bd98:	08015608 	.word	0x08015608
 800bd9c:	080173b0 	.word	0x080173b0

0800bda0 <tcp_create_segment>:
{
 800bda0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bda4:	460e      	mov	r6, r1
 800bda6:	4617      	mov	r7, r2
 800bda8:	4699      	mov	r9, r3
 800bdaa:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800bdae:	4680      	mov	r8, r0
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	d043      	beq.n	800be3c <tcp_create_segment+0x9c>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800bdb4:	2e00      	cmp	r6, #0
 800bdb6:	d048      	beq.n	800be4a <tcp_create_segment+0xaa>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bdb8:	ea4f 058a 	mov.w	r5, sl, lsl #2
 800bdbc:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800bdc0:	2003      	movs	r0, #3
 800bdc2:	f7fc f851 	bl	8007e68 <memp_malloc>
 800bdc6:	4604      	mov	r4, r0
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	d045      	beq.n	800be58 <tcp_create_segment+0xb8>
  seg->flags = optflags;
 800bdcc:	f880 a00c 	strb.w	sl, [r0, #12]
  seg->next = NULL;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	6003      	str	r3, [r0, #0]
  seg->p = p;
 800bdd4:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800bdd6:	8933      	ldrh	r3, [r6, #8]
 800bdd8:	fa1f fa85 	uxth.w	sl, r5
 800bddc:	4553      	cmp	r3, sl
 800bdde:	d33f      	bcc.n	800be60 <tcp_create_segment+0xc0>
  seg->len = p->tot_len - optlen;
 800bde0:	8933      	ldrh	r3, [r6, #8]
 800bde2:	eba3 030a 	sub.w	r3, r3, sl
 800bde6:	8123      	strh	r3, [r4, #8]
  seg->oversize_left = 0;
 800bde8:	2300      	movs	r3, #0
 800bdea:	8163      	strh	r3, [r4, #10]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800bdec:	2114      	movs	r1, #20
 800bdee:	4630      	mov	r0, r6
 800bdf0:	f7fc fc49 	bl	8008686 <pbuf_add_header>
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	d13a      	bne.n	800be6e <tcp_create_segment+0xce>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bdf8:	6863      	ldr	r3, [r4, #4]
 800bdfa:	685e      	ldr	r6, [r3, #4]
 800bdfc:	6126      	str	r6, [r4, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bdfe:	f8b8 0036 	ldrh.w	r0, [r8, #54]	; 0x36
 800be02:	f7fb f9f3 	bl	80071ec <lwip_htons>
 800be06:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800be08:	6926      	ldr	r6, [r4, #16]
 800be0a:	f8b8 0038 	ldrh.w	r0, [r8, #56]	; 0x38
 800be0e:	f7fb f9ed 	bl	80071ec <lwip_htons>
 800be12:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800be14:	6926      	ldr	r6, [r4, #16]
 800be16:	4648      	mov	r0, r9
 800be18:	f7fb f9ed 	bl	80071f6 <lwip_htonl>
 800be1c:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800be1e:	08a8      	lsrs	r0, r5, #2
 800be20:	3005      	adds	r0, #5
 800be22:	6925      	ldr	r5, [r4, #16]
 800be24:	ea47 3000 	orr.w	r0, r7, r0, lsl #12
 800be28:	f7fb f9e0 	bl	80071ec <lwip_htons>
 800be2c:	81a8      	strh	r0, [r5, #12]
  seg->tcphdr->urgp = 0;
 800be2e:	6923      	ldr	r3, [r4, #16]
 800be30:	2200      	movs	r2, #0
 800be32:	749a      	strb	r2, [r3, #18]
 800be34:	74da      	strb	r2, [r3, #19]
}
 800be36:	4620      	mov	r0, r4
 800be38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800be3c:	4b0e      	ldr	r3, [pc, #56]	; (800be78 <tcp_create_segment+0xd8>)
 800be3e:	22a3      	movs	r2, #163	; 0xa3
 800be40:	490e      	ldr	r1, [pc, #56]	; (800be7c <tcp_create_segment+0xdc>)
 800be42:	480f      	ldr	r0, [pc, #60]	; (800be80 <tcp_create_segment+0xe0>)
 800be44:	f008 fbd6 	bl	80145f4 <iprintf>
 800be48:	e7b4      	b.n	800bdb4 <tcp_create_segment+0x14>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800be4a:	4b0b      	ldr	r3, [pc, #44]	; (800be78 <tcp_create_segment+0xd8>)
 800be4c:	22a4      	movs	r2, #164	; 0xa4
 800be4e:	490d      	ldr	r1, [pc, #52]	; (800be84 <tcp_create_segment+0xe4>)
 800be50:	480b      	ldr	r0, [pc, #44]	; (800be80 <tcp_create_segment+0xe0>)
 800be52:	f008 fbcf 	bl	80145f4 <iprintf>
 800be56:	e7af      	b.n	800bdb8 <tcp_create_segment+0x18>
    pbuf_free(p);
 800be58:	4630      	mov	r0, r6
 800be5a:	f7fc fc65 	bl	8008728 <pbuf_free>
    return NULL;
 800be5e:	e7ea      	b.n	800be36 <tcp_create_segment+0x96>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800be60:	4b05      	ldr	r3, [pc, #20]	; (800be78 <tcp_create_segment+0xd8>)
 800be62:	22b0      	movs	r2, #176	; 0xb0
 800be64:	4908      	ldr	r1, [pc, #32]	; (800be88 <tcp_create_segment+0xe8>)
 800be66:	4806      	ldr	r0, [pc, #24]	; (800be80 <tcp_create_segment+0xe0>)
 800be68:	f008 fbc4 	bl	80145f4 <iprintf>
 800be6c:	e7b8      	b.n	800bde0 <tcp_create_segment+0x40>
    tcp_seg_free(seg);
 800be6e:	4620      	mov	r0, r4
 800be70:	f7fd f94e 	bl	8009110 <tcp_seg_free>
    return NULL;
 800be74:	2400      	movs	r4, #0
 800be76:	e7de      	b.n	800be36 <tcp_create_segment+0x96>
 800be78:	080175f0 	.word	0x080175f0
 800be7c:	0801713c 	.word	0x0801713c
 800be80:	08015608 	.word	0x08015608
 800be84:	0801715c 	.word	0x0801715c
 800be88:	08017180 	.word	0x08017180

0800be8c <tcp_output_alloc_header_common>:
{
 800be8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be90:	4607      	mov	r7, r0
 800be92:	460c      	mov	r4, r1
 800be94:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800be96:	4411      	add	r1, r2
 800be98:	b289      	uxth	r1, r1
 800be9a:	3114      	adds	r1, #20
 800be9c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bea0:	b289      	uxth	r1, r1
 800bea2:	2036      	movs	r0, #54	; 0x36
 800bea4:	f7fc fca2 	bl	80087ec <pbuf_alloc>
  if (p != NULL) {
 800bea8:	4606      	mov	r6, r0
 800beaa:	b348      	cbz	r0, 800bf00 <tcp_output_alloc_header_common+0x74>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800beac:	8942      	ldrh	r2, [r0, #10]
 800beae:	f104 0314 	add.w	r3, r4, #20
 800beb2:	429a      	cmp	r2, r3
 800beb4:	db27      	blt.n	800bf06 <tcp_output_alloc_header_common+0x7a>
    tcphdr = (struct tcp_hdr *)p->payload;
 800beb6:	6875      	ldr	r5, [r6, #4]
    tcphdr->src = lwip_htons(src_port);
 800beb8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800bebc:	f7fb f996 	bl	80071ec <lwip_htons>
 800bec0:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800bec2:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800bec6:	f7fb f991 	bl	80071ec <lwip_htons>
 800beca:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 800becc:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800bed0:	4638      	mov	r0, r7
 800bed2:	f7fb f990 	bl	80071f6 <lwip_htonl>
 800bed6:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800bed8:	08a4      	lsrs	r4, r4, #2
 800beda:	3405      	adds	r4, #5
 800bedc:	0324      	lsls	r4, r4, #12
 800bede:	b2a4      	uxth	r4, r4
 800bee0:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800bee4:	4320      	orrs	r0, r4
 800bee6:	f7fb f981 	bl	80071ec <lwip_htons>
 800beea:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800beec:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 800bef0:	f7fb f97c 	bl	80071ec <lwip_htons>
 800bef4:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 800bef6:	2300      	movs	r3, #0
 800bef8:	742b      	strb	r3, [r5, #16]
 800befa:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 800befc:	74ab      	strb	r3, [r5, #18]
 800befe:	74eb      	strb	r3, [r5, #19]
}
 800bf00:	4630      	mov	r0, r6
 800bf02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800bf06:	4b04      	ldr	r3, [pc, #16]	; (800bf18 <tcp_output_alloc_header_common+0x8c>)
 800bf08:	f240 7224 	movw	r2, #1828	; 0x724
 800bf0c:	4903      	ldr	r1, [pc, #12]	; (800bf1c <tcp_output_alloc_header_common+0x90>)
 800bf0e:	4804      	ldr	r0, [pc, #16]	; (800bf20 <tcp_output_alloc_header_common+0x94>)
 800bf10:	f008 fb70 	bl	80145f4 <iprintf>
 800bf14:	e7cf      	b.n	800beb6 <tcp_output_alloc_header_common+0x2a>
 800bf16:	bf00      	nop
 800bf18:	080175f0 	.word	0x080175f0
 800bf1c:	08017354 	.word	0x08017354
 800bf20:	08015608 	.word	0x08015608

0800bf24 <tcp_output_alloc_header>:
{
 800bf24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf26:	b085      	sub	sp, #20
 800bf28:	460d      	mov	r5, r1
 800bf2a:	4616      	mov	r6, r2
 800bf2c:	461f      	mov	r7, r3
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800bf2e:	4604      	mov	r4, r0
 800bf30:	b1c0      	cbz	r0, 800bf64 <tcp_output_alloc_header+0x40>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800bf32:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800bf34:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800bf36:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800bf38:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800bf3c:	9103      	str	r1, [sp, #12]
 800bf3e:	2110      	movs	r1, #16
 800bf40:	9102      	str	r1, [sp, #8]
 800bf42:	9201      	str	r2, [sp, #4]
 800bf44:	9300      	str	r3, [sp, #0]
 800bf46:	463b      	mov	r3, r7
 800bf48:	4632      	mov	r2, r6
 800bf4a:	4629      	mov	r1, r5
 800bf4c:	f7ff ff9e 	bl	800be8c <tcp_output_alloc_header_common>
  if (p != NULL) {
 800bf50:	4602      	mov	r2, r0
 800bf52:	b120      	cbz	r0, 800bf5e <tcp_output_alloc_header+0x3a>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bf54:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bf56:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800bf5a:	440b      	add	r3, r1
 800bf5c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800bf5e:	4610      	mov	r0, r2
 800bf60:	b005      	add	sp, #20
 800bf62:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800bf64:	4b03      	ldr	r3, [pc, #12]	; (800bf74 <tcp_output_alloc_header+0x50>)
 800bf66:	f240 7242 	movw	r2, #1858	; 0x742
 800bf6a:	4903      	ldr	r1, [pc, #12]	; (800bf78 <tcp_output_alloc_header+0x54>)
 800bf6c:	4803      	ldr	r0, [pc, #12]	; (800bf7c <tcp_output_alloc_header+0x58>)
 800bf6e:	f008 fb41 	bl	80145f4 <iprintf>
 800bf72:	e7de      	b.n	800bf32 <tcp_output_alloc_header+0xe>
 800bf74:	080175f0 	.word	0x080175f0
 800bf78:	0801732c 	.word	0x0801732c
 800bf7c:	08015608 	.word	0x08015608

0800bf80 <tcp_route>:
{
 800bf80:	b510      	push	{r4, lr}
 800bf82:	460c      	mov	r4, r1
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bf84:	b110      	cbz	r0, 800bf8c <tcp_route+0xc>
 800bf86:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
 800bf8a:	b938      	cbnz	r0, 800bf9c <tcp_route+0x1c>
    return ip_route(src, dst);
 800bf8c:	b112      	cbz	r2, 800bf94 <tcp_route+0x14>
 800bf8e:	7c13      	ldrb	r3, [r2, #16]
 800bf90:	2b06      	cmp	r3, #6
 800bf92:	d006      	beq.n	800bfa2 <tcp_route+0x22>
 800bf94:	4610      	mov	r0, r2
 800bf96:	f004 f83b 	bl	8010010 <ip4_route>
}
 800bf9a:	bd10      	pop	{r4, pc}
    return netif_get_by_index(pcb->netif_idx);
 800bf9c:	f7fc faa4 	bl	80084e8 <netif_get_by_index>
 800bfa0:	e7fb      	b.n	800bf9a <tcp_route+0x1a>
    return ip_route(src, dst);
 800bfa2:	4611      	mov	r1, r2
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	f005 f83f 	bl	8011028 <ip6_route>
 800bfaa:	e7f6      	b.n	800bf9a <tcp_route+0x1a>

0800bfac <tcp_output_segment>:
{
 800bfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb0:	b084      	sub	sp, #16
 800bfb2:	460c      	mov	r4, r1
 800bfb4:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bfb6:	4605      	mov	r5, r0
 800bfb8:	b148      	cbz	r0, 800bfce <tcp_output_segment+0x22>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800bfba:	b184      	cbz	r4, 800bfde <tcp_output_segment+0x32>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800bfbc:	b1be      	cbz	r6, 800bfee <tcp_output_segment+0x42>
  if (tcp_output_segment_busy(seg)) {
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	f7ff feae 	bl	800bd20 <tcp_output_segment_busy>
 800bfc4:	b1d8      	cbz	r0, 800bffe <tcp_output_segment+0x52>
    return ERR_OK;
 800bfc6:	2000      	movs	r0, #0
}
 800bfc8:	b004      	add	sp, #16
 800bfca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bfce:	4b4e      	ldr	r3, [pc, #312]	; (800c108 <tcp_output_segment+0x15c>)
 800bfd0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800bfd4:	494d      	ldr	r1, [pc, #308]	; (800c10c <tcp_output_segment+0x160>)
 800bfd6:	484e      	ldr	r0, [pc, #312]	; (800c110 <tcp_output_segment+0x164>)
 800bfd8:	f008 fb0c 	bl	80145f4 <iprintf>
 800bfdc:	e7ed      	b.n	800bfba <tcp_output_segment+0xe>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800bfde:	4b4a      	ldr	r3, [pc, #296]	; (800c108 <tcp_output_segment+0x15c>)
 800bfe0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bfe4:	494b      	ldr	r1, [pc, #300]	; (800c114 <tcp_output_segment+0x168>)
 800bfe6:	484a      	ldr	r0, [pc, #296]	; (800c110 <tcp_output_segment+0x164>)
 800bfe8:	f008 fb04 	bl	80145f4 <iprintf>
 800bfec:	e7e6      	b.n	800bfbc <tcp_output_segment+0x10>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800bfee:	4b46      	ldr	r3, [pc, #280]	; (800c108 <tcp_output_segment+0x15c>)
 800bff0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800bff4:	4948      	ldr	r1, [pc, #288]	; (800c118 <tcp_output_segment+0x16c>)
 800bff6:	4846      	ldr	r0, [pc, #280]	; (800c110 <tcp_output_segment+0x164>)
 800bff8:	f008 fafc 	bl	80145f4 <iprintf>
 800bffc:	e7df      	b.n	800bfbe <tcp_output_segment+0x12>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bffe:	692f      	ldr	r7, [r5, #16]
 800c000:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800c002:	f7fb f8f8 	bl	80071f6 <lwip_htonl>
 800c006:	60b8      	str	r0, [r7, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c008:	692f      	ldr	r7, [r5, #16]
 800c00a:	f8b4 004a 	ldrh.w	r0, [r4, #74]	; 0x4a
 800c00e:	f7fb f8ed 	bl	80071ec <lwip_htons>
 800c012:	81f8      	strh	r0, [r7, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c014:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c016:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800c01a:	4413      	add	r3, r2
 800c01c:	64e3      	str	r3, [r4, #76]	; 0x4c
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c01e:	f8d5 8010 	ldr.w	r8, [r5, #16]
 800c022:	f108 0714 	add.w	r7, r8, #20
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c026:	7b2b      	ldrb	r3, [r5, #12]
 800c028:	f013 0f01 	tst.w	r3, #1
 800c02c:	d13f      	bne.n	800c0ae <tcp_output_segment+0x102>
  if (pcb->rtime < 0) {
 800c02e:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	; 0x50
 800c032:	2b00      	cmp	r3, #0
 800c034:	db4b      	blt.n	800c0ce <tcp_output_segment+0x122>
  if (pcb->rttest == 0) {
 800c036:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d04c      	beq.n	800c0d6 <tcp_output_segment+0x12a>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c03c:	692b      	ldr	r3, [r5, #16]
 800c03e:	686a      	ldr	r2, [r5, #4]
 800c040:	6851      	ldr	r1, [r2, #4]
 800c042:	1a5b      	subs	r3, r3, r1
 800c044:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800c046:	8951      	ldrh	r1, [r2, #10]
 800c048:	1ac9      	subs	r1, r1, r3
 800c04a:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 800c04c:	6869      	ldr	r1, [r5, #4]
 800c04e:	890a      	ldrh	r2, [r1, #8]
 800c050:	1ad3      	subs	r3, r2, r3
 800c052:	810b      	strh	r3, [r1, #8]
  seg->p->payload = seg->tcphdr;
 800c054:	686b      	ldr	r3, [r5, #4]
 800c056:	692a      	ldr	r2, [r5, #16]
 800c058:	605a      	str	r2, [r3, #4]
  seg->tcphdr->chksum = 0;
 800c05a:	692b      	ldr	r3, [r5, #16]
 800c05c:	2200      	movs	r2, #0
 800c05e:	741a      	strb	r2, [r3, #16]
 800c060:	745a      	strb	r2, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c062:	692a      	ldr	r2, [r5, #16]
 800c064:	7b2b      	ldrb	r3, [r5, #12]
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	f003 0304 	and.w	r3, r3, #4
 800c06c:	3314      	adds	r3, #20
 800c06e:	4413      	add	r3, r2
 800c070:	429f      	cmp	r7, r3
 800c072:	d006      	beq.n	800c082 <tcp_output_segment+0xd6>
 800c074:	4b24      	ldr	r3, [pc, #144]	; (800c108 <tcp_output_segment+0x15c>)
 800c076:	f240 621c 	movw	r2, #1564	; 0x61c
 800c07a:	4928      	ldr	r1, [pc, #160]	; (800c11c <tcp_output_segment+0x170>)
 800c07c:	4824      	ldr	r0, [pc, #144]	; (800c110 <tcp_output_segment+0x164>)
 800c07e:	f008 fab9 	bl	80145f4 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c082:	f114 0f14 	cmn.w	r4, #20
 800c086:	d003      	beq.n	800c090 <tcp_output_segment+0xe4>
 800c088:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800c08c:	2b06      	cmp	r3, #6
 800c08e:	d02b      	beq.n	800c0e8 <tcp_output_segment+0x13c>
 800c090:	6868      	ldr	r0, [r5, #4]
 800c092:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800c096:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800c09a:	9602      	str	r6, [sp, #8]
 800c09c:	2106      	movs	r1, #6
 800c09e:	9101      	str	r1, [sp, #4]
 800c0a0:	9200      	str	r2, [sp, #0]
 800c0a2:	f104 0214 	add.w	r2, r4, #20
 800c0a6:	4621      	mov	r1, r4
 800c0a8:	f004 f98c 	bl	80103c4 <ip4_output_if>
 800c0ac:	e78c      	b.n	800bfc8 <tcp_output_segment+0x1c>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c0ae:	f104 0214 	add.w	r2, r4, #20
 800c0b2:	4631      	mov	r1, r6
 800c0b4:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c0b8:	f7fd f884 	bl	80091c4 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c0bc:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800c0c0:	f7fb f899 	bl	80071f6 <lwip_htonl>
 800c0c4:	f8c8 0014 	str.w	r0, [r8, #20]
    opts += 1;
 800c0c8:	f108 0718 	add.w	r7, r8, #24
 800c0cc:	e7af      	b.n	800c02e <tcp_output_segment+0x82>
    pcb->rtime = 0;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 800c0d4:	e7af      	b.n	800c036 <tcp_output_segment+0x8a>
    pcb->rttest = tcp_ticks;
 800c0d6:	4b12      	ldr	r3, [pc, #72]	; (800c120 <tcp_output_segment+0x174>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	6563      	str	r3, [r4, #84]	; 0x54
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c0dc:	692b      	ldr	r3, [r5, #16]
 800c0de:	6858      	ldr	r0, [r3, #4]
 800c0e0:	f7fb f889 	bl	80071f6 <lwip_htonl>
 800c0e4:	65a0      	str	r0, [r4, #88]	; 0x58
 800c0e6:	e7a9      	b.n	800c03c <tcp_output_segment+0x90>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c0e8:	6868      	ldr	r0, [r5, #4]
 800c0ea:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800c0ee:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800c0f2:	9602      	str	r6, [sp, #8]
 800c0f4:	2106      	movs	r1, #6
 800c0f6:	9101      	str	r1, [sp, #4]
 800c0f8:	9200      	str	r2, [sp, #0]
 800c0fa:	f104 0214 	add.w	r2, r4, #20
 800c0fe:	4621      	mov	r1, r4
 800c100:	f005 fb1c 	bl	801173c <ip6_output_if>
 800c104:	e760      	b.n	800bfc8 <tcp_output_segment+0x1c>
 800c106:	bf00      	nop
 800c108:	080175f0 	.word	0x080175f0
 800c10c:	080173ec 	.word	0x080173ec
 800c110:	08015608 	.word	0x08015608
 800c114:	0801740c 	.word	0x0801740c
 800c118:	0801742c 	.word	0x0801742c
 800c11c:	080173d8 	.word	0x080173d8
 800c120:	20008c48 	.word	0x20008c48

0800c124 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c124:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c126:	b085      	sub	sp, #20
 800c128:	4605      	mov	r5, r0
 800c12a:	4617      	mov	r7, r2
 800c12c:	461c      	mov	r4, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c12e:	460e      	mov	r6, r1
 800c130:	b1f9      	cbz	r1, 800c172 <tcp_output_control_segment+0x4e>

  netif = tcp_route(pcb, src, dst);
 800c132:	4622      	mov	r2, r4
 800c134:	4639      	mov	r1, r7
 800c136:	4628      	mov	r0, r5
 800c138:	f7ff ff22 	bl	800bf80 <tcp_route>
  if (netif == NULL) {
 800c13c:	4602      	mov	r2, r0
 800c13e:	b370      	cbz	r0, 800c19e <tcp_output_control_segment+0x7a>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c140:	b1fd      	cbz	r5, 800c182 <tcp_output_control_segment+0x5e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c142:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
      tos = pcb->tos;
 800c146:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c14a:	b114      	cbz	r4, 800c152 <tcp_output_control_segment+0x2e>
 800c14c:	7c20      	ldrb	r0, [r4, #16]
 800c14e:	2806      	cmp	r0, #6
 800c150:	d01a      	beq.n	800c188 <tcp_output_control_segment+0x64>
 800c152:	9202      	str	r2, [sp, #8]
 800c154:	2206      	movs	r2, #6
 800c156:	9201      	str	r2, [sp, #4]
 800c158:	9100      	str	r1, [sp, #0]
 800c15a:	4622      	mov	r2, r4
 800c15c:	4639      	mov	r1, r7
 800c15e:	4630      	mov	r0, r6
 800c160:	f004 f930 	bl	80103c4 <ip4_output_if>
 800c164:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c166:	4630      	mov	r0, r6
 800c168:	f7fc fade 	bl	8008728 <pbuf_free>
  return err;
}
 800c16c:	4620      	mov	r0, r4
 800c16e:	b005      	add	sp, #20
 800c170:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c172:	4b0c      	ldr	r3, [pc, #48]	; (800c1a4 <tcp_output_control_segment+0x80>)
 800c174:	f240 7287 	movw	r2, #1927	; 0x787
 800c178:	490b      	ldr	r1, [pc, #44]	; (800c1a8 <tcp_output_control_segment+0x84>)
 800c17a:	480c      	ldr	r0, [pc, #48]	; (800c1ac <tcp_output_control_segment+0x88>)
 800c17c:	f008 fa3a 	bl	80145f4 <iprintf>
 800c180:	e7d7      	b.n	800c132 <tcp_output_control_segment+0xe>
      tos = 0;
 800c182:	2100      	movs	r1, #0
      ttl = TCP_TTL;
 800c184:	23ff      	movs	r3, #255	; 0xff
 800c186:	e7e0      	b.n	800c14a <tcp_output_control_segment+0x26>
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c188:	9202      	str	r2, [sp, #8]
 800c18a:	2206      	movs	r2, #6
 800c18c:	9201      	str	r2, [sp, #4]
 800c18e:	9100      	str	r1, [sp, #0]
 800c190:	4622      	mov	r2, r4
 800c192:	4639      	mov	r1, r7
 800c194:	4630      	mov	r0, r6
 800c196:	f005 fad1 	bl	801173c <ip6_output_if>
 800c19a:	4604      	mov	r4, r0
 800c19c:	e7e3      	b.n	800c166 <tcp_output_control_segment+0x42>
    err = ERR_RTE;
 800c19e:	f06f 0403 	mvn.w	r4, #3
 800c1a2:	e7e0      	b.n	800c166 <tcp_output_control_segment+0x42>
 800c1a4:	080175f0 	.word	0x080175f0
 800c1a8:	08017384 	.word	0x08017384
 800c1ac:	08015608 	.word	0x08015608

0800c1b0 <tcp_split_unsent_seg>:
{
 800c1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b4:	b083      	sub	sp, #12
 800c1b6:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c1b8:	4607      	mov	r7, r0
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	d03d      	beq.n	800c23a <tcp_split_unsent_seg+0x8a>
  useg = pcb->unsent;
 800c1be:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
  if (useg == NULL) {
 800c1c2:	2c00      	cmp	r4, #0
 800c1c4:	f000 80b8 	beq.w	800c338 <tcp_split_unsent_seg+0x188>
  if (split == 0) {
 800c1c8:	2d00      	cmp	r5, #0
 800c1ca:	d03e      	beq.n	800c24a <tcp_split_unsent_seg+0x9a>
  if (useg->len <= split) {
 800c1cc:	8923      	ldrh	r3, [r4, #8]
 800c1ce:	42ab      	cmp	r3, r5
 800c1d0:	f240 80b5 	bls.w	800c33e <tcp_split_unsent_seg+0x18e>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c1d4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c1d8:	42ab      	cmp	r3, r5
 800c1da:	d340      	bcc.n	800c25e <tcp_split_unsent_seg+0xae>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c1dc:	8923      	ldrh	r3, [r4, #8]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d045      	beq.n	800c26e <tcp_split_unsent_seg+0xbe>
  optflags = useg->flags;
 800c1e2:	f894 900c 	ldrb.w	r9, [r4, #12]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c1e6:	ea4f 0889 	mov.w	r8, r9, lsl #2
 800c1ea:	f008 0804 	and.w	r8, r8, #4
  remainder = useg->len - split;
 800c1ee:	8926      	ldrh	r6, [r4, #8]
 800c1f0:	1b76      	subs	r6, r6, r5
 800c1f2:	b2b6      	uxth	r6, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c1f4:	eb06 0108 	add.w	r1, r6, r8
 800c1f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c1fc:	b289      	uxth	r1, r1
 800c1fe:	204a      	movs	r0, #74	; 0x4a
 800c200:	f7fc faf4 	bl	80087ec <pbuf_alloc>
  if (p == NULL) {
 800c204:	4682      	mov	sl, r0
 800c206:	b170      	cbz	r0, 800c226 <tcp_split_unsent_seg+0x76>
  offset = useg->p->tot_len - useg->len + split;
 800c208:	6860      	ldr	r0, [r4, #4]
 800c20a:	8903      	ldrh	r3, [r0, #8]
 800c20c:	8922      	ldrh	r2, [r4, #8]
 800c20e:	1a9b      	subs	r3, r3, r2
 800c210:	fa15 f383 	uxtah	r3, r5, r3
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c214:	f8da 1004 	ldr.w	r1, [sl, #4]
 800c218:	b29b      	uxth	r3, r3
 800c21a:	4632      	mov	r2, r6
 800c21c:	4441      	add	r1, r8
 800c21e:	f7fc fcdb 	bl	8008bd8 <pbuf_copy_partial>
 800c222:	42b0      	cmp	r0, r6
 800c224:	d02b      	beq.n	800c27e <tcp_split_unsent_seg+0xce>
  if (p != NULL) {
 800c226:	f1ba 0f00 	cmp.w	sl, #0
 800c22a:	f000 808c 	beq.w	800c346 <tcp_split_unsent_seg+0x196>
    pbuf_free(p);
 800c22e:	4650      	mov	r0, sl
 800c230:	f7fc fa7a 	bl	8008728 <pbuf_free>
  return ERR_MEM;
 800c234:	f04f 30ff 	mov.w	r0, #4294967295
 800c238:	e082      	b.n	800c340 <tcp_split_unsent_seg+0x190>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c23a:	4b44      	ldr	r3, [pc, #272]	; (800c34c <tcp_split_unsent_seg+0x19c>)
 800c23c:	f240 324b 	movw	r2, #843	; 0x34b
 800c240:	4943      	ldr	r1, [pc, #268]	; (800c350 <tcp_split_unsent_seg+0x1a0>)
 800c242:	4844      	ldr	r0, [pc, #272]	; (800c354 <tcp_split_unsent_seg+0x1a4>)
 800c244:	f008 f9d6 	bl	80145f4 <iprintf>
 800c248:	e7b9      	b.n	800c1be <tcp_split_unsent_seg+0xe>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c24a:	4b40      	ldr	r3, [pc, #256]	; (800c34c <tcp_split_unsent_seg+0x19c>)
 800c24c:	f240 3253 	movw	r2, #851	; 0x353
 800c250:	4941      	ldr	r1, [pc, #260]	; (800c358 <tcp_split_unsent_seg+0x1a8>)
 800c252:	4840      	ldr	r0, [pc, #256]	; (800c354 <tcp_split_unsent_seg+0x1a4>)
 800c254:	f008 f9ce 	bl	80145f4 <iprintf>
    return ERR_VAL;
 800c258:	f06f 0005 	mvn.w	r0, #5
 800c25c:	e070      	b.n	800c340 <tcp_split_unsent_seg+0x190>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c25e:	4b3b      	ldr	r3, [pc, #236]	; (800c34c <tcp_split_unsent_seg+0x19c>)
 800c260:	f240 325b 	movw	r2, #859	; 0x35b
 800c264:	493d      	ldr	r1, [pc, #244]	; (800c35c <tcp_split_unsent_seg+0x1ac>)
 800c266:	483b      	ldr	r0, [pc, #236]	; (800c354 <tcp_split_unsent_seg+0x1a4>)
 800c268:	f008 f9c4 	bl	80145f4 <iprintf>
 800c26c:	e7b6      	b.n	800c1dc <tcp_split_unsent_seg+0x2c>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c26e:	4b37      	ldr	r3, [pc, #220]	; (800c34c <tcp_split_unsent_seg+0x19c>)
 800c270:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c274:	493a      	ldr	r1, [pc, #232]	; (800c360 <tcp_split_unsent_seg+0x1b0>)
 800c276:	4837      	ldr	r0, [pc, #220]	; (800c354 <tcp_split_unsent_seg+0x1a4>)
 800c278:	f008 f9bc 	bl	80145f4 <iprintf>
 800c27c:	e7b1      	b.n	800c1e2 <tcp_split_unsent_seg+0x32>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c27e:	6923      	ldr	r3, [r4, #16]
 800c280:	8998      	ldrh	r0, [r3, #12]
 800c282:	f7fa ffb3 	bl	80071ec <lwip_htons>
 800c286:	b2c0      	uxtb	r0, r0
 800c288:	f000 083f 	and.w	r8, r0, #63	; 0x3f
  if (split_flags & TCP_PSH) {
 800c28c:	f010 0f08 	tst.w	r0, #8
 800c290:	d04b      	beq.n	800c32a <tcp_split_unsent_seg+0x17a>
    split_flags &= ~TCP_PSH;
 800c292:	f000 0837 	and.w	r8, r0, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800c296:	f04f 0b08 	mov.w	fp, #8
  if (split_flags & TCP_FIN) {
 800c29a:	f018 0f01 	tst.w	r8, #1
 800c29e:	d003      	beq.n	800c2a8 <tcp_split_unsent_seg+0xf8>
    split_flags &= ~TCP_FIN;
 800c2a0:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 800c2a4:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c2a8:	6923      	ldr	r3, [r4, #16]
 800c2aa:	6858      	ldr	r0, [r3, #4]
 800c2ac:	f7fa ffa3 	bl	80071f6 <lwip_htonl>
 800c2b0:	f8cd 9000 	str.w	r9, [sp]
 800c2b4:	182b      	adds	r3, r5, r0
 800c2b6:	465a      	mov	r2, fp
 800c2b8:	4651      	mov	r1, sl
 800c2ba:	4638      	mov	r0, r7
 800c2bc:	f7ff fd70 	bl	800bda0 <tcp_create_segment>
  if (seg == NULL) {
 800c2c0:	4605      	mov	r5, r0
 800c2c2:	2800      	cmp	r0, #0
 800c2c4:	d0af      	beq.n	800c226 <tcp_split_unsent_seg+0x76>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c2c6:	6860      	ldr	r0, [r4, #4]
 800c2c8:	f7fc fb92 	bl	80089f0 <pbuf_clen>
 800c2cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c2d0:	1a18      	subs	r0, r3, r0
 800c2d2:	f8a7 0086 	strh.w	r0, [r7, #134]	; 0x86
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c2d6:	6860      	ldr	r0, [r4, #4]
 800c2d8:	8901      	ldrh	r1, [r0, #8]
 800c2da:	1b89      	subs	r1, r1, r6
 800c2dc:	b289      	uxth	r1, r1
 800c2de:	f7fc fb33 	bl	8008948 <pbuf_realloc>
  useg->len -= remainder;
 800c2e2:	8923      	ldrh	r3, [r4, #8]
 800c2e4:	1b9e      	subs	r6, r3, r6
 800c2e6:	8126      	strh	r6, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c2e8:	6923      	ldr	r3, [r4, #16]
 800c2ea:	899e      	ldrh	r6, [r3, #12]
 800c2ec:	4640      	mov	r0, r8
 800c2ee:	f7fa ff7d 	bl	80071ec <lwip_htons>
 800c2f2:	6923      	ldr	r3, [r4, #16]
 800c2f4:	4330      	orrs	r0, r6
 800c2f6:	8198      	strh	r0, [r3, #12]
  useg->oversize_left = 0;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	8163      	strh	r3, [r4, #10]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c2fc:	6860      	ldr	r0, [r4, #4]
 800c2fe:	f7fc fb77 	bl	80089f0 <pbuf_clen>
 800c302:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c306:	4418      	add	r0, r3
 800c308:	f8a7 0086 	strh.w	r0, [r7, #134]	; 0x86
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c30c:	6868      	ldr	r0, [r5, #4]
 800c30e:	f7fc fb6f 	bl	80089f0 <pbuf_clen>
 800c312:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c316:	4418      	add	r0, r3
 800c318:	f8a7 0086 	strh.w	r0, [r7, #134]	; 0x86
  seg->next = useg->next;
 800c31c:	6823      	ldr	r3, [r4, #0]
 800c31e:	602b      	str	r3, [r5, #0]
  useg->next = seg;
 800c320:	6025      	str	r5, [r4, #0]
  if (seg->next == NULL) {
 800c322:	682b      	ldr	r3, [r5, #0]
 800c324:	b123      	cbz	r3, 800c330 <tcp_split_unsent_seg+0x180>
  return ERR_OK;
 800c326:	2000      	movs	r0, #0
 800c328:	e00a      	b.n	800c340 <tcp_split_unsent_seg+0x190>
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c32a:	f04f 0b00 	mov.w	fp, #0
 800c32e:	e7b4      	b.n	800c29a <tcp_split_unsent_seg+0xea>
    pcb->unsent_oversize = 0;
 800c330:	2000      	movs	r0, #0
 800c332:	f8a7 0088 	strh.w	r0, [r7, #136]	; 0x88
 800c336:	e003      	b.n	800c340 <tcp_split_unsent_seg+0x190>
    return ERR_MEM;
 800c338:	f04f 30ff 	mov.w	r0, #4294967295
 800c33c:	e000      	b.n	800c340 <tcp_split_unsent_seg+0x190>
    return ERR_OK;
 800c33e:	2000      	movs	r0, #0
}
 800c340:	b003      	add	sp, #12
 800c342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 800c346:	f04f 30ff 	mov.w	r0, #4294967295
 800c34a:	e7f9      	b.n	800c340 <tcp_split_unsent_seg+0x190>
 800c34c:	080175f0 	.word	0x080175f0
 800c350:	08017588 	.word	0x08017588
 800c354:	08015608 	.word	0x08015608
 800c358:	080175ac 	.word	0x080175ac
 800c35c:	080175d0 	.word	0x080175d0
 800c360:	080175e0 	.word	0x080175e0

0800c364 <tcp_enqueue_flags>:
{
 800c364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c368:	b083      	sub	sp, #12
 800c36a:	4604      	mov	r4, r0
 800c36c:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c36e:	f011 0803 	ands.w	r8, r1, #3
 800c372:	d027      	beq.n	800c3c4 <tcp_enqueue_flags+0x60>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c374:	b374      	cbz	r4, 800c3d4 <tcp_enqueue_flags+0x70>
  if (flags & TCP_SYN) {
 800c376:	f015 0f02 	tst.w	r5, #2
 800c37a:	d133      	bne.n	800c3e4 <tcp_enqueue_flags+0x80>
  u8_t optflags = 0;
 800c37c:	2600      	movs	r6, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c37e:	00b7      	lsls	r7, r6, #2
 800c380:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c384:	4639      	mov	r1, r7
 800c386:	204a      	movs	r0, #74	; 0x4a
 800c388:	f7fc fa30 	bl	80087ec <pbuf_alloc>
 800c38c:	4681      	mov	r9, r0
 800c38e:	b358      	cbz	r0, 800c3e8 <tcp_enqueue_flags+0x84>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c390:	8943      	ldrh	r3, [r0, #10]
 800c392:	429f      	cmp	r7, r3
 800c394:	d82f      	bhi.n	800c3f6 <tcp_enqueue_flags+0x92>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c396:	9600      	str	r6, [sp, #0]
 800c398:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800c39a:	462a      	mov	r2, r5
 800c39c:	4649      	mov	r1, r9
 800c39e:	4620      	mov	r0, r4
 800c3a0:	f7ff fcfe 	bl	800bda0 <tcp_create_segment>
 800c3a4:	4606      	mov	r6, r0
 800c3a6:	b370      	cbz	r0, 800c406 <tcp_enqueue_flags+0xa2>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c3a8:	6903      	ldr	r3, [r0, #16]
 800c3aa:	f013 0f03 	tst.w	r3, #3
 800c3ae:	d131      	bne.n	800c414 <tcp_enqueue_flags+0xb0>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c3b0:	8933      	ldrh	r3, [r6, #8]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d136      	bne.n	800c424 <tcp_enqueue_flags+0xc0>
  if (pcb->unsent == NULL) {
 800c3b6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800c3ba:	2a00      	cmp	r2, #0
 800c3bc:	d13b      	bne.n	800c436 <tcp_enqueue_flags+0xd2>
    pcb->unsent = seg;
 800c3be:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800c3c2:	e03c      	b.n	800c43e <tcp_enqueue_flags+0xda>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c3c4:	4b36      	ldr	r3, [pc, #216]	; (800c4a0 <tcp_enqueue_flags+0x13c>)
 800c3c6:	f240 4212 	movw	r2, #1042	; 0x412
 800c3ca:	4936      	ldr	r1, [pc, #216]	; (800c4a4 <tcp_enqueue_flags+0x140>)
 800c3cc:	4836      	ldr	r0, [pc, #216]	; (800c4a8 <tcp_enqueue_flags+0x144>)
 800c3ce:	f008 f911 	bl	80145f4 <iprintf>
 800c3d2:	e7cf      	b.n	800c374 <tcp_enqueue_flags+0x10>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c3d4:	4b32      	ldr	r3, [pc, #200]	; (800c4a0 <tcp_enqueue_flags+0x13c>)
 800c3d6:	f240 4213 	movw	r2, #1043	; 0x413
 800c3da:	4934      	ldr	r1, [pc, #208]	; (800c4ac <tcp_enqueue_flags+0x148>)
 800c3dc:	4832      	ldr	r0, [pc, #200]	; (800c4a8 <tcp_enqueue_flags+0x144>)
 800c3de:	f008 f909 	bl	80145f4 <iprintf>
 800c3e2:	e7c8      	b.n	800c376 <tcp_enqueue_flags+0x12>
    optflags = TF_SEG_OPTS_MSS;
 800c3e4:	2601      	movs	r6, #1
 800c3e6:	e7ca      	b.n	800c37e <tcp_enqueue_flags+0x1a>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c3e8:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800c3ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3ee:	8763      	strh	r3, [r4, #58]	; 0x3a
    return ERR_MEM;
 800c3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f4:	e051      	b.n	800c49a <tcp_enqueue_flags+0x136>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c3f6:	4b2a      	ldr	r3, [pc, #168]	; (800c4a0 <tcp_enqueue_flags+0x13c>)
 800c3f8:	f240 423a 	movw	r2, #1082	; 0x43a
 800c3fc:	492c      	ldr	r1, [pc, #176]	; (800c4b0 <tcp_enqueue_flags+0x14c>)
 800c3fe:	482a      	ldr	r0, [pc, #168]	; (800c4a8 <tcp_enqueue_flags+0x144>)
 800c400:	f008 f8f8 	bl	80145f4 <iprintf>
 800c404:	e7c7      	b.n	800c396 <tcp_enqueue_flags+0x32>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c406:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800c408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c40c:	8763      	strh	r3, [r4, #58]	; 0x3a
    return ERR_MEM;
 800c40e:	f04f 30ff 	mov.w	r0, #4294967295
 800c412:	e042      	b.n	800c49a <tcp_enqueue_flags+0x136>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c414:	4b22      	ldr	r3, [pc, #136]	; (800c4a0 <tcp_enqueue_flags+0x13c>)
 800c416:	f240 4242 	movw	r2, #1090	; 0x442
 800c41a:	4926      	ldr	r1, [pc, #152]	; (800c4b4 <tcp_enqueue_flags+0x150>)
 800c41c:	4822      	ldr	r0, [pc, #136]	; (800c4a8 <tcp_enqueue_flags+0x144>)
 800c41e:	f008 f8e9 	bl	80145f4 <iprintf>
 800c422:	e7c5      	b.n	800c3b0 <tcp_enqueue_flags+0x4c>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c424:	4b1e      	ldr	r3, [pc, #120]	; (800c4a0 <tcp_enqueue_flags+0x13c>)
 800c426:	f240 4243 	movw	r2, #1091	; 0x443
 800c42a:	4923      	ldr	r1, [pc, #140]	; (800c4b8 <tcp_enqueue_flags+0x154>)
 800c42c:	481e      	ldr	r0, [pc, #120]	; (800c4a8 <tcp_enqueue_flags+0x144>)
 800c42e:	f008 f8e1 	bl	80145f4 <iprintf>
 800c432:	e7c0      	b.n	800c3b6 <tcp_enqueue_flags+0x52>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c434:	461a      	mov	r2, r3
 800c436:	6813      	ldr	r3, [r2, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d1fb      	bne.n	800c434 <tcp_enqueue_flags+0xd0>
    useg->next = seg;
 800c43c:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800c43e:	2300      	movs	r3, #0
 800c440:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c444:	f1b8 0f00 	cmp.w	r8, #0
 800c448:	d002      	beq.n	800c450 <tcp_enqueue_flags+0xec>
    pcb->snd_lbb++;
 800c44a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800c44c:	3301      	adds	r3, #1
 800c44e:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (flags & TCP_FIN) {
 800c450:	f015 0f01 	tst.w	r5, #1
 800c454:	d003      	beq.n	800c45e <tcp_enqueue_flags+0xfa>
    tcp_set_flags(pcb, TF_FIN);
 800c456:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800c458:	f043 0320 	orr.w	r3, r3, #32
 800c45c:	8763      	strh	r3, [r4, #58]	; 0x3a
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c45e:	6870      	ldr	r0, [r6, #4]
 800c460:	f7fc fac6 	bl	80089f0 <pbuf_clen>
 800c464:	f8b4 3086 	ldrh.w	r3, [r4, #134]	; 0x86
 800c468:	4418      	add	r0, r3
 800c46a:	b280      	uxth	r0, r0
 800c46c:	f8a4 0086 	strh.w	r0, [r4, #134]	; 0x86
  if (pcb->snd_queuelen != 0) {
 800c470:	b190      	cbz	r0, 800c498 <tcp_enqueue_flags+0x134>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c472:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c476:	b10b      	cbz	r3, 800c47c <tcp_enqueue_flags+0x118>
  return ERR_OK;
 800c478:	2000      	movs	r0, #0
 800c47a:	e00e      	b.n	800c49a <tcp_enqueue_flags+0x136>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c47c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c480:	b10b      	cbz	r3, 800c486 <tcp_enqueue_flags+0x122>
  return ERR_OK;
 800c482:	2000      	movs	r0, #0
 800c484:	e009      	b.n	800c49a <tcp_enqueue_flags+0x136>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c486:	4b06      	ldr	r3, [pc, #24]	; (800c4a0 <tcp_enqueue_flags+0x13c>)
 800c488:	f240 4266 	movw	r2, #1126	; 0x466
 800c48c:	490b      	ldr	r1, [pc, #44]	; (800c4bc <tcp_enqueue_flags+0x158>)
 800c48e:	4806      	ldr	r0, [pc, #24]	; (800c4a8 <tcp_enqueue_flags+0x144>)
 800c490:	f008 f8b0 	bl	80145f4 <iprintf>
  return ERR_OK;
 800c494:	2000      	movs	r0, #0
 800c496:	e000      	b.n	800c49a <tcp_enqueue_flags+0x136>
 800c498:	2000      	movs	r0, #0
}
 800c49a:	b003      	add	sp, #12
 800c49c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4a0:	080175f0 	.word	0x080175f0
 800c4a4:	08017198 	.word	0x08017198
 800c4a8:	08015608 	.word	0x08015608
 800c4ac:	080171f0 	.word	0x080171f0
 800c4b0:	08017210 	.word	0x08017210
 800c4b4:	0801724c 	.word	0x0801724c
 800c4b8:	08017264 	.word	0x08017264
 800c4bc:	08017290 	.word	0x08017290

0800c4c0 <tcp_send_fin>:
{
 800c4c0:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c4c2:	4605      	mov	r5, r0
 800c4c4:	b118      	cbz	r0, 800c4ce <tcp_send_fin+0xe>
  if (pcb->unsent != NULL) {
 800c4c6:	f8d5 408c 	ldr.w	r4, [r5, #140]	; 0x8c
 800c4ca:	b94c      	cbnz	r4, 800c4e0 <tcp_send_fin+0x20>
 800c4cc:	e012      	b.n	800c4f4 <tcp_send_fin+0x34>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c4ce:	4b13      	ldr	r3, [pc, #76]	; (800c51c <tcp_send_fin+0x5c>)
 800c4d0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c4d4:	4912      	ldr	r1, [pc, #72]	; (800c520 <tcp_send_fin+0x60>)
 800c4d6:	4813      	ldr	r0, [pc, #76]	; (800c524 <tcp_send_fin+0x64>)
 800c4d8:	f008 f88c 	bl	80145f4 <iprintf>
 800c4dc:	e7f3      	b.n	800c4c6 <tcp_send_fin+0x6>
         last_unsent = last_unsent->next);
 800c4de:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c4e0:	6823      	ldr	r3, [r4, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d1fb      	bne.n	800c4de <tcp_send_fin+0x1e>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c4e6:	6923      	ldr	r3, [r4, #16]
 800c4e8:	8998      	ldrh	r0, [r3, #12]
 800c4ea:	f7fa fe7f 	bl	80071ec <lwip_htons>
 800c4ee:	f010 0f07 	tst.w	r0, #7
 800c4f2:	d004      	beq.n	800c4fe <tcp_send_fin+0x3e>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c4f4:	2101      	movs	r1, #1
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	f7ff ff34 	bl	800c364 <tcp_enqueue_flags>
}
 800c4fc:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c4fe:	6923      	ldr	r3, [r4, #16]
 800c500:	899e      	ldrh	r6, [r3, #12]
 800c502:	2001      	movs	r0, #1
 800c504:	f7fa fe72 	bl	80071ec <lwip_htons>
 800c508:	6923      	ldr	r3, [r4, #16]
 800c50a:	4330      	orrs	r0, r6
 800c50c:	8198      	strh	r0, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c50e:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
 800c510:	f043 0320 	orr.w	r3, r3, #32
 800c514:	876b      	strh	r3, [r5, #58]	; 0x3a
      return ERR_OK;
 800c516:	2000      	movs	r0, #0
 800c518:	e7f0      	b.n	800c4fc <tcp_send_fin+0x3c>
 800c51a:	bf00      	nop
 800c51c:	080175f0 	.word	0x080175f0
 800c520:	0801756c 	.word	0x0801756c
 800c524:	08015608 	.word	0x08015608

0800c528 <tcp_rexmit_rto_prepare>:
{
 800c528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c52a:	4605      	mov	r5, r0
 800c52c:	b160      	cbz	r0, 800c548 <tcp_rexmit_rto_prepare+0x20>
  if (pcb->unacked == NULL) {
 800c52e:	f8d5 4090 	ldr.w	r4, [r5, #144]	; 0x90
 800c532:	2c00      	cmp	r4, #0
 800c534:	d03f      	beq.n	800c5b6 <tcp_rexmit_rto_prepare+0x8e>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c536:	6823      	ldr	r3, [r4, #0]
 800c538:	b173      	cbz	r3, 800c558 <tcp_rexmit_rto_prepare+0x30>
    if (tcp_output_segment_busy(seg)) {
 800c53a:	4620      	mov	r0, r4
 800c53c:	f7ff fbf0 	bl	800bd20 <tcp_output_segment_busy>
 800c540:	2800      	cmp	r0, #0
 800c542:	d13b      	bne.n	800c5bc <tcp_rexmit_rto_prepare+0x94>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c544:	6824      	ldr	r4, [r4, #0]
 800c546:	e7f6      	b.n	800c536 <tcp_rexmit_rto_prepare+0xe>
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c548:	4b1f      	ldr	r3, [pc, #124]	; (800c5c8 <tcp_rexmit_rto_prepare+0xa0>)
 800c54a:	f240 6263 	movw	r2, #1635	; 0x663
 800c54e:	491f      	ldr	r1, [pc, #124]	; (800c5cc <tcp_rexmit_rto_prepare+0xa4>)
 800c550:	481f      	ldr	r0, [pc, #124]	; (800c5d0 <tcp_rexmit_rto_prepare+0xa8>)
 800c552:	f008 f84f 	bl	80145f4 <iprintf>
 800c556:	e7ea      	b.n	800c52e <tcp_rexmit_rto_prepare+0x6>
  if (tcp_output_segment_busy(seg)) {
 800c558:	4620      	mov	r0, r4
 800c55a:	f7ff fbe1 	bl	800bd20 <tcp_output_segment_busy>
 800c55e:	bb80      	cbnz	r0, 800c5c2 <tcp_rexmit_rto_prepare+0x9a>
  seg->next = pcb->unsent;
 800c560:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800c564:	6023      	str	r3, [r4, #0]
  if (pcb->unsent == NULL) {
 800c566:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800c56a:	b1f3      	cbz	r3, 800c5aa <tcp_rexmit_rto_prepare+0x82>
  pcb->unsent = pcb->unacked;
 800c56c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800c570:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
  pcb->unacked = NULL;
 800c574:	2300      	movs	r3, #0
 800c576:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
  tcp_set_flags(pcb, TF_RTO);
 800c57a:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
 800c57c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c580:	876b      	strh	r3, [r5, #58]	; 0x3a
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c582:	6923      	ldr	r3, [r4, #16]
 800c584:	6858      	ldr	r0, [r3, #4]
 800c586:	f7fa fe36 	bl	80071f6 <lwip_htonl>
 800c58a:	4606      	mov	r6, r0
 800c58c:	8927      	ldrh	r7, [r4, #8]
 800c58e:	6923      	ldr	r3, [r4, #16]
 800c590:	8998      	ldrh	r0, [r3, #12]
 800c592:	f7fa fe2b 	bl	80071ec <lwip_htons>
 800c596:	f010 0f03 	tst.w	r0, #3
 800c59a:	d00a      	beq.n	800c5b2 <tcp_rexmit_rto_prepare+0x8a>
 800c59c:	2301      	movs	r3, #1
 800c59e:	441f      	add	r7, r3
 800c5a0:	443e      	add	r6, r7
 800c5a2:	66ee      	str	r6, [r5, #108]	; 0x6c
  pcb->rttest = 0;
 800c5a4:	2000      	movs	r0, #0
 800c5a6:	6568      	str	r0, [r5, #84]	; 0x54
}
 800c5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = seg->oversize_left;
 800c5aa:	8963      	ldrh	r3, [r4, #10]
 800c5ac:	f8a5 3088 	strh.w	r3, [r5, #136]	; 0x88
 800c5b0:	e7dc      	b.n	800c56c <tcp_rexmit_rto_prepare+0x44>
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	e7f3      	b.n	800c59e <tcp_rexmit_rto_prepare+0x76>
    return ERR_VAL;
 800c5b6:	f06f 0005 	mvn.w	r0, #5
 800c5ba:	e7f5      	b.n	800c5a8 <tcp_rexmit_rto_prepare+0x80>
      return ERR_VAL;
 800c5bc:	f06f 0005 	mvn.w	r0, #5
 800c5c0:	e7f2      	b.n	800c5a8 <tcp_rexmit_rto_prepare+0x80>
    return ERR_VAL;
 800c5c2:	f06f 0005 	mvn.w	r0, #5
 800c5c6:	e7ef      	b.n	800c5a8 <tcp_rexmit_rto_prepare+0x80>
 800c5c8:	080175f0 	.word	0x080175f0
 800c5cc:	080174f0 	.word	0x080174f0
 800c5d0:	08015608 	.word	0x08015608

0800c5d4 <tcp_rexmit>:
{
 800c5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c5d6:	4607      	mov	r7, r0
 800c5d8:	b160      	cbz	r0, 800c5f4 <tcp_rexmit+0x20>
  if (pcb->unacked == NULL) {
 800c5da:	f8d7 6090 	ldr.w	r6, [r7, #144]	; 0x90
 800c5de:	b396      	cbz	r6, 800c646 <tcp_rexmit+0x72>
  if (tcp_output_segment_busy(seg)) {
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	f7ff fb9d 	bl	800bd20 <tcp_output_segment_busy>
 800c5e6:	bb88      	cbnz	r0, 800c64c <tcp_rexmit+0x78>
  pcb->unacked = seg->next;
 800c5e8:	6833      	ldr	r3, [r6, #0]
 800c5ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  cur_seg = &(pcb->unsent);
 800c5ee:	f107 058c 	add.w	r5, r7, #140	; 0x8c
  while (*cur_seg &&
 800c5f2:	e008      	b.n	800c606 <tcp_rexmit+0x32>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c5f4:	4b17      	ldr	r3, [pc, #92]	; (800c654 <tcp_rexmit+0x80>)
 800c5f6:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c5fa:	4917      	ldr	r1, [pc, #92]	; (800c658 <tcp_rexmit+0x84>)
 800c5fc:	4817      	ldr	r0, [pc, #92]	; (800c65c <tcp_rexmit+0x88>)
 800c5fe:	f007 fff9 	bl	80145f4 <iprintf>
 800c602:	e7ea      	b.n	800c5da <tcp_rexmit+0x6>
    cur_seg = &((*cur_seg)->next );
 800c604:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800c606:	682b      	ldr	r3, [r5, #0]
 800c608:	b15b      	cbz	r3, 800c622 <tcp_rexmit+0x4e>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c60a:	691b      	ldr	r3, [r3, #16]
 800c60c:	6858      	ldr	r0, [r3, #4]
 800c60e:	f7fa fdf2 	bl	80071f6 <lwip_htonl>
 800c612:	4604      	mov	r4, r0
 800c614:	6933      	ldr	r3, [r6, #16]
 800c616:	6858      	ldr	r0, [r3, #4]
 800c618:	f7fa fded 	bl	80071f6 <lwip_htonl>
 800c61c:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 800c61e:	2800      	cmp	r0, #0
 800c620:	dbf0      	blt.n	800c604 <tcp_rexmit+0x30>
  seg->next = *cur_seg;
 800c622:	682b      	ldr	r3, [r5, #0]
 800c624:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800c626:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800c628:	6833      	ldr	r3, [r6, #0]
 800c62a:	b14b      	cbz	r3, 800c640 <tcp_rexmit+0x6c>
  if (pcb->nrtx < 0xFF) {
 800c62c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800c630:	2bff      	cmp	r3, #255	; 0xff
 800c632:	d002      	beq.n	800c63a <tcp_rexmit+0x66>
    ++pcb->nrtx;
 800c634:	3301      	adds	r3, #1
 800c636:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
  pcb->rttest = 0;
 800c63a:	2000      	movs	r0, #0
 800c63c:	6578      	str	r0, [r7, #84]	; 0x54
}
 800c63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800c640:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800c644:	e7f2      	b.n	800c62c <tcp_rexmit+0x58>
    return ERR_VAL;
 800c646:	f06f 0005 	mvn.w	r0, #5
 800c64a:	e7f8      	b.n	800c63e <tcp_rexmit+0x6a>
    return ERR_VAL;
 800c64c:	f06f 0005 	mvn.w	r0, #5
 800c650:	e7f5      	b.n	800c63e <tcp_rexmit+0x6a>
 800c652:	bf00      	nop
 800c654:	080175f0 	.word	0x080175f0
 800c658:	08017478 	.word	0x08017478
 800c65c:	08015608 	.word	0x08015608

0800c660 <tcp_rexmit_fast>:
{
 800c660:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c662:	4604      	mov	r4, r0
 800c664:	b138      	cbz	r0, 800c676 <tcp_rexmit_fast+0x16>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c666:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c66a:	b11b      	cbz	r3, 800c674 <tcp_rexmit_fast+0x14>
 800c66c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800c66e:	f013 0f04 	tst.w	r3, #4
 800c672:	d008      	beq.n	800c686 <tcp_rexmit_fast+0x26>
}
 800c674:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c676:	4b17      	ldr	r3, [pc, #92]	; (800c6d4 <tcp_rexmit_fast+0x74>)
 800c678:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c67c:	4916      	ldr	r1, [pc, #88]	; (800c6d8 <tcp_rexmit_fast+0x78>)
 800c67e:	4817      	ldr	r0, [pc, #92]	; (800c6dc <tcp_rexmit_fast+0x7c>)
 800c680:	f007 ffb8 	bl	80145f4 <iprintf>
 800c684:	e7ef      	b.n	800c666 <tcp_rexmit_fast+0x6>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c686:	4620      	mov	r0, r4
 800c688:	f7ff ffa4 	bl	800c5d4 <tcp_rexmit>
 800c68c:	2800      	cmp	r0, #0
 800c68e:	d1f1      	bne.n	800c674 <tcp_rexmit_fast+0x14>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c690:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 800c694:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
 800c698:	4293      	cmp	r3, r2
 800c69a:	d219      	bcs.n	800c6d0 <tcp_rexmit_fast+0x70>
 800c69c:	085a      	lsrs	r2, r3, #1
 800c69e:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c6a2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800c6a6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800c6aa:	d202      	bcs.n	800c6b2 <tcp_rexmit_fast+0x52>
        pcb->ssthresh = 2 * pcb->mss;
 800c6ac:	005a      	lsls	r2, r3, #1
 800c6ae:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c6b2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800c6b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c6ba:	4413      	add	r3, r2
 800c6bc:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
      tcp_set_flags(pcb, TF_INFR);
 800c6c0:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800c6c2:	f043 0304 	orr.w	r3, r3, #4
 800c6c6:	8763      	strh	r3, [r4, #58]	; 0x3a
      pcb->rtime = 0;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
}
 800c6ce:	e7d1      	b.n	800c674 <tcp_rexmit_fast+0x14>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c6d0:	0852      	lsrs	r2, r2, #1
 800c6d2:	e7e4      	b.n	800c69e <tcp_rexmit_fast+0x3e>
 800c6d4:	080175f0 	.word	0x080175f0
 800c6d8:	08017490 	.word	0x08017490
 800c6dc:	08015608 	.word	0x08015608

0800c6e0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e4:	b084      	sub	sp, #16
 800c6e6:	4605      	mov	r5, r0
 800c6e8:	4688      	mov	r8, r1
 800c6ea:	4616      	mov	r6, r2
 800c6ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c6ee:	461f      	mov	r7, r3
 800c6f0:	b32b      	cbz	r3, 800c73e <tcp_rst+0x5e>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c6f2:	b364      	cbz	r4, 800c74e <tcp_rst+0x6e>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c6f4:	4640      	mov	r0, r8
 800c6f6:	f7fa fd7e 	bl	80071f6 <lwip_htonl>
 800c6fa:	f246 0308 	movw	r3, #24584	; 0x6008
 800c6fe:	9303      	str	r3, [sp, #12]
 800c700:	2314      	movs	r3, #20
 800c702:	9302      	str	r3, [sp, #8]
 800c704:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c708:	9301      	str	r3, [sp, #4]
 800c70a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800c70e:	9300      	str	r3, [sp, #0]
 800c710:	4603      	mov	r3, r0
 800c712:	2200      	movs	r2, #0
 800c714:	4611      	mov	r1, r2
 800c716:	4630      	mov	r0, r6
 800c718:	f7ff fbb8 	bl	800be8c <tcp_output_alloc_header_common>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c71c:	4606      	mov	r6, r0
 800c71e:	b158      	cbz	r0, 800c738 <tcp_rst+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c720:	2300      	movs	r3, #0
 800c722:	461a      	mov	r2, r3
 800c724:	4601      	mov	r1, r0
 800c726:	4628      	mov	r0, r5
 800c728:	f7ff fb14 	bl	800bd54 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c72c:	4623      	mov	r3, r4
 800c72e:	463a      	mov	r2, r7
 800c730:	4631      	mov	r1, r6
 800c732:	4628      	mov	r0, r5
 800c734:	f7ff fcf6 	bl	800c124 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c738:	b004      	add	sp, #16
 800c73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c73e:	4b08      	ldr	r3, [pc, #32]	; (800c760 <tcp_rst+0x80>)
 800c740:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c744:	4907      	ldr	r1, [pc, #28]	; (800c764 <tcp_rst+0x84>)
 800c746:	4808      	ldr	r0, [pc, #32]	; (800c768 <tcp_rst+0x88>)
 800c748:	f007 ff54 	bl	80145f4 <iprintf>
 800c74c:	e7d1      	b.n	800c6f2 <tcp_rst+0x12>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c74e:	4b04      	ldr	r3, [pc, #16]	; (800c760 <tcp_rst+0x80>)
 800c750:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c754:	4905      	ldr	r1, [pc, #20]	; (800c76c <tcp_rst+0x8c>)
 800c756:	4804      	ldr	r0, [pc, #16]	; (800c768 <tcp_rst+0x88>)
 800c758:	f007 ff4c 	bl	80145f4 <iprintf>
 800c75c:	e7ca      	b.n	800c6f4 <tcp_rst+0x14>
 800c75e:	bf00      	nop
 800c760:	080175f0 	.word	0x080175f0
 800c764:	08017514 	.word	0x08017514
 800c768:	08015608 	.word	0x08015608
 800c76c:	08017530 	.word	0x08017530

0800c770 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c770:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c772:	4604      	mov	r4, r0
 800c774:	b1f8      	cbz	r0, 800c7b6 <tcp_send_empty_ack+0x46>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c776:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800c778:	f7fa fd3d 	bl	80071f6 <lwip_htonl>
 800c77c:	4603      	mov	r3, r0
 800c77e:	2200      	movs	r2, #0
 800c780:	4611      	mov	r1, r2
 800c782:	4620      	mov	r0, r4
 800c784:	f7ff fbce 	bl	800bf24 <tcp_output_alloc_header>
  if (p == NULL) {
 800c788:	4605      	mov	r5, r0
 800c78a:	b1e0      	cbz	r0, 800c7c6 <tcp_send_empty_ack+0x56>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c78c:	2300      	movs	r3, #0
 800c78e:	461a      	mov	r2, r3
 800c790:	4601      	mov	r1, r0
 800c792:	4620      	mov	r0, r4
 800c794:	f7ff fade 	bl	800bd54 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c798:	f104 0314 	add.w	r3, r4, #20
 800c79c:	4622      	mov	r2, r4
 800c79e:	4629      	mov	r1, r5
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	f7ff fcbf 	bl	800c124 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	b9a0      	cbnz	r0, 800c7d4 <tcp_send_empty_ack+0x64>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c7aa:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800c7ac:	f023 0303 	bic.w	r3, r3, #3
 800c7b0:	8763      	strh	r3, [r4, #58]	; 0x3a
  }

  return err;
}
 800c7b2:	4610      	mov	r0, r2
 800c7b4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c7b6:	4b0a      	ldr	r3, [pc, #40]	; (800c7e0 <tcp_send_empty_ack+0x70>)
 800c7b8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c7bc:	4909      	ldr	r1, [pc, #36]	; (800c7e4 <tcp_send_empty_ack+0x74>)
 800c7be:	480a      	ldr	r0, [pc, #40]	; (800c7e8 <tcp_send_empty_ack+0x78>)
 800c7c0:	f007 ff18 	bl	80145f4 <iprintf>
 800c7c4:	e7d7      	b.n	800c776 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c7c6:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800c7c8:	f043 0303 	orr.w	r3, r3, #3
 800c7cc:	8763      	strh	r3, [r4, #58]	; 0x3a
    return ERR_BUF;
 800c7ce:	f06f 0201 	mvn.w	r2, #1
 800c7d2:	e7ee      	b.n	800c7b2 <tcp_send_empty_ack+0x42>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c7d4:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800c7d6:	f043 0303 	orr.w	r3, r3, #3
 800c7da:	8763      	strh	r3, [r4, #58]	; 0x3a
 800c7dc:	e7e9      	b.n	800c7b2 <tcp_send_empty_ack+0x42>
 800c7de:	bf00      	nop
 800c7e0:	080175f0 	.word	0x080175f0
 800c7e4:	0801754c 	.word	0x0801754c
 800c7e8:	08015608 	.word	0x08015608

0800c7ec <tcp_output>:
{
 800c7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c7f0:	4604      	mov	r4, r0
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	d054      	beq.n	800c8a0 <tcp_output+0xb4>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c7f6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d058      	beq.n	800c8b0 <tcp_output+0xc4>
  if (tcp_input_pcb == pcb) {
 800c7fe:	4b85      	ldr	r3, [pc, #532]	; (800ca14 <tcp_output+0x228>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	42a3      	cmp	r3, r4
 800c804:	f000 818d 	beq.w	800cb22 <tcp_output+0x336>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c808:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 800c80c:	f8b4 6068 	ldrh.w	r6, [r4, #104]	; 0x68
 800c810:	42b3      	cmp	r3, r6
 800c812:	d200      	bcs.n	800c816 <tcp_output+0x2a>
 800c814:	461e      	mov	r6, r3
  seg = pcb->unsent;
 800c816:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
  if (seg == NULL) {
 800c81a:	2d00      	cmp	r5, #0
 800c81c:	d050      	beq.n	800c8c0 <tcp_output+0xd4>
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c81e:	f104 0714 	add.w	r7, r4, #20
 800c822:	463a      	mov	r2, r7
 800c824:	4621      	mov	r1, r4
 800c826:	4620      	mov	r0, r4
 800c828:	f7ff fbaa 	bl	800bf80 <tcp_route>
  if (netif == NULL) {
 800c82c:	4680      	mov	r8, r0
 800c82e:	2800      	cmp	r0, #0
 800c830:	f000 8179 	beq.w	800cb26 <tcp_output+0x33a>
  if (ip_addr_isany(&pcb->local_ip)) {
 800c834:	b14c      	cbz	r4, 800c84a <tcp_output+0x5e>
 800c836:	7c23      	ldrb	r3, [r4, #16]
 800c838:	2b06      	cmp	r3, #6
 800c83a:	d052      	beq.n	800c8e2 <tcp_output+0xf6>
 800c83c:	2c00      	cmp	r4, #0
 800c83e:	d065      	beq.n	800c90c <tcp_output+0x120>
 800c840:	6823      	ldr	r3, [r4, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d164      	bne.n	800c910 <tcp_output+0x124>
 800c846:	2301      	movs	r3, #1
 800c848:	b19b      	cbz	r3, 800c872 <tcp_output+0x86>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c84a:	b11f      	cbz	r7, 800c854 <tcp_output+0x68>
 800c84c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800c850:	2b06      	cmp	r3, #6
 800c852:	d05f      	beq.n	800c914 <tcp_output+0x128>
 800c854:	4640      	mov	r0, r8
    if (local_ip == NULL) {
 800c856:	2800      	cmp	r0, #0
 800c858:	f000 8168 	beq.w	800cb2c <tcp_output+0x340>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c85c:	7c03      	ldrb	r3, [r0, #16]
 800c85e:	7423      	strb	r3, [r4, #16]
 800c860:	7c03      	ldrb	r3, [r0, #16]
 800c862:	2b06      	cmp	r3, #6
 800c864:	d05c      	beq.n	800c920 <tcp_output+0x134>
 800c866:	6803      	ldr	r3, [r0, #0]
 800c868:	6023      	str	r3, [r4, #0]
 800c86a:	2300      	movs	r3, #0
 800c86c:	60e3      	str	r3, [r4, #12]
 800c86e:	60a3      	str	r3, [r4, #8]
 800c870:	6063      	str	r3, [r4, #4]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c872:	692b      	ldr	r3, [r5, #16]
 800c874:	6858      	ldr	r0, [r3, #4]
 800c876:	f7fa fcbe 	bl	80071f6 <lwip_htonl>
 800c87a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c87c:	1ac0      	subs	r0, r0, r3
 800c87e:	892b      	ldrh	r3, [r5, #8]
 800c880:	4418      	add	r0, r3
 800c882:	4286      	cmp	r6, r0
 800c884:	d265      	bcs.n	800c952 <tcp_output+0x166>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c886:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 800c88a:	429e      	cmp	r6, r3
 800c88c:	d051      	beq.n	800c932 <tcp_output+0x146>
    if (pcb->flags & TF_ACK_NOW) {
 800c88e:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800c890:	f013 0f02 	tst.w	r3, #2
 800c894:	d018      	beq.n	800c8c8 <tcp_output+0xdc>
      return tcp_send_empty_ack(pcb);
 800c896:	4620      	mov	r0, r4
 800c898:	f7ff ff6a 	bl	800c770 <tcp_send_empty_ack>
 800c89c:	4603      	mov	r3, r0
 800c89e:	e018      	b.n	800c8d2 <tcp_output+0xe6>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c8a0:	4b5d      	ldr	r3, [pc, #372]	; (800ca18 <tcp_output+0x22c>)
 800c8a2:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c8a6:	495d      	ldr	r1, [pc, #372]	; (800ca1c <tcp_output+0x230>)
 800c8a8:	485d      	ldr	r0, [pc, #372]	; (800ca20 <tcp_output+0x234>)
 800c8aa:	f007 fea3 	bl	80145f4 <iprintf>
 800c8ae:	e7a2      	b.n	800c7f6 <tcp_output+0xa>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c8b0:	4b59      	ldr	r3, [pc, #356]	; (800ca18 <tcp_output+0x22c>)
 800c8b2:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800c8b6:	495b      	ldr	r1, [pc, #364]	; (800ca24 <tcp_output+0x238>)
 800c8b8:	4859      	ldr	r0, [pc, #356]	; (800ca20 <tcp_output+0x234>)
 800c8ba:	f007 fe9b 	bl	80145f4 <iprintf>
 800c8be:	e79e      	b.n	800c7fe <tcp_output+0x12>
    if (pcb->flags & TF_ACK_NOW) {
 800c8c0:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800c8c2:	f013 0f02 	tst.w	r3, #2
 800c8c6:	d107      	bne.n	800c8d8 <tcp_output+0xec>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c8c8:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800c8ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8ce:	8763      	strh	r3, [r4, #58]	; 0x3a
  return ERR_OK;
 800c8d0:	2300      	movs	r3, #0
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return tcp_send_empty_ack(pcb);
 800c8d8:	4620      	mov	r0, r4
 800c8da:	f7ff ff49 	bl	800c770 <tcp_send_empty_ack>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	e7f7      	b.n	800c8d2 <tcp_output+0xe6>
  if (ip_addr_isany(&pcb->local_ip)) {
 800c8e2:	b14c      	cbz	r4, 800c8f8 <tcp_output+0x10c>
 800c8e4:	6823      	ldr	r3, [r4, #0]
 800c8e6:	b94b      	cbnz	r3, 800c8fc <tcp_output+0x110>
 800c8e8:	6863      	ldr	r3, [r4, #4]
 800c8ea:	b94b      	cbnz	r3, 800c900 <tcp_output+0x114>
 800c8ec:	68a3      	ldr	r3, [r4, #8]
 800c8ee:	b94b      	cbnz	r3, 800c904 <tcp_output+0x118>
 800c8f0:	68e3      	ldr	r3, [r4, #12]
 800c8f2:	b14b      	cbz	r3, 800c908 <tcp_output+0x11c>
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	e7a7      	b.n	800c848 <tcp_output+0x5c>
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	e7a5      	b.n	800c848 <tcp_output+0x5c>
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	e7a3      	b.n	800c848 <tcp_output+0x5c>
 800c900:	2300      	movs	r3, #0
 800c902:	e7a1      	b.n	800c848 <tcp_output+0x5c>
 800c904:	2300      	movs	r3, #0
 800c906:	e79f      	b.n	800c848 <tcp_output+0x5c>
 800c908:	2301      	movs	r3, #1
 800c90a:	e79d      	b.n	800c848 <tcp_output+0x5c>
 800c90c:	2301      	movs	r3, #1
 800c90e:	e79b      	b.n	800c848 <tcp_output+0x5c>
 800c910:	2300      	movs	r3, #0
 800c912:	e799      	b.n	800c848 <tcp_output+0x5c>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c914:	f104 0114 	add.w	r1, r4, #20
 800c918:	4640      	mov	r0, r8
 800c91a:	f004 fb93 	bl	8011044 <ip6_select_source_address>
 800c91e:	e79a      	b.n	800c856 <tcp_output+0x6a>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c920:	6803      	ldr	r3, [r0, #0]
 800c922:	6023      	str	r3, [r4, #0]
 800c924:	6843      	ldr	r3, [r0, #4]
 800c926:	6063      	str	r3, [r4, #4]
 800c928:	6883      	ldr	r3, [r0, #8]
 800c92a:	60a3      	str	r3, [r4, #8]
 800c92c:	68c3      	ldr	r3, [r0, #12]
 800c92e:	60e3      	str	r3, [r4, #12]
 800c930:	e79f      	b.n	800c872 <tcp_output+0x86>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c932:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c936:	2b00      	cmp	r3, #0
 800c938:	d1a9      	bne.n	800c88e <tcp_output+0xa2>
 800c93a:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d1a5      	bne.n	800c88e <tcp_output+0xa2>
      pcb->persist_cnt = 0;
 800c942:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
      pcb->persist_backoff = 1;
 800c946:	2201      	movs	r2, #1
 800c948:	f884 20b9 	strb.w	r2, [r4, #185]	; 0xb9
      pcb->persist_probe = 0;
 800c94c:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
 800c950:	e79d      	b.n	800c88e <tcp_output+0xa2>
  pcb->persist_backoff = 0;
 800c952:	2300      	movs	r3, #0
 800c954:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
  useg = pcb->unacked;
 800c958:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
  if (useg != NULL) {
 800c95c:	b90f      	cbnz	r7, 800c962 <tcp_output+0x176>
 800c95e:	e06a      	b.n	800ca36 <tcp_output+0x24a>
    for (; useg->next != NULL; useg = useg->next);
 800c960:	461f      	mov	r7, r3
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d1fb      	bne.n	800c960 <tcp_output+0x174>
 800c968:	e065      	b.n	800ca36 <tcp_output+0x24a>
    LWIP_ASSERT("RST not expected here!",
 800c96a:	4b2b      	ldr	r3, [pc, #172]	; (800ca18 <tcp_output+0x22c>)
 800c96c:	f240 5237 	movw	r2, #1335	; 0x537
 800c970:	492d      	ldr	r1, [pc, #180]	; (800ca28 <tcp_output+0x23c>)
 800c972:	482b      	ldr	r0, [pc, #172]	; (800ca20 <tcp_output+0x234>)
 800c974:	f007 fe3e 	bl	80145f4 <iprintf>
 800c978:	e070      	b.n	800ca5c <tcp_output+0x270>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c97a:	8911      	ldrh	r1, [r2, #8]
 800c97c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800c980:	4291      	cmp	r1, r2
 800c982:	d279      	bcs.n	800ca78 <tcp_output+0x28c>
 800c984:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 800c988:	2a00      	cmp	r2, #0
 800c98a:	d075      	beq.n	800ca78 <tcp_output+0x28c>
 800c98c:	f8b4 2086 	ldrh.w	r2, [r4, #134]	; 0x86
 800c990:	2a08      	cmp	r2, #8
 800c992:	d871      	bhi.n	800ca78 <tcp_output+0x28c>
 800c994:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800c998:	d16e      	bne.n	800ca78 <tcp_output+0x28c>
  if (pcb->unsent == NULL) {
 800c99a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d192      	bne.n	800c8c8 <tcp_output+0xdc>
    pcb->unsent_oversize = 0;
 800c9a2:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
 800c9a6:	e78f      	b.n	800c8c8 <tcp_output+0xdc>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c9a8:	692b      	ldr	r3, [r5, #16]
 800c9aa:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800c9ae:	2010      	movs	r0, #16
 800c9b0:	f7fa fc1c 	bl	80071ec <lwip_htons>
 800c9b4:	692b      	ldr	r3, [r5, #16]
 800c9b6:	ea49 0000 	orr.w	r0, r9, r0
 800c9ba:	8198      	strh	r0, [r3, #12]
 800c9bc:	e060      	b.n	800ca80 <tcp_output+0x294>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c9be:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 800c9c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c9c4:	8762      	strh	r2, [r4, #58]	; 0x3a
      return err;
 800c9c6:	e784      	b.n	800c8d2 <tcp_output+0xe6>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	e07d      	b.n	800cac8 <tcp_output+0x2dc>
      pcb->snd_nxt = snd_nxt;
 800c9cc:	6720      	str	r0, [r4, #112]	; 0x70
 800c9ce:	e082      	b.n	800cad6 <tcp_output+0x2ea>
    if (TCP_TCPLEN(seg) > 0) {
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	e08b      	b.n	800caec <tcp_output+0x300>
        pcb->unacked = seg;
 800c9d4:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
        useg = seg;
 800c9d8:	462f      	mov	r7, r5
 800c9da:	e02a      	b.n	800ca32 <tcp_output+0x246>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c9dc:	f104 0a90 	add.w	sl, r4, #144	; 0x90
          while (*cur_seg &&
 800c9e0:	f8da 3000 	ldr.w	r3, [sl]
 800c9e4:	b17b      	cbz	r3, 800ca06 <tcp_output+0x21a>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c9e6:	691b      	ldr	r3, [r3, #16]
 800c9e8:	6858      	ldr	r0, [r3, #4]
 800c9ea:	f7fa fc04 	bl	80071f6 <lwip_htonl>
 800c9ee:	4681      	mov	r9, r0
 800c9f0:	692b      	ldr	r3, [r5, #16]
 800c9f2:	6858      	ldr	r0, [r3, #4]
 800c9f4:	f7fa fbff 	bl	80071f6 <lwip_htonl>
 800c9f8:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	da02      	bge.n	800ca06 <tcp_output+0x21a>
            cur_seg = &((*cur_seg)->next );
 800ca00:	f8da a000 	ldr.w	sl, [sl]
 800ca04:	e7ec      	b.n	800c9e0 <tcp_output+0x1f4>
          seg->next = (*cur_seg);
 800ca06:	f8da 3000 	ldr.w	r3, [sl]
 800ca0a:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 800ca0c:	f8ca 5000 	str.w	r5, [sl]
 800ca10:	e00f      	b.n	800ca32 <tcp_output+0x246>
 800ca12:	bf00      	nop
 800ca14:	20008c58 	.word	0x20008c58
 800ca18:	080175f0 	.word	0x080175f0
 800ca1c:	080172d4 	.word	0x080172d4
 800ca20:	08015608 	.word	0x08015608
 800ca24:	080172ec 	.word	0x080172ec
 800ca28:	08017314 	.word	0x08017314
      tcp_seg_free(seg);
 800ca2c:	4628      	mov	r0, r5
 800ca2e:	f7fc fb6f 	bl	8009110 <tcp_seg_free>
    seg = pcb->unsent;
 800ca32:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
  while (seg != NULL &&
 800ca36:	2d00      	cmp	r5, #0
 800ca38:	d0af      	beq.n	800c99a <tcp_output+0x1ae>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ca3a:	692b      	ldr	r3, [r5, #16]
 800ca3c:	6858      	ldr	r0, [r3, #4]
 800ca3e:	f7fa fbda 	bl	80071f6 <lwip_htonl>
 800ca42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca44:	1ac0      	subs	r0, r0, r3
 800ca46:	892b      	ldrh	r3, [r5, #8]
 800ca48:	4418      	add	r0, r3
  while (seg != NULL &&
 800ca4a:	4286      	cmp	r6, r0
 800ca4c:	d3a5      	bcc.n	800c99a <tcp_output+0x1ae>
    LWIP_ASSERT("RST not expected here!",
 800ca4e:	692b      	ldr	r3, [r5, #16]
 800ca50:	8998      	ldrh	r0, [r3, #12]
 800ca52:	f7fa fbcb 	bl	80071ec <lwip_htons>
 800ca56:	f010 0f04 	tst.w	r0, #4
 800ca5a:	d186      	bne.n	800c96a <tcp_output+0x17e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ca5c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ca60:	b153      	cbz	r3, 800ca78 <tcp_output+0x28c>
 800ca62:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800ca64:	f013 0f44 	tst.w	r3, #68	; 0x44
 800ca68:	d106      	bne.n	800ca78 <tcp_output+0x28c>
 800ca6a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800ca6e:	2a00      	cmp	r2, #0
 800ca70:	d088      	beq.n	800c984 <tcp_output+0x198>
 800ca72:	6811      	ldr	r1, [r2, #0]
 800ca74:	2900      	cmp	r1, #0
 800ca76:	d080      	beq.n	800c97a <tcp_output+0x18e>
    if (pcb->state != SYN_SENT) {
 800ca78:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800ca7c:	2b02      	cmp	r3, #2
 800ca7e:	d193      	bne.n	800c9a8 <tcp_output+0x1bc>
    err = tcp_output_segment(seg, pcb, netif);
 800ca80:	4642      	mov	r2, r8
 800ca82:	4621      	mov	r1, r4
 800ca84:	4628      	mov	r0, r5
 800ca86:	f7ff fa91 	bl	800bfac <tcp_output_segment>
    if (err != ERR_OK) {
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d196      	bne.n	800c9be <tcp_output+0x1d2>
    seg->oversize_left = 0;
 800ca90:	2300      	movs	r3, #0
 800ca92:	816b      	strh	r3, [r5, #10]
    pcb->unsent = seg->next;
 800ca94:	682b      	ldr	r3, [r5, #0]
 800ca96:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    if (pcb->state != SYN_SENT) {
 800ca9a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800ca9e:	2b02      	cmp	r3, #2
 800caa0:	d003      	beq.n	800caaa <tcp_output+0x2be>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800caa2:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800caa4:	f023 0303 	bic.w	r3, r3, #3
 800caa8:	8763      	strh	r3, [r4, #58]	; 0x3a
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800caaa:	692b      	ldr	r3, [r5, #16]
 800caac:	6858      	ldr	r0, [r3, #4]
 800caae:	f7fa fba2 	bl	80071f6 <lwip_htonl>
 800cab2:	4681      	mov	r9, r0
 800cab4:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800cab8:	692b      	ldr	r3, [r5, #16]
 800caba:	8998      	ldrh	r0, [r3, #12]
 800cabc:	f7fa fb96 	bl	80071ec <lwip_htons>
 800cac0:	f010 0f03 	tst.w	r0, #3
 800cac4:	d080      	beq.n	800c9c8 <tcp_output+0x1dc>
 800cac6:	2001      	movs	r0, #1
 800cac8:	4450      	add	r0, sl
 800caca:	4448      	add	r0, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cacc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cace:	1a1b      	subs	r3, r3, r0
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	f6ff af7b 	blt.w	800c9cc <tcp_output+0x1e0>
    if (TCP_TCPLEN(seg) > 0) {
 800cad6:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800cada:	692b      	ldr	r3, [r5, #16]
 800cadc:	8998      	ldrh	r0, [r3, #12]
 800cade:	f7fa fb85 	bl	80071ec <lwip_htons>
 800cae2:	f010 0f03 	tst.w	r0, #3
 800cae6:	f43f af73 	beq.w	800c9d0 <tcp_output+0x1e4>
 800caea:	2301      	movs	r3, #1
 800caec:	eb13 0f09 	cmn.w	r3, r9
 800caf0:	d09c      	beq.n	800ca2c <tcp_output+0x240>
      seg->next = NULL;
 800caf2:	2300      	movs	r3, #0
 800caf4:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800caf6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	f43f af6a 	beq.w	800c9d4 <tcp_output+0x1e8>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800cb00:	692b      	ldr	r3, [r5, #16]
 800cb02:	6858      	ldr	r0, [r3, #4]
 800cb04:	f7fa fb77 	bl	80071f6 <lwip_htonl>
 800cb08:	4681      	mov	r9, r0
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	6858      	ldr	r0, [r3, #4]
 800cb0e:	f7fa fb72 	bl	80071f6 <lwip_htonl>
 800cb12:	eba9 0000 	sub.w	r0, r9, r0
 800cb16:	2800      	cmp	r0, #0
 800cb18:	f6ff af60 	blt.w	800c9dc <tcp_output+0x1f0>
          useg->next = seg;
 800cb1c:	603d      	str	r5, [r7, #0]
          useg = useg->next;
 800cb1e:	462f      	mov	r7, r5
 800cb20:	e787      	b.n	800ca32 <tcp_output+0x246>
    return ERR_OK;
 800cb22:	2300      	movs	r3, #0
 800cb24:	e6d5      	b.n	800c8d2 <tcp_output+0xe6>
    return ERR_RTE;
 800cb26:	f06f 0303 	mvn.w	r3, #3
 800cb2a:	e6d2      	b.n	800c8d2 <tcp_output+0xe6>
      return ERR_RTE;
 800cb2c:	f06f 0303 	mvn.w	r3, #3
 800cb30:	e6cf      	b.n	800c8d2 <tcp_output+0xe6>
 800cb32:	bf00      	nop

0800cb34 <tcp_rexmit_rto_commit>:
{
 800cb34:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800cb36:	4604      	mov	r4, r0
 800cb38:	b150      	cbz	r0, 800cb50 <tcp_rexmit_rto_commit+0x1c>
  if (pcb->nrtx < 0xFF) {
 800cb3a:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 800cb3e:	2bff      	cmp	r3, #255	; 0xff
 800cb40:	d002      	beq.n	800cb48 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 800cb42:	3301      	adds	r3, #1
 800cb44:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
  tcp_output(pcb);
 800cb48:	4620      	mov	r0, r4
 800cb4a:	f7ff fe4f 	bl	800c7ec <tcp_output>
}
 800cb4e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800cb50:	4b03      	ldr	r3, [pc, #12]	; (800cb60 <tcp_rexmit_rto_commit+0x2c>)
 800cb52:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cb56:	4903      	ldr	r1, [pc, #12]	; (800cb64 <tcp_rexmit_rto_commit+0x30>)
 800cb58:	4803      	ldr	r0, [pc, #12]	; (800cb68 <tcp_rexmit_rto_commit+0x34>)
 800cb5a:	f007 fd4b 	bl	80145f4 <iprintf>
 800cb5e:	e7ec      	b.n	800cb3a <tcp_rexmit_rto_commit+0x6>
 800cb60:	080175f0 	.word	0x080175f0
 800cb64:	080174cc 	.word	0x080174cc
 800cb68:	08015608 	.word	0x08015608

0800cb6c <tcp_rexmit_rto>:
{
 800cb6c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cb6e:	4604      	mov	r4, r0
 800cb70:	b120      	cbz	r0, 800cb7c <tcp_rexmit_rto+0x10>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800cb72:	4620      	mov	r0, r4
 800cb74:	f7ff fcd8 	bl	800c528 <tcp_rexmit_rto_prepare>
 800cb78:	b140      	cbz	r0, 800cb8c <tcp_rexmit_rto+0x20>
}
 800cb7a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cb7c:	4b05      	ldr	r3, [pc, #20]	; (800cb94 <tcp_rexmit_rto+0x28>)
 800cb7e:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800cb82:	4905      	ldr	r1, [pc, #20]	; (800cb98 <tcp_rexmit_rto+0x2c>)
 800cb84:	4805      	ldr	r0, [pc, #20]	; (800cb9c <tcp_rexmit_rto+0x30>)
 800cb86:	f007 fd35 	bl	80145f4 <iprintf>
 800cb8a:	e7f2      	b.n	800cb72 <tcp_rexmit_rto+0x6>
    tcp_rexmit_rto_commit(pcb);
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	f7ff ffd1 	bl	800cb34 <tcp_rexmit_rto_commit>
}
 800cb92:	e7f2      	b.n	800cb7a <tcp_rexmit_rto+0xe>
 800cb94:	080175f0 	.word	0x080175f0
 800cb98:	080174b0 	.word	0x080174b0
 800cb9c:	08015608 	.word	0x08015608

0800cba0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800cba0:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800cba2:	4604      	mov	r4, r0
 800cba4:	b1c8      	cbz	r0, 800cbda <tcp_keepalive+0x3a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800cba6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800cba8:	3801      	subs	r0, #1
 800cbaa:	f7fa fb24 	bl	80071f6 <lwip_htonl>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	4611      	mov	r1, r2
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f7ff f9b5 	bl	800bf24 <tcp_output_alloc_header>
  if (p == NULL) {
 800cbba:	4605      	mov	r5, r0
 800cbbc:	b1a8      	cbz	r0, 800cbea <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	4601      	mov	r1, r0
 800cbc4:	4620      	mov	r0, r4
 800cbc6:	f7ff f8c5 	bl	800bd54 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cbca:	f104 0314 	add.w	r3, r4, #20
 800cbce:	4622      	mov	r2, r4
 800cbd0:	4629      	mov	r1, r5
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	f7ff faa6 	bl	800c124 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800cbd8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800cbda:	4b05      	ldr	r3, [pc, #20]	; (800cbf0 <tcp_keepalive+0x50>)
 800cbdc:	f640 0224 	movw	r2, #2084	; 0x824
 800cbe0:	4904      	ldr	r1, [pc, #16]	; (800cbf4 <tcp_keepalive+0x54>)
 800cbe2:	4805      	ldr	r0, [pc, #20]	; (800cbf8 <tcp_keepalive+0x58>)
 800cbe4:	f007 fd06 	bl	80145f4 <iprintf>
 800cbe8:	e7dd      	b.n	800cba6 <tcp_keepalive+0x6>
    return ERR_MEM;
 800cbea:	f04f 30ff 	mov.w	r0, #4294967295
 800cbee:	e7f3      	b.n	800cbd8 <tcp_keepalive+0x38>
 800cbf0:	080175f0 	.word	0x080175f0
 800cbf4:	080172b8 	.word	0x080172b8
 800cbf8:	08015608 	.word	0x08015608

0800cbfc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800cbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cc00:	4604      	mov	r4, r0
 800cc02:	b1b0      	cbz	r0, 800cc32 <tcp_zero_window_probe+0x36>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800cc04:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
  if (seg == NULL) {
 800cc08:	2d00      	cmp	r5, #0
 800cc0a:	d05c      	beq.n	800ccc6 <tcp_zero_window_probe+0xca>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800cc0c:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
 800cc10:	2bff      	cmp	r3, #255	; 0xff
 800cc12:	d002      	beq.n	800cc1a <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 800cc14:	3301      	adds	r3, #1
 800cc16:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cc1a:	692b      	ldr	r3, [r5, #16]
 800cc1c:	8998      	ldrh	r0, [r3, #12]
 800cc1e:	f7fa fae5 	bl	80071ec <lwip_htons>
 800cc22:	f010 0f01 	tst.w	r0, #1
 800cc26:	d00c      	beq.n	800cc42 <tcp_zero_window_probe+0x46>
 800cc28:	892b      	ldrh	r3, [r5, #8]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d03c      	beq.n	800cca8 <tcp_zero_window_probe+0xac>
 800cc2e:	2200      	movs	r2, #0
 800cc30:	e008      	b.n	800cc44 <tcp_zero_window_probe+0x48>
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cc32:	4b27      	ldr	r3, [pc, #156]	; (800ccd0 <tcp_zero_window_probe+0xd4>)
 800cc34:	f640 024f 	movw	r2, #2127	; 0x84f
 800cc38:	4926      	ldr	r1, [pc, #152]	; (800ccd4 <tcp_zero_window_probe+0xd8>)
 800cc3a:	4827      	ldr	r0, [pc, #156]	; (800ccd8 <tcp_zero_window_probe+0xdc>)
 800cc3c:	f007 fcda 	bl	80145f4 <iprintf>
 800cc40:	e7e0      	b.n	800cc04 <tcp_zero_window_probe+0x8>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cc42:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800cc44:	f002 07ff 	and.w	r7, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800cc48:	692b      	ldr	r3, [r5, #16]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	f082 0201 	eor.w	r2, r2, #1
 800cc50:	2100      	movs	r1, #0
 800cc52:	4620      	mov	r0, r4
 800cc54:	f7ff f966 	bl	800bf24 <tcp_output_alloc_header>
  if (p == NULL) {
 800cc58:	4606      	mov	r6, r0
 800cc5a:	b3b0      	cbz	r0, 800ccca <tcp_zero_window_probe+0xce>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800cc5c:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800cc60:	b327      	cbz	r7, 800ccac <tcp_zero_window_probe+0xb0>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800cc62:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 800cc66:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800cc6a:	2011      	movs	r0, #17
 800cc6c:	f7fa fabe 	bl	80071ec <lwip_htons>
 800cc70:	b200      	sxth	r0, r0
 800cc72:	4307      	orrs	r7, r0
 800cc74:	f8a8 700c 	strh.w	r7, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800cc78:	692b      	ldr	r3, [r5, #16]
 800cc7a:	6858      	ldr	r0, [r3, #4]
 800cc7c:	f7fa fabb 	bl	80071f6 <lwip_htonl>
 800cc80:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cc82:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cc84:	1a1b      	subs	r3, r3, r0
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	db1b      	blt.n	800ccc2 <tcp_zero_window_probe+0xc6>
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	4631      	mov	r1, r6
 800cc90:	4620      	mov	r0, r4
 800cc92:	f7ff f85f 	bl	800bd54 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cc96:	f104 0314 	add.w	r3, r4, #20
 800cc9a:	4622      	mov	r2, r4
 800cc9c:	4631      	mov	r1, r6
 800cc9e:	4620      	mov	r0, r4
 800cca0:	f7ff fa40 	bl	800c124 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800cca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cca8:	2201      	movs	r2, #1
 800ccaa:	e7cb      	b.n	800cc44 <tcp_zero_window_probe+0x48>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ccac:	6868      	ldr	r0, [r5, #4]
 800ccae:	8903      	ldrh	r3, [r0, #8]
 800ccb0:	892a      	ldrh	r2, [r5, #8]
 800ccb2:	1a9b      	subs	r3, r3, r2
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	f108 0114 	add.w	r1, r8, #20
 800ccbc:	f7fb ff8c 	bl	8008bd8 <pbuf_copy_partial>
 800ccc0:	e7da      	b.n	800cc78 <tcp_zero_window_probe+0x7c>
    pcb->snd_nxt = snd_nxt;
 800ccc2:	6720      	str	r0, [r4, #112]	; 0x70
 800ccc4:	e7e1      	b.n	800cc8a <tcp_zero_window_probe+0x8e>
    return ERR_OK;
 800ccc6:	2000      	movs	r0, #0
 800ccc8:	e7ec      	b.n	800cca4 <tcp_zero_window_probe+0xa8>
    return ERR_MEM;
 800ccca:	f04f 30ff 	mov.w	r0, #4294967295
 800ccce:	e7e9      	b.n	800cca4 <tcp_zero_window_probe+0xa8>
 800ccd0:	080175f0 	.word	0x080175f0
 800ccd4:	080176b4 	.word	0x080176b4
 800ccd8:	08015608 	.word	0x08015608

0800ccdc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ccdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccde:	4605      	mov	r5, r0
 800cce0:	460f      	mov	r7, r1
 800cce2:	4616      	mov	r6, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cce4:	2007      	movs	r0, #7
 800cce6:	f7fb f8bf 	bl	8007e68 <memp_malloc>
  if (timeout == NULL) {
 800ccea:	b1a8      	cbz	r0, 800cd18 <sys_timeout_abs+0x3c>
 800ccec:	4604      	mov	r4, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
 800ccf2:	6087      	str	r7, [r0, #8]
  timeout->arg = arg;
 800ccf4:	60c6      	str	r6, [r0, #12]
  timeout->time = abs_time;
 800ccf6:	6045      	str	r5, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ccf8:	4b10      	ldr	r3, [pc, #64]	; (800cd3c <sys_timeout_abs+0x60>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	b19b      	cbz	r3, 800cd26 <sys_timeout_abs+0x4a>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ccfe:	685a      	ldr	r2, [r3, #4]
 800cd00:	1aaa      	subs	r2, r5, r2
 800cd02:	2a00      	cmp	r2, #0
 800cd04:	db12      	blt.n	800cd2c <sys_timeout_abs+0x50>
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800cd06:	b1a3      	cbz	r3, 800cd32 <sys_timeout_abs+0x56>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	b19a      	cbz	r2, 800cd34 <sys_timeout_abs+0x58>
 800cd0c:	6851      	ldr	r1, [r2, #4]
 800cd0e:	1a69      	subs	r1, r5, r1
 800cd10:	2900      	cmp	r1, #0
 800cd12:	db0f      	blt.n	800cd34 <sys_timeout_abs+0x58>
    for (t = next_timeout; t != NULL; t = t->next) {
 800cd14:	4613      	mov	r3, r2
 800cd16:	e7f6      	b.n	800cd06 <sys_timeout_abs+0x2a>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800cd18:	4b09      	ldr	r3, [pc, #36]	; (800cd40 <sys_timeout_abs+0x64>)
 800cd1a:	22be      	movs	r2, #190	; 0xbe
 800cd1c:	4909      	ldr	r1, [pc, #36]	; (800cd44 <sys_timeout_abs+0x68>)
 800cd1e:	480a      	ldr	r0, [pc, #40]	; (800cd48 <sys_timeout_abs+0x6c>)
 800cd20:	f007 fc68 	bl	80145f4 <iprintf>
 800cd24:	e005      	b.n	800cd32 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800cd26:	4b05      	ldr	r3, [pc, #20]	; (800cd3c <sys_timeout_abs+0x60>)
 800cd28:	6018      	str	r0, [r3, #0]
    return;
 800cd2a:	e002      	b.n	800cd32 <sys_timeout_abs+0x56>
    timeout->next = next_timeout;
 800cd2c:	6003      	str	r3, [r0, #0]
    next_timeout = timeout;
 800cd2e:	4b03      	ldr	r3, [pc, #12]	; (800cd3c <sys_timeout_abs+0x60>)
 800cd30:	6018      	str	r0, [r3, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 800cd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        timeout->next = t->next;
 800cd34:	6022      	str	r2, [r4, #0]
        t->next = timeout;
 800cd36:	601c      	str	r4, [r3, #0]
        break;
 800cd38:	e7fb      	b.n	800cd32 <sys_timeout_abs+0x56>
 800cd3a:	bf00      	nop
 800cd3c:	20001774 	.word	0x20001774
 800cd40:	08017760 	.word	0x08017760
 800cd44:	08017794 	.word	0x08017794
 800cd48:	08015608 	.word	0x08015608

0800cd4c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800cd4c:	b538      	push	{r3, r4, r5, lr}
 800cd4e:	4604      	mov	r4, r0
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800cd50:	6843      	ldr	r3, [r0, #4]
 800cd52:	4798      	blx	r3

  now = sys_now();
 800cd54:	f7f6 fec8 	bl	8003ae8 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800cd58:	6825      	ldr	r5, [r4, #0]
 800cd5a:	4b09      	ldr	r3, [pc, #36]	; (800cd80 <lwip_cyclic_timer+0x34>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800cd60:	1a1a      	subs	r2, r3, r0
 800cd62:	2a00      	cmp	r2, #0
 800cd64:	db05      	blt.n	800cd72 <lwip_cyclic_timer+0x26>
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800cd66:	4622      	mov	r2, r4
 800cd68:	4906      	ldr	r1, [pc, #24]	; (800cd84 <lwip_cyclic_timer+0x38>)
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7ff ffb6 	bl	800ccdc <sys_timeout_abs>
#endif
  }
}
 800cd70:	bd38      	pop	{r3, r4, r5, pc}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800cd72:	4622      	mov	r2, r4
 800cd74:	4903      	ldr	r1, [pc, #12]	; (800cd84 <lwip_cyclic_timer+0x38>)
 800cd76:	4428      	add	r0, r5
 800cd78:	f7ff ffb0 	bl	800ccdc <sys_timeout_abs>
 800cd7c:	e7f8      	b.n	800cd70 <lwip_cyclic_timer+0x24>
 800cd7e:	bf00      	nop
 800cd80:	20001770 	.word	0x20001770
 800cd84:	0800cd4d 	.word	0x0800cd4d

0800cd88 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800cd88:	b570      	push	{r4, r5, r6, lr}
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	460d      	mov	r5, r1
 800cd8e:	4616      	mov	r6, r2
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800cd90:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800cd94:	d207      	bcs.n	800cda6 <sys_timeout+0x1e>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800cd96:	f7f6 fea7 	bl	8003ae8 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800cd9a:	4632      	mov	r2, r6
 800cd9c:	4629      	mov	r1, r5
 800cd9e:	4420      	add	r0, r4
 800cda0:	f7ff ff9c 	bl	800ccdc <sys_timeout_abs>
#endif
}
 800cda4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800cda6:	4b04      	ldr	r3, [pc, #16]	; (800cdb8 <sys_timeout+0x30>)
 800cda8:	f240 1229 	movw	r2, #297	; 0x129
 800cdac:	4903      	ldr	r1, [pc, #12]	; (800cdbc <sys_timeout+0x34>)
 800cdae:	4804      	ldr	r0, [pc, #16]	; (800cdc0 <sys_timeout+0x38>)
 800cdb0:	f007 fc20 	bl	80145f4 <iprintf>
 800cdb4:	e7ef      	b.n	800cd96 <sys_timeout+0xe>
 800cdb6:	bf00      	nop
 800cdb8:	08017760 	.word	0x08017760
 800cdbc:	08017728 	.word	0x08017728
 800cdc0:	08015608 	.word	0x08015608

0800cdc4 <tcp_timer_needed>:
{
 800cdc4:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800cdc6:	4b0a      	ldr	r3, [pc, #40]	; (800cdf0 <tcp_timer_needed+0x2c>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	b953      	cbnz	r3, 800cde2 <tcp_timer_needed+0x1e>
 800cdcc:	4b09      	ldr	r3, [pc, #36]	; (800cdf4 <tcp_timer_needed+0x30>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	b143      	cbz	r3, 800cde4 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800cdd2:	4b07      	ldr	r3, [pc, #28]	; (800cdf0 <tcp_timer_needed+0x2c>)
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cdd8:	2200      	movs	r2, #0
 800cdda:	4907      	ldr	r1, [pc, #28]	; (800cdf8 <tcp_timer_needed+0x34>)
 800cddc:	20fa      	movs	r0, #250	; 0xfa
 800cdde:	f7ff ffd3 	bl	800cd88 <sys_timeout>
}
 800cde2:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800cde4:	4b05      	ldr	r3, [pc, #20]	; (800cdfc <tcp_timer_needed+0x38>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d1f2      	bne.n	800cdd2 <tcp_timer_needed+0xe>
 800cdec:	e7f9      	b.n	800cde2 <tcp_timer_needed+0x1e>
 800cdee:	bf00      	nop
 800cdf0:	20001778 	.word	0x20001778
 800cdf4:	20008c44 	.word	0x20008c44
 800cdf8:	0800ce01 	.word	0x0800ce01
 800cdfc:	20008c54 	.word	0x20008c54

0800ce00 <tcpip_tcp_timer>:
{
 800ce00:	b508      	push	{r3, lr}
  tcp_tmr();
 800ce02:	f7fd f907 	bl	800a014 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ce06:	4b08      	ldr	r3, [pc, #32]	; (800ce28 <tcpip_tcp_timer+0x28>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	b913      	cbnz	r3, 800ce12 <tcpip_tcp_timer+0x12>
 800ce0c:	4b07      	ldr	r3, [pc, #28]	; (800ce2c <tcpip_tcp_timer+0x2c>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	b12b      	cbz	r3, 800ce1e <tcpip_tcp_timer+0x1e>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ce12:	2200      	movs	r2, #0
 800ce14:	4906      	ldr	r1, [pc, #24]	; (800ce30 <tcpip_tcp_timer+0x30>)
 800ce16:	20fa      	movs	r0, #250	; 0xfa
 800ce18:	f7ff ffb6 	bl	800cd88 <sys_timeout>
}
 800ce1c:	bd08      	pop	{r3, pc}
    tcpip_tcp_timer_active = 0;
 800ce1e:	4b05      	ldr	r3, [pc, #20]	; (800ce34 <tcpip_tcp_timer+0x34>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	601a      	str	r2, [r3, #0]
}
 800ce24:	e7fa      	b.n	800ce1c <tcpip_tcp_timer+0x1c>
 800ce26:	bf00      	nop
 800ce28:	20008c44 	.word	0x20008c44
 800ce2c:	20008c54 	.word	0x20008c54
 800ce30:	0800ce01 	.word	0x0800ce01
 800ce34:	20001778 	.word	0x20001778

0800ce38 <sys_timeouts_init>:
{
 800ce38:	b510      	push	{r4, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ce3a:	2401      	movs	r4, #1
 800ce3c:	e008      	b.n	800ce50 <sys_timeouts_init+0x18>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ce3e:	4b06      	ldr	r3, [pc, #24]	; (800ce58 <sys_timeouts_init+0x20>)
 800ce40:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 800ce44:	4905      	ldr	r1, [pc, #20]	; (800ce5c <sys_timeouts_init+0x24>)
 800ce46:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 800ce4a:	f7ff ff9d 	bl	800cd88 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ce4e:	3401      	adds	r4, #1
 800ce50:	2c09      	cmp	r4, #9
 800ce52:	d9f4      	bls.n	800ce3e <sys_timeouts_init+0x6>
}
 800ce54:	bd10      	pop	{r4, pc}
 800ce56:	bf00      	nop
 800ce58:	080176d8 	.word	0x080176d8
 800ce5c:	0800cd4d 	.word	0x0800cd4d

0800ce60 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ce60:	b570      	push	{r4, r5, r6, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ce62:	f7f6 fe41 	bl	8003ae8 <sys_now>
 800ce66:	4605      	mov	r5, r0
 800ce68:	e011      	b.n	800ce8e <sys_check_timeouts+0x2e>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800ce6a:	4b0e      	ldr	r3, [pc, #56]	; (800cea4 <sys_check_timeouts+0x44>)
 800ce6c:	6819      	ldr	r1, [r3, #0]
    if (tmptimeout == NULL) {
 800ce6e:	b1c1      	cbz	r1, 800cea2 <sys_check_timeouts+0x42>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ce70:	684b      	ldr	r3, [r1, #4]
 800ce72:	1aea      	subs	r2, r5, r3
 800ce74:	2a00      	cmp	r2, #0
 800ce76:	db14      	blt.n	800cea2 <sys_check_timeouts+0x42>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ce78:	6808      	ldr	r0, [r1, #0]
 800ce7a:	4a0a      	ldr	r2, [pc, #40]	; (800cea4 <sys_check_timeouts+0x44>)
 800ce7c:	6010      	str	r0, [r2, #0]
    handler = tmptimeout->h;
 800ce7e:	688c      	ldr	r4, [r1, #8]
    arg = tmptimeout->arg;
 800ce80:	68ce      	ldr	r6, [r1, #12]
    current_timeout_due_time = tmptimeout->time;
 800ce82:	4a09      	ldr	r2, [pc, #36]	; (800cea8 <sys_check_timeouts+0x48>)
 800ce84:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ce86:	2007      	movs	r0, #7
 800ce88:	f7fb f808 	bl	8007e9c <memp_free>
    if (handler != NULL) {
 800ce8c:	b934      	cbnz	r4, 800ce9c <sys_check_timeouts+0x3c>
    PBUF_CHECK_FREE_OOSEQ();
 800ce8e:	4b07      	ldr	r3, [pc, #28]	; (800ceac <sys_check_timeouts+0x4c>)
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d0e9      	beq.n	800ce6a <sys_check_timeouts+0xa>
 800ce96:	f7fb fb9d 	bl	80085d4 <pbuf_free_ooseq>
 800ce9a:	e7e6      	b.n	800ce6a <sys_check_timeouts+0xa>
      handler(arg);
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	47a0      	blx	r4
 800cea0:	e7f5      	b.n	800ce8e <sys_check_timeouts+0x2e>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800cea2:	bd70      	pop	{r4, r5, r6, pc}
 800cea4:	20001774 	.word	0x20001774
 800cea8:	20001770 	.word	0x20001770
 800ceac:	20008c3c 	.word	0x20008c3c

0800ceb0 <udp_new_port>:
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  u16_t n = 0;
 800ceb0:	2000      	movs	r0, #0
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ceb2:	4a10      	ldr	r2, [pc, #64]	; (800cef4 <udp_new_port+0x44>)
 800ceb4:	8813      	ldrh	r3, [r2, #0]
 800ceb6:	1c59      	adds	r1, r3, #1
 800ceb8:	8011      	strh	r1, [r2, #0]
 800ceba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d009      	beq.n	800ced6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cec2:	4b0d      	ldr	r3, [pc, #52]	; (800cef8 <udp_new_port+0x48>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	b193      	cbz	r3, 800ceee <udp_new_port+0x3e>
    if (pcb->local_port == udp_port) {
 800cec8:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 800ceca:	4a0a      	ldr	r2, [pc, #40]	; (800cef4 <udp_new_port+0x44>)
 800cecc:	8812      	ldrh	r2, [r2, #0]
 800cece:	4291      	cmp	r1, r2
 800ced0:	d006      	beq.n	800cee0 <udp_new_port+0x30>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ced2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced4:	e7f7      	b.n	800cec6 <udp_new_port+0x16>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ced6:	4b07      	ldr	r3, [pc, #28]	; (800cef4 <udp_new_port+0x44>)
 800ced8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800cedc:	801a      	strh	r2, [r3, #0]
 800cede:	e7f0      	b.n	800cec2 <udp_new_port+0x12>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800cee0:	3001      	adds	r0, #1
 800cee2:	b280      	uxth	r0, r0
 800cee4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800cee8:	d3e3      	bcc.n	800ceb2 <udp_new_port+0x2>
        return 0;
 800ceea:	2000      	movs	r0, #0
      }
      goto again;
    }
  }
  return udp_port;
}
 800ceec:	4770      	bx	lr
  return udp_port;
 800ceee:	4b01      	ldr	r3, [pc, #4]	; (800cef4 <udp_new_port+0x44>)
 800cef0:	8818      	ldrh	r0, [r3, #0]
 800cef2:	4770      	bx	lr
 800cef4:	20000016 	.word	0x20000016
 800cef8:	20008c5c 	.word	0x20008c5c

0800cefc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800cefc:	b570      	push	{r4, r5, r6, lr}
 800cefe:	460d      	mov	r5, r1
 800cf00:	4616      	mov	r6, r2
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800cf02:	4604      	mov	r4, r0
 800cf04:	b168      	cbz	r0, 800cf22 <udp_input_local_match+0x26>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800cf06:	b19d      	cbz	r5, 800cf30 <udp_input_local_match+0x34>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cf08:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800cf0c:	b1ba      	cbz	r2, 800cf3e <udp_input_local_match+0x42>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cf0e:	4b4a      	ldr	r3, [pc, #296]	; (800d038 <udp_input_local_match+0x13c>)
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800cf16:	3301      	adds	r3, #1
 800cf18:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d00f      	beq.n	800cf3e <udp_input_local_match+0x42>
    return 0;
 800cf1e:	2000      	movs	r0, #0
 800cf20:	e016      	b.n	800cf50 <udp_input_local_match+0x54>
  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800cf22:	4b46      	ldr	r3, [pc, #280]	; (800d03c <udp_input_local_match+0x140>)
 800cf24:	2287      	movs	r2, #135	; 0x87
 800cf26:	4946      	ldr	r1, [pc, #280]	; (800d040 <udp_input_local_match+0x144>)
 800cf28:	4846      	ldr	r0, [pc, #280]	; (800d044 <udp_input_local_match+0x148>)
 800cf2a:	f007 fb63 	bl	80145f4 <iprintf>
 800cf2e:	e7ea      	b.n	800cf06 <udp_input_local_match+0xa>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800cf30:	4b42      	ldr	r3, [pc, #264]	; (800d03c <udp_input_local_match+0x140>)
 800cf32:	2288      	movs	r2, #136	; 0x88
 800cf34:	4944      	ldr	r1, [pc, #272]	; (800d048 <udp_input_local_match+0x14c>)
 800cf36:	4843      	ldr	r0, [pc, #268]	; (800d044 <udp_input_local_match+0x148>)
 800cf38:	f007 fb5c 	bl	80145f4 <iprintf>
 800cf3c:	e7e4      	b.n	800cf08 <udp_input_local_match+0xc>
  }

  /* Dual-stack: PCBs listening to any IP type also listen to any IP address */
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
 800cf3e:	7c23      	ldrb	r3, [r4, #16]
 800cf40:	2b2e      	cmp	r3, #46	; 0x2e
 800cf42:	d066      	beq.n	800d012 <udp_input_local_match+0x116>
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST_RECV */
    return 1;
  }

  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
 800cf44:	4a3c      	ldr	r2, [pc, #240]	; (800d038 <udp_input_local_match+0x13c>)
 800cf46:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d001      	beq.n	800cf52 <udp_input_local_match+0x56>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
        return 1;
      }
  }

  return 0;
 800cf4e:	2000      	movs	r0, #0
}
 800cf50:	bd70      	pop	{r4, r5, r6, pc}
    if (broadcast != 0) {
 800cf52:	b17e      	cbz	r6, 800cf74 <udp_input_local_match+0x78>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cf54:	2c00      	cmp	r4, #0
 800cf56:	d05e      	beq.n	800d016 <udp_input_local_match+0x11a>
 800cf58:	6823      	ldr	r3, [r4, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d05d      	beq.n	800d01a <udp_input_local_match+0x11e>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cf5e:	4a36      	ldr	r2, [pc, #216]	; (800d038 <udp_input_local_match+0x13c>)
 800cf60:	6a92      	ldr	r2, [r2, #40]	; 0x28
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cf62:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cf66:	d05a      	beq.n	800d01e <udp_input_local_match+0x122>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800cf68:	6969      	ldr	r1, [r5, #20]
 800cf6a:	4053      	eors	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cf6c:	420b      	tst	r3, r1
 800cf6e:	d058      	beq.n	800d022 <udp_input_local_match+0x126>
  return 0;
 800cf70:	2000      	movs	r0, #0
 800cf72:	e7ed      	b.n	800cf50 <udp_input_local_match+0x54>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cf74:	2c00      	cmp	r4, #0
 800cf76:	d056      	beq.n	800d026 <udp_input_local_match+0x12a>
 800cf78:	2b06      	cmp	r3, #6
 800cf7a:	d00e      	beq.n	800cf9a <udp_input_local_match+0x9e>
 800cf7c:	b32c      	cbz	r4, 800cfca <udp_input_local_match+0xce>
 800cf7e:	6822      	ldr	r2, [r4, #0]
 800cf80:	bb2a      	cbnz	r2, 800cfce <udp_input_local_match+0xd2>
 800cf82:	2201      	movs	r2, #1
 800cf84:	2a00      	cmp	r2, #0
 800cf86:	d150      	bne.n	800d02a <udp_input_local_match+0x12e>
 800cf88:	2b06      	cmp	r3, #6
 800cf8a:	d022      	beq.n	800cfd2 <udp_input_local_match+0xd6>
 800cf8c:	6822      	ldr	r2, [r4, #0]
 800cf8e:	4b2a      	ldr	r3, [pc, #168]	; (800d038 <udp_input_local_match+0x13c>)
 800cf90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d04d      	beq.n	800d032 <udp_input_local_match+0x136>
  return 0;
 800cf96:	2000      	movs	r0, #0
 800cf98:	e7da      	b.n	800cf50 <udp_input_local_match+0x54>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cf9a:	b14c      	cbz	r4, 800cfb0 <udp_input_local_match+0xb4>
 800cf9c:	6822      	ldr	r2, [r4, #0]
 800cf9e:	b94a      	cbnz	r2, 800cfb4 <udp_input_local_match+0xb8>
 800cfa0:	6862      	ldr	r2, [r4, #4]
 800cfa2:	b962      	cbnz	r2, 800cfbe <udp_input_local_match+0xc2>
 800cfa4:	68a2      	ldr	r2, [r4, #8]
 800cfa6:	b962      	cbnz	r2, 800cfc2 <udp_input_local_match+0xc6>
 800cfa8:	68e2      	ldr	r2, [r4, #12]
 800cfaa:	b162      	cbz	r2, 800cfc6 <udp_input_local_match+0xca>
 800cfac:	2200      	movs	r2, #0
 800cfae:	e002      	b.n	800cfb6 <udp_input_local_match+0xba>
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	e000      	b.n	800cfb6 <udp_input_local_match+0xba>
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	2a00      	cmp	r2, #0
 800cfb8:	d0e6      	beq.n	800cf88 <udp_input_local_match+0x8c>
        return 1;
 800cfba:	2001      	movs	r0, #1
 800cfbc:	e7c8      	b.n	800cf50 <udp_input_local_match+0x54>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	e7f9      	b.n	800cfb6 <udp_input_local_match+0xba>
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	e7f7      	b.n	800cfb6 <udp_input_local_match+0xba>
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	e7f5      	b.n	800cfb6 <udp_input_local_match+0xba>
 800cfca:	2201      	movs	r2, #1
 800cfcc:	e7da      	b.n	800cf84 <udp_input_local_match+0x88>
 800cfce:	2200      	movs	r2, #0
 800cfd0:	e7d8      	b.n	800cf84 <udp_input_local_match+0x88>
 800cfd2:	6822      	ldr	r2, [r4, #0]
 800cfd4:	4b18      	ldr	r3, [pc, #96]	; (800d038 <udp_input_local_match+0x13c>)
 800cfd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d003      	beq.n	800cfe4 <udp_input_local_match+0xe8>
 800cfdc:	2300      	movs	r3, #0
 800cfde:	bb33      	cbnz	r3, 800d02e <udp_input_local_match+0x132>
  return 0;
 800cfe0:	2000      	movs	r0, #0
 800cfe2:	e7b5      	b.n	800cf50 <udp_input_local_match+0x54>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cfe4:	6862      	ldr	r2, [r4, #4]
 800cfe6:	4b14      	ldr	r3, [pc, #80]	; (800d038 <udp_input_local_match+0x13c>)
 800cfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d001      	beq.n	800cff2 <udp_input_local_match+0xf6>
 800cfee:	2300      	movs	r3, #0
 800cff0:	e7f5      	b.n	800cfde <udp_input_local_match+0xe2>
 800cff2:	68a2      	ldr	r2, [r4, #8]
 800cff4:	4b10      	ldr	r3, [pc, #64]	; (800d038 <udp_input_local_match+0x13c>)
 800cff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d001      	beq.n	800d000 <udp_input_local_match+0x104>
 800cffc:	2300      	movs	r3, #0
 800cffe:	e7ee      	b.n	800cfde <udp_input_local_match+0xe2>
 800d000:	68e2      	ldr	r2, [r4, #12]
 800d002:	4b0d      	ldr	r3, [pc, #52]	; (800d038 <udp_input_local_match+0x13c>)
 800d004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d006:	429a      	cmp	r2, r3
 800d008:	d001      	beq.n	800d00e <udp_input_local_match+0x112>
 800d00a:	2300      	movs	r3, #0
 800d00c:	e7e7      	b.n	800cfde <udp_input_local_match+0xe2>
 800d00e:	2301      	movs	r3, #1
 800d010:	e7e5      	b.n	800cfde <udp_input_local_match+0xe2>
    return 1;
 800d012:	2001      	movs	r0, #1
 800d014:	e79c      	b.n	800cf50 <udp_input_local_match+0x54>
          return 1;
 800d016:	2001      	movs	r0, #1
 800d018:	e79a      	b.n	800cf50 <udp_input_local_match+0x54>
 800d01a:	2001      	movs	r0, #1
 800d01c:	e798      	b.n	800cf50 <udp_input_local_match+0x54>
 800d01e:	2001      	movs	r0, #1
 800d020:	e796      	b.n	800cf50 <udp_input_local_match+0x54>
 800d022:	2001      	movs	r0, #1
 800d024:	e794      	b.n	800cf50 <udp_input_local_match+0x54>
        return 1;
 800d026:	2001      	movs	r0, #1
 800d028:	e792      	b.n	800cf50 <udp_input_local_match+0x54>
 800d02a:	2001      	movs	r0, #1
 800d02c:	e790      	b.n	800cf50 <udp_input_local_match+0x54>
 800d02e:	2001      	movs	r0, #1
 800d030:	e78e      	b.n	800cf50 <udp_input_local_match+0x54>
 800d032:	2001      	movs	r0, #1
 800d034:	e78c      	b.n	800cf50 <udp_input_local_match+0x54>
 800d036:	bf00      	nop
 800d038:	20004b84 	.word	0x20004b84
 800d03c:	08017874 	.word	0x08017874
 800d040:	080178a4 	.word	0x080178a4
 800d044:	08015608 	.word	0x08015608
 800d048:	080178c8 	.word	0x080178c8

0800d04c <udp_init>:
{
 800d04c:	b508      	push	{r3, lr}
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d04e:	f007 fb4d 	bl	80146ec <rand>
 800d052:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800d056:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800d05a:	4b01      	ldr	r3, [pc, #4]	; (800d060 <udp_init+0x14>)
 800d05c:	8018      	strh	r0, [r3, #0]
}
 800d05e:	bd08      	pop	{r3, pc}
 800d060:	20000016 	.word	0x20000016

0800d064 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d068:	b083      	sub	sp, #12
 800d06a:	460f      	mov	r7, r1

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d06c:	4681      	mov	r9, r0
 800d06e:	b1d8      	cbz	r0, 800d0a8 <udp_input+0x44>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d070:	b30f      	cbz	r7, 800d0b6 <udp_input+0x52>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d072:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800d076:	2b07      	cmp	r3, #7
 800d078:	d924      	bls.n	800d0c4 <udp_input+0x60>
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d07a:	f8d9 4004 	ldr.w	r4, [r9, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d07e:	4b91      	ldr	r3, [pc, #580]	; (800d2c4 <udp_input+0x260>)
 800d080:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d084:	2b06      	cmp	r3, #6
 800d086:	d123      	bne.n	800d0d0 <udp_input+0x6c>
 800d088:	f04f 0800 	mov.w	r8, #0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d08c:	8820      	ldrh	r0, [r4, #0]
 800d08e:	f7fa f8ad 	bl	80071ec <lwip_htons>
 800d092:	4683      	mov	fp, r0
  dest = lwip_ntohs(udphdr->dest);
 800d094:	8860      	ldrh	r0, [r4, #2]
 800d096:	f7fa f8a9 	bl	80071ec <lwip_htons>
 800d09a:	4606      	mov	r6, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d09c:	4b8a      	ldr	r3, [pc, #552]	; (800d2c8 <udp_input+0x264>)
 800d09e:	681c      	ldr	r4, [r3, #0]
  uncon_pcb = NULL;
 800d0a0:	f04f 0a00 	mov.w	sl, #0
  prev = NULL;
 800d0a4:	4655      	mov	r5, sl
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0a6:	e020      	b.n	800d0ea <udp_input+0x86>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d0a8:	4b88      	ldr	r3, [pc, #544]	; (800d2cc <udp_input+0x268>)
 800d0aa:	22cf      	movs	r2, #207	; 0xcf
 800d0ac:	4988      	ldr	r1, [pc, #544]	; (800d2d0 <udp_input+0x26c>)
 800d0ae:	4889      	ldr	r0, [pc, #548]	; (800d2d4 <udp_input+0x270>)
 800d0b0:	f007 faa0 	bl	80145f4 <iprintf>
 800d0b4:	e7dc      	b.n	800d070 <udp_input+0xc>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d0b6:	4b85      	ldr	r3, [pc, #532]	; (800d2cc <udp_input+0x268>)
 800d0b8:	22d0      	movs	r2, #208	; 0xd0
 800d0ba:	4987      	ldr	r1, [pc, #540]	; (800d2d8 <udp_input+0x274>)
 800d0bc:	4885      	ldr	r0, [pc, #532]	; (800d2d4 <udp_input+0x270>)
 800d0be:	f007 fa99 	bl	80145f4 <iprintf>
 800d0c2:	e7d6      	b.n	800d072 <udp_input+0xe>
    pbuf_free(p);
 800d0c4:	4648      	mov	r0, r9
 800d0c6:	f7fb fb2f 	bl	8008728 <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d0ca:	b003      	add	sp, #12
 800d0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d0d0:	4b7c      	ldr	r3, [pc, #496]	; (800d2c4 <udp_input+0x260>)
 800d0d2:	6819      	ldr	r1, [r3, #0]
 800d0d4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800d0d6:	f003 f997 	bl	8010408 <ip4_addr_isbroadcast_u32>
 800d0da:	4680      	mov	r8, r0
 800d0dc:	e7d6      	b.n	800d08c <udp_input+0x28>
          uncon_pcb = pcb;
 800d0de:	46a2      	mov	sl, r4
      if ((pcb->remote_port == src) &&
 800d0e0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800d0e2:	459b      	cmp	fp, r3
 800d0e4:	d02e      	beq.n	800d144 <udp_input+0xe0>
    prev = pcb;
 800d0e6:	4625      	mov	r5, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0e8:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800d0ea:	2c00      	cmp	r4, #0
 800d0ec:	d051      	beq.n	800d192 <udp_input+0x12e>
    if ((pcb->local_port == dest) &&
 800d0ee:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800d0f0:	429e      	cmp	r6, r3
 800d0f2:	d1f8      	bne.n	800d0e6 <udp_input+0x82>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d0f4:	4642      	mov	r2, r8
 800d0f6:	4639      	mov	r1, r7
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f7ff feff 	bl	800cefc <udp_input_local_match>
    if ((pcb->local_port == dest) &&
 800d0fe:	2800      	cmp	r0, #0
 800d100:	d0f1      	beq.n	800d0e6 <udp_input+0x82>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d102:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800d106:	f013 0f04 	tst.w	r3, #4
 800d10a:	d1e9      	bne.n	800d0e0 <udp_input+0x7c>
        if (uncon_pcb == NULL) {
 800d10c:	f1ba 0f00 	cmp.w	sl, #0
 800d110:	d0e5      	beq.n	800d0de <udp_input+0x7a>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d112:	f1b8 0f00 	cmp.w	r8, #0
 800d116:	d0e3      	beq.n	800d0e0 <udp_input+0x7c>
 800d118:	4b6a      	ldr	r3, [pc, #424]	; (800d2c4 <udp_input+0x260>)
 800d11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d120:	d1de      	bne.n	800d0e0 <udp_input+0x7c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d122:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800d126:	b923      	cbnz	r3, 800d132 <udp_input+0xce>
 800d128:	f8da 2000 	ldr.w	r2, [sl]
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	429a      	cmp	r2, r3
 800d130:	d0d6      	beq.n	800d0e0 <udp_input+0x7c>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d132:	7c23      	ldrb	r3, [r4, #16]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d1d3      	bne.n	800d0e0 <udp_input+0x7c>
 800d138:	6822      	ldr	r2, [r4, #0]
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d1cf      	bne.n	800d0e0 <udp_input+0x7c>
              uncon_pcb = pcb;
 800d140:	46a2      	mov	sl, r4
 800d142:	e7cd      	b.n	800d0e0 <udp_input+0x7c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d144:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
      if ((pcb->remote_port == src) &&
 800d148:	2b06      	cmp	r3, #6
 800d14a:	d00e      	beq.n	800d16a <udp_input+0x106>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d14c:	6962      	ldr	r2, [r4, #20]
 800d14e:	b1ca      	cbz	r2, 800d184 <udp_input+0x120>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d150:	4a5c      	ldr	r2, [pc, #368]	; (800d2c4 <udp_input+0x260>)
 800d152:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
      if ((pcb->remote_port == src) &&
 800d156:	4293      	cmp	r3, r2
 800d158:	d1c5      	bne.n	800d0e6 <udp_input+0x82>
 800d15a:	2b06      	cmp	r3, #6
 800d15c:	d036      	beq.n	800d1cc <udp_input+0x168>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d15e:	6962      	ldr	r2, [r4, #20]
 800d160:	4b58      	ldr	r3, [pc, #352]	; (800d2c4 <udp_input+0x260>)
 800d162:	695b      	ldr	r3, [r3, #20]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d164:	429a      	cmp	r2, r3
 800d166:	d1be      	bne.n	800d0e6 <udp_input+0x82>
 800d168:	e00c      	b.n	800d184 <udp_input+0x120>
 800d16a:	6962      	ldr	r2, [r4, #20]
 800d16c:	b93a      	cbnz	r2, 800d17e <udp_input+0x11a>
 800d16e:	69a2      	ldr	r2, [r4, #24]
 800d170:	bb32      	cbnz	r2, 800d1c0 <udp_input+0x15c>
 800d172:	69e2      	ldr	r2, [r4, #28]
 800d174:	bb32      	cbnz	r2, 800d1c4 <udp_input+0x160>
 800d176:	6a22      	ldr	r2, [r4, #32]
 800d178:	b332      	cbz	r2, 800d1c8 <udp_input+0x164>
 800d17a:	2200      	movs	r2, #0
 800d17c:	e000      	b.n	800d180 <udp_input+0x11c>
 800d17e:	2200      	movs	r2, #0
      if ((pcb->remote_port == src) &&
 800d180:	2a00      	cmp	r2, #0
 800d182:	d0e5      	beq.n	800d150 <udp_input+0xec>
        if (prev != NULL) {
 800d184:	b12d      	cbz	r5, 800d192 <udp_input+0x12e>
          prev->next = pcb->next;
 800d186:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d188:	62eb      	str	r3, [r5, #44]	; 0x2c
          pcb->next = udp_pcbs;
 800d18a:	4b4f      	ldr	r3, [pc, #316]	; (800d2c8 <udp_input+0x264>)
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	62e2      	str	r2, [r4, #44]	; 0x2c
          udp_pcbs = pcb;
 800d190:	601c      	str	r4, [r3, #0]
  if (pcb == NULL) {
 800d192:	2c00      	cmp	r4, #0
 800d194:	d03a      	beq.n	800d20c <udp_input+0x1a8>
  if (pcb != NULL) {
 800d196:	2c00      	cmp	r4, #0
 800d198:	d03a      	beq.n	800d210 <udp_input+0x1ac>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d19a:	2108      	movs	r1, #8
 800d19c:	4648      	mov	r0, r9
 800d19e:	f7fb fa7d 	bl	800869c <pbuf_remove_header>
 800d1a2:	2800      	cmp	r0, #0
 800d1a4:	d151      	bne.n	800d24a <udp_input+0x1e6>
    if (pcb != NULL) {
 800d1a6:	2c00      	cmp	r4, #0
 800d1a8:	d05e      	beq.n	800d268 <udp_input+0x204>
      if (pcb->recv != NULL) {
 800d1aa:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800d1ac:	2d00      	cmp	r5, #0
 800d1ae:	d057      	beq.n	800d260 <udp_input+0x1fc>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d1b0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800d1b2:	f8cd b000 	str.w	fp, [sp]
 800d1b6:	4b49      	ldr	r3, [pc, #292]	; (800d2dc <udp_input+0x278>)
 800d1b8:	464a      	mov	r2, r9
 800d1ba:	4621      	mov	r1, r4
 800d1bc:	47a8      	blx	r5
 800d1be:	e784      	b.n	800d0ca <udp_input+0x66>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	e7dd      	b.n	800d180 <udp_input+0x11c>
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	e7db      	b.n	800d180 <udp_input+0x11c>
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	e7d9      	b.n	800d180 <udp_input+0x11c>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d1cc:	6962      	ldr	r2, [r4, #20]
 800d1ce:	4b3d      	ldr	r3, [pc, #244]	; (800d2c4 <udp_input+0x260>)
 800d1d0:	695b      	ldr	r3, [r3, #20]
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d003      	beq.n	800d1de <udp_input+0x17a>
 800d1d6:	2300      	movs	r3, #0
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d084      	beq.n	800d0e6 <udp_input+0x82>
 800d1dc:	e7d2      	b.n	800d184 <udp_input+0x120>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d1de:	69a2      	ldr	r2, [r4, #24]
 800d1e0:	4b38      	ldr	r3, [pc, #224]	; (800d2c4 <udp_input+0x260>)
 800d1e2:	699b      	ldr	r3, [r3, #24]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d001      	beq.n	800d1ec <udp_input+0x188>
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	e7f5      	b.n	800d1d8 <udp_input+0x174>
 800d1ec:	69e2      	ldr	r2, [r4, #28]
 800d1ee:	4b35      	ldr	r3, [pc, #212]	; (800d2c4 <udp_input+0x260>)
 800d1f0:	69db      	ldr	r3, [r3, #28]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d001      	beq.n	800d1fa <udp_input+0x196>
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	e7ee      	b.n	800d1d8 <udp_input+0x174>
 800d1fa:	6a22      	ldr	r2, [r4, #32]
 800d1fc:	4b31      	ldr	r3, [pc, #196]	; (800d2c4 <udp_input+0x260>)
 800d1fe:	6a1b      	ldr	r3, [r3, #32]
 800d200:	429a      	cmp	r2, r3
 800d202:	d001      	beq.n	800d208 <udp_input+0x1a4>
 800d204:	2300      	movs	r3, #0
 800d206:	e7e7      	b.n	800d1d8 <udp_input+0x174>
 800d208:	2301      	movs	r3, #1
 800d20a:	e7e5      	b.n	800d1d8 <udp_input+0x174>
    pcb = uncon_pcb;
 800d20c:	4654      	mov	r4, sl
 800d20e:	e7c2      	b.n	800d196 <udp_input+0x132>
    if (ip_current_is_v6()) {
 800d210:	4b2c      	ldr	r3, [pc, #176]	; (800d2c4 <udp_input+0x260>)
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	b17b      	cbz	r3, 800d236 <udp_input+0x1d2>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
 800d216:	4932      	ldr	r1, [pc, #200]	; (800d2e0 <udp_input+0x27c>)
 800d218:	4638      	mov	r0, r7
 800d21a:	f7fb f8b5 	bl	8008388 <netif_get_ip6_addr_match>
 800d21e:	43c3      	mvns	r3, r0
 800d220:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    if (!ip_current_is_v6()) {
 800d224:	4a27      	ldr	r2, [pc, #156]	; (800d2c4 <udp_input+0x260>)
 800d226:	68d2      	ldr	r2, [r2, #12]
 800d228:	b13a      	cbz	r2, 800d23a <udp_input+0x1d6>
  if (for_us) {
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d1b5      	bne.n	800d19a <udp_input+0x136>
    pbuf_free(p);
 800d22e:	4648      	mov	r0, r9
 800d230:	f7fb fa7a 	bl	8008728 <pbuf_free>
  return;
 800d234:	e749      	b.n	800d0ca <udp_input+0x66>
  u8_t for_us = 0;
 800d236:	2300      	movs	r3, #0
 800d238:	e7f4      	b.n	800d224 <udp_input+0x1c0>
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	4a21      	ldr	r2, [pc, #132]	; (800d2c4 <udp_input+0x260>)
 800d23e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d240:	4293      	cmp	r3, r2
 800d242:	bf14      	ite	ne
 800d244:	2300      	movne	r3, #0
 800d246:	2301      	moveq	r3, #1
 800d248:	e7ef      	b.n	800d22a <udp_input+0x1c6>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d24a:	4b20      	ldr	r3, [pc, #128]	; (800d2cc <udp_input+0x268>)
 800d24c:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d250:	4924      	ldr	r1, [pc, #144]	; (800d2e4 <udp_input+0x280>)
 800d252:	4820      	ldr	r0, [pc, #128]	; (800d2d4 <udp_input+0x270>)
 800d254:	f007 f9ce 	bl	80145f4 <iprintf>
      pbuf_free(p);
 800d258:	4648      	mov	r0, r9
 800d25a:	f7fb fa65 	bl	8008728 <pbuf_free>
      goto end;
 800d25e:	e734      	b.n	800d0ca <udp_input+0x66>
        pbuf_free(p);
 800d260:	4648      	mov	r0, r9
 800d262:	f7fb fa61 	bl	8008728 <pbuf_free>
        goto end;
 800d266:	e730      	b.n	800d0ca <udp_input+0x66>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d268:	f1b8 0f00 	cmp.w	r8, #0
 800d26c:	d10c      	bne.n	800d288 <udp_input+0x224>
 800d26e:	4b15      	ldr	r3, [pc, #84]	; (800d2c4 <udp_input+0x260>)
 800d270:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d274:	2b06      	cmp	r3, #6
 800d276:	d00b      	beq.n	800d290 <udp_input+0x22c>
 800d278:	4b12      	ldr	r3, [pc, #72]	; (800d2c4 <udp_input+0x260>)
 800d27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d27c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d280:	3be0      	subs	r3, #224	; 0xe0
 800d282:	bf18      	it	ne
 800d284:	2301      	movne	r3, #1
 800d286:	b953      	cbnz	r3, 800d29e <udp_input+0x23a>
      pbuf_free(p);
 800d288:	4648      	mov	r0, r9
 800d28a:	f7fb fa4d 	bl	8008728 <pbuf_free>
 800d28e:	e71c      	b.n	800d0ca <udp_input+0x66>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d290:	4b0c      	ldr	r3, [pc, #48]	; (800d2c4 <udp_input+0x260>)
 800d292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d296:	3bff      	subs	r3, #255	; 0xff
 800d298:	bf18      	it	ne
 800d29a:	2301      	movne	r3, #1
 800d29c:	e7f3      	b.n	800d286 <udp_input+0x222>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d29e:	4c09      	ldr	r4, [pc, #36]	; (800d2c4 <udp_input+0x260>)
 800d2a0:	8a21      	ldrh	r1, [r4, #16]
 800d2a2:	3108      	adds	r1, #8
 800d2a4:	b209      	sxth	r1, r1
 800d2a6:	4648      	mov	r0, r9
 800d2a8:	f7fb fa38 	bl	800871c <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d2ac:	68e3      	ldr	r3, [r4, #12]
 800d2ae:	b123      	cbz	r3, 800d2ba <udp_input+0x256>
 800d2b0:	2104      	movs	r1, #4
 800d2b2:	4648      	mov	r0, r9
 800d2b4:	f003 fe4e 	bl	8010f54 <icmp6_dest_unreach>
 800d2b8:	e7e6      	b.n	800d288 <udp_input+0x224>
 800d2ba:	2103      	movs	r1, #3
 800d2bc:	4648      	mov	r0, r9
 800d2be:	f002 fccd 	bl	800fc5c <icmp_dest_unreach>
 800d2c2:	e7e1      	b.n	800d288 <udp_input+0x224>
 800d2c4:	20004b84 	.word	0x20004b84
 800d2c8:	20008c5c 	.word	0x20008c5c
 800d2cc:	08017874 	.word	0x08017874
 800d2d0:	08017824 	.word	0x08017824
 800d2d4:	08015608 	.word	0x08015608
 800d2d8:	0801783c 	.word	0x0801783c
 800d2dc:	20004b98 	.word	0x20004b98
 800d2e0:	20004bac 	.word	0x20004bac
 800d2e4:	08017858 	.word	0x08017858

0800d2e8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2ec:	4604      	mov	r4, r0

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d2ee:	460d      	mov	r5, r1
 800d2f0:	b141      	cbz	r1, 800d304 <udp_bind+0x1c>
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d2f2:	b14c      	cbz	r4, 800d308 <udp_bind+0x20>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d2f4:	4b73      	ldr	r3, [pc, #460]	; (800d4c4 <udp_bind+0x1dc>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	b179      	cbz	r1, 800d31c <udp_bind+0x34>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d2fc:	428c      	cmp	r4, r1
 800d2fe:	d034      	beq.n	800d36a <udp_bind+0x82>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d300:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800d302:	e7fa      	b.n	800d2fa <udp_bind+0x12>
    ipaddr = IP4_ADDR_ANY;
 800d304:	4d70      	ldr	r5, [pc, #448]	; (800d4c8 <udp_bind+0x1e0>)
 800d306:	e7f4      	b.n	800d2f2 <udp_bind+0xa>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d308:	4b70      	ldr	r3, [pc, #448]	; (800d4cc <udp_bind+0x1e4>)
 800d30a:	f240 32b7 	movw	r2, #951	; 0x3b7
 800d30e:	4970      	ldr	r1, [pc, #448]	; (800d4d0 <udp_bind+0x1e8>)
 800d310:	4870      	ldr	r0, [pc, #448]	; (800d4d4 <udp_bind+0x1ec>)
 800d312:	f007 f96f 	bl	80145f4 <iprintf>
 800d316:	f06f 000f 	mvn.w	r0, #15
 800d31a:	e024      	b.n	800d366 <udp_bind+0x7e>
  rebind = 0;
 800d31c:	f04f 0800 	mov.w	r8, #0
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800d320:	2a00      	cmp	r2, #0
 800d322:	f040 8087 	bne.w	800d434 <udp_bind+0x14c>
    port = udp_new_port();
 800d326:	f7ff fdc3 	bl	800ceb0 <udp_new_port>
    if (port == 0) {
 800d32a:	4602      	mov	r2, r0
 800d32c:	2800      	cmp	r0, #0
 800d32e:	f000 80b9 	beq.w	800d4a4 <udp_bind+0x1bc>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d332:	b10c      	cbz	r4, 800d338 <udp_bind+0x50>
 800d334:	7c2b      	ldrb	r3, [r5, #16]
 800d336:	7423      	strb	r3, [r4, #16]
 800d338:	b11d      	cbz	r5, 800d342 <udp_bind+0x5a>
 800d33a:	7c2b      	ldrb	r3, [r5, #16]
 800d33c:	2b06      	cmp	r3, #6
 800d33e:	f000 8099 	beq.w	800d474 <udp_bind+0x18c>
 800d342:	2d00      	cmp	r5, #0
 800d344:	f000 80ac 	beq.w	800d4a0 <udp_bind+0x1b8>
 800d348:	682b      	ldr	r3, [r5, #0]
 800d34a:	6023      	str	r3, [r4, #0]
 800d34c:	2300      	movs	r3, #0
 800d34e:	60e3      	str	r3, [r4, #12]
 800d350:	60a3      	str	r3, [r4, #8]
 800d352:	6063      	str	r3, [r4, #4]

  pcb->local_port = port;
 800d354:	8662      	strh	r2, [r4, #50]	; 0x32
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d356:	f1b8 0f00 	cmp.w	r8, #0
 800d35a:	d103      	bne.n	800d364 <udp_bind+0x7c>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d35c:	4b59      	ldr	r3, [pc, #356]	; (800d4c4 <udp_bind+0x1dc>)
 800d35e:	681a      	ldr	r2, [r3, #0]
 800d360:	62e2      	str	r2, [r4, #44]	; 0x2c
    udp_pcbs = pcb;
 800d362:	601c      	str	r4, [r3, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d364:	2000      	movs	r0, #0
}
 800d366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 800d36a:	f04f 0801 	mov.w	r8, #1
 800d36e:	e7d7      	b.n	800d320 <udp_bind+0x38>
          if ((ipcb->local_port == port) &&
 800d370:	2906      	cmp	r1, #6
 800d372:	d006      	beq.n	800d382 <udp_bind+0x9a>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d374:	682e      	ldr	r6, [r5, #0]
 800d376:	681f      	ldr	r7, [r3, #0]
 800d378:	42b7      	cmp	r7, r6
 800d37a:	d167      	bne.n	800d44c <udp_bind+0x164>
            return ERR_USE;
 800d37c:	f06f 0007 	mvn.w	r0, #7
 800d380:	e7f1      	b.n	800d366 <udp_bind+0x7e>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d382:	682e      	ldr	r6, [r5, #0]
 800d384:	681f      	ldr	r7, [r3, #0]
 800d386:	42b7      	cmp	r7, r6
 800d388:	d005      	beq.n	800d396 <udp_bind+0xae>
 800d38a:	2600      	movs	r6, #0
          if ((ipcb->local_port == port) &&
 800d38c:	2e00      	cmp	r6, #0
 800d38e:	d05d      	beq.n	800d44c <udp_bind+0x164>
            return ERR_USE;
 800d390:	f06f 0007 	mvn.w	r0, #7
 800d394:	e7e7      	b.n	800d366 <udp_bind+0x7e>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d396:	686e      	ldr	r6, [r5, #4]
 800d398:	685f      	ldr	r7, [r3, #4]
 800d39a:	42b7      	cmp	r7, r6
 800d39c:	d001      	beq.n	800d3a2 <udp_bind+0xba>
 800d39e:	2600      	movs	r6, #0
 800d3a0:	e7f4      	b.n	800d38c <udp_bind+0xa4>
 800d3a2:	68ae      	ldr	r6, [r5, #8]
 800d3a4:	689f      	ldr	r7, [r3, #8]
 800d3a6:	42b7      	cmp	r7, r6
 800d3a8:	d001      	beq.n	800d3ae <udp_bind+0xc6>
 800d3aa:	2600      	movs	r6, #0
 800d3ac:	e7ee      	b.n	800d38c <udp_bind+0xa4>
 800d3ae:	68ee      	ldr	r6, [r5, #12]
 800d3b0:	68df      	ldr	r7, [r3, #12]
 800d3b2:	42b7      	cmp	r7, r6
 800d3b4:	d001      	beq.n	800d3ba <udp_bind+0xd2>
 800d3b6:	2600      	movs	r6, #0
 800d3b8:	e7e8      	b.n	800d38c <udp_bind+0xa4>
 800d3ba:	2601      	movs	r6, #1
 800d3bc:	e7e6      	b.n	800d38c <udp_bind+0xa4>
 800d3be:	b14d      	cbz	r5, 800d3d4 <udp_bind+0xec>
 800d3c0:	6828      	ldr	r0, [r5, #0]
 800d3c2:	b948      	cbnz	r0, 800d3d8 <udp_bind+0xf0>
 800d3c4:	6868      	ldr	r0, [r5, #4]
 800d3c6:	b968      	cbnz	r0, 800d3e4 <udp_bind+0xfc>
 800d3c8:	68a8      	ldr	r0, [r5, #8]
 800d3ca:	b968      	cbnz	r0, 800d3e8 <udp_bind+0x100>
 800d3cc:	68e8      	ldr	r0, [r5, #12]
 800d3ce:	b168      	cbz	r0, 800d3ec <udp_bind+0x104>
 800d3d0:	2000      	movs	r0, #0
 800d3d2:	e002      	b.n	800d3da <udp_bind+0xf2>
 800d3d4:	2001      	movs	r0, #1
 800d3d6:	e000      	b.n	800d3da <udp_bind+0xf2>
 800d3d8:	2000      	movs	r0, #0
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	d040      	beq.n	800d460 <udp_bind+0x178>
            return ERR_USE;
 800d3de:	f06f 0007 	mvn.w	r0, #7
 800d3e2:	e7c0      	b.n	800d366 <udp_bind+0x7e>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d3e4:	2000      	movs	r0, #0
 800d3e6:	e7f8      	b.n	800d3da <udp_bind+0xf2>
 800d3e8:	2000      	movs	r0, #0
 800d3ea:	e7f6      	b.n	800d3da <udp_bind+0xf2>
 800d3ec:	2001      	movs	r0, #1
 800d3ee:	e7f4      	b.n	800d3da <udp_bind+0xf2>
 800d3f0:	2001      	movs	r0, #1
 800d3f2:	e034      	b.n	800d45e <udp_bind+0x176>
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	e032      	b.n	800d45e <udp_bind+0x176>
              ip_addr_isany(&ipcb->local_ip))) {
 800d3f8:	b14b      	cbz	r3, 800d40e <udp_bind+0x126>
 800d3fa:	6819      	ldr	r1, [r3, #0]
 800d3fc:	b949      	cbnz	r1, 800d412 <udp_bind+0x12a>
 800d3fe:	6859      	ldr	r1, [r3, #4]
 800d400:	b961      	cbnz	r1, 800d41c <udp_bind+0x134>
 800d402:	6899      	ldr	r1, [r3, #8]
 800d404:	b961      	cbnz	r1, 800d420 <udp_bind+0x138>
 800d406:	68d9      	ldr	r1, [r3, #12]
 800d408:	b161      	cbz	r1, 800d424 <udp_bind+0x13c>
 800d40a:	2100      	movs	r1, #0
 800d40c:	e002      	b.n	800d414 <udp_bind+0x12c>
 800d40e:	2101      	movs	r1, #1
 800d410:	e000      	b.n	800d414 <udp_bind+0x12c>
 800d412:	2100      	movs	r1, #0
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d414:	b169      	cbz	r1, 800d432 <udp_bind+0x14a>
            return ERR_USE;
 800d416:	f06f 0007 	mvn.w	r0, #7
 800d41a:	e7a4      	b.n	800d366 <udp_bind+0x7e>
              ip_addr_isany(&ipcb->local_ip))) {
 800d41c:	2100      	movs	r1, #0
 800d41e:	e7f9      	b.n	800d414 <udp_bind+0x12c>
 800d420:	2100      	movs	r1, #0
 800d422:	e7f7      	b.n	800d414 <udp_bind+0x12c>
 800d424:	2101      	movs	r1, #1
 800d426:	e7f5      	b.n	800d414 <udp_bind+0x12c>
 800d428:	2101      	movs	r1, #1
 800d42a:	e000      	b.n	800d42e <udp_bind+0x146>
 800d42c:	2100      	movs	r1, #0
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d42e:	2900      	cmp	r1, #0
 800d430:	d144      	bne.n	800d4bc <udp_bind+0x1d4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d434:	2b00      	cmp	r3, #0
 800d436:	f43f af7c 	beq.w	800d332 <udp_bind+0x4a>
      if (pcb != ipcb) {
 800d43a:	429c      	cmp	r4, r3
 800d43c:	d0f9      	beq.n	800d432 <udp_bind+0x14a>
          if ((ipcb->local_port == port) &&
 800d43e:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 800d440:	4291      	cmp	r1, r2
 800d442:	d1f6      	bne.n	800d432 <udp_bind+0x14a>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d444:	7c19      	ldrb	r1, [r3, #16]
 800d446:	7c28      	ldrb	r0, [r5, #16]
          if ((ipcb->local_port == port) &&
 800d448:	4281      	cmp	r1, r0
 800d44a:	d091      	beq.n	800d370 <udp_bind+0x88>
 800d44c:	b36d      	cbz	r5, 800d4aa <udp_bind+0x1c2>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d44e:	2806      	cmp	r0, #6
 800d450:	d0b5      	beq.n	800d3be <udp_bind+0xd6>
 800d452:	2d00      	cmp	r5, #0
 800d454:	d0cc      	beq.n	800d3f0 <udp_bind+0x108>
 800d456:	6828      	ldr	r0, [r5, #0]
 800d458:	2800      	cmp	r0, #0
 800d45a:	d1cb      	bne.n	800d3f4 <udp_bind+0x10c>
 800d45c:	2001      	movs	r0, #1
 800d45e:	bb38      	cbnz	r0, 800d4b0 <udp_bind+0x1c8>
          if ((ipcb->local_port == port) &&
 800d460:	b34b      	cbz	r3, 800d4b6 <udp_bind+0x1ce>
              ip_addr_isany(&ipcb->local_ip))) {
 800d462:	2906      	cmp	r1, #6
 800d464:	d0c8      	beq.n	800d3f8 <udp_bind+0x110>
 800d466:	2b00      	cmp	r3, #0
 800d468:	d0de      	beq.n	800d428 <udp_bind+0x140>
 800d46a:	6819      	ldr	r1, [r3, #0]
 800d46c:	2900      	cmp	r1, #0
 800d46e:	d1dd      	bne.n	800d42c <udp_bind+0x144>
 800d470:	2101      	movs	r1, #1
 800d472:	e7dc      	b.n	800d42e <udp_bind+0x146>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d474:	462b      	mov	r3, r5
 800d476:	b15d      	cbz	r5, 800d490 <udp_bind+0x1a8>
 800d478:	6829      	ldr	r1, [r5, #0]
 800d47a:	6021      	str	r1, [r4, #0]
 800d47c:	b153      	cbz	r3, 800d494 <udp_bind+0x1ac>
 800d47e:	6869      	ldr	r1, [r5, #4]
 800d480:	6061      	str	r1, [r4, #4]
 800d482:	b14b      	cbz	r3, 800d498 <udp_bind+0x1b0>
 800d484:	68a9      	ldr	r1, [r5, #8]
 800d486:	60a1      	str	r1, [r4, #8]
 800d488:	b143      	cbz	r3, 800d49c <udp_bind+0x1b4>
 800d48a:	68eb      	ldr	r3, [r5, #12]
 800d48c:	60e3      	str	r3, [r4, #12]
 800d48e:	e761      	b.n	800d354 <udp_bind+0x6c>
 800d490:	2100      	movs	r1, #0
 800d492:	e7f2      	b.n	800d47a <udp_bind+0x192>
 800d494:	2100      	movs	r1, #0
 800d496:	e7f3      	b.n	800d480 <udp_bind+0x198>
 800d498:	2100      	movs	r1, #0
 800d49a:	e7f4      	b.n	800d486 <udp_bind+0x19e>
 800d49c:	2300      	movs	r3, #0
 800d49e:	e7f5      	b.n	800d48c <udp_bind+0x1a4>
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	e752      	b.n	800d34a <udp_bind+0x62>
      return ERR_USE;
 800d4a4:	f06f 0007 	mvn.w	r0, #7
 800d4a8:	e75d      	b.n	800d366 <udp_bind+0x7e>
            return ERR_USE;
 800d4aa:	f06f 0007 	mvn.w	r0, #7
 800d4ae:	e75a      	b.n	800d366 <udp_bind+0x7e>
 800d4b0:	f06f 0007 	mvn.w	r0, #7
 800d4b4:	e757      	b.n	800d366 <udp_bind+0x7e>
 800d4b6:	f06f 0007 	mvn.w	r0, #7
 800d4ba:	e754      	b.n	800d366 <udp_bind+0x7e>
 800d4bc:	f06f 0007 	mvn.w	r0, #7
 800d4c0:	e751      	b.n	800d366 <udp_bind+0x7e>
 800d4c2:	bf00      	nop
 800d4c4:	20008c5c 	.word	0x20008c5c
 800d4c8:	08018250 	.word	0x08018250
 800d4cc:	08017874 	.word	0x08017874
 800d4d0:	080177d4 	.word	0x080177d4
 800d4d4:	08015608 	.word	0x08015608

0800d4d8 <udp_sendto_if_src>:
{
 800d4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4dc:	b085      	sub	sp, #20
 800d4de:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800d4e2:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	f000 8086 	beq.w	800d5f8 <udp_sendto_if_src+0x120>
 800d4ec:	460f      	mov	r7, r1
 800d4ee:	4615      	mov	r5, r2
 800d4f0:	469b      	mov	fp, r3
 800d4f2:	4604      	mov	r4, r0
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d4f4:	2900      	cmp	r1, #0
 800d4f6:	f000 8089 	beq.w	800d60c <udp_sendto_if_src+0x134>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d4fa:	2a00      	cmp	r2, #0
 800d4fc:	f000 8090 	beq.w	800d620 <udp_sendto_if_src+0x148>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800d500:	f1b9 0f00 	cmp.w	r9, #0
 800d504:	f000 8096 	beq.w	800d634 <udp_sendto_if_src+0x15c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800d508:	f1ba 0f00 	cmp.w	sl, #0
 800d50c:	f000 809c 	beq.w	800d648 <udp_sendto_if_src+0x170>
  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800d510:	7c03      	ldrb	r3, [r0, #16]
 800d512:	2b2e      	cmp	r3, #46	; 0x2e
 800d514:	d008      	beq.n	800d528 <udp_sendto_if_src+0x50>
 800d516:	f899 2010 	ldrb.w	r2, [r9, #16]
 800d51a:	4293      	cmp	r3, r2
 800d51c:	f040 80dd 	bne.w	800d6da <udp_sendto_if_src+0x202>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800d520:	7c2a      	ldrb	r2, [r5, #16]
  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800d522:	4293      	cmp	r3, r2
 800d524:	f040 80dc 	bne.w	800d6e0 <udp_sendto_if_src+0x208>
  if (pcb->local_port == 0) {
 800d528:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800d52a:	2a00      	cmp	r2, #0
 800d52c:	f000 8096 	beq.w	800d65c <udp_sendto_if_src+0x184>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800d530:	893a      	ldrh	r2, [r7, #8]
 800d532:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800d536:	429a      	cmp	r2, r3
 800d538:	f200 80d5 	bhi.w	800d6e6 <udp_sendto_if_src+0x20e>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800d53c:	2108      	movs	r1, #8
 800d53e:	4638      	mov	r0, r7
 800d540:	f7fb f8a1 	bl	8008686 <pbuf_add_header>
 800d544:	2800      	cmp	r0, #0
 800d546:	f040 8092 	bne.w	800d66e <udp_sendto_if_src+0x196>
    q = p;
 800d54a:	463e      	mov	r6, r7
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d54c:	8973      	ldrh	r3, [r6, #10]
 800d54e:	2b07      	cmp	r3, #7
 800d550:	f240 809e 	bls.w	800d690 <udp_sendto_if_src+0x1b8>
  udphdr = (struct udp_hdr *)q->payload;
 800d554:	f8d6 8004 	ldr.w	r8, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800d558:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800d55a:	f7f9 fe47 	bl	80071ec <lwip_htons>
 800d55e:	f8a8 0000 	strh.w	r0, [r8]
  udphdr->dest = lwip_htons(dst_port);
 800d562:	4658      	mov	r0, fp
 800d564:	f7f9 fe42 	bl	80071ec <lwip_htons>
 800d568:	f8a8 0002 	strh.w	r0, [r8, #2]
  udphdr->chksum = 0x0000;
 800d56c:	2300      	movs	r3, #0
 800d56e:	f888 3006 	strb.w	r3, [r8, #6]
 800d572:	f888 3007 	strb.w	r3, [r8, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 800d576:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800d57a:	f013 0f08 	tst.w	r3, #8
 800d57e:	d00f      	beq.n	800d5a0 <udp_sendto_if_src+0xc8>
 800d580:	7c2b      	ldrb	r3, [r5, #16]
 800d582:	2b06      	cmp	r3, #6
 800d584:	f000 808c 	beq.w	800d6a0 <udp_sendto_if_src+0x1c8>
 800d588:	682b      	ldr	r3, [r5, #0]
 800d58a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d58e:	2be0      	cmp	r3, #224	; 0xe0
 800d590:	bf14      	ite	ne
 800d592:	2300      	movne	r3, #0
 800d594:	2301      	moveq	r3, #1
 800d596:	b11b      	cbz	r3, 800d5a0 <udp_sendto_if_src+0xc8>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 800d598:	7b73      	ldrb	r3, [r6, #13]
 800d59a:	f043 0304 	orr.w	r3, r3, #4
 800d59e:	7373      	strb	r3, [r6, #13]
    udphdr->len = lwip_htons(q->tot_len);
 800d5a0:	8930      	ldrh	r0, [r6, #8]
 800d5a2:	f7f9 fe23 	bl	80071ec <lwip_htons>
 800d5a6:	f8a8 0004 	strh.w	r0, [r8, #4]
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 800d5aa:	7c2b      	ldrb	r3, [r5, #16]
 800d5ac:	2b06      	cmp	r3, #6
 800d5ae:	d07d      	beq.n	800d6ac <udp_sendto_if_src+0x1d4>
 800d5b0:	682b      	ldr	r3, [r5, #0]
 800d5b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d5b6:	2be0      	cmp	r3, #224	; 0xe0
 800d5b8:	bf14      	ite	ne
 800d5ba:	2300      	movne	r3, #0
 800d5bc:	2301      	moveq	r3, #1
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d07a      	beq.n	800d6b8 <udp_sendto_if_src+0x1e0>
 800d5c2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d5c6:	7c2a      	ldrb	r2, [r5, #16]
 800d5c8:	2a06      	cmp	r2, #6
 800d5ca:	d078      	beq.n	800d6be <udp_sendto_if_src+0x1e6>
 800d5cc:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800d5d0:	f8cd a008 	str.w	sl, [sp, #8]
 800d5d4:	2111      	movs	r1, #17
 800d5d6:	9101      	str	r1, [sp, #4]
 800d5d8:	9200      	str	r2, [sp, #0]
 800d5da:	462a      	mov	r2, r5
 800d5dc:	4649      	mov	r1, r9
 800d5de:	4630      	mov	r0, r6
 800d5e0:	f002 ff01 	bl	80103e6 <ip4_output_if_src>
 800d5e4:	4680      	mov	r8, r0
  if (q != p) {
 800d5e6:	42be      	cmp	r6, r7
 800d5e8:	d002      	beq.n	800d5f0 <udp_sendto_if_src+0x118>
    pbuf_free(q);
 800d5ea:	4630      	mov	r0, r6
 800d5ec:	f7fb f89c 	bl	8008728 <pbuf_free>
}
 800d5f0:	4640      	mov	r0, r8
 800d5f2:	b005      	add	sp, #20
 800d5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800d5f8:	4b3e      	ldr	r3, [pc, #248]	; (800d6f4 <udp_sendto_if_src+0x21c>)
 800d5fa:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d5fe:	493e      	ldr	r1, [pc, #248]	; (800d6f8 <udp_sendto_if_src+0x220>)
 800d600:	483e      	ldr	r0, [pc, #248]	; (800d6fc <udp_sendto_if_src+0x224>)
 800d602:	f006 fff7 	bl	80145f4 <iprintf>
 800d606:	f06f 080f 	mvn.w	r8, #15
 800d60a:	e7f1      	b.n	800d5f0 <udp_sendto_if_src+0x118>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d60c:	4b39      	ldr	r3, [pc, #228]	; (800d6f4 <udp_sendto_if_src+0x21c>)
 800d60e:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d612:	493b      	ldr	r1, [pc, #236]	; (800d700 <udp_sendto_if_src+0x228>)
 800d614:	4839      	ldr	r0, [pc, #228]	; (800d6fc <udp_sendto_if_src+0x224>)
 800d616:	f006 ffed 	bl	80145f4 <iprintf>
 800d61a:	f06f 080f 	mvn.w	r8, #15
 800d61e:	e7e7      	b.n	800d5f0 <udp_sendto_if_src+0x118>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d620:	4b34      	ldr	r3, [pc, #208]	; (800d6f4 <udp_sendto_if_src+0x21c>)
 800d622:	f240 22d3 	movw	r2, #723	; 0x2d3
 800d626:	4937      	ldr	r1, [pc, #220]	; (800d704 <udp_sendto_if_src+0x22c>)
 800d628:	4834      	ldr	r0, [pc, #208]	; (800d6fc <udp_sendto_if_src+0x224>)
 800d62a:	f006 ffe3 	bl	80145f4 <iprintf>
 800d62e:	f06f 080f 	mvn.w	r8, #15
 800d632:	e7dd      	b.n	800d5f0 <udp_sendto_if_src+0x118>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800d634:	4b2f      	ldr	r3, [pc, #188]	; (800d6f4 <udp_sendto_if_src+0x21c>)
 800d636:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800d63a:	4933      	ldr	r1, [pc, #204]	; (800d708 <udp_sendto_if_src+0x230>)
 800d63c:	482f      	ldr	r0, [pc, #188]	; (800d6fc <udp_sendto_if_src+0x224>)
 800d63e:	f006 ffd9 	bl	80145f4 <iprintf>
 800d642:	f06f 080f 	mvn.w	r8, #15
 800d646:	e7d3      	b.n	800d5f0 <udp_sendto_if_src+0x118>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800d648:	4b2a      	ldr	r3, [pc, #168]	; (800d6f4 <udp_sendto_if_src+0x21c>)
 800d64a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800d64e:	492f      	ldr	r1, [pc, #188]	; (800d70c <udp_sendto_if_src+0x234>)
 800d650:	482a      	ldr	r0, [pc, #168]	; (800d6fc <udp_sendto_if_src+0x224>)
 800d652:	f006 ffcf 	bl	80145f4 <iprintf>
 800d656:	f06f 080f 	mvn.w	r8, #15
 800d65a:	e7c9      	b.n	800d5f0 <udp_sendto_if_src+0x118>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d65c:	4621      	mov	r1, r4
 800d65e:	4620      	mov	r0, r4
 800d660:	f7ff fe42 	bl	800d2e8 <udp_bind>
    if (err != ERR_OK) {
 800d664:	4680      	mov	r8, r0
 800d666:	2800      	cmp	r0, #0
 800d668:	f43f af62 	beq.w	800d530 <udp_sendto_if_src+0x58>
 800d66c:	e7c0      	b.n	800d5f0 <udp_sendto_if_src+0x118>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d66e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d672:	2108      	movs	r1, #8
 800d674:	2036      	movs	r0, #54	; 0x36
 800d676:	f7fb f8b9 	bl	80087ec <pbuf_alloc>
    if (q == NULL) {
 800d67a:	4606      	mov	r6, r0
 800d67c:	2800      	cmp	r0, #0
 800d67e:	d035      	beq.n	800d6ec <udp_sendto_if_src+0x214>
    if (p->tot_len != 0) {
 800d680:	893b      	ldrh	r3, [r7, #8]
 800d682:	2b00      	cmp	r3, #0
 800d684:	f43f af62 	beq.w	800d54c <udp_sendto_if_src+0x74>
      pbuf_chain(q, p);
 800d688:	4639      	mov	r1, r7
 800d68a:	f7fb fa0d 	bl	8008aa8 <pbuf_chain>
 800d68e:	e75d      	b.n	800d54c <udp_sendto_if_src+0x74>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d690:	4b18      	ldr	r3, [pc, #96]	; (800d6f4 <udp_sendto_if_src+0x21c>)
 800d692:	f240 320e 	movw	r2, #782	; 0x30e
 800d696:	491e      	ldr	r1, [pc, #120]	; (800d710 <udp_sendto_if_src+0x238>)
 800d698:	4818      	ldr	r0, [pc, #96]	; (800d6fc <udp_sendto_if_src+0x224>)
 800d69a:	f006 ffab 	bl	80145f4 <iprintf>
 800d69e:	e759      	b.n	800d554 <udp_sendto_if_src+0x7c>
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 800d6a0:	782b      	ldrb	r3, [r5, #0]
 800d6a2:	2bff      	cmp	r3, #255	; 0xff
 800d6a4:	bf14      	ite	ne
 800d6a6:	2300      	movne	r3, #0
 800d6a8:	2301      	moveq	r3, #1
 800d6aa:	e774      	b.n	800d596 <udp_sendto_if_src+0xbe>
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 800d6ac:	782b      	ldrb	r3, [r5, #0]
 800d6ae:	2bff      	cmp	r3, #255	; 0xff
 800d6b0:	bf14      	ite	ne
 800d6b2:	2300      	movne	r3, #0
 800d6b4:	2301      	moveq	r3, #1
 800d6b6:	e782      	b.n	800d5be <udp_sendto_if_src+0xe6>
 800d6b8:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800d6bc:	e783      	b.n	800d5c6 <udp_sendto_if_src+0xee>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d6be:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800d6c2:	f8cd a008 	str.w	sl, [sp, #8]
 800d6c6:	2111      	movs	r1, #17
 800d6c8:	9101      	str	r1, [sp, #4]
 800d6ca:	9200      	str	r2, [sp, #0]
 800d6cc:	462a      	mov	r2, r5
 800d6ce:	4649      	mov	r1, r9
 800d6d0:	4630      	mov	r0, r6
 800d6d2:	f003 ffad 	bl	8011630 <ip6_output_if_src>
 800d6d6:	4680      	mov	r8, r0
 800d6d8:	e785      	b.n	800d5e6 <udp_sendto_if_src+0x10e>
    return ERR_VAL;
 800d6da:	f06f 0805 	mvn.w	r8, #5
 800d6de:	e787      	b.n	800d5f0 <udp_sendto_if_src+0x118>
 800d6e0:	f06f 0805 	mvn.w	r8, #5
 800d6e4:	e784      	b.n	800d5f0 <udp_sendto_if_src+0x118>
    return ERR_MEM;
 800d6e6:	f04f 38ff 	mov.w	r8, #4294967295
 800d6ea:	e781      	b.n	800d5f0 <udp_sendto_if_src+0x118>
      return ERR_MEM;
 800d6ec:	f04f 38ff 	mov.w	r8, #4294967295
 800d6f0:	e77e      	b.n	800d5f0 <udp_sendto_if_src+0x118>
 800d6f2:	bf00      	nop
 800d6f4:	08017874 	.word	0x08017874
 800d6f8:	080179e8 	.word	0x080179e8
 800d6fc:	08015608 	.word	0x08015608
 800d700:	08017a08 	.word	0x08017a08
 800d704:	08017a28 	.word	0x08017a28
 800d708:	08017a4c 	.word	0x08017a4c
 800d70c:	08017a70 	.word	0x08017a70
 800d710:	08017a94 	.word	0x08017a94

0800d714 <udp_sendto_if>:
{
 800d714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d718:	b082      	sub	sp, #8
 800d71a:	9e08      	ldr	r6, [sp, #32]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800d71c:	b1f0      	cbz	r0, 800d75c <udp_sendto_if+0x48>
 800d71e:	460f      	mov	r7, r1
 800d720:	4615      	mov	r5, r2
 800d722:	4698      	mov	r8, r3
 800d724:	4604      	mov	r4, r0
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800d726:	b319      	cbz	r1, 800d770 <udp_sendto_if+0x5c>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d728:	b362      	cbz	r2, 800d784 <udp_sendto_if+0x70>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800d72a:	2e00      	cmp	r6, #0
 800d72c:	d034      	beq.n	800d798 <udp_sendto_if+0x84>
  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800d72e:	7c03      	ldrb	r3, [r0, #16]
 800d730:	2b2e      	cmp	r3, #46	; 0x2e
 800d732:	d002      	beq.n	800d73a <udp_sendto_if+0x26>
 800d734:	7c12      	ldrb	r2, [r2, #16]
 800d736:	4293      	cmp	r3, r2
 800d738:	d161      	bne.n	800d7fe <udp_sendto_if+0xea>
  if (IP_IS_V6(dst_ip)) {
 800d73a:	7c2b      	ldrb	r3, [r5, #16]
 800d73c:	2b06      	cmp	r3, #6
 800d73e:	d035      	beq.n	800d7ac <udp_sendto_if+0x98>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d740:	2c00      	cmp	r4, #0
 800d742:	d050      	beq.n	800d7e6 <udp_sendto_if+0xd2>
 800d744:	6823      	ldr	r3, [r4, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d04d      	beq.n	800d7e6 <udp_sendto_if+0xd2>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d74a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d74e:	2ae0      	cmp	r2, #224	; 0xe0
 800d750:	d049      	beq.n	800d7e6 <udp_sendto_if+0xd2>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d752:	6832      	ldr	r2, [r6, #0]
 800d754:	4293      	cmp	r3, r2
 800d756:	d158      	bne.n	800d80a <udp_sendto_if+0xf6>
      src_ip = &pcb->local_ip;
 800d758:	4623      	mov	r3, r4
 800d75a:	e045      	b.n	800d7e8 <udp_sendto_if+0xd4>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800d75c:	4b2c      	ldr	r3, [pc, #176]	; (800d810 <udp_sendto_if+0xfc>)
 800d75e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d762:	492c      	ldr	r1, [pc, #176]	; (800d814 <udp_sendto_if+0x100>)
 800d764:	482c      	ldr	r0, [pc, #176]	; (800d818 <udp_sendto_if+0x104>)
 800d766:	f006 ff45 	bl	80145f4 <iprintf>
 800d76a:	f06f 000f 	mvn.w	r0, #15
 800d76e:	e043      	b.n	800d7f8 <udp_sendto_if+0xe4>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800d770:	4b27      	ldr	r3, [pc, #156]	; (800d810 <udp_sendto_if+0xfc>)
 800d772:	f240 2281 	movw	r2, #641	; 0x281
 800d776:	4929      	ldr	r1, [pc, #164]	; (800d81c <udp_sendto_if+0x108>)
 800d778:	4827      	ldr	r0, [pc, #156]	; (800d818 <udp_sendto_if+0x104>)
 800d77a:	f006 ff3b 	bl	80145f4 <iprintf>
 800d77e:	f06f 000f 	mvn.w	r0, #15
 800d782:	e039      	b.n	800d7f8 <udp_sendto_if+0xe4>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d784:	4b22      	ldr	r3, [pc, #136]	; (800d810 <udp_sendto_if+0xfc>)
 800d786:	f240 2282 	movw	r2, #642	; 0x282
 800d78a:	4925      	ldr	r1, [pc, #148]	; (800d820 <udp_sendto_if+0x10c>)
 800d78c:	4822      	ldr	r0, [pc, #136]	; (800d818 <udp_sendto_if+0x104>)
 800d78e:	f006 ff31 	bl	80145f4 <iprintf>
 800d792:	f06f 000f 	mvn.w	r0, #15
 800d796:	e02f      	b.n	800d7f8 <udp_sendto_if+0xe4>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800d798:	4b1d      	ldr	r3, [pc, #116]	; (800d810 <udp_sendto_if+0xfc>)
 800d79a:	f240 2283 	movw	r2, #643	; 0x283
 800d79e:	4921      	ldr	r1, [pc, #132]	; (800d824 <udp_sendto_if+0x110>)
 800d7a0:	481d      	ldr	r0, [pc, #116]	; (800d818 <udp_sendto_if+0x104>)
 800d7a2:	f006 ff27 	bl	80145f4 <iprintf>
 800d7a6:	f06f 000f 	mvn.w	r0, #15
 800d7aa:	e025      	b.n	800d7f8 <udp_sendto_if+0xe4>
    if (ip6_addr_isany(ip_2_ip6(&pcb->local_ip)) ||
 800d7ac:	b154      	cbz	r4, 800d7c4 <udp_sendto_if+0xb0>
 800d7ae:	6823      	ldr	r3, [r4, #0]
 800d7b0:	b92b      	cbnz	r3, 800d7be <udp_sendto_if+0xaa>
 800d7b2:	6862      	ldr	r2, [r4, #4]
 800d7b4:	b91a      	cbnz	r2, 800d7be <udp_sendto_if+0xaa>
 800d7b6:	68a2      	ldr	r2, [r4, #8]
 800d7b8:	b90a      	cbnz	r2, 800d7be <udp_sendto_if+0xaa>
 800d7ba:	68e2      	ldr	r2, [r4, #12]
 800d7bc:	b112      	cbz	r2, 800d7c4 <udp_sendto_if+0xb0>
        ip6_addr_ismulticast(ip_2_ip6(&pcb->local_ip))) {
 800d7be:	b2db      	uxtb	r3, r3
    if (ip6_addr_isany(ip_2_ip6(&pcb->local_ip)) ||
 800d7c0:	2bff      	cmp	r3, #255	; 0xff
 800d7c2:	d108      	bne.n	800d7d6 <udp_sendto_if+0xc2>
      src_ip = ip6_select_source_address(netif, ip_2_ip6(dst_ip));
 800d7c4:	4629      	mov	r1, r5
 800d7c6:	4630      	mov	r0, r6
 800d7c8:	f003 fc3c 	bl	8011044 <ip6_select_source_address>
      if (src_ip == NULL) {
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	b958      	cbnz	r0, 800d7e8 <udp_sendto_if+0xd4>
        return ERR_RTE;
 800d7d0:	f06f 0003 	mvn.w	r0, #3
 800d7d4:	e010      	b.n	800d7f8 <udp_sendto_if+0xe4>
      if (netif_get_ip6_addr_match(netif, ip_2_ip6(&pcb->local_ip)) < 0) {
 800d7d6:	4621      	mov	r1, r4
 800d7d8:	4630      	mov	r0, r6
 800d7da:	f7fa fdd5 	bl	8008388 <netif_get_ip6_addr_match>
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	db10      	blt.n	800d804 <udp_sendto_if+0xf0>
      src_ip = &pcb->local_ip;
 800d7e2:	4623      	mov	r3, r4
 800d7e4:	e000      	b.n	800d7e8 <udp_sendto_if+0xd4>
      src_ip = netif_ip_addr4(netif);
 800d7e6:	4633      	mov	r3, r6
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800d7e8:	9301      	str	r3, [sp, #4]
 800d7ea:	9600      	str	r6, [sp, #0]
 800d7ec:	4643      	mov	r3, r8
 800d7ee:	462a      	mov	r2, r5
 800d7f0:	4639      	mov	r1, r7
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	f7ff fe70 	bl	800d4d8 <udp_sendto_if_src>
}
 800d7f8:	b002      	add	sp, #8
 800d7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_VAL;
 800d7fe:	f06f 0005 	mvn.w	r0, #5
 800d802:	e7f9      	b.n	800d7f8 <udp_sendto_if+0xe4>
        return ERR_RTE;
 800d804:	f06f 0003 	mvn.w	r0, #3
 800d808:	e7f6      	b.n	800d7f8 <udp_sendto_if+0xe4>
        return ERR_RTE;
 800d80a:	f06f 0003 	mvn.w	r0, #3
 800d80e:	e7f3      	b.n	800d7f8 <udp_sendto_if+0xe4>
 800d810:	08017874 	.word	0x08017874
 800d814:	08017970 	.word	0x08017970
 800d818:	08015608 	.word	0x08015608
 800d81c:	0801798c 	.word	0x0801798c
 800d820:	080179a8 	.word	0x080179a8
 800d824:	080179c8 	.word	0x080179c8

0800d828 <udp_sendto>:
{
 800d828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d82a:	b083      	sub	sp, #12
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800d82c:	2800      	cmp	r0, #0
 800d82e:	d030      	beq.n	800d892 <udp_sendto+0x6a>
 800d830:	460e      	mov	r6, r1
 800d832:	4614      	mov	r4, r2
 800d834:	461f      	mov	r7, r3
 800d836:	4605      	mov	r5, r0
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800d838:	2900      	cmp	r1, #0
 800d83a:	d034      	beq.n	800d8a6 <udp_sendto+0x7e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d83c:	2a00      	cmp	r2, #0
 800d83e:	d03c      	beq.n	800d8ba <udp_sendto+0x92>
  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800d840:	7c03      	ldrb	r3, [r0, #16]
 800d842:	2b2e      	cmp	r3, #46	; 0x2e
 800d844:	d002      	beq.n	800d84c <udp_sendto+0x24>
 800d846:	7c12      	ldrb	r2, [r2, #16]
 800d848:	4293      	cmp	r3, r2
 800d84a:	d161      	bne.n	800d910 <udp_sendto+0xe8>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800d84c:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
 800d850:	2800      	cmp	r0, #0
 800d852:	d13c      	bne.n	800d8ce <udp_sendto+0xa6>
    if (ip_addr_ismulticast(dst_ip)) {
 800d854:	7c23      	ldrb	r3, [r4, #16]
 800d856:	2b06      	cmp	r3, #6
 800d858:	d03c      	beq.n	800d8d4 <udp_sendto+0xac>
 800d85a:	6823      	ldr	r3, [r4, #0]
 800d85c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d860:	2be0      	cmp	r3, #224	; 0xe0
 800d862:	bf14      	ite	ne
 800d864:	2300      	movne	r3, #0
 800d866:	2301      	moveq	r3, #1
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d03c      	beq.n	800d8e6 <udp_sendto+0xbe>
      if (pcb->mcast_ifindex != NETIF_NO_INDEX) {
 800d86c:	f895 003c 	ldrb.w	r0, [r5, #60]	; 0x3c
 800d870:	2800      	cmp	r0, #0
 800d872:	d135      	bne.n	800d8e0 <udp_sendto+0xb8>
        if (IP_IS_V4(dst_ip))
 800d874:	7c23      	ldrb	r3, [r4, #16]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d135      	bne.n	800d8e6 <udp_sendto+0xbe>
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 800d87a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d032      	beq.n	800d8e6 <udp_sendto+0xbe>
              !ip4_addr_cmp(&pcb->mcast_ip4, IP4_ADDR_BROADCAST)) {
 800d880:	4a26      	ldr	r2, [pc, #152]	; (800d91c <udp_sendto+0xf4>)
 800d882:	6812      	ldr	r2, [r2, #0]
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 800d884:	4293      	cmp	r3, r2
 800d886:	d02e      	beq.n	800d8e6 <udp_sendto+0xbe>
            netif = ip4_route_src(ip_2_ip4(&pcb->local_ip), &pcb->mcast_ip4);
 800d888:	f105 0038 	add.w	r0, r5, #56	; 0x38
 800d88c:	f002 fbc0 	bl	8010010 <ip4_route>
 800d890:	e028      	b.n	800d8e4 <udp_sendto+0xbc>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800d892:	4b23      	ldr	r3, [pc, #140]	; (800d920 <udp_sendto+0xf8>)
 800d894:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d898:	4922      	ldr	r1, [pc, #136]	; (800d924 <udp_sendto+0xfc>)
 800d89a:	4823      	ldr	r0, [pc, #140]	; (800d928 <udp_sendto+0x100>)
 800d89c:	f006 feaa 	bl	80145f4 <iprintf>
 800d8a0:	f06f 000f 	mvn.w	r0, #15
 800d8a4:	e02d      	b.n	800d902 <udp_sendto+0xda>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800d8a6:	4b1e      	ldr	r3, [pc, #120]	; (800d920 <udp_sendto+0xf8>)
 800d8a8:	f240 2219 	movw	r2, #537	; 0x219
 800d8ac:	491f      	ldr	r1, [pc, #124]	; (800d92c <udp_sendto+0x104>)
 800d8ae:	481e      	ldr	r0, [pc, #120]	; (800d928 <udp_sendto+0x100>)
 800d8b0:	f006 fea0 	bl	80145f4 <iprintf>
 800d8b4:	f06f 000f 	mvn.w	r0, #15
 800d8b8:	e023      	b.n	800d902 <udp_sendto+0xda>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d8ba:	4b19      	ldr	r3, [pc, #100]	; (800d920 <udp_sendto+0xf8>)
 800d8bc:	f240 221a 	movw	r2, #538	; 0x21a
 800d8c0:	491b      	ldr	r1, [pc, #108]	; (800d930 <udp_sendto+0x108>)
 800d8c2:	4819      	ldr	r0, [pc, #100]	; (800d928 <udp_sendto+0x100>)
 800d8c4:	f006 fe96 	bl	80145f4 <iprintf>
 800d8c8:	f06f 000f 	mvn.w	r0, #15
 800d8cc:	e019      	b.n	800d902 <udp_sendto+0xda>
    netif = netif_get_by_index(pcb->netif_idx);
 800d8ce:	f7fa fe0b 	bl	80084e8 <netif_get_by_index>
 800d8d2:	e00e      	b.n	800d8f2 <udp_sendto+0xca>
    if (ip_addr_ismulticast(dst_ip)) {
 800d8d4:	7823      	ldrb	r3, [r4, #0]
 800d8d6:	2bff      	cmp	r3, #255	; 0xff
 800d8d8:	bf14      	ite	ne
 800d8da:	2300      	movne	r3, #0
 800d8dc:	2301      	moveq	r3, #1
 800d8de:	e7c3      	b.n	800d868 <udp_sendto+0x40>
        netif = netif_get_by_index(pcb->mcast_ifindex);
 800d8e0:	f7fa fe02 	bl	80084e8 <netif_get_by_index>
    if (netif == NULL)
 800d8e4:	b928      	cbnz	r0, 800d8f2 <udp_sendto+0xca>
      netif = ip_route(&pcb->local_ip, dst_ip);
 800d8e6:	7c23      	ldrb	r3, [r4, #16]
 800d8e8:	2b06      	cmp	r3, #6
 800d8ea:	d00c      	beq.n	800d906 <udp_sendto+0xde>
 800d8ec:	4620      	mov	r0, r4
 800d8ee:	f002 fb8f 	bl	8010010 <ip4_route>
  if (netif == NULL) {
 800d8f2:	b180      	cbz	r0, 800d916 <udp_sendto+0xee>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800d8f4:	9000      	str	r0, [sp, #0]
 800d8f6:	463b      	mov	r3, r7
 800d8f8:	4622      	mov	r2, r4
 800d8fa:	4631      	mov	r1, r6
 800d8fc:	4628      	mov	r0, r5
 800d8fe:	f7ff ff09 	bl	800d714 <udp_sendto_if>
}
 800d902:	b003      	add	sp, #12
 800d904:	bdf0      	pop	{r4, r5, r6, r7, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 800d906:	4621      	mov	r1, r4
 800d908:	4628      	mov	r0, r5
 800d90a:	f003 fb8d 	bl	8011028 <ip6_route>
 800d90e:	e7f0      	b.n	800d8f2 <udp_sendto+0xca>
    return ERR_VAL;
 800d910:	f06f 0005 	mvn.w	r0, #5
 800d914:	e7f5      	b.n	800d902 <udp_sendto+0xda>
    return ERR_RTE;
 800d916:	f06f 0003 	mvn.w	r0, #3
 800d91a:	e7f2      	b.n	800d902 <udp_sendto+0xda>
 800d91c:	08018264 	.word	0x08018264
 800d920:	08017874 	.word	0x08017874
 800d924:	08017920 	.word	0x08017920
 800d928:	08015608 	.word	0x08015608
 800d92c:	08017938 	.word	0x08017938
 800d930:	08017954 	.word	0x08017954

0800d934 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d934:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d936:	b340      	cbz	r0, 800d98a <udp_connect+0x56>
 800d938:	460d      	mov	r5, r1
 800d93a:	4616      	mov	r6, r2
 800d93c:	4604      	mov	r4, r0
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d93e:	2900      	cmp	r1, #0
 800d940:	d02d      	beq.n	800d99e <udp_connect+0x6a>

  if (pcb->local_port == 0) {
 800d942:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800d944:	2a00      	cmp	r2, #0
 800d946:	d034      	beq.n	800d9b2 <udp_connect+0x7e>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d948:	f114 0f14 	cmn.w	r4, #20
 800d94c:	d002      	beq.n	800d954 <udp_connect+0x20>
 800d94e:	7c2b      	ldrb	r3, [r5, #16]
 800d950:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800d954:	7c2b      	ldrb	r3, [r5, #16]
 800d956:	2b06      	cmp	r3, #6
 800d958:	d032      	beq.n	800d9c0 <udp_connect+0x8c>
 800d95a:	2d00      	cmp	r5, #0
 800d95c:	d045      	beq.n	800d9ea <udp_connect+0xb6>
 800d95e:	682b      	ldr	r3, [r5, #0]
 800d960:	6163      	str	r3, [r4, #20]
 800d962:	2300      	movs	r3, #0
 800d964:	6223      	str	r3, [r4, #32]
 800d966:	61e3      	str	r3, [r4, #28]
 800d968:	61a3      	str	r3, [r4, #24]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800d96a:	86a6      	strh	r6, [r4, #52]	; 0x34
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800d96c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800d970:	f043 0304 	orr.w	r3, r3, #4
 800d974:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d978:	4b21      	ldr	r3, [pc, #132]	; (800da00 <udp_connect+0xcc>)
 800d97a:	681a      	ldr	r2, [r3, #0]
 800d97c:	4613      	mov	r3, r2
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d035      	beq.n	800d9ee <udp_connect+0xba>
    if (pcb == ipcb) {
 800d982:	429c      	cmp	r4, r3
 800d984:	d039      	beq.n	800d9fa <udp_connect+0xc6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d988:	e7f9      	b.n	800d97e <udp_connect+0x4a>
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d98a:	4b1e      	ldr	r3, [pc, #120]	; (800da04 <udp_connect+0xd0>)
 800d98c:	f240 4235 	movw	r2, #1077	; 0x435
 800d990:	491d      	ldr	r1, [pc, #116]	; (800da08 <udp_connect+0xd4>)
 800d992:	481e      	ldr	r0, [pc, #120]	; (800da0c <udp_connect+0xd8>)
 800d994:	f006 fe2e 	bl	80145f4 <iprintf>
 800d998:	f06f 030f 	mvn.w	r3, #15
 800d99c:	e02b      	b.n	800d9f6 <udp_connect+0xc2>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d99e:	4b19      	ldr	r3, [pc, #100]	; (800da04 <udp_connect+0xd0>)
 800d9a0:	f240 4236 	movw	r2, #1078	; 0x436
 800d9a4:	491a      	ldr	r1, [pc, #104]	; (800da10 <udp_connect+0xdc>)
 800d9a6:	4819      	ldr	r0, [pc, #100]	; (800da0c <udp_connect+0xd8>)
 800d9a8:	f006 fe24 	bl	80145f4 <iprintf>
 800d9ac:	f06f 030f 	mvn.w	r3, #15
 800d9b0:	e021      	b.n	800d9f6 <udp_connect+0xc2>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d9b2:	4601      	mov	r1, r0
 800d9b4:	f7ff fc98 	bl	800d2e8 <udp_bind>
    if (err != ERR_OK) {
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2800      	cmp	r0, #0
 800d9bc:	d0c4      	beq.n	800d948 <udp_connect+0x14>
 800d9be:	e01a      	b.n	800d9f6 <udp_connect+0xc2>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d9c0:	b15d      	cbz	r5, 800d9da <udp_connect+0xa6>
 800d9c2:	682b      	ldr	r3, [r5, #0]
 800d9c4:	6163      	str	r3, [r4, #20]
 800d9c6:	b155      	cbz	r5, 800d9de <udp_connect+0xaa>
 800d9c8:	686b      	ldr	r3, [r5, #4]
 800d9ca:	61a3      	str	r3, [r4, #24]
 800d9cc:	b14d      	cbz	r5, 800d9e2 <udp_connect+0xae>
 800d9ce:	68ab      	ldr	r3, [r5, #8]
 800d9d0:	61e3      	str	r3, [r4, #28]
 800d9d2:	b145      	cbz	r5, 800d9e6 <udp_connect+0xb2>
 800d9d4:	68eb      	ldr	r3, [r5, #12]
 800d9d6:	6223      	str	r3, [r4, #32]
 800d9d8:	e7c7      	b.n	800d96a <udp_connect+0x36>
 800d9da:	2300      	movs	r3, #0
 800d9dc:	e7f2      	b.n	800d9c4 <udp_connect+0x90>
 800d9de:	2300      	movs	r3, #0
 800d9e0:	e7f3      	b.n	800d9ca <udp_connect+0x96>
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	e7f4      	b.n	800d9d0 <udp_connect+0x9c>
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	e7f5      	b.n	800d9d6 <udp_connect+0xa2>
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	e7b8      	b.n	800d960 <udp_connect+0x2c>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800d9ee:	62e2      	str	r2, [r4, #44]	; 0x2c
  udp_pcbs = pcb;
 800d9f0:	4b03      	ldr	r3, [pc, #12]	; (800da00 <udp_connect+0xcc>)
 800d9f2:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800d9f4:	2300      	movs	r3, #0
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	e7fb      	b.n	800d9f6 <udp_connect+0xc2>
 800d9fe:	bf00      	nop
 800da00:	20008c5c 	.word	0x20008c5c
 800da04:	08017874 	.word	0x08017874
 800da08:	080177ec 	.word	0x080177ec
 800da0c:	08015608 	.word	0x08015608
 800da10:	08017808 	.word	0x08017808

0800da14 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800da14:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800da16:	b110      	cbz	r0, 800da1e <udp_recv+0xa>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800da18:	6401      	str	r1, [r0, #64]	; 0x40
  pcb->recv_arg = recv_arg;
 800da1a:	6442      	str	r2, [r0, #68]	; 0x44
}
 800da1c:	bd08      	pop	{r3, pc}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800da1e:	4b04      	ldr	r3, [pc, #16]	; (800da30 <udp_recv+0x1c>)
 800da20:	f240 428a 	movw	r2, #1162	; 0x48a
 800da24:	4903      	ldr	r1, [pc, #12]	; (800da34 <udp_recv+0x20>)
 800da26:	4804      	ldr	r0, [pc, #16]	; (800da38 <udp_recv+0x24>)
 800da28:	f006 fde4 	bl	80145f4 <iprintf>
 800da2c:	e7f6      	b.n	800da1c <udp_recv+0x8>
 800da2e:	bf00      	nop
 800da30:	08017874 	.word	0x08017874
 800da34:	080178f0 	.word	0x080178f0
 800da38:	08015608 	.word	0x08015608

0800da3c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800da3c:	b508      	push	{r3, lr}
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800da3e:	b150      	cbz	r0, 800da56 <udp_remove+0x1a>
 800da40:	4601      	mov	r1, r0

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800da42:	4b0f      	ldr	r3, [pc, #60]	; (800da80 <udp_remove+0x44>)
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	4282      	cmp	r2, r0
 800da48:	d111      	bne.n	800da6e <udp_remove+0x32>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800da4a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800da4c:	601a      	str	r2, [r3, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800da4e:	2000      	movs	r0, #0
 800da50:	f7fa fa24 	bl	8007e9c <memp_free>
}
 800da54:	bd08      	pop	{r3, pc}
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800da56:	4b0b      	ldr	r3, [pc, #44]	; (800da84 <udp_remove+0x48>)
 800da58:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800da5c:	490a      	ldr	r1, [pc, #40]	; (800da88 <udp_remove+0x4c>)
 800da5e:	480b      	ldr	r0, [pc, #44]	; (800da8c <udp_remove+0x50>)
 800da60:	f006 fdc8 	bl	80145f4 <iprintf>
 800da64:	e7f6      	b.n	800da54 <udp_remove+0x18>
        pcb2->next = pcb->next;
 800da66:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800da68:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800da6a:	e7f0      	b.n	800da4e <udp_remove+0x12>
 800da6c:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800da6e:	2a00      	cmp	r2, #0
 800da70:	d0ed      	beq.n	800da4e <udp_remove+0x12>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800da72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800da74:	2b00      	cmp	r3, #0
 800da76:	d0f9      	beq.n	800da6c <udp_remove+0x30>
 800da78:	428b      	cmp	r3, r1
 800da7a:	d0f4      	beq.n	800da66 <udp_remove+0x2a>
 800da7c:	461a      	mov	r2, r3
 800da7e:	e7f6      	b.n	800da6e <udp_remove+0x32>
 800da80:	20008c5c 	.word	0x20008c5c
 800da84:	08017874 	.word	0x08017874
 800da88:	08017908 	.word	0x08017908
 800da8c:	08015608 	.word	0x08015608

0800da90 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800da90:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800da92:	2000      	movs	r0, #0
 800da94:	f7fa f9e8 	bl	8007e68 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800da98:	4604      	mov	r4, r0
 800da9a:	b140      	cbz	r0, 800daae <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800da9c:	2248      	movs	r2, #72	; 0x48
 800da9e:	2100      	movs	r1, #0
 800daa0:	f006 fd9f 	bl	80145e2 <memset>
    pcb->ttl = UDP_TTL;
 800daa4:	23ff      	movs	r3, #255	; 0xff
 800daa6:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 800daaa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800daae:	4620      	mov	r0, r4
 800dab0:	bd10      	pop	{r4, pc}
	...

0800dab4 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800dab4:	2800      	cmp	r0, #0
 800dab6:	f000 8090 	beq.w	800dbda <udp_netif_ip_addr_changed+0x126>
 800daba:	4602      	mov	r2, r0
 800dabc:	7c03      	ldrb	r3, [r0, #16]
 800dabe:	2b06      	cmp	r3, #6
 800dac0:	d019      	beq.n	800daf6 <udp_netif_ip_addr_changed+0x42>
 800dac2:	2800      	cmp	r0, #0
 800dac4:	d02b      	beq.n	800db1e <udp_netif_ip_addr_changed+0x6a>
 800dac6:	6803      	ldr	r3, [r0, #0]
 800dac8:	bb5b      	cbnz	r3, 800db22 <udp_netif_ip_addr_changed+0x6e>
 800daca:	2b00      	cmp	r3, #0
 800dacc:	f000 8085 	beq.w	800dbda <udp_netif_ip_addr_changed+0x126>
 800dad0:	2900      	cmp	r1, #0
 800dad2:	f000 8082 	beq.w	800dbda <udp_netif_ip_addr_changed+0x126>
 800dad6:	7c0b      	ldrb	r3, [r1, #16]
 800dad8:	2b06      	cmp	r3, #6
 800dada:	d024      	beq.n	800db26 <udp_netif_ip_addr_changed+0x72>
 800dadc:	2900      	cmp	r1, #0
 800dade:	d036      	beq.n	800db4e <udp_netif_ip_addr_changed+0x9a>
 800dae0:	680b      	ldr	r3, [r1, #0]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d135      	bne.n	800db52 <udp_netif_ip_addr_changed+0x9e>
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d077      	beq.n	800dbda <udp_netif_ip_addr_changed+0x126>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800daea:	4b3c      	ldr	r3, [pc, #240]	; (800dbdc <udp_netif_ip_addr_changed+0x128>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d072      	beq.n	800dbd8 <udp_netif_ip_addr_changed+0x124>
{
 800daf2:	b410      	push	{r4}
 800daf4:	e053      	b.n	800db9e <udp_netif_ip_addr_changed+0xea>
  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800daf6:	b150      	cbz	r0, 800db0e <udp_netif_ip_addr_changed+0x5a>
 800daf8:	6803      	ldr	r3, [r0, #0]
 800dafa:	b953      	cbnz	r3, 800db12 <udp_netif_ip_addr_changed+0x5e>
 800dafc:	6843      	ldr	r3, [r0, #4]
 800dafe:	b953      	cbnz	r3, 800db16 <udp_netif_ip_addr_changed+0x62>
 800db00:	6883      	ldr	r3, [r0, #8]
 800db02:	b953      	cbnz	r3, 800db1a <udp_netif_ip_addr_changed+0x66>
 800db04:	68c3      	ldr	r3, [r0, #12]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d0df      	beq.n	800daca <udp_netif_ip_addr_changed+0x16>
 800db0a:	2301      	movs	r3, #1
 800db0c:	e7dd      	b.n	800daca <udp_netif_ip_addr_changed+0x16>
 800db0e:	2300      	movs	r3, #0
 800db10:	e7db      	b.n	800daca <udp_netif_ip_addr_changed+0x16>
 800db12:	2301      	movs	r3, #1
 800db14:	e7d9      	b.n	800daca <udp_netif_ip_addr_changed+0x16>
 800db16:	2301      	movs	r3, #1
 800db18:	e7d7      	b.n	800daca <udp_netif_ip_addr_changed+0x16>
 800db1a:	2301      	movs	r3, #1
 800db1c:	e7d5      	b.n	800daca <udp_netif_ip_addr_changed+0x16>
 800db1e:	2300      	movs	r3, #0
 800db20:	e7d3      	b.n	800daca <udp_netif_ip_addr_changed+0x16>
 800db22:	2301      	movs	r3, #1
 800db24:	e7d1      	b.n	800daca <udp_netif_ip_addr_changed+0x16>
 800db26:	b151      	cbz	r1, 800db3e <udp_netif_ip_addr_changed+0x8a>
 800db28:	680b      	ldr	r3, [r1, #0]
 800db2a:	b953      	cbnz	r3, 800db42 <udp_netif_ip_addr_changed+0x8e>
 800db2c:	684b      	ldr	r3, [r1, #4]
 800db2e:	b953      	cbnz	r3, 800db46 <udp_netif_ip_addr_changed+0x92>
 800db30:	688b      	ldr	r3, [r1, #8]
 800db32:	b953      	cbnz	r3, 800db4a <udp_netif_ip_addr_changed+0x96>
 800db34:	68cb      	ldr	r3, [r1, #12]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d0d5      	beq.n	800dae6 <udp_netif_ip_addr_changed+0x32>
 800db3a:	2301      	movs	r3, #1
 800db3c:	e7d3      	b.n	800dae6 <udp_netif_ip_addr_changed+0x32>
 800db3e:	2300      	movs	r3, #0
 800db40:	e7d1      	b.n	800dae6 <udp_netif_ip_addr_changed+0x32>
 800db42:	2301      	movs	r3, #1
 800db44:	e7cf      	b.n	800dae6 <udp_netif_ip_addr_changed+0x32>
 800db46:	2301      	movs	r3, #1
 800db48:	e7cd      	b.n	800dae6 <udp_netif_ip_addr_changed+0x32>
 800db4a:	2301      	movs	r3, #1
 800db4c:	e7cb      	b.n	800dae6 <udp_netif_ip_addr_changed+0x32>
 800db4e:	2300      	movs	r3, #0
 800db50:	e7c9      	b.n	800dae6 <udp_netif_ip_addr_changed+0x32>
 800db52:	2301      	movs	r3, #1
 800db54:	e7c7      	b.n	800dae6 <udp_netif_ip_addr_changed+0x32>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800db56:	681c      	ldr	r4, [r3, #0]
 800db58:	6810      	ldr	r0, [r2, #0]
 800db5a:	4284      	cmp	r4, r0
 800db5c:	d001      	beq.n	800db62 <udp_netif_ip_addr_changed+0xae>
 800db5e:	2000      	movs	r0, #0
 800db60:	e029      	b.n	800dbb6 <udp_netif_ip_addr_changed+0x102>
 800db62:	685c      	ldr	r4, [r3, #4]
 800db64:	6850      	ldr	r0, [r2, #4]
 800db66:	4284      	cmp	r4, r0
 800db68:	d001      	beq.n	800db6e <udp_netif_ip_addr_changed+0xba>
 800db6a:	2000      	movs	r0, #0
 800db6c:	e023      	b.n	800dbb6 <udp_netif_ip_addr_changed+0x102>
 800db6e:	689c      	ldr	r4, [r3, #8]
 800db70:	6890      	ldr	r0, [r2, #8]
 800db72:	4284      	cmp	r4, r0
 800db74:	d001      	beq.n	800db7a <udp_netif_ip_addr_changed+0xc6>
 800db76:	2000      	movs	r0, #0
 800db78:	e01d      	b.n	800dbb6 <udp_netif_ip_addr_changed+0x102>
 800db7a:	68dc      	ldr	r4, [r3, #12]
 800db7c:	68d0      	ldr	r0, [r2, #12]
 800db7e:	4284      	cmp	r4, r0
 800db80:	d001      	beq.n	800db86 <udp_netif_ip_addr_changed+0xd2>
 800db82:	2000      	movs	r0, #0
 800db84:	e017      	b.n	800dbb6 <udp_netif_ip_addr_changed+0x102>
 800db86:	2001      	movs	r0, #1
 800db88:	e015      	b.n	800dbb6 <udp_netif_ip_addr_changed+0x102>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800db8a:	6808      	ldr	r0, [r1, #0]
 800db8c:	6018      	str	r0, [r3, #0]
 800db8e:	6848      	ldr	r0, [r1, #4]
 800db90:	6058      	str	r0, [r3, #4]
 800db92:	6888      	ldr	r0, [r1, #8]
 800db94:	6098      	str	r0, [r3, #8]
 800db96:	68c8      	ldr	r0, [r1, #12]
 800db98:	60d8      	str	r0, [r3, #12]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800db9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db9c:	b1cb      	cbz	r3, 800dbd2 <udp_netif_ip_addr_changed+0x11e>
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800db9e:	7c18      	ldrb	r0, [r3, #16]
 800dba0:	7c14      	ldrb	r4, [r2, #16]
 800dba2:	42a0      	cmp	r0, r4
 800dba4:	d1f9      	bne.n	800db9a <udp_netif_ip_addr_changed+0xe6>
 800dba6:	2806      	cmp	r0, #6
 800dba8:	d0d5      	beq.n	800db56 <udp_netif_ip_addr_changed+0xa2>
 800dbaa:	6818      	ldr	r0, [r3, #0]
 800dbac:	6814      	ldr	r4, [r2, #0]
 800dbae:	42a0      	cmp	r0, r4
 800dbb0:	bf14      	ite	ne
 800dbb2:	2000      	movne	r0, #0
 800dbb4:	2001      	moveq	r0, #1
 800dbb6:	2800      	cmp	r0, #0
 800dbb8:	d0ef      	beq.n	800db9a <udp_netif_ip_addr_changed+0xe6>
        ip_addr_copy(upcb->local_ip, *new_addr);
 800dbba:	7c08      	ldrb	r0, [r1, #16]
 800dbbc:	7418      	strb	r0, [r3, #16]
 800dbbe:	7c08      	ldrb	r0, [r1, #16]
 800dbc0:	2806      	cmp	r0, #6
 800dbc2:	d0e2      	beq.n	800db8a <udp_netif_ip_addr_changed+0xd6>
 800dbc4:	6808      	ldr	r0, [r1, #0]
 800dbc6:	6018      	str	r0, [r3, #0]
 800dbc8:	2000      	movs	r0, #0
 800dbca:	60d8      	str	r0, [r3, #12]
 800dbcc:	6098      	str	r0, [r3, #8]
 800dbce:	6058      	str	r0, [r3, #4]
 800dbd0:	e7e3      	b.n	800db9a <udp_netif_ip_addr_changed+0xe6>
      }
    }
  }
}
 800dbd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbd6:	4770      	bx	lr
 800dbd8:	4770      	bx	lr
 800dbda:	4770      	bx	lr
 800dbdc:	20008c5c 	.word	0x20008c5c

0800dbe0 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 800dbe0:	7943      	ldrb	r3, [r0, #5]
 800dbe2:	428b      	cmp	r3, r1
 800dbe4:	d003      	beq.n	800dbee <dhcp_set_state+0xe>
    dhcp->state = new_state;
 800dbe6:	7141      	strb	r1, [r0, #5]
    dhcp->tries = 0;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	7183      	strb	r3, [r0, #6]
    dhcp->request_timeout = 0;
 800dbec:	8103      	strh	r3, [r0, #8]
  }
}
 800dbee:	4770      	bx	lr

0800dbf0 <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800dbf0:	b570      	push	{r4, r5, r6, lr}
 800dbf2:	4604      	mov	r4, r0
 800dbf4:	460d      	mov	r5, r1
 800dbf6:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800dbf8:	1c83      	adds	r3, r0, #2
 800dbfa:	2b44      	cmp	r3, #68	; 0x44
 800dbfc:	d807      	bhi.n	800dc0e <dhcp_option_short+0x1e>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800dbfe:	1c63      	adds	r3, r4, #1
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	0a32      	lsrs	r2, r6, #8
 800dc04:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800dc06:	1ca0      	adds	r0, r4, #2
 800dc08:	54ee      	strb	r6, [r5, r3]
  return options_out_len;
}
 800dc0a:	b280      	uxth	r0, r0
 800dc0c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800dc0e:	4b04      	ldr	r3, [pc, #16]	; (800dc20 <dhcp_option_short+0x30>)
 800dc10:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800dc14:	4903      	ldr	r1, [pc, #12]	; (800dc24 <dhcp_option_short+0x34>)
 800dc16:	4804      	ldr	r0, [pc, #16]	; (800dc28 <dhcp_option_short+0x38>)
 800dc18:	f006 fcec 	bl	80145f4 <iprintf>
 800dc1c:	e7ef      	b.n	800dbfe <dhcp_option_short+0xe>
 800dc1e:	bf00      	nop
 800dc20:	08017c80 	.word	0x08017c80
 800dc24:	08017cb8 	.word	0x08017cb8
 800dc28:	08015608 	.word	0x08015608

0800dc2c <dhcp_option>:
{
 800dc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc2e:	4604      	mov	r4, r0
 800dc30:	460d      	mov	r5, r1
 800dc32:	4617      	mov	r7, r2
 800dc34:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800dc36:	4403      	add	r3, r0
 800dc38:	3302      	adds	r3, #2
 800dc3a:	2b44      	cmp	r3, #68	; 0x44
 800dc3c:	d806      	bhi.n	800dc4c <dhcp_option+0x20>
  options[options_out_len++] = option_type;
 800dc3e:	1c63      	adds	r3, r4, #1
 800dc40:	b29b      	uxth	r3, r3
 800dc42:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 800dc44:	1ca0      	adds	r0, r4, #2
 800dc46:	54ee      	strb	r6, [r5, r3]
}
 800dc48:	b280      	uxth	r0, r0
 800dc4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800dc4c:	4b03      	ldr	r3, [pc, #12]	; (800dc5c <dhcp_option+0x30>)
 800dc4e:	f240 529a 	movw	r2, #1434	; 0x59a
 800dc52:	4903      	ldr	r1, [pc, #12]	; (800dc60 <dhcp_option+0x34>)
 800dc54:	4803      	ldr	r0, [pc, #12]	; (800dc64 <dhcp_option+0x38>)
 800dc56:	f006 fccd 	bl	80145f4 <iprintf>
 800dc5a:	e7f0      	b.n	800dc3e <dhcp_option+0x12>
 800dc5c:	08017c80 	.word	0x08017c80
 800dc60:	08017bc8 	.word	0x08017bc8
 800dc64:	08015608 	.word	0x08015608

0800dc68 <dhcp_option_byte>:
{
 800dc68:	b570      	push	{r4, r5, r6, lr}
 800dc6a:	4604      	mov	r4, r0
 800dc6c:	460d      	mov	r5, r1
 800dc6e:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800dc70:	2843      	cmp	r0, #67	; 0x43
 800dc72:	d803      	bhi.n	800dc7c <dhcp_option_byte+0x14>
  options[options_out_len++] = value;
 800dc74:	1c60      	adds	r0, r4, #1
 800dc76:	552e      	strb	r6, [r5, r4]
}
 800dc78:	b280      	uxth	r0, r0
 800dc7a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800dc7c:	4b03      	ldr	r3, [pc, #12]	; (800dc8c <dhcp_option_byte+0x24>)
 800dc7e:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800dc82:	4903      	ldr	r1, [pc, #12]	; (800dc90 <dhcp_option_byte+0x28>)
 800dc84:	4803      	ldr	r0, [pc, #12]	; (800dc94 <dhcp_option_byte+0x2c>)
 800dc86:	f006 fcb5 	bl	80145f4 <iprintf>
 800dc8a:	e7f3      	b.n	800dc74 <dhcp_option_byte+0xc>
 800dc8c:	08017c80 	.word	0x08017c80
 800dc90:	08017c0c 	.word	0x08017c0c
 800dc94:	08015608 	.word	0x08015608

0800dc98 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800dc98:	b570      	push	{r4, r5, r6, lr}
 800dc9a:	4604      	mov	r4, r0
 800dc9c:	460d      	mov	r5, r1
 800dc9e:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800dca0:	1d03      	adds	r3, r0, #4
 800dca2:	2b44      	cmp	r3, #68	; 0x44
 800dca4:	d811      	bhi.n	800dcca <dhcp_option_long+0x32>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800dca6:	1c63      	adds	r3, r4, #1
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	0e32      	lsrs	r2, r6, #24
 800dcac:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800dcae:	1ca2      	adds	r2, r4, #2
 800dcb0:	b292      	uxth	r2, r2
 800dcb2:	f3c6 4107 	ubfx	r1, r6, #16, #8
 800dcb6:	54e9      	strb	r1, [r5, r3]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800dcb8:	1ce3      	adds	r3, r4, #3
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	f3c6 2107 	ubfx	r1, r6, #8, #8
 800dcc0:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800dcc2:	1d20      	adds	r0, r4, #4
 800dcc4:	54ee      	strb	r6, [r5, r3]
  return options_out_len;
}
 800dcc6:	b280      	uxth	r0, r0
 800dcc8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800dcca:	4b04      	ldr	r3, [pc, #16]	; (800dcdc <dhcp_option_long+0x44>)
 800dccc:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800dcd0:	4903      	ldr	r1, [pc, #12]	; (800dce0 <dhcp_option_long+0x48>)
 800dcd2:	4804      	ldr	r0, [pc, #16]	; (800dce4 <dhcp_option_long+0x4c>)
 800dcd4:	f006 fc8e 	bl	80145f4 <iprintf>
 800dcd8:	e7e5      	b.n	800dca6 <dhcp_option_long+0xe>
 800dcda:	bf00      	nop
 800dcdc:	08017c80 	.word	0x08017c80
 800dce0:	08017c44 	.word	0x08017c44
 800dce4:	08015608 	.word	0x08015608

0800dce8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800dce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800dcec:	2800      	cmp	r0, #0
 800dcee:	d042      	beq.n	800dd76 <dhcp_create_msg+0x8e>
 800dcf0:	4689      	mov	r9, r1
 800dcf2:	4615      	mov	r5, r2
 800dcf4:	461f      	mov	r7, r3
 800dcf6:	4680      	mov	r8, r0
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800dcf8:	2900      	cmp	r1, #0
 800dcfa:	d045      	beq.n	800dd88 <dhcp_create_msg+0xa0>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800dcfc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dd00:	f44f 719a 	mov.w	r1, #308	; 0x134
 800dd04:	204a      	movs	r0, #74	; 0x4a
 800dd06:	f7fa fd71 	bl	80087ec <pbuf_alloc>
  if (p_out == NULL) {
 800dd0a:	4606      	mov	r6, r0
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	d079      	beq.n	800de04 <dhcp_create_msg+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800dd10:	8943      	ldrh	r3, [r0, #10]
 800dd12:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800dd16:	d340      	bcc.n	800dd9a <dhcp_create_msg+0xb2>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800dd18:	2d03      	cmp	r5, #3
 800dd1a:	d046      	beq.n	800ddaa <dhcp_create_msg+0xc2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800dd1c:	f899 3006 	ldrb.w	r3, [r9, #6]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d047      	beq.n	800ddb4 <dhcp_create_msg+0xcc>
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800dd24:	4b39      	ldr	r3, [pc, #228]	; (800de0c <dhcp_create_msg+0x124>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f8c9 3000 	str.w	r3, [r9]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800dd2c:	6874      	ldr	r4, [r6, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800dd2e:	f44f 729a 	mov.w	r2, #308	; 0x134
 800dd32:	2100      	movs	r1, #0
 800dd34:	4620      	mov	r0, r4
 800dd36:	f006 fc54 	bl	80145e2 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	7023      	strb	r3, [r4, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800dd3e:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 800dd40:	f898 30c2 	ldrb.w	r3, [r8, #194]	; 0xc2
 800dd44:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800dd46:	f8d9 0000 	ldr.w	r0, [r9]
 800dd4a:	f7f9 fa54 	bl	80071f6 <lwip_htonl>
 800dd4e:	6060      	str	r0, [r4, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800dd50:	2d08      	cmp	r5, #8
 800dd52:	d00b      	beq.n	800dd6c <dhcp_create_msg+0x84>
 800dd54:	2d04      	cmp	r5, #4
 800dd56:	d009      	beq.n	800dd6c <dhcp_create_msg+0x84>
 800dd58:	2d07      	cmp	r5, #7
 800dd5a:	d007      	beq.n	800dd6c <dhcp_create_msg+0x84>
 800dd5c:	2d03      	cmp	r5, #3
 800dd5e:	d108      	bne.n	800dd72 <dhcp_create_msg+0x8a>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800dd60:	f899 3005 	ldrb.w	r3, [r9, #5]
 800dd64:	3b04      	subs	r3, #4
 800dd66:	b2db      	uxtb	r3, r3
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800dd68:	2b01      	cmp	r3, #1
 800dd6a:	d802      	bhi.n	800dd72 <dhcp_create_msg+0x8a>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800dd6c:	f8d8 3000 	ldr.w	r3, [r8]
 800dd70:	60e3      	str	r3, [r4, #12]
{
 800dd72:	2300      	movs	r3, #0
 800dd74:	e02b      	b.n	800ddce <dhcp_create_msg+0xe6>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800dd76:	4b26      	ldr	r3, [pc, #152]	; (800de10 <dhcp_create_msg+0x128>)
 800dd78:	f240 7269 	movw	r2, #1897	; 0x769
 800dd7c:	4925      	ldr	r1, [pc, #148]	; (800de14 <dhcp_create_msg+0x12c>)
 800dd7e:	4826      	ldr	r0, [pc, #152]	; (800de18 <dhcp_create_msg+0x130>)
 800dd80:	f006 fc38 	bl	80145f4 <iprintf>
 800dd84:	2600      	movs	r6, #0
 800dd86:	e03d      	b.n	800de04 <dhcp_create_msg+0x11c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800dd88:	4b21      	ldr	r3, [pc, #132]	; (800de10 <dhcp_create_msg+0x128>)
 800dd8a:	f240 726a 	movw	r2, #1898	; 0x76a
 800dd8e:	4923      	ldr	r1, [pc, #140]	; (800de1c <dhcp_create_msg+0x134>)
 800dd90:	4821      	ldr	r0, [pc, #132]	; (800de18 <dhcp_create_msg+0x130>)
 800dd92:	f006 fc2f 	bl	80145f4 <iprintf>
 800dd96:	2600      	movs	r6, #0
 800dd98:	e034      	b.n	800de04 <dhcp_create_msg+0x11c>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800dd9a:	4b1d      	ldr	r3, [pc, #116]	; (800de10 <dhcp_create_msg+0x128>)
 800dd9c:	f240 7272 	movw	r2, #1906	; 0x772
 800dda0:	491f      	ldr	r1, [pc, #124]	; (800de20 <dhcp_create_msg+0x138>)
 800dda2:	481d      	ldr	r0, [pc, #116]	; (800de18 <dhcp_create_msg+0x130>)
 800dda4:	f006 fc26 	bl	80145f4 <iprintf>
 800dda8:	e7b6      	b.n	800dd18 <dhcp_create_msg+0x30>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800ddaa:	f899 3005 	ldrb.w	r3, [r9, #5]
 800ddae:	2b03      	cmp	r3, #3
 800ddb0:	d1bc      	bne.n	800dd2c <dhcp_create_msg+0x44>
 800ddb2:	e7b3      	b.n	800dd1c <dhcp_create_msg+0x34>
      xid = LWIP_RAND();
 800ddb4:	f006 fc9a 	bl	80146ec <rand>
 800ddb8:	4b14      	ldr	r3, [pc, #80]	; (800de0c <dhcp_create_msg+0x124>)
 800ddba:	6018      	str	r0, [r3, #0]
 800ddbc:	e7b2      	b.n	800dd24 <dhcp_create_msg+0x3c>
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800ddbe:	eb08 0203 	add.w	r2, r8, r3
 800ddc2:	f892 10bc 	ldrb.w	r1, [r2, #188]	; 0xbc
 800ddc6:	18e2      	adds	r2, r4, r3
 800ddc8:	7711      	strb	r1, [r2, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ddca:	3301      	adds	r3, #1
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	2b05      	cmp	r3, #5
 800ddd0:	d9f5      	bls.n	800ddbe <dhcp_create_msg+0xd6>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800ddd2:	2363      	movs	r3, #99	; 0x63
 800ddd4:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 800ddd8:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800dddc:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
 800dde0:	2253      	movs	r2, #83	; 0x53
 800dde2:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
 800dde6:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800ddea:	34f0      	adds	r4, #240	; 0xf0
 800ddec:	2301      	movs	r3, #1
 800ddee:	2235      	movs	r2, #53	; 0x35
 800ddf0:	4621      	mov	r1, r4
 800ddf2:	2000      	movs	r0, #0
 800ddf4:	f7ff ff1a 	bl	800dc2c <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800ddf8:	462a      	mov	r2, r5
 800ddfa:	4621      	mov	r1, r4
 800ddfc:	f7ff ff34 	bl	800dc68 <dhcp_option_byte>
  if (options_out_len) {
 800de00:	b107      	cbz	r7, 800de04 <dhcp_create_msg+0x11c>
    *options_out_len = options_out_len_loc;
 800de02:	8038      	strh	r0, [r7, #0]
  }
  return p_out;
}
 800de04:	4630      	mov	r0, r6
 800de06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de0a:	bf00      	nop
 800de0c:	20001784 	.word	0x20001784
 800de10:	08017c80 	.word	0x08017c80
 800de14:	08017af8 	.word	0x08017af8
 800de18:	08015608 	.word	0x08015608
 800de1c:	08017b18 	.word	0x08017b18
 800de20:	08017b38 	.word	0x08017b38

0800de24 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800de24:	b538      	push	{r3, r4, r5, lr}
  options[options_out_len++] = DHCP_OPTION_END;
 800de26:	1c43      	adds	r3, r0, #1
 800de28:	b29b      	uxth	r3, r3
 800de2a:	24ff      	movs	r4, #255	; 0xff
 800de2c:	540c      	strb	r4, [r1, r0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800de2e:	e003      	b.n	800de38 <dhcp_option_trailer+0x14>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800de30:	1c5c      	adds	r4, r3, #1
 800de32:	2500      	movs	r5, #0
 800de34:	54cd      	strb	r5, [r1, r3]
 800de36:	b2a3      	uxth	r3, r4
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800de38:	2b43      	cmp	r3, #67	; 0x43
 800de3a:	d808      	bhi.n	800de4e <dhcp_option_trailer+0x2a>
 800de3c:	2b43      	cmp	r3, #67	; 0x43
 800de3e:	d9f7      	bls.n	800de30 <dhcp_option_trailer+0xc>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800de40:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800de44:	b289      	uxth	r1, r1
 800de46:	4610      	mov	r0, r2
 800de48:	f7fa fd7e 	bl	8008948 <pbuf_realloc>
}
 800de4c:	bd38      	pop	{r3, r4, r5, pc}
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800de4e:	f013 0f03 	tst.w	r3, #3
 800de52:	d1f3      	bne.n	800de3c <dhcp_option_trailer+0x18>
 800de54:	e7f4      	b.n	800de40 <dhcp_option_trailer+0x1c>
	...

0800de58 <dhcp_rebind>:
{
 800de58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de5c:	b084      	sub	sp, #16
 800de5e:	4680      	mov	r8, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800de60:	f8d0 60ac 	ldr.w	r6, [r0, #172]	; 0xac
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800de64:	2104      	movs	r1, #4
 800de66:	4630      	mov	r0, r6
 800de68:	f7ff feba 	bl	800dbe0 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800de6c:	f10d 030e 	add.w	r3, sp, #14
 800de70:	2203      	movs	r2, #3
 800de72:	4631      	mov	r1, r6
 800de74:	4640      	mov	r0, r8
 800de76:	f7ff ff37 	bl	800dce8 <dhcp_create_msg>
  if (p_out != NULL) {
 800de7a:	2800      	cmp	r0, #0
 800de7c:	d056      	beq.n	800df2c <dhcp_rebind+0xd4>
 800de7e:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800de80:	6845      	ldr	r5, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800de82:	35f0      	adds	r5, #240	; 0xf0
 800de84:	2302      	movs	r3, #2
 800de86:	2239      	movs	r2, #57	; 0x39
 800de88:	4629      	mov	r1, r5
 800de8a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800de8e:	f7ff fecd 	bl	800dc2c <dhcp_option>
 800de92:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800de96:	f8b8 20b8 	ldrh.w	r2, [r8, #184]	; 0xb8
 800de9a:	4629      	mov	r1, r5
 800de9c:	f7ff fea8 	bl	800dbf0 <dhcp_option_short>
 800dea0:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800dea4:	2304      	movs	r3, #4
 800dea6:	2237      	movs	r2, #55	; 0x37
 800dea8:	4629      	mov	r1, r5
 800deaa:	f7ff febf 	bl	800dc2c <dhcp_option>
 800deae:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800deb2:	2400      	movs	r4, #0
 800deb4:	e00a      	b.n	800decc <dhcp_rebind+0x74>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800deb6:	4b20      	ldr	r3, [pc, #128]	; (800df38 <dhcp_rebind+0xe0>)
 800deb8:	5d1a      	ldrb	r2, [r3, r4]
 800deba:	4629      	mov	r1, r5
 800debc:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800dec0:	f7ff fed2 	bl	800dc68 <dhcp_option_byte>
 800dec4:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800dec8:	3401      	adds	r4, #1
 800deca:	b2e4      	uxtb	r4, r4
 800decc:	2c03      	cmp	r4, #3
 800dece:	d9f2      	bls.n	800deb6 <dhcp_rebind+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ded0:	463a      	mov	r2, r7
 800ded2:	4629      	mov	r1, r5
 800ded4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800ded8:	f7ff ffa4 	bl	800de24 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800dedc:	4b17      	ldr	r3, [pc, #92]	; (800df3c <dhcp_rebind+0xe4>)
 800dede:	6818      	ldr	r0, [r3, #0]
 800dee0:	f8cd 8000 	str.w	r8, [sp]
 800dee4:	2343      	movs	r3, #67	; 0x43
 800dee6:	4a16      	ldr	r2, [pc, #88]	; (800df40 <dhcp_rebind+0xe8>)
 800dee8:	4639      	mov	r1, r7
 800deea:	f7ff fc13 	bl	800d714 <udp_sendto_if>
 800deee:	4604      	mov	r4, r0
    pbuf_free(p_out);
 800def0:	4638      	mov	r0, r7
 800def2:	f7fa fc19 	bl	8008728 <pbuf_free>
  if (dhcp->tries < 255) {
 800def6:	79b3      	ldrb	r3, [r6, #6]
 800def8:	2bff      	cmp	r3, #255	; 0xff
 800defa:	d001      	beq.n	800df00 <dhcp_rebind+0xa8>
    dhcp->tries++;
 800defc:	3301      	adds	r3, #1
 800defe:	71b3      	strb	r3, [r6, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800df00:	79b3      	ldrb	r3, [r6, #6]
 800df02:	2b09      	cmp	r3, #9
 800df04:	d815      	bhi.n	800df32 <dhcp_rebind+0xda>
 800df06:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800df0a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800df0e:	00d3      	lsls	r3, r2, #3
 800df10:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800df12:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800df16:	4a0b      	ldr	r2, [pc, #44]	; (800df44 <dhcp_rebind+0xec>)
 800df18:	fb82 1203 	smull	r1, r2, r2, r3
 800df1c:	17db      	asrs	r3, r3, #31
 800df1e:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800df22:	8133      	strh	r3, [r6, #8]
}
 800df24:	4620      	mov	r0, r4
 800df26:	b004      	add	sp, #16
 800df28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 800df2c:	f04f 34ff 	mov.w	r4, #4294967295
 800df30:	e7e1      	b.n	800def6 <dhcp_rebind+0x9e>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800df32:	f242 7310 	movw	r3, #10000	; 0x2710
 800df36:	e7ec      	b.n	800df12 <dhcp_rebind+0xba>
 800df38:	08017b9c 	.word	0x08017b9c
 800df3c:	2000177c 	.word	0x2000177c
 800df40:	08018264 	.word	0x08018264
 800df44:	10624dd3 	.word	0x10624dd3

0800df48 <dhcp_t2_timeout>:
{
 800df48:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800df4a:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800df4e:	7963      	ldrb	r3, [r4, #5]
 800df50:	2b01      	cmp	r3, #1
 800df52:	d005      	beq.n	800df60 <dhcp_t2_timeout+0x18>
 800df54:	2b0a      	cmp	r3, #10
 800df56:	d003      	beq.n	800df60 <dhcp_t2_timeout+0x18>
 800df58:	2b05      	cmp	r3, #5
 800df5a:	d001      	beq.n	800df60 <dhcp_t2_timeout+0x18>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800df5c:	2b04      	cmp	r3, #4
 800df5e:	d10b      	bne.n	800df78 <dhcp_t2_timeout+0x30>
    dhcp_rebind(netif);
 800df60:	f7ff ff7a 	bl	800de58 <dhcp_rebind>
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800df64:	8aa3      	ldrh	r3, [r4, #20]
 800df66:	8a62      	ldrh	r2, [r4, #18]
 800df68:	1a9b      	subs	r3, r3, r2
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	dd04      	ble.n	800df78 <dhcp_t2_timeout+0x30>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800df6e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800df72:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800df76:	8223      	strh	r3, [r4, #16]
}
 800df78:	bd10      	pop	{r4, pc}
	...

0800df7c <dhcp_reboot>:
{
 800df7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df80:	b084      	sub	sp, #16
 800df82:	4680      	mov	r8, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800df84:	f8d0 60ac 	ldr.w	r6, [r0, #172]	; 0xac
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800df88:	2103      	movs	r1, #3
 800df8a:	4630      	mov	r0, r6
 800df8c:	f7ff fe28 	bl	800dbe0 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800df90:	f10d 030e 	add.w	r3, sp, #14
 800df94:	2203      	movs	r2, #3
 800df96:	4631      	mov	r1, r6
 800df98:	4640      	mov	r0, r8
 800df9a:	f7ff fea5 	bl	800dce8 <dhcp_create_msg>
  if (p_out != NULL) {
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	d068      	beq.n	800e074 <dhcp_reboot+0xf8>
 800dfa2:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800dfa4:	6845      	ldr	r5, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800dfa6:	35f0      	adds	r5, #240	; 0xf0
 800dfa8:	2302      	movs	r3, #2
 800dfaa:	2239      	movs	r2, #57	; 0x39
 800dfac:	4629      	mov	r1, r5
 800dfae:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800dfb2:	f7ff fe3b 	bl	800dc2c <dhcp_option>
 800dfb6:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800dfba:	f44f 7210 	mov.w	r2, #576	; 0x240
 800dfbe:	4629      	mov	r1, r5
 800dfc0:	f7ff fe16 	bl	800dbf0 <dhcp_option_short>
 800dfc4:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800dfc8:	2304      	movs	r3, #4
 800dfca:	2232      	movs	r2, #50	; 0x32
 800dfcc:	4629      	mov	r1, r5
 800dfce:	f7ff fe2d 	bl	800dc2c <dhcp_option>
 800dfd2:	4604      	mov	r4, r0
 800dfd4:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800dfd8:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800dfda:	f7f9 f90c 	bl	80071f6 <lwip_htonl>
 800dfde:	4602      	mov	r2, r0
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f7ff fe58 	bl	800dc98 <dhcp_option_long>
 800dfe8:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800dfec:	2304      	movs	r3, #4
 800dfee:	2237      	movs	r2, #55	; 0x37
 800dff0:	4629      	mov	r1, r5
 800dff2:	f7ff fe1b 	bl	800dc2c <dhcp_option>
 800dff6:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800dffa:	2400      	movs	r4, #0
 800dffc:	e00a      	b.n	800e014 <dhcp_reboot+0x98>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800dffe:	4b20      	ldr	r3, [pc, #128]	; (800e080 <dhcp_reboot+0x104>)
 800e000:	5d1a      	ldrb	r2, [r3, r4]
 800e002:	4629      	mov	r1, r5
 800e004:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e008:	f7ff fe2e 	bl	800dc68 <dhcp_option_byte>
 800e00c:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e010:	3401      	adds	r4, #1
 800e012:	b2e4      	uxtb	r4, r4
 800e014:	2c03      	cmp	r4, #3
 800e016:	d9f2      	bls.n	800dffe <dhcp_reboot+0x82>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e018:	463a      	mov	r2, r7
 800e01a:	4629      	mov	r1, r5
 800e01c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e020:	f7ff ff00 	bl	800de24 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e024:	4b17      	ldr	r3, [pc, #92]	; (800e084 <dhcp_reboot+0x108>)
 800e026:	6818      	ldr	r0, [r3, #0]
 800e028:	f8cd 8000 	str.w	r8, [sp]
 800e02c:	2343      	movs	r3, #67	; 0x43
 800e02e:	4a16      	ldr	r2, [pc, #88]	; (800e088 <dhcp_reboot+0x10c>)
 800e030:	4639      	mov	r1, r7
 800e032:	f7ff fb6f 	bl	800d714 <udp_sendto_if>
 800e036:	4604      	mov	r4, r0
    pbuf_free(p_out);
 800e038:	4638      	mov	r0, r7
 800e03a:	f7fa fb75 	bl	8008728 <pbuf_free>
  if (dhcp->tries < 255) {
 800e03e:	79b3      	ldrb	r3, [r6, #6]
 800e040:	2bff      	cmp	r3, #255	; 0xff
 800e042:	d001      	beq.n	800e048 <dhcp_reboot+0xcc>
    dhcp->tries++;
 800e044:	3301      	adds	r3, #1
 800e046:	71b3      	strb	r3, [r6, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800e048:	79b3      	ldrb	r3, [r6, #6]
 800e04a:	2b09      	cmp	r3, #9
 800e04c:	d815      	bhi.n	800e07a <dhcp_reboot+0xfe>
 800e04e:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800e052:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e056:	00d3      	lsls	r3, r2, #3
 800e058:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e05a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e05e:	4a0b      	ldr	r2, [pc, #44]	; (800e08c <dhcp_reboot+0x110>)
 800e060:	fb82 1203 	smull	r1, r2, r2, r3
 800e064:	17db      	asrs	r3, r3, #31
 800e066:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800e06a:	8133      	strh	r3, [r6, #8]
}
 800e06c:	4620      	mov	r0, r4
 800e06e:	b004      	add	sp, #16
 800e070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 800e074:	f04f 34ff 	mov.w	r4, #4294967295
 800e078:	e7e1      	b.n	800e03e <dhcp_reboot+0xc2>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800e07a:	f242 7310 	movw	r3, #10000	; 0x2710
 800e07e:	e7ec      	b.n	800e05a <dhcp_reboot+0xde>
 800e080:	08017b9c 	.word	0x08017b9c
 800e084:	2000177c 	.word	0x2000177c
 800e088:	08018264 	.word	0x08018264
 800e08c:	10624dd3 	.word	0x10624dd3

0800e090 <dhcp_select>:
{
 800e090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e094:	b084      	sub	sp, #16
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800e096:	2800      	cmp	r0, #0
 800e098:	d052      	beq.n	800e140 <dhcp_select+0xb0>
 800e09a:	4607      	mov	r7, r0
  dhcp = netif_dhcp_data(netif);
 800e09c:	f8d0 50ac 	ldr.w	r5, [r0, #172]	; 0xac
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800e0a0:	2d00      	cmp	r5, #0
 800e0a2:	d057      	beq.n	800e154 <dhcp_select+0xc4>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800e0a4:	2101      	movs	r1, #1
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	f7ff fd9a 	bl	800dbe0 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e0ac:	f10d 030e 	add.w	r3, sp, #14
 800e0b0:	2203      	movs	r2, #3
 800e0b2:	4629      	mov	r1, r5
 800e0b4:	4638      	mov	r0, r7
 800e0b6:	f7ff fe17 	bl	800dce8 <dhcp_create_msg>
  if (p_out != NULL) {
 800e0ba:	4680      	mov	r8, r0
 800e0bc:	2800      	cmp	r0, #0
 800e0be:	f000 8091 	beq.w	800e1e4 <dhcp_select+0x154>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e0c2:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e0c4:	36f0      	adds	r6, #240	; 0xf0
 800e0c6:	2302      	movs	r3, #2
 800e0c8:	2239      	movs	r2, #57	; 0x39
 800e0ca:	4631      	mov	r1, r6
 800e0cc:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e0d0:	f7ff fdac 	bl	800dc2c <dhcp_option>
 800e0d4:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e0d8:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 800e0dc:	4631      	mov	r1, r6
 800e0de:	f7ff fd87 	bl	800dbf0 <dhcp_option_short>
 800e0e2:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800e0e6:	2304      	movs	r3, #4
 800e0e8:	2232      	movs	r2, #50	; 0x32
 800e0ea:	4631      	mov	r1, r6
 800e0ec:	f7ff fd9e 	bl	800dc2c <dhcp_option>
 800e0f0:	4604      	mov	r4, r0
 800e0f2:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e0f6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800e0f8:	f7f9 f87d 	bl	80071f6 <lwip_htonl>
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	4631      	mov	r1, r6
 800e100:	4620      	mov	r0, r4
 800e102:	f7ff fdc9 	bl	800dc98 <dhcp_option_long>
 800e106:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800e10a:	2304      	movs	r3, #4
 800e10c:	2236      	movs	r2, #54	; 0x36
 800e10e:	4631      	mov	r1, r6
 800e110:	f7ff fd8c 	bl	800dc2c <dhcp_option>
 800e114:	4604      	mov	r4, r0
 800e116:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800e11a:	69a8      	ldr	r0, [r5, #24]
 800e11c:	f7f9 f86b 	bl	80071f6 <lwip_htonl>
 800e120:	4602      	mov	r2, r0
 800e122:	4631      	mov	r1, r6
 800e124:	4620      	mov	r0, r4
 800e126:	f7ff fdb7 	bl	800dc98 <dhcp_option_long>
 800e12a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e12e:	2304      	movs	r3, #4
 800e130:	2237      	movs	r2, #55	; 0x37
 800e132:	4631      	mov	r1, r6
 800e134:	f7ff fd7a 	bl	800dc2c <dhcp_option>
 800e138:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e13c:	2400      	movs	r4, #0
 800e13e:	e01e      	b.n	800e17e <dhcp_select+0xee>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800e140:	4b2b      	ldr	r3, [pc, #172]	; (800e1f0 <dhcp_select+0x160>)
 800e142:	f240 1277 	movw	r2, #375	; 0x177
 800e146:	492b      	ldr	r1, [pc, #172]	; (800e1f4 <dhcp_select+0x164>)
 800e148:	482b      	ldr	r0, [pc, #172]	; (800e1f8 <dhcp_select+0x168>)
 800e14a:	f006 fa53 	bl	80145f4 <iprintf>
 800e14e:	f06f 040f 	mvn.w	r4, #15
 800e152:	e043      	b.n	800e1dc <dhcp_select+0x14c>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800e154:	4b26      	ldr	r3, [pc, #152]	; (800e1f0 <dhcp_select+0x160>)
 800e156:	f240 1279 	movw	r2, #377	; 0x179
 800e15a:	4928      	ldr	r1, [pc, #160]	; (800e1fc <dhcp_select+0x16c>)
 800e15c:	4826      	ldr	r0, [pc, #152]	; (800e1f8 <dhcp_select+0x168>)
 800e15e:	f006 fa49 	bl	80145f4 <iprintf>
 800e162:	f06f 0405 	mvn.w	r4, #5
 800e166:	e039      	b.n	800e1dc <dhcp_select+0x14c>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e168:	4b25      	ldr	r3, [pc, #148]	; (800e200 <dhcp_select+0x170>)
 800e16a:	5d1a      	ldrb	r2, [r3, r4]
 800e16c:	4631      	mov	r1, r6
 800e16e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e172:	f7ff fd79 	bl	800dc68 <dhcp_option_byte>
 800e176:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e17a:	3401      	adds	r4, #1
 800e17c:	b2e4      	uxtb	r4, r4
 800e17e:	2c03      	cmp	r4, #3
 800e180:	d9f2      	bls.n	800e168 <dhcp_select+0xd8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e182:	4642      	mov	r2, r8
 800e184:	4631      	mov	r1, r6
 800e186:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e18a:	f7ff fe4b 	bl	800de24 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e18e:	4b1d      	ldr	r3, [pc, #116]	; (800e204 <dhcp_select+0x174>)
 800e190:	6818      	ldr	r0, [r3, #0]
 800e192:	4b1d      	ldr	r3, [pc, #116]	; (800e208 <dhcp_select+0x178>)
 800e194:	9301      	str	r3, [sp, #4]
 800e196:	9700      	str	r7, [sp, #0]
 800e198:	2343      	movs	r3, #67	; 0x43
 800e19a:	4a1c      	ldr	r2, [pc, #112]	; (800e20c <dhcp_select+0x17c>)
 800e19c:	4641      	mov	r1, r8
 800e19e:	f7ff f99b 	bl	800d4d8 <udp_sendto_if_src>
 800e1a2:	4604      	mov	r4, r0
    pbuf_free(p_out);
 800e1a4:	4640      	mov	r0, r8
 800e1a6:	f7fa fabf 	bl	8008728 <pbuf_free>
  if (dhcp->tries < 255) {
 800e1aa:	79ab      	ldrb	r3, [r5, #6]
 800e1ac:	2bff      	cmp	r3, #255	; 0xff
 800e1ae:	d001      	beq.n	800e1b4 <dhcp_select+0x124>
    dhcp->tries++;
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	71ab      	strb	r3, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800e1b4:	79aa      	ldrb	r2, [r5, #6]
 800e1b6:	2a05      	cmp	r2, #5
 800e1b8:	d817      	bhi.n	800e1ea <dhcp_select+0x15a>
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	4093      	lsls	r3, r2
 800e1be:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800e1c2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e1c6:	00d3      	lsls	r3, r2, #3
 800e1c8:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e1ca:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e1ce:	4a10      	ldr	r2, [pc, #64]	; (800e210 <dhcp_select+0x180>)
 800e1d0:	fb82 1203 	smull	r1, r2, r2, r3
 800e1d4:	17db      	asrs	r3, r3, #31
 800e1d6:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800e1da:	812b      	strh	r3, [r5, #8]
}
 800e1dc:	4620      	mov	r0, r4
 800e1de:	b004      	add	sp, #16
 800e1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 800e1e4:	f04f 34ff 	mov.w	r4, #4294967295
 800e1e8:	e7df      	b.n	800e1aa <dhcp_select+0x11a>
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800e1ea:	f64e 2360 	movw	r3, #60000	; 0xea60
 800e1ee:	e7ec      	b.n	800e1ca <dhcp_select+0x13a>
 800e1f0:	08017c80 	.word	0x08017c80
 800e1f4:	08017db8 	.word	0x08017db8
 800e1f8:	08015608 	.word	0x08015608
 800e1fc:	08017dd4 	.word	0x08017dd4
 800e200:	08017b9c 	.word	0x08017b9c
 800e204:	2000177c 	.word	0x2000177c
 800e208:	08018250 	.word	0x08018250
 800e20c:	08018264 	.word	0x08018264
 800e210:	10624dd3 	.word	0x10624dd3

0800e214 <dhcp_handle_offer>:
{
 800e214:	b570      	push	{r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e216:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800e21a:	4b0d      	ldr	r3, [pc, #52]	; (800e250 <dhcp_handle_offer+0x3c>)
 800e21c:	789b      	ldrb	r3, [r3, #2]
 800e21e:	b1b3      	cbz	r3, 800e24e <dhcp_handle_offer+0x3a>
 800e220:	460e      	mov	r6, r1
 800e222:	4605      	mov	r5, r0
    dhcp->request_timeout = 0; /* stop timer */
 800e224:	2300      	movs	r3, #0
 800e226:	8123      	strh	r3, [r4, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800e228:	f114 0f18 	cmn.w	r4, #24
 800e22c:	d00a      	beq.n	800e244 <dhcp_handle_offer+0x30>
 800e22e:	4b09      	ldr	r3, [pc, #36]	; (800e254 <dhcp_handle_offer+0x40>)
 800e230:	6898      	ldr	r0, [r3, #8]
 800e232:	f7f8 ffe0 	bl	80071f6 <lwip_htonl>
 800e236:	61a0      	str	r0, [r4, #24]
 800e238:	2300      	movs	r3, #0
 800e23a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800e23e:	6263      	str	r3, [r4, #36]	; 0x24
 800e240:	6223      	str	r3, [r4, #32]
 800e242:	61e3      	str	r3, [r4, #28]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800e244:	6933      	ldr	r3, [r6, #16]
 800e246:	62e3      	str	r3, [r4, #44]	; 0x2c
    dhcp_select(netif);
 800e248:	4628      	mov	r0, r5
 800e24a:	f7ff ff21 	bl	800e090 <dhcp_select>
}
 800e24e:	bd70      	pop	{r4, r5, r6, pc}
 800e250:	20008c60 	.word	0x20008c60
 800e254:	20008c6c 	.word	0x20008c6c

0800e258 <dhcp_discover>:
{
 800e258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e25c:	b084      	sub	sp, #16
 800e25e:	4607      	mov	r7, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e260:	f8d0 50ac 	ldr.w	r5, [r0, #172]	; 0xac
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800e264:	2300      	movs	r3, #0
 800e266:	62eb      	str	r3, [r5, #44]	; 0x2c
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800e268:	2106      	movs	r1, #6
 800e26a:	4628      	mov	r0, r5
 800e26c:	f7ff fcb8 	bl	800dbe0 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800e270:	f10d 030e 	add.w	r3, sp, #14
 800e274:	2201      	movs	r2, #1
 800e276:	4629      	mov	r1, r5
 800e278:	4638      	mov	r0, r7
 800e27a:	f7ff fd35 	bl	800dce8 <dhcp_create_msg>
  if (p_out != NULL) {
 800e27e:	2800      	cmp	r0, #0
 800e280:	d03b      	beq.n	800e2fa <dhcp_discover+0xa2>
 800e282:	4680      	mov	r8, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e284:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e286:	36f0      	adds	r6, #240	; 0xf0
 800e288:	2302      	movs	r3, #2
 800e28a:	2239      	movs	r2, #57	; 0x39
 800e28c:	4631      	mov	r1, r6
 800e28e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e292:	f7ff fccb 	bl	800dc2c <dhcp_option>
 800e296:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e29a:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	; 0xb8
 800e29e:	4631      	mov	r1, r6
 800e2a0:	f7ff fca6 	bl	800dbf0 <dhcp_option_short>
 800e2a4:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e2a8:	2304      	movs	r3, #4
 800e2aa:	2237      	movs	r2, #55	; 0x37
 800e2ac:	4631      	mov	r1, r6
 800e2ae:	f7ff fcbd 	bl	800dc2c <dhcp_option>
 800e2b2:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e2b6:	2400      	movs	r4, #0
 800e2b8:	e00a      	b.n	800e2d0 <dhcp_discover+0x78>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e2ba:	4b20      	ldr	r3, [pc, #128]	; (800e33c <dhcp_discover+0xe4>)
 800e2bc:	5d1a      	ldrb	r2, [r3, r4]
 800e2be:	4631      	mov	r1, r6
 800e2c0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e2c4:	f7ff fcd0 	bl	800dc68 <dhcp_option_byte>
 800e2c8:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e2cc:	3401      	adds	r4, #1
 800e2ce:	b2e4      	uxtb	r4, r4
 800e2d0:	2c03      	cmp	r4, #3
 800e2d2:	d9f2      	bls.n	800e2ba <dhcp_discover+0x62>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e2d4:	4642      	mov	r2, r8
 800e2d6:	4631      	mov	r1, r6
 800e2d8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e2dc:	f7ff fda2 	bl	800de24 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e2e0:	4b17      	ldr	r3, [pc, #92]	; (800e340 <dhcp_discover+0xe8>)
 800e2e2:	6818      	ldr	r0, [r3, #0]
 800e2e4:	4b17      	ldr	r3, [pc, #92]	; (800e344 <dhcp_discover+0xec>)
 800e2e6:	9301      	str	r3, [sp, #4]
 800e2e8:	9700      	str	r7, [sp, #0]
 800e2ea:	2343      	movs	r3, #67	; 0x43
 800e2ec:	4a16      	ldr	r2, [pc, #88]	; (800e348 <dhcp_discover+0xf0>)
 800e2ee:	4641      	mov	r1, r8
 800e2f0:	f7ff f8f2 	bl	800d4d8 <udp_sendto_if_src>
    pbuf_free(p_out);
 800e2f4:	4640      	mov	r0, r8
 800e2f6:	f7fa fa17 	bl	8008728 <pbuf_free>
  if (dhcp->tries < 255) {
 800e2fa:	79ab      	ldrb	r3, [r5, #6]
 800e2fc:	2bff      	cmp	r3, #255	; 0xff
 800e2fe:	d001      	beq.n	800e304 <dhcp_discover+0xac>
    dhcp->tries++;
 800e300:	3301      	adds	r3, #1
 800e302:	71ab      	strb	r3, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800e304:	79aa      	ldrb	r2, [r5, #6]
 800e306:	2a05      	cmp	r2, #5
 800e308:	d814      	bhi.n	800e334 <dhcp_discover+0xdc>
 800e30a:	2301      	movs	r3, #1
 800e30c:	4093      	lsls	r3, r2
 800e30e:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800e312:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e316:	00d3      	lsls	r3, r2, #3
 800e318:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e31a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e31e:	4a0b      	ldr	r2, [pc, #44]	; (800e34c <dhcp_discover+0xf4>)
 800e320:	fb82 1203 	smull	r1, r2, r2, r3
 800e324:	17db      	asrs	r3, r3, #31
 800e326:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800e32a:	812b      	strh	r3, [r5, #8]
}
 800e32c:	2000      	movs	r0, #0
 800e32e:	b004      	add	sp, #16
 800e330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800e334:	f64e 2360 	movw	r3, #60000	; 0xea60
 800e338:	e7ef      	b.n	800e31a <dhcp_discover+0xc2>
 800e33a:	bf00      	nop
 800e33c:	08017b9c 	.word	0x08017b9c
 800e340:	2000177c 	.word	0x2000177c
 800e344:	08018250 	.word	0x08018250
 800e348:	08018264 	.word	0x08018264
 800e34c:	10624dd3 	.word	0x10624dd3

0800e350 <dhcp_decline>:
{
 800e350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e354:	b084      	sub	sp, #16
 800e356:	4607      	mov	r7, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e358:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800e35c:	210c      	movs	r1, #12
 800e35e:	4620      	mov	r0, r4
 800e360:	f7ff fc3e 	bl	800dbe0 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800e364:	f10d 030e 	add.w	r3, sp, #14
 800e368:	2204      	movs	r2, #4
 800e36a:	4621      	mov	r1, r4
 800e36c:	4638      	mov	r0, r7
 800e36e:	f7ff fcbb 	bl	800dce8 <dhcp_create_msg>
  if (p_out != NULL) {
 800e372:	b398      	cbz	r0, 800e3dc <dhcp_decline+0x8c>
 800e374:	4606      	mov	r6, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e376:	6845      	ldr	r5, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800e378:	35f0      	adds	r5, #240	; 0xf0
 800e37a:	2304      	movs	r3, #4
 800e37c:	2232      	movs	r2, #50	; 0x32
 800e37e:	4629      	mov	r1, r5
 800e380:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e384:	f7ff fc52 	bl	800dc2c <dhcp_option>
 800e388:	4680      	mov	r8, r0
 800e38a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e38e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e390:	f7f8 ff31 	bl	80071f6 <lwip_htonl>
 800e394:	4602      	mov	r2, r0
 800e396:	4629      	mov	r1, r5
 800e398:	4640      	mov	r0, r8
 800e39a:	f7ff fc7d 	bl	800dc98 <dhcp_option_long>
 800e39e:	f8ad 000e 	strh.w	r0, [sp, #14]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e3a2:	4632      	mov	r2, r6
 800e3a4:	4629      	mov	r1, r5
 800e3a6:	f7ff fd3d 	bl	800de24 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e3aa:	4b0e      	ldr	r3, [pc, #56]	; (800e3e4 <dhcp_decline+0x94>)
 800e3ac:	6818      	ldr	r0, [r3, #0]
 800e3ae:	4b0e      	ldr	r3, [pc, #56]	; (800e3e8 <dhcp_decline+0x98>)
 800e3b0:	9301      	str	r3, [sp, #4]
 800e3b2:	9700      	str	r7, [sp, #0]
 800e3b4:	2343      	movs	r3, #67	; 0x43
 800e3b6:	4a0d      	ldr	r2, [pc, #52]	; (800e3ec <dhcp_decline+0x9c>)
 800e3b8:	4631      	mov	r1, r6
 800e3ba:	f7ff f88d 	bl	800d4d8 <udp_sendto_if_src>
 800e3be:	4605      	mov	r5, r0
    pbuf_free(p_out);
 800e3c0:	4630      	mov	r0, r6
 800e3c2:	f7fa f9b1 	bl	8008728 <pbuf_free>
  if (dhcp->tries < 255) {
 800e3c6:	79a3      	ldrb	r3, [r4, #6]
 800e3c8:	2bff      	cmp	r3, #255	; 0xff
 800e3ca:	d001      	beq.n	800e3d0 <dhcp_decline+0x80>
    dhcp->tries++;
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e3d0:	2314      	movs	r3, #20
 800e3d2:	8123      	strh	r3, [r4, #8]
}
 800e3d4:	4628      	mov	r0, r5
 800e3d6:	b004      	add	sp, #16
 800e3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 800e3dc:	f04f 35ff 	mov.w	r5, #4294967295
 800e3e0:	e7f1      	b.n	800e3c6 <dhcp_decline+0x76>
 800e3e2:	bf00      	nop
 800e3e4:	2000177c 	.word	0x2000177c
 800e3e8:	08018250 	.word	0x08018250
 800e3ec:	08018264 	.word	0x08018264

0800e3f0 <dhcp_check>:
{
 800e3f0:	b538      	push	{r3, r4, r5, lr}
 800e3f2:	4605      	mov	r5, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e3f4:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800e3f8:	2108      	movs	r1, #8
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f7ff fbf0 	bl	800dbe0 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800e400:	2200      	movs	r2, #0
 800e402:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 800e406:	4628      	mov	r0, r5
 800e408:	f001 f9a4 	bl	800f754 <etharp_query>
  if (dhcp->tries < 255) {
 800e40c:	79a3      	ldrb	r3, [r4, #6]
 800e40e:	2bff      	cmp	r3, #255	; 0xff
 800e410:	d001      	beq.n	800e416 <dhcp_check+0x26>
    dhcp->tries++;
 800e412:	3301      	adds	r3, #1
 800e414:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e416:	2301      	movs	r3, #1
 800e418:	8123      	strh	r3, [r4, #8]
}
 800e41a:	bd38      	pop	{r3, r4, r5, pc}

0800e41c <dhcp_bind>:
{
 800e41c:	b530      	push	{r4, r5, lr}
 800e41e:	b083      	sub	sp, #12
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800e420:	2800      	cmp	r0, #0
 800e422:	d064      	beq.n	800e4ee <dhcp_bind+0xd2>
 800e424:	4605      	mov	r5, r0
  dhcp = netif_dhcp_data(netif);
 800e426:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800e42a:	2c00      	cmp	r4, #0
 800e42c:	d067      	beq.n	800e4fe <dhcp_bind+0xe2>
  dhcp->lease_used = 0;
 800e42e:	2300      	movs	r3, #0
 800e430:	8263      	strh	r3, [r4, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800e432:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e438:	d00e      	beq.n	800e458 <dhcp_bind+0x3c>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800e43a:	331e      	adds	r3, #30
 800e43c:	4a3d      	ldr	r2, [pc, #244]	; (800e534 <dhcp_bind+0x118>)
 800e43e:	fba2 2303 	umull	r2, r3, r2, r3
 800e442:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 800e444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e448:	d301      	bcc.n	800e44e <dhcp_bind+0x32>
      timeout = 0xffff;
 800e44a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t0_timeout = (u16_t)timeout;
 800e44e:	b29b      	uxth	r3, r3
 800e450:	82a3      	strh	r3, [r4, #20]
    if (dhcp->t0_timeout == 0) {
 800e452:	b90b      	cbnz	r3, 800e458 <dhcp_bind+0x3c>
      dhcp->t0_timeout = 1;
 800e454:	2301      	movs	r3, #1
 800e456:	82a3      	strh	r3, [r4, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800e458:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e45e:	d010      	beq.n	800e482 <dhcp_bind+0x66>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800e460:	331e      	adds	r3, #30
 800e462:	4a34      	ldr	r2, [pc, #208]	; (800e534 <dhcp_bind+0x118>)
 800e464:	fba2 2303 	umull	r2, r3, r2, r3
 800e468:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 800e46a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e46e:	d301      	bcc.n	800e474 <dhcp_bind+0x58>
      timeout = 0xffff;
 800e470:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t1_timeout = (u16_t)timeout;
 800e474:	b29b      	uxth	r3, r3
 800e476:	8163      	strh	r3, [r4, #10]
    if (dhcp->t1_timeout == 0) {
 800e478:	b90b      	cbnz	r3, 800e47e <dhcp_bind+0x62>
      dhcp->t1_timeout = 1;
 800e47a:	2301      	movs	r3, #1
 800e47c:	8163      	strh	r3, [r4, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800e47e:	8963      	ldrh	r3, [r4, #10]
 800e480:	81e3      	strh	r3, [r4, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800e482:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e488:	d010      	beq.n	800e4ac <dhcp_bind+0x90>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800e48a:	331e      	adds	r3, #30
 800e48c:	4a29      	ldr	r2, [pc, #164]	; (800e534 <dhcp_bind+0x118>)
 800e48e:	fba2 2303 	umull	r2, r3, r2, r3
 800e492:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 800e494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e498:	d301      	bcc.n	800e49e <dhcp_bind+0x82>
      timeout = 0xffff;
 800e49a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t2_timeout = (u16_t)timeout;
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	81a3      	strh	r3, [r4, #12]
    if (dhcp->t2_timeout == 0) {
 800e4a2:	b90b      	cbnz	r3, 800e4a8 <dhcp_bind+0x8c>
      dhcp->t2_timeout = 1;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	81a3      	strh	r3, [r4, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800e4a8:	89a3      	ldrh	r3, [r4, #12]
 800e4aa:	8223      	strh	r3, [r4, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800e4ac:	8962      	ldrh	r2, [r4, #10]
 800e4ae:	89a3      	ldrh	r3, [r4, #12]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d302      	bcc.n	800e4ba <dhcp_bind+0x9e>
 800e4b4:	b10b      	cbz	r3, 800e4ba <dhcp_bind+0x9e>
    dhcp->t1_timeout = 0;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	8163      	strh	r3, [r4, #10]
  if (dhcp->subnet_mask_given) {
 800e4ba:	79e3      	ldrb	r3, [r4, #7]
 800e4bc:	b33b      	cbz	r3, 800e50e <dhcp_bind+0xf2>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800e4be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e4c0:	9301      	str	r3, [sp, #4]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800e4c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4c4:	9300      	str	r3, [sp, #0]
  if (ip4_addr_isany_val(gw_addr)) {
 800e4c6:	b92b      	cbnz	r3, 800e4d4 <dhcp_bind+0xb8>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800e4c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e4ca:	9a01      	ldr	r2, [sp, #4]
 800e4cc:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800e4ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e4d2:	9300      	str	r3, [sp, #0]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800e4d4:	210a      	movs	r1, #10
 800e4d6:	4620      	mov	r0, r4
 800e4d8:	f7ff fb82 	bl	800dbe0 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800e4dc:	466b      	mov	r3, sp
 800e4de:	aa01      	add	r2, sp, #4
 800e4e0:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 800e4e4:	4628      	mov	r0, r5
 800e4e6:	f7f9 fda7 	bl	8008038 <netif_set_addr>
}
 800e4ea:	b003      	add	sp, #12
 800e4ec:	bd30      	pop	{r4, r5, pc}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800e4ee:	4b12      	ldr	r3, [pc, #72]	; (800e538 <dhcp_bind+0x11c>)
 800e4f0:	f240 4215 	movw	r2, #1045	; 0x415
 800e4f4:	4911      	ldr	r1, [pc, #68]	; (800e53c <dhcp_bind+0x120>)
 800e4f6:	4812      	ldr	r0, [pc, #72]	; (800e540 <dhcp_bind+0x124>)
 800e4f8:	f006 f87c 	bl	80145f4 <iprintf>
 800e4fc:	e7f5      	b.n	800e4ea <dhcp_bind+0xce>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800e4fe:	4b0e      	ldr	r3, [pc, #56]	; (800e538 <dhcp_bind+0x11c>)
 800e500:	f240 4217 	movw	r2, #1047	; 0x417
 800e504:	490f      	ldr	r1, [pc, #60]	; (800e544 <dhcp_bind+0x128>)
 800e506:	480e      	ldr	r0, [pc, #56]	; (800e540 <dhcp_bind+0x124>)
 800e508:	f006 f874 	bl	80145f4 <iprintf>
 800e50c:	e7ed      	b.n	800e4ea <dhcp_bind+0xce>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800e50e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    if (first_octet <= 127) {
 800e512:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e516:	d102      	bne.n	800e51e <dhcp_bind+0x102>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800e518:	23ff      	movs	r3, #255	; 0xff
 800e51a:	9301      	str	r3, [sp, #4]
 800e51c:	e7d1      	b.n	800e4c2 <dhcp_bind+0xa6>
    } else if (first_octet >= 192) {
 800e51e:	2bbf      	cmp	r3, #191	; 0xbf
 800e520:	d903      	bls.n	800e52a <dhcp_bind+0x10e>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800e522:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800e526:	9301      	str	r3, [sp, #4]
 800e528:	e7cb      	b.n	800e4c2 <dhcp_bind+0xa6>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800e52a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e52e:	9301      	str	r3, [sp, #4]
 800e530:	e7c7      	b.n	800e4c2 <dhcp_bind+0xa6>
 800e532:	bf00      	nop
 800e534:	88888889 	.word	0x88888889
 800e538:	08017c80 	.word	0x08017c80
 800e53c:	08017ac4 	.word	0x08017ac4
 800e540:	08015608 	.word	0x08015608
 800e544:	08017ae0 	.word	0x08017ae0

0800e548 <dhcp_handle_nak>:
{
 800e548:	b510      	push	{r4, lr}
 800e54a:	4604      	mov	r4, r0
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800e54c:	210c      	movs	r1, #12
 800e54e:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 800e552:	f7ff fb45 	bl	800dbe0 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e556:	4905      	ldr	r1, [pc, #20]	; (800e56c <dhcp_handle_nak+0x24>)
 800e558:	460b      	mov	r3, r1
 800e55a:	460a      	mov	r2, r1
 800e55c:	4620      	mov	r0, r4
 800e55e:	f7f9 fd6b 	bl	8008038 <netif_set_addr>
  dhcp_discover(netif);
 800e562:	4620      	mov	r0, r4
 800e564:	f7ff fe78 	bl	800e258 <dhcp_discover>
}
 800e568:	bd10      	pop	{r4, pc}
 800e56a:	bf00      	nop
 800e56c:	08018250 	.word	0x08018250

0800e570 <dhcp_dec_pcb_refcount>:
{
 800e570:	b510      	push	{r4, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800e572:	4b0c      	ldr	r3, [pc, #48]	; (800e5a4 <dhcp_dec_pcb_refcount+0x34>)
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	b133      	cbz	r3, 800e586 <dhcp_dec_pcb_refcount+0x16>
  dhcp_pcb_refcount--;
 800e578:	4a0a      	ldr	r2, [pc, #40]	; (800e5a4 <dhcp_dec_pcb_refcount+0x34>)
 800e57a:	7813      	ldrb	r3, [r2, #0]
 800e57c:	3b01      	subs	r3, #1
 800e57e:	b2db      	uxtb	r3, r3
 800e580:	7013      	strb	r3, [r2, #0]
  if (dhcp_pcb_refcount == 0) {
 800e582:	b13b      	cbz	r3, 800e594 <dhcp_dec_pcb_refcount+0x24>
}
 800e584:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800e586:	4b08      	ldr	r3, [pc, #32]	; (800e5a8 <dhcp_dec_pcb_refcount+0x38>)
 800e588:	22ff      	movs	r2, #255	; 0xff
 800e58a:	4908      	ldr	r1, [pc, #32]	; (800e5ac <dhcp_dec_pcb_refcount+0x3c>)
 800e58c:	4808      	ldr	r0, [pc, #32]	; (800e5b0 <dhcp_dec_pcb_refcount+0x40>)
 800e58e:	f006 f831 	bl	80145f4 <iprintf>
 800e592:	e7f1      	b.n	800e578 <dhcp_dec_pcb_refcount+0x8>
    udp_remove(dhcp_pcb);
 800e594:	4c07      	ldr	r4, [pc, #28]	; (800e5b4 <dhcp_dec_pcb_refcount+0x44>)
 800e596:	6820      	ldr	r0, [r4, #0]
 800e598:	f7ff fa50 	bl	800da3c <udp_remove>
    dhcp_pcb = NULL;
 800e59c:	2300      	movs	r3, #0
 800e59e:	6023      	str	r3, [r4, #0]
}
 800e5a0:	e7f0      	b.n	800e584 <dhcp_dec_pcb_refcount+0x14>
 800e5a2:	bf00      	nop
 800e5a4:	20001780 	.word	0x20001780
 800e5a8:	08017c80 	.word	0x08017c80
 800e5ac:	08017b78 	.word	0x08017b78
 800e5b0:	08015608 	.word	0x08015608
 800e5b4:	2000177c 	.word	0x2000177c

0800e5b8 <dhcp_inc_pcb_refcount>:
{
 800e5b8:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 800e5ba:	4b18      	ldr	r3, [pc, #96]	; (800e61c <dhcp_inc_pcb_refcount+0x64>)
 800e5bc:	781b      	ldrb	r3, [r3, #0]
 800e5be:	bb1b      	cbnz	r3, 800e608 <dhcp_inc_pcb_refcount+0x50>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800e5c0:	4b17      	ldr	r3, [pc, #92]	; (800e620 <dhcp_inc_pcb_refcount+0x68>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	b12b      	cbz	r3, 800e5d2 <dhcp_inc_pcb_refcount+0x1a>
 800e5c6:	4b17      	ldr	r3, [pc, #92]	; (800e624 <dhcp_inc_pcb_refcount+0x6c>)
 800e5c8:	22e5      	movs	r2, #229	; 0xe5
 800e5ca:	4917      	ldr	r1, [pc, #92]	; (800e628 <dhcp_inc_pcb_refcount+0x70>)
 800e5cc:	4817      	ldr	r0, [pc, #92]	; (800e62c <dhcp_inc_pcb_refcount+0x74>)
 800e5ce:	f006 f811 	bl	80145f4 <iprintf>
    dhcp_pcb = udp_new();
 800e5d2:	f7ff fa5d 	bl	800da90 <udp_new>
 800e5d6:	4b12      	ldr	r3, [pc, #72]	; (800e620 <dhcp_inc_pcb_refcount+0x68>)
 800e5d8:	6018      	str	r0, [r3, #0]
    if (dhcp_pcb == NULL) {
 800e5da:	b1d8      	cbz	r0, 800e614 <dhcp_inc_pcb_refcount+0x5c>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800e5dc:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800e5e0:	f043 0320 	orr.w	r3, r3, #32
 800e5e4:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800e5e8:	4d11      	ldr	r5, [pc, #68]	; (800e630 <dhcp_inc_pcb_refcount+0x78>)
 800e5ea:	2244      	movs	r2, #68	; 0x44
 800e5ec:	4629      	mov	r1, r5
 800e5ee:	f7fe fe7b 	bl	800d2e8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800e5f2:	4c0b      	ldr	r4, [pc, #44]	; (800e620 <dhcp_inc_pcb_refcount+0x68>)
 800e5f4:	2243      	movs	r2, #67	; 0x43
 800e5f6:	4629      	mov	r1, r5
 800e5f8:	6820      	ldr	r0, [r4, #0]
 800e5fa:	f7ff f99b 	bl	800d934 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800e5fe:	2200      	movs	r2, #0
 800e600:	490c      	ldr	r1, [pc, #48]	; (800e634 <dhcp_inc_pcb_refcount+0x7c>)
 800e602:	6820      	ldr	r0, [r4, #0]
 800e604:	f7ff fa06 	bl	800da14 <udp_recv>
  dhcp_pcb_refcount++;
 800e608:	4a04      	ldr	r2, [pc, #16]	; (800e61c <dhcp_inc_pcb_refcount+0x64>)
 800e60a:	7813      	ldrb	r3, [r2, #0]
 800e60c:	3301      	adds	r3, #1
 800e60e:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 800e610:	2000      	movs	r0, #0
}
 800e612:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 800e614:	f04f 30ff 	mov.w	r0, #4294967295
 800e618:	e7fb      	b.n	800e612 <dhcp_inc_pcb_refcount+0x5a>
 800e61a:	bf00      	nop
 800e61c:	20001780 	.word	0x20001780
 800e620:	2000177c 	.word	0x2000177c
 800e624:	08017c80 	.word	0x08017c80
 800e628:	08017ba0 	.word	0x08017ba0
 800e62c:	08015608 	.word	0x08015608
 800e630:	08018250 	.word	0x08018250
 800e634:	0800ebc9 	.word	0x0800ebc9

0800e638 <dhcp_parse_reply>:
  dhcp_clear_all_options(dhcp);
 800e638:	4bc5      	ldr	r3, [pc, #788]	; (800e950 <dhcp_parse_reply+0x318>)
 800e63a:	2200      	movs	r2, #0
 800e63c:	601a      	str	r2, [r3, #0]
 800e63e:	605a      	str	r2, [r3, #4]
 800e640:	811a      	strh	r2, [r3, #8]
  if (p->len < DHCP_SNAME_OFS) {
 800e642:	8943      	ldrh	r3, [r0, #10]
 800e644:	2b2b      	cmp	r3, #43	; 0x2b
 800e646:	f240 8242 	bls.w	800eace <dhcp_parse_reply+0x496>
{
 800e64a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e64e:	b087      	sub	sp, #28
 800e650:	9002      	str	r0, [sp, #8]
  options_idx_max = p->tot_len;
 800e652:	8905      	ldrh	r5, [r0, #8]
  int parse_sname_as_options = 0;
 800e654:	9203      	str	r2, [sp, #12]
  options_idx = DHCP_OPTIONS_OFS;
 800e656:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
  q = p;
 800e65a:	9e02      	ldr	r6, [sp, #8]
  while ((q != NULL) && (options_idx >= q->len)) {
 800e65c:	e010      	b.n	800e680 <dhcp_parse_reply+0x48>
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800e65e:	25ec      	movs	r5, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 800e660:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
 800e664:	e7f9      	b.n	800e65a <dhcp_parse_reply+0x22>
      parse_sname_as_options = 1;
 800e666:	2301      	movs	r3, #1
 800e668:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800e66a:	25ec      	movs	r5, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 800e66c:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
 800e670:	e7f3      	b.n	800e65a <dhcp_parse_reply+0x22>
    options_idx = (u16_t)(options_idx - q->len);
 800e672:	ebab 0b03 	sub.w	fp, fp, r3
 800e676:	fa1f fb8b 	uxth.w	fp, fp
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800e67a:	1aed      	subs	r5, r5, r3
 800e67c:	b2ad      	uxth	r5, r5
    q = q->next;
 800e67e:	6836      	ldr	r6, [r6, #0]
  while ((q != NULL) && (options_idx >= q->len)) {
 800e680:	b116      	cbz	r6, 800e688 <dhcp_parse_reply+0x50>
 800e682:	8973      	ldrh	r3, [r6, #10]
 800e684:	455b      	cmp	r3, fp
 800e686:	d9f4      	bls.n	800e672 <dhcp_parse_reply+0x3a>
  if (q == NULL) {
 800e688:	2e00      	cmp	r6, #0
 800e68a:	f000 8223 	beq.w	800ead4 <dhcp_parse_reply+0x49c>
  options = (u8_t *)q->payload;
 800e68e:	6873      	ldr	r3, [r6, #4]
 800e690:	9301      	str	r3, [sp, #4]
  offset = options_idx;
 800e692:	465c      	mov	r4, fp
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800e694:	e01f      	b.n	800e6d6 <dhcp_parse_reply+0x9e>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800e696:	6833      	ldr	r3, [r6, #0]
 800e698:	b113      	cbz	r3, 800e6a0 <dhcp_parse_reply+0x68>
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	781b      	ldrb	r3, [r3, #0]
 800e69e:	e035      	b.n	800e70c <dhcp_parse_reply+0xd4>
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	e033      	b.n	800e70c <dhcp_parse_reply+0xd4>
    int decode_idx = -1;
 800e6a4:	f04f 39ff 	mov.w	r9, #4294967295
        decode_len = len = 0;
 800e6a8:	2700      	movs	r7, #0
 800e6aa:	463b      	mov	r3, r7
    if (op == DHCP_OPTION_PAD) {
 800e6ac:	2a00      	cmp	r2, #0
 800e6ae:	f040 816d 	bne.w	800e98c <dhcp_parse_reply+0x354>
      offset++;
 800e6b2:	3401      	adds	r4, #1
 800e6b4:	b2a4      	uxth	r4, r4
    if (offset >= q->len) {
 800e6b6:	8973      	ldrh	r3, [r6, #10]
 800e6b8:	429c      	cmp	r4, r3
 800e6ba:	d30c      	bcc.n	800e6d6 <dhcp_parse_reply+0x9e>
      offset = (u16_t)(offset - q->len);
 800e6bc:	1ae4      	subs	r4, r4, r3
 800e6be:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 800e6c0:	1aed      	subs	r5, r5, r3
 800e6c2:	b2ad      	uxth	r5, r5
      if (offset < offset_max) {
 800e6c4:	42ac      	cmp	r4, r5
 800e6c6:	f080 820e 	bcs.w	800eae6 <dhcp_parse_reply+0x4ae>
        q = q->next;
 800e6ca:	6836      	ldr	r6, [r6, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800e6cc:	2e00      	cmp	r6, #0
 800e6ce:	f000 81d7 	beq.w	800ea80 <dhcp_parse_reply+0x448>
        options = (u8_t *)q->payload;
 800e6d2:	6873      	ldr	r3, [r6, #4]
 800e6d4:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800e6d6:	2e00      	cmp	r6, #0
 800e6d8:	f000 81dc 	beq.w	800ea94 <dhcp_parse_reply+0x45c>
 800e6dc:	42ac      	cmp	r4, r5
 800e6de:	f080 81d9 	bcs.w	800ea94 <dhcp_parse_reply+0x45c>
 800e6e2:	4620      	mov	r0, r4
 800e6e4:	9b01      	ldr	r3, [sp, #4]
 800e6e6:	5d1a      	ldrb	r2, [r3, r4]
 800e6e8:	2aff      	cmp	r2, #255	; 0xff
 800e6ea:	f000 81d3 	beq.w	800ea94 <dhcp_parse_reply+0x45c>
    u16_t val_offset = (u16_t)(offset + 2);
 800e6ee:	f104 0802 	add.w	r8, r4, #2
 800e6f2:	fa1f f888 	uxth.w	r8, r8
    if (val_offset < offset) {
 800e6f6:	4544      	cmp	r4, r8
 800e6f8:	f200 81ef 	bhi.w	800eada <dhcp_parse_reply+0x4a2>
    if ((offset + 1) < q->len) {
 800e6fc:	4621      	mov	r1, r4
 800e6fe:	1c63      	adds	r3, r4, #1
 800e700:	8977      	ldrh	r7, [r6, #10]
 800e702:	42bb      	cmp	r3, r7
 800e704:	dac7      	bge.n	800e696 <dhcp_parse_reply+0x5e>
      len = options[offset + 1];
 800e706:	3001      	adds	r0, #1
 800e708:	9b01      	ldr	r3, [sp, #4]
 800e70a:	5c1b      	ldrb	r3, [r3, r0]
    switch (op) {
 800e70c:	2a3b      	cmp	r2, #59	; 0x3b
 800e70e:	f200 8139 	bhi.w	800e984 <dhcp_parse_reply+0x34c>
 800e712:	a001      	add	r0, pc, #4	; (adr r0, 800e718 <dhcp_parse_reply+0xe0>)
 800e714:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800e718:	0800e6a5 	.word	0x0800e6a5
 800e71c:	0800e809 	.word	0x0800e809
 800e720:	0800e985 	.word	0x0800e985
 800e724:	0800e829 	.word	0x0800e829
 800e728:	0800e985 	.word	0x0800e985
 800e72c:	0800e985 	.word	0x0800e985
 800e730:	0800e849 	.word	0x0800e849
 800e734:	0800e985 	.word	0x0800e985
 800e738:	0800e985 	.word	0x0800e985
 800e73c:	0800e985 	.word	0x0800e985
 800e740:	0800e985 	.word	0x0800e985
 800e744:	0800e985 	.word	0x0800e985
 800e748:	0800e985 	.word	0x0800e985
 800e74c:	0800e985 	.word	0x0800e985
 800e750:	0800e985 	.word	0x0800e985
 800e754:	0800e985 	.word	0x0800e985
 800e758:	0800e985 	.word	0x0800e985
 800e75c:	0800e985 	.word	0x0800e985
 800e760:	0800e985 	.word	0x0800e985
 800e764:	0800e985 	.word	0x0800e985
 800e768:	0800e985 	.word	0x0800e985
 800e76c:	0800e985 	.word	0x0800e985
 800e770:	0800e985 	.word	0x0800e985
 800e774:	0800e985 	.word	0x0800e985
 800e778:	0800e985 	.word	0x0800e985
 800e77c:	0800e985 	.word	0x0800e985
 800e780:	0800e985 	.word	0x0800e985
 800e784:	0800e985 	.word	0x0800e985
 800e788:	0800e985 	.word	0x0800e985
 800e78c:	0800e985 	.word	0x0800e985
 800e790:	0800e985 	.word	0x0800e985
 800e794:	0800e985 	.word	0x0800e985
 800e798:	0800e985 	.word	0x0800e985
 800e79c:	0800e985 	.word	0x0800e985
 800e7a0:	0800e985 	.word	0x0800e985
 800e7a4:	0800e985 	.word	0x0800e985
 800e7a8:	0800e985 	.word	0x0800e985
 800e7ac:	0800e985 	.word	0x0800e985
 800e7b0:	0800e985 	.word	0x0800e985
 800e7b4:	0800e985 	.word	0x0800e985
 800e7b8:	0800e985 	.word	0x0800e985
 800e7bc:	0800e985 	.word	0x0800e985
 800e7c0:	0800e985 	.word	0x0800e985
 800e7c4:	0800e985 	.word	0x0800e985
 800e7c8:	0800e985 	.word	0x0800e985
 800e7cc:	0800e985 	.word	0x0800e985
 800e7d0:	0800e985 	.word	0x0800e985
 800e7d4:	0800e985 	.word	0x0800e985
 800e7d8:	0800e985 	.word	0x0800e985
 800e7dc:	0800e985 	.word	0x0800e985
 800e7e0:	0800e985 	.word	0x0800e985
 800e7e4:	0800e889 	.word	0x0800e889
 800e7e8:	0800e8a9 	.word	0x0800e8a9
 800e7ec:	0800e8e3 	.word	0x0800e8e3
 800e7f0:	0800e903 	.word	0x0800e903
 800e7f4:	0800e985 	.word	0x0800e985
 800e7f8:	0800e985 	.word	0x0800e985
 800e7fc:	0800e985 	.word	0x0800e985
 800e800:	0800e923 	.word	0x0800e923
 800e804:	0800e943 	.word	0x0800e943
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e808:	2b04      	cmp	r3, #4
 800e80a:	d103      	bne.n	800e814 <dhcp_parse_reply+0x1dc>
    decode_len = len;
 800e80c:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800e80e:	f04f 0906 	mov.w	r9, #6
 800e812:	e74b      	b.n	800e6ac <dhcp_parse_reply+0x74>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e814:	4b4f      	ldr	r3, [pc, #316]	; (800e954 <dhcp_parse_reply+0x31c>)
 800e816:	f240 622e 	movw	r2, #1582	; 0x62e
 800e81a:	494f      	ldr	r1, [pc, #316]	; (800e958 <dhcp_parse_reply+0x320>)
 800e81c:	484f      	ldr	r0, [pc, #316]	; (800e95c <dhcp_parse_reply+0x324>)
 800e81e:	f005 fee9 	bl	80145f4 <iprintf>
 800e822:	f06f 0005 	mvn.w	r0, #5
 800e826:	e125      	b.n	800ea74 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800e828:	2b03      	cmp	r3, #3
 800e82a:	d903      	bls.n	800e834 <dhcp_parse_reply+0x1fc>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800e82c:	f04f 0907 	mov.w	r9, #7
        decode_len = 4; /* only copy the first given router */
 800e830:	2704      	movs	r7, #4
 800e832:	e73b      	b.n	800e6ac <dhcp_parse_reply+0x74>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800e834:	4b47      	ldr	r3, [pc, #284]	; (800e954 <dhcp_parse_reply+0x31c>)
 800e836:	f240 6233 	movw	r2, #1587	; 0x633
 800e83a:	4949      	ldr	r1, [pc, #292]	; (800e960 <dhcp_parse_reply+0x328>)
 800e83c:	4847      	ldr	r0, [pc, #284]	; (800e95c <dhcp_parse_reply+0x324>)
 800e83e:	f005 fed9 	bl	80145f4 <iprintf>
 800e842:	f06f 0005 	mvn.w	r0, #5
 800e846:	e115      	b.n	800ea74 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 800e848:	f013 0f03 	tst.w	r3, #3
 800e84c:	d108      	bne.n	800e860 <dhcp_parse_reply+0x228>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 800e84e:	461f      	mov	r7, r3
 800e850:	2b08      	cmp	r3, #8
 800e852:	bf28      	it	cs
 800e854:	2708      	movcs	r7, #8
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800e856:	42bb      	cmp	r3, r7
 800e858:	d30c      	bcc.n	800e874 <dhcp_parse_reply+0x23c>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 800e85a:	f04f 0908 	mov.w	r9, #8
 800e85e:	e725      	b.n	800e6ac <dhcp_parse_reply+0x74>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 800e860:	4b3c      	ldr	r3, [pc, #240]	; (800e954 <dhcp_parse_reply+0x31c>)
 800e862:	f240 6239 	movw	r2, #1593	; 0x639
 800e866:	493f      	ldr	r1, [pc, #252]	; (800e964 <dhcp_parse_reply+0x32c>)
 800e868:	483c      	ldr	r0, [pc, #240]	; (800e95c <dhcp_parse_reply+0x324>)
 800e86a:	f005 fec3 	bl	80145f4 <iprintf>
 800e86e:	f06f 0005 	mvn.w	r0, #5
 800e872:	e0ff      	b.n	800ea74 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800e874:	4b37      	ldr	r3, [pc, #220]	; (800e954 <dhcp_parse_reply+0x31c>)
 800e876:	f240 623c 	movw	r2, #1596	; 0x63c
 800e87a:	4939      	ldr	r1, [pc, #228]	; (800e960 <dhcp_parse_reply+0x328>)
 800e87c:	4837      	ldr	r0, [pc, #220]	; (800e95c <dhcp_parse_reply+0x324>)
 800e87e:	f005 feb9 	bl	80145f4 <iprintf>
 800e882:	f06f 0005 	mvn.w	r0, #5
 800e886:	e0f5      	b.n	800ea74 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e888:	2b04      	cmp	r3, #4
 800e88a:	d103      	bne.n	800e894 <dhcp_parse_reply+0x25c>
    decode_len = len;
 800e88c:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800e88e:	f04f 0903 	mov.w	r9, #3
 800e892:	e70b      	b.n	800e6ac <dhcp_parse_reply+0x74>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e894:	4b2f      	ldr	r3, [pc, #188]	; (800e954 <dhcp_parse_reply+0x31c>)
 800e896:	f240 6241 	movw	r2, #1601	; 0x641
 800e89a:	492f      	ldr	r1, [pc, #188]	; (800e958 <dhcp_parse_reply+0x320>)
 800e89c:	482f      	ldr	r0, [pc, #188]	; (800e95c <dhcp_parse_reply+0x324>)
 800e89e:	f005 fea9 	bl	80145f4 <iprintf>
 800e8a2:	f06f 0005 	mvn.w	r0, #5
 800e8a6:	e0e5      	b.n	800ea74 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800e8a8:	2b01      	cmp	r3, #1
 800e8aa:	d106      	bne.n	800e8ba <dhcp_parse_reply+0x282>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800e8ac:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
 800e8b0:	d10d      	bne.n	800e8ce <dhcp_parse_reply+0x296>
    decode_len = len;
 800e8b2:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800e8b4:	f04f 0900 	mov.w	r9, #0
 800e8b8:	e6f8      	b.n	800e6ac <dhcp_parse_reply+0x74>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800e8ba:	4b26      	ldr	r3, [pc, #152]	; (800e954 <dhcp_parse_reply+0x31c>)
 800e8bc:	f240 624f 	movw	r2, #1615	; 0x64f
 800e8c0:	4929      	ldr	r1, [pc, #164]	; (800e968 <dhcp_parse_reply+0x330>)
 800e8c2:	4826      	ldr	r0, [pc, #152]	; (800e95c <dhcp_parse_reply+0x324>)
 800e8c4:	f005 fe96 	bl	80145f4 <iprintf>
 800e8c8:	f06f 0005 	mvn.w	r0, #5
 800e8cc:	e0d2      	b.n	800ea74 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800e8ce:	4b21      	ldr	r3, [pc, #132]	; (800e954 <dhcp_parse_reply+0x31c>)
 800e8d0:	f240 6251 	movw	r2, #1617	; 0x651
 800e8d4:	4925      	ldr	r1, [pc, #148]	; (800e96c <dhcp_parse_reply+0x334>)
 800e8d6:	4821      	ldr	r0, [pc, #132]	; (800e95c <dhcp_parse_reply+0x324>)
 800e8d8:	f005 fe8c 	bl	80145f4 <iprintf>
 800e8dc:	f06f 0005 	mvn.w	r0, #5
 800e8e0:	e0c8      	b.n	800ea74 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	d103      	bne.n	800e8ee <dhcp_parse_reply+0x2b6>
    decode_len = len;
 800e8e6:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800e8e8:	f04f 0901 	mov.w	r9, #1
 800e8ec:	e6de      	b.n	800e6ac <dhcp_parse_reply+0x74>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800e8ee:	4b19      	ldr	r3, [pc, #100]	; (800e954 <dhcp_parse_reply+0x31c>)
 800e8f0:	f240 6255 	movw	r2, #1621	; 0x655
 800e8f4:	491c      	ldr	r1, [pc, #112]	; (800e968 <dhcp_parse_reply+0x330>)
 800e8f6:	4819      	ldr	r0, [pc, #100]	; (800e95c <dhcp_parse_reply+0x324>)
 800e8f8:	f005 fe7c 	bl	80145f4 <iprintf>
 800e8fc:	f06f 0005 	mvn.w	r0, #5
 800e900:	e0b8      	b.n	800ea74 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e902:	2b04      	cmp	r3, #4
 800e904:	d103      	bne.n	800e90e <dhcp_parse_reply+0x2d6>
    decode_len = len;
 800e906:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800e908:	f04f 0902 	mov.w	r9, #2
 800e90c:	e6ce      	b.n	800e6ac <dhcp_parse_reply+0x74>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e90e:	4b11      	ldr	r3, [pc, #68]	; (800e954 <dhcp_parse_reply+0x31c>)
 800e910:	f240 6259 	movw	r2, #1625	; 0x659
 800e914:	4910      	ldr	r1, [pc, #64]	; (800e958 <dhcp_parse_reply+0x320>)
 800e916:	4811      	ldr	r0, [pc, #68]	; (800e95c <dhcp_parse_reply+0x324>)
 800e918:	f005 fe6c 	bl	80145f4 <iprintf>
 800e91c:	f06f 0005 	mvn.w	r0, #5
 800e920:	e0a8      	b.n	800ea74 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e922:	2b04      	cmp	r3, #4
 800e924:	d103      	bne.n	800e92e <dhcp_parse_reply+0x2f6>
    decode_len = len;
 800e926:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 800e928:	f04f 0904 	mov.w	r9, #4
 800e92c:	e6be      	b.n	800e6ac <dhcp_parse_reply+0x74>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e92e:	4b09      	ldr	r3, [pc, #36]	; (800e954 <dhcp_parse_reply+0x31c>)
 800e930:	f240 625d 	movw	r2, #1629	; 0x65d
 800e934:	4908      	ldr	r1, [pc, #32]	; (800e958 <dhcp_parse_reply+0x320>)
 800e936:	4809      	ldr	r0, [pc, #36]	; (800e95c <dhcp_parse_reply+0x324>)
 800e938:	f005 fe5c 	bl	80145f4 <iprintf>
 800e93c:	f06f 0005 	mvn.w	r0, #5
 800e940:	e098      	b.n	800ea74 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e942:	2b04      	cmp	r3, #4
 800e944:	d114      	bne.n	800e970 <dhcp_parse_reply+0x338>
    decode_len = len;
 800e946:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 800e948:	f04f 0905 	mov.w	r9, #5
 800e94c:	e6ae      	b.n	800e6ac <dhcp_parse_reply+0x74>
 800e94e:	bf00      	nop
 800e950:	20008c60 	.word	0x20008c60
 800e954:	08017c80 	.word	0x08017c80
 800e958:	08017cf4 	.word	0x08017cf4
 800e95c:	08015608 	.word	0x08015608
 800e960:	08017d00 	.word	0x08017d00
 800e964:	08017d14 	.word	0x08017d14
 800e968:	08017d24 	.word	0x08017d24
 800e96c:	08017d30 	.word	0x08017d30
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e970:	4b5e      	ldr	r3, [pc, #376]	; (800eaec <dhcp_parse_reply+0x4b4>)
 800e972:	f240 6261 	movw	r2, #1633	; 0x661
 800e976:	495e      	ldr	r1, [pc, #376]	; (800eaf0 <dhcp_parse_reply+0x4b8>)
 800e978:	485e      	ldr	r0, [pc, #376]	; (800eaf4 <dhcp_parse_reply+0x4bc>)
 800e97a:	f005 fe3b 	bl	80145f4 <iprintf>
 800e97e:	f06f 0005 	mvn.w	r0, #5
 800e982:	e077      	b.n	800ea74 <dhcp_parse_reply+0x43c>
    int decode_idx = -1;
 800e984:	f04f 39ff 	mov.w	r9, #4294967295
        decode_len = 0;
 800e988:	2700      	movs	r7, #0
 800e98a:	e68f      	b.n	800e6ac <dhcp_parse_reply+0x74>
      if (offset + len + 2 > 0xFFFF) {
 800e98c:	4419      	add	r1, r3
 800e98e:	3102      	adds	r1, #2
 800e990:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800e994:	f280 80a4 	bge.w	800eae0 <dhcp_parse_reply+0x4a8>
      offset = (u16_t)(offset + len + 2);
 800e998:	441c      	add	r4, r3
 800e99a:	b2a4      	uxth	r4, r4
 800e99c:	3402      	adds	r4, #2
 800e99e:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 800e9a0:	2f00      	cmp	r7, #0
 800e9a2:	f43f ae88 	beq.w	800e6b6 <dhcp_parse_reply+0x7e>
        u32_t value = 0;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	9305      	str	r3, [sp, #20]
 800e9aa:	e02d      	b.n	800ea08 <dhcp_parse_reply+0x3d0>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800e9ac:	4b52      	ldr	r3, [pc, #328]	; (800eaf8 <dhcp_parse_reply+0x4c0>)
 800e9ae:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	f47f ae7f 	bne.w	800e6b6 <dhcp_parse_reply+0x7e>
          copy_len = LWIP_MIN(decode_len, 4);
 800e9b8:	46ba      	mov	sl, r7
 800e9ba:	2f04      	cmp	r7, #4
 800e9bc:	bf28      	it	cs
 800e9be:	f04f 0a04 	movcs.w	sl, #4
 800e9c2:	fa5f fa8a 	uxtb.w	sl, sl
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800e9c6:	4643      	mov	r3, r8
 800e9c8:	4652      	mov	r2, sl
 800e9ca:	a905      	add	r1, sp, #20
 800e9cc:	4630      	mov	r0, r6
 800e9ce:	f7fa f903 	bl	8008bd8 <pbuf_copy_partial>
 800e9d2:	4550      	cmp	r0, sl
 800e9d4:	d14c      	bne.n	800ea70 <dhcp_parse_reply+0x438>
          if (decode_len > 4) {
 800e9d6:	2f04      	cmp	r7, #4
 800e9d8:	d92b      	bls.n	800ea32 <dhcp_parse_reply+0x3fa>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800e9da:	f017 0f03 	tst.w	r7, #3
 800e9de:	d11e      	bne.n	800ea1e <dhcp_parse_reply+0x3e6>
            dhcp_got_option(dhcp, decode_idx);
 800e9e0:	4b45      	ldr	r3, [pc, #276]	; (800eaf8 <dhcp_parse_reply+0x4c0>)
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	f803 2009 	strb.w	r2, [r3, r9]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800e9e8:	9805      	ldr	r0, [sp, #20]
 800e9ea:	f7f8 fc04 	bl	80071f6 <lwip_htonl>
 800e9ee:	4b43      	ldr	r3, [pc, #268]	; (800eafc <dhcp_parse_reply+0x4c4>)
 800e9f0:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800e9f4:	3f04      	subs	r7, #4
 800e9f6:	b2ff      	uxtb	r7, r7
            next_val_offset = (u16_t)(val_offset + 4);
 800e9f8:	f108 0304 	add.w	r3, r8, #4
 800e9fc:	b29b      	uxth	r3, r3
            if (next_val_offset < val_offset) {
 800e9fe:	4598      	cmp	r8, r3
 800ea00:	d83b      	bhi.n	800ea7a <dhcp_parse_reply+0x442>
            decode_idx++;
 800ea02:	f109 0901 	add.w	r9, r9, #1
            val_offset = next_val_offset;
 800ea06:	4698      	mov	r8, r3
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800ea08:	f1b9 0f09 	cmp.w	r9, #9
 800ea0c:	d9ce      	bls.n	800e9ac <dhcp_parse_reply+0x374>
 800ea0e:	4b37      	ldr	r3, [pc, #220]	; (800eaec <dhcp_parse_reply+0x4b4>)
 800ea10:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800ea14:	493a      	ldr	r1, [pc, #232]	; (800eb00 <dhcp_parse_reply+0x4c8>)
 800ea16:	4837      	ldr	r0, [pc, #220]	; (800eaf4 <dhcp_parse_reply+0x4bc>)
 800ea18:	f005 fdec 	bl	80145f4 <iprintf>
 800ea1c:	e7c6      	b.n	800e9ac <dhcp_parse_reply+0x374>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800ea1e:	4b33      	ldr	r3, [pc, #204]	; (800eaec <dhcp_parse_reply+0x4b4>)
 800ea20:	f240 6281 	movw	r2, #1665	; 0x681
 800ea24:	4937      	ldr	r1, [pc, #220]	; (800eb04 <dhcp_parse_reply+0x4cc>)
 800ea26:	4833      	ldr	r0, [pc, #204]	; (800eaf4 <dhcp_parse_reply+0x4bc>)
 800ea28:	f005 fde4 	bl	80145f4 <iprintf>
 800ea2c:	f06f 0005 	mvn.w	r0, #5
 800ea30:	e020      	b.n	800ea74 <dhcp_parse_reply+0x43c>
          } else if (decode_len == 4) {
 800ea32:	2f04      	cmp	r7, #4
 800ea34:	d00d      	beq.n	800ea52 <dhcp_parse_reply+0x41a>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800ea36:	2f01      	cmp	r7, #1
 800ea38:	d110      	bne.n	800ea5c <dhcp_parse_reply+0x424>
            value = ((u8_t *)&value)[0];
 800ea3a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800ea3e:	9305      	str	r3, [sp, #20]
          dhcp_got_option(dhcp, decode_idx);
 800ea40:	4b2d      	ldr	r3, [pc, #180]	; (800eaf8 <dhcp_parse_reply+0x4c0>)
 800ea42:	2201      	movs	r2, #1
 800ea44:	f803 2009 	strb.w	r2, [r3, r9]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800ea48:	4b2c      	ldr	r3, [pc, #176]	; (800eafc <dhcp_parse_reply+0x4c4>)
 800ea4a:	9a05      	ldr	r2, [sp, #20]
 800ea4c:	f843 2029 	str.w	r2, [r3, r9, lsl #2]
 800ea50:	e631      	b.n	800e6b6 <dhcp_parse_reply+0x7e>
            value = lwip_ntohl(value);
 800ea52:	9805      	ldr	r0, [sp, #20]
 800ea54:	f7f8 fbcf 	bl	80071f6 <lwip_htonl>
 800ea58:	9005      	str	r0, [sp, #20]
 800ea5a:	e7f1      	b.n	800ea40 <dhcp_parse_reply+0x408>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800ea5c:	4b23      	ldr	r3, [pc, #140]	; (800eaec <dhcp_parse_reply+0x4b4>)
 800ea5e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800ea62:	4929      	ldr	r1, [pc, #164]	; (800eb08 <dhcp_parse_reply+0x4d0>)
 800ea64:	4823      	ldr	r0, [pc, #140]	; (800eaf4 <dhcp_parse_reply+0x4bc>)
 800ea66:	f005 fdc5 	bl	80145f4 <iprintf>
 800ea6a:	f06f 0005 	mvn.w	r0, #5
 800ea6e:	e001      	b.n	800ea74 <dhcp_parse_reply+0x43c>
            return ERR_BUF;
 800ea70:	f06f 0001 	mvn.w	r0, #1
}
 800ea74:	b007      	add	sp, #28
 800ea76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              return ERR_BUF;
 800ea7a:	f06f 0001 	mvn.w	r0, #1
 800ea7e:	e7f9      	b.n	800ea74 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800ea80:	4b1a      	ldr	r3, [pc, #104]	; (800eaec <dhcp_parse_reply+0x4b4>)
 800ea82:	f240 629d 	movw	r2, #1693	; 0x69d
 800ea86:	4921      	ldr	r1, [pc, #132]	; (800eb0c <dhcp_parse_reply+0x4d4>)
 800ea88:	481a      	ldr	r0, [pc, #104]	; (800eaf4 <dhcp_parse_reply+0x4bc>)
 800ea8a:	f005 fdb3 	bl	80145f4 <iprintf>
 800ea8e:	f06f 0005 	mvn.w	r0, #5
 800ea92:	e7ef      	b.n	800ea74 <dhcp_parse_reply+0x43c>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800ea94:	4b18      	ldr	r3, [pc, #96]	; (800eaf8 <dhcp_parse_reply+0x4c0>)
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	b163      	cbz	r3, 800eab4 <dhcp_parse_reply+0x47c>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ea9a:	4b18      	ldr	r3, [pc, #96]	; (800eafc <dhcp_parse_reply+0x4c4>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ea9e:	4a16      	ldr	r2, [pc, #88]	; (800eaf8 <dhcp_parse_reply+0x4c0>)
 800eaa0:	2100      	movs	r1, #0
 800eaa2:	7011      	strb	r1, [r2, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	f43f adda 	beq.w	800e65e <dhcp_parse_reply+0x26>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800eaaa:	2b02      	cmp	r3, #2
 800eaac:	d00a      	beq.n	800eac4 <dhcp_parse_reply+0x48c>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800eaae:	2b03      	cmp	r3, #3
 800eab0:	f43f add9 	beq.w	800e666 <dhcp_parse_reply+0x2e>
  } else if (parse_sname_as_options) {
 800eab4:	9b03      	ldr	r3, [sp, #12]
 800eab6:	b143      	cbz	r3, 800eaca <dhcp_parse_reply+0x492>
    parse_sname_as_options = 0;
 800eab8:	2300      	movs	r3, #0
 800eaba:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800eabc:	256c      	movs	r5, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 800eabe:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 800eac2:	e5ca      	b.n	800e65a <dhcp_parse_reply+0x22>
      parse_sname_as_options = 1;
 800eac4:	2301      	movs	r3, #1
 800eac6:	9303      	str	r3, [sp, #12]
 800eac8:	e7f4      	b.n	800eab4 <dhcp_parse_reply+0x47c>
  return ERR_OK;
 800eaca:	2000      	movs	r0, #0
 800eacc:	e7d2      	b.n	800ea74 <dhcp_parse_reply+0x43c>
    return ERR_BUF;
 800eace:	f06f 0001 	mvn.w	r0, #1
}
 800ead2:	4770      	bx	lr
    return ERR_BUF;
 800ead4:	f06f 0001 	mvn.w	r0, #1
 800ead8:	e7cc      	b.n	800ea74 <dhcp_parse_reply+0x43c>
      return ERR_BUF;
 800eada:	f06f 0001 	mvn.w	r0, #1
 800eade:	e7c9      	b.n	800ea74 <dhcp_parse_reply+0x43c>
        return ERR_BUF;
 800eae0:	f06f 0001 	mvn.w	r0, #1
 800eae4:	e7c6      	b.n	800ea74 <dhcp_parse_reply+0x43c>
        return ERR_BUF;
 800eae6:	f06f 0001 	mvn.w	r0, #1
 800eaea:	e7c3      	b.n	800ea74 <dhcp_parse_reply+0x43c>
 800eaec:	08017c80 	.word	0x08017c80
 800eaf0:	08017cf4 	.word	0x08017cf4
 800eaf4:	08015608 	.word	0x08015608
 800eaf8:	20008c60 	.word	0x20008c60
 800eafc:	20008c6c 	.word	0x20008c6c
 800eb00:	08017d48 	.word	0x08017d48
 800eb04:	08017d5c 	.word	0x08017d5c
 800eb08:	08017d74 	.word	0x08017d74
 800eb0c:	08017d88 	.word	0x08017d88

0800eb10 <dhcp_handle_ack>:
{
 800eb10:	b510      	push	{r4, lr}
 800eb12:	b086      	sub	sp, #24
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eb14:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800eb18:	2300      	movs	r3, #0
 800eb1a:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800eb1c:	6363      	str	r3, [r4, #52]	; 0x34
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800eb1e:	4b28      	ldr	r3, [pc, #160]	; (800ebc0 <dhcp_handle_ack+0xb0>)
 800eb20:	78db      	ldrb	r3, [r3, #3]
 800eb22:	b113      	cbz	r3, 800eb2a <dhcp_handle_ack+0x1a>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800eb24:	4b27      	ldr	r3, [pc, #156]	; (800ebc4 <dhcp_handle_ack+0xb4>)
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	63a3      	str	r3, [r4, #56]	; 0x38
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800eb2a:	4b25      	ldr	r3, [pc, #148]	; (800ebc0 <dhcp_handle_ack+0xb0>)
 800eb2c:	791b      	ldrb	r3, [r3, #4]
 800eb2e:	b333      	cbz	r3, 800eb7e <dhcp_handle_ack+0x6e>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800eb30:	4b24      	ldr	r3, [pc, #144]	; (800ebc4 <dhcp_handle_ack+0xb4>)
 800eb32:	691b      	ldr	r3, [r3, #16]
 800eb34:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800eb36:	4b22      	ldr	r3, [pc, #136]	; (800ebc0 <dhcp_handle_ack+0xb0>)
 800eb38:	795b      	ldrb	r3, [r3, #5]
 800eb3a:	b323      	cbz	r3, 800eb86 <dhcp_handle_ack+0x76>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800eb3c:	4b21      	ldr	r3, [pc, #132]	; (800ebc4 <dhcp_handle_ack+0xb4>)
 800eb3e:	695b      	ldr	r3, [r3, #20]
 800eb40:	6423      	str	r3, [r4, #64]	; 0x40
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800eb42:	690b      	ldr	r3, [r1, #16]
 800eb44:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800eb46:	4b1e      	ldr	r3, [pc, #120]	; (800ebc0 <dhcp_handle_ack+0xb0>)
 800eb48:	799b      	ldrb	r3, [r3, #6]
 800eb4a:	b313      	cbz	r3, 800eb92 <dhcp_handle_ack+0x82>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800eb4c:	4b1d      	ldr	r3, [pc, #116]	; (800ebc4 <dhcp_handle_ack+0xb4>)
 800eb4e:	6998      	ldr	r0, [r3, #24]
 800eb50:	f7f8 fb51 	bl	80071f6 <lwip_htonl>
 800eb54:	6320      	str	r0, [r4, #48]	; 0x30
    dhcp->subnet_mask_given = 1;
 800eb56:	2301      	movs	r3, #1
 800eb58:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800eb5a:	4b19      	ldr	r3, [pc, #100]	; (800ebc0 <dhcp_handle_ack+0xb0>)
 800eb5c:	79db      	ldrb	r3, [r3, #7]
 800eb5e:	b123      	cbz	r3, 800eb6a <dhcp_handle_ack+0x5a>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800eb60:	4b18      	ldr	r3, [pc, #96]	; (800ebc4 <dhcp_handle_ack+0xb4>)
 800eb62:	69d8      	ldr	r0, [r3, #28]
 800eb64:	f7f8 fb47 	bl	80071f6 <lwip_htonl>
 800eb68:	6360      	str	r0, [r4, #52]	; 0x34
{
 800eb6a:	2400      	movs	r4, #0
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800eb6c:	2c01      	cmp	r4, #1
 800eb6e:	d804      	bhi.n	800eb7a <dhcp_handle_ack+0x6a>
 800eb70:	f104 0308 	add.w	r3, r4, #8
 800eb74:	4a12      	ldr	r2, [pc, #72]	; (800ebc0 <dhcp_handle_ack+0xb0>)
 800eb76:	5cd2      	ldrb	r2, [r2, r3]
 800eb78:	b972      	cbnz	r2, 800eb98 <dhcp_handle_ack+0x88>
}
 800eb7a:	b006      	add	sp, #24
 800eb7c:	bd10      	pop	{r4, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800eb7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eb80:	085b      	lsrs	r3, r3, #1
 800eb82:	63e3      	str	r3, [r4, #60]	; 0x3c
 800eb84:	e7d7      	b.n	800eb36 <dhcp_handle_ack+0x26>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800eb86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eb88:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800eb8c:	08db      	lsrs	r3, r3, #3
 800eb8e:	6423      	str	r3, [r4, #64]	; 0x40
 800eb90:	e7d7      	b.n	800eb42 <dhcp_handle_ack+0x32>
    dhcp->subnet_mask_given = 0;
 800eb92:	2300      	movs	r3, #0
 800eb94:	71e3      	strb	r3, [r4, #7]
 800eb96:	e7e0      	b.n	800eb5a <dhcp_handle_ack+0x4a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 800eb98:	4a0a      	ldr	r2, [pc, #40]	; (800ebc4 <dhcp_handle_ack+0xb4>)
 800eb9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800eb9e:	f7f8 fb2a 	bl	80071f6 <lwip_htonl>
 800eba2:	9001      	str	r0, [sp, #4]
 800eba4:	2300      	movs	r3, #0
 800eba6:	f88d 3014 	strb.w	r3, [sp, #20]
 800ebaa:	9304      	str	r3, [sp, #16]
 800ebac:	9303      	str	r3, [sp, #12]
 800ebae:	9302      	str	r3, [sp, #8]
    dns_setserver(n, &dns_addr);
 800ebb0:	a901      	add	r1, sp, #4
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	f7f8 fdea 	bl	800778c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800ebb8:	3401      	adds	r4, #1
 800ebba:	b2e4      	uxtb	r4, r4
 800ebbc:	e7d6      	b.n	800eb6c <dhcp_handle_ack+0x5c>
 800ebbe:	bf00      	nop
 800ebc0:	20008c60 	.word	0x20008c60
 800ebc4:	20008c6c 	.word	0x20008c6c

0800ebc8 <dhcp_recv>:
{
 800ebc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebca:	4614      	mov	r4, r2
  struct netif *netif = ip_current_input_netif();
 800ebcc:	4a3c      	ldr	r2, [pc, #240]	; (800ecc0 <dhcp_recv+0xf8>)
 800ebce:	6856      	ldr	r6, [r2, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ebd0:	f8d6 50ac 	ldr.w	r5, [r6, #172]	; 0xac
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800ebd4:	6867      	ldr	r7, [r4, #4]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800ebd6:	b155      	cbz	r5, 800ebee <dhcp_recv+0x26>
 800ebd8:	792a      	ldrb	r2, [r5, #4]
 800ebda:	b142      	cbz	r2, 800ebee <dhcp_recv+0x26>
  LWIP_ASSERT("invalid server address type", IP_IS_V4(addr));
 800ebdc:	b10b      	cbz	r3, 800ebe2 <dhcp_recv+0x1a>
 800ebde:	7c1b      	ldrb	r3, [r3, #16]
 800ebe0:	b94b      	cbnz	r3, 800ebf6 <dhcp_recv+0x2e>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 800ebe2:	8963      	ldrh	r3, [r4, #10]
 800ebe4:	2b2b      	cmp	r3, #43	; 0x2b
 800ebe6:	d902      	bls.n	800ebee <dhcp_recv+0x26>
  if (reply_msg->op != DHCP_BOOTREPLY) {
 800ebe8:	783b      	ldrb	r3, [r7, #0]
 800ebea:	2b02      	cmp	r3, #2
 800ebec:	d00b      	beq.n	800ec06 <dhcp_recv+0x3e>
  pbuf_free(p);
 800ebee:	4620      	mov	r0, r4
 800ebf0:	f7f9 fd9a 	bl	8008728 <pbuf_free>
}
 800ebf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("invalid server address type", IP_IS_V4(addr));
 800ebf6:	4b33      	ldr	r3, [pc, #204]	; (800ecc4 <dhcp_recv+0xfc>)
 800ebf8:	f240 62ea 	movw	r2, #1770	; 0x6ea
 800ebfc:	4932      	ldr	r1, [pc, #200]	; (800ecc8 <dhcp_recv+0x100>)
 800ebfe:	4833      	ldr	r0, [pc, #204]	; (800eccc <dhcp_recv+0x104>)
 800ec00:	f005 fcf8 	bl	80145f4 <iprintf>
 800ec04:	e7ed      	b.n	800ebe2 <dhcp_recv+0x1a>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ec06:	2300      	movs	r3, #0
 800ec08:	f896 20c2 	ldrb.w	r2, [r6, #194]	; 0xc2
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d90b      	bls.n	800ec28 <dhcp_recv+0x60>
 800ec10:	2b05      	cmp	r3, #5
 800ec12:	d809      	bhi.n	800ec28 <dhcp_recv+0x60>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800ec14:	18f2      	adds	r2, r6, r3
 800ec16:	f892 10bc 	ldrb.w	r1, [r2, #188]	; 0xbc
 800ec1a:	18fa      	adds	r2, r7, r3
 800ec1c:	7f12      	ldrb	r2, [r2, #28]
 800ec1e:	4291      	cmp	r1, r2
 800ec20:	d1e5      	bne.n	800ebee <dhcp_recv+0x26>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ec22:	3301      	adds	r3, #1
 800ec24:	b2db      	uxtb	r3, r3
 800ec26:	e7ef      	b.n	800ec08 <dhcp_recv+0x40>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f7f8 fae4 	bl	80071f6 <lwip_htonl>
 800ec2e:	682b      	ldr	r3, [r5, #0]
 800ec30:	4298      	cmp	r0, r3
 800ec32:	d1dc      	bne.n	800ebee <dhcp_recv+0x26>
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800ec34:	4629      	mov	r1, r5
 800ec36:	4620      	mov	r0, r4
 800ec38:	f7ff fcfe 	bl	800e638 <dhcp_parse_reply>
 800ec3c:	2800      	cmp	r0, #0
 800ec3e:	d1d6      	bne.n	800ebee <dhcp_recv+0x26>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800ec40:	4b23      	ldr	r3, [pc, #140]	; (800ecd0 <dhcp_recv+0x108>)
 800ec42:	785b      	ldrb	r3, [r3, #1]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d0d2      	beq.n	800ebee <dhcp_recv+0x26>
  msg_in = (struct dhcp_msg *)p->payload;
 800ec48:	6861      	ldr	r1, [r4, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800ec4a:	4b22      	ldr	r3, [pc, #136]	; (800ecd4 <dhcp_recv+0x10c>)
 800ec4c:	791b      	ldrb	r3, [r3, #4]
  if (msg_type == DHCP_ACK) {
 800ec4e:	2b05      	cmp	r3, #5
 800ec50:	d00a      	beq.n	800ec68 <dhcp_recv+0xa0>
  else if ((msg_type == DHCP_NAK) &&
 800ec52:	2b06      	cmp	r3, #6
 800ec54:	d026      	beq.n	800eca4 <dhcp_recv+0xdc>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800ec56:	2b02      	cmp	r3, #2
 800ec58:	d1c9      	bne.n	800ebee <dhcp_recv+0x26>
 800ec5a:	796b      	ldrb	r3, [r5, #5]
 800ec5c:	2b06      	cmp	r3, #6
 800ec5e:	d1c6      	bne.n	800ebee <dhcp_recv+0x26>
    dhcp_handle_offer(netif, msg_in);
 800ec60:	4630      	mov	r0, r6
 800ec62:	f7ff fad7 	bl	800e214 <dhcp_handle_offer>
 800ec66:	e7c2      	b.n	800ebee <dhcp_recv+0x26>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800ec68:	796b      	ldrb	r3, [r5, #5]
 800ec6a:	2b01      	cmp	r3, #1
 800ec6c:	d00a      	beq.n	800ec84 <dhcp_recv+0xbc>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800ec6e:	3b03      	subs	r3, #3
 800ec70:	b2db      	uxtb	r3, r3
 800ec72:	2b02      	cmp	r3, #2
 800ec74:	d8bb      	bhi.n	800ebee <dhcp_recv+0x26>
      dhcp_handle_ack(netif, msg_in);
 800ec76:	4630      	mov	r0, r6
 800ec78:	f7ff ff4a 	bl	800eb10 <dhcp_handle_ack>
      dhcp_bind(netif);
 800ec7c:	4630      	mov	r0, r6
 800ec7e:	f7ff fbcd 	bl	800e41c <dhcp_bind>
 800ec82:	e7b4      	b.n	800ebee <dhcp_recv+0x26>
      dhcp_handle_ack(netif, msg_in);
 800ec84:	4630      	mov	r0, r6
 800ec86:	f7ff ff43 	bl	800eb10 <dhcp_handle_ack>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800ec8a:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
 800ec8e:	f013 0f08 	tst.w	r3, #8
 800ec92:	d003      	beq.n	800ec9c <dhcp_recv+0xd4>
        dhcp_check(netif);
 800ec94:	4630      	mov	r0, r6
 800ec96:	f7ff fbab 	bl	800e3f0 <dhcp_check>
 800ec9a:	e7a8      	b.n	800ebee <dhcp_recv+0x26>
        dhcp_bind(netif);
 800ec9c:	4630      	mov	r0, r6
 800ec9e:	f7ff fbbd 	bl	800e41c <dhcp_bind>
 800eca2:	e7a4      	b.n	800ebee <dhcp_recv+0x26>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800eca4:	796a      	ldrb	r2, [r5, #5]
  else if ((msg_type == DHCP_NAK) &&
 800eca6:	2a03      	cmp	r2, #3
 800eca8:	d005      	beq.n	800ecb6 <dhcp_recv+0xee>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800ecaa:	2a01      	cmp	r2, #1
 800ecac:	d003      	beq.n	800ecb6 <dhcp_recv+0xee>
 800ecae:	2a04      	cmp	r2, #4
 800ecb0:	d001      	beq.n	800ecb6 <dhcp_recv+0xee>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800ecb2:	2a05      	cmp	r2, #5
 800ecb4:	d1cf      	bne.n	800ec56 <dhcp_recv+0x8e>
    dhcp_handle_nak(netif);
 800ecb6:	4630      	mov	r0, r6
 800ecb8:	f7ff fc46 	bl	800e548 <dhcp_handle_nak>
 800ecbc:	e797      	b.n	800ebee <dhcp_recv+0x26>
 800ecbe:	bf00      	nop
 800ecc0:	20004b84 	.word	0x20004b84
 800ecc4:	08017c80 	.word	0x08017c80
 800ecc8:	08017d9c 	.word	0x08017d9c
 800eccc:	08015608 	.word	0x08015608
 800ecd0:	20008c60 	.word	0x20008c60
 800ecd4:	20008c6c 	.word	0x20008c6c

0800ecd8 <dhcp_arp_reply>:
{
 800ecd8:	b508      	push	{r3, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ecda:	b138      	cbz	r0, 800ecec <dhcp_arp_reply+0x14>
 800ecdc:	4602      	mov	r2, r0
  dhcp = netif_dhcp_data(netif);
 800ecde:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800ece2:	b113      	cbz	r3, 800ecea <dhcp_arp_reply+0x12>
 800ece4:	7958      	ldrb	r0, [r3, #5]
 800ece6:	2808      	cmp	r0, #8
 800ece8:	d008      	beq.n	800ecfc <dhcp_arp_reply+0x24>
}
 800ecea:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ecec:	4b07      	ldr	r3, [pc, #28]	; (800ed0c <dhcp_arp_reply+0x34>)
 800ecee:	f240 328b 	movw	r2, #907	; 0x38b
 800ecf2:	4907      	ldr	r1, [pc, #28]	; (800ed10 <dhcp_arp_reply+0x38>)
 800ecf4:	4807      	ldr	r0, [pc, #28]	; (800ed14 <dhcp_arp_reply+0x3c>)
 800ecf6:	f005 fc7d 	bl	80145f4 <iprintf>
 800ecfa:	e7f6      	b.n	800ecea <dhcp_arp_reply+0x12>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800ecfc:	6809      	ldr	r1, [r1, #0]
 800ecfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed00:	4299      	cmp	r1, r3
 800ed02:	d1f2      	bne.n	800ecea <dhcp_arp_reply+0x12>
      dhcp_decline(netif);
 800ed04:	4610      	mov	r0, r2
 800ed06:	f7ff fb23 	bl	800e350 <dhcp_decline>
 800ed0a:	e7ee      	b.n	800ecea <dhcp_arp_reply+0x12>
 800ed0c:	08017c80 	.word	0x08017c80
 800ed10:	080155f8 	.word	0x080155f8
 800ed14:	08015608 	.word	0x08015608

0800ed18 <dhcp_renew>:
{
 800ed18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed1c:	b084      	sub	sp, #16
 800ed1e:	4680      	mov	r8, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ed20:	f8d0 60ac 	ldr.w	r6, [r0, #172]	; 0xac
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800ed24:	2105      	movs	r1, #5
 800ed26:	4630      	mov	r0, r6
 800ed28:	f7fe ff5a 	bl	800dbe0 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ed2c:	f10d 030e 	add.w	r3, sp, #14
 800ed30:	2203      	movs	r2, #3
 800ed32:	4631      	mov	r1, r6
 800ed34:	4640      	mov	r0, r8
 800ed36:	f7fe ffd7 	bl	800dce8 <dhcp_create_msg>
  if (p_out != NULL) {
 800ed3a:	2800      	cmp	r0, #0
 800ed3c:	d057      	beq.n	800edee <dhcp_renew+0xd6>
 800ed3e:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ed40:	6845      	ldr	r5, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ed42:	35f0      	adds	r5, #240	; 0xf0
 800ed44:	2302      	movs	r3, #2
 800ed46:	2239      	movs	r2, #57	; 0x39
 800ed48:	4629      	mov	r1, r5
 800ed4a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800ed4e:	f7fe ff6d 	bl	800dc2c <dhcp_option>
 800ed52:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ed56:	f8b8 20b8 	ldrh.w	r2, [r8, #184]	; 0xb8
 800ed5a:	4629      	mov	r1, r5
 800ed5c:	f7fe ff48 	bl	800dbf0 <dhcp_option_short>
 800ed60:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ed64:	2304      	movs	r3, #4
 800ed66:	2237      	movs	r2, #55	; 0x37
 800ed68:	4629      	mov	r1, r5
 800ed6a:	f7fe ff5f 	bl	800dc2c <dhcp_option>
 800ed6e:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ed72:	2400      	movs	r4, #0
 800ed74:	e00a      	b.n	800ed8c <dhcp_renew+0x74>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ed76:	4b21      	ldr	r3, [pc, #132]	; (800edfc <dhcp_renew+0xe4>)
 800ed78:	5d1a      	ldrb	r2, [r3, r4]
 800ed7a:	4629      	mov	r1, r5
 800ed7c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800ed80:	f7fe ff72 	bl	800dc68 <dhcp_option_byte>
 800ed84:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ed88:	3401      	adds	r4, #1
 800ed8a:	b2e4      	uxtb	r4, r4
 800ed8c:	2c03      	cmp	r4, #3
 800ed8e:	d9f2      	bls.n	800ed76 <dhcp_renew+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ed90:	463a      	mov	r2, r7
 800ed92:	4629      	mov	r1, r5
 800ed94:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800ed98:	f7ff f844 	bl	800de24 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800ed9c:	4b18      	ldr	r3, [pc, #96]	; (800ee00 <dhcp_renew+0xe8>)
 800ed9e:	6818      	ldr	r0, [r3, #0]
 800eda0:	f8cd 8000 	str.w	r8, [sp]
 800eda4:	2343      	movs	r3, #67	; 0x43
 800eda6:	f106 0218 	add.w	r2, r6, #24
 800edaa:	4639      	mov	r1, r7
 800edac:	f7fe fcb2 	bl	800d714 <udp_sendto_if>
 800edb0:	4604      	mov	r4, r0
    pbuf_free(p_out);
 800edb2:	4638      	mov	r0, r7
 800edb4:	f7f9 fcb8 	bl	8008728 <pbuf_free>
  if (dhcp->tries < 255) {
 800edb8:	79b3      	ldrb	r3, [r6, #6]
 800edba:	2bff      	cmp	r3, #255	; 0xff
 800edbc:	d001      	beq.n	800edc2 <dhcp_renew+0xaa>
    dhcp->tries++;
 800edbe:	3301      	adds	r3, #1
 800edc0:	71b3      	strb	r3, [r6, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800edc2:	79b3      	ldrb	r3, [r6, #6]
 800edc4:	2b09      	cmp	r3, #9
 800edc6:	d815      	bhi.n	800edf4 <dhcp_renew+0xdc>
 800edc8:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800edcc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800edd0:	0113      	lsls	r3, r2, #4
 800edd2:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800edd4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800edd8:	4a0a      	ldr	r2, [pc, #40]	; (800ee04 <dhcp_renew+0xec>)
 800edda:	fb82 1203 	smull	r1, r2, r2, r3
 800edde:	17db      	asrs	r3, r3, #31
 800ede0:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800ede4:	8133      	strh	r3, [r6, #8]
}
 800ede6:	4620      	mov	r0, r4
 800ede8:	b004      	add	sp, #16
 800edea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 800edee:	f04f 34ff 	mov.w	r4, #4294967295
 800edf2:	e7e1      	b.n	800edb8 <dhcp_renew+0xa0>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800edf4:	f644 6320 	movw	r3, #20000	; 0x4e20
 800edf8:	e7ec      	b.n	800edd4 <dhcp_renew+0xbc>
 800edfa:	bf00      	nop
 800edfc:	08017b9c 	.word	0x08017b9c
 800ee00:	2000177c 	.word	0x2000177c
 800ee04:	10624dd3 	.word	0x10624dd3

0800ee08 <dhcp_t1_timeout>:
{
 800ee08:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ee0a:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ee0e:	7963      	ldrb	r3, [r4, #5]
 800ee10:	2b01      	cmp	r3, #1
 800ee12:	d003      	beq.n	800ee1c <dhcp_t1_timeout+0x14>
 800ee14:	2b0a      	cmp	r3, #10
 800ee16:	d001      	beq.n	800ee1c <dhcp_t1_timeout+0x14>
 800ee18:	2b05      	cmp	r3, #5
 800ee1a:	d10b      	bne.n	800ee34 <dhcp_t1_timeout+0x2c>
    dhcp_renew(netif);
 800ee1c:	f7ff ff7c 	bl	800ed18 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ee20:	89a3      	ldrh	r3, [r4, #12]
 800ee22:	8a62      	ldrh	r2, [r4, #18]
 800ee24:	1a9b      	subs	r3, r3, r2
 800ee26:	2b01      	cmp	r3, #1
 800ee28:	dd04      	ble.n	800ee34 <dhcp_t1_timeout+0x2c>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800ee2a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800ee2e:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800ee32:	81e3      	strh	r3, [r4, #14]
}
 800ee34:	bd10      	pop	{r4, pc}

0800ee36 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800ee36:	b190      	cbz	r0, 800ee5e <dhcp_supplied_address+0x28>
 800ee38:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 800ee3c:	b18b      	cbz	r3, 800ee62 <dhcp_supplied_address+0x2c>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800ee3e:	795b      	ldrb	r3, [r3, #5]
 800ee40:	2b0a      	cmp	r3, #10
 800ee42:	d007      	beq.n	800ee54 <dhcp_supplied_address+0x1e>
 800ee44:	2b05      	cmp	r3, #5
 800ee46:	d008      	beq.n	800ee5a <dhcp_supplied_address+0x24>
 800ee48:	2b04      	cmp	r3, #4
 800ee4a:	d001      	beq.n	800ee50 <dhcp_supplied_address+0x1a>
 800ee4c:	2000      	movs	r0, #0
 800ee4e:	e002      	b.n	800ee56 <dhcp_supplied_address+0x20>
 800ee50:	2001      	movs	r0, #1
 800ee52:	e000      	b.n	800ee56 <dhcp_supplied_address+0x20>
 800ee54:	2001      	movs	r0, #1
 800ee56:	b2c0      	uxtb	r0, r0
 800ee58:	4770      	bx	lr
 800ee5a:	2001      	movs	r0, #1
 800ee5c:	e7fb      	b.n	800ee56 <dhcp_supplied_address+0x20>
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
 800ee5e:	2000      	movs	r0, #0
 800ee60:	4770      	bx	lr
 800ee62:	2000      	movs	r0, #0
}
 800ee64:	4770      	bx	lr
	...

0800ee68 <dhcp_release_and_stop>:
{
 800ee68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee6c:	b088      	sub	sp, #32
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ee6e:	f8d0 40ac 	ldr.w	r4, [r0, #172]	; 0xac
  if (dhcp == NULL) {
 800ee72:	2c00      	cmp	r4, #0
 800ee74:	d034      	beq.n	800eee0 <dhcp_release_and_stop+0x78>
  if (dhcp->state == DHCP_STATE_OFF) {
 800ee76:	7963      	ldrb	r3, [r4, #5]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d031      	beq.n	800eee0 <dhcp_release_and_stop+0x78>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800ee7c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ee80:	f88d 301c 	strb.w	r3, [sp, #28]
 800ee84:	2b06      	cmp	r3, #6
 800ee86:	d02e      	beq.n	800eee6 <dhcp_release_and_stop+0x7e>
 800ee88:	69a3      	ldr	r3, [r4, #24]
 800ee8a:	9303      	str	r3, [sp, #12]
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	9306      	str	r3, [sp, #24]
 800ee90:	9305      	str	r3, [sp, #20]
 800ee92:	9304      	str	r3, [sp, #16]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800ee94:	2300      	movs	r3, #0
 800ee96:	61a3      	str	r3, [r4, #24]
 800ee98:	61e3      	str	r3, [r4, #28]
 800ee9a:	6223      	str	r3, [r4, #32]
 800ee9c:	6263      	str	r3, [r4, #36]	; 0x24
 800ee9e:	f114 0f18 	cmn.w	r4, #24
 800eea2:	d001      	beq.n	800eea8 <dhcp_release_and_stop+0x40>
 800eea4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800eea8:	4605      	mov	r5, r0
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800eeaa:	2300      	movs	r3, #0
 800eeac:	62e3      	str	r3, [r4, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800eeae:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800eeb0:	6363      	str	r3, [r4, #52]	; 0x34
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800eeb2:	6423      	str	r3, [r4, #64]	; 0x40
 800eeb4:	63e3      	str	r3, [r4, #60]	; 0x3c
 800eeb6:	63a3      	str	r3, [r4, #56]	; 0x38
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800eeb8:	82a3      	strh	r3, [r4, #20]
 800eeba:	8263      	strh	r3, [r4, #18]
 800eebc:	8223      	strh	r3, [r4, #16]
 800eebe:	81e3      	strh	r3, [r4, #14]
  if (dhcp_supplied_address(netif)) {
 800eec0:	f7ff ffb9 	bl	800ee36 <dhcp_supplied_address>
 800eec4:	b9c0      	cbnz	r0, 800eef8 <dhcp_release_and_stop+0x90>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800eec6:	4927      	ldr	r1, [pc, #156]	; (800ef64 <dhcp_release_and_stop+0xfc>)
 800eec8:	460b      	mov	r3, r1
 800eeca:	460a      	mov	r2, r1
 800eecc:	4628      	mov	r0, r5
 800eece:	f7f9 f8b3 	bl	8008038 <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800eed2:	2100      	movs	r1, #0
 800eed4:	4620      	mov	r0, r4
 800eed6:	f7fe fe83 	bl	800dbe0 <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 800eeda:	7923      	ldrb	r3, [r4, #4]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d13b      	bne.n	800ef58 <dhcp_release_and_stop+0xf0>
}
 800eee0:	b008      	add	sp, #32
 800eee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800eee6:	69a3      	ldr	r3, [r4, #24]
 800eee8:	9303      	str	r3, [sp, #12]
 800eeea:	69e3      	ldr	r3, [r4, #28]
 800eeec:	9304      	str	r3, [sp, #16]
 800eeee:	6a23      	ldr	r3, [r4, #32]
 800eef0:	9305      	str	r3, [sp, #20]
 800eef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eef4:	9306      	str	r3, [sp, #24]
 800eef6:	e7cd      	b.n	800ee94 <dhcp_release_and_stop+0x2c>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800eef8:	f10d 030a 	add.w	r3, sp, #10
 800eefc:	2207      	movs	r2, #7
 800eefe:	4621      	mov	r1, r4
 800ef00:	4628      	mov	r0, r5
 800ef02:	f7fe fef1 	bl	800dce8 <dhcp_create_msg>
    if (p_out != NULL) {
 800ef06:	4607      	mov	r7, r0
 800ef08:	2800      	cmp	r0, #0
 800ef0a:	d0dc      	beq.n	800eec6 <dhcp_release_and_stop+0x5e>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ef0c:	6846      	ldr	r6, [r0, #4]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800ef0e:	36f0      	adds	r6, #240	; 0xf0
 800ef10:	2304      	movs	r3, #4
 800ef12:	2236      	movs	r2, #54	; 0x36
 800ef14:	4631      	mov	r1, r6
 800ef16:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 800ef1a:	f7fe fe87 	bl	800dc2c <dhcp_option>
 800ef1e:	4680      	mov	r8, r0
 800ef20:	f8ad 000a 	strh.w	r0, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800ef24:	9803      	ldr	r0, [sp, #12]
 800ef26:	f7f8 f966 	bl	80071f6 <lwip_htonl>
 800ef2a:	4602      	mov	r2, r0
 800ef2c:	4631      	mov	r1, r6
 800ef2e:	4640      	mov	r0, r8
 800ef30:	f7fe feb2 	bl	800dc98 <dhcp_option_long>
 800ef34:	f8ad 000a 	strh.w	r0, [sp, #10]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ef38:	463a      	mov	r2, r7
 800ef3a:	4631      	mov	r1, r6
 800ef3c:	f7fe ff72 	bl	800de24 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800ef40:	4b09      	ldr	r3, [pc, #36]	; (800ef68 <dhcp_release_and_stop+0x100>)
 800ef42:	6818      	ldr	r0, [r3, #0]
 800ef44:	9500      	str	r5, [sp, #0]
 800ef46:	2343      	movs	r3, #67	; 0x43
 800ef48:	aa03      	add	r2, sp, #12
 800ef4a:	4639      	mov	r1, r7
 800ef4c:	f7fe fbe2 	bl	800d714 <udp_sendto_if>
      pbuf_free(p_out);
 800ef50:	4638      	mov	r0, r7
 800ef52:	f7f9 fbe9 	bl	8008728 <pbuf_free>
 800ef56:	e7b6      	b.n	800eec6 <dhcp_release_and_stop+0x5e>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800ef58:	f7ff fb0a 	bl	800e570 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	7123      	strb	r3, [r4, #4]
 800ef60:	e7be      	b.n	800eee0 <dhcp_release_and_stop+0x78>
 800ef62:	bf00      	nop
 800ef64:	08018250 	.word	0x08018250
 800ef68:	2000177c 	.word	0x2000177c

0800ef6c <dhcp_start>:
{
 800ef6c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800ef6e:	b338      	cbz	r0, 800efc0 <dhcp_start+0x54>
 800ef70:	4604      	mov	r4, r0
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800ef72:	f890 30c3 	ldrb.w	r3, [r0, #195]	; 0xc3
 800ef76:	f013 0f01 	tst.w	r3, #1
 800ef7a:	d02b      	beq.n	800efd4 <dhcp_start+0x68>
  dhcp = netif_dhcp_data(netif);
 800ef7c:	f8d0 50ac 	ldr.w	r5, [r0, #172]	; 0xac
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800ef80:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
 800ef84:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800ef88:	d344      	bcc.n	800f014 <dhcp_start+0xa8>
  if (dhcp == NULL) {
 800ef8a:	b36d      	cbz	r5, 800efe8 <dhcp_start+0x7c>
    if (dhcp->pcb_allocated != 0) {
 800ef8c:	792b      	ldrb	r3, [r5, #4]
 800ef8e:	bb9b      	cbnz	r3, 800eff8 <dhcp_start+0x8c>
  memset(dhcp, 0, sizeof(struct dhcp));
 800ef90:	2244      	movs	r2, #68	; 0x44
 800ef92:	2100      	movs	r1, #0
 800ef94:	4628      	mov	r0, r5
 800ef96:	f005 fb24 	bl	80145e2 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800ef9a:	f7ff fb0d 	bl	800e5b8 <dhcp_inc_pcb_refcount>
 800ef9e:	4606      	mov	r6, r0
 800efa0:	2800      	cmp	r0, #0
 800efa2:	d13d      	bne.n	800f020 <dhcp_start+0xb4>
  dhcp->pcb_allocated = 1;
 800efa4:	2301      	movs	r3, #1
 800efa6:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 800efa8:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 800efac:	f013 0f04 	tst.w	r3, #4
 800efb0:	d025      	beq.n	800effe <dhcp_start+0x92>
  result = dhcp_discover(netif);
 800efb2:	4620      	mov	r0, r4
 800efb4:	f7ff f950 	bl	800e258 <dhcp_discover>
  if (result != ERR_OK) {
 800efb8:	4606      	mov	r6, r0
 800efba:	bb28      	cbnz	r0, 800f008 <dhcp_start+0x9c>
}
 800efbc:	4630      	mov	r0, r6
 800efbe:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800efc0:	4b19      	ldr	r3, [pc, #100]	; (800f028 <dhcp_start+0xbc>)
 800efc2:	f240 22e7 	movw	r2, #743	; 0x2e7
 800efc6:	4919      	ldr	r1, [pc, #100]	; (800f02c <dhcp_start+0xc0>)
 800efc8:	4819      	ldr	r0, [pc, #100]	; (800f030 <dhcp_start+0xc4>)
 800efca:	f005 fb13 	bl	80145f4 <iprintf>
 800efce:	f06f 060f 	mvn.w	r6, #15
 800efd2:	e7f3      	b.n	800efbc <dhcp_start+0x50>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800efd4:	4b14      	ldr	r3, [pc, #80]	; (800f028 <dhcp_start+0xbc>)
 800efd6:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800efda:	4916      	ldr	r1, [pc, #88]	; (800f034 <dhcp_start+0xc8>)
 800efdc:	4814      	ldr	r0, [pc, #80]	; (800f030 <dhcp_start+0xc4>)
 800efde:	f005 fb09 	bl	80145f4 <iprintf>
 800efe2:	f06f 060f 	mvn.w	r6, #15
 800efe6:	e7e9      	b.n	800efbc <dhcp_start+0x50>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800efe8:	2044      	movs	r0, #68	; 0x44
 800efea:	f7f8 fe2f 	bl	8007c4c <mem_malloc>
    if (dhcp == NULL) {
 800efee:	4605      	mov	r5, r0
 800eff0:	b198      	cbz	r0, 800f01a <dhcp_start+0xae>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800eff2:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
 800eff6:	e7cb      	b.n	800ef90 <dhcp_start+0x24>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800eff8:	f7ff faba 	bl	800e570 <dhcp_dec_pcb_refcount>
 800effc:	e7c8      	b.n	800ef90 <dhcp_start+0x24>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800effe:	2102      	movs	r1, #2
 800f000:	4628      	mov	r0, r5
 800f002:	f7fe fded 	bl	800dbe0 <dhcp_set_state>
    return ERR_OK;
 800f006:	e7d9      	b.n	800efbc <dhcp_start+0x50>
    dhcp_release_and_stop(netif);
 800f008:	4620      	mov	r0, r4
 800f00a:	f7ff ff2d 	bl	800ee68 <dhcp_release_and_stop>
    return ERR_MEM;
 800f00e:	f04f 36ff 	mov.w	r6, #4294967295
 800f012:	e7d3      	b.n	800efbc <dhcp_start+0x50>
    return ERR_MEM;
 800f014:	f04f 36ff 	mov.w	r6, #4294967295
 800f018:	e7d0      	b.n	800efbc <dhcp_start+0x50>
      return ERR_MEM;
 800f01a:	f04f 36ff 	mov.w	r6, #4294967295
 800f01e:	e7cd      	b.n	800efbc <dhcp_start+0x50>
    return ERR_MEM;
 800f020:	f04f 36ff 	mov.w	r6, #4294967295
 800f024:	e7ca      	b.n	800efbc <dhcp_start+0x50>
 800f026:	bf00      	nop
 800f028:	08017c80 	.word	0x08017c80
 800f02c:	080155f8 	.word	0x080155f8
 800f030:	08015608 	.word	0x08015608
 800f034:	08017e24 	.word	0x08017e24

0800f038 <dhcp_coarse_tmr>:
{
 800f038:	b510      	push	{r4, lr}
  NETIF_FOREACH(netif) {
 800f03a:	4b16      	ldr	r3, [pc, #88]	; (800f094 <dhcp_coarse_tmr+0x5c>)
 800f03c:	681c      	ldr	r4, [r3, #0]
 800f03e:	b1c4      	cbz	r4, 800f072 <dhcp_coarse_tmr+0x3a>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f040:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800f044:	b1ab      	cbz	r3, 800f072 <dhcp_coarse_tmr+0x3a>
 800f046:	795a      	ldrb	r2, [r3, #5]
 800f048:	b19a      	cbz	r2, 800f072 <dhcp_coarse_tmr+0x3a>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800f04a:	8a99      	ldrh	r1, [r3, #20]
 800f04c:	b129      	cbz	r1, 800f05a <dhcp_coarse_tmr+0x22>
 800f04e:	8a5a      	ldrh	r2, [r3, #18]
 800f050:	3201      	adds	r2, #1
 800f052:	b292      	uxth	r2, r2
 800f054:	825a      	strh	r2, [r3, #18]
 800f056:	4291      	cmp	r1, r2
 800f058:	d00c      	beq.n	800f074 <dhcp_coarse_tmr+0x3c>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800f05a:	8a1a      	ldrh	r2, [r3, #16]
 800f05c:	b11a      	cbz	r2, 800f066 <dhcp_coarse_tmr+0x2e>
 800f05e:	1e51      	subs	r1, r2, #1
 800f060:	8219      	strh	r1, [r3, #16]
 800f062:	2a01      	cmp	r2, #1
 800f064:	d00d      	beq.n	800f082 <dhcp_coarse_tmr+0x4a>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800f066:	89da      	ldrh	r2, [r3, #14]
 800f068:	b11a      	cbz	r2, 800f072 <dhcp_coarse_tmr+0x3a>
 800f06a:	1e51      	subs	r1, r2, #1
 800f06c:	81d9      	strh	r1, [r3, #14]
 800f06e:	2a01      	cmp	r2, #1
 800f070:	d00b      	beq.n	800f08a <dhcp_coarse_tmr+0x52>
}
 800f072:	bd10      	pop	{r4, pc}
        dhcp_release_and_stop(netif);
 800f074:	4620      	mov	r0, r4
 800f076:	f7ff fef7 	bl	800ee68 <dhcp_release_and_stop>
        dhcp_start(netif);
 800f07a:	4620      	mov	r0, r4
 800f07c:	f7ff ff76 	bl	800ef6c <dhcp_start>
 800f080:	e7f7      	b.n	800f072 <dhcp_coarse_tmr+0x3a>
        dhcp_t2_timeout(netif);
 800f082:	4620      	mov	r0, r4
 800f084:	f7fe ff60 	bl	800df48 <dhcp_t2_timeout>
 800f088:	e7f3      	b.n	800f072 <dhcp_coarse_tmr+0x3a>
        dhcp_t1_timeout(netif);
 800f08a:	4620      	mov	r0, r4
 800f08c:	f7ff febc 	bl	800ee08 <dhcp_t1_timeout>
}
 800f090:	e7ef      	b.n	800f072 <dhcp_coarse_tmr+0x3a>
 800f092:	bf00      	nop
 800f094:	20008c38 	.word	0x20008c38

0800f098 <dhcp_timeout>:
{
 800f098:	b510      	push	{r4, lr}
 800f09a:	4604      	mov	r4, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f09c:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800f0a0:	7953      	ldrb	r3, [r2, #5]
 800f0a2:	2b0c      	cmp	r3, #12
 800f0a4:	d00d      	beq.n	800f0c2 <dhcp_timeout+0x2a>
 800f0a6:	2b06      	cmp	r3, #6
 800f0a8:	d00b      	beq.n	800f0c2 <dhcp_timeout+0x2a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	d00d      	beq.n	800f0ca <dhcp_timeout+0x32>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800f0ae:	2b08      	cmp	r3, #8
 800f0b0:	d017      	beq.n	800f0e2 <dhcp_timeout+0x4a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800f0b2:	2b03      	cmp	r3, #3
 800f0b4:	d108      	bne.n	800f0c8 <dhcp_timeout+0x30>
    if (dhcp->tries < REBOOT_TRIES) {
 800f0b6:	7993      	ldrb	r3, [r2, #6]
 800f0b8:	2b01      	cmp	r3, #1
 800f0ba:	d91b      	bls.n	800f0f4 <dhcp_timeout+0x5c>
      dhcp_discover(netif);
 800f0bc:	f7ff f8cc 	bl	800e258 <dhcp_discover>
}
 800f0c0:	e002      	b.n	800f0c8 <dhcp_timeout+0x30>
    dhcp_discover(netif);
 800f0c2:	4620      	mov	r0, r4
 800f0c4:	f7ff f8c8 	bl	800e258 <dhcp_discover>
}
 800f0c8:	bd10      	pop	{r4, pc}
    if (dhcp->tries <= 5) {
 800f0ca:	7993      	ldrb	r3, [r2, #6]
 800f0cc:	2b05      	cmp	r3, #5
 800f0ce:	d802      	bhi.n	800f0d6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800f0d0:	f7fe ffde 	bl	800e090 <dhcp_select>
 800f0d4:	e7f8      	b.n	800f0c8 <dhcp_timeout+0x30>
      dhcp_release_and_stop(netif);
 800f0d6:	f7ff fec7 	bl	800ee68 <dhcp_release_and_stop>
      dhcp_start(netif);
 800f0da:	4620      	mov	r0, r4
 800f0dc:	f7ff ff46 	bl	800ef6c <dhcp_start>
 800f0e0:	e7f2      	b.n	800f0c8 <dhcp_timeout+0x30>
    if (dhcp->tries <= 1) {
 800f0e2:	7993      	ldrb	r3, [r2, #6]
 800f0e4:	2b01      	cmp	r3, #1
 800f0e6:	d902      	bls.n	800f0ee <dhcp_timeout+0x56>
      dhcp_bind(netif);
 800f0e8:	f7ff f998 	bl	800e41c <dhcp_bind>
 800f0ec:	e7ec      	b.n	800f0c8 <dhcp_timeout+0x30>
      dhcp_check(netif);
 800f0ee:	f7ff f97f 	bl	800e3f0 <dhcp_check>
 800f0f2:	e7e9      	b.n	800f0c8 <dhcp_timeout+0x30>
      dhcp_reboot(netif);
 800f0f4:	f7fe ff42 	bl	800df7c <dhcp_reboot>
 800f0f8:	e7e6      	b.n	800f0c8 <dhcp_timeout+0x30>
	...

0800f0fc <dhcp_fine_tmr>:
{
 800f0fc:	b508      	push	{r3, lr}
  NETIF_FOREACH(netif) {
 800f0fe:	4b09      	ldr	r3, [pc, #36]	; (800f124 <dhcp_fine_tmr+0x28>)
 800f100:	6818      	ldr	r0, [r3, #0]
 800f102:	b138      	cbz	r0, 800f114 <dhcp_fine_tmr+0x18>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f104:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
    if (dhcp != NULL) {
 800f108:	b122      	cbz	r2, 800f114 <dhcp_fine_tmr+0x18>
      if (dhcp->request_timeout > 1) {
 800f10a:	8913      	ldrh	r3, [r2, #8]
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	d902      	bls.n	800f116 <dhcp_fine_tmr+0x1a>
        dhcp->request_timeout--;
 800f110:	3b01      	subs	r3, #1
 800f112:	8113      	strh	r3, [r2, #8]
}
 800f114:	bd08      	pop	{r3, pc}
      } else if (dhcp->request_timeout == 1) {
 800f116:	2b01      	cmp	r3, #1
 800f118:	d1fc      	bne.n	800f114 <dhcp_fine_tmr+0x18>
        dhcp->request_timeout--;
 800f11a:	3b01      	subs	r3, #1
 800f11c:	8113      	strh	r3, [r2, #8]
        dhcp_timeout(netif);
 800f11e:	f7ff ffbb 	bl	800f098 <dhcp_timeout>
}
 800f122:	e7f7      	b.n	800f114 <dhcp_fine_tmr+0x18>
 800f124:	20008c38 	.word	0x20008c38

0800f128 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f128:	b510      	push	{r4, lr}
 800f12a:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f12c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800f130:	00d3      	lsls	r3, r2, #3
 800f132:	4a0f      	ldr	r2, [pc, #60]	; (800f170 <etharp_free_entry+0x48>)
 800f134:	58d0      	ldr	r0, [r2, r3]
 800f136:	b138      	cbz	r0, 800f148 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f138:	f7f9 faf6 	bl	8008728 <pbuf_free>
    arp_table[i].q = NULL;
 800f13c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800f140:	00d3      	lsls	r3, r2, #3
 800f142:	4a0b      	ldr	r2, [pc, #44]	; (800f170 <etharp_free_entry+0x48>)
 800f144:	2100      	movs	r1, #0
 800f146:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f148:	4a09      	ldr	r2, [pc, #36]	; (800f170 <etharp_free_entry+0x48>)
 800f14a:	0061      	lsls	r1, r4, #1
 800f14c:	1908      	adds	r0, r1, r4
 800f14e:	00c3      	lsls	r3, r0, #3
 800f150:	4413      	add	r3, r2
 800f152:	2000      	movs	r0, #0
 800f154:	7518      	strb	r0, [r3, #20]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 800f156:	8258      	strh	r0, [r3, #18]
  arp_table[i].netif = NULL;
 800f158:	6098      	str	r0, [r3, #8]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 800f15a:	6058      	str	r0, [r3, #4]
  arp_table[i].ethaddr = ethzero;
 800f15c:	440c      	add	r4, r1
 800f15e:	00e3      	lsls	r3, r4, #3
 800f160:	4413      	add	r3, r2
 800f162:	4a04      	ldr	r2, [pc, #16]	; (800f174 <etharp_free_entry+0x4c>)
 800f164:	6810      	ldr	r0, [r2, #0]
 800f166:	60d8      	str	r0, [r3, #12]
 800f168:	8892      	ldrh	r2, [r2, #4]
 800f16a:	821a      	strh	r2, [r3, #16]
#endif /* LWIP_DEBUG */
}
 800f16c:	bd10      	pop	{r4, pc}
 800f16e:	bf00      	nop
 800f170:	20001788 	.word	0x20001788
 800f174:	080187c0 	.word	0x080187c0

0800f178 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f17c:	f04f 0c00 	mov.w	ip, #0
 800f180:	46e2      	mov	sl, ip
 800f182:	46e1      	mov	r9, ip
  s16_t old_queue = ARP_TABLE_SIZE;
 800f184:	f04f 0e0a 	mov.w	lr, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f188:	4663      	mov	r3, ip
  s16_t empty = ARP_TABLE_SIZE;
 800f18a:	4675      	mov	r5, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f18c:	46f0      	mov	r8, lr
 800f18e:	46f3      	mov	fp, lr
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f190:	e003      	b.n	800f19a <etharp_find_entry+0x22>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f192:	b96c      	cbnz	r4, 800f1b0 <etharp_find_entry+0x38>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f194:	461d      	mov	r5, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f196:	3301      	adds	r3, #1
 800f198:	b21b      	sxth	r3, r3
 800f19a:	2b09      	cmp	r3, #9
 800f19c:	dc40      	bgt.n	800f220 <etharp_find_entry+0xa8>
    u8_t state = arp_table[i].state;
 800f19e:	461a      	mov	r2, r3
 800f1a0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800f1a4:	00e6      	lsls	r6, r4, #3
 800f1a6:	4c55      	ldr	r4, [pc, #340]	; (800f2fc <etharp_find_entry+0x184>)
 800f1a8:	4434      	add	r4, r6
 800f1aa:	7d24      	ldrb	r4, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f1ac:	2d0a      	cmp	r5, #10
 800f1ae:	d0f0      	beq.n	800f192 <etharp_find_entry+0x1a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f1b0:	2c00      	cmp	r4, #0
 800f1b2:	d0f0      	beq.n	800f196 <etharp_find_entry+0x1e>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f1b4:	b148      	cbz	r0, 800f1ca <etharp_find_entry+0x52>
 800f1b6:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 800f1ba:	00f7      	lsls	r7, r6, #3
 800f1bc:	4e4f      	ldr	r6, [pc, #316]	; (800f2fc <etharp_find_entry+0x184>)
 800f1be:	443e      	add	r6, r7
 800f1c0:	6876      	ldr	r6, [r6, #4]
 800f1c2:	6807      	ldr	r7, [r0, #0]
 800f1c4:	42b7      	cmp	r7, r6
 800f1c6:	f000 8090 	beq.w	800f2ea <etharp_find_entry+0x172>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f1ca:	2c01      	cmp	r4, #1
 800f1cc:	d00c      	beq.n	800f1e8 <etharp_find_entry+0x70>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f1ce:	2c01      	cmp	r4, #1
 800f1d0:	d9e1      	bls.n	800f196 <etharp_find_entry+0x1e>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f1d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f1d6:	00d4      	lsls	r4, r2, #3
 800f1d8:	4a48      	ldr	r2, [pc, #288]	; (800f2fc <etharp_find_entry+0x184>)
 800f1da:	4422      	add	r2, r4
 800f1dc:	8a52      	ldrh	r2, [r2, #18]
 800f1de:	4562      	cmp	r2, ip
 800f1e0:	d3d9      	bcc.n	800f196 <etharp_find_entry+0x1e>
            old_stable = i;
            age_stable = arp_table[i].ctime;
 800f1e2:	4694      	mov	ip, r2
            old_stable = i;
 800f1e4:	4698      	mov	r8, r3
 800f1e6:	e7d6      	b.n	800f196 <etharp_find_entry+0x1e>
        if (arp_table[i].q != NULL) {
 800f1e8:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 800f1ec:	00f4      	lsls	r4, r6, #3
 800f1ee:	4e43      	ldr	r6, [pc, #268]	; (800f2fc <etharp_find_entry+0x184>)
 800f1f0:	5934      	ldr	r4, [r6, r4]
 800f1f2:	b154      	cbz	r4, 800f20a <etharp_find_entry+0x92>
          if (arp_table[i].ctime >= age_queue) {
 800f1f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f1f8:	00d4      	lsls	r4, r2, #3
 800f1fa:	4632      	mov	r2, r6
 800f1fc:	4422      	add	r2, r4
 800f1fe:	8a52      	ldrh	r2, [r2, #18]
 800f200:	454a      	cmp	r2, r9
 800f202:	d3c8      	bcc.n	800f196 <etharp_find_entry+0x1e>
            age_queue = arp_table[i].ctime;
 800f204:	4691      	mov	r9, r2
            old_queue = i;
 800f206:	469e      	mov	lr, r3
 800f208:	e7c5      	b.n	800f196 <etharp_find_entry+0x1e>
          if (arp_table[i].ctime >= age_pending) {
 800f20a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f20e:	00d4      	lsls	r4, r2, #3
 800f210:	4a3a      	ldr	r2, [pc, #232]	; (800f2fc <etharp_find_entry+0x184>)
 800f212:	4422      	add	r2, r4
 800f214:	8a52      	ldrh	r2, [r2, #18]
 800f216:	4552      	cmp	r2, sl
 800f218:	d3bd      	bcc.n	800f196 <etharp_find_entry+0x1e>
            age_pending = arp_table[i].ctime;
 800f21a:	4692      	mov	sl, r2
            old_pending = i;
 800f21c:	469b      	mov	fp, r3
 800f21e:	e7ba      	b.n	800f196 <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f220:	f011 0f02 	tst.w	r1, #2
 800f224:	d163      	bne.n	800f2ee <etharp_find_entry+0x176>
 800f226:	2d0a      	cmp	r5, #10
 800f228:	d035      	beq.n	800f296 <etharp_find_entry+0x11e>
 800f22a:	4606      	mov	r6, r0
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f22c:	2d09      	cmp	r5, #9
 800f22e:	dd16      	ble.n	800f25e <etharp_find_entry+0xe6>
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f230:	f1b8 0f09 	cmp.w	r8, #9
 800f234:	dc35      	bgt.n	800f2a2 <etharp_find_entry+0x12a>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f236:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 800f23a:	00d3      	lsls	r3, r2, #3
 800f23c:	4a2f      	ldr	r2, [pc, #188]	; (800f2fc <etharp_find_entry+0x184>)
 800f23e:	58d3      	ldr	r3, [r2, r3]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d036      	beq.n	800f2b2 <etharp_find_entry+0x13a>
 800f244:	4b2e      	ldr	r3, [pc, #184]	; (800f300 <etharp_find_entry+0x188>)
 800f246:	f240 126d 	movw	r2, #365	; 0x16d
 800f24a:	492e      	ldr	r1, [pc, #184]	; (800f304 <etharp_find_entry+0x18c>)
 800f24c:	482e      	ldr	r0, [pc, #184]	; (800f308 <etharp_find_entry+0x190>)
 800f24e:	f005 f9d1 	bl	80145f4 <iprintf>
      i = old_stable;
 800f252:	4645      	mov	r5, r8
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f254:	2d09      	cmp	r5, #9
 800f256:	dc30      	bgt.n	800f2ba <etharp_find_entry+0x142>
    etharp_free_entry(i);
 800f258:	4628      	mov	r0, r5
 800f25a:	f7ff ff65 	bl	800f128 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f25e:	2d09      	cmp	r5, #9
 800f260:	dc33      	bgt.n	800f2ca <etharp_find_entry+0x152>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f262:	462c      	mov	r4, r5
 800f264:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800f268:	00da      	lsls	r2, r3, #3
 800f26a:	4b24      	ldr	r3, [pc, #144]	; (800f2fc <etharp_find_entry+0x184>)
 800f26c:	4413      	add	r3, r2
 800f26e:	7d1b      	ldrb	r3, [r3, #20]
 800f270:	bb9b      	cbnz	r3, 800f2da <etharp_find_entry+0x162>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f272:	b136      	cbz	r6, 800f282 <etharp_find_entry+0x10a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f274:	6831      	ldr	r1, [r6, #0]
 800f276:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f27a:	00da      	lsls	r2, r3, #3
 800f27c:	4b1f      	ldr	r3, [pc, #124]	; (800f2fc <etharp_find_entry+0x184>)
 800f27e:	4413      	add	r3, r2
 800f280:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800f282:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800f286:	00e2      	lsls	r2, r4, #3
 800f288:	4b1c      	ldr	r3, [pc, #112]	; (800f2fc <etharp_find_entry+0x184>)
 800f28a:	4413      	add	r3, r2
 800f28c:	2200      	movs	r2, #0
 800f28e:	825a      	strh	r2, [r3, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800f290:	4628      	mov	r0, r5
 800f292:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f296:	f011 0f01 	tst.w	r1, #1
 800f29a:	d1c6      	bne.n	800f22a <etharp_find_entry+0xb2>
    return (s16_t)ERR_MEM;
 800f29c:	f04f 35ff 	mov.w	r5, #4294967295
 800f2a0:	e7f6      	b.n	800f290 <etharp_find_entry+0x118>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f2a2:	f1bb 0f09 	cmp.w	fp, #9
 800f2a6:	dd06      	ble.n	800f2b6 <etharp_find_entry+0x13e>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f2a8:	f1be 0f09 	cmp.w	lr, #9
 800f2ac:	dc22      	bgt.n	800f2f4 <etharp_find_entry+0x17c>
      i = old_queue;
 800f2ae:	4675      	mov	r5, lr
 800f2b0:	e7d0      	b.n	800f254 <etharp_find_entry+0xdc>
      i = old_stable;
 800f2b2:	4645      	mov	r5, r8
 800f2b4:	e7ce      	b.n	800f254 <etharp_find_entry+0xdc>
      i = old_pending;
 800f2b6:	465d      	mov	r5, fp
 800f2b8:	e7cc      	b.n	800f254 <etharp_find_entry+0xdc>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f2ba:	4b11      	ldr	r3, [pc, #68]	; (800f300 <etharp_find_entry+0x188>)
 800f2bc:	f240 127f 	movw	r2, #383	; 0x17f
 800f2c0:	4912      	ldr	r1, [pc, #72]	; (800f30c <etharp_find_entry+0x194>)
 800f2c2:	4811      	ldr	r0, [pc, #68]	; (800f308 <etharp_find_entry+0x190>)
 800f2c4:	f005 f996 	bl	80145f4 <iprintf>
 800f2c8:	e7c6      	b.n	800f258 <etharp_find_entry+0xe0>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f2ca:	4b0d      	ldr	r3, [pc, #52]	; (800f300 <etharp_find_entry+0x188>)
 800f2cc:	f240 1283 	movw	r2, #387	; 0x183
 800f2d0:	490e      	ldr	r1, [pc, #56]	; (800f30c <etharp_find_entry+0x194>)
 800f2d2:	480d      	ldr	r0, [pc, #52]	; (800f308 <etharp_find_entry+0x190>)
 800f2d4:	f005 f98e 	bl	80145f4 <iprintf>
 800f2d8:	e7c3      	b.n	800f262 <etharp_find_entry+0xea>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f2da:	4b09      	ldr	r3, [pc, #36]	; (800f300 <etharp_find_entry+0x188>)
 800f2dc:	f240 1285 	movw	r2, #389	; 0x185
 800f2e0:	490b      	ldr	r1, [pc, #44]	; (800f310 <etharp_find_entry+0x198>)
 800f2e2:	4809      	ldr	r0, [pc, #36]	; (800f308 <etharp_find_entry+0x190>)
 800f2e4:	f005 f986 	bl	80145f4 <iprintf>
 800f2e8:	e7c3      	b.n	800f272 <etharp_find_entry+0xfa>
        return i;
 800f2ea:	461d      	mov	r5, r3
 800f2ec:	e7d0      	b.n	800f290 <etharp_find_entry+0x118>
    return (s16_t)ERR_MEM;
 800f2ee:	f04f 35ff 	mov.w	r5, #4294967295
 800f2f2:	e7cd      	b.n	800f290 <etharp_find_entry+0x118>
      return (s16_t)ERR_MEM;
 800f2f4:	f04f 35ff 	mov.w	r5, #4294967295
 800f2f8:	e7ca      	b.n	800f290 <etharp_find_entry+0x118>
 800f2fa:	bf00      	nop
 800f2fc:	20001788 	.word	0x20001788
 800f300:	08017e48 	.word	0x08017e48
 800f304:	08017e80 	.word	0x08017e80
 800f308:	08015608 	.word	0x08015608
 800f30c:	08017e98 	.word	0x08017e98
 800f310:	08017eac 	.word	0x08017eac

0800f314 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f316:	b083      	sub	sp, #12
 800f318:	4605      	mov	r5, r0
 800f31a:	460c      	mov	r4, r1
 800f31c:	4616      	mov	r6, r2
 800f31e:	461f      	mov	r7, r3
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f320:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
 800f324:	2b06      	cmp	r3, #6
 800f326:	d13a      	bne.n	800f39e <etharp_update_arp_entry+0x8a>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f328:	2c00      	cmp	r4, #0
 800f32a:	d043      	beq.n	800f3b4 <etharp_update_arp_entry+0xa0>
 800f32c:	6820      	ldr	r0, [r4, #0]
 800f32e:	2800      	cmp	r0, #0
 800f330:	d043      	beq.n	800f3ba <etharp_update_arp_entry+0xa6>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f332:	4629      	mov	r1, r5
 800f334:	f001 f868 	bl	8010408 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800f338:	2800      	cmp	r0, #0
 800f33a:	d141      	bne.n	800f3c0 <etharp_update_arp_entry+0xac>
      ip4_addr_ismulticast(ipaddr)) {
 800f33c:	6823      	ldr	r3, [r4, #0]
 800f33e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f342:	2be0      	cmp	r3, #224	; 0xe0
 800f344:	d03f      	beq.n	800f3c6 <etharp_update_arp_entry+0xb2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f346:	462a      	mov	r2, r5
 800f348:	4639      	mov	r1, r7
 800f34a:	4620      	mov	r0, r4
 800f34c:	f7ff ff14 	bl	800f178 <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 800f350:	2800      	cmp	r0, #0
 800f352:	db2c      	blt.n	800f3ae <etharp_update_arp_entry+0x9a>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f354:	4c1e      	ldr	r4, [pc, #120]	; (800f3d0 <etharp_update_arp_entry+0xbc>)
 800f356:	0042      	lsls	r2, r0, #1
 800f358:	1813      	adds	r3, r2, r0
 800f35a:	00d9      	lsls	r1, r3, #3
 800f35c:	1867      	adds	r7, r4, r1
 800f35e:	2302      	movs	r3, #2
 800f360:	753b      	strb	r3, [r7, #20]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f362:	60bd      	str	r5, [r7, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f364:	460b      	mov	r3, r1
 800f366:	3308      	adds	r3, #8
 800f368:	4423      	add	r3, r4
 800f36a:	6832      	ldr	r2, [r6, #0]
 800f36c:	605a      	str	r2, [r3, #4]
 800f36e:	88b2      	ldrh	r2, [r6, #4]
 800f370:	811a      	strh	r2, [r3, #8]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f372:	2300      	movs	r3, #0
 800f374:	827b      	strh	r3, [r7, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f376:	5867      	ldr	r7, [r4, r1]
 800f378:	b347      	cbz	r7, 800f3cc <etharp_update_arp_entry+0xb8>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 800f37a:	2400      	movs	r4, #0
 800f37c:	4a14      	ldr	r2, [pc, #80]	; (800f3d0 <etharp_update_arp_entry+0xbc>)
 800f37e:	5054      	str	r4, [r2, r1]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f380:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f384:	9300      	str	r3, [sp, #0]
 800f386:	4633      	mov	r3, r6
 800f388:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
 800f38c:	4639      	mov	r1, r7
 800f38e:	4628      	mov	r0, r5
 800f390:	f005 f878 	bl	8014484 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f394:	4638      	mov	r0, r7
 800f396:	f7f9 f9c7 	bl	8008728 <pbuf_free>
  }
  return ERR_OK;
 800f39a:	4620      	mov	r0, r4
 800f39c:	e008      	b.n	800f3b0 <etharp_update_arp_entry+0x9c>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f39e:	4b0d      	ldr	r3, [pc, #52]	; (800f3d4 <etharp_update_arp_entry+0xc0>)
 800f3a0:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f3a4:	490c      	ldr	r1, [pc, #48]	; (800f3d8 <etharp_update_arp_entry+0xc4>)
 800f3a6:	480d      	ldr	r0, [pc, #52]	; (800f3dc <etharp_update_arp_entry+0xc8>)
 800f3a8:	f005 f924 	bl	80145f4 <iprintf>
 800f3ac:	e7bc      	b.n	800f328 <etharp_update_arp_entry+0x14>
    return (err_t)i;
 800f3ae:	b240      	sxtb	r0, r0
}
 800f3b0:	b003      	add	sp, #12
 800f3b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
 800f3b4:	f06f 000f 	mvn.w	r0, #15
 800f3b8:	e7fa      	b.n	800f3b0 <etharp_update_arp_entry+0x9c>
 800f3ba:	f06f 000f 	mvn.w	r0, #15
 800f3be:	e7f7      	b.n	800f3b0 <etharp_update_arp_entry+0x9c>
 800f3c0:	f06f 000f 	mvn.w	r0, #15
 800f3c4:	e7f4      	b.n	800f3b0 <etharp_update_arp_entry+0x9c>
 800f3c6:	f06f 000f 	mvn.w	r0, #15
 800f3ca:	e7f1      	b.n	800f3b0 <etharp_update_arp_entry+0x9c>
  return ERR_OK;
 800f3cc:	2000      	movs	r0, #0
 800f3ce:	e7ef      	b.n	800f3b0 <etharp_update_arp_entry+0x9c>
 800f3d0:	20001788 	.word	0x20001788
 800f3d4:	08017e48 	.word	0x08017e48
 800f3d8:	08018000 	.word	0x08018000
 800f3dc:	08015608 	.word	0x08015608

0800f3e0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3e4:	b082      	sub	sp, #8
 800f3e6:	4689      	mov	r9, r1
 800f3e8:	4692      	mov	sl, r2
 800f3ea:	4698      	mov	r8, r3
 800f3ec:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f3ee:	4607      	mov	r7, r0
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	d042      	beq.n	800f47a <etharp_raw+0x9a>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f3f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f3f8:	211c      	movs	r1, #28
 800f3fa:	200e      	movs	r0, #14
 800f3fc:	f7f9 f9f6 	bl	80087ec <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f400:	4606      	mov	r6, r0
 800f402:	2800      	cmp	r0, #0
 800f404:	d051      	beq.n	800f4aa <etharp_raw+0xca>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f406:	8943      	ldrh	r3, [r0, #10]
 800f408:	2b1b      	cmp	r3, #27
 800f40a:	d93e      	bls.n	800f48a <etharp_raw+0xaa>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f40c:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f40e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800f412:	f7f7 feeb 	bl	80071ec <lwip_htons>
 800f416:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f418:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 800f41c:	2b06      	cmp	r3, #6
 800f41e:	d13c      	bne.n	800f49a <etharp_raw+0xba>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f420:	f8d8 3000 	ldr.w	r3, [r8]
 800f424:	60a3      	str	r3, [r4, #8]
 800f426:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800f42a:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f42c:	682b      	ldr	r3, [r5, #0]
 800f42e:	f8c4 3012 	str.w	r3, [r4, #18]
 800f432:	88ab      	ldrh	r3, [r5, #4]
 800f434:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f43e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f444:	2500      	movs	r5, #0
 800f446:	7025      	strb	r5, [r4, #0]
 800f448:	2301      	movs	r3, #1
 800f44a:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f44c:	2308      	movs	r3, #8
 800f44e:	70a3      	strb	r3, [r4, #2]
 800f450:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f452:	2306      	movs	r3, #6
 800f454:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f456:	2304      	movs	r3, #4
 800f458:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f45a:	f640 0306 	movw	r3, #2054	; 0x806
 800f45e:	9300      	str	r3, [sp, #0]
 800f460:	4653      	mov	r3, sl
 800f462:	464a      	mov	r2, r9
 800f464:	4631      	mov	r1, r6
 800f466:	4638      	mov	r0, r7
 800f468:	f005 f80c 	bl	8014484 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f46c:	4630      	mov	r0, r6
 800f46e:	f7f9 f95b 	bl	8008728 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800f472:	4628      	mov	r0, r5
}
 800f474:	b002      	add	sp, #8
 800f476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f47a:	4b0d      	ldr	r3, [pc, #52]	; (800f4b0 <etharp_raw+0xd0>)
 800f47c:	f240 4257 	movw	r2, #1111	; 0x457
 800f480:	490c      	ldr	r1, [pc, #48]	; (800f4b4 <etharp_raw+0xd4>)
 800f482:	480d      	ldr	r0, [pc, #52]	; (800f4b8 <etharp_raw+0xd8>)
 800f484:	f005 f8b6 	bl	80145f4 <iprintf>
 800f488:	e7b4      	b.n	800f3f4 <etharp_raw+0x14>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f48a:	4b09      	ldr	r3, [pc, #36]	; (800f4b0 <etharp_raw+0xd0>)
 800f48c:	f240 4263 	movw	r2, #1123	; 0x463
 800f490:	490a      	ldr	r1, [pc, #40]	; (800f4bc <etharp_raw+0xdc>)
 800f492:	4809      	ldr	r0, [pc, #36]	; (800f4b8 <etharp_raw+0xd8>)
 800f494:	f005 f8ae 	bl	80145f4 <iprintf>
 800f498:	e7b8      	b.n	800f40c <etharp_raw+0x2c>
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f49a:	4b05      	ldr	r3, [pc, #20]	; (800f4b0 <etharp_raw+0xd0>)
 800f49c:	f240 426a 	movw	r2, #1130	; 0x46a
 800f4a0:	4907      	ldr	r1, [pc, #28]	; (800f4c0 <etharp_raw+0xe0>)
 800f4a2:	4805      	ldr	r0, [pc, #20]	; (800f4b8 <etharp_raw+0xd8>)
 800f4a4:	f005 f8a6 	bl	80145f4 <iprintf>
 800f4a8:	e7ba      	b.n	800f420 <etharp_raw+0x40>
    return ERR_MEM;
 800f4aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f4ae:	e7e1      	b.n	800f474 <etharp_raw+0x94>
 800f4b0:	08017e48 	.word	0x08017e48
 800f4b4:	080155f8 	.word	0x080155f8
 800f4b8:	08015608 	.word	0x08015608
 800f4bc:	08017f88 	.word	0x08017f88
 800f4c0:	08017fbc 	.word	0x08017fbc

0800f4c4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f4c4:	b530      	push	{r4, r5, lr}
 800f4c6:	b085      	sub	sp, #20
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f4c8:	f100 04bc 	add.w	r4, r0, #188	; 0xbc
 800f4cc:	2501      	movs	r5, #1
 800f4ce:	9503      	str	r5, [sp, #12]
 800f4d0:	9102      	str	r1, [sp, #8]
 800f4d2:	4904      	ldr	r1, [pc, #16]	; (800f4e4 <etharp_request_dst+0x20>)
 800f4d4:	9101      	str	r1, [sp, #4]
 800f4d6:	9000      	str	r0, [sp, #0]
 800f4d8:	4623      	mov	r3, r4
 800f4da:	4621      	mov	r1, r4
 800f4dc:	f7ff ff80 	bl	800f3e0 <etharp_raw>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
                    ipaddr, ARP_REQUEST);
}
 800f4e0:	b005      	add	sp, #20
 800f4e2:	bd30      	pop	{r4, r5, pc}
 800f4e4:	080187c0 	.word	0x080187c0

0800f4e8 <etharp_cleanup_netif>:
{
 800f4e8:	b538      	push	{r3, r4, r5, lr}
 800f4ea:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f4ec:	2400      	movs	r4, #0
 800f4ee:	e000      	b.n	800f4f2 <etharp_cleanup_netif+0xa>
 800f4f0:	3401      	adds	r4, #1
 800f4f2:	2c09      	cmp	r4, #9
 800f4f4:	dc10      	bgt.n	800f518 <etharp_cleanup_netif+0x30>
    u8_t state = arp_table[i].state;
 800f4f6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f4fa:	00da      	lsls	r2, r3, #3
 800f4fc:	4b07      	ldr	r3, [pc, #28]	; (800f51c <etharp_cleanup_netif+0x34>)
 800f4fe:	4413      	add	r3, r2
 800f500:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f502:	2b00      	cmp	r3, #0
 800f504:	d0f4      	beq.n	800f4f0 <etharp_cleanup_netif+0x8>
 800f506:	4b05      	ldr	r3, [pc, #20]	; (800f51c <etharp_cleanup_netif+0x34>)
 800f508:	4413      	add	r3, r2
 800f50a:	689b      	ldr	r3, [r3, #8]
 800f50c:	42ab      	cmp	r3, r5
 800f50e:	d1ef      	bne.n	800f4f0 <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 800f510:	4620      	mov	r0, r4
 800f512:	f7ff fe09 	bl	800f128 <etharp_free_entry>
 800f516:	e7eb      	b.n	800f4f0 <etharp_cleanup_netif+0x8>
}
 800f518:	bd38      	pop	{r3, r4, r5, pc}
 800f51a:	bf00      	nop
 800f51c:	20001788 	.word	0x20001788

0800f520 <etharp_input>:
{
 800f520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f524:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f526:	b179      	cbz	r1, 800f548 <etharp_input+0x28>
 800f528:	4604      	mov	r4, r0
 800f52a:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 800f52c:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f52e:	882b      	ldrh	r3, [r5, #0]
 800f530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f534:	d102      	bne.n	800f53c <etharp_input+0x1c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f536:	792b      	ldrb	r3, [r5, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f538:	2b06      	cmp	r3, #6
 800f53a:	d00d      	beq.n	800f558 <etharp_input+0x38>
    pbuf_free(p);
 800f53c:	4620      	mov	r0, r4
 800f53e:	f7f9 f8f3 	bl	8008728 <pbuf_free>
}
 800f542:	b006      	add	sp, #24
 800f544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f548:	4b24      	ldr	r3, [pc, #144]	; (800f5dc <etharp_input+0xbc>)
 800f54a:	f240 228a 	movw	r2, #650	; 0x28a
 800f54e:	4924      	ldr	r1, [pc, #144]	; (800f5e0 <etharp_input+0xc0>)
 800f550:	4824      	ldr	r0, [pc, #144]	; (800f5e4 <etharp_input+0xc4>)
 800f552:	f005 f84f 	bl	80145f4 <iprintf>
 800f556:	e7f4      	b.n	800f542 <etharp_input+0x22>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f558:	796b      	ldrb	r3, [r5, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f55a:	2b04      	cmp	r3, #4
 800f55c:	d1ee      	bne.n	800f53c <etharp_input+0x1c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f55e:	886b      	ldrh	r3, [r5, #2]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f560:	2b08      	cmp	r3, #8
 800f562:	d1eb      	bne.n	800f53c <etharp_input+0x1c>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f564:	f8d5 300e 	ldr.w	r3, [r5, #14]
 800f568:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f56a:	69af      	ldr	r7, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f56c:	680b      	ldr	r3, [r1, #0]
 800f56e:	b99b      	cbnz	r3, 800f598 <etharp_input+0x78>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f570:	f105 0808 	add.w	r8, r5, #8
    for_us = 0;
 800f574:	2700      	movs	r7, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f576:	2302      	movs	r3, #2
 800f578:	4642      	mov	r2, r8
 800f57a:	a905      	add	r1, sp, #20
 800f57c:	4630      	mov	r0, r6
 800f57e:	f7ff fec9 	bl	800f314 <etharp_update_arp_entry>
  switch (hdr->opcode) {
 800f582:	88eb      	ldrh	r3, [r5, #6]
 800f584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f588:	d011      	beq.n	800f5ae <etharp_input+0x8e>
 800f58a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f58e:	d01f      	beq.n	800f5d0 <etharp_input+0xb0>
  pbuf_free(p);
 800f590:	4620      	mov	r0, r4
 800f592:	f7f9 f8c9 	bl	8008728 <pbuf_free>
 800f596:	e7d4      	b.n	800f542 <etharp_input+0x22>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f598:	42bb      	cmp	r3, r7
 800f59a:	bf14      	ite	ne
 800f59c:	2700      	movne	r7, #0
 800f59e:	2701      	moveq	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f5a0:	f105 0808 	add.w	r8, r5, #8
 800f5a4:	b10f      	cbz	r7, 800f5aa <etharp_input+0x8a>
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	e7e6      	b.n	800f578 <etharp_input+0x58>
 800f5aa:	2302      	movs	r3, #2
 800f5ac:	e7e4      	b.n	800f578 <etharp_input+0x58>
      if (for_us) {
 800f5ae:	2f00      	cmp	r7, #0
 800f5b0:	d0ee      	beq.n	800f590 <etharp_input+0x70>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f5b2:	f106 01bc 	add.w	r1, r6, #188	; 0xbc
        etharp_raw(netif,
 800f5b6:	2302      	movs	r3, #2
 800f5b8:	9303      	str	r3, [sp, #12]
 800f5ba:	ab05      	add	r3, sp, #20
 800f5bc:	9302      	str	r3, [sp, #8]
 800f5be:	f8cd 8004 	str.w	r8, [sp, #4]
 800f5c2:	9600      	str	r6, [sp, #0]
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	4642      	mov	r2, r8
 800f5c8:	4630      	mov	r0, r6
 800f5ca:	f7ff ff09 	bl	800f3e0 <etharp_raw>
 800f5ce:	e7df      	b.n	800f590 <etharp_input+0x70>
      dhcp_arp_reply(netif, &sipaddr);
 800f5d0:	a905      	add	r1, sp, #20
 800f5d2:	4630      	mov	r0, r6
 800f5d4:	f7ff fb80 	bl	800ecd8 <dhcp_arp_reply>
      break;
 800f5d8:	e7da      	b.n	800f590 <etharp_input+0x70>
 800f5da:	bf00      	nop
 800f5dc:	08017e48 	.word	0x08017e48
 800f5e0:	080155f8 	.word	0x080155f8
 800f5e4:	08015608 	.word	0x08015608

0800f5e8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f5e8:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f5ea:	4a02      	ldr	r2, [pc, #8]	; (800f5f4 <etharp_request+0xc>)
 800f5ec:	f7ff ff6a 	bl	800f4c4 <etharp_request_dst>
}
 800f5f0:	bd08      	pop	{r3, pc}
 800f5f2:	bf00      	nop
 800f5f4:	0801874c 	.word	0x0801874c

0800f5f8 <etharp_tmr>:
{
 800f5f8:	b510      	push	{r4, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f5fa:	2400      	movs	r4, #0
 800f5fc:	e005      	b.n	800f60a <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f5fe:	2b04      	cmp	r3, #4
 800f600:	d91b      	bls.n	800f63a <etharp_tmr+0x42>
        etharp_free_entry(i);
 800f602:	4620      	mov	r0, r4
 800f604:	f7ff fd90 	bl	800f128 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f608:	3401      	adds	r4, #1
 800f60a:	2c09      	cmp	r4, #9
 800f60c:	dc35      	bgt.n	800f67a <etharp_tmr+0x82>
    u8_t state = arp_table[i].state;
 800f60e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f612:	00da      	lsls	r2, r3, #3
 800f614:	4b19      	ldr	r3, [pc, #100]	; (800f67c <etharp_tmr+0x84>)
 800f616:	4413      	add	r3, r2
 800f618:	7d1a      	ldrb	r2, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 800f61a:	2a00      	cmp	r2, #0
 800f61c:	d0f4      	beq.n	800f608 <etharp_tmr+0x10>
      arp_table[i].ctime++;
 800f61e:	0063      	lsls	r3, r4, #1
 800f620:	4423      	add	r3, r4
 800f622:	00d8      	lsls	r0, r3, #3
 800f624:	4915      	ldr	r1, [pc, #84]	; (800f67c <etharp_tmr+0x84>)
 800f626:	4401      	add	r1, r0
 800f628:	8a4b      	ldrh	r3, [r1, #18]
 800f62a:	3301      	adds	r3, #1
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	824b      	strh	r3, [r1, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f630:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f634:	d2e5      	bcs.n	800f602 <etharp_tmr+0xa>
 800f636:	2a01      	cmp	r2, #1
 800f638:	d0e1      	beq.n	800f5fe <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f63a:	2a03      	cmp	r2, #3
 800f63c:	d00d      	beq.n	800f65a <etharp_tmr+0x62>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f63e:	2a04      	cmp	r2, #4
 800f640:	d013      	beq.n	800f66a <etharp_tmr+0x72>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f642:	2a01      	cmp	r2, #1
 800f644:	d1e0      	bne.n	800f608 <etharp_tmr+0x10>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f646:	0062      	lsls	r2, r4, #1
 800f648:	4422      	add	r2, r4
 800f64a:	00d1      	lsls	r1, r2, #3
 800f64c:	4b0b      	ldr	r3, [pc, #44]	; (800f67c <etharp_tmr+0x84>)
 800f64e:	440b      	add	r3, r1
 800f650:	1d19      	adds	r1, r3, #4
 800f652:	6898      	ldr	r0, [r3, #8]
 800f654:	f7ff ffc8 	bl	800f5e8 <etharp_request>
 800f658:	e7d6      	b.n	800f608 <etharp_tmr+0x10>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f65a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f65e:	00da      	lsls	r2, r3, #3
 800f660:	4b06      	ldr	r3, [pc, #24]	; (800f67c <etharp_tmr+0x84>)
 800f662:	4413      	add	r3, r2
 800f664:	2204      	movs	r2, #4
 800f666:	751a      	strb	r2, [r3, #20]
 800f668:	e7ce      	b.n	800f608 <etharp_tmr+0x10>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f66a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f66e:	00da      	lsls	r2, r3, #3
 800f670:	4b02      	ldr	r3, [pc, #8]	; (800f67c <etharp_tmr+0x84>)
 800f672:	4413      	add	r3, r2
 800f674:	2202      	movs	r2, #2
 800f676:	751a      	strb	r2, [r3, #20]
 800f678:	e7c6      	b.n	800f608 <etharp_tmr+0x10>
}
 800f67a:	bd10      	pop	{r4, pc}
 800f67c:	20001788 	.word	0x20001788

0800f680 <etharp_output_to_arp_index>:
{
 800f680:	b570      	push	{r4, r5, r6, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	4605      	mov	r5, r0
 800f686:	460e      	mov	r6, r1
 800f688:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f68a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800f68e:	00da      	lsls	r2, r3, #3
 800f690:	4b2c      	ldr	r3, [pc, #176]	; (800f744 <etharp_output_to_arp_index+0xc4>)
 800f692:	4413      	add	r3, r2
 800f694:	7d1b      	ldrb	r3, [r3, #20]
 800f696:	2b01      	cmp	r3, #1
 800f698:	d919      	bls.n	800f6ce <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f69a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f69e:	00da      	lsls	r2, r3, #3
 800f6a0:	4b28      	ldr	r3, [pc, #160]	; (800f744 <etharp_output_to_arp_index+0xc4>)
 800f6a2:	4413      	add	r3, r2
 800f6a4:	7d1b      	ldrb	r3, [r3, #20]
 800f6a6:	2b02      	cmp	r3, #2
 800f6a8:	d019      	beq.n	800f6de <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f6aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800f6ae:	00e3      	lsls	r3, r4, #3
 800f6b0:	3308      	adds	r3, #8
 800f6b2:	4a24      	ldr	r2, [pc, #144]	; (800f744 <etharp_output_to_arp_index+0xc4>)
 800f6b4:	4413      	add	r3, r2
 800f6b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f6ba:	9200      	str	r2, [sp, #0]
 800f6bc:	3304      	adds	r3, #4
 800f6be:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
 800f6c2:	4631      	mov	r1, r6
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	f004 fedd 	bl	8014484 <ethernet_output>
}
 800f6ca:	b002      	add	sp, #8
 800f6cc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f6ce:	4b1e      	ldr	r3, [pc, #120]	; (800f748 <etharp_output_to_arp_index+0xc8>)
 800f6d0:	f240 22ef 	movw	r2, #751	; 0x2ef
 800f6d4:	491d      	ldr	r1, [pc, #116]	; (800f74c <etharp_output_to_arp_index+0xcc>)
 800f6d6:	481e      	ldr	r0, [pc, #120]	; (800f750 <etharp_output_to_arp_index+0xd0>)
 800f6d8:	f004 ff8c 	bl	80145f4 <iprintf>
 800f6dc:	e7dd      	b.n	800f69a <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f6de:	4b19      	ldr	r3, [pc, #100]	; (800f744 <etharp_output_to_arp_index+0xc4>)
 800f6e0:	4413      	add	r3, r2
 800f6e2:	8a5b      	ldrh	r3, [r3, #18]
 800f6e4:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f6e8:	d819      	bhi.n	800f71e <etharp_output_to_arp_index+0x9e>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f6ea:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f6ee:	d3dc      	bcc.n	800f6aa <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f6f0:	4a14      	ldr	r2, [pc, #80]	; (800f744 <etharp_output_to_arp_index+0xc4>)
 800f6f2:	0063      	lsls	r3, r4, #1
 800f6f4:	1918      	adds	r0, r3, r4
 800f6f6:	00c1      	lsls	r1, r0, #3
 800f6f8:	4608      	mov	r0, r1
 800f6fa:	4411      	add	r1, r2
 800f6fc:	3008      	adds	r0, #8
 800f6fe:	4402      	add	r2, r0
 800f700:	3204      	adds	r2, #4
 800f702:	3104      	adds	r1, #4
 800f704:	4628      	mov	r0, r5
 800f706:	f7ff fedd 	bl	800f4c4 <etharp_request_dst>
 800f70a:	2800      	cmp	r0, #0
 800f70c:	d1cd      	bne.n	800f6aa <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f70e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f712:	00da      	lsls	r2, r3, #3
 800f714:	4b0b      	ldr	r3, [pc, #44]	; (800f744 <etharp_output_to_arp_index+0xc4>)
 800f716:	4413      	add	r3, r2
 800f718:	2203      	movs	r2, #3
 800f71a:	751a      	strb	r2, [r3, #20]
 800f71c:	e7c5      	b.n	800f6aa <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f71e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800f722:	00d3      	lsls	r3, r2, #3
 800f724:	4907      	ldr	r1, [pc, #28]	; (800f744 <etharp_output_to_arp_index+0xc4>)
 800f726:	4419      	add	r1, r3
 800f728:	3104      	adds	r1, #4
 800f72a:	4628      	mov	r0, r5
 800f72c:	f7ff ff5c 	bl	800f5e8 <etharp_request>
 800f730:	2800      	cmp	r0, #0
 800f732:	d1ba      	bne.n	800f6aa <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f734:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f738:	00da      	lsls	r2, r3, #3
 800f73a:	4b02      	ldr	r3, [pc, #8]	; (800f744 <etharp_output_to_arp_index+0xc4>)
 800f73c:	4413      	add	r3, r2
 800f73e:	2203      	movs	r2, #3
 800f740:	751a      	strb	r2, [r3, #20]
 800f742:	e7b2      	b.n	800f6aa <etharp_output_to_arp_index+0x2a>
 800f744:	20001788 	.word	0x20001788
 800f748:	08017e48 	.word	0x08017e48
 800f74c:	08017ef8 	.word	0x08017ef8
 800f750:	08015608 	.word	0x08015608

0800f754 <etharp_query>:
{
 800f754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f758:	b083      	sub	sp, #12
 800f75a:	4606      	mov	r6, r0
 800f75c:	460d      	mov	r5, r1
 800f75e:	4617      	mov	r7, r2
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f760:	f100 08bc 	add.w	r8, r0, #188	; 0xbc
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f764:	4601      	mov	r1, r0
 800f766:	6828      	ldr	r0, [r5, #0]
 800f768:	f000 fe4e 	bl	8010408 <ip4_addr_isbroadcast_u32>
 800f76c:	2800      	cmp	r0, #0
 800f76e:	f040 80af 	bne.w	800f8d0 <etharp_query+0x17c>
      ip4_addr_ismulticast(ipaddr) ||
 800f772:	682b      	ldr	r3, [r5, #0]
 800f774:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f778:	2ae0      	cmp	r2, #224	; 0xe0
 800f77a:	f000 80ac 	beq.w	800f8d6 <etharp_query+0x182>
      ip4_addr_ismulticast(ipaddr) ||
 800f77e:	2d00      	cmp	r5, #0
 800f780:	f000 80ac 	beq.w	800f8dc <etharp_query+0x188>
      ip4_addr_isany(ipaddr)) {
 800f784:	2b00      	cmp	r3, #0
 800f786:	f000 80ac 	beq.w	800f8e2 <etharp_query+0x18e>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f78a:	4632      	mov	r2, r6
 800f78c:	2101      	movs	r1, #1
 800f78e:	4628      	mov	r0, r5
 800f790:	f7ff fcf2 	bl	800f178 <etharp_find_entry>
  if (i_err < 0) {
 800f794:	1e04      	subs	r4, r0, #0
 800f796:	db2e      	blt.n	800f7f6 <etharp_query+0xa2>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f798:	b2a3      	uxth	r3, r4
 800f79a:	2b7e      	cmp	r3, #126	; 0x7e
 800f79c:	d830      	bhi.n	800f800 <etharp_query+0xac>
  i = (netif_addr_idx_t)i_err;
 800f79e:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f7a0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f7a4:	00da      	lsls	r2, r3, #3
 800f7a6:	4b52      	ldr	r3, [pc, #328]	; (800f8f0 <etharp_query+0x19c>)
 800f7a8:	4413      	add	r3, r2
 800f7aa:	7d1b      	ldrb	r3, [r3, #20]
 800f7ac:	bb83      	cbnz	r3, 800f810 <etharp_query+0xbc>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f7ae:	0062      	lsls	r2, r4, #1
 800f7b0:	4422      	add	r2, r4
 800f7b2:	00d1      	lsls	r1, r2, #3
 800f7b4:	4b4e      	ldr	r3, [pc, #312]	; (800f8f0 <etharp_query+0x19c>)
 800f7b6:	440b      	add	r3, r1
 800f7b8:	f04f 0901 	mov.w	r9, #1
 800f7bc:	f883 9014 	strb.w	r9, [r3, #20]
    arp_table[i].netif = netif;
 800f7c0:	609e      	str	r6, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f7c2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f7c6:	00da      	lsls	r2, r3, #3
 800f7c8:	4b49      	ldr	r3, [pc, #292]	; (800f8f0 <etharp_query+0x19c>)
 800f7ca:	4413      	add	r3, r2
 800f7cc:	7d1b      	ldrb	r3, [r3, #20]
 800f7ce:	b313      	cbz	r3, 800f816 <etharp_query+0xc2>
  if (is_new_entry || (q == NULL)) {
 800f7d0:	f1b9 0f00 	cmp.w	r9, #0
 800f7d4:	d127      	bne.n	800f826 <etharp_query+0xd2>
 800f7d6:	b337      	cbz	r7, 800f826 <etharp_query+0xd2>
  err_t result = ERR_MEM;
 800f7d8:	f04f 35ff 	mov.w	r5, #4294967295
  LWIP_ASSERT("q != NULL", q != NULL);
 800f7dc:	b35f      	cbz	r7, 800f836 <etharp_query+0xe2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f7de:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f7e2:	00da      	lsls	r2, r3, #3
 800f7e4:	4b42      	ldr	r3, [pc, #264]	; (800f8f0 <etharp_query+0x19c>)
 800f7e6:	4413      	add	r3, r2
 800f7e8:	7d1b      	ldrb	r3, [r3, #20]
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	d82b      	bhi.n	800f846 <etharp_query+0xf2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f7ee:	2b01      	cmp	r3, #1
 800f7f0:	d102      	bne.n	800f7f8 <etharp_query+0xa4>
    p = q;
 800f7f2:	463d      	mov	r5, r7
 800f7f4:	e03d      	b.n	800f872 <etharp_query+0x11e>
    return (err_t)i_err;
 800f7f6:	b265      	sxtb	r5, r4
}
 800f7f8:	4628      	mov	r0, r5
 800f7fa:	b003      	add	sp, #12
 800f7fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f800:	4b3c      	ldr	r3, [pc, #240]	; (800f8f4 <etharp_query+0x1a0>)
 800f802:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f806:	493c      	ldr	r1, [pc, #240]	; (800f8f8 <etharp_query+0x1a4>)
 800f808:	483c      	ldr	r0, [pc, #240]	; (800f8fc <etharp_query+0x1a8>)
 800f80a:	f004 fef3 	bl	80145f4 <iprintf>
 800f80e:	e7c6      	b.n	800f79e <etharp_query+0x4a>
  int is_new_entry = 0;
 800f810:	f04f 0900 	mov.w	r9, #0
 800f814:	e7d5      	b.n	800f7c2 <etharp_query+0x6e>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f816:	4b37      	ldr	r3, [pc, #220]	; (800f8f4 <etharp_query+0x1a0>)
 800f818:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f81c:	4938      	ldr	r1, [pc, #224]	; (800f900 <etharp_query+0x1ac>)
 800f81e:	4837      	ldr	r0, [pc, #220]	; (800f8fc <etharp_query+0x1a8>)
 800f820:	f004 fee8 	bl	80145f4 <iprintf>
 800f824:	e7d4      	b.n	800f7d0 <etharp_query+0x7c>
    result = etharp_request(netif, ipaddr);
 800f826:	4629      	mov	r1, r5
 800f828:	4630      	mov	r0, r6
 800f82a:	f7ff fedd 	bl	800f5e8 <etharp_request>
 800f82e:	4605      	mov	r5, r0
    if (q == NULL) {
 800f830:	2f00      	cmp	r7, #0
 800f832:	d1d3      	bne.n	800f7dc <etharp_query+0x88>
 800f834:	e7e0      	b.n	800f7f8 <etharp_query+0xa4>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f836:	4b2f      	ldr	r3, [pc, #188]	; (800f8f4 <etharp_query+0x1a0>)
 800f838:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f83c:	4931      	ldr	r1, [pc, #196]	; (800f904 <etharp_query+0x1b0>)
 800f83e:	482f      	ldr	r0, [pc, #188]	; (800f8fc <etharp_query+0x1a8>)
 800f840:	f004 fed8 	bl	80145f4 <iprintf>
 800f844:	e7cb      	b.n	800f7de <etharp_query+0x8a>
    ETHARP_SET_ADDRHINT(netif, i);
 800f846:	4b30      	ldr	r3, [pc, #192]	; (800f908 <etharp_query+0x1b4>)
 800f848:	701c      	strb	r4, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f84a:	4613      	mov	r3, r2
 800f84c:	3308      	adds	r3, #8
 800f84e:	4a28      	ldr	r2, [pc, #160]	; (800f8f0 <etharp_query+0x19c>)
 800f850:	4413      	add	r3, r2
 800f852:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f856:	9200      	str	r2, [sp, #0]
 800f858:	3304      	adds	r3, #4
 800f85a:	4642      	mov	r2, r8
 800f85c:	4639      	mov	r1, r7
 800f85e:	4630      	mov	r0, r6
 800f860:	f004 fe10 	bl	8014484 <ethernet_output>
 800f864:	4605      	mov	r5, r0
 800f866:	e7c7      	b.n	800f7f8 <etharp_query+0xa4>
      if (PBUF_NEEDS_COPY(p)) {
 800f868:	7b2b      	ldrb	r3, [r5, #12]
 800f86a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f86e:	d129      	bne.n	800f8c4 <etharp_query+0x170>
      p = p->next;
 800f870:	682d      	ldr	r5, [r5, #0]
    while (p) {
 800f872:	b175      	cbz	r5, 800f892 <etharp_query+0x13e>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f874:	896a      	ldrh	r2, [r5, #10]
 800f876:	892b      	ldrh	r3, [r5, #8]
 800f878:	429a      	cmp	r2, r3
 800f87a:	d1f5      	bne.n	800f868 <etharp_query+0x114>
 800f87c:	682b      	ldr	r3, [r5, #0]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d0f2      	beq.n	800f868 <etharp_query+0x114>
 800f882:	4b1c      	ldr	r3, [pc, #112]	; (800f8f4 <etharp_query+0x1a0>)
 800f884:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f888:	4920      	ldr	r1, [pc, #128]	; (800f90c <etharp_query+0x1b8>)
 800f88a:	481c      	ldr	r0, [pc, #112]	; (800f8fc <etharp_query+0x1a8>)
 800f88c:	f004 feb2 	bl	80145f4 <iprintf>
 800f890:	e7ea      	b.n	800f868 <etharp_query+0x114>
    int copy_needed = 0;
 800f892:	2300      	movs	r3, #0
    if (copy_needed) {
 800f894:	b1c3      	cbz	r3, 800f8c8 <etharp_query+0x174>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f896:	463a      	mov	r2, r7
 800f898:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f89c:	200e      	movs	r0, #14
 800f89e:	f7f9 fa87 	bl	8008db0 <pbuf_clone>
 800f8a2:	4607      	mov	r7, r0
    if (p != NULL) {
 800f8a4:	b307      	cbz	r7, 800f8e8 <etharp_query+0x194>
      if (arp_table[i].q != NULL) {
 800f8a6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800f8aa:	00d3      	lsls	r3, r2, #3
 800f8ac:	4a10      	ldr	r2, [pc, #64]	; (800f8f0 <etharp_query+0x19c>)
 800f8ae:	58d0      	ldr	r0, [r2, r3]
 800f8b0:	b108      	cbz	r0, 800f8b6 <etharp_query+0x162>
        pbuf_free(arp_table[i].q);
 800f8b2:	f7f8 ff39 	bl	8008728 <pbuf_free>
      arp_table[i].q = p;
 800f8b6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800f8ba:	00e3      	lsls	r3, r4, #3
 800f8bc:	4a0c      	ldr	r2, [pc, #48]	; (800f8f0 <etharp_query+0x19c>)
 800f8be:	50d7      	str	r7, [r2, r3]
      result = ERR_OK;
 800f8c0:	2500      	movs	r5, #0
 800f8c2:	e799      	b.n	800f7f8 <etharp_query+0xa4>
        copy_needed = 1;
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	e7e5      	b.n	800f894 <etharp_query+0x140>
      pbuf_ref(p);
 800f8c8:	4638      	mov	r0, r7
 800f8ca:	f7f9 f89b 	bl	8008a04 <pbuf_ref>
 800f8ce:	e7e9      	b.n	800f8a4 <etharp_query+0x150>
    return ERR_ARG;
 800f8d0:	f06f 050f 	mvn.w	r5, #15
 800f8d4:	e790      	b.n	800f7f8 <etharp_query+0xa4>
 800f8d6:	f06f 050f 	mvn.w	r5, #15
 800f8da:	e78d      	b.n	800f7f8 <etharp_query+0xa4>
 800f8dc:	f06f 050f 	mvn.w	r5, #15
 800f8e0:	e78a      	b.n	800f7f8 <etharp_query+0xa4>
 800f8e2:	f06f 050f 	mvn.w	r5, #15
 800f8e6:	e787      	b.n	800f7f8 <etharp_query+0xa4>
      result = ERR_MEM;
 800f8e8:	f04f 35ff 	mov.w	r5, #4294967295
 800f8ec:	e784      	b.n	800f7f8 <etharp_query+0xa4>
 800f8ee:	bf00      	nop
 800f8f0:	20001788 	.word	0x20001788
 800f8f4:	08017e48 	.word	0x08017e48
 800f8f8:	08017f28 	.word	0x08017f28
 800f8fc:	08015608 	.word	0x08015608
 800f900:	08017f38 	.word	0x08017f38
 800f904:	08017f60 	.word	0x08017f60
 800f908:	20001878 	.word	0x20001878
 800f90c:	08017f6c 	.word	0x08017f6c

0800f910 <etharp_output>:
{
 800f910:	b570      	push	{r4, r5, r6, lr}
 800f912:	b084      	sub	sp, #16
 800f914:	460e      	mov	r6, r1
 800f916:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f918:	4605      	mov	r5, r0
 800f91a:	2800      	cmp	r0, #0
 800f91c:	d02f      	beq.n	800f97e <etharp_output+0x6e>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f91e:	2e00      	cmp	r6, #0
 800f920:	d035      	beq.n	800f98e <etharp_output+0x7e>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f922:	2c00      	cmp	r4, #0
 800f924:	d03b      	beq.n	800f99e <etharp_output+0x8e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f926:	4629      	mov	r1, r5
 800f928:	6820      	ldr	r0, [r4, #0]
 800f92a:	f000 fd6d 	bl	8010408 <ip4_addr_isbroadcast_u32>
 800f92e:	2800      	cmp	r0, #0
 800f930:	d179      	bne.n	800fa26 <etharp_output+0x116>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f932:	6823      	ldr	r3, [r4, #0]
 800f934:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f938:	2ae0      	cmp	r2, #224	; 0xe0
 800f93a:	d038      	beq.n	800f9ae <etharp_output+0x9e>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f93c:	682a      	ldr	r2, [r5, #0]
 800f93e:	6969      	ldr	r1, [r5, #20]
 800f940:	405a      	eors	r2, r3
 800f942:	420a      	tst	r2, r1
 800f944:	d009      	beq.n	800f95a <etharp_output+0x4a>
        !ip4_addr_islinklocal(ipaddr)) {
 800f946:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f948:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f94c:	4293      	cmp	r3, r2
 800f94e:	d004      	beq.n	800f95a <etharp_output+0x4a>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f950:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800f952:	2b00      	cmp	r3, #0
 800f954:	d073      	beq.n	800fa3e <etharp_output+0x12e>
            dst_addr = netif_ip4_gw(netif);
 800f956:	f105 0428 	add.w	r4, r5, #40	; 0x28
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f95a:	4b3a      	ldr	r3, [pc, #232]	; (800fa44 <etharp_output+0x134>)
 800f95c:	781a      	ldrb	r2, [r3, #0]
 800f95e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800f962:	00d9      	lsls	r1, r3, #3
 800f964:	4b38      	ldr	r3, [pc, #224]	; (800fa48 <etharp_output+0x138>)
 800f966:	440b      	add	r3, r1
 800f968:	7d1b      	ldrb	r3, [r3, #20]
 800f96a:	2b01      	cmp	r3, #1
 800f96c:	d953      	bls.n	800fa16 <etharp_output+0x106>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f96e:	6820      	ldr	r0, [r4, #0]
 800f970:	4b35      	ldr	r3, [pc, #212]	; (800fa48 <etharp_output+0x138>)
 800f972:	440b      	add	r3, r1
 800f974:	685b      	ldr	r3, [r3, #4]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f976:	4298      	cmp	r0, r3
 800f978:	d02f      	beq.n	800f9da <etharp_output+0xca>
 800f97a:	2200      	movs	r2, #0
 800f97c:	e034      	b.n	800f9e8 <etharp_output+0xd8>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f97e:	4b33      	ldr	r3, [pc, #204]	; (800fa4c <etharp_output+0x13c>)
 800f980:	f240 321e 	movw	r2, #798	; 0x31e
 800f984:	4932      	ldr	r1, [pc, #200]	; (800fa50 <etharp_output+0x140>)
 800f986:	4833      	ldr	r0, [pc, #204]	; (800fa54 <etharp_output+0x144>)
 800f988:	f004 fe34 	bl	80145f4 <iprintf>
 800f98c:	e7c7      	b.n	800f91e <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f98e:	4b2f      	ldr	r3, [pc, #188]	; (800fa4c <etharp_output+0x13c>)
 800f990:	f240 321f 	movw	r2, #799	; 0x31f
 800f994:	4930      	ldr	r1, [pc, #192]	; (800fa58 <etharp_output+0x148>)
 800f996:	482f      	ldr	r0, [pc, #188]	; (800fa54 <etharp_output+0x144>)
 800f998:	f004 fe2c 	bl	80145f4 <iprintf>
 800f99c:	e7c1      	b.n	800f922 <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f99e:	4b2b      	ldr	r3, [pc, #172]	; (800fa4c <etharp_output+0x13c>)
 800f9a0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f9a4:	492d      	ldr	r1, [pc, #180]	; (800fa5c <etharp_output+0x14c>)
 800f9a6:	482b      	ldr	r0, [pc, #172]	; (800fa54 <etharp_output+0x144>)
 800f9a8:	f004 fe24 	bl	80145f4 <iprintf>
 800f9ac:	e7bb      	b.n	800f926 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f9ba:	235e      	movs	r3, #94	; 0x5e
 800f9bc:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f9c0:	7863      	ldrb	r3, [r4, #1]
 800f9c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9c6:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f9ca:	78a3      	ldrb	r3, [r4, #2]
 800f9cc:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f9d0:	78e3      	ldrb	r3, [r4, #3]
 800f9d2:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800f9d6:	ab02      	add	r3, sp, #8
 800f9d8:	e026      	b.n	800fa28 <etharp_output+0x118>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f9da:	4631      	mov	r1, r6
 800f9dc:	4628      	mov	r0, r5
 800f9de:	f7ff fe4f 	bl	800f680 <etharp_output_to_arp_index>
 800f9e2:	e02a      	b.n	800fa3a <etharp_output+0x12a>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f9e4:	3201      	adds	r2, #1
 800f9e6:	b2d2      	uxtb	r2, r2
 800f9e8:	2a09      	cmp	r2, #9
 800f9ea:	d816      	bhi.n	800fa1a <etharp_output+0x10a>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f9ec:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800f9f0:	00d9      	lsls	r1, r3, #3
 800f9f2:	4b15      	ldr	r3, [pc, #84]	; (800fa48 <etharp_output+0x138>)
 800f9f4:	440b      	add	r3, r1
 800f9f6:	7d1b      	ldrb	r3, [r3, #20]
 800f9f8:	2b01      	cmp	r3, #1
 800f9fa:	d9f3      	bls.n	800f9e4 <etharp_output+0xd4>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f9fc:	6820      	ldr	r0, [r4, #0]
 800f9fe:	4b12      	ldr	r3, [pc, #72]	; (800fa48 <etharp_output+0x138>)
 800fa00:	440b      	add	r3, r1
 800fa02:	685b      	ldr	r3, [r3, #4]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fa04:	4298      	cmp	r0, r3
 800fa06:	d1ed      	bne.n	800f9e4 <etharp_output+0xd4>
        ETHARP_SET_ADDRHINT(netif, i);
 800fa08:	4b0e      	ldr	r3, [pc, #56]	; (800fa44 <etharp_output+0x134>)
 800fa0a:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800fa0c:	4631      	mov	r1, r6
 800fa0e:	4628      	mov	r0, r5
 800fa10:	f7ff fe36 	bl	800f680 <etharp_output_to_arp_index>
 800fa14:	e011      	b.n	800fa3a <etharp_output+0x12a>
 800fa16:	2200      	movs	r2, #0
 800fa18:	e7e6      	b.n	800f9e8 <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 800fa1a:	4632      	mov	r2, r6
 800fa1c:	4621      	mov	r1, r4
 800fa1e:	4628      	mov	r0, r5
 800fa20:	f7ff fe98 	bl	800f754 <etharp_query>
 800fa24:	e009      	b.n	800fa3a <etharp_output+0x12a>
    dest = (const struct eth_addr *)&ethbroadcast;
 800fa26:	4b0e      	ldr	r3, [pc, #56]	; (800fa60 <etharp_output+0x150>)
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800fa28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fa2c:	9200      	str	r2, [sp, #0]
 800fa2e:	f105 02bc 	add.w	r2, r5, #188	; 0xbc
 800fa32:	4631      	mov	r1, r6
 800fa34:	4628      	mov	r0, r5
 800fa36:	f004 fd25 	bl	8014484 <ethernet_output>
}
 800fa3a:	b004      	add	sp, #16
 800fa3c:	bd70      	pop	{r4, r5, r6, pc}
            return ERR_RTE;
 800fa3e:	f06f 0003 	mvn.w	r0, #3
 800fa42:	e7fa      	b.n	800fa3a <etharp_output+0x12a>
 800fa44:	20001878 	.word	0x20001878
 800fa48:	20001788 	.word	0x20001788
 800fa4c:	08017e48 	.word	0x08017e48
 800fa50:	080155f8 	.word	0x080155f8
 800fa54:	08015608 	.word	0x08015608
 800fa58:	08017f60 	.word	0x08017f60
 800fa5c:	08017ed8 	.word	0x08017ed8
 800fa60:	0801874c 	.word	0x0801874c

0800fa64 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800fa64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa68:	b086      	sub	sp, #24
 800fa6a:	4606      	mov	r6, r0
 800fa6c:	4688      	mov	r8, r1
 800fa6e:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fa70:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fa74:	2124      	movs	r1, #36	; 0x24
 800fa76:	2036      	movs	r0, #54	; 0x36
 800fa78:	f7f8 feb8 	bl	80087ec <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d037      	beq.n	800faf0 <icmp_send_response+0x8c>
 800fa80:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fa82:	8943      	ldrh	r3, [r0, #10]
 800fa84:	2b23      	cmp	r3, #35	; 0x23
 800fa86:	d936      	bls.n	800faf6 <icmp_send_response+0x92>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fa88:	f8d6 c004 	ldr.w	ip, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fa8c:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800fa8e:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 800fa92:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800fa94:	2300      	movs	r3, #0
 800fa96:	7123      	strb	r3, [r4, #4]
 800fa98:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800fa9a:	71a3      	strb	r3, [r4, #6]
 800fa9c:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fa9e:	686f      	ldr	r7, [r5, #4]
 800faa0:	6873      	ldr	r3, [r6, #4]
 800faa2:	681e      	ldr	r6, [r3, #0]
 800faa4:	6858      	ldr	r0, [r3, #4]
 800faa6:	6899      	ldr	r1, [r3, #8]
 800faa8:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800faac:	60be      	str	r6, [r7, #8]
 800faae:	60f8      	str	r0, [r7, #12]
 800fab0:	6139      	str	r1, [r7, #16]
 800fab2:	f8c7 e014 	str.w	lr, [r7, #20]
 800fab6:	691e      	ldr	r6, [r3, #16]
 800fab8:	6958      	ldr	r0, [r3, #20]
 800faba:	6999      	ldr	r1, [r3, #24]
 800fabc:	61be      	str	r6, [r7, #24]
 800fabe:	61f8      	str	r0, [r7, #28]
 800fac0:	6239      	str	r1, [r7, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800fac2:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800fac6:	a806      	add	r0, sp, #24
 800fac8:	f840 3d04 	str.w	r3, [r0, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800facc:	f000 faa0 	bl	8010010 <ip4_route>
#endif
  if (netif != NULL) {
 800fad0:	b158      	cbz	r0, 800faea <icmp_send_response+0x86>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800fad2:	2100      	movs	r1, #0
 800fad4:	70a1      	strb	r1, [r4, #2]
 800fad6:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fad8:	9002      	str	r0, [sp, #8]
 800fada:	2301      	movs	r3, #1
 800fadc:	9301      	str	r3, [sp, #4]
 800fade:	9100      	str	r1, [sp, #0]
 800fae0:	23ff      	movs	r3, #255	; 0xff
 800fae2:	aa05      	add	r2, sp, #20
 800fae4:	4628      	mov	r0, r5
 800fae6:	f000 fc6d 	bl	80103c4 <ip4_output_if>
  }
  pbuf_free(q);
 800faea:	4628      	mov	r0, r5
 800faec:	f7f8 fe1c 	bl	8008728 <pbuf_free>
}
 800faf0:	b006      	add	sp, #24
 800faf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800faf6:	4b04      	ldr	r3, [pc, #16]	; (800fb08 <icmp_send_response+0xa4>)
 800faf8:	f240 1269 	movw	r2, #361	; 0x169
 800fafc:	4903      	ldr	r1, [pc, #12]	; (800fb0c <icmp_send_response+0xa8>)
 800fafe:	4804      	ldr	r0, [pc, #16]	; (800fb10 <icmp_send_response+0xac>)
 800fb00:	f004 fd78 	bl	80145f4 <iprintf>
 800fb04:	e7c0      	b.n	800fa88 <icmp_send_response+0x24>
 800fb06:	bf00      	nop
 800fb08:	08018090 	.word	0x08018090
 800fb0c:	080180c8 	.word	0x080180c8
 800fb10:	08015608 	.word	0x08015608

0800fb14 <icmp_input>:
{
 800fb14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb18:	b085      	sub	sp, #20
 800fb1a:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800fb1c:	4b4a      	ldr	r3, [pc, #296]	; (800fc48 <icmp_input+0x134>)
 800fb1e:	689f      	ldr	r7, [r3, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800fb20:	783c      	ldrb	r4, [r7, #0]
 800fb22:	f004 040f 	and.w	r4, r4, #15
 800fb26:	00a4      	lsls	r4, r4, #2
 800fb28:	b2a6      	uxth	r6, r4
  if (hlen < IP_HLEN) {
 800fb2a:	2e13      	cmp	r6, #19
 800fb2c:	d915      	bls.n	800fb5a <icmp_input+0x46>
 800fb2e:	4688      	mov	r8, r1
  if (p->len < sizeof(u16_t) * 2) {
 800fb30:	8943      	ldrh	r3, [r0, #10]
 800fb32:	2b03      	cmp	r3, #3
 800fb34:	d911      	bls.n	800fb5a <icmp_input+0x46>
  type = *((u8_t *)p->payload);
 800fb36:	6843      	ldr	r3, [r0, #4]
 800fb38:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 800fb3a:	2b08      	cmp	r3, #8
 800fb3c:	d161      	bne.n	800fc02 <icmp_input+0xee>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fb3e:	4b42      	ldr	r3, [pc, #264]	; (800fc48 <icmp_input+0x134>)
 800fb40:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800fb42:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800fb46:	2be0      	cmp	r3, #224	; 0xe0
 800fb48:	d01a      	beq.n	800fb80 <icmp_input+0x6c>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800fb4a:	4b3f      	ldr	r3, [pc, #252]	; (800fc48 <icmp_input+0x134>)
 800fb4c:	6819      	ldr	r1, [r3, #0]
 800fb4e:	f000 fc5b 	bl	8010408 <ip4_addr_isbroadcast_u32>
 800fb52:	b9a8      	cbnz	r0, 800fb80 <icmp_input+0x6c>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fb54:	892b      	ldrh	r3, [r5, #8]
 800fb56:	2b07      	cmp	r3, #7
 800fb58:	d805      	bhi.n	800fb66 <icmp_input+0x52>
  pbuf_free(p);
 800fb5a:	4628      	mov	r0, r5
 800fb5c:	f7f8 fde4 	bl	8008728 <pbuf_free>
}
 800fb60:	b005      	add	sp, #20
 800fb62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fb66:	f104 090e 	add.w	r9, r4, #14
 800fb6a:	4649      	mov	r1, r9
 800fb6c:	4628      	mov	r0, r5
 800fb6e:	f7f8 fd8a 	bl	8008686 <pbuf_add_header>
 800fb72:	2800      	cmp	r0, #0
 800fb74:	d03a      	beq.n	800fbec <icmp_input+0xd8>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fb76:	892b      	ldrh	r3, [r5, #8]
 800fb78:	1999      	adds	r1, r3, r6
 800fb7a:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 800fb7c:	428b      	cmp	r3, r1
 800fb7e:	d903      	bls.n	800fb88 <icmp_input+0x74>
  pbuf_free(p);
 800fb80:	4628      	mov	r0, r5
 800fb82:	f7f8 fdd1 	bl	8008728 <pbuf_free>
  return;
 800fb86:	e7eb      	b.n	800fb60 <icmp_input+0x4c>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800fb88:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fb8c:	200e      	movs	r0, #14
 800fb8e:	f7f8 fe2d 	bl	80087ec <pbuf_alloc>
        if (r == NULL) {
 800fb92:	4606      	mov	r6, r0
 800fb94:	2800      	cmp	r0, #0
 800fb96:	d0f3      	beq.n	800fb80 <icmp_input+0x6c>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800fb98:	8942      	ldrh	r2, [r0, #10]
 800fb9a:	f104 0308 	add.w	r3, r4, #8
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d202      	bcs.n	800fba8 <icmp_input+0x94>
          pbuf_free(r);
 800fba2:	f7f8 fdc1 	bl	8008728 <pbuf_free>
          goto icmperr;
 800fba6:	e7eb      	b.n	800fb80 <icmp_input+0x6c>
        MEMCPY(r->payload, iphdr_in, hlen);
 800fba8:	4622      	mov	r2, r4
 800fbaa:	4639      	mov	r1, r7
 800fbac:	6840      	ldr	r0, [r0, #4]
 800fbae:	f004 fcf4 	bl	801459a <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800fbb2:	4621      	mov	r1, r4
 800fbb4:	4630      	mov	r0, r6
 800fbb6:	f7f8 fd71 	bl	800869c <pbuf_remove_header>
 800fbba:	b148      	cbz	r0, 800fbd0 <icmp_input+0xbc>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800fbbc:	4b23      	ldr	r3, [pc, #140]	; (800fc4c <icmp_input+0x138>)
 800fbbe:	22b6      	movs	r2, #182	; 0xb6
 800fbc0:	4923      	ldr	r1, [pc, #140]	; (800fc50 <icmp_input+0x13c>)
 800fbc2:	4824      	ldr	r0, [pc, #144]	; (800fc54 <icmp_input+0x140>)
 800fbc4:	f004 fd16 	bl	80145f4 <iprintf>
          pbuf_free(r);
 800fbc8:	4630      	mov	r0, r6
 800fbca:	f7f8 fdad 	bl	8008728 <pbuf_free>
          goto icmperr;
 800fbce:	e7d7      	b.n	800fb80 <icmp_input+0x6c>
        if (pbuf_copy(r, p) != ERR_OK) {
 800fbd0:	4629      	mov	r1, r5
 800fbd2:	4630      	mov	r0, r6
 800fbd4:	f7f8 ff70 	bl	8008ab8 <pbuf_copy>
 800fbd8:	b118      	cbz	r0, 800fbe2 <icmp_input+0xce>
          pbuf_free(r);
 800fbda:	4630      	mov	r0, r6
 800fbdc:	f7f8 fda4 	bl	8008728 <pbuf_free>
          goto icmperr;
 800fbe0:	e7ce      	b.n	800fb80 <icmp_input+0x6c>
        pbuf_free(p);
 800fbe2:	4628      	mov	r0, r5
 800fbe4:	f7f8 fda0 	bl	8008728 <pbuf_free>
        p = r;
 800fbe8:	4635      	mov	r5, r6
 800fbea:	e004      	b.n	800fbf6 <icmp_input+0xe2>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fbec:	4649      	mov	r1, r9
 800fbee:	4628      	mov	r0, r5
 800fbf0:	f7f8 fd54 	bl	800869c <pbuf_remove_header>
 800fbf4:	b948      	cbnz	r0, 800fc0a <icmp_input+0xf6>
      iecho = (struct icmp_echo_hdr *)p->payload;
 800fbf6:	686e      	ldr	r6, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800fbf8:	4621      	mov	r1, r4
 800fbfa:	4628      	mov	r0, r5
 800fbfc:	f7f8 fd43 	bl	8008686 <pbuf_add_header>
 800fc00:	b150      	cbz	r0, 800fc18 <icmp_input+0x104>
  pbuf_free(p);
 800fc02:	4628      	mov	r0, r5
 800fc04:	f7f8 fd90 	bl	8008728 <pbuf_free>
  return;
 800fc08:	e7aa      	b.n	800fb60 <icmp_input+0x4c>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800fc0a:	4b10      	ldr	r3, [pc, #64]	; (800fc4c <icmp_input+0x138>)
 800fc0c:	22c7      	movs	r2, #199	; 0xc7
 800fc0e:	4912      	ldr	r1, [pc, #72]	; (800fc58 <icmp_input+0x144>)
 800fc10:	4810      	ldr	r0, [pc, #64]	; (800fc54 <icmp_input+0x140>)
 800fc12:	f004 fcef 	bl	80145f4 <iprintf>
          goto icmperr;
 800fc16:	e7b3      	b.n	800fb80 <icmp_input+0x6c>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800fc18:	6868      	ldr	r0, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 800fc1a:	490b      	ldr	r1, [pc, #44]	; (800fc48 <icmp_input+0x134>)
 800fc1c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800fc1e:	60c3      	str	r3, [r0, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800fc20:	694b      	ldr	r3, [r1, #20]
 800fc22:	6103      	str	r3, [r0, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800fc24:	2200      	movs	r2, #0
 800fc26:	7032      	strb	r2, [r6, #0]
        iecho->chksum = 0;
 800fc28:	70b2      	strb	r2, [r6, #2]
 800fc2a:	70f2      	strb	r2, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fc2c:	23ff      	movs	r3, #255	; 0xff
 800fc2e:	7203      	strb	r3, [r0, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800fc30:	7282      	strb	r2, [r0, #10]
 800fc32:	72c2      	strb	r2, [r0, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fc34:	f8cd 8008 	str.w	r8, [sp, #8]
 800fc38:	2001      	movs	r0, #1
 800fc3a:	9001      	str	r0, [sp, #4]
 800fc3c:	9200      	str	r2, [sp, #0]
 800fc3e:	3128      	adds	r1, #40	; 0x28
 800fc40:	4628      	mov	r0, r5
 800fc42:	f000 fbbf 	bl	80103c4 <ip4_output_if>
 800fc46:	e7dc      	b.n	800fc02 <icmp_input+0xee>
 800fc48:	20004b84 	.word	0x20004b84
 800fc4c:	08018090 	.word	0x08018090
 800fc50:	08018024 	.word	0x08018024
 800fc54:	08015608 	.word	0x08015608
 800fc58:	0801805c 	.word	0x0801805c

0800fc5c <icmp_dest_unreach>:
{
 800fc5c:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
 800fc5e:	460a      	mov	r2, r1
 800fc60:	2103      	movs	r1, #3
 800fc62:	f7ff feff 	bl	800fa64 <icmp_send_response>
}
 800fc66:	bd08      	pop	{r3, pc}

0800fc68 <icmp_time_exceeded>:
{
 800fc68:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
 800fc6a:	460a      	mov	r2, r1
 800fc6c:	210b      	movs	r1, #11
 800fc6e:	f7ff fef9 	bl	800fa64 <icmp_send_response>
}
 800fc72:	bd08      	pop	{r3, pc}

0800fc74 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 800fc74:	b538      	push	{r3, r4, r5, lr}
 800fc76:	4605      	mov	r5, r0
#ifdef LWIP_RAND
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 800fc78:	2902      	cmp	r1, #2
 800fc7a:	d805      	bhi.n	800fc88 <igmp_start_timer+0x14>
 800fc7c:	2001      	movs	r0, #1
 800fc7e:	8168      	strh	r0, [r5, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
 800fc80:	b908      	cbnz	r0, 800fc86 <igmp_start_timer+0x12>
    group->timer = 1;
 800fc82:	2301      	movs	r3, #1
 800fc84:	816b      	strh	r3, [r5, #10]
  }
}
 800fc86:	bd38      	pop	{r3, r4, r5, pc}
 800fc88:	460c      	mov	r4, r1
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 800fc8a:	f004 fd2f 	bl	80146ec <rand>
 800fc8e:	fbb0 f3f4 	udiv	r3, r0, r4
 800fc92:	fb04 0013 	mls	r0, r4, r3, r0
 800fc96:	b280      	uxth	r0, r0
 800fc98:	e7f1      	b.n	800fc7e <igmp_start_timer+0xa>

0800fc9a <igmp_delaying_member>:
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 800fc9a:	7a43      	ldrb	r3, [r0, #9]
 800fc9c:	2b02      	cmp	r3, #2
 800fc9e:	d007      	beq.n	800fcb0 <igmp_delaying_member+0x16>
 800fca0:	2b01      	cmp	r3, #1
 800fca2:	d000      	beq.n	800fca6 <igmp_delaying_member+0xc>
 800fca4:	4770      	bx	lr
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
       ((group->timer == 0) || (maxresp < group->timer)))) {
 800fca6:	8943      	ldrh	r3, [r0, #10]
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 800fca8:	b113      	cbz	r3, 800fcb0 <igmp_delaying_member+0x16>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 800fcaa:	b28a      	uxth	r2, r1
 800fcac:	4293      	cmp	r3, r2
 800fcae:	d9f9      	bls.n	800fca4 <igmp_delaying_member+0xa>
{
 800fcb0:	b510      	push	{r4, lr}
 800fcb2:	4604      	mov	r4, r0
    igmp_start_timer(group, maxresp);
 800fcb4:	f7ff ffde 	bl	800fc74 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 800fcb8:	2301      	movs	r3, #1
 800fcba:	7263      	strb	r3, [r4, #9]
  }
}
 800fcbc:	bd10      	pop	{r4, pc}

0800fcbe <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
 800fcbe:	b530      	push	{r4, r5, lr}
 800fcc0:	b089      	sub	sp, #36	; 0x24
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 800fcc2:	f240 4494 	movw	r4, #1172	; 0x494
 800fcc6:	f8ad 401c 	strh.w	r4, [sp, #28]
  ra[1] = 0x0000; /* Router shall examine packet */
 800fcca:	2400      	movs	r4, #0
 800fccc:	f8ad 401e 	strh.w	r4, [sp, #30]
  IGMP_STATS_INC(igmp.xmit);
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 800fcd0:	2504      	movs	r5, #4
 800fcd2:	9504      	str	r5, [sp, #16]
 800fcd4:	ad07      	add	r5, sp, #28
 800fcd6:	9503      	str	r5, [sp, #12]
 800fcd8:	9302      	str	r3, [sp, #8]
 800fcda:	2302      	movs	r3, #2
 800fcdc:	9301      	str	r3, [sp, #4]
 800fcde:	9400      	str	r4, [sp, #0]
 800fce0:	2301      	movs	r3, #1
 800fce2:	f000 fb55 	bl	8010390 <ip4_output_if_opt>
}
 800fce6:	b009      	add	sp, #36	; 0x24
 800fce8:	bd30      	pop	{r4, r5, pc}
	...

0800fcec <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
 800fcec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fcf0:	b083      	sub	sp, #12
 800fcf2:	4607      	mov	r7, r0
 800fcf4:	4688      	mov	r8, r1
 800fcf6:	4615      	mov	r5, r2
  struct pbuf     *p    = NULL;
  struct igmp_msg *igmp = NULL;
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 800fcf8:	4b24      	ldr	r3, [pc, #144]	; (800fd8c <igmp_send+0xa0>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	9301      	str	r3, [sp, #4]
  ip4_addr_t  *dest = NULL;

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 800fcfe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd02:	2108      	movs	r1, #8
 800fd04:	204a      	movs	r0, #74	; 0x4a
 800fd06:	f7f8 fd71 	bl	80087ec <pbuf_alloc>

  if (p) {
 800fd0a:	b1a0      	cbz	r0, 800fd36 <igmp_send+0x4a>
 800fd0c:	4604      	mov	r4, r0
    igmp = (struct igmp_msg *)p->payload;
 800fd0e:	6846      	ldr	r6, [r0, #4]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 800fd10:	8943      	ldrh	r3, [r0, #10]
 800fd12:	2b07      	cmp	r3, #7
 800fd14:	d912      	bls.n	800fd3c <igmp_send+0x50>
                (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	9301      	str	r3, [sp, #4]

    if (type == IGMP_V2_MEMB_REPORT) {
 800fd1a:	2d16      	cmp	r5, #22
 800fd1c:	d016      	beq.n	800fd4c <igmp_send+0x60>
      dest = &(group->group_address);
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
      group->last_reporter_flag = 1; /* Remember we were the last to report */
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 800fd1e:	2d17      	cmp	r5, #23
 800fd20:	d01d      	beq.n	800fd5e <igmp_send+0x72>
  ip4_addr_t  *dest = NULL;
 800fd22:	f04f 0900 	mov.w	r9, #0
        dest = &allrouters;
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 800fd26:	f1a5 0316 	sub.w	r3, r5, #22
 800fd2a:	b2db      	uxtb	r3, r3
 800fd2c:	2b01      	cmp	r3, #1
 800fd2e:	d91c      	bls.n	800fd6a <igmp_send+0x7e>
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);

      igmp_ip_output_if(p, &src, dest, netif);
    }

    pbuf_free(p);
 800fd30:	4620      	mov	r0, r4
 800fd32:	f7f8 fcf9 	bl	8008728 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 800fd36:	b003      	add	sp, #12
 800fd38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 800fd3c:	4b14      	ldr	r3, [pc, #80]	; (800fd90 <igmp_send+0xa4>)
 800fd3e:	f240 3203 	movw	r2, #771	; 0x303
 800fd42:	4914      	ldr	r1, [pc, #80]	; (800fd94 <igmp_send+0xa8>)
 800fd44:	4814      	ldr	r0, [pc, #80]	; (800fd98 <igmp_send+0xac>)
 800fd46:	f004 fc55 	bl	80145f4 <iprintf>
 800fd4a:	e7e4      	b.n	800fd16 <igmp_send+0x2a>
      dest = &(group->group_address);
 800fd4c:	f108 0904 	add.w	r9, r8, #4
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 800fd50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fd54:	6073      	str	r3, [r6, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 800fd56:	2301      	movs	r3, #1
 800fd58:	f888 3008 	strb.w	r3, [r8, #8]
 800fd5c:	e7e3      	b.n	800fd26 <igmp_send+0x3a>
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 800fd5e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fd62:	6073      	str	r3, [r6, #4]
        dest = &allrouters;
 800fd64:	f8df 9034 	ldr.w	r9, [pc, #52]	; 800fd9c <igmp_send+0xb0>
 800fd68:	e7dd      	b.n	800fd26 <igmp_send+0x3a>
      igmp->igmp_msgtype  = type;
 800fd6a:	7035      	strb	r5, [r6, #0]
      igmp->igmp_maxresp  = 0;
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	7073      	strb	r3, [r6, #1]
      igmp->igmp_checksum = 0;
 800fd70:	70b3      	strb	r3, [r6, #2]
 800fd72:	70f3      	strb	r3, [r6, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 800fd74:	2108      	movs	r1, #8
 800fd76:	4630      	mov	r0, r6
 800fd78:	f7f7 fd5c 	bl	8007834 <inet_chksum>
 800fd7c:	8070      	strh	r0, [r6, #2]
      igmp_ip_output_if(p, &src, dest, netif);
 800fd7e:	463b      	mov	r3, r7
 800fd80:	464a      	mov	r2, r9
 800fd82:	a901      	add	r1, sp, #4
 800fd84:	4620      	mov	r0, r4
 800fd86:	f7ff ff9a 	bl	800fcbe <igmp_ip_output_if>
 800fd8a:	e7d1      	b.n	800fd30 <igmp_send+0x44>
 800fd8c:	08018250 	.word	0x08018250
 800fd90:	0801816c 	.word	0x0801816c
 800fd94:	080181a4 	.word	0x080181a4
 800fd98:	08015608 	.word	0x08015608
 800fd9c:	2000187c 	.word	0x2000187c

0800fda0 <igmp_timeout>:
{
 800fda0:	b508      	push	{r3, lr}
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 800fda2:	7a4b      	ldrb	r3, [r1, #9]
 800fda4:	2b01      	cmp	r3, #1
 800fda6:	d000      	beq.n	800fdaa <igmp_timeout+0xa>
}
 800fda8:	bd08      	pop	{r3, pc}
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 800fdaa:	684a      	ldr	r2, [r1, #4]
 800fdac:	4b04      	ldr	r3, [pc, #16]	; (800fdc0 <igmp_timeout+0x20>)
 800fdae:	681b      	ldr	r3, [r3, #0]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d0f9      	beq.n	800fda8 <igmp_timeout+0x8>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 800fdb4:	2302      	movs	r3, #2
 800fdb6:	724b      	strb	r3, [r1, #9]
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 800fdb8:	2216      	movs	r2, #22
 800fdba:	f7ff ff97 	bl	800fcec <igmp_send>
}
 800fdbe:	e7f3      	b.n	800fda8 <igmp_timeout+0x8>
 800fdc0:	20001880 	.word	0x20001880

0800fdc4 <igmp_init>:
  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 800fdc4:	4b03      	ldr	r3, [pc, #12]	; (800fdd4 <igmp_init+0x10>)
 800fdc6:	4a04      	ldr	r2, [pc, #16]	; (800fdd8 <igmp_init+0x14>)
 800fdc8:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 800fdca:	4b04      	ldr	r3, [pc, #16]	; (800fddc <igmp_init+0x18>)
 800fdcc:	f102 7280 	add.w	r2, r2, #16777216	; 0x1000000
 800fdd0:	601a      	str	r2, [r3, #0]
}
 800fdd2:	4770      	bx	lr
 800fdd4:	20001880 	.word	0x20001880
 800fdd8:	010000e0 	.word	0x010000e0
 800fddc:	2000187c 	.word	0x2000187c

0800fde0 <igmp_report_groups>:
{
 800fde0:	b510      	push	{r4, lr}
  struct igmp_group *group = netif_igmp_data(netif);
 800fde2:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
  if (group != NULL) {
 800fde6:	b134      	cbz	r4, 800fdf6 <igmp_report_groups+0x16>
    group = group->next;
 800fde8:	6824      	ldr	r4, [r4, #0]
 800fdea:	e004      	b.n	800fdf6 <igmp_report_groups+0x16>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 800fdec:	2105      	movs	r1, #5
 800fdee:	4620      	mov	r0, r4
 800fdf0:	f7ff ff53 	bl	800fc9a <igmp_delaying_member>
    group = group->next;
 800fdf4:	6824      	ldr	r4, [r4, #0]
  while (group != NULL) {
 800fdf6:	2c00      	cmp	r4, #0
 800fdf8:	d1f8      	bne.n	800fdec <igmp_report_groups+0xc>
}
 800fdfa:	bd10      	pop	{r4, pc}

0800fdfc <igmp_lookfor_group>:
  struct igmp_group *group = netif_igmp_data(ifp);
 800fdfc:	f8d0 00b0 	ldr.w	r0, [r0, #176]	; 0xb0
  while (group != NULL) {
 800fe00:	b128      	cbz	r0, 800fe0e <igmp_lookfor_group+0x12>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 800fe02:	6842      	ldr	r2, [r0, #4]
 800fe04:	680b      	ldr	r3, [r1, #0]
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d001      	beq.n	800fe0e <igmp_lookfor_group+0x12>
    group = group->next;
 800fe0a:	6800      	ldr	r0, [r0, #0]
 800fe0c:	e7f8      	b.n	800fe00 <igmp_lookfor_group+0x4>
}
 800fe0e:	4770      	bx	lr

0800fe10 <igmp_lookup_group>:
{
 800fe10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe12:	4605      	mov	r5, r0
 800fe14:	460e      	mov	r6, r1
  struct igmp_group *list_head = netif_igmp_data(ifp);
 800fe16:	f8d0 70b0 	ldr.w	r7, [r0, #176]	; 0xb0
  group = igmp_lookfor_group(ifp, addr);
 800fe1a:	f7ff ffef 	bl	800fdfc <igmp_lookfor_group>
  if (group != NULL) {
 800fe1e:	4604      	mov	r4, r0
 800fe20:	b108      	cbz	r0, 800fe26 <igmp_lookup_group+0x16>
}
 800fe22:	4620      	mov	r0, r4
 800fe24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 800fe26:	2006      	movs	r0, #6
 800fe28:	f7f8 f81e 	bl	8007e68 <memp_malloc>
  if (group != NULL) {
 800fe2c:	4604      	mov	r4, r0
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	d0f7      	beq.n	800fe22 <igmp_lookup_group+0x12>
    ip4_addr_set(&(group->group_address), addr);
 800fe32:	b186      	cbz	r6, 800fe56 <igmp_lookup_group+0x46>
 800fe34:	6833      	ldr	r3, [r6, #0]
 800fe36:	6063      	str	r3, [r4, #4]
    group->timer              = 0; /* Not running */
 800fe38:	2300      	movs	r3, #0
 800fe3a:	8163      	strh	r3, [r4, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 800fe3c:	7263      	strb	r3, [r4, #9]
    group->last_reporter_flag = 0;
 800fe3e:	7223      	strb	r3, [r4, #8]
    group->use                = 0;
 800fe40:	7323      	strb	r3, [r4, #12]
    if (list_head == NULL) {
 800fe42:	b157      	cbz	r7, 800fe5a <igmp_lookup_group+0x4a>
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 800fe44:	6832      	ldr	r2, [r6, #0]
 800fe46:	4b11      	ldr	r3, [pc, #68]	; (800fe8c <igmp_lookup_group+0x7c>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	d016      	beq.n	800fe7c <igmp_lookup_group+0x6c>
      group->next = list_head->next;
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	6023      	str	r3, [r4, #0]
      list_head->next = group;
 800fe52:	603c      	str	r4, [r7, #0]
 800fe54:	e7e5      	b.n	800fe22 <igmp_lookup_group+0x12>
    ip4_addr_set(&(group->group_address), addr);
 800fe56:	2300      	movs	r3, #0
 800fe58:	e7ed      	b.n	800fe36 <igmp_lookup_group+0x26>
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 800fe5a:	6832      	ldr	r2, [r6, #0]
 800fe5c:	4b0b      	ldr	r3, [pc, #44]	; (800fe8c <igmp_lookup_group+0x7c>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	429a      	cmp	r2, r3
 800fe62:	d006      	beq.n	800fe72 <igmp_lookup_group+0x62>
 800fe64:	4b0a      	ldr	r3, [pc, #40]	; (800fe90 <igmp_lookup_group+0x80>)
 800fe66:	f240 120d 	movw	r2, #269	; 0x10d
 800fe6a:	490a      	ldr	r1, [pc, #40]	; (800fe94 <igmp_lookup_group+0x84>)
 800fe6c:	480a      	ldr	r0, [pc, #40]	; (800fe98 <igmp_lookup_group+0x88>)
 800fe6e:	f004 fbc1 	bl	80145f4 <iprintf>
      group->next = NULL;
 800fe72:	2300      	movs	r3, #0
 800fe74:	6023      	str	r3, [r4, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 800fe76:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
 800fe7a:	e7d2      	b.n	800fe22 <igmp_lookup_group+0x12>
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 800fe7c:	4b04      	ldr	r3, [pc, #16]	; (800fe90 <igmp_lookup_group+0x80>)
 800fe7e:	f240 1213 	movw	r2, #275	; 0x113
 800fe82:	4906      	ldr	r1, [pc, #24]	; (800fe9c <igmp_lookup_group+0x8c>)
 800fe84:	4804      	ldr	r0, [pc, #16]	; (800fe98 <igmp_lookup_group+0x88>)
 800fe86:	f004 fbb5 	bl	80145f4 <iprintf>
 800fe8a:	e7e0      	b.n	800fe4e <igmp_lookup_group+0x3e>
 800fe8c:	20001880 	.word	0x20001880
 800fe90:	0801816c 	.word	0x0801816c
 800fe94:	080180f4 	.word	0x080180f4
 800fe98:	08015608 	.word	0x08015608
 800fe9c:	08018128 	.word	0x08018128

0800fea0 <igmp_start>:
{
 800fea0:	b510      	push	{r4, lr}
 800fea2:	4604      	mov	r4, r0
  group = igmp_lookup_group(netif, &allsystems);
 800fea4:	490b      	ldr	r1, [pc, #44]	; (800fed4 <igmp_start+0x34>)
 800fea6:	f7ff ffb3 	bl	800fe10 <igmp_lookup_group>
  if (group != NULL) {
 800feaa:	b168      	cbz	r0, 800fec8 <igmp_start+0x28>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 800feac:	2202      	movs	r2, #2
 800feae:	7242      	strb	r2, [r0, #9]
    group->use++;
 800feb0:	7b02      	ldrb	r2, [r0, #12]
 800feb2:	3201      	adds	r2, #1
 800feb4:	7302      	strb	r2, [r0, #12]
    if (netif->igmp_mac_filter != NULL) {
 800feb6:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800feba:	b143      	cbz	r3, 800fece <igmp_start+0x2e>
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 800febc:	2201      	movs	r2, #1
 800febe:	4905      	ldr	r1, [pc, #20]	; (800fed4 <igmp_start+0x34>)
 800fec0:	4620      	mov	r0, r4
 800fec2:	4798      	blx	r3
    return ERR_OK;
 800fec4:	2000      	movs	r0, #0
}
 800fec6:	bd10      	pop	{r4, pc}
  return ERR_MEM;
 800fec8:	f04f 30ff 	mov.w	r0, #4294967295
 800fecc:	e7fb      	b.n	800fec6 <igmp_start+0x26>
    return ERR_OK;
 800fece:	2000      	movs	r0, #0
 800fed0:	e7f9      	b.n	800fec6 <igmp_start+0x26>
 800fed2:	bf00      	nop
 800fed4:	20001880 	.word	0x20001880

0800fed8 <igmp_input>:
{
 800fed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800feda:	b083      	sub	sp, #12
 800fedc:	4604      	mov	r4, r0
 800fede:	460f      	mov	r7, r1
  if (p->len < IGMP_MINLEN) {
 800fee0:	8941      	ldrh	r1, [r0, #10]
 800fee2:	2907      	cmp	r1, #7
 800fee4:	d914      	bls.n	800ff10 <igmp_input+0x38>
 800fee6:	4616      	mov	r6, r2
  igmp = (struct igmp_msg *)p->payload;
 800fee8:	6845      	ldr	r5, [r0, #4]
  if (inet_chksum(igmp, p->len)) {
 800feea:	4628      	mov	r0, r5
 800feec:	f7f7 fca2 	bl	8007834 <inet_chksum>
 800fef0:	b990      	cbnz	r0, 800ff18 <igmp_input+0x40>
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 800fef2:	4631      	mov	r1, r6
 800fef4:	4638      	mov	r0, r7
 800fef6:	f7ff ff81 	bl	800fdfc <igmp_lookfor_group>
  if (!group) {
 800fefa:	4602      	mov	r2, r0
 800fefc:	b180      	cbz	r0, 800ff20 <igmp_input+0x48>
  switch (igmp->igmp_msgtype) {
 800fefe:	782b      	ldrb	r3, [r5, #0]
 800ff00:	2b11      	cmp	r3, #17
 800ff02:	d011      	beq.n	800ff28 <igmp_input+0x50>
 800ff04:	2b16      	cmp	r3, #22
 800ff06:	d042      	beq.n	800ff8e <igmp_input+0xb6>
  pbuf_free(p);
 800ff08:	4620      	mov	r0, r4
 800ff0a:	f7f8 fc0d 	bl	8008728 <pbuf_free>
  return;
 800ff0e:	e001      	b.n	800ff14 <igmp_input+0x3c>
    pbuf_free(p);
 800ff10:	f7f8 fc0a 	bl	8008728 <pbuf_free>
}
 800ff14:	b003      	add	sp, #12
 800ff16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pbuf_free(p);
 800ff18:	4620      	mov	r0, r4
 800ff1a:	f7f8 fc05 	bl	8008728 <pbuf_free>
    return;
 800ff1e:	e7f9      	b.n	800ff14 <igmp_input+0x3c>
    pbuf_free(p);
 800ff20:	4620      	mov	r0, r4
 800ff22:	f7f8 fc01 	bl	8008728 <pbuf_free>
    return;
 800ff26:	e7f5      	b.n	800ff14 <igmp_input+0x3c>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 800ff28:	6831      	ldr	r1, [r6, #0]
 800ff2a:	4b1d      	ldr	r3, [pc, #116]	; (800ffa0 <igmp_input+0xc8>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	4299      	cmp	r1, r3
 800ff30:	d00e      	beq.n	800ff50 <igmp_input+0x78>
        if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 800ff32:	f115 0f04 	cmn.w	r5, #4
 800ff36:	d0e7      	beq.n	800ff08 <igmp_input+0x30>
 800ff38:	6868      	ldr	r0, [r5, #4]
 800ff3a:	2800      	cmp	r0, #0
 800ff3c:	d0e4      	beq.n	800ff08 <igmp_input+0x30>
          if (ip4_addr_cmp(dest, &allsystems)) {
 800ff3e:	4299      	cmp	r1, r3
 800ff40:	d01d      	beq.n	800ff7e <igmp_input+0xa6>
          if (group != NULL) {
 800ff42:	2a00      	cmp	r2, #0
 800ff44:	d0e0      	beq.n	800ff08 <igmp_input+0x30>
            igmp_delaying_member(group, igmp->igmp_maxresp);
 800ff46:	7869      	ldrb	r1, [r5, #1]
 800ff48:	4610      	mov	r0, r2
 800ff4a:	f7ff fea6 	bl	800fc9a <igmp_delaying_member>
 800ff4e:	e7db      	b.n	800ff08 <igmp_input+0x30>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 800ff50:	f115 0f04 	cmn.w	r5, #4
 800ff54:	d002      	beq.n	800ff5c <igmp_input+0x84>
 800ff56:	6868      	ldr	r0, [r5, #4]
 800ff58:	2800      	cmp	r0, #0
 800ff5a:	d1ea      	bne.n	800ff32 <igmp_input+0x5a>
        if (igmp->igmp_maxresp == 0) {
 800ff5c:	786b      	ldrb	r3, [r5, #1]
 800ff5e:	b90b      	cbnz	r3, 800ff64 <igmp_input+0x8c>
          igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 800ff60:	230a      	movs	r3, #10
 800ff62:	706b      	strb	r3, [r5, #1]
        groupref = netif_igmp_data(inp);
 800ff64:	f8d7 60b0 	ldr.w	r6, [r7, #176]	; 0xb0
        if (groupref != NULL) {
 800ff68:	b136      	cbz	r6, 800ff78 <igmp_input+0xa0>
          groupref = groupref->next;
 800ff6a:	6836      	ldr	r6, [r6, #0]
 800ff6c:	e004      	b.n	800ff78 <igmp_input+0xa0>
          igmp_delaying_member(groupref, igmp->igmp_maxresp);
 800ff6e:	7869      	ldrb	r1, [r5, #1]
 800ff70:	4630      	mov	r0, r6
 800ff72:	f7ff fe92 	bl	800fc9a <igmp_delaying_member>
          groupref = groupref->next;
 800ff76:	6836      	ldr	r6, [r6, #0]
        while (groupref) {
 800ff78:	2e00      	cmp	r6, #0
 800ff7a:	d1f8      	bne.n	800ff6e <igmp_input+0x96>
 800ff7c:	e7c4      	b.n	800ff08 <igmp_input+0x30>
            ip4_addr_copy(groupaddr, igmp->igmp_group_address);
 800ff7e:	a902      	add	r1, sp, #8
 800ff80:	f841 0d04 	str.w	r0, [r1, #-4]!
            group = igmp_lookfor_group(inp, &groupaddr);
 800ff84:	4638      	mov	r0, r7
 800ff86:	f7ff ff39 	bl	800fdfc <igmp_lookfor_group>
 800ff8a:	4602      	mov	r2, r0
 800ff8c:	e7d9      	b.n	800ff42 <igmp_input+0x6a>
      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 800ff8e:	7a43      	ldrb	r3, [r0, #9]
 800ff90:	2b01      	cmp	r3, #1
 800ff92:	d1b9      	bne.n	800ff08 <igmp_input+0x30>
        group->timer = 0; /* stopped */
 800ff94:	2300      	movs	r3, #0
 800ff96:	8143      	strh	r3, [r0, #10]
        group->group_state = IGMP_GROUP_IDLE_MEMBER;
 800ff98:	2102      	movs	r1, #2
 800ff9a:	7241      	strb	r1, [r0, #9]
        group->last_reporter_flag = 0;
 800ff9c:	7203      	strb	r3, [r0, #8]
 800ff9e:	e7b3      	b.n	800ff08 <igmp_input+0x30>
 800ffa0:	20001880 	.word	0x20001880

0800ffa4 <igmp_tmr>:
{
 800ffa4:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 800ffa6:	4b0b      	ldr	r3, [pc, #44]	; (800ffd4 <igmp_tmr+0x30>)
 800ffa8:	681d      	ldr	r5, [r3, #0]
 800ffaa:	b18d      	cbz	r5, 800ffd0 <igmp_tmr+0x2c>
    struct igmp_group *group = netif_igmp_data(netif);
 800ffac:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
    while (group != NULL) {
 800ffb0:	e000      	b.n	800ffb4 <igmp_tmr+0x10>
      group = group->next;
 800ffb2:	6824      	ldr	r4, [r4, #0]
    while (group != NULL) {
 800ffb4:	b164      	cbz	r4, 800ffd0 <igmp_tmr+0x2c>
      if (group->timer > 0) {
 800ffb6:	8963      	ldrh	r3, [r4, #10]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d0fa      	beq.n	800ffb2 <igmp_tmr+0xe>
        group->timer--;
 800ffbc:	3b01      	subs	r3, #1
 800ffbe:	b29b      	uxth	r3, r3
 800ffc0:	8163      	strh	r3, [r4, #10]
        if (group->timer == 0) {
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d1f5      	bne.n	800ffb2 <igmp_tmr+0xe>
          igmp_timeout(netif, group);
 800ffc6:	4621      	mov	r1, r4
 800ffc8:	4628      	mov	r0, r5
 800ffca:	f7ff fee9 	bl	800fda0 <igmp_timeout>
 800ffce:	e7f0      	b.n	800ffb2 <igmp_tmr+0xe>
}
 800ffd0:	bd38      	pop	{r3, r4, r5, pc}
 800ffd2:	bf00      	nop
 800ffd4:	20008c38 	.word	0x20008c38

0800ffd8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ffd8:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ffda:	f890 30c3 	ldrb.w	r3, [r0, #195]	; 0xc3
 800ffde:	f013 0f01 	tst.w	r3, #1
 800ffe2:	d00c      	beq.n	800fffe <ip4_input_accept+0x26>
 800ffe4:	6803      	ldr	r3, [r0, #0]
 800ffe6:	b163      	cbz	r3, 8010002 <ip4_input_accept+0x2a>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ffe8:	4a08      	ldr	r2, [pc, #32]	; (801000c <ip4_input_accept+0x34>)
 800ffea:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ffec:	4293      	cmp	r3, r2
 800ffee:	d00a      	beq.n	8010006 <ip4_input_accept+0x2e>
 800fff0:	4601      	mov	r1, r0
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fff2:	4610      	mov	r0, r2
 800fff4:	f000 fa08 	bl	8010408 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fff8:	b110      	cbz	r0, 8010000 <ip4_input_accept+0x28>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800fffa:	2001      	movs	r0, #1
 800fffc:	e000      	b.n	8010000 <ip4_input_accept+0x28>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800fffe:	2000      	movs	r0, #0
}
 8010000:	bd08      	pop	{r3, pc}
  return 0;
 8010002:	2000      	movs	r0, #0
 8010004:	e7fc      	b.n	8010000 <ip4_input_accept+0x28>
      return 1;
 8010006:	2001      	movs	r0, #1
 8010008:	e7fa      	b.n	8010000 <ip4_input_accept+0x28>
 801000a:	bf00      	nop
 801000c:	20004b84 	.word	0x20004b84

08010010 <ip4_route>:
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010010:	4b0a      	ldr	r3, [pc, #40]	; (801003c <ip4_route+0x2c>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	b153      	cbz	r3, 801002c <ip4_route+0x1c>
 8010016:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
 801001a:	f002 0205 	and.w	r2, r2, #5
 801001e:	2a05      	cmp	r2, #5
 8010020:	d108      	bne.n	8010034 <ip4_route+0x24>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010022:	681a      	ldr	r2, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010024:	b142      	cbz	r2, 8010038 <ip4_route+0x28>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010026:	7802      	ldrb	r2, [r0, #0]
 8010028:	2a7f      	cmp	r2, #127	; 0x7f
 801002a:	d001      	beq.n	8010030 <ip4_route+0x20>
}
 801002c:	4618      	mov	r0, r3
 801002e:	4770      	bx	lr
    return NULL;
 8010030:	2300      	movs	r3, #0
 8010032:	e7fb      	b.n	801002c <ip4_route+0x1c>
 8010034:	2300      	movs	r3, #0
 8010036:	e7f9      	b.n	801002c <ip4_route+0x1c>
 8010038:	2300      	movs	r3, #0
 801003a:	e7f7      	b.n	801002c <ip4_route+0x1c>
 801003c:	20008c38 	.word	0x20008c38

08010040 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010044:	4604      	mov	r4, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010046:	6846      	ldr	r6, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 8010048:	7833      	ldrb	r3, [r6, #0]
 801004a:	091a      	lsrs	r2, r3, #4
 801004c:	2a04      	cmp	r2, #4
 801004e:	d004      	beq.n	801005a <ip4_input+0x1a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010050:	f7f8 fb6a 	bl	8008728 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8010054:	2000      	movs	r0, #0
 8010056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801005a:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801005c:	f003 030f 	and.w	r3, r3, #15
 8010060:	009d      	lsls	r5, r3, #2
 8010062:	fa1f f985 	uxth.w	r9, r5
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010066:	8870      	ldrh	r0, [r6, #2]
 8010068:	f7f7 f8c0 	bl	80071ec <lwip_htons>
 801006c:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 801006e:	8923      	ldrh	r3, [r4, #8]
 8010070:	4283      	cmp	r3, r0
 8010072:	d858      	bhi.n	8010126 <ip4_input+0xe6>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010074:	8963      	ldrh	r3, [r4, #10]
 8010076:	454b      	cmp	r3, r9
 8010078:	d35a      	bcc.n	8010130 <ip4_input+0xf0>
 801007a:	8923      	ldrh	r3, [r4, #8]
 801007c:	4543      	cmp	r3, r8
 801007e:	d357      	bcc.n	8010130 <ip4_input+0xf0>
 8010080:	f1b9 0f13 	cmp.w	r9, #19
 8010084:	d954      	bls.n	8010130 <ip4_input+0xf0>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010086:	6931      	ldr	r1, [r6, #16]
 8010088:	4b65      	ldr	r3, [pc, #404]	; (8010220 <ip4_input+0x1e0>)
 801008a:	6299      	str	r1, [r3, #40]	; 0x28
 801008c:	2200      	movs	r2, #0
 801008e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8010092:	635a      	str	r2, [r3, #52]	; 0x34
 8010094:	631a      	str	r2, [r3, #48]	; 0x30
 8010096:	62da      	str	r2, [r3, #44]	; 0x2c
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010098:	68f0      	ldr	r0, [r6, #12]
 801009a:	6158      	str	r0, [r3, #20]
 801009c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80100a0:	621a      	str	r2, [r3, #32]
 80100a2:	61da      	str	r2, [r3, #28]
 80100a4:	619a      	str	r2, [r3, #24]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80100a6:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 80100aa:	29e0      	cmp	r1, #224	; 0xe0
 80100ac:	d157      	bne.n	801015e <ip4_input+0x11e>
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 80100ae:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80100b2:	f013 0f20 	tst.w	r3, #32
 80100b6:	d13f      	bne.n	8010138 <ip4_input+0xf8>
  int check_ip_src = 1;
 80100b8:	2301      	movs	r3, #1
      netif = NULL;
 80100ba:	f04f 0800 	mov.w	r8, #0
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80100be:	7a72      	ldrb	r2, [r6, #9]
 80100c0:	2a11      	cmp	r2, #17
 80100c2:	d05e      	beq.n	8010182 <ip4_input+0x142>
  if (check_ip_src
 80100c4:	b11b      	cbz	r3, 80100ce <ip4_input+0x8e>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80100c6:	4b56      	ldr	r3, [pc, #344]	; (8010220 <ip4_input+0x1e0>)
 80100c8:	6958      	ldr	r0, [r3, #20]
 80100ca:	2800      	cmp	r0, #0
 80100cc:	d160      	bne.n	8010190 <ip4_input+0x150>
  if (netif == NULL) {
 80100ce:	f1b8 0f00 	cmp.w	r8, #0
 80100d2:	d06b      	beq.n	80101ac <ip4_input+0x16c>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80100d4:	88f3      	ldrh	r3, [r6, #6]
 80100d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80100da:	b29b      	uxth	r3, r3
 80100dc:	b133      	cbz	r3, 80100ec <ip4_input+0xac>
    p = ip4_reass(p);
 80100de:	4620      	mov	r0, r4
 80100e0:	f000 fbe6 	bl	80108b0 <ip4_reass>
    if (p == NULL) {
 80100e4:	4604      	mov	r4, r0
 80100e6:	2800      	cmp	r0, #0
 80100e8:	d0b4      	beq.n	8010054 <ip4_input+0x14>
    iphdr = (const struct ip_hdr *)p->payload;
 80100ea:	6846      	ldr	r6, [r0, #4]
  ip_data.current_netif = netif;
 80100ec:	4a4c      	ldr	r2, [pc, #304]	; (8010220 <ip4_input+0x1e0>)
 80100ee:	f8c2 8000 	str.w	r8, [r2]
  ip_data.current_input_netif = inp;
 80100f2:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80100f4:	6096      	str	r6, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80100f6:	7833      	ldrb	r3, [r6, #0]
 80100f8:	f003 030f 	and.w	r3, r3, #15
 80100fc:	009b      	lsls	r3, r3, #2
 80100fe:	8213      	strh	r3, [r2, #16]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010100:	4629      	mov	r1, r5
 8010102:	4620      	mov	r0, r4
 8010104:	f7f8 faca 	bl	800869c <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 8010108:	7a73      	ldrb	r3, [r6, #9]
 801010a:	3b01      	subs	r3, #1
 801010c:	2b10      	cmp	r3, #16
 801010e:	d86e      	bhi.n	80101ee <ip4_input+0x1ae>
 8010110:	e8df f003 	tbb	[pc, r3]
 8010114:	6d6d6762 	.word	0x6d6d6762
 8010118:	6d6d5d6d 	.word	0x6d6d5d6d
 801011c:	6d6d6d6d 	.word	0x6d6d6d6d
 8010120:	6d6d6d6d 	.word	0x6d6d6d6d
 8010124:	50          	.byte	0x50
 8010125:	00          	.byte	0x00
    pbuf_realloc(p, iphdr_len);
 8010126:	4601      	mov	r1, r0
 8010128:	4620      	mov	r0, r4
 801012a:	f7f8 fc0d 	bl	8008948 <pbuf_realloc>
 801012e:	e7a1      	b.n	8010074 <ip4_input+0x34>
    pbuf_free(p);
 8010130:	4620      	mov	r0, r4
 8010132:	f7f8 faf9 	bl	8008728 <pbuf_free>
    return ERR_OK;
 8010136:	e78d      	b.n	8010054 <ip4_input+0x14>
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 8010138:	493a      	ldr	r1, [pc, #232]	; (8010224 <ip4_input+0x1e4>)
 801013a:	4638      	mov	r0, r7
 801013c:	f7ff fe5e 	bl	800fdfc <igmp_lookfor_group>
 8010140:	b1b8      	cbz	r0, 8010172 <ip4_input+0x132>
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 8010142:	4b37      	ldr	r3, [pc, #220]	; (8010220 <ip4_input+0x1e0>)
 8010144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010146:	4b38      	ldr	r3, [pc, #224]	; (8010228 <ip4_input+0x1e8>)
 8010148:	429a      	cmp	r2, r3
 801014a:	d001      	beq.n	8010150 <ip4_input+0x110>
  int check_ip_src = 1;
 801014c:	2301      	movs	r3, #1
 801014e:	e00b      	b.n	8010168 <ip4_input+0x128>
          ip4_addr_isany(ip4_current_src_addr())) {
 8010150:	4b33      	ldr	r3, [pc, #204]	; (8010220 <ip4_input+0x1e0>)
 8010152:	695b      	ldr	r3, [r3, #20]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 8010154:	b10b      	cbz	r3, 801015a <ip4_input+0x11a>
  int check_ip_src = 1;
 8010156:	2301      	movs	r3, #1
 8010158:	e006      	b.n	8010168 <ip4_input+0x128>
        check_ip_src = 0;
 801015a:	2300      	movs	r3, #0
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 801015c:	e004      	b.n	8010168 <ip4_input+0x128>
    if (ip4_input_accept(inp)) {
 801015e:	4638      	mov	r0, r7
 8010160:	f7ff ff3a 	bl	800ffd8 <ip4_input_accept>
 8010164:	b148      	cbz	r0, 801017a <ip4_input+0x13a>
  int check_ip_src = 1;
 8010166:	2301      	movs	r3, #1
  if (netif == NULL) {
 8010168:	b10f      	cbz	r7, 801016e <ip4_input+0x12e>
 801016a:	46b8      	mov	r8, r7
 801016c:	e7aa      	b.n	80100c4 <ip4_input+0x84>
 801016e:	46b8      	mov	r8, r7
 8010170:	e7a5      	b.n	80100be <ip4_input+0x7e>
  int check_ip_src = 1;
 8010172:	2301      	movs	r3, #1
      netif = NULL;
 8010174:	f04f 0800 	mov.w	r8, #0
 8010178:	e7a1      	b.n	80100be <ip4_input+0x7e>
  int check_ip_src = 1;
 801017a:	2301      	movs	r3, #1
      netif = NULL;
 801017c:	f04f 0800 	mov.w	r8, #0
 8010180:	e79d      	b.n	80100be <ip4_input+0x7e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8010182:	1972      	adds	r2, r6, r5
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8010184:	8852      	ldrh	r2, [r2, #2]
 8010186:	f5b2 4f88 	cmp.w	r2, #17408	; 0x4400
 801018a:	d19b      	bne.n	80100c4 <ip4_input+0x84>
        netif = inp;
 801018c:	46b8      	mov	r8, r7
 801018e:	e79e      	b.n	80100ce <ip4_input+0x8e>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010190:	4639      	mov	r1, r7
 8010192:	f000 f939 	bl	8010408 <ip4_addr_isbroadcast_u32>
 8010196:	b928      	cbnz	r0, 80101a4 <ip4_input+0x164>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010198:	4b21      	ldr	r3, [pc, #132]	; (8010220 <ip4_input+0x1e0>)
 801019a:	695b      	ldr	r3, [r3, #20]
 801019c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80101a0:	2be0      	cmp	r3, #224	; 0xe0
 80101a2:	d194      	bne.n	80100ce <ip4_input+0x8e>
      pbuf_free(p);
 80101a4:	4620      	mov	r0, r4
 80101a6:	f7f8 fabf 	bl	8008728 <pbuf_free>
      return ERR_OK;
 80101aa:	e753      	b.n	8010054 <ip4_input+0x14>
    pbuf_free(p);
 80101ac:	4620      	mov	r0, r4
 80101ae:	f7f8 fabb 	bl	8008728 <pbuf_free>
    return ERR_OK;
 80101b2:	e74f      	b.n	8010054 <ip4_input+0x14>
        udp_input(p, inp);
 80101b4:	4639      	mov	r1, r7
 80101b6:	4620      	mov	r0, r4
 80101b8:	f7fc ff54 	bl	800d064 <udp_input>
  ip_data.current_netif = NULL;
 80101bc:	4b18      	ldr	r3, [pc, #96]	; (8010220 <ip4_input+0x1e0>)
 80101be:	2200      	movs	r2, #0
 80101c0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80101c2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80101c4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80101c6:	821a      	strh	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_src_addr());
 80101c8:	615a      	str	r2, [r3, #20]
  ip4_addr_set_any(ip4_current_dest_addr());
 80101ca:	629a      	str	r2, [r3, #40]	; 0x28
  return ERR_OK;
 80101cc:	e742      	b.n	8010054 <ip4_input+0x14>
        tcp_input(p, inp);
 80101ce:	4639      	mov	r1, r7
 80101d0:	4620      	mov	r0, r4
 80101d2:	f7fb f9a9 	bl	800b528 <tcp_input>
        break;
 80101d6:	e7f1      	b.n	80101bc <ip4_input+0x17c>
        icmp_input(p, inp);
 80101d8:	4639      	mov	r1, r7
 80101da:	4620      	mov	r0, r4
 80101dc:	f7ff fc9a 	bl	800fb14 <icmp_input>
        break;
 80101e0:	e7ec      	b.n	80101bc <ip4_input+0x17c>
        igmp_input(p, inp, ip4_current_dest_addr());
 80101e2:	4a10      	ldr	r2, [pc, #64]	; (8010224 <ip4_input+0x1e4>)
 80101e4:	4639      	mov	r1, r7
 80101e6:	4620      	mov	r0, r4
 80101e8:	f7ff fe76 	bl	800fed8 <igmp_input>
        break;
 80101ec:	e7e6      	b.n	80101bc <ip4_input+0x17c>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80101ee:	4641      	mov	r1, r8
 80101f0:	4b0b      	ldr	r3, [pc, #44]	; (8010220 <ip4_input+0x1e0>)
 80101f2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80101f4:	f000 f908 	bl	8010408 <ip4_addr_isbroadcast_u32>
 80101f8:	b928      	cbnz	r0, 8010206 <ip4_input+0x1c6>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80101fa:	4b09      	ldr	r3, [pc, #36]	; (8010220 <ip4_input+0x1e0>)
 80101fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010202:	2be0      	cmp	r3, #224	; 0xe0
 8010204:	d103      	bne.n	801020e <ip4_input+0x1ce>
        pbuf_free(p);
 8010206:	4620      	mov	r0, r4
 8010208:	f7f8 fa8e 	bl	8008728 <pbuf_free>
        break;
 801020c:	e7d6      	b.n	80101bc <ip4_input+0x17c>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801020e:	4629      	mov	r1, r5
 8010210:	4620      	mov	r0, r4
 8010212:	f7f8 fa83 	bl	800871c <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010216:	2102      	movs	r1, #2
 8010218:	4620      	mov	r0, r4
 801021a:	f7ff fd1f 	bl	800fc5c <icmp_dest_unreach>
 801021e:	e7f2      	b.n	8010206 <ip4_input+0x1c6>
 8010220:	20004b84 	.word	0x20004b84
 8010224:	20004bac 	.word	0x20004bac
 8010228:	010000e0 	.word	0x010000e0

0801022c <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                      u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                      u16_t optlen)
{
 801022c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010230:	b083      	sub	sp, #12
 8010232:	4605      	mov	r5, r0
 8010234:	4689      	mov	r9, r1
 8010236:	4617      	mov	r7, r2
 8010238:	469a      	mov	sl, r3
 801023a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 801023e:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010242:	7b83      	ldrb	r3, [r0, #14]
 8010244:	2b01      	cmp	r3, #1
 8010246:	d15a      	bne.n	80102fe <ip4_output_if_opt_src+0xd2>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8010248:	2f00      	cmp	r7, #0
 801024a:	d076      	beq.n	801033a <ip4_output_if_opt_src+0x10e>
    u16_t ip_hlen = IP_HLEN;
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
    if (optlen != 0) {
 801024c:	f1bb 0f00 	cmp.w	fp, #0
 8010250:	d065      	beq.n	801031e <ip4_output_if_opt_src+0xf2>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
 8010252:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8010256:	f200 8082 	bhi.w	801035e <ip4_output_if_opt_src+0x132>
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_VAL;
      }
      /* round up to a multiple of 4 */
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
 801025a:	f10b 0403 	add.w	r4, fp, #3
 801025e:	b2a4      	uxth	r4, r4
 8010260:	f024 0403 	bic.w	r4, r4, #3
 8010264:	b2a4      	uxth	r4, r4
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
 8010266:	f104 0614 	add.w	r6, r4, #20
 801026a:	b2b6      	uxth	r6, r6
      /* First write in the IP options */
      if (pbuf_add_header(p, optlen_aligned)) {
 801026c:	4621      	mov	r1, r4
 801026e:	4628      	mov	r0, r5
 8010270:	f7f8 fa09 	bl	8008686 <pbuf_add_header>
 8010274:	2800      	cmp	r0, #0
 8010276:	d175      	bne.n	8010364 <ip4_output_if_opt_src+0x138>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
      }
      MEMCPY(p->payload, ip_options, optlen);
 8010278:	465a      	mov	r2, fp
 801027a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801027c:	6868      	ldr	r0, [r5, #4]
 801027e:	f004 f98c 	bl	801459a <memcpy>
      if (optlen < optlen_aligned) {
 8010282:	45a3      	cmp	fp, r4
 8010284:	d343      	bcc.n	801030e <ip4_output_if_opt_src+0xe2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010286:	2114      	movs	r1, #20
 8010288:	4628      	mov	r0, r5
 801028a:	f7f8 f9fc 	bl	8008686 <pbuf_add_header>
 801028e:	2800      	cmp	r0, #0
 8010290:	d16b      	bne.n	801036a <ip4_output_if_opt_src+0x13e>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 8010292:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010294:	896b      	ldrh	r3, [r5, #10]
 8010296:	2b13      	cmp	r3, #19
 8010298:	d943      	bls.n	8010322 <ip4_output_if_opt_src+0xf6>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801029a:	f884 a008 	strb.w	sl, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 801029e:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 80102a2:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80102a8:	08b6      	lsrs	r6, r6, #2
 80102aa:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 80102ae:	7026      	strb	r6, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 80102b0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80102b4:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80102b6:	8928      	ldrh	r0, [r5, #8]
 80102b8:	f7f6 ff98 	bl	80071ec <lwip_htons>
 80102bc:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80102be:	2300      	movs	r3, #0
 80102c0:	71a3      	strb	r3, [r4, #6]
 80102c2:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80102c4:	4e2c      	ldr	r6, [pc, #176]	; (8010378 <ip4_output_if_opt_src+0x14c>)
 80102c6:	8830      	ldrh	r0, [r6, #0]
 80102c8:	f7f6 ff90 	bl	80071ec <lwip_htons>
 80102cc:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80102ce:	8833      	ldrh	r3, [r6, #0]
 80102d0:	3301      	adds	r3, #1
 80102d2:	8033      	strh	r3, [r6, #0]

    if (src == NULL) {
 80102d4:	f1b9 0f00 	cmp.w	r9, #0
 80102d8:	d02b      	beq.n	8010332 <ip4_output_if_opt_src+0x106>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80102da:	f8d9 3000 	ldr.w	r3, [r9]
 80102de:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80102e0:	2300      	movs	r3, #0
 80102e2:	72a3      	strb	r3, [r4, #10]
 80102e4:	72e3      	strb	r3, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80102e6:	f8b8 30b8 	ldrh.w	r3, [r8, #184]	; 0xb8
 80102ea:	bb7b      	cbnz	r3, 801034c <ip4_output_if_opt_src+0x120>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80102ec:	f8d8 3098 	ldr.w	r3, [r8, #152]	; 0x98
 80102f0:	463a      	mov	r2, r7
 80102f2:	4629      	mov	r1, r5
 80102f4:	4640      	mov	r0, r8
 80102f6:	4798      	blx	r3
}
 80102f8:	b003      	add	sp, #12
 80102fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80102fe:	4b1f      	ldr	r3, [pc, #124]	; (801037c <ip4_output_if_opt_src+0x150>)
 8010300:	f44f 7255 	mov.w	r2, #852	; 0x354
 8010304:	491e      	ldr	r1, [pc, #120]	; (8010380 <ip4_output_if_opt_src+0x154>)
 8010306:	481f      	ldr	r0, [pc, #124]	; (8010384 <ip4_output_if_opt_src+0x158>)
 8010308:	f004 f974 	bl	80145f4 <iprintf>
 801030c:	e79c      	b.n	8010248 <ip4_output_if_opt_src+0x1c>
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
 801030e:	6868      	ldr	r0, [r5, #4]
 8010310:	eba4 020b 	sub.w	r2, r4, fp
 8010314:	2100      	movs	r1, #0
 8010316:	4458      	add	r0, fp
 8010318:	f004 f963 	bl	80145e2 <memset>
 801031c:	e7b3      	b.n	8010286 <ip4_output_if_opt_src+0x5a>
    u16_t ip_hlen = IP_HLEN;
 801031e:	2614      	movs	r6, #20
 8010320:	e7b1      	b.n	8010286 <ip4_output_if_opt_src+0x5a>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010322:	4b16      	ldr	r3, [pc, #88]	; (801037c <ip4_output_if_opt_src+0x150>)
 8010324:	f240 3289 	movw	r2, #905	; 0x389
 8010328:	4917      	ldr	r1, [pc, #92]	; (8010388 <ip4_output_if_opt_src+0x15c>)
 801032a:	4816      	ldr	r0, [pc, #88]	; (8010384 <ip4_output_if_opt_src+0x158>)
 801032c:	f004 f962 	bl	80145f4 <iprintf>
 8010330:	e7b3      	b.n	801029a <ip4_output_if_opt_src+0x6e>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010332:	4b16      	ldr	r3, [pc, #88]	; (801038c <ip4_output_if_opt_src+0x160>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	60e3      	str	r3, [r4, #12]
 8010338:	e7d2      	b.n	80102e0 <ip4_output_if_opt_src+0xb4>
    if (p->len < IP_HLEN) {
 801033a:	896b      	ldrh	r3, [r5, #10]
 801033c:	2b13      	cmp	r3, #19
 801033e:	d917      	bls.n	8010370 <ip4_output_if_opt_src+0x144>
    iphdr = (struct ip_hdr *)p->payload;
 8010340:	686b      	ldr	r3, [r5, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010342:	691b      	ldr	r3, [r3, #16]
 8010344:	af02      	add	r7, sp, #8
 8010346:	f847 3d04 	str.w	r3, [r7, #-4]!
 801034a:	e7cc      	b.n	80102e6 <ip4_output_if_opt_src+0xba>
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801034c:	892a      	ldrh	r2, [r5, #8]
 801034e:	4293      	cmp	r3, r2
 8010350:	d2cc      	bcs.n	80102ec <ip4_output_if_opt_src+0xc0>
    return ip4_frag(p, netif, dest);
 8010352:	463a      	mov	r2, r7
 8010354:	4641      	mov	r1, r8
 8010356:	4628      	mov	r0, r5
 8010358:	f000 fbba 	bl	8010ad0 <ip4_frag>
 801035c:	e7cc      	b.n	80102f8 <ip4_output_if_opt_src+0xcc>
        return ERR_VAL;
 801035e:	f06f 0005 	mvn.w	r0, #5
 8010362:	e7c9      	b.n	80102f8 <ip4_output_if_opt_src+0xcc>
        return ERR_BUF;
 8010364:	f06f 0001 	mvn.w	r0, #1
 8010368:	e7c6      	b.n	80102f8 <ip4_output_if_opt_src+0xcc>
      return ERR_BUF;
 801036a:	f06f 0001 	mvn.w	r0, #1
 801036e:	e7c3      	b.n	80102f8 <ip4_output_if_opt_src+0xcc>
      return ERR_BUF;
 8010370:	f06f 0001 	mvn.w	r0, #1
 8010374:	e7c0      	b.n	80102f8 <ip4_output_if_opt_src+0xcc>
 8010376:	bf00      	nop
 8010378:	20001884 	.word	0x20001884
 801037c:	080181e0 	.word	0x080181e0
 8010380:	08018214 	.word	0x08018214
 8010384:	08015608 	.word	0x08015608
 8010388:	08018220 	.word	0x08018220
 801038c:	08018250 	.word	0x08018250

08010390 <ip4_output_if_opt>:
{
 8010390:	b530      	push	{r4, r5, lr}
 8010392:	b087      	sub	sp, #28
 8010394:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  if (dest != LWIP_IP_HDRINCL) {
 8010396:	4615      	mov	r5, r2
 8010398:	b11a      	cbz	r2, 80103a2 <ip4_output_if_opt+0x12>
    if (ip4_addr_isany(src)) {
 801039a:	b109      	cbz	r1, 80103a0 <ip4_output_if_opt+0x10>
 801039c:	680a      	ldr	r2, [r1, #0]
 801039e:	b902      	cbnz	r2, 80103a2 <ip4_output_if_opt+0x12>
      src_used = netif_ip4_addr(netif);
 80103a0:	4621      	mov	r1, r4
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 80103a2:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80103a6:	9204      	str	r2, [sp, #16]
 80103a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80103aa:	9203      	str	r2, [sp, #12]
 80103ac:	9402      	str	r4, [sp, #8]
 80103ae:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80103b2:	9201      	str	r2, [sp, #4]
 80103b4:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 80103b8:	9200      	str	r2, [sp, #0]
 80103ba:	462a      	mov	r2, r5
 80103bc:	f7ff ff36 	bl	801022c <ip4_output_if_opt_src>
}
 80103c0:	b007      	add	sp, #28
 80103c2:	bd30      	pop	{r4, r5, pc}

080103c4 <ip4_output_if>:
{
 80103c4:	b510      	push	{r4, lr}
 80103c6:	b086      	sub	sp, #24
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 80103c8:	2400      	movs	r4, #0
 80103ca:	9404      	str	r4, [sp, #16]
 80103cc:	9403      	str	r4, [sp, #12]
 80103ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80103d0:	9402      	str	r4, [sp, #8]
 80103d2:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80103d6:	9401      	str	r4, [sp, #4]
 80103d8:	f89d 4020 	ldrb.w	r4, [sp, #32]
 80103dc:	9400      	str	r4, [sp, #0]
 80103de:	f7ff ffd7 	bl	8010390 <ip4_output_if_opt>
}
 80103e2:	b006      	add	sp, #24
 80103e4:	bd10      	pop	{r4, pc}

080103e6 <ip4_output_if_src>:
{
 80103e6:	b510      	push	{r4, lr}
 80103e8:	b086      	sub	sp, #24
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 80103ea:	2400      	movs	r4, #0
 80103ec:	9404      	str	r4, [sp, #16]
 80103ee:	9403      	str	r4, [sp, #12]
 80103f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80103f2:	9402      	str	r4, [sp, #8]
 80103f4:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80103f8:	9401      	str	r4, [sp, #4]
 80103fa:	f89d 4020 	ldrb.w	r4, [sp, #32]
 80103fe:	9400      	str	r4, [sp, #0]
 8010400:	f7ff ff14 	bl	801022c <ip4_output_if_opt_src>
}
 8010404:	b006      	add	sp, #24
 8010406:	bd10      	pop	{r4, pc}

08010408 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010408:	1e43      	subs	r3, r0, #1
 801040a:	f113 0f03 	cmn.w	r3, #3
 801040e:	d811      	bhi.n	8010434 <ip4_addr_isbroadcast_u32+0x2c>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010410:	f891 30c3 	ldrb.w	r3, [r1, #195]	; 0xc3
 8010414:	f013 0f02 	tst.w	r3, #2
 8010418:	d00e      	beq.n	8010438 <ip4_addr_isbroadcast_u32+0x30>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801041a:	680b      	ldr	r3, [r1, #0]
 801041c:	4283      	cmp	r3, r0
 801041e:	d00d      	beq.n	801043c <ip4_addr_isbroadcast_u32+0x34>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010420:	694a      	ldr	r2, [r1, #20]
 8010422:	4043      	eors	r3, r0
 8010424:	4213      	tst	r3, r2
 8010426:	d10b      	bne.n	8010440 <ip4_addr_isbroadcast_u32+0x38>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010428:	43d2      	mvns	r2, r2
 801042a:	ea32 0300 	bics.w	r3, r2, r0
 801042e:	d009      	beq.n	8010444 <ip4_addr_isbroadcast_u32+0x3c>
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8010430:	2000      	movs	r0, #0
 8010432:	4770      	bx	lr
    return 1;
 8010434:	2001      	movs	r0, #1
 8010436:	4770      	bx	lr
    return 0;
 8010438:	2000      	movs	r0, #0
 801043a:	4770      	bx	lr
    return 0;
 801043c:	2000      	movs	r0, #0
 801043e:	4770      	bx	lr
    return 0;
 8010440:	2000      	movs	r0, #0
 8010442:	4770      	bx	lr
    return 1;
 8010444:	2001      	movs	r0, #1
  }
}
 8010446:	4770      	bx	lr

08010448 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010448:	b538      	push	{r3, r4, r5, lr}
 801044a:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801044c:	4b0c      	ldr	r3, [pc, #48]	; (8010480 <ip_reass_dequeue_datagram+0x38>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	4283      	cmp	r3, r0
 8010452:	d008      	beq.n	8010466 <ip_reass_dequeue_datagram+0x1e>
 8010454:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010456:	b151      	cbz	r1, 801046e <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 8010458:	6823      	ldr	r3, [r4, #0]
 801045a:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801045c:	4621      	mov	r1, r4
 801045e:	2004      	movs	r0, #4
 8010460:	f7f7 fd1c 	bl	8007e9c <memp_free>
}
 8010464:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 8010466:	6802      	ldr	r2, [r0, #0]
 8010468:	4b05      	ldr	r3, [pc, #20]	; (8010480 <ip_reass_dequeue_datagram+0x38>)
 801046a:	601a      	str	r2, [r3, #0]
 801046c:	e7f6      	b.n	801045c <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801046e:	4b05      	ldr	r3, [pc, #20]	; (8010484 <ip_reass_dequeue_datagram+0x3c>)
 8010470:	f240 1245 	movw	r2, #325	; 0x145
 8010474:	4904      	ldr	r1, [pc, #16]	; (8010488 <ip_reass_dequeue_datagram+0x40>)
 8010476:	4805      	ldr	r0, [pc, #20]	; (801048c <ip_reass_dequeue_datagram+0x44>)
 8010478:	f004 f8bc 	bl	80145f4 <iprintf>
 801047c:	e7ec      	b.n	8010458 <ip_reass_dequeue_datagram+0x10>
 801047e:	bf00      	nop
 8010480:	20001888 	.word	0x20001888
 8010484:	08018398 	.word	0x08018398
 8010488:	080183d4 	.word	0x080183d4
 801048c:	08015608 	.word	0x08015608

08010490 <ip_reass_free_complete_datagram>:
{
 8010490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010494:	4680      	mov	r8, r0
 8010496:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8010498:	4281      	cmp	r1, r0
 801049a:	d015      	beq.n	80104c8 <ip_reass_free_complete_datagram+0x38>
  if (prev != NULL) {
 801049c:	f1b9 0f00 	cmp.w	r9, #0
 80104a0:	d009      	beq.n	80104b6 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80104a2:	f8d9 3000 	ldr.w	r3, [r9]
 80104a6:	4543      	cmp	r3, r8
 80104a8:	d005      	beq.n	80104b6 <ip_reass_free_complete_datagram+0x26>
 80104aa:	4b30      	ldr	r3, [pc, #192]	; (801056c <ip_reass_free_complete_datagram+0xdc>)
 80104ac:	22ad      	movs	r2, #173	; 0xad
 80104ae:	4930      	ldr	r1, [pc, #192]	; (8010570 <ip_reass_free_complete_datagram+0xe0>)
 80104b0:	4830      	ldr	r0, [pc, #192]	; (8010574 <ip_reass_free_complete_datagram+0xe4>)
 80104b2:	f004 f89f 	bl	80145f4 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80104b6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80104ba:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 80104bc:	889a      	ldrh	r2, [r3, #4]
 80104be:	b152      	cbz	r2, 80104d6 <ip_reass_free_complete_datagram+0x46>
  u16_t pbufs_freed = 0;
 80104c0:	2600      	movs	r6, #0
  p = ipr->p;
 80104c2:	f8d8 4004 	ldr.w	r4, [r8, #4]
  while (p != NULL) {
 80104c6:	e028      	b.n	801051a <ip_reass_free_complete_datagram+0x8a>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80104c8:	4b28      	ldr	r3, [pc, #160]	; (801056c <ip_reass_free_complete_datagram+0xdc>)
 80104ca:	22ab      	movs	r2, #171	; 0xab
 80104cc:	492a      	ldr	r1, [pc, #168]	; (8010578 <ip_reass_free_complete_datagram+0xe8>)
 80104ce:	4829      	ldr	r0, [pc, #164]	; (8010574 <ip_reass_free_complete_datagram+0xe4>)
 80104d0:	f004 f890 	bl	80145f4 <iprintf>
 80104d4:	e7e2      	b.n	801049c <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80104dc:	4643      	mov	r3, r8
 80104de:	6862      	ldr	r2, [r4, #4]
 80104e0:	f853 1f08 	ldr.w	r1, [r3, #8]!
 80104e4:	685e      	ldr	r6, [r3, #4]
 80104e6:	689d      	ldr	r5, [r3, #8]
 80104e8:	68d8      	ldr	r0, [r3, #12]
 80104ea:	6011      	str	r1, [r2, #0]
 80104ec:	6056      	str	r6, [r2, #4]
 80104ee:	6095      	str	r5, [r2, #8]
 80104f0:	60d0      	str	r0, [r2, #12]
 80104f2:	6919      	ldr	r1, [r3, #16]
 80104f4:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80104f6:	2101      	movs	r1, #1
 80104f8:	4620      	mov	r0, r4
 80104fa:	f7ff fbb5 	bl	800fc68 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80104fe:	4620      	mov	r0, r4
 8010500:	f7f8 fa76 	bl	80089f0 <pbuf_clen>
 8010504:	4606      	mov	r6, r0
    pbuf_free(p);
 8010506:	4620      	mov	r0, r4
 8010508:	f7f8 f90e 	bl	8008728 <pbuf_free>
 801050c:	e7d9      	b.n	80104c2 <ip_reass_free_complete_datagram+0x32>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801050e:	4435      	add	r5, r6
 8010510:	b2ae      	uxth	r6, r5
    pbuf_free(pcur);
 8010512:	4620      	mov	r0, r4
 8010514:	f7f8 f908 	bl	8008728 <pbuf_free>
    p = iprh->next_pbuf;
 8010518:	463c      	mov	r4, r7
  while (p != NULL) {
 801051a:	b184      	cbz	r4, 801053e <ip_reass_free_complete_datagram+0xae>
    iprh = (struct ip_reass_helper *)p->payload;
 801051c:	6863      	ldr	r3, [r4, #4]
    p = iprh->next_pbuf;
 801051e:	681f      	ldr	r7, [r3, #0]
    clen = pbuf_clen(pcur);
 8010520:	4620      	mov	r0, r4
 8010522:	f7f8 fa65 	bl	80089f0 <pbuf_clen>
 8010526:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010528:	1833      	adds	r3, r6, r0
 801052a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801052e:	dbee      	blt.n	801050e <ip_reass_free_complete_datagram+0x7e>
 8010530:	4b0e      	ldr	r3, [pc, #56]	; (801056c <ip_reass_free_complete_datagram+0xdc>)
 8010532:	22cc      	movs	r2, #204	; 0xcc
 8010534:	4911      	ldr	r1, [pc, #68]	; (801057c <ip_reass_free_complete_datagram+0xec>)
 8010536:	480f      	ldr	r0, [pc, #60]	; (8010574 <ip_reass_free_complete_datagram+0xe4>)
 8010538:	f004 f85c 	bl	80145f4 <iprintf>
 801053c:	e7e7      	b.n	801050e <ip_reass_free_complete_datagram+0x7e>
  ip_reass_dequeue_datagram(ipr, prev);
 801053e:	4649      	mov	r1, r9
 8010540:	4640      	mov	r0, r8
 8010542:	f7ff ff81 	bl	8010448 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010546:	4b0e      	ldr	r3, [pc, #56]	; (8010580 <ip_reass_free_complete_datagram+0xf0>)
 8010548:	881b      	ldrh	r3, [r3, #0]
 801054a:	42b3      	cmp	r3, r6
 801054c:	d306      	bcc.n	801055c <ip_reass_free_complete_datagram+0xcc>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801054e:	4a0c      	ldr	r2, [pc, #48]	; (8010580 <ip_reass_free_complete_datagram+0xf0>)
 8010550:	8813      	ldrh	r3, [r2, #0]
 8010552:	1b9b      	subs	r3, r3, r6
 8010554:	8013      	strh	r3, [r2, #0]
}
 8010556:	4630      	mov	r0, r6
 8010558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801055c:	4b03      	ldr	r3, [pc, #12]	; (801056c <ip_reass_free_complete_datagram+0xdc>)
 801055e:	22d2      	movs	r2, #210	; 0xd2
 8010560:	4908      	ldr	r1, [pc, #32]	; (8010584 <ip_reass_free_complete_datagram+0xf4>)
 8010562:	4804      	ldr	r0, [pc, #16]	; (8010574 <ip_reass_free_complete_datagram+0xe4>)
 8010564:	f004 f846 	bl	80145f4 <iprintf>
 8010568:	e7f1      	b.n	801054e <ip_reass_free_complete_datagram+0xbe>
 801056a:	bf00      	nop
 801056c:	08018398 	.word	0x08018398
 8010570:	080183fc 	.word	0x080183fc
 8010574:	08015608 	.word	0x08015608
 8010578:	080183f0 	.word	0x080183f0
 801057c:	08018410 	.word	0x08018410
 8010580:	20001886 	.word	0x20001886
 8010584:	08018430 	.word	0x08018430

08010588 <ip_reass_remove_oldest_datagram>:
{
 8010588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801058c:	4606      	mov	r6, r0
 801058e:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8010590:	2700      	movs	r7, #0
 8010592:	e02b      	b.n	80105ec <ip_reass_remove_oldest_datagram+0x64>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010594:	699a      	ldr	r2, [r3, #24]
 8010596:	f8d6 c010 	ldr.w	ip, [r6, #16]
 801059a:	4562      	cmp	r2, ip
 801059c:	d111      	bne.n	80105c2 <ip_reass_remove_oldest_datagram+0x3a>
 801059e:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 80105a2:	88b2      	ldrh	r2, [r6, #4]
 80105a4:	4594      	cmp	ip, r2
 80105a6:	d10c      	bne.n	80105c2 <ip_reass_remove_oldest_datagram+0x3a>
 80105a8:	e001      	b.n	80105ae <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 80105aa:	4629      	mov	r1, r5
          oldest = r;
 80105ac:	4618      	mov	r0, r3
      if (r->next != NULL) {
 80105ae:	681a      	ldr	r2, [r3, #0]
 80105b0:	b192      	cbz	r2, 80105d8 <ip_reass_remove_oldest_datagram+0x50>
 80105b2:	461d      	mov	r5, r3
 80105b4:	4613      	mov	r3, r2
    while (r != NULL) {
 80105b6:	b18b      	cbz	r3, 80105dc <ip_reass_remove_oldest_datagram+0x54>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80105b8:	695a      	ldr	r2, [r3, #20]
 80105ba:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80105be:	4562      	cmp	r2, ip
 80105c0:	d0e8      	beq.n	8010594 <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 80105c2:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80105c4:	2800      	cmp	r0, #0
 80105c6:	d0f0      	beq.n	80105aa <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 80105c8:	f893 c01f 	ldrb.w	ip, [r3, #31]
 80105cc:	7fc2      	ldrb	r2, [r0, #31]
 80105ce:	4594      	cmp	ip, r2
 80105d0:	d8ed      	bhi.n	80105ae <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 80105d2:	4629      	mov	r1, r5
          oldest = r;
 80105d4:	4618      	mov	r0, r3
 80105d6:	e7ea      	b.n	80105ae <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 80105d8:	462b      	mov	r3, r5
 80105da:	e7ea      	b.n	80105b2 <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 80105dc:	b110      	cbz	r0, 80105e4 <ip_reass_remove_oldest_datagram+0x5c>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80105de:	f7ff ff57 	bl	8010490 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80105e2:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80105e4:	4547      	cmp	r7, r8
 80105e6:	da08      	bge.n	80105fa <ip_reass_remove_oldest_datagram+0x72>
 80105e8:	2c01      	cmp	r4, #1
 80105ea:	dd06      	ble.n	80105fa <ip_reass_remove_oldest_datagram+0x72>
    r = reassdatagrams;
 80105ec:	4b04      	ldr	r3, [pc, #16]	; (8010600 <ip_reass_remove_oldest_datagram+0x78>)
 80105ee:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 80105f0:	2400      	movs	r4, #0
    oldest_prev = NULL;
 80105f2:	4621      	mov	r1, r4
    prev = NULL;
 80105f4:	4625      	mov	r5, r4
    oldest = NULL;
 80105f6:	4620      	mov	r0, r4
    while (r != NULL) {
 80105f8:	e7dd      	b.n	80105b6 <ip_reass_remove_oldest_datagram+0x2e>
}
 80105fa:	4638      	mov	r0, r7
 80105fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010600:	20001888 	.word	0x20001888

08010604 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010604:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8010606:	4604      	mov	r4, r0
 8010608:	b120      	cbz	r0, 8010614 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 801060a:	4621      	mov	r1, r4
 801060c:	2005      	movs	r0, #5
 801060e:	f7f7 fc45 	bl	8007e9c <memp_free>
}
 8010612:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8010614:	4b03      	ldr	r3, [pc, #12]	; (8010624 <ip_frag_free_pbuf_custom_ref+0x20>)
 8010616:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801061a:	4903      	ldr	r1, [pc, #12]	; (8010628 <ip_frag_free_pbuf_custom_ref+0x24>)
 801061c:	4803      	ldr	r0, [pc, #12]	; (801062c <ip_frag_free_pbuf_custom_ref+0x28>)
 801061e:	f003 ffe9 	bl	80145f4 <iprintf>
 8010622:	e7f2      	b.n	801060a <ip_frag_free_pbuf_custom_ref+0x6>
 8010624:	08018398 	.word	0x08018398
 8010628:	08017b2c 	.word	0x08017b2c
 801062c:	08015608 	.word	0x08015608

08010630 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010630:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010632:	4604      	mov	r4, r0
 8010634:	b138      	cbz	r0, 8010646 <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8010636:	6960      	ldr	r0, [r4, #20]
 8010638:	b108      	cbz	r0, 801063e <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 801063a:	f7f8 f875 	bl	8008728 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801063e:	4620      	mov	r0, r4
 8010640:	f7ff ffe0 	bl	8010604 <ip_frag_free_pbuf_custom_ref>
}
 8010644:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010646:	4b04      	ldr	r3, [pc, #16]	; (8010658 <ipfrag_free_pbuf_custom+0x28>)
 8010648:	f240 22ce 	movw	r2, #718	; 0x2ce
 801064c:	4903      	ldr	r1, [pc, #12]	; (801065c <ipfrag_free_pbuf_custom+0x2c>)
 801064e:	4804      	ldr	r0, [pc, #16]	; (8010660 <ipfrag_free_pbuf_custom+0x30>)
 8010650:	f003 ffd0 	bl	80145f4 <iprintf>
 8010654:	e7ef      	b.n	8010636 <ipfrag_free_pbuf_custom+0x6>
 8010656:	bf00      	nop
 8010658:	08018398 	.word	0x08018398
 801065c:	08018454 	.word	0x08018454
 8010660:	08015608 	.word	0x08015608

08010664 <ip_reass_chain_frag_into_datagram_and_validate>:
{
 8010664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010668:	4680      	mov	r8, r0
 801066a:	460f      	mov	r7, r1
 801066c:	4691      	mov	r9, r2
  fraghdr = (struct ip_hdr *)new_p->payload;
 801066e:	684c      	ldr	r4, [r1, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010670:	8860      	ldrh	r0, [r4, #2]
 8010672:	f7f6 fdbb 	bl	80071ec <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8010676:	7823      	ldrb	r3, [r4, #0]
 8010678:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 801067c:	009b      	lsls	r3, r3, #2
 801067e:	4283      	cmp	r3, r0
 8010680:	f200 80a4 	bhi.w	80107cc <ip_reass_chain_frag_into_datagram_and_validate+0x168>
  len = (u16_t)(len - hlen);
 8010684:	1ac0      	subs	r0, r0, r3
 8010686:	b286      	uxth	r6, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010688:	88e0      	ldrh	r0, [r4, #6]
 801068a:	f7f6 fdaf 	bl	80071ec <lwip_htons>
 801068e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8010692:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010694:	687d      	ldr	r5, [r7, #4]
  iprh->next_pbuf = NULL;
 8010696:	2300      	movs	r3, #0
 8010698:	702b      	strb	r3, [r5, #0]
 801069a:	706b      	strb	r3, [r5, #1]
 801069c:	70ab      	strb	r3, [r5, #2]
 801069e:	70eb      	strb	r3, [r5, #3]
  iprh->start = offset;
 80106a0:	80aa      	strh	r2, [r5, #4]
  iprh->end = (u16_t)(offset + len);
 80106a2:	eb06 0c02 	add.w	ip, r6, r2
 80106a6:	fa1f fc8c 	uxth.w	ip, ip
 80106aa:	f8a5 c006 	strh.w	ip, [r5, #6]
  if (iprh->end < offset) {
 80106ae:	4594      	cmp	ip, r2
 80106b0:	f0c0 808f 	bcc.w	80107d2 <ip_reass_chain_frag_into_datagram_and_validate+0x16e>
  for (q = ipr->p; q != NULL;) {
 80106b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
  int valid = 1;
 80106b8:	2601      	movs	r6, #1
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80106ba:	461c      	mov	r4, r3
  for (q = ipr->p; q != NULL;) {
 80106bc:	e036      	b.n	801072c <ip_reass_chain_frag_into_datagram_and_validate+0xc8>
      iprh->next_pbuf = q;
 80106be:	6028      	str	r0, [r5, #0]
      if (iprh_prev != NULL) {
 80106c0:	b364      	cbz	r4, 801071c <ip_reass_chain_frag_into_datagram_and_validate+0xb8>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80106c2:	88e1      	ldrh	r1, [r4, #6]
 80106c4:	4291      	cmp	r1, r2
 80106c6:	f200 8087 	bhi.w	80107d8 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
 80106ca:	889b      	ldrh	r3, [r3, #4]
 80106cc:	459c      	cmp	ip, r3
 80106ce:	f200 8086 	bhi.w	80107de <ip_reass_chain_frag_into_datagram_and_validate+0x17a>
        iprh_prev->next_pbuf = new_p;
 80106d2:	6027      	str	r7, [r4, #0]
        if (iprh_prev->end != iprh->start) {
 80106d4:	88ab      	ldrh	r3, [r5, #4]
 80106d6:	4299      	cmp	r1, r3
 80106d8:	d000      	beq.n	80106dc <ip_reass_chain_frag_into_datagram_and_validate+0x78>
          valid = 0;
 80106da:	2600      	movs	r6, #0
  if (q == NULL) {
 80106dc:	2800      	cmp	r0, #0
 80106de:	d037      	beq.n	8010750 <ip_reass_chain_frag_into_datagram_and_validate+0xec>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80106e0:	f1b9 0f00 	cmp.w	r9, #0
 80106e4:	d105      	bne.n	80106f2 <ip_reass_chain_frag_into_datagram_and_validate+0x8e>
 80106e6:	f898 301e 	ldrb.w	r3, [r8, #30]
 80106ea:	f013 0f01 	tst.w	r3, #1
 80106ee:	f000 8082 	beq.w	80107f6 <ip_reass_chain_frag_into_datagram_and_validate+0x192>
    if (valid) {
 80106f2:	2e00      	cmp	r6, #0
 80106f4:	d067      	beq.n	80107c6 <ip_reass_chain_frag_into_datagram_and_validate+0x162>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80106f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d060      	beq.n	80107c0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
 80106fe:	6858      	ldr	r0, [r3, #4]
 8010700:	8883      	ldrh	r3, [r0, #4]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d15e      	bne.n	80107c4 <ip_reass_chain_frag_into_datagram_and_validate+0x160>
        q = iprh->next_pbuf;
 8010706:	682a      	ldr	r2, [r5, #0]
        while (q != NULL) {
 8010708:	2a00      	cmp	r2, #0
 801070a:	d044      	beq.n	8010796 <ip_reass_chain_frag_into_datagram_and_validate+0x132>
          iprh = (struct ip_reass_helper *)q->payload;
 801070c:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 801070e:	88e9      	ldrh	r1, [r5, #6]
 8010710:	889a      	ldrh	r2, [r3, #4]
 8010712:	4291      	cmp	r1, r2
 8010714:	d13d      	bne.n	8010792 <ip_reass_chain_frag_into_datagram_and_validate+0x12e>
          q = iprh->next_pbuf;
 8010716:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper *)q->payload;
 8010718:	461d      	mov	r5, r3
 801071a:	e7f5      	b.n	8010708 <ip_reass_chain_frag_into_datagram_and_validate+0xa4>
        if (iprh->end > iprh_tmp->start) {
 801071c:	889b      	ldrh	r3, [r3, #4]
 801071e:	459c      	cmp	ip, r3
 8010720:	d860      	bhi.n	80107e4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
        ipr->p = new_p;
 8010722:	f8c8 7004 	str.w	r7, [r8, #4]
 8010726:	e7d9      	b.n	80106dc <ip_reass_chain_frag_into_datagram_and_validate+0x78>
    q = iprh_tmp->next_pbuf;
 8010728:	6818      	ldr	r0, [r3, #0]
    iprh_prev = iprh_tmp;
 801072a:	461c      	mov	r4, r3
  for (q = ipr->p; q != NULL;) {
 801072c:	2800      	cmp	r0, #0
 801072e:	d0d5      	beq.n	80106dc <ip_reass_chain_frag_into_datagram_and_validate+0x78>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010730:	6843      	ldr	r3, [r0, #4]
    if (iprh->start < iprh_tmp->start) {
 8010732:	8899      	ldrh	r1, [r3, #4]
 8010734:	4291      	cmp	r1, r2
 8010736:	d8c2      	bhi.n	80106be <ip_reass_chain_frag_into_datagram_and_validate+0x5a>
    } else if (iprh->start == iprh_tmp->start) {
 8010738:	4291      	cmp	r1, r2
 801073a:	d056      	beq.n	80107ea <ip_reass_chain_frag_into_datagram_and_validate+0x186>
    } else if (iprh->start < iprh_tmp->end) {
 801073c:	88d8      	ldrh	r0, [r3, #6]
 801073e:	4290      	cmp	r0, r2
 8010740:	d856      	bhi.n	80107f0 <ip_reass_chain_frag_into_datagram_and_validate+0x18c>
      if (iprh_prev != NULL) {
 8010742:	2c00      	cmp	r4, #0
 8010744:	d0f0      	beq.n	8010728 <ip_reass_chain_frag_into_datagram_and_validate+0xc4>
        if (iprh_prev->end != iprh_tmp->start) {
 8010746:	88e0      	ldrh	r0, [r4, #6]
 8010748:	4281      	cmp	r1, r0
 801074a:	d0ed      	beq.n	8010728 <ip_reass_chain_frag_into_datagram_and_validate+0xc4>
          valid = 0;
 801074c:	2600      	movs	r6, #0
 801074e:	e7eb      	b.n	8010728 <ip_reass_chain_frag_into_datagram_and_validate+0xc4>
    if (iprh_prev != NULL) {
 8010750:	b194      	cbz	r4, 8010778 <ip_reass_chain_frag_into_datagram_and_validate+0x114>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010752:	88e2      	ldrh	r2, [r4, #6]
 8010754:	88ab      	ldrh	r3, [r5, #4]
 8010756:	429a      	cmp	r2, r3
 8010758:	d806      	bhi.n	8010768 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      iprh_prev->next_pbuf = new_p;
 801075a:	6027      	str	r7, [r4, #0]
      if (iprh_prev->end != iprh->start) {
 801075c:	88e2      	ldrh	r2, [r4, #6]
 801075e:	88ab      	ldrh	r3, [r5, #4]
 8010760:	429a      	cmp	r2, r3
 8010762:	d0bd      	beq.n	80106e0 <ip_reass_chain_frag_into_datagram_and_validate+0x7c>
        valid = 0;
 8010764:	2600      	movs	r6, #0
 8010766:	e7bb      	b.n	80106e0 <ip_reass_chain_frag_into_datagram_and_validate+0x7c>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010768:	4b24      	ldr	r3, [pc, #144]	; (80107fc <ip_reass_chain_frag_into_datagram_and_validate+0x198>)
 801076a:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801076e:	4924      	ldr	r1, [pc, #144]	; (8010800 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>)
 8010770:	4824      	ldr	r0, [pc, #144]	; (8010804 <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>)
 8010772:	f003 ff3f 	bl	80145f4 <iprintf>
 8010776:	e7f0      	b.n	801075a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010778:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801077c:	b133      	cbz	r3, 801078c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
 801077e:	4b1f      	ldr	r3, [pc, #124]	; (80107fc <ip_reass_chain_frag_into_datagram_and_validate+0x198>)
 8010780:	f240 12bf 	movw	r2, #447	; 0x1bf
 8010784:	4920      	ldr	r1, [pc, #128]	; (8010808 <ip_reass_chain_frag_into_datagram_and_validate+0x1a4>)
 8010786:	481f      	ldr	r0, [pc, #124]	; (8010804 <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>)
 8010788:	f003 ff34 	bl	80145f4 <iprintf>
      ipr->p = new_p;
 801078c:	f8c8 7004 	str.w	r7, [r8, #4]
 8010790:	e7a6      	b.n	80106e0 <ip_reass_chain_frag_into_datagram_and_validate+0x7c>
          iprh = (struct ip_reass_helper *)q->payload;
 8010792:	461d      	mov	r5, r3
            valid = 0;
 8010794:	2600      	movs	r6, #0
        if (valid) {
 8010796:	b1b6      	cbz	r6, 80107c6 <ip_reass_chain_frag_into_datagram_and_validate+0x162>
          LWIP_ASSERT("sanity check",
 8010798:	42a8      	cmp	r0, r5
 801079a:	d009      	beq.n	80107b0 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801079c:	682b      	ldr	r3, [r5, #0]
 801079e:	b193      	cbz	r3, 80107c6 <ip_reass_chain_frag_into_datagram_and_validate+0x162>
 80107a0:	4b16      	ldr	r3, [pc, #88]	; (80107fc <ip_reass_chain_frag_into_datagram_and_validate+0x198>)
 80107a2:	f240 12e3 	movw	r2, #483	; 0x1e3
 80107a6:	4919      	ldr	r1, [pc, #100]	; (801080c <ip_reass_chain_frag_into_datagram_and_validate+0x1a8>)
 80107a8:	4816      	ldr	r0, [pc, #88]	; (8010804 <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>)
 80107aa:	f003 ff23 	bl	80145f4 <iprintf>
 80107ae:	e00a      	b.n	80107c6 <ip_reass_chain_frag_into_datagram_and_validate+0x162>
          LWIP_ASSERT("sanity check",
 80107b0:	4b12      	ldr	r3, [pc, #72]	; (80107fc <ip_reass_chain_frag_into_datagram_and_validate+0x198>)
 80107b2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80107b6:	4916      	ldr	r1, [pc, #88]	; (8010810 <ip_reass_chain_frag_into_datagram_and_validate+0x1ac>)
 80107b8:	4812      	ldr	r0, [pc, #72]	; (8010804 <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>)
 80107ba:	f003 ff1b 	bl	80145f4 <iprintf>
 80107be:	e7ed      	b.n	801079c <ip_reass_chain_frag_into_datagram_and_validate+0x138>
        valid = 0;
 80107c0:	2600      	movs	r6, #0
 80107c2:	e000      	b.n	80107c6 <ip_reass_chain_frag_into_datagram_and_validate+0x162>
 80107c4:	2600      	movs	r6, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80107c6:	4630      	mov	r0, r6
}
 80107c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80107cc:	f04f 30ff 	mov.w	r0, #4294967295
 80107d0:	e7fa      	b.n	80107c8 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80107d2:	f04f 30ff 	mov.w	r0, #4294967295
 80107d6:	e7f7      	b.n	80107c8 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80107d8:	f04f 30ff 	mov.w	r0, #4294967295
 80107dc:	e7f4      	b.n	80107c8 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
 80107de:	f04f 30ff 	mov.w	r0, #4294967295
 80107e2:	e7f1      	b.n	80107c8 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80107e4:	f04f 30ff 	mov.w	r0, #4294967295
 80107e8:	e7ee      	b.n	80107c8 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80107ea:	f04f 30ff 	mov.w	r0, #4294967295
 80107ee:	e7eb      	b.n	80107c8 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80107f0:	f04f 30ff 	mov.w	r0, #4294967295
 80107f4:	e7e8      	b.n	80107c8 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80107f6:	4648      	mov	r0, r9
 80107f8:	e7e6      	b.n	80107c8 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
 80107fa:	bf00      	nop
 80107fc:	08018398 	.word	0x08018398
 8010800:	0801830c 	.word	0x0801830c
 8010804:	08015608 	.word	0x08015608
 8010808:	0801832c 	.word	0x0801832c
 801080c:	08018374 	.word	0x08018374
 8010810:	08018364 	.word	0x08018364

08010814 <ip_frag_alloc_pbuf_custom_ref>:
{
 8010814:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010816:	2005      	movs	r0, #5
 8010818:	f7f7 fb26 	bl	8007e68 <memp_malloc>
}
 801081c:	bd08      	pop	{r3, pc}
	...

08010820 <ip_reass_enqueue_new_datagram>:
{
 8010820:	b570      	push	{r4, r5, r6, lr}
 8010822:	4605      	mov	r5, r0
 8010824:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010826:	2004      	movs	r0, #4
 8010828:	f7f7 fb1e 	bl	8007e68 <memp_malloc>
  if (ipr == NULL) {
 801082c:	4604      	mov	r4, r0
 801082e:	b1c8      	cbz	r0, 8010864 <ip_reass_enqueue_new_datagram+0x44>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010830:	2200      	movs	r2, #0
 8010832:	6062      	str	r2, [r4, #4]
 8010834:	60a2      	str	r2, [r4, #8]
 8010836:	60e2      	str	r2, [r4, #12]
 8010838:	6122      	str	r2, [r4, #16]
 801083a:	6162      	str	r2, [r4, #20]
 801083c:	61a2      	str	r2, [r4, #24]
 801083e:	61e2      	str	r2, [r4, #28]
  ipr->timer = IP_REASS_MAXAGE;
 8010840:	230f      	movs	r3, #15
 8010842:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8010844:	4b0e      	ldr	r3, [pc, #56]	; (8010880 <ip_reass_enqueue_new_datagram+0x60>)
 8010846:	681a      	ldr	r2, [r3, #0]
 8010848:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 801084a:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801084c:	682a      	ldr	r2, [r5, #0]
 801084e:	686e      	ldr	r6, [r5, #4]
 8010850:	68a8      	ldr	r0, [r5, #8]
 8010852:	68e9      	ldr	r1, [r5, #12]
 8010854:	60a2      	str	r2, [r4, #8]
 8010856:	60e6      	str	r6, [r4, #12]
 8010858:	6120      	str	r0, [r4, #16]
 801085a:	6161      	str	r1, [r4, #20]
 801085c:	692a      	ldr	r2, [r5, #16]
 801085e:	61a2      	str	r2, [r4, #24]
}
 8010860:	4620      	mov	r0, r4
 8010862:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010864:	4631      	mov	r1, r6
 8010866:	4628      	mov	r0, r5
 8010868:	f7ff fe8e 	bl	8010588 <ip_reass_remove_oldest_datagram>
 801086c:	42b0      	cmp	r0, r6
 801086e:	da02      	bge.n	8010876 <ip_reass_enqueue_new_datagram+0x56>
    if (ipr == NULL)
 8010870:	2c00      	cmp	r4, #0
 8010872:	d1dd      	bne.n	8010830 <ip_reass_enqueue_new_datagram+0x10>
 8010874:	e7f4      	b.n	8010860 <ip_reass_enqueue_new_datagram+0x40>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010876:	2004      	movs	r0, #4
 8010878:	f7f7 faf6 	bl	8007e68 <memp_malloc>
 801087c:	4604      	mov	r4, r0
 801087e:	e7f7      	b.n	8010870 <ip_reass_enqueue_new_datagram+0x50>
 8010880:	20001888 	.word	0x20001888

08010884 <ip_reass_tmr>:
{
 8010884:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8010886:	4b09      	ldr	r3, [pc, #36]	; (80108ac <ip_reass_tmr+0x28>)
 8010888:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 801088a:	2400      	movs	r4, #0
  while (r != NULL) {
 801088c:	e004      	b.n	8010898 <ip_reass_tmr+0x14>
      r = r->next;
 801088e:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 8010890:	4621      	mov	r1, r4
 8010892:	f7ff fdfd 	bl	8010490 <ip_reass_free_complete_datagram>
      r = r->next;
 8010896:	4628      	mov	r0, r5
  while (r != NULL) {
 8010898:	b138      	cbz	r0, 80108aa <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 801089a:	7fc3      	ldrb	r3, [r0, #31]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d0f6      	beq.n	801088e <ip_reass_tmr+0xa>
      r->timer--;
 80108a0:	3b01      	subs	r3, #1
 80108a2:	77c3      	strb	r3, [r0, #31]
      prev = r;
 80108a4:	4604      	mov	r4, r0
      r = r->next;
 80108a6:	6800      	ldr	r0, [r0, #0]
 80108a8:	e7f6      	b.n	8010898 <ip_reass_tmr+0x14>
}
 80108aa:	bd38      	pop	{r3, r4, r5, pc}
 80108ac:	20001888 	.word	0x20001888

080108b0 <ip4_reass>:
{
 80108b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108b4:	4607      	mov	r7, r0
  fraghdr = (struct ip_hdr *)p->payload;
 80108b6:	6845      	ldr	r5, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80108b8:	782b      	ldrb	r3, [r5, #0]
 80108ba:	f003 030f 	and.w	r3, r3, #15
 80108be:	2b05      	cmp	r3, #5
 80108c0:	f040 80d7 	bne.w	8010a72 <ip4_reass+0x1c2>
  offset = IPH_OFFSET_BYTES(fraghdr);
 80108c4:	88e8      	ldrh	r0, [r5, #6]
 80108c6:	f7f6 fc91 	bl	80071ec <lwip_htons>
 80108ca:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80108ce:	00c6      	lsls	r6, r0, #3
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80108d0:	8868      	ldrh	r0, [r5, #2]
 80108d2:	f7f6 fc8b 	bl	80071ec <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80108d6:	782b      	ldrb	r3, [r5, #0]
 80108d8:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 80108dc:	009b      	lsls	r3, r3, #2
 80108de:	4283      	cmp	r3, r0
 80108e0:	f200 80c7 	bhi.w	8010a72 <ip4_reass+0x1c2>
  len = (u16_t)(len - hlen);
 80108e4:	1ac3      	subs	r3, r0, r3
 80108e6:	fa1f f883 	uxth.w	r8, r3
  clen = pbuf_clen(p);
 80108ea:	4638      	mov	r0, r7
 80108ec:	f7f8 f880 	bl	80089f0 <pbuf_clen>
 80108f0:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80108f2:	4b70      	ldr	r3, [pc, #448]	; (8010ab4 <ip4_reass+0x204>)
 80108f4:	881b      	ldrh	r3, [r3, #0]
 80108f6:	4403      	add	r3, r0
 80108f8:	2b0a      	cmp	r3, #10
 80108fa:	dc02      	bgt.n	8010902 <ip4_reass+0x52>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80108fc:	4b6e      	ldr	r3, [pc, #440]	; (8010ab8 <ip4_reass+0x208>)
 80108fe:	681c      	ldr	r4, [r3, #0]
 8010900:	e00d      	b.n	801091e <ip4_reass+0x6e>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010902:	4601      	mov	r1, r0
 8010904:	4628      	mov	r0, r5
 8010906:	f7ff fe3f 	bl	8010588 <ip_reass_remove_oldest_datagram>
 801090a:	2800      	cmp	r0, #0
 801090c:	f000 80b1 	beq.w	8010a72 <ip4_reass+0x1c2>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010910:	4b68      	ldr	r3, [pc, #416]	; (8010ab4 <ip4_reass+0x204>)
 8010912:	881b      	ldrh	r3, [r3, #0]
 8010914:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010916:	2b0a      	cmp	r3, #10
 8010918:	ddf0      	ble.n	80108fc <ip4_reass+0x4c>
 801091a:	e0aa      	b.n	8010a72 <ip4_reass+0x1c2>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801091c:	6824      	ldr	r4, [r4, #0]
 801091e:	b15c      	cbz	r4, 8010938 <ip4_reass+0x88>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010920:	6962      	ldr	r2, [r4, #20]
 8010922:	68eb      	ldr	r3, [r5, #12]
 8010924:	429a      	cmp	r2, r3
 8010926:	d1f9      	bne.n	801091c <ip4_reass+0x6c>
 8010928:	69a2      	ldr	r2, [r4, #24]
 801092a:	692b      	ldr	r3, [r5, #16]
 801092c:	429a      	cmp	r2, r3
 801092e:	d1f5      	bne.n	801091c <ip4_reass+0x6c>
 8010930:	89a2      	ldrh	r2, [r4, #12]
 8010932:	88ab      	ldrh	r3, [r5, #4]
 8010934:	429a      	cmp	r2, r3
 8010936:	d1f1      	bne.n	801091c <ip4_reass+0x6c>
  if (ipr == NULL) {
 8010938:	2c00      	cmp	r4, #0
 801093a:	d04c      	beq.n	80109d6 <ip4_reass+0x126>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801093c:	88e8      	ldrh	r0, [r5, #6]
 801093e:	f7f6 fc55 	bl	80071ec <lwip_htons>
 8010942:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8010946:	2800      	cmp	r0, #0
 8010948:	d04d      	beq.n	80109e6 <ip4_reass+0x136>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801094a:	88ed      	ldrh	r5, [r5, #6]
 801094c:	f005 0520 	and.w	r5, r5, #32
 8010950:	2d00      	cmp	r5, #0
 8010952:	bf0c      	ite	eq
 8010954:	2201      	moveq	r2, #1
 8010956:	2200      	movne	r2, #0
  if (is_last) {
 8010958:	d109      	bne.n	801096e <ip4_reass+0xbe>
    u16_t datagram_len = (u16_t)(offset + len);
 801095a:	eb06 0308 	add.w	r3, r6, r8
 801095e:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010960:	429e      	cmp	r6, r3
 8010962:	f200 8083 	bhi.w	8010a6c <ip4_reass+0x1bc>
 8010966:	f64f 71eb 	movw	r1, #65515	; 0xffeb
 801096a:	428b      	cmp	r3, r1
 801096c:	d87e      	bhi.n	8010a6c <ip4_reass+0x1bc>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801096e:	4639      	mov	r1, r7
 8010970:	4620      	mov	r0, r4
 8010972:	f7ff fe77 	bl	8010664 <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010976:	f1b0 3fff 	cmp.w	r0, #4294967295
 801097a:	d077      	beq.n	8010a6c <ip4_reass+0x1bc>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801097c:	4b4d      	ldr	r3, [pc, #308]	; (8010ab4 <ip4_reass+0x204>)
 801097e:	881a      	ldrh	r2, [r3, #0]
 8010980:	4491      	add	r9, r2
 8010982:	f8a3 9000 	strh.w	r9, [r3]
  if (is_last) {
 8010986:	b92d      	cbnz	r5, 8010994 <ip4_reass+0xe4>
    u16_t datagram_len = (u16_t)(offset + len);
 8010988:	4446      	add	r6, r8
    ipr->datagram_len = datagram_len;
 801098a:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801098c:	7fa3      	ldrb	r3, [r4, #30]
 801098e:	f043 0301 	orr.w	r3, r3, #1
 8010992:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010994:	2801      	cmp	r0, #1
 8010996:	f040 808b 	bne.w	8010ab0 <ip4_reass+0x200>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801099a:	8ba0      	ldrh	r0, [r4, #28]
 801099c:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801099e:	6863      	ldr	r3, [r4, #4]
 80109a0:	685e      	ldr	r6, [r3, #4]
 80109a2:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80109a4:	4623      	mov	r3, r4
 80109a6:	f853 2f08 	ldr.w	r2, [r3, #8]!
 80109aa:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80109ae:	689f      	ldr	r7, [r3, #8]
 80109b0:	68d9      	ldr	r1, [r3, #12]
 80109b2:	6032      	str	r2, [r6, #0]
 80109b4:	f8c6 c004 	str.w	ip, [r6, #4]
 80109b8:	60b7      	str	r7, [r6, #8]
 80109ba:	60f1      	str	r1, [r6, #12]
 80109bc:	691a      	ldr	r2, [r3, #16]
 80109be:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80109c0:	b280      	uxth	r0, r0
 80109c2:	f7f6 fc13 	bl	80071ec <lwip_htons>
 80109c6:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80109c8:	2300      	movs	r3, #0
 80109ca:	71b3      	strb	r3, [r6, #6]
 80109cc:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80109ce:	72b3      	strb	r3, [r6, #10]
 80109d0:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 80109d2:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 80109d4:	e025      	b.n	8010a22 <ip4_reass+0x172>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80109d6:	4649      	mov	r1, r9
 80109d8:	4628      	mov	r0, r5
 80109da:	f7ff ff21 	bl	8010820 <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 80109de:	4604      	mov	r4, r0
 80109e0:	2800      	cmp	r0, #0
 80109e2:	d1b2      	bne.n	801094a <ip4_reass+0x9a>
 80109e4:	e045      	b.n	8010a72 <ip4_reass+0x1c2>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80109e6:	89e0      	ldrh	r0, [r4, #14]
 80109e8:	f7f6 fc00 	bl	80071ec <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80109ec:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80109f0:	2800      	cmp	r0, #0
 80109f2:	d0aa      	beq.n	801094a <ip4_reass+0x9a>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80109f4:	682a      	ldr	r2, [r5, #0]
 80109f6:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80109fa:	68a8      	ldr	r0, [r5, #8]
 80109fc:	68e9      	ldr	r1, [r5, #12]
 80109fe:	60a2      	str	r2, [r4, #8]
 8010a00:	f8c4 c00c 	str.w	ip, [r4, #12]
 8010a04:	6120      	str	r0, [r4, #16]
 8010a06:	6161      	str	r1, [r4, #20]
 8010a08:	692a      	ldr	r2, [r5, #16]
 8010a0a:	61a2      	str	r2, [r4, #24]
 8010a0c:	e79d      	b.n	801094a <ip4_reass+0x9a>
      iprh = (struct ip_reass_helper *)r->payload;
 8010a0e:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8010a10:	2114      	movs	r1, #20
 8010a12:	4628      	mov	r0, r5
 8010a14:	f7f7 fe42 	bl	800869c <pbuf_remove_header>
      pbuf_cat(p, r);
 8010a18:	4629      	mov	r1, r5
 8010a1a:	4630      	mov	r0, r6
 8010a1c:	f7f8 f80a 	bl	8008a34 <pbuf_cat>
      r = iprh->next_pbuf;
 8010a20:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 8010a22:	2d00      	cmp	r5, #0
 8010a24:	d1f3      	bne.n	8010a0e <ip4_reass+0x15e>
    if (ipr == reassdatagrams) {
 8010a26:	4b24      	ldr	r3, [pc, #144]	; (8010ab8 <ip4_reass+0x208>)
 8010a28:	6819      	ldr	r1, [r3, #0]
 8010a2a:	428c      	cmp	r4, r1
 8010a2c:	d005      	beq.n	8010a3a <ip4_reass+0x18a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010a2e:	b129      	cbz	r1, 8010a3c <ip4_reass+0x18c>
        if (ipr_prev->next == ipr) {
 8010a30:	680b      	ldr	r3, [r1, #0]
 8010a32:	429c      	cmp	r4, r3
 8010a34:	d002      	beq.n	8010a3c <ip4_reass+0x18c>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010a36:	4619      	mov	r1, r3
 8010a38:	e7f9      	b.n	8010a2e <ip4_reass+0x17e>
      ipr_prev = NULL;
 8010a3a:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010a3c:	4620      	mov	r0, r4
 8010a3e:	f7ff fd03 	bl	8010448 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 8010a42:	4630      	mov	r0, r6
 8010a44:	f7f7 ffd4 	bl	80089f0 <pbuf_clen>
 8010a48:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010a4a:	4b1a      	ldr	r3, [pc, #104]	; (8010ab4 <ip4_reass+0x204>)
 8010a4c:	881b      	ldrh	r3, [r3, #0]
 8010a4e:	4283      	cmp	r3, r0
 8010a50:	d304      	bcc.n	8010a5c <ip4_reass+0x1ac>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010a52:	4b18      	ldr	r3, [pc, #96]	; (8010ab4 <ip4_reass+0x204>)
 8010a54:	8818      	ldrh	r0, [r3, #0]
 8010a56:	1b00      	subs	r0, r0, r4
 8010a58:	8018      	strh	r0, [r3, #0]
    return p;
 8010a5a:	e00e      	b.n	8010a7a <ip4_reass+0x1ca>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010a5c:	4b17      	ldr	r3, [pc, #92]	; (8010abc <ip4_reass+0x20c>)
 8010a5e:	f240 229b 	movw	r2, #667	; 0x29b
 8010a62:	4917      	ldr	r1, [pc, #92]	; (8010ac0 <ip4_reass+0x210>)
 8010a64:	4817      	ldr	r0, [pc, #92]	; (8010ac4 <ip4_reass+0x214>)
 8010a66:	f003 fdc5 	bl	80145f4 <iprintf>
 8010a6a:	e7f2      	b.n	8010a52 <ip4_reass+0x1a2>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010a6c:	b144      	cbz	r4, 8010a80 <ip4_reass+0x1d0>
  if (ipr->p == NULL) {
 8010a6e:	6863      	ldr	r3, [r4, #4]
 8010a70:	b173      	cbz	r3, 8010a90 <ip4_reass+0x1e0>
  pbuf_free(p);
 8010a72:	4638      	mov	r0, r7
 8010a74:	f7f7 fe58 	bl	8008728 <pbuf_free>
  return NULL;
 8010a78:	2600      	movs	r6, #0
}
 8010a7a:	4630      	mov	r0, r6
 8010a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010a80:	4b0e      	ldr	r3, [pc, #56]	; (8010abc <ip4_reass+0x20c>)
 8010a82:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010a86:	4910      	ldr	r1, [pc, #64]	; (8010ac8 <ip4_reass+0x218>)
 8010a88:	480e      	ldr	r0, [pc, #56]	; (8010ac4 <ip4_reass+0x214>)
 8010a8a:	f003 fdb3 	bl	80145f4 <iprintf>
 8010a8e:	e7ee      	b.n	8010a6e <ip4_reass+0x1be>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010a90:	4b09      	ldr	r3, [pc, #36]	; (8010ab8 <ip4_reass+0x208>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	429c      	cmp	r4, r3
 8010a96:	d006      	beq.n	8010aa6 <ip4_reass+0x1f6>
 8010a98:	4b08      	ldr	r3, [pc, #32]	; (8010abc <ip4_reass+0x20c>)
 8010a9a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010a9e:	490b      	ldr	r1, [pc, #44]	; (8010acc <ip4_reass+0x21c>)
 8010aa0:	4808      	ldr	r0, [pc, #32]	; (8010ac4 <ip4_reass+0x214>)
 8010aa2:	f003 fda7 	bl	80145f4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010aa6:	2100      	movs	r1, #0
 8010aa8:	4620      	mov	r0, r4
 8010aaa:	f7ff fccd 	bl	8010448 <ip_reass_dequeue_datagram>
 8010aae:	e7e0      	b.n	8010a72 <ip4_reass+0x1c2>
  return NULL;
 8010ab0:	2600      	movs	r6, #0
 8010ab2:	e7e2      	b.n	8010a7a <ip4_reass+0x1ca>
 8010ab4:	20001886 	.word	0x20001886
 8010ab8:	20001888 	.word	0x20001888
 8010abc:	08018398 	.word	0x08018398
 8010ac0:	080182c4 	.word	0x080182c4
 8010ac4:	08015608 	.word	0x08015608
 8010ac8:	080182e0 	.word	0x080182e0
 8010acc:	080182ec 	.word	0x080182ec

08010ad0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ad4:	b08b      	sub	sp, #44	; 0x2c
 8010ad6:	4606      	mov	r6, r0
 8010ad8:	9106      	str	r1, [sp, #24]
 8010ada:	9208      	str	r2, [sp, #32]
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010adc:	f8b1 30b8 	ldrh.w	r3, [r1, #184]	; 0xb8
 8010ae0:	3b14      	subs	r3, #20
 8010ae2:	d44e      	bmi.n	8010b82 <ip4_frag+0xb2>
 8010ae4:	f3c3 03cf 	ubfx	r3, r3, #3, #16
 8010ae8:	9304      	str	r3, [sp, #16]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010aea:	f8d6 9004 	ldr.w	r9, [r6, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010aee:	f899 3000 	ldrb.w	r3, [r9]
 8010af2:	f003 030f 	and.w	r3, r3, #15
 8010af6:	2b05      	cmp	r3, #5
 8010af8:	f040 80d2 	bne.w	8010ca0 <ip4_frag+0x1d0>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010afc:	8973      	ldrh	r3, [r6, #10]
 8010afe:	2b13      	cmp	r3, #19
 8010b00:	d941      	bls.n	8010b86 <ip4_frag+0xb6>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010b02:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 8010b06:	f7f6 fb71 	bl	80071ec <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8010b0a:	f3c0 030c 	ubfx	r3, r0, #0, #13
 8010b0e:	9305      	str	r3, [sp, #20]
 8010b10:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 8010b14:	9309      	str	r3, [sp, #36]	; 0x24
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010b16:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 8010b1a:	f1aa 0a14 	sub.w	sl, sl, #20
 8010b1e:	fa1f fb8a 	uxth.w	fp, sl
  u16_t poff = IP_HLEN;
 8010b22:	2714      	movs	r7, #20
  u16_t newpbuflen = 0;
 8010b24:	2400      	movs	r4, #0

  while (left) {
 8010b26:	f1bb 0f00 	cmp.w	fp, #0
 8010b2a:	f000 80b7 	beq.w	8010c9c <ip4_frag+0x1cc>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010b2e:	9b04      	ldr	r3, [sp, #16]
 8010b30:	00db      	lsls	r3, r3, #3
 8010b32:	b29b      	uxth	r3, r3
 8010b34:	455b      	cmp	r3, fp
 8010b36:	bf28      	it	cs
 8010b38:	465b      	movcs	r3, fp
 8010b3a:	9303      	str	r3, [sp, #12]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010b3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010b40:	2114      	movs	r1, #20
 8010b42:	200e      	movs	r0, #14
 8010b44:	f7f7 fe52 	bl	80087ec <pbuf_alloc>
    if (rambuf == NULL) {
 8010b48:	4682      	mov	sl, r0
 8010b4a:	2800      	cmp	r0, #0
 8010b4c:	f000 80ab 	beq.w	8010ca6 <ip4_frag+0x1d6>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010b50:	8943      	ldrh	r3, [r0, #10]
 8010b52:	2b13      	cmp	r3, #19
 8010b54:	d921      	bls.n	8010b9a <ip4_frag+0xca>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010b56:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010b5a:	f8d9 2000 	ldr.w	r2, [r9]
 8010b5e:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8010b62:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8010b66:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8010b6a:	601a      	str	r2, [r3, #0]
 8010b6c:	605d      	str	r5, [r3, #4]
 8010b6e:	6098      	str	r0, [r3, #8]
 8010b70:	60d9      	str	r1, [r3, #12]
 8010b72:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010b76:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010b78:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010b7c:	9307      	str	r3, [sp, #28]

    left_to_copy = fragsize;
 8010b7e:	9d03      	ldr	r5, [sp, #12]
    while (left_to_copy) {
 8010b80:	e03c      	b.n	8010bfc <ip4_frag+0x12c>
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010b82:	3307      	adds	r3, #7
 8010b84:	e7ae      	b.n	8010ae4 <ip4_frag+0x14>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010b86:	4b49      	ldr	r3, [pc, #292]	; (8010cac <ip4_frag+0x1dc>)
 8010b88:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010b8c:	4948      	ldr	r1, [pc, #288]	; (8010cb0 <ip4_frag+0x1e0>)
 8010b8e:	4849      	ldr	r0, [pc, #292]	; (8010cb4 <ip4_frag+0x1e4>)
 8010b90:	f003 fd30 	bl	80145f4 <iprintf>
 8010b94:	f06f 0005 	mvn.w	r0, #5
 8010b98:	e043      	b.n	8010c22 <ip4_frag+0x152>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010b9a:	4b44      	ldr	r3, [pc, #272]	; (8010cac <ip4_frag+0x1dc>)
 8010b9c:	f240 3225 	movw	r2, #805	; 0x325
 8010ba0:	4945      	ldr	r1, [pc, #276]	; (8010cb8 <ip4_frag+0x1e8>)
 8010ba2:	4844      	ldr	r0, [pc, #272]	; (8010cb4 <ip4_frag+0x1e4>)
 8010ba4:	f003 fd26 	bl	80145f4 <iprintf>
 8010ba8:	e7d5      	b.n	8010b56 <ip4_frag+0x86>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010baa:	4b40      	ldr	r3, [pc, #256]	; (8010cac <ip4_frag+0x1dc>)
 8010bac:	f240 322d 	movw	r2, #813	; 0x32d
 8010bb0:	4942      	ldr	r1, [pc, #264]	; (8010cbc <ip4_frag+0x1ec>)
 8010bb2:	4840      	ldr	r0, [pc, #256]	; (8010cb4 <ip4_frag+0x1e4>)
 8010bb4:	f003 fd1e 	bl	80145f4 <iprintf>
 8010bb8:	e026      	b.n	8010c08 <ip4_frag+0x138>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010bba:	f7ff fe2b 	bl	8010814 <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 8010bbe:	4680      	mov	r8, r0
 8010bc0:	b350      	cbz	r0, 8010c18 <ip4_frag+0x148>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010bc2:	6873      	ldr	r3, [r6, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010bc4:	443b      	add	r3, r7
 8010bc6:	9401      	str	r4, [sp, #4]
 8010bc8:	9300      	str	r3, [sp, #0]
 8010bca:	4603      	mov	r3, r0
 8010bcc:	2241      	movs	r2, #65	; 0x41
 8010bce:	4621      	mov	r1, r4
 8010bd0:	2000      	movs	r0, #0
 8010bd2:	f7f7 fd3b 	bl	800864c <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8010bd6:	9002      	str	r0, [sp, #8]
 8010bd8:	b330      	cbz	r0, 8010c28 <ip4_frag+0x158>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8010bda:	4630      	mov	r0, r6
 8010bdc:	f7f7 ff12 	bl	8008a04 <pbuf_ref>
      pcr->original = p;
 8010be0:	f8c8 6014 	str.w	r6, [r8, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010be4:	4b36      	ldr	r3, [pc, #216]	; (8010cc0 <ip4_frag+0x1f0>)
 8010be6:	f8c8 3010 	str.w	r3, [r8, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010bea:	9902      	ldr	r1, [sp, #8]
 8010bec:	4650      	mov	r0, sl
 8010bee:	f7f7 ff21 	bl	8008a34 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010bf2:	1b2d      	subs	r5, r5, r4
 8010bf4:	b2ad      	uxth	r5, r5
      if (left_to_copy) {
 8010bf6:	b10d      	cbz	r5, 8010bfc <ip4_frag+0x12c>
        poff = 0;
        p = p->next;
 8010bf8:	6836      	ldr	r6, [r6, #0]
        poff = 0;
 8010bfa:	2700      	movs	r7, #0
    while (left_to_copy) {
 8010bfc:	b1ed      	cbz	r5, 8010c3a <ip4_frag+0x16a>
      u16_t plen = (u16_t)(p->len - poff);
 8010bfe:	8973      	ldrh	r3, [r6, #10]
 8010c00:	1bdc      	subs	r4, r3, r7
 8010c02:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010c04:	42bb      	cmp	r3, r7
 8010c06:	d3d0      	bcc.n	8010baa <ip4_frag+0xda>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010c08:	42ac      	cmp	r4, r5
 8010c0a:	bf28      	it	cs
 8010c0c:	462c      	movcs	r4, r5
      if (!newpbuflen) {
 8010c0e:	2c00      	cmp	r4, #0
 8010c10:	d1d3      	bne.n	8010bba <ip4_frag+0xea>
        p = p->next;
 8010c12:	6836      	ldr	r6, [r6, #0]
        poff = 0;
 8010c14:	4627      	mov	r7, r4
        continue;
 8010c16:	e7f1      	b.n	8010bfc <ip4_frag+0x12c>
 8010c18:	4650      	mov	r0, sl
        pbuf_free(rambuf);
 8010c1a:	f7f7 fd85 	bl	8008728 <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010c1e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8010c22:	b00b      	add	sp, #44	; 0x2c
 8010c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 8010c28:	4640      	mov	r0, r8
 8010c2a:	f7ff fceb 	bl	8010604 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010c2e:	4650      	mov	r0, sl
 8010c30:	f7f7 fd7a 	bl	8008728 <pbuf_free>
  return ERR_MEM;
 8010c34:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 8010c38:	e7f3      	b.n	8010c22 <ip4_frag+0x152>
    poff = (u16_t)(poff + newpbuflen);
 8010c3a:	4427      	add	r7, r4
 8010c3c:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 8010c3e:	9b06      	ldr	r3, [sp, #24]
 8010c40:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8010c44:	3b14      	subs	r3, #20
    tmp = (IP_OFFMASK & (ofo));
 8010c46:	9a05      	ldr	r2, [sp, #20]
 8010c48:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 8010c4c:	459b      	cmp	fp, r3
 8010c4e:	dc01      	bgt.n	8010c54 <ip4_frag+0x184>
 8010c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c52:	b10b      	cbz	r3, 8010c58 <ip4_frag+0x188>
      tmp = tmp | IP_MF;
 8010c54:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010c58:	f7f6 fac8 	bl	80071ec <lwip_htons>
 8010c5c:	9d07      	ldr	r5, [sp, #28]
 8010c5e:	80e8      	strh	r0, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010c60:	9b03      	ldr	r3, [sp, #12]
 8010c62:	f103 0014 	add.w	r0, r3, #20
 8010c66:	b280      	uxth	r0, r0
 8010c68:	f7f6 fac0 	bl	80071ec <lwip_htons>
 8010c6c:	8068      	strh	r0, [r5, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010c6e:	2300      	movs	r3, #0
 8010c70:	72ab      	strb	r3, [r5, #10]
 8010c72:	72eb      	strb	r3, [r5, #11]
    netif->output(netif, rambuf, dest);
 8010c74:	9806      	ldr	r0, [sp, #24]
 8010c76:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 8010c7a:	9a08      	ldr	r2, [sp, #32]
 8010c7c:	4651      	mov	r1, sl
 8010c7e:	4798      	blx	r3
    pbuf_free(rambuf);
 8010c80:	4650      	mov	r0, sl
 8010c82:	f7f7 fd51 	bl	8008728 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010c86:	9b03      	ldr	r3, [sp, #12]
 8010c88:	ebab 0b03 	sub.w	fp, fp, r3
 8010c8c:	fa1f fb8b 	uxth.w	fp, fp
    ofo = (u16_t)(ofo + nfb);
 8010c90:	9b05      	ldr	r3, [sp, #20]
 8010c92:	9a04      	ldr	r2, [sp, #16]
 8010c94:	4413      	add	r3, r2
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	9305      	str	r3, [sp, #20]
 8010c9a:	e744      	b.n	8010b26 <ip4_frag+0x56>
  return ERR_OK;
 8010c9c:	2000      	movs	r0, #0
 8010c9e:	e7c0      	b.n	8010c22 <ip4_frag+0x152>
    return ERR_VAL;
 8010ca0:	f06f 0005 	mvn.w	r0, #5
 8010ca4:	e7bd      	b.n	8010c22 <ip4_frag+0x152>
  return ERR_MEM;
 8010ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8010caa:	e7ba      	b.n	8010c22 <ip4_frag+0x152>
 8010cac:	08018398 	.word	0x08018398
 8010cb0:	08018278 	.word	0x08018278
 8010cb4:	08015608 	.word	0x08015608
 8010cb8:	08018294 	.word	0x08018294
 8010cbc:	080182b4 	.word	0x080182b4
 8010cc0:	08010631 	.word	0x08010631

08010cc4 <ethip6_output>:
 * @return
 * - ERR_OK or the return value of @ref nd6_get_next_hop_addr_or_queue.
 */
err_t
ethip6_output(struct netif *netif, struct pbuf *q, const ip6_addr_t *ip6addr)
{
 8010cc4:	b530      	push	{r4, r5, lr}
 8010cc6:	b087      	sub	sp, #28
 8010cc8:	4604      	mov	r4, r0
 8010cca:	460d      	mov	r5, r1

  /* The destination IP address must be properly zoned from here on down. */
  IP6_ADDR_ZONECHECK_NETIF(ip6addr, netif);

  /* multicast destination IP address? */
  if (ip6_addr_ismulticast(ip6addr)) {
 8010ccc:	7813      	ldrb	r3, [r2, #0]
 8010cce:	2bff      	cmp	r3, #255	; 0xff
 8010cd0:	d017      	beq.n	8010d02 <ethip6_output+0x3e>

  /* We have a unicast destination IP address */
  /* @todo anycast? */

  /* Ask ND6 what to do with the packet. */
  result = nd6_get_next_hop_addr_or_queue(netif, q, ip6addr, &hwaddr);
 8010cd2:	ab03      	add	r3, sp, #12
 8010cd4:	f003 f9f2 	bl	80140bc <nd6_get_next_hop_addr_or_queue>
  if (result != ERR_OK) {
 8010cd8:	4603      	mov	r3, r0
 8010cda:	bb60      	cbnz	r0, 8010d36 <ethip6_output+0x72>
    return result;
  }

  /* If no hardware address is returned, nd6 has queued the packet for later. */
  if (hwaddr == NULL) {
 8010cdc:	9a03      	ldr	r2, [sp, #12]
 8010cde:	b352      	cbz	r2, 8010d36 <ethip6_output+0x72>
    return ERR_OK;
  }

  /* Send out the packet using the returned hardware address. */
  SMEMCPY(dest.addr, hwaddr, 6);
 8010ce0:	6810      	ldr	r0, [r2, #0]
 8010ce2:	9004      	str	r0, [sp, #16]
 8010ce4:	8893      	ldrh	r3, [r2, #4]
 8010ce6:	f8ad 3014 	strh.w	r3, [sp, #20]
  return ethernet_output(netif, q, (const struct eth_addr*)(netif->hwaddr), &dest, ETHTYPE_IPV6);
 8010cea:	f248 63dd 	movw	r3, #34525	; 0x86dd
 8010cee:	9300      	str	r3, [sp, #0]
 8010cf0:	ab04      	add	r3, sp, #16
 8010cf2:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8010cf6:	4629      	mov	r1, r5
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	f003 fbc3 	bl	8014484 <ethernet_output>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	e019      	b.n	8010d36 <ethip6_output+0x72>
    dest.addr[0] = 0x33;
 8010d02:	2333      	movs	r3, #51	; 0x33
 8010d04:	f88d 3010 	strb.w	r3, [sp, #16]
    dest.addr[1] = 0x33;
 8010d08:	f88d 3011 	strb.w	r3, [sp, #17]
    dest.addr[2] = ((const u8_t *)(&(ip6addr->addr[3])))[0];
 8010d0c:	7b13      	ldrb	r3, [r2, #12]
 8010d0e:	f88d 3012 	strb.w	r3, [sp, #18]
    dest.addr[3] = ((const u8_t *)(&(ip6addr->addr[3])))[1];
 8010d12:	7b53      	ldrb	r3, [r2, #13]
 8010d14:	f88d 3013 	strb.w	r3, [sp, #19]
    dest.addr[4] = ((const u8_t *)(&(ip6addr->addr[3])))[2];
 8010d18:	7b93      	ldrb	r3, [r2, #14]
 8010d1a:	f88d 3014 	strb.w	r3, [sp, #20]
    dest.addr[5] = ((const u8_t *)(&(ip6addr->addr[3])))[3];
 8010d1e:	7bd3      	ldrb	r3, [r2, #15]
 8010d20:	f88d 3015 	strb.w	r3, [sp, #21]
    return ethernet_output(netif, q, (const struct eth_addr*)(netif->hwaddr), &dest, ETHTYPE_IPV6);
 8010d24:	f248 63dd 	movw	r3, #34525	; 0x86dd
 8010d28:	9300      	str	r3, [sp, #0]
 8010d2a:	ab04      	add	r3, sp, #16
 8010d2c:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
 8010d30:	f003 fba8 	bl	8014484 <ethernet_output>
 8010d34:	4603      	mov	r3, r0
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	b007      	add	sp, #28
 8010d3a:	bd30      	pop	{r4, r5, pc}

08010d3c <icmp6_send_response_with_addrs_and_netif>:
 * @param netif netif to send the packet
 */
static void
icmp6_send_response_with_addrs_and_netif(struct pbuf *p, u8_t code, u32_t data, u8_t type,
    const ip6_addr_t *reply_src, const ip6_addr_t *reply_dest, struct netif *netif)
{
 8010d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d40:	b085      	sub	sp, #20
 8010d42:	4606      	mov	r6, r0
 8010d44:	4688      	mov	r8, r1
 8010d46:	4617      	mov	r7, r2
 8010d48:	4699      	mov	r9, r3
  struct pbuf *q;
  struct icmp6_hdr *icmp6hdr;

  /* ICMPv6 header + IPv6 header + data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp6_hdr) + IP6_HLEN + LWIP_ICMP6_DATASIZE,
 8010d4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010d4e:	2138      	movs	r1, #56	; 0x38
 8010d50:	2036      	movs	r0, #54	; 0x36
 8010d52:	f7f7 fd4b 	bl	80087ec <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8010d56:	b380      	cbz	r0, 8010dba <icmp6_send_response_with_addrs_and_netif+0x7e>
 8010d58:	4604      	mov	r4, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMPv6 packet.\n"));
    ICMP6_STATS_INC(icmp6.memerr);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp 6message",
 8010d5a:	8943      	ldrh	r3, [r0, #10]
 8010d5c:	2b37      	cmp	r3, #55	; 0x37
 8010d5e:	d92f      	bls.n	8010dc0 <icmp6_send_response_with_addrs_and_netif+0x84>
             (q->len >= (sizeof(struct icmp6_hdr) + IP6_HLEN + LWIP_ICMP6_DATASIZE)));

  icmp6hdr = (struct icmp6_hdr *)q->payload;
 8010d60:	6865      	ldr	r5, [r4, #4]
  icmp6hdr->type = type;
 8010d62:	f885 9000 	strb.w	r9, [r5]
  icmp6hdr->code = code;
 8010d66:	f885 8001 	strb.w	r8, [r5, #1]
  icmp6hdr->data = lwip_htonl(data);
 8010d6a:	4638      	mov	r0, r7
 8010d6c:	f7f6 fa43 	bl	80071f6 <lwip_htonl>
 8010d70:	6068      	str	r0, [r5, #4]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp6_hdr), (u8_t *)p->payload,
 8010d72:	6863      	ldr	r3, [r4, #4]
 8010d74:	6871      	ldr	r1, [r6, #4]
 8010d76:	460a      	mov	r2, r1
 8010d78:	3308      	adds	r3, #8
 8010d7a:	3130      	adds	r1, #48	; 0x30
 8010d7c:	f8d2 c000 	ldr.w	ip, [r2]
 8010d80:	6857      	ldr	r7, [r2, #4]
 8010d82:	6896      	ldr	r6, [r2, #8]
 8010d84:	68d0      	ldr	r0, [r2, #12]
 8010d86:	f8c3 c000 	str.w	ip, [r3]
 8010d8a:	605f      	str	r7, [r3, #4]
 8010d8c:	609e      	str	r6, [r3, #8]
 8010d8e:	60d8      	str	r0, [r3, #12]
 8010d90:	3210      	adds	r2, #16
 8010d92:	3310      	adds	r3, #16
 8010d94:	428a      	cmp	r2, r1
 8010d96:	d1f1      	bne.n	8010d7c <icmp6_send_response_with_addrs_and_netif+0x40>
          IP6_HLEN + LWIP_ICMP6_DATASIZE);

  /* calculate checksum */
  icmp6hdr->chksum = 0;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	70ab      	strb	r3, [r5, #2]
 8010d9c:	70eb      	strb	r3, [r5, #3]
      reply_src, reply_dest);
  }
#endif /* CHECKSUM_GEN_ICMP6 */

  ICMP6_STATS_INC(icmp6.xmit);
  ip6_output_if(q, reply_src, reply_dest, LWIP_ICMP6_HL, 0, IP6_NEXTH_ICMP6, netif);
 8010d9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010da0:	9202      	str	r2, [sp, #8]
 8010da2:	223a      	movs	r2, #58	; 0x3a
 8010da4:	9201      	str	r2, [sp, #4]
 8010da6:	9300      	str	r3, [sp, #0]
 8010da8:	23ff      	movs	r3, #255	; 0xff
 8010daa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010dac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010dae:	4620      	mov	r0, r4
 8010db0:	f000 fcc4 	bl	801173c <ip6_output_if>
  pbuf_free(q);
 8010db4:	4620      	mov	r0, r4
 8010db6:	f7f7 fcb7 	bl	8008728 <pbuf_free>
}
 8010dba:	b005      	add	sp, #20
 8010dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp 6message",
 8010dc0:	4b03      	ldr	r3, [pc, #12]	; (8010dd0 <icmp6_send_response_with_addrs_and_netif+0x94>)
 8010dc2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010dc6:	4903      	ldr	r1, [pc, #12]	; (8010dd4 <icmp6_send_response_with_addrs_and_netif+0x98>)
 8010dc8:	4803      	ldr	r0, [pc, #12]	; (8010dd8 <icmp6_send_response_with_addrs_and_netif+0x9c>)
 8010dca:	f003 fc13 	bl	80145f4 <iprintf>
 8010dce:	e7c7      	b.n	8010d60 <icmp6_send_response_with_addrs_and_netif+0x24>
 8010dd0:	080184b0 	.word	0x080184b0
 8010dd4:	080184e8 	.word	0x080184e8
 8010dd8:	08015608 	.word	0x08015608

08010ddc <icmp6_send_response>:
{
 8010ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010de0:	b084      	sub	sp, #16
 8010de2:	4605      	mov	r5, r0
 8010de4:	460e      	mov	r6, r1
 8010de6:	4617      	mov	r7, r2
 8010de8:	4698      	mov	r8, r3
  struct netif *netif = ip_current_netif();
 8010dea:	4b0e      	ldr	r3, [pc, #56]	; (8010e24 <icmp6_send_response+0x48>)
 8010dec:	681c      	ldr	r4, [r3, #0]
  LWIP_ASSERT("icmpv6 packet not a direct response", netif != NULL);
 8010dee:	b18c      	cbz	r4, 8010e14 <icmp6_send_response+0x38>
  reply_src = ip_2_ip6(ip6_select_source_address(netif, reply_dest));
 8010df0:	490d      	ldr	r1, [pc, #52]	; (8010e28 <icmp6_send_response+0x4c>)
 8010df2:	4620      	mov	r0, r4
 8010df4:	f000 f926 	bl	8011044 <ip6_select_source_address>
  if (reply_src == NULL) {
 8010df8:	b148      	cbz	r0, 8010e0e <icmp6_send_response+0x32>
  icmp6_send_response_with_addrs_and_netif(p, code, data, type, reply_src, reply_dest, netif);
 8010dfa:	9402      	str	r4, [sp, #8]
 8010dfc:	4a0a      	ldr	r2, [pc, #40]	; (8010e28 <icmp6_send_response+0x4c>)
 8010dfe:	9201      	str	r2, [sp, #4]
 8010e00:	9000      	str	r0, [sp, #0]
 8010e02:	4643      	mov	r3, r8
 8010e04:	463a      	mov	r2, r7
 8010e06:	4631      	mov	r1, r6
 8010e08:	4628      	mov	r0, r5
 8010e0a:	f7ff ff97 	bl	8010d3c <icmp6_send_response_with_addrs_and_netif>
}
 8010e0e:	b004      	add	sp, #16
 8010e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("icmpv6 packet not a direct response", netif != NULL);
 8010e14:	4b05      	ldr	r3, [pc, #20]	; (8010e2c <icmp6_send_response+0x50>)
 8010e16:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8010e1a:	4905      	ldr	r1, [pc, #20]	; (8010e30 <icmp6_send_response+0x54>)
 8010e1c:	4805      	ldr	r0, [pc, #20]	; (8010e34 <icmp6_send_response+0x58>)
 8010e1e:	f003 fbe9 	bl	80145f4 <iprintf>
 8010e22:	e7e5      	b.n	8010df0 <icmp6_send_response+0x14>
 8010e24:	20004b84 	.word	0x20004b84
 8010e28:	20004b98 	.word	0x20004b98
 8010e2c:	080184b0 	.word	0x080184b0
 8010e30:	08018460 	.word	0x08018460
 8010e34:	08015608 	.word	0x08015608

08010e38 <icmp6_send_response_with_addrs>:
{
 8010e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e3c:	b085      	sub	sp, #20
 8010e3e:	4606      	mov	r6, r0
 8010e40:	460f      	mov	r7, r1
 8010e42:	4690      	mov	r8, r2
 8010e44:	4699      	mov	r9, r3
 8010e46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010e48:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("must provide both source and destination", src_addr != NULL);
 8010e4a:	b18d      	cbz	r5, 8010e70 <icmp6_send_response_with_addrs+0x38>
  LWIP_ASSERT("must provide both source and destination", dest_addr != NULL);
 8010e4c:	b1c4      	cbz	r4, 8010e80 <icmp6_send_response_with_addrs+0x48>
  netif = ip6_route(reply_src, reply_dest);
 8010e4e:	4629      	mov	r1, r5
 8010e50:	4620      	mov	r0, r4
 8010e52:	f000 f8e9 	bl	8011028 <ip6_route>
  if (netif == NULL) {
 8010e56:	b140      	cbz	r0, 8010e6a <icmp6_send_response_with_addrs+0x32>
  icmp6_send_response_with_addrs_and_netif(p, code, data, type, reply_src,
 8010e58:	9002      	str	r0, [sp, #8]
 8010e5a:	9501      	str	r5, [sp, #4]
 8010e5c:	9400      	str	r4, [sp, #0]
 8010e5e:	464b      	mov	r3, r9
 8010e60:	4642      	mov	r2, r8
 8010e62:	4639      	mov	r1, r7
 8010e64:	4630      	mov	r0, r6
 8010e66:	f7ff ff69 	bl	8010d3c <icmp6_send_response_with_addrs_and_netif>
}
 8010e6a:	b005      	add	sp, #20
 8010e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("must provide both source and destination", src_addr != NULL);
 8010e70:	4b07      	ldr	r3, [pc, #28]	; (8010e90 <icmp6_send_response_with_addrs+0x58>)
 8010e72:	f240 1261 	movw	r2, #353	; 0x161
 8010e76:	4907      	ldr	r1, [pc, #28]	; (8010e94 <icmp6_send_response_with_addrs+0x5c>)
 8010e78:	4807      	ldr	r0, [pc, #28]	; (8010e98 <icmp6_send_response_with_addrs+0x60>)
 8010e7a:	f003 fbbb 	bl	80145f4 <iprintf>
 8010e7e:	e7e5      	b.n	8010e4c <icmp6_send_response_with_addrs+0x14>
  LWIP_ASSERT("must provide both source and destination", dest_addr != NULL);
 8010e80:	4b03      	ldr	r3, [pc, #12]	; (8010e90 <icmp6_send_response_with_addrs+0x58>)
 8010e82:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8010e86:	4903      	ldr	r1, [pc, #12]	; (8010e94 <icmp6_send_response_with_addrs+0x5c>)
 8010e88:	4803      	ldr	r0, [pc, #12]	; (8010e98 <icmp6_send_response_with_addrs+0x60>)
 8010e8a:	f003 fbb3 	bl	80145f4 <iprintf>
 8010e8e:	e7de      	b.n	8010e4e <icmp6_send_response_with_addrs+0x16>
 8010e90:	080184b0 	.word	0x080184b0
 8010e94:	08018484 	.word	0x08018484
 8010e98:	08015608 	.word	0x08015608

08010e9c <icmp6_input>:
{
 8010e9c:	b570      	push	{r4, r5, r6, lr}
 8010e9e:	b084      	sub	sp, #16
 8010ea0:	4604      	mov	r4, r0
  if (p->len < sizeof(struct icmp6_hdr)) {
 8010ea2:	8943      	ldrh	r3, [r0, #10]
 8010ea4:	2b07      	cmp	r3, #7
 8010ea6:	d934      	bls.n	8010f12 <icmp6_input+0x76>
 8010ea8:	460d      	mov	r5, r1
  icmp6hdr = (struct icmp6_hdr *)p->payload;
 8010eaa:	6843      	ldr	r3, [r0, #4]
  switch (icmp6hdr->type) {
 8010eac:	781b      	ldrb	r3, [r3, #0]
 8010eae:	2b84      	cmp	r3, #132	; 0x84
 8010eb0:	d833      	bhi.n	8010f1a <icmp6_input+0x7e>
 8010eb2:	2b82      	cmp	r3, #130	; 0x82
 8010eb4:	d239      	bcs.n	8010f2a <icmp6_input+0x8e>
 8010eb6:	2b02      	cmp	r3, #2
 8010eb8:	d032      	beq.n	8010f20 <icmp6_input+0x84>
 8010eba:	2b80      	cmp	r3, #128	; 0x80
 8010ebc:	d125      	bne.n	8010f0a <icmp6_input+0x6e>
    if (ip6_addr_ismulticast(ip6_current_dest_addr())) {
 8010ebe:	4b23      	ldr	r3, [pc, #140]	; (8010f4c <icmp6_input+0xb0>)
 8010ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ec4:	2bff      	cmp	r3, #255	; 0xff
 8010ec6:	d033      	beq.n	8010f30 <icmp6_input+0x94>
    r = pbuf_alloc(PBUF_IP, p->tot_len, PBUF_RAM);
 8010ec8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010ecc:	8901      	ldrh	r1, [r0, #8]
 8010ece:	2036      	movs	r0, #54	; 0x36
 8010ed0:	f7f7 fc8c 	bl	80087ec <pbuf_alloc>
    if (r == NULL) {
 8010ed4:	4606      	mov	r6, r0
 8010ed6:	b370      	cbz	r0, 8010f36 <icmp6_input+0x9a>
    if (pbuf_copy(r, p) != ERR_OK) {
 8010ed8:	4621      	mov	r1, r4
 8010eda:	f7f7 fded 	bl	8008ab8 <pbuf_copy>
 8010ede:	bb70      	cbnz	r0, 8010f3e <icmp6_input+0xa2>
    ((struct icmp6_echo_hdr *)(r->payload))->type = ICMP6_TYPE_EREP;
 8010ee0:	6873      	ldr	r3, [r6, #4]
 8010ee2:	2281      	movs	r2, #129	; 0x81
 8010ee4:	701a      	strb	r2, [r3, #0]
    ((struct icmp6_echo_hdr *)(r->payload))->chksum = 0;
 8010ee6:	6872      	ldr	r2, [r6, #4]
 8010ee8:	2300      	movs	r3, #0
 8010eea:	7093      	strb	r3, [r2, #2]
 8010eec:	70d3      	strb	r3, [r2, #3]
    ip6_output_if(r, reply_src, ip6_current_src_addr(),
 8010eee:	4918      	ldr	r1, [pc, #96]	; (8010f50 <icmp6_input+0xb4>)
 8010ef0:	9502      	str	r5, [sp, #8]
 8010ef2:	223a      	movs	r2, #58	; 0x3a
 8010ef4:	9201      	str	r2, [sp, #4]
 8010ef6:	9300      	str	r3, [sp, #0]
 8010ef8:	23ff      	movs	r3, #255	; 0xff
 8010efa:	460a      	mov	r2, r1
 8010efc:	3114      	adds	r1, #20
 8010efe:	4630      	mov	r0, r6
 8010f00:	f000 fc1c 	bl	801173c <ip6_output_if>
    pbuf_free(r);
 8010f04:	4630      	mov	r0, r6
 8010f06:	f7f7 fc0f 	bl	8008728 <pbuf_free>
  pbuf_free(p);
 8010f0a:	4620      	mov	r0, r4
 8010f0c:	f7f7 fc0c 	bl	8008728 <pbuf_free>
 8010f10:	e001      	b.n	8010f16 <icmp6_input+0x7a>
    pbuf_free(p);
 8010f12:	f7f7 fc09 	bl	8008728 <pbuf_free>
}
 8010f16:	b004      	add	sp, #16
 8010f18:	bd70      	pop	{r4, r5, r6, pc}
  switch (icmp6hdr->type) {
 8010f1a:	3b86      	subs	r3, #134	; 0x86
 8010f1c:	2b03      	cmp	r3, #3
 8010f1e:	d8f4      	bhi.n	8010f0a <icmp6_input+0x6e>
    nd6_input(p, inp);
 8010f20:	4629      	mov	r1, r5
 8010f22:	4620      	mov	r0, r4
 8010f24:	f002 fa6e 	bl	8013404 <nd6_input>
    return;
 8010f28:	e7f5      	b.n	8010f16 <icmp6_input+0x7a>
    mld6_input(p, inp);
 8010f2a:	f001 f929 	bl	8012180 <mld6_input>
    return;
 8010f2e:	e7f2      	b.n	8010f16 <icmp6_input+0x7a>
      pbuf_free(p);
 8010f30:	f7f7 fbfa 	bl	8008728 <pbuf_free>
      return;
 8010f34:	e7ef      	b.n	8010f16 <icmp6_input+0x7a>
      pbuf_free(p);
 8010f36:	4620      	mov	r0, r4
 8010f38:	f7f7 fbf6 	bl	8008728 <pbuf_free>
      return;
 8010f3c:	e7eb      	b.n	8010f16 <icmp6_input+0x7a>
      pbuf_free(p);
 8010f3e:	4620      	mov	r0, r4
 8010f40:	f7f7 fbf2 	bl	8008728 <pbuf_free>
      pbuf_free(r);
 8010f44:	4630      	mov	r0, r6
 8010f46:	f7f7 fbef 	bl	8008728 <pbuf_free>
      return;
 8010f4a:	e7e4      	b.n	8010f16 <icmp6_input+0x7a>
 8010f4c:	20004b84 	.word	0x20004b84
 8010f50:	20004b98 	.word	0x20004b98

08010f54 <icmp6_dest_unreach>:
{
 8010f54:	b508      	push	{r3, lr}
  icmp6_send_response(p, c, 0, ICMP6_TYPE_DUR);
 8010f56:	2301      	movs	r3, #1
 8010f58:	2200      	movs	r2, #0
 8010f5a:	f7ff ff3f 	bl	8010ddc <icmp6_send_response>
}
 8010f5e:	bd08      	pop	{r3, pc}

08010f60 <icmp6_time_exceeded_with_addrs>:
{
 8010f60:	b500      	push	{lr}
 8010f62:	b083      	sub	sp, #12
  icmp6_send_response_with_addrs(p, c, 0, ICMP6_TYPE_TE, src_addr, dest_addr);
 8010f64:	9301      	str	r3, [sp, #4]
 8010f66:	9200      	str	r2, [sp, #0]
 8010f68:	2303      	movs	r3, #3
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	f7ff ff64 	bl	8010e38 <icmp6_send_response_with_addrs>
}
 8010f70:	b003      	add	sp, #12
 8010f72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010f78 <icmp6_param_problem>:
{
 8010f78:	b510      	push	{r4, lr}
  u32_t pointer_u32 = (u32_t)((const u8_t *)pointer - (const u8_t *)ip6_current_header());
 8010f7a:	4b03      	ldr	r3, [pc, #12]	; (8010f88 <icmp6_param_problem+0x10>)
 8010f7c:	68dc      	ldr	r4, [r3, #12]
  icmp6_send_response(p, c, pointer_u32, ICMP6_TYPE_PP);
 8010f7e:	2304      	movs	r3, #4
 8010f80:	1b12      	subs	r2, r2, r4
 8010f82:	f7ff ff2b 	bl	8010ddc <icmp6_send_response>
}
 8010f86:	bd10      	pop	{r4, pc}
 8010f88:	20004b84 	.word	0x20004b84

08010f8c <ip6_input_accept>:
/** Return true if the current input packet should be accepted on this netif */
static int
ip6_input_accept(struct netif *netif)
{
  /* interface is up? */
  if (netif_is_up(netif)) {
 8010f8c:	f890 30c3 	ldrb.w	r3, [r0, #195]	; 0xc3
 8010f90:	f013 0f01 	tst.w	r3, #1
 8010f94:	d001      	beq.n	8010f9a <ip6_input_accept+0xe>
    u8_t i;
    /* unicast to this interface address? address configured? */
    /* If custom scopes are used, the destination zone will be tested as
      * part of the local-address comparison, but we need to test the source
      * scope as well (e.g., is this interface on the same link?). */
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8010f96:	2300      	movs	r3, #0
 8010f98:	e023      	b.n	8010fe2 <ip6_input_accept+0x56>
        /* accept on this netif */
        return 1;
      }
    }
  }
  return 0;
 8010f9a:	2000      	movs	r0, #0
 8010f9c:	4770      	bx	lr
          ip6_addr_cmp(ip6_current_dest_addr(), netif_ip6_addr(netif, i))
 8010f9e:	4a21      	ldr	r2, [pc, #132]	; (8011024 <ip6_input_accept+0x98>)
 8010fa0:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8010fa2:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8010fa6:	00a2      	lsls	r2, r4, #2
 8010fa8:	4402      	add	r2, r0
 8010faa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8010fac:	4295      	cmp	r5, r2
 8010fae:	d12b      	bne.n	8011008 <ip6_input_accept+0x7c>
 8010fb0:	4a1c      	ldr	r2, [pc, #112]	; (8011024 <ip6_input_accept+0x98>)
 8010fb2:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8010fb4:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8010fb8:	00a2      	lsls	r2, r4, #2
 8010fba:	4402      	add	r2, r0
 8010fbc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8010fbe:	4295      	cmp	r5, r2
 8010fc0:	d122      	bne.n	8011008 <ip6_input_accept+0x7c>
 8010fc2:	4a18      	ldr	r2, [pc, #96]	; (8011024 <ip6_input_accept+0x98>)
 8010fc4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8010fc6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010fca:	008a      	lsls	r2, r1, #2
 8010fcc:	4402      	add	r2, r0
 8010fce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010fd0:	4294      	cmp	r4, r2
 8010fd2:	d119      	bne.n	8011008 <ip6_input_accept+0x7c>
        return 1;
 8010fd4:	2001      	movs	r0, #1
 8010fd6:	e000      	b.n	8010fda <ip6_input_accept+0x4e>
  return 0;
 8010fd8:	2000      	movs	r0, #0
}
 8010fda:	bc30      	pop	{r4, r5}
 8010fdc:	4770      	bx	lr
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8010fde:	3301      	adds	r3, #1
 8010fe0:	b2db      	uxtb	r3, r3
 8010fe2:	2b02      	cmp	r3, #2
 8010fe4:	d81c      	bhi.n	8011020 <ip6_input_accept+0x94>
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8010fe6:	4619      	mov	r1, r3
 8010fe8:	18c2      	adds	r2, r0, r3
 8010fea:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 8010fee:	f012 0f10 	tst.w	r2, #16
 8010ff2:	d0f4      	beq.n	8010fde <ip6_input_accept+0x52>
{
 8010ff4:	b430      	push	{r4, r5}
          ip6_addr_cmp(ip6_current_dest_addr(), netif_ip6_addr(netif, i))
 8010ff6:	4a0b      	ldr	r2, [pc, #44]	; (8011024 <ip6_input_accept+0x98>)
 8010ff8:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8010ffa:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8010ffe:	00a2      	lsls	r2, r4, #2
 8011000:	4402      	add	r2, r0
 8011002:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8011004:	4295      	cmp	r5, r2
 8011006:	d0ca      	beq.n	8010f9e <ip6_input_accept+0x12>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8011008:	3301      	adds	r3, #1
 801100a:	b2db      	uxtb	r3, r3
 801100c:	2b02      	cmp	r3, #2
 801100e:	d8e3      	bhi.n	8010fd8 <ip6_input_accept+0x4c>
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8011010:	4619      	mov	r1, r3
 8011012:	18c2      	adds	r2, r0, r3
 8011014:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 8011018:	f012 0f10 	tst.w	r2, #16
 801101c:	d0f4      	beq.n	8011008 <ip6_input_accept+0x7c>
 801101e:	e7ea      	b.n	8010ff6 <ip6_input_accept+0x6a>
  return 0;
 8011020:	2000      	movs	r0, #0
}
 8011022:	4770      	bx	lr
 8011024:	20004b84 	.word	0x20004b84

08011028 <ip6_route>:
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default)) {
 8011028:	4b05      	ldr	r3, [pc, #20]	; (8011040 <ip6_route+0x18>)
 801102a:	6818      	ldr	r0, [r3, #0]
 801102c:	b128      	cbz	r0, 801103a <ip6_route+0x12>
 801102e:	f890 30c3 	ldrb.w	r3, [r0, #195]	; 0xc3
 8011032:	f003 0305 	and.w	r3, r3, #5
 8011036:	2b05      	cmp	r3, #5
 8011038:	d100      	bne.n	801103c <ip6_route+0x14>
}
 801103a:	4770      	bx	lr
    return NULL;
 801103c:	2000      	movs	r0, #0
 801103e:	e7fc      	b.n	801103a <ip6_route+0x12>
 8011040:	20008c38 	.word	0x20008c38

08011044 <ip6_select_source_address>:
{
 8011044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011048:	b083      	sub	sp, #12
 801104a:	4604      	mov	r4, r0
 801104c:	460e      	mov	r6, r1
  if (ip6_addr_isglobal(dest)) {
 801104e:	6808      	ldr	r0, [r1, #0]
 8011050:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 8011054:	2b20      	cmp	r3, #32
 8011056:	d025      	beq.n	80110a4 <ip6_select_source_address+0x60>
  } else if (ip6_addr_islinklocal(dest) || ip6_addr_isloopback(dest)) {
 8011058:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 801105c:	4003      	ands	r3, r0
 801105e:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8011062:	4293      	cmp	r3, r2
 8011064:	d027      	beq.n	80110b6 <ip6_select_source_address+0x72>
 8011066:	b938      	cbnz	r0, 8011078 <ip6_select_source_address+0x34>
 8011068:	684a      	ldr	r2, [r1, #4]
 801106a:	b92a      	cbnz	r2, 8011078 <ip6_select_source_address+0x34>
 801106c:	688a      	ldr	r2, [r1, #8]
 801106e:	b91a      	cbnz	r2, 8011078 <ip6_select_source_address+0x34>
 8011070:	68ca      	ldr	r2, [r1, #12]
 8011072:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8011076:	d021      	beq.n	80110bc <ip6_select_source_address+0x78>
  } else if (ip6_addr_isuniquelocal(dest)) {
 8011078:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 801107c:	2afc      	cmp	r2, #252	; 0xfc
 801107e:	d020      	beq.n	80110c2 <ip6_select_source_address+0x7e>
  } else if (ip6_addr_ismulticast(dest)) {
 8011080:	b2c2      	uxtb	r2, r0
 8011082:	2aff      	cmp	r2, #255	; 0xff
 8011084:	d006      	beq.n	8011094 <ip6_select_source_address+0x50>
  } else if (ip6_addr_issitelocal(dest)) {
 8011086:	f24c 02fe 	movw	r2, #49406	; 0xc0fe
 801108a:	4293      	cmp	r3, r2
 801108c:	d007      	beq.n	801109e <ip6_select_source_address+0x5a>
    dest_scope = IP6_MULTICAST_SCOPE_GLOBAL;
 801108e:	f04f 080e 	mov.w	r8, #14
 8011092:	e009      	b.n	80110a8 <ip6_select_source_address+0x64>
    dest_scope = ip6_addr_multicast_scope(dest);
 8011094:	f7f6 f8af 	bl	80071f6 <lwip_htonl>
 8011098:	f3c0 4803 	ubfx	r8, r0, #16, #4
 801109c:	e004      	b.n	80110a8 <ip6_select_source_address+0x64>
    dest_scope = IP6_MULTICAST_SCOPE_SITE_LOCAL;
 801109e:	f04f 0805 	mov.w	r8, #5
 80110a2:	e001      	b.n	80110a8 <ip6_select_source_address+0x64>
    dest_scope = IP6_MULTICAST_SCOPE_GLOBAL;
 80110a4:	f04f 080e 	mov.w	r8, #14
  u8_t best_bits = 0;
 80110a8:	f04f 0c00 	mov.w	ip, #0
  u8_t best_pref = 0;
 80110ac:	46e1      	mov	r9, ip
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80110ae:	4663      	mov	r3, ip
  s8_t best_scope = IP6_MULTICAST_SCOPE_RESERVED;
 80110b0:	46e6      	mov	lr, ip
  best_addr = NULL;
 80110b2:	4660      	mov	r0, ip
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80110b4:	e03d      	b.n	8011132 <ip6_select_source_address+0xee>
    dest_scope = IP6_MULTICAST_SCOPE_LINK_LOCAL;
 80110b6:	f04f 0802 	mov.w	r8, #2
 80110ba:	e7f5      	b.n	80110a8 <ip6_select_source_address+0x64>
 80110bc:	f04f 0802 	mov.w	r8, #2
 80110c0:	e7f2      	b.n	80110a8 <ip6_select_source_address+0x64>
    dest_scope = IP6_MULTICAST_SCOPE_ORGANIZATION_LOCAL;
 80110c2:	f04f 0808 	mov.w	r8, #8
 80110c6:	e7ef      	b.n	80110a8 <ip6_select_source_address+0x64>
      cand_scope = IP6_MULTICAST_SCOPE_SITE_LOCAL;
 80110c8:	2505      	movs	r5, #5
 80110ca:	e000      	b.n	80110ce <ip6_select_source_address+0x8a>
      cand_scope = IP6_MULTICAST_SCOPE_GLOBAL;
 80110cc:	250e      	movs	r5, #14
    cand_pref = ip6_addr_ispreferred(netif_ip6_addr_state(netif, i));
 80110ce:	2930      	cmp	r1, #48	; 0x30
 80110d0:	bf14      	ite	ne
 80110d2:	2100      	movne	r1, #0
 80110d4:	2101      	moveq	r1, #1
 80110d6:	9101      	str	r1, [sp, #4]
    cand_bits = ip6_addr_netcmp_zoneless(cand_addr, dest); /* just 1 or 0 for now */
 80110d8:	6837      	ldr	r7, [r6, #0]
 80110da:	45ba      	cmp	sl, r7
 80110dc:	d052      	beq.n	8011184 <ip6_select_source_address+0x140>
 80110de:	2700      	movs	r7, #0
    if (cand_bits && ip6_addr_nethostcmp(cand_addr, dest)) {
 80110e0:	f007 0aff 	and.w	sl, r7, #255	; 0xff
 80110e4:	b147      	cbz	r7, 80110f8 <ip6_select_source_address+0xb4>
 80110e6:	eb02 0b82 	add.w	fp, r2, r2, lsl #2
 80110ea:	ea4f 078b 	mov.w	r7, fp, lsl #2
 80110ee:	4427      	add	r7, r4
 80110f0:	6c7f      	ldr	r7, [r7, #68]	; 0x44
 80110f2:	68b1      	ldr	r1, [r6, #8]
 80110f4:	428f      	cmp	r7, r1
 80110f6:	d052      	beq.n	801119e <ip6_select_source_address+0x15a>
    if ((best_addr == NULL) || /* no alternative yet */
 80110f8:	b178      	cbz	r0, 801111a <ip6_select_source_address+0xd6>
 80110fa:	4575      	cmp	r5, lr
 80110fc:	da01      	bge.n	8011102 <ip6_select_source_address+0xbe>
        ((cand_scope < best_scope) && (cand_scope >= dest_scope)) ||
 80110fe:	45a8      	cmp	r8, r5
 8011100:	dd0b      	ble.n	801111a <ip6_select_source_address+0xd6>
 8011102:	4575      	cmp	r5, lr
 8011104:	dd01      	ble.n	801110a <ip6_select_source_address+0xc6>
        ((cand_scope > best_scope) && (best_scope < dest_scope)) || /* Rule 2 */
 8011106:	45f0      	cmp	r8, lr
 8011108:	dc07      	bgt.n	801111a <ip6_select_source_address+0xd6>
 801110a:	4575      	cmp	r5, lr
 801110c:	d10f      	bne.n	801112e <ip6_select_source_address+0xea>
        ((cand_scope == best_scope) && ((cand_pref > best_pref) || /* Rule 3 */
 801110e:	9901      	ldr	r1, [sp, #4]
 8011110:	4589      	cmp	r9, r1
 8011112:	d302      	bcc.n	801111a <ip6_select_source_address+0xd6>
 8011114:	d10b      	bne.n	801112e <ip6_select_source_address+0xea>
        ((cand_pref == best_pref) && (cand_bits > best_bits))))) { /* Rule 8 */
 8011116:	45d4      	cmp	ip, sl
 8011118:	d209      	bcs.n	801112e <ip6_select_source_address+0xea>
      best_addr = netif_ip_addr6(netif, i);
 801111a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801111e:	0090      	lsls	r0, r2, #2
 8011120:	3038      	adds	r0, #56	; 0x38
 8011122:	4420      	add	r0, r4
 8011124:	3004      	adds	r0, #4
      best_bits = cand_bits;
 8011126:	46d4      	mov	ip, sl
      best_pref = cand_pref;
 8011128:	f8dd 9004 	ldr.w	r9, [sp, #4]
      best_scope = cand_scope;
 801112c:	46ae      	mov	lr, r5
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 801112e:	3301      	adds	r3, #1
 8011130:	b2db      	uxtb	r3, r3
 8011132:	2b02      	cmp	r3, #2
 8011134:	d841      	bhi.n	80111ba <ip6_select_source_address+0x176>
    if (!ip6_addr_isvalid(netif_ip6_addr_state(netif, i))) {
 8011136:	461a      	mov	r2, r3
 8011138:	18e1      	adds	r1, r4, r3
 801113a:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
 801113e:	f011 0f10 	tst.w	r1, #16
 8011142:	d0f4      	beq.n	801112e <ip6_select_source_address+0xea>
    if (ip6_addr_isglobal(cand_addr)) {
 8011144:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8011148:	00bd      	lsls	r5, r7, #2
 801114a:	4425      	add	r5, r4
 801114c:	f8d5 a03c 	ldr.w	sl, [r5, #60]	; 0x3c
 8011150:	f00a 05e0 	and.w	r5, sl, #224	; 0xe0
 8011154:	2d20      	cmp	r5, #32
 8011156:	d0b9      	beq.n	80110cc <ip6_select_source_address+0x88>
    } else if (ip6_addr_islinklocal(cand_addr)) {
 8011158:	f24c 05ff 	movw	r5, #49407	; 0xc0ff
 801115c:	ea0a 0505 	and.w	r5, sl, r5
 8011160:	f248 07fe 	movw	r7, #33022	; 0x80fe
 8011164:	42bd      	cmp	r5, r7
 8011166:	d009      	beq.n	801117c <ip6_select_source_address+0x138>
    } else if (ip6_addr_isuniquelocal(cand_addr)) {
 8011168:	f00a 07fe 	and.w	r7, sl, #254	; 0xfe
 801116c:	2ffc      	cmp	r7, #252	; 0xfc
 801116e:	d007      	beq.n	8011180 <ip6_select_source_address+0x13c>
    } else if (ip6_addr_issitelocal(cand_addr)) {
 8011170:	f24c 07fe 	movw	r7, #49406	; 0xc0fe
 8011174:	42bd      	cmp	r5, r7
 8011176:	d0a7      	beq.n	80110c8 <ip6_select_source_address+0x84>
      cand_scope = IP6_MULTICAST_SCOPE_RESERVEDF;
 8011178:	250f      	movs	r5, #15
 801117a:	e7a8      	b.n	80110ce <ip6_select_source_address+0x8a>
      cand_scope = IP6_MULTICAST_SCOPE_LINK_LOCAL;
 801117c:	2502      	movs	r5, #2
 801117e:	e7a6      	b.n	80110ce <ip6_select_source_address+0x8a>
      cand_scope = IP6_MULTICAST_SCOPE_ORGANIZATION_LOCAL;
 8011180:	2508      	movs	r5, #8
 8011182:	e7a4      	b.n	80110ce <ip6_select_source_address+0x8a>
    cand_bits = ip6_addr_netcmp_zoneless(cand_addr, dest); /* just 1 or 0 for now */
 8011184:	eb02 0a82 	add.w	sl, r2, r2, lsl #2
 8011188:	ea4f 078a 	mov.w	r7, sl, lsl #2
 801118c:	4427      	add	r7, r4
 801118e:	6c3f      	ldr	r7, [r7, #64]	; 0x40
 8011190:	6871      	ldr	r1, [r6, #4]
 8011192:	428f      	cmp	r7, r1
 8011194:	d001      	beq.n	801119a <ip6_select_source_address+0x156>
 8011196:	2700      	movs	r7, #0
 8011198:	e7a2      	b.n	80110e0 <ip6_select_source_address+0x9c>
 801119a:	2701      	movs	r7, #1
 801119c:	e7a0      	b.n	80110e0 <ip6_select_source_address+0x9c>
    if (cand_bits && ip6_addr_nethostcmp(cand_addr, dest)) {
 801119e:	eb02 0b82 	add.w	fp, r2, r2, lsl #2
 80111a2:	ea4f 078b 	mov.w	r7, fp, lsl #2
 80111a6:	46bb      	mov	fp, r7
 80111a8:	4427      	add	r7, r4
 80111aa:	6cbf      	ldr	r7, [r7, #72]	; 0x48
 80111ac:	68f1      	ldr	r1, [r6, #12]
 80111ae:	428f      	cmp	r7, r1
 80111b0:	d1a2      	bne.n	80110f8 <ip6_select_source_address+0xb4>
      return netif_ip_addr6(netif, i); /* Rule 1 */
 80111b2:	f10b 0038 	add.w	r0, fp, #56	; 0x38
 80111b6:	4420      	add	r0, r4
 80111b8:	3004      	adds	r0, #4
}
 80111ba:	b003      	add	sp, #12
 80111bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080111c0 <ip6_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip6_input(struct pbuf *p, struct netif *inp)
{
 80111c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111c4:	4604      	mov	r4, r0
 80111c6:	460e      	mov	r6, r1
  LWIP_ASSERT_CORE_LOCKED();

  IP6_STATS_INC(ip6.recv);

  /* identify the IP header */
  ip6hdr = (struct ip6_hdr *)p->payload;
 80111c8:	6845      	ldr	r5, [r0, #4]
  if (IP6H_V(ip6hdr) != 6) {
 80111ca:	6828      	ldr	r0, [r5, #0]
 80111cc:	f7f6 f813 	bl	80071f6 <lwip_htonl>
 80111d0:	0f00      	lsrs	r0, r0, #28
 80111d2:	2806      	cmp	r0, #6
 80111d4:	d110      	bne.n	80111f8 <ip6_input+0x38>
    return ERR_OK;
  }
#endif

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((IP6_HLEN > p->len) || (IP6H_PLEN(ip6hdr) > (p->tot_len - IP6_HLEN))) {
 80111d6:	8963      	ldrh	r3, [r4, #10]
 80111d8:	2b27      	cmp	r3, #39	; 0x27
 80111da:	d906      	bls.n	80111ea <ip6_input+0x2a>
 80111dc:	88a8      	ldrh	r0, [r5, #4]
 80111de:	f7f6 f805 	bl	80071ec <lwip_htons>
 80111e2:	8923      	ldrh	r3, [r4, #8]
 80111e4:	3b28      	subs	r3, #40	; 0x28
 80111e6:	4298      	cmp	r0, r3
 80111e8:	dd0c      	ble.n	8011204 <ip6_input+0x44>
    if (IP6_HLEN > p->len) {
      LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IPv6 header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n",
            (u16_t)IP6_HLEN, p->len));
    }
    if ((IP6H_PLEN(ip6hdr) + IP6_HLEN) > p->tot_len) {
 80111ea:	88a8      	ldrh	r0, [r5, #4]
 80111ec:	f7f5 fffe 	bl	80071ec <lwip_htons>
      LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IPv6 (plen %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
            (u16_t)(IP6H_PLEN(ip6hdr) + IP6_HLEN), p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80111f0:	4620      	mov	r0, r4
 80111f2:	f7f7 fa99 	bl	8008728 <pbuf_free>
    IP6_STATS_INC(ip6.lenerr);
    IP6_STATS_INC(ip6.drop);
    return ERR_OK;
 80111f6:	e002      	b.n	80111fe <ip6_input+0x3e>
    pbuf_free(p);
 80111f8:	4620      	mov	r0, r4
 80111fa:	f7f7 fa95 	bl	8008728 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip6_addr_set_zero(ip6_current_src_addr());
  ip6_addr_set_zero(ip6_current_dest_addr());

  return ERR_OK;
}
 80111fe:	2000      	movs	r0, #0
 8011200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  pbuf_realloc(p, (u16_t)(IP6_HLEN + IP6H_PLEN(ip6hdr)));
 8011204:	88a8      	ldrh	r0, [r5, #4]
 8011206:	f7f5 fff1 	bl	80071ec <lwip_htons>
 801120a:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801120e:	b289      	uxth	r1, r1
 8011210:	4620      	mov	r0, r4
 8011212:	f7f7 fb99 	bl	8008948 <pbuf_realloc>
  ip_addr_copy_from_ip6_packed(ip_data.current_iphdr_dest, ip6hdr->dest);
 8011216:	69a9      	ldr	r1, [r5, #24]
 8011218:	4baa      	ldr	r3, [pc, #680]	; (80114c4 <ip6_input+0x304>)
 801121a:	6299      	str	r1, [r3, #40]	; 0x28
 801121c:	69ef      	ldr	r7, [r5, #28]
 801121e:	62df      	str	r7, [r3, #44]	; 0x2c
 8011220:	f8d5 e020 	ldr.w	lr, [r5, #32]
 8011224:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
 8011228:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
 801122c:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
 8011230:	2006      	movs	r0, #6
 8011232:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
  ip_addr_copy_from_ip6_packed(ip_data.current_iphdr_src, ip6hdr->src);
 8011236:	68aa      	ldr	r2, [r5, #8]
 8011238:	615a      	str	r2, [r3, #20]
 801123a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 801123e:	f8c3 c018 	str.w	ip, [r3, #24]
 8011242:	f8d5 8010 	ldr.w	r8, [r5, #16]
 8011246:	f8c3 801c 	str.w	r8, [r3, #28]
 801124a:	f8d5 a014 	ldr.w	sl, [r5, #20]
 801124e:	f8c3 a020 	str.w	sl, [r3, #32]
 8011252:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  if (ip6_addr_isipv4mappedipv6(ip_2_ip6(&ip_data.current_iphdr_dest)) ||
 8011256:	b919      	cbnz	r1, 8011260 <ip6_input+0xa0>
 8011258:	b917      	cbnz	r7, 8011260 <ip6_input+0xa0>
 801125a:	f51e 3f80 	cmn.w	lr, #65536	; 0x10000
 801125e:	d034      	beq.n	80112ca <ip6_input+0x10a>
 8011260:	b92a      	cbnz	r2, 801126e <ip6_input+0xae>
     ip6_addr_isipv4mappedipv6(ip_2_ip6(&ip_data.current_iphdr_src)) ||
 8011262:	f1bc 0f00 	cmp.w	ip, #0
 8011266:	d102      	bne.n	801126e <ip6_input+0xae>
 8011268:	f518 3f80 	cmn.w	r8, #65536	; 0x10000
 801126c:	d02d      	beq.n	80112ca <ip6_input+0x10a>
     ip6_addr_ismulticast(ip_2_ip6(&ip_data.current_iphdr_src))) {
 801126e:	b2d2      	uxtb	r2, r2
     ip6_addr_isipv4mappedipv6(ip_2_ip6(&ip_data.current_iphdr_src)) ||
 8011270:	2aff      	cmp	r2, #255	; 0xff
 8011272:	d02a      	beq.n	80112ca <ip6_input+0x10a>
  ip_data.current_ip6_header = ip6hdr;
 8011274:	4b93      	ldr	r3, [pc, #588]	; (80114c4 <ip6_input+0x304>)
 8011276:	60dd      	str	r5, [r3, #12]
  ip_data.current_netif = inp;
 8011278:	601e      	str	r6, [r3, #0]
  ip_data.current_input_netif = inp;
 801127a:	605e      	str	r6, [r3, #4]
  if (ip6_addr_ismulticast(ip6_current_dest_addr())) {
 801127c:	b2cb      	uxtb	r3, r1
 801127e:	2bff      	cmp	r3, #255	; 0xff
 8011280:	d027      	beq.n	80112d2 <ip6_input+0x112>
    if (ip6_input_accept(inp)) {
 8011282:	4630      	mov	r0, r6
 8011284:	f7ff fe82 	bl	8010f8c <ip6_input_accept>
 8011288:	2800      	cmp	r0, #0
 801128a:	d03d      	beq.n	8011308 <ip6_input+0x148>
      netif = inp;
 801128c:	4633      	mov	r3, r6
  if (ip6_addr_isany(ip6_current_src_addr()) &&
 801128e:	4a8d      	ldr	r2, [pc, #564]	; (80114c4 <ip6_input+0x304>)
 8011290:	6952      	ldr	r2, [r2, #20]
 8011292:	2a00      	cmp	r2, #0
 8011294:	d13f      	bne.n	8011316 <ip6_input+0x156>
 8011296:	4a8b      	ldr	r2, [pc, #556]	; (80114c4 <ip6_input+0x304>)
 8011298:	6992      	ldr	r2, [r2, #24]
 801129a:	2a00      	cmp	r2, #0
 801129c:	d13b      	bne.n	8011316 <ip6_input+0x156>
 801129e:	4a89      	ldr	r2, [pc, #548]	; (80114c4 <ip6_input+0x304>)
 80112a0:	69d2      	ldr	r2, [r2, #28]
 80112a2:	2a00      	cmp	r2, #0
 80112a4:	d137      	bne.n	8011316 <ip6_input+0x156>
 80112a6:	4a87      	ldr	r2, [pc, #540]	; (80114c4 <ip6_input+0x304>)
 80112a8:	6a12      	ldr	r2, [r2, #32]
 80112aa:	bba2      	cbnz	r2, 8011316 <ip6_input+0x156>
      (!ip6_addr_issolicitednode(ip6_current_dest_addr()))) {
 80112ac:	4a85      	ldr	r2, [pc, #532]	; (80114c4 <ip6_input+0x304>)
 80112ae:	6a91      	ldr	r1, [r2, #40]	; 0x28
  if (ip6_addr_isany(ip6_current_src_addr()) &&
 80112b0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80112b4:	4291      	cmp	r1, r2
 80112b6:	d104      	bne.n	80112c2 <ip6_input+0x102>
      (!ip6_addr_issolicitednode(ip6_current_dest_addr()))) {
 80112b8:	4a82      	ldr	r2, [pc, #520]	; (80114c4 <ip6_input+0x304>)
 80112ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80112bc:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80112c0:	d024      	beq.n	801130c <ip6_input+0x14c>
    pbuf_free(p);
 80112c2:	4620      	mov	r0, r4
 80112c4:	f7f7 fa30 	bl	8008728 <pbuf_free>
    goto ip6_input_cleanup;
 80112c8:	e052      	b.n	8011370 <ip6_input+0x1b0>
    pbuf_free(p);
 80112ca:	4620      	mov	r0, r4
 80112cc:	f7f7 fa2c 	bl	8008728 <pbuf_free>
    return ERR_OK;
 80112d0:	e795      	b.n	80111fe <ip6_input+0x3e>
    if (ip6_addr_isallnodes_iflocal(ip6_current_dest_addr()) ||
 80112d2:	f240 13ff 	movw	r3, #511	; 0x1ff
 80112d6:	4299      	cmp	r1, r3
 80112d8:	d00a      	beq.n	80112f0 <ip6_input+0x130>
 80112da:	f240 23ff 	movw	r3, #767	; 0x2ff
 80112de:	4299      	cmp	r1, r3
 80112e0:	d006      	beq.n	80112f0 <ip6_input+0x130>
    else if (mld6_lookfor_group(inp, ip6_current_dest_addr())) {
 80112e2:	4979      	ldr	r1, [pc, #484]	; (80114c8 <ip6_input+0x308>)
 80112e4:	4630      	mov	r0, r6
 80112e6:	f000 ff34 	bl	8012152 <mld6_lookfor_group>
 80112ea:	b158      	cbz	r0, 8011304 <ip6_input+0x144>
      netif = inp;
 80112ec:	4633      	mov	r3, r6
 80112ee:	e7ce      	b.n	801128e <ip6_input+0xce>
    if (ip6_addr_isallnodes_iflocal(ip6_current_dest_addr()) ||
 80112f0:	2f00      	cmp	r7, #0
 80112f2:	d1f6      	bne.n	80112e2 <ip6_input+0x122>
 80112f4:	f1be 0f00 	cmp.w	lr, #0
 80112f8:	d1f3      	bne.n	80112e2 <ip6_input+0x122>
 80112fa:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
 80112fe:	d1f0      	bne.n	80112e2 <ip6_input+0x122>
      netif = inp;
 8011300:	4633      	mov	r3, r6
 8011302:	e7c4      	b.n	801128e <ip6_input+0xce>
      netif = NULL;
 8011304:	2300      	movs	r3, #0
 8011306:	e7c2      	b.n	801128e <ip6_input+0xce>
      netif = NULL;
 8011308:	2300      	movs	r3, #0
 801130a:	e7c0      	b.n	801128e <ip6_input+0xce>
      (!ip6_addr_issolicitednode(ip6_current_dest_addr()))) {
 801130c:	4a6d      	ldr	r2, [pc, #436]	; (80114c4 <ip6_input+0x304>)
 801130e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8011312:	2aff      	cmp	r2, #255	; 0xff
 8011314:	d1d5      	bne.n	80112c2 <ip6_input+0x102>
  if (netif == NULL) {
 8011316:	b343      	cbz	r3, 801136a <ip6_input+0x1aa>
  ip_data.current_netif = netif;
 8011318:	4a6a      	ldr	r2, [pc, #424]	; (80114c4 <ip6_input+0x304>)
 801131a:	6013      	str	r3, [r2, #0]
  nexth = &IP6H_NEXTH(ip6hdr);
 801131c:	f105 0806 	add.w	r8, r5, #6
  pbuf_remove_header(p, IP6_HLEN);
 8011320:	2128      	movs	r1, #40	; 0x28
 8011322:	4620      	mov	r0, r4
 8011324:	f7f7 f9ba 	bl	800869c <pbuf_remove_header>
  hlen = hlen_tot = IP6_HLEN;
 8011328:	2728      	movs	r7, #40	; 0x28
  while (*nexth != IP6_NEXTH_NONE)
 801132a:	f898 3000 	ldrb.w	r3, [r8]
 801132e:	2b3b      	cmp	r3, #59	; 0x3b
 8011330:	f000 8146 	beq.w	80115c0 <ip6_input+0x400>
    switch (*nexth) {
 8011334:	2b2b      	cmp	r3, #43	; 0x2b
 8011336:	f000 80c9 	beq.w	80114cc <ip6_input+0x30c>
 801133a:	d928      	bls.n	801138e <ip6_input+0x1ce>
 801133c:	2b2c      	cmp	r3, #44	; 0x2c
 801133e:	f000 8101 	beq.w	8011544 <ip6_input+0x384>
 8011342:	2b3c      	cmp	r3, #60	; 0x3c
 8011344:	f040 813c 	bne.w	80115c0 <ip6_input+0x400>
      dest_hdr = (struct ip6_dest_hdr *)p->payload;
 8011348:	6861      	ldr	r1, [r4, #4]
      nexth = &IP6_DEST_NEXTH(dest_hdr);
 801134a:	4688      	mov	r8, r1
      hlen = 8 * (1 + dest_hdr->_hlen);
 801134c:	f891 c001 	ldrb.w	ip, [r1, #1]
 8011350:	f10c 0c01 	add.w	ip, ip, #1
 8011354:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
      if ((p->len < 8) || (hlen > p->len)) {
 8011358:	8963      	ldrh	r3, [r4, #10]
 801135a:	2b07      	cmp	r3, #7
 801135c:	d96b      	bls.n	8011436 <ip6_input+0x276>
 801135e:	4563      	cmp	r3, ip
 8011360:	d369      	bcc.n	8011436 <ip6_input+0x276>
      hlen_tot = (u16_t)(hlen_tot + hlen);
 8011362:	4467      	add	r7, ip
 8011364:	b2bf      	uxth	r7, r7
      opt_offset = IP6_DEST_HLEN;
 8011366:	2302      	movs	r3, #2
      while (opt_offset < hlen)
 8011368:	e09a      	b.n	80114a0 <ip6_input+0x2e0>
    pbuf_free(p);
 801136a:	4620      	mov	r0, r4
 801136c:	f7f7 f9dc 	bl	8008728 <pbuf_free>
  ip_data.current_netif = NULL;
 8011370:	4b54      	ldr	r3, [pc, #336]	; (80114c4 <ip6_input+0x304>)
 8011372:	2200      	movs	r2, #0
 8011374:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011376:	605a      	str	r2, [r3, #4]
  ip_data.current_ip6_header = NULL;
 8011378:	60da      	str	r2, [r3, #12]
  ip_data.current_ip_header_tot_len = 0;
 801137a:	821a      	strh	r2, [r3, #16]
  ip6_addr_set_zero(ip6_current_src_addr());
 801137c:	615a      	str	r2, [r3, #20]
 801137e:	619a      	str	r2, [r3, #24]
 8011380:	61da      	str	r2, [r3, #28]
 8011382:	621a      	str	r2, [r3, #32]
  ip6_addr_set_zero(ip6_current_dest_addr());
 8011384:	629a      	str	r2, [r3, #40]	; 0x28
 8011386:	62da      	str	r2, [r3, #44]	; 0x2c
 8011388:	631a      	str	r2, [r3, #48]	; 0x30
 801138a:	635a      	str	r2, [r3, #52]	; 0x34
  return ERR_OK;
 801138c:	e737      	b.n	80111fe <ip6_input+0x3e>
    switch (*nexth) {
 801138e:	2b00      	cmp	r3, #0
 8011390:	f040 8116 	bne.w	80115c0 <ip6_input+0x400>
      hbh_hdr = (struct ip6_hbh_hdr *)p->payload;
 8011394:	f8d4 c004 	ldr.w	ip, [r4, #4]
      nexth = &IP6_HBH_NEXTH(hbh_hdr);
 8011398:	46e0      	mov	r8, ip
      hlen = (u16_t)(8 * (1 + hbh_hdr->_hlen));
 801139a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801139e:	3101      	adds	r1, #1
 80113a0:	00c9      	lsls	r1, r1, #3
      if ((p->len < 8) || (hlen > p->len)) {
 80113a2:	8963      	ldrh	r3, [r4, #10]
 80113a4:	2b07      	cmp	r3, #7
 80113a6:	d905      	bls.n	80113b4 <ip6_input+0x1f4>
 80113a8:	428b      	cmp	r3, r1
 80113aa:	d303      	bcc.n	80113b4 <ip6_input+0x1f4>
      hlen_tot = (u16_t)(hlen_tot + hlen);
 80113ac:	440f      	add	r7, r1
 80113ae:	b2bf      	uxth	r7, r7
      opt_offset = IP6_HBH_HLEN;
 80113b0:	2302      	movs	r3, #2
      while (opt_offset < hlen)
 80113b2:	e006      	b.n	80113c2 <ip6_input+0x202>
        pbuf_free(p);
 80113b4:	4620      	mov	r0, r4
 80113b6:	f7f7 f9b7 	bl	8008728 <pbuf_free>
        goto ip6_input_cleanup;
 80113ba:	e7d9      	b.n	8011370 <ip6_input+0x1b0>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 80113bc:	7852      	ldrb	r2, [r2, #1]
        opt_offset = opt_offset + IP6_OPT_HLEN + opt_dlen;
 80113be:	3302      	adds	r3, #2
 80113c0:	4413      	add	r3, r2
      while (opt_offset < hlen)
 80113c2:	4299      	cmp	r1, r3
 80113c4:	dd33      	ble.n	801142e <ip6_input+0x26e>
        opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + opt_offset);
 80113c6:	eb0c 0203 	add.w	r2, ip, r3
        switch (IP6_OPT_TYPE(opt_hdr)) {
 80113ca:	f81c 0003 	ldrb.w	r0, [ip, r3]
 80113ce:	2801      	cmp	r0, #1
 80113d0:	d0f4      	beq.n	80113bc <ip6_input+0x1fc>
 80113d2:	b348      	cbz	r0, 8011428 <ip6_input+0x268>
 80113d4:	2805      	cmp	r0, #5
 80113d6:	d00a      	beq.n	80113ee <ip6_input+0x22e>
 80113d8:	28c2      	cmp	r0, #194	; 0xc2
 80113da:	d00a      	beq.n	80113f2 <ip6_input+0x232>
          switch (IP6_OPT_TYPE_ACTION(opt_hdr)) {
 80113dc:	0980      	lsrs	r0, r0, #6
 80113de:	2802      	cmp	r0, #2
 80113e0:	d00d      	beq.n	80113fe <ip6_input+0x23e>
 80113e2:	2803      	cmp	r0, #3
 80113e4:	d013      	beq.n	801140e <ip6_input+0x24e>
 80113e6:	2801      	cmp	r0, #1
 80113e8:	d005      	beq.n	80113f6 <ip6_input+0x236>
            opt_dlen = IP6_OPT_DLEN(opt_hdr);
 80113ea:	7852      	ldrb	r2, [r2, #1]
          break;
 80113ec:	e7e7      	b.n	80113be <ip6_input+0x1fe>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 80113ee:	7852      	ldrb	r2, [r2, #1]
          break;
 80113f0:	e7e5      	b.n	80113be <ip6_input+0x1fe>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 80113f2:	7852      	ldrb	r2, [r2, #1]
          break;
 80113f4:	e7e3      	b.n	80113be <ip6_input+0x1fe>
            pbuf_free(p);
 80113f6:	4620      	mov	r0, r4
 80113f8:	f7f7 f996 	bl	8008728 <pbuf_free>
            goto ip6_input_cleanup;
 80113fc:	e7b8      	b.n	8011370 <ip6_input+0x1b0>
            icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
 80113fe:	2102      	movs	r1, #2
 8011400:	4620      	mov	r0, r4
 8011402:	f7ff fdb9 	bl	8010f78 <icmp6_param_problem>
            pbuf_free(p);
 8011406:	4620      	mov	r0, r4
 8011408:	f7f7 f98e 	bl	8008728 <pbuf_free>
            goto ip6_input_cleanup;
 801140c:	e7b0      	b.n	8011370 <ip6_input+0x1b0>
            if (!ip6_addr_ismulticast(ip6_current_dest_addr())) {
 801140e:	4b2d      	ldr	r3, [pc, #180]	; (80114c4 <ip6_input+0x304>)
 8011410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011414:	2bff      	cmp	r3, #255	; 0xff
 8011416:	d003      	beq.n	8011420 <ip6_input+0x260>
              icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
 8011418:	2102      	movs	r1, #2
 801141a:	4620      	mov	r0, r4
 801141c:	f7ff fdac 	bl	8010f78 <icmp6_param_problem>
            pbuf_free(p);
 8011420:	4620      	mov	r0, r4
 8011422:	f7f7 f981 	bl	8008728 <pbuf_free>
            goto ip6_input_cleanup;
 8011426:	e7a3      	b.n	8011370 <ip6_input+0x1b0>
          opt_dlen = -1;
 8011428:	f04f 32ff 	mov.w	r2, #4294967295
 801142c:	e7c7      	b.n	80113be <ip6_input+0x1fe>
      pbuf_remove_header(p, hlen);
 801142e:	4620      	mov	r0, r4
 8011430:	f7f7 f934 	bl	800869c <pbuf_remove_header>
      break;
 8011434:	e062      	b.n	80114fc <ip6_input+0x33c>
        pbuf_free(p);
 8011436:	4620      	mov	r0, r4
 8011438:	f7f7 f976 	bl	8008728 <pbuf_free>
        goto ip6_input_cleanup;
 801143c:	e798      	b.n	8011370 <ip6_input+0x1b0>
        switch (IP6_OPT_TYPE(opt_hdr))
 801143e:	28c2      	cmp	r0, #194	; 0xc2
 8011440:	d005      	beq.n	801144e <ip6_input+0x28e>
 8011442:	28c9      	cmp	r0, #201	; 0xc9
 8011444:	d105      	bne.n	8011452 <ip6_input+0x292>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 8011446:	7852      	ldrb	r2, [r2, #1]
          break;
 8011448:	e028      	b.n	801149c <ip6_input+0x2dc>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 801144a:	7852      	ldrb	r2, [r2, #1]
          break;
 801144c:	e026      	b.n	801149c <ip6_input+0x2dc>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 801144e:	7852      	ldrb	r2, [r2, #1]
          break;
 8011450:	e024      	b.n	801149c <ip6_input+0x2dc>
          switch (IP6_OPT_TYPE_ACTION(opt_hdr))
 8011452:	0980      	lsrs	r0, r0, #6
 8011454:	2802      	cmp	r0, #2
 8011456:	d009      	beq.n	801146c <ip6_input+0x2ac>
 8011458:	2803      	cmp	r0, #3
 801145a:	d00f      	beq.n	801147c <ip6_input+0x2bc>
 801145c:	2801      	cmp	r0, #1
 801145e:	d001      	beq.n	8011464 <ip6_input+0x2a4>
            opt_dlen = IP6_OPT_DLEN(opt_hdr);
 8011460:	7852      	ldrb	r2, [r2, #1]
          break;
 8011462:	e01b      	b.n	801149c <ip6_input+0x2dc>
            pbuf_free(p);
 8011464:	4620      	mov	r0, r4
 8011466:	f7f7 f95f 	bl	8008728 <pbuf_free>
            goto ip6_input_cleanup;
 801146a:	e781      	b.n	8011370 <ip6_input+0x1b0>
            icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
 801146c:	2102      	movs	r1, #2
 801146e:	4620      	mov	r0, r4
 8011470:	f7ff fd82 	bl	8010f78 <icmp6_param_problem>
            pbuf_free(p);
 8011474:	4620      	mov	r0, r4
 8011476:	f7f7 f957 	bl	8008728 <pbuf_free>
            goto ip6_input_cleanup;
 801147a:	e779      	b.n	8011370 <ip6_input+0x1b0>
            if (!ip6_addr_ismulticast(ip6_current_dest_addr())) {
 801147c:	4b11      	ldr	r3, [pc, #68]	; (80114c4 <ip6_input+0x304>)
 801147e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011482:	2bff      	cmp	r3, #255	; 0xff
 8011484:	d103      	bne.n	801148e <ip6_input+0x2ce>
            pbuf_free(p);
 8011486:	4620      	mov	r0, r4
 8011488:	f7f7 f94e 	bl	8008728 <pbuf_free>
            goto ip6_input_cleanup;
 801148c:	e770      	b.n	8011370 <ip6_input+0x1b0>
              icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
 801148e:	2102      	movs	r1, #2
 8011490:	4620      	mov	r0, r4
 8011492:	f7ff fd71 	bl	8010f78 <icmp6_param_problem>
 8011496:	e7f6      	b.n	8011486 <ip6_input+0x2c6>
          opt_dlen = -1;
 8011498:	f04f 32ff 	mov.w	r2, #4294967295
        opt_offset = opt_offset + IP6_OPT_HLEN + opt_dlen;
 801149c:	3302      	adds	r3, #2
 801149e:	4413      	add	r3, r2
      while (opt_offset < hlen)
 80114a0:	459c      	cmp	ip, r3
 80114a2:	dd0a      	ble.n	80114ba <ip6_input+0x2fa>
        opt_hdr = (struct ip6_opt_hdr *)((u8_t *)dest_hdr + opt_offset);
 80114a4:	18ca      	adds	r2, r1, r3
        switch (IP6_OPT_TYPE(opt_hdr))
 80114a6:	5cc8      	ldrb	r0, [r1, r3]
 80114a8:	2805      	cmp	r0, #5
 80114aa:	d0ce      	beq.n	801144a <ip6_input+0x28a>
 80114ac:	d8c7      	bhi.n	801143e <ip6_input+0x27e>
 80114ae:	2800      	cmp	r0, #0
 80114b0:	d0f2      	beq.n	8011498 <ip6_input+0x2d8>
 80114b2:	2801      	cmp	r0, #1
 80114b4:	d1cd      	bne.n	8011452 <ip6_input+0x292>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 80114b6:	7852      	ldrb	r2, [r2, #1]
          break;
 80114b8:	e7f0      	b.n	801149c <ip6_input+0x2dc>
      pbuf_remove_header(p, hlen);
 80114ba:	4661      	mov	r1, ip
 80114bc:	4620      	mov	r0, r4
 80114be:	f7f7 f8ed 	bl	800869c <pbuf_remove_header>
      break;
 80114c2:	e01b      	b.n	80114fc <ip6_input+0x33c>
 80114c4:	20004b84 	.word	0x20004b84
 80114c8:	20004bac 	.word	0x20004bac
      rout_hdr = (struct ip6_rout_hdr *)p->payload;
 80114cc:	6862      	ldr	r2, [r4, #4]
      nexth = &IP6_ROUT_NEXTH(rout_hdr);
 80114ce:	4690      	mov	r8, r2
      hlen = 8 * (1 + rout_hdr->_hlen);
 80114d0:	7850      	ldrb	r0, [r2, #1]
 80114d2:	1c41      	adds	r1, r0, #1
 80114d4:	00c9      	lsls	r1, r1, #3
      if ((p->len < 8) || (hlen > p->len)) {
 80114d6:	8963      	ldrh	r3, [r4, #10]
 80114d8:	2b07      	cmp	r3, #7
 80114da:	d91d      	bls.n	8011518 <ip6_input+0x358>
 80114dc:	428b      	cmp	r3, r1
 80114de:	d31b      	bcc.n	8011518 <ip6_input+0x358>
      hlen_tot = (u16_t)(hlen_tot + hlen);
 80114e0:	440f      	add	r7, r1
 80114e2:	b2bf      	uxth	r7, r7
      if (IP6_ROUT_SEG_LEFT(rout_hdr)) {
 80114e4:	78d3      	ldrb	r3, [r2, #3]
 80114e6:	b133      	cbz	r3, 80114f6 <ip6_input+0x336>
        if (rout_hdr->_hlen & 0x1) {
 80114e8:	f010 0f01 	tst.w	r0, #1
 80114ec:	d118      	bne.n	8011520 <ip6_input+0x360>
        switch (IP6_ROUT_TYPE(rout_hdr))
 80114ee:	7893      	ldrb	r3, [r2, #2]
 80114f0:	3b02      	subs	r3, #2
 80114f2:	2b01      	cmp	r3, #1
 80114f4:	d81d      	bhi.n	8011532 <ip6_input+0x372>
      pbuf_remove_header(p, hlen);
 80114f6:	4620      	mov	r0, r4
 80114f8:	f7f7 f8d0 	bl	800869c <pbuf_remove_header>
    if (*nexth == IP6_NEXTH_HOPBYHOP) {
 80114fc:	f898 3000 	ldrb.w	r3, [r8]
 8011500:	2b00      	cmp	r3, #0
 8011502:	f47f af12 	bne.w	801132a <ip6_input+0x16a>
      icmp6_param_problem(p, ICMP6_PP_HEADER, nexth);
 8011506:	4642      	mov	r2, r8
 8011508:	2101      	movs	r1, #1
 801150a:	4620      	mov	r0, r4
 801150c:	f7ff fd34 	bl	8010f78 <icmp6_param_problem>
      pbuf_free(p);
 8011510:	4620      	mov	r0, r4
 8011512:	f7f7 f909 	bl	8008728 <pbuf_free>
      goto ip6_input_cleanup;
 8011516:	e72b      	b.n	8011370 <ip6_input+0x1b0>
        pbuf_free(p);
 8011518:	4620      	mov	r0, r4
 801151a:	f7f7 f905 	bl	8008728 <pbuf_free>
        goto ip6_input_cleanup;
 801151e:	e727      	b.n	8011370 <ip6_input+0x1b0>
          icmp6_param_problem(p, ICMP6_PP_FIELD, &rout_hdr->_hlen);
 8011520:	3201      	adds	r2, #1
 8011522:	2100      	movs	r1, #0
 8011524:	4620      	mov	r0, r4
 8011526:	f7ff fd27 	bl	8010f78 <icmp6_param_problem>
          pbuf_free(p);
 801152a:	4620      	mov	r0, r4
 801152c:	f7f7 f8fc 	bl	8008728 <pbuf_free>
          goto ip6_input_cleanup;
 8011530:	e71e      	b.n	8011370 <ip6_input+0x1b0>
          icmp6_param_problem(p, ICMP6_PP_FIELD, &IP6_ROUT_TYPE(rout_hdr));
 8011532:	3202      	adds	r2, #2
 8011534:	2100      	movs	r1, #0
 8011536:	4620      	mov	r0, r4
 8011538:	f7ff fd1e 	bl	8010f78 <icmp6_param_problem>
          pbuf_free(p);
 801153c:	4620      	mov	r0, r4
 801153e:	f7f7 f8f3 	bl	8008728 <pbuf_free>
          goto ip6_input_cleanup;
 8011542:	e715      	b.n	8011370 <ip6_input+0x1b0>
      frag_hdr = (struct ip6_frag_hdr *)p->payload;
 8011544:	f8d4 9004 	ldr.w	r9, [r4, #4]
      nexth = &IP6_FRAG_NEXTH(frag_hdr);
 8011548:	46c8      	mov	r8, r9
      if (hlen > p->len) {
 801154a:	8963      	ldrh	r3, [r4, #10]
 801154c:	2b07      	cmp	r3, #7
 801154e:	d913      	bls.n	8011578 <ip6_input+0x3b8>
      hlen_tot = (u16_t)(hlen_tot + hlen);
 8011550:	3708      	adds	r7, #8
 8011552:	b2bf      	uxth	r7, r7
      if (IP6_FRAG_MBIT(frag_hdr) && (IP6H_PLEN(ip6hdr) & 0x7)) {
 8011554:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 8011558:	f7f5 fe48 	bl	80071ec <lwip_htons>
 801155c:	f010 0f01 	tst.w	r0, #1
 8011560:	d10e      	bne.n	8011580 <ip6_input+0x3c0>
      if ((frag_hdr->_fragment_offset &
 8011562:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8011566:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801156a:	b29b      	uxth	r3, r3
 801156c:	b9bb      	cbnz	r3, 801159e <ip6_input+0x3de>
        pbuf_remove_header(p, hlen);
 801156e:	2108      	movs	r1, #8
 8011570:	4620      	mov	r0, r4
 8011572:	f7f7 f893 	bl	800869c <pbuf_remove_header>
 8011576:	e7c1      	b.n	80114fc <ip6_input+0x33c>
        pbuf_free(p);
 8011578:	4620      	mov	r0, r4
 801157a:	f7f7 f8d5 	bl	8008728 <pbuf_free>
        goto ip6_input_cleanup;
 801157e:	e6f7      	b.n	8011370 <ip6_input+0x1b0>
      if (IP6_FRAG_MBIT(frag_hdr) && (IP6H_PLEN(ip6hdr) & 0x7)) {
 8011580:	88a8      	ldrh	r0, [r5, #4]
 8011582:	f7f5 fe33 	bl	80071ec <lwip_htons>
 8011586:	f010 0f07 	tst.w	r0, #7
 801158a:	d0ea      	beq.n	8011562 <ip6_input+0x3a2>
        icmp6_param_problem(p, ICMP6_PP_FIELD, LWIP_PACKED_CAST(const void *, &ip6hdr->_plen));
 801158c:	1d2a      	adds	r2, r5, #4
 801158e:	2100      	movs	r1, #0
 8011590:	4620      	mov	r0, r4
 8011592:	f7ff fcf1 	bl	8010f78 <icmp6_param_problem>
        pbuf_free(p);
 8011596:	4620      	mov	r0, r4
 8011598:	f7f7 f8c6 	bl	8008728 <pbuf_free>
        goto ip6_input_cleanup;
 801159c:	e6e8      	b.n	8011370 <ip6_input+0x1b0>
        ip_data.current_ip_header_tot_len = hlen_tot;
 801159e:	4b23      	ldr	r3, [pc, #140]	; (801162c <ip6_input+0x46c>)
 80115a0:	821f      	strh	r7, [r3, #16]
        p = ip6_reass(p);
 80115a2:	4620      	mov	r0, r4
 80115a4:	f000 fa1a 	bl	80119dc <ip6_reass>
        if (p == NULL) {
 80115a8:	4604      	mov	r4, r0
 80115aa:	2800      	cmp	r0, #0
 80115ac:	f43f aee0 	beq.w	8011370 <ip6_input+0x1b0>
        ip6hdr = (struct ip6_hdr *)p->payload;
 80115b0:	6845      	ldr	r5, [r0, #4]
        nexth = &IP6H_NEXTH(ip6hdr);
 80115b2:	f105 0806 	add.w	r8, r5, #6
        pbuf_remove_header(p, IP6_HLEN);
 80115b6:	2128      	movs	r1, #40	; 0x28
 80115b8:	f7f7 f870 	bl	800869c <pbuf_remove_header>
        hlen = hlen_tot = IP6_HLEN;
 80115bc:	2728      	movs	r7, #40	; 0x28
 80115be:	e79d      	b.n	80114fc <ip6_input+0x33c>
  ip_data.current_ip_header_tot_len = hlen_tot;
 80115c0:	4b1a      	ldr	r3, [pc, #104]	; (801162c <ip6_input+0x46c>)
 80115c2:	821f      	strh	r7, [r3, #16]
    switch (*nexth) {
 80115c4:	f898 3000 	ldrb.w	r3, [r8]
 80115c8:	2b11      	cmp	r3, #17
 80115ca:	d00f      	beq.n	80115ec <ip6_input+0x42c>
 80115cc:	d907      	bls.n	80115de <ip6_input+0x41e>
 80115ce:	2b3a      	cmp	r3, #58	; 0x3a
 80115d0:	d011      	beq.n	80115f6 <ip6_input+0x436>
 80115d2:	2b3b      	cmp	r3, #59	; 0x3b
 80115d4:	d114      	bne.n	8011600 <ip6_input+0x440>
      pbuf_free(p);
 80115d6:	4620      	mov	r0, r4
 80115d8:	f7f7 f8a6 	bl	8008728 <pbuf_free>
      break;
 80115dc:	e6c8      	b.n	8011370 <ip6_input+0x1b0>
    switch (*nexth) {
 80115de:	2b06      	cmp	r3, #6
 80115e0:	d10e      	bne.n	8011600 <ip6_input+0x440>
      tcp_input(p, inp);
 80115e2:	4631      	mov	r1, r6
 80115e4:	4620      	mov	r0, r4
 80115e6:	f7f9 ff9f 	bl	800b528 <tcp_input>
      break;
 80115ea:	e6c1      	b.n	8011370 <ip6_input+0x1b0>
      udp_input(p, inp);
 80115ec:	4631      	mov	r1, r6
 80115ee:	4620      	mov	r0, r4
 80115f0:	f7fb fd38 	bl	800d064 <udp_input>
      break;
 80115f4:	e6bc      	b.n	8011370 <ip6_input+0x1b0>
      icmp6_input(p, inp);
 80115f6:	4631      	mov	r1, r6
 80115f8:	4620      	mov	r0, r4
 80115fa:	f7ff fc4f 	bl	8010e9c <icmp6_input>
      break;
 80115fe:	e6b7      	b.n	8011370 <ip6_input+0x1b0>
        pbuf_add_header_force(p, hlen_tot);
 8011600:	4639      	mov	r1, r7
 8011602:	4620      	mov	r0, r4
 8011604:	f7f7 f844 	bl	8008690 <pbuf_add_header_force>
        if ((!ip6_addr_ismulticast(ip6_current_dest_addr())) &&
 8011608:	4b08      	ldr	r3, [pc, #32]	; (801162c <ip6_input+0x46c>)
 801160a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801160e:	2bff      	cmp	r3, #255	; 0xff
 8011610:	d007      	beq.n	8011622 <ip6_input+0x462>
            (IP6H_NEXTH(ip6hdr) != IP6_NEXTH_ICMP6)) {
 8011612:	79ab      	ldrb	r3, [r5, #6]
        if ((!ip6_addr_ismulticast(ip6_current_dest_addr())) &&
 8011614:	2b3a      	cmp	r3, #58	; 0x3a
 8011616:	d004      	beq.n	8011622 <ip6_input+0x462>
          icmp6_param_problem(p, ICMP6_PP_HEADER, nexth);
 8011618:	4642      	mov	r2, r8
 801161a:	2101      	movs	r1, #1
 801161c:	4620      	mov	r0, r4
 801161e:	f7ff fcab 	bl	8010f78 <icmp6_param_problem>
      pbuf_free(p);
 8011622:	4620      	mov	r0, r4
 8011624:	f7f7 f880 	bl	8008728 <pbuf_free>
      break;
 8011628:	e6a2      	b.n	8011370 <ip6_input+0x1b0>
 801162a:	bf00      	nop
 801162c:	20004b84 	.word	0x20004b84

08011630 <ip6_output_if_src>:
 */
err_t
ip6_output_if_src(struct pbuf *p, const ip6_addr_t *src, const ip6_addr_t *dest,
             u8_t hl, u8_t tc,
             u8_t nexth, struct netif *netif)
{
 8011630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011634:	b085      	sub	sp, #20
 8011636:	4605      	mov	r5, r0
 8011638:	4688      	mov	r8, r1
 801163a:	4616      	mov	r6, r2
 801163c:	4699      	mov	r9, r3
 801163e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  struct ip6_hdr *ip6hdr;
  ip6_addr_t dest_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011640:	7b83      	ldrb	r3, [r0, #14]
 8011642:	2b01      	cmp	r3, #1
 8011644:	d141      	bne.n	80116ca <ip6_output_if_src+0x9a>

  /* Should the IPv6 header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011646:	2e00      	cmp	r6, #0
 8011648:	d052      	beq.n	80116f0 <ip6_output_if_src+0xc0>
      dest = &dest_addr;
    }
#endif /* LWIP_IPV6_SCOPES */

    /* generate IPv6 header */
    if (pbuf_add_header(p, IP6_HLEN)) {
 801164a:	2128      	movs	r1, #40	; 0x28
 801164c:	4628      	mov	r0, r5
 801164e:	f7f7 f81a 	bl	8008686 <pbuf_add_header>
 8011652:	2800      	cmp	r0, #0
 8011654:	d164      	bne.n	8011720 <ip6_output_if_src+0xf0>
      LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip6_output: not enough room for IPv6 header in pbuf\n"));
      IP6_STATS_INC(ip6.err);
      return ERR_BUF;
    }

    ip6hdr = (struct ip6_hdr *)p->payload;
 8011656:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip6_hdr",
 8011658:	896b      	ldrh	r3, [r5, #10]
 801165a:	2b27      	cmp	r3, #39	; 0x27
 801165c:	d93d      	bls.n	80116da <ip6_output_if_src+0xaa>
               (p->len >= sizeof(struct ip6_hdr)));

    IP6H_HOPLIM_SET(ip6hdr, hl);
 801165e:	f884 9007 	strb.w	r9, [r4, #7]
    IP6H_NEXTH_SET(ip6hdr, nexth);
 8011662:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8011666:	71a3      	strb	r3, [r4, #6]

    /* dest cannot be NULL here */
    ip6_addr_copy_to_packed(ip6hdr->dest, *dest);
 8011668:	6833      	ldr	r3, [r6, #0]
 801166a:	61a3      	str	r3, [r4, #24]
 801166c:	6873      	ldr	r3, [r6, #4]
 801166e:	61e3      	str	r3, [r4, #28]
 8011670:	68b3      	ldr	r3, [r6, #8]
 8011672:	6223      	str	r3, [r4, #32]
 8011674:	68f3      	ldr	r3, [r6, #12]
 8011676:	6263      	str	r3, [r4, #36]	; 0x24

    IP6H_VTCFL_SET(ip6hdr, 6, tc, 0);
 8011678:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801167c:	0500      	lsls	r0, r0, #20
 801167e:	f040 40c0 	orr.w	r0, r0, #1610612736	; 0x60000000
 8011682:	f7f5 fdb8 	bl	80071f6 <lwip_htonl>
 8011686:	6020      	str	r0, [r4, #0]
    IP6H_PLEN_SET(ip6hdr, (u16_t)(p->tot_len - IP6_HLEN));
 8011688:	8928      	ldrh	r0, [r5, #8]
 801168a:	3828      	subs	r0, #40	; 0x28
 801168c:	b280      	uxth	r0, r0
 801168e:	f7f5 fdad 	bl	80071ec <lwip_htons>
 8011692:	80a0      	strh	r0, [r4, #4]

    if (src == NULL) {
 8011694:	f1b8 0f00 	cmp.w	r8, #0
 8011698:	d027      	beq.n	80116ea <ip6_output_if_src+0xba>
      src = IP6_ADDR_ANY6;
    }
    /* src cannot be NULL here */
    ip6_addr_copy_to_packed(ip6hdr->src, *src);
 801169a:	f8d8 3000 	ldr.w	r3, [r8]
 801169e:	60a3      	str	r3, [r4, #8]
 80116a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80116a4:	60e3      	str	r3, [r4, #12]
 80116a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80116aa:	6123      	str	r3, [r4, #16]
 80116ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80116b0:	6163      	str	r3, [r4, #20]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if LWIP_IPV6_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif_mtu6(netif) && (p->tot_len > nd6_get_destination_mtu(dest, netif))) {
 80116b2:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80116b6:	bb33      	cbnz	r3, 8011706 <ip6_output_if_src+0xd6>
    return ip6_frag(p, netif, dest);
  }
#endif /* LWIP_IPV6_FRAG */

  LWIP_DEBUGF(IP6_DEBUG, ("netif->output_ip6()\n"));
  return netif->output_ip6(netif, p, dest);
 80116b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80116bc:	4632      	mov	r2, r6
 80116be:	4629      	mov	r1, r5
 80116c0:	4638      	mov	r0, r7
 80116c2:	4798      	blx	r3
}
 80116c4:	b005      	add	sp, #20
 80116c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80116ca:	4b17      	ldr	r3, [pc, #92]	; (8011728 <ip6_output_if_src+0xf8>)
 80116cc:	f240 429d 	movw	r2, #1181	; 0x49d
 80116d0:	4916      	ldr	r1, [pc, #88]	; (801172c <ip6_output_if_src+0xfc>)
 80116d2:	4817      	ldr	r0, [pc, #92]	; (8011730 <ip6_output_if_src+0x100>)
 80116d4:	f002 ff8e 	bl	80145f4 <iprintf>
 80116d8:	e7b5      	b.n	8011646 <ip6_output_if_src+0x16>
    LWIP_ASSERT("check that first pbuf can hold struct ip6_hdr",
 80116da:	4b13      	ldr	r3, [pc, #76]	; (8011728 <ip6_output_if_src+0xf8>)
 80116dc:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 80116e0:	4914      	ldr	r1, [pc, #80]	; (8011734 <ip6_output_if_src+0x104>)
 80116e2:	4813      	ldr	r0, [pc, #76]	; (8011730 <ip6_output_if_src+0x100>)
 80116e4:	f002 ff86 	bl	80145f4 <iprintf>
 80116e8:	e7b9      	b.n	801165e <ip6_output_if_src+0x2e>
      src = IP6_ADDR_ANY6;
 80116ea:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8011738 <ip6_output_if_src+0x108>
 80116ee:	e7d4      	b.n	801169a <ip6_output_if_src+0x6a>
    ip6hdr = (struct ip6_hdr *)p->payload;
 80116f0:	686b      	ldr	r3, [r5, #4]
    ip6_addr_copy_from_packed(dest_addr, ip6hdr->dest);
 80116f2:	699a      	ldr	r2, [r3, #24]
 80116f4:	9200      	str	r2, [sp, #0]
 80116f6:	69da      	ldr	r2, [r3, #28]
 80116f8:	9201      	str	r2, [sp, #4]
 80116fa:	6a1a      	ldr	r2, [r3, #32]
 80116fc:	9202      	str	r2, [sp, #8]
 80116fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011700:	9303      	str	r3, [sp, #12]
    dest = &dest_addr;
 8011702:	466e      	mov	r6, sp
 8011704:	e7d5      	b.n	80116b2 <ip6_output_if_src+0x82>
  if (netif_mtu6(netif) && (p->tot_len > nd6_get_destination_mtu(dest, netif))) {
 8011706:	892c      	ldrh	r4, [r5, #8]
 8011708:	4639      	mov	r1, r7
 801170a:	4630      	mov	r0, r6
 801170c:	f002 fd14 	bl	8014138 <nd6_get_destination_mtu>
 8011710:	4284      	cmp	r4, r0
 8011712:	d9d1      	bls.n	80116b8 <ip6_output_if_src+0x88>
    return ip6_frag(p, netif, dest);
 8011714:	4632      	mov	r2, r6
 8011716:	4639      	mov	r1, r7
 8011718:	4628      	mov	r0, r5
 801171a:	f000 fb5b 	bl	8011dd4 <ip6_frag>
 801171e:	e7d1      	b.n	80116c4 <ip6_output_if_src+0x94>
      return ERR_BUF;
 8011720:	f06f 0001 	mvn.w	r0, #1
 8011724:	e7ce      	b.n	80116c4 <ip6_output_if_src+0x94>
 8011726:	bf00      	nop
 8011728:	08018518 	.word	0x08018518
 801172c:	08018214 	.word	0x08018214
 8011730:	08015608 	.word	0x08015608
 8011734:	0801854c 	.word	0x0801854c
 8011738:	0801857c 	.word	0x0801857c

0801173c <ip6_output_if>:
{
 801173c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801173e:	b085      	sub	sp, #20
 8011740:	4606      	mov	r6, r0
 8011742:	461f      	mov	r7, r3
 8011744:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (dest != LWIP_IP_HDRINCL) {
 8011746:	4614      	mov	r4, r2
 8011748:	b142      	cbz	r2, 801175c <ip6_output_if+0x20>
    if (src != NULL && ip6_addr_isany(src)) {
 801174a:	b139      	cbz	r1, 801175c <ip6_output_if+0x20>
 801174c:	680b      	ldr	r3, [r1, #0]
 801174e:	b92b      	cbnz	r3, 801175c <ip6_output_if+0x20>
 8011750:	684b      	ldr	r3, [r1, #4]
 8011752:	b91b      	cbnz	r3, 801175c <ip6_output_if+0x20>
 8011754:	688b      	ldr	r3, [r1, #8]
 8011756:	b90b      	cbnz	r3, 801175c <ip6_output_if+0x20>
 8011758:	68cb      	ldr	r3, [r1, #12]
 801175a:	b16b      	cbz	r3, 8011778 <ip6_output_if+0x3c>
  return ip6_output_if_src(p, src_used, dest, hl, tc, nexth, netif);
 801175c:	9502      	str	r5, [sp, #8]
 801175e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8011762:	9301      	str	r3, [sp, #4]
 8011764:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8011768:	9300      	str	r3, [sp, #0]
 801176a:	463b      	mov	r3, r7
 801176c:	4622      	mov	r2, r4
 801176e:	4630      	mov	r0, r6
 8011770:	f7ff ff5e 	bl	8011630 <ip6_output_if_src>
}
 8011774:	b005      	add	sp, #20
 8011776:	bdf0      	pop	{r4, r5, r6, r7, pc}
      src_used = ip_2_ip6(ip6_select_source_address(netif, dest));
 8011778:	4611      	mov	r1, r2
 801177a:	4628      	mov	r0, r5
 801177c:	f7ff fc62 	bl	8011044 <ip6_select_source_address>
 8011780:	4601      	mov	r1, r0
      if ((src_used == NULL) || ip6_addr_isany(src_used)) {
 8011782:	b170      	cbz	r0, 80117a2 <ip6_output_if+0x66>
 8011784:	6803      	ldr	r3, [r0, #0]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d1e8      	bne.n	801175c <ip6_output_if+0x20>
 801178a:	6843      	ldr	r3, [r0, #4]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d1e5      	bne.n	801175c <ip6_output_if+0x20>
 8011790:	6883      	ldr	r3, [r0, #8]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d1e2      	bne.n	801175c <ip6_output_if+0x20>
 8011796:	68c3      	ldr	r3, [r0, #12]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d1df      	bne.n	801175c <ip6_output_if+0x20>
        return ERR_RTE;
 801179c:	f06f 0003 	mvn.w	r0, #3
 80117a0:	e7e8      	b.n	8011774 <ip6_output_if+0x38>
 80117a2:	f06f 0003 	mvn.w	r0, #3
 80117a6:	e7e5      	b.n	8011774 <ip6_output_if+0x38>

080117a8 <ip6_options_add_hbh_ra>:
 * @param value the value of the router alert option data (e.g. IP6_ROUTER_ALERT_VALUE_MLD)
 * @return ERR_OK if hop-by-hop header was added, ERR_* otherwise
 */
err_t
ip6_options_add_hbh_ra(struct pbuf *p, u8_t nexth, u8_t value)
{
 80117a8:	b570      	push	{r4, r5, r6, lr}
 80117aa:	4606      	mov	r6, r0
 80117ac:	460d      	mov	r5, r1
 80117ae:	4614      	mov	r4, r2
  struct ip6_opt_hdr *opt_hdr;

  /* fixed 4 bytes for router alert option and 2 bytes padding */
  const u8_t hlen = (sizeof(struct ip6_opt_hdr) * 2) + IP6_ROUTER_ALERT_DLEN;
  /* Move pointer to make room for hop-by-hop options header. */
  if (pbuf_add_header(p, sizeof(struct ip6_hbh_hdr) + hlen)) {
 80117b0:	2108      	movs	r1, #8
 80117b2:	f7f6 ff68 	bl	8008686 <pbuf_add_header>
 80117b6:	b960      	cbnz	r0, 80117d2 <ip6_options_add_hbh_ra+0x2a>
    IP6_STATS_INC(ip6.err);
    return ERR_BUF;
  }

  /* Set fields of Hop-by-Hop header */
  hbh_hdr = (struct ip6_hbh_hdr *)p->payload;
 80117b8:	6873      	ldr	r3, [r6, #4]
  IP6_HBH_NEXTH(hbh_hdr) = nexth;
 80117ba:	701d      	strb	r5, [r3, #0]
  hbh_hdr->_hlen = 0;
 80117bc:	7058      	strb	r0, [r3, #1]
  offset = IP6_HBH_HLEN;

  /* Set router alert options to Hop-by-Hop extended option header */
  opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + offset);
  IP6_OPT_TYPE(opt_hdr) = IP6_ROUTER_ALERT_OPTION;
 80117be:	2205      	movs	r2, #5
 80117c0:	709a      	strb	r2, [r3, #2]
  IP6_OPT_DLEN(opt_hdr) = IP6_ROUTER_ALERT_DLEN;
 80117c2:	2202      	movs	r2, #2
 80117c4:	70da      	strb	r2, [r3, #3]
  offset += IP6_OPT_HLEN;

  /* Set router alert option data */
  opt_data = (u8_t *)hbh_hdr + offset;
  opt_data[0] = value;
 80117c6:	711c      	strb	r4, [r3, #4]
  opt_data[1] = 0;
 80117c8:	7158      	strb	r0, [r3, #5]
  offset += IP6_OPT_DLEN(opt_hdr);

  /* add 2 bytes padding to make 8 bytes Hop-by-Hop header length */
  opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + offset);
  IP6_OPT_TYPE(opt_hdr) = IP6_PADN_OPTION;
 80117ca:	2101      	movs	r1, #1
 80117cc:	7199      	strb	r1, [r3, #6]
  IP6_OPT_DLEN(opt_hdr) = 0;
 80117ce:	71d8      	strb	r0, [r3, #7]

  return ERR_OK;
}
 80117d0:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_BUF;
 80117d2:	f06f 0001 	mvn.w	r0, #1
 80117d6:	e7fb      	b.n	80117d0 <ip6_options_add_hbh_ra+0x28>

080117d8 <ip6_reass_free_complete_datagram>:
 *
 * @param ipr datagram to free
 */
static void
ip6_reass_free_complete_datagram(struct ip6_reassdata *ipr)
{
 80117d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117dc:	b088      	sub	sp, #32
 80117de:	4607      	mov	r7, r0
  u16_t clen;
  struct pbuf *p;
  struct ip6_reass_helper *iprh;

#if LWIP_ICMP6
  iprh = (struct ip6_reass_helper *)ipr->p->payload;
 80117e0:	6844      	ldr	r4, [r0, #4]
 80117e2:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 80117e4:	889a      	ldrh	r2, [r3, #4]
 80117e6:	b112      	cbz	r2, 80117ee <ip6_reass_free_complete_datagram+0x16>
  u16_t pbufs_freed = 0;
 80117e8:	2600      	movs	r6, #0
  }
#endif /* LWIP_ICMP6 */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80117ea:	687c      	ldr	r4, [r7, #4]
  while (p != NULL) {
 80117ec:	e038      	b.n	8011860 <ip6_reass_free_complete_datagram+0x88>
    ipr->p = iprh->next_pbuf;
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	6043      	str	r3, [r0, #4]
    MEMCPY(p->payload, ipr->orig_hdr, sizeof(iprh));
 80117f2:	6863      	ldr	r3, [r4, #4]
 80117f4:	68c2      	ldr	r2, [r0, #12]
 80117f6:	601a      	str	r2, [r3, #0]
    if (pbuf_header_force(p, (s16_t)((u8_t*)p->payload - (u8_t*)ipr->iphdr))) {
 80117f8:	6861      	ldr	r1, [r4, #4]
 80117fa:	6883      	ldr	r3, [r0, #8]
 80117fc:	1ac9      	subs	r1, r1, r3
 80117fe:	b209      	sxth	r1, r1
 8011800:	4620      	mov	r0, r4
 8011802:	f7f6 ff8b 	bl	800871c <pbuf_header_force>
 8011806:	b168      	cbz	r0, 8011824 <ip6_reass_free_complete_datagram+0x4c>
      LWIP_ASSERT("ip6_reass_free: moving p->payload to ip6 header failed\n", 0);
 8011808:	4b32      	ldr	r3, [pc, #200]	; (80118d4 <ip6_reass_free_complete_datagram+0xfc>)
 801180a:	22a9      	movs	r2, #169	; 0xa9
 801180c:	4932      	ldr	r1, [pc, #200]	; (80118d8 <ip6_reass_free_complete_datagram+0x100>)
 801180e:	4833      	ldr	r0, [pc, #204]	; (80118dc <ip6_reass_free_complete_datagram+0x104>)
 8011810:	f002 fef0 	bl	80145f4 <iprintf>
    clen = pbuf_clen(p);
 8011814:	4620      	mov	r0, r4
 8011816:	f7f7 f8eb 	bl	80089f0 <pbuf_clen>
 801181a:	4606      	mov	r6, r0
    pbuf_free(p);
 801181c:	4620      	mov	r0, r4
 801181e:	f7f6 ff83 	bl	8008728 <pbuf_free>
 8011822:	e7e2      	b.n	80117ea <ip6_reass_free_complete_datagram+0x12>
      ip6_addr_copy_from_packed(src_addr, IPV6_FRAG_SRC(ipr));
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	689a      	ldr	r2, [r3, #8]
 8011828:	9200      	str	r2, [sp, #0]
 801182a:	68da      	ldr	r2, [r3, #12]
 801182c:	9201      	str	r2, [sp, #4]
 801182e:	691a      	ldr	r2, [r3, #16]
 8011830:	9202      	str	r2, [sp, #8]
 8011832:	695a      	ldr	r2, [r3, #20]
 8011834:	9203      	str	r2, [sp, #12]
      ip6_addr_copy_from_packed(dest_addr, IPV6_FRAG_DEST(ipr));
 8011836:	699a      	ldr	r2, [r3, #24]
 8011838:	9204      	str	r2, [sp, #16]
 801183a:	69da      	ldr	r2, [r3, #28]
 801183c:	9205      	str	r2, [sp, #20]
 801183e:	6a1a      	ldr	r2, [r3, #32]
 8011840:	9206      	str	r2, [sp, #24]
 8011842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011844:	9307      	str	r3, [sp, #28]
      icmp6_time_exceeded_with_addrs(p, ICMP6_TE_FRAG, &src_addr, &dest_addr);
 8011846:	ab04      	add	r3, sp, #16
 8011848:	466a      	mov	r2, sp
 801184a:	2101      	movs	r1, #1
 801184c:	4620      	mov	r0, r4
 801184e:	f7ff fb87 	bl	8010f60 <icmp6_time_exceeded_with_addrs>
 8011852:	e7df      	b.n	8011814 <ip6_reass_free_complete_datagram+0x3c>
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
    clen = pbuf_clen(pcur);
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011854:	4435      	add	r5, r6
 8011856:	b2ae      	uxth	r6, r5
    pbuf_free(pcur);
 8011858:	4620      	mov	r0, r4
 801185a:	f7f6 ff65 	bl	8008728 <pbuf_free>
    p = iprh->next_pbuf;
 801185e:	4644      	mov	r4, r8
  while (p != NULL) {
 8011860:	b18c      	cbz	r4, 8011886 <ip6_reass_free_complete_datagram+0xae>
    iprh = (struct ip6_reass_helper *)p->payload;
 8011862:	6863      	ldr	r3, [r4, #4]
    p = iprh->next_pbuf;
 8011864:	f8d3 8000 	ldr.w	r8, [r3]
    clen = pbuf_clen(pcur);
 8011868:	4620      	mov	r0, r4
 801186a:	f7f7 f8c1 	bl	80089f0 <pbuf_clen>
 801186e:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011870:	1833      	adds	r3, r6, r0
 8011872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011876:	dbed      	blt.n	8011854 <ip6_reass_free_complete_datagram+0x7c>
 8011878:	4b16      	ldr	r3, [pc, #88]	; (80118d4 <ip6_reass_free_complete_datagram+0xfc>)
 801187a:	22c7      	movs	r2, #199	; 0xc7
 801187c:	4918      	ldr	r1, [pc, #96]	; (80118e0 <ip6_reass_free_complete_datagram+0x108>)
 801187e:	4817      	ldr	r0, [pc, #92]	; (80118dc <ip6_reass_free_complete_datagram+0x104>)
 8011880:	f002 feb8 	bl	80145f4 <iprintf>
 8011884:	e7e6      	b.n	8011854 <ip6_reass_free_complete_datagram+0x7c>
  }

  /* Then, unchain the struct ip6_reassdata from the list and free it. */
  if (ipr == reassdatagrams) {
 8011886:	4b17      	ldr	r3, [pc, #92]	; (80118e4 <ip6_reass_free_complete_datagram+0x10c>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	42bb      	cmp	r3, r7
 801188c:	d005      	beq.n	801189a <ip6_reass_free_complete_datagram+0xc2>
    reassdatagrams = ipr->next;
  } else {
    prev = reassdatagrams;
    while (prev != NULL) {
 801188e:	b143      	cbz	r3, 80118a2 <ip6_reass_free_complete_datagram+0xca>
      if (prev->next == ipr) {
 8011890:	681a      	ldr	r2, [r3, #0]
 8011892:	42ba      	cmp	r2, r7
 8011894:	d005      	beq.n	80118a2 <ip6_reass_free_complete_datagram+0xca>
        break;
      }
      prev = prev->next;
 8011896:	4613      	mov	r3, r2
 8011898:	e7f9      	b.n	801188e <ip6_reass_free_complete_datagram+0xb6>
    reassdatagrams = ipr->next;
 801189a:	683a      	ldr	r2, [r7, #0]
 801189c:	4b11      	ldr	r3, [pc, #68]	; (80118e4 <ip6_reass_free_complete_datagram+0x10c>)
 801189e:	601a      	str	r2, [r3, #0]
 80118a0:	e002      	b.n	80118a8 <ip6_reass_free_complete_datagram+0xd0>
    }
    if (prev != NULL) {
 80118a2:	b10b      	cbz	r3, 80118a8 <ip6_reass_free_complete_datagram+0xd0>
      prev->next = ipr->next;
 80118a4:	683a      	ldr	r2, [r7, #0]
 80118a6:	601a      	str	r2, [r3, #0]
    }
  }
  memp_free(MEMP_IP6_REASSDATA, ipr);
 80118a8:	4639      	mov	r1, r7
 80118aa:	2009      	movs	r0, #9
 80118ac:	f7f6 faf6 	bl	8007e9c <memp_free>

  /* Finally, update number of pbufs in reassembly queue */
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip6_reass_pbufcount >= pbufs_freed);
 80118b0:	4b0d      	ldr	r3, [pc, #52]	; (80118e8 <ip6_reass_free_complete_datagram+0x110>)
 80118b2:	881b      	ldrh	r3, [r3, #0]
 80118b4:	42b3      	cmp	r3, r6
 80118b6:	d306      	bcc.n	80118c6 <ip6_reass_free_complete_datagram+0xee>
  ip6_reass_pbufcount = (u16_t)(ip6_reass_pbufcount - pbufs_freed);
 80118b8:	4b0b      	ldr	r3, [pc, #44]	; (80118e8 <ip6_reass_free_complete_datagram+0x110>)
 80118ba:	881d      	ldrh	r5, [r3, #0]
 80118bc:	1bad      	subs	r5, r5, r6
 80118be:	801d      	strh	r5, [r3, #0]
}
 80118c0:	b008      	add	sp, #32
 80118c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip6_reass_pbufcount >= pbufs_freed);
 80118c6:	4b03      	ldr	r3, [pc, #12]	; (80118d4 <ip6_reass_free_complete_datagram+0xfc>)
 80118c8:	22de      	movs	r2, #222	; 0xde
 80118ca:	4908      	ldr	r1, [pc, #32]	; (80118ec <ip6_reass_free_complete_datagram+0x114>)
 80118cc:	4803      	ldr	r0, [pc, #12]	; (80118dc <ip6_reass_free_complete_datagram+0x104>)
 80118ce:	f002 fe91 	bl	80145f4 <iprintf>
 80118d2:	e7f1      	b.n	80118b8 <ip6_reass_free_complete_datagram+0xe0>
 80118d4:	08018654 	.word	0x08018654
 80118d8:	08018690 	.word	0x08018690
 80118dc:	08015608 	.word	0x08015608
 80118e0:	08018410 	.word	0x08018410
 80118e4:	20001894 	.word	0x20001894
 80118e8:	20001890 	.word	0x20001890
 80118ec:	080182c4 	.word	0x080182c4

080118f0 <ip6_reass_remove_oldest_datagram>:
 * @param pbufs_needed number of pbufs needed to enqueue
 *        (used for freeing other datagrams if not enough space)
 */
static void
ip6_reass_remove_oldest_datagram(struct ip6_reassdata *ipr, int pbufs_needed)
{
 80118f0:	b538      	push	{r3, r4, r5, lr}
 80118f2:	4604      	mov	r4, r0
 80118f4:	460d      	mov	r5, r1
 80118f6:	e016      	b.n	8011926 <ip6_reass_remove_oldest_datagram+0x36>
        if (r->timer <= oldest->timer) {
          /* older than the previous oldest */
          oldest = r;
        }
      }
      r = r->next;
 80118f8:	681b      	ldr	r3, [r3, #0]
    while (r != NULL) {
 80118fa:	b13b      	cbz	r3, 801190c <ip6_reass_remove_oldest_datagram+0x1c>
      if (r != ipr) {
 80118fc:	42a3      	cmp	r3, r4
 80118fe:	d0fb      	beq.n	80118f8 <ip6_reass_remove_oldest_datagram+0x8>
        if (r->timer <= oldest->timer) {
 8011900:	7ed9      	ldrb	r1, [r3, #27]
 8011902:	7ec2      	ldrb	r2, [r0, #27]
 8011904:	4291      	cmp	r1, r2
 8011906:	d8f7      	bhi.n	80118f8 <ip6_reass_remove_oldest_datagram+0x8>
          oldest = r;
 8011908:	4618      	mov	r0, r3
 801190a:	e7f5      	b.n	80118f8 <ip6_reass_remove_oldest_datagram+0x8>
    }
    if (oldest == ipr) {
 801190c:	42a0      	cmp	r0, r4
 801190e:	d00e      	beq.n	801192e <ip6_reass_remove_oldest_datagram+0x3e>
      /* nothing to free, ipr is the only element on the list */
      return;
    }
    if (oldest != NULL) {
 8011910:	b108      	cbz	r0, 8011916 <ip6_reass_remove_oldest_datagram+0x26>
      ip6_reass_free_complete_datagram(oldest);
 8011912:	f7ff ff61 	bl	80117d8 <ip6_reass_free_complete_datagram>
    }
  } while (((ip6_reass_pbufcount + pbufs_needed) > IP_REASS_MAX_PBUFS) && (reassdatagrams != NULL));
 8011916:	4b06      	ldr	r3, [pc, #24]	; (8011930 <ip6_reass_remove_oldest_datagram+0x40>)
 8011918:	881b      	ldrh	r3, [r3, #0]
 801191a:	442b      	add	r3, r5
 801191c:	2b0a      	cmp	r3, #10
 801191e:	dd06      	ble.n	801192e <ip6_reass_remove_oldest_datagram+0x3e>
 8011920:	4b04      	ldr	r3, [pc, #16]	; (8011934 <ip6_reass_remove_oldest_datagram+0x44>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	b11b      	cbz	r3, 801192e <ip6_reass_remove_oldest_datagram+0x3e>
    r = oldest = reassdatagrams;
 8011926:	4b03      	ldr	r3, [pc, #12]	; (8011934 <ip6_reass_remove_oldest_datagram+0x44>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	4618      	mov	r0, r3
    while (r != NULL) {
 801192c:	e7e5      	b.n	80118fa <ip6_reass_remove_oldest_datagram+0xa>
}
 801192e:	bd38      	pop	{r3, r4, r5, pc}
 8011930:	20001890 	.word	0x20001890
 8011934:	20001894 	.word	0x20001894

08011938 <ip6_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip6_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8011938:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801193a:	4604      	mov	r4, r0
 801193c:	b120      	cbz	r0, 8011948 <ip6_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 801193e:	4621      	mov	r1, r4
 8011940:	2005      	movs	r0, #5
 8011942:	f7f6 faab 	bl	8007e9c <memp_free>
}
 8011946:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8011948:	4b03      	ldr	r3, [pc, #12]	; (8011958 <ip6_frag_free_pbuf_custom_ref+0x20>)
 801194a:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 801194e:	4903      	ldr	r1, [pc, #12]	; (801195c <ip6_frag_free_pbuf_custom_ref+0x24>)
 8011950:	4803      	ldr	r0, [pc, #12]	; (8011960 <ip6_frag_free_pbuf_custom_ref+0x28>)
 8011952:	f002 fe4f 	bl	80145f4 <iprintf>
 8011956:	e7f2      	b.n	801193e <ip6_frag_free_pbuf_custom_ref+0x6>
 8011958:	08018654 	.word	0x08018654
 801195c:	08017b2c 	.word	0x08017b2c
 8011960:	08015608 	.word	0x08015608

08011964 <ip6_frag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ip6_frag_free_pbuf_custom(struct pbuf *p)
{
 8011964:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011966:	4604      	mov	r4, r0
 8011968:	b138      	cbz	r0, 801197a <ip6_frag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 801196a:	6960      	ldr	r0, [r4, #20]
 801196c:	b108      	cbz	r0, 8011972 <ip6_frag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 801196e:	f7f6 fedb 	bl	8008728 <pbuf_free>
  }
  ip6_frag_free_pbuf_custom_ref(pcr);
 8011972:	4620      	mov	r0, r4
 8011974:	f7ff ffe0 	bl	8011938 <ip6_frag_free_pbuf_custom_ref>
}
 8011978:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801197a:	4b04      	ldr	r3, [pc, #16]	; (801198c <ip6_frag_free_pbuf_custom+0x28>)
 801197c:	f240 22ba 	movw	r2, #698	; 0x2ba
 8011980:	4903      	ldr	r1, [pc, #12]	; (8011990 <ip6_frag_free_pbuf_custom+0x2c>)
 8011982:	4804      	ldr	r0, [pc, #16]	; (8011994 <ip6_frag_free_pbuf_custom+0x30>)
 8011984:	f002 fe36 	bl	80145f4 <iprintf>
 8011988:	e7ef      	b.n	801196a <ip6_frag_free_pbuf_custom+0x6>
 801198a:	bf00      	nop
 801198c:	08018654 	.word	0x08018654
 8011990:	08018454 	.word	0x08018454
 8011994:	08015608 	.word	0x08015608

08011998 <ip6_frag_alloc_pbuf_custom_ref>:
{
 8011998:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 801199a:	2005      	movs	r0, #5
 801199c:	f7f6 fa64 	bl	8007e68 <memp_malloc>
}
 80119a0:	bd08      	pop	{r3, pc}
	...

080119a4 <ip6_reass_tmr>:
  r = reassdatagrams;
 80119a4:	4b0c      	ldr	r3, [pc, #48]	; (80119d8 <ip6_reass_tmr+0x34>)
 80119a6:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 80119a8:	b130      	cbz	r0, 80119b8 <ip6_reass_tmr+0x14>
    if (r->timer > 0) {
 80119aa:	7ec3      	ldrb	r3, [r0, #27]
 80119ac:	b12b      	cbz	r3, 80119ba <ip6_reass_tmr+0x16>
      r->timer--;
 80119ae:	3b01      	subs	r3, #1
 80119b0:	76c3      	strb	r3, [r0, #27]
      r = r->next;
 80119b2:	6800      	ldr	r0, [r0, #0]
 80119b4:	e7f8      	b.n	80119a8 <ip6_reass_tmr+0x4>
}
 80119b6:	bd10      	pop	{r4, pc}
 80119b8:	4770      	bx	lr
{
 80119ba:	b510      	push	{r4, lr}
      r = r->next;
 80119bc:	6804      	ldr	r4, [r0, #0]
      ip6_reass_free_complete_datagram(tmp);
 80119be:	f7ff ff0b 	bl	80117d8 <ip6_reass_free_complete_datagram>
      r = r->next;
 80119c2:	4620      	mov	r0, r4
  while (r != NULL) {
 80119c4:	2800      	cmp	r0, #0
 80119c6:	d0f6      	beq.n	80119b6 <ip6_reass_tmr+0x12>
    if (r->timer > 0) {
 80119c8:	7ec3      	ldrb	r3, [r0, #27]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d0f6      	beq.n	80119bc <ip6_reass_tmr+0x18>
      r->timer--;
 80119ce:	3b01      	subs	r3, #1
 80119d0:	76c3      	strb	r3, [r0, #27]
      r = r->next;
 80119d2:	6800      	ldr	r0, [r0, #0]
 80119d4:	e7f6      	b.n	80119c4 <ip6_reass_tmr+0x20>
 80119d6:	bf00      	nop
 80119d8:	20001894 	.word	0x20001894

080119dc <ip6_reass>:
{
 80119dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119e0:	b085      	sub	sp, #20
 80119e2:	4682      	mov	sl, r0
  LWIP_ASSERT("IPv6 fragment header does not fit in first pbuf",
 80119e4:	8943      	ldrh	r3, [r0, #10]
 80119e6:	2b07      	cmp	r3, #7
 80119e8:	d92f      	bls.n	8011a4a <ip6_reass+0x6e>
  frag_hdr = (struct ip6_frag_hdr *) p->payload;
 80119ea:	f8da 7004 	ldr.w	r7, [sl, #4]
  clen = pbuf_clen(p);
 80119ee:	4650      	mov	r0, sl
 80119f0:	f7f6 fffe 	bl	80089f0 <pbuf_clen>
 80119f4:	4683      	mov	fp, r0
  offset = lwip_ntohs(frag_hdr->_fragment_offset);
 80119f6:	8878      	ldrh	r0, [r7, #2]
 80119f8:	f7f5 fbf8 	bl	80071ec <lwip_htons>
 80119fc:	9001      	str	r0, [sp, #4]
  len = lwip_ntohs(ip6_current_header()->_plen);
 80119fe:	4da5      	ldr	r5, [pc, #660]	; (8011c94 <ip6_reass+0x2b8>)
 8011a00:	68eb      	ldr	r3, [r5, #12]
 8011a02:	8898      	ldrh	r0, [r3, #4]
 8011a04:	f7f5 fbf2 	bl	80071ec <lwip_htons>
 8011a08:	4680      	mov	r8, r0
  hdrdiff = (u8_t*)p->payload - (const u8_t*)ip6_current_header();
 8011a0a:	f8da 4004 	ldr.w	r4, [sl, #4]
 8011a0e:	68eb      	ldr	r3, [r5, #12]
 8011a10:	1ae4      	subs	r4, r4, r3
  LWIP_ASSERT("not a valid pbuf (ip6_input check missing?)", hdrdiff <= 0xFFFF);
 8011a12:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8011a16:	da20      	bge.n	8011a5a <ip6_reass+0x7e>
  LWIP_ASSERT("not a valid pbuf (ip6_input check missing?)", hdrdiff >= IP6_HLEN);
 8011a18:	2c27      	cmp	r4, #39	; 0x27
 8011a1a:	dd26      	ble.n	8011a6a <ip6_reass+0x8e>
  hdrdiff += IP6_FRAG_HLEN;
 8011a1c:	3c20      	subs	r4, #32
  if (hdrdiff > len) {
 8011a1e:	45a0      	cmp	r8, r4
 8011a20:	f2c0 80b3 	blt.w	8011b8a <ip6_reass+0x1ae>
  len = (u16_t)(len - hdrdiff);
 8011a24:	b2a4      	uxth	r4, r4
 8011a26:	eba8 0404 	sub.w	r4, r8, r4
 8011a2a:	fa1f f884 	uxth.w	r8, r4
  start = (offset & IP6_FRAG_OFFSET_MASK);
 8011a2e:	9b01      	ldr	r3, [sp, #4]
 8011a30:	f023 0607 	bic.w	r6, r3, #7
 8011a34:	b2b6      	uxth	r6, r6
  if (start > (0xFFFF - len)) {
 8011a36:	f5c8 437f 	rsb	r3, r8, #65280	; 0xff00
 8011a3a:	33ff      	adds	r3, #255	; 0xff
 8011a3c:	429e      	cmp	r6, r3
 8011a3e:	f300 80a4 	bgt.w	8011b8a <ip6_reass+0x1ae>
  for (ipr = reassdatagrams, ipr_prev = NULL; ipr != NULL; ipr = ipr->next) {
 8011a42:	4b95      	ldr	r3, [pc, #596]	; (8011c98 <ip6_reass+0x2bc>)
 8011a44:	681c      	ldr	r4, [r3, #0]
 8011a46:	2500      	movs	r5, #0
 8011a48:	e019      	b.n	8011a7e <ip6_reass+0xa2>
  LWIP_ASSERT("IPv6 fragment header does not fit in first pbuf",
 8011a4a:	4b94      	ldr	r3, [pc, #592]	; (8011c9c <ip6_reass+0x2c0>)
 8011a4c:	f240 121f 	movw	r2, #287	; 0x11f
 8011a50:	4993      	ldr	r1, [pc, #588]	; (8011ca0 <ip6_reass+0x2c4>)
 8011a52:	4894      	ldr	r0, [pc, #592]	; (8011ca4 <ip6_reass+0x2c8>)
 8011a54:	f002 fdce 	bl	80145f4 <iprintf>
 8011a58:	e7c7      	b.n	80119ea <ip6_reass+0xe>
  LWIP_ASSERT("not a valid pbuf (ip6_input check missing?)", hdrdiff <= 0xFFFF);
 8011a5a:	4b90      	ldr	r3, [pc, #576]	; (8011c9c <ip6_reass+0x2c0>)
 8011a5c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8011a60:	4991      	ldr	r1, [pc, #580]	; (8011ca8 <ip6_reass+0x2cc>)
 8011a62:	4890      	ldr	r0, [pc, #576]	; (8011ca4 <ip6_reass+0x2c8>)
 8011a64:	f002 fdc6 	bl	80145f4 <iprintf>
 8011a68:	e7d6      	b.n	8011a18 <ip6_reass+0x3c>
  LWIP_ASSERT("not a valid pbuf (ip6_input check missing?)", hdrdiff >= IP6_HLEN);
 8011a6a:	4b8c      	ldr	r3, [pc, #560]	; (8011c9c <ip6_reass+0x2c0>)
 8011a6c:	f240 122d 	movw	r2, #301	; 0x12d
 8011a70:	498d      	ldr	r1, [pc, #564]	; (8011ca8 <ip6_reass+0x2cc>)
 8011a72:	488c      	ldr	r0, [pc, #560]	; (8011ca4 <ip6_reass+0x2c8>)
 8011a74:	f002 fdbe 	bl	80145f4 <iprintf>
 8011a78:	e7d0      	b.n	8011a1c <ip6_reass+0x40>
    ipr_prev = ipr;
 8011a7a:	4625      	mov	r5, r4
  for (ipr = reassdatagrams, ipr_prev = NULL; ipr != NULL; ipr = ipr->next) {
 8011a7c:	6824      	ldr	r4, [r4, #0]
 8011a7e:	b364      	cbz	r4, 8011ada <ip6_reass+0xfe>
    if ((frag_hdr->_identification == ipr->identification) &&
 8011a80:	687a      	ldr	r2, [r7, #4]
 8011a82:	6963      	ldr	r3, [r4, #20]
 8011a84:	429a      	cmp	r2, r3
 8011a86:	d1f8      	bne.n	8011a7a <ip6_reass+0x9e>
        ip6_addr_cmp_packed(ip6_current_src_addr(), &(IPV6_FRAG_SRC(ipr)), ipr->src_zone) &&
 8011a88:	4b82      	ldr	r3, [pc, #520]	; (8011c94 <ip6_reass+0x2b8>)
 8011a8a:	6959      	ldr	r1, [r3, #20]
 8011a8c:	68a3      	ldr	r3, [r4, #8]
 8011a8e:	689a      	ldr	r2, [r3, #8]
    if ((frag_hdr->_identification == ipr->identification) &&
 8011a90:	4291      	cmp	r1, r2
 8011a92:	d1f2      	bne.n	8011a7a <ip6_reass+0x9e>
        ip6_addr_cmp_packed(ip6_current_src_addr(), &(IPV6_FRAG_SRC(ipr)), ipr->src_zone) &&
 8011a94:	4a7f      	ldr	r2, [pc, #508]	; (8011c94 <ip6_reass+0x2b8>)
 8011a96:	6991      	ldr	r1, [r2, #24]
 8011a98:	68da      	ldr	r2, [r3, #12]
 8011a9a:	4291      	cmp	r1, r2
 8011a9c:	d1ed      	bne.n	8011a7a <ip6_reass+0x9e>
 8011a9e:	4a7d      	ldr	r2, [pc, #500]	; (8011c94 <ip6_reass+0x2b8>)
 8011aa0:	69d1      	ldr	r1, [r2, #28]
 8011aa2:	691a      	ldr	r2, [r3, #16]
 8011aa4:	4291      	cmp	r1, r2
 8011aa6:	d1e8      	bne.n	8011a7a <ip6_reass+0x9e>
 8011aa8:	4a7a      	ldr	r2, [pc, #488]	; (8011c94 <ip6_reass+0x2b8>)
 8011aaa:	6a11      	ldr	r1, [r2, #32]
 8011aac:	695a      	ldr	r2, [r3, #20]
 8011aae:	4291      	cmp	r1, r2
 8011ab0:	d1e3      	bne.n	8011a7a <ip6_reass+0x9e>
        ip6_addr_cmp_packed(ip6_current_dest_addr(), &(IPV6_FRAG_DEST(ipr)), ipr->dest_zone)) {
 8011ab2:	4a78      	ldr	r2, [pc, #480]	; (8011c94 <ip6_reass+0x2b8>)
 8011ab4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8011ab6:	699a      	ldr	r2, [r3, #24]
        ip6_addr_cmp_packed(ip6_current_src_addr(), &(IPV6_FRAG_SRC(ipr)), ipr->src_zone) &&
 8011ab8:	4291      	cmp	r1, r2
 8011aba:	d1de      	bne.n	8011a7a <ip6_reass+0x9e>
        ip6_addr_cmp_packed(ip6_current_dest_addr(), &(IPV6_FRAG_DEST(ipr)), ipr->dest_zone)) {
 8011abc:	4a75      	ldr	r2, [pc, #468]	; (8011c94 <ip6_reass+0x2b8>)
 8011abe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8011ac0:	69da      	ldr	r2, [r3, #28]
 8011ac2:	4291      	cmp	r1, r2
 8011ac4:	d1d9      	bne.n	8011a7a <ip6_reass+0x9e>
 8011ac6:	4a73      	ldr	r2, [pc, #460]	; (8011c94 <ip6_reass+0x2b8>)
 8011ac8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8011aca:	6a1a      	ldr	r2, [r3, #32]
 8011acc:	4291      	cmp	r1, r2
 8011ace:	d1d4      	bne.n	8011a7a <ip6_reass+0x9e>
 8011ad0:	4a70      	ldr	r2, [pc, #448]	; (8011c94 <ip6_reass+0x2b8>)
 8011ad2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d1cf      	bne.n	8011a7a <ip6_reass+0x9e>
  if (ipr == NULL) {
 8011ada:	b18c      	cbz	r4, 8011b00 <ip6_reass+0x124>
  if ((ip6_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011adc:	4b73      	ldr	r3, [pc, #460]	; (8011cac <ip6_reass+0x2d0>)
 8011ade:	881b      	ldrh	r3, [r3, #0]
 8011ae0:	445b      	add	r3, fp
 8011ae2:	2b0a      	cmp	r3, #10
 8011ae4:	dc37      	bgt.n	8011b56 <ip6_reass+0x17a>
  iprh = (struct ip6_reass_helper *)p->payload;
 8011ae6:	f8da 7004 	ldr.w	r7, [sl, #4]
  end = (u16_t)(start + len);
 8011aea:	44b0      	add	r8, r6
 8011aec:	fa1f f388 	uxth.w	r3, r8
 8011af0:	9302      	str	r3, [sp, #8]
  for (q = ipr->p; q != NULL;) {
 8011af2:	6862      	ldr	r2, [r4, #4]
  u8_t valid = 1;
 8011af4:	f04f 0901 	mov.w	r9, #1
  struct ip6_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8011af8:	f04f 0800 	mov.w	r8, #0
 8011afc:	4640      	mov	r0, r8
  for (q = ipr->p; q != NULL;) {
 8011afe:	e056      	b.n	8011bae <ip6_reass+0x1d2>
    ipr = (struct ip6_reassdata *)memp_malloc(MEMP_IP6_REASSDATA);
 8011b00:	2009      	movs	r0, #9
 8011b02:	f7f6 f9b1 	bl	8007e68 <memp_malloc>
    if (ipr == NULL) {
 8011b06:	4604      	mov	r4, r0
 8011b08:	b1a0      	cbz	r0, 8011b34 <ip6_reass+0x158>
    memset(ipr, 0, sizeof(struct ip6_reassdata));
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	6062      	str	r2, [r4, #4]
 8011b0e:	60a2      	str	r2, [r4, #8]
 8011b10:	60e2      	str	r2, [r4, #12]
 8011b12:	6122      	str	r2, [r4, #16]
 8011b14:	6162      	str	r2, [r4, #20]
 8011b16:	61a2      	str	r2, [r4, #24]
    ipr->timer = IPV6_REASS_MAXAGE;
 8011b18:	233c      	movs	r3, #60	; 0x3c
 8011b1a:	76e3      	strb	r3, [r4, #27]
    ipr->next = reassdatagrams;
 8011b1c:	4b5e      	ldr	r3, [pc, #376]	; (8011c98 <ip6_reass+0x2bc>)
 8011b1e:	681a      	ldr	r2, [r3, #0]
 8011b20:	6022      	str	r2, [r4, #0]
    reassdatagrams = ipr;
 8011b22:	601c      	str	r4, [r3, #0]
    ipr->iphdr = ip_data.current_ip6_header;
 8011b24:	4b5b      	ldr	r3, [pc, #364]	; (8011c94 <ip6_reass+0x2b8>)
 8011b26:	68db      	ldr	r3, [r3, #12]
 8011b28:	60a3      	str	r3, [r4, #8]
    ipr->identification = frag_hdr->_identification;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	6163      	str	r3, [r4, #20]
    ipr->nexth = frag_hdr->_nexth;
 8011b2e:	783b      	ldrb	r3, [r7, #0]
 8011b30:	76a3      	strb	r3, [r4, #26]
 8011b32:	e7d3      	b.n	8011adc <ip6_reass+0x100>
      ip6_reass_remove_oldest_datagram(ipr, clen);
 8011b34:	4659      	mov	r1, fp
 8011b36:	f7ff fedb 	bl	80118f0 <ip6_reass_remove_oldest_datagram>
      ipr = (struct ip6_reassdata *)memp_malloc(MEMP_IP6_REASSDATA);
 8011b3a:	2009      	movs	r0, #9
 8011b3c:	f7f6 f994 	bl	8007e68 <memp_malloc>
      if (ipr != NULL) {
 8011b40:	4604      	mov	r4, r0
 8011b42:	b310      	cbz	r0, 8011b8a <ip6_reass+0x1ae>
        for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011b44:	4b54      	ldr	r3, [pc, #336]	; (8011c98 <ip6_reass+0x2bc>)
 8011b46:	681d      	ldr	r5, [r3, #0]
 8011b48:	2d00      	cmp	r5, #0
 8011b4a:	d0de      	beq.n	8011b0a <ip6_reass+0x12e>
          if (ipr_prev->next == ipr) {
 8011b4c:	682b      	ldr	r3, [r5, #0]
 8011b4e:	42a3      	cmp	r3, r4
 8011b50:	d0db      	beq.n	8011b0a <ip6_reass+0x12e>
        for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011b52:	461d      	mov	r5, r3
 8011b54:	e7f8      	b.n	8011b48 <ip6_reass+0x16c>
    ip6_reass_remove_oldest_datagram(ipr, clen);
 8011b56:	4659      	mov	r1, fp
 8011b58:	4620      	mov	r0, r4
 8011b5a:	f7ff fec9 	bl	80118f0 <ip6_reass_remove_oldest_datagram>
    if ((ip6_reass_pbufcount + clen) <= IP_REASS_MAX_PBUFS) {
 8011b5e:	4b53      	ldr	r3, [pc, #332]	; (8011cac <ip6_reass+0x2d0>)
 8011b60:	881b      	ldrh	r3, [r3, #0]
 8011b62:	445b      	add	r3, fp
 8011b64:	2b0a      	cmp	r3, #10
 8011b66:	dc10      	bgt.n	8011b8a <ip6_reass+0x1ae>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011b68:	4b4b      	ldr	r3, [pc, #300]	; (8011c98 <ip6_reass+0x2bc>)
 8011b6a:	681d      	ldr	r5, [r3, #0]
 8011b6c:	2d00      	cmp	r5, #0
 8011b6e:	d0ba      	beq.n	8011ae6 <ip6_reass+0x10a>
        if (ipr_prev->next == ipr) {
 8011b70:	682b      	ldr	r3, [r5, #0]
 8011b72:	42a3      	cmp	r3, r4
 8011b74:	d0b7      	beq.n	8011ae6 <ip6_reass+0x10a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011b76:	461d      	mov	r5, r3
 8011b78:	e7f8      	b.n	8011b6c <ip6_reass+0x190>
 8011b7a:	4680      	mov	r8, r0
      if (end > iprh_tmp->start) {
 8011b7c:	9b02      	ldr	r3, [sp, #8]
 8011b7e:	4299      	cmp	r1, r3
 8011b80:	d303      	bcc.n	8011b8a <ip6_reass+0x1ae>
      if (iprh_prev != NULL) {
 8011b82:	b138      	cbz	r0, 8011b94 <ip6_reass+0x1b8>
        if (start < iprh_prev->end) {
 8011b84:	88c3      	ldrh	r3, [r0, #6]
 8011b86:	42b3      	cmp	r3, r6
 8011b88:	d904      	bls.n	8011b94 <ip6_reass+0x1b8>
  pbuf_free(p);
 8011b8a:	4650      	mov	r0, sl
 8011b8c:	f7f6 fdcc 	bl	8008728 <pbuf_free>
  return NULL;
 8011b90:	2700      	movs	r7, #0
 8011b92:	e0ed      	b.n	8011d70 <ip6_reass+0x394>
      if (iprh_prev != NULL) {
 8011b94:	f1b8 0f00 	cmp.w	r8, #0
 8011b98:	d003      	beq.n	8011ba2 <ip6_reass+0x1c6>
        iprh_prev->next_pbuf = p;
 8011b9a:	f8c8 a000 	str.w	sl, [r8]
      next_pbuf = q;
 8011b9e:	9203      	str	r2, [sp, #12]
 8011ba0:	e019      	b.n	8011bd6 <ip6_reass+0x1fa>
        ipr->p = p;
 8011ba2:	f8c4 a004 	str.w	sl, [r4, #4]
      next_pbuf = q;
 8011ba6:	9203      	str	r2, [sp, #12]
 8011ba8:	e015      	b.n	8011bd6 <ip6_reass+0x1fa>
    q = iprh_tmp->next_pbuf;
 8011baa:	681a      	ldr	r2, [r3, #0]
    iprh_prev = iprh_tmp;
 8011bac:	4618      	mov	r0, r3
  for (q = ipr->p; q != NULL;) {
 8011bae:	b182      	cbz	r2, 8011bd2 <ip6_reass+0x1f6>
    iprh_tmp = (struct ip6_reass_helper*)q->payload;
 8011bb0:	6853      	ldr	r3, [r2, #4]
    if (start < iprh_tmp->start) {
 8011bb2:	8899      	ldrh	r1, [r3, #4]
 8011bb4:	42b1      	cmp	r1, r6
 8011bb6:	d8e0      	bhi.n	8011b7a <ip6_reass+0x19e>
    } else if (start == iprh_tmp->start) {
 8011bb8:	42b1      	cmp	r1, r6
 8011bba:	d0e6      	beq.n	8011b8a <ip6_reass+0x1ae>
    } else if (start < iprh_tmp->end) {
 8011bbc:	88da      	ldrh	r2, [r3, #6]
 8011bbe:	42b2      	cmp	r2, r6
 8011bc0:	d8e3      	bhi.n	8011b8a <ip6_reass+0x1ae>
      if (iprh_prev != NULL) {
 8011bc2:	2800      	cmp	r0, #0
 8011bc4:	d0f1      	beq.n	8011baa <ip6_reass+0x1ce>
        if (iprh_prev->end != iprh_tmp->start) {
 8011bc6:	88c2      	ldrh	r2, [r0, #6]
 8011bc8:	4291      	cmp	r1, r2
 8011bca:	d0ee      	beq.n	8011baa <ip6_reass+0x1ce>
          valid = 0;
 8011bcc:	f04f 0900 	mov.w	r9, #0
 8011bd0:	e7eb      	b.n	8011baa <ip6_reass+0x1ce>
 8011bd2:	4680      	mov	r8, r0
  next_pbuf = NULL;
 8011bd4:	9203      	str	r2, [sp, #12]
  if (q == NULL) {
 8011bd6:	b352      	cbz	r2, 8011c2e <ip6_reass+0x252>
  ip6_reass_pbufcount = (u16_t)(ip6_reass_pbufcount + clen);
 8011bd8:	4b34      	ldr	r3, [pc, #208]	; (8011cac <ip6_reass+0x2d0>)
 8011bda:	881a      	ldrh	r2, [r3, #0]
 8011bdc:	4493      	add	fp, r2
 8011bde:	f8a3 b000 	strh.w	fp, [r3]
  if (start == 0) {
 8011be2:	2e00      	cmp	r6, #0
 8011be4:	d047      	beq.n	8011c76 <ip6_reass+0x29a>
  iprh->next_pbuf = next_pbuf;
 8011be6:	9b03      	ldr	r3, [sp, #12]
 8011be8:	603b      	str	r3, [r7, #0]
  iprh->start = start;
 8011bea:	80be      	strh	r6, [r7, #4]
  iprh->end = end;
 8011bec:	9b02      	ldr	r3, [sp, #8]
 8011bee:	80fb      	strh	r3, [r7, #6]
  if ((offset & IP6_FRAG_MORE_FLAG) == 0) {
 8011bf0:	9a01      	ldr	r2, [sp, #4]
 8011bf2:	f012 0f01 	tst.w	r2, #1
 8011bf6:	d100      	bne.n	8011bfa <ip6_reass+0x21e>
    ipr->datagram_len = iprh->end;
 8011bf8:	8323      	strh	r3, [r4, #24]
  iprh_tmp = (struct ip6_reass_helper*)ipr->p->payload;
 8011bfa:	6863      	ldr	r3, [r4, #4]
 8011bfc:	f8d3 8004 	ldr.w	r8, [r3, #4]
  if (iprh_tmp->start != 0) {
 8011c00:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8011c04:	b10b      	cbz	r3, 8011c0a <ip6_reass+0x22e>
    valid = 0;
 8011c06:	f04f 0900 	mov.w	r9, #0
  if (ipr->datagram_len == 0) {
 8011c0a:	8b23      	ldrh	r3, [r4, #24]
 8011c0c:	b90b      	cbnz	r3, 8011c12 <ip6_reass+0x236>
    valid = 0;
 8011c0e:	f04f 0900 	mov.w	r9, #0
  q = iprh->next_pbuf;
 8011c12:	683a      	ldr	r2, [r7, #0]
 8011c14:	4648      	mov	r0, r9
  while ((q != NULL) && valid) {
 8011c16:	2a00      	cmp	r2, #0
 8011c18:	d04e      	beq.n	8011cb8 <ip6_reass+0x2dc>
 8011c1a:	2800      	cmp	r0, #0
 8011c1c:	d035      	beq.n	8011c8a <ip6_reass+0x2ae>
    iprh = (struct ip6_reass_helper*)q->payload;
 8011c1e:	6853      	ldr	r3, [r2, #4]
    if (iprh_prev->end != iprh->start) {
 8011c20:	88f9      	ldrh	r1, [r7, #6]
 8011c22:	889a      	ldrh	r2, [r3, #4]
 8011c24:	4291      	cmp	r1, r2
 8011c26:	d132      	bne.n	8011c8e <ip6_reass+0x2b2>
    q = iprh->next_pbuf;
 8011c28:	681a      	ldr	r2, [r3, #0]
    iprh_prev = iprh;
 8011c2a:	461f      	mov	r7, r3
 8011c2c:	e7f3      	b.n	8011c16 <ip6_reass+0x23a>
    if (iprh_prev != NULL) {
 8011c2e:	f1b8 0f00 	cmp.w	r8, #0
 8011c32:	d014      	beq.n	8011c5e <ip6_reass+0x282>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= start);
 8011c34:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8011c38:	42b3      	cmp	r3, r6
 8011c3a:	d808      	bhi.n	8011c4e <ip6_reass+0x272>
      iprh_prev->next_pbuf = p;
 8011c3c:	f8c8 a000 	str.w	sl, [r8]
      if (iprh_prev->end != start) {
 8011c40:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8011c44:	42b3      	cmp	r3, r6
 8011c46:	d0c7      	beq.n	8011bd8 <ip6_reass+0x1fc>
        valid = 0;
 8011c48:	f04f 0900 	mov.w	r9, #0
 8011c4c:	e7c4      	b.n	8011bd8 <ip6_reass+0x1fc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= start);
 8011c4e:	4b13      	ldr	r3, [pc, #76]	; (8011c9c <ip6_reass+0x2c0>)
 8011c50:	f240 12e9 	movw	r2, #489	; 0x1e9
 8011c54:	4916      	ldr	r1, [pc, #88]	; (8011cb0 <ip6_reass+0x2d4>)
 8011c56:	4813      	ldr	r0, [pc, #76]	; (8011ca4 <ip6_reass+0x2c8>)
 8011c58:	f002 fccc 	bl	80145f4 <iprintf>
 8011c5c:	e7ee      	b.n	8011c3c <ip6_reass+0x260>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011c5e:	6863      	ldr	r3, [r4, #4]
 8011c60:	b133      	cbz	r3, 8011c70 <ip6_reass+0x294>
 8011c62:	4b0e      	ldr	r3, [pc, #56]	; (8011c9c <ip6_reass+0x2c0>)
 8011c64:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 8011c68:	4912      	ldr	r1, [pc, #72]	; (8011cb4 <ip6_reass+0x2d8>)
 8011c6a:	480e      	ldr	r0, [pc, #56]	; (8011ca4 <ip6_reass+0x2c8>)
 8011c6c:	f002 fcc2 	bl	80145f4 <iprintf>
      ipr->p = p;
 8011c70:	f8c4 a004 	str.w	sl, [r4, #4]
 8011c74:	e7b0      	b.n	8011bd8 <ip6_reass+0x1fc>
    ipr->iphdr = ip_data.current_ip6_header;
 8011c76:	4b07      	ldr	r3, [pc, #28]	; (8011c94 <ip6_reass+0x2b8>)
 8011c78:	68db      	ldr	r3, [r3, #12]
 8011c7a:	60a3      	str	r3, [r4, #8]
    MEMCPY(ipr->orig_hdr, p->payload, sizeof(*iprh));
 8011c7c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8011c80:	681a      	ldr	r2, [r3, #0]
 8011c82:	685b      	ldr	r3, [r3, #4]
 8011c84:	60e2      	str	r2, [r4, #12]
 8011c86:	6123      	str	r3, [r4, #16]
 8011c88:	e7ad      	b.n	8011be6 <ip6_reass+0x20a>
 8011c8a:	4681      	mov	r9, r0
 8011c8c:	e015      	b.n	8011cba <ip6_reass+0x2de>
      valid = 0;
 8011c8e:	f04f 0900 	mov.w	r9, #0
 8011c92:	e012      	b.n	8011cba <ip6_reass+0x2de>
 8011c94:	20004b84 	.word	0x20004b84
 8011c98:	20001894 	.word	0x20001894
 8011c9c:	08018654 	.word	0x08018654
 8011ca0:	080185a8 	.word	0x080185a8
 8011ca4:	08015608 	.word	0x08015608
 8011ca8:	080185d8 	.word	0x080185d8
 8011cac:	20001890 	.word	0x20001890
 8011cb0:	0801830c 	.word	0x0801830c
 8011cb4:	0801832c 	.word	0x0801832c
 8011cb8:	4681      	mov	r9, r0
  if (valid) {
 8011cba:	f1b9 0f00 	cmp.w	r9, #0
 8011cbe:	d00d      	beq.n	8011cdc <ip6_reass+0x300>
 8011cc0:	4647      	mov	r7, r8
    while (iprh != NULL) {
 8011cc2:	b16f      	cbz	r7, 8011ce0 <ip6_reass+0x304>
      next_pbuf = iprh->next_pbuf;
 8011cc4:	683e      	ldr	r6, [r7, #0]
      if (next_pbuf != NULL) {
 8011cc6:	b15e      	cbz	r6, 8011ce0 <ip6_reass+0x304>
        iprh_tmp = (struct ip6_reass_helper*)next_pbuf->payload;
 8011cc8:	6877      	ldr	r7, [r6, #4]
        pbuf_remove_header(next_pbuf, IP6_FRAG_HLEN);
 8011cca:	2108      	movs	r1, #8
 8011ccc:	4630      	mov	r0, r6
 8011cce:	f7f6 fce5 	bl	800869c <pbuf_remove_header>
        pbuf_cat(ipr->p, next_pbuf);
 8011cd2:	4631      	mov	r1, r6
 8011cd4:	6860      	ldr	r0, [r4, #4]
 8011cd6:	f7f6 fead 	bl	8008a34 <pbuf_cat>
 8011cda:	e7f2      	b.n	8011cc2 <ip6_reass+0x2e6>
  return NULL;
 8011cdc:	2700      	movs	r7, #0
 8011cde:	e047      	b.n	8011d70 <ip6_reass+0x394>
    p = ipr->p;
 8011ce0:	6867      	ldr	r7, [r4, #4]
    MEMMOVE((u8_t*)ipr->iphdr + sizeof(struct ip6_frag_hdr), ipr->iphdr,
 8011ce2:	68a0      	ldr	r0, [r4, #8]
 8011ce4:	687a      	ldr	r2, [r7, #4]
 8011ce6:	1a12      	subs	r2, r2, r0
 8011ce8:	4601      	mov	r1, r0
 8011cea:	3008      	adds	r0, #8
 8011cec:	f002 fc60 	bl	80145b0 <memmove>
    iphdr_ptr = (struct ip6_hdr*)((u8_t*)ipr->iphdr +
 8011cf0:	68a6      	ldr	r6, [r4, #8]
 8011cf2:	f106 0808 	add.w	r8, r6, #8
    ipr->datagram_len = (u16_t)(ipr->datagram_len + ((u8_t*)p->payload - (u8_t*)iphdr_ptr)
 8011cf6:	8b20      	ldrh	r0, [r4, #24]
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	eba3 0308 	sub.w	r3, r3, r8
 8011cfe:	4418      	add	r0, r3
 8011d00:	b280      	uxth	r0, r0
 8011d02:	3828      	subs	r0, #40	; 0x28
 8011d04:	b280      	uxth	r0, r0
 8011d06:	8320      	strh	r0, [r4, #24]
    iphdr_ptr->_plen = lwip_htons(ipr->datagram_len);
 8011d08:	f7f5 fa70 	bl	80071ec <lwip_htons>
 8011d0c:	81b0      	strh	r0, [r6, #12]
    if (IP6H_NEXTH(iphdr_ptr) == IP6_NEXTH_FRAGMENT) {
 8011d0e:	7bb3      	ldrb	r3, [r6, #14]
 8011d10:	2b2c      	cmp	r3, #44	; 0x2c
 8011d12:	d002      	beq.n	8011d1a <ip6_reass+0x33e>
      u8_t *ptr = (u8_t *)iphdr_ptr + IP6_HLEN;
 8011d14:	f106 0330 	add.w	r3, r6, #48	; 0x30
      while (*ptr != IP6_NEXTH_FRAGMENT) {
 8011d18:	e006      	b.n	8011d28 <ip6_reass+0x34c>
      iphdr_ptr->_nexth = ipr->nexth;
 8011d1a:	7ea3      	ldrb	r3, [r4, #26]
 8011d1c:	73b3      	strb	r3, [r6, #14]
 8011d1e:	e008      	b.n	8011d32 <ip6_reass+0x356>
        ptr += 8 * (1 + ptr[1]);
 8011d20:	785a      	ldrb	r2, [r3, #1]
 8011d22:	3201      	adds	r2, #1
 8011d24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      while (*ptr != IP6_NEXTH_FRAGMENT) {
 8011d28:	781a      	ldrb	r2, [r3, #0]
 8011d2a:	2a2c      	cmp	r2, #44	; 0x2c
 8011d2c:	d1f8      	bne.n	8011d20 <ip6_reass+0x344>
      *ptr = ipr->nexth;
 8011d2e:	7ea2      	ldrb	r2, [r4, #26]
 8011d30:	701a      	strb	r2, [r3, #0]
    if (reassdatagrams == ipr) {
 8011d32:	4b21      	ldr	r3, [pc, #132]	; (8011db8 <ip6_reass+0x3dc>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	42a3      	cmp	r3, r4
 8011d38:	d01e      	beq.n	8011d78 <ip6_reass+0x39c>
      LWIP_ASSERT("sanity check linked list", ipr_prev != NULL);
 8011d3a:	b30d      	cbz	r5, 8011d80 <ip6_reass+0x3a4>
      ipr_prev->next = ipr->next;
 8011d3c:	6823      	ldr	r3, [r4, #0]
 8011d3e:	602b      	str	r3, [r5, #0]
    memp_free(MEMP_IP6_REASSDATA, ipr);
 8011d40:	4621      	mov	r1, r4
 8011d42:	2009      	movs	r0, #9
 8011d44:	f7f6 f8aa 	bl	8007e9c <memp_free>
    clen = pbuf_clen(p);
 8011d48:	4638      	mov	r0, r7
 8011d4a:	f7f6 fe51 	bl	80089f0 <pbuf_clen>
 8011d4e:	4604      	mov	r4, r0
    LWIP_ASSERT("ip6_reass_pbufcount >= clen", ip6_reass_pbufcount >= clen);
 8011d50:	4b1a      	ldr	r3, [pc, #104]	; (8011dbc <ip6_reass+0x3e0>)
 8011d52:	881b      	ldrh	r3, [r3, #0]
 8011d54:	4283      	cmp	r3, r0
 8011d56:	d31b      	bcc.n	8011d90 <ip6_reass+0x3b4>
    ip6_reass_pbufcount = (u16_t)(ip6_reass_pbufcount - clen);
 8011d58:	4b18      	ldr	r3, [pc, #96]	; (8011dbc <ip6_reass+0x3e0>)
 8011d5a:	8818      	ldrh	r0, [r3, #0]
 8011d5c:	1b00      	subs	r0, r0, r4
 8011d5e:	8018      	strh	r0, [r3, #0]
    if (pbuf_header_force(p, (s16_t)((u8_t*)p->payload - (u8_t*)iphdr_ptr))) {
 8011d60:	6879      	ldr	r1, [r7, #4]
 8011d62:	eba1 0108 	sub.w	r1, r1, r8
 8011d66:	b209      	sxth	r1, r1
 8011d68:	4638      	mov	r0, r7
 8011d6a:	f7f6 fcd7 	bl	800871c <pbuf_header_force>
 8011d6e:	b9b8      	cbnz	r0, 8011da0 <ip6_reass+0x3c4>
}
 8011d70:	4638      	mov	r0, r7
 8011d72:	b005      	add	sp, #20
 8011d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      reassdatagrams = ipr->next;
 8011d78:	6822      	ldr	r2, [r4, #0]
 8011d7a:	4b0f      	ldr	r3, [pc, #60]	; (8011db8 <ip6_reass+0x3dc>)
 8011d7c:	601a      	str	r2, [r3, #0]
 8011d7e:	e7df      	b.n	8011d40 <ip6_reass+0x364>
      LWIP_ASSERT("sanity check linked list", ipr_prev != NULL);
 8011d80:	4b0f      	ldr	r3, [pc, #60]	; (8011dc0 <ip6_reass+0x3e4>)
 8011d82:	f240 2283 	movw	r2, #643	; 0x283
 8011d86:	490f      	ldr	r1, [pc, #60]	; (8011dc4 <ip6_reass+0x3e8>)
 8011d88:	480f      	ldr	r0, [pc, #60]	; (8011dc8 <ip6_reass+0x3ec>)
 8011d8a:	f002 fc33 	bl	80145f4 <iprintf>
 8011d8e:	e7d5      	b.n	8011d3c <ip6_reass+0x360>
    LWIP_ASSERT("ip6_reass_pbufcount >= clen", ip6_reass_pbufcount >= clen);
 8011d90:	4b0b      	ldr	r3, [pc, #44]	; (8011dc0 <ip6_reass+0x3e4>)
 8011d92:	f240 228a 	movw	r2, #650	; 0x28a
 8011d96:	490d      	ldr	r1, [pc, #52]	; (8011dcc <ip6_reass+0x3f0>)
 8011d98:	480b      	ldr	r0, [pc, #44]	; (8011dc8 <ip6_reass+0x3ec>)
 8011d9a:	f002 fc2b 	bl	80145f4 <iprintf>
 8011d9e:	e7db      	b.n	8011d58 <ip6_reass+0x37c>
      LWIP_ASSERT("ip6_reass: moving p->payload to ip6 header failed\n", 0);
 8011da0:	4b07      	ldr	r3, [pc, #28]	; (8011dc0 <ip6_reass+0x3e4>)
 8011da2:	f240 228f 	movw	r2, #655	; 0x28f
 8011da6:	490a      	ldr	r1, [pc, #40]	; (8011dd0 <ip6_reass+0x3f4>)
 8011da8:	4807      	ldr	r0, [pc, #28]	; (8011dc8 <ip6_reass+0x3ec>)
 8011daa:	f002 fc23 	bl	80145f4 <iprintf>
      pbuf_free(p);
 8011dae:	4638      	mov	r0, r7
 8011db0:	f7f6 fcba 	bl	8008728 <pbuf_free>
      return NULL;
 8011db4:	2700      	movs	r7, #0
 8011db6:	e7db      	b.n	8011d70 <ip6_reass+0x394>
 8011db8:	20001894 	.word	0x20001894
 8011dbc:	20001890 	.word	0x20001890
 8011dc0:	08018654 	.word	0x08018654
 8011dc4:	080183d4 	.word	0x080183d4
 8011dc8:	08015608 	.word	0x08015608
 8011dcc:	08018604 	.word	0x08018604
 8011dd0:	08018620 	.word	0x08018620

08011dd4 <ip6_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip6_frag(struct pbuf *p, struct netif *netif, const ip6_addr_t *dest)
{
 8011dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dd8:	b089      	sub	sp, #36	; 0x24
 8011dda:	4605      	mov	r5, r0
 8011ddc:	9106      	str	r1, [sp, #24]
 8011dde:	9207      	str	r2, [sp, #28]
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  static u32_t identification;
  u16_t left, cop;
  const u16_t mtu = nd6_get_destination_mtu(dest, netif);
 8011de0:	4610      	mov	r0, r2
 8011de2:	f002 f9a9 	bl	8014138 <nd6_get_destination_mtu>
  const u16_t nfb = (u16_t)((mtu - (IP6_HLEN + IP6_FRAG_HLEN)) & IP6_FRAG_OFFSET_MASK);
 8011de6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011dea:	b29b      	uxth	r3, r3
 8011dec:	f023 0307 	bic.w	r3, r3, #7
 8011df0:	fa1f f883 	uxth.w	r8, r3
  u16_t fragment_offset = 0;
  u16_t last;
  u16_t poff = IP6_HLEN;

  identification++;
 8011df4:	4a6b      	ldr	r2, [pc, #428]	; (8011fa4 <ip6_frag+0x1d0>)
 8011df6:	6813      	ldr	r3, [r2, #0]
 8011df8:	3301      	adds	r3, #1
 8011dfa:	6013      	str	r3, [r2, #0]

  original_ip6hdr = (struct ip6_hdr *)p->payload;
 8011dfc:	686b      	ldr	r3, [r5, #4]
 8011dfe:	9304      	str	r3, [sp, #16]

  /* @todo we assume there are no options in the unfragmentable part (IPv6 header). */
  LWIP_ASSERT("p->tot_len >= IP6_HLEN", p->tot_len >= IP6_HLEN);
 8011e00:	892b      	ldrh	r3, [r5, #8]
 8011e02:	2b27      	cmp	r3, #39	; 0x27
 8011e04:	d945      	bls.n	8011e92 <ip6_frag+0xbe>
  left = (u16_t)(p->tot_len - IP6_HLEN);
 8011e06:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8011e0a:	f1a9 0928 	sub.w	r9, r9, #40	; 0x28
 8011e0e:	fa1f f989 	uxth.w	r9, r9
  u16_t poff = IP6_HLEN;
 8011e12:	2628      	movs	r6, #40	; 0x28
  u16_t fragment_offset = 0;
 8011e14:	f04f 0a00 	mov.w	sl, #0
  u16_t newpbuflen = 0;
 8011e18:	4654      	mov	r4, sl

  while (left) {
 8011e1a:	f1b9 0f00 	cmp.w	r9, #0
 8011e1e:	f000 80bb 	beq.w	8011f98 <ip6_frag+0x1c4>
    last = (left <= nfb);

    /* Fill this fragment */
    cop = last ? left : nfb;
 8011e22:	45c1      	cmp	r9, r8
 8011e24:	d93d      	bls.n	8011ea2 <ip6_frag+0xce>
 8011e26:	f8cd 8014 	str.w	r8, [sp, #20]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link, IPv6, and Fragment header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP6_HLEN + IP6_FRAG_HLEN, PBUF_RAM);
 8011e2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011e2e:	2130      	movs	r1, #48	; 0x30
 8011e30:	200e      	movs	r0, #14
 8011e32:	f7f6 fcdb 	bl	80087ec <pbuf_alloc>
    if (rambuf == NULL) {
 8011e36:	9003      	str	r0, [sp, #12]
 8011e38:	2800      	cmp	r0, #0
 8011e3a:	f000 80af 	beq.w	8011f9c <ip6_frag+0x1c8>
      IP6_FRAG_STATS_INC(ip6_frag.memerr);
      return ERR_MEM;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011e3e:	896b      	ldrh	r3, [r5, #10]
 8011e40:	2b27      	cmp	r3, #39	; 0x27
 8011e42:	d931      	bls.n	8011ea8 <ip6_frag+0xd4>
                (p->len >= (IP6_HLEN)));
    SMEMCPY(rambuf->payload, original_ip6hdr, IP6_HLEN);
 8011e44:	9904      	ldr	r1, [sp, #16]
 8011e46:	460b      	mov	r3, r1
 8011e48:	9a03      	ldr	r2, [sp, #12]
 8011e4a:	6852      	ldr	r2, [r2, #4]
 8011e4c:	3120      	adds	r1, #32
 8011e4e:	f8d3 e000 	ldr.w	lr, [r3]
 8011e52:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8011e56:	689f      	ldr	r7, [r3, #8]
 8011e58:	68d8      	ldr	r0, [r3, #12]
 8011e5a:	f8c2 e000 	str.w	lr, [r2]
 8011e5e:	f8c2 c004 	str.w	ip, [r2, #4]
 8011e62:	6097      	str	r7, [r2, #8]
 8011e64:	60d0      	str	r0, [r2, #12]
 8011e66:	3310      	adds	r3, #16
 8011e68:	3210      	adds	r2, #16
 8011e6a:	428b      	cmp	r3, r1
 8011e6c:	d1ef      	bne.n	8011e4e <ip6_frag+0x7a>
 8011e6e:	6819      	ldr	r1, [r3, #0]
 8011e70:	685b      	ldr	r3, [r3, #4]
 8011e72:	6011      	str	r1, [r2, #0]
 8011e74:	6053      	str	r3, [r2, #4]
    ip6hdr = (struct ip6_hdr *)rambuf->payload;
 8011e76:	9b03      	ldr	r3, [sp, #12]
 8011e78:	f8d3 b004 	ldr.w	fp, [r3, #4]
    frag_hdr = (struct ip6_frag_hdr *)((u8_t*)rambuf->payload + IP6_HLEN);

    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
 8011e7c:	686b      	ldr	r3, [r5, #4]
 8011e7e:	4433      	add	r3, r6
 8011e80:	606b      	str	r3, [r5, #4]
    p->len = (u16_t)(p->len - poff);
 8011e82:	896b      	ldrh	r3, [r5, #10]
 8011e84:	1b9b      	subs	r3, r3, r6
 8011e86:	816b      	strh	r3, [r5, #10]
    p->tot_len = (u16_t)(p->tot_len - poff);
 8011e88:	892b      	ldrh	r3, [r5, #8]
 8011e8a:	1b9e      	subs	r6, r3, r6
 8011e8c:	812e      	strh	r6, [r5, #8]

    left_to_copy = cop;
 8011e8e:	9e05      	ldr	r6, [sp, #20]
    while (left_to_copy) {
 8011e90:	e02f      	b.n	8011ef2 <ip6_frag+0x11e>
  LWIP_ASSERT("p->tot_len >= IP6_HLEN", p->tot_len >= IP6_HLEN);
 8011e92:	4b45      	ldr	r3, [pc, #276]	; (8011fa8 <ip6_frag+0x1d4>)
 8011e94:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8011e98:	4944      	ldr	r1, [pc, #272]	; (8011fac <ip6_frag+0x1d8>)
 8011e9a:	4845      	ldr	r0, [pc, #276]	; (8011fb0 <ip6_frag+0x1dc>)
 8011e9c:	f002 fbaa 	bl	80145f4 <iprintf>
 8011ea0:	e7b1      	b.n	8011e06 <ip6_frag+0x32>
    cop = last ? left : nfb;
 8011ea2:	f8cd 9014 	str.w	r9, [sp, #20]
 8011ea6:	e7c0      	b.n	8011e2a <ip6_frag+0x56>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011ea8:	4b3f      	ldr	r3, [pc, #252]	; (8011fa8 <ip6_frag+0x1d4>)
 8011eaa:	f44f 7244 	mov.w	r2, #784	; 0x310
 8011eae:	4941      	ldr	r1, [pc, #260]	; (8011fb4 <ip6_frag+0x1e0>)
 8011eb0:	483f      	ldr	r0, [pc, #252]	; (8011fb0 <ip6_frag+0x1dc>)
 8011eb2:	f002 fb9f 	bl	80145f4 <iprintf>
 8011eb6:	e7c5      	b.n	8011e44 <ip6_frag+0x70>
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
        p = p->next;
        continue;
      }
      pcr = ip6_frag_alloc_pbuf_custom_ref();
 8011eb8:	f7ff fd6e 	bl	8011998 <ip6_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 8011ebc:	4607      	mov	r7, r0
 8011ebe:	b310      	cbz	r0, 8011f06 <ip6_frag+0x132>
        pbuf_free(rambuf);
        IP6_FRAG_STATS_INC(ip6_frag.memerr);
        return ERR_MEM;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc, p->payload, newpbuflen);
 8011ec0:	686b      	ldr	r3, [r5, #4]
 8011ec2:	9401      	str	r4, [sp, #4]
 8011ec4:	9300      	str	r3, [sp, #0]
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	2241      	movs	r2, #65	; 0x41
 8011eca:	4621      	mov	r1, r4
 8011ecc:	2000      	movs	r0, #0
 8011ece:	f7f6 fbbd 	bl	800864c <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8011ed2:	9002      	str	r0, [sp, #8]
 8011ed4:	b1f8      	cbz	r0, 8011f16 <ip6_frag+0x142>
        ip6_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        IP6_FRAG_STATS_INC(ip6_frag.memerr);
        return ERR_MEM;
      }
      pbuf_ref(p);
 8011ed6:	4628      	mov	r0, r5
 8011ed8:	f7f6 fd94 	bl	8008a04 <pbuf_ref>
      pcr->original = p;
 8011edc:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ip6_frag_free_pbuf_custom;
 8011ede:	4b36      	ldr	r3, [pc, #216]	; (8011fb8 <ip6_frag+0x1e4>)
 8011ee0:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011ee2:	9902      	ldr	r1, [sp, #8]
 8011ee4:	9803      	ldr	r0, [sp, #12]
 8011ee6:	f7f6 fda5 	bl	8008a34 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011eea:	1b36      	subs	r6, r6, r4
 8011eec:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 8011eee:	b106      	cbz	r6, 8011ef2 <ip6_frag+0x11e>
        p = p->next;
 8011ef0:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 8011ef2:	b1ce      	cbz	r6, 8011f28 <ip6_frag+0x154>
      newpbuflen = (left_to_copy < p->len) ? left_to_copy : p->len;
 8011ef4:	896c      	ldrh	r4, [r5, #10]
 8011ef6:	42b4      	cmp	r4, r6
 8011ef8:	bf28      	it	cs
 8011efa:	4634      	movcs	r4, r6
 8011efc:	b2a4      	uxth	r4, r4
      if (!newpbuflen) {
 8011efe:	2c00      	cmp	r4, #0
 8011f00:	d1da      	bne.n	8011eb8 <ip6_frag+0xe4>
        p = p->next;
 8011f02:	682d      	ldr	r5, [r5, #0]
        continue;
 8011f04:	e7f5      	b.n	8011ef2 <ip6_frag+0x11e>
        pbuf_free(rambuf);
 8011f06:	9803      	ldr	r0, [sp, #12]
 8011f08:	f7f6 fc0e 	bl	8008728 <pbuf_free>
        return ERR_MEM;
 8011f0c:	f04f 30ff 	mov.w	r0, #4294967295
    pbuf_free(rambuf);
    left = (u16_t)(left - cop);
    fragment_offset = (u16_t)(fragment_offset + cop);
  }
  return ERR_OK;
}
 8011f10:	b009      	add	sp, #36	; 0x24
 8011f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip6_frag_free_pbuf_custom_ref(pcr);
 8011f16:	4638      	mov	r0, r7
 8011f18:	f7ff fd0e 	bl	8011938 <ip6_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011f1c:	9803      	ldr	r0, [sp, #12]
 8011f1e:	f7f6 fc03 	bl	8008728 <pbuf_free>
        return ERR_MEM;
 8011f22:	f04f 30ff 	mov.w	r0, #4294967295
 8011f26:	e7f3      	b.n	8011f10 <ip6_frag+0x13c>
    frag_hdr->_nexth = original_ip6hdr->_nexth;
 8011f28:	9b04      	ldr	r3, [sp, #16]
 8011f2a:	799b      	ldrb	r3, [r3, #6]
 8011f2c:	f88b 3028 	strb.w	r3, [fp, #40]	; 0x28
    frag_hdr->reserved = 0;
 8011f30:	2300      	movs	r3, #0
 8011f32:	f88b 3029 	strb.w	r3, [fp, #41]	; 0x29
    frag_hdr->_fragment_offset = lwip_htons((u16_t)((fragment_offset & IP6_FRAG_OFFSET_MASK) | (last ? 0 : IP6_FRAG_MORE_FLAG)));
 8011f36:	f02a 0007 	bic.w	r0, sl, #7
 8011f3a:	b200      	sxth	r0, r0
 8011f3c:	45c1      	cmp	r9, r8
 8011f3e:	bf88      	it	hi
 8011f40:	f040 0001 	orrhi.w	r0, r0, #1
 8011f44:	b280      	uxth	r0, r0
 8011f46:	f7f5 f951 	bl	80071ec <lwip_htons>
 8011f4a:	f8ab 002a 	strh.w	r0, [fp, #42]	; 0x2a
    frag_hdr->_identification = lwip_htonl(identification);
 8011f4e:	4b15      	ldr	r3, [pc, #84]	; (8011fa4 <ip6_frag+0x1d0>)
 8011f50:	6818      	ldr	r0, [r3, #0]
 8011f52:	f7f5 f950 	bl	80071f6 <lwip_htonl>
 8011f56:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
    IP6H_NEXTH_SET(ip6hdr, IP6_NEXTH_FRAGMENT);
 8011f5a:	232c      	movs	r3, #44	; 0x2c
 8011f5c:	f88b 3006 	strb.w	r3, [fp, #6]
    IP6H_PLEN_SET(ip6hdr, (u16_t)(cop + IP6_FRAG_HLEN));
 8011f60:	9e05      	ldr	r6, [sp, #20]
 8011f62:	f106 0008 	add.w	r0, r6, #8
 8011f66:	b280      	uxth	r0, r0
 8011f68:	f7f5 f940 	bl	80071ec <lwip_htons>
 8011f6c:	f8ab 0004 	strh.w	r0, [fp, #4]
    netif->output_ip6(netif, rambuf, dest);
 8011f70:	9806      	ldr	r0, [sp, #24]
 8011f72:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 8011f76:	9a07      	ldr	r2, [sp, #28]
 8011f78:	9f03      	ldr	r7, [sp, #12]
 8011f7a:	4639      	mov	r1, r7
 8011f7c:	4798      	blx	r3
    pbuf_free(rambuf);
 8011f7e:	4638      	mov	r0, r7
 8011f80:	f7f6 fbd2 	bl	8008728 <pbuf_free>
    left = (u16_t)(left - cop);
 8011f84:	eba9 0906 	sub.w	r9, r9, r6
 8011f88:	fa1f f989 	uxth.w	r9, r9
    fragment_offset = (u16_t)(fragment_offset + cop);
 8011f8c:	eb0a 0306 	add.w	r3, sl, r6
 8011f90:	fa1f fa83 	uxth.w	sl, r3
    poff = newpbuflen;
 8011f94:	4626      	mov	r6, r4
 8011f96:	e740      	b.n	8011e1a <ip6_frag+0x46>
  return ERR_OK;
 8011f98:	2000      	movs	r0, #0
 8011f9a:	e7b9      	b.n	8011f10 <ip6_frag+0x13c>
      return ERR_MEM;
 8011f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8011fa0:	e7b6      	b.n	8011f10 <ip6_frag+0x13c>
 8011fa2:	bf00      	nop
 8011fa4:	2000188c 	.word	0x2000188c
 8011fa8:	08018654 	.word	0x08018654
 8011fac:	08018590 	.word	0x08018590
 8011fb0:	08015608 	.word	0x08015608
 8011fb4:	08018294 	.word	0x08018294
 8011fb8:	08011965 	.word	0x08011965

08011fbc <mld6_remove_group>:
mld6_remove_group(struct netif *netif, struct mld_group *group)
{
  err_t err = ERR_OK;

  /* Is it the first group? */
  if (netif_mld6_data(netif) == group) {
 8011fbc:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 8011fc0:	428b      	cmp	r3, r1
 8011fc2:	d005      	beq.n	8011fd0 <mld6_remove_group+0x14>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_MLD6, group->next);
  } else {
    /* look for group further down the list */
    struct mld_group *tmpGroup;
    for (tmpGroup = netif_mld6_data(netif); tmpGroup != NULL; tmpGroup = tmpGroup->next) {
 8011fc4:	b15b      	cbz	r3, 8011fde <mld6_remove_group+0x22>
      if (tmpGroup->next == group) {
 8011fc6:	681a      	ldr	r2, [r3, #0]
 8011fc8:	428a      	cmp	r2, r1
 8011fca:	d006      	beq.n	8011fda <mld6_remove_group+0x1e>
    for (tmpGroup = netif_mld6_data(netif); tmpGroup != NULL; tmpGroup = tmpGroup->next) {
 8011fcc:	4613      	mov	r3, r2
 8011fce:	e7f9      	b.n	8011fc4 <mld6_remove_group+0x8>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_MLD6, group->next);
 8011fd0:	680b      	ldr	r3, [r1, #0]
 8011fd2:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
  err_t err = ERR_OK;
 8011fd6:	2000      	movs	r0, #0
 8011fd8:	4770      	bx	lr
        tmpGroup->next = group->next;
 8011fda:	680a      	ldr	r2, [r1, #0]
 8011fdc:	601a      	str	r2, [r3, #0]
        break;
      }
    }
    /* Group not find group */
    if (tmpGroup == NULL) {
 8011fde:	b10b      	cbz	r3, 8011fe4 <mld6_remove_group+0x28>
  err_t err = ERR_OK;
 8011fe0:	2000      	movs	r0, #0
 8011fe2:	4770      	bx	lr
      err = ERR_ARG;
 8011fe4:	f06f 000f 	mvn.w	r0, #15
    }
  }

  return err;
}
 8011fe8:	4770      	bx	lr
	...

08011fec <mld6_delayed_report>:
 *              should be sent
 * @param maxresp_in the max resp delay provided in the query
 */
static void
mld6_delayed_report(struct mld_group *group, u16_t maxresp_in)
{
 8011fec:	b538      	push	{r3, r4, r5, lr}
 8011fee:	4605      	mov	r5, r0
  /* Convert maxresp from milliseconds to tmr ticks */
  u16_t maxresp = maxresp_in / MLD6_TMR_INTERVAL;
 8011ff0:	4c0d      	ldr	r4, [pc, #52]	; (8012028 <mld6_delayed_report+0x3c>)
 8011ff2:	fba4 3401 	umull	r3, r4, r4, r1
  if (maxresp == 0) {
 8011ff6:	0964      	lsrs	r4, r4, #5
 8011ff8:	d100      	bne.n	8011ffc <mld6_delayed_report+0x10>
    maxresp = 1;
 8011ffa:	2401      	movs	r4, #1
  }

#ifdef LWIP_RAND
  /* Randomize maxresp. (if LWIP_RAND is supported) */
  maxresp = (u16_t)(LWIP_RAND() % maxresp);
 8011ffc:	f002 fb76 	bl	80146ec <rand>
 8012000:	fbb0 f1f4 	udiv	r1, r0, r4
 8012004:	fb04 0411 	mls	r4, r4, r1, r0
 8012008:	b2a4      	uxth	r4, r4
  if (maxresp == 0) {
 801200a:	b904      	cbnz	r4, 801200e <mld6_delayed_report+0x22>
    maxresp = 1;
 801200c:	2401      	movs	r4, #1
  }
#endif /* LWIP_RAND */

  /* Apply timer value if no report has been scheduled already. */
  if ((group->group_state == MLD6_GROUP_IDLE_MEMBER) ||
 801200e:	7d6b      	ldrb	r3, [r5, #21]
 8012010:	2b02      	cmp	r3, #2
 8012012:	d005      	beq.n	8012020 <mld6_delayed_report+0x34>
 8012014:	2b01      	cmp	r3, #1
 8012016:	d106      	bne.n	8012026 <mld6_delayed_report+0x3a>
     ((group->group_state == MLD6_GROUP_DELAYING_MEMBER) &&
      ((group->timer == 0) || (maxresp < group->timer)))) {
 8012018:	8aeb      	ldrh	r3, [r5, #22]
     ((group->group_state == MLD6_GROUP_DELAYING_MEMBER) &&
 801201a:	b10b      	cbz	r3, 8012020 <mld6_delayed_report+0x34>
      ((group->timer == 0) || (maxresp < group->timer)))) {
 801201c:	42a3      	cmp	r3, r4
 801201e:	d902      	bls.n	8012026 <mld6_delayed_report+0x3a>
    group->timer = maxresp;
 8012020:	82ec      	strh	r4, [r5, #22]
    group->group_state = MLD6_GROUP_DELAYING_MEMBER;
 8012022:	2301      	movs	r3, #1
 8012024:	756b      	strb	r3, [r5, #21]
  }
}
 8012026:	bd38      	pop	{r3, r4, r5, pc}
 8012028:	51eb851f 	.word	0x51eb851f

0801202c <mld6_new_group>:
{
 801202c:	b538      	push	{r3, r4, r5, lr}
 801202e:	4605      	mov	r5, r0
 8012030:	460c      	mov	r4, r1
  group = (struct mld_group *)memp_malloc(MEMP_MLD6_GROUP);
 8012032:	200a      	movs	r0, #10
 8012034:	f7f5 ff18 	bl	8007e68 <memp_malloc>
  if (group != NULL) {
 8012038:	4603      	mov	r3, r0
 801203a:	b1b0      	cbz	r0, 801206a <mld6_new_group+0x3e>
    ip6_addr_set(&(group->group_address), addr);
 801203c:	b1bc      	cbz	r4, 801206e <mld6_new_group+0x42>
 801203e:	6822      	ldr	r2, [r4, #0]
 8012040:	605a      	str	r2, [r3, #4]
 8012042:	b1b4      	cbz	r4, 8012072 <mld6_new_group+0x46>
 8012044:	6862      	ldr	r2, [r4, #4]
 8012046:	609a      	str	r2, [r3, #8]
 8012048:	b1ac      	cbz	r4, 8012076 <mld6_new_group+0x4a>
 801204a:	68a2      	ldr	r2, [r4, #8]
 801204c:	60da      	str	r2, [r3, #12]
 801204e:	b1a4      	cbz	r4, 801207a <mld6_new_group+0x4e>
 8012050:	68e2      	ldr	r2, [r4, #12]
 8012052:	611a      	str	r2, [r3, #16]
    group->timer              = 0; /* Not running */
 8012054:	2200      	movs	r2, #0
 8012056:	82da      	strh	r2, [r3, #22]
    group->group_state        = MLD6_GROUP_IDLE_MEMBER;
 8012058:	2102      	movs	r1, #2
 801205a:	7559      	strb	r1, [r3, #21]
    group->last_reporter_flag = 0;
 801205c:	751a      	strb	r2, [r3, #20]
    group->use                = 0;
 801205e:	761a      	strb	r2, [r3, #24]
    group->next               = netif_mld6_data(ifp);
 8012060:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
 8012064:	601a      	str	r2, [r3, #0]
    netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_MLD6, group);
 8012066:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
}
 801206a:	4618      	mov	r0, r3
 801206c:	bd38      	pop	{r3, r4, r5, pc}
    ip6_addr_set(&(group->group_address), addr);
 801206e:	2200      	movs	r2, #0
 8012070:	e7e6      	b.n	8012040 <mld6_new_group+0x14>
 8012072:	2200      	movs	r2, #0
 8012074:	e7e7      	b.n	8012046 <mld6_new_group+0x1a>
 8012076:	2200      	movs	r2, #0
 8012078:	e7e8      	b.n	801204c <mld6_new_group+0x20>
 801207a:	2200      	movs	r2, #0
 801207c:	e7e9      	b.n	8012052 <mld6_new_group+0x26>
	...

08012080 <mld6_send>:
 * @param group the group to report or quit
 * @param type ICMP6_TYPE_MLR (report) or ICMP6_TYPE_MLD (done)
 */
static void
mld6_send(struct netif *netif, struct mld_group *group, u8_t type)
{
 8012080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012084:	b084      	sub	sp, #16
 8012086:	4606      	mov	r6, r0
 8012088:	460d      	mov	r5, r1
 801208a:	4690      	mov	r8, r2
  struct mld_header *mld_hdr;
  struct pbuf *p;
  const ip6_addr_t *src_addr;

  /* Allocate a packet. Size is MLD header + IPv6 Hop-by-hop options header. */
  p = pbuf_alloc(PBUF_IP, sizeof(struct mld_header) + MLD6_HBH_HLEN, PBUF_RAM);
 801208c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012090:	2120      	movs	r1, #32
 8012092:	2036      	movs	r0, #54	; 0x36
 8012094:	f7f6 fbaa 	bl	80087ec <pbuf_alloc>
  if (p == NULL) {
 8012098:	2800      	cmp	r0, #0
 801209a:	d047      	beq.n	801212c <mld6_send+0xac>
 801209c:	4604      	mov	r4, r0
    MLD6_STATS_INC(mld6.memerr);
    return;
  }

  /* Move to make room for Hop-by-hop options header. */
  if (pbuf_remove_header(p, MLD6_HBH_HLEN)) {
 801209e:	2108      	movs	r1, #8
 80120a0:	f7f6 fafc 	bl	800869c <pbuf_remove_header>
 80120a4:	bb58      	cbnz	r0, 80120fe <mld6_send+0x7e>
    MLD6_STATS_INC(mld6.lenerr);
    return;
  }

  /* Select our source address. */
  if (!ip6_addr_isvalid(netif_ip6_addr_state(netif, 0))) {
 80120a6:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
 80120aa:	f013 0f10 	tst.w	r3, #16
 80120ae:	d02a      	beq.n	8012106 <mld6_send+0x86>
    /* This is a special case, when we are performing duplicate address detection.
     * We must join the multicast group, but we don't have a valid address yet. */
    src_addr = IP6_ADDR_ANY6;
  } else {
    /* Use link-local address as source address. */
    src_addr = netif_ip6_addr(netif, 0);
 80120b0:	f106 073c 	add.w	r7, r6, #60	; 0x3c
  }

  /* MLD message header pointer. */
  mld_hdr = (struct mld_header *)p->payload;
 80120b4:	6863      	ldr	r3, [r4, #4]

  /* Set fields. */
  mld_hdr->type = type;
 80120b6:	f883 8000 	strb.w	r8, [r3]
  mld_hdr->code = 0;
 80120ba:	2200      	movs	r2, #0
 80120bc:	705a      	strb	r2, [r3, #1]
  mld_hdr->chksum = 0;
 80120be:	709a      	strb	r2, [r3, #2]
 80120c0:	70da      	strb	r2, [r3, #3]
  mld_hdr->max_resp_delay = 0;
 80120c2:	711a      	strb	r2, [r3, #4]
 80120c4:	715a      	strb	r2, [r3, #5]
  mld_hdr->reserved = 0;
 80120c6:	719a      	strb	r2, [r3, #6]
 80120c8:	71da      	strb	r2, [r3, #7]
  ip6_addr_copy_to_packed(mld_hdr->multicast_address, group->group_address);
 80120ca:	6869      	ldr	r1, [r5, #4]
 80120cc:	6099      	str	r1, [r3, #8]
 80120ce:	68a9      	ldr	r1, [r5, #8]
 80120d0:	60d9      	str	r1, [r3, #12]
 80120d2:	68e9      	ldr	r1, [r5, #12]
 80120d4:	6119      	str	r1, [r3, #16]
 80120d6:	6929      	ldr	r1, [r5, #16]
 80120d8:	6159      	str	r1, [r3, #20]
      src_addr, &(group->group_address));
  }
#endif /* CHECKSUM_GEN_ICMP6 */

  /* Add hop-by-hop headers options: router alert with MLD value. */
  ip6_options_add_hbh_ra(p, IP6_NEXTH_ICMP6, IP6_ROUTER_ALERT_VALUE_MLD);
 80120da:	213a      	movs	r1, #58	; 0x3a
 80120dc:	4620      	mov	r0, r4
 80120de:	f7ff fb63 	bl	80117a8 <ip6_options_add_hbh_ra>

  if (type == ICMP6_TYPE_MLR) {
 80120e2:	f1b8 0f83 	cmp.w	r8, #131	; 0x83
 80120e6:	d010      	beq.n	801210a <mld6_send+0x8a>
    group->last_reporter_flag = 1;
  }

  /* Send the packet out. */
  MLD6_STATS_INC(mld6.xmit);
  ip6_output_if(p, (ip6_addr_isany(src_addr)) ? NULL : src_addr, &(group->group_address),
 80120e8:	b197      	cbz	r7, 8012110 <mld6_send+0x90>
 80120ea:	683b      	ldr	r3, [r7, #0]
 80120ec:	b98b      	cbnz	r3, 8012112 <mld6_send+0x92>
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	b97b      	cbnz	r3, 8012112 <mld6_send+0x92>
 80120f2:	68bb      	ldr	r3, [r7, #8]
 80120f4:	b96b      	cbnz	r3, 8012112 <mld6_send+0x92>
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	b95b      	cbnz	r3, 8012112 <mld6_send+0x92>
 80120fa:	2700      	movs	r7, #0
 80120fc:	e009      	b.n	8012112 <mld6_send+0x92>
    pbuf_free(p);
 80120fe:	4620      	mov	r0, r4
 8012100:	f7f6 fb12 	bl	8008728 <pbuf_free>
    return;
 8012104:	e012      	b.n	801212c <mld6_send+0xac>
    src_addr = IP6_ADDR_ANY6;
 8012106:	4f0b      	ldr	r7, [pc, #44]	; (8012134 <mld6_send+0xb4>)
 8012108:	e7d4      	b.n	80120b4 <mld6_send+0x34>
    group->last_reporter_flag = 1;
 801210a:	2301      	movs	r3, #1
 801210c:	752b      	strb	r3, [r5, #20]
 801210e:	e7eb      	b.n	80120e8 <mld6_send+0x68>
  ip6_output_if(p, (ip6_addr_isany(src_addr)) ? NULL : src_addr, &(group->group_address),
 8012110:	2700      	movs	r7, #0
 8012112:	9602      	str	r6, [sp, #8]
 8012114:	2300      	movs	r3, #0
 8012116:	9301      	str	r3, [sp, #4]
 8012118:	9300      	str	r3, [sp, #0]
 801211a:	2301      	movs	r3, #1
 801211c:	1d2a      	adds	r2, r5, #4
 801211e:	4639      	mov	r1, r7
 8012120:	4620      	mov	r0, r4
 8012122:	f7ff fb0b 	bl	801173c <ip6_output_if>
      MLD6_HL, 0, IP6_NEXTH_HOPBYHOP, netif);
  pbuf_free(p);
 8012126:	4620      	mov	r0, r4
 8012128:	f7f6 fafe 	bl	8008728 <pbuf_free>
}
 801212c:	b004      	add	sp, #16
 801212e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012132:	bf00      	nop
 8012134:	0801857c 	.word	0x0801857c

08012138 <mld6_report_groups>:
{
 8012138:	b510      	push	{r4, lr}
  struct mld_group *group = netif_mld6_data(netif);
 801213a:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
  while (group != NULL) {
 801213e:	e005      	b.n	801214c <mld6_report_groups+0x14>
    mld6_delayed_report(group, MLD6_JOIN_DELAYING_MEMBER_TMR_MS);
 8012140:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8012144:	4620      	mov	r0, r4
 8012146:	f7ff ff51 	bl	8011fec <mld6_delayed_report>
    group = group->next;
 801214a:	6824      	ldr	r4, [r4, #0]
  while (group != NULL) {
 801214c:	2c00      	cmp	r4, #0
 801214e:	d1f7      	bne.n	8012140 <mld6_report_groups+0x8>
}
 8012150:	bd10      	pop	{r4, pc}

08012152 <mld6_lookfor_group>:
  struct mld_group *group = netif_mld6_data(ifp);
 8012152:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
  while (group != NULL) {
 8012156:	e000      	b.n	801215a <mld6_lookfor_group+0x8>
    group = group->next;
 8012158:	6800      	ldr	r0, [r0, #0]
  while (group != NULL) {
 801215a:	b178      	cbz	r0, 801217c <mld6_lookfor_group+0x2a>
    if (ip6_addr_cmp(&(group->group_address), addr)) {
 801215c:	6842      	ldr	r2, [r0, #4]
 801215e:	680b      	ldr	r3, [r1, #0]
 8012160:	429a      	cmp	r2, r3
 8012162:	d1f9      	bne.n	8012158 <mld6_lookfor_group+0x6>
 8012164:	6882      	ldr	r2, [r0, #8]
 8012166:	684b      	ldr	r3, [r1, #4]
 8012168:	429a      	cmp	r2, r3
 801216a:	d1f5      	bne.n	8012158 <mld6_lookfor_group+0x6>
 801216c:	68c2      	ldr	r2, [r0, #12]
 801216e:	688b      	ldr	r3, [r1, #8]
 8012170:	429a      	cmp	r2, r3
 8012172:	d1f1      	bne.n	8012158 <mld6_lookfor_group+0x6>
 8012174:	6902      	ldr	r2, [r0, #16]
 8012176:	68cb      	ldr	r3, [r1, #12]
 8012178:	429a      	cmp	r2, r3
 801217a:	d1ed      	bne.n	8012158 <mld6_lookfor_group+0x6>
}
 801217c:	4770      	bx	lr
	...

08012180 <mld6_input>:
{
 8012180:	b570      	push	{r4, r5, r6, lr}
 8012182:	4604      	mov	r4, r0
  if (p->len < sizeof(struct mld_header)) {
 8012184:	8943      	ldrh	r3, [r0, #10]
 8012186:	2b17      	cmp	r3, #23
 8012188:	d90a      	bls.n	80121a0 <mld6_input+0x20>
 801218a:	4608      	mov	r0, r1
  mld_hdr = (struct mld_header *)p->payload;
 801218c:	6865      	ldr	r5, [r4, #4]
  switch (mld_hdr->type) {
 801218e:	782b      	ldrb	r3, [r5, #0]
 8012190:	2b82      	cmp	r3, #130	; 0x82
 8012192:	d008      	beq.n	80121a6 <mld6_input+0x26>
 8012194:	2b83      	cmp	r3, #131	; 0x83
 8012196:	d050      	beq.n	801223a <mld6_input+0xba>
  pbuf_free(p);
 8012198:	4620      	mov	r0, r4
 801219a:	f7f6 fac5 	bl	8008728 <pbuf_free>
}
 801219e:	bd70      	pop	{r4, r5, r6, pc}
    pbuf_free(p);
 80121a0:	f7f6 fac2 	bl	8008728 <pbuf_free>
    return;
 80121a4:	e7fb      	b.n	801219e <mld6_input+0x1e>
    if (ip6_addr_isallnodes_linklocal(ip6_current_dest_addr()) &&
 80121a6:	4b2c      	ldr	r3, [pc, #176]	; (8012258 <mld6_input+0xd8>)
 80121a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80121aa:	f240 23ff 	movw	r3, #767	; 0x2ff
 80121ae:	429a      	cmp	r2, r3
 80121b0:	d10a      	bne.n	80121c8 <mld6_input+0x48>
 80121b2:	4b29      	ldr	r3, [pc, #164]	; (8012258 <mld6_input+0xd8>)
 80121b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121b6:	b93b      	cbnz	r3, 80121c8 <mld6_input+0x48>
 80121b8:	4b27      	ldr	r3, [pc, #156]	; (8012258 <mld6_input+0xd8>)
 80121ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121bc:	b923      	cbnz	r3, 80121c8 <mld6_input+0x48>
 80121be:	4b26      	ldr	r3, [pc, #152]	; (8012258 <mld6_input+0xd8>)
 80121c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80121c6:	d008      	beq.n	80121da <mld6_input+0x5a>
      group = mld6_lookfor_group(inp, ip6_current_dest_addr());
 80121c8:	4924      	ldr	r1, [pc, #144]	; (801225c <mld6_input+0xdc>)
 80121ca:	f7ff ffc2 	bl	8012152 <mld6_lookfor_group>
      if (group != NULL) {
 80121ce:	2800      	cmp	r0, #0
 80121d0:	d0e2      	beq.n	8012198 <mld6_input+0x18>
        mld6_delayed_report(group, mld_hdr->max_resp_delay);
 80121d2:	88a9      	ldrh	r1, [r5, #4]
 80121d4:	f7ff ff0a 	bl	8011fec <mld6_delayed_report>
 80121d8:	e7de      	b.n	8012198 <mld6_input+0x18>
    if (ip6_addr_isallnodes_linklocal(ip6_current_dest_addr()) &&
 80121da:	f115 0f08 	cmn.w	r5, #8
 80121de:	d00b      	beq.n	80121f8 <mld6_input+0x78>
        ip6_addr_isany(&(mld_hdr->multicast_address))) {
 80121e0:	68ab      	ldr	r3, [r5, #8]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d1f0      	bne.n	80121c8 <mld6_input+0x48>
 80121e6:	68eb      	ldr	r3, [r5, #12]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d1ed      	bne.n	80121c8 <mld6_input+0x48>
 80121ec:	692b      	ldr	r3, [r5, #16]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d1ea      	bne.n	80121c8 <mld6_input+0x48>
 80121f2:	696b      	ldr	r3, [r5, #20]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d1e7      	bne.n	80121c8 <mld6_input+0x48>
      group = netif_mld6_data(inp);
 80121f8:	f8d0 60b4 	ldr.w	r6, [r0, #180]	; 0xb4
      while (group != NULL) {
 80121fc:	e004      	b.n	8012208 <mld6_input+0x88>
          mld6_delayed_report(group, mld_hdr->max_resp_delay);
 80121fe:	88a9      	ldrh	r1, [r5, #4]
 8012200:	4630      	mov	r0, r6
 8012202:	f7ff fef3 	bl	8011fec <mld6_delayed_report>
        group = group->next;
 8012206:	6836      	ldr	r6, [r6, #0]
      while (group != NULL) {
 8012208:	2e00      	cmp	r6, #0
 801220a:	d0c5      	beq.n	8012198 <mld6_input+0x18>
        if ((!(ip6_addr_ismulticast_iflocal(&(group->group_address)))) &&
 801220c:	6873      	ldr	r3, [r6, #4]
 801220e:	f648 71ff 	movw	r1, #36863	; 0x8fff
 8012212:	4019      	ands	r1, r3
 8012214:	f240 12ff 	movw	r2, #511	; 0x1ff
 8012218:	4291      	cmp	r1, r2
 801221a:	d0f4      	beq.n	8012206 <mld6_input+0x86>
 801221c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8012220:	4293      	cmp	r3, r2
 8012222:	d1ec      	bne.n	80121fe <mld6_input+0x7e>
            (!(ip6_addr_isallnodes_linklocal(&(group->group_address))))) {
 8012224:	68b3      	ldr	r3, [r6, #8]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d1e9      	bne.n	80121fe <mld6_input+0x7e>
 801222a:	68f3      	ldr	r3, [r6, #12]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d1e6      	bne.n	80121fe <mld6_input+0x7e>
 8012230:	6933      	ldr	r3, [r6, #16]
 8012232:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012236:	d1e2      	bne.n	80121fe <mld6_input+0x7e>
 8012238:	e7e5      	b.n	8012206 <mld6_input+0x86>
    group = mld6_lookfor_group(inp, ip6_current_dest_addr());
 801223a:	4908      	ldr	r1, [pc, #32]	; (801225c <mld6_input+0xdc>)
 801223c:	f7ff ff89 	bl	8012152 <mld6_lookfor_group>
    if (group != NULL) {
 8012240:	2800      	cmp	r0, #0
 8012242:	d0a9      	beq.n	8012198 <mld6_input+0x18>
      if (group->group_state == MLD6_GROUP_DELAYING_MEMBER) {
 8012244:	7d42      	ldrb	r2, [r0, #21]
 8012246:	2a01      	cmp	r2, #1
 8012248:	d1a6      	bne.n	8012198 <mld6_input+0x18>
        group->timer = 0; /* stopped */
 801224a:	2200      	movs	r2, #0
 801224c:	82c2      	strh	r2, [r0, #22]
        group->group_state = MLD6_GROUP_IDLE_MEMBER;
 801224e:	2102      	movs	r1, #2
 8012250:	7541      	strb	r1, [r0, #21]
        group->last_reporter_flag = 0;
 8012252:	7502      	strb	r2, [r0, #20]
 8012254:	e7a0      	b.n	8012198 <mld6_input+0x18>
 8012256:	bf00      	nop
 8012258:	20004b84 	.word	0x20004b84
 801225c:	20004bac 	.word	0x20004bac

08012260 <mld6_joingroup_netif>:
{
 8012260:	b570      	push	{r4, r5, r6, lr}
 8012262:	4605      	mov	r5, r0
 8012264:	460e      	mov	r6, r1
  group = mld6_lookfor_group(netif, groupaddr);
 8012266:	f7ff ff74 	bl	8012152 <mld6_lookfor_group>
  if (group == NULL) {
 801226a:	4604      	mov	r4, r0
 801226c:	b120      	cbz	r0, 8012278 <mld6_joingroup_netif+0x18>
  group->use++;
 801226e:	7e23      	ldrb	r3, [r4, #24]
 8012270:	3301      	adds	r3, #1
 8012272:	7623      	strb	r3, [r4, #24]
  return ERR_OK;
 8012274:	2000      	movs	r0, #0
}
 8012276:	bd70      	pop	{r4, r5, r6, pc}
    group = mld6_new_group(netif, groupaddr);
 8012278:	4631      	mov	r1, r6
 801227a:	4628      	mov	r0, r5
 801227c:	f7ff fed6 	bl	801202c <mld6_new_group>
    if (group == NULL) {
 8012280:	4604      	mov	r4, r0
 8012282:	b188      	cbz	r0, 80122a8 <mld6_joingroup_netif+0x48>
    if (netif->mld_mac_filter != NULL) {
 8012284:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
 8012288:	b11b      	cbz	r3, 8012292 <mld6_joingroup_netif+0x32>
      netif->mld_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
 801228a:	2201      	movs	r2, #1
 801228c:	4631      	mov	r1, r6
 801228e:	4628      	mov	r0, r5
 8012290:	4798      	blx	r3
    mld6_send(netif, group, ICMP6_TYPE_MLR);
 8012292:	2283      	movs	r2, #131	; 0x83
 8012294:	4621      	mov	r1, r4
 8012296:	4628      	mov	r0, r5
 8012298:	f7ff fef2 	bl	8012080 <mld6_send>
    mld6_delayed_report(group, MLD6_JOIN_DELAYING_MEMBER_TMR_MS);
 801229c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80122a0:	4620      	mov	r0, r4
 80122a2:	f7ff fea3 	bl	8011fec <mld6_delayed_report>
 80122a6:	e7e2      	b.n	801226e <mld6_joingroup_netif+0xe>
      return ERR_MEM;
 80122a8:	f04f 30ff 	mov.w	r0, #4294967295
 80122ac:	e7e3      	b.n	8012276 <mld6_joingroup_netif+0x16>

080122ae <mld6_leavegroup_netif>:
{
 80122ae:	b570      	push	{r4, r5, r6, lr}
 80122b0:	4605      	mov	r5, r0
 80122b2:	460e      	mov	r6, r1
  group = mld6_lookfor_group(netif, groupaddr);
 80122b4:	f7ff ff4d 	bl	8012152 <mld6_lookfor_group>
  if (group != NULL) {
 80122b8:	b300      	cbz	r0, 80122fc <mld6_leavegroup_netif+0x4e>
 80122ba:	4604      	mov	r4, r0
    if (group->use <= 1) {
 80122bc:	7e03      	ldrb	r3, [r0, #24]
 80122be:	2b01      	cmp	r3, #1
 80122c0:	d903      	bls.n	80122ca <mld6_leavegroup_netif+0x1c>
      group->use--;
 80122c2:	3b01      	subs	r3, #1
 80122c4:	7603      	strb	r3, [r0, #24]
    return ERR_OK;
 80122c6:	2000      	movs	r0, #0
}
 80122c8:	bd70      	pop	{r4, r5, r6, pc}
      mld6_remove_group(netif, group);
 80122ca:	4601      	mov	r1, r0
 80122cc:	4628      	mov	r0, r5
 80122ce:	f7ff fe75 	bl	8011fbc <mld6_remove_group>
      if (group->last_reporter_flag) {
 80122d2:	7d23      	ldrb	r3, [r4, #20]
 80122d4:	b963      	cbnz	r3, 80122f0 <mld6_leavegroup_netif+0x42>
      if (netif->mld_mac_filter != NULL) {
 80122d6:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
 80122da:	b11b      	cbz	r3, 80122e4 <mld6_leavegroup_netif+0x36>
        netif->mld_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
 80122dc:	2200      	movs	r2, #0
 80122de:	4631      	mov	r1, r6
 80122e0:	4628      	mov	r0, r5
 80122e2:	4798      	blx	r3
      memp_free(MEMP_MLD6_GROUP, group);
 80122e4:	4621      	mov	r1, r4
 80122e6:	200a      	movs	r0, #10
 80122e8:	f7f5 fdd8 	bl	8007e9c <memp_free>
    return ERR_OK;
 80122ec:	2000      	movs	r0, #0
 80122ee:	e7eb      	b.n	80122c8 <mld6_leavegroup_netif+0x1a>
        mld6_send(netif, group, ICMP6_TYPE_MLD);
 80122f0:	2284      	movs	r2, #132	; 0x84
 80122f2:	4621      	mov	r1, r4
 80122f4:	4628      	mov	r0, r5
 80122f6:	f7ff fec3 	bl	8012080 <mld6_send>
 80122fa:	e7ec      	b.n	80122d6 <mld6_leavegroup_netif+0x28>
  return ERR_VAL;
 80122fc:	f06f 0005 	mvn.w	r0, #5
 8012300:	e7e2      	b.n	80122c8 <mld6_leavegroup_netif+0x1a>
	...

08012304 <mld6_tmr>:
{
 8012304:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8012306:	4b0e      	ldr	r3, [pc, #56]	; (8012340 <mld6_tmr+0x3c>)
 8012308:	681d      	ldr	r5, [r3, #0]
 801230a:	b1bd      	cbz	r5, 801233c <mld6_tmr+0x38>
    struct mld_group *group = netif_mld6_data(netif);
 801230c:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
    while (group != NULL) {
 8012310:	e000      	b.n	8012314 <mld6_tmr+0x10>
      group = group->next;
 8012312:	6824      	ldr	r4, [r4, #0]
    while (group != NULL) {
 8012314:	b194      	cbz	r4, 801233c <mld6_tmr+0x38>
      if (group->timer > 0) {
 8012316:	8ae3      	ldrh	r3, [r4, #22]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d0fa      	beq.n	8012312 <mld6_tmr+0xe>
        group->timer--;
 801231c:	3b01      	subs	r3, #1
 801231e:	b29b      	uxth	r3, r3
 8012320:	82e3      	strh	r3, [r4, #22]
        if (group->timer == 0) {
 8012322:	2b00      	cmp	r3, #0
 8012324:	d1f5      	bne.n	8012312 <mld6_tmr+0xe>
          if (group->group_state == MLD6_GROUP_DELAYING_MEMBER) {
 8012326:	7d63      	ldrb	r3, [r4, #21]
 8012328:	2b01      	cmp	r3, #1
 801232a:	d1f2      	bne.n	8012312 <mld6_tmr+0xe>
            mld6_send(netif, group, ICMP6_TYPE_MLR);
 801232c:	2283      	movs	r2, #131	; 0x83
 801232e:	4621      	mov	r1, r4
 8012330:	4628      	mov	r0, r5
 8012332:	f7ff fea5 	bl	8012080 <mld6_send>
            group->group_state = MLD6_GROUP_IDLE_MEMBER;
 8012336:	2302      	movs	r3, #2
 8012338:	7563      	strb	r3, [r4, #21]
 801233a:	e7ea      	b.n	8012312 <mld6_tmr+0xe>
}
 801233c:	bd38      	pop	{r3, r4, r5, pc}
 801233e:	bf00      	nop
 8012340:	20008c38 	.word	0x20008c38

08012344 <nd6_find_neighbor_cache_entry>:
 */
static s8_t
nd6_find_neighbor_cache_entry(const ip6_addr_t *ip6addr)
{
  s8_t i;
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8012344:	2300      	movs	r3, #0
 8012346:	2b09      	cmp	r3, #9
 8012348:	dc28      	bgt.n	801239c <nd6_find_neighbor_cache_entry+0x58>
{
 801234a:	b430      	push	{r4, r5}
 801234c:	e003      	b.n	8012356 <nd6_find_neighbor_cache_entry+0x12>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 801234e:	3301      	adds	r3, #1
 8012350:	b25b      	sxtb	r3, r3
 8012352:	2b09      	cmp	r3, #9
 8012354:	dc1d      	bgt.n	8012392 <nd6_find_neighbor_cache_entry+0x4e>
    if (ip6_addr_cmp(ip6addr, &(neighbor_cache[i].next_hop_address))) {
 8012356:	6804      	ldr	r4, [r0, #0]
 8012358:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801235c:	00ca      	lsls	r2, r1, #3
 801235e:	4911      	ldr	r1, [pc, #68]	; (80123a4 <nd6_find_neighbor_cache_entry+0x60>)
 8012360:	588a      	ldr	r2, [r1, r2]
 8012362:	4294      	cmp	r4, r2
 8012364:	d1f3      	bne.n	801234e <nd6_find_neighbor_cache_entry+0xa>
 8012366:	6844      	ldr	r4, [r0, #4]
 8012368:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801236c:	00d1      	lsls	r1, r2, #3
 801236e:	4a0d      	ldr	r2, [pc, #52]	; (80123a4 <nd6_find_neighbor_cache_entry+0x60>)
 8012370:	440a      	add	r2, r1
 8012372:	6852      	ldr	r2, [r2, #4]
 8012374:	4294      	cmp	r4, r2
 8012376:	d1ea      	bne.n	801234e <nd6_find_neighbor_cache_entry+0xa>
 8012378:	6884      	ldr	r4, [r0, #8]
 801237a:	4a0a      	ldr	r2, [pc, #40]	; (80123a4 <nd6_find_neighbor_cache_entry+0x60>)
 801237c:	440a      	add	r2, r1
 801237e:	6892      	ldr	r2, [r2, #8]
 8012380:	4294      	cmp	r4, r2
 8012382:	d1e4      	bne.n	801234e <nd6_find_neighbor_cache_entry+0xa>
 8012384:	68c4      	ldr	r4, [r0, #12]
 8012386:	4a07      	ldr	r2, [pc, #28]	; (80123a4 <nd6_find_neighbor_cache_entry+0x60>)
 8012388:	440a      	add	r2, r1
 801238a:	68d2      	ldr	r2, [r2, #12]
 801238c:	4294      	cmp	r4, r2
 801238e:	d1de      	bne.n	801234e <nd6_find_neighbor_cache_entry+0xa>
 8012390:	e001      	b.n	8012396 <nd6_find_neighbor_cache_entry+0x52>
      return i;
    }
  }
  return -1;
 8012392:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012396:	4618      	mov	r0, r3
 8012398:	bc30      	pop	{r4, r5}
 801239a:	4770      	bx	lr
  return -1;
 801239c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	4770      	bx	lr
 80123a4:	20008c94 	.word	0x20008c94

080123a8 <nd6_find_destination_cache_entry>:
{
  s16_t i;

  IP6_ADDR_ZONECHECK(ip6addr);

  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 80123a8:	2300      	movs	r3, #0
 80123aa:	2b09      	cmp	r3, #9
 80123ac:	dc28      	bgt.n	8012400 <nd6_find_destination_cache_entry+0x58>
{
 80123ae:	b430      	push	{r4, r5}
 80123b0:	e003      	b.n	80123ba <nd6_find_destination_cache_entry+0x12>
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 80123b2:	3301      	adds	r3, #1
 80123b4:	b21b      	sxth	r3, r3
 80123b6:	2b09      	cmp	r3, #9
 80123b8:	dc1d      	bgt.n	80123f6 <nd6_find_destination_cache_entry+0x4e>
    if (ip6_addr_cmp(ip6addr, &(destination_cache[i].destination_addr))) {
 80123ba:	6804      	ldr	r4, [r0, #0]
 80123bc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80123c0:	00ca      	lsls	r2, r1, #3
 80123c2:	4911      	ldr	r1, [pc, #68]	; (8012408 <nd6_find_destination_cache_entry+0x60>)
 80123c4:	588a      	ldr	r2, [r1, r2]
 80123c6:	4294      	cmp	r4, r2
 80123c8:	d1f3      	bne.n	80123b2 <nd6_find_destination_cache_entry+0xa>
 80123ca:	6844      	ldr	r4, [r0, #4]
 80123cc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80123d0:	00d1      	lsls	r1, r2, #3
 80123d2:	4a0d      	ldr	r2, [pc, #52]	; (8012408 <nd6_find_destination_cache_entry+0x60>)
 80123d4:	440a      	add	r2, r1
 80123d6:	6852      	ldr	r2, [r2, #4]
 80123d8:	4294      	cmp	r4, r2
 80123da:	d1ea      	bne.n	80123b2 <nd6_find_destination_cache_entry+0xa>
 80123dc:	6884      	ldr	r4, [r0, #8]
 80123de:	4a0a      	ldr	r2, [pc, #40]	; (8012408 <nd6_find_destination_cache_entry+0x60>)
 80123e0:	440a      	add	r2, r1
 80123e2:	6892      	ldr	r2, [r2, #8]
 80123e4:	4294      	cmp	r4, r2
 80123e6:	d1e4      	bne.n	80123b2 <nd6_find_destination_cache_entry+0xa>
 80123e8:	68c4      	ldr	r4, [r0, #12]
 80123ea:	4a07      	ldr	r2, [pc, #28]	; (8012408 <nd6_find_destination_cache_entry+0x60>)
 80123ec:	440a      	add	r2, r1
 80123ee:	68d2      	ldr	r2, [r2, #12]
 80123f0:	4294      	cmp	r4, r2
 80123f2:	d1de      	bne.n	80123b2 <nd6_find_destination_cache_entry+0xa>
 80123f4:	e001      	b.n	80123fa <nd6_find_destination_cache_entry+0x52>
      return i;
    }
  }
  return -1;
 80123f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	bc30      	pop	{r4, r5}
 80123fe:	4770      	bx	lr
  return -1;
 8012400:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012404:	4618      	mov	r0, r3
 8012406:	4770      	bx	lr
 8012408:	20008e9c 	.word	0x20008e9c

0801240c <nd6_new_destination_cache_entry>:
{
  s16_t i, j;
  u32_t age;

  /* Find an empty entry. */
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 801240c:	2000      	movs	r0, #0
 801240e:	e001      	b.n	8012414 <nd6_new_destination_cache_entry+0x8>
 8012410:	3001      	adds	r0, #1
 8012412:	b200      	sxth	r0, r0
 8012414:	2809      	cmp	r0, #9
 8012416:	dc19      	bgt.n	801244c <nd6_new_destination_cache_entry+0x40>
    if (ip6_addr_isany(&(destination_cache[i].destination_addr))) {
 8012418:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801241c:	00d3      	lsls	r3, r2, #3
 801241e:	4a14      	ldr	r2, [pc, #80]	; (8012470 <nd6_new_destination_cache_entry+0x64>)
 8012420:	58d3      	ldr	r3, [r2, r3]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d1f4      	bne.n	8012410 <nd6_new_destination_cache_entry+0x4>
 8012426:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801242a:	00da      	lsls	r2, r3, #3
 801242c:	4b10      	ldr	r3, [pc, #64]	; (8012470 <nd6_new_destination_cache_entry+0x64>)
 801242e:	4413      	add	r3, r2
 8012430:	685b      	ldr	r3, [r3, #4]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d1ec      	bne.n	8012410 <nd6_new_destination_cache_entry+0x4>
 8012436:	4b0e      	ldr	r3, [pc, #56]	; (8012470 <nd6_new_destination_cache_entry+0x64>)
 8012438:	4413      	add	r3, r2
 801243a:	689b      	ldr	r3, [r3, #8]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d1e7      	bne.n	8012410 <nd6_new_destination_cache_entry+0x4>
 8012440:	4b0b      	ldr	r3, [pc, #44]	; (8012470 <nd6_new_destination_cache_entry+0x64>)
 8012442:	4413      	add	r3, r2
 8012444:	68db      	ldr	r3, [r3, #12]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d1e2      	bne.n	8012410 <nd6_new_destination_cache_entry+0x4>
      j = i;
    }
  }

  return j;
}
 801244a:	4770      	bx	lr
  j = LWIP_ND6_NUM_DESTINATIONS - 1;
 801244c:	2009      	movs	r0, #9
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 801244e:	2300      	movs	r3, #0
 8012450:	e001      	b.n	8012456 <nd6_new_destination_cache_entry+0x4a>
 8012452:	3301      	adds	r3, #1
 8012454:	b21b      	sxth	r3, r3
 8012456:	2b09      	cmp	r3, #9
 8012458:	dcf7      	bgt.n	801244a <nd6_new_destination_cache_entry+0x3e>
    if (destination_cache[i].age > age) {
 801245a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801245e:	00d1      	lsls	r1, r2, #3
 8012460:	4a03      	ldr	r2, [pc, #12]	; (8012470 <nd6_new_destination_cache_entry+0x64>)
 8012462:	440a      	add	r2, r1
 8012464:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012466:	2a00      	cmp	r2, #0
 8012468:	d0f3      	beq.n	8012452 <nd6_new_destination_cache_entry+0x46>
      j = i;
 801246a:	4618      	mov	r0, r3
 801246c:	e7f1      	b.n	8012452 <nd6_new_destination_cache_entry+0x46>
 801246e:	bf00      	nop
 8012470:	20008e9c 	.word	0x20008e9c

08012474 <nd6_is_prefix_in_netif>:
 * @param ip6addr the IPv6 address to match
 * @return 1 if the address is on-link, 0 otherwise
 */
static int
nd6_is_prefix_in_netif(const ip6_addr_t *ip6addr, struct netif *netif)
{
 8012474:	b470      	push	{r4, r5, r6}
  s8_t i;

  /* Check to see if the address matches an on-link prefix. */
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
 8012476:	2300      	movs	r3, #0
 8012478:	e001      	b.n	801247e <nd6_is_prefix_in_netif+0xa>
 801247a:	3301      	adds	r3, #1
 801247c:	b25b      	sxtb	r3, r3
 801247e:	2b04      	cmp	r3, #4
 8012480:	dc22      	bgt.n	80124c8 <nd6_is_prefix_in_netif+0x54>
    if ((prefix_list[i].netif == netif) &&
 8012482:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012486:	00d4      	lsls	r4, r2, #3
 8012488:	4a25      	ldr	r2, [pc, #148]	; (8012520 <nd6_is_prefix_in_netif+0xac>)
 801248a:	4422      	add	r2, r4
 801248c:	6912      	ldr	r2, [r2, #16]
 801248e:	428a      	cmp	r2, r1
 8012490:	d1f3      	bne.n	801247a <nd6_is_prefix_in_netif+0x6>
        (prefix_list[i].invalidation_timer > 0) &&
 8012492:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8012496:	00e2      	lsls	r2, r4, #3
 8012498:	4c21      	ldr	r4, [pc, #132]	; (8012520 <nd6_is_prefix_in_netif+0xac>)
 801249a:	4414      	add	r4, r2
 801249c:	6962      	ldr	r2, [r4, #20]
    if ((prefix_list[i].netif == netif) &&
 801249e:	2a00      	cmp	r2, #0
 80124a0:	d0eb      	beq.n	801247a <nd6_is_prefix_in_netif+0x6>
        ip6_addr_netcmp(ip6addr, &(prefix_list[i].prefix))) {
 80124a2:	6806      	ldr	r6, [r0, #0]
 80124a4:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 80124a8:	00e2      	lsls	r2, r4, #3
 80124aa:	4c1d      	ldr	r4, [pc, #116]	; (8012520 <nd6_is_prefix_in_netif+0xac>)
 80124ac:	58a2      	ldr	r2, [r4, r2]
        (prefix_list[i].invalidation_timer > 0) &&
 80124ae:	4296      	cmp	r6, r2
 80124b0:	d1e3      	bne.n	801247a <nd6_is_prefix_in_netif+0x6>
        ip6_addr_netcmp(ip6addr, &(prefix_list[i].prefix))) {
 80124b2:	6844      	ldr	r4, [r0, #4]
 80124b4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80124b8:	00d5      	lsls	r5, r2, #3
 80124ba:	4a19      	ldr	r2, [pc, #100]	; (8012520 <nd6_is_prefix_in_netif+0xac>)
 80124bc:	442a      	add	r2, r5
 80124be:	6852      	ldr	r2, [r2, #4]
 80124c0:	4294      	cmp	r4, r2
 80124c2:	d1da      	bne.n	801247a <nd6_is_prefix_in_netif+0x6>
      return 1;
 80124c4:	2001      	movs	r0, #1
 80124c6:	e029      	b.n	801251c <nd6_is_prefix_in_netif+0xa8>
  }
  /* Check to see if address prefix matches a manually configured (= static)
   * address. Static addresses have an implied /64 subnet assignment. Dynamic
   * addresses (from autoconfiguration) have no implied subnet assignment, and
   * are thus effectively /128 assignments. See RFC 5942 for more on this. */
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80124c8:	2300      	movs	r3, #0
 80124ca:	e009      	b.n	80124e0 <nd6_is_prefix_in_netif+0x6c>
    if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
        netif_ip6_addr_isstatic(netif, i) &&
        ip6_addr_netcmp(ip6addr, netif_ip6_addr(netif, i))) {
 80124cc:	6806      	ldr	r6, [r0, #0]
 80124ce:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 80124d2:	00ac      	lsls	r4, r5, #2
 80124d4:	440c      	add	r4, r1
 80124d6:	6be4      	ldr	r4, [r4, #60]	; 0x3c
        netif_ip6_addr_isstatic(netif, i) &&
 80124d8:	42a6      	cmp	r6, r4
 80124da:	d014      	beq.n	8012506 <nd6_is_prefix_in_netif+0x92>
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80124dc:	3301      	adds	r3, #1
 80124de:	b25b      	sxtb	r3, r3
 80124e0:	2b02      	cmp	r3, #2
 80124e2:	dc1a      	bgt.n	801251a <nd6_is_prefix_in_netif+0xa6>
    if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 80124e4:	461a      	mov	r2, r3
 80124e6:	18cc      	adds	r4, r1, r3
 80124e8:	f894 4078 	ldrb.w	r4, [r4, #120]	; 0x78
 80124ec:	f014 0f10 	tst.w	r4, #16
 80124f0:	d0f4      	beq.n	80124dc <nd6_is_prefix_in_netif+0x68>
 80124f2:	2900      	cmp	r1, #0
 80124f4:	d0ea      	beq.n	80124cc <nd6_is_prefix_in_netif+0x58>
        netif_ip6_addr_isstatic(netif, i) &&
 80124f6:	f103 041e 	add.w	r4, r3, #30
 80124fa:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80124fe:	6864      	ldr	r4, [r4, #4]
 8012500:	2c00      	cmp	r4, #0
 8012502:	d1eb      	bne.n	80124dc <nd6_is_prefix_in_netif+0x68>
 8012504:	e7e2      	b.n	80124cc <nd6_is_prefix_in_netif+0x58>
        ip6_addr_netcmp(ip6addr, netif_ip6_addr(netif, i))) {
 8012506:	6845      	ldr	r5, [r0, #4]
 8012508:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801250c:	0094      	lsls	r4, r2, #2
 801250e:	440c      	add	r4, r1
 8012510:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8012512:	4295      	cmp	r5, r2
 8012514:	d1e2      	bne.n	80124dc <nd6_is_prefix_in_netif+0x68>
      return 1;
 8012516:	2001      	movs	r0, #1
 8012518:	e000      	b.n	801251c <nd6_is_prefix_in_netif+0xa8>
    }
  }
  return 0;
 801251a:	2000      	movs	r0, #0
}
 801251c:	bc70      	pop	{r4, r5, r6}
 801251e:	4770      	bx	lr
 8012520:	20008e24 	.word	0x20008e24

08012524 <nd6_select_router>:
 * @return the default router entry index, or -1 if no suitable
 *         router is found
 */
static s8_t
nd6_select_router(const ip6_addr_t *ip6addr, struct netif *netif)
{
 8012524:	b410      	push	{r4}
  LWIP_UNUSED_ARG(ip6addr); /* @todo match preferred routes!! (must implement ND6_OPTION_TYPE_ROUTE_INFO) */

  /* @todo: implement default router preference */

  /* Look for valid routers. A reachable router is preferred. */
  valid_router = -1;
 8012526:	f04f 30ff 	mov.w	r0, #4294967295
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 801252a:	2300      	movs	r3, #0
 801252c:	e00f      	b.n	801254e <nd6_select_router+0x2a>
    /* Is the router netif both set and apppropriate? */
    if (default_router_list[i].neighbor_entry != NULL) {
      router_netif = default_router_list[i].neighbor_entry->netif;
      if ((router_netif != NULL) && (netif != NULL ? netif == router_netif :
          (netif_is_up(router_netif) && netif_is_link_up(router_netif)))) {
 801252e:	f892 20c3 	ldrb.w	r2, [r2, #195]	; 0xc3
 8012532:	f012 0f01 	tst.w	r2, #1
 8012536:	d004      	beq.n	8012542 <nd6_select_router+0x1e>
 8012538:	f012 0f04 	tst.w	r2, #4
 801253c:	d103      	bne.n	8012546 <nd6_select_router+0x22>
 801253e:	2200      	movs	r2, #0
 8012540:	e017      	b.n	8012572 <nd6_select_router+0x4e>
 8012542:	2200      	movs	r2, #0
 8012544:	e015      	b.n	8012572 <nd6_select_router+0x4e>
 8012546:	2201      	movs	r2, #1
 8012548:	e013      	b.n	8012572 <nd6_select_router+0x4e>
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 801254a:	3301      	adds	r3, #1
 801254c:	b25b      	sxtb	r3, r3
 801254e:	2b02      	cmp	r3, #2
 8012550:	dc1b      	bgt.n	801258a <nd6_select_router+0x66>
    if (default_router_list[i].neighbor_entry != NULL) {
 8012552:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8012556:	00a2      	lsls	r2, r4, #2
 8012558:	4c2e      	ldr	r4, [pc, #184]	; (8012614 <nd6_select_router+0xf0>)
 801255a:	58a4      	ldr	r4, [r4, r2]
 801255c:	2c00      	cmp	r4, #0
 801255e:	d0f4      	beq.n	801254a <nd6_select_router+0x26>
      router_netif = default_router_list[i].neighbor_entry->netif;
 8012560:	6922      	ldr	r2, [r4, #16]
      if ((router_netif != NULL) && (netif != NULL ? netif == router_netif :
 8012562:	2a00      	cmp	r2, #0
 8012564:	d0f1      	beq.n	801254a <nd6_select_router+0x26>
 8012566:	2900      	cmp	r1, #0
 8012568:	d0e1      	beq.n	801252e <nd6_select_router+0xa>
 801256a:	4291      	cmp	r1, r2
 801256c:	bf14      	ite	ne
 801256e:	2200      	movne	r2, #0
 8012570:	2201      	moveq	r2, #1
 8012572:	2a00      	cmp	r2, #0
 8012574:	d0e9      	beq.n	801254a <nd6_select_router+0x26>
        /* Is the router valid, i.e., reachable or probably reachable as per
         * RFC 4861 Sec. 6.3.6? Note that we will never return a router that
         * has no neighbor cache entry, due to the netif association tests. */
        if (default_router_list[i].neighbor_entry->state != ND6_INCOMPLETE) {
 8012576:	f894 2020 	ldrb.w	r2, [r4, #32]
 801257a:	2a01      	cmp	r2, #1
 801257c:	d0e5      	beq.n	801254a <nd6_select_router+0x26>
          /* Is the router known to be reachable? */
          if (default_router_list[i].neighbor_entry->state == ND6_REACHABLE) {
 801257e:	2a02      	cmp	r2, #2
 8012580:	d045      	beq.n	801260e <nd6_select_router+0xea>
            return i; /* valid and reachable - done! */
          } else if (valid_router < 0) {
 8012582:	2800      	cmp	r0, #0
 8012584:	dae1      	bge.n	801254a <nd6_select_router+0x26>
            valid_router = i; /* valid but not known to be reachable */
 8012586:	4618      	mov	r0, r3
 8012588:	e7df      	b.n	801254a <nd6_select_router+0x26>
          }
        }
      }
    }
  }
  if (valid_router >= 0) {
 801258a:	2800      	cmp	r0, #0
 801258c:	db02      	blt.n	8012594 <nd6_select_router+0x70>
    }
  }

  /* no suitable router found. */
  return -1;
}
 801258e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012592:	4770      	bx	lr
  if ((netif == NULL) && (++last_router >= LWIP_ND6_NUM_ROUTERS)) {
 8012594:	b121      	cbz	r1, 80125a0 <nd6_select_router+0x7c>
  i = last_router;
 8012596:	4b20      	ldr	r3, [pc, #128]	; (8012618 <nd6_select_router+0xf4>)
 8012598:	f993 0000 	ldrsb.w	r0, [r3]
  for (j = 0; j < LWIP_ND6_NUM_ROUTERS; j++) {
 801259c:	2300      	movs	r3, #0
 801259e:	e01e      	b.n	80125de <nd6_select_router+0xba>
  if ((netif == NULL) && (++last_router >= LWIP_ND6_NUM_ROUTERS)) {
 80125a0:	4a1d      	ldr	r2, [pc, #116]	; (8012618 <nd6_select_router+0xf4>)
 80125a2:	7813      	ldrb	r3, [r2, #0]
 80125a4:	3301      	adds	r3, #1
 80125a6:	b25b      	sxtb	r3, r3
 80125a8:	7013      	strb	r3, [r2, #0]
 80125aa:	2b02      	cmp	r3, #2
 80125ac:	ddf3      	ble.n	8012596 <nd6_select_router+0x72>
    last_router = 0;
 80125ae:	4613      	mov	r3, r2
 80125b0:	2200      	movs	r2, #0
 80125b2:	701a      	strb	r2, [r3, #0]
 80125b4:	e7ef      	b.n	8012596 <nd6_select_router+0x72>
          (netif_is_up(router_netif) && netif_is_link_up(router_netif)))) {
 80125b6:	f892 20c3 	ldrb.w	r2, [r2, #195]	; 0xc3
 80125ba:	f012 0f01 	tst.w	r2, #1
 80125be:	d004      	beq.n	80125ca <nd6_select_router+0xa6>
 80125c0:	f012 0f04 	tst.w	r2, #4
 80125c4:	d11e      	bne.n	8012604 <nd6_select_router+0xe0>
 80125c6:	2200      	movs	r2, #0
 80125c8:	e000      	b.n	80125cc <nd6_select_router+0xa8>
 80125ca:	2200      	movs	r2, #0
      if ((router_netif != NULL) && (netif != NULL ? netif == router_netif :
 80125cc:	2a00      	cmp	r2, #0
 80125ce:	d1de      	bne.n	801258e <nd6_select_router+0x6a>
    if (++i >= LWIP_ND6_NUM_ROUTERS) {
 80125d0:	3001      	adds	r0, #1
 80125d2:	b240      	sxtb	r0, r0
 80125d4:	2802      	cmp	r0, #2
 80125d6:	dd00      	ble.n	80125da <nd6_select_router+0xb6>
      i = 0;
 80125d8:	2000      	movs	r0, #0
  for (j = 0; j < LWIP_ND6_NUM_ROUTERS; j++) {
 80125da:	3301      	adds	r3, #1
 80125dc:	b25b      	sxtb	r3, r3
 80125de:	2b02      	cmp	r3, #2
 80125e0:	dc12      	bgt.n	8012608 <nd6_select_router+0xe4>
    if (default_router_list[i].neighbor_entry != NULL) {
 80125e2:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 80125e6:	00a2      	lsls	r2, r4, #2
 80125e8:	4c0a      	ldr	r4, [pc, #40]	; (8012614 <nd6_select_router+0xf0>)
 80125ea:	58a2      	ldr	r2, [r4, r2]
 80125ec:	2a00      	cmp	r2, #0
 80125ee:	d0ef      	beq.n	80125d0 <nd6_select_router+0xac>
      router_netif = default_router_list[i].neighbor_entry->netif;
 80125f0:	6912      	ldr	r2, [r2, #16]
      if ((router_netif != NULL) && (netif != NULL ? netif == router_netif :
 80125f2:	2a00      	cmp	r2, #0
 80125f4:	d0ec      	beq.n	80125d0 <nd6_select_router+0xac>
 80125f6:	2900      	cmp	r1, #0
 80125f8:	d0dd      	beq.n	80125b6 <nd6_select_router+0x92>
 80125fa:	4291      	cmp	r1, r2
 80125fc:	bf14      	ite	ne
 80125fe:	2200      	movne	r2, #0
 8012600:	2201      	moveq	r2, #1
 8012602:	e7e3      	b.n	80125cc <nd6_select_router+0xa8>
          (netif_is_up(router_netif) && netif_is_link_up(router_netif)))) {
 8012604:	2201      	movs	r2, #1
 8012606:	e7e1      	b.n	80125cc <nd6_select_router+0xa8>
  return -1;
 8012608:	f04f 30ff 	mov.w	r0, #4294967295
 801260c:	e7bf      	b.n	801258e <nd6_select_router+0x6a>
            return i; /* valid and reachable - done! */
 801260e:	4618      	mov	r0, r3
 8012610:	e7bd      	b.n	801258e <nd6_select_router+0x6a>
 8012612:	bf00      	nop
 8012614:	2000902c 	.word	0x2000902c
 8012618:	20001898 	.word	0x20001898

0801261c <nd6_get_router>:
  s8_t i;

  IP6_ADDR_ZONECHECK_NETIF(router_addr, netif);

  /* Look for router. */
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 801261c:	2300      	movs	r3, #0
 801261e:	2b02      	cmp	r3, #2
 8012620:	dc28      	bgt.n	8012674 <nd6_get_router+0x58>
{
 8012622:	b430      	push	{r4, r5}
 8012624:	e007      	b.n	8012636 <nd6_get_router+0x1a>
    if ((default_router_list[i].neighbor_entry != NULL) &&
        ((netif != NULL) ? netif == default_router_list[i].neighbor_entry->netif : 1) &&
        ip6_addr_cmp(router_addr, &(default_router_list[i].neighbor_entry->next_hop_address))) {
 8012626:	6805      	ldr	r5, [r0, #0]
 8012628:	6814      	ldr	r4, [r2, #0]
        ((netif != NULL) ? netif == default_router_list[i].neighbor_entry->netif : 1) &&
 801262a:	42a5      	cmp	r5, r4
 801262c:	d010      	beq.n	8012650 <nd6_get_router+0x34>
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 801262e:	3301      	adds	r3, #1
 8012630:	b25b      	sxtb	r3, r3
 8012632:	2b02      	cmp	r3, #2
 8012634:	dc19      	bgt.n	801266a <nd6_get_router+0x4e>
    if ((default_router_list[i].neighbor_entry != NULL) &&
 8012636:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 801263a:	00a2      	lsls	r2, r4, #2
 801263c:	4c0f      	ldr	r4, [pc, #60]	; (801267c <nd6_get_router+0x60>)
 801263e:	58a2      	ldr	r2, [r4, r2]
 8012640:	2a00      	cmp	r2, #0
 8012642:	d0f4      	beq.n	801262e <nd6_get_router+0x12>
 8012644:	2900      	cmp	r1, #0
 8012646:	d0ee      	beq.n	8012626 <nd6_get_router+0xa>
        ((netif != NULL) ? netif == default_router_list[i].neighbor_entry->netif : 1) &&
 8012648:	6914      	ldr	r4, [r2, #16]
    if ((default_router_list[i].neighbor_entry != NULL) &&
 801264a:	428c      	cmp	r4, r1
 801264c:	d1ef      	bne.n	801262e <nd6_get_router+0x12>
 801264e:	e7ea      	b.n	8012626 <nd6_get_router+0xa>
        ip6_addr_cmp(router_addr, &(default_router_list[i].neighbor_entry->next_hop_address))) {
 8012650:	6845      	ldr	r5, [r0, #4]
 8012652:	6854      	ldr	r4, [r2, #4]
 8012654:	42a5      	cmp	r5, r4
 8012656:	d1ea      	bne.n	801262e <nd6_get_router+0x12>
 8012658:	6885      	ldr	r5, [r0, #8]
 801265a:	6894      	ldr	r4, [r2, #8]
 801265c:	42a5      	cmp	r5, r4
 801265e:	d1e6      	bne.n	801262e <nd6_get_router+0x12>
 8012660:	68c4      	ldr	r4, [r0, #12]
 8012662:	68d2      	ldr	r2, [r2, #12]
 8012664:	4294      	cmp	r4, r2
 8012666:	d1e2      	bne.n	801262e <nd6_get_router+0x12>
 8012668:	e001      	b.n	801266e <nd6_get_router+0x52>
      return i;
    }
  }

  /* router not found. */
  return -1;
 801266a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801266e:	4618      	mov	r0, r3
 8012670:	bc30      	pop	{r4, r5}
 8012672:	4770      	bx	lr
  return -1;
 8012674:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012678:	4618      	mov	r0, r3
 801267a:	4770      	bx	lr
 801267c:	2000902c 	.word	0x2000902c

08012680 <nd6_get_onlink_prefix>:
nd6_get_onlink_prefix(const ip6_addr_t *prefix, struct netif *netif)
{
  s8_t i;

  /* Look for prefix in list. */
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 8012680:	2300      	movs	r3, #0
 8012682:	2b04      	cmp	r3, #4
 8012684:	dc24      	bgt.n	80126d0 <nd6_get_onlink_prefix+0x50>
{
 8012686:	b430      	push	{r4, r5}
 8012688:	e003      	b.n	8012692 <nd6_get_onlink_prefix+0x12>
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 801268a:	3301      	adds	r3, #1
 801268c:	b25b      	sxtb	r3, r3
 801268e:	2b04      	cmp	r3, #4
 8012690:	dc19      	bgt.n	80126c6 <nd6_get_onlink_prefix+0x46>
    if ((ip6_addr_netcmp(&(prefix_list[i].prefix), prefix)) &&
 8012692:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8012696:	00e2      	lsls	r2, r4, #3
 8012698:	4c0f      	ldr	r4, [pc, #60]	; (80126d8 <nd6_get_onlink_prefix+0x58>)
 801269a:	58a4      	ldr	r4, [r4, r2]
 801269c:	6802      	ldr	r2, [r0, #0]
 801269e:	4294      	cmp	r4, r2
 80126a0:	d1f3      	bne.n	801268a <nd6_get_onlink_prefix+0xa>
 80126a2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80126a6:	00d4      	lsls	r4, r2, #3
 80126a8:	4a0b      	ldr	r2, [pc, #44]	; (80126d8 <nd6_get_onlink_prefix+0x58>)
 80126aa:	4422      	add	r2, r4
 80126ac:	6854      	ldr	r4, [r2, #4]
 80126ae:	6842      	ldr	r2, [r0, #4]
 80126b0:	4294      	cmp	r4, r2
 80126b2:	d1ea      	bne.n	801268a <nd6_get_onlink_prefix+0xa>
        (prefix_list[i].netif == netif)) {
 80126b4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 80126b8:	00ec      	lsls	r4, r5, #3
 80126ba:	4a07      	ldr	r2, [pc, #28]	; (80126d8 <nd6_get_onlink_prefix+0x58>)
 80126bc:	4422      	add	r2, r4
 80126be:	6912      	ldr	r2, [r2, #16]
    if ((ip6_addr_netcmp(&(prefix_list[i].prefix), prefix)) &&
 80126c0:	428a      	cmp	r2, r1
 80126c2:	d1e2      	bne.n	801268a <nd6_get_onlink_prefix+0xa>
 80126c4:	e001      	b.n	80126ca <nd6_get_onlink_prefix+0x4a>
      return i;
    }
  }

  /* Entry not available. */
  return -1;
 80126c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80126ca:	4618      	mov	r0, r3
 80126cc:	bc30      	pop	{r4, r5}
 80126ce:	4770      	bx	lr
  return -1;
 80126d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80126d4:	4618      	mov	r0, r3
 80126d6:	4770      	bx	lr
 80126d8:	20008e24 	.word	0x20008e24

080126dc <nd6_new_onlink_prefix>:
nd6_new_onlink_prefix(const ip6_addr_t *prefix, struct netif *netif)
{
  s8_t i;

  /* Create new entry. */
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 80126dc:	2300      	movs	r3, #0
 80126de:	2b04      	cmp	r3, #4
 80126e0:	dd12      	ble.n	8012708 <nd6_new_onlink_prefix+0x2c>
      return i;
    }
  }

  /* Entry not available. */
  return -1;
 80126e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	4770      	bx	lr
      ip6_addr_set(&(prefix_list[i].prefix), prefix);
 80126ea:	2400      	movs	r4, #0
 80126ec:	e022      	b.n	8012734 <nd6_new_onlink_prefix+0x58>
 80126ee:	2400      	movs	r4, #0
 80126f0:	e028      	b.n	8012744 <nd6_new_onlink_prefix+0x68>
 80126f2:	2400      	movs	r4, #0
 80126f4:	e02e      	b.n	8012754 <nd6_new_onlink_prefix+0x78>
 80126f6:	2100      	movs	r1, #0
 80126f8:	e034      	b.n	8012764 <nd6_new_onlink_prefix+0x88>
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 80126fa:	3301      	adds	r3, #1
 80126fc:	b25b      	sxtb	r3, r3
 80126fe:	2b04      	cmp	r3, #4
 8012700:	dd03      	ble.n	801270a <nd6_new_onlink_prefix+0x2e>
  return -1;
 8012702:	f04f 33ff 	mov.w	r3, #4294967295
 8012706:	e032      	b.n	801276e <nd6_new_onlink_prefix+0x92>
{
 8012708:	b430      	push	{r4, r5}
    if ((prefix_list[i].netif == NULL) ||
 801270a:	461a      	mov	r2, r3
 801270c:	4d19      	ldr	r5, [pc, #100]	; (8012774 <nd6_new_onlink_prefix+0x98>)
 801270e:	2418      	movs	r4, #24
 8012710:	fb04 5403 	mla	r4, r4, r3, r5
 8012714:	6924      	ldr	r4, [r4, #16]
 8012716:	b12c      	cbz	r4, 8012724 <nd6_new_onlink_prefix+0x48>
        (prefix_list[i].invalidation_timer == 0)) {
 8012718:	2418      	movs	r4, #24
 801271a:	fb04 5403 	mla	r4, r4, r3, r5
 801271e:	6964      	ldr	r4, [r4, #20]
    if ((prefix_list[i].netif == NULL) ||
 8012720:	2c00      	cmp	r4, #0
 8012722:	d1ea      	bne.n	80126fa <nd6_new_onlink_prefix+0x1e>
      prefix_list[i].netif = netif;
 8012724:	4d13      	ldr	r5, [pc, #76]	; (8012774 <nd6_new_onlink_prefix+0x98>)
 8012726:	2418      	movs	r4, #24
 8012728:	fb04 5402 	mla	r4, r4, r2, r5
 801272c:	6121      	str	r1, [r4, #16]
      ip6_addr_set(&(prefix_list[i].prefix), prefix);
 801272e:	2800      	cmp	r0, #0
 8012730:	d0db      	beq.n	80126ea <nd6_new_onlink_prefix+0xe>
 8012732:	6804      	ldr	r4, [r0, #0]
 8012734:	2118      	movs	r1, #24
 8012736:	fb01 f102 	mul.w	r1, r1, r2
 801273a:	4d0e      	ldr	r5, [pc, #56]	; (8012774 <nd6_new_onlink_prefix+0x98>)
 801273c:	506c      	str	r4, [r5, r1]
 801273e:	2800      	cmp	r0, #0
 8012740:	d0d5      	beq.n	80126ee <nd6_new_onlink_prefix+0x12>
 8012742:	6844      	ldr	r4, [r0, #4]
 8012744:	4d0b      	ldr	r5, [pc, #44]	; (8012774 <nd6_new_onlink_prefix+0x98>)
 8012746:	2118      	movs	r1, #24
 8012748:	fb01 5102 	mla	r1, r1, r2, r5
 801274c:	604c      	str	r4, [r1, #4]
 801274e:	2800      	cmp	r0, #0
 8012750:	d0cf      	beq.n	80126f2 <nd6_new_onlink_prefix+0x16>
 8012752:	6884      	ldr	r4, [r0, #8]
 8012754:	4d07      	ldr	r5, [pc, #28]	; (8012774 <nd6_new_onlink_prefix+0x98>)
 8012756:	2118      	movs	r1, #24
 8012758:	fb01 5102 	mla	r1, r1, r2, r5
 801275c:	608c      	str	r4, [r1, #8]
 801275e:	2800      	cmp	r0, #0
 8012760:	d0c9      	beq.n	80126f6 <nd6_new_onlink_prefix+0x1a>
 8012762:	68c1      	ldr	r1, [r0, #12]
 8012764:	4803      	ldr	r0, [pc, #12]	; (8012774 <nd6_new_onlink_prefix+0x98>)
 8012766:	2418      	movs	r4, #24
 8012768:	fb04 0202 	mla	r2, r4, r2, r0
 801276c:	60d1      	str	r1, [r2, #12]
}
 801276e:	4618      	mov	r0, r3
 8012770:	bc30      	pop	{r4, r5}
 8012772:	4770      	bx	lr
 8012774:	20008e24 	.word	0x20008e24

08012778 <nd6_send_q>:
  ip6_addr_t dest;
#if LWIP_ND6_QUEUEING
  struct nd6_q_entry *q;
#endif /* LWIP_ND6_QUEUEING */

  if ((i < 0) || (i >= LWIP_ND6_NUM_NEIGHBORS)) {
 8012778:	b2c3      	uxtb	r3, r0
 801277a:	2b09      	cmp	r3, #9
 801277c:	d82e      	bhi.n	80127dc <nd6_send_q+0x64>
{
 801277e:	b570      	push	{r4, r5, r6, lr}
 8012780:	b084      	sub	sp, #16
 8012782:	4605      	mov	r5, r0
 8012784:	e020      	b.n	80127c8 <nd6_send_q+0x50>
#if LWIP_ND6_QUEUEING
  while (neighbor_cache[i].q != NULL) {
    /* remember first in queue */
    q = neighbor_cache[i].q;
    /* pop first item off the queue */
    neighbor_cache[i].q = q->next;
 8012786:	6826      	ldr	r6, [r4, #0]
 8012788:	4a15      	ldr	r2, [pc, #84]	; (80127e0 <nd6_send_q+0x68>)
 801278a:	00ab      	lsls	r3, r5, #2
 801278c:	1958      	adds	r0, r3, r5
 801278e:	00c1      	lsls	r1, r0, #3
 8012790:	4411      	add	r1, r2
 8012792:	61ce      	str	r6, [r1, #28]
    /* Get ipv6 header. */
    ip6hdr = (struct ip6_hdr *)(q->p->payload);
 8012794:	6861      	ldr	r1, [r4, #4]
 8012796:	6849      	ldr	r1, [r1, #4]
    /* Create an aligned copy. */
    ip6_addr_copy_from_packed(dest, ip6hdr->dest);
 8012798:	6988      	ldr	r0, [r1, #24]
 801279a:	9000      	str	r0, [sp, #0]
 801279c:	69c8      	ldr	r0, [r1, #28]
 801279e:	9001      	str	r0, [sp, #4]
 80127a0:	6a08      	ldr	r0, [r1, #32]
 80127a2:	9002      	str	r0, [sp, #8]
 80127a4:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80127a6:	9103      	str	r1, [sp, #12]
    /* Restore the zone, if applicable. */
    ip6_addr_assign_zone(&dest, IP6_UNKNOWN, neighbor_cache[i].netif);
    /* send the queued IPv6 packet */
    (neighbor_cache[i].netif)->output_ip6(neighbor_cache[i].netif, q->p, &dest);
 80127a8:	442b      	add	r3, r5
 80127aa:	00d9      	lsls	r1, r3, #3
 80127ac:	440a      	add	r2, r1
 80127ae:	6910      	ldr	r0, [r2, #16]
 80127b0:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 80127b4:	466a      	mov	r2, sp
 80127b6:	6861      	ldr	r1, [r4, #4]
 80127b8:	4798      	blx	r3
    /* free the queued IP packet */
    pbuf_free(q->p);
 80127ba:	6860      	ldr	r0, [r4, #4]
 80127bc:	f7f5 ffb4 	bl	8008728 <pbuf_free>
    /* now queue entry can be freed */
    memp_free(MEMP_ND6_QUEUE, q);
 80127c0:	4621      	mov	r1, r4
 80127c2:	2008      	movs	r0, #8
 80127c4:	f7f5 fb6a 	bl	8007e9c <memp_free>
  while (neighbor_cache[i].q != NULL) {
 80127c8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80127cc:	00da      	lsls	r2, r3, #3
 80127ce:	4b04      	ldr	r3, [pc, #16]	; (80127e0 <nd6_send_q+0x68>)
 80127d0:	4413      	add	r3, r2
 80127d2:	69dc      	ldr	r4, [r3, #28]
 80127d4:	2c00      	cmp	r4, #0
 80127d6:	d1d6      	bne.n	8012786 <nd6_send_q+0xe>
    /* free the queued IP packet */
    pbuf_free(neighbor_cache[i].q);
    neighbor_cache[i].q = NULL;
  }
#endif /* LWIP_ND6_QUEUEING */
}
 80127d8:	b004      	add	sp, #16
 80127da:	bd70      	pop	{r4, r5, r6, pc}
 80127dc:	4770      	bx	lr
 80127de:	bf00      	nop
 80127e0:	20008c94 	.word	0x20008c94

080127e4 <nd6_duplicate_addr_detected>:
{
 80127e4:	b538      	push	{r3, r4, r5, lr}
 80127e6:	4605      	mov	r5, r0
 80127e8:	460c      	mov	r4, r1
  netif_ip6_addr_set_state(netif, addr_idx, IP6_ADDR_DUPLICATED);
 80127ea:	2240      	movs	r2, #64	; 0x40
 80127ec:	f7f5 fd7c 	bl	80082e8 <netif_ip6_addr_set_state>
  if (addr_idx == 0) {
 80127f0:	b1ac      	cbz	r4, 801281e <nd6_duplicate_addr_detected+0x3a>
}
 80127f2:	bd38      	pop	{r3, r4, r5, pc}
      if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i)) &&
 80127f4:	4623      	mov	r3, r4
 80127f6:	192a      	adds	r2, r5, r4
 80127f8:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 80127fc:	b152      	cbz	r2, 8012814 <nd6_duplicate_addr_detected+0x30>
 80127fe:	b14d      	cbz	r5, 8012814 <nd6_duplicate_addr_detected+0x30>
          !netif_ip6_addr_isstatic(netif, i)) {
 8012800:	331e      	adds	r3, #30
 8012802:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012806:	685b      	ldr	r3, [r3, #4]
 8012808:	b123      	cbz	r3, 8012814 <nd6_duplicate_addr_detected+0x30>
        netif_ip6_addr_set_state(netif, i, IP6_ADDR_DUPLICATED);
 801280a:	2240      	movs	r2, #64	; 0x40
 801280c:	4621      	mov	r1, r4
 801280e:	4628      	mov	r0, r5
 8012810:	f7f5 fd6a 	bl	80082e8 <netif_ip6_addr_set_state>
    for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8012814:	3401      	adds	r4, #1
 8012816:	b264      	sxtb	r4, r4
 8012818:	2c02      	cmp	r4, #2
 801281a:	ddeb      	ble.n	80127f4 <nd6_duplicate_addr_detected+0x10>
 801281c:	e7e9      	b.n	80127f2 <nd6_duplicate_addr_detected+0xe>
 801281e:	2401      	movs	r4, #1
 8012820:	e7fa      	b.n	8012818 <nd6_duplicate_addr_detected+0x34>
	...

08012824 <nd6_process_autoconfig_prefix>:
{
 8012824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012828:	4605      	mov	r5, r0
 801282a:	460c      	mov	r4, r1
 801282c:	4690      	mov	r8, r2
  valid_life = lwip_htonl(prefix_opt->valid_lifetime);
 801282e:	6848      	ldr	r0, [r1, #4]
 8012830:	f7f4 fce1 	bl	80071f6 <lwip_htonl>
 8012834:	4606      	mov	r6, r0
  pref_life = lwip_htonl(prefix_opt->preferred_lifetime);
 8012836:	68a0      	ldr	r0, [r4, #8]
 8012838:	f7f4 fcdd 	bl	80071f6 <lwip_htonl>
  if (pref_life > valid_life || prefix_opt->prefix_length != 64) {
 801283c:	4286      	cmp	r6, r0
 801283e:	d303      	bcc.n	8012848 <nd6_process_autoconfig_prefix+0x24>
 8012840:	4607      	mov	r7, r0
 8012842:	78a3      	ldrb	r3, [r4, #2]
 8012844:	2b40      	cmp	r3, #64	; 0x40
 8012846:	d001      	beq.n	801284c <nd6_process_autoconfig_prefix+0x28>
}
 8012848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 801284c:	2401      	movs	r4, #1
 801284e:	e019      	b.n	8012884 <nd6_process_autoconfig_prefix+0x60>
      } else if (remaining_life > ND6_2HRS) {
 8012850:	f5b2 5fe1 	cmp.w	r2, #7200	; 0x1c20
 8012854:	d944      	bls.n	80128e0 <nd6_process_autoconfig_prefix+0xbc>
        netif_ip6_addr_set_valid_life(netif, i, ND6_2HRS);
 8012856:	f104 031e 	add.w	r3, r4, #30
 801285a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801285e:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8012862:	605a      	str	r2, [r3, #4]
 8012864:	e03c      	b.n	80128e0 <nd6_process_autoconfig_prefix+0xbc>
      LWIP_ASSERT("bad valid lifetime", !netif_ip6_addr_isstatic(netif, i));
 8012866:	4b58      	ldr	r3, [pc, #352]	; (80129c8 <nd6_process_autoconfig_prefix+0x1a4>)
 8012868:	22de      	movs	r2, #222	; 0xde
 801286a:	4958      	ldr	r1, [pc, #352]	; (80129cc <nd6_process_autoconfig_prefix+0x1a8>)
 801286c:	4858      	ldr	r0, [pc, #352]	; (80129d0 <nd6_process_autoconfig_prefix+0x1ac>)
 801286e:	f001 fec1 	bl	80145f4 <iprintf>
 8012872:	e03c      	b.n	80128ee <nd6_process_autoconfig_prefix+0xca>
        netif_ip6_addr_set_state(netif, i, IP6_ADDR_PREFERRED);
 8012874:	2230      	movs	r2, #48	; 0x30
 8012876:	4621      	mov	r1, r4
 8012878:	4628      	mov	r0, r5
 801287a:	f7f5 fd35 	bl	80082e8 <netif_ip6_addr_set_state>
 801287e:	e03a      	b.n	80128f6 <nd6_process_autoconfig_prefix+0xd2>
  for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8012880:	3401      	adds	r4, #1
 8012882:	b264      	sxtb	r4, r4
 8012884:	2c02      	cmp	r4, #2
 8012886:	dc3b      	bgt.n	8012900 <nd6_process_autoconfig_prefix+0xdc>
    addr_state = netif_ip6_addr_state(netif, i);
 8012888:	46a2      	mov	sl, r4
 801288a:	192b      	adds	r3, r5, r4
 801288c:	f893 9078 	ldrb.w	r9, [r3, #120]	; 0x78
    if (!ip6_addr_isinvalid(addr_state) && !netif_ip6_addr_isstatic(netif, i) &&
 8012890:	f1b9 0f00 	cmp.w	r9, #0
 8012894:	d0f4      	beq.n	8012880 <nd6_process_autoconfig_prefix+0x5c>
 8012896:	2d00      	cmp	r5, #0
 8012898:	d0f2      	beq.n	8012880 <nd6_process_autoconfig_prefix+0x5c>
 801289a:	f104 031e 	add.w	r3, r4, #30
 801289e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80128a2:	685a      	ldr	r2, [r3, #4]
 80128a4:	2a00      	cmp	r2, #0
 80128a6:	d0eb      	beq.n	8012880 <nd6_process_autoconfig_prefix+0x5c>
        ip6_addr_netcmp(prefix_addr, netif_ip6_addr(netif, i))) {
 80128a8:	f8d8 1000 	ldr.w	r1, [r8]
 80128ac:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80128b0:	0083      	lsls	r3, r0, #2
 80128b2:	442b      	add	r3, r5
 80128b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if (!ip6_addr_isinvalid(addr_state) && !netif_ip6_addr_isstatic(netif, i) &&
 80128b6:	4299      	cmp	r1, r3
 80128b8:	d1e2      	bne.n	8012880 <nd6_process_autoconfig_prefix+0x5c>
        ip6_addr_netcmp(prefix_addr, netif_ip6_addr(netif, i))) {
 80128ba:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80128be:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80128c2:	0083      	lsls	r3, r0, #2
 80128c4:	442b      	add	r3, r5
 80128c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128c8:	4299      	cmp	r1, r3
 80128ca:	d1d9      	bne.n	8012880 <nd6_process_autoconfig_prefix+0x5c>
      if (valid_life > ND6_2HRS || valid_life > remaining_life) {
 80128cc:	f5b6 5fe1 	cmp.w	r6, #7200	; 0x1c20
 80128d0:	d801      	bhi.n	80128d6 <nd6_process_autoconfig_prefix+0xb2>
 80128d2:	42b2      	cmp	r2, r6
 80128d4:	d2bc      	bcs.n	8012850 <nd6_process_autoconfig_prefix+0x2c>
        netif_ip6_addr_set_valid_life(netif, i, valid_life);
 80128d6:	f10a 031e 	add.w	r3, sl, #30
 80128da:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80128de:	605e      	str	r6, [r3, #4]
      LWIP_ASSERT("bad valid lifetime", !netif_ip6_addr_isstatic(netif, i));
 80128e0:	f10a 031e 	add.w	r3, sl, #30
 80128e4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80128e8:	685b      	ldr	r3, [r3, #4]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d0bb      	beq.n	8012866 <nd6_process_autoconfig_prefix+0x42>
      if (pref_life > 0 && addr_state == IP6_ADDR_DEPRECATED) {
 80128ee:	b117      	cbz	r7, 80128f6 <nd6_process_autoconfig_prefix+0xd2>
 80128f0:	f1b9 0f10 	cmp.w	r9, #16
 80128f4:	d0be      	beq.n	8012874 <nd6_process_autoconfig_prefix+0x50>
      netif_ip6_addr_set_pref_life(netif, i, pref_life);
 80128f6:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
 80128fa:	f845 702a 	str.w	r7, [r5, sl, lsl #2]
 80128fe:	e7a3      	b.n	8012848 <nd6_process_autoconfig_prefix+0x24>
  addr_state = netif_ip6_addr_state(netif, 0);
 8012900:	f895 2078 	ldrb.w	r2, [r5, #120]	; 0x78
  if (!netif->ip6_autoconfig_enabled || valid_life == IP6_ADDR_LIFE_STATIC ||
 8012904:	f895 30c7 	ldrb.w	r3, [r5, #199]	; 0xc7
 8012908:	2b00      	cmp	r3, #0
 801290a:	d09d      	beq.n	8012848 <nd6_process_autoconfig_prefix+0x24>
 801290c:	2e00      	cmp	r6, #0
 801290e:	d09b      	beq.n	8012848 <nd6_process_autoconfig_prefix+0x24>
 8012910:	2a00      	cmp	r2, #0
 8012912:	d099      	beq.n	8012848 <nd6_process_autoconfig_prefix+0x24>
      ip6_addr_isinvalid(addr_state) || ip6_addr_isduplicated(addr_state)) {
 8012914:	2a40      	cmp	r2, #64	; 0x40
 8012916:	d097      	beq.n	8012848 <nd6_process_autoconfig_prefix+0x24>
  IP6_ADDR(&ip6addr, prefix_addr->addr[0], prefix_addr->addr[1],
 8012918:	f8d8 0000 	ldr.w	r0, [r8]
 801291c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8012920:	f8d5 e044 	ldr.w	lr, [r5, #68]	; 0x44
 8012924:	f8d5 c048 	ldr.w	ip, [r5, #72]	; 0x48
  free_idx = 0;
 8012928:	2100      	movs	r1, #0
  for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 801292a:	2301      	movs	r3, #1
 801292c:	e003      	b.n	8012936 <nd6_process_autoconfig_prefix+0x112>
    } else if (free_idx == 0) {
 801292e:	b901      	cbnz	r1, 8012932 <nd6_process_autoconfig_prefix+0x10e>
      free_idx = i;
 8012930:	4619      	mov	r1, r3
  for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8012932:	3301      	adds	r3, #1
 8012934:	b25b      	sxtb	r3, r3
 8012936:	2b02      	cmp	r3, #2
 8012938:	dc24      	bgt.n	8012984 <nd6_process_autoconfig_prefix+0x160>
    if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i))) {
 801293a:	18ea      	adds	r2, r5, r3
 801293c:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 8012940:	2a00      	cmp	r2, #0
 8012942:	d0f4      	beq.n	801292e <nd6_process_autoconfig_prefix+0x10a>
      if (ip6_addr_cmp(&ip6addr, netif_ip6_addr(netif, i))) {
 8012944:	eb03 0983 	add.w	r9, r3, r3, lsl #2
 8012948:	ea4f 0289 	mov.w	r2, r9, lsl #2
 801294c:	442a      	add	r2, r5
 801294e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8012950:	4290      	cmp	r0, r2
 8012952:	d1ee      	bne.n	8012932 <nd6_process_autoconfig_prefix+0x10e>
 8012954:	eb03 0983 	add.w	r9, r3, r3, lsl #2
 8012958:	ea4f 0289 	mov.w	r2, r9, lsl #2
 801295c:	442a      	add	r2, r5
 801295e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012960:	4294      	cmp	r4, r2
 8012962:	d1e6      	bne.n	8012932 <nd6_process_autoconfig_prefix+0x10e>
 8012964:	eb03 0983 	add.w	r9, r3, r3, lsl #2
 8012968:	ea4f 0289 	mov.w	r2, r9, lsl #2
 801296c:	442a      	add	r2, r5
 801296e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8012970:	4596      	cmp	lr, r2
 8012972:	d1de      	bne.n	8012932 <nd6_process_autoconfig_prefix+0x10e>
 8012974:	2214      	movs	r2, #20
 8012976:	fb02 5803 	mla	r8, r2, r3, r5
 801297a:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 801297e:	4594      	cmp	ip, r2
 8012980:	d1d7      	bne.n	8012932 <nd6_process_autoconfig_prefix+0x10e>
 8012982:	e761      	b.n	8012848 <nd6_process_autoconfig_prefix+0x24>
  if (free_idx == 0) {
 8012984:	2900      	cmp	r1, #0
 8012986:	f43f af5f 	beq.w	8012848 <nd6_process_autoconfig_prefix+0x24>
  ip_addr_copy_from_ip6(netif->ip6_addr[free_idx], ip6addr);
 801298a:	4688      	mov	r8, r1
 801298c:	008a      	lsls	r2, r1, #2
 801298e:	440a      	add	r2, r1
 8012990:	0093      	lsls	r3, r2, #2
 8012992:	442b      	add	r3, r5
 8012994:	63d8      	str	r0, [r3, #60]	; 0x3c
 8012996:	641c      	str	r4, [r3, #64]	; 0x40
 8012998:	f8c3 e044 	str.w	lr, [r3, #68]	; 0x44
 801299c:	f8c3 c048 	str.w	ip, [r3, #72]	; 0x48
 80129a0:	2206      	movs	r2, #6
 80129a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  netif_ip6_addr_set_valid_life(netif, free_idx, valid_life);
 80129a6:	b125      	cbz	r5, 80129b2 <nd6_process_autoconfig_prefix+0x18e>
 80129a8:	f101 031e 	add.w	r3, r1, #30
 80129ac:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80129b0:	605e      	str	r6, [r3, #4]
  netif_ip6_addr_set_pref_life(netif, free_idx, pref_life);
 80129b2:	b11d      	cbz	r5, 80129bc <nd6_process_autoconfig_prefix+0x198>
 80129b4:	f108 0822 	add.w	r8, r8, #34	; 0x22
 80129b8:	f845 7028 	str.w	r7, [r5, r8, lsl #2]
  netif_ip6_addr_set_state(netif, free_idx, IP6_ADDR_TENTATIVE);
 80129bc:	2208      	movs	r2, #8
 80129be:	4628      	mov	r0, r5
 80129c0:	f7f5 fc92 	bl	80082e8 <netif_ip6_addr_set_state>
 80129c4:	e740      	b.n	8012848 <nd6_process_autoconfig_prefix+0x24>
 80129c6:	bf00      	nop
 80129c8:	080186e8 	.word	0x080186e8
 80129cc:	0801871c 	.word	0x0801871c
 80129d0:	08015608 	.word	0x08015608

080129d4 <nd6_free_q>:
{
 80129d4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("q != NULL", q != NULL);
 80129d6:	4604      	mov	r4, r0
 80129d8:	b148      	cbz	r0, 80129ee <nd6_free_q+0x1a>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
 80129da:	6863      	ldr	r3, [r4, #4]
 80129dc:	b9bb      	cbnz	r3, 8012a0e <nd6_free_q+0x3a>
 80129de:	4b13      	ldr	r3, [pc, #76]	; (8012a2c <nd6_free_q+0x58>)
 80129e0:	f640 026f 	movw	r2, #2159	; 0x86f
 80129e4:	4912      	ldr	r1, [pc, #72]	; (8012a30 <nd6_free_q+0x5c>)
 80129e6:	4813      	ldr	r0, [pc, #76]	; (8012a34 <nd6_free_q+0x60>)
 80129e8:	f001 fe04 	bl	80145f4 <iprintf>
 80129ec:	e00f      	b.n	8012a0e <nd6_free_q+0x3a>
  LWIP_ASSERT("q != NULL", q != NULL);
 80129ee:	4b0f      	ldr	r3, [pc, #60]	; (8012a2c <nd6_free_q+0x58>)
 80129f0:	f640 026e 	movw	r2, #2158	; 0x86e
 80129f4:	4910      	ldr	r1, [pc, #64]	; (8012a38 <nd6_free_q+0x64>)
 80129f6:	480f      	ldr	r0, [pc, #60]	; (8012a34 <nd6_free_q+0x60>)
 80129f8:	f001 fdfc 	bl	80145f4 <iprintf>
 80129fc:	e7ed      	b.n	80129da <nd6_free_q+0x6>
    pbuf_free(r->p);
 80129fe:	6860      	ldr	r0, [r4, #4]
 8012a00:	f7f5 fe92 	bl	8008728 <pbuf_free>
    memp_free(MEMP_ND6_QUEUE, r);
 8012a04:	4621      	mov	r1, r4
 8012a06:	2008      	movs	r0, #8
 8012a08:	f7f5 fa48 	bl	8007e9c <memp_free>
    q = q->next;
 8012a0c:	462c      	mov	r4, r5
  while (q) {
 8012a0e:	b15c      	cbz	r4, 8012a28 <nd6_free_q+0x54>
    q = q->next;
 8012a10:	6825      	ldr	r5, [r4, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8012a12:	6863      	ldr	r3, [r4, #4]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d1f2      	bne.n	80129fe <nd6_free_q+0x2a>
 8012a18:	4b04      	ldr	r3, [pc, #16]	; (8012a2c <nd6_free_q+0x58>)
 8012a1a:	f640 0273 	movw	r2, #2163	; 0x873
 8012a1e:	4907      	ldr	r1, [pc, #28]	; (8012a3c <nd6_free_q+0x68>)
 8012a20:	4804      	ldr	r0, [pc, #16]	; (8012a34 <nd6_free_q+0x60>)
 8012a22:	f001 fde7 	bl	80145f4 <iprintf>
 8012a26:	e7ea      	b.n	80129fe <nd6_free_q+0x2a>
}
 8012a28:	bd38      	pop	{r3, r4, r5, pc}
 8012a2a:	bf00      	nop
 8012a2c:	080186e8 	.word	0x080186e8
 8012a30:	080186c8 	.word	0x080186c8
 8012a34:	08015608 	.word	0x08015608
 8012a38:	08017f60 	.word	0x08017f60
 8012a3c:	080186d8 	.word	0x080186d8

08012a40 <nd6_free_neighbor_cache_entry>:
{
 8012a40:	b538      	push	{r3, r4, r5, lr}
  if ((i < 0) || (i >= LWIP_ND6_NUM_NEIGHBORS)) {
 8012a42:	b2c3      	uxtb	r3, r0
 8012a44:	2b09      	cmp	r3, #9
 8012a46:	d826      	bhi.n	8012a96 <nd6_free_neighbor_cache_entry+0x56>
  if (neighbor_cache[i].isrouter) {
 8012a48:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8012a4c:	00da      	lsls	r2, r3, #3
 8012a4e:	4b12      	ldr	r3, [pc, #72]	; (8012a98 <nd6_free_neighbor_cache_entry+0x58>)
 8012a50:	4413      	add	r3, r2
 8012a52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012a56:	b9f3      	cbnz	r3, 8012a96 <nd6_free_neighbor_cache_entry+0x56>
 8012a58:	4604      	mov	r4, r0
  if (neighbor_cache[i].q != NULL) {
 8012a5a:	4b0f      	ldr	r3, [pc, #60]	; (8012a98 <nd6_free_neighbor_cache_entry+0x58>)
 8012a5c:	4413      	add	r3, r2
 8012a5e:	69d8      	ldr	r0, [r3, #28]
 8012a60:	b140      	cbz	r0, 8012a74 <nd6_free_neighbor_cache_entry+0x34>
    nd6_free_q(neighbor_cache[i].q);
 8012a62:	f7ff ffb7 	bl	80129d4 <nd6_free_q>
    neighbor_cache[i].q = NULL;
 8012a66:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012a6a:	00da      	lsls	r2, r3, #3
 8012a6c:	4b0a      	ldr	r3, [pc, #40]	; (8012a98 <nd6_free_neighbor_cache_entry+0x58>)
 8012a6e:	4413      	add	r3, r2
 8012a70:	2200      	movs	r2, #0
 8012a72:	61da      	str	r2, [r3, #28]
  neighbor_cache[i].state = ND6_NO_ENTRY;
 8012a74:	4908      	ldr	r1, [pc, #32]	; (8012a98 <nd6_free_neighbor_cache_entry+0x58>)
 8012a76:	00a0      	lsls	r0, r4, #2
 8012a78:	1903      	adds	r3, r0, r4
 8012a7a:	00dd      	lsls	r5, r3, #3
 8012a7c:	194a      	adds	r2, r1, r5
 8012a7e:	2300      	movs	r3, #0
 8012a80:	f882 3020 	strb.w	r3, [r2, #32]
  neighbor_cache[i].isrouter = 0;
 8012a84:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  neighbor_cache[i].netif = NULL;
 8012a88:	6113      	str	r3, [r2, #16]
  neighbor_cache[i].counter.reachable_time = 0;
 8012a8a:	6253      	str	r3, [r2, #36]	; 0x24
  ip6_addr_set_zero(&(neighbor_cache[i].next_hop_address));
 8012a8c:	514b      	str	r3, [r1, r5]
 8012a8e:	6053      	str	r3, [r2, #4]
 8012a90:	6093      	str	r3, [r2, #8]
 8012a92:	4429      	add	r1, r5
 8012a94:	60cb      	str	r3, [r1, #12]
}
 8012a96:	bd38      	pop	{r3, r4, r5, pc}
 8012a98:	20008c94 	.word	0x20008c94

08012a9c <nd6_new_neighbor_cache_entry>:
{
 8012a9c:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8012a9e:	2400      	movs	r4, #0
 8012aa0:	2c09      	cmp	r4, #9
 8012aa2:	dc0b      	bgt.n	8012abc <nd6_new_neighbor_cache_entry+0x20>
    if (neighbor_cache[i].state == ND6_NO_ENTRY) {
 8012aa4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012aa8:	00da      	lsls	r2, r3, #3
 8012aaa:	4b6a      	ldr	r3, [pc, #424]	; (8012c54 <nd6_new_neighbor_cache_entry+0x1b8>)
 8012aac:	4413      	add	r3, r2
 8012aae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d077      	beq.n	8012ba6 <nd6_new_neighbor_cache_entry+0x10a>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8012ab6:	3401      	adds	r4, #1
 8012ab8:	b264      	sxtb	r4, r4
 8012aba:	e7f1      	b.n	8012aa0 <nd6_new_neighbor_cache_entry+0x4>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8012abc:	2400      	movs	r4, #0
 8012abe:	e001      	b.n	8012ac4 <nd6_new_neighbor_cache_entry+0x28>
 8012ac0:	3401      	adds	r4, #1
 8012ac2:	b264      	sxtb	r4, r4
 8012ac4:	2c09      	cmp	r4, #9
 8012ac6:	dc12      	bgt.n	8012aee <nd6_new_neighbor_cache_entry+0x52>
    if ((neighbor_cache[i].state == ND6_STALE) &&
 8012ac8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012acc:	00da      	lsls	r2, r3, #3
 8012ace:	4b61      	ldr	r3, [pc, #388]	; (8012c54 <nd6_new_neighbor_cache_entry+0x1b8>)
 8012ad0:	4413      	add	r3, r2
 8012ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012ad6:	2b03      	cmp	r3, #3
 8012ad8:	d1f2      	bne.n	8012ac0 <nd6_new_neighbor_cache_entry+0x24>
        (!neighbor_cache[i].isrouter)) {
 8012ada:	4b5e      	ldr	r3, [pc, #376]	; (8012c54 <nd6_new_neighbor_cache_entry+0x1b8>)
 8012adc:	4413      	add	r3, r2
 8012ade:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    if ((neighbor_cache[i].state == ND6_STALE) &&
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d1ec      	bne.n	8012ac0 <nd6_new_neighbor_cache_entry+0x24>
      nd6_free_neighbor_cache_entry(i);
 8012ae6:	4620      	mov	r0, r4
 8012ae8:	f7ff ffaa 	bl	8012a40 <nd6_free_neighbor_cache_entry>
      return i;
 8012aec:	e05b      	b.n	8012ba6 <nd6_new_neighbor_cache_entry+0x10a>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8012aee:	2400      	movs	r4, #0
 8012af0:	e001      	b.n	8012af6 <nd6_new_neighbor_cache_entry+0x5a>
 8012af2:	3401      	adds	r4, #1
 8012af4:	b264      	sxtb	r4, r4
 8012af6:	2c09      	cmp	r4, #9
 8012af8:	dc12      	bgt.n	8012b20 <nd6_new_neighbor_cache_entry+0x84>
    if ((neighbor_cache[i].state == ND6_PROBE) &&
 8012afa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012afe:	00da      	lsls	r2, r3, #3
 8012b00:	4b54      	ldr	r3, [pc, #336]	; (8012c54 <nd6_new_neighbor_cache_entry+0x1b8>)
 8012b02:	4413      	add	r3, r2
 8012b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b08:	2b05      	cmp	r3, #5
 8012b0a:	d1f2      	bne.n	8012af2 <nd6_new_neighbor_cache_entry+0x56>
        (!neighbor_cache[i].isrouter)) {
 8012b0c:	4b51      	ldr	r3, [pc, #324]	; (8012c54 <nd6_new_neighbor_cache_entry+0x1b8>)
 8012b0e:	4413      	add	r3, r2
 8012b10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    if ((neighbor_cache[i].state == ND6_PROBE) &&
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d1ec      	bne.n	8012af2 <nd6_new_neighbor_cache_entry+0x56>
      nd6_free_neighbor_cache_entry(i);
 8012b18:	4620      	mov	r0, r4
 8012b1a:	f7ff ff91 	bl	8012a40 <nd6_free_neighbor_cache_entry>
      return i;
 8012b1e:	e042      	b.n	8012ba6 <nd6_new_neighbor_cache_entry+0x10a>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8012b20:	2400      	movs	r4, #0
 8012b22:	e001      	b.n	8012b28 <nd6_new_neighbor_cache_entry+0x8c>
 8012b24:	3401      	adds	r4, #1
 8012b26:	b264      	sxtb	r4, r4
 8012b28:	2c09      	cmp	r4, #9
 8012b2a:	dc12      	bgt.n	8012b52 <nd6_new_neighbor_cache_entry+0xb6>
    if ((neighbor_cache[i].state == ND6_DELAY) &&
 8012b2c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8012b30:	00da      	lsls	r2, r3, #3
 8012b32:	4b48      	ldr	r3, [pc, #288]	; (8012c54 <nd6_new_neighbor_cache_entry+0x1b8>)
 8012b34:	4413      	add	r3, r2
 8012b36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012b3a:	2b04      	cmp	r3, #4
 8012b3c:	d1f2      	bne.n	8012b24 <nd6_new_neighbor_cache_entry+0x88>
        (!neighbor_cache[i].isrouter)) {
 8012b3e:	4b45      	ldr	r3, [pc, #276]	; (8012c54 <nd6_new_neighbor_cache_entry+0x1b8>)
 8012b40:	4413      	add	r3, r2
 8012b42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
    if ((neighbor_cache[i].state == ND6_DELAY) &&
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d1ec      	bne.n	8012b24 <nd6_new_neighbor_cache_entry+0x88>
      nd6_free_neighbor_cache_entry(i);
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	f7ff ff78 	bl	8012a40 <nd6_free_neighbor_cache_entry>
      return i;
 8012b50:	e029      	b.n	8012ba6 <nd6_new_neighbor_cache_entry+0x10a>
  time = 0xfffffffful;
 8012b52:	f04f 35ff 	mov.w	r5, #4294967295
  j = -1;
 8012b56:	462c      	mov	r4, r5
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8012b58:	2300      	movs	r3, #0
 8012b5a:	e001      	b.n	8012b60 <nd6_new_neighbor_cache_entry+0xc4>
 8012b5c:	3301      	adds	r3, #1
 8012b5e:	b25b      	sxtb	r3, r3
 8012b60:	2b09      	cmp	r3, #9
 8012b62:	dc16      	bgt.n	8012b92 <nd6_new_neighbor_cache_entry+0xf6>
    if ((neighbor_cache[i].state == ND6_REACHABLE) &&
 8012b64:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012b68:	00d1      	lsls	r1, r2, #3
 8012b6a:	4a3a      	ldr	r2, [pc, #232]	; (8012c54 <nd6_new_neighbor_cache_entry+0x1b8>)
 8012b6c:	440a      	add	r2, r1
 8012b6e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8012b72:	2a02      	cmp	r2, #2
 8012b74:	d1f2      	bne.n	8012b5c <nd6_new_neighbor_cache_entry+0xc0>
        (!neighbor_cache[i].isrouter)) {
 8012b76:	4a37      	ldr	r2, [pc, #220]	; (8012c54 <nd6_new_neighbor_cache_entry+0x1b8>)
 8012b78:	440a      	add	r2, r1
 8012b7a:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
    if ((neighbor_cache[i].state == ND6_REACHABLE) &&
 8012b7e:	2a00      	cmp	r2, #0
 8012b80:	d1ec      	bne.n	8012b5c <nd6_new_neighbor_cache_entry+0xc0>
      if (neighbor_cache[i].counter.reachable_time < time) {
 8012b82:	4a34      	ldr	r2, [pc, #208]	; (8012c54 <nd6_new_neighbor_cache_entry+0x1b8>)
 8012b84:	440a      	add	r2, r1
 8012b86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012b88:	42aa      	cmp	r2, r5
 8012b8a:	d2e7      	bcs.n	8012b5c <nd6_new_neighbor_cache_entry+0xc0>
        time = neighbor_cache[i].counter.reachable_time;
 8012b8c:	4615      	mov	r5, r2
        j = i;
 8012b8e:	461c      	mov	r4, r3
 8012b90:	e7e4      	b.n	8012b5c <nd6_new_neighbor_cache_entry+0xc0>
  if (j >= 0) {
 8012b92:	2c00      	cmp	r4, #0
 8012b94:	da04      	bge.n	8012ba0 <nd6_new_neighbor_cache_entry+0x104>
  time = 0;
 8012b96:	2500      	movs	r5, #0
  j = -1;
 8012b98:	f04f 34ff 	mov.w	r4, #4294967295
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8012b9c:	462b      	mov	r3, r5
 8012b9e:	e006      	b.n	8012bae <nd6_new_neighbor_cache_entry+0x112>
    nd6_free_neighbor_cache_entry(j);
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	f7ff ff4d 	bl	8012a40 <nd6_free_neighbor_cache_entry>
}
 8012ba6:	4620      	mov	r0, r4
 8012ba8:	bd38      	pop	{r3, r4, r5, pc}
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8012baa:	3301      	adds	r3, #1
 8012bac:	b25b      	sxtb	r3, r3
 8012bae:	2b09      	cmp	r3, #9
 8012bb0:	dc21      	bgt.n	8012bf6 <nd6_new_neighbor_cache_entry+0x15a>
        (neighbor_cache[i].q == NULL) &&
 8012bb2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012bb6:	00d1      	lsls	r1, r2, #3
 8012bb8:	4a26      	ldr	r2, [pc, #152]	; (8012c54 <nd6_new_neighbor_cache_entry+0x1b8>)
 8012bba:	440a      	add	r2, r1
 8012bbc:	69d2      	ldr	r2, [r2, #28]
    if (
 8012bbe:	2a00      	cmp	r2, #0
 8012bc0:	d1f3      	bne.n	8012baa <nd6_new_neighbor_cache_entry+0x10e>
        (neighbor_cache[i].state == ND6_INCOMPLETE) &&
 8012bc2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8012bc6:	00ca      	lsls	r2, r1, #3
 8012bc8:	4922      	ldr	r1, [pc, #136]	; (8012c54 <nd6_new_neighbor_cache_entry+0x1b8>)
 8012bca:	4411      	add	r1, r2
 8012bcc:	f891 2020 	ldrb.w	r2, [r1, #32]
        (neighbor_cache[i].q == NULL) &&
 8012bd0:	2a01      	cmp	r2, #1
 8012bd2:	d1ea      	bne.n	8012baa <nd6_new_neighbor_cache_entry+0x10e>
        (!neighbor_cache[i].isrouter)) {
 8012bd4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012bd8:	00d1      	lsls	r1, r2, #3
 8012bda:	4a1e      	ldr	r2, [pc, #120]	; (8012c54 <nd6_new_neighbor_cache_entry+0x1b8>)
 8012bdc:	440a      	add	r2, r1
 8012bde:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
        (neighbor_cache[i].state == ND6_INCOMPLETE) &&
 8012be2:	2a00      	cmp	r2, #0
 8012be4:	d1e1      	bne.n	8012baa <nd6_new_neighbor_cache_entry+0x10e>
      if (neighbor_cache[i].counter.probes_sent >= time) {
 8012be6:	4a1b      	ldr	r2, [pc, #108]	; (8012c54 <nd6_new_neighbor_cache_entry+0x1b8>)
 8012be8:	440a      	add	r2, r1
 8012bea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012bec:	42aa      	cmp	r2, r5
 8012bee:	d3dc      	bcc.n	8012baa <nd6_new_neighbor_cache_entry+0x10e>
        time = neighbor_cache[i].counter.probes_sent;
 8012bf0:	4615      	mov	r5, r2
        j = i;
 8012bf2:	461c      	mov	r4, r3
 8012bf4:	e7d9      	b.n	8012baa <nd6_new_neighbor_cache_entry+0x10e>
  if (j >= 0) {
 8012bf6:	2c00      	cmp	r4, #0
 8012bf8:	da04      	bge.n	8012c04 <nd6_new_neighbor_cache_entry+0x168>
  time = 0;
 8012bfa:	2500      	movs	r5, #0
  j = -1;
 8012bfc:	f04f 34ff 	mov.w	r4, #4294967295
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8012c00:	462b      	mov	r3, r5
 8012c02:	e005      	b.n	8012c10 <nd6_new_neighbor_cache_entry+0x174>
    nd6_free_neighbor_cache_entry(j);
 8012c04:	4620      	mov	r0, r4
 8012c06:	f7ff ff1b 	bl	8012a40 <nd6_free_neighbor_cache_entry>
    return j;
 8012c0a:	e7cc      	b.n	8012ba6 <nd6_new_neighbor_cache_entry+0x10a>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8012c0c:	3301      	adds	r3, #1
 8012c0e:	b25b      	sxtb	r3, r3
 8012c10:	2b09      	cmp	r3, #9
 8012c12:	dc16      	bgt.n	8012c42 <nd6_new_neighbor_cache_entry+0x1a6>
    if ((neighbor_cache[i].state == ND6_INCOMPLETE) &&
 8012c14:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012c18:	00d1      	lsls	r1, r2, #3
 8012c1a:	4a0e      	ldr	r2, [pc, #56]	; (8012c54 <nd6_new_neighbor_cache_entry+0x1b8>)
 8012c1c:	440a      	add	r2, r1
 8012c1e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8012c22:	2a01      	cmp	r2, #1
 8012c24:	d1f2      	bne.n	8012c0c <nd6_new_neighbor_cache_entry+0x170>
        (!neighbor_cache[i].isrouter)) {
 8012c26:	4a0b      	ldr	r2, [pc, #44]	; (8012c54 <nd6_new_neighbor_cache_entry+0x1b8>)
 8012c28:	440a      	add	r2, r1
 8012c2a:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
    if ((neighbor_cache[i].state == ND6_INCOMPLETE) &&
 8012c2e:	2a00      	cmp	r2, #0
 8012c30:	d1ec      	bne.n	8012c0c <nd6_new_neighbor_cache_entry+0x170>
      if (neighbor_cache[i].counter.probes_sent >= time) {
 8012c32:	4a08      	ldr	r2, [pc, #32]	; (8012c54 <nd6_new_neighbor_cache_entry+0x1b8>)
 8012c34:	440a      	add	r2, r1
 8012c36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012c38:	42aa      	cmp	r2, r5
 8012c3a:	d3e7      	bcc.n	8012c0c <nd6_new_neighbor_cache_entry+0x170>
        time = neighbor_cache[i].counter.probes_sent;
 8012c3c:	4615      	mov	r5, r2
        j = i;
 8012c3e:	461c      	mov	r4, r3
 8012c40:	e7e4      	b.n	8012c0c <nd6_new_neighbor_cache_entry+0x170>
  if (j >= 0) {
 8012c42:	2c00      	cmp	r4, #0
 8012c44:	db03      	blt.n	8012c4e <nd6_new_neighbor_cache_entry+0x1b2>
    nd6_free_neighbor_cache_entry(j);
 8012c46:	4620      	mov	r0, r4
 8012c48:	f7ff fefa 	bl	8012a40 <nd6_free_neighbor_cache_entry>
    return j;
 8012c4c:	e7ab      	b.n	8012ba6 <nd6_new_neighbor_cache_entry+0x10a>
  return -1;
 8012c4e:	f04f 34ff 	mov.w	r4, #4294967295
 8012c52:	e7a8      	b.n	8012ba6 <nd6_new_neighbor_cache_entry+0x10a>
 8012c54:	20008c94 	.word	0x20008c94

08012c58 <nd6_send_na>:
{
 8012c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c5c:	b084      	sub	sp, #16
 8012c5e:	4605      	mov	r5, r0
 8012c60:	4616      	mov	r6, r2
  LWIP_ASSERT("target address is required", target_addr != NULL);
 8012c62:	460c      	mov	r4, r1
 8012c64:	2900      	cmp	r1, #0
 8012c66:	d051      	beq.n	8012d0c <nd6_send_na+0xb4>
  lladdr_opt_len = ((netif->hwaddr_len + 2) >> 3) + (((netif->hwaddr_len + 2) & 0x07) ? 1 : 0);
 8012c68:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
 8012c6c:	3302      	adds	r3, #2
 8012c6e:	f013 0207 	ands.w	r2, r3, #7
 8012c72:	bf18      	it	ne
 8012c74:	2201      	movne	r2, #1
 8012c76:	eb02 07d3 	add.w	r7, r2, r3, lsr #3
  p = pbuf_alloc(PBUF_IP, sizeof(struct na_header) + (lladdr_opt_len << 3), PBUF_RAM);
 8012c7a:	00f9      	lsls	r1, r7, #3
 8012c7c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012c80:	3118      	adds	r1, #24
 8012c82:	2036      	movs	r0, #54	; 0x36
 8012c84:	f7f5 fdb2 	bl	80087ec <pbuf_alloc>
  if (p == NULL) {
 8012c88:	4680      	mov	r8, r0
 8012c8a:	2800      	cmp	r0, #0
 8012c8c:	d03b      	beq.n	8012d06 <nd6_send_na+0xae>
  na_hdr = (struct na_header *)p->payload;
 8012c8e:	6840      	ldr	r0, [r0, #4]
  na_hdr->type = ICMP6_TYPE_NA;
 8012c90:	2388      	movs	r3, #136	; 0x88
 8012c92:	7003      	strb	r3, [r0, #0]
  na_hdr->code = 0;
 8012c94:	2300      	movs	r3, #0
 8012c96:	7043      	strb	r3, [r0, #1]
  na_hdr->chksum = 0;
 8012c98:	7083      	strb	r3, [r0, #2]
 8012c9a:	70c3      	strb	r3, [r0, #3]
  na_hdr->flags = flags & 0xf0;
 8012c9c:	f006 02f0 	and.w	r2, r6, #240	; 0xf0
 8012ca0:	7102      	strb	r2, [r0, #4]
  na_hdr->reserved[0] = 0;
 8012ca2:	7143      	strb	r3, [r0, #5]
  na_hdr->reserved[1] = 0;
 8012ca4:	7183      	strb	r3, [r0, #6]
  na_hdr->reserved[2] = 0;
 8012ca6:	71c3      	strb	r3, [r0, #7]
  ip6_addr_copy_to_packed(na_hdr->target_address, *target_addr);
 8012ca8:	6823      	ldr	r3, [r4, #0]
 8012caa:	6083      	str	r3, [r0, #8]
 8012cac:	6863      	ldr	r3, [r4, #4]
 8012cae:	60c3      	str	r3, [r0, #12]
 8012cb0:	68a3      	ldr	r3, [r4, #8]
 8012cb2:	6103      	str	r3, [r0, #16]
 8012cb4:	68e3      	ldr	r3, [r4, #12]
 8012cb6:	6143      	str	r3, [r0, #20]
  lladdr_opt->type = ND6_OPTION_TYPE_TARGET_LLADDR;
 8012cb8:	2302      	movs	r3, #2
 8012cba:	7603      	strb	r3, [r0, #24]
  lladdr_opt->length = (u8_t)lladdr_opt_len;
 8012cbc:	7647      	strb	r7, [r0, #25]
  SMEMCPY(lladdr_opt->addr, netif->hwaddr, netif->hwaddr_len);
 8012cbe:	f895 20c2 	ldrb.w	r2, [r5, #194]	; 0xc2
 8012cc2:	f105 01bc 	add.w	r1, r5, #188	; 0xbc
 8012cc6:	301a      	adds	r0, #26
 8012cc8:	f001 fc67 	bl	801459a <memcpy>
  if (flags & ND6_SEND_FLAG_MULTICAST_DEST) {
 8012ccc:	f016 0f01 	tst.w	r6, #1
 8012cd0:	d024      	beq.n	8012d1c <nd6_send_na+0xc4>
    ip6_addr_set_solicitednode(&multicast_address, target_addr->addr[3]);
 8012cd2:	4a1a      	ldr	r2, [pc, #104]	; (8012d3c <nd6_send_na+0xe4>)
 8012cd4:	f240 23ff 	movw	r3, #767	; 0x2ff
 8012cd8:	6013      	str	r3, [r2, #0]
 8012cda:	2300      	movs	r3, #0
 8012cdc:	6053      	str	r3, [r2, #4]
 8012cde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012ce2:	6093      	str	r3, [r2, #8]
 8012ce4:	68e3      	ldr	r3, [r4, #12]
 8012ce6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8012cea:	60d3      	str	r3, [r2, #12]
  ip6_output_if(p, src_addr, dest_addr,
 8012cec:	9502      	str	r5, [sp, #8]
 8012cee:	233a      	movs	r3, #58	; 0x3a
 8012cf0:	9301      	str	r3, [sp, #4]
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	9300      	str	r3, [sp, #0]
 8012cf6:	23ff      	movs	r3, #255	; 0xff
 8012cf8:	4621      	mov	r1, r4
 8012cfa:	4640      	mov	r0, r8
 8012cfc:	f7fe fd1e 	bl	801173c <ip6_output_if>
  pbuf_free(p);
 8012d00:	4640      	mov	r0, r8
 8012d02:	f7f5 fd11 	bl	8008728 <pbuf_free>
}
 8012d06:	b004      	add	sp, #16
 8012d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("target address is required", target_addr != NULL);
 8012d0c:	4b0c      	ldr	r3, [pc, #48]	; (8012d40 <nd6_send_na+0xe8>)
 8012d0e:	f240 42ef 	movw	r2, #1263	; 0x4ef
 8012d12:	490c      	ldr	r1, [pc, #48]	; (8012d44 <nd6_send_na+0xec>)
 8012d14:	480c      	ldr	r0, [pc, #48]	; (8012d48 <nd6_send_na+0xf0>)
 8012d16:	f001 fc6d 	bl	80145f4 <iprintf>
 8012d1a:	e7a5      	b.n	8012c68 <nd6_send_na+0x10>
  } else if (flags & ND6_SEND_FLAG_ALLNODES_DEST) {
 8012d1c:	f016 0f02 	tst.w	r6, #2
 8012d20:	d00a      	beq.n	8012d38 <nd6_send_na+0xe0>
    ip6_addr_set_allnodes_linklocal(&multicast_address);
 8012d22:	4a06      	ldr	r2, [pc, #24]	; (8012d3c <nd6_send_na+0xe4>)
 8012d24:	f240 23ff 	movw	r3, #767	; 0x2ff
 8012d28:	6013      	str	r3, [r2, #0]
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	6053      	str	r3, [r2, #4]
 8012d2e:	6093      	str	r3, [r2, #8]
 8012d30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012d34:	60d3      	str	r3, [r2, #12]
 8012d36:	e7d9      	b.n	8012cec <nd6_send_na+0x94>
    dest_addr = ip6_current_src_addr();
 8012d38:	4a04      	ldr	r2, [pc, #16]	; (8012d4c <nd6_send_na+0xf4>)
 8012d3a:	e7d7      	b.n	8012cec <nd6_send_na+0x94>
 8012d3c:	2000189c 	.word	0x2000189c
 8012d40:	080186e8 	.word	0x080186e8
 8012d44:	08018730 	.word	0x08018730
 8012d48:	08015608 	.word	0x08015608
 8012d4c:	20004b98 	.word	0x20004b98

08012d50 <nd6_send_rs>:
{
 8012d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d52:	b085      	sub	sp, #20
 8012d54:	4605      	mov	r5, r0
  if (ip6_addr_isvalid(netif_ip6_addr_state(netif, 0))) {
 8012d56:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8012d5a:	f013 0f10 	tst.w	r3, #16
 8012d5e:	d04e      	beq.n	8012dfe <nd6_send_rs+0xae>
    src_addr = netif_ip6_addr(netif, 0);
 8012d60:	f100 043c 	add.w	r4, r0, #60	; 0x3c
  ip6_addr_set_allrouters_linklocal(&multicast_address);
 8012d64:	4b2a      	ldr	r3, [pc, #168]	; (8012e10 <nd6_send_rs+0xc0>)
 8012d66:	f240 22ff 	movw	r2, #767	; 0x2ff
 8012d6a:	601a      	str	r2, [r3, #0]
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	605a      	str	r2, [r3, #4]
 8012d70:	609a      	str	r2, [r3, #8]
 8012d72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8012d76:	60da      	str	r2, [r3, #12]
  if (src_addr != IP6_ADDR_ANY6) {
 8012d78:	4b26      	ldr	r3, [pc, #152]	; (8012e14 <nd6_send_rs+0xc4>)
 8012d7a:	429c      	cmp	r4, r3
 8012d7c:	d041      	beq.n	8012e02 <nd6_send_rs+0xb2>
    lladdr_opt_len = ((netif->hwaddr_len + 2) >> 3) + (((netif->hwaddr_len + 2) & 0x07) ? 1 : 0);
 8012d7e:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
 8012d82:	3302      	adds	r3, #2
 8012d84:	f013 0207 	ands.w	r2, r3, #7
 8012d88:	bf18      	it	ne
 8012d8a:	2201      	movne	r2, #1
 8012d8c:	eb02 07d3 	add.w	r7, r2, r3, lsr #3
  p = pbuf_alloc(PBUF_IP, sizeof(struct rs_header) + (lladdr_opt_len << 3), PBUF_RAM);
 8012d90:	00f9      	lsls	r1, r7, #3
 8012d92:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d96:	3108      	adds	r1, #8
 8012d98:	2036      	movs	r0, #54	; 0x36
 8012d9a:	f7f5 fd27 	bl	80087ec <pbuf_alloc>
  if (p == NULL) {
 8012d9e:	4606      	mov	r6, r0
 8012da0:	b398      	cbz	r0, 8012e0a <nd6_send_rs+0xba>
  rs_hdr = (struct rs_header *)p->payload;
 8012da2:	6843      	ldr	r3, [r0, #4]
  rs_hdr->type = ICMP6_TYPE_RS;
 8012da4:	2285      	movs	r2, #133	; 0x85
 8012da6:	701a      	strb	r2, [r3, #0]
  rs_hdr->code = 0;
 8012da8:	2200      	movs	r2, #0
 8012daa:	705a      	strb	r2, [r3, #1]
  rs_hdr->chksum = 0;
 8012dac:	709a      	strb	r2, [r3, #2]
 8012dae:	70da      	strb	r2, [r3, #3]
  rs_hdr->reserved = 0;
 8012db0:	711a      	strb	r2, [r3, #4]
 8012db2:	715a      	strb	r2, [r3, #5]
 8012db4:	719a      	strb	r2, [r3, #6]
 8012db6:	71da      	strb	r2, [r3, #7]
  if (src_addr != IP6_ADDR_ANY6) {
 8012db8:	4b16      	ldr	r3, [pc, #88]	; (8012e14 <nd6_send_rs+0xc4>)
 8012dba:	429c      	cmp	r4, r3
 8012dbc:	d00a      	beq.n	8012dd4 <nd6_send_rs+0x84>
    lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct rs_header));
 8012dbe:	6840      	ldr	r0, [r0, #4]
    lladdr_opt->type = ND6_OPTION_TYPE_SOURCE_LLADDR;
 8012dc0:	2301      	movs	r3, #1
 8012dc2:	7203      	strb	r3, [r0, #8]
    lladdr_opt->length = (u8_t)lladdr_opt_len;
 8012dc4:	7247      	strb	r7, [r0, #9]
    SMEMCPY(lladdr_opt->addr, netif->hwaddr, netif->hwaddr_len);
 8012dc6:	f895 20c2 	ldrb.w	r2, [r5, #194]	; 0xc2
 8012dca:	f105 01bc 	add.w	r1, r5, #188	; 0xbc
 8012dce:	300a      	adds	r0, #10
 8012dd0:	f001 fbe3 	bl	801459a <memcpy>
  err = ip6_output_if(p, (src_addr == IP6_ADDR_ANY6) ? NULL : src_addr, &multicast_address,
 8012dd4:	4b0f      	ldr	r3, [pc, #60]	; (8012e14 <nd6_send_rs+0xc4>)
 8012dd6:	429c      	cmp	r4, r3
 8012dd8:	d015      	beq.n	8012e06 <nd6_send_rs+0xb6>
 8012dda:	9502      	str	r5, [sp, #8]
 8012ddc:	233a      	movs	r3, #58	; 0x3a
 8012dde:	9301      	str	r3, [sp, #4]
 8012de0:	2300      	movs	r3, #0
 8012de2:	9300      	str	r3, [sp, #0]
 8012de4:	23ff      	movs	r3, #255	; 0xff
 8012de6:	4a0a      	ldr	r2, [pc, #40]	; (8012e10 <nd6_send_rs+0xc0>)
 8012de8:	4621      	mov	r1, r4
 8012dea:	4630      	mov	r0, r6
 8012dec:	f7fe fca6 	bl	801173c <ip6_output_if>
 8012df0:	4604      	mov	r4, r0
  pbuf_free(p);
 8012df2:	4630      	mov	r0, r6
 8012df4:	f7f5 fc98 	bl	8008728 <pbuf_free>
}
 8012df8:	4620      	mov	r0, r4
 8012dfa:	b005      	add	sp, #20
 8012dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    src_addr = IP6_ADDR_ANY6;
 8012dfe:	4c05      	ldr	r4, [pc, #20]	; (8012e14 <nd6_send_rs+0xc4>)
 8012e00:	e7b0      	b.n	8012d64 <nd6_send_rs+0x14>
  u16_t lladdr_opt_len = 0;
 8012e02:	2700      	movs	r7, #0
 8012e04:	e7c4      	b.n	8012d90 <nd6_send_rs+0x40>
  err = ip6_output_if(p, (src_addr == IP6_ADDR_ANY6) ? NULL : src_addr, &multicast_address,
 8012e06:	2400      	movs	r4, #0
 8012e08:	e7e7      	b.n	8012dda <nd6_send_rs+0x8a>
    return ERR_BUF;
 8012e0a:	f06f 0401 	mvn.w	r4, #1
 8012e0e:	e7f3      	b.n	8012df8 <nd6_send_rs+0xa8>
 8012e10:	2000189c 	.word	0x2000189c
 8012e14:	0801857c 	.word	0x0801857c

08012e18 <nd6_send_ns>:
{
 8012e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e1c:	b085      	sub	sp, #20
 8012e1e:	4606      	mov	r6, r0
 8012e20:	4617      	mov	r7, r2
  LWIP_ASSERT("target address is required", target_addr != NULL);
 8012e22:	460c      	mov	r4, r1
 8012e24:	b171      	cbz	r1, 8012e44 <nd6_send_ns+0x2c>
  if (!(flags & ND6_SEND_FLAG_ANY_SRC) &&
 8012e26:	f017 0f04 	tst.w	r7, #4
 8012e2a:	d113      	bne.n	8012e54 <nd6_send_ns+0x3c>
      ip6_addr_isvalid(netif_ip6_addr_state(netif,0))) {
 8012e2c:	f896 3078 	ldrb.w	r3, [r6, #120]	; 0x78
  if (!(flags & ND6_SEND_FLAG_ANY_SRC) &&
 8012e30:	f013 0f10 	tst.w	r3, #16
 8012e34:	d054      	beq.n	8012ee0 <nd6_send_ns+0xc8>
    src_addr = netif_ip6_addr(netif, 0);
 8012e36:	f106 083c 	add.w	r8, r6, #60	; 0x3c
    lladdr_opt_len = ((netif->hwaddr_len + 2) + 7) >> 3;
 8012e3a:	f896 50c2 	ldrb.w	r5, [r6, #194]	; 0xc2
 8012e3e:	3509      	adds	r5, #9
 8012e40:	08ed      	lsrs	r5, r5, #3
 8012e42:	e00a      	b.n	8012e5a <nd6_send_ns+0x42>
  LWIP_ASSERT("target address is required", target_addr != NULL);
 8012e44:	4b30      	ldr	r3, [pc, #192]	; (8012f08 <nd6_send_ns+0xf0>)
 8012e46:	f240 42a4 	movw	r2, #1188	; 0x4a4
 8012e4a:	4930      	ldr	r1, [pc, #192]	; (8012f0c <nd6_send_ns+0xf4>)
 8012e4c:	4830      	ldr	r0, [pc, #192]	; (8012f10 <nd6_send_ns+0xf8>)
 8012e4e:	f001 fbd1 	bl	80145f4 <iprintf>
 8012e52:	e7e8      	b.n	8012e26 <nd6_send_ns+0xe>
    lladdr_opt_len = 0;
 8012e54:	2500      	movs	r5, #0
    src_addr = IP6_ADDR_ANY6;
 8012e56:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8012f18 <nd6_send_ns+0x100>
  p = pbuf_alloc(PBUF_IP, sizeof(struct ns_header) + (lladdr_opt_len << 3), PBUF_RAM);
 8012e5a:	00e9      	lsls	r1, r5, #3
 8012e5c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e60:	3118      	adds	r1, #24
 8012e62:	2036      	movs	r0, #54	; 0x36
 8012e64:	f7f5 fcc2 	bl	80087ec <pbuf_alloc>
  if (p == NULL) {
 8012e68:	4681      	mov	r9, r0
 8012e6a:	2800      	cmp	r0, #0
 8012e6c:	d035      	beq.n	8012eda <nd6_send_ns+0xc2>
  ns_hdr = (struct ns_header *)p->payload;
 8012e6e:	6843      	ldr	r3, [r0, #4]
  ns_hdr->type = ICMP6_TYPE_NS;
 8012e70:	2287      	movs	r2, #135	; 0x87
 8012e72:	701a      	strb	r2, [r3, #0]
  ns_hdr->code = 0;
 8012e74:	2200      	movs	r2, #0
 8012e76:	705a      	strb	r2, [r3, #1]
  ns_hdr->chksum = 0;
 8012e78:	709a      	strb	r2, [r3, #2]
 8012e7a:	70da      	strb	r2, [r3, #3]
  ns_hdr->reserved = 0;
 8012e7c:	711a      	strb	r2, [r3, #4]
 8012e7e:	715a      	strb	r2, [r3, #5]
 8012e80:	719a      	strb	r2, [r3, #6]
 8012e82:	71da      	strb	r2, [r3, #7]
  ip6_addr_copy_to_packed(ns_hdr->target_address, *target_addr);
 8012e84:	6822      	ldr	r2, [r4, #0]
 8012e86:	609a      	str	r2, [r3, #8]
 8012e88:	6862      	ldr	r2, [r4, #4]
 8012e8a:	60da      	str	r2, [r3, #12]
 8012e8c:	68a2      	ldr	r2, [r4, #8]
 8012e8e:	611a      	str	r2, [r3, #16]
 8012e90:	68e2      	ldr	r2, [r4, #12]
 8012e92:	615a      	str	r2, [r3, #20]
  if (lladdr_opt_len != 0) {
 8012e94:	bb45      	cbnz	r5, 8012ee8 <nd6_send_ns+0xd0>
  if (flags & ND6_SEND_FLAG_MULTICAST_DEST) {
 8012e96:	f017 0f01 	tst.w	r7, #1
 8012e9a:	d00d      	beq.n	8012eb8 <nd6_send_ns+0xa0>
    ip6_addr_set_solicitednode(&multicast_address, target_addr->addr[3]);
 8012e9c:	4b1d      	ldr	r3, [pc, #116]	; (8012f14 <nd6_send_ns+0xfc>)
 8012e9e:	f240 22ff 	movw	r2, #767	; 0x2ff
 8012ea2:	601a      	str	r2, [r3, #0]
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	605a      	str	r2, [r3, #4]
 8012ea8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012eac:	609a      	str	r2, [r3, #8]
 8012eae:	68e2      	ldr	r2, [r4, #12]
 8012eb0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8012eb4:	60da      	str	r2, [r3, #12]
    target_addr = &multicast_address;
 8012eb6:	461c      	mov	r4, r3
  ip6_output_if(p, (src_addr == IP6_ADDR_ANY6) ? NULL : src_addr, target_addr,
 8012eb8:	4b17      	ldr	r3, [pc, #92]	; (8012f18 <nd6_send_ns+0x100>)
 8012eba:	4598      	cmp	r8, r3
 8012ebc:	d020      	beq.n	8012f00 <nd6_send_ns+0xe8>
 8012ebe:	9602      	str	r6, [sp, #8]
 8012ec0:	233a      	movs	r3, #58	; 0x3a
 8012ec2:	9301      	str	r3, [sp, #4]
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	9300      	str	r3, [sp, #0]
 8012ec8:	23ff      	movs	r3, #255	; 0xff
 8012eca:	4622      	mov	r2, r4
 8012ecc:	4641      	mov	r1, r8
 8012ece:	4648      	mov	r0, r9
 8012ed0:	f7fe fc34 	bl	801173c <ip6_output_if>
  pbuf_free(p);
 8012ed4:	4648      	mov	r0, r9
 8012ed6:	f7f5 fc27 	bl	8008728 <pbuf_free>
}
 8012eda:	b005      	add	sp, #20
 8012edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lladdr_opt_len = 0;
 8012ee0:	2500      	movs	r5, #0
    src_addr = IP6_ADDR_ANY6;
 8012ee2:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8012f18 <nd6_send_ns+0x100>
 8012ee6:	e7b8      	b.n	8012e5a <nd6_send_ns+0x42>
    struct lladdr_option *lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct ns_header));
 8012ee8:	6840      	ldr	r0, [r0, #4]
    lladdr_opt->type = ND6_OPTION_TYPE_SOURCE_LLADDR;
 8012eea:	2301      	movs	r3, #1
 8012eec:	7603      	strb	r3, [r0, #24]
    lladdr_opt->length = (u8_t)lladdr_opt_len;
 8012eee:	7645      	strb	r5, [r0, #25]
    SMEMCPY(lladdr_opt->addr, netif->hwaddr, netif->hwaddr_len);
 8012ef0:	f896 20c2 	ldrb.w	r2, [r6, #194]	; 0xc2
 8012ef4:	f106 01bc 	add.w	r1, r6, #188	; 0xbc
 8012ef8:	301a      	adds	r0, #26
 8012efa:	f001 fb4e 	bl	801459a <memcpy>
 8012efe:	e7ca      	b.n	8012e96 <nd6_send_ns+0x7e>
  ip6_output_if(p, (src_addr == IP6_ADDR_ANY6) ? NULL : src_addr, target_addr,
 8012f00:	f04f 0800 	mov.w	r8, #0
 8012f04:	e7db      	b.n	8012ebe <nd6_send_ns+0xa6>
 8012f06:	bf00      	nop
 8012f08:	080186e8 	.word	0x080186e8
 8012f0c:	08018730 	.word	0x08018730
 8012f10:	08015608 	.word	0x08015608
 8012f14:	2000189c 	.word	0x2000189c
 8012f18:	0801857c 	.word	0x0801857c

08012f1c <nd6_send_neighbor_cache_probe>:
{
 8012f1c:	b508      	push	{r3, lr}
  nd6_send_ns(entry->netif, &entry->next_hop_address, flags);
 8012f1e:	460a      	mov	r2, r1
 8012f20:	4601      	mov	r1, r0
 8012f22:	6900      	ldr	r0, [r0, #16]
 8012f24:	f7ff ff78 	bl	8012e18 <nd6_send_ns>
}
 8012f28:	bd08      	pop	{r3, pc}
	...

08012f2c <nd6_new_router>:
{
 8012f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f2e:	4605      	mov	r5, r0
 8012f30:	460e      	mov	r6, r1
  neighbor_index = nd6_find_neighbor_cache_entry(router_addr);
 8012f32:	f7ff fa07 	bl	8012344 <nd6_find_neighbor_cache_entry>
  if (neighbor_index < 0) {
 8012f36:	1e04      	subs	r4, r0, #0
 8012f38:	db0b      	blt.n	8012f52 <nd6_new_router+0x26>
  neighbor_cache[neighbor_index].isrouter = 1;
 8012f3a:	4621      	mov	r1, r4
 8012f3c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8012f40:	00e2      	lsls	r2, r4, #3
 8012f42:	4b39      	ldr	r3, [pc, #228]	; (8013028 <nd6_new_router+0xfc>)
 8012f44:	4413      	add	r3, r2
 8012f46:	2201      	movs	r2, #1
 8012f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  free_router_index = LWIP_ND6_NUM_ROUTERS;
 8012f4c:	2003      	movs	r0, #3
  for (router_index = LWIP_ND6_NUM_ROUTERS - 1; router_index >= 0; router_index--) {
 8012f4e:	2302      	movs	r3, #2
 8012f50:	e03a      	b.n	8012fc8 <nd6_new_router+0x9c>
    neighbor_index = nd6_new_neighbor_cache_entry();
 8012f52:	f7ff fda3 	bl	8012a9c <nd6_new_neighbor_cache_entry>
    if (neighbor_index < 0) {
 8012f56:	1e04      	subs	r4, r0, #0
 8012f58:	db60      	blt.n	801301c <nd6_new_router+0xf0>
    ip6_addr_set(&(neighbor_cache[neighbor_index].next_hop_address), router_addr);
 8012f5a:	b35d      	cbz	r5, 8012fb4 <nd6_new_router+0x88>
 8012f5c:	6828      	ldr	r0, [r5, #0]
 8012f5e:	4622      	mov	r2, r4
 8012f60:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8012f64:	00cb      	lsls	r3, r1, #3
 8012f66:	4930      	ldr	r1, [pc, #192]	; (8013028 <nd6_new_router+0xfc>)
 8012f68:	50c8      	str	r0, [r1, r3]
 8012f6a:	b32d      	cbz	r5, 8012fb8 <nd6_new_router+0x8c>
 8012f6c:	6868      	ldr	r0, [r5, #4]
 8012f6e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8012f72:	00d9      	lsls	r1, r3, #3
 8012f74:	4b2c      	ldr	r3, [pc, #176]	; (8013028 <nd6_new_router+0xfc>)
 8012f76:	440b      	add	r3, r1
 8012f78:	6058      	str	r0, [r3, #4]
 8012f7a:	b1fd      	cbz	r5, 8012fbc <nd6_new_router+0x90>
 8012f7c:	68a8      	ldr	r0, [r5, #8]
 8012f7e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8012f82:	00d9      	lsls	r1, r3, #3
 8012f84:	4b28      	ldr	r3, [pc, #160]	; (8013028 <nd6_new_router+0xfc>)
 8012f86:	440b      	add	r3, r1
 8012f88:	6098      	str	r0, [r3, #8]
 8012f8a:	b1cd      	cbz	r5, 8012fc0 <nd6_new_router+0x94>
 8012f8c:	68ef      	ldr	r7, [r5, #12]
 8012f8e:	4826      	ldr	r0, [pc, #152]	; (8013028 <nd6_new_router+0xfc>)
 8012f90:	0095      	lsls	r5, r2, #2
 8012f92:	18a9      	adds	r1, r5, r2
 8012f94:	00cb      	lsls	r3, r1, #3
 8012f96:	4403      	add	r3, r0
 8012f98:	60df      	str	r7, [r3, #12]
    neighbor_cache[neighbor_index].netif = netif;
 8012f9a:	611e      	str	r6, [r3, #16]
    neighbor_cache[neighbor_index].q = NULL;
 8012f9c:	2100      	movs	r1, #0
 8012f9e:	61d9      	str	r1, [r3, #28]
    neighbor_cache[neighbor_index].state = ND6_INCOMPLETE;
 8012fa0:	2101      	movs	r1, #1
 8012fa2:	f883 1020 	strb.w	r1, [r3, #32]
    neighbor_cache[neighbor_index].counter.probes_sent = 1;
 8012fa6:	6259      	str	r1, [r3, #36]	; 0x24
    nd6_send_neighbor_cache_probe(&neighbor_cache[neighbor_index], ND6_SEND_FLAG_MULTICAST_DEST);
 8012fa8:	442a      	add	r2, r5
 8012faa:	00d3      	lsls	r3, r2, #3
 8012fac:	4418      	add	r0, r3
 8012fae:	f7ff ffb5 	bl	8012f1c <nd6_send_neighbor_cache_probe>
 8012fb2:	e7c2      	b.n	8012f3a <nd6_new_router+0xe>
    ip6_addr_set(&(neighbor_cache[neighbor_index].next_hop_address), router_addr);
 8012fb4:	2000      	movs	r0, #0
 8012fb6:	e7d2      	b.n	8012f5e <nd6_new_router+0x32>
 8012fb8:	2000      	movs	r0, #0
 8012fba:	e7d8      	b.n	8012f6e <nd6_new_router+0x42>
 8012fbc:	2000      	movs	r0, #0
 8012fbe:	e7de      	b.n	8012f7e <nd6_new_router+0x52>
 8012fc0:	2700      	movs	r7, #0
 8012fc2:	e7e4      	b.n	8012f8e <nd6_new_router+0x62>
  for (router_index = LWIP_ND6_NUM_ROUTERS - 1; router_index >= 0; router_index--) {
 8012fc4:	3b01      	subs	r3, #1
 8012fc6:	b25b      	sxtb	r3, r3
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	db0f      	blt.n	8012fec <nd6_new_router+0xc0>
    if(default_router_list[router_index].neighbor_entry == &(neighbor_cache[neighbor_index])){ 
 8012fcc:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8012fd0:	00a2      	lsls	r2, r4, #2
 8012fd2:	4c16      	ldr	r4, [pc, #88]	; (801302c <nd6_new_router+0x100>)
 8012fd4:	58a5      	ldr	r5, [r4, r2]
 8012fd6:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8012fda:	00e2      	lsls	r2, r4, #3
 8012fdc:	4c12      	ldr	r4, [pc, #72]	; (8013028 <nd6_new_router+0xfc>)
 8012fde:	4422      	add	r2, r4
 8012fe0:	4295      	cmp	r5, r2
 8012fe2:	d01e      	beq.n	8013022 <nd6_new_router+0xf6>
    if (default_router_list[router_index].neighbor_entry == NULL) {
 8012fe4:	2d00      	cmp	r5, #0
 8012fe6:	d1ed      	bne.n	8012fc4 <nd6_new_router+0x98>
      free_router_index = router_index;
 8012fe8:	4618      	mov	r0, r3
 8012fea:	e7eb      	b.n	8012fc4 <nd6_new_router+0x98>
  if (free_router_index < LWIP_ND6_NUM_ROUTERS) {
 8012fec:	2802      	cmp	r0, #2
 8012fee:	dc0a      	bgt.n	8013006 <nd6_new_router+0xda>
    default_router_list[free_router_index].neighbor_entry = &(neighbor_cache[neighbor_index]);
 8012ff0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8012ff4:	00cb      	lsls	r3, r1, #3
 8012ff6:	4a0c      	ldr	r2, [pc, #48]	; (8013028 <nd6_new_router+0xfc>)
 8012ff8:	4413      	add	r3, r2
 8012ffa:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8012ffe:	008a      	lsls	r2, r1, #2
 8013000:	490a      	ldr	r1, [pc, #40]	; (801302c <nd6_new_router+0x100>)
 8013002:	508b      	str	r3, [r1, r2]
}
 8013004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  neighbor_cache[neighbor_index].isrouter = 0;
 8013006:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801300a:	00ca      	lsls	r2, r1, #3
 801300c:	4b06      	ldr	r3, [pc, #24]	; (8013028 <nd6_new_router+0xfc>)
 801300e:	4413      	add	r3, r2
 8013010:	2200      	movs	r2, #0
 8013012:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  return -1;
 8013016:	f04f 30ff 	mov.w	r0, #4294967295
 801301a:	e7f3      	b.n	8013004 <nd6_new_router+0xd8>
      return -1;
 801301c:	f04f 30ff 	mov.w	r0, #4294967295
 8013020:	e7f0      	b.n	8013004 <nd6_new_router+0xd8>
      return router_index; 
 8013022:	4618      	mov	r0, r3
 8013024:	e7ee      	b.n	8013004 <nd6_new_router+0xd8>
 8013026:	bf00      	nop
 8013028:	20008c94 	.word	0x20008c94
 801302c:	2000902c 	.word	0x2000902c

08013030 <nd6_get_next_hop_entry>:
{
 8013030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013034:	4604      	mov	r4, r0
 8013036:	460e      	mov	r6, r1
  if (ip6_addr_cmp(ip6addr, &(destination_cache[nd6_cached_destination_index].destination_addr))) {
 8013038:	6800      	ldr	r0, [r0, #0]
 801303a:	4bac      	ldr	r3, [pc, #688]	; (80132ec <nd6_get_next_hop_entry+0x2bc>)
 801303c:	781b      	ldrb	r3, [r3, #0]
 801303e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8013042:	00ca      	lsls	r2, r1, #3
 8013044:	49aa      	ldr	r1, [pc, #680]	; (80132f0 <nd6_get_next_hop_entry+0x2c0>)
 8013046:	588a      	ldr	r2, [r1, r2]
 8013048:	4290      	cmp	r0, r2
 801304a:	d036      	beq.n	80130ba <nd6_get_next_hop_entry+0x8a>
    dst_idx = nd6_find_destination_cache_entry(ip6addr);
 801304c:	4620      	mov	r0, r4
 801304e:	f7ff f9ab 	bl	80123a8 <nd6_find_destination_cache_entry>
    if (dst_idx >= 0) {
 8013052:	1e05      	subs	r5, r0, #0
 8013054:	db52      	blt.n	80130fc <nd6_get_next_hop_entry+0xcc>
      LWIP_ASSERT("type overflow", (size_t)dst_idx < NETIF_ADDR_IDX_MAX);
 8013056:	b2ab      	uxth	r3, r5
 8013058:	2b7e      	cmp	r3, #126	; 0x7e
 801305a:	d847      	bhi.n	80130ec <nd6_get_next_hop_entry+0xbc>
      nd6_cached_destination_index = (netif_addr_idx_t)dst_idx;
 801305c:	4ba3      	ldr	r3, [pc, #652]	; (80132ec <nd6_get_next_hop_entry+0x2bc>)
 801305e:	701d      	strb	r5, [r3, #0]
  if (ip6_addr_cmp(&(destination_cache[nd6_cached_destination_index].next_hop_addr),
 8013060:	4ba2      	ldr	r3, [pc, #648]	; (80132ec <nd6_get_next_hop_entry+0x2bc>)
 8013062:	781b      	ldrb	r3, [r3, #0]
 8013064:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8013068:	00d1      	lsls	r1, r2, #3
 801306a:	4aa1      	ldr	r2, [pc, #644]	; (80132f0 <nd6_get_next_hop_entry+0x2c0>)
 801306c:	440a      	add	r2, r1
 801306e:	6914      	ldr	r4, [r2, #16]
 8013070:	4aa0      	ldr	r2, [pc, #640]	; (80132f4 <nd6_get_next_hop_entry+0x2c4>)
 8013072:	7812      	ldrb	r2, [r2, #0]
 8013074:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8013078:	00c1      	lsls	r1, r0, #3
 801307a:	489f      	ldr	r0, [pc, #636]	; (80132f8 <nd6_get_next_hop_entry+0x2c8>)
 801307c:	5841      	ldr	r1, [r0, r1]
 801307e:	428c      	cmp	r4, r1
 8013080:	f000 80cc 	beq.w	801321c <nd6_get_next_hop_entry+0x1ec>
    i = nd6_find_neighbor_cache_entry(&(destination_cache[nd6_cached_destination_index].next_hop_addr));
 8013084:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8013088:	00d8      	lsls	r0, r3, #3
 801308a:	3010      	adds	r0, #16
 801308c:	4b98      	ldr	r3, [pc, #608]	; (80132f0 <nd6_get_next_hop_entry+0x2c0>)
 801308e:	4418      	add	r0, r3
 8013090:	f7ff f958 	bl	8012344 <nd6_find_neighbor_cache_entry>
    if (i >= 0) {
 8013094:	2800      	cmp	r0, #0
 8013096:	f2c0 80ef 	blt.w	8013278 <nd6_get_next_hop_entry+0x248>
      nd6_cached_neighbor_index = i;
 801309a:	4b96      	ldr	r3, [pc, #600]	; (80132f4 <nd6_get_next_hop_entry+0x2c4>)
 801309c:	7018      	strb	r0, [r3, #0]
  destination_cache[nd6_cached_destination_index].age = 0;
 801309e:	4b93      	ldr	r3, [pc, #588]	; (80132ec <nd6_get_next_hop_entry+0x2bc>)
 80130a0:	781b      	ldrb	r3, [r3, #0]
 80130a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80130a6:	00da      	lsls	r2, r3, #3
 80130a8:	4b91      	ldr	r3, [pc, #580]	; (80132f0 <nd6_get_next_hop_entry+0x2c0>)
 80130aa:	4413      	add	r3, r2
 80130ac:	2200      	movs	r2, #0
 80130ae:	625a      	str	r2, [r3, #36]	; 0x24
  return nd6_cached_neighbor_index;
 80130b0:	4b90      	ldr	r3, [pc, #576]	; (80132f4 <nd6_get_next_hop_entry+0x2c4>)
 80130b2:	f993 0000 	ldrsb.w	r0, [r3]
}
 80130b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (ip6_addr_cmp(ip6addr, &(destination_cache[nd6_cached_destination_index].destination_addr))) {
 80130ba:	6860      	ldr	r0, [r4, #4]
 80130bc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80130c0:	00d1      	lsls	r1, r2, #3
 80130c2:	4a8b      	ldr	r2, [pc, #556]	; (80132f0 <nd6_get_next_hop_entry+0x2c0>)
 80130c4:	440a      	add	r2, r1
 80130c6:	6852      	ldr	r2, [r2, #4]
 80130c8:	4290      	cmp	r0, r2
 80130ca:	d1bf      	bne.n	801304c <nd6_get_next_hop_entry+0x1c>
 80130cc:	68a0      	ldr	r0, [r4, #8]
 80130ce:	4a88      	ldr	r2, [pc, #544]	; (80132f0 <nd6_get_next_hop_entry+0x2c0>)
 80130d0:	440a      	add	r2, r1
 80130d2:	6892      	ldr	r2, [r2, #8]
 80130d4:	4290      	cmp	r0, r2
 80130d6:	d1b9      	bne.n	801304c <nd6_get_next_hop_entry+0x1c>
 80130d8:	68e1      	ldr	r1, [r4, #12]
 80130da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80130de:	00da      	lsls	r2, r3, #3
 80130e0:	4b83      	ldr	r3, [pc, #524]	; (80132f0 <nd6_get_next_hop_entry+0x2c0>)
 80130e2:	4413      	add	r3, r2
 80130e4:	68db      	ldr	r3, [r3, #12]
 80130e6:	4299      	cmp	r1, r3
 80130e8:	d1b0      	bne.n	801304c <nd6_get_next_hop_entry+0x1c>
 80130ea:	e7b9      	b.n	8013060 <nd6_get_next_hop_entry+0x30>
      LWIP_ASSERT("type overflow", (size_t)dst_idx < NETIF_ADDR_IDX_MAX);
 80130ec:	4b83      	ldr	r3, [pc, #524]	; (80132fc <nd6_get_next_hop_entry+0x2cc>)
 80130ee:	f240 72a2 	movw	r2, #1954	; 0x7a2
 80130f2:	4983      	ldr	r1, [pc, #524]	; (8013300 <nd6_get_next_hop_entry+0x2d0>)
 80130f4:	4883      	ldr	r0, [pc, #524]	; (8013304 <nd6_get_next_hop_entry+0x2d4>)
 80130f6:	f001 fa7d 	bl	80145f4 <iprintf>
 80130fa:	e7af      	b.n	801305c <nd6_get_next_hop_entry+0x2c>
      dst_idx = nd6_new_destination_cache_entry();
 80130fc:	f7ff f986 	bl	801240c <nd6_new_destination_cache_entry>
      if (dst_idx >= 0) {
 8013100:	1e05      	subs	r5, r0, #0
 8013102:	f2c0 80ec 	blt.w	80132de <nd6_get_next_hop_entry+0x2ae>
        LWIP_ASSERT("type overflow", (size_t)dst_idx < NETIF_ADDR_IDX_MAX);
 8013106:	b2ab      	uxth	r3, r5
 8013108:	2b7e      	cmp	r3, #126	; 0x7e
 801310a:	d847      	bhi.n	801319c <nd6_get_next_hop_entry+0x16c>
        nd6_cached_destination_index = (netif_addr_idx_t)dst_idx;
 801310c:	b2ed      	uxtb	r5, r5
 801310e:	4b77      	ldr	r3, [pc, #476]	; (80132ec <nd6_get_next_hop_entry+0x2bc>)
 8013110:	701d      	strb	r5, [r3, #0]
      ip6_addr_set(&(destination_cache[nd6_cached_destination_index].destination_addr), ip6addr);
 8013112:	2c00      	cmp	r4, #0
 8013114:	d04a      	beq.n	80131ac <nd6_get_next_hop_entry+0x17c>
 8013116:	6821      	ldr	r1, [r4, #0]
 8013118:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 801311c:	00d3      	lsls	r3, r2, #3
 801311e:	4a74      	ldr	r2, [pc, #464]	; (80132f0 <nd6_get_next_hop_entry+0x2c0>)
 8013120:	50d1      	str	r1, [r2, r3]
 8013122:	2c00      	cmp	r4, #0
 8013124:	d044      	beq.n	80131b0 <nd6_get_next_hop_entry+0x180>
 8013126:	6861      	ldr	r1, [r4, #4]
 8013128:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 801312c:	00da      	lsls	r2, r3, #3
 801312e:	4b70      	ldr	r3, [pc, #448]	; (80132f0 <nd6_get_next_hop_entry+0x2c0>)
 8013130:	4413      	add	r3, r2
 8013132:	6059      	str	r1, [r3, #4]
 8013134:	2c00      	cmp	r4, #0
 8013136:	d03d      	beq.n	80131b4 <nd6_get_next_hop_entry+0x184>
 8013138:	68a1      	ldr	r1, [r4, #8]
 801313a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 801313e:	00da      	lsls	r2, r3, #3
 8013140:	4b6b      	ldr	r3, [pc, #428]	; (80132f0 <nd6_get_next_hop_entry+0x2c0>)
 8013142:	4413      	add	r3, r2
 8013144:	6099      	str	r1, [r3, #8]
 8013146:	2c00      	cmp	r4, #0
 8013148:	d036      	beq.n	80131b8 <nd6_get_next_hop_entry+0x188>
 801314a:	68e1      	ldr	r1, [r4, #12]
 801314c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8013150:	00da      	lsls	r2, r3, #3
 8013152:	4b67      	ldr	r3, [pc, #412]	; (80132f0 <nd6_get_next_hop_entry+0x2c0>)
 8013154:	4413      	add	r3, r2
 8013156:	60d9      	str	r1, [r3, #12]
      if (ip6_addr_islinklocal(ip6addr) ||
 8013158:	6823      	ldr	r3, [r4, #0]
 801315a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801315e:	041b      	lsls	r3, r3, #16
 8013160:	0c1b      	lsrs	r3, r3, #16
 8013162:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8013166:	4293      	cmp	r3, r2
 8013168:	d004      	beq.n	8013174 <nd6_get_next_hop_entry+0x144>
          nd6_is_prefix_in_netif(ip6addr, netif)) {
 801316a:	4631      	mov	r1, r6
 801316c:	4620      	mov	r0, r4
 801316e:	f7ff f981 	bl	8012474 <nd6_is_prefix_in_netif>
      if (ip6_addr_islinklocal(ip6addr) ||
 8013172:	b318      	cbz	r0, 80131bc <nd6_get_next_hop_entry+0x18c>
        destination_cache[nd6_cached_destination_index].pmtu = netif_mtu6(netif);
 8013174:	f8b6 40ba 	ldrh.w	r4, [r6, #186]	; 0xba
 8013178:	4a5d      	ldr	r2, [pc, #372]	; (80132f0 <nd6_get_next_hop_entry+0x2c0>)
 801317a:	00a9      	lsls	r1, r5, #2
 801317c:	194b      	adds	r3, r1, r5
 801317e:	00d8      	lsls	r0, r3, #3
 8013180:	1813      	adds	r3, r2, r0
 8013182:	841c      	strh	r4, [r3, #32]
        ip6_addr_copy(destination_cache[nd6_cached_destination_index].next_hop_addr, destination_cache[nd6_cached_destination_index].destination_addr);
 8013184:	5810      	ldr	r0, [r2, r0]
 8013186:	6118      	str	r0, [r3, #16]
 8013188:	6858      	ldr	r0, [r3, #4]
 801318a:	6158      	str	r0, [r3, #20]
 801318c:	6898      	ldr	r0, [r3, #8]
 801318e:	6198      	str	r0, [r3, #24]
 8013190:	68d8      	ldr	r0, [r3, #12]
 8013192:	440d      	add	r5, r1
 8013194:	00eb      	lsls	r3, r5, #3
 8013196:	441a      	add	r2, r3
 8013198:	61d0      	str	r0, [r2, #28]
 801319a:	e761      	b.n	8013060 <nd6_get_next_hop_entry+0x30>
        LWIP_ASSERT("type overflow", (size_t)dst_idx < NETIF_ADDR_IDX_MAX);
 801319c:	4b57      	ldr	r3, [pc, #348]	; (80132fc <nd6_get_next_hop_entry+0x2cc>)
 801319e:	f240 72a9 	movw	r2, #1961	; 0x7a9
 80131a2:	4957      	ldr	r1, [pc, #348]	; (8013300 <nd6_get_next_hop_entry+0x2d0>)
 80131a4:	4857      	ldr	r0, [pc, #348]	; (8013304 <nd6_get_next_hop_entry+0x2d4>)
 80131a6:	f001 fa25 	bl	80145f4 <iprintf>
 80131aa:	e7af      	b.n	801310c <nd6_get_next_hop_entry+0xdc>
      ip6_addr_set(&(destination_cache[nd6_cached_destination_index].destination_addr), ip6addr);
 80131ac:	2100      	movs	r1, #0
 80131ae:	e7b3      	b.n	8013118 <nd6_get_next_hop_entry+0xe8>
 80131b0:	2100      	movs	r1, #0
 80131b2:	e7b9      	b.n	8013128 <nd6_get_next_hop_entry+0xf8>
 80131b4:	2100      	movs	r1, #0
 80131b6:	e7c0      	b.n	801313a <nd6_get_next_hop_entry+0x10a>
 80131b8:	2100      	movs	r1, #0
 80131ba:	e7c7      	b.n	801314c <nd6_get_next_hop_entry+0x11c>
        i = nd6_select_router(ip6addr, netif);
 80131bc:	4631      	mov	r1, r6
 80131be:	4620      	mov	r0, r4
 80131c0:	f7ff f9b0 	bl	8012524 <nd6_select_router>
        if (i < 0) {
 80131c4:	2800      	cmp	r0, #0
 80131c6:	db1a      	blt.n	80131fe <nd6_get_next_hop_entry+0x1ce>
        destination_cache[nd6_cached_destination_index].pmtu = netif_mtu6(netif); /* Start with netif mtu, correct through ICMPv6 if necessary */
 80131c8:	4b48      	ldr	r3, [pc, #288]	; (80132ec <nd6_get_next_hop_entry+0x2bc>)
 80131ca:	781c      	ldrb	r4, [r3, #0]
 80131cc:	f8b6 70ba 	ldrh.w	r7, [r6, #186]	; 0xba
 80131d0:	4947      	ldr	r1, [pc, #284]	; (80132f0 <nd6_get_next_hop_entry+0x2c0>)
 80131d2:	00a2      	lsls	r2, r4, #2
 80131d4:	1915      	adds	r5, r2, r4
 80131d6:	00eb      	lsls	r3, r5, #3
 80131d8:	440b      	add	r3, r1
 80131da:	841f      	strh	r7, [r3, #32]
        ip6_addr_copy(destination_cache[nd6_cached_destination_index].next_hop_addr, default_router_list[i].neighbor_entry->next_hop_address);
 80131dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80131e0:	0085      	lsls	r5, r0, #2
 80131e2:	4849      	ldr	r0, [pc, #292]	; (8013308 <nd6_get_next_hop_entry+0x2d8>)
 80131e4:	5940      	ldr	r0, [r0, r5]
 80131e6:	6805      	ldr	r5, [r0, #0]
 80131e8:	611d      	str	r5, [r3, #16]
 80131ea:	6845      	ldr	r5, [r0, #4]
 80131ec:	615d      	str	r5, [r3, #20]
 80131ee:	6885      	ldr	r5, [r0, #8]
 80131f0:	619d      	str	r5, [r3, #24]
 80131f2:	68c0      	ldr	r0, [r0, #12]
 80131f4:	1913      	adds	r3, r2, r4
 80131f6:	00da      	lsls	r2, r3, #3
 80131f8:	4411      	add	r1, r2
 80131fa:	61c8      	str	r0, [r1, #28]
 80131fc:	e730      	b.n	8013060 <nd6_get_next_hop_entry+0x30>
          ip6_addr_set_any(&(destination_cache[nd6_cached_destination_index].destination_addr));
 80131fe:	4b3b      	ldr	r3, [pc, #236]	; (80132ec <nd6_get_next_hop_entry+0x2bc>)
 8013200:	781b      	ldrb	r3, [r3, #0]
 8013202:	483b      	ldr	r0, [pc, #236]	; (80132f0 <nd6_get_next_hop_entry+0x2c0>)
 8013204:	2228      	movs	r2, #40	; 0x28
 8013206:	fb02 f203 	mul.w	r2, r2, r3
 801320a:	1881      	adds	r1, r0, r2
 801320c:	2300      	movs	r3, #0
 801320e:	5083      	str	r3, [r0, r2]
 8013210:	604b      	str	r3, [r1, #4]
 8013212:	608b      	str	r3, [r1, #8]
 8013214:	60cb      	str	r3, [r1, #12]
          return ERR_RTE;
 8013216:	f06f 0003 	mvn.w	r0, #3
 801321a:	e74c      	b.n	80130b6 <nd6_get_next_hop_entry+0x86>
  if (ip6_addr_cmp(&(destination_cache[nd6_cached_destination_index].next_hop_addr),
 801321c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8013220:	00c8      	lsls	r0, r1, #3
 8013222:	4933      	ldr	r1, [pc, #204]	; (80132f0 <nd6_get_next_hop_entry+0x2c0>)
 8013224:	4401      	add	r1, r0
 8013226:	694c      	ldr	r4, [r1, #20]
 8013228:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 801322c:	00c8      	lsls	r0, r1, #3
 801322e:	4932      	ldr	r1, [pc, #200]	; (80132f8 <nd6_get_next_hop_entry+0x2c8>)
 8013230:	4401      	add	r1, r0
 8013232:	6849      	ldr	r1, [r1, #4]
 8013234:	428c      	cmp	r4, r1
 8013236:	f47f af25 	bne.w	8013084 <nd6_get_next_hop_entry+0x54>
 801323a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801323e:	00c8      	lsls	r0, r1, #3
 8013240:	492b      	ldr	r1, [pc, #172]	; (80132f0 <nd6_get_next_hop_entry+0x2c0>)
 8013242:	4401      	add	r1, r0
 8013244:	698c      	ldr	r4, [r1, #24]
 8013246:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 801324a:	00c8      	lsls	r0, r1, #3
 801324c:	492a      	ldr	r1, [pc, #168]	; (80132f8 <nd6_get_next_hop_entry+0x2c8>)
 801324e:	4401      	add	r1, r0
 8013250:	6889      	ldr	r1, [r1, #8]
 8013252:	428c      	cmp	r4, r1
 8013254:	f47f af16 	bne.w	8013084 <nd6_get_next_hop_entry+0x54>
 8013258:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801325c:	00c8      	lsls	r0, r1, #3
 801325e:	4924      	ldr	r1, [pc, #144]	; (80132f0 <nd6_get_next_hop_entry+0x2c0>)
 8013260:	4401      	add	r1, r0
 8013262:	69c8      	ldr	r0, [r1, #28]
 8013264:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8013268:	00d1      	lsls	r1, r2, #3
 801326a:	4a23      	ldr	r2, [pc, #140]	; (80132f8 <nd6_get_next_hop_entry+0x2c8>)
 801326c:	440a      	add	r2, r1
 801326e:	68d2      	ldr	r2, [r2, #12]
 8013270:	4290      	cmp	r0, r2
 8013272:	f47f af07 	bne.w	8013084 <nd6_get_next_hop_entry+0x54>
 8013276:	e712      	b.n	801309e <nd6_get_next_hop_entry+0x6e>
      i = nd6_new_neighbor_cache_entry();
 8013278:	f7ff fc10 	bl	8012a9c <nd6_new_neighbor_cache_entry>
      if (i >= 0) {
 801327c:	2800      	cmp	r0, #0
 801327e:	db31      	blt.n	80132e4 <nd6_get_next_hop_entry+0x2b4>
        nd6_cached_neighbor_index = i;
 8013280:	4b1c      	ldr	r3, [pc, #112]	; (80132f4 <nd6_get_next_hop_entry+0x2c4>)
 8013282:	7018      	strb	r0, [r3, #0]
      ip6_addr_copy(neighbor_cache[i].next_hop_address,
 8013284:	4b19      	ldr	r3, [pc, #100]	; (80132ec <nd6_get_next_hop_entry+0x2bc>)
 8013286:	f893 e000 	ldrb.w	lr, [r3]
 801328a:	f8df c064 	ldr.w	ip, [pc, #100]	; 80132f0 <nd6_get_next_hop_entry+0x2c0>
 801328e:	ea4f 018e 	mov.w	r1, lr, lsl #2
 8013292:	eb01 030e 	add.w	r3, r1, lr
 8013296:	00da      	lsls	r2, r3, #3
 8013298:	4462      	add	r2, ip
 801329a:	4f17      	ldr	r7, [pc, #92]	; (80132f8 <nd6_get_next_hop_entry+0x2c8>)
 801329c:	0084      	lsls	r4, r0, #2
 801329e:	1823      	adds	r3, r4, r0
 80132a0:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80132a4:	eb07 0308 	add.w	r3, r7, r8
 80132a8:	6915      	ldr	r5, [r2, #16]
 80132aa:	f847 5008 	str.w	r5, [r7, r8]
 80132ae:	6955      	ldr	r5, [r2, #20]
 80132b0:	605d      	str	r5, [r3, #4]
 80132b2:	6992      	ldr	r2, [r2, #24]
 80132b4:	609a      	str	r2, [r3, #8]
 80132b6:	eb01 020e 	add.w	r2, r1, lr
 80132ba:	00d1      	lsls	r1, r2, #3
 80132bc:	eb0c 0501 	add.w	r5, ip, r1
 80132c0:	69ea      	ldr	r2, [r5, #28]
 80132c2:	60da      	str	r2, [r3, #12]
      neighbor_cache[i].isrouter = 0;
 80132c4:	2200      	movs	r2, #0
 80132c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      neighbor_cache[i].netif = netif;
 80132ca:	611e      	str	r6, [r3, #16]
      neighbor_cache[i].state = ND6_INCOMPLETE;
 80132cc:	2101      	movs	r1, #1
 80132ce:	f883 1020 	strb.w	r1, [r3, #32]
      neighbor_cache[i].counter.probes_sent = 1;
 80132d2:	6259      	str	r1, [r3, #36]	; 0x24
      nd6_send_neighbor_cache_probe(&neighbor_cache[i], ND6_SEND_FLAG_MULTICAST_DEST);
 80132d4:	4640      	mov	r0, r8
 80132d6:	4438      	add	r0, r7
 80132d8:	f7ff fe20 	bl	8012f1c <nd6_send_neighbor_cache_probe>
 80132dc:	e6df      	b.n	801309e <nd6_get_next_hop_entry+0x6e>
        return ERR_MEM;
 80132de:	f04f 30ff 	mov.w	r0, #4294967295
 80132e2:	e6e8      	b.n	80130b6 <nd6_get_next_hop_entry+0x86>
        return ERR_MEM;
 80132e4:	f04f 30ff 	mov.w	r0, #4294967295
 80132e8:	e6e5      	b.n	80130b6 <nd6_get_next_hop_entry+0x86>
 80132ea:	bf00      	nop
 80132ec:	200018ac 	.word	0x200018ac
 80132f0:	20008e9c 	.word	0x20008e9c
 80132f4:	200018ad 	.word	0x200018ad
 80132f8:	20008c94 	.word	0x20008c94
 80132fc:	080186e8 	.word	0x080186e8
 8013300:	08017f28 	.word	0x08017f28
 8013304:	08015608 	.word	0x08015608
 8013308:	2000902c 	.word	0x2000902c

0801330c <nd6_queue_packet>:
  if ((neighbor_index < 0) || (neighbor_index >= LWIP_ND6_NUM_NEIGHBORS)) {
 801330c:	b2c3      	uxtb	r3, r0
 801330e:	2b09      	cmp	r3, #9
 8013310:	d870      	bhi.n	80133f4 <nd6_queue_packet+0xe8>
{
 8013312:	b570      	push	{r4, r5, r6, lr}
  p = q;
 8013314:	460b      	mov	r3, r1
  while (p) {
 8013316:	b133      	cbz	r3, 8013326 <nd6_queue_packet+0x1a>
    if (PBUF_NEEDS_COPY(p)) {
 8013318:	7b1d      	ldrb	r5, [r3, #12]
 801331a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801331e:	d101      	bne.n	8013324 <nd6_queue_packet+0x18>
    p = p->next;
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	e7f8      	b.n	8013316 <nd6_queue_packet+0xa>
      copy_needed = 1;
 8013324:	2301      	movs	r3, #1
 8013326:	460d      	mov	r5, r1
 8013328:	4604      	mov	r4, r0
  if (copy_needed) {
 801332a:	b31b      	cbz	r3, 8013374 <nd6_queue_packet+0x68>
    p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801332c:	460a      	mov	r2, r1
 801332e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013332:	200e      	movs	r0, #14
 8013334:	f7f5 fd3c 	bl	8008db0 <pbuf_clone>
 8013338:	4606      	mov	r6, r0
    while ((p == NULL) && (neighbor_cache[neighbor_index].q != NULL)) {
 801333a:	e011      	b.n	8013360 <nd6_queue_packet+0x54>
      neighbor_cache[neighbor_index].q = r->next;
 801333c:	6801      	ldr	r1, [r0, #0]
 801333e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8013342:	00da      	lsls	r2, r3, #3
 8013344:	4b2e      	ldr	r3, [pc, #184]	; (8013400 <nd6_queue_packet+0xf4>)
 8013346:	4413      	add	r3, r2
 8013348:	61d9      	str	r1, [r3, #28]
      r->next = NULL;
 801334a:	2300      	movs	r3, #0
 801334c:	6003      	str	r3, [r0, #0]
      nd6_free_q(r);
 801334e:	f7ff fb41 	bl	80129d4 <nd6_free_q>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013352:	462a      	mov	r2, r5
 8013354:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013358:	200e      	movs	r0, #14
 801335a:	f7f5 fd29 	bl	8008db0 <pbuf_clone>
 801335e:	4606      	mov	r6, r0
    while ((p == NULL) && (neighbor_cache[neighbor_index].q != NULL)) {
 8013360:	b966      	cbnz	r6, 801337c <nd6_queue_packet+0x70>
 8013362:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8013366:	00da      	lsls	r2, r3, #3
 8013368:	4b25      	ldr	r3, [pc, #148]	; (8013400 <nd6_queue_packet+0xf4>)
 801336a:	4413      	add	r3, r2
 801336c:	69d8      	ldr	r0, [r3, #28]
 801336e:	2800      	cmp	r0, #0
 8013370:	d1e4      	bne.n	801333c <nd6_queue_packet+0x30>
 8013372:	e003      	b.n	801337c <nd6_queue_packet+0x70>
    pbuf_ref(p);
 8013374:	4608      	mov	r0, r1
 8013376:	f7f5 fb45 	bl	8008a04 <pbuf_ref>
    p = q;
 801337a:	462e      	mov	r6, r5
  if (p != NULL) {
 801337c:	2e00      	cmp	r6, #0
 801337e:	d03c      	beq.n	80133fa <nd6_queue_packet+0xee>
    new_entry = (struct nd6_q_entry *)memp_malloc(MEMP_ND6_QUEUE);
 8013380:	2008      	movs	r0, #8
 8013382:	f7f4 fd71 	bl	8007e68 <memp_malloc>
    if ((new_entry == NULL) && (neighbor_cache[neighbor_index].q != NULL)) {
 8013386:	4601      	mov	r1, r0
 8013388:	b190      	cbz	r0, 80133b0 <nd6_queue_packet+0xa4>
    if (new_entry != NULL) {
 801338a:	b369      	cbz	r1, 80133e8 <nd6_queue_packet+0xdc>
      new_entry->next = NULL;
 801338c:	2300      	movs	r3, #0
 801338e:	600b      	str	r3, [r1, #0]
      new_entry->p = p;
 8013390:	604e      	str	r6, [r1, #4]
      if (neighbor_cache[neighbor_index].q != NULL) {
 8013392:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8013396:	00da      	lsls	r2, r3, #3
 8013398:	4b19      	ldr	r3, [pc, #100]	; (8013400 <nd6_queue_packet+0xf4>)
 801339a:	4413      	add	r3, r2
 801339c:	69da      	ldr	r2, [r3, #28]
 801339e:	b9ea      	cbnz	r2, 80133dc <nd6_queue_packet+0xd0>
        neighbor_cache[neighbor_index].q = new_entry;
 80133a0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80133a4:	00e2      	lsls	r2, r4, #3
 80133a6:	4b16      	ldr	r3, [pc, #88]	; (8013400 <nd6_queue_packet+0xf4>)
 80133a8:	4413      	add	r3, r2
 80133aa:	61d9      	str	r1, [r3, #28]
      result = ERR_OK;
 80133ac:	2000      	movs	r0, #0
 80133ae:	e01a      	b.n	80133e6 <nd6_queue_packet+0xda>
    if ((new_entry == NULL) && (neighbor_cache[neighbor_index].q != NULL)) {
 80133b0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80133b4:	00da      	lsls	r2, r3, #3
 80133b6:	4b12      	ldr	r3, [pc, #72]	; (8013400 <nd6_queue_packet+0xf4>)
 80133b8:	4413      	add	r3, r2
 80133ba:	69d8      	ldr	r0, [r3, #28]
 80133bc:	2800      	cmp	r0, #0
 80133be:	d0e4      	beq.n	801338a <nd6_queue_packet+0x7e>
      neighbor_cache[neighbor_index].q = r->next;
 80133c0:	6801      	ldr	r1, [r0, #0]
 80133c2:	4b0f      	ldr	r3, [pc, #60]	; (8013400 <nd6_queue_packet+0xf4>)
 80133c4:	4413      	add	r3, r2
 80133c6:	61d9      	str	r1, [r3, #28]
      r->next = NULL;
 80133c8:	2300      	movs	r3, #0
 80133ca:	6003      	str	r3, [r0, #0]
      nd6_free_q(r);
 80133cc:	f7ff fb02 	bl	80129d4 <nd6_free_q>
      new_entry = (struct nd6_q_entry *)memp_malloc(MEMP_ND6_QUEUE);
 80133d0:	2008      	movs	r0, #8
 80133d2:	f7f4 fd49 	bl	8007e68 <memp_malloc>
 80133d6:	4601      	mov	r1, r0
 80133d8:	e7d7      	b.n	801338a <nd6_queue_packet+0x7e>
          r = r->next;
 80133da:	461a      	mov	r2, r3
        while (r->next != NULL) {
 80133dc:	6813      	ldr	r3, [r2, #0]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d1fb      	bne.n	80133da <nd6_queue_packet+0xce>
        r->next = new_entry;
 80133e2:	6011      	str	r1, [r2, #0]
      result = ERR_OK;
 80133e4:	2000      	movs	r0, #0
}
 80133e6:	bd70      	pop	{r4, r5, r6, pc}
      pbuf_free(p);
 80133e8:	4630      	mov	r0, r6
 80133ea:	f7f5 f99d 	bl	8008728 <pbuf_free>
  err_t result = ERR_MEM;
 80133ee:	f04f 30ff 	mov.w	r0, #4294967295
 80133f2:	e7f8      	b.n	80133e6 <nd6_queue_packet+0xda>
    return ERR_ARG;
 80133f4:	f06f 000f 	mvn.w	r0, #15
}
 80133f8:	4770      	bx	lr
  err_t result = ERR_MEM;
 80133fa:	f04f 30ff 	mov.w	r0, #4294967295
 80133fe:	e7f2      	b.n	80133e6 <nd6_queue_packet+0xda>
 8013400:	20008c94 	.word	0x20008c94

08013404 <nd6_input>:
{
 8013404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013408:	b089      	sub	sp, #36	; 0x24
 801340a:	4604      	mov	r4, r0
 801340c:	460e      	mov	r6, r1
  msg_type = *((u8_t *)p->payload);
 801340e:	6845      	ldr	r5, [r0, #4]
 8013410:	782b      	ldrb	r3, [r5, #0]
  switch (msg_type) {
 8013412:	2b87      	cmp	r3, #135	; 0x87
 8013414:	f000 8117 	beq.w	8013646 <nd6_input+0x242>
 8013418:	d81d      	bhi.n	8013456 <nd6_input+0x52>
 801341a:	2b02      	cmp	r3, #2
 801341c:	f000 83f0 	beq.w	8013c00 <nd6_input+0x7fc>
 8013420:	2b86      	cmp	r3, #134	; 0x86
 8013422:	f040 8415 	bne.w	8013c50 <nd6_input+0x84c>
    if (p->len < sizeof(struct ra_header)) {
 8013426:	8943      	ldrh	r3, [r0, #10]
 8013428:	2b0f      	cmp	r3, #15
 801342a:	f240 8249 	bls.w	80138c0 <nd6_input+0x4bc>
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 801342e:	4bb9      	ldr	r3, [pc, #740]	; (8013714 <nd6_input+0x310>)
 8013430:	695b      	ldr	r3, [r3, #20]
 8013432:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013436:	041b      	lsls	r3, r3, #16
 8013438:	0c1b      	lsrs	r3, r3, #16
 801343a:	f248 02fe 	movw	r2, #33022	; 0x80fe
 801343e:	4293      	cmp	r3, r2
 8013440:	d105      	bne.n	801344e <nd6_input+0x4a>
        IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ra_hdr->code != 0) {
 8013442:	4bb4      	ldr	r3, [pc, #720]	; (8013714 <nd6_input+0x310>)
 8013444:	68db      	ldr	r3, [r3, #12]
 8013446:	79db      	ldrb	r3, [r3, #7]
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 8013448:	2bff      	cmp	r3, #255	; 0xff
 801344a:	f000 823c 	beq.w	80138c6 <nd6_input+0x4c2>
      pbuf_free(p);
 801344e:	4620      	mov	r0, r4
 8013450:	f7f5 f96a 	bl	8008728 <pbuf_free>
      return;
 8013454:	e3ff      	b.n	8013c56 <nd6_input+0x852>
  switch (msg_type) {
 8013456:	2b88      	cmp	r3, #136	; 0x88
 8013458:	d022      	beq.n	80134a0 <nd6_input+0x9c>
 801345a:	2b89      	cmp	r3, #137	; 0x89
 801345c:	f040 83f8 	bne.w	8013c50 <nd6_input+0x84c>
    if (p->len < sizeof(struct redirect_header)) {
 8013460:	8943      	ldrh	r3, [r0, #10]
 8013462:	2b27      	cmp	r3, #39	; 0x27
 8013464:	f240 833b 	bls.w	8013ade <nd6_input+0x6da>
    ip6_addr_copy_from_packed(destination_address, redir_hdr->destination_address);
 8013468:	69aa      	ldr	r2, [r5, #24]
 801346a:	9200      	str	r2, [sp, #0]
 801346c:	69eb      	ldr	r3, [r5, #28]
 801346e:	9301      	str	r3, [sp, #4]
 8013470:	6a2b      	ldr	r3, [r5, #32]
 8013472:	9302      	str	r3, [sp, #8]
 8013474:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013476:	9303      	str	r3, [sp, #12]
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 8013478:	4ba6      	ldr	r3, [pc, #664]	; (8013714 <nd6_input+0x310>)
 801347a:	695b      	ldr	r3, [r3, #20]
 801347c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013480:	041b      	lsls	r3, r3, #16
 8013482:	0c1b      	lsrs	r3, r3, #16
 8013484:	f248 01fe 	movw	r1, #33022	; 0x80fe
 8013488:	428b      	cmp	r3, r1
 801348a:	d105      	bne.n	8013498 <nd6_input+0x94>
        IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM ||
 801348c:	4ba1      	ldr	r3, [pc, #644]	; (8013714 <nd6_input+0x310>)
 801348e:	68db      	ldr	r3, [r3, #12]
 8013490:	79db      	ldrb	r3, [r3, #7]
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 8013492:	2bff      	cmp	r3, #255	; 0xff
 8013494:	f000 8326 	beq.w	8013ae4 <nd6_input+0x6e0>
      pbuf_free(p);
 8013498:	4620      	mov	r0, r4
 801349a:	f7f5 f945 	bl	8008728 <pbuf_free>
      return;
 801349e:	e3da      	b.n	8013c56 <nd6_input+0x852>
    if (p->len < (sizeof(struct na_header))) {
 80134a0:	8943      	ldrh	r3, [r0, #10]
 80134a2:	2b17      	cmp	r3, #23
 80134a4:	d943      	bls.n	801352e <nd6_input+0x12a>
    ip6_addr_copy_from_packed(target_address, na_hdr->target_address);
 80134a6:	68ab      	ldr	r3, [r5, #8]
 80134a8:	9304      	str	r3, [sp, #16]
 80134aa:	68ea      	ldr	r2, [r5, #12]
 80134ac:	9205      	str	r2, [sp, #20]
 80134ae:	6928      	ldr	r0, [r5, #16]
 80134b0:	9006      	str	r0, [sp, #24]
 80134b2:	696f      	ldr	r7, [r5, #20]
 80134b4:	9707      	str	r7, [sp, #28]
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || na_hdr->code != 0 ||
 80134b6:	4997      	ldr	r1, [pc, #604]	; (8013714 <nd6_input+0x310>)
 80134b8:	68c9      	ldr	r1, [r1, #12]
 80134ba:	79c9      	ldrb	r1, [r1, #7]
 80134bc:	29ff      	cmp	r1, #255	; 0xff
 80134be:	d139      	bne.n	8013534 <nd6_input+0x130>
 80134c0:	7869      	ldrb	r1, [r5, #1]
 80134c2:	2900      	cmp	r1, #0
 80134c4:	d136      	bne.n	8013534 <nd6_input+0x130>
        ip6_addr_ismulticast(&target_address)) {
 80134c6:	b2d9      	uxtb	r1, r3
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || na_hdr->code != 0 ||
 80134c8:	29ff      	cmp	r1, #255	; 0xff
 80134ca:	d033      	beq.n	8013534 <nd6_input+0x130>
    if (ip6_addr_ismulticast(ip6_current_dest_addr())) {
 80134cc:	4991      	ldr	r1, [pc, #580]	; (8013714 <nd6_input+0x310>)
 80134ce:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 80134d2:	29ff      	cmp	r1, #255	; 0xff
 80134d4:	d069      	beq.n	80135aa <nd6_input+0x1a6>
      i = nd6_find_neighbor_cache_entry(&target_address);
 80134d6:	a804      	add	r0, sp, #16
 80134d8:	f7fe ff34 	bl	8012344 <nd6_find_neighbor_cache_entry>
      if (i < 0) {
 80134dc:	1e07      	subs	r7, r0, #0
 80134de:	f2c0 8090 	blt.w	8013602 <nd6_input+0x1fe>
      if ((na_hdr->flags & ND6_FLAG_OVERRIDE) ||
 80134e2:	792b      	ldrb	r3, [r5, #4]
 80134e4:	f013 0f20 	tst.w	r3, #32
 80134e8:	f040 808f 	bne.w	801360a <nd6_input+0x206>
          (neighbor_cache[i].state == ND6_INCOMPLETE)) {
 80134ec:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 80134f0:	00da      	lsls	r2, r3, #3
 80134f2:	4b89      	ldr	r3, [pc, #548]	; (8013718 <nd6_input+0x314>)
 80134f4:	4413      	add	r3, r2
 80134f6:	f893 3020 	ldrb.w	r3, [r3, #32]
      if ((na_hdr->flags & ND6_FLAG_OVERRIDE) ||
 80134fa:	2b01      	cmp	r3, #1
 80134fc:	f000 8085 	beq.w	801360a <nd6_input+0x206>
      neighbor_cache[i].netif = inp;
 8013500:	4985      	ldr	r1, [pc, #532]	; (8013718 <nd6_input+0x314>)
 8013502:	00ba      	lsls	r2, r7, #2
 8013504:	19d0      	adds	r0, r2, r7
 8013506:	00c3      	lsls	r3, r0, #3
 8013508:	440b      	add	r3, r1
 801350a:	611e      	str	r6, [r3, #16]
      neighbor_cache[i].state = ND6_REACHABLE;
 801350c:	2002      	movs	r0, #2
 801350e:	f883 0020 	strb.w	r0, [r3, #32]
      neighbor_cache[i].counter.reachable_time = reachable_time;
 8013512:	4882      	ldr	r0, [pc, #520]	; (801371c <nd6_input+0x318>)
 8013514:	6800      	ldr	r0, [r0, #0]
 8013516:	6258      	str	r0, [r3, #36]	; 0x24
      if (neighbor_cache[i].q != NULL) {
 8013518:	19d3      	adds	r3, r2, r7
 801351a:	00da      	lsls	r2, r3, #3
 801351c:	4411      	add	r1, r2
 801351e:	69cb      	ldr	r3, [r1, #28]
 8013520:	2b00      	cmp	r3, #0
 8013522:	f000 8395 	beq.w	8013c50 <nd6_input+0x84c>
        nd6_send_q(i);
 8013526:	4638      	mov	r0, r7
 8013528:	f7ff f926 	bl	8012778 <nd6_send_q>
 801352c:	e390      	b.n	8013c50 <nd6_input+0x84c>
      pbuf_free(p);
 801352e:	f7f5 f8fb 	bl	8008728 <pbuf_free>
      return;
 8013532:	e390      	b.n	8013c56 <nd6_input+0x852>
      pbuf_free(p);
 8013534:	4620      	mov	r0, r4
 8013536:	f7f5 f8f7 	bl	8008728 <pbuf_free>
      return;
 801353a:	e38c      	b.n	8013c56 <nd6_input+0x852>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 801353c:	3101      	adds	r1, #1
 801353e:	b249      	sxtb	r1, r1
 8013540:	2902      	cmp	r1, #2
 8013542:	dc34      	bgt.n	80135ae <nd6_input+0x1aa>
        if (!ip6_addr_isinvalid(netif_ip6_addr_state(inp, i)) &&
 8013544:	eb06 0c01 	add.w	ip, r6, r1
 8013548:	f89c c078 	ldrb.w	ip, [ip, #120]	; 0x78
 801354c:	f1bc 0f00 	cmp.w	ip, #0
 8013550:	d0f4      	beq.n	801353c <nd6_input+0x138>
 8013552:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 8013556:	d0f1      	beq.n	801353c <nd6_input+0x138>
            ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 8013558:	eb01 0881 	add.w	r8, r1, r1, lsl #2
 801355c:	ea4f 0c88 	mov.w	ip, r8, lsl #2
 8013560:	44b4      	add	ip, r6
 8013562:	f8dc c03c 	ldr.w	ip, [ip, #60]	; 0x3c
            !ip6_addr_isduplicated(netif_ip6_addr_state(inp, i)) &&
 8013566:	4563      	cmp	r3, ip
 8013568:	d1e8      	bne.n	801353c <nd6_input+0x138>
            ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 801356a:	eb01 0881 	add.w	r8, r1, r1, lsl #2
 801356e:	ea4f 0c88 	mov.w	ip, r8, lsl #2
 8013572:	44b4      	add	ip, r6
 8013574:	f8dc c040 	ldr.w	ip, [ip, #64]	; 0x40
 8013578:	4562      	cmp	r2, ip
 801357a:	d1df      	bne.n	801353c <nd6_input+0x138>
 801357c:	f04f 0c14 	mov.w	ip, #20
 8013580:	fb0c 6c01 	mla	ip, ip, r1, r6
 8013584:	f8dc c044 	ldr.w	ip, [ip, #68]	; 0x44
 8013588:	4560      	cmp	r0, ip
 801358a:	d1d7      	bne.n	801353c <nd6_input+0x138>
 801358c:	f04f 0c14 	mov.w	ip, #20
 8013590:	fb0c 6e01 	mla	lr, ip, r1, r6
 8013594:	f8de c048 	ldr.w	ip, [lr, #72]	; 0x48
 8013598:	4567      	cmp	r7, ip
 801359a:	d1cf      	bne.n	801353c <nd6_input+0x138>
          nd6_duplicate_addr_detected(inp, i);
 801359c:	4630      	mov	r0, r6
 801359e:	f7ff f921 	bl	80127e4 <nd6_duplicate_addr_detected>
          pbuf_free(p);
 80135a2:	4620      	mov	r0, r4
 80135a4:	f7f5 f8c0 	bl	8008728 <pbuf_free>
          return;
 80135a8:	e355      	b.n	8013c56 <nd6_input+0x852>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80135aa:	2100      	movs	r1, #0
 80135ac:	e7c8      	b.n	8013540 <nd6_input+0x13c>
      if (p->len < (sizeof(struct na_header) + 2)) {
 80135ae:	8962      	ldrh	r2, [r4, #10]
 80135b0:	2a19      	cmp	r2, #25
 80135b2:	d91e      	bls.n	80135f2 <nd6_input+0x1ee>
      lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct na_header));
 80135b4:	6867      	ldr	r7, [r4, #4]
      if (p->len < (sizeof(struct na_header) + (lladdr_opt->length << 3))) {
 80135b6:	7e7b      	ldrb	r3, [r7, #25]
 80135b8:	00db      	lsls	r3, r3, #3
 80135ba:	3318      	adds	r3, #24
 80135bc:	429a      	cmp	r2, r3
 80135be:	d31c      	bcc.n	80135fa <nd6_input+0x1f6>
      i = nd6_find_neighbor_cache_entry(&target_address);
 80135c0:	a804      	add	r0, sp, #16
 80135c2:	f7fe febf 	bl	8012344 <nd6_find_neighbor_cache_entry>
      if (i >= 0) {
 80135c6:	1e03      	subs	r3, r0, #0
 80135c8:	f2c0 8342 	blt.w	8013c50 <nd6_input+0x84c>
        if (na_hdr->flags & ND6_FLAG_OVERRIDE) {
 80135cc:	792a      	ldrb	r2, [r5, #4]
 80135ce:	f012 0f20 	tst.w	r2, #32
 80135d2:	f000 833d 	beq.w	8013c50 <nd6_input+0x84c>
          MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 80135d6:	2028      	movs	r0, #40	; 0x28
 80135d8:	fb00 f003 	mul.w	r0, r0, r3
 80135dc:	3010      	adds	r0, #16
 80135de:	4b4e      	ldr	r3, [pc, #312]	; (8013718 <nd6_input+0x314>)
 80135e0:	4418      	add	r0, r3
 80135e2:	f896 20c2 	ldrb.w	r2, [r6, #194]	; 0xc2
 80135e6:	f107 011a 	add.w	r1, r7, #26
 80135ea:	3004      	adds	r0, #4
 80135ec:	f000 ffd5 	bl	801459a <memcpy>
 80135f0:	e32e      	b.n	8013c50 <nd6_input+0x84c>
        pbuf_free(p);
 80135f2:	4620      	mov	r0, r4
 80135f4:	f7f5 f898 	bl	8008728 <pbuf_free>
        return;
 80135f8:	e32d      	b.n	8013c56 <nd6_input+0x852>
        pbuf_free(p);
 80135fa:	4620      	mov	r0, r4
 80135fc:	f7f5 f894 	bl	8008728 <pbuf_free>
        return;
 8013600:	e329      	b.n	8013c56 <nd6_input+0x852>
        pbuf_free(p);
 8013602:	4620      	mov	r0, r4
 8013604:	f7f5 f890 	bl	8008728 <pbuf_free>
        return;
 8013608:	e325      	b.n	8013c56 <nd6_input+0x852>
        if (p->len < (sizeof(struct na_header) + 2)) {
 801360a:	8962      	ldrh	r2, [r4, #10]
 801360c:	2a19      	cmp	r2, #25
 801360e:	d909      	bls.n	8013624 <nd6_input+0x220>
        lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct na_header));
 8013610:	6861      	ldr	r1, [r4, #4]
        if (p->len < (sizeof(struct na_header) + (lladdr_opt->length << 3))) {
 8013612:	7e4b      	ldrb	r3, [r1, #25]
 8013614:	00db      	lsls	r3, r3, #3
 8013616:	3318      	adds	r3, #24
 8013618:	429a      	cmp	r2, r3
 801361a:	d207      	bcs.n	801362c <nd6_input+0x228>
          pbuf_free(p);
 801361c:	4620      	mov	r0, r4
 801361e:	f7f5 f883 	bl	8008728 <pbuf_free>
          return;
 8013622:	e318      	b.n	8013c56 <nd6_input+0x852>
          pbuf_free(p);
 8013624:	4620      	mov	r0, r4
 8013626:	f7f5 f87f 	bl	8008728 <pbuf_free>
          return;
 801362a:	e314      	b.n	8013c56 <nd6_input+0x852>
        MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 801362c:	eb07 0287 	add.w	r2, r7, r7, lsl #2
 8013630:	00d3      	lsls	r3, r2, #3
 8013632:	3310      	adds	r3, #16
 8013634:	4838      	ldr	r0, [pc, #224]	; (8013718 <nd6_input+0x314>)
 8013636:	4418      	add	r0, r3
 8013638:	f896 20c2 	ldrb.w	r2, [r6, #194]	; 0xc2
 801363c:	311a      	adds	r1, #26
 801363e:	3004      	adds	r0, #4
 8013640:	f000 ffab 	bl	801459a <memcpy>
 8013644:	e75c      	b.n	8013500 <nd6_input+0xfc>
    if (p->len < sizeof(struct ns_header)) {
 8013646:	8943      	ldrh	r3, [r0, #10]
 8013648:	2b17      	cmp	r3, #23
 801364a:	d923      	bls.n	8013694 <nd6_input+0x290>
    ip6_addr_copy_from_packed(target_address, ns_hdr->target_address);
 801364c:	68aa      	ldr	r2, [r5, #8]
 801364e:	9204      	str	r2, [sp, #16]
 8013650:	68e9      	ldr	r1, [r5, #12]
 8013652:	9105      	str	r1, [sp, #20]
 8013654:	6928      	ldr	r0, [r5, #16]
 8013656:	9006      	str	r0, [sp, #24]
 8013658:	696f      	ldr	r7, [r5, #20]
 801365a:	9707      	str	r7, [sp, #28]
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ns_hdr->code != 0 ||
 801365c:	4b2d      	ldr	r3, [pc, #180]	; (8013714 <nd6_input+0x310>)
 801365e:	68db      	ldr	r3, [r3, #12]
 8013660:	79db      	ldrb	r3, [r3, #7]
 8013662:	2bff      	cmp	r3, #255	; 0xff
 8013664:	d119      	bne.n	801369a <nd6_input+0x296>
 8013666:	f895 8001 	ldrb.w	r8, [r5, #1]
 801366a:	f1b8 0f00 	cmp.w	r8, #0
 801366e:	d114      	bne.n	801369a <nd6_input+0x296>
       ip6_addr_ismulticast(&target_address)) {
 8013670:	b2d3      	uxtb	r3, r2
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ns_hdr->code != 0 ||
 8013672:	2bff      	cmp	r3, #255	; 0xff
 8013674:	d011      	beq.n	801369a <nd6_input+0x296>
    if (p->len >= (sizeof(struct ns_header) + 2)) {
 8013676:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
 801367a:	f1bc 0f19 	cmp.w	ip, #25
 801367e:	d910      	bls.n	80136a2 <nd6_input+0x29e>
      lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct ns_header));
 8013680:	6863      	ldr	r3, [r4, #4]
 8013682:	f103 0518 	add.w	r5, r3, #24
      if (p->len < (sizeof(struct ns_header) + (lladdr_opt->length << 3))) {
 8013686:	7e5b      	ldrb	r3, [r3, #25]
 8013688:	00db      	lsls	r3, r3, #3
 801368a:	3318      	adds	r3, #24
 801368c:	459c      	cmp	ip, r3
 801368e:	d209      	bcs.n	80136a4 <nd6_input+0x2a0>
        lladdr_opt = NULL;
 8013690:	2500      	movs	r5, #0
 8013692:	e007      	b.n	80136a4 <nd6_input+0x2a0>
      pbuf_free(p);
 8013694:	f7f5 f848 	bl	8008728 <pbuf_free>
      return;
 8013698:	e2dd      	b.n	8013c56 <nd6_input+0x852>
      pbuf_free(p);
 801369a:	4620      	mov	r0, r4
 801369c:	f7f5 f844 	bl	8008728 <pbuf_free>
      return;
 80136a0:	e2d9      	b.n	8013c56 <nd6_input+0x852>
      lladdr_opt = NULL;
 80136a2:	2500      	movs	r5, #0
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 80136a4:	2300      	movs	r3, #0
 80136a6:	e00a      	b.n	80136be <nd6_input+0x2ba>
          ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 80136a8:	eb0e 098e 	add.w	r9, lr, lr, lsl #2
 80136ac:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 80136b0:	44b4      	add	ip, r6
 80136b2:	f8dc c03c 	ldr.w	ip, [ip, #60]	; 0x3c
            ip6_addr_isany(ip6_current_src_addr()))) &&
 80136b6:	4562      	cmp	r2, ip
 80136b8:	d032      	beq.n	8013720 <nd6_input+0x31c>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 80136ba:	3301      	adds	r3, #1
 80136bc:	b25b      	sxtb	r3, r3
 80136be:	2b02      	cmp	r3, #2
 80136c0:	dc49      	bgt.n	8013756 <nd6_input+0x352>
      if ((ip6_addr_isvalid(netif_ip6_addr_state(inp, i)) ||
 80136c2:	469e      	mov	lr, r3
 80136c4:	eb06 0c03 	add.w	ip, r6, r3
 80136c8:	f89c c078 	ldrb.w	ip, [ip, #120]	; 0x78
 80136cc:	f01c 0f10 	tst.w	ip, #16
 80136d0:	d1ea      	bne.n	80136a8 <nd6_input+0x2a4>
 80136d2:	f01c 0f08 	tst.w	ip, #8
 80136d6:	d0f0      	beq.n	80136ba <nd6_input+0x2b6>
            ip6_addr_isany(ip6_current_src_addr()))) &&
 80136d8:	f8df c038 	ldr.w	ip, [pc, #56]	; 8013714 <nd6_input+0x310>
 80136dc:	f8dc c014 	ldr.w	ip, [ip, #20]
           (ip6_addr_istentative(netif_ip6_addr_state(inp, i)) &&
 80136e0:	f1bc 0f00 	cmp.w	ip, #0
 80136e4:	d1e9      	bne.n	80136ba <nd6_input+0x2b6>
            ip6_addr_isany(ip6_current_src_addr()))) &&
 80136e6:	f8df c02c 	ldr.w	ip, [pc, #44]	; 8013714 <nd6_input+0x310>
 80136ea:	f8dc c018 	ldr.w	ip, [ip, #24]
 80136ee:	f1bc 0f00 	cmp.w	ip, #0
 80136f2:	d1e2      	bne.n	80136ba <nd6_input+0x2b6>
 80136f4:	f8df c01c 	ldr.w	ip, [pc, #28]	; 8013714 <nd6_input+0x310>
 80136f8:	f8dc c01c 	ldr.w	ip, [ip, #28]
 80136fc:	f1bc 0f00 	cmp.w	ip, #0
 8013700:	d1db      	bne.n	80136ba <nd6_input+0x2b6>
 8013702:	f8df c010 	ldr.w	ip, [pc, #16]	; 8013714 <nd6_input+0x310>
 8013706:	f8dc c020 	ldr.w	ip, [ip, #32]
 801370a:	f1bc 0f00 	cmp.w	ip, #0
 801370e:	d1d4      	bne.n	80136ba <nd6_input+0x2b6>
 8013710:	e7ca      	b.n	80136a8 <nd6_input+0x2a4>
 8013712:	bf00      	nop
 8013714:	20004b84 	.word	0x20004b84
 8013718:	20008c94 	.word	0x20008c94
 801371c:	20000018 	.word	0x20000018
          ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 8013720:	eb0e 098e 	add.w	r9, lr, lr, lsl #2
 8013724:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 8013728:	44b4      	add	ip, r6
 801372a:	f8dc c040 	ldr.w	ip, [ip, #64]	; 0x40
 801372e:	4561      	cmp	r1, ip
 8013730:	d1c3      	bne.n	80136ba <nd6_input+0x2b6>
 8013732:	eb0e 098e 	add.w	r9, lr, lr, lsl #2
 8013736:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 801373a:	46e1      	mov	r9, ip
 801373c:	44b4      	add	ip, r6
 801373e:	f8dc c044 	ldr.w	ip, [ip, #68]	; 0x44
 8013742:	4560      	cmp	r0, ip
 8013744:	d1b9      	bne.n	80136ba <nd6_input+0x2b6>
 8013746:	46cc      	mov	ip, r9
 8013748:	44b4      	add	ip, r6
 801374a:	f8dc c048 	ldr.w	ip, [ip, #72]	; 0x48
 801374e:	4567      	cmp	r7, ip
 8013750:	d1b3      	bne.n	80136ba <nd6_input+0x2b6>
        accepted = 1;
 8013752:	f04f 0801 	mov.w	r8, #1
    if (!accepted) {
 8013756:	f1b8 0f00 	cmp.w	r8, #0
 801375a:	d022      	beq.n	80137a2 <nd6_input+0x39e>
    if (ip6_addr_isany(ip6_current_src_addr())) {
 801375c:	4bb8      	ldr	r3, [pc, #736]	; (8013a40 <nd6_input+0x63c>)
 801375e:	695b      	ldr	r3, [r3, #20]
 8013760:	b94b      	cbnz	r3, 8013776 <nd6_input+0x372>
 8013762:	4bb7      	ldr	r3, [pc, #732]	; (8013a40 <nd6_input+0x63c>)
 8013764:	699b      	ldr	r3, [r3, #24]
 8013766:	b933      	cbnz	r3, 8013776 <nd6_input+0x372>
 8013768:	4bb5      	ldr	r3, [pc, #724]	; (8013a40 <nd6_input+0x63c>)
 801376a:	69db      	ldr	r3, [r3, #28]
 801376c:	b91b      	cbnz	r3, 8013776 <nd6_input+0x372>
 801376e:	4bb4      	ldr	r3, [pc, #720]	; (8013a40 <nd6_input+0x63c>)
 8013770:	6a1b      	ldr	r3, [r3, #32]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d056      	beq.n	8013824 <nd6_input+0x420>
      if (lladdr_opt == NULL) {
 8013776:	2d00      	cmp	r5, #0
 8013778:	d056      	beq.n	8013828 <nd6_input+0x424>
      i = nd6_find_neighbor_cache_entry(ip6_current_src_addr());
 801377a:	48b2      	ldr	r0, [pc, #712]	; (8013a44 <nd6_input+0x640>)
 801377c:	f7fe fde2 	bl	8012344 <nd6_find_neighbor_cache_entry>
      if (i>= 0) {
 8013780:	1e07      	subs	r7, r0, #0
 8013782:	db6c      	blt.n	801385e <nd6_input+0x45a>
        if (neighbor_cache[i].state == ND6_INCOMPLETE) {
 8013784:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8013788:	00da      	lsls	r2, r3, #3
 801378a:	4baf      	ldr	r3, [pc, #700]	; (8013a48 <nd6_input+0x644>)
 801378c:	4413      	add	r3, r2
 801378e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013792:	2b01      	cmp	r3, #1
 8013794:	d04c      	beq.n	8013830 <nd6_input+0x42c>
      nd6_send_na(inp, &target_address, ND6_FLAG_SOLICITED | ND6_FLAG_OVERRIDE);
 8013796:	2260      	movs	r2, #96	; 0x60
 8013798:	a904      	add	r1, sp, #16
 801379a:	4630      	mov	r0, r6
 801379c:	f7ff fa5c 	bl	8012c58 <nd6_send_na>
 80137a0:	e256      	b.n	8013c50 <nd6_input+0x84c>
      pbuf_free(p);
 80137a2:	4620      	mov	r0, r4
 80137a4:	f7f4 ffc0 	bl	8008728 <pbuf_free>
      return;
 80137a8:	e255      	b.n	8013c56 <nd6_input+0x852>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 80137aa:	3501      	adds	r5, #1
 80137ac:	b26d      	sxtb	r5, r5
 80137ae:	2d02      	cmp	r5, #2
 80137b0:	f300 824e 	bgt.w	8013c50 <nd6_input+0x84c>
        if (!ip6_addr_isinvalid(netif_ip6_addr_state(inp, i)) &&
 80137b4:	462f      	mov	r7, r5
 80137b6:	1973      	adds	r3, r6, r5
 80137b8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d0f4      	beq.n	80137aa <nd6_input+0x3a6>
            ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 80137c0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80137c4:	0093      	lsls	r3, r2, #2
 80137c6:	4433      	add	r3, r6
 80137c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
        if (!ip6_addr_isinvalid(netif_ip6_addr_state(inp, i)) &&
 80137ca:	9a04      	ldr	r2, [sp, #16]
 80137cc:	429a      	cmp	r2, r3
 80137ce:	d1ec      	bne.n	80137aa <nd6_input+0x3a6>
            ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 80137d0:	2314      	movs	r3, #20
 80137d2:	fb03 6305 	mla	r3, r3, r5, r6
 80137d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137d8:	9a05      	ldr	r2, [sp, #20]
 80137da:	429a      	cmp	r2, r3
 80137dc:	d1e5      	bne.n	80137aa <nd6_input+0x3a6>
 80137de:	2314      	movs	r3, #20
 80137e0:	fb03 6305 	mla	r3, r3, r5, r6
 80137e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137e6:	9a06      	ldr	r2, [sp, #24]
 80137e8:	429a      	cmp	r2, r3
 80137ea:	d1de      	bne.n	80137aa <nd6_input+0x3a6>
 80137ec:	2314      	movs	r3, #20
 80137ee:	fb03 6305 	mla	r3, r3, r5, r6
 80137f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137f4:	9a07      	ldr	r2, [sp, #28]
 80137f6:	429a      	cmp	r2, r3
 80137f8:	d1d7      	bne.n	80137aa <nd6_input+0x3a6>
          nd6_send_na(inp, netif_ip6_addr(inp, i), ND6_FLAG_OVERRIDE | ND6_SEND_FLAG_ALLNODES_DEST);
 80137fa:	2114      	movs	r1, #20
 80137fc:	fb01 f105 	mul.w	r1, r1, r5
 8013800:	3138      	adds	r1, #56	; 0x38
 8013802:	4431      	add	r1, r6
 8013804:	2222      	movs	r2, #34	; 0x22
 8013806:	3104      	adds	r1, #4
 8013808:	4630      	mov	r0, r6
 801380a:	f7ff fa25 	bl	8012c58 <nd6_send_na>
          if (ip6_addr_istentative(netif_ip6_addr_state(inp, i))) {
 801380e:	4437      	add	r7, r6
 8013810:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8013814:	f013 0f08 	tst.w	r3, #8
 8013818:	d0c7      	beq.n	80137aa <nd6_input+0x3a6>
            nd6_duplicate_addr_detected(inp, i);
 801381a:	4629      	mov	r1, r5
 801381c:	4630      	mov	r0, r6
 801381e:	f7fe ffe1 	bl	80127e4 <nd6_duplicate_addr_detected>
 8013822:	e7c2      	b.n	80137aa <nd6_input+0x3a6>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 8013824:	2500      	movs	r5, #0
 8013826:	e7c2      	b.n	80137ae <nd6_input+0x3aa>
        pbuf_free(p);
 8013828:	4620      	mov	r0, r4
 801382a:	f7f4 ff7d 	bl	8008728 <pbuf_free>
        return;
 801382e:	e212      	b.n	8013c56 <nd6_input+0x852>
          neighbor_cache[i].netif = inp;
 8013830:	f8df 9214 	ldr.w	r9, [pc, #532]	; 8013a48 <nd6_input+0x644>
 8013834:	4692      	mov	sl, r2
 8013836:	4613      	mov	r3, r2
 8013838:	44ca      	add	sl, r9
 801383a:	f8ca 6010 	str.w	r6, [sl, #16]
          MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 801383e:	3310      	adds	r3, #16
 8013840:	eb03 0009 	add.w	r0, r3, r9
 8013844:	f896 20c2 	ldrb.w	r2, [r6, #194]	; 0xc2
 8013848:	1ca9      	adds	r1, r5, #2
 801384a:	3004      	adds	r0, #4
 801384c:	f000 fea5 	bl	801459a <memcpy>
          neighbor_cache[i].state = ND6_DELAY;
 8013850:	2304      	movs	r3, #4
 8013852:	f88a 3020 	strb.w	r3, [sl, #32]
          neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 8013856:	2305      	movs	r3, #5
 8013858:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
 801385c:	e79b      	b.n	8013796 <nd6_input+0x392>
        i = nd6_new_neighbor_cache_entry();
 801385e:	f7ff f91d 	bl	8012a9c <nd6_new_neighbor_cache_entry>
        if (i < 0) {
 8013862:	f1b0 0900 	subs.w	r9, r0, #0
 8013866:	db27      	blt.n	80138b8 <nd6_input+0x4b4>
        neighbor_cache[i].netif = inp;
 8013868:	4f77      	ldr	r7, [pc, #476]	; (8013a48 <nd6_input+0x644>)
 801386a:	ea4f 0889 	mov.w	r8, r9, lsl #2
 801386e:	eb08 0309 	add.w	r3, r8, r9
 8013872:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 8013876:	465b      	mov	r3, fp
 8013878:	eb07 0a0b 	add.w	sl, r7, fp
 801387c:	f8ca 6010 	str.w	r6, [sl, #16]
        MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 8013880:	3310      	adds	r3, #16
 8013882:	19d8      	adds	r0, r3, r7
 8013884:	f896 20c2 	ldrb.w	r2, [r6, #194]	; 0xc2
 8013888:	1ca9      	adds	r1, r5, #2
 801388a:	3004      	adds	r0, #4
 801388c:	f000 fe85 	bl	801459a <memcpy>
        ip6_addr_set(&(neighbor_cache[i].next_hop_address), ip6_current_src_addr());
 8013890:	4b6b      	ldr	r3, [pc, #428]	; (8013a40 <nd6_input+0x63c>)
 8013892:	695a      	ldr	r2, [r3, #20]
 8013894:	f847 200b 	str.w	r2, [r7, fp]
 8013898:	699a      	ldr	r2, [r3, #24]
 801389a:	f8ca 2004 	str.w	r2, [sl, #4]
 801389e:	69da      	ldr	r2, [r3, #28]
 80138a0:	f8ca 2008 	str.w	r2, [sl, #8]
 80138a4:	6a1b      	ldr	r3, [r3, #32]
 80138a6:	f8ca 300c 	str.w	r3, [sl, #12]
        neighbor_cache[i].state = ND6_DELAY;
 80138aa:	2304      	movs	r3, #4
 80138ac:	f88a 3020 	strb.w	r3, [sl, #32]
        neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 80138b0:	2305      	movs	r3, #5
 80138b2:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
 80138b6:	e76e      	b.n	8013796 <nd6_input+0x392>
          pbuf_free(p);
 80138b8:	4620      	mov	r0, r4
 80138ba:	f7f4 ff35 	bl	8008728 <pbuf_free>
          return;
 80138be:	e1ca      	b.n	8013c56 <nd6_input+0x852>
      pbuf_free(p);
 80138c0:	f7f4 ff32 	bl	8008728 <pbuf_free>
      return;
 80138c4:	e1c7      	b.n	8013c56 <nd6_input+0x852>
        IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ra_hdr->code != 0) {
 80138c6:	786b      	ldrb	r3, [r5, #1]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	f47f adc0 	bne.w	801344e <nd6_input+0x4a>
    if ((inp->rs_count < LWIP_ND6_MAX_MULTICAST_SOLICIT) ||
 80138ce:	f891 30c8 	ldrb.w	r3, [r1, #200]	; 0xc8
 80138d2:	2b02      	cmp	r3, #2
 80138d4:	d822      	bhi.n	801391c <nd6_input+0x518>
      inp->rs_count = 0;
 80138d6:	2300      	movs	r3, #0
 80138d8:	f886 30c8 	strb.w	r3, [r6, #200]	; 0xc8
    i = nd6_get_router(ip6_current_src_addr(), inp);
 80138dc:	4631      	mov	r1, r6
 80138de:	4859      	ldr	r0, [pc, #356]	; (8013a44 <nd6_input+0x640>)
 80138e0:	f7fe fe9c 	bl	801261c <nd6_get_router>
    if (i < 0) {
 80138e4:	1e07      	subs	r7, r0, #0
 80138e6:	db22      	blt.n	801392e <nd6_input+0x52a>
    if (i < 0) {
 80138e8:	2f00      	cmp	r7, #0
 80138ea:	db26      	blt.n	801393a <nd6_input+0x536>
    default_router_list[i].invalidation_timer = lwip_htons(ra_hdr->router_lifetime);
 80138ec:	88e8      	ldrh	r0, [r5, #6]
 80138ee:	f7f3 fc7d 	bl	80071ec <lwip_htons>
 80138f2:	46b8      	mov	r8, r7
 80138f4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80138f8:	00ba      	lsls	r2, r7, #2
 80138fa:	4b54      	ldr	r3, [pc, #336]	; (8013a4c <nd6_input+0x648>)
 80138fc:	4413      	add	r3, r2
 80138fe:	6058      	str	r0, [r3, #4]
    if (ra_hdr->retrans_timer > 0) {
 8013900:	68e8      	ldr	r0, [r5, #12]
 8013902:	b9f0      	cbnz	r0, 8013942 <nd6_input+0x53e>
    if (ra_hdr->reachable_time > 0) {
 8013904:	68a8      	ldr	r0, [r5, #8]
 8013906:	bb08      	cbnz	r0, 801394c <nd6_input+0x548>
    default_router_list[i].flags = ra_hdr->flags;
 8013908:	7969      	ldrb	r1, [r5, #5]
 801390a:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801390e:	009a      	lsls	r2, r3, #2
 8013910:	4b4e      	ldr	r3, [pc, #312]	; (8013a4c <nd6_input+0x648>)
 8013912:	4413      	add	r3, r2
 8013914:	7219      	strb	r1, [r3, #8]
    offset = sizeof(struct ra_header);
 8013916:	f04f 0910 	mov.w	r9, #16
    while ((p->tot_len - offset) >= 2) {
 801391a:	e031      	b.n	8013980 <nd6_input+0x57c>
        (nd6_send_rs(inp) == ERR_OK)) {
 801391c:	4608      	mov	r0, r1
 801391e:	f7ff fa17 	bl	8012d50 <nd6_send_rs>
    if ((inp->rs_count < LWIP_ND6_MAX_MULTICAST_SOLICIT) ||
 8013922:	2800      	cmp	r0, #0
 8013924:	d0d7      	beq.n	80138d6 <nd6_input+0x4d2>
      inp->rs_count = 1;
 8013926:	2301      	movs	r3, #1
 8013928:	f886 30c8 	strb.w	r3, [r6, #200]	; 0xc8
 801392c:	e7d6      	b.n	80138dc <nd6_input+0x4d8>
      i = nd6_new_router(ip6_current_src_addr(), inp);
 801392e:	4631      	mov	r1, r6
 8013930:	4844      	ldr	r0, [pc, #272]	; (8013a44 <nd6_input+0x640>)
 8013932:	f7ff fafb 	bl	8012f2c <nd6_new_router>
 8013936:	4607      	mov	r7, r0
 8013938:	e7d6      	b.n	80138e8 <nd6_input+0x4e4>
      pbuf_free(p);
 801393a:	4620      	mov	r0, r4
 801393c:	f7f4 fef4 	bl	8008728 <pbuf_free>
      return;
 8013940:	e189      	b.n	8013c56 <nd6_input+0x852>
      retrans_timer = lwip_htonl(ra_hdr->retrans_timer);
 8013942:	f7f3 fc58 	bl	80071f6 <lwip_htonl>
 8013946:	4b42      	ldr	r3, [pc, #264]	; (8013a50 <nd6_input+0x64c>)
 8013948:	6018      	str	r0, [r3, #0]
 801394a:	e7db      	b.n	8013904 <nd6_input+0x500>
      reachable_time = lwip_htonl(ra_hdr->reachable_time);
 801394c:	f7f3 fc53 	bl	80071f6 <lwip_htonl>
 8013950:	4b40      	ldr	r3, [pc, #256]	; (8013a54 <nd6_input+0x650>)
 8013952:	6018      	str	r0, [r3, #0]
 8013954:	e7d8      	b.n	8013908 <nd6_input+0x504>
        buffer = &((u8_t*)p->payload)[offset];
 8013956:	6867      	ldr	r7, [r4, #4]
 8013958:	444f      	add	r7, r9
 801395a:	e006      	b.n	801396a <nd6_input+0x566>
        option_len = pbuf_copy_partial(p, &nd6_ra_buffer, option_len, offset);
 801395c:	4f3e      	ldr	r7, [pc, #248]	; (8013a58 <nd6_input+0x654>)
 801395e:	464b      	mov	r3, r9
 8013960:	4639      	mov	r1, r7
 8013962:	4620      	mov	r0, r4
 8013964:	f7f5 f938 	bl	8008bd8 <pbuf_copy_partial>
 8013968:	4602      	mov	r2, r0
      option_type = buffer[0];
 801396a:	783b      	ldrb	r3, [r7, #0]
      switch (option_type) {
 801396c:	2b03      	cmp	r3, #3
 801396e:	d075      	beq.n	8013a5c <nd6_input+0x658>
 8013970:	2b05      	cmp	r3, #5
 8013972:	d04c      	beq.n	8013a0e <nd6_input+0x60a>
 8013974:	2b01      	cmp	r3, #1
 8013976:	d028      	beq.n	80139ca <nd6_input+0x5c6>
      offset += 8 * (u8_t)option_len8;
 8013978:	eb09 05c5 	add.w	r5, r9, r5, lsl #3
 801397c:	fa1f f985 	uxth.w	r9, r5
    while ((p->tot_len - offset) >= 2) {
 8013980:	8923      	ldrh	r3, [r4, #8]
 8013982:	464f      	mov	r7, r9
 8013984:	eba3 0309 	sub.w	r3, r3, r9
 8013988:	2b01      	cmp	r3, #1
 801398a:	f340 8161 	ble.w	8013c50 <nd6_input+0x84c>
      int option_len8 = pbuf_try_get_at(p, offset + 1);
 801398e:	f109 0101 	add.w	r1, r9, #1
 8013992:	b289      	uxth	r1, r1
 8013994:	4620      	mov	r0, r4
 8013996:	f7f5 fa27 	bl	8008de8 <pbuf_try_get_at>
      if (option_len8 <= 0) {
 801399a:	2800      	cmp	r0, #0
 801399c:	f340 815e 	ble.w	8013c5c <nd6_input+0x858>
      option_len = ((u8_t)option_len8) << 3;
 80139a0:	b2c5      	uxtb	r5, r0
 80139a2:	00ea      	lsls	r2, r5, #3
      if (option_len > p->tot_len - offset) {
 80139a4:	8923      	ldrh	r3, [r4, #8]
 80139a6:	1bdf      	subs	r7, r3, r7
 80139a8:	42ba      	cmp	r2, r7
 80139aa:	f300 8157 	bgt.w	8013c5c <nd6_input+0x858>
      if (p->len == p->tot_len) {
 80139ae:	8961      	ldrh	r1, [r4, #10]
 80139b0:	428b      	cmp	r3, r1
 80139b2:	d0d0      	beq.n	8013956 <nd6_input+0x552>
        if (option_len > sizeof(nd6_ra_buffer)) {
 80139b4:	2a20      	cmp	r2, #32
 80139b6:	d9d1      	bls.n	801395c <nd6_input+0x558>
          option_type = pbuf_get_at(p, offset);
 80139b8:	4649      	mov	r1, r9
 80139ba:	4620      	mov	r0, r4
 80139bc:	f7f5 fa2b 	bl	8008e16 <pbuf_get_at>
          if (option_type != ND6_OPTION_TYPE_RDNSS) {
 80139c0:	2819      	cmp	r0, #25
 80139c2:	f040 814b 	bne.w	8013c5c <nd6_input+0x858>
          option_len = sizeof(nd6_ra_buffer);
 80139c6:	2220      	movs	r2, #32
 80139c8:	e7c8      	b.n	801395c <nd6_input+0x558>
        if (option_len < sizeof(struct lladdr_option)) {
 80139ca:	2a07      	cmp	r2, #7
 80139cc:	f240 8146 	bls.w	8013c5c <nd6_input+0x858>
        if ((default_router_list[i].neighbor_entry != NULL) &&
 80139d0:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 80139d4:	0093      	lsls	r3, r2, #2
 80139d6:	4a1d      	ldr	r2, [pc, #116]	; (8013a4c <nd6_input+0x648>)
 80139d8:	58d0      	ldr	r0, [r2, r3]
 80139da:	2800      	cmp	r0, #0
 80139dc:	d0cc      	beq.n	8013978 <nd6_input+0x574>
            (default_router_list[i].neighbor_entry->state == ND6_INCOMPLETE)) {
 80139de:	f890 3020 	ldrb.w	r3, [r0, #32]
        if ((default_router_list[i].neighbor_entry != NULL) &&
 80139e2:	2b01      	cmp	r3, #1
 80139e4:	d1c8      	bne.n	8013978 <nd6_input+0x574>
          SMEMCPY(default_router_list[i].neighbor_entry->lladdr, lladdr_opt->addr, inp->hwaddr_len);
 80139e6:	f896 20c2 	ldrb.w	r2, [r6, #194]	; 0xc2
 80139ea:	1cb9      	adds	r1, r7, #2
 80139ec:	3014      	adds	r0, #20
 80139ee:	f000 fdd4 	bl	801459a <memcpy>
          default_router_list[i].neighbor_entry->state = ND6_REACHABLE;
 80139f2:	4916      	ldr	r1, [pc, #88]	; (8013a4c <nd6_input+0x648>)
 80139f4:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80139f8:	4443      	add	r3, r8
 80139fa:	009a      	lsls	r2, r3, #2
 80139fc:	588b      	ldr	r3, [r1, r2]
 80139fe:	2002      	movs	r0, #2
 8013a00:	f883 0020 	strb.w	r0, [r3, #32]
          default_router_list[i].neighbor_entry->counter.reachable_time = reachable_time;
 8013a04:	588b      	ldr	r3, [r1, r2]
 8013a06:	4a13      	ldr	r2, [pc, #76]	; (8013a54 <nd6_input+0x650>)
 8013a08:	6812      	ldr	r2, [r2, #0]
 8013a0a:	625a      	str	r2, [r3, #36]	; 0x24
 8013a0c:	e7b4      	b.n	8013978 <nd6_input+0x574>
        if (option_len < sizeof(struct mtu_option)) {
 8013a0e:	2a07      	cmp	r2, #7
 8013a10:	f240 8124 	bls.w	8013c5c <nd6_input+0x858>
        mtu32 = lwip_htonl(mtu_opt->mtu);
 8013a14:	6878      	ldr	r0, [r7, #4]
 8013a16:	f7f3 fbee 	bl	80071f6 <lwip_htonl>
        if ((mtu32 >= 1280) && (mtu32 <= 0xffff)) {
 8013a1a:	f5a0 63a0 	sub.w	r3, r0, #1280	; 0x500
 8013a1e:	f5b3 4f7b 	cmp.w	r3, #64256	; 0xfb00
 8013a22:	d2a9      	bcs.n	8013978 <nd6_input+0x574>
          if (inp->mtu) {
 8013a24:	f8b6 30b8 	ldrh.w	r3, [r6, #184]	; 0xb8
 8013a28:	b133      	cbz	r3, 8013a38 <nd6_input+0x634>
            inp->mtu6 = LWIP_MIN(inp->mtu, (u16_t)mtu32);
 8013a2a:	b280      	uxth	r0, r0
 8013a2c:	4298      	cmp	r0, r3
 8013a2e:	bf28      	it	cs
 8013a30:	4618      	movcs	r0, r3
 8013a32:	f8a6 00ba 	strh.w	r0, [r6, #186]	; 0xba
 8013a36:	e79f      	b.n	8013978 <nd6_input+0x574>
            inp->mtu6 = (u16_t)mtu32;
 8013a38:	f8a6 00ba 	strh.w	r0, [r6, #186]	; 0xba
 8013a3c:	e79c      	b.n	8013978 <nd6_input+0x574>
 8013a3e:	bf00      	nop
 8013a40:	20004b84 	.word	0x20004b84
 8013a44:	20004b98 	.word	0x20004b98
 8013a48:	20008c94 	.word	0x20008c94
 8013a4c:	2000902c 	.word	0x2000902c
 8013a50:	2000001c 	.word	0x2000001c
 8013a54:	20000018 	.word	0x20000018
 8013a58:	200018b0 	.word	0x200018b0
        if (option_len < sizeof(struct prefix_option)) {
 8013a5c:	2a1f      	cmp	r2, #31
 8013a5e:	f240 80fd 	bls.w	8013c5c <nd6_input+0x858>
        ip6_addr_copy_from_packed(prefix_addr, prefix_opt->prefix);
 8013a62:	693b      	ldr	r3, [r7, #16]
 8013a64:	9304      	str	r3, [sp, #16]
 8013a66:	697a      	ldr	r2, [r7, #20]
 8013a68:	9205      	str	r2, [sp, #20]
 8013a6a:	69ba      	ldr	r2, [r7, #24]
 8013a6c:	9206      	str	r2, [sp, #24]
 8013a6e:	69fa      	ldr	r2, [r7, #28]
 8013a70:	9207      	str	r2, [sp, #28]
        if (!ip6_addr_islinklocal(&prefix_addr)) {
 8013a72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013a76:	041b      	lsls	r3, r3, #16
 8013a78:	0c1b      	lsrs	r3, r3, #16
 8013a7a:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8013a7e:	4293      	cmp	r3, r2
 8013a80:	f43f af7a 	beq.w	8013978 <nd6_input+0x574>
          if ((prefix_opt->flags & ND6_PREFIX_FLAG_ON_LINK) &&
 8013a84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	db0a      	blt.n	8013aa2 <nd6_input+0x69e>
          if (prefix_opt->flags & ND6_PREFIX_FLAG_AUTONOMOUS) {
 8013a8c:	78fb      	ldrb	r3, [r7, #3]
 8013a8e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013a92:	f43f af71 	beq.w	8013978 <nd6_input+0x574>
            nd6_process_autoconfig_prefix(inp, prefix_opt, &prefix_addr);
 8013a96:	aa04      	add	r2, sp, #16
 8013a98:	4639      	mov	r1, r7
 8013a9a:	4630      	mov	r0, r6
 8013a9c:	f7fe fec2 	bl	8012824 <nd6_process_autoconfig_prefix>
 8013aa0:	e76a      	b.n	8013978 <nd6_input+0x574>
              (prefix_opt->prefix_length == 64)) {
 8013aa2:	78bb      	ldrb	r3, [r7, #2]
          if ((prefix_opt->flags & ND6_PREFIX_FLAG_ON_LINK) &&
 8013aa4:	2b40      	cmp	r3, #64	; 0x40
 8013aa6:	d1f1      	bne.n	8013a8c <nd6_input+0x688>
            valid_life = lwip_htonl(prefix_opt->valid_lifetime);
 8013aa8:	6878      	ldr	r0, [r7, #4]
 8013aaa:	f7f3 fba4 	bl	80071f6 <lwip_htonl>
 8013aae:	4682      	mov	sl, r0
            prefix = nd6_get_onlink_prefix(&prefix_addr, inp);
 8013ab0:	4631      	mov	r1, r6
 8013ab2:	a804      	add	r0, sp, #16
 8013ab4:	f7fe fde4 	bl	8012680 <nd6_get_onlink_prefix>
            if (prefix < 0 && valid_life > 0) {
 8013ab8:	2800      	cmp	r0, #0
 8013aba:	db08      	blt.n	8013ace <nd6_input+0x6ca>
            if (prefix >= 0) {
 8013abc:	2800      	cmp	r0, #0
 8013abe:	dbe5      	blt.n	8013a8c <nd6_input+0x688>
              prefix_list[prefix].invalidation_timer = valid_life;
 8013ac0:	4b68      	ldr	r3, [pc, #416]	; (8013c64 <nd6_input+0x860>)
 8013ac2:	2218      	movs	r2, #24
 8013ac4:	fb02 3000 	mla	r0, r2, r0, r3
 8013ac8:	f8c0 a014 	str.w	sl, [r0, #20]
 8013acc:	e7de      	b.n	8013a8c <nd6_input+0x688>
            if (prefix < 0 && valid_life > 0) {
 8013ace:	f1ba 0f00 	cmp.w	sl, #0
 8013ad2:	d0f3      	beq.n	8013abc <nd6_input+0x6b8>
              prefix = nd6_new_onlink_prefix(&prefix_addr, inp);
 8013ad4:	4631      	mov	r1, r6
 8013ad6:	a804      	add	r0, sp, #16
 8013ad8:	f7fe fe00 	bl	80126dc <nd6_new_onlink_prefix>
 8013adc:	e7ee      	b.n	8013abc <nd6_input+0x6b8>
      pbuf_free(p);
 8013ade:	f7f4 fe23 	bl	8008728 <pbuf_free>
      return;
 8013ae2:	e0b8      	b.n	8013c56 <nd6_input+0x852>
        redir_hdr->code != 0 || ip6_addr_ismulticast(&destination_address)) {
 8013ae4:	786b      	ldrb	r3, [r5, #1]
        IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM ||
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	f47f acd6 	bne.w	8013498 <nd6_input+0x94>
        redir_hdr->code != 0 || ip6_addr_ismulticast(&destination_address)) {
 8013aec:	b2d2      	uxtb	r2, r2
 8013aee:	2aff      	cmp	r2, #255	; 0xff
 8013af0:	f43f acd2 	beq.w	8013498 <nd6_input+0x94>
    if (p->len >= (sizeof(struct redirect_header) + 2)) {
 8013af4:	8942      	ldrh	r2, [r0, #10]
 8013af6:	2a29      	cmp	r2, #41	; 0x29
 8013af8:	d90a      	bls.n	8013b10 <nd6_input+0x70c>
      lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct redirect_header));
 8013afa:	6843      	ldr	r3, [r0, #4]
 8013afc:	f103 0728 	add.w	r7, r3, #40	; 0x28
      if (p->len < (sizeof(struct redirect_header) + (lladdr_opt->length << 3))) {
 8013b00:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8013b04:	00db      	lsls	r3, r3, #3
 8013b06:	3328      	adds	r3, #40	; 0x28
 8013b08:	429a      	cmp	r2, r3
 8013b0a:	d202      	bcs.n	8013b12 <nd6_input+0x70e>
        lladdr_opt = NULL;
 8013b0c:	2700      	movs	r7, #0
 8013b0e:	e000      	b.n	8013b12 <nd6_input+0x70e>
      lladdr_opt = NULL;
 8013b10:	2700      	movs	r7, #0
    dest_idx = nd6_find_destination_cache_entry(&destination_address);
 8013b12:	4668      	mov	r0, sp
 8013b14:	f7fe fc48 	bl	80123a8 <nd6_find_destination_cache_entry>
    if (dest_idx < 0) {
 8013b18:	2800      	cmp	r0, #0
 8013b1a:	db47      	blt.n	8013bac <nd6_input+0x7a8>
    ip6_addr_copy_from_packed(target_address, redir_hdr->target_address);
 8013b1c:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8013b20:	f8cd 8010 	str.w	r8, [sp, #16]
 8013b24:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8013b28:	f8cd e014 	str.w	lr, [sp, #20]
 8013b2c:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8013b30:	f8cd c018 	str.w	ip, [sp, #24]
 8013b34:	696d      	ldr	r5, [r5, #20]
 8013b36:	9507      	str	r5, [sp, #28]
    ip6_addr_copy(destination_cache[dest_idx].next_hop_addr, target_address);
 8013b38:	494b      	ldr	r1, [pc, #300]	; (8013c68 <nd6_input+0x864>)
 8013b3a:	0082      	lsls	r2, r0, #2
 8013b3c:	eb02 0900 	add.w	r9, r2, r0
 8013b40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8013b44:	4699      	mov	r9, r3
 8013b46:	440b      	add	r3, r1
 8013b48:	f8c3 8010 	str.w	r8, [r3, #16]
 8013b4c:	f8c3 e014 	str.w	lr, [r3, #20]
 8013b50:	f8c3 c018 	str.w	ip, [r3, #24]
 8013b54:	4449      	add	r1, r9
 8013b56:	61cd      	str	r5, [r1, #28]
    if (lladdr_opt != NULL) {
 8013b58:	2f00      	cmp	r7, #0
 8013b5a:	d079      	beq.n	8013c50 <nd6_input+0x84c>
      if (lladdr_opt->type == ND6_OPTION_TYPE_TARGET_LLADDR) {
 8013b5c:	783b      	ldrb	r3, [r7, #0]
 8013b5e:	2b02      	cmp	r3, #2
 8013b60:	d176      	bne.n	8013c50 <nd6_input+0x84c>
        i = nd6_find_neighbor_cache_entry(&target_address);
 8013b62:	a804      	add	r0, sp, #16
 8013b64:	f7fe fbee 	bl	8012344 <nd6_find_neighbor_cache_entry>
        if (i < 0) {
 8013b68:	f1b0 0800 	subs.w	r8, r0, #0
 8013b6c:	db22      	blt.n	8013bb4 <nd6_input+0x7b0>
        if (i >= 0) {
 8013b6e:	f1b8 0f00 	cmp.w	r8, #0
 8013b72:	db6d      	blt.n	8013c50 <nd6_input+0x84c>
          if (neighbor_cache[i].state == ND6_INCOMPLETE) {
 8013b74:	4a3d      	ldr	r2, [pc, #244]	; (8013c6c <nd6_input+0x868>)
 8013b76:	2328      	movs	r3, #40	; 0x28
 8013b78:	fb03 2308 	mla	r3, r3, r8, r2
 8013b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b80:	2b01      	cmp	r3, #1
 8013b82:	d165      	bne.n	8013c50 <nd6_input+0x84c>
            MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 8013b84:	2528      	movs	r5, #40	; 0x28
 8013b86:	fb05 f808 	mul.w	r8, r5, r8
 8013b8a:	f108 0010 	add.w	r0, r8, #16
 8013b8e:	4615      	mov	r5, r2
 8013b90:	4410      	add	r0, r2
 8013b92:	f896 20c2 	ldrb.w	r2, [r6, #194]	; 0xc2
 8013b96:	1cb9      	adds	r1, r7, #2
 8013b98:	3004      	adds	r0, #4
 8013b9a:	f000 fcfe 	bl	801459a <memcpy>
            neighbor_cache[i].state = ND6_DELAY;
 8013b9e:	4445      	add	r5, r8
 8013ba0:	2304      	movs	r3, #4
 8013ba2:	f885 3020 	strb.w	r3, [r5, #32]
            neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 8013ba6:	2305      	movs	r3, #5
 8013ba8:	626b      	str	r3, [r5, #36]	; 0x24
 8013baa:	e051      	b.n	8013c50 <nd6_input+0x84c>
      pbuf_free(p);
 8013bac:	4620      	mov	r0, r4
 8013bae:	f7f4 fdbb 	bl	8008728 <pbuf_free>
      return;
 8013bb2:	e050      	b.n	8013c56 <nd6_input+0x852>
          i = nd6_new_neighbor_cache_entry();
 8013bb4:	f7fe ff72 	bl	8012a9c <nd6_new_neighbor_cache_entry>
          if (i >= 0) {
 8013bb8:	f1b0 0800 	subs.w	r8, r0, #0
 8013bbc:	dbd7      	blt.n	8013b6e <nd6_input+0x76a>
            neighbor_cache[i].netif = inp;
 8013bbe:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8013c6c <nd6_input+0x868>
 8013bc2:	f04f 0928 	mov.w	r9, #40	; 0x28
 8013bc6:	fb09 f908 	mul.w	r9, r9, r8
 8013bca:	eb0a 0509 	add.w	r5, sl, r9
 8013bce:	612e      	str	r6, [r5, #16]
            MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 8013bd0:	f109 0010 	add.w	r0, r9, #16
 8013bd4:	4450      	add	r0, sl
 8013bd6:	f896 20c2 	ldrb.w	r2, [r6, #194]	; 0xc2
 8013bda:	1cb9      	adds	r1, r7, #2
 8013bdc:	3004      	adds	r0, #4
 8013bde:	f000 fcdc 	bl	801459a <memcpy>
            ip6_addr_copy(neighbor_cache[i].next_hop_address, target_address);
 8013be2:	9b04      	ldr	r3, [sp, #16]
 8013be4:	f84a 3009 	str.w	r3, [sl, r9]
 8013be8:	9b05      	ldr	r3, [sp, #20]
 8013bea:	606b      	str	r3, [r5, #4]
 8013bec:	9b06      	ldr	r3, [sp, #24]
 8013bee:	60ab      	str	r3, [r5, #8]
 8013bf0:	9b07      	ldr	r3, [sp, #28]
 8013bf2:	60eb      	str	r3, [r5, #12]
            neighbor_cache[i].state = ND6_DELAY;
 8013bf4:	2304      	movs	r3, #4
 8013bf6:	f885 3020 	strb.w	r3, [r5, #32]
            neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 8013bfa:	2305      	movs	r3, #5
 8013bfc:	626b      	str	r3, [r5, #36]	; 0x24
 8013bfe:	e7b6      	b.n	8013b6e <nd6_input+0x76a>
    if (p->len < (sizeof(struct icmp6_hdr) + IP6_HLEN)) {
 8013c00:	8943      	ldrh	r3, [r0, #10]
 8013c02:	2b2f      	cmp	r3, #47	; 0x2f
 8013c04:	d915      	bls.n	8013c32 <nd6_input+0x82e>
    ip6_addr_copy_from_packed(destination_address, ip6hdr->dest);
 8013c06:	6a2b      	ldr	r3, [r5, #32]
 8013c08:	9304      	str	r3, [sp, #16]
 8013c0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013c0c:	9305      	str	r3, [sp, #20]
 8013c0e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8013c10:	9306      	str	r3, [sp, #24]
 8013c12:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8013c14:	9307      	str	r3, [sp, #28]
    dest_idx = nd6_find_destination_cache_entry(&destination_address);
 8013c16:	a804      	add	r0, sp, #16
 8013c18:	f7fe fbc6 	bl	80123a8 <nd6_find_destination_cache_entry>
    if (dest_idx < 0) {
 8013c1c:	1e06      	subs	r6, r0, #0
 8013c1e:	db0b      	blt.n	8013c38 <nd6_input+0x834>
    pmtu = lwip_htonl(icmp6hdr->data);
 8013c20:	6868      	ldr	r0, [r5, #4]
 8013c22:	f7f3 fae8 	bl	80071f6 <lwip_htonl>
    destination_cache[dest_idx].pmtu = (u16_t)LWIP_MIN(pmtu, 0xFFFF);
 8013c26:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8013c2a:	4298      	cmp	r0, r3
 8013c2c:	d808      	bhi.n	8013c40 <nd6_input+0x83c>
 8013c2e:	b280      	uxth	r0, r0
 8013c30:	e008      	b.n	8013c44 <nd6_input+0x840>
      pbuf_free(p);
 8013c32:	f7f4 fd79 	bl	8008728 <pbuf_free>
      return;
 8013c36:	e00e      	b.n	8013c56 <nd6_input+0x852>
      pbuf_free(p);
 8013c38:	4620      	mov	r0, r4
 8013c3a:	f7f4 fd75 	bl	8008728 <pbuf_free>
      return;
 8013c3e:	e00a      	b.n	8013c56 <nd6_input+0x852>
    destination_cache[dest_idx].pmtu = (u16_t)LWIP_MIN(pmtu, 0xFFFF);
 8013c40:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013c44:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8013c48:	00f2      	lsls	r2, r6, #3
 8013c4a:	4b07      	ldr	r3, [pc, #28]	; (8013c68 <nd6_input+0x864>)
 8013c4c:	4413      	add	r3, r2
 8013c4e:	8418      	strh	r0, [r3, #32]
  pbuf_free(p);
 8013c50:	4620      	mov	r0, r4
 8013c52:	f7f4 fd69 	bl	8008728 <pbuf_free>
}
 8013c56:	b009      	add	sp, #36	; 0x24
 8013c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pbuf_free(p);
 8013c5c:	4620      	mov	r0, r4
 8013c5e:	f7f4 fd63 	bl	8008728 <pbuf_free>
 8013c62:	e7f8      	b.n	8013c56 <nd6_input+0x852>
 8013c64:	20008e24 	.word	0x20008e24
 8013c68:	20008e9c 	.word	0x20008e9c
 8013c6c:	20008c94 	.word	0x20008c94

08013c70 <nd6_tmr>:
{
 8013c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8013c74:	2400      	movs	r4, #0
 8013c76:	e053      	b.n	8013d20 <nd6_tmr+0xb0>
      if ((neighbor_cache[i].counter.probes_sent >= LWIP_ND6_MAX_MULTICAST_SOLICIT) &&
 8013c78:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8013c7c:	00da      	lsls	r2, r3, #3
 8013c7e:	4bb4      	ldr	r3, [pc, #720]	; (8013f50 <nd6_tmr+0x2e0>)
 8013c80:	4413      	add	r3, r2
 8013c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013c84:	2a02      	cmp	r2, #2
 8013c86:	d907      	bls.n	8013c98 <nd6_tmr+0x28>
          (!neighbor_cache[i].isrouter)) {
 8013c88:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8013c8c:	00d9      	lsls	r1, r3, #3
 8013c8e:	4bb0      	ldr	r3, [pc, #704]	; (8013f50 <nd6_tmr+0x2e0>)
 8013c90:	440b      	add	r3, r1
 8013c92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
      if ((neighbor_cache[i].counter.probes_sent >= LWIP_ND6_MAX_MULTICAST_SOLICIT) &&
 8013c96:	b163      	cbz	r3, 8013cb2 <nd6_tmr+0x42>
        neighbor_cache[i].counter.probes_sent++;
 8013c98:	48ad      	ldr	r0, [pc, #692]	; (8013f50 <nd6_tmr+0x2e0>)
 8013c9a:	00ab      	lsls	r3, r5, #2
 8013c9c:	195e      	adds	r6, r3, r5
 8013c9e:	00f1      	lsls	r1, r6, #3
 8013ca0:	460e      	mov	r6, r1
 8013ca2:	4401      	add	r1, r0
 8013ca4:	3201      	adds	r2, #1
 8013ca6:	624a      	str	r2, [r1, #36]	; 0x24
        nd6_send_neighbor_cache_probe(&neighbor_cache[i], ND6_SEND_FLAG_MULTICAST_DEST);
 8013ca8:	2101      	movs	r1, #1
 8013caa:	4430      	add	r0, r6
 8013cac:	f7ff f936 	bl	8012f1c <nd6_send_neighbor_cache_probe>
 8013cb0:	e034      	b.n	8013d1c <nd6_tmr+0xac>
        nd6_free_neighbor_cache_entry(i);
 8013cb2:	4620      	mov	r0, r4
 8013cb4:	f7fe fec4 	bl	8012a40 <nd6_free_neighbor_cache_entry>
 8013cb8:	e030      	b.n	8013d1c <nd6_tmr+0xac>
      if (neighbor_cache[i].q != NULL) {
 8013cba:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8013cbe:	00da      	lsls	r2, r3, #3
 8013cc0:	4ba3      	ldr	r3, [pc, #652]	; (8013f50 <nd6_tmr+0x2e0>)
 8013cc2:	4413      	add	r3, r2
 8013cc4:	69db      	ldr	r3, [r3, #28]
 8013cc6:	b113      	cbz	r3, 8013cce <nd6_tmr+0x5e>
        nd6_send_q(i);
 8013cc8:	4620      	mov	r0, r4
 8013cca:	f7fe fd55 	bl	8012778 <nd6_send_q>
      if (neighbor_cache[i].counter.reachable_time <= ND6_TMR_INTERVAL) {
 8013cce:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8013cd2:	00da      	lsls	r2, r3, #3
 8013cd4:	4b9e      	ldr	r3, [pc, #632]	; (8013f50 <nd6_tmr+0x2e0>)
 8013cd6:	4413      	add	r3, r2
 8013cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013cde:	d80a      	bhi.n	8013cf6 <nd6_tmr+0x86>
        neighbor_cache[i].state = ND6_STALE;
 8013ce0:	4a9b      	ldr	r2, [pc, #620]	; (8013f50 <nd6_tmr+0x2e0>)
 8013ce2:	00ab      	lsls	r3, r5, #2
 8013ce4:	1958      	adds	r0, r3, r5
 8013ce6:	00c1      	lsls	r1, r0, #3
 8013ce8:	4411      	add	r1, r2
 8013cea:	2003      	movs	r0, #3
 8013cec:	f881 0020 	strb.w	r0, [r1, #32]
        neighbor_cache[i].counter.stale_time = 0;
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	624b      	str	r3, [r1, #36]	; 0x24
 8013cf4:	e012      	b.n	8013d1c <nd6_tmr+0xac>
        neighbor_cache[i].counter.reachable_time -= ND6_TMR_INTERVAL;
 8013cf6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8013cfa:	00e9      	lsls	r1, r5, #3
 8013cfc:	4a94      	ldr	r2, [pc, #592]	; (8013f50 <nd6_tmr+0x2e0>)
 8013cfe:	440a      	add	r2, r1
 8013d00:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8013d04:	6253      	str	r3, [r2, #36]	; 0x24
 8013d06:	e009      	b.n	8013d1c <nd6_tmr+0xac>
      neighbor_cache[i].counter.stale_time++;
 8013d08:	4a91      	ldr	r2, [pc, #580]	; (8013f50 <nd6_tmr+0x2e0>)
 8013d0a:	00a3      	lsls	r3, r4, #2
 8013d0c:	1918      	adds	r0, r3, r4
 8013d0e:	00c1      	lsls	r1, r0, #3
 8013d10:	4608      	mov	r0, r1
 8013d12:	4411      	add	r1, r2
 8013d14:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8013d16:	4402      	add	r2, r0
 8013d18:	3101      	adds	r1, #1
 8013d1a:	6251      	str	r1, [r2, #36]	; 0x24
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8013d1c:	3401      	adds	r4, #1
 8013d1e:	b264      	sxtb	r4, r4
 8013d20:	2c09      	cmp	r4, #9
 8013d22:	dc53      	bgt.n	8013dcc <nd6_tmr+0x15c>
    switch (neighbor_cache[i].state) {
 8013d24:	4625      	mov	r5, r4
 8013d26:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8013d2a:	00da      	lsls	r2, r3, #3
 8013d2c:	4b88      	ldr	r3, [pc, #544]	; (8013f50 <nd6_tmr+0x2e0>)
 8013d2e:	4413      	add	r3, r2
 8013d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d34:	3b01      	subs	r3, #1
 8013d36:	2b04      	cmp	r3, #4
 8013d38:	d8f0      	bhi.n	8013d1c <nd6_tmr+0xac>
 8013d3a:	a201      	add	r2, pc, #4	; (adr r2, 8013d40 <nd6_tmr+0xd0>)
 8013d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d40:	08013c79 	.word	0x08013c79
 8013d44:	08013cbb 	.word	0x08013cbb
 8013d48:	08013d09 	.word	0x08013d09
 8013d4c:	08013d55 	.word	0x08013d55
 8013d50:	08013d8b 	.word	0x08013d8b
      if (neighbor_cache[i].counter.delay_time <= 1) {
 8013d54:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8013d58:	00da      	lsls	r2, r3, #3
 8013d5a:	4b7d      	ldr	r3, [pc, #500]	; (8013f50 <nd6_tmr+0x2e0>)
 8013d5c:	4413      	add	r3, r2
 8013d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d60:	2b01      	cmp	r3, #1
 8013d62:	d907      	bls.n	8013d74 <nd6_tmr+0x104>
        neighbor_cache[i].counter.delay_time--;
 8013d64:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 8013d68:	00e9      	lsls	r1, r5, #3
 8013d6a:	4a79      	ldr	r2, [pc, #484]	; (8013f50 <nd6_tmr+0x2e0>)
 8013d6c:	440a      	add	r2, r1
 8013d6e:	3b01      	subs	r3, #1
 8013d70:	6253      	str	r3, [r2, #36]	; 0x24
 8013d72:	e7d3      	b.n	8013d1c <nd6_tmr+0xac>
        neighbor_cache[i].state = ND6_PROBE;
 8013d74:	4a76      	ldr	r2, [pc, #472]	; (8013f50 <nd6_tmr+0x2e0>)
 8013d76:	00a3      	lsls	r3, r4, #2
 8013d78:	1918      	adds	r0, r3, r4
 8013d7a:	00c1      	lsls	r1, r0, #3
 8013d7c:	4411      	add	r1, r2
 8013d7e:	2005      	movs	r0, #5
 8013d80:	f881 0020 	strb.w	r0, [r1, #32]
        neighbor_cache[i].counter.probes_sent = 0;
 8013d84:	2300      	movs	r3, #0
 8013d86:	624b      	str	r3, [r1, #36]	; 0x24
 8013d88:	e7c8      	b.n	8013d1c <nd6_tmr+0xac>
      if ((neighbor_cache[i].counter.probes_sent >= LWIP_ND6_MAX_MULTICAST_SOLICIT) &&
 8013d8a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8013d8e:	00da      	lsls	r2, r3, #3
 8013d90:	4b6f      	ldr	r3, [pc, #444]	; (8013f50 <nd6_tmr+0x2e0>)
 8013d92:	4413      	add	r3, r2
 8013d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013d96:	2a02      	cmp	r2, #2
 8013d98:	d907      	bls.n	8013daa <nd6_tmr+0x13a>
          (!neighbor_cache[i].isrouter)) {
 8013d9a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8013d9e:	00d9      	lsls	r1, r3, #3
 8013da0:	4b6b      	ldr	r3, [pc, #428]	; (8013f50 <nd6_tmr+0x2e0>)
 8013da2:	440b      	add	r3, r1
 8013da4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
      if ((neighbor_cache[i].counter.probes_sent >= LWIP_ND6_MAX_MULTICAST_SOLICIT) &&
 8013da8:	b163      	cbz	r3, 8013dc4 <nd6_tmr+0x154>
        neighbor_cache[i].counter.probes_sent++;
 8013daa:	4869      	ldr	r0, [pc, #420]	; (8013f50 <nd6_tmr+0x2e0>)
 8013dac:	00ab      	lsls	r3, r5, #2
 8013dae:	195e      	adds	r6, r3, r5
 8013db0:	00f1      	lsls	r1, r6, #3
 8013db2:	460e      	mov	r6, r1
 8013db4:	4401      	add	r1, r0
 8013db6:	3201      	adds	r2, #1
 8013db8:	624a      	str	r2, [r1, #36]	; 0x24
        nd6_send_neighbor_cache_probe(&neighbor_cache[i], 0);
 8013dba:	2100      	movs	r1, #0
 8013dbc:	4430      	add	r0, r6
 8013dbe:	f7ff f8ad 	bl	8012f1c <nd6_send_neighbor_cache_probe>
 8013dc2:	e7ab      	b.n	8013d1c <nd6_tmr+0xac>
        nd6_free_neighbor_cache_entry(i);
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	f7fe fe3b 	bl	8012a40 <nd6_free_neighbor_cache_entry>
 8013dca:	e7a7      	b.n	8013d1c <nd6_tmr+0xac>
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 8013dcc:	2300      	movs	r3, #0
 8013dce:	e00b      	b.n	8013de8 <nd6_tmr+0x178>
    destination_cache[i].age++;
 8013dd0:	4960      	ldr	r1, [pc, #384]	; (8013f54 <nd6_tmr+0x2e4>)
 8013dd2:	009a      	lsls	r2, r3, #2
 8013dd4:	18d4      	adds	r4, r2, r3
 8013dd6:	00e0      	lsls	r0, r4, #3
 8013dd8:	4604      	mov	r4, r0
 8013dda:	4408      	add	r0, r1
 8013ddc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013dde:	4421      	add	r1, r4
 8013de0:	3001      	adds	r0, #1
 8013de2:	6248      	str	r0, [r1, #36]	; 0x24
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 8013de4:	3301      	adds	r3, #1
 8013de6:	b25b      	sxtb	r3, r3
 8013de8:	2b09      	cmp	r3, #9
 8013dea:	ddf1      	ble.n	8013dd0 <nd6_tmr+0x160>
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 8013dec:	2000      	movs	r0, #0
 8013dee:	e047      	b.n	8013e80 <nd6_tmr+0x210>
        for (j = 0; j < LWIP_ND6_NUM_DESTINATIONS; j++) {
 8013df0:	3301      	adds	r3, #1
 8013df2:	b25b      	sxtb	r3, r3
 8013df4:	2b09      	cmp	r3, #9
 8013df6:	dc36      	bgt.n	8013e66 <nd6_tmr+0x1f6>
          if (ip6_addr_cmp(&destination_cache[j].next_hop_addr,
 8013df8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8013dfc:	00d1      	lsls	r1, r2, #3
 8013dfe:	4a55      	ldr	r2, [pc, #340]	; (8013f54 <nd6_tmr+0x2e4>)
 8013e00:	440a      	add	r2, r1
 8013e02:	6911      	ldr	r1, [r2, #16]
 8013e04:	6822      	ldr	r2, [r4, #0]
 8013e06:	4291      	cmp	r1, r2
 8013e08:	d1f2      	bne.n	8013df0 <nd6_tmr+0x180>
 8013e0a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8013e0e:	00d1      	lsls	r1, r2, #3
 8013e10:	4a50      	ldr	r2, [pc, #320]	; (8013f54 <nd6_tmr+0x2e4>)
 8013e12:	440a      	add	r2, r1
 8013e14:	6951      	ldr	r1, [r2, #20]
 8013e16:	6862      	ldr	r2, [r4, #4]
 8013e18:	4291      	cmp	r1, r2
 8013e1a:	d1e9      	bne.n	8013df0 <nd6_tmr+0x180>
 8013e1c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8013e20:	00d1      	lsls	r1, r2, #3
 8013e22:	4a4c      	ldr	r2, [pc, #304]	; (8013f54 <nd6_tmr+0x2e4>)
 8013e24:	440a      	add	r2, r1
 8013e26:	6991      	ldr	r1, [r2, #24]
 8013e28:	68a2      	ldr	r2, [r4, #8]
 8013e2a:	4291      	cmp	r1, r2
 8013e2c:	d1e0      	bne.n	8013df0 <nd6_tmr+0x180>
 8013e2e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8013e32:	00d1      	lsls	r1, r2, #3
 8013e34:	4a47      	ldr	r2, [pc, #284]	; (8013f54 <nd6_tmr+0x2e4>)
 8013e36:	440a      	add	r2, r1
 8013e38:	69d1      	ldr	r1, [r2, #28]
 8013e3a:	68e2      	ldr	r2, [r4, #12]
 8013e3c:	4291      	cmp	r1, r2
 8013e3e:	d1d7      	bne.n	8013df0 <nd6_tmr+0x180>
             ip6_addr_set_any(&destination_cache[j].destination_addr);
 8013e40:	4a44      	ldr	r2, [pc, #272]	; (8013f54 <nd6_tmr+0x2e4>)
 8013e42:	0099      	lsls	r1, r3, #2
 8013e44:	18cf      	adds	r7, r1, r3
 8013e46:	ea4f 0cc7 	mov.w	ip, r7, lsl #3
 8013e4a:	eb02 0e0c 	add.w	lr, r2, ip
 8013e4e:	2700      	movs	r7, #0
 8013e50:	f842 700c 	str.w	r7, [r2, ip]
 8013e54:	f8ce 7004 	str.w	r7, [lr, #4]
 8013e58:	f8ce 7008 	str.w	r7, [lr, #8]
 8013e5c:	f8ce 700c 	str.w	r7, [lr, #12]
 8013e60:	e7c6      	b.n	8013df0 <nd6_tmr+0x180>
        for (j = 0; j < LWIP_ND6_NUM_DESTINATIONS; j++) {
 8013e62:	2300      	movs	r3, #0
 8013e64:	e7c6      	b.n	8013df4 <nd6_tmr+0x184>
        default_router_list[i].neighbor_entry->isrouter = 0;
 8013e66:	2100      	movs	r1, #0
 8013e68:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
        default_router_list[i].neighbor_entry = NULL;
 8013e6c:	4a3a      	ldr	r2, [pc, #232]	; (8013f58 <nd6_tmr+0x2e8>)
 8013e6e:	006b      	lsls	r3, r5, #1
 8013e70:	195e      	adds	r6, r3, r5
 8013e72:	00b4      	lsls	r4, r6, #2
 8013e74:	1916      	adds	r6, r2, r4
 8013e76:	5111      	str	r1, [r2, r4]
        default_router_list[i].invalidation_timer = 0;
 8013e78:	6071      	str	r1, [r6, #4]
        default_router_list[i].flags = 0;
 8013e7a:	7231      	strb	r1, [r6, #8]
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 8013e7c:	3001      	adds	r0, #1
 8013e7e:	b240      	sxtb	r0, r0
 8013e80:	2802      	cmp	r0, #2
 8013e82:	dc17      	bgt.n	8013eb4 <nd6_tmr+0x244>
    if (default_router_list[i].neighbor_entry != NULL) {
 8013e84:	4605      	mov	r5, r0
 8013e86:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8013e8a:	0093      	lsls	r3, r2, #2
 8013e8c:	4a32      	ldr	r2, [pc, #200]	; (8013f58 <nd6_tmr+0x2e8>)
 8013e8e:	58d4      	ldr	r4, [r2, r3]
 8013e90:	2c00      	cmp	r4, #0
 8013e92:	d0f3      	beq.n	8013e7c <nd6_tmr+0x20c>
      if (default_router_list[i].invalidation_timer <= ND6_TMR_INTERVAL / 1000) {
 8013e94:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8013e98:	009a      	lsls	r2, r3, #2
 8013e9a:	4b2f      	ldr	r3, [pc, #188]	; (8013f58 <nd6_tmr+0x2e8>)
 8013e9c:	4413      	add	r3, r2
 8013e9e:	685a      	ldr	r2, [r3, #4]
 8013ea0:	2a01      	cmp	r2, #1
 8013ea2:	d9de      	bls.n	8013e62 <nd6_tmr+0x1f2>
        default_router_list[i].invalidation_timer -= ND6_TMR_INTERVAL / 1000;
 8013ea4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8013ea8:	0099      	lsls	r1, r3, #2
 8013eaa:	4b2b      	ldr	r3, [pc, #172]	; (8013f58 <nd6_tmr+0x2e8>)
 8013eac:	440b      	add	r3, r1
 8013eae:	3a01      	subs	r2, #1
 8013eb0:	605a      	str	r2, [r3, #4]
 8013eb2:	e7e3      	b.n	8013e7c <nd6_tmr+0x20c>
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	e00a      	b.n	8013ece <nd6_tmr+0x25e>
        prefix_list[i].invalidation_timer = 0;
 8013eb8:	4928      	ldr	r1, [pc, #160]	; (8013f5c <nd6_tmr+0x2ec>)
 8013eba:	005a      	lsls	r2, r3, #1
 8013ebc:	4408      	add	r0, r1
 8013ebe:	2500      	movs	r5, #0
 8013ec0:	6145      	str	r5, [r0, #20]
        prefix_list[i].netif = NULL;
 8013ec2:	441a      	add	r2, r3
 8013ec4:	00d0      	lsls	r0, r2, #3
 8013ec6:	4401      	add	r1, r0
 8013ec8:	610d      	str	r5, [r1, #16]
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
 8013eca:	3301      	adds	r3, #1
 8013ecc:	b25b      	sxtb	r3, r3
 8013ece:	2b04      	cmp	r3, #4
 8013ed0:	dc13      	bgt.n	8013efa <nd6_tmr+0x28a>
    if (prefix_list[i].netif != NULL) {
 8013ed2:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8013ed6:	00c1      	lsls	r1, r0, #3
 8013ed8:	4608      	mov	r0, r1
 8013eda:	4a20      	ldr	r2, [pc, #128]	; (8013f5c <nd6_tmr+0x2ec>)
 8013edc:	440a      	add	r2, r1
 8013ede:	6911      	ldr	r1, [r2, #16]
 8013ee0:	2900      	cmp	r1, #0
 8013ee2:	d0f2      	beq.n	8013eca <nd6_tmr+0x25a>
      if (prefix_list[i].invalidation_timer <= ND6_TMR_INTERVAL / 1000) {
 8013ee4:	6951      	ldr	r1, [r2, #20]
 8013ee6:	2901      	cmp	r1, #1
 8013ee8:	d9e6      	bls.n	8013eb8 <nd6_tmr+0x248>
        prefix_list[i].invalidation_timer -= ND6_TMR_INTERVAL / 1000;
 8013eea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013eee:	00d0      	lsls	r0, r2, #3
 8013ef0:	4a1a      	ldr	r2, [pc, #104]	; (8013f5c <nd6_tmr+0x2ec>)
 8013ef2:	4402      	add	r2, r0
 8013ef4:	3901      	subs	r1, #1
 8013ef6:	6151      	str	r1, [r2, #20]
 8013ef8:	e7e7      	b.n	8013eca <nd6_tmr+0x25a>
  NETIF_FOREACH(netif) {
 8013efa:	4b19      	ldr	r3, [pc, #100]	; (8013f60 <nd6_tmr+0x2f0>)
 8013efc:	681f      	ldr	r7, [r3, #0]
 8013efe:	2f00      	cmp	r7, #0
 8013f00:	f000 8097 	beq.w	8014032 <nd6_tmr+0x3c2>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 8013f04:	2400      	movs	r4, #0
 8013f06:	e03a      	b.n	8013f7e <nd6_tmr+0x30e>
          netif_ip6_addr_set_valid_life(netif, i, 0);
 8013f08:	f104 031e 	add.w	r3, r4, #30
 8013f0c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8013f10:	2200      	movs	r2, #0
 8013f12:	605a      	str	r2, [r3, #4]
          netif_ip6_addr_set_pref_life(netif, i, 0);
 8013f14:	f104 0322 	add.w	r3, r4, #34	; 0x22
 8013f18:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
          netif_ip6_addr_set_state(netif, i, IP6_ADDR_INVALID);
 8013f1c:	4621      	mov	r1, r4
 8013f1e:	4638      	mov	r0, r7
 8013f20:	f7f4 f9e2 	bl	80082e8 <netif_ip6_addr_set_state>
 8013f24:	e054      	b.n	8013fd0 <nd6_tmr+0x360>
            LWIP_ASSERT("bad valid lifetime", life != IP6_ADDR_LIFE_STATIC);
 8013f26:	4b0f      	ldr	r3, [pc, #60]	; (8013f64 <nd6_tmr+0x2f4>)
 8013f28:	f240 4246 	movw	r2, #1094	; 0x446
 8013f2c:	490e      	ldr	r1, [pc, #56]	; (8013f68 <nd6_tmr+0x2f8>)
 8013f2e:	480f      	ldr	r0, [pc, #60]	; (8013f6c <nd6_tmr+0x2fc>)
 8013f30:	f000 fb60 	bl	80145f4 <iprintf>
 8013f34:	e038      	b.n	8013fa8 <nd6_tmr+0x338>
            netif_ip6_addr_set_pref_life(netif, i, 0);
 8013f36:	f105 0322 	add.w	r3, r5, #34	; 0x22
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
            if (addr_state == IP6_ADDR_PREFERRED)
 8013f40:	2e30      	cmp	r6, #48	; 0x30
 8013f42:	d145      	bne.n	8013fd0 <nd6_tmr+0x360>
              netif_ip6_addr_set_state(netif, i, IP6_ADDR_DEPRECATED);
 8013f44:	2210      	movs	r2, #16
 8013f46:	4621      	mov	r1, r4
 8013f48:	4638      	mov	r0, r7
 8013f4a:	f7f4 f9cd 	bl	80082e8 <netif_ip6_addr_set_state>
 8013f4e:	e03f      	b.n	8013fd0 <nd6_tmr+0x360>
 8013f50:	20008c94 	.word	0x20008c94
 8013f54:	20008e9c 	.word	0x20008e9c
 8013f58:	2000902c 	.word	0x2000902c
 8013f5c:	20008e24 	.word	0x20008e24
 8013f60:	20008c38 	.word	0x20008c38
 8013f64:	080186e8 	.word	0x080186e8
 8013f68:	0801871c 	.word	0x0801871c
 8013f6c:	08015608 	.word	0x08015608
          addr_state = IP6_ADDR_PREFERRED;
 8013f70:	2230      	movs	r2, #48	; 0x30
          netif_ip6_addr_set_state(netif, i, addr_state);
 8013f72:	4621      	mov	r1, r4
 8013f74:	4638      	mov	r0, r7
 8013f76:	f7f4 f9b7 	bl	80082e8 <netif_ip6_addr_set_state>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 8013f7a:	3401      	adds	r4, #1
 8013f7c:	b264      	sxtb	r4, r4
 8013f7e:	2c02      	cmp	r4, #2
 8013f80:	dc57      	bgt.n	8014032 <nd6_tmr+0x3c2>
      addr_state = netif_ip6_addr_state(netif, i);
 8013f82:	4625      	mov	r5, r4
 8013f84:	193b      	adds	r3, r7, r4
 8013f86:	f893 6078 	ldrb.w	r6, [r3, #120]	; 0x78
      if (!ip6_addr_isinvalid(addr_state) &&
 8013f8a:	b30e      	cbz	r6, 8013fd0 <nd6_tmr+0x360>
          !netif_ip6_addr_isstatic(netif, i)) {
 8013f8c:	f104 031e 	add.w	r3, r4, #30
 8013f90:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8013f94:	685b      	ldr	r3, [r3, #4]
 8013f96:	b1db      	cbz	r3, 8013fd0 <nd6_tmr+0x360>
        if (life <= ND6_TMR_INTERVAL / 1000) {
 8013f98:	2b01      	cmp	r3, #1
 8013f9a:	d9b5      	bls.n	8013f08 <nd6_tmr+0x298>
          if (!ip6_addr_life_isinfinite(life)) {
 8013f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fa0:	d008      	beq.n	8013fb4 <nd6_tmr+0x344>
            LWIP_ASSERT("bad valid lifetime", life != IP6_ADDR_LIFE_STATIC);
 8013fa2:	f1b3 0801 	subs.w	r8, r3, #1
 8013fa6:	d0be      	beq.n	8013f26 <nd6_tmr+0x2b6>
            netif_ip6_addr_set_valid_life(netif, i, life);
 8013fa8:	f105 031e 	add.w	r3, r5, #30
 8013fac:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8013fb0:	f8c3 8004 	str.w	r8, [r3, #4]
          life = netif_ip6_addr_pref_life(netif, i);
 8013fb4:	f105 0322 	add.w	r3, r5, #34	; 0x22
 8013fb8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
          if (life <= ND6_TMR_INTERVAL / 1000) {
 8013fbc:	2b01      	cmp	r3, #1
 8013fbe:	d9ba      	bls.n	8013f36 <nd6_tmr+0x2c6>
          } else if (!ip6_addr_life_isinfinite(life)) {
 8013fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fc4:	d004      	beq.n	8013fd0 <nd6_tmr+0x360>
            life -= ND6_TMR_INTERVAL / 1000;
 8013fc6:	3b01      	subs	r3, #1
            netif_ip6_addr_set_pref_life(netif, i, life);
 8013fc8:	f105 0222 	add.w	r2, r5, #34	; 0x22
 8013fcc:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
      addr_state = netif_ip6_addr_state(netif, i);
 8013fd0:	197b      	adds	r3, r7, r5
 8013fd2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
      if (ip6_addr_istentative(addr_state)) {
 8013fd6:	f013 0f08 	tst.w	r3, #8
 8013fda:	d0ce      	beq.n	8013f7a <nd6_tmr+0x30a>
        if ((addr_state & IP6_ADDR_TENTATIVE_COUNT_MASK) >= LWIP_IPV6_DUP_DETECT_ATTEMPTS) {
 8013fdc:	f013 0f07 	tst.w	r3, #7
 8013fe0:	d00e      	beq.n	8014000 <nd6_tmr+0x390>
          if (!netif_ip6_addr_isstatic(netif, i) &&
 8013fe2:	f105 031e 	add.w	r3, r5, #30
 8013fe6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8013fea:	685b      	ldr	r3, [r3, #4]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d0bf      	beq.n	8013f70 <nd6_tmr+0x300>
              netif_ip6_addr_pref_life(netif, i) == 0) {
 8013ff0:	3522      	adds	r5, #34	; 0x22
 8013ff2:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 8013ff6:	b10b      	cbz	r3, 8013ffc <nd6_tmr+0x38c>
          addr_state = IP6_ADDR_PREFERRED;
 8013ff8:	2230      	movs	r2, #48	; 0x30
 8013ffa:	e7ba      	b.n	8013f72 <nd6_tmr+0x302>
            addr_state = IP6_ADDR_DEPRECATED;
 8013ffc:	2210      	movs	r2, #16
 8013ffe:	e7b8      	b.n	8013f72 <nd6_tmr+0x302>
        } else if (netif_is_up(netif) && netif_is_link_up(netif)) {
 8014000:	f897 20c3 	ldrb.w	r2, [r7, #195]	; 0xc3
 8014004:	f012 0f01 	tst.w	r2, #1
 8014008:	d0b7      	beq.n	8013f7a <nd6_tmr+0x30a>
 801400a:	f012 0f04 	tst.w	r2, #4
 801400e:	d0b4      	beq.n	8013f7a <nd6_tmr+0x30a>
          netif_ip6_addr_set_state(netif, i, addr_state + 1);
 8014010:	3301      	adds	r3, #1
 8014012:	b2da      	uxtb	r2, r3
 8014014:	4621      	mov	r1, r4
 8014016:	4638      	mov	r0, r7
 8014018:	f7f4 f966 	bl	80082e8 <netif_ip6_addr_set_state>
          nd6_send_ns(netif, netif_ip6_addr(netif, i),
 801401c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8014020:	00ab      	lsls	r3, r5, #2
 8014022:	3338      	adds	r3, #56	; 0x38
 8014024:	18f9      	adds	r1, r7, r3
 8014026:	2205      	movs	r2, #5
 8014028:	3104      	adds	r1, #4
 801402a:	4638      	mov	r0, r7
 801402c:	f7fe fef4 	bl	8012e18 <nd6_send_ns>
 8014030:	e7a3      	b.n	8013f7a <nd6_tmr+0x30a>
  if (!nd6_tmr_rs_reduction) {
 8014032:	4b14      	ldr	r3, [pc, #80]	; (8014084 <nd6_tmr+0x414>)
 8014034:	781b      	ldrb	r3, [r3, #0]
 8014036:	b9fb      	cbnz	r3, 8014078 <nd6_tmr+0x408>
    nd6_tmr_rs_reduction = (ND6_RTR_SOLICITATION_INTERVAL / ND6_TMR_INTERVAL) - 1;
 8014038:	4b12      	ldr	r3, [pc, #72]	; (8014084 <nd6_tmr+0x414>)
 801403a:	2203      	movs	r2, #3
 801403c:	701a      	strb	r2, [r3, #0]
    NETIF_FOREACH(netif) {
 801403e:	4b12      	ldr	r3, [pc, #72]	; (8014088 <nd6_tmr+0x418>)
 8014040:	681c      	ldr	r4, [r3, #0]
 8014042:	b1e4      	cbz	r4, 801407e <nd6_tmr+0x40e>
      if ((netif->rs_count > 0) && netif_is_up(netif) &&
 8014044:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
 8014048:	b1cb      	cbz	r3, 801407e <nd6_tmr+0x40e>
 801404a:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 801404e:	f013 0f01 	tst.w	r3, #1
 8014052:	d014      	beq.n	801407e <nd6_tmr+0x40e>
 8014054:	f013 0f04 	tst.w	r3, #4
 8014058:	d011      	beq.n	801407e <nd6_tmr+0x40e>
          !ip6_addr_isinvalid(netif_ip6_addr_state(netif, 0)) &&
 801405a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
          netif_is_link_up(netif) &&
 801405e:	b173      	cbz	r3, 801407e <nd6_tmr+0x40e>
          !ip6_addr_isinvalid(netif_ip6_addr_state(netif, 0)) &&
 8014060:	2b40      	cmp	r3, #64	; 0x40
 8014062:	d00c      	beq.n	801407e <nd6_tmr+0x40e>
        if (nd6_send_rs(netif) == ERR_OK) {
 8014064:	4620      	mov	r0, r4
 8014066:	f7fe fe73 	bl	8012d50 <nd6_send_rs>
 801406a:	b940      	cbnz	r0, 801407e <nd6_tmr+0x40e>
          netif->rs_count--;
 801406c:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
 8014070:	3b01      	subs	r3, #1
 8014072:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
 8014076:	e002      	b.n	801407e <nd6_tmr+0x40e>
    nd6_tmr_rs_reduction--;
 8014078:	3b01      	subs	r3, #1
 801407a:	4a02      	ldr	r2, [pc, #8]	; (8014084 <nd6_tmr+0x414>)
 801407c:	7013      	strb	r3, [r2, #0]
}
 801407e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014082:	bf00      	nop
 8014084:	200018d0 	.word	0x200018d0
 8014088:	20008c38 	.word	0x20008c38

0801408c <nd6_clear_destination_cache>:
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 801408c:	2300      	movs	r3, #0
 801408e:	2b09      	cmp	r3, #9
 8014090:	dc10      	bgt.n	80140b4 <nd6_clear_destination_cache+0x28>
{
 8014092:	b410      	push	{r4}
    ip6_addr_set_any(&destination_cache[i].destination_addr);
 8014094:	4c08      	ldr	r4, [pc, #32]	; (80140b8 <nd6_clear_destination_cache+0x2c>)
 8014096:	009a      	lsls	r2, r3, #2
 8014098:	441a      	add	r2, r3
 801409a:	00d0      	lsls	r0, r2, #3
 801409c:	1821      	adds	r1, r4, r0
 801409e:	2200      	movs	r2, #0
 80140a0:	5022      	str	r2, [r4, r0]
 80140a2:	604a      	str	r2, [r1, #4]
 80140a4:	608a      	str	r2, [r1, #8]
 80140a6:	60ca      	str	r2, [r1, #12]
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 80140a8:	3301      	adds	r3, #1
 80140aa:	2b09      	cmp	r3, #9
 80140ac:	ddf2      	ble.n	8014094 <nd6_clear_destination_cache+0x8>
}
 80140ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140b2:	4770      	bx	lr
 80140b4:	4770      	bx	lr
 80140b6:	bf00      	nop
 80140b8:	20008e9c 	.word	0x20008e9c

080140bc <nd6_get_next_hop_addr_or_queue>:
 * - ERR_OK on success, ERR_RTE if no route was found for the packet,
 * or ERR_MEM if low memory conditions prohibit sending the packet at all.
 */
err_t
nd6_get_next_hop_addr_or_queue(struct netif *netif, struct pbuf *q, const ip6_addr_t *ip6addr, const u8_t **hwaddrp)
{
 80140bc:	b570      	push	{r4, r5, r6, lr}
 80140be:	460d      	mov	r5, r1
 80140c0:	461c      	mov	r4, r3
  s8_t i;

  /* Get next hop record. */
  i = nd6_get_next_hop_entry(ip6addr, netif);
 80140c2:	4601      	mov	r1, r0
 80140c4:	4610      	mov	r0, r2
 80140c6:	f7fe ffb3 	bl	8013030 <nd6_get_next_hop_entry>
  if (i < 0) {
 80140ca:	2800      	cmp	r0, #0
 80140cc:	db30      	blt.n	8014130 <nd6_get_next_hop_addr_or_queue+0x74>
    /* failed to get a next hop neighbor record. */
    return i;
  }

  /* Now that we have a destination record, send or queue the packet. */
  if (neighbor_cache[i].state == ND6_STALE) {
 80140ce:	4603      	mov	r3, r0
 80140d0:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80140d4:	00d1      	lsls	r1, r2, #3
 80140d6:	4a17      	ldr	r2, [pc, #92]	; (8014134 <nd6_get_next_hop_addr_or_queue+0x78>)
 80140d8:	440a      	add	r2, r1
 80140da:	f892 2020 	ldrb.w	r2, [r2, #32]
 80140de:	2a03      	cmp	r2, #3
 80140e0:	d012      	beq.n	8014108 <nd6_get_next_hop_addr_or_queue+0x4c>
    /* Switch to delay state. */
    neighbor_cache[i].state = ND6_DELAY;
    neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
  }
  /* @todo should we send or queue if PROBE? send for now, to let unicast NS pass. */
  if ((neighbor_cache[i].state == ND6_REACHABLE) ||
 80140e2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80140e6:	00d1      	lsls	r1, r2, #3
 80140e8:	4a12      	ldr	r2, [pc, #72]	; (8014134 <nd6_get_next_hop_addr_or_queue+0x78>)
 80140ea:	440a      	add	r2, r1
 80140ec:	f892 2020 	ldrb.w	r2, [r2, #32]
 80140f0:	2a02      	cmp	r2, #2
 80140f2:	d014      	beq.n	801411e <nd6_get_next_hop_addr_or_queue+0x62>
 80140f4:	2a04      	cmp	r2, #4
 80140f6:	d012      	beq.n	801411e <nd6_get_next_hop_addr_or_queue+0x62>
      (neighbor_cache[i].state == ND6_DELAY) ||
 80140f8:	2a05      	cmp	r2, #5
 80140fa:	d010      	beq.n	801411e <nd6_get_next_hop_addr_or_queue+0x62>
    *hwaddrp = neighbor_cache[i].lladdr;
    return ERR_OK;
  }

  /* We should queue packet on this interface. */
  *hwaddrp = NULL;
 80140fc:	2300      	movs	r3, #0
 80140fe:	6023      	str	r3, [r4, #0]
  return nd6_queue_packet(i, q);
 8014100:	4629      	mov	r1, r5
 8014102:	f7ff f903 	bl	801330c <nd6_queue_packet>
 8014106:	e013      	b.n	8014130 <nd6_get_next_hop_addr_or_queue+0x74>
    neighbor_cache[i].state = ND6_DELAY;
 8014108:	0081      	lsls	r1, r0, #2
 801410a:	4401      	add	r1, r0
 801410c:	00ce      	lsls	r6, r1, #3
 801410e:	4a09      	ldr	r2, [pc, #36]	; (8014134 <nd6_get_next_hop_addr_or_queue+0x78>)
 8014110:	4432      	add	r2, r6
 8014112:	2104      	movs	r1, #4
 8014114:	f882 1020 	strb.w	r1, [r2, #32]
    neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 8014118:	2105      	movs	r1, #5
 801411a:	6251      	str	r1, [r2, #36]	; 0x24
 801411c:	e7e1      	b.n	80140e2 <nd6_get_next_hop_addr_or_queue+0x26>
    *hwaddrp = neighbor_cache[i].lladdr;
 801411e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014122:	00da      	lsls	r2, r3, #3
 8014124:	3210      	adds	r2, #16
 8014126:	4b03      	ldr	r3, [pc, #12]	; (8014134 <nd6_get_next_hop_addr_or_queue+0x78>)
 8014128:	441a      	add	r2, r3
 801412a:	3204      	adds	r2, #4
 801412c:	6022      	str	r2, [r4, #0]
    return ERR_OK;
 801412e:	2000      	movs	r0, #0
}
 8014130:	bd70      	pop	{r4, r5, r6, pc}
 8014132:	bf00      	nop
 8014134:	20008c94 	.word	0x20008c94

08014138 <nd6_get_destination_mtu>:
 * @param netif the netif on which the packet will be sent
 * @return the Path MTU, if known, or the netif default MTU
 */
u16_t
nd6_get_destination_mtu(const ip6_addr_t *ip6addr, struct netif *netif)
{
 8014138:	b510      	push	{r4, lr}
 801413a:	460c      	mov	r4, r1
  s16_t i;

  i = nd6_find_destination_cache_entry(ip6addr);
 801413c:	f7fe f934 	bl	80123a8 <nd6_find_destination_cache_entry>
  if (i >= 0) {
 8014140:	2800      	cmp	r0, #0
 8014142:	db06      	blt.n	8014152 <nd6_get_destination_mtu+0x1a>
    if (destination_cache[i].pmtu > 0) {
 8014144:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8014148:	00c2      	lsls	r2, r0, #3
 801414a:	4b05      	ldr	r3, [pc, #20]	; (8014160 <nd6_get_destination_mtu+0x28>)
 801414c:	4413      	add	r3, r2
 801414e:	8c18      	ldrh	r0, [r3, #32]
 8014150:	b910      	cbnz	r0, 8014158 <nd6_get_destination_mtu+0x20>
      return destination_cache[i].pmtu;
    }
  }

  if (netif != NULL) {
 8014152:	b114      	cbz	r4, 801415a <nd6_get_destination_mtu+0x22>
    return netif_mtu6(netif);
 8014154:	f8b4 00ba 	ldrh.w	r0, [r4, #186]	; 0xba
  }

  return 1280; /* Minimum MTU */
}
 8014158:	bd10      	pop	{r4, pc}
  return 1280; /* Minimum MTU */
 801415a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801415e:	e7fb      	b.n	8014158 <nd6_get_destination_mtu+0x20>
 8014160:	20008e9c 	.word	0x20008e9c

08014164 <nd6_reachability_hint>:
 * @param ip6addr the destination address which is know to be reachable
 *                by an upper layer protocol (TCP)
 */
void
nd6_reachability_hint(const ip6_addr_t *ip6addr)
{
 8014164:	b538      	push	{r3, r4, r5, lr}
  s8_t i;
  s16_t dst_idx;

  /* Find destination in cache. */
  if (ip6_addr_cmp(ip6addr, &(destination_cache[nd6_cached_destination_index].destination_addr))) {
 8014166:	6804      	ldr	r4, [r0, #0]
 8014168:	4b3f      	ldr	r3, [pc, #252]	; (8014268 <nd6_reachability_hint+0x104>)
 801416a:	781b      	ldrb	r3, [r3, #0]
 801416c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8014170:	00ca      	lsls	r2, r1, #3
 8014172:	493e      	ldr	r1, [pc, #248]	; (801426c <nd6_reachability_hint+0x108>)
 8014174:	588a      	ldr	r2, [r1, r2]
 8014176:	4294      	cmp	r4, r2
 8014178:	d032      	beq.n	80141e0 <nd6_reachability_hint+0x7c>
    dst_idx = nd6_cached_destination_index;
    ND6_STATS_INC(nd6.cachehit);
  } else {
    dst_idx = nd6_find_destination_cache_entry(ip6addr);
 801417a:	f7fe f915 	bl	80123a8 <nd6_find_destination_cache_entry>
  }
  if (dst_idx < 0) {
 801417e:	2800      	cmp	r0, #0
 8014180:	db2d      	blt.n	80141de <nd6_reachability_hint+0x7a>
    return;
  }

  /* Find next hop neighbor in cache. */
  if (ip6_addr_cmp(&(destination_cache[dst_idx].next_hop_addr), &(neighbor_cache[nd6_cached_neighbor_index].next_hop_address))) {
 8014182:	4602      	mov	r2, r0
 8014184:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8014188:	00d9      	lsls	r1, r3, #3
 801418a:	4b38      	ldr	r3, [pc, #224]	; (801426c <nd6_reachability_hint+0x108>)
 801418c:	440b      	add	r3, r1
 801418e:	691d      	ldr	r5, [r3, #16]
 8014190:	4b37      	ldr	r3, [pc, #220]	; (8014270 <nd6_reachability_hint+0x10c>)
 8014192:	781b      	ldrb	r3, [r3, #0]
 8014194:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8014198:	00e1      	lsls	r1, r4, #3
 801419a:	4c36      	ldr	r4, [pc, #216]	; (8014274 <nd6_reachability_hint+0x110>)
 801419c:	5861      	ldr	r1, [r4, r1]
 801419e:	428d      	cmp	r5, r1
 80141a0:	d035      	beq.n	801420e <nd6_reachability_hint+0xaa>
    i = nd6_cached_neighbor_index;
    ND6_STATS_INC(nd6.cachehit);
  } else {
    i = nd6_find_neighbor_cache_entry(&(destination_cache[dst_idx].next_hop_addr));
 80141a2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80141a6:	00d0      	lsls	r0, r2, #3
 80141a8:	3010      	adds	r0, #16
 80141aa:	4b30      	ldr	r3, [pc, #192]	; (801426c <nd6_reachability_hint+0x108>)
 80141ac:	4418      	add	r0, r3
 80141ae:	f7fe f8c9 	bl	8012344 <nd6_find_neighbor_cache_entry>
  }
  if (i < 0) {
 80141b2:	2800      	cmp	r0, #0
 80141b4:	db13      	blt.n	80141de <nd6_reachability_hint+0x7a>
    return;
  }

  /* For safety: don't set as reachable if we don't have a LL address yet. Misuse protection. */
  if (neighbor_cache[i].state == ND6_INCOMPLETE || neighbor_cache[i].state == ND6_NO_ENTRY) {
 80141b6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80141ba:	00da      	lsls	r2, r3, #3
 80141bc:	4b2d      	ldr	r3, [pc, #180]	; (8014274 <nd6_reachability_hint+0x110>)
 80141be:	4413      	add	r3, r2
 80141c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80141c4:	2b01      	cmp	r3, #1
 80141c6:	d90a      	bls.n	80141de <nd6_reachability_hint+0x7a>
    return;
  }

  /* Set reachability state. */
  neighbor_cache[i].state = ND6_REACHABLE;
 80141c8:	4a2a      	ldr	r2, [pc, #168]	; (8014274 <nd6_reachability_hint+0x110>)
 80141ca:	0083      	lsls	r3, r0, #2
 80141cc:	181c      	adds	r4, r3, r0
 80141ce:	00e1      	lsls	r1, r4, #3
 80141d0:	4411      	add	r1, r2
 80141d2:	2402      	movs	r4, #2
 80141d4:	f881 4020 	strb.w	r4, [r1, #32]
  neighbor_cache[i].counter.reachable_time = reachable_time;
 80141d8:	4b27      	ldr	r3, [pc, #156]	; (8014278 <nd6_reachability_hint+0x114>)
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	624b      	str	r3, [r1, #36]	; 0x24
}
 80141de:	bd38      	pop	{r3, r4, r5, pc}
  if (ip6_addr_cmp(ip6addr, &(destination_cache[nd6_cached_destination_index].destination_addr))) {
 80141e0:	6844      	ldr	r4, [r0, #4]
 80141e2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80141e6:	00d1      	lsls	r1, r2, #3
 80141e8:	4a20      	ldr	r2, [pc, #128]	; (801426c <nd6_reachability_hint+0x108>)
 80141ea:	440a      	add	r2, r1
 80141ec:	6852      	ldr	r2, [r2, #4]
 80141ee:	4294      	cmp	r4, r2
 80141f0:	d1c3      	bne.n	801417a <nd6_reachability_hint+0x16>
 80141f2:	6884      	ldr	r4, [r0, #8]
 80141f4:	4a1d      	ldr	r2, [pc, #116]	; (801426c <nd6_reachability_hint+0x108>)
 80141f6:	440a      	add	r2, r1
 80141f8:	6892      	ldr	r2, [r2, #8]
 80141fa:	4294      	cmp	r4, r2
 80141fc:	d1bd      	bne.n	801417a <nd6_reachability_hint+0x16>
 80141fe:	68c4      	ldr	r4, [r0, #12]
 8014200:	4a1a      	ldr	r2, [pc, #104]	; (801426c <nd6_reachability_hint+0x108>)
 8014202:	440a      	add	r2, r1
 8014204:	68d2      	ldr	r2, [r2, #12]
 8014206:	4294      	cmp	r4, r2
 8014208:	d1b7      	bne.n	801417a <nd6_reachability_hint+0x16>
    dst_idx = nd6_cached_destination_index;
 801420a:	b218      	sxth	r0, r3
 801420c:	e7b7      	b.n	801417e <nd6_reachability_hint+0x1a>
  if (ip6_addr_cmp(&(destination_cache[dst_idx].next_hop_addr), &(neighbor_cache[nd6_cached_neighbor_index].next_hop_address))) {
 801420e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8014212:	00c4      	lsls	r4, r0, #3
 8014214:	4915      	ldr	r1, [pc, #84]	; (801426c <nd6_reachability_hint+0x108>)
 8014216:	4421      	add	r1, r4
 8014218:	694c      	ldr	r4, [r1, #20]
 801421a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801421e:	00c8      	lsls	r0, r1, #3
 8014220:	4914      	ldr	r1, [pc, #80]	; (8014274 <nd6_reachability_hint+0x110>)
 8014222:	4401      	add	r1, r0
 8014224:	6849      	ldr	r1, [r1, #4]
 8014226:	428c      	cmp	r4, r1
 8014228:	d1bb      	bne.n	80141a2 <nd6_reachability_hint+0x3e>
 801422a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 801422e:	00c8      	lsls	r0, r1, #3
 8014230:	490e      	ldr	r1, [pc, #56]	; (801426c <nd6_reachability_hint+0x108>)
 8014232:	4401      	add	r1, r0
 8014234:	698c      	ldr	r4, [r1, #24]
 8014236:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801423a:	00c8      	lsls	r0, r1, #3
 801423c:	490d      	ldr	r1, [pc, #52]	; (8014274 <nd6_reachability_hint+0x110>)
 801423e:	4401      	add	r1, r0
 8014240:	6889      	ldr	r1, [r1, #8]
 8014242:	428c      	cmp	r4, r1
 8014244:	d1ad      	bne.n	80141a2 <nd6_reachability_hint+0x3e>
 8014246:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 801424a:	00c8      	lsls	r0, r1, #3
 801424c:	4907      	ldr	r1, [pc, #28]	; (801426c <nd6_reachability_hint+0x108>)
 801424e:	4401      	add	r1, r0
 8014250:	69cc      	ldr	r4, [r1, #28]
 8014252:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8014256:	00c8      	lsls	r0, r1, #3
 8014258:	4906      	ldr	r1, [pc, #24]	; (8014274 <nd6_reachability_hint+0x110>)
 801425a:	4401      	add	r1, r0
 801425c:	68c9      	ldr	r1, [r1, #12]
 801425e:	428c      	cmp	r4, r1
 8014260:	d19f      	bne.n	80141a2 <nd6_reachability_hint+0x3e>
    i = nd6_cached_neighbor_index;
 8014262:	b258      	sxtb	r0, r3
 8014264:	e7a5      	b.n	80141b2 <nd6_reachability_hint+0x4e>
 8014266:	bf00      	nop
 8014268:	200018ac 	.word	0x200018ac
 801426c:	20008e9c 	.word	0x20008e9c
 8014270:	200018ad 	.word	0x200018ad
 8014274:	20008c94 	.word	0x20008c94
 8014278:	20000018 	.word	0x20000018

0801427c <nd6_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
nd6_cleanup_netif(struct netif *netif)
{
 801427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801427e:	4605      	mov	r5, r0
  u8_t i;
  s8_t router_index;
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
 8014280:	2300      	movs	r3, #0
 8014282:	e001      	b.n	8014288 <nd6_cleanup_netif+0xc>
 8014284:	3301      	adds	r3, #1
 8014286:	b2db      	uxtb	r3, r3
 8014288:	2b04      	cmp	r3, #4
 801428a:	d80c      	bhi.n	80142a6 <nd6_cleanup_netif+0x2a>
    if (prefix_list[i].netif == netif) {
 801428c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8014290:	00d1      	lsls	r1, r2, #3
 8014292:	4a21      	ldr	r2, [pc, #132]	; (8014318 <nd6_cleanup_netif+0x9c>)
 8014294:	440a      	add	r2, r1
 8014296:	6912      	ldr	r2, [r2, #16]
 8014298:	42aa      	cmp	r2, r5
 801429a:	d1f3      	bne.n	8014284 <nd6_cleanup_netif+0x8>
      prefix_list[i].netif = NULL;
 801429c:	4a1e      	ldr	r2, [pc, #120]	; (8014318 <nd6_cleanup_netif+0x9c>)
 801429e:	440a      	add	r2, r1
 80142a0:	2100      	movs	r1, #0
 80142a2:	6111      	str	r1, [r2, #16]
 80142a4:	e7ee      	b.n	8014284 <nd6_cleanup_netif+0x8>
    }
  }
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 80142a6:	2400      	movs	r4, #0
 80142a8:	e025      	b.n	80142f6 <nd6_cleanup_netif+0x7a>
    if (neighbor_cache[i].netif == netif) {
      for (router_index = 0; router_index < LWIP_ND6_NUM_ROUTERS; router_index++) {
 80142aa:	3301      	adds	r3, #1
 80142ac:	b25b      	sxtb	r3, r3
 80142ae:	2b02      	cmp	r3, #2
 80142b0:	dc14      	bgt.n	80142dc <nd6_cleanup_netif+0x60>
        if (default_router_list[router_index].neighbor_entry == &neighbor_cache[i]) {
 80142b2:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80142b6:	0082      	lsls	r2, r0, #2
 80142b8:	4818      	ldr	r0, [pc, #96]	; (801431c <nd6_cleanup_netif+0xa0>)
 80142ba:	5886      	ldr	r6, [r0, r2]
 80142bc:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 80142c0:	00c2      	lsls	r2, r0, #3
 80142c2:	4817      	ldr	r0, [pc, #92]	; (8014320 <nd6_cleanup_netif+0xa4>)
 80142c4:	4402      	add	r2, r0
 80142c6:	4296      	cmp	r6, r2
 80142c8:	d1ef      	bne.n	80142aa <nd6_cleanup_netif+0x2e>
          default_router_list[router_index].neighbor_entry = NULL;
 80142ca:	4814      	ldr	r0, [pc, #80]	; (801431c <nd6_cleanup_netif+0xa0>)
 80142cc:	005a      	lsls	r2, r3, #1
 80142ce:	18d6      	adds	r6, r2, r3
 80142d0:	00b7      	lsls	r7, r6, #2
 80142d2:	2600      	movs	r6, #0
 80142d4:	51c6      	str	r6, [r0, r7]
          default_router_list[router_index].flags = 0;
 80142d6:	4438      	add	r0, r7
 80142d8:	7206      	strb	r6, [r0, #8]
 80142da:	e7e6      	b.n	80142aa <nd6_cleanup_netif+0x2e>
        }
      }
      neighbor_cache[i].isrouter = 0;
 80142dc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80142e0:	00ca      	lsls	r2, r1, #3
 80142e2:	4b0f      	ldr	r3, [pc, #60]	; (8014320 <nd6_cleanup_netif+0xa4>)
 80142e4:	4413      	add	r3, r2
 80142e6:	2200      	movs	r2, #0
 80142e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      nd6_free_neighbor_cache_entry(i);
 80142ec:	b260      	sxtb	r0, r4
 80142ee:	f7fe fba7 	bl	8012a40 <nd6_free_neighbor_cache_entry>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 80142f2:	3401      	adds	r4, #1
 80142f4:	b2e4      	uxtb	r4, r4
 80142f6:	2c09      	cmp	r4, #9
 80142f8:	d80a      	bhi.n	8014310 <nd6_cleanup_netif+0x94>
    if (neighbor_cache[i].netif == netif) {
 80142fa:	4621      	mov	r1, r4
 80142fc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8014300:	00da      	lsls	r2, r3, #3
 8014302:	4b07      	ldr	r3, [pc, #28]	; (8014320 <nd6_cleanup_netif+0xa4>)
 8014304:	4413      	add	r3, r2
 8014306:	691b      	ldr	r3, [r3, #16]
 8014308:	42ab      	cmp	r3, r5
 801430a:	d1f2      	bne.n	80142f2 <nd6_cleanup_netif+0x76>
      for (router_index = 0; router_index < LWIP_ND6_NUM_ROUTERS; router_index++) {
 801430c:	2300      	movs	r3, #0
 801430e:	e7ce      	b.n	80142ae <nd6_cleanup_netif+0x32>
    }
  }
  /* Clear the destination cache, since many entries may now have become
   * invalid for one of several reasons. As destination cache entries have no
   * netif association, use a sledgehammer approach (this can be improved). */
  nd6_clear_destination_cache();
 8014310:	f7ff febc 	bl	801408c <nd6_clear_destination_cache>
}
 8014314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014316:	bf00      	nop
 8014318:	20008e24 	.word	0x20008e24
 801431c:	2000902c 	.word	0x2000902c
 8014320:	20008c94 	.word	0x20008c94

08014324 <nd6_adjust_mld_membership>:
 * @param addr_idx The index of the address.
 * @param new_state The new (IP6_ADDR_) state for the address.
 */
void
nd6_adjust_mld_membership(struct netif *netif, s8_t addr_idx, u8_t new_state)
{
 8014324:	b510      	push	{r4, lr}
  u8_t old_state, old_member, new_member;

  old_state = netif_ip6_addr_state(netif, addr_idx);
 8014326:	1843      	adds	r3, r0, r1
 8014328:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78

  /* Determine whether we were, and should be, a member of the solicited-node
   * multicast group for this address. For tentative addresses, the group is
   * not joined until the address enters the TENTATIVE_1 (or VALID) state. */
  old_member = (old_state != IP6_ADDR_INVALID && old_state != IP6_ADDR_DUPLICATED && old_state != IP6_ADDR_TENTATIVE);
 801432c:	b13b      	cbz	r3, 801433e <nd6_adjust_mld_membership+0x1a>
 801432e:	2b40      	cmp	r3, #64	; 0x40
 8014330:	d00e      	beq.n	8014350 <nd6_adjust_mld_membership+0x2c>
 8014332:	2b08      	cmp	r3, #8
 8014334:	d001      	beq.n	801433a <nd6_adjust_mld_membership+0x16>
 8014336:	2401      	movs	r4, #1
 8014338:	e002      	b.n	8014340 <nd6_adjust_mld_membership+0x1c>
 801433a:	2400      	movs	r4, #0
 801433c:	e000      	b.n	8014340 <nd6_adjust_mld_membership+0x1c>
 801433e:	2400      	movs	r4, #0
 8014340:	b2e4      	uxtb	r4, r4
  new_member = (new_state != IP6_ADDR_INVALID && new_state != IP6_ADDR_DUPLICATED && new_state != IP6_ADDR_TENTATIVE);
 8014342:	b14a      	cbz	r2, 8014358 <nd6_adjust_mld_membership+0x34>
 8014344:	2a40      	cmp	r2, #64	; 0x40
 8014346:	d021      	beq.n	801438c <nd6_adjust_mld_membership+0x68>
 8014348:	2a08      	cmp	r2, #8
 801434a:	d003      	beq.n	8014354 <nd6_adjust_mld_membership+0x30>
 801434c:	2301      	movs	r3, #1
 801434e:	e004      	b.n	801435a <nd6_adjust_mld_membership+0x36>
  old_member = (old_state != IP6_ADDR_INVALID && old_state != IP6_ADDR_DUPLICATED && old_state != IP6_ADDR_TENTATIVE);
 8014350:	2400      	movs	r4, #0
 8014352:	e7f5      	b.n	8014340 <nd6_adjust_mld_membership+0x1c>
  new_member = (new_state != IP6_ADDR_INVALID && new_state != IP6_ADDR_DUPLICATED && new_state != IP6_ADDR_TENTATIVE);
 8014354:	2300      	movs	r3, #0
 8014356:	e000      	b.n	801435a <nd6_adjust_mld_membership+0x36>
 8014358:	2300      	movs	r3, #0
 801435a:	b2db      	uxtb	r3, r3

  if (old_member != new_member) {
 801435c:	429c      	cmp	r4, r3
 801435e:	d014      	beq.n	801438a <nd6_adjust_mld_membership+0x66>
    ip6_addr_set_solicitednode(&multicast_address, netif_ip6_addr(netif, addr_idx)->addr[3]);
 8014360:	4a0d      	ldr	r2, [pc, #52]	; (8014398 <nd6_adjust_mld_membership+0x74>)
 8014362:	f240 24ff 	movw	r4, #767	; 0x2ff
 8014366:	6014      	str	r4, [r2, #0]
 8014368:	2400      	movs	r4, #0
 801436a:	6054      	str	r4, [r2, #4]
 801436c:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
 8014370:	6094      	str	r4, [r2, #8]
 8014372:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8014376:	008c      	lsls	r4, r1, #2
 8014378:	4404      	add	r4, r0
 801437a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801437c:	f041 01ff 	orr.w	r1, r1, #255	; 0xff
 8014380:	60d1      	str	r1, [r2, #12]
    ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);

    if (new_member) {
 8014382:	b92b      	cbnz	r3, 8014390 <nd6_adjust_mld_membership+0x6c>
      mld6_joingroup_netif(netif, &multicast_address);
    } else {
      mld6_leavegroup_netif(netif, &multicast_address);
 8014384:	4904      	ldr	r1, [pc, #16]	; (8014398 <nd6_adjust_mld_membership+0x74>)
 8014386:	f7fd ff92 	bl	80122ae <mld6_leavegroup_netif>
    }
  }
}
 801438a:	bd10      	pop	{r4, pc}
  new_member = (new_state != IP6_ADDR_INVALID && new_state != IP6_ADDR_DUPLICATED && new_state != IP6_ADDR_TENTATIVE);
 801438c:	2300      	movs	r3, #0
 801438e:	e7e4      	b.n	801435a <nd6_adjust_mld_membership+0x36>
      mld6_joingroup_netif(netif, &multicast_address);
 8014390:	4611      	mov	r1, r2
 8014392:	f7fd ff65 	bl	8012260 <mld6_joingroup_netif>
 8014396:	e7f8      	b.n	801438a <nd6_adjust_mld_membership+0x66>
 8014398:	2000189c 	.word	0x2000189c

0801439c <nd6_restart_netif>:
void
nd6_restart_netif(struct netif *netif)
{
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  /* Send Router Solicitation messages (see RFC 4861, ch. 6.3.7). */
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 801439c:	2303      	movs	r3, #3
 801439e:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
}
 80143a2:	4770      	bx	lr

080143a4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80143a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143a6:	4604      	mov	r4, r0
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80143a8:	8946      	ldrh	r6, [r0, #10]
 80143aa:	2e0e      	cmp	r6, #14
 80143ac:	d922      	bls.n	80143f4 <ethernet_input+0x50>
 80143ae:	460f      	mov	r7, r1
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80143b0:	7bc3      	ldrb	r3, [r0, #15]
 80143b2:	b91b      	cbnz	r3, 80143bc <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 80143b4:	f891 30c6 	ldrb.w	r3, [r1, #198]	; 0xc6
 80143b8:	3301      	adds	r3, #1
 80143ba:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80143bc:	6860      	ldr	r0, [r4, #4]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80143be:	8985      	ldrh	r5, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80143c0:	7803      	ldrb	r3, [r0, #0]
 80143c2:	f013 0f01 	tst.w	r3, #1
 80143c6:	d00c      	beq.n	80143e2 <ethernet_input+0x3e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80143c8:	2b01      	cmp	r3, #1
 80143ca:	d018      	beq.n	80143fe <ethernet_input+0x5a>
        p->flags |= PBUF_FLAG_LLMCAST;
      }
#endif /* LWIP_IPV4 */
    }
#if LWIP_IPV6
    else if ((ethhdr->dest.addr[0] == LL_IP6_MULTICAST_ADDR_0) &&
 80143cc:	2b33      	cmp	r3, #51	; 0x33
 80143ce:	d021      	beq.n	8014414 <ethernet_input+0x70>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80143d0:	2206      	movs	r2, #6
 80143d2:	492b      	ldr	r1, [pc, #172]	; (8014480 <ethernet_input+0xdc>)
 80143d4:	f000 f8d2 	bl	801457c <memcmp>
 80143d8:	b918      	cbnz	r0, 80143e2 <ethernet_input+0x3e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80143da:	7b63      	ldrb	r3, [r4, #13]
 80143dc:	f043 0308 	orr.w	r3, r3, #8
 80143e0:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 80143e2:	f5b5 6fc1 	cmp.w	r5, #1544	; 0x608
 80143e6:	d02d      	beq.n	8014444 <ethernet_input+0xa0>
 80143e8:	f64d 5386 	movw	r3, #56710	; 0xdd86
 80143ec:	429d      	cmp	r5, r3
 80143ee:	d039      	beq.n	8014464 <ethernet_input+0xc0>
 80143f0:	2d08      	cmp	r5, #8
 80143f2:	d017      	beq.n	8014424 <ethernet_input+0x80>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 80143f4:	4620      	mov	r0, r4
 80143f6:	f7f4 f997 	bl	8008728 <pbuf_free>
  return ERR_OK;
}
 80143fa:	2000      	movs	r0, #0
 80143fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80143fe:	7843      	ldrb	r3, [r0, #1]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d1ee      	bne.n	80143e2 <ethernet_input+0x3e>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014404:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014406:	2b5e      	cmp	r3, #94	; 0x5e
 8014408:	d1eb      	bne.n	80143e2 <ethernet_input+0x3e>
        p->flags |= PBUF_FLAG_LLMCAST;
 801440a:	7b63      	ldrb	r3, [r4, #13]
 801440c:	f043 0310 	orr.w	r3, r3, #16
 8014410:	7363      	strb	r3, [r4, #13]
 8014412:	e7e6      	b.n	80143e2 <ethernet_input+0x3e>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
 8014414:	7843      	ldrb	r3, [r0, #1]
    else if ((ethhdr->dest.addr[0] == LL_IP6_MULTICAST_ADDR_0) &&
 8014416:	2b33      	cmp	r3, #51	; 0x33
 8014418:	d1da      	bne.n	80143d0 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLMCAST;
 801441a:	7b63      	ldrb	r3, [r4, #13]
 801441c:	f043 0310 	orr.w	r3, r3, #16
 8014420:	7363      	strb	r3, [r4, #13]
 8014422:	e7de      	b.n	80143e2 <ethernet_input+0x3e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014424:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8014428:	f013 0f08 	tst.w	r3, #8
 801442c:	d0e2      	beq.n	80143f4 <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801442e:	210e      	movs	r1, #14
 8014430:	4620      	mov	r0, r4
 8014432:	f7f4 f933 	bl	800869c <pbuf_remove_header>
 8014436:	2800      	cmp	r0, #0
 8014438:	d1dc      	bne.n	80143f4 <ethernet_input+0x50>
        ip4_input(p, netif);
 801443a:	4639      	mov	r1, r7
 801443c:	4620      	mov	r0, r4
 801443e:	f7fb fdff 	bl	8010040 <ip4_input>
      break;
 8014442:	e7da      	b.n	80143fa <ethernet_input+0x56>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014444:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8014448:	f013 0f08 	tst.w	r3, #8
 801444c:	d0d2      	beq.n	80143f4 <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801444e:	210e      	movs	r1, #14
 8014450:	4620      	mov	r0, r4
 8014452:	f7f4 f923 	bl	800869c <pbuf_remove_header>
 8014456:	2800      	cmp	r0, #0
 8014458:	d1cc      	bne.n	80143f4 <ethernet_input+0x50>
        etharp_input(p, netif);
 801445a:	4639      	mov	r1, r7
 801445c:	4620      	mov	r0, r4
 801445e:	f7fb f85f 	bl	800f520 <etharp_input>
      break;
 8014462:	e7ca      	b.n	80143fa <ethernet_input+0x56>
      if ((p->len < next_hdr_offset) || pbuf_remove_header(p, next_hdr_offset)) {
 8014464:	2e0d      	cmp	r6, #13
 8014466:	d9c5      	bls.n	80143f4 <ethernet_input+0x50>
 8014468:	210e      	movs	r1, #14
 801446a:	4620      	mov	r0, r4
 801446c:	f7f4 f916 	bl	800869c <pbuf_remove_header>
 8014470:	2800      	cmp	r0, #0
 8014472:	d1bf      	bne.n	80143f4 <ethernet_input+0x50>
        ip6_input(p, netif);
 8014474:	4639      	mov	r1, r7
 8014476:	4620      	mov	r0, r4
 8014478:	f7fc fea2 	bl	80111c0 <ip6_input>
      break;
 801447c:	e7bd      	b.n	80143fa <ethernet_input+0x56>
 801447e:	bf00      	nop
 8014480:	0801874c 	.word	0x0801874c

08014484 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014488:	4605      	mov	r5, r0
 801448a:	460c      	mov	r4, r1
 801448c:	4616      	mov	r6, r2
 801448e:	461f      	mov	r7, r3
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014490:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8014494:	f7f2 feaa 	bl	80071ec <lwip_htons>
 8014498:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801449a:	210e      	movs	r1, #14
 801449c:	4620      	mov	r0, r4
 801449e:	f7f4 f8f2 	bl	8008686 <pbuf_add_header>
 80144a2:	b9f0      	cbnz	r0, 80144e2 <ethernet_output+0x5e>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80144a4:	6863      	ldr	r3, [r4, #4]
  ethhdr->type = eth_type_be;
 80144a6:	f8a3 800c 	strh.w	r8, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80144aa:	683a      	ldr	r2, [r7, #0]
 80144ac:	601a      	str	r2, [r3, #0]
 80144ae:	88ba      	ldrh	r2, [r7, #4]
 80144b0:	809a      	strh	r2, [r3, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80144b2:	6832      	ldr	r2, [r6, #0]
 80144b4:	f8c3 2006 	str.w	r2, [r3, #6]
 80144b8:	88b2      	ldrh	r2, [r6, #4]
 80144ba:	815a      	strh	r2, [r3, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80144bc:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
 80144c0:	2b06      	cmp	r3, #6
 80144c2:	d106      	bne.n	80144d2 <ethernet_output+0x4e>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80144c4:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 80144c8:	4621      	mov	r1, r4
 80144ca:	4628      	mov	r0, r5
 80144cc:	4798      	blx	r3
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 80144ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80144d2:	4b05      	ldr	r3, [pc, #20]	; (80144e8 <ethernet_output+0x64>)
 80144d4:	f240 1233 	movw	r2, #307	; 0x133
 80144d8:	4904      	ldr	r1, [pc, #16]	; (80144ec <ethernet_output+0x68>)
 80144da:	4805      	ldr	r0, [pc, #20]	; (80144f0 <ethernet_output+0x6c>)
 80144dc:	f000 f88a 	bl	80145f4 <iprintf>
 80144e0:	e7f0      	b.n	80144c4 <ethernet_output+0x40>
  return ERR_BUF;
 80144e2:	f06f 0001 	mvn.w	r0, #1
 80144e6:	e7f2      	b.n	80144ce <ethernet_output+0x4a>
 80144e8:	08018754 	.word	0x08018754
 80144ec:	0801878c 	.word	0x0801878c
 80144f0:	08015608 	.word	0x08015608

080144f4 <__libc_init_array>:
 80144f4:	b570      	push	{r4, r5, r6, lr}
 80144f6:	4e0d      	ldr	r6, [pc, #52]	; (801452c <__libc_init_array+0x38>)
 80144f8:	4c0d      	ldr	r4, [pc, #52]	; (8014530 <__libc_init_array+0x3c>)
 80144fa:	1ba4      	subs	r4, r4, r6
 80144fc:	10a4      	asrs	r4, r4, #2
 80144fe:	2500      	movs	r5, #0
 8014500:	42a5      	cmp	r5, r4
 8014502:	d109      	bne.n	8014518 <__libc_init_array+0x24>
 8014504:	4e0b      	ldr	r6, [pc, #44]	; (8014534 <__libc_init_array+0x40>)
 8014506:	4c0c      	ldr	r4, [pc, #48]	; (8014538 <__libc_init_array+0x44>)
 8014508:	f001 f806 	bl	8015518 <_init>
 801450c:	1ba4      	subs	r4, r4, r6
 801450e:	10a4      	asrs	r4, r4, #2
 8014510:	2500      	movs	r5, #0
 8014512:	42a5      	cmp	r5, r4
 8014514:	d105      	bne.n	8014522 <__libc_init_array+0x2e>
 8014516:	bd70      	pop	{r4, r5, r6, pc}
 8014518:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801451c:	4798      	blx	r3
 801451e:	3501      	adds	r5, #1
 8014520:	e7ee      	b.n	8014500 <__libc_init_array+0xc>
 8014522:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014526:	4798      	blx	r3
 8014528:	3501      	adds	r5, #1
 801452a:	e7f2      	b.n	8014512 <__libc_init_array+0x1e>
 801452c:	08018974 	.word	0x08018974
 8014530:	08018974 	.word	0x08018974
 8014534:	08018974 	.word	0x08018974
 8014538:	08018978 	.word	0x08018978

0801453c <__locale_ctype_ptr>:
 801453c:	4b04      	ldr	r3, [pc, #16]	; (8014550 <__locale_ctype_ptr+0x14>)
 801453e:	4a05      	ldr	r2, [pc, #20]	; (8014554 <__locale_ctype_ptr+0x18>)
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	6a1b      	ldr	r3, [r3, #32]
 8014544:	2b00      	cmp	r3, #0
 8014546:	bf08      	it	eq
 8014548:	4613      	moveq	r3, r2
 801454a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801454e:	4770      	bx	lr
 8014550:	20000020 	.word	0x20000020
 8014554:	20000084 	.word	0x20000084

08014558 <__ascii_mbtowc>:
 8014558:	b082      	sub	sp, #8
 801455a:	b901      	cbnz	r1, 801455e <__ascii_mbtowc+0x6>
 801455c:	a901      	add	r1, sp, #4
 801455e:	b142      	cbz	r2, 8014572 <__ascii_mbtowc+0x1a>
 8014560:	b14b      	cbz	r3, 8014576 <__ascii_mbtowc+0x1e>
 8014562:	7813      	ldrb	r3, [r2, #0]
 8014564:	600b      	str	r3, [r1, #0]
 8014566:	7812      	ldrb	r2, [r2, #0]
 8014568:	1c10      	adds	r0, r2, #0
 801456a:	bf18      	it	ne
 801456c:	2001      	movne	r0, #1
 801456e:	b002      	add	sp, #8
 8014570:	4770      	bx	lr
 8014572:	4610      	mov	r0, r2
 8014574:	e7fb      	b.n	801456e <__ascii_mbtowc+0x16>
 8014576:	f06f 0001 	mvn.w	r0, #1
 801457a:	e7f8      	b.n	801456e <__ascii_mbtowc+0x16>

0801457c <memcmp>:
 801457c:	b530      	push	{r4, r5, lr}
 801457e:	2400      	movs	r4, #0
 8014580:	42a2      	cmp	r2, r4
 8014582:	d101      	bne.n	8014588 <memcmp+0xc>
 8014584:	2000      	movs	r0, #0
 8014586:	e007      	b.n	8014598 <memcmp+0x1c>
 8014588:	5d03      	ldrb	r3, [r0, r4]
 801458a:	3401      	adds	r4, #1
 801458c:	190d      	adds	r5, r1, r4
 801458e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8014592:	42ab      	cmp	r3, r5
 8014594:	d0f4      	beq.n	8014580 <memcmp+0x4>
 8014596:	1b58      	subs	r0, r3, r5
 8014598:	bd30      	pop	{r4, r5, pc}

0801459a <memcpy>:
 801459a:	b510      	push	{r4, lr}
 801459c:	1e43      	subs	r3, r0, #1
 801459e:	440a      	add	r2, r1
 80145a0:	4291      	cmp	r1, r2
 80145a2:	d100      	bne.n	80145a6 <memcpy+0xc>
 80145a4:	bd10      	pop	{r4, pc}
 80145a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80145aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80145ae:	e7f7      	b.n	80145a0 <memcpy+0x6>

080145b0 <memmove>:
 80145b0:	4288      	cmp	r0, r1
 80145b2:	b510      	push	{r4, lr}
 80145b4:	eb01 0302 	add.w	r3, r1, r2
 80145b8:	d807      	bhi.n	80145ca <memmove+0x1a>
 80145ba:	1e42      	subs	r2, r0, #1
 80145bc:	4299      	cmp	r1, r3
 80145be:	d00a      	beq.n	80145d6 <memmove+0x26>
 80145c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80145c4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80145c8:	e7f8      	b.n	80145bc <memmove+0xc>
 80145ca:	4283      	cmp	r3, r0
 80145cc:	d9f5      	bls.n	80145ba <memmove+0xa>
 80145ce:	1881      	adds	r1, r0, r2
 80145d0:	1ad2      	subs	r2, r2, r3
 80145d2:	42d3      	cmn	r3, r2
 80145d4:	d100      	bne.n	80145d8 <memmove+0x28>
 80145d6:	bd10      	pop	{r4, pc}
 80145d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80145dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80145e0:	e7f7      	b.n	80145d2 <memmove+0x22>

080145e2 <memset>:
 80145e2:	4402      	add	r2, r0
 80145e4:	4603      	mov	r3, r0
 80145e6:	4293      	cmp	r3, r2
 80145e8:	d100      	bne.n	80145ec <memset+0xa>
 80145ea:	4770      	bx	lr
 80145ec:	f803 1b01 	strb.w	r1, [r3], #1
 80145f0:	e7f9      	b.n	80145e6 <memset+0x4>
	...

080145f4 <iprintf>:
 80145f4:	b40f      	push	{r0, r1, r2, r3}
 80145f6:	4b0a      	ldr	r3, [pc, #40]	; (8014620 <iprintf+0x2c>)
 80145f8:	b513      	push	{r0, r1, r4, lr}
 80145fa:	681c      	ldr	r4, [r3, #0]
 80145fc:	b124      	cbz	r4, 8014608 <iprintf+0x14>
 80145fe:	69a3      	ldr	r3, [r4, #24]
 8014600:	b913      	cbnz	r3, 8014608 <iprintf+0x14>
 8014602:	4620      	mov	r0, r4
 8014604:	f000 fa64 	bl	8014ad0 <__sinit>
 8014608:	ab05      	add	r3, sp, #20
 801460a:	9a04      	ldr	r2, [sp, #16]
 801460c:	68a1      	ldr	r1, [r4, #8]
 801460e:	9301      	str	r3, [sp, #4]
 8014610:	4620      	mov	r0, r4
 8014612:	f000 fc25 	bl	8014e60 <_vfiprintf_r>
 8014616:	b002      	add	sp, #8
 8014618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801461c:	b004      	add	sp, #16
 801461e:	4770      	bx	lr
 8014620:	20000020 	.word	0x20000020

08014624 <_puts_r>:
 8014624:	b570      	push	{r4, r5, r6, lr}
 8014626:	460e      	mov	r6, r1
 8014628:	4605      	mov	r5, r0
 801462a:	b118      	cbz	r0, 8014634 <_puts_r+0x10>
 801462c:	6983      	ldr	r3, [r0, #24]
 801462e:	b90b      	cbnz	r3, 8014634 <_puts_r+0x10>
 8014630:	f000 fa4e 	bl	8014ad0 <__sinit>
 8014634:	69ab      	ldr	r3, [r5, #24]
 8014636:	68ac      	ldr	r4, [r5, #8]
 8014638:	b913      	cbnz	r3, 8014640 <_puts_r+0x1c>
 801463a:	4628      	mov	r0, r5
 801463c:	f000 fa48 	bl	8014ad0 <__sinit>
 8014640:	4b23      	ldr	r3, [pc, #140]	; (80146d0 <_puts_r+0xac>)
 8014642:	429c      	cmp	r4, r3
 8014644:	d117      	bne.n	8014676 <_puts_r+0x52>
 8014646:	686c      	ldr	r4, [r5, #4]
 8014648:	89a3      	ldrh	r3, [r4, #12]
 801464a:	071b      	lsls	r3, r3, #28
 801464c:	d51d      	bpl.n	801468a <_puts_r+0x66>
 801464e:	6923      	ldr	r3, [r4, #16]
 8014650:	b1db      	cbz	r3, 801468a <_puts_r+0x66>
 8014652:	3e01      	subs	r6, #1
 8014654:	68a3      	ldr	r3, [r4, #8]
 8014656:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801465a:	3b01      	subs	r3, #1
 801465c:	60a3      	str	r3, [r4, #8]
 801465e:	b9e9      	cbnz	r1, 801469c <_puts_r+0x78>
 8014660:	2b00      	cmp	r3, #0
 8014662:	da2e      	bge.n	80146c2 <_puts_r+0x9e>
 8014664:	4622      	mov	r2, r4
 8014666:	210a      	movs	r1, #10
 8014668:	4628      	mov	r0, r5
 801466a:	f000 f873 	bl	8014754 <__swbuf_r>
 801466e:	3001      	adds	r0, #1
 8014670:	d011      	beq.n	8014696 <_puts_r+0x72>
 8014672:	200a      	movs	r0, #10
 8014674:	e011      	b.n	801469a <_puts_r+0x76>
 8014676:	4b17      	ldr	r3, [pc, #92]	; (80146d4 <_puts_r+0xb0>)
 8014678:	429c      	cmp	r4, r3
 801467a:	d101      	bne.n	8014680 <_puts_r+0x5c>
 801467c:	68ac      	ldr	r4, [r5, #8]
 801467e:	e7e3      	b.n	8014648 <_puts_r+0x24>
 8014680:	4b15      	ldr	r3, [pc, #84]	; (80146d8 <_puts_r+0xb4>)
 8014682:	429c      	cmp	r4, r3
 8014684:	bf08      	it	eq
 8014686:	68ec      	ldreq	r4, [r5, #12]
 8014688:	e7de      	b.n	8014648 <_puts_r+0x24>
 801468a:	4621      	mov	r1, r4
 801468c:	4628      	mov	r0, r5
 801468e:	f000 f8c1 	bl	8014814 <__swsetup_r>
 8014692:	2800      	cmp	r0, #0
 8014694:	d0dd      	beq.n	8014652 <_puts_r+0x2e>
 8014696:	f04f 30ff 	mov.w	r0, #4294967295
 801469a:	bd70      	pop	{r4, r5, r6, pc}
 801469c:	2b00      	cmp	r3, #0
 801469e:	da04      	bge.n	80146aa <_puts_r+0x86>
 80146a0:	69a2      	ldr	r2, [r4, #24]
 80146a2:	429a      	cmp	r2, r3
 80146a4:	dc06      	bgt.n	80146b4 <_puts_r+0x90>
 80146a6:	290a      	cmp	r1, #10
 80146a8:	d004      	beq.n	80146b4 <_puts_r+0x90>
 80146aa:	6823      	ldr	r3, [r4, #0]
 80146ac:	1c5a      	adds	r2, r3, #1
 80146ae:	6022      	str	r2, [r4, #0]
 80146b0:	7019      	strb	r1, [r3, #0]
 80146b2:	e7cf      	b.n	8014654 <_puts_r+0x30>
 80146b4:	4622      	mov	r2, r4
 80146b6:	4628      	mov	r0, r5
 80146b8:	f000 f84c 	bl	8014754 <__swbuf_r>
 80146bc:	3001      	adds	r0, #1
 80146be:	d1c9      	bne.n	8014654 <_puts_r+0x30>
 80146c0:	e7e9      	b.n	8014696 <_puts_r+0x72>
 80146c2:	6823      	ldr	r3, [r4, #0]
 80146c4:	200a      	movs	r0, #10
 80146c6:	1c5a      	adds	r2, r3, #1
 80146c8:	6022      	str	r2, [r4, #0]
 80146ca:	7018      	strb	r0, [r3, #0]
 80146cc:	e7e5      	b.n	801469a <_puts_r+0x76>
 80146ce:	bf00      	nop
 80146d0:	080188f8 	.word	0x080188f8
 80146d4:	08018918 	.word	0x08018918
 80146d8:	080188d8 	.word	0x080188d8

080146dc <puts>:
 80146dc:	4b02      	ldr	r3, [pc, #8]	; (80146e8 <puts+0xc>)
 80146de:	4601      	mov	r1, r0
 80146e0:	6818      	ldr	r0, [r3, #0]
 80146e2:	f7ff bf9f 	b.w	8014624 <_puts_r>
 80146e6:	bf00      	nop
 80146e8:	20000020 	.word	0x20000020

080146ec <rand>:
 80146ec:	b538      	push	{r3, r4, r5, lr}
 80146ee:	4b13      	ldr	r3, [pc, #76]	; (801473c <rand+0x50>)
 80146f0:	681c      	ldr	r4, [r3, #0]
 80146f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80146f4:	b97b      	cbnz	r3, 8014716 <rand+0x2a>
 80146f6:	2018      	movs	r0, #24
 80146f8:	f000 fad8 	bl	8014cac <malloc>
 80146fc:	4a10      	ldr	r2, [pc, #64]	; (8014740 <rand+0x54>)
 80146fe:	4b11      	ldr	r3, [pc, #68]	; (8014744 <rand+0x58>)
 8014700:	63a0      	str	r0, [r4, #56]	; 0x38
 8014702:	e9c0 2300 	strd	r2, r3, [r0]
 8014706:	4b10      	ldr	r3, [pc, #64]	; (8014748 <rand+0x5c>)
 8014708:	6083      	str	r3, [r0, #8]
 801470a:	230b      	movs	r3, #11
 801470c:	8183      	strh	r3, [r0, #12]
 801470e:	2201      	movs	r2, #1
 8014710:	2300      	movs	r3, #0
 8014712:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014716:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014718:	480c      	ldr	r0, [pc, #48]	; (801474c <rand+0x60>)
 801471a:	690a      	ldr	r2, [r1, #16]
 801471c:	694b      	ldr	r3, [r1, #20]
 801471e:	4c0c      	ldr	r4, [pc, #48]	; (8014750 <rand+0x64>)
 8014720:	4350      	muls	r0, r2
 8014722:	fb04 0003 	mla	r0, r4, r3, r0
 8014726:	fba2 2304 	umull	r2, r3, r2, r4
 801472a:	4403      	add	r3, r0
 801472c:	1c54      	adds	r4, r2, #1
 801472e:	f143 0500 	adc.w	r5, r3, #0
 8014732:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8014736:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801473a:	bd38      	pop	{r3, r4, r5, pc}
 801473c:	20000020 	.word	0x20000020
 8014740:	abcd330e 	.word	0xabcd330e
 8014744:	e66d1234 	.word	0xe66d1234
 8014748:	0005deec 	.word	0x0005deec
 801474c:	5851f42d 	.word	0x5851f42d
 8014750:	4c957f2d 	.word	0x4c957f2d

08014754 <__swbuf_r>:
 8014754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014756:	460e      	mov	r6, r1
 8014758:	4614      	mov	r4, r2
 801475a:	4605      	mov	r5, r0
 801475c:	b118      	cbz	r0, 8014766 <__swbuf_r+0x12>
 801475e:	6983      	ldr	r3, [r0, #24]
 8014760:	b90b      	cbnz	r3, 8014766 <__swbuf_r+0x12>
 8014762:	f000 f9b5 	bl	8014ad0 <__sinit>
 8014766:	4b21      	ldr	r3, [pc, #132]	; (80147ec <__swbuf_r+0x98>)
 8014768:	429c      	cmp	r4, r3
 801476a:	d12a      	bne.n	80147c2 <__swbuf_r+0x6e>
 801476c:	686c      	ldr	r4, [r5, #4]
 801476e:	69a3      	ldr	r3, [r4, #24]
 8014770:	60a3      	str	r3, [r4, #8]
 8014772:	89a3      	ldrh	r3, [r4, #12]
 8014774:	071a      	lsls	r2, r3, #28
 8014776:	d52e      	bpl.n	80147d6 <__swbuf_r+0x82>
 8014778:	6923      	ldr	r3, [r4, #16]
 801477a:	b363      	cbz	r3, 80147d6 <__swbuf_r+0x82>
 801477c:	6923      	ldr	r3, [r4, #16]
 801477e:	6820      	ldr	r0, [r4, #0]
 8014780:	1ac0      	subs	r0, r0, r3
 8014782:	6963      	ldr	r3, [r4, #20]
 8014784:	b2f6      	uxtb	r6, r6
 8014786:	4283      	cmp	r3, r0
 8014788:	4637      	mov	r7, r6
 801478a:	dc04      	bgt.n	8014796 <__swbuf_r+0x42>
 801478c:	4621      	mov	r1, r4
 801478e:	4628      	mov	r0, r5
 8014790:	f000 f934 	bl	80149fc <_fflush_r>
 8014794:	bb28      	cbnz	r0, 80147e2 <__swbuf_r+0x8e>
 8014796:	68a3      	ldr	r3, [r4, #8]
 8014798:	3b01      	subs	r3, #1
 801479a:	60a3      	str	r3, [r4, #8]
 801479c:	6823      	ldr	r3, [r4, #0]
 801479e:	1c5a      	adds	r2, r3, #1
 80147a0:	6022      	str	r2, [r4, #0]
 80147a2:	701e      	strb	r6, [r3, #0]
 80147a4:	6963      	ldr	r3, [r4, #20]
 80147a6:	3001      	adds	r0, #1
 80147a8:	4283      	cmp	r3, r0
 80147aa:	d004      	beq.n	80147b6 <__swbuf_r+0x62>
 80147ac:	89a3      	ldrh	r3, [r4, #12]
 80147ae:	07db      	lsls	r3, r3, #31
 80147b0:	d519      	bpl.n	80147e6 <__swbuf_r+0x92>
 80147b2:	2e0a      	cmp	r6, #10
 80147b4:	d117      	bne.n	80147e6 <__swbuf_r+0x92>
 80147b6:	4621      	mov	r1, r4
 80147b8:	4628      	mov	r0, r5
 80147ba:	f000 f91f 	bl	80149fc <_fflush_r>
 80147be:	b190      	cbz	r0, 80147e6 <__swbuf_r+0x92>
 80147c0:	e00f      	b.n	80147e2 <__swbuf_r+0x8e>
 80147c2:	4b0b      	ldr	r3, [pc, #44]	; (80147f0 <__swbuf_r+0x9c>)
 80147c4:	429c      	cmp	r4, r3
 80147c6:	d101      	bne.n	80147cc <__swbuf_r+0x78>
 80147c8:	68ac      	ldr	r4, [r5, #8]
 80147ca:	e7d0      	b.n	801476e <__swbuf_r+0x1a>
 80147cc:	4b09      	ldr	r3, [pc, #36]	; (80147f4 <__swbuf_r+0xa0>)
 80147ce:	429c      	cmp	r4, r3
 80147d0:	bf08      	it	eq
 80147d2:	68ec      	ldreq	r4, [r5, #12]
 80147d4:	e7cb      	b.n	801476e <__swbuf_r+0x1a>
 80147d6:	4621      	mov	r1, r4
 80147d8:	4628      	mov	r0, r5
 80147da:	f000 f81b 	bl	8014814 <__swsetup_r>
 80147de:	2800      	cmp	r0, #0
 80147e0:	d0cc      	beq.n	801477c <__swbuf_r+0x28>
 80147e2:	f04f 37ff 	mov.w	r7, #4294967295
 80147e6:	4638      	mov	r0, r7
 80147e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147ea:	bf00      	nop
 80147ec:	080188f8 	.word	0x080188f8
 80147f0:	08018918 	.word	0x08018918
 80147f4:	080188d8 	.word	0x080188d8

080147f8 <__ascii_wctomb>:
 80147f8:	b149      	cbz	r1, 801480e <__ascii_wctomb+0x16>
 80147fa:	2aff      	cmp	r2, #255	; 0xff
 80147fc:	bf85      	ittet	hi
 80147fe:	238a      	movhi	r3, #138	; 0x8a
 8014800:	6003      	strhi	r3, [r0, #0]
 8014802:	700a      	strbls	r2, [r1, #0]
 8014804:	f04f 30ff 	movhi.w	r0, #4294967295
 8014808:	bf98      	it	ls
 801480a:	2001      	movls	r0, #1
 801480c:	4770      	bx	lr
 801480e:	4608      	mov	r0, r1
 8014810:	4770      	bx	lr
	...

08014814 <__swsetup_r>:
 8014814:	4b32      	ldr	r3, [pc, #200]	; (80148e0 <__swsetup_r+0xcc>)
 8014816:	b570      	push	{r4, r5, r6, lr}
 8014818:	681d      	ldr	r5, [r3, #0]
 801481a:	4606      	mov	r6, r0
 801481c:	460c      	mov	r4, r1
 801481e:	b125      	cbz	r5, 801482a <__swsetup_r+0x16>
 8014820:	69ab      	ldr	r3, [r5, #24]
 8014822:	b913      	cbnz	r3, 801482a <__swsetup_r+0x16>
 8014824:	4628      	mov	r0, r5
 8014826:	f000 f953 	bl	8014ad0 <__sinit>
 801482a:	4b2e      	ldr	r3, [pc, #184]	; (80148e4 <__swsetup_r+0xd0>)
 801482c:	429c      	cmp	r4, r3
 801482e:	d10f      	bne.n	8014850 <__swsetup_r+0x3c>
 8014830:	686c      	ldr	r4, [r5, #4]
 8014832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014836:	b29a      	uxth	r2, r3
 8014838:	0715      	lsls	r5, r2, #28
 801483a:	d42c      	bmi.n	8014896 <__swsetup_r+0x82>
 801483c:	06d0      	lsls	r0, r2, #27
 801483e:	d411      	bmi.n	8014864 <__swsetup_r+0x50>
 8014840:	2209      	movs	r2, #9
 8014842:	6032      	str	r2, [r6, #0]
 8014844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014848:	81a3      	strh	r3, [r4, #12]
 801484a:	f04f 30ff 	mov.w	r0, #4294967295
 801484e:	e03e      	b.n	80148ce <__swsetup_r+0xba>
 8014850:	4b25      	ldr	r3, [pc, #148]	; (80148e8 <__swsetup_r+0xd4>)
 8014852:	429c      	cmp	r4, r3
 8014854:	d101      	bne.n	801485a <__swsetup_r+0x46>
 8014856:	68ac      	ldr	r4, [r5, #8]
 8014858:	e7eb      	b.n	8014832 <__swsetup_r+0x1e>
 801485a:	4b24      	ldr	r3, [pc, #144]	; (80148ec <__swsetup_r+0xd8>)
 801485c:	429c      	cmp	r4, r3
 801485e:	bf08      	it	eq
 8014860:	68ec      	ldreq	r4, [r5, #12]
 8014862:	e7e6      	b.n	8014832 <__swsetup_r+0x1e>
 8014864:	0751      	lsls	r1, r2, #29
 8014866:	d512      	bpl.n	801488e <__swsetup_r+0x7a>
 8014868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801486a:	b141      	cbz	r1, 801487e <__swsetup_r+0x6a>
 801486c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014870:	4299      	cmp	r1, r3
 8014872:	d002      	beq.n	801487a <__swsetup_r+0x66>
 8014874:	4630      	mov	r0, r6
 8014876:	f000 fa21 	bl	8014cbc <_free_r>
 801487a:	2300      	movs	r3, #0
 801487c:	6363      	str	r3, [r4, #52]	; 0x34
 801487e:	89a3      	ldrh	r3, [r4, #12]
 8014880:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014884:	81a3      	strh	r3, [r4, #12]
 8014886:	2300      	movs	r3, #0
 8014888:	6063      	str	r3, [r4, #4]
 801488a:	6923      	ldr	r3, [r4, #16]
 801488c:	6023      	str	r3, [r4, #0]
 801488e:	89a3      	ldrh	r3, [r4, #12]
 8014890:	f043 0308 	orr.w	r3, r3, #8
 8014894:	81a3      	strh	r3, [r4, #12]
 8014896:	6923      	ldr	r3, [r4, #16]
 8014898:	b94b      	cbnz	r3, 80148ae <__swsetup_r+0x9a>
 801489a:	89a3      	ldrh	r3, [r4, #12]
 801489c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80148a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80148a4:	d003      	beq.n	80148ae <__swsetup_r+0x9a>
 80148a6:	4621      	mov	r1, r4
 80148a8:	4630      	mov	r0, r6
 80148aa:	f000 f9bf 	bl	8014c2c <__smakebuf_r>
 80148ae:	89a2      	ldrh	r2, [r4, #12]
 80148b0:	f012 0301 	ands.w	r3, r2, #1
 80148b4:	d00c      	beq.n	80148d0 <__swsetup_r+0xbc>
 80148b6:	2300      	movs	r3, #0
 80148b8:	60a3      	str	r3, [r4, #8]
 80148ba:	6963      	ldr	r3, [r4, #20]
 80148bc:	425b      	negs	r3, r3
 80148be:	61a3      	str	r3, [r4, #24]
 80148c0:	6923      	ldr	r3, [r4, #16]
 80148c2:	b953      	cbnz	r3, 80148da <__swsetup_r+0xc6>
 80148c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80148cc:	d1ba      	bne.n	8014844 <__swsetup_r+0x30>
 80148ce:	bd70      	pop	{r4, r5, r6, pc}
 80148d0:	0792      	lsls	r2, r2, #30
 80148d2:	bf58      	it	pl
 80148d4:	6963      	ldrpl	r3, [r4, #20]
 80148d6:	60a3      	str	r3, [r4, #8]
 80148d8:	e7f2      	b.n	80148c0 <__swsetup_r+0xac>
 80148da:	2000      	movs	r0, #0
 80148dc:	e7f7      	b.n	80148ce <__swsetup_r+0xba>
 80148de:	bf00      	nop
 80148e0:	20000020 	.word	0x20000020
 80148e4:	080188f8 	.word	0x080188f8
 80148e8:	08018918 	.word	0x08018918
 80148ec:	080188d8 	.word	0x080188d8

080148f0 <__sflush_r>:
 80148f0:	898a      	ldrh	r2, [r1, #12]
 80148f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148f6:	4605      	mov	r5, r0
 80148f8:	0710      	lsls	r0, r2, #28
 80148fa:	460c      	mov	r4, r1
 80148fc:	d458      	bmi.n	80149b0 <__sflush_r+0xc0>
 80148fe:	684b      	ldr	r3, [r1, #4]
 8014900:	2b00      	cmp	r3, #0
 8014902:	dc05      	bgt.n	8014910 <__sflush_r+0x20>
 8014904:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014906:	2b00      	cmp	r3, #0
 8014908:	dc02      	bgt.n	8014910 <__sflush_r+0x20>
 801490a:	2000      	movs	r0, #0
 801490c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014912:	2e00      	cmp	r6, #0
 8014914:	d0f9      	beq.n	801490a <__sflush_r+0x1a>
 8014916:	2300      	movs	r3, #0
 8014918:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801491c:	682f      	ldr	r7, [r5, #0]
 801491e:	6a21      	ldr	r1, [r4, #32]
 8014920:	602b      	str	r3, [r5, #0]
 8014922:	d032      	beq.n	801498a <__sflush_r+0x9a>
 8014924:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014926:	89a3      	ldrh	r3, [r4, #12]
 8014928:	075a      	lsls	r2, r3, #29
 801492a:	d505      	bpl.n	8014938 <__sflush_r+0x48>
 801492c:	6863      	ldr	r3, [r4, #4]
 801492e:	1ac0      	subs	r0, r0, r3
 8014930:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014932:	b10b      	cbz	r3, 8014938 <__sflush_r+0x48>
 8014934:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014936:	1ac0      	subs	r0, r0, r3
 8014938:	2300      	movs	r3, #0
 801493a:	4602      	mov	r2, r0
 801493c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801493e:	6a21      	ldr	r1, [r4, #32]
 8014940:	4628      	mov	r0, r5
 8014942:	47b0      	blx	r6
 8014944:	1c43      	adds	r3, r0, #1
 8014946:	89a3      	ldrh	r3, [r4, #12]
 8014948:	d106      	bne.n	8014958 <__sflush_r+0x68>
 801494a:	6829      	ldr	r1, [r5, #0]
 801494c:	291d      	cmp	r1, #29
 801494e:	d848      	bhi.n	80149e2 <__sflush_r+0xf2>
 8014950:	4a29      	ldr	r2, [pc, #164]	; (80149f8 <__sflush_r+0x108>)
 8014952:	40ca      	lsrs	r2, r1
 8014954:	07d6      	lsls	r6, r2, #31
 8014956:	d544      	bpl.n	80149e2 <__sflush_r+0xf2>
 8014958:	2200      	movs	r2, #0
 801495a:	6062      	str	r2, [r4, #4]
 801495c:	04d9      	lsls	r1, r3, #19
 801495e:	6922      	ldr	r2, [r4, #16]
 8014960:	6022      	str	r2, [r4, #0]
 8014962:	d504      	bpl.n	801496e <__sflush_r+0x7e>
 8014964:	1c42      	adds	r2, r0, #1
 8014966:	d101      	bne.n	801496c <__sflush_r+0x7c>
 8014968:	682b      	ldr	r3, [r5, #0]
 801496a:	b903      	cbnz	r3, 801496e <__sflush_r+0x7e>
 801496c:	6560      	str	r0, [r4, #84]	; 0x54
 801496e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014970:	602f      	str	r7, [r5, #0]
 8014972:	2900      	cmp	r1, #0
 8014974:	d0c9      	beq.n	801490a <__sflush_r+0x1a>
 8014976:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801497a:	4299      	cmp	r1, r3
 801497c:	d002      	beq.n	8014984 <__sflush_r+0x94>
 801497e:	4628      	mov	r0, r5
 8014980:	f000 f99c 	bl	8014cbc <_free_r>
 8014984:	2000      	movs	r0, #0
 8014986:	6360      	str	r0, [r4, #52]	; 0x34
 8014988:	e7c0      	b.n	801490c <__sflush_r+0x1c>
 801498a:	2301      	movs	r3, #1
 801498c:	4628      	mov	r0, r5
 801498e:	47b0      	blx	r6
 8014990:	1c41      	adds	r1, r0, #1
 8014992:	d1c8      	bne.n	8014926 <__sflush_r+0x36>
 8014994:	682b      	ldr	r3, [r5, #0]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d0c5      	beq.n	8014926 <__sflush_r+0x36>
 801499a:	2b1d      	cmp	r3, #29
 801499c:	d001      	beq.n	80149a2 <__sflush_r+0xb2>
 801499e:	2b16      	cmp	r3, #22
 80149a0:	d101      	bne.n	80149a6 <__sflush_r+0xb6>
 80149a2:	602f      	str	r7, [r5, #0]
 80149a4:	e7b1      	b.n	801490a <__sflush_r+0x1a>
 80149a6:	89a3      	ldrh	r3, [r4, #12]
 80149a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149ac:	81a3      	strh	r3, [r4, #12]
 80149ae:	e7ad      	b.n	801490c <__sflush_r+0x1c>
 80149b0:	690f      	ldr	r7, [r1, #16]
 80149b2:	2f00      	cmp	r7, #0
 80149b4:	d0a9      	beq.n	801490a <__sflush_r+0x1a>
 80149b6:	0793      	lsls	r3, r2, #30
 80149b8:	680e      	ldr	r6, [r1, #0]
 80149ba:	bf08      	it	eq
 80149bc:	694b      	ldreq	r3, [r1, #20]
 80149be:	600f      	str	r7, [r1, #0]
 80149c0:	bf18      	it	ne
 80149c2:	2300      	movne	r3, #0
 80149c4:	eba6 0807 	sub.w	r8, r6, r7
 80149c8:	608b      	str	r3, [r1, #8]
 80149ca:	f1b8 0f00 	cmp.w	r8, #0
 80149ce:	dd9c      	ble.n	801490a <__sflush_r+0x1a>
 80149d0:	4643      	mov	r3, r8
 80149d2:	463a      	mov	r2, r7
 80149d4:	6a21      	ldr	r1, [r4, #32]
 80149d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80149d8:	4628      	mov	r0, r5
 80149da:	47b0      	blx	r6
 80149dc:	2800      	cmp	r0, #0
 80149de:	dc06      	bgt.n	80149ee <__sflush_r+0xfe>
 80149e0:	89a3      	ldrh	r3, [r4, #12]
 80149e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149e6:	81a3      	strh	r3, [r4, #12]
 80149e8:	f04f 30ff 	mov.w	r0, #4294967295
 80149ec:	e78e      	b.n	801490c <__sflush_r+0x1c>
 80149ee:	4407      	add	r7, r0
 80149f0:	eba8 0800 	sub.w	r8, r8, r0
 80149f4:	e7e9      	b.n	80149ca <__sflush_r+0xda>
 80149f6:	bf00      	nop
 80149f8:	20400001 	.word	0x20400001

080149fc <_fflush_r>:
 80149fc:	b538      	push	{r3, r4, r5, lr}
 80149fe:	690b      	ldr	r3, [r1, #16]
 8014a00:	4605      	mov	r5, r0
 8014a02:	460c      	mov	r4, r1
 8014a04:	b1db      	cbz	r3, 8014a3e <_fflush_r+0x42>
 8014a06:	b118      	cbz	r0, 8014a10 <_fflush_r+0x14>
 8014a08:	6983      	ldr	r3, [r0, #24]
 8014a0a:	b90b      	cbnz	r3, 8014a10 <_fflush_r+0x14>
 8014a0c:	f000 f860 	bl	8014ad0 <__sinit>
 8014a10:	4b0c      	ldr	r3, [pc, #48]	; (8014a44 <_fflush_r+0x48>)
 8014a12:	429c      	cmp	r4, r3
 8014a14:	d109      	bne.n	8014a2a <_fflush_r+0x2e>
 8014a16:	686c      	ldr	r4, [r5, #4]
 8014a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a1c:	b17b      	cbz	r3, 8014a3e <_fflush_r+0x42>
 8014a1e:	4621      	mov	r1, r4
 8014a20:	4628      	mov	r0, r5
 8014a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a26:	f7ff bf63 	b.w	80148f0 <__sflush_r>
 8014a2a:	4b07      	ldr	r3, [pc, #28]	; (8014a48 <_fflush_r+0x4c>)
 8014a2c:	429c      	cmp	r4, r3
 8014a2e:	d101      	bne.n	8014a34 <_fflush_r+0x38>
 8014a30:	68ac      	ldr	r4, [r5, #8]
 8014a32:	e7f1      	b.n	8014a18 <_fflush_r+0x1c>
 8014a34:	4b05      	ldr	r3, [pc, #20]	; (8014a4c <_fflush_r+0x50>)
 8014a36:	429c      	cmp	r4, r3
 8014a38:	bf08      	it	eq
 8014a3a:	68ec      	ldreq	r4, [r5, #12]
 8014a3c:	e7ec      	b.n	8014a18 <_fflush_r+0x1c>
 8014a3e:	2000      	movs	r0, #0
 8014a40:	bd38      	pop	{r3, r4, r5, pc}
 8014a42:	bf00      	nop
 8014a44:	080188f8 	.word	0x080188f8
 8014a48:	08018918 	.word	0x08018918
 8014a4c:	080188d8 	.word	0x080188d8

08014a50 <std>:
 8014a50:	2300      	movs	r3, #0
 8014a52:	b510      	push	{r4, lr}
 8014a54:	4604      	mov	r4, r0
 8014a56:	e9c0 3300 	strd	r3, r3, [r0]
 8014a5a:	6083      	str	r3, [r0, #8]
 8014a5c:	8181      	strh	r1, [r0, #12]
 8014a5e:	6643      	str	r3, [r0, #100]	; 0x64
 8014a60:	81c2      	strh	r2, [r0, #14]
 8014a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014a66:	6183      	str	r3, [r0, #24]
 8014a68:	4619      	mov	r1, r3
 8014a6a:	2208      	movs	r2, #8
 8014a6c:	305c      	adds	r0, #92	; 0x5c
 8014a6e:	f7ff fdb8 	bl	80145e2 <memset>
 8014a72:	4b05      	ldr	r3, [pc, #20]	; (8014a88 <std+0x38>)
 8014a74:	6263      	str	r3, [r4, #36]	; 0x24
 8014a76:	4b05      	ldr	r3, [pc, #20]	; (8014a8c <std+0x3c>)
 8014a78:	62a3      	str	r3, [r4, #40]	; 0x28
 8014a7a:	4b05      	ldr	r3, [pc, #20]	; (8014a90 <std+0x40>)
 8014a7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014a7e:	4b05      	ldr	r3, [pc, #20]	; (8014a94 <std+0x44>)
 8014a80:	6224      	str	r4, [r4, #32]
 8014a82:	6323      	str	r3, [r4, #48]	; 0x30
 8014a84:	bd10      	pop	{r4, pc}
 8014a86:	bf00      	nop
 8014a88:	080153bd 	.word	0x080153bd
 8014a8c:	080153df 	.word	0x080153df
 8014a90:	08015417 	.word	0x08015417
 8014a94:	0801543b 	.word	0x0801543b

08014a98 <_cleanup_r>:
 8014a98:	4901      	ldr	r1, [pc, #4]	; (8014aa0 <_cleanup_r+0x8>)
 8014a9a:	f000 b885 	b.w	8014ba8 <_fwalk_reent>
 8014a9e:	bf00      	nop
 8014aa0:	080149fd 	.word	0x080149fd

08014aa4 <__sfmoreglue>:
 8014aa4:	b570      	push	{r4, r5, r6, lr}
 8014aa6:	1e4a      	subs	r2, r1, #1
 8014aa8:	2568      	movs	r5, #104	; 0x68
 8014aaa:	4355      	muls	r5, r2
 8014aac:	460e      	mov	r6, r1
 8014aae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014ab2:	f000 f951 	bl	8014d58 <_malloc_r>
 8014ab6:	4604      	mov	r4, r0
 8014ab8:	b140      	cbz	r0, 8014acc <__sfmoreglue+0x28>
 8014aba:	2100      	movs	r1, #0
 8014abc:	e9c0 1600 	strd	r1, r6, [r0]
 8014ac0:	300c      	adds	r0, #12
 8014ac2:	60a0      	str	r0, [r4, #8]
 8014ac4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014ac8:	f7ff fd8b 	bl	80145e2 <memset>
 8014acc:	4620      	mov	r0, r4
 8014ace:	bd70      	pop	{r4, r5, r6, pc}

08014ad0 <__sinit>:
 8014ad0:	6983      	ldr	r3, [r0, #24]
 8014ad2:	b510      	push	{r4, lr}
 8014ad4:	4604      	mov	r4, r0
 8014ad6:	bb33      	cbnz	r3, 8014b26 <__sinit+0x56>
 8014ad8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014adc:	6503      	str	r3, [r0, #80]	; 0x50
 8014ade:	4b12      	ldr	r3, [pc, #72]	; (8014b28 <__sinit+0x58>)
 8014ae0:	4a12      	ldr	r2, [pc, #72]	; (8014b2c <__sinit+0x5c>)
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	6282      	str	r2, [r0, #40]	; 0x28
 8014ae6:	4298      	cmp	r0, r3
 8014ae8:	bf04      	itt	eq
 8014aea:	2301      	moveq	r3, #1
 8014aec:	6183      	streq	r3, [r0, #24]
 8014aee:	f000 f81f 	bl	8014b30 <__sfp>
 8014af2:	6060      	str	r0, [r4, #4]
 8014af4:	4620      	mov	r0, r4
 8014af6:	f000 f81b 	bl	8014b30 <__sfp>
 8014afa:	60a0      	str	r0, [r4, #8]
 8014afc:	4620      	mov	r0, r4
 8014afe:	f000 f817 	bl	8014b30 <__sfp>
 8014b02:	2200      	movs	r2, #0
 8014b04:	60e0      	str	r0, [r4, #12]
 8014b06:	2104      	movs	r1, #4
 8014b08:	6860      	ldr	r0, [r4, #4]
 8014b0a:	f7ff ffa1 	bl	8014a50 <std>
 8014b0e:	2201      	movs	r2, #1
 8014b10:	2109      	movs	r1, #9
 8014b12:	68a0      	ldr	r0, [r4, #8]
 8014b14:	f7ff ff9c 	bl	8014a50 <std>
 8014b18:	2202      	movs	r2, #2
 8014b1a:	2112      	movs	r1, #18
 8014b1c:	68e0      	ldr	r0, [r4, #12]
 8014b1e:	f7ff ff97 	bl	8014a50 <std>
 8014b22:	2301      	movs	r3, #1
 8014b24:	61a3      	str	r3, [r4, #24]
 8014b26:	bd10      	pop	{r4, pc}
 8014b28:	080187c8 	.word	0x080187c8
 8014b2c:	08014a99 	.word	0x08014a99

08014b30 <__sfp>:
 8014b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b32:	4b1b      	ldr	r3, [pc, #108]	; (8014ba0 <__sfp+0x70>)
 8014b34:	681e      	ldr	r6, [r3, #0]
 8014b36:	69b3      	ldr	r3, [r6, #24]
 8014b38:	4607      	mov	r7, r0
 8014b3a:	b913      	cbnz	r3, 8014b42 <__sfp+0x12>
 8014b3c:	4630      	mov	r0, r6
 8014b3e:	f7ff ffc7 	bl	8014ad0 <__sinit>
 8014b42:	3648      	adds	r6, #72	; 0x48
 8014b44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014b48:	3b01      	subs	r3, #1
 8014b4a:	d503      	bpl.n	8014b54 <__sfp+0x24>
 8014b4c:	6833      	ldr	r3, [r6, #0]
 8014b4e:	b133      	cbz	r3, 8014b5e <__sfp+0x2e>
 8014b50:	6836      	ldr	r6, [r6, #0]
 8014b52:	e7f7      	b.n	8014b44 <__sfp+0x14>
 8014b54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014b58:	b16d      	cbz	r5, 8014b76 <__sfp+0x46>
 8014b5a:	3468      	adds	r4, #104	; 0x68
 8014b5c:	e7f4      	b.n	8014b48 <__sfp+0x18>
 8014b5e:	2104      	movs	r1, #4
 8014b60:	4638      	mov	r0, r7
 8014b62:	f7ff ff9f 	bl	8014aa4 <__sfmoreglue>
 8014b66:	6030      	str	r0, [r6, #0]
 8014b68:	2800      	cmp	r0, #0
 8014b6a:	d1f1      	bne.n	8014b50 <__sfp+0x20>
 8014b6c:	230c      	movs	r3, #12
 8014b6e:	603b      	str	r3, [r7, #0]
 8014b70:	4604      	mov	r4, r0
 8014b72:	4620      	mov	r0, r4
 8014b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b76:	4b0b      	ldr	r3, [pc, #44]	; (8014ba4 <__sfp+0x74>)
 8014b78:	6665      	str	r5, [r4, #100]	; 0x64
 8014b7a:	e9c4 5500 	strd	r5, r5, [r4]
 8014b7e:	60a5      	str	r5, [r4, #8]
 8014b80:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014b84:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014b88:	2208      	movs	r2, #8
 8014b8a:	4629      	mov	r1, r5
 8014b8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014b90:	f7ff fd27 	bl	80145e2 <memset>
 8014b94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014b98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014b9c:	e7e9      	b.n	8014b72 <__sfp+0x42>
 8014b9e:	bf00      	nop
 8014ba0:	080187c8 	.word	0x080187c8
 8014ba4:	ffff0001 	.word	0xffff0001

08014ba8 <_fwalk_reent>:
 8014ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014bac:	4680      	mov	r8, r0
 8014bae:	4689      	mov	r9, r1
 8014bb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014bb4:	2600      	movs	r6, #0
 8014bb6:	b914      	cbnz	r4, 8014bbe <_fwalk_reent+0x16>
 8014bb8:	4630      	mov	r0, r6
 8014bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014bbe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014bc2:	3f01      	subs	r7, #1
 8014bc4:	d501      	bpl.n	8014bca <_fwalk_reent+0x22>
 8014bc6:	6824      	ldr	r4, [r4, #0]
 8014bc8:	e7f5      	b.n	8014bb6 <_fwalk_reent+0xe>
 8014bca:	89ab      	ldrh	r3, [r5, #12]
 8014bcc:	2b01      	cmp	r3, #1
 8014bce:	d907      	bls.n	8014be0 <_fwalk_reent+0x38>
 8014bd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014bd4:	3301      	adds	r3, #1
 8014bd6:	d003      	beq.n	8014be0 <_fwalk_reent+0x38>
 8014bd8:	4629      	mov	r1, r5
 8014bda:	4640      	mov	r0, r8
 8014bdc:	47c8      	blx	r9
 8014bde:	4306      	orrs	r6, r0
 8014be0:	3568      	adds	r5, #104	; 0x68
 8014be2:	e7ee      	b.n	8014bc2 <_fwalk_reent+0x1a>

08014be4 <__swhatbuf_r>:
 8014be4:	b570      	push	{r4, r5, r6, lr}
 8014be6:	460e      	mov	r6, r1
 8014be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bec:	2900      	cmp	r1, #0
 8014bee:	b096      	sub	sp, #88	; 0x58
 8014bf0:	4614      	mov	r4, r2
 8014bf2:	461d      	mov	r5, r3
 8014bf4:	da07      	bge.n	8014c06 <__swhatbuf_r+0x22>
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	602b      	str	r3, [r5, #0]
 8014bfa:	89b3      	ldrh	r3, [r6, #12]
 8014bfc:	061a      	lsls	r2, r3, #24
 8014bfe:	d410      	bmi.n	8014c22 <__swhatbuf_r+0x3e>
 8014c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014c04:	e00e      	b.n	8014c24 <__swhatbuf_r+0x40>
 8014c06:	466a      	mov	r2, sp
 8014c08:	f000 fc3e 	bl	8015488 <_fstat_r>
 8014c0c:	2800      	cmp	r0, #0
 8014c0e:	dbf2      	blt.n	8014bf6 <__swhatbuf_r+0x12>
 8014c10:	9a01      	ldr	r2, [sp, #4]
 8014c12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014c16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014c1a:	425a      	negs	r2, r3
 8014c1c:	415a      	adcs	r2, r3
 8014c1e:	602a      	str	r2, [r5, #0]
 8014c20:	e7ee      	b.n	8014c00 <__swhatbuf_r+0x1c>
 8014c22:	2340      	movs	r3, #64	; 0x40
 8014c24:	2000      	movs	r0, #0
 8014c26:	6023      	str	r3, [r4, #0]
 8014c28:	b016      	add	sp, #88	; 0x58
 8014c2a:	bd70      	pop	{r4, r5, r6, pc}

08014c2c <__smakebuf_r>:
 8014c2c:	898b      	ldrh	r3, [r1, #12]
 8014c2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014c30:	079d      	lsls	r5, r3, #30
 8014c32:	4606      	mov	r6, r0
 8014c34:	460c      	mov	r4, r1
 8014c36:	d507      	bpl.n	8014c48 <__smakebuf_r+0x1c>
 8014c38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014c3c:	6023      	str	r3, [r4, #0]
 8014c3e:	6123      	str	r3, [r4, #16]
 8014c40:	2301      	movs	r3, #1
 8014c42:	6163      	str	r3, [r4, #20]
 8014c44:	b002      	add	sp, #8
 8014c46:	bd70      	pop	{r4, r5, r6, pc}
 8014c48:	ab01      	add	r3, sp, #4
 8014c4a:	466a      	mov	r2, sp
 8014c4c:	f7ff ffca 	bl	8014be4 <__swhatbuf_r>
 8014c50:	9900      	ldr	r1, [sp, #0]
 8014c52:	4605      	mov	r5, r0
 8014c54:	4630      	mov	r0, r6
 8014c56:	f000 f87f 	bl	8014d58 <_malloc_r>
 8014c5a:	b948      	cbnz	r0, 8014c70 <__smakebuf_r+0x44>
 8014c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c60:	059a      	lsls	r2, r3, #22
 8014c62:	d4ef      	bmi.n	8014c44 <__smakebuf_r+0x18>
 8014c64:	f023 0303 	bic.w	r3, r3, #3
 8014c68:	f043 0302 	orr.w	r3, r3, #2
 8014c6c:	81a3      	strh	r3, [r4, #12]
 8014c6e:	e7e3      	b.n	8014c38 <__smakebuf_r+0xc>
 8014c70:	4b0d      	ldr	r3, [pc, #52]	; (8014ca8 <__smakebuf_r+0x7c>)
 8014c72:	62b3      	str	r3, [r6, #40]	; 0x28
 8014c74:	89a3      	ldrh	r3, [r4, #12]
 8014c76:	6020      	str	r0, [r4, #0]
 8014c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c7c:	81a3      	strh	r3, [r4, #12]
 8014c7e:	9b00      	ldr	r3, [sp, #0]
 8014c80:	6163      	str	r3, [r4, #20]
 8014c82:	9b01      	ldr	r3, [sp, #4]
 8014c84:	6120      	str	r0, [r4, #16]
 8014c86:	b15b      	cbz	r3, 8014ca0 <__smakebuf_r+0x74>
 8014c88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c8c:	4630      	mov	r0, r6
 8014c8e:	f000 fc0d 	bl	80154ac <_isatty_r>
 8014c92:	b128      	cbz	r0, 8014ca0 <__smakebuf_r+0x74>
 8014c94:	89a3      	ldrh	r3, [r4, #12]
 8014c96:	f023 0303 	bic.w	r3, r3, #3
 8014c9a:	f043 0301 	orr.w	r3, r3, #1
 8014c9e:	81a3      	strh	r3, [r4, #12]
 8014ca0:	89a3      	ldrh	r3, [r4, #12]
 8014ca2:	431d      	orrs	r5, r3
 8014ca4:	81a5      	strh	r5, [r4, #12]
 8014ca6:	e7cd      	b.n	8014c44 <__smakebuf_r+0x18>
 8014ca8:	08014a99 	.word	0x08014a99

08014cac <malloc>:
 8014cac:	4b02      	ldr	r3, [pc, #8]	; (8014cb8 <malloc+0xc>)
 8014cae:	4601      	mov	r1, r0
 8014cb0:	6818      	ldr	r0, [r3, #0]
 8014cb2:	f000 b851 	b.w	8014d58 <_malloc_r>
 8014cb6:	bf00      	nop
 8014cb8:	20000020 	.word	0x20000020

08014cbc <_free_r>:
 8014cbc:	b538      	push	{r3, r4, r5, lr}
 8014cbe:	4605      	mov	r5, r0
 8014cc0:	2900      	cmp	r1, #0
 8014cc2:	d045      	beq.n	8014d50 <_free_r+0x94>
 8014cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014cc8:	1f0c      	subs	r4, r1, #4
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	bfb8      	it	lt
 8014cce:	18e4      	addlt	r4, r4, r3
 8014cd0:	f000 fc0e 	bl	80154f0 <__malloc_lock>
 8014cd4:	4a1f      	ldr	r2, [pc, #124]	; (8014d54 <_free_r+0x98>)
 8014cd6:	6813      	ldr	r3, [r2, #0]
 8014cd8:	4610      	mov	r0, r2
 8014cda:	b933      	cbnz	r3, 8014cea <_free_r+0x2e>
 8014cdc:	6063      	str	r3, [r4, #4]
 8014cde:	6014      	str	r4, [r2, #0]
 8014ce0:	4628      	mov	r0, r5
 8014ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ce6:	f000 bc04 	b.w	80154f2 <__malloc_unlock>
 8014cea:	42a3      	cmp	r3, r4
 8014cec:	d90c      	bls.n	8014d08 <_free_r+0x4c>
 8014cee:	6821      	ldr	r1, [r4, #0]
 8014cf0:	1862      	adds	r2, r4, r1
 8014cf2:	4293      	cmp	r3, r2
 8014cf4:	bf04      	itt	eq
 8014cf6:	681a      	ldreq	r2, [r3, #0]
 8014cf8:	685b      	ldreq	r3, [r3, #4]
 8014cfa:	6063      	str	r3, [r4, #4]
 8014cfc:	bf04      	itt	eq
 8014cfe:	1852      	addeq	r2, r2, r1
 8014d00:	6022      	streq	r2, [r4, #0]
 8014d02:	6004      	str	r4, [r0, #0]
 8014d04:	e7ec      	b.n	8014ce0 <_free_r+0x24>
 8014d06:	4613      	mov	r3, r2
 8014d08:	685a      	ldr	r2, [r3, #4]
 8014d0a:	b10a      	cbz	r2, 8014d10 <_free_r+0x54>
 8014d0c:	42a2      	cmp	r2, r4
 8014d0e:	d9fa      	bls.n	8014d06 <_free_r+0x4a>
 8014d10:	6819      	ldr	r1, [r3, #0]
 8014d12:	1858      	adds	r0, r3, r1
 8014d14:	42a0      	cmp	r0, r4
 8014d16:	d10b      	bne.n	8014d30 <_free_r+0x74>
 8014d18:	6820      	ldr	r0, [r4, #0]
 8014d1a:	4401      	add	r1, r0
 8014d1c:	1858      	adds	r0, r3, r1
 8014d1e:	4282      	cmp	r2, r0
 8014d20:	6019      	str	r1, [r3, #0]
 8014d22:	d1dd      	bne.n	8014ce0 <_free_r+0x24>
 8014d24:	6810      	ldr	r0, [r2, #0]
 8014d26:	6852      	ldr	r2, [r2, #4]
 8014d28:	605a      	str	r2, [r3, #4]
 8014d2a:	4401      	add	r1, r0
 8014d2c:	6019      	str	r1, [r3, #0]
 8014d2e:	e7d7      	b.n	8014ce0 <_free_r+0x24>
 8014d30:	d902      	bls.n	8014d38 <_free_r+0x7c>
 8014d32:	230c      	movs	r3, #12
 8014d34:	602b      	str	r3, [r5, #0]
 8014d36:	e7d3      	b.n	8014ce0 <_free_r+0x24>
 8014d38:	6820      	ldr	r0, [r4, #0]
 8014d3a:	1821      	adds	r1, r4, r0
 8014d3c:	428a      	cmp	r2, r1
 8014d3e:	bf04      	itt	eq
 8014d40:	6811      	ldreq	r1, [r2, #0]
 8014d42:	6852      	ldreq	r2, [r2, #4]
 8014d44:	6062      	str	r2, [r4, #4]
 8014d46:	bf04      	itt	eq
 8014d48:	1809      	addeq	r1, r1, r0
 8014d4a:	6021      	streq	r1, [r4, #0]
 8014d4c:	605c      	str	r4, [r3, #4]
 8014d4e:	e7c7      	b.n	8014ce0 <_free_r+0x24>
 8014d50:	bd38      	pop	{r3, r4, r5, pc}
 8014d52:	bf00      	nop
 8014d54:	200018d4 	.word	0x200018d4

08014d58 <_malloc_r>:
 8014d58:	b570      	push	{r4, r5, r6, lr}
 8014d5a:	1ccd      	adds	r5, r1, #3
 8014d5c:	f025 0503 	bic.w	r5, r5, #3
 8014d60:	3508      	adds	r5, #8
 8014d62:	2d0c      	cmp	r5, #12
 8014d64:	bf38      	it	cc
 8014d66:	250c      	movcc	r5, #12
 8014d68:	2d00      	cmp	r5, #0
 8014d6a:	4606      	mov	r6, r0
 8014d6c:	db01      	blt.n	8014d72 <_malloc_r+0x1a>
 8014d6e:	42a9      	cmp	r1, r5
 8014d70:	d903      	bls.n	8014d7a <_malloc_r+0x22>
 8014d72:	230c      	movs	r3, #12
 8014d74:	6033      	str	r3, [r6, #0]
 8014d76:	2000      	movs	r0, #0
 8014d78:	bd70      	pop	{r4, r5, r6, pc}
 8014d7a:	f000 fbb9 	bl	80154f0 <__malloc_lock>
 8014d7e:	4a21      	ldr	r2, [pc, #132]	; (8014e04 <_malloc_r+0xac>)
 8014d80:	6814      	ldr	r4, [r2, #0]
 8014d82:	4621      	mov	r1, r4
 8014d84:	b991      	cbnz	r1, 8014dac <_malloc_r+0x54>
 8014d86:	4c20      	ldr	r4, [pc, #128]	; (8014e08 <_malloc_r+0xb0>)
 8014d88:	6823      	ldr	r3, [r4, #0]
 8014d8a:	b91b      	cbnz	r3, 8014d94 <_malloc_r+0x3c>
 8014d8c:	4630      	mov	r0, r6
 8014d8e:	f000 fb05 	bl	801539c <_sbrk_r>
 8014d92:	6020      	str	r0, [r4, #0]
 8014d94:	4629      	mov	r1, r5
 8014d96:	4630      	mov	r0, r6
 8014d98:	f000 fb00 	bl	801539c <_sbrk_r>
 8014d9c:	1c43      	adds	r3, r0, #1
 8014d9e:	d124      	bne.n	8014dea <_malloc_r+0x92>
 8014da0:	230c      	movs	r3, #12
 8014da2:	6033      	str	r3, [r6, #0]
 8014da4:	4630      	mov	r0, r6
 8014da6:	f000 fba4 	bl	80154f2 <__malloc_unlock>
 8014daa:	e7e4      	b.n	8014d76 <_malloc_r+0x1e>
 8014dac:	680b      	ldr	r3, [r1, #0]
 8014dae:	1b5b      	subs	r3, r3, r5
 8014db0:	d418      	bmi.n	8014de4 <_malloc_r+0x8c>
 8014db2:	2b0b      	cmp	r3, #11
 8014db4:	d90f      	bls.n	8014dd6 <_malloc_r+0x7e>
 8014db6:	600b      	str	r3, [r1, #0]
 8014db8:	50cd      	str	r5, [r1, r3]
 8014dba:	18cc      	adds	r4, r1, r3
 8014dbc:	4630      	mov	r0, r6
 8014dbe:	f000 fb98 	bl	80154f2 <__malloc_unlock>
 8014dc2:	f104 000b 	add.w	r0, r4, #11
 8014dc6:	1d23      	adds	r3, r4, #4
 8014dc8:	f020 0007 	bic.w	r0, r0, #7
 8014dcc:	1ac3      	subs	r3, r0, r3
 8014dce:	d0d3      	beq.n	8014d78 <_malloc_r+0x20>
 8014dd0:	425a      	negs	r2, r3
 8014dd2:	50e2      	str	r2, [r4, r3]
 8014dd4:	e7d0      	b.n	8014d78 <_malloc_r+0x20>
 8014dd6:	428c      	cmp	r4, r1
 8014dd8:	684b      	ldr	r3, [r1, #4]
 8014dda:	bf16      	itet	ne
 8014ddc:	6063      	strne	r3, [r4, #4]
 8014dde:	6013      	streq	r3, [r2, #0]
 8014de0:	460c      	movne	r4, r1
 8014de2:	e7eb      	b.n	8014dbc <_malloc_r+0x64>
 8014de4:	460c      	mov	r4, r1
 8014de6:	6849      	ldr	r1, [r1, #4]
 8014de8:	e7cc      	b.n	8014d84 <_malloc_r+0x2c>
 8014dea:	1cc4      	adds	r4, r0, #3
 8014dec:	f024 0403 	bic.w	r4, r4, #3
 8014df0:	42a0      	cmp	r0, r4
 8014df2:	d005      	beq.n	8014e00 <_malloc_r+0xa8>
 8014df4:	1a21      	subs	r1, r4, r0
 8014df6:	4630      	mov	r0, r6
 8014df8:	f000 fad0 	bl	801539c <_sbrk_r>
 8014dfc:	3001      	adds	r0, #1
 8014dfe:	d0cf      	beq.n	8014da0 <_malloc_r+0x48>
 8014e00:	6025      	str	r5, [r4, #0]
 8014e02:	e7db      	b.n	8014dbc <_malloc_r+0x64>
 8014e04:	200018d4 	.word	0x200018d4
 8014e08:	200018d8 	.word	0x200018d8

08014e0c <__sfputc_r>:
 8014e0c:	6893      	ldr	r3, [r2, #8]
 8014e0e:	3b01      	subs	r3, #1
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	b410      	push	{r4}
 8014e14:	6093      	str	r3, [r2, #8]
 8014e16:	da08      	bge.n	8014e2a <__sfputc_r+0x1e>
 8014e18:	6994      	ldr	r4, [r2, #24]
 8014e1a:	42a3      	cmp	r3, r4
 8014e1c:	db01      	blt.n	8014e22 <__sfputc_r+0x16>
 8014e1e:	290a      	cmp	r1, #10
 8014e20:	d103      	bne.n	8014e2a <__sfputc_r+0x1e>
 8014e22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e26:	f7ff bc95 	b.w	8014754 <__swbuf_r>
 8014e2a:	6813      	ldr	r3, [r2, #0]
 8014e2c:	1c58      	adds	r0, r3, #1
 8014e2e:	6010      	str	r0, [r2, #0]
 8014e30:	7019      	strb	r1, [r3, #0]
 8014e32:	4608      	mov	r0, r1
 8014e34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e38:	4770      	bx	lr

08014e3a <__sfputs_r>:
 8014e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e3c:	4606      	mov	r6, r0
 8014e3e:	460f      	mov	r7, r1
 8014e40:	4614      	mov	r4, r2
 8014e42:	18d5      	adds	r5, r2, r3
 8014e44:	42ac      	cmp	r4, r5
 8014e46:	d101      	bne.n	8014e4c <__sfputs_r+0x12>
 8014e48:	2000      	movs	r0, #0
 8014e4a:	e007      	b.n	8014e5c <__sfputs_r+0x22>
 8014e4c:	463a      	mov	r2, r7
 8014e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e52:	4630      	mov	r0, r6
 8014e54:	f7ff ffda 	bl	8014e0c <__sfputc_r>
 8014e58:	1c43      	adds	r3, r0, #1
 8014e5a:	d1f3      	bne.n	8014e44 <__sfputs_r+0xa>
 8014e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014e60 <_vfiprintf_r>:
 8014e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e64:	460c      	mov	r4, r1
 8014e66:	b09d      	sub	sp, #116	; 0x74
 8014e68:	4617      	mov	r7, r2
 8014e6a:	461d      	mov	r5, r3
 8014e6c:	4606      	mov	r6, r0
 8014e6e:	b118      	cbz	r0, 8014e78 <_vfiprintf_r+0x18>
 8014e70:	6983      	ldr	r3, [r0, #24]
 8014e72:	b90b      	cbnz	r3, 8014e78 <_vfiprintf_r+0x18>
 8014e74:	f7ff fe2c 	bl	8014ad0 <__sinit>
 8014e78:	4b7c      	ldr	r3, [pc, #496]	; (801506c <_vfiprintf_r+0x20c>)
 8014e7a:	429c      	cmp	r4, r3
 8014e7c:	d158      	bne.n	8014f30 <_vfiprintf_r+0xd0>
 8014e7e:	6874      	ldr	r4, [r6, #4]
 8014e80:	89a3      	ldrh	r3, [r4, #12]
 8014e82:	0718      	lsls	r0, r3, #28
 8014e84:	d55e      	bpl.n	8014f44 <_vfiprintf_r+0xe4>
 8014e86:	6923      	ldr	r3, [r4, #16]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d05b      	beq.n	8014f44 <_vfiprintf_r+0xe4>
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8014e90:	2320      	movs	r3, #32
 8014e92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014e96:	2330      	movs	r3, #48	; 0x30
 8014e98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014e9c:	9503      	str	r5, [sp, #12]
 8014e9e:	f04f 0b01 	mov.w	fp, #1
 8014ea2:	46b8      	mov	r8, r7
 8014ea4:	4645      	mov	r5, r8
 8014ea6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014eaa:	b10b      	cbz	r3, 8014eb0 <_vfiprintf_r+0x50>
 8014eac:	2b25      	cmp	r3, #37	; 0x25
 8014eae:	d154      	bne.n	8014f5a <_vfiprintf_r+0xfa>
 8014eb0:	ebb8 0a07 	subs.w	sl, r8, r7
 8014eb4:	d00b      	beq.n	8014ece <_vfiprintf_r+0x6e>
 8014eb6:	4653      	mov	r3, sl
 8014eb8:	463a      	mov	r2, r7
 8014eba:	4621      	mov	r1, r4
 8014ebc:	4630      	mov	r0, r6
 8014ebe:	f7ff ffbc 	bl	8014e3a <__sfputs_r>
 8014ec2:	3001      	adds	r0, #1
 8014ec4:	f000 80c2 	beq.w	801504c <_vfiprintf_r+0x1ec>
 8014ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014eca:	4453      	add	r3, sl
 8014ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8014ece:	f898 3000 	ldrb.w	r3, [r8]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	f000 80ba 	beq.w	801504c <_vfiprintf_r+0x1ec>
 8014ed8:	2300      	movs	r3, #0
 8014eda:	f04f 32ff 	mov.w	r2, #4294967295
 8014ede:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014ee2:	9304      	str	r3, [sp, #16]
 8014ee4:	9307      	str	r3, [sp, #28]
 8014ee6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014eea:	931a      	str	r3, [sp, #104]	; 0x68
 8014eec:	46a8      	mov	r8, r5
 8014eee:	2205      	movs	r2, #5
 8014ef0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014ef4:	485e      	ldr	r0, [pc, #376]	; (8015070 <_vfiprintf_r+0x210>)
 8014ef6:	f7eb f973 	bl	80001e0 <memchr>
 8014efa:	9b04      	ldr	r3, [sp, #16]
 8014efc:	bb78      	cbnz	r0, 8014f5e <_vfiprintf_r+0xfe>
 8014efe:	06d9      	lsls	r1, r3, #27
 8014f00:	bf44      	itt	mi
 8014f02:	2220      	movmi	r2, #32
 8014f04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014f08:	071a      	lsls	r2, r3, #28
 8014f0a:	bf44      	itt	mi
 8014f0c:	222b      	movmi	r2, #43	; 0x2b
 8014f0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014f12:	782a      	ldrb	r2, [r5, #0]
 8014f14:	2a2a      	cmp	r2, #42	; 0x2a
 8014f16:	d02a      	beq.n	8014f6e <_vfiprintf_r+0x10e>
 8014f18:	9a07      	ldr	r2, [sp, #28]
 8014f1a:	46a8      	mov	r8, r5
 8014f1c:	2000      	movs	r0, #0
 8014f1e:	250a      	movs	r5, #10
 8014f20:	4641      	mov	r1, r8
 8014f22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014f26:	3b30      	subs	r3, #48	; 0x30
 8014f28:	2b09      	cmp	r3, #9
 8014f2a:	d969      	bls.n	8015000 <_vfiprintf_r+0x1a0>
 8014f2c:	b360      	cbz	r0, 8014f88 <_vfiprintf_r+0x128>
 8014f2e:	e024      	b.n	8014f7a <_vfiprintf_r+0x11a>
 8014f30:	4b50      	ldr	r3, [pc, #320]	; (8015074 <_vfiprintf_r+0x214>)
 8014f32:	429c      	cmp	r4, r3
 8014f34:	d101      	bne.n	8014f3a <_vfiprintf_r+0xda>
 8014f36:	68b4      	ldr	r4, [r6, #8]
 8014f38:	e7a2      	b.n	8014e80 <_vfiprintf_r+0x20>
 8014f3a:	4b4f      	ldr	r3, [pc, #316]	; (8015078 <_vfiprintf_r+0x218>)
 8014f3c:	429c      	cmp	r4, r3
 8014f3e:	bf08      	it	eq
 8014f40:	68f4      	ldreq	r4, [r6, #12]
 8014f42:	e79d      	b.n	8014e80 <_vfiprintf_r+0x20>
 8014f44:	4621      	mov	r1, r4
 8014f46:	4630      	mov	r0, r6
 8014f48:	f7ff fc64 	bl	8014814 <__swsetup_r>
 8014f4c:	2800      	cmp	r0, #0
 8014f4e:	d09d      	beq.n	8014e8c <_vfiprintf_r+0x2c>
 8014f50:	f04f 30ff 	mov.w	r0, #4294967295
 8014f54:	b01d      	add	sp, #116	; 0x74
 8014f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f5a:	46a8      	mov	r8, r5
 8014f5c:	e7a2      	b.n	8014ea4 <_vfiprintf_r+0x44>
 8014f5e:	4a44      	ldr	r2, [pc, #272]	; (8015070 <_vfiprintf_r+0x210>)
 8014f60:	1a80      	subs	r0, r0, r2
 8014f62:	fa0b f000 	lsl.w	r0, fp, r0
 8014f66:	4318      	orrs	r0, r3
 8014f68:	9004      	str	r0, [sp, #16]
 8014f6a:	4645      	mov	r5, r8
 8014f6c:	e7be      	b.n	8014eec <_vfiprintf_r+0x8c>
 8014f6e:	9a03      	ldr	r2, [sp, #12]
 8014f70:	1d11      	adds	r1, r2, #4
 8014f72:	6812      	ldr	r2, [r2, #0]
 8014f74:	9103      	str	r1, [sp, #12]
 8014f76:	2a00      	cmp	r2, #0
 8014f78:	db01      	blt.n	8014f7e <_vfiprintf_r+0x11e>
 8014f7a:	9207      	str	r2, [sp, #28]
 8014f7c:	e004      	b.n	8014f88 <_vfiprintf_r+0x128>
 8014f7e:	4252      	negs	r2, r2
 8014f80:	f043 0302 	orr.w	r3, r3, #2
 8014f84:	9207      	str	r2, [sp, #28]
 8014f86:	9304      	str	r3, [sp, #16]
 8014f88:	f898 3000 	ldrb.w	r3, [r8]
 8014f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8014f8e:	d10e      	bne.n	8014fae <_vfiprintf_r+0x14e>
 8014f90:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014f94:	2b2a      	cmp	r3, #42	; 0x2a
 8014f96:	d138      	bne.n	801500a <_vfiprintf_r+0x1aa>
 8014f98:	9b03      	ldr	r3, [sp, #12]
 8014f9a:	1d1a      	adds	r2, r3, #4
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	9203      	str	r2, [sp, #12]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	bfb8      	it	lt
 8014fa4:	f04f 33ff 	movlt.w	r3, #4294967295
 8014fa8:	f108 0802 	add.w	r8, r8, #2
 8014fac:	9305      	str	r3, [sp, #20]
 8014fae:	4d33      	ldr	r5, [pc, #204]	; (801507c <_vfiprintf_r+0x21c>)
 8014fb0:	f898 1000 	ldrb.w	r1, [r8]
 8014fb4:	2203      	movs	r2, #3
 8014fb6:	4628      	mov	r0, r5
 8014fb8:	f7eb f912 	bl	80001e0 <memchr>
 8014fbc:	b140      	cbz	r0, 8014fd0 <_vfiprintf_r+0x170>
 8014fbe:	2340      	movs	r3, #64	; 0x40
 8014fc0:	1b40      	subs	r0, r0, r5
 8014fc2:	fa03 f000 	lsl.w	r0, r3, r0
 8014fc6:	9b04      	ldr	r3, [sp, #16]
 8014fc8:	4303      	orrs	r3, r0
 8014fca:	f108 0801 	add.w	r8, r8, #1
 8014fce:	9304      	str	r3, [sp, #16]
 8014fd0:	f898 1000 	ldrb.w	r1, [r8]
 8014fd4:	482a      	ldr	r0, [pc, #168]	; (8015080 <_vfiprintf_r+0x220>)
 8014fd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014fda:	2206      	movs	r2, #6
 8014fdc:	f108 0701 	add.w	r7, r8, #1
 8014fe0:	f7eb f8fe 	bl	80001e0 <memchr>
 8014fe4:	2800      	cmp	r0, #0
 8014fe6:	d037      	beq.n	8015058 <_vfiprintf_r+0x1f8>
 8014fe8:	4b26      	ldr	r3, [pc, #152]	; (8015084 <_vfiprintf_r+0x224>)
 8014fea:	bb1b      	cbnz	r3, 8015034 <_vfiprintf_r+0x1d4>
 8014fec:	9b03      	ldr	r3, [sp, #12]
 8014fee:	3307      	adds	r3, #7
 8014ff0:	f023 0307 	bic.w	r3, r3, #7
 8014ff4:	3308      	adds	r3, #8
 8014ff6:	9303      	str	r3, [sp, #12]
 8014ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ffa:	444b      	add	r3, r9
 8014ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8014ffe:	e750      	b.n	8014ea2 <_vfiprintf_r+0x42>
 8015000:	fb05 3202 	mla	r2, r5, r2, r3
 8015004:	2001      	movs	r0, #1
 8015006:	4688      	mov	r8, r1
 8015008:	e78a      	b.n	8014f20 <_vfiprintf_r+0xc0>
 801500a:	2300      	movs	r3, #0
 801500c:	f108 0801 	add.w	r8, r8, #1
 8015010:	9305      	str	r3, [sp, #20]
 8015012:	4619      	mov	r1, r3
 8015014:	250a      	movs	r5, #10
 8015016:	4640      	mov	r0, r8
 8015018:	f810 2b01 	ldrb.w	r2, [r0], #1
 801501c:	3a30      	subs	r2, #48	; 0x30
 801501e:	2a09      	cmp	r2, #9
 8015020:	d903      	bls.n	801502a <_vfiprintf_r+0x1ca>
 8015022:	2b00      	cmp	r3, #0
 8015024:	d0c3      	beq.n	8014fae <_vfiprintf_r+0x14e>
 8015026:	9105      	str	r1, [sp, #20]
 8015028:	e7c1      	b.n	8014fae <_vfiprintf_r+0x14e>
 801502a:	fb05 2101 	mla	r1, r5, r1, r2
 801502e:	2301      	movs	r3, #1
 8015030:	4680      	mov	r8, r0
 8015032:	e7f0      	b.n	8015016 <_vfiprintf_r+0x1b6>
 8015034:	ab03      	add	r3, sp, #12
 8015036:	9300      	str	r3, [sp, #0]
 8015038:	4622      	mov	r2, r4
 801503a:	4b13      	ldr	r3, [pc, #76]	; (8015088 <_vfiprintf_r+0x228>)
 801503c:	a904      	add	r1, sp, #16
 801503e:	4630      	mov	r0, r6
 8015040:	f3af 8000 	nop.w
 8015044:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015048:	4681      	mov	r9, r0
 801504a:	d1d5      	bne.n	8014ff8 <_vfiprintf_r+0x198>
 801504c:	89a3      	ldrh	r3, [r4, #12]
 801504e:	065b      	lsls	r3, r3, #25
 8015050:	f53f af7e 	bmi.w	8014f50 <_vfiprintf_r+0xf0>
 8015054:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015056:	e77d      	b.n	8014f54 <_vfiprintf_r+0xf4>
 8015058:	ab03      	add	r3, sp, #12
 801505a:	9300      	str	r3, [sp, #0]
 801505c:	4622      	mov	r2, r4
 801505e:	4b0a      	ldr	r3, [pc, #40]	; (8015088 <_vfiprintf_r+0x228>)
 8015060:	a904      	add	r1, sp, #16
 8015062:	4630      	mov	r0, r6
 8015064:	f000 f888 	bl	8015178 <_printf_i>
 8015068:	e7ec      	b.n	8015044 <_vfiprintf_r+0x1e4>
 801506a:	bf00      	nop
 801506c:	080188f8 	.word	0x080188f8
 8015070:	08018938 	.word	0x08018938
 8015074:	08018918 	.word	0x08018918
 8015078:	080188d8 	.word	0x080188d8
 801507c:	0801893e 	.word	0x0801893e
 8015080:	08018942 	.word	0x08018942
 8015084:	00000000 	.word	0x00000000
 8015088:	08014e3b 	.word	0x08014e3b

0801508c <_printf_common>:
 801508c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015090:	4691      	mov	r9, r2
 8015092:	461f      	mov	r7, r3
 8015094:	688a      	ldr	r2, [r1, #8]
 8015096:	690b      	ldr	r3, [r1, #16]
 8015098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801509c:	4293      	cmp	r3, r2
 801509e:	bfb8      	it	lt
 80150a0:	4613      	movlt	r3, r2
 80150a2:	f8c9 3000 	str.w	r3, [r9]
 80150a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80150aa:	4606      	mov	r6, r0
 80150ac:	460c      	mov	r4, r1
 80150ae:	b112      	cbz	r2, 80150b6 <_printf_common+0x2a>
 80150b0:	3301      	adds	r3, #1
 80150b2:	f8c9 3000 	str.w	r3, [r9]
 80150b6:	6823      	ldr	r3, [r4, #0]
 80150b8:	0699      	lsls	r1, r3, #26
 80150ba:	bf42      	ittt	mi
 80150bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80150c0:	3302      	addmi	r3, #2
 80150c2:	f8c9 3000 	strmi.w	r3, [r9]
 80150c6:	6825      	ldr	r5, [r4, #0]
 80150c8:	f015 0506 	ands.w	r5, r5, #6
 80150cc:	d107      	bne.n	80150de <_printf_common+0x52>
 80150ce:	f104 0a19 	add.w	sl, r4, #25
 80150d2:	68e3      	ldr	r3, [r4, #12]
 80150d4:	f8d9 2000 	ldr.w	r2, [r9]
 80150d8:	1a9b      	subs	r3, r3, r2
 80150da:	42ab      	cmp	r3, r5
 80150dc:	dc28      	bgt.n	8015130 <_printf_common+0xa4>
 80150de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80150e2:	6822      	ldr	r2, [r4, #0]
 80150e4:	3300      	adds	r3, #0
 80150e6:	bf18      	it	ne
 80150e8:	2301      	movne	r3, #1
 80150ea:	0692      	lsls	r2, r2, #26
 80150ec:	d42d      	bmi.n	801514a <_printf_common+0xbe>
 80150ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80150f2:	4639      	mov	r1, r7
 80150f4:	4630      	mov	r0, r6
 80150f6:	47c0      	blx	r8
 80150f8:	3001      	adds	r0, #1
 80150fa:	d020      	beq.n	801513e <_printf_common+0xb2>
 80150fc:	6823      	ldr	r3, [r4, #0]
 80150fe:	68e5      	ldr	r5, [r4, #12]
 8015100:	f8d9 2000 	ldr.w	r2, [r9]
 8015104:	f003 0306 	and.w	r3, r3, #6
 8015108:	2b04      	cmp	r3, #4
 801510a:	bf08      	it	eq
 801510c:	1aad      	subeq	r5, r5, r2
 801510e:	68a3      	ldr	r3, [r4, #8]
 8015110:	6922      	ldr	r2, [r4, #16]
 8015112:	bf0c      	ite	eq
 8015114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015118:	2500      	movne	r5, #0
 801511a:	4293      	cmp	r3, r2
 801511c:	bfc4      	itt	gt
 801511e:	1a9b      	subgt	r3, r3, r2
 8015120:	18ed      	addgt	r5, r5, r3
 8015122:	f04f 0900 	mov.w	r9, #0
 8015126:	341a      	adds	r4, #26
 8015128:	454d      	cmp	r5, r9
 801512a:	d11a      	bne.n	8015162 <_printf_common+0xd6>
 801512c:	2000      	movs	r0, #0
 801512e:	e008      	b.n	8015142 <_printf_common+0xb6>
 8015130:	2301      	movs	r3, #1
 8015132:	4652      	mov	r2, sl
 8015134:	4639      	mov	r1, r7
 8015136:	4630      	mov	r0, r6
 8015138:	47c0      	blx	r8
 801513a:	3001      	adds	r0, #1
 801513c:	d103      	bne.n	8015146 <_printf_common+0xba>
 801513e:	f04f 30ff 	mov.w	r0, #4294967295
 8015142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015146:	3501      	adds	r5, #1
 8015148:	e7c3      	b.n	80150d2 <_printf_common+0x46>
 801514a:	18e1      	adds	r1, r4, r3
 801514c:	1c5a      	adds	r2, r3, #1
 801514e:	2030      	movs	r0, #48	; 0x30
 8015150:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015154:	4422      	add	r2, r4
 8015156:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801515a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801515e:	3302      	adds	r3, #2
 8015160:	e7c5      	b.n	80150ee <_printf_common+0x62>
 8015162:	2301      	movs	r3, #1
 8015164:	4622      	mov	r2, r4
 8015166:	4639      	mov	r1, r7
 8015168:	4630      	mov	r0, r6
 801516a:	47c0      	blx	r8
 801516c:	3001      	adds	r0, #1
 801516e:	d0e6      	beq.n	801513e <_printf_common+0xb2>
 8015170:	f109 0901 	add.w	r9, r9, #1
 8015174:	e7d8      	b.n	8015128 <_printf_common+0x9c>
	...

08015178 <_printf_i>:
 8015178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801517c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015180:	460c      	mov	r4, r1
 8015182:	7e09      	ldrb	r1, [r1, #24]
 8015184:	b085      	sub	sp, #20
 8015186:	296e      	cmp	r1, #110	; 0x6e
 8015188:	4617      	mov	r7, r2
 801518a:	4606      	mov	r6, r0
 801518c:	4698      	mov	r8, r3
 801518e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015190:	f000 80b3 	beq.w	80152fa <_printf_i+0x182>
 8015194:	d822      	bhi.n	80151dc <_printf_i+0x64>
 8015196:	2963      	cmp	r1, #99	; 0x63
 8015198:	d036      	beq.n	8015208 <_printf_i+0x90>
 801519a:	d80a      	bhi.n	80151b2 <_printf_i+0x3a>
 801519c:	2900      	cmp	r1, #0
 801519e:	f000 80b9 	beq.w	8015314 <_printf_i+0x19c>
 80151a2:	2958      	cmp	r1, #88	; 0x58
 80151a4:	f000 8083 	beq.w	80152ae <_printf_i+0x136>
 80151a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80151ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80151b0:	e032      	b.n	8015218 <_printf_i+0xa0>
 80151b2:	2964      	cmp	r1, #100	; 0x64
 80151b4:	d001      	beq.n	80151ba <_printf_i+0x42>
 80151b6:	2969      	cmp	r1, #105	; 0x69
 80151b8:	d1f6      	bne.n	80151a8 <_printf_i+0x30>
 80151ba:	6820      	ldr	r0, [r4, #0]
 80151bc:	6813      	ldr	r3, [r2, #0]
 80151be:	0605      	lsls	r5, r0, #24
 80151c0:	f103 0104 	add.w	r1, r3, #4
 80151c4:	d52a      	bpl.n	801521c <_printf_i+0xa4>
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	6011      	str	r1, [r2, #0]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	da03      	bge.n	80151d6 <_printf_i+0x5e>
 80151ce:	222d      	movs	r2, #45	; 0x2d
 80151d0:	425b      	negs	r3, r3
 80151d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80151d6:	486f      	ldr	r0, [pc, #444]	; (8015394 <_printf_i+0x21c>)
 80151d8:	220a      	movs	r2, #10
 80151da:	e039      	b.n	8015250 <_printf_i+0xd8>
 80151dc:	2973      	cmp	r1, #115	; 0x73
 80151de:	f000 809d 	beq.w	801531c <_printf_i+0x1a4>
 80151e2:	d808      	bhi.n	80151f6 <_printf_i+0x7e>
 80151e4:	296f      	cmp	r1, #111	; 0x6f
 80151e6:	d020      	beq.n	801522a <_printf_i+0xb2>
 80151e8:	2970      	cmp	r1, #112	; 0x70
 80151ea:	d1dd      	bne.n	80151a8 <_printf_i+0x30>
 80151ec:	6823      	ldr	r3, [r4, #0]
 80151ee:	f043 0320 	orr.w	r3, r3, #32
 80151f2:	6023      	str	r3, [r4, #0]
 80151f4:	e003      	b.n	80151fe <_printf_i+0x86>
 80151f6:	2975      	cmp	r1, #117	; 0x75
 80151f8:	d017      	beq.n	801522a <_printf_i+0xb2>
 80151fa:	2978      	cmp	r1, #120	; 0x78
 80151fc:	d1d4      	bne.n	80151a8 <_printf_i+0x30>
 80151fe:	2378      	movs	r3, #120	; 0x78
 8015200:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015204:	4864      	ldr	r0, [pc, #400]	; (8015398 <_printf_i+0x220>)
 8015206:	e055      	b.n	80152b4 <_printf_i+0x13c>
 8015208:	6813      	ldr	r3, [r2, #0]
 801520a:	1d19      	adds	r1, r3, #4
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	6011      	str	r1, [r2, #0]
 8015210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015218:	2301      	movs	r3, #1
 801521a:	e08c      	b.n	8015336 <_printf_i+0x1be>
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	6011      	str	r1, [r2, #0]
 8015220:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015224:	bf18      	it	ne
 8015226:	b21b      	sxthne	r3, r3
 8015228:	e7cf      	b.n	80151ca <_printf_i+0x52>
 801522a:	6813      	ldr	r3, [r2, #0]
 801522c:	6825      	ldr	r5, [r4, #0]
 801522e:	1d18      	adds	r0, r3, #4
 8015230:	6010      	str	r0, [r2, #0]
 8015232:	0628      	lsls	r0, r5, #24
 8015234:	d501      	bpl.n	801523a <_printf_i+0xc2>
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	e002      	b.n	8015240 <_printf_i+0xc8>
 801523a:	0668      	lsls	r0, r5, #25
 801523c:	d5fb      	bpl.n	8015236 <_printf_i+0xbe>
 801523e:	881b      	ldrh	r3, [r3, #0]
 8015240:	4854      	ldr	r0, [pc, #336]	; (8015394 <_printf_i+0x21c>)
 8015242:	296f      	cmp	r1, #111	; 0x6f
 8015244:	bf14      	ite	ne
 8015246:	220a      	movne	r2, #10
 8015248:	2208      	moveq	r2, #8
 801524a:	2100      	movs	r1, #0
 801524c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015250:	6865      	ldr	r5, [r4, #4]
 8015252:	60a5      	str	r5, [r4, #8]
 8015254:	2d00      	cmp	r5, #0
 8015256:	f2c0 8095 	blt.w	8015384 <_printf_i+0x20c>
 801525a:	6821      	ldr	r1, [r4, #0]
 801525c:	f021 0104 	bic.w	r1, r1, #4
 8015260:	6021      	str	r1, [r4, #0]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d13d      	bne.n	80152e2 <_printf_i+0x16a>
 8015266:	2d00      	cmp	r5, #0
 8015268:	f040 808e 	bne.w	8015388 <_printf_i+0x210>
 801526c:	4665      	mov	r5, ip
 801526e:	2a08      	cmp	r2, #8
 8015270:	d10b      	bne.n	801528a <_printf_i+0x112>
 8015272:	6823      	ldr	r3, [r4, #0]
 8015274:	07db      	lsls	r3, r3, #31
 8015276:	d508      	bpl.n	801528a <_printf_i+0x112>
 8015278:	6923      	ldr	r3, [r4, #16]
 801527a:	6862      	ldr	r2, [r4, #4]
 801527c:	429a      	cmp	r2, r3
 801527e:	bfde      	ittt	le
 8015280:	2330      	movle	r3, #48	; 0x30
 8015282:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015286:	f105 35ff 	addle.w	r5, r5, #4294967295
 801528a:	ebac 0305 	sub.w	r3, ip, r5
 801528e:	6123      	str	r3, [r4, #16]
 8015290:	f8cd 8000 	str.w	r8, [sp]
 8015294:	463b      	mov	r3, r7
 8015296:	aa03      	add	r2, sp, #12
 8015298:	4621      	mov	r1, r4
 801529a:	4630      	mov	r0, r6
 801529c:	f7ff fef6 	bl	801508c <_printf_common>
 80152a0:	3001      	adds	r0, #1
 80152a2:	d14d      	bne.n	8015340 <_printf_i+0x1c8>
 80152a4:	f04f 30ff 	mov.w	r0, #4294967295
 80152a8:	b005      	add	sp, #20
 80152aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152ae:	4839      	ldr	r0, [pc, #228]	; (8015394 <_printf_i+0x21c>)
 80152b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80152b4:	6813      	ldr	r3, [r2, #0]
 80152b6:	6821      	ldr	r1, [r4, #0]
 80152b8:	1d1d      	adds	r5, r3, #4
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	6015      	str	r5, [r2, #0]
 80152be:	060a      	lsls	r2, r1, #24
 80152c0:	d50b      	bpl.n	80152da <_printf_i+0x162>
 80152c2:	07ca      	lsls	r2, r1, #31
 80152c4:	bf44      	itt	mi
 80152c6:	f041 0120 	orrmi.w	r1, r1, #32
 80152ca:	6021      	strmi	r1, [r4, #0]
 80152cc:	b91b      	cbnz	r3, 80152d6 <_printf_i+0x15e>
 80152ce:	6822      	ldr	r2, [r4, #0]
 80152d0:	f022 0220 	bic.w	r2, r2, #32
 80152d4:	6022      	str	r2, [r4, #0]
 80152d6:	2210      	movs	r2, #16
 80152d8:	e7b7      	b.n	801524a <_printf_i+0xd2>
 80152da:	064d      	lsls	r5, r1, #25
 80152dc:	bf48      	it	mi
 80152de:	b29b      	uxthmi	r3, r3
 80152e0:	e7ef      	b.n	80152c2 <_printf_i+0x14a>
 80152e2:	4665      	mov	r5, ip
 80152e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80152e8:	fb02 3311 	mls	r3, r2, r1, r3
 80152ec:	5cc3      	ldrb	r3, [r0, r3]
 80152ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80152f2:	460b      	mov	r3, r1
 80152f4:	2900      	cmp	r1, #0
 80152f6:	d1f5      	bne.n	80152e4 <_printf_i+0x16c>
 80152f8:	e7b9      	b.n	801526e <_printf_i+0xf6>
 80152fa:	6813      	ldr	r3, [r2, #0]
 80152fc:	6825      	ldr	r5, [r4, #0]
 80152fe:	6961      	ldr	r1, [r4, #20]
 8015300:	1d18      	adds	r0, r3, #4
 8015302:	6010      	str	r0, [r2, #0]
 8015304:	0628      	lsls	r0, r5, #24
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	d501      	bpl.n	801530e <_printf_i+0x196>
 801530a:	6019      	str	r1, [r3, #0]
 801530c:	e002      	b.n	8015314 <_printf_i+0x19c>
 801530e:	066a      	lsls	r2, r5, #25
 8015310:	d5fb      	bpl.n	801530a <_printf_i+0x192>
 8015312:	8019      	strh	r1, [r3, #0]
 8015314:	2300      	movs	r3, #0
 8015316:	6123      	str	r3, [r4, #16]
 8015318:	4665      	mov	r5, ip
 801531a:	e7b9      	b.n	8015290 <_printf_i+0x118>
 801531c:	6813      	ldr	r3, [r2, #0]
 801531e:	1d19      	adds	r1, r3, #4
 8015320:	6011      	str	r1, [r2, #0]
 8015322:	681d      	ldr	r5, [r3, #0]
 8015324:	6862      	ldr	r2, [r4, #4]
 8015326:	2100      	movs	r1, #0
 8015328:	4628      	mov	r0, r5
 801532a:	f7ea ff59 	bl	80001e0 <memchr>
 801532e:	b108      	cbz	r0, 8015334 <_printf_i+0x1bc>
 8015330:	1b40      	subs	r0, r0, r5
 8015332:	6060      	str	r0, [r4, #4]
 8015334:	6863      	ldr	r3, [r4, #4]
 8015336:	6123      	str	r3, [r4, #16]
 8015338:	2300      	movs	r3, #0
 801533a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801533e:	e7a7      	b.n	8015290 <_printf_i+0x118>
 8015340:	6923      	ldr	r3, [r4, #16]
 8015342:	462a      	mov	r2, r5
 8015344:	4639      	mov	r1, r7
 8015346:	4630      	mov	r0, r6
 8015348:	47c0      	blx	r8
 801534a:	3001      	adds	r0, #1
 801534c:	d0aa      	beq.n	80152a4 <_printf_i+0x12c>
 801534e:	6823      	ldr	r3, [r4, #0]
 8015350:	079b      	lsls	r3, r3, #30
 8015352:	d413      	bmi.n	801537c <_printf_i+0x204>
 8015354:	68e0      	ldr	r0, [r4, #12]
 8015356:	9b03      	ldr	r3, [sp, #12]
 8015358:	4298      	cmp	r0, r3
 801535a:	bfb8      	it	lt
 801535c:	4618      	movlt	r0, r3
 801535e:	e7a3      	b.n	80152a8 <_printf_i+0x130>
 8015360:	2301      	movs	r3, #1
 8015362:	464a      	mov	r2, r9
 8015364:	4639      	mov	r1, r7
 8015366:	4630      	mov	r0, r6
 8015368:	47c0      	blx	r8
 801536a:	3001      	adds	r0, #1
 801536c:	d09a      	beq.n	80152a4 <_printf_i+0x12c>
 801536e:	3501      	adds	r5, #1
 8015370:	68e3      	ldr	r3, [r4, #12]
 8015372:	9a03      	ldr	r2, [sp, #12]
 8015374:	1a9b      	subs	r3, r3, r2
 8015376:	42ab      	cmp	r3, r5
 8015378:	dcf2      	bgt.n	8015360 <_printf_i+0x1e8>
 801537a:	e7eb      	b.n	8015354 <_printf_i+0x1dc>
 801537c:	2500      	movs	r5, #0
 801537e:	f104 0919 	add.w	r9, r4, #25
 8015382:	e7f5      	b.n	8015370 <_printf_i+0x1f8>
 8015384:	2b00      	cmp	r3, #0
 8015386:	d1ac      	bne.n	80152e2 <_printf_i+0x16a>
 8015388:	7803      	ldrb	r3, [r0, #0]
 801538a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801538e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015392:	e76c      	b.n	801526e <_printf_i+0xf6>
 8015394:	08018949 	.word	0x08018949
 8015398:	0801895a 	.word	0x0801895a

0801539c <_sbrk_r>:
 801539c:	b538      	push	{r3, r4, r5, lr}
 801539e:	4c06      	ldr	r4, [pc, #24]	; (80153b8 <_sbrk_r+0x1c>)
 80153a0:	2300      	movs	r3, #0
 80153a2:	4605      	mov	r5, r0
 80153a4:	4608      	mov	r0, r1
 80153a6:	6023      	str	r3, [r4, #0]
 80153a8:	f7eb fc3a 	bl	8000c20 <_sbrk>
 80153ac:	1c43      	adds	r3, r0, #1
 80153ae:	d102      	bne.n	80153b6 <_sbrk_r+0x1a>
 80153b0:	6823      	ldr	r3, [r4, #0]
 80153b2:	b103      	cbz	r3, 80153b6 <_sbrk_r+0x1a>
 80153b4:	602b      	str	r3, [r5, #0]
 80153b6:	bd38      	pop	{r3, r4, r5, pc}
 80153b8:	20009050 	.word	0x20009050

080153bc <__sread>:
 80153bc:	b510      	push	{r4, lr}
 80153be:	460c      	mov	r4, r1
 80153c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153c4:	f000 f896 	bl	80154f4 <_read_r>
 80153c8:	2800      	cmp	r0, #0
 80153ca:	bfab      	itete	ge
 80153cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80153ce:	89a3      	ldrhlt	r3, [r4, #12]
 80153d0:	181b      	addge	r3, r3, r0
 80153d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80153d6:	bfac      	ite	ge
 80153d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80153da:	81a3      	strhlt	r3, [r4, #12]
 80153dc:	bd10      	pop	{r4, pc}

080153de <__swrite>:
 80153de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153e2:	461f      	mov	r7, r3
 80153e4:	898b      	ldrh	r3, [r1, #12]
 80153e6:	05db      	lsls	r3, r3, #23
 80153e8:	4605      	mov	r5, r0
 80153ea:	460c      	mov	r4, r1
 80153ec:	4616      	mov	r6, r2
 80153ee:	d505      	bpl.n	80153fc <__swrite+0x1e>
 80153f0:	2302      	movs	r3, #2
 80153f2:	2200      	movs	r2, #0
 80153f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153f8:	f000 f868 	bl	80154cc <_lseek_r>
 80153fc:	89a3      	ldrh	r3, [r4, #12]
 80153fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015406:	81a3      	strh	r3, [r4, #12]
 8015408:	4632      	mov	r2, r6
 801540a:	463b      	mov	r3, r7
 801540c:	4628      	mov	r0, r5
 801540e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015412:	f000 b817 	b.w	8015444 <_write_r>

08015416 <__sseek>:
 8015416:	b510      	push	{r4, lr}
 8015418:	460c      	mov	r4, r1
 801541a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801541e:	f000 f855 	bl	80154cc <_lseek_r>
 8015422:	1c43      	adds	r3, r0, #1
 8015424:	89a3      	ldrh	r3, [r4, #12]
 8015426:	bf15      	itete	ne
 8015428:	6560      	strne	r0, [r4, #84]	; 0x54
 801542a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801542e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015432:	81a3      	strheq	r3, [r4, #12]
 8015434:	bf18      	it	ne
 8015436:	81a3      	strhne	r3, [r4, #12]
 8015438:	bd10      	pop	{r4, pc}

0801543a <__sclose>:
 801543a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801543e:	f000 b813 	b.w	8015468 <_close_r>
	...

08015444 <_write_r>:
 8015444:	b538      	push	{r3, r4, r5, lr}
 8015446:	4c07      	ldr	r4, [pc, #28]	; (8015464 <_write_r+0x20>)
 8015448:	4605      	mov	r5, r0
 801544a:	4608      	mov	r0, r1
 801544c:	4611      	mov	r1, r2
 801544e:	2200      	movs	r2, #0
 8015450:	6022      	str	r2, [r4, #0]
 8015452:	461a      	mov	r2, r3
 8015454:	f7eb fbca 	bl	8000bec <_write>
 8015458:	1c43      	adds	r3, r0, #1
 801545a:	d102      	bne.n	8015462 <_write_r+0x1e>
 801545c:	6823      	ldr	r3, [r4, #0]
 801545e:	b103      	cbz	r3, 8015462 <_write_r+0x1e>
 8015460:	602b      	str	r3, [r5, #0]
 8015462:	bd38      	pop	{r3, r4, r5, pc}
 8015464:	20009050 	.word	0x20009050

08015468 <_close_r>:
 8015468:	b538      	push	{r3, r4, r5, lr}
 801546a:	4c06      	ldr	r4, [pc, #24]	; (8015484 <_close_r+0x1c>)
 801546c:	2300      	movs	r3, #0
 801546e:	4605      	mov	r5, r0
 8015470:	4608      	mov	r0, r1
 8015472:	6023      	str	r3, [r4, #0]
 8015474:	f7eb fbc8 	bl	8000c08 <_close>
 8015478:	1c43      	adds	r3, r0, #1
 801547a:	d102      	bne.n	8015482 <_close_r+0x1a>
 801547c:	6823      	ldr	r3, [r4, #0]
 801547e:	b103      	cbz	r3, 8015482 <_close_r+0x1a>
 8015480:	602b      	str	r3, [r5, #0]
 8015482:	bd38      	pop	{r3, r4, r5, pc}
 8015484:	20009050 	.word	0x20009050

08015488 <_fstat_r>:
 8015488:	b538      	push	{r3, r4, r5, lr}
 801548a:	4c07      	ldr	r4, [pc, #28]	; (80154a8 <_fstat_r+0x20>)
 801548c:	2300      	movs	r3, #0
 801548e:	4605      	mov	r5, r0
 8015490:	4608      	mov	r0, r1
 8015492:	4611      	mov	r1, r2
 8015494:	6023      	str	r3, [r4, #0]
 8015496:	f7eb fbba 	bl	8000c0e <_fstat>
 801549a:	1c43      	adds	r3, r0, #1
 801549c:	d102      	bne.n	80154a4 <_fstat_r+0x1c>
 801549e:	6823      	ldr	r3, [r4, #0]
 80154a0:	b103      	cbz	r3, 80154a4 <_fstat_r+0x1c>
 80154a2:	602b      	str	r3, [r5, #0]
 80154a4:	bd38      	pop	{r3, r4, r5, pc}
 80154a6:	bf00      	nop
 80154a8:	20009050 	.word	0x20009050

080154ac <_isatty_r>:
 80154ac:	b538      	push	{r3, r4, r5, lr}
 80154ae:	4c06      	ldr	r4, [pc, #24]	; (80154c8 <_isatty_r+0x1c>)
 80154b0:	2300      	movs	r3, #0
 80154b2:	4605      	mov	r5, r0
 80154b4:	4608      	mov	r0, r1
 80154b6:	6023      	str	r3, [r4, #0]
 80154b8:	f7eb fbae 	bl	8000c18 <_isatty>
 80154bc:	1c43      	adds	r3, r0, #1
 80154be:	d102      	bne.n	80154c6 <_isatty_r+0x1a>
 80154c0:	6823      	ldr	r3, [r4, #0]
 80154c2:	b103      	cbz	r3, 80154c6 <_isatty_r+0x1a>
 80154c4:	602b      	str	r3, [r5, #0]
 80154c6:	bd38      	pop	{r3, r4, r5, pc}
 80154c8:	20009050 	.word	0x20009050

080154cc <_lseek_r>:
 80154cc:	b538      	push	{r3, r4, r5, lr}
 80154ce:	4c07      	ldr	r4, [pc, #28]	; (80154ec <_lseek_r+0x20>)
 80154d0:	4605      	mov	r5, r0
 80154d2:	4608      	mov	r0, r1
 80154d4:	4611      	mov	r1, r2
 80154d6:	2200      	movs	r2, #0
 80154d8:	6022      	str	r2, [r4, #0]
 80154da:	461a      	mov	r2, r3
 80154dc:	f7eb fb9e 	bl	8000c1c <_lseek>
 80154e0:	1c43      	adds	r3, r0, #1
 80154e2:	d102      	bne.n	80154ea <_lseek_r+0x1e>
 80154e4:	6823      	ldr	r3, [r4, #0]
 80154e6:	b103      	cbz	r3, 80154ea <_lseek_r+0x1e>
 80154e8:	602b      	str	r3, [r5, #0]
 80154ea:	bd38      	pop	{r3, r4, r5, pc}
 80154ec:	20009050 	.word	0x20009050

080154f0 <__malloc_lock>:
 80154f0:	4770      	bx	lr

080154f2 <__malloc_unlock>:
 80154f2:	4770      	bx	lr

080154f4 <_read_r>:
 80154f4:	b538      	push	{r3, r4, r5, lr}
 80154f6:	4c07      	ldr	r4, [pc, #28]	; (8015514 <_read_r+0x20>)
 80154f8:	4605      	mov	r5, r0
 80154fa:	4608      	mov	r0, r1
 80154fc:	4611      	mov	r1, r2
 80154fe:	2200      	movs	r2, #0
 8015500:	6022      	str	r2, [r4, #0]
 8015502:	461a      	mov	r2, r3
 8015504:	f7eb fb64 	bl	8000bd0 <_read>
 8015508:	1c43      	adds	r3, r0, #1
 801550a:	d102      	bne.n	8015512 <_read_r+0x1e>
 801550c:	6823      	ldr	r3, [r4, #0]
 801550e:	b103      	cbz	r3, 8015512 <_read_r+0x1e>
 8015510:	602b      	str	r3, [r5, #0]
 8015512:	bd38      	pop	{r3, r4, r5, pc}
 8015514:	20009050 	.word	0x20009050

08015518 <_init>:
 8015518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801551a:	bf00      	nop
 801551c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801551e:	bc08      	pop	{r3}
 8015520:	469e      	mov	lr, r3
 8015522:	4770      	bx	lr

08015524 <_fini>:
 8015524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015526:	bf00      	nop
 8015528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801552a:	bc08      	pop	{r3}
 801552c:	469e      	mov	lr, r3
 801552e:	4770      	bx	lr
