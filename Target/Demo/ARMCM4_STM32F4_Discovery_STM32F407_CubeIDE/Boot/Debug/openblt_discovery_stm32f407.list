
openblt_discovery_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015b28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003288  08015cb8  08015cb8  00025cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018f40  08018f40  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08018f40  08018f40  00028f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018f48  08018f48  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018f48  08018f48  00028f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018f4c  08018f4c  00028f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08018f50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000088bc  200001f0  08019140  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20008aac  08019140  00038aac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000594a8  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000a556  00000000  00000000  000896c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002298  00000000  00000000  00093c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002838  00000000  00000000  00095eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036fc3  00000000  00000000  000986f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00032b89  00000000  00000000  000cf6b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f9437  00000000  00000000  0010223c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001fb673  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c2c  00000000  00000000  001fb6f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0002354a  00000000  00000000  0020231c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015ca0 	.word	0x08015ca0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08015ca0 	.word	0x08015ca0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <AppInit>:
**            software program initialization.
** \return    none.
**
****************************************************************************************/
void AppInit(void)
{
 8000580:	b508      	push	{r3, lr}
  /* initialize the bootloader */
  BootInit();
 8000582:	f003 ff75 	bl	8004470 <BootInit>
} /*** end of AppInit ***/
 8000586:	bd08      	pop	{r3, pc}

08000588 <AppTask>:
**            in the program loop.
** \return    none.
**
****************************************************************************************/
void AppTask(void)
{
 8000588:	b508      	push	{r3, lr}
  /* Run the bootloader task. */
  BootTask();
 800058a:	f003 ff81 	bl	8004490 <BootTask>
} /*** end of AppTask ***/
 800058e:	bd08      	pop	{r3, pc}

08000590 <CpuUserProgramStartHook>:
** \return    BLT_TRUE if it is okay to start the user program, BLT_FALSE to keep
**            keep the bootloader active.
**
****************************************************************************************/
blt_bool CpuUserProgramStartHook(void)
{
 8000590:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <CpuUserProgramStartHook+0x18>)
 8000594:	691b      	ldr	r3, [r3, #16]
  /* additional and optional backdoor entry through the pushbutton on the board. to
   * force the bootloader to stay active after reset, keep it pressed during reset.
   */
  if (LL_GPIO_IsInputPinSet(GPIOA, LL_GPIO_PIN_0) != 0)
 8000596:	f013 0f01 	tst.w	r3, #1
 800059a:	d001      	beq.n	80005a0 <CpuUserProgramStartHook+0x10>
  {
    /* pushbutton pressed, so do not start the user program and keep the
     * bootloader active instead.
     */
    return BLT_FALSE;
 800059c:	2000      	movs	r0, #0
  /* clean up the LED driver */
  LedBlinkExit();

  /* okay to start the user program */
  return BLT_TRUE;
} /*** end of CpuUserProgramStartHook ***/
 800059e:	bd08      	pop	{r3, pc}
  LedBlinkExit();
 80005a0:	f000 f8e8 	bl	8000774 <LedBlinkExit>
  return BLT_TRUE;
 80005a4:	2001      	movs	r0, #1
 80005a6:	e7fa      	b.n	800059e <CpuUserProgramStartHook+0xe>
 80005a8:	40020000 	.word	0x40020000

080005ac <CopInitHook>:
**            watchdog.
** \return    none.
**
****************************************************************************************/
void CopInitHook(void)
{
 80005ac:	b508      	push	{r3, lr}
  /* this function is called upon initialization. might as well use it to initialize
   * the LED driver. It is kind of a visual watchdog anyways.
   */
  LedBlinkInit(100);
 80005ae:	2064      	movs	r0, #100	; 0x64
 80005b0:	f000 f8ac 	bl	800070c <LedBlinkInit>
} /*** end of CopInitHook ***/
 80005b4:	bd08      	pop	{r3, pc}

080005b6 <CopServiceHook>:
**            the watchdog to prevent a watchdog reset.
** \return    none.
**
****************************************************************************************/
void CopServiceHook(void)
{
 80005b6:	b508      	push	{r3, lr}
  /* run the LED blink task. this is a better place to do it than in the main() program
   * loop. certain operations such as flash erase can take a long time, which would cause
   * a blink interval to be skipped. this function is also called during such operations,
   * so no blink intervals will be skipped when calling the LED blink task here.
   */
  LedBlinkTask();
 80005b8:	f000 f8ae 	bl	8000718 <LedBlinkTask>
} /*** end of CopServiceHook ***/
 80005bc:	bd08      	pop	{r3, pc}
	...

080005c0 <FileIsFirmwareUpdateRequestedHook>:
**            storage, etc.
** \return    BLT_TRUE if a firmware update is requested, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool FileIsFirmwareUpdateRequestedHook(void)
{
 80005c0:	b500      	push	{lr}
 80005c2:	b0c7      	sub	sp, #284	; 0x11c
  FILINFO fileInfoObject = { 0 }; /* needs to be zeroed according to f_stat docs */;
 80005c4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80005c8:	2100      	movs	r1, #0
 80005ca:	4668      	mov	r0, sp
 80005cc:	f014 fc31 	bl	8014e32 <memset>
   * update is started. When successfully completed, the firmware file is deleted.
   * During the firmware update, progress information is written to a file called
   * bootlog.txt and additionally outputted on UART @57600 bps for debugging purposes.
   */
  /* check if firmware file is present and SD-card is accessible */
  if (f_stat(firmwareFilename, &fileInfoObject) == FR_OK) 
 80005d0:	4669      	mov	r1, sp
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <FileIsFirmwareUpdateRequestedHook+0x38>)
 80005d4:	f006 fcb8 	bl	8006f48 <f_stat>
 80005d8:	b940      	cbnz	r0, 80005ec <FileIsFirmwareUpdateRequestedHook+0x2c>
  {
    /* check if the filesize is valid and that it is not a directory */
    if ( (fileInfoObject.fsize > 0) && (!(fileInfoObject.fattrib & AM_DIR)) )
 80005da:	9b00      	ldr	r3, [sp, #0]
 80005dc:	b153      	cbz	r3, 80005f4 <FileIsFirmwareUpdateRequestedHook+0x34>
 80005de:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80005e2:	f013 0f10 	tst.w	r3, #16
 80005e6:	d102      	bne.n	80005ee <FileIsFirmwareUpdateRequestedHook+0x2e>
    {
      /* all conditions are met to start a firmware update from local file storage */
      return BLT_TRUE;
 80005e8:	2001      	movs	r0, #1
 80005ea:	e000      	b.n	80005ee <FileIsFirmwareUpdateRequestedHook+0x2e>
    }
  }
  /* still here so no firmware update request is pending */  
  return BLT_FALSE;
 80005ec:	2000      	movs	r0, #0
} /*** end of FileIsFirmwareUpdateRequestedHook ***/
 80005ee:	b047      	add	sp, #284	; 0x11c
 80005f0:	f85d fb04 	ldr.w	pc, [sp], #4
  return BLT_FALSE;
 80005f4:	2000      	movs	r0, #0
 80005f6:	e7fa      	b.n	80005ee <FileIsFirmwareUpdateRequestedHook+0x2e>
 80005f8:	08015cc8 	.word	0x08015cc8

080005fc <FileGetFirmwareFilenameHook>:
**
****************************************************************************************/
const blt_char *FileGetFirmwareFilenameHook(void)
{
  return firmwareFilename;
} /*** end of FileGetFirmwareFilenameHook ***/
 80005fc:	4800      	ldr	r0, [pc, #0]	; (8000600 <FileGetFirmwareFilenameHook+0x4>)
 80005fe:	4770      	bx	lr
 8000600:	08015cc8 	.word	0x08015cc8

08000604 <FileFirmwareUpdateStartedHook>:
**            update from local storage just started. 
** \return    none.
**
****************************************************************************************/
void FileFirmwareUpdateStartedHook(void)
{
 8000604:	b508      	push	{r3, lr}
  #if (BOOT_FILE_LOGGING_ENABLE > 0)
  /* create/overwrite the logfile */
  logfile.canUse = BLT_FALSE;
 8000606:	4807      	ldr	r0, [pc, #28]	; (8000624 <FileFirmwareUpdateStartedHook+0x20>)
 8000608:	2300      	movs	r3, #0
 800060a:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  if (f_open(&logfile.handle, "/bootlog.txt", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800060e:	220a      	movs	r2, #10
 8000610:	4905      	ldr	r1, [pc, #20]	; (8000628 <FileFirmwareUpdateStartedHook+0x24>)
 8000612:	f006 f8ff 	bl	8006814 <f_open>
 8000616:	b918      	cbnz	r0, 8000620 <FileFirmwareUpdateStartedHook+0x1c>
  {
    logfile.canUse = BLT_TRUE;
 8000618:	4b02      	ldr	r3, [pc, #8]	; (8000624 <FileFirmwareUpdateStartedHook+0x20>)
 800061a:	2201      	movs	r2, #1
 800061c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  }
  #endif
} /*** end of FileFirmwareUpdateStartedHook ***/
 8000620:	bd08      	pop	{r3, pc}
 8000622:	bf00      	nop
 8000624:	2000020c 	.word	0x2000020c
 8000628:	08015cb8 	.word	0x08015cb8

0800062c <FileFirmwareUpdateCompletedHook>:
**            update was successfully completed.
** \return    none.
**
****************************************************************************************/
void FileFirmwareUpdateCompletedHook(void)
{
 800062c:	b510      	push	{r4, lr}
  #if (BOOT_FILE_LOGGING_ENABLE > 0)
  blt_int32u timeoutTime;

  /* close the log file */
  if (logfile.canUse == BLT_TRUE)
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <FileFirmwareUpdateCompletedHook+0x38>)
 8000630:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000634:	2b01      	cmp	r3, #1
 8000636:	d010      	beq.n	800065a <FileFirmwareUpdateCompletedHook+0x2e>
    f_close(&logfile.handle);
  }
  /* wait for all logging related transmission to complete with a maximum wait time of
   * 100ms.
   */
  timeoutTime = TimerGet() + 100;
 8000638:	f003 fec6 	bl	80043c8 <TimerGet>
 800063c:	f100 0464 	add.w	r4, r0, #100	; 0x64
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <FileFirmwareUpdateCompletedHook+0x3c>)
 8000642:	681b      	ldr	r3, [r3, #0]
  while (LL_USART_IsActiveFlag_TC(USART6) == 0)
 8000644:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000648:	d103      	bne.n	8000652 <FileFirmwareUpdateCompletedHook+0x26>
  {
    /* check for timeout */
    if (TimerGet() > timeoutTime)
 800064a:	f003 febd 	bl	80043c8 <TimerGet>
 800064e:	42a0      	cmp	r0, r4
 8000650:	d9f6      	bls.n	8000640 <FileFirmwareUpdateCompletedHook+0x14>
      break;
    }
  }
  #endif
  /* now delete the firmware file from the disk since the update was successful */
  f_unlink(firmwareFilename);
 8000652:	4806      	ldr	r0, [pc, #24]	; (800066c <FileFirmwareUpdateCompletedHook+0x40>)
 8000654:	f006 fca2 	bl	8006f9c <f_unlink>
} /*** end of FileFirmwareUpdateCompletedHook ***/
 8000658:	bd10      	pop	{r4, pc}
    f_close(&logfile.handle);
 800065a:	4802      	ldr	r0, [pc, #8]	; (8000664 <FileFirmwareUpdateCompletedHook+0x38>)
 800065c:	f006 fba6 	bl	8006dac <f_close>
 8000660:	e7ea      	b.n	8000638 <FileFirmwareUpdateCompletedHook+0xc>
 8000662:	bf00      	nop
 8000664:	2000020c 	.word	0x2000020c
 8000668:	40011400 	.word	0x40011400
 800066c:	08015cc8 	.word	0x08015cc8

08000670 <FileFirmwareUpdateErrorHook>:
**            update. Refer to <file.h> for a list of available error codes.
** \return    none.
**
****************************************************************************************/
void FileFirmwareUpdateErrorHook(blt_int8u error_code)
{
 8000670:	b508      	push	{r3, lr}
  #if (BOOT_FILE_LOGGING_ENABLE > 0)
  /* error detected which stops the firmware update, so close the log file */
  if (logfile.canUse == BLT_TRUE)
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <FileFirmwareUpdateErrorHook+0x18>)
 8000674:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000678:	2b01      	cmp	r3, #1
 800067a:	d000      	beq.n	800067e <FileFirmwareUpdateErrorHook+0xe>
  {
    f_close(&logfile.handle);
  }
  #endif
} /*** end of FileFirmwareUpdateErrorHook ***/
 800067c:	bd08      	pop	{r3, pc}
    f_close(&logfile.handle);
 800067e:	4802      	ldr	r0, [pc, #8]	; (8000688 <FileFirmwareUpdateErrorHook+0x18>)
 8000680:	f006 fb94 	bl	8006dac <f_close>
} /*** end of FileFirmwareUpdateErrorHook ***/
 8000684:	e7fa      	b.n	800067c <FileFirmwareUpdateErrorHook+0xc>
 8000686:	bf00      	nop
 8000688:	2000020c 	.word	0x2000020c

0800068c <FileFirmwareUpdateLogHook>:
** \param     info_string Pointer to a character array with the log entry info.
** \return    none.
**
****************************************************************************************/
void FileFirmwareUpdateLogHook(blt_char *info_string)
{
 800068c:	b538      	push	{r3, r4, r5, lr}
 800068e:	4605      	mov	r5, r0
  blt_int32u timeoutTime;

  /* write the string to the log file */
  if (logfile.canUse == BLT_TRUE)
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <FileFirmwareUpdateLogHook+0x54>)
 8000692:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000696:	2b01      	cmp	r3, #1
 8000698:	d10c      	bne.n	80006b4 <FileFirmwareUpdateLogHook+0x28>
  {
    if (f_puts(info_string, &logfile.handle) < 0)
 800069a:	4911      	ldr	r1, [pc, #68]	; (80006e0 <FileFirmwareUpdateLogHook+0x54>)
 800069c:	f006 fd06 	bl	80070ac <f_puts>
 80006a0:	2800      	cmp	r0, #0
 80006a2:	da07      	bge.n	80006b4 <FileFirmwareUpdateLogHook+0x28>
    {
      logfile.canUse = BLT_FALSE;
 80006a4:	480e      	ldr	r0, [pc, #56]	; (80006e0 <FileFirmwareUpdateLogHook+0x54>)
 80006a6:	2300      	movs	r3, #0
 80006a8:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
      f_close(&logfile.handle);
 80006ac:	f006 fb7e 	bl	8006dac <f_close>
 80006b0:	e000      	b.n	80006b4 <FileFirmwareUpdateLogHook+0x28>
      {
        break;
      }
    }
    /* point to the next character in the string */
    info_string++;
 80006b2:	3501      	adds	r5, #1
  while(*info_string != '\0')
 80006b4:	782b      	ldrb	r3, [r5, #0]
 80006b6:	b18b      	cbz	r3, 80006dc <FileFirmwareUpdateLogHook+0x50>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 80006b8:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <FileFirmwareUpdateLogHook+0x58>)
 80006ba:	6053      	str	r3, [r2, #4]
    timeoutTime = TimerGet() + 10;
 80006bc:	f003 fe84 	bl	80043c8 <TimerGet>
 80006c0:	f100 040a 	add.w	r4, r0, #10
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <FileFirmwareUpdateLogHook+0x58>)
 80006c6:	681b      	ldr	r3, [r3, #0]
    while (LL_USART_IsActiveFlag_TXE(USART6) == 0)
 80006c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80006cc:	d1f1      	bne.n	80006b2 <FileFirmwareUpdateLogHook+0x26>
      CopService();
 80006ce:	f003 ff67 	bl	80045a0 <CopService>
      if (TimerGet() > timeoutTime)
 80006d2:	f003 fe79 	bl	80043c8 <TimerGet>
 80006d6:	42a0      	cmp	r0, r4
 80006d8:	d9f4      	bls.n	80006c4 <FileFirmwareUpdateLogHook+0x38>
 80006da:	e7ea      	b.n	80006b2 <FileFirmwareUpdateLogHook+0x26>
  }
} /*** end of FileFirmwareUpdateLogHook ***/
 80006dc:	bd38      	pop	{r3, r4, r5, pc}
 80006de:	bf00      	nop
 80006e0:	2000020c 	.word	0x2000020c
 80006e4:	40011400 	.word	0x40011400

080006e8 <XcpGetSeedHook>:
**
****************************************************************************************/
blt_int8u XcpGetSeedHook(blt_int8u resource, blt_int8u *seed)
{
  /* request seed for unlocking ProGraMming resource */
  if ((resource & XCP_RES_PGM) != 0)
 80006e8:	f010 0f10 	tst.w	r0, #16
 80006ec:	d001      	beq.n	80006f2 <XcpGetSeedHook+0xa>
  {
    seed[0] = 0x55;
 80006ee:	2355      	movs	r3, #85	; 0x55
 80006f0:	700b      	strb	r3, [r1, #0]
  }

  /* return seed length */
  return 1;
} /*** end of XcpGetSeedHook ***/
 80006f2:	2001      	movs	r0, #1
 80006f4:	4770      	bx	lr

080006f6 <XcpVerifyKeyHook>:
  /* the example key algorithm in "libseednkey.dll" works as follows:
   *  - PGM will be unlocked if key = seed - 1
   */

  /* check key for unlocking ProGraMming resource */
  if ((resource == XCP_RES_PGM) && (key[0] == (0x55-1)))
 80006f6:	2810      	cmp	r0, #16
 80006f8:	d001      	beq.n	80006fe <XcpVerifyKeyHook+0x8>
    /* correct key received for unlocking PGM resource */
    return 1;
  }

  /* still here so key incorrect */
  return 0;
 80006fa:	2000      	movs	r0, #0
 80006fc:	4770      	bx	lr
  if ((resource == XCP_RES_PGM) && (key[0] == (0x55-1)))
 80006fe:	780b      	ldrb	r3, [r1, #0]
 8000700:	2b54      	cmp	r3, #84	; 0x54
 8000702:	d001      	beq.n	8000708 <XcpVerifyKeyHook+0x12>
  return 0;
 8000704:	2000      	movs	r0, #0
 8000706:	4770      	bx	lr
    return 1;
 8000708:	2001      	movs	r0, #1
} /*** end of XcpVerifyKeyHook ***/
 800070a:	4770      	bx	lr

0800070c <LedBlinkInit>:
**
****************************************************************************************/
void LedBlinkInit(blt_int16u interval_ms)
{
  /* store the interval time between LED toggles */
  ledBlinkIntervalMs = interval_ms;
 800070c:	4b01      	ldr	r3, [pc, #4]	; (8000714 <LedBlinkInit+0x8>)
 800070e:	8018      	strh	r0, [r3, #0]
} /*** end of LedBlinkInit ***/
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	20000438 	.word	0x20000438

08000718 <LedBlinkTask>:
** \brief     Task function for blinking the LED as a fixed timer interval.
** \return    none.
**
****************************************************************************************/
void LedBlinkTask(void)
{
 8000718:	b508      	push	{r3, lr}
  static blt_bool ledOn = BLT_FALSE;
  static blt_int32u nextBlinkEvent = 0;

  /* check for blink event */
  if (TimerGet() >= nextBlinkEvent)
 800071a:	f003 fe55 	bl	80043c8 <TimerGet>
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <LedBlinkTask+0x4c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4298      	cmp	r0, r3
 8000724:	d312      	bcc.n	800074c <LedBlinkTask+0x34>
  {
    /* toggle the LED state */
    if (ledOn == BLT_FALSE)
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <LedBlinkTask+0x50>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	b983      	cbnz	r3, 800074e <LedBlinkTask+0x36>
    {
      ledOn = BLT_TRUE;
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <LedBlinkTask+0x50>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
      SET_LED3_ORANGE(RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <LedBlinkTask+0x54>)
 800073a:	f001 fb4f 	bl	8001ddc <HAL_GPIO_WritePin>
    {
      ledOn = BLT_FALSE;
      SET_LED3_ORANGE(SET);
    }
    /* schedule the next blink event */
    nextBlinkEvent = TimerGet() + ledBlinkIntervalMs;
 800073e:	f003 fe43 	bl	80043c8 <TimerGet>
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <LedBlinkTask+0x58>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	4418      	add	r0, r3
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <LedBlinkTask+0x4c>)
 800074a:	6018      	str	r0, [r3, #0]
  }
} /*** end of LedBlinkTask ***/
 800074c:	bd08      	pop	{r3, pc}
      ledOn = BLT_FALSE;
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <LedBlinkTask+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
      SET_LED3_ORANGE(SET);
 8000754:	2201      	movs	r2, #1
 8000756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075a:	4804      	ldr	r0, [pc, #16]	; (800076c <LedBlinkTask+0x54>)
 800075c:	f001 fb3e 	bl	8001ddc <HAL_GPIO_WritePin>
 8000760:	e7ed      	b.n	800073e <LedBlinkTask+0x26>
 8000762:	bf00      	nop
 8000764:	2000043c 	.word	0x2000043c
 8000768:	2000043a 	.word	0x2000043a
 800076c:	40020c00 	.word	0x40020c00
 8000770:	20000438 	.word	0x20000438

08000774 <LedBlinkExit>:
**            exit.
** \return    none.
**
****************************************************************************************/
void LedBlinkExit(void)
{
 8000774:	b508      	push	{r3, lr}
  /* turn the LED off */
  SET_LED3_ORANGE(SET);
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077c:	4801      	ldr	r0, [pc, #4]	; (8000784 <LedBlinkExit+0x10>)
 800077e:	f001 fb2d 	bl	8001ddc <HAL_GPIO_WritePin>
} /*** end of LedBlinkExit ***/
 8000782:	bd08      	pop	{r3, pc}
 8000784:	40020c00 	.word	0x40020c00

08000788 <NetInit>:
/**
 *
 */
void NetInit(void)
{
}
 8000788:	4770      	bx	lr

0800078a <NetTransmitPacket>:
//	struct pbuf buf;
//	buf.payload = data;
//	buf.len = len;
//	gnetif.output(&gnetif, &buf, gnetif. const struct eth_addr * src, const struct eth_addr * dst,
//            u16_t eth_type);
}
 800078a:	4770      	bx	lr

0800078c <NetReceivePacket>:
//	struct netif *n = &gnetif;
//	n->input(p, n);

//	data = buf.payload;
//	*len = buf.len;
}
 800078c:	4770      	bx	lr
	...

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b570      	push	{r4, r5, r6, lr}
 8000792:	b08c      	sub	sp, #48	; 0x30
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	2400      	movs	r4, #0
 8000796:	9408      	str	r4, [sp, #32]
 8000798:	9409      	str	r4, [sp, #36]	; 0x24
 800079a:	940a      	str	r4, [sp, #40]	; 0x28
 800079c:	940b      	str	r4, [sp, #44]	; 0x2c
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800079e:	4b28      	ldr	r3, [pc, #160]	; (8000840 <MX_GPIO_Init+0xb0>)
 80007a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007a2:	f042 0204 	orr.w	r2, r2, #4
 80007a6:	631a      	str	r2, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007aa:	f002 0204 	and.w	r2, r2, #4
 80007ae:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 80007b0:	9a05      	ldr	r2, [sp, #20]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007b8:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007bc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80007c0:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80007c2:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007c6:	f042 0201 	orr.w	r2, r2, #1
 80007ca:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ce:	f002 0201 	and.w	r2, r2, #1
 80007d2:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 80007d4:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d8:	f042 0202 	orr.w	r2, r2, #2
 80007dc:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007e0:	f002 0202 	and.w	r2, r2, #2
 80007e4:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80007e6:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ea:	f042 0208 	orr.w	r2, r2, #8
 80007ee:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80007f8:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80007fa:	4812      	ldr	r0, [pc, #72]	; (8000844 <MX_GPIO_Init+0xb4>)
 80007fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000800:	6183      	str	r3, [r0, #24]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000802:	4e11      	ldr	r6, [pc, #68]	; (8000848 <MX_GPIO_Init+0xb8>)
 8000804:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8000808:	61b2      	str	r2, [r6, #24]

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800080a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800080c:	2501      	movs	r5, #1
 800080e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000810:	a906      	add	r1, sp, #24
 8000812:	f002 f94d 	bl	8002ab0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000816:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000818:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800081a:	940a      	str	r4, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	a906      	add	r1, sp, #24
 800081e:	480b      	ldr	r0, [pc, #44]	; (800084c <MX_GPIO_Init+0xbc>)
 8000820:	f002 f946 	bl	8002ab0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8000824:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000828:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800082a:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800082c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800082e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000830:	940a      	str	r4, [sp, #40]	; 0x28
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000832:	a906      	add	r1, sp, #24
 8000834:	4630      	mov	r0, r6
 8000836:	f002 f93b 	bl	8002ab0 <LL_GPIO_Init>

}
 800083a:	b00c      	add	sp, #48	; 0x30
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40020800 	.word	0x40020800
 8000848:	40020c00 	.word	0x40020c00
 800084c:	40020000 	.word	0x40020000

08000850 <MX_USART6_UART_Init>:
{
 8000850:	b510      	push	{r4, lr}
 8000852:	b090      	sub	sp, #64	; 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000854:	2400      	movs	r4, #0
 8000856:	9409      	str	r4, [sp, #36]	; 0x24
 8000858:	940a      	str	r4, [sp, #40]	; 0x28
 800085a:	940b      	str	r4, [sp, #44]	; 0x2c
 800085c:	940c      	str	r4, [sp, #48]	; 0x30
 800085e:	940d      	str	r4, [sp, #52]	; 0x34
 8000860:	940e      	str	r4, [sp, #56]	; 0x38
 8000862:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	9406      	str	r4, [sp, #24]
 8000866:	9407      	str	r4, [sp, #28]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_USART6_UART_Init+0x90>)
 800086a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800086c:	f042 0220 	orr.w	r2, r2, #32
 8000870:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000874:	f002 0220 	and.w	r2, r2, #32
 8000878:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800087a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800087c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800087e:	f042 0204 	orr.w	r2, r2, #4
 8000882:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800088c:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800088e:	23c0      	movs	r3, #192	; 0xc0
 8000890:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000892:	2302      	movs	r3, #2
 8000894:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000896:	2303      	movs	r3, #3
 8000898:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800089a:	2308      	movs	r3, #8
 800089c:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089e:	a903      	add	r1, sp, #12
 80008a0:	4810      	ldr	r0, [pc, #64]	; (80008e4 <MX_USART6_UART_Init+0x94>)
 80008a2:	f002 f905 	bl	8002ab0 <LL_GPIO_Init>
  USART_InitStruct.BaudRate = 115200;
 80008a6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80008aa:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80008ac:	940a      	str	r4, [sp, #40]	; 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80008ae:	940b      	str	r4, [sp, #44]	; 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80008b0:	940c      	str	r4, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80008b2:	230c      	movs	r3, #12
 80008b4:	930d      	str	r3, [sp, #52]	; 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80008b6:	940e      	str	r4, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80008b8:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_USART_Init(USART6, &USART_InitStruct);
 80008ba:	4c0b      	ldr	r4, [pc, #44]	; (80008e8 <MX_USART6_UART_Init+0x98>)
 80008bc:	a909      	add	r1, sp, #36	; 0x24
 80008be:	4620      	mov	r0, r4
 80008c0:	f002 fdde 	bl	8003480 <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80008c4:	6923      	ldr	r3, [r4, #16]
 80008c6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80008ca:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80008cc:	6963      	ldr	r3, [r4, #20]
 80008ce:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80008d2:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80008d4:	68e3      	ldr	r3, [r4, #12]
 80008d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008da:	60e3      	str	r3, [r4, #12]
}
 80008dc:	b010      	add	sp, #64	; 0x40
 80008de:	bd10      	pop	{r4, pc}
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020800 	.word	0x40020800
 80008e8:	40011400 	.word	0x40011400

080008ec <SystemClock_Config>:
{
 80008ec:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80008ee:	4a2e      	ldr	r2, [pc, #184]	; (80009a8 <SystemClock_Config+0xbc>)
 80008f0:	6813      	ldr	r3, [r2, #0]
 80008f2:	f023 030f 	bic.w	r3, r3, #15
 80008f6:	f043 0305 	orr.w	r3, r3, #5
 80008fa:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80008fc:	4b2a      	ldr	r3, [pc, #168]	; (80009a8 <SystemClock_Config+0xbc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f003 030f 	and.w	r3, r3, #15
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000904:	2b05      	cmp	r3, #5
 8000906:	d1f9      	bne.n	80008fc <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000908:	4a28      	ldr	r2, [pc, #160]	; (80009ac <SystemClock_Config+0xc0>)
 800090a:	6813      	ldr	r3, [r2, #0]
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6013      	str	r3, [r2, #0]
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000912:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8000916:	6813      	ldr	r3, [r2, #0]
 8000918:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000920:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000922:	6813      	ldr	r3, [r2, #0]
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <SystemClock_Config+0xc4>)
 800092c:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSI_IsReady() != 1)
 800092e:	f013 0f02 	tst.w	r3, #2
 8000932:	d0fa      	beq.n	800092a <SystemClock_Config+0x3e>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000934:	4a1e      	ldr	r2, [pc, #120]	; (80009b0 <SystemClock_Config+0xc4>)
 8000936:	6851      	ldr	r1, [r2, #4]
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <SystemClock_Config+0xc8>)
 800093a:	400b      	ands	r3, r1
 800093c:	f443 5328 	orr.w	r3, r3, #10752	; 0x2a00
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	6053      	str	r3, [r2, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000946:	6853      	ldr	r3, [r2, #4]
 8000948:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800094c:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800094e:	6813      	ldr	r3, [r2, #0]
 8000950:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000954:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <SystemClock_Config+0xc4>)
 8000958:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 800095a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800095e:	d0fa      	beq.n	8000956 <SystemClock_Config+0x6a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <SystemClock_Config+0xc4>)
 8000962:	689a      	ldr	r2, [r3, #8]
 8000964:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000968:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8000970:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000974:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000976:	689a      	ldr	r2, [r3, #8]
 8000978:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800097c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000980:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000982:	689a      	ldr	r2, [r3, #8]
 8000984:	f022 0203 	bic.w	r2, r2, #3
 8000988:	f042 0202 	orr.w	r2, r2, #2
 800098c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <SystemClock_Config+0xc4>)
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000996:	2b08      	cmp	r3, #8
 8000998:	d1f9      	bne.n	800098e <SystemClock_Config+0xa2>
  LL_SetSystemCoreClock(168000000);
 800099a:	4807      	ldr	r0, [pc, #28]	; (80009b8 <SystemClock_Config+0xcc>)
 800099c:	f002 fe3a 	bl	8003614 <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 f991 	bl	8000cc8 <HAL_InitTick>
}
 80009a6:	bd08      	pop	{r3, pc}
 80009a8:	40023c00 	.word	0x40023c00
 80009ac:	40007000 	.word	0x40007000
 80009b0:	40023800 	.word	0x40023800
 80009b4:	ffbf8000 	.word	0xffbf8000
 80009b8:	0a037a00 	.word	0x0a037a00

080009bc <main>:
{
 80009bc:	b508      	push	{r3, lr}
  HAL_Init();
 80009be:	f000 f9a9 	bl	8000d14 <HAL_Init>
  SystemClock_Config();
 80009c2:	f7ff ff93 	bl	80008ec <SystemClock_Config>
  MX_GPIO_Init();
 80009c6:	f7ff fee3 	bl	8000790 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80009ca:	f7ff ff41 	bl	8000850 <MX_USART6_UART_Init>
  MX_LWIP_Init();
 80009ce:	f002 fe27 	bl	8003620 <MX_LWIP_Init>
  AppInit();
 80009d2:	f7ff fdd5 	bl	8000580 <AppInit>
    MX_LWIP_Process();
 80009d6:	f002 fe6b 	bl	80036b0 <MX_LWIP_Process>
    AppTask();
 80009da:	f7ff fdd5 	bl	8000588 <AppTask>
 80009de:	e7fa      	b.n	80009d6 <main+0x1a>

080009e0 <__io_putchar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80009e8:	f013 0f01 	tst.w	r3, #1
 80009ec:	d011      	beq.n	8000a12 <__io_putchar+0x32>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80009ee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009f2:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009f6:	f013 0f01 	tst.w	r3, #1
 80009fa:	d101      	bne.n	8000a00 <__io_putchar+0x20>
 80009fc:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 80009fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000a00:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0f9      	beq.n	80009fe <__io_putchar+0x1e>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000a0a:	b2c3      	uxtb	r3, r0
 8000a0c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000a10:	7013      	strb	r3, [r2, #0]
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
  ITM_SendChar(ch);
  return(ch);
}
 8000a12:	4770      	bx	lr

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	2100      	movs	r1, #0
 8000a18:	9100      	str	r1, [sp, #0]
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <HAL_MspInit+0x34>)
 8000a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a22:	645a      	str	r2, [r3, #68]	; 0x44
 8000a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a26:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000a2a:	9200      	str	r2, [sp, #0]
 8000a2c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	9101      	str	r1, [sp, #4]
 8000a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a36:	641a      	str	r2, [r3, #64]	; 0x40
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	9301      	str	r3, [sp, #4]
 8000a40:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	b002      	add	sp, #8
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a4e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	2300      	movs	r3, #0
 8000a52:	9303      	str	r3, [sp, #12]
 8000a54:	9304      	str	r3, [sp, #16]
 8000a56:	9305      	str	r3, [sp, #20]
 8000a58:	9306      	str	r3, [sp, #24]
 8000a5a:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDIO)
 8000a5c:	6802      	ldr	r2, [r0, #0]
 8000a5e:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <HAL_SD_MspInit+0x94>)
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d001      	beq.n	8000a68 <HAL_SD_MspInit+0x1c>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000a64:	b009      	add	sp, #36	; 0x24
 8000a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000a68:	2400      	movs	r4, #0
 8000a6a:	9400      	str	r4, [sp, #0]
 8000a6c:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8000a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a76:	645a      	str	r2, [r3, #68]	; 0x44
 8000a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a7a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8000a7e:	9200      	str	r2, [sp, #0]
 8000a80:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	9401      	str	r4, [sp, #4]
 8000a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a86:	f042 0204 	orr.w	r2, r2, #4
 8000a8a:	631a      	str	r2, [r3, #48]	; 0x30
 8000a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a8e:	f002 0204 	and.w	r2, r2, #4
 8000a92:	9201      	str	r2, [sp, #4]
 8000a94:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a96:	9402      	str	r4, [sp, #8]
 8000a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a9a:	f042 0208 	orr.w	r2, r2, #8
 8000a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	9302      	str	r3, [sp, #8]
 8000aa8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000aaa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000aae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2702      	movs	r7, #2
 8000ab2:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2603      	movs	r6, #3
 8000ab6:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ab8:	250c      	movs	r5, #12
 8000aba:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000abc:	eb0d 0105 	add.w	r1, sp, r5
 8000ac0:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <HAL_SD_MspInit+0x98>)
 8000ac2:	f001 f8a7 	bl	8001c14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ad0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad2:	eb0d 0105 	add.w	r1, sp, r5
 8000ad6:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <HAL_SD_MspInit+0x9c>)
 8000ad8:	f001 f89c 	bl	8001c14 <HAL_GPIO_Init>
}
 8000adc:	e7c2      	b.n	8000a64 <HAL_SD_MspInit+0x18>
 8000ade:	bf00      	nop
 8000ae0:	40012c00 	.word	0x40012c00
 8000ae4:	40020800 	.word	0x40020800
 8000ae8:	40020c00 	.word	0x40020c00

08000aec <HAL_MspDeInit>:
/* USER CODE BEGIN 1 */
/**
  * De-Initializes the Global MSP.
  */
void HAL_MspDeInit(void)
{
 8000aec:	b508      	push	{r3, lr}
  /* Reset the RCC clock configuration to the default reset state. */
  LL_RCC_DeInit();
 8000aee:	f002 f875 	bl	8002bdc <LL_RCC_DeInit>

  /* Deinit used GPIOs. */
  LL_GPIO_DeInit(GPIOD);
 8000af2:	481b      	ldr	r0, [pc, #108]	; (8000b60 <HAL_MspDeInit+0x74>)
 8000af4:	f001 ff40 	bl	8002978 <LL_GPIO_DeInit>
  LL_GPIO_DeInit(GPIOC);
 8000af8:	481a      	ldr	r0, [pc, #104]	; (8000b64 <HAL_MspDeInit+0x78>)
 8000afa:	f001 ff3d 	bl	8002978 <LL_GPIO_DeInit>
  LL_GPIO_DeInit(GPIOB);
 8000afe:	481a      	ldr	r0, [pc, #104]	; (8000b68 <HAL_MspDeInit+0x7c>)
 8000b00:	f001 ff3a 	bl	8002978 <LL_GPIO_DeInit>
  LL_GPIO_DeInit(GPIOA);
 8000b04:	4819      	ldr	r0, [pc, #100]	; (8000b6c <HAL_MspDeInit+0x80>)
 8000b06:	f001 ff37 	bl	8002978 <LL_GPIO_DeInit>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000b0a:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <HAL_MspDeInit+0x84>)
 8000b0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b12:	645a      	str	r2, [r3, #68]	; 0x44
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8000b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b16:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8000b1a:	641a      	str	r2, [r3, #64]	; 0x40
 8000b1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b1e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8000b22:	641a      	str	r2, [r3, #64]	; 0x40
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8000b24:	4913      	ldr	r1, [pc, #76]	; (8000b74 <HAL_MspDeInit+0x88>)
 8000b26:	68ca      	ldr	r2, [r1, #12]
 8000b28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000b2c:	60ca      	str	r2, [r1, #12]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000b2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b30:	f022 0220 	bic.w	r2, r2, #32
 8000b34:	645a      	str	r2, [r3, #68]	; 0x44
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8000b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b38:	f022 0204 	bic.w	r2, r2, #4
 8000b3c:	631a      	str	r2, [r3, #48]	; 0x30
 8000b3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b40:	f022 0202 	bic.w	r2, r2, #2
 8000b44:	631a      	str	r2, [r3, #48]	; 0x30
 8000b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b48:	f022 0201 	bic.w	r2, r2, #1
 8000b4c:	631a      	str	r2, [r3, #48]	; 0x30
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8000b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b50:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8000b54:	641a      	str	r2, [r3, #64]	; 0x40
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000b56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000b5c:	645a      	str	r2, [r3, #68]	; 0x44
  LL_AHB1_GRP1_DisableClock(LL_AHB1_GRP1_PERIPH_GPIOA);

  /* SYSCFG and PWR clock disable. */
  LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_PWR);
  LL_APB2_GRP1_DisableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
}
 8000b5e:	bd08      	pop	{r3, pc}
 8000b60:	40020c00 	.word	0x40020c00
 8000b64:	40020800 	.word	0x40020800
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40011400 	.word	0x40011400

08000b78 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b78:	4770      	bx	lr

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler>

08000b82 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	4770      	bx	lr

08000b84 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b84:	4770      	bx	lr

08000b86 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8a:	f000 f8dd 	bl	8000d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8e:	bd08      	pop	{r3, pc}

08000b90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b90:	b570      	push	{r4, r5, r6, lr}
 8000b92:	460d      	mov	r5, r1
 8000b94:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b96:	2400      	movs	r4, #0
 8000b98:	e004      	b.n	8000ba4 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 8000b9a:	f3af 8000 	nop.w
 8000b9e:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba0:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8000ba2:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba4:	42b4      	cmp	r4, r6
 8000ba6:	dbf8      	blt.n	8000b9a <_read+0xa>
	}

return len;
}
 8000ba8:	4630      	mov	r0, r6
 8000baa:	bd70      	pop	{r4, r5, r6, pc}

08000bac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb0:	2400      	movs	r4, #0
 8000bb2:	e005      	b.n	8000bc0 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8000bb4:	1c4d      	adds	r5, r1, #1
 8000bb6:	7808      	ldrb	r0, [r1, #0]
 8000bb8:	f7ff ff12 	bl	80009e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbc:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8000bbe:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc0:	42b4      	cmp	r4, r6
 8000bc2:	dbf7      	blt.n	8000bb4 <_write+0x8>
	}
	return len;
}
 8000bc4:	4630      	mov	r0, r6
 8000bc6:	bd70      	pop	{r4, r5, r6, pc}

08000bc8 <_close>:

int _close(int file)
{
	return -1;
}
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	4770      	bx	lr

08000bce <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd2:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000bd8:	2001      	movs	r0, #1
 8000bda:	4770      	bx	lr

08000bdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000bdc:	2000      	movs	r0, #0
 8000bde:	4770      	bx	lr

08000be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be0:	b410      	push	{r4}
 8000be2:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be4:	4a0c      	ldr	r2, [pc, #48]	; (8000c18 <_sbrk+0x38>)
 8000be6:	490d      	ldr	r1, [pc, #52]	; (8000c1c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <_sbrk+0x40>)
 8000bea:	6800      	ldr	r0, [r0, #0]
 8000bec:	b150      	cbz	r0, 8000c04 <_sbrk+0x24>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	480c      	ldr	r0, [pc, #48]	; (8000c20 <_sbrk+0x40>)
 8000bf0:	6800      	ldr	r0, [r0, #0]
 8000bf2:	4403      	add	r3, r0
 8000bf4:	1a52      	subs	r2, r2, r1
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d808      	bhi.n	8000c0c <_sbrk+0x2c>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000bfa:	4a09      	ldr	r2, [pc, #36]	; (8000c20 <_sbrk+0x40>)
 8000bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000bfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c02:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8000c04:	4806      	ldr	r0, [pc, #24]	; (8000c20 <_sbrk+0x40>)
 8000c06:	4c07      	ldr	r4, [pc, #28]	; (8000c24 <_sbrk+0x44>)
 8000c08:	6004      	str	r4, [r0, #0]
 8000c0a:	e7f0      	b.n	8000bee <_sbrk+0xe>
    errno = ENOMEM;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <_sbrk+0x48>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c12:	f04f 30ff 	mov.w	r0, #4294967295
 8000c16:	e7f2      	b.n	8000bfe <_sbrk+0x1e>
 8000c18:	20020000 	.word	0x20020000
 8000c1c:	00000800 	.word	0x00000800
 8000c20:	20000440 	.word	0x20000440
 8000c24:	20008ab0 	.word	0x20008ab0
 8000c28:	20008aa8 	.word	0x20008aa8

08000c2c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <SystemInit+0x18>)
 8000c2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000c32:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c4e:	e003      	b.n	8000c58 <LoopCopyDataInit>

08000c50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c56:	3104      	adds	r1, #4

08000c58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c58:	480b      	ldr	r0, [pc, #44]	; (8000c88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c60:	d3f6      	bcc.n	8000c50 <CopyDataInit>
  ldr  r2, =_sbss
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c64:	e002      	b.n	8000c6c <LoopFillZerobss>

08000c66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c68:	f842 3b04 	str.w	r3, [r2], #4

08000c6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c70:	d3f9      	bcc.n	8000c66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c72:	f7ff ffdb 	bl	8000c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c76:	f014 f865 	bl	8014d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7a:	f7ff fe9f 	bl	80009bc <main>
  bx  lr    
 8000c7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c84:	08018f50 	.word	0x08018f50
  ldr  r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c8c:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8000c90:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8000c94:	20008aac 	.word	0x20008aac

08000c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC_IRQHandler>
	...

08000c9c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000c9c:	b510      	push	{r4, lr}
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_DeInit+0x28>)
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000ca6:	2400      	movs	r4, #0
 8000ca8:	621c      	str	r4, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000cac:	625c      	str	r4, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000cae:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000cb0:	611c      	str	r4, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000cb2:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000cb4:	615c      	str	r4, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000cb6:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000cb8:	619c      	str	r4, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000cba:	f7ff ff17 	bl	8000aec <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
}
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	bd10      	pop	{r4, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b510      	push	{r4, lr}
 8000cca:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_InitTick+0x40>)
 8000cce:	7818      	ldrb	r0, [r3, #0]
 8000cd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000cd8:	4a0c      	ldr	r2, [pc, #48]	; (8000d0c <HAL_InitTick+0x44>)
 8000cda:	6810      	ldr	r0, [r2, #0]
 8000cdc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ce0:	f000 f898 	bl	8000e14 <HAL_SYSTICK_Config>
 8000ce4:	b968      	cbnz	r0, 8000d02 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	2c0f      	cmp	r4, #15
 8000ce8:	d901      	bls.n	8000cee <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000cea:	2001      	movs	r0, #1
 8000cec:	e00a      	b.n	8000d04 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4621      	mov	r1, r4
 8000cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf6:	f000 f859 	bl	8000dac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <HAL_InitTick+0x48>)
 8000cfc:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000cfe:	2000      	movs	r0, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000d02:	2001      	movs	r0, #1
}
 8000d04:	bd10      	pop	{r4, pc}
 8000d06:	bf00      	nop
 8000d08:	20000004 	.word	0x20000004
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000008 	.word	0x20000008

08000d14 <HAL_Init>:
{
 8000d14:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_Init+0x30>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d1e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d26:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d2e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 f829 	bl	8000d88 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff ffc6 	bl	8000cc8 <HAL_InitTick>
  HAL_MspInit();
 8000d3c:	f7ff fe6a 	bl	8000a14 <HAL_MspInit>
}
 8000d40:	2000      	movs	r0, #0
 8000d42:	bd08      	pop	{r3, pc}
 8000d44:	40023c00 	.word	0x40023c00

08000d48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d48:	4a03      	ldr	r2, [pc, #12]	; (8000d58 <HAL_IncTick+0x10>)
 8000d4a:	6811      	ldr	r1, [r2, #0]
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <HAL_IncTick+0x14>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	440b      	add	r3, r1
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20001998 	.word	0x20001998
 8000d5c:	20000004 	.word	0x20000004

08000d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d60:	b538      	push	{r3, r4, r5, lr}
 8000d62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d64:	f003 fb38 	bl	80043d8 <HAL_GetTick>
 8000d68:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000d6e:	d002      	beq.n	8000d76 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <HAL_Delay+0x24>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d76:	f003 fb2f 	bl	80043d8 <HAL_GetTick>
 8000d7a:	1b40      	subs	r0, r0, r5
 8000d7c:	42a0      	cmp	r0, r4
 8000d7e:	d3fa      	bcc.n	8000d76 <HAL_Delay+0x16>
  {
  }
}
 8000d80:	bd38      	pop	{r3, r4, r5, pc}
 8000d82:	bf00      	nop
 8000d84:	20000004 	.word	0x20000004

08000d88 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d8a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d90:	041b      	lsls	r3, r3, #16
 8000d92:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d94:	0200      	lsls	r0, r0, #8
 8000d96:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000d9c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000da0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000da4:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dac:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <HAL_NVIC_SetPriority+0x60>)
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db6:	f1c3 0407 	rsb	r4, r3, #7
 8000dba:	2c04      	cmp	r4, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc0:	1d1d      	adds	r5, r3, #4
 8000dc2:	2d06      	cmp	r5, #6
 8000dc4:	d918      	bls.n	8000df8 <HAL_NVIC_SetPriority+0x4c>
 8000dc6:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 35ff 	mov.w	r5, #4294967295
 8000dcc:	fa05 f404 	lsl.w	r4, r5, r4
 8000dd0:	ea21 0104 	bic.w	r1, r1, r4
 8000dd4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd6:	fa05 f303 	lsl.w	r3, r5, r3
 8000dda:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dde:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000de0:	2800      	cmp	r0, #0
 8000de2:	db0b      	blt.n	8000dfc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de4:	0109      	lsls	r1, r1, #4
 8000de6:	b2c9      	uxtb	r1, r1
 8000de8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000dec:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000df0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000df4:	bc30      	pop	{r4, r5}
 8000df6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df8:	2300      	movs	r3, #0
 8000dfa:	e7e5      	b.n	8000dc8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	f000 000f 	and.w	r0, r0, #15
 8000e00:	0109      	lsls	r1, r1, #4
 8000e02:	b2c9      	uxtb	r1, r1
 8000e04:	4b02      	ldr	r3, [pc, #8]	; (8000e10 <HAL_NVIC_SetPriority+0x64>)
 8000e06:	5419      	strb	r1, [r3, r0]
 8000e08:	e7f4      	b.n	8000df4 <HAL_NVIC_SetPriority+0x48>
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00
 8000e10:	e000ed14 	.word	0xe000ed14

08000e14 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	3801      	subs	r0, #1
 8000e16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e1a:	d20a      	bcs.n	8000e32 <HAL_SYSTICK_Config+0x1e>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_SYSTICK_Config+0x24>)
 8000e1e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e20:	4a06      	ldr	r2, [pc, #24]	; (8000e3c <HAL_SYSTICK_Config+0x28>)
 8000e22:	21f0      	movs	r1, #240	; 0xf0
 8000e24:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e28:	2000      	movs	r0, #0
 8000e2a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2c:	2207      	movs	r2, #7
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e32:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000e010 	.word	0xe000e010
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <ETH_MACAddressConfig>:

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8000e40:	7950      	ldrb	r0, [r2, #5]
 8000e42:	7913      	ldrb	r3, [r2, #4]
 8000e44:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8000e48:	4807      	ldr	r0, [pc, #28]	; (8000e68 <ETH_MACAddressConfig+0x28>)
 8000e4a:	500b      	str	r3, [r1, r0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000e4c:	78d0      	ldrb	r0, [r2, #3]
 8000e4e:	7893      	ldrb	r3, [r2, #2]
 8000e50:	041b      	lsls	r3, r3, #16
 8000e52:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8000e56:	7850      	ldrb	r0, [r2, #1]
 8000e58:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8000e5c:	7812      	ldrb	r2, [r2, #0]
 8000e5e:	4313      	orrs	r3, r2
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000e60:	4a02      	ldr	r2, [pc, #8]	; (8000e6c <ETH_MACAddressConfig+0x2c>)
 8000e62:	508b      	str	r3, [r1, r2]
}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40028040 	.word	0x40028040
 8000e6c:	40028044 	.word	0x40028044

08000e70 <ETH_DMATransmissionEnable>:
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e70:	6801      	ldr	r1, [r0, #0]
 8000e72:	f241 0218 	movw	r2, #4120	; 0x1018
 8000e76:	588b      	ldr	r3, [r1, r2]
 8000e78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e7c:	508b      	str	r3, [r1, r2]
}
 8000e7e:	4770      	bx	lr

08000e80 <ETH_DMATransmissionDisable>:
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8000e80:	6801      	ldr	r1, [r0, #0]
 8000e82:	f241 0218 	movw	r2, #4120	; 0x1018
 8000e86:	588b      	ldr	r3, [r1, r2]
 8000e88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e8c:	508b      	str	r3, [r1, r2]
}
 8000e8e:	4770      	bx	lr

08000e90 <ETH_DMAReceptionEnable>:
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000e90:	6801      	ldr	r1, [r0, #0]
 8000e92:	f241 0218 	movw	r2, #4120	; 0x1018
 8000e96:	588b      	ldr	r3, [r1, r2]
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	508b      	str	r3, [r1, r2]
}
 8000e9e:	4770      	bx	lr

08000ea0 <ETH_DMAReceptionDisable>:
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8000ea0:	6801      	ldr	r1, [r0, #0]
 8000ea2:	f241 0218 	movw	r2, #4120	; 0x1018
 8000ea6:	588b      	ldr	r3, [r1, r2]
 8000ea8:	f023 0302 	bic.w	r3, r3, #2
 8000eac:	508b      	str	r3, [r1, r2]
}
 8000eae:	4770      	bx	lr

08000eb0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8000eb0:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <ETH_Delay+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <ETH_Delay+0x28>)
 8000eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebc:	0a5b      	lsrs	r3, r3, #9
 8000ebe:	fb00 f003 	mul.w	r0, r0, r3
 8000ec2:	9001      	str	r0, [sp, #4]
  do 
  {
    __NOP();
 8000ec4:	bf00      	nop
  } 
  while (Delay --);
 8000ec6:	9b01      	ldr	r3, [sp, #4]
 8000ec8:	1e5a      	subs	r2, r3, #1
 8000eca:	9201      	str	r2, [sp, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1f9      	bne.n	8000ec4 <ETH_Delay+0x14>
}
 8000ed0:	b002      	add	sp, #8
 8000ed2:	4770      	bx	lr
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	10624dd3 	.word	0x10624dd3

08000edc <ETH_MACTransmissionEnable>:
{ 
 8000edc:	b510      	push	{r4, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000ee6:	6802      	ldr	r2, [r0, #0]
 8000ee8:	6813      	ldr	r3, [r2, #0]
 8000eea:	f043 0308 	orr.w	r3, r3, #8
 8000eee:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000ef0:	6803      	ldr	r3, [r0, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f7ff ffda 	bl	8000eb0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	9a01      	ldr	r2, [sp, #4]
 8000f00:	601a      	str	r2, [r3, #0]
}
 8000f02:	b002      	add	sp, #8
 8000f04:	bd10      	pop	{r4, pc}

08000f06 <ETH_MACReceptionEnable>:
{ 
 8000f06:	b510      	push	{r4, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000f10:	6802      	ldr	r2, [r0, #0]
 8000f12:	6813      	ldr	r3, [r2, #0]
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000f1a:	6803      	ldr	r3, [r0, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f7ff ffc5 	bl	8000eb0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	9a01      	ldr	r2, [sp, #4]
 8000f2a:	601a      	str	r2, [r3, #0]
}
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd10      	pop	{r4, pc}

08000f30 <ETH_FlushTransmitFIFO>:
{
 8000f30:	b530      	push	{r4, r5, lr}
 8000f32:	b083      	sub	sp, #12
 8000f34:	4605      	mov	r5, r0
  __IO uint32_t tmpreg1 = 0U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000f3a:	6802      	ldr	r2, [r0, #0]
 8000f3c:	f241 0418 	movw	r4, #4120	; 0x1018
 8000f40:	5913      	ldr	r3, [r2, r4]
 8000f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f46:	5113      	str	r3, [r2, r4]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000f48:	6803      	ldr	r3, [r0, #0]
 8000f4a:	591b      	ldr	r3, [r3, r4]
 8000f4c:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f7ff ffae 	bl	8000eb0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8000f54:	682b      	ldr	r3, [r5, #0]
 8000f56:	9a01      	ldr	r2, [sp, #4]
 8000f58:	511a      	str	r2, [r3, r4]
}
 8000f5a:	b003      	add	sp, #12
 8000f5c:	bd30      	pop	{r4, r5, pc}

08000f5e <ETH_MACReceptionDisable>:
{ 
 8000f5e:	b510      	push	{r4, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8000f68:	6802      	ldr	r2, [r0, #0]
 8000f6a:	6813      	ldr	r3, [r2, #0]
 8000f6c:	f023 0304 	bic.w	r3, r3, #4
 8000f70:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000f72:	6803      	ldr	r3, [r0, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f7ff ff99 	bl	8000eb0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8000f7e:	6823      	ldr	r3, [r4, #0]
 8000f80:	9a01      	ldr	r2, [sp, #4]
 8000f82:	601a      	str	r2, [r3, #0]
}
 8000f84:	b002      	add	sp, #8
 8000f86:	bd10      	pop	{r4, pc}

08000f88 <ETH_MACTransmissionDisable>:
{ 
 8000f88:	b510      	push	{r4, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	4604      	mov	r4, r0
  __IO uint32_t tmpreg1 = 0U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	9301      	str	r3, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8000f92:	6802      	ldr	r2, [r0, #0]
 8000f94:	6813      	ldr	r3, [r2, #0]
 8000f96:	f023 0308 	bic.w	r3, r3, #8
 8000f9a:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000f9c:	6803      	ldr	r3, [r0, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f7ff ff84 	bl	8000eb0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	9a01      	ldr	r2, [sp, #4]
 8000fac:	601a      	str	r2, [r3, #0]
}
 8000fae:	b002      	add	sp, #8
 8000fb0:	bd10      	pop	{r4, pc}
	...

08000fb4 <ETH_MACDMAConfig>:
{
 8000fb4:	b570      	push	{r4, r5, r6, lr}
 8000fb6:	b09e      	sub	sp, #120	; 0x78
 8000fb8:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000fba:	b129      	cbz	r1, 8000fc8 <ETH_MACDMAConfig+0x14>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000fbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fc0:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000fc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fc6:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000fc8:	69e3      	ldr	r3, [r4, #28]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d16a      	bne.n	80010a4 <ETH_MACDMAConfig+0xf0>
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8000fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd2:	9307      	str	r3, [sp, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8000fd4:	6821      	ldr	r1, [r4, #0]
 8000fd6:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000fd8:	4a39      	ldr	r2, [pc, #228]	; (80010c0 <ETH_MACDMAConfig+0x10c>)
 8000fda:	401a      	ands	r2, r3
                       (heth->Init).Speed | 
 8000fdc:	68a3      	ldr	r3, [r4, #8]
                       (heth->Init).DuplexMode | 
 8000fde:	68e0      	ldr	r0, [r4, #12]
                       macinit.LoopbackMode |
 8000fe0:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8000fe2:	9807      	ldr	r0, [sp, #28]
                       (heth->Init).DuplexMode | 
 8000fe4:	4303      	orrs	r3, r0
                       macinit.ChecksumOffload |    
 8000fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8000fea:	4313      	orrs	r3, r2
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8000fec:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000fee:	6823      	ldr	r3, [r4, #0]
 8000ff0:	681d      	ldr	r5, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f7ff feb4 	bl	8000d60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000ffc:	6823      	ldr	r3, [r4, #0]
 8000ffe:	2240      	movs	r2, #64	; 0x40
 8001000:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8001002:	6823      	ldr	r3, [r4, #0]
 8001004:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001006:	2001      	movs	r0, #1
 8001008:	f7ff feaa 	bl	8000d60 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800100c:	6823      	ldr	r3, [r4, #0]
 800100e:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	2500      	movs	r5, #0
 8001014:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 800101a:	6822      	ldr	r2, [r4, #0]
 800101c:	6993      	ldr	r3, [r2, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800101e:	f023 03be 	bic.w	r3, r3, #190	; 0xbe
 8001022:	041b      	lsls	r3, r3, #16
 8001024:	0c1b      	lsrs	r3, r3, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800102a:	6193      	str	r3, [r2, #24]
   tmpreg1 = (heth->Instance)->MACFCR;
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff fe95 	bl	8000d60 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001036:	6823      	ldr	r3, [r4, #0]
 8001038:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001042:	2001      	movs	r0, #1
 8001044:	f7ff fe8c 	bl	8000d60 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001048:	6823      	ldr	r3, [r4, #0]
 800104a:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 800104c:	6822      	ldr	r2, [r4, #0]
 800104e:	f241 0518 	movw	r5, #4120	; 0x1018
 8001052:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <ETH_MACDMAConfig+0x110>)
 8001056:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001058:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 800105c:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001060:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001062:	6823      	ldr	r3, [r4, #0]
 8001064:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001066:	2001      	movs	r0, #1
 8001068:	f7ff fe7a 	bl	8000d60 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800106c:	6823      	ldr	r3, [r4, #0]
 800106e:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001070:	6823      	ldr	r3, [r4, #0]
 8001072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001076:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <ETH_MACDMAConfig+0x114>)
 8001078:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001080:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff fe6c 	bl	8000d60 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001088:	6823      	ldr	r3, [r4, #0]
 800108a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800108e:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001090:	69a3      	ldr	r3, [r4, #24]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d009      	beq.n	80010aa <ETH_MACDMAConfig+0xf6>
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001096:	6962      	ldr	r2, [r4, #20]
 8001098:	2100      	movs	r1, #0
 800109a:	4620      	mov	r0, r4
 800109c:	f7ff fed0 	bl	8000e40 <ETH_MACAddressConfig>
}
 80010a0:	b01e      	add	sp, #120	; 0x78
 80010a2:	bd70      	pop	{r4, r5, r6, pc}
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	9307      	str	r3, [sp, #28]
 80010a8:	e794      	b.n	8000fd4 <ETH_MACDMAConfig+0x20>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80010aa:	6821      	ldr	r1, [r4, #0]
 80010ac:	f241 021c 	movw	r2, #4124	; 0x101c
 80010b0:	588b      	ldr	r3, [r1, r2]
 80010b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ba:	508b      	str	r3, [r1, r2]
 80010bc:	e7eb      	b.n	8001096 <ETH_MACDMAConfig+0xe2>
 80010be:	bf00      	nop
 80010c0:	ff20810f 	.word	0xff20810f
 80010c4:	f8de3f23 	.word	0xf8de3f23
 80010c8:	02c12080 	.word	0x02c12080

080010cc <HAL_ETH_DMATxDescListInit>:
{
 80010cc:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 80010ce:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80010d2:	2c01      	cmp	r4, #1
 80010d4:	d031      	beq.n	800113a <HAL_ETH_DMATxDescListInit+0x6e>
 80010d6:	2401      	movs	r4, #1
 80010d8:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80010dc:	2402      	movs	r4, #2
 80010de:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 80010e2:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0U; i < TxBuffCount; i++)
 80010e4:	2400      	movs	r4, #0
 80010e6:	e001      	b.n	80010ec <HAL_ETH_DMATxDescListInit+0x20>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80010e8:	60f9      	str	r1, [r7, #12]
  for(i=0U; i < TxBuffCount; i++)
 80010ea:	3401      	adds	r4, #1
 80010ec:	429c      	cmp	r4, r3
 80010ee:	d217      	bcs.n	8001120 <HAL_ETH_DMATxDescListInit+0x54>
    dmatxdesc = DMATxDescTab + i;
 80010f0:	0165      	lsls	r5, r4, #5
 80010f2:	194f      	adds	r7, r1, r5
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80010f4:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 80010f8:	514e      	str	r6, [r1, r5]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80010fa:	f240 56f4 	movw	r6, #1524	; 0x5f4
 80010fe:	fb06 2604 	mla	r6, r6, r4, r2
 8001102:	60be      	str	r6, [r7, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001104:	69c6      	ldr	r6, [r0, #28]
 8001106:	b91e      	cbnz	r6, 8001110 <HAL_ETH_DMATxDescListInit+0x44>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001108:	594e      	ldr	r6, [r1, r5]
 800110a:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 800110e:	514e      	str	r6, [r1, r5]
    if(i < (TxBuffCount-1U))
 8001110:	1e5d      	subs	r5, r3, #1
 8001112:	42a5      	cmp	r5, r4
 8001114:	d9e8      	bls.n	80010e8 <HAL_ETH_DMATxDescListInit+0x1c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001116:	1c65      	adds	r5, r4, #1
 8001118:	eb01 1545 	add.w	r5, r1, r5, lsl #5
 800111c:	60fd      	str	r5, [r7, #12]
 800111e:	e7e4      	b.n	80010ea <HAL_ETH_DMATxDescListInit+0x1e>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001120:	6802      	ldr	r2, [r0, #0]
 8001122:	f241 0310 	movw	r3, #4112	; 0x1010
 8001126:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8001128:	2301      	movs	r3, #1
 800112a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800112e:	2300      	movs	r3, #0
 8001130:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8001134:	4618      	mov	r0, r3
}
 8001136:	bcf0      	pop	{r4, r5, r6, r7}
 8001138:	4770      	bx	lr
  __HAL_LOCK(heth);
 800113a:	2002      	movs	r0, #2
 800113c:	e7fb      	b.n	8001136 <HAL_ETH_DMATxDescListInit+0x6a>

0800113e <HAL_ETH_DMARxDescListInit>:
{
 800113e:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(heth);
 8001140:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8001144:	2c01      	cmp	r4, #1
 8001146:	d02e      	beq.n	80011a6 <HAL_ETH_DMARxDescListInit+0x68>
 8001148:	2401      	movs	r4, #1
 800114a:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800114e:	2402      	movs	r4, #2
 8001150:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 8001154:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0U; i < RxBuffCount; i++)
 8001156:	2400      	movs	r4, #0
 8001158:	e001      	b.n	800115e <HAL_ETH_DMARxDescListInit+0x20>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800115a:	60e9      	str	r1, [r5, #12]
  for(i=0U; i < RxBuffCount; i++)
 800115c:	3401      	adds	r4, #1
 800115e:	429c      	cmp	r4, r3
 8001160:	d214      	bcs.n	800118c <HAL_ETH_DMARxDescListInit+0x4e>
    DMARxDesc = DMARxDescTab+i;
 8001162:	0166      	lsls	r6, r4, #5
 8001164:	198d      	adds	r5, r1, r6
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001166:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800116a:	518f      	str	r7, [r1, r6]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800116c:	f244 56f4 	movw	r6, #17908	; 0x45f4
 8001170:	606e      	str	r6, [r5, #4]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001172:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8001176:	fb06 2604 	mla	r6, r6, r4, r2
 800117a:	60ae      	str	r6, [r5, #8]
    if(i < (RxBuffCount-1U))
 800117c:	1e5e      	subs	r6, r3, #1
 800117e:	42a6      	cmp	r6, r4
 8001180:	d9eb      	bls.n	800115a <HAL_ETH_DMARxDescListInit+0x1c>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001182:	1c66      	adds	r6, r4, #1
 8001184:	eb01 1646 	add.w	r6, r1, r6, lsl #5
 8001188:	60ee      	str	r6, [r5, #12]
 800118a:	e7e7      	b.n	800115c <HAL_ETH_DMARxDescListInit+0x1e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800118c:	6802      	ldr	r2, [r0, #0]
 800118e:	f241 030c 	movw	r3, #4108	; 0x100c
 8001192:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8001194:	2301      	movs	r3, #1
 8001196:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800119a:	2300      	movs	r3, #0
 800119c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80011a0:	4618      	mov	r0, r3
}
 80011a2:	bcf0      	pop	{r4, r5, r6, r7}
 80011a4:	4770      	bx	lr
  __HAL_LOCK(heth);
 80011a6:	2002      	movs	r0, #2
 80011a8:	e7fb      	b.n	80011a2 <HAL_ETH_DMARxDescListInit+0x64>
	...

080011ac <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 80011ac:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	f000 8085 	beq.w	80012c0 <HAL_ETH_TransmitFrame+0x114>
 80011b6:	2301      	movs	r3, #1
 80011b8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80011bc:	2302      	movs	r3, #2
 80011be:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 80011c2:	b1b1      	cbz	r1, 80011f2 <HAL_ETH_TransmitFrame+0x46>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80011c4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	2a00      	cmp	r2, #0
 80011ca:	db1a      	blt.n	8001202 <HAL_ETH_TransmitFrame+0x56>
{
 80011cc:	b430      	push	{r4, r5}
  if (FrameLength > ETH_TX_BUF_SIZE)
 80011ce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011d2:	4291      	cmp	r1, r2
 80011d4:	d91d      	bls.n	8001212 <HAL_ETH_TransmitFrame+0x66>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80011d6:	4a3b      	ldr	r2, [pc, #236]	; (80012c4 <HAL_ETH_TransmitFrame+0x118>)
 80011d8:	fba2 4201 	umull	r4, r2, r2, r1
 80011dc:	0a92      	lsrs	r2, r2, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80011de:	f240 54f4 	movw	r4, #1524	; 0x5f4
 80011e2:	fb04 1412 	mls	r4, r4, r2, r1
 80011e6:	b104      	cbz	r4, 80011ea <HAL_ETH_TransmitFrame+0x3e>
      bufcount++;
 80011e8:	3201      	adds	r2, #1
  if (bufcount == 1U)
 80011ea:	2a01      	cmp	r2, #1
 80011ec:	d011      	beq.n	8001212 <HAL_ETH_TransmitFrame+0x66>
    for (i=0U; i< bufcount; i++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	e047      	b.n	8001282 <HAL_ETH_TransmitFrame+0xd6>
    heth->State = HAL_ETH_STATE_READY;
 80011f2:	2301      	movs	r3, #1
 80011f4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    return  HAL_ERROR;                                    
 80011fe:	4618      	mov	r0, r3
 8001200:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001202:	2312      	movs	r3, #18
 8001204:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8001208:	2300      	movs	r3, #0
 800120a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    return HAL_ERROR;
 800120e:	2001      	movs	r0, #1
 8001210:	4770      	bx	lr
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001218:	601a      	str	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800121a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800121c:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8001220:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001222:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001224:	6813      	ldr	r3, [r2, #0]
 8001226:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800122a:	6013      	str	r3, [r2, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800122c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001232:	6803      	ldr	r3, [r0, #0]
 8001234:	f241 0214 	movw	r2, #4116	; 0x1014
 8001238:	589a      	ldr	r2, [r3, r2]
 800123a:	f012 0f04 	tst.w	r2, #4
 800123e:	d008      	beq.n	8001252 <HAL_ETH_TransmitFrame+0xa6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001240:	f241 0214 	movw	r2, #4116	; 0x1014
 8001244:	2104      	movs	r1, #4
 8001246:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 8001248:	6802      	ldr	r2, [r0, #0]
 800124a:	f241 0304 	movw	r3, #4100	; 0x1004
 800124e:	2100      	movs	r1, #0
 8001250:	50d1      	str	r1, [r2, r3]
  heth->State = HAL_ETH_STATE_READY;
 8001252:	2301      	movs	r3, #1
 8001254:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001258:	2300      	movs	r3, #0
 800125a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 800125e:	4618      	mov	r0, r3
}
 8001260:	bc30      	pop	{r4, r5}
 8001262:	4770      	bx	lr
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001264:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8001266:	682c      	ldr	r4, [r5, #0]
 8001268:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 800126c:	602c      	str	r4, [r5, #0]
 800126e:	e011      	b.n	8001294 <HAL_ETH_TransmitFrame+0xe8>
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001270:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8001272:	682c      	ldr	r4, [r5, #0]
 8001274:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8001278:	602c      	str	r4, [r5, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800127a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800127c:	68e4      	ldr	r4, [r4, #12]
 800127e:	62c4      	str	r4, [r0, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001280:	3301      	adds	r3, #1
 8001282:	429a      	cmp	r2, r3
 8001284:	d9d5      	bls.n	8001232 <HAL_ETH_TransmitFrame+0x86>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001286:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 8001288:	682c      	ldr	r4, [r5, #0]
 800128a:	f024 5440 	bic.w	r4, r4, #805306368	; 0x30000000
 800128e:	602c      	str	r4, [r5, #0]
      if (i == 0U) 
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0e7      	beq.n	8001264 <HAL_ETH_TransmitFrame+0xb8>
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001294:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001296:	f240 55f4 	movw	r5, #1524	; 0x5f4
 800129a:	6065      	str	r5, [r4, #4]
      if (i == (bufcount-1U))
 800129c:	1e54      	subs	r4, r2, #1
 800129e:	429c      	cmp	r4, r3
 80012a0:	d1e6      	bne.n	8001270 <HAL_ETH_TransmitFrame+0xc4>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80012a2:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80012a4:	682c      	ldr	r4, [r5, #0]
 80012a6:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 80012aa:	602c      	str	r4, [r5, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80012ac:	4c06      	ldr	r4, [pc, #24]	; (80012c8 <HAL_ETH_TransmitFrame+0x11c>)
 80012ae:	fb04 1402 	mla	r4, r4, r2, r1
 80012b2:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80012b6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80012b8:	f3c4 040c 	ubfx	r4, r4, #0, #13
 80012bc:	606c      	str	r4, [r5, #4]
 80012be:	e7d7      	b.n	8001270 <HAL_ETH_TransmitFrame+0xc4>
  __HAL_LOCK(heth);
 80012c0:	2002      	movs	r0, #2
}
 80012c2:	4770      	bx	lr
 80012c4:	ac02b00b 	.word	0xac02b00b
 80012c8:	fffffa0c 	.word	0xfffffa0c

080012cc <HAL_ETH_GetReceivedFrame>:
  __HAL_LOCK(heth);
 80012cc:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d040      	beq.n	8001356 <HAL_ETH_GetReceivedFrame+0x8a>
 80012d4:	2301      	movs	r3, #1
 80012d6:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80012da:	2302      	movs	r3, #2
 80012dc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80012e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	2a00      	cmp	r2, #0
 80012e6:	db28      	blt.n	800133a <HAL_ETH_GetReceivedFrame+0x6e>
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	f412 7f80 	tst.w	r2, #256	; 0x100
 80012ee:	d019      	beq.n	8001324 <HAL_ETH_GetReceivedFrame+0x58>
      (heth->RxFrameInfos).SegCount++;
 80012f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80012f2:	3201      	adds	r2, #1
 80012f4:	6382      	str	r2, [r0, #56]	; 0x38
      if ((heth->RxFrameInfos).SegCount == 1U)
 80012f6:	2a01      	cmp	r2, #1
 80012f8:	d012      	beq.n	8001320 <HAL_ETH_GetReceivedFrame+0x54>
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80012fa:	6343      	str	r3, [r0, #52]	; 0x34
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8001302:	3a04      	subs	r2, #4
      heth->RxFrameInfos.length = framelength;
 8001304:	63c2      	str	r2, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001306:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001308:	6892      	ldr	r2, [r2, #8]
 800130a:	6402      	str	r2, [r0, #64]	; 0x40
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	6283      	str	r3, [r0, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8001310:	2301      	movs	r3, #1
 8001312:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8001316:	2300      	movs	r3, #0
 8001318:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
      return HAL_OK;
 800131c:	4618      	mov	r0, r3
 800131e:	4770      	bx	lr
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001320:	6303      	str	r3, [r0, #48]	; 0x30
 8001322:	e7ea      	b.n	80012fa <HAL_ETH_GetReceivedFrame+0x2e>
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	f412 7f00 	tst.w	r2, #512	; 0x200
 800132a:	d00e      	beq.n	800134a <HAL_ETH_GetReceivedFrame+0x7e>
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800132c:	6303      	str	r3, [r0, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800132e:	2200      	movs	r2, #0
 8001330:	6342      	str	r2, [r0, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001332:	2201      	movs	r2, #1
 8001334:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	6283      	str	r3, [r0, #40]	; 0x28
  heth->State = HAL_ETH_STATE_READY;
 800133a:	2301      	movs	r3, #1
 800133c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001340:	2200      	movs	r2, #0
 8001342:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8001346:	4618      	mov	r0, r3
 8001348:	4770      	bx	lr
      (heth->RxFrameInfos).SegCount++;
 800134a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800134c:	3201      	adds	r2, #1
 800134e:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	6283      	str	r3, [r0, #40]	; 0x28
 8001354:	e7f1      	b.n	800133a <HAL_ETH_GetReceivedFrame+0x6e>
  __HAL_LOCK(heth);
 8001356:	2002      	movs	r0, #2
}
 8001358:	4770      	bx	lr

0800135a <HAL_ETH_ReadPHYRegister>:
{
 800135a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800135c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b82      	cmp	r3, #130	; 0x82
 8001364:	d033      	beq.n	80013ce <HAL_ETH_ReadPHYRegister+0x74>
 8001366:	4616      	mov	r6, r2
 8001368:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800136a:	2382      	movs	r3, #130	; 0x82
 800136c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8001370:	6802      	ldr	r2, [r0, #0]
 8001372:	6913      	ldr	r3, [r2, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001374:	f003 031c 	and.w	r3, r3, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001378:	8a04      	ldrh	r4, [r0, #16]
 800137a:	02e4      	lsls	r4, r4, #11
 800137c:	b2a4      	uxth	r4, r4
 800137e:	4323      	orrs	r3, r4
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001380:	018c      	lsls	r4, r1, #6
 8001382:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001386:	431c      	orrs	r4, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001388:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 800138c:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 800138e:	f003 f823 	bl	80043d8 <HAL_GetTick>
 8001392:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001394:	f014 0f01 	tst.w	r4, #1
 8001398:	d010      	beq.n	80013bc <HAL_ETH_ReadPHYRegister+0x62>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800139a:	f003 f81d 	bl	80043d8 <HAL_GetTick>
 800139e:	1bc0      	subs	r0, r0, r7
 80013a0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80013a4:	d202      	bcs.n	80013ac <HAL_ETH_ReadPHYRegister+0x52>
    tmpreg1 = heth->Instance->MACMIIAR;
 80013a6:	682b      	ldr	r3, [r5, #0]
 80013a8:	691c      	ldr	r4, [r3, #16]
 80013aa:	e7f3      	b.n	8001394 <HAL_ETH_ReadPHYRegister+0x3a>
      heth->State= HAL_ETH_STATE_READY;
 80013ac:	2301      	movs	r3, #1
 80013ae:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80013b2:	2300      	movs	r3, #0
 80013b4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80013b8:	2003      	movs	r0, #3
 80013ba:	e007      	b.n	80013cc <HAL_ETH_ReadPHYRegister+0x72>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80013bc:	682b      	ldr	r3, [r5, #0]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 80013c4:	2301      	movs	r3, #1
 80013c6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK;
 80013ca:	2000      	movs	r0, #0
}
 80013cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80013ce:	2002      	movs	r0, #2
 80013d0:	e7fc      	b.n	80013cc <HAL_ETH_ReadPHYRegister+0x72>

080013d2 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80013d2:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b42      	cmp	r3, #66	; 0x42
 80013da:	d032      	beq.n	8001442 <HAL_ETH_WritePHYRegister+0x70>
{
 80013dc:	b570      	push	{r4, r5, r6, lr}
 80013de:	4605      	mov	r5, r0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80013e0:	2342      	movs	r3, #66	; 0x42
 80013e2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 80013e6:	6800      	ldr	r0, [r0, #0]
 80013e8:	6903      	ldr	r3, [r0, #16]
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80013ea:	f003 031c 	and.w	r3, r3, #28
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80013ee:	8a2c      	ldrh	r4, [r5, #16]
 80013f0:	02e4      	lsls	r4, r4, #11
 80013f2:	b2a4      	uxth	r4, r4
 80013f4:	4323      	orrs	r3, r4
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80013f6:	018c      	lsls	r4, r1, #6
 80013f8:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 80013fc:	431c      	orrs	r4, r3
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80013fe:	f044 0403 	orr.w	r4, r4, #3
 8001402:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001404:	6142      	str	r2, [r0, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8001406:	682b      	ldr	r3, [r5, #0]
 8001408:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 800140a:	f002 ffe5 	bl	80043d8 <HAL_GetTick>
 800140e:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001410:	f014 0f01 	tst.w	r4, #1
 8001414:	d010      	beq.n	8001438 <HAL_ETH_WritePHYRegister+0x66>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001416:	f002 ffdf 	bl	80043d8 <HAL_GetTick>
 800141a:	1b80      	subs	r0, r0, r6
 800141c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001420:	d202      	bcs.n	8001428 <HAL_ETH_WritePHYRegister+0x56>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001422:	682b      	ldr	r3, [r5, #0]
 8001424:	691c      	ldr	r4, [r3, #16]
 8001426:	e7f3      	b.n	8001410 <HAL_ETH_WritePHYRegister+0x3e>
      heth->State= HAL_ETH_STATE_READY;
 8001428:	2301      	movs	r3, #1
 800142a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800142e:	2300      	movs	r3, #0
 8001430:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8001434:	2003      	movs	r0, #3
 8001436:	e003      	b.n	8001440 <HAL_ETH_WritePHYRegister+0x6e>
  heth->State = HAL_ETH_STATE_READY;
 8001438:	2301      	movs	r3, #1
 800143a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 800143e:	2000      	movs	r0, #0
}
 8001440:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8001442:	2002      	movs	r0, #2
}
 8001444:	4770      	bx	lr
	...

08001448 <HAL_ETH_Init>:
{
 8001448:	b570      	push	{r4, r5, r6, lr}
 800144a:	b082      	sub	sp, #8
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	9301      	str	r3, [sp, #4]
  if(heth == NULL)
 8001450:	2800      	cmp	r0, #0
 8001452:	f000 810e 	beq.w	8001672 <HAL_ETH_Init+0x22a>
 8001456:	4604      	mov	r4, r0
  if(heth->State == HAL_ETH_STATE_RESET)
 8001458:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800145c:	2b00      	cmp	r3, #0
 800145e:	d034      	beq.n	80014ca <HAL_ETH_Init+0x82>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001460:	2300      	movs	r3, #0
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	4b84      	ldr	r3, [pc, #528]	; (8001678 <HAL_ETH_Init+0x230>)
 8001466:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001468:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800146c:	645a      	str	r2, [r3, #68]	; 0x44
 800146e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	9b00      	ldr	r3, [sp, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001478:	4b80      	ldr	r3, [pc, #512]	; (800167c <HAL_ETH_Init+0x234>)
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001480:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	6a21      	ldr	r1, [r4, #32]
 8001486:	430a      	orrs	r2, r1
 8001488:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800148a:	6823      	ldr	r3, [r4, #0]
 800148c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	f042 0201 	orr.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001498:	f002 ff9e 	bl	80043d8 <HAL_GetTick>
 800149c:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800149e:	6823      	ldr	r3, [r4, #0]
 80014a0:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	f012 0f01 	tst.w	r2, #1
 80014aa:	d013      	beq.n	80014d4 <HAL_ETH_Init+0x8c>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80014ac:	f002 ff94 	bl	80043d8 <HAL_GetTick>
 80014b0:	1b40      	subs	r0, r0, r5
 80014b2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80014b6:	d9f2      	bls.n	800149e <HAL_ETH_Init+0x56>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80014b8:	2503      	movs	r5, #3
 80014ba:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80014be:	2300      	movs	r3, #0
 80014c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80014c4:	4628      	mov	r0, r5
 80014c6:	b002      	add	sp, #8
 80014c8:	bd70      	pop	{r4, r5, r6, pc}
    heth->Lock = HAL_UNLOCKED;
 80014ca:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 80014ce:	f002 fa49 	bl	8003964 <HAL_ETH_MspInit>
 80014d2:	e7c5      	b.n	8001460 <HAL_ETH_Init+0x18>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80014d4:	691d      	ldr	r5, [r3, #16]
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80014d6:	f025 051c 	bic.w	r5, r5, #28
  hclk = HAL_RCC_GetHCLKFreq();
 80014da:	f000 fc85 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80014de:	4b68      	ldr	r3, [pc, #416]	; (8001680 <HAL_ETH_Init+0x238>)
 80014e0:	4403      	add	r3, r0
 80014e2:	4a68      	ldr	r2, [pc, #416]	; (8001684 <HAL_ETH_Init+0x23c>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d855      	bhi.n	8001594 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80014e8:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80014f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014f4:	2100      	movs	r1, #0
 80014f6:	4620      	mov	r0, r4
 80014f8:	f7ff ff6b 	bl	80013d2 <HAL_ETH_WritePHYRegister>
 80014fc:	4605      	mov	r5, r0
 80014fe:	2800      	cmp	r0, #0
 8001500:	d160      	bne.n	80015c4 <HAL_ETH_Init+0x17c>
  HAL_Delay(PHY_RESET_DELAY);
 8001502:	20ff      	movs	r0, #255	; 0xff
 8001504:	f7ff fc2c 	bl	8000d60 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001508:	6863      	ldr	r3, [r4, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8091 	beq.w	8001632 <HAL_ETH_Init+0x1ea>
    tickstart = HAL_GetTick();
 8001510:	f002 ff62 	bl	80043d8 <HAL_GetTick>
 8001514:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001516:	aa01      	add	r2, sp, #4
 8001518:	2101      	movs	r1, #1
 800151a:	4620      	mov	r0, r4
 800151c:	f7ff ff1d 	bl	800135a <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001520:	f002 ff5a 	bl	80043d8 <HAL_GetTick>
 8001524:	1b80      	subs	r0, r0, r6
 8001526:	f241 3388 	movw	r3, #5000	; 0x1388
 800152a:	4298      	cmp	r0, r3
 800152c:	d852      	bhi.n	80015d4 <HAL_ETH_Init+0x18c>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800152e:	9b01      	ldr	r3, [sp, #4]
 8001530:	f013 0f04 	tst.w	r3, #4
 8001534:	d0ef      	beq.n	8001516 <HAL_ETH_Init+0xce>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001536:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800153a:	2100      	movs	r1, #0
 800153c:	4620      	mov	r0, r4
 800153e:	f7ff ff48 	bl	80013d2 <HAL_ETH_WritePHYRegister>
 8001542:	2800      	cmp	r0, #0
 8001544:	d152      	bne.n	80015ec <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 8001546:	f002 ff47 	bl	80043d8 <HAL_GetTick>
 800154a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800154c:	aa01      	add	r2, sp, #4
 800154e:	2101      	movs	r1, #1
 8001550:	4620      	mov	r0, r4
 8001552:	f7ff ff02 	bl	800135a <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001556:	f002 ff3f 	bl	80043d8 <HAL_GetTick>
 800155a:	1b80      	subs	r0, r0, r6
 800155c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001560:	4298      	cmp	r0, r3
 8001562:	d84b      	bhi.n	80015fc <HAL_ETH_Init+0x1b4>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001564:	9b01      	ldr	r3, [sp, #4]
 8001566:	f013 0f20 	tst.w	r3, #32
 800156a:	d0ef      	beq.n	800154c <HAL_ETH_Init+0x104>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800156c:	aa01      	add	r2, sp, #4
 800156e:	211f      	movs	r1, #31
 8001570:	4620      	mov	r0, r4
 8001572:	f7ff fef2 	bl	800135a <HAL_ETH_ReadPHYRegister>
 8001576:	2800      	cmp	r0, #0
 8001578:	d14c      	bne.n	8001614 <HAL_ETH_Init+0x1cc>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800157a:	9b01      	ldr	r3, [sp, #4]
 800157c:	f013 0f10 	tst.w	r3, #16
 8001580:	d050      	beq.n	8001624 <HAL_ETH_Init+0x1dc>
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001582:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001586:	60e2      	str	r2, [r4, #12]
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001588:	f013 0f04 	tst.w	r3, #4
 800158c:	d04d      	beq.n	800162a <HAL_ETH_Init+0x1e2>
      (heth->Init).Speed = ETH_SPEED_10M; 
 800158e:	2300      	movs	r3, #0
 8001590:	60a3      	str	r3, [r4, #8]
 8001592:	e05e      	b.n	8001652 <HAL_ETH_Init+0x20a>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001594:	4b3c      	ldr	r3, [pc, #240]	; (8001688 <HAL_ETH_Init+0x240>)
 8001596:	4403      	add	r3, r0
 8001598:	4a3c      	ldr	r2, [pc, #240]	; (800168c <HAL_ETH_Init+0x244>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d802      	bhi.n	80015a4 <HAL_ETH_Init+0x15c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800159e:	f045 050c 	orr.w	r5, r5, #12
 80015a2:	e7a3      	b.n	80014ec <HAL_ETH_Init+0xa4>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80015a4:	4b3a      	ldr	r3, [pc, #232]	; (8001690 <HAL_ETH_Init+0x248>)
 80015a6:	4403      	add	r3, r0
 80015a8:	4a3a      	ldr	r2, [pc, #232]	; (8001694 <HAL_ETH_Init+0x24c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d99e      	bls.n	80014ec <HAL_ETH_Init+0xa4>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80015ae:	4b3a      	ldr	r3, [pc, #232]	; (8001698 <HAL_ETH_Init+0x250>)
 80015b0:	4403      	add	r3, r0
 80015b2:	4a3a      	ldr	r2, [pc, #232]	; (800169c <HAL_ETH_Init+0x254>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d802      	bhi.n	80015be <HAL_ETH_Init+0x176>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80015b8:	f045 0504 	orr.w	r5, r5, #4
 80015bc:	e796      	b.n	80014ec <HAL_ETH_Init+0xa4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80015be:	f045 0510 	orr.w	r5, r5, #16
 80015c2:	e793      	b.n	80014ec <HAL_ETH_Init+0xa4>
    ETH_MACDMAConfig(heth, err);
 80015c4:	2101      	movs	r1, #1
 80015c6:	4620      	mov	r0, r4
 80015c8:	f7ff fcf4 	bl	8000fb4 <ETH_MACDMAConfig>
    heth->State = HAL_ETH_STATE_READY;
 80015cc:	2501      	movs	r5, #1
 80015ce:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
    return HAL_ERROR;
 80015d2:	e777      	b.n	80014c4 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 80015d4:	2101      	movs	r1, #1
 80015d6:	4620      	mov	r0, r4
 80015d8:	f7ff fcec 	bl	8000fb4 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 80015dc:	2301      	movs	r3, #1
 80015de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 80015e2:	2300      	movs	r3, #0
 80015e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 80015e8:	2503      	movs	r5, #3
 80015ea:	e76b      	b.n	80014c4 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 80015ec:	2101      	movs	r1, #1
 80015ee:	4620      	mov	r0, r4
 80015f0:	f7ff fce0 	bl	8000fb4 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80015f4:	2501      	movs	r5, #1
 80015f6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 80015fa:	e763      	b.n	80014c4 <HAL_ETH_Init+0x7c>
        ETH_MACDMAConfig(heth, err);
 80015fc:	2101      	movs	r1, #1
 80015fe:	4620      	mov	r0, r4
 8001600:	f7ff fcd8 	bl	8000fb4 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8001604:	2301      	movs	r3, #1
 8001606:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800160a:	2300      	movs	r3, #0
 800160c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8001610:	2503      	movs	r5, #3
 8001612:	e757      	b.n	80014c4 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8001614:	2101      	movs	r1, #1
 8001616:	4620      	mov	r0, r4
 8001618:	f7ff fccc 	bl	8000fb4 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800161c:	2501      	movs	r5, #1
 800161e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;   
 8001622:	e74f      	b.n	80014c4 <HAL_ETH_Init+0x7c>
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001624:	2200      	movs	r2, #0
 8001626:	60e2      	str	r2, [r4, #12]
 8001628:	e7ae      	b.n	8001588 <HAL_ETH_Init+0x140>
      (heth->Init).Speed = ETH_SPEED_100M;
 800162a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800162e:	60a3      	str	r3, [r4, #8]
 8001630:	e00f      	b.n	8001652 <HAL_ETH_Init+0x20a>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001632:	68e2      	ldr	r2, [r4, #12]
 8001634:	f3c2 02cf 	ubfx	r2, r2, #3, #16
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001638:	68a3      	ldr	r3, [r4, #8]
 800163a:	f3c3 034f 	ubfx	r3, r3, #1, #16
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800163e:	431a      	orrs	r2, r3
 8001640:	2100      	movs	r1, #0
 8001642:	4620      	mov	r0, r4
 8001644:	f7ff fec5 	bl	80013d2 <HAL_ETH_WritePHYRegister>
 8001648:	b958      	cbnz	r0, 8001662 <HAL_ETH_Init+0x21a>
    HAL_Delay(PHY_CONFIG_DELAY);
 800164a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800164e:	f7ff fb87 	bl	8000d60 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8001652:	2100      	movs	r1, #0
 8001654:	4620      	mov	r0, r4
 8001656:	f7ff fcad 	bl	8000fb4 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 800165a:	2301      	movs	r3, #1
 800165c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8001660:	e730      	b.n	80014c4 <HAL_ETH_Init+0x7c>
      ETH_MACDMAConfig(heth, err);
 8001662:	2101      	movs	r1, #1
 8001664:	4620      	mov	r0, r4
 8001666:	f7ff fca5 	bl	8000fb4 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800166a:	2501      	movs	r5, #1
 800166c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001670:	e728      	b.n	80014c4 <HAL_ETH_Init+0x7c>
    return HAL_ERROR;
 8001672:	2501      	movs	r5, #1
 8001674:	e726      	b.n	80014c4 <HAL_ETH_Init+0x7c>
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40013800 	.word	0x40013800
 8001680:	feced300 	.word	0xfeced300
 8001684:	00e4e1bf 	.word	0x00e4e1bf
 8001688:	fde9f140 	.word	0xfde9f140
 800168c:	017d783f 	.word	0x017d783f
 8001690:	fc6c7900 	.word	0xfc6c7900
 8001694:	026259ff 	.word	0x026259ff
 8001698:	fa0a1f00 	.word	0xfa0a1f00
 800169c:	02faf07f 	.word	0x02faf07f

080016a0 <HAL_ETH_Start>:
{  
 80016a0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 80016a2:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d01a      	beq.n	80016e0 <HAL_ETH_Start+0x40>
 80016aa:	4604      	mov	r4, r0
 80016ac:	2501      	movs	r5, #1
 80016ae:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80016b2:	2302      	movs	r3, #2
 80016b4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_MACTransmissionEnable(heth);
 80016b8:	f7ff fc10 	bl	8000edc <ETH_MACTransmissionEnable>
  ETH_MACReceptionEnable(heth);
 80016bc:	4620      	mov	r0, r4
 80016be:	f7ff fc22 	bl	8000f06 <ETH_MACReceptionEnable>
  ETH_FlushTransmitFIFO(heth);
 80016c2:	4620      	mov	r0, r4
 80016c4:	f7ff fc34 	bl	8000f30 <ETH_FlushTransmitFIFO>
  ETH_DMATransmissionEnable(heth);
 80016c8:	4620      	mov	r0, r4
 80016ca:	f7ff fbd1 	bl	8000e70 <ETH_DMATransmissionEnable>
  ETH_DMAReceptionEnable(heth);
 80016ce:	4620      	mov	r0, r4
 80016d0:	f7ff fbde 	bl	8000e90 <ETH_DMAReceptionEnable>
  heth->State= HAL_ETH_STATE_READY;
 80016d4:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80016d8:	2000      	movs	r0, #0
 80016da:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
}
 80016de:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(heth);
 80016e0:	2002      	movs	r0, #2
 80016e2:	e7fc      	b.n	80016de <HAL_ETH_Start+0x3e>

080016e4 <HAL_ETH_Stop>:
{  
 80016e4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(heth);
 80016e6:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d01a      	beq.n	8001724 <HAL_ETH_Stop+0x40>
 80016ee:	4604      	mov	r4, r0
 80016f0:	2501      	movs	r5, #1
 80016f2:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80016f6:	2302      	movs	r3, #2
 80016f8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  ETH_DMATransmissionDisable(heth);
 80016fc:	f7ff fbc0 	bl	8000e80 <ETH_DMATransmissionDisable>
  ETH_DMAReceptionDisable(heth);
 8001700:	4620      	mov	r0, r4
 8001702:	f7ff fbcd 	bl	8000ea0 <ETH_DMAReceptionDisable>
  ETH_MACReceptionDisable(heth);
 8001706:	4620      	mov	r0, r4
 8001708:	f7ff fc29 	bl	8000f5e <ETH_MACReceptionDisable>
  ETH_FlushTransmitFIFO(heth);
 800170c:	4620      	mov	r0, r4
 800170e:	f7ff fc0f 	bl	8000f30 <ETH_FlushTransmitFIFO>
  ETH_MACTransmissionDisable(heth);
 8001712:	4620      	mov	r0, r4
 8001714:	f7ff fc38 	bl	8000f88 <ETH_MACTransmissionDisable>
  heth->State = HAL_ETH_STATE_READY;
 8001718:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800171c:	2000      	movs	r0, #0
 800171e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
}
 8001722:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(heth);
 8001724:	2002      	movs	r0, #2
 8001726:	e7fc      	b.n	8001722 <HAL_ETH_Stop+0x3e>

08001728 <HAL_ETH_ConfigMAC>:
  __HAL_LOCK(heth);
 8001728:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800172c:	2b01      	cmp	r3, #1
 800172e:	f000 808e 	beq.w	800184e <HAL_ETH_ConfigMAC+0x126>
{
 8001732:	b570      	push	{r4, r5, r6, lr}
 8001734:	460c      	mov	r4, r1
 8001736:	4605      	mov	r5, r0
  __HAL_LOCK(heth);
 8001738:	2301      	movs	r3, #1
 800173a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  heth->State= HAL_ETH_STATE_BUSY;
 800173e:	2302      	movs	r3, #2
 8001740:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (macconf != NULL)
 8001744:	2900      	cmp	r1, #0
 8001746:	d071      	beq.n	800182c <HAL_ETH_ConfigMAC+0x104>
    tmpreg1 = (heth->Instance)->MACCR;
 8001748:	6802      	ldr	r2, [r0, #0]
 800174a:	6813      	ldr	r3, [r2, #0]
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800174c:	4941      	ldr	r1, [pc, #260]	; (8001854 <HAL_ETH_ConfigMAC+0x12c>)
 800174e:	4019      	ands	r1, r3
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001750:	6823      	ldr	r3, [r4, #0]
                         macconf->Jabber | 
 8001752:	6860      	ldr	r0, [r4, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001754:	4303      	orrs	r3, r0
                         macconf->InterFrameGap |
 8001756:	68a0      	ldr	r0, [r4, #8]
                         macconf->Jabber | 
 8001758:	4303      	orrs	r3, r0
                         macconf->CarrierSense |
 800175a:	68e0      	ldr	r0, [r4, #12]
                         macconf->InterFrameGap |
 800175c:	4303      	orrs	r3, r0
                         (heth->Init).Speed | 
 800175e:	68a8      	ldr	r0, [r5, #8]
                         macconf->CarrierSense |
 8001760:	4303      	orrs	r3, r0
                         macconf->ReceiveOwn |
 8001762:	6920      	ldr	r0, [r4, #16]
                         (heth->Init).Speed | 
 8001764:	4303      	orrs	r3, r0
                         macconf->LoopbackMode |
 8001766:	6960      	ldr	r0, [r4, #20]
                         macconf->ReceiveOwn |
 8001768:	4303      	orrs	r3, r0
                         (heth->Init).DuplexMode | 
 800176a:	68e8      	ldr	r0, [r5, #12]
                         macconf->LoopbackMode |
 800176c:	4303      	orrs	r3, r0
                         macconf->ChecksumOffload |    
 800176e:	69a0      	ldr	r0, [r4, #24]
                         (heth->Init).DuplexMode | 
 8001770:	4303      	orrs	r3, r0
                         macconf->RetryTransmission | 
 8001772:	69e0      	ldr	r0, [r4, #28]
                         macconf->ChecksumOffload |    
 8001774:	4303      	orrs	r3, r0
                         macconf->AutomaticPadCRCStrip | 
 8001776:	6a20      	ldr	r0, [r4, #32]
                         macconf->RetryTransmission | 
 8001778:	4303      	orrs	r3, r0
                         macconf->BackOffLimit | 
 800177a:	6a60      	ldr	r0, [r4, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800177c:	4303      	orrs	r3, r0
                         macconf->DeferralCheck);
 800177e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001780:	4303      	orrs	r3, r0
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001782:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001784:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001786:	682b      	ldr	r3, [r5, #0]
 8001788:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800178a:	2001      	movs	r0, #1
 800178c:	f7ff fae8 	bl	8000d60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001790:	682b      	ldr	r3, [r5, #0]
 8001792:	601e      	str	r6, [r3, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001794:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001796:	6b22      	ldr	r2, [r4, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001798:	4313      	orrs	r3, r2
                                          macconf->PassControlFrames |
 800179a:	6b62      	ldr	r2, [r4, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800179c:	4313      	orrs	r3, r2
                                          macconf->BroadcastFramesReception | 
 800179e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
                                          macconf->PassControlFrames |
 80017a0:	4313      	orrs	r3, r2
                                          macconf->DestinationAddrFilter |
 80017a2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80017a4:	4313      	orrs	r3, r2
                                          macconf->PromiscuousMode |
 80017a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80017a8:	4313      	orrs	r3, r2
                                          macconf->MulticastFramesFilter |
 80017aa:	6c62      	ldr	r2, [r4, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80017ac:	4313      	orrs	r3, r2
                                          macconf->UnicastFramesFilter);
 80017ae:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80017b0:	682a      	ldr	r2, [r5, #0]
                                          macconf->MulticastFramesFilter |
 80017b2:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80017b4:	6053      	str	r3, [r2, #4]
     tmpreg1 = (heth->Instance)->MACFFR;
 80017b6:	682b      	ldr	r3, [r5, #0]
 80017b8:	685e      	ldr	r6, [r3, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80017ba:	2001      	movs	r0, #1
 80017bc:	f7ff fad0 	bl	8000d60 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80017c0:	682b      	ldr	r3, [r5, #0]
 80017c2:	605e      	str	r6, [r3, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80017c4:	682b      	ldr	r3, [r5, #0]
 80017c6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80017c8:	609a      	str	r2, [r3, #8]
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80017ca:	682b      	ldr	r3, [r5, #0]
 80017cc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80017ce:	60da      	str	r2, [r3, #12]
     tmpreg1 = (heth->Instance)->MACFCR;
 80017d0:	6829      	ldr	r1, [r5, #0]
 80017d2:	698a      	ldr	r2, [r1, #24]
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80017d4:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 80017d8:	0412      	lsls	r2, r2, #16
 80017da:	0c12      	lsrs	r2, r2, #16
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80017dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ZeroQuantaPause |
 80017de:	6da3      	ldr	r3, [r4, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80017e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                          macconf->PauseLowThreshold |
 80017e4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80017e6:	4303      	orrs	r3, r0
                          macconf->UnicastPauseFrameDetect | 
 80017e8:	6e20      	ldr	r0, [r4, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80017ea:	4303      	orrs	r3, r0
                          macconf->ReceiveFlowControl |
 80017ec:	6e60      	ldr	r0, [r4, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80017ee:	4303      	orrs	r3, r0
                          macconf->TransmitFlowControl); 
 80017f0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80017f2:	4303      	orrs	r3, r0
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80017f4:	4313      	orrs	r3, r2
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80017f6:	618b      	str	r3, [r1, #24]
     tmpreg1 = (heth->Instance)->MACFCR;
 80017f8:	682b      	ldr	r3, [r5, #0]
 80017fa:	699e      	ldr	r6, [r3, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80017fc:	2001      	movs	r0, #1
 80017fe:	f7ff faaf 	bl	8000d60 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001802:	682b      	ldr	r3, [r5, #0]
 8001804:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001806:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001808:	6f21      	ldr	r1, [r4, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800180a:	682a      	ldr	r2, [r5, #0]
 800180c:	430b      	orrs	r3, r1
 800180e:	61d3      	str	r3, [r2, #28]
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001810:	682b      	ldr	r3, [r5, #0]
 8001812:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001814:	2001      	movs	r0, #1
 8001816:	f7ff faa3 	bl	8000d60 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800181a:	682b      	ldr	r3, [r5, #0]
 800181c:	61dc      	str	r4, [r3, #28]
  heth->State= HAL_ETH_STATE_READY;
 800181e:	2301      	movs	r3, #1
 8001820:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8001824:	2000      	movs	r0, #0
 8001826:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
}
 800182a:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = (heth->Instance)->MACCR;
 800182c:	6801      	ldr	r1, [r0, #0]
 800182e:	680a      	ldr	r2, [r1, #0]
    tmpreg1 &= ~(0x00004800U);
 8001830:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001834:	6883      	ldr	r3, [r0, #8]
 8001836:	68c0      	ldr	r0, [r0, #12]
 8001838:	4303      	orrs	r3, r0
 800183a:	4313      	orrs	r3, r2
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800183c:	600b      	str	r3, [r1, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 800183e:	682b      	ldr	r3, [r5, #0]
 8001840:	681c      	ldr	r4, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001842:	2001      	movs	r0, #1
 8001844:	f7ff fa8c 	bl	8000d60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001848:	682b      	ldr	r3, [r5, #0]
 800184a:	601c      	str	r4, [r3, #0]
 800184c:	e7e7      	b.n	800181e <HAL_ETH_ConfigMAC+0xf6>
  __HAL_LOCK(heth);
 800184e:	2002      	movs	r0, #2
}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	ff20810f 	.word	0xff20810f

08001858 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001858:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800185a:	490a      	ldr	r1, [pc, #40]	; (8001884 <FLASH_Program_DoubleWord+0x2c>)
 800185c:	690c      	ldr	r4, [r1, #16]
 800185e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8001862:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001864:	690c      	ldr	r4, [r1, #16]
 8001866:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 800186a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 800186c:	690c      	ldr	r4, [r1, #16]
 800186e:	f044 0401 	orr.w	r4, r4, #1
 8001872:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001874:	6002      	str	r2, [r0, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001876:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800187a:	6043      	str	r3, [r0, #4]
}
 800187c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00

08001888 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <FLASH_Program_Word+0x20>)
 800188a:	691a      	ldr	r2, [r3, #16]
 800188c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001890:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001898:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	f042 0201 	orr.w	r2, r2, #1
 80018a0:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80018a2:	6001      	str	r1, [r0, #0]
}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00

080018ac <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <FLASH_Program_HalfWord+0x20>)
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80018b4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018bc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80018be:	691a      	ldr	r2, [r3, #16]
 80018c0:	f042 0201 	orr.w	r2, r2, #1
 80018c4:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 80018c6:	8001      	strh	r1, [r0, #0]
}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40023c00 	.word	0x40023c00

080018d0 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <FLASH_Program_Byte+0x1c>)
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80018d8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	f042 0201 	orr.w	r2, r2, #1
 80018e4:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 80018e6:	7001      	strb	r1, [r0, #0]
}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40023c00 	.word	0x40023c00

080018f0 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80018f0:	4b20      	ldr	r3, [pc, #128]	; (8001974 <FLASH_SetErrorCode+0x84>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f013 0f10 	tst.w	r3, #16
 80018f8:	d007      	beq.n	800190a <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80018fa:	4a1f      	ldr	r2, [pc, #124]	; (8001978 <FLASH_SetErrorCode+0x88>)
 80018fc:	69d3      	ldr	r3, [r2, #28]
 80018fe:	f043 0310 	orr.w	r3, r3, #16
 8001902:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <FLASH_SetErrorCode+0x84>)
 8001906:	2210      	movs	r2, #16
 8001908:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <FLASH_SetErrorCode+0x84>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f013 0f20 	tst.w	r3, #32
 8001912:	d007      	beq.n	8001924 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001914:	4a18      	ldr	r2, [pc, #96]	; (8001978 <FLASH_SetErrorCode+0x88>)
 8001916:	69d3      	ldr	r3, [r2, #28]
 8001918:	f043 0308 	orr.w	r3, r3, #8
 800191c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <FLASH_SetErrorCode+0x84>)
 8001920:	2220      	movs	r2, #32
 8001922:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <FLASH_SetErrorCode+0x84>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f013 0f40 	tst.w	r3, #64	; 0x40
 800192c:	d007      	beq.n	800193e <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <FLASH_SetErrorCode+0x88>)
 8001930:	69d3      	ldr	r3, [r2, #28]
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <FLASH_SetErrorCode+0x84>)
 800193a:	2240      	movs	r2, #64	; 0x40
 800193c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <FLASH_SetErrorCode+0x84>)
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001946:	d007      	beq.n	8001958 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001948:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <FLASH_SetErrorCode+0x88>)
 800194a:	69d3      	ldr	r3, [r2, #28]
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <FLASH_SetErrorCode+0x84>)
 8001954:	2280      	movs	r2, #128	; 0x80
 8001956:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <FLASH_SetErrorCode+0x84>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	f013 0f02 	tst.w	r3, #2
 8001960:	d007      	beq.n	8001972 <FLASH_SetErrorCode+0x82>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001962:	4a05      	ldr	r2, [pc, #20]	; (8001978 <FLASH_SetErrorCode+0x88>)
 8001964:	69d3      	ldr	r3, [r2, #28]
 8001966:	f043 0320 	orr.w	r3, r3, #32
 800196a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800196c:	4b01      	ldr	r3, [pc, #4]	; (8001974 <FLASH_SetErrorCode+0x84>)
 800196e:	2202      	movs	r2, #2
 8001970:	60da      	str	r2, [r3, #12]
  }
}
 8001972:	4770      	bx	lr
 8001974:	40023c00 	.word	0x40023c00
 8001978:	2000199c 	.word	0x2000199c

0800197c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_FLASH_Unlock+0x28>)
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	db01      	blt.n	8001988 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8001984:	2000      	movs	r0, #0
 8001986:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_FLASH_Unlock+0x28>)
 800198a:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_FLASH_Unlock+0x2c>)
 800198c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800198e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001992:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	2b00      	cmp	r3, #0
 8001998:	db01      	blt.n	800199e <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 800199a:	2000      	movs	r0, #0
 800199c:	4770      	bx	lr
      status = HAL_ERROR;
 800199e:	2001      	movs	r0, #1
}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40023c00 	.word	0x40023c00
 80019a8:	45670123 	.word	0x45670123

080019ac <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 80019ac:	4a03      	ldr	r2, [pc, #12]	; (80019bc <HAL_FLASH_Lock+0x10>)
 80019ae:	6913      	ldr	r3, [r2, #16]
 80019b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019b4:	6113      	str	r3, [r2, #16]
}
 80019b6:	2000      	movs	r0, #0
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40023c00 	.word	0x40023c00

080019c0 <FLASH_WaitForLastOperation>:
{ 
 80019c0:	b538      	push	{r3, r4, r5, lr}
 80019c2:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80019c4:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <FLASH_WaitForLastOperation+0x5c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 80019ca:	f002 fd05 	bl	80043d8 <HAL_GetTick>
 80019ce:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <FLASH_WaitForLastOperation+0x60>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80019d8:	d00a      	beq.n	80019f0 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 80019da:	f1b4 3fff 	cmp.w	r4, #4294967295
 80019de:	d0f7      	beq.n	80019d0 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80019e0:	b1cc      	cbz	r4, 8001a16 <FLASH_WaitForLastOperation+0x56>
 80019e2:	f002 fcf9 	bl	80043d8 <HAL_GetTick>
 80019e6:	1b40      	subs	r0, r0, r5
 80019e8:	42a0      	cmp	r0, r4
 80019ea:	d9f1      	bls.n	80019d0 <FLASH_WaitForLastOperation+0x10>
        return HAL_TIMEOUT;
 80019ec:	2003      	movs	r0, #3
 80019ee:	e00d      	b.n	8001a0c <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <FLASH_WaitForLastOperation+0x60>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	f013 0f01 	tst.w	r3, #1
 80019f8:	d002      	beq.n	8001a00 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <FLASH_WaitForLastOperation+0x60>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <FLASH_WaitForLastOperation+0x60>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	f013 0ff2 	tst.w	r3, #242	; 0xf2
 8001a08:	d101      	bne.n	8001a0e <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 8001a0a:	2000      	movs	r0, #0
}  
 8001a0c:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 8001a0e:	f7ff ff6f 	bl	80018f0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001a12:	2001      	movs	r0, #1
 8001a14:	e7fa      	b.n	8001a0c <FLASH_WaitForLastOperation+0x4c>
        return HAL_TIMEOUT;
 8001a16:	2003      	movs	r0, #3
 8001a18:	e7f8      	b.n	8001a0c <FLASH_WaitForLastOperation+0x4c>
 8001a1a:	bf00      	nop
 8001a1c:	2000199c 	.word	0x2000199c
 8001a20:	40023c00 	.word	0x40023c00

08001a24 <HAL_FLASH_Program>:
{
 8001a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8001a26:	4c1d      	ldr	r4, [pc, #116]	; (8001a9c <HAL_FLASH_Program+0x78>)
 8001a28:	7e24      	ldrb	r4, [r4, #24]
 8001a2a:	2c01      	cmp	r4, #1
 8001a2c:	d034      	beq.n	8001a98 <HAL_FLASH_Program+0x74>
 8001a2e:	461f      	mov	r7, r3
 8001a30:	4616      	mov	r6, r2
 8001a32:	460d      	mov	r5, r1
 8001a34:	4604      	mov	r4, r0
 8001a36:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <HAL_FLASH_Program+0x78>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a40:	f7ff ffbe 	bl	80019c0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001a44:	4601      	mov	r1, r0
 8001a46:	b998      	cbnz	r0, 8001a70 <HAL_FLASH_Program+0x4c>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a48:	b1bc      	cbz	r4, 8001a7a <HAL_FLASH_Program+0x56>
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a4a:	2c01      	cmp	r4, #1
 8001a4c:	d01a      	beq.n	8001a84 <HAL_FLASH_Program+0x60>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a4e:	2c02      	cmp	r4, #2
 8001a50:	d01d      	beq.n	8001a8e <HAL_FLASH_Program+0x6a>
      FLASH_Program_DoubleWord(Address, Data);
 8001a52:	4632      	mov	r2, r6
 8001a54:	463b      	mov	r3, r7
 8001a56:	4628      	mov	r0, r5
 8001a58:	f7ff fefe 	bl	8001858 <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a60:	f7ff ffae 	bl	80019c0 <FLASH_WaitForLastOperation>
 8001a64:	4601      	mov	r1, r0
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a66:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <HAL_FLASH_Program+0x7c>)
 8001a68:	6913      	ldr	r3, [r2, #16]
 8001a6a:	f023 0301 	bic.w	r3, r3, #1
 8001a6e:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8001a70:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_FLASH_Program+0x78>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	761a      	strb	r2, [r3, #24]
}
 8001a76:	4608      	mov	r0, r1
 8001a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a7a:	b2f1      	uxtb	r1, r6
 8001a7c:	4628      	mov	r0, r5
 8001a7e:	f7ff ff27 	bl	80018d0 <FLASH_Program_Byte>
 8001a82:	e7eb      	b.n	8001a5c <HAL_FLASH_Program+0x38>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a84:	b2b1      	uxth	r1, r6
 8001a86:	4628      	mov	r0, r5
 8001a88:	f7ff ff10 	bl	80018ac <FLASH_Program_HalfWord>
 8001a8c:	e7e6      	b.n	8001a5c <HAL_FLASH_Program+0x38>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a8e:	4631      	mov	r1, r6
 8001a90:	4628      	mov	r0, r5
 8001a92:	f7ff fef9 	bl	8001888 <FLASH_Program_Word>
 8001a96:	e7e1      	b.n	8001a5c <HAL_FLASH_Program+0x38>
  __HAL_LOCK(&pFlash);
 8001a98:	2102      	movs	r1, #2
 8001a9a:	e7ec      	b.n	8001a76 <HAL_FLASH_Program+0x52>
 8001a9c:	2000199c 	.word	0x2000199c
 8001aa0:	40023c00 	.word	0x40023c00

08001aa4 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001aa4:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <FLASH_MassErase+0x20>)
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001aac:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	f042 0204 	orr.w	r2, r2, #4
 8001ab4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8001abc:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8001ac0:	6118      	str	r0, [r3, #16]
}
 8001ac2:	4770      	bx	lr
 8001ac4:	40023c00 	.word	0x40023c00

08001ac8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001ac8:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001aca:	b149      	cbz	r1, 8001ae0 <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001acc:	2901      	cmp	r1, #1
 8001ace:	d021      	beq.n	8001b14 <FLASH_Erase_Sector+0x4c>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001ad0:	2902      	cmp	r1, #2
 8001ad2:	d002      	beq.n	8001ada <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ad4:	f44f 7440 	mov.w	r4, #768	; 0x300
 8001ad8:	e003      	b.n	8001ae2 <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_WORD;
 8001ada:	f44f 7400 	mov.w	r4, #512	; 0x200
 8001ade:	e000      	b.n	8001ae2 <FLASH_Erase_Sector+0x1a>
     tmp_psize = FLASH_PSIZE_BYTE;
 8001ae0:	2400      	movs	r4, #0
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <FLASH_Erase_Sector+0x54>)
 8001ae4:	6919      	ldr	r1, [r3, #16]
 8001ae6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001aea:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 8001aec:	691a      	ldr	r2, [r3, #16]
 8001aee:	4322      	orrs	r2, r4
 8001af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001af8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8001b00:	f040 0002 	orr.w	r0, r0, #2
 8001b04:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001b06:	691a      	ldr	r2, [r3, #16]
 8001b08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b0c:	611a      	str	r2, [r3, #16]
}
 8001b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b12:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001b14:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001b18:	e7e3      	b.n	8001ae2 <FLASH_Erase_Sector+0x1a>
 8001b1a:	bf00      	nop
 8001b1c:	40023c00 	.word	0x40023c00

08001b20 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001b20:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <FLASH_FlushCaches+0x5c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001b28:	d010      	beq.n	8001b4c <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <FLASH_FlushCaches+0x5c>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b32:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b42:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b4a:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <FLASH_FlushCaches+0x5c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001b54:	d010      	beq.n	8001b78 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <FLASH_FlushCaches+0x5c>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b5e:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b6e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b76:	601a      	str	r2, [r3, #0]
  }
}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40023c00 	.word	0x40023c00

08001b80 <HAL_FLASHEx_Erase>:
{
 8001b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8001b82:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <HAL_FLASHEx_Erase+0x8c>)
 8001b84:	7e1b      	ldrb	r3, [r3, #24]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d03e      	beq.n	8001c08 <HAL_FLASHEx_Erase+0x88>
 8001b8a:	460e      	mov	r6, r1
 8001b8c:	4604      	mov	r4, r0
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <HAL_FLASHEx_Erase+0x8c>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b98:	f7ff ff12 	bl	80019c0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001b9c:	4607      	mov	r7, r0
 8001b9e:	bb70      	cbnz	r0, 8001bfe <HAL_FLASHEx_Erase+0x7e>
    *SectorError = 0xFFFFFFFFU;
 8001ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba4:	6033      	str	r3, [r6, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d016      	beq.n	8001bda <HAL_FLASHEx_Erase+0x5a>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001bac:	68a5      	ldr	r5, [r4, #8]
 8001bae:	68e3      	ldr	r3, [r4, #12]
 8001bb0:	68a2      	ldr	r2, [r4, #8]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	42ab      	cmp	r3, r5
 8001bb6:	d920      	bls.n	8001bfa <HAL_FLASHEx_Erase+0x7a>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001bb8:	7c21      	ldrb	r1, [r4, #16]
 8001bba:	4628      	mov	r0, r5
 8001bbc:	f7ff ff84 	bl	8001ac8 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bc4:	f7ff fefc 	bl	80019c0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001bc8:	4a11      	ldr	r2, [pc, #68]	; (8001c10 <HAL_FLASHEx_Erase+0x90>)
 8001bca:	6913      	ldr	r3, [r2, #16]
 8001bcc:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001bd0:	6113      	str	r3, [r2, #16]
        if(status != HAL_OK) 
 8001bd2:	4607      	mov	r7, r0
 8001bd4:	b980      	cbnz	r0, 8001bf8 <HAL_FLASHEx_Erase+0x78>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001bd6:	3501      	adds	r5, #1
 8001bd8:	e7e9      	b.n	8001bae <HAL_FLASHEx_Erase+0x2e>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001bda:	6861      	ldr	r1, [r4, #4]
 8001bdc:	7c20      	ldrb	r0, [r4, #16]
 8001bde:	f7ff ff61 	bl	8001aa4 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001be2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001be6:	f7ff feeb 	bl	80019c0 <FLASH_WaitForLastOperation>
 8001bea:	4607      	mov	r7, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8001bec:	4a08      	ldr	r2, [pc, #32]	; (8001c10 <HAL_FLASHEx_Erase+0x90>)
 8001bee:	6913      	ldr	r3, [r2, #16]
 8001bf0:	f023 0304 	bic.w	r3, r3, #4
 8001bf4:	6113      	str	r3, [r2, #16]
 8001bf6:	e000      	b.n	8001bfa <HAL_FLASHEx_Erase+0x7a>
          *SectorError = index;
 8001bf8:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();    
 8001bfa:	f7ff ff91 	bl	8001b20 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8001bfe:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <HAL_FLASHEx_Erase+0x8c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	4638      	mov	r0, r7
 8001c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8001c08:	2702      	movs	r7, #2
 8001c0a:	e7fb      	b.n	8001c04 <HAL_FLASHEx_Erase+0x84>
 8001c0c:	2000199c 	.word	0x2000199c
 8001c10:	40023c00 	.word	0x40023c00

08001c14 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	2b0f      	cmp	r3, #15
 8001c18:	f200 80d7 	bhi.w	8001dca <HAL_GPIO_Init+0x1b6>
{
 8001c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	e039      	b.n	8001c96 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c22:	2207      	movs	r2, #7
 8001c24:	e000      	b.n	8001c28 <HAL_GPIO_Init+0x14>
 8001c26:	2200      	movs	r2, #0
 8001c28:	40aa      	lsls	r2, r5
 8001c2a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c2c:	3402      	adds	r4, #2
 8001c2e:	4d67      	ldr	r5, [pc, #412]	; (8001dcc <HAL_GPIO_Init+0x1b8>)
 8001c30:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c34:	4a66      	ldr	r2, [pc, #408]	; (8001dd0 <HAL_GPIO_Init+0x1bc>)
 8001c36:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001c38:	43f2      	mvns	r2, r6
 8001c3a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c3e:	684f      	ldr	r7, [r1, #4]
 8001c40:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001c44:	d001      	beq.n	8001c4a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8001c46:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 8001c4a:	4c61      	ldr	r4, [pc, #388]	; (8001dd0 <HAL_GPIO_Init+0x1bc>)
 8001c4c:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8001c4e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c54:	684f      	ldr	r7, [r1, #4]
 8001c56:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001c5a:	d001      	beq.n	8001c60 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001c5c:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 8001c60:	4c5b      	ldr	r4, [pc, #364]	; (8001dd0 <HAL_GPIO_Init+0x1bc>)
 8001c62:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c64:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001c66:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c6a:	684f      	ldr	r7, [r1, #4]
 8001c6c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001c70:	d001      	beq.n	8001c76 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8001c72:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 8001c76:	4c56      	ldr	r4, [pc, #344]	; (8001dd0 <HAL_GPIO_Init+0x1bc>)
 8001c78:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001c7a:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001c7c:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c7e:	684d      	ldr	r5, [r1, #4]
 8001c80:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8001c84:	d001      	beq.n	8001c8a <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8001c86:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 8001c8a:	4c51      	ldr	r4, [pc, #324]	; (8001dd0 <HAL_GPIO_Init+0x1bc>)
 8001c8c:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8e:	3301      	adds	r3, #1
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	f200 8098 	bhi.w	8001dc6 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8001c96:	2201      	movs	r2, #1
 8001c98:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9a:	680c      	ldr	r4, [r1, #0]
 8001c9c:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8001ca0:	42b2      	cmp	r2, r6
 8001ca2:	d1f4      	bne.n	8001c8e <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ca4:	684c      	ldr	r4, [r1, #4]
 8001ca6:	1e65      	subs	r5, r4, #1
 8001ca8:	2d01      	cmp	r5, #1
 8001caa:	d903      	bls.n	8001cb4 <HAL_GPIO_Init+0xa0>
 8001cac:	2c11      	cmp	r4, #17
 8001cae:	d001      	beq.n	8001cb4 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cb0:	2c12      	cmp	r4, #18
 8001cb2:	d112      	bne.n	8001cda <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8001cb4:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cb6:	005f      	lsls	r7, r3, #1
 8001cb8:	2403      	movs	r4, #3
 8001cba:	40bc      	lsls	r4, r7
 8001cbc:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cc0:	68cc      	ldr	r4, [r1, #12]
 8001cc2:	40bc      	lsls	r4, r7
 8001cc4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001cc6:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001cc8:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cca:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cce:	684c      	ldr	r4, [r1, #4]
 8001cd0:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8001cd8:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001cda:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cdc:	005f      	lsls	r7, r3, #1
 8001cde:	2203      	movs	r2, #3
 8001ce0:	40ba      	lsls	r2, r7
 8001ce2:	43d2      	mvns	r2, r2
 8001ce4:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce6:	688d      	ldr	r5, [r1, #8]
 8001ce8:	40bd      	lsls	r5, r7
 8001cea:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8001cec:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cee:	684c      	ldr	r4, [r1, #4]
 8001cf0:	2c02      	cmp	r4, #2
 8001cf2:	d001      	beq.n	8001cf8 <HAL_GPIO_Init+0xe4>
 8001cf4:	2c12      	cmp	r4, #18
 8001cf6:	d113      	bne.n	8001d20 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8001cf8:	08dd      	lsrs	r5, r3, #3
 8001cfa:	3508      	adds	r5, #8
 8001cfc:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d00:	f003 0407 	and.w	r4, r3, #7
 8001d04:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8001d08:	240f      	movs	r4, #15
 8001d0a:	fa04 f40c 	lsl.w	r4, r4, ip
 8001d0e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d12:	690c      	ldr	r4, [r1, #16]
 8001d14:	fa04 f40c 	lsl.w	r4, r4, ip
 8001d18:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001d1c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8001d20:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d22:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d24:	684c      	ldr	r4, [r1, #4]
 8001d26:	f004 0403 	and.w	r4, r4, #3
 8001d2a:	40bc      	lsls	r4, r7
 8001d2c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001d2e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d30:	684a      	ldr	r2, [r1, #4]
 8001d32:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001d36:	d0aa      	beq.n	8001c8e <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d38:	2200      	movs	r2, #0
 8001d3a:	9201      	str	r2, [sp, #4]
 8001d3c:	4a25      	ldr	r2, [pc, #148]	; (8001dd4 <HAL_GPIO_Init+0x1c0>)
 8001d3e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001d40:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001d44:	6454      	str	r4, [r2, #68]	; 0x44
 8001d46:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d48:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d4c:	9201      	str	r2, [sp, #4]
 8001d4e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001d50:	089c      	lsrs	r4, r3, #2
 8001d52:	1ca5      	adds	r5, r4, #2
 8001d54:	4a1d      	ldr	r2, [pc, #116]	; (8001dcc <HAL_GPIO_Init+0x1b8>)
 8001d56:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d5a:	f003 0203 	and.w	r2, r3, #3
 8001d5e:	0095      	lsls	r5, r2, #2
 8001d60:	220f      	movs	r2, #15
 8001d62:	40aa      	lsls	r2, r5
 8001d64:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d68:	4a1b      	ldr	r2, [pc, #108]	; (8001dd8 <HAL_GPIO_Init+0x1c4>)
 8001d6a:	4290      	cmp	r0, r2
 8001d6c:	f43f af5b 	beq.w	8001c26 <HAL_GPIO_Init+0x12>
 8001d70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d74:	4290      	cmp	r0, r2
 8001d76:	d01a      	beq.n	8001dae <HAL_GPIO_Init+0x19a>
 8001d78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d7c:	4290      	cmp	r0, r2
 8001d7e:	d018      	beq.n	8001db2 <HAL_GPIO_Init+0x19e>
 8001d80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d84:	4290      	cmp	r0, r2
 8001d86:	d016      	beq.n	8001db6 <HAL_GPIO_Init+0x1a2>
 8001d88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d8c:	4290      	cmp	r0, r2
 8001d8e:	d014      	beq.n	8001dba <HAL_GPIO_Init+0x1a6>
 8001d90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d94:	4290      	cmp	r0, r2
 8001d96:	d012      	beq.n	8001dbe <HAL_GPIO_Init+0x1aa>
 8001d98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d9c:	4290      	cmp	r0, r2
 8001d9e:	d010      	beq.n	8001dc2 <HAL_GPIO_Init+0x1ae>
 8001da0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001da4:	4290      	cmp	r0, r2
 8001da6:	f43f af3c 	beq.w	8001c22 <HAL_GPIO_Init+0xe>
 8001daa:	2208      	movs	r2, #8
 8001dac:	e73c      	b.n	8001c28 <HAL_GPIO_Init+0x14>
 8001dae:	2201      	movs	r2, #1
 8001db0:	e73a      	b.n	8001c28 <HAL_GPIO_Init+0x14>
 8001db2:	2202      	movs	r2, #2
 8001db4:	e738      	b.n	8001c28 <HAL_GPIO_Init+0x14>
 8001db6:	2203      	movs	r2, #3
 8001db8:	e736      	b.n	8001c28 <HAL_GPIO_Init+0x14>
 8001dba:	2204      	movs	r2, #4
 8001dbc:	e734      	b.n	8001c28 <HAL_GPIO_Init+0x14>
 8001dbe:	2205      	movs	r2, #5
 8001dc0:	e732      	b.n	8001c28 <HAL_GPIO_Init+0x14>
 8001dc2:	2206      	movs	r2, #6
 8001dc4:	e730      	b.n	8001c28 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001dc6:	b003      	add	sp, #12
 8001dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dca:	4770      	bx	lr
 8001dcc:	40013800 	.word	0x40013800
 8001dd0:	40013c00 	.word	0x40013c00
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020000 	.word	0x40020000

08001ddc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ddc:	b912      	cbnz	r2, 8001de4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dde:	0409      	lsls	r1, r1, #16
 8001de0:	6181      	str	r1, [r0, #24]
  }
}
 8001de2:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001de4:	6181      	str	r1, [r0, #24]
 8001de6:	4770      	bx	lr

08001de8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001de8:	4b01      	ldr	r3, [pc, #4]	; (8001df0 <HAL_RCC_GetHCLKFreq+0x8>)
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000000 	.word	0x20000000

08001df4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8001df4:	b570      	push	{r4, r5, r6, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001dfe:	6800      	ldr	r0, [r0, #0]
 8001e00:	f001 fa58 	bl	80032b4 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001e04:	4606      	mov	r6, r0
 8001e06:	b110      	cbz	r0, 8001e0e <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 8001e08:	4630      	mov	r0, r6
 8001e0a:	b002      	add	sp, #8
 8001e0c:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8001e0e:	6820      	ldr	r0, [r4, #0]
 8001e10:	f001 fa63 	bl	80032da <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001e14:	b938      	cbnz	r0, 8001e26 <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8001e16:	2301      	movs	r3, #1
 8001e18:	64a3      	str	r3, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8001e1a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d00b      	beq.n	8001e38 <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8001e20:	4635      	mov	r5, r6
 8001e22:	4630      	mov	r0, r6
 8001e24:	e014      	b.n	8001e50 <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8001e26:	2300      	movs	r3, #0
 8001e28:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001e2a:	6820      	ldr	r0, [r4, #0]
 8001e2c:	f001 fa42 	bl	80032b4 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e30:	2800      	cmp	r0, #0
 8001e32:	d0f2      	beq.n	8001e1a <SD_PowerON+0x26>
      return errorstate;
 8001e34:	4606      	mov	r6, r0
 8001e36:	e7e7      	b.n	8001e08 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8001e38:	2100      	movs	r1, #0
 8001e3a:	6820      	ldr	r0, [r4, #0]
 8001e3c:	f001 fa64 	bl	8003308 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e40:	2800      	cmp	r0, #0
 8001e42:	d0ed      	beq.n	8001e20 <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001e44:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8001e48:	e7de      	b.n	8001e08 <SD_PowerON+0x14>
    count++;
 8001e4a:	9b01      	ldr	r3, [sp, #4]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8001e50:	9a01      	ldr	r2, [sp, #4]
 8001e52:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d813      	bhi.n	8001e82 <SD_PowerON+0x8e>
 8001e5a:	b995      	cbnz	r5, 8001e82 <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	6820      	ldr	r0, [r4, #0]
 8001e60:	f001 fa52 	bl	8003308 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e64:	b9d8      	cbnz	r0, 8001e9e <SD_PowerON+0xaa>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8001e66:	4912      	ldr	r1, [pc, #72]	; (8001eb0 <SD_PowerON+0xbc>)
 8001e68:	6820      	ldr	r0, [r4, #0]
 8001e6a:	f001 fa65 	bl	8003338 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001e6e:	4605      	mov	r5, r0
 8001e70:	b9b8      	cbnz	r0, 8001ea2 <SD_PowerON+0xae>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001e72:	2100      	movs	r1, #0
 8001e74:	6820      	ldr	r0, [r4, #0]
 8001e76:	f001 f860 	bl	8002f3a <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8001e7a:	0fc3      	lsrs	r3, r0, #31
 8001e7c:	d0e5      	beq.n	8001e4a <SD_PowerON+0x56>
 8001e7e:	461d      	mov	r5, r3
 8001e80:	e7e3      	b.n	8001e4a <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8001e82:	9a01      	ldr	r2, [sp, #4]
 8001e84:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d80d      	bhi.n	8001ea8 <SD_PowerON+0xb4>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8001e8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8001e90:	d102      	bne.n	8001e98 <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDSC;
 8001e92:	2300      	movs	r3, #0
 8001e94:	6463      	str	r3, [r4, #68]	; 0x44
 8001e96:	e7b7      	b.n	8001e08 <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	6463      	str	r3, [r4, #68]	; 0x44
 8001e9c:	e7b4      	b.n	8001e08 <SD_PowerON+0x14>
      return errorstate;
 8001e9e:	4606      	mov	r6, r0
 8001ea0:	e7b2      	b.n	8001e08 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001ea2:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8001ea6:	e7af      	b.n	8001e08 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8001ea8:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 8001eac:	e7ac      	b.n	8001e08 <SD_PowerON+0x14>
 8001eae:	bf00      	nop
 8001eb0:	c1100000 	.word	0xc1100000

08001eb4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8001eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eb8:	b088      	sub	sp, #32
 8001eba:	4604      	mov	r4, r0
 8001ebc:	460f      	mov	r7, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001ebe:	f002 fa8b 	bl	80043d8 <HAL_GetTick>
 8001ec2:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8001eca:	2108      	movs	r1, #8
 8001ecc:	6820      	ldr	r0, [r4, #0]
 8001ece:	f001 f947 	bl	8003160 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001ed2:	4605      	mov	r5, r0
 8001ed4:	b118      	cbz	r0, 8001ede <SD_FindSCR+0x2a>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8001ed6:	4628      	mov	r0, r5
 8001ed8:	b008      	add	sp, #32
 8001eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8001ede:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001ee0:	0409      	lsls	r1, r1, #16
 8001ee2:	6820      	ldr	r0, [r4, #0]
 8001ee4:	f001 fa10 	bl	8003308 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001ee8:	4605      	mov	r5, r0
 8001eea:	2800      	cmp	r0, #0
 8001eec:	d1f3      	bne.n	8001ed6 <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8001ef8:	2330      	movs	r3, #48	; 0x30
 8001efa:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001efc:	2302      	movs	r3, #2
 8001efe:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8001f04:	2301      	movs	r3, #1
 8001f06:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8001f08:	a902      	add	r1, sp, #8
 8001f0a:	6820      	ldr	r0, [r4, #0]
 8001f0c:	f001 f916 	bl	800313c <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8001f10:	6820      	ldr	r0, [r4, #0]
 8001f12:	f001 fa42 	bl	800339a <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f16:	4605      	mov	r5, r0
 8001f18:	2800      	cmp	r0, #0
 8001f1a:	d1dc      	bne.n	8001ed6 <SD_FindSCR+0x22>
  uint32_t index = 0U;
 8001f1c:	4680      	mov	r8, r0
 8001f1e:	e005      	b.n	8001f2c <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8001f20:	f002 fa5a 	bl	80043d8 <HAL_GetTick>
 8001f24:	1b80      	subs	r0, r0, r6
 8001f26:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001f2a:	d043      	beq.n	8001fb4 <SD_FindSCR+0x100>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8001f2c:	6820      	ldr	r0, [r4, #0]
 8001f2e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001f30:	f240 432a 	movw	r3, #1066	; 0x42a
 8001f34:	421a      	tst	r2, r3
 8001f36:	d10a      	bne.n	8001f4e <SD_FindSCR+0x9a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8001f38:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001f3a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001f3e:	d0ef      	beq.n	8001f20 <SD_FindSCR+0x6c>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8001f40:	f000 ffd2 	bl	8002ee8 <SDIO_ReadFIFO>
 8001f44:	f84d 0028 	str.w	r0, [sp, r8, lsl #2]
      index++;
 8001f48:	f108 0801 	add.w	r8, r8, #1
 8001f4c:	e7e8      	b.n	8001f20 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001f4e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001f50:	f013 0f08 	tst.w	r3, #8
 8001f54:	d125      	bne.n	8001fa2 <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001f56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001f58:	f013 0f02 	tst.w	r3, #2
 8001f5c:	d124      	bne.n	8001fa8 <SD_FindSCR+0xf4>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001f5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001f60:	f013 0f20 	tst.w	r3, #32
 8001f64:	d123      	bne.n	8001fae <SD_FindSCR+0xfa>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001f66:	f240 533a 	movw	r3, #1338	; 0x53a
 8001f6a:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8001f6c:	9a01      	ldr	r2, [sp, #4]
 8001f6e:	0213      	lsls	r3, r2, #8
 8001f70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001f74:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8001f78:	0a11      	lsrs	r1, r2, #8
 8001f7a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8001f7e:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8001f80:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8001f84:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8001f86:	9a00      	ldr	r2, [sp, #0]
 8001f88:	0213      	lsls	r3, r2, #8
 8001f8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001f8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8001f92:	0a11      	lsrs	r1, r2, #8
 8001f94:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8001f98:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8001f9a:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8001f9e:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8001fa0:	e799      	b.n	8001ed6 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8001fa2:	2508      	movs	r5, #8
 8001fa4:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8001fa6:	e796      	b.n	8001ed6 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8001fa8:	2502      	movs	r5, #2
 8001faa:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8001fac:	e793      	b.n	8001ed6 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8001fae:	2520      	movs	r5, #32
 8001fb0:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8001fb2:	e790      	b.n	8001ed6 <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8001fb4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8001fb8:	e78d      	b.n	8001ed6 <SD_FindSCR+0x22>

08001fba <SD_WideBus_Enable>:
{
 8001fba:	b510      	push	{r4, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	9100      	str	r1, [sp, #0]
 8001fc4:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8001fc6:	6800      	ldr	r0, [r0, #0]
 8001fc8:	f000 ffb7 	bl	8002f3a <SDIO_GetResponse>
 8001fcc:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8001fd0:	d116      	bne.n	8002000 <SD_WideBus_Enable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8001fd2:	4669      	mov	r1, sp
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f7ff ff6d 	bl	8001eb4 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001fda:	4603      	mov	r3, r0
 8001fdc:	b990      	cbnz	r0, 8002004 <SD_WideBus_Enable+0x4a>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8001fde:	9b01      	ldr	r3, [sp, #4]
 8001fe0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001fe4:	d011      	beq.n	800200a <SD_WideBus_Enable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001fe6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001fe8:	0409      	lsls	r1, r1, #16
 8001fea:	6820      	ldr	r0, [r4, #0]
 8001fec:	f001 f98c 	bl	8003308 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	b938      	cbnz	r0, 8002004 <SD_WideBus_Enable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8001ff4:	2102      	movs	r1, #2
 8001ff6:	6820      	ldr	r0, [r4, #0]
 8001ff8:	f001 f9b7 	bl	800336a <SDMMC_CmdBusWidth>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	e001      	b.n	8002004 <SD_WideBus_Enable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002000:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8002004:	4618      	mov	r0, r3
 8002006:	b002      	add	sp, #8
 8002008:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800200a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800200e:	e7f9      	b.n	8002004 <SD_WideBus_Enable+0x4a>

08002010 <SD_WideBus_Disable>:
{
 8002010:	b510      	push	{r4, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8002016:	2100      	movs	r1, #0
 8002018:	9100      	str	r1, [sp, #0]
 800201a:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800201c:	6800      	ldr	r0, [r0, #0]
 800201e:	f000 ff8c 	bl	8002f3a <SDIO_GetResponse>
 8002022:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8002026:	d116      	bne.n	8002056 <SD_WideBus_Disable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8002028:	4669      	mov	r1, sp
 800202a:	4620      	mov	r0, r4
 800202c:	f7ff ff42 	bl	8001eb4 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002030:	4603      	mov	r3, r0
 8002032:	b990      	cbnz	r0, 800205a <SD_WideBus_Disable+0x4a>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002034:	9b01      	ldr	r3, [sp, #4]
 8002036:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800203a:	d011      	beq.n	8002060 <SD_WideBus_Disable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800203c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800203e:	0409      	lsls	r1, r1, #16
 8002040:	6820      	ldr	r0, [r4, #0]
 8002042:	f001 f961 	bl	8003308 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002046:	4603      	mov	r3, r0
 8002048:	b938      	cbnz	r0, 800205a <SD_WideBus_Disable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800204a:	2100      	movs	r1, #0
 800204c:	6820      	ldr	r0, [r4, #0]
 800204e:	f001 f98c 	bl	800336a <SDMMC_CmdBusWidth>
 8002052:	4603      	mov	r3, r0
 8002054:	e001      	b.n	800205a <SD_WideBus_Disable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002056:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 800205a:	4618      	mov	r0, r3
 800205c:	b002      	add	sp, #8
 800205e:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002060:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002064:	e7f9      	b.n	800205a <SD_WideBus_Disable+0x4a>

08002066 <SD_SendStatus>:
{
 8002066:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 8002068:	b181      	cbz	r1, 800208c <SD_SendStatus+0x26>
 800206a:	460d      	mov	r5, r1
 800206c:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800206e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8002070:	0409      	lsls	r1, r1, #16
 8002072:	6800      	ldr	r0, [r0, #0]
 8002074:	f001 f9eb 	bl	800344e <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002078:	4606      	mov	r6, r0
 800207a:	b108      	cbz	r0, 8002080 <SD_SendStatus+0x1a>
}
 800207c:	4630      	mov	r0, r6
 800207e:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002080:	2100      	movs	r1, #0
 8002082:	6820      	ldr	r0, [r4, #0]
 8002084:	f000 ff59 	bl	8002f3a <SDIO_GetResponse>
 8002088:	6028      	str	r0, [r5, #0]
  return HAL_SD_ERROR_NONE;
 800208a:	e7f7      	b.n	800207c <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 800208c:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 8002090:	e7f4      	b.n	800207c <SD_SendStatus+0x16>
	...

08002094 <HAL_SD_ReadBlocks>:
{
 8002094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002098:	b086      	sub	sp, #24
 800209a:	4604      	mov	r4, r0
 800209c:	460d      	mov	r5, r1
 800209e:	4690      	mov	r8, r2
 80020a0:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 80020a2:	f002 f999 	bl	80043d8 <HAL_GetTick>
  if(NULL == pData)
 80020a6:	b16d      	cbz	r5, 80020c4 <HAL_SD_ReadBlocks+0x30>
 80020a8:	4607      	mov	r7, r0
  if(hsd->State == HAL_SD_STATE_READY)
 80020aa:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d00d      	beq.n	80020d0 <HAL_SD_ReadBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80020b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020ba:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80020bc:	2001      	movs	r0, #1
}
 80020be:	b006      	add	sp, #24
 80020c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80020c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020ca:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80020cc:	2001      	movs	r0, #1
 80020ce:	e7f6      	b.n	80020be <HAL_SD_ReadBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80020d4:	eb08 0306 	add.w	r3, r8, r6
 80020d8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80020da:	4293      	cmp	r3, r2
 80020dc:	d81b      	bhi.n	8002116 <HAL_SD_ReadBlocks+0x82>
    hsd->State = HAL_SD_STATE_BUSY;
 80020de:	2303      	movs	r3, #3
 80020e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	2200      	movs	r2, #0
 80020e8:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80020ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d001      	beq.n	80020f4 <HAL_SD_ReadBlocks+0x60>
      add *= 512U;
 80020f0:	ea4f 2848 	mov.w	r8, r8, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80020f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020f8:	6820      	ldr	r0, [r4, #0]
 80020fa:	f001 f831 	bl	8003160 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80020fe:	4603      	mov	r3, r0
 8002100:	b178      	cbz	r0, 8002122 <HAL_SD_ReadBlocks+0x8e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002102:	6822      	ldr	r2, [r4, #0]
 8002104:	497c      	ldr	r1, [pc, #496]	; (80022f8 <HAL_SD_ReadBlocks+0x264>)
 8002106:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002108:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800210a:	4318      	orrs	r0, r3
 800210c:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800210e:	2001      	movs	r0, #1
 8002110:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002114:	e7d3      	b.n	80020be <HAL_SD_ReadBlocks+0x2a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002116:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002118:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800211c:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 800211e:	2001      	movs	r0, #1
 8002120:	e7cd      	b.n	80020be <HAL_SD_ReadBlocks+0x2a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295
 8002126:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002128:	0273      	lsls	r3, r6, #9
 800212a:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800212c:	2390      	movs	r3, #144	; 0x90
 800212e:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002130:	2302      	movs	r3, #2
 8002132:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002134:	2300      	movs	r3, #0
 8002136:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002138:	2301      	movs	r3, #1
 800213a:	9305      	str	r3, [sp, #20]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800213c:	4669      	mov	r1, sp
 800213e:	6820      	ldr	r0, [r4, #0]
 8002140:	f000 fffc 	bl	800313c <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8002144:	2e01      	cmp	r6, #1
 8002146:	d90c      	bls.n	8002162 <HAL_SD_ReadBlocks+0xce>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002148:	2302      	movs	r3, #2
 800214a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800214c:	4641      	mov	r1, r8
 800214e:	6820      	ldr	r0, [r4, #0]
 8002150:	f001 f836 	bl	80031c0 <SDMMC_CmdReadMultiBlock>
 8002154:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 8002156:	f1ba 0f00 	cmp.w	sl, #0
 800215a:	d10a      	bne.n	8002172 <HAL_SD_ReadBlocks+0xde>
    dataremaining = config.DataLength;
 800215c:	f8dd 9004 	ldr.w	r9, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002160:	e02f      	b.n	80021c2 <HAL_SD_ReadBlocks+0x12e>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002162:	2301      	movs	r3, #1
 8002164:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002166:	4641      	mov	r1, r8
 8002168:	6820      	ldr	r0, [r4, #0]
 800216a:	f001 f811 	bl	8003190 <SDMMC_CmdReadSingleBlock>
 800216e:	4682      	mov	sl, r0
 8002170:	e7f1      	b.n	8002156 <HAL_SD_ReadBlocks+0xc2>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	4a60      	ldr	r2, [pc, #384]	; (80022f8 <HAL_SD_ReadBlocks+0x264>)
 8002176:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002178:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800217a:	ea43 030a 	orr.w	r3, r3, sl
 800217e:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002180:	2001      	movs	r0, #1
 8002182:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002186:	2300      	movs	r3, #0
 8002188:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800218a:	e798      	b.n	80020be <HAL_SD_ReadBlocks+0x2a>
          data = SDIO_ReadFIFO(hsd->Instance);
 800218c:	6820      	ldr	r0, [r4, #0]
 800218e:	f000 feab 	bl	8002ee8 <SDIO_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002192:	7028      	strb	r0, [r5, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002194:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8002198:	706b      	strb	r3, [r5, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800219a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800219e:	70ab      	strb	r3, [r5, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80021a0:	0e00      	lsrs	r0, r0, #24
 80021a2:	70e8      	strb	r0, [r5, #3]
          tempbuff++;
 80021a4:	3504      	adds	r5, #4
          dataremaining--;
 80021a6:	f1a9 0904 	sub.w	r9, r9, #4
        for(count = 0U; count < 8U; count++)
 80021aa:	f108 0801 	add.w	r8, r8, #1
 80021ae:	f1b8 0f07 	cmp.w	r8, #7
 80021b2:	d9eb      	bls.n	800218c <HAL_SD_ReadBlocks+0xf8>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80021b4:	f002 f910 	bl	80043d8 <HAL_GetTick>
 80021b8:	1bc0      	subs	r0, r0, r7
 80021ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80021bc:	4298      	cmp	r0, r3
 80021be:	d20f      	bcs.n	80021e0 <HAL_SD_ReadBlocks+0x14c>
 80021c0:	b173      	cbz	r3, 80021e0 <HAL_SD_ReadBlocks+0x14c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80021c2:	6820      	ldr	r0, [r4, #0]
 80021c4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80021c6:	f240 332a 	movw	r3, #810	; 0x32a
 80021ca:	421a      	tst	r2, r3
 80021cc:	d116      	bne.n	80021fc <HAL_SD_ReadBlocks+0x168>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80021ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80021d0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80021d4:	d0ee      	beq.n	80021b4 <HAL_SD_ReadBlocks+0x120>
 80021d6:	f1b9 0f00 	cmp.w	r9, #0
 80021da:	d0eb      	beq.n	80021b4 <HAL_SD_ReadBlocks+0x120>
        for(count = 0U; count < 8U; count++)
 80021dc:	46d0      	mov	r8, sl
 80021de:	e7e6      	b.n	80021ae <HAL_SD_ReadBlocks+0x11a>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021e0:	6823      	ldr	r3, [r4, #0]
 80021e2:	4a45      	ldr	r2, [pc, #276]	; (80022f8 <HAL_SD_ReadBlocks+0x264>)
 80021e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80021e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021ec:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80021ee:	2301      	movs	r3, #1
 80021f0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 80021f8:	2003      	movs	r0, #3
 80021fa:	e760      	b.n	80020be <HAL_SD_ReadBlocks+0x2a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80021fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80021fe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002202:	d008      	beq.n	8002216 <HAL_SD_ReadBlocks+0x182>
 8002204:	2e01      	cmp	r6, #1
 8002206:	d906      	bls.n	8002216 <HAL_SD_ReadBlocks+0x182>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002208:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800220a:	2b03      	cmp	r3, #3
 800220c:	d003      	beq.n	8002216 <HAL_SD_ReadBlocks+0x182>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800220e:	f001 f81f 	bl	8003250 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002212:	2800      	cmp	r0, #0
 8002214:	d137      	bne.n	8002286 <HAL_SD_ReadBlocks+0x1f2>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800221a:	f012 0f08 	tst.w	r2, #8
 800221e:	d13e      	bne.n	800229e <HAL_SD_ReadBlocks+0x20a>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002222:	f012 0f02 	tst.w	r2, #2
 8002226:	d146      	bne.n	80022b6 <HAL_SD_ReadBlocks+0x222>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800222a:	f012 0f20 	tst.w	r2, #32
 800222e:	d14e      	bne.n	80022ce <HAL_SD_ReadBlocks+0x23a>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002230:	6820      	ldr	r0, [r4, #0]
 8002232:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002234:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002238:	d055      	beq.n	80022e6 <HAL_SD_ReadBlocks+0x252>
 800223a:	f1b9 0f00 	cmp.w	r9, #0
 800223e:	d052      	beq.n	80022e6 <HAL_SD_ReadBlocks+0x252>
      data = SDIO_ReadFIFO(hsd->Instance);
 8002240:	f000 fe52 	bl	8002ee8 <SDIO_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002244:	7028      	strb	r0, [r5, #0]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002246:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800224a:	706b      	strb	r3, [r5, #1]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800224c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8002250:	70ab      	strb	r3, [r5, #2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002252:	0e00      	lsrs	r0, r0, #24
 8002254:	70e8      	strb	r0, [r5, #3]
      tempbuff++;
 8002256:	3504      	adds	r5, #4
      dataremaining--;
 8002258:	f1a9 0904 	sub.w	r9, r9, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800225c:	f002 f8bc 	bl	80043d8 <HAL_GetTick>
 8002260:	1bc0      	subs	r0, r0, r7
 8002262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002264:	4298      	cmp	r0, r3
 8002266:	d201      	bcs.n	800226c <HAL_SD_ReadBlocks+0x1d8>
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1e1      	bne.n	8002230 <HAL_SD_ReadBlocks+0x19c>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800226c:	6823      	ldr	r3, [r4, #0]
 800226e:	4a22      	ldr	r2, [pc, #136]	; (80022f8 <HAL_SD_ReadBlocks+0x264>)
 8002270:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002272:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002274:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002278:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800227a:	2001      	movs	r0, #1
 800227c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002280:	2300      	movs	r3, #0
 8002282:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8002284:	e71b      	b.n	80020be <HAL_SD_ReadBlocks+0x2a>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	491b      	ldr	r1, [pc, #108]	; (80022f8 <HAL_SD_ReadBlocks+0x264>)
 800228a:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800228c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800228e:	4303      	orrs	r3, r0
 8002290:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002292:	2001      	movs	r0, #1
 8002294:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002298:	2300      	movs	r3, #0
 800229a:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 800229c:	e70f      	b.n	80020be <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800229e:	4a16      	ldr	r2, [pc, #88]	; (80022f8 <HAL_SD_ReadBlocks+0x264>)
 80022a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80022a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022a4:	f043 0308 	orr.w	r3, r3, #8
 80022a8:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80022aa:	2001      	movs	r0, #1
 80022ac:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80022b4:	e703      	b.n	80020be <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022b6:	4a10      	ldr	r2, [pc, #64]	; (80022f8 <HAL_SD_ReadBlocks+0x264>)
 80022b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80022ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80022c2:	2001      	movs	r0, #1
 80022c4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80022cc:	e6f7      	b.n	80020be <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022ce:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <HAL_SD_ReadBlocks+0x264>)
 80022d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80022d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022d4:	f043 0320 	orr.w	r3, r3, #32
 80022d8:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80022da:	2001      	movs	r0, #1
 80022dc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80022e4:	e6eb      	b.n	80020be <HAL_SD_ReadBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80022e6:	f240 533a 	movw	r3, #1338	; 0x53a
 80022ea:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80022ec:	2301      	movs	r3, #1
 80022ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 80022f2:	2000      	movs	r0, #0
 80022f4:	e6e3      	b.n	80020be <HAL_SD_ReadBlocks+0x2a>
 80022f6:	bf00      	nop
 80022f8:	004005ff 	.word	0x004005ff

080022fc <HAL_SD_WriteBlocks>:
{
 80022fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002300:	b088      	sub	sp, #32
 8002302:	4604      	mov	r4, r0
 8002304:	460d      	mov	r5, r1
 8002306:	4690      	mov	r8, r2
 8002308:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 800230a:	f002 f865 	bl	80043d8 <HAL_GetTick>
  if(NULL == pData)
 800230e:	b16d      	cbz	r5, 800232c <HAL_SD_WriteBlocks+0x30>
 8002310:	4607      	mov	r7, r0
  if(hsd->State == HAL_SD_STATE_READY)
 8002312:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d00d      	beq.n	8002338 <HAL_SD_WriteBlocks+0x3c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800231c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800231e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002322:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002324:	2001      	movs	r0, #1
}
 8002326:	b008      	add	sp, #32
 8002328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800232c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800232e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002332:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002334:	2001      	movs	r0, #1
 8002336:	e7f6      	b.n	8002326 <HAL_SD_WriteBlocks+0x2a>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002338:	2300      	movs	r3, #0
 800233a:	63a3      	str	r3, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800233c:	eb08 0306 	add.w	r3, r8, r6
 8002340:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002342:	4293      	cmp	r3, r2
 8002344:	d81b      	bhi.n	800237e <HAL_SD_WriteBlocks+0x82>
    hsd->State = HAL_SD_STATE_BUSY;
 8002346:	2303      	movs	r3, #3
 8002348:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	2200      	movs	r2, #0
 8002350:	62da      	str	r2, [r3, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002352:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002354:	2b01      	cmp	r3, #1
 8002356:	d001      	beq.n	800235c <HAL_SD_WriteBlocks+0x60>
      add *= 512U;
 8002358:	ea4f 2848 	mov.w	r8, r8, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800235c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002360:	6820      	ldr	r0, [r4, #0]
 8002362:	f000 fefd 	bl	8003160 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002366:	4603      	mov	r3, r0
 8002368:	b178      	cbz	r0, 800238a <HAL_SD_WriteBlocks+0x8e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800236a:	6822      	ldr	r2, [r4, #0]
 800236c:	4967      	ldr	r1, [pc, #412]	; (800250c <HAL_SD_WriteBlocks+0x210>)
 800236e:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002370:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002372:	4318      	orrs	r0, r3
 8002374:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002376:	2001      	movs	r0, #1
 8002378:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 800237c:	e7d3      	b.n	8002326 <HAL_SD_WriteBlocks+0x2a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800237e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002380:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002384:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8002386:	2001      	movs	r0, #1
 8002388:	e7cd      	b.n	8002326 <HAL_SD_WriteBlocks+0x2a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800238a:	f04f 33ff 	mov.w	r3, #4294967295
 800238e:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002390:	0273      	lsls	r3, r6, #9
 8002392:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002394:	2390      	movs	r3, #144	; 0x90
 8002396:	9304      	str	r3, [sp, #16]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002398:	2300      	movs	r3, #0
 800239a:	9305      	str	r3, [sp, #20]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800239c:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800239e:	2301      	movs	r3, #1
 80023a0:	9307      	str	r3, [sp, #28]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80023a2:	a902      	add	r1, sp, #8
 80023a4:	6820      	ldr	r0, [r4, #0]
 80023a6:	f000 fec9 	bl	800313c <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 80023aa:	2e01      	cmp	r6, #1
 80023ac:	d90c      	bls.n	80023c8 <HAL_SD_WriteBlocks+0xcc>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80023ae:	2320      	movs	r3, #32
 80023b0:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80023b2:	4641      	mov	r1, r8
 80023b4:	6820      	ldr	r0, [r4, #0]
 80023b6:	f000 ff33 	bl	8003220 <SDMMC_CmdWriteMultiBlock>
 80023ba:	4682      	mov	sl, r0
    if(errorstate != HAL_SD_ERROR_NONE)
 80023bc:	f1ba 0f00 	cmp.w	sl, #0
 80023c0:	d10a      	bne.n	80023d8 <HAL_SD_WriteBlocks+0xdc>
    dataremaining = config.DataLength;
 80023c2:	f8dd 900c 	ldr.w	r9, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80023c6:	e033      	b.n	8002430 <HAL_SD_WriteBlocks+0x134>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80023c8:	2310      	movs	r3, #16
 80023ca:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80023cc:	4641      	mov	r1, r8
 80023ce:	6820      	ldr	r0, [r4, #0]
 80023d0:	f000 ff0e 	bl	80031f0 <SDMMC_CmdWriteSingleBlock>
 80023d4:	4682      	mov	sl, r0
 80023d6:	e7f1      	b.n	80023bc <HAL_SD_WriteBlocks+0xc0>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	4a4c      	ldr	r2, [pc, #304]	; (800250c <HAL_SD_WriteBlocks+0x210>)
 80023dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80023de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023e0:	ea43 030a 	orr.w	r3, r3, sl
 80023e4:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80023e6:	2001      	movs	r0, #1
 80023e8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80023f0:	e799      	b.n	8002326 <HAL_SD_WriteBlocks+0x2a>
          data = (uint32_t)(*tempbuff);
 80023f2:	782b      	ldrb	r3, [r5, #0]
          data |= ((uint32_t)(*tempbuff) << 8U);
 80023f4:	786a      	ldrb	r2, [r5, #1]
 80023f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
          data |= ((uint32_t)(*tempbuff) << 16U);
 80023fa:	78aa      	ldrb	r2, [r5, #2]
 80023fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002400:	78ea      	ldrb	r2, [r5, #3]
 8002402:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002406:	a908      	add	r1, sp, #32
 8002408:	f841 3d1c 	str.w	r3, [r1, #-28]!
          tempbuff++;
 800240c:	3504      	adds	r5, #4
          dataremaining--;
 800240e:	f1a9 0904 	sub.w	r9, r9, #4
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002412:	6820      	ldr	r0, [r4, #0]
 8002414:	f000 fd6b 	bl	8002eee <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002418:	f108 0801 	add.w	r8, r8, #1
 800241c:	f1b8 0f07 	cmp.w	r8, #7
 8002420:	d9e7      	bls.n	80023f2 <HAL_SD_WriteBlocks+0xf6>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002422:	f001 ffd9 	bl	80043d8 <HAL_GetTick>
 8002426:	1bc0      	subs	r0, r0, r7
 8002428:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800242a:	4298      	cmp	r0, r3
 800242c:	d20f      	bcs.n	800244e <HAL_SD_WriteBlocks+0x152>
 800242e:	b173      	cbz	r3, 800244e <HAL_SD_WriteBlocks+0x152>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002430:	6820      	ldr	r0, [r4, #0]
 8002432:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002434:	f240 331a 	movw	r3, #794	; 0x31a
 8002438:	421a      	tst	r2, r3
 800243a:	d116      	bne.n	800246a <HAL_SD_WriteBlocks+0x16e>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800243c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800243e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002442:	d0ee      	beq.n	8002422 <HAL_SD_WriteBlocks+0x126>
 8002444:	f1b9 0f00 	cmp.w	r9, #0
 8002448:	d0eb      	beq.n	8002422 <HAL_SD_WriteBlocks+0x126>
        for(count = 0U; count < 8U; count++)
 800244a:	46d0      	mov	r8, sl
 800244c:	e7e6      	b.n	800241c <HAL_SD_WriteBlocks+0x120>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	4a2e      	ldr	r2, [pc, #184]	; (800250c <HAL_SD_WriteBlocks+0x210>)
 8002452:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002454:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002456:	ea43 030a 	orr.w	r3, r3, sl
 800245a:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800245c:	2301      	movs	r3, #1
 800245e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002462:	2300      	movs	r3, #0
 8002464:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8002466:	2003      	movs	r0, #3
 8002468:	e75d      	b.n	8002326 <HAL_SD_WriteBlocks+0x2a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800246a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800246c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002470:	d007      	beq.n	8002482 <HAL_SD_WriteBlocks+0x186>
 8002472:	2e01      	cmp	r6, #1
 8002474:	d905      	bls.n	8002482 <HAL_SD_WriteBlocks+0x186>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002476:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002478:	2b03      	cmp	r3, #3
 800247a:	d002      	beq.n	8002482 <HAL_SD_WriteBlocks+0x186>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800247c:	f000 fee8 	bl	8003250 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002480:	b9c0      	cbnz	r0, 80024b4 <HAL_SD_WriteBlocks+0x1b8>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002486:	f012 0f08 	tst.w	r2, #8
 800248a:	d11f      	bne.n	80024cc <HAL_SD_WriteBlocks+0x1d0>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800248c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800248e:	f012 0f02 	tst.w	r2, #2
 8002492:	d127      	bne.n	80024e4 <HAL_SD_WriteBlocks+0x1e8>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002496:	f012 0f10 	tst.w	r2, #16
 800249a:	d02f      	beq.n	80024fc <HAL_SD_WriteBlocks+0x200>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800249c:	4a1b      	ldr	r2, [pc, #108]	; (800250c <HAL_SD_WriteBlocks+0x210>)
 800249e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80024a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024a2:	f043 0310 	orr.w	r3, r3, #16
 80024a6:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80024a8:	2001      	movs	r0, #1
 80024aa:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80024b2:	e738      	b.n	8002326 <HAL_SD_WriteBlocks+0x2a>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024b4:	6823      	ldr	r3, [r4, #0]
 80024b6:	4915      	ldr	r1, [pc, #84]	; (800250c <HAL_SD_WriteBlocks+0x210>)
 80024b8:	6399      	str	r1, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80024ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024bc:	4303      	orrs	r3, r0
 80024be:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80024c0:	2001      	movs	r0, #1
 80024c2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 80024ca:	e72c      	b.n	8002326 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024cc:	4a0f      	ldr	r2, [pc, #60]	; (800250c <HAL_SD_WriteBlocks+0x210>)
 80024ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80024d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024d2:	f043 0308 	orr.w	r3, r3, #8
 80024d6:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80024d8:	2001      	movs	r0, #1
 80024da:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80024de:	2300      	movs	r3, #0
 80024e0:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80024e2:	e720      	b.n	8002326 <HAL_SD_WriteBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024e4:	4a09      	ldr	r2, [pc, #36]	; (800250c <HAL_SD_WriteBlocks+0x210>)
 80024e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80024e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80024ea:	f043 0302 	orr.w	r3, r3, #2
 80024ee:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80024f0:	2001      	movs	r0, #1
 80024f2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80024fa:	e714      	b.n	8002326 <HAL_SD_WriteBlocks+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80024fc:	f240 523a 	movw	r2, #1338	; 0x53a
 8002500:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002502:	2301      	movs	r3, #1
 8002504:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8002508:	2000      	movs	r0, #0
 800250a:	e70c      	b.n	8002326 <HAL_SD_WriteBlocks+0x2a>
 800250c:	004005ff 	.word	0x004005ff

08002510 <HAL_SD_GetCardCSD>:
{
 8002510:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002512:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002514:	0f9b      	lsrs	r3, r3, #30
 8002516:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002518:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800251a:	f3c3 6383 	ubfx	r3, r3, #26, #4
 800251e:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002520:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800252a:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 800252e:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002530:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 8002534:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002536:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 800253a:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800253c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800253e:	0d1b      	lsrs	r3, r3, #20
 8002540:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002542:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800254c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800254e:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8002552:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002554:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8002556:	f3c3 3380 	ubfx	r3, r3, #14, #1
 800255a:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800255c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800255e:	f3c3 3340 	ubfx	r3, r3, #13, #1
 8002562:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002564:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8002566:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800256a:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800256c:	2300      	movs	r3, #0
 800256e:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8002570:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002572:	2b00      	cmp	r3, #0
 8002574:	f040 8088 	bne.w	8002688 <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002578:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800257a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800257e:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 8002582:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8002584:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8002588:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800258a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800258c:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 8002590:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002592:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800259c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800259e:	f3c3 5342 	ubfx	r3, r3, #21, #3
 80025a2:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80025a4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80025a6:	f3c3 4382 	ubfx	r3, r3, #18, #3
 80025aa:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80025ac:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80025ae:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 80025b2:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80025b4:	690b      	ldr	r3, [r1, #16]
 80025b6:	3301      	adds	r3, #1
 80025b8:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80025ba:	7e0a      	ldrb	r2, [r1, #24]
 80025bc:	f002 0207 	and.w	r2, r2, #7
 80025c0:	3202      	adds	r2, #2
 80025c2:	fa03 f202 	lsl.w	r2, r3, r2
 80025c6:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80025c8:	7a0b      	ldrb	r3, [r1, #8]
 80025ca:	f003 040f 	and.w	r4, r3, #15
 80025ce:	2301      	movs	r3, #1
 80025d0:	40a3      	lsls	r3, r4
 80025d2:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80025d4:	0a5b      	lsrs	r3, r3, #9
 80025d6:	fb03 f302 	mul.w	r3, r3, r2
 80025da:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80025dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025e0:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80025e2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80025e4:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80025e8:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80025ea:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80025ec:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 80025f0:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80025f2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80025f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025f8:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80025fa:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80025fc:	0fdb      	lsrs	r3, r3, #31
 80025fe:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002600:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002602:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8002606:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002608:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800260a:	f3c3 6382 	ubfx	r3, r3, #26, #3
 800260e:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002610:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8002612:	f3c3 5383 	ubfx	r3, r3, #22, #4
 8002616:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002618:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800261a:	f3c3 5340 	ubfx	r3, r3, #21, #1
 800261e:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002628:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 800262c:	f002 0201 	and.w	r2, r2, #1
 8002630:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002634:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8002636:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800263a:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800263e:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8002640:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8002644:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002648:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800264a:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800264e:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002652:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8002654:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8002658:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800265c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800265e:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8002662:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002666:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8002668:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800266c:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002670:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8002672:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8002676:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800267a:	2201      	movs	r2, #1
 800267c:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 8002680:	4618      	mov	r0, r3
}
 8002682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002686:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002688:	2b01      	cmp	r3, #1
 800268a:	d00b      	beq.n	80026a4 <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800268c:	6803      	ldr	r3, [r0, #0]
 800268e:	4a0e      	ldr	r2, [pc, #56]	; (80026c8 <HAL_SD_GetCardCSD+0x1b8>)
 8002690:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002692:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002698:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800269a:	2301      	movs	r3, #1
 800269c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 80026a0:	4618      	mov	r0, r3
 80026a2:	e7ee      	b.n	8002682 <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80026a4:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80026a6:	041b      	lsls	r3, r3, #16
 80026a8:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80026ac:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 80026b0:	4313      	orrs	r3, r2
 80026b2:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80026b4:	690b      	ldr	r3, [r1, #16]
 80026b6:	3301      	adds	r3, #1
 80026b8:	029b      	lsls	r3, r3, #10
 80026ba:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80026bc:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80026be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026c2:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80026c4:	6603      	str	r3, [r0, #96]	; 0x60
 80026c6:	e78c      	b.n	80025e2 <HAL_SD_GetCardCSD+0xd2>
 80026c8:	004005ff 	.word	0x004005ff

080026cc <SD_InitCard>:
{
 80026cc:	b570      	push	{r4, r5, r6, lr}
 80026ce:	b090      	sub	sp, #64	; 0x40
 80026d0:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 80026d2:	2301      	movs	r3, #1
 80026d4:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80026d8:	6800      	ldr	r0, [r0, #0]
 80026da:	f000 fc15 	bl	8002f08 <SDIO_GetPowerState>
 80026de:	2800      	cmp	r0, #0
 80026e0:	d06c      	beq.n	80027bc <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80026e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d145      	bne.n	8002774 <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80026e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d15d      	bne.n	80027aa <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80026ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d01d      	beq.n	8002730 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 80026f4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80026f8:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80026fa:	0409      	lsls	r1, r1, #16
 80026fc:	6820      	ldr	r0, [r4, #0]
 80026fe:	f000 fe79 	bl	80033f4 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002702:	4605      	mov	r5, r0
 8002704:	2800      	cmp	r0, #0
 8002706:	d15b      	bne.n	80027c0 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002708:	2100      	movs	r1, #0
 800270a:	6820      	ldr	r0, [r4, #0]
 800270c:	f000 fc15 	bl	8002f3a <SDIO_GetResponse>
 8002710:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002712:	2104      	movs	r1, #4
 8002714:	6820      	ldr	r0, [r4, #0]
 8002716:	f000 fc10 	bl	8002f3a <SDIO_GetResponse>
 800271a:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800271c:	2108      	movs	r1, #8
 800271e:	6820      	ldr	r0, [r4, #0]
 8002720:	f000 fc0b 	bl	8002f3a <SDIO_GetResponse>
 8002724:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002726:	210c      	movs	r1, #12
 8002728:	6820      	ldr	r0, [r4, #0]
 800272a:	f000 fc06 	bl	8002f3a <SDIO_GetResponse>
 800272e:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002730:	2104      	movs	r1, #4
 8002732:	6820      	ldr	r0, [r4, #0]
 8002734:	f000 fc01 	bl	8002f3a <SDIO_GetResponse>
 8002738:	0d00      	lsrs	r0, r0, #20
 800273a:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800273c:	a905      	add	r1, sp, #20
 800273e:	4620      	mov	r0, r4
 8002740:	f7ff fee6 	bl	8002510 <HAL_SD_GetCardCSD>
 8002744:	2800      	cmp	r0, #0
 8002746:	d13e      	bne.n	80027c6 <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002748:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800274a:	0412      	lsls	r2, r2, #16
 800274c:	2300      	movs	r3, #0
 800274e:	6820      	ldr	r0, [r4, #0]
 8002750:	f000 fd98 	bl	8003284 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002754:	4605      	mov	r5, r0
 8002756:	bb98      	cbnz	r0, 80027c0 <SD_InitCard+0xf4>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002758:	4623      	mov	r3, r4
 800275a:	f853 6b10 	ldr.w	r6, [r3], #16
 800275e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002762:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002766:	3404      	adds	r4, #4
 8002768:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800276c:	4630      	mov	r0, r6
 800276e:	f000 fb9f 	bl	8002eb0 <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 8002772:	e025      	b.n	80027c0 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002774:	6820      	ldr	r0, [r4, #0]
 8002776:	f000 fe28 	bl	80033ca <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800277a:	4605      	mov	r5, r0
 800277c:	bb00      	cbnz	r0, 80027c0 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800277e:	2100      	movs	r1, #0
 8002780:	6820      	ldr	r0, [r4, #0]
 8002782:	f000 fbda 	bl	8002f3a <SDIO_GetResponse>
 8002786:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002788:	2104      	movs	r1, #4
 800278a:	6820      	ldr	r0, [r4, #0]
 800278c:	f000 fbd5 	bl	8002f3a <SDIO_GetResponse>
 8002790:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002792:	2108      	movs	r1, #8
 8002794:	6820      	ldr	r0, [r4, #0]
 8002796:	f000 fbd0 	bl	8002f3a <SDIO_GetResponse>
 800279a:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800279c:	210c      	movs	r1, #12
 800279e:	6820      	ldr	r0, [r4, #0]
 80027a0:	f000 fbcb 	bl	8002f3a <SDIO_GetResponse>
 80027a4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 80027a8:	e79e      	b.n	80026e8 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80027aa:	f10d 0112 	add.w	r1, sp, #18
 80027ae:	6820      	ldr	r0, [r4, #0]
 80027b0:	f000 fe35 	bl	800341e <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80027b4:	4605      	mov	r5, r0
 80027b6:	2800      	cmp	r0, #0
 80027b8:	d099      	beq.n	80026ee <SD_InitCard+0x22>
 80027ba:	e001      	b.n	80027c0 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80027bc:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 80027c0:	4628      	mov	r0, r5
 80027c2:	b010      	add	sp, #64	; 0x40
 80027c4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80027c6:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80027ca:	e7f9      	b.n	80027c0 <SD_InitCard+0xf4>

080027cc <HAL_SD_InitCard>:
{
 80027cc:	b570      	push	{r4, r5, r6, lr}
 80027ce:	b08a      	sub	sp, #40	; 0x28
 80027d0:	4605      	mov	r5, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80027d2:	2300      	movs	r3, #0
 80027d4:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80027d6:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80027d8:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80027da:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80027dc:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80027de:	2376      	movs	r3, #118	; 0x76
 80027e0:	9309      	str	r3, [sp, #36]	; 0x24
  status = SDIO_Init(hsd->Instance, Init);
 80027e2:	ab0a      	add	r3, sp, #40	; 0x28
 80027e4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80027e8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80027ec:	ab04      	add	r3, sp, #16
 80027ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027f0:	6828      	ldr	r0, [r5, #0]
 80027f2:	f000 fb5d 	bl	8002eb0 <SDIO_Init>
  if(status != HAL_OK)
 80027f6:	b118      	cbz	r0, 8002800 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 80027f8:	2401      	movs	r4, #1
}
 80027fa:	4620      	mov	r0, r4
 80027fc:	b00a      	add	sp, #40	; 0x28
 80027fe:	bd70      	pop	{r4, r5, r6, pc}
 8002800:	4604      	mov	r4, r0
  __HAL_SD_DISABLE(hsd);
 8002802:	4e10      	ldr	r6, [pc, #64]	; (8002844 <HAL_SD_InitCard+0x78>)
 8002804:	2300      	movs	r3, #0
 8002806:	6033      	str	r3, [r6, #0]
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002808:	6828      	ldr	r0, [r5, #0]
 800280a:	f000 fb75 	bl	8002ef8 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 800280e:	2301      	movs	r3, #1
 8002810:	6033      	str	r3, [r6, #0]
  errorstate = SD_PowerON(hsd);
 8002812:	4628      	mov	r0, r5
 8002814:	f7ff faee 	bl	8001df4 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002818:	4603      	mov	r3, r0
 800281a:	b130      	cbz	r0, 800282a <HAL_SD_InitCard+0x5e>
    hsd->State = HAL_SD_STATE_READY;
 800281c:	2401      	movs	r4, #1
 800281e:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002822:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8002824:	4318      	orrs	r0, r3
 8002826:	63a8      	str	r0, [r5, #56]	; 0x38
    return HAL_ERROR;
 8002828:	e7e7      	b.n	80027fa <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 800282a:	4628      	mov	r0, r5
 800282c:	f7ff ff4e 	bl	80026cc <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002830:	4603      	mov	r3, r0
 8002832:	2800      	cmp	r0, #0
 8002834:	d0e1      	beq.n	80027fa <HAL_SD_InitCard+0x2e>
    hsd->State = HAL_SD_STATE_READY;
 8002836:	2401      	movs	r4, #1
 8002838:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800283c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800283e:	4318      	orrs	r0, r3
 8002840:	63a8      	str	r0, [r5, #56]	; 0x38
    return HAL_ERROR;
 8002842:	e7da      	b.n	80027fa <HAL_SD_InitCard+0x2e>
 8002844:	422580a0 	.word	0x422580a0

08002848 <HAL_SD_Init>:
  if(hsd == NULL)
 8002848:	b1c0      	cbz	r0, 800287c <HAL_SD_Init+0x34>
{
 800284a:	b510      	push	{r4, lr}
 800284c:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 800284e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8002852:	b17b      	cbz	r3, 8002874 <HAL_SD_Init+0x2c>
  hsd->State = HAL_SD_STATE_BUSY;
 8002854:	2303      	movs	r3, #3
 8002856:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800285a:	4620      	mov	r0, r4
 800285c:	f7ff ffb6 	bl	80027cc <HAL_SD_InitCard>
 8002860:	4603      	mov	r3, r0
 8002862:	b970      	cbnz	r0, 8002882 <HAL_SD_Init+0x3a>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002864:	2200      	movs	r2, #0
 8002866:	63a2      	str	r2, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8002868:	6322      	str	r2, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800286a:	2201      	movs	r2, #1
 800286c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8002870:	4618      	mov	r0, r3
 8002872:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8002874:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8002876:	f7fe f8e9 	bl	8000a4c <HAL_SD_MspInit>
 800287a:	e7eb      	b.n	8002854 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
}
 800287e:	4618      	mov	r0, r3
 8002880:	4770      	bx	lr
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e7f4      	b.n	8002870 <HAL_SD_Init+0x28>

08002886 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002886:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002888:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800288a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800288c:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800288e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002890:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002892:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002894:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002896:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002898:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800289a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800289c:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800289e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80028a0:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80028a2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80028a4:	61cb      	str	r3, [r1, #28]
}
 80028a6:	2000      	movs	r0, #0
 80028a8:	4770      	bx	lr
	...

080028ac <HAL_SD_ConfigWideBusOperation>:
{
 80028ac:	b530      	push	{r4, r5, lr}
 80028ae:	b08b      	sub	sp, #44	; 0x2c
 80028b0:	4604      	mov	r4, r0
 80028b2:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 80028b4:	2303      	movs	r3, #3
 80028b6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 80028ba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80028bc:	2b03      	cmp	r3, #3
 80028be:	d01c      	beq.n	80028fa <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDIO_BUS_WIDE_8B)
 80028c0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80028c4:	d008      	beq.n	80028d8 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80028c6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80028ca:	d00a      	beq.n	80028e2 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80028cc:	b179      	cbz	r1, 80028ee <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80028ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80028d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028d4:	6383      	str	r3, [r0, #56]	; 0x38
 80028d6:	e014      	b.n	8002902 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80028d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80028da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028de:	6383      	str	r3, [r0, #56]	; 0x38
 80028e0:	e00f      	b.n	8002902 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 80028e2:	f7ff fb6a 	bl	8001fba <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 80028e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028e8:	4318      	orrs	r0, r3
 80028ea:	63a0      	str	r0, [r4, #56]	; 0x38
 80028ec:	e009      	b.n	8002902 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 80028ee:	f7ff fb8f 	bl	8002010 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 80028f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028f4:	4318      	orrs	r0, r3
 80028f6:	63a0      	str	r0, [r4, #56]	; 0x38
 80028f8:	e003      	b.n	8002902 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80028fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80028fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002900:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002902:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002904:	b13b      	cbz	r3, 8002916 <HAL_SD_ConfigWideBusOperation+0x6a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002906:	6823      	ldr	r3, [r4, #0]
 8002908:	4a10      	ldr	r2, [pc, #64]	; (800294c <HAL_SD_ConfigWideBusOperation+0xa0>)
 800290a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800290c:	2001      	movs	r0, #1
 800290e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8002912:	b00b      	add	sp, #44	; 0x2c
 8002914:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002916:	6863      	ldr	r3, [r4, #4]
 8002918:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800291a:	68a3      	ldr	r3, [r4, #8]
 800291c:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800291e:	68e3      	ldr	r3, [r4, #12]
 8002920:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8002922:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002924:	6963      	ldr	r3, [r4, #20]
 8002926:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002928:	69a3      	ldr	r3, [r4, #24]
 800292a:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 800292c:	ab0a      	add	r3, sp, #40	; 0x28
 800292e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8002932:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002936:	ab04      	add	r3, sp, #16
 8002938:	cb0e      	ldmia	r3, {r1, r2, r3}
 800293a:	6820      	ldr	r0, [r4, #0]
 800293c:	f000 fab8 	bl	8002eb0 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 8002940:	2301      	movs	r3, #1
 8002942:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8002946:	2000      	movs	r0, #0
 8002948:	e7e3      	b.n	8002912 <HAL_SD_ConfigWideBusOperation+0x66>
 800294a:	bf00      	nop
 800294c:	004005ff 	.word	0x004005ff

08002950 <HAL_SD_GetCardState>:
{
 8002950:	b510      	push	{r4, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8002956:	a902      	add	r1, sp, #8
 8002958:	2300      	movs	r3, #0
 800295a:	f841 3d04 	str.w	r3, [r1, #-4]!
  errorstate = SD_SendStatus(hsd, &resp1);
 800295e:	f7ff fb82 	bl	8002066 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002962:	b118      	cbz	r0, 800296c <HAL_SD_GetCardState+0x1c>
 8002964:	4603      	mov	r3, r0
    hsd->ErrorCode |= errorstate;
 8002966:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002968:	4318      	orrs	r0, r3
 800296a:	63a0      	str	r0, [r4, #56]	; 0x38
}
 800296c:	9801      	ldr	r0, [sp, #4]
 800296e:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8002972:	b002      	add	sp, #8
 8002974:	bd10      	pop	{r4, pc}
	...

08002978 <LL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Force and Release reset on clock of GPIOx Port */
  if (GPIOx == GPIOA)
 8002978:	4b44      	ldr	r3, [pc, #272]	; (8002a8c <LL_GPIO_DeInit+0x114>)
 800297a:	4298      	cmp	r0, r3
 800297c:	d019      	beq.n	80029b2 <LL_GPIO_DeInit+0x3a>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOA);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOA);
  }
  else if (GPIOx == GPIOB)
 800297e:	4b44      	ldr	r3, [pc, #272]	; (8002a90 <LL_GPIO_DeInit+0x118>)
 8002980:	4298      	cmp	r0, r3
 8002982:	d022      	beq.n	80029ca <LL_GPIO_DeInit+0x52>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOB);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOB);
  }
  else if (GPIOx == GPIOC)
 8002984:	4b43      	ldr	r3, [pc, #268]	; (8002a94 <LL_GPIO_DeInit+0x11c>)
 8002986:	4298      	cmp	r0, r3
 8002988:	d02b      	beq.n	80029e2 <LL_GPIO_DeInit+0x6a>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOC);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOC);
  }
#if defined(GPIOD)
  else if (GPIOx == GPIOD)
 800298a:	4b43      	ldr	r3, [pc, #268]	; (8002a98 <LL_GPIO_DeInit+0x120>)
 800298c:	4298      	cmp	r0, r3
 800298e:	d034      	beq.n	80029fa <LL_GPIO_DeInit+0x82>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOD);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOD);
  }
#endif /* GPIOD */
#if defined(GPIOE)
  else if (GPIOx == GPIOE)
 8002990:	4b42      	ldr	r3, [pc, #264]	; (8002a9c <LL_GPIO_DeInit+0x124>)
 8002992:	4298      	cmp	r0, r3
 8002994:	d03d      	beq.n	8002a12 <LL_GPIO_DeInit+0x9a>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOE);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOE);
  }
#endif /* GPIOE */
#if defined(GPIOF)
  else if (GPIOx == GPIOF)
 8002996:	4b42      	ldr	r3, [pc, #264]	; (8002aa0 <LL_GPIO_DeInit+0x128>)
 8002998:	4298      	cmp	r0, r3
 800299a:	d046      	beq.n	8002a2a <LL_GPIO_DeInit+0xb2>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOF);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOF);
  }
#endif /* GPIOF */
#if defined(GPIOG)
  else if (GPIOx == GPIOG)
 800299c:	4b41      	ldr	r3, [pc, #260]	; (8002aa4 <LL_GPIO_DeInit+0x12c>)
 800299e:	4298      	cmp	r0, r3
 80029a0:	d04f      	beq.n	8002a42 <LL_GPIO_DeInit+0xca>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOG);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOG);
  }
#endif /* GPIOG */
#if defined(GPIOH)
  else if (GPIOx == GPIOH)
 80029a2:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <LL_GPIO_DeInit+0x130>)
 80029a4:	4298      	cmp	r0, r3
 80029a6:	d058      	beq.n	8002a5a <LL_GPIO_DeInit+0xe2>
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOH);
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOH);
  }
#endif /* GPIOH */
#if defined(GPIOI)
  else if (GPIOx == GPIOI)
 80029a8:	4b40      	ldr	r3, [pc, #256]	; (8002aac <LL_GPIO_DeInit+0x134>)
 80029aa:	4298      	cmp	r0, r3
 80029ac:	d061      	beq.n	8002a72 <LL_GPIO_DeInit+0xfa>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOK);
  }
#endif /* GPIOK */
  else
  {
    status = ERROR;
 80029ae:	2001      	movs	r0, #1
  }

  return (status);
}
 80029b0:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 80029b2:	f503 5360 	add.w	r3, r3, #14336	; 0x3800
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	f022 0201 	bic.w	r2, r2, #1
 80029c4:	611a      	str	r2, [r3, #16]
  ErrorStatus status = SUCCESS;
 80029c6:	2000      	movs	r0, #0
 80029c8:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 80029ca:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	f042 0202 	orr.w	r2, r2, #2
 80029d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	f022 0202 	bic.w	r2, r2, #2
 80029dc:	611a      	str	r2, [r3, #16]
 80029de:	2000      	movs	r0, #0
 80029e0:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 80029e2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	f042 0204 	orr.w	r2, r2, #4
 80029ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	f022 0204 	bic.w	r2, r2, #4
 80029f4:	611a      	str	r2, [r3, #16]
 80029f6:	2000      	movs	r0, #0
 80029f8:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 80029fa:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	f042 0208 	orr.w	r2, r2, #8
 8002a04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	f022 0208 	bic.w	r2, r2, #8
 8002a0c:	611a      	str	r2, [r3, #16]
 8002a0e:	2000      	movs	r0, #0
 8002a10:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8002a12:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	f042 0210 	orr.w	r2, r2, #16
 8002a1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	f022 0210 	bic.w	r2, r2, #16
 8002a24:	611a      	str	r2, [r3, #16]
 8002a26:	2000      	movs	r0, #0
 8002a28:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8002a2a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	f042 0220 	orr.w	r2, r2, #32
 8002a34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	f022 0220 	bic.w	r2, r2, #32
 8002a3c:	611a      	str	r2, [r3, #16]
 8002a3e:	2000      	movs	r0, #0
 8002a40:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8002a42:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a54:	611a      	str	r2, [r3, #16]
 8002a56:	2000      	movs	r0, #0
 8002a58:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8002a5a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a6c:	611a      	str	r2, [r3, #16]
 8002a6e:	2000      	movs	r0, #0
 8002a70:	4770      	bx	lr
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8002a72:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a84:	611a      	str	r2, [r3, #16]
 8002a86:	2000      	movs	r0, #0
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40020000 	.word	0x40020000
 8002a90:	40020400 	.word	0x40020400
 8002a94:	40020800 	.word	0x40020800
 8002a98:	40020c00 	.word	0x40020c00
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40021400 	.word	0x40021400
 8002aa4:	40021800 	.word	0x40021800
 8002aa8:	40021c00 	.word	0x40021c00
 8002aac:	40022000 	.word	0x40022000

08002ab0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002ab0:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002ab2:	680a      	ldr	r2, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab4:	fa92 f2a2 	rbit	r2, r2
 8002ab8:	fab2 f282 	clz	r2, r2
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002abc:	e02d      	b.n	8002b1a <LL_GPIO_Init+0x6a>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002abe:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002ac0:	68c4      	ldr	r4, [r0, #12]
 8002ac2:	fa93 f5a3 	rbit	r5, r3
 8002ac6:	fab5 f585 	clz	r5, r5
 8002aca:	006d      	lsls	r5, r5, #1
 8002acc:	2703      	movs	r7, #3
 8002ace:	fa07 f505 	lsl.w	r5, r7, r5
 8002ad2:	ea24 0405 	bic.w	r4, r4, r5
 8002ad6:	fa93 f5a3 	rbit	r5, r3
 8002ada:	fab5 f585 	clz	r5, r5
 8002ade:	006d      	lsls	r5, r5, #1
 8002ae0:	fa06 f505 	lsl.w	r5, r6, r5
 8002ae4:	432c      	orrs	r4, r5
 8002ae6:	60c4      	str	r4, [r0, #12]
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002ae8:	684c      	ldr	r4, [r1, #4]
 8002aea:	2c02      	cmp	r4, #2
 8002aec:	d03f      	beq.n	8002b6e <LL_GPIO_Init+0xbe>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002aee:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002af0:	6805      	ldr	r5, [r0, #0]
 8002af2:	fa93 f6a3 	rbit	r6, r3
 8002af6:	fab6 f686 	clz	r6, r6
 8002afa:	0076      	lsls	r6, r6, #1
 8002afc:	2703      	movs	r7, #3
 8002afe:	fa07 f606 	lsl.w	r6, r7, r6
 8002b02:	ea25 0506 	bic.w	r5, r5, r6
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fa04 f303 	lsl.w	r3, r4, r3
 8002b14:	432b      	orrs	r3, r5
 8002b16:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8002b18:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002b1a:	680b      	ldr	r3, [r1, #0]
 8002b1c:	fa33 f402 	lsrs.w	r4, r3, r2
 8002b20:	d059      	beq.n	8002bd6 <LL_GPIO_Init+0x126>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002b22:	2401      	movs	r4, #1
 8002b24:	4094      	lsls	r4, r2
    if (currentpin)
 8002b26:	4023      	ands	r3, r4
 8002b28:	d0f6      	beq.n	8002b18 <LL_GPIO_Init+0x68>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002b2a:	684c      	ldr	r4, [r1, #4]
 8002b2c:	3c01      	subs	r4, #1
 8002b2e:	2c01      	cmp	r4, #1
 8002b30:	d8c5      	bhi.n	8002abe <LL_GPIO_Init+0xe>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002b32:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002b34:	6884      	ldr	r4, [r0, #8]
 8002b36:	fa93 f5a3 	rbit	r5, r3
 8002b3a:	fab5 f585 	clz	r5, r5
 8002b3e:	006d      	lsls	r5, r5, #1
 8002b40:	2703      	movs	r7, #3
 8002b42:	fa07 f505 	lsl.w	r5, r7, r5
 8002b46:	ea24 0405 	bic.w	r4, r4, r5
 8002b4a:	fa93 f5a3 	rbit	r5, r3
 8002b4e:	fab5 f585 	clz	r5, r5
 8002b52:	006d      	lsls	r5, r5, #1
 8002b54:	fa06 f505 	lsl.w	r5, r6, r5
 8002b58:	432c      	orrs	r4, r5
 8002b5a:	6084      	str	r4, [r0, #8]
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002b5c:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002b5e:	6844      	ldr	r4, [r0, #4]
 8002b60:	ea24 0403 	bic.w	r4, r4, r3
 8002b64:	fb03 f505 	mul.w	r5, r3, r5
 8002b68:	432c      	orrs	r4, r5
 8002b6a:	6044      	str	r4, [r0, #4]
 8002b6c:	e7a7      	b.n	8002abe <LL_GPIO_Init+0xe>
 8002b6e:	fa93 f4a3 	rbit	r4, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002b72:	fab4 f484 	clz	r4, r4
 8002b76:	2c07      	cmp	r4, #7
 8002b78:	d815      	bhi.n	8002ba6 <LL_GPIO_Init+0xf6>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002b7a:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002b7c:	6a04      	ldr	r4, [r0, #32]
 8002b7e:	fa93 f5a3 	rbit	r5, r3
 8002b82:	fab5 f585 	clz	r5, r5
 8002b86:	00ad      	lsls	r5, r5, #2
 8002b88:	270f      	movs	r7, #15
 8002b8a:	fa07 f505 	lsl.w	r5, r7, r5
 8002b8e:	ea24 0405 	bic.w	r4, r4, r5
 8002b92:	fa93 f5a3 	rbit	r5, r3
 8002b96:	fab5 f585 	clz	r5, r5
 8002b9a:	00ad      	lsls	r5, r5, #2
 8002b9c:	fa06 f505 	lsl.w	r5, r6, r5
 8002ba0:	432c      	orrs	r4, r5
 8002ba2:	6204      	str	r4, [r0, #32]
 8002ba4:	e7a3      	b.n	8002aee <LL_GPIO_Init+0x3e>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002ba6:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002ba8:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002baa:	0a1c      	lsrs	r4, r3, #8
 8002bac:	fa94 f7a4 	rbit	r7, r4
 8002bb0:	fab7 f787 	clz	r7, r7
 8002bb4:	00bf      	lsls	r7, r7, #2
 8002bb6:	f04f 0c0f 	mov.w	ip, #15
 8002bba:	fa0c f707 	lsl.w	r7, ip, r7
 8002bbe:	ea26 0607 	bic.w	r6, r6, r7
 8002bc2:	fa94 f4a4 	rbit	r4, r4
 8002bc6:	fab4 f484 	clz	r4, r4
 8002bca:	00a4      	lsls	r4, r4, #2
 8002bcc:	fa05 f404 	lsl.w	r4, r5, r4
 8002bd0:	4334      	orrs	r4, r6
 8002bd2:	6244      	str	r4, [r0, #36]	; 0x24
 8002bd4:	e78b      	b.n	8002aee <LL_GPIO_Init+0x3e>
  }

  return (SUCCESS);
}
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	bcf0      	pop	{r4, r5, r6, r7}
 8002bda:	4770      	bx	lr

08002bdc <LL_RCC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RCC registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_RCC_DeInit(void)
{
 8002bdc:	b082      	sub	sp, #8
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002bde:	4a23      	ldr	r2, [pc, #140]	; (8002c6c <LL_RCC_DeInit+0x90>)
 8002be0:	6813      	ldr	r3, [r2, #0]
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002be8:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <LL_RCC_DeInit+0x90>)
 8002bea:	681b      	ldr	r3, [r3, #0]

  /* Set HSION bit */
  LL_RCC_HSI_Enable();

  /* Wait for HSI READY bit */
  while(LL_RCC_HSI_IsReady() != 1U)
 8002bec:	f013 0f02 	tst.w	r3, #2
 8002bf0:	d0fa      	beq.n	8002be8 <LL_RCC_DeInit+0xc>
  {}

  /* Reset CFGR register */
  LL_RCC_WriteReg(CFGR, 0x00000000U);
 8002bf2:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <LL_RCC_DeInit+0x90>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]

  /* Read CR register */
  vl_mask = LL_RCC_ReadReg(CR);
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	9201      	str	r2, [sp, #4]

  /* Reset HSEON, HSEBYP, PLLON, CSSON bits */
  CLEAR_BIT(vl_mask,
 8002bfc:	9a01      	ldr	r2, [sp, #4]
 8002bfe:	f022 7286 	bic.w	r2, r2, #17563648	; 0x10c0000
 8002c02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c06:	9201      	str	r2, [sp, #4]
  CLEAR_BIT(vl_mask, RCC_CR_PLLSAION);
#endif /* RCC_PLLSAI_SUPPORT */

#if defined(RCC_PLLI2S_SUPPORT)
  /* Reset PLLI2SON bit */
  CLEAR_BIT(vl_mask, RCC_CR_PLLI2SON);
 8002c08:	9a01      	ldr	r2, [sp, #4]
 8002c0a:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002c0e:	9201      	str	r2, [sp, #4]
#endif /* RCC_PLLI2S_SUPPORT */

  /* Write new value in CR register */
  LL_RCC_WriteReg(CR, vl_mask);
 8002c10:	9a01      	ldr	r2, [sp, #4]
 8002c12:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002c1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c1e:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002c20:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <LL_RCC_DeInit+0x90>)
 8002c22:	681b      	ldr	r3, [r3, #0]

  /* Set HSITRIM bits to the reset value*/
  LL_RCC_HSI_SetCalibTrimming(0x10U);

  /* Wait for PLL READY bit to be reset */
  while(LL_RCC_PLL_IsReady() != 0U)
 8002c24:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c28:	d1fa      	bne.n	8002c20 <LL_RCC_DeInit+0x44>
  {}

  /* Reset PLLCFGR register */
  LL_RCC_WriteReg(PLLCFGR, RCC_PLLCFGR_RST_VALUE);
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <LL_RCC_DeInit+0x90>)
 8002c2c:	4a10      	ldr	r2, [pc, #64]	; (8002c70 <LL_RCC_DeInit+0x94>)
 8002c2e:	605a      	str	r2, [r3, #4]

#if defined(RCC_PLLI2S_SUPPORT)
  /* Reset PLLI2SCFGR register */
  LL_RCC_WriteReg(PLLI2SCFGR, RCC_PLLI2SCFGR_RST_VALUE);
 8002c30:	4a10      	ldr	r2, [pc, #64]	; (8002c74 <LL_RCC_DeInit+0x98>)
 8002c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  /* Reset PLLSAICFGR register */
  LL_RCC_WriteReg(PLLSAICFGR, RCC_PLLSAICFGR_RST_VALUE);
#endif /* RCC_PLLSAI_SUPPORT */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8002c3c:	60da      	str	r2, [r3, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c44:	60da      	str	r2, [r3, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	f442 021f 	orr.w	r2, r2, #10420224	; 0x9f0000
 8002c4c:	60da      	str	r2, [r3, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002c54:	60da      	str	r2, [r3, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c56:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002c58:	f022 0201 	bic.w	r2, r2, #1
 8002c5c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002c5e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002c60:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002c64:	675a      	str	r2, [r3, #116]	; 0x74

  return SUCCESS;
}
 8002c66:	2000      	movs	r0, #0
 8002c68:	b002      	add	sp, #8
 8002c6a:	4770      	bx	lr
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	24003010 	.word	0x24003010
 8002c74:	20003000 	.word	0x20003000

08002c78 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002c78:	4b03      	ldr	r3, [pc, #12]	; (8002c88 <RCC_GetHCLKClockFreq+0x10>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002c7c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002c80:	4a02      	ldr	r2, [pc, #8]	; (8002c8c <RCC_GetHCLKClockFreq+0x14>)
 8002c82:	5cd3      	ldrb	r3, [r2, r3]
}
 8002c84:	40d8      	lsrs	r0, r3
 8002c86:	4770      	bx	lr
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	08015ce8 	.word	0x08015ce8

08002c90 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <RCC_GetPCLK1ClockFreq+0x10>)
 8002c92:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002c94:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002c98:	4a02      	ldr	r2, [pc, #8]	; (8002ca4 <RCC_GetPCLK1ClockFreq+0x14>)
 8002c9a:	5cd3      	ldrb	r3, [r2, r3]
}
 8002c9c:	40d8      	lsrs	r0, r3
 8002c9e:	4770      	bx	lr
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	08015cf8 	.word	0x08015cf8

08002ca8 <RCC_GetPCLK2ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ca8:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <RCC_GetPCLK2ClockFreq+0x10>)
 8002caa:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002cac:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002cb0:	4a02      	ldr	r2, [pc, #8]	; (8002cbc <RCC_GetPCLK2ClockFreq+0x14>)
 8002cb2:	5cd3      	ldrb	r3, [r2, r3]
}
 8002cb4:	40d8      	lsrs	r0, r3
 8002cb6:	4770      	bx	lr
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	08015cf8 	.word	0x08015cf8

08002cc0 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8002cc8:	b923      	cbnz	r3, 8002cd4 <RCC_PLL_GetFreqDomain_SYS+0x14>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <RCC_PLL_GetFreqDomain_SYS+0x44>)
    default:
      pllinputfreq = HSI_VALUE;
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002ccc:	2808      	cmp	r0, #8
 8002cce:	d003      	beq.n	8002cd8 <RCC_PLL_GetFreqDomain_SYS+0x18>
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002cd0:	2000      	movs	r0, #0
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
}
 8002cd2:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8002cd6:	e7f9      	b.n	8002ccc <RCC_PLL_GetFreqDomain_SYS+0xc>
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002cd8:	4a09      	ldr	r2, [pc, #36]	; (8002d00 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8002cda:	6850      	ldr	r0, [r2, #4]
 8002cdc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002ce0:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002ce4:	6850      	ldr	r0, [r2, #4]
 8002ce6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002cea:	fb00 f003 	mul.w	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002cee:	6853      	ldr	r3, [r2, #4]
 8002cf0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	fbb0 f0f3 	udiv	r0, r0, r3
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800
 8002d04:	00f42400 	.word	0x00f42400
 8002d08:	007a1200 	.word	0x007a1200

08002d0c <RCC_GetSystemClockFreq>:
{
 8002d0c:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d0e:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <RCC_GetSystemClockFreq+0x24>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d007      	beq.n	8002d2a <RCC_GetSystemClockFreq+0x1e>
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d001      	beq.n	8002d22 <RCC_GetSystemClockFreq+0x16>
      frequency = HSI_VALUE;
 8002d1e:	4805      	ldr	r0, [pc, #20]	; (8002d34 <RCC_GetSystemClockFreq+0x28>)
}
 8002d20:	bd08      	pop	{r3, pc}
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002d22:	2008      	movs	r0, #8
 8002d24:	f7ff ffcc 	bl	8002cc0 <RCC_PLL_GetFreqDomain_SYS>
      break;
 8002d28:	e7fa      	b.n	8002d20 <RCC_GetSystemClockFreq+0x14>
      frequency = HSE_VALUE;
 8002d2a:	4803      	ldr	r0, [pc, #12]	; (8002d38 <RCC_GetSystemClockFreq+0x2c>)
  return frequency;
 8002d2c:	e7f8      	b.n	8002d20 <RCC_GetSystemClockFreq+0x14>
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	00f42400 	.word	0x00f42400
 8002d38:	007a1200 	.word	0x007a1200

08002d3c <LL_RCC_GetSystemClocksFreq>:
{
 8002d3c:	b510      	push	{r4, lr}
 8002d3e:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002d40:	f7ff ffe4 	bl	8002d0c <RCC_GetSystemClockFreq>
 8002d44:	6020      	str	r0, [r4, #0]
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002d46:	f7ff ff97 	bl	8002c78 <RCC_GetHCLKClockFreq>
 8002d4a:	6060      	str	r0, [r4, #4]
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002d4c:	f7ff ffa0 	bl	8002c90 <RCC_GetPCLK1ClockFreq>
 8002d50:	60a0      	str	r0, [r4, #8]
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002d52:	6860      	ldr	r0, [r4, #4]
 8002d54:	f7ff ffa8 	bl	8002ca8 <RCC_GetPCLK2ClockFreq>
 8002d58:	60e0      	str	r0, [r4, #12]
}
 8002d5a:	bd10      	pop	{r4, pc}

08002d5c <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <SDMMC_GetCmdError+0x30>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0b      	ldr	r2, [pc, #44]	; (8002d90 <SDMMC_GetCmdError+0x34>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	0a5a      	lsrs	r2, r3, #9
 8002d68:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d6c:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8002d70:	1e5a      	subs	r2, r3, #1
 8002d72:	b143      	cbz	r3, 8002d86 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8002d74:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 8002d76:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8002d78:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002d7c:	d0f8      	beq.n	8002d70 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002d7e:	23c5      	movs	r3, #197	; 0xc5
 8002d80:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8002d82:	2000      	movs	r0, #0
 8002d84:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8002d86:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002d8a:	4770      	bx	lr
 8002d8c:	20000000 	.word	0x20000000
 8002d90:	10624dd3 	.word	0x10624dd3

08002d94 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002d94:	4b15      	ldr	r3, [pc, #84]	; (8002dec <SDMMC_GetCmdResp2+0x58>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a15      	ldr	r2, [pc, #84]	; (8002df0 <SDMMC_GetCmdResp2+0x5c>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	0a5a      	lsrs	r2, r3, #9
 8002da0:	f241 3388 	movw	r3, #5000	; 0x1388
 8002da4:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8002da8:	1e5a      	subs	r2, r3, #1
 8002daa:	b1db      	cbz	r3, 8002de4 <SDMMC_GetCmdResp2+0x50>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8002dac:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002dae:	4613      	mov	r3, r2
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002db0:	f011 0f45 	tst.w	r1, #69	; 0x45
 8002db4:	d0f8      	beq.n	8002da8 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002db6:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8002dba:	d1f5      	bne.n	8002da8 <SDMMC_GetCmdResp2+0x14>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002dbc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002dbe:	f013 0f04 	tst.w	r3, #4
 8002dc2:	d107      	bne.n	8002dd4 <SDMMC_GetCmdResp2+0x40>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002dc4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002dc6:	f013 0f01 	tst.w	r3, #1
 8002dca:	d107      	bne.n	8002ddc <SDMMC_GetCmdResp2+0x48>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002dcc:	23c5      	movs	r3, #197	; 0xc5
 8002dce:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002dd4:	2304      	movs	r3, #4
 8002dd6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002dd8:	4618      	mov	r0, r3
 8002dda:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002ddc:	2301      	movs	r3, #1
 8002dde:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002de0:	4618      	mov	r0, r3
 8002de2:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8002de4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20000000 	.word	0x20000000
 8002df0:	10624dd3 	.word	0x10624dd3

08002df4 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002df4:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <SDMMC_GetCmdResp3+0x48>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a11      	ldr	r2, [pc, #68]	; (8002e40 <SDMMC_GetCmdResp3+0x4c>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	0a5a      	lsrs	r2, r3, #9
 8002e00:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e04:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8002e08:	1e5a      	subs	r2, r3, #1
 8002e0a:	b19b      	cbz	r3, 8002e34 <SDMMC_GetCmdResp3+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8002e0c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002e0e:	4613      	mov	r3, r2
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002e10:	f011 0f45 	tst.w	r1, #69	; 0x45
 8002e14:	d0f8      	beq.n	8002e08 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002e16:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8002e1a:	d1f5      	bne.n	8002e08 <SDMMC_GetCmdResp3+0x14>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002e1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e1e:	f013 0f04 	tst.w	r3, #4
 8002e22:	d103      	bne.n	8002e2c <SDMMC_GetCmdResp3+0x38>
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002e24:	23c5      	movs	r3, #197	; 0xc5
 8002e26:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002e28:	2000      	movs	r0, #0
 8002e2a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002e2c:	2304      	movs	r3, #4
 8002e2e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002e30:	4618      	mov	r0, r3
 8002e32:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8002e34:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000000 	.word	0x20000000
 8002e40:	10624dd3 	.word	0x10624dd3

08002e44 <SDMMC_GetCmdResp7>:
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002e44:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <SDMMC_GetCmdResp7+0x64>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a18      	ldr	r2, [pc, #96]	; (8002eac <SDMMC_GetCmdResp7+0x68>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	0a5a      	lsrs	r2, r3, #9
 8002e50:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e54:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8002e58:	1e5a      	subs	r2, r3, #1
 8002e5a:	b1fb      	cbz	r3, 8002e9c <SDMMC_GetCmdResp7+0x58>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8002e5c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002e5e:	4613      	mov	r3, r2
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002e60:	f011 0f45 	tst.w	r1, #69	; 0x45
 8002e64:	d0f8      	beq.n	8002e58 <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002e66:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8002e6a:	d1f5      	bne.n	8002e58 <SDMMC_GetCmdResp7+0x14>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002e6c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e6e:	f013 0f04 	tst.w	r3, #4
 8002e72:	d10b      	bne.n	8002e8c <SDMMC_GetCmdResp7+0x48>
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002e74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e76:	f013 0f01 	tst.w	r3, #1
 8002e7a:	d10b      	bne.n	8002e94 <SDMMC_GetCmdResp7+0x50>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8002e7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002e82:	d00e      	beq.n	8002ea2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8002e84:	2340      	movs	r3, #64	; 0x40
 8002e86:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002e88:	2000      	movs	r0, #0
 8002e8a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002e90:	4618      	mov	r0, r3
 8002e92:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002e94:	2301      	movs	r3, #1
 8002e96:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002e98:	4618      	mov	r0, r3
 8002e9a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8002e9c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002ea0:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 8002ea2:	2000      	movs	r0, #0
  
}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	10624dd3 	.word	0x10624dd3

08002eb0 <SDIO_Init>:
{
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	b410      	push	{r4}
 8002eb4:	ac02      	add	r4, sp, #8
 8002eb6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8002eba:	460b      	mov	r3, r1
 8002ebc:	9a03      	ldr	r2, [sp, #12]
 8002ebe:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 8002ec0:	9a04      	ldr	r2, [sp, #16]
             Init.ClockBypass         |\
 8002ec2:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8002ec4:	9a05      	ldr	r2, [sp, #20]
             Init.ClockPowerSave      |\
 8002ec6:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8002ec8:	9a06      	ldr	r2, [sp, #24]
             Init.BusWide             |\
 8002eca:	4313      	orrs	r3, r2
             Init.ClockDiv
 8002ecc:	9a07      	ldr	r2, [sp, #28]
             Init.HardwareFlowControl |\
 8002ece:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002ed0:	6842      	ldr	r2, [r0, #4]
 8002ed2:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 8002ed6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002eda:	4313      	orrs	r3, r2
 8002edc:	6043      	str	r3, [r0, #4]
}
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ee4:	b004      	add	sp, #16
 8002ee6:	4770      	bx	lr

08002ee8 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 8002ee8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8002eec:	4770      	bx	lr

08002eee <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8002eee:	680b      	ldr	r3, [r1, #0]
 8002ef0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	4770      	bx	lr

08002ef8 <SDIO_PowerState_ON>:
{  
 8002ef8:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002efa:	2303      	movs	r3, #3
 8002efc:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 8002efe:	2002      	movs	r0, #2
 8002f00:	f7fd ff2e 	bl	8000d60 <HAL_Delay>
}
 8002f04:	2000      	movs	r0, #0
 8002f06:	bd08      	pop	{r3, pc}

08002f08 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8002f08:	6800      	ldr	r0, [r0, #0]
}
 8002f0a:	f000 0003 	and.w	r0, r0, #3
 8002f0e:	4770      	bx	lr

08002f10 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8002f10:	680b      	ldr	r3, [r1, #0]
 8002f12:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002f14:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 8002f16:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002f18:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8002f1a:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8002f1c:	4313      	orrs	r3, r2
                       Command->CPSM);
 8002f1e:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8002f20:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002f22:	68c2      	ldr	r2, [r0, #12]
 8002f24:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8002f28:	f022 020f 	bic.w	r2, r2, #15
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60c3      	str	r3, [r0, #12]
}
 8002f30:	2000      	movs	r0, #0
 8002f32:	4770      	bx	lr

08002f34 <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 8002f34:	6900      	ldr	r0, [r0, #16]
}
 8002f36:	b2c0      	uxtb	r0, r0
 8002f38:	4770      	bx	lr

08002f3a <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8002f3a:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8002f3c:	5840      	ldr	r0, [r0, r1]
}  
 8002f3e:	4770      	bx	lr

08002f40 <SDMMC_GetCmdResp1>:
{
 8002f40:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002f42:	4b52      	ldr	r3, [pc, #328]	; (800308c <SDMMC_GetCmdResp1+0x14c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4c52      	ldr	r4, [pc, #328]	; (8003090 <SDMMC_GetCmdResp1+0x150>)
 8002f48:	fba4 4303 	umull	r4, r3, r4, r3
 8002f4c:	0a5b      	lsrs	r3, r3, #9
 8002f4e:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 8002f52:	1e53      	subs	r3, r2, #1
 8002f54:	2a00      	cmp	r2, #0
 8002f56:	d060      	beq.n	800301a <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDIOx->STA;
 8002f58:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002f5a:	461a      	mov	r2, r3
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002f5c:	f014 0f45 	tst.w	r4, #69	; 0x45
 8002f60:	d0f7      	beq.n	8002f52 <SDMMC_GetCmdResp1+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002f62:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8002f66:	d1f4      	bne.n	8002f52 <SDMMC_GetCmdResp1+0x12>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002f68:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f6a:	f013 0f04 	tst.w	r3, #4
 8002f6e:	d107      	bne.n	8002f80 <SDMMC_GetCmdResp1+0x40>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002f70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f72:	f013 0f01 	tst.w	r3, #1
 8002f76:	d007      	beq.n	8002f88 <SDMMC_GetCmdResp1+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002f78:	2301      	movs	r3, #1
 8002f7a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	e04e      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002f80:	2304      	movs	r3, #4
 8002f82:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002f84:	4618      	mov	r0, r3
 8002f86:	e04a      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
 8002f88:	460d      	mov	r5, r1
 8002f8a:	4604      	mov	r4, r0
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002f8c:	23c5      	movs	r3, #197	; 0xc5
 8002f8e:	6383      	str	r3, [r0, #56]	; 0x38
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002f90:	f7ff ffd0 	bl	8002f34 <SDIO_GetCommandResponse>
 8002f94:	42a8      	cmp	r0, r5
 8002f96:	d001      	beq.n	8002f9c <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002f98:	2001      	movs	r0, #1
 8002f9a:	e040      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f7ff ffcb 	bl	8002f3a <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002fa4:	4b3b      	ldr	r3, [pc, #236]	; (8003094 <SDMMC_GetCmdResp1+0x154>)
 8002fa6:	4003      	ands	r3, r0
 8002fa8:	b3d3      	cbz	r3, 8003020 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8002faa:	2800      	cmp	r0, #0
 8002fac:	db3a      	blt.n	8003024 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002fae:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8002fb2:	d13a      	bne.n	800302a <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002fb4:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8002fb8:	d139      	bne.n	800302e <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8002fba:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 8002fbe:	d138      	bne.n	8003032 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8002fc0:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8002fc4:	d138      	bne.n	8003038 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002fc6:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8002fca:	d138      	bne.n	800303e <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002fcc:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8002fd0:	d138      	bne.n	8003044 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8002fd2:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8002fd6:	d138      	bne.n	800304a <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8002fd8:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002fdc:	d138      	bne.n	8003050 <SDMMC_GetCmdResp1+0x110>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002fde:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8002fe2:	d138      	bne.n	8003056 <SDMMC_GetCmdResp1+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002fe4:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8002fe8:	d138      	bne.n	800305c <SDMMC_GetCmdResp1+0x11c>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8002fea:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8002fee:	d138      	bne.n	8003062 <SDMMC_GetCmdResp1+0x122>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8002ff0:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8002ff4:	d138      	bne.n	8003068 <SDMMC_GetCmdResp1+0x128>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8002ff6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8002ffa:	d138      	bne.n	800306e <SDMMC_GetCmdResp1+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002ffc:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003000:	d138      	bne.n	8003074 <SDMMC_GetCmdResp1+0x134>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003002:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8003006:	d138      	bne.n	800307a <SDMMC_GetCmdResp1+0x13a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003008:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800300c:	d138      	bne.n	8003080 <SDMMC_GetCmdResp1+0x140>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800300e:	f010 0f08 	tst.w	r0, #8
 8003012:	d038      	beq.n	8003086 <SDMMC_GetCmdResp1+0x146>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003014:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003018:	e001      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 800301a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800301e:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 8003020:	2000      	movs	r0, #0
 8003022:	e7fc      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003024:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8003028:	e7f9      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800302a:	2040      	movs	r0, #64	; 0x40
 800302c:	e7f7      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800302e:	2080      	movs	r0, #128	; 0x80
 8003030:	e7f5      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003032:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003036:	e7f2      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003038:	f44f 7000 	mov.w	r0, #512	; 0x200
 800303c:	e7ef      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800303e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003042:	e7ec      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003044:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003048:	e7e9      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800304a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800304e:	e7e6      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003050:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003054:	e7e3      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003056:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800305a:	e7e0      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 800305c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003060:	e7dd      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003062:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003066:	e7da      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003068:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800306c:	e7d7      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800306e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003072:	e7d4      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003074:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003078:	e7d1      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800307a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800307e:	e7ce      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 8003080:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003084:	e7cb      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003086:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800308a:	e7c8      	b.n	800301e <SDMMC_GetCmdResp1+0xde>
 800308c:	20000000 	.word	0x20000000
 8003090:	10624dd3 	.word	0x10624dd3
 8003094:	fdffe008 	.word	0xfdffe008

08003098 <SDMMC_GetCmdResp6>:
{
 8003098:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800309a:	4b26      	ldr	r3, [pc, #152]	; (8003134 <SDMMC_GetCmdResp6+0x9c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4c26      	ldr	r4, [pc, #152]	; (8003138 <SDMMC_GetCmdResp6+0xa0>)
 80030a0:	fba4 4303 	umull	r4, r3, r4, r3
 80030a4:	0a5c      	lsrs	r4, r3, #9
 80030a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80030aa:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 80030ae:	1e5c      	subs	r4, r3, #1
 80030b0:	b3b3      	cbz	r3, 8003120 <SDMMC_GetCmdResp6+0x88>
    sta_reg = SDIOx->STA;
 80030b2:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80030b4:	4623      	mov	r3, r4
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80030b6:	f015 0f45 	tst.w	r5, #69	; 0x45
 80030ba:	d0f8      	beq.n	80030ae <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80030bc:	f415 6f00 	tst.w	r5, #2048	; 0x800
 80030c0:	d1f5      	bne.n	80030ae <SDMMC_GetCmdResp6+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80030c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80030c4:	f013 0f04 	tst.w	r3, #4
 80030c8:	d107      	bne.n	80030da <SDMMC_GetCmdResp6+0x42>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80030ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80030cc:	f013 0f01 	tst.w	r3, #1
 80030d0:	d007      	beq.n	80030e2 <SDMMC_GetCmdResp6+0x4a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80030d2:	2301      	movs	r3, #1
 80030d4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80030d6:	4618      	mov	r0, r3
 80030d8:	e024      	b.n	8003124 <SDMMC_GetCmdResp6+0x8c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80030da:	2304      	movs	r3, #4
 80030dc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80030de:	4618      	mov	r0, r3
 80030e0:	e020      	b.n	8003124 <SDMMC_GetCmdResp6+0x8c>
 80030e2:	4616      	mov	r6, r2
 80030e4:	460d      	mov	r5, r1
 80030e6:	4604      	mov	r4, r0
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80030e8:	f7ff ff24 	bl	8002f34 <SDIO_GetCommandResponse>
 80030ec:	42a8      	cmp	r0, r5
 80030ee:	d001      	beq.n	80030f4 <SDMMC_GetCmdResp6+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80030f0:	2001      	movs	r0, #1
 80030f2:	e017      	b.n	8003124 <SDMMC_GetCmdResp6+0x8c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80030f4:	23c5      	movs	r3, #197	; 0xc5
 80030f6:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80030f8:	2100      	movs	r1, #0
 80030fa:	4620      	mov	r0, r4
 80030fc:	f7ff ff1d 	bl	8002f3a <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003100:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8003104:	d008      	beq.n	8003118 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003106:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800310a:	d10c      	bne.n	8003126 <SDMMC_GetCmdResp6+0x8e>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800310c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8003110:	d00c      	beq.n	800312c <SDMMC_GetCmdResp6+0x94>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003112:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003116:	e005      	b.n	8003124 <SDMMC_GetCmdResp6+0x8c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003118:	0c00      	lsrs	r0, r0, #16
 800311a:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 800311c:	2000      	movs	r0, #0
 800311e:	e001      	b.n	8003124 <SDMMC_GetCmdResp6+0x8c>
      return SDMMC_ERROR_TIMEOUT;
 8003120:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8003124:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003126:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800312a:	e7fb      	b.n	8003124 <SDMMC_GetCmdResp6+0x8c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800312c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003130:	e7f8      	b.n	8003124 <SDMMC_GetCmdResp6+0x8c>
 8003132:	bf00      	nop
 8003134:	20000000 	.word	0x20000000
 8003138:	10624dd3 	.word	0x10624dd3

0800313c <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 800313c:	680b      	ldr	r3, [r1, #0]
 800313e:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8003140:	684b      	ldr	r3, [r1, #4]
 8003142:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003144:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 8003146:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003148:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 800314a:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 800314c:	4313      	orrs	r3, r2
                       Data->DPSM);
 800314e:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8003150:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003152:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8003154:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8003158:	4313      	orrs	r3, r2
 800315a:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800315c:	2000      	movs	r0, #0
 800315e:	4770      	bx	lr

08003160 <SDMMC_CmdBlockLength>:
{
 8003160:	b530      	push	{r4, r5, lr}
 8003162:	b087      	sub	sp, #28
 8003164:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8003166:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8003168:	2410      	movs	r4, #16
 800316a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800316c:	2340      	movs	r3, #64	; 0x40
 800316e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003170:	2300      	movs	r3, #0
 8003172:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003178:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800317a:	a901      	add	r1, sp, #4
 800317c:	f7ff fec8 	bl	8002f10 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003180:	f241 3288 	movw	r2, #5000	; 0x1388
 8003184:	4621      	mov	r1, r4
 8003186:	4628      	mov	r0, r5
 8003188:	f7ff feda 	bl	8002f40 <SDMMC_GetCmdResp1>
}
 800318c:	b007      	add	sp, #28
 800318e:	bd30      	pop	{r4, r5, pc}

08003190 <SDMMC_CmdReadSingleBlock>:
{
 8003190:	b530      	push	{r4, r5, lr}
 8003192:	b087      	sub	sp, #28
 8003194:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003196:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003198:	2411      	movs	r4, #17
 800319a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800319c:	2340      	movs	r3, #64	; 0x40
 800319e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80031a0:	2300      	movs	r3, #0
 80031a2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80031a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031a8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80031aa:	a901      	add	r1, sp, #4
 80031ac:	f7ff feb0 	bl	8002f10 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80031b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b4:	4621      	mov	r1, r4
 80031b6:	4628      	mov	r0, r5
 80031b8:	f7ff fec2 	bl	8002f40 <SDMMC_GetCmdResp1>
}
 80031bc:	b007      	add	sp, #28
 80031be:	bd30      	pop	{r4, r5, pc}

080031c0 <SDMMC_CmdReadMultiBlock>:
{
 80031c0:	b530      	push	{r4, r5, lr}
 80031c2:	b087      	sub	sp, #28
 80031c4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80031c6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80031c8:	2412      	movs	r4, #18
 80031ca:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80031cc:	2340      	movs	r3, #64	; 0x40
 80031ce:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80031d0:	2300      	movs	r3, #0
 80031d2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80031d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031d8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80031da:	a901      	add	r1, sp, #4
 80031dc:	f7ff fe98 	bl	8002f10 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80031e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e4:	4621      	mov	r1, r4
 80031e6:	4628      	mov	r0, r5
 80031e8:	f7ff feaa 	bl	8002f40 <SDMMC_GetCmdResp1>
}
 80031ec:	b007      	add	sp, #28
 80031ee:	bd30      	pop	{r4, r5, pc}

080031f0 <SDMMC_CmdWriteSingleBlock>:
{
 80031f0:	b530      	push	{r4, r5, lr}
 80031f2:	b087      	sub	sp, #28
 80031f4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80031f6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80031f8:	2418      	movs	r4, #24
 80031fa:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80031fc:	2340      	movs	r3, #64	; 0x40
 80031fe:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003200:	2300      	movs	r3, #0
 8003202:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003208:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800320a:	a901      	add	r1, sp, #4
 800320c:	f7ff fe80 	bl	8002f10 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003210:	f241 3288 	movw	r2, #5000	; 0x1388
 8003214:	4621      	mov	r1, r4
 8003216:	4628      	mov	r0, r5
 8003218:	f7ff fe92 	bl	8002f40 <SDMMC_GetCmdResp1>
}
 800321c:	b007      	add	sp, #28
 800321e:	bd30      	pop	{r4, r5, pc}

08003220 <SDMMC_CmdWriteMultiBlock>:
{
 8003220:	b530      	push	{r4, r5, lr}
 8003222:	b087      	sub	sp, #28
 8003224:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003226:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003228:	2419      	movs	r4, #25
 800322a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800322c:	2340      	movs	r3, #64	; 0x40
 800322e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003230:	2300      	movs	r3, #0
 8003232:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003238:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800323a:	a901      	add	r1, sp, #4
 800323c:	f7ff fe68 	bl	8002f10 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003240:	f241 3288 	movw	r2, #5000	; 0x1388
 8003244:	4621      	mov	r1, r4
 8003246:	4628      	mov	r0, r5
 8003248:	f7ff fe7a 	bl	8002f40 <SDMMC_GetCmdResp1>
}
 800324c:	b007      	add	sp, #28
 800324e:	bd30      	pop	{r4, r5, pc}

08003250 <SDMMC_CmdStopTransfer>:
{
 8003250:	b530      	push	{r4, r5, lr}
 8003252:	b087      	sub	sp, #28
 8003254:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800325a:	240c      	movs	r4, #12
 800325c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800325e:	2240      	movs	r2, #64	; 0x40
 8003260:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003262:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003268:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800326a:	a901      	add	r1, sp, #4
 800326c:	f7ff fe50 	bl	8002f10 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003270:	4a03      	ldr	r2, [pc, #12]	; (8003280 <SDMMC_CmdStopTransfer+0x30>)
 8003272:	4621      	mov	r1, r4
 8003274:	4628      	mov	r0, r5
 8003276:	f7ff fe63 	bl	8002f40 <SDMMC_GetCmdResp1>
}
 800327a:	b007      	add	sp, #28
 800327c:	bd30      	pop	{r4, r5, pc}
 800327e:	bf00      	nop
 8003280:	05f5e100 	.word	0x05f5e100

08003284 <SDMMC_CmdSelDesel>:
{
 8003284:	b530      	push	{r4, r5, lr}
 8003286:	b087      	sub	sp, #28
 8003288:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800328a:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800328c:	2407      	movs	r4, #7
 800328e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003290:	2340      	movs	r3, #64	; 0x40
 8003292:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003294:	2300      	movs	r3, #0
 8003296:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800329c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800329e:	a901      	add	r1, sp, #4
 80032a0:	f7ff fe36 	bl	8002f10 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80032a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a8:	4621      	mov	r1, r4
 80032aa:	4628      	mov	r0, r5
 80032ac:	f7ff fe48 	bl	8002f40 <SDMMC_GetCmdResp1>
}
 80032b0:	b007      	add	sp, #28
 80032b2:	bd30      	pop	{r4, r5, pc}

080032b4 <SDMMC_CmdGoIdleState>:
{
 80032b4:	b510      	push	{r4, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80032be:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80032c0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80032c2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80032c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80032ca:	a901      	add	r1, sp, #4
 80032cc:	f7ff fe20 	bl	8002f10 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 80032d0:	4620      	mov	r0, r4
 80032d2:	f7ff fd43 	bl	8002d5c <SDMMC_GetCmdError>
}
 80032d6:	b006      	add	sp, #24
 80032d8:	bd10      	pop	{r4, pc}

080032da <SDMMC_CmdOperCond>:
{
 80032da:	b510      	push	{r4, lr}
 80032dc:	b086      	sub	sp, #24
 80032de:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80032e0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80032e4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80032e6:	2308      	movs	r3, #8
 80032e8:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80032ea:	2340      	movs	r3, #64	; 0x40
 80032ec:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80032ee:	2300      	movs	r3, #0
 80032f0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80032f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032f6:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80032f8:	a901      	add	r1, sp, #4
 80032fa:	f7ff fe09 	bl	8002f10 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80032fe:	4620      	mov	r0, r4
 8003300:	f7ff fda0 	bl	8002e44 <SDMMC_GetCmdResp7>
}
 8003304:	b006      	add	sp, #24
 8003306:	bd10      	pop	{r4, pc}

08003308 <SDMMC_CmdAppCommand>:
{
 8003308:	b530      	push	{r4, r5, lr}
 800330a:	b087      	sub	sp, #28
 800330c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800330e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003310:	2437      	movs	r4, #55	; 0x37
 8003312:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003314:	2340      	movs	r3, #64	; 0x40
 8003316:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003318:	2300      	movs	r3, #0
 800331a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800331c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003320:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003322:	a901      	add	r1, sp, #4
 8003324:	f7ff fdf4 	bl	8002f10 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003328:	f241 3288 	movw	r2, #5000	; 0x1388
 800332c:	4621      	mov	r1, r4
 800332e:	4628      	mov	r0, r5
 8003330:	f7ff fe06 	bl	8002f40 <SDMMC_GetCmdResp1>
}
 8003334:	b007      	add	sp, #28
 8003336:	bd30      	pop	{r4, r5, pc}

08003338 <SDMMC_CmdAppOperCommand>:
{
 8003338:	b510      	push	{r4, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800333e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8003342:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003346:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003348:	2329      	movs	r3, #41	; 0x29
 800334a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800334c:	2340      	movs	r3, #64	; 0x40
 800334e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003350:	2300      	movs	r3, #0
 8003352:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003358:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800335a:	a901      	add	r1, sp, #4
 800335c:	f7ff fdd8 	bl	8002f10 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003360:	4620      	mov	r0, r4
 8003362:	f7ff fd47 	bl	8002df4 <SDMMC_GetCmdResp3>
}
 8003366:	b006      	add	sp, #24
 8003368:	bd10      	pop	{r4, pc}

0800336a <SDMMC_CmdBusWidth>:
{
 800336a:	b530      	push	{r4, r5, lr}
 800336c:	b087      	sub	sp, #28
 800336e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003370:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003372:	2406      	movs	r4, #6
 8003374:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003376:	2340      	movs	r3, #64	; 0x40
 8003378:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800337a:	2300      	movs	r3, #0
 800337c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800337e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003382:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003384:	a901      	add	r1, sp, #4
 8003386:	f7ff fdc3 	bl	8002f10 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800338a:	f241 3288 	movw	r2, #5000	; 0x1388
 800338e:	4621      	mov	r1, r4
 8003390:	4628      	mov	r0, r5
 8003392:	f7ff fdd5 	bl	8002f40 <SDMMC_GetCmdResp1>
}
 8003396:	b007      	add	sp, #28
 8003398:	bd30      	pop	{r4, r5, pc}

0800339a <SDMMC_CmdSendSCR>:
{
 800339a:	b530      	push	{r4, r5, lr}
 800339c:	b087      	sub	sp, #28
 800339e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80033a4:	2433      	movs	r4, #51	; 0x33
 80033a6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80033a8:	2240      	movs	r2, #64	; 0x40
 80033aa:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033ac:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033b2:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033b4:	a901      	add	r1, sp, #4
 80033b6:	f7ff fdab 	bl	8002f10 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80033ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80033be:	4621      	mov	r1, r4
 80033c0:	4628      	mov	r0, r5
 80033c2:	f7ff fdbd 	bl	8002f40 <SDMMC_GetCmdResp1>
}
 80033c6:	b007      	add	sp, #28
 80033c8:	bd30      	pop	{r4, r5, pc}

080033ca <SDMMC_CmdSendCID>:
{
 80033ca:	b510      	push	{r4, lr}
 80033cc:	b086      	sub	sp, #24
 80033ce:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80033d4:	2202      	movs	r2, #2
 80033d6:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80033d8:	22c0      	movs	r2, #192	; 0xc0
 80033da:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033dc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033e2:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033e4:	a901      	add	r1, sp, #4
 80033e6:	f7ff fd93 	bl	8002f10 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80033ea:	4620      	mov	r0, r4
 80033ec:	f7ff fcd2 	bl	8002d94 <SDMMC_GetCmdResp2>
}
 80033f0:	b006      	add	sp, #24
 80033f2:	bd10      	pop	{r4, pc}

080033f4 <SDMMC_CmdSendCSD>:
{
 80033f4:	b510      	push	{r4, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80033fa:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80033fc:	2309      	movs	r3, #9
 80033fe:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003400:	23c0      	movs	r3, #192	; 0xc0
 8003402:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003404:	2300      	movs	r3, #0
 8003406:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800340c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800340e:	a901      	add	r1, sp, #4
 8003410:	f7ff fd7e 	bl	8002f10 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003414:	4620      	mov	r0, r4
 8003416:	f7ff fcbd 	bl	8002d94 <SDMMC_GetCmdResp2>
}
 800341a:	b006      	add	sp, #24
 800341c:	bd10      	pop	{r4, pc}

0800341e <SDMMC_CmdSetRelAdd>:
{
 800341e:	b570      	push	{r4, r5, r6, lr}
 8003420:	b086      	sub	sp, #24
 8003422:	4605      	mov	r5, r0
 8003424:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800342a:	2403      	movs	r4, #3
 800342c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800342e:	2240      	movs	r2, #64	; 0x40
 8003430:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003432:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003438:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800343a:	a901      	add	r1, sp, #4
 800343c:	f7ff fd68 	bl	8002f10 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003440:	4632      	mov	r2, r6
 8003442:	4621      	mov	r1, r4
 8003444:	4628      	mov	r0, r5
 8003446:	f7ff fe27 	bl	8003098 <SDMMC_GetCmdResp6>
}
 800344a:	b006      	add	sp, #24
 800344c:	bd70      	pop	{r4, r5, r6, pc}

0800344e <SDMMC_CmdSendStatus>:
{
 800344e:	b530      	push	{r4, r5, lr}
 8003450:	b087      	sub	sp, #28
 8003452:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8003454:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003456:	240d      	movs	r4, #13
 8003458:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800345a:	2340      	movs	r3, #64	; 0x40
 800345c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800345e:	2300      	movs	r3, #0
 8003460:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003466:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003468:	a901      	add	r1, sp, #4
 800346a:	f7ff fd51 	bl	8002f10 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800346e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003472:	4621      	mov	r1, r4
 8003474:	4628      	mov	r0, r5
 8003476:	f7ff fd63 	bl	8002f40 <SDMMC_GetCmdResp1>
}
 800347a:	b007      	add	sp, #28
 800347c:	bd30      	pop	{r4, r5, pc}
	...

08003480 <LL_USART_Init>:
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003480:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003482:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003486:	d001      	beq.n	800348c <LL_USART_Init+0xc>
  ErrorStatus status = ERROR;
 8003488:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 800348a:	4770      	bx	lr
{
 800348c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	460d      	mov	r5, r1
 8003494:	4604      	mov	r4, r0
    MODIFY_REG(USARTx->CR1,
 8003496:	68c3      	ldr	r3, [r0, #12]
 8003498:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800349c:	f023 030c 	bic.w	r3, r3, #12
 80034a0:	684a      	ldr	r2, [r1, #4]
 80034a2:	68c9      	ldr	r1, [r1, #12]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	6929      	ldr	r1, [r5, #16]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	69a9      	ldr	r1, [r5, #24]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60c3      	str	r3, [r0, #12]
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80034b2:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80034b4:	6902      	ldr	r2, [r0, #16]
 80034b6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80034ba:	4313      	orrs	r3, r2
 80034bc:	6103      	str	r3, [r0, #16]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80034be:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80034c0:	6942      	ldr	r2, [r0, #20]
 80034c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80034c6:	4313      	orrs	r3, r2
 80034c8:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80034ca:	4668      	mov	r0, sp
 80034cc:	f7ff fc36 	bl	8002d3c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80034d0:	4b49      	ldr	r3, [pc, #292]	; (80035f8 <LL_USART_Init+0x178>)
 80034d2:	429c      	cmp	r4, r3
 80034d4:	d010      	beq.n	80034f8 <LL_USART_Init+0x78>
    else if (USARTx == USART2)
 80034d6:	4b49      	ldr	r3, [pc, #292]	; (80035fc <LL_USART_Init+0x17c>)
 80034d8:	429c      	cmp	r4, r3
 80034da:	d014      	beq.n	8003506 <LL_USART_Init+0x86>
    else if (USARTx == USART3)
 80034dc:	4b48      	ldr	r3, [pc, #288]	; (8003600 <LL_USART_Init+0x180>)
 80034de:	429c      	cmp	r4, r3
 80034e0:	d013      	beq.n	800350a <LL_USART_Init+0x8a>
    else if (USARTx == USART6)
 80034e2:	4b48      	ldr	r3, [pc, #288]	; (8003604 <LL_USART_Init+0x184>)
 80034e4:	429c      	cmp	r4, r3
 80034e6:	d012      	beq.n	800350e <LL_USART_Init+0x8e>
    else if (USARTx == UART4)
 80034e8:	4b47      	ldr	r3, [pc, #284]	; (8003608 <LL_USART_Init+0x188>)
 80034ea:	429c      	cmp	r4, r3
 80034ec:	d011      	beq.n	8003512 <LL_USART_Init+0x92>
    else if (USARTx == UART5)
 80034ee:	4b47      	ldr	r3, [pc, #284]	; (800360c <LL_USART_Init+0x18c>)
 80034f0:	429c      	cmp	r4, r3
 80034f2:	d010      	beq.n	8003516 <LL_USART_Init+0x96>
  ErrorStatus status = ERROR;
 80034f4:	2001      	movs	r0, #1
 80034f6:	e07c      	b.n	80035f2 <LL_USART_Init+0x172>
      periphclk = rcc_clocks.PCLK2_Frequency;
 80034f8:	9803      	ldr	r0, [sp, #12]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80034fa:	2800      	cmp	r0, #0
 80034fc:	d078      	beq.n	80035f0 <LL_USART_Init+0x170>
        && (USART_InitStruct->BaudRate != 0U))
 80034fe:	682b      	ldr	r3, [r5, #0]
 8003500:	b95b      	cbnz	r3, 800351a <LL_USART_Init+0x9a>
  ErrorStatus status = ERROR;
 8003502:	2001      	movs	r0, #1
 8003504:	e075      	b.n	80035f2 <LL_USART_Init+0x172>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003506:	9802      	ldr	r0, [sp, #8]
 8003508:	e7f7      	b.n	80034fa <LL_USART_Init+0x7a>
      periphclk = rcc_clocks.PCLK1_Frequency;
 800350a:	9802      	ldr	r0, [sp, #8]
 800350c:	e7f5      	b.n	80034fa <LL_USART_Init+0x7a>
      periphclk = rcc_clocks.PCLK2_Frequency;
 800350e:	9803      	ldr	r0, [sp, #12]
 8003510:	e7f3      	b.n	80034fa <LL_USART_Init+0x7a>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003512:	9802      	ldr	r0, [sp, #8]
 8003514:	e7f1      	b.n	80034fa <LL_USART_Init+0x7a>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003516:	9802      	ldr	r0, [sp, #8]
 8003518:	e7ef      	b.n	80034fa <LL_USART_Init+0x7a>
      LL_USART_SetBaudRate(USARTx,
 800351a:	69aa      	ldr	r2, [r5, #24]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800351c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003520:	d030      	beq.n	8003584 <LL_USART_Init+0x104>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003522:	f04f 0900 	mov.w	r9, #0
 8003526:	1806      	adds	r6, r0, r0
 8003528:	eb49 0709 	adc.w	r7, r9, r9
 800352c:	eb16 0b00 	adds.w	fp, r6, r0
 8003530:	eb47 0c09 	adc.w	ip, r7, r9
 8003534:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8003538:	ea42 725b 	orr.w	r2, r2, fp, lsr #29
 800353c:	ea4f 05cb 	mov.w	r5, fp, lsl #3
 8003540:	4694      	mov	ip, r2
 8003542:	009a      	lsls	r2, r3, #2
 8003544:	0f9b      	lsrs	r3, r3, #30
 8003546:	1940      	adds	r0, r0, r5
 8003548:	eb49 010c 	adc.w	r1, r9, ip
 800354c:	f7fc fe98 	bl	8000280 <__aeabi_uldivmod>
 8003550:	4d2f      	ldr	r5, [pc, #188]	; (8003610 <LL_USART_Init+0x190>)
 8003552:	fba5 3100 	umull	r3, r1, r5, r0
 8003556:	0949      	lsrs	r1, r1, #5
 8003558:	010a      	lsls	r2, r1, #4
 800355a:	b292      	uxth	r2, r2
 800355c:	2364      	movs	r3, #100	; 0x64
 800355e:	fb03 0311 	mls	r3, r3, r1, r0
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	3332      	adds	r3, #50	; 0x32
 8003566:	fba5 1303 	umull	r1, r3, r5, r3
 800356a:	f3c3 134f 	ubfx	r3, r3, #5, #16
 800356e:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
 8003572:	440a      	add	r2, r1
 8003574:	b292      	uxth	r2, r2
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	4413      	add	r3, r2
 800357c:	b29b      	uxth	r3, r3
 800357e:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8003580:	2000      	movs	r0, #0
 8003582:	e036      	b.n	80035f2 <LL_USART_Init+0x172>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003584:	4683      	mov	fp, r0
 8003586:	f04f 0c00 	mov.w	ip, #0
 800358a:	1806      	adds	r6, r0, r0
 800358c:	eb4c 070c 	adc.w	r7, ip, ip
 8003590:	eb16 0800 	adds.w	r8, r6, r0
 8003594:	eb47 090c 	adc.w	r9, r7, ip
 8003598:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800359c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80035a0:	ea4f 05c8 	mov.w	r5, r8, lsl #3
 80035a4:	4691      	mov	r9, r2
 80035a6:	2100      	movs	r1, #0
 80035a8:	18da      	adds	r2, r3, r3
 80035aa:	eb41 0301 	adc.w	r3, r1, r1
 80035ae:	eb1b 0005 	adds.w	r0, fp, r5
 80035b2:	eb4c 0109 	adc.w	r1, ip, r9
 80035b6:	f7fc fe63 	bl	8000280 <__aeabi_uldivmod>
 80035ba:	4d15      	ldr	r5, [pc, #84]	; (8003610 <LL_USART_Init+0x190>)
 80035bc:	fba5 3100 	umull	r3, r1, r5, r0
 80035c0:	0949      	lsrs	r1, r1, #5
 80035c2:	010a      	lsls	r2, r1, #4
 80035c4:	b292      	uxth	r2, r2
 80035c6:	2364      	movs	r3, #100	; 0x64
 80035c8:	fb03 0311 	mls	r3, r3, r1, r0
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	3332      	adds	r3, #50	; 0x32
 80035d0:	fba5 1303 	umull	r1, r3, r5, r3
 80035d4:	f3c3 134f 	ubfx	r3, r3, #5, #16
 80035d8:	0059      	lsls	r1, r3, #1
 80035da:	f401 71f8 	and.w	r1, r1, #496	; 0x1f0
 80035de:	440a      	add	r2, r1
 80035e0:	b292      	uxth	r2, r2
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	4413      	add	r3, r2
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	60a3      	str	r3, [r4, #8]
 80035ec:	2000      	movs	r0, #0
 80035ee:	e000      	b.n	80035f2 <LL_USART_Init+0x172>
  ErrorStatus status = ERROR;
 80035f0:	2001      	movs	r0, #1
}
 80035f2:	b004      	add	sp, #16
 80035f4:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 80035f8:	40011000 	.word	0x40011000
 80035fc:	40004400 	.word	0x40004400
 8003600:	40004800 	.word	0x40004800
 8003604:	40011400 	.word	0x40011400
 8003608:	40004c00 	.word	0x40004c00
 800360c:	40005000 	.word	0x40005000
 8003610:	51eb851f 	.word	0x51eb851f

08003614 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003614:	4b01      	ldr	r3, [pc, #4]	; (800361c <LL_SetSystemCoreClock+0x8>)
 8003616:	6018      	str	r0, [r3, #0]
}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	20000000 	.word	0x20000000

08003620 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003620:	b530      	push	{r4, r5, lr}
 8003622:	b085      	sub	sp, #20
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003624:	f004 f8dc 	bl	80077e0 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8003628:	491a      	ldr	r1, [pc, #104]	; (8003694 <MX_LWIP_Init+0x74>)
 800362a:	2500      	movs	r5, #0
 800362c:	600d      	str	r5, [r1, #0]
  netmask.addr = 0;
 800362e:	4a1a      	ldr	r2, [pc, #104]	; (8003698 <MX_LWIP_Init+0x78>)
 8003630:	6015      	str	r5, [r2, #0]
  gw.addr = 0;
 8003632:	4b1a      	ldr	r3, [pc, #104]	; (800369c <MX_LWIP_Init+0x7c>)
 8003634:	601d      	str	r5, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003636:	4c1a      	ldr	r4, [pc, #104]	; (80036a0 <MX_LWIP_Init+0x80>)
 8003638:	481a      	ldr	r0, [pc, #104]	; (80036a4 <MX_LWIP_Init+0x84>)
 800363a:	9002      	str	r0, [sp, #8]
 800363c:	481a      	ldr	r0, [pc, #104]	; (80036a8 <MX_LWIP_Init+0x88>)
 800363e:	9001      	str	r0, [sp, #4]
 8003640:	9500      	str	r5, [sp, #0]
 8003642:	4620      	mov	r0, r4
 8003644:	f004 fcf6 	bl	8008034 <netif_add>

  /* Create IPv6 local address */
  netif_create_ip6_linklocal_address(&gnetif, 0);
 8003648:	4629      	mov	r1, r5
 800364a:	4620      	mov	r0, r4
 800364c:	f004 fef0 	bl	8008430 <netif_create_ip6_linklocal_address>
  netif_ip6_addr_set_state(&gnetif, 0, IP6_ADDR_VALID);
 8003650:	2210      	movs	r2, #16
 8003652:	4629      	mov	r1, r5
 8003654:	4620      	mov	r0, r4
 8003656:	f004 fe41 	bl	80082dc <netif_ip6_addr_set_state>
  gnetif.ip6_autoconfig_enabled = 1;
 800365a:	2301      	movs	r3, #1
 800365c:	f884 30df 	strb.w	r3, [r4, #223]	; 0xdf

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003660:	4620      	mov	r0, r4
 8003662:	f004 fdeb 	bl	800823c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003666:	f894 30db 	ldrb.w	r3, [r4, #219]	; 0xdb
 800366a:	f013 0f04 	tst.w	r3, #4
 800366e:	d10c      	bne.n	800368a <MX_LWIP_Init+0x6a>
    netif_set_up(&gnetif);
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003670:	480b      	ldr	r0, [pc, #44]	; (80036a0 <MX_LWIP_Init+0x80>)
 8003672:	f004 fe0b 	bl	800828c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003676:	4c0a      	ldr	r4, [pc, #40]	; (80036a0 <MX_LWIP_Init+0x80>)
 8003678:	490c      	ldr	r1, [pc, #48]	; (80036ac <MX_LWIP_Init+0x8c>)
 800367a:	4620      	mov	r0, r4
 800367c:	f004 fe2a 	bl	80082d4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8003680:	4620      	mov	r0, r4
 8003682:	f00b fe0d 	bl	800f2a0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003686:	b005      	add	sp, #20
 8003688:	bd30      	pop	{r4, r5, pc}
    netif_set_up(&gnetif);
 800368a:	4620      	mov	r0, r4
 800368c:	f004 fddc 	bl	8008248 <netif_set_up>
 8003690:	e7f1      	b.n	8003676 <MX_LWIP_Init+0x56>
 8003692:	bf00      	nop
 8003694:	20001ab8 	.word	0x20001ab8
 8003698:	20001abc 	.word	0x20001abc
 800369c:	20001ac0 	.word	0x20001ac0
 80036a0:	200019d0 	.word	0x200019d0
 80036a4:	08014bf5 	.word	0x08014bf5
 80036a8:	08003a75 	.word	0x08003a75
 80036ac:	08003ad9 	.word	0x08003ad9

080036b0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80036b0:	b508      	push	{r3, lr}
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80036b2:	4803      	ldr	r0, [pc, #12]	; (80036c0 <MX_LWIP_Process+0x10>)
 80036b4:	f000 f9ce 	bl	8003a54 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80036b8:	f009 fc8e 	bl	800cfd8 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80036bc:	bd08      	pop	{r3, pc}
 80036be:	bf00      	nop
 80036c0:	200019d0 	.word	0x200019d0

080036c4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80036c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t payloadoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t i=0;

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80036c8:	4833      	ldr	r0, [pc, #204]	; (8003798 <low_level_input+0xd4>)
 80036ca:	f7fd fdff 	bl	80012cc <HAL_ETH_GetReceivedFrame>
 80036ce:	2800      	cmp	r0, #0
 80036d0:	d15e      	bne.n	8003790 <low_level_input+0xcc>

    return NULL;

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80036d2:	4b31      	ldr	r3, [pc, #196]	; (8003798 <low_level_input+0xd4>)
 80036d4:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80036d6:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40

  if (len > 0)
 80036da:	b929      	cbnz	r1, 80036e8 <low_level_input+0x24>
  struct pbuf *p = NULL;
 80036dc:	f04f 0800 	mov.w	r8, #0
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80036e0:	4b2d      	ldr	r3, [pc, #180]	; (8003798 <low_level_input+0xd4>)
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80036e4:	2100      	movs	r1, #0
 80036e6:	e03a      	b.n	800375e <low_level_input+0x9a>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80036e8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80036ec:	f005 f894 	bl	8008818 <pbuf_alloc>
  if (p != NULL)
 80036f0:	4680      	mov	r8, r0
 80036f2:	2800      	cmp	r0, #0
 80036f4:	d0f4      	beq.n	80036e0 <low_level_input+0x1c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80036f6:	4b28      	ldr	r3, [pc, #160]	; (8003798 <low_level_input+0xd4>)
 80036f8:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80036fa:	4682      	mov	sl, r0
    bufferoffset = 0;
 80036fc:	2400      	movs	r4, #0
    for(q = p; q != NULL; q = q->next)
 80036fe:	e021      	b.n	8003744 <low_level_input+0x80>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003700:	f8da 0004 	ldr.w	r0, [sl, #4]
 8003704:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 8003708:	3204      	adds	r2, #4
 800370a:	eb09 0104 	add.w	r1, r9, r4
 800370e:	4430      	add	r0, r6
 8003710:	f011 fb6b 	bl	8014dea <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003714:	68ff      	ldr	r7, [r7, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003716:	f8d7 9008 	ldr.w	r9, [r7, #8]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800371a:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800371e:	1b36      	subs	r6, r6, r4
 8003720:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
        bufferoffset = 0;
 8003724:	2400      	movs	r4, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003726:	18a5      	adds	r5, r4, r2
 8003728:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800372c:	429d      	cmp	r5, r3
 800372e:	d8e7      	bhi.n	8003700 <low_level_input+0x3c>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003730:	f8da 0004 	ldr.w	r0, [sl, #4]
 8003734:	eb09 0104 	add.w	r1, r9, r4
 8003738:	4430      	add	r0, r6
 800373a:	f011 fb56 	bl	8014dea <memcpy>
    for(q = p; q != NULL; q = q->next)
 800373e:	f8da a000 	ldr.w	sl, [sl]
      bufferoffset = bufferoffset + byteslefttocopy;
 8003742:	462c      	mov	r4, r5
    for(q = p; q != NULL; q = q->next)
 8003744:	f1ba 0f00 	cmp.w	sl, #0
 8003748:	d0ca      	beq.n	80036e0 <low_level_input+0x1c>
      byteslefttocopy = q->len;
 800374a:	f8ba 200a 	ldrh.w	r2, [sl, #10]
      payloadoffset = 0;
 800374e:	2600      	movs	r6, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003750:	e7e9      	b.n	8003726 <low_level_input+0x62>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003758:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800375a:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800375c:	3101      	adds	r1, #1
 800375e:	4a0e      	ldr	r2, [pc, #56]	; (8003798 <low_level_input+0xd4>)
 8003760:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003762:	428a      	cmp	r2, r1
 8003764:	d8f5      	bhi.n	8003752 <low_level_input+0x8e>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003766:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <low_level_input+0xd4>)
 8003768:	2200      	movs	r2, #0
 800376a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f241 0214 	movw	r2, #4116	; 0x1014
 8003772:	589a      	ldr	r2, [r3, r2]
 8003774:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003778:	d007      	beq.n	800378a <low_level_input+0xc6>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800377a:	f241 0214 	movw	r2, #4116	; 0x1014
 800377e:	2180      	movs	r1, #128	; 0x80
 8003780:	5099      	str	r1, [r3, r2]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003782:	f241 0208 	movw	r2, #4104	; 0x1008
 8003786:	2100      	movs	r1, #0
 8003788:	5099      	str	r1, [r3, r2]
  }
  return p;
}
 800378a:	4640      	mov	r0, r8
 800378c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return NULL;
 8003790:	f04f 0800 	mov.w	r8, #0
 8003794:	e7f9      	b.n	800378a <low_level_input+0xc6>
 8003796:	bf00      	nop
 8003798:	20003394 	.word	0x20003394

0800379c <low_level_output>:
{
 800379c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a0:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80037a2:	4b2c      	ldr	r3, [pc, #176]	; (8003854 <low_level_output+0xb8>)
 80037a4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80037a6:	f8d6 a008 	ldr.w	sl, [r6, #8]
  bufferoffset = 0;
 80037aa:	2400      	movs	r4, #0
  uint32_t framelength = 0;
 80037ac:	4627      	mov	r7, r4
  for(q = p; q != NULL; q = q->next)
 80037ae:	f1bb 0f00 	cmp.w	fp, #0
 80037b2:	d032      	beq.n	800381a <low_level_output+0x7e>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80037b4:	6833      	ldr	r3, [r6, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	db35      	blt.n	8003826 <low_level_output+0x8a>
      byteslefttocopy = q->len;
 80037ba:	f8bb 900a 	ldrh.w	r9, [fp, #10]
      payloadoffset = 0;
 80037be:	2500      	movs	r5, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80037c0:	eb04 0809 	add.w	r8, r4, r9
 80037c4:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80037c8:	4598      	cmp	r8, r3
 80037ca:	d919      	bls.n	8003800 <low_level_output+0x64>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80037cc:	f8db 1004 	ldr.w	r1, [fp, #4]
 80037d0:	f5c4 62be 	rsb	r2, r4, #1520	; 0x5f0
 80037d4:	3204      	adds	r2, #4
 80037d6:	4429      	add	r1, r5
 80037d8:	eb0a 0004 	add.w	r0, sl, r4
 80037dc:	f011 fb05 	bl	8014dea <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80037e0:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80037e2:	6833      	ldr	r3, [r6, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	db21      	blt.n	800382c <low_level_output+0x90>
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80037e8:	f8d6 a008 	ldr.w	sl, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80037ec:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80037f0:	1b2d      	subs	r5, r5, r4
 80037f2:	f205 55f4 	addw	r5, r5, #1524	; 0x5f4
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80037f6:	1b3f      	subs	r7, r7, r4
 80037f8:	f207 57f4 	addw	r7, r7, #1524	; 0x5f4
        bufferoffset = 0;
 80037fc:	2400      	movs	r4, #0
 80037fe:	e7df      	b.n	80037c0 <low_level_output+0x24>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003800:	f8db 1004 	ldr.w	r1, [fp, #4]
 8003804:	464a      	mov	r2, r9
 8003806:	4429      	add	r1, r5
 8003808:	eb0a 0004 	add.w	r0, sl, r4
 800380c:	f011 faed 	bl	8014dea <memcpy>
      framelength = framelength + byteslefttocopy;
 8003810:	444f      	add	r7, r9
  for(q = p; q != NULL; q = q->next)
 8003812:	f8db b000 	ldr.w	fp, [fp]
      bufferoffset = bufferoffset + byteslefttocopy;
 8003816:	4644      	mov	r4, r8
 8003818:	e7c9      	b.n	80037ae <low_level_output+0x12>
  HAL_ETH_TransmitFrame(&heth, framelength);
 800381a:	4639      	mov	r1, r7
 800381c:	480d      	ldr	r0, [pc, #52]	; (8003854 <low_level_output+0xb8>)
 800381e:	f7fd fcc5 	bl	80011ac <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 8003822:	2000      	movs	r0, #0
 8003824:	e004      	b.n	8003830 <low_level_output+0x94>
        errval = ERR_USE;
 8003826:	f06f 0007 	mvn.w	r0, #7
 800382a:	e001      	b.n	8003830 <low_level_output+0x94>
          errval = ERR_USE;
 800382c:	f06f 0007 	mvn.w	r0, #7
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003830:	4b08      	ldr	r3, [pc, #32]	; (8003854 <low_level_output+0xb8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f241 0214 	movw	r2, #4116	; 0x1014
 8003838:	589a      	ldr	r2, [r3, r2]
 800383a:	f012 0f20 	tst.w	r2, #32
 800383e:	d007      	beq.n	8003850 <low_level_output+0xb4>
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003840:	f241 0214 	movw	r2, #4116	; 0x1014
 8003844:	2120      	movs	r1, #32
 8003846:	5099      	str	r1, [r3, r2]
    heth.Instance->DMATPDR = 0;
 8003848:	f241 0204 	movw	r2, #4100	; 0x1004
 800384c:	2100      	movs	r1, #0
 800384e:	5099      	str	r1, [r3, r2]
}
 8003850:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003854:	20003394 	.word	0x20003394

08003858 <low_level_init>:
{
 8003858:	b530      	push	{r4, r5, lr}
 800385a:	b085      	sub	sp, #20
 800385c:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 800385e:	2300      	movs	r3, #0
 8003860:	9303      	str	r3, [sp, #12]
  heth.Instance = ETH;
 8003862:	483a      	ldr	r0, [pc, #232]	; (800394c <low_level_init+0xf4>)
 8003864:	4a3a      	ldr	r2, [pc, #232]	; (8003950 <low_level_init+0xf8>)
 8003866:	6002      	str	r2, [r0, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003868:	2201      	movs	r2, #1
 800386a:	6042      	str	r2, [r0, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800386c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003870:	6081      	str	r1, [r0, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003872:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003876:	60c1      	str	r1, [r0, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003878:	8202      	strh	r2, [r0, #16]
  MACAddr[0] = 0x00;
 800387a:	f88d 3004 	strb.w	r3, [sp, #4]
  MACAddr[1] = 0x80;
 800387e:	2180      	movs	r1, #128	; 0x80
 8003880:	f88d 1005 	strb.w	r1, [sp, #5]
  MACAddr[2] = 0xE1;
 8003884:	21e1      	movs	r1, #225	; 0xe1
 8003886:	f88d 1006 	strb.w	r1, [sp, #6]
  MACAddr[3] = 0x01;
 800388a:	f88d 2007 	strb.w	r2, [sp, #7]
  MACAddr[4] = 0x02;
 800388e:	2202      	movs	r2, #2
 8003890:	f88d 2008 	strb.w	r2, [sp, #8]
  MACAddr[5] = 0x03;
 8003894:	2203      	movs	r2, #3
 8003896:	f88d 2009 	strb.w	r2, [sp, #9]
  heth.Init.MACAddr = &MACAddr[0];
 800389a:	aa01      	add	r2, sp, #4
 800389c:	6142      	str	r2, [r0, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800389e:	6183      	str	r3, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80038a0:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80038a2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80038a6:	6203      	str	r3, [r0, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80038a8:	f7fd fdce 	bl	8001448 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 80038ac:	b928      	cbnz	r0, 80038ba <low_level_init+0x62>
    netif->flags |= NETIF_FLAG_LINK_UP;
 80038ae:	f894 30db 	ldrb.w	r3, [r4, #219]	; 0xdb
 80038b2:	f043 0304 	orr.w	r3, r3, #4
 80038b6:	f884 30db 	strb.w	r3, [r4, #219]	; 0xdb
  heth.Instance->MACFFR |= ETH_MULTICASTFRAMESFILTER_NONE;
 80038ba:	4d24      	ldr	r5, [pc, #144]	; (800394c <low_level_init+0xf4>)
 80038bc:	682a      	ldr	r2, [r5, #0]
 80038be:	6853      	ldr	r3, [r2, #4]
 80038c0:	f043 0310 	orr.w	r3, r3, #16
 80038c4:	6053      	str	r3, [r2, #4]
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80038c6:	2304      	movs	r3, #4
 80038c8:	4a22      	ldr	r2, [pc, #136]	; (8003954 <low_level_init+0xfc>)
 80038ca:	4923      	ldr	r1, [pc, #140]	; (8003958 <low_level_init+0x100>)
 80038cc:	4628      	mov	r0, r5
 80038ce:	f7fd fbfd 	bl	80010cc <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80038d2:	2304      	movs	r3, #4
 80038d4:	4a21      	ldr	r2, [pc, #132]	; (800395c <low_level_init+0x104>)
 80038d6:	4922      	ldr	r1, [pc, #136]	; (8003960 <low_level_init+0x108>)
 80038d8:	4628      	mov	r0, r5
 80038da:	f7fd fc30 	bl	800113e <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80038de:	2306      	movs	r3, #6
 80038e0:	f884 30da 	strb.w	r3, [r4, #218]	; 0xda
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80038e4:	696b      	ldr	r3, [r5, #20]
 80038e6:	781a      	ldrb	r2, [r3, #0]
 80038e8:	f884 20d4 	strb.w	r2, [r4, #212]	; 0xd4
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80038ec:	785a      	ldrb	r2, [r3, #1]
 80038ee:	f884 20d5 	strb.w	r2, [r4, #213]	; 0xd5
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80038f2:	789a      	ldrb	r2, [r3, #2]
 80038f4:	f884 20d6 	strb.w	r2, [r4, #214]	; 0xd6
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80038f8:	78da      	ldrb	r2, [r3, #3]
 80038fa:	f884 20d7 	strb.w	r2, [r4, #215]	; 0xd7
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80038fe:	791a      	ldrb	r2, [r3, #4]
 8003900:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003904:	795b      	ldrb	r3, [r3, #5]
 8003906:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
  netif->mtu = 1500;
 800390a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800390e:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003912:	f894 30db 	ldrb.w	r3, [r4, #219]	; 0xdb
 8003916:	f043 030a 	orr.w	r3, r3, #10
 800391a:	f884 30db 	strb.w	r3, [r4, #219]	; 0xdb
  HAL_ETH_Start(&heth);
 800391e:	4628      	mov	r0, r5
 8003920:	f7fd febe 	bl	80016a0 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003924:	aa03      	add	r2, sp, #12
 8003926:	211d      	movs	r1, #29
 8003928:	4628      	mov	r0, r5
 800392a:	f7fd fd16 	bl	800135a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800392e:	9a03      	ldr	r2, [sp, #12]
 8003930:	f042 020b 	orr.w	r2, r2, #11
 8003934:	9203      	str	r2, [sp, #12]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003936:	211d      	movs	r1, #29
 8003938:	4628      	mov	r0, r5
 800393a:	f7fd fd4a 	bl	80013d2 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800393e:	aa03      	add	r2, sp, #12
 8003940:	211d      	movs	r1, #29
 8003942:	4628      	mov	r0, r5
 8003944:	f7fd fd09 	bl	800135a <HAL_ETH_ReadPHYRegister>
}
 8003948:	b005      	add	sp, #20
 800394a:	bd30      	pop	{r4, r5, pc}
 800394c:	20003394 	.word	0x20003394
 8003950:	40028000 	.word	0x40028000
 8003954:	200033dc 	.word	0x200033dc
 8003958:	20001ac4 	.word	0x20001ac4
 800395c:	20001b44 	.word	0x20001b44
 8003960:	20003314 	.word	0x20003314

08003964 <HAL_ETH_MspInit>:
{
 8003964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003966:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003968:	2300      	movs	r3, #0
 800396a:	9307      	str	r3, [sp, #28]
 800396c:	9308      	str	r3, [sp, #32]
 800396e:	9309      	str	r3, [sp, #36]	; 0x24
 8003970:	930a      	str	r3, [sp, #40]	; 0x28
 8003972:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8003974:	6802      	ldr	r2, [r0, #0]
 8003976:	4b33      	ldr	r3, [pc, #204]	; (8003a44 <HAL_ETH_MspInit+0xe0>)
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_ETH_MspInit+0x1c>
}
 800397c:	b00d      	add	sp, #52	; 0x34
 800397e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8003980:	2400      	movs	r4, #0
 8003982:	9401      	str	r4, [sp, #4]
 8003984:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8003988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800398a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
 8003990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003992:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003996:	9201      	str	r2, [sp, #4]
 8003998:	9a01      	ldr	r2, [sp, #4]
 800399a:	9402      	str	r4, [sp, #8]
 800399c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800399e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
 80039a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a6:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80039aa:	9202      	str	r2, [sp, #8]
 80039ac:	9a02      	ldr	r2, [sp, #8]
 80039ae:	9403      	str	r4, [sp, #12]
 80039b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039b2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
 80039b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ba:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80039be:	9203      	str	r2, [sp, #12]
 80039c0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039c2:	9404      	str	r4, [sp, #16]
 80039c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039c6:	f042 0204 	orr.w	r2, r2, #4
 80039ca:	631a      	str	r2, [r3, #48]	; 0x30
 80039cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ce:	f002 0204 	and.w	r2, r2, #4
 80039d2:	9204      	str	r2, [sp, #16]
 80039d4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d6:	9405      	str	r4, [sp, #20]
 80039d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039da:	f042 0201 	orr.w	r2, r2, #1
 80039de:	631a      	str	r2, [r3, #48]	; 0x30
 80039e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e2:	f002 0201 	and.w	r2, r2, #1
 80039e6:	9205      	str	r2, [sp, #20]
 80039e8:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ea:	9406      	str	r4, [sp, #24]
 80039ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ee:	f042 0202 	orr.w	r2, r2, #2
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	9306      	str	r3, [sp, #24]
 80039fc:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80039fe:	2332      	movs	r3, #50	; 0x32
 8003a00:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a02:	2702      	movs	r7, #2
 8003a04:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a06:	2603      	movs	r6, #3
 8003a08:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a0a:	250b      	movs	r5, #11
 8003a0c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a0e:	a907      	add	r1, sp, #28
 8003a10:	480d      	ldr	r0, [pc, #52]	; (8003a48 <HAL_ETH_MspInit+0xe4>)
 8003a12:	f7fe f8ff 	bl	8001c14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003a16:	2386      	movs	r3, #134	; 0x86
 8003a18:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a1e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a20:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a22:	a907      	add	r1, sp, #28
 8003a24:	4809      	ldr	r0, [pc, #36]	; (8003a4c <HAL_ETH_MspInit+0xe8>)
 8003a26:	f7fe f8f5 	bl	8001c14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003a2a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003a2e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a30:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a32:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a34:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a36:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a38:	a907      	add	r1, sp, #28
 8003a3a:	4805      	ldr	r0, [pc, #20]	; (8003a50 <HAL_ETH_MspInit+0xec>)
 8003a3c:	f7fe f8ea 	bl	8001c14 <HAL_GPIO_Init>
}
 8003a40:	e79c      	b.n	800397c <HAL_ETH_MspInit+0x18>
 8003a42:	bf00      	nop
 8003a44:	40028000 	.word	0x40028000
 8003a48:	40020800 	.word	0x40020800
 8003a4c:	40020000 	.word	0x40020000
 8003a50:	40020400 	.word	0x40020400

08003a54 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003a54:	b538      	push	{r3, r4, r5, lr}
 8003a56:	4604      	mov	r4, r0
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003a58:	f7ff fe34 	bl	80036c4 <low_level_input>

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003a5c:	b128      	cbz	r0, 8003a6a <ethernetif_input+0x16>
 8003a5e:	4605      	mov	r5, r0

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003a60:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003a64:	4621      	mov	r1, r4
 8003a66:	4798      	blx	r3

  if (err != ERR_OK)
 8003a68:	b900      	cbnz	r0, 8003a6c <ethernetif_input+0x18>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
    p = NULL;
  }
}
 8003a6a:	bd38      	pop	{r3, r4, r5, pc}
    pbuf_free(p);
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	f004 fe71 	bl	8008754 <pbuf_free>
 8003a72:	e7fa      	b.n	8003a6a <ethernetif_input+0x16>

08003a74 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003a74:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003a76:	4604      	mov	r4, r0
 8003a78:	b198      	cbz	r0, 8003aa2 <ethernetif_init+0x2e>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003a7a:	2373      	movs	r3, #115	; 0x73
 8003a7c:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
  netif->name[1] = IFNAME1;
 8003a80:	2374      	movs	r3, #116	; 0x74
 8003a82:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003a86:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <ethernetif_init+0x40>)
 8003a88:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
#endif /* LWIP_ARP */
#endif /* LWIP_ARP || LWIP_ETHERNET */
#endif /* LWIP_IPV4 */

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <ethernetif_init+0x44>)
 8003a8e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003a92:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <ethernetif_init+0x48>)
 8003a94:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8

  /* initialize the hardware */
  low_level_init(netif);
 8003a98:	4620      	mov	r0, r4
 8003a9a:	f7ff fedd 	bl	8003858 <low_level_init>

  return ERR_OK;
}
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003aa2:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <ethernetif_init+0x4c>)
 8003aa4:	f240 2209 	movw	r2, #521	; 0x209
 8003aa8:	4906      	ldr	r1, [pc, #24]	; (8003ac4 <ethernetif_init+0x50>)
 8003aaa:	4807      	ldr	r0, [pc, #28]	; (8003ac8 <ethernetif_init+0x54>)
 8003aac:	f011 f9ca 	bl	8014e44 <iprintf>
 8003ab0:	e7e3      	b.n	8003a7a <ethernetif_init+0x6>
 8003ab2:	bf00      	nop
 8003ab4:	0800fc6d 	.word	0x0800fc6d
 8003ab8:	08010c81 	.word	0x08010c81
 8003abc:	0800379d 	.word	0x0800379d
 8003ac0:	08015d00 	.word	0x08015d00
 8003ac4:	08015d1c 	.word	0x08015d1c
 8003ac8:	08015d2c 	.word	0x08015d2c

08003acc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003acc:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8003ace:	f000 fc83 	bl	80043d8 <HAL_GetTick>
}
 8003ad2:	bd08      	pop	{r3, pc}

08003ad4 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003ad4:	4770      	bx	lr
	...

08003ad8 <ethernetif_update_config>:
{
 8003ad8:	b530      	push	{r4, r5, lr}
 8003ada:	b083      	sub	sp, #12
 8003adc:	4604      	mov	r4, r0
  __IO uint32_t tickstart = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	9301      	str	r3, [sp, #4]
  uint32_t regvalue = 0;
 8003ae2:	9300      	str	r3, [sp, #0]
  if(netif_is_link_up(netif))
 8003ae4:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
 8003ae8:	f013 0f04 	tst.w	r3, #4
 8003aec:	d051      	beq.n	8003b92 <ethernetif_update_config+0xba>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003aee:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <ethernetif_update_config+0xc4>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d035      	beq.n	8003b62 <ethernetif_update_config+0x8a>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003af6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003afa:	2100      	movs	r1, #0
 8003afc:	4827      	ldr	r0, [pc, #156]	; (8003b9c <ethernetif_update_config+0xc4>)
 8003afe:	f7fd fc68 	bl	80013d2 <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 8003b02:	f000 fc69 	bl	80043d8 <HAL_GetTick>
 8003b06:	9001      	str	r0, [sp, #4]
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003b08:	466a      	mov	r2, sp
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	4823      	ldr	r0, [pc, #140]	; (8003b9c <ethernetif_update_config+0xc4>)
 8003b0e:	f7fd fc24 	bl	800135a <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 8003b12:	f000 fc61 	bl	80043d8 <HAL_GetTick>
 8003b16:	9b01      	ldr	r3, [sp, #4]
 8003b18:	1ac0      	subs	r0, r0, r3
 8003b1a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003b1e:	d820      	bhi.n	8003b62 <ethernetif_update_config+0x8a>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003b20:	9b00      	ldr	r3, [sp, #0]
 8003b22:	f013 0f20 	tst.w	r3, #32
 8003b26:	d0ef      	beq.n	8003b08 <ethernetif_update_config+0x30>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003b28:	466a      	mov	r2, sp
 8003b2a:	211f      	movs	r1, #31
 8003b2c:	481b      	ldr	r0, [pc, #108]	; (8003b9c <ethernetif_update_config+0xc4>)
 8003b2e:	f7fd fc14 	bl	800135a <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003b32:	9b00      	ldr	r3, [sp, #0]
 8003b34:	f013 0f10 	tst.w	r3, #16
 8003b38:	d00a      	beq.n	8003b50 <ethernetif_update_config+0x78>
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003b3a:	4a18      	ldr	r2, [pc, #96]	; (8003b9c <ethernetif_update_config+0xc4>)
 8003b3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b40:	60d1      	str	r1, [r2, #12]
      if(regvalue & PHY_SPEED_STATUS)
 8003b42:	f013 0f04 	tst.w	r3, #4
 8003b46:	d007      	beq.n	8003b58 <ethernetif_update_config+0x80>
        heth.Init.Speed = ETH_SPEED_10M;
 8003b48:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <ethernetif_update_config+0xc4>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
 8003b4e:	e013      	b.n	8003b78 <ethernetif_update_config+0xa0>
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003b50:	4a12      	ldr	r2, [pc, #72]	; (8003b9c <ethernetif_update_config+0xc4>)
 8003b52:	2100      	movs	r1, #0
 8003b54:	60d1      	str	r1, [r2, #12]
 8003b56:	e7f4      	b.n	8003b42 <ethernetif_update_config+0x6a>
        heth.Init.Speed = ETH_SPEED_100M;
 8003b58:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <ethernetif_update_config+0xc4>)
 8003b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	e00a      	b.n	8003b78 <ethernetif_update_config+0xa0>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003b62:	480e      	ldr	r0, [pc, #56]	; (8003b9c <ethernetif_update_config+0xc4>)
 8003b64:	68c2      	ldr	r2, [r0, #12]
 8003b66:	f3c2 02cf 	ubfx	r2, r2, #3, #16
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003b6a:	6883      	ldr	r3, [r0, #8]
 8003b6c:	f3c3 034f 	ubfx	r3, r3, #1, #16
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003b70:	431a      	orrs	r2, r3
 8003b72:	2100      	movs	r1, #0
 8003b74:	f7fd fc2d 	bl	80013d2 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003b78:	4d08      	ldr	r5, [pc, #32]	; (8003b9c <ethernetif_update_config+0xc4>)
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	f7fd fdd3 	bl	8001728 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 8003b82:	4628      	mov	r0, r5
 8003b84:	f7fd fd8c 	bl	80016a0 <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 8003b88:	4620      	mov	r0, r4
 8003b8a:	f7ff ffa3 	bl	8003ad4 <ethernetif_notify_conn_changed>
}
 8003b8e:	b003      	add	sp, #12
 8003b90:	bd30      	pop	{r4, r5, pc}
    HAL_ETH_Stop(&heth);
 8003b92:	4802      	ldr	r0, [pc, #8]	; (8003b9c <ethernetif_update_config+0xc4>)
 8003b94:	f7fd fda6 	bl	80016e4 <HAL_ETH_Stop>
 8003b98:	e7f6      	b.n	8003b88 <ethernetif_update_config+0xb0>
 8003b9a:	bf00      	nop
 8003b9c:	20003394 	.word	0x20003394

08003ba0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003ba0:	b500      	push	{lr}
 8003ba2:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	460a      	mov	r2, r1
 8003baa:	4601      	mov	r1, r0
 8003bac:	4803      	ldr	r0, [pc, #12]	; (8003bbc <BSP_SD_ReadBlocks+0x1c>)
 8003bae:	f7fe fa71 	bl	8002094 <HAL_SD_ReadBlocks>
 8003bb2:	b100      	cbz	r0, 8003bb6 <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8003bb4:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8003bb6:	b003      	add	sp, #12
 8003bb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bbc:	20001914 	.word	0x20001914

08003bc0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003bc0:	b500      	push	{lr}
 8003bc2:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	460a      	mov	r2, r1
 8003bca:	4601      	mov	r1, r0
 8003bcc:	4803      	ldr	r0, [pc, #12]	; (8003bdc <BSP_SD_WriteBlocks+0x1c>)
 8003bce:	f7fe fb95 	bl	80022fc <HAL_SD_WriteBlocks>
 8003bd2:	b100      	cbz	r0, 8003bd6 <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 8003bd4:	2001      	movs	r0, #1
  }

  return sd_state;
}
 8003bd6:	b003      	add	sp, #12
 8003bd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bdc:	20001914 	.word	0x20001914

08003be0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8003be0:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003be2:	4803      	ldr	r0, [pc, #12]	; (8003bf0 <BSP_SD_GetCardState+0x10>)
 8003be4:	f7fe feb4 	bl	8002950 <HAL_SD_GetCardState>
}
 8003be8:	3804      	subs	r0, #4
 8003bea:	bf18      	it	ne
 8003bec:	2001      	movne	r0, #1
 8003bee:	bd08      	pop	{r3, pc}
 8003bf0:	20001914 	.word	0x20001914

08003bf4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8003bf4:	b508      	push	{r3, lr}
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8003bf6:	4601      	mov	r1, r0
 8003bf8:	4801      	ldr	r0, [pc, #4]	; (8003c00 <BSP_SD_GetCardInfo+0xc>)
 8003bfa:	f7fe fe44 	bl	8002886 <HAL_SD_GetCardInfo>
}
 8003bfe:	bd08      	pop	{r3, pc}
 8003c00:	20001914 	.word	0x20001914

08003c04 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8003c04:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8003c0c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8003c10:	b002      	add	sp, #8
 8003c12:	4770      	bx	lr

08003c14 <BSP_SD_Init>:
{
 8003c14:	b510      	push	{r4, lr}
  hsd.Instance = SDIO;
 8003c16:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <BSP_SD_Init+0x44>)
 8003c18:	4a10      	ldr	r2, [pc, #64]	; (8003c5c <BSP_SD_Init+0x48>)
 8003c1a:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003c20:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003c22:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003c24:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003c26:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8003c28:	2203      	movs	r2, #3
 8003c2a:	619a      	str	r2, [r3, #24]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8003c2c:	f7ff ffea 	bl	8003c04 <BSP_SD_IsDetected>
 8003c30:	2801      	cmp	r0, #1
 8003c32:	d002      	beq.n	8003c3a <BSP_SD_Init+0x26>
    return MSD_ERROR;
 8003c34:	2401      	movs	r4, #1
}
 8003c36:	4620      	mov	r0, r4
 8003c38:	bd10      	pop	{r4, pc}
  sd_state = HAL_SD_Init(&hsd);
 8003c3a:	4807      	ldr	r0, [pc, #28]	; (8003c58 <BSP_SD_Init+0x44>)
 8003c3c:	f7fe fe04 	bl	8002848 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8003c40:	4604      	mov	r4, r0
 8003c42:	2800      	cmp	r0, #0
 8003c44:	d1f7      	bne.n	8003c36 <BSP_SD_Init+0x22>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8003c46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c4a:	4803      	ldr	r0, [pc, #12]	; (8003c58 <BSP_SD_Init+0x44>)
 8003c4c:	f7fe fe2e 	bl	80028ac <HAL_SD_ConfigWideBusOperation>
 8003c50:	2800      	cmp	r0, #0
 8003c52:	d0f0      	beq.n	8003c36 <BSP_SD_Init+0x22>
      sd_state = MSD_ERROR;
 8003c54:	2401      	movs	r4, #1
 8003c56:	e7ee      	b.n	8003c36 <BSP_SD_Init+0x22>
 8003c58:	20001914 	.word	0x20001914
 8003c5c:	40012c00 	.word	0x40012c00

08003c60 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive number (0) */
)
{
 8003c60:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if (DiskInitialized == 0)
 8003c62:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <disk_initialize+0x1c>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	b10b      	cbz	r3, 8003c6c <disk_initialize+0xc>
  DSTATUS stat = RES_OK;
 8003c68:	2000      	movs	r0, #0
  {
    DiskInitialized = 1;
    stat = SD_initialize(0);
  }
  return stat;
}
 8003c6a:	bd08      	pop	{r3, pc}
    DiskInitialized = 1;
 8003c6c:	4b03      	ldr	r3, [pc, #12]	; (8003c7c <disk_initialize+0x1c>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	701a      	strb	r2, [r3, #0]
    stat = SD_initialize(0);
 8003c72:	2000      	movs	r0, #0
 8003c74:	f000 f82a 	bl	8003ccc <SD_initialize>
 8003c78:	e7f7      	b.n	8003c6a <disk_initialize+0xa>
 8003c7a:	bf00      	nop
 8003c7c:	20000444 	.word	0x20000444

08003c80 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv  /* Physical drive nmuber (0) */
)
{
 8003c80:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = SD_status(0);
 8003c82:	2000      	movs	r0, #0
 8003c84:	f000 f836 	bl	8003cf4 <SD_status>
  return stat;
}
 8003c88:	bd08      	pop	{r3, pc}

08003c8a <disk_read>:
	BYTE pdrv,     /* Physical drive nmuber to identify the drive */
	BYTE *buff,    /* Data buffer to store read data */
	DWORD sector,  /* Sector address in LBA */
	UINT count     /* Number of sectors to read */
)
{
 8003c8a:	b508      	push	{r3, lr}
  DRESULT res;

  res = SD_read(0, buff, sector, count);
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	f000 f835 	bl	8003cfc <SD_read>
  return res;
}
 8003c92:	bd08      	pop	{r3, pc}

08003c94 <disk_write>:
	BYTE pdrv,         /* Physical drive nmuber to identify the drive */
	const BYTE *buff,  /* Data to be written */
	DWORD sector,      /* Sector address in LBA */
	UINT count         /* Number of sectors to write */
)
{
 8003c94:	b508      	push	{r3, lr}
  DRESULT res;

  res = SD_write(0, buff, sector, count);
 8003c96:	2000      	movs	r0, #0
 8003c98:	f000 f840 	bl	8003d1c <SD_write>
  return res;
}
 8003c9c:	bd08      	pop	{r3, pc}

08003c9e <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,    /* Physical drive nmuber (0) */
	BYTE cmd,     /* Control code */
	void *buff    /* Buffer to send/receive data block */
)
{
 8003c9e:	b508      	push	{r3, lr}
  DRESULT res;

  res = SD_ioctl(0, cmd, buff);
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	f000 f84b 	bl	8003d3c <SD_ioctl>
  return res;
}
 8003ca6:	bd08      	pop	{r3, pc}

08003ca8 <SD_CheckStatus>:
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8003ca8:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 8003caa:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <SD_CheckStatus+0x20>)
 8003cac:	2201      	movs	r2, #1
 8003cae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8003cb0:	f7ff ff96 	bl	8003be0 <BSP_SD_GetCardState>
 8003cb4:	b920      	cbnz	r0, 8003cc0 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 8003cb6:	4a04      	ldr	r2, [pc, #16]	; (8003cc8 <SD_CheckStatus+0x20>)
 8003cb8:	7813      	ldrb	r3, [r2, #0]
 8003cba:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003cbe:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 8003cc0:	4b01      	ldr	r3, [pc, #4]	; (8003cc8 <SD_CheckStatus+0x20>)
 8003cc2:	7818      	ldrb	r0, [r3, #0]
}
 8003cc4:	bd08      	pop	{r3, pc}
 8003cc6:	bf00      	nop
 8003cc8:	2000000c 	.word	0x2000000c

08003ccc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003ccc:	b510      	push	{r4, lr}
 8003cce:	4604      	mov	r4, r0
  Stat = STA_NOINIT;
 8003cd0:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <SD_initialize+0x24>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003cd6:	f7ff ff9d 	bl	8003c14 <BSP_SD_Init>
 8003cda:	b110      	cbz	r0, 8003ce2 <SD_initialize+0x16>
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8003cdc:	4b04      	ldr	r3, [pc, #16]	; (8003cf0 <SD_initialize+0x24>)
 8003cde:	7818      	ldrb	r0, [r3, #0]
}
 8003ce0:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	f7ff ffe0 	bl	8003ca8 <SD_CheckStatus>
 8003ce8:	4b01      	ldr	r3, [pc, #4]	; (8003cf0 <SD_initialize+0x24>)
 8003cea:	7018      	strb	r0, [r3, #0]
 8003cec:	e7f6      	b.n	8003cdc <SD_initialize+0x10>
 8003cee:	bf00      	nop
 8003cf0:	2000000c 	.word	0x2000000c

08003cf4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8003cf4:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 8003cf6:	f7ff ffd7 	bl	8003ca8 <SD_CheckStatus>
}
 8003cfa:	bd08      	pop	{r3, pc}

08003cfc <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8003cfc:	b508      	push	{r3, lr}
 8003cfe:	4608      	mov	r0, r1
 8003d00:	4611      	mov	r1, r2
 8003d02:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8003d04:	f04f 33ff 	mov.w	r3, #4294967295
 8003d08:	f7ff ff4a 	bl	8003ba0 <BSP_SD_ReadBlocks>
 8003d0c:	b920      	cbnz	r0, 8003d18 <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8003d0e:	f7ff ff67 	bl	8003be0 <BSP_SD_GetCardState>
 8003d12:	2800      	cmp	r0, #0
 8003d14:	d1fb      	bne.n	8003d0e <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8003d16:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8003d18:	2001      	movs	r0, #1
 8003d1a:	e7fc      	b.n	8003d16 <SD_read+0x1a>

08003d1c <SD_write>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003d1c:	b508      	push	{r3, lr}
 8003d1e:	4608      	mov	r0, r1
 8003d20:	4611      	mov	r1, r2
 8003d22:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8003d24:	f04f 33ff 	mov.w	r3, #4294967295
 8003d28:	f7ff ff4a 	bl	8003bc0 <BSP_SD_WriteBlocks>
 8003d2c:	b920      	cbnz	r0, 8003d38 <SD_write+0x1c>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8003d2e:	f7ff ff57 	bl	8003be0 <BSP_SD_GetCardState>
 8003d32:	2800      	cmp	r0, #0
 8003d34:	d1fb      	bne.n	8003d2e <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8003d36:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8003d38:	2001      	movs	r0, #1
 8003d3a:	e7fc      	b.n	8003d36 <SD_write+0x1a>

08003d3c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003d3c:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <SD_ioctl+0x58>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	f013 0f01 	tst.w	r3, #1
 8003d44:	d121      	bne.n	8003d8a <SD_ioctl+0x4e>
{
 8003d46:	b510      	push	{r4, lr}
 8003d48:	b088      	sub	sp, #32
 8003d4a:	4614      	mov	r4, r2

  switch (cmd)
 8003d4c:	2903      	cmp	r1, #3
 8003d4e:	d81e      	bhi.n	8003d8e <SD_ioctl+0x52>
 8003d50:	e8df f001 	tbb	[pc, r1]
 8003d54:	130c0502 	.word	0x130c0502
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8003d58:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }

  return res;
}
 8003d5a:	b008      	add	sp, #32
 8003d5c:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8003d5e:	4668      	mov	r0, sp
 8003d60:	f7ff ff48 	bl	8003bf4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003d64:	9b06      	ldr	r3, [sp, #24]
 8003d66:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8003d68:	2000      	movs	r0, #0
    break;
 8003d6a:	e7f6      	b.n	8003d5a <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8003d6c:	4668      	mov	r0, sp
 8003d6e:	f7ff ff41 	bl	8003bf4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003d72:	9b07      	ldr	r3, [sp, #28]
 8003d74:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8003d76:	2000      	movs	r0, #0
    break;
 8003d78:	e7ef      	b.n	8003d5a <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8003d7a:	4668      	mov	r0, sp
 8003d7c:	f7ff ff3a 	bl	8003bf4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003d80:	9b07      	ldr	r3, [sp, #28]
 8003d82:	0a5b      	lsrs	r3, r3, #9
 8003d84:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8003d86:	2000      	movs	r0, #0
    break;
 8003d88:	e7e7      	b.n	8003d5a <SD_ioctl+0x1e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003d8a:	2003      	movs	r0, #3
}
 8003d8c:	4770      	bx	lr
    res = RES_PARERR;
 8003d8e:	2004      	movs	r0, #4
 8003d90:	e7e3      	b.n	8003d5a <SD_ioctl+0x1e>
 8003d92:	bf00      	nop
 8003d94:	2000000c 	.word	0x2000000c

08003d98 <CpuIrqDisable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqDisable(void)
{
  __asm volatile ("cpsid i");
 8003d98:	b672      	cpsid	i
} /*** end of CpuIrqDisable ***/
 8003d9a:	4770      	bx	lr

08003d9c <CpuIrqEnable>:
** \return    none.
**
****************************************************************************************/
void CpuIrqEnable(void)
{
  __asm volatile ("cpsie i");
 8003d9c:	b662      	cpsie	i
} /*** end of CpuIrqEnable ***/
 8003d9e:	4770      	bx	lr

08003da0 <CpuInit>:
** \brief     Initializes the CPU module.
** \return    none.
**
****************************************************************************************/
void CpuInit(void)
{
 8003da0:	b508      	push	{r3, lr}
  /* bootloader runs in polling mode so disable the global interrupts. this is done for
   * safety reasons. if the bootloader was started from a running user program, it could 
   * be that the user program did not properly disable the interrupt generation of 
   * peripherals.
   */
  CpuIrqDisable();
 8003da2:	f7ff fff9 	bl	8003d98 <CpuIrqDisable>
} /*** end of CpuInit ***/
 8003da6:	bd08      	pop	{r3, pc}

08003da8 <CpuStartUserProgram>:
**            does not return.
** \return    none.
**
****************************************************************************************/
void CpuStartUserProgram(void)
{
 8003da8:	b510      	push	{r4, lr}
  void (*pProgResetHandler)(void);

  /* check if a user program is present by verifying the checksum */
  if (NvmVerifyChecksum() == BLT_FALSE)
 8003daa:	f000 fa1b 	bl	80041e4 <NvmVerifyChecksum>
 8003dae:	b900      	cbnz	r0, 8003db2 <CpuStartUserProgram+0xa>
   * for whatever reason, make sure all communication interfaces are initialized so that
   * firmware updates can be started.
   */
  ComDeferredInit();
#endif
} /*** end of CpuStartUserProgram ***/
 8003db0:	bd10      	pop	{r4, pc}
  if (CpuUserProgramStartHook() == BLT_FALSE)
 8003db2:	f7fc fbed 	bl	8000590 <CpuUserProgramStartHook>
 8003db6:	2800      	cmp	r0, #0
 8003db8:	d0fa      	beq.n	8003db0 <CpuStartUserProgram+0x8>
  ComFree();
 8003dba:	f000 fbaf 	bl	800451c <ComFree>
  HAL_DeInit();
 8003dbe:	f7fc ff6d 	bl	8000c9c <HAL_DeInit>
  TimerReset();
 8003dc2:	f000 fad7 	bl	8004374 <TimerReset>
  SCB->VTOR = CPU_USER_PROGRAM_VECTABLE_OFFSET & (blt_int32u)0x1FFFFF80;
 8003dc6:	f000 fa11 	bl	80041ec <NvmGetUserProgBaseAddress>
 8003dca:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8003dce:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8003dd2:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <CpuStartUserProgram+0x3c>)
 8003dd4:	6098      	str	r0, [r3, #8]
  pProgResetHandler = (void(*)(void))(*((blt_addr *)CPU_USER_PROGRAM_STARTADDR_PTR));
 8003dd6:	f000 fa09 	bl	80041ec <NvmGetUserProgBaseAddress>
 8003dda:	6844      	ldr	r4, [r0, #4]
  CpuIrqEnable();
 8003ddc:	f7ff ffde 	bl	8003d9c <CpuIrqEnable>
  pProgResetHandler();
 8003de0:	47a0      	blx	r4
 8003de2:	e7e5      	b.n	8003db0 <CpuStartUserProgram+0x8>
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <CpuMemCopy>:
** \param     len  length of the data in bytes.
** \return    none.
**
****************************************************************************************/
void CpuMemCopy(blt_addr dest, blt_addr src, blt_int16u len)
{
 8003de8:	b570      	push	{r4, r5, r6, lr}
  /* set casted pointers */
  from = (blt_int8u *)src;
  to = (blt_int8u *)dest;

  /* copy all bytes from source address to destination address */
  while (len-- > 0)
 8003dea:	e008      	b.n	8003dfe <CpuMemCopy+0x16>
  {
    /* store byte value from source to destination */
    *to++ = *from++;
 8003dec:	1c4d      	adds	r5, r1, #1
 8003dee:	1c46      	adds	r6, r0, #1
 8003df0:	780b      	ldrb	r3, [r1, #0]
 8003df2:	7003      	strb	r3, [r0, #0]
    /* keep the watchdog happy */
    CopService();
 8003df4:	f000 fbd4 	bl	80045a0 <CopService>
    *to++ = *from++;
 8003df8:	4630      	mov	r0, r6
 8003dfa:	4629      	mov	r1, r5
  while (len-- > 0)
 8003dfc:	4622      	mov	r2, r4
 8003dfe:	1e53      	subs	r3, r2, #1
 8003e00:	b29c      	uxth	r4, r3
 8003e02:	2a00      	cmp	r2, #0
 8003e04:	d1f2      	bne.n	8003dec <CpuMemCopy+0x4>
  }
} /*** end of CpuMemCopy ***/
 8003e06:	bd70      	pop	{r4, r5, r6, pc}

08003e08 <CpuMemSet>:
** \param     len  Number of bytes to write.
** \return    none.
**
****************************************************************************************/
void CpuMemSet(blt_addr dest, blt_int8u value, blt_int16u len)
{
 8003e08:	b570      	push	{r4, r5, r6, lr}
 8003e0a:	460e      	mov	r6, r1

  /* set casted pointer */
  to = (blt_int8u *)dest;

  /* set all bytes at the destination address to the specified value */
  while (len-- > 0)
 8003e0c:	e005      	b.n	8003e1a <CpuMemSet+0x12>
  {
    /* set byte value */
    *to++ = value;
 8003e0e:	1c45      	adds	r5, r0, #1
 8003e10:	7006      	strb	r6, [r0, #0]
    /* keep the watchdog happy */
    CopService();
 8003e12:	f000 fbc5 	bl	80045a0 <CopService>
    *to++ = value;
 8003e16:	4628      	mov	r0, r5
  while (len-- > 0)
 8003e18:	4622      	mov	r2, r4
 8003e1a:	1e53      	subs	r3, r2, #1
 8003e1c:	b29c      	uxth	r4, r3
 8003e1e:	2a00      	cmp	r2, #0
 8003e20:	d1f5      	bne.n	8003e0e <CpuMemSet+0x6>
  }
} /*** end of CpuMemSet ***/
 8003e22:	bd70      	pop	{r4, r5, r6, pc}

08003e24 <FlashGetSector>:
** \param     address Address in the flash sector.
** \return    Flash sector number or FLASH_INVALID_SECTOR.
**
****************************************************************************************/
static blt_int8u FlashGetSector(blt_addr address)
{
 8003e24:	b538      	push	{r3, r4, r5, lr}
 8003e26:	4605      	mov	r5, r0
  blt_int8u result = FLASH_INVALID_SECTOR;
  blt_int8u sectorIdx;

  /* search through the sectors to find the right one */
  for (sectorIdx = 0; sectorIdx < FLASH_TOTAL_SECTORS; sectorIdx++)
 8003e28:	2400      	movs	r4, #0
 8003e2a:	e001      	b.n	8003e30 <FlashGetSector+0xc>
 8003e2c:	3401      	adds	r4, #1
 8003e2e:	b2e4      	uxtb	r4, r4
 8003e30:	2c08      	cmp	r4, #8
 8003e32:	d815      	bhi.n	8003e60 <FlashGetSector+0x3c>
  {
    /* keep the watchdog happy */
    CopService();
 8003e34:	f000 fbb4 	bl	80045a0 <CopService>
    /* is the address in this sector? */
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8003e38:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003e3c:	0093      	lsls	r3, r2, #2
 8003e3e:	4a09      	ldr	r2, [pc, #36]	; (8003e64 <FlashGetSector+0x40>)
 8003e40:	58d3      	ldr	r3, [r2, r3]
 8003e42:	42ab      	cmp	r3, r5
 8003e44:	d8f2      	bhi.n	8003e2c <FlashGetSector+0x8>
        (address < (flashLayout[sectorIdx].sector_start + \
                    flashLayout[sectorIdx].sector_size)))
 8003e46:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003e4a:	0091      	lsls	r1, r2, #2
 8003e4c:	4a05      	ldr	r2, [pc, #20]	; (8003e64 <FlashGetSector+0x40>)
 8003e4e:	440a      	add	r2, r1
 8003e50:	6852      	ldr	r2, [r2, #4]
        (address < (flashLayout[sectorIdx].sector_start + \
 8003e52:	4413      	add	r3, r2
    if ((address >= flashLayout[sectorIdx].sector_start) && \
 8003e54:	42ab      	cmp	r3, r5
 8003e56:	d9e9      	bls.n	8003e2c <FlashGetSector+0x8>
    {
      /* found the sector we are looking for so store it */
      result = flashLayout[sectorIdx].sector_num;
 8003e58:	4b02      	ldr	r3, [pc, #8]	; (8003e64 <FlashGetSector+0x40>)
 8003e5a:	440b      	add	r3, r1
 8003e5c:	7a18      	ldrb	r0, [r3, #8]
      /* all done so no need to continue looping */
      break;
 8003e5e:	e000      	b.n	8003e62 <FlashGetSector+0x3e>
  blt_int8u result = FLASH_INVALID_SECTOR;
 8003e60:	20ff      	movs	r0, #255	; 0xff
    }
  }
  /* give the result back to the caller */
  return result;
} /*** end of FlashGetSector ***/
 8003e62:	bd38      	pop	{r3, r4, r5, pc}
 8003e64:	08015d54 	.word	0x08015d54

08003e68 <FlashInitBlock>:
{
 8003e68:	b508      	push	{r3, lr}
  if ((address % FLASH_WRITE_BLOCK_SIZE) != 0)
 8003e6a:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8003e6e:	b953      	cbnz	r3, 8003e86 <FlashInitBlock+0x1e>
  if (block->base_addr == address)
 8003e70:	6803      	ldr	r3, [r0, #0]
 8003e72:	428b      	cmp	r3, r1
 8003e74:	d009      	beq.n	8003e8a <FlashInitBlock+0x22>
  block->base_addr = address;
 8003e76:	f840 1b04 	str.w	r1, [r0], #4
  CpuMemCopy((blt_addr)block->data, address, FLASH_WRITE_BLOCK_SIZE);
 8003e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e7e:	f7ff ffb3 	bl	8003de8 <CpuMemCopy>
  return BLT_TRUE;
 8003e82:	2001      	movs	r0, #1
 8003e84:	e000      	b.n	8003e88 <FlashInitBlock+0x20>
    return BLT_FALSE;
 8003e86:	2000      	movs	r0, #0
} /*** end of FlashInitBlock ***/
 8003e88:	bd08      	pop	{r3, pc}
    return BLT_TRUE;
 8003e8a:	2001      	movs	r0, #1
 8003e8c:	e7fc      	b.n	8003e88 <FlashInitBlock+0x20>

08003e8e <FlashWriteBlock>:
{
 8003e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e92:	4607      	mov	r7, r0
  HAL_FLASH_Unlock();
 8003e94:	f7fd fd72 	bl	800197c <HAL_FLASH_Unlock>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8003e98:	2400      	movs	r4, #0
 8003e9a:	2c7f      	cmp	r4, #127	; 0x7f
 8003e9c:	d814      	bhi.n	8003ec8 <FlashWriteBlock+0x3a>
    prog_addr = block->base_addr + (word_cnt * sizeof(blt_int32u));
 8003e9e:	683e      	ldr	r6, [r7, #0]
 8003ea0:	00a3      	lsls	r3, r4, #2
 8003ea2:	eb06 0803 	add.w	r8, r6, r3
    prog_data = *(volatile blt_int32u *)(&block->data[word_cnt * sizeof(blt_int32u)]);
 8003ea6:	443b      	add	r3, r7
 8003ea8:	685d      	ldr	r5, [r3, #4]
    CopService();
 8003eaa:	f000 fb79 	bl	80045a0 <CopService>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, prog_addr, prog_data) != HAL_OK)
 8003eae:	462a      	mov	r2, r5
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	2002      	movs	r0, #2
 8003eb6:	f7fd fdb5 	bl	8001a24 <HAL_FLASH_Program>
 8003eba:	b938      	cbnz	r0, 8003ecc <FlashWriteBlock+0x3e>
    if (*(volatile blt_int32u *)prog_addr != prog_data)
 8003ebc:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8003ec0:	42ab      	cmp	r3, r5
 8003ec2:	d109      	bne.n	8003ed8 <FlashWriteBlock+0x4a>
  for (word_cnt=0; word_cnt<(FLASH_WRITE_BLOCK_SIZE/sizeof(blt_int32u)); word_cnt++)
 8003ec4:	3401      	adds	r4, #1
 8003ec6:	e7e8      	b.n	8003e9a <FlashWriteBlock+0xc>
  blt_bool   result = BLT_TRUE;
 8003ec8:	2401      	movs	r4, #1
 8003eca:	e000      	b.n	8003ece <FlashWriteBlock+0x40>
      result = BLT_FALSE;
 8003ecc:	2400      	movs	r4, #0
  HAL_FLASH_Lock();
 8003ece:	f7fd fd6d 	bl	80019ac <HAL_FLASH_Lock>
} /*** end of FlashWriteBlock ***/
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      result = BLT_FALSE;
 8003ed8:	2400      	movs	r4, #0
 8003eda:	e7f8      	b.n	8003ece <FlashWriteBlock+0x40>

08003edc <FlashSwitchBlock>:
{
 8003edc:	b538      	push	{r3, r4, r5, lr}
 8003ede:	460d      	mov	r5, r1
  if (block == &bootBlockInfo)
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <FlashSwitchBlock+0x38>)
 8003ee2:	4298      	cmp	r0, r3
 8003ee4:	d011      	beq.n	8003f0a <FlashSwitchBlock+0x2e>
 8003ee6:	4604      	mov	r4, r0
  else if (base_addr == flashLayout[0].sector_start)
 8003ee8:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <FlashSwitchBlock+0x3c>)
 8003eea:	4299      	cmp	r1, r3
 8003eec:	d107      	bne.n	8003efe <FlashSwitchBlock+0x22>
    block = &bootBlockInfo;
 8003eee:	4c09      	ldr	r4, [pc, #36]	; (8003f14 <FlashSwitchBlock+0x38>)
  if (FlashInitBlock(block, base_addr) == BLT_FALSE)
 8003ef0:	4629      	mov	r1, r5
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	f7ff ffb8 	bl	8003e68 <FlashInitBlock>
 8003ef8:	b148      	cbz	r0, 8003f0e <FlashSwitchBlock+0x32>
} /*** end of FlashSwitchBlock ***/
 8003efa:	4620      	mov	r0, r4
 8003efc:	bd38      	pop	{r3, r4, r5, pc}
    if (FlashWriteBlock(block) == BLT_FALSE)
 8003efe:	f7ff ffc6 	bl	8003e8e <FlashWriteBlock>
 8003f02:	2800      	cmp	r0, #0
 8003f04:	d1f4      	bne.n	8003ef0 <FlashSwitchBlock+0x14>
      return BLT_NULL;
 8003f06:	2400      	movs	r4, #0
 8003f08:	e7f7      	b.n	8003efa <FlashSwitchBlock+0x1e>
    block = &blockInfo;
 8003f0a:	4c04      	ldr	r4, [pc, #16]	; (8003f1c <FlashSwitchBlock+0x40>)
 8003f0c:	e7f0      	b.n	8003ef0 <FlashSwitchBlock+0x14>
    return BLT_NULL;
 8003f0e:	2400      	movs	r4, #0
 8003f10:	e7f3      	b.n	8003efa <FlashSwitchBlock+0x1e>
 8003f12:	bf00      	nop
 8003f14:	2000064c 	.word	0x2000064c
 8003f18:	0800c000 	.word	0x0800c000
 8003f1c:	20000448 	.word	0x20000448

08003f20 <FlashAddToBlock>:
{
 8003f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f24:	4606      	mov	r6, r0
 8003f26:	460c      	mov	r4, r1
 8003f28:	4617      	mov	r7, r2
 8003f2a:	461d      	mov	r5, r3
  current_base_addr = (address/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 8003f2c:	f421 78ff 	bic.w	r8, r1, #510	; 0x1fe
 8003f30:	f028 0801 	bic.w	r8, r8, #1
  if (block->base_addr == FLASH_INVALID_ADDRESS)
 8003f34:	6803      	ldr	r3, [r0, #0]
 8003f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3a:	d007      	beq.n	8003f4c <FlashAddToBlock+0x2c>
  if (block->base_addr != current_base_addr)
 8003f3c:	6833      	ldr	r3, [r6, #0]
 8003f3e:	4543      	cmp	r3, r8
 8003f40:	d10b      	bne.n	8003f5a <FlashAddToBlock+0x3a>
  dst = &(block->data[address - block->base_addr]);
 8003f42:	6833      	ldr	r3, [r6, #0]
 8003f44:	1ae4      	subs	r4, r4, r3
 8003f46:	4434      	add	r4, r6
 8003f48:	3404      	adds	r4, #4
 8003f4a:	e015      	b.n	8003f78 <FlashAddToBlock+0x58>
    if (FlashInitBlock(block, current_base_addr) == BLT_FALSE)
 8003f4c:	4641      	mov	r1, r8
 8003f4e:	f7ff ff8b 	bl	8003e68 <FlashInitBlock>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2800      	cmp	r0, #0
 8003f56:	d1f1      	bne.n	8003f3c <FlashAddToBlock+0x1c>
 8003f58:	e01f      	b.n	8003f9a <FlashAddToBlock+0x7a>
    block = FlashSwitchBlock(block, current_base_addr);
 8003f5a:	4641      	mov	r1, r8
 8003f5c:	4630      	mov	r0, r6
 8003f5e:	f7ff ffbd 	bl	8003edc <FlashSwitchBlock>
    if (block == BLT_NULL)
 8003f62:	4606      	mov	r6, r0
 8003f64:	2800      	cmp	r0, #0
 8003f66:	d1ec      	bne.n	8003f42 <FlashAddToBlock+0x22>
      return BLT_FALSE;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e016      	b.n	8003f9a <FlashAddToBlock+0x7a>
    *dst = *src;
 8003f6c:	f817 3b01 	ldrb.w	r3, [r7], #1
 8003f70:	f804 3b01 	strb.w	r3, [r4], #1
  while (len > 0);
 8003f74:	3d01      	subs	r5, #1
 8003f76:	d00f      	beq.n	8003f98 <FlashAddToBlock+0x78>
    CopService();
 8003f78:	f000 fb12 	bl	80045a0 <CopService>
    if ((blt_addr)(dst-&(block->data[0])) >= FLASH_WRITE_BLOCK_SIZE)
 8003f7c:	1d33      	adds	r3, r6, #4
 8003f7e:	1ae3      	subs	r3, r4, r3
 8003f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f84:	d3f2      	bcc.n	8003f6c <FlashAddToBlock+0x4c>
      block = FlashSwitchBlock(block, current_base_addr+FLASH_WRITE_BLOCK_SIZE);
 8003f86:	f508 7100 	add.w	r1, r8, #512	; 0x200
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	f7ff ffa6 	bl	8003edc <FlashSwitchBlock>
      if (block == BLT_NULL)
 8003f90:	4606      	mov	r6, r0
 8003f92:	b128      	cbz	r0, 8003fa0 <FlashAddToBlock+0x80>
      dst = &(block->data[0]);
 8003f94:	1d04      	adds	r4, r0, #4
 8003f96:	e7e9      	b.n	8003f6c <FlashAddToBlock+0x4c>
  return BLT_TRUE;
 8003f98:	2301      	movs	r3, #1
} /*** end of FlashAddToBlock ***/
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLT_FALSE;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e7fa      	b.n	8003f9a <FlashAddToBlock+0x7a>

08003fa4 <FlashEraseSectors>:
{
 8003fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa8:	b086      	sub	sp, #24
 8003faa:	4605      	mov	r5, r0
 8003fac:	4688      	mov	r8, r1
  blt_int32u eraseSectorError = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	9300      	str	r3, [sp, #0]
  if (first_sector > last_sector)
 8003fb2:	4288      	cmp	r0, r1
 8003fb4:	d811      	bhi.n	8003fda <FlashEraseSectors+0x36>
  blt_bool result = BLT_TRUE;
 8003fb6:	2601      	movs	r6, #1
  if ((first_sector < flashLayout[0].sector_num) || \
 8003fb8:	2d02      	cmp	r5, #2
 8003fba:	d928      	bls.n	800400e <FlashEraseSectors+0x6a>
 8003fbc:	f1b8 0f0b 	cmp.w	r8, #11
 8003fc0:	d82a      	bhi.n	8004018 <FlashEraseSectors+0x74>
  if (result == BLT_TRUE)
 8003fc2:	2e01      	cmp	r6, #1
 8003fc4:	d124      	bne.n	8004010 <FlashEraseSectors+0x6c>
    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	9301      	str	r3, [sp, #4]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	9305      	str	r3, [sp, #20]
    eraseInitStruct.NbSectors = 1;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	9304      	str	r3, [sp, #16]
    HAL_FLASH_Unlock();
 8003fd2:	f7fd fcd3 	bl	800197c <HAL_FLASH_Unlock>
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8003fd6:	4637      	mov	r7, r6
 8003fd8:	e004      	b.n	8003fe4 <FlashEraseSectors+0x40>
    result = BLT_FALSE;
 8003fda:	2600      	movs	r6, #0
 8003fdc:	e7ec      	b.n	8003fb8 <FlashEraseSectors+0x14>
	      result = BLT_TRUE;
 8003fde:	4637      	mov	r7, r6
    for (sectorIdx=first_sector; sectorIdx<= last_sector; sectorIdx++)
 8003fe0:	3501      	adds	r5, #1
 8003fe2:	b2ed      	uxtb	r5, r5
 8003fe4:	4545      	cmp	r5, r8
 8003fe6:	d80e      	bhi.n	8004006 <FlashEraseSectors+0x62>
      CopService();
 8003fe8:	f000 fada 	bl	80045a0 <CopService>
      eraseInitStruct.Sector = sectorIdx;
 8003fec:	9503      	str	r5, [sp, #12]
      for (int i = 0; i < 8; i++)
 8003fee:	2400      	movs	r4, #0
 8003ff0:	2c07      	cmp	r4, #7
 8003ff2:	dcf5      	bgt.n	8003fe0 <FlashEraseSectors+0x3c>
	    if(HAL_FLASHEx_Erase(&eraseInitStruct, (uint32_t *)&eraseSectorError) != HAL_OK)
 8003ff4:	4669      	mov	r1, sp
 8003ff6:	a801      	add	r0, sp, #4
 8003ff8:	f7fd fdc2 	bl	8001b80 <HAL_FLASHEx_Erase>
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	d0ee      	beq.n	8003fde <FlashEraseSectors+0x3a>
      for (int i = 0; i < 8; i++)
 8004000:	3401      	adds	r4, #1
		  result = BLT_FALSE;
 8004002:	2700      	movs	r7, #0
 8004004:	e7f4      	b.n	8003ff0 <FlashEraseSectors+0x4c>
    HAL_FLASH_Lock();
 8004006:	f7fd fcd1 	bl	80019ac <HAL_FLASH_Lock>
 800400a:	463e      	mov	r6, r7
 800400c:	e000      	b.n	8004010 <FlashEraseSectors+0x6c>
 800400e:	2600      	movs	r6, #0
} /*** end of FlashEraseSectors ***/
 8004010:	4630      	mov	r0, r6
 8004012:	b006      	add	sp, #24
 8004014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004018:	2600      	movs	r6, #0
 800401a:	e7f9      	b.n	8004010 <FlashEraseSectors+0x6c>

0800401c <FlashInit>:
  blockInfo.base_addr = FLASH_INVALID_ADDRESS;
 800401c:	f04f 33ff 	mov.w	r3, #4294967295
 8004020:	4a02      	ldr	r2, [pc, #8]	; (800402c <FlashInit+0x10>)
 8004022:	6013      	str	r3, [r2, #0]
  bootBlockInfo.base_addr = FLASH_INVALID_ADDRESS;
 8004024:	4a02      	ldr	r2, [pc, #8]	; (8004030 <FlashInit+0x14>)
 8004026:	6013      	str	r3, [r2, #0]
} /*** end of FlashInit ***/
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	20000448 	.word	0x20000448
 8004030:	2000064c 	.word	0x2000064c

08004034 <FlashWrite>:
{
 8004034:	b570      	push	{r4, r5, r6, lr}
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 8004036:	1e4b      	subs	r3, r1, #1
 8004038:	4c15      	ldr	r4, [pc, #84]	; (8004090 <FlashWrite+0x5c>)
 800403a:	1a24      	subs	r4, r4, r0
 800403c:	42a3      	cmp	r3, r4
 800403e:	d901      	bls.n	8004044 <FlashWrite+0x10>
    return BLT_FALSE;
 8004040:	2000      	movs	r0, #0
} /*** end of FlashWrite ***/
 8004042:	bd70      	pop	{r4, r5, r6, pc}
 8004044:	4616      	mov	r6, r2
 8004046:	460d      	mov	r5, r1
 8004048:	4604      	mov	r4, r0
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 800404a:	f7ff feeb 	bl	8003e24 <FlashGetSector>
 800404e:	28ff      	cmp	r0, #255	; 0xff
 8004050:	d01a      	beq.n	8004088 <FlashWrite+0x54>
      (FlashGetSector(addr+len-1) == FLASH_INVALID_SECTOR))
 8004052:	1928      	adds	r0, r5, r4
 8004054:	3801      	subs	r0, #1
 8004056:	f7ff fee5 	bl	8003e24 <FlashGetSector>
  if ((FlashGetSector(addr) == FLASH_INVALID_SECTOR) || \
 800405a:	28ff      	cmp	r0, #255	; 0xff
 800405c:	d016      	beq.n	800408c <FlashWrite+0x58>
  base_addr = (addr/FLASH_WRITE_BLOCK_SIZE)*FLASH_WRITE_BLOCK_SIZE;
 800405e:	f424 73ff 	bic.w	r3, r4, #510	; 0x1fe
 8004062:	f023 0301 	bic.w	r3, r3, #1
  if (base_addr == flashLayout[0].sector_start)
 8004066:	4a0b      	ldr	r2, [pc, #44]	; (8004094 <FlashWrite+0x60>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d006      	beq.n	800407a <FlashWrite+0x46>
  return FlashAddToBlock(&blockInfo, addr, data, len);
 800406c:	462b      	mov	r3, r5
 800406e:	4632      	mov	r2, r6
 8004070:	4621      	mov	r1, r4
 8004072:	4809      	ldr	r0, [pc, #36]	; (8004098 <FlashWrite+0x64>)
 8004074:	f7ff ff54 	bl	8003f20 <FlashAddToBlock>
 8004078:	e7e3      	b.n	8004042 <FlashWrite+0xe>
    return FlashAddToBlock(&bootBlockInfo, addr, data, len);
 800407a:	462b      	mov	r3, r5
 800407c:	4632      	mov	r2, r6
 800407e:	4621      	mov	r1, r4
 8004080:	4806      	ldr	r0, [pc, #24]	; (800409c <FlashWrite+0x68>)
 8004082:	f7ff ff4d 	bl	8003f20 <FlashAddToBlock>
 8004086:	e7dc      	b.n	8004042 <FlashWrite+0xe>
    return BLT_FALSE;
 8004088:	2000      	movs	r0, #0
 800408a:	e7da      	b.n	8004042 <FlashWrite+0xe>
 800408c:	2000      	movs	r0, #0
 800408e:	e7d8      	b.n	8004042 <FlashWrite+0xe>
 8004090:	080fffff 	.word	0x080fffff
 8004094:	0800c000 	.word	0x0800c000
 8004098:	20000448 	.word	0x20000448
 800409c:	2000064c 	.word	0x2000064c

080040a0 <FlashErase>:
  if ((len - 1) > (FLASH_END_ADDRESS - addr))
 80040a0:	1e4a      	subs	r2, r1, #1
 80040a2:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <FlashErase+0x3c>)
 80040a4:	1a1b      	subs	r3, r3, r0
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d901      	bls.n	80040ae <FlashErase+0xe>
    return BLT_FALSE;
 80040aa:	2000      	movs	r0, #0
} /*** end of FlashErase ***/
 80040ac:	4770      	bx	lr
{
 80040ae:	b570      	push	{r4, r5, r6, lr}
 80040b0:	460c      	mov	r4, r1
 80040b2:	4605      	mov	r5, r0
  first_sector = FlashGetSector(addr);
 80040b4:	f7ff feb6 	bl	8003e24 <FlashGetSector>
 80040b8:	4606      	mov	r6, r0
  last_sector  = FlashGetSector(addr+len-1);
 80040ba:	1960      	adds	r0, r4, r5
 80040bc:	3801      	subs	r0, #1
 80040be:	f7ff feb1 	bl	8003e24 <FlashGetSector>
  if ((first_sector == FLASH_INVALID_SECTOR) || (last_sector == FLASH_INVALID_SECTOR))
 80040c2:	2eff      	cmp	r6, #255	; 0xff
 80040c4:	d006      	beq.n	80040d4 <FlashErase+0x34>
 80040c6:	28ff      	cmp	r0, #255	; 0xff
 80040c8:	d006      	beq.n	80040d8 <FlashErase+0x38>
  return FlashEraseSectors(first_sector, last_sector);
 80040ca:	4601      	mov	r1, r0
 80040cc:	4630      	mov	r0, r6
 80040ce:	f7ff ff69 	bl	8003fa4 <FlashEraseSectors>
} /*** end of FlashErase ***/
 80040d2:	bd70      	pop	{r4, r5, r6, pc}
    return BLT_FALSE;
 80040d4:	2000      	movs	r0, #0
 80040d6:	e7fc      	b.n	80040d2 <FlashErase+0x32>
 80040d8:	2000      	movs	r0, #0
 80040da:	e7fa      	b.n	80040d2 <FlashErase+0x32>
 80040dc:	080fffff 	.word	0x080fffff

080040e0 <FlashWriteChecksum>:
  if (bootBlockInfo.base_addr == FLASH_INVALID_ADDRESS)
 80040e0:	4b10      	ldr	r3, [pc, #64]	; (8004124 <FlashWriteChecksum+0x44>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e8:	d01a      	beq.n	8004120 <FlashWriteChecksum+0x40>
{
 80040ea:	b500      	push	{lr}
 80040ec:	b083      	sub	sp, #12
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x00]));
 80040ee:	4a0d      	ldr	r2, [pc, #52]	; (8004124 <FlashWriteChecksum+0x44>)
 80040f0:	6853      	ldr	r3, [r2, #4]
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x04]));
 80040f2:	6891      	ldr	r1, [r2, #8]
 80040f4:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x08]));
 80040f6:	68d1      	ldr	r1, [r2, #12]
 80040f8:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x0C]));
 80040fa:	6911      	ldr	r1, [r2, #16]
 80040fc:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x10]));
 80040fe:	6951      	ldr	r1, [r2, #20]
 8004100:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x14]));
 8004102:	6991      	ldr	r1, [r2, #24]
 8004104:	440b      	add	r3, r1
  signature_checksum += *((blt_int32u *)(&bootBlockInfo.data[0+0x18]));
 8004106:	69d2      	ldr	r2, [r2, #28]
 8004108:	4413      	add	r3, r2
  signature_checksum += 1; /* two's complement */
 800410a:	425b      	negs	r3, r3
 800410c:	aa02      	add	r2, sp, #8
 800410e:	f842 3d04 	str.w	r3, [r2, #-4]!
  return FlashWrite(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET,
 8004112:	2104      	movs	r1, #4
 8004114:	4804      	ldr	r0, [pc, #16]	; (8004128 <FlashWriteChecksum+0x48>)
 8004116:	f7ff ff8d 	bl	8004034 <FlashWrite>
} /*** end of FlashWriteChecksum ***/
 800411a:	b003      	add	sp, #12
 800411c:	f85d fb04 	ldr.w	pc, [sp], #4
    return BLT_TRUE;
 8004120:	2001      	movs	r0, #1
} /*** end of FlashWriteChecksum ***/
 8004122:	4770      	bx	lr
 8004124:	2000064c 	.word	0x2000064c
 8004128:	0800c188 	.word	0x0800c188

0800412c <FlashVerifyChecksum>:
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start));
 800412c:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <FlashVerifyChecksum+0x38>)
 800412e:	681b      	ldr	r3, [r3, #0]
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x04));
 8004130:	4a0d      	ldr	r2, [pc, #52]	; (8004168 <FlashVerifyChecksum+0x3c>)
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x08));
 8004136:	4b0d      	ldr	r3, [pc, #52]	; (800416c <FlashVerifyChecksum+0x40>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x0C));
 800413c:	4a0c      	ldr	r2, [pc, #48]	; (8004170 <FlashVerifyChecksum+0x44>)
 800413e:	6812      	ldr	r2, [r2, #0]
 8004140:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x10));
 8004142:	4a0c      	ldr	r2, [pc, #48]	; (8004174 <FlashVerifyChecksum+0x48>)
 8004144:	6812      	ldr	r2, [r2, #0]
 8004146:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x14));
 8004148:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <FlashVerifyChecksum+0x4c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	441a      	add	r2, r3
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+0x18));
 800414e:	4b0b      	ldr	r3, [pc, #44]	; (800417c <FlashVerifyChecksum+0x50>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4413      	add	r3, r2
  signature_checksum += *((blt_int32u *)(flashLayout[0].sector_start+BOOT_FLASH_VECTOR_TABLE_CS_OFFSET));
 8004154:	4a0a      	ldr	r2, [pc, #40]	; (8004180 <FlashVerifyChecksum+0x54>)
 8004156:	6812      	ldr	r2, [r2, #0]
  if (signature_checksum == 0)
 8004158:	42da      	cmn	r2, r3
 800415a:	d001      	beq.n	8004160 <FlashVerifyChecksum+0x34>
  return BLT_FALSE;
 800415c:	2000      	movs	r0, #0
} /*** end of FlashVerifyChecksum ***/
 800415e:	4770      	bx	lr
    return BLT_TRUE;
 8004160:	2001      	movs	r0, #1
 8004162:	4770      	bx	lr
 8004164:	0800c000 	.word	0x0800c000
 8004168:	0800c004 	.word	0x0800c004
 800416c:	0800c008 	.word	0x0800c008
 8004170:	0800c00c 	.word	0x0800c00c
 8004174:	0800c010 	.word	0x0800c010
 8004178:	0800c014 	.word	0x0800c014
 800417c:	0800c018 	.word	0x0800c018
 8004180:	0800c188 	.word	0x0800c188

08004184 <FlashDone>:
{
 8004184:	b508      	push	{r3, lr}
  if (bootBlockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8004186:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <FlashDone+0x38>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418e:	d10b      	bne.n	80041a8 <FlashDone+0x24>
  if (blockInfo.base_addr != FLASH_INVALID_ADDRESS)
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <FlashDone+0x3c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d00d      	beq.n	80041b6 <FlashDone+0x32>
    if (FlashWriteBlock(&blockInfo) == BLT_FALSE)
 800419a:	4809      	ldr	r0, [pc, #36]	; (80041c0 <FlashDone+0x3c>)
 800419c:	f7ff fe77 	bl	8003e8e <FlashWriteBlock>
 80041a0:	4603      	mov	r3, r0
 80041a2:	b148      	cbz	r0, 80041b8 <FlashDone+0x34>
  return BLT_TRUE;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e007      	b.n	80041b8 <FlashDone+0x34>
    if (FlashWriteBlock(&bootBlockInfo) == BLT_FALSE)
 80041a8:	4804      	ldr	r0, [pc, #16]	; (80041bc <FlashDone+0x38>)
 80041aa:	f7ff fe70 	bl	8003e8e <FlashWriteBlock>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d1ed      	bne.n	8004190 <FlashDone+0xc>
 80041b4:	e000      	b.n	80041b8 <FlashDone+0x34>
  return BLT_TRUE;
 80041b6:	2301      	movs	r3, #1
} /*** end of FlashDone ***/
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd08      	pop	{r3, pc}
 80041bc:	2000064c 	.word	0x2000064c
 80041c0:	20000448 	.word	0x20000448

080041c4 <FlashGetUserProgBaseAddress>:
} /*** end of FlashGetUserProgBaseAddress ***/
 80041c4:	4800      	ldr	r0, [pc, #0]	; (80041c8 <FlashGetUserProgBaseAddress+0x4>)
 80041c6:	4770      	bx	lr
 80041c8:	0800c000 	.word	0x0800c000

080041cc <NvmInit>:
** \brief     Initializes the NVM driver.
** \return    none.
**
****************************************************************************************/
void NvmInit(void)
{
 80041cc:	b508      	push	{r3, lr}
   */
  NvmInitHook();
#endif

  /* init the internal driver */
  FlashInit();
 80041ce:	f7ff ff25 	bl	800401c <FlashInit>
} /*** end of NvmInit ***/
 80041d2:	bd08      	pop	{r3, pc}

080041d4 <NvmWrite>:
** \param     data Pointer to the data buffer.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmWrite(blt_addr addr, blt_int32u len, blt_int8u *data)
{
 80041d4:	b508      	push	{r3, lr}
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the program operation */
  return FlashWrite(addr, len, data);
 80041d6:	f7ff ff2d 	bl	8004034 <FlashWrite>
} /*** end of NvmWrite ***/
 80041da:	bd08      	pop	{r3, pc}

080041dc <NvmErase>:
** \param     len  Length in bytes.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmErase(blt_addr addr, blt_int32u len)
{
 80041dc:	b508      	push	{r3, lr}
    return BLT_FALSE;
  }
#endif

  /* still here so the internal driver should try and perform the erase operation */
  return FlashErase(addr, len);
 80041de:	f7ff ff5f 	bl	80040a0 <FlashErase>
} /*** end of NvmErase ***/
 80041e2:	bd08      	pop	{r3, pc}

080041e4 <NvmVerifyChecksum>:
**            present and can be started.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmVerifyChecksum(void)
{
 80041e4:	b508      	push	{r3, lr}
#if (BOOT_NVM_CHECKSUM_HOOKS_ENABLE > 0)
  /* check checksum using the application specific method. */
  return NvmVerifyChecksumHook();
#else
  /* check checksum using the interally supported method. */
  return FlashVerifyChecksum();
 80041e6:	f7ff ffa1 	bl	800412c <FlashVerifyChecksum>
#endif
} /*** end of NvmVerifyChecksum ***/
 80041ea:	bd08      	pop	{r3, pc}

080041ec <NvmGetUserProgBaseAddress>:
**            program. This is typically that start of the vector table.
** \return    Base address.
**
****************************************************************************************/
blt_addr NvmGetUserProgBaseAddress(void)
{
 80041ec:	b508      	push	{r3, lr}
  return FlashGetUserProgBaseAddress();
 80041ee:	f7ff ffe9 	bl	80041c4 <FlashGetUserProgBaseAddress>
} /*** end of NvmGetUserProgBaseAddress ***/
 80041f2:	bd08      	pop	{r3, pc}

080041f4 <NvmDone>:
**            to determine if a valid user program is present in flash.
** \return    BLT_TRUE if successful, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool NvmDone(void)
{
 80041f4:	b508      	push	{r3, lr}
  {
    return BLT_FALSE;
  }
#else
  /* compute and write checksum, which is programmed by the internal driver. */
  if (FlashWriteChecksum() == BLT_FALSE)
 80041f6:	f7ff ff73 	bl	80040e0 <FlashWriteChecksum>
 80041fa:	4603      	mov	r3, r0
 80041fc:	b908      	cbnz	r0, 8004202 <NvmDone+0xe>
  }
#endif

  /* finish up internal driver operations */
  return FlashDone();
} /*** end of NvmDone ***/
 80041fe:	4618      	mov	r0, r3
 8004200:	bd08      	pop	{r3, pc}
  return FlashDone();
 8004202:	f7ff ffbf 	bl	8004184 <FlashDone>
 8004206:	4603      	mov	r3, r0
 8004208:	e7f9      	b.n	80041fe <NvmDone+0xa>
	...

0800420c <Rs232ReceiveByte>:
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <Rs232ReceiveByte+0x18>)
 800420e:	681b      	ldr	r3, [r3, #0]
** \return    BLT_TRUE if a byte was received, BLT_FALSE otherwise.
**
****************************************************************************************/
static blt_bool Rs232ReceiveByte(blt_int8u *data)
{
  if (LL_USART_IsActiveFlag_RXNE(USART_CHANNEL) != 0)
 8004210:	f013 0f20 	tst.w	r3, #32
 8004214:	d004      	beq.n	8004220 <Rs232ReceiveByte+0x14>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004216:	4b03      	ldr	r3, [pc, #12]	; (8004224 <Rs232ReceiveByte+0x18>)
 8004218:	685b      	ldr	r3, [r3, #4]
  {
    /* retrieve and store the newly received byte */
    *data = LL_USART_ReceiveData8(USART_CHANNEL);
 800421a:	7003      	strb	r3, [r0, #0]
    /* all done */
    return BLT_TRUE;
 800421c:	2001      	movs	r0, #1
 800421e:	4770      	bx	lr
  }
  /* still here to no new byte received */
  return BLT_FALSE;
 8004220:	2000      	movs	r0, #0
} /*** end of Rs232ReceiveByte ***/
 8004222:	4770      	bx	lr
 8004224:	40011400 	.word	0x40011400

08004228 <Rs232TransmitByte>:
** \param     data Value of byte that is to be transmitted.
** \return    none.
**
****************************************************************************************/
static void Rs232TransmitByte(blt_int8u data)
{
 8004228:	b510      	push	{r4, lr}
  USARTx->DR = Value;
 800422a:	4b09      	ldr	r3, [pc, #36]	; (8004250 <Rs232TransmitByte+0x28>)
 800422c:	6058      	str	r0, [r3, #4]
  blt_int32u timeout;

  /* write byte to transmit holding register */
  LL_USART_TransmitData8(USART_CHANNEL, data);
  /* set timeout time to wait for transmit completion. */
  timeout = TimerGet() + RS232_BYTE_TX_TIMEOUT_MS;
 800422e:	f000 f8cb 	bl	80043c8 <TimerGet>
 8004232:	f100 040a 	add.w	r4, r0, #10
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8004236:	4b06      	ldr	r3, [pc, #24]	; (8004250 <Rs232TransmitByte+0x28>)
 8004238:	681b      	ldr	r3, [r3, #0]
  /* wait for tx holding register to be empty */
  while (LL_USART_IsActiveFlag_TXE(USART_CHANNEL) == 0)
 800423a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800423e:	d105      	bne.n	800424c <Rs232TransmitByte+0x24>
  {
    /* keep the watchdog happy */
    CopService();
 8004240:	f000 f9ae 	bl	80045a0 <CopService>
    /* break loop upon timeout. this would indicate a hardware failure. */
    if (TimerGet() > timeout)
 8004244:	f000 f8c0 	bl	80043c8 <TimerGet>
 8004248:	42a0      	cmp	r0, r4
 800424a:	d9f4      	bls.n	8004236 <Rs232TransmitByte+0xe>
    {
      break;
    }
  }
} /*** end of Rs232TransmitByte ***/
 800424c:	bd10      	pop	{r4, pc}
 800424e:	bf00      	nop
 8004250:	40011400 	.word	0x40011400

08004254 <Rs232Init>:
{
 8004254:	b510      	push	{r4, lr}
 8004256:	b088      	sub	sp, #32
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8004258:	4c0c      	ldr	r4, [pc, #48]	; (800428c <Rs232Init+0x38>)
 800425a:	68e3      	ldr	r3, [r4, #12]
 800425c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004260:	60e3      	str	r3, [r4, #12]
  USART_InitStruct.BaudRate = BOOT_COM_RS232_BAUDRATE;
 8004262:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8004266:	9301      	str	r3, [sp, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004268:	2300      	movs	r3, #0
 800426a:	9302      	str	r3, [sp, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800426c:	9303      	str	r3, [sp, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800426e:	9304      	str	r3, [sp, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004270:	220c      	movs	r2, #12
 8004272:	9205      	str	r2, [sp, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004274:	9306      	str	r3, [sp, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004276:	9307      	str	r3, [sp, #28]
  LL_USART_Init(USART_CHANNEL, &USART_InitStruct);
 8004278:	a901      	add	r1, sp, #4
 800427a:	4620      	mov	r0, r4
 800427c:	f7ff f900 	bl	8003480 <LL_USART_Init>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004280:	68e3      	ldr	r3, [r4, #12]
 8004282:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004286:	60e3      	str	r3, [r4, #12]
} /*** end of Rs232Init ***/
 8004288:	b008      	add	sp, #32
 800428a:	bd10      	pop	{r4, pc}
 800428c:	40011400 	.word	0x40011400

08004290 <Rs232TransmitPacket>:
{
 8004290:	b570      	push	{r4, r5, r6, lr}
 8004292:	4606      	mov	r6, r0
 8004294:	460d      	mov	r5, r1
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 8004296:	2940      	cmp	r1, #64	; 0x40
 8004298:	d804      	bhi.n	80042a4 <Rs232TransmitPacket+0x14>
  Rs232TransmitByte(len);
 800429a:	4628      	mov	r0, r5
 800429c:	f7ff ffc4 	bl	8004228 <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 80042a0:	2400      	movs	r4, #0
 80042a2:	e00b      	b.n	80042bc <Rs232TransmitPacket+0x2c>
  ASSERT_RT(len <= BOOT_COM_RS232_TX_MAX_DATA);
 80042a4:	217b      	movs	r1, #123	; 0x7b
 80042a6:	4807      	ldr	r0, [pc, #28]	; (80042c4 <Rs232TransmitPacket+0x34>)
 80042a8:	f000 f89a 	bl	80043e0 <AssertFailure>
 80042ac:	e7f5      	b.n	800429a <Rs232TransmitPacket+0xa>
    CopService();
 80042ae:	f000 f977 	bl	80045a0 <CopService>
    Rs232TransmitByte(data[data_index]);
 80042b2:	5d30      	ldrb	r0, [r6, r4]
 80042b4:	f7ff ffb8 	bl	8004228 <Rs232TransmitByte>
  for (data_index = 0; data_index < len; data_index++)
 80042b8:	3401      	adds	r4, #1
 80042ba:	b2a4      	uxth	r4, r4
 80042bc:	b2ab      	uxth	r3, r5
 80042be:	42a3      	cmp	r3, r4
 80042c0:	d8f5      	bhi.n	80042ae <Rs232TransmitPacket+0x1e>
} /*** end of Rs232TransmitPacket ***/
 80042c2:	bd70      	pop	{r4, r5, r6, pc}
 80042c4:	08015dc0 	.word	0x08015dc0

080042c8 <Rs232ReceivePacket>:
{
 80042c8:	b570      	push	{r4, r5, r6, lr}
  if (xcpCtoRxInProgress == BLT_FALSE)
 80042ca:	4b25      	ldr	r3, [pc, #148]	; (8004360 <Rs232ReceivePacket+0x98>)
 80042cc:	781c      	ldrb	r4, [r3, #0]
 80042ce:	b9bc      	cbnz	r4, 8004300 <Rs232ReceivePacket+0x38>
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == BLT_TRUE)
 80042d0:	4824      	ldr	r0, [pc, #144]	; (8004364 <Rs232ReceivePacket+0x9c>)
 80042d2:	f7ff ff9b 	bl	800420c <Rs232ReceiveByte>
 80042d6:	2801      	cmp	r0, #1
 80042d8:	d001      	beq.n	80042de <Rs232ReceivePacket+0x16>
} /*** end of Rs232ReceivePacket ***/
 80042da:	4620      	mov	r0, r4
 80042dc:	bd70      	pop	{r4, r5, r6, pc}
      if ( (xcpCtoReqPacket[0] > 0) &&
 80042de:	4b21      	ldr	r3, [pc, #132]	; (8004364 <Rs232ReceivePacket+0x9c>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b3f      	cmp	r3, #63	; 0x3f
 80042e8:	d8f7      	bhi.n	80042da <Rs232ReceivePacket+0x12>
        xcpCtoRxStartTime = TimerGet();
 80042ea:	f000 f86d 	bl	80043c8 <TimerGet>
 80042ee:	4b1e      	ldr	r3, [pc, #120]	; (8004368 <Rs232ReceivePacket+0xa0>)
 80042f0:	6018      	str	r0, [r3, #0]
        xcpCtoRxLength = 0;
 80042f2:	4b1e      	ldr	r3, [pc, #120]	; (800436c <Rs232ReceivePacket+0xa4>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]
        xcpCtoRxInProgress = BLT_TRUE;
 80042f8:	4b19      	ldr	r3, [pc, #100]	; (8004360 <Rs232ReceivePacket+0x98>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	e7ec      	b.n	80042da <Rs232ReceivePacket+0x12>
 8004300:	4606      	mov	r6, r0
 8004302:	460d      	mov	r5, r1
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == BLT_TRUE)
 8004304:	4b19      	ldr	r3, [pc, #100]	; (800436c <Rs232ReceivePacket+0xa4>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	3301      	adds	r3, #1
 800430a:	4816      	ldr	r0, [pc, #88]	; (8004364 <Rs232ReceivePacket+0x9c>)
 800430c:	4418      	add	r0, r3
 800430e:	f7ff ff7d 	bl	800420c <Rs232ReceiveByte>
 8004312:	4604      	mov	r4, r0
 8004314:	2801      	cmp	r0, #1
 8004316:	d115      	bne.n	8004344 <Rs232ReceivePacket+0x7c>
      xcpCtoRxLength++;
 8004318:	4b14      	ldr	r3, [pc, #80]	; (800436c <Rs232ReceivePacket+0xa4>)
 800431a:	781a      	ldrb	r2, [r3, #0]
 800431c:	3201      	adds	r2, #1
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 8004322:	4b10      	ldr	r3, [pc, #64]	; (8004364 <Rs232ReceivePacket+0x9c>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d001      	beq.n	800432e <Rs232ReceivePacket+0x66>
  return BLT_FALSE;
 800432a:	2400      	movs	r4, #0
 800432c:	e7d5      	b.n	80042da <Rs232ReceivePacket+0x12>
        CpuMemCopy((blt_int32u)data, (blt_int32u)&xcpCtoReqPacket[1], xcpCtoRxLength);
 800432e:	4910      	ldr	r1, [pc, #64]	; (8004370 <Rs232ReceivePacket+0xa8>)
 8004330:	4630      	mov	r0, r6
 8004332:	f7ff fd59 	bl	8003de8 <CpuMemCopy>
        xcpCtoRxInProgress = BLT_FALSE;
 8004336:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <Rs232ReceivePacket+0x98>)
 8004338:	2200      	movs	r2, #0
 800433a:	701a      	strb	r2, [r3, #0]
        *len = xcpCtoRxLength;
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <Rs232ReceivePacket+0xa4>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	702b      	strb	r3, [r5, #0]
        return BLT_TRUE;
 8004342:	e7ca      	b.n	80042da <Rs232ReceivePacket+0x12>
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 8004344:	f000 f840 	bl	80043c8 <TimerGet>
 8004348:	4b07      	ldr	r3, [pc, #28]	; (8004368 <Rs232ReceivePacket+0xa0>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3364      	adds	r3, #100	; 0x64
 800434e:	4298      	cmp	r0, r3
 8004350:	d903      	bls.n	800435a <Rs232ReceivePacket+0x92>
        xcpCtoRxInProgress = BLT_FALSE;
 8004352:	2400      	movs	r4, #0
 8004354:	4b02      	ldr	r3, [pc, #8]	; (8004360 <Rs232ReceivePacket+0x98>)
 8004356:	701c      	strb	r4, [r3, #0]
 8004358:	e7bf      	b.n	80042da <Rs232ReceivePacket+0x12>
  return BLT_FALSE;
 800435a:	2400      	movs	r4, #0
 800435c:	e7bd      	b.n	80042da <Rs232ReceivePacket+0x12>
 800435e:	bf00      	nop
 8004360:	20000891 	.word	0x20000891
 8004364:	20000850 	.word	0x20000850
 8004368:	20000894 	.word	0x20000894
 800436c:	20000892 	.word	0x20000892
 8004370:	20000851 	.word	0x20000851

08004374 <TimerReset>:
**
****************************************************************************************/
void TimerReset(void)
{
  /* Set the systick's registers back into the default reset value. */
  SysTick->CTRL = 0;
 8004374:	4b02      	ldr	r3, [pc, #8]	; (8004380 <TimerReset+0xc>)
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 800437a:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 800437c:	609a      	str	r2, [r3, #8]
} /* end of TimerReset */
 800437e:	4770      	bx	lr
 8004380:	e000e010 	.word	0xe000e010

08004384 <TimerInit>:
{
 8004384:	b508      	push	{r3, lr}
  TimerReset();
 8004386:	f7ff fff5 	bl	8004374 <TimerReset>
  SysTick->LOAD = BOOT_CPU_SYSTEM_SPEED_KHZ - 1;
 800438a:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <TimerInit+0x1c>)
 800438c:	4a05      	ldr	r2, [pc, #20]	; (80043a4 <TimerInit+0x20>)
 800438e:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8004390:	2200      	movs	r2, #0
 8004392:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 8004394:	2105      	movs	r1, #5
 8004396:	6019      	str	r1, [r3, #0]
  millisecond_counter = 0;
 8004398:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <TimerInit+0x24>)
 800439a:	601a      	str	r2, [r3, #0]
} /*** end of TimerInit ***/
 800439c:	bd08      	pop	{r3, pc}
 800439e:	bf00      	nop
 80043a0:	e000e010 	.word	0xe000e010
 80043a4:	0002903f 	.word	0x0002903f
 80043a8:	20000898 	.word	0x20000898

080043ac <TimerUpdate>:
**
****************************************************************************************/
void TimerUpdate(void)
{
  /* Check if the millisecond event occurred. */
  if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0)
 80043ac:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <TimerUpdate+0x14>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80043b4:	d003      	beq.n	80043be <TimerUpdate+0x12>
  {
    /* Increment the millisecond counter. */
    millisecond_counter++;
 80043b6:	4a03      	ldr	r2, [pc, #12]	; (80043c4 <TimerUpdate+0x18>)
 80043b8:	6813      	ldr	r3, [r2, #0]
 80043ba:	3301      	adds	r3, #1
 80043bc:	6013      	str	r3, [r2, #0]
  }
} /*** end of TimerUpdate ***/
 80043be:	4770      	bx	lr
 80043c0:	e000e010 	.word	0xe000e010
 80043c4:	20000898 	.word	0x20000898

080043c8 <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
blt_int32u TimerGet(void)
{
 80043c8:	b508      	push	{r3, lr}
  /* Updating timer here allows this function to be called in a loop with timeout
   * detection.
   */
  TimerUpdate();
 80043ca:	f7ff ffef 	bl	80043ac <TimerUpdate>
  /* Read and return the amount of milliseconds that passed since initialization. */
  return millisecond_counter;
} /*** end of TimerGet ***/
 80043ce:	4b01      	ldr	r3, [pc, #4]	; (80043d4 <TimerGet+0xc>)
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	bd08      	pop	{r3, pc}
 80043d4:	20000898 	.word	0x20000898

080043d8 <HAL_GetTick>:
**            tick functionality works in polling mode.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
uint32_t HAL_GetTick(void)
{
 80043d8:	b508      	push	{r3, lr}
  /* Link to the bootloader's 1ms timer. */
  return TimerGet();
 80043da:	f7ff fff5 	bl	80043c8 <TimerGet>
} /*** end of HAL_GetTick ***/
 80043de:	bd08      	pop	{r3, pc}

080043e0 <AssertFailure>:
** \param     line   Linenumber in the source file where the assertion occurred.
** \return    none
**
****************************************************************************************/
void AssertFailure(blt_char *file, blt_int32u line)
{
 80043e0:	b508      	push	{r3, lr}
  /* hang the software so that it requires a hard reset */
  for (;;)
  {
    /* keep servicing the watchdog so that this one does not cause a reset */
    CopService();
 80043e2:	f000 f8dd 	bl	80045a0 <CopService>
 80043e6:	e7fc      	b.n	80043e2 <AssertFailure+0x2>

080043e8 <BackDoorCheck>:
**            controls the opening/closing of the backdoor.
** \return    none
**
****************************************************************************************/
void BackDoorCheck(void)
{
 80043e8:	b508      	push	{r3, lr}
#if (BOOT_BACKDOOR_HOOKS_ENABLE == 0)
#if (BOOT_COM_ENABLE > 0)
  /* check if a connection with the host was already established. in this case the
   * backdoor stays open anyway, so no need to check if it needs to be closed.
   */
  if (ComIsConnected() == BLT_TRUE)
 80043ea:	f000 f8cd 	bl	8004588 <ComIsConnected>
 80043ee:	2801      	cmp	r0, #1
 80043f0:	d006      	beq.n	8004400 <BackDoorCheck+0x18>
#if (BOOT_FILE_SYS_ENABLE > 0)
  /* check if the file module is busy, indicating that a firmware update through the
   * locally attached storage is in progress. in this case the backdoor stays open
   * anyway, so no need to check if it needs to be closed.
   */
  if (FileIsIdle() == BLT_FALSE)
 80043f2:	f000 f965 	bl	80046c0 <FileIsIdle>
 80043f6:	b118      	cbz	r0, 8004400 <BackDoorCheck+0x18>
    return;
  }
#endif

  /* when the backdoor is still open, check if it's time to close it */
  if (backdoorOpen == BLT_TRUE)
 80043f8:	4b0c      	ldr	r3, [pc, #48]	; (800442c <BackDoorCheck+0x44>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d000      	beq.n	8004402 <BackDoorCheck+0x1a>
        CpuStartUserProgram();
      }
    }
  }
#endif
} /*** end of BackDoorCheck ***/
 8004400:	bd08      	pop	{r3, pc}
    if (TimerGet() >= (BOOT_BACKDOOR_ENTRY_TIMEOUT_MS + backdoorExtensionTime + backdoorOpenTime))
 8004402:	f7ff ffe1 	bl	80043c8 <TimerGet>
 8004406:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <BackDoorCheck+0x48>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <BackDoorCheck+0x4c>)
 800440c:	6812      	ldr	r2, [r2, #0]
 800440e:	4413      	add	r3, r2
 8004410:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004414:	4298      	cmp	r0, r3
 8004416:	d3f3      	bcc.n	8004400 <BackDoorCheck+0x18>
      backdoorOpen = BLT_FALSE;
 8004418:	4b04      	ldr	r3, [pc, #16]	; (800442c <BackDoorCheck+0x44>)
 800441a:	2200      	movs	r2, #0
 800441c:	701a      	strb	r2, [r3, #0]
      if (FileHandleFirmwareUpdateRequest() == BLT_FALSE)
 800441e:	f000 f959 	bl	80046d4 <FileHandleFirmwareUpdateRequest>
 8004422:	2800      	cmp	r0, #0
 8004424:	d1ec      	bne.n	8004400 <BackDoorCheck+0x18>
        CpuStartUserProgram();
 8004426:	f7ff fcbf 	bl	8003da8 <CpuStartUserProgram>
 800442a:	e7e9      	b.n	8004400 <BackDoorCheck+0x18>
 800442c:	200008a0 	.word	0x200008a0
 8004430:	2000089c 	.word	0x2000089c
 8004434:	200008a4 	.word	0x200008a4

08004438 <BackDoorRestartTimer>:
**            called.
** \return    none
**
****************************************************************************************/
void BackDoorRestartTimer(void)
{
 8004438:	b508      	push	{r3, lr}
  /* only restart the time if the backdoor is actually still open */
  if (backdoorOpen == BLT_TRUE)
 800443a:	4b05      	ldr	r3, [pc, #20]	; (8004450 <BackDoorRestartTimer+0x18>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d000      	beq.n	8004444 <BackDoorRestartTimer+0xc>
  {
    backdoorOpenTime = TimerGet();
  }
} /*** end of BackDoorRestartTimer ***/
 8004442:	bd08      	pop	{r3, pc}
    backdoorOpenTime = TimerGet();
 8004444:	f7ff ffc0 	bl	80043c8 <TimerGet>
 8004448:	4b02      	ldr	r3, [pc, #8]	; (8004454 <BackDoorRestartTimer+0x1c>)
 800444a:	6018      	str	r0, [r3, #0]
} /*** end of BackDoorRestartTimer ***/
 800444c:	e7f9      	b.n	8004442 <BackDoorRestartTimer+0xa>
 800444e:	bf00      	nop
 8004450:	200008a0 	.word	0x200008a0
 8004454:	200008a4 	.word	0x200008a4

08004458 <BackDoorInit>:
{
 8004458:	b508      	push	{r3, lr}
  backdoorOpen = BLT_TRUE;
 800445a:	4b04      	ldr	r3, [pc, #16]	; (800446c <BackDoorInit+0x14>)
 800445c:	2201      	movs	r2, #1
 800445e:	701a      	strb	r2, [r3, #0]
  BackDoorRestartTimer();
 8004460:	f7ff ffea 	bl	8004438 <BackDoorRestartTimer>
  BackDoorCheck();
 8004464:	f7ff ffc0 	bl	80043e8 <BackDoorCheck>
} /*** end of BackDoorInit ***/
 8004468:	bd08      	pop	{r3, pc}
 800446a:	bf00      	nop
 800446c:	200008a0 	.word	0x200008a0

08004470 <BootInit>:
** \brief     Initializes the bootloader core.
** \return    none
**
****************************************************************************************/
void BootInit(void)
{
 8004470:	b508      	push	{r3, lr}
  /* initialize the CPU */
  CpuInit();
 8004472:	f7ff fc95 	bl	8003da0 <CpuInit>
  /* initialize the watchdog */
  CopInit();
 8004476:	f000 f88f 	bl	8004598 <CopInit>
  /* initialize the millisecond timer */
  TimerInit();
 800447a:	f7ff ff83 	bl	8004384 <TimerInit>
  /* initialize the non-volatile memory driver */
  NvmInit();
 800447e:	f7ff fea5 	bl	80041cc <NvmInit>
#if (BOOT_FILE_SYS_ENABLE > 0)
  /* initialize the file system module */
  FileInit();
 8004482:	f000 f905 	bl	8004690 <FileInit>
#endif
#if (BOOT_COM_ENABLE > 0)
  /* initialize the communication module */
  ComInit();
 8004486:	f000 f80f 	bl	80044a8 <ComInit>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* initialize the gateway module */
  GatewayInit();
#endif
  /* initialize the backdoor entry */
  BackDoorInit();
 800448a:	f7ff ffe5 	bl	8004458 <BackDoorInit>
} /*** end of BootInit ***/
 800448e:	bd08      	pop	{r3, pc}

08004490 <BootTask>:
** \brief     Task function of the bootloader core that drives the program.
** \return    none
**
****************************************************************************************/
void BootTask(void)
{
 8004490:	b508      	push	{r3, lr}
  /* service the watchdog */
  CopService();
 8004492:	f000 f885 	bl	80045a0 <CopService>
  /* update the millisecond timer */
  TimerUpdate();
 8004496:	f7ff ff89 	bl	80043ac <TimerUpdate>
#if (BOOT_FILE_SYS_ENABLE > 0)
  /* call worker task for updating firmware from locally attached file storage */
  FileTask();
 800449a:	f000 fa15 	bl	80048c8 <FileTask>
#endif /* BOOT_FILE_SYS_ENABLE > 0 */
#if (BOOT_COM_ENABLE > 0)
  /* process possibly pending communication data */
  ComTask();
 800449e:	f000 f813 	bl	80044c8 <ComTask>
#if (ADDON_GATEWAY_MOD_ENABLE > 0)
  /* run the gateway */
  GatewayTask();
#endif
  /* control the backdoor */
  BackDoorCheck();
 80044a2:	f7ff ffa1 	bl	80043e8 <BackDoorCheck>
} /*** end of BootTask ***/
 80044a6:	bd08      	pop	{r3, pc}

080044a8 <ComInit>:
**            the communication.
** \return    none
**
****************************************************************************************/
void ComInit(void)
{
 80044a8:	b510      	push	{r4, lr}
  /* initialize the XCP communication protocol */
  XcpInit();
 80044aa:	f000 fedb 	bl	8005264 <XcpInit>
  /* set it as active */
  comActiveInterface = COM_IF_CAN;
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* initialize the RS232 interface */
  Rs232Init();
 80044ae:	f7ff fed1 	bl	8004254 <Rs232Init>
  /* set it as active */
  comActiveInterface = COM_IF_RS232;
 80044b2:	4c04      	ldr	r4, [pc, #16]	; (80044c4 <ComInit+0x1c>)
 80044b4:	2300      	movs	r3, #0
 80044b6:	7023      	strb	r3, [r4, #0]
  comActiveInterface = COM_IF_USB;
#endif
#if (BOOT_COM_NET_ENABLE > 0)
  #if (BOOT_COM_NET_DEFERRED_INIT_ENABLE == 0)
  /* initialize the TCP/IP interface */
	NetInit();
 80044b8:	f7fc f966 	bl	8000788 <NetInit>
  /* set it as active */
  comActiveInterface = COM_IF_NET;
 80044bc:	2303      	movs	r3, #3
 80044be:	7023      	strb	r3, [r4, #0]
  #endif
#endif
} /*** end of ComInit ***/
 80044c0:	bd10      	pop	{r4, pc}
 80044c2:	bf00      	nop
 80044c4:	2000000d 	.word	0x2000000d

080044c8 <ComTask>:
**            and submitting the request to process newly received data.
** \return    none
**
****************************************************************************************/
void ComTask(void)
{
 80044c8:	b500      	push	{lr}
 80044ca:	b083      	sub	sp, #12
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  if (Rs232ReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 80044cc:	f10d 0107 	add.w	r1, sp, #7
 80044d0:	4810      	ldr	r0, [pc, #64]	; (8004514 <ComTask+0x4c>)
 80044d2:	f7ff fef9 	bl	80042c8 <Rs232ReceivePacket>
 80044d6:	2801      	cmp	r0, #1
 80044d8:	d009      	beq.n	80044ee <ComTask+0x26>
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
#if (BOOT_COM_NET_ENABLE > 0)
  if (NetReceivePacket(&xcpCtoReqPacket[0], &xcpPacketLen) == BLT_TRUE)
 80044da:	f10d 0107 	add.w	r1, sp, #7
 80044de:	480d      	ldr	r0, [pc, #52]	; (8004514 <ComTask+0x4c>)
 80044e0:	f7fc f954 	bl	800078c <NetReceivePacket>
 80044e4:	2801      	cmp	r0, #1
 80044e6:	d00b      	beq.n	8004500 <ComTask+0x38>
    comActiveInterface = COM_IF_NET;
    /* process packet */
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
  }
#endif
} /*** end of ComTask ***/
 80044e8:	b003      	add	sp, #12
 80044ea:	f85d fb04 	ldr.w	pc, [sp], #4
    comActiveInterface = COM_IF_RS232;
 80044ee:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <ComTask+0x50>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	701a      	strb	r2, [r3, #0]
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 80044f4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80044f8:	4806      	ldr	r0, [pc, #24]	; (8004514 <ComTask+0x4c>)
 80044fa:	f000 fed3 	bl	80052a4 <XcpPacketReceived>
 80044fe:	e7ec      	b.n	80044da <ComTask+0x12>
    comActiveInterface = COM_IF_NET;
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <ComTask+0x50>)
 8004502:	2203      	movs	r2, #3
 8004504:	701a      	strb	r2, [r3, #0]
    XcpPacketReceived(&xcpCtoReqPacket[0], xcpPacketLen);
 8004506:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800450a:	4802      	ldr	r0, [pc, #8]	; (8004514 <ComTask+0x4c>)
 800450c:	f000 feca 	bl	80052a4 <XcpPacketReceived>
} /*** end of ComTask ***/
 8004510:	e7ea      	b.n	80044e8 <ComTask+0x20>
 8004512:	bf00      	nop
 8004514:	200008a8 	.word	0x200008a8
 8004518:	2000000d 	.word	0x2000000d

0800451c <ComFree>:
{
#if (BOOT_COM_USB_ENABLE > 0)
  /* disconnect the usb device from the usb host */
  UsbFree();
#endif
} /*** end of ComFree ***/
 800451c:	4770      	bx	lr
	...

08004520 <ComTransmitPacket>:
** \param     len  Number of data bytes that need to be transmitted.
** \return    none
**
****************************************************************************************/
void ComTransmitPacket(blt_int8u *data, blt_int16u len)
{
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	4604      	mov	r4, r0
 8004524:	460d      	mov	r5, r1
#endif
#if (BOOT_COM_RS232_ENABLE > 0)
  /* transmit the packet. note that len is limited to 255 in the plausibility check,
   * so cast is okay.
   */
  if (comActiveInterface == COM_IF_RS232)
 8004526:	4b09      	ldr	r3, [pc, #36]	; (800454c <ComTransmitPacket+0x2c>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	b133      	cbz	r3, 800453a <ComTransmitPacket+0x1a>
  {
    UsbTransmitPacket(data, len);
  }
#endif
#if (BOOT_COM_NET_ENABLE > 0)
  if (comActiveInterface == COM_IF_NET)
 800452c:	4b07      	ldr	r3, [pc, #28]	; (800454c <ComTransmitPacket+0x2c>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b03      	cmp	r3, #3
 8004532:	d006      	beq.n	8004542 <ComTransmitPacket+0x22>
    NetTransmitPacket(data, len);
  }
#endif

  /* send signal that the packet was transmitted */
  XcpPacketTransmitted();
 8004534:	f000 feae 	bl	8005294 <XcpPacketTransmitted>
} /*** end of ComTransmitPacket ***/
 8004538:	bd38      	pop	{r3, r4, r5, pc}
    Rs232TransmitPacket(data, (blt_int8u)len);
 800453a:	b2c9      	uxtb	r1, r1
 800453c:	f7ff fea8 	bl	8004290 <Rs232TransmitPacket>
 8004540:	e7f4      	b.n	800452c <ComTransmitPacket+0xc>
    NetTransmitPacket(data, len);
 8004542:	b2e9      	uxtb	r1, r5
 8004544:	4620      	mov	r0, r4
 8004546:	f7fc f920 	bl	800078a <NetTransmitPacket>
 800454a:	e7f3      	b.n	8004534 <ComTransmitPacket+0x14>
 800454c:	2000000d 	.word	0x2000000d

08004550 <ComGetActiveInterfaceMaxRxLen>:
blt_int16u ComGetActiveInterfaceMaxRxLen(void)
{
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 8004550:	4b05      	ldr	r3, [pc, #20]	; (8004568 <ComGetActiveInterfaceMaxRxLen+0x18>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d005      	beq.n	8004564 <ComGetActiveInterfaceMaxRxLen+0x14>
 8004558:	2b02      	cmp	r3, #2
 800455a:	d001      	beq.n	8004560 <ComGetActiveInterfaceMaxRxLen+0x10>
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_RX_MAX_DATA;
 800455c:	2040      	movs	r0, #64	; 0x40
 800455e:	4770      	bx	lr
    case COM_IF_CAN:
      result = BOOT_COM_CAN_RX_MAX_DATA;
      break;

    case COM_IF_USB:
      result = BOOT_COM_USB_RX_MAX_DATA;
 8004560:	2000      	movs	r0, #0
      break;
 8004562:	4770      	bx	lr
      result = BOOT_COM_CAN_RX_MAX_DATA;
 8004564:	2008      	movs	r0, #8
      result = BOOT_COM_RX_MAX_DATA;
      break;
  }

  return result;
} /*** end of ComGetActiveInterfaceMaxRxLen ***/
 8004566:	4770      	bx	lr
 8004568:	2000000d 	.word	0x2000000d

0800456c <ComGetActiveInterfaceMaxTxLen>:
blt_int16u ComGetActiveInterfaceMaxTxLen(void)
{
  blt_int16u result;

  /* filter on communication interface identifier */
  switch (comActiveInterface)
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <ComGetActiveInterfaceMaxTxLen+0x18>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d005      	beq.n	8004580 <ComGetActiveInterfaceMaxTxLen+0x14>
 8004574:	2b02      	cmp	r3, #2
 8004576:	d001      	beq.n	800457c <ComGetActiveInterfaceMaxTxLen+0x10>
  {
    case COM_IF_RS232:
      result = BOOT_COM_RS232_TX_MAX_DATA;
 8004578:	2040      	movs	r0, #64	; 0x40
 800457a:	4770      	bx	lr
    case COM_IF_CAN:
      result = BOOT_COM_CAN_TX_MAX_DATA;
      break;

    case COM_IF_USB:
      result = BOOT_COM_USB_TX_MAX_DATA;
 800457c:	2000      	movs	r0, #0
      break;
 800457e:	4770      	bx	lr
      result = BOOT_COM_CAN_TX_MAX_DATA;
 8004580:	2008      	movs	r0, #8
      result = BOOT_COM_TX_MAX_DATA;
      break;
  }

  return result;
} /*** end of ComGetActiveInterfaceMaxTxLen ***/
 8004582:	4770      	bx	lr
 8004584:	2000000d 	.word	0x2000000d

08004588 <ComIsConnected>:
** \brief     This function obtains the XCP connection state.
** \return    BLT_TRUE when an XCP connection is established, BLT_FALSE otherwise.
**
****************************************************************************************/
blt_bool ComIsConnected(void)
{
 8004588:	b508      	push	{r3, lr}
  blt_bool result = BLT_FALSE;

  /* Is there an active XCP connection? This indicates that the communication interface
   * is in the connection state. 
   */  
  if (XcpIsConnected())
 800458a:	f000 fe79 	bl	8005280 <XcpIsConnected>
 800458e:	4603      	mov	r3, r0
 8004590:	b100      	cbz	r0, 8004594 <ComIsConnected+0xc>
  {
    result = BLT_TRUE;
 8004592:	2301      	movs	r3, #1
    result = BLT_TRUE;
  }
#endif
  /* give the result back to the caller. */
  return result;
} /*** end of ComIsConnected ***/
 8004594:	4618      	mov	r0, r3
 8004596:	bd08      	pop	{r3, pc}

08004598 <CopInit>:
** \brief     Watchdog initialization function.
** \return    none
**
****************************************************************************************/
void CopInit(void)
{
 8004598:	b508      	push	{r3, lr}
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopInitHook();
 800459a:	f7fc f807 	bl	80005ac <CopInitHook>
#endif
} /*** end of CopInit ***/
 800459e:	bd08      	pop	{r3, pc}

080045a0 <CopService>:
** \brief     Watchdog service function to prevent the watchdog from timing out.
** \return    none
**
****************************************************************************************/
void CopService(void)
{
 80045a0:	b508      	push	{r3, lr}
#if (BOOT_COP_HOOKS_ENABLE > 0)
  CopServiceHook();
 80045a2:	f7fc f808 	bl	80005b6 <CopServiceHook>
#endif
} /*** end of CopService ***/
 80045a6:	bd08      	pop	{r3, pc}

080045a8 <FileLibLongToIntString>:
** \param     destination Pointer to character buffer for storing the results.
** \return    The resulting string.
**
****************************************************************************************/
static blt_char *FileLibLongToIntString(blt_int32u long_val, blt_char *destination)
{
 80045a8:	b410      	push	{r4}
  blt_int32u long_val_cpy = long_val;
 80045aa:	4603      	mov	r3, r0

  /* first determine how many digits there will be */
  do
  {
    destination++;
 80045ac:	3101      	adds	r1, #1
    long_val_cpy /= 10;
 80045ae:	4a0d      	ldr	r2, [pc, #52]	; (80045e4 <FileLibLongToIntString+0x3c>)
 80045b0:	fba2 2303 	umull	r2, r3, r2, r3
  }
  while (long_val_cpy > 0);
 80045b4:	08db      	lsrs	r3, r3, #3
 80045b6:	d1f9      	bne.n	80045ac <FileLibLongToIntString+0x4>
  /* add space for the string termination and add it */
  *destination = '\0';
 80045b8:	2300      	movs	r3, #0
 80045ba:	700b      	strb	r3, [r1, #0]
  do
  {
    /* set write pointer to where the next character should go */
    destination--;
    /* write digit in ASCII format */
    *destination = long_val_cpy % 10 + '0';
 80045bc:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <FileLibLongToIntString+0x3c>)
 80045be:	fba3 2300 	umull	r2, r3, r3, r0
 80045c2:	08db      	lsrs	r3, r3, #3
 80045c4:	461a      	mov	r2, r3
 80045c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80045ca:	005c      	lsls	r4, r3, #1
 80045cc:	1b03      	subs	r3, r0, r4
 80045ce:	3330      	adds	r3, #48	; 0x30
 80045d0:	f801 3d01 	strb.w	r3, [r1, #-1]!
    /* move on to the next digit */
    long_val_cpy /= 10;
 80045d4:	4610      	mov	r0, r2
  }
  while (long_val_cpy > 0);
 80045d6:	2a00      	cmp	r2, #0
 80045d8:	d1f0      	bne.n	80045bc <FileLibLongToIntString+0x14>

  return destination;
} /*** end of FileLibLongToIntString ***/
 80045da:	4608      	mov	r0, r1
 80045dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	cccccccd 	.word	0xcccccccd

080045e8 <FileLibByteNibbleToChar>:
  c = (nibble & 0x0f) + '0';
 80045e8:	f000 030f 	and.w	r3, r0, #15
  if (nibble > 9)
 80045ec:	2809      	cmp	r0, #9
 80045ee:	d902      	bls.n	80045f6 <FileLibByteNibbleToChar+0xe>
    c += 7;
 80045f0:	f103 0037 	add.w	r0, r3, #55	; 0x37
} /*** end of FileLibByteNibbleToChar ***/
 80045f4:	4770      	bx	lr
{
 80045f6:	b510      	push	{r4, lr}
 80045f8:	f103 0430 	add.w	r4, r3, #48	; 0x30
    c = toupper((blt_int16s)c);
 80045fc:	f010 fbc6 	bl	8014d8c <__locale_ctype_ptr>
 8004600:	4420      	add	r0, r4
 8004602:	7843      	ldrb	r3, [r0, #1]
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d001      	beq.n	8004610 <FileLibByteNibbleToChar+0x28>
 800460c:	b2e0      	uxtb	r0, r4
} /*** end of FileLibByteNibbleToChar ***/
 800460e:	bd10      	pop	{r4, pc}
    c = toupper((blt_int16s)c);
 8004610:	3c20      	subs	r4, #32
 8004612:	e7fb      	b.n	800460c <FileLibByteNibbleToChar+0x24>

08004614 <FileLibByteToHexString>:
{
 8004614:	b538      	push	{r3, r4, r5, lr}
 8004616:	4605      	mov	r5, r0
 8004618:	460c      	mov	r4, r1
  destination[0] = FileLibByteNibbleToChar(byte_val >> 4);
 800461a:	0900      	lsrs	r0, r0, #4
 800461c:	f7ff ffe4 	bl	80045e8 <FileLibByteNibbleToChar>
 8004620:	7020      	strb	r0, [r4, #0]
  destination[1] = FileLibByteNibbleToChar(byte_val & 0x0f);
 8004622:	f005 000f 	and.w	r0, r5, #15
 8004626:	f7ff ffdf 	bl	80045e8 <FileLibByteNibbleToChar>
 800462a:	7060      	strb	r0, [r4, #1]
  destination[2] = '\0';
 800462c:	2300      	movs	r3, #0
 800462e:	70a3      	strb	r3, [r4, #2]
} /*** end of FileLibByteToHexString ***/
 8004630:	4620      	mov	r0, r4
 8004632:	bd38      	pop	{r3, r4, r5, pc}

08004634 <FileLibHexStringToByte>:
**                      decimal value.
** \return    The resulting byte value.
**
****************************************************************************************/
static blt_int8u FileLibHexStringToByte(const blt_char *hexstring)
{
 8004634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004636:	4607      	mov	r7, r0
  blt_int8u result = 0;
  blt_char  c;
  blt_int8u counter;

  /* a hexadecimal character is 2 characters long (i.e 0x4F minus the 0x part) */
  for (counter=0; counter < 2; counter++)
 8004638:	2600      	movs	r6, #0
  blt_int8u result = 0;
 800463a:	4635      	mov	r5, r6
  for (counter=0; counter < 2; counter++)
 800463c:	e007      	b.n	800464e <FileLibHexStringToByte+0x1a>
  {
    /* read out the character */
    c = toupper((blt_int16s)(hexstring[counter]));
 800463e:	3c20      	subs	r4, #32
 8004640:	e010      	b.n	8004664 <FileLibHexStringToByte+0x30>
    if (c > 9)
    {
      c -= 7;
    }
    /* add it to the result */
    result = (result << 4) + c;
 8004642:	012d      	lsls	r5, r5, #4
 8004644:	b2ed      	uxtb	r5, r5
 8004646:	18ab      	adds	r3, r5, r2
 8004648:	b2dd      	uxtb	r5, r3
  for (counter=0; counter < 2; counter++)
 800464a:	3601      	adds	r6, #1
 800464c:	b2f6      	uxtb	r6, r6
 800464e:	2e01      	cmp	r6, #1
 8004650:	d819      	bhi.n	8004686 <FileLibHexStringToByte+0x52>
    c = toupper((blt_int16s)(hexstring[counter]));
 8004652:	5dbc      	ldrb	r4, [r7, r6]
 8004654:	f010 fb9a 	bl	8014d8c <__locale_ctype_ptr>
 8004658:	4420      	add	r0, r4
 800465a:	7843      	ldrb	r3, [r0, #1]
 800465c:	f003 0303 	and.w	r3, r3, #3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d0ec      	beq.n	800463e <FileLibHexStringToByte+0xa>
 8004664:	b2e3      	uxtb	r3, r4
    if ((c < '0') || (c > 'F') || ((c > '9') && (c < 'A')))
 8004666:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800466a:	b2d2      	uxtb	r2, r2
 800466c:	2a16      	cmp	r2, #22
 800466e:	d809      	bhi.n	8004684 <FileLibHexStringToByte+0x50>
 8004670:	f1a3 013a 	sub.w	r1, r3, #58	; 0x3a
 8004674:	b2c9      	uxtb	r1, r1
 8004676:	2906      	cmp	r1, #6
 8004678:	d907      	bls.n	800468a <FileLibHexStringToByte+0x56>
    if (c > 9)
 800467a:	2a09      	cmp	r2, #9
 800467c:	d9e1      	bls.n	8004642 <FileLibHexStringToByte+0xe>
      c -= 7;
 800467e:	3b37      	subs	r3, #55	; 0x37
 8004680:	b2da      	uxtb	r2, r3
 8004682:	e7de      	b.n	8004642 <FileLibHexStringToByte+0xe>
      return 0;
 8004684:	2500      	movs	r5, #0
  }
  /* return the results */
  return result;
} /*** end of FileLibHexStringToByte ***/
 8004686:	4628      	mov	r0, r5
 8004688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return 0;
 800468a:	2500      	movs	r5, #0
 800468c:	e7fb      	b.n	8004686 <FileLibHexStringToByte+0x52>
	...

08004690 <FileInit>:
{
 8004690:	b508      	push	{r3, lr}
  firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004692:	2200      	movs	r2, #0
 8004694:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <FileInit+0x20>)
 8004696:	701a      	strb	r2, [r3, #0]
  fresult = f_mount(&fatFsObjects.fs, "0:", 0);
 8004698:	4906      	ldr	r1, [pc, #24]	; (80046b4 <FileInit+0x24>)
 800469a:	4807      	ldr	r0, [pc, #28]	; (80046b8 <FileInit+0x28>)
 800469c:	f002 f88e 	bl	80067bc <f_mount>
  ASSERT_RT(fresult == FR_OK);
 80046a0:	b900      	cbnz	r0, 80046a4 <FileInit+0x14>
} /*** end of FileInit ***/
 80046a2:	bd08      	pop	{r3, pc}
  ASSERT_RT(fresult == FR_OK);
 80046a4:	2177      	movs	r1, #119	; 0x77
 80046a6:	4805      	ldr	r0, [pc, #20]	; (80046bc <FileInit+0x2c>)
 80046a8:	f7ff fe9a 	bl	80043e0 <AssertFailure>
} /*** end of FileInit ***/
 80046ac:	e7f9      	b.n	80046a2 <FileInit+0x12>
 80046ae:	bf00      	nop
 80046b0:	20000d48 	.word	0x20000d48
 80046b4:	08015dfc 	.word	0x08015dfc
 80046b8:	200008f0 	.word	0x200008f0
 80046bc:	08015e00 	.word	0x08015e00

080046c0 <FileIsIdle>:
  if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_IDLE)
 80046c0:	4b03      	ldr	r3, [pc, #12]	; (80046d0 <FileIsIdle+0x10>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	b10b      	cbz	r3, 80046ca <FileIsIdle+0xa>
  return BLT_FALSE;
 80046c6:	2000      	movs	r0, #0
} /*** end of FileIsIdle ***/
 80046c8:	4770      	bx	lr
    return BLT_TRUE;
 80046ca:	2001      	movs	r0, #1
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20000d48 	.word	0x20000d48

080046d4 <FileHandleFirmwareUpdateRequest>:
{
 80046d4:	b508      	push	{r3, lr}
  if (ComIsConnected() == BLT_TRUE)
 80046d6:	f7ff ff57 	bl	8004588 <ComIsConnected>
 80046da:	2801      	cmp	r0, #1
 80046dc:	d00e      	beq.n	80046fc <FileHandleFirmwareUpdateRequest+0x28>
  if (firmwareUpdateState != FIRMWARE_UPDATE_STATE_IDLE)
 80046de:	4b08      	ldr	r3, [pc, #32]	; (8004700 <FileHandleFirmwareUpdateRequest+0x2c>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	b10b      	cbz	r3, 80046e8 <FileHandleFirmwareUpdateRequest+0x14>
    return BLT_FALSE;
 80046e4:	2000      	movs	r0, #0
} /*** end of FileHandleFirmwareUpdateRequest ***/
 80046e6:	bd08      	pop	{r3, pc}
  if (FileIsFirmwareUpdateRequestedHook() == BLT_TRUE)
 80046e8:	f7fb ff6a 	bl	80005c0 <FileIsFirmwareUpdateRequestedHook>
 80046ec:	2801      	cmp	r0, #1
 80046ee:	d001      	beq.n	80046f4 <FileHandleFirmwareUpdateRequest+0x20>
  return BLT_FALSE;
 80046f0:	2000      	movs	r0, #0
 80046f2:	e7f8      	b.n	80046e6 <FileHandleFirmwareUpdateRequest+0x12>
    firmwareUpdateState = FIRMWARE_UPDATE_STATE_STARTING;
 80046f4:	4b02      	ldr	r3, [pc, #8]	; (8004700 <FileHandleFirmwareUpdateRequest+0x2c>)
 80046f6:	2201      	movs	r2, #1
 80046f8:	701a      	strb	r2, [r3, #0]
    return BLT_TRUE;
 80046fa:	e7f4      	b.n	80046e6 <FileHandleFirmwareUpdateRequest+0x12>
    return BLT_FALSE;
 80046fc:	2000      	movs	r0, #0
 80046fe:	e7f2      	b.n	80046e6 <FileHandleFirmwareUpdateRequest+0x12>
 8004700:	20000d48 	.word	0x20000d48

08004704 <FileSrecGetLineType>:
{
 8004704:	b538      	push	{r3, r4, r5, lr}
 8004706:	4605      	mov	r5, r0
  if ((toupper((blt_int16s)(line[0])) != 'S') || (isdigit((blt_int16s)(line[1])) == 0))
 8004708:	7804      	ldrb	r4, [r0, #0]
 800470a:	f010 fb3f 	bl	8014d8c <__locale_ctype_ptr>
 800470e:	4420      	add	r0, r4
 8004710:	7843      	ldrb	r3, [r0, #1]
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d003      	beq.n	8004722 <FileSrecGetLineType+0x1e>
 800471a:	2c53      	cmp	r4, #83	; 0x53
 800471c:	d003      	beq.n	8004726 <FileSrecGetLineType+0x22>
    return LINE_TYPE_UNSUPPORTED;
 800471e:	2003      	movs	r0, #3
} /*** end of FileSrecGetLineType ***/
 8004720:	bd38      	pop	{r3, r4, r5, pc}
  if ((toupper((blt_int16s)(line[0])) != 'S') || (isdigit((blt_int16s)(line[1])) == 0))
 8004722:	3c20      	subs	r4, #32
 8004724:	e7f9      	b.n	800471a <FileSrecGetLineType+0x16>
 8004726:	f010 fb31 	bl	8014d8c <__locale_ctype_ptr>
 800472a:	786b      	ldrb	r3, [r5, #1]
 800472c:	4418      	add	r0, r3
 800472e:	7842      	ldrb	r2, [r0, #1]
 8004730:	f012 0f04 	tst.w	r2, #4
 8004734:	d009      	beq.n	800474a <FileSrecGetLineType+0x46>
  if (line[1] == '1')
 8004736:	2b31      	cmp	r3, #49	; 0x31
 8004738:	d009      	beq.n	800474e <FileSrecGetLineType+0x4a>
  if (line[1] == '2')
 800473a:	2b32      	cmp	r3, #50	; 0x32
 800473c:	d009      	beq.n	8004752 <FileSrecGetLineType+0x4e>
  if (line[1] == '3')
 800473e:	2b33      	cmp	r3, #51	; 0x33
 8004740:	d001      	beq.n	8004746 <FileSrecGetLineType+0x42>
  return LINE_TYPE_UNSUPPORTED;
 8004742:	2003      	movs	r0, #3
 8004744:	e7ec      	b.n	8004720 <FileSrecGetLineType+0x1c>
    return LINE_TYPE_S3;
 8004746:	2002      	movs	r0, #2
 8004748:	e7ea      	b.n	8004720 <FileSrecGetLineType+0x1c>
    return LINE_TYPE_UNSUPPORTED;
 800474a:	2003      	movs	r0, #3
 800474c:	e7e8      	b.n	8004720 <FileSrecGetLineType+0x1c>
    return LINE_TYPE_S1;
 800474e:	2000      	movs	r0, #0
 8004750:	e7e6      	b.n	8004720 <FileSrecGetLineType+0x1c>
    return LINE_TYPE_S2;
 8004752:	2001      	movs	r0, #1
 8004754:	e7e4      	b.n	8004720 <FileSrecGetLineType+0x1c>

08004756 <FileSrecVerifyChecksum>:
{
 8004756:	b570      	push	{r4, r5, r6, lr}
 8004758:	4606      	mov	r6, r0
  bytes_on_line = FileLibHexStringToByte(line);
 800475a:	3002      	adds	r0, #2
 800475c:	f7ff ff6a 	bl	8004634 <FileLibHexStringToByte>
 8004760:	4605      	mov	r5, r0
 8004762:	b284      	uxth	r4, r0
  line += 2;
 8004764:	3604      	adds	r6, #4
    checksum += FileLibHexStringToByte(line);
 8004766:	4630      	mov	r0, r6
 8004768:	f7ff ff64 	bl	8004634 <FileLibHexStringToByte>
 800476c:	4405      	add	r5, r0
 800476e:	b2ed      	uxtb	r5, r5
    bytes_on_line--;
 8004770:	3c01      	subs	r4, #1
 8004772:	b2a4      	uxth	r4, r4
    line += 2;
 8004774:	3602      	adds	r6, #2
  while (bytes_on_line > 1);
 8004776:	2c01      	cmp	r4, #1
 8004778:	d8f5      	bhi.n	8004766 <FileSrecVerifyChecksum+0x10>
  checksum = ~checksum;
 800477a:	43ed      	mvns	r5, r5
 800477c:	b2ed      	uxtb	r5, r5
  if (checksum != FileLibHexStringToByte(line))
 800477e:	4630      	mov	r0, r6
 8004780:	f7ff ff58 	bl	8004634 <FileLibHexStringToByte>
 8004784:	42a8      	cmp	r0, r5
 8004786:	d001      	beq.n	800478c <FileSrecVerifyChecksum+0x36>
    return BLT_FALSE;
 8004788:	2000      	movs	r0, #0
} /*** end of FileSrecVerifyChecksum ***/
 800478a:	bd70      	pop	{r4, r5, r6, pc}
  return BLT_TRUE;
 800478c:	2001      	movs	r0, #1
 800478e:	e7fc      	b.n	800478a <FileSrecVerifyChecksum+0x34>

08004790 <FileSrecParseLine>:
{
 8004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004792:	4604      	mov	r4, r0
 8004794:	4617      	mov	r7, r2
  ASSERT_RT((address != BLT_NULL) && (line != BLT_NULL));
 8004796:	460e      	mov	r6, r1
 8004798:	b1a1      	cbz	r1, 80047c4 <FileSrecParseLine+0x34>
 800479a:	b198      	cbz	r0, 80047c4 <FileSrecParseLine+0x34>
  lineType = FileSrecGetLineType(line);
 800479c:	4620      	mov	r0, r4
 800479e:	f7ff ffb1 	bl	8004704 <FileSrecGetLineType>
 80047a2:	4605      	mov	r5, r0
  if (lineType == LINE_TYPE_UNSUPPORTED)
 80047a4:	2803      	cmp	r0, #3
 80047a6:	f000 8087 	beq.w	80048b8 <FileSrecParseLine+0x128>
  if (FileSrecVerifyChecksum(line) == BLT_FALSE)
 80047aa:	4620      	mov	r0, r4
 80047ac:	f7ff ffd3 	bl	8004756 <FileSrecVerifyChecksum>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	f000 8084 	beq.w	80048be <FileSrecParseLine+0x12e>
  switch (lineType)
 80047b6:	2d01      	cmp	r5, #1
 80047b8:	d029      	beq.n	800480e <FileSrecParseLine+0x7e>
 80047ba:	b14d      	cbz	r5, 80047d0 <FileSrecParseLine+0x40>
 80047bc:	2d02      	cmp	r5, #2
 80047be:	d04d      	beq.n	800485c <FileSrecParseLine+0xcc>
  blt_int16s    data_byte_count = 0;
 80047c0:	2500      	movs	r5, #0
 80047c2:	e07a      	b.n	80048ba <FileSrecParseLine+0x12a>
  ASSERT_RT((address != BLT_NULL) && (line != BLT_NULL));
 80047c4:	f240 2163 	movw	r1, #611	; 0x263
 80047c8:	483e      	ldr	r0, [pc, #248]	; (80048c4 <FileSrecParseLine+0x134>)
 80047ca:	f7ff fe09 	bl	80043e0 <AssertFailure>
 80047ce:	e7e5      	b.n	800479c <FileSrecParseLine+0xc>
      bytes_on_line = FileLibHexStringToByte(line);
 80047d0:	1ca0      	adds	r0, r4, #2
 80047d2:	f7ff ff2f 	bl	8004634 <FileLibHexStringToByte>
 80047d6:	b285      	uxth	r5, r0
      *address = FileLibHexStringToByte(line) << 8;
 80047d8:	1d20      	adds	r0, r4, #4
 80047da:	f7ff ff2b 	bl	8004634 <FileLibHexStringToByte>
 80047de:	0200      	lsls	r0, r0, #8
 80047e0:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line);
 80047e2:	1da0      	adds	r0, r4, #6
 80047e4:	f7ff ff26 	bl	8004634 <FileLibHexStringToByte>
 80047e8:	6833      	ldr	r3, [r6, #0]
 80047ea:	4418      	add	r0, r3
 80047ec:	6030      	str	r0, [r6, #0]
      line += 2;
 80047ee:	3408      	adds	r4, #8
      data_byte_count = bytes_on_line - 3; /* -2 bytes address, -1 byte checksum */
 80047f0:	3d03      	subs	r5, #3
 80047f2:	b22d      	sxth	r5, r5
      if (data != BLT_NULL)
 80047f4:	2f00      	cmp	r7, #0
 80047f6:	d060      	beq.n	80048ba <FileSrecParseLine+0x12a>
        for (i=0; i<data_byte_count; i++)
 80047f8:	2600      	movs	r6, #0
 80047fa:	42ae      	cmp	r6, r5
 80047fc:	da5d      	bge.n	80048ba <FileSrecParseLine+0x12a>
          data[i] = FileLibHexStringToByte(line);
 80047fe:	4620      	mov	r0, r4
 8004800:	f7ff ff18 	bl	8004634 <FileLibHexStringToByte>
 8004804:	55b8      	strb	r0, [r7, r6]
          line += 2;
 8004806:	3402      	adds	r4, #2
        for (i=0; i<data_byte_count; i++)
 8004808:	3601      	adds	r6, #1
 800480a:	b2b6      	uxth	r6, r6
 800480c:	e7f5      	b.n	80047fa <FileSrecParseLine+0x6a>
      bytes_on_line = FileLibHexStringToByte(line);
 800480e:	1ca0      	adds	r0, r4, #2
 8004810:	f7ff ff10 	bl	8004634 <FileLibHexStringToByte>
 8004814:	b285      	uxth	r5, r0
      *address = FileLibHexStringToByte(line) << 16;
 8004816:	1d20      	adds	r0, r4, #4
 8004818:	f7ff ff0c 	bl	8004634 <FileLibHexStringToByte>
 800481c:	0400      	lsls	r0, r0, #16
 800481e:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line) << 8;
 8004820:	1da0      	adds	r0, r4, #6
 8004822:	f7ff ff07 	bl	8004634 <FileLibHexStringToByte>
 8004826:	6833      	ldr	r3, [r6, #0]
 8004828:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 800482c:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line);
 800482e:	f104 0008 	add.w	r0, r4, #8
 8004832:	f7ff feff 	bl	8004634 <FileLibHexStringToByte>
 8004836:	6833      	ldr	r3, [r6, #0]
 8004838:	4418      	add	r0, r3
 800483a:	6030      	str	r0, [r6, #0]
      line += 2;
 800483c:	340a      	adds	r4, #10
      data_byte_count = bytes_on_line - 4; /* -3 bytes address, -1 byte checksum */
 800483e:	3d04      	subs	r5, #4
 8004840:	b22d      	sxth	r5, r5
      if (data != BLT_NULL)
 8004842:	2f00      	cmp	r7, #0
 8004844:	d039      	beq.n	80048ba <FileSrecParseLine+0x12a>
        for (i=0; i<data_byte_count; i++)
 8004846:	2600      	movs	r6, #0
 8004848:	42ae      	cmp	r6, r5
 800484a:	da36      	bge.n	80048ba <FileSrecParseLine+0x12a>
          data[i] = FileLibHexStringToByte(line);
 800484c:	4620      	mov	r0, r4
 800484e:	f7ff fef1 	bl	8004634 <FileLibHexStringToByte>
 8004852:	55b8      	strb	r0, [r7, r6]
          line += 2;
 8004854:	3402      	adds	r4, #2
        for (i=0; i<data_byte_count; i++)
 8004856:	3601      	adds	r6, #1
 8004858:	b2b6      	uxth	r6, r6
 800485a:	e7f5      	b.n	8004848 <FileSrecParseLine+0xb8>
      bytes_on_line = FileLibHexStringToByte(line);
 800485c:	1ca0      	adds	r0, r4, #2
 800485e:	f7ff fee9 	bl	8004634 <FileLibHexStringToByte>
 8004862:	b285      	uxth	r5, r0
      *address = FileLibHexStringToByte(line) << 24;
 8004864:	1d20      	adds	r0, r4, #4
 8004866:	f7ff fee5 	bl	8004634 <FileLibHexStringToByte>
 800486a:	0600      	lsls	r0, r0, #24
 800486c:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line) << 16;
 800486e:	1da0      	adds	r0, r4, #6
 8004870:	f7ff fee0 	bl	8004634 <FileLibHexStringToByte>
 8004874:	6833      	ldr	r3, [r6, #0]
 8004876:	eb03 4000 	add.w	r0, r3, r0, lsl #16
 800487a:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line) << 8;
 800487c:	f104 0008 	add.w	r0, r4, #8
 8004880:	f7ff fed8 	bl	8004634 <FileLibHexStringToByte>
 8004884:	6833      	ldr	r3, [r6, #0]
 8004886:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 800488a:	6030      	str	r0, [r6, #0]
      *address += FileLibHexStringToByte(line);
 800488c:	f104 000a 	add.w	r0, r4, #10
 8004890:	f7ff fed0 	bl	8004634 <FileLibHexStringToByte>
 8004894:	6833      	ldr	r3, [r6, #0]
 8004896:	4418      	add	r0, r3
 8004898:	6030      	str	r0, [r6, #0]
      line += 2;
 800489a:	340c      	adds	r4, #12
      data_byte_count = bytes_on_line - 5; /* -4 bytes address, -1 byte checksum */
 800489c:	3d05      	subs	r5, #5
 800489e:	b22d      	sxth	r5, r5
      if (data != BLT_NULL)
 80048a0:	b15f      	cbz	r7, 80048ba <FileSrecParseLine+0x12a>
        for (i=0; i<data_byte_count; i++)
 80048a2:	2600      	movs	r6, #0
 80048a4:	42ae      	cmp	r6, r5
 80048a6:	da08      	bge.n	80048ba <FileSrecParseLine+0x12a>
          data[i] = FileLibHexStringToByte(line);
 80048a8:	4620      	mov	r0, r4
 80048aa:	f7ff fec3 	bl	8004634 <FileLibHexStringToByte>
 80048ae:	55b8      	strb	r0, [r7, r6]
          line += 2;
 80048b0:	3402      	adds	r4, #2
        for (i=0; i<data_byte_count; i++)
 80048b2:	3601      	adds	r6, #1
 80048b4:	b2b6      	uxth	r6, r6
 80048b6:	e7f5      	b.n	80048a4 <FileSrecParseLine+0x114>
    return 0;
 80048b8:	2500      	movs	r5, #0
} /*** end of FileSrecParseLine ***/
 80048ba:	4628      	mov	r0, r5
 80048bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERROR_SREC_INVALID_CHECKSUM;
 80048be:	f04f 35ff 	mov.w	r5, #4294967295
 80048c2:	e7fa      	b.n	80048ba <FileSrecParseLine+0x12a>
 80048c4:	08015e00 	.word	0x08015e00

080048c8 <FileTask>:
  if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_IDLE)
 80048c8:	4bb5      	ldr	r3, [pc, #724]	; (8004ba0 <FileTask+0x2d8>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 81f5 	beq.w	8004cbc <FileTask+0x3f4>
{
 80048d2:	b570      	push	{r4, r5, r6, lr}
  else if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_STARTING)
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d005      	beq.n	80048e4 <FileTask+0x1c>
  else if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_ERASING)
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d030      	beq.n	800493e <FileTask+0x76>
  else if (firmwareUpdateState == FIRMWARE_UPDATE_STATE_PROGRAMMING)
 80048dc:	2b03      	cmp	r3, #3
 80048de:	f000 8120 	beq.w	8004b22 <FileTask+0x25a>
} /*** end of FileTask ***/
 80048e2:	bd70      	pop	{r4, r5, r6, pc}
    NvmInit();
 80048e4:	f7ff fc72 	bl	80041cc <NvmInit>
    FileFirmwareUpdateStartedHook();
 80048e8:	f7fb fe8c 	bl	8000604 <FileFirmwareUpdateStartedHook>
    FileFirmwareUpdateLogHook("Firmware update request detected\n\r");
 80048ec:	48ad      	ldr	r0, [pc, #692]	; (8004ba4 <FileTask+0x2dc>)
 80048ee:	f7fb fecd 	bl	800068c <FileFirmwareUpdateLogHook>
    FileFirmwareUpdateLogHook("Opening firmware file for reading...");
 80048f2:	48ad      	ldr	r0, [pc, #692]	; (8004ba8 <FileTask+0x2e0>)
 80048f4:	f7fb feca 	bl	800068c <FileFirmwareUpdateLogHook>
    if (f_open(&fatFsObjects.file, FileGetFirmwareFilenameHook(), FA_OPEN_EXISTING | FA_READ) != FR_OK)
 80048f8:	f7fb fe80 	bl	80005fc <FileGetFirmwareFilenameHook>
 80048fc:	2201      	movs	r2, #1
 80048fe:	4601      	mov	r1, r0
 8004900:	48aa      	ldr	r0, [pc, #680]	; (8004bac <FileTask+0x2e4>)
 8004902:	f001 ff87 	bl	8006814 <f_open>
 8004906:	b148      	cbz	r0, 800491c <FileTask+0x54>
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004908:	4ba5      	ldr	r3, [pc, #660]	; (8004ba0 <FileTask+0x2d8>)
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
      FileFirmwareUpdateLogHook("ERROR\n\r");
 800490e:	48a8      	ldr	r0, [pc, #672]	; (8004bb0 <FileTask+0x2e8>)
 8004910:	f7fb febc 	bl	800068c <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_OPEN_FIRMWARE_FILE);
 8004914:	2001      	movs	r0, #1
 8004916:	f7fb feab 	bl	8000670 <FileFirmwareUpdateErrorHook>
      return;
 800491a:	e7e2      	b.n	80048e2 <FileTask+0x1a>
    FileFirmwareUpdateLogHook("OK\n\r");
 800491c:	48a5      	ldr	r0, [pc, #660]	; (8004bb4 <FileTask+0x2ec>)
 800491e:	f7fb feb5 	bl	800068c <FileFirmwareUpdateLogHook>
    FileFirmwareUpdateLogHook("Starting the programming sequence\n\r");
 8004922:	48a5      	ldr	r0, [pc, #660]	; (8004bb8 <FileTask+0x2f0>)
 8004924:	f7fb feb2 	bl	800068c <FileFirmwareUpdateLogHook>
    FileFirmwareUpdateLogHook("Parsing firmware file to detect erase blocks...");
 8004928:	48a4      	ldr	r0, [pc, #656]	; (8004bbc <FileTask+0x2f4>)
 800492a:	f7fb feaf 	bl	800068c <FileFirmwareUpdateLogHook>
    eraseInfo.start_address = 0;
 800492e:	4ba4      	ldr	r3, [pc, #656]	; (8004bc0 <FileTask+0x2f8>)
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]
    eraseInfo.total_size = 0;
 8004934:	605a      	str	r2, [r3, #4]
    firmwareUpdateState = FIRMWARE_UPDATE_STATE_ERASING;
 8004936:	4b9a      	ldr	r3, [pc, #616]	; (8004ba0 <FileTask+0x2d8>)
 8004938:	2202      	movs	r2, #2
 800493a:	701a      	strb	r2, [r3, #0]
 800493c:	e7d1      	b.n	80048e2 <FileTask+0x1a>
    read_line_ptr = f_gets(lineParseObject.line, sizeof(lineParseObject.line), &fatFsObjects.file);
 800493e:	4ca1      	ldr	r4, [pc, #644]	; (8004bc4 <FileTask+0x2fc>)
 8004940:	f504 720c 	add.w	r2, r4, #560	; 0x230
 8004944:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004948:	489f      	ldr	r0, [pc, #636]	; (8004bc8 <FileTask+0x300>)
 800494a:	f002 fb85 	bl	8007058 <f_gets>
    if (f_error(&fatFsObjects.file) > 0)
 800494e:	f894 3241 	ldrb.w	r3, [r4, #577]	; 0x241
 8004952:	2b00      	cmp	r3, #0
 8004954:	d15d      	bne.n	8004a12 <FileTask+0x14a>
    if (read_line_ptr != BLT_NULL)
 8004956:	b1a8      	cbz	r0, 8004984 <FileTask+0xbc>
      parse_result = FileSrecParseLine(lineParseObject.line, &lineParseObject.address, BLT_NULL);
 8004958:	489b      	ldr	r0, [pc, #620]	; (8004bc8 <FileTask+0x300>)
 800495a:	2200      	movs	r2, #0
 800495c:	f500 71c0 	add.w	r1, r0, #384	; 0x180
 8004960:	f7ff ff16 	bl	8004790 <FileSrecParseLine>
 8004964:	4604      	mov	r4, r0
      if (parse_result == ERROR_SREC_INVALID_CHECKSUM)
 8004966:	f1b0 3fff 	cmp.w	r0, #4294967295
 800496a:	d060      	beq.n	8004a2e <FileTask+0x166>
    if (parse_result > 0)
 800496c:	2800      	cmp	r0, #0
 800496e:	dd09      	ble.n	8004984 <FileTask+0xbc>
      if (eraseInfo.total_size == 0)
 8004970:	4b93      	ldr	r3, [pc, #588]	; (8004bc0 <FileTask+0x2f8>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d167      	bne.n	8004a48 <FileTask+0x180>
        eraseInfo.start_address = lineParseObject.address;
 8004978:	4b93      	ldr	r3, [pc, #588]	; (8004bc8 <FileTask+0x300>)
 800497a:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800497e:	4b90      	ldr	r3, [pc, #576]	; (8004bc0 <FileTask+0x2f8>)
 8004980:	601a      	str	r2, [r3, #0]
        eraseInfo.total_size = parse_result;
 8004982:	6058      	str	r0, [r3, #4]
    if (f_eof(&fatFsObjects.file) > 0)
 8004984:	4b8f      	ldr	r3, [pc, #572]	; (8004bc4 <FileTask+0x2fc>)
 8004986:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 800498a:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 800498e:	429a      	cmp	r2, r3
 8004990:	d1a7      	bne.n	80048e2 <FileTask+0x1a>
      if (f_lseek(&fatFsObjects.file, 0) != FR_OK)
 8004992:	2100      	movs	r1, #0
 8004994:	4885      	ldr	r0, [pc, #532]	; (8004bac <FileTask+0x2e4>)
 8004996:	f002 fa1d 	bl	8006dd4 <f_lseek>
 800499a:	2800      	cmp	r0, #0
 800499c:	f040 80a7 	bne.w	8004aee <FileTask+0x226>
      if (eraseInfo.total_size > 0)
 80049a0:	4b87      	ldr	r3, [pc, #540]	; (8004bc0 <FileTask+0x2f8>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	b373      	cbz	r3, 8004a04 <FileTask+0x13c>
        FileFirmwareUpdateLogHook("OK\n\r");
 80049a6:	4883      	ldr	r0, [pc, #524]	; (8004bb4 <FileTask+0x2ec>)
 80049a8:	f7fb fe70 	bl	800068c <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateLogHook("Erasing ");
 80049ac:	4887      	ldr	r0, [pc, #540]	; (8004bcc <FileTask+0x304>)
 80049ae:	f7fb fe6d 	bl	800068c <FileFirmwareUpdateLogHook>
        FileLibLongToIntString(eraseInfo.total_size, loggingStr);
 80049b2:	4d87      	ldr	r5, [pc, #540]	; (8004bd0 <FileTask+0x308>)
 80049b4:	4c82      	ldr	r4, [pc, #520]	; (8004bc0 <FileTask+0x2f8>)
 80049b6:	4629      	mov	r1, r5
 80049b8:	6860      	ldr	r0, [r4, #4]
 80049ba:	f7ff fdf5 	bl	80045a8 <FileLibLongToIntString>
        FileFirmwareUpdateLogHook(loggingStr);
 80049be:	4628      	mov	r0, r5
 80049c0:	f7fb fe64 	bl	800068c <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateLogHook(" bytes from memory at 0x");
 80049c4:	4883      	ldr	r0, [pc, #524]	; (8004bd4 <FileTask+0x30c>)
 80049c6:	f7fb fe61 	bl	800068c <FileFirmwareUpdateLogHook>
        FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 24), &loggingStr[0]);
 80049ca:	4629      	mov	r1, r5
 80049cc:	78e0      	ldrb	r0, [r4, #3]
 80049ce:	f7ff fe21 	bl	8004614 <FileLibByteToHexString>
        FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 16), &loggingStr[2]);
 80049d2:	1ca9      	adds	r1, r5, #2
 80049d4:	78a0      	ldrb	r0, [r4, #2]
 80049d6:	f7ff fe1d 	bl	8004614 <FileLibByteToHexString>
        FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 8), &loggingStr[4]);
 80049da:	1d29      	adds	r1, r5, #4
 80049dc:	7860      	ldrb	r0, [r4, #1]
 80049de:	f7ff fe19 	bl	8004614 <FileLibByteToHexString>
        FileLibByteToHexString((blt_int8u)eraseInfo.start_address, &loggingStr[6]);
 80049e2:	1da9      	adds	r1, r5, #6
 80049e4:	7820      	ldrb	r0, [r4, #0]
 80049e6:	f7ff fe15 	bl	8004614 <FileLibByteToHexString>
        FileFirmwareUpdateLogHook(loggingStr);
 80049ea:	4628      	mov	r0, r5
 80049ec:	f7fb fe4e 	bl	800068c <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateLogHook("...");
 80049f0:	4879      	ldr	r0, [pc, #484]	; (8004bd8 <FileTask+0x310>)
 80049f2:	f7fb fe4b 	bl	800068c <FileFirmwareUpdateLogHook>
        if (NvmErase(eraseInfo.start_address, eraseInfo.total_size) == BLT_FALSE)
 80049f6:	6861      	ldr	r1, [r4, #4]
 80049f8:	6820      	ldr	r0, [r4, #0]
 80049fa:	f7ff fbef 	bl	80041dc <NvmErase>
 80049fe:	2800      	cmp	r0, #0
 8004a00:	f000 8082 	beq.w	8004b08 <FileTask+0x240>
      FileFirmwareUpdateLogHook("OK\n\r");
 8004a04:	486b      	ldr	r0, [pc, #428]	; (8004bb4 <FileTask+0x2ec>)
 8004a06:	f7fb fe41 	bl	800068c <FileFirmwareUpdateLogHook>
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_PROGRAMMING;
 8004a0a:	4b65      	ldr	r3, [pc, #404]	; (8004ba0 <FileTask+0x2d8>)
 8004a0c:	2203      	movs	r2, #3
 8004a0e:	701a      	strb	r2, [r3, #0]
 8004a10:	e767      	b.n	80048e2 <FileTask+0x1a>
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004a12:	4b63      	ldr	r3, [pc, #396]	; (8004ba0 <FileTask+0x2d8>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	701a      	strb	r2, [r3, #0]
      FileFirmwareUpdateLogHook("ERROR\n\r");
 8004a18:	4865      	ldr	r0, [pc, #404]	; (8004bb0 <FileTask+0x2e8>)
 8004a1a:	f7fb fe37 	bl	800068c <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_READ_FROM_FILE);
 8004a1e:	2002      	movs	r0, #2
 8004a20:	f7fb fe26 	bl	8000670 <FileFirmwareUpdateErrorHook>
      f_close(&fatFsObjects.file);
 8004a24:	f504 700c 	add.w	r0, r4, #560	; 0x230
 8004a28:	f002 f9c0 	bl	8006dac <f_close>
      return;
 8004a2c:	e759      	b.n	80048e2 <FileTask+0x1a>
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004a2e:	4b5c      	ldr	r3, [pc, #368]	; (8004ba0 <FileTask+0x2d8>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	701a      	strb	r2, [r3, #0]
        FileFirmwareUpdateLogHook("ERROR\n\r");
 8004a34:	485e      	ldr	r0, [pc, #376]	; (8004bb0 <FileTask+0x2e8>)
 8004a36:	f7fb fe29 	bl	800068c <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateErrorHook(FILE_ERROR_INVALID_CHECKSUM_IN_FILE);
 8004a3a:	2003      	movs	r0, #3
 8004a3c:	f7fb fe18 	bl	8000670 <FileFirmwareUpdateErrorHook>
        f_close(&fatFsObjects.file);
 8004a40:	485a      	ldr	r0, [pc, #360]	; (8004bac <FileTask+0x2e4>)
 8004a42:	f002 f9b3 	bl	8006dac <f_close>
        return;
 8004a46:	e74c      	b.n	80048e2 <FileTask+0x1a>
        if (lineParseObject.address == (eraseInfo.start_address + eraseInfo.total_size))
 8004a48:	4a5f      	ldr	r2, [pc, #380]	; (8004bc8 <FileTask+0x300>)
 8004a4a:	f8d2 1180 	ldr.w	r1, [r2, #384]	; 0x180
 8004a4e:	4a5c      	ldr	r2, [pc, #368]	; (8004bc0 <FileTask+0x2f8>)
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	441a      	add	r2, r3
 8004a54:	4291      	cmp	r1, r2
 8004a56:	d103      	bne.n	8004a60 <FileTask+0x198>
          eraseInfo.total_size += parse_result;
 8004a58:	4403      	add	r3, r0
 8004a5a:	4a59      	ldr	r2, [pc, #356]	; (8004bc0 <FileTask+0x2f8>)
 8004a5c:	6053      	str	r3, [r2, #4]
 8004a5e:	e791      	b.n	8004984 <FileTask+0xbc>
          FileFirmwareUpdateLogHook("OK\n\r");
 8004a60:	4854      	ldr	r0, [pc, #336]	; (8004bb4 <FileTask+0x2ec>)
 8004a62:	f7fb fe13 	bl	800068c <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateLogHook("Erasing ");
 8004a66:	4859      	ldr	r0, [pc, #356]	; (8004bcc <FileTask+0x304>)
 8004a68:	f7fb fe10 	bl	800068c <FileFirmwareUpdateLogHook>
          FileLibLongToIntString(eraseInfo.total_size, loggingStr);
 8004a6c:	4e58      	ldr	r6, [pc, #352]	; (8004bd0 <FileTask+0x308>)
 8004a6e:	4d54      	ldr	r5, [pc, #336]	; (8004bc0 <FileTask+0x2f8>)
 8004a70:	4631      	mov	r1, r6
 8004a72:	6868      	ldr	r0, [r5, #4]
 8004a74:	f7ff fd98 	bl	80045a8 <FileLibLongToIntString>
          FileFirmwareUpdateLogHook(loggingStr);
 8004a78:	4630      	mov	r0, r6
 8004a7a:	f7fb fe07 	bl	800068c <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateLogHook(" bytes from memory at 0x");
 8004a7e:	4855      	ldr	r0, [pc, #340]	; (8004bd4 <FileTask+0x30c>)
 8004a80:	f7fb fe04 	bl	800068c <FileFirmwareUpdateLogHook>
          FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 24), &loggingStr[0]);
 8004a84:	4631      	mov	r1, r6
 8004a86:	78e8      	ldrb	r0, [r5, #3]
 8004a88:	f7ff fdc4 	bl	8004614 <FileLibByteToHexString>
          FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 16), &loggingStr[2]);
 8004a8c:	1cb1      	adds	r1, r6, #2
 8004a8e:	78a8      	ldrb	r0, [r5, #2]
 8004a90:	f7ff fdc0 	bl	8004614 <FileLibByteToHexString>
          FileLibByteToHexString((blt_int8u)(eraseInfo.start_address >> 8), &loggingStr[4]);
 8004a94:	1d31      	adds	r1, r6, #4
 8004a96:	7868      	ldrb	r0, [r5, #1]
 8004a98:	f7ff fdbc 	bl	8004614 <FileLibByteToHexString>
          FileLibByteToHexString((blt_int8u)eraseInfo.start_address, &loggingStr[6]);
 8004a9c:	1db1      	adds	r1, r6, #6
 8004a9e:	7828      	ldrb	r0, [r5, #0]
 8004aa0:	f7ff fdb8 	bl	8004614 <FileLibByteToHexString>
          FileFirmwareUpdateLogHook(loggingStr);
 8004aa4:	4630      	mov	r0, r6
 8004aa6:	f7fb fdf1 	bl	800068c <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateLogHook("...");
 8004aaa:	484b      	ldr	r0, [pc, #300]	; (8004bd8 <FileTask+0x310>)
 8004aac:	f7fb fdee 	bl	800068c <FileFirmwareUpdateLogHook>
          if (NvmErase(eraseInfo.start_address, eraseInfo.total_size) == BLT_FALSE)
 8004ab0:	6869      	ldr	r1, [r5, #4]
 8004ab2:	6828      	ldr	r0, [r5, #0]
 8004ab4:	f7ff fb92 	bl	80041dc <NvmErase>
 8004ab8:	b160      	cbz	r0, 8004ad4 <FileTask+0x20c>
          FileFirmwareUpdateLogHook("OK\n\r");
 8004aba:	483e      	ldr	r0, [pc, #248]	; (8004bb4 <FileTask+0x2ec>)
 8004abc:	f7fb fde6 	bl	800068c <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateLogHook("Parsing firmware file to detect erase blocks...");
 8004ac0:	483e      	ldr	r0, [pc, #248]	; (8004bbc <FileTask+0x2f4>)
 8004ac2:	f7fb fde3 	bl	800068c <FileFirmwareUpdateLogHook>
          eraseInfo.start_address = lineParseObject.address;
 8004ac6:	4b40      	ldr	r3, [pc, #256]	; (8004bc8 <FileTask+0x300>)
 8004ac8:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8004acc:	4b3c      	ldr	r3, [pc, #240]	; (8004bc0 <FileTask+0x2f8>)
 8004ace:	601a      	str	r2, [r3, #0]
          eraseInfo.total_size = parse_result;
 8004ad0:	605c      	str	r4, [r3, #4]
 8004ad2:	e757      	b.n	8004984 <FileTask+0xbc>
            firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004ad4:	4b32      	ldr	r3, [pc, #200]	; (8004ba0 <FileTask+0x2d8>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	701a      	strb	r2, [r3, #0]
            FileFirmwareUpdateLogHook("ERROR\n\r");
 8004ada:	4835      	ldr	r0, [pc, #212]	; (8004bb0 <FileTask+0x2e8>)
 8004adc:	f7fb fdd6 	bl	800068c <FileFirmwareUpdateLogHook>
            FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_ERASE_MEMORY);
 8004ae0:	2005      	movs	r0, #5
 8004ae2:	f7fb fdc5 	bl	8000670 <FileFirmwareUpdateErrorHook>
            f_close(&fatFsObjects.file);
 8004ae6:	4831      	ldr	r0, [pc, #196]	; (8004bac <FileTask+0x2e4>)
 8004ae8:	f002 f960 	bl	8006dac <f_close>
            return;
 8004aec:	e6f9      	b.n	80048e2 <FileTask+0x1a>
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004aee:	4b2c      	ldr	r3, [pc, #176]	; (8004ba0 <FileTask+0x2d8>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	701a      	strb	r2, [r3, #0]
        FileFirmwareUpdateLogHook("ERROR\n\r");
 8004af4:	482e      	ldr	r0, [pc, #184]	; (8004bb0 <FileTask+0x2e8>)
 8004af6:	f7fb fdc9 	bl	800068c <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateErrorHook(FILE_ERROR_REWINDING_FILE_READ_POINTER);
 8004afa:	2004      	movs	r0, #4
 8004afc:	f7fb fdb8 	bl	8000670 <FileFirmwareUpdateErrorHook>
        f_close(&fatFsObjects.file);
 8004b00:	482a      	ldr	r0, [pc, #168]	; (8004bac <FileTask+0x2e4>)
 8004b02:	f002 f953 	bl	8006dac <f_close>
        return;
 8004b06:	e6ec      	b.n	80048e2 <FileTask+0x1a>
          firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004b08:	4b25      	ldr	r3, [pc, #148]	; (8004ba0 <FileTask+0x2d8>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	701a      	strb	r2, [r3, #0]
          FileFirmwareUpdateLogHook("ERROR\n\r");
 8004b0e:	4828      	ldr	r0, [pc, #160]	; (8004bb0 <FileTask+0x2e8>)
 8004b10:	f7fb fdbc 	bl	800068c <FileFirmwareUpdateLogHook>
          FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_ERASE_MEMORY);
 8004b14:	2005      	movs	r0, #5
 8004b16:	f7fb fdab 	bl	8000670 <FileFirmwareUpdateErrorHook>
          f_close(&fatFsObjects.file);
 8004b1a:	4824      	ldr	r0, [pc, #144]	; (8004bac <FileTask+0x2e4>)
 8004b1c:	f002 f946 	bl	8006dac <f_close>
          return;
 8004b20:	e6df      	b.n	80048e2 <FileTask+0x1a>
    read_line_ptr = f_gets(lineParseObject.line, sizeof(lineParseObject.line), &fatFsObjects.file);
 8004b22:	4c28      	ldr	r4, [pc, #160]	; (8004bc4 <FileTask+0x2fc>)
 8004b24:	f504 720c 	add.w	r2, r4, #560	; 0x230
 8004b28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b2c:	4826      	ldr	r0, [pc, #152]	; (8004bc8 <FileTask+0x300>)
 8004b2e:	f002 fa93 	bl	8007058 <f_gets>
    if (f_error(&fatFsObjects.file) > 0)
 8004b32:	f894 3241 	ldrb.w	r3, [r4, #577]	; 0x241
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d156      	bne.n	8004be8 <FileTask+0x320>
    if (read_line_ptr != BLT_NULL)
 8004b3a:	b160      	cbz	r0, 8004b56 <FileTask+0x28e>
      parse_result = FileSrecParseLine(lineParseObject.line, &lineParseObject.address, lineParseObject.data);
 8004b3c:	4822      	ldr	r0, [pc, #136]	; (8004bc8 <FileTask+0x300>)
 8004b3e:	f500 7280 	add.w	r2, r0, #256	; 0x100
 8004b42:	f500 71c0 	add.w	r1, r0, #384	; 0x180
 8004b46:	f7ff fe23 	bl	8004790 <FileSrecParseLine>
 8004b4a:	4604      	mov	r4, r0
      if (parse_result == ERROR_SREC_INVALID_CHECKSUM)
 8004b4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004b50:	d058      	beq.n	8004c04 <FileTask+0x33c>
    if (parse_result > 0)
 8004b52:	2800      	cmp	r0, #0
 8004b54:	dc63      	bgt.n	8004c1e <FileTask+0x356>
    if (f_eof(&fatFsObjects.file) > 0)
 8004b56:	4b1b      	ldr	r3, [pc, #108]	; (8004bc4 <FileTask+0x2fc>)
 8004b58:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
 8004b5c:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 8004b60:	429a      	cmp	r2, r3
 8004b62:	f47f aebe 	bne.w	80048e2 <FileTask+0x1a>
      FileFirmwareUpdateLogHook("Writing program checksum...");
 8004b66:	481d      	ldr	r0, [pc, #116]	; (8004bdc <FileTask+0x314>)
 8004b68:	f7fb fd90 	bl	800068c <FileFirmwareUpdateLogHook>
      if (NvmDone() == BLT_FALSE)
 8004b6c:	f7ff fb42 	bl	80041f4 <NvmDone>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	f000 8096 	beq.w	8004ca2 <FileTask+0x3da>
      FileFirmwareUpdateLogHook("OK\n\r");
 8004b76:	480f      	ldr	r0, [pc, #60]	; (8004bb4 <FileTask+0x2ec>)
 8004b78:	f7fb fd88 	bl	800068c <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateLogHook("Closing firmware file\n\r");
 8004b7c:	4818      	ldr	r0, [pc, #96]	; (8004be0 <FileTask+0x318>)
 8004b7e:	f7fb fd85 	bl	800068c <FileFirmwareUpdateLogHook>
      f_close(&fatFsObjects.file);
 8004b82:	480a      	ldr	r0, [pc, #40]	; (8004bac <FileTask+0x2e4>)
 8004b84:	f002 f912 	bl	8006dac <f_close>
      FileFirmwareUpdateLogHook("Firmware update successfully completed\n\r");
 8004b88:	4816      	ldr	r0, [pc, #88]	; (8004be4 <FileTask+0x31c>)
 8004b8a:	f7fb fd7f 	bl	800068c <FileFirmwareUpdateLogHook>
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004b8e:	4b04      	ldr	r3, [pc, #16]	; (8004ba0 <FileTask+0x2d8>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	701a      	strb	r2, [r3, #0]
      FileFirmwareUpdateCompletedHook();
 8004b94:	f7fb fd4a 	bl	800062c <FileFirmwareUpdateCompletedHook>
      CpuStartUserProgram();
 8004b98:	f7ff f906 	bl	8003da8 <CpuStartUserProgram>
 8004b9c:	e6a1      	b.n	80048e2 <FileTask+0x1a>
 8004b9e:	bf00      	nop
 8004ba0:	20000d48 	.word	0x20000d48
 8004ba4:	08015e2c 	.word	0x08015e2c
 8004ba8:	08015e50 	.word	0x08015e50
 8004bac:	20000b20 	.word	0x20000b20
 8004bb0:	08015e78 	.word	0x08015e78
 8004bb4:	08015e80 	.word	0x08015e80
 8004bb8:	08015e88 	.word	0x08015e88
 8004bbc:	08015eac 	.word	0x08015eac
 8004bc0:	200008e8 	.word	0x200008e8
 8004bc4:	200008f0 	.word	0x200008f0
 8004bc8:	20000d4c 	.word	0x20000d4c
 8004bcc:	08015edc 	.word	0x08015edc
 8004bd0:	20000ed0 	.word	0x20000ed0
 8004bd4:	08015ee8 	.word	0x08015ee8
 8004bd8:	08015f8c 	.word	0x08015f8c
 8004bdc:	08015f74 	.word	0x08015f74
 8004be0:	08015f90 	.word	0x08015f90
 8004be4:	08015fa8 	.word	0x08015fa8
      firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004be8:	4b35      	ldr	r3, [pc, #212]	; (8004cc0 <FileTask+0x3f8>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]
      FileFirmwareUpdateLogHook("Reading line from file...ERROR\n\r");
 8004bee:	4835      	ldr	r0, [pc, #212]	; (8004cc4 <FileTask+0x3fc>)
 8004bf0:	f7fb fd4c 	bl	800068c <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_READ_FROM_FILE);
 8004bf4:	2002      	movs	r0, #2
 8004bf6:	f7fb fd3b 	bl	8000670 <FileFirmwareUpdateErrorHook>
      f_close(&fatFsObjects.file);
 8004bfa:	f504 700c 	add.w	r0, r4, #560	; 0x230
 8004bfe:	f002 f8d5 	bl	8006dac <f_close>
      return;
 8004c02:	e66e      	b.n	80048e2 <FileTask+0x1a>
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004c04:	4b2e      	ldr	r3, [pc, #184]	; (8004cc0 <FileTask+0x3f8>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	701a      	strb	r2, [r3, #0]
        FileFirmwareUpdateLogHook("Invalid checksum found...ERROR\n\r");
 8004c0a:	482f      	ldr	r0, [pc, #188]	; (8004cc8 <FileTask+0x400>)
 8004c0c:	f7fb fd3e 	bl	800068c <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateErrorHook(FILE_ERROR_INVALID_CHECKSUM_IN_FILE);
 8004c10:	2003      	movs	r0, #3
 8004c12:	f7fb fd2d 	bl	8000670 <FileFirmwareUpdateErrorHook>
        f_close(&fatFsObjects.file);
 8004c16:	482d      	ldr	r0, [pc, #180]	; (8004ccc <FileTask+0x404>)
 8004c18:	f002 f8c8 	bl	8006dac <f_close>
        return;
 8004c1c:	e661      	b.n	80048e2 <FileTask+0x1a>
      FileFirmwareUpdateLogHook("Programming ");
 8004c1e:	482c      	ldr	r0, [pc, #176]	; (8004cd0 <FileTask+0x408>)
 8004c20:	f7fb fd34 	bl	800068c <FileFirmwareUpdateLogHook>
      FileLibLongToIntString(parse_result, loggingStr);
 8004c24:	4d2b      	ldr	r5, [pc, #172]	; (8004cd4 <FileTask+0x40c>)
 8004c26:	4629      	mov	r1, r5
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f7ff fcbd 	bl	80045a8 <FileLibLongToIntString>
      FileFirmwareUpdateLogHook(loggingStr);
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f7fb fd2c 	bl	800068c <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateLogHook(" bytes to memory at 0x");
 8004c34:	4828      	ldr	r0, [pc, #160]	; (8004cd8 <FileTask+0x410>)
 8004c36:	f7fb fd29 	bl	800068c <FileFirmwareUpdateLogHook>
      FileLibByteToHexString((blt_int8u)(lineParseObject.address >> 24), &loggingStr[0]);
 8004c3a:	4e28      	ldr	r6, [pc, #160]	; (8004cdc <FileTask+0x414>)
 8004c3c:	4629      	mov	r1, r5
 8004c3e:	f896 0183 	ldrb.w	r0, [r6, #387]	; 0x183
 8004c42:	f7ff fce7 	bl	8004614 <FileLibByteToHexString>
      FileLibByteToHexString((blt_int8u)(lineParseObject.address >> 16), &loggingStr[2]);
 8004c46:	1ca9      	adds	r1, r5, #2
 8004c48:	f896 0182 	ldrb.w	r0, [r6, #386]	; 0x182
 8004c4c:	f7ff fce2 	bl	8004614 <FileLibByteToHexString>
      FileLibByteToHexString((blt_int8u)(lineParseObject.address >> 8), &loggingStr[4]);
 8004c50:	1d29      	adds	r1, r5, #4
 8004c52:	f896 0181 	ldrb.w	r0, [r6, #385]	; 0x181
 8004c56:	f7ff fcdd 	bl	8004614 <FileLibByteToHexString>
      FileLibByteToHexString((blt_int8u)lineParseObject.address, &loggingStr[6]);
 8004c5a:	1da9      	adds	r1, r5, #6
 8004c5c:	f896 0180 	ldrb.w	r0, [r6, #384]	; 0x180
 8004c60:	f7ff fcd8 	bl	8004614 <FileLibByteToHexString>
      FileFirmwareUpdateLogHook(loggingStr);
 8004c64:	4628      	mov	r0, r5
 8004c66:	f7fb fd11 	bl	800068c <FileFirmwareUpdateLogHook>
      FileFirmwareUpdateLogHook("...");
 8004c6a:	481d      	ldr	r0, [pc, #116]	; (8004ce0 <FileTask+0x418>)
 8004c6c:	f7fb fd0e 	bl	800068c <FileFirmwareUpdateLogHook>
      if (NvmWrite(lineParseObject.address, parse_result, lineParseObject.data) == BLT_FALSE)
 8004c70:	f506 7280 	add.w	r2, r6, #256	; 0x100
 8004c74:	4621      	mov	r1, r4
 8004c76:	f8d6 0180 	ldr.w	r0, [r6, #384]	; 0x180
 8004c7a:	f7ff faab 	bl	80041d4 <NvmWrite>
 8004c7e:	b118      	cbz	r0, 8004c88 <FileTask+0x3c0>
      FileFirmwareUpdateLogHook("OK\n\r");
 8004c80:	4818      	ldr	r0, [pc, #96]	; (8004ce4 <FileTask+0x41c>)
 8004c82:	f7fb fd03 	bl	800068c <FileFirmwareUpdateLogHook>
 8004c86:	e766      	b.n	8004b56 <FileTask+0x28e>
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004c88:	4b0d      	ldr	r3, [pc, #52]	; (8004cc0 <FileTask+0x3f8>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	701a      	strb	r2, [r3, #0]
        FileFirmwareUpdateLogHook("ERROR\n\r");
 8004c8e:	4816      	ldr	r0, [pc, #88]	; (8004ce8 <FileTask+0x420>)
 8004c90:	f7fb fcfc 	bl	800068c <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_PROGRAM_MEMORY);
 8004c94:	2006      	movs	r0, #6
 8004c96:	f7fb fceb 	bl	8000670 <FileFirmwareUpdateErrorHook>
        f_close(&fatFsObjects.file);
 8004c9a:	480c      	ldr	r0, [pc, #48]	; (8004ccc <FileTask+0x404>)
 8004c9c:	f002 f886 	bl	8006dac <f_close>
        return;
 8004ca0:	e61f      	b.n	80048e2 <FileTask+0x1a>
        firmwareUpdateState = FIRMWARE_UPDATE_STATE_IDLE;
 8004ca2:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <FileTask+0x3f8>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	701a      	strb	r2, [r3, #0]
        FileFirmwareUpdateLogHook("ERROR\n\r");
 8004ca8:	480f      	ldr	r0, [pc, #60]	; (8004ce8 <FileTask+0x420>)
 8004caa:	f7fb fcef 	bl	800068c <FileFirmwareUpdateLogHook>
        FileFirmwareUpdateErrorHook(FILE_ERROR_CANNOT_WRITE_CHECKSUM);
 8004cae:	2007      	movs	r0, #7
 8004cb0:	f7fb fcde 	bl	8000670 <FileFirmwareUpdateErrorHook>
        f_close(&fatFsObjects.file);
 8004cb4:	4805      	ldr	r0, [pc, #20]	; (8004ccc <FileTask+0x404>)
 8004cb6:	f002 f879 	bl	8006dac <f_close>
        return;
 8004cba:	e612      	b.n	80048e2 <FileTask+0x1a>
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	20000d48 	.word	0x20000d48
 8004cc4:	08015f04 	.word	0x08015f04
 8004cc8:	08015f28 	.word	0x08015f28
 8004ccc:	20000b20 	.word	0x20000b20
 8004cd0:	08015f4c 	.word	0x08015f4c
 8004cd4:	20000ed0 	.word	0x20000ed0
 8004cd8:	08015f5c 	.word	0x08015f5c
 8004cdc:	20000d4c 	.word	0x20000d4c
 8004ce0:	08015f8c 	.word	0x08015f8c
 8004ce4:	08015e80 	.word	0x08015e80
 8004ce8:	08015e78 	.word	0x08015e78

08004cec <XcpProtectResources>:
#if (XCP_RES_PAGING_EN == 1)
  xcpInfo.protection |= XCP_RES_CALPAG;
#endif

#if (XCP_RES_PROGRAMMING_EN == 1)
  xcpInfo.protection |= XCP_RES_PGM;
 8004cec:	4b01      	ldr	r3, [pc, #4]	; (8004cf4 <XcpProtectResources+0x8>)
 8004cee:	2210      	movs	r2, #16
 8004cf0:	705a      	strb	r2, [r3, #1]

#if (XCP_RES_DATA_STIMULATION_EN == 1)
  xcpInfo.protection |= XCP_RES_STIM;
#endif
#endif /* XCP_SEED_KEY_PROTECTION_EN == 1 */
} /*** end of XcpProtectResources ***/
 8004cf2:	4770      	bx	lr
 8004cf4:	20000fa0 	.word	0x20000fa0

08004cf8 <XcpSetCtoError>:
**
****************************************************************************************/
static void XcpSetCtoError(blt_int8u error)
{
  /* prepare the error packet */
  xcpInfo.ctoData[0] = XCP_PID_ERR;
 8004cf8:	4b03      	ldr	r3, [pc, #12]	; (8004d08 <XcpSetCtoError+0x10>)
 8004cfa:	22fe      	movs	r2, #254	; 0xfe
 8004cfc:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[1] = error;
 8004cfe:	7118      	strb	r0, [r3, #4]
  xcpInfo.ctoLen = 2;
 8004d00:	2202      	movs	r2, #2
 8004d02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpSetCtoError ***/
 8004d06:	4770      	bx	lr
 8004d08:	20000fa0 	.word	0x20000fa0

08004d0c <XcpCmdDisconnect>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdDisconnect(blt_int8u *data)
{
 8004d0c:	b510      	push	{r4, lr}
  /* suppress compiler warning for unused parameter */
  data = data;

  /* indicate that the xcp connection is disconnected */
  xcpInfo.connected = 0;
 8004d0e:	4c05      	ldr	r4, [pc, #20]	; (8004d24 <XcpCmdDisconnect+0x18>)
 8004d10:	2300      	movs	r3, #0
 8004d12:	7023      	strb	r3, [r4, #0]

  /* enable resource protection */
  XcpProtectResources();
 8004d14:	f7ff ffea 	bl	8004cec <XcpProtectResources>

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004d18:	23ff      	movs	r3, #255	; 0xff
 8004d1a:	70e3      	strb	r3, [r4, #3]

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdDisconnect ***/
 8004d22:	bd10      	pop	{r4, pc}
 8004d24:	20000fa0 	.word	0x20000fa0

08004d28 <XcpCmdGetStatus>:
{
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <XcpCmdGetStatus+0x1c>)
 8004d2a:	22ff      	movs	r2, #255	; 0xff
 8004d2c:	70da      	strb	r2, [r3, #3]

  /* report session status */
  xcpInfo.ctoData[1] = 0;
 8004d2e:	2200      	movs	r2, #0
 8004d30:	711a      	strb	r2, [r3, #4]

  /* report current resource protection status */
  xcpInfo.ctoData[2] = xcpInfo.protection;
 8004d32:	7859      	ldrb	r1, [r3, #1]
 8004d34:	7159      	strb	r1, [r3, #5]

  /* reset reserved and session configuration id values */
  xcpInfo.ctoData[3] = 0;
 8004d36:	719a      	strb	r2, [r3, #6]
  xcpInfo.ctoData[4] = 0;
 8004d38:	71da      	strb	r2, [r3, #7]
  xcpInfo.ctoData[5] = 0;
 8004d3a:	721a      	strb	r2, [r3, #8]

  /* set packet length */
  xcpInfo.ctoLen = 6;
 8004d3c:	2206      	movs	r2, #6
 8004d3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetStatus ***/
 8004d42:	4770      	bx	lr
 8004d44:	20000fa0 	.word	0x20000fa0

08004d48 <XcpCmdSynch>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdSynch(blt_int8u *data)
{
 8004d48:	b508      	push	{r3, lr}
  /* suppress compiler warning for unused parameter */
  data = data;

  /* synch requires a negative response */
  XcpSetCtoError(XCP_ERR_CMD_SYNCH);
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	f7ff ffd4 	bl	8004cf8 <XcpSetCtoError>
} /*** end of XcpCmdSynch ***/
 8004d50:	bd08      	pop	{r3, pc}
	...

08004d54 <XcpCmdGetId>:
{
  /* suppress compiler warning for unused parameter */
  data = data;

  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004d54:	4b07      	ldr	r3, [pc, #28]	; (8004d74 <XcpCmdGetId+0x20>)
 8004d56:	22ff      	movs	r2, #255	; 0xff
 8004d58:	70da      	strb	r2, [r3, #3]

  /* point mta to start of station id string */
  xcpInfo.mta = (blt_int32u)&xcpStationId[0];
 8004d5a:	4a07      	ldr	r2, [pc, #28]	; (8004d78 <XcpCmdGetId+0x24>)
 8004d5c:	649a      	str	r2, [r3, #72]	; 0x48

  /* set station id mode to 0 */
  xcpInfo.ctoData[1] = 0;
 8004d5e:	2200      	movs	r2, #0
 8004d60:	711a      	strb	r2, [r3, #4]

  /* reset reserved values */
  xcpInfo.ctoData[2] = 0;
 8004d62:	715a      	strb	r2, [r3, #5]
  xcpInfo.ctoData[3] = 0;
 8004d64:	719a      	strb	r2, [r3, #6]

  /* store station id length (excl. null termination) for response packet */
  *(blt_int32u *)&xcpInfo.ctoData[4] = (sizeof(xcpStationId)/sizeof(xcpStationId[0])) - 1;
 8004d66:	2207      	movs	r2, #7
 8004d68:	f8c3 2007 	str.w	r2, [r3, #7]

  /* set packet length */
  xcpInfo.ctoLen = 8;
 8004d6c:	2208      	movs	r2, #8
 8004d6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdGetId ***/
 8004d72:	4770      	bx	lr
 8004d74:	20000fa0 	.word	0x20000fa0
 8004d78:	08016000 	.word	0x08016000

08004d7c <XcpCmdSetMta>:
**
****************************************************************************************/
static void XcpCmdSetMta(blt_int8u *data)
{
  /* set packet id to command response packet */
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004d7c:	4b04      	ldr	r3, [pc, #16]	; (8004d90 <XcpCmdSetMta+0x14>)
 8004d7e:	22ff      	movs	r2, #255	; 0xff
 8004d80:	70da      	strb	r2, [r3, #3]

  /* update mta. current implementation ignores address extension */
  xcpInfo.mta = *(blt_int32u *)&data[4];
 8004d82:	6842      	ldr	r2, [r0, #4]
 8004d84:	649a      	str	r2, [r3, #72]	; 0x48

  /* set packet length */
  xcpInfo.ctoLen = 1;
 8004d86:	2201      	movs	r2, #1
 8004d88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdSetMta ***/
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	20000fa0 	.word	0x20000fa0

08004d94 <XcpCmdProgramPrepare>:
** \param     data Pointer to a byte buffer with the packet data.
** \return    none
**
****************************************************************************************/
static void XcpCmdProgramPrepare(blt_int8u *data)
{
 8004d94:	b508      	push	{r3, lr}
#if (XCP_SEED_KEY_PROTECTION_EN == 1)
  /* check if PGM resource is unlocked */
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8004d96:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <XcpCmdProgramPrepare+0x1c>)
 8004d98:	785b      	ldrb	r3, [r3, #1]
 8004d9a:	f013 0f10 	tst.w	r3, #16
 8004d9e:	d103      	bne.n	8004da8 <XcpCmdProgramPrepare+0x14>
    return;
  }
#endif

  /* programming with kernel currently not needed and therefore not supported */
  XcpSetCtoError(XCP_ERR_GENERIC);
 8004da0:	2031      	movs	r0, #49	; 0x31
 8004da2:	f7ff ffa9 	bl	8004cf8 <XcpSetCtoError>
  return;
} /*** end of XcpCmdProgramPrepare ***/
 8004da6:	bd08      	pop	{r3, pc}
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8004da8:	2025      	movs	r0, #37	; 0x25
 8004daa:	f7ff ffa5 	bl	8004cf8 <XcpSetCtoError>
    return;
 8004dae:	e7fa      	b.n	8004da6 <XcpCmdProgramPrepare+0x12>
 8004db0:	20000fa0 	.word	0x20000fa0

08004db4 <XcpCmdProgramStart>:
{
 8004db4:	b538      	push	{r3, r4, r5, lr}
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8004db6:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <XcpCmdProgramStart+0x34>)
 8004db8:	785b      	ldrb	r3, [r3, #1]
 8004dba:	f013 0f10 	tst.w	r3, #16
 8004dbe:	d10f      	bne.n	8004de0 <XcpCmdProgramStart+0x2c>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004dc0:	4c09      	ldr	r4, [pc, #36]	; (8004de8 <XcpCmdProgramStart+0x34>)
 8004dc2:	23ff      	movs	r3, #255	; 0xff
 8004dc4:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] = 0;
 8004dc6:	2500      	movs	r5, #0
 8004dc8:	7125      	strb	r5, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8004dca:	7165      	strb	r5, [r4, #5]
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8004dcc:	f7ff fbc0 	bl	8004550 <ComGetActiveInterfaceMaxRxLen>
 8004dd0:	71a0      	strb	r0, [r4, #6]
  xcpInfo.ctoData[4] = 0;
 8004dd2:	71e5      	strb	r5, [r4, #7]
  xcpInfo.ctoData[5] = 0;
 8004dd4:	7225      	strb	r5, [r4, #8]
  xcpInfo.ctoData[6] = 0;
 8004dd6:	7265      	strb	r5, [r4, #9]
  xcpInfo.ctoLen = 7;
 8004dd8:	2307      	movs	r3, #7
 8004dda:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdProgramStart ***/
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8004de0:	2025      	movs	r0, #37	; 0x25
 8004de2:	f7ff ff89 	bl	8004cf8 <XcpSetCtoError>
    return;
 8004de6:	e7fa      	b.n	8004dde <XcpCmdProgramStart+0x2a>
 8004de8:	20000fa0 	.word	0x20000fa0

08004dec <XcpCmdConnect>:
{
 8004dec:	b538      	push	{r3, r4, r5, lr}
  if (FileIsIdle() == BLT_FALSE)
 8004dee:	f7ff fc67 	bl	80046c0 <FileIsIdle>
 8004df2:	b1e8      	cbz	r0, 8004e30 <XcpCmdConnect+0x44>
  XcpProtectResources();
 8004df4:	f7ff ff7a 	bl	8004cec <XcpProtectResources>
  xcpInfo.connected = 1;
 8004df8:	4c0f      	ldr	r4, [pc, #60]	; (8004e38 <XcpCmdConnect+0x4c>)
 8004dfa:	2501      	movs	r5, #1
 8004dfc:	7025      	strb	r5, [r4, #0]
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004dfe:	23ff      	movs	r3, #255	; 0xff
 8004e00:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] |= XCP_RES_PGM;
 8004e02:	2310      	movs	r3, #16
 8004e04:	7123      	strb	r3, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8004e06:	2300      	movs	r3, #0
 8004e08:	7163      	strb	r3, [r4, #5]
  xcpInfo.ctoData[3] = (blt_int8u)XCP_CTO_PACKET_LEN;
 8004e0a:	f7ff fba1 	bl	8004550 <ComGetActiveInterfaceMaxRxLen>
 8004e0e:	71a0      	strb	r0, [r4, #6]
  xcpInfo.ctoData[4] = (blt_int8u)XCP_DTO_PACKET_LEN;
 8004e10:	f7ff fbac 	bl	800456c <ComGetActiveInterfaceMaxTxLen>
 8004e14:	71e0      	strb	r0, [r4, #7]
  xcpInfo.ctoData[5] = (blt_int8u)(XCP_DTO_PACKET_LEN >> 8);
 8004e16:	f7ff fba9 	bl	800456c <ComGetActiveInterfaceMaxTxLen>
 8004e1a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004e1e:	7220      	strb	r0, [r4, #8]
  xcpInfo.ctoData[6] = XCP_VERSION_PROTOCOL_LAYER >> 8;
 8004e20:	7265      	strb	r5, [r4, #9]
  xcpInfo.ctoData[7] = XCP_VERSION_TRANSPORT_LAYER >> 8;
 8004e22:	72a5      	strb	r5, [r4, #10]
  xcpInfo.ctoLen = 8;
 8004e24:	2308      	movs	r3, #8
 8004e26:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  NvmInit();
 8004e2a:	f7ff f9cf 	bl	80041cc <NvmInit>
} /*** end of XcpCmdConnect ***/
 8004e2e:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 8004e30:	2010      	movs	r0, #16
 8004e32:	f7ff ff61 	bl	8004cf8 <XcpSetCtoError>
    return;
 8004e36:	e7fa      	b.n	8004e2e <XcpCmdConnect+0x42>
 8004e38:	20000fa0 	.word	0x20000fa0

08004e3c <XcpCmdUpload>:
{
 8004e3c:	b538      	push	{r3, r4, r5, lr}
 8004e3e:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8004e40:	7845      	ldrb	r5, [r0, #1]
 8004e42:	f7ff fb85 	bl	8004550 <ComGetActiveInterfaceMaxRxLen>
 8004e46:	3801      	subs	r0, #1
 8004e48:	4285      	cmp	r5, r0
 8004e4a:	dc15      	bgt.n	8004e78 <XcpCmdUpload+0x3c>
  len = data[1];
 8004e4c:	7862      	ldrb	r2, [r4, #1]
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8004e4e:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <XcpCmdUpload+0x50>)
 8004e50:	785b      	ldrb	r3, [r3, #1]
 8004e52:	f013 0f10 	tst.w	r3, #16
 8004e56:	d013      	beq.n	8004e80 <XcpCmdUpload+0x44>
    CpuMemSet((blt_addr)destPtr, 0, len);
 8004e58:	2100      	movs	r1, #0
 8004e5a:	480d      	ldr	r0, [pc, #52]	; (8004e90 <XcpCmdUpload+0x54>)
 8004e5c:	f7fe ffd4 	bl	8003e08 <CpuMemSet>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004e60:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <XcpCmdUpload+0x50>)
 8004e62:	22ff      	movs	r2, #255	; 0xff
 8004e64:	70da      	strb	r2, [r3, #3]
  xcpInfo.mta += data[1];
 8004e66:	7861      	ldrb	r1, [r4, #1]
 8004e68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e6a:	440a      	add	r2, r1
 8004e6c:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoLen = data[1]+1;
 8004e6e:	7862      	ldrb	r2, [r4, #1]
 8004e70:	3201      	adds	r2, #1
 8004e72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdUpload ***/
 8004e76:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8004e78:	2022      	movs	r0, #34	; 0x22
 8004e7a:	f7ff ff3d 	bl	8004cf8 <XcpSetCtoError>
    return;
 8004e7e:	e7fa      	b.n	8004e76 <XcpCmdUpload+0x3a>
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8004e80:	4802      	ldr	r0, [pc, #8]	; (8004e8c <XcpCmdUpload+0x50>)
 8004e82:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004e84:	3004      	adds	r0, #4
 8004e86:	f7fe ffaf 	bl	8003de8 <CpuMemCopy>
 8004e8a:	e7e9      	b.n	8004e60 <XcpCmdUpload+0x24>
 8004e8c:	20000fa0 	.word	0x20000fa0
 8004e90:	20000fa4 	.word	0x20000fa4

08004e94 <XcpCmdShortUpload>:
{
 8004e94:	b538      	push	{r3, r4, r5, lr}
 8004e96:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-1))
 8004e98:	7845      	ldrb	r5, [r0, #1]
 8004e9a:	f7ff fb59 	bl	8004550 <ComGetActiveInterfaceMaxRxLen>
 8004e9e:	3801      	subs	r0, #1
 8004ea0:	4285      	cmp	r5, r0
 8004ea2:	dc17      	bgt.n	8004ed4 <XcpCmdShortUpload+0x40>
  xcpInfo.mta = *(blt_int32u *)&data[4];
 8004ea4:	6861      	ldr	r1, [r4, #4]
 8004ea6:	4b0f      	ldr	r3, [pc, #60]	; (8004ee4 <XcpCmdShortUpload+0x50>)
 8004ea8:	6499      	str	r1, [r3, #72]	; 0x48
  len = data[1];
 8004eaa:	7862      	ldrb	r2, [r4, #1]
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8004eac:	785b      	ldrb	r3, [r3, #1]
 8004eae:	f013 0f10 	tst.w	r3, #16
 8004eb2:	d013      	beq.n	8004edc <XcpCmdShortUpload+0x48>
    CpuMemSet((blt_addr)destPtr, 0, len);
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	480c      	ldr	r0, [pc, #48]	; (8004ee8 <XcpCmdShortUpload+0x54>)
 8004eb8:	f7fe ffa6 	bl	8003e08 <CpuMemSet>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004ebc:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <XcpCmdShortUpload+0x50>)
 8004ebe:	22ff      	movs	r2, #255	; 0xff
 8004ec0:	70da      	strb	r2, [r3, #3]
  xcpInfo.mta += data[1];
 8004ec2:	7861      	ldrb	r1, [r4, #1]
 8004ec4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ec6:	440a      	add	r2, r1
 8004ec8:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoLen = data[1]+1;
 8004eca:	7862      	ldrb	r2, [r4, #1]
 8004ecc:	3201      	adds	r2, #1
 8004ece:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdShortUpload ***/
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8004ed4:	2022      	movs	r0, #34	; 0x22
 8004ed6:	f7ff ff0f 	bl	8004cf8 <XcpSetCtoError>
    return;
 8004eda:	e7fa      	b.n	8004ed2 <XcpCmdShortUpload+0x3e>
    CpuMemCopy((blt_addr)destPtr,(blt_addr)xcpInfo.mta, len);
 8004edc:	4802      	ldr	r0, [pc, #8]	; (8004ee8 <XcpCmdShortUpload+0x54>)
 8004ede:	f7fe ff83 	bl	8003de8 <CpuMemCopy>
 8004ee2:	e7eb      	b.n	8004ebc <XcpCmdShortUpload+0x28>
 8004ee4:	20000fa0 	.word	0x20000fa0
 8004ee8:	20000fa4 	.word	0x20000fa4

08004eec <XcpComputeChecksum>:
{
 8004eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eee:	4605      	mov	r5, r0
 8004ef0:	4617      	mov	r7, r2
  blt_int8u cs = 0;
 8004ef2:	2400      	movs	r4, #0
  while (length-- > 0)
 8004ef4:	e006      	b.n	8004f04 <XcpComputeChecksum+0x18>
    cs += *((blt_int8u *)(blt_addr)address);
 8004ef6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004efa:	441c      	add	r4, r3
 8004efc:	b2e4      	uxtb	r4, r4
    CopService();
 8004efe:	f7ff fb4f 	bl	80045a0 <CopService>
  while (length-- > 0)
 8004f02:	4631      	mov	r1, r6
 8004f04:	1e4e      	subs	r6, r1, #1
 8004f06:	2900      	cmp	r1, #0
 8004f08:	d1f5      	bne.n	8004ef6 <XcpComputeChecksum+0xa>
  *checksum = cs;
 8004f0a:	603c      	str	r4, [r7, #0]
} /*** end of XcpComputeChecksum ***/
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004f10 <XcpCmdBuildCheckSum>:
{
 8004f10:	b510      	push	{r4, lr}
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004f12:	4c08      	ldr	r4, [pc, #32]	; (8004f34 <XcpCmdBuildCheckSum+0x24>)
 8004f14:	23ff      	movs	r3, #255	; 0xff
 8004f16:	70e3      	strb	r3, [r4, #3]
  xcpInfo.ctoData[1] = XcpComputeChecksum(xcpInfo.mta, *(blt_int32u *)&data[4],
 8004f18:	1de2      	adds	r2, r4, #7
 8004f1a:	6841      	ldr	r1, [r0, #4]
 8004f1c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004f1e:	f7ff ffe5 	bl	8004eec <XcpComputeChecksum>
 8004f22:	7120      	strb	r0, [r4, #4]
  xcpInfo.ctoData[2] = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	7163      	strb	r3, [r4, #5]
  xcpInfo.ctoData[3] = 0;
 8004f28:	71a3      	strb	r3, [r4, #6]
  xcpInfo.ctoLen = 8;
 8004f2a:	2308      	movs	r3, #8
 8004f2c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
} /*** end of XcpCmdBuildCheckSum ***/
 8004f30:	bd10      	pop	{r4, pc}
 8004f32:	bf00      	nop
 8004f34:	20000fa0 	.word	0x20000fa0

08004f38 <XcpCmdProgramMax>:
{
 8004f38:	b538      	push	{r3, r4, r5, lr}
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8004f3a:	4b12      	ldr	r3, [pc, #72]	; (8004f84 <XcpCmdProgramMax+0x4c>)
 8004f3c:	785b      	ldrb	r3, [r3, #1]
 8004f3e:	f013 0f10 	tst.w	r3, #16
 8004f42:	d117      	bne.n	8004f74 <XcpCmdProgramMax+0x3c>
 8004f44:	4604      	mov	r4, r0
  if (NvmWrite((blt_addr)xcpInfo.mta, XCP_CTO_PACKET_LEN-1, &data[1]) == BLT_FALSE)
 8004f46:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <XcpCmdProgramMax+0x4c>)
 8004f48:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8004f4a:	f7ff fb01 	bl	8004550 <ComGetActiveInterfaceMaxRxLen>
 8004f4e:	1c62      	adds	r2, r4, #1
 8004f50:	1e41      	subs	r1, r0, #1
 8004f52:	4628      	mov	r0, r5
 8004f54:	f7ff f93e 	bl	80041d4 <NvmWrite>
 8004f58:	b180      	cbz	r0, 8004f7c <XcpCmdProgramMax+0x44>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004f5a:	4c0a      	ldr	r4, [pc, #40]	; (8004f84 <XcpCmdProgramMax+0x4c>)
 8004f5c:	23ff      	movs	r3, #255	; 0xff
 8004f5e:	70e3      	strb	r3, [r4, #3]
  xcpInfo.mta += XCP_CTO_PACKET_LEN-1;
 8004f60:	f7ff faf6 	bl	8004550 <ComGetActiveInterfaceMaxRxLen>
 8004f64:	3801      	subs	r0, #1
 8004f66:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004f68:	4403      	add	r3, r0
 8004f6a:	64a3      	str	r3, [r4, #72]	; 0x48
  xcpInfo.ctoLen = 1;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 8004f72:	e002      	b.n	8004f7a <XcpCmdProgramMax+0x42>
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8004f74:	2025      	movs	r0, #37	; 0x25
 8004f76:	f7ff febf 	bl	8004cf8 <XcpSetCtoError>
} /*** end of XcpCmdProgramMax ***/
 8004f7a:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_GENERIC);
 8004f7c:	2031      	movs	r0, #49	; 0x31
 8004f7e:	f7ff febb 	bl	8004cf8 <XcpSetCtoError>
    return;
 8004f82:	e7fa      	b.n	8004f7a <XcpCmdProgramMax+0x42>
 8004f84:	20000fa0 	.word	0x20000fa0

08004f88 <XcpCmdProgram>:
{
 8004f88:	b538      	push	{r3, r4, r5, lr}
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8004f8a:	4b19      	ldr	r3, [pc, #100]	; (8004ff0 <XcpCmdProgram+0x68>)
 8004f8c:	785b      	ldrb	r3, [r3, #1]
 8004f8e:	f013 0f10 	tst.w	r3, #16
 8004f92:	d115      	bne.n	8004fc0 <XcpCmdProgram+0x38>
 8004f94:	4604      	mov	r4, r0
  if (data[1] > (XCP_CTO_PACKET_LEN-2))
 8004f96:	7845      	ldrb	r5, [r0, #1]
 8004f98:	f7ff fada 	bl	8004550 <ComGetActiveInterfaceMaxRxLen>
 8004f9c:	3802      	subs	r0, #2
 8004f9e:	4285      	cmp	r5, r0
 8004fa0:	dc12      	bgt.n	8004fc8 <XcpCmdProgram+0x40>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8004fa2:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <XcpCmdProgram+0x68>)
 8004fa4:	22ff      	movs	r2, #255	; 0xff
 8004fa6:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (data[1] == 0)
 8004fae:	7861      	ldrb	r1, [r4, #1]
 8004fb0:	b971      	cbnz	r1, 8004fd0 <XcpCmdProgram+0x48>
    if (NvmDone() == BLT_FALSE)
 8004fb2:	f7ff f91f 	bl	80041f4 <NvmDone>
 8004fb6:	b930      	cbnz	r0, 8004fc6 <XcpCmdProgram+0x3e>
      XcpSetCtoError(XCP_ERR_GENERIC);
 8004fb8:	2031      	movs	r0, #49	; 0x31
 8004fba:	f7ff fe9d 	bl	8004cf8 <XcpSetCtoError>
 8004fbe:	e002      	b.n	8004fc6 <XcpCmdProgram+0x3e>
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 8004fc0:	2025      	movs	r0, #37	; 0x25
 8004fc2:	f7ff fe99 	bl	8004cf8 <XcpSetCtoError>
} /*** end of XcpCmdProgram ***/
 8004fc6:	bd38      	pop	{r3, r4, r5, pc}
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8004fc8:	2022      	movs	r0, #34	; 0x22
 8004fca:	f7ff fe95 	bl	8004cf8 <XcpSetCtoError>
    return;
 8004fce:	e7fa      	b.n	8004fc6 <XcpCmdProgram+0x3e>
  if (NvmWrite((blt_addr)xcpInfo.mta, data[1], &data[2]) == BLT_FALSE)
 8004fd0:	1ca2      	adds	r2, r4, #2
 8004fd2:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <XcpCmdProgram+0x68>)
 8004fd4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004fd6:	f7ff f8fd 	bl	80041d4 <NvmWrite>
 8004fda:	b128      	cbz	r0, 8004fe8 <XcpCmdProgram+0x60>
  xcpInfo.mta += data[1];
 8004fdc:	7861      	ldrb	r1, [r4, #1]
 8004fde:	4a04      	ldr	r2, [pc, #16]	; (8004ff0 <XcpCmdProgram+0x68>)
 8004fe0:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8004fe2:	440b      	add	r3, r1
 8004fe4:	6493      	str	r3, [r2, #72]	; 0x48
 8004fe6:	e7ee      	b.n	8004fc6 <XcpCmdProgram+0x3e>
    XcpSetCtoError(XCP_ERR_GENERIC);
 8004fe8:	2031      	movs	r0, #49	; 0x31
 8004fea:	f7ff fe85 	bl	8004cf8 <XcpSetCtoError>
    return;
 8004fee:	e7ea      	b.n	8004fc6 <XcpCmdProgram+0x3e>
 8004ff0:	20000fa0 	.word	0x20000fa0

08004ff4 <XcpCmdProgramClear>:
{
 8004ff4:	b508      	push	{r3, lr}
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	; (800502c <XcpCmdProgramClear+0x38>)
 8004ff8:	785b      	ldrb	r3, [r3, #1]
 8004ffa:	f013 0f10 	tst.w	r3, #16
 8004ffe:	d10c      	bne.n	800501a <XcpCmdProgramClear+0x26>
  if (NvmErase((blt_addr)xcpInfo.mta, *(blt_int32u *)&data[4]) == BLT_FALSE)
 8005000:	6841      	ldr	r1, [r0, #4]
 8005002:	4b0a      	ldr	r3, [pc, #40]	; (800502c <XcpCmdProgramClear+0x38>)
 8005004:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005006:	f7ff f8e9 	bl	80041dc <NvmErase>
 800500a:	b150      	cbz	r0, 8005022 <XcpCmdProgramClear+0x2e>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 800500c:	4b07      	ldr	r3, [pc, #28]	; (800502c <XcpCmdProgramClear+0x38>)
 800500e:	22ff      	movs	r2, #255	; 0xff
 8005010:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 8005012:	2201      	movs	r2, #1
 8005014:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005018:	e002      	b.n	8005020 <XcpCmdProgramClear+0x2c>
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 800501a:	2025      	movs	r0, #37	; 0x25
 800501c:	f7ff fe6c 	bl	8004cf8 <XcpSetCtoError>
} /*** end of XcpCmdProgramClear ***/
 8005020:	bd08      	pop	{r3, pc}
    XcpSetCtoError(XCP_ERR_GENERIC);
 8005022:	2031      	movs	r0, #49	; 0x31
 8005024:	f7ff fe68 	bl	8004cf8 <XcpSetCtoError>
    return;
 8005028:	e7fa      	b.n	8005020 <XcpCmdProgramClear+0x2c>
 800502a:	bf00      	nop
 800502c:	20000fa0 	.word	0x20000fa0

08005030 <XcpCmdProgramReset>:
{
 8005030:	b508      	push	{r3, lr}
  if ((xcpInfo.protection & XCP_RES_PGM) == XCP_RES_PGM)
 8005032:	4b09      	ldr	r3, [pc, #36]	; (8005058 <XcpCmdProgramReset+0x28>)
 8005034:	785b      	ldrb	r3, [r3, #1]
 8005036:	f013 0f10 	tst.w	r3, #16
 800503a:	d108      	bne.n	800504e <XcpCmdProgramReset+0x1e>
  CpuStartUserProgram();
 800503c:	f7fe feb4 	bl	8003da8 <CpuStartUserProgram>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8005040:	4b05      	ldr	r3, [pc, #20]	; (8005058 <XcpCmdProgramReset+0x28>)
 8005042:	22ff      	movs	r2, #255	; 0xff
 8005044:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoLen = 1;
 8005046:	2201      	movs	r2, #1
 8005048:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdProgramReset ***/
 800504c:	bd08      	pop	{r3, pc}
    XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 800504e:	2025      	movs	r0, #37	; 0x25
 8005050:	f7ff fe52 	bl	8004cf8 <XcpSetCtoError>
    return;
 8005054:	e7fa      	b.n	800504c <XcpCmdProgramReset+0x1c>
 8005056:	bf00      	nop
 8005058:	20000fa0 	.word	0x20000fa0

0800505c <XcpGetSeed>:
{
 800505c:	b508      	push	{r3, lr}
  return XcpGetSeedHook(resource, seed);
 800505e:	f7fb fb43 	bl	80006e8 <XcpGetSeedHook>
} /*** end of XcpGetSeed ***/
 8005062:	bd08      	pop	{r3, pc}

08005064 <XcpCmdGetSeed>:
{
 8005064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  xcpInfo.ctoData[0] = XCP_PID_RES;
 8005066:	4b3f      	ldr	r3, [pc, #252]	; (8005164 <XcpCmdGetSeed+0x100>)
 8005068:	22ff      	movs	r2, #255	; 0xff
 800506a:	70da      	strb	r2, [r3, #3]
  if (data[1] == 0)
 800506c:	7842      	ldrb	r2, [r0, #1]
 800506e:	bb1a      	cbnz	r2, 80050b8 <XcpCmdGetSeed+0x54>
    if (((data[2] & XCP_RES_CALPAG) > 0) && ((data[2] & ~XCP_RES_CALPAG) == 0))
 8005070:	7883      	ldrb	r3, [r0, #2]
 8005072:	f013 0f01 	tst.w	r3, #1
 8005076:	d003      	beq.n	8005080 <XcpCmdGetSeed+0x1c>
 8005078:	f033 0101 	bics.w	r1, r3, #1
 800507c:	d100      	bne.n	8005080 <XcpCmdGetSeed+0x1c>
      resourceOK = 1;
 800507e:	2201      	movs	r2, #1
    if (((data[2] & XCP_RES_PGM) > 0) && ((data[2] & ~XCP_RES_PGM) == 0))
 8005080:	f013 0f10 	tst.w	r3, #16
 8005084:	d003      	beq.n	800508e <XcpCmdGetSeed+0x2a>
 8005086:	f033 0110 	bics.w	r1, r3, #16
 800508a:	d100      	bne.n	800508e <XcpCmdGetSeed+0x2a>
      resourceOK = 1;
 800508c:	2201      	movs	r2, #1
    if (((data[2] & XCP_RES_DAQ) > 0) && ((data[2] & ~XCP_RES_DAQ) == 0))
 800508e:	f013 0f04 	tst.w	r3, #4
 8005092:	d003      	beq.n	800509c <XcpCmdGetSeed+0x38>
 8005094:	f033 0104 	bics.w	r1, r3, #4
 8005098:	d100      	bne.n	800509c <XcpCmdGetSeed+0x38>
      resourceOK = 1;
 800509a:	2201      	movs	r2, #1
    if (((data[2] & XCP_RES_STIM) > 0) && ((data[2] & ~XCP_RES_STIM) == 0))
 800509c:	f013 0f08 	tst.w	r3, #8
 80050a0:	d002      	beq.n	80050a8 <XcpCmdGetSeed+0x44>
 80050a2:	f033 0108 	bics.w	r1, r3, #8
 80050a6:	d001      	beq.n	80050ac <XcpCmdGetSeed+0x48>
    if (resourceOK == 0)
 80050a8:	2a00      	cmp	r2, #0
 80050aa:	d02d      	beq.n	8005108 <XcpCmdGetSeed+0xa4>
    if ((xcpInfo.protection & data[2]) == 0)
 80050ac:	4a2d      	ldr	r2, [pc, #180]	; (8005164 <XcpCmdGetSeed+0x100>)
 80050ae:	7852      	ldrb	r2, [r2, #1]
 80050b0:	4213      	tst	r3, r2
 80050b2:	d02d      	beq.n	8005110 <XcpCmdGetSeed+0xac>
    xcpInfo.s_n_k_resource = data[2];
 80050b4:	4a2b      	ldr	r2, [pc, #172]	; (8005164 <XcpCmdGetSeed+0x100>)
 80050b6:	7093      	strb	r3, [r2, #2]
  if (data[1] == 0)
 80050b8:	7843      	ldrb	r3, [r0, #1]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d02f      	beq.n	800511e <XcpCmdGetSeed+0xba>
    if (sequenceInProgress == BLT_FALSE)
 80050be:	4b2a      	ldr	r3, [pc, #168]	; (8005168 <XcpCmdGetSeed+0x104>)
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d041      	beq.n	800514a <XcpCmdGetSeed+0xe6>
  seedCurrentLen = seedRemainderLen;
 80050c6:	4b29      	ldr	r3, [pc, #164]	; (800516c <XcpCmdGetSeed+0x108>)
 80050c8:	781c      	ldrb	r4, [r3, #0]
  if (seedCurrentLen > (XCP_CTO_PACKET_LEN-2))
 80050ca:	f7ff fa41 	bl	8004550 <ComGetActiveInterfaceMaxRxLen>
 80050ce:	3802      	subs	r0, #2
 80050d0:	4284      	cmp	r4, r0
 80050d2:	dc41      	bgt.n	8005158 <XcpCmdGetSeed+0xf4>
  CpuMemCopy((blt_addr)(&xcpInfo.ctoData[2]), (blt_addr)seedCurrentPtr, seedCurrentLen);
 80050d4:	b2a5      	uxth	r5, r4
 80050d6:	4e26      	ldr	r6, [pc, #152]	; (8005170 <XcpCmdGetSeed+0x10c>)
 80050d8:	4f22      	ldr	r7, [pc, #136]	; (8005164 <XcpCmdGetSeed+0x100>)
 80050da:	462a      	mov	r2, r5
 80050dc:	6831      	ldr	r1, [r6, #0]
 80050de:	1d78      	adds	r0, r7, #5
 80050e0:	f7fe fe82 	bl	8003de8 <CpuMemCopy>
  xcpInfo.ctoData[1] = seedRemainderLen;
 80050e4:	4a21      	ldr	r2, [pc, #132]	; (800516c <XcpCmdGetSeed+0x108>)
 80050e6:	7813      	ldrb	r3, [r2, #0]
 80050e8:	713b      	strb	r3, [r7, #4]
  seedRemainderLen -= seedCurrentLen;
 80050ea:	1b1b      	subs	r3, r3, r4
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	7013      	strb	r3, [r2, #0]
  seedCurrentPtr += seedCurrentLen;
 80050f0:	6830      	ldr	r0, [r6, #0]
 80050f2:	4404      	add	r4, r0
 80050f4:	6034      	str	r4, [r6, #0]
  if (seedRemainderLen == 0)
 80050f6:	b913      	cbnz	r3, 80050fe <XcpCmdGetSeed+0x9a>
    sequenceInProgress = BLT_FALSE;
 80050f8:	4b1b      	ldr	r3, [pc, #108]	; (8005168 <XcpCmdGetSeed+0x104>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	701a      	strb	r2, [r3, #0]
  xcpInfo.ctoLen = seedCurrentLen + 2;
 80050fe:	3502      	adds	r5, #2
 8005100:	4b18      	ldr	r3, [pc, #96]	; (8005164 <XcpCmdGetSeed+0x100>)
 8005102:	f8a3 5044 	strh.w	r5, [r3, #68]	; 0x44
} /*** end of XcpCmdGetSeed ***/
 8005106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 8005108:	2022      	movs	r0, #34	; 0x22
 800510a:	f7ff fdf5 	bl	8004cf8 <XcpSetCtoError>
      return;
 800510e:	e7fa      	b.n	8005106 <XcpCmdGetSeed+0xa2>
      xcpInfo.ctoData[1] = 0;
 8005110:	4b14      	ldr	r3, [pc, #80]	; (8005164 <XcpCmdGetSeed+0x100>)
 8005112:	2200      	movs	r2, #0
 8005114:	711a      	strb	r2, [r3, #4]
      xcpInfo.ctoLen = 2;
 8005116:	2202      	movs	r2, #2
 8005118:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      return;
 800511c:	e7f3      	b.n	8005106 <XcpCmdGetSeed+0xa2>
    sequenceInProgress = BLT_TRUE;
 800511e:	4b12      	ldr	r3, [pc, #72]	; (8005168 <XcpCmdGetSeed+0x104>)
 8005120:	2201      	movs	r2, #1
 8005122:	701a      	strb	r2, [r3, #0]
    seedRemainderLen = XcpGetSeed(xcpInfo.s_n_k_resource, seedBuffer);
 8005124:	4913      	ldr	r1, [pc, #76]	; (8005174 <XcpCmdGetSeed+0x110>)
 8005126:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <XcpCmdGetSeed+0x100>)
 8005128:	7898      	ldrb	r0, [r3, #2]
 800512a:	f7ff ff97 	bl	800505c <XcpGetSeed>
 800512e:	4b0f      	ldr	r3, [pc, #60]	; (800516c <XcpCmdGetSeed+0x108>)
 8005130:	7018      	strb	r0, [r3, #0]
    ASSERT_RT(seedRemainderLen <= XCP_SEED_MAX_LEN);
 8005132:	2840      	cmp	r0, #64	; 0x40
 8005134:	d803      	bhi.n	800513e <XcpCmdGetSeed+0xda>
    seedCurrentPtr = &seedBuffer[0];
 8005136:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <XcpCmdGetSeed+0x10c>)
 8005138:	4a0e      	ldr	r2, [pc, #56]	; (8005174 <XcpCmdGetSeed+0x110>)
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	e7c3      	b.n	80050c6 <XcpCmdGetSeed+0x62>
    ASSERT_RT(seedRemainderLen <= XCP_SEED_MAX_LEN);
 800513e:	f44f 7179 	mov.w	r1, #996	; 0x3e4
 8005142:	480d      	ldr	r0, [pc, #52]	; (8005178 <XcpCmdGetSeed+0x114>)
 8005144:	f7ff f94c 	bl	80043e0 <AssertFailure>
 8005148:	e7f5      	b.n	8005136 <XcpCmdGetSeed+0xd2>
      XcpSetCtoError(XCP_ERR_SEQUENCE);
 800514a:	2029      	movs	r0, #41	; 0x29
 800514c:	f7ff fdd4 	bl	8004cf8 <XcpSetCtoError>
      xcpInfo.s_n_k_resource = 0;
 8005150:	4b04      	ldr	r3, [pc, #16]	; (8005164 <XcpCmdGetSeed+0x100>)
 8005152:	2200      	movs	r2, #0
 8005154:	709a      	strb	r2, [r3, #2]
      return;
 8005156:	e7d6      	b.n	8005106 <XcpCmdGetSeed+0xa2>
    seedCurrentLen = XCP_CTO_PACKET_LEN-2;
 8005158:	f7ff f9fa 	bl	8004550 <ComGetActiveInterfaceMaxRxLen>
 800515c:	b2c4      	uxtb	r4, r0
 800515e:	3c02      	subs	r4, #2
 8005160:	b2e4      	uxtb	r4, r4
 8005162:	e7b7      	b.n	80050d4 <XcpCmdGetSeed+0x70>
 8005164:	20000fa0 	.word	0x20000fa0
 8005168:	20000f9d 	.word	0x20000f9d
 800516c:	20000f9c 	.word	0x20000f9c
 8005170:	20000f98 	.word	0x20000f98
 8005174:	20000f58 	.word	0x20000f58
 8005178:	08015fd4 	.word	0x08015fd4

0800517c <XcpVerifyKey>:
{
 800517c:	b508      	push	{r3, lr}
  return XcpVerifyKeyHook(resource, key, len);
 800517e:	f7fb faba 	bl	80006f6 <XcpVerifyKeyHook>
} /*** end of XcpVerifyKey ***/
 8005182:	bd08      	pop	{r3, pc}

08005184 <XcpCmdUnlock>:
{
 8005184:	b570      	push	{r4, r5, r6, lr}
  if (data[1] > XCP_KEY_MAX_LEN)
 8005186:	7844      	ldrb	r4, [r0, #1]
 8005188:	2c40      	cmp	r4, #64	; 0x40
 800518a:	d82e      	bhi.n	80051ea <XcpCmdUnlock+0x66>
 800518c:	4606      	mov	r6, r0
  if (data[1] >= keyPreviousRemainder)
 800518e:	4b2c      	ldr	r3, [pc, #176]	; (8005240 <XcpCmdUnlock+0xbc>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	429c      	cmp	r4, r3
 8005194:	d307      	bcc.n	80051a6 <XcpCmdUnlock+0x22>
    keyTotalLen = data[1];
 8005196:	4b2b      	ldr	r3, [pc, #172]	; (8005244 <XcpCmdUnlock+0xc0>)
 8005198:	701c      	strb	r4, [r3, #0]
    keyCurrentPtr = &keyBuffer[0];
 800519a:	4b2b      	ldr	r3, [pc, #172]	; (8005248 <XcpCmdUnlock+0xc4>)
 800519c:	4a2b      	ldr	r2, [pc, #172]	; (800524c <XcpCmdUnlock+0xc8>)
 800519e:	601a      	str	r2, [r3, #0]
    keyReceivedLen = 0;
 80051a0:	4b2b      	ldr	r3, [pc, #172]	; (8005250 <XcpCmdUnlock+0xcc>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	701a      	strb	r2, [r3, #0]
  keyPreviousRemainder = data[1];
 80051a6:	4b26      	ldr	r3, [pc, #152]	; (8005240 <XcpCmdUnlock+0xbc>)
 80051a8:	701c      	strb	r4, [r3, #0]
  if (keyCurrentLen > (XCP_CTO_PACKET_LEN-2))
 80051aa:	f7ff f9d1 	bl	8004550 <ComGetActiveInterfaceMaxRxLen>
 80051ae:	3802      	subs	r0, #2
 80051b0:	4284      	cmp	r4, r0
 80051b2:	dc23      	bgt.n	80051fc <XcpCmdUnlock+0x78>
  CpuMemCopy((blt_addr)keyCurrentPtr, (blt_addr)(&data[2]), keyCurrentLen);
 80051b4:	4d24      	ldr	r5, [pc, #144]	; (8005248 <XcpCmdUnlock+0xc4>)
 80051b6:	4622      	mov	r2, r4
 80051b8:	1cb1      	adds	r1, r6, #2
 80051ba:	6828      	ldr	r0, [r5, #0]
 80051bc:	f7fe fe14 	bl	8003de8 <CpuMemCopy>
  keyCurrentPtr += keyCurrentLen;
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	4423      	add	r3, r4
 80051c4:	602b      	str	r3, [r5, #0]
  keyReceivedLen += keyCurrentLen;
 80051c6:	4b22      	ldr	r3, [pc, #136]	; (8005250 <XcpCmdUnlock+0xcc>)
 80051c8:	7818      	ldrb	r0, [r3, #0]
 80051ca:	4404      	add	r4, r0
 80051cc:	b2e4      	uxtb	r4, r4
 80051ce:	701c      	strb	r4, [r3, #0]
  if (keyReceivedLen >= keyTotalLen)
 80051d0:	4b1c      	ldr	r3, [pc, #112]	; (8005244 <XcpCmdUnlock+0xc0>)
 80051d2:	781a      	ldrb	r2, [r3, #0]
 80051d4:	4294      	cmp	r4, r2
 80051d6:	d217      	bcs.n	8005208 <XcpCmdUnlock+0x84>
  xcpInfo.ctoData[0] = XCP_PID_RES;
 80051d8:	4b1e      	ldr	r3, [pc, #120]	; (8005254 <XcpCmdUnlock+0xd0>)
 80051da:	22ff      	movs	r2, #255	; 0xff
 80051dc:	70da      	strb	r2, [r3, #3]
  xcpInfo.ctoData[1] = xcpInfo.protection;
 80051de:	785a      	ldrb	r2, [r3, #1]
 80051e0:	711a      	strb	r2, [r3, #4]
  xcpInfo.ctoLen = 2;
 80051e2:	2202      	movs	r2, #2
 80051e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
} /*** end of XcpCmdUnlock ***/
 80051e8:	bd70      	pop	{r4, r5, r6, pc}
    keyPreviousRemainder = 0;
 80051ea:	2400      	movs	r4, #0
 80051ec:	4b14      	ldr	r3, [pc, #80]	; (8005240 <XcpCmdUnlock+0xbc>)
 80051ee:	701c      	strb	r4, [r3, #0]
    XcpSetCtoError(XCP_ERR_OUT_OF_RANGE);
 80051f0:	2022      	movs	r0, #34	; 0x22
 80051f2:	f7ff fd81 	bl	8004cf8 <XcpSetCtoError>
    xcpInfo.s_n_k_resource = 0;
 80051f6:	4b17      	ldr	r3, [pc, #92]	; (8005254 <XcpCmdUnlock+0xd0>)
 80051f8:	709c      	strb	r4, [r3, #2]
    return;
 80051fa:	e7f5      	b.n	80051e8 <XcpCmdUnlock+0x64>
    keyCurrentLen = XCP_CTO_PACKET_LEN-2;
 80051fc:	f7ff f9a8 	bl	8004550 <ComGetActiveInterfaceMaxRxLen>
 8005200:	b2c4      	uxtb	r4, r0
 8005202:	3c02      	subs	r4, #2
 8005204:	b2e4      	uxtb	r4, r4
 8005206:	e7d5      	b.n	80051b4 <XcpCmdUnlock+0x30>
    keyPreviousRemainder = 0;
 8005208:	4b0d      	ldr	r3, [pc, #52]	; (8005240 <XcpCmdUnlock+0xbc>)
 800520a:	2100      	movs	r1, #0
 800520c:	7019      	strb	r1, [r3, #0]
    if (XcpVerifyKey(xcpInfo.s_n_k_resource, keyBuffer, keyTotalLen) == 0)
 800520e:	490f      	ldr	r1, [pc, #60]	; (800524c <XcpCmdUnlock+0xc8>)
 8005210:	4b10      	ldr	r3, [pc, #64]	; (8005254 <XcpCmdUnlock+0xd0>)
 8005212:	7898      	ldrb	r0, [r3, #2]
 8005214:	f7ff ffb2 	bl	800517c <XcpVerifyKey>
 8005218:	b140      	cbz	r0, 800522c <XcpCmdUnlock+0xa8>
    xcpInfo.protection &= ~xcpInfo.s_n_k_resource;
 800521a:	4b0e      	ldr	r3, [pc, #56]	; (8005254 <XcpCmdUnlock+0xd0>)
 800521c:	7899      	ldrb	r1, [r3, #2]
 800521e:	785a      	ldrb	r2, [r3, #1]
 8005220:	ea22 0201 	bic.w	r2, r2, r1
 8005224:	705a      	strb	r2, [r3, #1]
    xcpInfo.s_n_k_resource = 0;
 8005226:	2200      	movs	r2, #0
 8005228:	709a      	strb	r2, [r3, #2]
 800522a:	e7d5      	b.n	80051d8 <XcpCmdUnlock+0x54>
      XcpSetCtoError(XCP_ERR_ACCESS_LOCKED);
 800522c:	2025      	movs	r0, #37	; 0x25
 800522e:	f7ff fd63 	bl	8004cf8 <XcpSetCtoError>
      xcpInfo.connected = 0;
 8005232:	4b08      	ldr	r3, [pc, #32]	; (8005254 <XcpCmdUnlock+0xd0>)
 8005234:	2200      	movs	r2, #0
 8005236:	701a      	strb	r2, [r3, #0]
      xcpInfo.s_n_k_resource = 0;
 8005238:	709a      	strb	r2, [r3, #2]
      XcpProtectResources();
 800523a:	f7ff fd57 	bl	8004cec <XcpProtectResources>
      return;
 800523e:	e7d3      	b.n	80051e8 <XcpCmdUnlock+0x64>
 8005240:	20000f54 	.word	0x20000f54
 8005244:	20000f56 	.word	0x20000f56
 8005248:	20000f50 	.word	0x20000f50
 800524c:	20000f10 	.word	0x20000f10
 8005250:	20000f55 	.word	0x20000f55
 8005254:	20000fa0 	.word	0x20000fa0

08005258 <XcpTransmitPacket>:
{
 8005258:	b508      	push	{r3, lr}
  ComTransmitPacket(data, len);
 800525a:	b289      	uxth	r1, r1
 800525c:	f7ff f960 	bl	8004520 <ComTransmitPacket>
} /*** end of XcpTransmitPacket ***/
 8005260:	bd08      	pop	{r3, pc}
	...

08005264 <XcpInit>:
  xcpInfo.connected = 0;
 8005264:	4b05      	ldr	r3, [pc, #20]	; (800527c <XcpInit+0x18>)
 8005266:	2200      	movs	r2, #0
 8005268:	701a      	strb	r2, [r3, #0]
  xcpInfo.mta = 0;
 800526a:	649a      	str	r2, [r3, #72]	; 0x48
  xcpInfo.ctoPending = 0;
 800526c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  xcpInfo.ctoLen = 0;
 8005270:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  xcpInfo.s_n_k_resource = 0;
 8005274:	709a      	strb	r2, [r3, #2]
  xcpInfo.protection = 0;
 8005276:	705a      	strb	r2, [r3, #1]
} /*** end of XcpInit ***/
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	20000fa0 	.word	0x20000fa0

08005280 <XcpIsConnected>:
  if (xcpInfo.connected == 0)
 8005280:	4b03      	ldr	r3, [pc, #12]	; (8005290 <XcpIsConnected+0x10>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	b10b      	cbz	r3, 800528a <XcpIsConnected+0xa>
  return BLT_TRUE;
 8005286:	2001      	movs	r0, #1
} /*** end of XcpIsConnected ***/
 8005288:	4770      	bx	lr
    return BLT_FALSE;
 800528a:	2000      	movs	r0, #0
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	20000fa0 	.word	0x20000fa0

08005294 <XcpPacketTransmitted>:
  xcpInfo.ctoPending = 0;
 8005294:	4b02      	ldr	r3, [pc, #8]	; (80052a0 <XcpPacketTransmitted+0xc>)
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
} /*** end of XcpPacketTransmitted ***/
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	20000fa0 	.word	0x20000fa0

080052a4 <XcpPacketReceived>:
{
 80052a4:	b508      	push	{r3, lr}
  if (data[0] == XCP_CMD_CONNECT)
 80052a6:	7803      	ldrb	r3, [r0, #0]
 80052a8:	2bff      	cmp	r3, #255	; 0xff
 80052aa:	d004      	beq.n	80052b6 <XcpPacketReceived+0x12>
  else if (xcpInfo.connected == 1)
 80052ac:	4a38      	ldr	r2, [pc, #224]	; (8005390 <XcpPacketReceived+0xec>)
 80052ae:	7812      	ldrb	r2, [r2, #0]
 80052b0:	2a01      	cmp	r2, #1
 80052b2:	d014      	beq.n	80052de <XcpPacketReceived+0x3a>
} /*** end of XcpPacketReceived ***/
 80052b4:	bd08      	pop	{r3, pc}
    XcpCmdConnect(data);
 80052b6:	f7ff fd99 	bl	8004dec <XcpCmdConnect>
  if (xcpInfo.ctoPending == 1)
 80052ba:	4b35      	ldr	r3, [pc, #212]	; (8005390 <XcpPacketReceived+0xec>)
 80052bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d060      	beq.n	8005386 <XcpPacketReceived+0xe2>
  if (xcpInfo.ctoLen > 0)
 80052c4:	4b32      	ldr	r3, [pc, #200]	; (8005390 <XcpPacketReceived+0xec>)
 80052c6:	f9b3 1044 	ldrsh.w	r1, [r3, #68]	; 0x44
 80052ca:	2900      	cmp	r1, #0
 80052cc:	ddf2      	ble.n	80052b4 <XcpPacketReceived+0x10>
    xcpInfo.ctoPending = 1;
 80052ce:	4618      	mov	r0, r3
 80052d0:	2301      	movs	r3, #1
 80052d2:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
    XcpTransmitPacket(xcpInfo.ctoData, xcpInfo.ctoLen);
 80052d6:	3003      	adds	r0, #3
 80052d8:	f7ff ffbe 	bl	8005258 <XcpTransmitPacket>
 80052dc:	e7ea      	b.n	80052b4 <XcpPacketReceived+0x10>
    switch (data[0])
 80052de:	3bc9      	subs	r3, #201	; 0xc9
 80052e0:	2b35      	cmp	r3, #53	; 0x35
 80052e2:	d84c      	bhi.n	800537e <XcpPacketReceived+0xda>
 80052e4:	e8df f003 	tbb	[pc, r3]
 80052e8:	424b4b33 	.word	0x424b4b33
 80052ec:	363f4b4b 	.word	0x363f4b4b
 80052f0:	4b4b393c 	.word	0x4b4b393c
 80052f4:	4b4b4b4b 	.word	0x4b4b4b4b
 80052f8:	4b4b4b4b 	.word	0x4b4b4b4b
 80052fc:	4b4b4b4b 	.word	0x4b4b4b4b
 8005300:	4b4b4b4b 	.word	0x4b4b4b4b
 8005304:	4b4b4b4b 	.word	0x4b4b4b4b
 8005308:	4b4b4b4b 	.word	0x4b4b4b4b
 800530c:	4b4b4b4b 	.word	0x4b4b4b4b
 8005310:	1e244b4b 	.word	0x1e244b4b
 8005314:	4548211b 	.word	0x4548211b
 8005318:	2a4b274b 	.word	0x2a4b274b
 800531c:	302d      	.short	0x302d
        XcpCmdUpload(data);
 800531e:	f7ff fd8d 	bl	8004e3c <XcpCmdUpload>
        break;
 8005322:	e7ca      	b.n	80052ba <XcpPacketReceived+0x16>
        XcpCmdShortUpload(data);
 8005324:	f7ff fdb6 	bl	8004e94 <XcpCmdShortUpload>
        break;
 8005328:	e7c7      	b.n	80052ba <XcpPacketReceived+0x16>
        XcpCmdSetMta(data);
 800532a:	f7ff fd27 	bl	8004d7c <XcpCmdSetMta>
        break;
 800532e:	e7c4      	b.n	80052ba <XcpPacketReceived+0x16>
        XcpCmdBuildCheckSum(data);
 8005330:	f7ff fdee 	bl	8004f10 <XcpCmdBuildCheckSum>
        break;
 8005334:	e7c1      	b.n	80052ba <XcpPacketReceived+0x16>
        XcpCmdGetId(data);
 8005336:	f7ff fd0d 	bl	8004d54 <XcpCmdGetId>
        break;
 800533a:	e7be      	b.n	80052ba <XcpPacketReceived+0x16>
        XcpCmdSynch(data);
 800533c:	f7ff fd04 	bl	8004d48 <XcpCmdSynch>
        break;
 8005340:	e7bb      	b.n	80052ba <XcpPacketReceived+0x16>
        XcpCmdGetStatus(data);
 8005342:	f7ff fcf1 	bl	8004d28 <XcpCmdGetStatus>
        break;
 8005346:	e7b8      	b.n	80052ba <XcpPacketReceived+0x16>
        XcpCmdDisconnect(data);
 8005348:	f7ff fce0 	bl	8004d0c <XcpCmdDisconnect>
        break;
 800534c:	e7b5      	b.n	80052ba <XcpPacketReceived+0x16>
        XcpCmdProgramMax(data);
 800534e:	f7ff fdf3 	bl	8004f38 <XcpCmdProgramMax>
        break;
 8005352:	e7b2      	b.n	80052ba <XcpPacketReceived+0x16>
        XcpCmdProgram(data);
 8005354:	f7ff fe18 	bl	8004f88 <XcpCmdProgram>
        break;
 8005358:	e7af      	b.n	80052ba <XcpPacketReceived+0x16>
        XcpCmdProgramStart(data);
 800535a:	f7ff fd2b 	bl	8004db4 <XcpCmdProgramStart>
        break;
 800535e:	e7ac      	b.n	80052ba <XcpPacketReceived+0x16>
        XcpCmdProgramClear(data);
 8005360:	f7ff fe48 	bl	8004ff4 <XcpCmdProgramClear>
        break;
 8005364:	e7a9      	b.n	80052ba <XcpPacketReceived+0x16>
        XcpCmdProgramReset(data);
 8005366:	f7ff fe63 	bl	8005030 <XcpCmdProgramReset>
        break;
 800536a:	e7a6      	b.n	80052ba <XcpPacketReceived+0x16>
        XcpCmdProgramPrepare(data);
 800536c:	f7ff fd12 	bl	8004d94 <XcpCmdProgramPrepare>
        break;
 8005370:	e7a3      	b.n	80052ba <XcpPacketReceived+0x16>
        XcpCmdGetSeed(data);
 8005372:	f7ff fe77 	bl	8005064 <XcpCmdGetSeed>
        break;
 8005376:	e7a0      	b.n	80052ba <XcpPacketReceived+0x16>
        XcpCmdUnlock(data);
 8005378:	f7ff ff04 	bl	8005184 <XcpCmdUnlock>
        break;
 800537c:	e79d      	b.n	80052ba <XcpPacketReceived+0x16>
        XcpSetCtoError(XCP_ERR_CMD_UNKNOWN);
 800537e:	2020      	movs	r0, #32
 8005380:	f7ff fcba 	bl	8004cf8 <XcpSetCtoError>
        break;
 8005384:	e799      	b.n	80052ba <XcpPacketReceived+0x16>
    XcpSetCtoError(XCP_ERR_CMD_BUSY);
 8005386:	2010      	movs	r0, #16
 8005388:	f7ff fcb6 	bl	8004cf8 <XcpSetCtoError>
 800538c:	e79a      	b.n	80052c4 <XcpPacketReceived+0x20>
 800538e:	bf00      	nop
 8005390:	20000fa0 	.word	0x20000fa0

08005394 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 8005394:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 8005396:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8005398:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800539c:	4770      	bx	lr

0800539e <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 800539e:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 80053a0:	7883      	ldrb	r3, [r0, #2]
 80053a2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 80053a6:	7843      	ldrb	r3, [r0, #1]
 80053a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80053ac:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80053ae:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80053b2:	4770      	bx	lr

080053b4 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80053b4:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 80053b6:	0a09      	lsrs	r1, r1, #8
 80053b8:	7041      	strb	r1, [r0, #1]
}
 80053ba:	4770      	bx	lr

080053bc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80053bc:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80053be:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80053c2:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 80053c4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80053c8:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80053ca:	0e09      	lsrs	r1, r1, #24
 80053cc:	70c1      	strb	r1, [r0, #3]
}
 80053ce:	4770      	bx	lr

080053d0 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 80053d0:	4613      	mov	r3, r2
 80053d2:	b12a      	cbz	r2, 80053e0 <mem_cpy+0x10>
		do *d++ = *s++; while (--cnt);
 80053d4:	780a      	ldrb	r2, [r1, #0]
 80053d6:	7002      	strb	r2, [r0, #0]
 80053d8:	3001      	adds	r0, #1
 80053da:	3101      	adds	r1, #1
 80053dc:	3b01      	subs	r3, #1
 80053de:	d1f9      	bne.n	80053d4 <mem_cpy+0x4>
	}
}
 80053e0:	4770      	bx	lr

080053e2 <mem_set>:
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
 80053e2:	7001      	strb	r1, [r0, #0]
 80053e4:	3001      	adds	r0, #1
 80053e6:	3a01      	subs	r2, #1
 80053e8:	d1fb      	bne.n	80053e2 <mem_set>
}
 80053ea:	4770      	bx	lr

080053ec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80053ec:	b430      	push	{r4, r5}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 80053ee:	1c45      	adds	r5, r0, #1
 80053f0:	7803      	ldrb	r3, [r0, #0]
 80053f2:	7808      	ldrb	r0, [r1, #0]
 80053f4:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
 80053f6:	3a01      	subs	r2, #1
 80053f8:	d004      	beq.n	8005404 <mem_cmp+0x18>
 80053fa:	1c4c      	adds	r4, r1, #1
		r = *d++ - *s++;
 80053fc:	4628      	mov	r0, r5
 80053fe:	4621      	mov	r1, r4
	} while (--cnt && r == 0);
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0f4      	beq.n	80053ee <mem_cmp+0x2>

	return r;
}
 8005404:	4618      	mov	r0, r3
 8005406:	bc30      	pop	{r4, r5}
 8005408:	4770      	bx	lr

0800540a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
	while (*str && *str != chr) str++;
 800540a:	e000      	b.n	800540e <chk_chr+0x4>
 800540c:	3001      	adds	r0, #1
 800540e:	7803      	ldrb	r3, [r0, #0]
 8005410:	b10b      	cbz	r3, 8005416 <chk_chr+0xc>
 8005412:	428b      	cmp	r3, r1
 8005414:	d1fa      	bne.n	800540c <chk_chr+0x2>
	return *str;
}
 8005416:	4618      	mov	r0, r3
 8005418:	4770      	bx	lr

0800541a <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 800541a:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800541c:	6943      	ldr	r3, [r0, #20]
 800541e:	3b02      	subs	r3, #2
 8005420:	428b      	cmp	r3, r1
 8005422:	d904      	bls.n	800542e <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8005424:	8943      	ldrh	r3, [r0, #10]
 8005426:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005428:	fb01 0003 	mla	r0, r1, r3, r0
 800542c:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800542e:	2000      	movs	r0, #0
}
 8005430:	4770      	bx	lr

08005432 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005432:	b570      	push	{r4, r5, r6, lr}
 8005434:	4606      	mov	r6, r0
 8005436:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005438:	f101 001a 	add.w	r0, r1, #26
 800543c:	f7ff ffaa 	bl	8005394 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 8005440:	7833      	ldrb	r3, [r6, #0]
 8005442:	2b03      	cmp	r3, #3
 8005444:	d000      	beq.n	8005448 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 8005446:	bd70      	pop	{r4, r5, r6, pc}
 8005448:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800544a:	f105 0014 	add.w	r0, r5, #20
 800544e:	f7ff ffa1 	bl	8005394 <ld_word>
 8005452:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 8005456:	e7f6      	b.n	8005446 <ld_clust+0x14>

08005458 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	4606      	mov	r6, r0
 800545c:	460c      	mov	r4, r1
 800545e:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005460:	b291      	uxth	r1, r2
 8005462:	f104 001a 	add.w	r0, r4, #26
 8005466:	f7ff ffa5 	bl	80053b4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800546a:	7833      	ldrb	r3, [r6, #0]
 800546c:	2b03      	cmp	r3, #3
 800546e:	d000      	beq.n	8005472 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8005470:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005472:	0c29      	lsrs	r1, r5, #16
 8005474:	f104 0014 	add.w	r0, r4, #20
 8005478:	f7ff ff9c 	bl	80053b4 <st_word>
}
 800547c:	e7f8      	b.n	8005470 <st_clust+0x18>
	...

08005480 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8005480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005484:	4607      	mov	r7, r0
 8005486:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005488:	f101 001a 	add.w	r0, r1, #26
 800548c:	f7ff ff82 	bl	8005394 <ld_word>
 8005490:	bb60      	cbnz	r0, 80054ec <pick_lfn+0x6c>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005492:	7835      	ldrb	r5, [r6, #0]
 8005494:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8005498:	3d01      	subs	r5, #1
 800549a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800549e:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80054a2:	f04f 0801 	mov.w	r8, #1
 80054a6:	2400      	movs	r4, #0
 80054a8:	e004      	b.n	80054b4 <pick_lfn+0x34>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80054aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054ae:	4298      	cmp	r0, r3
 80054b0:	d121      	bne.n	80054f6 <pick_lfn+0x76>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80054b2:	3401      	adds	r4, #1
 80054b4:	2c0c      	cmp	r4, #12
 80054b6:	d80e      	bhi.n	80054d6 <pick_lfn+0x56>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80054b8:	4b12      	ldr	r3, [pc, #72]	; (8005504 <pick_lfn+0x84>)
 80054ba:	5d18      	ldrb	r0, [r3, r4]
 80054bc:	4430      	add	r0, r6
 80054be:	f7ff ff69 	bl	8005394 <ld_word>
		if (wc) {
 80054c2:	f1b8 0f00 	cmp.w	r8, #0
 80054c6:	d0f0      	beq.n	80054aa <pick_lfn+0x2a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80054c8:	2dfe      	cmp	r5, #254	; 0xfe
 80054ca:	d812      	bhi.n	80054f2 <pick_lfn+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80054cc:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 80054d0:	4680      	mov	r8, r0
 80054d2:	3501      	adds	r5, #1
 80054d4:	e7ed      	b.n	80054b2 <pick_lfn+0x32>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80054d6:	7833      	ldrb	r3, [r6, #0]
 80054d8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80054dc:	d00d      	beq.n	80054fa <pick_lfn+0x7a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80054de:	2dfe      	cmp	r5, #254	; 0xfe
 80054e0:	d80d      	bhi.n	80054fe <pick_lfn+0x7e>
		lfnbuf[i] = 0;
 80054e2:	2300      	movs	r3, #0
 80054e4:	f827 3015 	strh.w	r3, [r7, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
 80054e8:	2001      	movs	r0, #1
 80054ea:	e000      	b.n	80054ee <pick_lfn+0x6e>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80054ec:	2000      	movs	r0, #0
}
 80054ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80054f2:	2000      	movs	r0, #0
 80054f4:	e7fb      	b.n	80054ee <pick_lfn+0x6e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80054f6:	2000      	movs	r0, #0
 80054f8:	e7f9      	b.n	80054ee <pick_lfn+0x6e>
	return 1;		/* The part of LFN is valid */
 80054fa:	2001      	movs	r0, #1
 80054fc:	e7f7      	b.n	80054ee <pick_lfn+0x6e>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80054fe:	2000      	movs	r0, #0
 8005500:	e7f5      	b.n	80054ee <pick_lfn+0x6e>
 8005502:	bf00      	nop
 8005504:	08016088 	.word	0x08016088

08005508 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800550c:	4680      	mov	r8, r0
 800550e:	460f      	mov	r7, r1
 8005510:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005512:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005514:	230f      	movs	r3, #15
 8005516:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 8005518:	2400      	movs	r4, #0
 800551a:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 800551c:	4621      	mov	r1, r4
 800551e:	f107 001a 	add.w	r0, r7, #26
 8005522:	f7ff ff47 	bl	80053b4 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005526:	f109 36ff 	add.w	r6, r9, #4294967295
 800552a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800552e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 8005532:	4625      	mov	r5, r4
 8005534:	e002      	b.n	800553c <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 8005536:	3401      	adds	r4, #1
 8005538:	2c0c      	cmp	r4, #12
 800553a:	d811      	bhi.n	8005560 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800553c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005540:	429d      	cmp	r5, r3
 8005542:	d002      	beq.n	800554a <put_lfn+0x42>
 8005544:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 8005548:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800554a:	4b0c      	ldr	r3, [pc, #48]	; (800557c <put_lfn+0x74>)
 800554c:	5d18      	ldrb	r0, [r3, r4]
 800554e:	4629      	mov	r1, r5
 8005550:	4438      	add	r0, r7
 8005552:	f7ff ff2f 	bl	80053b4 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005556:	2d00      	cmp	r5, #0
 8005558:	d1ed      	bne.n	8005536 <put_lfn+0x2e>
 800555a:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800555e:	e7ea      	b.n	8005536 <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005560:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005564:	429d      	cmp	r5, r3
 8005566:	d002      	beq.n	800556e <put_lfn+0x66>
 8005568:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 800556c:	b90b      	cbnz	r3, 8005572 <put_lfn+0x6a>
 800556e:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005572:	f887 9000 	strb.w	r9, [r7]
}
 8005576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800557a:	bf00      	nop
 800557c:	08016088 	.word	0x08016088

08005580 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005580:	b570      	push	{r4, r5, r6, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	4605      	mov	r5, r0
 8005586:	4616      	mov	r6, r2
 8005588:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800558a:	220b      	movs	r2, #11
 800558c:	f7ff ff20 	bl	80053d0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005590:	2c05      	cmp	r4, #5
 8005592:	d811      	bhi.n	80055b8 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 8005594:	2207      	movs	r2, #7
 8005596:	e01d      	b.n	80055d4 <gen_numname+0x54>
 8005598:	3201      	adds	r2, #1
 800559a:	2a0f      	cmp	r2, #15
 800559c:	d80c      	bhi.n	80055b8 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 800559e:	f003 0101 	and.w	r1, r3, #1
 80055a2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
				wc >>= 1;
 80055a6:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 80055a8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80055ac:	d0f4      	beq.n	8005598 <gen_numname+0x18>
 80055ae:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 80055b2:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 80055b6:	e7ef      	b.n	8005598 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 80055b8:	8833      	ldrh	r3, [r6, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0ea      	beq.n	8005594 <gen_numname+0x14>
			wc = *lfn++;
 80055be:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 80055c0:	2200      	movs	r2, #0
 80055c2:	e7ea      	b.n	800559a <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (seq % 16) + '0';
		if (c > '9') c += 7;
		ns[i--] = c;
 80055c4:	1e53      	subs	r3, r2, #1
 80055c6:	a802      	add	r0, sp, #8
 80055c8:	4402      	add	r2, r0
 80055ca:	f802 1c08 	strb.w	r1, [r2, #-8]
		seq /= 16;
	} while (seq);
 80055ce:	0924      	lsrs	r4, r4, #4
 80055d0:	d009      	beq.n	80055e6 <gen_numname+0x66>
		ns[i--] = c;
 80055d2:	461a      	mov	r2, r3
		c = (seq % 16) + '0';
 80055d4:	f004 030f 	and.w	r3, r4, #15
 80055d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
		if (c > '9') c += 7;
 80055dc:	2939      	cmp	r1, #57	; 0x39
 80055de:	d9f1      	bls.n	80055c4 <gen_numname+0x44>
 80055e0:	f103 0137 	add.w	r1, r3, #55	; 0x37
 80055e4:	e7ee      	b.n	80055c4 <gen_numname+0x44>
	ns[i] = '~';
 80055e6:	217e      	movs	r1, #126	; 0x7e
 80055e8:	4602      	mov	r2, r0
 80055ea:	441a      	add	r2, r3
 80055ec:	f802 1c08 	strb.w	r1, [r2, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80055f0:	e000      	b.n	80055f4 <gen_numname+0x74>
 80055f2:	3401      	adds	r4, #1
 80055f4:	429c      	cmp	r4, r3
 80055f6:	d209      	bcs.n	800560c <gen_numname+0x8c>
 80055f8:	5d2a      	ldrb	r2, [r5, r4]
 80055fa:	2a20      	cmp	r2, #32
 80055fc:	d1f9      	bne.n	80055f2 <gen_numname+0x72>
 80055fe:	e005      	b.n	800560c <gen_numname+0x8c>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005600:	2120      	movs	r1, #32
 8005602:	1c62      	adds	r2, r4, #1
 8005604:	5529      	strb	r1, [r5, r4]
	} while (j < 8);
 8005606:	2a07      	cmp	r2, #7
 8005608:	d808      	bhi.n	800561c <gen_numname+0x9c>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800560a:	4614      	mov	r4, r2
 800560c:	2b07      	cmp	r3, #7
 800560e:	d8f7      	bhi.n	8005600 <gen_numname+0x80>
 8005610:	aa02      	add	r2, sp, #8
 8005612:	441a      	add	r2, r3
 8005614:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8005618:	3301      	adds	r3, #1
 800561a:	e7f2      	b.n	8005602 <gen_numname+0x82>
}
 800561c:	b002      	add	sp, #8
 800561e:	bd70      	pop	{r4, r5, r6, pc}

08005620 <sum_sfn>:
#if _USE_LFN != 0
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005620:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 8005622:	220b      	movs	r2, #11
	BYTE sum = 0;
 8005624:	2000      	movs	r0, #0

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8005626:	01c3      	lsls	r3, r0, #7
 8005628:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 800562c:	7808      	ldrb	r0, [r1, #0]
 800562e:	fa50 f383 	uxtab	r3, r0, r3
 8005632:	b2d8      	uxtb	r0, r3
 8005634:	3101      	adds	r1, #1
 8005636:	3a01      	subs	r2, #1
 8005638:	d1f5      	bne.n	8005626 <sum_sfn+0x6>
	return sum;
}
 800563a:	4770      	bx	lr

0800563c <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800563c:	6801      	ldr	r1, [r0, #0]
 800563e:	b109      	cbz	r1, 8005644 <get_ldnumber+0x8>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005640:	460a      	mov	r2, r1
 8005642:	e003      	b.n	800564c <get_ldnumber+0x10>
	int vol = -1;
 8005644:	f04f 33ff 	mov.w	r3, #4294967295
 8005648:	e008      	b.n	800565c <get_ldnumber+0x20>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800564a:	3201      	adds	r2, #1
 800564c:	7813      	ldrb	r3, [r2, #0]
 800564e:	2b1f      	cmp	r3, #31
 8005650:	d901      	bls.n	8005656 <get_ldnumber+0x1a>
 8005652:	2b3a      	cmp	r3, #58	; 0x3a
 8005654:	d1f9      	bne.n	800564a <get_ldnumber+0xe>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005656:	2b3a      	cmp	r3, #58	; 0x3a
 8005658:	d002      	beq.n	8005660 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800565a:	2300      	movs	r3, #0
#endif
	}
	return vol;
}
 800565c:	4618      	mov	r0, r3
 800565e:	4770      	bx	lr
{
 8005660:	b410      	push	{r4}
			i = *tp++ - '0'; 
 8005662:	1c4c      	adds	r4, r1, #1
 8005664:	780b      	ldrb	r3, [r1, #0]
 8005666:	3b30      	subs	r3, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005668:	2b09      	cmp	r3, #9
 800566a:	d808      	bhi.n	800567e <get_ldnumber+0x42>
 800566c:	42a2      	cmp	r2, r4
 800566e:	d109      	bne.n	8005684 <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005670:	b95b      	cbnz	r3, 800568a <get_ldnumber+0x4e>
					*path = ++tt;
 8005672:	3201      	adds	r2, #1
 8005674:	6002      	str	r2, [r0, #0]
}
 8005676:	4618      	mov	r0, r3
 8005678:	f85d 4b04 	ldr.w	r4, [sp], #4
 800567c:	4770      	bx	lr
	int vol = -1;
 800567e:	f04f 33ff 	mov.w	r3, #4294967295
 8005682:	e7f8      	b.n	8005676 <get_ldnumber+0x3a>
 8005684:	f04f 33ff 	mov.w	r3, #4294967295
 8005688:	e7f5      	b.n	8005676 <get_ldnumber+0x3a>
 800568a:	f04f 33ff 	mov.w	r3, #4294967295
 800568e:	e7f2      	b.n	8005676 <get_ldnumber+0x3a>

08005690 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	void* dfp,		/* Pointer to the FIL/DIR object to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005690:	b538      	push	{r3, r4, r5, lr}
 8005692:	460d      	mov	r5, r1
	_FDID *obj = (_FDID*)dfp;	/* Assuming .obj in the FIL/DIR is the first member */
	FRESULT res;


	if (!dfp || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8005694:	b140      	cbz	r0, 80056a8 <validate+0x18>
 8005696:	4604      	mov	r4, r0
 8005698:	6803      	ldr	r3, [r0, #0]
 800569a:	b12b      	cbz	r3, 80056a8 <validate+0x18>
 800569c:	781a      	ldrb	r2, [r3, #0]
 800569e:	b11a      	cbz	r2, 80056a8 <validate+0x18>
 80056a0:	88d9      	ldrh	r1, [r3, #6]
 80056a2:	8882      	ldrh	r2, [r0, #4]
 80056a4:	4291      	cmp	r1, r2
 80056a6:	d003      	beq.n	80056b0 <validate+0x20>
		*fs = 0;				/* The object is invalid */
 80056a8:	2300      	movs	r3, #0
 80056aa:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;
 80056ac:	2009      	movs	r0, #9
		*fs = obj->fs;			/* Owner file sytem object */
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;
	}
	return res;
}
 80056ae:	bd38      	pop	{r3, r4, r5, pc}
	if (!dfp || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 80056b0:	7858      	ldrb	r0, [r3, #1]
 80056b2:	f7fe fae5 	bl	8003c80 <disk_status>
 80056b6:	f010 0f01 	tst.w	r0, #1
 80056ba:	d1f5      	bne.n	80056a8 <validate+0x18>
		*fs = obj->fs;			/* Owner file sytem object */
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	602b      	str	r3, [r5, #0]
		res = FR_OK;
 80056c0:	2000      	movs	r0, #0
 80056c2:	e7f4      	b.n	80056ae <validate+0x1e>

080056c4 <sync_window>:
{
 80056c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80056c6:	78c3      	ldrb	r3, [r0, #3]
 80056c8:	b90b      	cbnz	r3, 80056ce <sync_window+0xa>
	FRESULT res = FR_OK;
 80056ca:	2000      	movs	r0, #0
}
 80056cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ce:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 80056d0:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80056d2:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80056d6:	2301      	movs	r3, #1
 80056d8:	462a      	mov	r2, r5
 80056da:	4639      	mov	r1, r7
 80056dc:	7840      	ldrb	r0, [r0, #1]
 80056de:	f7fe fad9 	bl	8003c94 <disk_write>
 80056e2:	b9a8      	cbnz	r0, 8005710 <sync_window+0x4c>
			fs->wflag = 0;
 80056e4:	2300      	movs	r3, #0
 80056e6:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80056e8:	6a23      	ldr	r3, [r4, #32]
 80056ea:	1aeb      	subs	r3, r5, r3
 80056ec:	69a2      	ldr	r2, [r4, #24]
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d210      	bcs.n	8005714 <sync_window+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80056f2:	78a6      	ldrb	r6, [r4, #2]
 80056f4:	2e01      	cmp	r6, #1
 80056f6:	d909      	bls.n	800570c <sync_window+0x48>
					wsect += fs->fsize;
 80056f8:	69a3      	ldr	r3, [r4, #24]
 80056fa:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80056fc:	2301      	movs	r3, #1
 80056fe:	462a      	mov	r2, r5
 8005700:	4639      	mov	r1, r7
 8005702:	7860      	ldrb	r0, [r4, #1]
 8005704:	f7fe fac6 	bl	8003c94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005708:	3e01      	subs	r6, #1
 800570a:	e7f3      	b.n	80056f4 <sync_window+0x30>
	FRESULT res = FR_OK;
 800570c:	2000      	movs	r0, #0
 800570e:	e7dd      	b.n	80056cc <sync_window+0x8>
			res = FR_DISK_ERR;
 8005710:	2001      	movs	r0, #1
 8005712:	e7db      	b.n	80056cc <sync_window+0x8>
	FRESULT res = FR_OK;
 8005714:	2000      	movs	r0, #0
 8005716:	e7d9      	b.n	80056cc <sync_window+0x8>

08005718 <move_window>:
{
 8005718:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800571a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800571c:	428b      	cmp	r3, r1
 800571e:	d012      	beq.n	8005746 <move_window+0x2e>
 8005720:	4604      	mov	r4, r0
 8005722:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8005724:	f7ff ffce 	bl	80056c4 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005728:	4606      	mov	r6, r0
 800572a:	b968      	cbnz	r0, 8005748 <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800572c:	2301      	movs	r3, #1
 800572e:	462a      	mov	r2, r5
 8005730:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8005734:	7860      	ldrb	r0, [r4, #1]
 8005736:	f7fe faa8 	bl	8003c8a <disk_read>
 800573a:	b110      	cbz	r0, 8005742 <move_window+0x2a>
				res = FR_DISK_ERR;
 800573c:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800573e:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 8005742:	62e5      	str	r5, [r4, #44]	; 0x2c
 8005744:	e000      	b.n	8005748 <move_window+0x30>
	FRESULT res = FR_OK;
 8005746:	2600      	movs	r6, #0
}
 8005748:	4630      	mov	r0, r6
 800574a:	bd70      	pop	{r4, r5, r6, pc}

0800574c <check_fs>:
{
 800574c:	b510      	push	{r4, lr}
 800574e:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005750:	2300      	movs	r3, #0
 8005752:	70c3      	strb	r3, [r0, #3]
 8005754:	f04f 33ff 	mov.w	r3, #4294967295
 8005758:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800575a:	f7ff ffdd 	bl	8005718 <move_window>
 800575e:	b9d8      	cbnz	r0, 8005798 <check_fs+0x4c>
	if (ld_word(&fs->win[BS_55AA]) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005760:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8005764:	f7ff fe16 	bl	8005394 <ld_word>
 8005768:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800576c:	4298      	cmp	r0, r3
 800576e:	d115      	bne.n	800579c <check_fs+0x50>
	if ((ld_dword(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005770:	f104 0066 	add.w	r0, r4, #102	; 0x66
 8005774:	f7ff fe13 	bl	800539e <ld_dword>
 8005778:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800577c:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <check_fs+0x5c>)
 800577e:	4298      	cmp	r0, r3
 8005780:	d00e      	beq.n	80057a0 <check_fs+0x54>
	if ((ld_dword(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005782:	f104 0082 	add.w	r0, r4, #130	; 0x82
 8005786:	f7ff fe0a 	bl	800539e <ld_dword>
 800578a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800578e:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <check_fs+0x5c>)
 8005790:	4298      	cmp	r0, r3
 8005792:	d107      	bne.n	80057a4 <check_fs+0x58>
 8005794:	2000      	movs	r0, #0
 8005796:	e002      	b.n	800579e <check_fs+0x52>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005798:	2004      	movs	r0, #4
 800579a:	e000      	b.n	800579e <check_fs+0x52>
	if (ld_word(&fs->win[BS_55AA]) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800579c:	2003      	movs	r0, #3
}
 800579e:	bd10      	pop	{r4, pc}
	if ((ld_dword(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80057a0:	2000      	movs	r0, #0
 80057a2:	e7fc      	b.n	800579e <check_fs+0x52>
	return 2;
 80057a4:	2002      	movs	r0, #2
 80057a6:	e7fa      	b.n	800579e <check_fs+0x52>
 80057a8:	00544146 	.word	0x00544146

080057ac <find_volume>:
{
 80057ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b0:	b084      	sub	sp, #16
 80057b2:	460f      	mov	r7, r1
 80057b4:	4616      	mov	r6, r2
	*rfs = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 80057ba:	f7ff ff3f 	bl	800563c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80057be:	1e05      	subs	r5, r0, #0
 80057c0:	f2c0 8141 	blt.w	8005a46 <find_volume+0x29a>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80057c4:	4bb5      	ldr	r3, [pc, #724]	; (8005a9c <find_volume+0x2f0>)
 80057c6:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80057ca:	2c00      	cmp	r4, #0
 80057cc:	f000 813f 	beq.w	8005a4e <find_volume+0x2a2>
	*rfs = fs;							/* Return pointer to the file system object */
 80057d0:	603c      	str	r4, [r7, #0]
	mode &= ~FA_READ;					/* Desired access mode, write access or not */
 80057d2:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80057d6:	7823      	ldrb	r3, [r4, #0]
 80057d8:	b173      	cbz	r3, 80057f8 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 80057da:	7860      	ldrb	r0, [r4, #1]
 80057dc:	f7fe fa50 	bl	8003c80 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80057e0:	f010 0f01 	tst.w	r0, #1
 80057e4:	d108      	bne.n	80057f8 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80057e6:	2e00      	cmp	r6, #0
 80057e8:	f000 8133 	beq.w	8005a52 <find_volume+0x2a6>
 80057ec:	f010 0f04 	tst.w	r0, #4
 80057f0:	f040 8131 	bne.w	8005a56 <find_volume+0x2aa>
			return FR_OK;				/* The file system object is valid */
 80057f4:	2000      	movs	r0, #0
 80057f6:	e127      	b.n	8005a48 <find_volume+0x29c>
	fs->fs_type = 0;					/* Clear the file system object */
 80057f8:	2300      	movs	r3, #0
 80057fa:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80057fc:	b2e8      	uxtb	r0, r5
 80057fe:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005800:	f7fe fa2e 	bl	8003c60 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005804:	f010 0f01 	tst.w	r0, #1
 8005808:	f040 8127 	bne.w	8005a5a <find_volume+0x2ae>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800580c:	b11e      	cbz	r6, 8005816 <find_volume+0x6a>
 800580e:	f010 0f04 	tst.w	r0, #4
 8005812:	f040 8124 	bne.w	8005a5e <find_volume+0x2b2>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005816:	2100      	movs	r1, #0
 8005818:	4620      	mov	r0, r4
 800581a:	f7ff ff97 	bl	800574c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol))) {	/* Not an FAT boot sector or forced partition number */
 800581e:	2802      	cmp	r0, #2
 8005820:	f000 80b3 	beq.w	800598a <find_volume+0x1de>
	bsect = 0;
 8005824:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005826:	2804      	cmp	r0, #4
 8005828:	f000 811b 	beq.w	8005a62 <find_volume+0x2b6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800582c:	2801      	cmp	r0, #1
 800582e:	f200 811a 	bhi.w	8005a66 <find_volume+0x2ba>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005832:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8005836:	f7ff fdad 	bl	8005394 <ld_word>
 800583a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800583e:	f040 8114 	bne.w	8005a6a <find_volume+0x2be>
		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
 8005842:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8005846:	f7ff fda5 	bl	8005394 <ld_word>
 800584a:	4607      	mov	r7, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800584c:	b920      	cbnz	r0, 8005858 <find_volume+0xac>
 800584e:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8005852:	f7ff fda4 	bl	800539e <ld_dword>
 8005856:	4607      	mov	r7, r0
		fs->fsize = fasize;
 8005858:	61a7      	str	r7, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
 800585a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800585e:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005860:	1e53      	subs	r3, r2, #1
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b01      	cmp	r3, #1
 8005866:	f200 8102 	bhi.w	8005a6e <find_volume+0x2c2>
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800586a:	fb07 f502 	mul.w	r5, r7, r2
		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
 800586e:	f894 803d 	ldrb.w	r8, [r4, #61]	; 0x3d
 8005872:	f8a4 800a 	strh.w	r8, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005876:	f1b8 0f00 	cmp.w	r8, #0
 800587a:	f000 80fa 	beq.w	8005a72 <find_volume+0x2c6>
 800587e:	f108 33ff 	add.w	r3, r8, #4294967295
 8005882:	ea18 0f03 	tst.w	r8, r3
 8005886:	f040 80f6 	bne.w	8005a76 <find_volume+0x2ca>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800588a:	f104 0041 	add.w	r0, r4, #65	; 0x41
 800588e:	f7ff fd81 	bl	8005394 <ld_word>
 8005892:	4682      	mov	sl, r0
 8005894:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005896:	f010 0f0f 	tst.w	r0, #15
 800589a:	f040 80ee 	bne.w	8005a7a <find_volume+0x2ce>
		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 800589e:	f104 0043 	add.w	r0, r4, #67	; 0x43
 80058a2:	f7ff fd77 	bl	8005394 <ld_word>
 80058a6:	4681      	mov	r9, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80058a8:	b920      	cbnz	r0, 80058b4 <find_volume+0x108>
 80058aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058ae:	f7ff fd76 	bl	800539e <ld_dword>
 80058b2:	4681      	mov	r9, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80058b4:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 80058b8:	f7ff fd6c 	bl	8005394 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
 80058bc:	4601      	mov	r1, r0
 80058be:	2800      	cmp	r0, #0
 80058c0:	f000 80dd 	beq.w	8005a7e <find_volume+0x2d2>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80058c4:	1942      	adds	r2, r0, r5
 80058c6:	eb02 121a 	add.w	r2, r2, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80058ca:	4591      	cmp	r9, r2
 80058cc:	f0c0 80d9 	bcc.w	8005a82 <find_volume+0x2d6>
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80058d0:	eba9 0302 	sub.w	r3, r9, r2
 80058d4:	fbb3 f3f8 	udiv	r3, r3, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 80d4 	beq.w	8005a86 <find_volume+0x2da>
		if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80058de:	f640 70f5 	movw	r0, #4085	; 0xff5
 80058e2:	4283      	cmp	r3, r0
 80058e4:	d869      	bhi.n	80059ba <find_volume+0x20e>
		fmt = FS_FAT12;
 80058e6:	f04f 0901 	mov.w	r9, #1
		if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80058ea:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 80058ee:	4283      	cmp	r3, r0
 80058f0:	d901      	bls.n	80058f6 <find_volume+0x14a>
 80058f2:	f04f 0903 	mov.w	r9, #3
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80058f6:	f103 0802 	add.w	r8, r3, #2
 80058fa:	f8c4 8014 	str.w	r8, [r4, #20]
		fs->volbase = bsect;								/* Volume start sector */
 80058fe:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005900:	198b      	adds	r3, r1, r6
 8005902:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;						/* Data start sector */
 8005904:	4432      	add	r2, r6
 8005906:	62a2      	str	r2, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005908:	f1b9 0f03 	cmp.w	r9, #3
 800590c:	d058      	beq.n	80059c0 <find_volume+0x214>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800590e:	f1ba 0f00 	cmp.w	sl, #0
 8005912:	f000 80be 	beq.w	8005a92 <find_volume+0x2e6>
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005916:	442b      	add	r3, r5
 8005918:	6263      	str	r3, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800591a:	f1b9 0f02 	cmp.w	r9, #2
 800591e:	d060      	beq.n	80059e2 <find_volume+0x236>
 8005920:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 8005924:	f008 0301 	and.w	r3, r8, #1
 8005928:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800592c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005930:	ebb7 2f53 	cmp.w	r7, r3, lsr #9
 8005934:	f0c0 80af 	bcc.w	8005a96 <find_volume+0x2ea>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;
 8005938:	f04f 33ff 	mov.w	r3, #4294967295
 800593c:	6123      	str	r3, [r4, #16]
 800593e:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 8005940:	2380      	movs	r3, #128	; 0x80
 8005942:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005944:	f1b9 0f03 	cmp.w	r9, #3
 8005948:	d04e      	beq.n	80059e8 <find_volume+0x23c>
	fs->fs_type = fmt;	/* FAT sub-type */
 800594a:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;	/* File system mount ID */
 800594e:	4a54      	ldr	r2, [pc, #336]	; (8005aa0 <find_volume+0x2f4>)
 8005950:	8813      	ldrh	r3, [r2, #0]
 8005952:	3301      	adds	r3, #1
 8005954:	b29b      	uxth	r3, r3
 8005956:	8013      	strh	r3, [r2, #0]
 8005958:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 800595a:	2000      	movs	r0, #0
 800595c:	e074      	b.n	8005a48 <find_volume+0x29c>
			br[i] = pt[4] ? ld_dword(&pt[8]) : 0;
 800595e:	2000      	movs	r0, #0
 8005960:	ab04      	add	r3, sp, #16
 8005962:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8005966:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800596a:	3501      	adds	r5, #1
 800596c:	2d03      	cmp	r5, #3
 800596e:	d80e      	bhi.n	800598e <find_volume+0x1e2>
			pt = fs->win + MBR_Table + i * SZ_PTE;
 8005970:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8005974:	012b      	lsls	r3, r5, #4
 8005976:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800597a:	4418      	add	r0, r3
			br[i] = pt[4] ? ld_dword(&pt[8]) : 0;
 800597c:	7903      	ldrb	r3, [r0, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0ed      	beq.n	800595e <find_volume+0x1b2>
 8005982:	3008      	adds	r0, #8
 8005984:	f7ff fd0b 	bl	800539e <ld_dword>
 8005988:	e7ea      	b.n	8005960 <find_volume+0x1b4>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800598a:	2500      	movs	r5, #0
 800598c:	e7ee      	b.n	800596c <find_volume+0x1c0>
 800598e:	2500      	movs	r5, #0
 8005990:	e00a      	b.n	80059a8 <find_volume+0x1fc>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005992:	4631      	mov	r1, r6
 8005994:	4620      	mov	r0, r4
 8005996:	f7ff fed9 	bl	800574c <check_fs>
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
 800599a:	2801      	cmp	r0, #1
 800599c:	f67f af43 	bls.w	8005826 <find_volume+0x7a>
 80059a0:	3501      	adds	r5, #1
 80059a2:	2d03      	cmp	r5, #3
 80059a4:	f63f af3f 	bhi.w	8005826 <find_volume+0x7a>
			bsect = br[i];
 80059a8:	ab04      	add	r3, sp, #16
 80059aa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80059ae:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80059b2:	2e00      	cmp	r6, #0
 80059b4:	d1ed      	bne.n	8005992 <find_volume+0x1e6>
 80059b6:	2003      	movs	r0, #3
 80059b8:	e7f2      	b.n	80059a0 <find_volume+0x1f4>
		if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80059ba:	f04f 0902 	mov.w	r9, #2
 80059be:	e794      	b.n	80058ea <find_volume+0x13e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80059c0:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 80059c4:	f7ff fce6 	bl	8005394 <ld_word>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d15e      	bne.n	8005a8a <find_volume+0x2de>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80059cc:	f1ba 0f00 	cmp.w	sl, #0
 80059d0:	d15d      	bne.n	8005a8e <find_volume+0x2e2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80059d2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059d6:	f7ff fce2 	bl	800539e <ld_dword>
 80059da:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80059dc:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80059e0:	e7a4      	b.n	800592c <find_volume+0x180>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80059e2:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80059e6:	e7a1      	b.n	800592c <find_volume+0x180>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80059e8:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80059ec:	f7ff fcd2 	bl	8005394 <ld_word>
 80059f0:	2801      	cmp	r0, #1
 80059f2:	d1aa      	bne.n	800594a <find_volume+0x19e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80059f4:	1c71      	adds	r1, r6, #1
 80059f6:	4620      	mov	r0, r4
 80059f8:	f7ff fe8e 	bl	8005718 <move_window>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d1a4      	bne.n	800594a <find_volume+0x19e>
			fs->fsi_flag = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005a04:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8005a08:	f7ff fcc4 	bl	8005394 <ld_word>
 8005a0c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005a10:	4298      	cmp	r0, r3
 8005a12:	d19a      	bne.n	800594a <find_volume+0x19e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005a14:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8005a18:	f7ff fcc1 	bl	800539e <ld_dword>
 8005a1c:	4b21      	ldr	r3, [pc, #132]	; (8005aa4 <find_volume+0x2f8>)
 8005a1e:	4298      	cmp	r0, r3
 8005a20:	d193      	bne.n	800594a <find_volume+0x19e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005a22:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8005a26:	f7ff fcba 	bl	800539e <ld_dword>
 8005a2a:	4b1f      	ldr	r3, [pc, #124]	; (8005aa8 <find_volume+0x2fc>)
 8005a2c:	4298      	cmp	r0, r3
 8005a2e:	d18c      	bne.n	800594a <find_volume+0x19e>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005a30:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8005a34:	f7ff fcb3 	bl	800539e <ld_dword>
 8005a38:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005a3a:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8005a3e:	f7ff fcae 	bl	800539e <ld_dword>
 8005a42:	60e0      	str	r0, [r4, #12]
 8005a44:	e781      	b.n	800594a <find_volume+0x19e>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005a46:	200b      	movs	r0, #11
}
 8005a48:	b004      	add	sp, #16
 8005a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005a4e:	200c      	movs	r0, #12
 8005a50:	e7fa      	b.n	8005a48 <find_volume+0x29c>
			return FR_OK;				/* The file system object is valid */
 8005a52:	2000      	movs	r0, #0
 8005a54:	e7f8      	b.n	8005a48 <find_volume+0x29c>
				return FR_WRITE_PROTECTED;
 8005a56:	200a      	movs	r0, #10
 8005a58:	e7f6      	b.n	8005a48 <find_volume+0x29c>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005a5a:	2003      	movs	r0, #3
 8005a5c:	e7f4      	b.n	8005a48 <find_volume+0x29c>
		return FR_WRITE_PROTECTED;
 8005a5e:	200a      	movs	r0, #10
 8005a60:	e7f2      	b.n	8005a48 <find_volume+0x29c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005a62:	2001      	movs	r0, #1
 8005a64:	e7f0      	b.n	8005a48 <find_volume+0x29c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005a66:	200d      	movs	r0, #13
 8005a68:	e7ee      	b.n	8005a48 <find_volume+0x29c>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005a6a:	200d      	movs	r0, #13
 8005a6c:	e7ec      	b.n	8005a48 <find_volume+0x29c>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005a6e:	200d      	movs	r0, #13
 8005a70:	e7ea      	b.n	8005a48 <find_volume+0x29c>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005a72:	200d      	movs	r0, #13
 8005a74:	e7e8      	b.n	8005a48 <find_volume+0x29c>
 8005a76:	200d      	movs	r0, #13
 8005a78:	e7e6      	b.n	8005a48 <find_volume+0x29c>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005a7a:	200d      	movs	r0, #13
 8005a7c:	e7e4      	b.n	8005a48 <find_volume+0x29c>
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
 8005a7e:	200d      	movs	r0, #13
 8005a80:	e7e2      	b.n	8005a48 <find_volume+0x29c>
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005a82:	200d      	movs	r0, #13
 8005a84:	e7e0      	b.n	8005a48 <find_volume+0x29c>
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
 8005a86:	200d      	movs	r0, #13
 8005a88:	e7de      	b.n	8005a48 <find_volume+0x29c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005a8a:	200d      	movs	r0, #13
 8005a8c:	e7dc      	b.n	8005a48 <find_volume+0x29c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8005a8e:	200d      	movs	r0, #13
 8005a90:	e7da      	b.n	8005a48 <find_volume+0x29c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005a92:	200d      	movs	r0, #13
 8005a94:	e7d8      	b.n	8005a48 <find_volume+0x29c>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005a96:	200d      	movs	r0, #13
 8005a98:	e7d6      	b.n	8005a48 <find_volume+0x29c>
 8005a9a:	bf00      	nop
 8005a9c:	20000fec 	.word	0x20000fec
 8005aa0:	20000ff0 	.word	0x20000ff0
 8005aa4:	41615252 	.word	0x41615252
 8005aa8:	61417272 	.word	0x61417272

08005aac <get_fat>:
{
 8005aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8005aae:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005ab0:	2901      	cmp	r1, #1
 8005ab2:	d952      	bls.n	8005b5a <get_fat+0xae>
 8005ab4:	6973      	ldr	r3, [r6, #20]
 8005ab6:	428b      	cmp	r3, r1
 8005ab8:	d951      	bls.n	8005b5e <get_fat+0xb2>
 8005aba:	460c      	mov	r4, r1
		switch (fs->fs_type) {
 8005abc:	7833      	ldrb	r3, [r6, #0]
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d02b      	beq.n	8005b1a <get_fat+0x6e>
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d038      	beq.n	8005b38 <get_fat+0x8c>
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d001      	beq.n	8005ace <get_fat+0x22>
			val = 1;	/* Internal error */
 8005aca:	2001      	movs	r0, #1
 8005acc:	e046      	b.n	8005b5c <get_fat+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 8005ace:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ad2:	6a31      	ldr	r1, [r6, #32]
 8005ad4:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 8005ad8:	4630      	mov	r0, r6
 8005ada:	f7ff fe1d 	bl	8005718 <move_window>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d13f      	bne.n	8005b62 <get_fat+0xb6>
			wc = fs->win[bc++ % SS(fs)];
 8005ae2:	1c6f      	adds	r7, r5, #1
 8005ae4:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8005ae8:	4435      	add	r5, r6
 8005aea:	f895 5030 	ldrb.w	r5, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005aee:	6a31      	ldr	r1, [r6, #32]
 8005af0:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8005af4:	4630      	mov	r0, r6
 8005af6:	f7ff fe0f 	bl	8005718 <move_window>
 8005afa:	bba8      	cbnz	r0, 8005b68 <get_fat+0xbc>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005afc:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8005b00:	443e      	add	r6, r7
 8005b02:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8005b06:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005b0a:	f014 0f01 	tst.w	r4, #1
 8005b0e:	d001      	beq.n	8005b14 <get_fat+0x68>
 8005b10:	0900      	lsrs	r0, r0, #4
 8005b12:	e023      	b.n	8005b5c <get_fat+0xb0>
 8005b14:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8005b18:	e020      	b.n	8005b5c <get_fat+0xb0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005b1a:	6a31      	ldr	r1, [r6, #32]
 8005b1c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8005b20:	4630      	mov	r0, r6
 8005b22:	f7ff fdf9 	bl	8005718 <move_window>
 8005b26:	bb10      	cbnz	r0, 8005b6e <get_fat+0xc2>
			val = ld_word(&fs->win[clst * 2 % SS(fs)]);
 8005b28:	0060      	lsls	r0, r4, #1
 8005b2a:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
 8005b2e:	3030      	adds	r0, #48	; 0x30
 8005b30:	4430      	add	r0, r6
 8005b32:	f7ff fc2f 	bl	8005394 <ld_word>
			break;
 8005b36:	e011      	b.n	8005b5c <get_fat+0xb0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005b38:	6a31      	ldr	r1, [r6, #32]
 8005b3a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8005b3e:	4630      	mov	r0, r6
 8005b40:	f7ff fdea 	bl	8005718 <move_window>
 8005b44:	b9b0      	cbnz	r0, 8005b74 <get_fat+0xc8>
			val = ld_dword(&fs->win[clst * 4 % SS(fs)]) & 0x0FFFFFFF;
 8005b46:	00a0      	lsls	r0, r4, #2
 8005b48:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
 8005b4c:	3030      	adds	r0, #48	; 0x30
 8005b4e:	4430      	add	r0, r6
 8005b50:	f7ff fc25 	bl	800539e <ld_dword>
 8005b54:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8005b58:	e000      	b.n	8005b5c <get_fat+0xb0>
		val = 1;	/* Internal error */
 8005b5a:	2001      	movs	r0, #1
}
 8005b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8005b5e:	2001      	movs	r0, #1
 8005b60:	e7fc      	b.n	8005b5c <get_fat+0xb0>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005b62:	f04f 30ff 	mov.w	r0, #4294967295
 8005b66:	e7f9      	b.n	8005b5c <get_fat+0xb0>
 8005b68:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6c:	e7f6      	b.n	8005b5c <get_fat+0xb0>
 8005b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b72:	e7f3      	b.n	8005b5c <get_fat+0xb0>
 8005b74:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 8005b78:	e7f0      	b.n	8005b5c <get_fat+0xb0>

08005b7a <dir_sdi>:
{
 8005b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8005b7e:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005b80:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005b84:	d23b      	bcs.n	8005bfe <dir_sdi+0x84>
 8005b86:	4606      	mov	r6, r0
 8005b88:	460d      	mov	r5, r1
 8005b8a:	f011 0f1f 	tst.w	r1, #31
 8005b8e:	d139      	bne.n	8005c04 <dir_sdi+0x8a>
	dp->dptr = ofs;				/* Set current offset */
 8005b90:	6131      	str	r1, [r6, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005b92:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005b94:	b91c      	cbnz	r4, 8005b9e <dir_sdi+0x24>
 8005b96:	783b      	ldrb	r3, [r7, #0]
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d900      	bls.n	8005b9e <dir_sdi+0x24>
		clst = fs->dirbase;
 8005b9c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005b9e:	b994      	cbnz	r4, 8005bc6 <dir_sdi+0x4c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005ba0:	893b      	ldrh	r3, [r7, #8]
 8005ba2:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8005ba6:	d92f      	bls.n	8005c08 <dir_sdi+0x8e>
		dp->sect = fs->dirbase;
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	61b3      	str	r3, [r6, #24]
	dp->clust = clst;					/* Current cluster# */
 8005bac:	6174      	str	r4, [r6, #20]
	if (!dp->sect) return FR_INT_ERR;
 8005bae:	69b3      	ldr	r3, [r6, #24]
 8005bb0:	b393      	cbz	r3, 8005c18 <dir_sdi+0x9e>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005bb2:	eb03 2355 	add.w	r3, r3, r5, lsr #9
 8005bb6:	61b3      	str	r3, [r6, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005bb8:	3730      	adds	r7, #48	; 0x30
 8005bba:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8005bbe:	443d      	add	r5, r7
 8005bc0:	61f5      	str	r5, [r6, #28]
	return FR_OK;
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	e01c      	b.n	8005c00 <dir_sdi+0x86>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005bc6:	f8b7 800a 	ldrh.w	r8, [r7, #10]
 8005bca:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8005bce:	4545      	cmp	r5, r8
 8005bd0:	d30f      	bcc.n	8005bf2 <dir_sdi+0x78>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	f7ff ff69 	bl	8005aac <get_fat>
 8005bda:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005bdc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005be0:	d014      	beq.n	8005c0c <dir_sdi+0x92>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005be2:	2801      	cmp	r0, #1
 8005be4:	d914      	bls.n	8005c10 <dir_sdi+0x96>
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	4283      	cmp	r3, r0
 8005bea:	d913      	bls.n	8005c14 <dir_sdi+0x9a>
			ofs -= csz;
 8005bec:	eba5 0508 	sub.w	r5, r5, r8
 8005bf0:	e7ed      	b.n	8005bce <dir_sdi+0x54>
		dp->sect = clust2sect(fs, clst);
 8005bf2:	4621      	mov	r1, r4
 8005bf4:	4638      	mov	r0, r7
 8005bf6:	f7ff fc10 	bl	800541a <clust2sect>
 8005bfa:	61b0      	str	r0, [r6, #24]
 8005bfc:	e7d6      	b.n	8005bac <dir_sdi+0x32>
		return FR_INT_ERR;
 8005bfe:	2002      	movs	r0, #2
}
 8005c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 8005c04:	2002      	movs	r0, #2
 8005c06:	e7fb      	b.n	8005c00 <dir_sdi+0x86>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005c08:	2002      	movs	r0, #2
 8005c0a:	e7f9      	b.n	8005c00 <dir_sdi+0x86>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005c0c:	2001      	movs	r0, #1
 8005c0e:	e7f7      	b.n	8005c00 <dir_sdi+0x86>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005c10:	2002      	movs	r0, #2
 8005c12:	e7f5      	b.n	8005c00 <dir_sdi+0x86>
 8005c14:	2002      	movs	r0, #2
 8005c16:	e7f3      	b.n	8005c00 <dir_sdi+0x86>
	if (!dp->sect) return FR_INT_ERR;
 8005c18:	2002      	movs	r0, #2
 8005c1a:	e7f1      	b.n	8005c00 <dir_sdi+0x86>

08005c1c <put_fat>:
{
 8005c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005c20:	2901      	cmp	r1, #1
 8005c22:	d97c      	bls.n	8005d1e <put_fat+0x102>
 8005c24:	6943      	ldr	r3, [r0, #20]
 8005c26:	428b      	cmp	r3, r1
 8005c28:	d97b      	bls.n	8005d22 <put_fat+0x106>
 8005c2a:	4616      	mov	r6, r2
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	4605      	mov	r5, r0
		switch (fs->fs_type) {
 8005c30:	7803      	ldrb	r3, [r0, #0]
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d047      	beq.n	8005cc6 <put_fat+0xaa>
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d057      	beq.n	8005cea <put_fat+0xce>
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d001      	beq.n	8005c42 <put_fat+0x26>
	FRESULT res = FR_INT_ERR;
 8005c3e:	2702      	movs	r7, #2
 8005c40:	e070      	b.n	8005d24 <put_fat+0x108>
			bc = (UINT)clst; bc += bc / 2;
 8005c42:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005c46:	6a01      	ldr	r1, [r0, #32]
 8005c48:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8005c4c:	f7ff fd64 	bl	8005718 <move_window>
			if (res != FR_OK) break;
 8005c50:	4607      	mov	r7, r0
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d166      	bne.n	8005d24 <put_fat+0x108>
			p = &fs->win[bc++ % SS(fs)];
 8005c56:	f108 0901 	add.w	r9, r8, #1
 8005c5a:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005c5e:	f014 0401 	ands.w	r4, r4, #1
 8005c62:	d023      	beq.n	8005cac <put_fat+0x90>
 8005c64:	eb05 0308 	add.w	r3, r5, r8
 8005c68:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8005c6c:	f003 030f 	and.w	r3, r3, #15
 8005c70:	0132      	lsls	r2, r6, #4
 8005c72:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8005c76:	4313      	orrs	r3, r2
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	44a8      	add	r8, r5
 8005c7c:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
			fs->wflag = 1;
 8005c80:	2301      	movs	r3, #1
 8005c82:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005c84:	6a29      	ldr	r1, [r5, #32]
 8005c86:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f7ff fd44 	bl	8005718 <move_window>
			if (res != FR_OK) break;
 8005c90:	4607      	mov	r7, r0
 8005c92:	2800      	cmp	r0, #0
 8005c94:	d146      	bne.n	8005d24 <put_fat+0x108>
			p = &fs->win[bc % SS(fs)];
 8005c96:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005c9a:	b14c      	cbz	r4, 8005cb0 <put_fat+0x94>
 8005c9c:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8005ca0:	44a9      	add	r9, r5
 8005ca2:	f889 2030 	strb.w	r2, [r9, #48]	; 0x30
			fs->wflag = 1;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	70eb      	strb	r3, [r5, #3]
			break;
 8005caa:	e03b      	b.n	8005d24 <put_fat+0x108>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005cac:	b2f3      	uxtb	r3, r6
 8005cae:	e7e4      	b.n	8005c7a <put_fat+0x5e>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005cb0:	eb05 0309 	add.w	r3, r5, r9
 8005cb4:	f993 2030 	ldrsb.w	r2, [r3, #48]	; 0x30
 8005cb8:	f022 020f 	bic.w	r2, r2, #15
 8005cbc:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8005cc0:	4332      	orrs	r2, r6
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	e7ec      	b.n	8005ca0 <put_fat+0x84>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005cc6:	6a01      	ldr	r1, [r0, #32]
 8005cc8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8005ccc:	f7ff fd24 	bl	8005718 <move_window>
			if (res != FR_OK) break;
 8005cd0:	4607      	mov	r7, r0
 8005cd2:	bb38      	cbnz	r0, 8005d24 <put_fat+0x108>
			st_word(&fs->win[clst * 2 % SS(fs)], (WORD)val);
 8005cd4:	0060      	lsls	r0, r4, #1
 8005cd6:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
 8005cda:	3030      	adds	r0, #48	; 0x30
 8005cdc:	b2b1      	uxth	r1, r6
 8005cde:	4428      	add	r0, r5
 8005ce0:	f7ff fb68 	bl	80053b4 <st_word>
			fs->wflag = 1;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	70eb      	strb	r3, [r5, #3]
			break;
 8005ce8:	e01c      	b.n	8005d24 <put_fat+0x108>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005cea:	6a01      	ldr	r1, [r0, #32]
 8005cec:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8005cf0:	f7ff fd12 	bl	8005718 <move_window>
			if (res != FR_OK) break;
 8005cf4:	4607      	mov	r7, r0
 8005cf6:	b9a8      	cbnz	r0, 8005d24 <put_fat+0x108>
				val = (val & 0x0FFFFFFF) | (ld_dword(&fs->win[clst * 4 % SS(fs)]) & 0xF0000000);
 8005cf8:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 8005cfc:	00a4      	lsls	r4, r4, #2
 8005cfe:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8005d02:	3430      	adds	r4, #48	; 0x30
 8005d04:	442c      	add	r4, r5
 8005d06:	4620      	mov	r0, r4
 8005d08:	f7ff fb49 	bl	800539e <ld_dword>
 8005d0c:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(&fs->win[clst * 4 % SS(fs)], val);
 8005d10:	4331      	orrs	r1, r6
 8005d12:	4620      	mov	r0, r4
 8005d14:	f7ff fb52 	bl	80053bc <st_dword>
			fs->wflag = 1;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	70eb      	strb	r3, [r5, #3]
			break;
 8005d1c:	e002      	b.n	8005d24 <put_fat+0x108>
	FRESULT res = FR_INT_ERR;
 8005d1e:	2702      	movs	r7, #2
 8005d20:	e000      	b.n	8005d24 <put_fat+0x108>
 8005d22:	2702      	movs	r7, #2
}
 8005d24:	4638      	mov	r0, r7
 8005d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005d2a <create_chain>:
{
 8005d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d2e:	4607      	mov	r7, r0
	FATFS *fs = obj->fs;
 8005d30:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8005d32:	4688      	mov	r8, r1
 8005d34:	b931      	cbnz	r1, 8005d44 <create_chain+0x1a>
		scl = fs->last_clst;				/* Get suggested cluster to start at */
 8005d36:	68f5      	ldr	r5, [r6, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005d38:	b18d      	cbz	r5, 8005d5e <create_chain+0x34>
 8005d3a:	6973      	ldr	r3, [r6, #20]
 8005d3c:	42ab      	cmp	r3, r5
 8005d3e:	d80f      	bhi.n	8005d60 <create_chain+0x36>
 8005d40:	2501      	movs	r5, #1
 8005d42:	e00d      	b.n	8005d60 <create_chain+0x36>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005d44:	f7ff feb2 	bl	8005aac <get_fat>
 8005d48:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid value */
 8005d4a:	2801      	cmp	r0, #1
 8005d4c:	d947      	bls.n	8005dde <create_chain+0xb4>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005d4e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005d52:	d049      	beq.n	8005de8 <create_chain+0xbe>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005d54:	6972      	ldr	r2, [r6, #20]
 8005d56:	4282      	cmp	r2, r0
 8005d58:	d846      	bhi.n	8005de8 <create_chain+0xbe>
		scl = clst;
 8005d5a:	4645      	mov	r5, r8
 8005d5c:	e000      	b.n	8005d60 <create_chain+0x36>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005d5e:	2501      	movs	r5, #1
		ncl = scl;	/* Start cluster */
 8005d60:	462c      	mov	r4, r5
 8005d62:	e00c      	b.n	8005d7e <create_chain+0x54>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005d64:	4621      	mov	r1, r4
 8005d66:	4638      	mov	r0, r7
 8005d68:	f7ff fea0 	bl	8005aac <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	b170      	cbz	r0, 8005d8e <create_chain+0x64>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005d70:	2801      	cmp	r0, #1
 8005d72:	d039      	beq.n	8005de8 <create_chain+0xbe>
 8005d74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005d78:	d036      	beq.n	8005de8 <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 8005d7a:	42ac      	cmp	r4, r5
 8005d7c:	d033      	beq.n	8005de6 <create_chain+0xbc>
			ncl++;							/* Next cluster */
 8005d7e:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005d80:	6973      	ldr	r3, [r6, #20]
 8005d82:	42a3      	cmp	r3, r4
 8005d84:	d8ee      	bhi.n	8005d64 <create_chain+0x3a>
				if (ncl > scl) return 0;	/* No free cluster */
 8005d86:	2d01      	cmp	r5, #1
 8005d88:	d92b      	bls.n	8005de2 <create_chain+0xb8>
				ncl = 2;
 8005d8a:	2402      	movs	r4, #2
 8005d8c:	e7ea      	b.n	8005d64 <create_chain+0x3a>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d92:	4621      	mov	r1, r4
 8005d94:	4630      	mov	r0, r6
 8005d96:	f7ff ff41 	bl	8005c1c <put_fat>
		if (res == FR_OK && clst) {
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	b910      	cbnz	r0, 8005da4 <create_chain+0x7a>
 8005d9e:	f1b8 0f00 	cmp.w	r8, #0
 8005da2:	d10e      	bne.n	8005dc2 <create_chain+0x98>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005da4:	b9a3      	cbnz	r3, 8005dd0 <create_chain+0xa6>
		fs->last_clst = ncl;
 8005da6:	60f4      	str	r4, [r6, #12]
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
 8005da8:	6932      	ldr	r2, [r6, #16]
 8005daa:	6973      	ldr	r3, [r6, #20]
 8005dac:	3b02      	subs	r3, #2
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d201      	bcs.n	8005db6 <create_chain+0x8c>
 8005db2:	3a01      	subs	r2, #1
 8005db4:	6132      	str	r2, [r6, #16]
		fs->fsi_flag |= 1;
 8005db6:	7933      	ldrb	r3, [r6, #4]
 8005db8:	f043 0301 	orr.w	r3, r3, #1
 8005dbc:	7133      	strb	r3, [r6, #4]
 8005dbe:	4623      	mov	r3, r4
 8005dc0:	e012      	b.n	8005de8 <create_chain+0xbe>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005dc2:	4622      	mov	r2, r4
 8005dc4:	4641      	mov	r1, r8
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	f7ff ff28 	bl	8005c1c <put_fat>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	e7e9      	b.n	8005da4 <create_chain+0x7a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d001      	beq.n	8005dd8 <create_chain+0xae>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e007      	b.n	8005de8 <create_chain+0xbe>
 8005dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ddc:	e004      	b.n	8005de8 <create_chain+0xbe>
		if (cs < 2) return 1;				/* Invalid value */
 8005dde:	2301      	movs	r3, #1
 8005de0:	e002      	b.n	8005de8 <create_chain+0xbe>
				if (ncl > scl) return 0;	/* No free cluster */
 8005de2:	2300      	movs	r3, #0
 8005de4:	e000      	b.n	8005de8 <create_chain+0xbe>
			if (ncl == scl) return 0;		/* No free cluster */
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005dee <remove_chain>:
{
 8005dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df0:	460e      	mov	r6, r1
	FATFS *fs = obj->fs;
 8005df2:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005df4:	2901      	cmp	r1, #1
 8005df6:	d92e      	bls.n	8005e56 <remove_chain+0x68>
 8005df8:	4607      	mov	r7, r0
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	6963      	ldr	r3, [r4, #20]
 8005dfe:	42b3      	cmp	r3, r6
 8005e00:	d92b      	bls.n	8005e5a <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005e02:	b15a      	cbz	r2, 8005e1c <remove_chain+0x2e>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005e04:	f04f 32ff 	mov.w	r2, #4294967295
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f7ff ff07 	bl	8005c1c <put_fat>
		if (res != FR_OK) return res;
 8005e0e:	4602      	mov	r2, r0
 8005e10:	b120      	cbz	r0, 8005e1c <remove_chain+0x2e>
 8005e12:	e023      	b.n	8005e5c <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005e14:	6963      	ldr	r3, [r4, #20]
		clst = nxt;					/* Next cluster */
 8005e16:	462e      	mov	r6, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005e18:	42ab      	cmp	r3, r5
 8005e1a:	d91f      	bls.n	8005e5c <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005e1c:	4631      	mov	r1, r6
 8005e1e:	4638      	mov	r0, r7
 8005e20:	f7ff fe44 	bl	8005aac <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8005e24:	4605      	mov	r5, r0
 8005e26:	b1d8      	cbz	r0, 8005e60 <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005e28:	2801      	cmp	r0, #1
 8005e2a:	d01b      	beq.n	8005e64 <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005e2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005e30:	d01a      	beq.n	8005e68 <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005e32:	2200      	movs	r2, #0
 8005e34:	4631      	mov	r1, r6
 8005e36:	4620      	mov	r0, r4
 8005e38:	f7ff fef0 	bl	8005c1c <put_fat>
			if (res != FR_OK) return res;
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	b968      	cbnz	r0, 8005e5c <remove_chain+0x6e>
		if (fs->free_clst != 0xFFFFFFFF) {	/* Update FSINFO */
 8005e40:	6923      	ldr	r3, [r4, #16]
 8005e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e46:	d0e5      	beq.n	8005e14 <remove_chain+0x26>
			fs->free_clst++;
 8005e48:	3301      	adds	r3, #1
 8005e4a:	6123      	str	r3, [r4, #16]
			fs->fsi_flag |= 1;
 8005e4c:	7923      	ldrb	r3, [r4, #4]
 8005e4e:	f043 0301 	orr.w	r3, r3, #1
 8005e52:	7123      	strb	r3, [r4, #4]
 8005e54:	e7de      	b.n	8005e14 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005e56:	2202      	movs	r2, #2
 8005e58:	e000      	b.n	8005e5c <remove_chain+0x6e>
 8005e5a:	2202      	movs	r2, #2
}
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 8005e60:	2200      	movs	r2, #0
 8005e62:	e7fb      	b.n	8005e5c <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005e64:	2202      	movs	r2, #2
 8005e66:	e7f9      	b.n	8005e5c <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005e68:	2201      	movs	r2, #1
 8005e6a:	e7f7      	b.n	8005e5c <remove_chain+0x6e>

08005e6c <dir_next>:
{
 8005e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 8005e70:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005e72:	6905      	ldr	r5, [r0, #16]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005e74:	6983      	ldr	r3, [r0, #24]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d06d      	beq.n	8005f56 <dir_next+0xea>
 8005e7a:	3520      	adds	r5, #32
 8005e7c:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8005e80:	d26b      	bcs.n	8005f5a <dir_next+0xee>
 8005e82:	4688      	mov	r8, r1
 8005e84:	4604      	mov	r4, r0
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005e86:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8005e8a:	b93f      	cbnz	r7, 8005e9c <dir_next+0x30>
		dp->sect++;				/* Next sector */
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	6183      	str	r3, [r0, #24]
		if (!dp->clust) {		/* Static table */
 8005e90:	6941      	ldr	r1, [r0, #20]
 8005e92:	b971      	cbnz	r1, 8005eb2 <dir_next+0x46>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005e94:	8933      	ldrh	r3, [r6, #8]
 8005e96:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8005e9a:	d906      	bls.n	8005eaa <dir_next+0x3e>
	dp->dptr = ofs;						/* Current entry */
 8005e9c:	6125      	str	r5, [r4, #16]
	dp->dir = &fs->win[ofs % SS(fs)];	/* Pointer to the entry in the win[] */
 8005e9e:	3730      	adds	r7, #48	; 0x30
 8005ea0:	443e      	add	r6, r7
 8005ea2:	61e6      	str	r6, [r4, #28]
	return FR_OK;
 8005ea4:	2000      	movs	r0, #0
}
 8005ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				dp->sect = 0; return FR_NO_FILE;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	6183      	str	r3, [r0, #24]
 8005eae:	2004      	movs	r0, #4
 8005eb0:	e7f9      	b.n	8005ea6 <dir_next+0x3a>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005eb2:	8973      	ldrh	r3, [r6, #10]
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 8005eba:	d1ef      	bne.n	8005e9c <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005ebc:	f7ff fdf6 	bl	8005aac <get_fat>
 8005ec0:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005ec2:	2801      	cmp	r0, #1
 8005ec4:	d94b      	bls.n	8005f5e <dir_next+0xf2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005ec6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005eca:	d04a      	beq.n	8005f62 <dir_next+0xf6>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005ecc:	6973      	ldr	r3, [r6, #20]
 8005ece:	4283      	cmp	r3, r0
 8005ed0:	d839      	bhi.n	8005f46 <dir_next+0xda>
					if (!stretch) {								/* If no stretch, report EOT */
 8005ed2:	f1b8 0f00 	cmp.w	r8, #0
 8005ed6:	d011      	beq.n	8005efc <dir_next+0x90>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005ed8:	6961      	ldr	r1, [r4, #20]
 8005eda:	4620      	mov	r0, r4
 8005edc:	f7ff ff25 	bl	8005d2a <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005ee0:	4681      	mov	r9, r0
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d03f      	beq.n	8005f66 <dir_next+0xfa>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005ee6:	2801      	cmp	r0, #1
 8005ee8:	d03f      	beq.n	8005f6a <dir_next+0xfe>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005eea:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005eee:	d03e      	beq.n	8005f6e <dir_next+0x102>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	f7ff fbe7 	bl	80056c4 <sync_window>
 8005ef6:	b128      	cbz	r0, 8005f04 <dir_next+0x98>
 8005ef8:	2001      	movs	r0, #1
 8005efa:	e7d4      	b.n	8005ea6 <dir_next+0x3a>
						dp->sect = 0; return FR_NO_FILE;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61a3      	str	r3, [r4, #24]
 8005f00:	2004      	movs	r0, #4
 8005f02:	e7d0      	b.n	8005ea6 <dir_next+0x3a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f08:	2100      	movs	r1, #0
 8005f0a:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8005f0e:	f7ff fa68 	bl	80053e2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005f12:	4649      	mov	r1, r9
 8005f14:	4630      	mov	r0, r6
 8005f16:	f7ff fa80 	bl	800541a <clust2sect>
 8005f1a:	62f0      	str	r0, [r6, #44]	; 0x2c
 8005f1c:	f04f 0800 	mov.w	r8, #0
 8005f20:	8973      	ldrh	r3, [r6, #10]
 8005f22:	4598      	cmp	r8, r3
 8005f24:	d20b      	bcs.n	8005f3e <dir_next+0xd2>
						fs->wflag = 1;
 8005f26:	2301      	movs	r3, #1
 8005f28:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	f7ff fbca 	bl	80056c4 <sync_window>
 8005f30:	b9f8      	cbnz	r0, 8005f72 <dir_next+0x106>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005f32:	f108 0801 	add.w	r8, r8, #1
 8005f36:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8005f38:	3301      	adds	r3, #1
 8005f3a:	62f3      	str	r3, [r6, #44]	; 0x2c
 8005f3c:	e7f0      	b.n	8005f20 <dir_next+0xb4>
					fs->winsect -= n;							/* Restore window offset */
 8005f3e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8005f40:	eba3 0308 	sub.w	r3, r3, r8
 8005f44:	62f3      	str	r3, [r6, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8005f46:	f8c4 9014 	str.w	r9, [r4, #20]
				dp->sect = clust2sect(fs, clst);
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	f7ff fa64 	bl	800541a <clust2sect>
 8005f52:	61a0      	str	r0, [r4, #24]
 8005f54:	e7a2      	b.n	8005e9c <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005f56:	2004      	movs	r0, #4
 8005f58:	e7a5      	b.n	8005ea6 <dir_next+0x3a>
 8005f5a:	2004      	movs	r0, #4
 8005f5c:	e7a3      	b.n	8005ea6 <dir_next+0x3a>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005f5e:	2002      	movs	r0, #2
 8005f60:	e7a1      	b.n	8005ea6 <dir_next+0x3a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005f62:	2001      	movs	r0, #1
 8005f64:	e79f      	b.n	8005ea6 <dir_next+0x3a>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005f66:	2007      	movs	r0, #7
 8005f68:	e79d      	b.n	8005ea6 <dir_next+0x3a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005f6a:	2002      	movs	r0, #2
 8005f6c:	e79b      	b.n	8005ea6 <dir_next+0x3a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005f6e:	2001      	movs	r0, #1
 8005f70:	e799      	b.n	8005ea6 <dir_next+0x3a>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005f72:	2001      	movs	r0, #1
 8005f74:	e797      	b.n	8005ea6 <dir_next+0x3a>

08005f76 <dir_alloc>:
{
 8005f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f78:	4604      	mov	r4, r0
 8005f7a:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
 8005f7c:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8005f7e:	2100      	movs	r1, #0
 8005f80:	f7ff fdfb 	bl	8005b7a <dir_sdi>
	if (res == FR_OK) {
 8005f84:	4603      	mov	r3, r0
 8005f86:	b9c0      	cbnz	r0, 8005fba <dir_alloc+0x44>
		n = 0;
 8005f88:	2500      	movs	r5, #0
 8005f8a:	e008      	b.n	8005f9e <dir_alloc+0x28>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005f8c:	3501      	adds	r5, #1
 8005f8e:	42bd      	cmp	r5, r7
 8005f90:	d013      	beq.n	8005fba <dir_alloc+0x44>
			res = dir_next(dp, 1);
 8005f92:	2101      	movs	r1, #1
 8005f94:	4620      	mov	r0, r4
 8005f96:	f7ff ff69 	bl	8005e6c <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	b968      	cbnz	r0, 8005fba <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
 8005f9e:	69a1      	ldr	r1, [r4, #24]
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	f7ff fbb9 	bl	8005718 <move_window>
			if (res != FR_OK) break;
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	b938      	cbnz	r0, 8005fba <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005faa:	69e2      	ldr	r2, [r4, #28]
 8005fac:	7812      	ldrb	r2, [r2, #0]
 8005fae:	2ae5      	cmp	r2, #229	; 0xe5
 8005fb0:	d0ec      	beq.n	8005f8c <dir_alloc+0x16>
 8005fb2:	2a00      	cmp	r2, #0
 8005fb4:	d0ea      	beq.n	8005f8c <dir_alloc+0x16>
				n = 0;					/* Not a blank entry. Restart to search */
 8005fb6:	2500      	movs	r5, #0
 8005fb8:	e7eb      	b.n	8005f92 <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d001      	beq.n	8005fc2 <dir_alloc+0x4c>
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005fc2:	2307      	movs	r3, #7
 8005fc4:	e7fb      	b.n	8005fbe <dir_alloc+0x48>

08005fc6 <dir_read>:
{
 8005fc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fca:	4604      	mov	r4, r0
 8005fcc:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
 8005fce:	6807      	ldr	r7, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 8005fd0:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8005fd4:	464e      	mov	r6, r9
	FRESULT res = FR_NO_FILE;
 8005fd6:	2504      	movs	r5, #4
	while (dp->sect) {
 8005fd8:	e02e      	b.n	8006038 <dir_read+0x72>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8005fda:	2b0f      	cmp	r3, #15
 8005fdc:	d119      	bne.n	8006012 <dir_read+0x4c>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8005fde:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005fe2:	d006      	beq.n	8005ff2 <dir_read+0x2c>
						sum = dp->dir[LDIR_Chksum];
 8005fe4:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= ~LLEF; ord = c;
 8005fe8:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 8005fec:	6923      	ldr	r3, [r4, #16]
 8005fee:	6263      	str	r3, [r4, #36]	; 0x24
						c &= ~LLEF; ord = c;
 8005ff0:	4616      	mov	r6, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(dp->lfn, dp->dir)) ? ord - 1 : 0xFF;
 8005ff2:	42b2      	cmp	r2, r6
 8005ff4:	d001      	beq.n	8005ffa <dir_read+0x34>
 8005ff6:	26ff      	movs	r6, #255	; 0xff
 8005ff8:	e018      	b.n	800602c <dir_read+0x66>
 8005ffa:	7b4b      	ldrb	r3, [r1, #13]
 8005ffc:	454b      	cmp	r3, r9
 8005ffe:	d001      	beq.n	8006004 <dir_read+0x3e>
 8006000:	26ff      	movs	r6, #255	; 0xff
 8006002:	e013      	b.n	800602c <dir_read+0x66>
 8006004:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006006:	f7ff fa3b 	bl	8005480 <pick_lfn>
 800600a:	b388      	cbz	r0, 8006070 <dir_read+0xaa>
 800600c:	3e01      	subs	r6, #1
 800600e:	b2f6      	uxtb	r6, r6
 8006010:	e00c      	b.n	800602c <dir_read+0x66>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8006012:	b926      	cbnz	r6, 800601e <dir_read+0x58>
 8006014:	4608      	mov	r0, r1
 8006016:	f7ff fb03 	bl	8005620 <sum_sfn>
 800601a:	4548      	cmp	r0, r9
 800601c:	d02b      	beq.n	8006076 <dir_read+0xb0>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800601e:	f04f 33ff 	mov.w	r3, #4294967295
 8006022:	6263      	str	r3, [r4, #36]	; 0x24
 8006024:	e027      	b.n	8006076 <dir_read+0xb0>
				ord = 0xFF;
 8006026:	26ff      	movs	r6, #255	; 0xff
 8006028:	e000      	b.n	800602c <dir_read+0x66>
 800602a:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 800602c:	2100      	movs	r1, #0
 800602e:	4620      	mov	r0, r4
 8006030:	f7ff ff1c 	bl	8005e6c <dir_next>
		if (res != FR_OK) break;
 8006034:	4605      	mov	r5, r0
 8006036:	b9f0      	cbnz	r0, 8006076 <dir_read+0xb0>
	while (dp->sect) {
 8006038:	69a1      	ldr	r1, [r4, #24]
 800603a:	b1e1      	cbz	r1, 8006076 <dir_read+0xb0>
		res = move_window(fs, dp->sect);
 800603c:	4638      	mov	r0, r7
 800603e:	f7ff fb6b 	bl	8005718 <move_window>
		if (res != FR_OK) break;
 8006042:	4605      	mov	r5, r0
 8006044:	b9b8      	cbnz	r0, 8006076 <dir_read+0xb0>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006046:	69e1      	ldr	r1, [r4, #28]
 8006048:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
 800604a:	b19a      	cbz	r2, 8006074 <dir_read+0xae>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800604c:	7acb      	ldrb	r3, [r1, #11]
 800604e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006052:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8006054:	2ae5      	cmp	r2, #229	; 0xe5
 8006056:	d0e6      	beq.n	8006026 <dir_read+0x60>
 8006058:	2a2e      	cmp	r2, #46	; 0x2e
 800605a:	d0e6      	beq.n	800602a <dir_read+0x64>
 800605c:	f023 0020 	bic.w	r0, r3, #32
 8006060:	2808      	cmp	r0, #8
 8006062:	bf14      	ite	ne
 8006064:	2000      	movne	r0, #0
 8006066:	2001      	moveq	r0, #1
 8006068:	4540      	cmp	r0, r8
 800606a:	d0b6      	beq.n	8005fda <dir_read+0x14>
				ord = 0xFF;
 800606c:	26ff      	movs	r6, #255	; 0xff
 800606e:	e7dd      	b.n	800602c <dir_read+0x66>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(dp->lfn, dp->dir)) ? ord - 1 : 0xFF;
 8006070:	26ff      	movs	r6, #255	; 0xff
 8006072:	e7db      	b.n	800602c <dir_read+0x66>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
 8006074:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006076:	b10d      	cbz	r5, 800607c <dir_read+0xb6>
 8006078:	2300      	movs	r3, #0
 800607a:	61a3      	str	r3, [r4, #24]
}
 800607c:	4628      	mov	r0, r5
 800607e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006082 <dir_remove>:
{
 8006082:	b570      	push	{r4, r5, r6, lr}
 8006084:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8006086:	6805      	ldr	r5, [r0, #0]
	DWORD last = dp->dptr;
 8006088:	6906      	ldr	r6, [r0, #16]
	res = dp->blk_ofs == 0xFFFFFFFF ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800608a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800608c:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006090:	d118      	bne.n	80060c4 <dir_remove+0x42>
			res = move_window(fs, dp->sect);
 8006092:	69a1      	ldr	r1, [r4, #24]
 8006094:	4628      	mov	r0, r5
 8006096:	f7ff fb3f 	bl	8005718 <move_window>
			if (res != FR_OK) break;
 800609a:	4603      	mov	r3, r0
 800609c:	b970      	cbnz	r0, 80060bc <dir_remove+0x3a>
				dp->dir[DIR_Name] = DDEM;
 800609e:	69e2      	ldr	r2, [r4, #28]
 80060a0:	21e5      	movs	r1, #229	; 0xe5
 80060a2:	7011      	strb	r1, [r2, #0]
			fs->wflag = 1;
 80060a4:	2201      	movs	r2, #1
 80060a6:	70ea      	strb	r2, [r5, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80060a8:	6922      	ldr	r2, [r4, #16]
 80060aa:	42b2      	cmp	r2, r6
 80060ac:	d206      	bcs.n	80060bc <dir_remove+0x3a>
			res = dir_next(dp, 0);	/* Next entry */
 80060ae:	2100      	movs	r1, #0
 80060b0:	4620      	mov	r0, r4
 80060b2:	f7ff fedb 	bl	8005e6c <dir_next>
		} while (res == FR_OK);
 80060b6:	4603      	mov	r3, r0
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d0ea      	beq.n	8006092 <dir_remove+0x10>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80060bc:	2b04      	cmp	r3, #4
 80060be:	d007      	beq.n	80060d0 <dir_remove+0x4e>
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	bd70      	pop	{r4, r5, r6, pc}
	res = dp->blk_ofs == 0xFFFFFFFF ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80060c4:	f7ff fd59 	bl	8005b7a <dir_sdi>
	if (res == FR_OK) {
 80060c8:	4603      	mov	r3, r0
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d0e1      	beq.n	8006092 <dir_remove+0x10>
 80060ce:	e7f7      	b.n	80060c0 <dir_remove+0x3e>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80060d0:	2302      	movs	r3, #2
 80060d2:	e7f5      	b.n	80060c0 <dir_remove+0x3e>

080060d4 <create_name>:
{
 80060d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d8:	b083      	sub	sp, #12
 80060da:	4680      	mov	r8, r0
 80060dc:	468a      	mov	sl, r1
	p = *path; lfn = dp->lfn; si = di = 0;
 80060de:	f8d1 9000 	ldr.w	r9, [r1]
 80060e2:	6a85      	ldr	r5, [r0, #40]	; 0x28
 80060e4:	2400      	movs	r4, #0
 80060e6:	e011      	b.n	800610c <create_name+0x38>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator */
 80060e8:	3601      	adds	r6, #1
 80060ea:	eb09 0206 	add.w	r2, r9, r6
 80060ee:	f819 3006 	ldrb.w	r3, [r9, r6]
 80060f2:	2b2f      	cmp	r3, #47	; 0x2f
 80060f4:	d0f8      	beq.n	80060e8 <create_name+0x14>
 80060f6:	2b5c      	cmp	r3, #92	; 0x5c
 80060f8:	d0f6      	beq.n	80060e8 <create_name+0x14>
	*path = &p[si];						/* Return pointer to the next segment */
 80060fa:	f8ca 2000 	str.w	r2, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80060fe:	281f      	cmp	r0, #31
 8006100:	d821      	bhi.n	8006146 <create_name+0x72>
 8006102:	2704      	movs	r7, #4
 8006104:	e022      	b.n	800614c <create_name+0x78>
		lfn[di++] = w;					/* Store the Unicode character */
 8006106:	f825 7014 	strh.w	r7, [r5, r4, lsl #1]
		w = p[si++];					/* Get a character */
 800610a:	4634      	mov	r4, r6
 800610c:	1c66      	adds	r6, r4, #1
 800610e:	f819 0004 	ldrb.w	r0, [r9, r4]
		if (w < ' ' || w == '/' || w == '\\') {		/* Break on end of segment */
 8006112:	281f      	cmp	r0, #31
 8006114:	d9e9      	bls.n	80060ea <create_name+0x16>
 8006116:	282f      	cmp	r0, #47	; 0x2f
 8006118:	d0e7      	beq.n	80060ea <create_name+0x16>
 800611a:	285c      	cmp	r0, #92	; 0x5c
 800611c:	d0e5      	beq.n	80060ea <create_name+0x16>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800611e:	2cfe      	cmp	r4, #254	; 0xfe
 8006120:	f200 80df 	bhi.w	80062e2 <create_name+0x20e>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006124:	2101      	movs	r1, #1
 8006126:	f000 ffe9 	bl	80070fc <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800612a:	4607      	mov	r7, r0
 800612c:	2800      	cmp	r0, #0
 800612e:	f000 80da 	beq.w	80062e6 <create_name+0x212>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006132:	287f      	cmp	r0, #127	; 0x7f
 8006134:	d8e7      	bhi.n	8006106 <create_name+0x32>
 8006136:	4601      	mov	r1, r0
 8006138:	486d      	ldr	r0, [pc, #436]	; (80062f0 <create_name+0x21c>)
 800613a:	f7ff f966 	bl	800540a <chk_chr>
 800613e:	2800      	cmp	r0, #0
 8006140:	d0e1      	beq.n	8006106 <create_name+0x32>
 8006142:	2006      	movs	r0, #6
 8006144:	e086      	b.n	8006254 <create_name+0x180>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8006146:	2700      	movs	r7, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006148:	e000      	b.n	800614c <create_name+0x78>
		di--;
 800614a:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800614c:	b144      	cbz	r4, 8006160 <create_name+0x8c>
		w = lfn[di - 1];
 800614e:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8006152:	3b01      	subs	r3, #1
 8006154:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 8006158:	2b20      	cmp	r3, #32
 800615a:	d0f6      	beq.n	800614a <create_name+0x76>
 800615c:	2b2e      	cmp	r3, #46	; 0x2e
 800615e:	d0f4      	beq.n	800614a <create_name+0x76>
	lfn[di] = 0;						/* LFN is created */
 8006160:	2300      	movs	r3, #0
 8006162:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006166:	2c00      	cmp	r4, #0
 8006168:	f000 80bf 	beq.w	80062ea <create_name+0x216>
	mem_set(dp->fn, ' ', 11);
 800616c:	220b      	movs	r2, #11
 800616e:	2120      	movs	r1, #32
 8006170:	f8d8 0020 	ldr.w	r0, [r8, #32]
 8006174:	f7ff f935 	bl	80053e2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006178:	2300      	movs	r3, #0
 800617a:	e000      	b.n	800617e <create_name+0xaa>
 800617c:	3301      	adds	r3, #1
 800617e:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 8006182:	2a20      	cmp	r2, #32
 8006184:	d0fa      	beq.n	800617c <create_name+0xa8>
 8006186:	2a2e      	cmp	r2, #46	; 0x2e
 8006188:	d0f8      	beq.n	800617c <create_name+0xa8>
	if (si) cf |= NS_LOSS | NS_LFN;
 800618a:	b11b      	cbz	r3, 8006194 <create_name+0xc0>
 800618c:	f047 0703 	orr.w	r7, r7, #3
 8006190:	e000      	b.n	8006194 <create_name+0xc0>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006192:	3c01      	subs	r4, #1
 8006194:	b16c      	cbz	r4, 80061b2 <create_name+0xde>
 8006196:	f104 4200 	add.w	r2, r4, #2147483648	; 0x80000000
 800619a:	3a01      	subs	r2, #1
 800619c:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 80061a0:	2a2e      	cmp	r2, #46	; 0x2e
 80061a2:	d1f6      	bne.n	8006192 <create_name+0xbe>
 80061a4:	f04f 0b08 	mov.w	fp, #8
 80061a8:	f04f 0a00 	mov.w	sl, #0
 80061ac:	f8cd a004 	str.w	sl, [sp, #4]
 80061b0:	e00a      	b.n	80061c8 <create_name+0xf4>
 80061b2:	46a2      	mov	sl, r4
 80061b4:	f04f 0b08 	mov.w	fp, #8
 80061b8:	2200      	movs	r2, #0
 80061ba:	9201      	str	r2, [sp, #4]
 80061bc:	e004      	b.n	80061c8 <create_name+0xf4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80061be:	454c      	cmp	r4, r9
 80061c0:	d00b      	beq.n	80061da <create_name+0x106>
			cf |= NS_LOSS | NS_LFN; continue;
 80061c2:	f047 0703 	orr.w	r7, r7, #3
		w = lfn[si++];					/* Get an LFN character */
 80061c6:	464b      	mov	r3, r9
 80061c8:	f103 0901 	add.w	r9, r3, #1
 80061cc:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 80061d0:	b1fe      	cbz	r6, 8006212 <create_name+0x13e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80061d2:	2e20      	cmp	r6, #32
 80061d4:	d0f5      	beq.n	80061c2 <create_name+0xee>
 80061d6:	2e2e      	cmp	r6, #46	; 0x2e
 80061d8:	d0f1      	beq.n	80061be <create_name+0xea>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80061da:	45da      	cmp	sl, fp
 80061dc:	d210      	bcs.n	8006200 <create_name+0x12c>
 80061de:	454c      	cmp	r4, r9
 80061e0:	d00e      	beq.n	8006200 <create_name+0x12c>
		if (w >= 0x80) {				/* Non ASCII character */
 80061e2:	2e7f      	cmp	r6, #127	; 0x7f
 80061e4:	d846      	bhi.n	8006274 <create_name+0x1a0>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80061e6:	2e00      	cmp	r6, #0
 80061e8:	d151      	bne.n	800628e <create_name+0x1ba>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80061ea:	f047 0703 	orr.w	r7, r7, #3
 80061ee:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 80061f0:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80061f4:	f803 600a 	strb.w	r6, [r3, sl]
		w = lfn[si++];					/* Get an LFN character */
 80061f8:	464b      	mov	r3, r9
		dp->fn[i++] = (BYTE)w;
 80061fa:	f10a 0a01 	add.w	sl, sl, #1
 80061fe:	e7e3      	b.n	80061c8 <create_name+0xf4>
			if (ni == 11) {				/* Long extension */
 8006200:	f1bb 0f0b 	cmp.w	fp, #11
 8006204:	d029      	beq.n	800625a <create_name+0x186>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006206:	454c      	cmp	r4, r9
 8006208:	d001      	beq.n	800620e <create_name+0x13a>
 800620a:	f047 0703 	orr.w	r7, r7, #3
			if (si > di) break;			/* No extension */
 800620e:	454c      	cmp	r4, r9
 8006210:	d226      	bcs.n	8006260 <create_name+0x18c>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006212:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8006216:	781a      	ldrb	r2, [r3, #0]
 8006218:	2ae5      	cmp	r2, #229	; 0xe5
 800621a:	d054      	beq.n	80062c6 <create_name+0x1f2>
	if (ni == 8) b <<= 2;
 800621c:	f1bb 0f08 	cmp.w	fp, #8
 8006220:	d054      	beq.n	80062cc <create_name+0x1f8>
 8006222:	9b01      	ldr	r3, [sp, #4]
 8006224:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006228:	2a0c      	cmp	r2, #12
 800622a:	d003      	beq.n	8006234 <create_name+0x160>
 800622c:	f003 0303 	and.w	r3, r3, #3
 8006230:	2b03      	cmp	r3, #3
 8006232:	d101      	bne.n	8006238 <create_name+0x164>
 8006234:	f047 0702 	orr.w	r7, r7, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006238:	f017 0f02 	tst.w	r7, #2
 800623c:	d106      	bne.n	800624c <create_name+0x178>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800623e:	9b01      	ldr	r3, [sp, #4]
 8006240:	f003 0303 	and.w	r3, r3, #3
 8006244:	2b01      	cmp	r3, #1
 8006246:	d046      	beq.n	80062d6 <create_name+0x202>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006248:	2a04      	cmp	r2, #4
 800624a:	d047      	beq.n	80062dc <create_name+0x208>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800624c:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8006250:	72df      	strb	r7, [r3, #11]
	return FR_OK;
 8006252:	2000      	movs	r0, #0
}
 8006254:	b003      	add	sp, #12
 8006256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 800625a:	f047 0703 	orr.w	r7, r7, #3
 800625e:	e7d8      	b.n	8006212 <create_name+0x13e>
			b <<= 2; continue;
 8006260:	9b01      	ldr	r3, [sp, #4]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	b2db      	uxtb	r3, r3
 8006266:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006268:	4623      	mov	r3, r4
 800626a:	f04f 0b0b 	mov.w	fp, #11
 800626e:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 8006272:	e7a9      	b.n	80061c8 <create_name+0xf4>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006274:	2100      	movs	r1, #0
 8006276:	4630      	mov	r0, r6
 8006278:	f000 ff40 	bl	80070fc <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800627c:	4606      	mov	r6, r0
 800627e:	b118      	cbz	r0, 8006288 <create_name+0x1b4>
 8006280:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
 8006284:	4b1b      	ldr	r3, [pc, #108]	; (80062f4 <create_name+0x220>)
 8006286:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 8006288:	f047 0702 	orr.w	r7, r7, #2
 800628c:	e7ab      	b.n	80061e6 <create_name+0x112>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800628e:	4631      	mov	r1, r6
 8006290:	4819      	ldr	r0, [pc, #100]	; (80062f8 <create_name+0x224>)
 8006292:	f7ff f8ba 	bl	800540a <chk_chr>
 8006296:	2800      	cmp	r0, #0
 8006298:	d1a7      	bne.n	80061ea <create_name+0x116>
				if (IsUpper(w)) {		/* ASCII large capital */
 800629a:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 800629e:	b29b      	uxth	r3, r3
 80062a0:	2b19      	cmp	r3, #25
 80062a2:	d804      	bhi.n	80062ae <create_name+0x1da>
					b |= 2;
 80062a4:	9b01      	ldr	r3, [sp, #4]
 80062a6:	f043 0302 	orr.w	r3, r3, #2
 80062aa:	9301      	str	r3, [sp, #4]
 80062ac:	e7a0      	b.n	80061f0 <create_name+0x11c>
					if (IsLower(w)) {	/* ASCII small capital */
 80062ae:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b19      	cmp	r3, #25
 80062b6:	d89b      	bhi.n	80061f0 <create_name+0x11c>
						b |= 1; w -= 0x20;
 80062b8:	9b01      	ldr	r3, [sp, #4]
 80062ba:	f043 0301 	orr.w	r3, r3, #1
 80062be:	9301      	str	r3, [sp, #4]
 80062c0:	3e20      	subs	r6, #32
 80062c2:	b2b6      	uxth	r6, r6
 80062c4:	e794      	b.n	80061f0 <create_name+0x11c>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80062c6:	2205      	movs	r2, #5
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	e7a7      	b.n	800621c <create_name+0x148>
	if (ni == 8) b <<= 2;
 80062cc:	9b01      	ldr	r3, [sp, #4]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	9301      	str	r3, [sp, #4]
 80062d4:	e7a5      	b.n	8006222 <create_name+0x14e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80062d6:	f047 0710 	orr.w	r7, r7, #16
 80062da:	e7b5      	b.n	8006248 <create_name+0x174>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80062dc:	f047 0708 	orr.w	r7, r7, #8
 80062e0:	e7b4      	b.n	800624c <create_name+0x178>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80062e2:	2006      	movs	r0, #6
 80062e4:	e7b6      	b.n	8006254 <create_name+0x180>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80062e6:	2006      	movs	r0, #6
 80062e8:	e7b4      	b.n	8006254 <create_name+0x180>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80062ea:	2006      	movs	r0, #6
 80062ec:	e7b2      	b.n	8006254 <create_name+0x180>
 80062ee:	bf00      	nop
 80062f0:	08016098 	.word	0x08016098
 80062f4:	08016008 	.word	0x08016008
 80062f8:	080160a4 	.word	0x080160a4

080062fc <get_fileinfo>:
{
 80062fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	fno->fname[0] = 0;		/* Invaidate file info */
 80062fe:	2300      	movs	r3, #0
 8006300:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006302:	6983      	ldr	r3, [r0, #24]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d06b      	beq.n	80063e0 <get_fileinfo+0xe4>
 8006308:	460d      	mov	r5, r1
 800630a:	4606      	mov	r6, r0
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800630c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800630e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006312:	d013      	beq.n	800633c <get_fileinfo+0x40>
			i = 0; lfn = dp->lfn;
 8006314:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006316:	2400      	movs	r4, #0
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 8006318:	1c9f      	adds	r7, r3, #2
 800631a:	8818      	ldrh	r0, [r3, #0]
 800631c:	b158      	cbz	r0, 8006336 <get_fileinfo+0x3a>
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800631e:	2100      	movs	r1, #0
 8006320:	f000 feec 	bl	80070fc <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8006324:	b130      	cbz	r0, 8006334 <get_fileinfo+0x38>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8006326:	2cfe      	cmp	r4, #254	; 0xfe
 8006328:	d80c      	bhi.n	8006344 <get_fileinfo+0x48>
				fno->fname[i++] = (char)w;
 800632a:	192a      	adds	r2, r5, r4
 800632c:	7590      	strb	r0, [r2, #22]
			while ((w = *lfn++) != 0) {		/* Get an LFN character */
 800632e:	463b      	mov	r3, r7
				fno->fname[i++] = (char)w;
 8006330:	3401      	adds	r4, #1
 8006332:	e7f1      	b.n	8006318 <get_fileinfo+0x1c>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8006334:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 8006336:	442c      	add	r4, r5
 8006338:	2300      	movs	r3, #0
 800633a:	75a3      	strb	r3, [r4, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800633c:	7da8      	ldrb	r0, [r5, #22]
	i = j = 0;
 800633e:	2200      	movs	r2, #0
 8006340:	4613      	mov	r3, r2
	while (i < 11) {		/* Copy name body and extension */
 8006342:	e012      	b.n	800636a <get_fileinfo+0x6e>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8006344:	2400      	movs	r4, #0
 8006346:	e7f6      	b.n	8006336 <get_fileinfo+0x3a>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006348:	23e5      	movs	r3, #229	; 0xe5
 800634a:	e017      	b.n	800637c <get_fileinfo+0x80>
			if (!lfv) fno->fname[j] = '.';
 800634c:	b910      	cbnz	r0, 8006354 <get_fileinfo+0x58>
 800634e:	18a9      	adds	r1, r5, r2
 8006350:	272e      	movs	r7, #46	; 0x2e
 8006352:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
 8006354:	18a9      	adds	r1, r5, r2
 8006356:	272e      	movs	r7, #46	; 0x2e
 8006358:	724f      	strb	r7, [r1, #9]
 800635a:	3201      	adds	r2, #1
 800635c:	e010      	b.n	8006380 <get_fileinfo+0x84>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY))) {
 800635e:	2110      	movs	r1, #16
 8006360:	e01c      	b.n	800639c <get_fileinfo+0xa0>
			fno->fname[j] = c;
 8006362:	18a9      	adds	r1, r5, r2
 8006364:	758b      	strb	r3, [r1, #22]
		j++;
 8006366:	3201      	adds	r2, #1
			if (IsUpper(c) && (dp->dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY))) {
 8006368:	4623      	mov	r3, r4
	while (i < 11) {		/* Copy name body and extension */
 800636a:	2b0a      	cmp	r3, #10
 800636c:	d81b      	bhi.n	80063a6 <get_fileinfo+0xaa>
		c = (TCHAR)dp->dir[i++];
 800636e:	69f1      	ldr	r1, [r6, #28]
 8006370:	1c5c      	adds	r4, r3, #1
 8006372:	5ccb      	ldrb	r3, [r1, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006374:	2b20      	cmp	r3, #32
 8006376:	d0f7      	beq.n	8006368 <get_fileinfo+0x6c>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006378:	2b05      	cmp	r3, #5
 800637a:	d0e5      	beq.n	8006348 <get_fileinfo+0x4c>
		if (i == 9) {						/* Insert a . if extension is exist */
 800637c:	2c09      	cmp	r4, #9
 800637e:	d0e5      	beq.n	800634c <get_fileinfo+0x50>
		fno->altname[j] = c;
 8006380:	18a9      	adds	r1, r5, r2
 8006382:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 8006384:	2800      	cmp	r0, #0
 8006386:	d1ee      	bne.n	8006366 <get_fileinfo+0x6a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY))) {
 8006388:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
 800638c:	b2c9      	uxtb	r1, r1
 800638e:	2919      	cmp	r1, #25
 8006390:	d8e7      	bhi.n	8006362 <get_fileinfo+0x66>
 8006392:	69f1      	ldr	r1, [r6, #28]
 8006394:	7b0f      	ldrb	r7, [r1, #12]
 8006396:	2c08      	cmp	r4, #8
 8006398:	d8e1      	bhi.n	800635e <get_fileinfo+0x62>
 800639a:	2108      	movs	r1, #8
 800639c:	420f      	tst	r7, r1
 800639e:	d0e0      	beq.n	8006362 <get_fileinfo+0x66>
				c += 0x20;			/* To lower */
 80063a0:	3320      	adds	r3, #32
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	e7dd      	b.n	8006362 <get_fileinfo+0x66>
	if (!lfv) {
 80063a6:	b930      	cbnz	r0, 80063b6 <get_fileinfo+0xba>
		fno->fname[j] = 0;
 80063a8:	18ab      	adds	r3, r5, r2
 80063aa:	2100      	movs	r1, #0
 80063ac:	7599      	strb	r1, [r3, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80063ae:	69f3      	ldr	r3, [r6, #28]
 80063b0:	7b1b      	ldrb	r3, [r3, #12]
 80063b2:	b903      	cbnz	r3, 80063b6 <get_fileinfo+0xba>
 80063b4:	460a      	mov	r2, r1
	fno->altname[j] = 0;	/* Terminate the SFN */
 80063b6:	442a      	add	r2, r5
 80063b8:	2300      	movs	r3, #0
 80063ba:	7253      	strb	r3, [r2, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80063bc:	69f3      	ldr	r3, [r6, #28]
 80063be:	7adb      	ldrb	r3, [r3, #11]
 80063c0:	722b      	strb	r3, [r5, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80063c2:	69f0      	ldr	r0, [r6, #28]
 80063c4:	301c      	adds	r0, #28
 80063c6:	f7fe ffea 	bl	800539e <ld_dword>
 80063ca:	6028      	str	r0, [r5, #0]
	fno->fdate = ld_word(dp->dir + DIR_WrtDate);	/* Date */
 80063cc:	69f0      	ldr	r0, [r6, #28]
 80063ce:	3018      	adds	r0, #24
 80063d0:	f7fe ffe0 	bl	8005394 <ld_word>
 80063d4:	80a8      	strh	r0, [r5, #4]
	fno->ftime = ld_word(dp->dir + DIR_WrtTime);	/* Time */
 80063d6:	69f0      	ldr	r0, [r6, #28]
 80063d8:	3016      	adds	r0, #22
 80063da:	f7fe ffdb 	bl	8005394 <ld_word>
 80063de:	80e8      	strh	r0, [r5, #6]
}
 80063e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063e4 <cmp_lfn>:
{
 80063e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e8:	4681      	mov	r9, r0
 80063ea:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80063ec:	f101 001a 	add.w	r0, r1, #26
 80063f0:	f7fe ffd0 	bl	8005394 <ld_word>
 80063f4:	bbb8      	cbnz	r0, 8006466 <cmp_lfn+0x82>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80063f6:	783d      	ldrb	r5, [r7, #0]
 80063f8:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 80063fc:	3d01      	subs	r5, #1
 80063fe:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8006402:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006406:	f04f 0801 	mov.w	r8, #1
 800640a:	2400      	movs	r4, #0
 800640c:	e004      	b.n	8006418 <cmp_lfn+0x34>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800640e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006412:	4298      	cmp	r0, r3
 8006414:	d12e      	bne.n	8006474 <cmp_lfn+0x90>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006416:	3401      	adds	r4, #1
 8006418:	2c0c      	cmp	r4, #12
 800641a:	d818      	bhi.n	800644e <cmp_lfn+0x6a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800641c:	4b19      	ldr	r3, [pc, #100]	; (8006484 <cmp_lfn+0xa0>)
 800641e:	5d18      	ldrb	r0, [r3, r4]
 8006420:	4438      	add	r0, r7
 8006422:	f7fe ffb7 	bl	8005394 <ld_word>
 8006426:	4606      	mov	r6, r0
		if (wc) {
 8006428:	f1b8 0f00 	cmp.w	r8, #0
 800642c:	d0ef      	beq.n	800640e <cmp_lfn+0x2a>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800642e:	2dfe      	cmp	r5, #254	; 0xfe
 8006430:	d81c      	bhi.n	800646c <cmp_lfn+0x88>
 8006432:	f000 fe7f 	bl	8007134 <ff_wtoupper>
 8006436:	4680      	mov	r8, r0
 8006438:	f105 0a01 	add.w	sl, r5, #1
 800643c:	f839 0015 	ldrh.w	r0, [r9, r5, lsl #1]
 8006440:	f000 fe78 	bl	8007134 <ff_wtoupper>
 8006444:	4580      	cmp	r8, r0
 8006446:	d113      	bne.n	8006470 <cmp_lfn+0x8c>
			wc = uc;
 8006448:	46b0      	mov	r8, r6
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800644a:	4655      	mov	r5, sl
 800644c:	e7e3      	b.n	8006416 <cmp_lfn+0x32>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800644e:	783b      	ldrb	r3, [r7, #0]
 8006450:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006454:	d010      	beq.n	8006478 <cmp_lfn+0x94>
 8006456:	f1b8 0f00 	cmp.w	r8, #0
 800645a:	d00f      	beq.n	800647c <cmp_lfn+0x98>
 800645c:	f839 3015 	ldrh.w	r3, [r9, r5, lsl #1]
 8006460:	b973      	cbnz	r3, 8006480 <cmp_lfn+0x9c>
	return 1;		/* The part of LFN matched */
 8006462:	2001      	movs	r0, #1
 8006464:	e000      	b.n	8006468 <cmp_lfn+0x84>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006466:	2000      	movs	r0, #0
}
 8006468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;					/* Not matched */
 800646c:	2000      	movs	r0, #0
 800646e:	e7fb      	b.n	8006468 <cmp_lfn+0x84>
 8006470:	2000      	movs	r0, #0
 8006472:	e7f9      	b.n	8006468 <cmp_lfn+0x84>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006474:	2000      	movs	r0, #0
 8006476:	e7f7      	b.n	8006468 <cmp_lfn+0x84>
	return 1;		/* The part of LFN matched */
 8006478:	2001      	movs	r0, #1
 800647a:	e7f5      	b.n	8006468 <cmp_lfn+0x84>
 800647c:	2001      	movs	r0, #1
 800647e:	e7f3      	b.n	8006468 <cmp_lfn+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006480:	2000      	movs	r0, #0
 8006482:	e7f1      	b.n	8006468 <cmp_lfn+0x84>
 8006484:	08016088 	.word	0x08016088

08006488 <dir_find>:
{
 8006488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800648c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800648e:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006492:	2100      	movs	r1, #0
 8006494:	f7ff fb71 	bl	8005b7a <dir_sdi>
	if (res != FR_OK) return res;
 8006498:	4606      	mov	r6, r0
 800649a:	2800      	cmp	r0, #0
 800649c:	d15e      	bne.n	800655c <dir_find+0xd4>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800649e:	f04f 33ff 	mov.w	r3, #4294967295
 80064a2:	6263      	str	r3, [r4, #36]	; 0x24
 80064a4:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80064a8:	464f      	mov	r7, r9
 80064aa:	e00a      	b.n	80064c2 <dir_find+0x3a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80064ac:	f04f 33ff 	mov.w	r3, #4294967295
 80064b0:	6263      	str	r3, [r4, #36]	; 0x24
 80064b2:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 80064b4:	2100      	movs	r1, #0
 80064b6:	4620      	mov	r0, r4
 80064b8:	f7ff fcd8 	bl	8005e6c <dir_next>
	} while (res == FR_OK);
 80064bc:	4606      	mov	r6, r0
 80064be:	2800      	cmp	r0, #0
 80064c0:	d14c      	bne.n	800655c <dir_find+0xd4>
		res = move_window(fs, dp->sect);
 80064c2:	69a1      	ldr	r1, [r4, #24]
 80064c4:	4640      	mov	r0, r8
 80064c6:	f7ff f927 	bl	8005718 <move_window>
		if (res != FR_OK) break;
 80064ca:	4606      	mov	r6, r0
 80064cc:	2800      	cmp	r0, #0
 80064ce:	d145      	bne.n	800655c <dir_find+0xd4>
		c = dp->dir[DIR_Name];
 80064d0:	69e5      	ldr	r5, [r4, #28]
 80064d2:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d040      	beq.n	800655a <dir_find+0xd2>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80064d8:	7ae9      	ldrb	r1, [r5, #11]
 80064da:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 80064de:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80064e0:	2be5      	cmp	r3, #229	; 0xe5
 80064e2:	d0e3      	beq.n	80064ac <dir_find+0x24>
 80064e4:	f011 0f08 	tst.w	r1, #8
 80064e8:	d001      	beq.n	80064ee <dir_find+0x66>
 80064ea:	2a0f      	cmp	r2, #15
 80064ec:	d1de      	bne.n	80064ac <dir_find+0x24>
			if (a == AM_LFN) {			/* An LFN entry is found */
 80064ee:	2a0f      	cmp	r2, #15
 80064f0:	d014      	beq.n	800651c <dir_find+0x94>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80064f2:	b927      	cbnz	r7, 80064fe <dir_find+0x76>
 80064f4:	4628      	mov	r0, r5
 80064f6:	f7ff f893 	bl	8005620 <sum_sfn>
 80064fa:	4548      	cmp	r0, r9
 80064fc:	d02e      	beq.n	800655c <dir_find+0xd4>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80064fe:	6a21      	ldr	r1, [r4, #32]
 8006500:	7acb      	ldrb	r3, [r1, #11]
 8006502:	f013 0f01 	tst.w	r3, #1
 8006506:	d104      	bne.n	8006512 <dir_find+0x8a>
 8006508:	220b      	movs	r2, #11
 800650a:	4628      	mov	r0, r5
 800650c:	f7fe ff6e 	bl	80053ec <mem_cmp>
 8006510:	b320      	cbz	r0, 800655c <dir_find+0xd4>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006512:	f04f 33ff 	mov.w	r3, #4294967295
 8006516:	6263      	str	r3, [r4, #36]	; 0x24
 8006518:	27ff      	movs	r7, #255	; 0xff
 800651a:	e7cb      	b.n	80064b4 <dir_find+0x2c>
				if (dp->lfn) {
 800651c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800651e:	2800      	cmp	r0, #0
 8006520:	d0c8      	beq.n	80064b4 <dir_find+0x2c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006522:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006526:	d006      	beq.n	8006536 <dir_find+0xae>
						sum = dp->dir[LDIR_Chksum];
 8006528:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800652c:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006530:	6922      	ldr	r2, [r4, #16]
 8006532:	6262      	str	r2, [r4, #36]	; 0x24
						c &= ~LLEF; ord = c;	/* LFN start order */
 8006534:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dp->dir)) ? ord - 1 : 0xFF;
 8006536:	42bb      	cmp	r3, r7
 8006538:	d001      	beq.n	800653e <dir_find+0xb6>
 800653a:	27ff      	movs	r7, #255	; 0xff
 800653c:	e7ba      	b.n	80064b4 <dir_find+0x2c>
 800653e:	7b6b      	ldrb	r3, [r5, #13]
 8006540:	454b      	cmp	r3, r9
 8006542:	d001      	beq.n	8006548 <dir_find+0xc0>
 8006544:	27ff      	movs	r7, #255	; 0xff
 8006546:	e7b5      	b.n	80064b4 <dir_find+0x2c>
 8006548:	4629      	mov	r1, r5
 800654a:	f7ff ff4b 	bl	80063e4 <cmp_lfn>
 800654e:	b110      	cbz	r0, 8006556 <dir_find+0xce>
 8006550:	3f01      	subs	r7, #1
 8006552:	b2ff      	uxtb	r7, r7
 8006554:	e7ae      	b.n	80064b4 <dir_find+0x2c>
 8006556:	27ff      	movs	r7, #255	; 0xff
 8006558:	e7ac      	b.n	80064b4 <dir_find+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800655a:	2604      	movs	r6, #4
}
 800655c:	4630      	mov	r0, r6
 800655e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006562 <follow_path>:
{
 8006562:	b530      	push	{r4, r5, lr}
 8006564:	b083      	sub	sp, #12
 8006566:	4604      	mov	r4, r0
 8006568:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 800656a:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800656c:	e001      	b.n	8006572 <follow_path+0x10>
 800656e:	3301      	adds	r3, #1
 8006570:	9301      	str	r3, [sp, #4]
 8006572:	9b01      	ldr	r3, [sp, #4]
 8006574:	781a      	ldrb	r2, [r3, #0]
 8006576:	2a2f      	cmp	r2, #47	; 0x2f
 8006578:	d0f9      	beq.n	800656e <follow_path+0xc>
 800657a:	2a5c      	cmp	r2, #92	; 0x5c
 800657c:	d0f7      	beq.n	800656e <follow_path+0xc>
		obj->sclust = 0;					/* Start from the root directory */
 800657e:	2200      	movs	r2, #0
 8006580:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	2b1f      	cmp	r3, #31
 8006586:	d91d      	bls.n	80065c4 <follow_path+0x62>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006588:	a901      	add	r1, sp, #4
 800658a:	4620      	mov	r0, r4
 800658c:	f7ff fda2 	bl	80060d4 <create_name>
			if (res != FR_OK) break;
 8006590:	4603      	mov	r3, r0
 8006592:	b9f8      	cbnz	r0, 80065d4 <follow_path+0x72>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006594:	4620      	mov	r0, r4
 8006596:	f7ff ff77 	bl	8006488 <dir_find>
			ns = dp->fn[NSFLAG];
 800659a:	6a23      	ldr	r3, [r4, #32]
 800659c:	7ada      	ldrb	r2, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800659e:	4603      	mov	r3, r0
 80065a0:	b9d8      	cbnz	r0, 80065da <follow_path+0x78>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80065a2:	f012 0f04 	tst.w	r2, #4
 80065a6:	d115      	bne.n	80065d4 <follow_path+0x72>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80065a8:	79a3      	ldrb	r3, [r4, #6]
 80065aa:	f013 0f10 	tst.w	r3, #16
 80065ae:	d01b      	beq.n	80065e8 <follow_path+0x86>
				obj->sclust = ld_clust(fs, &fs->win[dp->dptr % SS(fs)]);	/* Open next directory */
 80065b0:	6921      	ldr	r1, [r4, #16]
 80065b2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80065b6:	3130      	adds	r1, #48	; 0x30
 80065b8:	4429      	add	r1, r5
 80065ba:	4628      	mov	r0, r5
 80065bc:	f7fe ff39 	bl	8005432 <ld_clust>
 80065c0:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80065c2:	e7e1      	b.n	8006588 <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 80065c4:	6a23      	ldr	r3, [r4, #32]
 80065c6:	2280      	movs	r2, #128	; 0x80
 80065c8:	72da      	strb	r2, [r3, #11]
		res = dir_sdi(dp, 0);
 80065ca:	2100      	movs	r1, #0
 80065cc:	4620      	mov	r0, r4
 80065ce:	f7ff fad4 	bl	8005b7a <dir_sdi>
 80065d2:	4603      	mov	r3, r0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	b003      	add	sp, #12
 80065d8:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 80065da:	2804      	cmp	r0, #4
 80065dc:	d1fa      	bne.n	80065d4 <follow_path+0x72>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80065de:	f012 0f04 	tst.w	r2, #4
 80065e2:	d1f7      	bne.n	80065d4 <follow_path+0x72>
 80065e4:	2305      	movs	r3, #5
 80065e6:	e7f5      	b.n	80065d4 <follow_path+0x72>
				res = FR_NO_PATH; break;
 80065e8:	2305      	movs	r3, #5
 80065ea:	e7f3      	b.n	80065d4 <follow_path+0x72>

080065ec <dir_register>:
{
 80065ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065f0:	b084      	sub	sp, #16
	FATFS *fs = dp->obj.fs;
 80065f2:	6806      	ldr	r6, [r0, #0]
	fn = dp->fn; lfn = dp->lfn;
 80065f4:	f8d0 a020 	ldr.w	sl, [r0, #32]
 80065f8:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
	if (fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80065fc:	f89a 300b 	ldrb.w	r3, [sl, #11]
 8006600:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8006604:	f040 8089 	bne.w	800671a <dir_register+0x12e>
	for (nlen = 0; lfn[nlen]; nlen++) ;	/* Get lfn length */
 8006608:	2400      	movs	r4, #0
 800660a:	e000      	b.n	800660e <dir_register+0x22>
 800660c:	3401      	adds	r4, #1
 800660e:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1fa      	bne.n	800660c <dir_register+0x20>
 8006616:	4605      	mov	r5, r0
	mem_cpy(sn, fn, 12);
 8006618:	220c      	movs	r2, #12
 800661a:	4651      	mov	r1, sl
 800661c:	a801      	add	r0, sp, #4
 800661e:	f7fe fed7 	bl	80053d0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006622:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8006626:	f013 0f01 	tst.w	r3, #1
 800662a:	d01e      	beq.n	800666a <dir_register+0x7e>
		fn[NSFLAG] = 0; dp->lfn = 0;		/* Find only SFN */
 800662c:	2300      	movs	r3, #0
 800662e:	f88a 300b 	strb.w	r3, [sl, #11]
 8006632:	62ab      	str	r3, [r5, #40]	; 0x28
		for (n = 1; n < 100; n++) {
 8006634:	2701      	movs	r7, #1
 8006636:	2f63      	cmp	r7, #99	; 0x63
 8006638:	d80c      	bhi.n	8006654 <dir_register+0x68>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800663a:	463b      	mov	r3, r7
 800663c:	4642      	mov	r2, r8
 800663e:	a901      	add	r1, sp, #4
 8006640:	4650      	mov	r0, sl
 8006642:	f7fe ff9d 	bl	8005580 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006646:	4628      	mov	r0, r5
 8006648:	f7ff ff1e 	bl	8006488 <dir_find>
			if (res != FR_OK) break;
 800664c:	4681      	mov	r9, r0
 800664e:	b908      	cbnz	r0, 8006654 <dir_register+0x68>
		for (n = 1; n < 100; n++) {
 8006650:	3701      	adds	r7, #1
 8006652:	e7f0      	b.n	8006636 <dir_register+0x4a>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006654:	2f64      	cmp	r7, #100	; 0x64
 8006656:	d066      	beq.n	8006726 <dir_register+0x13a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006658:	f1b9 0f04 	cmp.w	r9, #4
 800665c:	d15f      	bne.n	800671e <dir_register+0x132>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800665e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8006662:	f88a 300b 	strb.w	r3, [sl, #11]
 8006666:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800666a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800666e:	f013 0f02 	tst.w	r3, #2
 8006672:	d02a      	beq.n	80066ca <dir_register+0xde>
 8006674:	340c      	adds	r4, #12
 8006676:	4b2d      	ldr	r3, [pc, #180]	; (800672c <dir_register+0x140>)
 8006678:	fba3 3404 	umull	r3, r4, r3, r4
 800667c:	08a4      	lsrs	r4, r4, #2
 800667e:	3401      	adds	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006680:	4621      	mov	r1, r4
 8006682:	4628      	mov	r0, r5
 8006684:	f7ff fc77 	bl	8005f76 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006688:	4681      	mov	r9, r0
 800668a:	b908      	cbnz	r0, 8006690 <dir_register+0xa4>
 800668c:	3c01      	subs	r4, #1
 800668e:	d11e      	bne.n	80066ce <dir_register+0xe2>
	if (res == FR_OK) {
 8006690:	f1b9 0f00 	cmp.w	r9, #0
 8006694:	d143      	bne.n	800671e <dir_register+0x132>
		res = move_window(fs, dp->sect);
 8006696:	69a9      	ldr	r1, [r5, #24]
 8006698:	4630      	mov	r0, r6
 800669a:	f7ff f83d 	bl	8005718 <move_window>
		if (res == FR_OK) {
 800669e:	4681      	mov	r9, r0
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d13c      	bne.n	800671e <dir_register+0x132>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80066a4:	2220      	movs	r2, #32
 80066a6:	2100      	movs	r1, #0
 80066a8:	69e8      	ldr	r0, [r5, #28]
 80066aa:	f7fe fe9a 	bl	80053e2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80066ae:	220b      	movs	r2, #11
 80066b0:	6a29      	ldr	r1, [r5, #32]
 80066b2:	69e8      	ldr	r0, [r5, #28]
 80066b4:	f7fe fe8c 	bl	80053d0 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80066b8:	6a2b      	ldr	r3, [r5, #32]
 80066ba:	7adb      	ldrb	r3, [r3, #11]
 80066bc:	69ea      	ldr	r2, [r5, #28]
 80066be:	f003 0318 	and.w	r3, r3, #24
 80066c2:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 80066c4:	2301      	movs	r3, #1
 80066c6:	70f3      	strb	r3, [r6, #3]
 80066c8:	e029      	b.n	800671e <dir_register+0x132>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80066ca:	2401      	movs	r4, #1
 80066cc:	e7d8      	b.n	8006680 <dir_register+0x94>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80066ce:	6929      	ldr	r1, [r5, #16]
 80066d0:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 80066d4:	4628      	mov	r0, r5
 80066d6:	f7ff fa50 	bl	8005b7a <dir_sdi>
		if (res == FR_OK) {
 80066da:	4681      	mov	r9, r0
 80066dc:	2800      	cmp	r0, #0
 80066de:	d1d7      	bne.n	8006690 <dir_register+0xa4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80066e0:	6a28      	ldr	r0, [r5, #32]
 80066e2:	f7fe ff9d 	bl	8005620 <sum_sfn>
 80066e6:	4607      	mov	r7, r0
				res = move_window(fs, dp->sect);
 80066e8:	69a9      	ldr	r1, [r5, #24]
 80066ea:	4630      	mov	r0, r6
 80066ec:	f7ff f814 	bl	8005718 <move_window>
				if (res != FR_OK) break;
 80066f0:	4681      	mov	r9, r0
 80066f2:	2800      	cmp	r0, #0
 80066f4:	d1cc      	bne.n	8006690 <dir_register+0xa4>
				put_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80066f6:	463b      	mov	r3, r7
 80066f8:	b2e2      	uxtb	r2, r4
 80066fa:	69e9      	ldr	r1, [r5, #28]
 80066fc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80066fe:	f7fe ff03 	bl	8005508 <put_lfn>
				fs->wflag = 1;
 8006702:	2301      	movs	r3, #1
 8006704:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006706:	2100      	movs	r1, #0
 8006708:	4628      	mov	r0, r5
 800670a:	f7ff fbaf 	bl	8005e6c <dir_next>
			} while (res == FR_OK && --nent);
 800670e:	4681      	mov	r9, r0
 8006710:	2800      	cmp	r0, #0
 8006712:	d1bd      	bne.n	8006690 <dir_register+0xa4>
 8006714:	3c01      	subs	r4, #1
 8006716:	d1e7      	bne.n	80066e8 <dir_register+0xfc>
 8006718:	e7ba      	b.n	8006690 <dir_register+0xa4>
	if (fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800671a:	f04f 0906 	mov.w	r9, #6
}
 800671e:	4648      	mov	r0, r9
 8006720:	b004      	add	sp, #16
 8006722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006726:	f04f 0907 	mov.w	r9, #7
 800672a:	e7f8      	b.n	800671e <dir_register+0x132>
 800672c:	4ec4ec4f 	.word	0x4ec4ec4f

08006730 <sync_fs>:
{
 8006730:	b570      	push	{r4, r5, r6, lr}
 8006732:	4604      	mov	r4, r0
	res = sync_window(fs);
 8006734:	f7fe ffc6 	bl	80056c4 <sync_window>
	if (res == FR_OK) {
 8006738:	4605      	mov	r5, r0
 800673a:	b948      	cbnz	r0, 8006750 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800673c:	7823      	ldrb	r3, [r4, #0]
 800673e:	2b03      	cmp	r3, #3
 8006740:	d008      	beq.n	8006754 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006742:	2200      	movs	r2, #0
 8006744:	4611      	mov	r1, r2
 8006746:	7860      	ldrb	r0, [r4, #1]
 8006748:	f7fd faa9 	bl	8003c9e <disk_ioctl>
 800674c:	b100      	cbz	r0, 8006750 <sync_fs+0x20>
 800674e:	2501      	movs	r5, #1
}
 8006750:	4628      	mov	r0, r5
 8006752:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006754:	7923      	ldrb	r3, [r4, #4]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d1f3      	bne.n	8006742 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 800675a:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800675e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006762:	2100      	movs	r1, #0
 8006764:	4630      	mov	r0, r6
 8006766:	f7fe fe3c 	bl	80053e2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800676a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800676e:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8006772:	f7fe fe1f 	bl	80053b4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006776:	490f      	ldr	r1, [pc, #60]	; (80067b4 <sync_fs+0x84>)
 8006778:	4630      	mov	r0, r6
 800677a:	f7fe fe1f 	bl	80053bc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800677e:	490e      	ldr	r1, [pc, #56]	; (80067b8 <sync_fs+0x88>)
 8006780:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8006784:	f7fe fe1a 	bl	80053bc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006788:	6921      	ldr	r1, [r4, #16]
 800678a:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800678e:	f7fe fe15 	bl	80053bc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006792:	68e1      	ldr	r1, [r4, #12]
 8006794:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8006798:	f7fe fe10 	bl	80053bc <st_dword>
			fs->winsect = fs->volbase + 1;
 800679c:	69e2      	ldr	r2, [r4, #28]
 800679e:	3201      	adds	r2, #1
 80067a0:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80067a2:	2301      	movs	r3, #1
 80067a4:	4631      	mov	r1, r6
 80067a6:	7860      	ldrb	r0, [r4, #1]
 80067a8:	f7fd fa74 	bl	8003c94 <disk_write>
			fs->fsi_flag = 0;
 80067ac:	2300      	movs	r3, #0
 80067ae:	7123      	strb	r3, [r4, #4]
 80067b0:	e7c7      	b.n	8006742 <sync_fs+0x12>
 80067b2:	bf00      	nop
 80067b4:	41615252 	.word	0x41615252
 80067b8:	61417272 	.word	0x61417272

080067bc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80067bc:	b510      	push	{r4, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	9001      	str	r0, [sp, #4]
 80067c2:	9100      	str	r1, [sp, #0]
 80067c4:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80067c6:	a804      	add	r0, sp, #16
 80067c8:	f840 1d04 	str.w	r1, [r0, #-4]!


	vol = get_ldnumber(&rp);
 80067cc:	f7fe ff36 	bl	800563c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80067d0:	2800      	cmp	r0, #0
 80067d2:	db19      	blt.n	8006808 <f_mount+0x4c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80067d4:	4b0e      	ldr	r3, [pc, #56]	; (8006810 <f_mount+0x54>)
 80067d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
 80067da:	b10b      	cbz	r3, 80067e0 <f_mount+0x24>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80067dc:	2200      	movs	r2, #0
 80067de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80067e0:	9b01      	ldr	r3, [sp, #4]
 80067e2:	b10b      	cbz	r3, 80067e8 <f_mount+0x2c>
		fs->fs_type = 0;				/* Clear new fs object */
 80067e4:	2200      	movs	r2, #0
 80067e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80067e8:	9b01      	ldr	r3, [sp, #4]
 80067ea:	4a09      	ldr	r2, [pc, #36]	; (8006810 <f_mount+0x54>)
 80067ec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80067f0:	b163      	cbz	r3, 800680c <f_mount+0x50>
 80067f2:	2c01      	cmp	r4, #1
 80067f4:	d002      	beq.n	80067fc <f_mount+0x40>
 80067f6:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80067f8:	b004      	add	sp, #16
 80067fa:	bd10      	pop	{r4, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80067fc:	2200      	movs	r2, #0
 80067fe:	a901      	add	r1, sp, #4
 8006800:	4668      	mov	r0, sp
 8006802:	f7fe ffd3 	bl	80057ac <find_volume>
	LEAVE_FF(fs, res);
 8006806:	e7f7      	b.n	80067f8 <f_mount+0x3c>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006808:	200b      	movs	r0, #11
 800680a:	e7f5      	b.n	80067f8 <f_mount+0x3c>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800680c:	2000      	movs	r0, #0
 800680e:	e7f3      	b.n	80067f8 <f_mount+0x3c>
 8006810:	20000fec 	.word	0x20000fec

08006814 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006818:	b093      	sub	sp, #76	; 0x4c
 800681a:	9101      	str	r1, [sp, #4]
	DWORD dw, cl;
#endif
	DEF_NAMBUF;


	if (!fp) return FR_INVALID_OBJECT;
 800681c:	2800      	cmp	r0, #0
 800681e:	f000 80af 	beq.w	8006980 <f_open+0x16c>
 8006822:	4604      	mov	r4, r0
 8006824:	4615      	mov	r5, r2
	fp->obj.fs = 0;		/* Clear file object */
 8006826:	2300      	movs	r3, #0
 8006828:	6003      	str	r3, [r0, #0]

	/* Get logical drive number */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800682a:	f002 071f 	and.w	r7, r2, #31
	res = find_volume(&path, &fs, mode);
 800682e:	463a      	mov	r2, r7
 8006830:	a906      	add	r1, sp, #24
 8006832:	a801      	add	r0, sp, #4
 8006834:	f7fe ffba 	bl	80057ac <find_volume>
	if (res == FR_OK) {
 8006838:	4606      	mov	r6, r0
 800683a:	b118      	cbz	r0, 8006844 <f_open+0x30>

		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
 800683c:	4630      	mov	r0, r6
 800683e:	b013      	add	sp, #76	; 0x4c
 8006840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 8006844:	9b06      	ldr	r3, [sp, #24]
 8006846:	9307      	str	r3, [sp, #28]
		INIT_NAMBUF(dj);
 8006848:	ab03      	add	r3, sp, #12
 800684a:	930f      	str	r3, [sp, #60]	; 0x3c
 800684c:	4b4d      	ldr	r3, [pc, #308]	; (8006984 <f_open+0x170>)
 800684e:	9311      	str	r3, [sp, #68]	; 0x44
		res = follow_path(&dj, path);	/* Follow the file path */
 8006850:	9901      	ldr	r1, [sp, #4]
 8006852:	a807      	add	r0, sp, #28
 8006854:	f7ff fe85 	bl	8006562 <follow_path>
		if (res == FR_OK) {
 8006858:	4606      	mov	r6, r0
 800685a:	b920      	cbnz	r0, 8006866 <f_open+0x52>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800685c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800685e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8006862:	2b00      	cmp	r3, #0
 8006864:	db46      	blt.n	80068f4 <f_open+0xe0>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006866:	f015 0f1c 	tst.w	r5, #28
 800686a:	d054      	beq.n	8006916 <f_open+0x102>
			if (res != FR_OK) {					/* No file, create new */
 800686c:	2e00      	cmp	r6, #0
 800686e:	d048      	beq.n	8006902 <f_open+0xee>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8006870:	2e04      	cmp	r6, #4
 8006872:	d041      	beq.n	80068f8 <f_open+0xe4>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006874:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006878:	2e00      	cmp	r6, #0
 800687a:	d15b      	bne.n	8006934 <f_open+0x120>
 800687c:	f017 0f08 	tst.w	r7, #8
 8006880:	d058      	beq.n	8006934 <f_open+0x120>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006882:	4d41      	ldr	r5, [pc, #260]	; (8006988 <f_open+0x174>)
 8006884:	4629      	mov	r1, r5
 8006886:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006888:	300e      	adds	r0, #14
 800688a:	f7fe fd97 	bl	80053bc <st_dword>
					st_dword(dj.dir + DIR_WrtTime, dw);	/* Set modified time */
 800688e:	4629      	mov	r1, r5
 8006890:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006892:	3016      	adds	r0, #22
 8006894:	f7fe fd92 	bl	80053bc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800689a:	2220      	movs	r2, #32
 800689c:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800689e:	9d06      	ldr	r5, [sp, #24]
 80068a0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80068a4:	4641      	mov	r1, r8
 80068a6:	4628      	mov	r0, r5
 80068a8:	f7fe fdc3 	bl	8005432 <ld_clust>
 80068ac:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80068ae:	2200      	movs	r2, #0
 80068b0:	4641      	mov	r1, r8
 80068b2:	4628      	mov	r0, r5
 80068b4:	f7fe fdd0 	bl	8005458 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80068b8:	2100      	movs	r1, #0
 80068ba:	980e      	ldr	r0, [sp, #56]	; 0x38
 80068bc:	301c      	adds	r0, #28
 80068be:	f7fe fd7d 	bl	80053bc <st_dword>
					fs->wflag = 1;
 80068c2:	9b06      	ldr	r3, [sp, #24]
 80068c4:	2201      	movs	r2, #1
 80068c6:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 80068c8:	f1b9 0f00 	cmp.w	r9, #0
 80068cc:	d032      	beq.n	8006934 <f_open+0x120>
						dw = fs->winsect;
 80068ce:	9b06      	ldr	r3, [sp, #24]
 80068d0:	6add      	ldr	r5, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 80068d2:	2200      	movs	r2, #0
 80068d4:	4649      	mov	r1, r9
 80068d6:	a807      	add	r0, sp, #28
 80068d8:	f7ff fa89 	bl	8005dee <remove_chain>
						if (res == FR_OK) {
 80068dc:	4606      	mov	r6, r0
 80068de:	bb48      	cbnz	r0, 8006934 <f_open+0x120>
							res = move_window(fs, dw);
 80068e0:	4629      	mov	r1, r5
 80068e2:	9806      	ldr	r0, [sp, #24]
 80068e4:	f7fe ff18 	bl	8005718 <move_window>
 80068e8:	4606      	mov	r6, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80068ea:	f109 33ff 	add.w	r3, r9, #4294967295
 80068ee:	9a06      	ldr	r2, [sp, #24]
 80068f0:	60d3      	str	r3, [r2, #12]
 80068f2:	e01f      	b.n	8006934 <f_open+0x120>
				res = FR_INVALID_NAME;
 80068f4:	2606      	movs	r6, #6
 80068f6:	e7b6      	b.n	8006866 <f_open+0x52>
					res = dir_register(&dj);
 80068f8:	a807      	add	r0, sp, #28
 80068fa:	f7ff fe77 	bl	80065ec <dir_register>
 80068fe:	4606      	mov	r6, r0
 8006900:	e7b8      	b.n	8006874 <f_open+0x60>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006902:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8006906:	f013 0f11 	tst.w	r3, #17
 800690a:	d112      	bne.n	8006932 <f_open+0x11e>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800690c:	f015 0f04 	tst.w	r5, #4
 8006910:	d0b2      	beq.n	8006878 <f_open+0x64>
 8006912:	2608      	movs	r6, #8
 8006914:	e00e      	b.n	8006934 <f_open+0x120>
			if (res == FR_OK) {					/* Following succeeded */
 8006916:	b96e      	cbnz	r6, 8006934 <f_open+0x120>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006918:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 800691c:	f013 0f10 	tst.w	r3, #16
 8006920:	d12c      	bne.n	800697c <f_open+0x168>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006922:	f015 0f02 	tst.w	r5, #2
 8006926:	d005      	beq.n	8006934 <f_open+0x120>
 8006928:	f013 0f01 	tst.w	r3, #1
 800692c:	d002      	beq.n	8006934 <f_open+0x120>
						res = FR_DENIED;
 800692e:	2607      	movs	r6, #7
 8006930:	e00b      	b.n	800694a <f_open+0x136>
					res = FR_DENIED;
 8006932:	2607      	movs	r6, #7
		if (res == FR_OK) {
 8006934:	b94e      	cbnz	r6, 800694a <f_open+0x136>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006936:	f017 0f08 	tst.w	r7, #8
 800693a:	d001      	beq.n	8006940 <f_open+0x12c>
				mode |= _FA_MODIFIED;
 800693c:	f047 0720 	orr.w	r7, r7, #32
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006940:	9b06      	ldr	r3, [sp, #24]
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	6223      	str	r3, [r4, #32]
			fp->dir_ptr = dj.dir;
 8006946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006948:	6263      	str	r3, [r4, #36]	; 0x24
		if (res == FR_OK) {
 800694a:	2e00      	cmp	r6, #0
 800694c:	f47f af76 	bne.w	800683c <f_open+0x28>
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
 8006950:	9d06      	ldr	r5, [sp, #24]
 8006952:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8006956:	4641      	mov	r1, r8
 8006958:	4628      	mov	r0, r5
 800695a:	f7fe fd6a 	bl	8005432 <ld_clust>
 800695e:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006960:	f108 001c 	add.w	r0, r8, #28
 8006964:	f7fe fd1b 	bl	800539e <ld_dword>
 8006968:	60e0      	str	r0, [r4, #12]
			fp->err = 0;			/* Clear error flag */
 800696a:	2300      	movs	r3, #0
 800696c:	7463      	strb	r3, [r4, #17]
			fp->fptr = 0;			/* Set file pointer */
 800696e:	6163      	str	r3, [r4, #20]
			fp->sect = 0;			/* Invalidate current data sector */
 8006970:	61e3      	str	r3, [r4, #28]
			fp->flag = mode;		/* File access mode */
 8006972:	7427      	strb	r7, [r4, #16]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006974:	6025      	str	r5, [r4, #0]
			fp->obj.id = fs->id;
 8006976:	88eb      	ldrh	r3, [r5, #6]
 8006978:	80a3      	strh	r3, [r4, #4]
 800697a:	e75f      	b.n	800683c <f_open+0x28>
					res = FR_NO_FILE;
 800697c:	2604      	movs	r6, #4
 800697e:	e7e4      	b.n	800694a <f_open+0x136>
	if (!fp) return FR_INVALID_OBJECT;
 8006980:	2609      	movs	r6, #9
 8006982:	e75b      	b.n	800683c <f_open+0x28>
 8006984:	20000ff4 	.word	0x20000ff4
 8006988:	48610000 	.word	0x48610000

0800698c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800698c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006990:	b085      	sub	sp, #20
 8006992:	4604      	mov	r4, r0
 8006994:	4689      	mov	r9, r1
 8006996:	4617      	mov	r7, r2
 8006998:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800699a:	2300      	movs	r3, #0
 800699c:	f8c8 3000 	str.w	r3, [r8]
	res = validate(fp, &fs);
 80069a0:	a903      	add	r1, sp, #12
 80069a2:	f7fe fe75 	bl	8005690 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80069a6:	4606      	mov	r6, r0
 80069a8:	2800      	cmp	r0, #0
 80069aa:	f040 80a2 	bne.w	8006af2 <f_read+0x166>
 80069ae:	7c66      	ldrb	r6, [r4, #17]
 80069b0:	2e00      	cmp	r6, #0
 80069b2:	f040 809e 	bne.w	8006af2 <f_read+0x166>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80069b6:	7c23      	ldrb	r3, [r4, #16]
 80069b8:	f013 0f01 	tst.w	r3, #1
 80069bc:	f000 80a3 	beq.w	8006b06 <f_read+0x17a>
	remain = fp->obj.objsize - fp->fptr;
 80069c0:	68e5      	ldr	r5, [r4, #12]
 80069c2:	6963      	ldr	r3, [r4, #20]
 80069c4:	1aed      	subs	r5, r5, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80069c6:	42bd      	cmp	r5, r7
 80069c8:	d35d      	bcc.n	8006a86 <f_read+0xfa>
 80069ca:	463d      	mov	r5, r7
 80069cc:	e05b      	b.n	8006a86 <f_read+0xfa>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80069ce:	69a1      	ldr	r1, [r4, #24]
 80069d0:	4620      	mov	r0, r4
 80069d2:	f7ff f86b 	bl	8005aac <get_fat>
 80069d6:	e066      	b.n	8006aa6 <f_read+0x11a>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80069d8:	2602      	movs	r6, #2
 80069da:	7466      	strb	r6, [r4, #17]
 80069dc:	e089      	b.n	8006af2 <f_read+0x166>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80069de:	2601      	movs	r6, #1
 80069e0:	7466      	strb	r6, [r4, #17]
 80069e2:	e086      	b.n	8006af2 <f_read+0x166>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 80069e4:	2602      	movs	r6, #2
 80069e6:	7466      	strb	r6, [r4, #17]
 80069e8:	e083      	b.n	8006af2 <f_read+0x166>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & _FA_DIRTY) && fp->sect - sect < cc) {
 80069ea:	7c23      	ldrb	r3, [r4, #16]
 80069ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80069f0:	d005      	beq.n	80069fe <f_read+0x72>
 80069f2:	69e0      	ldr	r0, [r4, #28]
 80069f4:	eba0 000a 	sub.w	r0, r0, sl
 80069f8:	9b01      	ldr	r3, [sp, #4]
 80069fa:	4298      	cmp	r0, r3
 80069fc:	d302      	bcc.n	8006a04 <f_read+0x78>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80069fe:	9b01      	ldr	r3, [sp, #4]
 8006a00:	025f      	lsls	r7, r3, #9
				continue;
 8006a02:	e036      	b.n	8006a72 <f_read+0xe6>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a08:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8006a0c:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8006a10:	f7fe fcde 	bl	80053d0 <mem_cpy>
 8006a14:	e7f3      	b.n	80069fe <f_read+0x72>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006a16:	69e2      	ldr	r2, [r4, #28]
 8006a18:	4552      	cmp	r2, sl
 8006a1a:	d01a      	beq.n	8006a52 <f_read+0xc6>
#if !_FS_READONLY
				if (fp->flag & _FA_DIRTY) {		/* Write-back dirty sector cache */
 8006a1c:	7c23      	ldrb	r3, [r4, #16]
 8006a1e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a22:	d00c      	beq.n	8006a3e <f_read+0xb2>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 8006a24:	2301      	movs	r3, #1
 8006a26:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8006a2a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8006a2e:	f7fd f931 	bl	8003c94 <disk_write>
 8006a32:	2800      	cmp	r0, #0
 8006a34:	d161      	bne.n	8006afa <f_read+0x16e>
						ABORT(fs, FR_DISK_ERR);
					}
					fp->flag &= ~_FA_DIRTY;
 8006a36:	7c23      	ldrb	r3, [r4, #16]
 8006a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a3c:	7423      	strb	r3, [r4, #16]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	{	/* Fill sector cache */
 8006a3e:	2301      	movs	r3, #1
 8006a40:	4652      	mov	r2, sl
 8006a42:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8006a46:	9803      	ldr	r0, [sp, #12]
 8006a48:	7840      	ldrb	r0, [r0, #1]
 8006a4a:	f7fd f91e 	bl	8003c8a <disk_read>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d156      	bne.n	8006b00 <f_read+0x174>
					ABORT(fs, FR_DISK_ERR);
				}
			}
#endif
			fp->sect = sect;
 8006a52:	f8c4 a01c 	str.w	sl, [r4, #28]
		}
		rcnt = SS(fs) - ((UINT)fp->fptr % SS(fs));	/* Get partial sector data from sector buffer */
 8006a56:	6961      	ldr	r1, [r4, #20]
 8006a58:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006a5c:	f5c1 7700 	rsb	r7, r1, #512	; 0x200
		if (rcnt > btr) rcnt = btr;
 8006a60:	42bd      	cmp	r5, r7
 8006a62:	d200      	bcs.n	8006a66 <f_read+0xda>
 8006a64:	462f      	mov	r7, r5
		if (move_window(fs, fp->sect) != FR_OK) {	/* Move sector window */
			ABORT(fs, FR_DISK_ERR);
		}
		mem_cpy(rbuff, &fs->win[fp->fptr % SS(fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fs)], rcnt);	/* Pick partial sector */
 8006a66:	3128      	adds	r1, #40	; 0x28
 8006a68:	463a      	mov	r2, r7
 8006a6a:	4421      	add	r1, r4
 8006a6c:	4648      	mov	r0, r9
 8006a6e:	f7fe fcaf 	bl	80053d0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006a72:	44b9      	add	r9, r7
 8006a74:	6963      	ldr	r3, [r4, #20]
 8006a76:	443b      	add	r3, r7
 8006a78:	6163      	str	r3, [r4, #20]
 8006a7a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a7e:	443b      	add	r3, r7
 8006a80:	f8c8 3000 	str.w	r3, [r8]
 8006a84:	1bed      	subs	r5, r5, r7
	for ( ;  btr;								/* Repeat until all data read */
 8006a86:	2d00      	cmp	r5, #0
 8006a88:	d033      	beq.n	8006af2 <f_read+0x166>
		if ((fp->fptr % SS(fs)) == 0) {			/* On the sector boundary? */
 8006a8a:	6963      	ldr	r3, [r4, #20]
 8006a8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a90:	2a00      	cmp	r2, #0
 8006a92:	d1e0      	bne.n	8006a56 <f_read+0xca>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006a94:	9a03      	ldr	r2, [sp, #12]
 8006a96:	8957      	ldrh	r7, [r2, #10]
 8006a98:	3f01      	subs	r7, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8006a9a:	ea17 2753 	ands.w	r7, r7, r3, lsr #9
 8006a9e:	d108      	bne.n	8006ab2 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d194      	bne.n	80069ce <f_read+0x42>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006aa4:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006aa6:	2801      	cmp	r0, #1
 8006aa8:	d996      	bls.n	80069d8 <f_read+0x4c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006aaa:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006aae:	d096      	beq.n	80069de <f_read+0x52>
				fp->clust = clst;				/* Update current cluster */
 8006ab0:	61a0      	str	r0, [r4, #24]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006ab2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006ab6:	69a1      	ldr	r1, [r4, #24]
 8006ab8:	4658      	mov	r0, fp
 8006aba:	f7fe fcae 	bl	800541a <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006abe:	4682      	mov	sl, r0
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	d08f      	beq.n	80069e4 <f_read+0x58>
			sect += csect;
 8006ac4:	44ba      	add	sl, r7
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006ac6:	0a6b      	lsrs	r3, r5, #9
 8006ac8:	9301      	str	r3, [sp, #4]
 8006aca:	d0a4      	beq.n	8006a16 <f_read+0x8a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006acc:	18fb      	adds	r3, r7, r3
 8006ace:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d901      	bls.n	8006ada <f_read+0x14e>
					cc = fs->csize - csect;
 8006ad6:	1bd3      	subs	r3, r2, r7
 8006ad8:	9301      	str	r3, [sp, #4]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) {
 8006ada:	9b01      	ldr	r3, [sp, #4]
 8006adc:	4652      	mov	r2, sl
 8006ade:	4649      	mov	r1, r9
 8006ae0:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8006ae4:	f7fd f8d1 	bl	8003c8a <disk_read>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	f43f af7e 	beq.w	80069ea <f_read+0x5e>
					ABORT(fs, FR_DISK_ERR);
 8006aee:	2601      	movs	r6, #1
 8006af0:	7466      	strb	r6, [r4, #17]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8006af2:	4630      	mov	r0, r6
 8006af4:	b005      	add	sp, #20
 8006af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						ABORT(fs, FR_DISK_ERR);
 8006afa:	2601      	movs	r6, #1
 8006afc:	7466      	strb	r6, [r4, #17]
 8006afe:	e7f8      	b.n	8006af2 <f_read+0x166>
					ABORT(fs, FR_DISK_ERR);
 8006b00:	2601      	movs	r6, #1
 8006b02:	7466      	strb	r6, [r4, #17]
 8006b04:	e7f5      	b.n	8006af2 <f_read+0x166>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006b06:	2607      	movs	r6, #7
 8006b08:	e7f3      	b.n	8006af2 <f_read+0x166>

08006b0a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006b0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	4604      	mov	r4, r0
 8006b12:	4688      	mov	r8, r1
 8006b14:	4615      	mov	r5, r2
 8006b16:	4699      	mov	r9, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f8c9 3000 	str.w	r3, [r9]
	res = validate(fp, &fs);
 8006b1e:	a903      	add	r1, sp, #12
 8006b20:	f7fe fdb6 	bl	8005690 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006b24:	4607      	mov	r7, r0
 8006b26:	2800      	cmp	r0, #0
 8006b28:	f040 80b2 	bne.w	8006c90 <f_write+0x186>
 8006b2c:	7c67      	ldrb	r7, [r4, #17]
 8006b2e:	2f00      	cmp	r7, #0
 8006b30:	f040 80ae 	bne.w	8006c90 <f_write+0x186>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006b34:	7c23      	ldrb	r3, [r4, #16]
 8006b36:	f013 0f02 	tst.w	r3, #2
 8006b3a:	f000 80bf 	beq.w	8006cbc <f_write+0x1b2>

	/* Check fptr wrap-around (file size cannot exceed the limit on each FAT specs) */
	if ((_FS_EXFAT && fs->fs_type == FS_EXFAT && fp->fptr + btw < fp->fptr)
		|| (DWORD)fp->fptr + btw < (DWORD)fp->fptr) {
 8006b3e:	6963      	ldr	r3, [r4, #20]
	if ((_FS_EXFAT && fs->fs_type == FS_EXFAT && fp->fptr + btw < fp->fptr)
 8006b40:	42eb      	cmn	r3, r5
 8006b42:	d364      	bcc.n	8006c0e <f_write+0x104>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006b44:	43dd      	mvns	r5, r3
 8006b46:	e062      	b.n	8006c0e <f_write+0x104>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
			if (csect == 0) {				/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->obj.sclust;	/* Follow from the origin */
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006b48:	2100      	movs	r1, #0
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f7ff f8ed 	bl	8005d2a <create_chain>
 8006b50:	e06f      	b.n	8006c32 <f_write+0x128>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006b52:	69a1      	ldr	r1, [r4, #24]
 8006b54:	4620      	mov	r0, r4
 8006b56:	f7ff f8e8 	bl	8005d2a <create_chain>
 8006b5a:	e06a      	b.n	8006c32 <f_write+0x128>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006b5c:	2702      	movs	r7, #2
 8006b5e:	7467      	strb	r7, [r4, #17]
 8006b60:	e096      	b.n	8006c90 <f_write+0x186>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006b62:	2701      	movs	r7, #1
 8006b64:	7467      	strb	r7, [r4, #17]
 8006b66:	e093      	b.n	8006c90 <f_write+0x186>
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK)	{	/* Write-back sector cache */
				ABORT(fs, FR_DISK_ERR);
			}
#else
			if (fp->flag & _FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 8006b68:	2301      	movs	r3, #1
 8006b6a:	69e2      	ldr	r2, [r4, #28]
 8006b6c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8006b70:	9803      	ldr	r0, [sp, #12]
 8006b72:	7840      	ldrb	r0, [r0, #1]
 8006b74:	f7fd f88e 	bl	8003c94 <disk_write>
 8006b78:	b920      	cbnz	r0, 8006b84 <f_write+0x7a>
					ABORT(fs, FR_DISK_ERR);
				}
				fp->flag &= ~_FA_DIRTY;
 8006b7a:	7c23      	ldrb	r3, [r4, #16]
 8006b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b80:	7423      	strb	r3, [r4, #16]
 8006b82:	e065      	b.n	8006c50 <f_write+0x146>
					ABORT(fs, FR_DISK_ERR);
 8006b84:	2701      	movs	r7, #1
 8006b86:	7467      	strb	r7, [r4, #17]
 8006b88:	e082      	b.n	8006c90 <f_write+0x186>
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006b8a:	2702      	movs	r7, #2
 8006b8c:	7467      	strb	r7, [r4, #17]
 8006b8e:	e07f      	b.n	8006c90 <f_write+0x186>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006b90:	69e1      	ldr	r1, [r4, #28]
 8006b92:	eba1 010a 	sub.w	r1, r1, sl
 8006b96:	4559      	cmp	r1, fp
 8006b98:	d302      	bcc.n	8006ba0 <f_write+0x96>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= ~_FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006b9a:	ea4f 264b 	mov.w	r6, fp, lsl #9
				continue;
 8006b9e:	e027      	b.n	8006bf0 <f_write+0xe6>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ba4:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 8006ba8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006bac:	f7fe fc10 	bl	80053d0 <mem_cpy>
					fp->flag &= ~_FA_DIRTY;
 8006bb0:	7c23      	ldrb	r3, [r4, #16]
 8006bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb6:	7423      	strb	r3, [r4, #16]
 8006bb8:	e7ef      	b.n	8006b9a <f_write+0x90>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect) {		/* Fill sector cache with file data */
 8006bba:	69e3      	ldr	r3, [r4, #28]
 8006bbc:	4553      	cmp	r3, sl
 8006bbe:	d003      	beq.n	8006bc8 <f_write+0xbe>
				if (fp->fptr < fp->obj.objsize &&
 8006bc0:	6962      	ldr	r2, [r4, #20]
 8006bc2:	68e3      	ldr	r3, [r4, #12]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d367      	bcc.n	8006c98 <f_write+0x18e>
					disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
						ABORT(fs, FR_DISK_ERR);
				}
			}
#endif
			fp->sect = sect;
 8006bc8:	f8c4 a01c 	str.w	sl, [r4, #28]
		}
		wcnt = SS(fs) - ((UINT)fp->fptr % SS(fs));	/* Put partial sector into file I/O buffer */
 8006bcc:	6960      	ldr	r0, [r4, #20]
 8006bce:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8006bd2:	f5c0 7600 	rsb	r6, r0, #512	; 0x200
		if (wcnt > btw) wcnt = btw;
 8006bd6:	42b5      	cmp	r5, r6
 8006bd8:	d200      	bcs.n	8006bdc <f_write+0xd2>
 8006bda:	462e      	mov	r6, r5
			ABORT(fs, FR_DISK_ERR);
		}
		mem_cpy(&fs->win[fp->fptr % SS(fs)], wbuff, wcnt);	/* Fit partial sector */
		fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fs)], wbuff, wcnt);	/* Fit partial sector */
 8006bdc:	3028      	adds	r0, #40	; 0x28
 8006bde:	4632      	mov	r2, r6
 8006be0:	4641      	mov	r1, r8
 8006be2:	4420      	add	r0, r4
 8006be4:	f7fe fbf4 	bl	80053d0 <mem_cpy>
		fp->flag |= _FA_DIRTY;
 8006be8:	7c23      	ldrb	r3, [r4, #16]
 8006bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bee:	7423      	strb	r3, [r4, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006bf0:	44b0      	add	r8, r6
 8006bf2:	6963      	ldr	r3, [r4, #20]
 8006bf4:	4433      	add	r3, r6
 8006bf6:	6163      	str	r3, [r4, #20]
 8006bf8:	68e2      	ldr	r2, [r4, #12]
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	bf38      	it	cc
 8006bfe:	4613      	movcc	r3, r2
 8006c00:	60e3      	str	r3, [r4, #12]
 8006c02:	f8d9 3000 	ldr.w	r3, [r9]
 8006c06:	4433      	add	r3, r6
 8006c08:	f8c9 3000 	str.w	r3, [r9]
 8006c0c:	1bad      	subs	r5, r5, r6
	for ( ;  btw;							/* Repeat until all data written */
 8006c0e:	2d00      	cmp	r5, #0
 8006c10:	d04f      	beq.n	8006cb2 <f_write+0x1a8>
		if ((fp->fptr % SS(fs)) == 0) {		/* On the sector boundary? */
 8006c12:	6963      	ldr	r3, [r4, #20]
 8006c14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c18:	2a00      	cmp	r2, #0
 8006c1a:	d1d7      	bne.n	8006bcc <f_write+0xc2>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006c1c:	9a03      	ldr	r2, [sp, #12]
 8006c1e:	8956      	ldrh	r6, [r2, #10]
 8006c20:	3e01      	subs	r6, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8006c22:	ea16 2653 	ands.w	r6, r6, r3, lsr #9
 8006c26:	d10f      	bne.n	8006c48 <f_write+0x13e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d192      	bne.n	8006b52 <f_write+0x48>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006c2c:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	d08a      	beq.n	8006b48 <f_write+0x3e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d03d      	beq.n	8006cb2 <f_write+0x1a8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006c36:	2801      	cmp	r0, #1
 8006c38:	d090      	beq.n	8006b5c <f_write+0x52>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006c3a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c3e:	d090      	beq.n	8006b62 <f_write+0x58>
				fp->clust = clst;			/* Update current cluster */
 8006c40:	61a0      	str	r0, [r4, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006c42:	68a3      	ldr	r3, [r4, #8]
 8006c44:	b903      	cbnz	r3, 8006c48 <f_write+0x13e>
 8006c46:	60a0      	str	r0, [r4, #8]
			if (fp->flag & _FA_DIRTY) {		/* Write-back sector cache */
 8006c48:	7c23      	ldrb	r3, [r4, #16]
 8006c4a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006c4e:	d18b      	bne.n	8006b68 <f_write+0x5e>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006c50:	9b03      	ldr	r3, [sp, #12]
 8006c52:	9301      	str	r3, [sp, #4]
 8006c54:	69a1      	ldr	r1, [r4, #24]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fe fbdf 	bl	800541a <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006c5c:	4682      	mov	sl, r0
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d093      	beq.n	8006b8a <f_write+0x80>
			sect += csect;
 8006c62:	44b2      	add	sl, r6
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006c64:	ea5f 2b55 	movs.w	fp, r5, lsr #9
 8006c68:	d0a7      	beq.n	8006bba <f_write+0xb0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006c6a:	eb06 030b 	add.w	r3, r6, fp
 8006c6e:	9a01      	ldr	r2, [sp, #4]
 8006c70:	8952      	ldrh	r2, [r2, #10]
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d901      	bls.n	8006c7a <f_write+0x170>
					cc = fs->csize - csect;
 8006c76:	eba2 0b06 	sub.w	fp, r2, r6
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) {
 8006c7a:	465b      	mov	r3, fp
 8006c7c:	4652      	mov	r2, sl
 8006c7e:	4641      	mov	r1, r8
 8006c80:	9801      	ldr	r0, [sp, #4]
 8006c82:	7840      	ldrb	r0, [r0, #1]
 8006c84:	f7fd f806 	bl	8003c94 <disk_write>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	d081      	beq.n	8006b90 <f_write+0x86>
					ABORT(fs, FR_DISK_ERR);
 8006c8c:	2701      	movs	r7, #1
 8006c8e:	7467      	strb	r7, [r4, #17]
	}

	fp->flag |= _FA_MODIFIED;						/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8006c90:	4638      	mov	r0, r7
 8006c92:	b005      	add	sp, #20
 8006c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006c98:	2301      	movs	r3, #1
 8006c9a:	4652      	mov	r2, sl
 8006c9c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8006ca0:	9801      	ldr	r0, [sp, #4]
 8006ca2:	7840      	ldrb	r0, [r0, #1]
 8006ca4:	f7fc fff1 	bl	8003c8a <disk_read>
				if (fp->fptr < fp->obj.objsize &&
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	d08d      	beq.n	8006bc8 <f_write+0xbe>
						ABORT(fs, FR_DISK_ERR);
 8006cac:	2701      	movs	r7, #1
 8006cae:	7467      	strb	r7, [r4, #17]
 8006cb0:	e7ee      	b.n	8006c90 <f_write+0x186>
	fp->flag |= _FA_MODIFIED;						/* Set file change flag */
 8006cb2:	7c23      	ldrb	r3, [r4, #16]
 8006cb4:	f043 0320 	orr.w	r3, r3, #32
 8006cb8:	7423      	strb	r3, [r4, #16]
	LEAVE_FF(fs, FR_OK);
 8006cba:	e7e9      	b.n	8006c90 <f_write+0x186>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006cbc:	2707      	movs	r7, #7
 8006cbe:	e7e7      	b.n	8006c90 <f_write+0x186>

08006cc0 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	460d      	mov	r5, r1
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8006cc8:	290a      	cmp	r1, #10
 8006cca:	d00d      	beq.n	8006ce8 <putc_bfd+0x28>
		putc_bfd(pb, '\r');
	}

	i = pb->idx;	/* Buffer write index (-1:error) */
 8006ccc:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	db08      	blt.n	8006ce4 <putc_bfd+0x24>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006cd2:	1c5e      	adds	r6, r3, #1
 8006cd4:	4423      	add	r3, r4
 8006cd6:	731d      	strb	r5, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006cd8:	2e3c      	cmp	r6, #60	; 0x3c
 8006cda:	dc09      	bgt.n	8006cf0 <putc_bfd+0x30>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
 8006cdc:	6066      	str	r6, [r4, #4]
	pb->nchr++;
 8006cde:	68a3      	ldr	r3, [r4, #8]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	60a3      	str	r3, [r4, #8]
}
 8006ce4:	b002      	add	sp, #8
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}
		putc_bfd(pb, '\r');
 8006ce8:	210d      	movs	r1, #13
 8006cea:	f7ff ffe9 	bl	8006cc0 <putc_bfd>
 8006cee:	e7ed      	b.n	8006ccc <putc_bfd+0xc>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006cf0:	ab01      	add	r3, sp, #4
 8006cf2:	4632      	mov	r2, r6
 8006cf4:	f104 010c 	add.w	r1, r4, #12
 8006cf8:	6820      	ldr	r0, [r4, #0]
 8006cfa:	f7ff ff06 	bl	8006b0a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006cfe:	9b01      	ldr	r3, [sp, #4]
 8006d00:	429e      	cmp	r6, r3
 8006d02:	d002      	beq.n	8006d0a <putc_bfd+0x4a>
 8006d04:	f04f 36ff 	mov.w	r6, #4294967295
 8006d08:	e7e8      	b.n	8006cdc <putc_bfd+0x1c>
 8006d0a:	2600      	movs	r6, #0
 8006d0c:	e7e6      	b.n	8006cdc <putc_bfd+0x1c>
	...

08006d10 <f_sync>:
{
 8006d10:	b530      	push	{r4, r5, lr}
 8006d12:	b083      	sub	sp, #12
 8006d14:	4604      	mov	r4, r0
	res = validate(fp, &fs);	/* Check validity of the object */
 8006d16:	a901      	add	r1, sp, #4
 8006d18:	f7fe fcba 	bl	8005690 <validate>
	if (res == FR_OK) {
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	b9c8      	cbnz	r0, 8006d54 <f_sync+0x44>
		if (fp->flag & _FA_MODIFIED) {	/* Is there any change to the file? */
 8006d20:	7c22      	ldrb	r2, [r4, #16]
 8006d22:	f012 0f20 	tst.w	r2, #32
 8006d26:	d015      	beq.n	8006d54 <f_sync+0x44>
			if (fp->flag & _FA_DIRTY) {	/* Write-back cached data if needed */
 8006d28:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006d2c:	d00c      	beq.n	8006d48 <f_sync+0x38>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 8006d2e:	2301      	movs	r3, #1
 8006d30:	69e2      	ldr	r2, [r4, #28]
 8006d32:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8006d36:	9801      	ldr	r0, [sp, #4]
 8006d38:	7840      	ldrb	r0, [r0, #1]
 8006d3a:	f7fc ffab 	bl	8003c94 <disk_write>
 8006d3e:	bb88      	cbnz	r0, 8006da4 <f_sync+0x94>
				fp->flag &= ~_FA_DIRTY;
 8006d40:	7c23      	ldrb	r3, [r4, #16]
 8006d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d46:	7423      	strb	r3, [r4, #16]
				res = move_window(fs, fp->dir_sect);
 8006d48:	6a21      	ldr	r1, [r4, #32]
 8006d4a:	9801      	ldr	r0, [sp, #4]
 8006d4c:	f7fe fce4 	bl	8005718 <move_window>
				if (res == FR_OK) {
 8006d50:	4603      	mov	r3, r0
 8006d52:	b110      	cbz	r0, 8006d5a <f_sync+0x4a>
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	b003      	add	sp, #12
 8006d58:	bd30      	pop	{r4, r5, pc}
					dir = fp->dir_ptr;
 8006d5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006d5c:	7aeb      	ldrb	r3, [r5, #11]
 8006d5e:	f043 0320 	orr.w	r3, r3, #32
 8006d62:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006d64:	68a2      	ldr	r2, [r4, #8]
 8006d66:	4629      	mov	r1, r5
 8006d68:	6820      	ldr	r0, [r4, #0]
 8006d6a:	f7fe fb75 	bl	8005458 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006d6e:	68e1      	ldr	r1, [r4, #12]
 8006d70:	f105 001c 	add.w	r0, r5, #28
 8006d74:	f7fe fb22 	bl	80053bc <st_dword>
					st_dword(dir + DIR_WrtTime, tm);				/* Update modified time */
 8006d78:	490b      	ldr	r1, [pc, #44]	; (8006da8 <f_sync+0x98>)
 8006d7a:	f105 0016 	add.w	r0, r5, #22
 8006d7e:	f7fe fb1d 	bl	80053bc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006d82:	2100      	movs	r1, #0
 8006d84:	f105 0012 	add.w	r0, r5, #18
 8006d88:	f7fe fb14 	bl	80053b4 <st_word>
					fs->wflag = 1;
 8006d8c:	9b01      	ldr	r3, [sp, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006d92:	9801      	ldr	r0, [sp, #4]
 8006d94:	f7ff fccc 	bl	8006730 <sync_fs>
 8006d98:	4603      	mov	r3, r0
					fp->flag &= ~_FA_MODIFIED;
 8006d9a:	7c22      	ldrb	r2, [r4, #16]
 8006d9c:	f022 0220 	bic.w	r2, r2, #32
 8006da0:	7422      	strb	r2, [r4, #16]
 8006da2:	e7d7      	b.n	8006d54 <f_sync+0x44>
					LEAVE_FF(fs, FR_DISK_ERR);
 8006da4:	2301      	movs	r3, #1
 8006da6:	e7d5      	b.n	8006d54 <f_sync+0x44>
 8006da8:	48610000 	.word	0x48610000

08006dac <f_close>:
{
 8006dac:	b510      	push	{r4, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 8006db2:	f7ff ffad 	bl	8006d10 <f_sync>
	if (res == FR_OK)
 8006db6:	4603      	mov	r3, r0
 8006db8:	b110      	cbz	r0, 8006dc0 <f_close+0x14>
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	b002      	add	sp, #8
 8006dbe:	bd10      	pop	{r4, pc}
		res = validate(fp, &fs);	/* Lock volume */
 8006dc0:	a901      	add	r1, sp, #4
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f7fe fc64 	bl	8005690 <validate>
		if (res == FR_OK) {
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	d1f5      	bne.n	8006dba <f_close+0xe>
				fp->obj.fs = 0;			/* Invalidate file object */
 8006dce:	2200      	movs	r2, #0
 8006dd0:	6022      	str	r2, [r4, #0]
 8006dd2:	e7f2      	b.n	8006dba <f_close+0xe>

08006dd4 <f_lseek>:
{
 8006dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd8:	b082      	sub	sp, #8
 8006dda:	4604      	mov	r4, r0
 8006ddc:	460f      	mov	r7, r1
	res = validate(fp, &fs);		/* Check validity of the object */
 8006dde:	a901      	add	r1, sp, #4
 8006de0:	f7fe fc56 	bl	8005690 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006de4:	4606      	mov	r6, r0
 8006de6:	2800      	cmp	r0, #0
 8006de8:	f040 80a2 	bne.w	8006f30 <f_lseek+0x15c>
 8006dec:	7c66      	ldrb	r6, [r4, #17]
 8006dee:	2e00      	cmp	r6, #0
 8006df0:	f040 809e 	bne.w	8006f30 <f_lseek+0x15c>
		if (ofs > fp->obj.objsize				/* In read-only mode, clip offset with the file size */
 8006df4:	68e3      	ldr	r3, [r4, #12]
 8006df6:	42bb      	cmp	r3, r7
 8006df8:	d204      	bcs.n	8006e04 <f_lseek+0x30>
			 && !(fp->flag & FA_WRITE)
 8006dfa:	7c22      	ldrb	r2, [r4, #16]
 8006dfc:	f012 0f02 	tst.w	r2, #2
 8006e00:	d100      	bne.n	8006e04 <f_lseek+0x30>
			) ofs = fp->obj.objsize;
 8006e02:	461f      	mov	r7, r3
		ifptr = fp->fptr;
 8006e04:	6963      	ldr	r3, [r4, #20]
		fp->fptr = nsect = 0;
 8006e06:	2200      	movs	r2, #0
 8006e08:	6162      	str	r2, [r4, #20]
		if (ofs) {
 8006e0a:	2f00      	cmp	r7, #0
 8006e0c:	d065      	beq.n	8006eda <f_lseek+0x106>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006e0e:	9a01      	ldr	r2, [sp, #4]
 8006e10:	f8b2 800a 	ldrh.w	r8, [r2, #10]
 8006e14:	ea4f 2848 	mov.w	r8, r8, lsl #9
			if (ifptr > 0 &&
 8006e18:	b173      	cbz	r3, 8006e38 <f_lseek+0x64>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006e1a:	1e7a      	subs	r2, r7, #1
 8006e1c:	fbb2 f2f8 	udiv	r2, r2, r8
 8006e20:	3b01      	subs	r3, #1
 8006e22:	fbb3 f1f8 	udiv	r1, r3, r8
			if (ifptr > 0 &&
 8006e26:	428a      	cmp	r2, r1
 8006e28:	d306      	bcc.n	8006e38 <f_lseek+0x64>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8006e2a:	f1c8 0200 	rsb	r2, r8, #0
 8006e2e:	4013      	ands	r3, r2
 8006e30:	6163      	str	r3, [r4, #20]
				ofs -= fp->fptr;
 8006e32:	1aff      	subs	r7, r7, r3
				clst = fp->clust;
 8006e34:	69a5      	ldr	r5, [r4, #24]
 8006e36:	e002      	b.n	8006e3e <f_lseek+0x6a>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8006e38:	68a5      	ldr	r5, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006e3a:	b115      	cbz	r5, 8006e42 <f_lseek+0x6e>
				fp->clust = clst;
 8006e3c:	61a5      	str	r5, [r4, #24]
			if (clst != 0) {
 8006e3e:	bb35      	cbnz	r5, 8006e8e <f_lseek+0xba>
 8006e40:	e04c      	b.n	8006edc <f_lseek+0x108>
					clst = create_chain(&fp->obj, 0);
 8006e42:	2100      	movs	r1, #0
 8006e44:	4620      	mov	r0, r4
 8006e46:	f7fe ff70 	bl	8005d2a <create_chain>
 8006e4a:	4605      	mov	r5, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006e4c:	2801      	cmp	r0, #1
 8006e4e:	d004      	beq.n	8006e5a <f_lseek+0x86>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006e50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006e54:	d004      	beq.n	8006e60 <f_lseek+0x8c>
					fp->obj.sclust = clst;
 8006e56:	60a0      	str	r0, [r4, #8]
 8006e58:	e7f0      	b.n	8006e3c <f_lseek+0x68>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006e5a:	2602      	movs	r6, #2
 8006e5c:	7466      	strb	r6, [r4, #17]
 8006e5e:	e067      	b.n	8006f30 <f_lseek+0x15c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006e60:	2601      	movs	r6, #1
 8006e62:	7466      	strb	r6, [r4, #17]
 8006e64:	e064      	b.n	8006f30 <f_lseek+0x15c>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8006e66:	4629      	mov	r1, r5
 8006e68:	4620      	mov	r0, r4
 8006e6a:	f7fe fe1f 	bl	8005aac <get_fat>
 8006e6e:	4605      	mov	r5, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006e70:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006e74:	d028      	beq.n	8006ec8 <f_lseek+0xf4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8006e76:	2d01      	cmp	r5, #1
 8006e78:	d929      	bls.n	8006ece <f_lseek+0xfa>
 8006e7a:	9b01      	ldr	r3, [sp, #4]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	42ab      	cmp	r3, r5
 8006e80:	d925      	bls.n	8006ece <f_lseek+0xfa>
					fp->clust = clst;
 8006e82:	61a5      	str	r5, [r4, #24]
					fp->fptr += bcs;
 8006e84:	6963      	ldr	r3, [r4, #20]
 8006e86:	4443      	add	r3, r8
 8006e88:	6163      	str	r3, [r4, #20]
					ofs -= bcs;
 8006e8a:	eba7 0708 	sub.w	r7, r7, r8
				while (ofs > bcs) {						/* Cluster following loop */
 8006e8e:	4547      	cmp	r7, r8
 8006e90:	d90b      	bls.n	8006eaa <f_lseek+0xd6>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006e92:	7c23      	ldrb	r3, [r4, #16]
 8006e94:	f013 0f02 	tst.w	r3, #2
 8006e98:	d0e5      	beq.n	8006e66 <f_lseek+0x92>
						clst = create_chain(&fp->obj, clst);	/* Force stretch if in write mode */
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f7fe ff44 	bl	8005d2a <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 8006ea2:	4605      	mov	r5, r0
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d1e3      	bne.n	8006e70 <f_lseek+0x9c>
							ofs = bcs; break;
 8006ea8:	4647      	mov	r7, r8
				fp->fptr += ofs;
 8006eaa:	6963      	ldr	r3, [r4, #20]
 8006eac:	443b      	add	r3, r7
 8006eae:	6163      	str	r3, [r4, #20]
				if (ofs % SS(fs)) {
 8006eb0:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d03f      	beq.n	8006f38 <f_lseek+0x164>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8006eb8:	4629      	mov	r1, r5
 8006eba:	9801      	ldr	r0, [sp, #4]
 8006ebc:	f7fe faad 	bl	800541a <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8006ec0:	b140      	cbz	r0, 8006ed4 <f_lseek+0x100>
					nsect += (DWORD)(ofs / SS(fs));
 8006ec2:	eb00 2557 	add.w	r5, r0, r7, lsr #9
 8006ec6:	e009      	b.n	8006edc <f_lseek+0x108>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006ec8:	2601      	movs	r6, #1
 8006eca:	7466      	strb	r6, [r4, #17]
 8006ecc:	e030      	b.n	8006f30 <f_lseek+0x15c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8006ece:	2602      	movs	r6, #2
 8006ed0:	7466      	strb	r6, [r4, #17]
 8006ed2:	e02d      	b.n	8006f30 <f_lseek+0x15c>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8006ed4:	2602      	movs	r6, #2
 8006ed6:	7466      	strb	r6, [r4, #17]
 8006ed8:	e02a      	b.n	8006f30 <f_lseek+0x15c>
		fp->fptr = nsect = 0;
 8006eda:	2500      	movs	r5, #0
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8006edc:	6963      	ldr	r3, [r4, #20]
 8006ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee2:	b1e3      	cbz	r3, 8006f1e <f_lseek+0x14a>
 8006ee4:	69e2      	ldr	r2, [r4, #28]
 8006ee6:	42aa      	cmp	r2, r5
 8006ee8:	d019      	beq.n	8006f1e <f_lseek+0x14a>
			if (fp->flag & _FA_DIRTY) {			/* Write-back dirty sector cache */
 8006eea:	7c23      	ldrb	r3, [r4, #16]
 8006eec:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ef0:	d00b      	beq.n	8006f0a <f_lseek+0x136>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8006ef8:	9801      	ldr	r0, [sp, #4]
 8006efa:	7840      	ldrb	r0, [r0, #1]
 8006efc:	f7fc feca 	bl	8003c94 <disk_write>
 8006f00:	b9e0      	cbnz	r0, 8006f3c <f_lseek+0x168>
				fp->flag &= ~_FA_DIRTY;
 8006f02:	7c23      	ldrb	r3, [r4, #16]
 8006f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f08:	7423      	strb	r3, [r4, #16]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) {	/* Fill sector cache */
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	462a      	mov	r2, r5
 8006f0e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8006f12:	9801      	ldr	r0, [sp, #4]
 8006f14:	7840      	ldrb	r0, [r0, #1]
 8006f16:	f7fc feb8 	bl	8003c8a <disk_read>
 8006f1a:	b990      	cbnz	r0, 8006f42 <f_lseek+0x16e>
			fp->sect = nsect;
 8006f1c:	61e5      	str	r5, [r4, #28]
		if (fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8006f1e:	6963      	ldr	r3, [r4, #20]
 8006f20:	68e2      	ldr	r2, [r4, #12]
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d904      	bls.n	8006f30 <f_lseek+0x15c>
			fp->obj.objsize = fp->fptr;
 8006f26:	60e3      	str	r3, [r4, #12]
			fp->flag |= _FA_MODIFIED;
 8006f28:	7c23      	ldrb	r3, [r4, #16]
 8006f2a:	f043 0320 	orr.w	r3, r3, #32
 8006f2e:	7423      	strb	r3, [r4, #16]
}
 8006f30:	4630      	mov	r0, r6
 8006f32:	b002      	add	sp, #8
 8006f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		fp->fptr = nsect = 0;
 8006f38:	2500      	movs	r5, #0
 8006f3a:	e7cf      	b.n	8006edc <f_lseek+0x108>
					ABORT(fs, FR_DISK_ERR);
 8006f3c:	2601      	movs	r6, #1
 8006f3e:	7466      	strb	r6, [r4, #17]
 8006f40:	e7f6      	b.n	8006f30 <f_lseek+0x15c>
				ABORT(fs, FR_DISK_ERR);
 8006f42:	2601      	movs	r6, #1
 8006f44:	7466      	strb	r6, [r4, #17]
 8006f46:	e7f3      	b.n	8006f30 <f_lseek+0x15c>

08006f48 <f_stat>:
{
 8006f48:	b530      	push	{r4, r5, lr}
 8006f4a:	b091      	sub	sp, #68	; 0x44
 8006f4c:	9001      	str	r0, [sp, #4]
 8006f4e:	460d      	mov	r5, r1
	res = find_volume(&path, &dj.obj.fs, 0);
 8006f50:	2200      	movs	r2, #0
 8006f52:	a905      	add	r1, sp, #20
 8006f54:	a801      	add	r0, sp, #4
 8006f56:	f7fe fc29 	bl	80057ac <find_volume>
	if (res == FR_OK) {
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	b110      	cbz	r0, 8006f64 <f_stat+0x1c>
}
 8006f5e:	4620      	mov	r0, r4
 8006f60:	b011      	add	sp, #68	; 0x44
 8006f62:	bd30      	pop	{r4, r5, pc}
		INIT_NAMBUF(dj);
 8006f64:	ab02      	add	r3, sp, #8
 8006f66:	930d      	str	r3, [sp, #52]	; 0x34
 8006f68:	4b0b      	ldr	r3, [pc, #44]	; (8006f98 <f_stat+0x50>)
 8006f6a:	930f      	str	r3, [sp, #60]	; 0x3c
		res = follow_path(&dj, path);	/* Follow the file path */
 8006f6c:	9901      	ldr	r1, [sp, #4]
 8006f6e:	a805      	add	r0, sp, #20
 8006f70:	f7ff faf7 	bl	8006562 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 8006f74:	4604      	mov	r4, r0
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d1f1      	bne.n	8006f5e <f_stat+0x16>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8006f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f7c:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	db06      	blt.n	8006f92 <f_stat+0x4a>
				if (fno) get_fileinfo(&dj, fno);
 8006f84:	2d00      	cmp	r5, #0
 8006f86:	d0ea      	beq.n	8006f5e <f_stat+0x16>
 8006f88:	4629      	mov	r1, r5
 8006f8a:	a805      	add	r0, sp, #20
 8006f8c:	f7ff f9b6 	bl	80062fc <get_fileinfo>
 8006f90:	e7e5      	b.n	8006f5e <f_stat+0x16>
				res = FR_INVALID_NAME;
 8006f92:	2406      	movs	r4, #6
 8006f94:	e7e3      	b.n	8006f5e <f_stat+0x16>
 8006f96:	bf00      	nop
 8006f98:	20000ff4 	.word	0x20000ff4

08006f9c <f_unlink>:
{
 8006f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f9e:	b09d      	sub	sp, #116	; 0x74
 8006fa0:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	a905      	add	r1, sp, #20
 8006fa6:	a801      	add	r0, sp, #4
 8006fa8:	f7fe fc00 	bl	80057ac <find_volume>
	dj.obj.fs = fs;
 8006fac:	9b05      	ldr	r3, [sp, #20]
 8006fae:	9311      	str	r3, [sp, #68]	; 0x44
	if (res == FR_OK) {
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	b110      	cbz	r0, 8006fba <f_unlink+0x1e>
}
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	b01d      	add	sp, #116	; 0x74
 8006fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		INIT_NAMBUF(dj);
 8006fba:	ab02      	add	r3, sp, #8
 8006fbc:	9319      	str	r3, [sp, #100]	; 0x64
 8006fbe:	4b25      	ldr	r3, [pc, #148]	; (8007054 <f_unlink+0xb8>)
 8006fc0:	931b      	str	r3, [sp, #108]	; 0x6c
		res = follow_path(&dj, path);		/* Follow the file path */
 8006fc2:	9901      	ldr	r1, [sp, #4]
 8006fc4:	a811      	add	r0, sp, #68	; 0x44
 8006fc6:	f7ff facc 	bl	8006562 <follow_path>
		if (res == FR_OK) {					/* The object is accessible */
 8006fca:	4604      	mov	r4, r0
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d1f1      	bne.n	8006fb4 <f_unlink+0x18>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8006fd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fd2:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	db1e      	blt.n	8007018 <f_unlink+0x7c>
				if (dj.obj.attr & AM_RDO) {
 8006fda:	f89d 504a 	ldrb.w	r5, [sp, #74]	; 0x4a
 8006fde:	f015 0f01 	tst.w	r5, #1
 8006fe2:	d12a      	bne.n	800703a <f_unlink+0x9e>
					dclst = ld_clust(fs, dj.dir);
 8006fe4:	9f05      	ldr	r7, [sp, #20]
 8006fe6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006fe8:	4638      	mov	r0, r7
 8006fea:	f7fe fa22 	bl	8005432 <ld_clust>
 8006fee:	4606      	mov	r6, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory ? */
 8006ff0:	f015 0f10 	tst.w	r5, #16
 8006ff4:	d012      	beq.n	800701c <f_unlink+0x80>
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8006ff6:	9706      	str	r7, [sp, #24]
						sdj.obj.sclust = dclst;
 8006ff8:	9008      	str	r0, [sp, #32]
						res = dir_sdi(&sdj, 0);
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	a806      	add	r0, sp, #24
 8006ffe:	f7fe fdbc 	bl	8005b7a <dir_sdi>
						if (res == FR_OK) {
 8007002:	4604      	mov	r4, r0
 8007004:	b950      	cbnz	r0, 800701c <f_unlink+0x80>
							res = dir_read(&sdj, 0);			/* Read an item */
 8007006:	2100      	movs	r1, #0
 8007008:	a806      	add	r0, sp, #24
 800700a:	f7fe ffdc 	bl	8005fc6 <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800700e:	4604      	mov	r4, r0
 8007010:	b1b0      	cbz	r0, 8007040 <f_unlink+0xa4>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8007012:	2804      	cmp	r0, #4
 8007014:	d102      	bne.n	800701c <f_unlink+0x80>
 8007016:	e003      	b.n	8007020 <f_unlink+0x84>
	DWORD dclst = 0;
 8007018:	2600      	movs	r6, #0
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800701a:	2406      	movs	r4, #6
			if (res == FR_OK) {
 800701c:	2c00      	cmp	r4, #0
 800701e:	d1c9      	bne.n	8006fb4 <f_unlink+0x18>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8007020:	a811      	add	r0, sp, #68	; 0x44
 8007022:	f7ff f82e 	bl	8006082 <dir_remove>
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8007026:	4604      	mov	r4, r0
 8007028:	b900      	cbnz	r0, 800702c <f_unlink+0x90>
 800702a:	b95e      	cbnz	r6, 8007044 <f_unlink+0xa8>
				if (res == FR_OK) res = sync_fs(fs);
 800702c:	2c00      	cmp	r4, #0
 800702e:	d1c1      	bne.n	8006fb4 <f_unlink+0x18>
 8007030:	9805      	ldr	r0, [sp, #20]
 8007032:	f7ff fb7d 	bl	8006730 <sync_fs>
 8007036:	4604      	mov	r4, r0
 8007038:	e7bc      	b.n	8006fb4 <f_unlink+0x18>
	DWORD dclst = 0;
 800703a:	2600      	movs	r6, #0
					res = FR_DENIED;		/* Cannot remove R/O object */
 800703c:	2407      	movs	r4, #7
 800703e:	e7ed      	b.n	800701c <f_unlink+0x80>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8007040:	2407      	movs	r4, #7
 8007042:	e7eb      	b.n	800701c <f_unlink+0x80>
					res = remove_chain(&dj.obj, dclst, 0);
 8007044:	2200      	movs	r2, #0
 8007046:	4631      	mov	r1, r6
 8007048:	a811      	add	r0, sp, #68	; 0x44
 800704a:	f7fe fed0 	bl	8005dee <remove_chain>
 800704e:	4604      	mov	r4, r0
 8007050:	e7ec      	b.n	800702c <f_unlink+0x90>
 8007052:	bf00      	nop
 8007054:	20000ff4 	.word	0x20000ff4

08007058 <f_gets>:
{
 8007058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800705c:	b082      	sub	sp, #8
 800705e:	4680      	mov	r8, r0
 8007060:	460e      	mov	r6, r1
 8007062:	4617      	mov	r7, r2
	TCHAR c, *p = buff;
 8007064:	4604      	mov	r4, r0
	int n = 0;
 8007066:	2500      	movs	r5, #0
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007068:	e001      	b.n	800706e <f_gets+0x16>
 800706a:	4622      	mov	r2, r4
 800706c:	4614      	mov	r4, r2
 800706e:	1e73      	subs	r3, r6, #1
 8007070:	42ab      	cmp	r3, r5
 8007072:	dd12      	ble.n	800709a <f_gets+0x42>
		f_read(fp, s, 1, &rc);
 8007074:	466b      	mov	r3, sp
 8007076:	2201      	movs	r2, #1
 8007078:	a901      	add	r1, sp, #4
 800707a:	4638      	mov	r0, r7
 800707c:	f7ff fc86 	bl	800698c <f_read>
		if (rc != 1) break;
 8007080:	9b00      	ldr	r3, [sp, #0]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d109      	bne.n	800709a <f_gets+0x42>
		c = s[0];
 8007086:	f89d 3004 	ldrb.w	r3, [sp, #4]
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800708a:	2b0d      	cmp	r3, #13
 800708c:	d0ed      	beq.n	800706a <f_gets+0x12>
		*p++ = c;
 800708e:	1c62      	adds	r2, r4, #1
 8007090:	7023      	strb	r3, [r4, #0]
		n++;
 8007092:	3501      	adds	r5, #1
		if (c == '\n') break;		/* Break on EOL */
 8007094:	2b0a      	cmp	r3, #10
 8007096:	d1e9      	bne.n	800706c <f_gets+0x14>
		*p++ = c;
 8007098:	4614      	mov	r4, r2
	*p = 0;
 800709a:	2300      	movs	r3, #0
 800709c:	7023      	strb	r3, [r4, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800709e:	b11d      	cbz	r5, 80070a8 <f_gets+0x50>
 80070a0:	4640      	mov	r0, r8
}
 80070a2:	b002      	add	sp, #8
 80070a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80070a8:	2000      	movs	r0, #0
 80070aa:	e7fa      	b.n	80070a2 <f_gets+0x4a>

080070ac <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80070ac:	b510      	push	{r4, lr}
 80070ae:	b094      	sub	sp, #80	; 0x50
 80070b0:	4604      	mov	r4, r0
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 80070b2:	9101      	str	r1, [sp, #4]
	pb.nchr = pb.idx = 0;
 80070b4:	2300      	movs	r3, #0
 80070b6:	9302      	str	r3, [sp, #8]
 80070b8:	9303      	str	r3, [sp, #12]

	while (*str)			/* Put the string */
 80070ba:	e003      	b.n	80070c4 <f_puts+0x18>
		putc_bfd(&pb, *str++);
 80070bc:	3401      	adds	r4, #1
 80070be:	a801      	add	r0, sp, #4
 80070c0:	f7ff fdfe 	bl	8006cc0 <putc_bfd>
	while (*str)			/* Put the string */
 80070c4:	7821      	ldrb	r1, [r4, #0]
 80070c6:	2900      	cmp	r1, #0
 80070c8:	d1f8      	bne.n	80070bc <f_puts+0x10>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 80070ca:	9a02      	ldr	r2, [sp, #8]
 80070cc:	2a00      	cmp	r2, #0
 80070ce:	db0c      	blt.n	80070ea <f_puts+0x3e>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80070d0:	466b      	mov	r3, sp
 80070d2:	a904      	add	r1, sp, #16
 80070d4:	9801      	ldr	r0, [sp, #4]
 80070d6:	f7ff fd18 	bl	8006b0a <f_write>
 80070da:	b948      	cbnz	r0, 80070f0 <f_puts+0x44>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80070dc:	9a02      	ldr	r2, [sp, #8]
 80070de:	9b00      	ldr	r3, [sp, #0]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d108      	bne.n	80070f6 <f_puts+0x4a>
 80070e4:	9803      	ldr	r0, [sp, #12]
	return EOF;
}
 80070e6:	b014      	add	sp, #80	; 0x50
 80070e8:	bd10      	pop	{r4, pc}
	return EOF;
 80070ea:	f04f 30ff 	mov.w	r0, #4294967295
 80070ee:	e7fa      	b.n	80070e6 <f_puts+0x3a>
 80070f0:	f04f 30ff 	mov.w	r0, #4294967295
 80070f4:	e7f7      	b.n	80070e6 <f_puts+0x3a>
 80070f6:	f04f 30ff 	mov.w	r0, #4294967295
 80070fa:	e7f4      	b.n	80070e6 <f_puts+0x3a>

080070fc <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80070fc:	287f      	cmp	r0, #127	; 0x7f
 80070fe:	d916      	bls.n	800712e <ff_convert+0x32>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007100:	b131      	cbz	r1, 8007110 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007102:	28ff      	cmp	r0, #255	; 0xff
 8007104:	d812      	bhi.n	800712c <ff_convert+0x30>
 8007106:	3880      	subs	r0, #128	; 0x80
 8007108:	4b09      	ldr	r3, [pc, #36]	; (8007130 <ff_convert+0x34>)
 800710a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800710e:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007110:	2300      	movs	r3, #0
 8007112:	2b7f      	cmp	r3, #127	; 0x7f
 8007114:	d807      	bhi.n	8007126 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 8007116:	4a06      	ldr	r2, [pc, #24]	; (8007130 <ff_convert+0x34>)
 8007118:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800711c:	4282      	cmp	r2, r0
 800711e:	d002      	beq.n	8007126 <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 8007120:	3301      	adds	r3, #1
 8007122:	b29b      	uxth	r3, r3
 8007124:	e7f5      	b.n	8007112 <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 8007126:	3380      	adds	r3, #128	; 0x80
 8007128:	b2d8      	uxtb	r0, r3
 800712a:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800712c:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800712e:	4770      	bx	lr
 8007130:	080160ac 	.word	0x080160ac

08007134 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007134:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8007138:	d207      	bcs.n	800714a <ff_wtoupper+0x16>
 800713a:	4b23      	ldr	r3, [pc, #140]	; (80071c8 <ff_wtoupper+0x94>)
	for (;;) {
		bc = *p++;								/* Get block base */
 800713c:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 800713e:	2a00      	cmp	r2, #0
 8007140:	d040      	beq.n	80071c4 <ff_wtoupper+0x90>
 8007142:	4290      	cmp	r0, r2
 8007144:	d33e      	bcc.n	80071c4 <ff_wtoupper+0x90>
{
 8007146:	b4f0      	push	{r4, r5, r6, r7}
 8007148:	e006      	b.n	8007158 <ff_wtoupper+0x24>
	p = chr < 0x1000 ? cvt1 : cvt2;
 800714a:	4b20      	ldr	r3, [pc, #128]	; (80071cc <ff_wtoupper+0x98>)
 800714c:	e7f6      	b.n	800713c <ff_wtoupper+0x8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800714e:	462b      	mov	r3, r5
		bc = *p++;								/* Get block base */
 8007150:	881a      	ldrh	r2, [r3, #0]
		if (!bc || chr < bc) break;
 8007152:	b1ca      	cbz	r2, 8007188 <ff_wtoupper+0x54>
 8007154:	4290      	cmp	r0, r2
 8007156:	d317      	bcc.n	8007188 <ff_wtoupper+0x54>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007158:	1d1d      	adds	r5, r3, #4
 800715a:	885b      	ldrh	r3, [r3, #2]
 800715c:	0a19      	lsrs	r1, r3, #8
 800715e:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 8007160:	189c      	adds	r4, r3, r2
 8007162:	42a0      	cmp	r0, r4
 8007164:	db04      	blt.n	8007170 <ff_wtoupper+0x3c>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8007166:	2900      	cmp	r1, #0
 8007168:	d1f1      	bne.n	800714e <ff_wtoupper+0x1a>
 800716a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800716e:	e7ef      	b.n	8007150 <ff_wtoupper+0x1c>
			switch (cmd) {
 8007170:	2908      	cmp	r1, #8
 8007172:	d809      	bhi.n	8007188 <ff_wtoupper+0x54>
 8007174:	e8df f001 	tbb	[pc, r1]
 8007178:	13100a05 	.word	0x13100a05
 800717c:	1f1c1916 	.word	0x1f1c1916
 8007180:	22          	.byte	0x22
 8007181:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007182:	1a86      	subs	r6, r0, r2
 8007184:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
	}

	return chr;
}
 8007188:	bcf0      	pop	{r4, r5, r6, r7}
 800718a:	4770      	bx	lr
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800718c:	1a82      	subs	r2, r0, r2
 800718e:	f002 0301 	and.w	r3, r2, #1
 8007192:	1ac0      	subs	r0, r0, r3
 8007194:	b280      	uxth	r0, r0
 8007196:	e7f7      	b.n	8007188 <ff_wtoupper+0x54>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007198:	3810      	subs	r0, #16
 800719a:	b280      	uxth	r0, r0
 800719c:	e7f4      	b.n	8007188 <ff_wtoupper+0x54>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800719e:	3820      	subs	r0, #32
 80071a0:	b280      	uxth	r0, r0
 80071a2:	e7f1      	b.n	8007188 <ff_wtoupper+0x54>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80071a4:	3830      	subs	r0, #48	; 0x30
 80071a6:	b280      	uxth	r0, r0
 80071a8:	e7ee      	b.n	8007188 <ff_wtoupper+0x54>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80071aa:	381a      	subs	r0, #26
 80071ac:	b280      	uxth	r0, r0
 80071ae:	e7eb      	b.n	8007188 <ff_wtoupper+0x54>
			case 6:	chr += 8; break;				/* Shift +8 */
 80071b0:	3008      	adds	r0, #8
 80071b2:	b280      	uxth	r0, r0
 80071b4:	e7e8      	b.n	8007188 <ff_wtoupper+0x54>
			case 7: chr -= 80; break;				/* Shift -80 */
 80071b6:	3850      	subs	r0, #80	; 0x50
 80071b8:	b280      	uxth	r0, r0
 80071ba:	e7e5      	b.n	8007188 <ff_wtoupper+0x54>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80071bc:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 80071c0:	b280      	uxth	r0, r0
 80071c2:	e7e1      	b.n	8007188 <ff_wtoupper+0x54>
}
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	080161ac 	.word	0x080161ac
 80071cc:	080163a0 	.word	0x080163a0

080071d0 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 80071d0:	0a03      	lsrs	r3, r0, #8
 80071d2:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 80071d6:	b280      	uxth	r0, r0
 80071d8:	4770      	bx	lr

080071da <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
 80071da:	0203      	lsls	r3, r0, #8
 80071dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071e0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80071e4:	0a02      	lsrs	r2, r0, #8
 80071e6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80071ea:	4313      	orrs	r3, r2
}
 80071ec:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 80071f0:	4770      	bx	lr
	...

080071f4 <dns_backupserver_available>:
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
  u8_t ret = 0;

  if (pentry) {
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d039      	beq.n	800726c <dns_backupserver_available+0x78>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 80071f8:	7fc3      	ldrb	r3, [r0, #31]
 80071fa:	3301      	adds	r3, #1
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	dd01      	ble.n	8007204 <dns_backupserver_available+0x10>
  u8_t ret = 0;
 8007200:	2000      	movs	r0, #0
 8007202:	4770      	bx	lr
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8007204:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007208:	00d1      	lsls	r1, r2, #3
 800720a:	4a19      	ldr	r2, [pc, #100]	; (8007270 <dns_backupserver_available+0x7c>)
 800720c:	440a      	add	r2, r1
 800720e:	7d12      	ldrb	r2, [r2, #20]
 8007210:	2a06      	cmp	r2, #6
 8007212:	d00a      	beq.n	800722a <dns_backupserver_available+0x36>
 8007214:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007218:	00da      	lsls	r2, r3, #3
 800721a:	4b15      	ldr	r3, [pc, #84]	; (8007270 <dns_backupserver_available+0x7c>)
 800721c:	589b      	ldr	r3, [r3, r2]
 800721e:	3300      	adds	r3, #0
 8007220:	bf18      	it	ne
 8007222:	2301      	movne	r3, #1
 8007224:	b303      	cbz	r3, 8007268 <dns_backupserver_available+0x74>
      ret = 1;
 8007226:	2001      	movs	r0, #1
    }
  }

  return ret;
}
 8007228:	4770      	bx	lr
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800722a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800722e:	00ca      	lsls	r2, r1, #3
 8007230:	490f      	ldr	r1, [pc, #60]	; (8007270 <dns_backupserver_available+0x7c>)
 8007232:	588a      	ldr	r2, [r1, r2]
 8007234:	b982      	cbnz	r2, 8007258 <dns_backupserver_available+0x64>
 8007236:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800723a:	00d1      	lsls	r1, r2, #3
 800723c:	4a0c      	ldr	r2, [pc, #48]	; (8007270 <dns_backupserver_available+0x7c>)
 800723e:	440a      	add	r2, r1
 8007240:	6852      	ldr	r2, [r2, #4]
 8007242:	b95a      	cbnz	r2, 800725c <dns_backupserver_available+0x68>
 8007244:	4a0a      	ldr	r2, [pc, #40]	; (8007270 <dns_backupserver_available+0x7c>)
 8007246:	440a      	add	r2, r1
 8007248:	6892      	ldr	r2, [r2, #8]
 800724a:	b94a      	cbnz	r2, 8007260 <dns_backupserver_available+0x6c>
 800724c:	4b08      	ldr	r3, [pc, #32]	; (8007270 <dns_backupserver_available+0x7c>)
 800724e:	440b      	add	r3, r1
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	b13b      	cbz	r3, 8007264 <dns_backupserver_available+0x70>
 8007254:	2301      	movs	r3, #1
 8007256:	e7e5      	b.n	8007224 <dns_backupserver_available+0x30>
 8007258:	2301      	movs	r3, #1
 800725a:	e7e3      	b.n	8007224 <dns_backupserver_available+0x30>
 800725c:	2301      	movs	r3, #1
 800725e:	e7e1      	b.n	8007224 <dns_backupserver_available+0x30>
 8007260:	2301      	movs	r3, #1
 8007262:	e7df      	b.n	8007224 <dns_backupserver_available+0x30>
 8007264:	2300      	movs	r3, #0
 8007266:	e7dd      	b.n	8007224 <dns_backupserver_available+0x30>
  u8_t ret = 0;
 8007268:	2000      	movs	r0, #0
 800726a:	4770      	bx	lr
 800726c:	2000      	movs	r0, #0
 800726e:	4770      	bx	lr
 8007270:	20001234 	.word	0x20001234

08007274 <dns_create_txid>:
{
 8007274:	b508      	push	{r3, lr}
  txid = (u16_t)DNS_RAND_TXID();
 8007276:	f00d fdfd 	bl	8014e74 <rand>
 800727a:	b280      	uxth	r0, r0
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800727c:	2300      	movs	r3, #0
 800727e:	e001      	b.n	8007284 <dns_create_txid+0x10>
 8007280:	3301      	adds	r3, #1
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b03      	cmp	r3, #3
 8007286:	d80f      	bhi.n	80072a8 <dns_create_txid+0x34>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8007288:	4908      	ldr	r1, [pc, #32]	; (80072ac <dns_create_txid+0x38>)
 800728a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800728e:	fb02 1203 	mla	r2, r2, r3, r1
 8007292:	7f92      	ldrb	r2, [r2, #30]
 8007294:	2a02      	cmp	r2, #2
 8007296:	d1f3      	bne.n	8007280 <dns_create_txid+0xc>
        (dns_table[i].txid == txid)) {
 8007298:	f44f 7294 	mov.w	r2, #296	; 0x128
 800729c:	fb02 1203 	mla	r2, r2, r3, r1
 80072a0:	8b92      	ldrh	r2, [r2, #28]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80072a2:	4282      	cmp	r2, r0
 80072a4:	d1ec      	bne.n	8007280 <dns_create_txid+0xc>
again:
 80072a6:	e7e6      	b.n	8007276 <dns_create_txid+0x2>
}
 80072a8:	bd08      	pop	{r3, pc}
 80072aa:	bf00      	nop
 80072ac:	20001264 	.word	0x20001264

080072b0 <dns_call_found>:
{
 80072b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072b4:	4605      	mov	r5, r0
  if (addr != NULL) {
 80072b6:	460f      	mov	r7, r1
 80072b8:	b1a9      	cbz	r1, 80072e6 <dns_call_found+0x36>
    if (IP_IS_V6_VAL(*addr)) {
 80072ba:	7d0b      	ldrb	r3, [r1, #20]
 80072bc:	2b06      	cmp	r3, #6
 80072be:	d014      	beq.n	80072ea <dns_call_found+0x3a>
      LWIP_ASSERT("invalid response", !LWIP_DNS_ADDRTYPE_IS_IPV6(dns_table[idx].reqaddrtype));
 80072c0:	4a51      	ldr	r2, [pc, #324]	; (8007408 <dns_call_found+0x158>)
 80072c2:	f44f 7394 	mov.w	r3, #296	; 0x128
 80072c6:	fb03 2300 	mla	r3, r3, r0, r2
 80072ca:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d027      	beq.n	8007322 <dns_call_found+0x72>
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d025      	beq.n	8007322 <dns_call_found+0x72>
      dns_table[idx].reqaddrtype = LWIP_DNS_ADDRTYPE_IPV4;
 80072d6:	4a4c      	ldr	r2, [pc, #304]	; (8007408 <dns_call_found+0x158>)
 80072d8:	f44f 7394 	mov.w	r3, #296	; 0x128
 80072dc:	fb03 2305 	mla	r3, r3, r5, r2
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
{
 80072e6:	2400      	movs	r4, #0
 80072e8:	e025      	b.n	8007336 <dns_call_found+0x86>
      LWIP_ASSERT("invalid response", LWIP_DNS_ADDRTYPE_IS_IPV6(dns_table[idx].reqaddrtype));
 80072ea:	4a47      	ldr	r2, [pc, #284]	; (8007408 <dns_call_found+0x158>)
 80072ec:	f44f 7394 	mov.w	r3, #296	; 0x128
 80072f0:	fb03 2300 	mla	r3, r3, r0, r2
 80072f4:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d001      	beq.n	8007300 <dns_call_found+0x50>
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d108      	bne.n	8007312 <dns_call_found+0x62>
      dns_table[idx].reqaddrtype = LWIP_DNS_ADDRTYPE_IPV6;
 8007300:	4a41      	ldr	r2, [pc, #260]	; (8007408 <dns_call_found+0x158>)
 8007302:	f44f 7394 	mov.w	r3, #296	; 0x128
 8007306:	fb03 2305 	mla	r3, r3, r5, r2
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
 8007310:	e7e9      	b.n	80072e6 <dns_call_found+0x36>
      LWIP_ASSERT("invalid response", LWIP_DNS_ADDRTYPE_IS_IPV6(dns_table[idx].reqaddrtype));
 8007312:	4b3e      	ldr	r3, [pc, #248]	; (800740c <dns_call_found+0x15c>)
 8007314:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8007318:	493d      	ldr	r1, [pc, #244]	; (8007410 <dns_call_found+0x160>)
 800731a:	483e      	ldr	r0, [pc, #248]	; (8007414 <dns_call_found+0x164>)
 800731c:	f00d fd92 	bl	8014e44 <iprintf>
 8007320:	e7ee      	b.n	8007300 <dns_call_found+0x50>
      LWIP_ASSERT("invalid response", !LWIP_DNS_ADDRTYPE_IS_IPV6(dns_table[idx].reqaddrtype));
 8007322:	4b3a      	ldr	r3, [pc, #232]	; (800740c <dns_call_found+0x15c>)
 8007324:	f240 32bb 	movw	r2, #955	; 0x3bb
 8007328:	4939      	ldr	r1, [pc, #228]	; (8007410 <dns_call_found+0x160>)
 800732a:	483a      	ldr	r0, [pc, #232]	; (8007414 <dns_call_found+0x164>)
 800732c:	f00d fd8a 	bl	8014e44 <iprintf>
 8007330:	e7d1      	b.n	80072d6 <dns_call_found+0x26>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8007332:	3401      	adds	r4, #1
 8007334:	b2e4      	uxtb	r4, r4
 8007336:	2c03      	cmp	r4, #3
 8007338:	d825      	bhi.n	8007386 <dns_call_found+0xd6>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800733a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800733e:	0093      	lsls	r3, r2, #2
 8007340:	4a35      	ldr	r2, [pc, #212]	; (8007418 <dns_call_found+0x168>)
 8007342:	58d3      	ldr	r3, [r2, r3]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d0f4      	beq.n	8007332 <dns_call_found+0x82>
 8007348:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800734c:	0091      	lsls	r1, r2, #2
 800734e:	4a32      	ldr	r2, [pc, #200]	; (8007418 <dns_call_found+0x168>)
 8007350:	440a      	add	r2, r1
 8007352:	7a12      	ldrb	r2, [r2, #8]
 8007354:	42aa      	cmp	r2, r5
 8007356:	d1ec      	bne.n	8007332 <dns_call_found+0x82>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8007358:	f44f 7094 	mov.w	r0, #296	; 0x128
 800735c:	fb00 f005 	mul.w	r0, r0, r5
 8007360:	3020      	adds	r0, #32
 8007362:	4a29      	ldr	r2, [pc, #164]	; (8007408 <dns_call_found+0x158>)
 8007364:	4410      	add	r0, r2
 8007366:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8007418 <dns_call_found+0x168>
 800736a:	0066      	lsls	r6, r4, #1
 800736c:	1931      	adds	r1, r6, r4
 800736e:	008a      	lsls	r2, r1, #2
 8007370:	444a      	add	r2, r9
 8007372:	6852      	ldr	r2, [r2, #4]
 8007374:	4639      	mov	r1, r7
 8007376:	3004      	adds	r0, #4
 8007378:	4798      	blx	r3
      dns_requests[i].found = NULL;
 800737a:	4426      	add	r6, r4
 800737c:	00b3      	lsls	r3, r6, #2
 800737e:	2200      	movs	r2, #0
 8007380:	f849 2003 	str.w	r2, [r9, r3]
 8007384:	e7d5      	b.n	8007332 <dns_call_found+0x82>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8007386:	2300      	movs	r3, #0
 8007388:	e001      	b.n	800738e <dns_call_found+0xde>
 800738a:	3301      	adds	r3, #1
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b03      	cmp	r3, #3
 8007390:	d81c      	bhi.n	80073cc <dns_call_found+0x11c>
    if (i == idx) {
 8007392:	42ab      	cmp	r3, r5
 8007394:	d0f9      	beq.n	800738a <dns_call_found+0xda>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8007396:	491c      	ldr	r1, [pc, #112]	; (8007408 <dns_call_found+0x158>)
 8007398:	f44f 7294 	mov.w	r2, #296	; 0x128
 800739c:	fb02 1203 	mla	r2, r2, r3, r1
 80073a0:	7f92      	ldrb	r2, [r2, #30]
 80073a2:	2a02      	cmp	r2, #2
 80073a4:	d1f1      	bne.n	800738a <dns_call_found+0xda>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 80073a6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80073aa:	fb02 1003 	mla	r0, r2, r3, r1
 80073ae:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
 80073b2:	fb02 1205 	mla	r2, r2, r5, r1
 80073b6:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 80073ba:	4290      	cmp	r0, r2
 80073bc:	d1e5      	bne.n	800738a <dns_call_found+0xda>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80073be:	f44f 7294 	mov.w	r2, #296	; 0x128
 80073c2:	fb02 1405 	mla	r4, r2, r5, r1
 80073c6:	2304      	movs	r3, #4
 80073c8:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 80073cc:	4a0e      	ldr	r2, [pc, #56]	; (8007408 <dns_call_found+0x158>)
 80073ce:	f44f 7394 	mov.w	r3, #296	; 0x128
 80073d2:	fb03 2305 	mla	r3, r3, r5, r2
 80073d6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80073da:	2b03      	cmp	r3, #3
 80073dc:	d901      	bls.n	80073e2 <dns_call_found+0x132>
}
 80073de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 80073e2:	4c0e      	ldr	r4, [pc, #56]	; (800741c <dns_call_found+0x16c>)
 80073e4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80073e8:	f006 fcac 	bl	800dd44 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80073ec:	4b06      	ldr	r3, [pc, #24]	; (8007408 <dns_call_found+0x158>)
 80073ee:	f44f 7294 	mov.w	r2, #296	; 0x128
 80073f2:	fb02 3505 	mla	r5, r2, r5, r3
 80073f6:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 80073fa:	2200      	movs	r2, #0
 80073fc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8007400:	2304      	movs	r3, #4
 8007402:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
}
 8007406:	e7ea      	b.n	80073de <dns_call_found+0x12e>
 8007408:	20001264 	.word	0x20001264
 800740c:	0801645c 	.word	0x0801645c
 8007410:	0801648c 	.word	0x0801648c
 8007414:	08015d2c 	.word	0x08015d2c
 8007418:	20001204 	.word	0x20001204
 800741c:	200011f4 	.word	0x200011f4

08007420 <dns_send>:
{
 8007420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	4606      	mov	r6, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8007428:	4a7d      	ldr	r2, [pc, #500]	; (8007620 <dns_send+0x200>)
 800742a:	f44f 7394 	mov.w	r3, #296	; 0x128
 800742e:	fb03 2300 	mla	r3, r3, r0, r2
 8007432:	7fdb      	ldrb	r3, [r3, #31]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d84c      	bhi.n	80074d2 <dns_send+0xb2>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8007438:	4a79      	ldr	r2, [pc, #484]	; (8007620 <dns_send+0x200>)
 800743a:	f44f 7394 	mov.w	r3, #296	; 0x128
 800743e:	fb03 2306 	mla	r3, r3, r6, r2
 8007442:	7fdb      	ldrb	r3, [r3, #31]
 8007444:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007448:	00d1      	lsls	r1, r2, #3
 800744a:	4a76      	ldr	r2, [pc, #472]	; (8007624 <dns_send+0x204>)
 800744c:	440a      	add	r2, r1
 800744e:	7d12      	ldrb	r2, [r2, #20]
 8007450:	2a06      	cmp	r2, #6
 8007452:	d046      	beq.n	80074e2 <dns_send+0xc2>
 8007454:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007458:	00da      	lsls	r2, r3, #3
 800745a:	4b72      	ldr	r3, [pc, #456]	; (8007624 <dns_send+0x204>)
 800745c:	589b      	ldr	r3, [r3, r2]
 800745e:	fab3 f383 	clz	r3, r3
 8007462:	095b      	lsrs	r3, r3, #5
 8007464:	2b00      	cmp	r3, #0
 8007466:	d15b      	bne.n	8007520 <dns_send+0x100>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8007468:	f44f 7394 	mov.w	r3, #296	; 0x128
 800746c:	fb03 f306 	mul.w	r3, r3, r6
 8007470:	3320      	adds	r3, #32
 8007472:	4f6b      	ldr	r7, [pc, #428]	; (8007620 <dns_send+0x200>)
 8007474:	441f      	add	r7, r3
 8007476:	3704      	adds	r7, #4
 8007478:	4638      	mov	r0, r7
 800747a:	f7f8 fea9 	bl	80001d0 <strlen>
 800747e:	f100 0112 	add.w	r1, r0, #18
 8007482:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007486:	b289      	uxth	r1, r1
 8007488:	204a      	movs	r0, #74	; 0x4a
 800748a:	f001 f9c5 	bl	8008818 <pbuf_alloc>
  if (p != NULL) {
 800748e:	4605      	mov	r5, r0
 8007490:	2800      	cmp	r0, #0
 8007492:	f000 80c2 	beq.w	800761a <dns_send+0x1fa>
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8007496:	2300      	movs	r3, #0
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	9302      	str	r3, [sp, #8]
 800749c:	9303      	str	r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 800749e:	4a60      	ldr	r2, [pc, #384]	; (8007620 <dns_send+0x200>)
 80074a0:	f44f 7394 	mov.w	r3, #296	; 0x128
 80074a4:	fb03 2306 	mla	r3, r3, r6, r2
 80074a8:	8b98      	ldrh	r0, [r3, #28]
 80074aa:	f7ff fe91 	bl	80071d0 <lwip_htons>
 80074ae:	f8ad 0004 	strh.w	r0, [sp, #4]
    hdr.flags1 = DNS_FLAG1_RD;
 80074b2:	2301      	movs	r3, #1
 80074b4:	f88d 3006 	strb.w	r3, [sp, #6]
    hdr.numquestions = PP_HTONS(1);
 80074b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074bc:	f8ad 3008 	strh.w	r3, [sp, #8]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80074c0:	220c      	movs	r2, #12
 80074c2:	a901      	add	r1, sp, #4
 80074c4:	4628      	mov	r0, r5
 80074c6:	f001 fbe7 	bl	8008c98 <pbuf_take>
    --hostname;
 80074ca:	3f01      	subs	r7, #1
    query_idx = SIZEOF_DNS_HDR;
 80074cc:	f04f 080c 	mov.w	r8, #12
 80074d0:	e05c      	b.n	800758c <dns_send+0x16c>
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 80074d2:	4b55      	ldr	r3, [pc, #340]	; (8007628 <dns_send+0x208>)
 80074d4:	f240 22fa 	movw	r2, #762	; 0x2fa
 80074d8:	4954      	ldr	r1, [pc, #336]	; (800762c <dns_send+0x20c>)
 80074da:	4855      	ldr	r0, [pc, #340]	; (8007630 <dns_send+0x210>)
 80074dc:	f00d fcb2 	bl	8014e44 <iprintf>
 80074e0:	e7aa      	b.n	8007438 <dns_send+0x18>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 80074e2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80074e6:	00ca      	lsls	r2, r1, #3
 80074e8:	494e      	ldr	r1, [pc, #312]	; (8007624 <dns_send+0x204>)
 80074ea:	588a      	ldr	r2, [r1, r2]
 80074ec:	b982      	cbnz	r2, 8007510 <dns_send+0xf0>
 80074ee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80074f2:	00d1      	lsls	r1, r2, #3
 80074f4:	4a4b      	ldr	r2, [pc, #300]	; (8007624 <dns_send+0x204>)
 80074f6:	440a      	add	r2, r1
 80074f8:	6852      	ldr	r2, [r2, #4]
 80074fa:	b95a      	cbnz	r2, 8007514 <dns_send+0xf4>
 80074fc:	4a49      	ldr	r2, [pc, #292]	; (8007624 <dns_send+0x204>)
 80074fe:	440a      	add	r2, r1
 8007500:	6892      	ldr	r2, [r2, #8]
 8007502:	b94a      	cbnz	r2, 8007518 <dns_send+0xf8>
 8007504:	4b47      	ldr	r3, [pc, #284]	; (8007624 <dns_send+0x204>)
 8007506:	440b      	add	r3, r1
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	b13b      	cbz	r3, 800751c <dns_send+0xfc>
 800750c:	2300      	movs	r3, #0
 800750e:	e7a9      	b.n	8007464 <dns_send+0x44>
 8007510:	2300      	movs	r3, #0
 8007512:	e7a7      	b.n	8007464 <dns_send+0x44>
 8007514:	2300      	movs	r3, #0
 8007516:	e7a5      	b.n	8007464 <dns_send+0x44>
 8007518:	2300      	movs	r3, #0
 800751a:	e7a3      	b.n	8007464 <dns_send+0x44>
 800751c:	2301      	movs	r3, #1
 800751e:	e7a1      	b.n	8007464 <dns_send+0x44>
    dns_call_found(idx, NULL);
 8007520:	2100      	movs	r1, #0
 8007522:	4630      	mov	r0, r6
 8007524:	f7ff fec4 	bl	80072b0 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 8007528:	4a3d      	ldr	r2, [pc, #244]	; (8007620 <dns_send+0x200>)
 800752a:	f44f 7394 	mov.w	r3, #296	; 0x128
 800752e:	fb03 2606 	mla	r6, r3, r6, r2
 8007532:	2400      	movs	r4, #0
 8007534:	77b4      	strb	r4, [r6, #30]
}
 8007536:	4620      	mov	r0, r4
 8007538:	b004      	add	sp, #16
 800753a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ++n;
 800753e:	3401      	adds	r4, #1
 8007540:	b2e4      	uxtb	r4, r4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8007542:	3701      	adds	r7, #1
 8007544:	783b      	ldrb	r3, [r7, #0]
 8007546:	2b2e      	cmp	r3, #46	; 0x2e
 8007548:	d001      	beq.n	800754e <dns_send+0x12e>
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1f7      	bne.n	800753e <dns_send+0x11e>
      copy_len = (u16_t)(hostname - hostname_part);
 800754e:	eba7 0a09 	sub.w	sl, r7, r9
 8007552:	fa1f fa8a 	uxth.w	sl, sl
      if (query_idx + n + 1 > 0xFFFF) {
 8007556:	eb08 0304 	add.w	r3, r8, r4
 800755a:	3301      	adds	r3, #1
 800755c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007560:	da55      	bge.n	800760e <dns_send+0x1ee>
      pbuf_put_at(p, query_idx, n);
 8007562:	4622      	mov	r2, r4
 8007564:	4641      	mov	r1, r8
 8007566:	4628      	mov	r0, r5
 8007568:	f001 fc74 	bl	8008e54 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800756c:	f108 0301 	add.w	r3, r8, #1
 8007570:	b29b      	uxth	r3, r3
 8007572:	4652      	mov	r2, sl
 8007574:	4649      	mov	r1, r9
 8007576:	4628      	mov	r0, r5
 8007578:	f001 fbee 	bl	8008d58 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800757c:	4444      	add	r4, r8
 800757e:	b2a4      	uxth	r4, r4
 8007580:	f104 0801 	add.w	r8, r4, #1
 8007584:	fa1f f888 	uxth.w	r8, r8
    } while (*hostname != 0);
 8007588:	783b      	ldrb	r3, [r7, #0]
 800758a:	b11b      	cbz	r3, 8007594 <dns_send+0x174>
      ++hostname;
 800758c:	3701      	adds	r7, #1
 800758e:	46b9      	mov	r9, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8007590:	2400      	movs	r4, #0
 8007592:	e7d7      	b.n	8007544 <dns_send+0x124>
    pbuf_put_at(p, query_idx, 0);
 8007594:	2200      	movs	r2, #0
 8007596:	4641      	mov	r1, r8
 8007598:	4628      	mov	r0, r5
 800759a:	f001 fc5b 	bl	8008e54 <pbuf_put_at>
    query_idx++;
 800759e:	1ca3      	adds	r3, r4, #2
 80075a0:	b29b      	uxth	r3, r3
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
 80075a2:	491f      	ldr	r1, [pc, #124]	; (8007620 <dns_send+0x200>)
 80075a4:	f44f 7294 	mov.w	r2, #296	; 0x128
 80075a8:	fb02 1206 	mla	r2, r2, r6, r1
 80075ac:	f892 2124 	ldrb.w	r2, [r2, #292]	; 0x124
 80075b0:	2a03      	cmp	r2, #3
 80075b2:	d006      	beq.n	80075c2 <dns_send+0x1a2>
 80075b4:	2a01      	cmp	r2, #1
 80075b6:	d004      	beq.n	80075c2 <dns_send+0x1a2>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 80075b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075bc:	f8ad 2000 	strh.w	r2, [sp]
 80075c0:	e003      	b.n	80075ca <dns_send+0x1aa>
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
 80075c2:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80075c6:	f8ad 2000 	strh.w	r2, [sp]
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 80075ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075ce:	f8ad 2002 	strh.w	r2, [sp, #2]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 80075d2:	2204      	movs	r2, #4
 80075d4:	4669      	mov	r1, sp
 80075d6:	4628      	mov	r0, r5
 80075d8:	f001 fbbe 	bl	8008d58 <pbuf_take_at>
    pcb_idx = entry->pcb_idx;
 80075dc:	4b10      	ldr	r3, [pc, #64]	; (8007620 <dns_send+0x200>)
 80075de:	f44f 7294 	mov.w	r2, #296	; 0x128
 80075e2:	fb02 3606 	mla	r6, r2, r6, r3
 80075e6:	f896 4023 	ldrb.w	r4, [r6, #35]	; 0x23
      dst = &dns_servers[entry->server_idx];
 80075ea:	7ff3      	ldrb	r3, [r6, #31]
 80075ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80075f0:	00da      	lsls	r2, r3, #3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 80075f2:	2335      	movs	r3, #53	; 0x35
 80075f4:	490b      	ldr	r1, [pc, #44]	; (8007624 <dns_send+0x204>)
 80075f6:	440a      	add	r2, r1
 80075f8:	4629      	mov	r1, r5
 80075fa:	480e      	ldr	r0, [pc, #56]	; (8007634 <dns_send+0x214>)
 80075fc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8007600:	f006 fa4e 	bl	800daa0 <udp_sendto>
 8007604:	4604      	mov	r4, r0
    pbuf_free(p);
 8007606:	4628      	mov	r0, r5
 8007608:	f001 f8a4 	bl	8008754 <pbuf_free>
 800760c:	e793      	b.n	8007536 <dns_send+0x116>
  pbuf_free(p);
 800760e:	4628      	mov	r0, r5
 8007610:	f001 f8a0 	bl	8008754 <pbuf_free>
  return ERR_VAL;
 8007614:	f06f 0405 	mvn.w	r4, #5
 8007618:	e78d      	b.n	8007536 <dns_send+0x116>
    err = ERR_MEM;
 800761a:	f04f 34ff 	mov.w	r4, #4294967295
 800761e:	e78a      	b.n	8007536 <dns_send+0x116>
 8007620:	20001264 	.word	0x20001264
 8007624:	20001234 	.word	0x20001234
 8007628:	0801645c 	.word	0x0801645c
 800762c:	080164dc 	.word	0x080164dc
 8007630:	08015d2c 	.word	0x08015d2c
 8007634:	200011f4 	.word	0x200011f4

08007638 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4604      	mov	r4, r0
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800763c:	4d49      	ldr	r5, [pc, #292]	; (8007764 <dns_check_entry+0x12c>)
 800763e:	f44f 7094 	mov.w	r0, #296	; 0x128
 8007642:	fb00 5504 	mla	r5, r0, r4, r5

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8007646:	2c03      	cmp	r4, #3
 8007648:	d80b      	bhi.n	8007662 <dns_check_entry+0x2a>

  switch (entry->state) {
 800764a:	4a46      	ldr	r2, [pc, #280]	; (8007764 <dns_check_entry+0x12c>)
 800764c:	f44f 7394 	mov.w	r3, #296	; 0x128
 8007650:	fb03 2304 	mla	r3, r3, r4, r2
 8007654:	7f9b      	ldrb	r3, [r3, #30]
 8007656:	2b03      	cmp	r3, #3
 8007658:	d87c      	bhi.n	8007754 <dns_check_entry+0x11c>
 800765a:	e8df f003 	tbb	[pc, r3]
 800765e:	0a1e      	.short	0x0a1e
 8007660:	631f      	.short	0x631f
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8007662:	4b41      	ldr	r3, [pc, #260]	; (8007768 <dns_check_entry+0x130>)
 8007664:	f240 421c 	movw	r2, #1052	; 0x41c
 8007668:	4940      	ldr	r1, [pc, #256]	; (800776c <dns_check_entry+0x134>)
 800766a:	4841      	ldr	r0, [pc, #260]	; (8007770 <dns_check_entry+0x138>)
 800766c:	f00d fbea 	bl	8014e44 <iprintf>
 8007670:	e7eb      	b.n	800764a <dns_check_entry+0x12>
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8007672:	f7ff fdff 	bl	8007274 <dns_create_txid>
 8007676:	4a3b      	ldr	r2, [pc, #236]	; (8007764 <dns_check_entry+0x12c>)
 8007678:	f44f 7394 	mov.w	r3, #296	; 0x128
 800767c:	fb03 2304 	mla	r3, r3, r4, r2
 8007680:	8398      	strh	r0, [r3, #28]
      entry->state = DNS_STATE_ASKING;
 8007682:	2202      	movs	r2, #2
 8007684:	779a      	strb	r2, [r3, #30]
      entry->server_idx = 0;
 8007686:	2200      	movs	r2, #0
 8007688:	77da      	strb	r2, [r3, #31]
      entry->tmr = 1;
 800768a:	2101      	movs	r1, #1
 800768c:	f883 1020 	strb.w	r1, [r3, #32]
      entry->retries = 0;
 8007690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* send DNS packet for this entry */
      err = dns_send(i);
 8007694:	4620      	mov	r0, r4
 8007696:	f7ff fec3 	bl	8007420 <dns_send>
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 800769a:	bd38      	pop	{r3, r4, r5, pc}
      if (--entry->tmr == 0) {
 800769c:	4b31      	ldr	r3, [pc, #196]	; (8007764 <dns_check_entry+0x12c>)
 800769e:	f44f 7294 	mov.w	r2, #296	; 0x128
 80076a2:	fb02 3204 	mla	r2, r2, r4, r3
 80076a6:	f892 3020 	ldrb.w	r3, [r2, #32]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	f882 3020 	strb.w	r3, [r2, #32]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1f1      	bne.n	800769a <dns_check_entry+0x62>
        if (++entry->retries == DNS_MAX_RETRIES) {
 80076b6:	4b2b      	ldr	r3, [pc, #172]	; (8007764 <dns_check_entry+0x12c>)
 80076b8:	f44f 7294 	mov.w	r2, #296	; 0x128
 80076bc:	fb02 3204 	mla	r2, r2, r4, r3
 80076c0:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80076c4:	3301      	adds	r3, #1
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d00a      	beq.n	80076e6 <dns_check_entry+0xae>
          entry->tmr = entry->retries;
 80076d0:	4924      	ldr	r1, [pc, #144]	; (8007764 <dns_check_entry+0x12c>)
 80076d2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80076d6:	fb02 1204 	mla	r2, r2, r4, r1
 80076da:	f882 3020 	strb.w	r3, [r2, #32]
        err = dns_send(i);
 80076de:	4620      	mov	r0, r4
 80076e0:	f7ff fe9e 	bl	8007420 <dns_send>
 80076e4:	e7d9      	b.n	800769a <dns_check_entry+0x62>
          if (dns_backupserver_available(entry)
 80076e6:	4628      	mov	r0, r5
 80076e8:	f7ff fd84 	bl	80071f4 <dns_backupserver_available>
 80076ec:	b170      	cbz	r0, 800770c <dns_check_entry+0xd4>
            entry->server_idx++;
 80076ee:	4a1d      	ldr	r2, [pc, #116]	; (8007764 <dns_check_entry+0x12c>)
 80076f0:	f44f 7394 	mov.w	r3, #296	; 0x128
 80076f4:	fb03 2304 	mla	r3, r3, r4, r2
 80076f8:	7fda      	ldrb	r2, [r3, #31]
 80076fa:	3201      	adds	r2, #1
 80076fc:	77da      	strb	r2, [r3, #31]
            entry->tmr = 1;
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2020 	strb.w	r2, [r3, #32]
            entry->retries = 0;
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800770a:	e7e8      	b.n	80076de <dns_check_entry+0xa6>
            dns_call_found(i, NULL);
 800770c:	2100      	movs	r1, #0
 800770e:	4620      	mov	r0, r4
 8007710:	f7ff fdce 	bl	80072b0 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 8007714:	4a13      	ldr	r2, [pc, #76]	; (8007764 <dns_check_entry+0x12c>)
 8007716:	f44f 7394 	mov.w	r3, #296	; 0x128
 800771a:	fb03 2404 	mla	r4, r3, r4, r2
 800771e:	2300      	movs	r3, #0
 8007720:	77a3      	strb	r3, [r4, #30]
            break;
 8007722:	e7ba      	b.n	800769a <dns_check_entry+0x62>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8007724:	f44f 7394 	mov.w	r3, #296	; 0x128
 8007728:	fb03 f304 	mul.w	r3, r3, r4
 800772c:	4a0d      	ldr	r2, [pc, #52]	; (8007764 <dns_check_entry+0x12c>)
 800772e:	58d3      	ldr	r3, [r2, r3]
 8007730:	b143      	cbz	r3, 8007744 <dns_check_entry+0x10c>
 8007732:	3b01      	subs	r3, #1
 8007734:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007738:	fb02 f204 	mul.w	r2, r2, r4
 800773c:	4909      	ldr	r1, [pc, #36]	; (8007764 <dns_check_entry+0x12c>)
 800773e:	508b      	str	r3, [r1, r2]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1aa      	bne.n	800769a <dns_check_entry+0x62>
        entry->state = DNS_STATE_UNUSED;
 8007744:	4b07      	ldr	r3, [pc, #28]	; (8007764 <dns_check_entry+0x12c>)
 8007746:	f44f 7294 	mov.w	r2, #296	; 0x128
 800774a:	fb02 3404 	mla	r4, r2, r4, r3
 800774e:	2300      	movs	r3, #0
 8007750:	77a3      	strb	r3, [r4, #30]
 8007752:	e7a2      	b.n	800769a <dns_check_entry+0x62>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8007754:	4b04      	ldr	r3, [pc, #16]	; (8007768 <dns_check_entry+0x130>)
 8007756:	f240 425b 	movw	r2, #1115	; 0x45b
 800775a:	4906      	ldr	r1, [pc, #24]	; (8007774 <dns_check_entry+0x13c>)
 800775c:	4804      	ldr	r0, [pc, #16]	; (8007770 <dns_check_entry+0x138>)
 800775e:	f00d fb71 	bl	8014e44 <iprintf>
}
 8007762:	e79a      	b.n	800769a <dns_check_entry+0x62>
 8007764:	20001264 	.word	0x20001264
 8007768:	0801645c 	.word	0x0801645c
 800776c:	080164a0 	.word	0x080164a0
 8007770:	08015d2c 	.word	0x08015d2c
 8007774:	080164bc 	.word	0x080164bc

08007778 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8007778:	b510      	push	{r4, lr}
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800777a:	2400      	movs	r4, #0
 800777c:	e004      	b.n	8007788 <dns_check_entries+0x10>
    dns_check_entry(i);
 800777e:	4620      	mov	r0, r4
 8007780:	f7ff ff5a 	bl	8007638 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8007784:	3401      	adds	r4, #1
 8007786:	b2e4      	uxtb	r4, r4
 8007788:	2c03      	cmp	r4, #3
 800778a:	d9f8      	bls.n	800777e <dns_check_entries+0x6>
  }
}
 800778c:	bd10      	pop	{r4, pc}

0800778e <dns_init>:
}
 800778e:	4770      	bx	lr

08007790 <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 8007790:	2801      	cmp	r0, #1
 8007792:	d900      	bls.n	8007796 <dns_setserver+0x6>
 8007794:	4770      	bx	lr
{
 8007796:	b430      	push	{r4, r5}
    if (dnsserver != NULL) {
 8007798:	b169      	cbz	r1, 80077b6 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 800779a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800779e:	00c3      	lsls	r3, r0, #3
 80077a0:	4d0b      	ldr	r5, [pc, #44]	; (80077d0 <dns_setserver+0x40>)
 80077a2:	441d      	add	r5, r3
 80077a4:	460c      	mov	r4, r1
 80077a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80077aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80077ae:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80077b2:	bc30      	pop	{r4, r5}
 80077b4:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 80077b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80077ba:	00c3      	lsls	r3, r0, #3
 80077bc:	4c04      	ldr	r4, [pc, #16]	; (80077d0 <dns_setserver+0x40>)
 80077be:	441c      	add	r4, r3
 80077c0:	4d04      	ldr	r5, [pc, #16]	; (80077d4 <dns_setserver+0x44>)
 80077c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80077ca:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80077ce:	e7f0      	b.n	80077b2 <dns_setserver+0x22>
 80077d0:	20001234 	.word	0x20001234
 80077d4:	080187ec 	.word	0x080187ec

080077d8 <dns_tmr>:
{
 80077d8:	b508      	push	{r3, lr}
  dns_check_entries();
 80077da:	f7ff ffcd 	bl	8007778 <dns_check_entries>
}
 80077de:	bd08      	pop	{r3, pc}

080077e0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80077e0:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80077e2:	f000 f8c9 	bl	8007978 <mem_init>
  memp_init();
 80077e6:	f000 fafd 	bl	8007de4 <memp_init>
  pbuf_init();
  netif_init();
 80077ea:	f000 fbeb 	bl	8007fc4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80077ee:	f005 fcf1 	bl	800d1d4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80077f2:	f001 fc05 	bl	8009000 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 80077f6:	f7ff ffca 	bl	800778e <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80077fa:	f005 fbd9 	bl	800cfb0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80077fe:	bd08      	pop	{r3, pc}

08007800 <ptr_to_mem>:
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
  return (struct mem *)(void *)&ram[ptr];
 8007800:	4b01      	ldr	r3, [pc, #4]	; (8007808 <ptr_to_mem+0x8>)
 8007802:	681b      	ldr	r3, [r3, #0]
}
 8007804:	4418      	add	r0, r3
 8007806:	4770      	bx	lr
 8007808:	20001708 	.word	0x20001708

0800780c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
  return (mem_size_t)((u8_t *)mem - ram);
 800780c:	4b02      	ldr	r3, [pc, #8]	; (8007818 <mem_to_ptr+0xc>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	1ac0      	subs	r0, r0, r3
}
 8007812:	b280      	uxth	r0, r0
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	20001708 	.word	0x20001708

0800781c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781e:	4605      	mov	r5, r0
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007820:	f7ff fff4 	bl	800780c <mem_to_ptr>
 8007824:	4606      	mov	r6, r0
  nmem = ptr_to_mem(mem->next);
 8007826:	882c      	ldrh	r4, [r5, #0]
 8007828:	4620      	mov	r0, r4
 800782a:	f7ff ffe9 	bl	8007800 <ptr_to_mem>
 800782e:	4607      	mov	r7, r0
  pmem = ptr_to_mem(mem->prev);
 8007830:	886d      	ldrh	r5, [r5, #2]
 8007832:	4628      	mov	r0, r5
 8007834:	f7ff ffe4 	bl	8007800 <ptr_to_mem>
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007838:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 800783c:	d814      	bhi.n	8007868 <mem_link_valid+0x4c>
 800783e:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8007842:	d813      	bhi.n	800786c <mem_link_valid+0x50>
 8007844:	42b5      	cmp	r5, r6
 8007846:	d004      	beq.n	8007852 <mem_link_valid+0x36>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007848:	8803      	ldrh	r3, [r0, #0]
 800784a:	42b3      	cmp	r3, r6
 800784c:	d001      	beq.n	8007852 <mem_link_valid+0x36>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
    return 0;
 800784e:	2000      	movs	r0, #0
 8007850:	e00b      	b.n	800786a <mem_link_valid+0x4e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007852:	4b08      	ldr	r3, [pc, #32]	; (8007874 <mem_link_valid+0x58>)
 8007854:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007856:	42bb      	cmp	r3, r7
 8007858:	d00a      	beq.n	8007870 <mem_link_valid+0x54>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800785a:	887b      	ldrh	r3, [r7, #2]
 800785c:	42b3      	cmp	r3, r6
 800785e:	d001      	beq.n	8007864 <mem_link_valid+0x48>
    return 0;
 8007860:	2000      	movs	r0, #0
 8007862:	e002      	b.n	800786a <mem_link_valid+0x4e>
  }
  return 1;
 8007864:	2001      	movs	r0, #1
 8007866:	e000      	b.n	800786a <mem_link_valid+0x4e>
    return 0;
 8007868:	2000      	movs	r0, #0
}
 800786a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return 0;
 800786c:	2000      	movs	r0, #0
 800786e:	e7fc      	b.n	800786a <mem_link_valid+0x4e>
  return 1;
 8007870:	2001      	movs	r0, #1
 8007872:	e7fa      	b.n	800786a <mem_link_valid+0x4e>
 8007874:	2000170c 	.word	0x2000170c

08007878 <plug_holes>:
{
 8007878:	b538      	push	{r3, r4, r5, lr}
 800787a:	4604      	mov	r4, r0
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800787c:	4b35      	ldr	r3, [pc, #212]	; (8007954 <plug_holes+0xdc>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4283      	cmp	r3, r0
 8007882:	d840      	bhi.n	8007906 <plug_holes+0x8e>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007884:	4b34      	ldr	r3, [pc, #208]	; (8007958 <plug_holes+0xe0>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	42a3      	cmp	r3, r4
 800788a:	d944      	bls.n	8007916 <plug_holes+0x9e>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800788c:	7923      	ldrb	r3, [r4, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d149      	bne.n	8007926 <plug_holes+0xae>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007892:	8823      	ldrh	r3, [r4, #0]
 8007894:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007898:	d84d      	bhi.n	8007936 <plug_holes+0xbe>
  nmem = ptr_to_mem(mem->next);
 800789a:	8820      	ldrh	r0, [r4, #0]
 800789c:	f7ff ffb0 	bl	8007800 <ptr_to_mem>
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80078a0:	4284      	cmp	r4, r0
 80078a2:	d016      	beq.n	80078d2 <plug_holes+0x5a>
 80078a4:	7903      	ldrb	r3, [r0, #4]
 80078a6:	b9a3      	cbnz	r3, 80078d2 <plug_holes+0x5a>
 80078a8:	4b2b      	ldr	r3, [pc, #172]	; (8007958 <plug_holes+0xe0>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4283      	cmp	r3, r0
 80078ae:	d010      	beq.n	80078d2 <plug_holes+0x5a>
    if (lfree == nmem) {
 80078b0:	4b2a      	ldr	r3, [pc, #168]	; (800795c <plug_holes+0xe4>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4283      	cmp	r3, r0
 80078b6:	d046      	beq.n	8007946 <plug_holes+0xce>
    mem->next = nmem->next;
 80078b8:	8803      	ldrh	r3, [r0, #0]
 80078ba:	8023      	strh	r3, [r4, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80078bc:	8800      	ldrh	r0, [r0, #0]
 80078be:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 80078c2:	d006      	beq.n	80078d2 <plug_holes+0x5a>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80078c4:	f7ff ff9c 	bl	8007800 <ptr_to_mem>
 80078c8:	4605      	mov	r5, r0
 80078ca:	4620      	mov	r0, r4
 80078cc:	f7ff ff9e 	bl	800780c <mem_to_ptr>
 80078d0:	8068      	strh	r0, [r5, #2]
  pmem = ptr_to_mem(mem->prev);
 80078d2:	8860      	ldrh	r0, [r4, #2]
 80078d4:	f7ff ff94 	bl	8007800 <ptr_to_mem>
 80078d8:	4605      	mov	r5, r0
  if (pmem != mem && pmem->used == 0) {
 80078da:	4284      	cmp	r4, r0
 80078dc:	d012      	beq.n	8007904 <plug_holes+0x8c>
 80078de:	7903      	ldrb	r3, [r0, #4]
 80078e0:	b983      	cbnz	r3, 8007904 <plug_holes+0x8c>
    if (lfree == mem) {
 80078e2:	4b1e      	ldr	r3, [pc, #120]	; (800795c <plug_holes+0xe4>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	42a3      	cmp	r3, r4
 80078e8:	d030      	beq.n	800794c <plug_holes+0xd4>
    pmem->next = mem->next;
 80078ea:	8823      	ldrh	r3, [r4, #0]
 80078ec:	802b      	strh	r3, [r5, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80078ee:	8820      	ldrh	r0, [r4, #0]
 80078f0:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 80078f4:	d006      	beq.n	8007904 <plug_holes+0x8c>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80078f6:	f7ff ff83 	bl	8007800 <ptr_to_mem>
 80078fa:	4604      	mov	r4, r0
 80078fc:	4628      	mov	r0, r5
 80078fe:	f7ff ff85 	bl	800780c <mem_to_ptr>
 8007902:	8060      	strh	r0, [r4, #2]
}
 8007904:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007906:	4b16      	ldr	r3, [pc, #88]	; (8007960 <plug_holes+0xe8>)
 8007908:	f240 12df 	movw	r2, #479	; 0x1df
 800790c:	4915      	ldr	r1, [pc, #84]	; (8007964 <plug_holes+0xec>)
 800790e:	4816      	ldr	r0, [pc, #88]	; (8007968 <plug_holes+0xf0>)
 8007910:	f00d fa98 	bl	8014e44 <iprintf>
 8007914:	e7b6      	b.n	8007884 <plug_holes+0xc>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007916:	4b12      	ldr	r3, [pc, #72]	; (8007960 <plug_holes+0xe8>)
 8007918:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800791c:	4913      	ldr	r1, [pc, #76]	; (800796c <plug_holes+0xf4>)
 800791e:	4812      	ldr	r0, [pc, #72]	; (8007968 <plug_holes+0xf0>)
 8007920:	f00d fa90 	bl	8014e44 <iprintf>
 8007924:	e7b2      	b.n	800788c <plug_holes+0x14>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007926:	4b0e      	ldr	r3, [pc, #56]	; (8007960 <plug_holes+0xe8>)
 8007928:	f240 12e1 	movw	r2, #481	; 0x1e1
 800792c:	4910      	ldr	r1, [pc, #64]	; (8007970 <plug_holes+0xf8>)
 800792e:	480e      	ldr	r0, [pc, #56]	; (8007968 <plug_holes+0xf0>)
 8007930:	f00d fa88 	bl	8014e44 <iprintf>
 8007934:	e7ad      	b.n	8007892 <plug_holes+0x1a>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007936:	4b0a      	ldr	r3, [pc, #40]	; (8007960 <plug_holes+0xe8>)
 8007938:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800793c:	490d      	ldr	r1, [pc, #52]	; (8007974 <plug_holes+0xfc>)
 800793e:	480a      	ldr	r0, [pc, #40]	; (8007968 <plug_holes+0xf0>)
 8007940:	f00d fa80 	bl	8014e44 <iprintf>
 8007944:	e7a9      	b.n	800789a <plug_holes+0x22>
      lfree = mem;
 8007946:	4b05      	ldr	r3, [pc, #20]	; (800795c <plug_holes+0xe4>)
 8007948:	601c      	str	r4, [r3, #0]
 800794a:	e7b5      	b.n	80078b8 <plug_holes+0x40>
      lfree = pmem;
 800794c:	4b03      	ldr	r3, [pc, #12]	; (800795c <plug_holes+0xe4>)
 800794e:	6018      	str	r0, [r3, #0]
 8007950:	e7cb      	b.n	80078ea <plug_holes+0x72>
 8007952:	bf00      	nop
 8007954:	20001708 	.word	0x20001708
 8007958:	2000170c 	.word	0x2000170c
 800795c:	20001704 	.word	0x20001704
 8007960:	0801667c 	.word	0x0801667c
 8007964:	080166ac 	.word	0x080166ac
 8007968:	08015d2c 	.word	0x08015d2c
 800796c:	080166c4 	.word	0x080166c4
 8007970:	080166e0 	.word	0x080166e0
 8007974:	080166fc 	.word	0x080166fc

08007978 <mem_init>:
{
 8007978:	b538      	push	{r3, r4, r5, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800797a:	4c0b      	ldr	r4, [pc, #44]	; (80079a8 <mem_init+0x30>)
 800797c:	f024 0403 	bic.w	r4, r4, #3
 8007980:	4b0a      	ldr	r3, [pc, #40]	; (80079ac <mem_init+0x34>)
 8007982:	601c      	str	r4, [r3, #0]
  mem->next = MEM_SIZE_ALIGNED;
 8007984:	f44f 65c8 	mov.w	r5, #1600	; 0x640
 8007988:	8025      	strh	r5, [r4, #0]
  mem->prev = 0;
 800798a:	2300      	movs	r3, #0
 800798c:	8063      	strh	r3, [r4, #2]
  mem->used = 0;
 800798e:	7123      	strb	r3, [r4, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007990:	4628      	mov	r0, r5
 8007992:	f7ff ff35 	bl	8007800 <ptr_to_mem>
 8007996:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <mem_init+0x38>)
 8007998:	6018      	str	r0, [r3, #0]
  ram_end->used = 1;
 800799a:	2301      	movs	r3, #1
 800799c:	7103      	strb	r3, [r0, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800799e:	8005      	strh	r5, [r0, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80079a0:	8045      	strh	r5, [r0, #2]
  lfree = (struct mem *)(void *)ram;
 80079a2:	4b04      	ldr	r3, [pc, #16]	; (80079b4 <mem_init+0x3c>)
 80079a4:	601c      	str	r4, [r3, #0]
}
 80079a6:	bd38      	pop	{r3, r4, r5, pc}
 80079a8:	20004bf3 	.word	0x20004bf3
 80079ac:	20001708 	.word	0x20001708
 80079b0:	2000170c 	.word	0x2000170c
 80079b4:	20001704 	.word	0x20001704

080079b8 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d044      	beq.n	8007a46 <mem_free+0x8e>
{
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80079c0:	f010 0f03 	tst.w	r0, #3
 80079c4:	d11f      	bne.n	8007a06 <mem_free+0x4e>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80079c6:	f1a0 0508 	sub.w	r5, r0, #8

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80079ca:	4b1f      	ldr	r3, [pc, #124]	; (8007a48 <mem_free+0x90>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	42ab      	cmp	r3, r5
 80079d0:	d821      	bhi.n	8007a16 <mem_free+0x5e>
 80079d2:	f100 030c 	add.w	r3, r0, #12
 80079d6:	4a1d      	ldr	r2, [pc, #116]	; (8007a4c <mem_free+0x94>)
 80079d8:	6812      	ldr	r2, [r2, #0]
 80079da:	4293      	cmp	r3, r2
 80079dc:	d81b      	bhi.n	8007a16 <mem_free+0x5e>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80079de:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 80079e2:	b303      	cbz	r3, 8007a26 <mem_free+0x6e>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
 80079e4:	4628      	mov	r0, r5
 80079e6:	f7ff ff19 	bl	800781c <mem_link_valid>
 80079ea:	b320      	cbz	r0, 8007a36 <mem_free+0x7e>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 80079ec:	2300      	movs	r3, #0
 80079ee:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 80079f2:	4b17      	ldr	r3, [pc, #92]	; (8007a50 <mem_free+0x98>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	42ab      	cmp	r3, r5
 80079f8:	d901      	bls.n	80079fe <mem_free+0x46>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80079fa:	4b15      	ldr	r3, [pc, #84]	; (8007a50 <mem_free+0x98>)
 80079fc:	601d      	str	r5, [r3, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80079fe:	4628      	mov	r0, r5
 8007a00:	f7ff ff3a 	bl	8007878 <plug_holes>
 8007a04:	e00e      	b.n	8007a24 <mem_free+0x6c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007a06:	4b13      	ldr	r3, [pc, #76]	; (8007a54 <mem_free+0x9c>)
 8007a08:	f240 2273 	movw	r2, #627	; 0x273
 8007a0c:	4912      	ldr	r1, [pc, #72]	; (8007a58 <mem_free+0xa0>)
 8007a0e:	4813      	ldr	r0, [pc, #76]	; (8007a5c <mem_free+0xa4>)
 8007a10:	f00d fa18 	bl	8014e44 <iprintf>
    return;
 8007a14:	e006      	b.n	8007a24 <mem_free+0x6c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007a16:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <mem_free+0x9c>)
 8007a18:	f240 227f 	movw	r2, #639	; 0x27f
 8007a1c:	4910      	ldr	r1, [pc, #64]	; (8007a60 <mem_free+0xa8>)
 8007a1e:	480f      	ldr	r0, [pc, #60]	; (8007a5c <mem_free+0xa4>)
 8007a20:	f00d fa10 	bl	8014e44 <iprintf>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007a24:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007a26:	4b0b      	ldr	r3, [pc, #44]	; (8007a54 <mem_free+0x9c>)
 8007a28:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007a2c:	490d      	ldr	r1, [pc, #52]	; (8007a64 <mem_free+0xac>)
 8007a2e:	480b      	ldr	r0, [pc, #44]	; (8007a5c <mem_free+0xa4>)
 8007a30:	f00d fa08 	bl	8014e44 <iprintf>
    return;
 8007a34:	e7f6      	b.n	8007a24 <mem_free+0x6c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007a36:	4b07      	ldr	r3, [pc, #28]	; (8007a54 <mem_free+0x9c>)
 8007a38:	f240 2295 	movw	r2, #661	; 0x295
 8007a3c:	490a      	ldr	r1, [pc, #40]	; (8007a68 <mem_free+0xb0>)
 8007a3e:	4807      	ldr	r0, [pc, #28]	; (8007a5c <mem_free+0xa4>)
 8007a40:	f00d fa00 	bl	8014e44 <iprintf>
    return;
 8007a44:	e7ee      	b.n	8007a24 <mem_free+0x6c>
 8007a46:	4770      	bx	lr
 8007a48:	20001708 	.word	0x20001708
 8007a4c:	2000170c 	.word	0x2000170c
 8007a50:	20001704 	.word	0x20001704
 8007a54:	0801667c 	.word	0x0801667c
 8007a58:	080164f4 	.word	0x080164f4
 8007a5c:	08015d2c 	.word	0x08015d2c
 8007a60:	08016518 	.word	0x08016518
 8007a64:	08016534 	.word	0x08016534
 8007a68:	0801655c 	.word	0x0801655c

08007a6c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a70:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007a72:	1ccc      	adds	r4, r1, #3
 8007a74:	b2a4      	uxth	r4, r4
 8007a76:	f024 0403 	bic.w	r4, r4, #3
 8007a7a:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8007a7c:	2c0b      	cmp	r4, #11
 8007a7e:	d904      	bls.n	8007a8a <mem_trim+0x1e>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007a80:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 8007a84:	d902      	bls.n	8007a8c <mem_trim+0x20>
    return NULL;
 8007a86:	2500      	movs	r5, #0
 8007a88:	e099      	b.n	8007bbe <mem_trim+0x152>
    newsize = MIN_SIZE_ALIGNED;
 8007a8a:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007a8c:	428c      	cmp	r4, r1
 8007a8e:	f0c0 8095 	bcc.w	8007bbc <mem_trim+0x150>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007a92:	4b4d      	ldr	r3, [pc, #308]	; (8007bc8 <mem_trim+0x15c>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	42ab      	cmp	r3, r5
 8007a98:	d803      	bhi.n	8007aa2 <mem_trim+0x36>
 8007a9a:	4b4c      	ldr	r3, [pc, #304]	; (8007bcc <mem_trim+0x160>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	42ab      	cmp	r3, r5
 8007aa0:	d806      	bhi.n	8007ab0 <mem_trim+0x44>
 8007aa2:	4b4b      	ldr	r3, [pc, #300]	; (8007bd0 <mem_trim+0x164>)
 8007aa4:	f240 22d2 	movw	r2, #722	; 0x2d2
 8007aa8:	494a      	ldr	r1, [pc, #296]	; (8007bd4 <mem_trim+0x168>)
 8007aaa:	484b      	ldr	r0, [pc, #300]	; (8007bd8 <mem_trim+0x16c>)
 8007aac:	f00d f9ca 	bl	8014e44 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007ab0:	4b45      	ldr	r3, [pc, #276]	; (8007bc8 <mem_trim+0x15c>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	42ab      	cmp	r3, r5
 8007ab6:	f200 8082 	bhi.w	8007bbe <mem_trim+0x152>
 8007aba:	4b44      	ldr	r3, [pc, #272]	; (8007bcc <mem_trim+0x160>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	42ab      	cmp	r3, r5
 8007ac0:	d97d      	bls.n	8007bbe <mem_trim+0x152>
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007ac2:	f1a5 0008 	sub.w	r0, r5, #8
 8007ac6:	f7ff fea1 	bl	800780c <mem_to_ptr>
 8007aca:	4606      	mov	r6, r0

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007acc:	f835 8c08 	ldrh.w	r8, [r5, #-8]
 8007ad0:	eba8 0800 	sub.w	r8, r8, r0
 8007ad4:	fa1f f888 	uxth.w	r8, r8
 8007ad8:	f1a8 0808 	sub.w	r8, r8, #8
 8007adc:	fa1f f888 	uxth.w	r8, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007ae0:	4544      	cmp	r4, r8
 8007ae2:	d829      	bhi.n	8007b38 <mem_trim+0xcc>
  if (newsize > size) {
 8007ae4:	4544      	cmp	r4, r8
 8007ae6:	d86d      	bhi.n	8007bc4 <mem_trim+0x158>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8007ae8:	d069      	beq.n	8007bbe <mem_trim+0x152>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007aea:	f835 7c08 	ldrh.w	r7, [r5, #-8]
 8007aee:	4638      	mov	r0, r7
 8007af0:	f7ff fe86 	bl	8007800 <ptr_to_mem>
 8007af4:	4681      	mov	r9, r0
  if (mem2->used == 0) {
 8007af6:	7903      	ldrb	r3, [r0, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d133      	bne.n	8007b64 <mem_trim+0xf8>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007afc:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
 8007b00:	d022      	beq.n	8007b48 <mem_trim+0xdc>
    /* remember the old next pointer */
    next = mem2->next;
 8007b02:	f8b9 7000 	ldrh.w	r7, [r9]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007b06:	4434      	add	r4, r6
 8007b08:	b2a4      	uxth	r4, r4
 8007b0a:	3408      	adds	r4, #8
 8007b0c:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 8007b0e:	4b33      	ldr	r3, [pc, #204]	; (8007bdc <mem_trim+0x170>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	454b      	cmp	r3, r9
 8007b14:	d020      	beq.n	8007b58 <mem_trim+0xec>
      lfree = ptr_to_mem(ptr2);
    }
    mem2 = ptr_to_mem(ptr2);
 8007b16:	4620      	mov	r0, r4
 8007b18:	f7ff fe72 	bl	8007800 <ptr_to_mem>
    mem2->used = 0;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	7103      	strb	r3, [r0, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007b20:	8007      	strh	r7, [r0, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007b22:	8046      	strh	r6, [r0, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007b24:	f825 4c08 	strh.w	r4, [r5, #-8]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007b28:	8800      	ldrh	r0, [r0, #0]
 8007b2a:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 8007b2e:	d046      	beq.n	8007bbe <mem_trim+0x152>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007b30:	f7ff fe66 	bl	8007800 <ptr_to_mem>
 8007b34:	8044      	strh	r4, [r0, #2]
 8007b36:	e042      	b.n	8007bbe <mem_trim+0x152>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007b38:	4b25      	ldr	r3, [pc, #148]	; (8007bd0 <mem_trim+0x164>)
 8007b3a:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007b3e:	4928      	ldr	r1, [pc, #160]	; (8007be0 <mem_trim+0x174>)
 8007b40:	4825      	ldr	r0, [pc, #148]	; (8007bd8 <mem_trim+0x16c>)
 8007b42:	f00d f97f 	bl	8014e44 <iprintf>
 8007b46:	e7cd      	b.n	8007ae4 <mem_trim+0x78>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007b48:	4b21      	ldr	r3, [pc, #132]	; (8007bd0 <mem_trim+0x164>)
 8007b4a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007b4e:	4925      	ldr	r1, [pc, #148]	; (8007be4 <mem_trim+0x178>)
 8007b50:	4821      	ldr	r0, [pc, #132]	; (8007bd8 <mem_trim+0x16c>)
 8007b52:	f00d f977 	bl	8014e44 <iprintf>
 8007b56:	e7d4      	b.n	8007b02 <mem_trim+0x96>
      lfree = ptr_to_mem(ptr2);
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f7ff fe51 	bl	8007800 <ptr_to_mem>
 8007b5e:	4b1f      	ldr	r3, [pc, #124]	; (8007bdc <mem_trim+0x170>)
 8007b60:	6018      	str	r0, [r3, #0]
 8007b62:	e7d8      	b.n	8007b16 <mem_trim+0xaa>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007b64:	f104 0314 	add.w	r3, r4, #20
 8007b68:	4543      	cmp	r3, r8
 8007b6a:	d828      	bhi.n	8007bbe <mem_trim+0x152>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007b6c:	4434      	add	r4, r6
 8007b6e:	b2a4      	uxth	r4, r4
 8007b70:	3408      	adds	r4, #8
 8007b72:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007b74:	f5b7 6fc8 	cmp.w	r7, #1600	; 0x640
 8007b78:	d018      	beq.n	8007bac <mem_trim+0x140>
    mem2 = ptr_to_mem(ptr2);
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f7ff fe40 	bl	8007800 <ptr_to_mem>
    if (mem2 < lfree) {
 8007b80:	4b16      	ldr	r3, [pc, #88]	; (8007bdc <mem_trim+0x170>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4283      	cmp	r3, r0
 8007b86:	d901      	bls.n	8007b8c <mem_trim+0x120>
      lfree = mem2;
 8007b88:	4b14      	ldr	r3, [pc, #80]	; (8007bdc <mem_trim+0x170>)
 8007b8a:	6018      	str	r0, [r3, #0]
    }
    mem2->used = 0;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	7103      	strb	r3, [r0, #4]
    mem2->next = mem->next;
 8007b90:	f835 3c08 	ldrh.w	r3, [r5, #-8]
 8007b94:	8003      	strh	r3, [r0, #0]
    mem2->prev = ptr;
 8007b96:	8046      	strh	r6, [r0, #2]
    mem->next = ptr2;
 8007b98:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007b9c:	8800      	ldrh	r0, [r0, #0]
 8007b9e:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 8007ba2:	d00c      	beq.n	8007bbe <mem_trim+0x152>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007ba4:	f7ff fe2c 	bl	8007800 <ptr_to_mem>
 8007ba8:	8044      	strh	r4, [r0, #2]
 8007baa:	e008      	b.n	8007bbe <mem_trim+0x152>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007bac:	4b08      	ldr	r3, [pc, #32]	; (8007bd0 <mem_trim+0x164>)
 8007bae:	f240 3216 	movw	r2, #790	; 0x316
 8007bb2:	490c      	ldr	r1, [pc, #48]	; (8007be4 <mem_trim+0x178>)
 8007bb4:	4808      	ldr	r0, [pc, #32]	; (8007bd8 <mem_trim+0x16c>)
 8007bb6:	f00d f945 	bl	8014e44 <iprintf>
 8007bba:	e7de      	b.n	8007b7a <mem_trim+0x10e>
    return NULL;
 8007bbc:	2500      	movs	r5, #0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8007bc4:	2500      	movs	r5, #0
 8007bc6:	e7fa      	b.n	8007bbe <mem_trim+0x152>
 8007bc8:	20001708 	.word	0x20001708
 8007bcc:	2000170c 	.word	0x2000170c
 8007bd0:	0801667c 	.word	0x0801667c
 8007bd4:	08016630 	.word	0x08016630
 8007bd8:	08015d2c 	.word	0x08015d2c
 8007bdc:	20001704 	.word	0x20001704
 8007be0:	08016648 	.word	0x08016648
 8007be4:	08016668 	.word	0x08016668

08007be8 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007be8:	2800      	cmp	r0, #0
 8007bea:	f000 809a 	beq.w	8007d22 <mem_malloc+0x13a>
{
 8007bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf2:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007bf4:	1cc6      	adds	r6, r0, #3
 8007bf6:	b2b6      	uxth	r6, r6
 8007bf8:	f026 0603 	bic.w	r6, r6, #3
 8007bfc:	b2b6      	uxth	r6, r6
  if (size < MIN_SIZE_ALIGNED) {
 8007bfe:	2e0b      	cmp	r6, #11
 8007c00:	d904      	bls.n	8007c0c <mem_malloc+0x24>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007c02:	f5b6 6fc8 	cmp.w	r6, #1600	; 0x640
 8007c06:	d902      	bls.n	8007c0e <mem_malloc+0x26>
    return NULL;
 8007c08:	2000      	movs	r0, #0
 8007c0a:	e088      	b.n	8007d1e <mem_malloc+0x136>
    size = MIN_SIZE_ALIGNED;
 8007c0c:	260c      	movs	r6, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007c0e:	429e      	cmp	r6, r3
 8007c10:	f0c0 8089 	bcc.w	8007d26 <mem_malloc+0x13e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007c14:	4b45      	ldr	r3, [pc, #276]	; (8007d2c <mem_malloc+0x144>)
 8007c16:	6818      	ldr	r0, [r3, #0]
 8007c18:	f7ff fdf8 	bl	800780c <mem_to_ptr>
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	e04c      	b.n	8007cba <mem_malloc+0xd2>
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007c20:	4b43      	ldr	r3, [pc, #268]	; (8007d30 <mem_malloc+0x148>)
 8007c22:	f240 3287 	movw	r2, #903	; 0x387
 8007c26:	4943      	ldr	r1, [pc, #268]	; (8007d34 <mem_malloc+0x14c>)
 8007c28:	4843      	ldr	r0, [pc, #268]	; (8007d38 <mem_malloc+0x150>)
 8007c2a:	f00d f90b 	bl	8014e44 <iprintf>
 8007c2e:	e062      	b.n	8007cf6 <mem_malloc+0x10e>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007c30:	2301      	movs	r3, #1
 8007c32:	7103      	strb	r3, [r0, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007c34:	4b3d      	ldr	r3, [pc, #244]	; (8007d2c <mem_malloc+0x144>)
 8007c36:	6818      	ldr	r0, [r3, #0]
 8007c38:	42a8      	cmp	r0, r5
 8007c3a:	d00f      	beq.n	8007c5c <mem_malloc+0x74>
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007c3c:	442f      	add	r7, r5
 8007c3e:	3708      	adds	r7, #8
 8007c40:	4b3e      	ldr	r3, [pc, #248]	; (8007d3c <mem_malloc+0x154>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	429f      	cmp	r7, r3
 8007c46:	d81f      	bhi.n	8007c88 <mem_malloc+0xa0>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007c48:	f015 0403 	ands.w	r4, r5, #3
 8007c4c:	d124      	bne.n	8007c98 <mem_malloc+0xb0>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007c4e:	bb5c      	cbnz	r4, 8007ca8 <mem_malloc+0xc0>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007c50:	f105 0008 	add.w	r0, r5, #8
 8007c54:	e063      	b.n	8007d1e <mem_malloc+0x136>
            cur = ptr_to_mem(cur->next);
 8007c56:	8800      	ldrh	r0, [r0, #0]
 8007c58:	f7ff fdd2 	bl	8007800 <ptr_to_mem>
          while (cur->used && cur != ram_end) {
 8007c5c:	7903      	ldrb	r3, [r0, #4]
 8007c5e:	b11b      	cbz	r3, 8007c68 <mem_malloc+0x80>
 8007c60:	4a36      	ldr	r2, [pc, #216]	; (8007d3c <mem_malloc+0x154>)
 8007c62:	6812      	ldr	r2, [r2, #0]
 8007c64:	4282      	cmp	r2, r0
 8007c66:	d1f6      	bne.n	8007c56 <mem_malloc+0x6e>
          lfree = cur;
 8007c68:	4a30      	ldr	r2, [pc, #192]	; (8007d2c <mem_malloc+0x144>)
 8007c6a:	6010      	str	r0, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007c6c:	4a33      	ldr	r2, [pc, #204]	; (8007d3c <mem_malloc+0x154>)
 8007c6e:	6812      	ldr	r2, [r2, #0]
 8007c70:	4282      	cmp	r2, r0
 8007c72:	d0e3      	beq.n	8007c3c <mem_malloc+0x54>
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0e1      	beq.n	8007c3c <mem_malloc+0x54>
 8007c78:	4b2d      	ldr	r3, [pc, #180]	; (8007d30 <mem_malloc+0x148>)
 8007c7a:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007c7e:	4930      	ldr	r1, [pc, #192]	; (8007d40 <mem_malloc+0x158>)
 8007c80:	482d      	ldr	r0, [pc, #180]	; (8007d38 <mem_malloc+0x150>)
 8007c82:	f00d f8df 	bl	8014e44 <iprintf>
 8007c86:	e7d9      	b.n	8007c3c <mem_malloc+0x54>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007c88:	4b29      	ldr	r3, [pc, #164]	; (8007d30 <mem_malloc+0x148>)
 8007c8a:	f240 32ba 	movw	r2, #954	; 0x3ba
 8007c8e:	492d      	ldr	r1, [pc, #180]	; (8007d44 <mem_malloc+0x15c>)
 8007c90:	4829      	ldr	r0, [pc, #164]	; (8007d38 <mem_malloc+0x150>)
 8007c92:	f00d f8d7 	bl	8014e44 <iprintf>
 8007c96:	e7d7      	b.n	8007c48 <mem_malloc+0x60>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007c98:	4b25      	ldr	r3, [pc, #148]	; (8007d30 <mem_malloc+0x148>)
 8007c9a:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8007c9e:	492a      	ldr	r1, [pc, #168]	; (8007d48 <mem_malloc+0x160>)
 8007ca0:	4825      	ldr	r0, [pc, #148]	; (8007d38 <mem_malloc+0x150>)
 8007ca2:	f00d f8cf 	bl	8014e44 <iprintf>
 8007ca6:	e7d2      	b.n	8007c4e <mem_malloc+0x66>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007ca8:	4b21      	ldr	r3, [pc, #132]	; (8007d30 <mem_malloc+0x148>)
 8007caa:	f240 32be 	movw	r2, #958	; 0x3be
 8007cae:	4927      	ldr	r1, [pc, #156]	; (8007d4c <mem_malloc+0x164>)
 8007cb0:	4821      	ldr	r0, [pc, #132]	; (8007d38 <mem_malloc+0x150>)
 8007cb2:	f00d f8c7 	bl	8014e44 <iprintf>
 8007cb6:	e7cb      	b.n	8007c50 <mem_malloc+0x68>
         ptr = ptr_to_mem(ptr)->next) {
 8007cb8:	882c      	ldrh	r4, [r5, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007cba:	46a0      	mov	r8, r4
 8007cbc:	4637      	mov	r7, r6
 8007cbe:	f5c6 63c8 	rsb	r3, r6, #1600	; 0x640
 8007cc2:	429c      	cmp	r4, r3
 8007cc4:	d22a      	bcs.n	8007d1c <mem_malloc+0x134>
      mem = ptr_to_mem(ptr);
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f7ff fd9a 	bl	8007800 <ptr_to_mem>
 8007ccc:	4605      	mov	r5, r0
      if ((!mem->used) &&
 8007cce:	7903      	ldrb	r3, [r0, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1f1      	bne.n	8007cb8 <mem_malloc+0xd0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007cd4:	8803      	ldrh	r3, [r0, #0]
 8007cd6:	eba3 0308 	sub.w	r3, r3, r8
 8007cda:	3b08      	subs	r3, #8
      if ((!mem->used) &&
 8007cdc:	42bb      	cmp	r3, r7
 8007cde:	d3eb      	bcc.n	8007cb8 <mem_malloc+0xd0>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007ce0:	f107 0214 	add.w	r2, r7, #20
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d3a3      	bcc.n	8007c30 <mem_malloc+0x48>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007ce8:	4426      	add	r6, r4
 8007cea:	b2b6      	uxth	r6, r6
 8007cec:	3608      	adds	r6, #8
 8007cee:	b2b6      	uxth	r6, r6
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007cf0:	f5b6 6fc8 	cmp.w	r6, #1600	; 0x640
 8007cf4:	d094      	beq.n	8007c20 <mem_malloc+0x38>
          mem2 = ptr_to_mem(ptr2);
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f7ff fd82 	bl	8007800 <ptr_to_mem>
          mem2->used = 0;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	7103      	strb	r3, [r0, #4]
          mem2->next = mem->next;
 8007d00:	882b      	ldrh	r3, [r5, #0]
 8007d02:	8003      	strh	r3, [r0, #0]
          mem2->prev = ptr;
 8007d04:	8044      	strh	r4, [r0, #2]
          mem->next = ptr2;
 8007d06:	802e      	strh	r6, [r5, #0]
          mem->used = 1;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	712b      	strb	r3, [r5, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007d0c:	8800      	ldrh	r0, [r0, #0]
 8007d0e:	f5b0 6fc8 	cmp.w	r0, #1600	; 0x640
 8007d12:	d08f      	beq.n	8007c34 <mem_malloc+0x4c>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007d14:	f7ff fd74 	bl	8007800 <ptr_to_mem>
 8007d18:	8046      	strh	r6, [r0, #2]
 8007d1a:	e78b      	b.n	8007c34 <mem_malloc+0x4c>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007d1c:	2000      	movs	r0, #0
}
 8007d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return NULL;
 8007d22:	2000      	movs	r0, #0
}
 8007d24:	4770      	bx	lr
    return NULL;
 8007d26:	2000      	movs	r0, #0
 8007d28:	e7f9      	b.n	8007d1e <mem_malloc+0x136>
 8007d2a:	bf00      	nop
 8007d2c:	20001704 	.word	0x20001704
 8007d30:	0801667c 	.word	0x0801667c
 8007d34:	08016668 	.word	0x08016668
 8007d38:	08015d2c 	.word	0x08015d2c
 8007d3c:	2000170c 	.word	0x2000170c
 8007d40:	08016590 	.word	0x08016590
 8007d44:	080165ac 	.word	0x080165ac
 8007d48:	080165dc 	.word	0x080165dc
 8007d4c:	0801660c 	.word	0x0801660c

08007d50 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007d50:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007d52:	6883      	ldr	r3, [r0, #8]
 8007d54:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007d56:	b174      	cbz	r4, 8007d76 <do_memp_malloc_pool+0x26>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007d58:	6822      	ldr	r2, [r4, #0]
 8007d5a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007d5c:	f014 0f03 	tst.w	r4, #3
 8007d60:	d101      	bne.n	8007d66 <do_memp_malloc_pool+0x16>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8007d62:	4620      	mov	r0, r4
 8007d64:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007d66:	4b05      	ldr	r3, [pc, #20]	; (8007d7c <do_memp_malloc_pool+0x2c>)
 8007d68:	f240 1219 	movw	r2, #281	; 0x119
 8007d6c:	4904      	ldr	r1, [pc, #16]	; (8007d80 <do_memp_malloc_pool+0x30>)
 8007d6e:	4805      	ldr	r0, [pc, #20]	; (8007d84 <do_memp_malloc_pool+0x34>)
 8007d70:	f00d f868 	bl	8014e44 <iprintf>
 8007d74:	e7f5      	b.n	8007d62 <do_memp_malloc_pool+0x12>
  return NULL;
 8007d76:	2400      	movs	r4, #0
 8007d78:	e7f3      	b.n	8007d62 <do_memp_malloc_pool+0x12>
 8007d7a:	bf00      	nop
 8007d7c:	08016748 	.word	0x08016748
 8007d80:	08016778 	.word	0x08016778
 8007d84:	08015d2c 	.word	0x08015d2c

08007d88 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007d88:	b538      	push	{r3, r4, r5, lr}
 8007d8a:	4605      	mov	r5, r0
 8007d8c:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007d8e:	f011 0f03 	tst.w	r1, #3
 8007d92:	d105      	bne.n	8007da0 <do_memp_free_pool+0x18>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007d94:	68ab      	ldr	r3, [r5, #8]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 8007d9a:	68ab      	ldr	r3, [r5, #8]
 8007d9c:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8007da0:	4b03      	ldr	r3, [pc, #12]	; (8007db0 <do_memp_free_pool+0x28>)
 8007da2:	f240 126d 	movw	r2, #365	; 0x16d
 8007da6:	4903      	ldr	r1, [pc, #12]	; (8007db4 <do_memp_free_pool+0x2c>)
 8007da8:	4803      	ldr	r0, [pc, #12]	; (8007db8 <do_memp_free_pool+0x30>)
 8007daa:	f00d f84b 	bl	8014e44 <iprintf>
 8007dae:	e7f1      	b.n	8007d94 <do_memp_free_pool+0xc>
 8007db0:	08016748 	.word	0x08016748
 8007db4:	08016728 	.word	0x08016728
 8007db8:	08015d2c 	.word	0x08015d2c

08007dbc <memp_init_pool>:
  *desc->tab = NULL;
 8007dbc:	6883      	ldr	r3, [r0, #8]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007dc2:	6843      	ldr	r3, [r0, #4]
 8007dc4:	3303      	adds	r3, #3
 8007dc6:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8007dca:	e007      	b.n	8007ddc <memp_init_pool+0x20>
    memp->next = *desc->tab;
 8007dcc:	6881      	ldr	r1, [r0, #8]
 8007dce:	6809      	ldr	r1, [r1, #0]
 8007dd0:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8007dd2:	6881      	ldr	r1, [r0, #8]
 8007dd4:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007dd6:	8801      	ldrh	r1, [r0, #0]
 8007dd8:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 8007dda:	3201      	adds	r2, #1
 8007ddc:	8841      	ldrh	r1, [r0, #2]
 8007dde:	4291      	cmp	r1, r2
 8007de0:	dcf4      	bgt.n	8007dcc <memp_init_pool+0x10>
}
 8007de2:	4770      	bx	lr

08007de4 <memp_init>:
{
 8007de4:	b510      	push	{r4, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007de6:	2400      	movs	r4, #0
 8007de8:	e006      	b.n	8007df8 <memp_init+0x14>
    memp_init_pool(memp_pools[i]);
 8007dea:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <memp_init+0x1c>)
 8007dec:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007df0:	f7ff ffe4 	bl	8007dbc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007df4:	3401      	adds	r4, #1
 8007df6:	b2a4      	uxth	r4, r4
 8007df8:	2c0b      	cmp	r4, #11
 8007dfa:	d9f6      	bls.n	8007dea <memp_init+0x6>
}
 8007dfc:	bd10      	pop	{r4, pc}
 8007dfe:	bf00      	nop
 8007e00:	08016868 	.word	0x08016868

08007e04 <memp_malloc>:
{
 8007e04:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007e06:	280b      	cmp	r0, #11
 8007e08:	d805      	bhi.n	8007e16 <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007e0a:	4b07      	ldr	r3, [pc, #28]	; (8007e28 <memp_malloc+0x24>)
 8007e0c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007e10:	f7ff ff9e 	bl	8007d50 <do_memp_malloc_pool>
}
 8007e14:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007e16:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <memp_malloc+0x28>)
 8007e18:	f240 1257 	movw	r2, #343	; 0x157
 8007e1c:	4904      	ldr	r1, [pc, #16]	; (8007e30 <memp_malloc+0x2c>)
 8007e1e:	4805      	ldr	r0, [pc, #20]	; (8007e34 <memp_malloc+0x30>)
 8007e20:	f00d f810 	bl	8014e44 <iprintf>
 8007e24:	2000      	movs	r0, #0
 8007e26:	e7f5      	b.n	8007e14 <memp_malloc+0x10>
 8007e28:	08016868 	.word	0x08016868
 8007e2c:	08016748 	.word	0x08016748
 8007e30:	08016848 	.word	0x08016848
 8007e34:	08015d2c 	.word	0x08015d2c

08007e38 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007e38:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007e3a:	280b      	cmp	r0, #11
 8007e3c:	d806      	bhi.n	8007e4c <memp_free+0x14>

  if (mem == NULL) {
 8007e3e:	b121      	cbz	r1, 8007e4a <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007e40:	4b06      	ldr	r3, [pc, #24]	; (8007e5c <memp_free+0x24>)
 8007e42:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007e46:	f7ff ff9f 	bl	8007d88 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007e4a:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007e4c:	4b04      	ldr	r3, [pc, #16]	; (8007e60 <memp_free+0x28>)
 8007e4e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007e52:	4904      	ldr	r1, [pc, #16]	; (8007e64 <memp_free+0x2c>)
 8007e54:	4804      	ldr	r0, [pc, #16]	; (8007e68 <memp_free+0x30>)
 8007e56:	f00c fff5 	bl	8014e44 <iprintf>
 8007e5a:	e7f6      	b.n	8007e4a <memp_free+0x12>
 8007e5c:	08016868 	.word	0x08016868
 8007e60:	08016748 	.word	0x08016748
 8007e64:	0801682c 	.word	0x0801682c
 8007e68:	08015d2c 	.word	0x08015d2c

08007e6c <netif_do_set_netmask>:

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007e6c:	680b      	ldr	r3, [r1, #0]
 8007e6e:	69c2      	ldr	r2, [r0, #28]
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d008      	beq.n	8007e86 <netif_do_set_netmask+0x1a>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007e74:	b129      	cbz	r1, 8007e82 <netif_do_set_netmask+0x16>
 8007e76:	61c3      	str	r3, [r0, #28]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
 8007e78:	2300      	movs	r3, #0
 8007e7a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007e7e:	2001      	movs	r0, #1
 8007e80:	4770      	bx	lr
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007e82:	2300      	movs	r3, #0
 8007e84:	e7f7      	b.n	8007e76 <netif_do_set_netmask+0xa>
  }
  return 0; /* netmask unchanged */
 8007e86:	2000      	movs	r0, #0
}
 8007e88:	4770      	bx	lr

08007e8a <netif_do_set_gw>:

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007e8a:	680b      	ldr	r3, [r1, #0]
 8007e8c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d008      	beq.n	8007ea4 <netif_do_set_gw+0x1a>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007e92:	b129      	cbz	r1, 8007ea0 <netif_do_set_gw+0x16>
 8007e94:	6343      	str	r3, [r0, #52]	; 0x34
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
 8007e96:	2300      	movs	r3, #0
 8007e98:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007e9c:	2001      	movs	r0, #1
 8007e9e:	4770      	bx	lr
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	e7f7      	b.n	8007e94 <netif_do_set_gw+0xa>
  }
  return 0; /* gateway unchanged */
 8007ea4:	2000      	movs	r0, #0
}
 8007ea6:	4770      	bx	lr

08007ea8 <netif_null_output_ip6>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8007ea8:	f06f 000b 	mvn.w	r0, #11
 8007eac:	4770      	bx	lr

08007eae <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8007eae:	f06f 000b 	mvn.w	r0, #11
 8007eb2:	4770      	bx	lr

08007eb4 <netif_do_ip_addr_changed>:
{
 8007eb4:	b538      	push	{r3, r4, r5, lr}
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	460d      	mov	r5, r1
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007eba:	f001 fba9 	bl	8009610 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f005 ff7b 	bl	800ddbc <udp_netif_ip_addr_changed>
}
 8007ec6:	bd38      	pop	{r3, r4, r5, pc}

08007ec8 <netif_issue_reports>:
{
 8007ec8:	b538      	push	{r3, r4, r5, lr}
 8007eca:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007ecc:	4604      	mov	r4, r0
 8007ece:	b130      	cbz	r0, 8007ede <netif_issue_reports+0x16>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007ed0:	f894 30db 	ldrb.w	r3, [r4, #219]	; 0xdb
 8007ed4:	f003 0205 	and.w	r2, r3, #5
 8007ed8:	2a05      	cmp	r2, #5
 8007eda:	d008      	beq.n	8007eee <netif_issue_reports+0x26>
}
 8007edc:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007ede:	4b0e      	ldr	r3, [pc, #56]	; (8007f18 <netif_issue_reports+0x50>)
 8007ee0:	f240 326d 	movw	r2, #877	; 0x36d
 8007ee4:	490d      	ldr	r1, [pc, #52]	; (8007f1c <netif_issue_reports+0x54>)
 8007ee6:	480e      	ldr	r0, [pc, #56]	; (8007f20 <netif_issue_reports+0x58>)
 8007ee8:	f00c ffac 	bl	8014e44 <iprintf>
 8007eec:	e7f0      	b.n	8007ed0 <netif_issue_reports+0x8>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007eee:	f015 0f01 	tst.w	r5, #1
 8007ef2:	d004      	beq.n	8007efe <netif_issue_reports+0x36>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007ef4:	6862      	ldr	r2, [r4, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007ef6:	b112      	cbz	r2, 8007efe <netif_issue_reports+0x36>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007ef8:	f013 0f08 	tst.w	r3, #8
 8007efc:	d106      	bne.n	8007f0c <netif_issue_reports+0x44>
  if (report_type & NETIF_REPORT_TYPE_IPV6) {
 8007efe:	f015 0f02 	tst.w	r5, #2
 8007f02:	d0eb      	beq.n	8007edc <netif_issue_reports+0x14>
    mld6_report_groups(netif);
 8007f04:	4620      	mov	r0, r4
 8007f06:	f00a fb25 	bl	8012554 <mld6_report_groups>
 8007f0a:	e7e7      	b.n	8007edc <netif_issue_reports+0x14>
      etharp_gratuitous(netif);
 8007f0c:	1d21      	adds	r1, r4, #4
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f007 fd18 	bl	800f944 <etharp_request>
 8007f14:	e7f3      	b.n	8007efe <netif_issue_reports+0x36>
 8007f16:	bf00      	nop
 8007f18:	080169c4 	.word	0x080169c4
 8007f1c:	080169f8 	.word	0x080169f8
 8007f20:	08015d2c 	.word	0x08015d2c

08007f24 <netif_do_set_ipaddr>:
{
 8007f24:	b570      	push	{r4, r5, r6, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	4604      	mov	r4, r0
 8007f2a:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007f2c:	460e      	mov	r6, r1
 8007f2e:	b321      	cbz	r1, 8007f7a <netif_do_set_ipaddr+0x56>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007f30:	b35d      	cbz	r5, 8007f8a <netif_do_set_ipaddr+0x66>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007f32:	6832      	ldr	r2, [r6, #0]
 8007f34:	6863      	ldr	r3, [r4, #4]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d03c      	beq.n	8007fb4 <netif_do_set_ipaddr+0x90>
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007f3a:	9200      	str	r2, [sp, #0]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f88d 3014 	strb.w	r3, [sp, #20]
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007f42:	7e23      	ldrb	r3, [r4, #24]
 8007f44:	752b      	strb	r3, [r5, #20]
 8007f46:	7e23      	ldrb	r3, [r4, #24]
 8007f48:	2b06      	cmp	r3, #6
 8007f4a:	d026      	beq.n	8007f9a <netif_do_set_ipaddr+0x76>
 8007f4c:	6863      	ldr	r3, [r4, #4]
 8007f4e:	602b      	str	r3, [r5, #0]
 8007f50:	2300      	movs	r3, #0
 8007f52:	60eb      	str	r3, [r5, #12]
 8007f54:	60ab      	str	r3, [r5, #8]
 8007f56:	606b      	str	r3, [r5, #4]
 8007f58:	742b      	strb	r3, [r5, #16]
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007f5a:	4669      	mov	r1, sp
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	f7ff ffa9 	bl	8007eb4 <netif_do_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007f62:	b32e      	cbz	r6, 8007fb0 <netif_do_set_ipaddr+0x8c>
 8007f64:	6833      	ldr	r3, [r6, #0]
 8007f66:	6063      	str	r3, [r4, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
 8007f68:	2300      	movs	r3, #0
 8007f6a:	7623      	strb	r3, [r4, #24]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f7ff ffaa 	bl	8007ec8 <netif_issue_reports>
    return 1; /* address changed */
 8007f74:	2001      	movs	r0, #1
}
 8007f76:	b006      	add	sp, #24
 8007f78:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007f7a:	4b0f      	ldr	r3, [pc, #60]	; (8007fb8 <netif_do_set_ipaddr+0x94>)
 8007f7c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007f80:	490e      	ldr	r1, [pc, #56]	; (8007fbc <netif_do_set_ipaddr+0x98>)
 8007f82:	480f      	ldr	r0, [pc, #60]	; (8007fc0 <netif_do_set_ipaddr+0x9c>)
 8007f84:	f00c ff5e 	bl	8014e44 <iprintf>
 8007f88:	e7d2      	b.n	8007f30 <netif_do_set_ipaddr+0xc>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007f8a:	4b0b      	ldr	r3, [pc, #44]	; (8007fb8 <netif_do_set_ipaddr+0x94>)
 8007f8c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8007f90:	490a      	ldr	r1, [pc, #40]	; (8007fbc <netif_do_set_ipaddr+0x98>)
 8007f92:	480b      	ldr	r0, [pc, #44]	; (8007fc0 <netif_do_set_ipaddr+0x9c>)
 8007f94:	f00c ff56 	bl	8014e44 <iprintf>
 8007f98:	e7cb      	b.n	8007f32 <netif_do_set_ipaddr+0xe>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007f9a:	6863      	ldr	r3, [r4, #4]
 8007f9c:	602b      	str	r3, [r5, #0]
 8007f9e:	68a3      	ldr	r3, [r4, #8]
 8007fa0:	606b      	str	r3, [r5, #4]
 8007fa2:	68e3      	ldr	r3, [r4, #12]
 8007fa4:	60ab      	str	r3, [r5, #8]
 8007fa6:	6923      	ldr	r3, [r4, #16]
 8007fa8:	60eb      	str	r3, [r5, #12]
 8007faa:	7d23      	ldrb	r3, [r4, #20]
 8007fac:	742b      	strb	r3, [r5, #16]
 8007fae:	e7d4      	b.n	8007f5a <netif_do_set_ipaddr+0x36>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	e7d8      	b.n	8007f66 <netif_do_set_ipaddr+0x42>
  return 0; /* address unchanged */
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	e7de      	b.n	8007f76 <netif_do_set_ipaddr+0x52>
 8007fb8:	080169c4 	.word	0x080169c4
 8007fbc:	08016950 	.word	0x08016950
 8007fc0:	08015d2c 	.word	0x08015d2c

08007fc4 <netif_init>:
}
 8007fc4:	4770      	bx	lr
	...

08007fc8 <netif_set_addr>:
{
 8007fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fcc:	b086      	sub	sp, #24
 8007fce:	4605      	mov	r5, r0
 8007fd0:	4617      	mov	r7, r2
 8007fd2:	461e      	mov	r6, r3
  if (ipaddr == NULL) {
 8007fd4:	460c      	mov	r4, r1
 8007fd6:	b1d9      	cbz	r1, 8008010 <netif_set_addr+0x48>
  if (netmask == NULL) {
 8007fd8:	b1e7      	cbz	r7, 8008014 <netif_set_addr+0x4c>
  if (gw == NULL) {
 8007fda:	b1ee      	cbz	r6, 8008018 <netif_set_addr+0x50>
  remove = ip4_addr_isany(ipaddr);
 8007fdc:	b10c      	cbz	r4, 8007fe2 <netif_set_addr+0x1a>
 8007fde:	6823      	ldr	r3, [r4, #0]
 8007fe0:	b9e3      	cbnz	r3, 800801c <netif_set_addr+0x54>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007fe2:	466a      	mov	r2, sp
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f7ff ff9c 	bl	8007f24 <netif_do_set_ipaddr>
 8007fec:	f04f 0801 	mov.w	r8, #1
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	4639      	mov	r1, r7
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	f7ff ff39 	bl	8007e6c <netif_do_set_netmask>
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	4631      	mov	r1, r6
 8007ffe:	4628      	mov	r0, r5
 8008000:	f7ff ff43 	bl	8007e8a <netif_do_set_gw>
  if (!remove) {
 8008004:	f1b8 0f00 	cmp.w	r8, #0
 8008008:	d00b      	beq.n	8008022 <netif_set_addr+0x5a>
}
 800800a:	b006      	add	sp, #24
 800800c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ipaddr = IP4_ADDR_ANY4;
 8008010:	4c07      	ldr	r4, [pc, #28]	; (8008030 <netif_set_addr+0x68>)
 8008012:	e7e1      	b.n	8007fd8 <netif_set_addr+0x10>
    netmask = IP4_ADDR_ANY4;
 8008014:	4f06      	ldr	r7, [pc, #24]	; (8008030 <netif_set_addr+0x68>)
 8008016:	e7e0      	b.n	8007fda <netif_set_addr+0x12>
    gw = IP4_ADDR_ANY4;
 8008018:	4e05      	ldr	r6, [pc, #20]	; (8008030 <netif_set_addr+0x68>)
 800801a:	e7df      	b.n	8007fdc <netif_set_addr+0x14>
  remove = ip4_addr_isany(ipaddr);
 800801c:	f04f 0800 	mov.w	r8, #0
 8008020:	e7e6      	b.n	8007ff0 <netif_set_addr+0x28>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008022:	466a      	mov	r2, sp
 8008024:	4621      	mov	r1, r4
 8008026:	4628      	mov	r0, r5
 8008028:	f7ff ff7c 	bl	8007f24 <netif_do_set_ipaddr>
}
 800802c:	e7ed      	b.n	800800a <netif_set_addr+0x42>
 800802e:	bf00      	nop
 8008030:	080187ec 	.word	0x080187ec

08008034 <netif_add>:
{
 8008034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008038:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800803c:	4605      	mov	r5, r0
 800803e:	2800      	cmp	r0, #0
 8008040:	d032      	beq.n	80080a8 <netif_add+0x74>
 8008042:	468a      	mov	sl, r1
 8008044:	4616      	mov	r6, r2
 8008046:	461f      	mov	r7, r3
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008048:	f1b8 0f00 	cmp.w	r8, #0
 800804c:	d035      	beq.n	80080ba <netif_add+0x86>
  if (ipaddr == NULL) {
 800804e:	2900      	cmp	r1, #0
 8008050:	d03c      	beq.n	80080cc <netif_add+0x98>
  if (netmask == NULL) {
 8008052:	2e00      	cmp	r6, #0
 8008054:	d03d      	beq.n	80080d2 <netif_add+0x9e>
  if (gw == NULL) {
 8008056:	2f00      	cmp	r7, #0
 8008058:	d03d      	beq.n	80080d6 <netif_add+0xa2>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800805a:	2300      	movs	r3, #0
 800805c:	606b      	str	r3, [r5, #4]
 800805e:	60ab      	str	r3, [r5, #8]
 8008060:	60eb      	str	r3, [r5, #12]
 8008062:	612b      	str	r3, [r5, #16]
 8008064:	752b      	strb	r3, [r5, #20]
 8008066:	f115 0f04 	cmn.w	r5, #4
 800806a:	d000      	beq.n	800806e <netif_add+0x3a>
 800806c:	762b      	strb	r3, [r5, #24]
  ip_addr_set_zero_ip4(&netif->netmask);
 800806e:	2300      	movs	r3, #0
 8008070:	61eb      	str	r3, [r5, #28]
 8008072:	622b      	str	r3, [r5, #32]
 8008074:	626b      	str	r3, [r5, #36]	; 0x24
 8008076:	62ab      	str	r3, [r5, #40]	; 0x28
 8008078:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800807c:	f115 0f1c 	cmn.w	r5, #28
 8008080:	d001      	beq.n	8008086 <netif_add+0x52>
 8008082:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
  ip_addr_set_zero_ip4(&netif->gw);
 8008086:	2300      	movs	r3, #0
 8008088:	636b      	str	r3, [r5, #52]	; 0x34
 800808a:	63ab      	str	r3, [r5, #56]	; 0x38
 800808c:	63eb      	str	r3, [r5, #60]	; 0x3c
 800808e:	642b      	str	r3, [r5, #64]	; 0x40
 8008090:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8008094:	f115 0f34 	cmn.w	r5, #52	; 0x34
 8008098:	d001      	beq.n	800809e <netif_add+0x6a>
 800809a:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
  netif->output = netif_null_output_ip4;
 800809e:	4b5c      	ldr	r3, [pc, #368]	; (8008210 <netif_add+0x1dc>)
 80080a0:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80080a4:	2300      	movs	r3, #0
 80080a6:	e026      	b.n	80080f6 <netif_add+0xc2>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80080a8:	4b5a      	ldr	r3, [pc, #360]	; (8008214 <netif_add+0x1e0>)
 80080aa:	f240 1227 	movw	r2, #295	; 0x127
 80080ae:	495a      	ldr	r1, [pc, #360]	; (8008218 <netif_add+0x1e4>)
 80080b0:	485a      	ldr	r0, [pc, #360]	; (800821c <netif_add+0x1e8>)
 80080b2:	f00c fec7 	bl	8014e44 <iprintf>
 80080b6:	4628      	mov	r0, r5
 80080b8:	e0a2      	b.n	8008200 <netif_add+0x1cc>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80080ba:	4b56      	ldr	r3, [pc, #344]	; (8008214 <netif_add+0x1e0>)
 80080bc:	f44f 7294 	mov.w	r2, #296	; 0x128
 80080c0:	4957      	ldr	r1, [pc, #348]	; (8008220 <netif_add+0x1ec>)
 80080c2:	4856      	ldr	r0, [pc, #344]	; (800821c <netif_add+0x1e8>)
 80080c4:	f00c febe 	bl	8014e44 <iprintf>
 80080c8:	2000      	movs	r0, #0
 80080ca:	e099      	b.n	8008200 <netif_add+0x1cc>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80080cc:	f8df a154 	ldr.w	sl, [pc, #340]	; 8008224 <netif_add+0x1f0>
 80080d0:	e7bf      	b.n	8008052 <netif_add+0x1e>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80080d2:	4e54      	ldr	r6, [pc, #336]	; (8008224 <netif_add+0x1f0>)
 80080d4:	e7bf      	b.n	8008056 <netif_add+0x22>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80080d6:	4f53      	ldr	r7, [pc, #332]	; (8008224 <netif_add+0x1f0>)
 80080d8:	e7bf      	b.n	800805a <netif_add+0x26>
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
 80080da:	1868      	adds	r0, r5, r1
 80080dc:	2200      	movs	r2, #0
 80080de:	f880 2094 	strb.w	r2, [r0, #148]	; 0x94
    netif->ip6_addr_valid_life[i] = IP6_ADDR_LIFE_STATIC;
 80080e2:	f101 0026 	add.w	r0, r1, #38	; 0x26
 80080e6:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
    netif->ip6_addr_pref_life[i] = IP6_ADDR_LIFE_STATIC;
 80080ea:	3128      	adds	r1, #40	; 0x28
 80080ec:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80080f0:	604a      	str	r2, [r1, #4]
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80080f2:	3301      	adds	r3, #1
 80080f4:	b25b      	sxtb	r3, r3
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	dc1a      	bgt.n	8008130 <netif_add+0xfc>
    ip_addr_set_zero_ip6(&netif->ip6_addr[i]);
 80080fa:	4619      	mov	r1, r3
 80080fc:	0058      	lsls	r0, r3, #1
 80080fe:	eb00 0c03 	add.w	ip, r0, r3
 8008102:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8008106:	4694      	mov	ip, r2
 8008108:	442a      	add	r2, r5
 800810a:	2400      	movs	r4, #0
 800810c:	64d4      	str	r4, [r2, #76]	; 0x4c
 800810e:	6514      	str	r4, [r2, #80]	; 0x50
 8008110:	6554      	str	r4, [r2, #84]	; 0x54
 8008112:	6594      	str	r4, [r2, #88]	; 0x58
 8008114:	f882 405c 	strb.w	r4, [r2, #92]	; 0x5c
 8008118:	4662      	mov	r2, ip
 800811a:	3248      	adds	r2, #72	; 0x48
 800811c:	442a      	add	r2, r5
 800811e:	f112 0f04 	cmn.w	r2, #4
 8008122:	d0da      	beq.n	80080da <netif_add+0xa6>
 8008124:	4662      	mov	r2, ip
 8008126:	442a      	add	r2, r5
 8008128:	2006      	movs	r0, #6
 800812a:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
 800812e:	e7d4      	b.n	80080da <netif_add+0xa6>
  netif->output_ip6 = netif_null_output_ip6;
 8008130:	4b3d      	ldr	r3, [pc, #244]	; (8008228 <netif_add+0x1f4>)
 8008132:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
  netif->mtu = 0;
 8008136:	f04f 0900 	mov.w	r9, #0
 800813a:	f8a5 90d0 	strh.w	r9, [r5, #208]	; 0xd0
  netif->flags = 0;
 800813e:	f885 90db 	strb.w	r9, [r5, #219]	; 0xdb
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8008142:	f8c5 90c8 	str.w	r9, [r5, #200]	; 0xc8
 8008146:	f8c5 90cc 	str.w	r9, [r5, #204]	; 0xcc
  netif->ip6_autoconfig_enabled = 0;
 800814a:	f885 90df 	strb.w	r9, [r5, #223]	; 0xdf
  nd6_restart_netif(netif);
 800814e:	4628      	mov	r0, r5
 8008150:	f00c fd4c 	bl	8014bec <nd6_restart_netif>
  netif->link_callback = NULL;
 8008154:	f8c5 90c0 	str.w	r9, [r5, #192]	; 0xc0
  netif->mld_mac_filter = NULL;
 8008158:	f8c5 90e4 	str.w	r9, [r5, #228]	; 0xe4
  netif->state = state;
 800815c:	9b08      	ldr	r3, [sp, #32]
 800815e:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
  netif->num = netif_num;
 8008162:	4b32      	ldr	r3, [pc, #200]	; (800822c <netif_add+0x1f8>)
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	f885 30de 	strb.w	r3, [r5, #222]	; 0xde
  netif->input = input;
 800816a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800816c:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008170:	463b      	mov	r3, r7
 8008172:	4632      	mov	r2, r6
 8008174:	4651      	mov	r1, sl
 8008176:	4628      	mov	r0, r5
 8008178:	f7ff ff26 	bl	8007fc8 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800817c:	4628      	mov	r0, r5
 800817e:	47c0      	blx	r8
 8008180:	2800      	cmp	r0, #0
 8008182:	d143      	bne.n	800820c <netif_add+0x1d8>
  netif->mtu6 = netif->mtu;
 8008184:	f8b5 30d0 	ldrh.w	r3, [r5, #208]	; 0xd0
 8008188:	f8a5 30d2 	strh.w	r3, [r5, #210]	; 0xd2
 800818c:	e024      	b.n	80081d8 <netif_add+0x1a4>
        netif->num = 0;
 800818e:	2300      	movs	r3, #0
 8008190:	f885 30de 	strb.w	r3, [r5, #222]	; 0xde
 8008194:	e024      	b.n	80081e0 <netif_add+0x1ac>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008196:	4b1f      	ldr	r3, [pc, #124]	; (8008214 <netif_add+0x1e0>)
 8008198:	f240 128b 	movw	r2, #395	; 0x18b
 800819c:	4924      	ldr	r1, [pc, #144]	; (8008230 <netif_add+0x1fc>)
 800819e:	481f      	ldr	r0, [pc, #124]	; (800821c <netif_add+0x1e8>)
 80081a0:	f00c fe50 	bl	8014e44 <iprintf>
 80081a4:	e009      	b.n	80081ba <netif_add+0x186>
        if (netif2->num == netif->num) {
 80081a6:	f894 20de 	ldrb.w	r2, [r4, #222]	; 0xde
 80081aa:	f895 30de 	ldrb.w	r3, [r5, #222]	; 0xde
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d00e      	beq.n	80081d0 <netif_add+0x19c>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80081b2:	6824      	ldr	r4, [r4, #0]
 80081b4:	b17c      	cbz	r4, 80081d6 <netif_add+0x1a2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80081b6:	42ac      	cmp	r4, r5
 80081b8:	d0ed      	beq.n	8008196 <netif_add+0x162>
        num_netifs++;
 80081ba:	3601      	adds	r6, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80081bc:	2eff      	cmp	r6, #255	; 0xff
 80081be:	ddf2      	ble.n	80081a6 <netif_add+0x172>
 80081c0:	4b14      	ldr	r3, [pc, #80]	; (8008214 <netif_add+0x1e0>)
 80081c2:	f240 128d 	movw	r2, #397	; 0x18d
 80081c6:	491b      	ldr	r1, [pc, #108]	; (8008234 <netif_add+0x200>)
 80081c8:	4814      	ldr	r0, [pc, #80]	; (800821c <netif_add+0x1e8>)
 80081ca:	f00c fe3b 	bl	8014e44 <iprintf>
 80081ce:	e7ea      	b.n	80081a6 <netif_add+0x172>
          netif->num++;
 80081d0:	3301      	adds	r3, #1
 80081d2:	f885 30de 	strb.w	r3, [r5, #222]	; 0xde
    } while (netif2 != NULL);
 80081d6:	b13c      	cbz	r4, 80081e8 <netif_add+0x1b4>
      if (netif->num == 255) {
 80081d8:	f895 30de 	ldrb.w	r3, [r5, #222]	; 0xde
 80081dc:	2bff      	cmp	r3, #255	; 0xff
 80081de:	d0d6      	beq.n	800818e <netif_add+0x15a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80081e0:	4b15      	ldr	r3, [pc, #84]	; (8008238 <netif_add+0x204>)
 80081e2:	681c      	ldr	r4, [r3, #0]
      num_netifs = 0;
 80081e4:	2600      	movs	r6, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80081e6:	e7e5      	b.n	80081b4 <netif_add+0x180>
  if (netif->num == 254) {
 80081e8:	f895 30de 	ldrb.w	r3, [r5, #222]	; 0xde
 80081ec:	2bfe      	cmp	r3, #254	; 0xfe
 80081ee:	d009      	beq.n	8008204 <netif_add+0x1d0>
    netif_num = (u8_t)(netif->num + 1);
 80081f0:	3301      	adds	r3, #1
 80081f2:	4a0e      	ldr	r2, [pc, #56]	; (800822c <netif_add+0x1f8>)
 80081f4:	7013      	strb	r3, [r2, #0]
  netif->next = netif_list;
 80081f6:	4b10      	ldr	r3, [pc, #64]	; (8008238 <netif_add+0x204>)
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	602a      	str	r2, [r5, #0]
  netif_list = netif;
 80081fc:	601d      	str	r5, [r3, #0]
  return netif;
 80081fe:	4628      	mov	r0, r5
}
 8008200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    netif_num = 0;
 8008204:	4b09      	ldr	r3, [pc, #36]	; (800822c <netif_add+0x1f8>)
 8008206:	2200      	movs	r2, #0
 8008208:	701a      	strb	r2, [r3, #0]
 800820a:	e7f4      	b.n	80081f6 <netif_add+0x1c2>
    return NULL;
 800820c:	2000      	movs	r0, #0
 800820e:	e7f7      	b.n	8008200 <netif_add+0x1cc>
 8008210:	08007eaf 	.word	0x08007eaf
 8008214:	080169c4 	.word	0x080169c4
 8008218:	08016898 	.word	0x08016898
 800821c:	08015d2c 	.word	0x08015d2c
 8008220:	080168b4 	.word	0x080168b4
 8008224:	080187ec 	.word	0x080187ec
 8008228:	08007ea9 	.word	0x08007ea9
 800822c:	20001740 	.word	0x20001740
 8008230:	080168d8 	.word	0x080168d8
 8008234:	080168ec 	.word	0x080168ec
 8008238:	20008600 	.word	0x20008600

0800823c <netif_set_default>:
  netif_default = netif;
 800823c:	4b01      	ldr	r3, [pc, #4]	; (8008244 <netif_set_default+0x8>)
 800823e:	6018      	str	r0, [r3, #0]
}
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	20008604 	.word	0x20008604

08008248 <netif_set_up>:
{
 8008248:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800824a:	b130      	cbz	r0, 800825a <netif_set_up+0x12>
 800824c:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800824e:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
 8008252:	f013 0f01 	tst.w	r3, #1
 8008256:	d008      	beq.n	800826a <netif_set_up+0x22>
}
 8008258:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800825a:	4b09      	ldr	r3, [pc, #36]	; (8008280 <netif_set_up+0x38>)
 800825c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008260:	4908      	ldr	r1, [pc, #32]	; (8008284 <netif_set_up+0x3c>)
 8008262:	4809      	ldr	r0, [pc, #36]	; (8008288 <netif_set_up+0x40>)
 8008264:	f00c fdee 	bl	8014e44 <iprintf>
 8008268:	e7f6      	b.n	8008258 <netif_set_up+0x10>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800826a:	f043 0301 	orr.w	r3, r3, #1
 800826e:	f880 30db 	strb.w	r3, [r0, #219]	; 0xdb
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008272:	2103      	movs	r1, #3
 8008274:	f7ff fe28 	bl	8007ec8 <netif_issue_reports>
    nd6_restart_netif(netif);
 8008278:	4620      	mov	r0, r4
 800827a:	f00c fcb7 	bl	8014bec <nd6_restart_netif>
 800827e:	e7eb      	b.n	8008258 <netif_set_up+0x10>
 8008280:	080169c4 	.word	0x080169c4
 8008284:	08016a3c 	.word	0x08016a3c
 8008288:	08015d2c 	.word	0x08015d2c

0800828c <netif_set_down>:
{
 800828c:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800828e:	b180      	cbz	r0, 80082b2 <netif_set_down+0x26>
 8008290:	4604      	mov	r4, r0
  if (netif->flags & NETIF_FLAG_UP) {
 8008292:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
 8008296:	f013 0f01 	tst.w	r3, #1
 800829a:	d009      	beq.n	80082b0 <netif_set_down+0x24>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800829c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80082a0:	f880 30db 	strb.w	r3, [r0, #219]	; 0xdb
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80082a4:	f013 0f08 	tst.w	r3, #8
 80082a8:	d10b      	bne.n	80082c2 <netif_set_down+0x36>
    nd6_cleanup_netif(netif);
 80082aa:	4620      	mov	r0, r4
 80082ac:	f00c fc0e 	bl	8014acc <nd6_cleanup_netif>
}
 80082b0:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80082b2:	4b05      	ldr	r3, [pc, #20]	; (80082c8 <netif_set_down+0x3c>)
 80082b4:	f240 329b 	movw	r2, #923	; 0x39b
 80082b8:	4904      	ldr	r1, [pc, #16]	; (80082cc <netif_set_down+0x40>)
 80082ba:	4805      	ldr	r0, [pc, #20]	; (80082d0 <netif_set_down+0x44>)
 80082bc:	f00c fdc2 	bl	8014e44 <iprintf>
 80082c0:	e7f6      	b.n	80082b0 <netif_set_down+0x24>
      etharp_cleanup_netif(netif);
 80082c2:	f007 fabf 	bl	800f844 <etharp_cleanup_netif>
 80082c6:	e7f0      	b.n	80082aa <netif_set_down+0x1e>
 80082c8:	080169c4 	.word	0x080169c4
 80082cc:	08016a1c 	.word	0x08016a1c
 80082d0:	08015d2c 	.word	0x08015d2c

080082d4 <netif_set_link_callback>:
  if (netif) {
 80082d4:	b108      	cbz	r0, 80082da <netif_set_link_callback+0x6>
    netif->link_callback = link_callback;
 80082d6:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
}
 80082da:	4770      	bx	lr

080082dc <netif_ip6_addr_set_state>:
{
 80082dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082e0:	460c      	mov	r4, r1
 80082e2:	4617      	mov	r7, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80082e4:	4606      	mov	r6, r0
 80082e6:	b1e0      	cbz	r0, 8008322 <netif_ip6_addr_set_state+0x46>
  LWIP_ASSERT("invalid index", addr_idx < LWIP_IPV6_NUM_ADDRESSES);
 80082e8:	2c02      	cmp	r4, #2
 80082ea:	dc22      	bgt.n	8008332 <netif_ip6_addr_set_state+0x56>
  old_state = netif_ip6_addr_state(netif, addr_idx);
 80082ec:	1933      	adds	r3, r6, r4
 80082ee:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
  if (old_state != state) {
 80082f2:	42bb      	cmp	r3, r7
 80082f4:	d013      	beq.n	800831e <netif_ip6_addr_set_state+0x42>
    u8_t old_valid = old_state & IP6_ADDR_VALID;
 80082f6:	f003 0510 	and.w	r5, r3, #16
    u8_t new_valid = state & IP6_ADDR_VALID;
 80082fa:	f007 0810 	and.w	r8, r7, #16
    if (netif->flags & NETIF_FLAG_MLD6) {
 80082fe:	f896 30db 	ldrb.w	r3, [r6, #219]	; 0xdb
 8008302:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008306:	d11c      	bne.n	8008342 <netif_ip6_addr_set_state+0x66>
    if (old_valid && !new_valid) {
 8008308:	b115      	cbz	r5, 8008310 <netif_ip6_addr_set_state+0x34>
 800830a:	f1b8 0f00 	cmp.w	r8, #0
 800830e:	d01e      	beq.n	800834e <netif_ip6_addr_set_state+0x72>
    netif->ip6_addr_state[addr_idx] = state;
 8008310:	4434      	add	r4, r6
 8008312:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
    if (!old_valid && new_valid) {
 8008316:	b915      	cbnz	r5, 800831e <netif_ip6_addr_set_state+0x42>
 8008318:	f1b8 0f00 	cmp.w	r8, #0
 800831c:	d121      	bne.n	8008362 <netif_ip6_addr_set_state+0x86>
}
 800831e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008322:	4b12      	ldr	r3, [pc, #72]	; (800836c <netif_ip6_addr_set_state+0x90>)
 8008324:	f240 5275 	movw	r2, #1397	; 0x575
 8008328:	4911      	ldr	r1, [pc, #68]	; (8008370 <netif_ip6_addr_set_state+0x94>)
 800832a:	4812      	ldr	r0, [pc, #72]	; (8008374 <netif_ip6_addr_set_state+0x98>)
 800832c:	f00c fd8a 	bl	8014e44 <iprintf>
 8008330:	e7da      	b.n	80082e8 <netif_ip6_addr_set_state+0xc>
  LWIP_ASSERT("invalid index", addr_idx < LWIP_IPV6_NUM_ADDRESSES);
 8008332:	4b0e      	ldr	r3, [pc, #56]	; (800836c <netif_ip6_addr_set_state+0x90>)
 8008334:	f240 5276 	movw	r2, #1398	; 0x576
 8008338:	490f      	ldr	r1, [pc, #60]	; (8008378 <netif_ip6_addr_set_state+0x9c>)
 800833a:	480e      	ldr	r0, [pc, #56]	; (8008374 <netif_ip6_addr_set_state+0x98>)
 800833c:	f00c fd82 	bl	8014e44 <iprintf>
 8008340:	e7d4      	b.n	80082ec <netif_ip6_addr_set_state+0x10>
      nd6_adjust_mld_membership(netif, addr_idx, state);
 8008342:	463a      	mov	r2, r7
 8008344:	4621      	mov	r1, r4
 8008346:	4630      	mov	r0, r6
 8008348:	f00c fc10 	bl	8014b6c <nd6_adjust_mld_membership>
 800834c:	e7dc      	b.n	8008308 <netif_ip6_addr_set_state+0x2c>
      netif_do_ip_addr_changed(netif_ip_addr6(netif, addr_idx), NULL);
 800834e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8008352:	00d8      	lsls	r0, r3, #3
 8008354:	3048      	adds	r0, #72	; 0x48
 8008356:	4430      	add	r0, r6
 8008358:	2100      	movs	r1, #0
 800835a:	3004      	adds	r0, #4
 800835c:	f7ff fdaa 	bl	8007eb4 <netif_do_ip_addr_changed>
 8008360:	e7d6      	b.n	8008310 <netif_ip6_addr_set_state+0x34>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV6);
 8008362:	2102      	movs	r1, #2
 8008364:	4630      	mov	r0, r6
 8008366:	f7ff fdaf 	bl	8007ec8 <netif_issue_reports>
}
 800836a:	e7d8      	b.n	800831e <netif_ip6_addr_set_state+0x42>
 800836c:	080169c4 	.word	0x080169c4
 8008370:	08015d1c 	.word	0x08015d1c
 8008374:	08015d2c 	.word	0x08015d2c
 8008378:	080169b4 	.word	0x080169b4

0800837c <netif_get_ip6_addr_match>:
{
 800837c:	b538      	push	{r3, r4, r5, lr}
 800837e:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_get_ip6_addr_match: invalid netif", netif != NULL);
 8008380:	4604      	mov	r4, r0
 8008382:	b158      	cbz	r0, 800839c <netif_get_ip6_addr_match+0x20>
  LWIP_ASSERT("netif_get_ip6_addr_match: invalid ip6addr", ip6addr != NULL);
 8008384:	b195      	cbz	r5, 80083ac <netif_get_ip6_addr_match+0x30>
  if (ip6_addr_has_zone(ip6addr) && !ip6_addr_test_zone(ip6addr, netif)) {
 8008386:	7c2a      	ldrb	r2, [r5, #16]
 8008388:	2a00      	cmp	r2, #0
 800838a:	d041      	beq.n	8008410 <netif_get_ip6_addr_match+0x94>
 800838c:	f894 30de 	ldrb.w	r3, [r4, #222]	; 0xde
 8008390:	3301      	adds	r3, #1
 8008392:	b2db      	uxtb	r3, r3
 8008394:	429a      	cmp	r2, r3
 8008396:	d140      	bne.n	800841a <netif_get_ip6_addr_match+0x9e>
 8008398:	2000      	movs	r0, #0
 800839a:	e011      	b.n	80083c0 <netif_get_ip6_addr_match+0x44>
  LWIP_ASSERT("netif_get_ip6_addr_match: invalid netif", netif != NULL);
 800839c:	4b20      	ldr	r3, [pc, #128]	; (8008420 <netif_get_ip6_addr_match+0xa4>)
 800839e:	f240 52be 	movw	r2, #1470	; 0x5be
 80083a2:	4920      	ldr	r1, [pc, #128]	; (8008424 <netif_get_ip6_addr_match+0xa8>)
 80083a4:	4820      	ldr	r0, [pc, #128]	; (8008428 <netif_get_ip6_addr_match+0xac>)
 80083a6:	f00c fd4d 	bl	8014e44 <iprintf>
 80083aa:	e7eb      	b.n	8008384 <netif_get_ip6_addr_match+0x8>
  LWIP_ASSERT("netif_get_ip6_addr_match: invalid ip6addr", ip6addr != NULL);
 80083ac:	4b1c      	ldr	r3, [pc, #112]	; (8008420 <netif_get_ip6_addr_match+0xa4>)
 80083ae:	f240 52bf 	movw	r2, #1471	; 0x5bf
 80083b2:	491e      	ldr	r1, [pc, #120]	; (800842c <netif_get_ip6_addr_match+0xb0>)
 80083b4:	481c      	ldr	r0, [pc, #112]	; (8008428 <netif_get_ip6_addr_match+0xac>)
 80083b6:	f00c fd45 	bl	8014e44 <iprintf>
 80083ba:	e7e4      	b.n	8008386 <netif_get_ip6_addr_match+0xa>
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80083bc:	3001      	adds	r0, #1
 80083be:	b240      	sxtb	r0, r0
 80083c0:	2802      	cmp	r0, #2
 80083c2:	dc27      	bgt.n	8008414 <netif_get_ip6_addr_match+0x98>
    if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i)) &&
 80083c4:	1823      	adds	r3, r4, r0
 80083c6:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d0f6      	beq.n	80083bc <netif_get_ip6_addr_match+0x40>
        ip6_addr_cmp_zoneless(netif_ip6_addr(netif, i), ip6addr)) {
 80083ce:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80083d2:	00cb      	lsls	r3, r1, #3
 80083d4:	4423      	add	r3, r4
 80083d6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80083d8:	682b      	ldr	r3, [r5, #0]
    if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i)) &&
 80083da:	4299      	cmp	r1, r3
 80083dc:	d1ee      	bne.n	80083bc <netif_get_ip6_addr_match+0x40>
        ip6_addr_cmp_zoneless(netif_ip6_addr(netif, i), ip6addr)) {
 80083de:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80083e2:	00cb      	lsls	r3, r1, #3
 80083e4:	4423      	add	r3, r4
 80083e6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80083e8:	686b      	ldr	r3, [r5, #4]
 80083ea:	4299      	cmp	r1, r3
 80083ec:	d1e6      	bne.n	80083bc <netif_get_ip6_addr_match+0x40>
 80083ee:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80083f2:	00cb      	lsls	r3, r1, #3
 80083f4:	4423      	add	r3, r4
 80083f6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083f8:	68ab      	ldr	r3, [r5, #8]
 80083fa:	4299      	cmp	r1, r3
 80083fc:	d1de      	bne.n	80083bc <netif_get_ip6_addr_match+0x40>
 80083fe:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8008402:	00d3      	lsls	r3, r2, #3
 8008404:	4423      	add	r3, r4
 8008406:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008408:	68eb      	ldr	r3, [r5, #12]
 800840a:	429a      	cmp	r2, r3
 800840c:	d1d6      	bne.n	80083bc <netif_get_ip6_addr_match+0x40>
 800840e:	e003      	b.n	8008418 <netif_get_ip6_addr_match+0x9c>
 8008410:	2000      	movs	r0, #0
 8008412:	e7d5      	b.n	80083c0 <netif_get_ip6_addr_match+0x44>
  return -1;
 8008414:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008418:	bd38      	pop	{r3, r4, r5, pc}
    return -1; /* wrong zone, no match */
 800841a:	f04f 30ff 	mov.w	r0, #4294967295
 800841e:	e7fb      	b.n	8008418 <netif_get_ip6_addr_match+0x9c>
 8008420:	080169c4 	.word	0x080169c4
 8008424:	08016960 	.word	0x08016960
 8008428:	08015d2c 	.word	0x08015d2c
 800842c:	08016988 	.word	0x08016988

08008430 <netif_create_ip6_linklocal_address>:
{
 8008430:	b570      	push	{r4, r5, r6, lr}
 8008432:	460c      	mov	r4, r1
  LWIP_ASSERT("netif_create_ip6_linklocal_address: invalid netif", netif != NULL);
 8008434:	4605      	mov	r5, r0
 8008436:	b150      	cbz	r0, 800844e <netif_create_ip6_linklocal_address+0x1e>
  ip_2_ip6(&netif->ip6_addr[0])->addr[0] = PP_HTONL(0xfe800000ul);
 8008438:	f248 03fe 	movw	r3, #33022	; 0x80fe
 800843c:	64eb      	str	r3, [r5, #76]	; 0x4c
  ip_2_ip6(&netif->ip6_addr[0])->addr[1] = 0;
 800843e:	2300      	movs	r3, #0
 8008440:	652b      	str	r3, [r5, #80]	; 0x50
  if (from_mac_48bit) {
 8008442:	b964      	cbnz	r4, 800845e <netif_create_ip6_linklocal_address+0x2e>
    ip_2_ip6(&netif->ip6_addr[0])->addr[2] = 0;
 8008444:	2300      	movs	r3, #0
 8008446:	656b      	str	r3, [r5, #84]	; 0x54
    ip_2_ip6(&netif->ip6_addr[0])->addr[3] = 0;
 8008448:	65ab      	str	r3, [r5, #88]	; 0x58
    addr_index = 3;
 800844a:	2603      	movs	r6, #3
    for (i = 0; (i < 8) && (i < netif->hwaddr_len); i++) {
 800844c:	e04e      	b.n	80084ec <netif_create_ip6_linklocal_address+0xbc>
  LWIP_ASSERT("netif_create_ip6_linklocal_address: invalid netif", netif != NULL);
 800844e:	4b2f      	ldr	r3, [pc, #188]	; (800850c <netif_create_ip6_linklocal_address+0xdc>)
 8008450:	f240 52df 	movw	r2, #1503	; 0x5df
 8008454:	492e      	ldr	r1, [pc, #184]	; (8008510 <netif_create_ip6_linklocal_address+0xe0>)
 8008456:	482f      	ldr	r0, [pc, #188]	; (8008514 <netif_create_ip6_linklocal_address+0xe4>)
 8008458:	f00c fcf4 	bl	8014e44 <iprintf>
 800845c:	e7ec      	b.n	8008438 <netif_create_ip6_linklocal_address+0x8>
    ip_2_ip6(&netif->ip6_addr[0])->addr[2] = lwip_htonl((((u32_t)(netif->hwaddr[0] ^ 0x02)) << 24) |
 800845e:	f895 00d4 	ldrb.w	r0, [r5, #212]	; 0xd4
 8008462:	f080 0302 	eor.w	r3, r0, #2
        ((u32_t)(netif->hwaddr[1]) << 16) |
 8008466:	f895 00d5 	ldrb.w	r0, [r5, #213]	; 0xd5
 800846a:	0400      	lsls	r0, r0, #16
    ip_2_ip6(&netif->ip6_addr[0])->addr[2] = lwip_htonl((((u32_t)(netif->hwaddr[0] ^ 0x02)) << 24) |
 800846c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
        ((u32_t)(netif->hwaddr[2]) << 8) |
 8008470:	f895 30d6 	ldrb.w	r3, [r5, #214]	; 0xd6
        ((u32_t)(netif->hwaddr[1]) << 16) |
 8008474:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    ip_2_ip6(&netif->ip6_addr[0])->addr[2] = lwip_htonl((((u32_t)(netif->hwaddr[0] ^ 0x02)) << 24) |
 8008478:	f040 00ff 	orr.w	r0, r0, #255	; 0xff
 800847c:	f7fe fead 	bl	80071da <lwip_htonl>
 8008480:	6568      	str	r0, [r5, #84]	; 0x54
        ((u32_t)(netif->hwaddr[3]) << 16) |
 8008482:	f895 30d7 	ldrb.w	r3, [r5, #215]	; 0xd7
        ((u32_t)(netif->hwaddr[4]) << 8) |
 8008486:	f895 00d8 	ldrb.w	r0, [r5, #216]	; 0xd8
 800848a:	0200      	lsls	r0, r0, #8
        ((u32_t)(netif->hwaddr[3]) << 16) |
 800848c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
        (netif->hwaddr[5]));
 8008490:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
        ((u32_t)(netif->hwaddr[4]) << 8) |
 8008494:	4318      	orrs	r0, r3
    ip_2_ip6(&netif->ip6_addr[0])->addr[3] = lwip_htonl((u32_t)(0xfeul << 24) |
 8008496:	f040 407e 	orr.w	r0, r0, #4261412864	; 0xfe000000
 800849a:	f7fe fe9e 	bl	80071da <lwip_htonl>
 800849e:	65a8      	str	r0, [r5, #88]	; 0x58
  ip6_addr_assign_zone(ip_2_ip6(&netif->ip6_addr[0]), IP6_UNICAST, netif);
 80084a0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80084a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80084a6:	041b      	lsls	r3, r3, #16
 80084a8:	0c1b      	lsrs	r3, r3, #16
 80084aa:	f248 02fe 	movw	r2, #33022	; 0x80fe
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d027      	beq.n	8008502 <netif_create_ip6_linklocal_address+0xd2>
 80084b2:	2300      	movs	r3, #0
 80084b4:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
  netif_ip6_addr_set_state(netif, 0, IP6_ADDR_TENTATIVE);
 80084b8:	2208      	movs	r2, #8
 80084ba:	2100      	movs	r1, #0
 80084bc:	4628      	mov	r0, r5
 80084be:	f7ff ff0d 	bl	80082dc <netif_ip6_addr_set_state>
}
 80084c2:	bd70      	pop	{r4, r5, r6, pc}
      ip_2_ip6(&netif->ip6_addr[0])->addr[addr_index] |= lwip_htonl(((u32_t)(netif->hwaddr[netif->hwaddr_len - i - 1])) << (8 * (i & 0x03)));
 80084c4:	1b1b      	subs	r3, r3, r4
 80084c6:	3b01      	subs	r3, #1
 80084c8:	442b      	add	r3, r5
 80084ca:	f893 00d4 	ldrb.w	r0, [r3, #212]	; 0xd4
 80084ce:	f004 0303 	and.w	r3, r4, #3
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	4098      	lsls	r0, r3
 80084d6:	f7fe fe80 	bl	80071da <lwip_htonl>
 80084da:	f106 0312 	add.w	r3, r6, #18
 80084de:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80084e2:	685a      	ldr	r2, [r3, #4]
 80084e4:	4310      	orrs	r0, r2
 80084e6:	6058      	str	r0, [r3, #4]
    for (i = 0; (i < 8) && (i < netif->hwaddr_len); i++) {
 80084e8:	3401      	adds	r4, #1
 80084ea:	b2e4      	uxtb	r4, r4
 80084ec:	2c07      	cmp	r4, #7
 80084ee:	d8d7      	bhi.n	80084a0 <netif_create_ip6_linklocal_address+0x70>
 80084f0:	f895 30da 	ldrb.w	r3, [r5, #218]	; 0xda
 80084f4:	42a3      	cmp	r3, r4
 80084f6:	d9d3      	bls.n	80084a0 <netif_create_ip6_linklocal_address+0x70>
      if (i == 4) {
 80084f8:	2c04      	cmp	r4, #4
 80084fa:	d1e3      	bne.n	80084c4 <netif_create_ip6_linklocal_address+0x94>
        addr_index--;
 80084fc:	3e01      	subs	r6, #1
 80084fe:	b2f6      	uxtb	r6, r6
 8008500:	e7e0      	b.n	80084c4 <netif_create_ip6_linklocal_address+0x94>
  ip6_addr_assign_zone(ip_2_ip6(&netif->ip6_addr[0]), IP6_UNICAST, netif);
 8008502:	f895 30de 	ldrb.w	r3, [r5, #222]	; 0xde
 8008506:	3301      	adds	r3, #1
 8008508:	b2db      	uxtb	r3, r3
 800850a:	e7d3      	b.n	80084b4 <netif_create_ip6_linklocal_address+0x84>
 800850c:	080169c4 	.word	0x080169c4
 8008510:	0801691c 	.word	0x0801691c
 8008514:	08015d2c 	.word	0x08015d2c

08008518 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008518:	4602      	mov	r2, r0
 800851a:	b158      	cbz	r0, 8008534 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 800851c:	4b06      	ldr	r3, [pc, #24]	; (8008538 <netif_get_by_index+0x20>)
 800851e:	6818      	ldr	r0, [r3, #0]
 8008520:	b138      	cbz	r0, 8008532 <netif_get_by_index+0x1a>
      if (idx == netif_get_index(netif)) {
 8008522:	f890 30de 	ldrb.w	r3, [r0, #222]	; 0xde
 8008526:	3301      	adds	r3, #1
 8008528:	b2db      	uxtb	r3, r3
 800852a:	4293      	cmp	r3, r2
 800852c:	d003      	beq.n	8008536 <netif_get_by_index+0x1e>
    NETIF_FOREACH(netif) {
 800852e:	6800      	ldr	r0, [r0, #0]
 8008530:	e7f6      	b.n	8008520 <netif_get_by_index+0x8>
 8008532:	4770      	bx	lr
        return netif; /* found! */
      }
    }
  }

  return NULL;
 8008534:	2000      	movs	r0, #0
}
 8008536:	4770      	bx	lr
 8008538:	20008600 	.word	0x20008600

0800853c <pbuf_pool_is_empty>:
/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800853c:	4b01      	ldr	r3, [pc, #4]	; (8008544 <pbuf_pool_is_empty+0x8>)
 800853e:	2201      	movs	r2, #1
 8008540:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008542:	4770      	bx	lr
 8008544:	20008608 	.word	0x20008608

08008548 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008548:	b410      	push	{r4}
  p->next = NULL;
 800854a:	2400      	movs	r4, #0
 800854c:	6004      	str	r4, [r0, #0]
  p->payload = payload;
 800854e:	6041      	str	r1, [r0, #4]
  p->tot_len = tot_len;
 8008550:	8102      	strh	r2, [r0, #8]
  p->len = len;
 8008552:	8143      	strh	r3, [r0, #10]
  p->type_internal = (u8_t)type;
 8008554:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8008558:	7303      	strb	r3, [r0, #12]
  p->flags = flags;
 800855a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800855e:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8008560:	2301      	movs	r3, #1
 8008562:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008564:	73c4      	strb	r4, [r0, #15]
}
 8008566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800856a:	4770      	bx	lr

0800856c <pbuf_skip_const>:
{
  u16_t offset_left = in_offset;
  const struct pbuf *q = in;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800856c:	e002      	b.n	8008574 <pbuf_skip_const+0x8>
    offset_left = (u16_t)(offset_left - q->len);
 800856e:	1ac9      	subs	r1, r1, r3
 8008570:	b289      	uxth	r1, r1
    q = q->next;
 8008572:	6800      	ldr	r0, [r0, #0]
  while ((q != NULL) && (q->len <= offset_left)) {
 8008574:	b110      	cbz	r0, 800857c <pbuf_skip_const+0x10>
 8008576:	8943      	ldrh	r3, [r0, #10]
 8008578:	428b      	cmp	r3, r1
 800857a:	d9f8      	bls.n	800856e <pbuf_skip_const+0x2>
  }
  if (out_offset != NULL) {
 800857c:	b102      	cbz	r2, 8008580 <pbuf_skip_const+0x14>
    *out_offset = offset_left;
 800857e:	8011      	strh	r1, [r2, #0]
  }
  return q;
}
 8008580:	4770      	bx	lr
	...

08008584 <pbuf_add_header_impl>:
{
 8008584:	b570      	push	{r4, r5, r6, lr}
 8008586:	460d      	mov	r5, r1
 8008588:	4616      	mov	r6, r2
  LWIP_ASSERT("p != NULL", p != NULL);
 800858a:	4604      	mov	r4, r0
 800858c:	b1c0      	cbz	r0, 80085c0 <pbuf_add_header_impl+0x3c>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800858e:	b33c      	cbz	r4, 80085e0 <pbuf_add_header_impl+0x5c>
 8008590:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008594:	d226      	bcs.n	80085e4 <pbuf_add_header_impl+0x60>
  if (header_size_increment == 0) {
 8008596:	b33d      	cbz	r5, 80085e8 <pbuf_add_header_impl+0x64>
  increment_magnitude = (u16_t)header_size_increment;
 8008598:	b2aa      	uxth	r2, r5
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800859a:	8923      	ldrh	r3, [r4, #8]
 800859c:	4413      	add	r3, r2
 800859e:	b29b      	uxth	r3, r3
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d323      	bcc.n	80085ec <pbuf_add_header_impl+0x68>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80085a4:	f994 100c 	ldrsb.w	r1, [r4, #12]
 80085a8:	2900      	cmp	r1, #0
 80085aa:	db11      	blt.n	80085d0 <pbuf_add_header_impl+0x4c>
    if (force) {
 80085ac:	b306      	cbz	r6, 80085f0 <pbuf_add_header_impl+0x6c>
      payload = (u8_t *)p->payload - header_size_increment;
 80085ae:	6861      	ldr	r1, [r4, #4]
 80085b0:	1b4d      	subs	r5, r1, r5
  p->payload = payload;
 80085b2:	6065      	str	r5, [r4, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80085b4:	8961      	ldrh	r1, [r4, #10]
 80085b6:	440a      	add	r2, r1
 80085b8:	8162      	strh	r2, [r4, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80085ba:	8123      	strh	r3, [r4, #8]
  return 0;
 80085bc:	2000      	movs	r0, #0
 80085be:	e012      	b.n	80085e6 <pbuf_add_header_impl+0x62>
  LWIP_ASSERT("p != NULL", p != NULL);
 80085c0:	4b0c      	ldr	r3, [pc, #48]	; (80085f4 <pbuf_add_header_impl+0x70>)
 80085c2:	f240 12df 	movw	r2, #479	; 0x1df
 80085c6:	490c      	ldr	r1, [pc, #48]	; (80085f8 <pbuf_add_header_impl+0x74>)
 80085c8:	480c      	ldr	r0, [pc, #48]	; (80085fc <pbuf_add_header_impl+0x78>)
 80085ca:	f00c fc3b 	bl	8014e44 <iprintf>
 80085ce:	e7de      	b.n	800858e <pbuf_add_header_impl+0xa>
    payload = (u8_t *)p->payload - header_size_increment;
 80085d0:	6861      	ldr	r1, [r4, #4]
 80085d2:	1b4d      	subs	r5, r1, r5
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80085d4:	f104 0110 	add.w	r1, r4, #16
 80085d8:	42a9      	cmp	r1, r5
 80085da:	d9ea      	bls.n	80085b2 <pbuf_add_header_impl+0x2e>
      return 1;
 80085dc:	2001      	movs	r0, #1
 80085de:	e002      	b.n	80085e6 <pbuf_add_header_impl+0x62>
    return 1;
 80085e0:	2001      	movs	r0, #1
 80085e2:	e000      	b.n	80085e6 <pbuf_add_header_impl+0x62>
 80085e4:	2001      	movs	r0, #1
}
 80085e6:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 80085e8:	2000      	movs	r0, #0
 80085ea:	e7fc      	b.n	80085e6 <pbuf_add_header_impl+0x62>
    return 1;
 80085ec:	2001      	movs	r0, #1
 80085ee:	e7fa      	b.n	80085e6 <pbuf_add_header_impl+0x62>
      return 1;
 80085f0:	2001      	movs	r0, #1
 80085f2:	e7f8      	b.n	80085e6 <pbuf_add_header_impl+0x62>
 80085f4:	08016a58 	.word	0x08016a58
 80085f8:	080181b4 	.word	0x080181b4
 80085fc:	08015d2c 	.word	0x08015d2c

08008600 <pbuf_free_ooseq>:
{
 8008600:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008602:	4b07      	ldr	r3, [pc, #28]	; (8008620 <pbuf_free_ooseq+0x20>)
 8008604:	2200      	movs	r2, #0
 8008606:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008608:	4b06      	ldr	r3, [pc, #24]	; (8008624 <pbuf_free_ooseq+0x24>)
 800860a:	6818      	ldr	r0, [r3, #0]
 800860c:	b130      	cbz	r0, 800861c <pbuf_free_ooseq+0x1c>
    if (pcb->ooseq != NULL) {
 800860e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8008612:	b90b      	cbnz	r3, 8008618 <pbuf_free_ooseq+0x18>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008614:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8008616:	e7f9      	b.n	800860c <pbuf_free_ooseq+0xc>
      tcp_free_ooseq(pcb);
 8008618:	f000 fe22 	bl	8009260 <tcp_free_ooseq>
}
 800861c:	bd08      	pop	{r3, pc}
 800861e:	bf00      	nop
 8008620:	20008608 	.word	0x20008608
 8008624:	20008610 	.word	0x20008610

08008628 <pbuf_alloc_reference>:
{
 8008628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800862a:	b083      	sub	sp, #12
 800862c:	4607      	mov	r7, r0
 800862e:	460e      	mov	r6, r1
 8008630:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008632:	2a41      	cmp	r2, #65	; 0x41
 8008634:	d001      	beq.n	800863a <pbuf_alloc_reference+0x12>
 8008636:	2a01      	cmp	r2, #1
 8008638:	d10f      	bne.n	800865a <pbuf_alloc_reference+0x32>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800863a:	200a      	movs	r0, #10
 800863c:	f7ff fbe2 	bl	8007e04 <memp_malloc>
  if (p == NULL) {
 8008640:	4605      	mov	r5, r0
 8008642:	b138      	cbz	r0, 8008654 <pbuf_alloc_reference+0x2c>
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008644:	2300      	movs	r3, #0
 8008646:	9301      	str	r3, [sp, #4]
 8008648:	9400      	str	r4, [sp, #0]
 800864a:	4633      	mov	r3, r6
 800864c:	4632      	mov	r2, r6
 800864e:	4639      	mov	r1, r7
 8008650:	f7ff ff7a 	bl	8008548 <pbuf_init_alloced_pbuf>
}
 8008654:	4628      	mov	r0, r5
 8008656:	b003      	add	sp, #12
 8008658:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800865a:	4b04      	ldr	r3, [pc, #16]	; (800866c <pbuf_alloc_reference+0x44>)
 800865c:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008660:	4903      	ldr	r1, [pc, #12]	; (8008670 <pbuf_alloc_reference+0x48>)
 8008662:	4804      	ldr	r0, [pc, #16]	; (8008674 <pbuf_alloc_reference+0x4c>)
 8008664:	f00c fbee 	bl	8014e44 <iprintf>
 8008668:	e7e7      	b.n	800863a <pbuf_alloc_reference+0x12>
 800866a:	bf00      	nop
 800866c:	08016a58 	.word	0x08016a58
 8008670:	08016b34 	.word	0x08016b34
 8008674:	08015d2c 	.word	0x08015d2c

08008678 <pbuf_alloced_custom>:
{
 8008678:	b570      	push	{r4, r5, r6, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	9c06      	ldr	r4, [sp, #24]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800867e:	3003      	adds	r0, #3
 8008680:	f020 0003 	bic.w	r0, r0, #3
 8008684:	180e      	adds	r6, r1, r0
 8008686:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 800868a:	42ae      	cmp	r6, r5
 800868c:	d80f      	bhi.n	80086ae <pbuf_alloced_custom+0x36>
  if (payload_mem != NULL) {
 800868e:	b104      	cbz	r4, 8008692 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008690:	4404      	add	r4, r0
 8008692:	4618      	mov	r0, r3
 8008694:	4613      	mov	r3, r2
 8008696:	460a      	mov	r2, r1
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008698:	4605      	mov	r5, r0
 800869a:	2102      	movs	r1, #2
 800869c:	9101      	str	r1, [sp, #4]
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	4613      	mov	r3, r2
 80086a2:	4621      	mov	r1, r4
 80086a4:	f7ff ff50 	bl	8008548 <pbuf_init_alloced_pbuf>
}
 80086a8:	4628      	mov	r0, r5
 80086aa:	b002      	add	sp, #8
 80086ac:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 80086ae:	2500      	movs	r5, #0
 80086b0:	e7fa      	b.n	80086a8 <pbuf_alloced_custom+0x30>

080086b2 <pbuf_add_header>:
{
 80086b2:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80086b4:	2200      	movs	r2, #0
 80086b6:	f7ff ff65 	bl	8008584 <pbuf_add_header_impl>
}
 80086ba:	bd08      	pop	{r3, pc}

080086bc <pbuf_add_header_force>:
{
 80086bc:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 1);
 80086be:	2201      	movs	r2, #1
 80086c0:	f7ff ff60 	bl	8008584 <pbuf_add_header_impl>
}
 80086c4:	bd08      	pop	{r3, pc}
	...

080086c8 <pbuf_remove_header>:
{
 80086c8:	b538      	push	{r3, r4, r5, lr}
 80086ca:	460d      	mov	r5, r1
  LWIP_ASSERT("p != NULL", p != NULL);
 80086cc:	4604      	mov	r4, r0
 80086ce:	b190      	cbz	r0, 80086f6 <pbuf_remove_header+0x2e>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80086d0:	b314      	cbz	r4, 8008718 <pbuf_remove_header+0x50>
 80086d2:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80086d6:	d221      	bcs.n	800871c <pbuf_remove_header+0x54>
  if (header_size_decrement == 0) {
 80086d8:	b315      	cbz	r5, 8008720 <pbuf_remove_header+0x58>
  increment_magnitude = (u16_t)header_size_decrement;
 80086da:	b2aa      	uxth	r2, r5
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80086dc:	8963      	ldrh	r3, [r4, #10]
 80086de:	4293      	cmp	r3, r2
 80086e0:	d311      	bcc.n	8008706 <pbuf_remove_header+0x3e>
  payload = p->payload;
 80086e2:	6861      	ldr	r1, [r4, #4]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80086e4:	440d      	add	r5, r1
 80086e6:	6065      	str	r5, [r4, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 80086e8:	1a9b      	subs	r3, r3, r2
 80086ea:	8163      	strh	r3, [r4, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80086ec:	8923      	ldrh	r3, [r4, #8]
 80086ee:	1a9a      	subs	r2, r3, r2
 80086f0:	8122      	strh	r2, [r4, #8]
  return 0;
 80086f2:	2000      	movs	r0, #0
 80086f4:	e013      	b.n	800871e <pbuf_remove_header+0x56>
  LWIP_ASSERT("p != NULL", p != NULL);
 80086f6:	4b0b      	ldr	r3, [pc, #44]	; (8008724 <pbuf_remove_header+0x5c>)
 80086f8:	f240 224b 	movw	r2, #587	; 0x24b
 80086fc:	490a      	ldr	r1, [pc, #40]	; (8008728 <pbuf_remove_header+0x60>)
 80086fe:	480b      	ldr	r0, [pc, #44]	; (800872c <pbuf_remove_header+0x64>)
 8008700:	f00c fba0 	bl	8014e44 <iprintf>
 8008704:	e7e4      	b.n	80086d0 <pbuf_remove_header+0x8>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008706:	4b07      	ldr	r3, [pc, #28]	; (8008724 <pbuf_remove_header+0x5c>)
 8008708:	f240 2255 	movw	r2, #597	; 0x255
 800870c:	4908      	ldr	r1, [pc, #32]	; (8008730 <pbuf_remove_header+0x68>)
 800870e:	4807      	ldr	r0, [pc, #28]	; (800872c <pbuf_remove_header+0x64>)
 8008710:	f00c fb98 	bl	8014e44 <iprintf>
 8008714:	2001      	movs	r0, #1
 8008716:	e002      	b.n	800871e <pbuf_remove_header+0x56>
    return 1;
 8008718:	2001      	movs	r0, #1
 800871a:	e000      	b.n	800871e <pbuf_remove_header+0x56>
 800871c:	2001      	movs	r0, #1
}
 800871e:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
 8008720:	2000      	movs	r0, #0
 8008722:	e7fc      	b.n	800871e <pbuf_remove_header+0x56>
 8008724:	08016a58 	.word	0x08016a58
 8008728:	080181b4 	.word	0x080181b4
 800872c:	08015d2c 	.word	0x08015d2c
 8008730:	08016d68 	.word	0x08016d68

08008734 <pbuf_header_impl>:
{
 8008734:	b508      	push	{r3, lr}
  if (header_size_increment < 0) {
 8008736:	2900      	cmp	r1, #0
 8008738:	db02      	blt.n	8008740 <pbuf_header_impl+0xc>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800873a:	f7ff ff23 	bl	8008584 <pbuf_add_header_impl>
}
 800873e:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008740:	4249      	negs	r1, r1
 8008742:	f7ff ffc1 	bl	80086c8 <pbuf_remove_header>
 8008746:	e7fa      	b.n	800873e <pbuf_header_impl+0xa>

08008748 <pbuf_header_force>:
{
 8008748:	b508      	push	{r3, lr}
  return pbuf_header_impl(p, header_size_increment, 1);
 800874a:	2201      	movs	r2, #1
 800874c:	f7ff fff2 	bl	8008734 <pbuf_header_impl>
}
 8008750:	bd08      	pop	{r3, pc}
	...

08008754 <pbuf_free>:
{
 8008754:	b570      	push	{r4, r5, r6, lr}
  if (p == NULL) {
 8008756:	b110      	cbz	r0, 800875e <pbuf_free+0xa>
 8008758:	4604      	mov	r4, r0
  count = 0;
 800875a:	2500      	movs	r5, #0
 800875c:	e017      	b.n	800878e <pbuf_free+0x3a>
    LWIP_ASSERT("p != NULL", p != NULL);
 800875e:	4b28      	ldr	r3, [pc, #160]	; (8008800 <pbuf_free+0xac>)
 8008760:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008764:	4927      	ldr	r1, [pc, #156]	; (8008804 <pbuf_free+0xb0>)
 8008766:	4828      	ldr	r0, [pc, #160]	; (8008808 <pbuf_free+0xb4>)
 8008768:	f00c fb6c 	bl	8014e44 <iprintf>
    return 0;
 800876c:	2500      	movs	r5, #0
}
 800876e:	4628      	mov	r0, r5
 8008770:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008772:	4b23      	ldr	r3, [pc, #140]	; (8008800 <pbuf_free+0xac>)
 8008774:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008778:	4924      	ldr	r1, [pc, #144]	; (800880c <pbuf_free+0xb8>)
 800877a:	4823      	ldr	r0, [pc, #140]	; (8008808 <pbuf_free+0xb4>)
 800877c:	f00c fb62 	bl	8014e44 <iprintf>
 8008780:	e00a      	b.n	8008798 <pbuf_free+0x44>
        pc->custom_free_function(p);
 8008782:	6923      	ldr	r3, [r4, #16]
 8008784:	4620      	mov	r0, r4
 8008786:	4798      	blx	r3
      count++;
 8008788:	3501      	adds	r5, #1
 800878a:	b2ed      	uxtb	r5, r5
      p = q;
 800878c:	4634      	mov	r4, r6
  while (p != NULL) {
 800878e:	2c00      	cmp	r4, #0
 8008790:	d0ed      	beq.n	800876e <pbuf_free+0x1a>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008792:	7ba3      	ldrb	r3, [r4, #14]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d0ec      	beq.n	8008772 <pbuf_free+0x1e>
    ref = --(p->ref);
 8008798:	7ba3      	ldrb	r3, [r4, #14]
 800879a:	3b01      	subs	r3, #1
 800879c:	b2db      	uxtb	r3, r3
 800879e:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1e4      	bne.n	800876e <pbuf_free+0x1a>
      q = p->next;
 80087a4:	6826      	ldr	r6, [r4, #0]
      alloc_src = pbuf_get_allocsrc(p);
 80087a6:	7b23      	ldrb	r3, [r4, #12]
 80087a8:	f003 030f 	and.w	r3, r3, #15
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80087ac:	7b62      	ldrb	r2, [r4, #13]
 80087ae:	f012 0f02 	tst.w	r2, #2
 80087b2:	d00a      	beq.n	80087ca <pbuf_free+0x76>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80087b4:	6923      	ldr	r3, [r4, #16]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1e3      	bne.n	8008782 <pbuf_free+0x2e>
 80087ba:	4b11      	ldr	r3, [pc, #68]	; (8008800 <pbuf_free+0xac>)
 80087bc:	f240 22ff 	movw	r2, #767	; 0x2ff
 80087c0:	4913      	ldr	r1, [pc, #76]	; (8008810 <pbuf_free+0xbc>)
 80087c2:	4811      	ldr	r0, [pc, #68]	; (8008808 <pbuf_free+0xb4>)
 80087c4:	f00c fb3e 	bl	8014e44 <iprintf>
 80087c8:	e7db      	b.n	8008782 <pbuf_free+0x2e>
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d006      	beq.n	80087dc <pbuf_free+0x88>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d009      	beq.n	80087e6 <pbuf_free+0x92>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80087d2:	b96b      	cbnz	r3, 80087f0 <pbuf_free+0x9c>
          mem_free(p);
 80087d4:	4620      	mov	r0, r4
 80087d6:	f7ff f8ef 	bl	80079b8 <mem_free>
 80087da:	e7d5      	b.n	8008788 <pbuf_free+0x34>
          memp_free(MEMP_PBUF_POOL, p);
 80087dc:	4621      	mov	r1, r4
 80087de:	200b      	movs	r0, #11
 80087e0:	f7ff fb2a 	bl	8007e38 <memp_free>
 80087e4:	e7d0      	b.n	8008788 <pbuf_free+0x34>
          memp_free(MEMP_PBUF, p);
 80087e6:	4621      	mov	r1, r4
 80087e8:	200a      	movs	r0, #10
 80087ea:	f7ff fb25 	bl	8007e38 <memp_free>
 80087ee:	e7cb      	b.n	8008788 <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 80087f0:	4b03      	ldr	r3, [pc, #12]	; (8008800 <pbuf_free+0xac>)
 80087f2:	f240 320f 	movw	r2, #783	; 0x30f
 80087f6:	4907      	ldr	r1, [pc, #28]	; (8008814 <pbuf_free+0xc0>)
 80087f8:	4803      	ldr	r0, [pc, #12]	; (8008808 <pbuf_free+0xb4>)
 80087fa:	f00c fb23 	bl	8014e44 <iprintf>
 80087fe:	e7c3      	b.n	8008788 <pbuf_free+0x34>
 8008800:	08016a58 	.word	0x08016a58
 8008804:	080181b4 	.word	0x080181b4
 8008808:	08015d2c 	.word	0x08015d2c
 800880c:	08016cb8 	.word	0x08016cb8
 8008810:	08016cd0 	.word	0x08016cd0
 8008814:	08016cf4 	.word	0x08016cf4

08008818 <pbuf_alloc>:
{
 8008818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800881c:	b082      	sub	sp, #8
 800881e:	460e      	mov	r6, r1
 8008820:	4690      	mov	r8, r2
  switch (type) {
 8008822:	2a41      	cmp	r2, #65	; 0x41
 8008824:	d046      	beq.n	80088b4 <pbuf_alloc+0x9c>
 8008826:	4604      	mov	r4, r0
 8008828:	b285      	uxth	r5, r0
 800882a:	d937      	bls.n	800889c <pbuf_alloc+0x84>
 800882c:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 8008830:	d04a      	beq.n	80088c8 <pbuf_alloc+0xb0>
 8008832:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8008836:	d133      	bne.n	80088a0 <pbuf_alloc+0x88>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008838:	3503      	adds	r5, #3
 800883a:	f025 0503 	bic.w	r5, r5, #3
 800883e:	b2ad      	uxth	r5, r5
 8008840:	1cca      	adds	r2, r1, #3
 8008842:	b293      	uxth	r3, r2
 8008844:	f023 0303 	bic.w	r3, r3, #3
 8008848:	441d      	add	r5, r3
 800884a:	b2ad      	uxth	r5, r5
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800884c:	f105 0010 	add.w	r0, r5, #16
 8008850:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008852:	f022 0203 	bic.w	r2, r2, #3
 8008856:	4295      	cmp	r5, r2
 8008858:	d37b      	bcc.n	8008952 <pbuf_alloc+0x13a>
 800885a:	4282      	cmp	r2, r0
 800885c:	d87c      	bhi.n	8008958 <pbuf_alloc+0x140>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800885e:	f7ff f9c3 	bl	8007be8 <mem_malloc>
      if (p == NULL) {
 8008862:	4681      	mov	r9, r0
 8008864:	b360      	cbz	r0, 80088c0 <pbuf_alloc+0xa8>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008866:	f104 0110 	add.w	r1, r4, #16
 800886a:	4401      	add	r1, r0
 800886c:	3103      	adds	r1, #3
 800886e:	2300      	movs	r3, #0
 8008870:	9301      	str	r3, [sp, #4]
 8008872:	f8cd 8000 	str.w	r8, [sp]
 8008876:	4633      	mov	r3, r6
 8008878:	4632      	mov	r2, r6
 800887a:	f021 0103 	bic.w	r1, r1, #3
 800887e:	f7ff fe63 	bl	8008548 <pbuf_init_alloced_pbuf>
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008882:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008886:	f013 0f03 	tst.w	r3, #3
 800888a:	d019      	beq.n	80088c0 <pbuf_alloc+0xa8>
 800888c:	4b34      	ldr	r3, [pc, #208]	; (8008960 <pbuf_alloc+0x148>)
 800888e:	f240 1223 	movw	r2, #291	; 0x123
 8008892:	4934      	ldr	r1, [pc, #208]	; (8008964 <pbuf_alloc+0x14c>)
 8008894:	4834      	ldr	r0, [pc, #208]	; (8008968 <pbuf_alloc+0x150>)
 8008896:	f00c fad5 	bl	8014e44 <iprintf>
 800889a:	e011      	b.n	80088c0 <pbuf_alloc+0xa8>
  switch (type) {
 800889c:	2a01      	cmp	r2, #1
 800889e:	d009      	beq.n	80088b4 <pbuf_alloc+0x9c>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80088a0:	4b2f      	ldr	r3, [pc, #188]	; (8008960 <pbuf_alloc+0x148>)
 80088a2:	f240 1227 	movw	r2, #295	; 0x127
 80088a6:	4931      	ldr	r1, [pc, #196]	; (800896c <pbuf_alloc+0x154>)
 80088a8:	482f      	ldr	r0, [pc, #188]	; (8008968 <pbuf_alloc+0x150>)
 80088aa:	f00c facb 	bl	8014e44 <iprintf>
      return NULL;
 80088ae:	f04f 0900 	mov.w	r9, #0
 80088b2:	e005      	b.n	80088c0 <pbuf_alloc+0xa8>
      p = pbuf_alloc_reference(NULL, length, type);
 80088b4:	4642      	mov	r2, r8
 80088b6:	4631      	mov	r1, r6
 80088b8:	2000      	movs	r0, #0
 80088ba:	f7ff feb5 	bl	8008628 <pbuf_alloc_reference>
 80088be:	4681      	mov	r9, r0
}
 80088c0:	4648      	mov	r0, r9
 80088c2:	b002      	add	sp, #8
 80088c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      last = NULL;
 80088c8:	f04f 0a00 	mov.w	sl, #0
      p = NULL;
 80088cc:	46d1      	mov	r9, sl
 80088ce:	e014      	b.n	80088fa <pbuf_alloc+0xe2>
          PBUF_POOL_IS_EMPTY();
 80088d0:	f7ff fe34 	bl	800853c <pbuf_pool_is_empty>
          if (p) {
 80088d4:	f1b9 0f00 	cmp.w	r9, #0
 80088d8:	d0f2      	beq.n	80088c0 <pbuf_alloc+0xa8>
            pbuf_free(p);
 80088da:	4648      	mov	r0, r9
 80088dc:	f7ff ff3a 	bl	8008754 <pbuf_free>
          return NULL;
 80088e0:	46b9      	mov	r9, r7
 80088e2:	e7ed      	b.n	80088c0 <pbuf_alloc+0xa8>
        if (p == NULL) {
 80088e4:	f1b9 0f00 	cmp.w	r9, #0
 80088e8:	d031      	beq.n	800894e <pbuf_alloc+0x136>
          last->next = q;
 80088ea:	f8ca 7000 	str.w	r7, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 80088ee:	1b36      	subs	r6, r6, r4
 80088f0:	b2b6      	uxth	r6, r6
        offset = 0;
 80088f2:	2500      	movs	r5, #0
        last = q;
 80088f4:	46ba      	mov	sl, r7
      } while (rem_len > 0);
 80088f6:	2e00      	cmp	r6, #0
 80088f8:	d0e2      	beq.n	80088c0 <pbuf_alloc+0xa8>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80088fa:	200b      	movs	r0, #11
 80088fc:	f7ff fa82 	bl	8007e04 <memp_malloc>
        if (q == NULL) {
 8008900:	4607      	mov	r7, r0
 8008902:	2800      	cmp	r0, #0
 8008904:	d0e4      	beq.n	80088d0 <pbuf_alloc+0xb8>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008906:	1cec      	adds	r4, r5, #3
 8008908:	f024 0403 	bic.w	r4, r4, #3
 800890c:	b2a4      	uxth	r4, r4
 800890e:	f5c4 7414 	rsb	r4, r4, #592	; 0x250
 8008912:	b2a4      	uxth	r4, r4
 8008914:	42b4      	cmp	r4, r6
 8008916:	bf28      	it	cs
 8008918:	4634      	movcs	r4, r6
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800891a:	f105 0110 	add.w	r1, r5, #16
 800891e:	4401      	add	r1, r0
 8008920:	3103      	adds	r1, #3
 8008922:	2300      	movs	r3, #0
 8008924:	9301      	str	r3, [sp, #4]
 8008926:	f8cd 8000 	str.w	r8, [sp]
 800892a:	4623      	mov	r3, r4
 800892c:	4632      	mov	r2, r6
 800892e:	f021 0103 	bic.w	r1, r1, #3
 8008932:	f7ff fe09 	bl	8008548 <pbuf_init_alloced_pbuf>
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f013 0f03 	tst.w	r3, #3
 800893c:	d0d2      	beq.n	80088e4 <pbuf_alloc+0xcc>
 800893e:	4b08      	ldr	r3, [pc, #32]	; (8008960 <pbuf_alloc+0x148>)
 8008940:	f240 1201 	movw	r2, #257	; 0x101
 8008944:	490a      	ldr	r1, [pc, #40]	; (8008970 <pbuf_alloc+0x158>)
 8008946:	4808      	ldr	r0, [pc, #32]	; (8008968 <pbuf_alloc+0x150>)
 8008948:	f00c fa7c 	bl	8014e44 <iprintf>
 800894c:	e7ca      	b.n	80088e4 <pbuf_alloc+0xcc>
          p = q;
 800894e:	46b9      	mov	r9, r7
 8008950:	e7cd      	b.n	80088ee <pbuf_alloc+0xd6>
        return NULL;
 8008952:	f04f 0900 	mov.w	r9, #0
 8008956:	e7b3      	b.n	80088c0 <pbuf_alloc+0xa8>
 8008958:	f04f 0900 	mov.w	r9, #0
 800895c:	e7b0      	b.n	80088c0 <pbuf_alloc+0xa8>
 800895e:	bf00      	nop
 8008960:	08016a58 	.word	0x08016a58
 8008964:	08016aec 	.word	0x08016aec
 8008968:	08015d2c 	.word	0x08015d2c
 800896c:	08016b18 	.word	0x08016b18
 8008970:	08016a88 	.word	0x08016a88

08008974 <pbuf_realloc>:
{
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008978:	4604      	mov	r4, r0
 800897a:	b1b8      	cbz	r0, 80089ac <pbuf_realloc+0x38>
  if (new_len >= p->tot_len) {
 800897c:	8926      	ldrh	r6, [r4, #8]
 800897e:	42ae      	cmp	r6, r5
 8008980:	d92e      	bls.n	80089e0 <pbuf_realloc+0x6c>
  shrink = (u16_t)(p->tot_len - new_len);
 8008982:	1b76      	subs	r6, r6, r5
 8008984:	b2b6      	uxth	r6, r6
  while (rem_len > q->len) {
 8008986:	8961      	ldrh	r1, [r4, #10]
 8008988:	42a9      	cmp	r1, r5
 800898a:	d217      	bcs.n	80089bc <pbuf_realloc+0x48>
    rem_len = (u16_t)(rem_len - q->len);
 800898c:	1a69      	subs	r1, r5, r1
 800898e:	b28d      	uxth	r5, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008990:	8923      	ldrh	r3, [r4, #8]
 8008992:	1b9b      	subs	r3, r3, r6
 8008994:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8008996:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008998:	2c00      	cmp	r4, #0
 800899a:	d1f4      	bne.n	8008986 <pbuf_realloc+0x12>
 800899c:	4b1a      	ldr	r3, [pc, #104]	; (8008a08 <pbuf_realloc+0x94>)
 800899e:	f240 12af 	movw	r2, #431	; 0x1af
 80089a2:	491a      	ldr	r1, [pc, #104]	; (8008a0c <pbuf_realloc+0x98>)
 80089a4:	481a      	ldr	r0, [pc, #104]	; (8008a10 <pbuf_realloc+0x9c>)
 80089a6:	f00c fa4d 	bl	8014e44 <iprintf>
 80089aa:	e7ec      	b.n	8008986 <pbuf_realloc+0x12>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80089ac:	4b16      	ldr	r3, [pc, #88]	; (8008a08 <pbuf_realloc+0x94>)
 80089ae:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80089b2:	4918      	ldr	r1, [pc, #96]	; (8008a14 <pbuf_realloc+0xa0>)
 80089b4:	4816      	ldr	r0, [pc, #88]	; (8008a10 <pbuf_realloc+0x9c>)
 80089b6:	f00c fa45 	bl	8014e44 <iprintf>
 80089ba:	e7df      	b.n	800897c <pbuf_realloc+0x8>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80089bc:	7b23      	ldrb	r3, [r4, #12]
 80089be:	f013 0f0f 	tst.w	r3, #15
 80089c2:	d105      	bne.n	80089d0 <pbuf_realloc+0x5c>
 80089c4:	42a9      	cmp	r1, r5
 80089c6:	d003      	beq.n	80089d0 <pbuf_realloc+0x5c>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80089c8:	7b63      	ldrb	r3, [r4, #13]
 80089ca:	f013 0f02 	tst.w	r3, #2
 80089ce:	d008      	beq.n	80089e2 <pbuf_realloc+0x6e>
  q->len = rem_len;
 80089d0:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80089d2:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80089d4:	6820      	ldr	r0, [r4, #0]
 80089d6:	b108      	cbz	r0, 80089dc <pbuf_realloc+0x68>
    pbuf_free(q->next);
 80089d8:	f7ff febc 	bl	8008754 <pbuf_free>
  q->next = NULL;
 80089dc:	2300      	movs	r3, #0
 80089de:	6023      	str	r3, [r4, #0]
}
 80089e0:	bd70      	pop	{r4, r5, r6, pc}
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80089e2:	6863      	ldr	r3, [r4, #4]
 80089e4:	1b1b      	subs	r3, r3, r4
 80089e6:	18e9      	adds	r1, r5, r3
 80089e8:	b289      	uxth	r1, r1
 80089ea:	4620      	mov	r0, r4
 80089ec:	f7ff f83e 	bl	8007a6c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80089f0:	4604      	mov	r4, r0
 80089f2:	2800      	cmp	r0, #0
 80089f4:	d1ec      	bne.n	80089d0 <pbuf_realloc+0x5c>
 80089f6:	4b04      	ldr	r3, [pc, #16]	; (8008a08 <pbuf_realloc+0x94>)
 80089f8:	f240 12bd 	movw	r2, #445	; 0x1bd
 80089fc:	4906      	ldr	r1, [pc, #24]	; (8008a18 <pbuf_realloc+0xa4>)
 80089fe:	4804      	ldr	r0, [pc, #16]	; (8008a10 <pbuf_realloc+0x9c>)
 8008a00:	f00c fa20 	bl	8014e44 <iprintf>
 8008a04:	e7e4      	b.n	80089d0 <pbuf_realloc+0x5c>
 8008a06:	bf00      	nop
 8008a08:	08016a58 	.word	0x08016a58
 8008a0c:	08016d20 	.word	0x08016d20
 8008a10:	08015d2c 	.word	0x08015d2c
 8008a14:	08016d08 	.word	0x08016d08
 8008a18:	08016d38 	.word	0x08016d38

08008a1c <pbuf_clen>:
  len = 0;
 8008a1c:	2300      	movs	r3, #0
  while (p != NULL) {
 8008a1e:	e002      	b.n	8008a26 <pbuf_clen+0xa>
    ++len;
 8008a20:	3301      	adds	r3, #1
 8008a22:	b29b      	uxth	r3, r3
    p = p->next;
 8008a24:	6800      	ldr	r0, [r0, #0]
  while (p != NULL) {
 8008a26:	2800      	cmp	r0, #0
 8008a28:	d1fa      	bne.n	8008a20 <pbuf_clen+0x4>
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	4770      	bx	lr
	...

08008a30 <pbuf_ref>:
  if (p != NULL) {
 8008a30:	b170      	cbz	r0, 8008a50 <pbuf_ref+0x20>
{
 8008a32:	b508      	push	{r3, lr}
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008a34:	7b83      	ldrb	r3, [r0, #14]
 8008a36:	3301      	adds	r3, #1
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008a3c:	b103      	cbz	r3, 8008a40 <pbuf_ref+0x10>
}
 8008a3e:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008a40:	4b04      	ldr	r3, [pc, #16]	; (8008a54 <pbuf_ref+0x24>)
 8008a42:	f240 3242 	movw	r2, #834	; 0x342
 8008a46:	4904      	ldr	r1, [pc, #16]	; (8008a58 <pbuf_ref+0x28>)
 8008a48:	4804      	ldr	r0, [pc, #16]	; (8008a5c <pbuf_ref+0x2c>)
 8008a4a:	f00c f9fb 	bl	8014e44 <iprintf>
}
 8008a4e:	e7f6      	b.n	8008a3e <pbuf_ref+0xe>
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	08016a58 	.word	0x08016a58
 8008a58:	08016d54 	.word	0x08016d54
 8008a5c:	08015d2c 	.word	0x08015d2c

08008a60 <pbuf_cat>:
{
 8008a60:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008a62:	b110      	cbz	r0, 8008a6a <pbuf_cat+0xa>
 8008a64:	460d      	mov	r5, r1
 8008a66:	4604      	mov	r4, r0
 8008a68:	b961      	cbnz	r1, 8008a84 <pbuf_cat+0x24>
 8008a6a:	4b15      	ldr	r3, [pc, #84]	; (8008ac0 <pbuf_cat+0x60>)
 8008a6c:	f240 325a 	movw	r2, #858	; 0x35a
 8008a70:	4914      	ldr	r1, [pc, #80]	; (8008ac4 <pbuf_cat+0x64>)
 8008a72:	4815      	ldr	r0, [pc, #84]	; (8008ac8 <pbuf_cat+0x68>)
 8008a74:	f00c f9e6 	bl	8014e44 <iprintf>
 8008a78:	e019      	b.n	8008aae <pbuf_cat+0x4e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008a7a:	8923      	ldrh	r3, [r4, #8]
 8008a7c:	8929      	ldrh	r1, [r5, #8]
 8008a7e:	440b      	add	r3, r1
 8008a80:	8123      	strh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008a82:	4614      	mov	r4, r2
 8008a84:	6822      	ldr	r2, [r4, #0]
 8008a86:	2a00      	cmp	r2, #0
 8008a88:	d1f7      	bne.n	8008a7a <pbuf_cat+0x1a>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008a8a:	8922      	ldrh	r2, [r4, #8]
 8008a8c:	8963      	ldrh	r3, [r4, #10]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d10e      	bne.n	8008ab0 <pbuf_cat+0x50>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	b133      	cbz	r3, 8008aa4 <pbuf_cat+0x44>
 8008a96:	4b0a      	ldr	r3, [pc, #40]	; (8008ac0 <pbuf_cat+0x60>)
 8008a98:	f240 3263 	movw	r2, #867	; 0x363
 8008a9c:	490b      	ldr	r1, [pc, #44]	; (8008acc <pbuf_cat+0x6c>)
 8008a9e:	480a      	ldr	r0, [pc, #40]	; (8008ac8 <pbuf_cat+0x68>)
 8008aa0:	f00c f9d0 	bl	8014e44 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008aa4:	8923      	ldrh	r3, [r4, #8]
 8008aa6:	892a      	ldrh	r2, [r5, #8]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	8123      	strh	r3, [r4, #8]
  p->next = t;
 8008aac:	6025      	str	r5, [r4, #0]
}
 8008aae:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008ab0:	4b03      	ldr	r3, [pc, #12]	; (8008ac0 <pbuf_cat+0x60>)
 8008ab2:	f240 3262 	movw	r2, #866	; 0x362
 8008ab6:	4906      	ldr	r1, [pc, #24]	; (8008ad0 <pbuf_cat+0x70>)
 8008ab8:	4803      	ldr	r0, [pc, #12]	; (8008ac8 <pbuf_cat+0x68>)
 8008aba:	f00c f9c3 	bl	8014e44 <iprintf>
 8008abe:	e7e8      	b.n	8008a92 <pbuf_cat+0x32>
 8008ac0:	08016a58 	.word	0x08016a58
 8008ac4:	08016b48 	.word	0x08016b48
 8008ac8:	08015d2c 	.word	0x08015d2c
 8008acc:	08016bb0 	.word	0x08016bb0
 8008ad0:	08016b80 	.word	0x08016b80

08008ad4 <pbuf_chain>:
{
 8008ad4:	b510      	push	{r4, lr}
 8008ad6:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8008ad8:	f7ff ffc2 	bl	8008a60 <pbuf_cat>
  pbuf_ref(t);
 8008adc:	4620      	mov	r0, r4
 8008ade:	f7ff ffa7 	bl	8008a30 <pbuf_ref>
}
 8008ae2:	bd10      	pop	{r4, pc}

08008ae4 <pbuf_copy>:
{
 8008ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008ae8:	b148      	cbz	r0, 8008afe <pbuf_copy+0x1a>
 8008aea:	460c      	mov	r4, r1
 8008aec:	4605      	mov	r5, r0
 8008aee:	b131      	cbz	r1, 8008afe <pbuf_copy+0x1a>
 8008af0:	8902      	ldrh	r2, [r0, #8]
 8008af2:	890b      	ldrh	r3, [r1, #8]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d302      	bcc.n	8008afe <pbuf_copy+0x1a>
  size_t offset_to = 0, offset_from = 0, len;
 8008af8:	2700      	movs	r7, #0
 8008afa:	46b8      	mov	r8, r7
 8008afc:	e03a      	b.n	8008b74 <pbuf_copy+0x90>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008afe:	4b3a      	ldr	r3, [pc, #232]	; (8008be8 <pbuf_copy+0x104>)
 8008b00:	f240 32ca 	movw	r2, #970	; 0x3ca
 8008b04:	4939      	ldr	r1, [pc, #228]	; (8008bec <pbuf_copy+0x108>)
 8008b06:	483a      	ldr	r0, [pc, #232]	; (8008bf0 <pbuf_copy+0x10c>)
 8008b08:	f00c f99c 	bl	8014e44 <iprintf>
 8008b0c:	f06f 000f 	mvn.w	r0, #15
 8008b10:	e068      	b.n	8008be4 <pbuf_copy+0x100>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008b12:	4b35      	ldr	r3, [pc, #212]	; (8008be8 <pbuf_copy+0x104>)
 8008b14:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008b18:	4936      	ldr	r1, [pc, #216]	; (8008bf4 <pbuf_copy+0x110>)
 8008b1a:	4835      	ldr	r0, [pc, #212]	; (8008bf0 <pbuf_copy+0x10c>)
 8008b1c:	f00c f992 	bl	8014e44 <iprintf>
 8008b20:	e03c      	b.n	8008b9c <pbuf_copy+0xb8>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008b22:	4b31      	ldr	r3, [pc, #196]	; (8008be8 <pbuf_copy+0x104>)
 8008b24:	f240 32da 	movw	r2, #986	; 0x3da
 8008b28:	4933      	ldr	r1, [pc, #204]	; (8008bf8 <pbuf_copy+0x114>)
 8008b2a:	4831      	ldr	r0, [pc, #196]	; (8008bf0 <pbuf_copy+0x10c>)
 8008b2c:	f00c f98a 	bl	8014e44 <iprintf>
 8008b30:	e037      	b.n	8008ba2 <pbuf_copy+0xbe>
      p_to = p_to->next;
 8008b32:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008b34:	b115      	cbz	r5, 8008b3c <pbuf_copy+0x58>
      offset_to = 0;
 8008b36:	f04f 0800 	mov.w	r8, #0
 8008b3a:	e03a      	b.n	8008bb2 <pbuf_copy+0xce>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008b3c:	b914      	cbnz	r4, 8008b44 <pbuf_copy+0x60>
      offset_to = 0;
 8008b3e:	f04f 0800 	mov.w	r8, #0
 8008b42:	e036      	b.n	8008bb2 <pbuf_copy+0xce>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008b44:	4b28      	ldr	r3, [pc, #160]	; (8008be8 <pbuf_copy+0x104>)
 8008b46:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008b4a:	492c      	ldr	r1, [pc, #176]	; (8008bfc <pbuf_copy+0x118>)
 8008b4c:	4828      	ldr	r0, [pc, #160]	; (8008bf0 <pbuf_copy+0x10c>)
 8008b4e:	f00c f979 	bl	8014e44 <iprintf>
 8008b52:	f06f 000f 	mvn.w	r0, #15
 8008b56:	e045      	b.n	8008be4 <pbuf_copy+0x100>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	b37b      	cbz	r3, 8008bbc <pbuf_copy+0xd8>
 8008b5c:	4b22      	ldr	r3, [pc, #136]	; (8008be8 <pbuf_copy+0x104>)
 8008b5e:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8008b62:	4927      	ldr	r1, [pc, #156]	; (8008c00 <pbuf_copy+0x11c>)
 8008b64:	4822      	ldr	r0, [pc, #136]	; (8008bf0 <pbuf_copy+0x10c>)
 8008b66:	f00c f96d 	bl	8014e44 <iprintf>
 8008b6a:	f06f 0005 	mvn.w	r0, #5
 8008b6e:	e039      	b.n	8008be4 <pbuf_copy+0x100>
  } while (p_from);
 8008b70:	2c00      	cmp	r4, #0
 8008b72:	d036      	beq.n	8008be2 <pbuf_copy+0xfe>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008b74:	896e      	ldrh	r6, [r5, #10]
 8008b76:	eba6 0608 	sub.w	r6, r6, r8
 8008b7a:	8963      	ldrh	r3, [r4, #10]
 8008b7c:	1bdb      	subs	r3, r3, r7
 8008b7e:	429e      	cmp	r6, r3
 8008b80:	d300      	bcc.n	8008b84 <pbuf_copy+0xa0>
      len = p_from->len - offset_from;
 8008b82:	461e      	mov	r6, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008b84:	6868      	ldr	r0, [r5, #4]
 8008b86:	6861      	ldr	r1, [r4, #4]
 8008b88:	4632      	mov	r2, r6
 8008b8a:	4439      	add	r1, r7
 8008b8c:	4440      	add	r0, r8
 8008b8e:	f00c f92c 	bl	8014dea <memcpy>
    offset_to += len;
 8008b92:	44b0      	add	r8, r6
    offset_from += len;
 8008b94:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008b96:	896b      	ldrh	r3, [r5, #10]
 8008b98:	4543      	cmp	r3, r8
 8008b9a:	d3ba      	bcc.n	8008b12 <pbuf_copy+0x2e>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008b9c:	8963      	ldrh	r3, [r4, #10]
 8008b9e:	42bb      	cmp	r3, r7
 8008ba0:	d3bf      	bcc.n	8008b22 <pbuf_copy+0x3e>
    if (offset_from >= p_from->len) {
 8008ba2:	8963      	ldrh	r3, [r4, #10]
 8008ba4:	42bb      	cmp	r3, r7
 8008ba6:	d801      	bhi.n	8008bac <pbuf_copy+0xc8>
      p_from = p_from->next;
 8008ba8:	6824      	ldr	r4, [r4, #0]
      offset_from = 0;
 8008baa:	2700      	movs	r7, #0
    if (offset_to == p_to->len) {
 8008bac:	896b      	ldrh	r3, [r5, #10]
 8008bae:	4543      	cmp	r3, r8
 8008bb0:	d0bf      	beq.n	8008b32 <pbuf_copy+0x4e>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008bb2:	b11c      	cbz	r4, 8008bbc <pbuf_copy+0xd8>
 8008bb4:	8962      	ldrh	r2, [r4, #10]
 8008bb6:	8923      	ldrh	r3, [r4, #8]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d0cd      	beq.n	8008b58 <pbuf_copy+0x74>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008bbc:	2d00      	cmp	r5, #0
 8008bbe:	d0d7      	beq.n	8008b70 <pbuf_copy+0x8c>
 8008bc0:	896a      	ldrh	r2, [r5, #10]
 8008bc2:	892b      	ldrh	r3, [r5, #8]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d1d3      	bne.n	8008b70 <pbuf_copy+0x8c>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d0d0      	beq.n	8008b70 <pbuf_copy+0x8c>
 8008bce:	4b06      	ldr	r3, [pc, #24]	; (8008be8 <pbuf_copy+0x104>)
 8008bd0:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8008bd4:	490a      	ldr	r1, [pc, #40]	; (8008c00 <pbuf_copy+0x11c>)
 8008bd6:	4806      	ldr	r0, [pc, #24]	; (8008bf0 <pbuf_copy+0x10c>)
 8008bd8:	f00c f934 	bl	8014e44 <iprintf>
 8008bdc:	f06f 0005 	mvn.w	r0, #5
 8008be0:	e000      	b.n	8008be4 <pbuf_copy+0x100>
  return ERR_OK;
 8008be2:	2000      	movs	r0, #0
}
 8008be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be8:	08016a58 	.word	0x08016a58
 8008bec:	08016bd4 	.word	0x08016bd4
 8008bf0:	08015d2c 	.word	0x08015d2c
 8008bf4:	08016c04 	.word	0x08016c04
 8008bf8:	08016c1c 	.word	0x08016c1c
 8008bfc:	08016c38 	.word	0x08016c38
 8008c00:	08016c48 	.word	0x08016c48

08008c04 <pbuf_copy_partial>:
{
 8008c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008c08:	b128      	cbz	r0, 8008c16 <pbuf_copy_partial+0x12>
 8008c0a:	460f      	mov	r7, r1
 8008c0c:	4690      	mov	r8, r2
 8008c0e:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008c10:	b161      	cbz	r1, 8008c2c <pbuf_copy_partial+0x28>
  u16_t left = 0;
 8008c12:	2600      	movs	r6, #0
 8008c14:	e027      	b.n	8008c66 <pbuf_copy_partial+0x62>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008c16:	4b1a      	ldr	r3, [pc, #104]	; (8008c80 <pbuf_copy_partial+0x7c>)
 8008c18:	f240 420a 	movw	r2, #1034	; 0x40a
 8008c1c:	4919      	ldr	r1, [pc, #100]	; (8008c84 <pbuf_copy_partial+0x80>)
 8008c1e:	481a      	ldr	r0, [pc, #104]	; (8008c88 <pbuf_copy_partial+0x84>)
 8008c20:	f00c f910 	bl	8014e44 <iprintf>
 8008c24:	2600      	movs	r6, #0
}
 8008c26:	4630      	mov	r0, r6
 8008c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008c2c:	4b14      	ldr	r3, [pc, #80]	; (8008c80 <pbuf_copy_partial+0x7c>)
 8008c2e:	f240 420b 	movw	r2, #1035	; 0x40b
 8008c32:	4916      	ldr	r1, [pc, #88]	; (8008c8c <pbuf_copy_partial+0x88>)
 8008c34:	4814      	ldr	r0, [pc, #80]	; (8008c88 <pbuf_copy_partial+0x84>)
 8008c36:	f00c f905 	bl	8014e44 <iprintf>
 8008c3a:	2600      	movs	r6, #0
 8008c3c:	e7f3      	b.n	8008c26 <pbuf_copy_partial+0x22>
      buf_copy_len = (u16_t)(p->len - offset);
 8008c3e:	896a      	ldrh	r2, [r5, #10]
 8008c40:	1ad2      	subs	r2, r2, r3
 8008c42:	b294      	uxth	r4, r2
      if (buf_copy_len > len) {
 8008c44:	45a0      	cmp	r8, r4
 8008c46:	d200      	bcs.n	8008c4a <pbuf_copy_partial+0x46>
        buf_copy_len = len;
 8008c48:	4644      	mov	r4, r8
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008c4a:	6869      	ldr	r1, [r5, #4]
 8008c4c:	4622      	mov	r2, r4
 8008c4e:	4419      	add	r1, r3
 8008c50:	19b8      	adds	r0, r7, r6
 8008c52:	f00c f8ca 	bl	8014dea <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008c56:	4426      	add	r6, r4
 8008c58:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 8008c5a:	eba8 0404 	sub.w	r4, r8, r4
 8008c5e:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 8008c62:	2300      	movs	r3, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008c64:	682d      	ldr	r5, [r5, #0]
 8008c66:	f1b8 0f00 	cmp.w	r8, #0
 8008c6a:	d0dc      	beq.n	8008c26 <pbuf_copy_partial+0x22>
 8008c6c:	2d00      	cmp	r5, #0
 8008c6e:	d0da      	beq.n	8008c26 <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d0e4      	beq.n	8008c3e <pbuf_copy_partial+0x3a>
 8008c74:	8969      	ldrh	r1, [r5, #10]
 8008c76:	4299      	cmp	r1, r3
 8008c78:	d8e1      	bhi.n	8008c3e <pbuf_copy_partial+0x3a>
      offset = (u16_t)(offset - p->len);
 8008c7a:	1a5b      	subs	r3, r3, r1
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	e7f1      	b.n	8008c64 <pbuf_copy_partial+0x60>
 8008c80:	08016a58 	.word	0x08016a58
 8008c84:	08016c74 	.word	0x08016c74
 8008c88:	08015d2c 	.word	0x08015d2c
 8008c8c:	08016c94 	.word	0x08016c94

08008c90 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8008c90:	b508      	push	{r3, lr}
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8008c92:	f7ff fc6b 	bl	800856c <pbuf_skip_const>
  return LWIP_CONST_CAST(struct pbuf *, out);
}
 8008c96:	bd08      	pop	{r3, pc}

08008c98 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8008c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8008c9c:	b148      	cbz	r0, 8008cb2 <pbuf_take+0x1a>
 8008c9e:	4688      	mov	r8, r1
 8008ca0:	4691      	mov	r9, r2
 8008ca2:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8008ca4:	b179      	cbz	r1, 8008cc6 <pbuf_take+0x2e>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8008ca6:	8903      	ldrh	r3, [r0, #8]
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d316      	bcc.n	8008cda <pbuf_take+0x42>
  size_t total_copy_len = len;
 8008cac:	4616      	mov	r6, r2
  size_t copied_total = 0;
 8008cae:	2700      	movs	r7, #0
 8008cb0:	e02e      	b.n	8008d10 <pbuf_take+0x78>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8008cb2:	4b22      	ldr	r3, [pc, #136]	; (8008d3c <pbuf_take+0xa4>)
 8008cb4:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8008cb8:	4921      	ldr	r1, [pc, #132]	; (8008d40 <pbuf_take+0xa8>)
 8008cba:	4822      	ldr	r0, [pc, #136]	; (8008d44 <pbuf_take+0xac>)
 8008cbc:	f00c f8c2 	bl	8014e44 <iprintf>
 8008cc0:	f06f 000f 	mvn.w	r0, #15
 8008cc4:	e036      	b.n	8008d34 <pbuf_take+0x9c>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8008cc6:	4b1d      	ldr	r3, [pc, #116]	; (8008d3c <pbuf_take+0xa4>)
 8008cc8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8008ccc:	491e      	ldr	r1, [pc, #120]	; (8008d48 <pbuf_take+0xb0>)
 8008cce:	481d      	ldr	r0, [pc, #116]	; (8008d44 <pbuf_take+0xac>)
 8008cd0:	f00c f8b8 	bl	8014e44 <iprintf>
 8008cd4:	f06f 000f 	mvn.w	r0, #15
 8008cd8:	e02c      	b.n	8008d34 <pbuf_take+0x9c>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8008cda:	4b18      	ldr	r3, [pc, #96]	; (8008d3c <pbuf_take+0xa4>)
 8008cdc:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8008ce0:	491a      	ldr	r1, [pc, #104]	; (8008d4c <pbuf_take+0xb4>)
 8008ce2:	4818      	ldr	r0, [pc, #96]	; (8008d44 <pbuf_take+0xac>)
 8008ce4:	f00c f8ae 	bl	8014e44 <iprintf>
 8008ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cec:	e022      	b.n	8008d34 <pbuf_take+0x9c>
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8008cee:	4b13      	ldr	r3, [pc, #76]	; (8008d3c <pbuf_take+0xa4>)
 8008cf0:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8008cf4:	4916      	ldr	r1, [pc, #88]	; (8008d50 <pbuf_take+0xb8>)
 8008cf6:	4813      	ldr	r0, [pc, #76]	; (8008d44 <pbuf_take+0xac>)
 8008cf8:	f00c f8a4 	bl	8014e44 <iprintf>
 8008cfc:	e00b      	b.n	8008d16 <pbuf_take+0x7e>
    if (buf_copy_len > p->len) {
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8008cfe:	4622      	mov	r2, r4
 8008d00:	eb08 0107 	add.w	r1, r8, r7
 8008d04:	6868      	ldr	r0, [r5, #4]
 8008d06:	f00c f870 	bl	8014dea <memcpy>
    total_copy_len -= buf_copy_len;
 8008d0a:	1b36      	subs	r6, r6, r4
    copied_total += buf_copy_len;
 8008d0c:	4427      	add	r7, r4
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008d0e:	682d      	ldr	r5, [r5, #0]
 8008d10:	b136      	cbz	r6, 8008d20 <pbuf_take+0x88>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8008d12:	2d00      	cmp	r5, #0
 8008d14:	d0eb      	beq.n	8008cee <pbuf_take+0x56>
    if (buf_copy_len > p->len) {
 8008d16:	896c      	ldrh	r4, [r5, #10]
 8008d18:	42b4      	cmp	r4, r6
 8008d1a:	d3f0      	bcc.n	8008cfe <pbuf_take+0x66>
    buf_copy_len = total_copy_len;
 8008d1c:	4634      	mov	r4, r6
 8008d1e:	e7ee      	b.n	8008cfe <pbuf_take+0x66>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8008d20:	454f      	cmp	r7, r9
 8008d22:	d009      	beq.n	8008d38 <pbuf_take+0xa0>
 8008d24:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <pbuf_take+0xa4>)
 8008d26:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8008d2a:	490a      	ldr	r1, [pc, #40]	; (8008d54 <pbuf_take+0xbc>)
 8008d2c:	4805      	ldr	r0, [pc, #20]	; (8008d44 <pbuf_take+0xac>)
 8008d2e:	f00c f889 	bl	8014e44 <iprintf>
  return ERR_OK;
 8008d32:	2000      	movs	r0, #0
}
 8008d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return ERR_OK;
 8008d38:	2000      	movs	r0, #0
 8008d3a:	e7fb      	b.n	8008d34 <pbuf_take+0x9c>
 8008d3c:	08016a58 	.word	0x08016a58
 8008d40:	08016d88 	.word	0x08016d88
 8008d44:	08015d2c 	.word	0x08015d2c
 8008d48:	08016da0 	.word	0x08016da0
 8008d4c:	08016dbc 	.word	0x08016dbc
 8008d50:	08016ddc 	.word	0x08016ddc
 8008d54:	08016df4 	.word	0x08016df4

08008d58 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8008d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	460f      	mov	r7, r1
 8008d5e:	4614      	mov	r4, r2
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8008d60:	f10d 0206 	add.w	r2, sp, #6
 8008d64:	4619      	mov	r1, r3
 8008d66:	f7ff ff93 	bl	8008c90 <pbuf_skip>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8008d6a:	b358      	cbz	r0, 8008dc4 <pbuf_take_at+0x6c>
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	8901      	ldrh	r1, [r0, #8]
 8008d70:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008d74:	191a      	adds	r2, r3, r4
 8008d76:	4291      	cmp	r1, r2
 8008d78:	db27      	blt.n	8008dca <pbuf_take_at+0x72>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8008d7a:	8942      	ldrh	r2, [r0, #10]
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d207      	bcs.n	8008d90 <pbuf_take_at+0x38>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8008d80:	8973      	ldrh	r3, [r6, #10]
 8008d82:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8008d86:	1a1a      	subs	r2, r3, r0
 8008d88:	4294      	cmp	r4, r2
 8008d8a:	dd09      	ble.n	8008da0 <pbuf_take_at+0x48>
 8008d8c:	b295      	uxth	r5, r2
 8008d8e:	e008      	b.n	8008da2 <pbuf_take_at+0x4a>
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8008d90:	4b0f      	ldr	r3, [pc, #60]	; (8008dd0 <pbuf_take_at+0x78>)
 8008d92:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8008d96:	490f      	ldr	r1, [pc, #60]	; (8008dd4 <pbuf_take_at+0x7c>)
 8008d98:	480f      	ldr	r0, [pc, #60]	; (8008dd8 <pbuf_take_at+0x80>)
 8008d9a:	f00c f853 	bl	8014e44 <iprintf>
 8008d9e:	e7ef      	b.n	8008d80 <pbuf_take_at+0x28>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8008da0:	4625      	mov	r5, r4
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8008da2:	6873      	ldr	r3, [r6, #4]
 8008da4:	462a      	mov	r2, r5
 8008da6:	4639      	mov	r1, r7
 8008da8:	4418      	add	r0, r3
 8008daa:	f00c f81e 	bl	8014dea <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8008dae:	1b62      	subs	r2, r4, r5
 8008db0:	b292      	uxth	r2, r2
    src_ptr += first_copy_len;
 8008db2:	1979      	adds	r1, r7, r5
    if (remaining_len > 0) {
 8008db4:	b912      	cbnz	r2, 8008dbc <pbuf_take_at+0x64>
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
 8008db6:	2000      	movs	r0, #0
  }
  return ERR_MEM;
}
 8008db8:	b003      	add	sp, #12
 8008dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return pbuf_take(q->next, src_ptr, remaining_len);
 8008dbc:	6830      	ldr	r0, [r6, #0]
 8008dbe:	f7ff ff6b 	bl	8008c98 <pbuf_take>
 8008dc2:	e7f9      	b.n	8008db8 <pbuf_take_at+0x60>
  return ERR_MEM;
 8008dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc8:	e7f6      	b.n	8008db8 <pbuf_take_at+0x60>
 8008dca:	f04f 30ff 	mov.w	r0, #4294967295
 8008dce:	e7f3      	b.n	8008db8 <pbuf_take_at+0x60>
 8008dd0:	08016a58 	.word	0x08016a58
 8008dd4:	08016e0c 	.word	0x08016e0c
 8008dd8:	08015d2c 	.word	0x08015d2c

08008ddc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008ddc:	b538      	push	{r3, r4, r5, lr}
 8008dde:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008de0:	460a      	mov	r2, r1
 8008de2:	8929      	ldrh	r1, [r5, #8]
 8008de4:	f7ff fd18 	bl	8008818 <pbuf_alloc>
  if (q == NULL) {
 8008de8:	4604      	mov	r4, r0
 8008dea:	b118      	cbz	r0, 8008df4 <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8008dec:	4629      	mov	r1, r5
 8008dee:	f7ff fe79 	bl	8008ae4 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008df2:	b908      	cbnz	r0, 8008df8 <pbuf_clone+0x1c>
  return q;
}
 8008df4:	4620      	mov	r0, r4
 8008df6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008df8:	4b03      	ldr	r3, [pc, #12]	; (8008e08 <pbuf_clone+0x2c>)
 8008dfa:	f240 5224 	movw	r2, #1316	; 0x524
 8008dfe:	4903      	ldr	r1, [pc, #12]	; (8008e0c <pbuf_clone+0x30>)
 8008e00:	4803      	ldr	r0, [pc, #12]	; (8008e10 <pbuf_clone+0x34>)
 8008e02:	f00c f81f 	bl	8014e44 <iprintf>
 8008e06:	e7f5      	b.n	8008df4 <pbuf_clone+0x18>
 8008e08:	08016a58 	.word	0x08016a58
 8008e0c:	08016bc0 	.word	0x08016bc0
 8008e10:	08015d2c 	.word	0x08015d2c

08008e14 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8008e14:	b500      	push	{lr}
 8008e16:	b083      	sub	sp, #12
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8008e18:	f10d 0206 	add.w	r2, sp, #6
 8008e1c:	f7ff fba6 	bl	800856c <pbuf_skip_const>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8008e20:	b148      	cbz	r0, 8008e36 <pbuf_try_get_at+0x22>
 8008e22:	8941      	ldrh	r1, [r0, #10]
 8008e24:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008e28:	4291      	cmp	r1, r2
 8008e2a:	d907      	bls.n	8008e3c <pbuf_try_get_at+0x28>
    return ((u8_t *)q->payload)[q_idx];
 8008e2c:	6843      	ldr	r3, [r0, #4]
 8008e2e:	5c98      	ldrb	r0, [r3, r2]
  }
  return -1;
}
 8008e30:	b003      	add	sp, #12
 8008e32:	f85d fb04 	ldr.w	pc, [sp], #4
  return -1;
 8008e36:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3a:	e7f9      	b.n	8008e30 <pbuf_try_get_at+0x1c>
 8008e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e40:	e7f6      	b.n	8008e30 <pbuf_try_get_at+0x1c>

08008e42 <pbuf_get_at>:
{
 8008e42:	b508      	push	{r3, lr}
  int ret = pbuf_try_get_at(p, offset);
 8008e44:	f7ff ffe6 	bl	8008e14 <pbuf_try_get_at>
  if (ret >= 0) {
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	db01      	blt.n	8008e50 <pbuf_get_at+0xe>
    return (u8_t)ret;
 8008e4c:	b2c0      	uxtb	r0, r0
}
 8008e4e:	bd08      	pop	{r3, pc}
  return 0;
 8008e50:	2000      	movs	r0, #0
 8008e52:	e7fc      	b.n	8008e4e <pbuf_get_at+0xc>

08008e54 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8008e54:	b510      	push	{r4, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	4614      	mov	r4, r2
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8008e5a:	f10d 0206 	add.w	r2, sp, #6
 8008e5e:	f7ff ff17 	bl	8008c90 <pbuf_skip>

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8008e62:	b130      	cbz	r0, 8008e72 <pbuf_put_at+0x1e>
 8008e64:	8941      	ldrh	r1, [r0, #10]
 8008e66:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008e6a:	4291      	cmp	r1, r2
 8008e6c:	d901      	bls.n	8008e72 <pbuf_put_at+0x1e>
    ((u8_t *)q->payload)[q_idx] = data;
 8008e6e:	6843      	ldr	r3, [r0, #4]
 8008e70:	549c      	strb	r4, [r3, r2]
  }
}
 8008e72:	b002      	add	sp, #8
 8008e74:	bd10      	pop	{r4, pc}
	...

08008e78 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4604      	mov	r4, r0
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008e7c:	460d      	mov	r5, r1
 8008e7e:	b939      	cbnz	r1, 8008e90 <tcp_remove_listener+0x18>
 8008e80:	4b08      	ldr	r3, [pc, #32]	; (8008ea4 <tcp_remove_listener+0x2c>)
 8008e82:	22ff      	movs	r2, #255	; 0xff
 8008e84:	4908      	ldr	r1, [pc, #32]	; (8008ea8 <tcp_remove_listener+0x30>)
 8008e86:	4809      	ldr	r0, [pc, #36]	; (8008eac <tcp_remove_listener+0x34>)
 8008e88:	f00b ffdc 	bl	8014e44 <iprintf>
 8008e8c:	e000      	b.n	8008e90 <tcp_remove_listener+0x18>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008e8e:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8008e90:	b13c      	cbz	r4, 8008ea2 <tcp_remove_listener+0x2a>
    if (pcb->listener == lpcb) {
 8008e92:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8008e96:	42ab      	cmp	r3, r5
 8008e98:	d1f9      	bne.n	8008e8e <tcp_remove_listener+0x16>
      pcb->listener = NULL;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8008ea0:	e7f5      	b.n	8008e8e <tcp_remove_listener+0x16>
    }
  }
}
 8008ea2:	bd38      	pop	{r3, r4, r5, pc}
 8008ea4:	080170f4 	.word	0x080170f4
 8008ea8:	08017124 	.word	0x08017124
 8008eac:	08015d2c 	.word	0x08015d2c

08008eb0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008eb0:	b538      	push	{r3, r4, r5, lr}
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008eb2:	4605      	mov	r5, r0
 8008eb4:	b128      	cbz	r0, 8008ec2 <tcp_listen_closed+0x12>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008eb6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d109      	bne.n	8008ed2 <tcp_listen_closed+0x22>
{
 8008ebe:	2401      	movs	r4, #1
 8008ec0:	e017      	b.n	8008ef2 <tcp_listen_closed+0x42>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008ec2:	4b0d      	ldr	r3, [pc, #52]	; (8008ef8 <tcp_listen_closed+0x48>)
 8008ec4:	f240 1211 	movw	r2, #273	; 0x111
 8008ec8:	490c      	ldr	r1, [pc, #48]	; (8008efc <tcp_listen_closed+0x4c>)
 8008eca:	480d      	ldr	r0, [pc, #52]	; (8008f00 <tcp_listen_closed+0x50>)
 8008ecc:	f00b ffba 	bl	8014e44 <iprintf>
 8008ed0:	e7f1      	b.n	8008eb6 <tcp_listen_closed+0x6>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008ed2:	4b09      	ldr	r3, [pc, #36]	; (8008ef8 <tcp_listen_closed+0x48>)
 8008ed4:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008ed8:	490a      	ldr	r1, [pc, #40]	; (8008f04 <tcp_listen_closed+0x54>)
 8008eda:	4809      	ldr	r0, [pc, #36]	; (8008f00 <tcp_listen_closed+0x50>)
 8008edc:	f00b ffb2 	bl	8014e44 <iprintf>
 8008ee0:	e7ed      	b.n	8008ebe <tcp_listen_closed+0xe>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008ee2:	4b09      	ldr	r3, [pc, #36]	; (8008f08 <tcp_listen_closed+0x58>)
 8008ee4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008ee8:	4629      	mov	r1, r5
 8008eea:	6818      	ldr	r0, [r3, #0]
 8008eec:	f7ff ffc4 	bl	8008e78 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008ef0:	3401      	adds	r4, #1
 8008ef2:	2c03      	cmp	r4, #3
 8008ef4:	d9f5      	bls.n	8008ee2 <tcp_listen_closed+0x32>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008ef6:	bd38      	pop	{r3, r4, r5, pc}
 8008ef8:	080170f4 	.word	0x080170f4
 8008efc:	08016f40 	.word	0x08016f40
 8008f00:	08015d2c 	.word	0x08015d2c
 8008f04:	08016f4c 	.word	0x08016f4c
 8008f08:	08016fb4 	.word	0x08016fb4

08008f0c <tcp_free_listen>:
{
 8008f0c:	b510      	push	{r4, lr}
 8008f0e:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008f10:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d004      	beq.n	8008f22 <tcp_free_listen+0x16>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008f18:	4621      	mov	r1, r4
 8008f1a:	2002      	movs	r0, #2
 8008f1c:	f7fe ff8c 	bl	8007e38 <memp_free>
}
 8008f20:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008f22:	4b03      	ldr	r3, [pc, #12]	; (8008f30 <tcp_free_listen+0x24>)
 8008f24:	22df      	movs	r2, #223	; 0xdf
 8008f26:	4903      	ldr	r1, [pc, #12]	; (8008f34 <tcp_free_listen+0x28>)
 8008f28:	4803      	ldr	r0, [pc, #12]	; (8008f38 <tcp_free_listen+0x2c>)
 8008f2a:	f00b ff8b 	bl	8014e44 <iprintf>
 8008f2e:	e7f3      	b.n	8008f18 <tcp_free_listen+0xc>
 8008f30:	080170f4 	.word	0x080170f4
 8008f34:	08016f14 	.word	0x08016f14
 8008f38:	08015d2c 	.word	0x08015d2c

08008f3c <tcp_close_shutdown_fin>:
  return ERR_OK;
}

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008f3c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008f3e:	4604      	mov	r4, r0
 8008f40:	b148      	cbz	r0, 8008f56 <tcp_close_shutdown_fin+0x1a>

  switch (pcb->state) {
 8008f42:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008f46:	2b04      	cmp	r3, #4
 8008f48:	d01b      	beq.n	8008f82 <tcp_close_shutdown_fin+0x46>
 8008f4a:	2b07      	cmp	r3, #7
 8008f4c:	d023      	beq.n	8008f96 <tcp_close_shutdown_fin+0x5a>
 8008f4e:	2b03      	cmp	r3, #3
 8008f50:	d009      	beq.n	8008f66 <tcp_close_shutdown_fin+0x2a>
        pcb->state = LAST_ACK;
      }
      break;
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008f52:	2500      	movs	r5, #0
 8008f54:	e013      	b.n	8008f7e <tcp_close_shutdown_fin+0x42>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008f56:	4b1b      	ldr	r3, [pc, #108]	; (8008fc4 <tcp_close_shutdown_fin+0x88>)
 8008f58:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008f5c:	491a      	ldr	r1, [pc, #104]	; (8008fc8 <tcp_close_shutdown_fin+0x8c>)
 8008f5e:	481b      	ldr	r0, [pc, #108]	; (8008fcc <tcp_close_shutdown_fin+0x90>)
 8008f60:	f00b ff70 	bl	8014e44 <iprintf>
 8008f64:	e7ed      	b.n	8008f42 <tcp_close_shutdown_fin+0x6>
      err = tcp_send_fin(pcb);
 8008f66:	4620      	mov	r0, r4
 8008f68:	f003 fb52 	bl	800c610 <tcp_send_fin>
      if (err == ERR_OK) {
 8008f6c:	4605      	mov	r5, r0
 8008f6e:	b910      	cbnz	r0, 8008f76 <tcp_close_shutdown_fin+0x3a>
        pcb->state = FIN_WAIT_1;
 8008f70:	2305      	movs	r3, #5
 8008f72:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  }

  if (err == ERR_OK) {
 8008f76:	b1c5      	cbz	r5, 8008faa <tcp_close_shutdown_fin+0x6e>
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
  } else if (err == ERR_MEM) {
 8008f78:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008f7c:	d019      	beq.n	8008fb2 <tcp_close_shutdown_fin+0x76>
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
  }
  return err;
}
 8008f7e:	4628      	mov	r0, r5
 8008f80:	bd38      	pop	{r3, r4, r5, pc}
      err = tcp_send_fin(pcb);
 8008f82:	4620      	mov	r0, r4
 8008f84:	f003 fb44 	bl	800c610 <tcp_send_fin>
      if (err == ERR_OK) {
 8008f88:	4605      	mov	r5, r0
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d1f3      	bne.n	8008f76 <tcp_close_shutdown_fin+0x3a>
        pcb->state = FIN_WAIT_1;
 8008f8e:	2305      	movs	r3, #5
 8008f90:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8008f94:	e7ef      	b.n	8008f76 <tcp_close_shutdown_fin+0x3a>
      err = tcp_send_fin(pcb);
 8008f96:	4620      	mov	r0, r4
 8008f98:	f003 fb3a 	bl	800c610 <tcp_send_fin>
      if (err == ERR_OK) {
 8008f9c:	4605      	mov	r5, r0
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d1e9      	bne.n	8008f76 <tcp_close_shutdown_fin+0x3a>
        pcb->state = LAST_ACK;
 8008fa2:	2309      	movs	r3, #9
 8008fa4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8008fa8:	e7e5      	b.n	8008f76 <tcp_close_shutdown_fin+0x3a>
    tcp_output(pcb);
 8008faa:	4620      	mov	r0, r4
 8008fac:	f003 fcce 	bl	800c94c <tcp_output>
 8008fb0:	e7e5      	b.n	8008f7e <tcp_close_shutdown_fin+0x42>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008fb2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8008fb6:	f043 0308 	orr.w	r3, r3, #8
 8008fba:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    return ERR_OK;
 8008fbe:	2500      	movs	r5, #0
 8008fc0:	e7dd      	b.n	8008f7e <tcp_close_shutdown_fin+0x42>
 8008fc2:	bf00      	nop
 8008fc4:	080170f4 	.word	0x080170f4
 8008fc8:	08016f40 	.word	0x08016f40
 8008fcc:	08015d2c 	.word	0x08015d2c

08008fd0 <tcp_handle_closepend>:
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008fd0:	4b0a      	ldr	r3, [pc, #40]	; (8008ffc <tcp_handle_closepend+0x2c>)
 8008fd2:	6818      	ldr	r0, [r3, #0]

  while (pcb != NULL) {
 8008fd4:	b188      	cbz	r0, 8008ffa <tcp_handle_closepend+0x2a>
{
 8008fd6:	b510      	push	{r4, lr}
 8008fd8:	e001      	b.n	8008fde <tcp_handle_closepend+0xe>
 8008fda:	4620      	mov	r0, r4
  while (pcb != NULL) {
 8008fdc:	b164      	cbz	r4, 8008ff8 <tcp_handle_closepend+0x28>
    struct tcp_pcb *next = pcb->next;
 8008fde:	6b44      	ldr	r4, [r0, #52]	; 0x34
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008fe0:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
 8008fe4:	f013 0f08 	tst.w	r3, #8
 8008fe8:	d0f7      	beq.n	8008fda <tcp_handle_closepend+0xa>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008fea:	f023 0308 	bic.w	r3, r3, #8
 8008fee:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
      tcp_close_shutdown_fin(pcb);
 8008ff2:	f7ff ffa3 	bl	8008f3c <tcp_close_shutdown_fin>
 8008ff6:	e7f0      	b.n	8008fda <tcp_handle_closepend+0xa>
    }
    pcb = next;
  }
}
 8008ff8:	bd10      	pop	{r4, pc}
 8008ffa:	4770      	bx	lr
 8008ffc:	20008610 	.word	0x20008610

08009000 <tcp_init>:
{
 8009000:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009002:	f00b ff37 	bl	8014e74 <rand>
 8009006:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800900a:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800900e:	4b01      	ldr	r3, [pc, #4]	; (8009014 <tcp_init+0x14>)
 8009010:	8018      	strh	r0, [r3, #0]
}
 8009012:	bd08      	pop	{r3, pc}
 8009014:	20000014 	.word	0x20000014

08009018 <tcp_free>:
{
 8009018:	b510      	push	{r4, lr}
 800901a:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800901c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009020:	2b01      	cmp	r3, #1
 8009022:	d004      	beq.n	800902e <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 8009024:	4621      	mov	r1, r4
 8009026:	2001      	movs	r0, #1
 8009028:	f7fe ff06 	bl	8007e38 <memp_free>
}
 800902c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800902e:	4b03      	ldr	r3, [pc, #12]	; (800903c <tcp_free+0x24>)
 8009030:	22d4      	movs	r2, #212	; 0xd4
 8009032:	4903      	ldr	r1, [pc, #12]	; (8009040 <tcp_free+0x28>)
 8009034:	4803      	ldr	r0, [pc, #12]	; (8009044 <tcp_free+0x2c>)
 8009036:	f00b ff05 	bl	8014e44 <iprintf>
 800903a:	e7f3      	b.n	8009024 <tcp_free+0xc>
 800903c:	080170f4 	.word	0x080170f4
 8009040:	08016f00 	.word	0x08016f00
 8009044:	08015d2c 	.word	0x08015d2c

08009048 <tcp_update_rcv_ann_wnd>:
{
 8009048:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800904a:	4604      	mov	r4, r0
 800904c:	b198      	cbz	r0, 8009076 <tcp_update_rcv_ann_wnd+0x2e>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800904e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009050:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8009054:	1868      	adds	r0, r5, r1
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009056:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009058:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800905c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009060:	bf94      	ite	ls
 8009062:	18d3      	addls	r3, r2, r3
 8009064:	f502 6386 	addhi.w	r3, r2, #1072	; 0x430
 8009068:	1ac3      	subs	r3, r0, r3
 800906a:	2b00      	cmp	r3, #0
 800906c:	db0b      	blt.n	8009086 <tcp_update_rcv_ann_wnd+0x3e>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800906e:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009072:	1a80      	subs	r0, r0, r2
}
 8009074:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009076:	4b0f      	ldr	r3, [pc, #60]	; (80090b4 <tcp_update_rcv_ann_wnd+0x6c>)
 8009078:	f240 32a6 	movw	r2, #934	; 0x3a6
 800907c:	490e      	ldr	r1, [pc, #56]	; (80090b8 <tcp_update_rcv_ann_wnd+0x70>)
 800907e:	480f      	ldr	r0, [pc, #60]	; (80090bc <tcp_update_rcv_ann_wnd+0x74>)
 8009080:	f00b fee0 	bl	8014e44 <iprintf>
 8009084:	e7e3      	b.n	800904e <tcp_update_rcv_ann_wnd+0x6>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009086:	1aab      	subs	r3, r5, r2
 8009088:	2b00      	cmp	r3, #0
 800908a:	dd03      	ble.n	8009094 <tcp_update_rcv_ann_wnd+0x4c>
      pcb->rcv_ann_wnd = 0;
 800908c:	2000      	movs	r0, #0
 800908e:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
 8009092:	e7ef      	b.n	8009074 <tcp_update_rcv_ann_wnd+0x2c>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009094:	1b55      	subs	r5, r2, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009096:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800909a:	d203      	bcs.n	80090a4 <tcp_update_rcv_ann_wnd+0x5c>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800909c:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
    return 0;
 80090a0:	2000      	movs	r0, #0
 80090a2:	e7e7      	b.n	8009074 <tcp_update_rcv_ann_wnd+0x2c>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80090a4:	4b03      	ldr	r3, [pc, #12]	; (80090b4 <tcp_update_rcv_ann_wnd+0x6c>)
 80090a6:	f240 32b6 	movw	r2, #950	; 0x3b6
 80090aa:	4905      	ldr	r1, [pc, #20]	; (80090c0 <tcp_update_rcv_ann_wnd+0x78>)
 80090ac:	4803      	ldr	r0, [pc, #12]	; (80090bc <tcp_update_rcv_ann_wnd+0x74>)
 80090ae:	f00b fec9 	bl	8014e44 <iprintf>
 80090b2:	e7f3      	b.n	800909c <tcp_update_rcv_ann_wnd+0x54>
 80090b4:	080170f4 	.word	0x080170f4
 80090b8:	08017334 	.word	0x08017334
 80090bc:	08015d2c 	.word	0x08015d2c
 80090c0:	08017358 	.word	0x08017358

080090c4 <tcp_recved>:
{
 80090c4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80090c6:	b1c8      	cbz	r0, 80090fc <tcp_recved+0x38>
 80090c8:	460c      	mov	r4, r1
 80090ca:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80090cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d01b      	beq.n	800910c <tcp_recved+0x48>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80090d4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80090d8:	1919      	adds	r1, r3, r4
 80090da:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80090dc:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 80090e0:	d801      	bhi.n	80090e6 <tcp_recved+0x22>
 80090e2:	428b      	cmp	r3, r1
 80090e4:	d91a      	bls.n	800911c <tcp_recved+0x58>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80090e6:	f44f 6306 	mov.w	r3, #2144	; 0x860
 80090ea:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80090ee:	4628      	mov	r0, r5
 80090f0:	f7ff ffaa 	bl	8009048 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80090f4:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 80090f8:	d213      	bcs.n	8009122 <tcp_recved+0x5e>
}
 80090fa:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80090fc:	4b0e      	ldr	r3, [pc, #56]	; (8009138 <tcp_recved+0x74>)
 80090fe:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009102:	490e      	ldr	r1, [pc, #56]	; (800913c <tcp_recved+0x78>)
 8009104:	480e      	ldr	r0, [pc, #56]	; (8009140 <tcp_recved+0x7c>)
 8009106:	f00b fe9d 	bl	8014e44 <iprintf>
 800910a:	e7f6      	b.n	80090fa <tcp_recved+0x36>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800910c:	4b0a      	ldr	r3, [pc, #40]	; (8009138 <tcp_recved+0x74>)
 800910e:	f240 32d3 	movw	r2, #979	; 0x3d3
 8009112:	490c      	ldr	r1, [pc, #48]	; (8009144 <tcp_recved+0x80>)
 8009114:	480a      	ldr	r0, [pc, #40]	; (8009140 <tcp_recved+0x7c>)
 8009116:	f00b fe95 	bl	8014e44 <iprintf>
 800911a:	e7db      	b.n	80090d4 <tcp_recved+0x10>
    pcb->rcv_wnd = rcv_wnd;
 800911c:	f8a5 1050 	strh.w	r1, [r5, #80]	; 0x50
 8009120:	e7e5      	b.n	80090ee <tcp_recved+0x2a>
    tcp_ack_now(pcb);
 8009122:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 8009126:	f043 0302 	orr.w	r3, r3, #2
 800912a:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
    tcp_output(pcb);
 800912e:	4628      	mov	r0, r5
 8009130:	f003 fc0c 	bl	800c94c <tcp_output>
 8009134:	e7e1      	b.n	80090fa <tcp_recved+0x36>
 8009136:	bf00      	nop
 8009138:	080170f4 	.word	0x080170f4
 800913c:	080170b4 	.word	0x080170b4
 8009140:	08015d2c 	.word	0x08015d2c
 8009144:	080170cc 	.word	0x080170cc

08009148 <tcp_seg_free>:
  if (seg != NULL) {
 8009148:	b150      	cbz	r0, 8009160 <tcp_seg_free+0x18>
{
 800914a:	b510      	push	{r4, lr}
 800914c:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 800914e:	6840      	ldr	r0, [r0, #4]
 8009150:	b108      	cbz	r0, 8009156 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8009152:	f7ff faff 	bl	8008754 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8009156:	4621      	mov	r1, r4
 8009158:	2003      	movs	r0, #3
 800915a:	f7fe fe6d 	bl	8007e38 <memp_free>
}
 800915e:	bd10      	pop	{r4, pc}
 8009160:	4770      	bx	lr

08009162 <tcp_segs_free>:
  while (seg != NULL) {
 8009162:	b138      	cbz	r0, 8009174 <tcp_segs_free+0x12>
{
 8009164:	b510      	push	{r4, lr}
    struct tcp_seg *next = seg->next;
 8009166:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8009168:	f7ff ffee 	bl	8009148 <tcp_seg_free>
    seg = next;
 800916c:	4620      	mov	r0, r4
  while (seg != NULL) {
 800916e:	2c00      	cmp	r4, #0
 8009170:	d1f9      	bne.n	8009166 <tcp_segs_free+0x4>
}
 8009172:	bd10      	pop	{r4, pc}
 8009174:	4770      	bx	lr
	...

08009178 <tcp_seg_copy>:
{
 8009178:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800917a:	4605      	mov	r5, r0
 800917c:	b188      	cbz	r0, 80091a2 <tcp_seg_copy+0x2a>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800917e:	2003      	movs	r0, #3
 8009180:	f7fe fe40 	bl	8007e04 <memp_malloc>
  if (cseg == NULL) {
 8009184:	4604      	mov	r4, r0
 8009186:	b150      	cbz	r0, 800919e <tcp_seg_copy+0x26>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009188:	6828      	ldr	r0, [r5, #0]
 800918a:	6869      	ldr	r1, [r5, #4]
 800918c:	68aa      	ldr	r2, [r5, #8]
 800918e:	68eb      	ldr	r3, [r5, #12]
 8009190:	6020      	str	r0, [r4, #0]
 8009192:	6061      	str	r1, [r4, #4]
 8009194:	60a2      	str	r2, [r4, #8]
 8009196:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8009198:	6860      	ldr	r0, [r4, #4]
 800919a:	f7ff fc49 	bl	8008a30 <pbuf_ref>
}
 800919e:	4620      	mov	r0, r4
 80091a0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80091a2:	4b04      	ldr	r3, [pc, #16]	; (80091b4 <tcp_seg_copy+0x3c>)
 80091a4:	f240 6282 	movw	r2, #1666	; 0x682
 80091a8:	4903      	ldr	r1, [pc, #12]	; (80091b8 <tcp_seg_copy+0x40>)
 80091aa:	4804      	ldr	r0, [pc, #16]	; (80091bc <tcp_seg_copy+0x44>)
 80091ac:	f00b fe4a 	bl	8014e44 <iprintf>
 80091b0:	e7e5      	b.n	800917e <tcp_seg_copy+0x6>
 80091b2:	bf00      	nop
 80091b4:	080170f4 	.word	0x080170f4
 80091b8:	0801714c 	.word	0x0801714c
 80091bc:	08015d2c 	.word	0x08015d2c

080091c0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80091c0:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80091c2:	b130      	cbz	r0, 80091d2 <tcp_next_iss+0x12>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80091c4:	4b07      	ldr	r3, [pc, #28]	; (80091e4 <tcp_next_iss+0x24>)
 80091c6:	6818      	ldr	r0, [r3, #0]
 80091c8:	4a07      	ldr	r2, [pc, #28]	; (80091e8 <tcp_next_iss+0x28>)
 80091ca:	6812      	ldr	r2, [r2, #0]
 80091cc:	4410      	add	r0, r2
 80091ce:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 80091d0:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80091d2:	4b06      	ldr	r3, [pc, #24]	; (80091ec <tcp_next_iss+0x2c>)
 80091d4:	f640 02af 	movw	r2, #2223	; 0x8af
 80091d8:	4905      	ldr	r1, [pc, #20]	; (80091f0 <tcp_next_iss+0x30>)
 80091da:	4806      	ldr	r0, [pc, #24]	; (80091f4 <tcp_next_iss+0x34>)
 80091dc:	f00b fe32 	bl	8014e44 <iprintf>
 80091e0:	e7f0      	b.n	80091c4 <tcp_next_iss+0x4>
 80091e2:	bf00      	nop
 80091e4:	20000010 	.word	0x20000010
 80091e8:	20008614 	.word	0x20008614
 80091ec:	080170f4 	.word	0x080170f4
 80091f0:	08016f98 	.word	0x08016f98
 80091f4:	08015d2c 	.word	0x08015d2c

080091f8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80091f8:	b570      	push	{r4, r5, r6, lr}
 80091fa:	4605      	mov	r5, r0
 80091fc:	460e      	mov	r6, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80091fe:	4614      	mov	r4, r2
 8009200:	b18a      	cbz	r2, 8009226 <tcp_eff_send_mss_netif+0x2e>

#if LWIP_IPV6
#if LWIP_IPV4
  if (IP_IS_V6(dest))
 8009202:	b114      	cbz	r4, 800920a <tcp_eff_send_mss_netif+0x12>
 8009204:	7d23      	ldrb	r3, [r4, #20]
 8009206:	2b06      	cmp	r3, #6
 8009208:	d015      	beq.n	8009236 <tcp_eff_send_mss_netif+0x3e>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800920a:	b30e      	cbz	r6, 8009250 <tcp_eff_send_mss_netif+0x58>
      return sendmss;
    }
    mtu = outif->mtu;
 800920c:	f8b6 00d0 	ldrh.w	r0, [r6, #208]	; 0xd0
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009210:	b1f0      	cbz	r0, 8009250 <tcp_eff_send_mss_netif+0x58>
    u16_t offset;
#if LWIP_IPV6
#if LWIP_IPV4
    if (IP_IS_V6(dest))
 8009212:	b1ac      	cbz	r4, 8009240 <tcp_eff_send_mss_netif+0x48>
 8009214:	7d23      	ldrb	r3, [r4, #20]
 8009216:	2b06      	cmp	r3, #6
 8009218:	d014      	beq.n	8009244 <tcp_eff_send_mss_netif+0x4c>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800921a:	2328      	movs	r3, #40	; 0x28
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800921c:	4298      	cmp	r0, r3
 800921e:	d913      	bls.n	8009248 <tcp_eff_send_mss_netif+0x50>
 8009220:	1ac0      	subs	r0, r0, r3
 8009222:	b280      	uxth	r0, r0
 8009224:	e011      	b.n	800924a <tcp_eff_send_mss_netif+0x52>
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009226:	4b0b      	ldr	r3, [pc, #44]	; (8009254 <tcp_eff_send_mss_netif+0x5c>)
 8009228:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800922c:	490a      	ldr	r1, [pc, #40]	; (8009258 <tcp_eff_send_mss_netif+0x60>)
 800922e:	480b      	ldr	r0, [pc, #44]	; (800925c <tcp_eff_send_mss_netif+0x64>)
 8009230:	f00b fe08 	bl	8014e44 <iprintf>
 8009234:	e7e5      	b.n	8009202 <tcp_eff_send_mss_netif+0xa>
    mtu = nd6_get_destination_mtu(ip_2_ip6(dest), outif);
 8009236:	4631      	mov	r1, r6
 8009238:	4620      	mov	r0, r4
 800923a:	f00b fb99 	bl	8014970 <nd6_get_destination_mtu>
 800923e:	e7e7      	b.n	8009210 <tcp_eff_send_mss_netif+0x18>
      offset = IP_HLEN + TCP_HLEN;
 8009240:	2328      	movs	r3, #40	; 0x28
 8009242:	e7eb      	b.n	800921c <tcp_eff_send_mss_netif+0x24>
      offset = IP6_HLEN + TCP_HLEN;
 8009244:	233c      	movs	r3, #60	; 0x3c
 8009246:	e7e9      	b.n	800921c <tcp_eff_send_mss_netif+0x24>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009248:	2000      	movs	r0, #0
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800924a:	4285      	cmp	r5, r0
 800924c:	bf28      	it	cs
 800924e:	4605      	movcs	r5, r0
  }
  return sendmss;
}
 8009250:	4628      	mov	r0, r5
 8009252:	bd70      	pop	{r4, r5, r6, pc}
 8009254:	080170f4 	.word	0x080170f4
 8009258:	08016ed8 	.word	0x08016ed8
 800925c:	08015d2c 	.word	0x08015d2c

08009260 <tcp_free_ooseq>:
#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
 8009260:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8009264:	b143      	cbz	r3, 8009278 <tcp_free_ooseq+0x18>
{
 8009266:	b510      	push	{r4, lr}
 8009268:	4604      	mov	r4, r0
    tcp_segs_free(pcb->ooseq);
 800926a:	4618      	mov	r0, r3
 800926c:	f7ff ff79 	bl	8009162 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009270:	2300      	movs	r3, #0
 8009272:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009276:	bd10      	pop	{r4, pc}
 8009278:	4770      	bx	lr
	...

0800927c <tcp_pcb_purge>:
{
 800927c:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800927e:	b348      	cbz	r0, 80092d4 <tcp_pcb_purge+0x58>
 8009280:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8009282:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009286:	b323      	cbz	r3, 80092d2 <tcp_pcb_purge+0x56>
 8009288:	2b0a      	cmp	r3, #10
 800928a:	d022      	beq.n	80092d2 <tcp_pcb_purge+0x56>
      pcb->state != TIME_WAIT &&
 800928c:	2b01      	cmp	r3, #1
 800928e:	d020      	beq.n	80092d2 <tcp_pcb_purge+0x56>
    if (pcb->refused_data != NULL) {
 8009290:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
 8009294:	b120      	cbz	r0, 80092a0 <tcp_pcb_purge+0x24>
      pbuf_free(pcb->refused_data);
 8009296:	f7ff fa5d 	bl	8008754 <pbuf_free>
      pcb->refused_data = NULL;
 800929a:	2300      	movs	r3, #0
 800929c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    if (pcb->ooseq != NULL) {
 80092a0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80092a4:	b113      	cbz	r3, 80092ac <tcp_pcb_purge+0x30>
      tcp_free_ooseq(pcb);
 80092a6:	4620      	mov	r0, r4
 80092a8:	f7ff ffda 	bl	8009260 <tcp_free_ooseq>
    pcb->rtime = -1;
 80092ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80092b0:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
    tcp_segs_free(pcb->unsent);
 80092b4:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80092b8:	f7ff ff53 	bl	8009162 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80092bc:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80092c0:	f7ff ff4f 	bl	8009162 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80092c4:	2300      	movs	r3, #0
 80092c6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 80092ca:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    pcb->unsent_oversize = 0;
 80092ce:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
}
 80092d2:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80092d4:	4b03      	ldr	r3, [pc, #12]	; (80092e4 <tcp_pcb_purge+0x68>)
 80092d6:	f640 0251 	movw	r2, #2129	; 0x851
 80092da:	4903      	ldr	r1, [pc, #12]	; (80092e8 <tcp_pcb_purge+0x6c>)
 80092dc:	4803      	ldr	r0, [pc, #12]	; (80092ec <tcp_pcb_purge+0x70>)
 80092de:	f00b fdb1 	bl	8014e44 <iprintf>
 80092e2:	e7f6      	b.n	80092d2 <tcp_pcb_purge+0x56>
 80092e4:	080170f4 	.word	0x080170f4
 80092e8:	08016fc4 	.word	0x08016fc4
 80092ec:	08015d2c 	.word	0x08015d2c

080092f0 <tcp_pcb_remove>:
{
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80092f4:	460c      	mov	r4, r1
 80092f6:	b149      	cbz	r1, 800930c <tcp_pcb_remove+0x1c>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80092f8:	b185      	cbz	r5, 800931c <tcp_pcb_remove+0x2c>
  TCP_RMV(pcblist, pcb);
 80092fa:	682b      	ldr	r3, [r5, #0]
 80092fc:	42a3      	cmp	r3, r4
 80092fe:	d015      	beq.n	800932c <tcp_pcb_remove+0x3c>
 8009300:	b1cb      	cbz	r3, 8009336 <tcp_pcb_remove+0x46>
 8009302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009304:	42a2      	cmp	r2, r4
 8009306:	d014      	beq.n	8009332 <tcp_pcb_remove+0x42>
 8009308:	4613      	mov	r3, r2
 800930a:	e7f9      	b.n	8009300 <tcp_pcb_remove+0x10>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800930c:	4b29      	ldr	r3, [pc, #164]	; (80093b4 <tcp_pcb_remove+0xc4>)
 800930e:	f640 0283 	movw	r2, #2179	; 0x883
 8009312:	4929      	ldr	r1, [pc, #164]	; (80093b8 <tcp_pcb_remove+0xc8>)
 8009314:	4829      	ldr	r0, [pc, #164]	; (80093bc <tcp_pcb_remove+0xcc>)
 8009316:	f00b fd95 	bl	8014e44 <iprintf>
 800931a:	e7ed      	b.n	80092f8 <tcp_pcb_remove+0x8>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800931c:	4b25      	ldr	r3, [pc, #148]	; (80093b4 <tcp_pcb_remove+0xc4>)
 800931e:	f640 0284 	movw	r2, #2180	; 0x884
 8009322:	4927      	ldr	r1, [pc, #156]	; (80093c0 <tcp_pcb_remove+0xd0>)
 8009324:	4825      	ldr	r0, [pc, #148]	; (80093bc <tcp_pcb_remove+0xcc>)
 8009326:	f00b fd8d 	bl	8014e44 <iprintf>
 800932a:	e7e6      	b.n	80092fa <tcp_pcb_remove+0xa>
  TCP_RMV(pcblist, pcb);
 800932c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800932e:	602b      	str	r3, [r5, #0]
 8009330:	e001      	b.n	8009336 <tcp_pcb_remove+0x46>
 8009332:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009334:	635a      	str	r2, [r3, #52]	; 0x34
 8009336:	2300      	movs	r3, #0
 8009338:	6363      	str	r3, [r4, #52]	; 0x34
  tcp_pcb_purge(pcb);
 800933a:	4620      	mov	r0, r4
 800933c:	f7ff ff9e 	bl	800927c <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 8009340:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009344:	2b0a      	cmp	r3, #10
 8009346:	d006      	beq.n	8009356 <tcp_pcb_remove+0x66>
 8009348:	2b01      	cmp	r3, #1
 800934a:	d004      	beq.n	8009356 <tcp_pcb_remove+0x66>
      (pcb->flags & TF_ACK_DELAY)) {
 800934c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
      (pcb->state != LISTEN) &&
 8009350:	f013 0f01 	tst.w	r3, #1
 8009354:	d126      	bne.n	80093a4 <tcp_pcb_remove+0xb4>
  if (pcb->state != LISTEN) {
 8009356:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800935a:	2b01      	cmp	r3, #1
 800935c:	d01d      	beq.n	800939a <tcp_pcb_remove+0xaa>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800935e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009362:	b133      	cbz	r3, 8009372 <tcp_pcb_remove+0x82>
 8009364:	4b13      	ldr	r3, [pc, #76]	; (80093b4 <tcp_pcb_remove+0xc4>)
 8009366:	f640 0293 	movw	r2, #2195	; 0x893
 800936a:	4916      	ldr	r1, [pc, #88]	; (80093c4 <tcp_pcb_remove+0xd4>)
 800936c:	4813      	ldr	r0, [pc, #76]	; (80093bc <tcp_pcb_remove+0xcc>)
 800936e:	f00b fd69 	bl	8014e44 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009372:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009376:	b133      	cbz	r3, 8009386 <tcp_pcb_remove+0x96>
 8009378:	4b0e      	ldr	r3, [pc, #56]	; (80093b4 <tcp_pcb_remove+0xc4>)
 800937a:	f640 0294 	movw	r2, #2196	; 0x894
 800937e:	4912      	ldr	r1, [pc, #72]	; (80093c8 <tcp_pcb_remove+0xd8>)
 8009380:	480e      	ldr	r0, [pc, #56]	; (80093bc <tcp_pcb_remove+0xcc>)
 8009382:	f00b fd5f 	bl	8014e44 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009386:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800938a:	b133      	cbz	r3, 800939a <tcp_pcb_remove+0xaa>
 800938c:	4b09      	ldr	r3, [pc, #36]	; (80093b4 <tcp_pcb_remove+0xc4>)
 800938e:	f640 0296 	movw	r2, #2198	; 0x896
 8009392:	490e      	ldr	r1, [pc, #56]	; (80093cc <tcp_pcb_remove+0xdc>)
 8009394:	4809      	ldr	r0, [pc, #36]	; (80093bc <tcp_pcb_remove+0xcc>)
 8009396:	f00b fd55 	bl	8014e44 <iprintf>
  pcb->state = CLOSED;
 800939a:	2300      	movs	r3, #0
 800939c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  pcb->local_port = 0;
 80093a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
 80093a2:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 80093a4:	f043 0302 	orr.w	r3, r3, #2
 80093a8:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    tcp_output(pcb);
 80093ac:	4620      	mov	r0, r4
 80093ae:	f003 facd 	bl	800c94c <tcp_output>
 80093b2:	e7d0      	b.n	8009356 <tcp_pcb_remove+0x66>
 80093b4:	080170f4 	.word	0x080170f4
 80093b8:	08016fe0 	.word	0x08016fe0
 80093bc:	08015d2c 	.word	0x08015d2c
 80093c0:	08016ffc 	.word	0x08016ffc
 80093c4:	0801701c 	.word	0x0801701c
 80093c8:	08017034 	.word	0x08017034
 80093cc:	08017050 	.word	0x08017050

080093d0 <tcp_abandon>:
{
 80093d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d4:	b084      	sub	sp, #16
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80093d6:	b308      	cbz	r0, 800941c <tcp_abandon+0x4c>
 80093d8:	460d      	mov	r5, r1
 80093da:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80093dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d023      	beq.n	800942c <tcp_abandon+0x5c>
  if (pcb->state == TIME_WAIT) {
 80093e4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80093e8:	2b0a      	cmp	r3, #10
 80093ea:	d027      	beq.n	800943c <tcp_abandon+0x6c>
    seqno = pcb->snd_nxt;
 80093ec:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
    ackno = pcb->rcv_nxt;
 80093f0:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    errf = pcb->errf;
 80093f4:	f8d4 60b8 	ldr.w	r6, [r4, #184]	; 0xb8
    errf_arg = pcb->callback_arg;
 80093f8:	6ba7      	ldr	r7, [r4, #56]	; 0x38
    if (pcb->state == CLOSED) {
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d14a      	bne.n	8009494 <tcp_abandon+0xc4>
      if (pcb->local_port != 0) {
 80093fe:	f8b4 a03e 	ldrh.w	sl, [r4, #62]	; 0x3e
 8009402:	f1ba 0f00 	cmp.w	sl, #0
 8009406:	d04f      	beq.n	80094a8 <tcp_abandon+0xd8>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009408:	4b30      	ldr	r3, [pc, #192]	; (80094cc <tcp_abandon+0xfc>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	42a3      	cmp	r3, r4
 800940e:	d01d      	beq.n	800944c <tcp_abandon+0x7c>
 8009410:	b313      	cbz	r3, 8009458 <tcp_abandon+0x88>
 8009412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009414:	42a2      	cmp	r2, r4
 8009416:	d01d      	beq.n	8009454 <tcp_abandon+0x84>
 8009418:	4613      	mov	r3, r2
 800941a:	e7f9      	b.n	8009410 <tcp_abandon+0x40>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800941c:	4b2c      	ldr	r3, [pc, #176]	; (80094d0 <tcp_abandon+0x100>)
 800941e:	f240 223d 	movw	r2, #573	; 0x23d
 8009422:	492c      	ldr	r1, [pc, #176]	; (80094d4 <tcp_abandon+0x104>)
 8009424:	482c      	ldr	r0, [pc, #176]	; (80094d8 <tcp_abandon+0x108>)
 8009426:	f00b fd0d 	bl	8014e44 <iprintf>
 800942a:	e030      	b.n	800948e <tcp_abandon+0xbe>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800942c:	4b28      	ldr	r3, [pc, #160]	; (80094d0 <tcp_abandon+0x100>)
 800942e:	f240 2241 	movw	r2, #577	; 0x241
 8009432:	492a      	ldr	r1, [pc, #168]	; (80094dc <tcp_abandon+0x10c>)
 8009434:	4828      	ldr	r0, [pc, #160]	; (80094d8 <tcp_abandon+0x108>)
 8009436:	f00b fd05 	bl	8014e44 <iprintf>
 800943a:	e7d3      	b.n	80093e4 <tcp_abandon+0x14>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800943c:	4621      	mov	r1, r4
 800943e:	4828      	ldr	r0, [pc, #160]	; (80094e0 <tcp_abandon+0x110>)
 8009440:	f7ff ff56 	bl	80092f0 <tcp_pcb_remove>
    tcp_free(pcb);
 8009444:	4620      	mov	r0, r4
 8009446:	f7ff fde7 	bl	8009018 <tcp_free>
 800944a:	e020      	b.n	800948e <tcp_abandon+0xbe>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800944c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800944e:	4b1f      	ldr	r3, [pc, #124]	; (80094cc <tcp_abandon+0xfc>)
 8009450:	601a      	str	r2, [r3, #0]
 8009452:	e001      	b.n	8009458 <tcp_abandon+0x88>
 8009454:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009456:	635a      	str	r2, [r3, #52]	; 0x34
 8009458:	2500      	movs	r5, #0
 800945a:	6365      	str	r5, [r4, #52]	; 0x34
    u16_t local_port = 0;
 800945c:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 800945e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8009462:	b108      	cbz	r0, 8009468 <tcp_abandon+0x98>
      tcp_segs_free(pcb->unacked);
 8009464:	f7ff fe7d 	bl	8009162 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8009468:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800946c:	b108      	cbz	r0, 8009472 <tcp_abandon+0xa2>
      tcp_segs_free(pcb->unsent);
 800946e:	f7ff fe78 	bl	8009162 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8009472:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8009476:	b108      	cbz	r0, 800947c <tcp_abandon+0xac>
      tcp_segs_free(pcb->ooseq);
 8009478:	f7ff fe73 	bl	8009162 <tcp_segs_free>
    if (send_rst) {
 800947c:	b9b5      	cbnz	r5, 80094ac <tcp_abandon+0xdc>
    tcp_free(pcb);
 800947e:	4620      	mov	r0, r4
 8009480:	f7ff fdca 	bl	8009018 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009484:	b11e      	cbz	r6, 800948e <tcp_abandon+0xbe>
 8009486:	f06f 010c 	mvn.w	r1, #12
 800948a:	4638      	mov	r0, r7
 800948c:	47b0      	blx	r6
}
 800948e:	b004      	add	sp, #16
 8009490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 8009494:	f8b4 a03e 	ldrh.w	sl, [r4, #62]	; 0x3e
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009498:	4621      	mov	r1, r4
 800949a:	4812      	ldr	r0, [pc, #72]	; (80094e4 <tcp_abandon+0x114>)
 800949c:	f7ff ff28 	bl	80092f0 <tcp_pcb_remove>
 80094a0:	4b11      	ldr	r3, [pc, #68]	; (80094e8 <tcp_abandon+0x118>)
 80094a2:	2201      	movs	r2, #1
 80094a4:	701a      	strb	r2, [r3, #0]
 80094a6:	e7da      	b.n	800945e <tcp_abandon+0x8e>
    int send_rst = 0;
 80094a8:	2500      	movs	r5, #0
 80094aa:	e7d8      	b.n	800945e <tcp_abandon+0x8e>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80094ac:	f104 0318 	add.w	r3, r4, #24
 80094b0:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 80094b4:	9202      	str	r2, [sp, #8]
 80094b6:	f8cd a004 	str.w	sl, [sp, #4]
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	4623      	mov	r3, r4
 80094be:	464a      	mov	r2, r9
 80094c0:	4641      	mov	r1, r8
 80094c2:	4620      	mov	r0, r4
 80094c4:	f003 f9b6 	bl	800c834 <tcp_rst>
 80094c8:	e7d9      	b.n	800947e <tcp_abandon+0xae>
 80094ca:	bf00      	nop
 80094cc:	2000861c 	.word	0x2000861c
 80094d0:	080170f4 	.word	0x080170f4
 80094d4:	08016e24 	.word	0x08016e24
 80094d8:	08015d2c 	.word	0x08015d2c
 80094dc:	08016e40 	.word	0x08016e40
 80094e0:	20008620 	.word	0x20008620
 80094e4:	20008610 	.word	0x20008610
 80094e8:	2000860c 	.word	0x2000860c

080094ec <tcp_abort>:
{
 80094ec:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 80094ee:	2101      	movs	r1, #1
 80094f0:	f7ff ff6e 	bl	80093d0 <tcp_abandon>
}
 80094f4:	bd08      	pop	{r3, pc}
	...

080094f8 <tcp_kill_timewait>:
{
 80094f8:	b510      	push	{r4, lr}
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80094fa:	4b0a      	ldr	r3, [pc, #40]	; (8009524 <tcp_kill_timewait+0x2c>)
 80094fc:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 80094fe:	2400      	movs	r4, #0
  inactive = NULL;
 8009500:	4620      	mov	r0, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009502:	e000      	b.n	8009506 <tcp_kill_timewait+0xe>
 8009504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009506:	b143      	cbz	r3, 800951a <tcp_kill_timewait+0x22>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009508:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800950a:	4a07      	ldr	r2, [pc, #28]	; (8009528 <tcp_kill_timewait+0x30>)
 800950c:	6812      	ldr	r2, [r2, #0]
 800950e:	1a52      	subs	r2, r2, r1
 8009510:	42a2      	cmp	r2, r4
 8009512:	d3f7      	bcc.n	8009504 <tcp_kill_timewait+0xc>
      inactivity = tcp_ticks - pcb->tmr;
 8009514:	4614      	mov	r4, r2
      inactive = pcb;
 8009516:	4618      	mov	r0, r3
 8009518:	e7f4      	b.n	8009504 <tcp_kill_timewait+0xc>
  if (inactive != NULL) {
 800951a:	b108      	cbz	r0, 8009520 <tcp_kill_timewait+0x28>
    tcp_abort(inactive);
 800951c:	f7ff ffe6 	bl	80094ec <tcp_abort>
}
 8009520:	bd10      	pop	{r4, pc}
 8009522:	bf00      	nop
 8009524:	20008620 	.word	0x20008620
 8009528:	20008614 	.word	0x20008614

0800952c <tcp_kill_prio>:
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800952c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8009530:	d101      	bne.n	8009536 <tcp_kill_prio+0xa>
  if (mprio == 0) {
 8009532:	b908      	cbnz	r0, 8009538 <tcp_kill_prio+0xc>
 8009534:	4770      	bx	lr
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009536:	207f      	movs	r0, #127	; 0x7f
{
 8009538:	b570      	push	{r4, r5, r6, lr}
  mprio--;
 800953a:	3801      	subs	r0, #1
 800953c:	b2c3      	uxtb	r3, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800953e:	4a0e      	ldr	r2, [pc, #56]	; (8009578 <tcp_kill_prio+0x4c>)
 8009540:	6812      	ldr	r2, [r2, #0]
  inactivity = 0;
 8009542:	2100      	movs	r1, #0
  inactive = NULL;
 8009544:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009546:	b91a      	cbnz	r2, 8009550 <tcp_kill_prio+0x24>
  if (inactive != NULL) {
 8009548:	b108      	cbz	r0, 800954e <tcp_kill_prio+0x22>
    tcp_abort(inactive);
 800954a:	f7ff ffcf 	bl	80094ec <tcp_abort>
}
 800954e:	bd70      	pop	{r4, r5, r6, pc}
    if ((pcb->prio < mprio) ||
 8009550:	f892 403d 	ldrb.w	r4, [r2, #61]	; 0x3d
 8009554:	429c      	cmp	r4, r3
 8009556:	d306      	bcc.n	8009566 <tcp_kill_prio+0x3a>
 8009558:	d10b      	bne.n	8009572 <tcp_kill_prio+0x46>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800955a:	6c96      	ldr	r6, [r2, #72]	; 0x48
 800955c:	4d07      	ldr	r5, [pc, #28]	; (800957c <tcp_kill_prio+0x50>)
 800955e:	682d      	ldr	r5, [r5, #0]
 8009560:	1bad      	subs	r5, r5, r6
 8009562:	428d      	cmp	r5, r1
 8009564:	d305      	bcc.n	8009572 <tcp_kill_prio+0x46>
      inactivity = tcp_ticks - pcb->tmr;
 8009566:	4b05      	ldr	r3, [pc, #20]	; (800957c <tcp_kill_prio+0x50>)
 8009568:	6819      	ldr	r1, [r3, #0]
 800956a:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800956c:	1ac9      	subs	r1, r1, r3
      mprio      = pcb->prio;
 800956e:	4623      	mov	r3, r4
      inactive   = pcb;
 8009570:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009572:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009574:	e7e7      	b.n	8009546 <tcp_kill_prio+0x1a>
 8009576:	bf00      	nop
 8009578:	20008610 	.word	0x20008610
 800957c:	20008614 	.word	0x20008614

08009580 <tcp_netif_ip_addr_changed_pcblist>:
{
 8009580:	b570      	push	{r4, r5, r6, lr}
 8009582:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009584:	4605      	mov	r5, r0
 8009586:	b970      	cbnz	r0, 80095a6 <tcp_netif_ip_addr_changed_pcblist+0x26>
 8009588:	4b1e      	ldr	r3, [pc, #120]	; (8009604 <tcp_netif_ip_addr_changed_pcblist+0x84>)
 800958a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800958e:	491e      	ldr	r1, [pc, #120]	; (8009608 <tcp_netif_ip_addr_changed_pcblist+0x88>)
 8009590:	481e      	ldr	r0, [pc, #120]	; (800960c <tcp_netif_ip_addr_changed_pcblist+0x8c>)
 8009592:	f00b fc57 	bl	8014e44 <iprintf>
 8009596:	e006      	b.n	80095a6 <tcp_netif_ip_addr_changed_pcblist+0x26>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009598:	6822      	ldr	r2, [r4, #0]
 800959a:	682b      	ldr	r3, [r5, #0]
 800959c:	429a      	cmp	r2, r3
 800959e:	d010      	beq.n	80095c2 <tcp_netif_ip_addr_changed_pcblist+0x42>
 80095a0:	2300      	movs	r3, #0
 80095a2:	bb43      	cbnz	r3, 80095f6 <tcp_netif_ip_addr_changed_pcblist+0x76>
      pcb = pcb->next;
 80095a4:	6b64      	ldr	r4, [r4, #52]	; 0x34
  while (pcb != NULL) {
 80095a6:	b364      	cbz	r4, 8009602 <tcp_netif_ip_addr_changed_pcblist+0x82>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80095a8:	7d23      	ldrb	r3, [r4, #20]
 80095aa:	7d2a      	ldrb	r2, [r5, #20]
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d1f9      	bne.n	80095a4 <tcp_netif_ip_addr_changed_pcblist+0x24>
 80095b0:	2b06      	cmp	r3, #6
 80095b2:	d0f1      	beq.n	8009598 <tcp_netif_ip_addr_changed_pcblist+0x18>
 80095b4:	6823      	ldr	r3, [r4, #0]
 80095b6:	682a      	ldr	r2, [r5, #0]
 80095b8:	4293      	cmp	r3, r2
 80095ba:	bf14      	ite	ne
 80095bc:	2300      	movne	r3, #0
 80095be:	2301      	moveq	r3, #1
 80095c0:	e7ef      	b.n	80095a2 <tcp_netif_ip_addr_changed_pcblist+0x22>
 80095c2:	6862      	ldr	r2, [r4, #4]
 80095c4:	686b      	ldr	r3, [r5, #4]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d001      	beq.n	80095ce <tcp_netif_ip_addr_changed_pcblist+0x4e>
 80095ca:	2300      	movs	r3, #0
 80095cc:	e7e9      	b.n	80095a2 <tcp_netif_ip_addr_changed_pcblist+0x22>
 80095ce:	68a2      	ldr	r2, [r4, #8]
 80095d0:	68ab      	ldr	r3, [r5, #8]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d001      	beq.n	80095da <tcp_netif_ip_addr_changed_pcblist+0x5a>
 80095d6:	2300      	movs	r3, #0
 80095d8:	e7e3      	b.n	80095a2 <tcp_netif_ip_addr_changed_pcblist+0x22>
 80095da:	68e2      	ldr	r2, [r4, #12]
 80095dc:	68eb      	ldr	r3, [r5, #12]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d001      	beq.n	80095e6 <tcp_netif_ip_addr_changed_pcblist+0x66>
 80095e2:	2300      	movs	r3, #0
 80095e4:	e7dd      	b.n	80095a2 <tcp_netif_ip_addr_changed_pcblist+0x22>
 80095e6:	7c22      	ldrb	r2, [r4, #16]
 80095e8:	7c2b      	ldrb	r3, [r5, #16]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d001      	beq.n	80095f2 <tcp_netif_ip_addr_changed_pcblist+0x72>
 80095ee:	2300      	movs	r3, #0
 80095f0:	e7d7      	b.n	80095a2 <tcp_netif_ip_addr_changed_pcblist+0x22>
 80095f2:	2301      	movs	r3, #1
 80095f4:	e7d5      	b.n	80095a2 <tcp_netif_ip_addr_changed_pcblist+0x22>
      struct tcp_pcb *next = pcb->next;
 80095f6:	6b66      	ldr	r6, [r4, #52]	; 0x34
      tcp_abort(pcb);
 80095f8:	4620      	mov	r0, r4
 80095fa:	f7ff ff77 	bl	80094ec <tcp_abort>
      pcb = next;
 80095fe:	4634      	mov	r4, r6
 8009600:	e7d1      	b.n	80095a6 <tcp_netif_ip_addr_changed_pcblist+0x26>
}
 8009602:	bd70      	pop	{r4, r5, r6, pc}
 8009604:	080170f4 	.word	0x080170f4
 8009608:	08016f64 	.word	0x08016f64
 800960c:	08015d2c 	.word	0x08015d2c

08009610 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 8009610:	2800      	cmp	r0, #0
 8009612:	f000 809a 	beq.w	800974a <tcp_netif_ip_addr_changed+0x13a>
{
 8009616:	b538      	push	{r3, r4, r5, lr}
 8009618:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 800961a:	7d02      	ldrb	r2, [r0, #20]
 800961c:	2a06      	cmp	r2, #6
 800961e:	d004      	beq.n	800962a <tcp_netif_ip_addr_changed+0x1a>
 8009620:	b1b8      	cbz	r0, 8009652 <tcp_netif_ip_addr_changed+0x42>
 8009622:	6802      	ldr	r2, [r0, #0]
 8009624:	b9ba      	cbnz	r2, 8009656 <tcp_netif_ip_addr_changed+0x46>
 8009626:	b9c2      	cbnz	r2, 800965a <tcp_netif_ip_addr_changed+0x4a>
}
 8009628:	bd38      	pop	{r3, r4, r5, pc}
  if (!ip_addr_isany(old_addr)) {
 800962a:	b150      	cbz	r0, 8009642 <tcp_netif_ip_addr_changed+0x32>
 800962c:	6802      	ldr	r2, [r0, #0]
 800962e:	b952      	cbnz	r2, 8009646 <tcp_netif_ip_addr_changed+0x36>
 8009630:	6842      	ldr	r2, [r0, #4]
 8009632:	b952      	cbnz	r2, 800964a <tcp_netif_ip_addr_changed+0x3a>
 8009634:	6882      	ldr	r2, [r0, #8]
 8009636:	b952      	cbnz	r2, 800964e <tcp_netif_ip_addr_changed+0x3e>
 8009638:	68c2      	ldr	r2, [r0, #12]
 800963a:	2a00      	cmp	r2, #0
 800963c:	d0f3      	beq.n	8009626 <tcp_netif_ip_addr_changed+0x16>
 800963e:	2201      	movs	r2, #1
 8009640:	e7f1      	b.n	8009626 <tcp_netif_ip_addr_changed+0x16>
 8009642:	2200      	movs	r2, #0
 8009644:	e7ef      	b.n	8009626 <tcp_netif_ip_addr_changed+0x16>
 8009646:	2201      	movs	r2, #1
 8009648:	e7ed      	b.n	8009626 <tcp_netif_ip_addr_changed+0x16>
 800964a:	2201      	movs	r2, #1
 800964c:	e7eb      	b.n	8009626 <tcp_netif_ip_addr_changed+0x16>
 800964e:	2201      	movs	r2, #1
 8009650:	e7e9      	b.n	8009626 <tcp_netif_ip_addr_changed+0x16>
 8009652:	2200      	movs	r2, #0
 8009654:	e7e7      	b.n	8009626 <tcp_netif_ip_addr_changed+0x16>
 8009656:	2201      	movs	r2, #1
 8009658:	e7e5      	b.n	8009626 <tcp_netif_ip_addr_changed+0x16>
 800965a:	460d      	mov	r5, r1
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800965c:	4b3b      	ldr	r3, [pc, #236]	; (800974c <tcp_netif_ip_addr_changed+0x13c>)
 800965e:	6819      	ldr	r1, [r3, #0]
 8009660:	4620      	mov	r0, r4
 8009662:	f7ff ff8d 	bl	8009580 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009666:	4b3a      	ldr	r3, [pc, #232]	; (8009750 <tcp_netif_ip_addr_changed+0x140>)
 8009668:	6819      	ldr	r1, [r3, #0]
 800966a:	4620      	mov	r0, r4
 800966c:	f7ff ff88 	bl	8009580 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8009670:	2d00      	cmp	r5, #0
 8009672:	d0d9      	beq.n	8009628 <tcp_netif_ip_addr_changed+0x18>
 8009674:	7d2b      	ldrb	r3, [r5, #20]
 8009676:	2b06      	cmp	r3, #6
 8009678:	d007      	beq.n	800968a <tcp_netif_ip_addr_changed+0x7a>
 800967a:	b1d5      	cbz	r5, 80096b2 <tcp_netif_ip_addr_changed+0xa2>
 800967c:	682b      	ldr	r3, [r5, #0]
 800967e:	b9d3      	cbnz	r3, 80096b6 <tcp_netif_ip_addr_changed+0xa6>
 8009680:	2b00      	cmp	r3, #0
 8009682:	d0d1      	beq.n	8009628 <tcp_netif_ip_addr_changed+0x18>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009684:	4b33      	ldr	r3, [pc, #204]	; (8009754 <tcp_netif_ip_addr_changed+0x144>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	e042      	b.n	8009710 <tcp_netif_ip_addr_changed+0x100>
    if (!ip_addr_isany(new_addr)) {
 800968a:	b155      	cbz	r5, 80096a2 <tcp_netif_ip_addr_changed+0x92>
 800968c:	682b      	ldr	r3, [r5, #0]
 800968e:	b953      	cbnz	r3, 80096a6 <tcp_netif_ip_addr_changed+0x96>
 8009690:	686b      	ldr	r3, [r5, #4]
 8009692:	b953      	cbnz	r3, 80096aa <tcp_netif_ip_addr_changed+0x9a>
 8009694:	68ab      	ldr	r3, [r5, #8]
 8009696:	b953      	cbnz	r3, 80096ae <tcp_netif_ip_addr_changed+0x9e>
 8009698:	68eb      	ldr	r3, [r5, #12]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d0f0      	beq.n	8009680 <tcp_netif_ip_addr_changed+0x70>
 800969e:	2301      	movs	r3, #1
 80096a0:	e7ee      	b.n	8009680 <tcp_netif_ip_addr_changed+0x70>
 80096a2:	2300      	movs	r3, #0
 80096a4:	e7ec      	b.n	8009680 <tcp_netif_ip_addr_changed+0x70>
 80096a6:	2301      	movs	r3, #1
 80096a8:	e7ea      	b.n	8009680 <tcp_netif_ip_addr_changed+0x70>
 80096aa:	2301      	movs	r3, #1
 80096ac:	e7e8      	b.n	8009680 <tcp_netif_ip_addr_changed+0x70>
 80096ae:	2301      	movs	r3, #1
 80096b0:	e7e6      	b.n	8009680 <tcp_netif_ip_addr_changed+0x70>
 80096b2:	2300      	movs	r3, #0
 80096b4:	e7e4      	b.n	8009680 <tcp_netif_ip_addr_changed+0x70>
 80096b6:	2301      	movs	r3, #1
 80096b8:	e7e2      	b.n	8009680 <tcp_netif_ip_addr_changed+0x70>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80096ba:	6819      	ldr	r1, [r3, #0]
 80096bc:	6822      	ldr	r2, [r4, #0]
 80096be:	4291      	cmp	r1, r2
 80096c0:	d001      	beq.n	80096c6 <tcp_netif_ip_addr_changed+0xb6>
 80096c2:	2200      	movs	r2, #0
 80096c4:	e032      	b.n	800972c <tcp_netif_ip_addr_changed+0x11c>
 80096c6:	6859      	ldr	r1, [r3, #4]
 80096c8:	6862      	ldr	r2, [r4, #4]
 80096ca:	4291      	cmp	r1, r2
 80096cc:	d001      	beq.n	80096d2 <tcp_netif_ip_addr_changed+0xc2>
 80096ce:	2200      	movs	r2, #0
 80096d0:	e02c      	b.n	800972c <tcp_netif_ip_addr_changed+0x11c>
 80096d2:	6899      	ldr	r1, [r3, #8]
 80096d4:	68a2      	ldr	r2, [r4, #8]
 80096d6:	4291      	cmp	r1, r2
 80096d8:	d001      	beq.n	80096de <tcp_netif_ip_addr_changed+0xce>
 80096da:	2200      	movs	r2, #0
 80096dc:	e026      	b.n	800972c <tcp_netif_ip_addr_changed+0x11c>
 80096de:	68d9      	ldr	r1, [r3, #12]
 80096e0:	68e2      	ldr	r2, [r4, #12]
 80096e2:	4291      	cmp	r1, r2
 80096e4:	d001      	beq.n	80096ea <tcp_netif_ip_addr_changed+0xda>
 80096e6:	2200      	movs	r2, #0
 80096e8:	e020      	b.n	800972c <tcp_netif_ip_addr_changed+0x11c>
 80096ea:	7c19      	ldrb	r1, [r3, #16]
 80096ec:	7c22      	ldrb	r2, [r4, #16]
 80096ee:	4291      	cmp	r1, r2
 80096f0:	d001      	beq.n	80096f6 <tcp_netif_ip_addr_changed+0xe6>
 80096f2:	2200      	movs	r2, #0
 80096f4:	e01a      	b.n	800972c <tcp_netif_ip_addr_changed+0x11c>
 80096f6:	2201      	movs	r2, #1
 80096f8:	e018      	b.n	800972c <tcp_netif_ip_addr_changed+0x11c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80096fa:	682a      	ldr	r2, [r5, #0]
 80096fc:	601a      	str	r2, [r3, #0]
 80096fe:	686a      	ldr	r2, [r5, #4]
 8009700:	605a      	str	r2, [r3, #4]
 8009702:	68aa      	ldr	r2, [r5, #8]
 8009704:	609a      	str	r2, [r3, #8]
 8009706:	68ea      	ldr	r2, [r5, #12]
 8009708:	60da      	str	r2, [r3, #12]
 800970a:	7c2a      	ldrb	r2, [r5, #16]
 800970c:	741a      	strb	r2, [r3, #16]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800970e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009710:	2b00      	cmp	r3, #0
 8009712:	d089      	beq.n	8009628 <tcp_netif_ip_addr_changed+0x18>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009714:	7d1a      	ldrb	r2, [r3, #20]
 8009716:	7d21      	ldrb	r1, [r4, #20]
 8009718:	428a      	cmp	r2, r1
 800971a:	d1f8      	bne.n	800970e <tcp_netif_ip_addr_changed+0xfe>
 800971c:	2a06      	cmp	r2, #6
 800971e:	d0cc      	beq.n	80096ba <tcp_netif_ip_addr_changed+0xaa>
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	6821      	ldr	r1, [r4, #0]
 8009724:	428a      	cmp	r2, r1
 8009726:	bf14      	ite	ne
 8009728:	2200      	movne	r2, #0
 800972a:	2201      	moveq	r2, #1
 800972c:	2a00      	cmp	r2, #0
 800972e:	d0ee      	beq.n	800970e <tcp_netif_ip_addr_changed+0xfe>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009730:	7d2a      	ldrb	r2, [r5, #20]
 8009732:	751a      	strb	r2, [r3, #20]
 8009734:	7d2a      	ldrb	r2, [r5, #20]
 8009736:	2a06      	cmp	r2, #6
 8009738:	d0df      	beq.n	80096fa <tcp_netif_ip_addr_changed+0xea>
 800973a:	682a      	ldr	r2, [r5, #0]
 800973c:	601a      	str	r2, [r3, #0]
 800973e:	2200      	movs	r2, #0
 8009740:	60da      	str	r2, [r3, #12]
 8009742:	609a      	str	r2, [r3, #8]
 8009744:	605a      	str	r2, [r3, #4]
 8009746:	741a      	strb	r2, [r3, #16]
 8009748:	e7e1      	b.n	800970e <tcp_netif_ip_addr_changed+0xfe>
 800974a:	4770      	bx	lr
 800974c:	20008610 	.word	0x20008610
 8009750:	2000861c 	.word	0x2000861c
 8009754:	20008618 	.word	0x20008618

08009758 <tcp_kill_state>:
{
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800975c:	f1a0 0308 	sub.w	r3, r0, #8
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b01      	cmp	r3, #1
 8009764:	d804      	bhi.n	8009770 <tcp_kill_state+0x18>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009766:	4b10      	ldr	r3, [pc, #64]	; (80097a8 <tcp_kill_state+0x50>)
 8009768:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 800976a:	2100      	movs	r1, #0
  inactive = NULL;
 800976c:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800976e:	e008      	b.n	8009782 <tcp_kill_state+0x2a>
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009770:	4b0e      	ldr	r3, [pc, #56]	; (80097ac <tcp_kill_state+0x54>)
 8009772:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009776:	490e      	ldr	r1, [pc, #56]	; (80097b0 <tcp_kill_state+0x58>)
 8009778:	480e      	ldr	r0, [pc, #56]	; (80097b4 <tcp_kill_state+0x5c>)
 800977a:	f00b fb63 	bl	8014e44 <iprintf>
 800977e:	e7f2      	b.n	8009766 <tcp_kill_state+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009782:	b163      	cbz	r3, 800979e <tcp_kill_state+0x46>
    if (pcb->state == state) {
 8009784:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8009788:	42a2      	cmp	r2, r4
 800978a:	d1f9      	bne.n	8009780 <tcp_kill_state+0x28>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800978c:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 800978e:	4a0a      	ldr	r2, [pc, #40]	; (80097b8 <tcp_kill_state+0x60>)
 8009790:	6812      	ldr	r2, [r2, #0]
 8009792:	1b52      	subs	r2, r2, r5
 8009794:	428a      	cmp	r2, r1
 8009796:	d3f3      	bcc.n	8009780 <tcp_kill_state+0x28>
        inactivity = tcp_ticks - pcb->tmr;
 8009798:	4611      	mov	r1, r2
        inactive = pcb;
 800979a:	4618      	mov	r0, r3
 800979c:	e7f0      	b.n	8009780 <tcp_kill_state+0x28>
  if (inactive != NULL) {
 800979e:	b110      	cbz	r0, 80097a6 <tcp_kill_state+0x4e>
    tcp_abandon(inactive, 0);
 80097a0:	2100      	movs	r1, #0
 80097a2:	f7ff fe15 	bl	80093d0 <tcp_abandon>
}
 80097a6:	bd38      	pop	{r3, r4, r5, pc}
 80097a8:	20008610 	.word	0x20008610
 80097ac:	080170f4 	.word	0x080170f4
 80097b0:	08016f30 	.word	0x08016f30
 80097b4:	08015d2c 	.word	0x08015d2c
 80097b8:	20008614 	.word	0x20008614

080097bc <tcp_alloc>:
{
 80097bc:	b538      	push	{r3, r4, r5, lr}
 80097be:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80097c0:	2001      	movs	r0, #1
 80097c2:	f7fe fb1f 	bl	8007e04 <memp_malloc>
  if (pcb == NULL) {
 80097c6:	4604      	mov	r4, r0
 80097c8:	b3a8      	cbz	r0, 8009836 <tcp_alloc+0x7a>
  if (pcb != NULL) {
 80097ca:	b394      	cbz	r4, 8009832 <tcp_alloc+0x76>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80097cc:	22c4      	movs	r2, #196	; 0xc4
 80097ce:	2100      	movs	r1, #0
 80097d0:	4620      	mov	r0, r4
 80097d2:	f00b fb2e 	bl	8014e32 <memset>
    pcb->prio = prio;
 80097d6:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    pcb->snd_buf = TCP_SND_BUF;
 80097da:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80097de:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80097e2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80097e6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80097ea:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    pcb->ttl = TCP_TTL;
 80097ee:	22ff      	movs	r2, #255	; 0xff
 80097f0:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    pcb->mss = INITIAL_MSS;
 80097f4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80097f8:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80097fc:	2206      	movs	r2, #6
 80097fe:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009802:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
    pcb->rtime = -1;
 8009806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800980a:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
    pcb->cwnd = 1;
 800980e:	2201      	movs	r2, #1
 8009810:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
    pcb->tmr = tcp_ticks;
 8009814:	4a1a      	ldr	r2, [pc, #104]	; (8009880 <tcp_alloc+0xc4>)
 8009816:	6812      	ldr	r2, [r2, #0]
 8009818:	64a2      	str	r2, [r4, #72]	; 0x48
    pcb->last_timer = tcp_timer_ctr;
 800981a:	4a1a      	ldr	r2, [pc, #104]	; (8009884 <tcp_alloc+0xc8>)
 800981c:	7812      	ldrb	r2, [r2, #0]
 800981e:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
    pcb->ssthresh = TCP_SND_BUF;
 8009822:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
    pcb->recv = tcp_recv_null;
 8009826:	4b18      	ldr	r3, [pc, #96]	; (8009888 <tcp_alloc+0xcc>)
 8009828:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800982c:	4b17      	ldr	r3, [pc, #92]	; (800988c <tcp_alloc+0xd0>)
 800982e:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
}
 8009832:	4620      	mov	r0, r4
 8009834:	bd38      	pop	{r3, r4, r5, pc}
    tcp_handle_closepend();
 8009836:	f7ff fbcb 	bl	8008fd0 <tcp_handle_closepend>
    tcp_kill_timewait();
 800983a:	f7ff fe5d 	bl	80094f8 <tcp_kill_timewait>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800983e:	2001      	movs	r0, #1
 8009840:	f7fe fae0 	bl	8007e04 <memp_malloc>
    if (pcb == NULL) {
 8009844:	4604      	mov	r4, r0
 8009846:	2800      	cmp	r0, #0
 8009848:	d1bf      	bne.n	80097ca <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 800984a:	2009      	movs	r0, #9
 800984c:	f7ff ff84 	bl	8009758 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009850:	2001      	movs	r0, #1
 8009852:	f7fe fad7 	bl	8007e04 <memp_malloc>
      if (pcb == NULL) {
 8009856:	4604      	mov	r4, r0
 8009858:	2800      	cmp	r0, #0
 800985a:	d1b6      	bne.n	80097ca <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 800985c:	2008      	movs	r0, #8
 800985e:	f7ff ff7b 	bl	8009758 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009862:	2001      	movs	r0, #1
 8009864:	f7fe face 	bl	8007e04 <memp_malloc>
        if (pcb == NULL) {
 8009868:	4604      	mov	r4, r0
 800986a:	2800      	cmp	r0, #0
 800986c:	d1ad      	bne.n	80097ca <tcp_alloc+0xe>
          tcp_kill_prio(prio);
 800986e:	4628      	mov	r0, r5
 8009870:	f7ff fe5c 	bl	800952c <tcp_kill_prio>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009874:	2001      	movs	r0, #1
 8009876:	f7fe fac5 	bl	8007e04 <memp_malloc>
 800987a:	4604      	mov	r4, r0
 800987c:	e7a5      	b.n	80097ca <tcp_alloc+0xe>
 800987e:	bf00      	nop
 8009880:	20008614 	.word	0x20008614
 8009884:	20001742 	.word	0x20001742
 8009888:	08009a31 	.word	0x08009a31
 800988c:	006ddd00 	.word	0x006ddd00

08009890 <tcp_close_shutdown>:
{
 8009890:	b530      	push	{r4, r5, lr}
 8009892:	b085      	sub	sp, #20
 8009894:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009896:	4604      	mov	r4, r0
 8009898:	b190      	cbz	r0, 80098c0 <tcp_close_shutdown+0x30>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800989a:	b12d      	cbz	r5, 80098a8 <tcp_close_shutdown+0x18>
 800989c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80098a0:	2b04      	cmp	r3, #4
 80098a2:	d015      	beq.n	80098d0 <tcp_close_shutdown+0x40>
 80098a4:	2b07      	cmp	r3, #7
 80098a6:	d013      	beq.n	80098d0 <tcp_close_shutdown+0x40>
  switch (pcb->state) {
 80098a8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d072      	beq.n	8009996 <tcp_close_shutdown+0x106>
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d056      	beq.n	8009962 <tcp_close_shutdown+0xd2>
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d07a      	beq.n	80099ae <tcp_close_shutdown+0x11e>
      return tcp_close_shutdown_fin(pcb);
 80098b8:	4620      	mov	r0, r4
 80098ba:	f7ff fb3f 	bl	8008f3c <tcp_close_shutdown_fin>
 80098be:	e068      	b.n	8009992 <tcp_close_shutdown+0x102>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80098c0:	4b41      	ldr	r3, [pc, #260]	; (80099c8 <tcp_close_shutdown+0x138>)
 80098c2:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80098c6:	4941      	ldr	r1, [pc, #260]	; (80099cc <tcp_close_shutdown+0x13c>)
 80098c8:	4841      	ldr	r0, [pc, #260]	; (80099d0 <tcp_close_shutdown+0x140>)
 80098ca:	f00b fabb 	bl	8014e44 <iprintf>
 80098ce:	e7e4      	b.n	800989a <tcp_close_shutdown+0xa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80098d0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80098d4:	b1fb      	cbz	r3, 8009916 <tcp_close_shutdown+0x86>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80098d6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80098da:	f013 0f10 	tst.w	r3, #16
 80098de:	d020      	beq.n	8009922 <tcp_close_shutdown+0x92>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80098e0:	f104 0318 	add.w	r3, r4, #24
 80098e4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80098e6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80098e8:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 80098ec:	9002      	str	r0, [sp, #8]
 80098ee:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 80098f0:	9001      	str	r0, [sp, #4]
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	4623      	mov	r3, r4
 80098f6:	4620      	mov	r0, r4
 80098f8:	f002 ff9c 	bl	800c834 <tcp_rst>
      tcp_pcb_purge(pcb);
 80098fc:	4620      	mov	r0, r4
 80098fe:	f7ff fcbd 	bl	800927c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009902:	4b34      	ldr	r3, [pc, #208]	; (80099d4 <tcp_close_shutdown+0x144>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	42a3      	cmp	r3, r4
 8009908:	d013      	beq.n	8009932 <tcp_close_shutdown+0xa2>
 800990a:	b1c3      	cbz	r3, 800993e <tcp_close_shutdown+0xae>
 800990c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800990e:	42a2      	cmp	r2, r4
 8009910:	d013      	beq.n	800993a <tcp_close_shutdown+0xaa>
 8009912:	4613      	mov	r3, r2
 8009914:	e7f9      	b.n	800990a <tcp_close_shutdown+0x7a>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009916:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800991a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800991e:	d1da      	bne.n	80098d6 <tcp_close_shutdown+0x46>
 8009920:	e7c2      	b.n	80098a8 <tcp_close_shutdown+0x18>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009922:	4b29      	ldr	r3, [pc, #164]	; (80099c8 <tcp_close_shutdown+0x138>)
 8009924:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009928:	492b      	ldr	r1, [pc, #172]	; (80099d8 <tcp_close_shutdown+0x148>)
 800992a:	4829      	ldr	r0, [pc, #164]	; (80099d0 <tcp_close_shutdown+0x140>)
 800992c:	f00b fa8a 	bl	8014e44 <iprintf>
 8009930:	e7d6      	b.n	80098e0 <tcp_close_shutdown+0x50>
      TCP_RMV_ACTIVE(pcb);
 8009932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009934:	4b27      	ldr	r3, [pc, #156]	; (80099d4 <tcp_close_shutdown+0x144>)
 8009936:	601a      	str	r2, [r3, #0]
 8009938:	e001      	b.n	800993e <tcp_close_shutdown+0xae>
 800993a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800993c:	635a      	str	r2, [r3, #52]	; 0x34
 800993e:	2300      	movs	r3, #0
 8009940:	6363      	str	r3, [r4, #52]	; 0x34
 8009942:	4b26      	ldr	r3, [pc, #152]	; (80099dc <tcp_close_shutdown+0x14c>)
 8009944:	2201      	movs	r2, #1
 8009946:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 8009948:	4b25      	ldr	r3, [pc, #148]	; (80099e0 <tcp_close_shutdown+0x150>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	42a3      	cmp	r3, r4
 800994e:	d004      	beq.n	800995a <tcp_close_shutdown+0xca>
        tcp_free(pcb);
 8009950:	4620      	mov	r0, r4
 8009952:	f7ff fb61 	bl	8009018 <tcp_free>
      return ERR_OK;
 8009956:	2000      	movs	r0, #0
 8009958:	e01b      	b.n	8009992 <tcp_close_shutdown+0x102>
        tcp_trigger_input_pcb_close();
 800995a:	f002 fa79 	bl	800be50 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 800995e:	2000      	movs	r0, #0
 8009960:	e017      	b.n	8009992 <tcp_close_shutdown+0x102>
      if (pcb->local_port != 0) {
 8009962:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009964:	b18b      	cbz	r3, 800998a <tcp_close_shutdown+0xfa>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009966:	4b1f      	ldr	r3, [pc, #124]	; (80099e4 <tcp_close_shutdown+0x154>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	42a3      	cmp	r3, r4
 800996c:	d005      	beq.n	800997a <tcp_close_shutdown+0xea>
 800996e:	b153      	cbz	r3, 8009986 <tcp_close_shutdown+0xf6>
 8009970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009972:	42a2      	cmp	r2, r4
 8009974:	d005      	beq.n	8009982 <tcp_close_shutdown+0xf2>
 8009976:	4613      	mov	r3, r2
 8009978:	e7f9      	b.n	800996e <tcp_close_shutdown+0xde>
 800997a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800997c:	4b19      	ldr	r3, [pc, #100]	; (80099e4 <tcp_close_shutdown+0x154>)
 800997e:	601a      	str	r2, [r3, #0]
 8009980:	e001      	b.n	8009986 <tcp_close_shutdown+0xf6>
 8009982:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009984:	635a      	str	r2, [r3, #52]	; 0x34
 8009986:	2300      	movs	r3, #0
 8009988:	6363      	str	r3, [r4, #52]	; 0x34
      tcp_free(pcb);
 800998a:	4620      	mov	r0, r4
 800998c:	f7ff fb44 	bl	8009018 <tcp_free>
  return ERR_OK;
 8009990:	2000      	movs	r0, #0
}
 8009992:	b005      	add	sp, #20
 8009994:	bd30      	pop	{r4, r5, pc}
      tcp_listen_closed(pcb);
 8009996:	4620      	mov	r0, r4
 8009998:	f7ff fa8a 	bl	8008eb0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800999c:	4621      	mov	r1, r4
 800999e:	4812      	ldr	r0, [pc, #72]	; (80099e8 <tcp_close_shutdown+0x158>)
 80099a0:	f7ff fca6 	bl	80092f0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80099a4:	4620      	mov	r0, r4
 80099a6:	f7ff fab1 	bl	8008f0c <tcp_free_listen>
  return ERR_OK;
 80099aa:	2000      	movs	r0, #0
      break;
 80099ac:	e7f1      	b.n	8009992 <tcp_close_shutdown+0x102>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80099ae:	4621      	mov	r1, r4
 80099b0:	4808      	ldr	r0, [pc, #32]	; (80099d4 <tcp_close_shutdown+0x144>)
 80099b2:	f7ff fc9d 	bl	80092f0 <tcp_pcb_remove>
 80099b6:	4b09      	ldr	r3, [pc, #36]	; (80099dc <tcp_close_shutdown+0x14c>)
 80099b8:	2201      	movs	r2, #1
 80099ba:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80099bc:	4620      	mov	r0, r4
 80099be:	f7ff fb2b 	bl	8009018 <tcp_free>
  return ERR_OK;
 80099c2:	2000      	movs	r0, #0
      break;
 80099c4:	e7e5      	b.n	8009992 <tcp_close_shutdown+0x102>
 80099c6:	bf00      	nop
 80099c8:	080170f4 	.word	0x080170f4
 80099cc:	08016e9c 	.word	0x08016e9c
 80099d0:	08015d2c 	.word	0x08015d2c
 80099d4:	20008610 	.word	0x20008610
 80099d8:	08016ebc 	.word	0x08016ebc
 80099dc:	2000860c 	.word	0x2000860c
 80099e0:	20008624 	.word	0x20008624
 80099e4:	2000861c 	.word	0x2000861c
 80099e8:	20008618 	.word	0x20008618

080099ec <tcp_close>:
{
 80099ec:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80099ee:	b178      	cbz	r0, 8009a10 <tcp_close+0x24>
 80099f0:	4603      	mov	r3, r0
  if (pcb->state != LISTEN) {
 80099f2:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80099f6:	2a01      	cmp	r2, #1
 80099f8:	d005      	beq.n	8009a06 <tcp_close+0x1a>
    tcp_set_flags(pcb, TF_RXCLOSED);
 80099fa:	f8b0 2042 	ldrh.w	r2, [r0, #66]	; 0x42
 80099fe:	f042 0210 	orr.w	r2, r2, #16
 8009a02:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
  return tcp_close_shutdown(pcb, 1);
 8009a06:	2101      	movs	r1, #1
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7ff ff41 	bl	8009890 <tcp_close_shutdown>
}
 8009a0e:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a10:	4b04      	ldr	r3, [pc, #16]	; (8009a24 <tcp_close+0x38>)
 8009a12:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009a16:	4904      	ldr	r1, [pc, #16]	; (8009a28 <tcp_close+0x3c>)
 8009a18:	4804      	ldr	r0, [pc, #16]	; (8009a2c <tcp_close+0x40>)
 8009a1a:	f00b fa13 	bl	8014e44 <iprintf>
 8009a1e:	f06f 000f 	mvn.w	r0, #15
 8009a22:	e7f4      	b.n	8009a0e <tcp_close+0x22>
 8009a24:	080170f4 	.word	0x080170f4
 8009a28:	08016e84 	.word	0x08016e84
 8009a2c:	08015d2c 	.word	0x08015d2c

08009a30 <tcp_recv_null>:
{
 8009a30:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a32:	b129      	cbz	r1, 8009a40 <tcp_recv_null+0x10>
 8009a34:	4614      	mov	r4, r2
 8009a36:	4608      	mov	r0, r1
  if (p != NULL) {
 8009a38:	b962      	cbnz	r2, 8009a54 <tcp_recv_null+0x24>
  } else if (err == ERR_OK) {
 8009a3a:	b19b      	cbz	r3, 8009a64 <tcp_recv_null+0x34>
  return ERR_OK;
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	e010      	b.n	8009a62 <tcp_recv_null+0x32>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a40:	4b0a      	ldr	r3, [pc, #40]	; (8009a6c <tcp_recv_null+0x3c>)
 8009a42:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009a46:	490a      	ldr	r1, [pc, #40]	; (8009a70 <tcp_recv_null+0x40>)
 8009a48:	480a      	ldr	r0, [pc, #40]	; (8009a74 <tcp_recv_null+0x44>)
 8009a4a:	f00b f9fb 	bl	8014e44 <iprintf>
 8009a4e:	f06f 000f 	mvn.w	r0, #15
 8009a52:	e006      	b.n	8009a62 <tcp_recv_null+0x32>
    tcp_recved(pcb, p->tot_len);
 8009a54:	8911      	ldrh	r1, [r2, #8]
 8009a56:	f7ff fb35 	bl	80090c4 <tcp_recved>
    pbuf_free(p);
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f7fe fe7a 	bl	8008754 <pbuf_free>
  return ERR_OK;
 8009a60:	2000      	movs	r0, #0
}
 8009a62:	bd10      	pop	{r4, pc}
    return tcp_close(pcb);
 8009a64:	f7ff ffc2 	bl	80099ec <tcp_close>
 8009a68:	e7fb      	b.n	8009a62 <tcp_recv_null+0x32>
 8009a6a:	bf00      	nop
 8009a6c:	080170f4 	.word	0x080170f4
 8009a70:	08017098 	.word	0x08017098
 8009a74:	08015d2c 	.word	0x08015d2c

08009a78 <tcp_process_refused_data>:
{
 8009a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009a7a:	b338      	cbz	r0, 8009acc <tcp_process_refused_data+0x54>
 8009a7c:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8009a7e:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
 8009a82:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8009a84:	2300      	movs	r3, #0
 8009a86:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009a8a:	f8d0 50ac 	ldr.w	r5, [r0, #172]	; 0xac
 8009a8e:	b33d      	cbz	r5, 8009ae0 <tcp_process_refused_data+0x68>
 8009a90:	4632      	mov	r2, r6
 8009a92:	4601      	mov	r1, r0
 8009a94:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8009a96:	47a8      	blx	r5
 8009a98:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8009a9a:	bb4d      	cbnz	r5, 8009af0 <tcp_process_refused_data+0x78>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009a9c:	f017 0f20 	tst.w	r7, #32
 8009aa0:	d02d      	beq.n	8009afe <tcp_process_refused_data+0x86>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009aa2:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8009aa6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009aaa:	d002      	beq.n	8009ab2 <tcp_process_refused_data+0x3a>
          pcb->rcv_wnd++;
 8009aac:	3301      	adds	r3, #1
 8009aae:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
        TCP_EVENT_CLOSED(pcb, err);
 8009ab2:	f8d4 60ac 	ldr.w	r6, [r4, #172]	; 0xac
 8009ab6:	b316      	cbz	r6, 8009afe <tcp_process_refused_data+0x86>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	461a      	mov	r2, r3
 8009abc:	4621      	mov	r1, r4
 8009abe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009ac0:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8009ac2:	f110 0f0d 	cmn.w	r0, #13
 8009ac6:	d11a      	bne.n	8009afe <tcp_process_refused_data+0x86>
          return ERR_ABRT;
 8009ac8:	4605      	mov	r5, r0
 8009aca:	e018      	b.n	8009afe <tcp_process_refused_data+0x86>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009acc:	4b0d      	ldr	r3, [pc, #52]	; (8009b04 <tcp_process_refused_data+0x8c>)
 8009ace:	f240 6209 	movw	r2, #1545	; 0x609
 8009ad2:	490d      	ldr	r1, [pc, #52]	; (8009b08 <tcp_process_refused_data+0x90>)
 8009ad4:	480d      	ldr	r0, [pc, #52]	; (8009b0c <tcp_process_refused_data+0x94>)
 8009ad6:	f00b f9b5 	bl	8014e44 <iprintf>
 8009ada:	f06f 050f 	mvn.w	r5, #15
 8009ade:	e00e      	b.n	8009afe <tcp_process_refused_data+0x86>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	4632      	mov	r2, r6
 8009ae4:	4601      	mov	r1, r0
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7ff ffa2 	bl	8009a30 <tcp_recv_null>
 8009aec:	4605      	mov	r5, r0
 8009aee:	e7d4      	b.n	8009a9a <tcp_process_refused_data+0x22>
    } else if (err == ERR_ABRT) {
 8009af0:	f115 0f0d 	cmn.w	r5, #13
 8009af4:	d003      	beq.n	8009afe <tcp_process_refused_data+0x86>
      pcb->refused_data = refused_data;
 8009af6:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
      return ERR_INPROGRESS;
 8009afa:	f06f 0504 	mvn.w	r5, #4
}
 8009afe:	4628      	mov	r0, r5
 8009b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b02:	bf00      	nop
 8009b04:	080170f4 	.word	0x080170f4
 8009b08:	08017070 	.word	0x08017070
 8009b0c:	08015d2c 	.word	0x08015d2c

08009b10 <tcp_fasttmr>:
{
 8009b10:	b570      	push	{r4, r5, r6, lr}
  ++tcp_timer_ctr;
 8009b12:	4a21      	ldr	r2, [pc, #132]	; (8009b98 <tcp_fasttmr+0x88>)
 8009b14:	7813      	ldrb	r3, [r2, #0]
 8009b16:	3301      	adds	r3, #1
 8009b18:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8009b1a:	4b20      	ldr	r3, [pc, #128]	; (8009b9c <tcp_fasttmr+0x8c>)
 8009b1c:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8009b1e:	e017      	b.n	8009b50 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8009b20:	f043 0302 	orr.w	r3, r3, #2
 8009b24:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        tcp_output(pcb);
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f002 ff0f 	bl	800c94c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009b2e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8009b32:	f023 0303 	bic.w	r3, r3, #3
 8009b36:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 8009b3a:	e017      	b.n	8009b6c <tcp_fasttmr+0x5c>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009b3c:	f023 0308 	bic.w	r3, r3, #8
 8009b40:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        tcp_close_shutdown_fin(pcb);
 8009b44:	4620      	mov	r0, r4
 8009b46:	f7ff f9f9 	bl	8008f3c <tcp_close_shutdown_fin>
 8009b4a:	e014      	b.n	8009b76 <tcp_fasttmr+0x66>
      pcb = pcb->next;
 8009b4c:	6b65      	ldr	r5, [r4, #52]	; 0x34
{
 8009b4e:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8009b50:	b304      	cbz	r4, 8009b94 <tcp_fasttmr+0x84>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009b52:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8009b56:	4b10      	ldr	r3, [pc, #64]	; (8009b98 <tcp_fasttmr+0x88>)
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d0f6      	beq.n	8009b4c <tcp_fasttmr+0x3c>
      pcb->last_timer = tcp_timer_ctr;
 8009b5e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
      if (pcb->flags & TF_ACK_DELAY) {
 8009b62:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8009b66:	f013 0f01 	tst.w	r3, #1
 8009b6a:	d1d9      	bne.n	8009b20 <tcp_fasttmr+0x10>
      if (pcb->flags & TF_CLOSEPEND) {
 8009b6c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8009b70:	f013 0f08 	tst.w	r3, #8
 8009b74:	d1e2      	bne.n	8009b3c <tcp_fasttmr+0x2c>
      next = pcb->next;
 8009b76:	6b65      	ldr	r5, [r4, #52]	; 0x34
      if (pcb->refused_data != NULL) {
 8009b78:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d0e6      	beq.n	8009b4e <tcp_fasttmr+0x3e>
        tcp_active_pcbs_changed = 0;
 8009b80:	4e07      	ldr	r6, [pc, #28]	; (8009ba0 <tcp_fasttmr+0x90>)
 8009b82:	2300      	movs	r3, #0
 8009b84:	7033      	strb	r3, [r6, #0]
        tcp_process_refused_data(pcb);
 8009b86:	4620      	mov	r0, r4
 8009b88:	f7ff ff76 	bl	8009a78 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009b8c:	7833      	ldrb	r3, [r6, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d0dd      	beq.n	8009b4e <tcp_fasttmr+0x3e>
 8009b92:	e7c2      	b.n	8009b1a <tcp_fasttmr+0xa>
}
 8009b94:	bd70      	pop	{r4, r5, r6, pc}
 8009b96:	bf00      	nop
 8009b98:	20001742 	.word	0x20001742
 8009b9c:	20008610 	.word	0x20008610
 8009ba0:	2000860c 	.word	0x2000860c

08009ba4 <tcp_slowtmr>:
{
 8009ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba8:	b084      	sub	sp, #16
  ++tcp_ticks;
 8009baa:	4ab5      	ldr	r2, [pc, #724]	; (8009e80 <tcp_slowtmr+0x2dc>)
 8009bac:	6813      	ldr	r3, [r2, #0]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009bb2:	4ab4      	ldr	r2, [pc, #720]	; (8009e84 <tcp_slowtmr+0x2e0>)
 8009bb4:	7813      	ldrb	r3, [r2, #0]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8009bba:	4bb3      	ldr	r3, [pc, #716]	; (8009e88 <tcp_slowtmr+0x2e4>)
 8009bbc:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 8009bbe:	2600      	movs	r6, #0
  while (pcb != NULL) {
 8009bc0:	e1a8      	b.n	8009f14 <tcp_slowtmr+0x370>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009bc2:	4bb2      	ldr	r3, [pc, #712]	; (8009e8c <tcp_slowtmr+0x2e8>)
 8009bc4:	f240 42be 	movw	r2, #1214	; 0x4be
 8009bc8:	49b1      	ldr	r1, [pc, #708]	; (8009e90 <tcp_slowtmr+0x2ec>)
 8009bca:	48b2      	ldr	r0, [pc, #712]	; (8009e94 <tcp_slowtmr+0x2f0>)
 8009bcc:	f00b f93a 	bl	8014e44 <iprintf>
 8009bd0:	e1a7      	b.n	8009f22 <tcp_slowtmr+0x37e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009bd2:	4bae      	ldr	r3, [pc, #696]	; (8009e8c <tcp_slowtmr+0x2e8>)
 8009bd4:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009bd8:	49af      	ldr	r1, [pc, #700]	; (8009e98 <tcp_slowtmr+0x2f4>)
 8009bda:	48ae      	ldr	r0, [pc, #696]	; (8009e94 <tcp_slowtmr+0x2f0>)
 8009bdc:	f00b f932 	bl	8014e44 <iprintf>
 8009be0:	e1a4      	b.n	8009f2c <tcp_slowtmr+0x388>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009be2:	4baa      	ldr	r3, [pc, #680]	; (8009e8c <tcp_slowtmr+0x2e8>)
 8009be4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009be8:	49ac      	ldr	r1, [pc, #688]	; (8009e9c <tcp_slowtmr+0x2f8>)
 8009bea:	48aa      	ldr	r0, [pc, #680]	; (8009e94 <tcp_slowtmr+0x2f0>)
 8009bec:	f00b f92a 	bl	8014e44 <iprintf>
 8009bf0:	e1a1      	b.n	8009f36 <tcp_slowtmr+0x392>
      prev = pcb;
 8009bf2:	4626      	mov	r6, r4
      pcb = pcb->next;
 8009bf4:	6b64      	ldr	r4, [r4, #52]	; 0x34
      continue;
 8009bf6:	e18d      	b.n	8009f14 <tcp_slowtmr+0x370>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009bf8:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8009bfc:	2b05      	cmp	r3, #5
 8009bfe:	f240 81a8 	bls.w	8009f52 <tcp_slowtmr+0x3ae>
      ++pcb_remove;
 8009c02:	2501      	movs	r5, #1
 8009c04:	e075      	b.n	8009cf2 <tcp_slowtmr+0x14e>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009c06:	4ba1      	ldr	r3, [pc, #644]	; (8009e8c <tcp_slowtmr+0x2e8>)
 8009c08:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009c0c:	49a4      	ldr	r1, [pc, #656]	; (8009ea0 <tcp_slowtmr+0x2fc>)
 8009c0e:	48a1      	ldr	r0, [pc, #644]	; (8009e94 <tcp_slowtmr+0x2f0>)
 8009c10:	f00b f918 	bl	8014e44 <iprintf>
 8009c14:	e1b6      	b.n	8009f84 <tcp_slowtmr+0x3e0>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009c16:	4620      	mov	r0, r4
 8009c18:	f002 fb6a 	bl	800c2f0 <tcp_split_unsent_seg>
 8009c1c:	b158      	cbz	r0, 8009c36 <tcp_slowtmr+0x92>
              pcb->persist_cnt = 0;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009c24:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 8009c28:	2b06      	cmp	r3, #6
 8009c2a:	d875      	bhi.n	8009d18 <tcp_slowtmr+0x174>
                pcb->persist_backoff++;
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
    pcb_remove = 0;
 8009c32:	2500      	movs	r5, #0
 8009c34:	e05d      	b.n	8009cf2 <tcp_slowtmr+0x14e>
                if (tcp_output(pcb) == ERR_OK) {
 8009c36:	4620      	mov	r0, r4
 8009c38:	f002 fe88 	bl	800c94c <tcp_output>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d1ee      	bne.n	8009c1e <tcp_slowtmr+0x7a>
    pcb_remove = 0;
 8009c40:	2500      	movs	r5, #0
 8009c42:	e056      	b.n	8009cf2 <tcp_slowtmr+0x14e>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009c44:	f9b4 3058 	ldrsh.w	r3, [r4, #88]	; 0x58
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	db06      	blt.n	8009c5a <tcp_slowtmr+0xb6>
 8009c4c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d002      	beq.n	8009c5a <tcp_slowtmr+0xb6>
          ++pcb->rtime;
 8009c54:	3301      	adds	r3, #1
 8009c56:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
        if (pcb->rtime >= pcb->rto) {
 8009c5a:	f9b4 2058 	ldrsh.w	r2, [r4, #88]	; 0x58
 8009c5e:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 8009c62:	429a      	cmp	r2, r3
 8009c64:	db45      	blt.n	8009cf2 <tcp_slowtmr+0x14e>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009c66:	4620      	mov	r0, r4
 8009c68:	f002 fd08 	bl	800c67c <tcp_rexmit_rto_prepare>
 8009c6c:	b130      	cbz	r0, 8009c7c <tcp_slowtmr+0xd8>
 8009c6e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d13d      	bne.n	8009cf2 <tcp_slowtmr+0x14e>
 8009c76:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009c7a:	b3d3      	cbz	r3, 8009cf2 <tcp_slowtmr+0x14e>
            if (pcb->state != SYN_SENT) {
 8009c7c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d014      	beq.n	8009cae <tcp_slowtmr+0x10a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009c84:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 8009c88:	2a0c      	cmp	r2, #12
 8009c8a:	bf28      	it	cs
 8009c8c:	220c      	movcs	r2, #12
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009c8e:	f9b4 1064 	ldrsh.w	r1, [r4, #100]	; 0x64
 8009c92:	f9b4 3066 	ldrsh.w	r3, [r4, #102]	; 0x66
 8009c96:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8009c9a:	4982      	ldr	r1, [pc, #520]	; (8009ea4 <tcp_slowtmr+0x300>)
 8009c9c:	5c8a      	ldrb	r2, [r1, r2]
 8009c9e:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009ca0:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	dc20      	bgt.n	8009cea <tcp_slowtmr+0x146>
 8009ca8:	b21b      	sxth	r3, r3
 8009caa:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
            pcb->rtime = 0;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009cb4:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 8009cb8:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	bf28      	it	cs
 8009cc0:	4613      	movcs	r3, r2
            pcb->ssthresh = eff_wnd >> 1;
 8009cc2:	085b      	lsrs	r3, r3, #1
 8009cc4:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009cc8:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 8009ccc:	004a      	lsls	r2, r1, #1
 8009cce:	b292      	uxth	r2, r2
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d201      	bcs.n	8009cd8 <tcp_slowtmr+0x134>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009cd4:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
            pcb->cwnd = pcb->mss;
 8009cd8:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
            pcb->bytes_acked = 0;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
            tcp_rexmit_rto_commit(pcb);
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f002 ffe2 	bl	800ccac <tcp_rexmit_rto_commit>
 8009ce8:	e003      	b.n	8009cf2 <tcp_slowtmr+0x14e>
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009cea:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8009cee:	e7dc      	b.n	8009caa <tcp_slowtmr+0x106>
      ++pcb_remove;
 8009cf0:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 8009cf2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009cf6:	2b06      	cmp	r3, #6
 8009cf8:	d010      	beq.n	8009d1c <tcp_slowtmr+0x178>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009cfa:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8009cfe:	f012 0f08 	tst.w	r2, #8
 8009d02:	d046      	beq.n	8009d92 <tcp_slowtmr+0x1ee>
 8009d04:	2b04      	cmp	r3, #4
 8009d06:	d017      	beq.n	8009d38 <tcp_slowtmr+0x194>
        ((pcb->state == ESTABLISHED) ||
 8009d08:	2b07      	cmp	r3, #7
 8009d0a:	d015      	beq.n	8009d38 <tcp_slowtmr+0x194>
    pcb_reset = 0;
 8009d0c:	2700      	movs	r7, #0
 8009d0e:	e041      	b.n	8009d94 <tcp_slowtmr+0x1f0>
          ++pcb_remove; /* max probes reached */
 8009d10:	2501      	movs	r5, #1
 8009d12:	e7ee      	b.n	8009cf2 <tcp_slowtmr+0x14e>
    pcb_remove = 0;
 8009d14:	2500      	movs	r5, #0
 8009d16:	e7ec      	b.n	8009cf2 <tcp_slowtmr+0x14e>
 8009d18:	2500      	movs	r5, #0
 8009d1a:	e7ea      	b.n	8009cf2 <tcp_slowtmr+0x14e>
      if (pcb->flags & TF_RXCLOSED) {
 8009d1c:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8009d20:	f012 0f10 	tst.w	r2, #16
 8009d24:	d0e9      	beq.n	8009cfa <tcp_slowtmr+0x156>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d26:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009d28:	4a55      	ldr	r2, [pc, #340]	; (8009e80 <tcp_slowtmr+0x2dc>)
 8009d2a:	6812      	ldr	r2, [r2, #0]
 8009d2c:	1a52      	subs	r2, r2, r1
 8009d2e:	2a28      	cmp	r2, #40	; 0x28
 8009d30:	d9e3      	bls.n	8009cfa <tcp_slowtmr+0x156>
          ++pcb_remove;
 8009d32:	3501      	adds	r5, #1
 8009d34:	b2ed      	uxtb	r5, r5
 8009d36:	e7e0      	b.n	8009cfa <tcp_slowtmr+0x156>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d38:	4b51      	ldr	r3, [pc, #324]	; (8009e80 <tcp_slowtmr+0x2dc>)
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009d3e:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009d40:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 8009d44:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 8009d48:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8009d4c:	4856      	ldr	r0, [pc, #344]	; (8009ea8 <tcp_slowtmr+0x304>)
 8009d4e:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d52:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8009d56:	d903      	bls.n	8009d60 <tcp_slowtmr+0x1bc>
        ++pcb_remove;
 8009d58:	3501      	adds	r5, #1
 8009d5a:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 8009d5c:	2701      	movs	r7, #1
 8009d5e:	e019      	b.n	8009d94 <tcp_slowtmr+0x1f0>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009d60:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 8009d64:	4851      	ldr	r0, [pc, #324]	; (8009eac <tcp_slowtmr+0x308>)
 8009d66:	fb00 1303 	mla	r3, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009d6a:	494f      	ldr	r1, [pc, #316]	; (8009ea8 <tcp_slowtmr+0x304>)
 8009d6c:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d70:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8009d74:	d801      	bhi.n	8009d7a <tcp_slowtmr+0x1d6>
    pcb_reset = 0;
 8009d76:	2700      	movs	r7, #0
 8009d78:	e00c      	b.n	8009d94 <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f002 ffcc 	bl	800cd18 <tcp_keepalive>
        if (err == ERR_OK) {
 8009d80:	2800      	cmp	r0, #0
 8009d82:	d141      	bne.n	8009e08 <tcp_slowtmr+0x264>
          pcb->keep_cnt_sent++;
 8009d84:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
 8009d88:	3301      	adds	r3, #1
 8009d8a:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
    pcb_reset = 0;
 8009d8e:	2700      	movs	r7, #0
 8009d90:	e000      	b.n	8009d94 <tcp_slowtmr+0x1f0>
 8009d92:	2700      	movs	r7, #0
    if (pcb->ooseq != NULL &&
 8009d94:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8009d98:	b153      	cbz	r3, 8009db0 <tcp_slowtmr+0x20c>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009d9a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009d9c:	4a38      	ldr	r2, [pc, #224]	; (8009e80 <tcp_slowtmr+0x2dc>)
 8009d9e:	6812      	ldr	r2, [r2, #0]
 8009da0:	1ad2      	subs	r2, r2, r3
 8009da2:	f9b4 3068 	ldrsh.w	r3, [r4, #104]	; 0x68
 8009da6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009daa:	0059      	lsls	r1, r3, #1
    if (pcb->ooseq != NULL &&
 8009dac:	428a      	cmp	r2, r1
 8009dae:	d22d      	bcs.n	8009e0c <tcp_slowtmr+0x268>
    if (pcb->state == SYN_RCVD) {
 8009db0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009db4:	2b03      	cmp	r3, #3
 8009db6:	d02d      	beq.n	8009e14 <tcp_slowtmr+0x270>
    if (pcb->state == LAST_ACK) {
 8009db8:	2b09      	cmp	r3, #9
 8009dba:	d034      	beq.n	8009e26 <tcp_slowtmr+0x282>
    if (pcb_remove) {
 8009dbc:	2d00      	cmp	r5, #0
 8009dbe:	d13b      	bne.n	8009e38 <tcp_slowtmr+0x294>
      pcb = pcb->next;
 8009dc0:	6b65      	ldr	r5, [r4, #52]	; 0x34
      ++prev->polltmr;
 8009dc2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      if (prev->polltmr >= prev->pollinterval) {
 8009dce:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	f0c0 809c 	bcc.w	8009f10 <tcp_slowtmr+0x36c>
        prev->polltmr = 0;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        tcp_active_pcbs_changed = 0;
 8009dde:	4a34      	ldr	r2, [pc, #208]	; (8009eb0 <tcp_slowtmr+0x30c>)
 8009de0:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 8009de2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f000 808a 	beq.w	8009f00 <tcp_slowtmr+0x35c>
 8009dec:	4621      	mov	r1, r4
 8009dee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009df0:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8009df2:	4b2f      	ldr	r3, [pc, #188]	; (8009eb0 <tcp_slowtmr+0x30c>)
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f47f aedf 	bne.w	8009bba <tcp_slowtmr+0x16>
        if (err == ERR_OK) {
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	f000 8081 	beq.w	8009f04 <tcp_slowtmr+0x360>
      prev = pcb;
 8009e02:	4626      	mov	r6, r4
      pcb = pcb->next;
 8009e04:	462c      	mov	r4, r5
 8009e06:	e085      	b.n	8009f14 <tcp_slowtmr+0x370>
    pcb_reset = 0;
 8009e08:	2700      	movs	r7, #0
 8009e0a:	e7c3      	b.n	8009d94 <tcp_slowtmr+0x1f0>
      tcp_free_ooseq(pcb);
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	f7ff fa27 	bl	8009260 <tcp_free_ooseq>
 8009e12:	e7cd      	b.n	8009db0 <tcp_slowtmr+0x20c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009e14:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009e16:	4a1a      	ldr	r2, [pc, #104]	; (8009e80 <tcp_slowtmr+0x2dc>)
 8009e18:	6812      	ldr	r2, [r2, #0]
 8009e1a:	1a52      	subs	r2, r2, r1
 8009e1c:	2a28      	cmp	r2, #40	; 0x28
 8009e1e:	d9cb      	bls.n	8009db8 <tcp_slowtmr+0x214>
        ++pcb_remove;
 8009e20:	3501      	adds	r5, #1
 8009e22:	b2ed      	uxtb	r5, r5
 8009e24:	e7c8      	b.n	8009db8 <tcp_slowtmr+0x214>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009e26:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8009e28:	4b15      	ldr	r3, [pc, #84]	; (8009e80 <tcp_slowtmr+0x2dc>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	1a9b      	subs	r3, r3, r2
 8009e2e:	2bf0      	cmp	r3, #240	; 0xf0
 8009e30:	d9c4      	bls.n	8009dbc <tcp_slowtmr+0x218>
        ++pcb_remove;
 8009e32:	3501      	adds	r5, #1
 8009e34:	b2ed      	uxtb	r5, r5
 8009e36:	e7c1      	b.n	8009dbc <tcp_slowtmr+0x218>
      tcp_err_fn err_fn = pcb->errf;
 8009e38:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
      tcp_pcb_purge(pcb);
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	f7ff fa1d 	bl	800927c <tcp_pcb_purge>
      if (prev != NULL) {
 8009e42:	2e00      	cmp	r6, #0
 8009e44:	d03e      	beq.n	8009ec4 <tcp_slowtmr+0x320>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009e46:	4b10      	ldr	r3, [pc, #64]	; (8009e88 <tcp_slowtmr+0x2e4>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	42a3      	cmp	r3, r4
 8009e4c:	d032      	beq.n	8009eb4 <tcp_slowtmr+0x310>
        prev->next = pcb->next;
 8009e4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e50:	6373      	str	r3, [r6, #52]	; 0x34
      if (pcb_reset) {
 8009e52:	2f00      	cmp	r7, #0
 8009e54:	d145      	bne.n	8009ee2 <tcp_slowtmr+0x33e>
      err_arg = pcb->callback_arg;
 8009e56:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
      pcb = pcb->next;
 8009e5a:	6b67      	ldr	r7, [r4, #52]	; 0x34
      tcp_free(pcb2);
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f7ff f8db 	bl	8009018 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8009e62:	4b13      	ldr	r3, [pc, #76]	; (8009eb0 <tcp_slowtmr+0x30c>)
 8009e64:	2200      	movs	r2, #0
 8009e66:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009e68:	b11d      	cbz	r5, 8009e72 <tcp_slowtmr+0x2ce>
 8009e6a:	f06f 010c 	mvn.w	r1, #12
 8009e6e:	4640      	mov	r0, r8
 8009e70:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 8009e72:	4b0f      	ldr	r3, [pc, #60]	; (8009eb0 <tcp_slowtmr+0x30c>)
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f47f ae9f 	bne.w	8009bba <tcp_slowtmr+0x16>
      pcb = pcb->next;
 8009e7c:	463c      	mov	r4, r7
 8009e7e:	e049      	b.n	8009f14 <tcp_slowtmr+0x370>
 8009e80:	20008614 	.word	0x20008614
 8009e84:	20001742 	.word	0x20001742
 8009e88:	20008610 	.word	0x20008610
 8009e8c:	080170f4 	.word	0x080170f4
 8009e90:	08017168 	.word	0x08017168
 8009e94:	08015d2c 	.word	0x08015d2c
 8009e98:	08017194 	.word	0x08017194
 8009e9c:	080171c0 	.word	0x080171c0
 8009ea0:	08017224 	.word	0x08017224
 8009ea4:	08016e74 	.word	0x08016e74
 8009ea8:	10624dd3 	.word	0x10624dd3
 8009eac:	000124f8 	.word	0x000124f8
 8009eb0:	2000860c 	.word	0x2000860c
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009eb4:	4b66      	ldr	r3, [pc, #408]	; (800a050 <tcp_slowtmr+0x4ac>)
 8009eb6:	f240 526d 	movw	r2, #1389	; 0x56d
 8009eba:	4966      	ldr	r1, [pc, #408]	; (800a054 <tcp_slowtmr+0x4b0>)
 8009ebc:	4866      	ldr	r0, [pc, #408]	; (800a058 <tcp_slowtmr+0x4b4>)
 8009ebe:	f00a ffc1 	bl	8014e44 <iprintf>
 8009ec2:	e7c4      	b.n	8009e4e <tcp_slowtmr+0x2aa>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009ec4:	4b65      	ldr	r3, [pc, #404]	; (800a05c <tcp_slowtmr+0x4b8>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	42a3      	cmp	r3, r4
 8009eca:	d006      	beq.n	8009eda <tcp_slowtmr+0x336>
 8009ecc:	4b60      	ldr	r3, [pc, #384]	; (800a050 <tcp_slowtmr+0x4ac>)
 8009ece:	f240 5271 	movw	r2, #1393	; 0x571
 8009ed2:	4963      	ldr	r1, [pc, #396]	; (800a060 <tcp_slowtmr+0x4bc>)
 8009ed4:	4860      	ldr	r0, [pc, #384]	; (800a058 <tcp_slowtmr+0x4b4>)
 8009ed6:	f00a ffb5 	bl	8014e44 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009eda:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009edc:	4b5f      	ldr	r3, [pc, #380]	; (800a05c <tcp_slowtmr+0x4b8>)
 8009ede:	601a      	str	r2, [r3, #0]
 8009ee0:	e7b7      	b.n	8009e52 <tcp_slowtmr+0x2ae>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009ee2:	f104 0318 	add.w	r3, r4, #24
 8009ee6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009ee8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8009eea:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
 8009eee:	9002      	str	r0, [sp, #8]
 8009ef0:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8009ef2:	9001      	str	r0, [sp, #4]
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	4623      	mov	r3, r4
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f002 fc9b 	bl	800c834 <tcp_rst>
 8009efe:	e7aa      	b.n	8009e56 <tcp_slowtmr+0x2b2>
        TCP_EVENT_POLL(prev, err);
 8009f00:	2000      	movs	r0, #0
 8009f02:	e776      	b.n	8009df2 <tcp_slowtmr+0x24e>
          tcp_output(prev);
 8009f04:	4620      	mov	r0, r4
 8009f06:	f002 fd21 	bl	800c94c <tcp_output>
      prev = pcb;
 8009f0a:	4626      	mov	r6, r4
      pcb = pcb->next;
 8009f0c:	462c      	mov	r4, r5
 8009f0e:	e001      	b.n	8009f14 <tcp_slowtmr+0x370>
      prev = pcb;
 8009f10:	4626      	mov	r6, r4
      pcb = pcb->next;
 8009f12:	462c      	mov	r4, r5
  while (pcb != NULL) {
 8009f14:	2c00      	cmp	r4, #0
 8009f16:	d058      	beq.n	8009fca <tcp_slowtmr+0x426>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009f18:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f43f ae50 	beq.w	8009bc2 <tcp_slowtmr+0x1e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009f22:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	f43f ae53 	beq.w	8009bd2 <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009f2c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009f30:	2b0a      	cmp	r3, #10
 8009f32:	f43f ae56 	beq.w	8009be2 <tcp_slowtmr+0x3e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009f36:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8009f3a:	4b4a      	ldr	r3, [pc, #296]	; (800a064 <tcp_slowtmr+0x4c0>)
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	f43f ae57 	beq.w	8009bf2 <tcp_slowtmr+0x4e>
    pcb->last_timer = tcp_timer_ctr;
 8009f44:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009f48:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	f43f ae53 	beq.w	8009bf8 <tcp_slowtmr+0x54>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009f52:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8009f56:	2b0b      	cmp	r3, #11
 8009f58:	f63f aeca 	bhi.w	8009cf0 <tcp_slowtmr+0x14c>
      if (pcb->persist_backoff > 0) {
 8009f5c:	f894 50c1 	ldrb.w	r5, [r4, #193]	; 0xc1
 8009f60:	2d00      	cmp	r5, #0
 8009f62:	f43f ae6f 	beq.w	8009c44 <tcp_slowtmr+0xa0>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009f66:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009f6a:	b133      	cbz	r3, 8009f7a <tcp_slowtmr+0x3d6>
 8009f6c:	4b38      	ldr	r3, [pc, #224]	; (800a050 <tcp_slowtmr+0x4ac>)
 8009f6e:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009f72:	493d      	ldr	r1, [pc, #244]	; (800a068 <tcp_slowtmr+0x4c4>)
 8009f74:	4838      	ldr	r0, [pc, #224]	; (800a058 <tcp_slowtmr+0x4b4>)
 8009f76:	f00a ff65 	bl	8014e44 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009f7a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	f43f ae41 	beq.w	8009c06 <tcp_slowtmr+0x62>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009f84:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
 8009f88:	2b0b      	cmp	r3, #11
 8009f8a:	f63f aec1 	bhi.w	8009d10 <tcp_slowtmr+0x16c>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009f8e:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 8009f92:	3b01      	subs	r3, #1
 8009f94:	4a35      	ldr	r2, [pc, #212]	; (800a06c <tcp_slowtmr+0x4c8>)
 8009f96:	5cd2      	ldrb	r2, [r2, r3]
          if (pcb->persist_cnt < backoff_cnt) {
 8009f98:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d202      	bcs.n	8009fa6 <tcp_slowtmr+0x402>
            pcb->persist_cnt++;
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
          if (pcb->persist_cnt >= backoff_cnt) {
 8009fa6:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8009faa:	4293      	cmp	r3, r2
 8009fac:	f4ff aeb2 	bcc.w	8009d14 <tcp_slowtmr+0x170>
            if (pcb->snd_wnd == 0) {
 8009fb0:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
 8009fb4:	2900      	cmp	r1, #0
 8009fb6:	f47f ae2e 	bne.w	8009c16 <tcp_slowtmr+0x72>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009fba:	4620      	mov	r0, r4
 8009fbc:	f002 feda 	bl	800cd74 <tcp_zero_window_probe>
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	f43f ae2c 	beq.w	8009c1e <tcp_slowtmr+0x7a>
    pcb_remove = 0;
 8009fc6:	2500      	movs	r5, #0
 8009fc8:	e693      	b.n	8009cf2 <tcp_slowtmr+0x14e>
  pcb = tcp_tw_pcbs;
 8009fca:	4b29      	ldr	r3, [pc, #164]	; (800a070 <tcp_slowtmr+0x4cc>)
 8009fcc:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 8009fce:	e007      	b.n	8009fe0 <tcp_slowtmr+0x43c>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009fd0:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8009fd2:	4b28      	ldr	r3, [pc, #160]	; (800a074 <tcp_slowtmr+0x4d0>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	1a9b      	subs	r3, r3, r2
 8009fd8:	2bf0      	cmp	r3, #240	; 0xf0
 8009fda:	d80f      	bhi.n	8009ffc <tcp_slowtmr+0x458>
      prev = pcb;
 8009fdc:	462c      	mov	r4, r5
      pcb = pcb->next;
 8009fde:	6b6d      	ldr	r5, [r5, #52]	; 0x34
  while (pcb != NULL) {
 8009fe0:	2d00      	cmp	r5, #0
 8009fe2:	d032      	beq.n	800a04a <tcp_slowtmr+0x4a6>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009fe4:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8009fe8:	2b0a      	cmp	r3, #10
 8009fea:	d0f1      	beq.n	8009fd0 <tcp_slowtmr+0x42c>
 8009fec:	4b18      	ldr	r3, [pc, #96]	; (800a050 <tcp_slowtmr+0x4ac>)
 8009fee:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009ff2:	4921      	ldr	r1, [pc, #132]	; (800a078 <tcp_slowtmr+0x4d4>)
 8009ff4:	4818      	ldr	r0, [pc, #96]	; (800a058 <tcp_slowtmr+0x4b4>)
 8009ff6:	f00a ff25 	bl	8014e44 <iprintf>
 8009ffa:	e7e9      	b.n	8009fd0 <tcp_slowtmr+0x42c>
      tcp_pcb_purge(pcb);
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	f7ff f93d 	bl	800927c <tcp_pcb_purge>
      if (prev != NULL) {
 800a002:	b19c      	cbz	r4, 800a02c <tcp_slowtmr+0x488>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a004:	4b1a      	ldr	r3, [pc, #104]	; (800a070 <tcp_slowtmr+0x4cc>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	42ab      	cmp	r3, r5
 800a00a:	d007      	beq.n	800a01c <tcp_slowtmr+0x478>
        prev->next = pcb->next;
 800a00c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a00e:	6363      	str	r3, [r4, #52]	; 0x34
      pcb = pcb->next;
 800a010:	6b6e      	ldr	r6, [r5, #52]	; 0x34
      tcp_free(pcb2);
 800a012:	4628      	mov	r0, r5
 800a014:	f7ff f800 	bl	8009018 <tcp_free>
      pcb = pcb->next;
 800a018:	4635      	mov	r5, r6
 800a01a:	e7e1      	b.n	8009fe0 <tcp_slowtmr+0x43c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a01c:	4b0c      	ldr	r3, [pc, #48]	; (800a050 <tcp_slowtmr+0x4ac>)
 800a01e:	f240 52af 	movw	r2, #1455	; 0x5af
 800a022:	4916      	ldr	r1, [pc, #88]	; (800a07c <tcp_slowtmr+0x4d8>)
 800a024:	480c      	ldr	r0, [pc, #48]	; (800a058 <tcp_slowtmr+0x4b4>)
 800a026:	f00a ff0d 	bl	8014e44 <iprintf>
 800a02a:	e7ef      	b.n	800a00c <tcp_slowtmr+0x468>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a02c:	4b10      	ldr	r3, [pc, #64]	; (800a070 <tcp_slowtmr+0x4cc>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	42ab      	cmp	r3, r5
 800a032:	d006      	beq.n	800a042 <tcp_slowtmr+0x49e>
 800a034:	4b06      	ldr	r3, [pc, #24]	; (800a050 <tcp_slowtmr+0x4ac>)
 800a036:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a03a:	4911      	ldr	r1, [pc, #68]	; (800a080 <tcp_slowtmr+0x4dc>)
 800a03c:	4806      	ldr	r0, [pc, #24]	; (800a058 <tcp_slowtmr+0x4b4>)
 800a03e:	f00a ff01 	bl	8014e44 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a042:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800a044:	4b0a      	ldr	r3, [pc, #40]	; (800a070 <tcp_slowtmr+0x4cc>)
 800a046:	601a      	str	r2, [r3, #0]
 800a048:	e7e2      	b.n	800a010 <tcp_slowtmr+0x46c>
}
 800a04a:	b004      	add	sp, #16
 800a04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a050:	080170f4 	.word	0x080170f4
 800a054:	0801725c 	.word	0x0801725c
 800a058:	08015d2c 	.word	0x08015d2c
 800a05c:	20008610 	.word	0x20008610
 800a060:	08017288 	.word	0x08017288
 800a064:	20001742 	.word	0x20001742
 800a068:	080171f0 	.word	0x080171f0
 800a06c:	08017068 	.word	0x08017068
 800a070:	20008620 	.word	0x20008620
 800a074:	20008614 	.word	0x20008614
 800a078:	080172b4 	.word	0x080172b4
 800a07c:	080172e4 	.word	0x080172e4
 800a080:	0801730c 	.word	0x0801730c

0800a084 <tcp_tmr>:
{
 800a084:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800a086:	f7ff fd43 	bl	8009b10 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800a08a:	4a06      	ldr	r2, [pc, #24]	; (800a0a4 <tcp_tmr+0x20>)
 800a08c:	7813      	ldrb	r3, [r2, #0]
 800a08e:	3301      	adds	r3, #1
 800a090:	b2db      	uxtb	r3, r3
 800a092:	7013      	strb	r3, [r2, #0]
 800a094:	f013 0f01 	tst.w	r3, #1
 800a098:	d100      	bne.n	800a09c <tcp_tmr+0x18>
}
 800a09a:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 800a09c:	f7ff fd82 	bl	8009ba4 <tcp_slowtmr>
}
 800a0a0:	e7fb      	b.n	800a09a <tcp_tmr+0x16>
 800a0a2:	bf00      	nop
 800a0a4:	20001741 	.word	0x20001741

0800a0a8 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 800a0a8:	4a0a      	ldr	r2, [pc, #40]	; (800a0d4 <tcp_get_next_optbyte+0x2c>)
 800a0aa:	8813      	ldrh	r3, [r2, #0]
 800a0ac:	1c59      	adds	r1, r3, #1
 800a0ae:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a0b0:	4a09      	ldr	r2, [pc, #36]	; (800a0d8 <tcp_get_next_optbyte+0x30>)
 800a0b2:	6811      	ldr	r1, [r2, #0]
 800a0b4:	b149      	cbz	r1, 800a0ca <tcp_get_next_optbyte+0x22>
 800a0b6:	4a09      	ldr	r2, [pc, #36]	; (800a0dc <tcp_get_next_optbyte+0x34>)
 800a0b8:	8812      	ldrh	r2, [r2, #0]
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d305      	bcc.n	800a0ca <tcp_get_next_optbyte+0x22>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	b2d2      	uxtb	r2, r2
 800a0c2:	1a9b      	subs	r3, r3, r2
 800a0c4:	b2db      	uxtb	r3, r3
    return tcphdr_opt2[idx];
 800a0c6:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800a0c8:	4770      	bx	lr
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a0ca:	4a05      	ldr	r2, [pc, #20]	; (800a0e0 <tcp_get_next_optbyte+0x38>)
 800a0cc:	6812      	ldr	r2, [r2, #0]
    return opts[optidx];
 800a0ce:	4413      	add	r3, r2
 800a0d0:	7d18      	ldrb	r0, [r3, #20]
 800a0d2:	4770      	bx	lr
 800a0d4:	2000176c 	.word	0x2000176c
 800a0d8:	20001778 	.word	0x20001778
 800a0dc:	20001774 	.word	0x20001774
 800a0e0:	20001770 	.word	0x20001770

0800a0e4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a0e4:	b538      	push	{r3, r4, r5, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d031      	beq.n	800a150 <tcp_parseopt+0x6c>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a0ec:	4b22      	ldr	r3, [pc, #136]	; (800a178 <tcp_parseopt+0x94>)
 800a0ee:	881b      	ldrh	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d03f      	beq.n	800a174 <tcp_parseopt+0x90>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a0f4:	4b21      	ldr	r3, [pc, #132]	; (800a17c <tcp_parseopt+0x98>)
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	801a      	strh	r2, [r3, #0]
 800a0fa:	4b20      	ldr	r3, [pc, #128]	; (800a17c <tcp_parseopt+0x98>)
 800a0fc:	881a      	ldrh	r2, [r3, #0]
 800a0fe:	4b1e      	ldr	r3, [pc, #120]	; (800a178 <tcp_parseopt+0x94>)
 800a100:	881b      	ldrh	r3, [r3, #0]
 800a102:	429a      	cmp	r2, r3
 800a104:	d236      	bcs.n	800a174 <tcp_parseopt+0x90>
      u8_t opt = tcp_get_next_optbyte();
 800a106:	f7ff ffcf 	bl	800a0a8 <tcp_get_next_optbyte>
      switch (opt) {
 800a10a:	2801      	cmp	r0, #1
 800a10c:	d0f5      	beq.n	800a0fa <tcp_parseopt+0x16>
 800a10e:	b388      	cbz	r0, 800a174 <tcp_parseopt+0x90>
 800a110:	2802      	cmp	r0, #2
 800a112:	d125      	bne.n	800a160 <tcp_parseopt+0x7c>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a114:	f7ff ffc8 	bl	800a0a8 <tcp_get_next_optbyte>
 800a118:	2804      	cmp	r0, #4
 800a11a:	d12b      	bne.n	800a174 <tcp_parseopt+0x90>
 800a11c:	4b17      	ldr	r3, [pc, #92]	; (800a17c <tcp_parseopt+0x98>)
 800a11e:	881b      	ldrh	r3, [r3, #0]
 800a120:	3302      	adds	r3, #2
 800a122:	4a15      	ldr	r2, [pc, #84]	; (800a178 <tcp_parseopt+0x94>)
 800a124:	8812      	ldrh	r2, [r2, #0]
 800a126:	4293      	cmp	r3, r2
 800a128:	dc24      	bgt.n	800a174 <tcp_parseopt+0x90>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a12a:	f7ff ffbd 	bl	800a0a8 <tcp_get_next_optbyte>
 800a12e:	b285      	uxth	r5, r0
 800a130:	022d      	lsls	r5, r5, #8
 800a132:	b2ad      	uxth	r5, r5
          mss |= tcp_get_next_optbyte();
 800a134:	f7ff ffb8 	bl	800a0a8 <tcp_get_next_optbyte>
 800a138:	b280      	uxth	r0, r0
 800a13a:	4305      	orrs	r5, r0
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a13c:	1e6b      	subs	r3, r5, #1
 800a13e:	b29b      	uxth	r3, r3
 800a140:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a144:	d301      	bcc.n	800a14a <tcp_parseopt+0x66>
 800a146:	f44f 7506 	mov.w	r5, #536	; 0x218
 800a14a:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
          break;
 800a14e:	e7d4      	b.n	800a0fa <tcp_parseopt+0x16>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a150:	4b0b      	ldr	r3, [pc, #44]	; (800a180 <tcp_parseopt+0x9c>)
 800a152:	f240 727d 	movw	r2, #1917	; 0x77d
 800a156:	490b      	ldr	r1, [pc, #44]	; (800a184 <tcp_parseopt+0xa0>)
 800a158:	480b      	ldr	r0, [pc, #44]	; (800a188 <tcp_parseopt+0xa4>)
 800a15a:	f00a fe73 	bl	8014e44 <iprintf>
 800a15e:	e7c5      	b.n	800a0ec <tcp_parseopt+0x8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a160:	f7ff ffa2 	bl	800a0a8 <tcp_get_next_optbyte>
          if (data < 2) {
 800a164:	2801      	cmp	r0, #1
 800a166:	d905      	bls.n	800a174 <tcp_parseopt+0x90>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a168:	4b04      	ldr	r3, [pc, #16]	; (800a17c <tcp_parseopt+0x98>)
 800a16a:	881a      	ldrh	r2, [r3, #0]
 800a16c:	4410      	add	r0, r2
 800a16e:	3802      	subs	r0, #2
 800a170:	8018      	strh	r0, [r3, #0]
 800a172:	e7c2      	b.n	800a0fa <tcp_parseopt+0x16>
      }
    }
  }
}
 800a174:	bd38      	pop	{r3, r4, r5, pc}
 800a176:	bf00      	nop
 800a178:	2000177c 	.word	0x2000177c
 800a17c:	2000176c 	.word	0x2000176c
 800a180:	080175a0 	.word	0x080175a0
 800a184:	080175d4 	.word	0x080175d4
 800a188:	08015d2c 	.word	0x08015d2c

0800a18c <tcp_input_delayed_close>:
{
 800a18c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a18e:	4604      	mov	r4, r0
 800a190:	b1c8      	cbz	r0, 800a1c6 <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 800a192:	4b12      	ldr	r3, [pc, #72]	; (800a1dc <tcp_input_delayed_close+0x50>)
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	f013 0f10 	tst.w	r3, #16
 800a19a:	d01c      	beq.n	800a1d6 <tcp_input_delayed_close+0x4a>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a19c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a1a0:	f013 0f10 	tst.w	r3, #16
 800a1a4:	d106      	bne.n	800a1b4 <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a1a6:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800a1aa:	b11b      	cbz	r3, 800a1b4 <tcp_input_delayed_close+0x28>
 800a1ac:	f06f 010e 	mvn.w	r1, #14
 800a1b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a1b2:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	480a      	ldr	r0, [pc, #40]	; (800a1e0 <tcp_input_delayed_close+0x54>)
 800a1b8:	f7ff f89a 	bl	80092f0 <tcp_pcb_remove>
    tcp_free(pcb);
 800a1bc:	4620      	mov	r0, r4
 800a1be:	f7fe ff2b 	bl	8009018 <tcp_free>
    return 1;
 800a1c2:	2001      	movs	r0, #1
}
 800a1c4:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a1c6:	4b07      	ldr	r3, [pc, #28]	; (800a1e4 <tcp_input_delayed_close+0x58>)
 800a1c8:	f240 225a 	movw	r2, #602	; 0x25a
 800a1cc:	4906      	ldr	r1, [pc, #24]	; (800a1e8 <tcp_input_delayed_close+0x5c>)
 800a1ce:	4807      	ldr	r0, [pc, #28]	; (800a1ec <tcp_input_delayed_close+0x60>)
 800a1d0:	f00a fe38 	bl	8014e44 <iprintf>
 800a1d4:	e7dd      	b.n	800a192 <tcp_input_delayed_close+0x6>
  return 0;
 800a1d6:	2000      	movs	r0, #0
 800a1d8:	e7f4      	b.n	800a1c4 <tcp_input_delayed_close+0x38>
 800a1da:	bf00      	nop
 800a1dc:	20001764 	.word	0x20001764
 800a1e0:	20008610 	.word	0x20008610
 800a1e4:	080175a0 	.word	0x080175a0
 800a1e8:	08017530 	.word	0x08017530
 800a1ec:	08015d2c 	.word	0x08015d2c

0800a1f0 <tcp_timewait_input>:
  if (flags & TCP_RST) {
 800a1f0:	4b24      	ldr	r3, [pc, #144]	; (800a284 <tcp_timewait_input+0x94>)
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	f013 0f04 	tst.w	r3, #4
 800a1f8:	d143      	bne.n	800a282 <tcp_timewait_input+0x92>
{
 800a1fa:	b530      	push	{r4, r5, lr}
 800a1fc:	b085      	sub	sp, #20
 800a1fe:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a200:	b930      	cbnz	r0, 800a210 <tcp_timewait_input+0x20>
 800a202:	4b21      	ldr	r3, [pc, #132]	; (800a288 <tcp_timewait_input+0x98>)
 800a204:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a208:	4920      	ldr	r1, [pc, #128]	; (800a28c <tcp_timewait_input+0x9c>)
 800a20a:	4821      	ldr	r0, [pc, #132]	; (800a290 <tcp_timewait_input+0xa0>)
 800a20c:	f00a fe1a 	bl	8014e44 <iprintf>
  if (flags & TCP_SYN) {
 800a210:	4b1c      	ldr	r3, [pc, #112]	; (800a284 <tcp_timewait_input+0x94>)
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	f013 0f02 	tst.w	r3, #2
 800a218:	d01f      	beq.n	800a25a <tcp_timewait_input+0x6a>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a21a:	4b1e      	ldr	r3, [pc, #120]	; (800a294 <tcp_timewait_input+0xa4>)
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a220:	1ad1      	subs	r1, r2, r3
 800a222:	2900      	cmp	r1, #0
 800a224:	db1f      	blt.n	800a266 <tcp_timewait_input+0x76>
 800a226:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800a22a:	440b      	add	r3, r1
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	2b00      	cmp	r3, #0
 800a230:	dc19      	bgt.n	800a266 <tcp_timewait_input+0x76>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a232:	4b19      	ldr	r3, [pc, #100]	; (800a298 <tcp_timewait_input+0xa8>)
 800a234:	6819      	ldr	r1, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a236:	4b19      	ldr	r3, [pc, #100]	; (800a29c <tcp_timewait_input+0xac>)
 800a238:	4819      	ldr	r0, [pc, #100]	; (800a2a0 <tcp_timewait_input+0xb0>)
 800a23a:	8800      	ldrh	r0, [r0, #0]
 800a23c:	880d      	ldrh	r5, [r1, #0]
 800a23e:	9502      	str	r5, [sp, #8]
 800a240:	8849      	ldrh	r1, [r1, #2]
 800a242:	9101      	str	r1, [sp, #4]
 800a244:	f1a3 0118 	sub.w	r1, r3, #24
 800a248:	9100      	str	r1, [sp, #0]
 800a24a:	4402      	add	r2, r0
 800a24c:	4915      	ldr	r1, [pc, #84]	; (800a2a4 <tcp_timewait_input+0xb4>)
 800a24e:	6809      	ldr	r1, [r1, #0]
 800a250:	4620      	mov	r0, r4
 800a252:	f002 faef 	bl	800c834 <tcp_rst>
}
 800a256:	b005      	add	sp, #20
 800a258:	bd30      	pop	{r4, r5, pc}
  } else if (flags & TCP_FIN) {
 800a25a:	f013 0f01 	tst.w	r3, #1
 800a25e:	d002      	beq.n	800a266 <tcp_timewait_input+0x76>
    pcb->tmr = tcp_ticks;
 800a260:	4b11      	ldr	r3, [pc, #68]	; (800a2a8 <tcp_timewait_input+0xb8>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	64a3      	str	r3, [r4, #72]	; 0x48
  if ((tcplen > 0)) {
 800a266:	4b0e      	ldr	r3, [pc, #56]	; (800a2a0 <tcp_timewait_input+0xb0>)
 800a268:	881b      	ldrh	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0f3      	beq.n	800a256 <tcp_timewait_input+0x66>
    tcp_ack_now(pcb);
 800a26e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a272:	f043 0302 	orr.w	r3, r3, #2
 800a276:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    tcp_output(pcb);
 800a27a:	4620      	mov	r0, r4
 800a27c:	f002 fb66 	bl	800c94c <tcp_output>
 800a280:	e7e9      	b.n	800a256 <tcp_timewait_input+0x66>
 800a282:	4770      	bx	lr
 800a284:	20001748 	.word	0x20001748
 800a288:	080175a0 	.word	0x080175a0
 800a28c:	080177ac 	.word	0x080177ac
 800a290:	08015d2c 	.word	0x08015d2c
 800a294:	20001768 	.word	0x20001768
 800a298:	20001770 	.word	0x20001770
 800a29c:	20004bd8 	.word	0x20004bd8
 800a2a0:	2000177e 	.word	0x2000177e
 800a2a4:	20001744 	.word	0x20001744
 800a2a8:	20008614 	.word	0x20008614

0800a2ac <tcp_listen_input>:
  if (flags & TCP_RST) {
 800a2ac:	4b70      	ldr	r3, [pc, #448]	; (800a470 <tcp_listen_input+0x1c4>)
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	f013 0f04 	tst.w	r3, #4
 800a2b4:	f040 80db 	bne.w	800a46e <tcp_listen_input+0x1c2>
{
 800a2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ba:	b085      	sub	sp, #20
 800a2bc:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a2be:	b148      	cbz	r0, 800a2d4 <tcp_listen_input+0x28>
  if (flags & TCP_ACK) {
 800a2c0:	4b6b      	ldr	r3, [pc, #428]	; (800a470 <tcp_listen_input+0x1c4>)
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	f013 0f10 	tst.w	r3, #16
 800a2c8:	d10c      	bne.n	800a2e4 <tcp_listen_input+0x38>
  } else if (flags & TCP_SYN) {
 800a2ca:	f013 0f02 	tst.w	r3, #2
 800a2ce:	d11e      	bne.n	800a30e <tcp_listen_input+0x62>
}
 800a2d0:	b005      	add	sp, #20
 800a2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a2d4:	4b67      	ldr	r3, [pc, #412]	; (800a474 <tcp_listen_input+0x1c8>)
 800a2d6:	f240 2281 	movw	r2, #641	; 0x281
 800a2da:	4967      	ldr	r1, [pc, #412]	; (800a478 <tcp_listen_input+0x1cc>)
 800a2dc:	4867      	ldr	r0, [pc, #412]	; (800a47c <tcp_listen_input+0x1d0>)
 800a2de:	f00a fdb1 	bl	8014e44 <iprintf>
 800a2e2:	e7ed      	b.n	800a2c0 <tcp_listen_input+0x14>
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a2e4:	4b66      	ldr	r3, [pc, #408]	; (800a480 <tcp_listen_input+0x1d4>)
 800a2e6:	6818      	ldr	r0, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2e8:	4b66      	ldr	r3, [pc, #408]	; (800a484 <tcp_listen_input+0x1d8>)
 800a2ea:	4a67      	ldr	r2, [pc, #412]	; (800a488 <tcp_listen_input+0x1dc>)
 800a2ec:	8814      	ldrh	r4, [r2, #0]
 800a2ee:	4a67      	ldr	r2, [pc, #412]	; (800a48c <tcp_listen_input+0x1e0>)
 800a2f0:	6812      	ldr	r2, [r2, #0]
 800a2f2:	4967      	ldr	r1, [pc, #412]	; (800a490 <tcp_listen_input+0x1e4>)
 800a2f4:	6809      	ldr	r1, [r1, #0]
 800a2f6:	8806      	ldrh	r6, [r0, #0]
 800a2f8:	9602      	str	r6, [sp, #8]
 800a2fa:	8840      	ldrh	r0, [r0, #2]
 800a2fc:	9001      	str	r0, [sp, #4]
 800a2fe:	f1a3 0018 	sub.w	r0, r3, #24
 800a302:	9000      	str	r0, [sp, #0]
 800a304:	4422      	add	r2, r4
 800a306:	4628      	mov	r0, r5
 800a308:	f002 fa94 	bl	800c834 <tcp_rst>
 800a30c:	e7e0      	b.n	800a2d0 <tcp_listen_input+0x24>
    npcb = tcp_alloc(pcb->prio);
 800a30e:	f895 003d 	ldrb.w	r0, [r5, #61]	; 0x3d
 800a312:	f7ff fa53 	bl	80097bc <tcp_alloc>
    if (npcb == NULL) {
 800a316:	4604      	mov	r4, r0
 800a318:	2800      	cmp	r0, #0
 800a31a:	d078      	beq.n	800a40e <tcp_listen_input+0x162>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a31c:	4b5d      	ldr	r3, [pc, #372]	; (800a494 <tcp_listen_input+0x1e8>)
 800a31e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a322:	7502      	strb	r2, [r0, #20]
 800a324:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a328:	2b06      	cmp	r3, #6
 800a32a:	d07a      	beq.n	800a422 <tcp_listen_input+0x176>
 800a32c:	4b59      	ldr	r3, [pc, #356]	; (800a494 <tcp_listen_input+0x1e8>)
 800a32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a330:	6003      	str	r3, [r0, #0]
 800a332:	2300      	movs	r3, #0
 800a334:	60c3      	str	r3, [r0, #12]
 800a336:	6083      	str	r3, [r0, #8]
 800a338:	6043      	str	r3, [r0, #4]
 800a33a:	7403      	strb	r3, [r0, #16]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a33c:	4b55      	ldr	r3, [pc, #340]	; (800a494 <tcp_listen_input+0x1e8>)
 800a33e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a342:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800a346:	2b06      	cmp	r3, #6
 800a348:	d078      	beq.n	800a43c <tcp_listen_input+0x190>
 800a34a:	4b52      	ldr	r3, [pc, #328]	; (800a494 <tcp_listen_input+0x1e8>)
 800a34c:	695b      	ldr	r3, [r3, #20]
 800a34e:	61a3      	str	r3, [r4, #24]
 800a350:	2300      	movs	r3, #0
 800a352:	6263      	str	r3, [r4, #36]	; 0x24
 800a354:	6223      	str	r3, [r4, #32]
 800a356:	61e3      	str	r3, [r4, #28]
 800a358:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    npcb->local_port = pcb->local_port;
 800a35c:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
 800a35e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    npcb->remote_port = tcphdr->src;
 800a360:	4e47      	ldr	r6, [pc, #284]	; (800a480 <tcp_listen_input+0x1d4>)
 800a362:	6833      	ldr	r3, [r6, #0]
 800a364:	881b      	ldrh	r3, [r3, #0]
 800a366:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
    npcb->state = SYN_RCVD;
 800a36a:	2303      	movs	r3, #3
 800a36c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    npcb->rcv_nxt = seqno + 1;
 800a370:	4f46      	ldr	r7, [pc, #280]	; (800a48c <tcp_listen_input+0x1e0>)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	3301      	adds	r3, #1
 800a376:	64e3      	str	r3, [r4, #76]	; 0x4c
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a378:	6563      	str	r3, [r4, #84]	; 0x54
    iss = tcp_next_iss(npcb);
 800a37a:	4620      	mov	r0, r4
 800a37c:	f7fe ff20 	bl	80091c0 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 800a380:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    npcb->snd_nxt = iss;
 800a384:	67a0      	str	r0, [r4, #120]	; 0x78
    npcb->lastack = iss;
 800a386:	66e0      	str	r0, [r4, #108]	; 0x6c
    npcb->snd_lbb = iss;
 800a388:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	3b01      	subs	r3, #1
 800a390:	67e3      	str	r3, [r4, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 800a392:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a394:	63a3      	str	r3, [r4, #56]	; 0x38
    npcb->listener = pcb;
 800a396:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a39a:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800a39e:	f003 030c 	and.w	r3, r3, #12
 800a3a2:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    npcb->netif_idx = pcb->netif_idx;
 800a3a6:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800a3aa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    TCP_REG_ACTIVE(npcb);
 800a3ae:	4b3a      	ldr	r3, [pc, #232]	; (800a498 <tcp_listen_input+0x1ec>)
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	6362      	str	r2, [r4, #52]	; 0x34
 800a3b4:	601c      	str	r4, [r3, #0]
 800a3b6:	f002 fdc1 	bl	800cf3c <tcp_timer_needed>
 800a3ba:	4b38      	ldr	r3, [pc, #224]	; (800a49c <tcp_listen_input+0x1f0>)
 800a3bc:	2201      	movs	r2, #1
 800a3be:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f7ff fe8f 	bl	800a0e4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a3c6:	6833      	ldr	r3, [r6, #0]
 800a3c8:	89db      	ldrh	r3, [r3, #14]
 800a3ca:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a3ce:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a3d2:	f8b4 505a 	ldrh.w	r5, [r4, #90]	; 0x5a
 800a3d6:	f114 0618 	adds.w	r6, r4, #24
 800a3da:	d003      	beq.n	800a3e4 <tcp_listen_input+0x138>
 800a3dc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a3e0:	2b06      	cmp	r3, #6
 800a3e2:	d039      	beq.n	800a458 <tcp_listen_input+0x1ac>
 800a3e4:	f104 0018 	add.w	r0, r4, #24
 800a3e8:	f005 fe20 	bl	801002c <ip4_route>
 800a3ec:	4601      	mov	r1, r0
 800a3ee:	4632      	mov	r2, r6
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	f7fe ff01 	bl	80091f8 <tcp_eff_send_mss_netif>
 800a3f6:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a3fa:	2112      	movs	r1, #18
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	f002 f84f 	bl	800c4a0 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800a402:	2800      	cmp	r0, #0
 800a404:	d12e      	bne.n	800a464 <tcp_listen_input+0x1b8>
    tcp_output(npcb);
 800a406:	4620      	mov	r0, r4
 800a408:	f002 faa0 	bl	800c94c <tcp_output>
 800a40c:	e760      	b.n	800a2d0 <tcp_listen_input+0x24>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a40e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800a410:	2b00      	cmp	r3, #0
 800a412:	f43f af5d 	beq.w	800a2d0 <tcp_listen_input+0x24>
 800a416:	f04f 32ff 	mov.w	r2, #4294967295
 800a41a:	2100      	movs	r1, #0
 800a41c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800a41e:	4798      	blx	r3
 800a420:	e756      	b.n	800a2d0 <tcp_listen_input+0x24>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a422:	4b1c      	ldr	r3, [pc, #112]	; (800a494 <tcp_listen_input+0x1e8>)
 800a424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a426:	6002      	str	r2, [r0, #0]
 800a428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a42a:	6042      	str	r2, [r0, #4]
 800a42c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a42e:	6082      	str	r2, [r0, #8]
 800a430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a432:	60c2      	str	r2, [r0, #12]
 800a434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a438:	7403      	strb	r3, [r0, #16]
 800a43a:	e77f      	b.n	800a33c <tcp_listen_input+0x90>
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a43c:	4b15      	ldr	r3, [pc, #84]	; (800a494 <tcp_listen_input+0x1e8>)
 800a43e:	695a      	ldr	r2, [r3, #20]
 800a440:	61a2      	str	r2, [r4, #24]
 800a442:	699a      	ldr	r2, [r3, #24]
 800a444:	61e2      	str	r2, [r4, #28]
 800a446:	69da      	ldr	r2, [r3, #28]
 800a448:	6222      	str	r2, [r4, #32]
 800a44a:	6a1a      	ldr	r2, [r3, #32]
 800a44c:	6262      	str	r2, [r4, #36]	; 0x24
 800a44e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a452:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800a456:	e781      	b.n	800a35c <tcp_listen_input+0xb0>
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a458:	4631      	mov	r1, r6
 800a45a:	4620      	mov	r0, r4
 800a45c:	f006 fdce 	bl	8010ffc <ip6_route>
 800a460:	4601      	mov	r1, r0
 800a462:	e7c4      	b.n	800a3ee <tcp_listen_input+0x142>
      tcp_abandon(npcb, 0);
 800a464:	2100      	movs	r1, #0
 800a466:	4620      	mov	r0, r4
 800a468:	f7fe ffb2 	bl	80093d0 <tcp_abandon>
      return;
 800a46c:	e730      	b.n	800a2d0 <tcp_listen_input+0x24>
 800a46e:	4770      	bx	lr
 800a470:	20001748 	.word	0x20001748
 800a474:	080175a0 	.word	0x080175a0
 800a478:	08017558 	.word	0x08017558
 800a47c:	08015d2c 	.word	0x08015d2c
 800a480:	20001770 	.word	0x20001770
 800a484:	20004bd8 	.word	0x20004bd8
 800a488:	2000177e 	.word	0x2000177e
 800a48c:	20001768 	.word	0x20001768
 800a490:	20001744 	.word	0x20001744
 800a494:	20004bac 	.word	0x20004bac
 800a498:	20008610 	.word	0x20008610
 800a49c:	2000860c 	.word	0x2000860c

0800a4a0 <tcp_free_acked_segments>:
{
 800a4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a4:	4607      	mov	r7, r0
 800a4a6:	460c      	mov	r4, r1
 800a4a8:	4698      	mov	r8, r3
  while (seg_list != NULL &&
 800a4aa:	e008      	b.n	800a4be <tcp_free_acked_segments+0x1e>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a4ac:	4b25      	ldr	r3, [pc, #148]	; (800a544 <tcp_free_acked_segments+0xa4>)
 800a4ae:	f240 4257 	movw	r2, #1111	; 0x457
 800a4b2:	4925      	ldr	r1, [pc, #148]	; (800a548 <tcp_free_acked_segments+0xa8>)
 800a4b4:	4825      	ldr	r0, [pc, #148]	; (800a54c <tcp_free_acked_segments+0xac>)
 800a4b6:	f00a fcc5 	bl	8014e44 <iprintf>
 800a4ba:	e020      	b.n	800a4fe <tcp_free_acked_segments+0x5e>
{
 800a4bc:	462c      	mov	r4, r5
  while (seg_list != NULL &&
 800a4be:	2c00      	cmp	r4, #0
 800a4c0:	d03d      	beq.n	800a53e <tcp_free_acked_segments+0x9e>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a4c2:	68e3      	ldr	r3, [r4, #12]
 800a4c4:	6858      	ldr	r0, [r3, #4]
 800a4c6:	f7fc fe88 	bl	80071da <lwip_htonl>
 800a4ca:	4605      	mov	r5, r0
 800a4cc:	8926      	ldrh	r6, [r4, #8]
 800a4ce:	68e3      	ldr	r3, [r4, #12]
 800a4d0:	8998      	ldrh	r0, [r3, #12]
 800a4d2:	f7fc fe7d 	bl	80071d0 <lwip_htons>
 800a4d6:	f010 0f03 	tst.w	r0, #3
 800a4da:	d02e      	beq.n	800a53a <tcp_free_acked_segments+0x9a>
 800a4dc:	2301      	movs	r3, #1
 800a4de:	441e      	add	r6, r3
 800a4e0:	4435      	add	r5, r6
 800a4e2:	4b1b      	ldr	r3, [pc, #108]	; (800a550 <tcp_free_acked_segments+0xb0>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	1aed      	subs	r5, r5, r3
  while (seg_list != NULL &&
 800a4e8:	2d00      	cmp	r5, #0
 800a4ea:	dc28      	bgt.n	800a53e <tcp_free_acked_segments+0x9e>
    seg_list = seg_list->next;
 800a4ec:	6825      	ldr	r5, [r4, #0]
    clen = pbuf_clen(next->p);
 800a4ee:	6860      	ldr	r0, [r4, #4]
 800a4f0:	f7fe fa94 	bl	8008a1c <pbuf_clen>
 800a4f4:	4606      	mov	r6, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a4f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a4fa:	4283      	cmp	r3, r0
 800a4fc:	d3d6      	bcc.n	800a4ac <tcp_free_acked_segments+0xc>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a4fe:	f8b7 008e 	ldrh.w	r0, [r7, #142]	; 0x8e
 800a502:	1b80      	subs	r0, r0, r6
 800a504:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a508:	8923      	ldrh	r3, [r4, #8]
 800a50a:	4a12      	ldr	r2, [pc, #72]	; (800a554 <tcp_free_acked_segments+0xb4>)
 800a50c:	8811      	ldrh	r1, [r2, #0]
 800a50e:	440b      	add	r3, r1
 800a510:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 800a512:	4620      	mov	r0, r4
 800a514:	f7fe fe18 	bl	8009148 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800a518:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d0cd      	beq.n	800a4bc <tcp_free_acked_segments+0x1c>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a520:	2d00      	cmp	r5, #0
 800a522:	d1cb      	bne.n	800a4bc <tcp_free_acked_segments+0x1c>
 800a524:	f1b8 0f00 	cmp.w	r8, #0
 800a528:	d1c8      	bne.n	800a4bc <tcp_free_acked_segments+0x1c>
 800a52a:	4b06      	ldr	r3, [pc, #24]	; (800a544 <tcp_free_acked_segments+0xa4>)
 800a52c:	f240 4262 	movw	r2, #1122	; 0x462
 800a530:	4909      	ldr	r1, [pc, #36]	; (800a558 <tcp_free_acked_segments+0xb8>)
 800a532:	4806      	ldr	r0, [pc, #24]	; (800a54c <tcp_free_acked_segments+0xac>)
 800a534:	f00a fc86 	bl	8014e44 <iprintf>
 800a538:	e7c0      	b.n	800a4bc <tcp_free_acked_segments+0x1c>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a53a:	2300      	movs	r3, #0
 800a53c:	e7cf      	b.n	800a4de <tcp_free_acked_segments+0x3e>
}
 800a53e:	4620      	mov	r0, r4
 800a540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a544:	080175a0 	.word	0x080175a0
 800a548:	08017374 	.word	0x08017374
 800a54c:	08015d2c 	.word	0x08015d2c
 800a550:	20001744 	.word	0x20001744
 800a554:	2000175c 	.word	0x2000175c
 800a558:	0801739c 	.word	0x0801739c

0800a55c <tcp_oos_insert_segment>:
{
 800a55c:	b570      	push	{r4, r5, r6, lr}
 800a55e:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a560:	4605      	mov	r5, r0
 800a562:	b160      	cbz	r0, 800a57e <tcp_oos_insert_segment+0x22>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a564:	68eb      	ldr	r3, [r5, #12]
 800a566:	8998      	ldrh	r0, [r3, #12]
 800a568:	f7fc fe32 	bl	80071d0 <lwip_htons>
 800a56c:	f010 0f01 	tst.w	r0, #1
 800a570:	d01a      	beq.n	800a5a8 <tcp_oos_insert_segment+0x4c>
    tcp_segs_free(next);
 800a572:	4620      	mov	r0, r4
 800a574:	f7fe fdf5 	bl	8009162 <tcp_segs_free>
    next = NULL;
 800a578:	2400      	movs	r4, #0
  cseg->next = next;
 800a57a:	602c      	str	r4, [r5, #0]
}
 800a57c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a57e:	4b1d      	ldr	r3, [pc, #116]	; (800a5f4 <tcp_oos_insert_segment+0x98>)
 800a580:	f240 421f 	movw	r2, #1055	; 0x41f
 800a584:	491c      	ldr	r1, [pc, #112]	; (800a5f8 <tcp_oos_insert_segment+0x9c>)
 800a586:	481d      	ldr	r0, [pc, #116]	; (800a5fc <tcp_oos_insert_segment+0xa0>)
 800a588:	f00a fc5c 	bl	8014e44 <iprintf>
 800a58c:	e7ea      	b.n	800a564 <tcp_oos_insert_segment+0x8>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a58e:	68eb      	ldr	r3, [r5, #12]
 800a590:	899e      	ldrh	r6, [r3, #12]
 800a592:	2001      	movs	r0, #1
 800a594:	f7fc fe1c 	bl	80071d0 <lwip_htons>
 800a598:	68eb      	ldr	r3, [r5, #12]
 800a59a:	4330      	orrs	r0, r6
 800a59c:	8198      	strh	r0, [r3, #12]
      next = next->next;
 800a59e:	6826      	ldr	r6, [r4, #0]
      tcp_seg_free(old_seg);
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	f7fe fdd1 	bl	8009148 <tcp_seg_free>
      next = next->next;
 800a5a6:	4634      	mov	r4, r6
    while (next &&
 800a5a8:	b18c      	cbz	r4, 800a5ce <tcp_oos_insert_segment+0x72>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a5aa:	892b      	ldrh	r3, [r5, #8]
 800a5ac:	4a14      	ldr	r2, [pc, #80]	; (800a600 <tcp_oos_insert_segment+0xa4>)
 800a5ae:	6812      	ldr	r2, [r2, #0]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	68e1      	ldr	r1, [r4, #12]
 800a5b4:	684a      	ldr	r2, [r1, #4]
 800a5b6:	8920      	ldrh	r0, [r4, #8]
 800a5b8:	4402      	add	r2, r0
 800a5ba:	1a9b      	subs	r3, r3, r2
    while (next &&
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	db06      	blt.n	800a5ce <tcp_oos_insert_segment+0x72>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a5c0:	8988      	ldrh	r0, [r1, #12]
 800a5c2:	f7fc fe05 	bl	80071d0 <lwip_htons>
 800a5c6:	f010 0f01 	tst.w	r0, #1
 800a5ca:	d0e8      	beq.n	800a59e <tcp_oos_insert_segment+0x42>
 800a5cc:	e7df      	b.n	800a58e <tcp_oos_insert_segment+0x32>
    if (next &&
 800a5ce:	2c00      	cmp	r4, #0
 800a5d0:	d0d3      	beq.n	800a57a <tcp_oos_insert_segment+0x1e>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a5d2:	892b      	ldrh	r3, [r5, #8]
 800a5d4:	4a0a      	ldr	r2, [pc, #40]	; (800a600 <tcp_oos_insert_segment+0xa4>)
 800a5d6:	6811      	ldr	r1, [r2, #0]
 800a5d8:	440b      	add	r3, r1
 800a5da:	68e2      	ldr	r2, [r4, #12]
 800a5dc:	6852      	ldr	r2, [r2, #4]
 800a5de:	1a9b      	subs	r3, r3, r2
    if (next &&
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	ddca      	ble.n	800a57a <tcp_oos_insert_segment+0x1e>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a5e4:	1a52      	subs	r2, r2, r1
 800a5e6:	b291      	uxth	r1, r2
 800a5e8:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a5ea:	6868      	ldr	r0, [r5, #4]
 800a5ec:	f7fe f9c2 	bl	8008974 <pbuf_realloc>
 800a5f0:	e7c3      	b.n	800a57a <tcp_oos_insert_segment+0x1e>
 800a5f2:	bf00      	nop
 800a5f4:	080175a0 	.word	0x080175a0
 800a5f8:	08017578 	.word	0x08017578
 800a5fc:	08015d2c 	.word	0x08015d2c
 800a600:	20001768 	.word	0x20001768

0800a604 <tcp_receive>:
{
 800a604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a606:	4604      	mov	r4, r0
 800a608:	2800      	cmp	r0, #0
 800a60a:	d075      	beq.n	800a6f8 <tcp_receive+0xf4>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a60c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800a610:	2b03      	cmp	r3, #3
 800a612:	d979      	bls.n	800a708 <tcp_receive+0x104>
  if (flags & TCP_ACK) {
 800a614:	4bb9      	ldr	r3, [pc, #740]	; (800a8fc <tcp_receive+0x2f8>)
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	f013 0f10 	tst.w	r3, #16
 800a61c:	d03f      	beq.n	800a69e <tcp_receive+0x9a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a61e:	f8b4 0088 	ldrh.w	r0, [r4, #136]	; 0x88
 800a622:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800a626:	1886      	adds	r6, r0, r2
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a628:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800a62a:	4bb5      	ldr	r3, [pc, #724]	; (800a900 <tcp_receive+0x2fc>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	1acd      	subs	r5, r1, r3
 800a630:	2d00      	cmp	r5, #0
 800a632:	db0a      	blt.n	800a64a <tcp_receive+0x46>
 800a634:	4299      	cmp	r1, r3
 800a636:	d06f      	beq.n	800a718 <tcp_receive+0x114>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a638:	49b2      	ldr	r1, [pc, #712]	; (800a904 <tcp_receive+0x300>)
 800a63a:	6809      	ldr	r1, [r1, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a63c:	428a      	cmp	r2, r1
 800a63e:	d115      	bne.n	800a66c <tcp_receive+0x68>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a640:	4ab1      	ldr	r2, [pc, #708]	; (800a908 <tcp_receive+0x304>)
 800a642:	6812      	ldr	r2, [r2, #0]
 800a644:	89d2      	ldrh	r2, [r2, #14]
 800a646:	4290      	cmp	r0, r2
 800a648:	d210      	bcs.n	800a66c <tcp_receive+0x68>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a64a:	4aaf      	ldr	r2, [pc, #700]	; (800a908 <tcp_receive+0x304>)
 800a64c:	6812      	ldr	r2, [r2, #0]
 800a64e:	89d2      	ldrh	r2, [r2, #14]
 800a650:	b290      	uxth	r0, r2
 800a652:	f8a4 2088 	strh.w	r2, [r4, #136]	; 0x88
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a656:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 800a65a:	4288      	cmp	r0, r1
 800a65c:	d901      	bls.n	800a662 <tcp_receive+0x5e>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a65e:	f8a4 208a 	strh.w	r2, [r4, #138]	; 0x8a
      pcb->snd_wl1 = seqno;
 800a662:	67e3      	str	r3, [r4, #124]	; 0x7c
      pcb->snd_wl2 = ackno;
 800a664:	4ba7      	ldr	r3, [pc, #668]	; (800a904 <tcp_receive+0x300>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a66c:	4ba5      	ldr	r3, [pc, #660]	; (800a904 <tcp_receive+0x300>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a672:	1a5a      	subs	r2, r3, r1
 800a674:	2a00      	cmp	r2, #0
 800a676:	dd55      	ble.n	800a724 <tcp_receive+0x120>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a678:	2a01      	cmp	r2, #1
 800a67a:	d404      	bmi.n	800a686 <tcp_receive+0x82>
 800a67c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a67e:	1a9a      	subs	r2, r3, r2
 800a680:	2a00      	cmp	r2, #0
 800a682:	f340 8083 	ble.w	800a78c <tcp_receive+0x188>
      tcp_send_empty_ack(pcb);
 800a686:	4620      	mov	r0, r4
 800a688:	f002 f91c 	bl	800c8c4 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a68c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a68e:	b133      	cbz	r3, 800a69e <tcp_receive+0x9a>
 800a690:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800a692:	499c      	ldr	r1, [pc, #624]	; (800a904 <tcp_receive+0x300>)
 800a694:	6809      	ldr	r1, [r1, #0]
 800a696:	1a52      	subs	r2, r2, r1
 800a698:	2a00      	cmp	r2, #0
 800a69a:	f2c0 815e 	blt.w	800a95a <tcp_receive+0x356>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a69e:	4b9b      	ldr	r3, [pc, #620]	; (800a90c <tcp_receive+0x308>)
 800a6a0:	881b      	ldrh	r3, [r3, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f000 8485 	beq.w	800afb2 <tcp_receive+0x9ae>
 800a6a8:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800a6ac:	2a06      	cmp	r2, #6
 800a6ae:	f200 8480 	bhi.w	800afb2 <tcp_receive+0x9ae>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a6b2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a6b4:	4a92      	ldr	r2, [pc, #584]	; (800a900 <tcp_receive+0x2fc>)
 800a6b6:	6812      	ldr	r2, [r2, #0]
 800a6b8:	1a8e      	subs	r6, r1, r2
 800a6ba:	2e01      	cmp	r6, #1
 800a6bc:	d405      	bmi.n	800a6ca <tcp_receive+0xc6>
 800a6be:	4413      	add	r3, r2
 800a6c0:	1acb      	subs	r3, r1, r3
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f340 816d 	ble.w	800a9a4 <tcp_receive+0x3a0>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a6ca:	1a52      	subs	r2, r2, r1
 800a6cc:	2a00      	cmp	r2, #0
 800a6ce:	f2c0 81ab 	blt.w	800aa28 <tcp_receive+0x424>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a6d2:	4b8b      	ldr	r3, [pc, #556]	; (800a900 <tcp_receive+0x2fc>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a6d8:	1a5a      	subs	r2, r3, r1
 800a6da:	2a00      	cmp	r2, #0
 800a6dc:	db07      	blt.n	800a6ee <tcp_receive+0xea>
 800a6de:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 800a6e2:	440a      	add	r2, r1
 800a6e4:	1a9a      	subs	r2, r3, r2
 800a6e6:	3201      	adds	r2, #1
 800a6e8:	2a00      	cmp	r2, #0
 800a6ea:	f340 81a4 	ble.w	800aa36 <tcp_receive+0x432>
      tcp_send_empty_ack(pcb);
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f002 f8e8 	bl	800c8c4 <tcp_send_empty_ack>
 800a6f4:	f000 bc70 	b.w	800afd8 <tcp_receive+0x9d4>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a6f8:	4b85      	ldr	r3, [pc, #532]	; (800a910 <tcp_receive+0x30c>)
 800a6fa:	f240 427b 	movw	r2, #1147	; 0x47b
 800a6fe:	4985      	ldr	r1, [pc, #532]	; (800a914 <tcp_receive+0x310>)
 800a700:	4885      	ldr	r0, [pc, #532]	; (800a918 <tcp_receive+0x314>)
 800a702:	f00a fb9f 	bl	8014e44 <iprintf>
 800a706:	e781      	b.n	800a60c <tcp_receive+0x8>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a708:	4b81      	ldr	r3, [pc, #516]	; (800a910 <tcp_receive+0x30c>)
 800a70a:	f240 427c 	movw	r2, #1148	; 0x47c
 800a70e:	4983      	ldr	r1, [pc, #524]	; (800a91c <tcp_receive+0x318>)
 800a710:	4881      	ldr	r0, [pc, #516]	; (800a918 <tcp_receive+0x314>)
 800a712:	f00a fb97 	bl	8014e44 <iprintf>
 800a716:	e77d      	b.n	800a614 <tcp_receive+0x10>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a718:	497a      	ldr	r1, [pc, #488]	; (800a904 <tcp_receive+0x300>)
 800a71a:	6809      	ldr	r1, [r1, #0]
 800a71c:	1a51      	subs	r1, r2, r1
 800a71e:	2900      	cmp	r1, #0
 800a720:	da8a      	bge.n	800a638 <tcp_receive+0x34>
 800a722:	e792      	b.n	800a64a <tcp_receive+0x46>
      if (tcplen == 0) {
 800a724:	4a79      	ldr	r2, [pc, #484]	; (800a90c <tcp_receive+0x308>)
 800a726:	8812      	ldrh	r2, [r2, #0]
 800a728:	b932      	cbnz	r2, 800a738 <tcp_receive+0x134>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a72a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800a72e:	f8b4 0088 	ldrh.w	r0, [r4, #136]	; 0x88
 800a732:	4402      	add	r2, r0
 800a734:	42b2      	cmp	r2, r6
 800a736:	d003      	beq.n	800a740 <tcp_receive+0x13c>
        pcb->dupacks = 0;
 800a738:	2300      	movs	r3, #0
 800a73a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800a73e:	e7a5      	b.n	800a68c <tcp_receive+0x88>
          if (pcb->rtime >= 0) {
 800a740:	f9b4 2058 	ldrsh.w	r2, [r4, #88]	; 0x58
 800a744:	2a00      	cmp	r2, #0
 800a746:	dbf7      	blt.n	800a738 <tcp_receive+0x134>
            if (pcb->lastack == ackno) {
 800a748:	428b      	cmp	r3, r1
 800a74a:	d1f5      	bne.n	800a738 <tcp_receive+0x134>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a74c:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 800a750:	2bff      	cmp	r3, #255	; 0xff
 800a752:	d002      	beq.n	800a75a <tcp_receive+0x156>
                ++pcb->dupacks;
 800a754:	3301      	adds	r3, #1
 800a756:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
              if (pcb->dupacks > 3) {
 800a75a:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
 800a75e:	2a03      	cmp	r2, #3
 800a760:	d909      	bls.n	800a776 <tcp_receive+0x172>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a762:	f8b4 1070 	ldrh.w	r1, [r4, #112]	; 0x70
 800a766:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800a76a:	440b      	add	r3, r1
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	4299      	cmp	r1, r3
 800a770:	d807      	bhi.n	800a782 <tcp_receive+0x17e>
 800a772:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
              if (pcb->dupacks >= 3) {
 800a776:	2a02      	cmp	r2, #2
 800a778:	d988      	bls.n	800a68c <tcp_receive+0x88>
                tcp_rexmit_fast(pcb);
 800a77a:	4620      	mov	r0, r4
 800a77c:	f002 f816 	bl	800c7ac <tcp_rexmit_fast>
 800a780:	e784      	b.n	800a68c <tcp_receive+0x88>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a782:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a786:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 800a78a:	e7f4      	b.n	800a776 <tcp_receive+0x172>
      if (pcb->flags & TF_INFR) {
 800a78c:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800a790:	f012 0f04 	tst.w	r2, #4
 800a794:	d00a      	beq.n	800a7ac <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 800a796:	f022 0204 	bic.w	r2, r2, #4
 800a79a:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
        pcb->cwnd = pcb->ssthresh;
 800a79e:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
 800a7a2:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
        pcb->bytes_acked = 0;
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f8a4 2092 	strh.w	r2, [r4, #146]	; 0x92
      pcb->nrtx = 0;
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	f884 006a 	strb.w	r0, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a7b2:	f9b4 5064 	ldrsh.w	r5, [r4, #100]	; 0x64
 800a7b6:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 800a7ba:	eb02 02e5 	add.w	r2, r2, r5, asr #3
 800a7be:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	b289      	uxth	r1, r1
 800a7c6:	1a51      	subs	r1, r2, r1
 800a7c8:	b289      	uxth	r1, r1
      pcb->dupacks = 0;
 800a7ca:	f884 006b 	strb.w	r0, [r4, #107]	; 0x6b
      pcb->lastack = ackno;
 800a7ce:	66e3      	str	r3, [r4, #108]	; 0x6c
      if (pcb->state >= ESTABLISHED) {
 800a7d0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800a7d4:	2b03      	cmp	r3, #3
 800a7d6:	d919      	bls.n	800a80c <tcp_receive+0x208>
        if (pcb->cwnd < pcb->ssthresh) {
 800a7d8:	f8b4 2070 	ldrh.w	r2, [r4, #112]	; 0x70
 800a7dc:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d260      	bcs.n	800a8a6 <tcp_receive+0x2a2>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a7e4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a7e8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a7ec:	d054      	beq.n	800a898 <tcp_receive+0x294>
 800a7ee:	2301      	movs	r3, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a7f0:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800a7f4:	fb13 f300 	smulbb	r3, r3, r0
 800a7f8:	b29b      	uxth	r3, r3
          TCP_WND_INC(pcb->cwnd, increase);
 800a7fa:	428b      	cmp	r3, r1
 800a7fc:	bf94      	ite	ls
 800a7fe:	18d1      	addls	r1, r2, r3
 800a800:	1851      	addhi	r1, r2, r1
 800a802:	b289      	uxth	r1, r1
 800a804:	428a      	cmp	r2, r1
 800a806:	d849      	bhi.n	800a89c <tcp_receive+0x298>
 800a808:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a80c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a810:	4a43      	ldr	r2, [pc, #268]	; (800a920 <tcp_receive+0x31c>)
 800a812:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800a816:	4620      	mov	r0, r4
 800a818:	f7ff fe42 	bl	800a4a0 <tcp_free_acked_segments>
 800a81c:	4603      	mov	r3, r0
 800a81e:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a822:	4a40      	ldr	r2, [pc, #256]	; (800a924 <tcp_receive+0x320>)
 800a824:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800a828:	4620      	mov	r0, r4
 800a82a:	f7ff fe39 	bl	800a4a0 <tcp_free_acked_segments>
 800a82e:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
      if (pcb->unacked == NULL) {
 800a832:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a836:	2b00      	cmp	r3, #0
 800a838:	d057      	beq.n	800a8ea <tcp_receive+0x2e6>
        pcb->rtime = 0;
 800a83a:	2300      	movs	r3, #0
 800a83c:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
      pcb->polltmr = 0;
 800a840:	2300      	movs	r3, #0
 800a842:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      if (pcb->unsent == NULL) {
 800a846:	2800      	cmp	r0, #0
 800a848:	d054      	beq.n	800a8f4 <tcp_receive+0x2f0>
      if (ip_current_is_v6()) {
 800a84a:	4b37      	ldr	r3, [pc, #220]	; (800a928 <tcp_receive+0x324>)
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	b113      	cbz	r3, 800a856 <tcp_receive+0x252>
        nd6_reachability_hint(ip6_current_src_addr());
 800a850:	4836      	ldr	r0, [pc, #216]	; (800a92c <tcp_receive+0x328>)
 800a852:	f00a f8a3 	bl	801499c <nd6_reachability_hint>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a856:	f8b4 308c 	ldrh.w	r3, [r4, #140]	; 0x8c
 800a85a:	4a35      	ldr	r2, [pc, #212]	; (800a930 <tcp_receive+0x32c>)
 800a85c:	8812      	ldrh	r2, [r2, #0]
 800a85e:	4413      	add	r3, r2
 800a860:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
      if (pcb->flags & TF_RTO) {
 800a864:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a868:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a86c:	f43f af0e 	beq.w	800a68c <tcp_receive+0x88>
        if (pcb->unacked == NULL) {
 800a870:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a874:	2b00      	cmp	r3, #0
 800a876:	d05d      	beq.n	800a934 <tcp_receive+0x330>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a878:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	6858      	ldr	r0, [r3, #4]
 800a87e:	f7fc fcac 	bl	80071da <lwip_htonl>
 800a882:	1a28      	subs	r0, r5, r0
 800a884:	2800      	cmp	r0, #0
 800a886:	f73f af01 	bgt.w	800a68c <tcp_receive+0x88>
          tcp_clear_flags(pcb, TF_RTO);
 800a88a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a88e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a892:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 800a896:	e6f9      	b.n	800a68c <tcp_receive+0x88>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a898:	2302      	movs	r3, #2
 800a89a:	e7a9      	b.n	800a7f0 <tcp_receive+0x1ec>
          TCP_WND_INC(pcb->cwnd, increase);
 800a89c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8a0:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 800a8a4:	e7b2      	b.n	800a80c <tcp_receive+0x208>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a8a6:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
 800a8aa:	4419      	add	r1, r3
 800a8ac:	b289      	uxth	r1, r1
 800a8ae:	428b      	cmp	r3, r1
 800a8b0:	d811      	bhi.n	800a8d6 <tcp_receive+0x2d2>
 800a8b2:	f8a4 1092 	strh.w	r1, [r4, #146]	; 0x92
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a8b6:	f8b4 3092 	ldrh.w	r3, [r4, #146]	; 0x92
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d8a6      	bhi.n	800a80c <tcp_receive+0x208>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a8be:	1a9b      	subs	r3, r3, r2
 800a8c0:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a8c4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800a8c8:	4413      	add	r3, r2
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d807      	bhi.n	800a8e0 <tcp_receive+0x2dc>
 800a8d0:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 800a8d4:	e79a      	b.n	800a80c <tcp_receive+0x208>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a8d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8da:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
 800a8de:	e7ea      	b.n	800a8b6 <tcp_receive+0x2b2>
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a8e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8e4:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 800a8e8:	e790      	b.n	800a80c <tcp_receive+0x208>
        pcb->rtime = -1;
 800a8ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8ee:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 800a8f2:	e7a5      	b.n	800a840 <tcp_receive+0x23c>
        pcb->unsent_oversize = 0;
 800a8f4:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
 800a8f8:	e7a7      	b.n	800a84a <tcp_receive+0x246>
 800a8fa:	bf00      	nop
 800a8fc:	20001748 	.word	0x20001748
 800a900:	20001768 	.word	0x20001768
 800a904:	20001744 	.word	0x20001744
 800a908:	20001770 	.word	0x20001770
 800a90c:	2000177e 	.word	0x2000177e
 800a910:	080175a0 	.word	0x080175a0
 800a914:	08017678 	.word	0x08017678
 800a918:	08015d2c 	.word	0x08015d2c
 800a91c:	08017694 	.word	0x08017694
 800a920:	080176b0 	.word	0x080176b0
 800a924:	080176b8 	.word	0x080176b8
 800a928:	20004bac 	.word	0x20004bac
 800a92c:	20004bc0 	.word	0x20004bc0
 800a930:	2000175c 	.word	0x2000175c
          if ((pcb->unsent == NULL) ||
 800a934:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a938:	b143      	cbz	r3, 800a94c <tcp_receive+0x348>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a93a:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	6858      	ldr	r0, [r3, #4]
 800a940:	f7fc fc4b 	bl	80071da <lwip_htonl>
 800a944:	1a28      	subs	r0, r5, r0
          if ((pcb->unsent == NULL) ||
 800a946:	2800      	cmp	r0, #0
 800a948:	f73f aea0 	bgt.w	800a68c <tcp_receive+0x88>
            tcp_clear_flags(pcb, TF_RTO);
 800a94c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800a950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a954:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 800a958:	e698      	b.n	800a68c <tcp_receive+0x88>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a95a:	4aaa      	ldr	r2, [pc, #680]	; (800ac04 <tcp_receive+0x600>)
 800a95c:	6812      	ldr	r2, [r2, #0]
 800a95e:	1ad2      	subs	r2, r2, r3
 800a960:	b292      	uxth	r2, r2
      m = (s16_t)(m - (pcb->sa >> 3));
 800a962:	f9b4 1064 	ldrsh.w	r1, [r4, #100]	; 0x64
 800a966:	eba2 02e1 	sub.w	r2, r2, r1, asr #3
 800a96a:	b292      	uxth	r2, r2
 800a96c:	b213      	sxth	r3, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 800a96e:	fa12 f181 	uxtah	r1, r2, r1
 800a972:	b209      	sxth	r1, r1
 800a974:	f8a4 1064 	strh.w	r1, [r4, #100]	; 0x64
      if (m < 0) {
 800a978:	2b00      	cmp	r3, #0
 800a97a:	db10      	blt.n	800a99e <tcp_receive+0x39a>
      m = (s16_t)(m - (pcb->sv >> 2));
 800a97c:	f9b4 2066 	ldrsh.w	r2, [r4, #102]	; 0x66
 800a980:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
      pcb->sv = (s16_t)(pcb->sv + m);
 800a984:	b292      	uxth	r2, r2
 800a986:	fa12 f383 	uxtah	r3, r2, r3
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a990:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800a994:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
      pcb->rttest = 0;
 800a998:	2300      	movs	r3, #0
 800a99a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800a99c:	e67f      	b.n	800a69e <tcp_receive+0x9a>
        m = (s16_t) - m;
 800a99e:	4252      	negs	r2, r2
 800a9a0:	b213      	sxth	r3, r2
 800a9a2:	e7eb      	b.n	800a97c <tcp_receive+0x378>
      struct pbuf *p = inseg.p;
 800a9a4:	4b98      	ldr	r3, [pc, #608]	; (800ac08 <tcp_receive+0x604>)
 800a9a6:	685d      	ldr	r5, [r3, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a9a8:	b195      	cbz	r5, 800a9d0 <tcp_receive+0x3cc>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a9aa:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800a9ae:	429e      	cmp	r6, r3
 800a9b0:	d816      	bhi.n	800a9e0 <tcp_receive+0x3dc>
      off = (u16_t)off32;
 800a9b2:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a9b4:	4b94      	ldr	r3, [pc, #592]	; (800ac08 <tcp_receive+0x604>)
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	891b      	ldrh	r3, [r3, #8]
 800a9ba:	42b3      	cmp	r3, r6
 800a9bc:	d318      	bcc.n	800a9f0 <tcp_receive+0x3ec>
      inseg.len -= off;
 800a9be:	4b92      	ldr	r3, [pc, #584]	; (800ac08 <tcp_receive+0x604>)
 800a9c0:	891a      	ldrh	r2, [r3, #8]
 800a9c2:	1b92      	subs	r2, r2, r6
 800a9c4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	891a      	ldrh	r2, [r3, #8]
 800a9ca:	1b92      	subs	r2, r2, r6
 800a9cc:	b292      	uxth	r2, r2
      while (p->len < off) {
 800a9ce:	e01d      	b.n	800aa0c <tcp_receive+0x408>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a9d0:	4b8e      	ldr	r3, [pc, #568]	; (800ac0c <tcp_receive+0x608>)
 800a9d2:	f240 5294 	movw	r2, #1428	; 0x594
 800a9d6:	498e      	ldr	r1, [pc, #568]	; (800ac10 <tcp_receive+0x60c>)
 800a9d8:	488e      	ldr	r0, [pc, #568]	; (800ac14 <tcp_receive+0x610>)
 800a9da:	f00a fa33 	bl	8014e44 <iprintf>
 800a9de:	e7e4      	b.n	800a9aa <tcp_receive+0x3a6>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a9e0:	4b8a      	ldr	r3, [pc, #552]	; (800ac0c <tcp_receive+0x608>)
 800a9e2:	f240 5295 	movw	r2, #1429	; 0x595
 800a9e6:	498c      	ldr	r1, [pc, #560]	; (800ac18 <tcp_receive+0x614>)
 800a9e8:	488a      	ldr	r0, [pc, #552]	; (800ac14 <tcp_receive+0x610>)
 800a9ea:	f00a fa2b 	bl	8014e44 <iprintf>
 800a9ee:	e7e0      	b.n	800a9b2 <tcp_receive+0x3ae>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a9f0:	4b86      	ldr	r3, [pc, #536]	; (800ac0c <tcp_receive+0x608>)
 800a9f2:	f240 5297 	movw	r2, #1431	; 0x597
 800a9f6:	4989      	ldr	r1, [pc, #548]	; (800ac1c <tcp_receive+0x618>)
 800a9f8:	4886      	ldr	r0, [pc, #536]	; (800ac14 <tcp_receive+0x610>)
 800a9fa:	f00a fa23 	bl	8014e44 <iprintf>
 800a9fe:	e7de      	b.n	800a9be <tcp_receive+0x3ba>
        off -= p->len;
 800aa00:	1af3      	subs	r3, r6, r3
 800aa02:	b29e      	uxth	r6, r3
        p->tot_len = new_tot_len;
 800aa04:	812a      	strh	r2, [r5, #8]
        p->len = 0;
 800aa06:	2300      	movs	r3, #0
 800aa08:	816b      	strh	r3, [r5, #10]
        p = p->next;
 800aa0a:	682d      	ldr	r5, [r5, #0]
      while (p->len < off) {
 800aa0c:	896b      	ldrh	r3, [r5, #10]
 800aa0e:	42b3      	cmp	r3, r6
 800aa10:	d3f6      	bcc.n	800aa00 <tcp_receive+0x3fc>
      pbuf_remove_header(p, off);
 800aa12:	4631      	mov	r1, r6
 800aa14:	4628      	mov	r0, r5
 800aa16:	f7fd fe57 	bl	80086c8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800aa1a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800aa1c:	4a80      	ldr	r2, [pc, #512]	; (800ac20 <tcp_receive+0x61c>)
 800aa1e:	6013      	str	r3, [r2, #0]
 800aa20:	4a79      	ldr	r2, [pc, #484]	; (800ac08 <tcp_receive+0x604>)
 800aa22:	68d2      	ldr	r2, [r2, #12]
 800aa24:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800aa26:	e654      	b.n	800a6d2 <tcp_receive+0xce>
        tcp_ack_now(pcb);
 800aa28:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800aa2c:	f043 0302 	orr.w	r3, r3, #2
 800aa30:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 800aa34:	e64d      	b.n	800a6d2 <tcp_receive+0xce>
      if (pcb->rcv_nxt == seqno) {
 800aa36:	428b      	cmp	r3, r1
 800aa38:	d006      	beq.n	800aa48 <tcp_receive+0x444>
        if (pcb->ooseq == NULL) {
 800aa3a:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
 800aa3e:	2d00      	cmp	r5, #0
 800aa40:	f000 81c6 	beq.w	800add0 <tcp_receive+0x7cc>
          struct tcp_seg *next, *prev = NULL;
 800aa44:	2600      	movs	r6, #0
 800aa46:	e1e9      	b.n	800ae1c <tcp_receive+0x818>
        tcplen = TCP_TCPLEN(&inseg);
 800aa48:	4b6f      	ldr	r3, [pc, #444]	; (800ac08 <tcp_receive+0x604>)
 800aa4a:	891d      	ldrh	r5, [r3, #8]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	8998      	ldrh	r0, [r3, #12]
 800aa50:	f7fc fbbe 	bl	80071d0 <lwip_htons>
 800aa54:	f010 0f03 	tst.w	r0, #3
 800aa58:	d017      	beq.n	800aa8a <tcp_receive+0x486>
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	442b      	add	r3, r5
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	4a70      	ldr	r2, [pc, #448]	; (800ac24 <tcp_receive+0x620>)
 800aa62:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 800aa64:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d810      	bhi.n	800aa8e <tcp_receive+0x48a>
        if (pcb->ooseq != NULL) {
 800aa6c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d062      	beq.n	800ab3a <tcp_receive+0x536>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aa74:	4b64      	ldr	r3, [pc, #400]	; (800ac08 <tcp_receive+0x604>)
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	8998      	ldrh	r0, [r3, #12]
 800aa7a:	f7fc fba9 	bl	80071d0 <lwip_htons>
 800aa7e:	f010 0f01 	tst.w	r0, #1
 800aa82:	d156      	bne.n	800ab32 <tcp_receive+0x52e>
            struct tcp_seg *next = pcb->ooseq;
 800aa84:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
            while (next &&
 800aa88:	e08d      	b.n	800aba6 <tcp_receive+0x5a2>
        tcplen = TCP_TCPLEN(&inseg);
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	e7e6      	b.n	800aa5c <tcp_receive+0x458>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aa8e:	4b5e      	ldr	r3, [pc, #376]	; (800ac08 <tcp_receive+0x604>)
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	8998      	ldrh	r0, [r3, #12]
 800aa94:	f7fc fb9c 	bl	80071d0 <lwip_htons>
 800aa98:	f010 0f01 	tst.w	r0, #1
 800aa9c:	d131      	bne.n	800ab02 <tcp_receive+0x4fe>
          inseg.len = (u16_t)pcb->rcv_wnd;
 800aa9e:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 800aaa2:	4b59      	ldr	r3, [pc, #356]	; (800ac08 <tcp_receive+0x604>)
 800aaa4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	8998      	ldrh	r0, [r3, #12]
 800aaaa:	f7fc fb91 	bl	80071d0 <lwip_htons>
 800aaae:	f010 0f02 	tst.w	r0, #2
 800aab2:	d003      	beq.n	800aabc <tcp_receive+0x4b8>
            inseg.len -= 1;
 800aab4:	4a54      	ldr	r2, [pc, #336]	; (800ac08 <tcp_receive+0x604>)
 800aab6:	8913      	ldrh	r3, [r2, #8]
 800aab8:	3b01      	subs	r3, #1
 800aaba:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800aabc:	4e52      	ldr	r6, [pc, #328]	; (800ac08 <tcp_receive+0x604>)
 800aabe:	8931      	ldrh	r1, [r6, #8]
 800aac0:	6870      	ldr	r0, [r6, #4]
 800aac2:	f7fd ff57 	bl	8008974 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800aac6:	8935      	ldrh	r5, [r6, #8]
 800aac8:	68f3      	ldr	r3, [r6, #12]
 800aaca:	8998      	ldrh	r0, [r3, #12]
 800aacc:	f7fc fb80 	bl	80071d0 <lwip_htons>
 800aad0:	f010 0f03 	tst.w	r0, #3
 800aad4:	d026      	beq.n	800ab24 <tcp_receive+0x520>
 800aad6:	2301      	movs	r3, #1
 800aad8:	442b      	add	r3, r5
 800aada:	b29b      	uxth	r3, r3
 800aadc:	4a51      	ldr	r2, [pc, #324]	; (800ac24 <tcp_receive+0x620>)
 800aade:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800aae0:	4a4f      	ldr	r2, [pc, #316]	; (800ac20 <tcp_receive+0x61c>)
 800aae2:	6812      	ldr	r2, [r2, #0]
 800aae4:	4413      	add	r3, r2
 800aae6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800aae8:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800aaec:	440a      	add	r2, r1
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d0bc      	beq.n	800aa6c <tcp_receive+0x468>
 800aaf2:	4b46      	ldr	r3, [pc, #280]	; (800ac0c <tcp_receive+0x608>)
 800aaf4:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800aaf8:	494b      	ldr	r1, [pc, #300]	; (800ac28 <tcp_receive+0x624>)
 800aafa:	4846      	ldr	r0, [pc, #280]	; (800ac14 <tcp_receive+0x610>)
 800aafc:	f00a f9a2 	bl	8014e44 <iprintf>
 800ab00:	e7b4      	b.n	800aa6c <tcp_receive+0x468>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ab02:	4e41      	ldr	r6, [pc, #260]	; (800ac08 <tcp_receive+0x604>)
 800ab04:	68f3      	ldr	r3, [r6, #12]
 800ab06:	8998      	ldrh	r0, [r3, #12]
 800ab08:	b205      	sxth	r5, r0
 800ab0a:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800ab0e:	f7fc fb5f 	bl	80071d0 <lwip_htons>
 800ab12:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800ab16:	f7fc fb5b 	bl	80071d0 <lwip_htons>
 800ab1a:	b200      	sxth	r0, r0
 800ab1c:	68f3      	ldr	r3, [r6, #12]
 800ab1e:	4305      	orrs	r5, r0
 800ab20:	819d      	strh	r5, [r3, #12]
 800ab22:	e7bc      	b.n	800aa9e <tcp_receive+0x49a>
          tcplen = TCP_TCPLEN(&inseg);
 800ab24:	2300      	movs	r3, #0
 800ab26:	e7d7      	b.n	800aad8 <tcp_receive+0x4d4>
              pcb->ooseq = pcb->ooseq->next;
 800ab28:	6803      	ldr	r3, [r0, #0]
 800ab2a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
              tcp_seg_free(old_ooseq);
 800ab2e:	f7fe fb0b 	bl	8009148 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ab32:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 800ab36:	2800      	cmp	r0, #0
 800ab38:	d1f6      	bne.n	800ab28 <tcp_receive+0x524>
        pcb->rcv_nxt = seqno + tcplen;
 800ab3a:	4b3a      	ldr	r3, [pc, #232]	; (800ac24 <tcp_receive+0x620>)
 800ab3c:	881a      	ldrh	r2, [r3, #0]
 800ab3e:	4b38      	ldr	r3, [pc, #224]	; (800ac20 <tcp_receive+0x61c>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4413      	add	r3, r2
 800ab44:	64e3      	str	r3, [r4, #76]	; 0x4c
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ab46:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	f200 80b1 	bhi.w	800acb2 <tcp_receive+0x6ae>
        pcb->rcv_wnd -= tcplen;
 800ab50:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800ab54:	4a33      	ldr	r2, [pc, #204]	; (800ac24 <tcp_receive+0x620>)
 800ab56:	8812      	ldrh	r2, [r2, #0]
 800ab58:	1a9b      	subs	r3, r3, r2
 800ab5a:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
        tcp_update_rcv_ann_wnd(pcb);
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f7fe fa72 	bl	8009048 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800ab64:	4b28      	ldr	r3, [pc, #160]	; (800ac08 <tcp_receive+0x604>)
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	891a      	ldrh	r2, [r3, #8]
 800ab6a:	b122      	cbz	r2, 800ab76 <tcp_receive+0x572>
          recv_data = inseg.p;
 800ab6c:	4a2f      	ldr	r2, [pc, #188]	; (800ac2c <tcp_receive+0x628>)
 800ab6e:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800ab70:	4b25      	ldr	r3, [pc, #148]	; (800ac08 <tcp_receive+0x604>)
 800ab72:	2200      	movs	r2, #0
 800ab74:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ab76:	4b24      	ldr	r3, [pc, #144]	; (800ac08 <tcp_receive+0x604>)
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	8998      	ldrh	r0, [r3, #12]
 800ab7c:	f7fc fb28 	bl	80071d0 <lwip_htons>
 800ab80:	f010 0f01 	tst.w	r0, #1
 800ab84:	f000 80c5 	beq.w	800ad12 <tcp_receive+0x70e>
          recv_flags |= TF_GOT_FIN;
 800ab88:	4a29      	ldr	r2, [pc, #164]	; (800ac30 <tcp_receive+0x62c>)
 800ab8a:	7813      	ldrb	r3, [r2, #0]
 800ab8c:	f043 0320 	orr.w	r3, r3, #32
 800ab90:	7013      	strb	r3, [r2, #0]
 800ab92:	e0be      	b.n	800ad12 <tcp_receive+0x70e>
                tcplen = TCP_TCPLEN(&inseg);
 800ab94:	2300      	movs	r3, #0
 800ab96:	441f      	add	r7, r3
 800ab98:	4b22      	ldr	r3, [pc, #136]	; (800ac24 <tcp_receive+0x620>)
 800ab9a:	801f      	strh	r7, [r3, #0]
              next = next->next;
 800ab9c:	682e      	ldr	r6, [r5, #0]
              tcp_seg_free(tmp);
 800ab9e:	4628      	mov	r0, r5
 800aba0:	f7fe fad2 	bl	8009148 <tcp_seg_free>
              next = next->next;
 800aba4:	4635      	mov	r5, r6
            while (next &&
 800aba6:	2d00      	cmp	r5, #0
 800aba8:	d044      	beq.n	800ac34 <tcp_receive+0x630>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800abaa:	4b1e      	ldr	r3, [pc, #120]	; (800ac24 <tcp_receive+0x620>)
 800abac:	881b      	ldrh	r3, [r3, #0]
 800abae:	4a1c      	ldr	r2, [pc, #112]	; (800ac20 <tcp_receive+0x61c>)
 800abb0:	6812      	ldr	r2, [r2, #0]
 800abb2:	4413      	add	r3, r2
 800abb4:	68e9      	ldr	r1, [r5, #12]
 800abb6:	684a      	ldr	r2, [r1, #4]
 800abb8:	8928      	ldrh	r0, [r5, #8]
 800abba:	4402      	add	r2, r0
 800abbc:	1a9b      	subs	r3, r3, r2
            while (next &&
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	db38      	blt.n	800ac34 <tcp_receive+0x630>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800abc2:	8988      	ldrh	r0, [r1, #12]
 800abc4:	f7fc fb04 	bl	80071d0 <lwip_htons>
 800abc8:	f010 0f01 	tst.w	r0, #1
 800abcc:	d0e6      	beq.n	800ab9c <tcp_receive+0x598>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800abce:	4b0e      	ldr	r3, [pc, #56]	; (800ac08 <tcp_receive+0x604>)
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	8998      	ldrh	r0, [r3, #12]
 800abd4:	f7fc fafc 	bl	80071d0 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800abd8:	f010 0f02 	tst.w	r0, #2
 800abdc:	d1de      	bne.n	800ab9c <tcp_receive+0x598>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800abde:	4e0a      	ldr	r6, [pc, #40]	; (800ac08 <tcp_receive+0x604>)
 800abe0:	68f3      	ldr	r3, [r6, #12]
 800abe2:	899f      	ldrh	r7, [r3, #12]
 800abe4:	2001      	movs	r0, #1
 800abe6:	f7fc faf3 	bl	80071d0 <lwip_htons>
 800abea:	68f3      	ldr	r3, [r6, #12]
 800abec:	4338      	orrs	r0, r7
 800abee:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800abf0:	8937      	ldrh	r7, [r6, #8]
 800abf2:	68f3      	ldr	r3, [r6, #12]
 800abf4:	8998      	ldrh	r0, [r3, #12]
 800abf6:	f7fc faeb 	bl	80071d0 <lwip_htons>
 800abfa:	f010 0f03 	tst.w	r0, #3
 800abfe:	d0c9      	beq.n	800ab94 <tcp_receive+0x590>
 800ac00:	2301      	movs	r3, #1
 800ac02:	e7c8      	b.n	800ab96 <tcp_receive+0x592>
 800ac04:	20008614 	.word	0x20008614
 800ac08:	2000174c 	.word	0x2000174c
 800ac0c:	080175a0 	.word	0x080175a0
 800ac10:	080176c0 	.word	0x080176c0
 800ac14:	08015d2c 	.word	0x08015d2c
 800ac18:	080176d0 	.word	0x080176d0
 800ac1c:	080176e0 	.word	0x080176e0
 800ac20:	20001768 	.word	0x20001768
 800ac24:	2000177e 	.word	0x2000177e
 800ac28:	080176f0 	.word	0x080176f0
 800ac2c:	20001760 	.word	0x20001760
 800ac30:	20001764 	.word	0x20001764
            if (next &&
 800ac34:	b14d      	cbz	r5, 800ac4a <tcp_receive+0x646>
                TCP_SEQ_GT(seqno + tcplen,
 800ac36:	4b98      	ldr	r3, [pc, #608]	; (800ae98 <tcp_receive+0x894>)
 800ac38:	6819      	ldr	r1, [r3, #0]
 800ac3a:	4b98      	ldr	r3, [pc, #608]	; (800ae9c <tcp_receive+0x898>)
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	440b      	add	r3, r1
 800ac40:	68ea      	ldr	r2, [r5, #12]
 800ac42:	6852      	ldr	r2, [r2, #4]
 800ac44:	1a9b      	subs	r3, r3, r2
            if (next &&
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	dc02      	bgt.n	800ac50 <tcp_receive+0x64c>
            pcb->ooseq = next;
 800ac4a:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
 800ac4e:	e774      	b.n	800ab3a <tcp_receive+0x536>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ac50:	1a52      	subs	r2, r2, r1
 800ac52:	4b93      	ldr	r3, [pc, #588]	; (800aea0 <tcp_receive+0x89c>)
 800ac54:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	8998      	ldrh	r0, [r3, #12]
 800ac5a:	f7fc fab9 	bl	80071d0 <lwip_htons>
 800ac5e:	f010 0f02 	tst.w	r0, #2
 800ac62:	d003      	beq.n	800ac6c <tcp_receive+0x668>
                inseg.len -= 1;
 800ac64:	4a8e      	ldr	r2, [pc, #568]	; (800aea0 <tcp_receive+0x89c>)
 800ac66:	8913      	ldrh	r3, [r2, #8]
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800ac6c:	4f8c      	ldr	r7, [pc, #560]	; (800aea0 <tcp_receive+0x89c>)
 800ac6e:	8939      	ldrh	r1, [r7, #8]
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f7fd fe7f 	bl	8008974 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ac76:	893e      	ldrh	r6, [r7, #8]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	8998      	ldrh	r0, [r3, #12]
 800ac7c:	f7fc faa8 	bl	80071d0 <lwip_htons>
 800ac80:	f010 0f03 	tst.w	r0, #3
 800ac84:	d013      	beq.n	800acae <tcp_receive+0x6aa>
 800ac86:	2301      	movs	r3, #1
 800ac88:	4433      	add	r3, r6
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	4a83      	ldr	r2, [pc, #524]	; (800ae9c <tcp_receive+0x898>)
 800ac8e:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ac90:	4a81      	ldr	r2, [pc, #516]	; (800ae98 <tcp_receive+0x894>)
 800ac92:	6812      	ldr	r2, [r2, #0]
 800ac94:	4413      	add	r3, r2
 800ac96:	68ea      	ldr	r2, [r5, #12]
 800ac98:	6852      	ldr	r2, [r2, #4]
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d0d5      	beq.n	800ac4a <tcp_receive+0x646>
 800ac9e:	4b81      	ldr	r3, [pc, #516]	; (800aea4 <tcp_receive+0x8a0>)
 800aca0:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800aca4:	4980      	ldr	r1, [pc, #512]	; (800aea8 <tcp_receive+0x8a4>)
 800aca6:	4881      	ldr	r0, [pc, #516]	; (800aeac <tcp_receive+0x8a8>)
 800aca8:	f00a f8cc 	bl	8014e44 <iprintf>
 800acac:	e7cd      	b.n	800ac4a <tcp_receive+0x646>
              tcplen = TCP_TCPLEN(&inseg);
 800acae:	2300      	movs	r3, #0
 800acb0:	e7ea      	b.n	800ac88 <tcp_receive+0x684>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800acb2:	4b7c      	ldr	r3, [pc, #496]	; (800aea4 <tcp_receive+0x8a0>)
 800acb4:	f240 6207 	movw	r2, #1543	; 0x607
 800acb8:	497d      	ldr	r1, [pc, #500]	; (800aeb0 <tcp_receive+0x8ac>)
 800acba:	487c      	ldr	r0, [pc, #496]	; (800aeac <tcp_receive+0x8a8>)
 800acbc:	f00a f8c2 	bl	8014e44 <iprintf>
 800acc0:	e746      	b.n	800ab50 <tcp_receive+0x54c>
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800acc2:	2300      	movs	r3, #0
 800acc4:	e038      	b.n	800ad38 <tcp_receive+0x734>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800acc6:	2300      	movs	r3, #0
 800acc8:	e045      	b.n	800ad56 <tcp_receive+0x752>
 800acca:	4b76      	ldr	r3, [pc, #472]	; (800aea4 <tcp_receive+0x8a0>)
 800accc:	f240 622c 	movw	r2, #1580	; 0x62c
 800acd0:	4978      	ldr	r1, [pc, #480]	; (800aeb4 <tcp_receive+0x8b0>)
 800acd2:	4876      	ldr	r0, [pc, #472]	; (800aeac <tcp_receive+0x8a8>)
 800acd4:	f00a f8b6 	bl	8014e44 <iprintf>
 800acd8:	e040      	b.n	800ad5c <tcp_receive+0x758>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800acda:	2300      	movs	r3, #0
 800acdc:	e047      	b.n	800ad6e <tcp_receive+0x76a>
              recv_data = cseg->p;
 800acde:	4b76      	ldr	r3, [pc, #472]	; (800aeb8 <tcp_receive+0x8b4>)
 800ace0:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 800ace2:	2300      	movs	r3, #0
 800ace4:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ace6:	68eb      	ldr	r3, [r5, #12]
 800ace8:	8998      	ldrh	r0, [r3, #12]
 800acea:	f7fc fa71 	bl	80071d0 <lwip_htons>
 800acee:	f010 0f01 	tst.w	r0, #1
 800acf2:	d008      	beq.n	800ad06 <tcp_receive+0x702>
            recv_flags |= TF_GOT_FIN;
 800acf4:	4a71      	ldr	r2, [pc, #452]	; (800aebc <tcp_receive+0x8b8>)
 800acf6:	7813      	ldrb	r3, [r2, #0]
 800acf8:	f043 0320 	orr.w	r3, r3, #32
 800acfc:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800acfe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800ad02:	2b04      	cmp	r3, #4
 800ad04:	d047      	beq.n	800ad96 <tcp_receive+0x792>
          pcb->ooseq = cseg->next;
 800ad06:	682b      	ldr	r3, [r5, #0]
 800ad08:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
          tcp_seg_free(cseg);
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	f7fe fa1b 	bl	8009148 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ad12:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
 800ad16:	2d00      	cmp	r5, #0
 800ad18:	d041      	beq.n	800ad9e <tcp_receive+0x79a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ad1a:	68ea      	ldr	r2, [r5, #12]
 800ad1c:	6853      	ldr	r3, [r2, #4]
 800ad1e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
        while (pcb->ooseq != NULL &&
 800ad20:	428b      	cmp	r3, r1
 800ad22:	d13c      	bne.n	800ad9e <tcp_receive+0x79a>
          seqno = pcb->ooseq->tcphdr->seqno;
 800ad24:	495c      	ldr	r1, [pc, #368]	; (800ae98 <tcp_receive+0x894>)
 800ad26:	600b      	str	r3, [r1, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ad28:	892e      	ldrh	r6, [r5, #8]
 800ad2a:	8990      	ldrh	r0, [r2, #12]
 800ad2c:	f7fc fa50 	bl	80071d0 <lwip_htons>
 800ad30:	f010 0f03 	tst.w	r0, #3
 800ad34:	d0c5      	beq.n	800acc2 <tcp_receive+0x6be>
 800ad36:	2301      	movs	r3, #1
 800ad38:	441e      	add	r6, r3
 800ad3a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ad3c:	4433      	add	r3, r6
 800ad3e:	64e3      	str	r3, [r4, #76]	; 0x4c
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ad40:	f8b4 7050 	ldrh.w	r7, [r4, #80]	; 0x50
 800ad44:	892e      	ldrh	r6, [r5, #8]
 800ad46:	68eb      	ldr	r3, [r5, #12]
 800ad48:	8998      	ldrh	r0, [r3, #12]
 800ad4a:	f7fc fa41 	bl	80071d0 <lwip_htons>
 800ad4e:	f010 0f03 	tst.w	r0, #3
 800ad52:	d0b8      	beq.n	800acc6 <tcp_receive+0x6c2>
 800ad54:	2301      	movs	r3, #1
 800ad56:	441e      	add	r6, r3
 800ad58:	42b7      	cmp	r7, r6
 800ad5a:	d3b6      	bcc.n	800acca <tcp_receive+0x6c6>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ad5c:	892e      	ldrh	r6, [r5, #8]
 800ad5e:	68eb      	ldr	r3, [r5, #12]
 800ad60:	8998      	ldrh	r0, [r3, #12]
 800ad62:	f7fc fa35 	bl	80071d0 <lwip_htons>
 800ad66:	f010 0f03 	tst.w	r0, #3
 800ad6a:	d0b6      	beq.n	800acda <tcp_receive+0x6d6>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	441e      	add	r6, r3
 800ad70:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800ad74:	1b9b      	subs	r3, r3, r6
 800ad76:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
          tcp_update_rcv_ann_wnd(pcb);
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f7fe f964 	bl	8009048 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800ad80:	6869      	ldr	r1, [r5, #4]
 800ad82:	890b      	ldrh	r3, [r1, #8]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d0ae      	beq.n	800ace6 <tcp_receive+0x6e2>
            if (recv_data) {
 800ad88:	4b4b      	ldr	r3, [pc, #300]	; (800aeb8 <tcp_receive+0x8b4>)
 800ad8a:	6818      	ldr	r0, [r3, #0]
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d0a6      	beq.n	800acde <tcp_receive+0x6da>
              pbuf_cat(recv_data, cseg->p);
 800ad90:	f7fd fe66 	bl	8008a60 <pbuf_cat>
 800ad94:	e7a5      	b.n	800ace2 <tcp_receive+0x6de>
              pcb->state = CLOSE_WAIT;
 800ad96:	2307      	movs	r3, #7
 800ad98:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800ad9c:	e7b3      	b.n	800ad06 <tcp_receive+0x702>
        tcp_ack(pcb);
 800ad9e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800ada2:	f013 0f01 	tst.w	r3, #1
 800ada6:	d00e      	beq.n	800adc6 <tcp_receive+0x7c2>
 800ada8:	f023 0301 	bic.w	r3, r3, #1
 800adac:	f043 0302 	orr.w	r3, r3, #2
 800adb0:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        if (ip_current_is_v6()) {
 800adb4:	4b42      	ldr	r3, [pc, #264]	; (800aec0 <tcp_receive+0x8bc>)
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f000 810d 	beq.w	800afd8 <tcp_receive+0x9d4>
          nd6_reachability_hint(ip6_current_src_addr());
 800adbe:	4841      	ldr	r0, [pc, #260]	; (800aec4 <tcp_receive+0x8c0>)
 800adc0:	f009 fdec 	bl	801499c <nd6_reachability_hint>
 800adc4:	e108      	b.n	800afd8 <tcp_receive+0x9d4>
        tcp_ack(pcb);
 800adc6:	f043 0301 	orr.w	r3, r3, #1
 800adca:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 800adce:	e7f1      	b.n	800adb4 <tcp_receive+0x7b0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800add0:	4833      	ldr	r0, [pc, #204]	; (800aea0 <tcp_receive+0x89c>)
 800add2:	f7fe f9d1 	bl	8009178 <tcp_seg_copy>
 800add6:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
        tcp_send_empty_ack(pcb);
 800adda:	4620      	mov	r0, r4
 800addc:	f001 fd72 	bl	800c8c4 <tcp_send_empty_ack>
 800ade0:	e0fa      	b.n	800afd8 <tcp_receive+0x9d4>
              if (inseg.len > next->len) {
 800ade2:	4b2f      	ldr	r3, [pc, #188]	; (800aea0 <tcp_receive+0x89c>)
 800ade4:	891a      	ldrh	r2, [r3, #8]
 800ade6:	892b      	ldrh	r3, [r5, #8]
 800ade8:	429a      	cmp	r2, r3
 800adea:	d9f6      	bls.n	800adda <tcp_receive+0x7d6>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800adec:	482c      	ldr	r0, [pc, #176]	; (800aea0 <tcp_receive+0x89c>)
 800adee:	f7fe f9c3 	bl	8009178 <tcp_seg_copy>
                if (cseg != NULL) {
 800adf2:	4603      	mov	r3, r0
 800adf4:	2800      	cmp	r0, #0
 800adf6:	d0f0      	beq.n	800adda <tcp_receive+0x7d6>
                  if (prev != NULL) {
 800adf8:	b12e      	cbz	r6, 800ae06 <tcp_receive+0x802>
                    prev->next = cseg;
 800adfa:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 800adfc:	4629      	mov	r1, r5
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7ff fbac 	bl	800a55c <tcp_oos_insert_segment>
 800ae04:	e7e9      	b.n	800adda <tcp_receive+0x7d6>
                    pcb->ooseq = cseg;
 800ae06:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
 800ae0a:	e7f7      	b.n	800adfc <tcp_receive+0x7f8>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ae0c:	1a99      	subs	r1, r3, r2
 800ae0e:	2900      	cmp	r1, #0
 800ae10:	db2a      	blt.n	800ae68 <tcp_receive+0x864>
              if (next->next == NULL &&
 800ae12:	6829      	ldr	r1, [r5, #0]
 800ae14:	462e      	mov	r6, r5
 800ae16:	2900      	cmp	r1, #0
 800ae18:	d038      	beq.n	800ae8c <tcp_receive+0x888>
 800ae1a:	460d      	mov	r5, r1
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ae1c:	2d00      	cmp	r5, #0
 800ae1e:	d0dc      	beq.n	800adda <tcp_receive+0x7d6>
            if (seqno == next->tcphdr->seqno) {
 800ae20:	68e8      	ldr	r0, [r5, #12]
 800ae22:	6842      	ldr	r2, [r0, #4]
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d0dc      	beq.n	800ade2 <tcp_receive+0x7de>
              if (prev == NULL) {
 800ae28:	2e00      	cmp	r6, #0
 800ae2a:	d0ef      	beq.n	800ae0c <tcp_receive+0x808>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ae2c:	68f1      	ldr	r1, [r6, #12]
 800ae2e:	6849      	ldr	r1, [r1, #4]
 800ae30:	1a59      	subs	r1, r3, r1
 800ae32:	2901      	cmp	r1, #1
 800ae34:	d4ed      	bmi.n	800ae12 <tcp_receive+0x80e>
 800ae36:	1a99      	subs	r1, r3, r2
 800ae38:	3101      	adds	r1, #1
 800ae3a:	2900      	cmp	r1, #0
 800ae3c:	dce9      	bgt.n	800ae12 <tcp_receive+0x80e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ae3e:	4818      	ldr	r0, [pc, #96]	; (800aea0 <tcp_receive+0x89c>)
 800ae40:	f7fe f99a 	bl	8009178 <tcp_seg_copy>
                  if (cseg != NULL) {
 800ae44:	4607      	mov	r7, r0
 800ae46:	2800      	cmp	r0, #0
 800ae48:	d0c7      	beq.n	800adda <tcp_receive+0x7d6>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ae4a:	68f3      	ldr	r3, [r6, #12]
 800ae4c:	6859      	ldr	r1, [r3, #4]
 800ae4e:	8933      	ldrh	r3, [r6, #8]
 800ae50:	440b      	add	r3, r1
 800ae52:	4a11      	ldr	r2, [pc, #68]	; (800ae98 <tcp_receive+0x894>)
 800ae54:	6812      	ldr	r2, [r2, #0]
 800ae56:	1a9b      	subs	r3, r3, r2
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	dc10      	bgt.n	800ae7e <tcp_receive+0x87a>
                    prev->next = cseg;
 800ae5c:	6037      	str	r7, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ae5e:	4629      	mov	r1, r5
 800ae60:	4638      	mov	r0, r7
 800ae62:	f7ff fb7b 	bl	800a55c <tcp_oos_insert_segment>
 800ae66:	e7b8      	b.n	800adda <tcp_receive+0x7d6>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ae68:	480d      	ldr	r0, [pc, #52]	; (800aea0 <tcp_receive+0x89c>)
 800ae6a:	f7fe f985 	bl	8009178 <tcp_seg_copy>
                  if (cseg != NULL) {
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	d0b3      	beq.n	800adda <tcp_receive+0x7d6>
                    pcb->ooseq = cseg;
 800ae72:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
                    tcp_oos_insert_segment(cseg, next);
 800ae76:	4629      	mov	r1, r5
 800ae78:	f7ff fb70 	bl	800a55c <tcp_oos_insert_segment>
 800ae7c:	e7ad      	b.n	800adda <tcp_receive+0x7d6>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ae7e:	1a52      	subs	r2, r2, r1
 800ae80:	b291      	uxth	r1, r2
 800ae82:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ae84:	6870      	ldr	r0, [r6, #4]
 800ae86:	f7fd fd75 	bl	8008974 <pbuf_realloc>
 800ae8a:	e7e7      	b.n	800ae5c <tcp_receive+0x858>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ae8c:	1a9a      	subs	r2, r3, r2
              if (next->next == NULL &&
 800ae8e:	2a00      	cmp	r2, #0
 800ae90:	dc1a      	bgt.n	800aec8 <tcp_receive+0x8c4>
 800ae92:	460d      	mov	r5, r1
 800ae94:	e7c2      	b.n	800ae1c <tcp_receive+0x818>
 800ae96:	bf00      	nop
 800ae98:	20001768 	.word	0x20001768
 800ae9c:	2000177e 	.word	0x2000177e
 800aea0:	2000174c 	.word	0x2000174c
 800aea4:	080175a0 	.word	0x080175a0
 800aea8:	08017728 	.word	0x08017728
 800aeac:	08015d2c 	.word	0x08015d2c
 800aeb0:	08017764 	.word	0x08017764
 800aeb4:	08017784 	.word	0x08017784
 800aeb8:	20001760 	.word	0x20001760
 800aebc:	20001764 	.word	0x20001764
 800aec0:	20004bac 	.word	0x20004bac
 800aec4:	20004bc0 	.word	0x20004bc0
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800aec8:	8980      	ldrh	r0, [r0, #12]
 800aeca:	f7fc f981 	bl	80071d0 <lwip_htons>
 800aece:	f010 0f01 	tst.w	r0, #1
 800aed2:	d182      	bne.n	800adda <tcp_receive+0x7d6>
                next->next = tcp_seg_copy(&inseg);
 800aed4:	4841      	ldr	r0, [pc, #260]	; (800afdc <tcp_receive+0x9d8>)
 800aed6:	f7fe f94f 	bl	8009178 <tcp_seg_copy>
 800aeda:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800aedc:	2800      	cmp	r0, #0
 800aede:	f43f af7c 	beq.w	800adda <tcp_receive+0x7d6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800aee2:	68eb      	ldr	r3, [r5, #12]
 800aee4:	6859      	ldr	r1, [r3, #4]
 800aee6:	892a      	ldrh	r2, [r5, #8]
 800aee8:	440a      	add	r2, r1
 800aeea:	4b3d      	ldr	r3, [pc, #244]	; (800afe0 <tcp_receive+0x9dc>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	1ad2      	subs	r2, r2, r3
 800aef0:	2a00      	cmp	r2, #0
 800aef2:	dc43      	bgt.n	800af7c <tcp_receive+0x978>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800aef4:	4b3b      	ldr	r3, [pc, #236]	; (800afe4 <tcp_receive+0x9e0>)
 800aef6:	881b      	ldrh	r3, [r3, #0]
 800aef8:	4a39      	ldr	r2, [pc, #228]	; (800afe0 <tcp_receive+0x9dc>)
 800aefa:	6812      	ldr	r2, [r2, #0]
 800aefc:	4413      	add	r3, r2
 800aefe:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800af00:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800af04:	440a      	add	r2, r1
 800af06:	1a9b      	subs	r3, r3, r2
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f77f af66 	ble.w	800adda <tcp_receive+0x7d6>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800af0e:	682b      	ldr	r3, [r5, #0]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	8998      	ldrh	r0, [r3, #12]
 800af14:	f7fc f95c 	bl	80071d0 <lwip_htons>
 800af18:	f010 0f01 	tst.w	r0, #1
 800af1c:	d135      	bne.n	800af8a <tcp_receive+0x986>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800af1e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800af20:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800af24:	4413      	add	r3, r2
 800af26:	b29b      	uxth	r3, r3
 800af28:	682a      	ldr	r2, [r5, #0]
 800af2a:	492d      	ldr	r1, [pc, #180]	; (800afe0 <tcp_receive+0x9dc>)
 800af2c:	6809      	ldr	r1, [r1, #0]
 800af2e:	1a5b      	subs	r3, r3, r1
 800af30:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800af32:	682b      	ldr	r3, [r5, #0]
 800af34:	8919      	ldrh	r1, [r3, #8]
 800af36:	6858      	ldr	r0, [r3, #4]
 800af38:	f7fd fd1c 	bl	8008974 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800af3c:	682b      	ldr	r3, [r5, #0]
 800af3e:	891d      	ldrh	r5, [r3, #8]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	8998      	ldrh	r0, [r3, #12]
 800af44:	f7fc f944 	bl	80071d0 <lwip_htons>
 800af48:	f010 0f03 	tst.w	r0, #3
 800af4c:	d02f      	beq.n	800afae <tcp_receive+0x9aa>
 800af4e:	2301      	movs	r3, #1
 800af50:	442b      	add	r3, r5
 800af52:	b29b      	uxth	r3, r3
 800af54:	4a23      	ldr	r2, [pc, #140]	; (800afe4 <tcp_receive+0x9e0>)
 800af56:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800af58:	4a21      	ldr	r2, [pc, #132]	; (800afe0 <tcp_receive+0x9dc>)
 800af5a:	6812      	ldr	r2, [r2, #0]
 800af5c:	4413      	add	r3, r2
 800af5e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800af60:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800af64:	440a      	add	r2, r1
 800af66:	4293      	cmp	r3, r2
 800af68:	f43f af37 	beq.w	800adda <tcp_receive+0x7d6>
 800af6c:	4b1e      	ldr	r3, [pc, #120]	; (800afe8 <tcp_receive+0x9e4>)
 800af6e:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800af72:	491e      	ldr	r1, [pc, #120]	; (800afec <tcp_receive+0x9e8>)
 800af74:	481e      	ldr	r0, [pc, #120]	; (800aff0 <tcp_receive+0x9ec>)
 800af76:	f009 ff65 	bl	8014e44 <iprintf>
 800af7a:	e72e      	b.n	800adda <tcp_receive+0x7d6>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800af7c:	1a5b      	subs	r3, r3, r1
 800af7e:	b299      	uxth	r1, r3
 800af80:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800af82:	6868      	ldr	r0, [r5, #4]
 800af84:	f7fd fcf6 	bl	8008974 <pbuf_realloc>
 800af88:	e7b4      	b.n	800aef4 <tcp_receive+0x8f0>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800af8a:	682b      	ldr	r3, [r5, #0]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	8998      	ldrh	r0, [r3, #12]
 800af90:	b206      	sxth	r6, r0
 800af92:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800af96:	f7fc f91b 	bl	80071d0 <lwip_htons>
 800af9a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800af9e:	f7fc f917 	bl	80071d0 <lwip_htons>
 800afa2:	b200      	sxth	r0, r0
 800afa4:	682b      	ldr	r3, [r5, #0]
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	4306      	orrs	r6, r0
 800afaa:	819e      	strh	r6, [r3, #12]
 800afac:	e7b7      	b.n	800af1e <tcp_receive+0x91a>
                    tcplen = TCP_TCPLEN(next->next);
 800afae:	2300      	movs	r3, #0
 800afb0:	e7ce      	b.n	800af50 <tcp_receive+0x94c>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800afb2:	4b0b      	ldr	r3, [pc, #44]	; (800afe0 <tcp_receive+0x9dc>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800afb8:	1a99      	subs	r1, r3, r2
 800afba:	2900      	cmp	r1, #0
 800afbc:	db06      	blt.n	800afcc <tcp_receive+0x9c8>
 800afbe:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800afc2:	440a      	add	r2, r1
 800afc4:	1a9b      	subs	r3, r3, r2
 800afc6:	3301      	adds	r3, #1
 800afc8:	2b00      	cmp	r3, #0
 800afca:	dd05      	ble.n	800afd8 <tcp_receive+0x9d4>
      tcp_ack_now(pcb);
 800afcc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800afd0:	f043 0302 	orr.w	r3, r3, #2
 800afd4:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
}
 800afd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afda:	bf00      	nop
 800afdc:	2000174c 	.word	0x2000174c
 800afe0:	20001768 	.word	0x20001768
 800afe4:	2000177e 	.word	0x2000177e
 800afe8:	080175a0 	.word	0x080175a0
 800afec:	080176f0 	.word	0x080176f0
 800aff0:	08015d2c 	.word	0x08015d2c

0800aff4 <tcp_process>:
{
 800aff4:	b570      	push	{r4, r5, r6, lr}
 800aff6:	b084      	sub	sp, #16
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800aff8:	4604      	mov	r4, r0
 800affa:	b1c8      	cbz	r0, 800b030 <tcp_process+0x3c>
  if (flags & TCP_RST) {
 800affc:	4bb0      	ldr	r3, [pc, #704]	; (800b2c0 <tcp_process+0x2cc>)
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	f013 0f04 	tst.w	r3, #4
 800b004:	d044      	beq.n	800b090 <tcp_process+0x9c>
    if (pcb->state == SYN_SENT) {
 800b006:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 800b00a:	2902      	cmp	r1, #2
 800b00c:	d018      	beq.n	800b040 <tcp_process+0x4c>
      if (seqno == pcb->rcv_nxt) {
 800b00e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800b010:	4bac      	ldr	r3, [pc, #688]	; (800b2c4 <tcp_process+0x2d0>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	429a      	cmp	r2, r3
 800b016:	d024      	beq.n	800b062 <tcp_process+0x6e>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b018:	1a99      	subs	r1, r3, r2
 800b01a:	2900      	cmp	r1, #0
 800b01c:	f2c0 82cd 	blt.w	800b5ba <tcp_process+0x5c6>
 800b020:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800b024:	440a      	add	r2, r1
 800b026:	1a9b      	subs	r3, r3, r2
 800b028:	2b00      	cmp	r3, #0
 800b02a:	dd12      	ble.n	800b052 <tcp_process+0x5e>
      return ERR_OK;
 800b02c:	2500      	movs	r5, #0
 800b02e:	e00d      	b.n	800b04c <tcp_process+0x58>
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b030:	4ba5      	ldr	r3, [pc, #660]	; (800b2c8 <tcp_process+0x2d4>)
 800b032:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b036:	49a5      	ldr	r1, [pc, #660]	; (800b2cc <tcp_process+0x2d8>)
 800b038:	48a5      	ldr	r0, [pc, #660]	; (800b2d0 <tcp_process+0x2dc>)
 800b03a:	f009 ff03 	bl	8014e44 <iprintf>
 800b03e:	e7dd      	b.n	800affc <tcp_process+0x8>
      if (ackno == pcb->snd_nxt) {
 800b040:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b042:	4ba4      	ldr	r3, [pc, #656]	; (800b2d4 <tcp_process+0x2e0>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	429a      	cmp	r2, r3
 800b048:	d00b      	beq.n	800b062 <tcp_process+0x6e>
      return ERR_OK;
 800b04a:	2500      	movs	r5, #0
}
 800b04c:	4628      	mov	r0, r5
 800b04e:	b004      	add	sp, #16
 800b050:	bd70      	pop	{r4, r5, r6, pc}
        tcp_ack_now(pcb);
 800b052:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b056:	f043 0302 	orr.w	r3, r3, #2
 800b05a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      return ERR_OK;
 800b05e:	2500      	movs	r5, #0
 800b060:	e7f4      	b.n	800b04c <tcp_process+0x58>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b062:	b169      	cbz	r1, 800b080 <tcp_process+0x8c>
      recv_flags |= TF_RESET;
 800b064:	4a9c      	ldr	r2, [pc, #624]	; (800b2d8 <tcp_process+0x2e4>)
 800b066:	7813      	ldrb	r3, [r2, #0]
 800b068:	f043 0308 	orr.w	r3, r3, #8
 800b06c:	7013      	strb	r3, [r2, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b06e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b072:	f023 0301 	bic.w	r3, r3, #1
 800b076:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      return ERR_RST;
 800b07a:	f06f 050d 	mvn.w	r5, #13
 800b07e:	e7e5      	b.n	800b04c <tcp_process+0x58>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b080:	4b91      	ldr	r3, [pc, #580]	; (800b2c8 <tcp_process+0x2d4>)
 800b082:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b086:	4995      	ldr	r1, [pc, #596]	; (800b2dc <tcp_process+0x2e8>)
 800b088:	4891      	ldr	r0, [pc, #580]	; (800b2d0 <tcp_process+0x2dc>)
 800b08a:	f009 fedb 	bl	8014e44 <iprintf>
 800b08e:	e7e9      	b.n	800b064 <tcp_process+0x70>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b090:	f013 0f02 	tst.w	r3, #2
 800b094:	d00d      	beq.n	800b0b2 <tcp_process+0xbe>
 800b096:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b09a:	3b02      	subs	r3, #2
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d907      	bls.n	800b0b2 <tcp_process+0xbe>
    tcp_ack_now(pcb);
 800b0a2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b0a6:	f043 0302 	orr.w	r3, r3, #2
 800b0aa:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    return ERR_OK;
 800b0ae:	2500      	movs	r5, #0
 800b0b0:	e7cc      	b.n	800b04c <tcp_process+0x58>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b0b2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b0b6:	f013 0f10 	tst.w	r3, #16
 800b0ba:	d102      	bne.n	800b0c2 <tcp_process+0xce>
    pcb->tmr = tcp_ticks;
 800b0bc:	4b88      	ldr	r3, [pc, #544]	; (800b2e0 <tcp_process+0x2ec>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	64a3      	str	r3, [r4, #72]	; 0x48
  pcb->keep_cnt_sent = 0;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	f884 30c3 	strb.w	r3, [r4, #195]	; 0xc3
  pcb->persist_probe = 0;
 800b0c8:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
  tcp_parseopt(pcb);
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f7ff f809 	bl	800a0e4 <tcp_parseopt>
  switch (pcb->state) {
 800b0d2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b0d6:	3b02      	subs	r3, #2
 800b0d8:	2b07      	cmp	r3, #7
 800b0da:	f200 8270 	bhi.w	800b5be <tcp_process+0x5ca>
 800b0de:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b0e2:	0008      	.short	0x0008
 800b0e4:	017800ca 	.word	0x017800ca
 800b0e8:	01eb018c 	.word	0x01eb018c
 800b0ec:	021c0178 	.word	0x021c0178
 800b0f0:	0251      	.short	0x0251
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b0f2:	4b73      	ldr	r3, [pc, #460]	; (800b2c0 <tcp_process+0x2cc>)
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	f003 0212 	and.w	r2, r3, #18
 800b0fa:	2a12      	cmp	r2, #18
 800b0fc:	d005      	beq.n	800b10a <tcp_process+0x116>
      else if (flags & TCP_ACK) {
 800b0fe:	f013 0f10 	tst.w	r3, #16
 800b102:	f040 8097 	bne.w	800b234 <tcp_process+0x240>
  return ERR_OK;
 800b106:	2500      	movs	r5, #0
 800b108:	e7a0      	b.n	800b04c <tcp_process+0x58>
          && (ackno == pcb->lastack + 1)) {
 800b10a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800b10c:	3201      	adds	r2, #1
 800b10e:	4971      	ldr	r1, [pc, #452]	; (800b2d4 <tcp_process+0x2e0>)
 800b110:	6809      	ldr	r1, [r1, #0]
 800b112:	428a      	cmp	r2, r1
 800b114:	d1f3      	bne.n	800b0fe <tcp_process+0x10a>
        pcb->rcv_nxt = seqno + 1;
 800b116:	4b6b      	ldr	r3, [pc, #428]	; (800b2c4 <tcp_process+0x2d0>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	1c5a      	adds	r2, r3, #1
 800b11c:	64e2      	str	r2, [r4, #76]	; 0x4c
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b11e:	6562      	str	r2, [r4, #84]	; 0x54
        pcb->lastack = ackno;
 800b120:	66e1      	str	r1, [r4, #108]	; 0x6c
        pcb->snd_wnd = tcphdr->wnd;
 800b122:	4a70      	ldr	r2, [pc, #448]	; (800b2e4 <tcp_process+0x2f0>)
 800b124:	6812      	ldr	r2, [r2, #0]
 800b126:	89d2      	ldrh	r2, [r2, #14]
 800b128:	f8a4 2088 	strh.w	r2, [r4, #136]	; 0x88
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b12c:	f8a4 208a 	strh.w	r2, [r4, #138]	; 0x8a
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b130:	3b01      	subs	r3, #1
 800b132:	67e3      	str	r3, [r4, #124]	; 0x7c
        pcb->state = ESTABLISHED;
 800b134:	2304      	movs	r3, #4
 800b136:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b13a:	f8b4 505a 	ldrh.w	r5, [r4, #90]	; 0x5a
 800b13e:	f114 0618 	adds.w	r6, r4, #24
 800b142:	d003      	beq.n	800b14c <tcp_process+0x158>
 800b144:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800b148:	2b06      	cmp	r3, #6
 800b14a:	d047      	beq.n	800b1dc <tcp_process+0x1e8>
 800b14c:	f104 0018 	add.w	r0, r4, #24
 800b150:	f004 ff6c 	bl	801002c <ip4_route>
 800b154:	4601      	mov	r1, r0
 800b156:	4632      	mov	r2, r6
 800b158:	4628      	mov	r0, r5
 800b15a:	f7fe f84d 	bl	80091f8 <tcp_eff_send_mss_netif>
 800b15e:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b162:	0042      	lsls	r2, r0, #1
 800b164:	f241 131c 	movw	r3, #4380	; 0x111c
 800b168:	4293      	cmp	r3, r2
 800b16a:	bf38      	it	cc
 800b16c:	4613      	movcc	r3, r2
 800b16e:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
 800b172:	d939      	bls.n	800b1e8 <tcp_process+0x1f4>
 800b174:	0083      	lsls	r3, r0, #2
 800b176:	b29b      	uxth	r3, r3
 800b178:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b17c:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 800b180:	2b00      	cmp	r3, #0
 800b182:	d03b      	beq.n	800b1fc <tcp_process+0x208>
        --pcb->snd_queuelen;
 800b184:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 800b188:	3b01      	subs	r3, #1
 800b18a:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
        rseg = pcb->unacked;
 800b18e:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
        if (rseg == NULL) {
 800b192:	2d00      	cmp	r5, #0
 800b194:	d03a      	beq.n	800b20c <tcp_process+0x218>
          pcb->unacked = rseg->next;
 800b196:	682b      	ldr	r3, [r5, #0]
 800b198:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
        tcp_seg_free(rseg);
 800b19c:	4628      	mov	r0, r5
 800b19e:	f7fd ffd3 	bl	8009148 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800b1a2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d03f      	beq.n	800b22a <tcp_process+0x236>
          pcb->rtime = 0;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
          pcb->nrtx = 0;
 800b1b0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b1b4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800b1b8:	b143      	cbz	r3, 800b1cc <tcp_process+0x1d8>
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	4621      	mov	r1, r4
 800b1be:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b1c0:	4798      	blx	r3
 800b1c2:	4605      	mov	r5, r0
        if (err == ERR_ABRT) {
 800b1c4:	f110 0f0d 	cmn.w	r0, #13
 800b1c8:	f43f af40 	beq.w	800b04c <tcp_process+0x58>
        tcp_ack_now(pcb);
 800b1cc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b1d0:	f043 0302 	orr.w	r3, r3, #2
 800b1d4:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  return ERR_OK;
 800b1d8:	2500      	movs	r5, #0
        tcp_ack_now(pcb);
 800b1da:	e737      	b.n	800b04c <tcp_process+0x58>
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b1dc:	4631      	mov	r1, r6
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f005 ff0c 	bl	8010ffc <ip6_route>
 800b1e4:	4601      	mov	r1, r0
 800b1e6:	e7b6      	b.n	800b156 <tcp_process+0x162>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b1e8:	f241 131c 	movw	r3, #4380	; 0x111c
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d902      	bls.n	800b1f6 <tcp_process+0x202>
 800b1f0:	0043      	lsls	r3, r0, #1
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	e7c0      	b.n	800b178 <tcp_process+0x184>
 800b1f6:	f241 131c 	movw	r3, #4380	; 0x111c
 800b1fa:	e7bd      	b.n	800b178 <tcp_process+0x184>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b1fc:	4b32      	ldr	r3, [pc, #200]	; (800b2c8 <tcp_process+0x2d4>)
 800b1fe:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b202:	4939      	ldr	r1, [pc, #228]	; (800b2e8 <tcp_process+0x2f4>)
 800b204:	4832      	ldr	r0, [pc, #200]	; (800b2d0 <tcp_process+0x2dc>)
 800b206:	f009 fe1d 	bl	8014e44 <iprintf>
 800b20a:	e7bb      	b.n	800b184 <tcp_process+0x190>
          rseg = pcb->unsent;
 800b20c:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b210:	b11d      	cbz	r5, 800b21a <tcp_process+0x226>
          pcb->unsent = rseg->next;
 800b212:	682b      	ldr	r3, [r5, #0]
 800b214:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800b218:	e7c0      	b.n	800b19c <tcp_process+0x1a8>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b21a:	4b2b      	ldr	r3, [pc, #172]	; (800b2c8 <tcp_process+0x2d4>)
 800b21c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b220:	4932      	ldr	r1, [pc, #200]	; (800b2ec <tcp_process+0x2f8>)
 800b222:	482b      	ldr	r0, [pc, #172]	; (800b2d0 <tcp_process+0x2dc>)
 800b224:	f009 fe0e 	bl	8014e44 <iprintf>
 800b228:	e7f3      	b.n	800b212 <tcp_process+0x21e>
          pcb->rtime = -1;
 800b22a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b22e:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 800b232:	e7bf      	b.n	800b1b4 <tcp_process+0x1c0>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b234:	4b2b      	ldr	r3, [pc, #172]	; (800b2e4 <tcp_process+0x2f0>)
 800b236:	6818      	ldr	r0, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b238:	4b2d      	ldr	r3, [pc, #180]	; (800b2f0 <tcp_process+0x2fc>)
 800b23a:	4a2e      	ldr	r2, [pc, #184]	; (800b2f4 <tcp_process+0x300>)
 800b23c:	8815      	ldrh	r5, [r2, #0]
 800b23e:	4a21      	ldr	r2, [pc, #132]	; (800b2c4 <tcp_process+0x2d0>)
 800b240:	6812      	ldr	r2, [r2, #0]
 800b242:	4924      	ldr	r1, [pc, #144]	; (800b2d4 <tcp_process+0x2e0>)
 800b244:	6809      	ldr	r1, [r1, #0]
 800b246:	8806      	ldrh	r6, [r0, #0]
 800b248:	9602      	str	r6, [sp, #8]
 800b24a:	8840      	ldrh	r0, [r0, #2]
 800b24c:	9001      	str	r0, [sp, #4]
 800b24e:	f1a3 0018 	sub.w	r0, r3, #24
 800b252:	9000      	str	r0, [sp, #0]
 800b254:	442a      	add	r2, r5
 800b256:	4620      	mov	r0, r4
 800b258:	f001 faec 	bl	800c834 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b25c:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 800b260:	2b05      	cmp	r3, #5
 800b262:	d901      	bls.n	800b268 <tcp_process+0x274>
  return ERR_OK;
 800b264:	2500      	movs	r5, #0
 800b266:	e6f1      	b.n	800b04c <tcp_process+0x58>
          pcb->rtime = 0;
 800b268:	2500      	movs	r5, #0
 800b26a:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
          tcp_rexmit_rto(pcb);
 800b26e:	4620      	mov	r0, r4
 800b270:	f001 fd38 	bl	800cce4 <tcp_rexmit_rto>
 800b274:	e6ea      	b.n	800b04c <tcp_process+0x58>
      if (flags & TCP_ACK) {
 800b276:	4b12      	ldr	r3, [pc, #72]	; (800b2c0 <tcp_process+0x2cc>)
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	f013 0f10 	tst.w	r3, #16
 800b27e:	f000 8097 	beq.w	800b3b0 <tcp_process+0x3bc>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b282:	4b14      	ldr	r3, [pc, #80]	; (800b2d4 <tcp_process+0x2e0>)
 800b284:	6819      	ldr	r1, [r3, #0]
 800b286:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b288:	1acb      	subs	r3, r1, r3
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d403      	bmi.n	800b296 <tcp_process+0x2a2>
 800b28e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b290:	1acb      	subs	r3, r1, r3
 800b292:	2b00      	cmp	r3, #0
 800b294:	dd30      	ble.n	800b2f8 <tcp_process+0x304>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b296:	4b13      	ldr	r3, [pc, #76]	; (800b2e4 <tcp_process+0x2f0>)
 800b298:	6818      	ldr	r0, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b29a:	4b15      	ldr	r3, [pc, #84]	; (800b2f0 <tcp_process+0x2fc>)
 800b29c:	4a15      	ldr	r2, [pc, #84]	; (800b2f4 <tcp_process+0x300>)
 800b29e:	8815      	ldrh	r5, [r2, #0]
 800b2a0:	4a08      	ldr	r2, [pc, #32]	; (800b2c4 <tcp_process+0x2d0>)
 800b2a2:	6812      	ldr	r2, [r2, #0]
 800b2a4:	8806      	ldrh	r6, [r0, #0]
 800b2a6:	9602      	str	r6, [sp, #8]
 800b2a8:	8840      	ldrh	r0, [r0, #2]
 800b2aa:	9001      	str	r0, [sp, #4]
 800b2ac:	f1a3 0018 	sub.w	r0, r3, #24
 800b2b0:	9000      	str	r0, [sp, #0]
 800b2b2:	442a      	add	r2, r5
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	f001 fabd 	bl	800c834 <tcp_rst>
  return ERR_OK;
 800b2ba:	2500      	movs	r5, #0
 800b2bc:	e6c6      	b.n	800b04c <tcp_process+0x58>
 800b2be:	bf00      	nop
 800b2c0:	20001748 	.word	0x20001748
 800b2c4:	20001768 	.word	0x20001768
 800b2c8:	080175a0 	.word	0x080175a0
 800b2cc:	080175f0 	.word	0x080175f0
 800b2d0:	08015d2c 	.word	0x08015d2c
 800b2d4:	20001744 	.word	0x20001744
 800b2d8:	20001764 	.word	0x20001764
 800b2dc:	0801760c 	.word	0x0801760c
 800b2e0:	20008614 	.word	0x20008614
 800b2e4:	20001770 	.word	0x20001770
 800b2e8:	0801762c 	.word	0x0801762c
 800b2ec:	08017644 	.word	0x08017644
 800b2f0:	20004bd8 	.word	0x20004bd8
 800b2f4:	2000177e 	.word	0x2000177e
          pcb->state = ESTABLISHED;
 800b2f8:	2304      	movs	r3, #4
 800b2fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          if (pcb->listener == NULL) {
 800b2fe:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800b302:	b1eb      	cbz	r3, 800b340 <tcp_process+0x34c>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b306:	b19b      	cbz	r3, 800b330 <tcp_process+0x33c>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b308:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800b30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b30e:	b1d3      	cbz	r3, 800b346 <tcp_process+0x352>
 800b310:	2200      	movs	r2, #0
 800b312:	4621      	mov	r1, r4
 800b314:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b316:	4798      	blx	r3
          if (err != ERR_OK) {
 800b318:	4605      	mov	r5, r0
 800b31a:	b1b8      	cbz	r0, 800b34c <tcp_process+0x358>
            if (err != ERR_ABRT) {
 800b31c:	f115 0f0d 	cmn.w	r5, #13
 800b320:	f43f ae94 	beq.w	800b04c <tcp_process+0x58>
              tcp_abort(pcb);
 800b324:	4620      	mov	r0, r4
 800b326:	f7fe f8e1 	bl	80094ec <tcp_abort>
            return ERR_ABRT;
 800b32a:	f06f 050c 	mvn.w	r5, #12
 800b32e:	e68d      	b.n	800b04c <tcp_process+0x58>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b330:	4ba9      	ldr	r3, [pc, #676]	; (800b5d8 <tcp_process+0x5e4>)
 800b332:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b336:	49a9      	ldr	r1, [pc, #676]	; (800b5dc <tcp_process+0x5e8>)
 800b338:	48a9      	ldr	r0, [pc, #676]	; (800b5e0 <tcp_process+0x5ec>)
 800b33a:	f009 fd83 	bl	8014e44 <iprintf>
 800b33e:	e7e3      	b.n	800b308 <tcp_process+0x314>
            err = ERR_VAL;
 800b340:	f06f 0505 	mvn.w	r5, #5
 800b344:	e7ea      	b.n	800b31c <tcp_process+0x328>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b346:	f06f 050f 	mvn.w	r5, #15
 800b34a:	e7e7      	b.n	800b31c <tcp_process+0x328>
          tcp_receive(pcb);
 800b34c:	4620      	mov	r0, r4
 800b34e:	f7ff f959 	bl	800a604 <tcp_receive>
          if (recv_acked != 0) {
 800b352:	4ba4      	ldr	r3, [pc, #656]	; (800b5e4 <tcp_process+0x5f0>)
 800b354:	881b      	ldrh	r3, [r3, #0]
 800b356:	b113      	cbz	r3, 800b35e <tcp_process+0x36a>
            recv_acked--;
 800b358:	3b01      	subs	r3, #1
 800b35a:	4aa2      	ldr	r2, [pc, #648]	; (800b5e4 <tcp_process+0x5f0>)
 800b35c:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b35e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800b362:	0059      	lsls	r1, r3, #1
 800b364:	f241 121c 	movw	r2, #4380	; 0x111c
 800b368:	428a      	cmp	r2, r1
 800b36a:	bf38      	it	cc
 800b36c:	460a      	movcc	r2, r1
 800b36e:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800b372:	d913      	bls.n	800b39c <tcp_process+0x3a8>
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	b29b      	uxth	r3, r3
 800b378:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
          if (recv_flags & TF_GOT_FIN) {
 800b37c:	4b9a      	ldr	r3, [pc, #616]	; (800b5e8 <tcp_process+0x5f4>)
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	f013 0f20 	tst.w	r3, #32
 800b384:	f43f ae62 	beq.w	800b04c <tcp_process+0x58>
            tcp_ack_now(pcb);
 800b388:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b38c:	f043 0302 	orr.w	r3, r3, #2
 800b390:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
            pcb->state = CLOSE_WAIT;
 800b394:	2307      	movs	r3, #7
 800b396:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800b39a:	e657      	b.n	800b04c <tcp_process+0x58>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b39c:	f241 121c 	movw	r2, #4380	; 0x111c
 800b3a0:	4291      	cmp	r1, r2
 800b3a2:	d902      	bls.n	800b3aa <tcp_process+0x3b6>
 800b3a4:	005b      	lsls	r3, r3, #1
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	e7e6      	b.n	800b378 <tcp_process+0x384>
 800b3aa:	f241 131c 	movw	r3, #4380	; 0x111c
 800b3ae:	e7e3      	b.n	800b378 <tcp_process+0x384>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b3b0:	f013 0f02 	tst.w	r3, #2
 800b3b4:	f000 8105 	beq.w	800b5c2 <tcp_process+0x5ce>
 800b3b8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	4a8b      	ldr	r2, [pc, #556]	; (800b5ec <tcp_process+0x5f8>)
 800b3be:	6812      	ldr	r2, [r2, #0]
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d001      	beq.n	800b3c8 <tcp_process+0x3d4>
  return ERR_OK;
 800b3c4:	2500      	movs	r5, #0
 800b3c6:	e641      	b.n	800b04c <tcp_process+0x58>
        tcp_rexmit(pcb);
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	f001 f9a9 	bl	800c720 <tcp_rexmit>
  return ERR_OK;
 800b3ce:	2500      	movs	r5, #0
 800b3d0:	e63c      	b.n	800b04c <tcp_process+0x58>
      tcp_receive(pcb);
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f7ff f916 	bl	800a604 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b3d8:	4b83      	ldr	r3, [pc, #524]	; (800b5e8 <tcp_process+0x5f4>)
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	f013 0f20 	tst.w	r3, #32
 800b3e0:	f000 80f1 	beq.w	800b5c6 <tcp_process+0x5d2>
        tcp_ack_now(pcb);
 800b3e4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b3e8:	f043 0302 	orr.w	r3, r3, #2
 800b3ec:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        pcb->state = CLOSE_WAIT;
 800b3f0:	2307      	movs	r3, #7
 800b3f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return ERR_OK;
 800b3f6:	2500      	movs	r5, #0
 800b3f8:	e628      	b.n	800b04c <tcp_process+0x58>
      tcp_receive(pcb);
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f7ff f902 	bl	800a604 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b400:	4b79      	ldr	r3, [pc, #484]	; (800b5e8 <tcp_process+0x5f4>)
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	f013 0f20 	tst.w	r3, #32
 800b408:	d03f      	beq.n	800b48a <tcp_process+0x496>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b40a:	4b79      	ldr	r3, [pc, #484]	; (800b5f0 <tcp_process+0x5fc>)
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	f013 0f10 	tst.w	r3, #16
 800b412:	d004      	beq.n	800b41e <tcp_process+0x42a>
 800b414:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b416:	4b77      	ldr	r3, [pc, #476]	; (800b5f4 <tcp_process+0x600>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d00a      	beq.n	800b434 <tcp_process+0x440>
          tcp_ack_now(pcb);
 800b41e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b422:	f043 0302 	orr.w	r3, r3, #2
 800b426:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
          pcb->state = CLOSING;
 800b42a:	2308      	movs	r3, #8
 800b42c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return ERR_OK;
 800b430:	2500      	movs	r5, #0
 800b432:	e60b      	b.n	800b04c <tcp_process+0x58>
            pcb->unsent == NULL) {
 800b434:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d1f0      	bne.n	800b41e <tcp_process+0x42a>
          tcp_ack_now(pcb);
 800b43c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b440:	f043 0302 	orr.w	r3, r3, #2
 800b444:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
          tcp_pcb_purge(pcb);
 800b448:	4620      	mov	r0, r4
 800b44a:	f7fd ff17 	bl	800927c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b44e:	4b6a      	ldr	r3, [pc, #424]	; (800b5f8 <tcp_process+0x604>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	42a3      	cmp	r3, r4
 800b454:	d005      	beq.n	800b462 <tcp_process+0x46e>
 800b456:	b13b      	cbz	r3, 800b468 <tcp_process+0x474>
 800b458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b45a:	42a2      	cmp	r2, r4
 800b45c:	d012      	beq.n	800b484 <tcp_process+0x490>
 800b45e:	4613      	mov	r3, r2
 800b460:	e7f9      	b.n	800b456 <tcp_process+0x462>
 800b462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b464:	4b64      	ldr	r3, [pc, #400]	; (800b5f8 <tcp_process+0x604>)
 800b466:	601a      	str	r2, [r3, #0]
 800b468:	4b64      	ldr	r3, [pc, #400]	; (800b5fc <tcp_process+0x608>)
 800b46a:	2201      	movs	r2, #1
 800b46c:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b46e:	230a      	movs	r3, #10
 800b470:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b474:	4b62      	ldr	r3, [pc, #392]	; (800b600 <tcp_process+0x60c>)
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	6362      	str	r2, [r4, #52]	; 0x34
 800b47a:	601c      	str	r4, [r3, #0]
 800b47c:	f001 fd5e 	bl	800cf3c <tcp_timer_needed>
  return ERR_OK;
 800b480:	2500      	movs	r5, #0
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b482:	e5e3      	b.n	800b04c <tcp_process+0x58>
          TCP_RMV_ACTIVE(pcb);
 800b484:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b486:	635a      	str	r2, [r3, #52]	; 0x34
 800b488:	e7ee      	b.n	800b468 <tcp_process+0x474>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b48a:	4b59      	ldr	r3, [pc, #356]	; (800b5f0 <tcp_process+0x5fc>)
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	f013 0f10 	tst.w	r3, #16
 800b492:	f000 809a 	beq.w	800b5ca <tcp_process+0x5d6>
 800b496:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b498:	4b56      	ldr	r3, [pc, #344]	; (800b5f4 <tcp_process+0x600>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d001      	beq.n	800b4a4 <tcp_process+0x4b0>
  return ERR_OK;
 800b4a0:	2500      	movs	r5, #0
 800b4a2:	e5d3      	b.n	800b04c <tcp_process+0x58>
                 pcb->unsent == NULL) {
 800b4a4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b4a8:	b10b      	cbz	r3, 800b4ae <tcp_process+0x4ba>
  return ERR_OK;
 800b4aa:	2500      	movs	r5, #0
 800b4ac:	e5ce      	b.n	800b04c <tcp_process+0x58>
        pcb->state = FIN_WAIT_2;
 800b4ae:	2306      	movs	r3, #6
 800b4b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return ERR_OK;
 800b4b4:	2500      	movs	r5, #0
 800b4b6:	e5c9      	b.n	800b04c <tcp_process+0x58>
      tcp_receive(pcb);
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f7ff f8a3 	bl	800a604 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b4be:	4b4a      	ldr	r3, [pc, #296]	; (800b5e8 <tcp_process+0x5f4>)
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	f013 0f20 	tst.w	r3, #32
 800b4c6:	d101      	bne.n	800b4cc <tcp_process+0x4d8>
  return ERR_OK;
 800b4c8:	2500      	movs	r5, #0
 800b4ca:	e5bf      	b.n	800b04c <tcp_process+0x58>
        tcp_ack_now(pcb);
 800b4cc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800b4d0:	f043 0302 	orr.w	r3, r3, #2
 800b4d4:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        tcp_pcb_purge(pcb);
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f7fd fecf 	bl	800927c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b4de:	4b46      	ldr	r3, [pc, #280]	; (800b5f8 <tcp_process+0x604>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	42a3      	cmp	r3, r4
 800b4e4:	d005      	beq.n	800b4f2 <tcp_process+0x4fe>
 800b4e6:	b153      	cbz	r3, 800b4fe <tcp_process+0x50a>
 800b4e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4ea:	42a2      	cmp	r2, r4
 800b4ec:	d005      	beq.n	800b4fa <tcp_process+0x506>
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	e7f9      	b.n	800b4e6 <tcp_process+0x4f2>
 800b4f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4f4:	4b40      	ldr	r3, [pc, #256]	; (800b5f8 <tcp_process+0x604>)
 800b4f6:	601a      	str	r2, [r3, #0]
 800b4f8:	e001      	b.n	800b4fe <tcp_process+0x50a>
 800b4fa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b4fc:	635a      	str	r2, [r3, #52]	; 0x34
 800b4fe:	4b3f      	ldr	r3, [pc, #252]	; (800b5fc <tcp_process+0x608>)
 800b500:	2201      	movs	r2, #1
 800b502:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b504:	230a      	movs	r3, #10
 800b506:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b50a:	4b3d      	ldr	r3, [pc, #244]	; (800b600 <tcp_process+0x60c>)
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	6362      	str	r2, [r4, #52]	; 0x34
 800b510:	601c      	str	r4, [r3, #0]
 800b512:	f001 fd13 	bl	800cf3c <tcp_timer_needed>
  return ERR_OK;
 800b516:	2500      	movs	r5, #0
 800b518:	e598      	b.n	800b04c <tcp_process+0x58>
      tcp_receive(pcb);
 800b51a:	4620      	mov	r0, r4
 800b51c:	f7ff f872 	bl	800a604 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b520:	4b33      	ldr	r3, [pc, #204]	; (800b5f0 <tcp_process+0x5fc>)
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	f013 0f10 	tst.w	r3, #16
 800b528:	d051      	beq.n	800b5ce <tcp_process+0x5da>
 800b52a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b52c:	4b31      	ldr	r3, [pc, #196]	; (800b5f4 <tcp_process+0x600>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	429a      	cmp	r2, r3
 800b532:	d001      	beq.n	800b538 <tcp_process+0x544>
  return ERR_OK;
 800b534:	2500      	movs	r5, #0
 800b536:	e589      	b.n	800b04c <tcp_process+0x58>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b538:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b53c:	b10b      	cbz	r3, 800b542 <tcp_process+0x54e>
  return ERR_OK;
 800b53e:	2500      	movs	r5, #0
 800b540:	e584      	b.n	800b04c <tcp_process+0x58>
        tcp_pcb_purge(pcb);
 800b542:	4620      	mov	r0, r4
 800b544:	f7fd fe9a 	bl	800927c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b548:	4b2b      	ldr	r3, [pc, #172]	; (800b5f8 <tcp_process+0x604>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	42a3      	cmp	r3, r4
 800b54e:	d005      	beq.n	800b55c <tcp_process+0x568>
 800b550:	b153      	cbz	r3, 800b568 <tcp_process+0x574>
 800b552:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b554:	42a2      	cmp	r2, r4
 800b556:	d005      	beq.n	800b564 <tcp_process+0x570>
 800b558:	4613      	mov	r3, r2
 800b55a:	e7f9      	b.n	800b550 <tcp_process+0x55c>
 800b55c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b55e:	4b26      	ldr	r3, [pc, #152]	; (800b5f8 <tcp_process+0x604>)
 800b560:	601a      	str	r2, [r3, #0]
 800b562:	e001      	b.n	800b568 <tcp_process+0x574>
 800b564:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800b566:	635a      	str	r2, [r3, #52]	; 0x34
 800b568:	4b24      	ldr	r3, [pc, #144]	; (800b5fc <tcp_process+0x608>)
 800b56a:	2201      	movs	r2, #1
 800b56c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b56e:	230a      	movs	r3, #10
 800b570:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b574:	4b22      	ldr	r3, [pc, #136]	; (800b600 <tcp_process+0x60c>)
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	6362      	str	r2, [r4, #52]	; 0x34
 800b57a:	601c      	str	r4, [r3, #0]
 800b57c:	f001 fcde 	bl	800cf3c <tcp_timer_needed>
  return ERR_OK;
 800b580:	2500      	movs	r5, #0
 800b582:	e563      	b.n	800b04c <tcp_process+0x58>
      tcp_receive(pcb);
 800b584:	4620      	mov	r0, r4
 800b586:	f7ff f83d 	bl	800a604 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b58a:	4b19      	ldr	r3, [pc, #100]	; (800b5f0 <tcp_process+0x5fc>)
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	f013 0f10 	tst.w	r3, #16
 800b592:	d01e      	beq.n	800b5d2 <tcp_process+0x5de>
 800b594:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b596:	4b17      	ldr	r3, [pc, #92]	; (800b5f4 <tcp_process+0x600>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d001      	beq.n	800b5a2 <tcp_process+0x5ae>
  return ERR_OK;
 800b59e:	2500      	movs	r5, #0
 800b5a0:	e554      	b.n	800b04c <tcp_process+0x58>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b5a2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b5a6:	b10b      	cbz	r3, 800b5ac <tcp_process+0x5b8>
  return ERR_OK;
 800b5a8:	2500      	movs	r5, #0
 800b5aa:	e54f      	b.n	800b04c <tcp_process+0x58>
        recv_flags |= TF_CLOSED;
 800b5ac:	4a0e      	ldr	r2, [pc, #56]	; (800b5e8 <tcp_process+0x5f4>)
 800b5ae:	7813      	ldrb	r3, [r2, #0]
 800b5b0:	f043 0310 	orr.w	r3, r3, #16
 800b5b4:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 800b5b6:	2500      	movs	r5, #0
 800b5b8:	e548      	b.n	800b04c <tcp_process+0x58>
      return ERR_OK;
 800b5ba:	2500      	movs	r5, #0
 800b5bc:	e546      	b.n	800b04c <tcp_process+0x58>
  return ERR_OK;
 800b5be:	2500      	movs	r5, #0
 800b5c0:	e544      	b.n	800b04c <tcp_process+0x58>
 800b5c2:	2500      	movs	r5, #0
 800b5c4:	e542      	b.n	800b04c <tcp_process+0x58>
 800b5c6:	2500      	movs	r5, #0
 800b5c8:	e540      	b.n	800b04c <tcp_process+0x58>
 800b5ca:	2500      	movs	r5, #0
 800b5cc:	e53e      	b.n	800b04c <tcp_process+0x58>
 800b5ce:	2500      	movs	r5, #0
 800b5d0:	e53c      	b.n	800b04c <tcp_process+0x58>
 800b5d2:	2500      	movs	r5, #0
 800b5d4:	e53a      	b.n	800b04c <tcp_process+0x58>
 800b5d6:	bf00      	nop
 800b5d8:	080175a0 	.word	0x080175a0
 800b5dc:	08017658 	.word	0x08017658
 800b5e0:	08015d2c 	.word	0x08015d2c
 800b5e4:	2000175c 	.word	0x2000175c
 800b5e8:	20001764 	.word	0x20001764
 800b5ec:	20001768 	.word	0x20001768
 800b5f0:	20001748 	.word	0x20001748
 800b5f4:	20001744 	.word	0x20001744
 800b5f8:	20008610 	.word	0x20008610
 800b5fc:	2000860c 	.word	0x2000860c
 800b600:	20008620 	.word	0x20008620

0800b604 <tcp_input>:
{
 800b604:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b606:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b608:	4605      	mov	r5, r0
 800b60a:	2800      	cmp	r0, #0
 800b60c:	d05c      	beq.n	800b6c8 <tcp_input+0xc4>
  tcphdr = (struct tcp_hdr *)p->payload;
 800b60e:	686a      	ldr	r2, [r5, #4]
 800b610:	4b7b      	ldr	r3, [pc, #492]	; (800b800 <tcp_input+0x1fc>)
 800b612:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 800b614:	896b      	ldrh	r3, [r5, #10]
 800b616:	2b13      	cmp	r3, #19
 800b618:	d964      	bls.n	800b6e4 <tcp_input+0xe0>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b61a:	4b7a      	ldr	r3, [pc, #488]	; (800b804 <tcp_input+0x200>)
 800b61c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b620:	2b06      	cmp	r3, #6
 800b622:	d158      	bne.n	800b6d6 <tcp_input+0xd2>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b624:	4b77      	ldr	r3, [pc, #476]	; (800b804 <tcp_input+0x200>)
 800b626:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b62a:	2b06      	cmp	r3, #6
 800b62c:	d05f      	beq.n	800b6ee <tcp_input+0xea>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b62e:	4b75      	ldr	r3, [pc, #468]	; (800b804 <tcp_input+0x200>)
 800b630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b636:	2be0      	cmp	r3, #224	; 0xe0
 800b638:	d054      	beq.n	800b6e4 <tcp_input+0xe0>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b63a:	4b71      	ldr	r3, [pc, #452]	; (800b800 <tcp_input+0x1fc>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	8998      	ldrh	r0, [r3, #12]
 800b640:	f7fb fdc6 	bl	80071d0 <lwip_htons>
 800b644:	f3c0 3107 	ubfx	r1, r0, #12, #8
 800b648:	0089      	lsls	r1, r1, #2
 800b64a:	b2c9      	uxtb	r1, r1
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b64c:	2913      	cmp	r1, #19
 800b64e:	d949      	bls.n	800b6e4 <tcp_input+0xe0>
 800b650:	b28b      	uxth	r3, r1
 800b652:	892a      	ldrh	r2, [r5, #8]
 800b654:	4293      	cmp	r3, r2
 800b656:	d845      	bhi.n	800b6e4 <tcp_input+0xe0>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b658:	f1a3 0214 	sub.w	r2, r3, #20
 800b65c:	b292      	uxth	r2, r2
 800b65e:	486a      	ldr	r0, [pc, #424]	; (800b808 <tcp_input+0x204>)
 800b660:	8002      	strh	r2, [r0, #0]
  tcphdr_opt2 = NULL;
 800b662:	486a      	ldr	r0, [pc, #424]	; (800b80c <tcp_input+0x208>)
 800b664:	2400      	movs	r4, #0
 800b666:	6004      	str	r4, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 800b668:	8968      	ldrh	r0, [r5, #10]
 800b66a:	4283      	cmp	r3, r0
 800b66c:	d945      	bls.n	800b6fa <tcp_input+0xf6>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b66e:	682b      	ldr	r3, [r5, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d07d      	beq.n	800b770 <tcp_input+0x16c>
    pbuf_remove_header(p, TCP_HLEN);
 800b674:	2114      	movs	r1, #20
 800b676:	4628      	mov	r0, r5
 800b678:	f7fd f826 	bl	80086c8 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800b67c:	8969      	ldrh	r1, [r5, #10]
 800b67e:	4b64      	ldr	r3, [pc, #400]	; (800b810 <tcp_input+0x20c>)
 800b680:	8019      	strh	r1, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b682:	4b61      	ldr	r3, [pc, #388]	; (800b808 <tcp_input+0x204>)
 800b684:	881c      	ldrh	r4, [r3, #0]
 800b686:	1a64      	subs	r4, r4, r1
 800b688:	b2a4      	uxth	r4, r4
    pbuf_remove_header(p, tcphdr_opt1len);
 800b68a:	4628      	mov	r0, r5
 800b68c:	f7fd f81c 	bl	80086c8 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800b690:	6828      	ldr	r0, [r5, #0]
 800b692:	8943      	ldrh	r3, [r0, #10]
 800b694:	42a3      	cmp	r3, r4
 800b696:	d325      	bcc.n	800b6e4 <tcp_input+0xe0>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b698:	6842      	ldr	r2, [r0, #4]
 800b69a:	4b5c      	ldr	r3, [pc, #368]	; (800b80c <tcp_input+0x208>)
 800b69c:	601a      	str	r2, [r3, #0]
    pbuf_remove_header(p->next, opt2len);
 800b69e:	4621      	mov	r1, r4
 800b6a0:	f7fd f812 	bl	80086c8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b6a4:	892b      	ldrh	r3, [r5, #8]
 800b6a6:	1b1c      	subs	r4, r3, r4
 800b6a8:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b6aa:	896b      	ldrh	r3, [r5, #10]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d166      	bne.n	800b77e <tcp_input+0x17a>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b6b0:	892a      	ldrh	r2, [r5, #8]
 800b6b2:	682b      	ldr	r3, [r5, #0]
 800b6b4:	891b      	ldrh	r3, [r3, #8]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d024      	beq.n	800b704 <tcp_input+0x100>
 800b6ba:	4b56      	ldr	r3, [pc, #344]	; (800b814 <tcp_input+0x210>)
 800b6bc:	22e0      	movs	r2, #224	; 0xe0
 800b6be:	4956      	ldr	r1, [pc, #344]	; (800b818 <tcp_input+0x214>)
 800b6c0:	4856      	ldr	r0, [pc, #344]	; (800b81c <tcp_input+0x218>)
 800b6c2:	f009 fbbf 	bl	8014e44 <iprintf>
 800b6c6:	e01d      	b.n	800b704 <tcp_input+0x100>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b6c8:	4b52      	ldr	r3, [pc, #328]	; (800b814 <tcp_input+0x210>)
 800b6ca:	2283      	movs	r2, #131	; 0x83
 800b6cc:	4954      	ldr	r1, [pc, #336]	; (800b820 <tcp_input+0x21c>)
 800b6ce:	4853      	ldr	r0, [pc, #332]	; (800b81c <tcp_input+0x218>)
 800b6d0:	f009 fbb8 	bl	8014e44 <iprintf>
 800b6d4:	e79b      	b.n	800b60e <tcp_input+0xa>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b6d6:	4b4b      	ldr	r3, [pc, #300]	; (800b804 <tcp_input+0x200>)
 800b6d8:	6819      	ldr	r1, [r3, #0]
 800b6da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b6dc:	f004 fe71 	bl	80103c2 <ip4_addr_isbroadcast_u32>
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d09f      	beq.n	800b624 <tcp_input+0x20>
  pbuf_free(p);
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	f7fd f835 	bl	8008754 <pbuf_free>
}
 800b6ea:	b005      	add	sp, #20
 800b6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b6ee:	4b45      	ldr	r3, [pc, #276]	; (800b804 <tcp_input+0x200>)
 800b6f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b6f4:	2bff      	cmp	r3, #255	; 0xff
 800b6f6:	d1a0      	bne.n	800b63a <tcp_input+0x36>
 800b6f8:	e7f4      	b.n	800b6e4 <tcp_input+0xe0>
    tcphdr_opt1len = tcphdr_optlen;
 800b6fa:	4b45      	ldr	r3, [pc, #276]	; (800b810 <tcp_input+0x20c>)
 800b6fc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b6fe:	4628      	mov	r0, r5
 800b700:	f7fc ffe2 	bl	80086c8 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b704:	4c3e      	ldr	r4, [pc, #248]	; (800b800 <tcp_input+0x1fc>)
 800b706:	6826      	ldr	r6, [r4, #0]
 800b708:	8830      	ldrh	r0, [r6, #0]
 800b70a:	f7fb fd61 	bl	80071d0 <lwip_htons>
 800b70e:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b710:	6826      	ldr	r6, [r4, #0]
 800b712:	8870      	ldrh	r0, [r6, #2]
 800b714:	f7fb fd5c 	bl	80071d0 <lwip_htons>
 800b718:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b71a:	6826      	ldr	r6, [r4, #0]
 800b71c:	6870      	ldr	r0, [r6, #4]
 800b71e:	f7fb fd5c 	bl	80071da <lwip_htonl>
 800b722:	6070      	str	r0, [r6, #4]
 800b724:	4b3f      	ldr	r3, [pc, #252]	; (800b824 <tcp_input+0x220>)
 800b726:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b728:	6826      	ldr	r6, [r4, #0]
 800b72a:	68b0      	ldr	r0, [r6, #8]
 800b72c:	f7fb fd55 	bl	80071da <lwip_htonl>
 800b730:	60b0      	str	r0, [r6, #8]
 800b732:	4b3d      	ldr	r3, [pc, #244]	; (800b828 <tcp_input+0x224>)
 800b734:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b736:	6826      	ldr	r6, [r4, #0]
 800b738:	89f0      	ldrh	r0, [r6, #14]
 800b73a:	f7fb fd49 	bl	80071d0 <lwip_htons>
 800b73e:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 800b740:	6823      	ldr	r3, [r4, #0]
 800b742:	8998      	ldrh	r0, [r3, #12]
 800b744:	f7fb fd44 	bl	80071d0 <lwip_htons>
 800b748:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800b74c:	4b37      	ldr	r3, [pc, #220]	; (800b82c <tcp_input+0x228>)
 800b74e:	7018      	strb	r0, [r3, #0]
  tcplen = p->tot_len;
 800b750:	892b      	ldrh	r3, [r5, #8]
 800b752:	4a37      	ldr	r2, [pc, #220]	; (800b830 <tcp_input+0x22c>)
 800b754:	8013      	strh	r3, [r2, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b756:	f010 0f03 	tst.w	r0, #3
 800b75a:	d005      	beq.n	800b768 <tcp_input+0x164>
    tcplen++;
 800b75c:	1c5a      	adds	r2, r3, #1
 800b75e:	b292      	uxth	r2, r2
 800b760:	4933      	ldr	r1, [pc, #204]	; (800b830 <tcp_input+0x22c>)
 800b762:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 800b764:	4293      	cmp	r3, r2
 800b766:	d8bd      	bhi.n	800b6e4 <tcp_input+0xe0>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b768:	4b32      	ldr	r3, [pc, #200]	; (800b834 <tcp_input+0x230>)
 800b76a:	681c      	ldr	r4, [r3, #0]
  prev = NULL;
 800b76c:	2600      	movs	r6, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b76e:	e02b      	b.n	800b7c8 <tcp_input+0x1c4>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b770:	4b28      	ldr	r3, [pc, #160]	; (800b814 <tcp_input+0x210>)
 800b772:	22c2      	movs	r2, #194	; 0xc2
 800b774:	4930      	ldr	r1, [pc, #192]	; (800b838 <tcp_input+0x234>)
 800b776:	4829      	ldr	r0, [pc, #164]	; (800b81c <tcp_input+0x218>)
 800b778:	f009 fb64 	bl	8014e44 <iprintf>
 800b77c:	e77a      	b.n	800b674 <tcp_input+0x70>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b77e:	4b25      	ldr	r3, [pc, #148]	; (800b814 <tcp_input+0x210>)
 800b780:	22df      	movs	r2, #223	; 0xdf
 800b782:	492e      	ldr	r1, [pc, #184]	; (800b83c <tcp_input+0x238>)
 800b784:	4825      	ldr	r0, [pc, #148]	; (800b81c <tcp_input+0x218>)
 800b786:	f009 fb5d 	bl	8014e44 <iprintf>
 800b78a:	e791      	b.n	800b6b0 <tcp_input+0xac>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b78c:	4b21      	ldr	r3, [pc, #132]	; (800b814 <tcp_input+0x210>)
 800b78e:	22fb      	movs	r2, #251	; 0xfb
 800b790:	492b      	ldr	r1, [pc, #172]	; (800b840 <tcp_input+0x23c>)
 800b792:	4822      	ldr	r0, [pc, #136]	; (800b81c <tcp_input+0x218>)
 800b794:	f009 fb56 	bl	8014e44 <iprintf>
 800b798:	e01c      	b.n	800b7d4 <tcp_input+0x1d0>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b79a:	4b1e      	ldr	r3, [pc, #120]	; (800b814 <tcp_input+0x210>)
 800b79c:	22fc      	movs	r2, #252	; 0xfc
 800b79e:	4929      	ldr	r1, [pc, #164]	; (800b844 <tcp_input+0x240>)
 800b7a0:	481e      	ldr	r0, [pc, #120]	; (800b81c <tcp_input+0x218>)
 800b7a2:	f009 fb4f 	bl	8014e44 <iprintf>
 800b7a6:	e019      	b.n	800b7dc <tcp_input+0x1d8>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b7a8:	4b1a      	ldr	r3, [pc, #104]	; (800b814 <tcp_input+0x210>)
 800b7aa:	22fd      	movs	r2, #253	; 0xfd
 800b7ac:	4926      	ldr	r1, [pc, #152]	; (800b848 <tcp_input+0x244>)
 800b7ae:	481b      	ldr	r0, [pc, #108]	; (800b81c <tcp_input+0x218>)
 800b7b0:	f009 fb48 	bl	8014e44 <iprintf>
 800b7b4:	e016      	b.n	800b7e4 <tcp_input+0x1e0>
    if (pcb->remote_port == tcphdr->src &&
 800b7b6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800b7ba:	4b11      	ldr	r3, [pc, #68]	; (800b800 <tcp_input+0x1fc>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	881a      	ldrh	r2, [r3, #0]
 800b7c0:	4291      	cmp	r1, r2
 800b7c2:	d043      	beq.n	800b84c <tcp_input+0x248>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b7c4:	4626      	mov	r6, r4
 800b7c6:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800b7c8:	2c00      	cmp	r4, #0
 800b7ca:	d076      	beq.n	800b8ba <tcp_input+0x2b6>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b7cc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d0db      	beq.n	800b78c <tcp_input+0x188>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b7d4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b7d8:	2b0a      	cmp	r3, #10
 800b7da:	d0de      	beq.n	800b79a <tcp_input+0x196>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b7dc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d0e1      	beq.n	800b7a8 <tcp_input+0x1a4>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b7e4:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800b7e8:	2a00      	cmp	r2, #0
 800b7ea:	d0e4      	beq.n	800b7b6 <tcp_input+0x1b2>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b7ec:	4b05      	ldr	r3, [pc, #20]	; (800b804 <tcp_input+0x200>)
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d0dc      	beq.n	800b7b6 <tcp_input+0x1b2>
 800b7fc:	e7e2      	b.n	800b7c4 <tcp_input+0x1c0>
 800b7fe:	bf00      	nop
 800b800:	20001770 	.word	0x20001770
 800b804:	20004bac 	.word	0x20004bac
 800b808:	2000177c 	.word	0x2000177c
 800b80c:	20001778 	.word	0x20001778
 800b810:	20001774 	.word	0x20001774
 800b814:	080175a0 	.word	0x080175a0
 800b818:	080173f0 	.word	0x080173f0
 800b81c:	08015d2c 	.word	0x08015d2c
 800b820:	080173bc 	.word	0x080173bc
 800b824:	20001768 	.word	0x20001768
 800b828:	20001744 	.word	0x20001744
 800b82c:	20001748 	.word	0x20001748
 800b830:	2000177e 	.word	0x2000177e
 800b834:	20008610 	.word	0x20008610
 800b838:	080173d4 	.word	0x080173d4
 800b83c:	080173e4 	.word	0x080173e4
 800b840:	08017410 	.word	0x08017410
 800b844:	08017438 	.word	0x08017438
 800b848:	08017464 	.word	0x08017464
        pcb->local_port == tcphdr->dest &&
 800b84c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b84e:	885b      	ldrh	r3, [r3, #2]
    if (pcb->remote_port == tcphdr->src &&
 800b850:	429a      	cmp	r2, r3
 800b852:	d1b7      	bne.n	800b7c4 <tcp_input+0x1c0>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b854:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800b858:	4a9f      	ldr	r2, [pc, #636]	; (800bad8 <tcp_input+0x4d4>)
 800b85a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
        pcb->local_port == tcphdr->dest &&
 800b85e:	4293      	cmp	r3, r2
 800b860:	d1b0      	bne.n	800b7c4 <tcp_input+0x1c0>
 800b862:	2b06      	cmp	r3, #6
 800b864:	d071      	beq.n	800b94a <tcp_input+0x346>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b866:	69a3      	ldr	r3, [r4, #24]
 800b868:	4a9b      	ldr	r2, [pc, #620]	; (800bad8 <tcp_input+0x4d4>)
 800b86a:	6952      	ldr	r2, [r2, #20]
        pcb->local_port == tcphdr->dest &&
 800b86c:	4293      	cmp	r3, r2
 800b86e:	bf14      	ite	ne
 800b870:	2300      	movne	r3, #0
 800b872:	2301      	moveq	r3, #1
 800b874:	2b00      	cmp	r3, #0
 800b876:	d0a5      	beq.n	800b7c4 <tcp_input+0x1c0>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b878:	7d23      	ldrb	r3, [r4, #20]
 800b87a:	4a97      	ldr	r2, [pc, #604]	; (800bad8 <tcp_input+0x4d4>)
 800b87c:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b880:	4293      	cmp	r3, r2
 800b882:	d19f      	bne.n	800b7c4 <tcp_input+0x1c0>
 800b884:	2b06      	cmp	r3, #6
 800b886:	f000 8087 	beq.w	800b998 <tcp_input+0x394>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b88a:	6823      	ldr	r3, [r4, #0]
 800b88c:	4a92      	ldr	r2, [pc, #584]	; (800bad8 <tcp_input+0x4d4>)
 800b88e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b890:	4293      	cmp	r3, r2
 800b892:	bf14      	ite	ne
 800b894:	2300      	movne	r3, #0
 800b896:	2301      	moveq	r3, #1
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d093      	beq.n	800b7c4 <tcp_input+0x1c0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b89c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b89e:	42a3      	cmp	r3, r4
 800b8a0:	f000 80a0 	beq.w	800b9e4 <tcp_input+0x3e0>
      if (prev != NULL) {
 800b8a4:	b12e      	cbz	r6, 800b8b2 <tcp_input+0x2ae>
        prev->next = pcb->next;
 800b8a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8a8:	6373      	str	r3, [r6, #52]	; 0x34
        pcb->next = tcp_active_pcbs;
 800b8aa:	4b8c      	ldr	r3, [pc, #560]	; (800badc <tcp_input+0x4d8>)
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	6362      	str	r2, [r4, #52]	; 0x34
        tcp_active_pcbs = pcb;
 800b8b0:	601c      	str	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b8b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8b4:	42a3      	cmp	r3, r4
 800b8b6:	f000 809d 	beq.w	800b9f4 <tcp_input+0x3f0>
  if (pcb == NULL) {
 800b8ba:	2c00      	cmp	r4, #0
 800b8bc:	f000 80a2 	beq.w	800ba04 <tcp_input+0x400>
  if (pcb != NULL) {
 800b8c0:	2c00      	cmp	r4, #0
 800b8c2:	f000 8298 	beq.w	800bdf6 <tcp_input+0x7f2>
    inseg.next = NULL;
 800b8c6:	4a86      	ldr	r2, [pc, #536]	; (800bae0 <tcp_input+0x4dc>)
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 800b8cc:	8929      	ldrh	r1, [r5, #8]
 800b8ce:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 800b8d0:	6055      	str	r5, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b8d2:	4984      	ldr	r1, [pc, #528]	; (800bae4 <tcp_input+0x4e0>)
 800b8d4:	6809      	ldr	r1, [r1, #0]
 800b8d6:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 800b8d8:	4a83      	ldr	r2, [pc, #524]	; (800bae8 <tcp_input+0x4e4>)
 800b8da:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 800b8dc:	4a83      	ldr	r2, [pc, #524]	; (800baec <tcp_input+0x4e8>)
 800b8de:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 800b8e0:	4a83      	ldr	r2, [pc, #524]	; (800baf0 <tcp_input+0x4ec>)
 800b8e2:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 800b8e4:	4b83      	ldr	r3, [pc, #524]	; (800baf4 <tcp_input+0x4f0>)
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	f013 0f08 	tst.w	r3, #8
 800b8ec:	d003      	beq.n	800b8f6 <tcp_input+0x2f2>
      p->flags |= PBUF_FLAG_PUSH;
 800b8ee:	7b6b      	ldrb	r3, [r5, #13]
 800b8f0:	f043 0301 	orr.w	r3, r3, #1
 800b8f4:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 800b8f6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	f000 81ce 	beq.w	800bc9c <tcp_input+0x698>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b900:	4620      	mov	r0, r4
 800b902:	f7fe f8b9 	bl	8009a78 <tcp_process_refused_data>
 800b906:	f110 0f0d 	cmn.w	r0, #13
 800b90a:	d009      	beq.n	800b920 <tcp_input+0x31c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b90c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b910:	2b00      	cmp	r3, #0
 800b912:	f000 81c3 	beq.w	800bc9c <tcp_input+0x698>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b916:	4b78      	ldr	r3, [pc, #480]	; (800baf8 <tcp_input+0x4f4>)
 800b918:	881b      	ldrh	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	f000 81be 	beq.w	800bc9c <tcp_input+0x698>
        if (pcb->rcv_ann_wnd == 0) {
 800b920:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800b924:	2b00      	cmp	r3, #0
 800b926:	f000 81b5 	beq.w	800bc94 <tcp_input+0x690>
    tcp_input_pcb = NULL;
 800b92a:	2300      	movs	r3, #0
 800b92c:	4a73      	ldr	r2, [pc, #460]	; (800bafc <tcp_input+0x4f8>)
 800b92e:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 800b930:	4a6d      	ldr	r2, [pc, #436]	; (800bae8 <tcp_input+0x4e4>)
 800b932:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL) {
 800b934:	4b6a      	ldr	r3, [pc, #424]	; (800bae0 <tcp_input+0x4dc>)
 800b936:	6858      	ldr	r0, [r3, #4]
 800b938:	2800      	cmp	r0, #0
 800b93a:	f43f aed6 	beq.w	800b6ea <tcp_input+0xe6>
      pbuf_free(inseg.p);
 800b93e:	f7fc ff09 	bl	8008754 <pbuf_free>
      inseg.p = NULL;
 800b942:	4b67      	ldr	r3, [pc, #412]	; (800bae0 <tcp_input+0x4dc>)
 800b944:	2200      	movs	r2, #0
 800b946:	605a      	str	r2, [r3, #4]
 800b948:	e6cf      	b.n	800b6ea <tcp_input+0xe6>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b94a:	69a2      	ldr	r2, [r4, #24]
 800b94c:	4b62      	ldr	r3, [pc, #392]	; (800bad8 <tcp_input+0x4d4>)
 800b94e:	695b      	ldr	r3, [r3, #20]
 800b950:	429a      	cmp	r2, r3
 800b952:	d001      	beq.n	800b958 <tcp_input+0x354>
 800b954:	2300      	movs	r3, #0
 800b956:	e78d      	b.n	800b874 <tcp_input+0x270>
 800b958:	69e2      	ldr	r2, [r4, #28]
 800b95a:	4b5f      	ldr	r3, [pc, #380]	; (800bad8 <tcp_input+0x4d4>)
 800b95c:	699b      	ldr	r3, [r3, #24]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d001      	beq.n	800b966 <tcp_input+0x362>
 800b962:	2300      	movs	r3, #0
 800b964:	e786      	b.n	800b874 <tcp_input+0x270>
 800b966:	6a22      	ldr	r2, [r4, #32]
 800b968:	4b5b      	ldr	r3, [pc, #364]	; (800bad8 <tcp_input+0x4d4>)
 800b96a:	69db      	ldr	r3, [r3, #28]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d001      	beq.n	800b974 <tcp_input+0x370>
 800b970:	2300      	movs	r3, #0
 800b972:	e77f      	b.n	800b874 <tcp_input+0x270>
 800b974:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b976:	4b58      	ldr	r3, [pc, #352]	; (800bad8 <tcp_input+0x4d4>)
 800b978:	6a1b      	ldr	r3, [r3, #32]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d108      	bne.n	800b990 <tcp_input+0x38c>
 800b97e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800b982:	4b55      	ldr	r3, [pc, #340]	; (800bad8 <tcp_input+0x4d4>)
 800b984:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b988:	429a      	cmp	r2, r3
 800b98a:	d003      	beq.n	800b994 <tcp_input+0x390>
 800b98c:	2300      	movs	r3, #0
 800b98e:	e771      	b.n	800b874 <tcp_input+0x270>
 800b990:	2300      	movs	r3, #0
 800b992:	e76f      	b.n	800b874 <tcp_input+0x270>
 800b994:	2301      	movs	r3, #1
 800b996:	e76d      	b.n	800b874 <tcp_input+0x270>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b998:	6822      	ldr	r2, [r4, #0]
 800b99a:	4b4f      	ldr	r3, [pc, #316]	; (800bad8 <tcp_input+0x4d4>)
 800b99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d001      	beq.n	800b9a6 <tcp_input+0x3a2>
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	e778      	b.n	800b898 <tcp_input+0x294>
 800b9a6:	6862      	ldr	r2, [r4, #4]
 800b9a8:	4b4b      	ldr	r3, [pc, #300]	; (800bad8 <tcp_input+0x4d4>)
 800b9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d113      	bne.n	800b9d8 <tcp_input+0x3d4>
 800b9b0:	68a2      	ldr	r2, [r4, #8]
 800b9b2:	4b49      	ldr	r3, [pc, #292]	; (800bad8 <tcp_input+0x4d4>)
 800b9b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d001      	beq.n	800b9be <tcp_input+0x3ba>
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	e76c      	b.n	800b898 <tcp_input+0x294>
 800b9be:	68e2      	ldr	r2, [r4, #12]
 800b9c0:	4b45      	ldr	r3, [pc, #276]	; (800bad8 <tcp_input+0x4d4>)
 800b9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d109      	bne.n	800b9dc <tcp_input+0x3d8>
 800b9c8:	7c22      	ldrb	r2, [r4, #16]
 800b9ca:	4b43      	ldr	r3, [pc, #268]	; (800bad8 <tcp_input+0x4d4>)
 800b9cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d005      	beq.n	800b9e0 <tcp_input+0x3dc>
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	e75f      	b.n	800b898 <tcp_input+0x294>
 800b9d8:	2300      	movs	r3, #0
 800b9da:	e75d      	b.n	800b898 <tcp_input+0x294>
 800b9dc:	2300      	movs	r3, #0
 800b9de:	e75b      	b.n	800b898 <tcp_input+0x294>
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	e759      	b.n	800b898 <tcp_input+0x294>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b9e4:	4b46      	ldr	r3, [pc, #280]	; (800bb00 <tcp_input+0x4fc>)
 800b9e6:	f240 120d 	movw	r2, #269	; 0x10d
 800b9ea:	4946      	ldr	r1, [pc, #280]	; (800bb04 <tcp_input+0x500>)
 800b9ec:	4846      	ldr	r0, [pc, #280]	; (800bb08 <tcp_input+0x504>)
 800b9ee:	f009 fa29 	bl	8014e44 <iprintf>
 800b9f2:	e757      	b.n	800b8a4 <tcp_input+0x2a0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b9f4:	4b42      	ldr	r3, [pc, #264]	; (800bb00 <tcp_input+0x4fc>)
 800b9f6:	f240 1215 	movw	r2, #277	; 0x115
 800b9fa:	4944      	ldr	r1, [pc, #272]	; (800bb0c <tcp_input+0x508>)
 800b9fc:	4842      	ldr	r0, [pc, #264]	; (800bb08 <tcp_input+0x504>)
 800b9fe:	f009 fa21 	bl	8014e44 <iprintf>
 800ba02:	e75a      	b.n	800b8ba <tcp_input+0x2b6>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba04:	4b42      	ldr	r3, [pc, #264]	; (800bb10 <tcp_input+0x50c>)
 800ba06:	681c      	ldr	r4, [r3, #0]
 800ba08:	e00f      	b.n	800ba2a <tcp_input+0x426>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ba0a:	4b3d      	ldr	r3, [pc, #244]	; (800bb00 <tcp_input+0x4fc>)
 800ba0c:	f240 121f 	movw	r2, #287	; 0x11f
 800ba10:	4940      	ldr	r1, [pc, #256]	; (800bb14 <tcp_input+0x510>)
 800ba12:	483d      	ldr	r0, [pc, #244]	; (800bb08 <tcp_input+0x504>)
 800ba14:	f009 fa16 	bl	8014e44 <iprintf>
 800ba18:	e00e      	b.n	800ba38 <tcp_input+0x434>
      if (pcb->remote_port == tcphdr->src &&
 800ba1a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800ba1e:	4b31      	ldr	r3, [pc, #196]	; (800bae4 <tcp_input+0x4e0>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	881a      	ldrh	r2, [r3, #0]
 800ba24:	4291      	cmp	r1, r2
 800ba26:	d014      	beq.n	800ba52 <tcp_input+0x44e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba28:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800ba2a:	2c00      	cmp	r4, #0
 800ba2c:	f000 80ac 	beq.w	800bb88 <tcp_input+0x584>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ba30:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800ba34:	2b0a      	cmp	r3, #10
 800ba36:	d1e8      	bne.n	800ba0a <tcp_input+0x406>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ba38:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800ba3c:	2a00      	cmp	r2, #0
 800ba3e:	d0ec      	beq.n	800ba1a <tcp_input+0x416>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ba40:	4b25      	ldr	r3, [pc, #148]	; (800bad8 <tcp_input+0x4d4>)
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 800ba48:	3301      	adds	r3, #1
 800ba4a:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d0e4      	beq.n	800ba1a <tcp_input+0x416>
 800ba50:	e7ea      	b.n	800ba28 <tcp_input+0x424>
          pcb->local_port == tcphdr->dest &&
 800ba52:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800ba54:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d1e6      	bne.n	800ba28 <tcp_input+0x424>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ba5a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800ba5e:	4a1e      	ldr	r2, [pc, #120]	; (800bad8 <tcp_input+0x4d4>)
 800ba60:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
          pcb->local_port == tcphdr->dest &&
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d1df      	bne.n	800ba28 <tcp_input+0x424>
 800ba68:	2b06      	cmp	r3, #6
 800ba6a:	d020      	beq.n	800baae <tcp_input+0x4aa>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ba6c:	69a3      	ldr	r3, [r4, #24]
 800ba6e:	4a1a      	ldr	r2, [pc, #104]	; (800bad8 <tcp_input+0x4d4>)
 800ba70:	6952      	ldr	r2, [r2, #20]
          pcb->local_port == tcphdr->dest &&
 800ba72:	4293      	cmp	r3, r2
 800ba74:	bf14      	ite	ne
 800ba76:	2300      	movne	r3, #0
 800ba78:	2301      	moveq	r3, #1
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d0d4      	beq.n	800ba28 <tcp_input+0x424>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ba7e:	7d23      	ldrb	r3, [r4, #20]
 800ba80:	4a15      	ldr	r2, [pc, #84]	; (800bad8 <tcp_input+0x4d4>)
 800ba82:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d1ce      	bne.n	800ba28 <tcp_input+0x424>
 800ba8a:	2b06      	cmp	r3, #6
 800ba8c:	d056      	beq.n	800bb3c <tcp_input+0x538>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ba8e:	6823      	ldr	r3, [r4, #0]
 800ba90:	4a11      	ldr	r2, [pc, #68]	; (800bad8 <tcp_input+0x4d4>)
 800ba92:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ba94:	4293      	cmp	r3, r2
 800ba96:	bf14      	ite	ne
 800ba98:	2300      	movne	r3, #0
 800ba9a:	2301      	moveq	r3, #1
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d0c3      	beq.n	800ba28 <tcp_input+0x424>
          tcp_timewait_input(pcb);
 800baa0:	4620      	mov	r0, r4
 800baa2:	f7fe fba5 	bl	800a1f0 <tcp_timewait_input>
        pbuf_free(p);
 800baa6:	4628      	mov	r0, r5
 800baa8:	f7fc fe54 	bl	8008754 <pbuf_free>
        return;
 800baac:	e61d      	b.n	800b6ea <tcp_input+0xe6>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800baae:	69a2      	ldr	r2, [r4, #24]
 800bab0:	4b09      	ldr	r3, [pc, #36]	; (800bad8 <tcp_input+0x4d4>)
 800bab2:	695b      	ldr	r3, [r3, #20]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d001      	beq.n	800babc <tcp_input+0x4b8>
 800bab8:	2300      	movs	r3, #0
 800baba:	e7de      	b.n	800ba7a <tcp_input+0x476>
 800babc:	69e2      	ldr	r2, [r4, #28]
 800babe:	4b06      	ldr	r3, [pc, #24]	; (800bad8 <tcp_input+0x4d4>)
 800bac0:	699b      	ldr	r3, [r3, #24]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d001      	beq.n	800baca <tcp_input+0x4c6>
 800bac6:	2300      	movs	r3, #0
 800bac8:	e7d7      	b.n	800ba7a <tcp_input+0x476>
 800baca:	6a22      	ldr	r2, [r4, #32]
 800bacc:	4b02      	ldr	r3, [pc, #8]	; (800bad8 <tcp_input+0x4d4>)
 800bace:	69db      	ldr	r3, [r3, #28]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d021      	beq.n	800bb18 <tcp_input+0x514>
 800bad4:	2300      	movs	r3, #0
 800bad6:	e7d0      	b.n	800ba7a <tcp_input+0x476>
 800bad8:	20004bac 	.word	0x20004bac
 800badc:	20008610 	.word	0x20008610
 800bae0:	2000174c 	.word	0x2000174c
 800bae4:	20001770 	.word	0x20001770
 800bae8:	20001760 	.word	0x20001760
 800baec:	20001764 	.word	0x20001764
 800baf0:	2000175c 	.word	0x2000175c
 800baf4:	20001748 	.word	0x20001748
 800baf8:	2000177e 	.word	0x2000177e
 800bafc:	20008624 	.word	0x20008624
 800bb00:	080175a0 	.word	0x080175a0
 800bb04:	0801748c 	.word	0x0801748c
 800bb08:	08015d2c 	.word	0x08015d2c
 800bb0c:	080174b8 	.word	0x080174b8
 800bb10:	20008620 	.word	0x20008620
 800bb14:	080174e4 	.word	0x080174e4
 800bb18:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bb1a:	4b99      	ldr	r3, [pc, #612]	; (800bd80 <tcp_input+0x77c>)
 800bb1c:	6a1b      	ldr	r3, [r3, #32]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d001      	beq.n	800bb26 <tcp_input+0x522>
 800bb22:	2300      	movs	r3, #0
 800bb24:	e7a9      	b.n	800ba7a <tcp_input+0x476>
 800bb26:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800bb2a:	4b95      	ldr	r3, [pc, #596]	; (800bd80 <tcp_input+0x77c>)
 800bb2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d001      	beq.n	800bb38 <tcp_input+0x534>
 800bb34:	2300      	movs	r3, #0
 800bb36:	e7a0      	b.n	800ba7a <tcp_input+0x476>
 800bb38:	2301      	movs	r3, #1
 800bb3a:	e79e      	b.n	800ba7a <tcp_input+0x476>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bb3c:	6822      	ldr	r2, [r4, #0]
 800bb3e:	4b90      	ldr	r3, [pc, #576]	; (800bd80 <tcp_input+0x77c>)
 800bb40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d118      	bne.n	800bb78 <tcp_input+0x574>
 800bb46:	6862      	ldr	r2, [r4, #4]
 800bb48:	4b8d      	ldr	r3, [pc, #564]	; (800bd80 <tcp_input+0x77c>)
 800bb4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d001      	beq.n	800bb54 <tcp_input+0x550>
 800bb50:	2300      	movs	r3, #0
 800bb52:	e7a3      	b.n	800ba9c <tcp_input+0x498>
 800bb54:	68a2      	ldr	r2, [r4, #8]
 800bb56:	4b8a      	ldr	r3, [pc, #552]	; (800bd80 <tcp_input+0x77c>)
 800bb58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d10e      	bne.n	800bb7c <tcp_input+0x578>
 800bb5e:	68e2      	ldr	r2, [r4, #12]
 800bb60:	4b87      	ldr	r3, [pc, #540]	; (800bd80 <tcp_input+0x77c>)
 800bb62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d10b      	bne.n	800bb80 <tcp_input+0x57c>
 800bb68:	7c22      	ldrb	r2, [r4, #16]
 800bb6a:	4b85      	ldr	r3, [pc, #532]	; (800bd80 <tcp_input+0x77c>)
 800bb6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d007      	beq.n	800bb84 <tcp_input+0x580>
 800bb74:	2300      	movs	r3, #0
 800bb76:	e791      	b.n	800ba9c <tcp_input+0x498>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	e78f      	b.n	800ba9c <tcp_input+0x498>
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	e78d      	b.n	800ba9c <tcp_input+0x498>
 800bb80:	2300      	movs	r3, #0
 800bb82:	e78b      	b.n	800ba9c <tcp_input+0x498>
 800bb84:	2301      	movs	r3, #1
 800bb86:	e789      	b.n	800ba9c <tcp_input+0x498>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bb88:	4b7e      	ldr	r3, [pc, #504]	; (800bd84 <tcp_input+0x780>)
 800bb8a:	681e      	ldr	r6, [r3, #0]
 800bb8c:	4630      	mov	r0, r6
    prev = NULL;
 800bb8e:	4621      	mov	r1, r4
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bb90:	e007      	b.n	800bba2 <tcp_input+0x59e>
      if (lpcb->local_port == tcphdr->dest) {
 800bb92:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 800bb94:	4b7c      	ldr	r3, [pc, #496]	; (800bd88 <tcp_input+0x784>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	885b      	ldrh	r3, [r3, #2]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d00f      	beq.n	800bbbe <tcp_input+0x5ba>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bb9e:	4601      	mov	r1, r0
 800bba0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800bba2:	b348      	cbz	r0, 800bbf8 <tcp_input+0x5f4>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bba4:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 800bba8:	2a00      	cmp	r2, #0
 800bbaa:	d0f2      	beq.n	800bb92 <tcp_input+0x58e>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bbac:	4b74      	ldr	r3, [pc, #464]	; (800bd80 <tcp_input+0x77c>)
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d0ea      	beq.n	800bb92 <tcp_input+0x58e>
 800bbbc:	e7ef      	b.n	800bb9e <tcp_input+0x59a>
        if (IP_IS_ANY_TYPE_VAL(lpcb->local_ip)) {
 800bbbe:	7d03      	ldrb	r3, [r0, #20]
 800bbc0:	2b2e      	cmp	r3, #46	; 0x2e
 800bbc2:	d019      	beq.n	800bbf8 <tcp_input+0x5f4>
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
 800bbc4:	4a6e      	ldr	r2, [pc, #440]	; (800bd80 <tcp_input+0x77c>)
 800bbc6:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d1e7      	bne.n	800bb9e <tcp_input+0x59a>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bbce:	2b06      	cmp	r3, #6
 800bbd0:	d021      	beq.n	800bc16 <tcp_input+0x612>
 800bbd2:	6802      	ldr	r2, [r0, #0]
 800bbd4:	4f6a      	ldr	r7, [pc, #424]	; (800bd80 <tcp_input+0x77c>)
 800bbd6:	6aff      	ldr	r7, [r7, #44]	; 0x2c
 800bbd8:	42ba      	cmp	r2, r7
 800bbda:	bf14      	ite	ne
 800bbdc:	2200      	movne	r2, #0
 800bbde:	2201      	moveq	r2, #1
 800bbe0:	b952      	cbnz	r2, 800bbf8 <tcp_input+0x5f4>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bbe2:	b148      	cbz	r0, 800bbf8 <tcp_input+0x5f4>
 800bbe4:	2b06      	cmp	r3, #6
 800bbe6:	d03c      	beq.n	800bc62 <tcp_input+0x65e>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	d04f      	beq.n	800bc8c <tcp_input+0x688>
 800bbec:	6803      	ldr	r3, [r0, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d14e      	bne.n	800bc90 <tcp_input+0x68c>
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d0d2      	beq.n	800bb9e <tcp_input+0x59a>
    if (lpcb != NULL) {
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	f43f ae61 	beq.w	800b8c0 <tcp_input+0x2bc>
      if (prev != NULL) {
 800bbfe:	b121      	cbz	r1, 800bc0a <tcp_input+0x606>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bc00:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bc02:	634b      	str	r3, [r1, #52]	; 0x34
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bc04:	6346      	str	r6, [r0, #52]	; 0x34
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bc06:	4b5f      	ldr	r3, [pc, #380]	; (800bd84 <tcp_input+0x780>)
 800bc08:	6018      	str	r0, [r3, #0]
        tcp_listen_input(lpcb);
 800bc0a:	f7fe fb4f 	bl	800a2ac <tcp_listen_input>
      pbuf_free(p);
 800bc0e:	4628      	mov	r0, r5
 800bc10:	f7fc fda0 	bl	8008754 <pbuf_free>
      return;
 800bc14:	e569      	b.n	800b6ea <tcp_input+0xe6>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bc16:	6807      	ldr	r7, [r0, #0]
 800bc18:	4a59      	ldr	r2, [pc, #356]	; (800bd80 <tcp_input+0x77c>)
 800bc1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bc1c:	4297      	cmp	r7, r2
 800bc1e:	d001      	beq.n	800bc24 <tcp_input+0x620>
 800bc20:	2200      	movs	r2, #0
 800bc22:	e7dd      	b.n	800bbe0 <tcp_input+0x5dc>
 800bc24:	6847      	ldr	r7, [r0, #4]
 800bc26:	4a56      	ldr	r2, [pc, #344]	; (800bd80 <tcp_input+0x77c>)
 800bc28:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bc2a:	4297      	cmp	r7, r2
 800bc2c:	d001      	beq.n	800bc32 <tcp_input+0x62e>
 800bc2e:	2200      	movs	r2, #0
 800bc30:	e7d6      	b.n	800bbe0 <tcp_input+0x5dc>
 800bc32:	6887      	ldr	r7, [r0, #8]
 800bc34:	4a52      	ldr	r2, [pc, #328]	; (800bd80 <tcp_input+0x77c>)
 800bc36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bc38:	4297      	cmp	r7, r2
 800bc3a:	d001      	beq.n	800bc40 <tcp_input+0x63c>
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	e7cf      	b.n	800bbe0 <tcp_input+0x5dc>
 800bc40:	68c7      	ldr	r7, [r0, #12]
 800bc42:	4a4f      	ldr	r2, [pc, #316]	; (800bd80 <tcp_input+0x77c>)
 800bc44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bc46:	4297      	cmp	r7, r2
 800bc48:	d001      	beq.n	800bc4e <tcp_input+0x64a>
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	e7c8      	b.n	800bbe0 <tcp_input+0x5dc>
 800bc4e:	7c07      	ldrb	r7, [r0, #16]
 800bc50:	4a4b      	ldr	r2, [pc, #300]	; (800bd80 <tcp_input+0x77c>)
 800bc52:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 800bc56:	4297      	cmp	r7, r2
 800bc58:	d001      	beq.n	800bc5e <tcp_input+0x65a>
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	e7c0      	b.n	800bbe0 <tcp_input+0x5dc>
 800bc5e:	2201      	movs	r2, #1
 800bc60:	e7be      	b.n	800bbe0 <tcp_input+0x5dc>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bc62:	b148      	cbz	r0, 800bc78 <tcp_input+0x674>
 800bc64:	6803      	ldr	r3, [r0, #0]
 800bc66:	b94b      	cbnz	r3, 800bc7c <tcp_input+0x678>
 800bc68:	6843      	ldr	r3, [r0, #4]
 800bc6a:	b94b      	cbnz	r3, 800bc80 <tcp_input+0x67c>
 800bc6c:	6883      	ldr	r3, [r0, #8]
 800bc6e:	b94b      	cbnz	r3, 800bc84 <tcp_input+0x680>
 800bc70:	68c3      	ldr	r3, [r0, #12]
 800bc72:	b14b      	cbz	r3, 800bc88 <tcp_input+0x684>
 800bc74:	2300      	movs	r3, #0
 800bc76:	e7bd      	b.n	800bbf4 <tcp_input+0x5f0>
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e7bb      	b.n	800bbf4 <tcp_input+0x5f0>
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	e7b9      	b.n	800bbf4 <tcp_input+0x5f0>
 800bc80:	2300      	movs	r3, #0
 800bc82:	e7b7      	b.n	800bbf4 <tcp_input+0x5f0>
 800bc84:	2300      	movs	r3, #0
 800bc86:	e7b5      	b.n	800bbf4 <tcp_input+0x5f0>
 800bc88:	2301      	movs	r3, #1
 800bc8a:	e7b3      	b.n	800bbf4 <tcp_input+0x5f0>
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e7b1      	b.n	800bbf4 <tcp_input+0x5f0>
 800bc90:	2300      	movs	r3, #0
 800bc92:	e7af      	b.n	800bbf4 <tcp_input+0x5f0>
          tcp_send_empty_ack(pcb);
 800bc94:	4620      	mov	r0, r4
 800bc96:	f000 fe15 	bl	800c8c4 <tcp_send_empty_ack>
 800bc9a:	e646      	b.n	800b92a <tcp_input+0x326>
    tcp_input_pcb = pcb;
 800bc9c:	4b3b      	ldr	r3, [pc, #236]	; (800bd8c <tcp_input+0x788>)
 800bc9e:	601c      	str	r4, [r3, #0]
    err = tcp_process(pcb);
 800bca0:	4620      	mov	r0, r4
 800bca2:	f7ff f9a7 	bl	800aff4 <tcp_process>
    if (err != ERR_ABRT) {
 800bca6:	f110 0f0d 	cmn.w	r0, #13
 800bcaa:	f43f ae3e 	beq.w	800b92a <tcp_input+0x326>
      if (recv_flags & TF_RESET) {
 800bcae:	4b38      	ldr	r3, [pc, #224]	; (800bd90 <tcp_input+0x78c>)
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	f013 0f08 	tst.w	r3, #8
 800bcb6:	d00e      	beq.n	800bcd6 <tcp_input+0x6d2>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800bcb8:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 800bcbc:	b11b      	cbz	r3, 800bcc6 <tcp_input+0x6c2>
 800bcbe:	f06f 010d 	mvn.w	r1, #13
 800bcc2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800bcc4:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bcc6:	4621      	mov	r1, r4
 800bcc8:	4832      	ldr	r0, [pc, #200]	; (800bd94 <tcp_input+0x790>)
 800bcca:	f7fd fb11 	bl	80092f0 <tcp_pcb_remove>
        tcp_free(pcb);
 800bcce:	4620      	mov	r0, r4
 800bcd0:	f7fd f9a2 	bl	8009018 <tcp_free>
 800bcd4:	e629      	b.n	800b92a <tcp_input+0x326>
        if (recv_acked > 0) {
 800bcd6:	4b30      	ldr	r3, [pc, #192]	; (800bd98 <tcp_input+0x794>)
 800bcd8:	881a      	ldrh	r2, [r3, #0]
 800bcda:	b162      	cbz	r2, 800bcf6 <tcp_input+0x6f2>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bcdc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800bce0:	b133      	cbz	r3, 800bcf0 <tcp_input+0x6ec>
 800bce2:	4621      	mov	r1, r4
 800bce4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800bce6:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800bce8:	f110 0f0d 	cmn.w	r0, #13
 800bcec:	f43f ae1d 	beq.w	800b92a <tcp_input+0x326>
          recv_acked = 0;
 800bcf0:	4b29      	ldr	r3, [pc, #164]	; (800bd98 <tcp_input+0x794>)
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	f7fe fa48 	bl	800a18c <tcp_input_delayed_close>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	f47f ae14 	bne.w	800b92a <tcp_input+0x326>
        if (recv_data != NULL) {
 800bd02:	4b26      	ldr	r3, [pc, #152]	; (800bd9c <tcp_input+0x798>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	b30b      	cbz	r3, 800bd4c <tcp_input+0x748>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800bd08:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800bd0c:	b133      	cbz	r3, 800bd1c <tcp_input+0x718>
 800bd0e:	4b24      	ldr	r3, [pc, #144]	; (800bda0 <tcp_input+0x79c>)
 800bd10:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bd14:	4923      	ldr	r1, [pc, #140]	; (800bda4 <tcp_input+0x7a0>)
 800bd16:	4824      	ldr	r0, [pc, #144]	; (800bda8 <tcp_input+0x7a4>)
 800bd18:	f009 f894 	bl	8014e44 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800bd1c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800bd20:	f013 0f10 	tst.w	r3, #16
 800bd24:	d142      	bne.n	800bdac <tcp_input+0x7a8>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bd26:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 800bd2a:	2d00      	cmp	r5, #0
 800bd2c:	d046      	beq.n	800bdbc <tcp_input+0x7b8>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	4a1a      	ldr	r2, [pc, #104]	; (800bd9c <tcp_input+0x798>)
 800bd32:	6812      	ldr	r2, [r2, #0]
 800bd34:	4621      	mov	r1, r4
 800bd36:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800bd38:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 800bd3a:	f110 0f0d 	cmn.w	r0, #13
 800bd3e:	f43f adf4 	beq.w	800b92a <tcp_input+0x326>
          if (err != ERR_OK) {
 800bd42:	b118      	cbz	r0, 800bd4c <tcp_input+0x748>
            pcb->refused_data = recv_data;
 800bd44:	4b15      	ldr	r3, [pc, #84]	; (800bd9c <tcp_input+0x798>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        if (recv_flags & TF_GOT_FIN) {
 800bd4c:	4b10      	ldr	r3, [pc, #64]	; (800bd90 <tcp_input+0x78c>)
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	f013 0f20 	tst.w	r3, #32
 800bd54:	d007      	beq.n	800bd66 <tcp_input+0x762>
          if (pcb->refused_data != NULL) {
 800bd56:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d036      	beq.n	800bdcc <tcp_input+0x7c8>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800bd5e:	7b5a      	ldrb	r2, [r3, #13]
 800bd60:	f042 0220 	orr.w	r2, r2, #32
 800bd64:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800bd66:	4b09      	ldr	r3, [pc, #36]	; (800bd8c <tcp_input+0x788>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f7fe fa0d 	bl	800a18c <tcp_input_delayed_close>
 800bd72:	2800      	cmp	r0, #0
 800bd74:	f47f add9 	bne.w	800b92a <tcp_input+0x326>
        tcp_output(pcb);
 800bd78:	4620      	mov	r0, r4
 800bd7a:	f000 fde7 	bl	800c94c <tcp_output>
 800bd7e:	e5d4      	b.n	800b92a <tcp_input+0x326>
 800bd80:	20004bac 	.word	0x20004bac
 800bd84:	20008618 	.word	0x20008618
 800bd88:	20001770 	.word	0x20001770
 800bd8c:	20008624 	.word	0x20008624
 800bd90:	20001764 	.word	0x20001764
 800bd94:	20008610 	.word	0x20008610
 800bd98:	2000175c 	.word	0x2000175c
 800bd9c:	20001760 	.word	0x20001760
 800bda0:	080175a0 	.word	0x080175a0
 800bda4:	08017514 	.word	0x08017514
 800bda8:	08015d2c 	.word	0x08015d2c
            pbuf_free(recv_data);
 800bdac:	4b22      	ldr	r3, [pc, #136]	; (800be38 <tcp_input+0x834>)
 800bdae:	6818      	ldr	r0, [r3, #0]
 800bdb0:	f7fc fcd0 	bl	8008754 <pbuf_free>
            tcp_abort(pcb);
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	f7fd fb99 	bl	80094ec <tcp_abort>
            goto aborted;
 800bdba:	e5b6      	b.n	800b92a <tcp_input+0x326>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	4a1e      	ldr	r2, [pc, #120]	; (800be38 <tcp_input+0x834>)
 800bdc0:	6812      	ldr	r2, [r2, #0]
 800bdc2:	4621      	mov	r1, r4
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7fd fe33 	bl	8009a30 <tcp_recv_null>
 800bdca:	e7b6      	b.n	800bd3a <tcp_input+0x736>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bdcc:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800bdd0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bdd4:	d002      	beq.n	800bddc <tcp_input+0x7d8>
              pcb->rcv_wnd++;
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
            TCP_EVENT_CLOSED(pcb, err);
 800bddc:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 800bde0:	2d00      	cmp	r5, #0
 800bde2:	d0c0      	beq.n	800bd66 <tcp_input+0x762>
 800bde4:	2300      	movs	r3, #0
 800bde6:	461a      	mov	r2, r3
 800bde8:	4621      	mov	r1, r4
 800bdea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800bdec:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 800bdee:	f110 0f0d 	cmn.w	r0, #13
 800bdf2:	d1b8      	bne.n	800bd66 <tcp_input+0x762>
aborted:
 800bdf4:	e599      	b.n	800b92a <tcp_input+0x326>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800bdf6:	4b11      	ldr	r3, [pc, #68]	; (800be3c <tcp_input+0x838>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	8998      	ldrh	r0, [r3, #12]
 800bdfc:	f7fb f9e8 	bl	80071d0 <lwip_htons>
 800be00:	f010 0f04 	tst.w	r0, #4
 800be04:	d003      	beq.n	800be0e <tcp_input+0x80a>
    pbuf_free(p);
 800be06:	4628      	mov	r0, r5
 800be08:	f7fc fca4 	bl	8008754 <pbuf_free>
 800be0c:	e46d      	b.n	800b6ea <tcp_input+0xe6>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be0e:	4b0b      	ldr	r3, [pc, #44]	; (800be3c <tcp_input+0x838>)
 800be10:	6818      	ldr	r0, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800be12:	4b0b      	ldr	r3, [pc, #44]	; (800be40 <tcp_input+0x83c>)
 800be14:	4a0b      	ldr	r2, [pc, #44]	; (800be44 <tcp_input+0x840>)
 800be16:	8814      	ldrh	r4, [r2, #0]
 800be18:	4a0b      	ldr	r2, [pc, #44]	; (800be48 <tcp_input+0x844>)
 800be1a:	6812      	ldr	r2, [r2, #0]
 800be1c:	490b      	ldr	r1, [pc, #44]	; (800be4c <tcp_input+0x848>)
 800be1e:	6809      	ldr	r1, [r1, #0]
 800be20:	8806      	ldrh	r6, [r0, #0]
 800be22:	9602      	str	r6, [sp, #8]
 800be24:	8840      	ldrh	r0, [r0, #2]
 800be26:	9001      	str	r0, [sp, #4]
 800be28:	f1a3 0018 	sub.w	r0, r3, #24
 800be2c:	9000      	str	r0, [sp, #0]
 800be2e:	4422      	add	r2, r4
 800be30:	2000      	movs	r0, #0
 800be32:	f000 fcff 	bl	800c834 <tcp_rst>
 800be36:	e7e6      	b.n	800be06 <tcp_input+0x802>
 800be38:	20001760 	.word	0x20001760
 800be3c:	20001770 	.word	0x20001770
 800be40:	20004bd8 	.word	0x20004bd8
 800be44:	2000177e 	.word	0x2000177e
 800be48:	20001768 	.word	0x20001768
 800be4c:	20001744 	.word	0x20001744

0800be50 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800be50:	4a02      	ldr	r2, [pc, #8]	; (800be5c <tcp_trigger_input_pcb_close+0xc>)
 800be52:	7813      	ldrb	r3, [r2, #0]
 800be54:	f043 0310 	orr.w	r3, r3, #16
 800be58:	7013      	strb	r3, [r2, #0]
}
 800be5a:	4770      	bx	lr
 800be5c:	20001764 	.word	0x20001764

0800be60 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800be60:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800be62:	4604      	mov	r4, r0
 800be64:	b128      	cbz	r0, 800be72 <tcp_output_segment_busy+0x12>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800be66:	6863      	ldr	r3, [r4, #4]
 800be68:	7b9b      	ldrb	r3, [r3, #14]
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d009      	beq.n	800be82 <tcp_output_segment_busy+0x22>
    /* other reference found */
    return 1;
 800be6e:	2001      	movs	r0, #1
  }
  /* no other references found */
  return 0;
}
 800be70:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800be72:	4b05      	ldr	r3, [pc, #20]	; (800be88 <tcp_output_segment_busy+0x28>)
 800be74:	f240 529a 	movw	r2, #1434	; 0x59a
 800be78:	4904      	ldr	r1, [pc, #16]	; (800be8c <tcp_output_segment_busy+0x2c>)
 800be7a:	4805      	ldr	r0, [pc, #20]	; (800be90 <tcp_output_segment_busy+0x30>)
 800be7c:	f008 ffe2 	bl	8014e44 <iprintf>
 800be80:	e7f1      	b.n	800be66 <tcp_output_segment_busy+0x6>
  return 0;
 800be82:	2000      	movs	r0, #0
 800be84:	e7f4      	b.n	800be70 <tcp_output_segment_busy+0x10>
 800be86:	bf00      	nop
 800be88:	08017c80 	.word	0x08017c80
 800be8c:	08017ae0 	.word	0x08017ae0
 800be90:	08015d2c 	.word	0x08015d2c

0800be94 <tcp_output_fill_options>:
}

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800be94:	b538      	push	{r3, r4, r5, lr}
 800be96:	4614      	mov	r4, r2
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800be98:	460d      	mov	r5, r1
 800be9a:	b189      	cbz	r1, 800bec0 <tcp_output_fill_options+0x2c>

  tcphdr = (struct tcp_hdr *)p->payload;
 800be9c:	686b      	ldr	r3, [r5, #4]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800be9e:	f103 0214 	add.w	r2, r3, #20
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800bea2:	00a4      	lsls	r4, r4, #2
 800bea4:	f004 0404 	and.w	r4, r4, #4
 800bea8:	3414      	adds	r4, #20
 800beaa:	441c      	add	r4, r3
 800beac:	4294      	cmp	r4, r2
 800beae:	d006      	beq.n	800bebe <tcp_output_fill_options+0x2a>
 800beb0:	4b07      	ldr	r3, [pc, #28]	; (800bed0 <tcp_output_fill_options+0x3c>)
 800beb2:	f240 7275 	movw	r2, #1909	; 0x775
 800beb6:	4907      	ldr	r1, [pc, #28]	; (800bed4 <tcp_output_fill_options+0x40>)
 800beb8:	4807      	ldr	r0, [pc, #28]	; (800bed8 <tcp_output_fill_options+0x44>)
 800beba:	f008 ffc3 	bl	8014e44 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800bebe:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800bec0:	4b03      	ldr	r3, [pc, #12]	; (800bed0 <tcp_output_fill_options+0x3c>)
 800bec2:	f240 7256 	movw	r2, #1878	; 0x756
 800bec6:	4905      	ldr	r1, [pc, #20]	; (800bedc <tcp_output_fill_options+0x48>)
 800bec8:	4803      	ldr	r0, [pc, #12]	; (800bed8 <tcp_output_fill_options+0x44>)
 800beca:	f008 ffbb 	bl	8014e44 <iprintf>
 800bece:	e7e5      	b.n	800be9c <tcp_output_fill_options+0x8>
 800bed0:	08017c80 	.word	0x08017c80
 800bed4:	08017a68 	.word	0x08017a68
 800bed8:	08015d2c 	.word	0x08015d2c
 800bedc:	08017a40 	.word	0x08017a40

0800bee0 <tcp_create_segment>:
{
 800bee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bee4:	460e      	mov	r6, r1
 800bee6:	4617      	mov	r7, r2
 800bee8:	4699      	mov	r9, r3
 800beea:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800beee:	4680      	mov	r8, r0
 800bef0:	2800      	cmp	r0, #0
 800bef2:	d041      	beq.n	800bf78 <tcp_create_segment+0x98>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800bef4:	2e00      	cmp	r6, #0
 800bef6:	d046      	beq.n	800bf86 <tcp_create_segment+0xa6>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bef8:	ea4f 058a 	mov.w	r5, sl, lsl #2
 800befc:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800bf00:	2003      	movs	r0, #3
 800bf02:	f7fb ff7f 	bl	8007e04 <memp_malloc>
 800bf06:	4604      	mov	r4, r0
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	d043      	beq.n	800bf94 <tcp_create_segment+0xb4>
  seg->flags = optflags;
 800bf0c:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800bf10:	2300      	movs	r3, #0
 800bf12:	6003      	str	r3, [r0, #0]
  seg->p = p;
 800bf14:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800bf16:	8933      	ldrh	r3, [r6, #8]
 800bf18:	fa1f fa85 	uxth.w	sl, r5
 800bf1c:	4553      	cmp	r3, sl
 800bf1e:	d33d      	bcc.n	800bf9c <tcp_create_segment+0xbc>
  seg->len = p->tot_len - optlen;
 800bf20:	8933      	ldrh	r3, [r6, #8]
 800bf22:	eba3 030a 	sub.w	r3, r3, sl
 800bf26:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800bf28:	2114      	movs	r1, #20
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	f7fc fbc1 	bl	80086b2 <pbuf_add_header>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	d13a      	bne.n	800bfaa <tcp_create_segment+0xca>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bf34:	6863      	ldr	r3, [r4, #4]
 800bf36:	685e      	ldr	r6, [r3, #4]
 800bf38:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bf3a:	f8b8 003e 	ldrh.w	r0, [r8, #62]	; 0x3e
 800bf3e:	f7fb f947 	bl	80071d0 <lwip_htons>
 800bf42:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bf44:	68e6      	ldr	r6, [r4, #12]
 800bf46:	f8b8 0040 	ldrh.w	r0, [r8, #64]	; 0x40
 800bf4a:	f7fb f941 	bl	80071d0 <lwip_htons>
 800bf4e:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bf50:	68e6      	ldr	r6, [r4, #12]
 800bf52:	4648      	mov	r0, r9
 800bf54:	f7fb f941 	bl	80071da <lwip_htonl>
 800bf58:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bf5a:	08a8      	lsrs	r0, r5, #2
 800bf5c:	3005      	adds	r0, #5
 800bf5e:	68e5      	ldr	r5, [r4, #12]
 800bf60:	ea47 3000 	orr.w	r0, r7, r0, lsl #12
 800bf64:	f7fb f934 	bl	80071d0 <lwip_htons>
 800bf68:	81a8      	strh	r0, [r5, #12]
  seg->tcphdr->urgp = 0;
 800bf6a:	68e3      	ldr	r3, [r4, #12]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	749a      	strb	r2, [r3, #18]
 800bf70:	74da      	strb	r2, [r3, #19]
}
 800bf72:	4620      	mov	r0, r4
 800bf74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800bf78:	4b0e      	ldr	r3, [pc, #56]	; (800bfb4 <tcp_create_segment+0xd4>)
 800bf7a:	22a3      	movs	r2, #163	; 0xa3
 800bf7c:	490e      	ldr	r1, [pc, #56]	; (800bfb8 <tcp_create_segment+0xd8>)
 800bf7e:	480f      	ldr	r0, [pc, #60]	; (800bfbc <tcp_create_segment+0xdc>)
 800bf80:	f008 ff60 	bl	8014e44 <iprintf>
 800bf84:	e7b6      	b.n	800bef4 <tcp_create_segment+0x14>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800bf86:	4b0b      	ldr	r3, [pc, #44]	; (800bfb4 <tcp_create_segment+0xd4>)
 800bf88:	22a4      	movs	r2, #164	; 0xa4
 800bf8a:	490d      	ldr	r1, [pc, #52]	; (800bfc0 <tcp_create_segment+0xe0>)
 800bf8c:	480b      	ldr	r0, [pc, #44]	; (800bfbc <tcp_create_segment+0xdc>)
 800bf8e:	f008 ff59 	bl	8014e44 <iprintf>
 800bf92:	e7b1      	b.n	800bef8 <tcp_create_segment+0x18>
    pbuf_free(p);
 800bf94:	4630      	mov	r0, r6
 800bf96:	f7fc fbdd 	bl	8008754 <pbuf_free>
    return NULL;
 800bf9a:	e7ea      	b.n	800bf72 <tcp_create_segment+0x92>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800bf9c:	4b05      	ldr	r3, [pc, #20]	; (800bfb4 <tcp_create_segment+0xd4>)
 800bf9e:	22b0      	movs	r2, #176	; 0xb0
 800bfa0:	4908      	ldr	r1, [pc, #32]	; (800bfc4 <tcp_create_segment+0xe4>)
 800bfa2:	4806      	ldr	r0, [pc, #24]	; (800bfbc <tcp_create_segment+0xdc>)
 800bfa4:	f008 ff4e 	bl	8014e44 <iprintf>
 800bfa8:	e7ba      	b.n	800bf20 <tcp_create_segment+0x40>
    tcp_seg_free(seg);
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f7fd f8cc 	bl	8009148 <tcp_seg_free>
    return NULL;
 800bfb0:	2400      	movs	r4, #0
 800bfb2:	e7de      	b.n	800bf72 <tcp_create_segment+0x92>
 800bfb4:	08017c80 	.word	0x08017c80
 800bfb8:	080177cc 	.word	0x080177cc
 800bfbc:	08015d2c 	.word	0x08015d2c
 800bfc0:	080177ec 	.word	0x080177ec
 800bfc4:	08017810 	.word	0x08017810

0800bfc8 <tcp_output_alloc_header_common>:
{
 800bfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfcc:	4607      	mov	r7, r0
 800bfce:	460c      	mov	r4, r1
 800bfd0:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bfd2:	4411      	add	r1, r2
 800bfd4:	b289      	uxth	r1, r1
 800bfd6:	3114      	adds	r1, #20
 800bfd8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bfdc:	b289      	uxth	r1, r1
 800bfde:	2036      	movs	r0, #54	; 0x36
 800bfe0:	f7fc fc1a 	bl	8008818 <pbuf_alloc>
  if (p != NULL) {
 800bfe4:	4606      	mov	r6, r0
 800bfe6:	b348      	cbz	r0, 800c03c <tcp_output_alloc_header_common+0x74>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800bfe8:	8942      	ldrh	r2, [r0, #10]
 800bfea:	f104 0314 	add.w	r3, r4, #20
 800bfee:	429a      	cmp	r2, r3
 800bff0:	db27      	blt.n	800c042 <tcp_output_alloc_header_common+0x7a>
    tcphdr = (struct tcp_hdr *)p->payload;
 800bff2:	6875      	ldr	r5, [r6, #4]
    tcphdr->src = lwip_htons(src_port);
 800bff4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800bff8:	f7fb f8ea 	bl	80071d0 <lwip_htons>
 800bffc:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800bffe:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800c002:	f7fb f8e5 	bl	80071d0 <lwip_htons>
 800c006:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 800c008:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c00c:	4638      	mov	r0, r7
 800c00e:	f7fb f8e4 	bl	80071da <lwip_htonl>
 800c012:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c014:	08a4      	lsrs	r4, r4, #2
 800c016:	3405      	adds	r4, #5
 800c018:	0324      	lsls	r4, r4, #12
 800c01a:	b2a4      	uxth	r4, r4
 800c01c:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800c020:	4320      	orrs	r0, r4
 800c022:	f7fb f8d5 	bl	80071d0 <lwip_htons>
 800c026:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c028:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 800c02c:	f7fb f8d0 	bl	80071d0 <lwip_htons>
 800c030:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 800c032:	2300      	movs	r3, #0
 800c034:	742b      	strb	r3, [r5, #16]
 800c036:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 800c038:	74ab      	strb	r3, [r5, #18]
 800c03a:	74eb      	strb	r3, [r5, #19]
}
 800c03c:	4630      	mov	r0, r6
 800c03e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c042:	4b04      	ldr	r3, [pc, #16]	; (800c054 <tcp_output_alloc_header_common+0x8c>)
 800c044:	f240 7224 	movw	r2, #1828	; 0x724
 800c048:	4903      	ldr	r1, [pc, #12]	; (800c058 <tcp_output_alloc_header_common+0x90>)
 800c04a:	4804      	ldr	r0, [pc, #16]	; (800c05c <tcp_output_alloc_header_common+0x94>)
 800c04c:	f008 fefa 	bl	8014e44 <iprintf>
 800c050:	e7cf      	b.n	800bff2 <tcp_output_alloc_header_common+0x2a>
 800c052:	bf00      	nop
 800c054:	08017c80 	.word	0x08017c80
 800c058:	080179e4 	.word	0x080179e4
 800c05c:	08015d2c 	.word	0x08015d2c

0800c060 <tcp_output_alloc_header>:
{
 800c060:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c062:	b085      	sub	sp, #20
 800c064:	460d      	mov	r5, r1
 800c066:	4616      	mov	r6, r2
 800c068:	461f      	mov	r7, r3
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c06a:	4604      	mov	r4, r0
 800c06c:	b1c8      	cbz	r0, 800c0a2 <tcp_output_alloc_header+0x42>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c06e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800c070:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c072:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 800c076:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
 800c07a:	9103      	str	r1, [sp, #12]
 800c07c:	2110      	movs	r1, #16
 800c07e:	9102      	str	r1, [sp, #8]
 800c080:	9201      	str	r2, [sp, #4]
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	463b      	mov	r3, r7
 800c086:	4632      	mov	r2, r6
 800c088:	4629      	mov	r1, r5
 800c08a:	f7ff ff9d 	bl	800bfc8 <tcp_output_alloc_header_common>
  if (p != NULL) {
 800c08e:	4602      	mov	r2, r0
 800c090:	b120      	cbz	r0, 800c09c <tcp_output_alloc_header+0x3c>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c092:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c094:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
 800c098:	440b      	add	r3, r1
 800c09a:	6563      	str	r3, [r4, #84]	; 0x54
}
 800c09c:	4610      	mov	r0, r2
 800c09e:	b005      	add	sp, #20
 800c0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c0a2:	4b04      	ldr	r3, [pc, #16]	; (800c0b4 <tcp_output_alloc_header+0x54>)
 800c0a4:	f240 7242 	movw	r2, #1858	; 0x742
 800c0a8:	4903      	ldr	r1, [pc, #12]	; (800c0b8 <tcp_output_alloc_header+0x58>)
 800c0aa:	4804      	ldr	r0, [pc, #16]	; (800c0bc <tcp_output_alloc_header+0x5c>)
 800c0ac:	f008 feca 	bl	8014e44 <iprintf>
 800c0b0:	e7dd      	b.n	800c06e <tcp_output_alloc_header+0xe>
 800c0b2:	bf00      	nop
 800c0b4:	08017c80 	.word	0x08017c80
 800c0b8:	080179bc 	.word	0x080179bc
 800c0bc:	08015d2c 	.word	0x08015d2c

0800c0c0 <tcp_route>:
{
 800c0c0:	b510      	push	{r4, lr}
 800c0c2:	460c      	mov	r4, r1
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c0c4:	b110      	cbz	r0, 800c0cc <tcp_route+0xc>
 800c0c6:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 800c0ca:	b938      	cbnz	r0, 800c0dc <tcp_route+0x1c>
    return ip_route(src, dst);
 800c0cc:	b112      	cbz	r2, 800c0d4 <tcp_route+0x14>
 800c0ce:	7d13      	ldrb	r3, [r2, #20]
 800c0d0:	2b06      	cmp	r3, #6
 800c0d2:	d006      	beq.n	800c0e2 <tcp_route+0x22>
 800c0d4:	4610      	mov	r0, r2
 800c0d6:	f003 ffa9 	bl	801002c <ip4_route>
}
 800c0da:	bd10      	pop	{r4, pc}
    return netif_get_by_index(pcb->netif_idx);
 800c0dc:	f7fc fa1c 	bl	8008518 <netif_get_by_index>
 800c0e0:	e7fb      	b.n	800c0da <tcp_route+0x1a>
    return ip_route(src, dst);
 800c0e2:	4611      	mov	r1, r2
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	f004 ff89 	bl	8010ffc <ip6_route>
 800c0ea:	e7f6      	b.n	800c0da <tcp_route+0x1a>

0800c0ec <tcp_output_segment>:
{
 800c0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f0:	b084      	sub	sp, #16
 800c0f2:	460c      	mov	r4, r1
 800c0f4:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c0f6:	4605      	mov	r5, r0
 800c0f8:	b148      	cbz	r0, 800c10e <tcp_output_segment+0x22>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c0fa:	b184      	cbz	r4, 800c11e <tcp_output_segment+0x32>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c0fc:	b1be      	cbz	r6, 800c12e <tcp_output_segment+0x42>
  if (tcp_output_segment_busy(seg)) {
 800c0fe:	4628      	mov	r0, r5
 800c100:	f7ff feae 	bl	800be60 <tcp_output_segment_busy>
 800c104:	b1d8      	cbz	r0, 800c13e <tcp_output_segment+0x52>
    return ERR_OK;
 800c106:	2000      	movs	r0, #0
}
 800c108:	b004      	add	sp, #16
 800c10a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c10e:	4b4e      	ldr	r3, [pc, #312]	; (800c248 <tcp_output_segment+0x15c>)
 800c110:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800c114:	494d      	ldr	r1, [pc, #308]	; (800c24c <tcp_output_segment+0x160>)
 800c116:	484e      	ldr	r0, [pc, #312]	; (800c250 <tcp_output_segment+0x164>)
 800c118:	f008 fe94 	bl	8014e44 <iprintf>
 800c11c:	e7ed      	b.n	800c0fa <tcp_output_segment+0xe>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c11e:	4b4a      	ldr	r3, [pc, #296]	; (800c248 <tcp_output_segment+0x15c>)
 800c120:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c124:	494b      	ldr	r1, [pc, #300]	; (800c254 <tcp_output_segment+0x168>)
 800c126:	484a      	ldr	r0, [pc, #296]	; (800c250 <tcp_output_segment+0x164>)
 800c128:	f008 fe8c 	bl	8014e44 <iprintf>
 800c12c:	e7e6      	b.n	800c0fc <tcp_output_segment+0x10>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c12e:	4b46      	ldr	r3, [pc, #280]	; (800c248 <tcp_output_segment+0x15c>)
 800c130:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800c134:	4948      	ldr	r1, [pc, #288]	; (800c258 <tcp_output_segment+0x16c>)
 800c136:	4846      	ldr	r0, [pc, #280]	; (800c250 <tcp_output_segment+0x164>)
 800c138:	f008 fe84 	bl	8014e44 <iprintf>
 800c13c:	e7df      	b.n	800c0fe <tcp_output_segment+0x12>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c13e:	68ef      	ldr	r7, [r5, #12]
 800c140:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800c142:	f7fb f84a 	bl	80071da <lwip_htonl>
 800c146:	60b8      	str	r0, [r7, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c148:	68ef      	ldr	r7, [r5, #12]
 800c14a:	f8b4 0052 	ldrh.w	r0, [r4, #82]	; 0x52
 800c14e:	f7fb f83f 	bl	80071d0 <lwip_htons>
 800c152:	81f8      	strh	r0, [r7, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c154:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c156:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800c15a:	4413      	add	r3, r2
 800c15c:	6563      	str	r3, [r4, #84]	; 0x54
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c15e:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800c162:	f108 0714 	add.w	r7, r8, #20
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c166:	7aab      	ldrb	r3, [r5, #10]
 800c168:	f013 0f01 	tst.w	r3, #1
 800c16c:	d13f      	bne.n	800c1ee <tcp_output_segment+0x102>
  if (pcb->rtime < 0) {
 800c16e:	f9b4 3058 	ldrsh.w	r3, [r4, #88]	; 0x58
 800c172:	2b00      	cmp	r3, #0
 800c174:	db4b      	blt.n	800c20e <tcp_output_segment+0x122>
  if (pcb->rttest == 0) {
 800c176:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d04c      	beq.n	800c216 <tcp_output_segment+0x12a>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c17c:	68eb      	ldr	r3, [r5, #12]
 800c17e:	686a      	ldr	r2, [r5, #4]
 800c180:	6851      	ldr	r1, [r2, #4]
 800c182:	1a5b      	subs	r3, r3, r1
 800c184:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800c186:	8951      	ldrh	r1, [r2, #10]
 800c188:	1ac9      	subs	r1, r1, r3
 800c18a:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 800c18c:	6869      	ldr	r1, [r5, #4]
 800c18e:	890a      	ldrh	r2, [r1, #8]
 800c190:	1ad3      	subs	r3, r2, r3
 800c192:	810b      	strh	r3, [r1, #8]
  seg->p->payload = seg->tcphdr;
 800c194:	686b      	ldr	r3, [r5, #4]
 800c196:	68ea      	ldr	r2, [r5, #12]
 800c198:	605a      	str	r2, [r3, #4]
  seg->tcphdr->chksum = 0;
 800c19a:	68eb      	ldr	r3, [r5, #12]
 800c19c:	2200      	movs	r2, #0
 800c19e:	741a      	strb	r2, [r3, #16]
 800c1a0:	745a      	strb	r2, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c1a2:	68ea      	ldr	r2, [r5, #12]
 800c1a4:	7aab      	ldrb	r3, [r5, #10]
 800c1a6:	009b      	lsls	r3, r3, #2
 800c1a8:	f003 0304 	and.w	r3, r3, #4
 800c1ac:	3314      	adds	r3, #20
 800c1ae:	4413      	add	r3, r2
 800c1b0:	42bb      	cmp	r3, r7
 800c1b2:	d006      	beq.n	800c1c2 <tcp_output_segment+0xd6>
 800c1b4:	4b24      	ldr	r3, [pc, #144]	; (800c248 <tcp_output_segment+0x15c>)
 800c1b6:	f240 621c 	movw	r2, #1564	; 0x61c
 800c1ba:	4928      	ldr	r1, [pc, #160]	; (800c25c <tcp_output_segment+0x170>)
 800c1bc:	4824      	ldr	r0, [pc, #144]	; (800c250 <tcp_output_segment+0x164>)
 800c1be:	f008 fe41 	bl	8014e44 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c1c2:	f114 0f18 	cmn.w	r4, #24
 800c1c6:	d003      	beq.n	800c1d0 <tcp_output_segment+0xe4>
 800c1c8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800c1cc:	2b06      	cmp	r3, #6
 800c1ce:	d02b      	beq.n	800c228 <tcp_output_segment+0x13c>
 800c1d0:	6868      	ldr	r0, [r5, #4]
 800c1d2:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800c1d6:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 800c1da:	9602      	str	r6, [sp, #8]
 800c1dc:	2106      	movs	r1, #6
 800c1de:	9101      	str	r1, [sp, #4]
 800c1e0:	9200      	str	r2, [sp, #0]
 800c1e2:	f104 0218 	add.w	r2, r4, #24
 800c1e6:	4621      	mov	r1, r4
 800c1e8:	f004 f8d6 	bl	8010398 <ip4_output_if>
 800c1ec:	e78c      	b.n	800c108 <tcp_output_segment+0x1c>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c1ee:	f104 0218 	add.w	r2, r4, #24
 800c1f2:	4631      	mov	r1, r6
 800c1f4:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c1f8:	f7fc fffe 	bl	80091f8 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c1fc:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800c200:	f7fa ffeb 	bl	80071da <lwip_htonl>
 800c204:	f8c8 0014 	str.w	r0, [r8, #20]
    opts += 1;
 800c208:	f108 0718 	add.w	r7, r8, #24
 800c20c:	e7af      	b.n	800c16e <tcp_output_segment+0x82>
    pcb->rtime = 0;
 800c20e:	2300      	movs	r3, #0
 800c210:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 800c214:	e7af      	b.n	800c176 <tcp_output_segment+0x8a>
    pcb->rttest = tcp_ticks;
 800c216:	4b12      	ldr	r3, [pc, #72]	; (800c260 <tcp_output_segment+0x174>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	65e3      	str	r3, [r4, #92]	; 0x5c
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c21c:	68eb      	ldr	r3, [r5, #12]
 800c21e:	6858      	ldr	r0, [r3, #4]
 800c220:	f7fa ffdb 	bl	80071da <lwip_htonl>
 800c224:	6620      	str	r0, [r4, #96]	; 0x60
 800c226:	e7a9      	b.n	800c17c <tcp_output_segment+0x90>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c228:	6868      	ldr	r0, [r5, #4]
 800c22a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800c22e:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 800c232:	9602      	str	r6, [sp, #8]
 800c234:	2106      	movs	r1, #6
 800c236:	9101      	str	r1, [sp, #4]
 800c238:	9200      	str	r2, [sp, #0]
 800c23a:	f104 0218 	add.w	r2, r4, #24
 800c23e:	4621      	mov	r1, r4
 800c240:	f005 fc68 	bl	8011b14 <ip6_output_if>
 800c244:	e760      	b.n	800c108 <tcp_output_segment+0x1c>
 800c246:	bf00      	nop
 800c248:	08017c80 	.word	0x08017c80
 800c24c:	08017a7c 	.word	0x08017a7c
 800c250:	08015d2c 	.word	0x08015d2c
 800c254:	08017a9c 	.word	0x08017a9c
 800c258:	08017abc 	.word	0x08017abc
 800c25c:	08017a68 	.word	0x08017a68
 800c260:	20008614 	.word	0x20008614

0800c264 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c264:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c266:	b085      	sub	sp, #20
 800c268:	4605      	mov	r5, r0
 800c26a:	4617      	mov	r7, r2
 800c26c:	461c      	mov	r4, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c26e:	460e      	mov	r6, r1
 800c270:	b1f9      	cbz	r1, 800c2b2 <tcp_output_control_segment+0x4e>

  netif = tcp_route(pcb, src, dst);
 800c272:	4622      	mov	r2, r4
 800c274:	4639      	mov	r1, r7
 800c276:	4628      	mov	r0, r5
 800c278:	f7ff ff22 	bl	800c0c0 <tcp_route>
  if (netif == NULL) {
 800c27c:	4602      	mov	r2, r0
 800c27e:	b370      	cbz	r0, 800c2de <tcp_output_control_segment+0x7a>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c280:	b1fd      	cbz	r5, 800c2c2 <tcp_output_control_segment+0x5e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c282:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
      tos = pcb->tos;
 800c286:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c28a:	b114      	cbz	r4, 800c292 <tcp_output_control_segment+0x2e>
 800c28c:	7d20      	ldrb	r0, [r4, #20]
 800c28e:	2806      	cmp	r0, #6
 800c290:	d01a      	beq.n	800c2c8 <tcp_output_control_segment+0x64>
 800c292:	9202      	str	r2, [sp, #8]
 800c294:	2206      	movs	r2, #6
 800c296:	9201      	str	r2, [sp, #4]
 800c298:	9100      	str	r1, [sp, #0]
 800c29a:	4622      	mov	r2, r4
 800c29c:	4639      	mov	r1, r7
 800c29e:	4630      	mov	r0, r6
 800c2a0:	f004 f87a 	bl	8010398 <ip4_output_if>
 800c2a4:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	f7fc fa54 	bl	8008754 <pbuf_free>
  return err;
}
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	b005      	add	sp, #20
 800c2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c2b2:	4b0c      	ldr	r3, [pc, #48]	; (800c2e4 <tcp_output_control_segment+0x80>)
 800c2b4:	f240 7287 	movw	r2, #1927	; 0x787
 800c2b8:	490b      	ldr	r1, [pc, #44]	; (800c2e8 <tcp_output_control_segment+0x84>)
 800c2ba:	480c      	ldr	r0, [pc, #48]	; (800c2ec <tcp_output_control_segment+0x88>)
 800c2bc:	f008 fdc2 	bl	8014e44 <iprintf>
 800c2c0:	e7d7      	b.n	800c272 <tcp_output_control_segment+0xe>
      tos = 0;
 800c2c2:	2100      	movs	r1, #0
      ttl = TCP_TTL;
 800c2c4:	23ff      	movs	r3, #255	; 0xff
 800c2c6:	e7e0      	b.n	800c28a <tcp_output_control_segment+0x26>
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c2c8:	9202      	str	r2, [sp, #8]
 800c2ca:	2206      	movs	r2, #6
 800c2cc:	9201      	str	r2, [sp, #4]
 800c2ce:	9100      	str	r1, [sp, #0]
 800c2d0:	4622      	mov	r2, r4
 800c2d2:	4639      	mov	r1, r7
 800c2d4:	4630      	mov	r0, r6
 800c2d6:	f005 fc1d 	bl	8011b14 <ip6_output_if>
 800c2da:	4604      	mov	r4, r0
 800c2dc:	e7e3      	b.n	800c2a6 <tcp_output_control_segment+0x42>
    err = ERR_RTE;
 800c2de:	f06f 0403 	mvn.w	r4, #3
 800c2e2:	e7e0      	b.n	800c2a6 <tcp_output_control_segment+0x42>
 800c2e4:	08017c80 	.word	0x08017c80
 800c2e8:	08017a14 	.word	0x08017a14
 800c2ec:	08015d2c 	.word	0x08015d2c

0800c2f0 <tcp_split_unsent_seg>:
{
 800c2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f4:	b083      	sub	sp, #12
 800c2f6:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c2f8:	4607      	mov	r7, r0
 800c2fa:	2800      	cmp	r0, #0
 800c2fc:	d03d      	beq.n	800c37a <tcp_split_unsent_seg+0x8a>
  useg = pcb->unsent;
 800c2fe:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
  if (useg == NULL) {
 800c302:	2c00      	cmp	r4, #0
 800c304:	f000 80b6 	beq.w	800c474 <tcp_split_unsent_seg+0x184>
  if (split == 0) {
 800c308:	2d00      	cmp	r5, #0
 800c30a:	d03e      	beq.n	800c38a <tcp_split_unsent_seg+0x9a>
  if (useg->len <= split) {
 800c30c:	8923      	ldrh	r3, [r4, #8]
 800c30e:	42ab      	cmp	r3, r5
 800c310:	f240 80b3 	bls.w	800c47a <tcp_split_unsent_seg+0x18a>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c314:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800c318:	42ab      	cmp	r3, r5
 800c31a:	d340      	bcc.n	800c39e <tcp_split_unsent_seg+0xae>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c31c:	8923      	ldrh	r3, [r4, #8]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d045      	beq.n	800c3ae <tcp_split_unsent_seg+0xbe>
  optflags = useg->flags;
 800c322:	f894 900a 	ldrb.w	r9, [r4, #10]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c326:	ea4f 0889 	mov.w	r8, r9, lsl #2
 800c32a:	f008 0804 	and.w	r8, r8, #4
  remainder = useg->len - split;
 800c32e:	8926      	ldrh	r6, [r4, #8]
 800c330:	1b76      	subs	r6, r6, r5
 800c332:	b2b6      	uxth	r6, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c334:	eb06 0108 	add.w	r1, r6, r8
 800c338:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c33c:	b289      	uxth	r1, r1
 800c33e:	204a      	movs	r0, #74	; 0x4a
 800c340:	f7fc fa6a 	bl	8008818 <pbuf_alloc>
  if (p == NULL) {
 800c344:	4682      	mov	sl, r0
 800c346:	b170      	cbz	r0, 800c366 <tcp_split_unsent_seg+0x76>
  offset = useg->p->tot_len - useg->len + split;
 800c348:	6860      	ldr	r0, [r4, #4]
 800c34a:	8903      	ldrh	r3, [r0, #8]
 800c34c:	8922      	ldrh	r2, [r4, #8]
 800c34e:	1a9b      	subs	r3, r3, r2
 800c350:	fa15 f383 	uxtah	r3, r5, r3
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c354:	f8da 1004 	ldr.w	r1, [sl, #4]
 800c358:	b29b      	uxth	r3, r3
 800c35a:	4632      	mov	r2, r6
 800c35c:	4441      	add	r1, r8
 800c35e:	f7fc fc51 	bl	8008c04 <pbuf_copy_partial>
 800c362:	42b0      	cmp	r0, r6
 800c364:	d02b      	beq.n	800c3be <tcp_split_unsent_seg+0xce>
  if (p != NULL) {
 800c366:	f1ba 0f00 	cmp.w	sl, #0
 800c36a:	f000 808a 	beq.w	800c482 <tcp_split_unsent_seg+0x192>
    pbuf_free(p);
 800c36e:	4650      	mov	r0, sl
 800c370:	f7fc f9f0 	bl	8008754 <pbuf_free>
  return ERR_MEM;
 800c374:	f04f 30ff 	mov.w	r0, #4294967295
 800c378:	e080      	b.n	800c47c <tcp_split_unsent_seg+0x18c>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c37a:	4b43      	ldr	r3, [pc, #268]	; (800c488 <tcp_split_unsent_seg+0x198>)
 800c37c:	f240 324b 	movw	r2, #843	; 0x34b
 800c380:	4942      	ldr	r1, [pc, #264]	; (800c48c <tcp_split_unsent_seg+0x19c>)
 800c382:	4843      	ldr	r0, [pc, #268]	; (800c490 <tcp_split_unsent_seg+0x1a0>)
 800c384:	f008 fd5e 	bl	8014e44 <iprintf>
 800c388:	e7b9      	b.n	800c2fe <tcp_split_unsent_seg+0xe>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c38a:	4b3f      	ldr	r3, [pc, #252]	; (800c488 <tcp_split_unsent_seg+0x198>)
 800c38c:	f240 3253 	movw	r2, #851	; 0x353
 800c390:	4940      	ldr	r1, [pc, #256]	; (800c494 <tcp_split_unsent_seg+0x1a4>)
 800c392:	483f      	ldr	r0, [pc, #252]	; (800c490 <tcp_split_unsent_seg+0x1a0>)
 800c394:	f008 fd56 	bl	8014e44 <iprintf>
    return ERR_VAL;
 800c398:	f06f 0005 	mvn.w	r0, #5
 800c39c:	e06e      	b.n	800c47c <tcp_split_unsent_seg+0x18c>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c39e:	4b3a      	ldr	r3, [pc, #232]	; (800c488 <tcp_split_unsent_seg+0x198>)
 800c3a0:	f240 325b 	movw	r2, #859	; 0x35b
 800c3a4:	493c      	ldr	r1, [pc, #240]	; (800c498 <tcp_split_unsent_seg+0x1a8>)
 800c3a6:	483a      	ldr	r0, [pc, #232]	; (800c490 <tcp_split_unsent_seg+0x1a0>)
 800c3a8:	f008 fd4c 	bl	8014e44 <iprintf>
 800c3ac:	e7b6      	b.n	800c31c <tcp_split_unsent_seg+0x2c>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c3ae:	4b36      	ldr	r3, [pc, #216]	; (800c488 <tcp_split_unsent_seg+0x198>)
 800c3b0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c3b4:	4939      	ldr	r1, [pc, #228]	; (800c49c <tcp_split_unsent_seg+0x1ac>)
 800c3b6:	4836      	ldr	r0, [pc, #216]	; (800c490 <tcp_split_unsent_seg+0x1a0>)
 800c3b8:	f008 fd44 	bl	8014e44 <iprintf>
 800c3bc:	e7b1      	b.n	800c322 <tcp_split_unsent_seg+0x32>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c3be:	68e3      	ldr	r3, [r4, #12]
 800c3c0:	8998      	ldrh	r0, [r3, #12]
 800c3c2:	f7fa ff05 	bl	80071d0 <lwip_htons>
 800c3c6:	b2c0      	uxtb	r0, r0
 800c3c8:	f000 083f 	and.w	r8, r0, #63	; 0x3f
  if (split_flags & TCP_PSH) {
 800c3cc:	f010 0f08 	tst.w	r0, #8
 800c3d0:	d049      	beq.n	800c466 <tcp_split_unsent_seg+0x176>
    split_flags &= ~TCP_PSH;
 800c3d2:	f000 0837 	and.w	r8, r0, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800c3d6:	f04f 0b08 	mov.w	fp, #8
  if (split_flags & TCP_FIN) {
 800c3da:	f018 0f01 	tst.w	r8, #1
 800c3de:	d003      	beq.n	800c3e8 <tcp_split_unsent_seg+0xf8>
    split_flags &= ~TCP_FIN;
 800c3e0:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 800c3e4:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c3e8:	68e3      	ldr	r3, [r4, #12]
 800c3ea:	6858      	ldr	r0, [r3, #4]
 800c3ec:	f7fa fef5 	bl	80071da <lwip_htonl>
 800c3f0:	f8cd 9000 	str.w	r9, [sp]
 800c3f4:	182b      	adds	r3, r5, r0
 800c3f6:	465a      	mov	r2, fp
 800c3f8:	4651      	mov	r1, sl
 800c3fa:	4638      	mov	r0, r7
 800c3fc:	f7ff fd70 	bl	800bee0 <tcp_create_segment>
  if (seg == NULL) {
 800c400:	4605      	mov	r5, r0
 800c402:	2800      	cmp	r0, #0
 800c404:	d0af      	beq.n	800c366 <tcp_split_unsent_seg+0x76>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c406:	6860      	ldr	r0, [r4, #4]
 800c408:	f7fc fb08 	bl	8008a1c <pbuf_clen>
 800c40c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c410:	1a18      	subs	r0, r3, r0
 800c412:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c416:	6860      	ldr	r0, [r4, #4]
 800c418:	8901      	ldrh	r1, [r0, #8]
 800c41a:	1b89      	subs	r1, r1, r6
 800c41c:	b289      	uxth	r1, r1
 800c41e:	f7fc faa9 	bl	8008974 <pbuf_realloc>
  useg->len -= remainder;
 800c422:	8923      	ldrh	r3, [r4, #8]
 800c424:	1b9e      	subs	r6, r3, r6
 800c426:	8126      	strh	r6, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c428:	68e3      	ldr	r3, [r4, #12]
 800c42a:	899e      	ldrh	r6, [r3, #12]
 800c42c:	4640      	mov	r0, r8
 800c42e:	f7fa fecf 	bl	80071d0 <lwip_htons>
 800c432:	68e3      	ldr	r3, [r4, #12]
 800c434:	4330      	orrs	r0, r6
 800c436:	8198      	strh	r0, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c438:	6860      	ldr	r0, [r4, #4]
 800c43a:	f7fc faef 	bl	8008a1c <pbuf_clen>
 800c43e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c442:	4418      	add	r0, r3
 800c444:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c448:	6868      	ldr	r0, [r5, #4]
 800c44a:	f7fc fae7 	bl	8008a1c <pbuf_clen>
 800c44e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c452:	4418      	add	r0, r3
 800c454:	f8a7 008e 	strh.w	r0, [r7, #142]	; 0x8e
  seg->next = useg->next;
 800c458:	6823      	ldr	r3, [r4, #0]
 800c45a:	602b      	str	r3, [r5, #0]
  useg->next = seg;
 800c45c:	6025      	str	r5, [r4, #0]
  if (seg->next == NULL) {
 800c45e:	682b      	ldr	r3, [r5, #0]
 800c460:	b123      	cbz	r3, 800c46c <tcp_split_unsent_seg+0x17c>
  return ERR_OK;
 800c462:	2000      	movs	r0, #0
 800c464:	e00a      	b.n	800c47c <tcp_split_unsent_seg+0x18c>
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c466:	f04f 0b00 	mov.w	fp, #0
 800c46a:	e7b6      	b.n	800c3da <tcp_split_unsent_seg+0xea>
    pcb->unsent_oversize = 0;
 800c46c:	2000      	movs	r0, #0
 800c46e:	f8a7 0090 	strh.w	r0, [r7, #144]	; 0x90
 800c472:	e003      	b.n	800c47c <tcp_split_unsent_seg+0x18c>
    return ERR_MEM;
 800c474:	f04f 30ff 	mov.w	r0, #4294967295
 800c478:	e000      	b.n	800c47c <tcp_split_unsent_seg+0x18c>
    return ERR_OK;
 800c47a:	2000      	movs	r0, #0
}
 800c47c:	b003      	add	sp, #12
 800c47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 800c482:	f04f 30ff 	mov.w	r0, #4294967295
 800c486:	e7f9      	b.n	800c47c <tcp_split_unsent_seg+0x18c>
 800c488:	08017c80 	.word	0x08017c80
 800c48c:	08017c18 	.word	0x08017c18
 800c490:	08015d2c 	.word	0x08015d2c
 800c494:	08017c3c 	.word	0x08017c3c
 800c498:	08017c60 	.word	0x08017c60
 800c49c:	08017c70 	.word	0x08017c70

0800c4a0 <tcp_enqueue_flags>:
{
 800c4a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4a4:	b083      	sub	sp, #12
 800c4a6:	4604      	mov	r4, r0
 800c4a8:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c4aa:	f011 0803 	ands.w	r8, r1, #3
 800c4ae:	d028      	beq.n	800c502 <tcp_enqueue_flags+0x62>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c4b0:	b37c      	cbz	r4, 800c512 <tcp_enqueue_flags+0x72>
  if (flags & TCP_SYN) {
 800c4b2:	f015 0f02 	tst.w	r5, #2
 800c4b6:	d134      	bne.n	800c522 <tcp_enqueue_flags+0x82>
  u8_t optflags = 0;
 800c4b8:	2600      	movs	r6, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c4ba:	00b7      	lsls	r7, r6, #2
 800c4bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c4c0:	4639      	mov	r1, r7
 800c4c2:	204a      	movs	r0, #74	; 0x4a
 800c4c4:	f7fc f9a8 	bl	8008818 <pbuf_alloc>
 800c4c8:	4681      	mov	r9, r0
 800c4ca:	b360      	cbz	r0, 800c526 <tcp_enqueue_flags+0x86>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c4cc:	8943      	ldrh	r3, [r0, #10]
 800c4ce:	429f      	cmp	r7, r3
 800c4d0:	d832      	bhi.n	800c538 <tcp_enqueue_flags+0x98>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c4d2:	9600      	str	r6, [sp, #0]
 800c4d4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c4d8:	462a      	mov	r2, r5
 800c4da:	4649      	mov	r1, r9
 800c4dc:	4620      	mov	r0, r4
 800c4de:	f7ff fcff 	bl	800bee0 <tcp_create_segment>
 800c4e2:	4606      	mov	r6, r0
 800c4e4:	b380      	cbz	r0, 800c548 <tcp_enqueue_flags+0xa8>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c4e6:	68c3      	ldr	r3, [r0, #12]
 800c4e8:	f013 0f03 	tst.w	r3, #3
 800c4ec:	d135      	bne.n	800c55a <tcp_enqueue_flags+0xba>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c4ee:	8933      	ldrh	r3, [r6, #8]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d13a      	bne.n	800c56a <tcp_enqueue_flags+0xca>
  if (pcb->unsent == NULL) {
 800c4f4:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800c4f8:	2a00      	cmp	r2, #0
 800c4fa:	d13f      	bne.n	800c57c <tcp_enqueue_flags+0xdc>
    pcb->unsent = seg;
 800c4fc:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
 800c500:	e040      	b.n	800c584 <tcp_enqueue_flags+0xe4>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c502:	4b3b      	ldr	r3, [pc, #236]	; (800c5f0 <tcp_enqueue_flags+0x150>)
 800c504:	f240 4212 	movw	r2, #1042	; 0x412
 800c508:	493a      	ldr	r1, [pc, #232]	; (800c5f4 <tcp_enqueue_flags+0x154>)
 800c50a:	483b      	ldr	r0, [pc, #236]	; (800c5f8 <tcp_enqueue_flags+0x158>)
 800c50c:	f008 fc9a 	bl	8014e44 <iprintf>
 800c510:	e7ce      	b.n	800c4b0 <tcp_enqueue_flags+0x10>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c512:	4b37      	ldr	r3, [pc, #220]	; (800c5f0 <tcp_enqueue_flags+0x150>)
 800c514:	f240 4213 	movw	r2, #1043	; 0x413
 800c518:	4938      	ldr	r1, [pc, #224]	; (800c5fc <tcp_enqueue_flags+0x15c>)
 800c51a:	4837      	ldr	r0, [pc, #220]	; (800c5f8 <tcp_enqueue_flags+0x158>)
 800c51c:	f008 fc92 	bl	8014e44 <iprintf>
 800c520:	e7c7      	b.n	800c4b2 <tcp_enqueue_flags+0x12>
    optflags = TF_SEG_OPTS_MSS;
 800c522:	2601      	movs	r6, #1
 800c524:	e7c9      	b.n	800c4ba <tcp_enqueue_flags+0x1a>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c526:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800c52a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c52e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    return ERR_MEM;
 800c532:	f04f 30ff 	mov.w	r0, #4294967295
 800c536:	e057      	b.n	800c5e8 <tcp_enqueue_flags+0x148>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c538:	4b2d      	ldr	r3, [pc, #180]	; (800c5f0 <tcp_enqueue_flags+0x150>)
 800c53a:	f240 423a 	movw	r2, #1082	; 0x43a
 800c53e:	4930      	ldr	r1, [pc, #192]	; (800c600 <tcp_enqueue_flags+0x160>)
 800c540:	482d      	ldr	r0, [pc, #180]	; (800c5f8 <tcp_enqueue_flags+0x158>)
 800c542:	f008 fc7f 	bl	8014e44 <iprintf>
 800c546:	e7c4      	b.n	800c4d2 <tcp_enqueue_flags+0x32>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c548:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800c54c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c550:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    return ERR_MEM;
 800c554:	f04f 30ff 	mov.w	r0, #4294967295
 800c558:	e046      	b.n	800c5e8 <tcp_enqueue_flags+0x148>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c55a:	4b25      	ldr	r3, [pc, #148]	; (800c5f0 <tcp_enqueue_flags+0x150>)
 800c55c:	f240 4242 	movw	r2, #1090	; 0x442
 800c560:	4928      	ldr	r1, [pc, #160]	; (800c604 <tcp_enqueue_flags+0x164>)
 800c562:	4825      	ldr	r0, [pc, #148]	; (800c5f8 <tcp_enqueue_flags+0x158>)
 800c564:	f008 fc6e 	bl	8014e44 <iprintf>
 800c568:	e7c1      	b.n	800c4ee <tcp_enqueue_flags+0x4e>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c56a:	4b21      	ldr	r3, [pc, #132]	; (800c5f0 <tcp_enqueue_flags+0x150>)
 800c56c:	f240 4243 	movw	r2, #1091	; 0x443
 800c570:	4925      	ldr	r1, [pc, #148]	; (800c608 <tcp_enqueue_flags+0x168>)
 800c572:	4821      	ldr	r0, [pc, #132]	; (800c5f8 <tcp_enqueue_flags+0x158>)
 800c574:	f008 fc66 	bl	8014e44 <iprintf>
 800c578:	e7bc      	b.n	800c4f4 <tcp_enqueue_flags+0x54>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c57a:	461a      	mov	r2, r3
 800c57c:	6813      	ldr	r3, [r2, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d1fb      	bne.n	800c57a <tcp_enqueue_flags+0xda>
    useg->next = seg;
 800c582:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800c584:	2300      	movs	r3, #0
 800c586:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c58a:	f1b8 0f00 	cmp.w	r8, #0
 800c58e:	d004      	beq.n	800c59a <tcp_enqueue_flags+0xfa>
    pcb->snd_lbb++;
 800c590:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c594:	3301      	adds	r3, #1
 800c596:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (flags & TCP_FIN) {
 800c59a:	f015 0f01 	tst.w	r5, #1
 800c59e:	d005      	beq.n	800c5ac <tcp_enqueue_flags+0x10c>
    tcp_set_flags(pcb, TF_FIN);
 800c5a0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800c5a4:	f043 0320 	orr.w	r3, r3, #32
 800c5a8:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c5ac:	6870      	ldr	r0, [r6, #4]
 800c5ae:	f7fc fa35 	bl	8008a1c <pbuf_clen>
 800c5b2:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 800c5b6:	4418      	add	r0, r3
 800c5b8:	b280      	uxth	r0, r0
 800c5ba:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
  if (pcb->snd_queuelen != 0) {
 800c5be:	b190      	cbz	r0, 800c5e6 <tcp_enqueue_flags+0x146>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c5c0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800c5c4:	b10b      	cbz	r3, 800c5ca <tcp_enqueue_flags+0x12a>
  return ERR_OK;
 800c5c6:	2000      	movs	r0, #0
 800c5c8:	e00e      	b.n	800c5e8 <tcp_enqueue_flags+0x148>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c5ca:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800c5ce:	b10b      	cbz	r3, 800c5d4 <tcp_enqueue_flags+0x134>
  return ERR_OK;
 800c5d0:	2000      	movs	r0, #0
 800c5d2:	e009      	b.n	800c5e8 <tcp_enqueue_flags+0x148>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c5d4:	4b06      	ldr	r3, [pc, #24]	; (800c5f0 <tcp_enqueue_flags+0x150>)
 800c5d6:	f240 4266 	movw	r2, #1126	; 0x466
 800c5da:	490c      	ldr	r1, [pc, #48]	; (800c60c <tcp_enqueue_flags+0x16c>)
 800c5dc:	4806      	ldr	r0, [pc, #24]	; (800c5f8 <tcp_enqueue_flags+0x158>)
 800c5de:	f008 fc31 	bl	8014e44 <iprintf>
  return ERR_OK;
 800c5e2:	2000      	movs	r0, #0
 800c5e4:	e000      	b.n	800c5e8 <tcp_enqueue_flags+0x148>
 800c5e6:	2000      	movs	r0, #0
}
 800c5e8:	b003      	add	sp, #12
 800c5ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5ee:	bf00      	nop
 800c5f0:	08017c80 	.word	0x08017c80
 800c5f4:	08017828 	.word	0x08017828
 800c5f8:	08015d2c 	.word	0x08015d2c
 800c5fc:	08017880 	.word	0x08017880
 800c600:	080178a0 	.word	0x080178a0
 800c604:	080178dc 	.word	0x080178dc
 800c608:	080178f4 	.word	0x080178f4
 800c60c:	08017920 	.word	0x08017920

0800c610 <tcp_send_fin>:
{
 800c610:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c612:	4605      	mov	r5, r0
 800c614:	b118      	cbz	r0, 800c61e <tcp_send_fin+0xe>
  if (pcb->unsent != NULL) {
 800c616:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
 800c61a:	b94c      	cbnz	r4, 800c630 <tcp_send_fin+0x20>
 800c61c:	e012      	b.n	800c644 <tcp_send_fin+0x34>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c61e:	4b14      	ldr	r3, [pc, #80]	; (800c670 <tcp_send_fin+0x60>)
 800c620:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c624:	4913      	ldr	r1, [pc, #76]	; (800c674 <tcp_send_fin+0x64>)
 800c626:	4814      	ldr	r0, [pc, #80]	; (800c678 <tcp_send_fin+0x68>)
 800c628:	f008 fc0c 	bl	8014e44 <iprintf>
 800c62c:	e7f3      	b.n	800c616 <tcp_send_fin+0x6>
         last_unsent = last_unsent->next);
 800c62e:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c630:	6823      	ldr	r3, [r4, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d1fb      	bne.n	800c62e <tcp_send_fin+0x1e>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c636:	68e3      	ldr	r3, [r4, #12]
 800c638:	8998      	ldrh	r0, [r3, #12]
 800c63a:	f7fa fdc9 	bl	80071d0 <lwip_htons>
 800c63e:	f010 0f07 	tst.w	r0, #7
 800c642:	d004      	beq.n	800c64e <tcp_send_fin+0x3e>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c644:	2101      	movs	r1, #1
 800c646:	4628      	mov	r0, r5
 800c648:	f7ff ff2a 	bl	800c4a0 <tcp_enqueue_flags>
}
 800c64c:	bd70      	pop	{r4, r5, r6, pc}
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c64e:	68e3      	ldr	r3, [r4, #12]
 800c650:	899e      	ldrh	r6, [r3, #12]
 800c652:	2001      	movs	r0, #1
 800c654:	f7fa fdbc 	bl	80071d0 <lwip_htons>
 800c658:	68e3      	ldr	r3, [r4, #12]
 800c65a:	4330      	orrs	r0, r6
 800c65c:	8198      	strh	r0, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c65e:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 800c662:	f043 0320 	orr.w	r3, r3, #32
 800c666:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
      return ERR_OK;
 800c66a:	2000      	movs	r0, #0
 800c66c:	e7ee      	b.n	800c64c <tcp_send_fin+0x3c>
 800c66e:	bf00      	nop
 800c670:	08017c80 	.word	0x08017c80
 800c674:	08017bfc 	.word	0x08017bfc
 800c678:	08015d2c 	.word	0x08015d2c

0800c67c <tcp_rexmit_rto_prepare>:
{
 800c67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c67e:	4605      	mov	r5, r0
 800c680:	b160      	cbz	r0, 800c69c <tcp_rexmit_rto_prepare+0x20>
  if (pcb->unacked == NULL) {
 800c682:	f8d5 4098 	ldr.w	r4, [r5, #152]	; 0x98
 800c686:	2c00      	cmp	r4, #0
 800c688:	d03a      	beq.n	800c700 <tcp_rexmit_rto_prepare+0x84>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c68a:	6823      	ldr	r3, [r4, #0]
 800c68c:	b173      	cbz	r3, 800c6ac <tcp_rexmit_rto_prepare+0x30>
    if (tcp_output_segment_busy(seg)) {
 800c68e:	4620      	mov	r0, r4
 800c690:	f7ff fbe6 	bl	800be60 <tcp_output_segment_busy>
 800c694:	2800      	cmp	r0, #0
 800c696:	d136      	bne.n	800c706 <tcp_rexmit_rto_prepare+0x8a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c698:	6824      	ldr	r4, [r4, #0]
 800c69a:	e7f6      	b.n	800c68a <tcp_rexmit_rto_prepare+0xe>
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c69c:	4b1d      	ldr	r3, [pc, #116]	; (800c714 <tcp_rexmit_rto_prepare+0x98>)
 800c69e:	f240 6263 	movw	r2, #1635	; 0x663
 800c6a2:	491d      	ldr	r1, [pc, #116]	; (800c718 <tcp_rexmit_rto_prepare+0x9c>)
 800c6a4:	481d      	ldr	r0, [pc, #116]	; (800c71c <tcp_rexmit_rto_prepare+0xa0>)
 800c6a6:	f008 fbcd 	bl	8014e44 <iprintf>
 800c6aa:	e7ea      	b.n	800c682 <tcp_rexmit_rto_prepare+0x6>
  if (tcp_output_segment_busy(seg)) {
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	f7ff fbd7 	bl	800be60 <tcp_output_segment_busy>
 800c6b2:	bb58      	cbnz	r0, 800c70c <tcp_rexmit_rto_prepare+0x90>
  seg->next = pcb->unsent;
 800c6b4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800c6b8:	6023      	str	r3, [r4, #0]
  pcb->unsent = pcb->unacked;
 800c6ba:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800c6be:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  pcb->unacked = NULL;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
  tcp_set_flags(pcb, TF_RTO);
 800c6c8:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
 800c6cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c6d0:	f8a5 3042 	strh.w	r3, [r5, #66]	; 0x42
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c6d4:	68e3      	ldr	r3, [r4, #12]
 800c6d6:	6858      	ldr	r0, [r3, #4]
 800c6d8:	f7fa fd7f 	bl	80071da <lwip_htonl>
 800c6dc:	4606      	mov	r6, r0
 800c6de:	8927      	ldrh	r7, [r4, #8]
 800c6e0:	68e3      	ldr	r3, [r4, #12]
 800c6e2:	8998      	ldrh	r0, [r3, #12]
 800c6e4:	f7fa fd74 	bl	80071d0 <lwip_htons>
 800c6e8:	f010 0f03 	tst.w	r0, #3
 800c6ec:	d006      	beq.n	800c6fc <tcp_rexmit_rto_prepare+0x80>
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	441f      	add	r7, r3
 800c6f2:	443e      	add	r6, r7
 800c6f4:	676e      	str	r6, [r5, #116]	; 0x74
  pcb->rttest = 0;
 800c6f6:	2000      	movs	r0, #0
 800c6f8:	65e8      	str	r0, [r5, #92]	; 0x5c
}
 800c6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	e7f7      	b.n	800c6f0 <tcp_rexmit_rto_prepare+0x74>
    return ERR_VAL;
 800c700:	f06f 0005 	mvn.w	r0, #5
 800c704:	e7f9      	b.n	800c6fa <tcp_rexmit_rto_prepare+0x7e>
      return ERR_VAL;
 800c706:	f06f 0005 	mvn.w	r0, #5
 800c70a:	e7f6      	b.n	800c6fa <tcp_rexmit_rto_prepare+0x7e>
    return ERR_VAL;
 800c70c:	f06f 0005 	mvn.w	r0, #5
 800c710:	e7f3      	b.n	800c6fa <tcp_rexmit_rto_prepare+0x7e>
 800c712:	bf00      	nop
 800c714:	08017c80 	.word	0x08017c80
 800c718:	08017b80 	.word	0x08017b80
 800c71c:	08015d2c 	.word	0x08015d2c

0800c720 <tcp_rexmit>:
{
 800c720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c722:	4607      	mov	r7, r0
 800c724:	b160      	cbz	r0, 800c740 <tcp_rexmit+0x20>
  if (pcb->unacked == NULL) {
 800c726:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 800c72a:	b396      	cbz	r6, 800c792 <tcp_rexmit+0x72>
  if (tcp_output_segment_busy(seg)) {
 800c72c:	4630      	mov	r0, r6
 800c72e:	f7ff fb97 	bl	800be60 <tcp_output_segment_busy>
 800c732:	bb88      	cbnz	r0, 800c798 <tcp_rexmit+0x78>
  pcb->unacked = seg->next;
 800c734:	6833      	ldr	r3, [r6, #0]
 800c736:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  cur_seg = &(pcb->unsent);
 800c73a:	f107 0594 	add.w	r5, r7, #148	; 0x94
  while (*cur_seg &&
 800c73e:	e008      	b.n	800c752 <tcp_rexmit+0x32>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c740:	4b17      	ldr	r3, [pc, #92]	; (800c7a0 <tcp_rexmit+0x80>)
 800c742:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c746:	4917      	ldr	r1, [pc, #92]	; (800c7a4 <tcp_rexmit+0x84>)
 800c748:	4817      	ldr	r0, [pc, #92]	; (800c7a8 <tcp_rexmit+0x88>)
 800c74a:	f008 fb7b 	bl	8014e44 <iprintf>
 800c74e:	e7ea      	b.n	800c726 <tcp_rexmit+0x6>
    cur_seg = &((*cur_seg)->next );
 800c750:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800c752:	682b      	ldr	r3, [r5, #0]
 800c754:	b15b      	cbz	r3, 800c76e <tcp_rexmit+0x4e>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c756:	68db      	ldr	r3, [r3, #12]
 800c758:	6858      	ldr	r0, [r3, #4]
 800c75a:	f7fa fd3e 	bl	80071da <lwip_htonl>
 800c75e:	4604      	mov	r4, r0
 800c760:	68f3      	ldr	r3, [r6, #12]
 800c762:	6858      	ldr	r0, [r3, #4]
 800c764:	f7fa fd39 	bl	80071da <lwip_htonl>
 800c768:	1a20      	subs	r0, r4, r0
  while (*cur_seg &&
 800c76a:	2800      	cmp	r0, #0
 800c76c:	dbf0      	blt.n	800c750 <tcp_rexmit+0x30>
  seg->next = *cur_seg;
 800c76e:	682b      	ldr	r3, [r5, #0]
 800c770:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800c772:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800c774:	6833      	ldr	r3, [r6, #0]
 800c776:	b14b      	cbz	r3, 800c78c <tcp_rexmit+0x6c>
  if (pcb->nrtx < 0xFF) {
 800c778:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800c77c:	2bff      	cmp	r3, #255	; 0xff
 800c77e:	d002      	beq.n	800c786 <tcp_rexmit+0x66>
    ++pcb->nrtx;
 800c780:	3301      	adds	r3, #1
 800c782:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  pcb->rttest = 0;
 800c786:	2000      	movs	r0, #0
 800c788:	65f8      	str	r0, [r7, #92]	; 0x5c
}
 800c78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800c78c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800c790:	e7f2      	b.n	800c778 <tcp_rexmit+0x58>
    return ERR_VAL;
 800c792:	f06f 0005 	mvn.w	r0, #5
 800c796:	e7f8      	b.n	800c78a <tcp_rexmit+0x6a>
    return ERR_VAL;
 800c798:	f06f 0005 	mvn.w	r0, #5
 800c79c:	e7f5      	b.n	800c78a <tcp_rexmit+0x6a>
 800c79e:	bf00      	nop
 800c7a0:	08017c80 	.word	0x08017c80
 800c7a4:	08017b08 	.word	0x08017b08
 800c7a8:	08015d2c 	.word	0x08015d2c

0800c7ac <tcp_rexmit_fast>:
{
 800c7ac:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	b140      	cbz	r0, 800c7c4 <tcp_rexmit_fast+0x18>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c7b2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800c7b6:	b123      	cbz	r3, 800c7c2 <tcp_rexmit_fast+0x16>
 800c7b8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800c7bc:	f013 0f04 	tst.w	r3, #4
 800c7c0:	d008      	beq.n	800c7d4 <tcp_rexmit_fast+0x28>
}
 800c7c2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c7c4:	4b18      	ldr	r3, [pc, #96]	; (800c828 <tcp_rexmit_fast+0x7c>)
 800c7c6:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c7ca:	4918      	ldr	r1, [pc, #96]	; (800c82c <tcp_rexmit_fast+0x80>)
 800c7cc:	4818      	ldr	r0, [pc, #96]	; (800c830 <tcp_rexmit_fast+0x84>)
 800c7ce:	f008 fb39 	bl	8014e44 <iprintf>
 800c7d2:	e7ee      	b.n	800c7b2 <tcp_rexmit_fast+0x6>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	f7ff ffa3 	bl	800c720 <tcp_rexmit>
 800c7da:	2800      	cmp	r0, #0
 800c7dc:	d1f1      	bne.n	800c7c2 <tcp_rexmit_fast+0x16>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c7de:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
 800c7e2:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d21b      	bcs.n	800c822 <tcp_rexmit_fast+0x76>
 800c7ea:	085a      	lsrs	r2, r3, #1
 800c7ec:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c7f0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800c7f4:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800c7f8:	d202      	bcs.n	800c800 <tcp_rexmit_fast+0x54>
        pcb->ssthresh = 2 * pcb->mss;
 800c7fa:	005a      	lsls	r2, r3, #1
 800c7fc:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c800:	f8b4 2072 	ldrh.w	r2, [r4, #114]	; 0x72
 800c804:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c808:	4413      	add	r3, r2
 800c80a:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
      tcp_set_flags(pcb, TF_INFR);
 800c80e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800c812:	f043 0304 	orr.w	r3, r3, #4
 800c816:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      pcb->rtime = 0;
 800c81a:	2300      	movs	r3, #0
 800c81c:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
}
 800c820:	e7cf      	b.n	800c7c2 <tcp_rexmit_fast+0x16>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c822:	0852      	lsrs	r2, r2, #1
 800c824:	e7e2      	b.n	800c7ec <tcp_rexmit_fast+0x40>
 800c826:	bf00      	nop
 800c828:	08017c80 	.word	0x08017c80
 800c82c:	08017b20 	.word	0x08017b20
 800c830:	08015d2c 	.word	0x08015d2c

0800c834 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c838:	b084      	sub	sp, #16
 800c83a:	4605      	mov	r5, r0
 800c83c:	4688      	mov	r8, r1
 800c83e:	4616      	mov	r6, r2
 800c840:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c842:	461f      	mov	r7, r3
 800c844:	b32b      	cbz	r3, 800c892 <tcp_rst+0x5e>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c846:	b364      	cbz	r4, 800c8a2 <tcp_rst+0x6e>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c848:	4640      	mov	r0, r8
 800c84a:	f7fa fcc6 	bl	80071da <lwip_htonl>
 800c84e:	f246 0308 	movw	r3, #24584	; 0x6008
 800c852:	9303      	str	r3, [sp, #12]
 800c854:	2314      	movs	r3, #20
 800c856:	9302      	str	r3, [sp, #8]
 800c858:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800c85c:	9301      	str	r3, [sp, #4]
 800c85e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800c862:	9300      	str	r3, [sp, #0]
 800c864:	4603      	mov	r3, r0
 800c866:	2200      	movs	r2, #0
 800c868:	4611      	mov	r1, r2
 800c86a:	4630      	mov	r0, r6
 800c86c:	f7ff fbac 	bl	800bfc8 <tcp_output_alloc_header_common>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c870:	4606      	mov	r6, r0
 800c872:	b158      	cbz	r0, 800c88c <tcp_rst+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c874:	2300      	movs	r3, #0
 800c876:	461a      	mov	r2, r3
 800c878:	4601      	mov	r1, r0
 800c87a:	4628      	mov	r0, r5
 800c87c:	f7ff fb0a 	bl	800be94 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c880:	4623      	mov	r3, r4
 800c882:	463a      	mov	r2, r7
 800c884:	4631      	mov	r1, r6
 800c886:	4628      	mov	r0, r5
 800c888:	f7ff fcec 	bl	800c264 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c88c:	b004      	add	sp, #16
 800c88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c892:	4b08      	ldr	r3, [pc, #32]	; (800c8b4 <tcp_rst+0x80>)
 800c894:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c898:	4907      	ldr	r1, [pc, #28]	; (800c8b8 <tcp_rst+0x84>)
 800c89a:	4808      	ldr	r0, [pc, #32]	; (800c8bc <tcp_rst+0x88>)
 800c89c:	f008 fad2 	bl	8014e44 <iprintf>
 800c8a0:	e7d1      	b.n	800c846 <tcp_rst+0x12>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c8a2:	4b04      	ldr	r3, [pc, #16]	; (800c8b4 <tcp_rst+0x80>)
 800c8a4:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c8a8:	4905      	ldr	r1, [pc, #20]	; (800c8c0 <tcp_rst+0x8c>)
 800c8aa:	4804      	ldr	r0, [pc, #16]	; (800c8bc <tcp_rst+0x88>)
 800c8ac:	f008 faca 	bl	8014e44 <iprintf>
 800c8b0:	e7ca      	b.n	800c848 <tcp_rst+0x14>
 800c8b2:	bf00      	nop
 800c8b4:	08017c80 	.word	0x08017c80
 800c8b8:	08017ba4 	.word	0x08017ba4
 800c8bc:	08015d2c 	.word	0x08015d2c
 800c8c0:	08017bc0 	.word	0x08017bc0

0800c8c4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c8c4:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c8c6:	4604      	mov	r4, r0
 800c8c8:	b308      	cbz	r0, 800c90e <tcp_send_empty_ack+0x4a>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c8ca:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800c8cc:	f7fa fc85 	bl	80071da <lwip_htonl>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	4611      	mov	r1, r2
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f7ff fbc2 	bl	800c060 <tcp_output_alloc_header>
  if (p == NULL) {
 800c8dc:	4605      	mov	r5, r0
 800c8de:	b1f0      	cbz	r0, 800c91e <tcp_send_empty_ack+0x5a>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	4601      	mov	r1, r0
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	f7ff fad4 	bl	800be94 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c8ec:	f104 0318 	add.w	r3, r4, #24
 800c8f0:	4622      	mov	r2, r4
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f7ff fcb5 	bl	800c264 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	b9c0      	cbnz	r0, 800c930 <tcp_send_empty_ack+0x6c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c8fe:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800c902:	f023 0303 	bic.w	r3, r3, #3
 800c906:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  }

  return err;
}
 800c90a:	4610      	mov	r0, r2
 800c90c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c90e:	4b0c      	ldr	r3, [pc, #48]	; (800c940 <tcp_send_empty_ack+0x7c>)
 800c910:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c914:	490b      	ldr	r1, [pc, #44]	; (800c944 <tcp_send_empty_ack+0x80>)
 800c916:	480c      	ldr	r0, [pc, #48]	; (800c948 <tcp_send_empty_ack+0x84>)
 800c918:	f008 fa94 	bl	8014e44 <iprintf>
 800c91c:	e7d5      	b.n	800c8ca <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c91e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800c922:	f043 0303 	orr.w	r3, r3, #3
 800c926:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    return ERR_BUF;
 800c92a:	f06f 0201 	mvn.w	r2, #1
 800c92e:	e7ec      	b.n	800c90a <tcp_send_empty_ack+0x46>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c930:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800c934:	f043 0303 	orr.w	r3, r3, #3
 800c938:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 800c93c:	e7e5      	b.n	800c90a <tcp_send_empty_ack+0x46>
 800c93e:	bf00      	nop
 800c940:	08017c80 	.word	0x08017c80
 800c944:	08017bdc 	.word	0x08017bdc
 800c948:	08015d2c 	.word	0x08015d2c

0800c94c <tcp_output>:
{
 800c94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c950:	4604      	mov	r4, r0
 800c952:	2800      	cmp	r0, #0
 800c954:	d057      	beq.n	800ca06 <tcp_output+0xba>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c956:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d05b      	beq.n	800ca16 <tcp_output+0xca>
  if (tcp_input_pcb == pcb) {
 800c95e:	4b8a      	ldr	r3, [pc, #552]	; (800cb88 <tcp_output+0x23c>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	42a3      	cmp	r3, r4
 800c964:	f000 819a 	beq.w	800cc9c <tcp_output+0x350>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c968:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 800c96c:	f8b4 6070 	ldrh.w	r6, [r4, #112]	; 0x70
 800c970:	42b3      	cmp	r3, r6
 800c972:	d200      	bcs.n	800c976 <tcp_output+0x2a>
 800c974:	461e      	mov	r6, r3
  seg = pcb->unsent;
 800c976:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
  if (seg == NULL) {
 800c97a:	2d00      	cmp	r5, #0
 800c97c:	d053      	beq.n	800ca26 <tcp_output+0xda>
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c97e:	f104 0718 	add.w	r7, r4, #24
 800c982:	463a      	mov	r2, r7
 800c984:	4621      	mov	r1, r4
 800c986:	4620      	mov	r0, r4
 800c988:	f7ff fb9a 	bl	800c0c0 <tcp_route>
  if (netif == NULL) {
 800c98c:	4680      	mov	r8, r0
 800c98e:	2800      	cmp	r0, #0
 800c990:	f000 8186 	beq.w	800cca0 <tcp_output+0x354>
  if (ip_addr_isany(&pcb->local_ip)) {
 800c994:	b14c      	cbz	r4, 800c9aa <tcp_output+0x5e>
 800c996:	7d23      	ldrb	r3, [r4, #20]
 800c998:	2b06      	cmp	r3, #6
 800c99a:	d058      	beq.n	800ca4e <tcp_output+0x102>
 800c99c:	2c00      	cmp	r4, #0
 800c99e:	d06b      	beq.n	800ca78 <tcp_output+0x12c>
 800c9a0:	6823      	ldr	r3, [r4, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d16a      	bne.n	800ca7c <tcp_output+0x130>
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	b1ab      	cbz	r3, 800c9d6 <tcp_output+0x8a>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c9aa:	b11f      	cbz	r7, 800c9b4 <tcp_output+0x68>
 800c9ac:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800c9b0:	2b06      	cmp	r3, #6
 800c9b2:	d065      	beq.n	800ca80 <tcp_output+0x134>
 800c9b4:	f108 0004 	add.w	r0, r8, #4
    if (local_ip == NULL) {
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	f000 8174 	beq.w	800cca6 <tcp_output+0x35a>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c9be:	7d03      	ldrb	r3, [r0, #20]
 800c9c0:	7523      	strb	r3, [r4, #20]
 800c9c2:	7d03      	ldrb	r3, [r0, #20]
 800c9c4:	2b06      	cmp	r3, #6
 800c9c6:	d061      	beq.n	800ca8c <tcp_output+0x140>
 800c9c8:	6803      	ldr	r3, [r0, #0]
 800c9ca:	6023      	str	r3, [r4, #0]
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	60e3      	str	r3, [r4, #12]
 800c9d0:	60a3      	str	r3, [r4, #8]
 800c9d2:	6063      	str	r3, [r4, #4]
 800c9d4:	7423      	strb	r3, [r4, #16]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c9d6:	68eb      	ldr	r3, [r5, #12]
 800c9d8:	6858      	ldr	r0, [r3, #4]
 800c9da:	f7fa fbfe 	bl	80071da <lwip_htonl>
 800c9de:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c9e0:	1ac0      	subs	r0, r0, r3
 800c9e2:	892b      	ldrh	r3, [r5, #8]
 800c9e4:	4418      	add	r0, r3
 800c9e6:	42b0      	cmp	r0, r6
 800c9e8:	d96b      	bls.n	800cac2 <tcp_output+0x176>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c9ea:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 800c9ee:	42b3      	cmp	r3, r6
 800c9f0:	d057      	beq.n	800caa2 <tcp_output+0x156>
    if (pcb->flags & TF_ACK_NOW) {
 800c9f2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800c9f6:	f013 0f02 	tst.w	r3, #2
 800c9fa:	d019      	beq.n	800ca30 <tcp_output+0xe4>
      return tcp_send_empty_ack(pcb);
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	f7ff ff61 	bl	800c8c4 <tcp_send_empty_ack>
 800ca02:	4603      	mov	r3, r0
 800ca04:	e01b      	b.n	800ca3e <tcp_output+0xf2>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ca06:	4b61      	ldr	r3, [pc, #388]	; (800cb8c <tcp_output+0x240>)
 800ca08:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ca0c:	4960      	ldr	r1, [pc, #384]	; (800cb90 <tcp_output+0x244>)
 800ca0e:	4861      	ldr	r0, [pc, #388]	; (800cb94 <tcp_output+0x248>)
 800ca10:	f008 fa18 	bl	8014e44 <iprintf>
 800ca14:	e79f      	b.n	800c956 <tcp_output+0xa>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ca16:	4b5d      	ldr	r3, [pc, #372]	; (800cb8c <tcp_output+0x240>)
 800ca18:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800ca1c:	495e      	ldr	r1, [pc, #376]	; (800cb98 <tcp_output+0x24c>)
 800ca1e:	485d      	ldr	r0, [pc, #372]	; (800cb94 <tcp_output+0x248>)
 800ca20:	f008 fa10 	bl	8014e44 <iprintf>
 800ca24:	e79b      	b.n	800c95e <tcp_output+0x12>
    if (pcb->flags & TF_ACK_NOW) {
 800ca26:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800ca2a:	f013 0f02 	tst.w	r3, #2
 800ca2e:	d109      	bne.n	800ca44 <tcp_output+0xf8>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ca30:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800ca34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca38:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
  return ERR_OK;
 800ca3c:	2300      	movs	r3, #0
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return tcp_send_empty_ack(pcb);
 800ca44:	4620      	mov	r0, r4
 800ca46:	f7ff ff3d 	bl	800c8c4 <tcp_send_empty_ack>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	e7f7      	b.n	800ca3e <tcp_output+0xf2>
  if (ip_addr_isany(&pcb->local_ip)) {
 800ca4e:	b14c      	cbz	r4, 800ca64 <tcp_output+0x118>
 800ca50:	6823      	ldr	r3, [r4, #0]
 800ca52:	b94b      	cbnz	r3, 800ca68 <tcp_output+0x11c>
 800ca54:	6863      	ldr	r3, [r4, #4]
 800ca56:	b94b      	cbnz	r3, 800ca6c <tcp_output+0x120>
 800ca58:	68a3      	ldr	r3, [r4, #8]
 800ca5a:	b94b      	cbnz	r3, 800ca70 <tcp_output+0x124>
 800ca5c:	68e3      	ldr	r3, [r4, #12]
 800ca5e:	b14b      	cbz	r3, 800ca74 <tcp_output+0x128>
 800ca60:	2300      	movs	r3, #0
 800ca62:	e7a1      	b.n	800c9a8 <tcp_output+0x5c>
 800ca64:	2301      	movs	r3, #1
 800ca66:	e79f      	b.n	800c9a8 <tcp_output+0x5c>
 800ca68:	2300      	movs	r3, #0
 800ca6a:	e79d      	b.n	800c9a8 <tcp_output+0x5c>
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	e79b      	b.n	800c9a8 <tcp_output+0x5c>
 800ca70:	2300      	movs	r3, #0
 800ca72:	e799      	b.n	800c9a8 <tcp_output+0x5c>
 800ca74:	2301      	movs	r3, #1
 800ca76:	e797      	b.n	800c9a8 <tcp_output+0x5c>
 800ca78:	2301      	movs	r3, #1
 800ca7a:	e795      	b.n	800c9a8 <tcp_output+0x5c>
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	e793      	b.n	800c9a8 <tcp_output+0x5c>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ca80:	f104 0118 	add.w	r1, r4, #24
 800ca84:	4640      	mov	r0, r8
 800ca86:	f004 fc09 	bl	801129c <ip6_select_source_address>
 800ca8a:	e795      	b.n	800c9b8 <tcp_output+0x6c>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ca8c:	6803      	ldr	r3, [r0, #0]
 800ca8e:	6023      	str	r3, [r4, #0]
 800ca90:	6843      	ldr	r3, [r0, #4]
 800ca92:	6063      	str	r3, [r4, #4]
 800ca94:	6883      	ldr	r3, [r0, #8]
 800ca96:	60a3      	str	r3, [r4, #8]
 800ca98:	68c3      	ldr	r3, [r0, #12]
 800ca9a:	60e3      	str	r3, [r4, #12]
 800ca9c:	7c03      	ldrb	r3, [r0, #16]
 800ca9e:	7423      	strb	r3, [r4, #16]
 800caa0:	e799      	b.n	800c9d6 <tcp_output+0x8a>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800caa2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d1a3      	bne.n	800c9f2 <tcp_output+0xa6>
 800caaa:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d19f      	bne.n	800c9f2 <tcp_output+0xa6>
      pcb->persist_cnt = 0;
 800cab2:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
      pcb->persist_backoff = 1;
 800cab6:	2201      	movs	r2, #1
 800cab8:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
      pcb->persist_probe = 0;
 800cabc:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
 800cac0:	e797      	b.n	800c9f2 <tcp_output+0xa6>
  pcb->persist_backoff = 0;
 800cac2:	2300      	movs	r3, #0
 800cac4:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
  useg = pcb->unacked;
 800cac8:	f8d4 7098 	ldr.w	r7, [r4, #152]	; 0x98
  if (useg != NULL) {
 800cacc:	b90f      	cbnz	r7, 800cad2 <tcp_output+0x186>
 800cace:	e06c      	b.n	800cbaa <tcp_output+0x25e>
    for (; useg->next != NULL; useg = useg->next);
 800cad0:	461f      	mov	r7, r3
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d1fb      	bne.n	800cad0 <tcp_output+0x184>
 800cad8:	e067      	b.n	800cbaa <tcp_output+0x25e>
    LWIP_ASSERT("RST not expected here!",
 800cada:	4b2c      	ldr	r3, [pc, #176]	; (800cb8c <tcp_output+0x240>)
 800cadc:	f240 5237 	movw	r2, #1335	; 0x537
 800cae0:	492e      	ldr	r1, [pc, #184]	; (800cb9c <tcp_output+0x250>)
 800cae2:	482c      	ldr	r0, [pc, #176]	; (800cb94 <tcp_output+0x248>)
 800cae4:	f008 f9ae 	bl	8014e44 <iprintf>
 800cae8:	e072      	b.n	800cbd0 <tcp_output+0x284>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800caea:	8911      	ldrh	r1, [r2, #8]
 800caec:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 800caf0:	4291      	cmp	r1, r2
 800caf2:	d27d      	bcs.n	800cbf0 <tcp_output+0x2a4>
 800caf4:	f8b4 208c 	ldrh.w	r2, [r4, #140]	; 0x8c
 800caf8:	2a00      	cmp	r2, #0
 800cafa:	d079      	beq.n	800cbf0 <tcp_output+0x2a4>
 800cafc:	f8b4 208e 	ldrh.w	r2, [r4, #142]	; 0x8e
 800cb00:	2a08      	cmp	r2, #8
 800cb02:	d875      	bhi.n	800cbf0 <tcp_output+0x2a4>
 800cb04:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800cb08:	d172      	bne.n	800cbf0 <tcp_output+0x2a4>
  if (pcb->unsent == NULL) {
 800cb0a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d18e      	bne.n	800ca30 <tcp_output+0xe4>
    pcb->unsent_oversize = 0;
 800cb12:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
 800cb16:	e78b      	b.n	800ca30 <tcp_output+0xe4>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800cb18:	68eb      	ldr	r3, [r5, #12]
 800cb1a:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800cb1e:	2010      	movs	r0, #16
 800cb20:	f7fa fb56 	bl	80071d0 <lwip_htons>
 800cb24:	68eb      	ldr	r3, [r5, #12]
 800cb26:	ea49 0000 	orr.w	r0, r9, r0
 800cb2a:	8198      	strh	r0, [r3, #12]
 800cb2c:	e064      	b.n	800cbf8 <tcp_output+0x2ac>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cb2e:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800cb32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cb36:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
      return err;
 800cb3a:	e780      	b.n	800ca3e <tcp_output+0xf2>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cb3c:	2000      	movs	r0, #0
 800cb3e:	e080      	b.n	800cc42 <tcp_output+0x2f6>
      pcb->snd_nxt = snd_nxt;
 800cb40:	67a0      	str	r0, [r4, #120]	; 0x78
 800cb42:	e085      	b.n	800cc50 <tcp_output+0x304>
    if (TCP_TCPLEN(seg) > 0) {
 800cb44:	2300      	movs	r3, #0
 800cb46:	e08e      	b.n	800cc66 <tcp_output+0x31a>
        pcb->unacked = seg;
 800cb48:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
        useg = seg;
 800cb4c:	462f      	mov	r7, r5
 800cb4e:	e02a      	b.n	800cba6 <tcp_output+0x25a>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800cb50:	f104 0a98 	add.w	sl, r4, #152	; 0x98
          while (*cur_seg &&
 800cb54:	f8da 3000 	ldr.w	r3, [sl]
 800cb58:	b17b      	cbz	r3, 800cb7a <tcp_output+0x22e>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	6858      	ldr	r0, [r3, #4]
 800cb5e:	f7fa fb3c 	bl	80071da <lwip_htonl>
 800cb62:	4681      	mov	r9, r0
 800cb64:	68eb      	ldr	r3, [r5, #12]
 800cb66:	6858      	ldr	r0, [r3, #4]
 800cb68:	f7fa fb37 	bl	80071da <lwip_htonl>
 800cb6c:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 800cb70:	2800      	cmp	r0, #0
 800cb72:	da02      	bge.n	800cb7a <tcp_output+0x22e>
            cur_seg = &((*cur_seg)->next );
 800cb74:	f8da a000 	ldr.w	sl, [sl]
 800cb78:	e7ec      	b.n	800cb54 <tcp_output+0x208>
          seg->next = (*cur_seg);
 800cb7a:	f8da 3000 	ldr.w	r3, [sl]
 800cb7e:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 800cb80:	f8ca 5000 	str.w	r5, [sl]
 800cb84:	e00f      	b.n	800cba6 <tcp_output+0x25a>
 800cb86:	bf00      	nop
 800cb88:	20008624 	.word	0x20008624
 800cb8c:	08017c80 	.word	0x08017c80
 800cb90:	08017964 	.word	0x08017964
 800cb94:	08015d2c 	.word	0x08015d2c
 800cb98:	0801797c 	.word	0x0801797c
 800cb9c:	080179a4 	.word	0x080179a4
      tcp_seg_free(seg);
 800cba0:	4628      	mov	r0, r5
 800cba2:	f7fc fad1 	bl	8009148 <tcp_seg_free>
    seg = pcb->unsent;
 800cba6:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
  while (seg != NULL &&
 800cbaa:	2d00      	cmp	r5, #0
 800cbac:	d0ad      	beq.n	800cb0a <tcp_output+0x1be>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800cbae:	68eb      	ldr	r3, [r5, #12]
 800cbb0:	6858      	ldr	r0, [r3, #4]
 800cbb2:	f7fa fb12 	bl	80071da <lwip_htonl>
 800cbb6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800cbb8:	1ac0      	subs	r0, r0, r3
 800cbba:	892b      	ldrh	r3, [r5, #8]
 800cbbc:	4418      	add	r0, r3
  while (seg != NULL &&
 800cbbe:	42b0      	cmp	r0, r6
 800cbc0:	d8a3      	bhi.n	800cb0a <tcp_output+0x1be>
    LWIP_ASSERT("RST not expected here!",
 800cbc2:	68eb      	ldr	r3, [r5, #12]
 800cbc4:	8998      	ldrh	r0, [r3, #12]
 800cbc6:	f7fa fb03 	bl	80071d0 <lwip_htons>
 800cbca:	f010 0f04 	tst.w	r0, #4
 800cbce:	d184      	bne.n	800cada <tcp_output+0x18e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cbd0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800cbd4:	b163      	cbz	r3, 800cbf0 <tcp_output+0x2a4>
 800cbd6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800cbda:	f013 0f44 	tst.w	r3, #68	; 0x44
 800cbde:	d107      	bne.n	800cbf0 <tcp_output+0x2a4>
 800cbe0:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800cbe4:	2a00      	cmp	r2, #0
 800cbe6:	d085      	beq.n	800caf4 <tcp_output+0x1a8>
 800cbe8:	6811      	ldr	r1, [r2, #0]
 800cbea:	2900      	cmp	r1, #0
 800cbec:	f43f af7d 	beq.w	800caea <tcp_output+0x19e>
    if (pcb->state != SYN_SENT) {
 800cbf0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800cbf4:	2b02      	cmp	r3, #2
 800cbf6:	d18f      	bne.n	800cb18 <tcp_output+0x1cc>
    err = tcp_output_segment(seg, pcb, netif);
 800cbf8:	4642      	mov	r2, r8
 800cbfa:	4621      	mov	r1, r4
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	f7ff fa75 	bl	800c0ec <tcp_output_segment>
    if (err != ERR_OK) {
 800cc02:	4603      	mov	r3, r0
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d192      	bne.n	800cb2e <tcp_output+0x1e2>
    pcb->unsent = seg->next;
 800cc08:	682b      	ldr	r3, [r5, #0]
 800cc0a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    if (pcb->state != SYN_SENT) {
 800cc0e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800cc12:	2b02      	cmp	r3, #2
 800cc14:	d005      	beq.n	800cc22 <tcp_output+0x2d6>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cc16:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800cc1a:	f023 0303 	bic.w	r3, r3, #3
 800cc1e:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cc22:	68eb      	ldr	r3, [r5, #12]
 800cc24:	6858      	ldr	r0, [r3, #4]
 800cc26:	f7fa fad8 	bl	80071da <lwip_htonl>
 800cc2a:	4681      	mov	r9, r0
 800cc2c:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800cc30:	68eb      	ldr	r3, [r5, #12]
 800cc32:	8998      	ldrh	r0, [r3, #12]
 800cc34:	f7fa facc 	bl	80071d0 <lwip_htons>
 800cc38:	f010 0f03 	tst.w	r0, #3
 800cc3c:	f43f af7e 	beq.w	800cb3c <tcp_output+0x1f0>
 800cc40:	2001      	movs	r0, #1
 800cc42:	4450      	add	r0, sl
 800cc44:	4448      	add	r0, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cc46:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800cc48:	1a1b      	subs	r3, r3, r0
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	f6ff af78 	blt.w	800cb40 <tcp_output+0x1f4>
    if (TCP_TCPLEN(seg) > 0) {
 800cc50:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800cc54:	68eb      	ldr	r3, [r5, #12]
 800cc56:	8998      	ldrh	r0, [r3, #12]
 800cc58:	f7fa faba 	bl	80071d0 <lwip_htons>
 800cc5c:	f010 0f03 	tst.w	r0, #3
 800cc60:	f43f af70 	beq.w	800cb44 <tcp_output+0x1f8>
 800cc64:	2301      	movs	r3, #1
 800cc66:	eb19 0f03 	cmn.w	r9, r3
 800cc6a:	d099      	beq.n	800cba0 <tcp_output+0x254>
      seg->next = NULL;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800cc70:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f43f af67 	beq.w	800cb48 <tcp_output+0x1fc>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800cc7a:	68eb      	ldr	r3, [r5, #12]
 800cc7c:	6858      	ldr	r0, [r3, #4]
 800cc7e:	f7fa faac 	bl	80071da <lwip_htonl>
 800cc82:	4681      	mov	r9, r0
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	6858      	ldr	r0, [r3, #4]
 800cc88:	f7fa faa7 	bl	80071da <lwip_htonl>
 800cc8c:	eba9 0000 	sub.w	r0, r9, r0
 800cc90:	2800      	cmp	r0, #0
 800cc92:	f6ff af5d 	blt.w	800cb50 <tcp_output+0x204>
          useg->next = seg;
 800cc96:	603d      	str	r5, [r7, #0]
          useg = useg->next;
 800cc98:	462f      	mov	r7, r5
 800cc9a:	e784      	b.n	800cba6 <tcp_output+0x25a>
    return ERR_OK;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	e6ce      	b.n	800ca3e <tcp_output+0xf2>
    return ERR_RTE;
 800cca0:	f06f 0303 	mvn.w	r3, #3
 800cca4:	e6cb      	b.n	800ca3e <tcp_output+0xf2>
      return ERR_RTE;
 800cca6:	f06f 0303 	mvn.w	r3, #3
 800ccaa:	e6c8      	b.n	800ca3e <tcp_output+0xf2>

0800ccac <tcp_rexmit_rto_commit>:
{
 800ccac:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ccae:	4604      	mov	r4, r0
 800ccb0:	b150      	cbz	r0, 800ccc8 <tcp_rexmit_rto_commit+0x1c>
  if (pcb->nrtx < 0xFF) {
 800ccb2:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 800ccb6:	2bff      	cmp	r3, #255	; 0xff
 800ccb8:	d002      	beq.n	800ccc0 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 800ccba:	3301      	adds	r3, #1
 800ccbc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  tcp_output(pcb);
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	f7ff fe43 	bl	800c94c <tcp_output>
}
 800ccc6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ccc8:	4b03      	ldr	r3, [pc, #12]	; (800ccd8 <tcp_rexmit_rto_commit+0x2c>)
 800ccca:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ccce:	4903      	ldr	r1, [pc, #12]	; (800ccdc <tcp_rexmit_rto_commit+0x30>)
 800ccd0:	4803      	ldr	r0, [pc, #12]	; (800cce0 <tcp_rexmit_rto_commit+0x34>)
 800ccd2:	f008 f8b7 	bl	8014e44 <iprintf>
 800ccd6:	e7ec      	b.n	800ccb2 <tcp_rexmit_rto_commit+0x6>
 800ccd8:	08017c80 	.word	0x08017c80
 800ccdc:	08017b5c 	.word	0x08017b5c
 800cce0:	08015d2c 	.word	0x08015d2c

0800cce4 <tcp_rexmit_rto>:
{
 800cce4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cce6:	4604      	mov	r4, r0
 800cce8:	b120      	cbz	r0, 800ccf4 <tcp_rexmit_rto+0x10>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ccea:	4620      	mov	r0, r4
 800ccec:	f7ff fcc6 	bl	800c67c <tcp_rexmit_rto_prepare>
 800ccf0:	b140      	cbz	r0, 800cd04 <tcp_rexmit_rto+0x20>
}
 800ccf2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ccf4:	4b05      	ldr	r3, [pc, #20]	; (800cd0c <tcp_rexmit_rto+0x28>)
 800ccf6:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ccfa:	4905      	ldr	r1, [pc, #20]	; (800cd10 <tcp_rexmit_rto+0x2c>)
 800ccfc:	4805      	ldr	r0, [pc, #20]	; (800cd14 <tcp_rexmit_rto+0x30>)
 800ccfe:	f008 f8a1 	bl	8014e44 <iprintf>
 800cd02:	e7f2      	b.n	800ccea <tcp_rexmit_rto+0x6>
    tcp_rexmit_rto_commit(pcb);
 800cd04:	4620      	mov	r0, r4
 800cd06:	f7ff ffd1 	bl	800ccac <tcp_rexmit_rto_commit>
}
 800cd0a:	e7f2      	b.n	800ccf2 <tcp_rexmit_rto+0xe>
 800cd0c:	08017c80 	.word	0x08017c80
 800cd10:	08017b40 	.word	0x08017b40
 800cd14:	08015d2c 	.word	0x08015d2c

0800cd18 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800cd18:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800cd1a:	4604      	mov	r4, r0
 800cd1c:	b1c8      	cbz	r0, 800cd52 <tcp_keepalive+0x3a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800cd1e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800cd20:	3801      	subs	r0, #1
 800cd22:	f7fa fa5a 	bl	80071da <lwip_htonl>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2200      	movs	r2, #0
 800cd2a:	4611      	mov	r1, r2
 800cd2c:	4620      	mov	r0, r4
 800cd2e:	f7ff f997 	bl	800c060 <tcp_output_alloc_header>
  if (p == NULL) {
 800cd32:	4605      	mov	r5, r0
 800cd34:	b1a8      	cbz	r0, 800cd62 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cd36:	2300      	movs	r3, #0
 800cd38:	461a      	mov	r2, r3
 800cd3a:	4601      	mov	r1, r0
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f7ff f8a9 	bl	800be94 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cd42:	f104 0318 	add.w	r3, r4, #24
 800cd46:	4622      	mov	r2, r4
 800cd48:	4629      	mov	r1, r5
 800cd4a:	4620      	mov	r0, r4
 800cd4c:	f7ff fa8a 	bl	800c264 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800cd50:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800cd52:	4b05      	ldr	r3, [pc, #20]	; (800cd68 <tcp_keepalive+0x50>)
 800cd54:	f640 0224 	movw	r2, #2084	; 0x824
 800cd58:	4904      	ldr	r1, [pc, #16]	; (800cd6c <tcp_keepalive+0x54>)
 800cd5a:	4805      	ldr	r0, [pc, #20]	; (800cd70 <tcp_keepalive+0x58>)
 800cd5c:	f008 f872 	bl	8014e44 <iprintf>
 800cd60:	e7dd      	b.n	800cd1e <tcp_keepalive+0x6>
    return ERR_MEM;
 800cd62:	f04f 30ff 	mov.w	r0, #4294967295
 800cd66:	e7f3      	b.n	800cd50 <tcp_keepalive+0x38>
 800cd68:	08017c80 	.word	0x08017c80
 800cd6c:	08017948 	.word	0x08017948
 800cd70:	08015d2c 	.word	0x08015d2c

0800cd74 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800cd74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cd78:	4604      	mov	r4, r0
 800cd7a:	b1b0      	cbz	r0, 800cdaa <tcp_zero_window_probe+0x36>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800cd7c:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
  if (seg == NULL) {
 800cd80:	2d00      	cmp	r5, #0
 800cd82:	d05c      	beq.n	800ce3e <tcp_zero_window_probe+0xca>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800cd84:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
 800cd88:	2bff      	cmp	r3, #255	; 0xff
 800cd8a:	d002      	beq.n	800cd92 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cd92:	68eb      	ldr	r3, [r5, #12]
 800cd94:	8998      	ldrh	r0, [r3, #12]
 800cd96:	f7fa fa1b 	bl	80071d0 <lwip_htons>
 800cd9a:	f010 0f01 	tst.w	r0, #1
 800cd9e:	d00c      	beq.n	800cdba <tcp_zero_window_probe+0x46>
 800cda0:	892b      	ldrh	r3, [r5, #8]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d03c      	beq.n	800ce20 <tcp_zero_window_probe+0xac>
 800cda6:	2200      	movs	r2, #0
 800cda8:	e008      	b.n	800cdbc <tcp_zero_window_probe+0x48>
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cdaa:	4b27      	ldr	r3, [pc, #156]	; (800ce48 <tcp_zero_window_probe+0xd4>)
 800cdac:	f640 024f 	movw	r2, #2127	; 0x84f
 800cdb0:	4926      	ldr	r1, [pc, #152]	; (800ce4c <tcp_zero_window_probe+0xd8>)
 800cdb2:	4827      	ldr	r0, [pc, #156]	; (800ce50 <tcp_zero_window_probe+0xdc>)
 800cdb4:	f008 f846 	bl	8014e44 <iprintf>
 800cdb8:	e7e0      	b.n	800cd7c <tcp_zero_window_probe+0x8>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cdba:	2200      	movs	r2, #0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800cdbc:	f002 07ff 	and.w	r7, r2, #255	; 0xff

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800cdc0:	68eb      	ldr	r3, [r5, #12]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	f082 0201 	eor.w	r2, r2, #1
 800cdc8:	2100      	movs	r1, #0
 800cdca:	4620      	mov	r0, r4
 800cdcc:	f7ff f948 	bl	800c060 <tcp_output_alloc_header>
  if (p == NULL) {
 800cdd0:	4606      	mov	r6, r0
 800cdd2:	b3b0      	cbz	r0, 800ce42 <tcp_zero_window_probe+0xce>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800cdd4:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800cdd8:	b327      	cbz	r7, 800ce24 <tcp_zero_window_probe+0xb0>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800cdda:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 800cdde:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800cde2:	2011      	movs	r0, #17
 800cde4:	f7fa f9f4 	bl	80071d0 <lwip_htons>
 800cde8:	b200      	sxth	r0, r0
 800cdea:	4307      	orrs	r7, r0
 800cdec:	f8a8 700c 	strh.w	r7, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800cdf0:	68eb      	ldr	r3, [r5, #12]
 800cdf2:	6858      	ldr	r0, [r3, #4]
 800cdf4:	f7fa f9f1 	bl	80071da <lwip_htonl>
 800cdf8:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cdfa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800cdfc:	1a1b      	subs	r3, r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	db1b      	blt.n	800ce3a <tcp_zero_window_probe+0xc6>
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ce02:	2300      	movs	r3, #0
 800ce04:	461a      	mov	r2, r3
 800ce06:	4631      	mov	r1, r6
 800ce08:	4620      	mov	r0, r4
 800ce0a:	f7ff f843 	bl	800be94 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ce0e:	f104 0318 	add.w	r3, r4, #24
 800ce12:	4622      	mov	r2, r4
 800ce14:	4631      	mov	r1, r6
 800ce16:	4620      	mov	r0, r4
 800ce18:	f7ff fa24 	bl	800c264 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800ce1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ce20:	2201      	movs	r2, #1
 800ce22:	e7cb      	b.n	800cdbc <tcp_zero_window_probe+0x48>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ce24:	6868      	ldr	r0, [r5, #4]
 800ce26:	8903      	ldrh	r3, [r0, #8]
 800ce28:	892a      	ldrh	r2, [r5, #8]
 800ce2a:	1a9b      	subs	r3, r3, r2
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	2201      	movs	r2, #1
 800ce30:	f108 0114 	add.w	r1, r8, #20
 800ce34:	f7fb fee6 	bl	8008c04 <pbuf_copy_partial>
 800ce38:	e7da      	b.n	800cdf0 <tcp_zero_window_probe+0x7c>
    pcb->snd_nxt = snd_nxt;
 800ce3a:	67a0      	str	r0, [r4, #120]	; 0x78
 800ce3c:	e7e1      	b.n	800ce02 <tcp_zero_window_probe+0x8e>
    return ERR_OK;
 800ce3e:	2000      	movs	r0, #0
 800ce40:	e7ec      	b.n	800ce1c <tcp_zero_window_probe+0xa8>
    return ERR_MEM;
 800ce42:	f04f 30ff 	mov.w	r0, #4294967295
 800ce46:	e7e9      	b.n	800ce1c <tcp_zero_window_probe+0xa8>
 800ce48:	08017c80 	.word	0x08017c80
 800ce4c:	08017d44 	.word	0x08017d44
 800ce50:	08015d2c 	.word	0x08015d2c

0800ce54 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ce54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce56:	4605      	mov	r5, r0
 800ce58:	460f      	mov	r7, r1
 800ce5a:	4616      	mov	r6, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ce5c:	2006      	movs	r0, #6
 800ce5e:	f7fa ffd1 	bl	8007e04 <memp_malloc>
  if (timeout == NULL) {
 800ce62:	b1a8      	cbz	r0, 800ce90 <sys_timeout_abs+0x3c>
 800ce64:	4604      	mov	r4, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800ce66:	2300      	movs	r3, #0
 800ce68:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
 800ce6a:	6087      	str	r7, [r0, #8]
  timeout->arg = arg;
 800ce6c:	60c6      	str	r6, [r0, #12]
  timeout->time = abs_time;
 800ce6e:	6045      	str	r5, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ce70:	4b10      	ldr	r3, [pc, #64]	; (800ceb4 <sys_timeout_abs+0x60>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	b19b      	cbz	r3, 800ce9e <sys_timeout_abs+0x4a>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ce76:	685a      	ldr	r2, [r3, #4]
 800ce78:	1aaa      	subs	r2, r5, r2
 800ce7a:	2a00      	cmp	r2, #0
 800ce7c:	db12      	blt.n	800cea4 <sys_timeout_abs+0x50>
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ce7e:	b1a3      	cbz	r3, 800ceaa <sys_timeout_abs+0x56>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	b19a      	cbz	r2, 800ceac <sys_timeout_abs+0x58>
 800ce84:	6851      	ldr	r1, [r2, #4]
 800ce86:	1a69      	subs	r1, r5, r1
 800ce88:	2900      	cmp	r1, #0
 800ce8a:	db0f      	blt.n	800ceac <sys_timeout_abs+0x58>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ce8c:	4613      	mov	r3, r2
 800ce8e:	e7f6      	b.n	800ce7e <sys_timeout_abs+0x2a>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ce90:	4b09      	ldr	r3, [pc, #36]	; (800ceb8 <sys_timeout_abs+0x64>)
 800ce92:	22be      	movs	r2, #190	; 0xbe
 800ce94:	4909      	ldr	r1, [pc, #36]	; (800cebc <sys_timeout_abs+0x68>)
 800ce96:	480a      	ldr	r0, [pc, #40]	; (800cec0 <sys_timeout_abs+0x6c>)
 800ce98:	f007 ffd4 	bl	8014e44 <iprintf>
 800ce9c:	e005      	b.n	800ceaa <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ce9e:	4b05      	ldr	r3, [pc, #20]	; (800ceb4 <sys_timeout_abs+0x60>)
 800cea0:	6018      	str	r0, [r3, #0]
    return;
 800cea2:	e002      	b.n	800ceaa <sys_timeout_abs+0x56>
    timeout->next = next_timeout;
 800cea4:	6003      	str	r3, [r0, #0]
    next_timeout = timeout;
 800cea6:	4b03      	ldr	r3, [pc, #12]	; (800ceb4 <sys_timeout_abs+0x60>)
 800cea8:	6018      	str	r0, [r3, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 800ceaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        timeout->next = t->next;
 800ceac:	6022      	str	r2, [r4, #0]
        t->next = timeout;
 800ceae:	601c      	str	r4, [r3, #0]
        break;
 800ceb0:	e7fb      	b.n	800ceaa <sys_timeout_abs+0x56>
 800ceb2:	bf00      	nop
 800ceb4:	20001784 	.word	0x20001784
 800ceb8:	08017de8 	.word	0x08017de8
 800cebc:	08017e1c 	.word	0x08017e1c
 800cec0:	08015d2c 	.word	0x08015d2c

0800cec4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800cec4:	b538      	push	{r3, r4, r5, lr}
 800cec6:	4604      	mov	r4, r0
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800cec8:	6843      	ldr	r3, [r0, #4]
 800ceca:	4798      	blx	r3

  now = sys_now();
 800cecc:	f7f6 fdfe 	bl	8003acc <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ced0:	6825      	ldr	r5, [r4, #0]
 800ced2:	4b09      	ldr	r3, [pc, #36]	; (800cef8 <lwip_cyclic_timer+0x34>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ced8:	1a1a      	subs	r2, r3, r0
 800ceda:	2a00      	cmp	r2, #0
 800cedc:	db05      	blt.n	800ceea <lwip_cyclic_timer+0x26>
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800cede:	4622      	mov	r2, r4
 800cee0:	4906      	ldr	r1, [pc, #24]	; (800cefc <lwip_cyclic_timer+0x38>)
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7ff ffb6 	bl	800ce54 <sys_timeout_abs>
#endif
  }
}
 800cee8:	bd38      	pop	{r3, r4, r5, pc}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ceea:	4622      	mov	r2, r4
 800ceec:	4903      	ldr	r1, [pc, #12]	; (800cefc <lwip_cyclic_timer+0x38>)
 800ceee:	4428      	add	r0, r5
 800cef0:	f7ff ffb0 	bl	800ce54 <sys_timeout_abs>
 800cef4:	e7f8      	b.n	800cee8 <lwip_cyclic_timer+0x24>
 800cef6:	bf00      	nop
 800cef8:	20001780 	.word	0x20001780
 800cefc:	0800cec5 	.word	0x0800cec5

0800cf00 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800cf00:	b570      	push	{r4, r5, r6, lr}
 800cf02:	4604      	mov	r4, r0
 800cf04:	460d      	mov	r5, r1
 800cf06:	4616      	mov	r6, r2
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800cf08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800cf0c:	d207      	bcs.n	800cf1e <sys_timeout+0x1e>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800cf0e:	f7f6 fddd 	bl	8003acc <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800cf12:	4632      	mov	r2, r6
 800cf14:	4629      	mov	r1, r5
 800cf16:	4420      	add	r0, r4
 800cf18:	f7ff ff9c 	bl	800ce54 <sys_timeout_abs>
#endif
}
 800cf1c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800cf1e:	4b04      	ldr	r3, [pc, #16]	; (800cf30 <sys_timeout+0x30>)
 800cf20:	f240 1229 	movw	r2, #297	; 0x129
 800cf24:	4903      	ldr	r1, [pc, #12]	; (800cf34 <sys_timeout+0x34>)
 800cf26:	4804      	ldr	r0, [pc, #16]	; (800cf38 <sys_timeout+0x38>)
 800cf28:	f007 ff8c 	bl	8014e44 <iprintf>
 800cf2c:	e7ef      	b.n	800cf0e <sys_timeout+0xe>
 800cf2e:	bf00      	nop
 800cf30:	08017de8 	.word	0x08017de8
 800cf34:	08017db0 	.word	0x08017db0
 800cf38:	08015d2c 	.word	0x08015d2c

0800cf3c <tcp_timer_needed>:
{
 800cf3c:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800cf3e:	4b0a      	ldr	r3, [pc, #40]	; (800cf68 <tcp_timer_needed+0x2c>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	b953      	cbnz	r3, 800cf5a <tcp_timer_needed+0x1e>
 800cf44:	4b09      	ldr	r3, [pc, #36]	; (800cf6c <tcp_timer_needed+0x30>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	b143      	cbz	r3, 800cf5c <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800cf4a:	4b07      	ldr	r3, [pc, #28]	; (800cf68 <tcp_timer_needed+0x2c>)
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cf50:	2200      	movs	r2, #0
 800cf52:	4907      	ldr	r1, [pc, #28]	; (800cf70 <tcp_timer_needed+0x34>)
 800cf54:	20fa      	movs	r0, #250	; 0xfa
 800cf56:	f7ff ffd3 	bl	800cf00 <sys_timeout>
}
 800cf5a:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800cf5c:	4b05      	ldr	r3, [pc, #20]	; (800cf74 <tcp_timer_needed+0x38>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d1f2      	bne.n	800cf4a <tcp_timer_needed+0xe>
 800cf64:	e7f9      	b.n	800cf5a <tcp_timer_needed+0x1e>
 800cf66:	bf00      	nop
 800cf68:	20001788 	.word	0x20001788
 800cf6c:	20008610 	.word	0x20008610
 800cf70:	0800cf79 	.word	0x0800cf79
 800cf74:	20008620 	.word	0x20008620

0800cf78 <tcpip_tcp_timer>:
{
 800cf78:	b508      	push	{r3, lr}
  tcp_tmr();
 800cf7a:	f7fd f883 	bl	800a084 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800cf7e:	4b08      	ldr	r3, [pc, #32]	; (800cfa0 <tcpip_tcp_timer+0x28>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	b913      	cbnz	r3, 800cf8a <tcpip_tcp_timer+0x12>
 800cf84:	4b07      	ldr	r3, [pc, #28]	; (800cfa4 <tcpip_tcp_timer+0x2c>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	b12b      	cbz	r3, 800cf96 <tcpip_tcp_timer+0x1e>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	4906      	ldr	r1, [pc, #24]	; (800cfa8 <tcpip_tcp_timer+0x30>)
 800cf8e:	20fa      	movs	r0, #250	; 0xfa
 800cf90:	f7ff ffb6 	bl	800cf00 <sys_timeout>
}
 800cf94:	bd08      	pop	{r3, pc}
    tcpip_tcp_timer_active = 0;
 800cf96:	4b05      	ldr	r3, [pc, #20]	; (800cfac <tcpip_tcp_timer+0x34>)
 800cf98:	2200      	movs	r2, #0
 800cf9a:	601a      	str	r2, [r3, #0]
}
 800cf9c:	e7fa      	b.n	800cf94 <tcpip_tcp_timer+0x1c>
 800cf9e:	bf00      	nop
 800cfa0:	20008610 	.word	0x20008610
 800cfa4:	20008620 	.word	0x20008620
 800cfa8:	0800cf79 	.word	0x0800cf79
 800cfac:	20001788 	.word	0x20001788

0800cfb0 <sys_timeouts_init>:
{
 800cfb0:	b510      	push	{r4, lr}
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cfb2:	2401      	movs	r4, #1
 800cfb4:	e008      	b.n	800cfc8 <sys_timeouts_init+0x18>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800cfb6:	4b06      	ldr	r3, [pc, #24]	; (800cfd0 <sys_timeouts_init+0x20>)
 800cfb8:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
 800cfbc:	4905      	ldr	r1, [pc, #20]	; (800cfd4 <sys_timeouts_init+0x24>)
 800cfbe:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
 800cfc2:	f7ff ff9d 	bl	800cf00 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cfc6:	3401      	adds	r4, #1
 800cfc8:	2c08      	cmp	r4, #8
 800cfca:	d9f4      	bls.n	800cfb6 <sys_timeouts_init+0x6>
}
 800cfcc:	bd10      	pop	{r4, pc}
 800cfce:	bf00      	nop
 800cfd0:	08017d68 	.word	0x08017d68
 800cfd4:	0800cec5 	.word	0x0800cec5

0800cfd8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800cfd8:	b570      	push	{r4, r5, r6, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800cfda:	f7f6 fd77 	bl	8003acc <sys_now>
 800cfde:	4605      	mov	r5, r0
 800cfe0:	e011      	b.n	800d006 <sys_check_timeouts+0x2e>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800cfe2:	4b0e      	ldr	r3, [pc, #56]	; (800d01c <sys_check_timeouts+0x44>)
 800cfe4:	6819      	ldr	r1, [r3, #0]
    if (tmptimeout == NULL) {
 800cfe6:	b1c1      	cbz	r1, 800d01a <sys_check_timeouts+0x42>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800cfe8:	684b      	ldr	r3, [r1, #4]
 800cfea:	1aea      	subs	r2, r5, r3
 800cfec:	2a00      	cmp	r2, #0
 800cfee:	db14      	blt.n	800d01a <sys_check_timeouts+0x42>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800cff0:	6808      	ldr	r0, [r1, #0]
 800cff2:	4a0a      	ldr	r2, [pc, #40]	; (800d01c <sys_check_timeouts+0x44>)
 800cff4:	6010      	str	r0, [r2, #0]
    handler = tmptimeout->h;
 800cff6:	688c      	ldr	r4, [r1, #8]
    arg = tmptimeout->arg;
 800cff8:	68ce      	ldr	r6, [r1, #12]
    current_timeout_due_time = tmptimeout->time;
 800cffa:	4a09      	ldr	r2, [pc, #36]	; (800d020 <sys_check_timeouts+0x48>)
 800cffc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cffe:	2006      	movs	r0, #6
 800d000:	f7fa ff1a 	bl	8007e38 <memp_free>
    if (handler != NULL) {
 800d004:	b934      	cbnz	r4, 800d014 <sys_check_timeouts+0x3c>
    PBUF_CHECK_FREE_OOSEQ();
 800d006:	4b07      	ldr	r3, [pc, #28]	; (800d024 <sys_check_timeouts+0x4c>)
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d0e9      	beq.n	800cfe2 <sys_check_timeouts+0xa>
 800d00e:	f7fb faf7 	bl	8008600 <pbuf_free_ooseq>
 800d012:	e7e6      	b.n	800cfe2 <sys_check_timeouts+0xa>
      handler(arg);
 800d014:	4630      	mov	r0, r6
 800d016:	47a0      	blx	r4
 800d018:	e7f5      	b.n	800d006 <sys_check_timeouts+0x2e>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d01a:	bd70      	pop	{r4, r5, r6, pc}
 800d01c:	20001784 	.word	0x20001784
 800d020:	20001780 	.word	0x20001780
 800d024:	20008608 	.word	0x20008608

0800d028 <udp_new_port>:
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  u16_t n = 0;
 800d028:	2000      	movs	r0, #0
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d02a:	4a10      	ldr	r2, [pc, #64]	; (800d06c <udp_new_port+0x44>)
 800d02c:	8813      	ldrh	r3, [r2, #0]
 800d02e:	1c59      	adds	r1, r3, #1
 800d030:	8011      	strh	r1, [r2, #0]
 800d032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d036:	4293      	cmp	r3, r2
 800d038:	d009      	beq.n	800d04e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d03a:	4b0d      	ldr	r3, [pc, #52]	; (800d070 <udp_new_port+0x48>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	b193      	cbz	r3, 800d066 <udp_new_port+0x3e>
    if (pcb->local_port == udp_port) {
 800d040:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 800d042:	4a0a      	ldr	r2, [pc, #40]	; (800d06c <udp_new_port+0x44>)
 800d044:	8812      	ldrh	r2, [r2, #0]
 800d046:	4291      	cmp	r1, r2
 800d048:	d006      	beq.n	800d058 <udp_new_port+0x30>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d04a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d04c:	e7f7      	b.n	800d03e <udp_new_port+0x16>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d04e:	4b07      	ldr	r3, [pc, #28]	; (800d06c <udp_new_port+0x44>)
 800d050:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d054:	801a      	strh	r2, [r3, #0]
 800d056:	e7f0      	b.n	800d03a <udp_new_port+0x12>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d058:	3001      	adds	r0, #1
 800d05a:	b280      	uxth	r0, r0
 800d05c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800d060:	d3e3      	bcc.n	800d02a <udp_new_port+0x2>
        return 0;
 800d062:	2000      	movs	r0, #0
      }
      goto again;
    }
  }
  return udp_port;
}
 800d064:	4770      	bx	lr
  return udp_port;
 800d066:	4b01      	ldr	r3, [pc, #4]	; (800d06c <udp_new_port+0x44>)
 800d068:	8818      	ldrh	r0, [r3, #0]
 800d06a:	4770      	bx	lr
 800d06c:	20000016 	.word	0x20000016
 800d070:	20008628 	.word	0x20008628

0800d074 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d074:	b570      	push	{r4, r5, r6, lr}
 800d076:	460d      	mov	r5, r1
 800d078:	4616      	mov	r6, r2
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d07a:	4604      	mov	r4, r0
 800d07c:	b168      	cbz	r0, 800d09a <udp_input_local_match+0x26>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d07e:	b19d      	cbz	r5, 800d0a8 <udp_input_local_match+0x34>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d080:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800d084:	b1ba      	cbz	r2, 800d0b6 <udp_input_local_match+0x42>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d086:	4b4e      	ldr	r3, [pc, #312]	; (800d1c0 <udp_input_local_match+0x14c>)
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 800d08e:	3301      	adds	r3, #1
 800d090:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d092:	429a      	cmp	r2, r3
 800d094:	d00f      	beq.n	800d0b6 <udp_input_local_match+0x42>
    return 0;
 800d096:	2000      	movs	r0, #0
 800d098:	e016      	b.n	800d0c8 <udp_input_local_match+0x54>
  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d09a:	4b4a      	ldr	r3, [pc, #296]	; (800d1c4 <udp_input_local_match+0x150>)
 800d09c:	2287      	movs	r2, #135	; 0x87
 800d09e:	494a      	ldr	r1, [pc, #296]	; (800d1c8 <udp_input_local_match+0x154>)
 800d0a0:	484a      	ldr	r0, [pc, #296]	; (800d1cc <udp_input_local_match+0x158>)
 800d0a2:	f007 fecf 	bl	8014e44 <iprintf>
 800d0a6:	e7ea      	b.n	800d07e <udp_input_local_match+0xa>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d0a8:	4b46      	ldr	r3, [pc, #280]	; (800d1c4 <udp_input_local_match+0x150>)
 800d0aa:	2288      	movs	r2, #136	; 0x88
 800d0ac:	4948      	ldr	r1, [pc, #288]	; (800d1d0 <udp_input_local_match+0x15c>)
 800d0ae:	4847      	ldr	r0, [pc, #284]	; (800d1cc <udp_input_local_match+0x158>)
 800d0b0:	f007 fec8 	bl	8014e44 <iprintf>
 800d0b4:	e7e4      	b.n	800d080 <udp_input_local_match+0xc>
  }

  /* Dual-stack: PCBs listening to any IP type also listen to any IP address */
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
 800d0b6:	7d23      	ldrb	r3, [r4, #20]
 800d0b8:	2b2e      	cmp	r3, #46	; 0x2e
 800d0ba:	d06e      	beq.n	800d19a <udp_input_local_match+0x126>
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST_RECV */
    return 1;
  }

  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
 800d0bc:	4a40      	ldr	r2, [pc, #256]	; (800d1c0 <udp_input_local_match+0x14c>)
 800d0be:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d001      	beq.n	800d0ca <udp_input_local_match+0x56>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
        return 1;
      }
  }

  return 0;
 800d0c6:	2000      	movs	r0, #0
}
 800d0c8:	bd70      	pop	{r4, r5, r6, pc}
    if (broadcast != 0) {
 800d0ca:	b17e      	cbz	r6, 800d0ec <udp_input_local_match+0x78>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d0cc:	2c00      	cmp	r4, #0
 800d0ce:	d066      	beq.n	800d19e <udp_input_local_match+0x12a>
 800d0d0:	6823      	ldr	r3, [r4, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d065      	beq.n	800d1a2 <udp_input_local_match+0x12e>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d0d6:	4a3a      	ldr	r2, [pc, #232]	; (800d1c0 <udp_input_local_match+0x14c>)
 800d0d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d0da:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d0de:	d062      	beq.n	800d1a6 <udp_input_local_match+0x132>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d0e0:	69e9      	ldr	r1, [r5, #28]
 800d0e2:	4053      	eors	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d0e4:	420b      	tst	r3, r1
 800d0e6:	d060      	beq.n	800d1aa <udp_input_local_match+0x136>
  return 0;
 800d0e8:	2000      	movs	r0, #0
 800d0ea:	e7ed      	b.n	800d0c8 <udp_input_local_match+0x54>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d0ec:	2c00      	cmp	r4, #0
 800d0ee:	d05e      	beq.n	800d1ae <udp_input_local_match+0x13a>
 800d0f0:	2b06      	cmp	r3, #6
 800d0f2:	d00e      	beq.n	800d112 <udp_input_local_match+0x9e>
 800d0f4:	b32c      	cbz	r4, 800d142 <udp_input_local_match+0xce>
 800d0f6:	6822      	ldr	r2, [r4, #0]
 800d0f8:	bb2a      	cbnz	r2, 800d146 <udp_input_local_match+0xd2>
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	2a00      	cmp	r2, #0
 800d0fe:	d158      	bne.n	800d1b2 <udp_input_local_match+0x13e>
 800d100:	2b06      	cmp	r3, #6
 800d102:	d022      	beq.n	800d14a <udp_input_local_match+0xd6>
 800d104:	6822      	ldr	r2, [r4, #0]
 800d106:	4b2e      	ldr	r3, [pc, #184]	; (800d1c0 <udp_input_local_match+0x14c>)
 800d108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d055      	beq.n	800d1ba <udp_input_local_match+0x146>
  return 0;
 800d10e:	2000      	movs	r0, #0
 800d110:	e7da      	b.n	800d0c8 <udp_input_local_match+0x54>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d112:	b14c      	cbz	r4, 800d128 <udp_input_local_match+0xb4>
 800d114:	6822      	ldr	r2, [r4, #0]
 800d116:	b94a      	cbnz	r2, 800d12c <udp_input_local_match+0xb8>
 800d118:	6862      	ldr	r2, [r4, #4]
 800d11a:	b962      	cbnz	r2, 800d136 <udp_input_local_match+0xc2>
 800d11c:	68a2      	ldr	r2, [r4, #8]
 800d11e:	b962      	cbnz	r2, 800d13a <udp_input_local_match+0xc6>
 800d120:	68e2      	ldr	r2, [r4, #12]
 800d122:	b162      	cbz	r2, 800d13e <udp_input_local_match+0xca>
 800d124:	2200      	movs	r2, #0
 800d126:	e002      	b.n	800d12e <udp_input_local_match+0xba>
 800d128:	2201      	movs	r2, #1
 800d12a:	e000      	b.n	800d12e <udp_input_local_match+0xba>
 800d12c:	2200      	movs	r2, #0
 800d12e:	2a00      	cmp	r2, #0
 800d130:	d0e6      	beq.n	800d100 <udp_input_local_match+0x8c>
        return 1;
 800d132:	2001      	movs	r0, #1
 800d134:	e7c8      	b.n	800d0c8 <udp_input_local_match+0x54>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d136:	2200      	movs	r2, #0
 800d138:	e7f9      	b.n	800d12e <udp_input_local_match+0xba>
 800d13a:	2200      	movs	r2, #0
 800d13c:	e7f7      	b.n	800d12e <udp_input_local_match+0xba>
 800d13e:	2201      	movs	r2, #1
 800d140:	e7f5      	b.n	800d12e <udp_input_local_match+0xba>
 800d142:	2201      	movs	r2, #1
 800d144:	e7da      	b.n	800d0fc <udp_input_local_match+0x88>
 800d146:	2200      	movs	r2, #0
 800d148:	e7d8      	b.n	800d0fc <udp_input_local_match+0x88>
 800d14a:	6822      	ldr	r2, [r4, #0]
 800d14c:	4b1c      	ldr	r3, [pc, #112]	; (800d1c0 <udp_input_local_match+0x14c>)
 800d14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d150:	429a      	cmp	r2, r3
 800d152:	d003      	beq.n	800d15c <udp_input_local_match+0xe8>
 800d154:	2300      	movs	r3, #0
 800d156:	bb73      	cbnz	r3, 800d1b6 <udp_input_local_match+0x142>
  return 0;
 800d158:	2000      	movs	r0, #0
 800d15a:	e7b5      	b.n	800d0c8 <udp_input_local_match+0x54>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d15c:	6862      	ldr	r2, [r4, #4]
 800d15e:	4b18      	ldr	r3, [pc, #96]	; (800d1c0 <udp_input_local_match+0x14c>)
 800d160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d162:	429a      	cmp	r2, r3
 800d164:	d001      	beq.n	800d16a <udp_input_local_match+0xf6>
 800d166:	2300      	movs	r3, #0
 800d168:	e7f5      	b.n	800d156 <udp_input_local_match+0xe2>
 800d16a:	68a2      	ldr	r2, [r4, #8]
 800d16c:	4b14      	ldr	r3, [pc, #80]	; (800d1c0 <udp_input_local_match+0x14c>)
 800d16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d170:	429a      	cmp	r2, r3
 800d172:	d001      	beq.n	800d178 <udp_input_local_match+0x104>
 800d174:	2300      	movs	r3, #0
 800d176:	e7ee      	b.n	800d156 <udp_input_local_match+0xe2>
 800d178:	68e2      	ldr	r2, [r4, #12]
 800d17a:	4b11      	ldr	r3, [pc, #68]	; (800d1c0 <udp_input_local_match+0x14c>)
 800d17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d17e:	429a      	cmp	r2, r3
 800d180:	d001      	beq.n	800d186 <udp_input_local_match+0x112>
 800d182:	2300      	movs	r3, #0
 800d184:	e7e7      	b.n	800d156 <udp_input_local_match+0xe2>
 800d186:	7c22      	ldrb	r2, [r4, #16]
 800d188:	4b0d      	ldr	r3, [pc, #52]	; (800d1c0 <udp_input_local_match+0x14c>)
 800d18a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d18e:	429a      	cmp	r2, r3
 800d190:	d001      	beq.n	800d196 <udp_input_local_match+0x122>
 800d192:	2300      	movs	r3, #0
 800d194:	e7df      	b.n	800d156 <udp_input_local_match+0xe2>
 800d196:	2301      	movs	r3, #1
 800d198:	e7dd      	b.n	800d156 <udp_input_local_match+0xe2>
    return 1;
 800d19a:	2001      	movs	r0, #1
 800d19c:	e794      	b.n	800d0c8 <udp_input_local_match+0x54>
          return 1;
 800d19e:	2001      	movs	r0, #1
 800d1a0:	e792      	b.n	800d0c8 <udp_input_local_match+0x54>
 800d1a2:	2001      	movs	r0, #1
 800d1a4:	e790      	b.n	800d0c8 <udp_input_local_match+0x54>
 800d1a6:	2001      	movs	r0, #1
 800d1a8:	e78e      	b.n	800d0c8 <udp_input_local_match+0x54>
 800d1aa:	2001      	movs	r0, #1
 800d1ac:	e78c      	b.n	800d0c8 <udp_input_local_match+0x54>
        return 1;
 800d1ae:	2001      	movs	r0, #1
 800d1b0:	e78a      	b.n	800d0c8 <udp_input_local_match+0x54>
 800d1b2:	2001      	movs	r0, #1
 800d1b4:	e788      	b.n	800d0c8 <udp_input_local_match+0x54>
 800d1b6:	2001      	movs	r0, #1
 800d1b8:	e786      	b.n	800d0c8 <udp_input_local_match+0x54>
 800d1ba:	2001      	movs	r0, #1
 800d1bc:	e784      	b.n	800d0c8 <udp_input_local_match+0x54>
 800d1be:	bf00      	nop
 800d1c0:	20004bac 	.word	0x20004bac
 800d1c4:	08017efc 	.word	0x08017efc
 800d1c8:	08017f2c 	.word	0x08017f2c
 800d1cc:	08015d2c 	.word	0x08015d2c
 800d1d0:	08017f50 	.word	0x08017f50

0800d1d4 <udp_init>:
{
 800d1d4:	b508      	push	{r3, lr}
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d1d6:	f007 fe4d 	bl	8014e74 <rand>
 800d1da:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800d1de:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800d1e2:	4b01      	ldr	r3, [pc, #4]	; (800d1e8 <udp_init+0x14>)
 800d1e4:	8018      	strh	r0, [r3, #0]
}
 800d1e6:	bd08      	pop	{r3, pc}
 800d1e8:	20000016 	.word	0x20000016

0800d1ec <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f0:	b083      	sub	sp, #12
 800d1f2:	460f      	mov	r7, r1

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d1f4:	4681      	mov	r9, r0
 800d1f6:	b1d8      	cbz	r0, 800d230 <udp_input+0x44>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d1f8:	b30f      	cbz	r7, 800d23e <udp_input+0x52>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d1fa:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800d1fe:	2b07      	cmp	r3, #7
 800d200:	d924      	bls.n	800d24c <udp_input+0x60>
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d202:	f8d9 4004 	ldr.w	r4, [r9, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d206:	4b96      	ldr	r3, [pc, #600]	; (800d460 <udp_input+0x274>)
 800d208:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d20c:	2b06      	cmp	r3, #6
 800d20e:	d123      	bne.n	800d258 <udp_input+0x6c>
 800d210:	f04f 0800 	mov.w	r8, #0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d214:	8820      	ldrh	r0, [r4, #0]
 800d216:	f7f9 ffdb 	bl	80071d0 <lwip_htons>
 800d21a:	4683      	mov	fp, r0
  dest = lwip_ntohs(udphdr->dest);
 800d21c:	8860      	ldrh	r0, [r4, #2]
 800d21e:	f7f9 ffd7 	bl	80071d0 <lwip_htons>
 800d222:	4606      	mov	r6, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d224:	4b8f      	ldr	r3, [pc, #572]	; (800d464 <udp_input+0x278>)
 800d226:	681c      	ldr	r4, [r3, #0]
  uncon_pcb = NULL;
 800d228:	f04f 0a00 	mov.w	sl, #0
  prev = NULL;
 800d22c:	4655      	mov	r5, sl
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d22e:	e020      	b.n	800d272 <udp_input+0x86>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d230:	4b8d      	ldr	r3, [pc, #564]	; (800d468 <udp_input+0x27c>)
 800d232:	22cf      	movs	r2, #207	; 0xcf
 800d234:	498d      	ldr	r1, [pc, #564]	; (800d46c <udp_input+0x280>)
 800d236:	488e      	ldr	r0, [pc, #568]	; (800d470 <udp_input+0x284>)
 800d238:	f007 fe04 	bl	8014e44 <iprintf>
 800d23c:	e7dc      	b.n	800d1f8 <udp_input+0xc>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d23e:	4b8a      	ldr	r3, [pc, #552]	; (800d468 <udp_input+0x27c>)
 800d240:	22d0      	movs	r2, #208	; 0xd0
 800d242:	498c      	ldr	r1, [pc, #560]	; (800d474 <udp_input+0x288>)
 800d244:	488a      	ldr	r0, [pc, #552]	; (800d470 <udp_input+0x284>)
 800d246:	f007 fdfd 	bl	8014e44 <iprintf>
 800d24a:	e7d6      	b.n	800d1fa <udp_input+0xe>
    pbuf_free(p);
 800d24c:	4648      	mov	r0, r9
 800d24e:	f7fb fa81 	bl	8008754 <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d252:	b003      	add	sp, #12
 800d254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d258:	4b81      	ldr	r3, [pc, #516]	; (800d460 <udp_input+0x274>)
 800d25a:	6819      	ldr	r1, [r3, #0]
 800d25c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d25e:	f003 f8b0 	bl	80103c2 <ip4_addr_isbroadcast_u32>
 800d262:	4680      	mov	r8, r0
 800d264:	e7d6      	b.n	800d214 <udp_input+0x28>
          uncon_pcb = pcb;
 800d266:	46a2      	mov	sl, r4
      if ((pcb->remote_port == src) &&
 800d268:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 800d26a:	455b      	cmp	r3, fp
 800d26c:	d02e      	beq.n	800d2cc <udp_input+0xe0>
    prev = pcb;
 800d26e:	4625      	mov	r5, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d270:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800d272:	2c00      	cmp	r4, #0
 800d274:	d051      	beq.n	800d31a <udp_input+0x12e>
    if ((pcb->local_port == dest) &&
 800d276:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800d278:	42b3      	cmp	r3, r6
 800d27a:	d1f8      	bne.n	800d26e <udp_input+0x82>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d27c:	4642      	mov	r2, r8
 800d27e:	4639      	mov	r1, r7
 800d280:	4620      	mov	r0, r4
 800d282:	f7ff fef7 	bl	800d074 <udp_input_local_match>
    if ((pcb->local_port == dest) &&
 800d286:	2800      	cmp	r0, #0
 800d288:	d0f1      	beq.n	800d26e <udp_input+0x82>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d28a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800d28e:	f013 0f04 	tst.w	r3, #4
 800d292:	d1e9      	bne.n	800d268 <udp_input+0x7c>
        if (uncon_pcb == NULL) {
 800d294:	f1ba 0f00 	cmp.w	sl, #0
 800d298:	d0e5      	beq.n	800d266 <udp_input+0x7a>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d29a:	f1b8 0f00 	cmp.w	r8, #0
 800d29e:	d0e3      	beq.n	800d268 <udp_input+0x7c>
 800d2a0:	4b6f      	ldr	r3, [pc, #444]	; (800d460 <udp_input+0x274>)
 800d2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a8:	d1de      	bne.n	800d268 <udp_input+0x7c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d2aa:	f89a 3014 	ldrb.w	r3, [sl, #20]
 800d2ae:	b923      	cbnz	r3, 800d2ba <udp_input+0xce>
 800d2b0:	f8da 2000 	ldr.w	r2, [sl]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d0d6      	beq.n	800d268 <udp_input+0x7c>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d2ba:	7d23      	ldrb	r3, [r4, #20]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1d3      	bne.n	800d268 <udp_input+0x7c>
 800d2c0:	6822      	ldr	r2, [r4, #0]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d1cf      	bne.n	800d268 <udp_input+0x7c>
              uncon_pcb = pcb;
 800d2c8:	46a2      	mov	sl, r4
 800d2ca:	e7cd      	b.n	800d268 <udp_input+0x7c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d2cc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
      if ((pcb->remote_port == src) &&
 800d2d0:	2b06      	cmp	r3, #6
 800d2d2:	d00e      	beq.n	800d2f2 <udp_input+0x106>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d2d4:	69a2      	ldr	r2, [r4, #24]
 800d2d6:	b1ca      	cbz	r2, 800d30c <udp_input+0x120>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d2d8:	4a61      	ldr	r2, [pc, #388]	; (800d460 <udp_input+0x274>)
 800d2da:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
      if ((pcb->remote_port == src) &&
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d1c5      	bne.n	800d26e <udp_input+0x82>
 800d2e2:	2b06      	cmp	r3, #6
 800d2e4:	d036      	beq.n	800d354 <udp_input+0x168>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d2e6:	69a2      	ldr	r2, [r4, #24]
 800d2e8:	4b5d      	ldr	r3, [pc, #372]	; (800d460 <udp_input+0x274>)
 800d2ea:	695b      	ldr	r3, [r3, #20]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d1be      	bne.n	800d26e <udp_input+0x82>
 800d2f0:	e00c      	b.n	800d30c <udp_input+0x120>
 800d2f2:	69a2      	ldr	r2, [r4, #24]
 800d2f4:	b93a      	cbnz	r2, 800d306 <udp_input+0x11a>
 800d2f6:	69e2      	ldr	r2, [r4, #28]
 800d2f8:	bb32      	cbnz	r2, 800d348 <udp_input+0x15c>
 800d2fa:	6a22      	ldr	r2, [r4, #32]
 800d2fc:	bb32      	cbnz	r2, 800d34c <udp_input+0x160>
 800d2fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d300:	b332      	cbz	r2, 800d350 <udp_input+0x164>
 800d302:	2200      	movs	r2, #0
 800d304:	e000      	b.n	800d308 <udp_input+0x11c>
 800d306:	2200      	movs	r2, #0
      if ((pcb->remote_port == src) &&
 800d308:	2a00      	cmp	r2, #0
 800d30a:	d0e5      	beq.n	800d2d8 <udp_input+0xec>
        if (prev != NULL) {
 800d30c:	b12d      	cbz	r5, 800d31a <udp_input+0x12e>
          prev->next = pcb->next;
 800d30e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d310:	636b      	str	r3, [r5, #52]	; 0x34
          pcb->next = udp_pcbs;
 800d312:	4b54      	ldr	r3, [pc, #336]	; (800d464 <udp_input+0x278>)
 800d314:	681a      	ldr	r2, [r3, #0]
 800d316:	6362      	str	r2, [r4, #52]	; 0x34
          udp_pcbs = pcb;
 800d318:	601c      	str	r4, [r3, #0]
  if (pcb == NULL) {
 800d31a:	2c00      	cmp	r4, #0
 800d31c:	d043      	beq.n	800d3a6 <udp_input+0x1ba>
  if (pcb != NULL) {
 800d31e:	2c00      	cmp	r4, #0
 800d320:	d043      	beq.n	800d3aa <udp_input+0x1be>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d322:	2108      	movs	r1, #8
 800d324:	4648      	mov	r0, r9
 800d326:	f7fb f9cf 	bl	80086c8 <pbuf_remove_header>
 800d32a:	2800      	cmp	r0, #0
 800d32c:	d15a      	bne.n	800d3e4 <udp_input+0x1f8>
    if (pcb != NULL) {
 800d32e:	2c00      	cmp	r4, #0
 800d330:	d067      	beq.n	800d402 <udp_input+0x216>
      if (pcb->recv != NULL) {
 800d332:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800d334:	2d00      	cmp	r5, #0
 800d336:	d060      	beq.n	800d3fa <udp_input+0x20e>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d338:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800d33a:	f8cd b000 	str.w	fp, [sp]
 800d33e:	4b4e      	ldr	r3, [pc, #312]	; (800d478 <udp_input+0x28c>)
 800d340:	464a      	mov	r2, r9
 800d342:	4621      	mov	r1, r4
 800d344:	47a8      	blx	r5
 800d346:	e784      	b.n	800d252 <udp_input+0x66>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d348:	2200      	movs	r2, #0
 800d34a:	e7dd      	b.n	800d308 <udp_input+0x11c>
 800d34c:	2200      	movs	r2, #0
 800d34e:	e7db      	b.n	800d308 <udp_input+0x11c>
 800d350:	2201      	movs	r2, #1
 800d352:	e7d9      	b.n	800d308 <udp_input+0x11c>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d354:	69a2      	ldr	r2, [r4, #24]
 800d356:	4b42      	ldr	r3, [pc, #264]	; (800d460 <udp_input+0x274>)
 800d358:	695b      	ldr	r3, [r3, #20]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d003      	beq.n	800d366 <udp_input+0x17a>
 800d35e:	2300      	movs	r3, #0
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d360:	2b00      	cmp	r3, #0
 800d362:	d084      	beq.n	800d26e <udp_input+0x82>
 800d364:	e7d2      	b.n	800d30c <udp_input+0x120>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d366:	69e2      	ldr	r2, [r4, #28]
 800d368:	4b3d      	ldr	r3, [pc, #244]	; (800d460 <udp_input+0x274>)
 800d36a:	699b      	ldr	r3, [r3, #24]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d001      	beq.n	800d374 <udp_input+0x188>
 800d370:	2300      	movs	r3, #0
 800d372:	e7f5      	b.n	800d360 <udp_input+0x174>
 800d374:	6a22      	ldr	r2, [r4, #32]
 800d376:	4b3a      	ldr	r3, [pc, #232]	; (800d460 <udp_input+0x274>)
 800d378:	69db      	ldr	r3, [r3, #28]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d001      	beq.n	800d382 <udp_input+0x196>
 800d37e:	2300      	movs	r3, #0
 800d380:	e7ee      	b.n	800d360 <udp_input+0x174>
 800d382:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d384:	4b36      	ldr	r3, [pc, #216]	; (800d460 <udp_input+0x274>)
 800d386:	6a1b      	ldr	r3, [r3, #32]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d001      	beq.n	800d390 <udp_input+0x1a4>
 800d38c:	2300      	movs	r3, #0
 800d38e:	e7e7      	b.n	800d360 <udp_input+0x174>
 800d390:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800d394:	4b32      	ldr	r3, [pc, #200]	; (800d460 <udp_input+0x274>)
 800d396:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d001      	beq.n	800d3a2 <udp_input+0x1b6>
 800d39e:	2300      	movs	r3, #0
 800d3a0:	e7de      	b.n	800d360 <udp_input+0x174>
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	e7dc      	b.n	800d360 <udp_input+0x174>
    pcb = uncon_pcb;
 800d3a6:	4654      	mov	r4, sl
 800d3a8:	e7b9      	b.n	800d31e <udp_input+0x132>
    if (ip_current_is_v6()) {
 800d3aa:	4b2d      	ldr	r3, [pc, #180]	; (800d460 <udp_input+0x274>)
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	b17b      	cbz	r3, 800d3d0 <udp_input+0x1e4>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
 800d3b0:	4932      	ldr	r1, [pc, #200]	; (800d47c <udp_input+0x290>)
 800d3b2:	4638      	mov	r0, r7
 800d3b4:	f7fa ffe2 	bl	800837c <netif_get_ip6_addr_match>
 800d3b8:	43c3      	mvns	r3, r0
 800d3ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    if (!ip_current_is_v6()) {
 800d3be:	4a28      	ldr	r2, [pc, #160]	; (800d460 <udp_input+0x274>)
 800d3c0:	68d2      	ldr	r2, [r2, #12]
 800d3c2:	b13a      	cbz	r2, 800d3d4 <udp_input+0x1e8>
  if (for_us) {
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d1ac      	bne.n	800d322 <udp_input+0x136>
    pbuf_free(p);
 800d3c8:	4648      	mov	r0, r9
 800d3ca:	f7fb f9c3 	bl	8008754 <pbuf_free>
  return;
 800d3ce:	e740      	b.n	800d252 <udp_input+0x66>
  u8_t for_us = 0;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	e7f4      	b.n	800d3be <udp_input+0x1d2>
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	4a22      	ldr	r2, [pc, #136]	; (800d460 <udp_input+0x274>)
 800d3d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	bf14      	ite	ne
 800d3de:	2300      	movne	r3, #0
 800d3e0:	2301      	moveq	r3, #1
 800d3e2:	e7ef      	b.n	800d3c4 <udp_input+0x1d8>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d3e4:	4b20      	ldr	r3, [pc, #128]	; (800d468 <udp_input+0x27c>)
 800d3e6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d3ea:	4925      	ldr	r1, [pc, #148]	; (800d480 <udp_input+0x294>)
 800d3ec:	4820      	ldr	r0, [pc, #128]	; (800d470 <udp_input+0x284>)
 800d3ee:	f007 fd29 	bl	8014e44 <iprintf>
      pbuf_free(p);
 800d3f2:	4648      	mov	r0, r9
 800d3f4:	f7fb f9ae 	bl	8008754 <pbuf_free>
      goto end;
 800d3f8:	e72b      	b.n	800d252 <udp_input+0x66>
        pbuf_free(p);
 800d3fa:	4648      	mov	r0, r9
 800d3fc:	f7fb f9aa 	bl	8008754 <pbuf_free>
        goto end;
 800d400:	e727      	b.n	800d252 <udp_input+0x66>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d402:	f1b8 0f00 	cmp.w	r8, #0
 800d406:	d10c      	bne.n	800d422 <udp_input+0x236>
 800d408:	4b15      	ldr	r3, [pc, #84]	; (800d460 <udp_input+0x274>)
 800d40a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d40e:	2b06      	cmp	r3, #6
 800d410:	d00b      	beq.n	800d42a <udp_input+0x23e>
 800d412:	4b13      	ldr	r3, [pc, #76]	; (800d460 <udp_input+0x274>)
 800d414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d41a:	3be0      	subs	r3, #224	; 0xe0
 800d41c:	bf18      	it	ne
 800d41e:	2301      	movne	r3, #1
 800d420:	b953      	cbnz	r3, 800d438 <udp_input+0x24c>
      pbuf_free(p);
 800d422:	4648      	mov	r0, r9
 800d424:	f7fb f996 	bl	8008754 <pbuf_free>
 800d428:	e713      	b.n	800d252 <udp_input+0x66>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d42a:	4b0d      	ldr	r3, [pc, #52]	; (800d460 <udp_input+0x274>)
 800d42c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d430:	3bff      	subs	r3, #255	; 0xff
 800d432:	bf18      	it	ne
 800d434:	2301      	movne	r3, #1
 800d436:	e7f3      	b.n	800d420 <udp_input+0x234>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d438:	4c09      	ldr	r4, [pc, #36]	; (800d460 <udp_input+0x274>)
 800d43a:	8a21      	ldrh	r1, [r4, #16]
 800d43c:	3108      	adds	r1, #8
 800d43e:	b209      	sxth	r1, r1
 800d440:	4648      	mov	r0, r9
 800d442:	f7fb f981 	bl	8008748 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d446:	68e3      	ldr	r3, [r4, #12]
 800d448:	b123      	cbz	r3, 800d454 <udp_input+0x268>
 800d44a:	2104      	movs	r1, #4
 800d44c:	4648      	mov	r0, r9
 800d44e:	f003 fd5f 	bl	8010f10 <icmp6_dest_unreach>
 800d452:	e7e6      	b.n	800d422 <udp_input+0x236>
 800d454:	2103      	movs	r1, #3
 800d456:	4648      	mov	r0, r9
 800d458:	f002 fdc0 	bl	800ffdc <icmp_dest_unreach>
 800d45c:	e7e1      	b.n	800d422 <udp_input+0x236>
 800d45e:	bf00      	nop
 800d460:	20004bac 	.word	0x20004bac
 800d464:	20008628 	.word	0x20008628
 800d468:	08017efc 	.word	0x08017efc
 800d46c:	08017eac 	.word	0x08017eac
 800d470:	08015d2c 	.word	0x08015d2c
 800d474:	08017ec4 	.word	0x08017ec4
 800d478:	20004bc0 	.word	0x20004bc0
 800d47c:	20004bd8 	.word	0x20004bd8
 800d480:	08017ee0 	.word	0x08017ee0

0800d484 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d488:	b086      	sub	sp, #24
 800d48a:	4604      	mov	r4, r0
 800d48c:	4616      	mov	r6, r2

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d48e:	460d      	mov	r5, r1
 800d490:	b139      	cbz	r1, 800d4a2 <udp_bind+0x1e>
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d492:	b144      	cbz	r4, 800d4a6 <udp_bind+0x22>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d494:	4b93      	ldr	r3, [pc, #588]	; (800d6e4 <udp_bind+0x260>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	b17b      	cbz	r3, 800d4ba <udp_bind+0x36>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d49a:	42a3      	cmp	r3, r4
 800d49c:	d018      	beq.n	800d4d0 <udp_bind+0x4c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d49e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4a0:	e7fa      	b.n	800d498 <udp_bind+0x14>
    ipaddr = IP4_ADDR_ANY;
 800d4a2:	4d91      	ldr	r5, [pc, #580]	; (800d6e8 <udp_bind+0x264>)
 800d4a4:	e7f5      	b.n	800d492 <udp_bind+0xe>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d4a6:	4b91      	ldr	r3, [pc, #580]	; (800d6ec <udp_bind+0x268>)
 800d4a8:	f240 32b7 	movw	r2, #951	; 0x3b7
 800d4ac:	4990      	ldr	r1, [pc, #576]	; (800d6f0 <udp_bind+0x26c>)
 800d4ae:	4891      	ldr	r0, [pc, #580]	; (800d6f4 <udp_bind+0x270>)
 800d4b0:	f007 fcc8 	bl	8014e44 <iprintf>
 800d4b4:	f06f 000f 	mvn.w	r0, #15
 800d4b8:	e084      	b.n	800d5c4 <udp_bind+0x140>
  rebind = 0;
 800d4ba:	f04f 0800 	mov.w	r8, #0
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  /* If the given IP address should have a zone but doesn't, assign one now.
   * This is legacy support: scope-aware callers should always provide properly
   * zoned source addresses. Do the zone selection before the address-in-use
   * check below; as such we have to make a temporary copy of the address. */
  if (IP_IS_V6(ipaddr) && ip6_addr_lacks_zone(ip_2_ip6(ipaddr), IP6_UNKNOWN)) {
 800d4be:	b115      	cbz	r5, 800d4c6 <udp_bind+0x42>
 800d4c0:	7d2b      	ldrb	r3, [r5, #20]
 800d4c2:	2b06      	cmp	r3, #6
 800d4c4:	d007      	beq.n	800d4d6 <udp_bind+0x52>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800d4c6:	2e00      	cmp	r6, #0
 800d4c8:	d05b      	beq.n	800d582 <udp_bind+0xfe>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d4ca:	4b86      	ldr	r3, [pc, #536]	; (800d6e4 <udp_bind+0x260>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	e0e5      	b.n	800d69c <udp_bind+0x218>
      rebind = 1;
 800d4d0:	f04f 0801 	mov.w	r8, #1
 800d4d4:	e7f3      	b.n	800d4be <udp_bind+0x3a>
  if (IP_IS_V6(ipaddr) && ip6_addr_lacks_zone(ip_2_ip6(ipaddr), IP6_UNKNOWN)) {
 800d4d6:	7c2a      	ldrb	r2, [r5, #16]
 800d4d8:	2a00      	cmp	r2, #0
 800d4da:	d1f4      	bne.n	800d4c6 <udp_bind+0x42>
 800d4dc:	682a      	ldr	r2, [r5, #0]
 800d4de:	f24c 00ff 	movw	r0, #49407	; 0xc0ff
 800d4e2:	4010      	ands	r0, r2
 800d4e4:	f248 01fe 	movw	r1, #33022	; 0x80fe
 800d4e8:	4288      	cmp	r0, r1
 800d4ea:	d00b      	beq.n	800d504 <udp_bind+0x80>
 800d4ec:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800d4f0:	0412      	lsls	r2, r2, #16
 800d4f2:	0c12      	lsrs	r2, r2, #16
 800d4f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d4f8:	428a      	cmp	r2, r1
 800d4fa:	d003      	beq.n	800d504 <udp_bind+0x80>
 800d4fc:	f240 21ff 	movw	r1, #767	; 0x2ff
 800d500:	428a      	cmp	r2, r1
 800d502:	d1e0      	bne.n	800d4c6 <udp_bind+0x42>
    ip_addr_copy(zoned_ipaddr, *ipaddr);
 800d504:	f88d 3014 	strb.w	r3, [sp, #20]
 800d508:	7d2b      	ldrb	r3, [r5, #20]
 800d50a:	2b06      	cmp	r3, #6
 800d50c:	d023      	beq.n	800d556 <udp_bind+0xd2>
 800d50e:	682b      	ldr	r3, [r5, #0]
 800d510:	9300      	str	r3, [sp, #0]
 800d512:	2300      	movs	r3, #0
 800d514:	9303      	str	r3, [sp, #12]
 800d516:	9302      	str	r3, [sp, #8]
 800d518:	9301      	str	r3, [sp, #4]
 800d51a:	f88d 3010 	strb.w	r3, [sp, #16]
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
 800d51e:	4669      	mov	r1, sp
 800d520:	4668      	mov	r0, sp
 800d522:	f003 fd6b 	bl	8010ffc <ip6_route>
 800d526:	4602      	mov	r2, r0
 800d528:	b348      	cbz	r0, 800d57e <udp_bind+0xfa>
 800d52a:	9b00      	ldr	r3, [sp, #0]
 800d52c:	f24c 00ff 	movw	r0, #49407	; 0xc0ff
 800d530:	4018      	ands	r0, r3
 800d532:	f248 01fe 	movw	r1, #33022	; 0x80fe
 800d536:	4288      	cmp	r0, r1
 800d538:	d019      	beq.n	800d56e <udp_bind+0xea>
 800d53a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d53e:	041b      	lsls	r3, r3, #16
 800d540:	0c1b      	lsrs	r3, r3, #16
 800d542:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d546:	428b      	cmp	r3, r1
 800d548:	d011      	beq.n	800d56e <udp_bind+0xea>
 800d54a:	f240 21ff 	movw	r1, #767	; 0x2ff
 800d54e:	428b      	cmp	r3, r1
 800d550:	d00d      	beq.n	800d56e <udp_bind+0xea>
 800d552:	2300      	movs	r3, #0
 800d554:	e00f      	b.n	800d576 <udp_bind+0xf2>
    ip_addr_copy(zoned_ipaddr, *ipaddr);
 800d556:	682b      	ldr	r3, [r5, #0]
 800d558:	9300      	str	r3, [sp, #0]
 800d55a:	686b      	ldr	r3, [r5, #4]
 800d55c:	9301      	str	r3, [sp, #4]
 800d55e:	68ab      	ldr	r3, [r5, #8]
 800d560:	9302      	str	r3, [sp, #8]
 800d562:	68eb      	ldr	r3, [r5, #12]
 800d564:	9303      	str	r3, [sp, #12]
 800d566:	7c2b      	ldrb	r3, [r5, #16]
 800d568:	f88d 3010 	strb.w	r3, [sp, #16]
 800d56c:	e7d7      	b.n	800d51e <udp_bind+0x9a>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
 800d56e:	f892 30de 	ldrb.w	r3, [r2, #222]	; 0xde
 800d572:	3301      	adds	r3, #1
 800d574:	b2db      	uxtb	r3, r3
 800d576:	f88d 3010 	strb.w	r3, [sp, #16]
    ipaddr = &zoned_ipaddr;
 800d57a:	466d      	mov	r5, sp
 800d57c:	e7a3      	b.n	800d4c6 <udp_bind+0x42>
 800d57e:	466d      	mov	r5, sp
 800d580:	e7a1      	b.n	800d4c6 <udp_bind+0x42>
    port = udp_new_port();
 800d582:	f7ff fd51 	bl	800d028 <udp_new_port>
    if (port == 0) {
 800d586:	4606      	mov	r6, r0
 800d588:	2800      	cmp	r0, #0
 800d58a:	f000 80d2 	beq.w	800d732 <udp_bind+0x2ae>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d58e:	b10c      	cbz	r4, 800d594 <udp_bind+0x110>
 800d590:	7d2b      	ldrb	r3, [r5, #20]
 800d592:	7523      	strb	r3, [r4, #20]
 800d594:	b11d      	cbz	r5, 800d59e <udp_bind+0x11a>
 800d596:	7d2b      	ldrb	r3, [r5, #20]
 800d598:	2b06      	cmp	r3, #6
 800d59a:	f000 80ad 	beq.w	800d6f8 <udp_bind+0x274>
 800d59e:	2d00      	cmp	r5, #0
 800d5a0:	f000 80c5 	beq.w	800d72e <udp_bind+0x2aa>
 800d5a4:	682b      	ldr	r3, [r5, #0]
 800d5a6:	6023      	str	r3, [r4, #0]
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	60e3      	str	r3, [r4, #12]
 800d5ac:	60a3      	str	r3, [r4, #8]
 800d5ae:	6063      	str	r3, [r4, #4]
 800d5b0:	7423      	strb	r3, [r4, #16]

  pcb->local_port = port;
 800d5b2:	8766      	strh	r6, [r4, #58]	; 0x3a
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d5b4:	f1b8 0f00 	cmp.w	r8, #0
 800d5b8:	d103      	bne.n	800d5c2 <udp_bind+0x13e>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d5ba:	4b4a      	ldr	r3, [pc, #296]	; (800d6e4 <udp_bind+0x260>)
 800d5bc:	681a      	ldr	r2, [r3, #0]
 800d5be:	6362      	str	r2, [r4, #52]	; 0x34
    udp_pcbs = pcb;
 800d5c0:	601c      	str	r4, [r3, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d5c2:	2000      	movs	r0, #0
}
 800d5c4:	b006      	add	sp, #24
 800d5c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if ((ipcb->local_port == port) &&
 800d5ca:	2a06      	cmp	r2, #6
 800d5cc:	d006      	beq.n	800d5dc <udp_bind+0x158>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d5ce:	6828      	ldr	r0, [r5, #0]
 800d5d0:	681f      	ldr	r7, [r3, #0]
 800d5d2:	4287      	cmp	r7, r0
 800d5d4:	d16e      	bne.n	800d6b4 <udp_bind+0x230>
            return ERR_USE;
 800d5d6:	f06f 0007 	mvn.w	r0, #7
 800d5da:	e7f3      	b.n	800d5c4 <udp_bind+0x140>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d5dc:	6828      	ldr	r0, [r5, #0]
 800d5de:	681f      	ldr	r7, [r3, #0]
 800d5e0:	4287      	cmp	r7, r0
 800d5e2:	d005      	beq.n	800d5f0 <udp_bind+0x16c>
 800d5e4:	2000      	movs	r0, #0
          if ((ipcb->local_port == port) &&
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	d064      	beq.n	800d6b4 <udp_bind+0x230>
            return ERR_USE;
 800d5ea:	f06f 0007 	mvn.w	r0, #7
 800d5ee:	e7e9      	b.n	800d5c4 <udp_bind+0x140>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d5f0:	6868      	ldr	r0, [r5, #4]
 800d5f2:	685f      	ldr	r7, [r3, #4]
 800d5f4:	4287      	cmp	r7, r0
 800d5f6:	d001      	beq.n	800d5fc <udp_bind+0x178>
 800d5f8:	2000      	movs	r0, #0
 800d5fa:	e7f4      	b.n	800d5e6 <udp_bind+0x162>
 800d5fc:	68a8      	ldr	r0, [r5, #8]
 800d5fe:	689f      	ldr	r7, [r3, #8]
 800d600:	4287      	cmp	r7, r0
 800d602:	d001      	beq.n	800d608 <udp_bind+0x184>
 800d604:	2000      	movs	r0, #0
 800d606:	e7ee      	b.n	800d5e6 <udp_bind+0x162>
 800d608:	68e8      	ldr	r0, [r5, #12]
 800d60a:	68df      	ldr	r7, [r3, #12]
 800d60c:	4287      	cmp	r7, r0
 800d60e:	d001      	beq.n	800d614 <udp_bind+0x190>
 800d610:	2000      	movs	r0, #0
 800d612:	e7e8      	b.n	800d5e6 <udp_bind+0x162>
 800d614:	f893 c010 	ldrb.w	ip, [r3, #16]
 800d618:	7c28      	ldrb	r0, [r5, #16]
 800d61a:	4584      	cmp	ip, r0
 800d61c:	d001      	beq.n	800d622 <udp_bind+0x19e>
 800d61e:	2000      	movs	r0, #0
 800d620:	e7e1      	b.n	800d5e6 <udp_bind+0x162>
 800d622:	2001      	movs	r0, #1
 800d624:	e7df      	b.n	800d5e6 <udp_bind+0x162>
 800d626:	b14d      	cbz	r5, 800d63c <udp_bind+0x1b8>
 800d628:	6829      	ldr	r1, [r5, #0]
 800d62a:	b949      	cbnz	r1, 800d640 <udp_bind+0x1bc>
 800d62c:	6869      	ldr	r1, [r5, #4]
 800d62e:	b969      	cbnz	r1, 800d64c <udp_bind+0x1c8>
 800d630:	68a9      	ldr	r1, [r5, #8]
 800d632:	b969      	cbnz	r1, 800d650 <udp_bind+0x1cc>
 800d634:	68e9      	ldr	r1, [r5, #12]
 800d636:	b169      	cbz	r1, 800d654 <udp_bind+0x1d0>
 800d638:	2100      	movs	r1, #0
 800d63a:	e002      	b.n	800d642 <udp_bind+0x1be>
 800d63c:	2101      	movs	r1, #1
 800d63e:	e000      	b.n	800d642 <udp_bind+0x1be>
 800d640:	2100      	movs	r1, #0
 800d642:	2900      	cmp	r1, #0
 800d644:	d042      	beq.n	800d6cc <udp_bind+0x248>
            return ERR_USE;
 800d646:	f06f 0007 	mvn.w	r0, #7
 800d64a:	e7bb      	b.n	800d5c4 <udp_bind+0x140>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d64c:	2100      	movs	r1, #0
 800d64e:	e7f8      	b.n	800d642 <udp_bind+0x1be>
 800d650:	2100      	movs	r1, #0
 800d652:	e7f6      	b.n	800d642 <udp_bind+0x1be>
 800d654:	2101      	movs	r1, #1
 800d656:	e7f4      	b.n	800d642 <udp_bind+0x1be>
 800d658:	2101      	movs	r1, #1
 800d65a:	e035      	b.n	800d6c8 <udp_bind+0x244>
 800d65c:	2100      	movs	r1, #0
 800d65e:	e033      	b.n	800d6c8 <udp_bind+0x244>
              ip_addr_isany(&ipcb->local_ip))) {
 800d660:	b14b      	cbz	r3, 800d676 <udp_bind+0x1f2>
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	b94a      	cbnz	r2, 800d67a <udp_bind+0x1f6>
 800d666:	685a      	ldr	r2, [r3, #4]
 800d668:	b962      	cbnz	r2, 800d684 <udp_bind+0x200>
 800d66a:	689a      	ldr	r2, [r3, #8]
 800d66c:	b962      	cbnz	r2, 800d688 <udp_bind+0x204>
 800d66e:	68da      	ldr	r2, [r3, #12]
 800d670:	b162      	cbz	r2, 800d68c <udp_bind+0x208>
 800d672:	2200      	movs	r2, #0
 800d674:	e002      	b.n	800d67c <udp_bind+0x1f8>
 800d676:	2201      	movs	r2, #1
 800d678:	e000      	b.n	800d67c <udp_bind+0x1f8>
 800d67a:	2200      	movs	r2, #0
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d67c:	b16a      	cbz	r2, 800d69a <udp_bind+0x216>
            return ERR_USE;
 800d67e:	f06f 0007 	mvn.w	r0, #7
 800d682:	e79f      	b.n	800d5c4 <udp_bind+0x140>
              ip_addr_isany(&ipcb->local_ip))) {
 800d684:	2200      	movs	r2, #0
 800d686:	e7f9      	b.n	800d67c <udp_bind+0x1f8>
 800d688:	2200      	movs	r2, #0
 800d68a:	e7f7      	b.n	800d67c <udp_bind+0x1f8>
 800d68c:	2201      	movs	r2, #1
 800d68e:	e7f5      	b.n	800d67c <udp_bind+0x1f8>
 800d690:	2201      	movs	r2, #1
 800d692:	e000      	b.n	800d696 <udp_bind+0x212>
 800d694:	2200      	movs	r2, #0
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d696:	2a00      	cmp	r2, #0
 800d698:	d157      	bne.n	800d74a <udp_bind+0x2c6>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d69a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	f43f af76 	beq.w	800d58e <udp_bind+0x10a>
      if (pcb != ipcb) {
 800d6a2:	42a3      	cmp	r3, r4
 800d6a4:	d0f9      	beq.n	800d69a <udp_bind+0x216>
          if ((ipcb->local_port == port) &&
 800d6a6:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800d6a8:	42b2      	cmp	r2, r6
 800d6aa:	d1f6      	bne.n	800d69a <udp_bind+0x216>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d6ac:	7d1a      	ldrb	r2, [r3, #20]
 800d6ae:	7d29      	ldrb	r1, [r5, #20]
          if ((ipcb->local_port == port) &&
 800d6b0:	428a      	cmp	r2, r1
 800d6b2:	d08a      	beq.n	800d5ca <udp_bind+0x146>
 800d6b4:	2d00      	cmp	r5, #0
 800d6b6:	d03f      	beq.n	800d738 <udp_bind+0x2b4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d6b8:	2906      	cmp	r1, #6
 800d6ba:	d0b4      	beq.n	800d626 <udp_bind+0x1a2>
 800d6bc:	2d00      	cmp	r5, #0
 800d6be:	d0cb      	beq.n	800d658 <udp_bind+0x1d4>
 800d6c0:	6829      	ldr	r1, [r5, #0]
 800d6c2:	2900      	cmp	r1, #0
 800d6c4:	d1ca      	bne.n	800d65c <udp_bind+0x1d8>
 800d6c6:	2101      	movs	r1, #1
 800d6c8:	2900      	cmp	r1, #0
 800d6ca:	d138      	bne.n	800d73e <udp_bind+0x2ba>
          if ((ipcb->local_port == port) &&
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d039      	beq.n	800d744 <udp_bind+0x2c0>
              ip_addr_isany(&ipcb->local_ip))) {
 800d6d0:	2a06      	cmp	r2, #6
 800d6d2:	d0c5      	beq.n	800d660 <udp_bind+0x1dc>
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d0db      	beq.n	800d690 <udp_bind+0x20c>
 800d6d8:	681a      	ldr	r2, [r3, #0]
 800d6da:	2a00      	cmp	r2, #0
 800d6dc:	d1da      	bne.n	800d694 <udp_bind+0x210>
 800d6de:	2201      	movs	r2, #1
 800d6e0:	e7d9      	b.n	800d696 <udp_bind+0x212>
 800d6e2:	bf00      	nop
 800d6e4:	20008628 	.word	0x20008628
 800d6e8:	080187ec 	.word	0x080187ec
 800d6ec:	08017efc 	.word	0x08017efc
 800d6f0:	08017e5c 	.word	0x08017e5c
 800d6f4:	08015d2c 	.word	0x08015d2c
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d6f8:	462b      	mov	r3, r5
 800d6fa:	b175      	cbz	r5, 800d71a <udp_bind+0x296>
 800d6fc:	682a      	ldr	r2, [r5, #0]
 800d6fe:	6022      	str	r2, [r4, #0]
 800d700:	b16b      	cbz	r3, 800d71e <udp_bind+0x29a>
 800d702:	686a      	ldr	r2, [r5, #4]
 800d704:	6062      	str	r2, [r4, #4]
 800d706:	b163      	cbz	r3, 800d722 <udp_bind+0x29e>
 800d708:	68aa      	ldr	r2, [r5, #8]
 800d70a:	60a2      	str	r2, [r4, #8]
 800d70c:	b15b      	cbz	r3, 800d726 <udp_bind+0x2a2>
 800d70e:	68ea      	ldr	r2, [r5, #12]
 800d710:	60e2      	str	r2, [r4, #12]
 800d712:	b153      	cbz	r3, 800d72a <udp_bind+0x2a6>
 800d714:	7c2b      	ldrb	r3, [r5, #16]
 800d716:	7423      	strb	r3, [r4, #16]
 800d718:	e74b      	b.n	800d5b2 <udp_bind+0x12e>
 800d71a:	2200      	movs	r2, #0
 800d71c:	e7ef      	b.n	800d6fe <udp_bind+0x27a>
 800d71e:	2200      	movs	r2, #0
 800d720:	e7f0      	b.n	800d704 <udp_bind+0x280>
 800d722:	2200      	movs	r2, #0
 800d724:	e7f1      	b.n	800d70a <udp_bind+0x286>
 800d726:	2200      	movs	r2, #0
 800d728:	e7f2      	b.n	800d710 <udp_bind+0x28c>
 800d72a:	2300      	movs	r3, #0
 800d72c:	e7f3      	b.n	800d716 <udp_bind+0x292>
 800d72e:	2300      	movs	r3, #0
 800d730:	e739      	b.n	800d5a6 <udp_bind+0x122>
      return ERR_USE;
 800d732:	f06f 0007 	mvn.w	r0, #7
 800d736:	e745      	b.n	800d5c4 <udp_bind+0x140>
            return ERR_USE;
 800d738:	f06f 0007 	mvn.w	r0, #7
 800d73c:	e742      	b.n	800d5c4 <udp_bind+0x140>
 800d73e:	f06f 0007 	mvn.w	r0, #7
 800d742:	e73f      	b.n	800d5c4 <udp_bind+0x140>
 800d744:	f06f 0007 	mvn.w	r0, #7
 800d748:	e73c      	b.n	800d5c4 <udp_bind+0x140>
 800d74a:	f06f 0007 	mvn.w	r0, #7
 800d74e:	e739      	b.n	800d5c4 <udp_bind+0x140>

0800d750 <udp_sendto_if_src>:
{
 800d750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d754:	b085      	sub	sp, #20
 800d756:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800d75a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800d75e:	2800      	cmp	r0, #0
 800d760:	f000 8086 	beq.w	800d870 <udp_sendto_if_src+0x120>
 800d764:	460f      	mov	r7, r1
 800d766:	4615      	mov	r5, r2
 800d768:	469b      	mov	fp, r3
 800d76a:	4604      	mov	r4, r0
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d76c:	2900      	cmp	r1, #0
 800d76e:	f000 8089 	beq.w	800d884 <udp_sendto_if_src+0x134>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d772:	2a00      	cmp	r2, #0
 800d774:	f000 8090 	beq.w	800d898 <udp_sendto_if_src+0x148>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800d778:	f1b9 0f00 	cmp.w	r9, #0
 800d77c:	f000 8096 	beq.w	800d8ac <udp_sendto_if_src+0x15c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800d780:	f1ba 0f00 	cmp.w	sl, #0
 800d784:	f000 809c 	beq.w	800d8c0 <udp_sendto_if_src+0x170>
  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800d788:	7d03      	ldrb	r3, [r0, #20]
 800d78a:	2b2e      	cmp	r3, #46	; 0x2e
 800d78c:	d008      	beq.n	800d7a0 <udp_sendto_if_src+0x50>
 800d78e:	f899 2014 	ldrb.w	r2, [r9, #20]
 800d792:	4293      	cmp	r3, r2
 800d794:	f040 80dd 	bne.w	800d952 <udp_sendto_if_src+0x202>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800d798:	7d2a      	ldrb	r2, [r5, #20]
  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800d79a:	4293      	cmp	r3, r2
 800d79c:	f040 80dc 	bne.w	800d958 <udp_sendto_if_src+0x208>
  if (pcb->local_port == 0) {
 800d7a0:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 800d7a2:	2a00      	cmp	r2, #0
 800d7a4:	f000 8096 	beq.w	800d8d4 <udp_sendto_if_src+0x184>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800d7a8:	893a      	ldrh	r2, [r7, #8]
 800d7aa:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	f200 80d5 	bhi.w	800d95e <udp_sendto_if_src+0x20e>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800d7b4:	2108      	movs	r1, #8
 800d7b6:	4638      	mov	r0, r7
 800d7b8:	f7fa ff7b 	bl	80086b2 <pbuf_add_header>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	f040 8092 	bne.w	800d8e6 <udp_sendto_if_src+0x196>
    q = p;
 800d7c2:	463e      	mov	r6, r7
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d7c4:	8973      	ldrh	r3, [r6, #10]
 800d7c6:	2b07      	cmp	r3, #7
 800d7c8:	f240 809e 	bls.w	800d908 <udp_sendto_if_src+0x1b8>
  udphdr = (struct udp_hdr *)q->payload;
 800d7cc:	f8d6 8004 	ldr.w	r8, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800d7d0:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
 800d7d2:	f7f9 fcfd 	bl	80071d0 <lwip_htons>
 800d7d6:	f8a8 0000 	strh.w	r0, [r8]
  udphdr->dest = lwip_htons(dst_port);
 800d7da:	4658      	mov	r0, fp
 800d7dc:	f7f9 fcf8 	bl	80071d0 <lwip_htons>
 800d7e0:	f8a8 0002 	strh.w	r0, [r8, #2]
  udphdr->chksum = 0x0000;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	f888 3006 	strb.w	r3, [r8, #6]
 800d7ea:	f888 3007 	strb.w	r3, [r8, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 800d7ee:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800d7f2:	f013 0f08 	tst.w	r3, #8
 800d7f6:	d00f      	beq.n	800d818 <udp_sendto_if_src+0xc8>
 800d7f8:	7d2b      	ldrb	r3, [r5, #20]
 800d7fa:	2b06      	cmp	r3, #6
 800d7fc:	f000 808c 	beq.w	800d918 <udp_sendto_if_src+0x1c8>
 800d800:	682b      	ldr	r3, [r5, #0]
 800d802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d806:	2be0      	cmp	r3, #224	; 0xe0
 800d808:	bf14      	ite	ne
 800d80a:	2300      	movne	r3, #0
 800d80c:	2301      	moveq	r3, #1
 800d80e:	b11b      	cbz	r3, 800d818 <udp_sendto_if_src+0xc8>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 800d810:	7b73      	ldrb	r3, [r6, #13]
 800d812:	f043 0304 	orr.w	r3, r3, #4
 800d816:	7373      	strb	r3, [r6, #13]
    udphdr->len = lwip_htons(q->tot_len);
 800d818:	8930      	ldrh	r0, [r6, #8]
 800d81a:	f7f9 fcd9 	bl	80071d0 <lwip_htons>
 800d81e:	f8a8 0004 	strh.w	r0, [r8, #4]
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 800d822:	7d2b      	ldrb	r3, [r5, #20]
 800d824:	2b06      	cmp	r3, #6
 800d826:	d07d      	beq.n	800d924 <udp_sendto_if_src+0x1d4>
 800d828:	682b      	ldr	r3, [r5, #0]
 800d82a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d82e:	2be0      	cmp	r3, #224	; 0xe0
 800d830:	bf14      	ite	ne
 800d832:	2300      	movne	r3, #0
 800d834:	2301      	moveq	r3, #1
 800d836:	2b00      	cmp	r3, #0
 800d838:	d07a      	beq.n	800d930 <udp_sendto_if_src+0x1e0>
 800d83a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d83e:	7d2a      	ldrb	r2, [r5, #20]
 800d840:	2a06      	cmp	r2, #6
 800d842:	d078      	beq.n	800d936 <udp_sendto_if_src+0x1e6>
 800d844:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 800d848:	f8cd a008 	str.w	sl, [sp, #8]
 800d84c:	2111      	movs	r1, #17
 800d84e:	9101      	str	r1, [sp, #4]
 800d850:	9200      	str	r2, [sp, #0]
 800d852:	462a      	mov	r2, r5
 800d854:	4649      	mov	r1, r9
 800d856:	4630      	mov	r0, r6
 800d858:	f002 fd1a 	bl	8010290 <ip4_output_if_src>
 800d85c:	4680      	mov	r8, r0
  if (q != p) {
 800d85e:	42be      	cmp	r6, r7
 800d860:	d002      	beq.n	800d868 <udp_sendto_if_src+0x118>
    pbuf_free(q);
 800d862:	4630      	mov	r0, r6
 800d864:	f7fa ff76 	bl	8008754 <pbuf_free>
}
 800d868:	4640      	mov	r0, r8
 800d86a:	b005      	add	sp, #20
 800d86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800d870:	4b3e      	ldr	r3, [pc, #248]	; (800d96c <udp_sendto_if_src+0x21c>)
 800d872:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d876:	493e      	ldr	r1, [pc, #248]	; (800d970 <udp_sendto_if_src+0x220>)
 800d878:	483e      	ldr	r0, [pc, #248]	; (800d974 <udp_sendto_if_src+0x224>)
 800d87a:	f007 fae3 	bl	8014e44 <iprintf>
 800d87e:	f06f 080f 	mvn.w	r8, #15
 800d882:	e7f1      	b.n	800d868 <udp_sendto_if_src+0x118>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800d884:	4b39      	ldr	r3, [pc, #228]	; (800d96c <udp_sendto_if_src+0x21c>)
 800d886:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d88a:	493b      	ldr	r1, [pc, #236]	; (800d978 <udp_sendto_if_src+0x228>)
 800d88c:	4839      	ldr	r0, [pc, #228]	; (800d974 <udp_sendto_if_src+0x224>)
 800d88e:	f007 fad9 	bl	8014e44 <iprintf>
 800d892:	f06f 080f 	mvn.w	r8, #15
 800d896:	e7e7      	b.n	800d868 <udp_sendto_if_src+0x118>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d898:	4b34      	ldr	r3, [pc, #208]	; (800d96c <udp_sendto_if_src+0x21c>)
 800d89a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800d89e:	4937      	ldr	r1, [pc, #220]	; (800d97c <udp_sendto_if_src+0x22c>)
 800d8a0:	4834      	ldr	r0, [pc, #208]	; (800d974 <udp_sendto_if_src+0x224>)
 800d8a2:	f007 facf 	bl	8014e44 <iprintf>
 800d8a6:	f06f 080f 	mvn.w	r8, #15
 800d8aa:	e7dd      	b.n	800d868 <udp_sendto_if_src+0x118>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800d8ac:	4b2f      	ldr	r3, [pc, #188]	; (800d96c <udp_sendto_if_src+0x21c>)
 800d8ae:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800d8b2:	4933      	ldr	r1, [pc, #204]	; (800d980 <udp_sendto_if_src+0x230>)
 800d8b4:	482f      	ldr	r0, [pc, #188]	; (800d974 <udp_sendto_if_src+0x224>)
 800d8b6:	f007 fac5 	bl	8014e44 <iprintf>
 800d8ba:	f06f 080f 	mvn.w	r8, #15
 800d8be:	e7d3      	b.n	800d868 <udp_sendto_if_src+0x118>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800d8c0:	4b2a      	ldr	r3, [pc, #168]	; (800d96c <udp_sendto_if_src+0x21c>)
 800d8c2:	f240 22d5 	movw	r2, #725	; 0x2d5
 800d8c6:	492f      	ldr	r1, [pc, #188]	; (800d984 <udp_sendto_if_src+0x234>)
 800d8c8:	482a      	ldr	r0, [pc, #168]	; (800d974 <udp_sendto_if_src+0x224>)
 800d8ca:	f007 fabb 	bl	8014e44 <iprintf>
 800d8ce:	f06f 080f 	mvn.w	r8, #15
 800d8d2:	e7c9      	b.n	800d868 <udp_sendto_if_src+0x118>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d8d4:	4621      	mov	r1, r4
 800d8d6:	4620      	mov	r0, r4
 800d8d8:	f7ff fdd4 	bl	800d484 <udp_bind>
    if (err != ERR_OK) {
 800d8dc:	4680      	mov	r8, r0
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	f43f af62 	beq.w	800d7a8 <udp_sendto_if_src+0x58>
 800d8e4:	e7c0      	b.n	800d868 <udp_sendto_if_src+0x118>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d8e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d8ea:	2108      	movs	r1, #8
 800d8ec:	2036      	movs	r0, #54	; 0x36
 800d8ee:	f7fa ff93 	bl	8008818 <pbuf_alloc>
    if (q == NULL) {
 800d8f2:	4606      	mov	r6, r0
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	d035      	beq.n	800d964 <udp_sendto_if_src+0x214>
    if (p->tot_len != 0) {
 800d8f8:	893b      	ldrh	r3, [r7, #8]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	f43f af62 	beq.w	800d7c4 <udp_sendto_if_src+0x74>
      pbuf_chain(q, p);
 800d900:	4639      	mov	r1, r7
 800d902:	f7fb f8e7 	bl	8008ad4 <pbuf_chain>
 800d906:	e75d      	b.n	800d7c4 <udp_sendto_if_src+0x74>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d908:	4b18      	ldr	r3, [pc, #96]	; (800d96c <udp_sendto_if_src+0x21c>)
 800d90a:	f240 320e 	movw	r2, #782	; 0x30e
 800d90e:	491e      	ldr	r1, [pc, #120]	; (800d988 <udp_sendto_if_src+0x238>)
 800d910:	4818      	ldr	r0, [pc, #96]	; (800d974 <udp_sendto_if_src+0x224>)
 800d912:	f007 fa97 	bl	8014e44 <iprintf>
 800d916:	e759      	b.n	800d7cc <udp_sendto_if_src+0x7c>
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 800d918:	782b      	ldrb	r3, [r5, #0]
 800d91a:	2bff      	cmp	r3, #255	; 0xff
 800d91c:	bf14      	ite	ne
 800d91e:	2300      	movne	r3, #0
 800d920:	2301      	moveq	r3, #1
 800d922:	e774      	b.n	800d80e <udp_sendto_if_src+0xbe>
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 800d924:	782b      	ldrb	r3, [r5, #0]
 800d926:	2bff      	cmp	r3, #255	; 0xff
 800d928:	bf14      	ite	ne
 800d92a:	2300      	movne	r3, #0
 800d92c:	2301      	moveq	r3, #1
 800d92e:	e782      	b.n	800d836 <udp_sendto_if_src+0xe6>
 800d930:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800d934:	e783      	b.n	800d83e <udp_sendto_if_src+0xee>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d936:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 800d93a:	f8cd a008 	str.w	sl, [sp, #8]
 800d93e:	2111      	movs	r1, #17
 800d940:	9101      	str	r1, [sp, #4]
 800d942:	9200      	str	r2, [sp, #0]
 800d944:	462a      	mov	r2, r5
 800d946:	4649      	mov	r1, r9
 800d948:	4630      	mov	r0, r6
 800d94a:	f004 f811 	bl	8011970 <ip6_output_if_src>
 800d94e:	4680      	mov	r8, r0
 800d950:	e785      	b.n	800d85e <udp_sendto_if_src+0x10e>
    return ERR_VAL;
 800d952:	f06f 0805 	mvn.w	r8, #5
 800d956:	e787      	b.n	800d868 <udp_sendto_if_src+0x118>
 800d958:	f06f 0805 	mvn.w	r8, #5
 800d95c:	e784      	b.n	800d868 <udp_sendto_if_src+0x118>
    return ERR_MEM;
 800d95e:	f04f 38ff 	mov.w	r8, #4294967295
 800d962:	e781      	b.n	800d868 <udp_sendto_if_src+0x118>
      return ERR_MEM;
 800d964:	f04f 38ff 	mov.w	r8, #4294967295
 800d968:	e77e      	b.n	800d868 <udp_sendto_if_src+0x118>
 800d96a:	bf00      	nop
 800d96c:	08017efc 	.word	0x08017efc
 800d970:	08018070 	.word	0x08018070
 800d974:	08015d2c 	.word	0x08015d2c
 800d978:	08018090 	.word	0x08018090
 800d97c:	080180b0 	.word	0x080180b0
 800d980:	080180d4 	.word	0x080180d4
 800d984:	080180f8 	.word	0x080180f8
 800d988:	0801811c 	.word	0x0801811c

0800d98c <udp_sendto_if>:
{
 800d98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d990:	b082      	sub	sp, #8
 800d992:	9e08      	ldr	r6, [sp, #32]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800d994:	b1f0      	cbz	r0, 800d9d4 <udp_sendto_if+0x48>
 800d996:	460f      	mov	r7, r1
 800d998:	4615      	mov	r5, r2
 800d99a:	4698      	mov	r8, r3
 800d99c:	4604      	mov	r4, r0
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800d99e:	b319      	cbz	r1, 800d9e8 <udp_sendto_if+0x5c>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d9a0:	b362      	cbz	r2, 800d9fc <udp_sendto_if+0x70>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800d9a2:	2e00      	cmp	r6, #0
 800d9a4:	d034      	beq.n	800da10 <udp_sendto_if+0x84>
  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800d9a6:	7d03      	ldrb	r3, [r0, #20]
 800d9a8:	2b2e      	cmp	r3, #46	; 0x2e
 800d9aa:	d002      	beq.n	800d9b2 <udp_sendto_if+0x26>
 800d9ac:	7d12      	ldrb	r2, [r2, #20]
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d161      	bne.n	800da76 <udp_sendto_if+0xea>
  if (IP_IS_V6(dst_ip)) {
 800d9b2:	7d2b      	ldrb	r3, [r5, #20]
 800d9b4:	2b06      	cmp	r3, #6
 800d9b6:	d035      	beq.n	800da24 <udp_sendto_if+0x98>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d9b8:	2c00      	cmp	r4, #0
 800d9ba:	d050      	beq.n	800da5e <udp_sendto_if+0xd2>
 800d9bc:	6823      	ldr	r3, [r4, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d04d      	beq.n	800da5e <udp_sendto_if+0xd2>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d9c2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d9c6:	2ae0      	cmp	r2, #224	; 0xe0
 800d9c8:	d049      	beq.n	800da5e <udp_sendto_if+0xd2>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d9ca:	6872      	ldr	r2, [r6, #4]
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d158      	bne.n	800da82 <udp_sendto_if+0xf6>
      src_ip = &pcb->local_ip;
 800d9d0:	4623      	mov	r3, r4
 800d9d2:	e045      	b.n	800da60 <udp_sendto_if+0xd4>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800d9d4:	4b2c      	ldr	r3, [pc, #176]	; (800da88 <udp_sendto_if+0xfc>)
 800d9d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d9da:	492c      	ldr	r1, [pc, #176]	; (800da8c <udp_sendto_if+0x100>)
 800d9dc:	482c      	ldr	r0, [pc, #176]	; (800da90 <udp_sendto_if+0x104>)
 800d9de:	f007 fa31 	bl	8014e44 <iprintf>
 800d9e2:	f06f 000f 	mvn.w	r0, #15
 800d9e6:	e043      	b.n	800da70 <udp_sendto_if+0xe4>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800d9e8:	4b27      	ldr	r3, [pc, #156]	; (800da88 <udp_sendto_if+0xfc>)
 800d9ea:	f240 2281 	movw	r2, #641	; 0x281
 800d9ee:	4929      	ldr	r1, [pc, #164]	; (800da94 <udp_sendto_if+0x108>)
 800d9f0:	4827      	ldr	r0, [pc, #156]	; (800da90 <udp_sendto_if+0x104>)
 800d9f2:	f007 fa27 	bl	8014e44 <iprintf>
 800d9f6:	f06f 000f 	mvn.w	r0, #15
 800d9fa:	e039      	b.n	800da70 <udp_sendto_if+0xe4>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d9fc:	4b22      	ldr	r3, [pc, #136]	; (800da88 <udp_sendto_if+0xfc>)
 800d9fe:	f240 2282 	movw	r2, #642	; 0x282
 800da02:	4925      	ldr	r1, [pc, #148]	; (800da98 <udp_sendto_if+0x10c>)
 800da04:	4822      	ldr	r0, [pc, #136]	; (800da90 <udp_sendto_if+0x104>)
 800da06:	f007 fa1d 	bl	8014e44 <iprintf>
 800da0a:	f06f 000f 	mvn.w	r0, #15
 800da0e:	e02f      	b.n	800da70 <udp_sendto_if+0xe4>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800da10:	4b1d      	ldr	r3, [pc, #116]	; (800da88 <udp_sendto_if+0xfc>)
 800da12:	f240 2283 	movw	r2, #643	; 0x283
 800da16:	4921      	ldr	r1, [pc, #132]	; (800da9c <udp_sendto_if+0x110>)
 800da18:	481d      	ldr	r0, [pc, #116]	; (800da90 <udp_sendto_if+0x104>)
 800da1a:	f007 fa13 	bl	8014e44 <iprintf>
 800da1e:	f06f 000f 	mvn.w	r0, #15
 800da22:	e025      	b.n	800da70 <udp_sendto_if+0xe4>
    if (ip6_addr_isany(ip_2_ip6(&pcb->local_ip)) ||
 800da24:	b154      	cbz	r4, 800da3c <udp_sendto_if+0xb0>
 800da26:	6823      	ldr	r3, [r4, #0]
 800da28:	b92b      	cbnz	r3, 800da36 <udp_sendto_if+0xaa>
 800da2a:	6862      	ldr	r2, [r4, #4]
 800da2c:	b91a      	cbnz	r2, 800da36 <udp_sendto_if+0xaa>
 800da2e:	68a2      	ldr	r2, [r4, #8]
 800da30:	b90a      	cbnz	r2, 800da36 <udp_sendto_if+0xaa>
 800da32:	68e2      	ldr	r2, [r4, #12]
 800da34:	b112      	cbz	r2, 800da3c <udp_sendto_if+0xb0>
        ip6_addr_ismulticast(ip_2_ip6(&pcb->local_ip))) {
 800da36:	b2db      	uxtb	r3, r3
    if (ip6_addr_isany(ip_2_ip6(&pcb->local_ip)) ||
 800da38:	2bff      	cmp	r3, #255	; 0xff
 800da3a:	d108      	bne.n	800da4e <udp_sendto_if+0xc2>
      src_ip = ip6_select_source_address(netif, ip_2_ip6(dst_ip));
 800da3c:	4629      	mov	r1, r5
 800da3e:	4630      	mov	r0, r6
 800da40:	f003 fc2c 	bl	801129c <ip6_select_source_address>
      if (src_ip == NULL) {
 800da44:	4603      	mov	r3, r0
 800da46:	b958      	cbnz	r0, 800da60 <udp_sendto_if+0xd4>
        return ERR_RTE;
 800da48:	f06f 0003 	mvn.w	r0, #3
 800da4c:	e010      	b.n	800da70 <udp_sendto_if+0xe4>
      if (netif_get_ip6_addr_match(netif, ip_2_ip6(&pcb->local_ip)) < 0) {
 800da4e:	4621      	mov	r1, r4
 800da50:	4630      	mov	r0, r6
 800da52:	f7fa fc93 	bl	800837c <netif_get_ip6_addr_match>
 800da56:	2800      	cmp	r0, #0
 800da58:	db10      	blt.n	800da7c <udp_sendto_if+0xf0>
      src_ip = &pcb->local_ip;
 800da5a:	4623      	mov	r3, r4
 800da5c:	e000      	b.n	800da60 <udp_sendto_if+0xd4>
      src_ip = netif_ip_addr4(netif);
 800da5e:	1d33      	adds	r3, r6, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800da60:	9301      	str	r3, [sp, #4]
 800da62:	9600      	str	r6, [sp, #0]
 800da64:	4643      	mov	r3, r8
 800da66:	462a      	mov	r2, r5
 800da68:	4639      	mov	r1, r7
 800da6a:	4620      	mov	r0, r4
 800da6c:	f7ff fe70 	bl	800d750 <udp_sendto_if_src>
}
 800da70:	b002      	add	sp, #8
 800da72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_VAL;
 800da76:	f06f 0005 	mvn.w	r0, #5
 800da7a:	e7f9      	b.n	800da70 <udp_sendto_if+0xe4>
        return ERR_RTE;
 800da7c:	f06f 0003 	mvn.w	r0, #3
 800da80:	e7f6      	b.n	800da70 <udp_sendto_if+0xe4>
        return ERR_RTE;
 800da82:	f06f 0003 	mvn.w	r0, #3
 800da86:	e7f3      	b.n	800da70 <udp_sendto_if+0xe4>
 800da88:	08017efc 	.word	0x08017efc
 800da8c:	08017ff8 	.word	0x08017ff8
 800da90:	08015d2c 	.word	0x08015d2c
 800da94:	08018014 	.word	0x08018014
 800da98:	08018030 	.word	0x08018030
 800da9c:	08018050 	.word	0x08018050

0800daa0 <udp_sendto>:
{
 800daa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daa2:	b083      	sub	sp, #12
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800daa4:	2800      	cmp	r0, #0
 800daa6:	d030      	beq.n	800db0a <udp_sendto+0x6a>
 800daa8:	460e      	mov	r6, r1
 800daaa:	4614      	mov	r4, r2
 800daac:	461f      	mov	r7, r3
 800daae:	4605      	mov	r5, r0
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800dab0:	2900      	cmp	r1, #0
 800dab2:	d034      	beq.n	800db1e <udp_sendto+0x7e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800dab4:	2a00      	cmp	r2, #0
 800dab6:	d03c      	beq.n	800db32 <udp_sendto+0x92>
  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800dab8:	7d03      	ldrb	r3, [r0, #20]
 800daba:	2b2e      	cmp	r3, #46	; 0x2e
 800dabc:	d002      	beq.n	800dac4 <udp_sendto+0x24>
 800dabe:	7d12      	ldrb	r2, [r2, #20]
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d161      	bne.n	800db88 <udp_sendto+0xe8>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800dac4:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 800dac8:	2800      	cmp	r0, #0
 800daca:	d13c      	bne.n	800db46 <udp_sendto+0xa6>
    if (ip_addr_ismulticast(dst_ip)) {
 800dacc:	7d23      	ldrb	r3, [r4, #20]
 800dace:	2b06      	cmp	r3, #6
 800dad0:	d03c      	beq.n	800db4c <udp_sendto+0xac>
 800dad2:	6823      	ldr	r3, [r4, #0]
 800dad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dad8:	2be0      	cmp	r3, #224	; 0xe0
 800dada:	bf14      	ite	ne
 800dadc:	2300      	movne	r3, #0
 800dade:	2301      	moveq	r3, #1
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d03c      	beq.n	800db5e <udp_sendto+0xbe>
      if (pcb->mcast_ifindex != NETIF_NO_INDEX) {
 800dae4:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
 800dae8:	2800      	cmp	r0, #0
 800daea:	d135      	bne.n	800db58 <udp_sendto+0xb8>
        if (IP_IS_V4(dst_ip))
 800daec:	7d23      	ldrb	r3, [r4, #20]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d135      	bne.n	800db5e <udp_sendto+0xbe>
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 800daf2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d032      	beq.n	800db5e <udp_sendto+0xbe>
              !ip4_addr_cmp(&pcb->mcast_ip4, IP4_ADDR_BROADCAST)) {
 800daf8:	4a26      	ldr	r2, [pc, #152]	; (800db94 <udp_sendto+0xf4>)
 800dafa:	6812      	ldr	r2, [r2, #0]
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d02e      	beq.n	800db5e <udp_sendto+0xbe>
            netif = ip4_route_src(ip_2_ip4(&pcb->local_ip), &pcb->mcast_ip4);
 800db00:	f105 0040 	add.w	r0, r5, #64	; 0x40
 800db04:	f002 fa92 	bl	801002c <ip4_route>
 800db08:	e028      	b.n	800db5c <udp_sendto+0xbc>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800db0a:	4b23      	ldr	r3, [pc, #140]	; (800db98 <udp_sendto+0xf8>)
 800db0c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800db10:	4922      	ldr	r1, [pc, #136]	; (800db9c <udp_sendto+0xfc>)
 800db12:	4823      	ldr	r0, [pc, #140]	; (800dba0 <udp_sendto+0x100>)
 800db14:	f007 f996 	bl	8014e44 <iprintf>
 800db18:	f06f 000f 	mvn.w	r0, #15
 800db1c:	e02d      	b.n	800db7a <udp_sendto+0xda>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800db1e:	4b1e      	ldr	r3, [pc, #120]	; (800db98 <udp_sendto+0xf8>)
 800db20:	f240 2219 	movw	r2, #537	; 0x219
 800db24:	491f      	ldr	r1, [pc, #124]	; (800dba4 <udp_sendto+0x104>)
 800db26:	481e      	ldr	r0, [pc, #120]	; (800dba0 <udp_sendto+0x100>)
 800db28:	f007 f98c 	bl	8014e44 <iprintf>
 800db2c:	f06f 000f 	mvn.w	r0, #15
 800db30:	e023      	b.n	800db7a <udp_sendto+0xda>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800db32:	4b19      	ldr	r3, [pc, #100]	; (800db98 <udp_sendto+0xf8>)
 800db34:	f240 221a 	movw	r2, #538	; 0x21a
 800db38:	491b      	ldr	r1, [pc, #108]	; (800dba8 <udp_sendto+0x108>)
 800db3a:	4819      	ldr	r0, [pc, #100]	; (800dba0 <udp_sendto+0x100>)
 800db3c:	f007 f982 	bl	8014e44 <iprintf>
 800db40:	f06f 000f 	mvn.w	r0, #15
 800db44:	e019      	b.n	800db7a <udp_sendto+0xda>
    netif = netif_get_by_index(pcb->netif_idx);
 800db46:	f7fa fce7 	bl	8008518 <netif_get_by_index>
 800db4a:	e00e      	b.n	800db6a <udp_sendto+0xca>
    if (ip_addr_ismulticast(dst_ip)) {
 800db4c:	7823      	ldrb	r3, [r4, #0]
 800db4e:	2bff      	cmp	r3, #255	; 0xff
 800db50:	bf14      	ite	ne
 800db52:	2300      	movne	r3, #0
 800db54:	2301      	moveq	r3, #1
 800db56:	e7c3      	b.n	800dae0 <udp_sendto+0x40>
        netif = netif_get_by_index(pcb->mcast_ifindex);
 800db58:	f7fa fcde 	bl	8008518 <netif_get_by_index>
    if (netif == NULL)
 800db5c:	b928      	cbnz	r0, 800db6a <udp_sendto+0xca>
      netif = ip_route(&pcb->local_ip, dst_ip);
 800db5e:	7d23      	ldrb	r3, [r4, #20]
 800db60:	2b06      	cmp	r3, #6
 800db62:	d00c      	beq.n	800db7e <udp_sendto+0xde>
 800db64:	4620      	mov	r0, r4
 800db66:	f002 fa61 	bl	801002c <ip4_route>
  if (netif == NULL) {
 800db6a:	b180      	cbz	r0, 800db8e <udp_sendto+0xee>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800db6c:	9000      	str	r0, [sp, #0]
 800db6e:	463b      	mov	r3, r7
 800db70:	4622      	mov	r2, r4
 800db72:	4631      	mov	r1, r6
 800db74:	4628      	mov	r0, r5
 800db76:	f7ff ff09 	bl	800d98c <udp_sendto_if>
}
 800db7a:	b003      	add	sp, #12
 800db7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 800db7e:	4621      	mov	r1, r4
 800db80:	4628      	mov	r0, r5
 800db82:	f003 fa3b 	bl	8010ffc <ip6_route>
 800db86:	e7f0      	b.n	800db6a <udp_sendto+0xca>
    return ERR_VAL;
 800db88:	f06f 0005 	mvn.w	r0, #5
 800db8c:	e7f5      	b.n	800db7a <udp_sendto+0xda>
    return ERR_RTE;
 800db8e:	f06f 0003 	mvn.w	r0, #3
 800db92:	e7f2      	b.n	800db7a <udp_sendto+0xda>
 800db94:	08018804 	.word	0x08018804
 800db98:	08017efc 	.word	0x08017efc
 800db9c:	08017fa8 	.word	0x08017fa8
 800dba0:	08015d2c 	.word	0x08015d2c
 800dba4:	08017fc0 	.word	0x08017fc0
 800dba8:	08017fdc 	.word	0x08017fdc

0800dbac <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dbac:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800dbae:	2800      	cmp	r0, #0
 800dbb0:	d02f      	beq.n	800dc12 <udp_connect+0x66>
 800dbb2:	460d      	mov	r5, r1
 800dbb4:	4616      	mov	r6, r2
 800dbb6:	4604      	mov	r4, r0
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800dbb8:	2900      	cmp	r1, #0
 800dbba:	d034      	beq.n	800dc26 <udp_connect+0x7a>

  if (pcb->local_port == 0) {
 800dbbc:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
 800dbbe:	2a00      	cmp	r2, #0
 800dbc0:	d03b      	beq.n	800dc3a <udp_connect+0x8e>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800dbc2:	f114 0218 	adds.w	r2, r4, #24
 800dbc6:	d002      	beq.n	800dbce <udp_connect+0x22>
 800dbc8:	7d2b      	ldrb	r3, [r5, #20]
 800dbca:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800dbce:	7d2b      	ldrb	r3, [r5, #20]
 800dbd0:	2b06      	cmp	r3, #6
 800dbd2:	d039      	beq.n	800dc48 <udp_connect+0x9c>
 800dbd4:	2d00      	cmp	r5, #0
 800dbd6:	d052      	beq.n	800dc7e <udp_connect+0xd2>
 800dbd8:	682b      	ldr	r3, [r5, #0]
 800dbda:	61a3      	str	r3, [r4, #24]
 800dbdc:	2300      	movs	r3, #0
 800dbde:	6263      	str	r3, [r4, #36]	; 0x24
 800dbe0:	6223      	str	r3, [r4, #32]
 800dbe2:	61e3      	str	r3, [r4, #28]
 800dbe4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  /* If the given IP address should have a zone but doesn't, assign one now,
   * using the bound address to make a more informed decision when possible. */
  if (IP_IS_V6(&pcb->remote_ip) &&
 800dbe8:	b11a      	cbz	r2, 800dbf2 <udp_connect+0x46>
 800dbea:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800dbee:	2b06      	cmp	r3, #6
 800dbf0:	d047      	beq.n	800dc82 <udp_connect+0xd6>
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800dbf2:	87a6      	strh	r6, [r4, #60]	; 0x3c
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800dbf4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800dbf8:	f043 0304 	orr.w	r3, r3, #4
 800dbfc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dc00:	4b41      	ldr	r3, [pc, #260]	; (800dd08 <udp_connect+0x15c>)
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	4613      	mov	r3, r2
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d076      	beq.n	800dcf8 <udp_connect+0x14c>
    if (pcb == ipcb) {
 800dc0a:	42a3      	cmp	r3, r4
 800dc0c:	d07a      	beq.n	800dd04 <udp_connect+0x158>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dc0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc10:	e7f9      	b.n	800dc06 <udp_connect+0x5a>
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc12:	4b3e      	ldr	r3, [pc, #248]	; (800dd0c <udp_connect+0x160>)
 800dc14:	f240 4235 	movw	r2, #1077	; 0x435
 800dc18:	493d      	ldr	r1, [pc, #244]	; (800dd10 <udp_connect+0x164>)
 800dc1a:	483e      	ldr	r0, [pc, #248]	; (800dd14 <udp_connect+0x168>)
 800dc1c:	f007 f912 	bl	8014e44 <iprintf>
 800dc20:	f06f 030f 	mvn.w	r3, #15
 800dc24:	e06c      	b.n	800dd00 <udp_connect+0x154>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800dc26:	4b39      	ldr	r3, [pc, #228]	; (800dd0c <udp_connect+0x160>)
 800dc28:	f240 4236 	movw	r2, #1078	; 0x436
 800dc2c:	493a      	ldr	r1, [pc, #232]	; (800dd18 <udp_connect+0x16c>)
 800dc2e:	4839      	ldr	r0, [pc, #228]	; (800dd14 <udp_connect+0x168>)
 800dc30:	f007 f908 	bl	8014e44 <iprintf>
 800dc34:	f06f 030f 	mvn.w	r3, #15
 800dc38:	e062      	b.n	800dd00 <udp_connect+0x154>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800dc3a:	4601      	mov	r1, r0
 800dc3c:	f7ff fc22 	bl	800d484 <udp_bind>
    if (err != ERR_OK) {
 800dc40:	4603      	mov	r3, r0
 800dc42:	2800      	cmp	r0, #0
 800dc44:	d0bd      	beq.n	800dbc2 <udp_connect+0x16>
 800dc46:	e05b      	b.n	800dd00 <udp_connect+0x154>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800dc48:	b17d      	cbz	r5, 800dc6a <udp_connect+0xbe>
 800dc4a:	682b      	ldr	r3, [r5, #0]
 800dc4c:	61a3      	str	r3, [r4, #24]
 800dc4e:	b175      	cbz	r5, 800dc6e <udp_connect+0xc2>
 800dc50:	686b      	ldr	r3, [r5, #4]
 800dc52:	61e3      	str	r3, [r4, #28]
 800dc54:	b16d      	cbz	r5, 800dc72 <udp_connect+0xc6>
 800dc56:	68ab      	ldr	r3, [r5, #8]
 800dc58:	6223      	str	r3, [r4, #32]
 800dc5a:	b165      	cbz	r5, 800dc76 <udp_connect+0xca>
 800dc5c:	68eb      	ldr	r3, [r5, #12]
 800dc5e:	6263      	str	r3, [r4, #36]	; 0x24
 800dc60:	b15d      	cbz	r5, 800dc7a <udp_connect+0xce>
 800dc62:	7c2b      	ldrb	r3, [r5, #16]
 800dc64:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800dc68:	e7be      	b.n	800dbe8 <udp_connect+0x3c>
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	e7ee      	b.n	800dc4c <udp_connect+0xa0>
 800dc6e:	2300      	movs	r3, #0
 800dc70:	e7ef      	b.n	800dc52 <udp_connect+0xa6>
 800dc72:	2300      	movs	r3, #0
 800dc74:	e7f0      	b.n	800dc58 <udp_connect+0xac>
 800dc76:	2300      	movs	r3, #0
 800dc78:	e7f1      	b.n	800dc5e <udp_connect+0xb2>
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	e7f2      	b.n	800dc64 <udp_connect+0xb8>
 800dc7e:	2300      	movs	r3, #0
 800dc80:	e7ab      	b.n	800dbda <udp_connect+0x2e>
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
 800dc82:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
  if (IP_IS_V6(&pcb->remote_ip) &&
 800dc86:	2d00      	cmp	r5, #0
 800dc88:	d1b3      	bne.n	800dbf2 <udp_connect+0x46>
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
 800dc8a:	69a3      	ldr	r3, [r4, #24]
 800dc8c:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 800dc90:	4019      	ands	r1, r3
 800dc92:	f248 02fe 	movw	r2, #33022	; 0x80fe
 800dc96:	4291      	cmp	r1, r2
 800dc98:	d00b      	beq.n	800dcb2 <udp_connect+0x106>
 800dc9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc9e:	041b      	lsls	r3, r3, #16
 800dca0:	0c1b      	lsrs	r3, r3, #16
 800dca2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d003      	beq.n	800dcb2 <udp_connect+0x106>
 800dcaa:	f240 22ff 	movw	r2, #767	; 0x2ff
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d19f      	bne.n	800dbf2 <udp_connect+0x46>
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
 800dcb2:	f104 0118 	add.w	r1, r4, #24
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	f003 f9a0 	bl	8010ffc <ip6_route>
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	2800      	cmp	r0, #0
 800dcc0:	d097      	beq.n	800dbf2 <udp_connect+0x46>
 800dcc2:	69a3      	ldr	r3, [r4, #24]
 800dcc4:	f24c 00ff 	movw	r0, #49407	; 0xc0ff
 800dcc8:	4018      	ands	r0, r3
 800dcca:	f248 01fe 	movw	r1, #33022	; 0x80fe
 800dcce:	4288      	cmp	r0, r1
 800dcd0:	d00b      	beq.n	800dcea <udp_connect+0x13e>
 800dcd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dcd6:	041b      	lsls	r3, r3, #16
 800dcd8:	0c1b      	lsrs	r3, r3, #16
 800dcda:	f240 11ff 	movw	r1, #511	; 0x1ff
 800dcde:	428b      	cmp	r3, r1
 800dce0:	d003      	beq.n	800dcea <udp_connect+0x13e>
 800dce2:	f240 21ff 	movw	r1, #767	; 0x2ff
 800dce6:	428b      	cmp	r3, r1
 800dce8:	d103      	bne.n	800dcf2 <udp_connect+0x146>
 800dcea:	f892 50de 	ldrb.w	r5, [r2, #222]	; 0xde
 800dcee:	3501      	adds	r5, #1
 800dcf0:	b2ed      	uxtb	r5, r5
 800dcf2:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 800dcf6:	e77c      	b.n	800dbf2 <udp_connect+0x46>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800dcf8:	6362      	str	r2, [r4, #52]	; 0x34
  udp_pcbs = pcb;
 800dcfa:	4b03      	ldr	r3, [pc, #12]	; (800dd08 <udp_connect+0x15c>)
 800dcfc:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800dcfe:	2300      	movs	r3, #0
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 800dd04:	2300      	movs	r3, #0
 800dd06:	e7fb      	b.n	800dd00 <udp_connect+0x154>
 800dd08:	20008628 	.word	0x20008628
 800dd0c:	08017efc 	.word	0x08017efc
 800dd10:	08017e74 	.word	0x08017e74
 800dd14:	08015d2c 	.word	0x08015d2c
 800dd18:	08017e90 	.word	0x08017e90

0800dd1c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800dd1c:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800dd1e:	b110      	cbz	r0, 800dd26 <udp_recv+0xa>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800dd20:	6481      	str	r1, [r0, #72]	; 0x48
  pcb->recv_arg = recv_arg;
 800dd22:	64c2      	str	r2, [r0, #76]	; 0x4c
}
 800dd24:	bd08      	pop	{r3, pc}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800dd26:	4b04      	ldr	r3, [pc, #16]	; (800dd38 <udp_recv+0x1c>)
 800dd28:	f240 428a 	movw	r2, #1162	; 0x48a
 800dd2c:	4903      	ldr	r1, [pc, #12]	; (800dd3c <udp_recv+0x20>)
 800dd2e:	4804      	ldr	r0, [pc, #16]	; (800dd40 <udp_recv+0x24>)
 800dd30:	f007 f888 	bl	8014e44 <iprintf>
 800dd34:	e7f6      	b.n	800dd24 <udp_recv+0x8>
 800dd36:	bf00      	nop
 800dd38:	08017efc 	.word	0x08017efc
 800dd3c:	08017f78 	.word	0x08017f78
 800dd40:	08015d2c 	.word	0x08015d2c

0800dd44 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800dd44:	b508      	push	{r3, lr}
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800dd46:	b150      	cbz	r0, 800dd5e <udp_remove+0x1a>
 800dd48:	4601      	mov	r1, r0

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800dd4a:	4b0f      	ldr	r3, [pc, #60]	; (800dd88 <udp_remove+0x44>)
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	4282      	cmp	r2, r0
 800dd50:	d111      	bne.n	800dd76 <udp_remove+0x32>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800dd52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800dd54:	601a      	str	r2, [r3, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800dd56:	2000      	movs	r0, #0
 800dd58:	f7fa f86e 	bl	8007e38 <memp_free>
}
 800dd5c:	bd08      	pop	{r3, pc}
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800dd5e:	4b0b      	ldr	r3, [pc, #44]	; (800dd8c <udp_remove+0x48>)
 800dd60:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800dd64:	490a      	ldr	r1, [pc, #40]	; (800dd90 <udp_remove+0x4c>)
 800dd66:	480b      	ldr	r0, [pc, #44]	; (800dd94 <udp_remove+0x50>)
 800dd68:	f007 f86c 	bl	8014e44 <iprintf>
 800dd6c:	e7f6      	b.n	800dd5c <udp_remove+0x18>
        pcb2->next = pcb->next;
 800dd6e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800dd70:	6353      	str	r3, [r2, #52]	; 0x34
        break;
 800dd72:	e7f0      	b.n	800dd56 <udp_remove+0x12>
 800dd74:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800dd76:	2a00      	cmp	r2, #0
 800dd78:	d0ed      	beq.n	800dd56 <udp_remove+0x12>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800dd7a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d0f9      	beq.n	800dd74 <udp_remove+0x30>
 800dd80:	428b      	cmp	r3, r1
 800dd82:	d0f4      	beq.n	800dd6e <udp_remove+0x2a>
 800dd84:	461a      	mov	r2, r3
 800dd86:	e7f6      	b.n	800dd76 <udp_remove+0x32>
 800dd88:	20008628 	.word	0x20008628
 800dd8c:	08017efc 	.word	0x08017efc
 800dd90:	08017f90 	.word	0x08017f90
 800dd94:	08015d2c 	.word	0x08015d2c

0800dd98 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800dd98:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800dd9a:	2000      	movs	r0, #0
 800dd9c:	f7fa f832 	bl	8007e04 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800dda0:	4604      	mov	r4, r0
 800dda2:	b140      	cbz	r0, 800ddb6 <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800dda4:	2250      	movs	r2, #80	; 0x50
 800dda6:	2100      	movs	r1, #0
 800dda8:	f007 f843 	bl	8014e32 <memset>
    pcb->ttl = UDP_TTL;
 800ddac:	23ff      	movs	r3, #255	; 0xff
 800ddae:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 800ddb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	bd10      	pop	{r4, pc}
	...

0800ddbc <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	f000 809a 	beq.w	800def6 <udp_netif_ip_addr_changed+0x13a>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	7d03      	ldrb	r3, [r0, #20]
 800ddc6:	2b06      	cmp	r3, #6
 800ddc8:	d01a      	beq.n	800de00 <udp_netif_ip_addr_changed+0x44>
 800ddca:	2800      	cmp	r0, #0
 800ddcc:	d02c      	beq.n	800de28 <udp_netif_ip_addr_changed+0x6c>
 800ddce:	6803      	ldr	r3, [r0, #0]
 800ddd0:	bb63      	cbnz	r3, 800de2c <udp_netif_ip_addr_changed+0x70>
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	f000 808f 	beq.w	800def6 <udp_netif_ip_addr_changed+0x13a>
 800ddd8:	2900      	cmp	r1, #0
 800ddda:	f000 808c 	beq.w	800def6 <udp_netif_ip_addr_changed+0x13a>
 800ddde:	7d0b      	ldrb	r3, [r1, #20]
 800dde0:	2b06      	cmp	r3, #6
 800dde2:	d025      	beq.n	800de30 <udp_netif_ip_addr_changed+0x74>
 800dde4:	2900      	cmp	r1, #0
 800dde6:	d037      	beq.n	800de58 <udp_netif_ip_addr_changed+0x9c>
 800dde8:	680b      	ldr	r3, [r1, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d136      	bne.n	800de5c <udp_netif_ip_addr_changed+0xa0>
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	f000 8081 	beq.w	800def6 <udp_netif_ip_addr_changed+0x13a>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ddf4:	4b40      	ldr	r3, [pc, #256]	; (800def8 <udp_netif_ip_addr_changed+0x13c>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d07b      	beq.n	800def4 <udp_netif_ip_addr_changed+0x138>
{
 800ddfc:	b410      	push	{r4}
 800ddfe:	e05b      	b.n	800deb8 <udp_netif_ip_addr_changed+0xfc>
  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800de00:	b150      	cbz	r0, 800de18 <udp_netif_ip_addr_changed+0x5c>
 800de02:	6803      	ldr	r3, [r0, #0]
 800de04:	b953      	cbnz	r3, 800de1c <udp_netif_ip_addr_changed+0x60>
 800de06:	6843      	ldr	r3, [r0, #4]
 800de08:	b953      	cbnz	r3, 800de20 <udp_netif_ip_addr_changed+0x64>
 800de0a:	6883      	ldr	r3, [r0, #8]
 800de0c:	b953      	cbnz	r3, 800de24 <udp_netif_ip_addr_changed+0x68>
 800de0e:	68c3      	ldr	r3, [r0, #12]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d0de      	beq.n	800ddd2 <udp_netif_ip_addr_changed+0x16>
 800de14:	2301      	movs	r3, #1
 800de16:	e7dc      	b.n	800ddd2 <udp_netif_ip_addr_changed+0x16>
 800de18:	2300      	movs	r3, #0
 800de1a:	e7da      	b.n	800ddd2 <udp_netif_ip_addr_changed+0x16>
 800de1c:	2301      	movs	r3, #1
 800de1e:	e7d8      	b.n	800ddd2 <udp_netif_ip_addr_changed+0x16>
 800de20:	2301      	movs	r3, #1
 800de22:	e7d6      	b.n	800ddd2 <udp_netif_ip_addr_changed+0x16>
 800de24:	2301      	movs	r3, #1
 800de26:	e7d4      	b.n	800ddd2 <udp_netif_ip_addr_changed+0x16>
 800de28:	2300      	movs	r3, #0
 800de2a:	e7d2      	b.n	800ddd2 <udp_netif_ip_addr_changed+0x16>
 800de2c:	2301      	movs	r3, #1
 800de2e:	e7d0      	b.n	800ddd2 <udp_netif_ip_addr_changed+0x16>
 800de30:	b151      	cbz	r1, 800de48 <udp_netif_ip_addr_changed+0x8c>
 800de32:	680b      	ldr	r3, [r1, #0]
 800de34:	b953      	cbnz	r3, 800de4c <udp_netif_ip_addr_changed+0x90>
 800de36:	684b      	ldr	r3, [r1, #4]
 800de38:	b953      	cbnz	r3, 800de50 <udp_netif_ip_addr_changed+0x94>
 800de3a:	688b      	ldr	r3, [r1, #8]
 800de3c:	b953      	cbnz	r3, 800de54 <udp_netif_ip_addr_changed+0x98>
 800de3e:	68cb      	ldr	r3, [r1, #12]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d0d4      	beq.n	800ddee <udp_netif_ip_addr_changed+0x32>
 800de44:	2301      	movs	r3, #1
 800de46:	e7d2      	b.n	800ddee <udp_netif_ip_addr_changed+0x32>
 800de48:	2300      	movs	r3, #0
 800de4a:	e7d0      	b.n	800ddee <udp_netif_ip_addr_changed+0x32>
 800de4c:	2301      	movs	r3, #1
 800de4e:	e7ce      	b.n	800ddee <udp_netif_ip_addr_changed+0x32>
 800de50:	2301      	movs	r3, #1
 800de52:	e7cc      	b.n	800ddee <udp_netif_ip_addr_changed+0x32>
 800de54:	2301      	movs	r3, #1
 800de56:	e7ca      	b.n	800ddee <udp_netif_ip_addr_changed+0x32>
 800de58:	2300      	movs	r3, #0
 800de5a:	e7c8      	b.n	800ddee <udp_netif_ip_addr_changed+0x32>
 800de5c:	2301      	movs	r3, #1
 800de5e:	e7c6      	b.n	800ddee <udp_netif_ip_addr_changed+0x32>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800de60:	681c      	ldr	r4, [r3, #0]
 800de62:	6810      	ldr	r0, [r2, #0]
 800de64:	4284      	cmp	r4, r0
 800de66:	d001      	beq.n	800de6c <udp_netif_ip_addr_changed+0xb0>
 800de68:	2000      	movs	r0, #0
 800de6a:	e031      	b.n	800ded0 <udp_netif_ip_addr_changed+0x114>
 800de6c:	685c      	ldr	r4, [r3, #4]
 800de6e:	6850      	ldr	r0, [r2, #4]
 800de70:	4284      	cmp	r4, r0
 800de72:	d001      	beq.n	800de78 <udp_netif_ip_addr_changed+0xbc>
 800de74:	2000      	movs	r0, #0
 800de76:	e02b      	b.n	800ded0 <udp_netif_ip_addr_changed+0x114>
 800de78:	689c      	ldr	r4, [r3, #8]
 800de7a:	6890      	ldr	r0, [r2, #8]
 800de7c:	4284      	cmp	r4, r0
 800de7e:	d001      	beq.n	800de84 <udp_netif_ip_addr_changed+0xc8>
 800de80:	2000      	movs	r0, #0
 800de82:	e025      	b.n	800ded0 <udp_netif_ip_addr_changed+0x114>
 800de84:	68dc      	ldr	r4, [r3, #12]
 800de86:	68d0      	ldr	r0, [r2, #12]
 800de88:	4284      	cmp	r4, r0
 800de8a:	d001      	beq.n	800de90 <udp_netif_ip_addr_changed+0xd4>
 800de8c:	2000      	movs	r0, #0
 800de8e:	e01f      	b.n	800ded0 <udp_netif_ip_addr_changed+0x114>
 800de90:	7c1c      	ldrb	r4, [r3, #16]
 800de92:	7c10      	ldrb	r0, [r2, #16]
 800de94:	4284      	cmp	r4, r0
 800de96:	d001      	beq.n	800de9c <udp_netif_ip_addr_changed+0xe0>
 800de98:	2000      	movs	r0, #0
 800de9a:	e019      	b.n	800ded0 <udp_netif_ip_addr_changed+0x114>
 800de9c:	2001      	movs	r0, #1
 800de9e:	e017      	b.n	800ded0 <udp_netif_ip_addr_changed+0x114>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800dea0:	6808      	ldr	r0, [r1, #0]
 800dea2:	6018      	str	r0, [r3, #0]
 800dea4:	6848      	ldr	r0, [r1, #4]
 800dea6:	6058      	str	r0, [r3, #4]
 800dea8:	6888      	ldr	r0, [r1, #8]
 800deaa:	6098      	str	r0, [r3, #8]
 800deac:	68c8      	ldr	r0, [r1, #12]
 800deae:	60d8      	str	r0, [r3, #12]
 800deb0:	7c08      	ldrb	r0, [r1, #16]
 800deb2:	7418      	strb	r0, [r3, #16]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800deb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deb6:	b1d3      	cbz	r3, 800deee <udp_netif_ip_addr_changed+0x132>
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800deb8:	7d18      	ldrb	r0, [r3, #20]
 800deba:	7d14      	ldrb	r4, [r2, #20]
 800debc:	42a0      	cmp	r0, r4
 800debe:	d1f9      	bne.n	800deb4 <udp_netif_ip_addr_changed+0xf8>
 800dec0:	2806      	cmp	r0, #6
 800dec2:	d0cd      	beq.n	800de60 <udp_netif_ip_addr_changed+0xa4>
 800dec4:	6818      	ldr	r0, [r3, #0]
 800dec6:	6814      	ldr	r4, [r2, #0]
 800dec8:	42a0      	cmp	r0, r4
 800deca:	bf14      	ite	ne
 800decc:	2000      	movne	r0, #0
 800dece:	2001      	moveq	r0, #1
 800ded0:	2800      	cmp	r0, #0
 800ded2:	d0ef      	beq.n	800deb4 <udp_netif_ip_addr_changed+0xf8>
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ded4:	7d08      	ldrb	r0, [r1, #20]
 800ded6:	7518      	strb	r0, [r3, #20]
 800ded8:	7d08      	ldrb	r0, [r1, #20]
 800deda:	2806      	cmp	r0, #6
 800dedc:	d0e0      	beq.n	800dea0 <udp_netif_ip_addr_changed+0xe4>
 800dede:	6808      	ldr	r0, [r1, #0]
 800dee0:	6018      	str	r0, [r3, #0]
 800dee2:	2000      	movs	r0, #0
 800dee4:	60d8      	str	r0, [r3, #12]
 800dee6:	6098      	str	r0, [r3, #8]
 800dee8:	6058      	str	r0, [r3, #4]
 800deea:	7418      	strb	r0, [r3, #16]
 800deec:	e7e2      	b.n	800deb4 <udp_netif_ip_addr_changed+0xf8>
      }
    }
  }
}
 800deee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800def2:	4770      	bx	lr
 800def4:	4770      	bx	lr
 800def6:	4770      	bx	lr
 800def8:	20008628 	.word	0x20008628

0800defc <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 800defc:	7943      	ldrb	r3, [r0, #5]
 800defe:	428b      	cmp	r3, r1
 800df00:	d003      	beq.n	800df0a <dhcp_set_state+0xe>
    dhcp->state = new_state;
 800df02:	7141      	strb	r1, [r0, #5]
    dhcp->tries = 0;
 800df04:	2300      	movs	r3, #0
 800df06:	7183      	strb	r3, [r0, #6]
    dhcp->request_timeout = 0;
 800df08:	8103      	strh	r3, [r0, #8]
  }
}
 800df0a:	4770      	bx	lr

0800df0c <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800df0c:	b570      	push	{r4, r5, r6, lr}
 800df0e:	4604      	mov	r4, r0
 800df10:	460d      	mov	r5, r1
 800df12:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800df14:	1c83      	adds	r3, r0, #2
 800df16:	2b44      	cmp	r3, #68	; 0x44
 800df18:	d807      	bhi.n	800df2a <dhcp_option_short+0x1e>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800df1a:	1c63      	adds	r3, r4, #1
 800df1c:	b29b      	uxth	r3, r3
 800df1e:	0a32      	lsrs	r2, r6, #8
 800df20:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800df22:	1ca0      	adds	r0, r4, #2
 800df24:	54ee      	strb	r6, [r5, r3]
  return options_out_len;
}
 800df26:	b280      	uxth	r0, r0
 800df28:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800df2a:	4b04      	ldr	r3, [pc, #16]	; (800df3c <dhcp_option_short+0x30>)
 800df2c:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800df30:	4903      	ldr	r1, [pc, #12]	; (800df40 <dhcp_option_short+0x34>)
 800df32:	4804      	ldr	r0, [pc, #16]	; (800df44 <dhcp_option_short+0x38>)
 800df34:	f006 ff86 	bl	8014e44 <iprintf>
 800df38:	e7ef      	b.n	800df1a <dhcp_option_short+0xe>
 800df3a:	bf00      	nop
 800df3c:	08018308 	.word	0x08018308
 800df40:	08018340 	.word	0x08018340
 800df44:	08015d2c 	.word	0x08015d2c

0800df48 <dhcp_option>:
{
 800df48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df4a:	4604      	mov	r4, r0
 800df4c:	460d      	mov	r5, r1
 800df4e:	4617      	mov	r7, r2
 800df50:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800df52:	4403      	add	r3, r0
 800df54:	3302      	adds	r3, #2
 800df56:	2b44      	cmp	r3, #68	; 0x44
 800df58:	d806      	bhi.n	800df68 <dhcp_option+0x20>
  options[options_out_len++] = option_type;
 800df5a:	1c63      	adds	r3, r4, #1
 800df5c:	b29b      	uxth	r3, r3
 800df5e:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 800df60:	1ca0      	adds	r0, r4, #2
 800df62:	54ee      	strb	r6, [r5, r3]
}
 800df64:	b280      	uxth	r0, r0
 800df66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800df68:	4b03      	ldr	r3, [pc, #12]	; (800df78 <dhcp_option+0x30>)
 800df6a:	f240 529a 	movw	r2, #1434	; 0x59a
 800df6e:	4903      	ldr	r1, [pc, #12]	; (800df7c <dhcp_option+0x34>)
 800df70:	4803      	ldr	r0, [pc, #12]	; (800df80 <dhcp_option+0x38>)
 800df72:	f006 ff67 	bl	8014e44 <iprintf>
 800df76:	e7f0      	b.n	800df5a <dhcp_option+0x12>
 800df78:	08018308 	.word	0x08018308
 800df7c:	08018250 	.word	0x08018250
 800df80:	08015d2c 	.word	0x08015d2c

0800df84 <dhcp_option_byte>:
{
 800df84:	b570      	push	{r4, r5, r6, lr}
 800df86:	4604      	mov	r4, r0
 800df88:	460d      	mov	r5, r1
 800df8a:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800df8c:	2843      	cmp	r0, #67	; 0x43
 800df8e:	d803      	bhi.n	800df98 <dhcp_option_byte+0x14>
  options[options_out_len++] = value;
 800df90:	1c60      	adds	r0, r4, #1
 800df92:	552e      	strb	r6, [r5, r4]
}
 800df94:	b280      	uxth	r0, r0
 800df96:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800df98:	4b03      	ldr	r3, [pc, #12]	; (800dfa8 <dhcp_option_byte+0x24>)
 800df9a:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800df9e:	4903      	ldr	r1, [pc, #12]	; (800dfac <dhcp_option_byte+0x28>)
 800dfa0:	4803      	ldr	r0, [pc, #12]	; (800dfb0 <dhcp_option_byte+0x2c>)
 800dfa2:	f006 ff4f 	bl	8014e44 <iprintf>
 800dfa6:	e7f3      	b.n	800df90 <dhcp_option_byte+0xc>
 800dfa8:	08018308 	.word	0x08018308
 800dfac:	08018294 	.word	0x08018294
 800dfb0:	08015d2c 	.word	0x08015d2c

0800dfb4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800dfb4:	b570      	push	{r4, r5, r6, lr}
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	460d      	mov	r5, r1
 800dfba:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800dfbc:	1d03      	adds	r3, r0, #4
 800dfbe:	2b44      	cmp	r3, #68	; 0x44
 800dfc0:	d811      	bhi.n	800dfe6 <dhcp_option_long+0x32>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800dfc2:	1c63      	adds	r3, r4, #1
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	0e32      	lsrs	r2, r6, #24
 800dfc8:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800dfca:	1ca2      	adds	r2, r4, #2
 800dfcc:	b292      	uxth	r2, r2
 800dfce:	f3c6 4107 	ubfx	r1, r6, #16, #8
 800dfd2:	54e9      	strb	r1, [r5, r3]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800dfd4:	1ce3      	adds	r3, r4, #3
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	f3c6 2107 	ubfx	r1, r6, #8, #8
 800dfdc:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800dfde:	1d20      	adds	r0, r4, #4
 800dfe0:	54ee      	strb	r6, [r5, r3]
  return options_out_len;
}
 800dfe2:	b280      	uxth	r0, r0
 800dfe4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800dfe6:	4b04      	ldr	r3, [pc, #16]	; (800dff8 <dhcp_option_long+0x44>)
 800dfe8:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800dfec:	4903      	ldr	r1, [pc, #12]	; (800dffc <dhcp_option_long+0x48>)
 800dfee:	4804      	ldr	r0, [pc, #16]	; (800e000 <dhcp_option_long+0x4c>)
 800dff0:	f006 ff28 	bl	8014e44 <iprintf>
 800dff4:	e7e5      	b.n	800dfc2 <dhcp_option_long+0xe>
 800dff6:	bf00      	nop
 800dff8:	08018308 	.word	0x08018308
 800dffc:	080182cc 	.word	0x080182cc
 800e000:	08015d2c 	.word	0x08015d2c

0800e004 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800e004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800e008:	2800      	cmp	r0, #0
 800e00a:	d042      	beq.n	800e092 <dhcp_create_msg+0x8e>
 800e00c:	4689      	mov	r9, r1
 800e00e:	4615      	mov	r5, r2
 800e010:	461f      	mov	r7, r3
 800e012:	4680      	mov	r8, r0
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800e014:	2900      	cmp	r1, #0
 800e016:	d045      	beq.n	800e0a4 <dhcp_create_msg+0xa0>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800e018:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e01c:	f44f 719a 	mov.w	r1, #308	; 0x134
 800e020:	204a      	movs	r0, #74	; 0x4a
 800e022:	f7fa fbf9 	bl	8008818 <pbuf_alloc>
  if (p_out == NULL) {
 800e026:	4606      	mov	r6, r0
 800e028:	2800      	cmp	r0, #0
 800e02a:	d079      	beq.n	800e120 <dhcp_create_msg+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800e02c:	8943      	ldrh	r3, [r0, #10]
 800e02e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800e032:	d340      	bcc.n	800e0b6 <dhcp_create_msg+0xb2>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800e034:	2d03      	cmp	r5, #3
 800e036:	d046      	beq.n	800e0c6 <dhcp_create_msg+0xc2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800e038:	f899 3006 	ldrb.w	r3, [r9, #6]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d047      	beq.n	800e0d0 <dhcp_create_msg+0xcc>
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800e040:	4b39      	ldr	r3, [pc, #228]	; (800e128 <dhcp_create_msg+0x124>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f8c9 3000 	str.w	r3, [r9]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800e048:	6874      	ldr	r4, [r6, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800e04a:	f44f 729a 	mov.w	r2, #308	; 0x134
 800e04e:	2100      	movs	r1, #0
 800e050:	4620      	mov	r0, r4
 800e052:	f006 feee 	bl	8014e32 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800e056:	2301      	movs	r3, #1
 800e058:	7023      	strb	r3, [r4, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800e05a:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 800e05c:	f898 30da 	ldrb.w	r3, [r8, #218]	; 0xda
 800e060:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800e062:	f8d9 0000 	ldr.w	r0, [r9]
 800e066:	f7f9 f8b8 	bl	80071da <lwip_htonl>
 800e06a:	6060      	str	r0, [r4, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800e06c:	2d08      	cmp	r5, #8
 800e06e:	d00b      	beq.n	800e088 <dhcp_create_msg+0x84>
 800e070:	2d04      	cmp	r5, #4
 800e072:	d009      	beq.n	800e088 <dhcp_create_msg+0x84>
 800e074:	2d07      	cmp	r5, #7
 800e076:	d007      	beq.n	800e088 <dhcp_create_msg+0x84>
 800e078:	2d03      	cmp	r5, #3
 800e07a:	d108      	bne.n	800e08e <dhcp_create_msg+0x8a>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800e07c:	f899 3005 	ldrb.w	r3, [r9, #5]
 800e080:	3b04      	subs	r3, #4
 800e082:	b2db      	uxtb	r3, r3
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800e084:	2b01      	cmp	r3, #1
 800e086:	d802      	bhi.n	800e08e <dhcp_create_msg+0x8a>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800e088:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e08c:	60e3      	str	r3, [r4, #12]
{
 800e08e:	2300      	movs	r3, #0
 800e090:	e02b      	b.n	800e0ea <dhcp_create_msg+0xe6>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800e092:	4b26      	ldr	r3, [pc, #152]	; (800e12c <dhcp_create_msg+0x128>)
 800e094:	f240 7269 	movw	r2, #1897	; 0x769
 800e098:	4925      	ldr	r1, [pc, #148]	; (800e130 <dhcp_create_msg+0x12c>)
 800e09a:	4826      	ldr	r0, [pc, #152]	; (800e134 <dhcp_create_msg+0x130>)
 800e09c:	f006 fed2 	bl	8014e44 <iprintf>
 800e0a0:	2600      	movs	r6, #0
 800e0a2:	e03d      	b.n	800e120 <dhcp_create_msg+0x11c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800e0a4:	4b21      	ldr	r3, [pc, #132]	; (800e12c <dhcp_create_msg+0x128>)
 800e0a6:	f240 726a 	movw	r2, #1898	; 0x76a
 800e0aa:	4923      	ldr	r1, [pc, #140]	; (800e138 <dhcp_create_msg+0x134>)
 800e0ac:	4821      	ldr	r0, [pc, #132]	; (800e134 <dhcp_create_msg+0x130>)
 800e0ae:	f006 fec9 	bl	8014e44 <iprintf>
 800e0b2:	2600      	movs	r6, #0
 800e0b4:	e034      	b.n	800e120 <dhcp_create_msg+0x11c>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800e0b6:	4b1d      	ldr	r3, [pc, #116]	; (800e12c <dhcp_create_msg+0x128>)
 800e0b8:	f240 7272 	movw	r2, #1906	; 0x772
 800e0bc:	491f      	ldr	r1, [pc, #124]	; (800e13c <dhcp_create_msg+0x138>)
 800e0be:	481d      	ldr	r0, [pc, #116]	; (800e134 <dhcp_create_msg+0x130>)
 800e0c0:	f006 fec0 	bl	8014e44 <iprintf>
 800e0c4:	e7b6      	b.n	800e034 <dhcp_create_msg+0x30>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800e0c6:	f899 3005 	ldrb.w	r3, [r9, #5]
 800e0ca:	2b03      	cmp	r3, #3
 800e0cc:	d1bc      	bne.n	800e048 <dhcp_create_msg+0x44>
 800e0ce:	e7b3      	b.n	800e038 <dhcp_create_msg+0x34>
      xid = LWIP_RAND();
 800e0d0:	f006 fed0 	bl	8014e74 <rand>
 800e0d4:	4b14      	ldr	r3, [pc, #80]	; (800e128 <dhcp_create_msg+0x124>)
 800e0d6:	6018      	str	r0, [r3, #0]
 800e0d8:	e7b2      	b.n	800e040 <dhcp_create_msg+0x3c>
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800e0da:	eb08 0203 	add.w	r2, r8, r3
 800e0de:	f892 10d4 	ldrb.w	r1, [r2, #212]	; 0xd4
 800e0e2:	18e2      	adds	r2, r4, r3
 800e0e4:	7711      	strb	r1, [r2, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	2b05      	cmp	r3, #5
 800e0ec:	d9f5      	bls.n	800e0da <dhcp_create_msg+0xd6>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800e0ee:	2363      	movs	r3, #99	; 0x63
 800e0f0:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 800e0f4:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800e0f8:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
 800e0fc:	2253      	movs	r2, #83	; 0x53
 800e0fe:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
 800e102:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800e106:	34f0      	adds	r4, #240	; 0xf0
 800e108:	2301      	movs	r3, #1
 800e10a:	2235      	movs	r2, #53	; 0x35
 800e10c:	4621      	mov	r1, r4
 800e10e:	2000      	movs	r0, #0
 800e110:	f7ff ff1a 	bl	800df48 <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800e114:	462a      	mov	r2, r5
 800e116:	4621      	mov	r1, r4
 800e118:	f7ff ff34 	bl	800df84 <dhcp_option_byte>
  if (options_out_len) {
 800e11c:	b107      	cbz	r7, 800e120 <dhcp_create_msg+0x11c>
    *options_out_len = options_out_len_loc;
 800e11e:	8038      	strh	r0, [r7, #0]
  }
  return p_out;
}
 800e120:	4630      	mov	r0, r6
 800e122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e126:	bf00      	nop
 800e128:	20001794 	.word	0x20001794
 800e12c:	08018308 	.word	0x08018308
 800e130:	08018180 	.word	0x08018180
 800e134:	08015d2c 	.word	0x08015d2c
 800e138:	080181a0 	.word	0x080181a0
 800e13c:	080181c0 	.word	0x080181c0

0800e140 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800e140:	b538      	push	{r3, r4, r5, lr}
  options[options_out_len++] = DHCP_OPTION_END;
 800e142:	1c43      	adds	r3, r0, #1
 800e144:	b29b      	uxth	r3, r3
 800e146:	24ff      	movs	r4, #255	; 0xff
 800e148:	540c      	strb	r4, [r1, r0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800e14a:	e003      	b.n	800e154 <dhcp_option_trailer+0x14>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800e14c:	1c5c      	adds	r4, r3, #1
 800e14e:	2500      	movs	r5, #0
 800e150:	54cd      	strb	r5, [r1, r3]
 800e152:	b2a3      	uxth	r3, r4
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800e154:	2b43      	cmp	r3, #67	; 0x43
 800e156:	d808      	bhi.n	800e16a <dhcp_option_trailer+0x2a>
 800e158:	2b43      	cmp	r3, #67	; 0x43
 800e15a:	d9f7      	bls.n	800e14c <dhcp_option_trailer+0xc>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800e15c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e160:	b289      	uxth	r1, r1
 800e162:	4610      	mov	r0, r2
 800e164:	f7fa fc06 	bl	8008974 <pbuf_realloc>
}
 800e168:	bd38      	pop	{r3, r4, r5, pc}
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800e16a:	f013 0f03 	tst.w	r3, #3
 800e16e:	d1f3      	bne.n	800e158 <dhcp_option_trailer+0x18>
 800e170:	e7f4      	b.n	800e15c <dhcp_option_trailer+0x1c>
	...

0800e174 <dhcp_rebind>:
{
 800e174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e178:	b084      	sub	sp, #16
 800e17a:	4680      	mov	r8, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e17c:	f8d0 60c8 	ldr.w	r6, [r0, #200]	; 0xc8
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800e180:	2104      	movs	r1, #4
 800e182:	4630      	mov	r0, r6
 800e184:	f7ff feba 	bl	800defc <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e188:	f10d 030e 	add.w	r3, sp, #14
 800e18c:	2203      	movs	r2, #3
 800e18e:	4631      	mov	r1, r6
 800e190:	4640      	mov	r0, r8
 800e192:	f7ff ff37 	bl	800e004 <dhcp_create_msg>
  if (p_out != NULL) {
 800e196:	2800      	cmp	r0, #0
 800e198:	d056      	beq.n	800e248 <dhcp_rebind+0xd4>
 800e19a:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e19c:	6845      	ldr	r5, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e19e:	35f0      	adds	r5, #240	; 0xf0
 800e1a0:	2302      	movs	r3, #2
 800e1a2:	2239      	movs	r2, #57	; 0x39
 800e1a4:	4629      	mov	r1, r5
 800e1a6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e1aa:	f7ff fecd 	bl	800df48 <dhcp_option>
 800e1ae:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e1b2:	f8b8 20d0 	ldrh.w	r2, [r8, #208]	; 0xd0
 800e1b6:	4629      	mov	r1, r5
 800e1b8:	f7ff fea8 	bl	800df0c <dhcp_option_short>
 800e1bc:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e1c0:	2304      	movs	r3, #4
 800e1c2:	2237      	movs	r2, #55	; 0x37
 800e1c4:	4629      	mov	r1, r5
 800e1c6:	f7ff febf 	bl	800df48 <dhcp_option>
 800e1ca:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e1ce:	2400      	movs	r4, #0
 800e1d0:	e00a      	b.n	800e1e8 <dhcp_rebind+0x74>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e1d2:	4b20      	ldr	r3, [pc, #128]	; (800e254 <dhcp_rebind+0xe0>)
 800e1d4:	5d1a      	ldrb	r2, [r3, r4]
 800e1d6:	4629      	mov	r1, r5
 800e1d8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e1dc:	f7ff fed2 	bl	800df84 <dhcp_option_byte>
 800e1e0:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e1e4:	3401      	adds	r4, #1
 800e1e6:	b2e4      	uxtb	r4, r4
 800e1e8:	2c03      	cmp	r4, #3
 800e1ea:	d9f2      	bls.n	800e1d2 <dhcp_rebind+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e1ec:	463a      	mov	r2, r7
 800e1ee:	4629      	mov	r1, r5
 800e1f0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e1f4:	f7ff ffa4 	bl	800e140 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e1f8:	4b17      	ldr	r3, [pc, #92]	; (800e258 <dhcp_rebind+0xe4>)
 800e1fa:	6818      	ldr	r0, [r3, #0]
 800e1fc:	f8cd 8000 	str.w	r8, [sp]
 800e200:	2343      	movs	r3, #67	; 0x43
 800e202:	4a16      	ldr	r2, [pc, #88]	; (800e25c <dhcp_rebind+0xe8>)
 800e204:	4639      	mov	r1, r7
 800e206:	f7ff fbc1 	bl	800d98c <udp_sendto_if>
 800e20a:	4604      	mov	r4, r0
    pbuf_free(p_out);
 800e20c:	4638      	mov	r0, r7
 800e20e:	f7fa faa1 	bl	8008754 <pbuf_free>
  if (dhcp->tries < 255) {
 800e212:	79b3      	ldrb	r3, [r6, #6]
 800e214:	2bff      	cmp	r3, #255	; 0xff
 800e216:	d001      	beq.n	800e21c <dhcp_rebind+0xa8>
    dhcp->tries++;
 800e218:	3301      	adds	r3, #1
 800e21a:	71b3      	strb	r3, [r6, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800e21c:	79b3      	ldrb	r3, [r6, #6]
 800e21e:	2b09      	cmp	r3, #9
 800e220:	d815      	bhi.n	800e24e <dhcp_rebind+0xda>
 800e222:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800e226:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e22a:	00d3      	lsls	r3, r2, #3
 800e22c:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e22e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e232:	4a0b      	ldr	r2, [pc, #44]	; (800e260 <dhcp_rebind+0xec>)
 800e234:	fb82 1203 	smull	r1, r2, r2, r3
 800e238:	17db      	asrs	r3, r3, #31
 800e23a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800e23e:	8133      	strh	r3, [r6, #8]
}
 800e240:	4620      	mov	r0, r4
 800e242:	b004      	add	sp, #16
 800e244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 800e248:	f04f 34ff 	mov.w	r4, #4294967295
 800e24c:	e7e1      	b.n	800e212 <dhcp_rebind+0x9e>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800e24e:	f242 7310 	movw	r3, #10000	; 0x2710
 800e252:	e7ec      	b.n	800e22e <dhcp_rebind+0xba>
 800e254:	08018224 	.word	0x08018224
 800e258:	2000178c 	.word	0x2000178c
 800e25c:	08018804 	.word	0x08018804
 800e260:	10624dd3 	.word	0x10624dd3

0800e264 <dhcp_t2_timeout>:
{
 800e264:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e266:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e26a:	7963      	ldrb	r3, [r4, #5]
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d005      	beq.n	800e27c <dhcp_t2_timeout+0x18>
 800e270:	2b0a      	cmp	r3, #10
 800e272:	d003      	beq.n	800e27c <dhcp_t2_timeout+0x18>
 800e274:	2b05      	cmp	r3, #5
 800e276:	d001      	beq.n	800e27c <dhcp_t2_timeout+0x18>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800e278:	2b04      	cmp	r3, #4
 800e27a:	d10b      	bne.n	800e294 <dhcp_t2_timeout+0x30>
    dhcp_rebind(netif);
 800e27c:	f7ff ff7a 	bl	800e174 <dhcp_rebind>
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800e280:	8aa3      	ldrh	r3, [r4, #20]
 800e282:	8a62      	ldrh	r2, [r4, #18]
 800e284:	1a9b      	subs	r3, r3, r2
 800e286:	2b01      	cmp	r3, #1
 800e288:	dd04      	ble.n	800e294 <dhcp_t2_timeout+0x30>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800e28a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800e28e:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800e292:	8223      	strh	r3, [r4, #16]
}
 800e294:	bd10      	pop	{r4, pc}
	...

0800e298 <dhcp_reboot>:
{
 800e298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e29c:	b084      	sub	sp, #16
 800e29e:	4680      	mov	r8, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e2a0:	f8d0 60c8 	ldr.w	r6, [r0, #200]	; 0xc8
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800e2a4:	2103      	movs	r1, #3
 800e2a6:	4630      	mov	r0, r6
 800e2a8:	f7ff fe28 	bl	800defc <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e2ac:	f10d 030e 	add.w	r3, sp, #14
 800e2b0:	2203      	movs	r2, #3
 800e2b2:	4631      	mov	r1, r6
 800e2b4:	4640      	mov	r0, r8
 800e2b6:	f7ff fea5 	bl	800e004 <dhcp_create_msg>
  if (p_out != NULL) {
 800e2ba:	2800      	cmp	r0, #0
 800e2bc:	d068      	beq.n	800e390 <dhcp_reboot+0xf8>
 800e2be:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e2c0:	6845      	ldr	r5, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e2c2:	35f0      	adds	r5, #240	; 0xf0
 800e2c4:	2302      	movs	r3, #2
 800e2c6:	2239      	movs	r2, #57	; 0x39
 800e2c8:	4629      	mov	r1, r5
 800e2ca:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e2ce:	f7ff fe3b 	bl	800df48 <dhcp_option>
 800e2d2:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800e2d6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e2da:	4629      	mov	r1, r5
 800e2dc:	f7ff fe16 	bl	800df0c <dhcp_option_short>
 800e2e0:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800e2e4:	2304      	movs	r3, #4
 800e2e6:	2232      	movs	r2, #50	; 0x32
 800e2e8:	4629      	mov	r1, r5
 800e2ea:	f7ff fe2d 	bl	800df48 <dhcp_option>
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e2f4:	6b30      	ldr	r0, [r6, #48]	; 0x30
 800e2f6:	f7f8 ff70 	bl	80071da <lwip_htonl>
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	4629      	mov	r1, r5
 800e2fe:	4620      	mov	r0, r4
 800e300:	f7ff fe58 	bl	800dfb4 <dhcp_option_long>
 800e304:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e308:	2304      	movs	r3, #4
 800e30a:	2237      	movs	r2, #55	; 0x37
 800e30c:	4629      	mov	r1, r5
 800e30e:	f7ff fe1b 	bl	800df48 <dhcp_option>
 800e312:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e316:	2400      	movs	r4, #0
 800e318:	e00a      	b.n	800e330 <dhcp_reboot+0x98>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e31a:	4b20      	ldr	r3, [pc, #128]	; (800e39c <dhcp_reboot+0x104>)
 800e31c:	5d1a      	ldrb	r2, [r3, r4]
 800e31e:	4629      	mov	r1, r5
 800e320:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e324:	f7ff fe2e 	bl	800df84 <dhcp_option_byte>
 800e328:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e32c:	3401      	adds	r4, #1
 800e32e:	b2e4      	uxtb	r4, r4
 800e330:	2c03      	cmp	r4, #3
 800e332:	d9f2      	bls.n	800e31a <dhcp_reboot+0x82>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e334:	463a      	mov	r2, r7
 800e336:	4629      	mov	r1, r5
 800e338:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e33c:	f7ff ff00 	bl	800e140 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e340:	4b17      	ldr	r3, [pc, #92]	; (800e3a0 <dhcp_reboot+0x108>)
 800e342:	6818      	ldr	r0, [r3, #0]
 800e344:	f8cd 8000 	str.w	r8, [sp]
 800e348:	2343      	movs	r3, #67	; 0x43
 800e34a:	4a16      	ldr	r2, [pc, #88]	; (800e3a4 <dhcp_reboot+0x10c>)
 800e34c:	4639      	mov	r1, r7
 800e34e:	f7ff fb1d 	bl	800d98c <udp_sendto_if>
 800e352:	4604      	mov	r4, r0
    pbuf_free(p_out);
 800e354:	4638      	mov	r0, r7
 800e356:	f7fa f9fd 	bl	8008754 <pbuf_free>
  if (dhcp->tries < 255) {
 800e35a:	79b3      	ldrb	r3, [r6, #6]
 800e35c:	2bff      	cmp	r3, #255	; 0xff
 800e35e:	d001      	beq.n	800e364 <dhcp_reboot+0xcc>
    dhcp->tries++;
 800e360:	3301      	adds	r3, #1
 800e362:	71b3      	strb	r3, [r6, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800e364:	79b3      	ldrb	r3, [r6, #6]
 800e366:	2b09      	cmp	r3, #9
 800e368:	d815      	bhi.n	800e396 <dhcp_reboot+0xfe>
 800e36a:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800e36e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e372:	00d3      	lsls	r3, r2, #3
 800e374:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e376:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e37a:	4a0b      	ldr	r2, [pc, #44]	; (800e3a8 <dhcp_reboot+0x110>)
 800e37c:	fb82 1203 	smull	r1, r2, r2, r3
 800e380:	17db      	asrs	r3, r3, #31
 800e382:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800e386:	8133      	strh	r3, [r6, #8]
}
 800e388:	4620      	mov	r0, r4
 800e38a:	b004      	add	sp, #16
 800e38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 800e390:	f04f 34ff 	mov.w	r4, #4294967295
 800e394:	e7e1      	b.n	800e35a <dhcp_reboot+0xc2>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800e396:	f242 7310 	movw	r3, #10000	; 0x2710
 800e39a:	e7ec      	b.n	800e376 <dhcp_reboot+0xde>
 800e39c:	08018224 	.word	0x08018224
 800e3a0:	2000178c 	.word	0x2000178c
 800e3a4:	08018804 	.word	0x08018804
 800e3a8:	10624dd3 	.word	0x10624dd3

0800e3ac <dhcp_select>:
{
 800e3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3b0:	b084      	sub	sp, #16
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800e3b2:	2800      	cmp	r0, #0
 800e3b4:	d052      	beq.n	800e45c <dhcp_select+0xb0>
 800e3b6:	4607      	mov	r7, r0
  dhcp = netif_dhcp_data(netif);
 800e3b8:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800e3bc:	2d00      	cmp	r5, #0
 800e3be:	d057      	beq.n	800e470 <dhcp_select+0xc4>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800e3c0:	2101      	movs	r1, #1
 800e3c2:	4628      	mov	r0, r5
 800e3c4:	f7ff fd9a 	bl	800defc <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e3c8:	f10d 030e 	add.w	r3, sp, #14
 800e3cc:	2203      	movs	r2, #3
 800e3ce:	4629      	mov	r1, r5
 800e3d0:	4638      	mov	r0, r7
 800e3d2:	f7ff fe17 	bl	800e004 <dhcp_create_msg>
  if (p_out != NULL) {
 800e3d6:	4680      	mov	r8, r0
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	f000 8091 	beq.w	800e500 <dhcp_select+0x154>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e3de:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e3e0:	36f0      	adds	r6, #240	; 0xf0
 800e3e2:	2302      	movs	r3, #2
 800e3e4:	2239      	movs	r2, #57	; 0x39
 800e3e6:	4631      	mov	r1, r6
 800e3e8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e3ec:	f7ff fdac 	bl	800df48 <dhcp_option>
 800e3f0:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e3f4:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 800e3f8:	4631      	mov	r1, r6
 800e3fa:	f7ff fd87 	bl	800df0c <dhcp_option_short>
 800e3fe:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800e402:	2304      	movs	r3, #4
 800e404:	2232      	movs	r2, #50	; 0x32
 800e406:	4631      	mov	r1, r6
 800e408:	f7ff fd9e 	bl	800df48 <dhcp_option>
 800e40c:	4604      	mov	r4, r0
 800e40e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e412:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800e414:	f7f8 fee1 	bl	80071da <lwip_htonl>
 800e418:	4602      	mov	r2, r0
 800e41a:	4631      	mov	r1, r6
 800e41c:	4620      	mov	r0, r4
 800e41e:	f7ff fdc9 	bl	800dfb4 <dhcp_option_long>
 800e422:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800e426:	2304      	movs	r3, #4
 800e428:	2236      	movs	r2, #54	; 0x36
 800e42a:	4631      	mov	r1, r6
 800e42c:	f7ff fd8c 	bl	800df48 <dhcp_option>
 800e430:	4604      	mov	r4, r0
 800e432:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800e436:	69a8      	ldr	r0, [r5, #24]
 800e438:	f7f8 fecf 	bl	80071da <lwip_htonl>
 800e43c:	4602      	mov	r2, r0
 800e43e:	4631      	mov	r1, r6
 800e440:	4620      	mov	r0, r4
 800e442:	f7ff fdb7 	bl	800dfb4 <dhcp_option_long>
 800e446:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e44a:	2304      	movs	r3, #4
 800e44c:	2237      	movs	r2, #55	; 0x37
 800e44e:	4631      	mov	r1, r6
 800e450:	f7ff fd7a 	bl	800df48 <dhcp_option>
 800e454:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e458:	2400      	movs	r4, #0
 800e45a:	e01e      	b.n	800e49a <dhcp_select+0xee>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800e45c:	4b2b      	ldr	r3, [pc, #172]	; (800e50c <dhcp_select+0x160>)
 800e45e:	f240 1277 	movw	r2, #375	; 0x177
 800e462:	492b      	ldr	r1, [pc, #172]	; (800e510 <dhcp_select+0x164>)
 800e464:	482b      	ldr	r0, [pc, #172]	; (800e514 <dhcp_select+0x168>)
 800e466:	f006 fced 	bl	8014e44 <iprintf>
 800e46a:	f06f 040f 	mvn.w	r4, #15
 800e46e:	e043      	b.n	800e4f8 <dhcp_select+0x14c>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800e470:	4b26      	ldr	r3, [pc, #152]	; (800e50c <dhcp_select+0x160>)
 800e472:	f240 1279 	movw	r2, #377	; 0x179
 800e476:	4928      	ldr	r1, [pc, #160]	; (800e518 <dhcp_select+0x16c>)
 800e478:	4826      	ldr	r0, [pc, #152]	; (800e514 <dhcp_select+0x168>)
 800e47a:	f006 fce3 	bl	8014e44 <iprintf>
 800e47e:	f06f 0405 	mvn.w	r4, #5
 800e482:	e039      	b.n	800e4f8 <dhcp_select+0x14c>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e484:	4b25      	ldr	r3, [pc, #148]	; (800e51c <dhcp_select+0x170>)
 800e486:	5d1a      	ldrb	r2, [r3, r4]
 800e488:	4631      	mov	r1, r6
 800e48a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e48e:	f7ff fd79 	bl	800df84 <dhcp_option_byte>
 800e492:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e496:	3401      	adds	r4, #1
 800e498:	b2e4      	uxtb	r4, r4
 800e49a:	2c03      	cmp	r4, #3
 800e49c:	d9f2      	bls.n	800e484 <dhcp_select+0xd8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e49e:	4642      	mov	r2, r8
 800e4a0:	4631      	mov	r1, r6
 800e4a2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e4a6:	f7ff fe4b 	bl	800e140 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e4aa:	4b1d      	ldr	r3, [pc, #116]	; (800e520 <dhcp_select+0x174>)
 800e4ac:	6818      	ldr	r0, [r3, #0]
 800e4ae:	4b1d      	ldr	r3, [pc, #116]	; (800e524 <dhcp_select+0x178>)
 800e4b0:	9301      	str	r3, [sp, #4]
 800e4b2:	9700      	str	r7, [sp, #0]
 800e4b4:	2343      	movs	r3, #67	; 0x43
 800e4b6:	4a1c      	ldr	r2, [pc, #112]	; (800e528 <dhcp_select+0x17c>)
 800e4b8:	4641      	mov	r1, r8
 800e4ba:	f7ff f949 	bl	800d750 <udp_sendto_if_src>
 800e4be:	4604      	mov	r4, r0
    pbuf_free(p_out);
 800e4c0:	4640      	mov	r0, r8
 800e4c2:	f7fa f947 	bl	8008754 <pbuf_free>
  if (dhcp->tries < 255) {
 800e4c6:	79ab      	ldrb	r3, [r5, #6]
 800e4c8:	2bff      	cmp	r3, #255	; 0xff
 800e4ca:	d001      	beq.n	800e4d0 <dhcp_select+0x124>
    dhcp->tries++;
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	71ab      	strb	r3, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800e4d0:	79aa      	ldrb	r2, [r5, #6]
 800e4d2:	2a05      	cmp	r2, #5
 800e4d4:	d817      	bhi.n	800e506 <dhcp_select+0x15a>
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	4093      	lsls	r3, r2
 800e4da:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800e4de:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e4e2:	00d3      	lsls	r3, r2, #3
 800e4e4:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e4e6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e4ea:	4a10      	ldr	r2, [pc, #64]	; (800e52c <dhcp_select+0x180>)
 800e4ec:	fb82 1203 	smull	r1, r2, r2, r3
 800e4f0:	17db      	asrs	r3, r3, #31
 800e4f2:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800e4f6:	812b      	strh	r3, [r5, #8]
}
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	b004      	add	sp, #16
 800e4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 800e500:	f04f 34ff 	mov.w	r4, #4294967295
 800e504:	e7df      	b.n	800e4c6 <dhcp_select+0x11a>
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800e506:	f64e 2360 	movw	r3, #60000	; 0xea60
 800e50a:	e7ec      	b.n	800e4e6 <dhcp_select+0x13a>
 800e50c:	08018308 	.word	0x08018308
 800e510:	08018440 	.word	0x08018440
 800e514:	08015d2c 	.word	0x08015d2c
 800e518:	0801845c 	.word	0x0801845c
 800e51c:	08018224 	.word	0x08018224
 800e520:	2000178c 	.word	0x2000178c
 800e524:	080187ec 	.word	0x080187ec
 800e528:	08018804 	.word	0x08018804
 800e52c:	10624dd3 	.word	0x10624dd3

0800e530 <dhcp_handle_offer>:
{
 800e530:	b570      	push	{r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e532:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800e536:	4b0e      	ldr	r3, [pc, #56]	; (800e570 <dhcp_handle_offer+0x40>)
 800e538:	789b      	ldrb	r3, [r3, #2]
 800e53a:	b1c3      	cbz	r3, 800e56e <dhcp_handle_offer+0x3e>
 800e53c:	460e      	mov	r6, r1
 800e53e:	4605      	mov	r5, r0
    dhcp->request_timeout = 0; /* stop timer */
 800e540:	2300      	movs	r3, #0
 800e542:	8123      	strh	r3, [r4, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800e544:	f114 0f18 	cmn.w	r4, #24
 800e548:	d00c      	beq.n	800e564 <dhcp_handle_offer+0x34>
 800e54a:	4b0a      	ldr	r3, [pc, #40]	; (800e574 <dhcp_handle_offer+0x44>)
 800e54c:	6898      	ldr	r0, [r3, #8]
 800e54e:	f7f8 fe44 	bl	80071da <lwip_htonl>
 800e552:	61a0      	str	r0, [r4, #24]
 800e554:	2300      	movs	r3, #0
 800e556:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800e55a:	6263      	str	r3, [r4, #36]	; 0x24
 800e55c:	6223      	str	r3, [r4, #32]
 800e55e:	61e3      	str	r3, [r4, #28]
 800e560:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800e564:	6933      	ldr	r3, [r6, #16]
 800e566:	6323      	str	r3, [r4, #48]	; 0x30
    dhcp_select(netif);
 800e568:	4628      	mov	r0, r5
 800e56a:	f7ff ff1f 	bl	800e3ac <dhcp_select>
}
 800e56e:	bd70      	pop	{r4, r5, r6, pc}
 800e570:	2000862c 	.word	0x2000862c
 800e574:	20008638 	.word	0x20008638

0800e578 <dhcp_discover>:
{
 800e578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e57c:	b084      	sub	sp, #16
 800e57e:	4607      	mov	r7, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e580:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800e584:	2300      	movs	r3, #0
 800e586:	632b      	str	r3, [r5, #48]	; 0x30
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800e588:	2106      	movs	r1, #6
 800e58a:	4628      	mov	r0, r5
 800e58c:	f7ff fcb6 	bl	800defc <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800e590:	f10d 030e 	add.w	r3, sp, #14
 800e594:	2201      	movs	r2, #1
 800e596:	4629      	mov	r1, r5
 800e598:	4638      	mov	r0, r7
 800e59a:	f7ff fd33 	bl	800e004 <dhcp_create_msg>
  if (p_out != NULL) {
 800e59e:	2800      	cmp	r0, #0
 800e5a0:	d03b      	beq.n	800e61a <dhcp_discover+0xa2>
 800e5a2:	4680      	mov	r8, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e5a4:	6846      	ldr	r6, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e5a6:	36f0      	adds	r6, #240	; 0xf0
 800e5a8:	2302      	movs	r3, #2
 800e5aa:	2239      	movs	r2, #57	; 0x39
 800e5ac:	4631      	mov	r1, r6
 800e5ae:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e5b2:	f7ff fcc9 	bl	800df48 <dhcp_option>
 800e5b6:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e5ba:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 800e5be:	4631      	mov	r1, r6
 800e5c0:	f7ff fca4 	bl	800df0c <dhcp_option_short>
 800e5c4:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e5c8:	2304      	movs	r3, #4
 800e5ca:	2237      	movs	r2, #55	; 0x37
 800e5cc:	4631      	mov	r1, r6
 800e5ce:	f7ff fcbb 	bl	800df48 <dhcp_option>
 800e5d2:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e5d6:	2400      	movs	r4, #0
 800e5d8:	e00a      	b.n	800e5f0 <dhcp_discover+0x78>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e5da:	4b20      	ldr	r3, [pc, #128]	; (800e65c <dhcp_discover+0xe4>)
 800e5dc:	5d1a      	ldrb	r2, [r3, r4]
 800e5de:	4631      	mov	r1, r6
 800e5e0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e5e4:	f7ff fcce 	bl	800df84 <dhcp_option_byte>
 800e5e8:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e5ec:	3401      	adds	r4, #1
 800e5ee:	b2e4      	uxtb	r4, r4
 800e5f0:	2c03      	cmp	r4, #3
 800e5f2:	d9f2      	bls.n	800e5da <dhcp_discover+0x62>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e5f4:	4642      	mov	r2, r8
 800e5f6:	4631      	mov	r1, r6
 800e5f8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e5fc:	f7ff fda0 	bl	800e140 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e600:	4b17      	ldr	r3, [pc, #92]	; (800e660 <dhcp_discover+0xe8>)
 800e602:	6818      	ldr	r0, [r3, #0]
 800e604:	4b17      	ldr	r3, [pc, #92]	; (800e664 <dhcp_discover+0xec>)
 800e606:	9301      	str	r3, [sp, #4]
 800e608:	9700      	str	r7, [sp, #0]
 800e60a:	2343      	movs	r3, #67	; 0x43
 800e60c:	4a16      	ldr	r2, [pc, #88]	; (800e668 <dhcp_discover+0xf0>)
 800e60e:	4641      	mov	r1, r8
 800e610:	f7ff f89e 	bl	800d750 <udp_sendto_if_src>
    pbuf_free(p_out);
 800e614:	4640      	mov	r0, r8
 800e616:	f7fa f89d 	bl	8008754 <pbuf_free>
  if (dhcp->tries < 255) {
 800e61a:	79ab      	ldrb	r3, [r5, #6]
 800e61c:	2bff      	cmp	r3, #255	; 0xff
 800e61e:	d001      	beq.n	800e624 <dhcp_discover+0xac>
    dhcp->tries++;
 800e620:	3301      	adds	r3, #1
 800e622:	71ab      	strb	r3, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800e624:	79aa      	ldrb	r2, [r5, #6]
 800e626:	2a05      	cmp	r2, #5
 800e628:	d814      	bhi.n	800e654 <dhcp_discover+0xdc>
 800e62a:	2301      	movs	r3, #1
 800e62c:	4093      	lsls	r3, r2
 800e62e:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800e632:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e636:	00d3      	lsls	r3, r2, #3
 800e638:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e63a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e63e:	4a0b      	ldr	r2, [pc, #44]	; (800e66c <dhcp_discover+0xf4>)
 800e640:	fb82 1203 	smull	r1, r2, r2, r3
 800e644:	17db      	asrs	r3, r3, #31
 800e646:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800e64a:	812b      	strh	r3, [r5, #8]
}
 800e64c:	2000      	movs	r0, #0
 800e64e:	b004      	add	sp, #16
 800e650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800e654:	f64e 2360 	movw	r3, #60000	; 0xea60
 800e658:	e7ef      	b.n	800e63a <dhcp_discover+0xc2>
 800e65a:	bf00      	nop
 800e65c:	08018224 	.word	0x08018224
 800e660:	2000178c 	.word	0x2000178c
 800e664:	080187ec 	.word	0x080187ec
 800e668:	08018804 	.word	0x08018804
 800e66c:	10624dd3 	.word	0x10624dd3

0800e670 <dhcp_decline>:
{
 800e670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e674:	b084      	sub	sp, #16
 800e676:	4607      	mov	r7, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e678:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800e67c:	210c      	movs	r1, #12
 800e67e:	4620      	mov	r0, r4
 800e680:	f7ff fc3c 	bl	800defc <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800e684:	f10d 030e 	add.w	r3, sp, #14
 800e688:	2204      	movs	r2, #4
 800e68a:	4621      	mov	r1, r4
 800e68c:	4638      	mov	r0, r7
 800e68e:	f7ff fcb9 	bl	800e004 <dhcp_create_msg>
  if (p_out != NULL) {
 800e692:	b398      	cbz	r0, 800e6fc <dhcp_decline+0x8c>
 800e694:	4606      	mov	r6, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e696:	6845      	ldr	r5, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800e698:	35f0      	adds	r5, #240	; 0xf0
 800e69a:	2304      	movs	r3, #4
 800e69c:	2232      	movs	r2, #50	; 0x32
 800e69e:	4629      	mov	r1, r5
 800e6a0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800e6a4:	f7ff fc50 	bl	800df48 <dhcp_option>
 800e6a8:	4680      	mov	r8, r0
 800e6aa:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e6ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800e6b0:	f7f8 fd93 	bl	80071da <lwip_htonl>
 800e6b4:	4602      	mov	r2, r0
 800e6b6:	4629      	mov	r1, r5
 800e6b8:	4640      	mov	r0, r8
 800e6ba:	f7ff fc7b 	bl	800dfb4 <dhcp_option_long>
 800e6be:	f8ad 000e 	strh.w	r0, [sp, #14]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e6c2:	4632      	mov	r2, r6
 800e6c4:	4629      	mov	r1, r5
 800e6c6:	f7ff fd3b 	bl	800e140 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e6ca:	4b0e      	ldr	r3, [pc, #56]	; (800e704 <dhcp_decline+0x94>)
 800e6cc:	6818      	ldr	r0, [r3, #0]
 800e6ce:	4b0e      	ldr	r3, [pc, #56]	; (800e708 <dhcp_decline+0x98>)
 800e6d0:	9301      	str	r3, [sp, #4]
 800e6d2:	9700      	str	r7, [sp, #0]
 800e6d4:	2343      	movs	r3, #67	; 0x43
 800e6d6:	4a0d      	ldr	r2, [pc, #52]	; (800e70c <dhcp_decline+0x9c>)
 800e6d8:	4631      	mov	r1, r6
 800e6da:	f7ff f839 	bl	800d750 <udp_sendto_if_src>
 800e6de:	4605      	mov	r5, r0
    pbuf_free(p_out);
 800e6e0:	4630      	mov	r0, r6
 800e6e2:	f7fa f837 	bl	8008754 <pbuf_free>
  if (dhcp->tries < 255) {
 800e6e6:	79a3      	ldrb	r3, [r4, #6]
 800e6e8:	2bff      	cmp	r3, #255	; 0xff
 800e6ea:	d001      	beq.n	800e6f0 <dhcp_decline+0x80>
    dhcp->tries++;
 800e6ec:	3301      	adds	r3, #1
 800e6ee:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e6f0:	2314      	movs	r3, #20
 800e6f2:	8123      	strh	r3, [r4, #8]
}
 800e6f4:	4628      	mov	r0, r5
 800e6f6:	b004      	add	sp, #16
 800e6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 800e6fc:	f04f 35ff 	mov.w	r5, #4294967295
 800e700:	e7f1      	b.n	800e6e6 <dhcp_decline+0x76>
 800e702:	bf00      	nop
 800e704:	2000178c 	.word	0x2000178c
 800e708:	080187ec 	.word	0x080187ec
 800e70c:	08018804 	.word	0x08018804

0800e710 <dhcp_check>:
{
 800e710:	b538      	push	{r3, r4, r5, lr}
 800e712:	4605      	mov	r5, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e714:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800e718:	2108      	movs	r1, #8
 800e71a:	4620      	mov	r0, r4
 800e71c:	f7ff fbee 	bl	800defc <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800e720:	2200      	movs	r2, #0
 800e722:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800e726:	4628      	mov	r0, r5
 800e728:	f001 f9c2 	bl	800fab0 <etharp_query>
  if (dhcp->tries < 255) {
 800e72c:	79a3      	ldrb	r3, [r4, #6]
 800e72e:	2bff      	cmp	r3, #255	; 0xff
 800e730:	d001      	beq.n	800e736 <dhcp_check+0x26>
    dhcp->tries++;
 800e732:	3301      	adds	r3, #1
 800e734:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e736:	2301      	movs	r3, #1
 800e738:	8123      	strh	r3, [r4, #8]
}
 800e73a:	bd38      	pop	{r3, r4, r5, pc}

0800e73c <dhcp_bind>:
{
 800e73c:	b530      	push	{r4, r5, lr}
 800e73e:	b083      	sub	sp, #12
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800e740:	2800      	cmp	r0, #0
 800e742:	d064      	beq.n	800e80e <dhcp_bind+0xd2>
 800e744:	4605      	mov	r5, r0
  dhcp = netif_dhcp_data(netif);
 800e746:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800e74a:	2c00      	cmp	r4, #0
 800e74c:	d067      	beq.n	800e81e <dhcp_bind+0xe2>
  dhcp->lease_used = 0;
 800e74e:	2300      	movs	r3, #0
 800e750:	8263      	strh	r3, [r4, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800e752:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e758:	d00e      	beq.n	800e778 <dhcp_bind+0x3c>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800e75a:	331e      	adds	r3, #30
 800e75c:	4a3d      	ldr	r2, [pc, #244]	; (800e854 <dhcp_bind+0x118>)
 800e75e:	fba2 2303 	umull	r2, r3, r2, r3
 800e762:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 800e764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e768:	d301      	bcc.n	800e76e <dhcp_bind+0x32>
      timeout = 0xffff;
 800e76a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t0_timeout = (u16_t)timeout;
 800e76e:	b29b      	uxth	r3, r3
 800e770:	82a3      	strh	r3, [r4, #20]
    if (dhcp->t0_timeout == 0) {
 800e772:	b90b      	cbnz	r3, 800e778 <dhcp_bind+0x3c>
      dhcp->t0_timeout = 1;
 800e774:	2301      	movs	r3, #1
 800e776:	82a3      	strh	r3, [r4, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800e778:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e77e:	d010      	beq.n	800e7a2 <dhcp_bind+0x66>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800e780:	331e      	adds	r3, #30
 800e782:	4a34      	ldr	r2, [pc, #208]	; (800e854 <dhcp_bind+0x118>)
 800e784:	fba2 2303 	umull	r2, r3, r2, r3
 800e788:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 800e78a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e78e:	d301      	bcc.n	800e794 <dhcp_bind+0x58>
      timeout = 0xffff;
 800e790:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t1_timeout = (u16_t)timeout;
 800e794:	b29b      	uxth	r3, r3
 800e796:	8163      	strh	r3, [r4, #10]
    if (dhcp->t1_timeout == 0) {
 800e798:	b90b      	cbnz	r3, 800e79e <dhcp_bind+0x62>
      dhcp->t1_timeout = 1;
 800e79a:	2301      	movs	r3, #1
 800e79c:	8163      	strh	r3, [r4, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800e79e:	8963      	ldrh	r3, [r4, #10]
 800e7a0:	81e3      	strh	r3, [r4, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800e7a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7a8:	d010      	beq.n	800e7cc <dhcp_bind+0x90>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800e7aa:	331e      	adds	r3, #30
 800e7ac:	4a29      	ldr	r2, [pc, #164]	; (800e854 <dhcp_bind+0x118>)
 800e7ae:	fba2 2303 	umull	r2, r3, r2, r3
 800e7b2:	095b      	lsrs	r3, r3, #5
    if (timeout > 0xffff) {
 800e7b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7b8:	d301      	bcc.n	800e7be <dhcp_bind+0x82>
      timeout = 0xffff;
 800e7ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dhcp->t2_timeout = (u16_t)timeout;
 800e7be:	b29b      	uxth	r3, r3
 800e7c0:	81a3      	strh	r3, [r4, #12]
    if (dhcp->t2_timeout == 0) {
 800e7c2:	b90b      	cbnz	r3, 800e7c8 <dhcp_bind+0x8c>
      dhcp->t2_timeout = 1;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	81a3      	strh	r3, [r4, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800e7c8:	89a3      	ldrh	r3, [r4, #12]
 800e7ca:	8223      	strh	r3, [r4, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800e7cc:	8962      	ldrh	r2, [r4, #10]
 800e7ce:	89a3      	ldrh	r3, [r4, #12]
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d302      	bcc.n	800e7da <dhcp_bind+0x9e>
 800e7d4:	b10b      	cbz	r3, 800e7da <dhcp_bind+0x9e>
    dhcp->t1_timeout = 0;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	8163      	strh	r3, [r4, #10]
  if (dhcp->subnet_mask_given) {
 800e7da:	79e3      	ldrb	r3, [r4, #7]
 800e7dc:	b33b      	cbz	r3, 800e82e <dhcp_bind+0xf2>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800e7de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e7e0:	9301      	str	r3, [sp, #4]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800e7e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e7e4:	9300      	str	r3, [sp, #0]
  if (ip4_addr_isany_val(gw_addr)) {
 800e7e6:	b92b      	cbnz	r3, 800e7f4 <dhcp_bind+0xb8>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800e7e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e7ea:	9a01      	ldr	r2, [sp, #4]
 800e7ec:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800e7ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e7f2:	9300      	str	r3, [sp, #0]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800e7f4:	210a      	movs	r1, #10
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	f7ff fb80 	bl	800defc <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800e7fc:	466b      	mov	r3, sp
 800e7fe:	aa01      	add	r2, sp, #4
 800e800:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800e804:	4628      	mov	r0, r5
 800e806:	f7f9 fbdf 	bl	8007fc8 <netif_set_addr>
}
 800e80a:	b003      	add	sp, #12
 800e80c:	bd30      	pop	{r4, r5, pc}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800e80e:	4b12      	ldr	r3, [pc, #72]	; (800e858 <dhcp_bind+0x11c>)
 800e810:	f240 4215 	movw	r2, #1045	; 0x415
 800e814:	4911      	ldr	r1, [pc, #68]	; (800e85c <dhcp_bind+0x120>)
 800e816:	4812      	ldr	r0, [pc, #72]	; (800e860 <dhcp_bind+0x124>)
 800e818:	f006 fb14 	bl	8014e44 <iprintf>
 800e81c:	e7f5      	b.n	800e80a <dhcp_bind+0xce>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800e81e:	4b0e      	ldr	r3, [pc, #56]	; (800e858 <dhcp_bind+0x11c>)
 800e820:	f240 4217 	movw	r2, #1047	; 0x417
 800e824:	490f      	ldr	r1, [pc, #60]	; (800e864 <dhcp_bind+0x128>)
 800e826:	480e      	ldr	r0, [pc, #56]	; (800e860 <dhcp_bind+0x124>)
 800e828:	f006 fb0c 	bl	8014e44 <iprintf>
 800e82c:	e7ed      	b.n	800e80a <dhcp_bind+0xce>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800e82e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    if (first_octet <= 127) {
 800e832:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e836:	d102      	bne.n	800e83e <dhcp_bind+0x102>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800e838:	23ff      	movs	r3, #255	; 0xff
 800e83a:	9301      	str	r3, [sp, #4]
 800e83c:	e7d1      	b.n	800e7e2 <dhcp_bind+0xa6>
    } else if (first_octet >= 192) {
 800e83e:	2bbf      	cmp	r3, #191	; 0xbf
 800e840:	d903      	bls.n	800e84a <dhcp_bind+0x10e>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800e842:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800e846:	9301      	str	r3, [sp, #4]
 800e848:	e7cb      	b.n	800e7e2 <dhcp_bind+0xa6>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800e84a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e84e:	9301      	str	r3, [sp, #4]
 800e850:	e7c7      	b.n	800e7e2 <dhcp_bind+0xa6>
 800e852:	bf00      	nop
 800e854:	88888889 	.word	0x88888889
 800e858:	08018308 	.word	0x08018308
 800e85c:	0801814c 	.word	0x0801814c
 800e860:	08015d2c 	.word	0x08015d2c
 800e864:	08018168 	.word	0x08018168

0800e868 <dhcp_handle_nak>:
{
 800e868:	b510      	push	{r4, lr}
 800e86a:	4604      	mov	r4, r0
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800e86c:	210c      	movs	r1, #12
 800e86e:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 800e872:	f7ff fb43 	bl	800defc <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e876:	4905      	ldr	r1, [pc, #20]	; (800e88c <dhcp_handle_nak+0x24>)
 800e878:	460b      	mov	r3, r1
 800e87a:	460a      	mov	r2, r1
 800e87c:	4620      	mov	r0, r4
 800e87e:	f7f9 fba3 	bl	8007fc8 <netif_set_addr>
  dhcp_discover(netif);
 800e882:	4620      	mov	r0, r4
 800e884:	f7ff fe78 	bl	800e578 <dhcp_discover>
}
 800e888:	bd10      	pop	{r4, pc}
 800e88a:	bf00      	nop
 800e88c:	080187ec 	.word	0x080187ec

0800e890 <dhcp_dec_pcb_refcount>:
{
 800e890:	b510      	push	{r4, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800e892:	4b0c      	ldr	r3, [pc, #48]	; (800e8c4 <dhcp_dec_pcb_refcount+0x34>)
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	b133      	cbz	r3, 800e8a6 <dhcp_dec_pcb_refcount+0x16>
  dhcp_pcb_refcount--;
 800e898:	4a0a      	ldr	r2, [pc, #40]	; (800e8c4 <dhcp_dec_pcb_refcount+0x34>)
 800e89a:	7813      	ldrb	r3, [r2, #0]
 800e89c:	3b01      	subs	r3, #1
 800e89e:	b2db      	uxtb	r3, r3
 800e8a0:	7013      	strb	r3, [r2, #0]
  if (dhcp_pcb_refcount == 0) {
 800e8a2:	b13b      	cbz	r3, 800e8b4 <dhcp_dec_pcb_refcount+0x24>
}
 800e8a4:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800e8a6:	4b08      	ldr	r3, [pc, #32]	; (800e8c8 <dhcp_dec_pcb_refcount+0x38>)
 800e8a8:	22ff      	movs	r2, #255	; 0xff
 800e8aa:	4908      	ldr	r1, [pc, #32]	; (800e8cc <dhcp_dec_pcb_refcount+0x3c>)
 800e8ac:	4808      	ldr	r0, [pc, #32]	; (800e8d0 <dhcp_dec_pcb_refcount+0x40>)
 800e8ae:	f006 fac9 	bl	8014e44 <iprintf>
 800e8b2:	e7f1      	b.n	800e898 <dhcp_dec_pcb_refcount+0x8>
    udp_remove(dhcp_pcb);
 800e8b4:	4c07      	ldr	r4, [pc, #28]	; (800e8d4 <dhcp_dec_pcb_refcount+0x44>)
 800e8b6:	6820      	ldr	r0, [r4, #0]
 800e8b8:	f7ff fa44 	bl	800dd44 <udp_remove>
    dhcp_pcb = NULL;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	6023      	str	r3, [r4, #0]
}
 800e8c0:	e7f0      	b.n	800e8a4 <dhcp_dec_pcb_refcount+0x14>
 800e8c2:	bf00      	nop
 800e8c4:	20001790 	.word	0x20001790
 800e8c8:	08018308 	.word	0x08018308
 800e8cc:	08018200 	.word	0x08018200
 800e8d0:	08015d2c 	.word	0x08015d2c
 800e8d4:	2000178c 	.word	0x2000178c

0800e8d8 <dhcp_inc_pcb_refcount>:
{
 800e8d8:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 800e8da:	4b18      	ldr	r3, [pc, #96]	; (800e93c <dhcp_inc_pcb_refcount+0x64>)
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	bb1b      	cbnz	r3, 800e928 <dhcp_inc_pcb_refcount+0x50>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800e8e0:	4b17      	ldr	r3, [pc, #92]	; (800e940 <dhcp_inc_pcb_refcount+0x68>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	b12b      	cbz	r3, 800e8f2 <dhcp_inc_pcb_refcount+0x1a>
 800e8e6:	4b17      	ldr	r3, [pc, #92]	; (800e944 <dhcp_inc_pcb_refcount+0x6c>)
 800e8e8:	22e5      	movs	r2, #229	; 0xe5
 800e8ea:	4917      	ldr	r1, [pc, #92]	; (800e948 <dhcp_inc_pcb_refcount+0x70>)
 800e8ec:	4817      	ldr	r0, [pc, #92]	; (800e94c <dhcp_inc_pcb_refcount+0x74>)
 800e8ee:	f006 faa9 	bl	8014e44 <iprintf>
    dhcp_pcb = udp_new();
 800e8f2:	f7ff fa51 	bl	800dd98 <udp_new>
 800e8f6:	4b12      	ldr	r3, [pc, #72]	; (800e940 <dhcp_inc_pcb_refcount+0x68>)
 800e8f8:	6018      	str	r0, [r3, #0]
    if (dhcp_pcb == NULL) {
 800e8fa:	b1d8      	cbz	r0, 800e934 <dhcp_inc_pcb_refcount+0x5c>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800e8fc:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800e900:	f043 0320 	orr.w	r3, r3, #32
 800e904:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800e908:	4d11      	ldr	r5, [pc, #68]	; (800e950 <dhcp_inc_pcb_refcount+0x78>)
 800e90a:	2244      	movs	r2, #68	; 0x44
 800e90c:	4629      	mov	r1, r5
 800e90e:	f7fe fdb9 	bl	800d484 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800e912:	4c0b      	ldr	r4, [pc, #44]	; (800e940 <dhcp_inc_pcb_refcount+0x68>)
 800e914:	2243      	movs	r2, #67	; 0x43
 800e916:	4629      	mov	r1, r5
 800e918:	6820      	ldr	r0, [r4, #0]
 800e91a:	f7ff f947 	bl	800dbac <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800e91e:	2200      	movs	r2, #0
 800e920:	490c      	ldr	r1, [pc, #48]	; (800e954 <dhcp_inc_pcb_refcount+0x7c>)
 800e922:	6820      	ldr	r0, [r4, #0]
 800e924:	f7ff f9fa 	bl	800dd1c <udp_recv>
  dhcp_pcb_refcount++;
 800e928:	4a04      	ldr	r2, [pc, #16]	; (800e93c <dhcp_inc_pcb_refcount+0x64>)
 800e92a:	7813      	ldrb	r3, [r2, #0]
 800e92c:	3301      	adds	r3, #1
 800e92e:	7013      	strb	r3, [r2, #0]
  return ERR_OK;
 800e930:	2000      	movs	r0, #0
}
 800e932:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 800e934:	f04f 30ff 	mov.w	r0, #4294967295
 800e938:	e7fb      	b.n	800e932 <dhcp_inc_pcb_refcount+0x5a>
 800e93a:	bf00      	nop
 800e93c:	20001790 	.word	0x20001790
 800e940:	2000178c 	.word	0x2000178c
 800e944:	08018308 	.word	0x08018308
 800e948:	08018228 	.word	0x08018228
 800e94c:	08015d2c 	.word	0x08015d2c
 800e950:	080187ec 	.word	0x080187ec
 800e954:	0800eeed 	.word	0x0800eeed

0800e958 <dhcp_parse_reply>:
  dhcp_clear_all_options(dhcp);
 800e958:	4bc5      	ldr	r3, [pc, #788]	; (800ec70 <dhcp_parse_reply+0x318>)
 800e95a:	2200      	movs	r2, #0
 800e95c:	601a      	str	r2, [r3, #0]
 800e95e:	605a      	str	r2, [r3, #4]
 800e960:	811a      	strh	r2, [r3, #8]
  if (p->len < DHCP_SNAME_OFS) {
 800e962:	8943      	ldrh	r3, [r0, #10]
 800e964:	2b2b      	cmp	r3, #43	; 0x2b
 800e966:	f240 8242 	bls.w	800edee <dhcp_parse_reply+0x496>
{
 800e96a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e96e:	b087      	sub	sp, #28
 800e970:	9002      	str	r0, [sp, #8]
  options_idx_max = p->tot_len;
 800e972:	8905      	ldrh	r5, [r0, #8]
  int parse_sname_as_options = 0;
 800e974:	9203      	str	r2, [sp, #12]
  options_idx = DHCP_OPTIONS_OFS;
 800e976:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
  q = p;
 800e97a:	9e02      	ldr	r6, [sp, #8]
  while ((q != NULL) && (options_idx >= q->len)) {
 800e97c:	e010      	b.n	800e9a0 <dhcp_parse_reply+0x48>
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800e97e:	25ec      	movs	r5, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 800e980:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
 800e984:	e7f9      	b.n	800e97a <dhcp_parse_reply+0x22>
      parse_sname_as_options = 1;
 800e986:	2301      	movs	r3, #1
 800e988:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800e98a:	25ec      	movs	r5, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 800e98c:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
 800e990:	e7f3      	b.n	800e97a <dhcp_parse_reply+0x22>
    options_idx = (u16_t)(options_idx - q->len);
 800e992:	ebab 0b03 	sub.w	fp, fp, r3
 800e996:	fa1f fb8b 	uxth.w	fp, fp
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800e99a:	1aed      	subs	r5, r5, r3
 800e99c:	b2ad      	uxth	r5, r5
    q = q->next;
 800e99e:	6836      	ldr	r6, [r6, #0]
  while ((q != NULL) && (options_idx >= q->len)) {
 800e9a0:	b116      	cbz	r6, 800e9a8 <dhcp_parse_reply+0x50>
 800e9a2:	8973      	ldrh	r3, [r6, #10]
 800e9a4:	455b      	cmp	r3, fp
 800e9a6:	d9f4      	bls.n	800e992 <dhcp_parse_reply+0x3a>
  if (q == NULL) {
 800e9a8:	2e00      	cmp	r6, #0
 800e9aa:	f000 8223 	beq.w	800edf4 <dhcp_parse_reply+0x49c>
  options = (u8_t *)q->payload;
 800e9ae:	6873      	ldr	r3, [r6, #4]
 800e9b0:	9301      	str	r3, [sp, #4]
  offset = options_idx;
 800e9b2:	465c      	mov	r4, fp
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800e9b4:	e01f      	b.n	800e9f6 <dhcp_parse_reply+0x9e>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800e9b6:	6833      	ldr	r3, [r6, #0]
 800e9b8:	b113      	cbz	r3, 800e9c0 <dhcp_parse_reply+0x68>
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	781b      	ldrb	r3, [r3, #0]
 800e9be:	e035      	b.n	800ea2c <dhcp_parse_reply+0xd4>
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	e033      	b.n	800ea2c <dhcp_parse_reply+0xd4>
    int decode_idx = -1;
 800e9c4:	f04f 39ff 	mov.w	r9, #4294967295
        decode_len = len = 0;
 800e9c8:	2700      	movs	r7, #0
 800e9ca:	463b      	mov	r3, r7
    if (op == DHCP_OPTION_PAD) {
 800e9cc:	2a00      	cmp	r2, #0
 800e9ce:	f040 816d 	bne.w	800ecac <dhcp_parse_reply+0x354>
      offset++;
 800e9d2:	3401      	adds	r4, #1
 800e9d4:	b2a4      	uxth	r4, r4
    if (offset >= q->len) {
 800e9d6:	8973      	ldrh	r3, [r6, #10]
 800e9d8:	42a3      	cmp	r3, r4
 800e9da:	d80c      	bhi.n	800e9f6 <dhcp_parse_reply+0x9e>
      offset = (u16_t)(offset - q->len);
 800e9dc:	1ae4      	subs	r4, r4, r3
 800e9de:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 800e9e0:	1aed      	subs	r5, r5, r3
 800e9e2:	b2ad      	uxth	r5, r5
      if (offset < offset_max) {
 800e9e4:	42ac      	cmp	r4, r5
 800e9e6:	f080 820e 	bcs.w	800ee06 <dhcp_parse_reply+0x4ae>
        q = q->next;
 800e9ea:	6836      	ldr	r6, [r6, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800e9ec:	2e00      	cmp	r6, #0
 800e9ee:	f000 81d7 	beq.w	800eda0 <dhcp_parse_reply+0x448>
        options = (u8_t *)q->payload;
 800e9f2:	6873      	ldr	r3, [r6, #4]
 800e9f4:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800e9f6:	2e00      	cmp	r6, #0
 800e9f8:	f000 81dc 	beq.w	800edb4 <dhcp_parse_reply+0x45c>
 800e9fc:	42ac      	cmp	r4, r5
 800e9fe:	f080 81d9 	bcs.w	800edb4 <dhcp_parse_reply+0x45c>
 800ea02:	4620      	mov	r0, r4
 800ea04:	9b01      	ldr	r3, [sp, #4]
 800ea06:	5d1a      	ldrb	r2, [r3, r4]
 800ea08:	2aff      	cmp	r2, #255	; 0xff
 800ea0a:	f000 81d3 	beq.w	800edb4 <dhcp_parse_reply+0x45c>
    u16_t val_offset = (u16_t)(offset + 2);
 800ea0e:	f104 0802 	add.w	r8, r4, #2
 800ea12:	fa1f f888 	uxth.w	r8, r8
    if (val_offset < offset) {
 800ea16:	4544      	cmp	r4, r8
 800ea18:	f200 81ef 	bhi.w	800edfa <dhcp_parse_reply+0x4a2>
    if ((offset + 1) < q->len) {
 800ea1c:	4621      	mov	r1, r4
 800ea1e:	1c63      	adds	r3, r4, #1
 800ea20:	8977      	ldrh	r7, [r6, #10]
 800ea22:	42bb      	cmp	r3, r7
 800ea24:	dac7      	bge.n	800e9b6 <dhcp_parse_reply+0x5e>
      len = options[offset + 1];
 800ea26:	3001      	adds	r0, #1
 800ea28:	9b01      	ldr	r3, [sp, #4]
 800ea2a:	5c1b      	ldrb	r3, [r3, r0]
    switch (op) {
 800ea2c:	2a3b      	cmp	r2, #59	; 0x3b
 800ea2e:	f200 8139 	bhi.w	800eca4 <dhcp_parse_reply+0x34c>
 800ea32:	a001      	add	r0, pc, #4	; (adr r0, 800ea38 <dhcp_parse_reply+0xe0>)
 800ea34:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800ea38:	0800e9c5 	.word	0x0800e9c5
 800ea3c:	0800eb29 	.word	0x0800eb29
 800ea40:	0800eca5 	.word	0x0800eca5
 800ea44:	0800eb49 	.word	0x0800eb49
 800ea48:	0800eca5 	.word	0x0800eca5
 800ea4c:	0800eca5 	.word	0x0800eca5
 800ea50:	0800eb69 	.word	0x0800eb69
 800ea54:	0800eca5 	.word	0x0800eca5
 800ea58:	0800eca5 	.word	0x0800eca5
 800ea5c:	0800eca5 	.word	0x0800eca5
 800ea60:	0800eca5 	.word	0x0800eca5
 800ea64:	0800eca5 	.word	0x0800eca5
 800ea68:	0800eca5 	.word	0x0800eca5
 800ea6c:	0800eca5 	.word	0x0800eca5
 800ea70:	0800eca5 	.word	0x0800eca5
 800ea74:	0800eca5 	.word	0x0800eca5
 800ea78:	0800eca5 	.word	0x0800eca5
 800ea7c:	0800eca5 	.word	0x0800eca5
 800ea80:	0800eca5 	.word	0x0800eca5
 800ea84:	0800eca5 	.word	0x0800eca5
 800ea88:	0800eca5 	.word	0x0800eca5
 800ea8c:	0800eca5 	.word	0x0800eca5
 800ea90:	0800eca5 	.word	0x0800eca5
 800ea94:	0800eca5 	.word	0x0800eca5
 800ea98:	0800eca5 	.word	0x0800eca5
 800ea9c:	0800eca5 	.word	0x0800eca5
 800eaa0:	0800eca5 	.word	0x0800eca5
 800eaa4:	0800eca5 	.word	0x0800eca5
 800eaa8:	0800eca5 	.word	0x0800eca5
 800eaac:	0800eca5 	.word	0x0800eca5
 800eab0:	0800eca5 	.word	0x0800eca5
 800eab4:	0800eca5 	.word	0x0800eca5
 800eab8:	0800eca5 	.word	0x0800eca5
 800eabc:	0800eca5 	.word	0x0800eca5
 800eac0:	0800eca5 	.word	0x0800eca5
 800eac4:	0800eca5 	.word	0x0800eca5
 800eac8:	0800eca5 	.word	0x0800eca5
 800eacc:	0800eca5 	.word	0x0800eca5
 800ead0:	0800eca5 	.word	0x0800eca5
 800ead4:	0800eca5 	.word	0x0800eca5
 800ead8:	0800eca5 	.word	0x0800eca5
 800eadc:	0800eca5 	.word	0x0800eca5
 800eae0:	0800eca5 	.word	0x0800eca5
 800eae4:	0800eca5 	.word	0x0800eca5
 800eae8:	0800eca5 	.word	0x0800eca5
 800eaec:	0800eca5 	.word	0x0800eca5
 800eaf0:	0800eca5 	.word	0x0800eca5
 800eaf4:	0800eca5 	.word	0x0800eca5
 800eaf8:	0800eca5 	.word	0x0800eca5
 800eafc:	0800eca5 	.word	0x0800eca5
 800eb00:	0800eca5 	.word	0x0800eca5
 800eb04:	0800eba9 	.word	0x0800eba9
 800eb08:	0800ebc9 	.word	0x0800ebc9
 800eb0c:	0800ec03 	.word	0x0800ec03
 800eb10:	0800ec23 	.word	0x0800ec23
 800eb14:	0800eca5 	.word	0x0800eca5
 800eb18:	0800eca5 	.word	0x0800eca5
 800eb1c:	0800eca5 	.word	0x0800eca5
 800eb20:	0800ec43 	.word	0x0800ec43
 800eb24:	0800ec63 	.word	0x0800ec63
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800eb28:	2b04      	cmp	r3, #4
 800eb2a:	d103      	bne.n	800eb34 <dhcp_parse_reply+0x1dc>
    decode_len = len;
 800eb2c:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800eb2e:	f04f 0906 	mov.w	r9, #6
 800eb32:	e74b      	b.n	800e9cc <dhcp_parse_reply+0x74>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800eb34:	4b4f      	ldr	r3, [pc, #316]	; (800ec74 <dhcp_parse_reply+0x31c>)
 800eb36:	f240 622e 	movw	r2, #1582	; 0x62e
 800eb3a:	494f      	ldr	r1, [pc, #316]	; (800ec78 <dhcp_parse_reply+0x320>)
 800eb3c:	484f      	ldr	r0, [pc, #316]	; (800ec7c <dhcp_parse_reply+0x324>)
 800eb3e:	f006 f981 	bl	8014e44 <iprintf>
 800eb42:	f06f 0005 	mvn.w	r0, #5
 800eb46:	e125      	b.n	800ed94 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800eb48:	2b03      	cmp	r3, #3
 800eb4a:	d903      	bls.n	800eb54 <dhcp_parse_reply+0x1fc>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800eb4c:	f04f 0907 	mov.w	r9, #7
        decode_len = 4; /* only copy the first given router */
 800eb50:	2704      	movs	r7, #4
 800eb52:	e73b      	b.n	800e9cc <dhcp_parse_reply+0x74>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800eb54:	4b47      	ldr	r3, [pc, #284]	; (800ec74 <dhcp_parse_reply+0x31c>)
 800eb56:	f240 6233 	movw	r2, #1587	; 0x633
 800eb5a:	4949      	ldr	r1, [pc, #292]	; (800ec80 <dhcp_parse_reply+0x328>)
 800eb5c:	4847      	ldr	r0, [pc, #284]	; (800ec7c <dhcp_parse_reply+0x324>)
 800eb5e:	f006 f971 	bl	8014e44 <iprintf>
 800eb62:	f06f 0005 	mvn.w	r0, #5
 800eb66:	e115      	b.n	800ed94 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 800eb68:	f013 0f03 	tst.w	r3, #3
 800eb6c:	d108      	bne.n	800eb80 <dhcp_parse_reply+0x228>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 800eb6e:	461f      	mov	r7, r3
 800eb70:	2b08      	cmp	r3, #8
 800eb72:	bf28      	it	cs
 800eb74:	2708      	movcs	r7, #8
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800eb76:	42bb      	cmp	r3, r7
 800eb78:	d30c      	bcc.n	800eb94 <dhcp_parse_reply+0x23c>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 800eb7a:	f04f 0908 	mov.w	r9, #8
 800eb7e:	e725      	b.n	800e9cc <dhcp_parse_reply+0x74>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 800eb80:	4b3c      	ldr	r3, [pc, #240]	; (800ec74 <dhcp_parse_reply+0x31c>)
 800eb82:	f240 6239 	movw	r2, #1593	; 0x639
 800eb86:	493f      	ldr	r1, [pc, #252]	; (800ec84 <dhcp_parse_reply+0x32c>)
 800eb88:	483c      	ldr	r0, [pc, #240]	; (800ec7c <dhcp_parse_reply+0x324>)
 800eb8a:	f006 f95b 	bl	8014e44 <iprintf>
 800eb8e:	f06f 0005 	mvn.w	r0, #5
 800eb92:	e0ff      	b.n	800ed94 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800eb94:	4b37      	ldr	r3, [pc, #220]	; (800ec74 <dhcp_parse_reply+0x31c>)
 800eb96:	f240 623c 	movw	r2, #1596	; 0x63c
 800eb9a:	4939      	ldr	r1, [pc, #228]	; (800ec80 <dhcp_parse_reply+0x328>)
 800eb9c:	4837      	ldr	r0, [pc, #220]	; (800ec7c <dhcp_parse_reply+0x324>)
 800eb9e:	f006 f951 	bl	8014e44 <iprintf>
 800eba2:	f06f 0005 	mvn.w	r0, #5
 800eba6:	e0f5      	b.n	800ed94 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800eba8:	2b04      	cmp	r3, #4
 800ebaa:	d103      	bne.n	800ebb4 <dhcp_parse_reply+0x25c>
    decode_len = len;
 800ebac:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800ebae:	f04f 0903 	mov.w	r9, #3
 800ebb2:	e70b      	b.n	800e9cc <dhcp_parse_reply+0x74>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ebb4:	4b2f      	ldr	r3, [pc, #188]	; (800ec74 <dhcp_parse_reply+0x31c>)
 800ebb6:	f240 6241 	movw	r2, #1601	; 0x641
 800ebba:	492f      	ldr	r1, [pc, #188]	; (800ec78 <dhcp_parse_reply+0x320>)
 800ebbc:	482f      	ldr	r0, [pc, #188]	; (800ec7c <dhcp_parse_reply+0x324>)
 800ebbe:	f006 f941 	bl	8014e44 <iprintf>
 800ebc2:	f06f 0005 	mvn.w	r0, #5
 800ebc6:	e0e5      	b.n	800ed94 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	d106      	bne.n	800ebda <dhcp_parse_reply+0x282>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800ebcc:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
 800ebd0:	d10d      	bne.n	800ebee <dhcp_parse_reply+0x296>
    decode_len = len;
 800ebd2:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800ebd4:	f04f 0900 	mov.w	r9, #0
 800ebd8:	e6f8      	b.n	800e9cc <dhcp_parse_reply+0x74>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800ebda:	4b26      	ldr	r3, [pc, #152]	; (800ec74 <dhcp_parse_reply+0x31c>)
 800ebdc:	f240 624f 	movw	r2, #1615	; 0x64f
 800ebe0:	4929      	ldr	r1, [pc, #164]	; (800ec88 <dhcp_parse_reply+0x330>)
 800ebe2:	4826      	ldr	r0, [pc, #152]	; (800ec7c <dhcp_parse_reply+0x324>)
 800ebe4:	f006 f92e 	bl	8014e44 <iprintf>
 800ebe8:	f06f 0005 	mvn.w	r0, #5
 800ebec:	e0d2      	b.n	800ed94 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800ebee:	4b21      	ldr	r3, [pc, #132]	; (800ec74 <dhcp_parse_reply+0x31c>)
 800ebf0:	f240 6251 	movw	r2, #1617	; 0x651
 800ebf4:	4925      	ldr	r1, [pc, #148]	; (800ec8c <dhcp_parse_reply+0x334>)
 800ebf6:	4821      	ldr	r0, [pc, #132]	; (800ec7c <dhcp_parse_reply+0x324>)
 800ebf8:	f006 f924 	bl	8014e44 <iprintf>
 800ebfc:	f06f 0005 	mvn.w	r0, #5
 800ec00:	e0c8      	b.n	800ed94 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d103      	bne.n	800ec0e <dhcp_parse_reply+0x2b6>
    decode_len = len;
 800ec06:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800ec08:	f04f 0901 	mov.w	r9, #1
 800ec0c:	e6de      	b.n	800e9cc <dhcp_parse_reply+0x74>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800ec0e:	4b19      	ldr	r3, [pc, #100]	; (800ec74 <dhcp_parse_reply+0x31c>)
 800ec10:	f240 6255 	movw	r2, #1621	; 0x655
 800ec14:	491c      	ldr	r1, [pc, #112]	; (800ec88 <dhcp_parse_reply+0x330>)
 800ec16:	4819      	ldr	r0, [pc, #100]	; (800ec7c <dhcp_parse_reply+0x324>)
 800ec18:	f006 f914 	bl	8014e44 <iprintf>
 800ec1c:	f06f 0005 	mvn.w	r0, #5
 800ec20:	e0b8      	b.n	800ed94 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ec22:	2b04      	cmp	r3, #4
 800ec24:	d103      	bne.n	800ec2e <dhcp_parse_reply+0x2d6>
    decode_len = len;
 800ec26:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800ec28:	f04f 0902 	mov.w	r9, #2
 800ec2c:	e6ce      	b.n	800e9cc <dhcp_parse_reply+0x74>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ec2e:	4b11      	ldr	r3, [pc, #68]	; (800ec74 <dhcp_parse_reply+0x31c>)
 800ec30:	f240 6259 	movw	r2, #1625	; 0x659
 800ec34:	4910      	ldr	r1, [pc, #64]	; (800ec78 <dhcp_parse_reply+0x320>)
 800ec36:	4811      	ldr	r0, [pc, #68]	; (800ec7c <dhcp_parse_reply+0x324>)
 800ec38:	f006 f904 	bl	8014e44 <iprintf>
 800ec3c:	f06f 0005 	mvn.w	r0, #5
 800ec40:	e0a8      	b.n	800ed94 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ec42:	2b04      	cmp	r3, #4
 800ec44:	d103      	bne.n	800ec4e <dhcp_parse_reply+0x2f6>
    decode_len = len;
 800ec46:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 800ec48:	f04f 0904 	mov.w	r9, #4
 800ec4c:	e6be      	b.n	800e9cc <dhcp_parse_reply+0x74>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ec4e:	4b09      	ldr	r3, [pc, #36]	; (800ec74 <dhcp_parse_reply+0x31c>)
 800ec50:	f240 625d 	movw	r2, #1629	; 0x65d
 800ec54:	4908      	ldr	r1, [pc, #32]	; (800ec78 <dhcp_parse_reply+0x320>)
 800ec56:	4809      	ldr	r0, [pc, #36]	; (800ec7c <dhcp_parse_reply+0x324>)
 800ec58:	f006 f8f4 	bl	8014e44 <iprintf>
 800ec5c:	f06f 0005 	mvn.w	r0, #5
 800ec60:	e098      	b.n	800ed94 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ec62:	2b04      	cmp	r3, #4
 800ec64:	d114      	bne.n	800ec90 <dhcp_parse_reply+0x338>
    decode_len = len;
 800ec66:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 800ec68:	f04f 0905 	mov.w	r9, #5
 800ec6c:	e6ae      	b.n	800e9cc <dhcp_parse_reply+0x74>
 800ec6e:	bf00      	nop
 800ec70:	2000862c 	.word	0x2000862c
 800ec74:	08018308 	.word	0x08018308
 800ec78:	0801837c 	.word	0x0801837c
 800ec7c:	08015d2c 	.word	0x08015d2c
 800ec80:	08018388 	.word	0x08018388
 800ec84:	0801839c 	.word	0x0801839c
 800ec88:	080183ac 	.word	0x080183ac
 800ec8c:	080183b8 	.word	0x080183b8
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ec90:	4b5e      	ldr	r3, [pc, #376]	; (800ee0c <dhcp_parse_reply+0x4b4>)
 800ec92:	f240 6261 	movw	r2, #1633	; 0x661
 800ec96:	495e      	ldr	r1, [pc, #376]	; (800ee10 <dhcp_parse_reply+0x4b8>)
 800ec98:	485e      	ldr	r0, [pc, #376]	; (800ee14 <dhcp_parse_reply+0x4bc>)
 800ec9a:	f006 f8d3 	bl	8014e44 <iprintf>
 800ec9e:	f06f 0005 	mvn.w	r0, #5
 800eca2:	e077      	b.n	800ed94 <dhcp_parse_reply+0x43c>
    int decode_idx = -1;
 800eca4:	f04f 39ff 	mov.w	r9, #4294967295
        decode_len = 0;
 800eca8:	2700      	movs	r7, #0
 800ecaa:	e68f      	b.n	800e9cc <dhcp_parse_reply+0x74>
      if (offset + len + 2 > 0xFFFF) {
 800ecac:	4419      	add	r1, r3
 800ecae:	3102      	adds	r1, #2
 800ecb0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800ecb4:	f280 80a4 	bge.w	800ee00 <dhcp_parse_reply+0x4a8>
      offset = (u16_t)(offset + len + 2);
 800ecb8:	441c      	add	r4, r3
 800ecba:	b2a4      	uxth	r4, r4
 800ecbc:	3402      	adds	r4, #2
 800ecbe:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 800ecc0:	2f00      	cmp	r7, #0
 800ecc2:	f43f ae88 	beq.w	800e9d6 <dhcp_parse_reply+0x7e>
        u32_t value = 0;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	9305      	str	r3, [sp, #20]
 800ecca:	e02d      	b.n	800ed28 <dhcp_parse_reply+0x3d0>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800eccc:	4b52      	ldr	r3, [pc, #328]	; (800ee18 <dhcp_parse_reply+0x4c0>)
 800ecce:	f813 3009 	ldrb.w	r3, [r3, r9]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	f47f ae7f 	bne.w	800e9d6 <dhcp_parse_reply+0x7e>
          copy_len = LWIP_MIN(decode_len, 4);
 800ecd8:	46ba      	mov	sl, r7
 800ecda:	2f04      	cmp	r7, #4
 800ecdc:	bf28      	it	cs
 800ecde:	f04f 0a04 	movcs.w	sl, #4
 800ece2:	fa5f fa8a 	uxtb.w	sl, sl
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800ece6:	4643      	mov	r3, r8
 800ece8:	4652      	mov	r2, sl
 800ecea:	a905      	add	r1, sp, #20
 800ecec:	4630      	mov	r0, r6
 800ecee:	f7f9 ff89 	bl	8008c04 <pbuf_copy_partial>
 800ecf2:	4550      	cmp	r0, sl
 800ecf4:	d14c      	bne.n	800ed90 <dhcp_parse_reply+0x438>
          if (decode_len > 4) {
 800ecf6:	2f04      	cmp	r7, #4
 800ecf8:	d92b      	bls.n	800ed52 <dhcp_parse_reply+0x3fa>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800ecfa:	f017 0f03 	tst.w	r7, #3
 800ecfe:	d11e      	bne.n	800ed3e <dhcp_parse_reply+0x3e6>
            dhcp_got_option(dhcp, decode_idx);
 800ed00:	4b45      	ldr	r3, [pc, #276]	; (800ee18 <dhcp_parse_reply+0x4c0>)
 800ed02:	2201      	movs	r2, #1
 800ed04:	f803 2009 	strb.w	r2, [r3, r9]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800ed08:	9805      	ldr	r0, [sp, #20]
 800ed0a:	f7f8 fa66 	bl	80071da <lwip_htonl>
 800ed0e:	4b43      	ldr	r3, [pc, #268]	; (800ee1c <dhcp_parse_reply+0x4c4>)
 800ed10:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800ed14:	3f04      	subs	r7, #4
 800ed16:	b2ff      	uxtb	r7, r7
            next_val_offset = (u16_t)(val_offset + 4);
 800ed18:	f108 0304 	add.w	r3, r8, #4
 800ed1c:	b29b      	uxth	r3, r3
            if (next_val_offset < val_offset) {
 800ed1e:	4598      	cmp	r8, r3
 800ed20:	d83b      	bhi.n	800ed9a <dhcp_parse_reply+0x442>
            decode_idx++;
 800ed22:	f109 0901 	add.w	r9, r9, #1
            val_offset = next_val_offset;
 800ed26:	4698      	mov	r8, r3
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800ed28:	f1b9 0f09 	cmp.w	r9, #9
 800ed2c:	d9ce      	bls.n	800eccc <dhcp_parse_reply+0x374>
 800ed2e:	4b37      	ldr	r3, [pc, #220]	; (800ee0c <dhcp_parse_reply+0x4b4>)
 800ed30:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800ed34:	493a      	ldr	r1, [pc, #232]	; (800ee20 <dhcp_parse_reply+0x4c8>)
 800ed36:	4837      	ldr	r0, [pc, #220]	; (800ee14 <dhcp_parse_reply+0x4bc>)
 800ed38:	f006 f884 	bl	8014e44 <iprintf>
 800ed3c:	e7c6      	b.n	800eccc <dhcp_parse_reply+0x374>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800ed3e:	4b33      	ldr	r3, [pc, #204]	; (800ee0c <dhcp_parse_reply+0x4b4>)
 800ed40:	f240 6281 	movw	r2, #1665	; 0x681
 800ed44:	4937      	ldr	r1, [pc, #220]	; (800ee24 <dhcp_parse_reply+0x4cc>)
 800ed46:	4833      	ldr	r0, [pc, #204]	; (800ee14 <dhcp_parse_reply+0x4bc>)
 800ed48:	f006 f87c 	bl	8014e44 <iprintf>
 800ed4c:	f06f 0005 	mvn.w	r0, #5
 800ed50:	e020      	b.n	800ed94 <dhcp_parse_reply+0x43c>
          } else if (decode_len == 4) {
 800ed52:	2f04      	cmp	r7, #4
 800ed54:	d00d      	beq.n	800ed72 <dhcp_parse_reply+0x41a>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800ed56:	2f01      	cmp	r7, #1
 800ed58:	d110      	bne.n	800ed7c <dhcp_parse_reply+0x424>
            value = ((u8_t *)&value)[0];
 800ed5a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800ed5e:	9305      	str	r3, [sp, #20]
          dhcp_got_option(dhcp, decode_idx);
 800ed60:	4b2d      	ldr	r3, [pc, #180]	; (800ee18 <dhcp_parse_reply+0x4c0>)
 800ed62:	2201      	movs	r2, #1
 800ed64:	f803 2009 	strb.w	r2, [r3, r9]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800ed68:	4b2c      	ldr	r3, [pc, #176]	; (800ee1c <dhcp_parse_reply+0x4c4>)
 800ed6a:	9a05      	ldr	r2, [sp, #20]
 800ed6c:	f843 2029 	str.w	r2, [r3, r9, lsl #2]
 800ed70:	e631      	b.n	800e9d6 <dhcp_parse_reply+0x7e>
            value = lwip_ntohl(value);
 800ed72:	9805      	ldr	r0, [sp, #20]
 800ed74:	f7f8 fa31 	bl	80071da <lwip_htonl>
 800ed78:	9005      	str	r0, [sp, #20]
 800ed7a:	e7f1      	b.n	800ed60 <dhcp_parse_reply+0x408>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800ed7c:	4b23      	ldr	r3, [pc, #140]	; (800ee0c <dhcp_parse_reply+0x4b4>)
 800ed7e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800ed82:	4929      	ldr	r1, [pc, #164]	; (800ee28 <dhcp_parse_reply+0x4d0>)
 800ed84:	4823      	ldr	r0, [pc, #140]	; (800ee14 <dhcp_parse_reply+0x4bc>)
 800ed86:	f006 f85d 	bl	8014e44 <iprintf>
 800ed8a:	f06f 0005 	mvn.w	r0, #5
 800ed8e:	e001      	b.n	800ed94 <dhcp_parse_reply+0x43c>
            return ERR_BUF;
 800ed90:	f06f 0001 	mvn.w	r0, #1
}
 800ed94:	b007      	add	sp, #28
 800ed96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              return ERR_BUF;
 800ed9a:	f06f 0001 	mvn.w	r0, #1
 800ed9e:	e7f9      	b.n	800ed94 <dhcp_parse_reply+0x43c>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800eda0:	4b1a      	ldr	r3, [pc, #104]	; (800ee0c <dhcp_parse_reply+0x4b4>)
 800eda2:	f240 629d 	movw	r2, #1693	; 0x69d
 800eda6:	4921      	ldr	r1, [pc, #132]	; (800ee2c <dhcp_parse_reply+0x4d4>)
 800eda8:	481a      	ldr	r0, [pc, #104]	; (800ee14 <dhcp_parse_reply+0x4bc>)
 800edaa:	f006 f84b 	bl	8014e44 <iprintf>
 800edae:	f06f 0005 	mvn.w	r0, #5
 800edb2:	e7ef      	b.n	800ed94 <dhcp_parse_reply+0x43c>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800edb4:	4b18      	ldr	r3, [pc, #96]	; (800ee18 <dhcp_parse_reply+0x4c0>)
 800edb6:	781b      	ldrb	r3, [r3, #0]
 800edb8:	b163      	cbz	r3, 800edd4 <dhcp_parse_reply+0x47c>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800edba:	4b18      	ldr	r3, [pc, #96]	; (800ee1c <dhcp_parse_reply+0x4c4>)
 800edbc:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800edbe:	4a16      	ldr	r2, [pc, #88]	; (800ee18 <dhcp_parse_reply+0x4c0>)
 800edc0:	2100      	movs	r1, #0
 800edc2:	7011      	strb	r1, [r2, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800edc4:	2b01      	cmp	r3, #1
 800edc6:	f43f adda 	beq.w	800e97e <dhcp_parse_reply+0x26>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800edca:	2b02      	cmp	r3, #2
 800edcc:	d00a      	beq.n	800ede4 <dhcp_parse_reply+0x48c>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800edce:	2b03      	cmp	r3, #3
 800edd0:	f43f add9 	beq.w	800e986 <dhcp_parse_reply+0x2e>
  } else if (parse_sname_as_options) {
 800edd4:	9b03      	ldr	r3, [sp, #12]
 800edd6:	b143      	cbz	r3, 800edea <dhcp_parse_reply+0x492>
    parse_sname_as_options = 0;
 800edd8:	2300      	movs	r3, #0
 800edda:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800eddc:	256c      	movs	r5, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 800edde:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 800ede2:	e5ca      	b.n	800e97a <dhcp_parse_reply+0x22>
      parse_sname_as_options = 1;
 800ede4:	2301      	movs	r3, #1
 800ede6:	9303      	str	r3, [sp, #12]
 800ede8:	e7f4      	b.n	800edd4 <dhcp_parse_reply+0x47c>
  return ERR_OK;
 800edea:	2000      	movs	r0, #0
 800edec:	e7d2      	b.n	800ed94 <dhcp_parse_reply+0x43c>
    return ERR_BUF;
 800edee:	f06f 0001 	mvn.w	r0, #1
}
 800edf2:	4770      	bx	lr
    return ERR_BUF;
 800edf4:	f06f 0001 	mvn.w	r0, #1
 800edf8:	e7cc      	b.n	800ed94 <dhcp_parse_reply+0x43c>
      return ERR_BUF;
 800edfa:	f06f 0001 	mvn.w	r0, #1
 800edfe:	e7c9      	b.n	800ed94 <dhcp_parse_reply+0x43c>
        return ERR_BUF;
 800ee00:	f06f 0001 	mvn.w	r0, #1
 800ee04:	e7c6      	b.n	800ed94 <dhcp_parse_reply+0x43c>
        return ERR_BUF;
 800ee06:	f06f 0001 	mvn.w	r0, #1
 800ee0a:	e7c3      	b.n	800ed94 <dhcp_parse_reply+0x43c>
 800ee0c:	08018308 	.word	0x08018308
 800ee10:	0801837c 	.word	0x0801837c
 800ee14:	08015d2c 	.word	0x08015d2c
 800ee18:	2000862c 	.word	0x2000862c
 800ee1c:	20008638 	.word	0x20008638
 800ee20:	080183d0 	.word	0x080183d0
 800ee24:	080183e4 	.word	0x080183e4
 800ee28:	080183fc 	.word	0x080183fc
 800ee2c:	08018410 	.word	0x08018410

0800ee30 <dhcp_handle_ack>:
{
 800ee30:	b510      	push	{r4, lr}
 800ee32:	b086      	sub	sp, #24
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ee34:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800ee38:	2300      	movs	r3, #0
 800ee3a:	6363      	str	r3, [r4, #52]	; 0x34
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800ee3c:	63a3      	str	r3, [r4, #56]	; 0x38
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800ee3e:	4b29      	ldr	r3, [pc, #164]	; (800eee4 <dhcp_handle_ack+0xb4>)
 800ee40:	78db      	ldrb	r3, [r3, #3]
 800ee42:	b113      	cbz	r3, 800ee4a <dhcp_handle_ack+0x1a>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800ee44:	4b28      	ldr	r3, [pc, #160]	; (800eee8 <dhcp_handle_ack+0xb8>)
 800ee46:	68db      	ldr	r3, [r3, #12]
 800ee48:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800ee4a:	4b26      	ldr	r3, [pc, #152]	; (800eee4 <dhcp_handle_ack+0xb4>)
 800ee4c:	791b      	ldrb	r3, [r3, #4]
 800ee4e:	b333      	cbz	r3, 800ee9e <dhcp_handle_ack+0x6e>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800ee50:	4b25      	ldr	r3, [pc, #148]	; (800eee8 <dhcp_handle_ack+0xb8>)
 800ee52:	691b      	ldr	r3, [r3, #16]
 800ee54:	6423      	str	r3, [r4, #64]	; 0x40
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800ee56:	4b23      	ldr	r3, [pc, #140]	; (800eee4 <dhcp_handle_ack+0xb4>)
 800ee58:	795b      	ldrb	r3, [r3, #5]
 800ee5a:	b323      	cbz	r3, 800eea6 <dhcp_handle_ack+0x76>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800ee5c:	4b22      	ldr	r3, [pc, #136]	; (800eee8 <dhcp_handle_ack+0xb8>)
 800ee5e:	695b      	ldr	r3, [r3, #20]
 800ee60:	6463      	str	r3, [r4, #68]	; 0x44
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800ee62:	690b      	ldr	r3, [r1, #16]
 800ee64:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800ee66:	4b1f      	ldr	r3, [pc, #124]	; (800eee4 <dhcp_handle_ack+0xb4>)
 800ee68:	799b      	ldrb	r3, [r3, #6]
 800ee6a:	b313      	cbz	r3, 800eeb2 <dhcp_handle_ack+0x82>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800ee6c:	4b1e      	ldr	r3, [pc, #120]	; (800eee8 <dhcp_handle_ack+0xb8>)
 800ee6e:	6998      	ldr	r0, [r3, #24]
 800ee70:	f7f8 f9b3 	bl	80071da <lwip_htonl>
 800ee74:	6360      	str	r0, [r4, #52]	; 0x34
    dhcp->subnet_mask_given = 1;
 800ee76:	2301      	movs	r3, #1
 800ee78:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800ee7a:	4b1a      	ldr	r3, [pc, #104]	; (800eee4 <dhcp_handle_ack+0xb4>)
 800ee7c:	79db      	ldrb	r3, [r3, #7]
 800ee7e:	b123      	cbz	r3, 800ee8a <dhcp_handle_ack+0x5a>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800ee80:	4b19      	ldr	r3, [pc, #100]	; (800eee8 <dhcp_handle_ack+0xb8>)
 800ee82:	69d8      	ldr	r0, [r3, #28]
 800ee84:	f7f8 f9a9 	bl	80071da <lwip_htonl>
 800ee88:	63a0      	str	r0, [r4, #56]	; 0x38
{
 800ee8a:	2400      	movs	r4, #0
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800ee8c:	2c01      	cmp	r4, #1
 800ee8e:	d804      	bhi.n	800ee9a <dhcp_handle_ack+0x6a>
 800ee90:	f104 0308 	add.w	r3, r4, #8
 800ee94:	4a13      	ldr	r2, [pc, #76]	; (800eee4 <dhcp_handle_ack+0xb4>)
 800ee96:	5cd2      	ldrb	r2, [r2, r3]
 800ee98:	b972      	cbnz	r2, 800eeb8 <dhcp_handle_ack+0x88>
}
 800ee9a:	b006      	add	sp, #24
 800ee9c:	bd10      	pop	{r4, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800ee9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800eea0:	085b      	lsrs	r3, r3, #1
 800eea2:	6423      	str	r3, [r4, #64]	; 0x40
 800eea4:	e7d7      	b.n	800ee56 <dhcp_handle_ack+0x26>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800eea6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800eea8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800eeac:	08db      	lsrs	r3, r3, #3
 800eeae:	6463      	str	r3, [r4, #68]	; 0x44
 800eeb0:	e7d7      	b.n	800ee62 <dhcp_handle_ack+0x32>
    dhcp->subnet_mask_given = 0;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	71e3      	strb	r3, [r4, #7]
 800eeb6:	e7e0      	b.n	800ee7a <dhcp_handle_ack+0x4a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 800eeb8:	4a0b      	ldr	r2, [pc, #44]	; (800eee8 <dhcp_handle_ack+0xb8>)
 800eeba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800eebe:	f7f8 f98c 	bl	80071da <lwip_htonl>
 800eec2:	9000      	str	r0, [sp, #0]
 800eec4:	2300      	movs	r3, #0
 800eec6:	f88d 3014 	strb.w	r3, [sp, #20]
 800eeca:	9303      	str	r3, [sp, #12]
 800eecc:	9302      	str	r3, [sp, #8]
 800eece:	9301      	str	r3, [sp, #4]
 800eed0:	f88d 3010 	strb.w	r3, [sp, #16]
    dns_setserver(n, &dns_addr);
 800eed4:	4669      	mov	r1, sp
 800eed6:	4620      	mov	r0, r4
 800eed8:	f7f8 fc5a 	bl	8007790 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800eedc:	3401      	adds	r4, #1
 800eede:	b2e4      	uxtb	r4, r4
 800eee0:	e7d4      	b.n	800ee8c <dhcp_handle_ack+0x5c>
 800eee2:	bf00      	nop
 800eee4:	2000862c 	.word	0x2000862c
 800eee8:	20008638 	.word	0x20008638

0800eeec <dhcp_recv>:
{
 800eeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeee:	4614      	mov	r4, r2
  struct netif *netif = ip_current_input_netif();
 800eef0:	4a3c      	ldr	r2, [pc, #240]	; (800efe4 <dhcp_recv+0xf8>)
 800eef2:	6856      	ldr	r6, [r2, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eef4:	f8d6 50c8 	ldr.w	r5, [r6, #200]	; 0xc8
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800eef8:	6867      	ldr	r7, [r4, #4]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800eefa:	b155      	cbz	r5, 800ef12 <dhcp_recv+0x26>
 800eefc:	792a      	ldrb	r2, [r5, #4]
 800eefe:	b142      	cbz	r2, 800ef12 <dhcp_recv+0x26>
  LWIP_ASSERT("invalid server address type", IP_IS_V4(addr));
 800ef00:	b10b      	cbz	r3, 800ef06 <dhcp_recv+0x1a>
 800ef02:	7d1b      	ldrb	r3, [r3, #20]
 800ef04:	b94b      	cbnz	r3, 800ef1a <dhcp_recv+0x2e>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 800ef06:	8963      	ldrh	r3, [r4, #10]
 800ef08:	2b2b      	cmp	r3, #43	; 0x2b
 800ef0a:	d902      	bls.n	800ef12 <dhcp_recv+0x26>
  if (reply_msg->op != DHCP_BOOTREPLY) {
 800ef0c:	783b      	ldrb	r3, [r7, #0]
 800ef0e:	2b02      	cmp	r3, #2
 800ef10:	d00b      	beq.n	800ef2a <dhcp_recv+0x3e>
  pbuf_free(p);
 800ef12:	4620      	mov	r0, r4
 800ef14:	f7f9 fc1e 	bl	8008754 <pbuf_free>
}
 800ef18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("invalid server address type", IP_IS_V4(addr));
 800ef1a:	4b33      	ldr	r3, [pc, #204]	; (800efe8 <dhcp_recv+0xfc>)
 800ef1c:	f240 62ea 	movw	r2, #1770	; 0x6ea
 800ef20:	4932      	ldr	r1, [pc, #200]	; (800efec <dhcp_recv+0x100>)
 800ef22:	4833      	ldr	r0, [pc, #204]	; (800eff0 <dhcp_recv+0x104>)
 800ef24:	f005 ff8e 	bl	8014e44 <iprintf>
 800ef28:	e7ed      	b.n	800ef06 <dhcp_recv+0x1a>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	f896 20da 	ldrb.w	r2, [r6, #218]	; 0xda
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d90b      	bls.n	800ef4c <dhcp_recv+0x60>
 800ef34:	2b05      	cmp	r3, #5
 800ef36:	d809      	bhi.n	800ef4c <dhcp_recv+0x60>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800ef38:	18f2      	adds	r2, r6, r3
 800ef3a:	f892 10d4 	ldrb.w	r1, [r2, #212]	; 0xd4
 800ef3e:	18fa      	adds	r2, r7, r3
 800ef40:	7f12      	ldrb	r2, [r2, #28]
 800ef42:	4291      	cmp	r1, r2
 800ef44:	d1e5      	bne.n	800ef12 <dhcp_recv+0x26>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ef46:	3301      	adds	r3, #1
 800ef48:	b2db      	uxtb	r3, r3
 800ef4a:	e7ef      	b.n	800ef2c <dhcp_recv+0x40>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f7f8 f944 	bl	80071da <lwip_htonl>
 800ef52:	682b      	ldr	r3, [r5, #0]
 800ef54:	4298      	cmp	r0, r3
 800ef56:	d1dc      	bne.n	800ef12 <dhcp_recv+0x26>
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800ef58:	4629      	mov	r1, r5
 800ef5a:	4620      	mov	r0, r4
 800ef5c:	f7ff fcfc 	bl	800e958 <dhcp_parse_reply>
 800ef60:	2800      	cmp	r0, #0
 800ef62:	d1d6      	bne.n	800ef12 <dhcp_recv+0x26>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800ef64:	4b23      	ldr	r3, [pc, #140]	; (800eff4 <dhcp_recv+0x108>)
 800ef66:	785b      	ldrb	r3, [r3, #1]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d0d2      	beq.n	800ef12 <dhcp_recv+0x26>
  msg_in = (struct dhcp_msg *)p->payload;
 800ef6c:	6861      	ldr	r1, [r4, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800ef6e:	4b22      	ldr	r3, [pc, #136]	; (800eff8 <dhcp_recv+0x10c>)
 800ef70:	791b      	ldrb	r3, [r3, #4]
  if (msg_type == DHCP_ACK) {
 800ef72:	2b05      	cmp	r3, #5
 800ef74:	d00a      	beq.n	800ef8c <dhcp_recv+0xa0>
  else if ((msg_type == DHCP_NAK) &&
 800ef76:	2b06      	cmp	r3, #6
 800ef78:	d026      	beq.n	800efc8 <dhcp_recv+0xdc>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800ef7a:	2b02      	cmp	r3, #2
 800ef7c:	d1c9      	bne.n	800ef12 <dhcp_recv+0x26>
 800ef7e:	796b      	ldrb	r3, [r5, #5]
 800ef80:	2b06      	cmp	r3, #6
 800ef82:	d1c6      	bne.n	800ef12 <dhcp_recv+0x26>
    dhcp_handle_offer(netif, msg_in);
 800ef84:	4630      	mov	r0, r6
 800ef86:	f7ff fad3 	bl	800e530 <dhcp_handle_offer>
 800ef8a:	e7c2      	b.n	800ef12 <dhcp_recv+0x26>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800ef8c:	796b      	ldrb	r3, [r5, #5]
 800ef8e:	2b01      	cmp	r3, #1
 800ef90:	d00a      	beq.n	800efa8 <dhcp_recv+0xbc>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800ef92:	3b03      	subs	r3, #3
 800ef94:	b2db      	uxtb	r3, r3
 800ef96:	2b02      	cmp	r3, #2
 800ef98:	d8bb      	bhi.n	800ef12 <dhcp_recv+0x26>
      dhcp_handle_ack(netif, msg_in);
 800ef9a:	4630      	mov	r0, r6
 800ef9c:	f7ff ff48 	bl	800ee30 <dhcp_handle_ack>
      dhcp_bind(netif);
 800efa0:	4630      	mov	r0, r6
 800efa2:	f7ff fbcb 	bl	800e73c <dhcp_bind>
 800efa6:	e7b4      	b.n	800ef12 <dhcp_recv+0x26>
      dhcp_handle_ack(netif, msg_in);
 800efa8:	4630      	mov	r0, r6
 800efaa:	f7ff ff41 	bl	800ee30 <dhcp_handle_ack>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800efae:	f896 30db 	ldrb.w	r3, [r6, #219]	; 0xdb
 800efb2:	f013 0f08 	tst.w	r3, #8
 800efb6:	d003      	beq.n	800efc0 <dhcp_recv+0xd4>
        dhcp_check(netif);
 800efb8:	4630      	mov	r0, r6
 800efba:	f7ff fba9 	bl	800e710 <dhcp_check>
 800efbe:	e7a8      	b.n	800ef12 <dhcp_recv+0x26>
        dhcp_bind(netif);
 800efc0:	4630      	mov	r0, r6
 800efc2:	f7ff fbbb 	bl	800e73c <dhcp_bind>
 800efc6:	e7a4      	b.n	800ef12 <dhcp_recv+0x26>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800efc8:	796a      	ldrb	r2, [r5, #5]
  else if ((msg_type == DHCP_NAK) &&
 800efca:	2a03      	cmp	r2, #3
 800efcc:	d005      	beq.n	800efda <dhcp_recv+0xee>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800efce:	2a01      	cmp	r2, #1
 800efd0:	d003      	beq.n	800efda <dhcp_recv+0xee>
 800efd2:	2a04      	cmp	r2, #4
 800efd4:	d001      	beq.n	800efda <dhcp_recv+0xee>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800efd6:	2a05      	cmp	r2, #5
 800efd8:	d1cf      	bne.n	800ef7a <dhcp_recv+0x8e>
    dhcp_handle_nak(netif);
 800efda:	4630      	mov	r0, r6
 800efdc:	f7ff fc44 	bl	800e868 <dhcp_handle_nak>
 800efe0:	e797      	b.n	800ef12 <dhcp_recv+0x26>
 800efe2:	bf00      	nop
 800efe4:	20004bac 	.word	0x20004bac
 800efe8:	08018308 	.word	0x08018308
 800efec:	08018424 	.word	0x08018424
 800eff0:	08015d2c 	.word	0x08015d2c
 800eff4:	2000862c 	.word	0x2000862c
 800eff8:	20008638 	.word	0x20008638

0800effc <dhcp_arp_reply>:
{
 800effc:	b508      	push	{r3, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800effe:	b138      	cbz	r0, 800f010 <dhcp_arp_reply+0x14>
 800f000:	4602      	mov	r2, r0
  dhcp = netif_dhcp_data(netif);
 800f002:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800f006:	b113      	cbz	r3, 800f00e <dhcp_arp_reply+0x12>
 800f008:	7958      	ldrb	r0, [r3, #5]
 800f00a:	2808      	cmp	r0, #8
 800f00c:	d008      	beq.n	800f020 <dhcp_arp_reply+0x24>
}
 800f00e:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f010:	4b07      	ldr	r3, [pc, #28]	; (800f030 <dhcp_arp_reply+0x34>)
 800f012:	f240 328b 	movw	r2, #907	; 0x38b
 800f016:	4907      	ldr	r1, [pc, #28]	; (800f034 <dhcp_arp_reply+0x38>)
 800f018:	4807      	ldr	r0, [pc, #28]	; (800f038 <dhcp_arp_reply+0x3c>)
 800f01a:	f005 ff13 	bl	8014e44 <iprintf>
 800f01e:	e7f6      	b.n	800f00e <dhcp_arp_reply+0x12>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800f020:	6809      	ldr	r1, [r1, #0]
 800f022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f024:	4299      	cmp	r1, r3
 800f026:	d1f2      	bne.n	800f00e <dhcp_arp_reply+0x12>
      dhcp_decline(netif);
 800f028:	4610      	mov	r0, r2
 800f02a:	f7ff fb21 	bl	800e670 <dhcp_decline>
 800f02e:	e7ee      	b.n	800f00e <dhcp_arp_reply+0x12>
 800f030:	08018308 	.word	0x08018308
 800f034:	08015d1c 	.word	0x08015d1c
 800f038:	08015d2c 	.word	0x08015d2c

0800f03c <dhcp_renew>:
{
 800f03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f040:	b084      	sub	sp, #16
 800f042:	4680      	mov	r8, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f044:	f8d0 60c8 	ldr.w	r6, [r0, #200]	; 0xc8
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800f048:	2105      	movs	r1, #5
 800f04a:	4630      	mov	r0, r6
 800f04c:	f7fe ff56 	bl	800defc <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f050:	f10d 030e 	add.w	r3, sp, #14
 800f054:	2203      	movs	r2, #3
 800f056:	4631      	mov	r1, r6
 800f058:	4640      	mov	r0, r8
 800f05a:	f7fe ffd3 	bl	800e004 <dhcp_create_msg>
  if (p_out != NULL) {
 800f05e:	2800      	cmp	r0, #0
 800f060:	d057      	beq.n	800f112 <dhcp_renew+0xd6>
 800f062:	4607      	mov	r7, r0
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f064:	6845      	ldr	r5, [r0, #4]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f066:	35f0      	adds	r5, #240	; 0xf0
 800f068:	2302      	movs	r3, #2
 800f06a:	2239      	movs	r2, #57	; 0x39
 800f06c:	4629      	mov	r1, r5
 800f06e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800f072:	f7fe ff69 	bl	800df48 <dhcp_option>
 800f076:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f07a:	f8b8 20d0 	ldrh.w	r2, [r8, #208]	; 0xd0
 800f07e:	4629      	mov	r1, r5
 800f080:	f7fe ff44 	bl	800df0c <dhcp_option_short>
 800f084:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f088:	2304      	movs	r3, #4
 800f08a:	2237      	movs	r2, #55	; 0x37
 800f08c:	4629      	mov	r1, r5
 800f08e:	f7fe ff5b 	bl	800df48 <dhcp_option>
 800f092:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f096:	2400      	movs	r4, #0
 800f098:	e00a      	b.n	800f0b0 <dhcp_renew+0x74>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f09a:	4b21      	ldr	r3, [pc, #132]	; (800f120 <dhcp_renew+0xe4>)
 800f09c:	5d1a      	ldrb	r2, [r3, r4]
 800f09e:	4629      	mov	r1, r5
 800f0a0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800f0a4:	f7fe ff6e 	bl	800df84 <dhcp_option_byte>
 800f0a8:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f0ac:	3401      	adds	r4, #1
 800f0ae:	b2e4      	uxtb	r4, r4
 800f0b0:	2c03      	cmp	r4, #3
 800f0b2:	d9f2      	bls.n	800f09a <dhcp_renew+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f0b4:	463a      	mov	r2, r7
 800f0b6:	4629      	mov	r1, r5
 800f0b8:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800f0bc:	f7ff f840 	bl	800e140 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f0c0:	4b18      	ldr	r3, [pc, #96]	; (800f124 <dhcp_renew+0xe8>)
 800f0c2:	6818      	ldr	r0, [r3, #0]
 800f0c4:	f8cd 8000 	str.w	r8, [sp]
 800f0c8:	2343      	movs	r3, #67	; 0x43
 800f0ca:	f106 0218 	add.w	r2, r6, #24
 800f0ce:	4639      	mov	r1, r7
 800f0d0:	f7fe fc5c 	bl	800d98c <udp_sendto_if>
 800f0d4:	4604      	mov	r4, r0
    pbuf_free(p_out);
 800f0d6:	4638      	mov	r0, r7
 800f0d8:	f7f9 fb3c 	bl	8008754 <pbuf_free>
  if (dhcp->tries < 255) {
 800f0dc:	79b3      	ldrb	r3, [r6, #6]
 800f0de:	2bff      	cmp	r3, #255	; 0xff
 800f0e0:	d001      	beq.n	800f0e6 <dhcp_renew+0xaa>
    dhcp->tries++;
 800f0e2:	3301      	adds	r3, #1
 800f0e4:	71b3      	strb	r3, [r6, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800f0e6:	79b3      	ldrb	r3, [r6, #6]
 800f0e8:	2b09      	cmp	r3, #9
 800f0ea:	d815      	bhi.n	800f118 <dhcp_renew+0xdc>
 800f0ec:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800f0f0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800f0f4:	0113      	lsls	r3, r2, #4
 800f0f6:	b29b      	uxth	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f0f8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f0fc:	4a0a      	ldr	r2, [pc, #40]	; (800f128 <dhcp_renew+0xec>)
 800f0fe:	fb82 1203 	smull	r1, r2, r2, r3
 800f102:	17db      	asrs	r3, r3, #31
 800f104:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800f108:	8133      	strh	r3, [r6, #8]
}
 800f10a:	4620      	mov	r0, r4
 800f10c:	b004      	add	sp, #16
 800f10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 800f112:	f04f 34ff 	mov.w	r4, #4294967295
 800f116:	e7e1      	b.n	800f0dc <dhcp_renew+0xa0>
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800f118:	f644 6320 	movw	r3, #20000	; 0x4e20
 800f11c:	e7ec      	b.n	800f0f8 <dhcp_renew+0xbc>
 800f11e:	bf00      	nop
 800f120:	08018224 	.word	0x08018224
 800f124:	2000178c 	.word	0x2000178c
 800f128:	10624dd3 	.word	0x10624dd3

0800f12c <dhcp_t1_timeout>:
{
 800f12c:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f12e:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f132:	7963      	ldrb	r3, [r4, #5]
 800f134:	2b01      	cmp	r3, #1
 800f136:	d003      	beq.n	800f140 <dhcp_t1_timeout+0x14>
 800f138:	2b0a      	cmp	r3, #10
 800f13a:	d001      	beq.n	800f140 <dhcp_t1_timeout+0x14>
 800f13c:	2b05      	cmp	r3, #5
 800f13e:	d10b      	bne.n	800f158 <dhcp_t1_timeout+0x2c>
    dhcp_renew(netif);
 800f140:	f7ff ff7c 	bl	800f03c <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800f144:	89a3      	ldrh	r3, [r4, #12]
 800f146:	8a62      	ldrh	r2, [r4, #18]
 800f148:	1a9b      	subs	r3, r3, r2
 800f14a:	2b01      	cmp	r3, #1
 800f14c:	dd04      	ble.n	800f158 <dhcp_t1_timeout+0x2c>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800f14e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800f152:	f3c3 034f 	ubfx	r3, r3, #1, #16
 800f156:	81e3      	strh	r3, [r4, #14]
}
 800f158:	bd10      	pop	{r4, pc}

0800f15a <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800f15a:	b190      	cbz	r0, 800f182 <dhcp_supplied_address+0x28>
 800f15c:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 800f160:	b18b      	cbz	r3, 800f186 <dhcp_supplied_address+0x2c>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800f162:	795b      	ldrb	r3, [r3, #5]
 800f164:	2b0a      	cmp	r3, #10
 800f166:	d007      	beq.n	800f178 <dhcp_supplied_address+0x1e>
 800f168:	2b05      	cmp	r3, #5
 800f16a:	d008      	beq.n	800f17e <dhcp_supplied_address+0x24>
 800f16c:	2b04      	cmp	r3, #4
 800f16e:	d001      	beq.n	800f174 <dhcp_supplied_address+0x1a>
 800f170:	2000      	movs	r0, #0
 800f172:	e002      	b.n	800f17a <dhcp_supplied_address+0x20>
 800f174:	2001      	movs	r0, #1
 800f176:	e000      	b.n	800f17a <dhcp_supplied_address+0x20>
 800f178:	2001      	movs	r0, #1
 800f17a:	b2c0      	uxtb	r0, r0
 800f17c:	4770      	bx	lr
 800f17e:	2001      	movs	r0, #1
 800f180:	e7fb      	b.n	800f17a <dhcp_supplied_address+0x20>
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
 800f182:	2000      	movs	r0, #0
 800f184:	4770      	bx	lr
 800f186:	2000      	movs	r0, #0
}
 800f188:	4770      	bx	lr
	...

0800f18c <dhcp_release_and_stop>:
{
 800f18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f190:	b08a      	sub	sp, #40	; 0x28
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f192:	f8d0 40c8 	ldr.w	r4, [r0, #200]	; 0xc8
  if (dhcp == NULL) {
 800f196:	2c00      	cmp	r4, #0
 800f198:	d038      	beq.n	800f20c <dhcp_release_and_stop+0x80>
  if (dhcp->state == DHCP_STATE_OFF) {
 800f19a:	7963      	ldrb	r3, [r4, #5]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d035      	beq.n	800f20c <dhcp_release_and_stop+0x80>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800f1a0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800f1a4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800f1a8:	2b06      	cmp	r3, #6
 800f1aa:	d032      	beq.n	800f212 <dhcp_release_and_stop+0x86>
 800f1ac:	69a3      	ldr	r3, [r4, #24]
 800f1ae:	9304      	str	r3, [sp, #16]
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	9307      	str	r3, [sp, #28]
 800f1b4:	9306      	str	r3, [sp, #24]
 800f1b6:	9305      	str	r3, [sp, #20]
 800f1b8:	f88d 3020 	strb.w	r3, [sp, #32]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800f1bc:	2300      	movs	r3, #0
 800f1be:	61a3      	str	r3, [r4, #24]
 800f1c0:	61e3      	str	r3, [r4, #28]
 800f1c2:	6223      	str	r3, [r4, #32]
 800f1c4:	6263      	str	r3, [r4, #36]	; 0x24
 800f1c6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800f1ca:	f114 0f18 	cmn.w	r4, #24
 800f1ce:	d001      	beq.n	800f1d4 <dhcp_release_and_stop+0x48>
 800f1d0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800f1d4:	4605      	mov	r5, r0
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f1da:	6363      	str	r3, [r4, #52]	; 0x34
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f1dc:	63a3      	str	r3, [r4, #56]	; 0x38
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800f1de:	6463      	str	r3, [r4, #68]	; 0x44
 800f1e0:	6423      	str	r3, [r4, #64]	; 0x40
 800f1e2:	63e3      	str	r3, [r4, #60]	; 0x3c
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800f1e4:	82a3      	strh	r3, [r4, #20]
 800f1e6:	8263      	strh	r3, [r4, #18]
 800f1e8:	8223      	strh	r3, [r4, #16]
 800f1ea:	81e3      	strh	r3, [r4, #14]
  if (dhcp_supplied_address(netif)) {
 800f1ec:	f7ff ffb5 	bl	800f15a <dhcp_supplied_address>
 800f1f0:	b9e0      	cbnz	r0, 800f22c <dhcp_release_and_stop+0xa0>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f1f2:	4929      	ldr	r1, [pc, #164]	; (800f298 <dhcp_release_and_stop+0x10c>)
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	460a      	mov	r2, r1
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	f7f8 fee5 	bl	8007fc8 <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800f1fe:	2100      	movs	r1, #0
 800f200:	4620      	mov	r0, r4
 800f202:	f7fe fe7b 	bl	800defc <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 800f206:	7923      	ldrb	r3, [r4, #4]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d13f      	bne.n	800f28c <dhcp_release_and_stop+0x100>
}
 800f20c:	b00a      	add	sp, #40	; 0x28
 800f20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800f212:	69a3      	ldr	r3, [r4, #24]
 800f214:	9304      	str	r3, [sp, #16]
 800f216:	69e3      	ldr	r3, [r4, #28]
 800f218:	9305      	str	r3, [sp, #20]
 800f21a:	6a23      	ldr	r3, [r4, #32]
 800f21c:	9306      	str	r3, [sp, #24]
 800f21e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f220:	9307      	str	r3, [sp, #28]
 800f222:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f226:	f88d 3020 	strb.w	r3, [sp, #32]
 800f22a:	e7c7      	b.n	800f1bc <dhcp_release_and_stop+0x30>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800f22c:	f10d 030e 	add.w	r3, sp, #14
 800f230:	2207      	movs	r2, #7
 800f232:	4621      	mov	r1, r4
 800f234:	4628      	mov	r0, r5
 800f236:	f7fe fee5 	bl	800e004 <dhcp_create_msg>
    if (p_out != NULL) {
 800f23a:	4607      	mov	r7, r0
 800f23c:	2800      	cmp	r0, #0
 800f23e:	d0d8      	beq.n	800f1f2 <dhcp_release_and_stop+0x66>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f240:	6846      	ldr	r6, [r0, #4]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800f242:	36f0      	adds	r6, #240	; 0xf0
 800f244:	2304      	movs	r3, #4
 800f246:	2236      	movs	r2, #54	; 0x36
 800f248:	4631      	mov	r1, r6
 800f24a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800f24e:	f7fe fe7b 	bl	800df48 <dhcp_option>
 800f252:	4680      	mov	r8, r0
 800f254:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800f258:	9804      	ldr	r0, [sp, #16]
 800f25a:	f7f7 ffbe 	bl	80071da <lwip_htonl>
 800f25e:	4602      	mov	r2, r0
 800f260:	4631      	mov	r1, r6
 800f262:	4640      	mov	r0, r8
 800f264:	f7fe fea6 	bl	800dfb4 <dhcp_option_long>
 800f268:	f8ad 000e 	strh.w	r0, [sp, #14]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f26c:	463a      	mov	r2, r7
 800f26e:	4631      	mov	r1, r6
 800f270:	f7fe ff66 	bl	800e140 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f274:	4b09      	ldr	r3, [pc, #36]	; (800f29c <dhcp_release_and_stop+0x110>)
 800f276:	6818      	ldr	r0, [r3, #0]
 800f278:	9500      	str	r5, [sp, #0]
 800f27a:	2343      	movs	r3, #67	; 0x43
 800f27c:	aa04      	add	r2, sp, #16
 800f27e:	4639      	mov	r1, r7
 800f280:	f7fe fb84 	bl	800d98c <udp_sendto_if>
      pbuf_free(p_out);
 800f284:	4638      	mov	r0, r7
 800f286:	f7f9 fa65 	bl	8008754 <pbuf_free>
 800f28a:	e7b2      	b.n	800f1f2 <dhcp_release_and_stop+0x66>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f28c:	f7ff fb00 	bl	800e890 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800f290:	2300      	movs	r3, #0
 800f292:	7123      	strb	r3, [r4, #4]
 800f294:	e7ba      	b.n	800f20c <dhcp_release_and_stop+0x80>
 800f296:	bf00      	nop
 800f298:	080187ec 	.word	0x080187ec
 800f29c:	2000178c 	.word	0x2000178c

0800f2a0 <dhcp_start>:
{
 800f2a0:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800f2a2:	b338      	cbz	r0, 800f2f4 <dhcp_start+0x54>
 800f2a4:	4604      	mov	r4, r0
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800f2a6:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
 800f2aa:	f013 0f01 	tst.w	r3, #1
 800f2ae:	d02b      	beq.n	800f308 <dhcp_start+0x68>
  dhcp = netif_dhcp_data(netif);
 800f2b0:	f8d0 50c8 	ldr.w	r5, [r0, #200]	; 0xc8
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800f2b4:	f8b0 30d0 	ldrh.w	r3, [r0, #208]	; 0xd0
 800f2b8:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800f2bc:	d344      	bcc.n	800f348 <dhcp_start+0xa8>
  if (dhcp == NULL) {
 800f2be:	b36d      	cbz	r5, 800f31c <dhcp_start+0x7c>
    if (dhcp->pcb_allocated != 0) {
 800f2c0:	792b      	ldrb	r3, [r5, #4]
 800f2c2:	bb9b      	cbnz	r3, 800f32c <dhcp_start+0x8c>
  memset(dhcp, 0, sizeof(struct dhcp));
 800f2c4:	2248      	movs	r2, #72	; 0x48
 800f2c6:	2100      	movs	r1, #0
 800f2c8:	4628      	mov	r0, r5
 800f2ca:	f005 fdb2 	bl	8014e32 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800f2ce:	f7ff fb03 	bl	800e8d8 <dhcp_inc_pcb_refcount>
 800f2d2:	4606      	mov	r6, r0
 800f2d4:	2800      	cmp	r0, #0
 800f2d6:	d13d      	bne.n	800f354 <dhcp_start+0xb4>
  dhcp->pcb_allocated = 1;
 800f2d8:	2301      	movs	r3, #1
 800f2da:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 800f2dc:	f894 30db 	ldrb.w	r3, [r4, #219]	; 0xdb
 800f2e0:	f013 0f04 	tst.w	r3, #4
 800f2e4:	d025      	beq.n	800f332 <dhcp_start+0x92>
  result = dhcp_discover(netif);
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	f7ff f946 	bl	800e578 <dhcp_discover>
  if (result != ERR_OK) {
 800f2ec:	4606      	mov	r6, r0
 800f2ee:	bb28      	cbnz	r0, 800f33c <dhcp_start+0x9c>
}
 800f2f0:	4630      	mov	r0, r6
 800f2f2:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800f2f4:	4b19      	ldr	r3, [pc, #100]	; (800f35c <dhcp_start+0xbc>)
 800f2f6:	f240 22e7 	movw	r2, #743	; 0x2e7
 800f2fa:	4919      	ldr	r1, [pc, #100]	; (800f360 <dhcp_start+0xc0>)
 800f2fc:	4819      	ldr	r0, [pc, #100]	; (800f364 <dhcp_start+0xc4>)
 800f2fe:	f005 fda1 	bl	8014e44 <iprintf>
 800f302:	f06f 060f 	mvn.w	r6, #15
 800f306:	e7f3      	b.n	800f2f0 <dhcp_start+0x50>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800f308:	4b14      	ldr	r3, [pc, #80]	; (800f35c <dhcp_start+0xbc>)
 800f30a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800f30e:	4916      	ldr	r1, [pc, #88]	; (800f368 <dhcp_start+0xc8>)
 800f310:	4814      	ldr	r0, [pc, #80]	; (800f364 <dhcp_start+0xc4>)
 800f312:	f005 fd97 	bl	8014e44 <iprintf>
 800f316:	f06f 060f 	mvn.w	r6, #15
 800f31a:	e7e9      	b.n	800f2f0 <dhcp_start+0x50>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800f31c:	2048      	movs	r0, #72	; 0x48
 800f31e:	f7f8 fc63 	bl	8007be8 <mem_malloc>
    if (dhcp == NULL) {
 800f322:	4605      	mov	r5, r0
 800f324:	b198      	cbz	r0, 800f34e <dhcp_start+0xae>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800f326:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 800f32a:	e7cb      	b.n	800f2c4 <dhcp_start+0x24>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f32c:	f7ff fab0 	bl	800e890 <dhcp_dec_pcb_refcount>
 800f330:	e7c8      	b.n	800f2c4 <dhcp_start+0x24>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800f332:	2102      	movs	r1, #2
 800f334:	4628      	mov	r0, r5
 800f336:	f7fe fde1 	bl	800defc <dhcp_set_state>
    return ERR_OK;
 800f33a:	e7d9      	b.n	800f2f0 <dhcp_start+0x50>
    dhcp_release_and_stop(netif);
 800f33c:	4620      	mov	r0, r4
 800f33e:	f7ff ff25 	bl	800f18c <dhcp_release_and_stop>
    return ERR_MEM;
 800f342:	f04f 36ff 	mov.w	r6, #4294967295
 800f346:	e7d3      	b.n	800f2f0 <dhcp_start+0x50>
    return ERR_MEM;
 800f348:	f04f 36ff 	mov.w	r6, #4294967295
 800f34c:	e7d0      	b.n	800f2f0 <dhcp_start+0x50>
      return ERR_MEM;
 800f34e:	f04f 36ff 	mov.w	r6, #4294967295
 800f352:	e7cd      	b.n	800f2f0 <dhcp_start+0x50>
    return ERR_MEM;
 800f354:	f04f 36ff 	mov.w	r6, #4294967295
 800f358:	e7ca      	b.n	800f2f0 <dhcp_start+0x50>
 800f35a:	bf00      	nop
 800f35c:	08018308 	.word	0x08018308
 800f360:	08015d1c 	.word	0x08015d1c
 800f364:	08015d2c 	.word	0x08015d2c
 800f368:	080184ac 	.word	0x080184ac

0800f36c <dhcp_coarse_tmr>:
{
 800f36c:	b510      	push	{r4, lr}
  NETIF_FOREACH(netif) {
 800f36e:	4b18      	ldr	r3, [pc, #96]	; (800f3d0 <dhcp_coarse_tmr+0x64>)
 800f370:	681c      	ldr	r4, [r3, #0]
 800f372:	e006      	b.n	800f382 <dhcp_coarse_tmr+0x16>
        dhcp_release_and_stop(netif);
 800f374:	4620      	mov	r0, r4
 800f376:	f7ff ff09 	bl	800f18c <dhcp_release_and_stop>
        dhcp_start(netif);
 800f37a:	4620      	mov	r0, r4
 800f37c:	f7ff ff90 	bl	800f2a0 <dhcp_start>
  NETIF_FOREACH(netif) {
 800f380:	6824      	ldr	r4, [r4, #0]
 800f382:	b31c      	cbz	r4, 800f3cc <dhcp_coarse_tmr+0x60>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f384:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d0f9      	beq.n	800f380 <dhcp_coarse_tmr+0x14>
 800f38c:	795a      	ldrb	r2, [r3, #5]
 800f38e:	2a00      	cmp	r2, #0
 800f390:	d0f6      	beq.n	800f380 <dhcp_coarse_tmr+0x14>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800f392:	8a99      	ldrh	r1, [r3, #20]
 800f394:	b129      	cbz	r1, 800f3a2 <dhcp_coarse_tmr+0x36>
 800f396:	8a5a      	ldrh	r2, [r3, #18]
 800f398:	3201      	adds	r2, #1
 800f39a:	b292      	uxth	r2, r2
 800f39c:	825a      	strh	r2, [r3, #18]
 800f39e:	4291      	cmp	r1, r2
 800f3a0:	d0e8      	beq.n	800f374 <dhcp_coarse_tmr+0x8>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800f3a2:	8a1a      	ldrh	r2, [r3, #16]
 800f3a4:	b11a      	cbz	r2, 800f3ae <dhcp_coarse_tmr+0x42>
 800f3a6:	1e51      	subs	r1, r2, #1
 800f3a8:	8219      	strh	r1, [r3, #16]
 800f3aa:	2a01      	cmp	r2, #1
 800f3ac:	d00a      	beq.n	800f3c4 <dhcp_coarse_tmr+0x58>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800f3ae:	89da      	ldrh	r2, [r3, #14]
 800f3b0:	2a00      	cmp	r2, #0
 800f3b2:	d0e5      	beq.n	800f380 <dhcp_coarse_tmr+0x14>
 800f3b4:	1e51      	subs	r1, r2, #1
 800f3b6:	81d9      	strh	r1, [r3, #14]
 800f3b8:	2a01      	cmp	r2, #1
 800f3ba:	d1e1      	bne.n	800f380 <dhcp_coarse_tmr+0x14>
        dhcp_t1_timeout(netif);
 800f3bc:	4620      	mov	r0, r4
 800f3be:	f7ff feb5 	bl	800f12c <dhcp_t1_timeout>
 800f3c2:	e7dd      	b.n	800f380 <dhcp_coarse_tmr+0x14>
        dhcp_t2_timeout(netif);
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	f7fe ff4d 	bl	800e264 <dhcp_t2_timeout>
 800f3ca:	e7d9      	b.n	800f380 <dhcp_coarse_tmr+0x14>
}
 800f3cc:	bd10      	pop	{r4, pc}
 800f3ce:	bf00      	nop
 800f3d0:	20008600 	.word	0x20008600

0800f3d4 <dhcp_timeout>:
{
 800f3d4:	b510      	push	{r4, lr}
 800f3d6:	4604      	mov	r4, r0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f3d8:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800f3dc:	7953      	ldrb	r3, [r2, #5]
 800f3de:	2b0c      	cmp	r3, #12
 800f3e0:	d00d      	beq.n	800f3fe <dhcp_timeout+0x2a>
 800f3e2:	2b06      	cmp	r3, #6
 800f3e4:	d00b      	beq.n	800f3fe <dhcp_timeout+0x2a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800f3e6:	2b01      	cmp	r3, #1
 800f3e8:	d00d      	beq.n	800f406 <dhcp_timeout+0x32>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800f3ea:	2b08      	cmp	r3, #8
 800f3ec:	d017      	beq.n	800f41e <dhcp_timeout+0x4a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800f3ee:	2b03      	cmp	r3, #3
 800f3f0:	d108      	bne.n	800f404 <dhcp_timeout+0x30>
    if (dhcp->tries < REBOOT_TRIES) {
 800f3f2:	7993      	ldrb	r3, [r2, #6]
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	d91b      	bls.n	800f430 <dhcp_timeout+0x5c>
      dhcp_discover(netif);
 800f3f8:	f7ff f8be 	bl	800e578 <dhcp_discover>
}
 800f3fc:	e002      	b.n	800f404 <dhcp_timeout+0x30>
    dhcp_discover(netif);
 800f3fe:	4620      	mov	r0, r4
 800f400:	f7ff f8ba 	bl	800e578 <dhcp_discover>
}
 800f404:	bd10      	pop	{r4, pc}
    if (dhcp->tries <= 5) {
 800f406:	7993      	ldrb	r3, [r2, #6]
 800f408:	2b05      	cmp	r3, #5
 800f40a:	d802      	bhi.n	800f412 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800f40c:	f7fe ffce 	bl	800e3ac <dhcp_select>
 800f410:	e7f8      	b.n	800f404 <dhcp_timeout+0x30>
      dhcp_release_and_stop(netif);
 800f412:	f7ff febb 	bl	800f18c <dhcp_release_and_stop>
      dhcp_start(netif);
 800f416:	4620      	mov	r0, r4
 800f418:	f7ff ff42 	bl	800f2a0 <dhcp_start>
 800f41c:	e7f2      	b.n	800f404 <dhcp_timeout+0x30>
    if (dhcp->tries <= 1) {
 800f41e:	7993      	ldrb	r3, [r2, #6]
 800f420:	2b01      	cmp	r3, #1
 800f422:	d902      	bls.n	800f42a <dhcp_timeout+0x56>
      dhcp_bind(netif);
 800f424:	f7ff f98a 	bl	800e73c <dhcp_bind>
 800f428:	e7ec      	b.n	800f404 <dhcp_timeout+0x30>
      dhcp_check(netif);
 800f42a:	f7ff f971 	bl	800e710 <dhcp_check>
 800f42e:	e7e9      	b.n	800f404 <dhcp_timeout+0x30>
      dhcp_reboot(netif);
 800f430:	f7fe ff32 	bl	800e298 <dhcp_reboot>
 800f434:	e7e6      	b.n	800f404 <dhcp_timeout+0x30>
	...

0800f438 <dhcp_fine_tmr>:
{
 800f438:	b510      	push	{r4, lr}
  NETIF_FOREACH(netif) {
 800f43a:	4b0c      	ldr	r3, [pc, #48]	; (800f46c <dhcp_fine_tmr+0x34>)
 800f43c:	681c      	ldr	r4, [r3, #0]
 800f43e:	e002      	b.n	800f446 <dhcp_fine_tmr+0xe>
      } else if (dhcp->request_timeout == 1) {
 800f440:	2a01      	cmp	r2, #1
 800f442:	d00b      	beq.n	800f45c <dhcp_fine_tmr+0x24>
  NETIF_FOREACH(netif) {
 800f444:	6824      	ldr	r4, [r4, #0]
 800f446:	b17c      	cbz	r4, 800f468 <dhcp_fine_tmr+0x30>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f448:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    if (dhcp != NULL) {
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d0f9      	beq.n	800f444 <dhcp_fine_tmr+0xc>
      if (dhcp->request_timeout > 1) {
 800f450:	891a      	ldrh	r2, [r3, #8]
 800f452:	2a01      	cmp	r2, #1
 800f454:	d9f4      	bls.n	800f440 <dhcp_fine_tmr+0x8>
        dhcp->request_timeout--;
 800f456:	3a01      	subs	r2, #1
 800f458:	811a      	strh	r2, [r3, #8]
 800f45a:	e7f3      	b.n	800f444 <dhcp_fine_tmr+0xc>
        dhcp->request_timeout--;
 800f45c:	3a01      	subs	r2, #1
 800f45e:	811a      	strh	r2, [r3, #8]
        dhcp_timeout(netif);
 800f460:	4620      	mov	r0, r4
 800f462:	f7ff ffb7 	bl	800f3d4 <dhcp_timeout>
 800f466:	e7ed      	b.n	800f444 <dhcp_fine_tmr+0xc>
}
 800f468:	bd10      	pop	{r4, pc}
 800f46a:	bf00      	nop
 800f46c:	20008600 	.word	0x20008600

0800f470 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f470:	b510      	push	{r4, lr}
 800f472:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f474:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800f478:	00d3      	lsls	r3, r2, #3
 800f47a:	4a09      	ldr	r2, [pc, #36]	; (800f4a0 <etharp_free_entry+0x30>)
 800f47c:	58d0      	ldr	r0, [r2, r3]
 800f47e:	b138      	cbz	r0, 800f490 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f480:	f7f9 f968 	bl	8008754 <pbuf_free>
    arp_table[i].q = NULL;
 800f484:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800f488:	00d3      	lsls	r3, r2, #3
 800f48a:	4a05      	ldr	r2, [pc, #20]	; (800f4a0 <etharp_free_entry+0x30>)
 800f48c:	2100      	movs	r1, #0
 800f48e:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f490:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800f494:	00e2      	lsls	r2, r4, #3
 800f496:	4b02      	ldr	r3, [pc, #8]	; (800f4a0 <etharp_free_entry+0x30>)
 800f498:	4413      	add	r3, r2
 800f49a:	2200      	movs	r2, #0
 800f49c:	751a      	strb	r2, [r3, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f49e:	bd10      	pop	{r4, pc}
 800f4a0:	20001798 	.word	0x20001798

0800f4a4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4a8:	b083      	sub	sp, #12
 800f4aa:	4689      	mov	r9, r1
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f4ac:	f04f 0c00 	mov.w	ip, #0
 800f4b0:	46e3      	mov	fp, ip
 800f4b2:	46e2      	mov	sl, ip
  s16_t old_queue = ARP_TABLE_SIZE;
 800f4b4:	f04f 0e0a 	mov.w	lr, #10
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f4b8:	4663      	mov	r3, ip
  s16_t empty = ARP_TABLE_SIZE;
 800f4ba:	4676      	mov	r6, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f4bc:	46f0      	mov	r8, lr
 800f4be:	f8cd e004 	str.w	lr, [sp, #4]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f4c2:	e003      	b.n	800f4cc <etharp_find_entry+0x28>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f4c4:	b96c      	cbnz	r4, 800f4e2 <etharp_find_entry+0x3e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f4c6:	461e      	mov	r6, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f4c8:	3301      	adds	r3, #1
 800f4ca:	b21b      	sxth	r3, r3
 800f4cc:	2b09      	cmp	r3, #9
 800f4ce:	dc4c      	bgt.n	800f56a <etharp_find_entry+0xc6>
    u8_t state = arp_table[i].state;
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800f4d6:	00e5      	lsls	r5, r4, #3
 800f4d8:	4c5e      	ldr	r4, [pc, #376]	; (800f654 <etharp_find_entry+0x1b0>)
 800f4da:	442c      	add	r4, r5
 800f4dc:	7d24      	ldrb	r4, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f4de:	2e0a      	cmp	r6, #10
 800f4e0:	d0f0      	beq.n	800f4c4 <etharp_find_entry+0x20>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f4e2:	2c00      	cmp	r4, #0
 800f4e4:	d0f0      	beq.n	800f4c8 <etharp_find_entry+0x24>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f4e6:	b140      	cbz	r0, 800f4fa <etharp_find_entry+0x56>
 800f4e8:	eb01 0541 	add.w	r5, r1, r1, lsl #1
 800f4ec:	00ef      	lsls	r7, r5, #3
 800f4ee:	4d59      	ldr	r5, [pc, #356]	; (800f654 <etharp_find_entry+0x1b0>)
 800f4f0:	443d      	add	r5, r7
 800f4f2:	686d      	ldr	r5, [r5, #4]
 800f4f4:	6807      	ldr	r7, [r0, #0]
 800f4f6:	42af      	cmp	r7, r5
 800f4f8:	d00e      	beq.n	800f518 <etharp_find_entry+0x74>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f4fa:	2c01      	cmp	r4, #1
 800f4fc:	d019      	beq.n	800f532 <etharp_find_entry+0x8e>
            old_pending = i;
            age_pending = arp_table[i].ctime;
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f4fe:	2c01      	cmp	r4, #1
 800f500:	d9e2      	bls.n	800f4c8 <etharp_find_entry+0x24>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f502:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f506:	00cc      	lsls	r4, r1, #3
 800f508:	4952      	ldr	r1, [pc, #328]	; (800f654 <etharp_find_entry+0x1b0>)
 800f50a:	4421      	add	r1, r4
 800f50c:	8a49      	ldrh	r1, [r1, #18]
 800f50e:	4561      	cmp	r1, ip
 800f510:	d3da      	bcc.n	800f4c8 <etharp_find_entry+0x24>
            old_stable = i;
            age_stable = arp_table[i].ctime;
 800f512:	468c      	mov	ip, r1
            old_stable = i;
 800f514:	4698      	mov	r8, r3
 800f516:	e7d7      	b.n	800f4c8 <etharp_find_entry+0x24>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f518:	2a00      	cmp	r2, #0
 800f51a:	f000 8092 	beq.w	800f642 <etharp_find_entry+0x19e>
 800f51e:	eb01 0541 	add.w	r5, r1, r1, lsl #1
 800f522:	00ef      	lsls	r7, r5, #3
 800f524:	4d4b      	ldr	r5, [pc, #300]	; (800f654 <etharp_find_entry+0x1b0>)
 800f526:	443d      	add	r5, r7
 800f528:	68ad      	ldr	r5, [r5, #8]
 800f52a:	4295      	cmp	r5, r2
 800f52c:	d1e5      	bne.n	800f4fa <etharp_find_entry+0x56>
        return i;
 800f52e:	461e      	mov	r6, r3
 800f530:	e059      	b.n	800f5e6 <etharp_find_entry+0x142>
        if (arp_table[i].q != NULL) {
 800f532:	eb01 0541 	add.w	r5, r1, r1, lsl #1
 800f536:	00ec      	lsls	r4, r5, #3
 800f538:	4d46      	ldr	r5, [pc, #280]	; (800f654 <etharp_find_entry+0x1b0>)
 800f53a:	592c      	ldr	r4, [r5, r4]
 800f53c:	b154      	cbz	r4, 800f554 <etharp_find_entry+0xb0>
          if (arp_table[i].ctime >= age_queue) {
 800f53e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f542:	00cc      	lsls	r4, r1, #3
 800f544:	4629      	mov	r1, r5
 800f546:	4421      	add	r1, r4
 800f548:	8a49      	ldrh	r1, [r1, #18]
 800f54a:	4551      	cmp	r1, sl
 800f54c:	d3bc      	bcc.n	800f4c8 <etharp_find_entry+0x24>
            age_queue = arp_table[i].ctime;
 800f54e:	468a      	mov	sl, r1
            old_queue = i;
 800f550:	469e      	mov	lr, r3
 800f552:	e7b9      	b.n	800f4c8 <etharp_find_entry+0x24>
          if (arp_table[i].ctime >= age_pending) {
 800f554:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f558:	00cc      	lsls	r4, r1, #3
 800f55a:	493e      	ldr	r1, [pc, #248]	; (800f654 <etharp_find_entry+0x1b0>)
 800f55c:	4421      	add	r1, r4
 800f55e:	8a49      	ldrh	r1, [r1, #18]
 800f560:	4559      	cmp	r1, fp
 800f562:	d3b1      	bcc.n	800f4c8 <etharp_find_entry+0x24>
            age_pending = arp_table[i].ctime;
 800f564:	468b      	mov	fp, r1
            old_pending = i;
 800f566:	9301      	str	r3, [sp, #4]
 800f568:	e7ae      	b.n	800f4c8 <etharp_find_entry+0x24>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f56a:	f019 0f02 	tst.w	r9, #2
 800f56e:	d16a      	bne.n	800f646 <etharp_find_entry+0x1a2>
 800f570:	2e0a      	cmp	r6, #10
 800f572:	d03c      	beq.n	800f5ee <etharp_find_entry+0x14a>
 800f574:	4614      	mov	r4, r2
 800f576:	4607      	mov	r7, r0
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f578:	2e09      	cmp	r6, #9
 800f57a:	dd16      	ble.n	800f5aa <etharp_find_entry+0x106>
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f57c:	f1b8 0f09 	cmp.w	r8, #9
 800f580:	dc3b      	bgt.n	800f5fa <etharp_find_entry+0x156>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f582:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 800f586:	00d3      	lsls	r3, r2, #3
 800f588:	4a32      	ldr	r2, [pc, #200]	; (800f654 <etharp_find_entry+0x1b0>)
 800f58a:	58d3      	ldr	r3, [r2, r3]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d03c      	beq.n	800f60a <etharp_find_entry+0x166>
 800f590:	4b31      	ldr	r3, [pc, #196]	; (800f658 <etharp_find_entry+0x1b4>)
 800f592:	f240 126d 	movw	r2, #365	; 0x16d
 800f596:	4931      	ldr	r1, [pc, #196]	; (800f65c <etharp_find_entry+0x1b8>)
 800f598:	4831      	ldr	r0, [pc, #196]	; (800f660 <etharp_find_entry+0x1bc>)
 800f59a:	f005 fc53 	bl	8014e44 <iprintf>
      i = old_stable;
 800f59e:	4646      	mov	r6, r8
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f5a0:	2e09      	cmp	r6, #9
 800f5a2:	dc36      	bgt.n	800f612 <etharp_find_entry+0x16e>
    etharp_free_entry(i);
 800f5a4:	4630      	mov	r0, r6
 800f5a6:	f7ff ff63 	bl	800f470 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f5aa:	2e09      	cmp	r6, #9
 800f5ac:	dc39      	bgt.n	800f622 <etharp_find_entry+0x17e>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f5ae:	4635      	mov	r5, r6
 800f5b0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800f5b4:	00da      	lsls	r2, r3, #3
 800f5b6:	4b27      	ldr	r3, [pc, #156]	; (800f654 <etharp_find_entry+0x1b0>)
 800f5b8:	4413      	add	r3, r2
 800f5ba:	7d1b      	ldrb	r3, [r3, #20]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d138      	bne.n	800f632 <etharp_find_entry+0x18e>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f5c0:	b137      	cbz	r7, 800f5d0 <etharp_find_entry+0x12c>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f5c2:	6839      	ldr	r1, [r7, #0]
 800f5c4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800f5c8:	00da      	lsls	r2, r3, #3
 800f5ca:	4b22      	ldr	r3, [pc, #136]	; (800f654 <etharp_find_entry+0x1b0>)
 800f5cc:	4413      	add	r3, r2
 800f5ce:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800f5d0:	4a20      	ldr	r2, [pc, #128]	; (800f654 <etharp_find_entry+0x1b0>)
 800f5d2:	006b      	lsls	r3, r5, #1
 800f5d4:	1958      	adds	r0, r3, r5
 800f5d6:	00c1      	lsls	r1, r0, #3
 800f5d8:	4411      	add	r1, r2
 800f5da:	2000      	movs	r0, #0
 800f5dc:	8248      	strh	r0, [r1, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f5de:	442b      	add	r3, r5
 800f5e0:	00d9      	lsls	r1, r3, #3
 800f5e2:	440a      	add	r2, r1
 800f5e4:	6094      	str	r4, [r2, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800f5e6:	4630      	mov	r0, r6
 800f5e8:	b003      	add	sp, #12
 800f5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f5ee:	f019 0f01 	tst.w	r9, #1
 800f5f2:	d1bf      	bne.n	800f574 <etharp_find_entry+0xd0>
    return (s16_t)ERR_MEM;
 800f5f4:	f04f 36ff 	mov.w	r6, #4294967295
 800f5f8:	e7f5      	b.n	800f5e6 <etharp_find_entry+0x142>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f5fa:	9b01      	ldr	r3, [sp, #4]
 800f5fc:	2b09      	cmp	r3, #9
 800f5fe:	dd06      	ble.n	800f60e <etharp_find_entry+0x16a>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f600:	f1be 0f09 	cmp.w	lr, #9
 800f604:	dc22      	bgt.n	800f64c <etharp_find_entry+0x1a8>
      i = old_queue;
 800f606:	4676      	mov	r6, lr
 800f608:	e7ca      	b.n	800f5a0 <etharp_find_entry+0xfc>
      i = old_stable;
 800f60a:	4646      	mov	r6, r8
 800f60c:	e7c8      	b.n	800f5a0 <etharp_find_entry+0xfc>
      i = old_pending;
 800f60e:	9e01      	ldr	r6, [sp, #4]
 800f610:	e7c6      	b.n	800f5a0 <etharp_find_entry+0xfc>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f612:	4b11      	ldr	r3, [pc, #68]	; (800f658 <etharp_find_entry+0x1b4>)
 800f614:	f240 127f 	movw	r2, #383	; 0x17f
 800f618:	4912      	ldr	r1, [pc, #72]	; (800f664 <etharp_find_entry+0x1c0>)
 800f61a:	4811      	ldr	r0, [pc, #68]	; (800f660 <etharp_find_entry+0x1bc>)
 800f61c:	f005 fc12 	bl	8014e44 <iprintf>
 800f620:	e7c0      	b.n	800f5a4 <etharp_find_entry+0x100>
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f622:	4b0d      	ldr	r3, [pc, #52]	; (800f658 <etharp_find_entry+0x1b4>)
 800f624:	f240 1283 	movw	r2, #387	; 0x183
 800f628:	490e      	ldr	r1, [pc, #56]	; (800f664 <etharp_find_entry+0x1c0>)
 800f62a:	480d      	ldr	r0, [pc, #52]	; (800f660 <etharp_find_entry+0x1bc>)
 800f62c:	f005 fc0a 	bl	8014e44 <iprintf>
 800f630:	e7bd      	b.n	800f5ae <etharp_find_entry+0x10a>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f632:	4b09      	ldr	r3, [pc, #36]	; (800f658 <etharp_find_entry+0x1b4>)
 800f634:	f240 1285 	movw	r2, #389	; 0x185
 800f638:	490b      	ldr	r1, [pc, #44]	; (800f668 <etharp_find_entry+0x1c4>)
 800f63a:	4809      	ldr	r0, [pc, #36]	; (800f660 <etharp_find_entry+0x1bc>)
 800f63c:	f005 fc02 	bl	8014e44 <iprintf>
 800f640:	e7be      	b.n	800f5c0 <etharp_find_entry+0x11c>
        return i;
 800f642:	461e      	mov	r6, r3
 800f644:	e7cf      	b.n	800f5e6 <etharp_find_entry+0x142>
    return (s16_t)ERR_MEM;
 800f646:	f04f 36ff 	mov.w	r6, #4294967295
 800f64a:	e7cc      	b.n	800f5e6 <etharp_find_entry+0x142>
      return (s16_t)ERR_MEM;
 800f64c:	f04f 36ff 	mov.w	r6, #4294967295
 800f650:	e7c9      	b.n	800f5e6 <etharp_find_entry+0x142>
 800f652:	bf00      	nop
 800f654:	20001798 	.word	0x20001798
 800f658:	080184d0 	.word	0x080184d0
 800f65c:	08018508 	.word	0x08018508
 800f660:	08015d2c 	.word	0x08015d2c
 800f664:	08018520 	.word	0x08018520
 800f668:	08018534 	.word	0x08018534

0800f66c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f66c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f66e:	b083      	sub	sp, #12
 800f670:	4605      	mov	r5, r0
 800f672:	460c      	mov	r4, r1
 800f674:	4616      	mov	r6, r2
 800f676:	461f      	mov	r7, r3
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f678:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
 800f67c:	2b06      	cmp	r3, #6
 800f67e:	d13a      	bne.n	800f6f6 <etharp_update_arp_entry+0x8a>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f680:	2c00      	cmp	r4, #0
 800f682:	d043      	beq.n	800f70c <etharp_update_arp_entry+0xa0>
 800f684:	6820      	ldr	r0, [r4, #0]
 800f686:	2800      	cmp	r0, #0
 800f688:	d043      	beq.n	800f712 <etharp_update_arp_entry+0xa6>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f68a:	4629      	mov	r1, r5
 800f68c:	f000 fe99 	bl	80103c2 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800f690:	2800      	cmp	r0, #0
 800f692:	d141      	bne.n	800f718 <etharp_update_arp_entry+0xac>
      ip4_addr_ismulticast(ipaddr)) {
 800f694:	6823      	ldr	r3, [r4, #0]
 800f696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f69a:	2be0      	cmp	r3, #224	; 0xe0
 800f69c:	d03f      	beq.n	800f71e <etharp_update_arp_entry+0xb2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f69e:	462a      	mov	r2, r5
 800f6a0:	4639      	mov	r1, r7
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	f7ff fefe 	bl	800f4a4 <etharp_find_entry>
  /* bail out if no entry could be found */
  if (i < 0) {
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	db2c      	blt.n	800f706 <etharp_update_arp_entry+0x9a>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f6ac:	4c1e      	ldr	r4, [pc, #120]	; (800f728 <etharp_update_arp_entry+0xbc>)
 800f6ae:	0042      	lsls	r2, r0, #1
 800f6b0:	1813      	adds	r3, r2, r0
 800f6b2:	00d9      	lsls	r1, r3, #3
 800f6b4:	1867      	adds	r7, r4, r1
 800f6b6:	2302      	movs	r3, #2
 800f6b8:	753b      	strb	r3, [r7, #20]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f6ba:	60bd      	str	r5, [r7, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f6bc:	460b      	mov	r3, r1
 800f6be:	3308      	adds	r3, #8
 800f6c0:	4423      	add	r3, r4
 800f6c2:	6832      	ldr	r2, [r6, #0]
 800f6c4:	605a      	str	r2, [r3, #4]
 800f6c6:	88b2      	ldrh	r2, [r6, #4]
 800f6c8:	811a      	strh	r2, [r3, #8]
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	827b      	strh	r3, [r7, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f6ce:	5867      	ldr	r7, [r4, r1]
 800f6d0:	b347      	cbz	r7, 800f724 <etharp_update_arp_entry+0xb8>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 800f6d2:	2400      	movs	r4, #0
 800f6d4:	4a14      	ldr	r2, [pc, #80]	; (800f728 <etharp_update_arp_entry+0xbc>)
 800f6d6:	5054      	str	r4, [r2, r1]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f6d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f6dc:	9300      	str	r3, [sp, #0]
 800f6de:	4633      	mov	r3, r6
 800f6e0:	f105 02d4 	add.w	r2, r5, #212	; 0xd4
 800f6e4:	4639      	mov	r1, r7
 800f6e6:	4628      	mov	r0, r5
 800f6e8:	f005 faf4 	bl	8014cd4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f6ec:	4638      	mov	r0, r7
 800f6ee:	f7f9 f831 	bl	8008754 <pbuf_free>
  }
  return ERR_OK;
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	e008      	b.n	800f708 <etharp_update_arp_entry+0x9c>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f6f6:	4b0d      	ldr	r3, [pc, #52]	; (800f72c <etharp_update_arp_entry+0xc0>)
 800f6f8:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f6fc:	490c      	ldr	r1, [pc, #48]	; (800f730 <etharp_update_arp_entry+0xc4>)
 800f6fe:	480d      	ldr	r0, [pc, #52]	; (800f734 <etharp_update_arp_entry+0xc8>)
 800f700:	f005 fba0 	bl	8014e44 <iprintf>
 800f704:	e7bc      	b.n	800f680 <etharp_update_arp_entry+0x14>
    return (err_t)i;
 800f706:	b240      	sxtb	r0, r0
}
 800f708:	b003      	add	sp, #12
 800f70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
 800f70c:	f06f 000f 	mvn.w	r0, #15
 800f710:	e7fa      	b.n	800f708 <etharp_update_arp_entry+0x9c>
 800f712:	f06f 000f 	mvn.w	r0, #15
 800f716:	e7f7      	b.n	800f708 <etharp_update_arp_entry+0x9c>
 800f718:	f06f 000f 	mvn.w	r0, #15
 800f71c:	e7f4      	b.n	800f708 <etharp_update_arp_entry+0x9c>
 800f71e:	f06f 000f 	mvn.w	r0, #15
 800f722:	e7f1      	b.n	800f708 <etharp_update_arp_entry+0x9c>
  return ERR_OK;
 800f724:	2000      	movs	r0, #0
 800f726:	e7ef      	b.n	800f708 <etharp_update_arp_entry+0x9c>
 800f728:	20001798 	.word	0x20001798
 800f72c:	080184d0 	.word	0x080184d0
 800f730:	08018688 	.word	0x08018688
 800f734:	08015d2c 	.word	0x08015d2c

0800f738 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f73c:	b082      	sub	sp, #8
 800f73e:	4689      	mov	r9, r1
 800f740:	4692      	mov	sl, r2
 800f742:	4698      	mov	r8, r3
 800f744:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f746:	4607      	mov	r7, r0
 800f748:	2800      	cmp	r0, #0
 800f74a:	d042      	beq.n	800f7d2 <etharp_raw+0x9a>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f74c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f750:	211c      	movs	r1, #28
 800f752:	200e      	movs	r0, #14
 800f754:	f7f9 f860 	bl	8008818 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f758:	4606      	mov	r6, r0
 800f75a:	2800      	cmp	r0, #0
 800f75c:	d051      	beq.n	800f802 <etharp_raw+0xca>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f75e:	8943      	ldrh	r3, [r0, #10]
 800f760:	2b1b      	cmp	r3, #27
 800f762:	d93e      	bls.n	800f7e2 <etharp_raw+0xaa>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f764:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f766:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800f76a:	f7f7 fd31 	bl	80071d0 <lwip_htons>
 800f76e:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f770:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 800f774:	2b06      	cmp	r3, #6
 800f776:	d13c      	bne.n	800f7f2 <etharp_raw+0xba>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f778:	f8d8 3000 	ldr.w	r3, [r8]
 800f77c:	60a3      	str	r3, [r4, #8]
 800f77e:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800f782:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f784:	682b      	ldr	r3, [r5, #0]
 800f786:	f8c4 3012 	str.w	r3, [r4, #18]
 800f78a:	88ab      	ldrh	r3, [r5, #4]
 800f78c:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f78e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f79c:	2500      	movs	r5, #0
 800f79e:	7025      	strb	r5, [r4, #0]
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f7a4:	2308      	movs	r3, #8
 800f7a6:	70a3      	strb	r3, [r4, #2]
 800f7a8:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f7aa:	2306      	movs	r3, #6
 800f7ac:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f7ae:	2304      	movs	r3, #4
 800f7b0:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f7b2:	f640 0306 	movw	r3, #2054	; 0x806
 800f7b6:	9300      	str	r3, [sp, #0]
 800f7b8:	4653      	mov	r3, sl
 800f7ba:	464a      	mov	r2, r9
 800f7bc:	4631      	mov	r1, r6
 800f7be:	4638      	mov	r0, r7
 800f7c0:	f005 fa88 	bl	8014cd4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f7c4:	4630      	mov	r0, r6
 800f7c6:	f7f8 ffc5 	bl	8008754 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800f7ca:	4628      	mov	r0, r5
}
 800f7cc:	b002      	add	sp, #8
 800f7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f7d2:	4b0d      	ldr	r3, [pc, #52]	; (800f808 <etharp_raw+0xd0>)
 800f7d4:	f240 4257 	movw	r2, #1111	; 0x457
 800f7d8:	490c      	ldr	r1, [pc, #48]	; (800f80c <etharp_raw+0xd4>)
 800f7da:	480d      	ldr	r0, [pc, #52]	; (800f810 <etharp_raw+0xd8>)
 800f7dc:	f005 fb32 	bl	8014e44 <iprintf>
 800f7e0:	e7b4      	b.n	800f74c <etharp_raw+0x14>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f7e2:	4b09      	ldr	r3, [pc, #36]	; (800f808 <etharp_raw+0xd0>)
 800f7e4:	f240 4263 	movw	r2, #1123	; 0x463
 800f7e8:	490a      	ldr	r1, [pc, #40]	; (800f814 <etharp_raw+0xdc>)
 800f7ea:	4809      	ldr	r0, [pc, #36]	; (800f810 <etharp_raw+0xd8>)
 800f7ec:	f005 fb2a 	bl	8014e44 <iprintf>
 800f7f0:	e7b8      	b.n	800f764 <etharp_raw+0x2c>
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f7f2:	4b05      	ldr	r3, [pc, #20]	; (800f808 <etharp_raw+0xd0>)
 800f7f4:	f240 426a 	movw	r2, #1130	; 0x46a
 800f7f8:	4907      	ldr	r1, [pc, #28]	; (800f818 <etharp_raw+0xe0>)
 800f7fa:	4805      	ldr	r0, [pc, #20]	; (800f810 <etharp_raw+0xd8>)
 800f7fc:	f005 fb22 	bl	8014e44 <iprintf>
 800f800:	e7ba      	b.n	800f778 <etharp_raw+0x40>
    return ERR_MEM;
 800f802:	f04f 30ff 	mov.w	r0, #4294967295
 800f806:	e7e1      	b.n	800f7cc <etharp_raw+0x94>
 800f808:	080184d0 	.word	0x080184d0
 800f80c:	08015d1c 	.word	0x08015d1c
 800f810:	08015d2c 	.word	0x08015d2c
 800f814:	08018610 	.word	0x08018610
 800f818:	08018644 	.word	0x08018644

0800f81c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f81c:	b530      	push	{r4, r5, lr}
 800f81e:	b085      	sub	sp, #20
 800f820:	4603      	mov	r3, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f822:	f100 04d4 	add.w	r4, r0, #212	; 0xd4
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f826:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f828:	2501      	movs	r5, #1
 800f82a:	9503      	str	r5, [sp, #12]
 800f82c:	9102      	str	r1, [sp, #8]
 800f82e:	4904      	ldr	r1, [pc, #16]	; (800f840 <etharp_request_dst+0x24>)
 800f830:	9101      	str	r1, [sp, #4]
 800f832:	9300      	str	r3, [sp, #0]
 800f834:	4623      	mov	r3, r4
 800f836:	4621      	mov	r1, r4
 800f838:	f7ff ff7e 	bl	800f738 <etharp_raw>
                    ipaddr, ARP_REQUEST);
}
 800f83c:	b005      	add	sp, #20
 800f83e:	bd30      	pop	{r4, r5, pc}
 800f840:	08018d94 	.word	0x08018d94

0800f844 <etharp_cleanup_netif>:
{
 800f844:	b538      	push	{r3, r4, r5, lr}
 800f846:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f848:	2400      	movs	r4, #0
 800f84a:	e000      	b.n	800f84e <etharp_cleanup_netif+0xa>
 800f84c:	3401      	adds	r4, #1
 800f84e:	2c09      	cmp	r4, #9
 800f850:	dc10      	bgt.n	800f874 <etharp_cleanup_netif+0x30>
    u8_t state = arp_table[i].state;
 800f852:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f856:	00da      	lsls	r2, r3, #3
 800f858:	4b07      	ldr	r3, [pc, #28]	; (800f878 <etharp_cleanup_netif+0x34>)
 800f85a:	4413      	add	r3, r2
 800f85c:	7d1b      	ldrb	r3, [r3, #20]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d0f4      	beq.n	800f84c <etharp_cleanup_netif+0x8>
 800f862:	4b05      	ldr	r3, [pc, #20]	; (800f878 <etharp_cleanup_netif+0x34>)
 800f864:	4413      	add	r3, r2
 800f866:	689b      	ldr	r3, [r3, #8]
 800f868:	42ab      	cmp	r3, r5
 800f86a:	d1ef      	bne.n	800f84c <etharp_cleanup_netif+0x8>
      etharp_free_entry(i);
 800f86c:	4620      	mov	r0, r4
 800f86e:	f7ff fdff 	bl	800f470 <etharp_free_entry>
 800f872:	e7eb      	b.n	800f84c <etharp_cleanup_netif+0x8>
}
 800f874:	bd38      	pop	{r3, r4, r5, pc}
 800f876:	bf00      	nop
 800f878:	20001798 	.word	0x20001798

0800f87c <etharp_input>:
{
 800f87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f880:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f882:	b179      	cbz	r1, 800f8a4 <etharp_input+0x28>
 800f884:	4604      	mov	r4, r0
 800f886:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 800f888:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f88a:	882b      	ldrh	r3, [r5, #0]
 800f88c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f890:	d102      	bne.n	800f898 <etharp_input+0x1c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f892:	792b      	ldrb	r3, [r5, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f894:	2b06      	cmp	r3, #6
 800f896:	d00d      	beq.n	800f8b4 <etharp_input+0x38>
    pbuf_free(p);
 800f898:	4620      	mov	r0, r4
 800f89a:	f7f8 ff5b 	bl	8008754 <pbuf_free>
}
 800f89e:	b006      	add	sp, #24
 800f8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f8a4:	4b24      	ldr	r3, [pc, #144]	; (800f938 <etharp_input+0xbc>)
 800f8a6:	f240 228a 	movw	r2, #650	; 0x28a
 800f8aa:	4924      	ldr	r1, [pc, #144]	; (800f93c <etharp_input+0xc0>)
 800f8ac:	4824      	ldr	r0, [pc, #144]	; (800f940 <etharp_input+0xc4>)
 800f8ae:	f005 fac9 	bl	8014e44 <iprintf>
 800f8b2:	e7f4      	b.n	800f89e <etharp_input+0x22>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f8b4:	796b      	ldrb	r3, [r5, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f8b6:	2b04      	cmp	r3, #4
 800f8b8:	d1ee      	bne.n	800f898 <etharp_input+0x1c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f8ba:	886b      	ldrh	r3, [r5, #2]
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f8bc:	2b08      	cmp	r3, #8
 800f8be:	d1eb      	bne.n	800f898 <etharp_input+0x1c>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f8c0:	f8d5 300e 	ldr.w	r3, [r5, #14]
 800f8c4:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f8c6:	69af      	ldr	r7, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f8c8:	684b      	ldr	r3, [r1, #4]
 800f8ca:	b99b      	cbnz	r3, 800f8f4 <etharp_input+0x78>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f8cc:	f105 0808 	add.w	r8, r5, #8
    for_us = 0;
 800f8d0:	2700      	movs	r7, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f8d2:	2302      	movs	r3, #2
 800f8d4:	4642      	mov	r2, r8
 800f8d6:	a905      	add	r1, sp, #20
 800f8d8:	4630      	mov	r0, r6
 800f8da:	f7ff fec7 	bl	800f66c <etharp_update_arp_entry>
  switch (hdr->opcode) {
 800f8de:	88eb      	ldrh	r3, [r5, #6]
 800f8e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f8e4:	d011      	beq.n	800f90a <etharp_input+0x8e>
 800f8e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8ea:	d020      	beq.n	800f92e <etharp_input+0xb2>
  pbuf_free(p);
 800f8ec:	4620      	mov	r0, r4
 800f8ee:	f7f8 ff31 	bl	8008754 <pbuf_free>
 800f8f2:	e7d4      	b.n	800f89e <etharp_input+0x22>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f8f4:	42bb      	cmp	r3, r7
 800f8f6:	bf14      	ite	ne
 800f8f8:	2700      	movne	r7, #0
 800f8fa:	2701      	moveq	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f8fc:	f105 0808 	add.w	r8, r5, #8
 800f900:	b10f      	cbz	r7, 800f906 <etharp_input+0x8a>
 800f902:	2301      	movs	r3, #1
 800f904:	e7e6      	b.n	800f8d4 <etharp_input+0x58>
 800f906:	2302      	movs	r3, #2
 800f908:	e7e4      	b.n	800f8d4 <etharp_input+0x58>
      if (for_us) {
 800f90a:	2f00      	cmp	r7, #0
 800f90c:	d0ee      	beq.n	800f8ec <etharp_input+0x70>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f90e:	f106 01d4 	add.w	r1, r6, #212	; 0xd4
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f912:	1d33      	adds	r3, r6, #4
        etharp_raw(netif,
 800f914:	2202      	movs	r2, #2
 800f916:	9203      	str	r2, [sp, #12]
 800f918:	aa05      	add	r2, sp, #20
 800f91a:	9202      	str	r2, [sp, #8]
 800f91c:	f8cd 8004 	str.w	r8, [sp, #4]
 800f920:	9300      	str	r3, [sp, #0]
 800f922:	460b      	mov	r3, r1
 800f924:	4642      	mov	r2, r8
 800f926:	4630      	mov	r0, r6
 800f928:	f7ff ff06 	bl	800f738 <etharp_raw>
 800f92c:	e7de      	b.n	800f8ec <etharp_input+0x70>
      dhcp_arp_reply(netif, &sipaddr);
 800f92e:	a905      	add	r1, sp, #20
 800f930:	4630      	mov	r0, r6
 800f932:	f7ff fb63 	bl	800effc <dhcp_arp_reply>
      break;
 800f936:	e7d9      	b.n	800f8ec <etharp_input+0x70>
 800f938:	080184d0 	.word	0x080184d0
 800f93c:	08015d1c 	.word	0x08015d1c
 800f940:	08015d2c 	.word	0x08015d2c

0800f944 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f944:	b508      	push	{r3, lr}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f946:	4a02      	ldr	r2, [pc, #8]	; (800f950 <etharp_request+0xc>)
 800f948:	f7ff ff68 	bl	800f81c <etharp_request_dst>
}
 800f94c:	bd08      	pop	{r3, pc}
 800f94e:	bf00      	nop
 800f950:	08018d20 	.word	0x08018d20

0800f954 <etharp_tmr>:
{
 800f954:	b510      	push	{r4, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f956:	2400      	movs	r4, #0
 800f958:	e005      	b.n	800f966 <etharp_tmr+0x12>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f95a:	2b04      	cmp	r3, #4
 800f95c:	d91b      	bls.n	800f996 <etharp_tmr+0x42>
        etharp_free_entry(i);
 800f95e:	4620      	mov	r0, r4
 800f960:	f7ff fd86 	bl	800f470 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f964:	3401      	adds	r4, #1
 800f966:	2c09      	cmp	r4, #9
 800f968:	dc35      	bgt.n	800f9d6 <etharp_tmr+0x82>
    u8_t state = arp_table[i].state;
 800f96a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f96e:	00da      	lsls	r2, r3, #3
 800f970:	4b19      	ldr	r3, [pc, #100]	; (800f9d8 <etharp_tmr+0x84>)
 800f972:	4413      	add	r3, r2
 800f974:	7d1a      	ldrb	r2, [r3, #20]
    if (state != ETHARP_STATE_EMPTY
 800f976:	2a00      	cmp	r2, #0
 800f978:	d0f4      	beq.n	800f964 <etharp_tmr+0x10>
      arp_table[i].ctime++;
 800f97a:	0063      	lsls	r3, r4, #1
 800f97c:	4423      	add	r3, r4
 800f97e:	00d8      	lsls	r0, r3, #3
 800f980:	4915      	ldr	r1, [pc, #84]	; (800f9d8 <etharp_tmr+0x84>)
 800f982:	4401      	add	r1, r0
 800f984:	8a4b      	ldrh	r3, [r1, #18]
 800f986:	3301      	adds	r3, #1
 800f988:	b29b      	uxth	r3, r3
 800f98a:	824b      	strh	r3, [r1, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f98c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f990:	d2e5      	bcs.n	800f95e <etharp_tmr+0xa>
 800f992:	2a01      	cmp	r2, #1
 800f994:	d0e1      	beq.n	800f95a <etharp_tmr+0x6>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f996:	2a03      	cmp	r2, #3
 800f998:	d00d      	beq.n	800f9b6 <etharp_tmr+0x62>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f99a:	2a04      	cmp	r2, #4
 800f99c:	d013      	beq.n	800f9c6 <etharp_tmr+0x72>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f99e:	2a01      	cmp	r2, #1
 800f9a0:	d1e0      	bne.n	800f964 <etharp_tmr+0x10>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f9a2:	0062      	lsls	r2, r4, #1
 800f9a4:	4422      	add	r2, r4
 800f9a6:	00d1      	lsls	r1, r2, #3
 800f9a8:	4b0b      	ldr	r3, [pc, #44]	; (800f9d8 <etharp_tmr+0x84>)
 800f9aa:	440b      	add	r3, r1
 800f9ac:	1d19      	adds	r1, r3, #4
 800f9ae:	6898      	ldr	r0, [r3, #8]
 800f9b0:	f7ff ffc8 	bl	800f944 <etharp_request>
 800f9b4:	e7d6      	b.n	800f964 <etharp_tmr+0x10>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f9b6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f9ba:	00da      	lsls	r2, r3, #3
 800f9bc:	4b06      	ldr	r3, [pc, #24]	; (800f9d8 <etharp_tmr+0x84>)
 800f9be:	4413      	add	r3, r2
 800f9c0:	2204      	movs	r2, #4
 800f9c2:	751a      	strb	r2, [r3, #20]
 800f9c4:	e7ce      	b.n	800f964 <etharp_tmr+0x10>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f9c6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f9ca:	00da      	lsls	r2, r3, #3
 800f9cc:	4b02      	ldr	r3, [pc, #8]	; (800f9d8 <etharp_tmr+0x84>)
 800f9ce:	4413      	add	r3, r2
 800f9d0:	2202      	movs	r2, #2
 800f9d2:	751a      	strb	r2, [r3, #20]
 800f9d4:	e7c6      	b.n	800f964 <etharp_tmr+0x10>
}
 800f9d6:	bd10      	pop	{r4, pc}
 800f9d8:	20001798 	.word	0x20001798

0800f9dc <etharp_output_to_arp_index>:
{
 800f9dc:	b570      	push	{r4, r5, r6, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	4605      	mov	r5, r0
 800f9e2:	460e      	mov	r6, r1
 800f9e4:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f9e6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800f9ea:	00da      	lsls	r2, r3, #3
 800f9ec:	4b2c      	ldr	r3, [pc, #176]	; (800faa0 <etharp_output_to_arp_index+0xc4>)
 800f9ee:	4413      	add	r3, r2
 800f9f0:	7d1b      	ldrb	r3, [r3, #20]
 800f9f2:	2b01      	cmp	r3, #1
 800f9f4:	d919      	bls.n	800fa2a <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f9f6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f9fa:	00da      	lsls	r2, r3, #3
 800f9fc:	4b28      	ldr	r3, [pc, #160]	; (800faa0 <etharp_output_to_arp_index+0xc4>)
 800f9fe:	4413      	add	r3, r2
 800fa00:	7d1b      	ldrb	r3, [r3, #20]
 800fa02:	2b02      	cmp	r3, #2
 800fa04:	d019      	beq.n	800fa3a <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800fa06:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800fa0a:	00e3      	lsls	r3, r4, #3
 800fa0c:	3308      	adds	r3, #8
 800fa0e:	4a24      	ldr	r2, [pc, #144]	; (800faa0 <etharp_output_to_arp_index+0xc4>)
 800fa10:	4413      	add	r3, r2
 800fa12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fa16:	9200      	str	r2, [sp, #0]
 800fa18:	3304      	adds	r3, #4
 800fa1a:	f105 02d4 	add.w	r2, r5, #212	; 0xd4
 800fa1e:	4631      	mov	r1, r6
 800fa20:	4628      	mov	r0, r5
 800fa22:	f005 f957 	bl	8014cd4 <ethernet_output>
}
 800fa26:	b002      	add	sp, #8
 800fa28:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800fa2a:	4b1e      	ldr	r3, [pc, #120]	; (800faa4 <etharp_output_to_arp_index+0xc8>)
 800fa2c:	f240 22ef 	movw	r2, #751	; 0x2ef
 800fa30:	491d      	ldr	r1, [pc, #116]	; (800faa8 <etharp_output_to_arp_index+0xcc>)
 800fa32:	481e      	ldr	r0, [pc, #120]	; (800faac <etharp_output_to_arp_index+0xd0>)
 800fa34:	f005 fa06 	bl	8014e44 <iprintf>
 800fa38:	e7dd      	b.n	800f9f6 <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800fa3a:	4b19      	ldr	r3, [pc, #100]	; (800faa0 <etharp_output_to_arp_index+0xc4>)
 800fa3c:	4413      	add	r3, r2
 800fa3e:	8a5b      	ldrh	r3, [r3, #18]
 800fa40:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800fa44:	d819      	bhi.n	800fa7a <etharp_output_to_arp_index+0x9e>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800fa46:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800fa4a:	d3dc      	bcc.n	800fa06 <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800fa4c:	4a14      	ldr	r2, [pc, #80]	; (800faa0 <etharp_output_to_arp_index+0xc4>)
 800fa4e:	0063      	lsls	r3, r4, #1
 800fa50:	1918      	adds	r0, r3, r4
 800fa52:	00c1      	lsls	r1, r0, #3
 800fa54:	4608      	mov	r0, r1
 800fa56:	4411      	add	r1, r2
 800fa58:	3008      	adds	r0, #8
 800fa5a:	4402      	add	r2, r0
 800fa5c:	3204      	adds	r2, #4
 800fa5e:	3104      	adds	r1, #4
 800fa60:	4628      	mov	r0, r5
 800fa62:	f7ff fedb 	bl	800f81c <etharp_request_dst>
 800fa66:	2800      	cmp	r0, #0
 800fa68:	d1cd      	bne.n	800fa06 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fa6a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800fa6e:	00da      	lsls	r2, r3, #3
 800fa70:	4b0b      	ldr	r3, [pc, #44]	; (800faa0 <etharp_output_to_arp_index+0xc4>)
 800fa72:	4413      	add	r3, r2
 800fa74:	2203      	movs	r2, #3
 800fa76:	751a      	strb	r2, [r3, #20]
 800fa78:	e7c5      	b.n	800fa06 <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800fa7a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800fa7e:	00d3      	lsls	r3, r2, #3
 800fa80:	4907      	ldr	r1, [pc, #28]	; (800faa0 <etharp_output_to_arp_index+0xc4>)
 800fa82:	4419      	add	r1, r3
 800fa84:	3104      	adds	r1, #4
 800fa86:	4628      	mov	r0, r5
 800fa88:	f7ff ff5c 	bl	800f944 <etharp_request>
 800fa8c:	2800      	cmp	r0, #0
 800fa8e:	d1ba      	bne.n	800fa06 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800fa90:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800fa94:	00da      	lsls	r2, r3, #3
 800fa96:	4b02      	ldr	r3, [pc, #8]	; (800faa0 <etharp_output_to_arp_index+0xc4>)
 800fa98:	4413      	add	r3, r2
 800fa9a:	2203      	movs	r2, #3
 800fa9c:	751a      	strb	r2, [r3, #20]
 800fa9e:	e7b2      	b.n	800fa06 <etharp_output_to_arp_index+0x2a>
 800faa0:	20001798 	.word	0x20001798
 800faa4:	080184d0 	.word	0x080184d0
 800faa8:	08018580 	.word	0x08018580
 800faac:	08015d2c 	.word	0x08015d2c

0800fab0 <etharp_query>:
{
 800fab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fab4:	b083      	sub	sp, #12
 800fab6:	4606      	mov	r6, r0
 800fab8:	460d      	mov	r5, r1
 800faba:	4617      	mov	r7, r2
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800fabc:	f100 08d4 	add.w	r8, r0, #212	; 0xd4
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fac0:	4601      	mov	r1, r0
 800fac2:	6828      	ldr	r0, [r5, #0]
 800fac4:	f000 fc7d 	bl	80103c2 <ip4_addr_isbroadcast_u32>
 800fac8:	2800      	cmp	r0, #0
 800faca:	f040 80af 	bne.w	800fc2c <etharp_query+0x17c>
      ip4_addr_ismulticast(ipaddr) ||
 800face:	682b      	ldr	r3, [r5, #0]
 800fad0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fad4:	2ae0      	cmp	r2, #224	; 0xe0
 800fad6:	f000 80ac 	beq.w	800fc32 <etharp_query+0x182>
      ip4_addr_ismulticast(ipaddr) ||
 800fada:	2d00      	cmp	r5, #0
 800fadc:	f000 80ac 	beq.w	800fc38 <etharp_query+0x188>
      ip4_addr_isany(ipaddr)) {
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	f000 80ac 	beq.w	800fc3e <etharp_query+0x18e>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800fae6:	4632      	mov	r2, r6
 800fae8:	2101      	movs	r1, #1
 800faea:	4628      	mov	r0, r5
 800faec:	f7ff fcda 	bl	800f4a4 <etharp_find_entry>
  if (i_err < 0) {
 800faf0:	1e04      	subs	r4, r0, #0
 800faf2:	db2e      	blt.n	800fb52 <etharp_query+0xa2>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800faf4:	b2a3      	uxth	r3, r4
 800faf6:	2b7e      	cmp	r3, #126	; 0x7e
 800faf8:	d830      	bhi.n	800fb5c <etharp_query+0xac>
  i = (netif_addr_idx_t)i_err;
 800fafa:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800fafc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800fb00:	00da      	lsls	r2, r3, #3
 800fb02:	4b52      	ldr	r3, [pc, #328]	; (800fc4c <etharp_query+0x19c>)
 800fb04:	4413      	add	r3, r2
 800fb06:	7d1b      	ldrb	r3, [r3, #20]
 800fb08:	bb83      	cbnz	r3, 800fb6c <etharp_query+0xbc>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800fb0a:	0062      	lsls	r2, r4, #1
 800fb0c:	4422      	add	r2, r4
 800fb0e:	00d1      	lsls	r1, r2, #3
 800fb10:	4b4e      	ldr	r3, [pc, #312]	; (800fc4c <etharp_query+0x19c>)
 800fb12:	440b      	add	r3, r1
 800fb14:	f04f 0901 	mov.w	r9, #1
 800fb18:	f883 9014 	strb.w	r9, [r3, #20]
    arp_table[i].netif = netif;
 800fb1c:	609e      	str	r6, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800fb1e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800fb22:	00da      	lsls	r2, r3, #3
 800fb24:	4b49      	ldr	r3, [pc, #292]	; (800fc4c <etharp_query+0x19c>)
 800fb26:	4413      	add	r3, r2
 800fb28:	7d1b      	ldrb	r3, [r3, #20]
 800fb2a:	b313      	cbz	r3, 800fb72 <etharp_query+0xc2>
  if (is_new_entry || (q == NULL)) {
 800fb2c:	f1b9 0f00 	cmp.w	r9, #0
 800fb30:	d127      	bne.n	800fb82 <etharp_query+0xd2>
 800fb32:	b337      	cbz	r7, 800fb82 <etharp_query+0xd2>
  err_t result = ERR_MEM;
 800fb34:	f04f 35ff 	mov.w	r5, #4294967295
  LWIP_ASSERT("q != NULL", q != NULL);
 800fb38:	b35f      	cbz	r7, 800fb92 <etharp_query+0xe2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800fb3a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800fb3e:	00da      	lsls	r2, r3, #3
 800fb40:	4b42      	ldr	r3, [pc, #264]	; (800fc4c <etharp_query+0x19c>)
 800fb42:	4413      	add	r3, r2
 800fb44:	7d1b      	ldrb	r3, [r3, #20]
 800fb46:	2b01      	cmp	r3, #1
 800fb48:	d82b      	bhi.n	800fba2 <etharp_query+0xf2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fb4a:	2b01      	cmp	r3, #1
 800fb4c:	d102      	bne.n	800fb54 <etharp_query+0xa4>
    p = q;
 800fb4e:	463d      	mov	r5, r7
 800fb50:	e03d      	b.n	800fbce <etharp_query+0x11e>
    return (err_t)i_err;
 800fb52:	b265      	sxtb	r5, r4
}
 800fb54:	4628      	mov	r0, r5
 800fb56:	b003      	add	sp, #12
 800fb58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800fb5c:	4b3c      	ldr	r3, [pc, #240]	; (800fc50 <etharp_query+0x1a0>)
 800fb5e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800fb62:	493c      	ldr	r1, [pc, #240]	; (800fc54 <etharp_query+0x1a4>)
 800fb64:	483c      	ldr	r0, [pc, #240]	; (800fc58 <etharp_query+0x1a8>)
 800fb66:	f005 f96d 	bl	8014e44 <iprintf>
 800fb6a:	e7c6      	b.n	800fafa <etharp_query+0x4a>
  int is_new_entry = 0;
 800fb6c:	f04f 0900 	mov.w	r9, #0
 800fb70:	e7d5      	b.n	800fb1e <etharp_query+0x6e>
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800fb72:	4b37      	ldr	r3, [pc, #220]	; (800fc50 <etharp_query+0x1a0>)
 800fb74:	f240 32cf 	movw	r2, #975	; 0x3cf
 800fb78:	4938      	ldr	r1, [pc, #224]	; (800fc5c <etharp_query+0x1ac>)
 800fb7a:	4837      	ldr	r0, [pc, #220]	; (800fc58 <etharp_query+0x1a8>)
 800fb7c:	f005 f962 	bl	8014e44 <iprintf>
 800fb80:	e7d4      	b.n	800fb2c <etharp_query+0x7c>
    result = etharp_request(netif, ipaddr);
 800fb82:	4629      	mov	r1, r5
 800fb84:	4630      	mov	r0, r6
 800fb86:	f7ff fedd 	bl	800f944 <etharp_request>
 800fb8a:	4605      	mov	r5, r0
    if (q == NULL) {
 800fb8c:	2f00      	cmp	r7, #0
 800fb8e:	d1d3      	bne.n	800fb38 <etharp_query+0x88>
 800fb90:	e7e0      	b.n	800fb54 <etharp_query+0xa4>
  LWIP_ASSERT("q != NULL", q != NULL);
 800fb92:	4b2f      	ldr	r3, [pc, #188]	; (800fc50 <etharp_query+0x1a0>)
 800fb94:	f240 32e1 	movw	r2, #993	; 0x3e1
 800fb98:	4931      	ldr	r1, [pc, #196]	; (800fc60 <etharp_query+0x1b0>)
 800fb9a:	482f      	ldr	r0, [pc, #188]	; (800fc58 <etharp_query+0x1a8>)
 800fb9c:	f005 f952 	bl	8014e44 <iprintf>
 800fba0:	e7cb      	b.n	800fb3a <etharp_query+0x8a>
    ETHARP_SET_ADDRHINT(netif, i);
 800fba2:	4b30      	ldr	r3, [pc, #192]	; (800fc64 <etharp_query+0x1b4>)
 800fba4:	701c      	strb	r4, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800fba6:	4613      	mov	r3, r2
 800fba8:	3308      	adds	r3, #8
 800fbaa:	4a28      	ldr	r2, [pc, #160]	; (800fc4c <etharp_query+0x19c>)
 800fbac:	4413      	add	r3, r2
 800fbae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fbb2:	9200      	str	r2, [sp, #0]
 800fbb4:	3304      	adds	r3, #4
 800fbb6:	4642      	mov	r2, r8
 800fbb8:	4639      	mov	r1, r7
 800fbba:	4630      	mov	r0, r6
 800fbbc:	f005 f88a 	bl	8014cd4 <ethernet_output>
 800fbc0:	4605      	mov	r5, r0
 800fbc2:	e7c7      	b.n	800fb54 <etharp_query+0xa4>
      if (PBUF_NEEDS_COPY(p)) {
 800fbc4:	7b2b      	ldrb	r3, [r5, #12]
 800fbc6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800fbca:	d129      	bne.n	800fc20 <etharp_query+0x170>
      p = p->next;
 800fbcc:	682d      	ldr	r5, [r5, #0]
    while (p) {
 800fbce:	b175      	cbz	r5, 800fbee <etharp_query+0x13e>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800fbd0:	896a      	ldrh	r2, [r5, #10]
 800fbd2:	892b      	ldrh	r3, [r5, #8]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d1f5      	bne.n	800fbc4 <etharp_query+0x114>
 800fbd8:	682b      	ldr	r3, [r5, #0]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d0f2      	beq.n	800fbc4 <etharp_query+0x114>
 800fbde:	4b1c      	ldr	r3, [pc, #112]	; (800fc50 <etharp_query+0x1a0>)
 800fbe0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800fbe4:	4920      	ldr	r1, [pc, #128]	; (800fc68 <etharp_query+0x1b8>)
 800fbe6:	481c      	ldr	r0, [pc, #112]	; (800fc58 <etharp_query+0x1a8>)
 800fbe8:	f005 f92c 	bl	8014e44 <iprintf>
 800fbec:	e7ea      	b.n	800fbc4 <etharp_query+0x114>
    int copy_needed = 0;
 800fbee:	2300      	movs	r3, #0
    if (copy_needed) {
 800fbf0:	b1c3      	cbz	r3, 800fc24 <etharp_query+0x174>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800fbf2:	463a      	mov	r2, r7
 800fbf4:	f44f 7120 	mov.w	r1, #640	; 0x280
 800fbf8:	200e      	movs	r0, #14
 800fbfa:	f7f9 f8ef 	bl	8008ddc <pbuf_clone>
 800fbfe:	4607      	mov	r7, r0
    if (p != NULL) {
 800fc00:	b307      	cbz	r7, 800fc44 <etharp_query+0x194>
      if (arp_table[i].q != NULL) {
 800fc02:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800fc06:	00d3      	lsls	r3, r2, #3
 800fc08:	4a10      	ldr	r2, [pc, #64]	; (800fc4c <etharp_query+0x19c>)
 800fc0a:	58d0      	ldr	r0, [r2, r3]
 800fc0c:	b108      	cbz	r0, 800fc12 <etharp_query+0x162>
        pbuf_free(arp_table[i].q);
 800fc0e:	f7f8 fda1 	bl	8008754 <pbuf_free>
      arp_table[i].q = p;
 800fc12:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800fc16:	00e3      	lsls	r3, r4, #3
 800fc18:	4a0c      	ldr	r2, [pc, #48]	; (800fc4c <etharp_query+0x19c>)
 800fc1a:	50d7      	str	r7, [r2, r3]
      result = ERR_OK;
 800fc1c:	2500      	movs	r5, #0
 800fc1e:	e799      	b.n	800fb54 <etharp_query+0xa4>
        copy_needed = 1;
 800fc20:	2301      	movs	r3, #1
 800fc22:	e7e5      	b.n	800fbf0 <etharp_query+0x140>
      pbuf_ref(p);
 800fc24:	4638      	mov	r0, r7
 800fc26:	f7f8 ff03 	bl	8008a30 <pbuf_ref>
 800fc2a:	e7e9      	b.n	800fc00 <etharp_query+0x150>
    return ERR_ARG;
 800fc2c:	f06f 050f 	mvn.w	r5, #15
 800fc30:	e790      	b.n	800fb54 <etharp_query+0xa4>
 800fc32:	f06f 050f 	mvn.w	r5, #15
 800fc36:	e78d      	b.n	800fb54 <etharp_query+0xa4>
 800fc38:	f06f 050f 	mvn.w	r5, #15
 800fc3c:	e78a      	b.n	800fb54 <etharp_query+0xa4>
 800fc3e:	f06f 050f 	mvn.w	r5, #15
 800fc42:	e787      	b.n	800fb54 <etharp_query+0xa4>
      result = ERR_MEM;
 800fc44:	f04f 35ff 	mov.w	r5, #4294967295
 800fc48:	e784      	b.n	800fb54 <etharp_query+0xa4>
 800fc4a:	bf00      	nop
 800fc4c:	20001798 	.word	0x20001798
 800fc50:	080184d0 	.word	0x080184d0
 800fc54:	080185b0 	.word	0x080185b0
 800fc58:	08015d2c 	.word	0x08015d2c
 800fc5c:	080185c0 	.word	0x080185c0
 800fc60:	080185e8 	.word	0x080185e8
 800fc64:	20001888 	.word	0x20001888
 800fc68:	080185f4 	.word	0x080185f4

0800fc6c <etharp_output>:
{
 800fc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc6e:	b085      	sub	sp, #20
 800fc70:	460e      	mov	r6, r1
 800fc72:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fc74:	4604      	mov	r4, r0
 800fc76:	2800      	cmp	r0, #0
 800fc78:	d030      	beq.n	800fcdc <etharp_output+0x70>
  LWIP_ASSERT("q != NULL", q != NULL);
 800fc7a:	2e00      	cmp	r6, #0
 800fc7c:	d036      	beq.n	800fcec <etharp_output+0x80>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800fc7e:	2d00      	cmp	r5, #0
 800fc80:	d03c      	beq.n	800fcfc <etharp_output+0x90>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800fc82:	4621      	mov	r1, r4
 800fc84:	6828      	ldr	r0, [r5, #0]
 800fc86:	f000 fb9c 	bl	80103c2 <ip4_addr_isbroadcast_u32>
 800fc8a:	2800      	cmp	r0, #0
 800fc8c:	f040 808a 	bne.w	800fda4 <etharp_output+0x138>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800fc90:	682b      	ldr	r3, [r5, #0]
 800fc92:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800fc96:	2ae0      	cmp	r2, #224	; 0xe0
 800fc98:	d038      	beq.n	800fd0c <etharp_output+0xa0>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fc9a:	6862      	ldr	r2, [r4, #4]
 800fc9c:	69e1      	ldr	r1, [r4, #28]
 800fc9e:	405a      	eors	r2, r3
 800fca0:	420a      	tst	r2, r1
 800fca2:	d00a      	beq.n	800fcba <etharp_output+0x4e>
        !ip4_addr_islinklocal(ipaddr)) {
 800fca4:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fca6:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d005      	beq.n	800fcba <etharp_output+0x4e>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800fcae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	f000 8083 	beq.w	800fdbc <etharp_output+0x150>
            dst_addr = netif_ip4_gw(netif);
 800fcb6:	f104 0534 	add.w	r5, r4, #52	; 0x34
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fcba:	4b42      	ldr	r3, [pc, #264]	; (800fdc4 <etharp_output+0x158>)
 800fcbc:	781a      	ldrb	r2, [r3, #0]
 800fcbe:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800fcc2:	00d9      	lsls	r1, r3, #3
 800fcc4:	4b40      	ldr	r3, [pc, #256]	; (800fdc8 <etharp_output+0x15c>)
 800fcc6:	440b      	add	r3, r1
 800fcc8:	7d1b      	ldrb	r3, [r3, #20]
 800fcca:	2b01      	cmp	r3, #1
 800fccc:	d962      	bls.n	800fd94 <etharp_output+0x128>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fcce:	4b3e      	ldr	r3, [pc, #248]	; (800fdc8 <etharp_output+0x15c>)
 800fcd0:	440b      	add	r3, r1
 800fcd2:	689b      	ldr	r3, [r3, #8]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fcd4:	42a3      	cmp	r3, r4
 800fcd6:	d02f      	beq.n	800fd38 <etharp_output+0xcc>
 800fcd8:	2200      	movs	r2, #0
 800fcda:	e03c      	b.n	800fd56 <etharp_output+0xea>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fcdc:	4b3b      	ldr	r3, [pc, #236]	; (800fdcc <etharp_output+0x160>)
 800fcde:	f240 321e 	movw	r2, #798	; 0x31e
 800fce2:	493b      	ldr	r1, [pc, #236]	; (800fdd0 <etharp_output+0x164>)
 800fce4:	483b      	ldr	r0, [pc, #236]	; (800fdd4 <etharp_output+0x168>)
 800fce6:	f005 f8ad 	bl	8014e44 <iprintf>
 800fcea:	e7c6      	b.n	800fc7a <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 800fcec:	4b37      	ldr	r3, [pc, #220]	; (800fdcc <etharp_output+0x160>)
 800fcee:	f240 321f 	movw	r2, #799	; 0x31f
 800fcf2:	4939      	ldr	r1, [pc, #228]	; (800fdd8 <etharp_output+0x16c>)
 800fcf4:	4837      	ldr	r0, [pc, #220]	; (800fdd4 <etharp_output+0x168>)
 800fcf6:	f005 f8a5 	bl	8014e44 <iprintf>
 800fcfa:	e7c0      	b.n	800fc7e <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800fcfc:	4b33      	ldr	r3, [pc, #204]	; (800fdcc <etharp_output+0x160>)
 800fcfe:	f44f 7248 	mov.w	r2, #800	; 0x320
 800fd02:	4936      	ldr	r1, [pc, #216]	; (800fddc <etharp_output+0x170>)
 800fd04:	4833      	ldr	r0, [pc, #204]	; (800fdd4 <etharp_output+0x168>)
 800fd06:	f005 f89d 	bl	8014e44 <iprintf>
 800fd0a:	e7ba      	b.n	800fc82 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800fd12:	2300      	movs	r3, #0
 800fd14:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800fd18:	235e      	movs	r3, #94	; 0x5e
 800fd1a:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800fd1e:	786b      	ldrb	r3, [r5, #1]
 800fd20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd24:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800fd28:	78ab      	ldrb	r3, [r5, #2]
 800fd2a:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800fd2e:	78eb      	ldrb	r3, [r5, #3]
 800fd30:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800fd34:	ab02      	add	r3, sp, #8
 800fd36:	e036      	b.n	800fda6 <etharp_output+0x13a>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800fd38:	6828      	ldr	r0, [r5, #0]
 800fd3a:	4b23      	ldr	r3, [pc, #140]	; (800fdc8 <etharp_output+0x15c>)
 800fd3c:	440b      	add	r3, r1
 800fd3e:	685b      	ldr	r3, [r3, #4]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fd40:	4298      	cmp	r0, r3
 800fd42:	d001      	beq.n	800fd48 <etharp_output+0xdc>
 800fd44:	2200      	movs	r2, #0
 800fd46:	e006      	b.n	800fd56 <etharp_output+0xea>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800fd48:	4631      	mov	r1, r6
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	f7ff fe46 	bl	800f9dc <etharp_output_to_arp_index>
 800fd50:	e032      	b.n	800fdb8 <etharp_output+0x14c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fd52:	3201      	adds	r2, #1
 800fd54:	b2d2      	uxtb	r2, r2
 800fd56:	2a09      	cmp	r2, #9
 800fd58:	d81e      	bhi.n	800fd98 <etharp_output+0x12c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fd5a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800fd5e:	00d9      	lsls	r1, r3, #3
 800fd60:	4b19      	ldr	r3, [pc, #100]	; (800fdc8 <etharp_output+0x15c>)
 800fd62:	440b      	add	r3, r1
 800fd64:	7d1b      	ldrb	r3, [r3, #20]
 800fd66:	2b01      	cmp	r3, #1
 800fd68:	d9f3      	bls.n	800fd52 <etharp_output+0xe6>
          (arp_table[i].netif == netif) &&
 800fd6a:	4b17      	ldr	r3, [pc, #92]	; (800fdc8 <etharp_output+0x15c>)
 800fd6c:	440b      	add	r3, r1
 800fd6e:	689b      	ldr	r3, [r3, #8]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fd70:	42a3      	cmp	r3, r4
 800fd72:	d1ee      	bne.n	800fd52 <etharp_output+0xe6>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800fd74:	6829      	ldr	r1, [r5, #0]
 800fd76:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 800fd7a:	00c7      	lsls	r7, r0, #3
 800fd7c:	4b12      	ldr	r3, [pc, #72]	; (800fdc8 <etharp_output+0x15c>)
 800fd7e:	443b      	add	r3, r7
 800fd80:	685b      	ldr	r3, [r3, #4]
          (arp_table[i].netif == netif) &&
 800fd82:	4299      	cmp	r1, r3
 800fd84:	d1e5      	bne.n	800fd52 <etharp_output+0xe6>
        ETHARP_SET_ADDRHINT(netif, i);
 800fd86:	4b0f      	ldr	r3, [pc, #60]	; (800fdc4 <etharp_output+0x158>)
 800fd88:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800fd8a:	4631      	mov	r1, r6
 800fd8c:	4620      	mov	r0, r4
 800fd8e:	f7ff fe25 	bl	800f9dc <etharp_output_to_arp_index>
 800fd92:	e011      	b.n	800fdb8 <etharp_output+0x14c>
 800fd94:	2200      	movs	r2, #0
 800fd96:	e7de      	b.n	800fd56 <etharp_output+0xea>
    return etharp_query(netif, dst_addr, q);
 800fd98:	4632      	mov	r2, r6
 800fd9a:	4629      	mov	r1, r5
 800fd9c:	4620      	mov	r0, r4
 800fd9e:	f7ff fe87 	bl	800fab0 <etharp_query>
 800fda2:	e009      	b.n	800fdb8 <etharp_output+0x14c>
    dest = (const struct eth_addr *)&ethbroadcast;
 800fda4:	4b0e      	ldr	r3, [pc, #56]	; (800fde0 <etharp_output+0x174>)
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800fda6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fdaa:	9200      	str	r2, [sp, #0]
 800fdac:	f104 02d4 	add.w	r2, r4, #212	; 0xd4
 800fdb0:	4631      	mov	r1, r6
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	f004 ff8e 	bl	8014cd4 <ethernet_output>
}
 800fdb8:	b005      	add	sp, #20
 800fdba:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ERR_RTE;
 800fdbc:	f06f 0003 	mvn.w	r0, #3
 800fdc0:	e7fa      	b.n	800fdb8 <etharp_output+0x14c>
 800fdc2:	bf00      	nop
 800fdc4:	20001888 	.word	0x20001888
 800fdc8:	20001798 	.word	0x20001798
 800fdcc:	080184d0 	.word	0x080184d0
 800fdd0:	08015d1c 	.word	0x08015d1c
 800fdd4:	08015d2c 	.word	0x08015d2c
 800fdd8:	080185e8 	.word	0x080185e8
 800fddc:	08018560 	.word	0x08018560
 800fde0:	08018d20 	.word	0x08018d20

0800fde4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800fde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fde8:	b086      	sub	sp, #24
 800fdea:	4606      	mov	r6, r0
 800fdec:	4688      	mov	r8, r1
 800fdee:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fdf0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fdf4:	2124      	movs	r1, #36	; 0x24
 800fdf6:	2036      	movs	r0, #54	; 0x36
 800fdf8:	f7f8 fd0e 	bl	8008818 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	d037      	beq.n	800fe70 <icmp_send_response+0x8c>
 800fe00:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fe02:	8943      	ldrh	r3, [r0, #10]
 800fe04:	2b23      	cmp	r3, #35	; 0x23
 800fe06:	d936      	bls.n	800fe76 <icmp_send_response+0x92>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fe08:	f8d6 c004 	ldr.w	ip, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fe0c:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800fe0e:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 800fe12:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800fe14:	2300      	movs	r3, #0
 800fe16:	7123      	strb	r3, [r4, #4]
 800fe18:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800fe1a:	71a3      	strb	r3, [r4, #6]
 800fe1c:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fe1e:	686f      	ldr	r7, [r5, #4]
 800fe20:	6873      	ldr	r3, [r6, #4]
 800fe22:	681e      	ldr	r6, [r3, #0]
 800fe24:	6858      	ldr	r0, [r3, #4]
 800fe26:	6899      	ldr	r1, [r3, #8]
 800fe28:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800fe2c:	60be      	str	r6, [r7, #8]
 800fe2e:	60f8      	str	r0, [r7, #12]
 800fe30:	6139      	str	r1, [r7, #16]
 800fe32:	f8c7 e014 	str.w	lr, [r7, #20]
 800fe36:	691e      	ldr	r6, [r3, #16]
 800fe38:	6958      	ldr	r0, [r3, #20]
 800fe3a:	6999      	ldr	r1, [r3, #24]
 800fe3c:	61be      	str	r6, [r7, #24]
 800fe3e:	61f8      	str	r0, [r7, #28]
 800fe40:	6239      	str	r1, [r7, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800fe42:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800fe46:	a806      	add	r0, sp, #24
 800fe48:	f840 3d04 	str.w	r3, [r0, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fe4c:	f000 f8ee 	bl	801002c <ip4_route>
#endif
  if (netif != NULL) {
 800fe50:	b158      	cbz	r0, 800fe6a <icmp_send_response+0x86>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800fe52:	2100      	movs	r1, #0
 800fe54:	70a1      	strb	r1, [r4, #2]
 800fe56:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fe58:	9002      	str	r0, [sp, #8]
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	9301      	str	r3, [sp, #4]
 800fe5e:	9100      	str	r1, [sp, #0]
 800fe60:	23ff      	movs	r3, #255	; 0xff
 800fe62:	aa05      	add	r2, sp, #20
 800fe64:	4628      	mov	r0, r5
 800fe66:	f000 fa97 	bl	8010398 <ip4_output_if>
  }
  pbuf_free(q);
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	f7f8 fc72 	bl	8008754 <pbuf_free>
}
 800fe70:	b006      	add	sp, #24
 800fe72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fe76:	4b04      	ldr	r3, [pc, #16]	; (800fe88 <icmp_send_response+0xa4>)
 800fe78:	f240 1269 	movw	r2, #361	; 0x169
 800fe7c:	4903      	ldr	r1, [pc, #12]	; (800fe8c <icmp_send_response+0xa8>)
 800fe7e:	4804      	ldr	r0, [pc, #16]	; (800fe90 <icmp_send_response+0xac>)
 800fe80:	f004 ffe0 	bl	8014e44 <iprintf>
 800fe84:	e7c0      	b.n	800fe08 <icmp_send_response+0x24>
 800fe86:	bf00      	nop
 800fe88:	08018718 	.word	0x08018718
 800fe8c:	08018750 	.word	0x08018750
 800fe90:	08015d2c 	.word	0x08015d2c

0800fe94 <icmp_input>:
{
 800fe94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe98:	b085      	sub	sp, #20
 800fe9a:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800fe9c:	4b4a      	ldr	r3, [pc, #296]	; (800ffc8 <icmp_input+0x134>)
 800fe9e:	689f      	ldr	r7, [r3, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800fea0:	783c      	ldrb	r4, [r7, #0]
 800fea2:	f004 040f 	and.w	r4, r4, #15
 800fea6:	00a4      	lsls	r4, r4, #2
 800fea8:	b2a6      	uxth	r6, r4
  if (hlen < IP_HLEN) {
 800feaa:	2e13      	cmp	r6, #19
 800feac:	d915      	bls.n	800feda <icmp_input+0x46>
 800feae:	4688      	mov	r8, r1
  if (p->len < sizeof(u16_t) * 2) {
 800feb0:	8943      	ldrh	r3, [r0, #10]
 800feb2:	2b03      	cmp	r3, #3
 800feb4:	d911      	bls.n	800feda <icmp_input+0x46>
  type = *((u8_t *)p->payload);
 800feb6:	6843      	ldr	r3, [r0, #4]
 800feb8:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 800feba:	2b08      	cmp	r3, #8
 800febc:	d161      	bne.n	800ff82 <icmp_input+0xee>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800febe:	4b42      	ldr	r3, [pc, #264]	; (800ffc8 <icmp_input+0x134>)
 800fec0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800fec2:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800fec6:	2be0      	cmp	r3, #224	; 0xe0
 800fec8:	d01a      	beq.n	800ff00 <icmp_input+0x6c>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800feca:	4b3f      	ldr	r3, [pc, #252]	; (800ffc8 <icmp_input+0x134>)
 800fecc:	6819      	ldr	r1, [r3, #0]
 800fece:	f000 fa78 	bl	80103c2 <ip4_addr_isbroadcast_u32>
 800fed2:	b9a8      	cbnz	r0, 800ff00 <icmp_input+0x6c>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fed4:	892b      	ldrh	r3, [r5, #8]
 800fed6:	2b07      	cmp	r3, #7
 800fed8:	d805      	bhi.n	800fee6 <icmp_input+0x52>
  pbuf_free(p);
 800feda:	4628      	mov	r0, r5
 800fedc:	f7f8 fc3a 	bl	8008754 <pbuf_free>
}
 800fee0:	b005      	add	sp, #20
 800fee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fee6:	f104 090e 	add.w	r9, r4, #14
 800feea:	4649      	mov	r1, r9
 800feec:	4628      	mov	r0, r5
 800feee:	f7f8 fbe0 	bl	80086b2 <pbuf_add_header>
 800fef2:	2800      	cmp	r0, #0
 800fef4:	d03a      	beq.n	800ff6c <icmp_input+0xd8>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fef6:	892b      	ldrh	r3, [r5, #8]
 800fef8:	1999      	adds	r1, r3, r6
 800fefa:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 800fefc:	428b      	cmp	r3, r1
 800fefe:	d903      	bls.n	800ff08 <icmp_input+0x74>
  pbuf_free(p);
 800ff00:	4628      	mov	r0, r5
 800ff02:	f7f8 fc27 	bl	8008754 <pbuf_free>
  return;
 800ff06:	e7eb      	b.n	800fee0 <icmp_input+0x4c>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ff08:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ff0c:	200e      	movs	r0, #14
 800ff0e:	f7f8 fc83 	bl	8008818 <pbuf_alloc>
        if (r == NULL) {
 800ff12:	4606      	mov	r6, r0
 800ff14:	2800      	cmp	r0, #0
 800ff16:	d0f3      	beq.n	800ff00 <icmp_input+0x6c>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ff18:	8942      	ldrh	r2, [r0, #10]
 800ff1a:	f104 0308 	add.w	r3, r4, #8
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d202      	bcs.n	800ff28 <icmp_input+0x94>
          pbuf_free(r);
 800ff22:	f7f8 fc17 	bl	8008754 <pbuf_free>
          goto icmperr;
 800ff26:	e7eb      	b.n	800ff00 <icmp_input+0x6c>
        MEMCPY(r->payload, iphdr_in, hlen);
 800ff28:	4622      	mov	r2, r4
 800ff2a:	4639      	mov	r1, r7
 800ff2c:	6840      	ldr	r0, [r0, #4]
 800ff2e:	f004 ff5c 	bl	8014dea <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800ff32:	4621      	mov	r1, r4
 800ff34:	4630      	mov	r0, r6
 800ff36:	f7f8 fbc7 	bl	80086c8 <pbuf_remove_header>
 800ff3a:	b148      	cbz	r0, 800ff50 <icmp_input+0xbc>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ff3c:	4b23      	ldr	r3, [pc, #140]	; (800ffcc <icmp_input+0x138>)
 800ff3e:	22b6      	movs	r2, #182	; 0xb6
 800ff40:	4923      	ldr	r1, [pc, #140]	; (800ffd0 <icmp_input+0x13c>)
 800ff42:	4824      	ldr	r0, [pc, #144]	; (800ffd4 <icmp_input+0x140>)
 800ff44:	f004 ff7e 	bl	8014e44 <iprintf>
          pbuf_free(r);
 800ff48:	4630      	mov	r0, r6
 800ff4a:	f7f8 fc03 	bl	8008754 <pbuf_free>
          goto icmperr;
 800ff4e:	e7d7      	b.n	800ff00 <icmp_input+0x6c>
        if (pbuf_copy(r, p) != ERR_OK) {
 800ff50:	4629      	mov	r1, r5
 800ff52:	4630      	mov	r0, r6
 800ff54:	f7f8 fdc6 	bl	8008ae4 <pbuf_copy>
 800ff58:	b118      	cbz	r0, 800ff62 <icmp_input+0xce>
          pbuf_free(r);
 800ff5a:	4630      	mov	r0, r6
 800ff5c:	f7f8 fbfa 	bl	8008754 <pbuf_free>
          goto icmperr;
 800ff60:	e7ce      	b.n	800ff00 <icmp_input+0x6c>
        pbuf_free(p);
 800ff62:	4628      	mov	r0, r5
 800ff64:	f7f8 fbf6 	bl	8008754 <pbuf_free>
        p = r;
 800ff68:	4635      	mov	r5, r6
 800ff6a:	e004      	b.n	800ff76 <icmp_input+0xe2>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ff6c:	4649      	mov	r1, r9
 800ff6e:	4628      	mov	r0, r5
 800ff70:	f7f8 fbaa 	bl	80086c8 <pbuf_remove_header>
 800ff74:	b948      	cbnz	r0, 800ff8a <icmp_input+0xf6>
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ff76:	686e      	ldr	r6, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800ff78:	4621      	mov	r1, r4
 800ff7a:	4628      	mov	r0, r5
 800ff7c:	f7f8 fb99 	bl	80086b2 <pbuf_add_header>
 800ff80:	b150      	cbz	r0, 800ff98 <icmp_input+0x104>
  pbuf_free(p);
 800ff82:	4628      	mov	r0, r5
 800ff84:	f7f8 fbe6 	bl	8008754 <pbuf_free>
  return;
 800ff88:	e7aa      	b.n	800fee0 <icmp_input+0x4c>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ff8a:	4b10      	ldr	r3, [pc, #64]	; (800ffcc <icmp_input+0x138>)
 800ff8c:	22c7      	movs	r2, #199	; 0xc7
 800ff8e:	4912      	ldr	r1, [pc, #72]	; (800ffd8 <icmp_input+0x144>)
 800ff90:	4810      	ldr	r0, [pc, #64]	; (800ffd4 <icmp_input+0x140>)
 800ff92:	f004 ff57 	bl	8014e44 <iprintf>
          goto icmperr;
 800ff96:	e7b3      	b.n	800ff00 <icmp_input+0x6c>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800ff98:	6868      	ldr	r0, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 800ff9a:	490b      	ldr	r1, [pc, #44]	; (800ffc8 <icmp_input+0x134>)
 800ff9c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800ff9e:	60c3      	str	r3, [r0, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800ffa0:	694b      	ldr	r3, [r1, #20]
 800ffa2:	6103      	str	r3, [r0, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	7032      	strb	r2, [r6, #0]
        iecho->chksum = 0;
 800ffa8:	70b2      	strb	r2, [r6, #2]
 800ffaa:	70f2      	strb	r2, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800ffac:	23ff      	movs	r3, #255	; 0xff
 800ffae:	7203      	strb	r3, [r0, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ffb0:	7282      	strb	r2, [r0, #10]
 800ffb2:	72c2      	strb	r2, [r0, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ffb4:	f8cd 8008 	str.w	r8, [sp, #8]
 800ffb8:	2001      	movs	r0, #1
 800ffba:	9001      	str	r0, [sp, #4]
 800ffbc:	9200      	str	r2, [sp, #0]
 800ffbe:	312c      	adds	r1, #44	; 0x2c
 800ffc0:	4628      	mov	r0, r5
 800ffc2:	f000 f9e9 	bl	8010398 <ip4_output_if>
 800ffc6:	e7dc      	b.n	800ff82 <icmp_input+0xee>
 800ffc8:	20004bac 	.word	0x20004bac
 800ffcc:	08018718 	.word	0x08018718
 800ffd0:	080186ac 	.word	0x080186ac
 800ffd4:	08015d2c 	.word	0x08015d2c
 800ffd8:	080186e4 	.word	0x080186e4

0800ffdc <icmp_dest_unreach>:
{
 800ffdc:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_DUR, t);
 800ffde:	460a      	mov	r2, r1
 800ffe0:	2103      	movs	r1, #3
 800ffe2:	f7ff feff 	bl	800fde4 <icmp_send_response>
}
 800ffe6:	bd08      	pop	{r3, pc}

0800ffe8 <icmp_time_exceeded>:
{
 800ffe8:	b508      	push	{r3, lr}
  icmp_send_response(p, ICMP_TE, t);
 800ffea:	460a      	mov	r2, r1
 800ffec:	210b      	movs	r1, #11
 800ffee:	f7ff fef9 	bl	800fde4 <icmp_send_response>
}
 800fff2:	bd08      	pop	{r3, pc}

0800fff4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800fff4:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fff6:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
 800fffa:	f013 0f01 	tst.w	r3, #1
 800fffe:	d00c      	beq.n	801001a <ip4_input_accept+0x26>
 8010000:	6843      	ldr	r3, [r0, #4]
 8010002:	b163      	cbz	r3, 801001e <ip4_input_accept+0x2a>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010004:	4a08      	ldr	r2, [pc, #32]	; (8010028 <ip4_input_accept+0x34>)
 8010006:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010008:	4293      	cmp	r3, r2
 801000a:	d00a      	beq.n	8010022 <ip4_input_accept+0x2e>
 801000c:	4601      	mov	r1, r0
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801000e:	4610      	mov	r0, r2
 8010010:	f000 f9d7 	bl	80103c2 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010014:	b110      	cbz	r0, 801001c <ip4_input_accept+0x28>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010016:	2001      	movs	r0, #1
 8010018:	e000      	b.n	801001c <ip4_input_accept+0x28>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801001a:	2000      	movs	r0, #0
}
 801001c:	bd08      	pop	{r3, pc}
  return 0;
 801001e:	2000      	movs	r0, #0
 8010020:	e7fc      	b.n	801001c <ip4_input_accept+0x28>
      return 1;
 8010022:	2001      	movs	r0, #1
 8010024:	e7fa      	b.n	801001c <ip4_input_accept+0x28>
 8010026:	bf00      	nop
 8010028:	20004bac 	.word	0x20004bac

0801002c <ip4_route>:
{
 801002c:	b410      	push	{r4}
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 801002e:	6804      	ldr	r4, [r0, #0]
 8010030:	f004 03f0 	and.w	r3, r4, #240	; 0xf0
 8010034:	2be0      	cmp	r3, #224	; 0xe0
 8010036:	d002      	beq.n	801003e <ip4_route+0x12>
  NETIF_FOREACH(netif) {
 8010038:	4b1c      	ldr	r3, [pc, #112]	; (80100ac <ip4_route+0x80>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	e004      	b.n	8010048 <ip4_route+0x1c>
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 801003e:	4b1c      	ldr	r3, [pc, #112]	; (80100b0 <ip4_route+0x84>)
 8010040:	6818      	ldr	r0, [r3, #0]
 8010042:	bb38      	cbnz	r0, 8010094 <ip4_route+0x68>
 8010044:	e7f8      	b.n	8010038 <ip4_route+0xc>
  NETIF_FOREACH(netif) {
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	b1b3      	cbz	r3, 8010078 <ip4_route+0x4c>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801004a:	f893 20db 	ldrb.w	r2, [r3, #219]	; 0xdb
 801004e:	f012 0f01 	tst.w	r2, #1
 8010052:	d0f8      	beq.n	8010046 <ip4_route+0x1a>
 8010054:	f012 0f04 	tst.w	r2, #4
 8010058:	d0f5      	beq.n	8010046 <ip4_route+0x1a>
 801005a:	6859      	ldr	r1, [r3, #4]
 801005c:	2900      	cmp	r1, #0
 801005e:	d0f2      	beq.n	8010046 <ip4_route+0x1a>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010060:	69d8      	ldr	r0, [r3, #28]
 8010062:	4061      	eors	r1, r4
 8010064:	4201      	tst	r1, r0
 8010066:	d01a      	beq.n	801009e <ip4_route+0x72>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010068:	f012 0f02 	tst.w	r2, #2
 801006c:	d1eb      	bne.n	8010046 <ip4_route+0x1a>
 801006e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010070:	4294      	cmp	r4, r2
 8010072:	d1e8      	bne.n	8010046 <ip4_route+0x1a>
        return netif;
 8010074:	4618      	mov	r0, r3
 8010076:	e00d      	b.n	8010094 <ip4_route+0x68>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010078:	4a0e      	ldr	r2, [pc, #56]	; (80100b4 <ip4_route+0x88>)
 801007a:	6810      	ldr	r0, [r2, #0]
 801007c:	b150      	cbz	r0, 8010094 <ip4_route+0x68>
 801007e:	f890 20db 	ldrb.w	r2, [r0, #219]	; 0xdb
 8010082:	f002 0205 	and.w	r2, r2, #5
 8010086:	2a05      	cmp	r2, #5
 8010088:	d10b      	bne.n	80100a2 <ip4_route+0x76>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801008a:	6842      	ldr	r2, [r0, #4]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801008c:	b15a      	cbz	r2, 80100a6 <ip4_route+0x7a>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801008e:	b2e4      	uxtb	r4, r4
 8010090:	2c7f      	cmp	r4, #127	; 0x7f
 8010092:	d002      	beq.n	801009a <ip4_route+0x6e>
}
 8010094:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010098:	4770      	bx	lr
    return NULL;
 801009a:	4618      	mov	r0, r3
 801009c:	e7fa      	b.n	8010094 <ip4_route+0x68>
        return netif;
 801009e:	4618      	mov	r0, r3
 80100a0:	e7f8      	b.n	8010094 <ip4_route+0x68>
    return NULL;
 80100a2:	4618      	mov	r0, r3
 80100a4:	e7f6      	b.n	8010094 <ip4_route+0x68>
 80100a6:	4618      	mov	r0, r3
 80100a8:	e7f4      	b.n	8010094 <ip4_route+0x68>
 80100aa:	bf00      	nop
 80100ac:	20008600 	.word	0x20008600
 80100b0:	2000188c 	.word	0x2000188c
 80100b4:	20008604 	.word	0x20008604

080100b8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80100b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100bc:	4604      	mov	r4, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80100be:	6846      	ldr	r6, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 80100c0:	7833      	ldrb	r3, [r6, #0]
 80100c2:	091a      	lsrs	r2, r3, #4
 80100c4:	2a04      	cmp	r2, #4
 80100c6:	d004      	beq.n	80100d2 <ip4_input+0x1a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80100c8:	f7f8 fb44 	bl	8008754 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 80100cc:	2000      	movs	r0, #0
 80100ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100d2:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80100d4:	f003 030f 	and.w	r3, r3, #15
 80100d8:	009d      	lsls	r5, r3, #2
 80100da:	fa1f f985 	uxth.w	r9, r5
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80100de:	8870      	ldrh	r0, [r6, #2]
 80100e0:	f7f7 f876 	bl	80071d0 <lwip_htons>
 80100e4:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 80100e6:	8923      	ldrh	r3, [r4, #8]
 80100e8:	4283      	cmp	r3, r0
 80100ea:	d829      	bhi.n	8010140 <ip4_input+0x88>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80100ec:	8963      	ldrh	r3, [r4, #10]
 80100ee:	454b      	cmp	r3, r9
 80100f0:	d32b      	bcc.n	801014a <ip4_input+0x92>
 80100f2:	8923      	ldrh	r3, [r4, #8]
 80100f4:	4543      	cmp	r3, r8
 80100f6:	d328      	bcc.n	801014a <ip4_input+0x92>
 80100f8:	f1b9 0f13 	cmp.w	r9, #19
 80100fc:	d925      	bls.n	801014a <ip4_input+0x92>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80100fe:	6931      	ldr	r1, [r6, #16]
 8010100:	4b61      	ldr	r3, [pc, #388]	; (8010288 <ip4_input+0x1d0>)
 8010102:	62d9      	str	r1, [r3, #44]	; 0x2c
 8010104:	2200      	movs	r2, #0
 8010106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801010a:	639a      	str	r2, [r3, #56]	; 0x38
 801010c:	635a      	str	r2, [r3, #52]	; 0x34
 801010e:	631a      	str	r2, [r3, #48]	; 0x30
 8010110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010114:	68f0      	ldr	r0, [r6, #12]
 8010116:	6158      	str	r0, [r3, #20]
 8010118:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 801011c:	621a      	str	r2, [r3, #32]
 801011e:	61da      	str	r2, [r3, #28]
 8010120:	619a      	str	r2, [r3, #24]
 8010122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010126:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 801012a:	29e0      	cmp	r1, #224	; 0xe0
 801012c:	d111      	bne.n	8010152 <ip4_input+0x9a>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801012e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8010132:	f013 0f01 	tst.w	r3, #1
 8010136:	d02d      	beq.n	8010194 <ip4_input+0xdc>
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	bb23      	cbnz	r3, 8010186 <ip4_input+0xce>
 801013c:	4690      	mov	r8, r2
 801013e:	e02b      	b.n	8010198 <ip4_input+0xe0>
    pbuf_realloc(p, iphdr_len);
 8010140:	4601      	mov	r1, r0
 8010142:	4620      	mov	r0, r4
 8010144:	f7f8 fc16 	bl	8008974 <pbuf_realloc>
 8010148:	e7d0      	b.n	80100ec <ip4_input+0x34>
    pbuf_free(p);
 801014a:	4620      	mov	r0, r4
 801014c:	f7f8 fb02 	bl	8008754 <pbuf_free>
    return ERR_OK;
 8010150:	e7bc      	b.n	80100cc <ip4_input+0x14>
    if (ip4_input_accept(inp)) {
 8010152:	4638      	mov	r0, r7
 8010154:	f7ff ff4e 	bl	800fff4 <ip4_input_accept>
 8010158:	b9b8      	cbnz	r0, 801018a <ip4_input+0xd2>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801015a:	4b4b      	ldr	r3, [pc, #300]	; (8010288 <ip4_input+0x1d0>)
 801015c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010160:	2b7f      	cmp	r3, #127	; 0x7f
 8010162:	d054      	beq.n	801020e <ip4_input+0x156>
        NETIF_FOREACH(netif) {
 8010164:	4b49      	ldr	r3, [pc, #292]	; (801028c <ip4_input+0x1d4>)
 8010166:	f8d3 8000 	ldr.w	r8, [r3]
 801016a:	e001      	b.n	8010170 <ip4_input+0xb8>
 801016c:	f8d8 8000 	ldr.w	r8, [r8]
 8010170:	f1b8 0f00 	cmp.w	r8, #0
 8010174:	d00a      	beq.n	801018c <ip4_input+0xd4>
          if (netif == inp) {
 8010176:	45b8      	cmp	r8, r7
 8010178:	d0f8      	beq.n	801016c <ip4_input+0xb4>
          if (ip4_input_accept(netif)) {
 801017a:	4640      	mov	r0, r8
 801017c:	f7ff ff3a 	bl	800fff4 <ip4_input_accept>
 8010180:	2800      	cmp	r0, #0
 8010182:	d0f3      	beq.n	801016c <ip4_input+0xb4>
 8010184:	e002      	b.n	801018c <ip4_input+0xd4>
      netif = inp;
 8010186:	46b8      	mov	r8, r7
 8010188:	e000      	b.n	801018c <ip4_input+0xd4>
      netif = inp;
 801018a:	46b8      	mov	r8, r7
  if (netif == NULL) {
 801018c:	f1b8 0f00 	cmp.w	r8, #0
 8010190:	d105      	bne.n	801019e <ip4_input+0xe6>
 8010192:	e001      	b.n	8010198 <ip4_input+0xe0>
 8010194:	f04f 0800 	mov.w	r8, #0
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8010198:	7a73      	ldrb	r3, [r6, #9]
 801019a:	2b11      	cmp	r3, #17
 801019c:	d03a      	beq.n	8010214 <ip4_input+0x15c>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801019e:	4b3a      	ldr	r3, [pc, #232]	; (8010288 <ip4_input+0x1d0>)
 80101a0:	6958      	ldr	r0, [r3, #20]
 80101a2:	2800      	cmp	r0, #0
 80101a4:	d13d      	bne.n	8010222 <ip4_input+0x16a>
  if (netif == NULL) {
 80101a6:	f1b8 0f00 	cmp.w	r8, #0
 80101aa:	d048      	beq.n	801023e <ip4_input+0x186>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80101ac:	88f3      	ldrh	r3, [r6, #6]
 80101ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80101b2:	b29b      	uxth	r3, r3
 80101b4:	b133      	cbz	r3, 80101c4 <ip4_input+0x10c>
    p = ip4_reass(p);
 80101b6:	4620      	mov	r0, r4
 80101b8:	f000 fb58 	bl	801086c <ip4_reass>
    if (p == NULL) {
 80101bc:	4604      	mov	r4, r0
 80101be:	2800      	cmp	r0, #0
 80101c0:	d084      	beq.n	80100cc <ip4_input+0x14>
    iphdr = (const struct ip_hdr *)p->payload;
 80101c2:	6846      	ldr	r6, [r0, #4]
  ip_data.current_netif = netif;
 80101c4:	4a30      	ldr	r2, [pc, #192]	; (8010288 <ip4_input+0x1d0>)
 80101c6:	f8c2 8000 	str.w	r8, [r2]
  ip_data.current_input_netif = inp;
 80101ca:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80101cc:	6096      	str	r6, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80101ce:	7833      	ldrb	r3, [r6, #0]
 80101d0:	f003 030f 	and.w	r3, r3, #15
 80101d4:	009b      	lsls	r3, r3, #2
 80101d6:	8213      	strh	r3, [r2, #16]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80101d8:	4629      	mov	r1, r5
 80101da:	4620      	mov	r0, r4
 80101dc:	f7f8 fa74 	bl	80086c8 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 80101e0:	7a73      	ldrb	r3, [r6, #9]
 80101e2:	2b06      	cmp	r3, #6
 80101e4:	d03c      	beq.n	8010260 <ip4_input+0x1a8>
 80101e6:	2b11      	cmp	r3, #17
 80101e8:	d02d      	beq.n	8010246 <ip4_input+0x18e>
 80101ea:	2b01      	cmp	r3, #1
 80101ec:	d03d      	beq.n	801026a <ip4_input+0x1b2>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80101ee:	4641      	mov	r1, r8
 80101f0:	4b25      	ldr	r3, [pc, #148]	; (8010288 <ip4_input+0x1d0>)
 80101f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80101f4:	f000 f8e5 	bl	80103c2 <ip4_addr_isbroadcast_u32>
 80101f8:	b928      	cbnz	r0, 8010206 <ip4_input+0x14e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80101fa:	4b23      	ldr	r3, [pc, #140]	; (8010288 <ip4_input+0x1d0>)
 80101fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010202:	2be0      	cmp	r3, #224	; 0xe0
 8010204:	d136      	bne.n	8010274 <ip4_input+0x1bc>
        pbuf_free(p);
 8010206:	4620      	mov	r0, r4
 8010208:	f7f8 faa4 	bl	8008754 <pbuf_free>
        break;
 801020c:	e01f      	b.n	801024e <ip4_input+0x196>
      netif = NULL;
 801020e:	f04f 0800 	mov.w	r8, #0
 8010212:	e7c1      	b.n	8010198 <ip4_input+0xe0>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8010214:	1973      	adds	r3, r6, r5
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8010216:	885b      	ldrh	r3, [r3, #2]
 8010218:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801021c:	d1bf      	bne.n	801019e <ip4_input+0xe6>
        netif = inp;
 801021e:	46b8      	mov	r8, r7
 8010220:	e7c1      	b.n	80101a6 <ip4_input+0xee>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010222:	4639      	mov	r1, r7
 8010224:	f000 f8cd 	bl	80103c2 <ip4_addr_isbroadcast_u32>
 8010228:	b928      	cbnz	r0, 8010236 <ip4_input+0x17e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801022a:	4b17      	ldr	r3, [pc, #92]	; (8010288 <ip4_input+0x1d0>)
 801022c:	695b      	ldr	r3, [r3, #20]
 801022e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010232:	2be0      	cmp	r3, #224	; 0xe0
 8010234:	d1b7      	bne.n	80101a6 <ip4_input+0xee>
      pbuf_free(p);
 8010236:	4620      	mov	r0, r4
 8010238:	f7f8 fa8c 	bl	8008754 <pbuf_free>
      return ERR_OK;
 801023c:	e746      	b.n	80100cc <ip4_input+0x14>
    pbuf_free(p);
 801023e:	4620      	mov	r0, r4
 8010240:	f7f8 fa88 	bl	8008754 <pbuf_free>
    return ERR_OK;
 8010244:	e742      	b.n	80100cc <ip4_input+0x14>
        udp_input(p, inp);
 8010246:	4639      	mov	r1, r7
 8010248:	4620      	mov	r0, r4
 801024a:	f7fc ffcf 	bl	800d1ec <udp_input>
  ip_data.current_netif = NULL;
 801024e:	4b0e      	ldr	r3, [pc, #56]	; (8010288 <ip4_input+0x1d0>)
 8010250:	2200      	movs	r2, #0
 8010252:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010254:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010256:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010258:	821a      	strh	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_src_addr());
 801025a:	615a      	str	r2, [r3, #20]
  ip4_addr_set_any(ip4_current_dest_addr());
 801025c:	62da      	str	r2, [r3, #44]	; 0x2c
  return ERR_OK;
 801025e:	e735      	b.n	80100cc <ip4_input+0x14>
        tcp_input(p, inp);
 8010260:	4639      	mov	r1, r7
 8010262:	4620      	mov	r0, r4
 8010264:	f7fb f9ce 	bl	800b604 <tcp_input>
        break;
 8010268:	e7f1      	b.n	801024e <ip4_input+0x196>
        icmp_input(p, inp);
 801026a:	4639      	mov	r1, r7
 801026c:	4620      	mov	r0, r4
 801026e:	f7ff fe11 	bl	800fe94 <icmp_input>
        break;
 8010272:	e7ec      	b.n	801024e <ip4_input+0x196>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010274:	4629      	mov	r1, r5
 8010276:	4620      	mov	r0, r4
 8010278:	f7f8 fa66 	bl	8008748 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801027c:	2102      	movs	r1, #2
 801027e:	4620      	mov	r0, r4
 8010280:	f7ff feac 	bl	800ffdc <icmp_dest_unreach>
 8010284:	e7bf      	b.n	8010206 <ip4_input+0x14e>
 8010286:	bf00      	nop
 8010288:	20004bac 	.word	0x20004bac
 801028c:	20008600 	.word	0x20008600

08010290 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010294:	b083      	sub	sp, #12
 8010296:	4605      	mov	r5, r0
 8010298:	4689      	mov	r9, r1
 801029a:	4616      	mov	r6, r2
 801029c:	4698      	mov	r8, r3
 801029e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80102a0:	7b83      	ldrb	r3, [r0, #14]
 80102a2:	2b01      	cmp	r3, #1
 80102a4:	d13f      	bne.n	8010326 <ip4_output_if_src+0x96>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80102a6:	2e00      	cmp	r6, #0
 80102a8:	d051      	beq.n	801034e <ip4_output_if_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80102aa:	2114      	movs	r1, #20
 80102ac:	4628      	mov	r0, r5
 80102ae:	f7f8 fa00 	bl	80086b2 <pbuf_add_header>
 80102b2:	2800      	cmp	r0, #0
 80102b4:	d15d      	bne.n	8010372 <ip4_output_if_src+0xe2>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 80102b6:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80102b8:	896b      	ldrh	r3, [r5, #10]
 80102ba:	2b13      	cmp	r3, #19
 80102bc:	d93b      	bls.n	8010336 <ip4_output_if_src+0xa6>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80102be:	f884 8008 	strb.w	r8, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 80102c2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80102c6:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80102c8:	6833      	ldr	r3, [r6, #0]
 80102ca:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80102cc:	2345      	movs	r3, #69	; 0x45
 80102ce:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 80102d0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80102d4:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80102d6:	8928      	ldrh	r0, [r5, #8]
 80102d8:	f7f6 ff7a 	bl	80071d0 <lwip_htons>
 80102dc:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80102de:	2300      	movs	r3, #0
 80102e0:	71a3      	strb	r3, [r4, #6]
 80102e2:	71e3      	strb	r3, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80102e4:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8010394 <ip4_output_if_src+0x104>
 80102e8:	f8b8 0000 	ldrh.w	r0, [r8]
 80102ec:	f7f6 ff70 	bl	80071d0 <lwip_htons>
 80102f0:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80102f2:	f8b8 3000 	ldrh.w	r3, [r8]
 80102f6:	3301      	adds	r3, #1
 80102f8:	f8a8 3000 	strh.w	r3, [r8]

    if (src == NULL) {
 80102fc:	f1b9 0f00 	cmp.w	r9, #0
 8010300:	d021      	beq.n	8010346 <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010302:	f8d9 3000 	ldr.w	r3, [r9]
 8010306:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010308:	2300      	movs	r3, #0
 801030a:	72a3      	strb	r3, [r4, #10]
 801030c:	72e3      	strb	r3, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801030e:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8010312:	bb2b      	cbnz	r3, 8010360 <ip4_output_if_src+0xd0>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010314:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010318:	4632      	mov	r2, r6
 801031a:	4629      	mov	r1, r5
 801031c:	4638      	mov	r0, r7
 801031e:	4798      	blx	r3
}
 8010320:	b003      	add	sp, #12
 8010322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010326:	4b16      	ldr	r3, [pc, #88]	; (8010380 <ip4_output_if_src+0xf0>)
 8010328:	f44f 7255 	mov.w	r2, #852	; 0x354
 801032c:	4915      	ldr	r1, [pc, #84]	; (8010384 <ip4_output_if_src+0xf4>)
 801032e:	4816      	ldr	r0, [pc, #88]	; (8010388 <ip4_output_if_src+0xf8>)
 8010330:	f004 fd88 	bl	8014e44 <iprintf>
 8010334:	e7b7      	b.n	80102a6 <ip4_output_if_src+0x16>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010336:	4b12      	ldr	r3, [pc, #72]	; (8010380 <ip4_output_if_src+0xf0>)
 8010338:	f240 3289 	movw	r2, #905	; 0x389
 801033c:	4913      	ldr	r1, [pc, #76]	; (801038c <ip4_output_if_src+0xfc>)
 801033e:	4812      	ldr	r0, [pc, #72]	; (8010388 <ip4_output_if_src+0xf8>)
 8010340:	f004 fd80 	bl	8014e44 <iprintf>
 8010344:	e7bb      	b.n	80102be <ip4_output_if_src+0x2e>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010346:	4b12      	ldr	r3, [pc, #72]	; (8010390 <ip4_output_if_src+0x100>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	60e3      	str	r3, [r4, #12]
 801034c:	e7dc      	b.n	8010308 <ip4_output_if_src+0x78>
    if (p->len < IP_HLEN) {
 801034e:	896b      	ldrh	r3, [r5, #10]
 8010350:	2b13      	cmp	r3, #19
 8010352:	d911      	bls.n	8010378 <ip4_output_if_src+0xe8>
    iphdr = (struct ip_hdr *)p->payload;
 8010354:	686b      	ldr	r3, [r5, #4]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010356:	691b      	ldr	r3, [r3, #16]
 8010358:	ae02      	add	r6, sp, #8
 801035a:	f846 3d04 	str.w	r3, [r6, #-4]!
 801035e:	e7d6      	b.n	801030e <ip4_output_if_src+0x7e>
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010360:	892a      	ldrh	r2, [r5, #8]
 8010362:	4293      	cmp	r3, r2
 8010364:	d2d6      	bcs.n	8010314 <ip4_output_if_src+0x84>
    return ip4_frag(p, netif, dest);
 8010366:	4632      	mov	r2, r6
 8010368:	4639      	mov	r1, r7
 801036a:	4628      	mov	r0, r5
 801036c:	f000 fb8e 	bl	8010a8c <ip4_frag>
 8010370:	e7d6      	b.n	8010320 <ip4_output_if_src+0x90>
      return ERR_BUF;
 8010372:	f06f 0001 	mvn.w	r0, #1
 8010376:	e7d3      	b.n	8010320 <ip4_output_if_src+0x90>
      return ERR_BUF;
 8010378:	f06f 0001 	mvn.w	r0, #1
 801037c:	e7d0      	b.n	8010320 <ip4_output_if_src+0x90>
 801037e:	bf00      	nop
 8010380:	0801877c 	.word	0x0801877c
 8010384:	080187b0 	.word	0x080187b0
 8010388:	08015d2c 	.word	0x08015d2c
 801038c:	080187bc 	.word	0x080187bc
 8010390:	080187ec 	.word	0x080187ec
 8010394:	20001890 	.word	0x20001890

08010398 <ip4_output_if>:
{
 8010398:	b530      	push	{r4, r5, lr}
 801039a:	b085      	sub	sp, #20
 801039c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (dest != LWIP_IP_HDRINCL) {
 801039e:	4615      	mov	r5, r2
 80103a0:	b11a      	cbz	r2, 80103aa <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 80103a2:	b109      	cbz	r1, 80103a8 <ip4_output_if+0x10>
 80103a4:	680a      	ldr	r2, [r1, #0]
 80103a6:	b902      	cbnz	r2, 80103aa <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 80103a8:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80103aa:	9402      	str	r4, [sp, #8]
 80103ac:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 80103b0:	9201      	str	r2, [sp, #4]
 80103b2:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80103b6:	9200      	str	r2, [sp, #0]
 80103b8:	462a      	mov	r2, r5
 80103ba:	f7ff ff69 	bl	8010290 <ip4_output_if_src>
}
 80103be:	b005      	add	sp, #20
 80103c0:	bd30      	pop	{r4, r5, pc}

080103c2 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80103c2:	1e43      	subs	r3, r0, #1
 80103c4:	f113 0f03 	cmn.w	r3, #3
 80103c8:	d811      	bhi.n	80103ee <ip4_addr_isbroadcast_u32+0x2c>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80103ca:	f891 30db 	ldrb.w	r3, [r1, #219]	; 0xdb
 80103ce:	f013 0f02 	tst.w	r3, #2
 80103d2:	d00e      	beq.n	80103f2 <ip4_addr_isbroadcast_u32+0x30>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80103d4:	684b      	ldr	r3, [r1, #4]
 80103d6:	4283      	cmp	r3, r0
 80103d8:	d00d      	beq.n	80103f6 <ip4_addr_isbroadcast_u32+0x34>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80103da:	69ca      	ldr	r2, [r1, #28]
 80103dc:	4043      	eors	r3, r0
 80103de:	4213      	tst	r3, r2
 80103e0:	d10b      	bne.n	80103fa <ip4_addr_isbroadcast_u32+0x38>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80103e2:	43d2      	mvns	r2, r2
 80103e4:	ea32 0300 	bics.w	r3, r2, r0
 80103e8:	d009      	beq.n	80103fe <ip4_addr_isbroadcast_u32+0x3c>
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 80103ea:	2000      	movs	r0, #0
 80103ec:	4770      	bx	lr
    return 1;
 80103ee:	2001      	movs	r0, #1
 80103f0:	4770      	bx	lr
    return 0;
 80103f2:	2000      	movs	r0, #0
 80103f4:	4770      	bx	lr
    return 0;
 80103f6:	2000      	movs	r0, #0
 80103f8:	4770      	bx	lr
    return 0;
 80103fa:	2000      	movs	r0, #0
 80103fc:	4770      	bx	lr
    return 1;
 80103fe:	2001      	movs	r0, #1
  }
}
 8010400:	4770      	bx	lr
	...

08010404 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010404:	b538      	push	{r3, r4, r5, lr}
 8010406:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010408:	4b0c      	ldr	r3, [pc, #48]	; (801043c <ip_reass_dequeue_datagram+0x38>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	4283      	cmp	r3, r0
 801040e:	d008      	beq.n	8010422 <ip_reass_dequeue_datagram+0x1e>
 8010410:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010412:	b151      	cbz	r1, 801042a <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 8010414:	6823      	ldr	r3, [r4, #0]
 8010416:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010418:	4621      	mov	r1, r4
 801041a:	2004      	movs	r0, #4
 801041c:	f7f7 fd0c 	bl	8007e38 <memp_free>
}
 8010420:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 8010422:	6802      	ldr	r2, [r0, #0]
 8010424:	4b05      	ldr	r3, [pc, #20]	; (801043c <ip_reass_dequeue_datagram+0x38>)
 8010426:	601a      	str	r2, [r3, #0]
 8010428:	e7f6      	b.n	8010418 <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801042a:	4b05      	ldr	r3, [pc, #20]	; (8010440 <ip_reass_dequeue_datagram+0x3c>)
 801042c:	f240 1245 	movw	r2, #325	; 0x145
 8010430:	4904      	ldr	r1, [pc, #16]	; (8010444 <ip_reass_dequeue_datagram+0x40>)
 8010432:	4805      	ldr	r0, [pc, #20]	; (8010448 <ip_reass_dequeue_datagram+0x44>)
 8010434:	f004 fd06 	bl	8014e44 <iprintf>
 8010438:	e7ec      	b.n	8010414 <ip_reass_dequeue_datagram+0x10>
 801043a:	bf00      	nop
 801043c:	20001894 	.word	0x20001894
 8010440:	0801893c 	.word	0x0801893c
 8010444:	08018978 	.word	0x08018978
 8010448:	08015d2c 	.word	0x08015d2c

0801044c <ip_reass_free_complete_datagram>:
{
 801044c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010450:	4680      	mov	r8, r0
 8010452:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8010454:	4281      	cmp	r1, r0
 8010456:	d015      	beq.n	8010484 <ip_reass_free_complete_datagram+0x38>
  if (prev != NULL) {
 8010458:	f1b9 0f00 	cmp.w	r9, #0
 801045c:	d009      	beq.n	8010472 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801045e:	f8d9 3000 	ldr.w	r3, [r9]
 8010462:	4543      	cmp	r3, r8
 8010464:	d005      	beq.n	8010472 <ip_reass_free_complete_datagram+0x26>
 8010466:	4b30      	ldr	r3, [pc, #192]	; (8010528 <ip_reass_free_complete_datagram+0xdc>)
 8010468:	22ad      	movs	r2, #173	; 0xad
 801046a:	4930      	ldr	r1, [pc, #192]	; (801052c <ip_reass_free_complete_datagram+0xe0>)
 801046c:	4830      	ldr	r0, [pc, #192]	; (8010530 <ip_reass_free_complete_datagram+0xe4>)
 801046e:	f004 fce9 	bl	8014e44 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8010472:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8010476:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 8010478:	889a      	ldrh	r2, [r3, #4]
 801047a:	b152      	cbz	r2, 8010492 <ip_reass_free_complete_datagram+0x46>
  u16_t pbufs_freed = 0;
 801047c:	2600      	movs	r6, #0
  p = ipr->p;
 801047e:	f8d8 4004 	ldr.w	r4, [r8, #4]
  while (p != NULL) {
 8010482:	e028      	b.n	80104d6 <ip_reass_free_complete_datagram+0x8a>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8010484:	4b28      	ldr	r3, [pc, #160]	; (8010528 <ip_reass_free_complete_datagram+0xdc>)
 8010486:	22ab      	movs	r2, #171	; 0xab
 8010488:	492a      	ldr	r1, [pc, #168]	; (8010534 <ip_reass_free_complete_datagram+0xe8>)
 801048a:	4829      	ldr	r0, [pc, #164]	; (8010530 <ip_reass_free_complete_datagram+0xe4>)
 801048c:	f004 fcda 	bl	8014e44 <iprintf>
 8010490:	e7e2      	b.n	8010458 <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010498:	4643      	mov	r3, r8
 801049a:	6862      	ldr	r2, [r4, #4]
 801049c:	f853 1f08 	ldr.w	r1, [r3, #8]!
 80104a0:	685e      	ldr	r6, [r3, #4]
 80104a2:	689d      	ldr	r5, [r3, #8]
 80104a4:	68d8      	ldr	r0, [r3, #12]
 80104a6:	6011      	str	r1, [r2, #0]
 80104a8:	6056      	str	r6, [r2, #4]
 80104aa:	6095      	str	r5, [r2, #8]
 80104ac:	60d0      	str	r0, [r2, #12]
 80104ae:	6919      	ldr	r1, [r3, #16]
 80104b0:	6111      	str	r1, [r2, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80104b2:	2101      	movs	r1, #1
 80104b4:	4620      	mov	r0, r4
 80104b6:	f7ff fd97 	bl	800ffe8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80104ba:	4620      	mov	r0, r4
 80104bc:	f7f8 faae 	bl	8008a1c <pbuf_clen>
 80104c0:	4606      	mov	r6, r0
    pbuf_free(p);
 80104c2:	4620      	mov	r0, r4
 80104c4:	f7f8 f946 	bl	8008754 <pbuf_free>
 80104c8:	e7d9      	b.n	801047e <ip_reass_free_complete_datagram+0x32>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80104ca:	4435      	add	r5, r6
 80104cc:	b2ae      	uxth	r6, r5
    pbuf_free(pcur);
 80104ce:	4620      	mov	r0, r4
 80104d0:	f7f8 f940 	bl	8008754 <pbuf_free>
    p = iprh->next_pbuf;
 80104d4:	463c      	mov	r4, r7
  while (p != NULL) {
 80104d6:	b184      	cbz	r4, 80104fa <ip_reass_free_complete_datagram+0xae>
    iprh = (struct ip_reass_helper *)p->payload;
 80104d8:	6863      	ldr	r3, [r4, #4]
    p = iprh->next_pbuf;
 80104da:	681f      	ldr	r7, [r3, #0]
    clen = pbuf_clen(pcur);
 80104dc:	4620      	mov	r0, r4
 80104de:	f7f8 fa9d 	bl	8008a1c <pbuf_clen>
 80104e2:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80104e4:	1833      	adds	r3, r6, r0
 80104e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104ea:	dbee      	blt.n	80104ca <ip_reass_free_complete_datagram+0x7e>
 80104ec:	4b0e      	ldr	r3, [pc, #56]	; (8010528 <ip_reass_free_complete_datagram+0xdc>)
 80104ee:	22cc      	movs	r2, #204	; 0xcc
 80104f0:	4911      	ldr	r1, [pc, #68]	; (8010538 <ip_reass_free_complete_datagram+0xec>)
 80104f2:	480f      	ldr	r0, [pc, #60]	; (8010530 <ip_reass_free_complete_datagram+0xe4>)
 80104f4:	f004 fca6 	bl	8014e44 <iprintf>
 80104f8:	e7e7      	b.n	80104ca <ip_reass_free_complete_datagram+0x7e>
  ip_reass_dequeue_datagram(ipr, prev);
 80104fa:	4649      	mov	r1, r9
 80104fc:	4640      	mov	r0, r8
 80104fe:	f7ff ff81 	bl	8010404 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010502:	4b0e      	ldr	r3, [pc, #56]	; (801053c <ip_reass_free_complete_datagram+0xf0>)
 8010504:	881b      	ldrh	r3, [r3, #0]
 8010506:	42b3      	cmp	r3, r6
 8010508:	d306      	bcc.n	8010518 <ip_reass_free_complete_datagram+0xcc>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801050a:	4a0c      	ldr	r2, [pc, #48]	; (801053c <ip_reass_free_complete_datagram+0xf0>)
 801050c:	8813      	ldrh	r3, [r2, #0]
 801050e:	1b9b      	subs	r3, r3, r6
 8010510:	8013      	strh	r3, [r2, #0]
}
 8010512:	4630      	mov	r0, r6
 8010514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010518:	4b03      	ldr	r3, [pc, #12]	; (8010528 <ip_reass_free_complete_datagram+0xdc>)
 801051a:	22d2      	movs	r2, #210	; 0xd2
 801051c:	4908      	ldr	r1, [pc, #32]	; (8010540 <ip_reass_free_complete_datagram+0xf4>)
 801051e:	4804      	ldr	r0, [pc, #16]	; (8010530 <ip_reass_free_complete_datagram+0xe4>)
 8010520:	f004 fc90 	bl	8014e44 <iprintf>
 8010524:	e7f1      	b.n	801050a <ip_reass_free_complete_datagram+0xbe>
 8010526:	bf00      	nop
 8010528:	0801893c 	.word	0x0801893c
 801052c:	080189a0 	.word	0x080189a0
 8010530:	08015d2c 	.word	0x08015d2c
 8010534:	08018994 	.word	0x08018994
 8010538:	080189b4 	.word	0x080189b4
 801053c:	20001892 	.word	0x20001892
 8010540:	080189d4 	.word	0x080189d4

08010544 <ip_reass_remove_oldest_datagram>:
{
 8010544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010548:	4606      	mov	r6, r0
 801054a:	4688      	mov	r8, r1
  int pbufs_freed = 0, pbufs_freed_current;
 801054c:	2700      	movs	r7, #0
 801054e:	e02b      	b.n	80105a8 <ip_reass_remove_oldest_datagram+0x64>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010550:	699a      	ldr	r2, [r3, #24]
 8010552:	f8d6 c010 	ldr.w	ip, [r6, #16]
 8010556:	4562      	cmp	r2, ip
 8010558:	d111      	bne.n	801057e <ip_reass_remove_oldest_datagram+0x3a>
 801055a:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 801055e:	88b2      	ldrh	r2, [r6, #4]
 8010560:	4594      	cmp	ip, r2
 8010562:	d10c      	bne.n	801057e <ip_reass_remove_oldest_datagram+0x3a>
 8010564:	e001      	b.n	801056a <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 8010566:	4629      	mov	r1, r5
          oldest = r;
 8010568:	4618      	mov	r0, r3
      if (r->next != NULL) {
 801056a:	681a      	ldr	r2, [r3, #0]
 801056c:	b192      	cbz	r2, 8010594 <ip_reass_remove_oldest_datagram+0x50>
 801056e:	461d      	mov	r5, r3
 8010570:	4613      	mov	r3, r2
    while (r != NULL) {
 8010572:	b18b      	cbz	r3, 8010598 <ip_reass_remove_oldest_datagram+0x54>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010574:	695a      	ldr	r2, [r3, #20]
 8010576:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 801057a:	4562      	cmp	r2, ip
 801057c:	d0e8      	beq.n	8010550 <ip_reass_remove_oldest_datagram+0xc>
        other_datagrams++;
 801057e:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8010580:	2800      	cmp	r0, #0
 8010582:	d0f0      	beq.n	8010566 <ip_reass_remove_oldest_datagram+0x22>
        } else if (r->timer <= oldest->timer) {
 8010584:	f893 c01f 	ldrb.w	ip, [r3, #31]
 8010588:	7fc2      	ldrb	r2, [r0, #31]
 801058a:	4594      	cmp	ip, r2
 801058c:	d8ed      	bhi.n	801056a <ip_reass_remove_oldest_datagram+0x26>
          oldest_prev = prev;
 801058e:	4629      	mov	r1, r5
          oldest = r;
 8010590:	4618      	mov	r0, r3
 8010592:	e7ea      	b.n	801056a <ip_reass_remove_oldest_datagram+0x26>
      if (r->next != NULL) {
 8010594:	462b      	mov	r3, r5
 8010596:	e7ea      	b.n	801056e <ip_reass_remove_oldest_datagram+0x2a>
    if (oldest != NULL) {
 8010598:	b110      	cbz	r0, 80105a0 <ip_reass_remove_oldest_datagram+0x5c>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801059a:	f7ff ff57 	bl	801044c <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 801059e:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80105a0:	4547      	cmp	r7, r8
 80105a2:	da08      	bge.n	80105b6 <ip_reass_remove_oldest_datagram+0x72>
 80105a4:	2c01      	cmp	r4, #1
 80105a6:	dd06      	ble.n	80105b6 <ip_reass_remove_oldest_datagram+0x72>
    r = reassdatagrams;
 80105a8:	4b04      	ldr	r3, [pc, #16]	; (80105bc <ip_reass_remove_oldest_datagram+0x78>)
 80105aa:	681b      	ldr	r3, [r3, #0]
    other_datagrams = 0;
 80105ac:	2400      	movs	r4, #0
    oldest_prev = NULL;
 80105ae:	4621      	mov	r1, r4
    prev = NULL;
 80105b0:	4625      	mov	r5, r4
    oldest = NULL;
 80105b2:	4620      	mov	r0, r4
    while (r != NULL) {
 80105b4:	e7dd      	b.n	8010572 <ip_reass_remove_oldest_datagram+0x2e>
}
 80105b6:	4638      	mov	r0, r7
 80105b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105bc:	20001894 	.word	0x20001894

080105c0 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80105c0:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80105c2:	4604      	mov	r4, r0
 80105c4:	b120      	cbz	r0, 80105d0 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 80105c6:	4621      	mov	r1, r4
 80105c8:	2005      	movs	r0, #5
 80105ca:	f7f7 fc35 	bl	8007e38 <memp_free>
}
 80105ce:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80105d0:	4b03      	ldr	r3, [pc, #12]	; (80105e0 <ip_frag_free_pbuf_custom_ref+0x20>)
 80105d2:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80105d6:	4903      	ldr	r1, [pc, #12]	; (80105e4 <ip_frag_free_pbuf_custom_ref+0x24>)
 80105d8:	4803      	ldr	r0, [pc, #12]	; (80105e8 <ip_frag_free_pbuf_custom_ref+0x28>)
 80105da:	f004 fc33 	bl	8014e44 <iprintf>
 80105de:	e7f2      	b.n	80105c6 <ip_frag_free_pbuf_custom_ref+0x6>
 80105e0:	0801893c 	.word	0x0801893c
 80105e4:	080181b4 	.word	0x080181b4
 80105e8:	08015d2c 	.word	0x08015d2c

080105ec <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80105ec:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80105ee:	4604      	mov	r4, r0
 80105f0:	b138      	cbz	r0, 8010602 <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 80105f2:	6960      	ldr	r0, [r4, #20]
 80105f4:	b108      	cbz	r0, 80105fa <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 80105f6:	f7f8 f8ad 	bl	8008754 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80105fa:	4620      	mov	r0, r4
 80105fc:	f7ff ffe0 	bl	80105c0 <ip_frag_free_pbuf_custom_ref>
}
 8010600:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010602:	4b04      	ldr	r3, [pc, #16]	; (8010614 <ipfrag_free_pbuf_custom+0x28>)
 8010604:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010608:	4903      	ldr	r1, [pc, #12]	; (8010618 <ipfrag_free_pbuf_custom+0x2c>)
 801060a:	4804      	ldr	r0, [pc, #16]	; (801061c <ipfrag_free_pbuf_custom+0x30>)
 801060c:	f004 fc1a 	bl	8014e44 <iprintf>
 8010610:	e7ef      	b.n	80105f2 <ipfrag_free_pbuf_custom+0x6>
 8010612:	bf00      	nop
 8010614:	0801893c 	.word	0x0801893c
 8010618:	080189f8 	.word	0x080189f8
 801061c:	08015d2c 	.word	0x08015d2c

08010620 <ip_reass_chain_frag_into_datagram_and_validate>:
{
 8010620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010624:	4680      	mov	r8, r0
 8010626:	460f      	mov	r7, r1
 8010628:	4691      	mov	r9, r2
  fraghdr = (struct ip_hdr *)new_p->payload;
 801062a:	684c      	ldr	r4, [r1, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801062c:	8860      	ldrh	r0, [r4, #2]
 801062e:	f7f6 fdcf 	bl	80071d0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8010632:	7823      	ldrb	r3, [r4, #0]
 8010634:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8010638:	009b      	lsls	r3, r3, #2
 801063a:	4283      	cmp	r3, r0
 801063c:	f200 80a4 	bhi.w	8010788 <ip_reass_chain_frag_into_datagram_and_validate+0x168>
  len = (u16_t)(len - hlen);
 8010640:	1ac0      	subs	r0, r0, r3
 8010642:	b286      	uxth	r6, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010644:	88e0      	ldrh	r0, [r4, #6]
 8010646:	f7f6 fdc3 	bl	80071d0 <lwip_htons>
 801064a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801064e:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010650:	687d      	ldr	r5, [r7, #4]
  iprh->next_pbuf = NULL;
 8010652:	2300      	movs	r3, #0
 8010654:	702b      	strb	r3, [r5, #0]
 8010656:	706b      	strb	r3, [r5, #1]
 8010658:	70ab      	strb	r3, [r5, #2]
 801065a:	70eb      	strb	r3, [r5, #3]
  iprh->start = offset;
 801065c:	80aa      	strh	r2, [r5, #4]
  iprh->end = (u16_t)(offset + len);
 801065e:	eb06 0c02 	add.w	ip, r6, r2
 8010662:	fa1f fc8c 	uxth.w	ip, ip
 8010666:	f8a5 c006 	strh.w	ip, [r5, #6]
  if (iprh->end < offset) {
 801066a:	4594      	cmp	ip, r2
 801066c:	f0c0 808f 	bcc.w	801078e <ip_reass_chain_frag_into_datagram_and_validate+0x16e>
  for (q = ipr->p; q != NULL;) {
 8010670:	f8d8 0004 	ldr.w	r0, [r8, #4]
  int valid = 1;
 8010674:	2601      	movs	r6, #1
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010676:	461c      	mov	r4, r3
  for (q = ipr->p; q != NULL;) {
 8010678:	e036      	b.n	80106e8 <ip_reass_chain_frag_into_datagram_and_validate+0xc8>
      iprh->next_pbuf = q;
 801067a:	6028      	str	r0, [r5, #0]
      if (iprh_prev != NULL) {
 801067c:	b364      	cbz	r4, 80106d8 <ip_reass_chain_frag_into_datagram_and_validate+0xb8>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801067e:	88e1      	ldrh	r1, [r4, #6]
 8010680:	4291      	cmp	r1, r2
 8010682:	f200 8087 	bhi.w	8010794 <ip_reass_chain_frag_into_datagram_and_validate+0x174>
 8010686:	889b      	ldrh	r3, [r3, #4]
 8010688:	459c      	cmp	ip, r3
 801068a:	f200 8086 	bhi.w	801079a <ip_reass_chain_frag_into_datagram_and_validate+0x17a>
        iprh_prev->next_pbuf = new_p;
 801068e:	6027      	str	r7, [r4, #0]
        if (iprh_prev->end != iprh->start) {
 8010690:	88ab      	ldrh	r3, [r5, #4]
 8010692:	4299      	cmp	r1, r3
 8010694:	d000      	beq.n	8010698 <ip_reass_chain_frag_into_datagram_and_validate+0x78>
          valid = 0;
 8010696:	2600      	movs	r6, #0
  if (q == NULL) {
 8010698:	2800      	cmp	r0, #0
 801069a:	d037      	beq.n	801070c <ip_reass_chain_frag_into_datagram_and_validate+0xec>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801069c:	f1b9 0f00 	cmp.w	r9, #0
 80106a0:	d105      	bne.n	80106ae <ip_reass_chain_frag_into_datagram_and_validate+0x8e>
 80106a2:	f898 301e 	ldrb.w	r3, [r8, #30]
 80106a6:	f013 0f01 	tst.w	r3, #1
 80106aa:	f000 8082 	beq.w	80107b2 <ip_reass_chain_frag_into_datagram_and_validate+0x192>
    if (valid) {
 80106ae:	2e00      	cmp	r6, #0
 80106b0:	d067      	beq.n	8010782 <ip_reass_chain_frag_into_datagram_and_validate+0x162>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80106b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d060      	beq.n	801077c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
 80106ba:	6858      	ldr	r0, [r3, #4]
 80106bc:	8883      	ldrh	r3, [r0, #4]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d15e      	bne.n	8010780 <ip_reass_chain_frag_into_datagram_and_validate+0x160>
        q = iprh->next_pbuf;
 80106c2:	682a      	ldr	r2, [r5, #0]
        while (q != NULL) {
 80106c4:	2a00      	cmp	r2, #0
 80106c6:	d044      	beq.n	8010752 <ip_reass_chain_frag_into_datagram_and_validate+0x132>
          iprh = (struct ip_reass_helper *)q->payload;
 80106c8:	6853      	ldr	r3, [r2, #4]
          if (iprh_prev->end != iprh->start) {
 80106ca:	88e9      	ldrh	r1, [r5, #6]
 80106cc:	889a      	ldrh	r2, [r3, #4]
 80106ce:	4291      	cmp	r1, r2
 80106d0:	d13d      	bne.n	801074e <ip_reass_chain_frag_into_datagram_and_validate+0x12e>
          q = iprh->next_pbuf;
 80106d2:	681a      	ldr	r2, [r3, #0]
          iprh = (struct ip_reass_helper *)q->payload;
 80106d4:	461d      	mov	r5, r3
 80106d6:	e7f5      	b.n	80106c4 <ip_reass_chain_frag_into_datagram_and_validate+0xa4>
        if (iprh->end > iprh_tmp->start) {
 80106d8:	889b      	ldrh	r3, [r3, #4]
 80106da:	459c      	cmp	ip, r3
 80106dc:	d860      	bhi.n	80107a0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
        ipr->p = new_p;
 80106de:	f8c8 7004 	str.w	r7, [r8, #4]
 80106e2:	e7d9      	b.n	8010698 <ip_reass_chain_frag_into_datagram_and_validate+0x78>
    q = iprh_tmp->next_pbuf;
 80106e4:	6818      	ldr	r0, [r3, #0]
    iprh_prev = iprh_tmp;
 80106e6:	461c      	mov	r4, r3
  for (q = ipr->p; q != NULL;) {
 80106e8:	2800      	cmp	r0, #0
 80106ea:	d0d5      	beq.n	8010698 <ip_reass_chain_frag_into_datagram_and_validate+0x78>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80106ec:	6843      	ldr	r3, [r0, #4]
    if (iprh->start < iprh_tmp->start) {
 80106ee:	8899      	ldrh	r1, [r3, #4]
 80106f0:	4291      	cmp	r1, r2
 80106f2:	d8c2      	bhi.n	801067a <ip_reass_chain_frag_into_datagram_and_validate+0x5a>
    } else if (iprh->start == iprh_tmp->start) {
 80106f4:	4291      	cmp	r1, r2
 80106f6:	d056      	beq.n	80107a6 <ip_reass_chain_frag_into_datagram_and_validate+0x186>
    } else if (iprh->start < iprh_tmp->end) {
 80106f8:	88d8      	ldrh	r0, [r3, #6]
 80106fa:	4290      	cmp	r0, r2
 80106fc:	d856      	bhi.n	80107ac <ip_reass_chain_frag_into_datagram_and_validate+0x18c>
      if (iprh_prev != NULL) {
 80106fe:	2c00      	cmp	r4, #0
 8010700:	d0f0      	beq.n	80106e4 <ip_reass_chain_frag_into_datagram_and_validate+0xc4>
        if (iprh_prev->end != iprh_tmp->start) {
 8010702:	88e0      	ldrh	r0, [r4, #6]
 8010704:	4281      	cmp	r1, r0
 8010706:	d0ed      	beq.n	80106e4 <ip_reass_chain_frag_into_datagram_and_validate+0xc4>
          valid = 0;
 8010708:	2600      	movs	r6, #0
 801070a:	e7eb      	b.n	80106e4 <ip_reass_chain_frag_into_datagram_and_validate+0xc4>
    if (iprh_prev != NULL) {
 801070c:	b194      	cbz	r4, 8010734 <ip_reass_chain_frag_into_datagram_and_validate+0x114>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801070e:	88e2      	ldrh	r2, [r4, #6]
 8010710:	88ab      	ldrh	r3, [r5, #4]
 8010712:	429a      	cmp	r2, r3
 8010714:	d806      	bhi.n	8010724 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      iprh_prev->next_pbuf = new_p;
 8010716:	6027      	str	r7, [r4, #0]
      if (iprh_prev->end != iprh->start) {
 8010718:	88e2      	ldrh	r2, [r4, #6]
 801071a:	88ab      	ldrh	r3, [r5, #4]
 801071c:	429a      	cmp	r2, r3
 801071e:	d0bd      	beq.n	801069c <ip_reass_chain_frag_into_datagram_and_validate+0x7c>
        valid = 0;
 8010720:	2600      	movs	r6, #0
 8010722:	e7bb      	b.n	801069c <ip_reass_chain_frag_into_datagram_and_validate+0x7c>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010724:	4b24      	ldr	r3, [pc, #144]	; (80107b8 <ip_reass_chain_frag_into_datagram_and_validate+0x198>)
 8010726:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801072a:	4924      	ldr	r1, [pc, #144]	; (80107bc <ip_reass_chain_frag_into_datagram_and_validate+0x19c>)
 801072c:	4824      	ldr	r0, [pc, #144]	; (80107c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>)
 801072e:	f004 fb89 	bl	8014e44 <iprintf>
 8010732:	e7f0      	b.n	8010716 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010734:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010738:	b133      	cbz	r3, 8010748 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
 801073a:	4b1f      	ldr	r3, [pc, #124]	; (80107b8 <ip_reass_chain_frag_into_datagram_and_validate+0x198>)
 801073c:	f240 12bf 	movw	r2, #447	; 0x1bf
 8010740:	4920      	ldr	r1, [pc, #128]	; (80107c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1a4>)
 8010742:	481f      	ldr	r0, [pc, #124]	; (80107c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>)
 8010744:	f004 fb7e 	bl	8014e44 <iprintf>
      ipr->p = new_p;
 8010748:	f8c8 7004 	str.w	r7, [r8, #4]
 801074c:	e7a6      	b.n	801069c <ip_reass_chain_frag_into_datagram_and_validate+0x7c>
          iprh = (struct ip_reass_helper *)q->payload;
 801074e:	461d      	mov	r5, r3
            valid = 0;
 8010750:	2600      	movs	r6, #0
        if (valid) {
 8010752:	b1b6      	cbz	r6, 8010782 <ip_reass_chain_frag_into_datagram_and_validate+0x162>
          LWIP_ASSERT("sanity check",
 8010754:	42a8      	cmp	r0, r5
 8010756:	d009      	beq.n	801076c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010758:	682b      	ldr	r3, [r5, #0]
 801075a:	b193      	cbz	r3, 8010782 <ip_reass_chain_frag_into_datagram_and_validate+0x162>
 801075c:	4b16      	ldr	r3, [pc, #88]	; (80107b8 <ip_reass_chain_frag_into_datagram_and_validate+0x198>)
 801075e:	f240 12e3 	movw	r2, #483	; 0x1e3
 8010762:	4919      	ldr	r1, [pc, #100]	; (80107c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1a8>)
 8010764:	4816      	ldr	r0, [pc, #88]	; (80107c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>)
 8010766:	f004 fb6d 	bl	8014e44 <iprintf>
 801076a:	e00a      	b.n	8010782 <ip_reass_chain_frag_into_datagram_and_validate+0x162>
          LWIP_ASSERT("sanity check",
 801076c:	4b12      	ldr	r3, [pc, #72]	; (80107b8 <ip_reass_chain_frag_into_datagram_and_validate+0x198>)
 801076e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010772:	4916      	ldr	r1, [pc, #88]	; (80107cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ac>)
 8010774:	4812      	ldr	r0, [pc, #72]	; (80107c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>)
 8010776:	f004 fb65 	bl	8014e44 <iprintf>
 801077a:	e7ed      	b.n	8010758 <ip_reass_chain_frag_into_datagram_and_validate+0x138>
        valid = 0;
 801077c:	2600      	movs	r6, #0
 801077e:	e000      	b.n	8010782 <ip_reass_chain_frag_into_datagram_and_validate+0x162>
 8010780:	2600      	movs	r6, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010782:	4630      	mov	r0, r6
}
 8010784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010788:	f04f 30ff 	mov.w	r0, #4294967295
 801078c:	e7fa      	b.n	8010784 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801078e:	f04f 30ff 	mov.w	r0, #4294967295
 8010792:	e7f7      	b.n	8010784 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010794:	f04f 30ff 	mov.w	r0, #4294967295
 8010798:	e7f4      	b.n	8010784 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
 801079a:	f04f 30ff 	mov.w	r0, #4294967295
 801079e:	e7f1      	b.n	8010784 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80107a0:	f04f 30ff 	mov.w	r0, #4294967295
 80107a4:	e7ee      	b.n	8010784 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80107a6:	f04f 30ff 	mov.w	r0, #4294967295
 80107aa:	e7eb      	b.n	8010784 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80107ac:	f04f 30ff 	mov.w	r0, #4294967295
 80107b0:	e7e8      	b.n	8010784 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80107b2:	4648      	mov	r0, r9
 80107b4:	e7e6      	b.n	8010784 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
 80107b6:	bf00      	nop
 80107b8:	0801893c 	.word	0x0801893c
 80107bc:	080188b0 	.word	0x080188b0
 80107c0:	08015d2c 	.word	0x08015d2c
 80107c4:	080188d0 	.word	0x080188d0
 80107c8:	08018918 	.word	0x08018918
 80107cc:	08018908 	.word	0x08018908

080107d0 <ip_frag_alloc_pbuf_custom_ref>:
{
 80107d0:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80107d2:	2005      	movs	r0, #5
 80107d4:	f7f7 fb16 	bl	8007e04 <memp_malloc>
}
 80107d8:	bd08      	pop	{r3, pc}
	...

080107dc <ip_reass_enqueue_new_datagram>:
{
 80107dc:	b570      	push	{r4, r5, r6, lr}
 80107de:	4605      	mov	r5, r0
 80107e0:	460e      	mov	r6, r1
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80107e2:	2004      	movs	r0, #4
 80107e4:	f7f7 fb0e 	bl	8007e04 <memp_malloc>
  if (ipr == NULL) {
 80107e8:	4604      	mov	r4, r0
 80107ea:	b1c8      	cbz	r0, 8010820 <ip_reass_enqueue_new_datagram+0x44>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80107ec:	2200      	movs	r2, #0
 80107ee:	6062      	str	r2, [r4, #4]
 80107f0:	60a2      	str	r2, [r4, #8]
 80107f2:	60e2      	str	r2, [r4, #12]
 80107f4:	6122      	str	r2, [r4, #16]
 80107f6:	6162      	str	r2, [r4, #20]
 80107f8:	61a2      	str	r2, [r4, #24]
 80107fa:	61e2      	str	r2, [r4, #28]
  ipr->timer = IP_REASS_MAXAGE;
 80107fc:	230f      	movs	r3, #15
 80107fe:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8010800:	4b0e      	ldr	r3, [pc, #56]	; (801083c <ip_reass_enqueue_new_datagram+0x60>)
 8010802:	681a      	ldr	r2, [r3, #0]
 8010804:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 8010806:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010808:	682a      	ldr	r2, [r5, #0]
 801080a:	686e      	ldr	r6, [r5, #4]
 801080c:	68a8      	ldr	r0, [r5, #8]
 801080e:	68e9      	ldr	r1, [r5, #12]
 8010810:	60a2      	str	r2, [r4, #8]
 8010812:	60e6      	str	r6, [r4, #12]
 8010814:	6120      	str	r0, [r4, #16]
 8010816:	6161      	str	r1, [r4, #20]
 8010818:	692a      	ldr	r2, [r5, #16]
 801081a:	61a2      	str	r2, [r4, #24]
}
 801081c:	4620      	mov	r0, r4
 801081e:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010820:	4631      	mov	r1, r6
 8010822:	4628      	mov	r0, r5
 8010824:	f7ff fe8e 	bl	8010544 <ip_reass_remove_oldest_datagram>
 8010828:	42b0      	cmp	r0, r6
 801082a:	da02      	bge.n	8010832 <ip_reass_enqueue_new_datagram+0x56>
    if (ipr == NULL)
 801082c:	2c00      	cmp	r4, #0
 801082e:	d1dd      	bne.n	80107ec <ip_reass_enqueue_new_datagram+0x10>
 8010830:	e7f4      	b.n	801081c <ip_reass_enqueue_new_datagram+0x40>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010832:	2004      	movs	r0, #4
 8010834:	f7f7 fae6 	bl	8007e04 <memp_malloc>
 8010838:	4604      	mov	r4, r0
 801083a:	e7f7      	b.n	801082c <ip_reass_enqueue_new_datagram+0x50>
 801083c:	20001894 	.word	0x20001894

08010840 <ip_reass_tmr>:
{
 8010840:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8010842:	4b09      	ldr	r3, [pc, #36]	; (8010868 <ip_reass_tmr+0x28>)
 8010844:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 8010846:	2400      	movs	r4, #0
  while (r != NULL) {
 8010848:	e004      	b.n	8010854 <ip_reass_tmr+0x14>
      r = r->next;
 801084a:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 801084c:	4621      	mov	r1, r4
 801084e:	f7ff fdfd 	bl	801044c <ip_reass_free_complete_datagram>
      r = r->next;
 8010852:	4628      	mov	r0, r5
  while (r != NULL) {
 8010854:	b138      	cbz	r0, 8010866 <ip_reass_tmr+0x26>
    if (r->timer > 0) {
 8010856:	7fc3      	ldrb	r3, [r0, #31]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d0f6      	beq.n	801084a <ip_reass_tmr+0xa>
      r->timer--;
 801085c:	3b01      	subs	r3, #1
 801085e:	77c3      	strb	r3, [r0, #31]
      prev = r;
 8010860:	4604      	mov	r4, r0
      r = r->next;
 8010862:	6800      	ldr	r0, [r0, #0]
 8010864:	e7f6      	b.n	8010854 <ip_reass_tmr+0x14>
}
 8010866:	bd38      	pop	{r3, r4, r5, pc}
 8010868:	20001894 	.word	0x20001894

0801086c <ip4_reass>:
{
 801086c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010870:	4607      	mov	r7, r0
  fraghdr = (struct ip_hdr *)p->payload;
 8010872:	6845      	ldr	r5, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010874:	782b      	ldrb	r3, [r5, #0]
 8010876:	f003 030f 	and.w	r3, r3, #15
 801087a:	2b05      	cmp	r3, #5
 801087c:	f040 80d7 	bne.w	8010a2e <ip4_reass+0x1c2>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010880:	88e8      	ldrh	r0, [r5, #6]
 8010882:	f7f6 fca5 	bl	80071d0 <lwip_htons>
 8010886:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801088a:	00c6      	lsls	r6, r0, #3
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801088c:	8868      	ldrh	r0, [r5, #2]
 801088e:	f7f6 fc9f 	bl	80071d0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8010892:	782b      	ldrb	r3, [r5, #0]
 8010894:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8010898:	009b      	lsls	r3, r3, #2
 801089a:	4283      	cmp	r3, r0
 801089c:	f200 80c7 	bhi.w	8010a2e <ip4_reass+0x1c2>
  len = (u16_t)(len - hlen);
 80108a0:	1ac3      	subs	r3, r0, r3
 80108a2:	fa1f f883 	uxth.w	r8, r3
  clen = pbuf_clen(p);
 80108a6:	4638      	mov	r0, r7
 80108a8:	f7f8 f8b8 	bl	8008a1c <pbuf_clen>
 80108ac:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80108ae:	4b70      	ldr	r3, [pc, #448]	; (8010a70 <ip4_reass+0x204>)
 80108b0:	881b      	ldrh	r3, [r3, #0]
 80108b2:	4403      	add	r3, r0
 80108b4:	2b0a      	cmp	r3, #10
 80108b6:	dc02      	bgt.n	80108be <ip4_reass+0x52>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80108b8:	4b6e      	ldr	r3, [pc, #440]	; (8010a74 <ip4_reass+0x208>)
 80108ba:	681c      	ldr	r4, [r3, #0]
 80108bc:	e00d      	b.n	80108da <ip4_reass+0x6e>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80108be:	4601      	mov	r1, r0
 80108c0:	4628      	mov	r0, r5
 80108c2:	f7ff fe3f 	bl	8010544 <ip_reass_remove_oldest_datagram>
 80108c6:	2800      	cmp	r0, #0
 80108c8:	f000 80b1 	beq.w	8010a2e <ip4_reass+0x1c2>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80108cc:	4b68      	ldr	r3, [pc, #416]	; (8010a70 <ip4_reass+0x204>)
 80108ce:	881b      	ldrh	r3, [r3, #0]
 80108d0:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80108d2:	2b0a      	cmp	r3, #10
 80108d4:	ddf0      	ble.n	80108b8 <ip4_reass+0x4c>
nullreturn:
 80108d6:	e0aa      	b.n	8010a2e <ip4_reass+0x1c2>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80108d8:	6824      	ldr	r4, [r4, #0]
 80108da:	b15c      	cbz	r4, 80108f4 <ip4_reass+0x88>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80108dc:	6962      	ldr	r2, [r4, #20]
 80108de:	68eb      	ldr	r3, [r5, #12]
 80108e0:	429a      	cmp	r2, r3
 80108e2:	d1f9      	bne.n	80108d8 <ip4_reass+0x6c>
 80108e4:	69a2      	ldr	r2, [r4, #24]
 80108e6:	692b      	ldr	r3, [r5, #16]
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d1f5      	bne.n	80108d8 <ip4_reass+0x6c>
 80108ec:	89a2      	ldrh	r2, [r4, #12]
 80108ee:	88ab      	ldrh	r3, [r5, #4]
 80108f0:	429a      	cmp	r2, r3
 80108f2:	d1f1      	bne.n	80108d8 <ip4_reass+0x6c>
  if (ipr == NULL) {
 80108f4:	2c00      	cmp	r4, #0
 80108f6:	d04c      	beq.n	8010992 <ip4_reass+0x126>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80108f8:	88e8      	ldrh	r0, [r5, #6]
 80108fa:	f7f6 fc69 	bl	80071d0 <lwip_htons>
 80108fe:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8010902:	2800      	cmp	r0, #0
 8010904:	d04d      	beq.n	80109a2 <ip4_reass+0x136>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010906:	88ed      	ldrh	r5, [r5, #6]
 8010908:	f005 0520 	and.w	r5, r5, #32
 801090c:	2d00      	cmp	r5, #0
 801090e:	bf0c      	ite	eq
 8010910:	2201      	moveq	r2, #1
 8010912:	2200      	movne	r2, #0
  if (is_last) {
 8010914:	d109      	bne.n	801092a <ip4_reass+0xbe>
    u16_t datagram_len = (u16_t)(offset + len);
 8010916:	eb06 0308 	add.w	r3, r6, r8
 801091a:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801091c:	429e      	cmp	r6, r3
 801091e:	f200 8083 	bhi.w	8010a28 <ip4_reass+0x1bc>
 8010922:	f64f 71eb 	movw	r1, #65515	; 0xffeb
 8010926:	428b      	cmp	r3, r1
 8010928:	d87e      	bhi.n	8010a28 <ip4_reass+0x1bc>
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801092a:	4639      	mov	r1, r7
 801092c:	4620      	mov	r0, r4
 801092e:	f7ff fe77 	bl	8010620 <ip_reass_chain_frag_into_datagram_and_validate>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010932:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010936:	d077      	beq.n	8010a28 <ip4_reass+0x1bc>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010938:	4b4d      	ldr	r3, [pc, #308]	; (8010a70 <ip4_reass+0x204>)
 801093a:	881a      	ldrh	r2, [r3, #0]
 801093c:	4491      	add	r9, r2
 801093e:	f8a3 9000 	strh.w	r9, [r3]
  if (is_last) {
 8010942:	b92d      	cbnz	r5, 8010950 <ip4_reass+0xe4>
    u16_t datagram_len = (u16_t)(offset + len);
 8010944:	4446      	add	r6, r8
    ipr->datagram_len = datagram_len;
 8010946:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010948:	7fa3      	ldrb	r3, [r4, #30]
 801094a:	f043 0301 	orr.w	r3, r3, #1
 801094e:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010950:	2801      	cmp	r0, #1
 8010952:	f040 808b 	bne.w	8010a6c <ip4_reass+0x200>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010956:	8ba0      	ldrh	r0, [r4, #28]
 8010958:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801095a:	6863      	ldr	r3, [r4, #4]
 801095c:	685e      	ldr	r6, [r3, #4]
 801095e:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010960:	4623      	mov	r3, r4
 8010962:	f853 2f08 	ldr.w	r2, [r3, #8]!
 8010966:	f8d3 c004 	ldr.w	ip, [r3, #4]
 801096a:	689f      	ldr	r7, [r3, #8]
 801096c:	68d9      	ldr	r1, [r3, #12]
 801096e:	6032      	str	r2, [r6, #0]
 8010970:	f8c6 c004 	str.w	ip, [r6, #4]
 8010974:	60b7      	str	r7, [r6, #8]
 8010976:	60f1      	str	r1, [r6, #12]
 8010978:	691a      	ldr	r2, [r3, #16]
 801097a:	6132      	str	r2, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801097c:	b280      	uxth	r0, r0
 801097e:	f7f6 fc27 	bl	80071d0 <lwip_htons>
 8010982:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010984:	2300      	movs	r3, #0
 8010986:	71b3      	strb	r3, [r6, #6]
 8010988:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801098a:	72b3      	strb	r3, [r6, #10]
 801098c:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 801098e:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 8010990:	e025      	b.n	80109de <ip4_reass+0x172>
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010992:	4649      	mov	r1, r9
 8010994:	4628      	mov	r0, r5
 8010996:	f7ff ff21 	bl	80107dc <ip_reass_enqueue_new_datagram>
    if (ipr == NULL) {
 801099a:	4604      	mov	r4, r0
 801099c:	2800      	cmp	r0, #0
 801099e:	d1b2      	bne.n	8010906 <ip4_reass+0x9a>
 80109a0:	e045      	b.n	8010a2e <ip4_reass+0x1c2>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80109a2:	89e0      	ldrh	r0, [r4, #14]
 80109a4:	f7f6 fc14 	bl	80071d0 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80109a8:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80109ac:	2800      	cmp	r0, #0
 80109ae:	d0aa      	beq.n	8010906 <ip4_reass+0x9a>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80109b0:	682a      	ldr	r2, [r5, #0]
 80109b2:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80109b6:	68a8      	ldr	r0, [r5, #8]
 80109b8:	68e9      	ldr	r1, [r5, #12]
 80109ba:	60a2      	str	r2, [r4, #8]
 80109bc:	f8c4 c00c 	str.w	ip, [r4, #12]
 80109c0:	6120      	str	r0, [r4, #16]
 80109c2:	6161      	str	r1, [r4, #20]
 80109c4:	692a      	ldr	r2, [r5, #16]
 80109c6:	61a2      	str	r2, [r4, #24]
 80109c8:	e79d      	b.n	8010906 <ip4_reass+0x9a>
      iprh = (struct ip_reass_helper *)r->payload;
 80109ca:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 80109cc:	2114      	movs	r1, #20
 80109ce:	4628      	mov	r0, r5
 80109d0:	f7f7 fe7a 	bl	80086c8 <pbuf_remove_header>
      pbuf_cat(p, r);
 80109d4:	4629      	mov	r1, r5
 80109d6:	4630      	mov	r0, r6
 80109d8:	f7f8 f842 	bl	8008a60 <pbuf_cat>
      r = iprh->next_pbuf;
 80109dc:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 80109de:	2d00      	cmp	r5, #0
 80109e0:	d1f3      	bne.n	80109ca <ip4_reass+0x15e>
    if (ipr == reassdatagrams) {
 80109e2:	4b24      	ldr	r3, [pc, #144]	; (8010a74 <ip4_reass+0x208>)
 80109e4:	6819      	ldr	r1, [r3, #0]
 80109e6:	42a1      	cmp	r1, r4
 80109e8:	d005      	beq.n	80109f6 <ip4_reass+0x18a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80109ea:	b129      	cbz	r1, 80109f8 <ip4_reass+0x18c>
        if (ipr_prev->next == ipr) {
 80109ec:	680b      	ldr	r3, [r1, #0]
 80109ee:	42a3      	cmp	r3, r4
 80109f0:	d002      	beq.n	80109f8 <ip4_reass+0x18c>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80109f2:	4619      	mov	r1, r3
 80109f4:	e7f9      	b.n	80109ea <ip4_reass+0x17e>
      ipr_prev = NULL;
 80109f6:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80109f8:	4620      	mov	r0, r4
 80109fa:	f7ff fd03 	bl	8010404 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 80109fe:	4630      	mov	r0, r6
 8010a00:	f7f8 f80c 	bl	8008a1c <pbuf_clen>
 8010a04:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010a06:	4b1a      	ldr	r3, [pc, #104]	; (8010a70 <ip4_reass+0x204>)
 8010a08:	881b      	ldrh	r3, [r3, #0]
 8010a0a:	4283      	cmp	r3, r0
 8010a0c:	d304      	bcc.n	8010a18 <ip4_reass+0x1ac>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010a0e:	4b18      	ldr	r3, [pc, #96]	; (8010a70 <ip4_reass+0x204>)
 8010a10:	8818      	ldrh	r0, [r3, #0]
 8010a12:	1b00      	subs	r0, r0, r4
 8010a14:	8018      	strh	r0, [r3, #0]
    return p;
 8010a16:	e00e      	b.n	8010a36 <ip4_reass+0x1ca>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010a18:	4b17      	ldr	r3, [pc, #92]	; (8010a78 <ip4_reass+0x20c>)
 8010a1a:	f240 229b 	movw	r2, #667	; 0x29b
 8010a1e:	4917      	ldr	r1, [pc, #92]	; (8010a7c <ip4_reass+0x210>)
 8010a20:	4817      	ldr	r0, [pc, #92]	; (8010a80 <ip4_reass+0x214>)
 8010a22:	f004 fa0f 	bl	8014e44 <iprintf>
 8010a26:	e7f2      	b.n	8010a0e <ip4_reass+0x1a2>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010a28:	b144      	cbz	r4, 8010a3c <ip4_reass+0x1d0>
  if (ipr->p == NULL) {
 8010a2a:	6863      	ldr	r3, [r4, #4]
 8010a2c:	b173      	cbz	r3, 8010a4c <ip4_reass+0x1e0>
  pbuf_free(p);
 8010a2e:	4638      	mov	r0, r7
 8010a30:	f7f7 fe90 	bl	8008754 <pbuf_free>
  return NULL;
 8010a34:	2600      	movs	r6, #0
}
 8010a36:	4630      	mov	r0, r6
 8010a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010a3c:	4b0e      	ldr	r3, [pc, #56]	; (8010a78 <ip4_reass+0x20c>)
 8010a3e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8010a42:	4910      	ldr	r1, [pc, #64]	; (8010a84 <ip4_reass+0x218>)
 8010a44:	480e      	ldr	r0, [pc, #56]	; (8010a80 <ip4_reass+0x214>)
 8010a46:	f004 f9fd 	bl	8014e44 <iprintf>
 8010a4a:	e7ee      	b.n	8010a2a <ip4_reass+0x1be>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010a4c:	4b09      	ldr	r3, [pc, #36]	; (8010a74 <ip4_reass+0x208>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	42a3      	cmp	r3, r4
 8010a52:	d006      	beq.n	8010a62 <ip4_reass+0x1f6>
 8010a54:	4b08      	ldr	r3, [pc, #32]	; (8010a78 <ip4_reass+0x20c>)
 8010a56:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010a5a:	490b      	ldr	r1, [pc, #44]	; (8010a88 <ip4_reass+0x21c>)
 8010a5c:	4808      	ldr	r0, [pc, #32]	; (8010a80 <ip4_reass+0x214>)
 8010a5e:	f004 f9f1 	bl	8014e44 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010a62:	2100      	movs	r1, #0
 8010a64:	4620      	mov	r0, r4
 8010a66:	f7ff fccd 	bl	8010404 <ip_reass_dequeue_datagram>
 8010a6a:	e7e0      	b.n	8010a2e <ip4_reass+0x1c2>
  return NULL;
 8010a6c:	2600      	movs	r6, #0
 8010a6e:	e7e2      	b.n	8010a36 <ip4_reass+0x1ca>
 8010a70:	20001892 	.word	0x20001892
 8010a74:	20001894 	.word	0x20001894
 8010a78:	0801893c 	.word	0x0801893c
 8010a7c:	08018868 	.word	0x08018868
 8010a80:	08015d2c 	.word	0x08015d2c
 8010a84:	08018884 	.word	0x08018884
 8010a88:	08018890 	.word	0x08018890

08010a8c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a90:	b08b      	sub	sp, #44	; 0x2c
 8010a92:	4606      	mov	r6, r0
 8010a94:	9106      	str	r1, [sp, #24]
 8010a96:	9208      	str	r2, [sp, #32]
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010a98:	f8b1 30d0 	ldrh.w	r3, [r1, #208]	; 0xd0
 8010a9c:	3b14      	subs	r3, #20
 8010a9e:	d44e      	bmi.n	8010b3e <ip4_frag+0xb2>
 8010aa0:	f3c3 03cf 	ubfx	r3, r3, #3, #16
 8010aa4:	9304      	str	r3, [sp, #16]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010aa6:	f8d6 9004 	ldr.w	r9, [r6, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010aaa:	f899 3000 	ldrb.w	r3, [r9]
 8010aae:	f003 030f 	and.w	r3, r3, #15
 8010ab2:	2b05      	cmp	r3, #5
 8010ab4:	f040 80d2 	bne.w	8010c5c <ip4_frag+0x1d0>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010ab8:	8973      	ldrh	r3, [r6, #10]
 8010aba:	2b13      	cmp	r3, #19
 8010abc:	d941      	bls.n	8010b42 <ip4_frag+0xb6>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010abe:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 8010ac2:	f7f6 fb85 	bl	80071d0 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 8010ac6:	f3c0 030c 	ubfx	r3, r0, #0, #13
 8010aca:	9305      	str	r3, [sp, #20]
 8010acc:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 8010ad0:	9309      	str	r3, [sp, #36]	; 0x24
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010ad2:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 8010ad6:	f1aa 0a14 	sub.w	sl, sl, #20
 8010ada:	fa1f fb8a 	uxth.w	fp, sl
  u16_t poff = IP_HLEN;
 8010ade:	2714      	movs	r7, #20
  u16_t newpbuflen = 0;
 8010ae0:	2400      	movs	r4, #0

  while (left) {
 8010ae2:	f1bb 0f00 	cmp.w	fp, #0
 8010ae6:	f000 80b7 	beq.w	8010c58 <ip4_frag+0x1cc>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010aea:	9b04      	ldr	r3, [sp, #16]
 8010aec:	00db      	lsls	r3, r3, #3
 8010aee:	b29b      	uxth	r3, r3
 8010af0:	455b      	cmp	r3, fp
 8010af2:	bf28      	it	cs
 8010af4:	465b      	movcs	r3, fp
 8010af6:	9303      	str	r3, [sp, #12]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010af8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010afc:	2114      	movs	r1, #20
 8010afe:	200e      	movs	r0, #14
 8010b00:	f7f7 fe8a 	bl	8008818 <pbuf_alloc>
    if (rambuf == NULL) {
 8010b04:	4682      	mov	sl, r0
 8010b06:	2800      	cmp	r0, #0
 8010b08:	f000 80ab 	beq.w	8010c62 <ip4_frag+0x1d6>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010b0c:	8943      	ldrh	r3, [r0, #10]
 8010b0e:	2b13      	cmp	r3, #19
 8010b10:	d921      	bls.n	8010b56 <ip4_frag+0xca>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010b12:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010b16:	f8d9 2000 	ldr.w	r2, [r9]
 8010b1a:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8010b1e:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8010b22:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8010b26:	601a      	str	r2, [r3, #0]
 8010b28:	605d      	str	r5, [r3, #4]
 8010b2a:	6098      	str	r0, [r3, #8]
 8010b2c:	60d9      	str	r1, [r3, #12]
 8010b2e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010b32:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010b34:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010b38:	9307      	str	r3, [sp, #28]

    left_to_copy = fragsize;
 8010b3a:	9d03      	ldr	r5, [sp, #12]
    while (left_to_copy) {
 8010b3c:	e03c      	b.n	8010bb8 <ip4_frag+0x12c>
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010b3e:	3307      	adds	r3, #7
 8010b40:	e7ae      	b.n	8010aa0 <ip4_frag+0x14>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010b42:	4b49      	ldr	r3, [pc, #292]	; (8010c68 <ip4_frag+0x1dc>)
 8010b44:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010b48:	4948      	ldr	r1, [pc, #288]	; (8010c6c <ip4_frag+0x1e0>)
 8010b4a:	4849      	ldr	r0, [pc, #292]	; (8010c70 <ip4_frag+0x1e4>)
 8010b4c:	f004 f97a 	bl	8014e44 <iprintf>
 8010b50:	f06f 0005 	mvn.w	r0, #5
 8010b54:	e043      	b.n	8010bde <ip4_frag+0x152>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010b56:	4b44      	ldr	r3, [pc, #272]	; (8010c68 <ip4_frag+0x1dc>)
 8010b58:	f240 3225 	movw	r2, #805	; 0x325
 8010b5c:	4945      	ldr	r1, [pc, #276]	; (8010c74 <ip4_frag+0x1e8>)
 8010b5e:	4844      	ldr	r0, [pc, #272]	; (8010c70 <ip4_frag+0x1e4>)
 8010b60:	f004 f970 	bl	8014e44 <iprintf>
 8010b64:	e7d5      	b.n	8010b12 <ip4_frag+0x86>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010b66:	4b40      	ldr	r3, [pc, #256]	; (8010c68 <ip4_frag+0x1dc>)
 8010b68:	f240 322d 	movw	r2, #813	; 0x32d
 8010b6c:	4942      	ldr	r1, [pc, #264]	; (8010c78 <ip4_frag+0x1ec>)
 8010b6e:	4840      	ldr	r0, [pc, #256]	; (8010c70 <ip4_frag+0x1e4>)
 8010b70:	f004 f968 	bl	8014e44 <iprintf>
 8010b74:	e026      	b.n	8010bc4 <ip4_frag+0x138>
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010b76:	f7ff fe2b 	bl	80107d0 <ip_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 8010b7a:	4680      	mov	r8, r0
 8010b7c:	b350      	cbz	r0, 8010bd4 <ip4_frag+0x148>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010b7e:	6873      	ldr	r3, [r6, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010b80:	443b      	add	r3, r7
 8010b82:	9401      	str	r4, [sp, #4]
 8010b84:	9300      	str	r3, [sp, #0]
 8010b86:	4603      	mov	r3, r0
 8010b88:	2241      	movs	r2, #65	; 0x41
 8010b8a:	4621      	mov	r1, r4
 8010b8c:	2000      	movs	r0, #0
 8010b8e:	f7f7 fd73 	bl	8008678 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 8010b92:	9002      	str	r0, [sp, #8]
 8010b94:	b330      	cbz	r0, 8010be4 <ip4_frag+0x158>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8010b96:	4630      	mov	r0, r6
 8010b98:	f7f7 ff4a 	bl	8008a30 <pbuf_ref>
      pcr->original = p;
 8010b9c:	f8c8 6014 	str.w	r6, [r8, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010ba0:	4b36      	ldr	r3, [pc, #216]	; (8010c7c <ip4_frag+0x1f0>)
 8010ba2:	f8c8 3010 	str.w	r3, [r8, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010ba6:	9902      	ldr	r1, [sp, #8]
 8010ba8:	4650      	mov	r0, sl
 8010baa:	f7f7 ff59 	bl	8008a60 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010bae:	1b2d      	subs	r5, r5, r4
 8010bb0:	b2ad      	uxth	r5, r5
      if (left_to_copy) {
 8010bb2:	b10d      	cbz	r5, 8010bb8 <ip4_frag+0x12c>
        poff = 0;
        p = p->next;
 8010bb4:	6836      	ldr	r6, [r6, #0]
        poff = 0;
 8010bb6:	2700      	movs	r7, #0
    while (left_to_copy) {
 8010bb8:	b1ed      	cbz	r5, 8010bf6 <ip4_frag+0x16a>
      u16_t plen = (u16_t)(p->len - poff);
 8010bba:	8973      	ldrh	r3, [r6, #10]
 8010bbc:	1bdc      	subs	r4, r3, r7
 8010bbe:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010bc0:	42bb      	cmp	r3, r7
 8010bc2:	d3d0      	bcc.n	8010b66 <ip4_frag+0xda>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010bc4:	42ac      	cmp	r4, r5
 8010bc6:	bf28      	it	cs
 8010bc8:	462c      	movcs	r4, r5
      if (!newpbuflen) {
 8010bca:	2c00      	cmp	r4, #0
 8010bcc:	d1d3      	bne.n	8010b76 <ip4_frag+0xea>
        p = p->next;
 8010bce:	6836      	ldr	r6, [r6, #0]
        poff = 0;
 8010bd0:	4627      	mov	r7, r4
        continue;
 8010bd2:	e7f1      	b.n	8010bb8 <ip4_frag+0x12c>
 8010bd4:	4650      	mov	r0, sl
        pbuf_free(rambuf);
 8010bd6:	f7f7 fdbd 	bl	8008754 <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010bda:	f04f 30ff 	mov.w	r0, #4294967295
}
 8010bde:	b00b      	add	sp, #44	; 0x2c
 8010be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 8010be4:	4640      	mov	r0, r8
 8010be6:	f7ff fceb 	bl	80105c0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010bea:	4650      	mov	r0, sl
 8010bec:	f7f7 fdb2 	bl	8008754 <pbuf_free>
  return ERR_MEM;
 8010bf0:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 8010bf4:	e7f3      	b.n	8010bde <ip4_frag+0x152>
    poff = (u16_t)(poff + newpbuflen);
 8010bf6:	4427      	add	r7, r4
 8010bf8:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 8010bfa:	9b06      	ldr	r3, [sp, #24]
 8010bfc:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8010c00:	3b14      	subs	r3, #20
    tmp = (IP_OFFMASK & (ofo));
 8010c02:	9a05      	ldr	r2, [sp, #20]
 8010c04:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 8010c08:	459b      	cmp	fp, r3
 8010c0a:	dc01      	bgt.n	8010c10 <ip4_frag+0x184>
 8010c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c0e:	b10b      	cbz	r3, 8010c14 <ip4_frag+0x188>
      tmp = tmp | IP_MF;
 8010c10:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010c14:	f7f6 fadc 	bl	80071d0 <lwip_htons>
 8010c18:	9d07      	ldr	r5, [sp, #28]
 8010c1a:	80e8      	strh	r0, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010c1c:	9b03      	ldr	r3, [sp, #12]
 8010c1e:	f103 0014 	add.w	r0, r3, #20
 8010c22:	b280      	uxth	r0, r0
 8010c24:	f7f6 fad4 	bl	80071d0 <lwip_htons>
 8010c28:	8068      	strh	r0, [r5, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	72ab      	strb	r3, [r5, #10]
 8010c2e:	72eb      	strb	r3, [r5, #11]
    netif->output(netif, rambuf, dest);
 8010c30:	9806      	ldr	r0, [sp, #24]
 8010c32:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 8010c36:	9a08      	ldr	r2, [sp, #32]
 8010c38:	4651      	mov	r1, sl
 8010c3a:	4798      	blx	r3
    pbuf_free(rambuf);
 8010c3c:	4650      	mov	r0, sl
 8010c3e:	f7f7 fd89 	bl	8008754 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010c42:	9b03      	ldr	r3, [sp, #12]
 8010c44:	ebab 0b03 	sub.w	fp, fp, r3
 8010c48:	fa1f fb8b 	uxth.w	fp, fp
    ofo = (u16_t)(ofo + nfb);
 8010c4c:	9b05      	ldr	r3, [sp, #20]
 8010c4e:	9a04      	ldr	r2, [sp, #16]
 8010c50:	4413      	add	r3, r2
 8010c52:	b29b      	uxth	r3, r3
 8010c54:	9305      	str	r3, [sp, #20]
 8010c56:	e744      	b.n	8010ae2 <ip4_frag+0x56>
  return ERR_OK;
 8010c58:	2000      	movs	r0, #0
 8010c5a:	e7c0      	b.n	8010bde <ip4_frag+0x152>
    return ERR_VAL;
 8010c5c:	f06f 0005 	mvn.w	r0, #5
 8010c60:	e7bd      	b.n	8010bde <ip4_frag+0x152>
  return ERR_MEM;
 8010c62:	f04f 30ff 	mov.w	r0, #4294967295
 8010c66:	e7ba      	b.n	8010bde <ip4_frag+0x152>
 8010c68:	0801893c 	.word	0x0801893c
 8010c6c:	0801881c 	.word	0x0801881c
 8010c70:	08015d2c 	.word	0x08015d2c
 8010c74:	08018838 	.word	0x08018838
 8010c78:	08018858 	.word	0x08018858
 8010c7c:	080105ed 	.word	0x080105ed

08010c80 <ethip6_output>:
 * @return
 * - ERR_OK or the return value of @ref nd6_get_next_hop_addr_or_queue.
 */
err_t
ethip6_output(struct netif *netif, struct pbuf *q, const ip6_addr_t *ip6addr)
{
 8010c80:	b530      	push	{r4, r5, lr}
 8010c82:	b087      	sub	sp, #28
 8010c84:	4604      	mov	r4, r0
 8010c86:	460d      	mov	r5, r1

  /* The destination IP address must be properly zoned from here on down. */
  IP6_ADDR_ZONECHECK_NETIF(ip6addr, netif);

  /* multicast destination IP address? */
  if (ip6_addr_ismulticast(ip6addr)) {
 8010c88:	7813      	ldrb	r3, [r2, #0]
 8010c8a:	2bff      	cmp	r3, #255	; 0xff
 8010c8c:	d017      	beq.n	8010cbe <ethip6_output+0x3e>

  /* We have a unicast destination IP address */
  /* @todo anycast? */

  /* Ask ND6 what to do with the packet. */
  result = nd6_get_next_hop_addr_or_queue(netif, q, ip6addr, &hwaddr);
 8010c8e:	ab03      	add	r3, sp, #12
 8010c90:	f003 fe34 	bl	80148fc <nd6_get_next_hop_addr_or_queue>
  if (result != ERR_OK) {
 8010c94:	4603      	mov	r3, r0
 8010c96:	bb60      	cbnz	r0, 8010cf2 <ethip6_output+0x72>
    return result;
  }

  /* If no hardware address is returned, nd6 has queued the packet for later. */
  if (hwaddr == NULL) {
 8010c98:	9a03      	ldr	r2, [sp, #12]
 8010c9a:	b352      	cbz	r2, 8010cf2 <ethip6_output+0x72>
    return ERR_OK;
  }

  /* Send out the packet using the returned hardware address. */
  SMEMCPY(dest.addr, hwaddr, 6);
 8010c9c:	6810      	ldr	r0, [r2, #0]
 8010c9e:	9004      	str	r0, [sp, #16]
 8010ca0:	8893      	ldrh	r3, [r2, #4]
 8010ca2:	f8ad 3014 	strh.w	r3, [sp, #20]
  return ethernet_output(netif, q, (const struct eth_addr*)(netif->hwaddr), &dest, ETHTYPE_IPV6);
 8010ca6:	f248 63dd 	movw	r3, #34525	; 0x86dd
 8010caa:	9300      	str	r3, [sp, #0]
 8010cac:	ab04      	add	r3, sp, #16
 8010cae:	f104 02d4 	add.w	r2, r4, #212	; 0xd4
 8010cb2:	4629      	mov	r1, r5
 8010cb4:	4620      	mov	r0, r4
 8010cb6:	f004 f80d 	bl	8014cd4 <ethernet_output>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	e019      	b.n	8010cf2 <ethip6_output+0x72>
    dest.addr[0] = 0x33;
 8010cbe:	2333      	movs	r3, #51	; 0x33
 8010cc0:	f88d 3010 	strb.w	r3, [sp, #16]
    dest.addr[1] = 0x33;
 8010cc4:	f88d 3011 	strb.w	r3, [sp, #17]
    dest.addr[2] = ((const u8_t *)(&(ip6addr->addr[3])))[0];
 8010cc8:	7b13      	ldrb	r3, [r2, #12]
 8010cca:	f88d 3012 	strb.w	r3, [sp, #18]
    dest.addr[3] = ((const u8_t *)(&(ip6addr->addr[3])))[1];
 8010cce:	7b53      	ldrb	r3, [r2, #13]
 8010cd0:	f88d 3013 	strb.w	r3, [sp, #19]
    dest.addr[4] = ((const u8_t *)(&(ip6addr->addr[3])))[2];
 8010cd4:	7b93      	ldrb	r3, [r2, #14]
 8010cd6:	f88d 3014 	strb.w	r3, [sp, #20]
    dest.addr[5] = ((const u8_t *)(&(ip6addr->addr[3])))[3];
 8010cda:	7bd3      	ldrb	r3, [r2, #15]
 8010cdc:	f88d 3015 	strb.w	r3, [sp, #21]
    return ethernet_output(netif, q, (const struct eth_addr*)(netif->hwaddr), &dest, ETHTYPE_IPV6);
 8010ce0:	f248 63dd 	movw	r3, #34525	; 0x86dd
 8010ce4:	9300      	str	r3, [sp, #0]
 8010ce6:	ab04      	add	r3, sp, #16
 8010ce8:	f100 02d4 	add.w	r2, r0, #212	; 0xd4
 8010cec:	f003 fff2 	bl	8014cd4 <ethernet_output>
 8010cf0:	4603      	mov	r3, r0
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	b007      	add	sp, #28
 8010cf6:	bd30      	pop	{r4, r5, pc}

08010cf8 <icmp6_send_response_with_addrs_and_netif>:
 * @param netif netif to send the packet
 */
static void
icmp6_send_response_with_addrs_and_netif(struct pbuf *p, u8_t code, u32_t data, u8_t type,
    const ip6_addr_t *reply_src, const ip6_addr_t *reply_dest, struct netif *netif)
{
 8010cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010cfc:	b085      	sub	sp, #20
 8010cfe:	4606      	mov	r6, r0
 8010d00:	4688      	mov	r8, r1
 8010d02:	4617      	mov	r7, r2
 8010d04:	4699      	mov	r9, r3
  struct pbuf *q;
  struct icmp6_hdr *icmp6hdr;

  /* ICMPv6 header + IPv6 header + data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp6_hdr) + IP6_HLEN + LWIP_ICMP6_DATASIZE,
 8010d06:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010d0a:	2138      	movs	r1, #56	; 0x38
 8010d0c:	2036      	movs	r0, #54	; 0x36
 8010d0e:	f7f7 fd83 	bl	8008818 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8010d12:	b380      	cbz	r0, 8010d76 <icmp6_send_response_with_addrs_and_netif+0x7e>
 8010d14:	4604      	mov	r4, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMPv6 packet.\n"));
    ICMP6_STATS_INC(icmp6.memerr);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp 6message",
 8010d16:	8943      	ldrh	r3, [r0, #10]
 8010d18:	2b37      	cmp	r3, #55	; 0x37
 8010d1a:	d92f      	bls.n	8010d7c <icmp6_send_response_with_addrs_and_netif+0x84>
             (q->len >= (sizeof(struct icmp6_hdr) + IP6_HLEN + LWIP_ICMP6_DATASIZE)));

  icmp6hdr = (struct icmp6_hdr *)q->payload;
 8010d1c:	6865      	ldr	r5, [r4, #4]
  icmp6hdr->type = type;
 8010d1e:	f885 9000 	strb.w	r9, [r5]
  icmp6hdr->code = code;
 8010d22:	f885 8001 	strb.w	r8, [r5, #1]
  icmp6hdr->data = lwip_htonl(data);
 8010d26:	4638      	mov	r0, r7
 8010d28:	f7f6 fa57 	bl	80071da <lwip_htonl>
 8010d2c:	6068      	str	r0, [r5, #4]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp6_hdr), (u8_t *)p->payload,
 8010d2e:	6863      	ldr	r3, [r4, #4]
 8010d30:	6871      	ldr	r1, [r6, #4]
 8010d32:	460a      	mov	r2, r1
 8010d34:	3308      	adds	r3, #8
 8010d36:	3130      	adds	r1, #48	; 0x30
 8010d38:	f8d2 c000 	ldr.w	ip, [r2]
 8010d3c:	6857      	ldr	r7, [r2, #4]
 8010d3e:	6896      	ldr	r6, [r2, #8]
 8010d40:	68d0      	ldr	r0, [r2, #12]
 8010d42:	f8c3 c000 	str.w	ip, [r3]
 8010d46:	605f      	str	r7, [r3, #4]
 8010d48:	609e      	str	r6, [r3, #8]
 8010d4a:	60d8      	str	r0, [r3, #12]
 8010d4c:	3210      	adds	r2, #16
 8010d4e:	3310      	adds	r3, #16
 8010d50:	428a      	cmp	r2, r1
 8010d52:	d1f1      	bne.n	8010d38 <icmp6_send_response_with_addrs_and_netif+0x40>
          IP6_HLEN + LWIP_ICMP6_DATASIZE);

  /* calculate checksum */
  icmp6hdr->chksum = 0;
 8010d54:	2300      	movs	r3, #0
 8010d56:	70ab      	strb	r3, [r5, #2]
 8010d58:	70eb      	strb	r3, [r5, #3]
      reply_src, reply_dest);
  }
#endif /* CHECKSUM_GEN_ICMP6 */

  ICMP6_STATS_INC(icmp6.xmit);
  ip6_output_if(q, reply_src, reply_dest, LWIP_ICMP6_HL, 0, IP6_NEXTH_ICMP6, netif);
 8010d5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d5c:	9202      	str	r2, [sp, #8]
 8010d5e:	223a      	movs	r2, #58	; 0x3a
 8010d60:	9201      	str	r2, [sp, #4]
 8010d62:	9300      	str	r3, [sp, #0]
 8010d64:	23ff      	movs	r3, #255	; 0xff
 8010d66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d68:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010d6a:	4620      	mov	r0, r4
 8010d6c:	f000 fed2 	bl	8011b14 <ip6_output_if>
  pbuf_free(q);
 8010d70:	4620      	mov	r0, r4
 8010d72:	f7f7 fcef 	bl	8008754 <pbuf_free>
}
 8010d76:	b005      	add	sp, #20
 8010d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp 6message",
 8010d7c:	4b03      	ldr	r3, [pc, #12]	; (8010d8c <icmp6_send_response_with_addrs_and_netif+0x94>)
 8010d7e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8010d82:	4903      	ldr	r1, [pc, #12]	; (8010d90 <icmp6_send_response_with_addrs_and_netif+0x98>)
 8010d84:	4803      	ldr	r0, [pc, #12]	; (8010d94 <icmp6_send_response_with_addrs_and_netif+0x9c>)
 8010d86:	f004 f85d 	bl	8014e44 <iprintf>
 8010d8a:	e7c7      	b.n	8010d1c <icmp6_send_response_with_addrs_and_netif+0x24>
 8010d8c:	08018a54 	.word	0x08018a54
 8010d90:	08018a8c 	.word	0x08018a8c
 8010d94:	08015d2c 	.word	0x08015d2c

08010d98 <icmp6_send_response>:
{
 8010d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d9c:	b084      	sub	sp, #16
 8010d9e:	4605      	mov	r5, r0
 8010da0:	460e      	mov	r6, r1
 8010da2:	4617      	mov	r7, r2
 8010da4:	4698      	mov	r8, r3
  struct netif *netif = ip_current_netif();
 8010da6:	4b0e      	ldr	r3, [pc, #56]	; (8010de0 <icmp6_send_response+0x48>)
 8010da8:	681c      	ldr	r4, [r3, #0]
  LWIP_ASSERT("icmpv6 packet not a direct response", netif != NULL);
 8010daa:	b18c      	cbz	r4, 8010dd0 <icmp6_send_response+0x38>
  reply_src = ip_2_ip6(ip6_select_source_address(netif, reply_dest));
 8010dac:	490d      	ldr	r1, [pc, #52]	; (8010de4 <icmp6_send_response+0x4c>)
 8010dae:	4620      	mov	r0, r4
 8010db0:	f000 fa74 	bl	801129c <ip6_select_source_address>
  if (reply_src == NULL) {
 8010db4:	b148      	cbz	r0, 8010dca <icmp6_send_response+0x32>
  icmp6_send_response_with_addrs_and_netif(p, code, data, type, reply_src, reply_dest, netif);
 8010db6:	9402      	str	r4, [sp, #8]
 8010db8:	4a0a      	ldr	r2, [pc, #40]	; (8010de4 <icmp6_send_response+0x4c>)
 8010dba:	9201      	str	r2, [sp, #4]
 8010dbc:	9000      	str	r0, [sp, #0]
 8010dbe:	4643      	mov	r3, r8
 8010dc0:	463a      	mov	r2, r7
 8010dc2:	4631      	mov	r1, r6
 8010dc4:	4628      	mov	r0, r5
 8010dc6:	f7ff ff97 	bl	8010cf8 <icmp6_send_response_with_addrs_and_netif>
}
 8010dca:	b004      	add	sp, #16
 8010dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("icmpv6 packet not a direct response", netif != NULL);
 8010dd0:	4b05      	ldr	r3, [pc, #20]	; (8010de8 <icmp6_send_response+0x50>)
 8010dd2:	f44f 729d 	mov.w	r2, #314	; 0x13a
 8010dd6:	4905      	ldr	r1, [pc, #20]	; (8010dec <icmp6_send_response+0x54>)
 8010dd8:	4805      	ldr	r0, [pc, #20]	; (8010df0 <icmp6_send_response+0x58>)
 8010dda:	f004 f833 	bl	8014e44 <iprintf>
 8010dde:	e7e5      	b.n	8010dac <icmp6_send_response+0x14>
 8010de0:	20004bac 	.word	0x20004bac
 8010de4:	20004bc0 	.word	0x20004bc0
 8010de8:	08018a54 	.word	0x08018a54
 8010dec:	08018a04 	.word	0x08018a04
 8010df0:	08015d2c 	.word	0x08015d2c

08010df4 <icmp6_send_response_with_addrs>:
{
 8010df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010df8:	b085      	sub	sp, #20
 8010dfa:	4606      	mov	r6, r0
 8010dfc:	460f      	mov	r7, r1
 8010dfe:	4690      	mov	r8, r2
 8010e00:	4699      	mov	r9, r3
 8010e02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010e04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("must provide both source and destination", src_addr != NULL);
 8010e06:	b18d      	cbz	r5, 8010e2c <icmp6_send_response_with_addrs+0x38>
  LWIP_ASSERT("must provide both source and destination", dest_addr != NULL);
 8010e08:	b1c4      	cbz	r4, 8010e3c <icmp6_send_response_with_addrs+0x48>
  netif = ip6_route(reply_src, reply_dest);
 8010e0a:	4629      	mov	r1, r5
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	f000 f8f5 	bl	8010ffc <ip6_route>
  if (netif == NULL) {
 8010e12:	b140      	cbz	r0, 8010e26 <icmp6_send_response_with_addrs+0x32>
  icmp6_send_response_with_addrs_and_netif(p, code, data, type, reply_src,
 8010e14:	9002      	str	r0, [sp, #8]
 8010e16:	9501      	str	r5, [sp, #4]
 8010e18:	9400      	str	r4, [sp, #0]
 8010e1a:	464b      	mov	r3, r9
 8010e1c:	4642      	mov	r2, r8
 8010e1e:	4639      	mov	r1, r7
 8010e20:	4630      	mov	r0, r6
 8010e22:	f7ff ff69 	bl	8010cf8 <icmp6_send_response_with_addrs_and_netif>
}
 8010e26:	b005      	add	sp, #20
 8010e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("must provide both source and destination", src_addr != NULL);
 8010e2c:	4b07      	ldr	r3, [pc, #28]	; (8010e4c <icmp6_send_response_with_addrs+0x58>)
 8010e2e:	f240 1261 	movw	r2, #353	; 0x161
 8010e32:	4907      	ldr	r1, [pc, #28]	; (8010e50 <icmp6_send_response_with_addrs+0x5c>)
 8010e34:	4807      	ldr	r0, [pc, #28]	; (8010e54 <icmp6_send_response_with_addrs+0x60>)
 8010e36:	f004 f805 	bl	8014e44 <iprintf>
 8010e3a:	e7e5      	b.n	8010e08 <icmp6_send_response_with_addrs+0x14>
  LWIP_ASSERT("must provide both source and destination", dest_addr != NULL);
 8010e3c:	4b03      	ldr	r3, [pc, #12]	; (8010e4c <icmp6_send_response_with_addrs+0x58>)
 8010e3e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8010e42:	4903      	ldr	r1, [pc, #12]	; (8010e50 <icmp6_send_response_with_addrs+0x5c>)
 8010e44:	4803      	ldr	r0, [pc, #12]	; (8010e54 <icmp6_send_response_with_addrs+0x60>)
 8010e46:	f003 fffd 	bl	8014e44 <iprintf>
 8010e4a:	e7de      	b.n	8010e0a <icmp6_send_response_with_addrs+0x16>
 8010e4c:	08018a54 	.word	0x08018a54
 8010e50:	08018a28 	.word	0x08018a28
 8010e54:	08015d2c 	.word	0x08015d2c

08010e58 <icmp6_input>:
{
 8010e58:	b570      	push	{r4, r5, r6, lr}
 8010e5a:	b084      	sub	sp, #16
 8010e5c:	4604      	mov	r4, r0
  if (p->len < sizeof(struct icmp6_hdr)) {
 8010e5e:	8943      	ldrh	r3, [r0, #10]
 8010e60:	2b07      	cmp	r3, #7
 8010e62:	d934      	bls.n	8010ece <icmp6_input+0x76>
 8010e64:	460d      	mov	r5, r1
  icmp6hdr = (struct icmp6_hdr *)p->payload;
 8010e66:	6843      	ldr	r3, [r0, #4]
  switch (icmp6hdr->type) {
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	2b84      	cmp	r3, #132	; 0x84
 8010e6c:	d833      	bhi.n	8010ed6 <icmp6_input+0x7e>
 8010e6e:	2b82      	cmp	r3, #130	; 0x82
 8010e70:	d239      	bcs.n	8010ee6 <icmp6_input+0x8e>
 8010e72:	2b02      	cmp	r3, #2
 8010e74:	d032      	beq.n	8010edc <icmp6_input+0x84>
 8010e76:	2b80      	cmp	r3, #128	; 0x80
 8010e78:	d125      	bne.n	8010ec6 <icmp6_input+0x6e>
    if (ip6_addr_ismulticast(ip6_current_dest_addr())) {
 8010e7a:	4b23      	ldr	r3, [pc, #140]	; (8010f08 <icmp6_input+0xb0>)
 8010e7c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010e80:	2bff      	cmp	r3, #255	; 0xff
 8010e82:	d033      	beq.n	8010eec <icmp6_input+0x94>
    r = pbuf_alloc(PBUF_IP, p->tot_len, PBUF_RAM);
 8010e84:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010e88:	8901      	ldrh	r1, [r0, #8]
 8010e8a:	2036      	movs	r0, #54	; 0x36
 8010e8c:	f7f7 fcc4 	bl	8008818 <pbuf_alloc>
    if (r == NULL) {
 8010e90:	4606      	mov	r6, r0
 8010e92:	b370      	cbz	r0, 8010ef2 <icmp6_input+0x9a>
    if (pbuf_copy(r, p) != ERR_OK) {
 8010e94:	4621      	mov	r1, r4
 8010e96:	f7f7 fe25 	bl	8008ae4 <pbuf_copy>
 8010e9a:	bb70      	cbnz	r0, 8010efa <icmp6_input+0xa2>
    ((struct icmp6_echo_hdr *)(r->payload))->type = ICMP6_TYPE_EREP;
 8010e9c:	6873      	ldr	r3, [r6, #4]
 8010e9e:	2281      	movs	r2, #129	; 0x81
 8010ea0:	701a      	strb	r2, [r3, #0]
    ((struct icmp6_echo_hdr *)(r->payload))->chksum = 0;
 8010ea2:	6872      	ldr	r2, [r6, #4]
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	7093      	strb	r3, [r2, #2]
 8010ea8:	70d3      	strb	r3, [r2, #3]
    ip6_output_if(r, reply_src, ip6_current_src_addr(),
 8010eaa:	4918      	ldr	r1, [pc, #96]	; (8010f0c <icmp6_input+0xb4>)
 8010eac:	9502      	str	r5, [sp, #8]
 8010eae:	223a      	movs	r2, #58	; 0x3a
 8010eb0:	9201      	str	r2, [sp, #4]
 8010eb2:	9300      	str	r3, [sp, #0]
 8010eb4:	23ff      	movs	r3, #255	; 0xff
 8010eb6:	460a      	mov	r2, r1
 8010eb8:	3118      	adds	r1, #24
 8010eba:	4630      	mov	r0, r6
 8010ebc:	f000 fe2a 	bl	8011b14 <ip6_output_if>
    pbuf_free(r);
 8010ec0:	4630      	mov	r0, r6
 8010ec2:	f7f7 fc47 	bl	8008754 <pbuf_free>
  pbuf_free(p);
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	f7f7 fc44 	bl	8008754 <pbuf_free>
 8010ecc:	e001      	b.n	8010ed2 <icmp6_input+0x7a>
    pbuf_free(p);
 8010ece:	f7f7 fc41 	bl	8008754 <pbuf_free>
}
 8010ed2:	b004      	add	sp, #16
 8010ed4:	bd70      	pop	{r4, r5, r6, pc}
  switch (icmp6hdr->type) {
 8010ed6:	3b86      	subs	r3, #134	; 0x86
 8010ed8:	2b03      	cmp	r3, #3
 8010eda:	d8f4      	bhi.n	8010ec6 <icmp6_input+0x6e>
    nd6_input(p, inp);
 8010edc:	4629      	mov	r1, r5
 8010ede:	4620      	mov	r0, r4
 8010ee0:	f002 fdd4 	bl	8013a8c <nd6_input>
    return;
 8010ee4:	e7f5      	b.n	8010ed2 <icmp6_input+0x7a>
    mld6_input(p, inp);
 8010ee6:	f001 fb5d 	bl	80125a4 <mld6_input>
    return;
 8010eea:	e7f2      	b.n	8010ed2 <icmp6_input+0x7a>
      pbuf_free(p);
 8010eec:	f7f7 fc32 	bl	8008754 <pbuf_free>
      return;
 8010ef0:	e7ef      	b.n	8010ed2 <icmp6_input+0x7a>
      pbuf_free(p);
 8010ef2:	4620      	mov	r0, r4
 8010ef4:	f7f7 fc2e 	bl	8008754 <pbuf_free>
      return;
 8010ef8:	e7eb      	b.n	8010ed2 <icmp6_input+0x7a>
      pbuf_free(p);
 8010efa:	4620      	mov	r0, r4
 8010efc:	f7f7 fc2a 	bl	8008754 <pbuf_free>
      pbuf_free(r);
 8010f00:	4630      	mov	r0, r6
 8010f02:	f7f7 fc27 	bl	8008754 <pbuf_free>
      return;
 8010f06:	e7e4      	b.n	8010ed2 <icmp6_input+0x7a>
 8010f08:	20004bac 	.word	0x20004bac
 8010f0c:	20004bc0 	.word	0x20004bc0

08010f10 <icmp6_dest_unreach>:
{
 8010f10:	b508      	push	{r3, lr}
  icmp6_send_response(p, c, 0, ICMP6_TYPE_DUR);
 8010f12:	2301      	movs	r3, #1
 8010f14:	2200      	movs	r2, #0
 8010f16:	f7ff ff3f 	bl	8010d98 <icmp6_send_response>
}
 8010f1a:	bd08      	pop	{r3, pc}

08010f1c <icmp6_time_exceeded_with_addrs>:
{
 8010f1c:	b500      	push	{lr}
 8010f1e:	b083      	sub	sp, #12
  icmp6_send_response_with_addrs(p, c, 0, ICMP6_TYPE_TE, src_addr, dest_addr);
 8010f20:	9301      	str	r3, [sp, #4]
 8010f22:	9200      	str	r2, [sp, #0]
 8010f24:	2303      	movs	r3, #3
 8010f26:	2200      	movs	r2, #0
 8010f28:	f7ff ff64 	bl	8010df4 <icmp6_send_response_with_addrs>
}
 8010f2c:	b003      	add	sp, #12
 8010f2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010f34 <icmp6_param_problem>:
{
 8010f34:	b510      	push	{r4, lr}
  u32_t pointer_u32 = (u32_t)((const u8_t *)pointer - (const u8_t *)ip6_current_header());
 8010f36:	4b03      	ldr	r3, [pc, #12]	; (8010f44 <icmp6_param_problem+0x10>)
 8010f38:	68dc      	ldr	r4, [r3, #12]
  icmp6_send_response(p, c, pointer_u32, ICMP6_TYPE_PP);
 8010f3a:	2304      	movs	r3, #4
 8010f3c:	1b12      	subs	r2, r2, r4
 8010f3e:	f7ff ff2b 	bl	8010d98 <icmp6_send_response>
}
 8010f42:	bd10      	pop	{r4, pc}
 8010f44:	20004bac 	.word	0x20004bac

08010f48 <ip6_input_accept>:
/** Return true if the current input packet should be accepted on this netif */
static int
ip6_input_accept(struct netif *netif)
{
  /* interface is up? */
  if (netif_is_up(netif)) {
 8010f48:	f890 30db 	ldrb.w	r3, [r0, #219]	; 0xdb
 8010f4c:	f013 0f01 	tst.w	r3, #1
 8010f50:	d001      	beq.n	8010f56 <ip6_input_accept+0xe>
    u8_t i;
    /* unicast to this interface address? address configured? */
    /* If custom scopes are used, the destination zone will be tested as
      * part of the local-address comparison, but we need to test the source
      * scope as well (e.g., is this interface on the same link?). */
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8010f52:	2300      	movs	r3, #0
 8010f54:	e02e      	b.n	8010fb4 <ip6_input_accept+0x6c>
        /* accept on this netif */
        return 1;
      }
    }
  }
  return 0;
 8010f56:	2000      	movs	r0, #0
 8010f58:	4770      	bx	lr
          ip6_addr_cmp(ip6_current_dest_addr(), netif_ip6_addr(netif, i))
 8010f5a:	4a27      	ldr	r2, [pc, #156]	; (8010ff8 <ip6_input_accept+0xb0>)
 8010f5c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8010f5e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8010f62:	00e2      	lsls	r2, r4, #3
 8010f64:	4402      	add	r2, r0
 8010f66:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8010f68:	4295      	cmp	r5, r2
 8010f6a:	d136      	bne.n	8010fda <ip6_input_accept+0x92>
 8010f6c:	4a22      	ldr	r2, [pc, #136]	; (8010ff8 <ip6_input_accept+0xb0>)
 8010f6e:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8010f70:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8010f74:	00e2      	lsls	r2, r4, #3
 8010f76:	4402      	add	r2, r0
 8010f78:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8010f7a:	4295      	cmp	r5, r2
 8010f7c:	d12d      	bne.n	8010fda <ip6_input_accept+0x92>
 8010f7e:	4a1e      	ldr	r2, [pc, #120]	; (8010ff8 <ip6_input_accept+0xb0>)
 8010f80:	6b95      	ldr	r5, [r2, #56]	; 0x38
 8010f82:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8010f86:	00e2      	lsls	r2, r4, #3
 8010f88:	4402      	add	r2, r0
 8010f8a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8010f8c:	4295      	cmp	r5, r2
 8010f8e:	d124      	bne.n	8010fda <ip6_input_accept+0x92>
 8010f90:	4a19      	ldr	r2, [pc, #100]	; (8010ff8 <ip6_input_accept+0xb0>)
 8010f92:	f892 403c 	ldrb.w	r4, [r2, #60]	; 0x3c
 8010f96:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010f9a:	00ca      	lsls	r2, r1, #3
 8010f9c:	4402      	add	r2, r0
 8010f9e:	f892 205c 	ldrb.w	r2, [r2, #92]	; 0x5c
 8010fa2:	4294      	cmp	r4, r2
 8010fa4:	d119      	bne.n	8010fda <ip6_input_accept+0x92>
        return 1;
 8010fa6:	2001      	movs	r0, #1
 8010fa8:	e000      	b.n	8010fac <ip6_input_accept+0x64>
  return 0;
 8010faa:	2000      	movs	r0, #0
}
 8010fac:	bc30      	pop	{r4, r5}
 8010fae:	4770      	bx	lr
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8010fb0:	3301      	adds	r3, #1
 8010fb2:	b2db      	uxtb	r3, r3
 8010fb4:	2b02      	cmp	r3, #2
 8010fb6:	d81c      	bhi.n	8010ff2 <ip6_input_accept+0xaa>
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8010fb8:	4619      	mov	r1, r3
 8010fba:	18c2      	adds	r2, r0, r3
 8010fbc:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
 8010fc0:	f012 0f10 	tst.w	r2, #16
 8010fc4:	d0f4      	beq.n	8010fb0 <ip6_input_accept+0x68>
{
 8010fc6:	b430      	push	{r4, r5}
          ip6_addr_cmp(ip6_current_dest_addr(), netif_ip6_addr(netif, i))
 8010fc8:	4a0b      	ldr	r2, [pc, #44]	; (8010ff8 <ip6_input_accept+0xb0>)
 8010fca:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8010fcc:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8010fd0:	00e2      	lsls	r2, r4, #3
 8010fd2:	4402      	add	r2, r0
 8010fd4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8010fd6:	4295      	cmp	r5, r2
 8010fd8:	d0bf      	beq.n	8010f5a <ip6_input_accept+0x12>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8010fda:	3301      	adds	r3, #1
 8010fdc:	b2db      	uxtb	r3, r3
 8010fde:	2b02      	cmp	r3, #2
 8010fe0:	d8e3      	bhi.n	8010faa <ip6_input_accept+0x62>
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8010fe2:	4619      	mov	r1, r3
 8010fe4:	18c2      	adds	r2, r0, r3
 8010fe6:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
 8010fea:	f012 0f10 	tst.w	r2, #16
 8010fee:	d0f4      	beq.n	8010fda <ip6_input_accept+0x92>
 8010ff0:	e7ea      	b.n	8010fc8 <ip6_input_accept+0x80>
  return 0;
 8010ff2:	2000      	movs	r0, #0
}
 8010ff4:	4770      	bx	lr
 8010ff6:	bf00      	nop
 8010ff8:	20004bac 	.word	0x20004bac

08010ffc <ip6_route>:
{
 8010ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((netif_list != NULL) && (netif_list->next == NULL)) {
 8010ffe:	4ba5      	ldr	r3, [pc, #660]	; (8011294 <ip6_route+0x298>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	b10b      	cbz	r3, 8011008 <ip6_route+0xc>
 8011004:	681a      	ldr	r2, [r3, #0]
 8011006:	b382      	cbz	r2, 801106a <ip6_route+0x6e>
  if (ip6_addr_has_zone(dest)) {
 8011008:	7c0d      	ldrb	r5, [r1, #16]
 801100a:	2d00      	cmp	r5, #0
 801100c:	d140      	bne.n	8011090 <ip6_route+0x94>
  if (ip6_addr_has_scope(dest, IP6_UNKNOWN) ||
 801100e:	680f      	ldr	r7, [r1, #0]
 8011010:	f24c 04ff 	movw	r4, #49407	; 0xc0ff
 8011014:	403c      	ands	r4, r7
 8011016:	f248 02fe 	movw	r2, #33022	; 0x80fe
 801101a:	4294      	cmp	r4, r2
 801101c:	d022      	beq.n	8011064 <ip6_route+0x68>
 801101e:	f648 72ff 	movw	r2, #36863	; 0x8fff
 8011022:	403a      	ands	r2, r7
 8011024:	f240 14ff 	movw	r4, #511	; 0x1ff
 8011028:	42a2      	cmp	r2, r4
 801102a:	d01b      	beq.n	8011064 <ip6_route+0x68>
 801102c:	f240 24ff 	movw	r4, #767	; 0x2ff
 8011030:	42a2      	cmp	r2, r4
 8011032:	d017      	beq.n	8011064 <ip6_route+0x68>
      ip6_addr_has_scope(src, IP6_UNICAST) ||
 8011034:	6802      	ldr	r2, [r0, #0]
 8011036:	f24c 06ff 	movw	r6, #49407	; 0xc0ff
 801103a:	4016      	ands	r6, r2
  if (ip6_addr_has_scope(dest, IP6_UNKNOWN) ||
 801103c:	f248 04fe 	movw	r4, #33022	; 0x80fe
 8011040:	42a6      	cmp	r6, r4
 8011042:	d00f      	beq.n	8011064 <ip6_route+0x68>
      ip6_addr_has_scope(src, IP6_UNICAST) ||
 8011044:	2a00      	cmp	r2, #0
 8011046:	f040 80b4 	bne.w	80111b2 <ip6_route+0x1b6>
      ip6_addr_isloopback(src)) {
 801104a:	6842      	ldr	r2, [r0, #4]
 801104c:	2a00      	cmp	r2, #0
 801104e:	f040 80b0 	bne.w	80111b2 <ip6_route+0x1b6>
 8011052:	6882      	ldr	r2, [r0, #8]
 8011054:	2a00      	cmp	r2, #0
 8011056:	f040 80ac 	bne.w	80111b2 <ip6_route+0x1b6>
 801105a:	68c2      	ldr	r2, [r0, #12]
 801105c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8011060:	f040 80a7 	bne.w	80111b2 <ip6_route+0x1b6>
    if (ip6_addr_has_zone(src)) {
 8011064:	7c01      	ldrb	r1, [r0, #16]
 8011066:	bb29      	cbnz	r1, 80110b4 <ip6_route+0xb8>
 8011068:	e061      	b.n	801112e <ip6_route+0x132>
    if (!netif_is_up(netif_list) || !netif_is_link_up(netif_list) ||
 801106a:	f893 00db 	ldrb.w	r0, [r3, #219]	; 0xdb
 801106e:	f000 0005 	and.w	r0, r0, #5
 8011072:	2805      	cmp	r0, #5
 8011074:	f040 8108 	bne.w	8011288 <ip6_route+0x28c>
        (ip6_addr_has_zone(dest) && !ip6_addr_test_zone(dest, netif_list))) {
 8011078:	7c08      	ldrb	r0, [r1, #16]
    if (!netif_is_up(netif_list) || !netif_is_link_up(netif_list) ||
 801107a:	b130      	cbz	r0, 801108a <ip6_route+0x8e>
        (ip6_addr_has_zone(dest) && !ip6_addr_test_zone(dest, netif_list))) {
 801107c:	f893 10de 	ldrb.w	r1, [r3, #222]	; 0xde
 8011080:	3101      	adds	r1, #1
 8011082:	b2c9      	uxtb	r1, r1
 8011084:	4288      	cmp	r0, r1
 8011086:	f040 8101 	bne.w	801128c <ip6_route+0x290>
}
 801108a:	4618      	mov	r0, r3
 801108c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    NETIF_FOREACH(netif) {
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d0fa      	beq.n	801108a <ip6_route+0x8e>
      if (ip6_addr_test_zone(dest, netif) &&
 8011094:	f893 20de 	ldrb.w	r2, [r3, #222]	; 0xde
 8011098:	3201      	adds	r2, #1
 801109a:	b2d2      	uxtb	r2, r2
 801109c:	4295      	cmp	r5, r2
 801109e:	d1f6      	bne.n	801108e <ip6_route+0x92>
          netif_is_up(netif) && netif_is_link_up(netif)) {
 80110a0:	f893 20db 	ldrb.w	r2, [r3, #219]	; 0xdb
      if (ip6_addr_test_zone(dest, netif) &&
 80110a4:	f012 0f01 	tst.w	r2, #1
 80110a8:	d0f1      	beq.n	801108e <ip6_route+0x92>
          netif_is_up(netif) && netif_is_link_up(netif)) {
 80110aa:	f012 0f04 	tst.w	r2, #4
 80110ae:	d0ee      	beq.n	801108e <ip6_route+0x92>
 80110b0:	e7eb      	b.n	801108a <ip6_route+0x8e>
      NETIF_FOREACH(netif) {
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d0e8      	beq.n	801108a <ip6_route+0x8e>
        if (netif_is_up(netif) && netif_is_link_up(netif) &&
 80110b8:	f893 20db 	ldrb.w	r2, [r3, #219]	; 0xdb
 80110bc:	f012 0f01 	tst.w	r2, #1
 80110c0:	d0f7      	beq.n	80110b2 <ip6_route+0xb6>
 80110c2:	f012 0f04 	tst.w	r2, #4
 80110c6:	d0f4      	beq.n	80110b2 <ip6_route+0xb6>
            ip6_addr_test_zone(src, netif)) {
 80110c8:	f893 20de 	ldrb.w	r2, [r3, #222]	; 0xde
 80110cc:	3201      	adds	r2, #1
 80110ce:	b2d2      	uxtb	r2, r2
        if (netif_is_up(netif) && netif_is_link_up(netif) &&
 80110d0:	4291      	cmp	r1, r2
 80110d2:	d1ee      	bne.n	80110b2 <ip6_route+0xb6>
 80110d4:	e7d9      	b.n	801108a <ip6_route+0x8e>
        for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80110d6:	3201      	adds	r2, #1
 80110d8:	b252      	sxtb	r2, r2
 80110da:	2a02      	cmp	r2, #2
 80110dc:	dc26      	bgt.n	801112c <ip6_route+0x130>
          if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 80110de:	1899      	adds	r1, r3, r2
 80110e0:	f891 1094 	ldrb.w	r1, [r1, #148]	; 0x94
 80110e4:	f011 0f10 	tst.w	r1, #16
 80110e8:	d0f5      	beq.n	80110d6 <ip6_route+0xda>
              ip6_addr_cmp_zoneless(src, netif_ip6_addr(netif, i))) {
 80110ea:	6806      	ldr	r6, [r0, #0]
 80110ec:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80110f0:	00e9      	lsls	r1, r5, #3
 80110f2:	4419      	add	r1, r3
 80110f4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
          if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 80110f6:	428e      	cmp	r6, r1
 80110f8:	d1ed      	bne.n	80110d6 <ip6_route+0xda>
              ip6_addr_cmp_zoneless(src, netif_ip6_addr(netif, i))) {
 80110fa:	6846      	ldr	r6, [r0, #4]
 80110fc:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8011100:	00e9      	lsls	r1, r5, #3
 8011102:	4419      	add	r1, r3
 8011104:	6d09      	ldr	r1, [r1, #80]	; 0x50
 8011106:	428e      	cmp	r6, r1
 8011108:	d1e5      	bne.n	80110d6 <ip6_route+0xda>
 801110a:	6886      	ldr	r6, [r0, #8]
 801110c:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8011110:	00e9      	lsls	r1, r5, #3
 8011112:	4419      	add	r1, r3
 8011114:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8011116:	428e      	cmp	r6, r1
 8011118:	d1dd      	bne.n	80110d6 <ip6_route+0xda>
 801111a:	68c5      	ldr	r5, [r0, #12]
 801111c:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8011120:	00e1      	lsls	r1, r4, #3
 8011122:	4419      	add	r1, r3
 8011124:	6d89      	ldr	r1, [r1, #88]	; 0x58
 8011126:	428d      	cmp	r5, r1
 8011128:	d1d5      	bne.n	80110d6 <ip6_route+0xda>
 801112a:	e7ae      	b.n	801108a <ip6_route+0x8e>
      NETIF_FOREACH(netif) {
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d0ab      	beq.n	801108a <ip6_route+0x8e>
        if (!netif_is_up(netif) || !netif_is_link_up(netif)) {
 8011132:	f893 20db 	ldrb.w	r2, [r3, #219]	; 0xdb
 8011136:	f002 0205 	and.w	r2, r2, #5
 801113a:	2a05      	cmp	r2, #5
 801113c:	d1f6      	bne.n	801112c <ip6_route+0x130>
        for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 801113e:	2200      	movs	r2, #0
 8011140:	e7cb      	b.n	80110da <ip6_route+0xde>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8011142:	3201      	adds	r2, #1
 8011144:	b252      	sxtb	r2, r2
 8011146:	2a02      	cmp	r2, #2
 8011148:	dc32      	bgt.n	80111b0 <ip6_route+0x1b4>
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 801114a:	189c      	adds	r4, r3, r2
 801114c:	f894 4094 	ldrb.w	r4, [r4, #148]	; 0x94
 8011150:	f014 0f10 	tst.w	r4, #16
 8011154:	d0f5      	beq.n	8011142 <ip6_route+0x146>
          ip6_addr_netcmp(dest, netif_ip6_addr(netif, i)) &&
 8011156:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 801115a:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 801115e:	46a4      	mov	ip, r4
 8011160:	441c      	add	r4, r3
 8011162:	6ce4      	ldr	r4, [r4, #76]	; 0x4c
      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8011164:	42a7      	cmp	r7, r4
 8011166:	d1ec      	bne.n	8011142 <ip6_route+0x146>
          ip6_addr_netcmp(dest, netif_ip6_addr(netif, i)) &&
 8011168:	46e6      	mov	lr, ip
 801116a:	449c      	add	ip, r3
 801116c:	f8dc c050 	ldr.w	ip, [ip, #80]	; 0x50
 8011170:	684c      	ldr	r4, [r1, #4]
 8011172:	4564      	cmp	r4, ip
 8011174:	d1e5      	bne.n	8011142 <ip6_route+0x146>
 8011176:	4674      	mov	r4, lr
 8011178:	46f4      	mov	ip, lr
 801117a:	441c      	add	r4, r3
 801117c:	f894 405c 	ldrb.w	r4, [r4, #92]	; 0x5c
 8011180:	42a5      	cmp	r5, r4
 8011182:	d1de      	bne.n	8011142 <ip6_route+0x146>
          (netif_ip6_addr_isstatic(netif, i) ||
 8011184:	f102 0426 	add.w	r4, r2, #38	; 0x26
 8011188:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801118c:	2c00      	cmp	r4, #0
 801118e:	f43f af7c 	beq.w	801108a <ip6_route+0x8e>
          ip6_addr_nethostcmp(dest, netif_ip6_addr(netif, i)))) {
 8011192:	46e6      	mov	lr, ip
 8011194:	449c      	add	ip, r3
 8011196:	f8dc c054 	ldr.w	ip, [ip, #84]	; 0x54
          (netif_ip6_addr_isstatic(netif, i) ||
 801119a:	688c      	ldr	r4, [r1, #8]
 801119c:	4564      	cmp	r4, ip
 801119e:	d1d0      	bne.n	8011142 <ip6_route+0x146>
          ip6_addr_nethostcmp(dest, netif_ip6_addr(netif, i)))) {
 80111a0:	68cc      	ldr	r4, [r1, #12]
 80111a2:	46f4      	mov	ip, lr
 80111a4:	449c      	add	ip, r3
 80111a6:	f8dc 6058 	ldr.w	r6, [ip, #88]	; 0x58
 80111aa:	42b4      	cmp	r4, r6
 80111ac:	d1c9      	bne.n	8011142 <ip6_route+0x146>
 80111ae:	e76c      	b.n	801108a <ip6_route+0x8e>
  NETIF_FOREACH(netif) {
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	b13b      	cbz	r3, 80111c4 <ip6_route+0x1c8>
    if (!netif_is_up(netif) || !netif_is_link_up(netif)) {
 80111b4:	f893 20db 	ldrb.w	r2, [r3, #219]	; 0xdb
 80111b8:	f002 0205 	and.w	r2, r2, #5
 80111bc:	2a05      	cmp	r2, #5
 80111be:	d1f7      	bne.n	80111b0 <ip6_route+0x1b4>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80111c0:	2200      	movs	r2, #0
 80111c2:	e7c0      	b.n	8011146 <ip6_route+0x14a>
 80111c4:	4604      	mov	r4, r0
  netif = nd6_find_route(dest);
 80111c6:	4608      	mov	r0, r1
 80111c8:	f003 fb42 	bl	8014850 <nd6_find_route>
  if (netif != NULL) {
 80111cc:	4603      	mov	r3, r0
 80111ce:	2800      	cmp	r0, #0
 80111d0:	f47f af5b 	bne.w	801108a <ip6_route+0x8e>
  if (!ip6_addr_isany(src)) {
 80111d4:	2c00      	cmp	r4, #0
 80111d6:	d04b      	beq.n	8011270 <ip6_route+0x274>
 80111d8:	6826      	ldr	r6, [r4, #0]
 80111da:	b936      	cbnz	r6, 80111ea <ip6_route+0x1ee>
 80111dc:	6862      	ldr	r2, [r4, #4]
 80111de:	b922      	cbnz	r2, 80111ea <ip6_route+0x1ee>
 80111e0:	68a2      	ldr	r2, [r4, #8]
 80111e2:	b912      	cbnz	r2, 80111ea <ip6_route+0x1ee>
 80111e4:	68e2      	ldr	r2, [r4, #12]
 80111e6:	2a00      	cmp	r2, #0
 80111e8:	d042      	beq.n	8011270 <ip6_route+0x274>
    NETIF_FOREACH(netif) {
 80111ea:	4a2a      	ldr	r2, [pc, #168]	; (8011294 <ip6_route+0x298>)
 80111ec:	6810      	ldr	r0, [r2, #0]
 80111ee:	e036      	b.n	801125e <ip6_route+0x262>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 80111f0:	3201      	adds	r2, #1
 80111f2:	b252      	sxtb	r2, r2
 80111f4:	2a02      	cmp	r2, #2
 80111f6:	dc31      	bgt.n	801125c <ip6_route+0x260>
        if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 80111f8:	1881      	adds	r1, r0, r2
 80111fa:	f891 1094 	ldrb.w	r1, [r1, #148]	; 0x94
 80111fe:	f011 0f10 	tst.w	r1, #16
 8011202:	d0f5      	beq.n	80111f0 <ip6_route+0x1f4>
            ip6_addr_cmp(src, netif_ip6_addr(netif, i))) {
 8011204:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 8011208:	00f9      	lsls	r1, r7, #3
 801120a:	4401      	add	r1, r0
 801120c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
        if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 801120e:	428e      	cmp	r6, r1
 8011210:	d1ee      	bne.n	80111f0 <ip6_route+0x1f4>
            ip6_addr_cmp(src, netif_ip6_addr(netif, i))) {
 8011212:	6867      	ldr	r7, [r4, #4]
 8011214:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 8011218:	ea4f 01cc 	mov.w	r1, ip, lsl #3
 801121c:	4401      	add	r1, r0
 801121e:	6d09      	ldr	r1, [r1, #80]	; 0x50
 8011220:	428f      	cmp	r7, r1
 8011222:	d1e5      	bne.n	80111f0 <ip6_route+0x1f4>
 8011224:	68a7      	ldr	r7, [r4, #8]
 8011226:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 801122a:	ea4f 01cc 	mov.w	r1, ip, lsl #3
 801122e:	4401      	add	r1, r0
 8011230:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8011232:	428f      	cmp	r7, r1
 8011234:	d1dc      	bne.n	80111f0 <ip6_route+0x1f4>
 8011236:	68e7      	ldr	r7, [r4, #12]
 8011238:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 801123c:	ea4f 01cc 	mov.w	r1, ip, lsl #3
 8011240:	468c      	mov	ip, r1
 8011242:	4401      	add	r1, r0
 8011244:	6d89      	ldr	r1, [r1, #88]	; 0x58
 8011246:	428f      	cmp	r7, r1
 8011248:	d1d2      	bne.n	80111f0 <ip6_route+0x1f4>
 801124a:	7c27      	ldrb	r7, [r4, #16]
 801124c:	4661      	mov	r1, ip
 801124e:	4401      	add	r1, r0
 8011250:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
 8011254:	428f      	cmp	r7, r1
 8011256:	d1cb      	bne.n	80111f0 <ip6_route+0x1f4>
          return netif;
 8011258:	4603      	mov	r3, r0
 801125a:	e716      	b.n	801108a <ip6_route+0x8e>
    NETIF_FOREACH(netif) {
 801125c:	6800      	ldr	r0, [r0, #0]
 801125e:	b138      	cbz	r0, 8011270 <ip6_route+0x274>
      if (!netif_is_up(netif) || !netif_is_link_up(netif)) {
 8011260:	f890 20db 	ldrb.w	r2, [r0, #219]	; 0xdb
 8011264:	f002 0205 	and.w	r2, r2, #5
 8011268:	2a05      	cmp	r2, #5
 801126a:	d1f7      	bne.n	801125c <ip6_route+0x260>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 801126c:	2200      	movs	r2, #0
 801126e:	e7c1      	b.n	80111f4 <ip6_route+0x1f8>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default)) {
 8011270:	4a09      	ldr	r2, [pc, #36]	; (8011298 <ip6_route+0x29c>)
 8011272:	6812      	ldr	r2, [r2, #0]
 8011274:	b162      	cbz	r2, 8011290 <ip6_route+0x294>
 8011276:	f892 10db 	ldrb.w	r1, [r2, #219]	; 0xdb
 801127a:	f001 0105 	and.w	r1, r1, #5
 801127e:	2905      	cmp	r1, #5
 8011280:	f47f af03 	bne.w	801108a <ip6_route+0x8e>
  return netif_default;
 8011284:	4613      	mov	r3, r2
 8011286:	e700      	b.n	801108a <ip6_route+0x8e>
      return NULL;
 8011288:	4613      	mov	r3, r2
 801128a:	e6fe      	b.n	801108a <ip6_route+0x8e>
 801128c:	4613      	mov	r3, r2
 801128e:	e6fc      	b.n	801108a <ip6_route+0x8e>
    return NULL;
 8011290:	4613      	mov	r3, r2
 8011292:	e6fa      	b.n	801108a <ip6_route+0x8e>
 8011294:	20008600 	.word	0x20008600
 8011298:	20008604 	.word	0x20008604

0801129c <ip6_select_source_address>:
{
 801129c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112a0:	b083      	sub	sp, #12
 80112a2:	4604      	mov	r4, r0
 80112a4:	460e      	mov	r6, r1
  if (ip6_addr_isglobal(dest)) {
 80112a6:	6808      	ldr	r0, [r1, #0]
 80112a8:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 80112ac:	2b20      	cmp	r3, #32
 80112ae:	d025      	beq.n	80112fc <ip6_select_source_address+0x60>
  } else if (ip6_addr_islinklocal(dest) || ip6_addr_isloopback(dest)) {
 80112b0:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 80112b4:	4003      	ands	r3, r0
 80112b6:	f248 02fe 	movw	r2, #33022	; 0x80fe
 80112ba:	4293      	cmp	r3, r2
 80112bc:	d027      	beq.n	801130e <ip6_select_source_address+0x72>
 80112be:	b938      	cbnz	r0, 80112d0 <ip6_select_source_address+0x34>
 80112c0:	684a      	ldr	r2, [r1, #4]
 80112c2:	b92a      	cbnz	r2, 80112d0 <ip6_select_source_address+0x34>
 80112c4:	688a      	ldr	r2, [r1, #8]
 80112c6:	b91a      	cbnz	r2, 80112d0 <ip6_select_source_address+0x34>
 80112c8:	68ca      	ldr	r2, [r1, #12]
 80112ca:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80112ce:	d021      	beq.n	8011314 <ip6_select_source_address+0x78>
  } else if (ip6_addr_isuniquelocal(dest)) {
 80112d0:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 80112d4:	2afc      	cmp	r2, #252	; 0xfc
 80112d6:	d020      	beq.n	801131a <ip6_select_source_address+0x7e>
  } else if (ip6_addr_ismulticast(dest)) {
 80112d8:	b2c2      	uxtb	r2, r0
 80112da:	2aff      	cmp	r2, #255	; 0xff
 80112dc:	d006      	beq.n	80112ec <ip6_select_source_address+0x50>
  } else if (ip6_addr_issitelocal(dest)) {
 80112de:	f24c 02fe 	movw	r2, #49406	; 0xc0fe
 80112e2:	4293      	cmp	r3, r2
 80112e4:	d007      	beq.n	80112f6 <ip6_select_source_address+0x5a>
    dest_scope = IP6_MULTICAST_SCOPE_GLOBAL;
 80112e6:	f04f 080e 	mov.w	r8, #14
 80112ea:	e009      	b.n	8011300 <ip6_select_source_address+0x64>
    dest_scope = ip6_addr_multicast_scope(dest);
 80112ec:	f7f5 ff75 	bl	80071da <lwip_htonl>
 80112f0:	f3c0 4803 	ubfx	r8, r0, #16, #4
 80112f4:	e004      	b.n	8011300 <ip6_select_source_address+0x64>
    dest_scope = IP6_MULTICAST_SCOPE_SITE_LOCAL;
 80112f6:	f04f 0805 	mov.w	r8, #5
 80112fa:	e001      	b.n	8011300 <ip6_select_source_address+0x64>
    dest_scope = IP6_MULTICAST_SCOPE_GLOBAL;
 80112fc:	f04f 080e 	mov.w	r8, #14
  u8_t best_bits = 0;
 8011300:	f04f 0c00 	mov.w	ip, #0
  u8_t best_pref = 0;
 8011304:	46e1      	mov	r9, ip
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8011306:	4663      	mov	r3, ip
  s8_t best_scope = IP6_MULTICAST_SCOPE_RESERVED;
 8011308:	46e6      	mov	lr, ip
  best_addr = NULL;
 801130a:	4660      	mov	r0, ip
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 801130c:	e03d      	b.n	801138a <ip6_select_source_address+0xee>
    dest_scope = IP6_MULTICAST_SCOPE_LINK_LOCAL;
 801130e:	f04f 0802 	mov.w	r8, #2
 8011312:	e7f5      	b.n	8011300 <ip6_select_source_address+0x64>
 8011314:	f04f 0802 	mov.w	r8, #2
 8011318:	e7f2      	b.n	8011300 <ip6_select_source_address+0x64>
    dest_scope = IP6_MULTICAST_SCOPE_ORGANIZATION_LOCAL;
 801131a:	f04f 0808 	mov.w	r8, #8
 801131e:	e7ef      	b.n	8011300 <ip6_select_source_address+0x64>
      cand_scope = IP6_MULTICAST_SCOPE_SITE_LOCAL;
 8011320:	2505      	movs	r5, #5
 8011322:	e000      	b.n	8011326 <ip6_select_source_address+0x8a>
      cand_scope = IP6_MULTICAST_SCOPE_GLOBAL;
 8011324:	250e      	movs	r5, #14
    cand_pref = ip6_addr_ispreferred(netif_ip6_addr_state(netif, i));
 8011326:	2930      	cmp	r1, #48	; 0x30
 8011328:	bf14      	ite	ne
 801132a:	2100      	movne	r1, #0
 801132c:	2101      	moveq	r1, #1
 801132e:	9101      	str	r1, [sp, #4]
    cand_bits = ip6_addr_netcmp_zoneless(cand_addr, dest); /* just 1 or 0 for now */
 8011330:	6837      	ldr	r7, [r6, #0]
 8011332:	45ba      	cmp	sl, r7
 8011334:	d052      	beq.n	80113dc <ip6_select_source_address+0x140>
 8011336:	2700      	movs	r7, #0
    if (cand_bits && ip6_addr_nethostcmp(cand_addr, dest)) {
 8011338:	f007 0aff 	and.w	sl, r7, #255	; 0xff
 801133c:	b147      	cbz	r7, 8011350 <ip6_select_source_address+0xb4>
 801133e:	eb02 0b42 	add.w	fp, r2, r2, lsl #1
 8011342:	ea4f 07cb 	mov.w	r7, fp, lsl #3
 8011346:	4427      	add	r7, r4
 8011348:	6d7f      	ldr	r7, [r7, #84]	; 0x54
 801134a:	68b1      	ldr	r1, [r6, #8]
 801134c:	428f      	cmp	r7, r1
 801134e:	d052      	beq.n	80113f6 <ip6_select_source_address+0x15a>
    if ((best_addr == NULL) || /* no alternative yet */
 8011350:	b178      	cbz	r0, 8011372 <ip6_select_source_address+0xd6>
 8011352:	4575      	cmp	r5, lr
 8011354:	da01      	bge.n	801135a <ip6_select_source_address+0xbe>
        ((cand_scope < best_scope) && (cand_scope >= dest_scope)) ||
 8011356:	45a8      	cmp	r8, r5
 8011358:	dd0b      	ble.n	8011372 <ip6_select_source_address+0xd6>
 801135a:	4575      	cmp	r5, lr
 801135c:	dd01      	ble.n	8011362 <ip6_select_source_address+0xc6>
        ((cand_scope > best_scope) && (best_scope < dest_scope)) || /* Rule 2 */
 801135e:	45f0      	cmp	r8, lr
 8011360:	dc07      	bgt.n	8011372 <ip6_select_source_address+0xd6>
 8011362:	4575      	cmp	r5, lr
 8011364:	d10f      	bne.n	8011386 <ip6_select_source_address+0xea>
        ((cand_scope == best_scope) && ((cand_pref > best_pref) || /* Rule 3 */
 8011366:	9901      	ldr	r1, [sp, #4]
 8011368:	4589      	cmp	r9, r1
 801136a:	d302      	bcc.n	8011372 <ip6_select_source_address+0xd6>
 801136c:	d10b      	bne.n	8011386 <ip6_select_source_address+0xea>
        ((cand_pref == best_pref) && (cand_bits > best_bits))))) { /* Rule 8 */
 801136e:	45d4      	cmp	ip, sl
 8011370:	d209      	bcs.n	8011386 <ip6_select_source_address+0xea>
      best_addr = netif_ip_addr6(netif, i);
 8011372:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011376:	00d0      	lsls	r0, r2, #3
 8011378:	3048      	adds	r0, #72	; 0x48
 801137a:	4420      	add	r0, r4
 801137c:	3004      	adds	r0, #4
      best_bits = cand_bits;
 801137e:	46d4      	mov	ip, sl
      best_pref = cand_pref;
 8011380:	f8dd 9004 	ldr.w	r9, [sp, #4]
      best_scope = cand_scope;
 8011384:	46ae      	mov	lr, r5
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8011386:	3301      	adds	r3, #1
 8011388:	b2db      	uxtb	r3, r3
 801138a:	2b02      	cmp	r3, #2
 801138c:	d841      	bhi.n	8011412 <ip6_select_source_address+0x176>
    if (!ip6_addr_isvalid(netif_ip6_addr_state(netif, i))) {
 801138e:	461a      	mov	r2, r3
 8011390:	18e1      	adds	r1, r4, r3
 8011392:	f891 1094 	ldrb.w	r1, [r1, #148]	; 0x94
 8011396:	f011 0f10 	tst.w	r1, #16
 801139a:	d0f4      	beq.n	8011386 <ip6_select_source_address+0xea>
    if (ip6_addr_isglobal(cand_addr)) {
 801139c:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80113a0:	00fd      	lsls	r5, r7, #3
 80113a2:	4425      	add	r5, r4
 80113a4:	f8d5 a04c 	ldr.w	sl, [r5, #76]	; 0x4c
 80113a8:	f00a 05e0 	and.w	r5, sl, #224	; 0xe0
 80113ac:	2d20      	cmp	r5, #32
 80113ae:	d0b9      	beq.n	8011324 <ip6_select_source_address+0x88>
    } else if (ip6_addr_islinklocal(cand_addr)) {
 80113b0:	f24c 05ff 	movw	r5, #49407	; 0xc0ff
 80113b4:	ea0a 0505 	and.w	r5, sl, r5
 80113b8:	f248 07fe 	movw	r7, #33022	; 0x80fe
 80113bc:	42bd      	cmp	r5, r7
 80113be:	d009      	beq.n	80113d4 <ip6_select_source_address+0x138>
    } else if (ip6_addr_isuniquelocal(cand_addr)) {
 80113c0:	f00a 07fe 	and.w	r7, sl, #254	; 0xfe
 80113c4:	2ffc      	cmp	r7, #252	; 0xfc
 80113c6:	d007      	beq.n	80113d8 <ip6_select_source_address+0x13c>
    } else if (ip6_addr_issitelocal(cand_addr)) {
 80113c8:	f24c 07fe 	movw	r7, #49406	; 0xc0fe
 80113cc:	42bd      	cmp	r5, r7
 80113ce:	d0a7      	beq.n	8011320 <ip6_select_source_address+0x84>
      cand_scope = IP6_MULTICAST_SCOPE_RESERVEDF;
 80113d0:	250f      	movs	r5, #15
 80113d2:	e7a8      	b.n	8011326 <ip6_select_source_address+0x8a>
      cand_scope = IP6_MULTICAST_SCOPE_LINK_LOCAL;
 80113d4:	2502      	movs	r5, #2
 80113d6:	e7a6      	b.n	8011326 <ip6_select_source_address+0x8a>
      cand_scope = IP6_MULTICAST_SCOPE_ORGANIZATION_LOCAL;
 80113d8:	2508      	movs	r5, #8
 80113da:	e7a4      	b.n	8011326 <ip6_select_source_address+0x8a>
    cand_bits = ip6_addr_netcmp_zoneless(cand_addr, dest); /* just 1 or 0 for now */
 80113dc:	eb02 0a42 	add.w	sl, r2, r2, lsl #1
 80113e0:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 80113e4:	4427      	add	r7, r4
 80113e6:	6d3f      	ldr	r7, [r7, #80]	; 0x50
 80113e8:	6871      	ldr	r1, [r6, #4]
 80113ea:	428f      	cmp	r7, r1
 80113ec:	d001      	beq.n	80113f2 <ip6_select_source_address+0x156>
 80113ee:	2700      	movs	r7, #0
 80113f0:	e7a2      	b.n	8011338 <ip6_select_source_address+0x9c>
 80113f2:	2701      	movs	r7, #1
 80113f4:	e7a0      	b.n	8011338 <ip6_select_source_address+0x9c>
    if (cand_bits && ip6_addr_nethostcmp(cand_addr, dest)) {
 80113f6:	eb02 0b42 	add.w	fp, r2, r2, lsl #1
 80113fa:	ea4f 07cb 	mov.w	r7, fp, lsl #3
 80113fe:	46bb      	mov	fp, r7
 8011400:	4427      	add	r7, r4
 8011402:	6dbf      	ldr	r7, [r7, #88]	; 0x58
 8011404:	68f1      	ldr	r1, [r6, #12]
 8011406:	428f      	cmp	r7, r1
 8011408:	d1a2      	bne.n	8011350 <ip6_select_source_address+0xb4>
      return netif_ip_addr6(netif, i); /* Rule 1 */
 801140a:	f10b 0048 	add.w	r0, fp, #72	; 0x48
 801140e:	4420      	add	r0, r4
 8011410:	3004      	adds	r0, #4
}
 8011412:	b003      	add	sp, #12
 8011414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011418 <ip6_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip6_input(struct pbuf *p, struct netif *inp)
{
 8011418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801141c:	b087      	sub	sp, #28
 801141e:	4604      	mov	r4, r0
 8011420:	460e      	mov	r6, r1
  LWIP_ASSERT_CORE_LOCKED();

  IP6_STATS_INC(ip6.recv);

  /* identify the IP header */
  ip6hdr = (struct ip6_hdr *)p->payload;
 8011422:	6845      	ldr	r5, [r0, #4]
  if (IP6H_V(ip6hdr) != 6) {
 8011424:	6828      	ldr	r0, [r5, #0]
 8011426:	f7f5 fed8 	bl	80071da <lwip_htonl>
 801142a:	0f00      	lsrs	r0, r0, #28
 801142c:	2806      	cmp	r0, #6
 801142e:	d110      	bne.n	8011452 <ip6_input+0x3a>
    return ERR_OK;
  }
#endif

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((IP6_HLEN > p->len) || (IP6H_PLEN(ip6hdr) > (p->tot_len - IP6_HLEN))) {
 8011430:	8963      	ldrh	r3, [r4, #10]
 8011432:	2b27      	cmp	r3, #39	; 0x27
 8011434:	d906      	bls.n	8011444 <ip6_input+0x2c>
 8011436:	88a8      	ldrh	r0, [r5, #4]
 8011438:	f7f5 feca 	bl	80071d0 <lwip_htons>
 801143c:	8923      	ldrh	r3, [r4, #8]
 801143e:	3b28      	subs	r3, #40	; 0x28
 8011440:	4298      	cmp	r0, r3
 8011442:	dd0d      	ble.n	8011460 <ip6_input+0x48>
    if (IP6_HLEN > p->len) {
      LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IPv6 header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n",
            (u16_t)IP6_HLEN, p->len));
    }
    if ((IP6H_PLEN(ip6hdr) + IP6_HLEN) > p->tot_len) {
 8011444:	88a8      	ldrh	r0, [r5, #4]
 8011446:	f7f5 fec3 	bl	80071d0 <lwip_htons>
      LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IPv6 (plen %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
            (u16_t)(IP6H_PLEN(ip6hdr) + IP6_HLEN), p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801144a:	4620      	mov	r0, r4
 801144c:	f7f7 f982 	bl	8008754 <pbuf_free>
    IP6_STATS_INC(ip6.lenerr);
    IP6_STATS_INC(ip6.drop);
    return ERR_OK;
 8011450:	e002      	b.n	8011458 <ip6_input+0x40>
    pbuf_free(p);
 8011452:	4620      	mov	r0, r4
 8011454:	f7f7 f97e 	bl	8008754 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip6_addr_set_zero(ip6_current_src_addr());
  ip6_addr_set_zero(ip6_current_dest_addr());

  return ERR_OK;
}
 8011458:	2000      	movs	r0, #0
 801145a:	b007      	add	sp, #28
 801145c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pbuf_realloc(p, (u16_t)(IP6_HLEN + IP6H_PLEN(ip6hdr)));
 8011460:	88a8      	ldrh	r0, [r5, #4]
 8011462:	f7f5 feb5 	bl	80071d0 <lwip_htons>
 8011466:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801146a:	b289      	uxth	r1, r1
 801146c:	4620      	mov	r0, r4
 801146e:	f7f7 fa81 	bl	8008974 <pbuf_realloc>
  ip_addr_copy_from_ip6_packed(ip_data.current_iphdr_dest, ip6hdr->dest);
 8011472:	69af      	ldr	r7, [r5, #24]
 8011474:	4bad      	ldr	r3, [pc, #692]	; (801172c <ip6_input+0x314>)
 8011476:	62df      	str	r7, [r3, #44]	; 0x2c
 8011478:	f8d5 901c 	ldr.w	r9, [r5, #28]
 801147c:	f8c3 9030 	str.w	r9, [r3, #48]	; 0x30
 8011480:	f8d5 b020 	ldr.w	fp, [r5, #32]
 8011484:	f8c3 b034 	str.w	fp, [r3, #52]	; 0x34
 8011488:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801148a:	9202      	str	r2, [sp, #8]
 801148c:	639a      	str	r2, [r3, #56]	; 0x38
 801148e:	2100      	movs	r1, #0
 8011490:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 8011494:	2206      	movs	r2, #6
 8011496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  ip_addr_copy_from_ip6_packed(ip_data.current_iphdr_src, ip6hdr->src);
 801149a:	f8d5 8008 	ldr.w	r8, [r5, #8]
 801149e:	f8c3 8014 	str.w	r8, [r3, #20]
 80114a2:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80114a6:	f8c3 a018 	str.w	sl, [r3, #24]
 80114aa:	6928      	ldr	r0, [r5, #16]
 80114ac:	9001      	str	r0, [sp, #4]
 80114ae:	61d8      	str	r0, [r3, #28]
 80114b0:	6968      	ldr	r0, [r5, #20]
 80114b2:	9003      	str	r0, [sp, #12]
 80114b4:	6218      	str	r0, [r3, #32]
 80114b6:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
 80114ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  if (ip6_addr_isipv4mappedipv6(ip_2_ip6(&ip_data.current_iphdr_dest)) ||
 80114be:	b92f      	cbnz	r7, 80114cc <ip6_input+0xb4>
 80114c0:	f1b9 0f00 	cmp.w	r9, #0
 80114c4:	d102      	bne.n	80114cc <ip6_input+0xb4>
 80114c6:	f51b 3f80 	cmn.w	fp, #65536	; 0x10000
 80114ca:	d023      	beq.n	8011514 <ip6_input+0xfc>
 80114cc:	f1b8 0f00 	cmp.w	r8, #0
 80114d0:	d106      	bne.n	80114e0 <ip6_input+0xc8>
     ip6_addr_isipv4mappedipv6(ip_2_ip6(&ip_data.current_iphdr_src)) ||
 80114d2:	f1ba 0f00 	cmp.w	sl, #0
 80114d6:	d103      	bne.n	80114e0 <ip6_input+0xc8>
 80114d8:	9b01      	ldr	r3, [sp, #4]
 80114da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80114de:	d019      	beq.n	8011514 <ip6_input+0xfc>
     ip6_addr_ismulticast(ip_2_ip6(&ip_data.current_iphdr_src))) {
 80114e0:	fa5f f388 	uxtb.w	r3, r8
     ip6_addr_isipv4mappedipv6(ip_2_ip6(&ip_data.current_iphdr_src)) ||
 80114e4:	2bff      	cmp	r3, #255	; 0xff
 80114e6:	d015      	beq.n	8011514 <ip6_input+0xfc>
  ip6_addr_assign_zone(ip_2_ip6(&ip_data.current_iphdr_dest), IP6_UNKNOWN, inp);
 80114e8:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 80114ec:	403b      	ands	r3, r7
 80114ee:	461a      	mov	r2, r3
 80114f0:	9304      	str	r3, [sp, #16]
 80114f2:	f248 03fe 	movw	r3, #33022	; 0x80fe
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d010      	beq.n	801151c <ip6_input+0x104>
 80114fa:	f648 73ff 	movw	r3, #36863	; 0x8fff
 80114fe:	403b      	ands	r3, r7
 8011500:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011504:	4293      	cmp	r3, r2
 8011506:	d009      	beq.n	801151c <ip6_input+0x104>
 8011508:	f240 22ff 	movw	r2, #767	; 0x2ff
 801150c:	4293      	cmp	r3, r2
 801150e:	d005      	beq.n	801151c <ip6_input+0x104>
 8011510:	2300      	movs	r3, #0
 8011512:	e007      	b.n	8011524 <ip6_input+0x10c>
    pbuf_free(p);
 8011514:	4620      	mov	r0, r4
 8011516:	f7f7 f91d 	bl	8008754 <pbuf_free>
    return ERR_OK;
 801151a:	e79d      	b.n	8011458 <ip6_input+0x40>
  ip6_addr_assign_zone(ip_2_ip6(&ip_data.current_iphdr_dest), IP6_UNKNOWN, inp);
 801151c:	f896 30de 	ldrb.w	r3, [r6, #222]	; 0xde
 8011520:	3301      	adds	r3, #1
 8011522:	b2db      	uxtb	r3, r3
 8011524:	4a81      	ldr	r2, [pc, #516]	; (801172c <ip6_input+0x314>)
 8011526:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  ip6_addr_assign_zone(ip_2_ip6(&ip_data.current_iphdr_src), IP6_UNICAST, inp);
 801152a:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 801152e:	ea08 0303 	and.w	r3, r8, r3
 8011532:	461a      	mov	r2, r3
 8011534:	9305      	str	r3, [sp, #20]
 8011536:	f248 03fe 	movw	r3, #33022	; 0x80fe
 801153a:	429a      	cmp	r2, r3
 801153c:	d030      	beq.n	80115a0 <ip6_input+0x188>
 801153e:	2200      	movs	r2, #0
 8011540:	4b7a      	ldr	r3, [pc, #488]	; (801172c <ip6_input+0x314>)
 8011542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ip_data.current_ip6_header = ip6hdr;
 8011546:	60dd      	str	r5, [r3, #12]
  ip_data.current_netif = inp;
 8011548:	601e      	str	r6, [r3, #0]
  ip_data.current_input_netif = inp;
 801154a:	605e      	str	r6, [r3, #4]
  if (ip6_addr_ismulticast(ip6_current_dest_addr())) {
 801154c:	b2fb      	uxtb	r3, r7
 801154e:	2bff      	cmp	r3, #255	; 0xff
 8011550:	d02b      	beq.n	80115aa <ip6_input+0x192>
    if (ip6_input_accept(inp)) {
 8011552:	4630      	mov	r0, r6
 8011554:	f7ff fcf8 	bl	8010f48 <ip6_input_accept>
 8011558:	2800      	cmp	r0, #0
 801155a:	d14d      	bne.n	80115f8 <ip6_input+0x1e0>
      if (ip6_addr_islinklocal(ip6_current_dest_addr()) ||
 801155c:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8011560:	9a04      	ldr	r2, [sp, #16]
 8011562:	429a      	cmp	r2, r3
 8011564:	d064      	beq.n	8011630 <ip6_input+0x218>
 8011566:	9a05      	ldr	r2, [sp, #20]
 8011568:	429a      	cmp	r2, r3
 801156a:	d063      	beq.n	8011634 <ip6_input+0x21c>
      if (ip6_addr_isloopback(ip6_current_dest_addr()) ||
 801156c:	b94f      	cbnz	r7, 8011582 <ip6_input+0x16a>
 801156e:	f1b9 0f00 	cmp.w	r9, #0
 8011572:	d106      	bne.n	8011582 <ip6_input+0x16a>
 8011574:	f1bb 0f00 	cmp.w	fp, #0
 8011578:	d103      	bne.n	8011582 <ip6_input+0x16a>
 801157a:	9b02      	ldr	r3, [sp, #8]
 801157c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011580:	d05a      	beq.n	8011638 <ip6_input+0x220>
 8011582:	f1b8 0f00 	cmp.w	r8, #0
 8011586:	d108      	bne.n	801159a <ip6_input+0x182>
          ip6_addr_isloopback(ip6_current_src_addr())) {
 8011588:	f1ba 0f00 	cmp.w	sl, #0
 801158c:	d105      	bne.n	801159a <ip6_input+0x182>
 801158e:	9b01      	ldr	r3, [sp, #4]
 8011590:	b91b      	cbnz	r3, 801159a <ip6_input+0x182>
 8011592:	9b03      	ldr	r3, [sp, #12]
 8011594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011598:	d050      	beq.n	801163c <ip6_input+0x224>
      NETIF_FOREACH(netif) {
 801159a:	4b65      	ldr	r3, [pc, #404]	; (8011730 <ip6_input+0x318>)
 801159c:	681f      	ldr	r7, [r3, #0]
 801159e:	e020      	b.n	80115e2 <ip6_input+0x1ca>
  ip6_addr_assign_zone(ip_2_ip6(&ip_data.current_iphdr_src), IP6_UNICAST, inp);
 80115a0:	f896 20de 	ldrb.w	r2, [r6, #222]	; 0xde
 80115a4:	3201      	adds	r2, #1
 80115a6:	b2d2      	uxtb	r2, r2
 80115a8:	e7ca      	b.n	8011540 <ip6_input+0x128>
    if (ip6_addr_isallnodes_iflocal(ip6_current_dest_addr()) ||
 80115aa:	f240 13ff 	movw	r3, #511	; 0x1ff
 80115ae:	429f      	cmp	r7, r3
 80115b0:	d00a      	beq.n	80115c8 <ip6_input+0x1b0>
 80115b2:	f240 23ff 	movw	r3, #767	; 0x2ff
 80115b6:	429f      	cmp	r7, r3
 80115b8:	d006      	beq.n	80115c8 <ip6_input+0x1b0>
    else if (mld6_lookfor_group(inp, ip6_current_dest_addr())) {
 80115ba:	495e      	ldr	r1, [pc, #376]	; (8011734 <ip6_input+0x31c>)
 80115bc:	4630      	mov	r0, r6
 80115be:	f000 ffd6 	bl	801256e <mld6_lookfor_group>
 80115c2:	b1b8      	cbz	r0, 80115f4 <ip6_input+0x1dc>
      netif = inp;
 80115c4:	4637      	mov	r7, r6
 80115c6:	e018      	b.n	80115fa <ip6_input+0x1e2>
    if (ip6_addr_isallnodes_iflocal(ip6_current_dest_addr()) ||
 80115c8:	f1b9 0f00 	cmp.w	r9, #0
 80115cc:	d1f5      	bne.n	80115ba <ip6_input+0x1a2>
 80115ce:	f1bb 0f00 	cmp.w	fp, #0
 80115d2:	d1f2      	bne.n	80115ba <ip6_input+0x1a2>
 80115d4:	9b02      	ldr	r3, [sp, #8]
 80115d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80115da:	d1ee      	bne.n	80115ba <ip6_input+0x1a2>
      netif = inp;
 80115dc:	4637      	mov	r7, r6
 80115de:	e00c      	b.n	80115fa <ip6_input+0x1e2>
      NETIF_FOREACH(netif) {
 80115e0:	683f      	ldr	r7, [r7, #0]
 80115e2:	b157      	cbz	r7, 80115fa <ip6_input+0x1e2>
        if (netif == inp) {
 80115e4:	42b7      	cmp	r7, r6
 80115e6:	d0fb      	beq.n	80115e0 <ip6_input+0x1c8>
        if (ip6_input_accept(netif)) {
 80115e8:	4638      	mov	r0, r7
 80115ea:	f7ff fcad 	bl	8010f48 <ip6_input_accept>
 80115ee:	2800      	cmp	r0, #0
 80115f0:	d0f6      	beq.n	80115e0 <ip6_input+0x1c8>
netif_found:
 80115f2:	e002      	b.n	80115fa <ip6_input+0x1e2>
      netif = NULL;
 80115f4:	2700      	movs	r7, #0
 80115f6:	e000      	b.n	80115fa <ip6_input+0x1e2>
      netif = inp;
 80115f8:	4637      	mov	r7, r6
  if (ip6_addr_isany(ip6_current_src_addr()) &&
 80115fa:	4b4c      	ldr	r3, [pc, #304]	; (801172c <ip6_input+0x314>)
 80115fc:	695b      	ldr	r3, [r3, #20]
 80115fe:	bb23      	cbnz	r3, 801164a <ip6_input+0x232>
 8011600:	4b4a      	ldr	r3, [pc, #296]	; (801172c <ip6_input+0x314>)
 8011602:	699b      	ldr	r3, [r3, #24]
 8011604:	bb0b      	cbnz	r3, 801164a <ip6_input+0x232>
 8011606:	4b49      	ldr	r3, [pc, #292]	; (801172c <ip6_input+0x314>)
 8011608:	69db      	ldr	r3, [r3, #28]
 801160a:	b9f3      	cbnz	r3, 801164a <ip6_input+0x232>
 801160c:	4b47      	ldr	r3, [pc, #284]	; (801172c <ip6_input+0x314>)
 801160e:	6a1b      	ldr	r3, [r3, #32]
 8011610:	b9db      	cbnz	r3, 801164a <ip6_input+0x232>
      (!ip6_addr_issolicitednode(ip6_current_dest_addr()))) {
 8011612:	4b46      	ldr	r3, [pc, #280]	; (801172c <ip6_input+0x314>)
 8011614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  if (ip6_addr_isany(ip6_current_src_addr()) &&
 8011616:	f240 23ff 	movw	r3, #767	; 0x2ff
 801161a:	429a      	cmp	r2, r3
 801161c:	d104      	bne.n	8011628 <ip6_input+0x210>
      (!ip6_addr_issolicitednode(ip6_current_dest_addr()))) {
 801161e:	4b43      	ldr	r3, [pc, #268]	; (801172c <ip6_input+0x314>)
 8011620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011622:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011626:	d00b      	beq.n	8011640 <ip6_input+0x228>
    pbuf_free(p);
 8011628:	4620      	mov	r0, r4
 801162a:	f7f7 f893 	bl	8008754 <pbuf_free>
    goto ip6_input_cleanup;
 801162e:	e039      	b.n	80116a4 <ip6_input+0x28c>
      netif = NULL;
 8011630:	2700      	movs	r7, #0
 8011632:	e7e2      	b.n	80115fa <ip6_input+0x1e2>
 8011634:	2700      	movs	r7, #0
 8011636:	e7e0      	b.n	80115fa <ip6_input+0x1e2>
 8011638:	2700      	movs	r7, #0
 801163a:	e7de      	b.n	80115fa <ip6_input+0x1e2>
 801163c:	2700      	movs	r7, #0
 801163e:	e7dc      	b.n	80115fa <ip6_input+0x1e2>
      (!ip6_addr_issolicitednode(ip6_current_dest_addr()))) {
 8011640:	4b3a      	ldr	r3, [pc, #232]	; (801172c <ip6_input+0x314>)
 8011642:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011646:	2bff      	cmp	r3, #255	; 0xff
 8011648:	d1ee      	bne.n	8011628 <ip6_input+0x210>
  if (netif == NULL) {
 801164a:	b347      	cbz	r7, 801169e <ip6_input+0x286>
  ip_data.current_netif = netif;
 801164c:	4b37      	ldr	r3, [pc, #220]	; (801172c <ip6_input+0x314>)
 801164e:	601f      	str	r7, [r3, #0]
  nexth = &IP6H_NEXTH(ip6hdr);
 8011650:	f105 0806 	add.w	r8, r5, #6
  pbuf_remove_header(p, IP6_HLEN);
 8011654:	2128      	movs	r1, #40	; 0x28
 8011656:	4620      	mov	r0, r4
 8011658:	f7f7 f836 	bl	80086c8 <pbuf_remove_header>
  hlen = hlen_tot = IP6_HLEN;
 801165c:	2728      	movs	r7, #40	; 0x28
  while (*nexth != IP6_NEXTH_NONE)
 801165e:	f898 3000 	ldrb.w	r3, [r8]
 8011662:	2b3b      	cmp	r3, #59	; 0x3b
 8011664:	f000 814d 	beq.w	8011902 <ip6_input+0x4ea>
    switch (*nexth) {
 8011668:	2b2b      	cmp	r3, #43	; 0x2b
 801166a:	f000 80d0 	beq.w	801180e <ip6_input+0x3f6>
 801166e:	d92c      	bls.n	80116ca <ip6_input+0x2b2>
 8011670:	2b2c      	cmp	r3, #44	; 0x2c
 8011672:	f000 8108 	beq.w	8011886 <ip6_input+0x46e>
 8011676:	2b3c      	cmp	r3, #60	; 0x3c
 8011678:	f040 8143 	bne.w	8011902 <ip6_input+0x4ea>
      dest_hdr = (struct ip6_dest_hdr *)p->payload;
 801167c:	6861      	ldr	r1, [r4, #4]
      nexth = &IP6_DEST_NEXTH(dest_hdr);
 801167e:	4688      	mov	r8, r1
      hlen = 8 * (1 + dest_hdr->_hlen);
 8011680:	f891 c001 	ldrb.w	ip, [r1, #1]
 8011684:	f10c 0c01 	add.w	ip, ip, #1
 8011688:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
      if ((p->len < 8) || (hlen > p->len)) {
 801168c:	8963      	ldrh	r3, [r4, #10]
 801168e:	2b07      	cmp	r3, #7
 8011690:	d976      	bls.n	8011780 <ip6_input+0x368>
 8011692:	4563      	cmp	r3, ip
 8011694:	d374      	bcc.n	8011780 <ip6_input+0x368>
      hlen_tot = (u16_t)(hlen_tot + hlen);
 8011696:	4467      	add	r7, ip
 8011698:	b2bf      	uxth	r7, r7
      opt_offset = IP6_DEST_HLEN;
 801169a:	2302      	movs	r3, #2
      while (opt_offset < hlen)
 801169c:	e0a5      	b.n	80117ea <ip6_input+0x3d2>
    pbuf_free(p);
 801169e:	4620      	mov	r0, r4
 80116a0:	f7f7 f858 	bl	8008754 <pbuf_free>
  ip_data.current_netif = NULL;
 80116a4:	4b21      	ldr	r3, [pc, #132]	; (801172c <ip6_input+0x314>)
 80116a6:	2200      	movs	r2, #0
 80116a8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80116aa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip6_header = NULL;
 80116ac:	60da      	str	r2, [r3, #12]
  ip_data.current_ip_header_tot_len = 0;
 80116ae:	821a      	strh	r2, [r3, #16]
  ip6_addr_set_zero(ip6_current_src_addr());
 80116b0:	615a      	str	r2, [r3, #20]
 80116b2:	619a      	str	r2, [r3, #24]
 80116b4:	61da      	str	r2, [r3, #28]
 80116b6:	621a      	str	r2, [r3, #32]
 80116b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ip6_addr_set_zero(ip6_current_dest_addr());
 80116bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80116be:	631a      	str	r2, [r3, #48]	; 0x30
 80116c0:	635a      	str	r2, [r3, #52]	; 0x34
 80116c2:	639a      	str	r2, [r3, #56]	; 0x38
 80116c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return ERR_OK;
 80116c8:	e6c6      	b.n	8011458 <ip6_input+0x40>
    switch (*nexth) {
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	f040 8119 	bne.w	8011902 <ip6_input+0x4ea>
      hbh_hdr = (struct ip6_hbh_hdr *)p->payload;
 80116d0:	f8d4 c004 	ldr.w	ip, [r4, #4]
      nexth = &IP6_HBH_NEXTH(hbh_hdr);
 80116d4:	46e0      	mov	r8, ip
      hlen = (u16_t)(8 * (1 + hbh_hdr->_hlen));
 80116d6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80116da:	3101      	adds	r1, #1
 80116dc:	00c9      	lsls	r1, r1, #3
      if ((p->len < 8) || (hlen > p->len)) {
 80116de:	8963      	ldrh	r3, [r4, #10]
 80116e0:	2b07      	cmp	r3, #7
 80116e2:	d905      	bls.n	80116f0 <ip6_input+0x2d8>
 80116e4:	428b      	cmp	r3, r1
 80116e6:	d303      	bcc.n	80116f0 <ip6_input+0x2d8>
      hlen_tot = (u16_t)(hlen_tot + hlen);
 80116e8:	440f      	add	r7, r1
 80116ea:	b2bf      	uxth	r7, r7
      opt_offset = IP6_HBH_HLEN;
 80116ec:	2302      	movs	r3, #2
      while (opt_offset < hlen)
 80116ee:	e006      	b.n	80116fe <ip6_input+0x2e6>
        pbuf_free(p);
 80116f0:	4620      	mov	r0, r4
 80116f2:	f7f7 f82f 	bl	8008754 <pbuf_free>
        goto ip6_input_cleanup;
 80116f6:	e7d5      	b.n	80116a4 <ip6_input+0x28c>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 80116f8:	7852      	ldrb	r2, [r2, #1]
        opt_offset = opt_offset + IP6_OPT_HLEN + opt_dlen;
 80116fa:	3302      	adds	r3, #2
 80116fc:	4413      	add	r3, r2
      while (opt_offset < hlen)
 80116fe:	4299      	cmp	r1, r3
 8011700:	dd3a      	ble.n	8011778 <ip6_input+0x360>
        opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + opt_offset);
 8011702:	eb0c 0203 	add.w	r2, ip, r3
        switch (IP6_OPT_TYPE(opt_hdr)) {
 8011706:	f81c 0003 	ldrb.w	r0, [ip, r3]
 801170a:	2801      	cmp	r0, #1
 801170c:	d0f4      	beq.n	80116f8 <ip6_input+0x2e0>
 801170e:	b380      	cbz	r0, 8011772 <ip6_input+0x35a>
 8011710:	2805      	cmp	r0, #5
 8011712:	d011      	beq.n	8011738 <ip6_input+0x320>
 8011714:	28c2      	cmp	r0, #194	; 0xc2
 8011716:	d011      	beq.n	801173c <ip6_input+0x324>
          switch (IP6_OPT_TYPE_ACTION(opt_hdr)) {
 8011718:	0980      	lsrs	r0, r0, #6
 801171a:	2802      	cmp	r0, #2
 801171c:	d014      	beq.n	8011748 <ip6_input+0x330>
 801171e:	2803      	cmp	r0, #3
 8011720:	d01a      	beq.n	8011758 <ip6_input+0x340>
 8011722:	2801      	cmp	r0, #1
 8011724:	d00c      	beq.n	8011740 <ip6_input+0x328>
            opt_dlen = IP6_OPT_DLEN(opt_hdr);
 8011726:	7852      	ldrb	r2, [r2, #1]
          break;
 8011728:	e7e7      	b.n	80116fa <ip6_input+0x2e2>
 801172a:	bf00      	nop
 801172c:	20004bac 	.word	0x20004bac
 8011730:	20008600 	.word	0x20008600
 8011734:	20004bd8 	.word	0x20004bd8
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 8011738:	7852      	ldrb	r2, [r2, #1]
          break;
 801173a:	e7de      	b.n	80116fa <ip6_input+0x2e2>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 801173c:	7852      	ldrb	r2, [r2, #1]
          break;
 801173e:	e7dc      	b.n	80116fa <ip6_input+0x2e2>
            pbuf_free(p);
 8011740:	4620      	mov	r0, r4
 8011742:	f7f7 f807 	bl	8008754 <pbuf_free>
            goto ip6_input_cleanup;
 8011746:	e7ad      	b.n	80116a4 <ip6_input+0x28c>
            icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
 8011748:	2102      	movs	r1, #2
 801174a:	4620      	mov	r0, r4
 801174c:	f7ff fbf2 	bl	8010f34 <icmp6_param_problem>
            pbuf_free(p);
 8011750:	4620      	mov	r0, r4
 8011752:	f7f6 ffff 	bl	8008754 <pbuf_free>
            goto ip6_input_cleanup;
 8011756:	e7a5      	b.n	80116a4 <ip6_input+0x28c>
            if (!ip6_addr_ismulticast(ip6_current_dest_addr())) {
 8011758:	4b84      	ldr	r3, [pc, #528]	; (801196c <ip6_input+0x554>)
 801175a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801175e:	2bff      	cmp	r3, #255	; 0xff
 8011760:	d003      	beq.n	801176a <ip6_input+0x352>
              icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
 8011762:	2102      	movs	r1, #2
 8011764:	4620      	mov	r0, r4
 8011766:	f7ff fbe5 	bl	8010f34 <icmp6_param_problem>
            pbuf_free(p);
 801176a:	4620      	mov	r0, r4
 801176c:	f7f6 fff2 	bl	8008754 <pbuf_free>
            goto ip6_input_cleanup;
 8011770:	e798      	b.n	80116a4 <ip6_input+0x28c>
          opt_dlen = -1;
 8011772:	f04f 32ff 	mov.w	r2, #4294967295
 8011776:	e7c0      	b.n	80116fa <ip6_input+0x2e2>
      pbuf_remove_header(p, hlen);
 8011778:	4620      	mov	r0, r4
 801177a:	f7f6 ffa5 	bl	80086c8 <pbuf_remove_header>
      break;
 801177e:	e05e      	b.n	801183e <ip6_input+0x426>
        pbuf_free(p);
 8011780:	4620      	mov	r0, r4
 8011782:	f7f6 ffe7 	bl	8008754 <pbuf_free>
        goto ip6_input_cleanup;
 8011786:	e78d      	b.n	80116a4 <ip6_input+0x28c>
        switch (IP6_OPT_TYPE(opt_hdr))
 8011788:	28c2      	cmp	r0, #194	; 0xc2
 801178a:	d005      	beq.n	8011798 <ip6_input+0x380>
 801178c:	28c9      	cmp	r0, #201	; 0xc9
 801178e:	d105      	bne.n	801179c <ip6_input+0x384>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 8011790:	7852      	ldrb	r2, [r2, #1]
          break;
 8011792:	e028      	b.n	80117e6 <ip6_input+0x3ce>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 8011794:	7852      	ldrb	r2, [r2, #1]
          break;
 8011796:	e026      	b.n	80117e6 <ip6_input+0x3ce>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 8011798:	7852      	ldrb	r2, [r2, #1]
          break;
 801179a:	e024      	b.n	80117e6 <ip6_input+0x3ce>
          switch (IP6_OPT_TYPE_ACTION(opt_hdr))
 801179c:	0980      	lsrs	r0, r0, #6
 801179e:	2802      	cmp	r0, #2
 80117a0:	d009      	beq.n	80117b6 <ip6_input+0x39e>
 80117a2:	2803      	cmp	r0, #3
 80117a4:	d00f      	beq.n	80117c6 <ip6_input+0x3ae>
 80117a6:	2801      	cmp	r0, #1
 80117a8:	d001      	beq.n	80117ae <ip6_input+0x396>
            opt_dlen = IP6_OPT_DLEN(opt_hdr);
 80117aa:	7852      	ldrb	r2, [r2, #1]
          break;
 80117ac:	e01b      	b.n	80117e6 <ip6_input+0x3ce>
            pbuf_free(p);
 80117ae:	4620      	mov	r0, r4
 80117b0:	f7f6 ffd0 	bl	8008754 <pbuf_free>
            goto ip6_input_cleanup;
 80117b4:	e776      	b.n	80116a4 <ip6_input+0x28c>
            icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
 80117b6:	2102      	movs	r1, #2
 80117b8:	4620      	mov	r0, r4
 80117ba:	f7ff fbbb 	bl	8010f34 <icmp6_param_problem>
            pbuf_free(p);
 80117be:	4620      	mov	r0, r4
 80117c0:	f7f6 ffc8 	bl	8008754 <pbuf_free>
            goto ip6_input_cleanup;
 80117c4:	e76e      	b.n	80116a4 <ip6_input+0x28c>
            if (!ip6_addr_ismulticast(ip6_current_dest_addr())) {
 80117c6:	4b69      	ldr	r3, [pc, #420]	; (801196c <ip6_input+0x554>)
 80117c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80117cc:	2bff      	cmp	r3, #255	; 0xff
 80117ce:	d103      	bne.n	80117d8 <ip6_input+0x3c0>
            pbuf_free(p);
 80117d0:	4620      	mov	r0, r4
 80117d2:	f7f6 ffbf 	bl	8008754 <pbuf_free>
            goto ip6_input_cleanup;
 80117d6:	e765      	b.n	80116a4 <ip6_input+0x28c>
              icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
 80117d8:	2102      	movs	r1, #2
 80117da:	4620      	mov	r0, r4
 80117dc:	f7ff fbaa 	bl	8010f34 <icmp6_param_problem>
 80117e0:	e7f6      	b.n	80117d0 <ip6_input+0x3b8>
          opt_dlen = -1;
 80117e2:	f04f 32ff 	mov.w	r2, #4294967295
        opt_offset = opt_offset + IP6_OPT_HLEN + opt_dlen;
 80117e6:	3302      	adds	r3, #2
 80117e8:	4413      	add	r3, r2
      while (opt_offset < hlen)
 80117ea:	459c      	cmp	ip, r3
 80117ec:	dd0a      	ble.n	8011804 <ip6_input+0x3ec>
        opt_hdr = (struct ip6_opt_hdr *)((u8_t *)dest_hdr + opt_offset);
 80117ee:	18ca      	adds	r2, r1, r3
        switch (IP6_OPT_TYPE(opt_hdr))
 80117f0:	5cc8      	ldrb	r0, [r1, r3]
 80117f2:	2805      	cmp	r0, #5
 80117f4:	d0ce      	beq.n	8011794 <ip6_input+0x37c>
 80117f6:	d8c7      	bhi.n	8011788 <ip6_input+0x370>
 80117f8:	2800      	cmp	r0, #0
 80117fa:	d0f2      	beq.n	80117e2 <ip6_input+0x3ca>
 80117fc:	2801      	cmp	r0, #1
 80117fe:	d1cd      	bne.n	801179c <ip6_input+0x384>
          opt_dlen = IP6_OPT_DLEN(opt_hdr);
 8011800:	7852      	ldrb	r2, [r2, #1]
          break;
 8011802:	e7f0      	b.n	80117e6 <ip6_input+0x3ce>
      pbuf_remove_header(p, hlen);
 8011804:	4661      	mov	r1, ip
 8011806:	4620      	mov	r0, r4
 8011808:	f7f6 ff5e 	bl	80086c8 <pbuf_remove_header>
      break;
 801180c:	e017      	b.n	801183e <ip6_input+0x426>
      rout_hdr = (struct ip6_rout_hdr *)p->payload;
 801180e:	6862      	ldr	r2, [r4, #4]
      nexth = &IP6_ROUT_NEXTH(rout_hdr);
 8011810:	4690      	mov	r8, r2
      hlen = 8 * (1 + rout_hdr->_hlen);
 8011812:	7850      	ldrb	r0, [r2, #1]
 8011814:	1c41      	adds	r1, r0, #1
 8011816:	00c9      	lsls	r1, r1, #3
      if ((p->len < 8) || (hlen > p->len)) {
 8011818:	8963      	ldrh	r3, [r4, #10]
 801181a:	2b07      	cmp	r3, #7
 801181c:	d91d      	bls.n	801185a <ip6_input+0x442>
 801181e:	428b      	cmp	r3, r1
 8011820:	d31b      	bcc.n	801185a <ip6_input+0x442>
      hlen_tot = (u16_t)(hlen_tot + hlen);
 8011822:	440f      	add	r7, r1
 8011824:	b2bf      	uxth	r7, r7
      if (IP6_ROUT_SEG_LEFT(rout_hdr)) {
 8011826:	78d3      	ldrb	r3, [r2, #3]
 8011828:	b133      	cbz	r3, 8011838 <ip6_input+0x420>
        if (rout_hdr->_hlen & 0x1) {
 801182a:	f010 0f01 	tst.w	r0, #1
 801182e:	d118      	bne.n	8011862 <ip6_input+0x44a>
        switch (IP6_ROUT_TYPE(rout_hdr))
 8011830:	7893      	ldrb	r3, [r2, #2]
 8011832:	3b02      	subs	r3, #2
 8011834:	2b01      	cmp	r3, #1
 8011836:	d81d      	bhi.n	8011874 <ip6_input+0x45c>
      pbuf_remove_header(p, hlen);
 8011838:	4620      	mov	r0, r4
 801183a:	f7f6 ff45 	bl	80086c8 <pbuf_remove_header>
    if (*nexth == IP6_NEXTH_HOPBYHOP) {
 801183e:	f898 3000 	ldrb.w	r3, [r8]
 8011842:	2b00      	cmp	r3, #0
 8011844:	f47f af0b 	bne.w	801165e <ip6_input+0x246>
      icmp6_param_problem(p, ICMP6_PP_HEADER, nexth);
 8011848:	4642      	mov	r2, r8
 801184a:	2101      	movs	r1, #1
 801184c:	4620      	mov	r0, r4
 801184e:	f7ff fb71 	bl	8010f34 <icmp6_param_problem>
      pbuf_free(p);
 8011852:	4620      	mov	r0, r4
 8011854:	f7f6 ff7e 	bl	8008754 <pbuf_free>
      goto ip6_input_cleanup;
 8011858:	e724      	b.n	80116a4 <ip6_input+0x28c>
        pbuf_free(p);
 801185a:	4620      	mov	r0, r4
 801185c:	f7f6 ff7a 	bl	8008754 <pbuf_free>
        goto ip6_input_cleanup;
 8011860:	e720      	b.n	80116a4 <ip6_input+0x28c>
          icmp6_param_problem(p, ICMP6_PP_FIELD, &rout_hdr->_hlen);
 8011862:	3201      	adds	r2, #1
 8011864:	2100      	movs	r1, #0
 8011866:	4620      	mov	r0, r4
 8011868:	f7ff fb64 	bl	8010f34 <icmp6_param_problem>
          pbuf_free(p);
 801186c:	4620      	mov	r0, r4
 801186e:	f7f6 ff71 	bl	8008754 <pbuf_free>
          goto ip6_input_cleanup;
 8011872:	e717      	b.n	80116a4 <ip6_input+0x28c>
          icmp6_param_problem(p, ICMP6_PP_FIELD, &IP6_ROUT_TYPE(rout_hdr));
 8011874:	3202      	adds	r2, #2
 8011876:	2100      	movs	r1, #0
 8011878:	4620      	mov	r0, r4
 801187a:	f7ff fb5b 	bl	8010f34 <icmp6_param_problem>
          pbuf_free(p);
 801187e:	4620      	mov	r0, r4
 8011880:	f7f6 ff68 	bl	8008754 <pbuf_free>
          goto ip6_input_cleanup;
 8011884:	e70e      	b.n	80116a4 <ip6_input+0x28c>
      frag_hdr = (struct ip6_frag_hdr *)p->payload;
 8011886:	f8d4 9004 	ldr.w	r9, [r4, #4]
      nexth = &IP6_FRAG_NEXTH(frag_hdr);
 801188a:	46c8      	mov	r8, r9
      if (hlen > p->len) {
 801188c:	8963      	ldrh	r3, [r4, #10]
 801188e:	2b07      	cmp	r3, #7
 8011890:	d913      	bls.n	80118ba <ip6_input+0x4a2>
      hlen_tot = (u16_t)(hlen_tot + hlen);
 8011892:	3708      	adds	r7, #8
 8011894:	b2bf      	uxth	r7, r7
      if (IP6_FRAG_MBIT(frag_hdr) && (IP6H_PLEN(ip6hdr) & 0x7)) {
 8011896:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 801189a:	f7f5 fc99 	bl	80071d0 <lwip_htons>
 801189e:	f010 0f01 	tst.w	r0, #1
 80118a2:	d10e      	bne.n	80118c2 <ip6_input+0x4aa>
      if ((frag_hdr->_fragment_offset &
 80118a4:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 80118a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80118ac:	b29b      	uxth	r3, r3
 80118ae:	b9bb      	cbnz	r3, 80118e0 <ip6_input+0x4c8>
        pbuf_remove_header(p, hlen);
 80118b0:	2108      	movs	r1, #8
 80118b2:	4620      	mov	r0, r4
 80118b4:	f7f6 ff08 	bl	80086c8 <pbuf_remove_header>
 80118b8:	e7c1      	b.n	801183e <ip6_input+0x426>
        pbuf_free(p);
 80118ba:	4620      	mov	r0, r4
 80118bc:	f7f6 ff4a 	bl	8008754 <pbuf_free>
        goto ip6_input_cleanup;
 80118c0:	e6f0      	b.n	80116a4 <ip6_input+0x28c>
      if (IP6_FRAG_MBIT(frag_hdr) && (IP6H_PLEN(ip6hdr) & 0x7)) {
 80118c2:	88a8      	ldrh	r0, [r5, #4]
 80118c4:	f7f5 fc84 	bl	80071d0 <lwip_htons>
 80118c8:	f010 0f07 	tst.w	r0, #7
 80118cc:	d0ea      	beq.n	80118a4 <ip6_input+0x48c>
        icmp6_param_problem(p, ICMP6_PP_FIELD, LWIP_PACKED_CAST(const void *, &ip6hdr->_plen));
 80118ce:	1d2a      	adds	r2, r5, #4
 80118d0:	2100      	movs	r1, #0
 80118d2:	4620      	mov	r0, r4
 80118d4:	f7ff fb2e 	bl	8010f34 <icmp6_param_problem>
        pbuf_free(p);
 80118d8:	4620      	mov	r0, r4
 80118da:	f7f6 ff3b 	bl	8008754 <pbuf_free>
        goto ip6_input_cleanup;
 80118de:	e6e1      	b.n	80116a4 <ip6_input+0x28c>
        ip_data.current_ip_header_tot_len = hlen_tot;
 80118e0:	4b22      	ldr	r3, [pc, #136]	; (801196c <ip6_input+0x554>)
 80118e2:	821f      	strh	r7, [r3, #16]
        p = ip6_reass(p);
 80118e4:	4620      	mov	r0, r4
 80118e6:	f000 fa6b 	bl	8011dc0 <ip6_reass>
        if (p == NULL) {
 80118ea:	4604      	mov	r4, r0
 80118ec:	2800      	cmp	r0, #0
 80118ee:	f43f aed9 	beq.w	80116a4 <ip6_input+0x28c>
        ip6hdr = (struct ip6_hdr *)p->payload;
 80118f2:	6845      	ldr	r5, [r0, #4]
        nexth = &IP6H_NEXTH(ip6hdr);
 80118f4:	f105 0806 	add.w	r8, r5, #6
        pbuf_remove_header(p, IP6_HLEN);
 80118f8:	2128      	movs	r1, #40	; 0x28
 80118fa:	f7f6 fee5 	bl	80086c8 <pbuf_remove_header>
        hlen = hlen_tot = IP6_HLEN;
 80118fe:	2728      	movs	r7, #40	; 0x28
 8011900:	e79d      	b.n	801183e <ip6_input+0x426>
  ip_data.current_ip_header_tot_len = hlen_tot;
 8011902:	4b1a      	ldr	r3, [pc, #104]	; (801196c <ip6_input+0x554>)
 8011904:	821f      	strh	r7, [r3, #16]
    switch (*nexth) {
 8011906:	f898 3000 	ldrb.w	r3, [r8]
 801190a:	2b11      	cmp	r3, #17
 801190c:	d00f      	beq.n	801192e <ip6_input+0x516>
 801190e:	d907      	bls.n	8011920 <ip6_input+0x508>
 8011910:	2b3a      	cmp	r3, #58	; 0x3a
 8011912:	d011      	beq.n	8011938 <ip6_input+0x520>
 8011914:	2b3b      	cmp	r3, #59	; 0x3b
 8011916:	d114      	bne.n	8011942 <ip6_input+0x52a>
      pbuf_free(p);
 8011918:	4620      	mov	r0, r4
 801191a:	f7f6 ff1b 	bl	8008754 <pbuf_free>
      break;
 801191e:	e6c1      	b.n	80116a4 <ip6_input+0x28c>
    switch (*nexth) {
 8011920:	2b06      	cmp	r3, #6
 8011922:	d10e      	bne.n	8011942 <ip6_input+0x52a>
      tcp_input(p, inp);
 8011924:	4631      	mov	r1, r6
 8011926:	4620      	mov	r0, r4
 8011928:	f7f9 fe6c 	bl	800b604 <tcp_input>
      break;
 801192c:	e6ba      	b.n	80116a4 <ip6_input+0x28c>
      udp_input(p, inp);
 801192e:	4631      	mov	r1, r6
 8011930:	4620      	mov	r0, r4
 8011932:	f7fb fc5b 	bl	800d1ec <udp_input>
      break;
 8011936:	e6b5      	b.n	80116a4 <ip6_input+0x28c>
      icmp6_input(p, inp);
 8011938:	4631      	mov	r1, r6
 801193a:	4620      	mov	r0, r4
 801193c:	f7ff fa8c 	bl	8010e58 <icmp6_input>
      break;
 8011940:	e6b0      	b.n	80116a4 <ip6_input+0x28c>
        pbuf_add_header_force(p, hlen_tot);
 8011942:	4639      	mov	r1, r7
 8011944:	4620      	mov	r0, r4
 8011946:	f7f6 feb9 	bl	80086bc <pbuf_add_header_force>
        if ((!ip6_addr_ismulticast(ip6_current_dest_addr())) &&
 801194a:	4b08      	ldr	r3, [pc, #32]	; (801196c <ip6_input+0x554>)
 801194c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011950:	2bff      	cmp	r3, #255	; 0xff
 8011952:	d007      	beq.n	8011964 <ip6_input+0x54c>
            (IP6H_NEXTH(ip6hdr) != IP6_NEXTH_ICMP6)) {
 8011954:	79ab      	ldrb	r3, [r5, #6]
        if ((!ip6_addr_ismulticast(ip6_current_dest_addr())) &&
 8011956:	2b3a      	cmp	r3, #58	; 0x3a
 8011958:	d004      	beq.n	8011964 <ip6_input+0x54c>
          icmp6_param_problem(p, ICMP6_PP_HEADER, nexth);
 801195a:	4642      	mov	r2, r8
 801195c:	2101      	movs	r1, #1
 801195e:	4620      	mov	r0, r4
 8011960:	f7ff fae8 	bl	8010f34 <icmp6_param_problem>
      pbuf_free(p);
 8011964:	4620      	mov	r0, r4
 8011966:	f7f6 fef5 	bl	8008754 <pbuf_free>
      break;
 801196a:	e69b      	b.n	80116a4 <ip6_input+0x28c>
 801196c:	20004bac 	.word	0x20004bac

08011970 <ip6_output_if_src>:
 */
err_t
ip6_output_if_src(struct pbuf *p, const ip6_addr_t *src, const ip6_addr_t *dest,
             u8_t hl, u8_t tc,
             u8_t nexth, struct netif *netif)
{
 8011970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011974:	b087      	sub	sp, #28
 8011976:	4606      	mov	r6, r0
 8011978:	460f      	mov	r7, r1
 801197a:	4615      	mov	r5, r2
 801197c:	4699      	mov	r9, r3
 801197e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  struct ip6_hdr *ip6hdr;
  ip6_addr_t dest_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011982:	7b83      	ldrb	r3, [r0, #14]
 8011984:	2b01      	cmp	r3, #1
 8011986:	d131      	bne.n	80119ec <ip6_output_if_src+0x7c>

  /* Should the IPv6 header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011988:	2d00      	cmp	r5, #0
 801198a:	f000 8083 	beq.w	8011a94 <ip6_output_if_src+0x124>
     * based on the outgoing interface. The lower layers (e.g., nd6) absolutely
     * require addresses to be properly zoned for correctness. In some cases,
     * earlier attempts will have been made to add a zone to the destination,
     * but this function is the only one that is called in all (other) cases,
     * so we must do this here. */
    if (ip6_addr_lacks_zone(dest, IP6_UNKNOWN)) {
 801198e:	7c2b      	ldrb	r3, [r5, #16]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d13a      	bne.n	8011a0a <ip6_output_if_src+0x9a>
 8011994:	682b      	ldr	r3, [r5, #0]
 8011996:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 801199a:	401a      	ands	r2, r3
 801199c:	f248 01fe 	movw	r1, #33022	; 0x80fe
 80119a0:	428a      	cmp	r2, r1
 80119a2:	d00a      	beq.n	80119ba <ip6_output_if_src+0x4a>
 80119a4:	f648 71ff 	movw	r1, #36863	; 0x8fff
 80119a8:	4019      	ands	r1, r3
 80119aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80119ae:	4281      	cmp	r1, r0
 80119b0:	d003      	beq.n	80119ba <ip6_output_if_src+0x4a>
 80119b2:	f240 20ff 	movw	r0, #767	; 0x2ff
 80119b6:	4281      	cmp	r1, r0
 80119b8:	d127      	bne.n	8011a0a <ip6_output_if_src+0x9a>
      ip6_addr_copy(dest_addr, *dest);
 80119ba:	9301      	str	r3, [sp, #4]
 80119bc:	6869      	ldr	r1, [r5, #4]
 80119be:	9102      	str	r1, [sp, #8]
 80119c0:	68a9      	ldr	r1, [r5, #8]
 80119c2:	9103      	str	r1, [sp, #12]
 80119c4:	68e9      	ldr	r1, [r5, #12]
 80119c6:	9104      	str	r1, [sp, #16]
      ip6_addr_assign_zone(&dest_addr, IP6_UNKNOWN, netif);
 80119c8:	f248 01fe 	movw	r1, #33022	; 0x80fe
 80119cc:	428a      	cmp	r2, r1
 80119ce:	d015      	beq.n	80119fc <ip6_output_if_src+0x8c>
 80119d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80119d4:	041b      	lsls	r3, r3, #16
 80119d6:	0c1b      	lsrs	r3, r3, #16
 80119d8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80119dc:	4293      	cmp	r3, r2
 80119de:	d00d      	beq.n	80119fc <ip6_output_if_src+0x8c>
 80119e0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80119e4:	4293      	cmp	r3, r2
 80119e6:	d009      	beq.n	80119fc <ip6_output_if_src+0x8c>
 80119e8:	2300      	movs	r3, #0
 80119ea:	e00b      	b.n	8011a04 <ip6_output_if_src+0x94>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80119ec:	4b44      	ldr	r3, [pc, #272]	; (8011b00 <ip6_output_if_src+0x190>)
 80119ee:	f240 429d 	movw	r2, #1181	; 0x49d
 80119f2:	4944      	ldr	r1, [pc, #272]	; (8011b04 <ip6_output_if_src+0x194>)
 80119f4:	4844      	ldr	r0, [pc, #272]	; (8011b08 <ip6_output_if_src+0x198>)
 80119f6:	f003 fa25 	bl	8014e44 <iprintf>
 80119fa:	e7c5      	b.n	8011988 <ip6_output_if_src+0x18>
      ip6_addr_assign_zone(&dest_addr, IP6_UNKNOWN, netif);
 80119fc:	f898 30de 	ldrb.w	r3, [r8, #222]	; 0xde
 8011a00:	3301      	adds	r3, #1
 8011a02:	b2db      	uxtb	r3, r3
 8011a04:	f88d 3014 	strb.w	r3, [sp, #20]
      dest = &dest_addr;
 8011a08:	ad01      	add	r5, sp, #4
    }
#endif /* LWIP_IPV6_SCOPES */

    /* generate IPv6 header */
    if (pbuf_add_header(p, IP6_HLEN)) {
 8011a0a:	2128      	movs	r1, #40	; 0x28
 8011a0c:	4630      	mov	r0, r6
 8011a0e:	f7f6 fe50 	bl	80086b2 <pbuf_add_header>
 8011a12:	2800      	cmp	r0, #0
 8011a14:	d171      	bne.n	8011afa <ip6_output_if_src+0x18a>
      LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip6_output: not enough room for IPv6 header in pbuf\n"));
      IP6_STATS_INC(ip6.err);
      return ERR_BUF;
    }

    ip6hdr = (struct ip6_hdr *)p->payload;
 8011a16:	6874      	ldr	r4, [r6, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip6_hdr",
 8011a18:	8973      	ldrh	r3, [r6, #10]
 8011a1a:	2b27      	cmp	r3, #39	; 0x27
 8011a1c:	d930      	bls.n	8011a80 <ip6_output_if_src+0x110>
               (p->len >= sizeof(struct ip6_hdr)));

    IP6H_HOPLIM_SET(ip6hdr, hl);
 8011a1e:	f884 9007 	strb.w	r9, [r4, #7]
    IP6H_NEXTH_SET(ip6hdr, nexth);
 8011a22:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8011a26:	71a3      	strb	r3, [r4, #6]

    /* dest cannot be NULL here */
    ip6_addr_copy_to_packed(ip6hdr->dest, *dest);
 8011a28:	682b      	ldr	r3, [r5, #0]
 8011a2a:	61a3      	str	r3, [r4, #24]
 8011a2c:	686b      	ldr	r3, [r5, #4]
 8011a2e:	61e3      	str	r3, [r4, #28]
 8011a30:	68ab      	ldr	r3, [r5, #8]
 8011a32:	6223      	str	r3, [r4, #32]
 8011a34:	68eb      	ldr	r3, [r5, #12]
 8011a36:	6263      	str	r3, [r4, #36]	; 0x24

    IP6H_VTCFL_SET(ip6hdr, 6, tc, 0);
 8011a38:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8011a3c:	0500      	lsls	r0, r0, #20
 8011a3e:	f040 40c0 	orr.w	r0, r0, #1610612736	; 0x60000000
 8011a42:	f7f5 fbca 	bl	80071da <lwip_htonl>
 8011a46:	6020      	str	r0, [r4, #0]
    IP6H_PLEN_SET(ip6hdr, (u16_t)(p->tot_len - IP6_HLEN));
 8011a48:	8930      	ldrh	r0, [r6, #8]
 8011a4a:	3828      	subs	r0, #40	; 0x28
 8011a4c:	b280      	uxth	r0, r0
 8011a4e:	f7f5 fbbf 	bl	80071d0 <lwip_htons>
 8011a52:	80a0      	strh	r0, [r4, #4]

    if (src == NULL) {
 8011a54:	b1e7      	cbz	r7, 8011a90 <ip6_output_if_src+0x120>
      src = IP6_ADDR_ANY6;
    }
    /* src cannot be NULL here */
    ip6_addr_copy_to_packed(ip6hdr->src, *src);
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	60a3      	str	r3, [r4, #8]
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	60e3      	str	r3, [r4, #12]
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	6123      	str	r3, [r4, #16]
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	6163      	str	r3, [r4, #20]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if LWIP_IPV6_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif_mtu6(netif) && (p->tot_len > nd6_get_destination_mtu(dest, netif))) {
 8011a66:	f8b8 30d2 	ldrh.w	r3, [r8, #210]	; 0xd2
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d138      	bne.n	8011ae0 <ip6_output_if_src+0x170>
    return ip6_frag(p, netif, dest);
  }
#endif /* LWIP_IPV6_FRAG */

  LWIP_DEBUGF(IP6_DEBUG, ("netif->output_ip6()\n"));
  return netif->output_ip6(netif, p, dest);
 8011a6e:	f8d8 30bc 	ldr.w	r3, [r8, #188]	; 0xbc
 8011a72:	462a      	mov	r2, r5
 8011a74:	4631      	mov	r1, r6
 8011a76:	4640      	mov	r0, r8
 8011a78:	4798      	blx	r3
}
 8011a7a:	b007      	add	sp, #28
 8011a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip6_hdr",
 8011a80:	4b1f      	ldr	r3, [pc, #124]	; (8011b00 <ip6_output_if_src+0x190>)
 8011a82:	f44f 6297 	mov.w	r2, #1208	; 0x4b8
 8011a86:	4921      	ldr	r1, [pc, #132]	; (8011b0c <ip6_output_if_src+0x19c>)
 8011a88:	481f      	ldr	r0, [pc, #124]	; (8011b08 <ip6_output_if_src+0x198>)
 8011a8a:	f003 f9db 	bl	8014e44 <iprintf>
 8011a8e:	e7c6      	b.n	8011a1e <ip6_output_if_src+0xae>
      src = IP6_ADDR_ANY6;
 8011a90:	4f1f      	ldr	r7, [pc, #124]	; (8011b10 <ip6_output_if_src+0x1a0>)
 8011a92:	e7e0      	b.n	8011a56 <ip6_output_if_src+0xe6>
    ip6hdr = (struct ip6_hdr *)p->payload;
 8011a94:	6872      	ldr	r2, [r6, #4]
    ip6_addr_copy_from_packed(dest_addr, ip6hdr->dest);
 8011a96:	6993      	ldr	r3, [r2, #24]
 8011a98:	9301      	str	r3, [sp, #4]
 8011a9a:	69d1      	ldr	r1, [r2, #28]
 8011a9c:	9102      	str	r1, [sp, #8]
 8011a9e:	6a11      	ldr	r1, [r2, #32]
 8011aa0:	9103      	str	r1, [sp, #12]
 8011aa2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011aa4:	9204      	str	r2, [sp, #16]
    ip6_addr_assign_zone(&dest_addr, IP6_UNKNOWN, netif);
 8011aa6:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8011aaa:	4019      	ands	r1, r3
 8011aac:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8011ab0:	4291      	cmp	r1, r2
 8011ab2:	d00d      	beq.n	8011ad0 <ip6_output_if_src+0x160>
 8011ab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011ab8:	041b      	lsls	r3, r3, #16
 8011aba:	0c1b      	lsrs	r3, r3, #16
 8011abc:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011ac0:	4293      	cmp	r3, r2
 8011ac2:	d005      	beq.n	8011ad0 <ip6_output_if_src+0x160>
 8011ac4:	f240 22ff 	movw	r2, #767	; 0x2ff
 8011ac8:	4293      	cmp	r3, r2
 8011aca:	d001      	beq.n	8011ad0 <ip6_output_if_src+0x160>
 8011acc:	2300      	movs	r3, #0
 8011ace:	e003      	b.n	8011ad8 <ip6_output_if_src+0x168>
 8011ad0:	f898 30de 	ldrb.w	r3, [r8, #222]	; 0xde
 8011ad4:	3301      	adds	r3, #1
 8011ad6:	b2db      	uxtb	r3, r3
 8011ad8:	f88d 3014 	strb.w	r3, [sp, #20]
    dest = &dest_addr;
 8011adc:	ad01      	add	r5, sp, #4
 8011ade:	e7c2      	b.n	8011a66 <ip6_output_if_src+0xf6>
  if (netif_mtu6(netif) && (p->tot_len > nd6_get_destination_mtu(dest, netif))) {
 8011ae0:	8934      	ldrh	r4, [r6, #8]
 8011ae2:	4641      	mov	r1, r8
 8011ae4:	4628      	mov	r0, r5
 8011ae6:	f002 ff43 	bl	8014970 <nd6_get_destination_mtu>
 8011aea:	4284      	cmp	r4, r0
 8011aec:	d9bf      	bls.n	8011a6e <ip6_output_if_src+0xfe>
    return ip6_frag(p, netif, dest);
 8011aee:	462a      	mov	r2, r5
 8011af0:	4641      	mov	r1, r8
 8011af2:	4630      	mov	r0, r6
 8011af4:	f000 fb78 	bl	80121e8 <ip6_frag>
 8011af8:	e7bf      	b.n	8011a7a <ip6_output_if_src+0x10a>
      return ERR_BUF;
 8011afa:	f06f 0001 	mvn.w	r0, #1
 8011afe:	e7bc      	b.n	8011a7a <ip6_output_if_src+0x10a>
 8011b00:	08018abc 	.word	0x08018abc
 8011b04:	080187b0 	.word	0x080187b0
 8011b08:	08015d2c 	.word	0x08015d2c
 8011b0c:	08018af0 	.word	0x08018af0
 8011b10:	08018b20 	.word	0x08018b20

08011b14 <ip6_output_if>:
{
 8011b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b16:	b085      	sub	sp, #20
 8011b18:	4606      	mov	r6, r0
 8011b1a:	461f      	mov	r7, r3
 8011b1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (dest != LWIP_IP_HDRINCL) {
 8011b1e:	4614      	mov	r4, r2
 8011b20:	b142      	cbz	r2, 8011b34 <ip6_output_if+0x20>
    if (src != NULL && ip6_addr_isany(src)) {
 8011b22:	b139      	cbz	r1, 8011b34 <ip6_output_if+0x20>
 8011b24:	680b      	ldr	r3, [r1, #0]
 8011b26:	b92b      	cbnz	r3, 8011b34 <ip6_output_if+0x20>
 8011b28:	684b      	ldr	r3, [r1, #4]
 8011b2a:	b91b      	cbnz	r3, 8011b34 <ip6_output_if+0x20>
 8011b2c:	688b      	ldr	r3, [r1, #8]
 8011b2e:	b90b      	cbnz	r3, 8011b34 <ip6_output_if+0x20>
 8011b30:	68cb      	ldr	r3, [r1, #12]
 8011b32:	b16b      	cbz	r3, 8011b50 <ip6_output_if+0x3c>
  return ip6_output_if_src(p, src_used, dest, hl, tc, nexth, netif);
 8011b34:	9502      	str	r5, [sp, #8]
 8011b36:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8011b3a:	9301      	str	r3, [sp, #4]
 8011b3c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8011b40:	9300      	str	r3, [sp, #0]
 8011b42:	463b      	mov	r3, r7
 8011b44:	4622      	mov	r2, r4
 8011b46:	4630      	mov	r0, r6
 8011b48:	f7ff ff12 	bl	8011970 <ip6_output_if_src>
}
 8011b4c:	b005      	add	sp, #20
 8011b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      src_used = ip_2_ip6(ip6_select_source_address(netif, dest));
 8011b50:	4611      	mov	r1, r2
 8011b52:	4628      	mov	r0, r5
 8011b54:	f7ff fba2 	bl	801129c <ip6_select_source_address>
 8011b58:	4601      	mov	r1, r0
      if ((src_used == NULL) || ip6_addr_isany(src_used)) {
 8011b5a:	b170      	cbz	r0, 8011b7a <ip6_output_if+0x66>
 8011b5c:	6803      	ldr	r3, [r0, #0]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d1e8      	bne.n	8011b34 <ip6_output_if+0x20>
 8011b62:	6843      	ldr	r3, [r0, #4]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d1e5      	bne.n	8011b34 <ip6_output_if+0x20>
 8011b68:	6883      	ldr	r3, [r0, #8]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d1e2      	bne.n	8011b34 <ip6_output_if+0x20>
 8011b6e:	68c3      	ldr	r3, [r0, #12]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d1df      	bne.n	8011b34 <ip6_output_if+0x20>
        return ERR_RTE;
 8011b74:	f06f 0003 	mvn.w	r0, #3
 8011b78:	e7e8      	b.n	8011b4c <ip6_output_if+0x38>
 8011b7a:	f06f 0003 	mvn.w	r0, #3
 8011b7e:	e7e5      	b.n	8011b4c <ip6_output_if+0x38>

08011b80 <ip6_options_add_hbh_ra>:
 * @param value the value of the router alert option data (e.g. IP6_ROUTER_ALERT_VALUE_MLD)
 * @return ERR_OK if hop-by-hop header was added, ERR_* otherwise
 */
err_t
ip6_options_add_hbh_ra(struct pbuf *p, u8_t nexth, u8_t value)
{
 8011b80:	b570      	push	{r4, r5, r6, lr}
 8011b82:	4606      	mov	r6, r0
 8011b84:	460d      	mov	r5, r1
 8011b86:	4614      	mov	r4, r2
  struct ip6_opt_hdr *opt_hdr;

  /* fixed 4 bytes for router alert option and 2 bytes padding */
  const u8_t hlen = (sizeof(struct ip6_opt_hdr) * 2) + IP6_ROUTER_ALERT_DLEN;
  /* Move pointer to make room for hop-by-hop options header. */
  if (pbuf_add_header(p, sizeof(struct ip6_hbh_hdr) + hlen)) {
 8011b88:	2108      	movs	r1, #8
 8011b8a:	f7f6 fd92 	bl	80086b2 <pbuf_add_header>
 8011b8e:	b960      	cbnz	r0, 8011baa <ip6_options_add_hbh_ra+0x2a>
    IP6_STATS_INC(ip6.err);
    return ERR_BUF;
  }

  /* Set fields of Hop-by-Hop header */
  hbh_hdr = (struct ip6_hbh_hdr *)p->payload;
 8011b90:	6873      	ldr	r3, [r6, #4]
  IP6_HBH_NEXTH(hbh_hdr) = nexth;
 8011b92:	701d      	strb	r5, [r3, #0]
  hbh_hdr->_hlen = 0;
 8011b94:	7058      	strb	r0, [r3, #1]
  offset = IP6_HBH_HLEN;

  /* Set router alert options to Hop-by-Hop extended option header */
  opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + offset);
  IP6_OPT_TYPE(opt_hdr) = IP6_ROUTER_ALERT_OPTION;
 8011b96:	2205      	movs	r2, #5
 8011b98:	709a      	strb	r2, [r3, #2]
  IP6_OPT_DLEN(opt_hdr) = IP6_ROUTER_ALERT_DLEN;
 8011b9a:	2202      	movs	r2, #2
 8011b9c:	70da      	strb	r2, [r3, #3]
  offset += IP6_OPT_HLEN;

  /* Set router alert option data */
  opt_data = (u8_t *)hbh_hdr + offset;
  opt_data[0] = value;
 8011b9e:	711c      	strb	r4, [r3, #4]
  opt_data[1] = 0;
 8011ba0:	7158      	strb	r0, [r3, #5]
  offset += IP6_OPT_DLEN(opt_hdr);

  /* add 2 bytes padding to make 8 bytes Hop-by-Hop header length */
  opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + offset);
  IP6_OPT_TYPE(opt_hdr) = IP6_PADN_OPTION;
 8011ba2:	2101      	movs	r1, #1
 8011ba4:	7199      	strb	r1, [r3, #6]
  IP6_OPT_DLEN(opt_hdr) = 0;
 8011ba6:	71d8      	strb	r0, [r3, #7]

  return ERR_OK;
}
 8011ba8:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_BUF;
 8011baa:	f06f 0001 	mvn.w	r0, #1
 8011bae:	e7fb      	b.n	8011ba8 <ip6_options_add_hbh_ra+0x28>

08011bb0 <ip6_reass_free_complete_datagram>:
 *
 * @param ipr datagram to free
 */
static void
ip6_reass_free_complete_datagram(struct ip6_reassdata *ipr)
{
 8011bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bb4:	b08a      	sub	sp, #40	; 0x28
 8011bb6:	4607      	mov	r7, r0
  u16_t clen;
  struct pbuf *p;
  struct ip6_reass_helper *iprh;

#if LWIP_ICMP6
  iprh = (struct ip6_reass_helper *)ipr->p->payload;
 8011bb8:	6844      	ldr	r4, [r0, #4]
 8011bba:	6863      	ldr	r3, [r4, #4]
  if (iprh->start == 0) {
 8011bbc:	889a      	ldrh	r2, [r3, #4]
 8011bbe:	b112      	cbz	r2, 8011bc6 <ip6_reass_free_complete_datagram+0x16>
  u16_t pbufs_freed = 0;
 8011bc0:	2600      	movs	r6, #0
  }
#endif /* LWIP_ICMP6 */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011bc2:	687c      	ldr	r4, [r7, #4]
  while (p != NULL) {
 8011bc4:	e03e      	b.n	8011c44 <ip6_reass_free_complete_datagram+0x94>
    ipr->p = iprh->next_pbuf;
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	6043      	str	r3, [r0, #4]
    MEMCPY(p->payload, ipr->orig_hdr, sizeof(iprh));
 8011bca:	6863      	ldr	r3, [r4, #4]
 8011bcc:	68c2      	ldr	r2, [r0, #12]
 8011bce:	601a      	str	r2, [r3, #0]
    if (pbuf_header_force(p, (s16_t)((u8_t*)p->payload - (u8_t*)ipr->iphdr))) {
 8011bd0:	6861      	ldr	r1, [r4, #4]
 8011bd2:	6883      	ldr	r3, [r0, #8]
 8011bd4:	1ac9      	subs	r1, r1, r3
 8011bd6:	b209      	sxth	r1, r1
 8011bd8:	4620      	mov	r0, r4
 8011bda:	f7f6 fdb5 	bl	8008748 <pbuf_header_force>
 8011bde:	b168      	cbz	r0, 8011bfc <ip6_reass_free_complete_datagram+0x4c>
      LWIP_ASSERT("ip6_reass_free: moving p->payload to ip6 header failed\n", 0);
 8011be0:	4b35      	ldr	r3, [pc, #212]	; (8011cb8 <ip6_reass_free_complete_datagram+0x108>)
 8011be2:	22a9      	movs	r2, #169	; 0xa9
 8011be4:	4935      	ldr	r1, [pc, #212]	; (8011cbc <ip6_reass_free_complete_datagram+0x10c>)
 8011be6:	4836      	ldr	r0, [pc, #216]	; (8011cc0 <ip6_reass_free_complete_datagram+0x110>)
 8011be8:	f003 f92c 	bl	8014e44 <iprintf>
    clen = pbuf_clen(p);
 8011bec:	4620      	mov	r0, r4
 8011bee:	f7f6 ff15 	bl	8008a1c <pbuf_clen>
 8011bf2:	4606      	mov	r6, r0
    pbuf_free(p);
 8011bf4:	4620      	mov	r0, r4
 8011bf6:	f7f6 fdad 	bl	8008754 <pbuf_free>
 8011bfa:	e7e2      	b.n	8011bc2 <ip6_reass_free_complete_datagram+0x12>
      ip6_addr_copy_from_packed(src_addr, IPV6_FRAG_SRC(ipr));
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	689a      	ldr	r2, [r3, #8]
 8011c00:	9200      	str	r2, [sp, #0]
 8011c02:	68da      	ldr	r2, [r3, #12]
 8011c04:	9201      	str	r2, [sp, #4]
 8011c06:	691a      	ldr	r2, [r3, #16]
 8011c08:	9202      	str	r2, [sp, #8]
 8011c0a:	695a      	ldr	r2, [r3, #20]
 8011c0c:	9203      	str	r2, [sp, #12]
      ip6_addr_set_zone(&src_addr, ipr->src_zone);
 8011c0e:	7f3a      	ldrb	r2, [r7, #28]
 8011c10:	f88d 2010 	strb.w	r2, [sp, #16]
      ip6_addr_copy_from_packed(dest_addr, IPV6_FRAG_DEST(ipr));
 8011c14:	699a      	ldr	r2, [r3, #24]
 8011c16:	9205      	str	r2, [sp, #20]
 8011c18:	69da      	ldr	r2, [r3, #28]
 8011c1a:	9206      	str	r2, [sp, #24]
 8011c1c:	6a1a      	ldr	r2, [r3, #32]
 8011c1e:	9207      	str	r2, [sp, #28]
 8011c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c22:	9308      	str	r3, [sp, #32]
      ip6_addr_set_zone(&dest_addr, ipr->dest_zone);
 8011c24:	7f7b      	ldrb	r3, [r7, #29]
 8011c26:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
      icmp6_time_exceeded_with_addrs(p, ICMP6_TE_FRAG, &src_addr, &dest_addr);
 8011c2a:	ab05      	add	r3, sp, #20
 8011c2c:	466a      	mov	r2, sp
 8011c2e:	2101      	movs	r1, #1
 8011c30:	4620      	mov	r0, r4
 8011c32:	f7ff f973 	bl	8010f1c <icmp6_time_exceeded_with_addrs>
 8011c36:	e7d9      	b.n	8011bec <ip6_reass_free_complete_datagram+0x3c>
    pcur = p;
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
    clen = pbuf_clen(pcur);
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011c38:	4435      	add	r5, r6
 8011c3a:	b2ae      	uxth	r6, r5
    pbuf_free(pcur);
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	f7f6 fd89 	bl	8008754 <pbuf_free>
    p = iprh->next_pbuf;
 8011c42:	4644      	mov	r4, r8
  while (p != NULL) {
 8011c44:	b18c      	cbz	r4, 8011c6a <ip6_reass_free_complete_datagram+0xba>
    iprh = (struct ip6_reass_helper *)p->payload;
 8011c46:	6863      	ldr	r3, [r4, #4]
    p = iprh->next_pbuf;
 8011c48:	f8d3 8000 	ldr.w	r8, [r3]
    clen = pbuf_clen(pcur);
 8011c4c:	4620      	mov	r0, r4
 8011c4e:	f7f6 fee5 	bl	8008a1c <pbuf_clen>
 8011c52:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011c54:	1833      	adds	r3, r6, r0
 8011c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c5a:	dbed      	blt.n	8011c38 <ip6_reass_free_complete_datagram+0x88>
 8011c5c:	4b16      	ldr	r3, [pc, #88]	; (8011cb8 <ip6_reass_free_complete_datagram+0x108>)
 8011c5e:	22c7      	movs	r2, #199	; 0xc7
 8011c60:	4918      	ldr	r1, [pc, #96]	; (8011cc4 <ip6_reass_free_complete_datagram+0x114>)
 8011c62:	4817      	ldr	r0, [pc, #92]	; (8011cc0 <ip6_reass_free_complete_datagram+0x110>)
 8011c64:	f003 f8ee 	bl	8014e44 <iprintf>
 8011c68:	e7e6      	b.n	8011c38 <ip6_reass_free_complete_datagram+0x88>
  }

  /* Then, unchain the struct ip6_reassdata from the list and free it. */
  if (ipr == reassdatagrams) {
 8011c6a:	4b17      	ldr	r3, [pc, #92]	; (8011cc8 <ip6_reass_free_complete_datagram+0x118>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	42bb      	cmp	r3, r7
 8011c70:	d005      	beq.n	8011c7e <ip6_reass_free_complete_datagram+0xce>
    reassdatagrams = ipr->next;
  } else {
    prev = reassdatagrams;
    while (prev != NULL) {
 8011c72:	b143      	cbz	r3, 8011c86 <ip6_reass_free_complete_datagram+0xd6>
      if (prev->next == ipr) {
 8011c74:	681a      	ldr	r2, [r3, #0]
 8011c76:	42ba      	cmp	r2, r7
 8011c78:	d005      	beq.n	8011c86 <ip6_reass_free_complete_datagram+0xd6>
        break;
      }
      prev = prev->next;
 8011c7a:	4613      	mov	r3, r2
 8011c7c:	e7f9      	b.n	8011c72 <ip6_reass_free_complete_datagram+0xc2>
    reassdatagrams = ipr->next;
 8011c7e:	683a      	ldr	r2, [r7, #0]
 8011c80:	4b11      	ldr	r3, [pc, #68]	; (8011cc8 <ip6_reass_free_complete_datagram+0x118>)
 8011c82:	601a      	str	r2, [r3, #0]
 8011c84:	e002      	b.n	8011c8c <ip6_reass_free_complete_datagram+0xdc>
    }
    if (prev != NULL) {
 8011c86:	b10b      	cbz	r3, 8011c8c <ip6_reass_free_complete_datagram+0xdc>
      prev->next = ipr->next;
 8011c88:	683a      	ldr	r2, [r7, #0]
 8011c8a:	601a      	str	r2, [r3, #0]
    }
  }
  memp_free(MEMP_IP6_REASSDATA, ipr);
 8011c8c:	4639      	mov	r1, r7
 8011c8e:	2008      	movs	r0, #8
 8011c90:	f7f6 f8d2 	bl	8007e38 <memp_free>

  /* Finally, update number of pbufs in reassembly queue */
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip6_reass_pbufcount >= pbufs_freed);
 8011c94:	4b0d      	ldr	r3, [pc, #52]	; (8011ccc <ip6_reass_free_complete_datagram+0x11c>)
 8011c96:	881b      	ldrh	r3, [r3, #0]
 8011c98:	42b3      	cmp	r3, r6
 8011c9a:	d306      	bcc.n	8011caa <ip6_reass_free_complete_datagram+0xfa>
  ip6_reass_pbufcount = (u16_t)(ip6_reass_pbufcount - pbufs_freed);
 8011c9c:	4b0b      	ldr	r3, [pc, #44]	; (8011ccc <ip6_reass_free_complete_datagram+0x11c>)
 8011c9e:	881d      	ldrh	r5, [r3, #0]
 8011ca0:	1bad      	subs	r5, r5, r6
 8011ca2:	801d      	strh	r5, [r3, #0]
}
 8011ca4:	b00a      	add	sp, #40	; 0x28
 8011ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip6_reass_pbufcount >= pbufs_freed);
 8011caa:	4b03      	ldr	r3, [pc, #12]	; (8011cb8 <ip6_reass_free_complete_datagram+0x108>)
 8011cac:	22de      	movs	r2, #222	; 0xde
 8011cae:	4908      	ldr	r1, [pc, #32]	; (8011cd0 <ip6_reass_free_complete_datagram+0x120>)
 8011cb0:	4803      	ldr	r0, [pc, #12]	; (8011cc0 <ip6_reass_free_complete_datagram+0x110>)
 8011cb2:	f003 f8c7 	bl	8014e44 <iprintf>
 8011cb6:	e7f1      	b.n	8011c9c <ip6_reass_free_complete_datagram+0xec>
 8011cb8:	08018bfc 	.word	0x08018bfc
 8011cbc:	08018c38 	.word	0x08018c38
 8011cc0:	08015d2c 	.word	0x08015d2c
 8011cc4:	080189b4 	.word	0x080189b4
 8011cc8:	200018a0 	.word	0x200018a0
 8011ccc:	2000189c 	.word	0x2000189c
 8011cd0:	08018868 	.word	0x08018868

08011cd4 <ip6_reass_remove_oldest_datagram>:
 * @param pbufs_needed number of pbufs needed to enqueue
 *        (used for freeing other datagrams if not enough space)
 */
static void
ip6_reass_remove_oldest_datagram(struct ip6_reassdata *ipr, int pbufs_needed)
{
 8011cd4:	b538      	push	{r3, r4, r5, lr}
 8011cd6:	4604      	mov	r4, r0
 8011cd8:	460d      	mov	r5, r1
 8011cda:	e016      	b.n	8011d0a <ip6_reass_remove_oldest_datagram+0x36>
        if (r->timer <= oldest->timer) {
          /* older than the previous oldest */
          oldest = r;
        }
      }
      r = r->next;
 8011cdc:	681b      	ldr	r3, [r3, #0]
    while (r != NULL) {
 8011cde:	b13b      	cbz	r3, 8011cf0 <ip6_reass_remove_oldest_datagram+0x1c>
      if (r != ipr) {
 8011ce0:	42a3      	cmp	r3, r4
 8011ce2:	d0fb      	beq.n	8011cdc <ip6_reass_remove_oldest_datagram+0x8>
        if (r->timer <= oldest->timer) {
 8011ce4:	7ed9      	ldrb	r1, [r3, #27]
 8011ce6:	7ec2      	ldrb	r2, [r0, #27]
 8011ce8:	4291      	cmp	r1, r2
 8011cea:	d8f7      	bhi.n	8011cdc <ip6_reass_remove_oldest_datagram+0x8>
          oldest = r;
 8011cec:	4618      	mov	r0, r3
 8011cee:	e7f5      	b.n	8011cdc <ip6_reass_remove_oldest_datagram+0x8>
    }
    if (oldest == ipr) {
 8011cf0:	42a0      	cmp	r0, r4
 8011cf2:	d00e      	beq.n	8011d12 <ip6_reass_remove_oldest_datagram+0x3e>
      /* nothing to free, ipr is the only element on the list */
      return;
    }
    if (oldest != NULL) {
 8011cf4:	b108      	cbz	r0, 8011cfa <ip6_reass_remove_oldest_datagram+0x26>
      ip6_reass_free_complete_datagram(oldest);
 8011cf6:	f7ff ff5b 	bl	8011bb0 <ip6_reass_free_complete_datagram>
    }
  } while (((ip6_reass_pbufcount + pbufs_needed) > IP_REASS_MAX_PBUFS) && (reassdatagrams != NULL));
 8011cfa:	4b06      	ldr	r3, [pc, #24]	; (8011d14 <ip6_reass_remove_oldest_datagram+0x40>)
 8011cfc:	881b      	ldrh	r3, [r3, #0]
 8011cfe:	442b      	add	r3, r5
 8011d00:	2b0a      	cmp	r3, #10
 8011d02:	dd06      	ble.n	8011d12 <ip6_reass_remove_oldest_datagram+0x3e>
 8011d04:	4b04      	ldr	r3, [pc, #16]	; (8011d18 <ip6_reass_remove_oldest_datagram+0x44>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	b11b      	cbz	r3, 8011d12 <ip6_reass_remove_oldest_datagram+0x3e>
    r = oldest = reassdatagrams;
 8011d0a:	4b03      	ldr	r3, [pc, #12]	; (8011d18 <ip6_reass_remove_oldest_datagram+0x44>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	4618      	mov	r0, r3
    while (r != NULL) {
 8011d10:	e7e5      	b.n	8011cde <ip6_reass_remove_oldest_datagram+0xa>
}
 8011d12:	bd38      	pop	{r3, r4, r5, pc}
 8011d14:	2000189c 	.word	0x2000189c
 8011d18:	200018a0 	.word	0x200018a0

08011d1c <ip6_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip6_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8011d1c:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8011d1e:	4604      	mov	r4, r0
 8011d20:	b120      	cbz	r0, 8011d2c <ip6_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 8011d22:	4621      	mov	r1, r4
 8011d24:	2005      	movs	r0, #5
 8011d26:	f7f6 f887 	bl	8007e38 <memp_free>
}
 8011d2a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8011d2c:	4b03      	ldr	r3, [pc, #12]	; (8011d3c <ip6_frag_free_pbuf_custom_ref+0x20>)
 8011d2e:	f44f 722c 	mov.w	r2, #688	; 0x2b0
 8011d32:	4903      	ldr	r1, [pc, #12]	; (8011d40 <ip6_frag_free_pbuf_custom_ref+0x24>)
 8011d34:	4803      	ldr	r0, [pc, #12]	; (8011d44 <ip6_frag_free_pbuf_custom_ref+0x28>)
 8011d36:	f003 f885 	bl	8014e44 <iprintf>
 8011d3a:	e7f2      	b.n	8011d22 <ip6_frag_free_pbuf_custom_ref+0x6>
 8011d3c:	08018bfc 	.word	0x08018bfc
 8011d40:	080181b4 	.word	0x080181b4
 8011d44:	08015d2c 	.word	0x08015d2c

08011d48 <ip6_frag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ip6_frag_free_pbuf_custom(struct pbuf *p)
{
 8011d48:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011d4a:	4604      	mov	r4, r0
 8011d4c:	b138      	cbz	r0, 8011d5e <ip6_frag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 8011d4e:	6960      	ldr	r0, [r4, #20]
 8011d50:	b108      	cbz	r0, 8011d56 <ip6_frag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 8011d52:	f7f6 fcff 	bl	8008754 <pbuf_free>
  }
  ip6_frag_free_pbuf_custom_ref(pcr);
 8011d56:	4620      	mov	r0, r4
 8011d58:	f7ff ffe0 	bl	8011d1c <ip6_frag_free_pbuf_custom_ref>
}
 8011d5c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011d5e:	4b04      	ldr	r3, [pc, #16]	; (8011d70 <ip6_frag_free_pbuf_custom+0x28>)
 8011d60:	f240 22ba 	movw	r2, #698	; 0x2ba
 8011d64:	4903      	ldr	r1, [pc, #12]	; (8011d74 <ip6_frag_free_pbuf_custom+0x2c>)
 8011d66:	4804      	ldr	r0, [pc, #16]	; (8011d78 <ip6_frag_free_pbuf_custom+0x30>)
 8011d68:	f003 f86c 	bl	8014e44 <iprintf>
 8011d6c:	e7ef      	b.n	8011d4e <ip6_frag_free_pbuf_custom+0x6>
 8011d6e:	bf00      	nop
 8011d70:	08018bfc 	.word	0x08018bfc
 8011d74:	080189f8 	.word	0x080189f8
 8011d78:	08015d2c 	.word	0x08015d2c

08011d7c <ip6_frag_alloc_pbuf_custom_ref>:
{
 8011d7c:	b508      	push	{r3, lr}
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8011d7e:	2005      	movs	r0, #5
 8011d80:	f7f6 f840 	bl	8007e04 <memp_malloc>
}
 8011d84:	bd08      	pop	{r3, pc}
	...

08011d88 <ip6_reass_tmr>:
  r = reassdatagrams;
 8011d88:	4b0c      	ldr	r3, [pc, #48]	; (8011dbc <ip6_reass_tmr+0x34>)
 8011d8a:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8011d8c:	b130      	cbz	r0, 8011d9c <ip6_reass_tmr+0x14>
    if (r->timer > 0) {
 8011d8e:	7ec3      	ldrb	r3, [r0, #27]
 8011d90:	b12b      	cbz	r3, 8011d9e <ip6_reass_tmr+0x16>
      r->timer--;
 8011d92:	3b01      	subs	r3, #1
 8011d94:	76c3      	strb	r3, [r0, #27]
      r = r->next;
 8011d96:	6800      	ldr	r0, [r0, #0]
 8011d98:	e7f8      	b.n	8011d8c <ip6_reass_tmr+0x4>
}
 8011d9a:	bd10      	pop	{r4, pc}
 8011d9c:	4770      	bx	lr
{
 8011d9e:	b510      	push	{r4, lr}
      r = r->next;
 8011da0:	6804      	ldr	r4, [r0, #0]
      ip6_reass_free_complete_datagram(tmp);
 8011da2:	f7ff ff05 	bl	8011bb0 <ip6_reass_free_complete_datagram>
      r = r->next;
 8011da6:	4620      	mov	r0, r4
  while (r != NULL) {
 8011da8:	2800      	cmp	r0, #0
 8011daa:	d0f6      	beq.n	8011d9a <ip6_reass_tmr+0x12>
    if (r->timer > 0) {
 8011dac:	7ec3      	ldrb	r3, [r0, #27]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d0f6      	beq.n	8011da0 <ip6_reass_tmr+0x18>
      r->timer--;
 8011db2:	3b01      	subs	r3, #1
 8011db4:	76c3      	strb	r3, [r0, #27]
      r = r->next;
 8011db6:	6800      	ldr	r0, [r0, #0]
 8011db8:	e7f6      	b.n	8011da8 <ip6_reass_tmr+0x20>
 8011dba:	bf00      	nop
 8011dbc:	200018a0 	.word	0x200018a0

08011dc0 <ip6_reass>:
{
 8011dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dc4:	b085      	sub	sp, #20
 8011dc6:	4682      	mov	sl, r0
  LWIP_ASSERT("IPv6 fragment header does not fit in first pbuf",
 8011dc8:	8943      	ldrh	r3, [r0, #10]
 8011dca:	2b07      	cmp	r3, #7
 8011dcc:	d92f      	bls.n	8011e2e <ip6_reass+0x6e>
  frag_hdr = (struct ip6_frag_hdr *) p->payload;
 8011dce:	f8da 7004 	ldr.w	r7, [sl, #4]
  clen = pbuf_clen(p);
 8011dd2:	4650      	mov	r0, sl
 8011dd4:	f7f6 fe22 	bl	8008a1c <pbuf_clen>
 8011dd8:	4683      	mov	fp, r0
  offset = lwip_ntohs(frag_hdr->_fragment_offset);
 8011dda:	8878      	ldrh	r0, [r7, #2]
 8011ddc:	f7f5 f9f8 	bl	80071d0 <lwip_htons>
 8011de0:	9001      	str	r0, [sp, #4]
  len = lwip_ntohs(ip6_current_header()->_plen);
 8011de2:	4da8      	ldr	r5, [pc, #672]	; (8012084 <ip6_reass+0x2c4>)
 8011de4:	68eb      	ldr	r3, [r5, #12]
 8011de6:	8898      	ldrh	r0, [r3, #4]
 8011de8:	f7f5 f9f2 	bl	80071d0 <lwip_htons>
 8011dec:	4680      	mov	r8, r0
  hdrdiff = (u8_t*)p->payload - (const u8_t*)ip6_current_header();
 8011dee:	f8da 4004 	ldr.w	r4, [sl, #4]
 8011df2:	68eb      	ldr	r3, [r5, #12]
 8011df4:	1ae4      	subs	r4, r4, r3
  LWIP_ASSERT("not a valid pbuf (ip6_input check missing?)", hdrdiff <= 0xFFFF);
 8011df6:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8011dfa:	da20      	bge.n	8011e3e <ip6_reass+0x7e>
  LWIP_ASSERT("not a valid pbuf (ip6_input check missing?)", hdrdiff >= IP6_HLEN);
 8011dfc:	2c27      	cmp	r4, #39	; 0x27
 8011dfe:	dd26      	ble.n	8011e4e <ip6_reass+0x8e>
  hdrdiff += IP6_FRAG_HLEN;
 8011e00:	3c20      	subs	r4, #32
  if (hdrdiff > len) {
 8011e02:	45a0      	cmp	r8, r4
 8011e04:	f2c0 80c7 	blt.w	8011f96 <ip6_reass+0x1d6>
  len = (u16_t)(len - hdrdiff);
 8011e08:	b2a4      	uxth	r4, r4
 8011e0a:	eba8 0404 	sub.w	r4, r8, r4
 8011e0e:	fa1f f884 	uxth.w	r8, r4
  start = (offset & IP6_FRAG_OFFSET_MASK);
 8011e12:	9b01      	ldr	r3, [sp, #4]
 8011e14:	f023 0607 	bic.w	r6, r3, #7
 8011e18:	b2b6      	uxth	r6, r6
  if (start > (0xFFFF - len)) {
 8011e1a:	f5c8 437f 	rsb	r3, r8, #65280	; 0xff00
 8011e1e:	33ff      	adds	r3, #255	; 0xff
 8011e20:	429e      	cmp	r6, r3
 8011e22:	f300 80b8 	bgt.w	8011f96 <ip6_reass+0x1d6>
  for (ipr = reassdatagrams, ipr_prev = NULL; ipr != NULL; ipr = ipr->next) {
 8011e26:	4b98      	ldr	r3, [pc, #608]	; (8012088 <ip6_reass+0x2c8>)
 8011e28:	681c      	ldr	r4, [r3, #0]
 8011e2a:	2500      	movs	r5, #0
 8011e2c:	e019      	b.n	8011e62 <ip6_reass+0xa2>
  LWIP_ASSERT("IPv6 fragment header does not fit in first pbuf",
 8011e2e:	4b97      	ldr	r3, [pc, #604]	; (801208c <ip6_reass+0x2cc>)
 8011e30:	f240 121f 	movw	r2, #287	; 0x11f
 8011e34:	4996      	ldr	r1, [pc, #600]	; (8012090 <ip6_reass+0x2d0>)
 8011e36:	4897      	ldr	r0, [pc, #604]	; (8012094 <ip6_reass+0x2d4>)
 8011e38:	f003 f804 	bl	8014e44 <iprintf>
 8011e3c:	e7c7      	b.n	8011dce <ip6_reass+0xe>
  LWIP_ASSERT("not a valid pbuf (ip6_input check missing?)", hdrdiff <= 0xFFFF);
 8011e3e:	4b93      	ldr	r3, [pc, #588]	; (801208c <ip6_reass+0x2cc>)
 8011e40:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8011e44:	4994      	ldr	r1, [pc, #592]	; (8012098 <ip6_reass+0x2d8>)
 8011e46:	4893      	ldr	r0, [pc, #588]	; (8012094 <ip6_reass+0x2d4>)
 8011e48:	f002 fffc 	bl	8014e44 <iprintf>
 8011e4c:	e7d6      	b.n	8011dfc <ip6_reass+0x3c>
  LWIP_ASSERT("not a valid pbuf (ip6_input check missing?)", hdrdiff >= IP6_HLEN);
 8011e4e:	4b8f      	ldr	r3, [pc, #572]	; (801208c <ip6_reass+0x2cc>)
 8011e50:	f240 122d 	movw	r2, #301	; 0x12d
 8011e54:	4990      	ldr	r1, [pc, #576]	; (8012098 <ip6_reass+0x2d8>)
 8011e56:	488f      	ldr	r0, [pc, #572]	; (8012094 <ip6_reass+0x2d4>)
 8011e58:	f002 fff4 	bl	8014e44 <iprintf>
 8011e5c:	e7d0      	b.n	8011e00 <ip6_reass+0x40>
    ipr_prev = ipr;
 8011e5e:	4625      	mov	r5, r4
  for (ipr = reassdatagrams, ipr_prev = NULL; ipr != NULL; ipr = ipr->next) {
 8011e60:	6824      	ldr	r4, [r4, #0]
 8011e62:	2c00      	cmp	r4, #0
 8011e64:	d038      	beq.n	8011ed8 <ip6_reass+0x118>
    if ((frag_hdr->_identification == ipr->identification) &&
 8011e66:	687a      	ldr	r2, [r7, #4]
 8011e68:	6963      	ldr	r3, [r4, #20]
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d1f7      	bne.n	8011e5e <ip6_reass+0x9e>
        ip6_addr_cmp_packed(ip6_current_src_addr(), &(IPV6_FRAG_SRC(ipr)), ipr->src_zone) &&
 8011e6e:	4b85      	ldr	r3, [pc, #532]	; (8012084 <ip6_reass+0x2c4>)
 8011e70:	6959      	ldr	r1, [r3, #20]
 8011e72:	68a3      	ldr	r3, [r4, #8]
 8011e74:	689a      	ldr	r2, [r3, #8]
    if ((frag_hdr->_identification == ipr->identification) &&
 8011e76:	4291      	cmp	r1, r2
 8011e78:	d1f1      	bne.n	8011e5e <ip6_reass+0x9e>
        ip6_addr_cmp_packed(ip6_current_src_addr(), &(IPV6_FRAG_SRC(ipr)), ipr->src_zone) &&
 8011e7a:	4a82      	ldr	r2, [pc, #520]	; (8012084 <ip6_reass+0x2c4>)
 8011e7c:	6991      	ldr	r1, [r2, #24]
 8011e7e:	68da      	ldr	r2, [r3, #12]
 8011e80:	4291      	cmp	r1, r2
 8011e82:	d1ec      	bne.n	8011e5e <ip6_reass+0x9e>
 8011e84:	4a7f      	ldr	r2, [pc, #508]	; (8012084 <ip6_reass+0x2c4>)
 8011e86:	69d1      	ldr	r1, [r2, #28]
 8011e88:	691a      	ldr	r2, [r3, #16]
 8011e8a:	4291      	cmp	r1, r2
 8011e8c:	d1e7      	bne.n	8011e5e <ip6_reass+0x9e>
 8011e8e:	4a7d      	ldr	r2, [pc, #500]	; (8012084 <ip6_reass+0x2c4>)
 8011e90:	6a11      	ldr	r1, [r2, #32]
 8011e92:	695a      	ldr	r2, [r3, #20]
 8011e94:	4291      	cmp	r1, r2
 8011e96:	d1e2      	bne.n	8011e5e <ip6_reass+0x9e>
 8011e98:	4a7a      	ldr	r2, [pc, #488]	; (8012084 <ip6_reass+0x2c4>)
 8011e9a:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
 8011e9e:	7f22      	ldrb	r2, [r4, #28]
 8011ea0:	4291      	cmp	r1, r2
 8011ea2:	d1dc      	bne.n	8011e5e <ip6_reass+0x9e>
        ip6_addr_cmp_packed(ip6_current_dest_addr(), &(IPV6_FRAG_DEST(ipr)), ipr->dest_zone)) {
 8011ea4:	4a77      	ldr	r2, [pc, #476]	; (8012084 <ip6_reass+0x2c4>)
 8011ea6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8011ea8:	699a      	ldr	r2, [r3, #24]
        ip6_addr_cmp_packed(ip6_current_src_addr(), &(IPV6_FRAG_SRC(ipr)), ipr->src_zone) &&
 8011eaa:	4291      	cmp	r1, r2
 8011eac:	d1d7      	bne.n	8011e5e <ip6_reass+0x9e>
        ip6_addr_cmp_packed(ip6_current_dest_addr(), &(IPV6_FRAG_DEST(ipr)), ipr->dest_zone)) {
 8011eae:	4a75      	ldr	r2, [pc, #468]	; (8012084 <ip6_reass+0x2c4>)
 8011eb0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8011eb2:	69da      	ldr	r2, [r3, #28]
 8011eb4:	4291      	cmp	r1, r2
 8011eb6:	d1d2      	bne.n	8011e5e <ip6_reass+0x9e>
 8011eb8:	4a72      	ldr	r2, [pc, #456]	; (8012084 <ip6_reass+0x2c4>)
 8011eba:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8011ebc:	6a1a      	ldr	r2, [r3, #32]
 8011ebe:	4291      	cmp	r1, r2
 8011ec0:	d1cd      	bne.n	8011e5e <ip6_reass+0x9e>
 8011ec2:	4a70      	ldr	r2, [pc, #448]	; (8012084 <ip6_reass+0x2c4>)
 8011ec4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	d1c8      	bne.n	8011e5e <ip6_reass+0x9e>
 8011ecc:	4b6d      	ldr	r3, [pc, #436]	; (8012084 <ip6_reass+0x2c4>)
 8011ece:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8011ed2:	7f63      	ldrb	r3, [r4, #29]
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	d1c2      	bne.n	8011e5e <ip6_reass+0x9e>
  if (ipr == NULL) {
 8011ed8:	b18c      	cbz	r4, 8011efe <ip6_reass+0x13e>
  if ((ip6_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011eda:	4b70      	ldr	r3, [pc, #448]	; (801209c <ip6_reass+0x2dc>)
 8011edc:	881b      	ldrh	r3, [r3, #0]
 8011ede:	445b      	add	r3, fp
 8011ee0:	2b0a      	cmp	r3, #10
 8011ee2:	dc3e      	bgt.n	8011f62 <ip6_reass+0x1a2>
  iprh = (struct ip6_reass_helper *)p->payload;
 8011ee4:	f8da 7004 	ldr.w	r7, [sl, #4]
  end = (u16_t)(start + len);
 8011ee8:	44b0      	add	r8, r6
 8011eea:	fa1f f388 	uxth.w	r3, r8
 8011eee:	9302      	str	r3, [sp, #8]
  for (q = ipr->p; q != NULL;) {
 8011ef0:	6862      	ldr	r2, [r4, #4]
  u8_t valid = 1;
 8011ef2:	f04f 0901 	mov.w	r9, #1
  struct ip6_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8011ef6:	f04f 0800 	mov.w	r8, #0
 8011efa:	4640      	mov	r0, r8
  for (q = ipr->p; q != NULL;) {
 8011efc:	e05d      	b.n	8011fba <ip6_reass+0x1fa>
    ipr = (struct ip6_reassdata *)memp_malloc(MEMP_IP6_REASSDATA);
 8011efe:	2008      	movs	r0, #8
 8011f00:	f7f5 ff80 	bl	8007e04 <memp_malloc>
    if (ipr == NULL) {
 8011f04:	4604      	mov	r4, r0
 8011f06:	b1d8      	cbz	r0, 8011f40 <ip6_reass+0x180>
    memset(ipr, 0, sizeof(struct ip6_reassdata));
 8011f08:	2200      	movs	r2, #0
 8011f0a:	6062      	str	r2, [r4, #4]
 8011f0c:	60a2      	str	r2, [r4, #8]
 8011f0e:	60e2      	str	r2, [r4, #12]
 8011f10:	6122      	str	r2, [r4, #16]
 8011f12:	6162      	str	r2, [r4, #20]
 8011f14:	61a2      	str	r2, [r4, #24]
 8011f16:	61e2      	str	r2, [r4, #28]
    ipr->timer = IPV6_REASS_MAXAGE;
 8011f18:	233c      	movs	r3, #60	; 0x3c
 8011f1a:	76e3      	strb	r3, [r4, #27]
    ipr->next = reassdatagrams;
 8011f1c:	4b5a      	ldr	r3, [pc, #360]	; (8012088 <ip6_reass+0x2c8>)
 8011f1e:	681a      	ldr	r2, [r3, #0]
 8011f20:	6022      	str	r2, [r4, #0]
    reassdatagrams = ipr;
 8011f22:	601c      	str	r4, [r3, #0]
    ipr->iphdr = ip_data.current_ip6_header;
 8011f24:	4b57      	ldr	r3, [pc, #348]	; (8012084 <ip6_reass+0x2c4>)
 8011f26:	68da      	ldr	r2, [r3, #12]
 8011f28:	60a2      	str	r2, [r4, #8]
    ipr->src_zone = ip6_addr_zone(ip6_current_src_addr());
 8011f2a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8011f2e:	7722      	strb	r2, [r4, #28]
    ipr->dest_zone = ip6_addr_zone(ip6_current_dest_addr());
 8011f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011f34:	7763      	strb	r3, [r4, #29]
    ipr->identification = frag_hdr->_identification;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	6163      	str	r3, [r4, #20]
    ipr->nexth = frag_hdr->_nexth;
 8011f3a:	783b      	ldrb	r3, [r7, #0]
 8011f3c:	76a3      	strb	r3, [r4, #26]
 8011f3e:	e7cc      	b.n	8011eda <ip6_reass+0x11a>
      ip6_reass_remove_oldest_datagram(ipr, clen);
 8011f40:	4659      	mov	r1, fp
 8011f42:	f7ff fec7 	bl	8011cd4 <ip6_reass_remove_oldest_datagram>
      ipr = (struct ip6_reassdata *)memp_malloc(MEMP_IP6_REASSDATA);
 8011f46:	2008      	movs	r0, #8
 8011f48:	f7f5 ff5c 	bl	8007e04 <memp_malloc>
      if (ipr != NULL) {
 8011f4c:	4604      	mov	r4, r0
 8011f4e:	b310      	cbz	r0, 8011f96 <ip6_reass+0x1d6>
        for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011f50:	4b4d      	ldr	r3, [pc, #308]	; (8012088 <ip6_reass+0x2c8>)
 8011f52:	681d      	ldr	r5, [r3, #0]
 8011f54:	2d00      	cmp	r5, #0
 8011f56:	d0d7      	beq.n	8011f08 <ip6_reass+0x148>
          if (ipr_prev->next == ipr) {
 8011f58:	682b      	ldr	r3, [r5, #0]
 8011f5a:	42a3      	cmp	r3, r4
 8011f5c:	d0d4      	beq.n	8011f08 <ip6_reass+0x148>
        for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011f5e:	461d      	mov	r5, r3
 8011f60:	e7f8      	b.n	8011f54 <ip6_reass+0x194>
    ip6_reass_remove_oldest_datagram(ipr, clen);
 8011f62:	4659      	mov	r1, fp
 8011f64:	4620      	mov	r0, r4
 8011f66:	f7ff feb5 	bl	8011cd4 <ip6_reass_remove_oldest_datagram>
    if ((ip6_reass_pbufcount + clen) <= IP_REASS_MAX_PBUFS) {
 8011f6a:	4b4c      	ldr	r3, [pc, #304]	; (801209c <ip6_reass+0x2dc>)
 8011f6c:	881b      	ldrh	r3, [r3, #0]
 8011f6e:	445b      	add	r3, fp
 8011f70:	2b0a      	cmp	r3, #10
 8011f72:	dc10      	bgt.n	8011f96 <ip6_reass+0x1d6>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011f74:	4b44      	ldr	r3, [pc, #272]	; (8012088 <ip6_reass+0x2c8>)
 8011f76:	681d      	ldr	r5, [r3, #0]
 8011f78:	2d00      	cmp	r5, #0
 8011f7a:	d0b3      	beq.n	8011ee4 <ip6_reass+0x124>
        if (ipr_prev->next == ipr) {
 8011f7c:	682b      	ldr	r3, [r5, #0]
 8011f7e:	42a3      	cmp	r3, r4
 8011f80:	d0b0      	beq.n	8011ee4 <ip6_reass+0x124>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011f82:	461d      	mov	r5, r3
 8011f84:	e7f8      	b.n	8011f78 <ip6_reass+0x1b8>
 8011f86:	4680      	mov	r8, r0
      if (end > iprh_tmp->start) {
 8011f88:	9b02      	ldr	r3, [sp, #8]
 8011f8a:	4299      	cmp	r1, r3
 8011f8c:	d303      	bcc.n	8011f96 <ip6_reass+0x1d6>
      if (iprh_prev != NULL) {
 8011f8e:	b138      	cbz	r0, 8011fa0 <ip6_reass+0x1e0>
        if (start < iprh_prev->end) {
 8011f90:	88c3      	ldrh	r3, [r0, #6]
 8011f92:	42b3      	cmp	r3, r6
 8011f94:	d904      	bls.n	8011fa0 <ip6_reass+0x1e0>
  pbuf_free(p);
 8011f96:	4650      	mov	r0, sl
 8011f98:	f7f6 fbdc 	bl	8008754 <pbuf_free>
  return NULL;
 8011f9c:	2700      	movs	r7, #0
 8011f9e:	e0ee      	b.n	801217e <ip6_reass+0x3be>
      if (iprh_prev != NULL) {
 8011fa0:	f1b8 0f00 	cmp.w	r8, #0
 8011fa4:	d003      	beq.n	8011fae <ip6_reass+0x1ee>
        iprh_prev->next_pbuf = p;
 8011fa6:	f8c8 a000 	str.w	sl, [r8]
      next_pbuf = q;
 8011faa:	9203      	str	r2, [sp, #12]
 8011fac:	e019      	b.n	8011fe2 <ip6_reass+0x222>
        ipr->p = p;
 8011fae:	f8c4 a004 	str.w	sl, [r4, #4]
      next_pbuf = q;
 8011fb2:	9203      	str	r2, [sp, #12]
 8011fb4:	e015      	b.n	8011fe2 <ip6_reass+0x222>
    q = iprh_tmp->next_pbuf;
 8011fb6:	681a      	ldr	r2, [r3, #0]
    iprh_prev = iprh_tmp;
 8011fb8:	4618      	mov	r0, r3
  for (q = ipr->p; q != NULL;) {
 8011fba:	b182      	cbz	r2, 8011fde <ip6_reass+0x21e>
    iprh_tmp = (struct ip6_reass_helper*)q->payload;
 8011fbc:	6853      	ldr	r3, [r2, #4]
    if (start < iprh_tmp->start) {
 8011fbe:	8899      	ldrh	r1, [r3, #4]
 8011fc0:	42b1      	cmp	r1, r6
 8011fc2:	d8e0      	bhi.n	8011f86 <ip6_reass+0x1c6>
    } else if (start == iprh_tmp->start) {
 8011fc4:	42b1      	cmp	r1, r6
 8011fc6:	d0e6      	beq.n	8011f96 <ip6_reass+0x1d6>
    } else if (start < iprh_tmp->end) {
 8011fc8:	88da      	ldrh	r2, [r3, #6]
 8011fca:	42b2      	cmp	r2, r6
 8011fcc:	d8e3      	bhi.n	8011f96 <ip6_reass+0x1d6>
      if (iprh_prev != NULL) {
 8011fce:	2800      	cmp	r0, #0
 8011fd0:	d0f1      	beq.n	8011fb6 <ip6_reass+0x1f6>
        if (iprh_prev->end != iprh_tmp->start) {
 8011fd2:	88c2      	ldrh	r2, [r0, #6]
 8011fd4:	4291      	cmp	r1, r2
 8011fd6:	d0ee      	beq.n	8011fb6 <ip6_reass+0x1f6>
          valid = 0;
 8011fd8:	f04f 0900 	mov.w	r9, #0
 8011fdc:	e7eb      	b.n	8011fb6 <ip6_reass+0x1f6>
 8011fde:	4680      	mov	r8, r0
  next_pbuf = NULL;
 8011fe0:	9203      	str	r2, [sp, #12]
  if (q == NULL) {
 8011fe2:	b352      	cbz	r2, 801203a <ip6_reass+0x27a>
  ip6_reass_pbufcount = (u16_t)(ip6_reass_pbufcount + clen);
 8011fe4:	4b2d      	ldr	r3, [pc, #180]	; (801209c <ip6_reass+0x2dc>)
 8011fe6:	881a      	ldrh	r2, [r3, #0]
 8011fe8:	4493      	add	fp, r2
 8011fea:	f8a3 b000 	strh.w	fp, [r3]
  if (start == 0) {
 8011fee:	2e00      	cmp	r6, #0
 8011ff0:	d05a      	beq.n	80120a8 <ip6_reass+0x2e8>
  iprh->next_pbuf = next_pbuf;
 8011ff2:	9b03      	ldr	r3, [sp, #12]
 8011ff4:	603b      	str	r3, [r7, #0]
  iprh->start = start;
 8011ff6:	80be      	strh	r6, [r7, #4]
  iprh->end = end;
 8011ff8:	9b02      	ldr	r3, [sp, #8]
 8011ffa:	80fb      	strh	r3, [r7, #6]
  if ((offset & IP6_FRAG_MORE_FLAG) == 0) {
 8011ffc:	9a01      	ldr	r2, [sp, #4]
 8011ffe:	f012 0f01 	tst.w	r2, #1
 8012002:	d100      	bne.n	8012006 <ip6_reass+0x246>
    ipr->datagram_len = iprh->end;
 8012004:	8323      	strh	r3, [r4, #24]
  iprh_tmp = (struct ip6_reass_helper*)ipr->p->payload;
 8012006:	6863      	ldr	r3, [r4, #4]
 8012008:	f8d3 8004 	ldr.w	r8, [r3, #4]
  if (iprh_tmp->start != 0) {
 801200c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8012010:	b10b      	cbz	r3, 8012016 <ip6_reass+0x256>
    valid = 0;
 8012012:	f04f 0900 	mov.w	r9, #0
  if (ipr->datagram_len == 0) {
 8012016:	8b23      	ldrh	r3, [r4, #24]
 8012018:	b90b      	cbnz	r3, 801201e <ip6_reass+0x25e>
    valid = 0;
 801201a:	f04f 0900 	mov.w	r9, #0
  q = iprh->next_pbuf;
 801201e:	683a      	ldr	r2, [r7, #0]
 8012020:	4648      	mov	r0, r9
  while ((q != NULL) && valid) {
 8012022:	2a00      	cmp	r2, #0
 8012024:	d04f      	beq.n	80120c6 <ip6_reass+0x306>
 8012026:	2800      	cmp	r0, #0
 8012028:	d048      	beq.n	80120bc <ip6_reass+0x2fc>
    iprh = (struct ip6_reass_helper*)q->payload;
 801202a:	6853      	ldr	r3, [r2, #4]
    if (iprh_prev->end != iprh->start) {
 801202c:	88f9      	ldrh	r1, [r7, #6]
 801202e:	889a      	ldrh	r2, [r3, #4]
 8012030:	4291      	cmp	r1, r2
 8012032:	d145      	bne.n	80120c0 <ip6_reass+0x300>
    q = iprh->next_pbuf;
 8012034:	681a      	ldr	r2, [r3, #0]
    iprh_prev = iprh;
 8012036:	461f      	mov	r7, r3
 8012038:	e7f3      	b.n	8012022 <ip6_reass+0x262>
    if (iprh_prev != NULL) {
 801203a:	f1b8 0f00 	cmp.w	r8, #0
 801203e:	d014      	beq.n	801206a <ip6_reass+0x2aa>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= start);
 8012040:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8012044:	42b3      	cmp	r3, r6
 8012046:	d808      	bhi.n	801205a <ip6_reass+0x29a>
      iprh_prev->next_pbuf = p;
 8012048:	f8c8 a000 	str.w	sl, [r8]
      if (iprh_prev->end != start) {
 801204c:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8012050:	42b3      	cmp	r3, r6
 8012052:	d0c7      	beq.n	8011fe4 <ip6_reass+0x224>
        valid = 0;
 8012054:	f04f 0900 	mov.w	r9, #0
 8012058:	e7c4      	b.n	8011fe4 <ip6_reass+0x224>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= start);
 801205a:	4b0c      	ldr	r3, [pc, #48]	; (801208c <ip6_reass+0x2cc>)
 801205c:	f240 12e9 	movw	r2, #489	; 0x1e9
 8012060:	490f      	ldr	r1, [pc, #60]	; (80120a0 <ip6_reass+0x2e0>)
 8012062:	480c      	ldr	r0, [pc, #48]	; (8012094 <ip6_reass+0x2d4>)
 8012064:	f002 feee 	bl	8014e44 <iprintf>
 8012068:	e7ee      	b.n	8012048 <ip6_reass+0x288>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801206a:	6863      	ldr	r3, [r4, #4]
 801206c:	b133      	cbz	r3, 801207c <ip6_reass+0x2bc>
 801206e:	4b07      	ldr	r3, [pc, #28]	; (801208c <ip6_reass+0x2cc>)
 8012070:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 8012074:	490b      	ldr	r1, [pc, #44]	; (80120a4 <ip6_reass+0x2e4>)
 8012076:	4807      	ldr	r0, [pc, #28]	; (8012094 <ip6_reass+0x2d4>)
 8012078:	f002 fee4 	bl	8014e44 <iprintf>
      ipr->p = p;
 801207c:	f8c4 a004 	str.w	sl, [r4, #4]
 8012080:	e7b0      	b.n	8011fe4 <ip6_reass+0x224>
 8012082:	bf00      	nop
 8012084:	20004bac 	.word	0x20004bac
 8012088:	200018a0 	.word	0x200018a0
 801208c:	08018bfc 	.word	0x08018bfc
 8012090:	08018b50 	.word	0x08018b50
 8012094:	08015d2c 	.word	0x08015d2c
 8012098:	08018b80 	.word	0x08018b80
 801209c:	2000189c 	.word	0x2000189c
 80120a0:	080188b0 	.word	0x080188b0
 80120a4:	080188d0 	.word	0x080188d0
    ipr->iphdr = ip_data.current_ip6_header;
 80120a8:	4b47      	ldr	r3, [pc, #284]	; (80121c8 <ip6_reass+0x408>)
 80120aa:	68db      	ldr	r3, [r3, #12]
 80120ac:	60a3      	str	r3, [r4, #8]
    MEMCPY(ipr->orig_hdr, p->payload, sizeof(*iprh));
 80120ae:	f8da 3004 	ldr.w	r3, [sl, #4]
 80120b2:	681a      	ldr	r2, [r3, #0]
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	60e2      	str	r2, [r4, #12]
 80120b8:	6123      	str	r3, [r4, #16]
 80120ba:	e79a      	b.n	8011ff2 <ip6_reass+0x232>
 80120bc:	4681      	mov	r9, r0
 80120be:	e003      	b.n	80120c8 <ip6_reass+0x308>
      valid = 0;
 80120c0:	f04f 0900 	mov.w	r9, #0
 80120c4:	e000      	b.n	80120c8 <ip6_reass+0x308>
 80120c6:	4681      	mov	r9, r0
  if (valid) {
 80120c8:	f1b9 0f00 	cmp.w	r9, #0
 80120cc:	d00d      	beq.n	80120ea <ip6_reass+0x32a>
 80120ce:	4647      	mov	r7, r8
    while (iprh != NULL) {
 80120d0:	b16f      	cbz	r7, 80120ee <ip6_reass+0x32e>
      next_pbuf = iprh->next_pbuf;
 80120d2:	683e      	ldr	r6, [r7, #0]
      if (next_pbuf != NULL) {
 80120d4:	b15e      	cbz	r6, 80120ee <ip6_reass+0x32e>
        iprh_tmp = (struct ip6_reass_helper*)next_pbuf->payload;
 80120d6:	6877      	ldr	r7, [r6, #4]
        pbuf_remove_header(next_pbuf, IP6_FRAG_HLEN);
 80120d8:	2108      	movs	r1, #8
 80120da:	4630      	mov	r0, r6
 80120dc:	f7f6 faf4 	bl	80086c8 <pbuf_remove_header>
        pbuf_cat(ipr->p, next_pbuf);
 80120e0:	4631      	mov	r1, r6
 80120e2:	6860      	ldr	r0, [r4, #4]
 80120e4:	f7f6 fcbc 	bl	8008a60 <pbuf_cat>
 80120e8:	e7f2      	b.n	80120d0 <ip6_reass+0x310>
  return NULL;
 80120ea:	2700      	movs	r7, #0
 80120ec:	e047      	b.n	801217e <ip6_reass+0x3be>
    p = ipr->p;
 80120ee:	6867      	ldr	r7, [r4, #4]
    MEMMOVE((u8_t*)ipr->iphdr + sizeof(struct ip6_frag_hdr), ipr->iphdr,
 80120f0:	68a0      	ldr	r0, [r4, #8]
 80120f2:	687a      	ldr	r2, [r7, #4]
 80120f4:	1a12      	subs	r2, r2, r0
 80120f6:	4601      	mov	r1, r0
 80120f8:	3008      	adds	r0, #8
 80120fa:	f002 fe81 	bl	8014e00 <memmove>
    iphdr_ptr = (struct ip6_hdr*)((u8_t*)ipr->iphdr +
 80120fe:	68a6      	ldr	r6, [r4, #8]
 8012100:	f106 0808 	add.w	r8, r6, #8
    ipr->datagram_len = (u16_t)(ipr->datagram_len + ((u8_t*)p->payload - (u8_t*)iphdr_ptr)
 8012104:	8b20      	ldrh	r0, [r4, #24]
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	eba3 0308 	sub.w	r3, r3, r8
 801210c:	4418      	add	r0, r3
 801210e:	b280      	uxth	r0, r0
 8012110:	3828      	subs	r0, #40	; 0x28
 8012112:	b280      	uxth	r0, r0
 8012114:	8320      	strh	r0, [r4, #24]
    iphdr_ptr->_plen = lwip_htons(ipr->datagram_len);
 8012116:	f7f5 f85b 	bl	80071d0 <lwip_htons>
 801211a:	81b0      	strh	r0, [r6, #12]
    if (IP6H_NEXTH(iphdr_ptr) == IP6_NEXTH_FRAGMENT) {
 801211c:	7bb3      	ldrb	r3, [r6, #14]
 801211e:	2b2c      	cmp	r3, #44	; 0x2c
 8012120:	d002      	beq.n	8012128 <ip6_reass+0x368>
      u8_t *ptr = (u8_t *)iphdr_ptr + IP6_HLEN;
 8012122:	f106 0330 	add.w	r3, r6, #48	; 0x30
      while (*ptr != IP6_NEXTH_FRAGMENT) {
 8012126:	e006      	b.n	8012136 <ip6_reass+0x376>
      iphdr_ptr->_nexth = ipr->nexth;
 8012128:	7ea3      	ldrb	r3, [r4, #26]
 801212a:	73b3      	strb	r3, [r6, #14]
 801212c:	e008      	b.n	8012140 <ip6_reass+0x380>
        ptr += 8 * (1 + ptr[1]);
 801212e:	785a      	ldrb	r2, [r3, #1]
 8012130:	3201      	adds	r2, #1
 8012132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      while (*ptr != IP6_NEXTH_FRAGMENT) {
 8012136:	781a      	ldrb	r2, [r3, #0]
 8012138:	2a2c      	cmp	r2, #44	; 0x2c
 801213a:	d1f8      	bne.n	801212e <ip6_reass+0x36e>
      *ptr = ipr->nexth;
 801213c:	7ea2      	ldrb	r2, [r4, #26]
 801213e:	701a      	strb	r2, [r3, #0]
    if (reassdatagrams == ipr) {
 8012140:	4b22      	ldr	r3, [pc, #136]	; (80121cc <ip6_reass+0x40c>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	42a3      	cmp	r3, r4
 8012146:	d01e      	beq.n	8012186 <ip6_reass+0x3c6>
      LWIP_ASSERT("sanity check linked list", ipr_prev != NULL);
 8012148:	b30d      	cbz	r5, 801218e <ip6_reass+0x3ce>
      ipr_prev->next = ipr->next;
 801214a:	6823      	ldr	r3, [r4, #0]
 801214c:	602b      	str	r3, [r5, #0]
    memp_free(MEMP_IP6_REASSDATA, ipr);
 801214e:	4621      	mov	r1, r4
 8012150:	2008      	movs	r0, #8
 8012152:	f7f5 fe71 	bl	8007e38 <memp_free>
    clen = pbuf_clen(p);
 8012156:	4638      	mov	r0, r7
 8012158:	f7f6 fc60 	bl	8008a1c <pbuf_clen>
 801215c:	4604      	mov	r4, r0
    LWIP_ASSERT("ip6_reass_pbufcount >= clen", ip6_reass_pbufcount >= clen);
 801215e:	4b1c      	ldr	r3, [pc, #112]	; (80121d0 <ip6_reass+0x410>)
 8012160:	881b      	ldrh	r3, [r3, #0]
 8012162:	4283      	cmp	r3, r0
 8012164:	d31b      	bcc.n	801219e <ip6_reass+0x3de>
    ip6_reass_pbufcount = (u16_t)(ip6_reass_pbufcount - clen);
 8012166:	4b1a      	ldr	r3, [pc, #104]	; (80121d0 <ip6_reass+0x410>)
 8012168:	8818      	ldrh	r0, [r3, #0]
 801216a:	1b00      	subs	r0, r0, r4
 801216c:	8018      	strh	r0, [r3, #0]
    if (pbuf_header_force(p, (s16_t)((u8_t*)p->payload - (u8_t*)iphdr_ptr))) {
 801216e:	6879      	ldr	r1, [r7, #4]
 8012170:	eba1 0108 	sub.w	r1, r1, r8
 8012174:	b209      	sxth	r1, r1
 8012176:	4638      	mov	r0, r7
 8012178:	f7f6 fae6 	bl	8008748 <pbuf_header_force>
 801217c:	b9b8      	cbnz	r0, 80121ae <ip6_reass+0x3ee>
}
 801217e:	4638      	mov	r0, r7
 8012180:	b005      	add	sp, #20
 8012182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      reassdatagrams = ipr->next;
 8012186:	6822      	ldr	r2, [r4, #0]
 8012188:	4b10      	ldr	r3, [pc, #64]	; (80121cc <ip6_reass+0x40c>)
 801218a:	601a      	str	r2, [r3, #0]
 801218c:	e7df      	b.n	801214e <ip6_reass+0x38e>
      LWIP_ASSERT("sanity check linked list", ipr_prev != NULL);
 801218e:	4b11      	ldr	r3, [pc, #68]	; (80121d4 <ip6_reass+0x414>)
 8012190:	f240 2283 	movw	r2, #643	; 0x283
 8012194:	4910      	ldr	r1, [pc, #64]	; (80121d8 <ip6_reass+0x418>)
 8012196:	4811      	ldr	r0, [pc, #68]	; (80121dc <ip6_reass+0x41c>)
 8012198:	f002 fe54 	bl	8014e44 <iprintf>
 801219c:	e7d5      	b.n	801214a <ip6_reass+0x38a>
    LWIP_ASSERT("ip6_reass_pbufcount >= clen", ip6_reass_pbufcount >= clen);
 801219e:	4b0d      	ldr	r3, [pc, #52]	; (80121d4 <ip6_reass+0x414>)
 80121a0:	f240 228a 	movw	r2, #650	; 0x28a
 80121a4:	490e      	ldr	r1, [pc, #56]	; (80121e0 <ip6_reass+0x420>)
 80121a6:	480d      	ldr	r0, [pc, #52]	; (80121dc <ip6_reass+0x41c>)
 80121a8:	f002 fe4c 	bl	8014e44 <iprintf>
 80121ac:	e7db      	b.n	8012166 <ip6_reass+0x3a6>
      LWIP_ASSERT("ip6_reass: moving p->payload to ip6 header failed\n", 0);
 80121ae:	4b09      	ldr	r3, [pc, #36]	; (80121d4 <ip6_reass+0x414>)
 80121b0:	f240 228f 	movw	r2, #655	; 0x28f
 80121b4:	490b      	ldr	r1, [pc, #44]	; (80121e4 <ip6_reass+0x424>)
 80121b6:	4809      	ldr	r0, [pc, #36]	; (80121dc <ip6_reass+0x41c>)
 80121b8:	f002 fe44 	bl	8014e44 <iprintf>
      pbuf_free(p);
 80121bc:	4638      	mov	r0, r7
 80121be:	f7f6 fac9 	bl	8008754 <pbuf_free>
      return NULL;
 80121c2:	2700      	movs	r7, #0
 80121c4:	e7db      	b.n	801217e <ip6_reass+0x3be>
 80121c6:	bf00      	nop
 80121c8:	20004bac 	.word	0x20004bac
 80121cc:	200018a0 	.word	0x200018a0
 80121d0:	2000189c 	.word	0x2000189c
 80121d4:	08018bfc 	.word	0x08018bfc
 80121d8:	08018978 	.word	0x08018978
 80121dc:	08015d2c 	.word	0x08015d2c
 80121e0:	08018bac 	.word	0x08018bac
 80121e4:	08018bc8 	.word	0x08018bc8

080121e8 <ip6_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip6_frag(struct pbuf *p, struct netif *netif, const ip6_addr_t *dest)
{
 80121e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121ec:	b089      	sub	sp, #36	; 0x24
 80121ee:	4605      	mov	r5, r0
 80121f0:	9106      	str	r1, [sp, #24]
 80121f2:	9207      	str	r2, [sp, #28]
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  static u32_t identification;
  u16_t left, cop;
  const u16_t mtu = nd6_get_destination_mtu(dest, netif);
 80121f4:	4610      	mov	r0, r2
 80121f6:	f002 fbbb 	bl	8014970 <nd6_get_destination_mtu>
  const u16_t nfb = (u16_t)((mtu - (IP6_HLEN + IP6_FRAG_HLEN)) & IP6_FRAG_OFFSET_MASK);
 80121fa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80121fe:	b29b      	uxth	r3, r3
 8012200:	f023 0307 	bic.w	r3, r3, #7
 8012204:	fa1f f883 	uxth.w	r8, r3
  u16_t fragment_offset = 0;
  u16_t last;
  u16_t poff = IP6_HLEN;

  identification++;
 8012208:	4a6b      	ldr	r2, [pc, #428]	; (80123b8 <ip6_frag+0x1d0>)
 801220a:	6813      	ldr	r3, [r2, #0]
 801220c:	3301      	adds	r3, #1
 801220e:	6013      	str	r3, [r2, #0]

  original_ip6hdr = (struct ip6_hdr *)p->payload;
 8012210:	686b      	ldr	r3, [r5, #4]
 8012212:	9304      	str	r3, [sp, #16]

  /* @todo we assume there are no options in the unfragmentable part (IPv6 header). */
  LWIP_ASSERT("p->tot_len >= IP6_HLEN", p->tot_len >= IP6_HLEN);
 8012214:	892b      	ldrh	r3, [r5, #8]
 8012216:	2b27      	cmp	r3, #39	; 0x27
 8012218:	d945      	bls.n	80122a6 <ip6_frag+0xbe>
  left = (u16_t)(p->tot_len - IP6_HLEN);
 801221a:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801221e:	f1a9 0928 	sub.w	r9, r9, #40	; 0x28
 8012222:	fa1f f989 	uxth.w	r9, r9
  u16_t poff = IP6_HLEN;
 8012226:	2628      	movs	r6, #40	; 0x28
  u16_t fragment_offset = 0;
 8012228:	f04f 0a00 	mov.w	sl, #0
  u16_t newpbuflen = 0;
 801222c:	4654      	mov	r4, sl

  while (left) {
 801222e:	f1b9 0f00 	cmp.w	r9, #0
 8012232:	f000 80bb 	beq.w	80123ac <ip6_frag+0x1c4>
    last = (left <= nfb);

    /* Fill this fragment */
    cop = last ? left : nfb;
 8012236:	45c1      	cmp	r9, r8
 8012238:	d93d      	bls.n	80122b6 <ip6_frag+0xce>
 801223a:	f8cd 8014 	str.w	r8, [sp, #20]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link, IPv6, and Fragment header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP6_HLEN + IP6_FRAG_HLEN, PBUF_RAM);
 801223e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012242:	2130      	movs	r1, #48	; 0x30
 8012244:	200e      	movs	r0, #14
 8012246:	f7f6 fae7 	bl	8008818 <pbuf_alloc>
    if (rambuf == NULL) {
 801224a:	9003      	str	r0, [sp, #12]
 801224c:	2800      	cmp	r0, #0
 801224e:	f000 80af 	beq.w	80123b0 <ip6_frag+0x1c8>
      IP6_FRAG_STATS_INC(ip6_frag.memerr);
      return ERR_MEM;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012252:	896b      	ldrh	r3, [r5, #10]
 8012254:	2b27      	cmp	r3, #39	; 0x27
 8012256:	d931      	bls.n	80122bc <ip6_frag+0xd4>
                (p->len >= (IP6_HLEN)));
    SMEMCPY(rambuf->payload, original_ip6hdr, IP6_HLEN);
 8012258:	9904      	ldr	r1, [sp, #16]
 801225a:	460b      	mov	r3, r1
 801225c:	9a03      	ldr	r2, [sp, #12]
 801225e:	6852      	ldr	r2, [r2, #4]
 8012260:	3120      	adds	r1, #32
 8012262:	f8d3 e000 	ldr.w	lr, [r3]
 8012266:	f8d3 c004 	ldr.w	ip, [r3, #4]
 801226a:	689f      	ldr	r7, [r3, #8]
 801226c:	68d8      	ldr	r0, [r3, #12]
 801226e:	f8c2 e000 	str.w	lr, [r2]
 8012272:	f8c2 c004 	str.w	ip, [r2, #4]
 8012276:	6097      	str	r7, [r2, #8]
 8012278:	60d0      	str	r0, [r2, #12]
 801227a:	3310      	adds	r3, #16
 801227c:	3210      	adds	r2, #16
 801227e:	428b      	cmp	r3, r1
 8012280:	d1ef      	bne.n	8012262 <ip6_frag+0x7a>
 8012282:	6819      	ldr	r1, [r3, #0]
 8012284:	685b      	ldr	r3, [r3, #4]
 8012286:	6011      	str	r1, [r2, #0]
 8012288:	6053      	str	r3, [r2, #4]
    ip6hdr = (struct ip6_hdr *)rambuf->payload;
 801228a:	9b03      	ldr	r3, [sp, #12]
 801228c:	f8d3 b004 	ldr.w	fp, [r3, #4]
    frag_hdr = (struct ip6_frag_hdr *)((u8_t*)rambuf->payload + IP6_HLEN);

    /* Can just adjust p directly for needed offset. */
    p->payload = (u8_t *)p->payload + poff;
 8012290:	686b      	ldr	r3, [r5, #4]
 8012292:	4433      	add	r3, r6
 8012294:	606b      	str	r3, [r5, #4]
    p->len = (u16_t)(p->len - poff);
 8012296:	896b      	ldrh	r3, [r5, #10]
 8012298:	1b9b      	subs	r3, r3, r6
 801229a:	816b      	strh	r3, [r5, #10]
    p->tot_len = (u16_t)(p->tot_len - poff);
 801229c:	892b      	ldrh	r3, [r5, #8]
 801229e:	1b9e      	subs	r6, r3, r6
 80122a0:	812e      	strh	r6, [r5, #8]

    left_to_copy = cop;
 80122a2:	9e05      	ldr	r6, [sp, #20]
    while (left_to_copy) {
 80122a4:	e02f      	b.n	8012306 <ip6_frag+0x11e>
  LWIP_ASSERT("p->tot_len >= IP6_HLEN", p->tot_len >= IP6_HLEN);
 80122a6:	4b45      	ldr	r3, [pc, #276]	; (80123bc <ip6_frag+0x1d4>)
 80122a8:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80122ac:	4944      	ldr	r1, [pc, #272]	; (80123c0 <ip6_frag+0x1d8>)
 80122ae:	4845      	ldr	r0, [pc, #276]	; (80123c4 <ip6_frag+0x1dc>)
 80122b0:	f002 fdc8 	bl	8014e44 <iprintf>
 80122b4:	e7b1      	b.n	801221a <ip6_frag+0x32>
    cop = last ? left : nfb;
 80122b6:	f8cd 9014 	str.w	r9, [sp, #20]
 80122ba:	e7c0      	b.n	801223e <ip6_frag+0x56>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80122bc:	4b3f      	ldr	r3, [pc, #252]	; (80123bc <ip6_frag+0x1d4>)
 80122be:	f44f 7244 	mov.w	r2, #784	; 0x310
 80122c2:	4941      	ldr	r1, [pc, #260]	; (80123c8 <ip6_frag+0x1e0>)
 80122c4:	483f      	ldr	r0, [pc, #252]	; (80123c4 <ip6_frag+0x1dc>)
 80122c6:	f002 fdbd 	bl	8014e44 <iprintf>
 80122ca:	e7c5      	b.n	8012258 <ip6_frag+0x70>
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
        p = p->next;
        continue;
      }
      pcr = ip6_frag_alloc_pbuf_custom_ref();
 80122cc:	f7ff fd56 	bl	8011d7c <ip6_frag_alloc_pbuf_custom_ref>
      if (pcr == NULL) {
 80122d0:	4607      	mov	r7, r0
 80122d2:	b310      	cbz	r0, 801231a <ip6_frag+0x132>
        pbuf_free(rambuf);
        IP6_FRAG_STATS_INC(ip6_frag.memerr);
        return ERR_MEM;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc, p->payload, newpbuflen);
 80122d4:	686b      	ldr	r3, [r5, #4]
 80122d6:	9401      	str	r4, [sp, #4]
 80122d8:	9300      	str	r3, [sp, #0]
 80122da:	4603      	mov	r3, r0
 80122dc:	2241      	movs	r2, #65	; 0x41
 80122de:	4621      	mov	r1, r4
 80122e0:	2000      	movs	r0, #0
 80122e2:	f7f6 f9c9 	bl	8008678 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 80122e6:	9002      	str	r0, [sp, #8]
 80122e8:	b1f8      	cbz	r0, 801232a <ip6_frag+0x142>
        ip6_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        IP6_FRAG_STATS_INC(ip6_frag.memerr);
        return ERR_MEM;
      }
      pbuf_ref(p);
 80122ea:	4628      	mov	r0, r5
 80122ec:	f7f6 fba0 	bl	8008a30 <pbuf_ref>
      pcr->original = p;
 80122f0:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ip6_frag_free_pbuf_custom;
 80122f2:	4b36      	ldr	r3, [pc, #216]	; (80123cc <ip6_frag+0x1e4>)
 80122f4:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80122f6:	9902      	ldr	r1, [sp, #8]
 80122f8:	9803      	ldr	r0, [sp, #12]
 80122fa:	f7f6 fbb1 	bl	8008a60 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80122fe:	1b36      	subs	r6, r6, r4
 8012300:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 8012302:	b106      	cbz	r6, 8012306 <ip6_frag+0x11e>
        p = p->next;
 8012304:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 8012306:	b1ce      	cbz	r6, 801233c <ip6_frag+0x154>
      newpbuflen = (left_to_copy < p->len) ? left_to_copy : p->len;
 8012308:	896c      	ldrh	r4, [r5, #10]
 801230a:	42b4      	cmp	r4, r6
 801230c:	bf28      	it	cs
 801230e:	4634      	movcs	r4, r6
 8012310:	b2a4      	uxth	r4, r4
      if (!newpbuflen) {
 8012312:	2c00      	cmp	r4, #0
 8012314:	d1da      	bne.n	80122cc <ip6_frag+0xe4>
        p = p->next;
 8012316:	682d      	ldr	r5, [r5, #0]
        continue;
 8012318:	e7f5      	b.n	8012306 <ip6_frag+0x11e>
        pbuf_free(rambuf);
 801231a:	9803      	ldr	r0, [sp, #12]
 801231c:	f7f6 fa1a 	bl	8008754 <pbuf_free>
        return ERR_MEM;
 8012320:	f04f 30ff 	mov.w	r0, #4294967295
    pbuf_free(rambuf);
    left = (u16_t)(left - cop);
    fragment_offset = (u16_t)(fragment_offset + cop);
  }
  return ERR_OK;
}
 8012324:	b009      	add	sp, #36	; 0x24
 8012326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip6_frag_free_pbuf_custom_ref(pcr);
 801232a:	4638      	mov	r0, r7
 801232c:	f7ff fcf6 	bl	8011d1c <ip6_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012330:	9803      	ldr	r0, [sp, #12]
 8012332:	f7f6 fa0f 	bl	8008754 <pbuf_free>
        return ERR_MEM;
 8012336:	f04f 30ff 	mov.w	r0, #4294967295
 801233a:	e7f3      	b.n	8012324 <ip6_frag+0x13c>
    frag_hdr->_nexth = original_ip6hdr->_nexth;
 801233c:	9b04      	ldr	r3, [sp, #16]
 801233e:	799b      	ldrb	r3, [r3, #6]
 8012340:	f88b 3028 	strb.w	r3, [fp, #40]	; 0x28
    frag_hdr->reserved = 0;
 8012344:	2300      	movs	r3, #0
 8012346:	f88b 3029 	strb.w	r3, [fp, #41]	; 0x29
    frag_hdr->_fragment_offset = lwip_htons((u16_t)((fragment_offset & IP6_FRAG_OFFSET_MASK) | (last ? 0 : IP6_FRAG_MORE_FLAG)));
 801234a:	f02a 0007 	bic.w	r0, sl, #7
 801234e:	b200      	sxth	r0, r0
 8012350:	45c1      	cmp	r9, r8
 8012352:	bf88      	it	hi
 8012354:	f040 0001 	orrhi.w	r0, r0, #1
 8012358:	b280      	uxth	r0, r0
 801235a:	f7f4 ff39 	bl	80071d0 <lwip_htons>
 801235e:	f8ab 002a 	strh.w	r0, [fp, #42]	; 0x2a
    frag_hdr->_identification = lwip_htonl(identification);
 8012362:	4b15      	ldr	r3, [pc, #84]	; (80123b8 <ip6_frag+0x1d0>)
 8012364:	6818      	ldr	r0, [r3, #0]
 8012366:	f7f4 ff38 	bl	80071da <lwip_htonl>
 801236a:	f8cb 002c 	str.w	r0, [fp, #44]	; 0x2c
    IP6H_NEXTH_SET(ip6hdr, IP6_NEXTH_FRAGMENT);
 801236e:	232c      	movs	r3, #44	; 0x2c
 8012370:	f88b 3006 	strb.w	r3, [fp, #6]
    IP6H_PLEN_SET(ip6hdr, (u16_t)(cop + IP6_FRAG_HLEN));
 8012374:	9e05      	ldr	r6, [sp, #20]
 8012376:	f106 0008 	add.w	r0, r6, #8
 801237a:	b280      	uxth	r0, r0
 801237c:	f7f4 ff28 	bl	80071d0 <lwip_htons>
 8012380:	f8ab 0004 	strh.w	r0, [fp, #4]
    netif->output_ip6(netif, rambuf, dest);
 8012384:	9806      	ldr	r0, [sp, #24]
 8012386:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 801238a:	9a07      	ldr	r2, [sp, #28]
 801238c:	9f03      	ldr	r7, [sp, #12]
 801238e:	4639      	mov	r1, r7
 8012390:	4798      	blx	r3
    pbuf_free(rambuf);
 8012392:	4638      	mov	r0, r7
 8012394:	f7f6 f9de 	bl	8008754 <pbuf_free>
    left = (u16_t)(left - cop);
 8012398:	eba9 0906 	sub.w	r9, r9, r6
 801239c:	fa1f f989 	uxth.w	r9, r9
    fragment_offset = (u16_t)(fragment_offset + cop);
 80123a0:	eb0a 0306 	add.w	r3, sl, r6
 80123a4:	fa1f fa83 	uxth.w	sl, r3
    poff = newpbuflen;
 80123a8:	4626      	mov	r6, r4
 80123aa:	e740      	b.n	801222e <ip6_frag+0x46>
  return ERR_OK;
 80123ac:	2000      	movs	r0, #0
 80123ae:	e7b9      	b.n	8012324 <ip6_frag+0x13c>
      return ERR_MEM;
 80123b0:	f04f 30ff 	mov.w	r0, #4294967295
 80123b4:	e7b6      	b.n	8012324 <ip6_frag+0x13c>
 80123b6:	bf00      	nop
 80123b8:	20001898 	.word	0x20001898
 80123bc:	08018bfc 	.word	0x08018bfc
 80123c0:	08018b38 	.word	0x08018b38
 80123c4:	08015d2c 	.word	0x08015d2c
 80123c8:	08018838 	.word	0x08018838
 80123cc:	08011d49 	.word	0x08011d49

080123d0 <mld6_remove_group>:
mld6_remove_group(struct netif *netif, struct mld_group *group)
{
  err_t err = ERR_OK;

  /* Is it the first group? */
  if (netif_mld6_data(netif) == group) {
 80123d0:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
 80123d4:	428b      	cmp	r3, r1
 80123d6:	d005      	beq.n	80123e4 <mld6_remove_group+0x14>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_MLD6, group->next);
  } else {
    /* look for group further down the list */
    struct mld_group *tmpGroup;
    for (tmpGroup = netif_mld6_data(netif); tmpGroup != NULL; tmpGroup = tmpGroup->next) {
 80123d8:	b15b      	cbz	r3, 80123f2 <mld6_remove_group+0x22>
      if (tmpGroup->next == group) {
 80123da:	681a      	ldr	r2, [r3, #0]
 80123dc:	428a      	cmp	r2, r1
 80123de:	d006      	beq.n	80123ee <mld6_remove_group+0x1e>
    for (tmpGroup = netif_mld6_data(netif); tmpGroup != NULL; tmpGroup = tmpGroup->next) {
 80123e0:	4613      	mov	r3, r2
 80123e2:	e7f9      	b.n	80123d8 <mld6_remove_group+0x8>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_MLD6, group->next);
 80123e4:	680b      	ldr	r3, [r1, #0]
 80123e6:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  err_t err = ERR_OK;
 80123ea:	2000      	movs	r0, #0
 80123ec:	4770      	bx	lr
        tmpGroup->next = group->next;
 80123ee:	680a      	ldr	r2, [r1, #0]
 80123f0:	601a      	str	r2, [r3, #0]
        break;
      }
    }
    /* Group not find group */
    if (tmpGroup == NULL) {
 80123f2:	b10b      	cbz	r3, 80123f8 <mld6_remove_group+0x28>
  err_t err = ERR_OK;
 80123f4:	2000      	movs	r0, #0
 80123f6:	4770      	bx	lr
      err = ERR_ARG;
 80123f8:	f06f 000f 	mvn.w	r0, #15
    }
  }

  return err;
}
 80123fc:	4770      	bx	lr
	...

08012400 <mld6_delayed_report>:
 *              should be sent
 * @param maxresp_in the max resp delay provided in the query
 */
static void
mld6_delayed_report(struct mld_group *group, u16_t maxresp_in)
{
 8012400:	b538      	push	{r3, r4, r5, lr}
 8012402:	4605      	mov	r5, r0
  /* Convert maxresp from milliseconds to tmr ticks */
  u16_t maxresp = maxresp_in / MLD6_TMR_INTERVAL;
 8012404:	4c0d      	ldr	r4, [pc, #52]	; (801243c <mld6_delayed_report+0x3c>)
 8012406:	fba4 3401 	umull	r3, r4, r4, r1
  if (maxresp == 0) {
 801240a:	0964      	lsrs	r4, r4, #5
 801240c:	d100      	bne.n	8012410 <mld6_delayed_report+0x10>
    maxresp = 1;
 801240e:	2401      	movs	r4, #1
  }

#ifdef LWIP_RAND
  /* Randomize maxresp. (if LWIP_RAND is supported) */
  maxresp = (u16_t)(LWIP_RAND() % maxresp);
 8012410:	f002 fd30 	bl	8014e74 <rand>
 8012414:	fbb0 f1f4 	udiv	r1, r0, r4
 8012418:	fb04 0411 	mls	r4, r4, r1, r0
 801241c:	b2a4      	uxth	r4, r4
  if (maxresp == 0) {
 801241e:	b904      	cbnz	r4, 8012422 <mld6_delayed_report+0x22>
    maxresp = 1;
 8012420:	2401      	movs	r4, #1
  }
#endif /* LWIP_RAND */

  /* Apply timer value if no report has been scheduled already. */
  if ((group->group_state == MLD6_GROUP_IDLE_MEMBER) ||
 8012422:	7e6b      	ldrb	r3, [r5, #25]
 8012424:	2b02      	cmp	r3, #2
 8012426:	d005      	beq.n	8012434 <mld6_delayed_report+0x34>
 8012428:	2b01      	cmp	r3, #1
 801242a:	d106      	bne.n	801243a <mld6_delayed_report+0x3a>
     ((group->group_state == MLD6_GROUP_DELAYING_MEMBER) &&
      ((group->timer == 0) || (maxresp < group->timer)))) {
 801242c:	8b6b      	ldrh	r3, [r5, #26]
     ((group->group_state == MLD6_GROUP_DELAYING_MEMBER) &&
 801242e:	b10b      	cbz	r3, 8012434 <mld6_delayed_report+0x34>
      ((group->timer == 0) || (maxresp < group->timer)))) {
 8012430:	42a3      	cmp	r3, r4
 8012432:	d902      	bls.n	801243a <mld6_delayed_report+0x3a>
    group->timer = maxresp;
 8012434:	836c      	strh	r4, [r5, #26]
    group->group_state = MLD6_GROUP_DELAYING_MEMBER;
 8012436:	2301      	movs	r3, #1
 8012438:	766b      	strb	r3, [r5, #25]
  }
}
 801243a:	bd38      	pop	{r3, r4, r5, pc}
 801243c:	51eb851f 	.word	0x51eb851f

08012440 <mld6_new_group>:
{
 8012440:	b538      	push	{r3, r4, r5, lr}
 8012442:	4605      	mov	r5, r0
 8012444:	460c      	mov	r4, r1
  group = (struct mld_group *)memp_malloc(MEMP_MLD6_GROUP);
 8012446:	2009      	movs	r0, #9
 8012448:	f7f5 fcdc 	bl	8007e04 <memp_malloc>
  if (group != NULL) {
 801244c:	4603      	mov	r3, r0
 801244e:	b1c8      	cbz	r0, 8012484 <mld6_new_group+0x44>
    ip6_addr_set(&(group->group_address), addr);
 8012450:	b1d4      	cbz	r4, 8012488 <mld6_new_group+0x48>
 8012452:	6822      	ldr	r2, [r4, #0]
 8012454:	605a      	str	r2, [r3, #4]
 8012456:	b1cc      	cbz	r4, 801248c <mld6_new_group+0x4c>
 8012458:	6862      	ldr	r2, [r4, #4]
 801245a:	609a      	str	r2, [r3, #8]
 801245c:	b1c4      	cbz	r4, 8012490 <mld6_new_group+0x50>
 801245e:	68a2      	ldr	r2, [r4, #8]
 8012460:	60da      	str	r2, [r3, #12]
 8012462:	b1bc      	cbz	r4, 8012494 <mld6_new_group+0x54>
 8012464:	68e2      	ldr	r2, [r4, #12]
 8012466:	611a      	str	r2, [r3, #16]
 8012468:	b1b4      	cbz	r4, 8012498 <mld6_new_group+0x58>
 801246a:	7c22      	ldrb	r2, [r4, #16]
 801246c:	751a      	strb	r2, [r3, #20]
    group->timer              = 0; /* Not running */
 801246e:	2200      	movs	r2, #0
 8012470:	835a      	strh	r2, [r3, #26]
    group->group_state        = MLD6_GROUP_IDLE_MEMBER;
 8012472:	2102      	movs	r1, #2
 8012474:	7659      	strb	r1, [r3, #25]
    group->last_reporter_flag = 0;
 8012476:	761a      	strb	r2, [r3, #24]
    group->use                = 0;
 8012478:	771a      	strb	r2, [r3, #28]
    group->next               = netif_mld6_data(ifp);
 801247a:	f8d5 20cc 	ldr.w	r2, [r5, #204]	; 0xcc
 801247e:	601a      	str	r2, [r3, #0]
    netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_MLD6, group);
 8012480:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
}
 8012484:	4618      	mov	r0, r3
 8012486:	bd38      	pop	{r3, r4, r5, pc}
    ip6_addr_set(&(group->group_address), addr);
 8012488:	2200      	movs	r2, #0
 801248a:	e7e3      	b.n	8012454 <mld6_new_group+0x14>
 801248c:	2200      	movs	r2, #0
 801248e:	e7e4      	b.n	801245a <mld6_new_group+0x1a>
 8012490:	2200      	movs	r2, #0
 8012492:	e7e5      	b.n	8012460 <mld6_new_group+0x20>
 8012494:	2200      	movs	r2, #0
 8012496:	e7e6      	b.n	8012466 <mld6_new_group+0x26>
 8012498:	2200      	movs	r2, #0
 801249a:	e7e7      	b.n	801246c <mld6_new_group+0x2c>

0801249c <mld6_send>:
 * @param group the group to report or quit
 * @param type ICMP6_TYPE_MLR (report) or ICMP6_TYPE_MLD (done)
 */
static void
mld6_send(struct netif *netif, struct mld_group *group, u8_t type)
{
 801249c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124a0:	b084      	sub	sp, #16
 80124a2:	4606      	mov	r6, r0
 80124a4:	460d      	mov	r5, r1
 80124a6:	4690      	mov	r8, r2
  struct mld_header *mld_hdr;
  struct pbuf *p;
  const ip6_addr_t *src_addr;

  /* Allocate a packet. Size is MLD header + IPv6 Hop-by-hop options header. */
  p = pbuf_alloc(PBUF_IP, sizeof(struct mld_header) + MLD6_HBH_HLEN, PBUF_RAM);
 80124a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80124ac:	2120      	movs	r1, #32
 80124ae:	2036      	movs	r0, #54	; 0x36
 80124b0:	f7f6 f9b2 	bl	8008818 <pbuf_alloc>
  if (p == NULL) {
 80124b4:	2800      	cmp	r0, #0
 80124b6:	d047      	beq.n	8012548 <mld6_send+0xac>
 80124b8:	4604      	mov	r4, r0
    MLD6_STATS_INC(mld6.memerr);
    return;
  }

  /* Move to make room for Hop-by-hop options header. */
  if (pbuf_remove_header(p, MLD6_HBH_HLEN)) {
 80124ba:	2108      	movs	r1, #8
 80124bc:	f7f6 f904 	bl	80086c8 <pbuf_remove_header>
 80124c0:	bb58      	cbnz	r0, 801251a <mld6_send+0x7e>
    MLD6_STATS_INC(mld6.lenerr);
    return;
  }

  /* Select our source address. */
  if (!ip6_addr_isvalid(netif_ip6_addr_state(netif, 0))) {
 80124c2:	f896 3094 	ldrb.w	r3, [r6, #148]	; 0x94
 80124c6:	f013 0f10 	tst.w	r3, #16
 80124ca:	d02a      	beq.n	8012522 <mld6_send+0x86>
    /* This is a special case, when we are performing duplicate address detection.
     * We must join the multicast group, but we don't have a valid address yet. */
    src_addr = IP6_ADDR_ANY6;
  } else {
    /* Use link-local address as source address. */
    src_addr = netif_ip6_addr(netif, 0);
 80124cc:	f106 074c 	add.w	r7, r6, #76	; 0x4c
  }

  /* MLD message header pointer. */
  mld_hdr = (struct mld_header *)p->payload;
 80124d0:	6863      	ldr	r3, [r4, #4]

  /* Set fields. */
  mld_hdr->type = type;
 80124d2:	f883 8000 	strb.w	r8, [r3]
  mld_hdr->code = 0;
 80124d6:	2200      	movs	r2, #0
 80124d8:	705a      	strb	r2, [r3, #1]
  mld_hdr->chksum = 0;
 80124da:	709a      	strb	r2, [r3, #2]
 80124dc:	70da      	strb	r2, [r3, #3]
  mld_hdr->max_resp_delay = 0;
 80124de:	711a      	strb	r2, [r3, #4]
 80124e0:	715a      	strb	r2, [r3, #5]
  mld_hdr->reserved = 0;
 80124e2:	719a      	strb	r2, [r3, #6]
 80124e4:	71da      	strb	r2, [r3, #7]
  ip6_addr_copy_to_packed(mld_hdr->multicast_address, group->group_address);
 80124e6:	6869      	ldr	r1, [r5, #4]
 80124e8:	6099      	str	r1, [r3, #8]
 80124ea:	68a9      	ldr	r1, [r5, #8]
 80124ec:	60d9      	str	r1, [r3, #12]
 80124ee:	68e9      	ldr	r1, [r5, #12]
 80124f0:	6119      	str	r1, [r3, #16]
 80124f2:	6929      	ldr	r1, [r5, #16]
 80124f4:	6159      	str	r1, [r3, #20]
      src_addr, &(group->group_address));
  }
#endif /* CHECKSUM_GEN_ICMP6 */

  /* Add hop-by-hop headers options: router alert with MLD value. */
  ip6_options_add_hbh_ra(p, IP6_NEXTH_ICMP6, IP6_ROUTER_ALERT_VALUE_MLD);
 80124f6:	213a      	movs	r1, #58	; 0x3a
 80124f8:	4620      	mov	r0, r4
 80124fa:	f7ff fb41 	bl	8011b80 <ip6_options_add_hbh_ra>

  if (type == ICMP6_TYPE_MLR) {
 80124fe:	f1b8 0f83 	cmp.w	r8, #131	; 0x83
 8012502:	d010      	beq.n	8012526 <mld6_send+0x8a>
    group->last_reporter_flag = 1;
  }

  /* Send the packet out. */
  MLD6_STATS_INC(mld6.xmit);
  ip6_output_if(p, (ip6_addr_isany(src_addr)) ? NULL : src_addr, &(group->group_address),
 8012504:	b197      	cbz	r7, 801252c <mld6_send+0x90>
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	b98b      	cbnz	r3, 801252e <mld6_send+0x92>
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	b97b      	cbnz	r3, 801252e <mld6_send+0x92>
 801250e:	68bb      	ldr	r3, [r7, #8]
 8012510:	b96b      	cbnz	r3, 801252e <mld6_send+0x92>
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	b95b      	cbnz	r3, 801252e <mld6_send+0x92>
 8012516:	2700      	movs	r7, #0
 8012518:	e009      	b.n	801252e <mld6_send+0x92>
    pbuf_free(p);
 801251a:	4620      	mov	r0, r4
 801251c:	f7f6 f91a 	bl	8008754 <pbuf_free>
    return;
 8012520:	e012      	b.n	8012548 <mld6_send+0xac>
    src_addr = IP6_ADDR_ANY6;
 8012522:	4f0b      	ldr	r7, [pc, #44]	; (8012550 <mld6_send+0xb4>)
 8012524:	e7d4      	b.n	80124d0 <mld6_send+0x34>
    group->last_reporter_flag = 1;
 8012526:	2301      	movs	r3, #1
 8012528:	762b      	strb	r3, [r5, #24]
 801252a:	e7eb      	b.n	8012504 <mld6_send+0x68>
  ip6_output_if(p, (ip6_addr_isany(src_addr)) ? NULL : src_addr, &(group->group_address),
 801252c:	2700      	movs	r7, #0
 801252e:	9602      	str	r6, [sp, #8]
 8012530:	2300      	movs	r3, #0
 8012532:	9301      	str	r3, [sp, #4]
 8012534:	9300      	str	r3, [sp, #0]
 8012536:	2301      	movs	r3, #1
 8012538:	1d2a      	adds	r2, r5, #4
 801253a:	4639      	mov	r1, r7
 801253c:	4620      	mov	r0, r4
 801253e:	f7ff fae9 	bl	8011b14 <ip6_output_if>
      MLD6_HL, 0, IP6_NEXTH_HOPBYHOP, netif);
  pbuf_free(p);
 8012542:	4620      	mov	r0, r4
 8012544:	f7f6 f906 	bl	8008754 <pbuf_free>
}
 8012548:	b004      	add	sp, #16
 801254a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801254e:	bf00      	nop
 8012550:	08018b20 	.word	0x08018b20

08012554 <mld6_report_groups>:
{
 8012554:	b510      	push	{r4, lr}
  struct mld_group *group = netif_mld6_data(netif);
 8012556:	f8d0 40cc 	ldr.w	r4, [r0, #204]	; 0xcc
  while (group != NULL) {
 801255a:	e005      	b.n	8012568 <mld6_report_groups+0x14>
    mld6_delayed_report(group, MLD6_JOIN_DELAYING_MEMBER_TMR_MS);
 801255c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8012560:	4620      	mov	r0, r4
 8012562:	f7ff ff4d 	bl	8012400 <mld6_delayed_report>
    group = group->next;
 8012566:	6824      	ldr	r4, [r4, #0]
  while (group != NULL) {
 8012568:	2c00      	cmp	r4, #0
 801256a:	d1f7      	bne.n	801255c <mld6_report_groups+0x8>
}
 801256c:	bd10      	pop	{r4, pc}

0801256e <mld6_lookfor_group>:
  struct mld_group *group = netif_mld6_data(ifp);
 801256e:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
  while (group != NULL) {
 8012572:	e000      	b.n	8012576 <mld6_lookfor_group+0x8>
    group = group->next;
 8012574:	6800      	ldr	r0, [r0, #0]
  while (group != NULL) {
 8012576:	b198      	cbz	r0, 80125a0 <mld6_lookfor_group+0x32>
    if (ip6_addr_cmp(&(group->group_address), addr)) {
 8012578:	6842      	ldr	r2, [r0, #4]
 801257a:	680b      	ldr	r3, [r1, #0]
 801257c:	429a      	cmp	r2, r3
 801257e:	d1f9      	bne.n	8012574 <mld6_lookfor_group+0x6>
 8012580:	6882      	ldr	r2, [r0, #8]
 8012582:	684b      	ldr	r3, [r1, #4]
 8012584:	429a      	cmp	r2, r3
 8012586:	d1f5      	bne.n	8012574 <mld6_lookfor_group+0x6>
 8012588:	68c2      	ldr	r2, [r0, #12]
 801258a:	688b      	ldr	r3, [r1, #8]
 801258c:	429a      	cmp	r2, r3
 801258e:	d1f1      	bne.n	8012574 <mld6_lookfor_group+0x6>
 8012590:	6902      	ldr	r2, [r0, #16]
 8012592:	68cb      	ldr	r3, [r1, #12]
 8012594:	429a      	cmp	r2, r3
 8012596:	d1ed      	bne.n	8012574 <mld6_lookfor_group+0x6>
 8012598:	7d02      	ldrb	r2, [r0, #20]
 801259a:	7c0b      	ldrb	r3, [r1, #16]
 801259c:	429a      	cmp	r2, r3
 801259e:	d1e9      	bne.n	8012574 <mld6_lookfor_group+0x6>
}
 80125a0:	4770      	bx	lr
	...

080125a4 <mld6_input>:
{
 80125a4:	b570      	push	{r4, r5, r6, lr}
 80125a6:	4604      	mov	r4, r0
  if (p->len < sizeof(struct mld_header)) {
 80125a8:	8943      	ldrh	r3, [r0, #10]
 80125aa:	2b17      	cmp	r3, #23
 80125ac:	d90a      	bls.n	80125c4 <mld6_input+0x20>
 80125ae:	4608      	mov	r0, r1
  mld_hdr = (struct mld_header *)p->payload;
 80125b0:	6865      	ldr	r5, [r4, #4]
  switch (mld_hdr->type) {
 80125b2:	782b      	ldrb	r3, [r5, #0]
 80125b4:	2b82      	cmp	r3, #130	; 0x82
 80125b6:	d008      	beq.n	80125ca <mld6_input+0x26>
 80125b8:	2b83      	cmp	r3, #131	; 0x83
 80125ba:	d050      	beq.n	801265e <mld6_input+0xba>
  pbuf_free(p);
 80125bc:	4620      	mov	r0, r4
 80125be:	f7f6 f8c9 	bl	8008754 <pbuf_free>
}
 80125c2:	bd70      	pop	{r4, r5, r6, pc}
    pbuf_free(p);
 80125c4:	f7f6 f8c6 	bl	8008754 <pbuf_free>
    return;
 80125c8:	e7fb      	b.n	80125c2 <mld6_input+0x1e>
    if (ip6_addr_isallnodes_linklocal(ip6_current_dest_addr()) &&
 80125ca:	4b2c      	ldr	r3, [pc, #176]	; (801267c <mld6_input+0xd8>)
 80125cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125ce:	f240 23ff 	movw	r3, #767	; 0x2ff
 80125d2:	429a      	cmp	r2, r3
 80125d4:	d10a      	bne.n	80125ec <mld6_input+0x48>
 80125d6:	4b29      	ldr	r3, [pc, #164]	; (801267c <mld6_input+0xd8>)
 80125d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125da:	b93b      	cbnz	r3, 80125ec <mld6_input+0x48>
 80125dc:	4b27      	ldr	r3, [pc, #156]	; (801267c <mld6_input+0xd8>)
 80125de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125e0:	b923      	cbnz	r3, 80125ec <mld6_input+0x48>
 80125e2:	4b26      	ldr	r3, [pc, #152]	; (801267c <mld6_input+0xd8>)
 80125e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80125ea:	d008      	beq.n	80125fe <mld6_input+0x5a>
      group = mld6_lookfor_group(inp, ip6_current_dest_addr());
 80125ec:	4924      	ldr	r1, [pc, #144]	; (8012680 <mld6_input+0xdc>)
 80125ee:	f7ff ffbe 	bl	801256e <mld6_lookfor_group>
      if (group != NULL) {
 80125f2:	2800      	cmp	r0, #0
 80125f4:	d0e2      	beq.n	80125bc <mld6_input+0x18>
        mld6_delayed_report(group, mld_hdr->max_resp_delay);
 80125f6:	88a9      	ldrh	r1, [r5, #4]
 80125f8:	f7ff ff02 	bl	8012400 <mld6_delayed_report>
 80125fc:	e7de      	b.n	80125bc <mld6_input+0x18>
    if (ip6_addr_isallnodes_linklocal(ip6_current_dest_addr()) &&
 80125fe:	f115 0f08 	cmn.w	r5, #8
 8012602:	d00b      	beq.n	801261c <mld6_input+0x78>
        ip6_addr_isany(&(mld_hdr->multicast_address))) {
 8012604:	68ab      	ldr	r3, [r5, #8]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d1f0      	bne.n	80125ec <mld6_input+0x48>
 801260a:	68eb      	ldr	r3, [r5, #12]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d1ed      	bne.n	80125ec <mld6_input+0x48>
 8012610:	692b      	ldr	r3, [r5, #16]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d1ea      	bne.n	80125ec <mld6_input+0x48>
 8012616:	696b      	ldr	r3, [r5, #20]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d1e7      	bne.n	80125ec <mld6_input+0x48>
      group = netif_mld6_data(inp);
 801261c:	f8d0 60cc 	ldr.w	r6, [r0, #204]	; 0xcc
      while (group != NULL) {
 8012620:	e004      	b.n	801262c <mld6_input+0x88>
          mld6_delayed_report(group, mld_hdr->max_resp_delay);
 8012622:	88a9      	ldrh	r1, [r5, #4]
 8012624:	4630      	mov	r0, r6
 8012626:	f7ff feeb 	bl	8012400 <mld6_delayed_report>
        group = group->next;
 801262a:	6836      	ldr	r6, [r6, #0]
      while (group != NULL) {
 801262c:	2e00      	cmp	r6, #0
 801262e:	d0c5      	beq.n	80125bc <mld6_input+0x18>
        if ((!(ip6_addr_ismulticast_iflocal(&(group->group_address)))) &&
 8012630:	6873      	ldr	r3, [r6, #4]
 8012632:	f648 71ff 	movw	r1, #36863	; 0x8fff
 8012636:	4019      	ands	r1, r3
 8012638:	f240 12ff 	movw	r2, #511	; 0x1ff
 801263c:	4291      	cmp	r1, r2
 801263e:	d0f4      	beq.n	801262a <mld6_input+0x86>
 8012640:	f240 22ff 	movw	r2, #767	; 0x2ff
 8012644:	4293      	cmp	r3, r2
 8012646:	d1ec      	bne.n	8012622 <mld6_input+0x7e>
            (!(ip6_addr_isallnodes_linklocal(&(group->group_address))))) {
 8012648:	68b3      	ldr	r3, [r6, #8]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d1e9      	bne.n	8012622 <mld6_input+0x7e>
 801264e:	68f3      	ldr	r3, [r6, #12]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d1e6      	bne.n	8012622 <mld6_input+0x7e>
 8012654:	6933      	ldr	r3, [r6, #16]
 8012656:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801265a:	d1e2      	bne.n	8012622 <mld6_input+0x7e>
 801265c:	e7e5      	b.n	801262a <mld6_input+0x86>
    group = mld6_lookfor_group(inp, ip6_current_dest_addr());
 801265e:	4908      	ldr	r1, [pc, #32]	; (8012680 <mld6_input+0xdc>)
 8012660:	f7ff ff85 	bl	801256e <mld6_lookfor_group>
    if (group != NULL) {
 8012664:	2800      	cmp	r0, #0
 8012666:	d0a9      	beq.n	80125bc <mld6_input+0x18>
      if (group->group_state == MLD6_GROUP_DELAYING_MEMBER) {
 8012668:	7e42      	ldrb	r2, [r0, #25]
 801266a:	2a01      	cmp	r2, #1
 801266c:	d1a6      	bne.n	80125bc <mld6_input+0x18>
        group->timer = 0; /* stopped */
 801266e:	2200      	movs	r2, #0
 8012670:	8342      	strh	r2, [r0, #26]
        group->group_state = MLD6_GROUP_IDLE_MEMBER;
 8012672:	2102      	movs	r1, #2
 8012674:	7641      	strb	r1, [r0, #25]
        group->last_reporter_flag = 0;
 8012676:	7602      	strb	r2, [r0, #24]
 8012678:	e7a0      	b.n	80125bc <mld6_input+0x18>
 801267a:	bf00      	nop
 801267c:	20004bac 	.word	0x20004bac
 8012680:	20004bd8 	.word	0x20004bd8

08012684 <mld6_joingroup_netif>:
{
 8012684:	b570      	push	{r4, r5, r6, lr}
 8012686:	b086      	sub	sp, #24
 8012688:	4606      	mov	r6, r0
 801268a:	460c      	mov	r4, r1
  if (ip6_addr_lacks_zone(groupaddr, IP6_MULTICAST)) {
 801268c:	7c0b      	ldrb	r3, [r1, #16]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d141      	bne.n	8012716 <mld6_joingroup_netif+0x92>
 8012692:	680b      	ldr	r3, [r1, #0]
 8012694:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8012698:	4019      	ands	r1, r3
 801269a:	f248 02fe 	movw	r2, #33022	; 0x80fe
 801269e:	4291      	cmp	r1, r2
 80126a0:	d00a      	beq.n	80126b8 <mld6_joingroup_netif+0x34>
 80126a2:	f648 72ff 	movw	r2, #36863	; 0x8fff
 80126a6:	401a      	ands	r2, r3
 80126a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80126ac:	428a      	cmp	r2, r1
 80126ae:	d003      	beq.n	80126b8 <mld6_joingroup_netif+0x34>
 80126b0:	f240 21ff 	movw	r1, #767	; 0x2ff
 80126b4:	428a      	cmp	r2, r1
 80126b6:	d12e      	bne.n	8012716 <mld6_joingroup_netif+0x92>
    ip6_addr_set(&ip6addr, groupaddr);
 80126b8:	b1f4      	cbz	r4, 80126f8 <mld6_joingroup_netif+0x74>
 80126ba:	9301      	str	r3, [sp, #4]
 80126bc:	b1f4      	cbz	r4, 80126fc <mld6_joingroup_netif+0x78>
 80126be:	6862      	ldr	r2, [r4, #4]
 80126c0:	9202      	str	r2, [sp, #8]
 80126c2:	b1ec      	cbz	r4, 8012700 <mld6_joingroup_netif+0x7c>
 80126c4:	68a2      	ldr	r2, [r4, #8]
 80126c6:	9203      	str	r2, [sp, #12]
 80126c8:	b1e4      	cbz	r4, 8012704 <mld6_joingroup_netif+0x80>
 80126ca:	68e2      	ldr	r2, [r4, #12]
 80126cc:	9204      	str	r2, [sp, #16]
    ip6_addr_assign_zone(&ip6addr, IP6_MULTICAST, netif);
 80126ce:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 80126d2:	4019      	ands	r1, r3
 80126d4:	f248 02fe 	movw	r2, #33022	; 0x80fe
 80126d8:	4291      	cmp	r1, r2
 80126da:	d015      	beq.n	8012708 <mld6_joingroup_netif+0x84>
 80126dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80126e0:	041b      	lsls	r3, r3, #16
 80126e2:	0c1b      	lsrs	r3, r3, #16
 80126e4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80126e8:	4293      	cmp	r3, r2
 80126ea:	d00d      	beq.n	8012708 <mld6_joingroup_netif+0x84>
 80126ec:	f240 22ff 	movw	r2, #767	; 0x2ff
 80126f0:	4293      	cmp	r3, r2
 80126f2:	d009      	beq.n	8012708 <mld6_joingroup_netif+0x84>
 80126f4:	2300      	movs	r3, #0
 80126f6:	e00b      	b.n	8012710 <mld6_joingroup_netif+0x8c>
    ip6_addr_set(&ip6addr, groupaddr);
 80126f8:	2300      	movs	r3, #0
 80126fa:	e7de      	b.n	80126ba <mld6_joingroup_netif+0x36>
 80126fc:	2200      	movs	r2, #0
 80126fe:	e7df      	b.n	80126c0 <mld6_joingroup_netif+0x3c>
 8012700:	2200      	movs	r2, #0
 8012702:	e7e0      	b.n	80126c6 <mld6_joingroup_netif+0x42>
 8012704:	2200      	movs	r2, #0
 8012706:	e7e1      	b.n	80126cc <mld6_joingroup_netif+0x48>
    ip6_addr_assign_zone(&ip6addr, IP6_MULTICAST, netif);
 8012708:	f896 30de 	ldrb.w	r3, [r6, #222]	; 0xde
 801270c:	3301      	adds	r3, #1
 801270e:	b2db      	uxtb	r3, r3
 8012710:	f88d 3014 	strb.w	r3, [sp, #20]
    groupaddr = &ip6addr;
 8012714:	ac01      	add	r4, sp, #4
  group = mld6_lookfor_group(netif, groupaddr);
 8012716:	4621      	mov	r1, r4
 8012718:	4630      	mov	r0, r6
 801271a:	f7ff ff28 	bl	801256e <mld6_lookfor_group>
  if (group == NULL) {
 801271e:	4605      	mov	r5, r0
 8012720:	b128      	cbz	r0, 801272e <mld6_joingroup_netif+0xaa>
  group->use++;
 8012722:	7f2b      	ldrb	r3, [r5, #28]
 8012724:	3301      	adds	r3, #1
 8012726:	772b      	strb	r3, [r5, #28]
  return ERR_OK;
 8012728:	2000      	movs	r0, #0
}
 801272a:	b006      	add	sp, #24
 801272c:	bd70      	pop	{r4, r5, r6, pc}
    group = mld6_new_group(netif, groupaddr);
 801272e:	4621      	mov	r1, r4
 8012730:	4630      	mov	r0, r6
 8012732:	f7ff fe85 	bl	8012440 <mld6_new_group>
    if (group == NULL) {
 8012736:	4605      	mov	r5, r0
 8012738:	b188      	cbz	r0, 801275e <mld6_joingroup_netif+0xda>
    if (netif->mld_mac_filter != NULL) {
 801273a:	f8d6 30e4 	ldr.w	r3, [r6, #228]	; 0xe4
 801273e:	b11b      	cbz	r3, 8012748 <mld6_joingroup_netif+0xc4>
      netif->mld_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
 8012740:	2201      	movs	r2, #1
 8012742:	4621      	mov	r1, r4
 8012744:	4630      	mov	r0, r6
 8012746:	4798      	blx	r3
    mld6_send(netif, group, ICMP6_TYPE_MLR);
 8012748:	2283      	movs	r2, #131	; 0x83
 801274a:	4629      	mov	r1, r5
 801274c:	4630      	mov	r0, r6
 801274e:	f7ff fea5 	bl	801249c <mld6_send>
    mld6_delayed_report(group, MLD6_JOIN_DELAYING_MEMBER_TMR_MS);
 8012752:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8012756:	4628      	mov	r0, r5
 8012758:	f7ff fe52 	bl	8012400 <mld6_delayed_report>
 801275c:	e7e1      	b.n	8012722 <mld6_joingroup_netif+0x9e>
      return ERR_MEM;
 801275e:	f04f 30ff 	mov.w	r0, #4294967295
 8012762:	e7e2      	b.n	801272a <mld6_joingroup_netif+0xa6>

08012764 <mld6_leavegroup_netif>:
{
 8012764:	b570      	push	{r4, r5, r6, lr}
 8012766:	b086      	sub	sp, #24
 8012768:	4606      	mov	r6, r0
 801276a:	460c      	mov	r4, r1
  if (ip6_addr_lacks_zone(groupaddr, IP6_MULTICAST)) {
 801276c:	7c0b      	ldrb	r3, [r1, #16]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d141      	bne.n	80127f6 <mld6_leavegroup_netif+0x92>
 8012772:	680b      	ldr	r3, [r1, #0]
 8012774:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8012778:	4019      	ands	r1, r3
 801277a:	f248 02fe 	movw	r2, #33022	; 0x80fe
 801277e:	4291      	cmp	r1, r2
 8012780:	d00a      	beq.n	8012798 <mld6_leavegroup_netif+0x34>
 8012782:	f648 72ff 	movw	r2, #36863	; 0x8fff
 8012786:	401a      	ands	r2, r3
 8012788:	f240 11ff 	movw	r1, #511	; 0x1ff
 801278c:	428a      	cmp	r2, r1
 801278e:	d003      	beq.n	8012798 <mld6_leavegroup_netif+0x34>
 8012790:	f240 21ff 	movw	r1, #767	; 0x2ff
 8012794:	428a      	cmp	r2, r1
 8012796:	d12e      	bne.n	80127f6 <mld6_leavegroup_netif+0x92>
    ip6_addr_set(&ip6addr, groupaddr);
 8012798:	b1f4      	cbz	r4, 80127d8 <mld6_leavegroup_netif+0x74>
 801279a:	9301      	str	r3, [sp, #4]
 801279c:	b1f4      	cbz	r4, 80127dc <mld6_leavegroup_netif+0x78>
 801279e:	6862      	ldr	r2, [r4, #4]
 80127a0:	9202      	str	r2, [sp, #8]
 80127a2:	b1ec      	cbz	r4, 80127e0 <mld6_leavegroup_netif+0x7c>
 80127a4:	68a2      	ldr	r2, [r4, #8]
 80127a6:	9203      	str	r2, [sp, #12]
 80127a8:	b1e4      	cbz	r4, 80127e4 <mld6_leavegroup_netif+0x80>
 80127aa:	68e2      	ldr	r2, [r4, #12]
 80127ac:	9204      	str	r2, [sp, #16]
    ip6_addr_assign_zone(&ip6addr, IP6_MULTICAST, netif);
 80127ae:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 80127b2:	4019      	ands	r1, r3
 80127b4:	f248 02fe 	movw	r2, #33022	; 0x80fe
 80127b8:	4291      	cmp	r1, r2
 80127ba:	d015      	beq.n	80127e8 <mld6_leavegroup_netif+0x84>
 80127bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80127c0:	041b      	lsls	r3, r3, #16
 80127c2:	0c1b      	lsrs	r3, r3, #16
 80127c4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80127c8:	4293      	cmp	r3, r2
 80127ca:	d00d      	beq.n	80127e8 <mld6_leavegroup_netif+0x84>
 80127cc:	f240 22ff 	movw	r2, #767	; 0x2ff
 80127d0:	4293      	cmp	r3, r2
 80127d2:	d009      	beq.n	80127e8 <mld6_leavegroup_netif+0x84>
 80127d4:	2300      	movs	r3, #0
 80127d6:	e00b      	b.n	80127f0 <mld6_leavegroup_netif+0x8c>
    ip6_addr_set(&ip6addr, groupaddr);
 80127d8:	2300      	movs	r3, #0
 80127da:	e7de      	b.n	801279a <mld6_leavegroup_netif+0x36>
 80127dc:	2200      	movs	r2, #0
 80127de:	e7df      	b.n	80127a0 <mld6_leavegroup_netif+0x3c>
 80127e0:	2200      	movs	r2, #0
 80127e2:	e7e0      	b.n	80127a6 <mld6_leavegroup_netif+0x42>
 80127e4:	2200      	movs	r2, #0
 80127e6:	e7e1      	b.n	80127ac <mld6_leavegroup_netif+0x48>
    ip6_addr_assign_zone(&ip6addr, IP6_MULTICAST, netif);
 80127e8:	f896 30de 	ldrb.w	r3, [r6, #222]	; 0xde
 80127ec:	3301      	adds	r3, #1
 80127ee:	b2db      	uxtb	r3, r3
 80127f0:	f88d 3014 	strb.w	r3, [sp, #20]
    groupaddr = &ip6addr;
 80127f4:	ac01      	add	r4, sp, #4
  group = mld6_lookfor_group(netif, groupaddr);
 80127f6:	4621      	mov	r1, r4
 80127f8:	4630      	mov	r0, r6
 80127fa:	f7ff feb8 	bl	801256e <mld6_lookfor_group>
  if (group != NULL) {
 80127fe:	4605      	mov	r5, r0
 8012800:	b300      	cbz	r0, 8012844 <mld6_leavegroup_netif+0xe0>
    if (group->use <= 1) {
 8012802:	7f03      	ldrb	r3, [r0, #28]
 8012804:	2b01      	cmp	r3, #1
 8012806:	d904      	bls.n	8012812 <mld6_leavegroup_netif+0xae>
      group->use--;
 8012808:	3b01      	subs	r3, #1
 801280a:	7703      	strb	r3, [r0, #28]
    return ERR_OK;
 801280c:	2000      	movs	r0, #0
}
 801280e:	b006      	add	sp, #24
 8012810:	bd70      	pop	{r4, r5, r6, pc}
      mld6_remove_group(netif, group);
 8012812:	4601      	mov	r1, r0
 8012814:	4630      	mov	r0, r6
 8012816:	f7ff fddb 	bl	80123d0 <mld6_remove_group>
      if (group->last_reporter_flag) {
 801281a:	7e2b      	ldrb	r3, [r5, #24]
 801281c:	b963      	cbnz	r3, 8012838 <mld6_leavegroup_netif+0xd4>
      if (netif->mld_mac_filter != NULL) {
 801281e:	f8d6 30e4 	ldr.w	r3, [r6, #228]	; 0xe4
 8012822:	b11b      	cbz	r3, 801282c <mld6_leavegroup_netif+0xc8>
        netif->mld_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
 8012824:	2200      	movs	r2, #0
 8012826:	4621      	mov	r1, r4
 8012828:	4630      	mov	r0, r6
 801282a:	4798      	blx	r3
      memp_free(MEMP_MLD6_GROUP, group);
 801282c:	4629      	mov	r1, r5
 801282e:	2009      	movs	r0, #9
 8012830:	f7f5 fb02 	bl	8007e38 <memp_free>
    return ERR_OK;
 8012834:	2000      	movs	r0, #0
 8012836:	e7ea      	b.n	801280e <mld6_leavegroup_netif+0xaa>
        mld6_send(netif, group, ICMP6_TYPE_MLD);
 8012838:	2284      	movs	r2, #132	; 0x84
 801283a:	4629      	mov	r1, r5
 801283c:	4630      	mov	r0, r6
 801283e:	f7ff fe2d 	bl	801249c <mld6_send>
 8012842:	e7ec      	b.n	801281e <mld6_leavegroup_netif+0xba>
  return ERR_VAL;
 8012844:	f06f 0005 	mvn.w	r0, #5
 8012848:	e7e1      	b.n	801280e <mld6_leavegroup_netif+0xaa>
	...

0801284c <mld6_tmr>:
{
 801284c:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 801284e:	4b0f      	ldr	r3, [pc, #60]	; (801288c <mld6_tmr+0x40>)
 8012850:	681d      	ldr	r5, [r3, #0]
 8012852:	e015      	b.n	8012880 <mld6_tmr+0x34>
      group = group->next;
 8012854:	6824      	ldr	r4, [r4, #0]
    while (group != NULL) {
 8012856:	b194      	cbz	r4, 801287e <mld6_tmr+0x32>
      if (group->timer > 0) {
 8012858:	8b63      	ldrh	r3, [r4, #26]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d0fa      	beq.n	8012854 <mld6_tmr+0x8>
        group->timer--;
 801285e:	3b01      	subs	r3, #1
 8012860:	b29b      	uxth	r3, r3
 8012862:	8363      	strh	r3, [r4, #26]
        if (group->timer == 0) {
 8012864:	2b00      	cmp	r3, #0
 8012866:	d1f5      	bne.n	8012854 <mld6_tmr+0x8>
          if (group->group_state == MLD6_GROUP_DELAYING_MEMBER) {
 8012868:	7e63      	ldrb	r3, [r4, #25]
 801286a:	2b01      	cmp	r3, #1
 801286c:	d1f2      	bne.n	8012854 <mld6_tmr+0x8>
            mld6_send(netif, group, ICMP6_TYPE_MLR);
 801286e:	2283      	movs	r2, #131	; 0x83
 8012870:	4621      	mov	r1, r4
 8012872:	4628      	mov	r0, r5
 8012874:	f7ff fe12 	bl	801249c <mld6_send>
            group->group_state = MLD6_GROUP_IDLE_MEMBER;
 8012878:	2302      	movs	r3, #2
 801287a:	7663      	strb	r3, [r4, #25]
 801287c:	e7ea      	b.n	8012854 <mld6_tmr+0x8>
  NETIF_FOREACH(netif) {
 801287e:	682d      	ldr	r5, [r5, #0]
 8012880:	b115      	cbz	r5, 8012888 <mld6_tmr+0x3c>
    struct mld_group *group = netif_mld6_data(netif);
 8012882:	f8d5 40cc 	ldr.w	r4, [r5, #204]	; 0xcc
    while (group != NULL) {
 8012886:	e7e6      	b.n	8012856 <mld6_tmr+0xa>
}
 8012888:	bd38      	pop	{r3, r4, r5, pc}
 801288a:	bf00      	nop
 801288c:	20008600 	.word	0x20008600

08012890 <nd6_find_neighbor_cache_entry>:
 */
static s8_t
nd6_find_neighbor_cache_entry(const ip6_addr_t *ip6addr)
{
  s8_t i;
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8012890:	2300      	movs	r3, #0
 8012892:	2b09      	cmp	r3, #9
 8012894:	dc30      	bgt.n	80128f8 <nd6_find_neighbor_cache_entry+0x68>
{
 8012896:	b430      	push	{r4, r5}
 8012898:	e003      	b.n	80128a2 <nd6_find_neighbor_cache_entry+0x12>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 801289a:	3301      	adds	r3, #1
 801289c:	b25b      	sxtb	r3, r3
 801289e:	2b09      	cmp	r3, #9
 80128a0:	dc25      	bgt.n	80128ee <nd6_find_neighbor_cache_entry+0x5e>
    if (ip6_addr_cmp(ip6addr, &(neighbor_cache[i].next_hop_address))) {
 80128a2:	6801      	ldr	r1, [r0, #0]
 80128a4:	222c      	movs	r2, #44	; 0x2c
 80128a6:	fb02 f203 	mul.w	r2, r2, r3
 80128aa:	4c15      	ldr	r4, [pc, #84]	; (8012900 <nd6_find_neighbor_cache_entry+0x70>)
 80128ac:	58a2      	ldr	r2, [r4, r2]
 80128ae:	4291      	cmp	r1, r2
 80128b0:	d1f3      	bne.n	801289a <nd6_find_neighbor_cache_entry+0xa>
 80128b2:	6841      	ldr	r1, [r0, #4]
 80128b4:	222c      	movs	r2, #44	; 0x2c
 80128b6:	fb02 4203 	mla	r2, r2, r3, r4
 80128ba:	6852      	ldr	r2, [r2, #4]
 80128bc:	4291      	cmp	r1, r2
 80128be:	d1ec      	bne.n	801289a <nd6_find_neighbor_cache_entry+0xa>
 80128c0:	6881      	ldr	r1, [r0, #8]
 80128c2:	222c      	movs	r2, #44	; 0x2c
 80128c4:	fb02 4203 	mla	r2, r2, r3, r4
 80128c8:	6892      	ldr	r2, [r2, #8]
 80128ca:	4291      	cmp	r1, r2
 80128cc:	d1e5      	bne.n	801289a <nd6_find_neighbor_cache_entry+0xa>
 80128ce:	68c1      	ldr	r1, [r0, #12]
 80128d0:	222c      	movs	r2, #44	; 0x2c
 80128d2:	fb02 4203 	mla	r2, r2, r3, r4
 80128d6:	68d2      	ldr	r2, [r2, #12]
 80128d8:	4291      	cmp	r1, r2
 80128da:	d1de      	bne.n	801289a <nd6_find_neighbor_cache_entry+0xa>
 80128dc:	7c01      	ldrb	r1, [r0, #16]
 80128de:	4622      	mov	r2, r4
 80128e0:	242c      	movs	r4, #44	; 0x2c
 80128e2:	fb04 2503 	mla	r5, r4, r3, r2
 80128e6:	7c2a      	ldrb	r2, [r5, #16]
 80128e8:	4291      	cmp	r1, r2
 80128ea:	d1d6      	bne.n	801289a <nd6_find_neighbor_cache_entry+0xa>
 80128ec:	e001      	b.n	80128f2 <nd6_find_neighbor_cache_entry+0x62>
      return i;
    }
  }
  return -1;
 80128ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80128f2:	4618      	mov	r0, r3
 80128f4:	bc30      	pop	{r4, r5}
 80128f6:	4770      	bx	lr
  return -1;
 80128f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	4770      	bx	lr
 8012900:	20008660 	.word	0x20008660

08012904 <nd6_find_destination_cache_entry>:
{
  s16_t i;

  IP6_ADDR_ZONECHECK(ip6addr);

  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 8012904:	2300      	movs	r3, #0
 8012906:	2b09      	cmp	r3, #9
 8012908:	dc2e      	bgt.n	8012968 <nd6_find_destination_cache_entry+0x64>
{
 801290a:	b430      	push	{r4, r5}
 801290c:	e003      	b.n	8012916 <nd6_find_destination_cache_entry+0x12>
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 801290e:	3301      	adds	r3, #1
 8012910:	b21b      	sxth	r3, r3
 8012912:	2b09      	cmp	r3, #9
 8012914:	dc23      	bgt.n	801295e <nd6_find_destination_cache_entry+0x5a>
    if (ip6_addr_cmp(ip6addr, &(destination_cache[i].destination_addr))) {
 8012916:	6804      	ldr	r4, [r0, #0]
 8012918:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801291c:	010a      	lsls	r2, r1, #4
 801291e:	4914      	ldr	r1, [pc, #80]	; (8012970 <nd6_find_destination_cache_entry+0x6c>)
 8012920:	588a      	ldr	r2, [r1, r2]
 8012922:	4294      	cmp	r4, r2
 8012924:	d1f3      	bne.n	801290e <nd6_find_destination_cache_entry+0xa>
 8012926:	6844      	ldr	r4, [r0, #4]
 8012928:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801292c:	0111      	lsls	r1, r2, #4
 801292e:	4a10      	ldr	r2, [pc, #64]	; (8012970 <nd6_find_destination_cache_entry+0x6c>)
 8012930:	440a      	add	r2, r1
 8012932:	6852      	ldr	r2, [r2, #4]
 8012934:	4294      	cmp	r4, r2
 8012936:	d1ea      	bne.n	801290e <nd6_find_destination_cache_entry+0xa>
 8012938:	6884      	ldr	r4, [r0, #8]
 801293a:	4a0d      	ldr	r2, [pc, #52]	; (8012970 <nd6_find_destination_cache_entry+0x6c>)
 801293c:	440a      	add	r2, r1
 801293e:	6892      	ldr	r2, [r2, #8]
 8012940:	4294      	cmp	r4, r2
 8012942:	d1e4      	bne.n	801290e <nd6_find_destination_cache_entry+0xa>
 8012944:	68c4      	ldr	r4, [r0, #12]
 8012946:	4a0a      	ldr	r2, [pc, #40]	; (8012970 <nd6_find_destination_cache_entry+0x6c>)
 8012948:	440a      	add	r2, r1
 801294a:	68d2      	ldr	r2, [r2, #12]
 801294c:	4294      	cmp	r4, r2
 801294e:	d1de      	bne.n	801290e <nd6_find_destination_cache_entry+0xa>
 8012950:	7c04      	ldrb	r4, [r0, #16]
 8012952:	4a07      	ldr	r2, [pc, #28]	; (8012970 <nd6_find_destination_cache_entry+0x6c>)
 8012954:	440a      	add	r2, r1
 8012956:	7c12      	ldrb	r2, [r2, #16]
 8012958:	4294      	cmp	r4, r2
 801295a:	d1d8      	bne.n	801290e <nd6_find_destination_cache_entry+0xa>
 801295c:	e001      	b.n	8012962 <nd6_find_destination_cache_entry+0x5e>
      return i;
    }
  }
  return -1;
 801295e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012962:	4618      	mov	r0, r3
 8012964:	bc30      	pop	{r4, r5}
 8012966:	4770      	bx	lr
  return -1;
 8012968:	f04f 33ff 	mov.w	r3, #4294967295
}
 801296c:	4618      	mov	r0, r3
 801296e:	4770      	bx	lr
 8012970:	200088a4 	.word	0x200088a4

08012974 <nd6_new_destination_cache_entry>:
{
  s16_t i, j;
  u32_t age;

  /* Find an empty entry. */
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 8012974:	2000      	movs	r0, #0
 8012976:	e001      	b.n	801297c <nd6_new_destination_cache_entry+0x8>
 8012978:	3001      	adds	r0, #1
 801297a:	b200      	sxth	r0, r0
 801297c:	2809      	cmp	r0, #9
 801297e:	dc19      	bgt.n	80129b4 <nd6_new_destination_cache_entry+0x40>
    if (ip6_addr_isany(&(destination_cache[i].destination_addr))) {
 8012980:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8012984:	0113      	lsls	r3, r2, #4
 8012986:	4a14      	ldr	r2, [pc, #80]	; (80129d8 <nd6_new_destination_cache_entry+0x64>)
 8012988:	58d3      	ldr	r3, [r2, r3]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d1f4      	bne.n	8012978 <nd6_new_destination_cache_entry+0x4>
 801298e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8012992:	011a      	lsls	r2, r3, #4
 8012994:	4b10      	ldr	r3, [pc, #64]	; (80129d8 <nd6_new_destination_cache_entry+0x64>)
 8012996:	4413      	add	r3, r2
 8012998:	685b      	ldr	r3, [r3, #4]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d1ec      	bne.n	8012978 <nd6_new_destination_cache_entry+0x4>
 801299e:	4b0e      	ldr	r3, [pc, #56]	; (80129d8 <nd6_new_destination_cache_entry+0x64>)
 80129a0:	4413      	add	r3, r2
 80129a2:	689b      	ldr	r3, [r3, #8]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d1e7      	bne.n	8012978 <nd6_new_destination_cache_entry+0x4>
 80129a8:	4b0b      	ldr	r3, [pc, #44]	; (80129d8 <nd6_new_destination_cache_entry+0x64>)
 80129aa:	4413      	add	r3, r2
 80129ac:	68db      	ldr	r3, [r3, #12]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d1e2      	bne.n	8012978 <nd6_new_destination_cache_entry+0x4>
      j = i;
    }
  }

  return j;
}
 80129b2:	4770      	bx	lr
  j = LWIP_ND6_NUM_DESTINATIONS - 1;
 80129b4:	2009      	movs	r0, #9
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 80129b6:	2300      	movs	r3, #0
 80129b8:	e001      	b.n	80129be <nd6_new_destination_cache_entry+0x4a>
 80129ba:	3301      	adds	r3, #1
 80129bc:	b21b      	sxth	r3, r3
 80129be:	2b09      	cmp	r3, #9
 80129c0:	dcf7      	bgt.n	80129b2 <nd6_new_destination_cache_entry+0x3e>
    if (destination_cache[i].age > age) {
 80129c2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80129c6:	0111      	lsls	r1, r2, #4
 80129c8:	4a03      	ldr	r2, [pc, #12]	; (80129d8 <nd6_new_destination_cache_entry+0x64>)
 80129ca:	440a      	add	r2, r1
 80129cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80129ce:	2a00      	cmp	r2, #0
 80129d0:	d0f3      	beq.n	80129ba <nd6_new_destination_cache_entry+0x46>
      j = i;
 80129d2:	4618      	mov	r0, r3
 80129d4:	e7f1      	b.n	80129ba <nd6_new_destination_cache_entry+0x46>
 80129d6:	bf00      	nop
 80129d8:	200088a4 	.word	0x200088a4

080129dc <nd6_is_prefix_in_netif>:
 * @param ip6addr the IPv6 address to match
 * @return 1 if the address is on-link, 0 otherwise
 */
static int
nd6_is_prefix_in_netif(const ip6_addr_t *ip6addr, struct netif *netif)
{
 80129dc:	b470      	push	{r4, r5, r6}
  s8_t i;

  /* Check to see if the address matches an on-link prefix. */
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
 80129de:	2300      	movs	r3, #0
 80129e0:	e001      	b.n	80129e6 <nd6_is_prefix_in_netif+0xa>
 80129e2:	3301      	adds	r3, #1
 80129e4:	b25b      	sxtb	r3, r3
 80129e6:	2b04      	cmp	r3, #4
 80129e8:	dc28      	bgt.n	8012a3c <nd6_is_prefix_in_netif+0x60>
    if ((prefix_list[i].netif == netif) &&
 80129ea:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80129ee:	0094      	lsls	r4, r2, #2
 80129f0:	4a2c      	ldr	r2, [pc, #176]	; (8012aa4 <nd6_is_prefix_in_netif+0xc8>)
 80129f2:	4422      	add	r2, r4
 80129f4:	6952      	ldr	r2, [r2, #20]
 80129f6:	428a      	cmp	r2, r1
 80129f8:	d1f3      	bne.n	80129e2 <nd6_is_prefix_in_netif+0x6>
        (prefix_list[i].invalidation_timer > 0) &&
 80129fa:	ebc3 04c3 	rsb	r4, r3, r3, lsl #3
 80129fe:	00a2      	lsls	r2, r4, #2
 8012a00:	4c28      	ldr	r4, [pc, #160]	; (8012aa4 <nd6_is_prefix_in_netif+0xc8>)
 8012a02:	4414      	add	r4, r2
 8012a04:	69a2      	ldr	r2, [r4, #24]
    if ((prefix_list[i].netif == netif) &&
 8012a06:	2a00      	cmp	r2, #0
 8012a08:	d0eb      	beq.n	80129e2 <nd6_is_prefix_in_netif+0x6>
        ip6_addr_netcmp(ip6addr, &(prefix_list[i].prefix))) {
 8012a0a:	6806      	ldr	r6, [r0, #0]
 8012a0c:	ebc3 04c3 	rsb	r4, r3, r3, lsl #3
 8012a10:	00a2      	lsls	r2, r4, #2
 8012a12:	4c24      	ldr	r4, [pc, #144]	; (8012aa4 <nd6_is_prefix_in_netif+0xc8>)
 8012a14:	58a2      	ldr	r2, [r4, r2]
        (prefix_list[i].invalidation_timer > 0) &&
 8012a16:	4296      	cmp	r6, r2
 8012a18:	d1e3      	bne.n	80129e2 <nd6_is_prefix_in_netif+0x6>
        ip6_addr_netcmp(ip6addr, &(prefix_list[i].prefix))) {
 8012a1a:	6846      	ldr	r6, [r0, #4]
 8012a1c:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8012a20:	0094      	lsls	r4, r2, #2
 8012a22:	4a20      	ldr	r2, [pc, #128]	; (8012aa4 <nd6_is_prefix_in_netif+0xc8>)
 8012a24:	4422      	add	r2, r4
 8012a26:	6852      	ldr	r2, [r2, #4]
 8012a28:	4296      	cmp	r6, r2
 8012a2a:	d1da      	bne.n	80129e2 <nd6_is_prefix_in_netif+0x6>
 8012a2c:	7c06      	ldrb	r6, [r0, #16]
 8012a2e:	4a1d      	ldr	r2, [pc, #116]	; (8012aa4 <nd6_is_prefix_in_netif+0xc8>)
 8012a30:	4422      	add	r2, r4
 8012a32:	7c12      	ldrb	r2, [r2, #16]
 8012a34:	4296      	cmp	r6, r2
 8012a36:	d1d4      	bne.n	80129e2 <nd6_is_prefix_in_netif+0x6>
      return 1;
 8012a38:	2001      	movs	r0, #1
 8012a3a:	e031      	b.n	8012aa0 <nd6_is_prefix_in_netif+0xc4>
  }
  /* Check to see if address prefix matches a manually configured (= static)
   * address. Static addresses have an implied /64 subnet assignment. Dynamic
   * addresses (from autoconfiguration) have no implied subnet assignment, and
   * are thus effectively /128 assignments. See RFC 5942 for more on this. */
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	e009      	b.n	8012a54 <nd6_is_prefix_in_netif+0x78>
    if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
        netif_ip6_addr_isstatic(netif, i) &&
        ip6_addr_netcmp(ip6addr, netif_ip6_addr(netif, i))) {
 8012a40:	6806      	ldr	r6, [r0, #0]
 8012a42:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8012a46:	00ec      	lsls	r4, r5, #3
 8012a48:	440c      	add	r4, r1
 8012a4a:	6ce4      	ldr	r4, [r4, #76]	; 0x4c
        netif_ip6_addr_isstatic(netif, i) &&
 8012a4c:	42a6      	cmp	r6, r4
 8012a4e:	d013      	beq.n	8012a78 <nd6_is_prefix_in_netif+0x9c>
  for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8012a50:	3301      	adds	r3, #1
 8012a52:	b25b      	sxtb	r3, r3
 8012a54:	2b02      	cmp	r3, #2
 8012a56:	dc22      	bgt.n	8012a9e <nd6_is_prefix_in_netif+0xc2>
    if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
 8012a58:	461a      	mov	r2, r3
 8012a5a:	18cc      	adds	r4, r1, r3
 8012a5c:	f894 4094 	ldrb.w	r4, [r4, #148]	; 0x94
 8012a60:	f014 0f10 	tst.w	r4, #16
 8012a64:	d0f4      	beq.n	8012a50 <nd6_is_prefix_in_netif+0x74>
 8012a66:	2900      	cmp	r1, #0
 8012a68:	d0ea      	beq.n	8012a40 <nd6_is_prefix_in_netif+0x64>
        netif_ip6_addr_isstatic(netif, i) &&
 8012a6a:	f103 0426 	add.w	r4, r3, #38	; 0x26
 8012a6e:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8012a72:	2c00      	cmp	r4, #0
 8012a74:	d1ec      	bne.n	8012a50 <nd6_is_prefix_in_netif+0x74>
 8012a76:	e7e3      	b.n	8012a40 <nd6_is_prefix_in_netif+0x64>
        ip6_addr_netcmp(ip6addr, netif_ip6_addr(netif, i))) {
 8012a78:	6846      	ldr	r6, [r0, #4]
 8012a7a:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8012a7e:	00ec      	lsls	r4, r5, #3
 8012a80:	440c      	add	r4, r1
 8012a82:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8012a84:	42a6      	cmp	r6, r4
 8012a86:	d1e3      	bne.n	8012a50 <nd6_is_prefix_in_netif+0x74>
 8012a88:	7c05      	ldrb	r5, [r0, #16]
 8012a8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012a8e:	00d4      	lsls	r4, r2, #3
 8012a90:	440c      	add	r4, r1
 8012a92:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
 8012a96:	4295      	cmp	r5, r2
 8012a98:	d1da      	bne.n	8012a50 <nd6_is_prefix_in_netif+0x74>
      return 1;
 8012a9a:	2001      	movs	r0, #1
 8012a9c:	e000      	b.n	8012aa0 <nd6_is_prefix_in_netif+0xc4>
    }
  }
  return 0;
 8012a9e:	2000      	movs	r0, #0
}
 8012aa0:	bc70      	pop	{r4, r5, r6}
 8012aa2:	4770      	bx	lr
 8012aa4:	20008818 	.word	0x20008818

08012aa8 <nd6_select_router>:
 * @return the default router entry index, or -1 if no suitable
 *         router is found
 */
static s8_t
nd6_select_router(const ip6_addr_t *ip6addr, struct netif *netif)
{
 8012aa8:	b410      	push	{r4}
  LWIP_UNUSED_ARG(ip6addr); /* @todo match preferred routes!! (must implement ND6_OPTION_TYPE_ROUTE_INFO) */

  /* @todo: implement default router preference */

  /* Look for valid routers. A reachable router is preferred. */
  valid_router = -1;
 8012aaa:	f04f 30ff 	mov.w	r0, #4294967295
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 8012aae:	2300      	movs	r3, #0
 8012ab0:	e00f      	b.n	8012ad2 <nd6_select_router+0x2a>
    /* Is the router netif both set and apppropriate? */
    if (default_router_list[i].neighbor_entry != NULL) {
      router_netif = default_router_list[i].neighbor_entry->netif;
      if ((router_netif != NULL) && (netif != NULL ? netif == router_netif :
          (netif_is_up(router_netif) && netif_is_link_up(router_netif)))) {
 8012ab2:	f892 20db 	ldrb.w	r2, [r2, #219]	; 0xdb
 8012ab6:	f012 0f01 	tst.w	r2, #1
 8012aba:	d004      	beq.n	8012ac6 <nd6_select_router+0x1e>
 8012abc:	f012 0f04 	tst.w	r2, #4
 8012ac0:	d103      	bne.n	8012aca <nd6_select_router+0x22>
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	e017      	b.n	8012af6 <nd6_select_router+0x4e>
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	e015      	b.n	8012af6 <nd6_select_router+0x4e>
 8012aca:	2201      	movs	r2, #1
 8012acc:	e013      	b.n	8012af6 <nd6_select_router+0x4e>
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 8012ace:	3301      	adds	r3, #1
 8012ad0:	b25b      	sxtb	r3, r3
 8012ad2:	2b02      	cmp	r3, #2
 8012ad4:	dc1b      	bgt.n	8012b0e <nd6_select_router+0x66>
    if (default_router_list[i].neighbor_entry != NULL) {
 8012ad6:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8012ada:	00a2      	lsls	r2, r4, #2
 8012adc:	4c2e      	ldr	r4, [pc, #184]	; (8012b98 <nd6_select_router+0xf0>)
 8012ade:	58a4      	ldr	r4, [r4, r2]
 8012ae0:	2c00      	cmp	r4, #0
 8012ae2:	d0f4      	beq.n	8012ace <nd6_select_router+0x26>
      router_netif = default_router_list[i].neighbor_entry->netif;
 8012ae4:	6962      	ldr	r2, [r4, #20]
      if ((router_netif != NULL) && (netif != NULL ? netif == router_netif :
 8012ae6:	2a00      	cmp	r2, #0
 8012ae8:	d0f1      	beq.n	8012ace <nd6_select_router+0x26>
 8012aea:	2900      	cmp	r1, #0
 8012aec:	d0e1      	beq.n	8012ab2 <nd6_select_router+0xa>
 8012aee:	4291      	cmp	r1, r2
 8012af0:	bf14      	ite	ne
 8012af2:	2200      	movne	r2, #0
 8012af4:	2201      	moveq	r2, #1
 8012af6:	2a00      	cmp	r2, #0
 8012af8:	d0e9      	beq.n	8012ace <nd6_select_router+0x26>
        /* Is the router valid, i.e., reachable or probably reachable as per
         * RFC 4861 Sec. 6.3.6? Note that we will never return a router that
         * has no neighbor cache entry, due to the netif association tests. */
        if (default_router_list[i].neighbor_entry->state != ND6_INCOMPLETE) {
 8012afa:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8012afe:	2a01      	cmp	r2, #1
 8012b00:	d0e5      	beq.n	8012ace <nd6_select_router+0x26>
          /* Is the router known to be reachable? */
          if (default_router_list[i].neighbor_entry->state == ND6_REACHABLE) {
 8012b02:	2a02      	cmp	r2, #2
 8012b04:	d045      	beq.n	8012b92 <nd6_select_router+0xea>
            return i; /* valid and reachable - done! */
          } else if (valid_router < 0) {
 8012b06:	2800      	cmp	r0, #0
 8012b08:	dae1      	bge.n	8012ace <nd6_select_router+0x26>
            valid_router = i; /* valid but not known to be reachable */
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	e7df      	b.n	8012ace <nd6_select_router+0x26>
          }
        }
      }
    }
  }
  if (valid_router >= 0) {
 8012b0e:	2800      	cmp	r0, #0
 8012b10:	db02      	blt.n	8012b18 <nd6_select_router+0x70>
    }
  }

  /* no suitable router found. */
  return -1;
}
 8012b12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b16:	4770      	bx	lr
  if ((netif == NULL) && (++last_router >= LWIP_ND6_NUM_ROUTERS)) {
 8012b18:	b121      	cbz	r1, 8012b24 <nd6_select_router+0x7c>
  i = last_router;
 8012b1a:	4b20      	ldr	r3, [pc, #128]	; (8012b9c <nd6_select_router+0xf4>)
 8012b1c:	f993 0000 	ldrsb.w	r0, [r3]
  for (j = 0; j < LWIP_ND6_NUM_ROUTERS; j++) {
 8012b20:	2300      	movs	r3, #0
 8012b22:	e01e      	b.n	8012b62 <nd6_select_router+0xba>
  if ((netif == NULL) && (++last_router >= LWIP_ND6_NUM_ROUTERS)) {
 8012b24:	4a1d      	ldr	r2, [pc, #116]	; (8012b9c <nd6_select_router+0xf4>)
 8012b26:	7813      	ldrb	r3, [r2, #0]
 8012b28:	3301      	adds	r3, #1
 8012b2a:	b25b      	sxtb	r3, r3
 8012b2c:	7013      	strb	r3, [r2, #0]
 8012b2e:	2b02      	cmp	r3, #2
 8012b30:	ddf3      	ble.n	8012b1a <nd6_select_router+0x72>
    last_router = 0;
 8012b32:	4613      	mov	r3, r2
 8012b34:	2200      	movs	r2, #0
 8012b36:	701a      	strb	r2, [r3, #0]
 8012b38:	e7ef      	b.n	8012b1a <nd6_select_router+0x72>
          (netif_is_up(router_netif) && netif_is_link_up(router_netif)))) {
 8012b3a:	f892 20db 	ldrb.w	r2, [r2, #219]	; 0xdb
 8012b3e:	f012 0f01 	tst.w	r2, #1
 8012b42:	d004      	beq.n	8012b4e <nd6_select_router+0xa6>
 8012b44:	f012 0f04 	tst.w	r2, #4
 8012b48:	d11e      	bne.n	8012b88 <nd6_select_router+0xe0>
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	e000      	b.n	8012b50 <nd6_select_router+0xa8>
 8012b4e:	2200      	movs	r2, #0
      if ((router_netif != NULL) && (netif != NULL ? netif == router_netif :
 8012b50:	2a00      	cmp	r2, #0
 8012b52:	d1de      	bne.n	8012b12 <nd6_select_router+0x6a>
    if (++i >= LWIP_ND6_NUM_ROUTERS) {
 8012b54:	3001      	adds	r0, #1
 8012b56:	b240      	sxtb	r0, r0
 8012b58:	2802      	cmp	r0, #2
 8012b5a:	dd00      	ble.n	8012b5e <nd6_select_router+0xb6>
      i = 0;
 8012b5c:	2000      	movs	r0, #0
  for (j = 0; j < LWIP_ND6_NUM_ROUTERS; j++) {
 8012b5e:	3301      	adds	r3, #1
 8012b60:	b25b      	sxtb	r3, r3
 8012b62:	2b02      	cmp	r3, #2
 8012b64:	dc12      	bgt.n	8012b8c <nd6_select_router+0xe4>
    if (default_router_list[i].neighbor_entry != NULL) {
 8012b66:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8012b6a:	00a2      	lsls	r2, r4, #2
 8012b6c:	4c0a      	ldr	r4, [pc, #40]	; (8012b98 <nd6_select_router+0xf0>)
 8012b6e:	58a2      	ldr	r2, [r4, r2]
 8012b70:	2a00      	cmp	r2, #0
 8012b72:	d0ef      	beq.n	8012b54 <nd6_select_router+0xac>
      router_netif = default_router_list[i].neighbor_entry->netif;
 8012b74:	6952      	ldr	r2, [r2, #20]
      if ((router_netif != NULL) && (netif != NULL ? netif == router_netif :
 8012b76:	2a00      	cmp	r2, #0
 8012b78:	d0ec      	beq.n	8012b54 <nd6_select_router+0xac>
 8012b7a:	2900      	cmp	r1, #0
 8012b7c:	d0dd      	beq.n	8012b3a <nd6_select_router+0x92>
 8012b7e:	4291      	cmp	r1, r2
 8012b80:	bf14      	ite	ne
 8012b82:	2200      	movne	r2, #0
 8012b84:	2201      	moveq	r2, #1
 8012b86:	e7e3      	b.n	8012b50 <nd6_select_router+0xa8>
          (netif_is_up(router_netif) && netif_is_link_up(router_netif)))) {
 8012b88:	2201      	movs	r2, #1
 8012b8a:	e7e1      	b.n	8012b50 <nd6_select_router+0xa8>
  return -1;
 8012b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8012b90:	e7bf      	b.n	8012b12 <nd6_select_router+0x6a>
            return i; /* valid and reachable - done! */
 8012b92:	4618      	mov	r0, r3
 8012b94:	e7bd      	b.n	8012b12 <nd6_select_router+0x6a>
 8012b96:	bf00      	nop
 8012b98:	20008a84 	.word	0x20008a84
 8012b9c:	200018a4 	.word	0x200018a4

08012ba0 <nd6_get_router>:
  s8_t i;

  IP6_ADDR_ZONECHECK_NETIF(router_addr, netif);

  /* Look for router. */
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	2b02      	cmp	r3, #2
 8012ba4:	dc2c      	bgt.n	8012c00 <nd6_get_router+0x60>
{
 8012ba6:	b430      	push	{r4, r5}
 8012ba8:	e007      	b.n	8012bba <nd6_get_router+0x1a>
    if ((default_router_list[i].neighbor_entry != NULL) &&
        ((netif != NULL) ? netif == default_router_list[i].neighbor_entry->netif : 1) &&
        ip6_addr_cmp(router_addr, &(default_router_list[i].neighbor_entry->next_hop_address))) {
 8012baa:	6805      	ldr	r5, [r0, #0]
 8012bac:	6814      	ldr	r4, [r2, #0]
        ((netif != NULL) ? netif == default_router_list[i].neighbor_entry->netif : 1) &&
 8012bae:	42a5      	cmp	r5, r4
 8012bb0:	d010      	beq.n	8012bd4 <nd6_get_router+0x34>
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 8012bb2:	3301      	adds	r3, #1
 8012bb4:	b25b      	sxtb	r3, r3
 8012bb6:	2b02      	cmp	r3, #2
 8012bb8:	dc1d      	bgt.n	8012bf6 <nd6_get_router+0x56>
    if ((default_router_list[i].neighbor_entry != NULL) &&
 8012bba:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8012bbe:	00a2      	lsls	r2, r4, #2
 8012bc0:	4c11      	ldr	r4, [pc, #68]	; (8012c08 <nd6_get_router+0x68>)
 8012bc2:	58a2      	ldr	r2, [r4, r2]
 8012bc4:	2a00      	cmp	r2, #0
 8012bc6:	d0f4      	beq.n	8012bb2 <nd6_get_router+0x12>
 8012bc8:	2900      	cmp	r1, #0
 8012bca:	d0ee      	beq.n	8012baa <nd6_get_router+0xa>
        ((netif != NULL) ? netif == default_router_list[i].neighbor_entry->netif : 1) &&
 8012bcc:	6954      	ldr	r4, [r2, #20]
    if ((default_router_list[i].neighbor_entry != NULL) &&
 8012bce:	428c      	cmp	r4, r1
 8012bd0:	d1ef      	bne.n	8012bb2 <nd6_get_router+0x12>
 8012bd2:	e7ea      	b.n	8012baa <nd6_get_router+0xa>
        ip6_addr_cmp(router_addr, &(default_router_list[i].neighbor_entry->next_hop_address))) {
 8012bd4:	6845      	ldr	r5, [r0, #4]
 8012bd6:	6854      	ldr	r4, [r2, #4]
 8012bd8:	42a5      	cmp	r5, r4
 8012bda:	d1ea      	bne.n	8012bb2 <nd6_get_router+0x12>
 8012bdc:	6885      	ldr	r5, [r0, #8]
 8012bde:	6894      	ldr	r4, [r2, #8]
 8012be0:	42a5      	cmp	r5, r4
 8012be2:	d1e6      	bne.n	8012bb2 <nd6_get_router+0x12>
 8012be4:	68c5      	ldr	r5, [r0, #12]
 8012be6:	68d4      	ldr	r4, [r2, #12]
 8012be8:	42a5      	cmp	r5, r4
 8012bea:	d1e2      	bne.n	8012bb2 <nd6_get_router+0x12>
 8012bec:	7c04      	ldrb	r4, [r0, #16]
 8012bee:	7c12      	ldrb	r2, [r2, #16]
 8012bf0:	4294      	cmp	r4, r2
 8012bf2:	d1de      	bne.n	8012bb2 <nd6_get_router+0x12>
 8012bf4:	e001      	b.n	8012bfa <nd6_get_router+0x5a>
      return i;
    }
  }

  /* router not found. */
  return -1;
 8012bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	bc30      	pop	{r4, r5}
 8012bfe:	4770      	bx	lr
  return -1;
 8012c00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c04:	4618      	mov	r0, r3
 8012c06:	4770      	bx	lr
 8012c08:	20008a84 	.word	0x20008a84

08012c0c <nd6_get_onlink_prefix>:
nd6_get_onlink_prefix(const ip6_addr_t *prefix, struct netif *netif)
{
  s8_t i;

  /* Look for prefix in list. */
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	2b04      	cmp	r3, #4
 8012c10:	dc2d      	bgt.n	8012c6e <nd6_get_onlink_prefix+0x62>
{
 8012c12:	b430      	push	{r4, r5}
 8012c14:	e003      	b.n	8012c1e <nd6_get_onlink_prefix+0x12>
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 8012c16:	3301      	adds	r3, #1
 8012c18:	b25b      	sxtb	r3, r3
 8012c1a:	2b04      	cmp	r3, #4
 8012c1c:	dc22      	bgt.n	8012c64 <nd6_get_onlink_prefix+0x58>
    if ((ip6_addr_netcmp(&(prefix_list[i].prefix), prefix)) &&
 8012c1e:	ebc3 04c3 	rsb	r4, r3, r3, lsl #3
 8012c22:	00a2      	lsls	r2, r4, #2
 8012c24:	4c14      	ldr	r4, [pc, #80]	; (8012c78 <nd6_get_onlink_prefix+0x6c>)
 8012c26:	58a4      	ldr	r4, [r4, r2]
 8012c28:	6802      	ldr	r2, [r0, #0]
 8012c2a:	4294      	cmp	r4, r2
 8012c2c:	d1f3      	bne.n	8012c16 <nd6_get_onlink_prefix+0xa>
 8012c2e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8012c32:	0094      	lsls	r4, r2, #2
 8012c34:	4a10      	ldr	r2, [pc, #64]	; (8012c78 <nd6_get_onlink_prefix+0x6c>)
 8012c36:	4422      	add	r2, r4
 8012c38:	6854      	ldr	r4, [r2, #4]
 8012c3a:	6842      	ldr	r2, [r0, #4]
 8012c3c:	4294      	cmp	r4, r2
 8012c3e:	d1ea      	bne.n	8012c16 <nd6_get_onlink_prefix+0xa>
 8012c40:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8012c44:	0094      	lsls	r4, r2, #2
 8012c46:	4a0c      	ldr	r2, [pc, #48]	; (8012c78 <nd6_get_onlink_prefix+0x6c>)
 8012c48:	4422      	add	r2, r4
 8012c4a:	7c14      	ldrb	r4, [r2, #16]
 8012c4c:	7c02      	ldrb	r2, [r0, #16]
 8012c4e:	4294      	cmp	r4, r2
 8012c50:	d1e1      	bne.n	8012c16 <nd6_get_onlink_prefix+0xa>
        (prefix_list[i].netif == netif)) {
 8012c52:	ebc3 05c3 	rsb	r5, r3, r3, lsl #3
 8012c56:	00ac      	lsls	r4, r5, #2
 8012c58:	4a07      	ldr	r2, [pc, #28]	; (8012c78 <nd6_get_onlink_prefix+0x6c>)
 8012c5a:	4422      	add	r2, r4
 8012c5c:	6952      	ldr	r2, [r2, #20]
    if ((ip6_addr_netcmp(&(prefix_list[i].prefix), prefix)) &&
 8012c5e:	428a      	cmp	r2, r1
 8012c60:	d1d9      	bne.n	8012c16 <nd6_get_onlink_prefix+0xa>
 8012c62:	e001      	b.n	8012c68 <nd6_get_onlink_prefix+0x5c>
      return i;
    }
  }

  /* Entry not available. */
  return -1;
 8012c64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c68:	4618      	mov	r0, r3
 8012c6a:	bc30      	pop	{r4, r5}
 8012c6c:	4770      	bx	lr
  return -1;
 8012c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c72:	4618      	mov	r0, r3
 8012c74:	4770      	bx	lr
 8012c76:	bf00      	nop
 8012c78:	20008818 	.word	0x20008818

08012c7c <nd6_new_onlink_prefix>:
nd6_new_onlink_prefix(const ip6_addr_t *prefix, struct netif *netif)
{
  s8_t i;

  /* Create new entry. */
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	2b04      	cmp	r3, #4
 8012c80:	dd14      	ble.n	8012cac <nd6_new_onlink_prefix+0x30>
      return i;
    }
  }

  /* Entry not available. */
  return -1;
 8012c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c86:	4618      	mov	r0, r3
 8012c88:	4770      	bx	lr
      ip6_addr_set(&(prefix_list[i].prefix), prefix);
 8012c8a:	2400      	movs	r4, #0
 8012c8c:	e024      	b.n	8012cd8 <nd6_new_onlink_prefix+0x5c>
 8012c8e:	2400      	movs	r4, #0
 8012c90:	e02a      	b.n	8012ce8 <nd6_new_onlink_prefix+0x6c>
 8012c92:	2400      	movs	r4, #0
 8012c94:	e030      	b.n	8012cf8 <nd6_new_onlink_prefix+0x7c>
 8012c96:	2400      	movs	r4, #0
 8012c98:	e036      	b.n	8012d08 <nd6_new_onlink_prefix+0x8c>
 8012c9a:	2100      	movs	r1, #0
 8012c9c:	e03c      	b.n	8012d18 <nd6_new_onlink_prefix+0x9c>
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 8012c9e:	3301      	adds	r3, #1
 8012ca0:	b25b      	sxtb	r3, r3
 8012ca2:	2b04      	cmp	r3, #4
 8012ca4:	dd03      	ble.n	8012cae <nd6_new_onlink_prefix+0x32>
  return -1;
 8012ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8012caa:	e03a      	b.n	8012d22 <nd6_new_onlink_prefix+0xa6>
{
 8012cac:	b430      	push	{r4, r5}
    if ((prefix_list[i].netif == NULL) ||
 8012cae:	461a      	mov	r2, r3
 8012cb0:	4d1d      	ldr	r5, [pc, #116]	; (8012d28 <nd6_new_onlink_prefix+0xac>)
 8012cb2:	241c      	movs	r4, #28
 8012cb4:	fb04 5403 	mla	r4, r4, r3, r5
 8012cb8:	6964      	ldr	r4, [r4, #20]
 8012cba:	b12c      	cbz	r4, 8012cc8 <nd6_new_onlink_prefix+0x4c>
        (prefix_list[i].invalidation_timer == 0)) {
 8012cbc:	241c      	movs	r4, #28
 8012cbe:	fb04 5403 	mla	r4, r4, r3, r5
 8012cc2:	69a4      	ldr	r4, [r4, #24]
    if ((prefix_list[i].netif == NULL) ||
 8012cc4:	2c00      	cmp	r4, #0
 8012cc6:	d1ea      	bne.n	8012c9e <nd6_new_onlink_prefix+0x22>
      prefix_list[i].netif = netif;
 8012cc8:	4d17      	ldr	r5, [pc, #92]	; (8012d28 <nd6_new_onlink_prefix+0xac>)
 8012cca:	241c      	movs	r4, #28
 8012ccc:	fb04 5402 	mla	r4, r4, r2, r5
 8012cd0:	6161      	str	r1, [r4, #20]
      ip6_addr_set(&(prefix_list[i].prefix), prefix);
 8012cd2:	2800      	cmp	r0, #0
 8012cd4:	d0d9      	beq.n	8012c8a <nd6_new_onlink_prefix+0xe>
 8012cd6:	6804      	ldr	r4, [r0, #0]
 8012cd8:	211c      	movs	r1, #28
 8012cda:	fb01 f102 	mul.w	r1, r1, r2
 8012cde:	4d12      	ldr	r5, [pc, #72]	; (8012d28 <nd6_new_onlink_prefix+0xac>)
 8012ce0:	506c      	str	r4, [r5, r1]
 8012ce2:	2800      	cmp	r0, #0
 8012ce4:	d0d3      	beq.n	8012c8e <nd6_new_onlink_prefix+0x12>
 8012ce6:	6844      	ldr	r4, [r0, #4]
 8012ce8:	4d0f      	ldr	r5, [pc, #60]	; (8012d28 <nd6_new_onlink_prefix+0xac>)
 8012cea:	211c      	movs	r1, #28
 8012cec:	fb01 5102 	mla	r1, r1, r2, r5
 8012cf0:	604c      	str	r4, [r1, #4]
 8012cf2:	2800      	cmp	r0, #0
 8012cf4:	d0cd      	beq.n	8012c92 <nd6_new_onlink_prefix+0x16>
 8012cf6:	6884      	ldr	r4, [r0, #8]
 8012cf8:	4d0b      	ldr	r5, [pc, #44]	; (8012d28 <nd6_new_onlink_prefix+0xac>)
 8012cfa:	211c      	movs	r1, #28
 8012cfc:	fb01 5102 	mla	r1, r1, r2, r5
 8012d00:	608c      	str	r4, [r1, #8]
 8012d02:	2800      	cmp	r0, #0
 8012d04:	d0c7      	beq.n	8012c96 <nd6_new_onlink_prefix+0x1a>
 8012d06:	68c4      	ldr	r4, [r0, #12]
 8012d08:	4d07      	ldr	r5, [pc, #28]	; (8012d28 <nd6_new_onlink_prefix+0xac>)
 8012d0a:	211c      	movs	r1, #28
 8012d0c:	fb01 5102 	mla	r1, r1, r2, r5
 8012d10:	60cc      	str	r4, [r1, #12]
 8012d12:	2800      	cmp	r0, #0
 8012d14:	d0c1      	beq.n	8012c9a <nd6_new_onlink_prefix+0x1e>
 8012d16:	7c01      	ldrb	r1, [r0, #16]
 8012d18:	4803      	ldr	r0, [pc, #12]	; (8012d28 <nd6_new_onlink_prefix+0xac>)
 8012d1a:	241c      	movs	r4, #28
 8012d1c:	fb04 0202 	mla	r2, r4, r2, r0
 8012d20:	7411      	strb	r1, [r2, #16]
}
 8012d22:	4618      	mov	r0, r3
 8012d24:	bc30      	pop	{r4, r5}
 8012d26:	4770      	bx	lr
 8012d28:	20008818 	.word	0x20008818

08012d2c <nd6_send_q>:
  ip6_addr_t dest;
#if LWIP_ND6_QUEUEING
  struct nd6_q_entry *q;
#endif /* LWIP_ND6_QUEUEING */

  if ((i < 0) || (i >= LWIP_ND6_NUM_NEIGHBORS)) {
 8012d2c:	b2c3      	uxtb	r3, r0
 8012d2e:	2b09      	cmp	r3, #9
 8012d30:	d84c      	bhi.n	8012dcc <nd6_send_q+0xa0>
{
 8012d32:	b530      	push	{r4, r5, lr}
 8012d34:	b087      	sub	sp, #28
 8012d36:	4605      	mov	r5, r0
 8012d38:	e01b      	b.n	8012d72 <nd6_send_q+0x46>
    /* Get ipv6 header. */
    ip6hdr = (struct ip6_hdr *)(q->p->payload);
    /* Create an aligned copy. */
    ip6_addr_copy_from_packed(dest, ip6hdr->dest);
    /* Restore the zone, if applicable. */
    ip6_addr_assign_zone(&dest, IP6_UNKNOWN, neighbor_cache[i].netif);
 8012d3a:	4a25      	ldr	r2, [pc, #148]	; (8012dd0 <nd6_send_q+0xa4>)
 8012d3c:	232c      	movs	r3, #44	; 0x2c
 8012d3e:	fb03 2305 	mla	r3, r3, r5, r2
 8012d42:	695b      	ldr	r3, [r3, #20]
 8012d44:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8012d48:	3301      	adds	r3, #1
 8012d4a:	b2db      	uxtb	r3, r3
 8012d4c:	f88d 3014 	strb.w	r3, [sp, #20]
    /* send the queued IPv6 packet */
    (neighbor_cache[i].netif)->output_ip6(neighbor_cache[i].netif, q->p, &dest);
 8012d50:	4a1f      	ldr	r2, [pc, #124]	; (8012dd0 <nd6_send_q+0xa4>)
 8012d52:	232c      	movs	r3, #44	; 0x2c
 8012d54:	fb03 2305 	mla	r3, r3, r5, r2
 8012d58:	6958      	ldr	r0, [r3, #20]
 8012d5a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8012d5e:	aa01      	add	r2, sp, #4
 8012d60:	6861      	ldr	r1, [r4, #4]
 8012d62:	4798      	blx	r3
    /* free the queued IP packet */
    pbuf_free(q->p);
 8012d64:	6860      	ldr	r0, [r4, #4]
 8012d66:	f7f5 fcf5 	bl	8008754 <pbuf_free>
    /* now queue entry can be freed */
    memp_free(MEMP_ND6_QUEUE, q);
 8012d6a:	4621      	mov	r1, r4
 8012d6c:	2007      	movs	r0, #7
 8012d6e:	f7f5 f863 	bl	8007e38 <memp_free>
  while (neighbor_cache[i].q != NULL) {
 8012d72:	4a17      	ldr	r2, [pc, #92]	; (8012dd0 <nd6_send_q+0xa4>)
 8012d74:	232c      	movs	r3, #44	; 0x2c
 8012d76:	fb03 2305 	mla	r3, r3, r5, r2
 8012d7a:	6a1c      	ldr	r4, [r3, #32]
 8012d7c:	b324      	cbz	r4, 8012dc8 <nd6_send_q+0x9c>
    neighbor_cache[i].q = q->next;
 8012d7e:	6822      	ldr	r2, [r4, #0]
 8012d80:	4913      	ldr	r1, [pc, #76]	; (8012dd0 <nd6_send_q+0xa4>)
 8012d82:	232c      	movs	r3, #44	; 0x2c
 8012d84:	fb03 1305 	mla	r3, r3, r5, r1
 8012d88:	621a      	str	r2, [r3, #32]
    ip6hdr = (struct ip6_hdr *)(q->p->payload);
 8012d8a:	6863      	ldr	r3, [r4, #4]
 8012d8c:	685a      	ldr	r2, [r3, #4]
    ip6_addr_copy_from_packed(dest, ip6hdr->dest);
 8012d8e:	6993      	ldr	r3, [r2, #24]
 8012d90:	9301      	str	r3, [sp, #4]
 8012d92:	69d1      	ldr	r1, [r2, #28]
 8012d94:	9102      	str	r1, [sp, #8]
 8012d96:	6a11      	ldr	r1, [r2, #32]
 8012d98:	9103      	str	r1, [sp, #12]
 8012d9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012d9c:	9204      	str	r2, [sp, #16]
    ip6_addr_assign_zone(&dest, IP6_UNKNOWN, neighbor_cache[i].netif);
 8012d9e:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8012da2:	4019      	ands	r1, r3
 8012da4:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8012da8:	4291      	cmp	r1, r2
 8012daa:	d0c6      	beq.n	8012d3a <nd6_send_q+0xe>
 8012dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012db0:	041b      	lsls	r3, r3, #16
 8012db2:	0c1b      	lsrs	r3, r3, #16
 8012db4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8012db8:	4293      	cmp	r3, r2
 8012dba:	d0be      	beq.n	8012d3a <nd6_send_q+0xe>
 8012dbc:	f240 22ff 	movw	r2, #767	; 0x2ff
 8012dc0:	4293      	cmp	r3, r2
 8012dc2:	d0ba      	beq.n	8012d3a <nd6_send_q+0xe>
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	e7c1      	b.n	8012d4c <nd6_send_q+0x20>
    /* free the queued IP packet */
    pbuf_free(neighbor_cache[i].q);
    neighbor_cache[i].q = NULL;
  }
#endif /* LWIP_ND6_QUEUEING */
}
 8012dc8:	b007      	add	sp, #28
 8012dca:	bd30      	pop	{r4, r5, pc}
 8012dcc:	4770      	bx	lr
 8012dce:	bf00      	nop
 8012dd0:	20008660 	.word	0x20008660

08012dd4 <nd6_duplicate_addr_detected>:
{
 8012dd4:	b538      	push	{r3, r4, r5, lr}
 8012dd6:	4605      	mov	r5, r0
 8012dd8:	460c      	mov	r4, r1
  netif_ip6_addr_set_state(netif, addr_idx, IP6_ADDR_DUPLICATED);
 8012dda:	2240      	movs	r2, #64	; 0x40
 8012ddc:	f7f5 fa7e 	bl	80082dc <netif_ip6_addr_set_state>
  if (addr_idx == 0) {
 8012de0:	b1a4      	cbz	r4, 8012e0c <nd6_duplicate_addr_detected+0x38>
}
 8012de2:	bd38      	pop	{r3, r4, r5, pc}
      if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i)) &&
 8012de4:	4623      	mov	r3, r4
 8012de6:	192a      	adds	r2, r5, r4
 8012de8:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
 8012dec:	b14a      	cbz	r2, 8012e02 <nd6_duplicate_addr_detected+0x2e>
 8012dee:	b145      	cbz	r5, 8012e02 <nd6_duplicate_addr_detected+0x2e>
          !netif_ip6_addr_isstatic(netif, i)) {
 8012df0:	3326      	adds	r3, #38	; 0x26
 8012df2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8012df6:	b123      	cbz	r3, 8012e02 <nd6_duplicate_addr_detected+0x2e>
        netif_ip6_addr_set_state(netif, i, IP6_ADDR_DUPLICATED);
 8012df8:	2240      	movs	r2, #64	; 0x40
 8012dfa:	4621      	mov	r1, r4
 8012dfc:	4628      	mov	r0, r5
 8012dfe:	f7f5 fa6d 	bl	80082dc <netif_ip6_addr_set_state>
    for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8012e02:	3401      	adds	r4, #1
 8012e04:	b264      	sxtb	r4, r4
 8012e06:	2c02      	cmp	r4, #2
 8012e08:	ddec      	ble.n	8012de4 <nd6_duplicate_addr_detected+0x10>
 8012e0a:	e7ea      	b.n	8012de2 <nd6_duplicate_addr_detected+0xe>
 8012e0c:	2401      	movs	r4, #1
 8012e0e:	e7fa      	b.n	8012e06 <nd6_duplicate_addr_detected+0x32>

08012e10 <nd6_process_autoconfig_prefix>:
{
 8012e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e14:	4605      	mov	r5, r0
 8012e16:	460c      	mov	r4, r1
 8012e18:	4690      	mov	r8, r2
  valid_life = lwip_htonl(prefix_opt->valid_lifetime);
 8012e1a:	6848      	ldr	r0, [r1, #4]
 8012e1c:	f7f4 f9dd 	bl	80071da <lwip_htonl>
 8012e20:	4606      	mov	r6, r0
  pref_life = lwip_htonl(prefix_opt->preferred_lifetime);
 8012e22:	68a0      	ldr	r0, [r4, #8]
 8012e24:	f7f4 f9d9 	bl	80071da <lwip_htonl>
  if (pref_life > valid_life || prefix_opt->prefix_length != 64) {
 8012e28:	4286      	cmp	r6, r0
 8012e2a:	d303      	bcc.n	8012e34 <nd6_process_autoconfig_prefix+0x24>
 8012e2c:	4607      	mov	r7, r0
 8012e2e:	78a3      	ldrb	r3, [r4, #2]
 8012e30:	2b40      	cmp	r3, #64	; 0x40
 8012e32:	d001      	beq.n	8012e38 <nd6_process_autoconfig_prefix+0x28>
}
 8012e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8012e38:	2401      	movs	r4, #1
 8012e3a:	e018      	b.n	8012e6e <nd6_process_autoconfig_prefix+0x5e>
      } else if (remaining_life > ND6_2HRS) {
 8012e3c:	f5b2 5fe1 	cmp.w	r2, #7200	; 0x1c20
 8012e40:	d94b      	bls.n	8012eda <nd6_process_autoconfig_prefix+0xca>
        netif_ip6_addr_set_valid_life(netif, i, ND6_2HRS);
 8012e42:	f104 0326 	add.w	r3, r4, #38	; 0x26
 8012e46:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8012e4a:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
 8012e4e:	e044      	b.n	8012eda <nd6_process_autoconfig_prefix+0xca>
      LWIP_ASSERT("bad valid lifetime", !netif_ip6_addr_isstatic(netif, i));
 8012e50:	4b66      	ldr	r3, [pc, #408]	; (8012fec <nd6_process_autoconfig_prefix+0x1dc>)
 8012e52:	22de      	movs	r2, #222	; 0xde
 8012e54:	4966      	ldr	r1, [pc, #408]	; (8012ff0 <nd6_process_autoconfig_prefix+0x1e0>)
 8012e56:	4867      	ldr	r0, [pc, #412]	; (8012ff4 <nd6_process_autoconfig_prefix+0x1e4>)
 8012e58:	f001 fff4 	bl	8014e44 <iprintf>
 8012e5c:	e043      	b.n	8012ee6 <nd6_process_autoconfig_prefix+0xd6>
        netif_ip6_addr_set_state(netif, i, IP6_ADDR_PREFERRED);
 8012e5e:	2230      	movs	r2, #48	; 0x30
 8012e60:	4621      	mov	r1, r4
 8012e62:	4628      	mov	r0, r5
 8012e64:	f7f5 fa3a 	bl	80082dc <netif_ip6_addr_set_state>
 8012e68:	e041      	b.n	8012eee <nd6_process_autoconfig_prefix+0xde>
  for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8012e6a:	3401      	adds	r4, #1
 8012e6c:	b264      	sxtb	r4, r4
 8012e6e:	2c02      	cmp	r4, #2
 8012e70:	dc43      	bgt.n	8012efa <nd6_process_autoconfig_prefix+0xea>
    addr_state = netif_ip6_addr_state(netif, i);
 8012e72:	46a2      	mov	sl, r4
 8012e74:	192b      	adds	r3, r5, r4
 8012e76:	f893 9094 	ldrb.w	r9, [r3, #148]	; 0x94
    if (!ip6_addr_isinvalid(addr_state) && !netif_ip6_addr_isstatic(netif, i) &&
 8012e7a:	f1b9 0f00 	cmp.w	r9, #0
 8012e7e:	d0f4      	beq.n	8012e6a <nd6_process_autoconfig_prefix+0x5a>
 8012e80:	2d00      	cmp	r5, #0
 8012e82:	d0f2      	beq.n	8012e6a <nd6_process_autoconfig_prefix+0x5a>
 8012e84:	f104 0326 	add.w	r3, r4, #38	; 0x26
 8012e88:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8012e8c:	2a00      	cmp	r2, #0
 8012e8e:	d0ec      	beq.n	8012e6a <nd6_process_autoconfig_prefix+0x5a>
        ip6_addr_netcmp(prefix_addr, netif_ip6_addr(netif, i))) {
 8012e90:	f8d8 1000 	ldr.w	r1, [r8]
 8012e94:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8012e98:	00c3      	lsls	r3, r0, #3
 8012e9a:	442b      	add	r3, r5
 8012e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    if (!ip6_addr_isinvalid(addr_state) && !netif_ip6_addr_isstatic(netif, i) &&
 8012e9e:	4299      	cmp	r1, r3
 8012ea0:	d1e3      	bne.n	8012e6a <nd6_process_autoconfig_prefix+0x5a>
        ip6_addr_netcmp(prefix_addr, netif_ip6_addr(netif, i))) {
 8012ea2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012ea6:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8012eaa:	00c3      	lsls	r3, r0, #3
 8012eac:	442b      	add	r3, r5
 8012eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012eb0:	4299      	cmp	r1, r3
 8012eb2:	d1da      	bne.n	8012e6a <nd6_process_autoconfig_prefix+0x5a>
 8012eb4:	f898 0010 	ldrb.w	r0, [r8, #16]
 8012eb8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8012ebc:	00cb      	lsls	r3, r1, #3
 8012ebe:	442b      	add	r3, r5
 8012ec0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8012ec4:	4298      	cmp	r0, r3
 8012ec6:	d1d0      	bne.n	8012e6a <nd6_process_autoconfig_prefix+0x5a>
      if (valid_life > ND6_2HRS || valid_life > remaining_life) {
 8012ec8:	f5b6 5fe1 	cmp.w	r6, #7200	; 0x1c20
 8012ecc:	d801      	bhi.n	8012ed2 <nd6_process_autoconfig_prefix+0xc2>
 8012ece:	42b2      	cmp	r2, r6
 8012ed0:	d2b4      	bcs.n	8012e3c <nd6_process_autoconfig_prefix+0x2c>
        netif_ip6_addr_set_valid_life(netif, i, valid_life);
 8012ed2:	f10a 0326 	add.w	r3, sl, #38	; 0x26
 8012ed6:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
      LWIP_ASSERT("bad valid lifetime", !netif_ip6_addr_isstatic(netif, i));
 8012eda:	f10a 0326 	add.w	r3, sl, #38	; 0x26
 8012ede:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d0b4      	beq.n	8012e50 <nd6_process_autoconfig_prefix+0x40>
      if (pref_life > 0 && addr_state == IP6_ADDR_DEPRECATED) {
 8012ee6:	b117      	cbz	r7, 8012eee <nd6_process_autoconfig_prefix+0xde>
 8012ee8:	f1b9 0f10 	cmp.w	r9, #16
 8012eec:	d0b7      	beq.n	8012e5e <nd6_process_autoconfig_prefix+0x4e>
      netif_ip6_addr_set_pref_life(netif, i, pref_life);
 8012eee:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 8012ef2:	eb05 058a 	add.w	r5, r5, sl, lsl #2
 8012ef6:	606f      	str	r7, [r5, #4]
 8012ef8:	e79c      	b.n	8012e34 <nd6_process_autoconfig_prefix+0x24>
  addr_state = netif_ip6_addr_state(netif, 0);
 8012efa:	f895 2094 	ldrb.w	r2, [r5, #148]	; 0x94
  if (!netif->ip6_autoconfig_enabled || valid_life == IP6_ADDR_LIFE_STATIC ||
 8012efe:	f895 30df 	ldrb.w	r3, [r5, #223]	; 0xdf
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d096      	beq.n	8012e34 <nd6_process_autoconfig_prefix+0x24>
 8012f06:	2e00      	cmp	r6, #0
 8012f08:	d094      	beq.n	8012e34 <nd6_process_autoconfig_prefix+0x24>
 8012f0a:	2a00      	cmp	r2, #0
 8012f0c:	d092      	beq.n	8012e34 <nd6_process_autoconfig_prefix+0x24>
      ip6_addr_isinvalid(addr_state) || ip6_addr_isduplicated(addr_state)) {
 8012f0e:	2a40      	cmp	r2, #64	; 0x40
 8012f10:	d090      	beq.n	8012e34 <nd6_process_autoconfig_prefix+0x24>
  IP6_ADDR(&ip6addr, prefix_addr->addr[0], prefix_addr->addr[1],
 8012f12:	f8d8 0000 	ldr.w	r0, [r8]
 8012f16:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8012f1a:	f8d5 8054 	ldr.w	r8, [r5, #84]	; 0x54
 8012f1e:	f8d5 e058 	ldr.w	lr, [r5, #88]	; 0x58
  ip6_addr_assign_zone(&ip6addr, IP6_UNICAST, netif);
 8012f22:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8012f26:	4002      	ands	r2, r0
 8012f28:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	d003      	beq.n	8012f38 <nd6_process_autoconfig_prefix+0x128>
 8012f30:	2400      	movs	r4, #0
  free_idx = 0;
 8012f32:	2100      	movs	r1, #0
  for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8012f34:	2301      	movs	r3, #1
 8012f36:	e008      	b.n	8012f4a <nd6_process_autoconfig_prefix+0x13a>
  ip6_addr_assign_zone(&ip6addr, IP6_UNICAST, netif);
 8012f38:	f895 40de 	ldrb.w	r4, [r5, #222]	; 0xde
 8012f3c:	3401      	adds	r4, #1
 8012f3e:	b2e4      	uxtb	r4, r4
 8012f40:	e7f7      	b.n	8012f32 <nd6_process_autoconfig_prefix+0x122>
    } else if (free_idx == 0) {
 8012f42:	b901      	cbnz	r1, 8012f46 <nd6_process_autoconfig_prefix+0x136>
      free_idx = i;
 8012f44:	4619      	mov	r1, r3
  for (i = 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8012f46:	3301      	adds	r3, #1
 8012f48:	b25b      	sxtb	r3, r3
 8012f4a:	2b02      	cmp	r3, #2
 8012f4c:	dc2a      	bgt.n	8012fa4 <nd6_process_autoconfig_prefix+0x194>
    if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i))) {
 8012f4e:	18ea      	adds	r2, r5, r3
 8012f50:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
 8012f54:	2a00      	cmp	r2, #0
 8012f56:	d0f4      	beq.n	8012f42 <nd6_process_autoconfig_prefix+0x132>
      if (ip6_addr_cmp(&ip6addr, netif_ip6_addr(netif, i))) {
 8012f58:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 8012f5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8012f60:	442a      	add	r2, r5
 8012f62:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8012f64:	4290      	cmp	r0, r2
 8012f66:	d1ee      	bne.n	8012f46 <nd6_process_autoconfig_prefix+0x136>
 8012f68:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 8012f6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8012f70:	442a      	add	r2, r5
 8012f72:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8012f74:	4594      	cmp	ip, r2
 8012f76:	d1e6      	bne.n	8012f46 <nd6_process_autoconfig_prefix+0x136>
 8012f78:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 8012f7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8012f80:	442a      	add	r2, r5
 8012f82:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8012f84:	4590      	cmp	r8, r2
 8012f86:	d1de      	bne.n	8012f46 <nd6_process_autoconfig_prefix+0x136>
 8012f88:	2218      	movs	r2, #24
 8012f8a:	fb02 5203 	mla	r2, r2, r3, r5
 8012f8e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8012f90:	4596      	cmp	lr, r2
 8012f92:	d1d8      	bne.n	8012f46 <nd6_process_autoconfig_prefix+0x136>
 8012f94:	2218      	movs	r2, #24
 8012f96:	fb02 5903 	mla	r9, r2, r3, r5
 8012f9a:	f899 205c 	ldrb.w	r2, [r9, #92]	; 0x5c
 8012f9e:	42a2      	cmp	r2, r4
 8012fa0:	d1d1      	bne.n	8012f46 <nd6_process_autoconfig_prefix+0x136>
 8012fa2:	e747      	b.n	8012e34 <nd6_process_autoconfig_prefix+0x24>
  if (free_idx == 0) {
 8012fa4:	2900      	cmp	r1, #0
 8012fa6:	f43f af45 	beq.w	8012e34 <nd6_process_autoconfig_prefix+0x24>
  ip_addr_copy_from_ip6(netif->ip6_addr[free_idx], ip6addr);
 8012faa:	4689      	mov	r9, r1
 8012fac:	004a      	lsls	r2, r1, #1
 8012fae:	440a      	add	r2, r1
 8012fb0:	00d3      	lsls	r3, r2, #3
 8012fb2:	442b      	add	r3, r5
 8012fb4:	64d8      	str	r0, [r3, #76]	; 0x4c
 8012fb6:	f8c3 c050 	str.w	ip, [r3, #80]	; 0x50
 8012fba:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
 8012fbe:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
 8012fc2:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
 8012fc6:	2206      	movs	r2, #6
 8012fc8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  netif_ip6_addr_set_valid_life(netif, free_idx, valid_life);
 8012fcc:	b11d      	cbz	r5, 8012fd6 <nd6_process_autoconfig_prefix+0x1c6>
 8012fce:	f101 0326 	add.w	r3, r1, #38	; 0x26
 8012fd2:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
  netif_ip6_addr_set_pref_life(netif, free_idx, pref_life);
 8012fd6:	b125      	cbz	r5, 8012fe2 <nd6_process_autoconfig_prefix+0x1d2>
 8012fd8:	f109 0328 	add.w	r3, r9, #40	; 0x28
 8012fdc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012fe0:	605f      	str	r7, [r3, #4]
  netif_ip6_addr_set_state(netif, free_idx, IP6_ADDR_TENTATIVE);
 8012fe2:	2208      	movs	r2, #8
 8012fe4:	4628      	mov	r0, r5
 8012fe6:	f7f5 f979 	bl	80082dc <netif_ip6_addr_set_state>
 8012fea:	e723      	b.n	8012e34 <nd6_process_autoconfig_prefix+0x24>
 8012fec:	08018cbc 	.word	0x08018cbc
 8012ff0:	08018cf0 	.word	0x08018cf0
 8012ff4:	08015d2c 	.word	0x08015d2c

08012ff8 <nd6_free_q>:
{
 8012ff8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("q != NULL", q != NULL);
 8012ffa:	4604      	mov	r4, r0
 8012ffc:	b148      	cbz	r0, 8013012 <nd6_free_q+0x1a>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
 8012ffe:	6863      	ldr	r3, [r4, #4]
 8013000:	b9bb      	cbnz	r3, 8013032 <nd6_free_q+0x3a>
 8013002:	4b13      	ldr	r3, [pc, #76]	; (8013050 <nd6_free_q+0x58>)
 8013004:	f640 026f 	movw	r2, #2159	; 0x86f
 8013008:	4912      	ldr	r1, [pc, #72]	; (8013054 <nd6_free_q+0x5c>)
 801300a:	4813      	ldr	r0, [pc, #76]	; (8013058 <nd6_free_q+0x60>)
 801300c:	f001 ff1a 	bl	8014e44 <iprintf>
 8013010:	e00f      	b.n	8013032 <nd6_free_q+0x3a>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013012:	4b0f      	ldr	r3, [pc, #60]	; (8013050 <nd6_free_q+0x58>)
 8013014:	f640 026e 	movw	r2, #2158	; 0x86e
 8013018:	4910      	ldr	r1, [pc, #64]	; (801305c <nd6_free_q+0x64>)
 801301a:	480f      	ldr	r0, [pc, #60]	; (8013058 <nd6_free_q+0x60>)
 801301c:	f001 ff12 	bl	8014e44 <iprintf>
 8013020:	e7ed      	b.n	8012ffe <nd6_free_q+0x6>
    pbuf_free(r->p);
 8013022:	6860      	ldr	r0, [r4, #4]
 8013024:	f7f5 fb96 	bl	8008754 <pbuf_free>
    memp_free(MEMP_ND6_QUEUE, r);
 8013028:	4621      	mov	r1, r4
 801302a:	2007      	movs	r0, #7
 801302c:	f7f4 ff04 	bl	8007e38 <memp_free>
    q = q->next;
 8013030:	462c      	mov	r4, r5
  while (q) {
 8013032:	b15c      	cbz	r4, 801304c <nd6_free_q+0x54>
    q = q->next;
 8013034:	6825      	ldr	r5, [r4, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8013036:	6863      	ldr	r3, [r4, #4]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d1f2      	bne.n	8013022 <nd6_free_q+0x2a>
 801303c:	4b04      	ldr	r3, [pc, #16]	; (8013050 <nd6_free_q+0x58>)
 801303e:	f640 0273 	movw	r2, #2163	; 0x873
 8013042:	4907      	ldr	r1, [pc, #28]	; (8013060 <nd6_free_q+0x68>)
 8013044:	4804      	ldr	r0, [pc, #16]	; (8013058 <nd6_free_q+0x60>)
 8013046:	f001 fefd 	bl	8014e44 <iprintf>
 801304a:	e7ea      	b.n	8013022 <nd6_free_q+0x2a>
}
 801304c:	bd38      	pop	{r3, r4, r5, pc}
 801304e:	bf00      	nop
 8013050:	08018cbc 	.word	0x08018cbc
 8013054:	08018c9c 	.word	0x08018c9c
 8013058:	08015d2c 	.word	0x08015d2c
 801305c:	080185e8 	.word	0x080185e8
 8013060:	08018cac 	.word	0x08018cac

08013064 <nd6_free_neighbor_cache_entry>:
  if ((i < 0) || (i >= LWIP_ND6_NUM_NEIGHBORS)) {
 8013064:	b2c3      	uxtb	r3, r0
 8013066:	2b09      	cmp	r3, #9
 8013068:	d827      	bhi.n	80130ba <nd6_free_neighbor_cache_entry+0x56>
  if (neighbor_cache[i].isrouter) {
 801306a:	4a14      	ldr	r2, [pc, #80]	; (80130bc <nd6_free_neighbor_cache_entry+0x58>)
 801306c:	232c      	movs	r3, #44	; 0x2c
 801306e:	fb03 2300 	mla	r3, r3, r0, r2
 8013072:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8013076:	bb03      	cbnz	r3, 80130ba <nd6_free_neighbor_cache_entry+0x56>
{
 8013078:	b510      	push	{r4, lr}
 801307a:	4604      	mov	r4, r0
  if (neighbor_cache[i].q != NULL) {
 801307c:	232c      	movs	r3, #44	; 0x2c
 801307e:	fb03 2300 	mla	r3, r3, r0, r2
 8013082:	6a18      	ldr	r0, [r3, #32]
 8013084:	b138      	cbz	r0, 8013096 <nd6_free_neighbor_cache_entry+0x32>
    nd6_free_q(neighbor_cache[i].q);
 8013086:	f7ff ffb7 	bl	8012ff8 <nd6_free_q>
    neighbor_cache[i].q = NULL;
 801308a:	4a0c      	ldr	r2, [pc, #48]	; (80130bc <nd6_free_neighbor_cache_entry+0x58>)
 801308c:	232c      	movs	r3, #44	; 0x2c
 801308e:	fb03 2304 	mla	r3, r3, r4, r2
 8013092:	2200      	movs	r2, #0
 8013094:	621a      	str	r2, [r3, #32]
  neighbor_cache[i].state = ND6_NO_ENTRY;
 8013096:	4909      	ldr	r1, [pc, #36]	; (80130bc <nd6_free_neighbor_cache_entry+0x58>)
 8013098:	202c      	movs	r0, #44	; 0x2c
 801309a:	fb00 f004 	mul.w	r0, r0, r4
 801309e:	180a      	adds	r2, r1, r0
 80130a0:	2300      	movs	r3, #0
 80130a2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  neighbor_cache[i].isrouter = 0;
 80130a6:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
  neighbor_cache[i].netif = NULL;
 80130aa:	6153      	str	r3, [r2, #20]
  neighbor_cache[i].counter.reachable_time = 0;
 80130ac:	6293      	str	r3, [r2, #40]	; 0x28
  ip6_addr_set_zero(&(neighbor_cache[i].next_hop_address));
 80130ae:	500b      	str	r3, [r1, r0]
 80130b0:	6053      	str	r3, [r2, #4]
 80130b2:	6093      	str	r3, [r2, #8]
 80130b4:	60d3      	str	r3, [r2, #12]
 80130b6:	7413      	strb	r3, [r2, #16]
}
 80130b8:	bd10      	pop	{r4, pc}
 80130ba:	4770      	bx	lr
 80130bc:	20008660 	.word	0x20008660

080130c0 <nd6_new_neighbor_cache_entry>:
{
 80130c0:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 80130c2:	2400      	movs	r4, #0
 80130c4:	2c09      	cmp	r4, #9
 80130c6:	dc0a      	bgt.n	80130de <nd6_new_neighbor_cache_entry+0x1e>
    if (neighbor_cache[i].state == ND6_NO_ENTRY) {
 80130c8:	4a6c      	ldr	r2, [pc, #432]	; (801327c <nd6_new_neighbor_cache_entry+0x1bc>)
 80130ca:	232c      	movs	r3, #44	; 0x2c
 80130cc:	fb03 2304 	mla	r3, r3, r4, r2
 80130d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d079      	beq.n	80131cc <nd6_new_neighbor_cache_entry+0x10c>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 80130d8:	3401      	adds	r4, #1
 80130da:	b264      	sxtb	r4, r4
 80130dc:	e7f2      	b.n	80130c4 <nd6_new_neighbor_cache_entry+0x4>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 80130de:	2400      	movs	r4, #0
 80130e0:	e001      	b.n	80130e6 <nd6_new_neighbor_cache_entry+0x26>
 80130e2:	3401      	adds	r4, #1
 80130e4:	b264      	sxtb	r4, r4
 80130e6:	2c09      	cmp	r4, #9
 80130e8:	dc12      	bgt.n	8013110 <nd6_new_neighbor_cache_entry+0x50>
    if ((neighbor_cache[i].state == ND6_STALE) &&
 80130ea:	4a64      	ldr	r2, [pc, #400]	; (801327c <nd6_new_neighbor_cache_entry+0x1bc>)
 80130ec:	232c      	movs	r3, #44	; 0x2c
 80130ee:	fb03 2304 	mla	r3, r3, r4, r2
 80130f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80130f6:	2b03      	cmp	r3, #3
 80130f8:	d1f3      	bne.n	80130e2 <nd6_new_neighbor_cache_entry+0x22>
        (!neighbor_cache[i].isrouter)) {
 80130fa:	232c      	movs	r3, #44	; 0x2c
 80130fc:	fb03 2304 	mla	r3, r3, r4, r2
 8013100:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    if ((neighbor_cache[i].state == ND6_STALE) &&
 8013104:	2b00      	cmp	r3, #0
 8013106:	d1ec      	bne.n	80130e2 <nd6_new_neighbor_cache_entry+0x22>
      nd6_free_neighbor_cache_entry(i);
 8013108:	4620      	mov	r0, r4
 801310a:	f7ff ffab 	bl	8013064 <nd6_free_neighbor_cache_entry>
      return i;
 801310e:	e05d      	b.n	80131cc <nd6_new_neighbor_cache_entry+0x10c>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8013110:	2400      	movs	r4, #0
 8013112:	e001      	b.n	8013118 <nd6_new_neighbor_cache_entry+0x58>
 8013114:	3401      	adds	r4, #1
 8013116:	b264      	sxtb	r4, r4
 8013118:	2c09      	cmp	r4, #9
 801311a:	dc12      	bgt.n	8013142 <nd6_new_neighbor_cache_entry+0x82>
    if ((neighbor_cache[i].state == ND6_PROBE) &&
 801311c:	4a57      	ldr	r2, [pc, #348]	; (801327c <nd6_new_neighbor_cache_entry+0x1bc>)
 801311e:	232c      	movs	r3, #44	; 0x2c
 8013120:	fb03 2304 	mla	r3, r3, r4, r2
 8013124:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013128:	2b05      	cmp	r3, #5
 801312a:	d1f3      	bne.n	8013114 <nd6_new_neighbor_cache_entry+0x54>
        (!neighbor_cache[i].isrouter)) {
 801312c:	232c      	movs	r3, #44	; 0x2c
 801312e:	fb03 2304 	mla	r3, r3, r4, r2
 8013132:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    if ((neighbor_cache[i].state == ND6_PROBE) &&
 8013136:	2b00      	cmp	r3, #0
 8013138:	d1ec      	bne.n	8013114 <nd6_new_neighbor_cache_entry+0x54>
      nd6_free_neighbor_cache_entry(i);
 801313a:	4620      	mov	r0, r4
 801313c:	f7ff ff92 	bl	8013064 <nd6_free_neighbor_cache_entry>
      return i;
 8013140:	e044      	b.n	80131cc <nd6_new_neighbor_cache_entry+0x10c>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8013142:	2400      	movs	r4, #0
 8013144:	e001      	b.n	801314a <nd6_new_neighbor_cache_entry+0x8a>
 8013146:	3401      	adds	r4, #1
 8013148:	b264      	sxtb	r4, r4
 801314a:	2c09      	cmp	r4, #9
 801314c:	dc12      	bgt.n	8013174 <nd6_new_neighbor_cache_entry+0xb4>
    if ((neighbor_cache[i].state == ND6_DELAY) &&
 801314e:	4a4b      	ldr	r2, [pc, #300]	; (801327c <nd6_new_neighbor_cache_entry+0x1bc>)
 8013150:	232c      	movs	r3, #44	; 0x2c
 8013152:	fb03 2304 	mla	r3, r3, r4, r2
 8013156:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801315a:	2b04      	cmp	r3, #4
 801315c:	d1f3      	bne.n	8013146 <nd6_new_neighbor_cache_entry+0x86>
        (!neighbor_cache[i].isrouter)) {
 801315e:	232c      	movs	r3, #44	; 0x2c
 8013160:	fb03 2304 	mla	r3, r3, r4, r2
 8013164:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    if ((neighbor_cache[i].state == ND6_DELAY) &&
 8013168:	2b00      	cmp	r3, #0
 801316a:	d1ec      	bne.n	8013146 <nd6_new_neighbor_cache_entry+0x86>
      nd6_free_neighbor_cache_entry(i);
 801316c:	4620      	mov	r0, r4
 801316e:	f7ff ff79 	bl	8013064 <nd6_free_neighbor_cache_entry>
      return i;
 8013172:	e02b      	b.n	80131cc <nd6_new_neighbor_cache_entry+0x10c>
  time = 0xfffffffful;
 8013174:	f04f 35ff 	mov.w	r5, #4294967295
  j = -1;
 8013178:	462c      	mov	r4, r5
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 801317a:	2300      	movs	r3, #0
 801317c:	e001      	b.n	8013182 <nd6_new_neighbor_cache_entry+0xc2>
 801317e:	3301      	adds	r3, #1
 8013180:	b25b      	sxtb	r3, r3
 8013182:	2b09      	cmp	r3, #9
 8013184:	dc18      	bgt.n	80131b8 <nd6_new_neighbor_cache_entry+0xf8>
    if ((neighbor_cache[i].state == ND6_REACHABLE) &&
 8013186:	493d      	ldr	r1, [pc, #244]	; (801327c <nd6_new_neighbor_cache_entry+0x1bc>)
 8013188:	222c      	movs	r2, #44	; 0x2c
 801318a:	fb02 1203 	mla	r2, r2, r3, r1
 801318e:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8013192:	2a02      	cmp	r2, #2
 8013194:	d1f3      	bne.n	801317e <nd6_new_neighbor_cache_entry+0xbe>
        (!neighbor_cache[i].isrouter)) {
 8013196:	222c      	movs	r2, #44	; 0x2c
 8013198:	fb02 1203 	mla	r2, r2, r3, r1
 801319c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
    if ((neighbor_cache[i].state == ND6_REACHABLE) &&
 80131a0:	2a00      	cmp	r2, #0
 80131a2:	d1ec      	bne.n	801317e <nd6_new_neighbor_cache_entry+0xbe>
      if (neighbor_cache[i].counter.reachable_time < time) {
 80131a4:	460a      	mov	r2, r1
 80131a6:	212c      	movs	r1, #44	; 0x2c
 80131a8:	fb01 2003 	mla	r0, r1, r3, r2
 80131ac:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80131ae:	42aa      	cmp	r2, r5
 80131b0:	d2e5      	bcs.n	801317e <nd6_new_neighbor_cache_entry+0xbe>
        time = neighbor_cache[i].counter.reachable_time;
 80131b2:	4615      	mov	r5, r2
        j = i;
 80131b4:	461c      	mov	r4, r3
 80131b6:	e7e2      	b.n	801317e <nd6_new_neighbor_cache_entry+0xbe>
  if (j >= 0) {
 80131b8:	2c00      	cmp	r4, #0
 80131ba:	da04      	bge.n	80131c6 <nd6_new_neighbor_cache_entry+0x106>
  time = 0;
 80131bc:	2500      	movs	r5, #0
  j = -1;
 80131be:	f04f 34ff 	mov.w	r4, #4294967295
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 80131c2:	462b      	mov	r3, r5
 80131c4:	e006      	b.n	80131d4 <nd6_new_neighbor_cache_entry+0x114>
    nd6_free_neighbor_cache_entry(j);
 80131c6:	4620      	mov	r0, r4
 80131c8:	f7ff ff4c 	bl	8013064 <nd6_free_neighbor_cache_entry>
}
 80131cc:	4620      	mov	r0, r4
 80131ce:	bd38      	pop	{r3, r4, r5, pc}
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 80131d0:	3301      	adds	r3, #1
 80131d2:	b25b      	sxtb	r3, r3
 80131d4:	2b09      	cmp	r3, #9
 80131d6:	dc20      	bgt.n	801321a <nd6_new_neighbor_cache_entry+0x15a>
        (neighbor_cache[i].q == NULL) &&
 80131d8:	4928      	ldr	r1, [pc, #160]	; (801327c <nd6_new_neighbor_cache_entry+0x1bc>)
 80131da:	222c      	movs	r2, #44	; 0x2c
 80131dc:	fb02 1203 	mla	r2, r2, r3, r1
 80131e0:	6a12      	ldr	r2, [r2, #32]
    if (
 80131e2:	2a00      	cmp	r2, #0
 80131e4:	d1f4      	bne.n	80131d0 <nd6_new_neighbor_cache_entry+0x110>
        (neighbor_cache[i].state == ND6_INCOMPLETE) &&
 80131e6:	460a      	mov	r2, r1
 80131e8:	212c      	movs	r1, #44	; 0x2c
 80131ea:	fb01 2103 	mla	r1, r1, r3, r2
 80131ee:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
        (neighbor_cache[i].q == NULL) &&
 80131f2:	2a01      	cmp	r2, #1
 80131f4:	d1ec      	bne.n	80131d0 <nd6_new_neighbor_cache_entry+0x110>
        (!neighbor_cache[i].isrouter)) {
 80131f6:	4921      	ldr	r1, [pc, #132]	; (801327c <nd6_new_neighbor_cache_entry+0x1bc>)
 80131f8:	222c      	movs	r2, #44	; 0x2c
 80131fa:	fb02 1203 	mla	r2, r2, r3, r1
 80131fe:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
        (neighbor_cache[i].state == ND6_INCOMPLETE) &&
 8013202:	2a00      	cmp	r2, #0
 8013204:	d1e4      	bne.n	80131d0 <nd6_new_neighbor_cache_entry+0x110>
      if (neighbor_cache[i].counter.probes_sent >= time) {
 8013206:	460a      	mov	r2, r1
 8013208:	212c      	movs	r1, #44	; 0x2c
 801320a:	fb01 2203 	mla	r2, r1, r3, r2
 801320e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8013210:	42aa      	cmp	r2, r5
 8013212:	d3dd      	bcc.n	80131d0 <nd6_new_neighbor_cache_entry+0x110>
        time = neighbor_cache[i].counter.probes_sent;
 8013214:	4615      	mov	r5, r2
        j = i;
 8013216:	461c      	mov	r4, r3
 8013218:	e7da      	b.n	80131d0 <nd6_new_neighbor_cache_entry+0x110>
  if (j >= 0) {
 801321a:	2c00      	cmp	r4, #0
 801321c:	da04      	bge.n	8013228 <nd6_new_neighbor_cache_entry+0x168>
  time = 0;
 801321e:	2500      	movs	r5, #0
  j = -1;
 8013220:	f04f 34ff 	mov.w	r4, #4294967295
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8013224:	462b      	mov	r3, r5
 8013226:	e005      	b.n	8013234 <nd6_new_neighbor_cache_entry+0x174>
    nd6_free_neighbor_cache_entry(j);
 8013228:	4620      	mov	r0, r4
 801322a:	f7ff ff1b 	bl	8013064 <nd6_free_neighbor_cache_entry>
    return j;
 801322e:	e7cd      	b.n	80131cc <nd6_new_neighbor_cache_entry+0x10c>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8013230:	3301      	adds	r3, #1
 8013232:	b25b      	sxtb	r3, r3
 8013234:	2b09      	cmp	r3, #9
 8013236:	dc18      	bgt.n	801326a <nd6_new_neighbor_cache_entry+0x1aa>
    if ((neighbor_cache[i].state == ND6_INCOMPLETE) &&
 8013238:	4910      	ldr	r1, [pc, #64]	; (801327c <nd6_new_neighbor_cache_entry+0x1bc>)
 801323a:	222c      	movs	r2, #44	; 0x2c
 801323c:	fb02 1203 	mla	r2, r2, r3, r1
 8013240:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8013244:	2a01      	cmp	r2, #1
 8013246:	d1f3      	bne.n	8013230 <nd6_new_neighbor_cache_entry+0x170>
        (!neighbor_cache[i].isrouter)) {
 8013248:	222c      	movs	r2, #44	; 0x2c
 801324a:	fb02 1203 	mla	r2, r2, r3, r1
 801324e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
    if ((neighbor_cache[i].state == ND6_INCOMPLETE) &&
 8013252:	2a00      	cmp	r2, #0
 8013254:	d1ec      	bne.n	8013230 <nd6_new_neighbor_cache_entry+0x170>
      if (neighbor_cache[i].counter.probes_sent >= time) {
 8013256:	460a      	mov	r2, r1
 8013258:	212c      	movs	r1, #44	; 0x2c
 801325a:	fb01 2003 	mla	r0, r1, r3, r2
 801325e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8013260:	42aa      	cmp	r2, r5
 8013262:	d3e5      	bcc.n	8013230 <nd6_new_neighbor_cache_entry+0x170>
        time = neighbor_cache[i].counter.probes_sent;
 8013264:	4615      	mov	r5, r2
        j = i;
 8013266:	461c      	mov	r4, r3
 8013268:	e7e2      	b.n	8013230 <nd6_new_neighbor_cache_entry+0x170>
  if (j >= 0) {
 801326a:	2c00      	cmp	r4, #0
 801326c:	db03      	blt.n	8013276 <nd6_new_neighbor_cache_entry+0x1b6>
    nd6_free_neighbor_cache_entry(j);
 801326e:	4620      	mov	r0, r4
 8013270:	f7ff fef8 	bl	8013064 <nd6_free_neighbor_cache_entry>
    return j;
 8013274:	e7aa      	b.n	80131cc <nd6_new_neighbor_cache_entry+0x10c>
  return -1;
 8013276:	f04f 34ff 	mov.w	r4, #4294967295
 801327a:	e7a7      	b.n	80131cc <nd6_new_neighbor_cache_entry+0x10c>
 801327c:	20008660 	.word	0x20008660

08013280 <nd6_send_na>:
{
 8013280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013284:	b084      	sub	sp, #16
 8013286:	4605      	mov	r5, r0
 8013288:	4617      	mov	r7, r2
  LWIP_ASSERT("target address is required", target_addr != NULL);
 801328a:	460c      	mov	r4, r1
 801328c:	2900      	cmp	r1, #0
 801328e:	d057      	beq.n	8013340 <nd6_send_na+0xc0>
  lladdr_opt_len = ((netif->hwaddr_len + 2) >> 3) + (((netif->hwaddr_len + 2) & 0x07) ? 1 : 0);
 8013290:	f895 30da 	ldrb.w	r3, [r5, #218]	; 0xda
 8013294:	3302      	adds	r3, #2
 8013296:	f013 0207 	ands.w	r2, r3, #7
 801329a:	bf18      	it	ne
 801329c:	2201      	movne	r2, #1
 801329e:	eb02 08d3 	add.w	r8, r2, r3, lsr #3
  p = pbuf_alloc(PBUF_IP, sizeof(struct na_header) + (lladdr_opt_len << 3), PBUF_RAM);
 80132a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80132a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80132aa:	3118      	adds	r1, #24
 80132ac:	2036      	movs	r0, #54	; 0x36
 80132ae:	f7f5 fab3 	bl	8008818 <pbuf_alloc>
  if (p == NULL) {
 80132b2:	4606      	mov	r6, r0
 80132b4:	2800      	cmp	r0, #0
 80132b6:	d040      	beq.n	801333a <nd6_send_na+0xba>
  na_hdr = (struct na_header *)p->payload;
 80132b8:	6840      	ldr	r0, [r0, #4]
  na_hdr->type = ICMP6_TYPE_NA;
 80132ba:	2388      	movs	r3, #136	; 0x88
 80132bc:	7003      	strb	r3, [r0, #0]
  na_hdr->code = 0;
 80132be:	2300      	movs	r3, #0
 80132c0:	7043      	strb	r3, [r0, #1]
  na_hdr->chksum = 0;
 80132c2:	7083      	strb	r3, [r0, #2]
 80132c4:	70c3      	strb	r3, [r0, #3]
  na_hdr->flags = flags & 0xf0;
 80132c6:	f007 02f0 	and.w	r2, r7, #240	; 0xf0
 80132ca:	7102      	strb	r2, [r0, #4]
  na_hdr->reserved[0] = 0;
 80132cc:	7143      	strb	r3, [r0, #5]
  na_hdr->reserved[1] = 0;
 80132ce:	7183      	strb	r3, [r0, #6]
  na_hdr->reserved[2] = 0;
 80132d0:	71c3      	strb	r3, [r0, #7]
  ip6_addr_copy_to_packed(na_hdr->target_address, *target_addr);
 80132d2:	6823      	ldr	r3, [r4, #0]
 80132d4:	6083      	str	r3, [r0, #8]
 80132d6:	6863      	ldr	r3, [r4, #4]
 80132d8:	60c3      	str	r3, [r0, #12]
 80132da:	68a3      	ldr	r3, [r4, #8]
 80132dc:	6103      	str	r3, [r0, #16]
 80132de:	68e3      	ldr	r3, [r4, #12]
 80132e0:	6143      	str	r3, [r0, #20]
  lladdr_opt->type = ND6_OPTION_TYPE_TARGET_LLADDR;
 80132e2:	2302      	movs	r3, #2
 80132e4:	7603      	strb	r3, [r0, #24]
  lladdr_opt->length = (u8_t)lladdr_opt_len;
 80132e6:	f880 8019 	strb.w	r8, [r0, #25]
  SMEMCPY(lladdr_opt->addr, netif->hwaddr, netif->hwaddr_len);
 80132ea:	f895 20da 	ldrb.w	r2, [r5, #218]	; 0xda
 80132ee:	f105 01d4 	add.w	r1, r5, #212	; 0xd4
 80132f2:	301a      	adds	r0, #26
 80132f4:	f001 fd79 	bl	8014dea <memcpy>
  if (flags & ND6_SEND_FLAG_MULTICAST_DEST) {
 80132f8:	f017 0f01 	tst.w	r7, #1
 80132fc:	d028      	beq.n	8013350 <nd6_send_na+0xd0>
    ip6_addr_set_solicitednode(&multicast_address, target_addr->addr[3]);
 80132fe:	4a1e      	ldr	r2, [pc, #120]	; (8013378 <nd6_send_na+0xf8>)
 8013300:	f240 23ff 	movw	r3, #767	; 0x2ff
 8013304:	6013      	str	r3, [r2, #0]
 8013306:	2300      	movs	r3, #0
 8013308:	6053      	str	r3, [r2, #4]
 801330a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801330e:	6093      	str	r3, [r2, #8]
 8013310:	68e3      	ldr	r3, [r4, #12]
 8013312:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8013316:	60d3      	str	r3, [r2, #12]
    ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 8013318:	f895 30de 	ldrb.w	r3, [r5, #222]	; 0xde
 801331c:	3301      	adds	r3, #1
 801331e:	7413      	strb	r3, [r2, #16]
  ip6_output_if(p, src_addr, dest_addr,
 8013320:	9502      	str	r5, [sp, #8]
 8013322:	233a      	movs	r3, #58	; 0x3a
 8013324:	9301      	str	r3, [sp, #4]
 8013326:	2300      	movs	r3, #0
 8013328:	9300      	str	r3, [sp, #0]
 801332a:	23ff      	movs	r3, #255	; 0xff
 801332c:	4621      	mov	r1, r4
 801332e:	4630      	mov	r0, r6
 8013330:	f7fe fbf0 	bl	8011b14 <ip6_output_if>
  pbuf_free(p);
 8013334:	4630      	mov	r0, r6
 8013336:	f7f5 fa0d 	bl	8008754 <pbuf_free>
}
 801333a:	b004      	add	sp, #16
 801333c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("target address is required", target_addr != NULL);
 8013340:	4b0e      	ldr	r3, [pc, #56]	; (801337c <nd6_send_na+0xfc>)
 8013342:	f240 42ef 	movw	r2, #1263	; 0x4ef
 8013346:	490e      	ldr	r1, [pc, #56]	; (8013380 <nd6_send_na+0x100>)
 8013348:	480e      	ldr	r0, [pc, #56]	; (8013384 <nd6_send_na+0x104>)
 801334a:	f001 fd7b 	bl	8014e44 <iprintf>
 801334e:	e79f      	b.n	8013290 <nd6_send_na+0x10>
  } else if (flags & ND6_SEND_FLAG_ALLNODES_DEST) {
 8013350:	f017 0f02 	tst.w	r7, #2
 8013354:	d00e      	beq.n	8013374 <nd6_send_na+0xf4>
    ip6_addr_set_allnodes_linklocal(&multicast_address);
 8013356:	4a08      	ldr	r2, [pc, #32]	; (8013378 <nd6_send_na+0xf8>)
 8013358:	f240 23ff 	movw	r3, #767	; 0x2ff
 801335c:	6013      	str	r3, [r2, #0]
 801335e:	2300      	movs	r3, #0
 8013360:	6053      	str	r3, [r2, #4]
 8013362:	6093      	str	r3, [r2, #8]
 8013364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8013368:	60d3      	str	r3, [r2, #12]
    ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 801336a:	f895 30de 	ldrb.w	r3, [r5, #222]	; 0xde
 801336e:	3301      	adds	r3, #1
 8013370:	7413      	strb	r3, [r2, #16]
 8013372:	e7d5      	b.n	8013320 <nd6_send_na+0xa0>
    dest_addr = ip6_current_src_addr();
 8013374:	4a04      	ldr	r2, [pc, #16]	; (8013388 <nd6_send_na+0x108>)
 8013376:	e7d3      	b.n	8013320 <nd6_send_na+0xa0>
 8013378:	200018a8 	.word	0x200018a8
 801337c:	08018cbc 	.word	0x08018cbc
 8013380:	08018d04 	.word	0x08018d04
 8013384:	08015d2c 	.word	0x08015d2c
 8013388:	20004bc0 	.word	0x20004bc0

0801338c <nd6_send_rs>:
{
 801338c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801338e:	b085      	sub	sp, #20
 8013390:	4604      	mov	r4, r0
  if (ip6_addr_isvalid(netif_ip6_addr_state(netif, 0))) {
 8013392:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
 8013396:	f013 0f10 	tst.w	r3, #16
 801339a:	d052      	beq.n	8013442 <nd6_send_rs+0xb6>
    src_addr = netif_ip6_addr(netif, 0);
 801339c:	f100 054c 	add.w	r5, r0, #76	; 0x4c
  ip6_addr_set_allrouters_linklocal(&multicast_address);
 80133a0:	4b2c      	ldr	r3, [pc, #176]	; (8013454 <nd6_send_rs+0xc8>)
 80133a2:	f240 22ff 	movw	r2, #767	; 0x2ff
 80133a6:	601a      	str	r2, [r3, #0]
 80133a8:	2200      	movs	r2, #0
 80133aa:	605a      	str	r2, [r3, #4]
 80133ac:	609a      	str	r2, [r3, #8]
 80133ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80133b2:	60da      	str	r2, [r3, #12]
  ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 80133b4:	f894 20de 	ldrb.w	r2, [r4, #222]	; 0xde
 80133b8:	3201      	adds	r2, #1
 80133ba:	741a      	strb	r2, [r3, #16]
  if (src_addr != IP6_ADDR_ANY6) {
 80133bc:	4b26      	ldr	r3, [pc, #152]	; (8013458 <nd6_send_rs+0xcc>)
 80133be:	429d      	cmp	r5, r3
 80133c0:	d041      	beq.n	8013446 <nd6_send_rs+0xba>
    lladdr_opt_len = ((netif->hwaddr_len + 2) >> 3) + (((netif->hwaddr_len + 2) & 0x07) ? 1 : 0);
 80133c2:	f894 30da 	ldrb.w	r3, [r4, #218]	; 0xda
 80133c6:	3302      	adds	r3, #2
 80133c8:	f013 0207 	ands.w	r2, r3, #7
 80133cc:	bf18      	it	ne
 80133ce:	2201      	movne	r2, #1
 80133d0:	eb02 07d3 	add.w	r7, r2, r3, lsr #3
  p = pbuf_alloc(PBUF_IP, sizeof(struct rs_header) + (lladdr_opt_len << 3), PBUF_RAM);
 80133d4:	00f9      	lsls	r1, r7, #3
 80133d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80133da:	3108      	adds	r1, #8
 80133dc:	2036      	movs	r0, #54	; 0x36
 80133de:	f7f5 fa1b 	bl	8008818 <pbuf_alloc>
  if (p == NULL) {
 80133e2:	4606      	mov	r6, r0
 80133e4:	b398      	cbz	r0, 801344e <nd6_send_rs+0xc2>
  rs_hdr = (struct rs_header *)p->payload;
 80133e6:	6843      	ldr	r3, [r0, #4]
  rs_hdr->type = ICMP6_TYPE_RS;
 80133e8:	2285      	movs	r2, #133	; 0x85
 80133ea:	701a      	strb	r2, [r3, #0]
  rs_hdr->code = 0;
 80133ec:	2200      	movs	r2, #0
 80133ee:	705a      	strb	r2, [r3, #1]
  rs_hdr->chksum = 0;
 80133f0:	709a      	strb	r2, [r3, #2]
 80133f2:	70da      	strb	r2, [r3, #3]
  rs_hdr->reserved = 0;
 80133f4:	711a      	strb	r2, [r3, #4]
 80133f6:	715a      	strb	r2, [r3, #5]
 80133f8:	719a      	strb	r2, [r3, #6]
 80133fa:	71da      	strb	r2, [r3, #7]
  if (src_addr != IP6_ADDR_ANY6) {
 80133fc:	4b16      	ldr	r3, [pc, #88]	; (8013458 <nd6_send_rs+0xcc>)
 80133fe:	429d      	cmp	r5, r3
 8013400:	d00a      	beq.n	8013418 <nd6_send_rs+0x8c>
    lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct rs_header));
 8013402:	6840      	ldr	r0, [r0, #4]
    lladdr_opt->type = ND6_OPTION_TYPE_SOURCE_LLADDR;
 8013404:	2301      	movs	r3, #1
 8013406:	7203      	strb	r3, [r0, #8]
    lladdr_opt->length = (u8_t)lladdr_opt_len;
 8013408:	7247      	strb	r7, [r0, #9]
    SMEMCPY(lladdr_opt->addr, netif->hwaddr, netif->hwaddr_len);
 801340a:	f894 20da 	ldrb.w	r2, [r4, #218]	; 0xda
 801340e:	f104 01d4 	add.w	r1, r4, #212	; 0xd4
 8013412:	300a      	adds	r0, #10
 8013414:	f001 fce9 	bl	8014dea <memcpy>
  err = ip6_output_if(p, (src_addr == IP6_ADDR_ANY6) ? NULL : src_addr, &multicast_address,
 8013418:	4b0f      	ldr	r3, [pc, #60]	; (8013458 <nd6_send_rs+0xcc>)
 801341a:	429d      	cmp	r5, r3
 801341c:	d015      	beq.n	801344a <nd6_send_rs+0xbe>
 801341e:	9402      	str	r4, [sp, #8]
 8013420:	233a      	movs	r3, #58	; 0x3a
 8013422:	9301      	str	r3, [sp, #4]
 8013424:	2300      	movs	r3, #0
 8013426:	9300      	str	r3, [sp, #0]
 8013428:	23ff      	movs	r3, #255	; 0xff
 801342a:	4a0a      	ldr	r2, [pc, #40]	; (8013454 <nd6_send_rs+0xc8>)
 801342c:	4629      	mov	r1, r5
 801342e:	4630      	mov	r0, r6
 8013430:	f7fe fb70 	bl	8011b14 <ip6_output_if>
 8013434:	4604      	mov	r4, r0
  pbuf_free(p);
 8013436:	4630      	mov	r0, r6
 8013438:	f7f5 f98c 	bl	8008754 <pbuf_free>
}
 801343c:	4620      	mov	r0, r4
 801343e:	b005      	add	sp, #20
 8013440:	bdf0      	pop	{r4, r5, r6, r7, pc}
    src_addr = IP6_ADDR_ANY6;
 8013442:	4d05      	ldr	r5, [pc, #20]	; (8013458 <nd6_send_rs+0xcc>)
 8013444:	e7ac      	b.n	80133a0 <nd6_send_rs+0x14>
  u16_t lladdr_opt_len = 0;
 8013446:	2700      	movs	r7, #0
 8013448:	e7c4      	b.n	80133d4 <nd6_send_rs+0x48>
  err = ip6_output_if(p, (src_addr == IP6_ADDR_ANY6) ? NULL : src_addr, &multicast_address,
 801344a:	2500      	movs	r5, #0
 801344c:	e7e7      	b.n	801341e <nd6_send_rs+0x92>
    return ERR_BUF;
 801344e:	f06f 0401 	mvn.w	r4, #1
 8013452:	e7f3      	b.n	801343c <nd6_send_rs+0xb0>
 8013454:	200018a8 	.word	0x200018a8
 8013458:	08018b20 	.word	0x08018b20

0801345c <nd6_send_ns>:
{
 801345c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013460:	b085      	sub	sp, #20
 8013462:	4606      	mov	r6, r0
 8013464:	4617      	mov	r7, r2
  LWIP_ASSERT("target address is required", target_addr != NULL);
 8013466:	460c      	mov	r4, r1
 8013468:	b171      	cbz	r1, 8013488 <nd6_send_ns+0x2c>
  if (!(flags & ND6_SEND_FLAG_ANY_SRC) &&
 801346a:	f017 0f04 	tst.w	r7, #4
 801346e:	d113      	bne.n	8013498 <nd6_send_ns+0x3c>
      ip6_addr_isvalid(netif_ip6_addr_state(netif,0))) {
 8013470:	f896 3094 	ldrb.w	r3, [r6, #148]	; 0x94
  if (!(flags & ND6_SEND_FLAG_ANY_SRC) &&
 8013474:	f013 0f10 	tst.w	r3, #16
 8013478:	d058      	beq.n	801352c <nd6_send_ns+0xd0>
    src_addr = netif_ip6_addr(netif, 0);
 801347a:	f106 084c 	add.w	r8, r6, #76	; 0x4c
    lladdr_opt_len = ((netif->hwaddr_len + 2) + 7) >> 3;
 801347e:	f896 50da 	ldrb.w	r5, [r6, #218]	; 0xda
 8013482:	3509      	adds	r5, #9
 8013484:	08ed      	lsrs	r5, r5, #3
 8013486:	e00a      	b.n	801349e <nd6_send_ns+0x42>
  LWIP_ASSERT("target address is required", target_addr != NULL);
 8013488:	4b32      	ldr	r3, [pc, #200]	; (8013554 <nd6_send_ns+0xf8>)
 801348a:	f240 42a4 	movw	r2, #1188	; 0x4a4
 801348e:	4932      	ldr	r1, [pc, #200]	; (8013558 <nd6_send_ns+0xfc>)
 8013490:	4832      	ldr	r0, [pc, #200]	; (801355c <nd6_send_ns+0x100>)
 8013492:	f001 fcd7 	bl	8014e44 <iprintf>
 8013496:	e7e8      	b.n	801346a <nd6_send_ns+0xe>
    lladdr_opt_len = 0;
 8013498:	2500      	movs	r5, #0
    src_addr = IP6_ADDR_ANY6;
 801349a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8013564 <nd6_send_ns+0x108>
  p = pbuf_alloc(PBUF_IP, sizeof(struct ns_header) + (lladdr_opt_len << 3), PBUF_RAM);
 801349e:	00e9      	lsls	r1, r5, #3
 80134a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80134a4:	3118      	adds	r1, #24
 80134a6:	2036      	movs	r0, #54	; 0x36
 80134a8:	f7f5 f9b6 	bl	8008818 <pbuf_alloc>
  if (p == NULL) {
 80134ac:	4681      	mov	r9, r0
 80134ae:	2800      	cmp	r0, #0
 80134b0:	d039      	beq.n	8013526 <nd6_send_ns+0xca>
  ns_hdr = (struct ns_header *)p->payload;
 80134b2:	6843      	ldr	r3, [r0, #4]
  ns_hdr->type = ICMP6_TYPE_NS;
 80134b4:	2287      	movs	r2, #135	; 0x87
 80134b6:	701a      	strb	r2, [r3, #0]
  ns_hdr->code = 0;
 80134b8:	2200      	movs	r2, #0
 80134ba:	705a      	strb	r2, [r3, #1]
  ns_hdr->chksum = 0;
 80134bc:	709a      	strb	r2, [r3, #2]
 80134be:	70da      	strb	r2, [r3, #3]
  ns_hdr->reserved = 0;
 80134c0:	711a      	strb	r2, [r3, #4]
 80134c2:	715a      	strb	r2, [r3, #5]
 80134c4:	719a      	strb	r2, [r3, #6]
 80134c6:	71da      	strb	r2, [r3, #7]
  ip6_addr_copy_to_packed(ns_hdr->target_address, *target_addr);
 80134c8:	6822      	ldr	r2, [r4, #0]
 80134ca:	609a      	str	r2, [r3, #8]
 80134cc:	6862      	ldr	r2, [r4, #4]
 80134ce:	60da      	str	r2, [r3, #12]
 80134d0:	68a2      	ldr	r2, [r4, #8]
 80134d2:	611a      	str	r2, [r3, #16]
 80134d4:	68e2      	ldr	r2, [r4, #12]
 80134d6:	615a      	str	r2, [r3, #20]
  if (lladdr_opt_len != 0) {
 80134d8:	bb65      	cbnz	r5, 8013534 <nd6_send_ns+0xd8>
  if (flags & ND6_SEND_FLAG_MULTICAST_DEST) {
 80134da:	f017 0f01 	tst.w	r7, #1
 80134de:	d011      	beq.n	8013504 <nd6_send_ns+0xa8>
    ip6_addr_set_solicitednode(&multicast_address, target_addr->addr[3]);
 80134e0:	4b1f      	ldr	r3, [pc, #124]	; (8013560 <nd6_send_ns+0x104>)
 80134e2:	f240 22ff 	movw	r2, #767	; 0x2ff
 80134e6:	601a      	str	r2, [r3, #0]
 80134e8:	2200      	movs	r2, #0
 80134ea:	605a      	str	r2, [r3, #4]
 80134ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80134f0:	609a      	str	r2, [r3, #8]
 80134f2:	68e2      	ldr	r2, [r4, #12]
 80134f4:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80134f8:	60da      	str	r2, [r3, #12]
    ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 80134fa:	f896 20de 	ldrb.w	r2, [r6, #222]	; 0xde
 80134fe:	3201      	adds	r2, #1
 8013500:	741a      	strb	r2, [r3, #16]
    target_addr = &multicast_address;
 8013502:	461c      	mov	r4, r3
  ip6_output_if(p, (src_addr == IP6_ADDR_ANY6) ? NULL : src_addr, target_addr,
 8013504:	4b17      	ldr	r3, [pc, #92]	; (8013564 <nd6_send_ns+0x108>)
 8013506:	4598      	cmp	r8, r3
 8013508:	d020      	beq.n	801354c <nd6_send_ns+0xf0>
 801350a:	9602      	str	r6, [sp, #8]
 801350c:	233a      	movs	r3, #58	; 0x3a
 801350e:	9301      	str	r3, [sp, #4]
 8013510:	2300      	movs	r3, #0
 8013512:	9300      	str	r3, [sp, #0]
 8013514:	23ff      	movs	r3, #255	; 0xff
 8013516:	4622      	mov	r2, r4
 8013518:	4641      	mov	r1, r8
 801351a:	4648      	mov	r0, r9
 801351c:	f7fe fafa 	bl	8011b14 <ip6_output_if>
  pbuf_free(p);
 8013520:	4648      	mov	r0, r9
 8013522:	f7f5 f917 	bl	8008754 <pbuf_free>
}
 8013526:	b005      	add	sp, #20
 8013528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lladdr_opt_len = 0;
 801352c:	2500      	movs	r5, #0
    src_addr = IP6_ADDR_ANY6;
 801352e:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8013564 <nd6_send_ns+0x108>
 8013532:	e7b4      	b.n	801349e <nd6_send_ns+0x42>
    struct lladdr_option *lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct ns_header));
 8013534:	6840      	ldr	r0, [r0, #4]
    lladdr_opt->type = ND6_OPTION_TYPE_SOURCE_LLADDR;
 8013536:	2301      	movs	r3, #1
 8013538:	7603      	strb	r3, [r0, #24]
    lladdr_opt->length = (u8_t)lladdr_opt_len;
 801353a:	7645      	strb	r5, [r0, #25]
    SMEMCPY(lladdr_opt->addr, netif->hwaddr, netif->hwaddr_len);
 801353c:	f896 20da 	ldrb.w	r2, [r6, #218]	; 0xda
 8013540:	f106 01d4 	add.w	r1, r6, #212	; 0xd4
 8013544:	301a      	adds	r0, #26
 8013546:	f001 fc50 	bl	8014dea <memcpy>
 801354a:	e7c6      	b.n	80134da <nd6_send_ns+0x7e>
  ip6_output_if(p, (src_addr == IP6_ADDR_ANY6) ? NULL : src_addr, target_addr,
 801354c:	f04f 0800 	mov.w	r8, #0
 8013550:	e7db      	b.n	801350a <nd6_send_ns+0xae>
 8013552:	bf00      	nop
 8013554:	08018cbc 	.word	0x08018cbc
 8013558:	08018d04 	.word	0x08018d04
 801355c:	08015d2c 	.word	0x08015d2c
 8013560:	200018a8 	.word	0x200018a8
 8013564:	08018b20 	.word	0x08018b20

08013568 <nd6_send_neighbor_cache_probe>:
{
 8013568:	b508      	push	{r3, lr}
  nd6_send_ns(entry->netif, &entry->next_hop_address, flags);
 801356a:	460a      	mov	r2, r1
 801356c:	4601      	mov	r1, r0
 801356e:	6940      	ldr	r0, [r0, #20]
 8013570:	f7ff ff74 	bl	801345c <nd6_send_ns>
}
 8013574:	bd08      	pop	{r3, pc}
	...

08013578 <nd6_new_router>:
{
 8013578:	b570      	push	{r4, r5, r6, lr}
 801357a:	4605      	mov	r5, r0
 801357c:	460e      	mov	r6, r1
  neighbor_index = nd6_find_neighbor_cache_entry(router_addr);
 801357e:	f7ff f987 	bl	8012890 <nd6_find_neighbor_cache_entry>
  if (neighbor_index < 0) {
 8013582:	1e04      	subs	r4, r0, #0
 8013584:	db0a      	blt.n	801359c <nd6_new_router+0x24>
  neighbor_cache[neighbor_index].isrouter = 1;
 8013586:	4625      	mov	r5, r4
 8013588:	4b39      	ldr	r3, [pc, #228]	; (8013670 <nd6_new_router+0xf8>)
 801358a:	222c      	movs	r2, #44	; 0x2c
 801358c:	fb02 3404 	mla	r4, r2, r4, r3
 8013590:	2301      	movs	r3, #1
 8013592:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  free_router_index = LWIP_ND6_NUM_ROUTERS;
 8013596:	2003      	movs	r0, #3
  for (router_index = LWIP_ND6_NUM_ROUTERS - 1; router_index >= 0; router_index--) {
 8013598:	2302      	movs	r3, #2
 801359a:	e03d      	b.n	8013618 <nd6_new_router+0xa0>
    neighbor_index = nd6_new_neighbor_cache_entry();
 801359c:	f7ff fd90 	bl	80130c0 <nd6_new_neighbor_cache_entry>
    if (neighbor_index < 0) {
 80135a0:	1e04      	subs	r4, r0, #0
 80135a2:	db60      	blt.n	8013666 <nd6_new_router+0xee>
    ip6_addr_set(&(neighbor_cache[neighbor_index].next_hop_address), router_addr);
 80135a4:	b365      	cbz	r5, 8013600 <nd6_new_router+0x88>
 80135a6:	6829      	ldr	r1, [r5, #0]
 80135a8:	4620      	mov	r0, r4
 80135aa:	232c      	movs	r3, #44	; 0x2c
 80135ac:	fb03 f304 	mul.w	r3, r3, r4
 80135b0:	4a2f      	ldr	r2, [pc, #188]	; (8013670 <nd6_new_router+0xf8>)
 80135b2:	50d1      	str	r1, [r2, r3]
 80135b4:	b335      	cbz	r5, 8013604 <nd6_new_router+0x8c>
 80135b6:	686a      	ldr	r2, [r5, #4]
 80135b8:	492d      	ldr	r1, [pc, #180]	; (8013670 <nd6_new_router+0xf8>)
 80135ba:	232c      	movs	r3, #44	; 0x2c
 80135bc:	fb03 1300 	mla	r3, r3, r0, r1
 80135c0:	605a      	str	r2, [r3, #4]
 80135c2:	b30d      	cbz	r5, 8013608 <nd6_new_router+0x90>
 80135c4:	68aa      	ldr	r2, [r5, #8]
 80135c6:	492a      	ldr	r1, [pc, #168]	; (8013670 <nd6_new_router+0xf8>)
 80135c8:	232c      	movs	r3, #44	; 0x2c
 80135ca:	fb03 1300 	mla	r3, r3, r0, r1
 80135ce:	609a      	str	r2, [r3, #8]
 80135d0:	b1e5      	cbz	r5, 801360c <nd6_new_router+0x94>
 80135d2:	68ea      	ldr	r2, [r5, #12]
 80135d4:	4926      	ldr	r1, [pc, #152]	; (8013670 <nd6_new_router+0xf8>)
 80135d6:	232c      	movs	r3, #44	; 0x2c
 80135d8:	fb03 1300 	mla	r3, r3, r0, r1
 80135dc:	60da      	str	r2, [r3, #12]
 80135de:	b1bd      	cbz	r5, 8013610 <nd6_new_router+0x98>
 80135e0:	7c2b      	ldrb	r3, [r5, #16]
 80135e2:	4a23      	ldr	r2, [pc, #140]	; (8013670 <nd6_new_router+0xf8>)
 80135e4:	212c      	movs	r1, #44	; 0x2c
 80135e6:	fb01 2000 	mla	r0, r1, r0, r2
 80135ea:	7403      	strb	r3, [r0, #16]
    neighbor_cache[neighbor_index].netif = netif;
 80135ec:	6146      	str	r6, [r0, #20]
    neighbor_cache[neighbor_index].q = NULL;
 80135ee:	2300      	movs	r3, #0
 80135f0:	6203      	str	r3, [r0, #32]
    neighbor_cache[neighbor_index].state = ND6_INCOMPLETE;
 80135f2:	2101      	movs	r1, #1
 80135f4:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    neighbor_cache[neighbor_index].counter.probes_sent = 1;
 80135f8:	6281      	str	r1, [r0, #40]	; 0x28
    nd6_send_neighbor_cache_probe(&neighbor_cache[neighbor_index], ND6_SEND_FLAG_MULTICAST_DEST);
 80135fa:	f7ff ffb5 	bl	8013568 <nd6_send_neighbor_cache_probe>
 80135fe:	e7c2      	b.n	8013586 <nd6_new_router+0xe>
    ip6_addr_set(&(neighbor_cache[neighbor_index].next_hop_address), router_addr);
 8013600:	2100      	movs	r1, #0
 8013602:	e7d1      	b.n	80135a8 <nd6_new_router+0x30>
 8013604:	2200      	movs	r2, #0
 8013606:	e7d7      	b.n	80135b8 <nd6_new_router+0x40>
 8013608:	2200      	movs	r2, #0
 801360a:	e7dc      	b.n	80135c6 <nd6_new_router+0x4e>
 801360c:	2200      	movs	r2, #0
 801360e:	e7e1      	b.n	80135d4 <nd6_new_router+0x5c>
 8013610:	2300      	movs	r3, #0
 8013612:	e7e6      	b.n	80135e2 <nd6_new_router+0x6a>
  for (router_index = LWIP_ND6_NUM_ROUTERS - 1; router_index >= 0; router_index--) {
 8013614:	3b01      	subs	r3, #1
 8013616:	b25b      	sxtb	r3, r3
 8013618:	2b00      	cmp	r3, #0
 801361a:	db0e      	blt.n	801363a <nd6_new_router+0xc2>
    if(default_router_list[router_index].neighbor_entry == &(neighbor_cache[neighbor_index])){ 
 801361c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8013620:	008a      	lsls	r2, r1, #2
 8013622:	4914      	ldr	r1, [pc, #80]	; (8013674 <nd6_new_router+0xfc>)
 8013624:	5889      	ldr	r1, [r1, r2]
 8013626:	222c      	movs	r2, #44	; 0x2c
 8013628:	4c11      	ldr	r4, [pc, #68]	; (8013670 <nd6_new_router+0xf8>)
 801362a:	fb02 4205 	mla	r2, r2, r5, r4
 801362e:	4291      	cmp	r1, r2
 8013630:	d01c      	beq.n	801366c <nd6_new_router+0xf4>
    if (default_router_list[router_index].neighbor_entry == NULL) {
 8013632:	2900      	cmp	r1, #0
 8013634:	d1ee      	bne.n	8013614 <nd6_new_router+0x9c>
      free_router_index = router_index;
 8013636:	4618      	mov	r0, r3
 8013638:	e7ec      	b.n	8013614 <nd6_new_router+0x9c>
  if (free_router_index < LWIP_ND6_NUM_ROUTERS) {
 801363a:	2802      	cmp	r0, #2
 801363c:	dc09      	bgt.n	8013652 <nd6_new_router+0xda>
    default_router_list[free_router_index].neighbor_entry = &(neighbor_cache[neighbor_index]);
 801363e:	232c      	movs	r3, #44	; 0x2c
 8013640:	4a0b      	ldr	r2, [pc, #44]	; (8013670 <nd6_new_router+0xf8>)
 8013642:	fb03 2505 	mla	r5, r3, r5, r2
 8013646:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 801364a:	0093      	lsls	r3, r2, #2
 801364c:	4a09      	ldr	r2, [pc, #36]	; (8013674 <nd6_new_router+0xfc>)
 801364e:	50d5      	str	r5, [r2, r3]
}
 8013650:	bd70      	pop	{r4, r5, r6, pc}
  neighbor_cache[neighbor_index].isrouter = 0;
 8013652:	4b07      	ldr	r3, [pc, #28]	; (8013670 <nd6_new_router+0xf8>)
 8013654:	222c      	movs	r2, #44	; 0x2c
 8013656:	fb02 3505 	mla	r5, r2, r5, r3
 801365a:	2300      	movs	r3, #0
 801365c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  return -1;
 8013660:	f04f 30ff 	mov.w	r0, #4294967295
 8013664:	e7f4      	b.n	8013650 <nd6_new_router+0xd8>
      return -1;
 8013666:	f04f 30ff 	mov.w	r0, #4294967295
 801366a:	e7f1      	b.n	8013650 <nd6_new_router+0xd8>
      return router_index; 
 801366c:	4618      	mov	r0, r3
 801366e:	e7ef      	b.n	8013650 <nd6_new_router+0xd8>
 8013670:	20008660 	.word	0x20008660
 8013674:	20008a84 	.word	0x20008a84

08013678 <nd6_get_next_hop_entry>:
{
 8013678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801367a:	4604      	mov	r4, r0
 801367c:	460e      	mov	r6, r1
  if (ip6_addr_cmp(ip6addr, &(destination_cache[nd6_cached_destination_index].destination_addr))) {
 801367e:	6800      	ldr	r0, [r0, #0]
 8013680:	4b9f      	ldr	r3, [pc, #636]	; (8013900 <nd6_get_next_hop_entry+0x288>)
 8013682:	781b      	ldrb	r3, [r3, #0]
 8013684:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8013688:	010a      	lsls	r2, r1, #4
 801368a:	499e      	ldr	r1, [pc, #632]	; (8013904 <nd6_get_next_hop_entry+0x28c>)
 801368c:	588a      	ldr	r2, [r1, r2]
 801368e:	4290      	cmp	r0, r2
 8013690:	d036      	beq.n	8013700 <nd6_get_next_hop_entry+0x88>
    dst_idx = nd6_find_destination_cache_entry(ip6addr);
 8013692:	4620      	mov	r0, r4
 8013694:	f7ff f936 	bl	8012904 <nd6_find_destination_cache_entry>
    if (dst_idx >= 0) {
 8013698:	1e05      	subs	r5, r0, #0
 801369a:	db58      	blt.n	801374e <nd6_get_next_hop_entry+0xd6>
      LWIP_ASSERT("type overflow", (size_t)dst_idx < NETIF_ADDR_IDX_MAX);
 801369c:	b2ab      	uxth	r3, r5
 801369e:	2b7e      	cmp	r3, #126	; 0x7e
 80136a0:	d84d      	bhi.n	801373e <nd6_get_next_hop_entry+0xc6>
      nd6_cached_destination_index = (netif_addr_idx_t)dst_idx;
 80136a2:	4b97      	ldr	r3, [pc, #604]	; (8013900 <nd6_get_next_hop_entry+0x288>)
 80136a4:	701d      	strb	r5, [r3, #0]
  if (ip6_addr_cmp(&(destination_cache[nd6_cached_destination_index].next_hop_addr),
 80136a6:	4b96      	ldr	r3, [pc, #600]	; (8013900 <nd6_get_next_hop_entry+0x288>)
 80136a8:	781b      	ldrb	r3, [r3, #0]
 80136aa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80136ae:	0111      	lsls	r1, r2, #4
 80136b0:	4a94      	ldr	r2, [pc, #592]	; (8013904 <nd6_get_next_hop_entry+0x28c>)
 80136b2:	440a      	add	r2, r1
 80136b4:	6950      	ldr	r0, [r2, #20]
 80136b6:	4a94      	ldr	r2, [pc, #592]	; (8013908 <nd6_get_next_hop_entry+0x290>)
 80136b8:	7811      	ldrb	r1, [r2, #0]
 80136ba:	222c      	movs	r2, #44	; 0x2c
 80136bc:	fb02 f201 	mul.w	r2, r2, r1
 80136c0:	4c92      	ldr	r4, [pc, #584]	; (801390c <nd6_get_next_hop_entry+0x294>)
 80136c2:	58a2      	ldr	r2, [r4, r2]
 80136c4:	4290      	cmp	r0, r2
 80136c6:	f000 80e4 	beq.w	8013892 <nd6_get_next_hop_entry+0x21a>
    i = nd6_find_neighbor_cache_entry(&(destination_cache[nd6_cached_destination_index].next_hop_addr));
 80136ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80136ce:	0118      	lsls	r0, r3, #4
 80136d0:	3010      	adds	r0, #16
 80136d2:	4b8c      	ldr	r3, [pc, #560]	; (8013904 <nd6_get_next_hop_entry+0x28c>)
 80136d4:	4418      	add	r0, r3
 80136d6:	3004      	adds	r0, #4
 80136d8:	f7ff f8da 	bl	8012890 <nd6_find_neighbor_cache_entry>
    if (i >= 0) {
 80136dc:	2800      	cmp	r0, #0
 80136de:	f2c0 811f 	blt.w	8013920 <nd6_get_next_hop_entry+0x2a8>
      nd6_cached_neighbor_index = i;
 80136e2:	4b89      	ldr	r3, [pc, #548]	; (8013908 <nd6_get_next_hop_entry+0x290>)
 80136e4:	7018      	strb	r0, [r3, #0]
  destination_cache[nd6_cached_destination_index].age = 0;
 80136e6:	4b86      	ldr	r3, [pc, #536]	; (8013900 <nd6_get_next_hop_entry+0x288>)
 80136e8:	781b      	ldrb	r3, [r3, #0]
 80136ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80136ee:	011a      	lsls	r2, r3, #4
 80136f0:	4b84      	ldr	r3, [pc, #528]	; (8013904 <nd6_get_next_hop_entry+0x28c>)
 80136f2:	4413      	add	r3, r2
 80136f4:	2200      	movs	r2, #0
 80136f6:	62da      	str	r2, [r3, #44]	; 0x2c
  return nd6_cached_neighbor_index;
 80136f8:	4b83      	ldr	r3, [pc, #524]	; (8013908 <nd6_get_next_hop_entry+0x290>)
 80136fa:	f993 0000 	ldrsb.w	r0, [r3]
}
 80136fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ip6_addr_cmp(ip6addr, &(destination_cache[nd6_cached_destination_index].destination_addr))) {
 8013700:	6860      	ldr	r0, [r4, #4]
 8013702:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013706:	0111      	lsls	r1, r2, #4
 8013708:	4a7e      	ldr	r2, [pc, #504]	; (8013904 <nd6_get_next_hop_entry+0x28c>)
 801370a:	440a      	add	r2, r1
 801370c:	6852      	ldr	r2, [r2, #4]
 801370e:	4290      	cmp	r0, r2
 8013710:	d1bf      	bne.n	8013692 <nd6_get_next_hop_entry+0x1a>
 8013712:	68a0      	ldr	r0, [r4, #8]
 8013714:	4a7b      	ldr	r2, [pc, #492]	; (8013904 <nd6_get_next_hop_entry+0x28c>)
 8013716:	440a      	add	r2, r1
 8013718:	6892      	ldr	r2, [r2, #8]
 801371a:	4290      	cmp	r0, r2
 801371c:	d1b9      	bne.n	8013692 <nd6_get_next_hop_entry+0x1a>
 801371e:	68e0      	ldr	r0, [r4, #12]
 8013720:	4a78      	ldr	r2, [pc, #480]	; (8013904 <nd6_get_next_hop_entry+0x28c>)
 8013722:	440a      	add	r2, r1
 8013724:	68d2      	ldr	r2, [r2, #12]
 8013726:	4290      	cmp	r0, r2
 8013728:	d1b3      	bne.n	8013692 <nd6_get_next_hop_entry+0x1a>
 801372a:	7c21      	ldrb	r1, [r4, #16]
 801372c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013730:	011a      	lsls	r2, r3, #4
 8013732:	4b74      	ldr	r3, [pc, #464]	; (8013904 <nd6_get_next_hop_entry+0x28c>)
 8013734:	4413      	add	r3, r2
 8013736:	7c1b      	ldrb	r3, [r3, #16]
 8013738:	4299      	cmp	r1, r3
 801373a:	d1aa      	bne.n	8013692 <nd6_get_next_hop_entry+0x1a>
 801373c:	e7b3      	b.n	80136a6 <nd6_get_next_hop_entry+0x2e>
      LWIP_ASSERT("type overflow", (size_t)dst_idx < NETIF_ADDR_IDX_MAX);
 801373e:	4b74      	ldr	r3, [pc, #464]	; (8013910 <nd6_get_next_hop_entry+0x298>)
 8013740:	f240 72a2 	movw	r2, #1954	; 0x7a2
 8013744:	4973      	ldr	r1, [pc, #460]	; (8013914 <nd6_get_next_hop_entry+0x29c>)
 8013746:	4874      	ldr	r0, [pc, #464]	; (8013918 <nd6_get_next_hop_entry+0x2a0>)
 8013748:	f001 fb7c 	bl	8014e44 <iprintf>
 801374c:	e7a9      	b.n	80136a2 <nd6_get_next_hop_entry+0x2a>
      dst_idx = nd6_new_destination_cache_entry();
 801374e:	f7ff f911 	bl	8012974 <nd6_new_destination_cache_entry>
      if (dst_idx >= 0) {
 8013752:	1e05      	subs	r5, r0, #0
 8013754:	f2c0 8111 	blt.w	801397a <nd6_get_next_hop_entry+0x302>
        LWIP_ASSERT("type overflow", (size_t)dst_idx < NETIF_ADDR_IDX_MAX);
 8013758:	b2ab      	uxth	r3, r5
 801375a:	2b7e      	cmp	r3, #126	; 0x7e
 801375c:	d853      	bhi.n	8013806 <nd6_get_next_hop_entry+0x18e>
        nd6_cached_destination_index = (netif_addr_idx_t)dst_idx;
 801375e:	b2ed      	uxtb	r5, r5
 8013760:	4b67      	ldr	r3, [pc, #412]	; (8013900 <nd6_get_next_hop_entry+0x288>)
 8013762:	701d      	strb	r5, [r3, #0]
      ip6_addr_set(&(destination_cache[nd6_cached_destination_index].destination_addr), ip6addr);
 8013764:	2c00      	cmp	r4, #0
 8013766:	d056      	beq.n	8013816 <nd6_get_next_hop_entry+0x19e>
 8013768:	6821      	ldr	r1, [r4, #0]
 801376a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801376e:	0113      	lsls	r3, r2, #4
 8013770:	4a64      	ldr	r2, [pc, #400]	; (8013904 <nd6_get_next_hop_entry+0x28c>)
 8013772:	50d1      	str	r1, [r2, r3]
 8013774:	2c00      	cmp	r4, #0
 8013776:	d050      	beq.n	801381a <nd6_get_next_hop_entry+0x1a2>
 8013778:	6861      	ldr	r1, [r4, #4]
 801377a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 801377e:	011a      	lsls	r2, r3, #4
 8013780:	4b60      	ldr	r3, [pc, #384]	; (8013904 <nd6_get_next_hop_entry+0x28c>)
 8013782:	4413      	add	r3, r2
 8013784:	6059      	str	r1, [r3, #4]
 8013786:	2c00      	cmp	r4, #0
 8013788:	d049      	beq.n	801381e <nd6_get_next_hop_entry+0x1a6>
 801378a:	68a1      	ldr	r1, [r4, #8]
 801378c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8013790:	011a      	lsls	r2, r3, #4
 8013792:	4b5c      	ldr	r3, [pc, #368]	; (8013904 <nd6_get_next_hop_entry+0x28c>)
 8013794:	4413      	add	r3, r2
 8013796:	6099      	str	r1, [r3, #8]
 8013798:	2c00      	cmp	r4, #0
 801379a:	d042      	beq.n	8013822 <nd6_get_next_hop_entry+0x1aa>
 801379c:	68e1      	ldr	r1, [r4, #12]
 801379e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80137a2:	011a      	lsls	r2, r3, #4
 80137a4:	4b57      	ldr	r3, [pc, #348]	; (8013904 <nd6_get_next_hop_entry+0x28c>)
 80137a6:	4413      	add	r3, r2
 80137a8:	60d9      	str	r1, [r3, #12]
 80137aa:	2c00      	cmp	r4, #0
 80137ac:	d03b      	beq.n	8013826 <nd6_get_next_hop_entry+0x1ae>
 80137ae:	7c21      	ldrb	r1, [r4, #16]
 80137b0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80137b4:	011a      	lsls	r2, r3, #4
 80137b6:	4b53      	ldr	r3, [pc, #332]	; (8013904 <nd6_get_next_hop_entry+0x28c>)
 80137b8:	4413      	add	r3, r2
 80137ba:	7419      	strb	r1, [r3, #16]
      if (ip6_addr_islinklocal(ip6addr) ||
 80137bc:	6823      	ldr	r3, [r4, #0]
 80137be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80137c2:	041b      	lsls	r3, r3, #16
 80137c4:	0c1b      	lsrs	r3, r3, #16
 80137c6:	f248 02fe 	movw	r2, #33022	; 0x80fe
 80137ca:	4293      	cmp	r3, r2
 80137cc:	d004      	beq.n	80137d8 <nd6_get_next_hop_entry+0x160>
          nd6_is_prefix_in_netif(ip6addr, netif)) {
 80137ce:	4631      	mov	r1, r6
 80137d0:	4620      	mov	r0, r4
 80137d2:	f7ff f903 	bl	80129dc <nd6_is_prefix_in_netif>
      if (ip6_addr_islinklocal(ip6addr) ||
 80137d6:	b340      	cbz	r0, 801382a <nd6_get_next_hop_entry+0x1b2>
        destination_cache[nd6_cached_destination_index].pmtu = netif_mtu6(netif);
 80137d8:	f8b6 40d2 	ldrh.w	r4, [r6, #210]	; 0xd2
 80137dc:	4a49      	ldr	r2, [pc, #292]	; (8013904 <nd6_get_next_hop_entry+0x28c>)
 80137de:	0069      	lsls	r1, r5, #1
 80137e0:	194b      	adds	r3, r1, r5
 80137e2:	0118      	lsls	r0, r3, #4
 80137e4:	1813      	adds	r3, r2, r0
 80137e6:	851c      	strh	r4, [r3, #40]	; 0x28
        ip6_addr_copy(destination_cache[nd6_cached_destination_index].next_hop_addr, destination_cache[nd6_cached_destination_index].destination_addr);
 80137e8:	5810      	ldr	r0, [r2, r0]
 80137ea:	6158      	str	r0, [r3, #20]
 80137ec:	6858      	ldr	r0, [r3, #4]
 80137ee:	6198      	str	r0, [r3, #24]
 80137f0:	6898      	ldr	r0, [r3, #8]
 80137f2:	61d8      	str	r0, [r3, #28]
 80137f4:	68d8      	ldr	r0, [r3, #12]
 80137f6:	6218      	str	r0, [r3, #32]
 80137f8:	7c18      	ldrb	r0, [r3, #16]
 80137fa:	440d      	add	r5, r1
 80137fc:	012b      	lsls	r3, r5, #4
 80137fe:	441a      	add	r2, r3
 8013800:	f882 0024 	strb.w	r0, [r2, #36]	; 0x24
 8013804:	e74f      	b.n	80136a6 <nd6_get_next_hop_entry+0x2e>
        LWIP_ASSERT("type overflow", (size_t)dst_idx < NETIF_ADDR_IDX_MAX);
 8013806:	4b42      	ldr	r3, [pc, #264]	; (8013910 <nd6_get_next_hop_entry+0x298>)
 8013808:	f240 72a9 	movw	r2, #1961	; 0x7a9
 801380c:	4941      	ldr	r1, [pc, #260]	; (8013914 <nd6_get_next_hop_entry+0x29c>)
 801380e:	4842      	ldr	r0, [pc, #264]	; (8013918 <nd6_get_next_hop_entry+0x2a0>)
 8013810:	f001 fb18 	bl	8014e44 <iprintf>
 8013814:	e7a3      	b.n	801375e <nd6_get_next_hop_entry+0xe6>
      ip6_addr_set(&(destination_cache[nd6_cached_destination_index].destination_addr), ip6addr);
 8013816:	2100      	movs	r1, #0
 8013818:	e7a7      	b.n	801376a <nd6_get_next_hop_entry+0xf2>
 801381a:	2100      	movs	r1, #0
 801381c:	e7ad      	b.n	801377a <nd6_get_next_hop_entry+0x102>
 801381e:	2100      	movs	r1, #0
 8013820:	e7b4      	b.n	801378c <nd6_get_next_hop_entry+0x114>
 8013822:	2100      	movs	r1, #0
 8013824:	e7bb      	b.n	801379e <nd6_get_next_hop_entry+0x126>
 8013826:	2100      	movs	r1, #0
 8013828:	e7c2      	b.n	80137b0 <nd6_get_next_hop_entry+0x138>
        i = nd6_select_router(ip6addr, netif);
 801382a:	4631      	mov	r1, r6
 801382c:	4620      	mov	r0, r4
 801382e:	f7ff f93b 	bl	8012aa8 <nd6_select_router>
        if (i < 0) {
 8013832:	2800      	cmp	r0, #0
 8013834:	db1d      	blt.n	8013872 <nd6_get_next_hop_entry+0x1fa>
        destination_cache[nd6_cached_destination_index].pmtu = netif_mtu6(netif); /* Start with netif mtu, correct through ICMPv6 if necessary */
 8013836:	4b32      	ldr	r3, [pc, #200]	; (8013900 <nd6_get_next_hop_entry+0x288>)
 8013838:	781d      	ldrb	r5, [r3, #0]
 801383a:	f8b6 70d2 	ldrh.w	r7, [r6, #210]	; 0xd2
 801383e:	4c31      	ldr	r4, [pc, #196]	; (8013904 <nd6_get_next_hop_entry+0x28c>)
 8013840:	0069      	lsls	r1, r5, #1
 8013842:	194b      	adds	r3, r1, r5
 8013844:	011a      	lsls	r2, r3, #4
 8013846:	18a3      	adds	r3, r4, r2
 8013848:	851f      	strh	r7, [r3, #40]	; 0x28
        ip6_addr_copy(destination_cache[nd6_cached_destination_index].next_hop_addr, default_router_list[i].neighbor_entry->next_hop_address);
 801384a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801384e:	0082      	lsls	r2, r0, #2
 8013850:	4832      	ldr	r0, [pc, #200]	; (801391c <nd6_get_next_hop_entry+0x2a4>)
 8013852:	5882      	ldr	r2, [r0, r2]
 8013854:	6810      	ldr	r0, [r2, #0]
 8013856:	6158      	str	r0, [r3, #20]
 8013858:	6850      	ldr	r0, [r2, #4]
 801385a:	6198      	str	r0, [r3, #24]
 801385c:	6890      	ldr	r0, [r2, #8]
 801385e:	61d8      	str	r0, [r3, #28]
 8013860:	68d0      	ldr	r0, [r2, #12]
 8013862:	6218      	str	r0, [r3, #32]
 8013864:	7c10      	ldrb	r0, [r2, #16]
 8013866:	194b      	adds	r3, r1, r5
 8013868:	011a      	lsls	r2, r3, #4
 801386a:	18a3      	adds	r3, r4, r2
 801386c:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
 8013870:	e719      	b.n	80136a6 <nd6_get_next_hop_entry+0x2e>
          ip6_addr_set_any(&(destination_cache[nd6_cached_destination_index].destination_addr));
 8013872:	4b23      	ldr	r3, [pc, #140]	; (8013900 <nd6_get_next_hop_entry+0x288>)
 8013874:	781b      	ldrb	r3, [r3, #0]
 8013876:	4823      	ldr	r0, [pc, #140]	; (8013904 <nd6_get_next_hop_entry+0x28c>)
 8013878:	2130      	movs	r1, #48	; 0x30
 801387a:	fb01 f103 	mul.w	r1, r1, r3
 801387e:	1842      	adds	r2, r0, r1
 8013880:	2300      	movs	r3, #0
 8013882:	5043      	str	r3, [r0, r1]
 8013884:	6053      	str	r3, [r2, #4]
 8013886:	6093      	str	r3, [r2, #8]
 8013888:	60d3      	str	r3, [r2, #12]
 801388a:	7413      	strb	r3, [r2, #16]
          return ERR_RTE;
 801388c:	f06f 0003 	mvn.w	r0, #3
 8013890:	e735      	b.n	80136fe <nd6_get_next_hop_entry+0x86>
  if (ip6_addr_cmp(&(destination_cache[nd6_cached_destination_index].next_hop_addr),
 8013892:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013896:	0110      	lsls	r0, r2, #4
 8013898:	4a1a      	ldr	r2, [pc, #104]	; (8013904 <nd6_get_next_hop_entry+0x28c>)
 801389a:	4402      	add	r2, r0
 801389c:	6990      	ldr	r0, [r2, #24]
 801389e:	222c      	movs	r2, #44	; 0x2c
 80138a0:	fb02 4201 	mla	r2, r2, r1, r4
 80138a4:	6852      	ldr	r2, [r2, #4]
 80138a6:	4290      	cmp	r0, r2
 80138a8:	f47f af0f 	bne.w	80136ca <nd6_get_next_hop_entry+0x52>
 80138ac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80138b0:	0110      	lsls	r0, r2, #4
 80138b2:	4a14      	ldr	r2, [pc, #80]	; (8013904 <nd6_get_next_hop_entry+0x28c>)
 80138b4:	4402      	add	r2, r0
 80138b6:	69d0      	ldr	r0, [r2, #28]
 80138b8:	222c      	movs	r2, #44	; 0x2c
 80138ba:	fb02 4201 	mla	r2, r2, r1, r4
 80138be:	6892      	ldr	r2, [r2, #8]
 80138c0:	4290      	cmp	r0, r2
 80138c2:	f47f af02 	bne.w	80136ca <nd6_get_next_hop_entry+0x52>
 80138c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80138ca:	0110      	lsls	r0, r2, #4
 80138cc:	4a0d      	ldr	r2, [pc, #52]	; (8013904 <nd6_get_next_hop_entry+0x28c>)
 80138ce:	4402      	add	r2, r0
 80138d0:	6a10      	ldr	r0, [r2, #32]
 80138d2:	222c      	movs	r2, #44	; 0x2c
 80138d4:	fb02 4201 	mla	r2, r2, r1, r4
 80138d8:	68d2      	ldr	r2, [r2, #12]
 80138da:	4290      	cmp	r0, r2
 80138dc:	f47f aef5 	bne.w	80136ca <nd6_get_next_hop_entry+0x52>
 80138e0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80138e4:	0110      	lsls	r0, r2, #4
 80138e6:	4a07      	ldr	r2, [pc, #28]	; (8013904 <nd6_get_next_hop_entry+0x28c>)
 80138e8:	4402      	add	r2, r0
 80138ea:	f892 0024 	ldrb.w	r0, [r2, #36]	; 0x24
 80138ee:	4622      	mov	r2, r4
 80138f0:	242c      	movs	r4, #44	; 0x2c
 80138f2:	fb04 2101 	mla	r1, r4, r1, r2
 80138f6:	7c0a      	ldrb	r2, [r1, #16]
 80138f8:	4290      	cmp	r0, r2
 80138fa:	f47f aee6 	bne.w	80136ca <nd6_get_next_hop_entry+0x52>
 80138fe:	e6f2      	b.n	80136e6 <nd6_get_next_hop_entry+0x6e>
 8013900:	200018bc 	.word	0x200018bc
 8013904:	200088a4 	.word	0x200088a4
 8013908:	200018bd 	.word	0x200018bd
 801390c:	20008660 	.word	0x20008660
 8013910:	08018cbc 	.word	0x08018cbc
 8013914:	080185b0 	.word	0x080185b0
 8013918:	08015d2c 	.word	0x08015d2c
 801391c:	20008a84 	.word	0x20008a84
      i = nd6_new_neighbor_cache_entry();
 8013920:	f7ff fbce 	bl	80130c0 <nd6_new_neighbor_cache_entry>
      if (i >= 0) {
 8013924:	2800      	cmp	r0, #0
 8013926:	db2b      	blt.n	8013980 <nd6_get_next_hop_entry+0x308>
        nd6_cached_neighbor_index = i;
 8013928:	4b17      	ldr	r3, [pc, #92]	; (8013988 <nd6_get_next_hop_entry+0x310>)
 801392a:	7018      	strb	r0, [r3, #0]
      ip6_addr_copy(neighbor_cache[i].next_hop_address,
 801392c:	4b17      	ldr	r3, [pc, #92]	; (801398c <nd6_get_next_hop_entry+0x314>)
 801392e:	781f      	ldrb	r7, [r3, #0]
 8013930:	f8df c060 	ldr.w	ip, [pc, #96]	; 8013994 <nd6_get_next_hop_entry+0x31c>
 8013934:	007a      	lsls	r2, r7, #1
 8013936:	19d4      	adds	r4, r2, r7
 8013938:	0123      	lsls	r3, r4, #4
 801393a:	4463      	add	r3, ip
 801393c:	4d14      	ldr	r5, [pc, #80]	; (8013990 <nd6_get_next_hop_entry+0x318>)
 801393e:	242c      	movs	r4, #44	; 0x2c
 8013940:	fb04 f400 	mul.w	r4, r4, r0
 8013944:	1928      	adds	r0, r5, r4
 8013946:	6959      	ldr	r1, [r3, #20]
 8013948:	5129      	str	r1, [r5, r4]
 801394a:	699c      	ldr	r4, [r3, #24]
 801394c:	6044      	str	r4, [r0, #4]
 801394e:	69dc      	ldr	r4, [r3, #28]
 8013950:	6084      	str	r4, [r0, #8]
 8013952:	6a1b      	ldr	r3, [r3, #32]
 8013954:	60c3      	str	r3, [r0, #12]
 8013956:	19d3      	adds	r3, r2, r7
 8013958:	011a      	lsls	r2, r3, #4
 801395a:	eb0c 0102 	add.w	r1, ip, r2
 801395e:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 8013962:	7403      	strb	r3, [r0, #16]
      neighbor_cache[i].isrouter = 0;
 8013964:	2300      	movs	r3, #0
 8013966:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      neighbor_cache[i].netif = netif;
 801396a:	6146      	str	r6, [r0, #20]
      neighbor_cache[i].state = ND6_INCOMPLETE;
 801396c:	2101      	movs	r1, #1
 801396e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
      neighbor_cache[i].counter.probes_sent = 1;
 8013972:	6281      	str	r1, [r0, #40]	; 0x28
      nd6_send_neighbor_cache_probe(&neighbor_cache[i], ND6_SEND_FLAG_MULTICAST_DEST);
 8013974:	f7ff fdf8 	bl	8013568 <nd6_send_neighbor_cache_probe>
 8013978:	e6b5      	b.n	80136e6 <nd6_get_next_hop_entry+0x6e>
        return ERR_MEM;
 801397a:	f04f 30ff 	mov.w	r0, #4294967295
 801397e:	e6be      	b.n	80136fe <nd6_get_next_hop_entry+0x86>
        return ERR_MEM;
 8013980:	f04f 30ff 	mov.w	r0, #4294967295
 8013984:	e6bb      	b.n	80136fe <nd6_get_next_hop_entry+0x86>
 8013986:	bf00      	nop
 8013988:	200018bd 	.word	0x200018bd
 801398c:	200018bc 	.word	0x200018bc
 8013990:	20008660 	.word	0x20008660
 8013994:	200088a4 	.word	0x200088a4

08013998 <nd6_queue_packet>:
  if ((neighbor_index < 0) || (neighbor_index >= LWIP_ND6_NUM_NEIGHBORS)) {
 8013998:	b2c3      	uxtb	r3, r0
 801399a:	2b09      	cmp	r3, #9
 801399c:	d86d      	bhi.n	8013a7a <nd6_queue_packet+0xe2>
{
 801399e:	b570      	push	{r4, r5, r6, lr}
  p = q;
 80139a0:	460b      	mov	r3, r1
  while (p) {
 80139a2:	b133      	cbz	r3, 80139b2 <nd6_queue_packet+0x1a>
    if (PBUF_NEEDS_COPY(p)) {
 80139a4:	7b1c      	ldrb	r4, [r3, #12]
 80139a6:	f014 0f40 	tst.w	r4, #64	; 0x40
 80139aa:	d101      	bne.n	80139b0 <nd6_queue_packet+0x18>
    p = p->next;
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	e7f8      	b.n	80139a2 <nd6_queue_packet+0xa>
      copy_needed = 1;
 80139b0:	2301      	movs	r3, #1
 80139b2:	460e      	mov	r6, r1
 80139b4:	4604      	mov	r4, r0
  if (copy_needed) {
 80139b6:	b30b      	cbz	r3, 80139fc <nd6_queue_packet+0x64>
    p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80139b8:	460a      	mov	r2, r1
 80139ba:	f44f 7120 	mov.w	r1, #640	; 0x280
 80139be:	200e      	movs	r0, #14
 80139c0:	f7f5 fa0c 	bl	8008ddc <pbuf_clone>
 80139c4:	4605      	mov	r5, r0
    while ((p == NULL) && (neighbor_cache[neighbor_index].q != NULL)) {
 80139c6:	e010      	b.n	80139ea <nd6_queue_packet+0x52>
      neighbor_cache[neighbor_index].q = r->next;
 80139c8:	6802      	ldr	r2, [r0, #0]
 80139ca:	492f      	ldr	r1, [pc, #188]	; (8013a88 <nd6_queue_packet+0xf0>)
 80139cc:	232c      	movs	r3, #44	; 0x2c
 80139ce:	fb03 1304 	mla	r3, r3, r4, r1
 80139d2:	621a      	str	r2, [r3, #32]
      r->next = NULL;
 80139d4:	2300      	movs	r3, #0
 80139d6:	6003      	str	r3, [r0, #0]
      nd6_free_q(r);
 80139d8:	f7ff fb0e 	bl	8012ff8 <nd6_free_q>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80139dc:	4632      	mov	r2, r6
 80139de:	f44f 7120 	mov.w	r1, #640	; 0x280
 80139e2:	200e      	movs	r0, #14
 80139e4:	f7f5 f9fa 	bl	8008ddc <pbuf_clone>
 80139e8:	4605      	mov	r5, r0
    while ((p == NULL) && (neighbor_cache[neighbor_index].q != NULL)) {
 80139ea:	b95d      	cbnz	r5, 8013a04 <nd6_queue_packet+0x6c>
 80139ec:	4a26      	ldr	r2, [pc, #152]	; (8013a88 <nd6_queue_packet+0xf0>)
 80139ee:	232c      	movs	r3, #44	; 0x2c
 80139f0:	fb03 2304 	mla	r3, r3, r4, r2
 80139f4:	6a18      	ldr	r0, [r3, #32]
 80139f6:	2800      	cmp	r0, #0
 80139f8:	d1e6      	bne.n	80139c8 <nd6_queue_packet+0x30>
 80139fa:	e003      	b.n	8013a04 <nd6_queue_packet+0x6c>
    pbuf_ref(p);
 80139fc:	4608      	mov	r0, r1
 80139fe:	f7f5 f817 	bl	8008a30 <pbuf_ref>
    p = q;
 8013a02:	4635      	mov	r5, r6
  if (p != NULL) {
 8013a04:	2d00      	cmp	r5, #0
 8013a06:	d03b      	beq.n	8013a80 <nd6_queue_packet+0xe8>
    new_entry = (struct nd6_q_entry *)memp_malloc(MEMP_ND6_QUEUE);
 8013a08:	2007      	movs	r0, #7
 8013a0a:	f7f4 f9fb 	bl	8007e04 <memp_malloc>
    if ((new_entry == NULL) && (neighbor_cache[neighbor_index].q != NULL)) {
 8013a0e:	4601      	mov	r1, r0
 8013a10:	b180      	cbz	r0, 8013a34 <nd6_queue_packet+0x9c>
    if (new_entry != NULL) {
 8013a12:	b361      	cbz	r1, 8013a6e <nd6_queue_packet+0xd6>
      new_entry->next = NULL;
 8013a14:	2300      	movs	r3, #0
 8013a16:	600b      	str	r3, [r1, #0]
      new_entry->p = p;
 8013a18:	604d      	str	r5, [r1, #4]
      if (neighbor_cache[neighbor_index].q != NULL) {
 8013a1a:	4a1b      	ldr	r2, [pc, #108]	; (8013a88 <nd6_queue_packet+0xf0>)
 8013a1c:	232c      	movs	r3, #44	; 0x2c
 8013a1e:	fb03 2304 	mla	r3, r3, r4, r2
 8013a22:	6a1a      	ldr	r2, [r3, #32]
 8013a24:	b9ea      	cbnz	r2, 8013a62 <nd6_queue_packet+0xca>
        neighbor_cache[neighbor_index].q = new_entry;
 8013a26:	4b18      	ldr	r3, [pc, #96]	; (8013a88 <nd6_queue_packet+0xf0>)
 8013a28:	222c      	movs	r2, #44	; 0x2c
 8013a2a:	fb02 3404 	mla	r4, r2, r4, r3
 8013a2e:	6221      	str	r1, [r4, #32]
      result = ERR_OK;
 8013a30:	2000      	movs	r0, #0
 8013a32:	e01b      	b.n	8013a6c <nd6_queue_packet+0xd4>
    if ((new_entry == NULL) && (neighbor_cache[neighbor_index].q != NULL)) {
 8013a34:	4a14      	ldr	r2, [pc, #80]	; (8013a88 <nd6_queue_packet+0xf0>)
 8013a36:	232c      	movs	r3, #44	; 0x2c
 8013a38:	fb03 2304 	mla	r3, r3, r4, r2
 8013a3c:	6a18      	ldr	r0, [r3, #32]
 8013a3e:	2800      	cmp	r0, #0
 8013a40:	d0e7      	beq.n	8013a12 <nd6_queue_packet+0x7a>
      neighbor_cache[neighbor_index].q = r->next;
 8013a42:	6802      	ldr	r2, [r0, #0]
 8013a44:	4910      	ldr	r1, [pc, #64]	; (8013a88 <nd6_queue_packet+0xf0>)
 8013a46:	232c      	movs	r3, #44	; 0x2c
 8013a48:	fb03 1304 	mla	r3, r3, r4, r1
 8013a4c:	621a      	str	r2, [r3, #32]
      r->next = NULL;
 8013a4e:	2300      	movs	r3, #0
 8013a50:	6003      	str	r3, [r0, #0]
      nd6_free_q(r);
 8013a52:	f7ff fad1 	bl	8012ff8 <nd6_free_q>
      new_entry = (struct nd6_q_entry *)memp_malloc(MEMP_ND6_QUEUE);
 8013a56:	2007      	movs	r0, #7
 8013a58:	f7f4 f9d4 	bl	8007e04 <memp_malloc>
 8013a5c:	4601      	mov	r1, r0
 8013a5e:	e7d8      	b.n	8013a12 <nd6_queue_packet+0x7a>
          r = r->next;
 8013a60:	461a      	mov	r2, r3
        while (r->next != NULL) {
 8013a62:	6813      	ldr	r3, [r2, #0]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d1fb      	bne.n	8013a60 <nd6_queue_packet+0xc8>
        r->next = new_entry;
 8013a68:	6011      	str	r1, [r2, #0]
      result = ERR_OK;
 8013a6a:	2000      	movs	r0, #0
}
 8013a6c:	bd70      	pop	{r4, r5, r6, pc}
      pbuf_free(p);
 8013a6e:	4628      	mov	r0, r5
 8013a70:	f7f4 fe70 	bl	8008754 <pbuf_free>
  err_t result = ERR_MEM;
 8013a74:	f04f 30ff 	mov.w	r0, #4294967295
 8013a78:	e7f8      	b.n	8013a6c <nd6_queue_packet+0xd4>
    return ERR_ARG;
 8013a7a:	f06f 000f 	mvn.w	r0, #15
}
 8013a7e:	4770      	bx	lr
  err_t result = ERR_MEM;
 8013a80:	f04f 30ff 	mov.w	r0, #4294967295
 8013a84:	e7f2      	b.n	8013a6c <nd6_queue_packet+0xd4>
 8013a86:	bf00      	nop
 8013a88:	20008660 	.word	0x20008660

08013a8c <nd6_input>:
{
 8013a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a90:	b08b      	sub	sp, #44	; 0x2c
 8013a92:	4604      	mov	r4, r0
 8013a94:	460e      	mov	r6, r1
  msg_type = *((u8_t *)p->payload);
 8013a96:	6845      	ldr	r5, [r0, #4]
 8013a98:	782b      	ldrb	r3, [r5, #0]
  switch (msg_type) {
 8013a9a:	2b87      	cmp	r3, #135	; 0x87
 8013a9c:	f000 8139 	beq.w	8013d12 <nd6_input+0x286>
 8013aa0:	d81e      	bhi.n	8013ae0 <nd6_input+0x54>
 8013aa2:	2b02      	cmp	r3, #2
 8013aa4:	f000 8461 	beq.w	801436a <nd6_input+0x8de>
 8013aa8:	2b86      	cmp	r3, #134	; 0x86
 8013aaa:	f040 84a1 	bne.w	80143f0 <nd6_input+0x964>
    if (p->len < sizeof(struct ra_header)) {
 8013aae:	8943      	ldrh	r3, [r0, #10]
 8013ab0:	2b0f      	cmp	r3, #15
 8013ab2:	f240 8286 	bls.w	8013fc2 <nd6_input+0x536>
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 8013ab6:	4bb8      	ldr	r3, [pc, #736]	; (8013d98 <nd6_input+0x30c>)
 8013ab8:	695b      	ldr	r3, [r3, #20]
 8013aba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013abe:	041b      	lsls	r3, r3, #16
 8013ac0:	0c1b      	lsrs	r3, r3, #16
 8013ac2:	f248 02fe 	movw	r2, #33022	; 0x80fe
 8013ac6:	4293      	cmp	r3, r2
 8013ac8:	d105      	bne.n	8013ad6 <nd6_input+0x4a>
        IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ra_hdr->code != 0) {
 8013aca:	4bb3      	ldr	r3, [pc, #716]	; (8013d98 <nd6_input+0x30c>)
 8013acc:	68db      	ldr	r3, [r3, #12]
 8013ace:	79db      	ldrb	r3, [r3, #7]
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 8013ad0:	2bff      	cmp	r3, #255	; 0xff
 8013ad2:	f000 8279 	beq.w	8013fc8 <nd6_input+0x53c>
      pbuf_free(p);
 8013ad6:	4620      	mov	r0, r4
 8013ad8:	f7f4 fe3c 	bl	8008754 <pbuf_free>
      return;
 8013adc:	f000 bc8b 	b.w	80143f6 <nd6_input+0x96a>
  switch (msg_type) {
 8013ae0:	2b88      	cmp	r3, #136	; 0x88
 8013ae2:	d02e      	beq.n	8013b42 <nd6_input+0xb6>
 8013ae4:	2b89      	cmp	r3, #137	; 0x89
 8013ae6:	f040 8483 	bne.w	80143f0 <nd6_input+0x964>
    if (p->len < sizeof(struct redirect_header)) {
 8013aea:	8943      	ldrh	r3, [r0, #10]
 8013aec:	2b27      	cmp	r3, #39	; 0x27
 8013aee:	f240 838d 	bls.w	801420c <nd6_input+0x780>
    ip6_addr_copy_from_packed(destination_address, redir_hdr->destination_address);
 8013af2:	69aa      	ldr	r2, [r5, #24]
 8013af4:	9200      	str	r2, [sp, #0]
 8013af6:	69eb      	ldr	r3, [r5, #28]
 8013af8:	9301      	str	r3, [sp, #4]
 8013afa:	6a2b      	ldr	r3, [r5, #32]
 8013afc:	9302      	str	r3, [sp, #8]
 8013afe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013b00:	9303      	str	r3, [sp, #12]
    ip6_addr_assign_zone(&destination_address, IP6_UNICAST, inp);
 8013b02:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8013b06:	4011      	ands	r1, r2
 8013b08:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8013b0c:	4299      	cmp	r1, r3
 8013b0e:	f000 8380 	beq.w	8014212 <nd6_input+0x786>
 8013b12:	2300      	movs	r3, #0
 8013b14:	f88d 3010 	strb.w	r3, [sp, #16]
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 8013b18:	4b9f      	ldr	r3, [pc, #636]	; (8013d98 <nd6_input+0x30c>)
 8013b1a:	695b      	ldr	r3, [r3, #20]
 8013b1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013b20:	041b      	lsls	r3, r3, #16
 8013b22:	0c1b      	lsrs	r3, r3, #16
 8013b24:	f248 01fe 	movw	r1, #33022	; 0x80fe
 8013b28:	428b      	cmp	r3, r1
 8013b2a:	d105      	bne.n	8013b38 <nd6_input+0xac>
        IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM ||
 8013b2c:	4b9a      	ldr	r3, [pc, #616]	; (8013d98 <nd6_input+0x30c>)
 8013b2e:	68db      	ldr	r3, [r3, #12]
 8013b30:	79db      	ldrb	r3, [r3, #7]
    if (!ip6_addr_islinklocal(ip6_current_src_addr()) ||
 8013b32:	2bff      	cmp	r3, #255	; 0xff
 8013b34:	f000 8372 	beq.w	801421c <nd6_input+0x790>
      pbuf_free(p);
 8013b38:	4620      	mov	r0, r4
 8013b3a:	f7f4 fe0b 	bl	8008754 <pbuf_free>
      return;
 8013b3e:	f000 bc5a 	b.w	80143f6 <nd6_input+0x96a>
    if (p->len < (sizeof(struct na_header))) {
 8013b42:	8943      	ldrh	r3, [r0, #10]
 8013b44:	2b17      	cmp	r3, #23
 8013b46:	d94b      	bls.n	8013be0 <nd6_input+0x154>
    ip6_addr_copy_from_packed(target_address, na_hdr->target_address);
 8013b48:	68a8      	ldr	r0, [r5, #8]
 8013b4a:	9005      	str	r0, [sp, #20]
 8013b4c:	68ef      	ldr	r7, [r5, #12]
 8013b4e:	9706      	str	r7, [sp, #24]
 8013b50:	6929      	ldr	r1, [r5, #16]
 8013b52:	9107      	str	r1, [sp, #28]
 8013b54:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8013b58:	f8cd c020 	str.w	ip, [sp, #32]
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 8013b5c:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8013b60:	4002      	ands	r2, r0
 8013b62:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8013b66:	429a      	cmp	r2, r3
 8013b68:	d03e      	beq.n	8013be8 <nd6_input+0x15c>
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || na_hdr->code != 0 ||
 8013b70:	4a89      	ldr	r2, [pc, #548]	; (8013d98 <nd6_input+0x30c>)
 8013b72:	68d2      	ldr	r2, [r2, #12]
 8013b74:	79d2      	ldrb	r2, [r2, #7]
 8013b76:	2aff      	cmp	r2, #255	; 0xff
 8013b78:	d13b      	bne.n	8013bf2 <nd6_input+0x166>
 8013b7a:	786a      	ldrb	r2, [r5, #1]
 8013b7c:	2a00      	cmp	r2, #0
 8013b7e:	d138      	bne.n	8013bf2 <nd6_input+0x166>
        ip6_addr_ismulticast(&target_address)) {
 8013b80:	b2c2      	uxtb	r2, r0
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || na_hdr->code != 0 ||
 8013b82:	2aff      	cmp	r2, #255	; 0xff
 8013b84:	d035      	beq.n	8013bf2 <nd6_input+0x166>
    if (ip6_addr_ismulticast(ip6_current_dest_addr())) {
 8013b86:	4a84      	ldr	r2, [pc, #528]	; (8013d98 <nd6_input+0x30c>)
 8013b88:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8013b8c:	2aff      	cmp	r2, #255	; 0xff
 8013b8e:	d074      	beq.n	8013c7a <nd6_input+0x1ee>
      i = nd6_find_neighbor_cache_entry(&target_address);
 8013b90:	a805      	add	r0, sp, #20
 8013b92:	f7fe fe7d 	bl	8012890 <nd6_find_neighbor_cache_entry>
      if (i < 0) {
 8013b96:	1e07      	subs	r7, r0, #0
 8013b98:	f2c0 809a 	blt.w	8013cd0 <nd6_input+0x244>
      if ((na_hdr->flags & ND6_FLAG_OVERRIDE) ||
 8013b9c:	792b      	ldrb	r3, [r5, #4]
 8013b9e:	f013 0f20 	tst.w	r3, #32
 8013ba2:	f040 8099 	bne.w	8013cd8 <nd6_input+0x24c>
          (neighbor_cache[i].state == ND6_INCOMPLETE)) {
 8013ba6:	4a7d      	ldr	r2, [pc, #500]	; (8013d9c <nd6_input+0x310>)
 8013ba8:	232c      	movs	r3, #44	; 0x2c
 8013baa:	fb03 2307 	mla	r3, r3, r7, r2
 8013bae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if ((na_hdr->flags & ND6_FLAG_OVERRIDE) ||
 8013bb2:	2b01      	cmp	r3, #1
 8013bb4:	f000 8090 	beq.w	8013cd8 <nd6_input+0x24c>
      neighbor_cache[i].netif = inp;
 8013bb8:	4a78      	ldr	r2, [pc, #480]	; (8013d9c <nd6_input+0x310>)
 8013bba:	232c      	movs	r3, #44	; 0x2c
 8013bbc:	fb03 2307 	mla	r3, r3, r7, r2
 8013bc0:	615e      	str	r6, [r3, #20]
      neighbor_cache[i].state = ND6_REACHABLE;
 8013bc2:	2202      	movs	r2, #2
 8013bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      neighbor_cache[i].counter.reachable_time = reachable_time;
 8013bc8:	4a75      	ldr	r2, [pc, #468]	; (8013da0 <nd6_input+0x314>)
 8013bca:	6812      	ldr	r2, [r2, #0]
 8013bcc:	629a      	str	r2, [r3, #40]	; 0x28
      if (neighbor_cache[i].q != NULL) {
 8013bce:	6a1b      	ldr	r3, [r3, #32]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	f000 840d 	beq.w	80143f0 <nd6_input+0x964>
        nd6_send_q(i);
 8013bd6:	4638      	mov	r0, r7
 8013bd8:	f7ff f8a8 	bl	8012d2c <nd6_send_q>
 8013bdc:	f000 bc08 	b.w	80143f0 <nd6_input+0x964>
      pbuf_free(p);
 8013be0:	f7f4 fdb8 	bl	8008754 <pbuf_free>
      return;
 8013be4:	f000 bc07 	b.w	80143f6 <nd6_input+0x96a>
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 8013be8:	f896 30de 	ldrb.w	r3, [r6, #222]	; 0xde
 8013bec:	3301      	adds	r3, #1
 8013bee:	b2db      	uxtb	r3, r3
 8013bf0:	e7bc      	b.n	8013b6c <nd6_input+0xe0>
      pbuf_free(p);
 8013bf2:	4620      	mov	r0, r4
 8013bf4:	f7f4 fdae 	bl	8008754 <pbuf_free>
      return;
 8013bf8:	e3fd      	b.n	80143f6 <nd6_input+0x96a>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8013bfa:	3201      	adds	r2, #1
 8013bfc:	b252      	sxtb	r2, r2
 8013bfe:	2a02      	cmp	r2, #2
 8013c00:	dc3d      	bgt.n	8013c7e <nd6_input+0x1f2>
        if (!ip6_addr_isinvalid(netif_ip6_addr_state(inp, i)) &&
 8013c02:	eb06 0e02 	add.w	lr, r6, r2
 8013c06:	f89e e094 	ldrb.w	lr, [lr, #148]	; 0x94
 8013c0a:	f1be 0f00 	cmp.w	lr, #0
 8013c0e:	d0f4      	beq.n	8013bfa <nd6_input+0x16e>
 8013c10:	f1be 0f40 	cmp.w	lr, #64	; 0x40
 8013c14:	d0f1      	beq.n	8013bfa <nd6_input+0x16e>
            ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 8013c16:	eb02 0942 	add.w	r9, r2, r2, lsl #1
 8013c1a:	ea4f 0ec9 	mov.w	lr, r9, lsl #3
 8013c1e:	44b6      	add	lr, r6
 8013c20:	f8de e04c 	ldr.w	lr, [lr, #76]	; 0x4c
            !ip6_addr_isduplicated(netif_ip6_addr_state(inp, i)) &&
 8013c24:	4570      	cmp	r0, lr
 8013c26:	d1e8      	bne.n	8013bfa <nd6_input+0x16e>
            ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 8013c28:	eb02 0942 	add.w	r9, r2, r2, lsl #1
 8013c2c:	ea4f 0ec9 	mov.w	lr, r9, lsl #3
 8013c30:	44b6      	add	lr, r6
 8013c32:	f8de e050 	ldr.w	lr, [lr, #80]	; 0x50
 8013c36:	4577      	cmp	r7, lr
 8013c38:	d1df      	bne.n	8013bfa <nd6_input+0x16e>
 8013c3a:	f04f 0e18 	mov.w	lr, #24
 8013c3e:	fb0e 6e02 	mla	lr, lr, r2, r6
 8013c42:	f8de e054 	ldr.w	lr, [lr, #84]	; 0x54
 8013c46:	4571      	cmp	r1, lr
 8013c48:	d1d7      	bne.n	8013bfa <nd6_input+0x16e>
 8013c4a:	f04f 0e18 	mov.w	lr, #24
 8013c4e:	fb0e 6e02 	mla	lr, lr, r2, r6
 8013c52:	f8de e058 	ldr.w	lr, [lr, #88]	; 0x58
 8013c56:	45f4      	cmp	ip, lr
 8013c58:	d1cf      	bne.n	8013bfa <nd6_input+0x16e>
 8013c5a:	f04f 0e18 	mov.w	lr, #24
 8013c5e:	fb0e 6802 	mla	r8, lr, r2, r6
 8013c62:	f898 e05c 	ldrb.w	lr, [r8, #92]	; 0x5c
 8013c66:	459e      	cmp	lr, r3
 8013c68:	d1c7      	bne.n	8013bfa <nd6_input+0x16e>
          nd6_duplicate_addr_detected(inp, i);
 8013c6a:	4611      	mov	r1, r2
 8013c6c:	4630      	mov	r0, r6
 8013c6e:	f7ff f8b1 	bl	8012dd4 <nd6_duplicate_addr_detected>
          pbuf_free(p);
 8013c72:	4620      	mov	r0, r4
 8013c74:	f7f4 fd6e 	bl	8008754 <pbuf_free>
          return;
 8013c78:	e3bd      	b.n	80143f6 <nd6_input+0x96a>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	e7bf      	b.n	8013bfe <nd6_input+0x172>
      if (p->len < (sizeof(struct na_header) + 2)) {
 8013c7e:	8962      	ldrh	r2, [r4, #10]
 8013c80:	2a19      	cmp	r2, #25
 8013c82:	d91d      	bls.n	8013cc0 <nd6_input+0x234>
      lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct na_header));
 8013c84:	6867      	ldr	r7, [r4, #4]
      if (p->len < (sizeof(struct na_header) + (lladdr_opt->length << 3))) {
 8013c86:	7e7b      	ldrb	r3, [r7, #25]
 8013c88:	00db      	lsls	r3, r3, #3
 8013c8a:	3318      	adds	r3, #24
 8013c8c:	429a      	cmp	r2, r3
 8013c8e:	d31b      	bcc.n	8013cc8 <nd6_input+0x23c>
      i = nd6_find_neighbor_cache_entry(&target_address);
 8013c90:	a805      	add	r0, sp, #20
 8013c92:	f7fe fdfd 	bl	8012890 <nd6_find_neighbor_cache_entry>
      if (i >= 0) {
 8013c96:	2800      	cmp	r0, #0
 8013c98:	f2c0 83aa 	blt.w	80143f0 <nd6_input+0x964>
        if (na_hdr->flags & ND6_FLAG_OVERRIDE) {
 8013c9c:	792b      	ldrb	r3, [r5, #4]
 8013c9e:	f013 0f20 	tst.w	r3, #32
 8013ca2:	f000 83a5 	beq.w	80143f0 <nd6_input+0x964>
          MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 8013ca6:	232c      	movs	r3, #44	; 0x2c
 8013ca8:	fb03 f300 	mul.w	r3, r3, r0
 8013cac:	3318      	adds	r3, #24
 8013cae:	f896 20da 	ldrb.w	r2, [r6, #218]	; 0xda
 8013cb2:	f107 011a 	add.w	r1, r7, #26
 8013cb6:	4839      	ldr	r0, [pc, #228]	; (8013d9c <nd6_input+0x310>)
 8013cb8:	4418      	add	r0, r3
 8013cba:	f001 f896 	bl	8014dea <memcpy>
 8013cbe:	e397      	b.n	80143f0 <nd6_input+0x964>
        pbuf_free(p);
 8013cc0:	4620      	mov	r0, r4
 8013cc2:	f7f4 fd47 	bl	8008754 <pbuf_free>
        return;
 8013cc6:	e396      	b.n	80143f6 <nd6_input+0x96a>
        pbuf_free(p);
 8013cc8:	4620      	mov	r0, r4
 8013cca:	f7f4 fd43 	bl	8008754 <pbuf_free>
        return;
 8013cce:	e392      	b.n	80143f6 <nd6_input+0x96a>
        pbuf_free(p);
 8013cd0:	4620      	mov	r0, r4
 8013cd2:	f7f4 fd3f 	bl	8008754 <pbuf_free>
        return;
 8013cd6:	e38e      	b.n	80143f6 <nd6_input+0x96a>
        if (p->len < (sizeof(struct na_header) + 2)) {
 8013cd8:	8962      	ldrh	r2, [r4, #10]
 8013cda:	2a19      	cmp	r2, #25
 8013cdc:	d909      	bls.n	8013cf2 <nd6_input+0x266>
        lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct na_header));
 8013cde:	6861      	ldr	r1, [r4, #4]
        if (p->len < (sizeof(struct na_header) + (lladdr_opt->length << 3))) {
 8013ce0:	7e4b      	ldrb	r3, [r1, #25]
 8013ce2:	00db      	lsls	r3, r3, #3
 8013ce4:	3318      	adds	r3, #24
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d207      	bcs.n	8013cfa <nd6_input+0x26e>
          pbuf_free(p);
 8013cea:	4620      	mov	r0, r4
 8013cec:	f7f4 fd32 	bl	8008754 <pbuf_free>
          return;
 8013cf0:	e381      	b.n	80143f6 <nd6_input+0x96a>
          pbuf_free(p);
 8013cf2:	4620      	mov	r0, r4
 8013cf4:	f7f4 fd2e 	bl	8008754 <pbuf_free>
          return;
 8013cf8:	e37d      	b.n	80143f6 <nd6_input+0x96a>
        MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 8013cfa:	232c      	movs	r3, #44	; 0x2c
 8013cfc:	fb03 f307 	mul.w	r3, r3, r7
 8013d00:	3318      	adds	r3, #24
 8013d02:	f896 20da 	ldrb.w	r2, [r6, #218]	; 0xda
 8013d06:	311a      	adds	r1, #26
 8013d08:	4824      	ldr	r0, [pc, #144]	; (8013d9c <nd6_input+0x310>)
 8013d0a:	4418      	add	r0, r3
 8013d0c:	f001 f86d 	bl	8014dea <memcpy>
 8013d10:	e752      	b.n	8013bb8 <nd6_input+0x12c>
    if (p->len < sizeof(struct ns_header)) {
 8013d12:	8943      	ldrh	r3, [r0, #10]
 8013d14:	2b17      	cmp	r3, #23
 8013d16:	d92f      	bls.n	8013d78 <nd6_input+0x2ec>
    ip6_addr_copy_from_packed(target_address, ns_hdr->target_address);
 8013d18:	68aa      	ldr	r2, [r5, #8]
 8013d1a:	9205      	str	r2, [sp, #20]
 8013d1c:	68e8      	ldr	r0, [r5, #12]
 8013d1e:	9006      	str	r0, [sp, #24]
 8013d20:	692f      	ldr	r7, [r5, #16]
 8013d22:	9707      	str	r7, [sp, #28]
 8013d24:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8013d28:	f8cd c020 	str.w	ip, [sp, #32]
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 8013d2c:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8013d30:	4011      	ands	r1, r2
 8013d32:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8013d36:	4299      	cmp	r1, r3
 8013d38:	d021      	beq.n	8013d7e <nd6_input+0x2f2>
 8013d3a:	2100      	movs	r1, #0
 8013d3c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ns_hdr->code != 0 ||
 8013d40:	4b15      	ldr	r3, [pc, #84]	; (8013d98 <nd6_input+0x30c>)
 8013d42:	68db      	ldr	r3, [r3, #12]
 8013d44:	79db      	ldrb	r3, [r3, #7]
 8013d46:	2bff      	cmp	r3, #255	; 0xff
 8013d48:	d11e      	bne.n	8013d88 <nd6_input+0x2fc>
 8013d4a:	f895 9001 	ldrb.w	r9, [r5, #1]
 8013d4e:	f1b9 0f00 	cmp.w	r9, #0
 8013d52:	d119      	bne.n	8013d88 <nd6_input+0x2fc>
       ip6_addr_ismulticast(&target_address)) {
 8013d54:	b2d3      	uxtb	r3, r2
    if (IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ns_hdr->code != 0 ||
 8013d56:	2bff      	cmp	r3, #255	; 0xff
 8013d58:	d016      	beq.n	8013d88 <nd6_input+0x2fc>
    if (p->len >= (sizeof(struct ns_header) + 2)) {
 8013d5a:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
 8013d5e:	f1be 0f19 	cmp.w	lr, #25
 8013d62:	d915      	bls.n	8013d90 <nd6_input+0x304>
      lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct ns_header));
 8013d64:	6863      	ldr	r3, [r4, #4]
 8013d66:	f103 0518 	add.w	r5, r3, #24
      if (p->len < (sizeof(struct ns_header) + (lladdr_opt->length << 3))) {
 8013d6a:	7e5b      	ldrb	r3, [r3, #25]
 8013d6c:	00db      	lsls	r3, r3, #3
 8013d6e:	3318      	adds	r3, #24
 8013d70:	459e      	cmp	lr, r3
 8013d72:	d20e      	bcs.n	8013d92 <nd6_input+0x306>
        lladdr_opt = NULL;
 8013d74:	2500      	movs	r5, #0
 8013d76:	e00c      	b.n	8013d92 <nd6_input+0x306>
      pbuf_free(p);
 8013d78:	f7f4 fcec 	bl	8008754 <pbuf_free>
      return;
 8013d7c:	e33b      	b.n	80143f6 <nd6_input+0x96a>
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 8013d7e:	f896 10de 	ldrb.w	r1, [r6, #222]	; 0xde
 8013d82:	3101      	adds	r1, #1
 8013d84:	b2c9      	uxtb	r1, r1
 8013d86:	e7d9      	b.n	8013d3c <nd6_input+0x2b0>
      pbuf_free(p);
 8013d88:	4620      	mov	r0, r4
 8013d8a:	f7f4 fce3 	bl	8008754 <pbuf_free>
      return;
 8013d8e:	e332      	b.n	80143f6 <nd6_input+0x96a>
      lladdr_opt = NULL;
 8013d90:	2500      	movs	r5, #0
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 8013d92:	2300      	movs	r3, #0
 8013d94:	e011      	b.n	8013dba <nd6_input+0x32e>
 8013d96:	bf00      	nop
 8013d98:	20004bac 	.word	0x20004bac
 8013d9c:	20008660 	.word	0x20008660
 8013da0:	20000018 	.word	0x20000018
          ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 8013da4:	eb08 0a48 	add.w	sl, r8, r8, lsl #1
 8013da8:	ea4f 0eca 	mov.w	lr, sl, lsl #3
 8013dac:	44b6      	add	lr, r6
 8013dae:	f8de e04c 	ldr.w	lr, [lr, #76]	; 0x4c
            ip6_addr_isany(ip6_current_src_addr()))) &&
 8013db2:	4572      	cmp	r2, lr
 8013db4:	d02b      	beq.n	8013e0e <nd6_input+0x382>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 8013db6:	3301      	adds	r3, #1
 8013db8:	b25b      	sxtb	r3, r3
 8013dba:	2b02      	cmp	r3, #2
 8013dbc:	dc4c      	bgt.n	8013e58 <nd6_input+0x3cc>
      if ((ip6_addr_isvalid(netif_ip6_addr_state(inp, i)) ||
 8013dbe:	4698      	mov	r8, r3
 8013dc0:	eb06 0e03 	add.w	lr, r6, r3
 8013dc4:	f89e e094 	ldrb.w	lr, [lr, #148]	; 0x94
 8013dc8:	f01e 0f10 	tst.w	lr, #16
 8013dcc:	d1ea      	bne.n	8013da4 <nd6_input+0x318>
 8013dce:	f01e 0f08 	tst.w	lr, #8
 8013dd2:	d0f0      	beq.n	8013db6 <nd6_input+0x32a>
            ip6_addr_isany(ip6_current_src_addr()))) &&
 8013dd4:	f8df e370 	ldr.w	lr, [pc, #880]	; 8014148 <nd6_input+0x6bc>
 8013dd8:	f8de e014 	ldr.w	lr, [lr, #20]
           (ip6_addr_istentative(netif_ip6_addr_state(inp, i)) &&
 8013ddc:	f1be 0f00 	cmp.w	lr, #0
 8013de0:	d1e9      	bne.n	8013db6 <nd6_input+0x32a>
            ip6_addr_isany(ip6_current_src_addr()))) &&
 8013de2:	f8df e364 	ldr.w	lr, [pc, #868]	; 8014148 <nd6_input+0x6bc>
 8013de6:	f8de e018 	ldr.w	lr, [lr, #24]
 8013dea:	f1be 0f00 	cmp.w	lr, #0
 8013dee:	d1e2      	bne.n	8013db6 <nd6_input+0x32a>
 8013df0:	f8df e354 	ldr.w	lr, [pc, #852]	; 8014148 <nd6_input+0x6bc>
 8013df4:	f8de e01c 	ldr.w	lr, [lr, #28]
 8013df8:	f1be 0f00 	cmp.w	lr, #0
 8013dfc:	d1db      	bne.n	8013db6 <nd6_input+0x32a>
 8013dfe:	f8df e348 	ldr.w	lr, [pc, #840]	; 8014148 <nd6_input+0x6bc>
 8013e02:	f8de e020 	ldr.w	lr, [lr, #32]
 8013e06:	f1be 0f00 	cmp.w	lr, #0
 8013e0a:	d1d4      	bne.n	8013db6 <nd6_input+0x32a>
 8013e0c:	e7ca      	b.n	8013da4 <nd6_input+0x318>
          ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 8013e0e:	eb08 0a48 	add.w	sl, r8, r8, lsl #1
 8013e12:	ea4f 0eca 	mov.w	lr, sl, lsl #3
 8013e16:	44b6      	add	lr, r6
 8013e18:	f8de e050 	ldr.w	lr, [lr, #80]	; 0x50
 8013e1c:	4570      	cmp	r0, lr
 8013e1e:	d1ca      	bne.n	8013db6 <nd6_input+0x32a>
 8013e20:	eb08 0a48 	add.w	sl, r8, r8, lsl #1
 8013e24:	ea4f 0eca 	mov.w	lr, sl, lsl #3
 8013e28:	44b6      	add	lr, r6
 8013e2a:	f8de e054 	ldr.w	lr, [lr, #84]	; 0x54
 8013e2e:	4577      	cmp	r7, lr
 8013e30:	d1c1      	bne.n	8013db6 <nd6_input+0x32a>
 8013e32:	eb08 0a48 	add.w	sl, r8, r8, lsl #1
 8013e36:	ea4f 0eca 	mov.w	lr, sl, lsl #3
 8013e3a:	44b6      	add	lr, r6
 8013e3c:	f8de e058 	ldr.w	lr, [lr, #88]	; 0x58
 8013e40:	45f4      	cmp	ip, lr
 8013e42:	d1b8      	bne.n	8013db6 <nd6_input+0x32a>
 8013e44:	f04f 0e18 	mov.w	lr, #24
 8013e48:	fb0e 6808 	mla	r8, lr, r8, r6
 8013e4c:	f898 e05c 	ldrb.w	lr, [r8, #92]	; 0x5c
 8013e50:	458e      	cmp	lr, r1
 8013e52:	d1b0      	bne.n	8013db6 <nd6_input+0x32a>
        accepted = 1;
 8013e54:	f04f 0901 	mov.w	r9, #1
    if (!accepted) {
 8013e58:	f1b9 0f00 	cmp.w	r9, #0
 8013e5c:	d021      	beq.n	8013ea2 <nd6_input+0x416>
    if (ip6_addr_isany(ip6_current_src_addr())) {
 8013e5e:	4bba      	ldr	r3, [pc, #744]	; (8014148 <nd6_input+0x6bc>)
 8013e60:	695b      	ldr	r3, [r3, #20]
 8013e62:	b94b      	cbnz	r3, 8013e78 <nd6_input+0x3ec>
 8013e64:	4bb8      	ldr	r3, [pc, #736]	; (8014148 <nd6_input+0x6bc>)
 8013e66:	699b      	ldr	r3, [r3, #24]
 8013e68:	b933      	cbnz	r3, 8013e78 <nd6_input+0x3ec>
 8013e6a:	4bb7      	ldr	r3, [pc, #732]	; (8014148 <nd6_input+0x6bc>)
 8013e6c:	69db      	ldr	r3, [r3, #28]
 8013e6e:	b91b      	cbnz	r3, 8013e78 <nd6_input+0x3ec>
 8013e70:	4bb5      	ldr	r3, [pc, #724]	; (8014148 <nd6_input+0x6bc>)
 8013e72:	6a1b      	ldr	r3, [r3, #32]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d05e      	beq.n	8013f36 <nd6_input+0x4aa>
      if (lladdr_opt == NULL) {
 8013e78:	2d00      	cmp	r5, #0
 8013e7a:	d05e      	beq.n	8013f3a <nd6_input+0x4ae>
      i = nd6_find_neighbor_cache_entry(ip6_current_src_addr());
 8013e7c:	48b3      	ldr	r0, [pc, #716]	; (801414c <nd6_input+0x6c0>)
 8013e7e:	f7fe fd07 	bl	8012890 <nd6_find_neighbor_cache_entry>
      if (i>= 0) {
 8013e82:	1e02      	subs	r2, r0, #0
 8013e84:	db71      	blt.n	8013f6a <nd6_input+0x4de>
        if (neighbor_cache[i].state == ND6_INCOMPLETE) {
 8013e86:	49b2      	ldr	r1, [pc, #712]	; (8014150 <nd6_input+0x6c4>)
 8013e88:	232c      	movs	r3, #44	; 0x2c
 8013e8a:	fb03 1302 	mla	r3, r3, r2, r1
 8013e8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013e92:	2b01      	cmp	r3, #1
 8013e94:	d055      	beq.n	8013f42 <nd6_input+0x4b6>
      nd6_send_na(inp, &target_address, ND6_FLAG_SOLICITED | ND6_FLAG_OVERRIDE);
 8013e96:	2260      	movs	r2, #96	; 0x60
 8013e98:	a905      	add	r1, sp, #20
 8013e9a:	4630      	mov	r0, r6
 8013e9c:	f7ff f9f0 	bl	8013280 <nd6_send_na>
 8013ea0:	e2a6      	b.n	80143f0 <nd6_input+0x964>
      pbuf_free(p);
 8013ea2:	4620      	mov	r0, r4
 8013ea4:	f7f4 fc56 	bl	8008754 <pbuf_free>
      return;
 8013ea8:	e2a5      	b.n	80143f6 <nd6_input+0x96a>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 8013eaa:	3501      	adds	r5, #1
 8013eac:	b26d      	sxtb	r5, r5
 8013eae:	2d02      	cmp	r5, #2
 8013eb0:	f300 829e 	bgt.w	80143f0 <nd6_input+0x964>
        if (!ip6_addr_isinvalid(netif_ip6_addr_state(inp, i)) &&
 8013eb4:	462f      	mov	r7, r5
 8013eb6:	1973      	adds	r3, r6, r5
 8013eb8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d0f4      	beq.n	8013eaa <nd6_input+0x41e>
            ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 8013ec0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8013ec4:	00d3      	lsls	r3, r2, #3
 8013ec6:	4433      	add	r3, r6
 8013ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        if (!ip6_addr_isinvalid(netif_ip6_addr_state(inp, i)) &&
 8013eca:	9a05      	ldr	r2, [sp, #20]
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	d1ec      	bne.n	8013eaa <nd6_input+0x41e>
            ip6_addr_cmp(&target_address, netif_ip6_addr(inp, i))) {
 8013ed0:	2318      	movs	r3, #24
 8013ed2:	fb03 6305 	mla	r3, r3, r5, r6
 8013ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ed8:	9a06      	ldr	r2, [sp, #24]
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d1e5      	bne.n	8013eaa <nd6_input+0x41e>
 8013ede:	2318      	movs	r3, #24
 8013ee0:	fb03 6305 	mla	r3, r3, r5, r6
 8013ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ee6:	9a07      	ldr	r2, [sp, #28]
 8013ee8:	429a      	cmp	r2, r3
 8013eea:	d1de      	bne.n	8013eaa <nd6_input+0x41e>
 8013eec:	2318      	movs	r3, #24
 8013eee:	fb03 6305 	mla	r3, r3, r5, r6
 8013ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ef4:	9a08      	ldr	r2, [sp, #32]
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	d1d7      	bne.n	8013eaa <nd6_input+0x41e>
 8013efa:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 8013efe:	2318      	movs	r3, #24
 8013f00:	fb03 6305 	mla	r3, r3, r5, r6
 8013f04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8013f08:	429a      	cmp	r2, r3
 8013f0a:	d1ce      	bne.n	8013eaa <nd6_input+0x41e>
          nd6_send_na(inp, netif_ip6_addr(inp, i), ND6_FLAG_OVERRIDE | ND6_SEND_FLAG_ALLNODES_DEST);
 8013f0c:	2118      	movs	r1, #24
 8013f0e:	fb01 f105 	mul.w	r1, r1, r5
 8013f12:	3148      	adds	r1, #72	; 0x48
 8013f14:	4431      	add	r1, r6
 8013f16:	2222      	movs	r2, #34	; 0x22
 8013f18:	3104      	adds	r1, #4
 8013f1a:	4630      	mov	r0, r6
 8013f1c:	f7ff f9b0 	bl	8013280 <nd6_send_na>
          if (ip6_addr_istentative(netif_ip6_addr_state(inp, i))) {
 8013f20:	4437      	add	r7, r6
 8013f22:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8013f26:	f013 0f08 	tst.w	r3, #8
 8013f2a:	d0be      	beq.n	8013eaa <nd6_input+0x41e>
            nd6_duplicate_addr_detected(inp, i);
 8013f2c:	4629      	mov	r1, r5
 8013f2e:	4630      	mov	r0, r6
 8013f30:	f7fe ff50 	bl	8012dd4 <nd6_duplicate_addr_detected>
 8013f34:	e7b9      	b.n	8013eaa <nd6_input+0x41e>
      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 8013f36:	2500      	movs	r5, #0
 8013f38:	e7b9      	b.n	8013eae <nd6_input+0x422>
        pbuf_free(p);
 8013f3a:	4620      	mov	r0, r4
 8013f3c:	f7f4 fc0a 	bl	8008754 <pbuf_free>
        return;
 8013f40:	e259      	b.n	80143f6 <nd6_input+0x96a>
          neighbor_cache[i].netif = inp;
 8013f42:	4608      	mov	r0, r1
 8013f44:	232c      	movs	r3, #44	; 0x2c
 8013f46:	fb03 f202 	mul.w	r2, r3, r2
 8013f4a:	188f      	adds	r7, r1, r2
 8013f4c:	617e      	str	r6, [r7, #20]
          MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 8013f4e:	f102 0318 	add.w	r3, r2, #24
 8013f52:	f896 20da 	ldrb.w	r2, [r6, #218]	; 0xda
 8013f56:	1ca9      	adds	r1, r5, #2
 8013f58:	4418      	add	r0, r3
 8013f5a:	f000 ff46 	bl	8014dea <memcpy>
          neighbor_cache[i].state = ND6_DELAY;
 8013f5e:	2304      	movs	r3, #4
 8013f60:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
          neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 8013f64:	2305      	movs	r3, #5
 8013f66:	62bb      	str	r3, [r7, #40]	; 0x28
 8013f68:	e795      	b.n	8013e96 <nd6_input+0x40a>
        i = nd6_new_neighbor_cache_entry();
 8013f6a:	f7ff f8a9 	bl	80130c0 <nd6_new_neighbor_cache_entry>
        if (i < 0) {
 8013f6e:	2800      	cmp	r0, #0
 8013f70:	db23      	blt.n	8013fba <nd6_input+0x52e>
        neighbor_cache[i].netif = inp;
 8013f72:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8014150 <nd6_input+0x6c4>
 8013f76:	f04f 082c 	mov.w	r8, #44	; 0x2c
 8013f7a:	fb08 f800 	mul.w	r8, r8, r0
 8013f7e:	eb09 0708 	add.w	r7, r9, r8
 8013f82:	617e      	str	r6, [r7, #20]
        MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 8013f84:	f108 0018 	add.w	r0, r8, #24
 8013f88:	f896 20da 	ldrb.w	r2, [r6, #218]	; 0xda
 8013f8c:	1ca9      	adds	r1, r5, #2
 8013f8e:	4448      	add	r0, r9
 8013f90:	f000 ff2b 	bl	8014dea <memcpy>
        ip6_addr_set(&(neighbor_cache[i].next_hop_address), ip6_current_src_addr());
 8013f94:	4b6c      	ldr	r3, [pc, #432]	; (8014148 <nd6_input+0x6bc>)
 8013f96:	695a      	ldr	r2, [r3, #20]
 8013f98:	f849 2008 	str.w	r2, [r9, r8]
 8013f9c:	699a      	ldr	r2, [r3, #24]
 8013f9e:	607a      	str	r2, [r7, #4]
 8013fa0:	69da      	ldr	r2, [r3, #28]
 8013fa2:	60ba      	str	r2, [r7, #8]
 8013fa4:	6a1a      	ldr	r2, [r3, #32]
 8013fa6:	60fa      	str	r2, [r7, #12]
 8013fa8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013fac:	743b      	strb	r3, [r7, #16]
        neighbor_cache[i].state = ND6_DELAY;
 8013fae:	2304      	movs	r3, #4
 8013fb0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 8013fb4:	2305      	movs	r3, #5
 8013fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8013fb8:	e76d      	b.n	8013e96 <nd6_input+0x40a>
          pbuf_free(p);
 8013fba:	4620      	mov	r0, r4
 8013fbc:	f7f4 fbca 	bl	8008754 <pbuf_free>
          return;
 8013fc0:	e219      	b.n	80143f6 <nd6_input+0x96a>
      pbuf_free(p);
 8013fc2:	f7f4 fbc7 	bl	8008754 <pbuf_free>
      return;
 8013fc6:	e216      	b.n	80143f6 <nd6_input+0x96a>
        IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM || ra_hdr->code != 0) {
 8013fc8:	f895 a001 	ldrb.w	sl, [r5, #1]
 8013fcc:	f1ba 0f00 	cmp.w	sl, #0
 8013fd0:	f47f ad81 	bne.w	8013ad6 <nd6_input+0x4a>
    if ((inp->rs_count < LWIP_ND6_MAX_MULTICAST_SOLICIT) ||
 8013fd4:	f891 30e0 	ldrb.w	r3, [r1, #224]	; 0xe0
 8013fd8:	2b02      	cmp	r3, #2
 8013fda:	d821      	bhi.n	8014020 <nd6_input+0x594>
      inp->rs_count = 0;
 8013fdc:	2300      	movs	r3, #0
 8013fde:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
    i = nd6_get_router(ip6_current_src_addr(), inp);
 8013fe2:	4631      	mov	r1, r6
 8013fe4:	4859      	ldr	r0, [pc, #356]	; (801414c <nd6_input+0x6c0>)
 8013fe6:	f7fe fddb 	bl	8012ba0 <nd6_get_router>
    if (i < 0) {
 8013fea:	1e07      	subs	r7, r0, #0
 8013fec:	db21      	blt.n	8014032 <nd6_input+0x5a6>
    if (i < 0) {
 8013fee:	2f00      	cmp	r7, #0
 8013ff0:	db25      	blt.n	801403e <nd6_input+0x5b2>
    default_router_list[i].invalidation_timer = lwip_htons(ra_hdr->router_lifetime);
 8013ff2:	88e8      	ldrh	r0, [r5, #6]
 8013ff4:	f7f3 f8ec 	bl	80071d0 <lwip_htons>
 8013ff8:	46b9      	mov	r9, r7
 8013ffa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013ffe:	00ba      	lsls	r2, r7, #2
 8014000:	4b54      	ldr	r3, [pc, #336]	; (8014154 <nd6_input+0x6c8>)
 8014002:	4413      	add	r3, r2
 8014004:	6058      	str	r0, [r3, #4]
    if (ra_hdr->retrans_timer > 0) {
 8014006:	68e8      	ldr	r0, [r5, #12]
 8014008:	b9e8      	cbnz	r0, 8014046 <nd6_input+0x5ba>
    if (ra_hdr->reachable_time > 0) {
 801400a:	68a8      	ldr	r0, [r5, #8]
 801400c:	bb00      	cbnz	r0, 8014050 <nd6_input+0x5c4>
    default_router_list[i].flags = ra_hdr->flags;
 801400e:	7969      	ldrb	r1, [r5, #5]
 8014010:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8014014:	009a      	lsls	r2, r3, #2
 8014016:	4b4f      	ldr	r3, [pc, #316]	; (8014154 <nd6_input+0x6c8>)
 8014018:	4413      	add	r3, r2
 801401a:	7219      	strb	r1, [r3, #8]
    offset = sizeof(struct ra_header);
 801401c:	2710      	movs	r7, #16
    while ((p->tot_len - offset) >= 2) {
 801401e:	e033      	b.n	8014088 <nd6_input+0x5fc>
        (nd6_send_rs(inp) == ERR_OK)) {
 8014020:	4608      	mov	r0, r1
 8014022:	f7ff f9b3 	bl	801338c <nd6_send_rs>
    if ((inp->rs_count < LWIP_ND6_MAX_MULTICAST_SOLICIT) ||
 8014026:	2800      	cmp	r0, #0
 8014028:	d0d8      	beq.n	8013fdc <nd6_input+0x550>
      inp->rs_count = 1;
 801402a:	2301      	movs	r3, #1
 801402c:	f886 30e0 	strb.w	r3, [r6, #224]	; 0xe0
 8014030:	e7d7      	b.n	8013fe2 <nd6_input+0x556>
      i = nd6_new_router(ip6_current_src_addr(), inp);
 8014032:	4631      	mov	r1, r6
 8014034:	4845      	ldr	r0, [pc, #276]	; (801414c <nd6_input+0x6c0>)
 8014036:	f7ff fa9f 	bl	8013578 <nd6_new_router>
 801403a:	4607      	mov	r7, r0
 801403c:	e7d7      	b.n	8013fee <nd6_input+0x562>
      pbuf_free(p);
 801403e:	4620      	mov	r0, r4
 8014040:	f7f4 fb88 	bl	8008754 <pbuf_free>
      return;
 8014044:	e1d7      	b.n	80143f6 <nd6_input+0x96a>
      retrans_timer = lwip_htonl(ra_hdr->retrans_timer);
 8014046:	f7f3 f8c8 	bl	80071da <lwip_htonl>
 801404a:	4b43      	ldr	r3, [pc, #268]	; (8014158 <nd6_input+0x6cc>)
 801404c:	6018      	str	r0, [r3, #0]
 801404e:	e7dc      	b.n	801400a <nd6_input+0x57e>
      reachable_time = lwip_htonl(ra_hdr->reachable_time);
 8014050:	f7f3 f8c3 	bl	80071da <lwip_htonl>
 8014054:	4b41      	ldr	r3, [pc, #260]	; (801415c <nd6_input+0x6d0>)
 8014056:	6018      	str	r0, [r3, #0]
 8014058:	e7d9      	b.n	801400e <nd6_input+0x582>
        buffer = &((u8_t*)p->payload)[offset];
 801405a:	6863      	ldr	r3, [r4, #4]
 801405c:	eb03 0807 	add.w	r8, r3, r7
 8014060:	e007      	b.n	8014072 <nd6_input+0x5e6>
        option_len = pbuf_copy_partial(p, &nd6_ra_buffer, option_len, offset);
 8014062:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8014160 <nd6_input+0x6d4>
 8014066:	463b      	mov	r3, r7
 8014068:	4641      	mov	r1, r8
 801406a:	4620      	mov	r0, r4
 801406c:	f7f4 fdca 	bl	8008c04 <pbuf_copy_partial>
 8014070:	4602      	mov	r2, r0
      option_type = buffer[0];
 8014072:	f898 3000 	ldrb.w	r3, [r8]
      switch (option_type) {
 8014076:	2b03      	cmp	r3, #3
 8014078:	d074      	beq.n	8014164 <nd6_input+0x6d8>
 801407a:	2b05      	cmp	r3, #5
 801407c:	d04a      	beq.n	8014114 <nd6_input+0x688>
 801407e:	2b01      	cmp	r3, #1
 8014080:	d026      	beq.n	80140d0 <nd6_input+0x644>
      offset += 8 * (u8_t)option_len8;
 8014082:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
 8014086:	b2bf      	uxth	r7, r7
    while ((p->tot_len - offset) >= 2) {
 8014088:	8923      	ldrh	r3, [r4, #8]
 801408a:	46b8      	mov	r8, r7
 801408c:	1bdb      	subs	r3, r3, r7
 801408e:	2b01      	cmp	r3, #1
 8014090:	f340 81ae 	ble.w	80143f0 <nd6_input+0x964>
      int option_len8 = pbuf_try_get_at(p, offset + 1);
 8014094:	1c79      	adds	r1, r7, #1
 8014096:	b289      	uxth	r1, r1
 8014098:	4620      	mov	r0, r4
 801409a:	f7f4 febb 	bl	8008e14 <pbuf_try_get_at>
      if (option_len8 <= 0) {
 801409e:	2800      	cmp	r0, #0
 80140a0:	f340 81ac 	ble.w	80143fc <nd6_input+0x970>
      option_len = ((u8_t)option_len8) << 3;
 80140a4:	b2c5      	uxtb	r5, r0
 80140a6:	00ea      	lsls	r2, r5, #3
      if (option_len > p->tot_len - offset) {
 80140a8:	8923      	ldrh	r3, [r4, #8]
 80140aa:	eba3 0808 	sub.w	r8, r3, r8
 80140ae:	4542      	cmp	r2, r8
 80140b0:	f300 81a4 	bgt.w	80143fc <nd6_input+0x970>
      if (p->len == p->tot_len) {
 80140b4:	8961      	ldrh	r1, [r4, #10]
 80140b6:	428b      	cmp	r3, r1
 80140b8:	d0cf      	beq.n	801405a <nd6_input+0x5ce>
        if (option_len > sizeof(nd6_ra_buffer)) {
 80140ba:	2a20      	cmp	r2, #32
 80140bc:	d9d1      	bls.n	8014062 <nd6_input+0x5d6>
          option_type = pbuf_get_at(p, offset);
 80140be:	4639      	mov	r1, r7
 80140c0:	4620      	mov	r0, r4
 80140c2:	f7f4 febe 	bl	8008e42 <pbuf_get_at>
          if (option_type != ND6_OPTION_TYPE_RDNSS) {
 80140c6:	2819      	cmp	r0, #25
 80140c8:	f040 8198 	bne.w	80143fc <nd6_input+0x970>
          option_len = sizeof(nd6_ra_buffer);
 80140cc:	2220      	movs	r2, #32
 80140ce:	e7c8      	b.n	8014062 <nd6_input+0x5d6>
        if (option_len < sizeof(struct lladdr_option)) {
 80140d0:	2a07      	cmp	r2, #7
 80140d2:	f240 8193 	bls.w	80143fc <nd6_input+0x970>
        if ((default_router_list[i].neighbor_entry != NULL) &&
 80140d6:	eb09 0249 	add.w	r2, r9, r9, lsl #1
 80140da:	0093      	lsls	r3, r2, #2
 80140dc:	4a1d      	ldr	r2, [pc, #116]	; (8014154 <nd6_input+0x6c8>)
 80140de:	58d0      	ldr	r0, [r2, r3]
 80140e0:	2800      	cmp	r0, #0
 80140e2:	d0ce      	beq.n	8014082 <nd6_input+0x5f6>
            (default_router_list[i].neighbor_entry->state == ND6_INCOMPLETE)) {
 80140e4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
        if ((default_router_list[i].neighbor_entry != NULL) &&
 80140e8:	2b01      	cmp	r3, #1
 80140ea:	d1ca      	bne.n	8014082 <nd6_input+0x5f6>
          SMEMCPY(default_router_list[i].neighbor_entry->lladdr, lladdr_opt->addr, inp->hwaddr_len);
 80140ec:	f896 20da 	ldrb.w	r2, [r6, #218]	; 0xda
 80140f0:	f108 0102 	add.w	r1, r8, #2
 80140f4:	3018      	adds	r0, #24
 80140f6:	f000 fe78 	bl	8014dea <memcpy>
          default_router_list[i].neighbor_entry->state = ND6_REACHABLE;
 80140fa:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80140fe:	444b      	add	r3, r9
 8014100:	009a      	lsls	r2, r3, #2
 8014102:	4b14      	ldr	r3, [pc, #80]	; (8014154 <nd6_input+0x6c8>)
 8014104:	589b      	ldr	r3, [r3, r2]
 8014106:	2202      	movs	r2, #2
 8014108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          default_router_list[i].neighbor_entry->counter.reachable_time = reachable_time;
 801410c:	4a13      	ldr	r2, [pc, #76]	; (801415c <nd6_input+0x6d0>)
 801410e:	6812      	ldr	r2, [r2, #0]
 8014110:	629a      	str	r2, [r3, #40]	; 0x28
 8014112:	e7b6      	b.n	8014082 <nd6_input+0x5f6>
        if (option_len < sizeof(struct mtu_option)) {
 8014114:	2a07      	cmp	r2, #7
 8014116:	f240 8171 	bls.w	80143fc <nd6_input+0x970>
        mtu32 = lwip_htonl(mtu_opt->mtu);
 801411a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801411e:	f7f3 f85c 	bl	80071da <lwip_htonl>
        if ((mtu32 >= 1280) && (mtu32 <= 0xffff)) {
 8014122:	f5a0 63a0 	sub.w	r3, r0, #1280	; 0x500
 8014126:	f5b3 4f7b 	cmp.w	r3, #64256	; 0xfb00
 801412a:	d2aa      	bcs.n	8014082 <nd6_input+0x5f6>
          if (inp->mtu) {
 801412c:	f8b6 30d0 	ldrh.w	r3, [r6, #208]	; 0xd0
 8014130:	b133      	cbz	r3, 8014140 <nd6_input+0x6b4>
            inp->mtu6 = LWIP_MIN(inp->mtu, (u16_t)mtu32);
 8014132:	b280      	uxth	r0, r0
 8014134:	4298      	cmp	r0, r3
 8014136:	bf28      	it	cs
 8014138:	4618      	movcs	r0, r3
 801413a:	f8a6 00d2 	strh.w	r0, [r6, #210]	; 0xd2
 801413e:	e7a0      	b.n	8014082 <nd6_input+0x5f6>
            inp->mtu6 = (u16_t)mtu32;
 8014140:	f8a6 00d2 	strh.w	r0, [r6, #210]	; 0xd2
 8014144:	e79d      	b.n	8014082 <nd6_input+0x5f6>
 8014146:	bf00      	nop
 8014148:	20004bac 	.word	0x20004bac
 801414c:	20004bc0 	.word	0x20004bc0
 8014150:	20008660 	.word	0x20008660
 8014154:	20008a84 	.word	0x20008a84
 8014158:	2000001c 	.word	0x2000001c
 801415c:	20000018 	.word	0x20000018
 8014160:	200018c0 	.word	0x200018c0
        if (option_len < sizeof(struct prefix_option)) {
 8014164:	2a1f      	cmp	r2, #31
 8014166:	f240 8149 	bls.w	80143fc <nd6_input+0x970>
        ip6_addr_copy_from_packed(prefix_addr, prefix_opt->prefix);
 801416a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801416e:	9305      	str	r3, [sp, #20]
 8014170:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8014174:	9206      	str	r2, [sp, #24]
 8014176:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801417a:	9207      	str	r2, [sp, #28]
 801417c:	f8d8 201c 	ldr.w	r2, [r8, #28]
 8014180:	9208      	str	r2, [sp, #32]
        ip6_addr_assign_zone(&prefix_addr, IP6_UNICAST, inp);
 8014182:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014186:	041b      	lsls	r3, r3, #16
 8014188:	0c1b      	lsrs	r3, r3, #16
 801418a:	f248 02fe 	movw	r2, #33022	; 0x80fe
 801418e:	4293      	cmp	r3, r2
 8014190:	d017      	beq.n	80141c2 <nd6_input+0x736>
 8014192:	4652      	mov	r2, sl
 8014194:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
        if (!ip6_addr_islinklocal(&prefix_addr)) {
 8014198:	f248 02fe 	movw	r2, #33022	; 0x80fe
 801419c:	4293      	cmp	r3, r2
 801419e:	f43f af70 	beq.w	8014082 <nd6_input+0x5f6>
          if ((prefix_opt->flags & ND6_PREFIX_FLAG_ON_LINK) &&
 80141a2:	f998 3003 	ldrsb.w	r3, [r8, #3]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	db10      	blt.n	80141cc <nd6_input+0x740>
          if (prefix_opt->flags & ND6_PREFIX_FLAG_AUTONOMOUS) {
 80141aa:	f898 3003 	ldrb.w	r3, [r8, #3]
 80141ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 80141b2:	f43f af66 	beq.w	8014082 <nd6_input+0x5f6>
            nd6_process_autoconfig_prefix(inp, prefix_opt, &prefix_addr);
 80141b6:	aa05      	add	r2, sp, #20
 80141b8:	4641      	mov	r1, r8
 80141ba:	4630      	mov	r0, r6
 80141bc:	f7fe fe28 	bl	8012e10 <nd6_process_autoconfig_prefix>
 80141c0:	e75f      	b.n	8014082 <nd6_input+0x5f6>
        ip6_addr_assign_zone(&prefix_addr, IP6_UNICAST, inp);
 80141c2:	f896 20de 	ldrb.w	r2, [r6, #222]	; 0xde
 80141c6:	3201      	adds	r2, #1
 80141c8:	b2d2      	uxtb	r2, r2
 80141ca:	e7e3      	b.n	8014194 <nd6_input+0x708>
              (prefix_opt->prefix_length == 64)) {
 80141cc:	f898 3002 	ldrb.w	r3, [r8, #2]
          if ((prefix_opt->flags & ND6_PREFIX_FLAG_ON_LINK) &&
 80141d0:	2b40      	cmp	r3, #64	; 0x40
 80141d2:	d1ea      	bne.n	80141aa <nd6_input+0x71e>
            valid_life = lwip_htonl(prefix_opt->valid_lifetime);
 80141d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80141d8:	f7f2 ffff 	bl	80071da <lwip_htonl>
 80141dc:	4683      	mov	fp, r0
            prefix = nd6_get_onlink_prefix(&prefix_addr, inp);
 80141de:	4631      	mov	r1, r6
 80141e0:	a805      	add	r0, sp, #20
 80141e2:	f7fe fd13 	bl	8012c0c <nd6_get_onlink_prefix>
            if (prefix < 0 && valid_life > 0) {
 80141e6:	2800      	cmp	r0, #0
 80141e8:	db08      	blt.n	80141fc <nd6_input+0x770>
            if (prefix >= 0) {
 80141ea:	2800      	cmp	r0, #0
 80141ec:	dbdd      	blt.n	80141aa <nd6_input+0x71e>
              prefix_list[prefix].invalidation_timer = valid_life;
 80141ee:	4b85      	ldr	r3, [pc, #532]	; (8014404 <nd6_input+0x978>)
 80141f0:	221c      	movs	r2, #28
 80141f2:	fb02 3000 	mla	r0, r2, r0, r3
 80141f6:	f8c0 b018 	str.w	fp, [r0, #24]
 80141fa:	e7d6      	b.n	80141aa <nd6_input+0x71e>
            if (prefix < 0 && valid_life > 0) {
 80141fc:	f1bb 0f00 	cmp.w	fp, #0
 8014200:	d0f3      	beq.n	80141ea <nd6_input+0x75e>
              prefix = nd6_new_onlink_prefix(&prefix_addr, inp);
 8014202:	4631      	mov	r1, r6
 8014204:	a805      	add	r0, sp, #20
 8014206:	f7fe fd39 	bl	8012c7c <nd6_new_onlink_prefix>
 801420a:	e7ee      	b.n	80141ea <nd6_input+0x75e>
      pbuf_free(p);
 801420c:	f7f4 faa2 	bl	8008754 <pbuf_free>
      return;
 8014210:	e0f1      	b.n	80143f6 <nd6_input+0x96a>
    ip6_addr_assign_zone(&destination_address, IP6_UNICAST, inp);
 8014212:	f896 30de 	ldrb.w	r3, [r6, #222]	; 0xde
 8014216:	3301      	adds	r3, #1
 8014218:	b2db      	uxtb	r3, r3
 801421a:	e47b      	b.n	8013b14 <nd6_input+0x88>
        redir_hdr->code != 0 || ip6_addr_ismulticast(&destination_address)) {
 801421c:	786f      	ldrb	r7, [r5, #1]
        IP6H_HOPLIM(ip6_current_header()) != ND6_HOPLIM ||
 801421e:	2f00      	cmp	r7, #0
 8014220:	f47f ac8a 	bne.w	8013b38 <nd6_input+0xac>
        redir_hdr->code != 0 || ip6_addr_ismulticast(&destination_address)) {
 8014224:	b2d2      	uxtb	r2, r2
 8014226:	2aff      	cmp	r2, #255	; 0xff
 8014228:	f43f ac86 	beq.w	8013b38 <nd6_input+0xac>
    if (p->len >= (sizeof(struct redirect_header) + 2)) {
 801422c:	8962      	ldrh	r2, [r4, #10]
 801422e:	2a29      	cmp	r2, #41	; 0x29
 8014230:	d90b      	bls.n	801424a <nd6_input+0x7be>
      lladdr_opt = (struct lladdr_option *)((u8_t*)p->payload + sizeof(struct redirect_header));
 8014232:	6863      	ldr	r3, [r4, #4]
 8014234:	f103 0828 	add.w	r8, r3, #40	; 0x28
      if (p->len < (sizeof(struct redirect_header) + (lladdr_opt->length << 3))) {
 8014238:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801423c:	00db      	lsls	r3, r3, #3
 801423e:	3328      	adds	r3, #40	; 0x28
 8014240:	429a      	cmp	r2, r3
 8014242:	d204      	bcs.n	801424e <nd6_input+0x7c2>
        lladdr_opt = NULL;
 8014244:	f04f 0800 	mov.w	r8, #0
 8014248:	e001      	b.n	801424e <nd6_input+0x7c2>
      lladdr_opt = NULL;
 801424a:	f04f 0800 	mov.w	r8, #0
    dest_idx = nd6_find_destination_cache_entry(&destination_address);
 801424e:	4668      	mov	r0, sp
 8014250:	f7fe fb58 	bl	8012904 <nd6_find_destination_cache_entry>
    if (dest_idx < 0) {
 8014254:	2800      	cmp	r0, #0
 8014256:	db57      	blt.n	8014308 <nd6_input+0x87c>
    ip6_addr_copy_from_packed(target_address, redir_hdr->target_address);
 8014258:	f8d5 c008 	ldr.w	ip, [r5, #8]
 801425c:	f8cd c014 	str.w	ip, [sp, #20]
 8014260:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8014264:	f8cd 9018 	str.w	r9, [sp, #24]
 8014268:	f8d5 e010 	ldr.w	lr, [r5, #16]
 801426c:	f8cd e01c 	str.w	lr, [sp, #28]
 8014270:	696d      	ldr	r5, [r5, #20]
 8014272:	9508      	str	r5, [sp, #32]
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 8014274:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8014278:	ea0c 0202 	and.w	r2, ip, r2
 801427c:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8014280:	429a      	cmp	r2, r3
 8014282:	d045      	beq.n	8014310 <nd6_input+0x884>
 8014284:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    ip6_addr_copy(destination_cache[dest_idx].next_hop_addr, target_address);
 8014288:	495f      	ldr	r1, [pc, #380]	; (8014408 <nd6_input+0x97c>)
 801428a:	0042      	lsls	r2, r0, #1
 801428c:	eb02 0a00 	add.w	sl, r2, r0
 8014290:	ea4f 130a 	mov.w	r3, sl, lsl #4
 8014294:	469a      	mov	sl, r3
 8014296:	440b      	add	r3, r1
 8014298:	f8c3 c014 	str.w	ip, [r3, #20]
 801429c:	f8c3 9018 	str.w	r9, [r3, #24]
 80142a0:	f8c3 e01c 	str.w	lr, [r3, #28]
 80142a4:	621d      	str	r5, [r3, #32]
 80142a6:	4451      	add	r1, sl
 80142a8:	f881 7024 	strb.w	r7, [r1, #36]	; 0x24
    if (lladdr_opt != NULL) {
 80142ac:	f1b8 0f00 	cmp.w	r8, #0
 80142b0:	f000 809e 	beq.w	80143f0 <nd6_input+0x964>
      if (lladdr_opt->type == ND6_OPTION_TYPE_TARGET_LLADDR) {
 80142b4:	f898 3000 	ldrb.w	r3, [r8]
 80142b8:	2b02      	cmp	r3, #2
 80142ba:	f040 8099 	bne.w	80143f0 <nd6_input+0x964>
        i = nd6_find_neighbor_cache_entry(&target_address);
 80142be:	a805      	add	r0, sp, #20
 80142c0:	f7fe fae6 	bl	8012890 <nd6_find_neighbor_cache_entry>
        if (i < 0) {
 80142c4:	1e07      	subs	r7, r0, #0
 80142c6:	db28      	blt.n	801431a <nd6_input+0x88e>
        if (i >= 0) {
 80142c8:	2f00      	cmp	r7, #0
 80142ca:	f2c0 8091 	blt.w	80143f0 <nd6_input+0x964>
          if (neighbor_cache[i].state == ND6_INCOMPLETE) {
 80142ce:	4a4f      	ldr	r2, [pc, #316]	; (801440c <nd6_input+0x980>)
 80142d0:	232c      	movs	r3, #44	; 0x2c
 80142d2:	fb03 2307 	mla	r3, r3, r7, r2
 80142d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80142da:	2b01      	cmp	r3, #1
 80142dc:	f040 8088 	bne.w	80143f0 <nd6_input+0x964>
            MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 80142e0:	252c      	movs	r5, #44	; 0x2c
 80142e2:	fb05 f707 	mul.w	r7, r5, r7
 80142e6:	f107 0018 	add.w	r0, r7, #24
 80142ea:	4615      	mov	r5, r2
 80142ec:	f896 20da 	ldrb.w	r2, [r6, #218]	; 0xda
 80142f0:	f108 0102 	add.w	r1, r8, #2
 80142f4:	4428      	add	r0, r5
 80142f6:	f000 fd78 	bl	8014dea <memcpy>
            neighbor_cache[i].state = ND6_DELAY;
 80142fa:	443d      	add	r5, r7
 80142fc:	2304      	movs	r3, #4
 80142fe:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 8014302:	2305      	movs	r3, #5
 8014304:	62ab      	str	r3, [r5, #40]	; 0x28
 8014306:	e073      	b.n	80143f0 <nd6_input+0x964>
      pbuf_free(p);
 8014308:	4620      	mov	r0, r4
 801430a:	f7f4 fa23 	bl	8008754 <pbuf_free>
      return;
 801430e:	e072      	b.n	80143f6 <nd6_input+0x96a>
    ip6_addr_assign_zone(&target_address, IP6_UNICAST, inp);
 8014310:	f896 70de 	ldrb.w	r7, [r6, #222]	; 0xde
 8014314:	3701      	adds	r7, #1
 8014316:	b2ff      	uxtb	r7, r7
 8014318:	e7b4      	b.n	8014284 <nd6_input+0x7f8>
          i = nd6_new_neighbor_cache_entry();
 801431a:	f7fe fed1 	bl	80130c0 <nd6_new_neighbor_cache_entry>
          if (i >= 0) {
 801431e:	1e07      	subs	r7, r0, #0
 8014320:	dbd2      	blt.n	80142c8 <nd6_input+0x83c>
            neighbor_cache[i].netif = inp;
 8014322:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 801440c <nd6_input+0x980>
 8014326:	f04f 092c 	mov.w	r9, #44	; 0x2c
 801432a:	fb09 f907 	mul.w	r9, r9, r7
 801432e:	eb0a 0509 	add.w	r5, sl, r9
 8014332:	616e      	str	r6, [r5, #20]
            MEMCPY(neighbor_cache[i].lladdr, lladdr_opt->addr, inp->hwaddr_len);
 8014334:	f109 0018 	add.w	r0, r9, #24
 8014338:	f896 20da 	ldrb.w	r2, [r6, #218]	; 0xda
 801433c:	f108 0102 	add.w	r1, r8, #2
 8014340:	4450      	add	r0, sl
 8014342:	f000 fd52 	bl	8014dea <memcpy>
            ip6_addr_copy(neighbor_cache[i].next_hop_address, target_address);
 8014346:	9b05      	ldr	r3, [sp, #20]
 8014348:	f84a 3009 	str.w	r3, [sl, r9]
 801434c:	9b06      	ldr	r3, [sp, #24]
 801434e:	606b      	str	r3, [r5, #4]
 8014350:	9b07      	ldr	r3, [sp, #28]
 8014352:	60ab      	str	r3, [r5, #8]
 8014354:	9b08      	ldr	r3, [sp, #32]
 8014356:	60eb      	str	r3, [r5, #12]
 8014358:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801435c:	742b      	strb	r3, [r5, #16]
            neighbor_cache[i].state = ND6_DELAY;
 801435e:	2304      	movs	r3, #4
 8014360:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 8014364:	2305      	movs	r3, #5
 8014366:	62ab      	str	r3, [r5, #40]	; 0x28
 8014368:	e7ae      	b.n	80142c8 <nd6_input+0x83c>
    if (p->len < (sizeof(struct icmp6_hdr) + IP6_HLEN)) {
 801436a:	8943      	ldrh	r3, [r0, #10]
 801436c:	2b2f      	cmp	r3, #47	; 0x2f
 801436e:	d91c      	bls.n	80143aa <nd6_input+0x91e>
    ip6_addr_copy_from_packed(destination_address, ip6hdr->dest);
 8014370:	6a2b      	ldr	r3, [r5, #32]
 8014372:	9305      	str	r3, [sp, #20]
 8014374:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8014376:	9206      	str	r2, [sp, #24]
 8014378:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801437a:	9207      	str	r2, [sp, #28]
 801437c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801437e:	9208      	str	r2, [sp, #32]
    ip6_addr_assign_zone(&destination_address, IP6_UNKNOWN, inp);
 8014380:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8014384:	4019      	ands	r1, r3
 8014386:	f248 02fe 	movw	r2, #33022	; 0x80fe
 801438a:	4291      	cmp	r1, r2
 801438c:	d010      	beq.n	80143b0 <nd6_input+0x924>
 801438e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014392:	041b      	lsls	r3, r3, #16
 8014394:	0c1b      	lsrs	r3, r3, #16
 8014396:	f240 12ff 	movw	r2, #511	; 0x1ff
 801439a:	4293      	cmp	r3, r2
 801439c:	d008      	beq.n	80143b0 <nd6_input+0x924>
 801439e:	f240 22ff 	movw	r2, #767	; 0x2ff
 80143a2:	4293      	cmp	r3, r2
 80143a4:	d004      	beq.n	80143b0 <nd6_input+0x924>
 80143a6:	2300      	movs	r3, #0
 80143a8:	e006      	b.n	80143b8 <nd6_input+0x92c>
      pbuf_free(p);
 80143aa:	f7f4 f9d3 	bl	8008754 <pbuf_free>
      return;
 80143ae:	e022      	b.n	80143f6 <nd6_input+0x96a>
    ip6_addr_assign_zone(&destination_address, IP6_UNKNOWN, inp);
 80143b0:	f896 30de 	ldrb.w	r3, [r6, #222]	; 0xde
 80143b4:	3301      	adds	r3, #1
 80143b6:	b2db      	uxtb	r3, r3
 80143b8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    dest_idx = nd6_find_destination_cache_entry(&destination_address);
 80143bc:	a805      	add	r0, sp, #20
 80143be:	f7fe faa1 	bl	8012904 <nd6_find_destination_cache_entry>
    if (dest_idx < 0) {
 80143c2:	1e06      	subs	r6, r0, #0
 80143c4:	db08      	blt.n	80143d8 <nd6_input+0x94c>
    pmtu = lwip_htonl(icmp6hdr->data);
 80143c6:	6868      	ldr	r0, [r5, #4]
 80143c8:	f7f2 ff07 	bl	80071da <lwip_htonl>
    destination_cache[dest_idx].pmtu = (u16_t)LWIP_MIN(pmtu, 0xFFFF);
 80143cc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80143d0:	4298      	cmp	r0, r3
 80143d2:	d805      	bhi.n	80143e0 <nd6_input+0x954>
 80143d4:	b280      	uxth	r0, r0
 80143d6:	e005      	b.n	80143e4 <nd6_input+0x958>
      pbuf_free(p);
 80143d8:	4620      	mov	r0, r4
 80143da:	f7f4 f9bb 	bl	8008754 <pbuf_free>
      return;
 80143de:	e00a      	b.n	80143f6 <nd6_input+0x96a>
    destination_cache[dest_idx].pmtu = (u16_t)LWIP_MIN(pmtu, 0xFFFF);
 80143e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80143e4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80143e8:	0132      	lsls	r2, r6, #4
 80143ea:	4b07      	ldr	r3, [pc, #28]	; (8014408 <nd6_input+0x97c>)
 80143ec:	4413      	add	r3, r2
 80143ee:	8518      	strh	r0, [r3, #40]	; 0x28
  pbuf_free(p);
 80143f0:	4620      	mov	r0, r4
 80143f2:	f7f4 f9af 	bl	8008754 <pbuf_free>
}
 80143f6:	b00b      	add	sp, #44	; 0x2c
 80143f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pbuf_free(p);
 80143fc:	4620      	mov	r0, r4
 80143fe:	f7f4 f9a9 	bl	8008754 <pbuf_free>
 8014402:	e7f8      	b.n	80143f6 <nd6_input+0x96a>
 8014404:	20008818 	.word	0x20008818
 8014408:	200088a4 	.word	0x200088a4
 801440c:	20008660 	.word	0x20008660

08014410 <nd6_tmr>:
{
 8014410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8014414:	2400      	movs	r4, #0
 8014416:	e046      	b.n	80144a6 <nd6_tmr+0x96>
      if ((neighbor_cache[i].counter.probes_sent >= LWIP_ND6_MAX_MULTICAST_SOLICIT) &&
 8014418:	4aae      	ldr	r2, [pc, #696]	; (80146d4 <nd6_tmr+0x2c4>)
 801441a:	232c      	movs	r3, #44	; 0x2c
 801441c:	fb03 2304 	mla	r3, r3, r4, r2
 8014420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014422:	2b02      	cmp	r3, #2
 8014424:	d906      	bls.n	8014434 <nd6_tmr+0x24>
          (!neighbor_cache[i].isrouter)) {
 8014426:	4611      	mov	r1, r2
 8014428:	222c      	movs	r2, #44	; 0x2c
 801442a:	fb02 1204 	mla	r2, r2, r4, r1
 801442e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
      if ((neighbor_cache[i].counter.probes_sent >= LWIP_ND6_MAX_MULTICAST_SOLICIT) &&
 8014432:	b14a      	cbz	r2, 8014448 <nd6_tmr+0x38>
        neighbor_cache[i].counter.probes_sent++;
 8014434:	4aa7      	ldr	r2, [pc, #668]	; (80146d4 <nd6_tmr+0x2c4>)
 8014436:	202c      	movs	r0, #44	; 0x2c
 8014438:	fb00 2005 	mla	r0, r0, r5, r2
 801443c:	3301      	adds	r3, #1
 801443e:	6283      	str	r3, [r0, #40]	; 0x28
        nd6_send_neighbor_cache_probe(&neighbor_cache[i], ND6_SEND_FLAG_MULTICAST_DEST);
 8014440:	2101      	movs	r1, #1
 8014442:	f7ff f891 	bl	8013568 <nd6_send_neighbor_cache_probe>
 8014446:	e02c      	b.n	80144a2 <nd6_tmr+0x92>
        nd6_free_neighbor_cache_entry(i);
 8014448:	4620      	mov	r0, r4
 801444a:	f7fe fe0b 	bl	8013064 <nd6_free_neighbor_cache_entry>
 801444e:	e028      	b.n	80144a2 <nd6_tmr+0x92>
      if (neighbor_cache[i].q != NULL) {
 8014450:	4aa0      	ldr	r2, [pc, #640]	; (80146d4 <nd6_tmr+0x2c4>)
 8014452:	232c      	movs	r3, #44	; 0x2c
 8014454:	fb03 2304 	mla	r3, r3, r4, r2
 8014458:	6a1b      	ldr	r3, [r3, #32]
 801445a:	b113      	cbz	r3, 8014462 <nd6_tmr+0x52>
        nd6_send_q(i);
 801445c:	4620      	mov	r0, r4
 801445e:	f7fe fc65 	bl	8012d2c <nd6_send_q>
      if (neighbor_cache[i].counter.reachable_time <= ND6_TMR_INTERVAL) {
 8014462:	4a9c      	ldr	r2, [pc, #624]	; (80146d4 <nd6_tmr+0x2c4>)
 8014464:	232c      	movs	r3, #44	; 0x2c
 8014466:	fb03 2305 	mla	r3, r3, r5, r2
 801446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801446c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014470:	d808      	bhi.n	8014484 <nd6_tmr+0x74>
        neighbor_cache[i].state = ND6_STALE;
 8014472:	202c      	movs	r0, #44	; 0x2c
 8014474:	fb00 2005 	mla	r0, r0, r5, r2
 8014478:	2303      	movs	r3, #3
 801447a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        neighbor_cache[i].counter.stale_time = 0;
 801447e:	2300      	movs	r3, #0
 8014480:	6283      	str	r3, [r0, #40]	; 0x28
 8014482:	e00e      	b.n	80144a2 <nd6_tmr+0x92>
        neighbor_cache[i].counter.reachable_time -= ND6_TMR_INTERVAL;
 8014484:	4a93      	ldr	r2, [pc, #588]	; (80146d4 <nd6_tmr+0x2c4>)
 8014486:	202c      	movs	r0, #44	; 0x2c
 8014488:	fb00 2005 	mla	r0, r0, r5, r2
 801448c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8014490:	6283      	str	r3, [r0, #40]	; 0x28
 8014492:	e006      	b.n	80144a2 <nd6_tmr+0x92>
      neighbor_cache[i].counter.stale_time++;
 8014494:	4a8f      	ldr	r2, [pc, #572]	; (80146d4 <nd6_tmr+0x2c4>)
 8014496:	232c      	movs	r3, #44	; 0x2c
 8014498:	fb03 2304 	mla	r3, r3, r4, r2
 801449c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801449e:	3201      	adds	r2, #1
 80144a0:	629a      	str	r2, [r3, #40]	; 0x28
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 80144a2:	3401      	adds	r4, #1
 80144a4:	b264      	sxtb	r4, r4
 80144a6:	2c09      	cmp	r4, #9
 80144a8:	dc49      	bgt.n	801453e <nd6_tmr+0x12e>
    switch (neighbor_cache[i].state) {
 80144aa:	4625      	mov	r5, r4
 80144ac:	4a89      	ldr	r2, [pc, #548]	; (80146d4 <nd6_tmr+0x2c4>)
 80144ae:	232c      	movs	r3, #44	; 0x2c
 80144b0:	fb03 2304 	mla	r3, r3, r4, r2
 80144b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80144b8:	3b01      	subs	r3, #1
 80144ba:	2b04      	cmp	r3, #4
 80144bc:	d8f1      	bhi.n	80144a2 <nd6_tmr+0x92>
 80144be:	a201      	add	r2, pc, #4	; (adr r2, 80144c4 <nd6_tmr+0xb4>)
 80144c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144c4:	08014419 	.word	0x08014419
 80144c8:	08014451 	.word	0x08014451
 80144cc:	08014495 	.word	0x08014495
 80144d0:	080144d9 	.word	0x080144d9
 80144d4:	08014507 	.word	0x08014507
      if (neighbor_cache[i].counter.delay_time <= 1) {
 80144d8:	4a7e      	ldr	r2, [pc, #504]	; (80146d4 <nd6_tmr+0x2c4>)
 80144da:	232c      	movs	r3, #44	; 0x2c
 80144dc:	fb03 2304 	mla	r3, r3, r4, r2
 80144e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144e2:	2b01      	cmp	r3, #1
 80144e4:	d906      	bls.n	80144f4 <nd6_tmr+0xe4>
        neighbor_cache[i].counter.delay_time--;
 80144e6:	4a7b      	ldr	r2, [pc, #492]	; (80146d4 <nd6_tmr+0x2c4>)
 80144e8:	202c      	movs	r0, #44	; 0x2c
 80144ea:	fb00 2004 	mla	r0, r0, r4, r2
 80144ee:	3b01      	subs	r3, #1
 80144f0:	6283      	str	r3, [r0, #40]	; 0x28
 80144f2:	e7d6      	b.n	80144a2 <nd6_tmr+0x92>
        neighbor_cache[i].state = ND6_PROBE;
 80144f4:	202c      	movs	r0, #44	; 0x2c
 80144f6:	fb00 2004 	mla	r0, r0, r4, r2
 80144fa:	2305      	movs	r3, #5
 80144fc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        neighbor_cache[i].counter.probes_sent = 0;
 8014500:	2300      	movs	r3, #0
 8014502:	6283      	str	r3, [r0, #40]	; 0x28
 8014504:	e7cd      	b.n	80144a2 <nd6_tmr+0x92>
      if ((neighbor_cache[i].counter.probes_sent >= LWIP_ND6_MAX_MULTICAST_SOLICIT) &&
 8014506:	4a73      	ldr	r2, [pc, #460]	; (80146d4 <nd6_tmr+0x2c4>)
 8014508:	232c      	movs	r3, #44	; 0x2c
 801450a:	fb03 2304 	mla	r3, r3, r4, r2
 801450e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014510:	2b02      	cmp	r3, #2
 8014512:	d906      	bls.n	8014522 <nd6_tmr+0x112>
          (!neighbor_cache[i].isrouter)) {
 8014514:	4611      	mov	r1, r2
 8014516:	222c      	movs	r2, #44	; 0x2c
 8014518:	fb02 1204 	mla	r2, r2, r4, r1
 801451c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
      if ((neighbor_cache[i].counter.probes_sent >= LWIP_ND6_MAX_MULTICAST_SOLICIT) &&
 8014520:	b14a      	cbz	r2, 8014536 <nd6_tmr+0x126>
        neighbor_cache[i].counter.probes_sent++;
 8014522:	486c      	ldr	r0, [pc, #432]	; (80146d4 <nd6_tmr+0x2c4>)
 8014524:	222c      	movs	r2, #44	; 0x2c
 8014526:	fb02 0005 	mla	r0, r2, r5, r0
 801452a:	3301      	adds	r3, #1
 801452c:	6283      	str	r3, [r0, #40]	; 0x28
        nd6_send_neighbor_cache_probe(&neighbor_cache[i], 0);
 801452e:	2100      	movs	r1, #0
 8014530:	f7ff f81a 	bl	8013568 <nd6_send_neighbor_cache_probe>
 8014534:	e7b5      	b.n	80144a2 <nd6_tmr+0x92>
        nd6_free_neighbor_cache_entry(i);
 8014536:	4620      	mov	r0, r4
 8014538:	f7fe fd94 	bl	8013064 <nd6_free_neighbor_cache_entry>
 801453c:	e7b1      	b.n	80144a2 <nd6_tmr+0x92>
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 801453e:	2300      	movs	r3, #0
 8014540:	e00b      	b.n	801455a <nd6_tmr+0x14a>
    destination_cache[i].age++;
 8014542:	4965      	ldr	r1, [pc, #404]	; (80146d8 <nd6_tmr+0x2c8>)
 8014544:	005a      	lsls	r2, r3, #1
 8014546:	18d4      	adds	r4, r2, r3
 8014548:	0120      	lsls	r0, r4, #4
 801454a:	4604      	mov	r4, r0
 801454c:	4408      	add	r0, r1
 801454e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8014550:	4421      	add	r1, r4
 8014552:	3001      	adds	r0, #1
 8014554:	62c8      	str	r0, [r1, #44]	; 0x2c
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 8014556:	3301      	adds	r3, #1
 8014558:	b25b      	sxtb	r3, r3
 801455a:	2b09      	cmp	r3, #9
 801455c:	ddf1      	ble.n	8014542 <nd6_tmr+0x132>
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 801455e:	2000      	movs	r0, #0
 8014560:	e053      	b.n	801460a <nd6_tmr+0x1fa>
        for (j = 0; j < LWIP_ND6_NUM_DESTINATIONS; j++) {
 8014562:	3301      	adds	r3, #1
 8014564:	b25b      	sxtb	r3, r3
 8014566:	2b09      	cmp	r3, #9
 8014568:	dc42      	bgt.n	80145f0 <nd6_tmr+0x1e0>
          if (ip6_addr_cmp(&destination_cache[j].next_hop_addr,
 801456a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801456e:	0111      	lsls	r1, r2, #4
 8014570:	4a59      	ldr	r2, [pc, #356]	; (80146d8 <nd6_tmr+0x2c8>)
 8014572:	440a      	add	r2, r1
 8014574:	6951      	ldr	r1, [r2, #20]
 8014576:	6822      	ldr	r2, [r4, #0]
 8014578:	4291      	cmp	r1, r2
 801457a:	d1f2      	bne.n	8014562 <nd6_tmr+0x152>
 801457c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8014580:	0111      	lsls	r1, r2, #4
 8014582:	4a55      	ldr	r2, [pc, #340]	; (80146d8 <nd6_tmr+0x2c8>)
 8014584:	440a      	add	r2, r1
 8014586:	6991      	ldr	r1, [r2, #24]
 8014588:	6862      	ldr	r2, [r4, #4]
 801458a:	4291      	cmp	r1, r2
 801458c:	d1e9      	bne.n	8014562 <nd6_tmr+0x152>
 801458e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8014592:	0111      	lsls	r1, r2, #4
 8014594:	4a50      	ldr	r2, [pc, #320]	; (80146d8 <nd6_tmr+0x2c8>)
 8014596:	440a      	add	r2, r1
 8014598:	69d1      	ldr	r1, [r2, #28]
 801459a:	68a2      	ldr	r2, [r4, #8]
 801459c:	4291      	cmp	r1, r2
 801459e:	d1e0      	bne.n	8014562 <nd6_tmr+0x152>
 80145a0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80145a4:	0111      	lsls	r1, r2, #4
 80145a6:	4a4c      	ldr	r2, [pc, #304]	; (80146d8 <nd6_tmr+0x2c8>)
 80145a8:	440a      	add	r2, r1
 80145aa:	6a11      	ldr	r1, [r2, #32]
 80145ac:	68e2      	ldr	r2, [r4, #12]
 80145ae:	4291      	cmp	r1, r2
 80145b0:	d1d7      	bne.n	8014562 <nd6_tmr+0x152>
 80145b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80145b6:	0111      	lsls	r1, r2, #4
 80145b8:	4a47      	ldr	r2, [pc, #284]	; (80146d8 <nd6_tmr+0x2c8>)
 80145ba:	440a      	add	r2, r1
 80145bc:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
 80145c0:	7c22      	ldrb	r2, [r4, #16]
 80145c2:	4291      	cmp	r1, r2
 80145c4:	d1cd      	bne.n	8014562 <nd6_tmr+0x152>
             ip6_addr_set_any(&destination_cache[j].destination_addr);
 80145c6:	4a44      	ldr	r2, [pc, #272]	; (80146d8 <nd6_tmr+0x2c8>)
 80145c8:	005f      	lsls	r7, r3, #1
 80145ca:	18f9      	adds	r1, r7, r3
 80145cc:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 80145d0:	eb02 0c0e 	add.w	ip, r2, lr
 80145d4:	2100      	movs	r1, #0
 80145d6:	f842 100e 	str.w	r1, [r2, lr]
 80145da:	f8cc 1004 	str.w	r1, [ip, #4]
 80145de:	f8cc 1008 	str.w	r1, [ip, #8]
 80145e2:	f8cc 100c 	str.w	r1, [ip, #12]
 80145e6:	f88c 1010 	strb.w	r1, [ip, #16]
 80145ea:	e7ba      	b.n	8014562 <nd6_tmr+0x152>
        for (j = 0; j < LWIP_ND6_NUM_DESTINATIONS; j++) {
 80145ec:	2300      	movs	r3, #0
 80145ee:	e7ba      	b.n	8014566 <nd6_tmr+0x156>
        default_router_list[i].neighbor_entry->isrouter = 0;
 80145f0:	2100      	movs	r1, #0
 80145f2:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
        default_router_list[i].neighbor_entry = NULL;
 80145f6:	4a39      	ldr	r2, [pc, #228]	; (80146dc <nd6_tmr+0x2cc>)
 80145f8:	006b      	lsls	r3, r5, #1
 80145fa:	195e      	adds	r6, r3, r5
 80145fc:	00b4      	lsls	r4, r6, #2
 80145fe:	1916      	adds	r6, r2, r4
 8014600:	5111      	str	r1, [r2, r4]
        default_router_list[i].invalidation_timer = 0;
 8014602:	6071      	str	r1, [r6, #4]
        default_router_list[i].flags = 0;
 8014604:	7231      	strb	r1, [r6, #8]
  for (i = 0; i < LWIP_ND6_NUM_ROUTERS; i++) {
 8014606:	3001      	adds	r0, #1
 8014608:	b240      	sxtb	r0, r0
 801460a:	2802      	cmp	r0, #2
 801460c:	dc17      	bgt.n	801463e <nd6_tmr+0x22e>
    if (default_router_list[i].neighbor_entry != NULL) {
 801460e:	4605      	mov	r5, r0
 8014610:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8014614:	0093      	lsls	r3, r2, #2
 8014616:	4a31      	ldr	r2, [pc, #196]	; (80146dc <nd6_tmr+0x2cc>)
 8014618:	58d4      	ldr	r4, [r2, r3]
 801461a:	2c00      	cmp	r4, #0
 801461c:	d0f3      	beq.n	8014606 <nd6_tmr+0x1f6>
      if (default_router_list[i].invalidation_timer <= ND6_TMR_INTERVAL / 1000) {
 801461e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8014622:	009a      	lsls	r2, r3, #2
 8014624:	4b2d      	ldr	r3, [pc, #180]	; (80146dc <nd6_tmr+0x2cc>)
 8014626:	4413      	add	r3, r2
 8014628:	685a      	ldr	r2, [r3, #4]
 801462a:	2a01      	cmp	r2, #1
 801462c:	d9de      	bls.n	80145ec <nd6_tmr+0x1dc>
        default_router_list[i].invalidation_timer -= ND6_TMR_INTERVAL / 1000;
 801462e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8014632:	0099      	lsls	r1, r3, #2
 8014634:	4b29      	ldr	r3, [pc, #164]	; (80146dc <nd6_tmr+0x2cc>)
 8014636:	440b      	add	r3, r1
 8014638:	3a01      	subs	r2, #1
 801463a:	605a      	str	r2, [r3, #4]
 801463c:	e7e3      	b.n	8014606 <nd6_tmr+0x1f6>
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
 801463e:	2300      	movs	r3, #0
 8014640:	e00a      	b.n	8014658 <nd6_tmr+0x248>
        prefix_list[i].invalidation_timer = 0;
 8014642:	4927      	ldr	r1, [pc, #156]	; (80146e0 <nd6_tmr+0x2d0>)
 8014644:	00da      	lsls	r2, r3, #3
 8014646:	4408      	add	r0, r1
 8014648:	2500      	movs	r5, #0
 801464a:	6185      	str	r5, [r0, #24]
        prefix_list[i].netif = NULL;
 801464c:	1ad2      	subs	r2, r2, r3
 801464e:	0090      	lsls	r0, r2, #2
 8014650:	4401      	add	r1, r0
 8014652:	614d      	str	r5, [r1, #20]
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
 8014654:	3301      	adds	r3, #1
 8014656:	b25b      	sxtb	r3, r3
 8014658:	2b04      	cmp	r3, #4
 801465a:	dc13      	bgt.n	8014684 <nd6_tmr+0x274>
    if (prefix_list[i].netif != NULL) {
 801465c:	ebc3 00c3 	rsb	r0, r3, r3, lsl #3
 8014660:	0081      	lsls	r1, r0, #2
 8014662:	4608      	mov	r0, r1
 8014664:	4a1e      	ldr	r2, [pc, #120]	; (80146e0 <nd6_tmr+0x2d0>)
 8014666:	440a      	add	r2, r1
 8014668:	6951      	ldr	r1, [r2, #20]
 801466a:	2900      	cmp	r1, #0
 801466c:	d0f2      	beq.n	8014654 <nd6_tmr+0x244>
      if (prefix_list[i].invalidation_timer <= ND6_TMR_INTERVAL / 1000) {
 801466e:	6991      	ldr	r1, [r2, #24]
 8014670:	2901      	cmp	r1, #1
 8014672:	d9e6      	bls.n	8014642 <nd6_tmr+0x232>
        prefix_list[i].invalidation_timer -= ND6_TMR_INTERVAL / 1000;
 8014674:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8014678:	0090      	lsls	r0, r2, #2
 801467a:	4a19      	ldr	r2, [pc, #100]	; (80146e0 <nd6_tmr+0x2d0>)
 801467c:	4402      	add	r2, r0
 801467e:	3901      	subs	r1, #1
 8014680:	6191      	str	r1, [r2, #24]
 8014682:	e7e7      	b.n	8014654 <nd6_tmr+0x244>
  NETIF_FOREACH(netif) {
 8014684:	4b17      	ldr	r3, [pc, #92]	; (80146e4 <nd6_tmr+0x2d4>)
 8014686:	681e      	ldr	r6, [r3, #0]
 8014688:	e096      	b.n	80147b8 <nd6_tmr+0x3a8>
          netif_ip6_addr_set_valid_life(netif, i, 0);
 801468a:	2200      	movs	r2, #0
 801468c:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
          netif_ip6_addr_set_pref_life(netif, i, 0);
 8014690:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8014694:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014698:	605a      	str	r2, [r3, #4]
          netif_ip6_addr_set_state(netif, i, IP6_ADDR_INVALID);
 801469a:	4621      	mov	r1, r4
 801469c:	4630      	mov	r0, r6
 801469e:	f7f3 fe1d 	bl	80082dc <netif_ip6_addr_set_state>
 80146a2:	e057      	b.n	8014754 <nd6_tmr+0x344>
            LWIP_ASSERT("bad valid lifetime", life != IP6_ADDR_LIFE_STATIC);
 80146a4:	4b10      	ldr	r3, [pc, #64]	; (80146e8 <nd6_tmr+0x2d8>)
 80146a6:	f240 4246 	movw	r2, #1094	; 0x446
 80146aa:	4910      	ldr	r1, [pc, #64]	; (80146ec <nd6_tmr+0x2dc>)
 80146ac:	4810      	ldr	r0, [pc, #64]	; (80146f0 <nd6_tmr+0x2e0>)
 80146ae:	f000 fbc9 	bl	8014e44 <iprintf>
 80146b2:	e03b      	b.n	801472c <nd6_tmr+0x31c>
            netif_ip6_addr_set_pref_life(netif, i, 0);
 80146b4:	f105 0328 	add.w	r3, r5, #40	; 0x28
 80146b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80146bc:	2200      	movs	r2, #0
 80146be:	605a      	str	r2, [r3, #4]
            if (addr_state == IP6_ADDR_PREFERRED)
 80146c0:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 80146c4:	d146      	bne.n	8014754 <nd6_tmr+0x344>
              netif_ip6_addr_set_state(netif, i, IP6_ADDR_DEPRECATED);
 80146c6:	2210      	movs	r2, #16
 80146c8:	4621      	mov	r1, r4
 80146ca:	4630      	mov	r0, r6
 80146cc:	f7f3 fe06 	bl	80082dc <netif_ip6_addr_set_state>
 80146d0:	e040      	b.n	8014754 <nd6_tmr+0x344>
 80146d2:	bf00      	nop
 80146d4:	20008660 	.word	0x20008660
 80146d8:	200088a4 	.word	0x200088a4
 80146dc:	20008a84 	.word	0x20008a84
 80146e0:	20008818 	.word	0x20008818
 80146e4:	20008600 	.word	0x20008600
 80146e8:	08018cbc 	.word	0x08018cbc
 80146ec:	08018cf0 	.word	0x08018cf0
 80146f0:	08015d2c 	.word	0x08015d2c
          addr_state = IP6_ADDR_PREFERRED;
 80146f4:	2230      	movs	r2, #48	; 0x30
          netif_ip6_addr_set_state(netif, i, addr_state);
 80146f6:	4621      	mov	r1, r4
 80146f8:	4630      	mov	r0, r6
 80146fa:	f7f3 fdef 	bl	80082dc <netif_ip6_addr_set_state>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 80146fe:	3401      	adds	r4, #1
 8014700:	b264      	sxtb	r4, r4
 8014702:	2c02      	cmp	r4, #2
 8014704:	dc57      	bgt.n	80147b6 <nd6_tmr+0x3a6>
      addr_state = netif_ip6_addr_state(netif, i);
 8014706:	4625      	mov	r5, r4
 8014708:	1933      	adds	r3, r6, r4
 801470a:	f893 8094 	ldrb.w	r8, [r3, #148]	; 0x94
      if (!ip6_addr_isinvalid(addr_state) &&
 801470e:	f1b8 0f00 	cmp.w	r8, #0
 8014712:	d01f      	beq.n	8014754 <nd6_tmr+0x344>
          !netif_ip6_addr_isstatic(netif, i)) {
 8014714:	f104 0326 	add.w	r3, r4, #38	; 0x26
 8014718:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
 801471c:	b1d7      	cbz	r7, 8014754 <nd6_tmr+0x344>
        if (life <= ND6_TMR_INTERVAL / 1000) {
 801471e:	2f01      	cmp	r7, #1
 8014720:	d9b3      	bls.n	801468a <nd6_tmr+0x27a>
          if (!ip6_addr_life_isinfinite(life)) {
 8014722:	f1b7 3fff 	cmp.w	r7, #4294967295
 8014726:	d005      	beq.n	8014734 <nd6_tmr+0x324>
            LWIP_ASSERT("bad valid lifetime", life != IP6_ADDR_LIFE_STATIC);
 8014728:	3f01      	subs	r7, #1
 801472a:	d0bb      	beq.n	80146a4 <nd6_tmr+0x294>
            netif_ip6_addr_set_valid_life(netif, i, life);
 801472c:	f105 0326 	add.w	r3, r5, #38	; 0x26
 8014730:	f846 7023 	str.w	r7, [r6, r3, lsl #2]
          life = netif_ip6_addr_pref_life(netif, i);
 8014734:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8014738:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801473c:	685b      	ldr	r3, [r3, #4]
          if (life <= ND6_TMR_INTERVAL / 1000) {
 801473e:	2b01      	cmp	r3, #1
 8014740:	d9b8      	bls.n	80146b4 <nd6_tmr+0x2a4>
          } else if (!ip6_addr_life_isinfinite(life)) {
 8014742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014746:	d005      	beq.n	8014754 <nd6_tmr+0x344>
            life -= ND6_TMR_INTERVAL / 1000;
 8014748:	3b01      	subs	r3, #1
            netif_ip6_addr_set_pref_life(netif, i, life);
 801474a:	f105 0228 	add.w	r2, r5, #40	; 0x28
 801474e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8014752:	6053      	str	r3, [r2, #4]
      addr_state = netif_ip6_addr_state(netif, i);
 8014754:	1973      	adds	r3, r6, r5
 8014756:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
      if (ip6_addr_istentative(addr_state)) {
 801475a:	f012 0f08 	tst.w	r2, #8
 801475e:	d0ce      	beq.n	80146fe <nd6_tmr+0x2ee>
        if ((addr_state & IP6_ADDR_TENTATIVE_COUNT_MASK) >= LWIP_IPV6_DUP_DETECT_ATTEMPTS) {
 8014760:	f012 0f07 	tst.w	r2, #7
 8014764:	d00e      	beq.n	8014784 <nd6_tmr+0x374>
          if (!netif_ip6_addr_isstatic(netif, i) &&
 8014766:	f105 0326 	add.w	r3, r5, #38	; 0x26
 801476a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d0c0      	beq.n	80146f4 <nd6_tmr+0x2e4>
              netif_ip6_addr_pref_life(netif, i) == 0) {
 8014772:	3528      	adds	r5, #40	; 0x28
 8014774:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8014778:	686b      	ldr	r3, [r5, #4]
 801477a:	b10b      	cbz	r3, 8014780 <nd6_tmr+0x370>
          addr_state = IP6_ADDR_PREFERRED;
 801477c:	2230      	movs	r2, #48	; 0x30
 801477e:	e7ba      	b.n	80146f6 <nd6_tmr+0x2e6>
            addr_state = IP6_ADDR_DEPRECATED;
 8014780:	2210      	movs	r2, #16
 8014782:	e7b8      	b.n	80146f6 <nd6_tmr+0x2e6>
        } else if (netif_is_up(netif) && netif_is_link_up(netif)) {
 8014784:	f896 30db 	ldrb.w	r3, [r6, #219]	; 0xdb
 8014788:	f013 0f01 	tst.w	r3, #1
 801478c:	d0b7      	beq.n	80146fe <nd6_tmr+0x2ee>
 801478e:	f013 0f04 	tst.w	r3, #4
 8014792:	d0b4      	beq.n	80146fe <nd6_tmr+0x2ee>
          netif_ip6_addr_set_state(netif, i, addr_state + 1);
 8014794:	3201      	adds	r2, #1
 8014796:	b2d2      	uxtb	r2, r2
 8014798:	4621      	mov	r1, r4
 801479a:	4630      	mov	r0, r6
 801479c:	f7f3 fd9e 	bl	80082dc <netif_ip6_addr_set_state>
          nd6_send_ns(netif, netif_ip6_addr(netif, i),
 80147a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80147a4:	00eb      	lsls	r3, r5, #3
 80147a6:	3348      	adds	r3, #72	; 0x48
 80147a8:	18f1      	adds	r1, r6, r3
 80147aa:	2205      	movs	r2, #5
 80147ac:	3104      	adds	r1, #4
 80147ae:	4630      	mov	r0, r6
 80147b0:	f7fe fe54 	bl	801345c <nd6_send_ns>
 80147b4:	e7a3      	b.n	80146fe <nd6_tmr+0x2ee>
  NETIF_FOREACH(netif) {
 80147b6:	6836      	ldr	r6, [r6, #0]
 80147b8:	b10e      	cbz	r6, 80147be <nd6_tmr+0x3ae>
    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; ++i) {
 80147ba:	2400      	movs	r4, #0
 80147bc:	e7a1      	b.n	8014702 <nd6_tmr+0x2f2>
  if (!nd6_tmr_rs_reduction) {
 80147be:	4b16      	ldr	r3, [pc, #88]	; (8014818 <nd6_tmr+0x408>)
 80147c0:	781b      	ldrb	r3, [r3, #0]
 80147c2:	bb23      	cbnz	r3, 801480e <nd6_tmr+0x3fe>
    nd6_tmr_rs_reduction = (ND6_RTR_SOLICITATION_INTERVAL / ND6_TMR_INTERVAL) - 1;
 80147c4:	4b14      	ldr	r3, [pc, #80]	; (8014818 <nd6_tmr+0x408>)
 80147c6:	2203      	movs	r2, #3
 80147c8:	701a      	strb	r2, [r3, #0]
    NETIF_FOREACH(netif) {
 80147ca:	4b14      	ldr	r3, [pc, #80]	; (801481c <nd6_tmr+0x40c>)
 80147cc:	681c      	ldr	r4, [r3, #0]
 80147ce:	e000      	b.n	80147d2 <nd6_tmr+0x3c2>
 80147d0:	6824      	ldr	r4, [r4, #0]
 80147d2:	b1fc      	cbz	r4, 8014814 <nd6_tmr+0x404>
      if ((netif->rs_count > 0) && netif_is_up(netif) &&
 80147d4:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d0f9      	beq.n	80147d0 <nd6_tmr+0x3c0>
 80147dc:	f894 30db 	ldrb.w	r3, [r4, #219]	; 0xdb
 80147e0:	f013 0f01 	tst.w	r3, #1
 80147e4:	d0f4      	beq.n	80147d0 <nd6_tmr+0x3c0>
 80147e6:	f013 0f04 	tst.w	r3, #4
 80147ea:	d0f1      	beq.n	80147d0 <nd6_tmr+0x3c0>
          !ip6_addr_isinvalid(netif_ip6_addr_state(netif, 0)) &&
 80147ec:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
          netif_is_link_up(netif) &&
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d0ed      	beq.n	80147d0 <nd6_tmr+0x3c0>
          !ip6_addr_isinvalid(netif_ip6_addr_state(netif, 0)) &&
 80147f4:	2b40      	cmp	r3, #64	; 0x40
 80147f6:	d0eb      	beq.n	80147d0 <nd6_tmr+0x3c0>
        if (nd6_send_rs(netif) == ERR_OK) {
 80147f8:	4620      	mov	r0, r4
 80147fa:	f7fe fdc7 	bl	801338c <nd6_send_rs>
 80147fe:	2800      	cmp	r0, #0
 8014800:	d1e6      	bne.n	80147d0 <nd6_tmr+0x3c0>
          netif->rs_count--;
 8014802:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
 8014806:	3b01      	subs	r3, #1
 8014808:	f884 30e0 	strb.w	r3, [r4, #224]	; 0xe0
 801480c:	e7e0      	b.n	80147d0 <nd6_tmr+0x3c0>
    nd6_tmr_rs_reduction--;
 801480e:	3b01      	subs	r3, #1
 8014810:	4a01      	ldr	r2, [pc, #4]	; (8014818 <nd6_tmr+0x408>)
 8014812:	7013      	strb	r3, [r2, #0]
}
 8014814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014818:	200018e0 	.word	0x200018e0
 801481c:	20008600 	.word	0x20008600

08014820 <nd6_clear_destination_cache>:
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 8014820:	2200      	movs	r2, #0
 8014822:	2a09      	cmp	r2, #9
 8014824:	dc11      	bgt.n	801484a <nd6_clear_destination_cache+0x2a>
{
 8014826:	b410      	push	{r4}
    ip6_addr_set_any(&destination_cache[i].destination_addr);
 8014828:	4c08      	ldr	r4, [pc, #32]	; (801484c <nd6_clear_destination_cache+0x2c>)
 801482a:	0053      	lsls	r3, r2, #1
 801482c:	4413      	add	r3, r2
 801482e:	0118      	lsls	r0, r3, #4
 8014830:	1821      	adds	r1, r4, r0
 8014832:	2300      	movs	r3, #0
 8014834:	5023      	str	r3, [r4, r0]
 8014836:	604b      	str	r3, [r1, #4]
 8014838:	608b      	str	r3, [r1, #8]
 801483a:	60cb      	str	r3, [r1, #12]
 801483c:	740b      	strb	r3, [r1, #16]
  for (i = 0; i < LWIP_ND6_NUM_DESTINATIONS; i++) {
 801483e:	3201      	adds	r2, #1
 8014840:	2a09      	cmp	r2, #9
 8014842:	ddf1      	ble.n	8014828 <nd6_clear_destination_cache+0x8>
}
 8014844:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014848:	4770      	bx	lr
 801484a:	4770      	bx	lr
 801484c:	200088a4 	.word	0x200088a4

08014850 <nd6_find_route>:
{
 8014850:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; ++i) {
 8014852:	2300      	movs	r3, #0
 8014854:	e001      	b.n	801485a <nd6_find_route+0xa>
 8014856:	3301      	adds	r3, #1
 8014858:	b25b      	sxtb	r3, r3
 801485a:	2b04      	cmp	r3, #4
 801485c:	dc27      	bgt.n	80148ae <nd6_find_route+0x5e>
    netif = prefix_list[i].netif;
 801485e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8014862:	0091      	lsls	r1, r2, #2
 8014864:	4a20      	ldr	r2, [pc, #128]	; (80148e8 <nd6_find_route+0x98>)
 8014866:	440a      	add	r2, r1
 8014868:	6952      	ldr	r2, [r2, #20]
    if ((netif != NULL) && ip6_addr_netcmp(&prefix_list[i].prefix, ip6addr) &&
 801486a:	2a00      	cmp	r2, #0
 801486c:	d0f3      	beq.n	8014856 <nd6_find_route+0x6>
 801486e:	4c1e      	ldr	r4, [pc, #120]	; (80148e8 <nd6_find_route+0x98>)
 8014870:	5864      	ldr	r4, [r4, r1]
 8014872:	6801      	ldr	r1, [r0, #0]
 8014874:	428c      	cmp	r4, r1
 8014876:	d1ee      	bne.n	8014856 <nd6_find_route+0x6>
 8014878:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 801487c:	008c      	lsls	r4, r1, #2
 801487e:	491a      	ldr	r1, [pc, #104]	; (80148e8 <nd6_find_route+0x98>)
 8014880:	4421      	add	r1, r4
 8014882:	684c      	ldr	r4, [r1, #4]
 8014884:	6841      	ldr	r1, [r0, #4]
 8014886:	428c      	cmp	r4, r1
 8014888:	d1e5      	bne.n	8014856 <nd6_find_route+0x6>
 801488a:	ebc3 05c3 	rsb	r5, r3, r3, lsl #3
 801488e:	00ac      	lsls	r4, r5, #2
 8014890:	4915      	ldr	r1, [pc, #84]	; (80148e8 <nd6_find_route+0x98>)
 8014892:	4421      	add	r1, r4
 8014894:	7c0c      	ldrb	r4, [r1, #16]
 8014896:	7c01      	ldrb	r1, [r0, #16]
 8014898:	428c      	cmp	r4, r1
 801489a:	d1dc      	bne.n	8014856 <nd6_find_route+0x6>
        netif_is_up(netif) && netif_is_link_up(netif)) {
 801489c:	f892 10db 	ldrb.w	r1, [r2, #219]	; 0xdb
    if ((netif != NULL) && ip6_addr_netcmp(&prefix_list[i].prefix, ip6addr) &&
 80148a0:	f011 0f01 	tst.w	r1, #1
 80148a4:	d0d7      	beq.n	8014856 <nd6_find_route+0x6>
        netif_is_up(netif) && netif_is_link_up(netif)) {
 80148a6:	f011 0f04 	tst.w	r1, #4
 80148aa:	d0d4      	beq.n	8014856 <nd6_find_route+0x6>
 80148ac:	e010      	b.n	80148d0 <nd6_find_route+0x80>
  i = nd6_select_router(ip6addr, NULL);
 80148ae:	2100      	movs	r1, #0
 80148b0:	f7fe f8fa 	bl	8012aa8 <nd6_select_router>
  if (i >= 0) {
 80148b4:	1e04      	subs	r4, r0, #0
 80148b6:	db15      	blt.n	80148e4 <nd6_find_route+0x94>
    LWIP_ASSERT("selected router must have a neighbor entry",
 80148b8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80148bc:	0093      	lsls	r3, r2, #2
 80148be:	4a0b      	ldr	r2, [pc, #44]	; (80148ec <nd6_find_route+0x9c>)
 80148c0:	58d3      	ldr	r3, [r2, r3]
 80148c2:	b13b      	cbz	r3, 80148d4 <nd6_find_route+0x84>
    return default_router_list[i].neighbor_entry->netif;
 80148c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80148c8:	00a3      	lsls	r3, r4, #2
 80148ca:	4a08      	ldr	r2, [pc, #32]	; (80148ec <nd6_find_route+0x9c>)
 80148cc:	58d3      	ldr	r3, [r2, r3]
 80148ce:	695a      	ldr	r2, [r3, #20]
}
 80148d0:	4610      	mov	r0, r2
 80148d2:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("selected router must have a neighbor entry",
 80148d4:	4b06      	ldr	r3, [pc, #24]	; (80148f0 <nd6_find_route+0xa0>)
 80148d6:	f240 62e3 	movw	r2, #1763	; 0x6e3
 80148da:	4906      	ldr	r1, [pc, #24]	; (80148f4 <nd6_find_route+0xa4>)
 80148dc:	4806      	ldr	r0, [pc, #24]	; (80148f8 <nd6_find_route+0xa8>)
 80148de:	f000 fab1 	bl	8014e44 <iprintf>
 80148e2:	e7ef      	b.n	80148c4 <nd6_find_route+0x74>
  return NULL;
 80148e4:	2200      	movs	r2, #0
 80148e6:	e7f3      	b.n	80148d0 <nd6_find_route+0x80>
 80148e8:	20008818 	.word	0x20008818
 80148ec:	20008a84 	.word	0x20008a84
 80148f0:	08018cbc 	.word	0x08018cbc
 80148f4:	08018c70 	.word	0x08018c70
 80148f8:	08015d2c 	.word	0x08015d2c

080148fc <nd6_get_next_hop_addr_or_queue>:
 * - ERR_OK on success, ERR_RTE if no route was found for the packet,
 * or ERR_MEM if low memory conditions prohibit sending the packet at all.
 */
err_t
nd6_get_next_hop_addr_or_queue(struct netif *netif, struct pbuf *q, const ip6_addr_t *ip6addr, const u8_t **hwaddrp)
{
 80148fc:	b538      	push	{r3, r4, r5, lr}
 80148fe:	460d      	mov	r5, r1
 8014900:	461c      	mov	r4, r3
  s8_t i;

  /* Get next hop record. */
  i = nd6_get_next_hop_entry(ip6addr, netif);
 8014902:	4601      	mov	r1, r0
 8014904:	4610      	mov	r0, r2
 8014906:	f7fe feb7 	bl	8013678 <nd6_get_next_hop_entry>
  if (i < 0) {
 801490a:	2800      	cmp	r0, #0
 801490c:	db2c      	blt.n	8014968 <nd6_get_next_hop_addr_or_queue+0x6c>
    /* failed to get a next hop neighbor record. */
    return i;
  }

  /* Now that we have a destination record, send or queue the packet. */
  if (neighbor_cache[i].state == ND6_STALE) {
 801490e:	4601      	mov	r1, r0
 8014910:	4b16      	ldr	r3, [pc, #88]	; (801496c <nd6_get_next_hop_addr_or_queue+0x70>)
 8014912:	222c      	movs	r2, #44	; 0x2c
 8014914:	fb02 3200 	mla	r2, r2, r0, r3
 8014918:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 801491c:	2b03      	cmp	r3, #3
 801491e:	d011      	beq.n	8014944 <nd6_get_next_hop_addr_or_queue+0x48>
    /* Switch to delay state. */
    neighbor_cache[i].state = ND6_DELAY;
    neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
  }
  /* @todo should we send or queue if PROBE? send for now, to let unicast NS pass. */
  if ((neighbor_cache[i].state == ND6_REACHABLE) ||
 8014920:	4b12      	ldr	r3, [pc, #72]	; (801496c <nd6_get_next_hop_addr_or_queue+0x70>)
 8014922:	222c      	movs	r2, #44	; 0x2c
 8014924:	fb02 3201 	mla	r2, r2, r1, r3
 8014928:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 801492c:	2a02      	cmp	r2, #2
 801492e:	d013      	beq.n	8014958 <nd6_get_next_hop_addr_or_queue+0x5c>
 8014930:	2a04      	cmp	r2, #4
 8014932:	d011      	beq.n	8014958 <nd6_get_next_hop_addr_or_queue+0x5c>
      (neighbor_cache[i].state == ND6_DELAY) ||
 8014934:	2a05      	cmp	r2, #5
 8014936:	d00f      	beq.n	8014958 <nd6_get_next_hop_addr_or_queue+0x5c>
    *hwaddrp = neighbor_cache[i].lladdr;
    return ERR_OK;
  }

  /* We should queue packet on this interface. */
  *hwaddrp = NULL;
 8014938:	2300      	movs	r3, #0
 801493a:	6023      	str	r3, [r4, #0]
  return nd6_queue_packet(i, q);
 801493c:	4629      	mov	r1, r5
 801493e:	f7ff f82b 	bl	8013998 <nd6_queue_packet>
 8014942:	e011      	b.n	8014968 <nd6_get_next_hop_addr_or_queue+0x6c>
    neighbor_cache[i].state = ND6_DELAY;
 8014944:	4a09      	ldr	r2, [pc, #36]	; (801496c <nd6_get_next_hop_addr_or_queue+0x70>)
 8014946:	232c      	movs	r3, #44	; 0x2c
 8014948:	fb03 2300 	mla	r3, r3, r0, r2
 801494c:	2204      	movs	r2, #4
 801494e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    neighbor_cache[i].counter.delay_time = LWIP_ND6_DELAY_FIRST_PROBE_TIME / ND6_TMR_INTERVAL;
 8014952:	2205      	movs	r2, #5
 8014954:	629a      	str	r2, [r3, #40]	; 0x28
 8014956:	e7e3      	b.n	8014920 <nd6_get_next_hop_addr_or_queue+0x24>
    *hwaddrp = neighbor_cache[i].lladdr;
 8014958:	232c      	movs	r3, #44	; 0x2c
 801495a:	fb03 f301 	mul.w	r3, r3, r1
 801495e:	3318      	adds	r3, #24
 8014960:	4a02      	ldr	r2, [pc, #8]	; (801496c <nd6_get_next_hop_addr_or_queue+0x70>)
 8014962:	4413      	add	r3, r2
 8014964:	6023      	str	r3, [r4, #0]
    return ERR_OK;
 8014966:	2000      	movs	r0, #0
}
 8014968:	bd38      	pop	{r3, r4, r5, pc}
 801496a:	bf00      	nop
 801496c:	20008660 	.word	0x20008660

08014970 <nd6_get_destination_mtu>:
 * @param netif the netif on which the packet will be sent
 * @return the Path MTU, if known, or the netif default MTU
 */
u16_t
nd6_get_destination_mtu(const ip6_addr_t *ip6addr, struct netif *netif)
{
 8014970:	b510      	push	{r4, lr}
 8014972:	460c      	mov	r4, r1
  s16_t i;

  i = nd6_find_destination_cache_entry(ip6addr);
 8014974:	f7fd ffc6 	bl	8012904 <nd6_find_destination_cache_entry>
  if (i >= 0) {
 8014978:	2800      	cmp	r0, #0
 801497a:	db06      	blt.n	801498a <nd6_get_destination_mtu+0x1a>
    if (destination_cache[i].pmtu > 0) {
 801497c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8014980:	0102      	lsls	r2, r0, #4
 8014982:	4b05      	ldr	r3, [pc, #20]	; (8014998 <nd6_get_destination_mtu+0x28>)
 8014984:	4413      	add	r3, r2
 8014986:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 8014988:	b910      	cbnz	r0, 8014990 <nd6_get_destination_mtu+0x20>
      return destination_cache[i].pmtu;
    }
  }

  if (netif != NULL) {
 801498a:	b114      	cbz	r4, 8014992 <nd6_get_destination_mtu+0x22>
    return netif_mtu6(netif);
 801498c:	f8b4 00d2 	ldrh.w	r0, [r4, #210]	; 0xd2
  }

  return 1280; /* Minimum MTU */
}
 8014990:	bd10      	pop	{r4, pc}
  return 1280; /* Minimum MTU */
 8014992:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8014996:	e7fb      	b.n	8014990 <nd6_get_destination_mtu+0x20>
 8014998:	200088a4 	.word	0x200088a4

0801499c <nd6_reachability_hint>:
 * @param ip6addr the destination address which is know to be reachable
 *                by an upper layer protocol (TCP)
 */
void
nd6_reachability_hint(const ip6_addr_t *ip6addr)
{
 801499c:	b538      	push	{r3, r4, r5, lr}
  s8_t i;
  s16_t dst_idx;

  /* Find destination in cache. */
  if (ip6_addr_cmp(ip6addr, &(destination_cache[nd6_cached_destination_index].destination_addr))) {
 801499e:	6804      	ldr	r4, [r0, #0]
 80149a0:	4b45      	ldr	r3, [pc, #276]	; (8014ab8 <nd6_reachability_hint+0x11c>)
 80149a2:	781b      	ldrb	r3, [r3, #0]
 80149a4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80149a8:	010a      	lsls	r2, r1, #4
 80149aa:	4944      	ldr	r1, [pc, #272]	; (8014abc <nd6_reachability_hint+0x120>)
 80149ac:	588a      	ldr	r2, [r1, r2]
 80149ae:	4294      	cmp	r4, r2
 80149b0:	d031      	beq.n	8014a16 <nd6_reachability_hint+0x7a>
    dst_idx = nd6_cached_destination_index;
    ND6_STATS_INC(nd6.cachehit);
  } else {
    dst_idx = nd6_find_destination_cache_entry(ip6addr);
 80149b2:	f7fd ffa7 	bl	8012904 <nd6_find_destination_cache_entry>
  }
  if (dst_idx < 0) {
 80149b6:	2800      	cmp	r0, #0
 80149b8:	db2c      	blt.n	8014a14 <nd6_reachability_hint+0x78>
    return;
  }

  /* Find next hop neighbor in cache. */
  if (ip6_addr_cmp(&(destination_cache[dst_idx].next_hop_addr), &(neighbor_cache[nd6_cached_neighbor_index].next_hop_address))) {
 80149ba:	4602      	mov	r2, r0
 80149bc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80149c0:	0119      	lsls	r1, r3, #4
 80149c2:	4b3e      	ldr	r3, [pc, #248]	; (8014abc <nd6_reachability_hint+0x120>)
 80149c4:	440b      	add	r3, r1
 80149c6:	695c      	ldr	r4, [r3, #20]
 80149c8:	4b3d      	ldr	r3, [pc, #244]	; (8014ac0 <nd6_reachability_hint+0x124>)
 80149ca:	781b      	ldrb	r3, [r3, #0]
 80149cc:	212c      	movs	r1, #44	; 0x2c
 80149ce:	fb01 f103 	mul.w	r1, r1, r3
 80149d2:	4d3c      	ldr	r5, [pc, #240]	; (8014ac4 <nd6_reachability_hint+0x128>)
 80149d4:	5869      	ldr	r1, [r5, r1]
 80149d6:	428c      	cmp	r4, r1
 80149d8:	d03a      	beq.n	8014a50 <nd6_reachability_hint+0xb4>
    i = nd6_cached_neighbor_index;
    ND6_STATS_INC(nd6.cachehit);
  } else {
    i = nd6_find_neighbor_cache_entry(&(destination_cache[dst_idx].next_hop_addr));
 80149da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80149de:	0110      	lsls	r0, r2, #4
 80149e0:	3010      	adds	r0, #16
 80149e2:	4b36      	ldr	r3, [pc, #216]	; (8014abc <nd6_reachability_hint+0x120>)
 80149e4:	4418      	add	r0, r3
 80149e6:	3004      	adds	r0, #4
 80149e8:	f7fd ff52 	bl	8012890 <nd6_find_neighbor_cache_entry>
  }
  if (i < 0) {
 80149ec:	2800      	cmp	r0, #0
 80149ee:	db11      	blt.n	8014a14 <nd6_reachability_hint+0x78>
    return;
  }

  /* For safety: don't set as reachable if we don't have a LL address yet. Misuse protection. */
  if (neighbor_cache[i].state == ND6_INCOMPLETE || neighbor_cache[i].state == ND6_NO_ENTRY) {
 80149f0:	4a34      	ldr	r2, [pc, #208]	; (8014ac4 <nd6_reachability_hint+0x128>)
 80149f2:	232c      	movs	r3, #44	; 0x2c
 80149f4:	fb03 2300 	mla	r3, r3, r0, r2
 80149f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80149fc:	2b01      	cmp	r3, #1
 80149fe:	d909      	bls.n	8014a14 <nd6_reachability_hint+0x78>
    return;
  }

  /* Set reachability state. */
  neighbor_cache[i].state = ND6_REACHABLE;
 8014a00:	4613      	mov	r3, r2
 8014a02:	222c      	movs	r2, #44	; 0x2c
 8014a04:	fb02 3000 	mla	r0, r2, r0, r3
 8014a08:	2302      	movs	r3, #2
 8014a0a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  neighbor_cache[i].counter.reachable_time = reachable_time;
 8014a0e:	4b2e      	ldr	r3, [pc, #184]	; (8014ac8 <nd6_reachability_hint+0x12c>)
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	6283      	str	r3, [r0, #40]	; 0x28
}
 8014a14:	bd38      	pop	{r3, r4, r5, pc}
  if (ip6_addr_cmp(ip6addr, &(destination_cache[nd6_cached_destination_index].destination_addr))) {
 8014a16:	6844      	ldr	r4, [r0, #4]
 8014a18:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8014a1c:	0111      	lsls	r1, r2, #4
 8014a1e:	4a27      	ldr	r2, [pc, #156]	; (8014abc <nd6_reachability_hint+0x120>)
 8014a20:	440a      	add	r2, r1
 8014a22:	6852      	ldr	r2, [r2, #4]
 8014a24:	4294      	cmp	r4, r2
 8014a26:	d1c4      	bne.n	80149b2 <nd6_reachability_hint+0x16>
 8014a28:	6884      	ldr	r4, [r0, #8]
 8014a2a:	4a24      	ldr	r2, [pc, #144]	; (8014abc <nd6_reachability_hint+0x120>)
 8014a2c:	440a      	add	r2, r1
 8014a2e:	6892      	ldr	r2, [r2, #8]
 8014a30:	4294      	cmp	r4, r2
 8014a32:	d1be      	bne.n	80149b2 <nd6_reachability_hint+0x16>
 8014a34:	68c4      	ldr	r4, [r0, #12]
 8014a36:	4a21      	ldr	r2, [pc, #132]	; (8014abc <nd6_reachability_hint+0x120>)
 8014a38:	440a      	add	r2, r1
 8014a3a:	68d2      	ldr	r2, [r2, #12]
 8014a3c:	4294      	cmp	r4, r2
 8014a3e:	d1b8      	bne.n	80149b2 <nd6_reachability_hint+0x16>
 8014a40:	7c04      	ldrb	r4, [r0, #16]
 8014a42:	4a1e      	ldr	r2, [pc, #120]	; (8014abc <nd6_reachability_hint+0x120>)
 8014a44:	440a      	add	r2, r1
 8014a46:	7c12      	ldrb	r2, [r2, #16]
 8014a48:	4294      	cmp	r4, r2
 8014a4a:	d1b2      	bne.n	80149b2 <nd6_reachability_hint+0x16>
    dst_idx = nd6_cached_destination_index;
 8014a4c:	b218      	sxth	r0, r3
 8014a4e:	e7b2      	b.n	80149b6 <nd6_reachability_hint+0x1a>
  if (ip6_addr_cmp(&(destination_cache[dst_idx].next_hop_addr), &(neighbor_cache[nd6_cached_neighbor_index].next_hop_address))) {
 8014a50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8014a54:	0104      	lsls	r4, r0, #4
 8014a56:	4919      	ldr	r1, [pc, #100]	; (8014abc <nd6_reachability_hint+0x120>)
 8014a58:	4421      	add	r1, r4
 8014a5a:	6988      	ldr	r0, [r1, #24]
 8014a5c:	212c      	movs	r1, #44	; 0x2c
 8014a5e:	fb01 5103 	mla	r1, r1, r3, r5
 8014a62:	6849      	ldr	r1, [r1, #4]
 8014a64:	4288      	cmp	r0, r1
 8014a66:	d1b8      	bne.n	80149da <nd6_reachability_hint+0x3e>
 8014a68:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8014a6c:	0108      	lsls	r0, r1, #4
 8014a6e:	4913      	ldr	r1, [pc, #76]	; (8014abc <nd6_reachability_hint+0x120>)
 8014a70:	4401      	add	r1, r0
 8014a72:	69c8      	ldr	r0, [r1, #28]
 8014a74:	212c      	movs	r1, #44	; 0x2c
 8014a76:	fb01 5103 	mla	r1, r1, r3, r5
 8014a7a:	6889      	ldr	r1, [r1, #8]
 8014a7c:	4288      	cmp	r0, r1
 8014a7e:	d1ac      	bne.n	80149da <nd6_reachability_hint+0x3e>
 8014a80:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8014a84:	0108      	lsls	r0, r1, #4
 8014a86:	490d      	ldr	r1, [pc, #52]	; (8014abc <nd6_reachability_hint+0x120>)
 8014a88:	4401      	add	r1, r0
 8014a8a:	6a08      	ldr	r0, [r1, #32]
 8014a8c:	212c      	movs	r1, #44	; 0x2c
 8014a8e:	fb01 5103 	mla	r1, r1, r3, r5
 8014a92:	68c9      	ldr	r1, [r1, #12]
 8014a94:	4288      	cmp	r0, r1
 8014a96:	d1a0      	bne.n	80149da <nd6_reachability_hint+0x3e>
 8014a98:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8014a9c:	0108      	lsls	r0, r1, #4
 8014a9e:	4907      	ldr	r1, [pc, #28]	; (8014abc <nd6_reachability_hint+0x120>)
 8014aa0:	4401      	add	r1, r0
 8014aa2:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
 8014aa6:	212c      	movs	r1, #44	; 0x2c
 8014aa8:	fb01 5103 	mla	r1, r1, r3, r5
 8014aac:	7c09      	ldrb	r1, [r1, #16]
 8014aae:	4288      	cmp	r0, r1
 8014ab0:	d193      	bne.n	80149da <nd6_reachability_hint+0x3e>
    i = nd6_cached_neighbor_index;
 8014ab2:	b258      	sxtb	r0, r3
 8014ab4:	e79a      	b.n	80149ec <nd6_reachability_hint+0x50>
 8014ab6:	bf00      	nop
 8014ab8:	200018bc 	.word	0x200018bc
 8014abc:	200088a4 	.word	0x200088a4
 8014ac0:	200018bd 	.word	0x200018bd
 8014ac4:	20008660 	.word	0x20008660
 8014ac8:	20000018 	.word	0x20000018

08014acc <nd6_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
nd6_cleanup_netif(struct netif *netif)
{
 8014acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ace:	4605      	mov	r5, r0
  u8_t i;
  s8_t router_index;
  for (i = 0; i < LWIP_ND6_NUM_PREFIXES; i++) {
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	e001      	b.n	8014ad8 <nd6_cleanup_netif+0xc>
 8014ad4:	3301      	adds	r3, #1
 8014ad6:	b2db      	uxtb	r3, r3
 8014ad8:	2b04      	cmp	r3, #4
 8014ada:	d80c      	bhi.n	8014af6 <nd6_cleanup_netif+0x2a>
    if (prefix_list[i].netif == netif) {
 8014adc:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8014ae0:	0091      	lsls	r1, r2, #2
 8014ae2:	4a1f      	ldr	r2, [pc, #124]	; (8014b60 <nd6_cleanup_netif+0x94>)
 8014ae4:	440a      	add	r2, r1
 8014ae6:	6952      	ldr	r2, [r2, #20]
 8014ae8:	42aa      	cmp	r2, r5
 8014aea:	d1f3      	bne.n	8014ad4 <nd6_cleanup_netif+0x8>
      prefix_list[i].netif = NULL;
 8014aec:	4a1c      	ldr	r2, [pc, #112]	; (8014b60 <nd6_cleanup_netif+0x94>)
 8014aee:	440a      	add	r2, r1
 8014af0:	2100      	movs	r1, #0
 8014af2:	6151      	str	r1, [r2, #20]
 8014af4:	e7ee      	b.n	8014ad4 <nd6_cleanup_netif+0x8>
    }
  }
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8014af6:	2400      	movs	r4, #0
 8014af8:	e023      	b.n	8014b42 <nd6_cleanup_netif+0x76>
    if (neighbor_cache[i].netif == netif) {
      for (router_index = 0; router_index < LWIP_ND6_NUM_ROUTERS; router_index++) {
 8014afa:	3301      	adds	r3, #1
 8014afc:	b25b      	sxtb	r3, r3
 8014afe:	2b02      	cmp	r3, #2
 8014b00:	dc13      	bgt.n	8014b2a <nd6_cleanup_netif+0x5e>
        if (default_router_list[router_index].neighbor_entry == &neighbor_cache[i]) {
 8014b02:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8014b06:	008a      	lsls	r2, r1, #2
 8014b08:	4916      	ldr	r1, [pc, #88]	; (8014b64 <nd6_cleanup_netif+0x98>)
 8014b0a:	5889      	ldr	r1, [r1, r2]
 8014b0c:	222c      	movs	r2, #44	; 0x2c
 8014b0e:	4e16      	ldr	r6, [pc, #88]	; (8014b68 <nd6_cleanup_netif+0x9c>)
 8014b10:	fb02 6200 	mla	r2, r2, r0, r6
 8014b14:	4291      	cmp	r1, r2
 8014b16:	d1f0      	bne.n	8014afa <nd6_cleanup_netif+0x2e>
          default_router_list[router_index].neighbor_entry = NULL;
 8014b18:	4912      	ldr	r1, [pc, #72]	; (8014b64 <nd6_cleanup_netif+0x98>)
 8014b1a:	005a      	lsls	r2, r3, #1
 8014b1c:	18d6      	adds	r6, r2, r3
 8014b1e:	00b7      	lsls	r7, r6, #2
 8014b20:	2600      	movs	r6, #0
 8014b22:	51ce      	str	r6, [r1, r7]
          default_router_list[router_index].flags = 0;
 8014b24:	4439      	add	r1, r7
 8014b26:	720e      	strb	r6, [r1, #8]
 8014b28:	e7e7      	b.n	8014afa <nd6_cleanup_netif+0x2e>
        }
      }
      neighbor_cache[i].isrouter = 0;
 8014b2a:	4b0f      	ldr	r3, [pc, #60]	; (8014b68 <nd6_cleanup_netif+0x9c>)
 8014b2c:	222c      	movs	r2, #44	; 0x2c
 8014b2e:	fb02 3300 	mla	r3, r2, r0, r3
 8014b32:	2200      	movs	r2, #0
 8014b34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      nd6_free_neighbor_cache_entry(i);
 8014b38:	b260      	sxtb	r0, r4
 8014b3a:	f7fe fa93 	bl	8013064 <nd6_free_neighbor_cache_entry>
  for (i = 0; i < LWIP_ND6_NUM_NEIGHBORS; i++) {
 8014b3e:	3401      	adds	r4, #1
 8014b40:	b2e4      	uxtb	r4, r4
 8014b42:	2c09      	cmp	r4, #9
 8014b44:	d809      	bhi.n	8014b5a <nd6_cleanup_netif+0x8e>
    if (neighbor_cache[i].netif == netif) {
 8014b46:	4620      	mov	r0, r4
 8014b48:	4a07      	ldr	r2, [pc, #28]	; (8014b68 <nd6_cleanup_netif+0x9c>)
 8014b4a:	232c      	movs	r3, #44	; 0x2c
 8014b4c:	fb03 2304 	mla	r3, r3, r4, r2
 8014b50:	695a      	ldr	r2, [r3, #20]
 8014b52:	42aa      	cmp	r2, r5
 8014b54:	d1f3      	bne.n	8014b3e <nd6_cleanup_netif+0x72>
      for (router_index = 0; router_index < LWIP_ND6_NUM_ROUTERS; router_index++) {
 8014b56:	2300      	movs	r3, #0
 8014b58:	e7d1      	b.n	8014afe <nd6_cleanup_netif+0x32>
    }
  }
  /* Clear the destination cache, since many entries may now have become
   * invalid for one of several reasons. As destination cache entries have no
   * netif association, use a sledgehammer approach (this can be improved). */
  nd6_clear_destination_cache();
 8014b5a:	f7ff fe61 	bl	8014820 <nd6_clear_destination_cache>
}
 8014b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b60:	20008818 	.word	0x20008818
 8014b64:	20008a84 	.word	0x20008a84
 8014b68:	20008660 	.word	0x20008660

08014b6c <nd6_adjust_mld_membership>:
 * @param addr_idx The index of the address.
 * @param new_state The new (IP6_ADDR_) state for the address.
 */
void
nd6_adjust_mld_membership(struct netif *netif, s8_t addr_idx, u8_t new_state)
{
 8014b6c:	b510      	push	{r4, lr}
  u8_t old_state, old_member, new_member;

  old_state = netif_ip6_addr_state(netif, addr_idx);
 8014b6e:	1843      	adds	r3, r0, r1
 8014b70:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94

  /* Determine whether we were, and should be, a member of the solicited-node
   * multicast group for this address. For tentative addresses, the group is
   * not joined until the address enters the TENTATIVE_1 (or VALID) state. */
  old_member = (old_state != IP6_ADDR_INVALID && old_state != IP6_ADDR_DUPLICATED && old_state != IP6_ADDR_TENTATIVE);
 8014b74:	b13b      	cbz	r3, 8014b86 <nd6_adjust_mld_membership+0x1a>
 8014b76:	2b40      	cmp	r3, #64	; 0x40
 8014b78:	d00e      	beq.n	8014b98 <nd6_adjust_mld_membership+0x2c>
 8014b7a:	2b08      	cmp	r3, #8
 8014b7c:	d001      	beq.n	8014b82 <nd6_adjust_mld_membership+0x16>
 8014b7e:	2301      	movs	r3, #1
 8014b80:	e002      	b.n	8014b88 <nd6_adjust_mld_membership+0x1c>
 8014b82:	2300      	movs	r3, #0
 8014b84:	e000      	b.n	8014b88 <nd6_adjust_mld_membership+0x1c>
 8014b86:	2300      	movs	r3, #0
 8014b88:	b2db      	uxtb	r3, r3
  new_member = (new_state != IP6_ADDR_INVALID && new_state != IP6_ADDR_DUPLICATED && new_state != IP6_ADDR_TENTATIVE);
 8014b8a:	b14a      	cbz	r2, 8014ba0 <nd6_adjust_mld_membership+0x34>
 8014b8c:	2a40      	cmp	r2, #64	; 0x40
 8014b8e:	d025      	beq.n	8014bdc <nd6_adjust_mld_membership+0x70>
 8014b90:	2a08      	cmp	r2, #8
 8014b92:	d003      	beq.n	8014b9c <nd6_adjust_mld_membership+0x30>
 8014b94:	2401      	movs	r4, #1
 8014b96:	e004      	b.n	8014ba2 <nd6_adjust_mld_membership+0x36>
  old_member = (old_state != IP6_ADDR_INVALID && old_state != IP6_ADDR_DUPLICATED && old_state != IP6_ADDR_TENTATIVE);
 8014b98:	2300      	movs	r3, #0
 8014b9a:	e7f5      	b.n	8014b88 <nd6_adjust_mld_membership+0x1c>
  new_member = (new_state != IP6_ADDR_INVALID && new_state != IP6_ADDR_DUPLICATED && new_state != IP6_ADDR_TENTATIVE);
 8014b9c:	2400      	movs	r4, #0
 8014b9e:	e000      	b.n	8014ba2 <nd6_adjust_mld_membership+0x36>
 8014ba0:	2400      	movs	r4, #0
 8014ba2:	b2e4      	uxtb	r4, r4

  if (old_member != new_member) {
 8014ba4:	42a3      	cmp	r3, r4
 8014ba6:	d018      	beq.n	8014bda <nd6_adjust_mld_membership+0x6e>
    ip6_addr_set_solicitednode(&multicast_address, netif_ip6_addr(netif, addr_idx)->addr[3]);
 8014ba8:	4b0f      	ldr	r3, [pc, #60]	; (8014be8 <nd6_adjust_mld_membership+0x7c>)
 8014baa:	f240 22ff 	movw	r2, #767	; 0x2ff
 8014bae:	601a      	str	r2, [r3, #0]
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	605a      	str	r2, [r3, #4]
 8014bb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014bb8:	609a      	str	r2, [r3, #8]
 8014bba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014bbe:	00ca      	lsls	r2, r1, #3
 8014bc0:	4402      	add	r2, r0
 8014bc2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8014bc4:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8014bc8:	60da      	str	r2, [r3, #12]
    ip6_addr_assign_zone(&multicast_address, IP6_MULTICAST, netif);
 8014bca:	f890 20de 	ldrb.w	r2, [r0, #222]	; 0xde
 8014bce:	3201      	adds	r2, #1
 8014bd0:	741a      	strb	r2, [r3, #16]

    if (new_member) {
 8014bd2:	b92c      	cbnz	r4, 8014be0 <nd6_adjust_mld_membership+0x74>
      mld6_joingroup_netif(netif, &multicast_address);
    } else {
      mld6_leavegroup_netif(netif, &multicast_address);
 8014bd4:	4904      	ldr	r1, [pc, #16]	; (8014be8 <nd6_adjust_mld_membership+0x7c>)
 8014bd6:	f7fd fdc5 	bl	8012764 <mld6_leavegroup_netif>
    }
  }
}
 8014bda:	bd10      	pop	{r4, pc}
  new_member = (new_state != IP6_ADDR_INVALID && new_state != IP6_ADDR_DUPLICATED && new_state != IP6_ADDR_TENTATIVE);
 8014bdc:	2400      	movs	r4, #0
 8014bde:	e7e0      	b.n	8014ba2 <nd6_adjust_mld_membership+0x36>
      mld6_joingroup_netif(netif, &multicast_address);
 8014be0:	4619      	mov	r1, r3
 8014be2:	f7fd fd4f 	bl	8012684 <mld6_joingroup_netif>
 8014be6:	e7f8      	b.n	8014bda <nd6_adjust_mld_membership+0x6e>
 8014be8:	200018a8 	.word	0x200018a8

08014bec <nd6_restart_netif>:
void
nd6_restart_netif(struct netif *netif)
{
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  /* Send Router Solicitation messages (see RFC 4861, ch. 6.3.7). */
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8014bec:	2303      	movs	r3, #3
 8014bee:	f880 30e0 	strb.w	r3, [r0, #224]	; 0xe0
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
}
 8014bf2:	4770      	bx	lr

08014bf4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bf6:	4604      	mov	r4, r0
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014bf8:	8946      	ldrh	r6, [r0, #10]
 8014bfa:	2e0e      	cmp	r6, #14
 8014bfc:	d922      	bls.n	8014c44 <ethernet_input+0x50>
 8014bfe:	460f      	mov	r7, r1
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014c00:	7bc3      	ldrb	r3, [r0, #15]
 8014c02:	b91b      	cbnz	r3, 8014c0c <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 8014c04:	f891 30de 	ldrb.w	r3, [r1, #222]	; 0xde
 8014c08:	3301      	adds	r3, #1
 8014c0a:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014c0c:	6860      	ldr	r0, [r4, #4]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014c0e:	8985      	ldrh	r5, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014c10:	7803      	ldrb	r3, [r0, #0]
 8014c12:	f013 0f01 	tst.w	r3, #1
 8014c16:	d00c      	beq.n	8014c32 <ethernet_input+0x3e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014c18:	2b01      	cmp	r3, #1
 8014c1a:	d018      	beq.n	8014c4e <ethernet_input+0x5a>
        p->flags |= PBUF_FLAG_LLMCAST;
      }
#endif /* LWIP_IPV4 */
    }
#if LWIP_IPV6
    else if ((ethhdr->dest.addr[0] == LL_IP6_MULTICAST_ADDR_0) &&
 8014c1c:	2b33      	cmp	r3, #51	; 0x33
 8014c1e:	d021      	beq.n	8014c64 <ethernet_input+0x70>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014c20:	2206      	movs	r2, #6
 8014c22:	492b      	ldr	r1, [pc, #172]	; (8014cd0 <ethernet_input+0xdc>)
 8014c24:	f000 f8d2 	bl	8014dcc <memcmp>
 8014c28:	b918      	cbnz	r0, 8014c32 <ethernet_input+0x3e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014c2a:	7b63      	ldrb	r3, [r4, #13]
 8014c2c:	f043 0308 	orr.w	r3, r3, #8
 8014c30:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8014c32:	f5b5 6fc1 	cmp.w	r5, #1544	; 0x608
 8014c36:	d02d      	beq.n	8014c94 <ethernet_input+0xa0>
 8014c38:	f64d 5386 	movw	r3, #56710	; 0xdd86
 8014c3c:	429d      	cmp	r5, r3
 8014c3e:	d039      	beq.n	8014cb4 <ethernet_input+0xc0>
 8014c40:	2d08      	cmp	r5, #8
 8014c42:	d017      	beq.n	8014c74 <ethernet_input+0x80>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8014c44:	4620      	mov	r0, r4
 8014c46:	f7f3 fd85 	bl	8008754 <pbuf_free>
  return ERR_OK;
}
 8014c4a:	2000      	movs	r0, #0
 8014c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014c4e:	7843      	ldrb	r3, [r0, #1]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d1ee      	bne.n	8014c32 <ethernet_input+0x3e>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014c54:	7883      	ldrb	r3, [r0, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014c56:	2b5e      	cmp	r3, #94	; 0x5e
 8014c58:	d1eb      	bne.n	8014c32 <ethernet_input+0x3e>
        p->flags |= PBUF_FLAG_LLMCAST;
 8014c5a:	7b63      	ldrb	r3, [r4, #13]
 8014c5c:	f043 0310 	orr.w	r3, r3, #16
 8014c60:	7363      	strb	r3, [r4, #13]
 8014c62:	e7e6      	b.n	8014c32 <ethernet_input+0x3e>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
 8014c64:	7843      	ldrb	r3, [r0, #1]
    else if ((ethhdr->dest.addr[0] == LL_IP6_MULTICAST_ADDR_0) &&
 8014c66:	2b33      	cmp	r3, #51	; 0x33
 8014c68:	d1da      	bne.n	8014c20 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLMCAST;
 8014c6a:	7b63      	ldrb	r3, [r4, #13]
 8014c6c:	f043 0310 	orr.w	r3, r3, #16
 8014c70:	7363      	strb	r3, [r4, #13]
 8014c72:	e7de      	b.n	8014c32 <ethernet_input+0x3e>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014c74:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8014c78:	f013 0f08 	tst.w	r3, #8
 8014c7c:	d0e2      	beq.n	8014c44 <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014c7e:	210e      	movs	r1, #14
 8014c80:	4620      	mov	r0, r4
 8014c82:	f7f3 fd21 	bl	80086c8 <pbuf_remove_header>
 8014c86:	2800      	cmp	r0, #0
 8014c88:	d1dc      	bne.n	8014c44 <ethernet_input+0x50>
        ip4_input(p, netif);
 8014c8a:	4639      	mov	r1, r7
 8014c8c:	4620      	mov	r0, r4
 8014c8e:	f7fb fa13 	bl	80100b8 <ip4_input>
      break;
 8014c92:	e7da      	b.n	8014c4a <ethernet_input+0x56>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014c94:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8014c98:	f013 0f08 	tst.w	r3, #8
 8014c9c:	d0d2      	beq.n	8014c44 <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014c9e:	210e      	movs	r1, #14
 8014ca0:	4620      	mov	r0, r4
 8014ca2:	f7f3 fd11 	bl	80086c8 <pbuf_remove_header>
 8014ca6:	2800      	cmp	r0, #0
 8014ca8:	d1cc      	bne.n	8014c44 <ethernet_input+0x50>
        etharp_input(p, netif);
 8014caa:	4639      	mov	r1, r7
 8014cac:	4620      	mov	r0, r4
 8014cae:	f7fa fde5 	bl	800f87c <etharp_input>
      break;
 8014cb2:	e7ca      	b.n	8014c4a <ethernet_input+0x56>
      if ((p->len < next_hdr_offset) || pbuf_remove_header(p, next_hdr_offset)) {
 8014cb4:	2e0d      	cmp	r6, #13
 8014cb6:	d9c5      	bls.n	8014c44 <ethernet_input+0x50>
 8014cb8:	210e      	movs	r1, #14
 8014cba:	4620      	mov	r0, r4
 8014cbc:	f7f3 fd04 	bl	80086c8 <pbuf_remove_header>
 8014cc0:	2800      	cmp	r0, #0
 8014cc2:	d1bf      	bne.n	8014c44 <ethernet_input+0x50>
        ip6_input(p, netif);
 8014cc4:	4639      	mov	r1, r7
 8014cc6:	4620      	mov	r0, r4
 8014cc8:	f7fc fba6 	bl	8011418 <ip6_input>
      break;
 8014ccc:	e7bd      	b.n	8014c4a <ethernet_input+0x56>
 8014cce:	bf00      	nop
 8014cd0:	08018d20 	.word	0x08018d20

08014cd4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cd8:	4605      	mov	r5, r0
 8014cda:	460c      	mov	r4, r1
 8014cdc:	4616      	mov	r6, r2
 8014cde:	461f      	mov	r7, r3
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014ce0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8014ce4:	f7f2 fa74 	bl	80071d0 <lwip_htons>
 8014ce8:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014cea:	210e      	movs	r1, #14
 8014cec:	4620      	mov	r0, r4
 8014cee:	f7f3 fce0 	bl	80086b2 <pbuf_add_header>
 8014cf2:	b9f0      	cbnz	r0, 8014d32 <ethernet_output+0x5e>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014cf4:	6863      	ldr	r3, [r4, #4]
  ethhdr->type = eth_type_be;
 8014cf6:	f8a3 800c 	strh.w	r8, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014cfa:	683a      	ldr	r2, [r7, #0]
 8014cfc:	601a      	str	r2, [r3, #0]
 8014cfe:	88ba      	ldrh	r2, [r7, #4]
 8014d00:	809a      	strh	r2, [r3, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014d02:	6832      	ldr	r2, [r6, #0]
 8014d04:	f8c3 2006 	str.w	r2, [r3, #6]
 8014d08:	88b2      	ldrh	r2, [r6, #4]
 8014d0a:	815a      	strh	r2, [r3, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014d0c:	f895 30da 	ldrb.w	r3, [r5, #218]	; 0xda
 8014d10:	2b06      	cmp	r3, #6
 8014d12:	d106      	bne.n	8014d22 <ethernet_output+0x4e>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014d14:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
 8014d18:	4621      	mov	r1, r4
 8014d1a:	4628      	mov	r0, r5
 8014d1c:	4798      	blx	r3
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8014d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014d22:	4b05      	ldr	r3, [pc, #20]	; (8014d38 <ethernet_output+0x64>)
 8014d24:	f240 1233 	movw	r2, #307	; 0x133
 8014d28:	4904      	ldr	r1, [pc, #16]	; (8014d3c <ethernet_output+0x68>)
 8014d2a:	4805      	ldr	r0, [pc, #20]	; (8014d40 <ethernet_output+0x6c>)
 8014d2c:	f000 f88a 	bl	8014e44 <iprintf>
 8014d30:	e7f0      	b.n	8014d14 <ethernet_output+0x40>
  return ERR_BUF;
 8014d32:	f06f 0001 	mvn.w	r0, #1
 8014d36:	e7f2      	b.n	8014d1e <ethernet_output+0x4a>
 8014d38:	08018d28 	.word	0x08018d28
 8014d3c:	08018d60 	.word	0x08018d60
 8014d40:	08015d2c 	.word	0x08015d2c

08014d44 <__libc_init_array>:
 8014d44:	b570      	push	{r4, r5, r6, lr}
 8014d46:	4e0d      	ldr	r6, [pc, #52]	; (8014d7c <__libc_init_array+0x38>)
 8014d48:	4c0d      	ldr	r4, [pc, #52]	; (8014d80 <__libc_init_array+0x3c>)
 8014d4a:	1ba4      	subs	r4, r4, r6
 8014d4c:	10a4      	asrs	r4, r4, #2
 8014d4e:	2500      	movs	r5, #0
 8014d50:	42a5      	cmp	r5, r4
 8014d52:	d109      	bne.n	8014d68 <__libc_init_array+0x24>
 8014d54:	4e0b      	ldr	r6, [pc, #44]	; (8014d84 <__libc_init_array+0x40>)
 8014d56:	4c0c      	ldr	r4, [pc, #48]	; (8014d88 <__libc_init_array+0x44>)
 8014d58:	f000 ffa2 	bl	8015ca0 <_init>
 8014d5c:	1ba4      	subs	r4, r4, r6
 8014d5e:	10a4      	asrs	r4, r4, #2
 8014d60:	2500      	movs	r5, #0
 8014d62:	42a5      	cmp	r5, r4
 8014d64:	d105      	bne.n	8014d72 <__libc_init_array+0x2e>
 8014d66:	bd70      	pop	{r4, r5, r6, pc}
 8014d68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014d6c:	4798      	blx	r3
 8014d6e:	3501      	adds	r5, #1
 8014d70:	e7ee      	b.n	8014d50 <__libc_init_array+0xc>
 8014d72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014d76:	4798      	blx	r3
 8014d78:	3501      	adds	r5, #1
 8014d7a:	e7f2      	b.n	8014d62 <__libc_init_array+0x1e>
 8014d7c:	08018f48 	.word	0x08018f48
 8014d80:	08018f48 	.word	0x08018f48
 8014d84:	08018f48 	.word	0x08018f48
 8014d88:	08018f4c 	.word	0x08018f4c

08014d8c <__locale_ctype_ptr>:
 8014d8c:	4b04      	ldr	r3, [pc, #16]	; (8014da0 <__locale_ctype_ptr+0x14>)
 8014d8e:	4a05      	ldr	r2, [pc, #20]	; (8014da4 <__locale_ctype_ptr+0x18>)
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	6a1b      	ldr	r3, [r3, #32]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	bf08      	it	eq
 8014d98:	4613      	moveq	r3, r2
 8014d9a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8014d9e:	4770      	bx	lr
 8014da0:	20000020 	.word	0x20000020
 8014da4:	20000084 	.word	0x20000084

08014da8 <__ascii_mbtowc>:
 8014da8:	b082      	sub	sp, #8
 8014daa:	b901      	cbnz	r1, 8014dae <__ascii_mbtowc+0x6>
 8014dac:	a901      	add	r1, sp, #4
 8014dae:	b142      	cbz	r2, 8014dc2 <__ascii_mbtowc+0x1a>
 8014db0:	b14b      	cbz	r3, 8014dc6 <__ascii_mbtowc+0x1e>
 8014db2:	7813      	ldrb	r3, [r2, #0]
 8014db4:	600b      	str	r3, [r1, #0]
 8014db6:	7812      	ldrb	r2, [r2, #0]
 8014db8:	1c10      	adds	r0, r2, #0
 8014dba:	bf18      	it	ne
 8014dbc:	2001      	movne	r0, #1
 8014dbe:	b002      	add	sp, #8
 8014dc0:	4770      	bx	lr
 8014dc2:	4610      	mov	r0, r2
 8014dc4:	e7fb      	b.n	8014dbe <__ascii_mbtowc+0x16>
 8014dc6:	f06f 0001 	mvn.w	r0, #1
 8014dca:	e7f8      	b.n	8014dbe <__ascii_mbtowc+0x16>

08014dcc <memcmp>:
 8014dcc:	b530      	push	{r4, r5, lr}
 8014dce:	2400      	movs	r4, #0
 8014dd0:	42a2      	cmp	r2, r4
 8014dd2:	d101      	bne.n	8014dd8 <memcmp+0xc>
 8014dd4:	2000      	movs	r0, #0
 8014dd6:	e007      	b.n	8014de8 <memcmp+0x1c>
 8014dd8:	5d03      	ldrb	r3, [r0, r4]
 8014dda:	3401      	adds	r4, #1
 8014ddc:	190d      	adds	r5, r1, r4
 8014dde:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8014de2:	42ab      	cmp	r3, r5
 8014de4:	d0f4      	beq.n	8014dd0 <memcmp+0x4>
 8014de6:	1b58      	subs	r0, r3, r5
 8014de8:	bd30      	pop	{r4, r5, pc}

08014dea <memcpy>:
 8014dea:	b510      	push	{r4, lr}
 8014dec:	1e43      	subs	r3, r0, #1
 8014dee:	440a      	add	r2, r1
 8014df0:	4291      	cmp	r1, r2
 8014df2:	d100      	bne.n	8014df6 <memcpy+0xc>
 8014df4:	bd10      	pop	{r4, pc}
 8014df6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014dfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014dfe:	e7f7      	b.n	8014df0 <memcpy+0x6>

08014e00 <memmove>:
 8014e00:	4288      	cmp	r0, r1
 8014e02:	b510      	push	{r4, lr}
 8014e04:	eb01 0302 	add.w	r3, r1, r2
 8014e08:	d807      	bhi.n	8014e1a <memmove+0x1a>
 8014e0a:	1e42      	subs	r2, r0, #1
 8014e0c:	4299      	cmp	r1, r3
 8014e0e:	d00a      	beq.n	8014e26 <memmove+0x26>
 8014e10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e14:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014e18:	e7f8      	b.n	8014e0c <memmove+0xc>
 8014e1a:	4283      	cmp	r3, r0
 8014e1c:	d9f5      	bls.n	8014e0a <memmove+0xa>
 8014e1e:	1881      	adds	r1, r0, r2
 8014e20:	1ad2      	subs	r2, r2, r3
 8014e22:	42d3      	cmn	r3, r2
 8014e24:	d100      	bne.n	8014e28 <memmove+0x28>
 8014e26:	bd10      	pop	{r4, pc}
 8014e28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014e2c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014e30:	e7f7      	b.n	8014e22 <memmove+0x22>

08014e32 <memset>:
 8014e32:	4402      	add	r2, r0
 8014e34:	4603      	mov	r3, r0
 8014e36:	4293      	cmp	r3, r2
 8014e38:	d100      	bne.n	8014e3c <memset+0xa>
 8014e3a:	4770      	bx	lr
 8014e3c:	f803 1b01 	strb.w	r1, [r3], #1
 8014e40:	e7f9      	b.n	8014e36 <memset+0x4>
	...

08014e44 <iprintf>:
 8014e44:	b40f      	push	{r0, r1, r2, r3}
 8014e46:	4b0a      	ldr	r3, [pc, #40]	; (8014e70 <iprintf+0x2c>)
 8014e48:	b513      	push	{r0, r1, r4, lr}
 8014e4a:	681c      	ldr	r4, [r3, #0]
 8014e4c:	b124      	cbz	r4, 8014e58 <iprintf+0x14>
 8014e4e:	69a3      	ldr	r3, [r4, #24]
 8014e50:	b913      	cbnz	r3, 8014e58 <iprintf+0x14>
 8014e52:	4620      	mov	r0, r4
 8014e54:	f000 f890 	bl	8014f78 <__sinit>
 8014e58:	ab05      	add	r3, sp, #20
 8014e5a:	9a04      	ldr	r2, [sp, #16]
 8014e5c:	68a1      	ldr	r1, [r4, #8]
 8014e5e:	9301      	str	r3, [sp, #4]
 8014e60:	4620      	mov	r0, r4
 8014e62:	f000 f9ed 	bl	8015240 <_vfiprintf_r>
 8014e66:	b002      	add	sp, #8
 8014e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e6c:	b004      	add	sp, #16
 8014e6e:	4770      	bx	lr
 8014e70:	20000020 	.word	0x20000020

08014e74 <rand>:
 8014e74:	b538      	push	{r3, r4, r5, lr}
 8014e76:	4b13      	ldr	r3, [pc, #76]	; (8014ec4 <rand+0x50>)
 8014e78:	681c      	ldr	r4, [r3, #0]
 8014e7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014e7c:	b97b      	cbnz	r3, 8014e9e <rand+0x2a>
 8014e7e:	2018      	movs	r0, #24
 8014e80:	f000 f904 	bl	801508c <malloc>
 8014e84:	4a10      	ldr	r2, [pc, #64]	; (8014ec8 <rand+0x54>)
 8014e86:	4b11      	ldr	r3, [pc, #68]	; (8014ecc <rand+0x58>)
 8014e88:	63a0      	str	r0, [r4, #56]	; 0x38
 8014e8a:	e9c0 2300 	strd	r2, r3, [r0]
 8014e8e:	4b10      	ldr	r3, [pc, #64]	; (8014ed0 <rand+0x5c>)
 8014e90:	6083      	str	r3, [r0, #8]
 8014e92:	230b      	movs	r3, #11
 8014e94:	8183      	strh	r3, [r0, #12]
 8014e96:	2201      	movs	r2, #1
 8014e98:	2300      	movs	r3, #0
 8014e9a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014e9e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014ea0:	480c      	ldr	r0, [pc, #48]	; (8014ed4 <rand+0x60>)
 8014ea2:	690a      	ldr	r2, [r1, #16]
 8014ea4:	694b      	ldr	r3, [r1, #20]
 8014ea6:	4c0c      	ldr	r4, [pc, #48]	; (8014ed8 <rand+0x64>)
 8014ea8:	4350      	muls	r0, r2
 8014eaa:	fb04 0003 	mla	r0, r4, r3, r0
 8014eae:	fba2 2304 	umull	r2, r3, r2, r4
 8014eb2:	4403      	add	r3, r0
 8014eb4:	1c54      	adds	r4, r2, #1
 8014eb6:	f143 0500 	adc.w	r5, r3, #0
 8014eba:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8014ebe:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8014ec2:	bd38      	pop	{r3, r4, r5, pc}
 8014ec4:	20000020 	.word	0x20000020
 8014ec8:	abcd330e 	.word	0xabcd330e
 8014ecc:	e66d1234 	.word	0xe66d1234
 8014ed0:	0005deec 	.word	0x0005deec
 8014ed4:	5851f42d 	.word	0x5851f42d
 8014ed8:	4c957f2d 	.word	0x4c957f2d

08014edc <__ascii_wctomb>:
 8014edc:	b149      	cbz	r1, 8014ef2 <__ascii_wctomb+0x16>
 8014ede:	2aff      	cmp	r2, #255	; 0xff
 8014ee0:	bf85      	ittet	hi
 8014ee2:	238a      	movhi	r3, #138	; 0x8a
 8014ee4:	6003      	strhi	r3, [r0, #0]
 8014ee6:	700a      	strbls	r2, [r1, #0]
 8014ee8:	f04f 30ff 	movhi.w	r0, #4294967295
 8014eec:	bf98      	it	ls
 8014eee:	2001      	movls	r0, #1
 8014ef0:	4770      	bx	lr
 8014ef2:	4608      	mov	r0, r1
 8014ef4:	4770      	bx	lr
	...

08014ef8 <std>:
 8014ef8:	2300      	movs	r3, #0
 8014efa:	b510      	push	{r4, lr}
 8014efc:	4604      	mov	r4, r0
 8014efe:	e9c0 3300 	strd	r3, r3, [r0]
 8014f02:	6083      	str	r3, [r0, #8]
 8014f04:	8181      	strh	r1, [r0, #12]
 8014f06:	6643      	str	r3, [r0, #100]	; 0x64
 8014f08:	81c2      	strh	r2, [r0, #14]
 8014f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014f0e:	6183      	str	r3, [r0, #24]
 8014f10:	4619      	mov	r1, r3
 8014f12:	2208      	movs	r2, #8
 8014f14:	305c      	adds	r0, #92	; 0x5c
 8014f16:	f7ff ff8c 	bl	8014e32 <memset>
 8014f1a:	4b05      	ldr	r3, [pc, #20]	; (8014f30 <std+0x38>)
 8014f1c:	6263      	str	r3, [r4, #36]	; 0x24
 8014f1e:	4b05      	ldr	r3, [pc, #20]	; (8014f34 <std+0x3c>)
 8014f20:	62a3      	str	r3, [r4, #40]	; 0x28
 8014f22:	4b05      	ldr	r3, [pc, #20]	; (8014f38 <std+0x40>)
 8014f24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014f26:	4b05      	ldr	r3, [pc, #20]	; (8014f3c <std+0x44>)
 8014f28:	6224      	str	r4, [r4, #32]
 8014f2a:	6323      	str	r3, [r4, #48]	; 0x30
 8014f2c:	bd10      	pop	{r4, pc}
 8014f2e:	bf00      	nop
 8014f30:	0801579d 	.word	0x0801579d
 8014f34:	080157bf 	.word	0x080157bf
 8014f38:	080157f7 	.word	0x080157f7
 8014f3c:	0801581b 	.word	0x0801581b

08014f40 <_cleanup_r>:
 8014f40:	4901      	ldr	r1, [pc, #4]	; (8014f48 <_cleanup_r+0x8>)
 8014f42:	f000 b885 	b.w	8015050 <_fwalk_reent>
 8014f46:	bf00      	nop
 8014f48:	08015af5 	.word	0x08015af5

08014f4c <__sfmoreglue>:
 8014f4c:	b570      	push	{r4, r5, r6, lr}
 8014f4e:	1e4a      	subs	r2, r1, #1
 8014f50:	2568      	movs	r5, #104	; 0x68
 8014f52:	4355      	muls	r5, r2
 8014f54:	460e      	mov	r6, r1
 8014f56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014f5a:	f000 f8ed 	bl	8015138 <_malloc_r>
 8014f5e:	4604      	mov	r4, r0
 8014f60:	b140      	cbz	r0, 8014f74 <__sfmoreglue+0x28>
 8014f62:	2100      	movs	r1, #0
 8014f64:	e9c0 1600 	strd	r1, r6, [r0]
 8014f68:	300c      	adds	r0, #12
 8014f6a:	60a0      	str	r0, [r4, #8]
 8014f6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014f70:	f7ff ff5f 	bl	8014e32 <memset>
 8014f74:	4620      	mov	r0, r4
 8014f76:	bd70      	pop	{r4, r5, r6, pc}

08014f78 <__sinit>:
 8014f78:	6983      	ldr	r3, [r0, #24]
 8014f7a:	b510      	push	{r4, lr}
 8014f7c:	4604      	mov	r4, r0
 8014f7e:	bb33      	cbnz	r3, 8014fce <__sinit+0x56>
 8014f80:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014f84:	6503      	str	r3, [r0, #80]	; 0x50
 8014f86:	4b12      	ldr	r3, [pc, #72]	; (8014fd0 <__sinit+0x58>)
 8014f88:	4a12      	ldr	r2, [pc, #72]	; (8014fd4 <__sinit+0x5c>)
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	6282      	str	r2, [r0, #40]	; 0x28
 8014f8e:	4298      	cmp	r0, r3
 8014f90:	bf04      	itt	eq
 8014f92:	2301      	moveq	r3, #1
 8014f94:	6183      	streq	r3, [r0, #24]
 8014f96:	f000 f81f 	bl	8014fd8 <__sfp>
 8014f9a:	6060      	str	r0, [r4, #4]
 8014f9c:	4620      	mov	r0, r4
 8014f9e:	f000 f81b 	bl	8014fd8 <__sfp>
 8014fa2:	60a0      	str	r0, [r4, #8]
 8014fa4:	4620      	mov	r0, r4
 8014fa6:	f000 f817 	bl	8014fd8 <__sfp>
 8014faa:	2200      	movs	r2, #0
 8014fac:	60e0      	str	r0, [r4, #12]
 8014fae:	2104      	movs	r1, #4
 8014fb0:	6860      	ldr	r0, [r4, #4]
 8014fb2:	f7ff ffa1 	bl	8014ef8 <std>
 8014fb6:	2201      	movs	r2, #1
 8014fb8:	2109      	movs	r1, #9
 8014fba:	68a0      	ldr	r0, [r4, #8]
 8014fbc:	f7ff ff9c 	bl	8014ef8 <std>
 8014fc0:	2202      	movs	r2, #2
 8014fc2:	2112      	movs	r1, #18
 8014fc4:	68e0      	ldr	r0, [r4, #12]
 8014fc6:	f7ff ff97 	bl	8014ef8 <std>
 8014fca:	2301      	movs	r3, #1
 8014fcc:	61a3      	str	r3, [r4, #24]
 8014fce:	bd10      	pop	{r4, pc}
 8014fd0:	08018d9c 	.word	0x08018d9c
 8014fd4:	08014f41 	.word	0x08014f41

08014fd8 <__sfp>:
 8014fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fda:	4b1b      	ldr	r3, [pc, #108]	; (8015048 <__sfp+0x70>)
 8014fdc:	681e      	ldr	r6, [r3, #0]
 8014fde:	69b3      	ldr	r3, [r6, #24]
 8014fe0:	4607      	mov	r7, r0
 8014fe2:	b913      	cbnz	r3, 8014fea <__sfp+0x12>
 8014fe4:	4630      	mov	r0, r6
 8014fe6:	f7ff ffc7 	bl	8014f78 <__sinit>
 8014fea:	3648      	adds	r6, #72	; 0x48
 8014fec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014ff0:	3b01      	subs	r3, #1
 8014ff2:	d503      	bpl.n	8014ffc <__sfp+0x24>
 8014ff4:	6833      	ldr	r3, [r6, #0]
 8014ff6:	b133      	cbz	r3, 8015006 <__sfp+0x2e>
 8014ff8:	6836      	ldr	r6, [r6, #0]
 8014ffa:	e7f7      	b.n	8014fec <__sfp+0x14>
 8014ffc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015000:	b16d      	cbz	r5, 801501e <__sfp+0x46>
 8015002:	3468      	adds	r4, #104	; 0x68
 8015004:	e7f4      	b.n	8014ff0 <__sfp+0x18>
 8015006:	2104      	movs	r1, #4
 8015008:	4638      	mov	r0, r7
 801500a:	f7ff ff9f 	bl	8014f4c <__sfmoreglue>
 801500e:	6030      	str	r0, [r6, #0]
 8015010:	2800      	cmp	r0, #0
 8015012:	d1f1      	bne.n	8014ff8 <__sfp+0x20>
 8015014:	230c      	movs	r3, #12
 8015016:	603b      	str	r3, [r7, #0]
 8015018:	4604      	mov	r4, r0
 801501a:	4620      	mov	r0, r4
 801501c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801501e:	4b0b      	ldr	r3, [pc, #44]	; (801504c <__sfp+0x74>)
 8015020:	6665      	str	r5, [r4, #100]	; 0x64
 8015022:	e9c4 5500 	strd	r5, r5, [r4]
 8015026:	60a5      	str	r5, [r4, #8]
 8015028:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801502c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015030:	2208      	movs	r2, #8
 8015032:	4629      	mov	r1, r5
 8015034:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015038:	f7ff fefb 	bl	8014e32 <memset>
 801503c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015040:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015044:	e7e9      	b.n	801501a <__sfp+0x42>
 8015046:	bf00      	nop
 8015048:	08018d9c 	.word	0x08018d9c
 801504c:	ffff0001 	.word	0xffff0001

08015050 <_fwalk_reent>:
 8015050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015054:	4680      	mov	r8, r0
 8015056:	4689      	mov	r9, r1
 8015058:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801505c:	2600      	movs	r6, #0
 801505e:	b914      	cbnz	r4, 8015066 <_fwalk_reent+0x16>
 8015060:	4630      	mov	r0, r6
 8015062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015066:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801506a:	3f01      	subs	r7, #1
 801506c:	d501      	bpl.n	8015072 <_fwalk_reent+0x22>
 801506e:	6824      	ldr	r4, [r4, #0]
 8015070:	e7f5      	b.n	801505e <_fwalk_reent+0xe>
 8015072:	89ab      	ldrh	r3, [r5, #12]
 8015074:	2b01      	cmp	r3, #1
 8015076:	d907      	bls.n	8015088 <_fwalk_reent+0x38>
 8015078:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801507c:	3301      	adds	r3, #1
 801507e:	d003      	beq.n	8015088 <_fwalk_reent+0x38>
 8015080:	4629      	mov	r1, r5
 8015082:	4640      	mov	r0, r8
 8015084:	47c8      	blx	r9
 8015086:	4306      	orrs	r6, r0
 8015088:	3568      	adds	r5, #104	; 0x68
 801508a:	e7ee      	b.n	801506a <_fwalk_reent+0x1a>

0801508c <malloc>:
 801508c:	4b02      	ldr	r3, [pc, #8]	; (8015098 <malloc+0xc>)
 801508e:	4601      	mov	r1, r0
 8015090:	6818      	ldr	r0, [r3, #0]
 8015092:	f000 b851 	b.w	8015138 <_malloc_r>
 8015096:	bf00      	nop
 8015098:	20000020 	.word	0x20000020

0801509c <_free_r>:
 801509c:	b538      	push	{r3, r4, r5, lr}
 801509e:	4605      	mov	r5, r0
 80150a0:	2900      	cmp	r1, #0
 80150a2:	d045      	beq.n	8015130 <_free_r+0x94>
 80150a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80150a8:	1f0c      	subs	r4, r1, #4
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	bfb8      	it	lt
 80150ae:	18e4      	addlt	r4, r4, r3
 80150b0:	f000 fdc0 	bl	8015c34 <__malloc_lock>
 80150b4:	4a1f      	ldr	r2, [pc, #124]	; (8015134 <_free_r+0x98>)
 80150b6:	6813      	ldr	r3, [r2, #0]
 80150b8:	4610      	mov	r0, r2
 80150ba:	b933      	cbnz	r3, 80150ca <_free_r+0x2e>
 80150bc:	6063      	str	r3, [r4, #4]
 80150be:	6014      	str	r4, [r2, #0]
 80150c0:	4628      	mov	r0, r5
 80150c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80150c6:	f000 bdb6 	b.w	8015c36 <__malloc_unlock>
 80150ca:	42a3      	cmp	r3, r4
 80150cc:	d90c      	bls.n	80150e8 <_free_r+0x4c>
 80150ce:	6821      	ldr	r1, [r4, #0]
 80150d0:	1862      	adds	r2, r4, r1
 80150d2:	4293      	cmp	r3, r2
 80150d4:	bf04      	itt	eq
 80150d6:	681a      	ldreq	r2, [r3, #0]
 80150d8:	685b      	ldreq	r3, [r3, #4]
 80150da:	6063      	str	r3, [r4, #4]
 80150dc:	bf04      	itt	eq
 80150de:	1852      	addeq	r2, r2, r1
 80150e0:	6022      	streq	r2, [r4, #0]
 80150e2:	6004      	str	r4, [r0, #0]
 80150e4:	e7ec      	b.n	80150c0 <_free_r+0x24>
 80150e6:	4613      	mov	r3, r2
 80150e8:	685a      	ldr	r2, [r3, #4]
 80150ea:	b10a      	cbz	r2, 80150f0 <_free_r+0x54>
 80150ec:	42a2      	cmp	r2, r4
 80150ee:	d9fa      	bls.n	80150e6 <_free_r+0x4a>
 80150f0:	6819      	ldr	r1, [r3, #0]
 80150f2:	1858      	adds	r0, r3, r1
 80150f4:	42a0      	cmp	r0, r4
 80150f6:	d10b      	bne.n	8015110 <_free_r+0x74>
 80150f8:	6820      	ldr	r0, [r4, #0]
 80150fa:	4401      	add	r1, r0
 80150fc:	1858      	adds	r0, r3, r1
 80150fe:	4282      	cmp	r2, r0
 8015100:	6019      	str	r1, [r3, #0]
 8015102:	d1dd      	bne.n	80150c0 <_free_r+0x24>
 8015104:	6810      	ldr	r0, [r2, #0]
 8015106:	6852      	ldr	r2, [r2, #4]
 8015108:	605a      	str	r2, [r3, #4]
 801510a:	4401      	add	r1, r0
 801510c:	6019      	str	r1, [r3, #0]
 801510e:	e7d7      	b.n	80150c0 <_free_r+0x24>
 8015110:	d902      	bls.n	8015118 <_free_r+0x7c>
 8015112:	230c      	movs	r3, #12
 8015114:	602b      	str	r3, [r5, #0]
 8015116:	e7d3      	b.n	80150c0 <_free_r+0x24>
 8015118:	6820      	ldr	r0, [r4, #0]
 801511a:	1821      	adds	r1, r4, r0
 801511c:	428a      	cmp	r2, r1
 801511e:	bf04      	itt	eq
 8015120:	6811      	ldreq	r1, [r2, #0]
 8015122:	6852      	ldreq	r2, [r2, #4]
 8015124:	6062      	str	r2, [r4, #4]
 8015126:	bf04      	itt	eq
 8015128:	1809      	addeq	r1, r1, r0
 801512a:	6021      	streq	r1, [r4, #0]
 801512c:	605c      	str	r4, [r3, #4]
 801512e:	e7c7      	b.n	80150c0 <_free_r+0x24>
 8015130:	bd38      	pop	{r3, r4, r5, pc}
 8015132:	bf00      	nop
 8015134:	200018e4 	.word	0x200018e4

08015138 <_malloc_r>:
 8015138:	b570      	push	{r4, r5, r6, lr}
 801513a:	1ccd      	adds	r5, r1, #3
 801513c:	f025 0503 	bic.w	r5, r5, #3
 8015140:	3508      	adds	r5, #8
 8015142:	2d0c      	cmp	r5, #12
 8015144:	bf38      	it	cc
 8015146:	250c      	movcc	r5, #12
 8015148:	2d00      	cmp	r5, #0
 801514a:	4606      	mov	r6, r0
 801514c:	db01      	blt.n	8015152 <_malloc_r+0x1a>
 801514e:	42a9      	cmp	r1, r5
 8015150:	d903      	bls.n	801515a <_malloc_r+0x22>
 8015152:	230c      	movs	r3, #12
 8015154:	6033      	str	r3, [r6, #0]
 8015156:	2000      	movs	r0, #0
 8015158:	bd70      	pop	{r4, r5, r6, pc}
 801515a:	f000 fd6b 	bl	8015c34 <__malloc_lock>
 801515e:	4a21      	ldr	r2, [pc, #132]	; (80151e4 <_malloc_r+0xac>)
 8015160:	6814      	ldr	r4, [r2, #0]
 8015162:	4621      	mov	r1, r4
 8015164:	b991      	cbnz	r1, 801518c <_malloc_r+0x54>
 8015166:	4c20      	ldr	r4, [pc, #128]	; (80151e8 <_malloc_r+0xb0>)
 8015168:	6823      	ldr	r3, [r4, #0]
 801516a:	b91b      	cbnz	r3, 8015174 <_malloc_r+0x3c>
 801516c:	4630      	mov	r0, r6
 801516e:	f000 fb05 	bl	801577c <_sbrk_r>
 8015172:	6020      	str	r0, [r4, #0]
 8015174:	4629      	mov	r1, r5
 8015176:	4630      	mov	r0, r6
 8015178:	f000 fb00 	bl	801577c <_sbrk_r>
 801517c:	1c43      	adds	r3, r0, #1
 801517e:	d124      	bne.n	80151ca <_malloc_r+0x92>
 8015180:	230c      	movs	r3, #12
 8015182:	6033      	str	r3, [r6, #0]
 8015184:	4630      	mov	r0, r6
 8015186:	f000 fd56 	bl	8015c36 <__malloc_unlock>
 801518a:	e7e4      	b.n	8015156 <_malloc_r+0x1e>
 801518c:	680b      	ldr	r3, [r1, #0]
 801518e:	1b5b      	subs	r3, r3, r5
 8015190:	d418      	bmi.n	80151c4 <_malloc_r+0x8c>
 8015192:	2b0b      	cmp	r3, #11
 8015194:	d90f      	bls.n	80151b6 <_malloc_r+0x7e>
 8015196:	600b      	str	r3, [r1, #0]
 8015198:	50cd      	str	r5, [r1, r3]
 801519a:	18cc      	adds	r4, r1, r3
 801519c:	4630      	mov	r0, r6
 801519e:	f000 fd4a 	bl	8015c36 <__malloc_unlock>
 80151a2:	f104 000b 	add.w	r0, r4, #11
 80151a6:	1d23      	adds	r3, r4, #4
 80151a8:	f020 0007 	bic.w	r0, r0, #7
 80151ac:	1ac3      	subs	r3, r0, r3
 80151ae:	d0d3      	beq.n	8015158 <_malloc_r+0x20>
 80151b0:	425a      	negs	r2, r3
 80151b2:	50e2      	str	r2, [r4, r3]
 80151b4:	e7d0      	b.n	8015158 <_malloc_r+0x20>
 80151b6:	428c      	cmp	r4, r1
 80151b8:	684b      	ldr	r3, [r1, #4]
 80151ba:	bf16      	itet	ne
 80151bc:	6063      	strne	r3, [r4, #4]
 80151be:	6013      	streq	r3, [r2, #0]
 80151c0:	460c      	movne	r4, r1
 80151c2:	e7eb      	b.n	801519c <_malloc_r+0x64>
 80151c4:	460c      	mov	r4, r1
 80151c6:	6849      	ldr	r1, [r1, #4]
 80151c8:	e7cc      	b.n	8015164 <_malloc_r+0x2c>
 80151ca:	1cc4      	adds	r4, r0, #3
 80151cc:	f024 0403 	bic.w	r4, r4, #3
 80151d0:	42a0      	cmp	r0, r4
 80151d2:	d005      	beq.n	80151e0 <_malloc_r+0xa8>
 80151d4:	1a21      	subs	r1, r4, r0
 80151d6:	4630      	mov	r0, r6
 80151d8:	f000 fad0 	bl	801577c <_sbrk_r>
 80151dc:	3001      	adds	r0, #1
 80151de:	d0cf      	beq.n	8015180 <_malloc_r+0x48>
 80151e0:	6025      	str	r5, [r4, #0]
 80151e2:	e7db      	b.n	801519c <_malloc_r+0x64>
 80151e4:	200018e4 	.word	0x200018e4
 80151e8:	200018e8 	.word	0x200018e8

080151ec <__sfputc_r>:
 80151ec:	6893      	ldr	r3, [r2, #8]
 80151ee:	3b01      	subs	r3, #1
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	b410      	push	{r4}
 80151f4:	6093      	str	r3, [r2, #8]
 80151f6:	da08      	bge.n	801520a <__sfputc_r+0x1e>
 80151f8:	6994      	ldr	r4, [r2, #24]
 80151fa:	42a3      	cmp	r3, r4
 80151fc:	db01      	blt.n	8015202 <__sfputc_r+0x16>
 80151fe:	290a      	cmp	r1, #10
 8015200:	d103      	bne.n	801520a <__sfputc_r+0x1e>
 8015202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015206:	f000 bb0d 	b.w	8015824 <__swbuf_r>
 801520a:	6813      	ldr	r3, [r2, #0]
 801520c:	1c58      	adds	r0, r3, #1
 801520e:	6010      	str	r0, [r2, #0]
 8015210:	7019      	strb	r1, [r3, #0]
 8015212:	4608      	mov	r0, r1
 8015214:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015218:	4770      	bx	lr

0801521a <__sfputs_r>:
 801521a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801521c:	4606      	mov	r6, r0
 801521e:	460f      	mov	r7, r1
 8015220:	4614      	mov	r4, r2
 8015222:	18d5      	adds	r5, r2, r3
 8015224:	42ac      	cmp	r4, r5
 8015226:	d101      	bne.n	801522c <__sfputs_r+0x12>
 8015228:	2000      	movs	r0, #0
 801522a:	e007      	b.n	801523c <__sfputs_r+0x22>
 801522c:	463a      	mov	r2, r7
 801522e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015232:	4630      	mov	r0, r6
 8015234:	f7ff ffda 	bl	80151ec <__sfputc_r>
 8015238:	1c43      	adds	r3, r0, #1
 801523a:	d1f3      	bne.n	8015224 <__sfputs_r+0xa>
 801523c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015240 <_vfiprintf_r>:
 8015240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015244:	460c      	mov	r4, r1
 8015246:	b09d      	sub	sp, #116	; 0x74
 8015248:	4617      	mov	r7, r2
 801524a:	461d      	mov	r5, r3
 801524c:	4606      	mov	r6, r0
 801524e:	b118      	cbz	r0, 8015258 <_vfiprintf_r+0x18>
 8015250:	6983      	ldr	r3, [r0, #24]
 8015252:	b90b      	cbnz	r3, 8015258 <_vfiprintf_r+0x18>
 8015254:	f7ff fe90 	bl	8014f78 <__sinit>
 8015258:	4b7c      	ldr	r3, [pc, #496]	; (801544c <_vfiprintf_r+0x20c>)
 801525a:	429c      	cmp	r4, r3
 801525c:	d158      	bne.n	8015310 <_vfiprintf_r+0xd0>
 801525e:	6874      	ldr	r4, [r6, #4]
 8015260:	89a3      	ldrh	r3, [r4, #12]
 8015262:	0718      	lsls	r0, r3, #28
 8015264:	d55e      	bpl.n	8015324 <_vfiprintf_r+0xe4>
 8015266:	6923      	ldr	r3, [r4, #16]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d05b      	beq.n	8015324 <_vfiprintf_r+0xe4>
 801526c:	2300      	movs	r3, #0
 801526e:	9309      	str	r3, [sp, #36]	; 0x24
 8015270:	2320      	movs	r3, #32
 8015272:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015276:	2330      	movs	r3, #48	; 0x30
 8015278:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801527c:	9503      	str	r5, [sp, #12]
 801527e:	f04f 0b01 	mov.w	fp, #1
 8015282:	46b8      	mov	r8, r7
 8015284:	4645      	mov	r5, r8
 8015286:	f815 3b01 	ldrb.w	r3, [r5], #1
 801528a:	b10b      	cbz	r3, 8015290 <_vfiprintf_r+0x50>
 801528c:	2b25      	cmp	r3, #37	; 0x25
 801528e:	d154      	bne.n	801533a <_vfiprintf_r+0xfa>
 8015290:	ebb8 0a07 	subs.w	sl, r8, r7
 8015294:	d00b      	beq.n	80152ae <_vfiprintf_r+0x6e>
 8015296:	4653      	mov	r3, sl
 8015298:	463a      	mov	r2, r7
 801529a:	4621      	mov	r1, r4
 801529c:	4630      	mov	r0, r6
 801529e:	f7ff ffbc 	bl	801521a <__sfputs_r>
 80152a2:	3001      	adds	r0, #1
 80152a4:	f000 80c2 	beq.w	801542c <_vfiprintf_r+0x1ec>
 80152a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152aa:	4453      	add	r3, sl
 80152ac:	9309      	str	r3, [sp, #36]	; 0x24
 80152ae:	f898 3000 	ldrb.w	r3, [r8]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	f000 80ba 	beq.w	801542c <_vfiprintf_r+0x1ec>
 80152b8:	2300      	movs	r3, #0
 80152ba:	f04f 32ff 	mov.w	r2, #4294967295
 80152be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80152c2:	9304      	str	r3, [sp, #16]
 80152c4:	9307      	str	r3, [sp, #28]
 80152c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80152ca:	931a      	str	r3, [sp, #104]	; 0x68
 80152cc:	46a8      	mov	r8, r5
 80152ce:	2205      	movs	r2, #5
 80152d0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80152d4:	485e      	ldr	r0, [pc, #376]	; (8015450 <_vfiprintf_r+0x210>)
 80152d6:	f7ea ff83 	bl	80001e0 <memchr>
 80152da:	9b04      	ldr	r3, [sp, #16]
 80152dc:	bb78      	cbnz	r0, 801533e <_vfiprintf_r+0xfe>
 80152de:	06d9      	lsls	r1, r3, #27
 80152e0:	bf44      	itt	mi
 80152e2:	2220      	movmi	r2, #32
 80152e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80152e8:	071a      	lsls	r2, r3, #28
 80152ea:	bf44      	itt	mi
 80152ec:	222b      	movmi	r2, #43	; 0x2b
 80152ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80152f2:	782a      	ldrb	r2, [r5, #0]
 80152f4:	2a2a      	cmp	r2, #42	; 0x2a
 80152f6:	d02a      	beq.n	801534e <_vfiprintf_r+0x10e>
 80152f8:	9a07      	ldr	r2, [sp, #28]
 80152fa:	46a8      	mov	r8, r5
 80152fc:	2000      	movs	r0, #0
 80152fe:	250a      	movs	r5, #10
 8015300:	4641      	mov	r1, r8
 8015302:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015306:	3b30      	subs	r3, #48	; 0x30
 8015308:	2b09      	cmp	r3, #9
 801530a:	d969      	bls.n	80153e0 <_vfiprintf_r+0x1a0>
 801530c:	b360      	cbz	r0, 8015368 <_vfiprintf_r+0x128>
 801530e:	e024      	b.n	801535a <_vfiprintf_r+0x11a>
 8015310:	4b50      	ldr	r3, [pc, #320]	; (8015454 <_vfiprintf_r+0x214>)
 8015312:	429c      	cmp	r4, r3
 8015314:	d101      	bne.n	801531a <_vfiprintf_r+0xda>
 8015316:	68b4      	ldr	r4, [r6, #8]
 8015318:	e7a2      	b.n	8015260 <_vfiprintf_r+0x20>
 801531a:	4b4f      	ldr	r3, [pc, #316]	; (8015458 <_vfiprintf_r+0x218>)
 801531c:	429c      	cmp	r4, r3
 801531e:	bf08      	it	eq
 8015320:	68f4      	ldreq	r4, [r6, #12]
 8015322:	e79d      	b.n	8015260 <_vfiprintf_r+0x20>
 8015324:	4621      	mov	r1, r4
 8015326:	4630      	mov	r0, r6
 8015328:	f000 fae0 	bl	80158ec <__swsetup_r>
 801532c:	2800      	cmp	r0, #0
 801532e:	d09d      	beq.n	801526c <_vfiprintf_r+0x2c>
 8015330:	f04f 30ff 	mov.w	r0, #4294967295
 8015334:	b01d      	add	sp, #116	; 0x74
 8015336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801533a:	46a8      	mov	r8, r5
 801533c:	e7a2      	b.n	8015284 <_vfiprintf_r+0x44>
 801533e:	4a44      	ldr	r2, [pc, #272]	; (8015450 <_vfiprintf_r+0x210>)
 8015340:	1a80      	subs	r0, r0, r2
 8015342:	fa0b f000 	lsl.w	r0, fp, r0
 8015346:	4318      	orrs	r0, r3
 8015348:	9004      	str	r0, [sp, #16]
 801534a:	4645      	mov	r5, r8
 801534c:	e7be      	b.n	80152cc <_vfiprintf_r+0x8c>
 801534e:	9a03      	ldr	r2, [sp, #12]
 8015350:	1d11      	adds	r1, r2, #4
 8015352:	6812      	ldr	r2, [r2, #0]
 8015354:	9103      	str	r1, [sp, #12]
 8015356:	2a00      	cmp	r2, #0
 8015358:	db01      	blt.n	801535e <_vfiprintf_r+0x11e>
 801535a:	9207      	str	r2, [sp, #28]
 801535c:	e004      	b.n	8015368 <_vfiprintf_r+0x128>
 801535e:	4252      	negs	r2, r2
 8015360:	f043 0302 	orr.w	r3, r3, #2
 8015364:	9207      	str	r2, [sp, #28]
 8015366:	9304      	str	r3, [sp, #16]
 8015368:	f898 3000 	ldrb.w	r3, [r8]
 801536c:	2b2e      	cmp	r3, #46	; 0x2e
 801536e:	d10e      	bne.n	801538e <_vfiprintf_r+0x14e>
 8015370:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015374:	2b2a      	cmp	r3, #42	; 0x2a
 8015376:	d138      	bne.n	80153ea <_vfiprintf_r+0x1aa>
 8015378:	9b03      	ldr	r3, [sp, #12]
 801537a:	1d1a      	adds	r2, r3, #4
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	9203      	str	r2, [sp, #12]
 8015380:	2b00      	cmp	r3, #0
 8015382:	bfb8      	it	lt
 8015384:	f04f 33ff 	movlt.w	r3, #4294967295
 8015388:	f108 0802 	add.w	r8, r8, #2
 801538c:	9305      	str	r3, [sp, #20]
 801538e:	4d33      	ldr	r5, [pc, #204]	; (801545c <_vfiprintf_r+0x21c>)
 8015390:	f898 1000 	ldrb.w	r1, [r8]
 8015394:	2203      	movs	r2, #3
 8015396:	4628      	mov	r0, r5
 8015398:	f7ea ff22 	bl	80001e0 <memchr>
 801539c:	b140      	cbz	r0, 80153b0 <_vfiprintf_r+0x170>
 801539e:	2340      	movs	r3, #64	; 0x40
 80153a0:	1b40      	subs	r0, r0, r5
 80153a2:	fa03 f000 	lsl.w	r0, r3, r0
 80153a6:	9b04      	ldr	r3, [sp, #16]
 80153a8:	4303      	orrs	r3, r0
 80153aa:	f108 0801 	add.w	r8, r8, #1
 80153ae:	9304      	str	r3, [sp, #16]
 80153b0:	f898 1000 	ldrb.w	r1, [r8]
 80153b4:	482a      	ldr	r0, [pc, #168]	; (8015460 <_vfiprintf_r+0x220>)
 80153b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80153ba:	2206      	movs	r2, #6
 80153bc:	f108 0701 	add.w	r7, r8, #1
 80153c0:	f7ea ff0e 	bl	80001e0 <memchr>
 80153c4:	2800      	cmp	r0, #0
 80153c6:	d037      	beq.n	8015438 <_vfiprintf_r+0x1f8>
 80153c8:	4b26      	ldr	r3, [pc, #152]	; (8015464 <_vfiprintf_r+0x224>)
 80153ca:	bb1b      	cbnz	r3, 8015414 <_vfiprintf_r+0x1d4>
 80153cc:	9b03      	ldr	r3, [sp, #12]
 80153ce:	3307      	adds	r3, #7
 80153d0:	f023 0307 	bic.w	r3, r3, #7
 80153d4:	3308      	adds	r3, #8
 80153d6:	9303      	str	r3, [sp, #12]
 80153d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153da:	444b      	add	r3, r9
 80153dc:	9309      	str	r3, [sp, #36]	; 0x24
 80153de:	e750      	b.n	8015282 <_vfiprintf_r+0x42>
 80153e0:	fb05 3202 	mla	r2, r5, r2, r3
 80153e4:	2001      	movs	r0, #1
 80153e6:	4688      	mov	r8, r1
 80153e8:	e78a      	b.n	8015300 <_vfiprintf_r+0xc0>
 80153ea:	2300      	movs	r3, #0
 80153ec:	f108 0801 	add.w	r8, r8, #1
 80153f0:	9305      	str	r3, [sp, #20]
 80153f2:	4619      	mov	r1, r3
 80153f4:	250a      	movs	r5, #10
 80153f6:	4640      	mov	r0, r8
 80153f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80153fc:	3a30      	subs	r2, #48	; 0x30
 80153fe:	2a09      	cmp	r2, #9
 8015400:	d903      	bls.n	801540a <_vfiprintf_r+0x1ca>
 8015402:	2b00      	cmp	r3, #0
 8015404:	d0c3      	beq.n	801538e <_vfiprintf_r+0x14e>
 8015406:	9105      	str	r1, [sp, #20]
 8015408:	e7c1      	b.n	801538e <_vfiprintf_r+0x14e>
 801540a:	fb05 2101 	mla	r1, r5, r1, r2
 801540e:	2301      	movs	r3, #1
 8015410:	4680      	mov	r8, r0
 8015412:	e7f0      	b.n	80153f6 <_vfiprintf_r+0x1b6>
 8015414:	ab03      	add	r3, sp, #12
 8015416:	9300      	str	r3, [sp, #0]
 8015418:	4622      	mov	r2, r4
 801541a:	4b13      	ldr	r3, [pc, #76]	; (8015468 <_vfiprintf_r+0x228>)
 801541c:	a904      	add	r1, sp, #16
 801541e:	4630      	mov	r0, r6
 8015420:	f3af 8000 	nop.w
 8015424:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015428:	4681      	mov	r9, r0
 801542a:	d1d5      	bne.n	80153d8 <_vfiprintf_r+0x198>
 801542c:	89a3      	ldrh	r3, [r4, #12]
 801542e:	065b      	lsls	r3, r3, #25
 8015430:	f53f af7e 	bmi.w	8015330 <_vfiprintf_r+0xf0>
 8015434:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015436:	e77d      	b.n	8015334 <_vfiprintf_r+0xf4>
 8015438:	ab03      	add	r3, sp, #12
 801543a:	9300      	str	r3, [sp, #0]
 801543c:	4622      	mov	r2, r4
 801543e:	4b0a      	ldr	r3, [pc, #40]	; (8015468 <_vfiprintf_r+0x228>)
 8015440:	a904      	add	r1, sp, #16
 8015442:	4630      	mov	r0, r6
 8015444:	f000 f888 	bl	8015558 <_printf_i>
 8015448:	e7ec      	b.n	8015424 <_vfiprintf_r+0x1e4>
 801544a:	bf00      	nop
 801544c:	08018ecc 	.word	0x08018ecc
 8015450:	08018f0c 	.word	0x08018f0c
 8015454:	08018eec 	.word	0x08018eec
 8015458:	08018eac 	.word	0x08018eac
 801545c:	08018f12 	.word	0x08018f12
 8015460:	08018f16 	.word	0x08018f16
 8015464:	00000000 	.word	0x00000000
 8015468:	0801521b 	.word	0x0801521b

0801546c <_printf_common>:
 801546c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015470:	4691      	mov	r9, r2
 8015472:	461f      	mov	r7, r3
 8015474:	688a      	ldr	r2, [r1, #8]
 8015476:	690b      	ldr	r3, [r1, #16]
 8015478:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801547c:	4293      	cmp	r3, r2
 801547e:	bfb8      	it	lt
 8015480:	4613      	movlt	r3, r2
 8015482:	f8c9 3000 	str.w	r3, [r9]
 8015486:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801548a:	4606      	mov	r6, r0
 801548c:	460c      	mov	r4, r1
 801548e:	b112      	cbz	r2, 8015496 <_printf_common+0x2a>
 8015490:	3301      	adds	r3, #1
 8015492:	f8c9 3000 	str.w	r3, [r9]
 8015496:	6823      	ldr	r3, [r4, #0]
 8015498:	0699      	lsls	r1, r3, #26
 801549a:	bf42      	ittt	mi
 801549c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80154a0:	3302      	addmi	r3, #2
 80154a2:	f8c9 3000 	strmi.w	r3, [r9]
 80154a6:	6825      	ldr	r5, [r4, #0]
 80154a8:	f015 0506 	ands.w	r5, r5, #6
 80154ac:	d107      	bne.n	80154be <_printf_common+0x52>
 80154ae:	f104 0a19 	add.w	sl, r4, #25
 80154b2:	68e3      	ldr	r3, [r4, #12]
 80154b4:	f8d9 2000 	ldr.w	r2, [r9]
 80154b8:	1a9b      	subs	r3, r3, r2
 80154ba:	42ab      	cmp	r3, r5
 80154bc:	dc28      	bgt.n	8015510 <_printf_common+0xa4>
 80154be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80154c2:	6822      	ldr	r2, [r4, #0]
 80154c4:	3300      	adds	r3, #0
 80154c6:	bf18      	it	ne
 80154c8:	2301      	movne	r3, #1
 80154ca:	0692      	lsls	r2, r2, #26
 80154cc:	d42d      	bmi.n	801552a <_printf_common+0xbe>
 80154ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80154d2:	4639      	mov	r1, r7
 80154d4:	4630      	mov	r0, r6
 80154d6:	47c0      	blx	r8
 80154d8:	3001      	adds	r0, #1
 80154da:	d020      	beq.n	801551e <_printf_common+0xb2>
 80154dc:	6823      	ldr	r3, [r4, #0]
 80154de:	68e5      	ldr	r5, [r4, #12]
 80154e0:	f8d9 2000 	ldr.w	r2, [r9]
 80154e4:	f003 0306 	and.w	r3, r3, #6
 80154e8:	2b04      	cmp	r3, #4
 80154ea:	bf08      	it	eq
 80154ec:	1aad      	subeq	r5, r5, r2
 80154ee:	68a3      	ldr	r3, [r4, #8]
 80154f0:	6922      	ldr	r2, [r4, #16]
 80154f2:	bf0c      	ite	eq
 80154f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80154f8:	2500      	movne	r5, #0
 80154fa:	4293      	cmp	r3, r2
 80154fc:	bfc4      	itt	gt
 80154fe:	1a9b      	subgt	r3, r3, r2
 8015500:	18ed      	addgt	r5, r5, r3
 8015502:	f04f 0900 	mov.w	r9, #0
 8015506:	341a      	adds	r4, #26
 8015508:	454d      	cmp	r5, r9
 801550a:	d11a      	bne.n	8015542 <_printf_common+0xd6>
 801550c:	2000      	movs	r0, #0
 801550e:	e008      	b.n	8015522 <_printf_common+0xb6>
 8015510:	2301      	movs	r3, #1
 8015512:	4652      	mov	r2, sl
 8015514:	4639      	mov	r1, r7
 8015516:	4630      	mov	r0, r6
 8015518:	47c0      	blx	r8
 801551a:	3001      	adds	r0, #1
 801551c:	d103      	bne.n	8015526 <_printf_common+0xba>
 801551e:	f04f 30ff 	mov.w	r0, #4294967295
 8015522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015526:	3501      	adds	r5, #1
 8015528:	e7c3      	b.n	80154b2 <_printf_common+0x46>
 801552a:	18e1      	adds	r1, r4, r3
 801552c:	1c5a      	adds	r2, r3, #1
 801552e:	2030      	movs	r0, #48	; 0x30
 8015530:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015534:	4422      	add	r2, r4
 8015536:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801553a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801553e:	3302      	adds	r3, #2
 8015540:	e7c5      	b.n	80154ce <_printf_common+0x62>
 8015542:	2301      	movs	r3, #1
 8015544:	4622      	mov	r2, r4
 8015546:	4639      	mov	r1, r7
 8015548:	4630      	mov	r0, r6
 801554a:	47c0      	blx	r8
 801554c:	3001      	adds	r0, #1
 801554e:	d0e6      	beq.n	801551e <_printf_common+0xb2>
 8015550:	f109 0901 	add.w	r9, r9, #1
 8015554:	e7d8      	b.n	8015508 <_printf_common+0x9c>
	...

08015558 <_printf_i>:
 8015558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801555c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015560:	460c      	mov	r4, r1
 8015562:	7e09      	ldrb	r1, [r1, #24]
 8015564:	b085      	sub	sp, #20
 8015566:	296e      	cmp	r1, #110	; 0x6e
 8015568:	4617      	mov	r7, r2
 801556a:	4606      	mov	r6, r0
 801556c:	4698      	mov	r8, r3
 801556e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015570:	f000 80b3 	beq.w	80156da <_printf_i+0x182>
 8015574:	d822      	bhi.n	80155bc <_printf_i+0x64>
 8015576:	2963      	cmp	r1, #99	; 0x63
 8015578:	d036      	beq.n	80155e8 <_printf_i+0x90>
 801557a:	d80a      	bhi.n	8015592 <_printf_i+0x3a>
 801557c:	2900      	cmp	r1, #0
 801557e:	f000 80b9 	beq.w	80156f4 <_printf_i+0x19c>
 8015582:	2958      	cmp	r1, #88	; 0x58
 8015584:	f000 8083 	beq.w	801568e <_printf_i+0x136>
 8015588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801558c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015590:	e032      	b.n	80155f8 <_printf_i+0xa0>
 8015592:	2964      	cmp	r1, #100	; 0x64
 8015594:	d001      	beq.n	801559a <_printf_i+0x42>
 8015596:	2969      	cmp	r1, #105	; 0x69
 8015598:	d1f6      	bne.n	8015588 <_printf_i+0x30>
 801559a:	6820      	ldr	r0, [r4, #0]
 801559c:	6813      	ldr	r3, [r2, #0]
 801559e:	0605      	lsls	r5, r0, #24
 80155a0:	f103 0104 	add.w	r1, r3, #4
 80155a4:	d52a      	bpl.n	80155fc <_printf_i+0xa4>
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	6011      	str	r1, [r2, #0]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	da03      	bge.n	80155b6 <_printf_i+0x5e>
 80155ae:	222d      	movs	r2, #45	; 0x2d
 80155b0:	425b      	negs	r3, r3
 80155b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80155b6:	486f      	ldr	r0, [pc, #444]	; (8015774 <_printf_i+0x21c>)
 80155b8:	220a      	movs	r2, #10
 80155ba:	e039      	b.n	8015630 <_printf_i+0xd8>
 80155bc:	2973      	cmp	r1, #115	; 0x73
 80155be:	f000 809d 	beq.w	80156fc <_printf_i+0x1a4>
 80155c2:	d808      	bhi.n	80155d6 <_printf_i+0x7e>
 80155c4:	296f      	cmp	r1, #111	; 0x6f
 80155c6:	d020      	beq.n	801560a <_printf_i+0xb2>
 80155c8:	2970      	cmp	r1, #112	; 0x70
 80155ca:	d1dd      	bne.n	8015588 <_printf_i+0x30>
 80155cc:	6823      	ldr	r3, [r4, #0]
 80155ce:	f043 0320 	orr.w	r3, r3, #32
 80155d2:	6023      	str	r3, [r4, #0]
 80155d4:	e003      	b.n	80155de <_printf_i+0x86>
 80155d6:	2975      	cmp	r1, #117	; 0x75
 80155d8:	d017      	beq.n	801560a <_printf_i+0xb2>
 80155da:	2978      	cmp	r1, #120	; 0x78
 80155dc:	d1d4      	bne.n	8015588 <_printf_i+0x30>
 80155de:	2378      	movs	r3, #120	; 0x78
 80155e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80155e4:	4864      	ldr	r0, [pc, #400]	; (8015778 <_printf_i+0x220>)
 80155e6:	e055      	b.n	8015694 <_printf_i+0x13c>
 80155e8:	6813      	ldr	r3, [r2, #0]
 80155ea:	1d19      	adds	r1, r3, #4
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	6011      	str	r1, [r2, #0]
 80155f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80155f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80155f8:	2301      	movs	r3, #1
 80155fa:	e08c      	b.n	8015716 <_printf_i+0x1be>
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	6011      	str	r1, [r2, #0]
 8015600:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015604:	bf18      	it	ne
 8015606:	b21b      	sxthne	r3, r3
 8015608:	e7cf      	b.n	80155aa <_printf_i+0x52>
 801560a:	6813      	ldr	r3, [r2, #0]
 801560c:	6825      	ldr	r5, [r4, #0]
 801560e:	1d18      	adds	r0, r3, #4
 8015610:	6010      	str	r0, [r2, #0]
 8015612:	0628      	lsls	r0, r5, #24
 8015614:	d501      	bpl.n	801561a <_printf_i+0xc2>
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	e002      	b.n	8015620 <_printf_i+0xc8>
 801561a:	0668      	lsls	r0, r5, #25
 801561c:	d5fb      	bpl.n	8015616 <_printf_i+0xbe>
 801561e:	881b      	ldrh	r3, [r3, #0]
 8015620:	4854      	ldr	r0, [pc, #336]	; (8015774 <_printf_i+0x21c>)
 8015622:	296f      	cmp	r1, #111	; 0x6f
 8015624:	bf14      	ite	ne
 8015626:	220a      	movne	r2, #10
 8015628:	2208      	moveq	r2, #8
 801562a:	2100      	movs	r1, #0
 801562c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015630:	6865      	ldr	r5, [r4, #4]
 8015632:	60a5      	str	r5, [r4, #8]
 8015634:	2d00      	cmp	r5, #0
 8015636:	f2c0 8095 	blt.w	8015764 <_printf_i+0x20c>
 801563a:	6821      	ldr	r1, [r4, #0]
 801563c:	f021 0104 	bic.w	r1, r1, #4
 8015640:	6021      	str	r1, [r4, #0]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d13d      	bne.n	80156c2 <_printf_i+0x16a>
 8015646:	2d00      	cmp	r5, #0
 8015648:	f040 808e 	bne.w	8015768 <_printf_i+0x210>
 801564c:	4665      	mov	r5, ip
 801564e:	2a08      	cmp	r2, #8
 8015650:	d10b      	bne.n	801566a <_printf_i+0x112>
 8015652:	6823      	ldr	r3, [r4, #0]
 8015654:	07db      	lsls	r3, r3, #31
 8015656:	d508      	bpl.n	801566a <_printf_i+0x112>
 8015658:	6923      	ldr	r3, [r4, #16]
 801565a:	6862      	ldr	r2, [r4, #4]
 801565c:	429a      	cmp	r2, r3
 801565e:	bfde      	ittt	le
 8015660:	2330      	movle	r3, #48	; 0x30
 8015662:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015666:	f105 35ff 	addle.w	r5, r5, #4294967295
 801566a:	ebac 0305 	sub.w	r3, ip, r5
 801566e:	6123      	str	r3, [r4, #16]
 8015670:	f8cd 8000 	str.w	r8, [sp]
 8015674:	463b      	mov	r3, r7
 8015676:	aa03      	add	r2, sp, #12
 8015678:	4621      	mov	r1, r4
 801567a:	4630      	mov	r0, r6
 801567c:	f7ff fef6 	bl	801546c <_printf_common>
 8015680:	3001      	adds	r0, #1
 8015682:	d14d      	bne.n	8015720 <_printf_i+0x1c8>
 8015684:	f04f 30ff 	mov.w	r0, #4294967295
 8015688:	b005      	add	sp, #20
 801568a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801568e:	4839      	ldr	r0, [pc, #228]	; (8015774 <_printf_i+0x21c>)
 8015690:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015694:	6813      	ldr	r3, [r2, #0]
 8015696:	6821      	ldr	r1, [r4, #0]
 8015698:	1d1d      	adds	r5, r3, #4
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	6015      	str	r5, [r2, #0]
 801569e:	060a      	lsls	r2, r1, #24
 80156a0:	d50b      	bpl.n	80156ba <_printf_i+0x162>
 80156a2:	07ca      	lsls	r2, r1, #31
 80156a4:	bf44      	itt	mi
 80156a6:	f041 0120 	orrmi.w	r1, r1, #32
 80156aa:	6021      	strmi	r1, [r4, #0]
 80156ac:	b91b      	cbnz	r3, 80156b6 <_printf_i+0x15e>
 80156ae:	6822      	ldr	r2, [r4, #0]
 80156b0:	f022 0220 	bic.w	r2, r2, #32
 80156b4:	6022      	str	r2, [r4, #0]
 80156b6:	2210      	movs	r2, #16
 80156b8:	e7b7      	b.n	801562a <_printf_i+0xd2>
 80156ba:	064d      	lsls	r5, r1, #25
 80156bc:	bf48      	it	mi
 80156be:	b29b      	uxthmi	r3, r3
 80156c0:	e7ef      	b.n	80156a2 <_printf_i+0x14a>
 80156c2:	4665      	mov	r5, ip
 80156c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80156c8:	fb02 3311 	mls	r3, r2, r1, r3
 80156cc:	5cc3      	ldrb	r3, [r0, r3]
 80156ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80156d2:	460b      	mov	r3, r1
 80156d4:	2900      	cmp	r1, #0
 80156d6:	d1f5      	bne.n	80156c4 <_printf_i+0x16c>
 80156d8:	e7b9      	b.n	801564e <_printf_i+0xf6>
 80156da:	6813      	ldr	r3, [r2, #0]
 80156dc:	6825      	ldr	r5, [r4, #0]
 80156de:	6961      	ldr	r1, [r4, #20]
 80156e0:	1d18      	adds	r0, r3, #4
 80156e2:	6010      	str	r0, [r2, #0]
 80156e4:	0628      	lsls	r0, r5, #24
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	d501      	bpl.n	80156ee <_printf_i+0x196>
 80156ea:	6019      	str	r1, [r3, #0]
 80156ec:	e002      	b.n	80156f4 <_printf_i+0x19c>
 80156ee:	066a      	lsls	r2, r5, #25
 80156f0:	d5fb      	bpl.n	80156ea <_printf_i+0x192>
 80156f2:	8019      	strh	r1, [r3, #0]
 80156f4:	2300      	movs	r3, #0
 80156f6:	6123      	str	r3, [r4, #16]
 80156f8:	4665      	mov	r5, ip
 80156fa:	e7b9      	b.n	8015670 <_printf_i+0x118>
 80156fc:	6813      	ldr	r3, [r2, #0]
 80156fe:	1d19      	adds	r1, r3, #4
 8015700:	6011      	str	r1, [r2, #0]
 8015702:	681d      	ldr	r5, [r3, #0]
 8015704:	6862      	ldr	r2, [r4, #4]
 8015706:	2100      	movs	r1, #0
 8015708:	4628      	mov	r0, r5
 801570a:	f7ea fd69 	bl	80001e0 <memchr>
 801570e:	b108      	cbz	r0, 8015714 <_printf_i+0x1bc>
 8015710:	1b40      	subs	r0, r0, r5
 8015712:	6060      	str	r0, [r4, #4]
 8015714:	6863      	ldr	r3, [r4, #4]
 8015716:	6123      	str	r3, [r4, #16]
 8015718:	2300      	movs	r3, #0
 801571a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801571e:	e7a7      	b.n	8015670 <_printf_i+0x118>
 8015720:	6923      	ldr	r3, [r4, #16]
 8015722:	462a      	mov	r2, r5
 8015724:	4639      	mov	r1, r7
 8015726:	4630      	mov	r0, r6
 8015728:	47c0      	blx	r8
 801572a:	3001      	adds	r0, #1
 801572c:	d0aa      	beq.n	8015684 <_printf_i+0x12c>
 801572e:	6823      	ldr	r3, [r4, #0]
 8015730:	079b      	lsls	r3, r3, #30
 8015732:	d413      	bmi.n	801575c <_printf_i+0x204>
 8015734:	68e0      	ldr	r0, [r4, #12]
 8015736:	9b03      	ldr	r3, [sp, #12]
 8015738:	4298      	cmp	r0, r3
 801573a:	bfb8      	it	lt
 801573c:	4618      	movlt	r0, r3
 801573e:	e7a3      	b.n	8015688 <_printf_i+0x130>
 8015740:	2301      	movs	r3, #1
 8015742:	464a      	mov	r2, r9
 8015744:	4639      	mov	r1, r7
 8015746:	4630      	mov	r0, r6
 8015748:	47c0      	blx	r8
 801574a:	3001      	adds	r0, #1
 801574c:	d09a      	beq.n	8015684 <_printf_i+0x12c>
 801574e:	3501      	adds	r5, #1
 8015750:	68e3      	ldr	r3, [r4, #12]
 8015752:	9a03      	ldr	r2, [sp, #12]
 8015754:	1a9b      	subs	r3, r3, r2
 8015756:	42ab      	cmp	r3, r5
 8015758:	dcf2      	bgt.n	8015740 <_printf_i+0x1e8>
 801575a:	e7eb      	b.n	8015734 <_printf_i+0x1dc>
 801575c:	2500      	movs	r5, #0
 801575e:	f104 0919 	add.w	r9, r4, #25
 8015762:	e7f5      	b.n	8015750 <_printf_i+0x1f8>
 8015764:	2b00      	cmp	r3, #0
 8015766:	d1ac      	bne.n	80156c2 <_printf_i+0x16a>
 8015768:	7803      	ldrb	r3, [r0, #0]
 801576a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801576e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015772:	e76c      	b.n	801564e <_printf_i+0xf6>
 8015774:	08018f1d 	.word	0x08018f1d
 8015778:	08018f2e 	.word	0x08018f2e

0801577c <_sbrk_r>:
 801577c:	b538      	push	{r3, r4, r5, lr}
 801577e:	4c06      	ldr	r4, [pc, #24]	; (8015798 <_sbrk_r+0x1c>)
 8015780:	2300      	movs	r3, #0
 8015782:	4605      	mov	r5, r0
 8015784:	4608      	mov	r0, r1
 8015786:	6023      	str	r3, [r4, #0]
 8015788:	f7eb fa2a 	bl	8000be0 <_sbrk>
 801578c:	1c43      	adds	r3, r0, #1
 801578e:	d102      	bne.n	8015796 <_sbrk_r+0x1a>
 8015790:	6823      	ldr	r3, [r4, #0]
 8015792:	b103      	cbz	r3, 8015796 <_sbrk_r+0x1a>
 8015794:	602b      	str	r3, [r5, #0]
 8015796:	bd38      	pop	{r3, r4, r5, pc}
 8015798:	20008aa8 	.word	0x20008aa8

0801579c <__sread>:
 801579c:	b510      	push	{r4, lr}
 801579e:	460c      	mov	r4, r1
 80157a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157a4:	f000 fa48 	bl	8015c38 <_read_r>
 80157a8:	2800      	cmp	r0, #0
 80157aa:	bfab      	itete	ge
 80157ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80157ae:	89a3      	ldrhlt	r3, [r4, #12]
 80157b0:	181b      	addge	r3, r3, r0
 80157b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80157b6:	bfac      	ite	ge
 80157b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80157ba:	81a3      	strhlt	r3, [r4, #12]
 80157bc:	bd10      	pop	{r4, pc}

080157be <__swrite>:
 80157be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157c2:	461f      	mov	r7, r3
 80157c4:	898b      	ldrh	r3, [r1, #12]
 80157c6:	05db      	lsls	r3, r3, #23
 80157c8:	4605      	mov	r5, r0
 80157ca:	460c      	mov	r4, r1
 80157cc:	4616      	mov	r6, r2
 80157ce:	d505      	bpl.n	80157dc <__swrite+0x1e>
 80157d0:	2302      	movs	r3, #2
 80157d2:	2200      	movs	r2, #0
 80157d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157d8:	f000 f9b6 	bl	8015b48 <_lseek_r>
 80157dc:	89a3      	ldrh	r3, [r4, #12]
 80157de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80157e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80157e6:	81a3      	strh	r3, [r4, #12]
 80157e8:	4632      	mov	r2, r6
 80157ea:	463b      	mov	r3, r7
 80157ec:	4628      	mov	r0, r5
 80157ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157f2:	f000 b869 	b.w	80158c8 <_write_r>

080157f6 <__sseek>:
 80157f6:	b510      	push	{r4, lr}
 80157f8:	460c      	mov	r4, r1
 80157fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157fe:	f000 f9a3 	bl	8015b48 <_lseek_r>
 8015802:	1c43      	adds	r3, r0, #1
 8015804:	89a3      	ldrh	r3, [r4, #12]
 8015806:	bf15      	itete	ne
 8015808:	6560      	strne	r0, [r4, #84]	; 0x54
 801580a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801580e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015812:	81a3      	strheq	r3, [r4, #12]
 8015814:	bf18      	it	ne
 8015816:	81a3      	strhne	r3, [r4, #12]
 8015818:	bd10      	pop	{r4, pc}

0801581a <__sclose>:
 801581a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801581e:	f000 b8d3 	b.w	80159c8 <_close_r>
	...

08015824 <__swbuf_r>:
 8015824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015826:	460e      	mov	r6, r1
 8015828:	4614      	mov	r4, r2
 801582a:	4605      	mov	r5, r0
 801582c:	b118      	cbz	r0, 8015836 <__swbuf_r+0x12>
 801582e:	6983      	ldr	r3, [r0, #24]
 8015830:	b90b      	cbnz	r3, 8015836 <__swbuf_r+0x12>
 8015832:	f7ff fba1 	bl	8014f78 <__sinit>
 8015836:	4b21      	ldr	r3, [pc, #132]	; (80158bc <__swbuf_r+0x98>)
 8015838:	429c      	cmp	r4, r3
 801583a:	d12a      	bne.n	8015892 <__swbuf_r+0x6e>
 801583c:	686c      	ldr	r4, [r5, #4]
 801583e:	69a3      	ldr	r3, [r4, #24]
 8015840:	60a3      	str	r3, [r4, #8]
 8015842:	89a3      	ldrh	r3, [r4, #12]
 8015844:	071a      	lsls	r2, r3, #28
 8015846:	d52e      	bpl.n	80158a6 <__swbuf_r+0x82>
 8015848:	6923      	ldr	r3, [r4, #16]
 801584a:	b363      	cbz	r3, 80158a6 <__swbuf_r+0x82>
 801584c:	6923      	ldr	r3, [r4, #16]
 801584e:	6820      	ldr	r0, [r4, #0]
 8015850:	1ac0      	subs	r0, r0, r3
 8015852:	6963      	ldr	r3, [r4, #20]
 8015854:	b2f6      	uxtb	r6, r6
 8015856:	4283      	cmp	r3, r0
 8015858:	4637      	mov	r7, r6
 801585a:	dc04      	bgt.n	8015866 <__swbuf_r+0x42>
 801585c:	4621      	mov	r1, r4
 801585e:	4628      	mov	r0, r5
 8015860:	f000 f948 	bl	8015af4 <_fflush_r>
 8015864:	bb28      	cbnz	r0, 80158b2 <__swbuf_r+0x8e>
 8015866:	68a3      	ldr	r3, [r4, #8]
 8015868:	3b01      	subs	r3, #1
 801586a:	60a3      	str	r3, [r4, #8]
 801586c:	6823      	ldr	r3, [r4, #0]
 801586e:	1c5a      	adds	r2, r3, #1
 8015870:	6022      	str	r2, [r4, #0]
 8015872:	701e      	strb	r6, [r3, #0]
 8015874:	6963      	ldr	r3, [r4, #20]
 8015876:	3001      	adds	r0, #1
 8015878:	4283      	cmp	r3, r0
 801587a:	d004      	beq.n	8015886 <__swbuf_r+0x62>
 801587c:	89a3      	ldrh	r3, [r4, #12]
 801587e:	07db      	lsls	r3, r3, #31
 8015880:	d519      	bpl.n	80158b6 <__swbuf_r+0x92>
 8015882:	2e0a      	cmp	r6, #10
 8015884:	d117      	bne.n	80158b6 <__swbuf_r+0x92>
 8015886:	4621      	mov	r1, r4
 8015888:	4628      	mov	r0, r5
 801588a:	f000 f933 	bl	8015af4 <_fflush_r>
 801588e:	b190      	cbz	r0, 80158b6 <__swbuf_r+0x92>
 8015890:	e00f      	b.n	80158b2 <__swbuf_r+0x8e>
 8015892:	4b0b      	ldr	r3, [pc, #44]	; (80158c0 <__swbuf_r+0x9c>)
 8015894:	429c      	cmp	r4, r3
 8015896:	d101      	bne.n	801589c <__swbuf_r+0x78>
 8015898:	68ac      	ldr	r4, [r5, #8]
 801589a:	e7d0      	b.n	801583e <__swbuf_r+0x1a>
 801589c:	4b09      	ldr	r3, [pc, #36]	; (80158c4 <__swbuf_r+0xa0>)
 801589e:	429c      	cmp	r4, r3
 80158a0:	bf08      	it	eq
 80158a2:	68ec      	ldreq	r4, [r5, #12]
 80158a4:	e7cb      	b.n	801583e <__swbuf_r+0x1a>
 80158a6:	4621      	mov	r1, r4
 80158a8:	4628      	mov	r0, r5
 80158aa:	f000 f81f 	bl	80158ec <__swsetup_r>
 80158ae:	2800      	cmp	r0, #0
 80158b0:	d0cc      	beq.n	801584c <__swbuf_r+0x28>
 80158b2:	f04f 37ff 	mov.w	r7, #4294967295
 80158b6:	4638      	mov	r0, r7
 80158b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158ba:	bf00      	nop
 80158bc:	08018ecc 	.word	0x08018ecc
 80158c0:	08018eec 	.word	0x08018eec
 80158c4:	08018eac 	.word	0x08018eac

080158c8 <_write_r>:
 80158c8:	b538      	push	{r3, r4, r5, lr}
 80158ca:	4c07      	ldr	r4, [pc, #28]	; (80158e8 <_write_r+0x20>)
 80158cc:	4605      	mov	r5, r0
 80158ce:	4608      	mov	r0, r1
 80158d0:	4611      	mov	r1, r2
 80158d2:	2200      	movs	r2, #0
 80158d4:	6022      	str	r2, [r4, #0]
 80158d6:	461a      	mov	r2, r3
 80158d8:	f7eb f968 	bl	8000bac <_write>
 80158dc:	1c43      	adds	r3, r0, #1
 80158de:	d102      	bne.n	80158e6 <_write_r+0x1e>
 80158e0:	6823      	ldr	r3, [r4, #0]
 80158e2:	b103      	cbz	r3, 80158e6 <_write_r+0x1e>
 80158e4:	602b      	str	r3, [r5, #0]
 80158e6:	bd38      	pop	{r3, r4, r5, pc}
 80158e8:	20008aa8 	.word	0x20008aa8

080158ec <__swsetup_r>:
 80158ec:	4b32      	ldr	r3, [pc, #200]	; (80159b8 <__swsetup_r+0xcc>)
 80158ee:	b570      	push	{r4, r5, r6, lr}
 80158f0:	681d      	ldr	r5, [r3, #0]
 80158f2:	4606      	mov	r6, r0
 80158f4:	460c      	mov	r4, r1
 80158f6:	b125      	cbz	r5, 8015902 <__swsetup_r+0x16>
 80158f8:	69ab      	ldr	r3, [r5, #24]
 80158fa:	b913      	cbnz	r3, 8015902 <__swsetup_r+0x16>
 80158fc:	4628      	mov	r0, r5
 80158fe:	f7ff fb3b 	bl	8014f78 <__sinit>
 8015902:	4b2e      	ldr	r3, [pc, #184]	; (80159bc <__swsetup_r+0xd0>)
 8015904:	429c      	cmp	r4, r3
 8015906:	d10f      	bne.n	8015928 <__swsetup_r+0x3c>
 8015908:	686c      	ldr	r4, [r5, #4]
 801590a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801590e:	b29a      	uxth	r2, r3
 8015910:	0715      	lsls	r5, r2, #28
 8015912:	d42c      	bmi.n	801596e <__swsetup_r+0x82>
 8015914:	06d0      	lsls	r0, r2, #27
 8015916:	d411      	bmi.n	801593c <__swsetup_r+0x50>
 8015918:	2209      	movs	r2, #9
 801591a:	6032      	str	r2, [r6, #0]
 801591c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015920:	81a3      	strh	r3, [r4, #12]
 8015922:	f04f 30ff 	mov.w	r0, #4294967295
 8015926:	e03e      	b.n	80159a6 <__swsetup_r+0xba>
 8015928:	4b25      	ldr	r3, [pc, #148]	; (80159c0 <__swsetup_r+0xd4>)
 801592a:	429c      	cmp	r4, r3
 801592c:	d101      	bne.n	8015932 <__swsetup_r+0x46>
 801592e:	68ac      	ldr	r4, [r5, #8]
 8015930:	e7eb      	b.n	801590a <__swsetup_r+0x1e>
 8015932:	4b24      	ldr	r3, [pc, #144]	; (80159c4 <__swsetup_r+0xd8>)
 8015934:	429c      	cmp	r4, r3
 8015936:	bf08      	it	eq
 8015938:	68ec      	ldreq	r4, [r5, #12]
 801593a:	e7e6      	b.n	801590a <__swsetup_r+0x1e>
 801593c:	0751      	lsls	r1, r2, #29
 801593e:	d512      	bpl.n	8015966 <__swsetup_r+0x7a>
 8015940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015942:	b141      	cbz	r1, 8015956 <__swsetup_r+0x6a>
 8015944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015948:	4299      	cmp	r1, r3
 801594a:	d002      	beq.n	8015952 <__swsetup_r+0x66>
 801594c:	4630      	mov	r0, r6
 801594e:	f7ff fba5 	bl	801509c <_free_r>
 8015952:	2300      	movs	r3, #0
 8015954:	6363      	str	r3, [r4, #52]	; 0x34
 8015956:	89a3      	ldrh	r3, [r4, #12]
 8015958:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801595c:	81a3      	strh	r3, [r4, #12]
 801595e:	2300      	movs	r3, #0
 8015960:	6063      	str	r3, [r4, #4]
 8015962:	6923      	ldr	r3, [r4, #16]
 8015964:	6023      	str	r3, [r4, #0]
 8015966:	89a3      	ldrh	r3, [r4, #12]
 8015968:	f043 0308 	orr.w	r3, r3, #8
 801596c:	81a3      	strh	r3, [r4, #12]
 801596e:	6923      	ldr	r3, [r4, #16]
 8015970:	b94b      	cbnz	r3, 8015986 <__swsetup_r+0x9a>
 8015972:	89a3      	ldrh	r3, [r4, #12]
 8015974:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801597c:	d003      	beq.n	8015986 <__swsetup_r+0x9a>
 801597e:	4621      	mov	r1, r4
 8015980:	4630      	mov	r0, r6
 8015982:	f000 f917 	bl	8015bb4 <__smakebuf_r>
 8015986:	89a2      	ldrh	r2, [r4, #12]
 8015988:	f012 0301 	ands.w	r3, r2, #1
 801598c:	d00c      	beq.n	80159a8 <__swsetup_r+0xbc>
 801598e:	2300      	movs	r3, #0
 8015990:	60a3      	str	r3, [r4, #8]
 8015992:	6963      	ldr	r3, [r4, #20]
 8015994:	425b      	negs	r3, r3
 8015996:	61a3      	str	r3, [r4, #24]
 8015998:	6923      	ldr	r3, [r4, #16]
 801599a:	b953      	cbnz	r3, 80159b2 <__swsetup_r+0xc6>
 801599c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80159a4:	d1ba      	bne.n	801591c <__swsetup_r+0x30>
 80159a6:	bd70      	pop	{r4, r5, r6, pc}
 80159a8:	0792      	lsls	r2, r2, #30
 80159aa:	bf58      	it	pl
 80159ac:	6963      	ldrpl	r3, [r4, #20]
 80159ae:	60a3      	str	r3, [r4, #8]
 80159b0:	e7f2      	b.n	8015998 <__swsetup_r+0xac>
 80159b2:	2000      	movs	r0, #0
 80159b4:	e7f7      	b.n	80159a6 <__swsetup_r+0xba>
 80159b6:	bf00      	nop
 80159b8:	20000020 	.word	0x20000020
 80159bc:	08018ecc 	.word	0x08018ecc
 80159c0:	08018eec 	.word	0x08018eec
 80159c4:	08018eac 	.word	0x08018eac

080159c8 <_close_r>:
 80159c8:	b538      	push	{r3, r4, r5, lr}
 80159ca:	4c06      	ldr	r4, [pc, #24]	; (80159e4 <_close_r+0x1c>)
 80159cc:	2300      	movs	r3, #0
 80159ce:	4605      	mov	r5, r0
 80159d0:	4608      	mov	r0, r1
 80159d2:	6023      	str	r3, [r4, #0]
 80159d4:	f7eb f8f8 	bl	8000bc8 <_close>
 80159d8:	1c43      	adds	r3, r0, #1
 80159da:	d102      	bne.n	80159e2 <_close_r+0x1a>
 80159dc:	6823      	ldr	r3, [r4, #0]
 80159de:	b103      	cbz	r3, 80159e2 <_close_r+0x1a>
 80159e0:	602b      	str	r3, [r5, #0]
 80159e2:	bd38      	pop	{r3, r4, r5, pc}
 80159e4:	20008aa8 	.word	0x20008aa8

080159e8 <__sflush_r>:
 80159e8:	898a      	ldrh	r2, [r1, #12]
 80159ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159ee:	4605      	mov	r5, r0
 80159f0:	0710      	lsls	r0, r2, #28
 80159f2:	460c      	mov	r4, r1
 80159f4:	d458      	bmi.n	8015aa8 <__sflush_r+0xc0>
 80159f6:	684b      	ldr	r3, [r1, #4]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	dc05      	bgt.n	8015a08 <__sflush_r+0x20>
 80159fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	dc02      	bgt.n	8015a08 <__sflush_r+0x20>
 8015a02:	2000      	movs	r0, #0
 8015a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015a0a:	2e00      	cmp	r6, #0
 8015a0c:	d0f9      	beq.n	8015a02 <__sflush_r+0x1a>
 8015a0e:	2300      	movs	r3, #0
 8015a10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015a14:	682f      	ldr	r7, [r5, #0]
 8015a16:	6a21      	ldr	r1, [r4, #32]
 8015a18:	602b      	str	r3, [r5, #0]
 8015a1a:	d032      	beq.n	8015a82 <__sflush_r+0x9a>
 8015a1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015a1e:	89a3      	ldrh	r3, [r4, #12]
 8015a20:	075a      	lsls	r2, r3, #29
 8015a22:	d505      	bpl.n	8015a30 <__sflush_r+0x48>
 8015a24:	6863      	ldr	r3, [r4, #4]
 8015a26:	1ac0      	subs	r0, r0, r3
 8015a28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015a2a:	b10b      	cbz	r3, 8015a30 <__sflush_r+0x48>
 8015a2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015a2e:	1ac0      	subs	r0, r0, r3
 8015a30:	2300      	movs	r3, #0
 8015a32:	4602      	mov	r2, r0
 8015a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015a36:	6a21      	ldr	r1, [r4, #32]
 8015a38:	4628      	mov	r0, r5
 8015a3a:	47b0      	blx	r6
 8015a3c:	1c43      	adds	r3, r0, #1
 8015a3e:	89a3      	ldrh	r3, [r4, #12]
 8015a40:	d106      	bne.n	8015a50 <__sflush_r+0x68>
 8015a42:	6829      	ldr	r1, [r5, #0]
 8015a44:	291d      	cmp	r1, #29
 8015a46:	d848      	bhi.n	8015ada <__sflush_r+0xf2>
 8015a48:	4a29      	ldr	r2, [pc, #164]	; (8015af0 <__sflush_r+0x108>)
 8015a4a:	40ca      	lsrs	r2, r1
 8015a4c:	07d6      	lsls	r6, r2, #31
 8015a4e:	d544      	bpl.n	8015ada <__sflush_r+0xf2>
 8015a50:	2200      	movs	r2, #0
 8015a52:	6062      	str	r2, [r4, #4]
 8015a54:	04d9      	lsls	r1, r3, #19
 8015a56:	6922      	ldr	r2, [r4, #16]
 8015a58:	6022      	str	r2, [r4, #0]
 8015a5a:	d504      	bpl.n	8015a66 <__sflush_r+0x7e>
 8015a5c:	1c42      	adds	r2, r0, #1
 8015a5e:	d101      	bne.n	8015a64 <__sflush_r+0x7c>
 8015a60:	682b      	ldr	r3, [r5, #0]
 8015a62:	b903      	cbnz	r3, 8015a66 <__sflush_r+0x7e>
 8015a64:	6560      	str	r0, [r4, #84]	; 0x54
 8015a66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a68:	602f      	str	r7, [r5, #0]
 8015a6a:	2900      	cmp	r1, #0
 8015a6c:	d0c9      	beq.n	8015a02 <__sflush_r+0x1a>
 8015a6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a72:	4299      	cmp	r1, r3
 8015a74:	d002      	beq.n	8015a7c <__sflush_r+0x94>
 8015a76:	4628      	mov	r0, r5
 8015a78:	f7ff fb10 	bl	801509c <_free_r>
 8015a7c:	2000      	movs	r0, #0
 8015a7e:	6360      	str	r0, [r4, #52]	; 0x34
 8015a80:	e7c0      	b.n	8015a04 <__sflush_r+0x1c>
 8015a82:	2301      	movs	r3, #1
 8015a84:	4628      	mov	r0, r5
 8015a86:	47b0      	blx	r6
 8015a88:	1c41      	adds	r1, r0, #1
 8015a8a:	d1c8      	bne.n	8015a1e <__sflush_r+0x36>
 8015a8c:	682b      	ldr	r3, [r5, #0]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d0c5      	beq.n	8015a1e <__sflush_r+0x36>
 8015a92:	2b1d      	cmp	r3, #29
 8015a94:	d001      	beq.n	8015a9a <__sflush_r+0xb2>
 8015a96:	2b16      	cmp	r3, #22
 8015a98:	d101      	bne.n	8015a9e <__sflush_r+0xb6>
 8015a9a:	602f      	str	r7, [r5, #0]
 8015a9c:	e7b1      	b.n	8015a02 <__sflush_r+0x1a>
 8015a9e:	89a3      	ldrh	r3, [r4, #12]
 8015aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015aa4:	81a3      	strh	r3, [r4, #12]
 8015aa6:	e7ad      	b.n	8015a04 <__sflush_r+0x1c>
 8015aa8:	690f      	ldr	r7, [r1, #16]
 8015aaa:	2f00      	cmp	r7, #0
 8015aac:	d0a9      	beq.n	8015a02 <__sflush_r+0x1a>
 8015aae:	0793      	lsls	r3, r2, #30
 8015ab0:	680e      	ldr	r6, [r1, #0]
 8015ab2:	bf08      	it	eq
 8015ab4:	694b      	ldreq	r3, [r1, #20]
 8015ab6:	600f      	str	r7, [r1, #0]
 8015ab8:	bf18      	it	ne
 8015aba:	2300      	movne	r3, #0
 8015abc:	eba6 0807 	sub.w	r8, r6, r7
 8015ac0:	608b      	str	r3, [r1, #8]
 8015ac2:	f1b8 0f00 	cmp.w	r8, #0
 8015ac6:	dd9c      	ble.n	8015a02 <__sflush_r+0x1a>
 8015ac8:	4643      	mov	r3, r8
 8015aca:	463a      	mov	r2, r7
 8015acc:	6a21      	ldr	r1, [r4, #32]
 8015ace:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015ad0:	4628      	mov	r0, r5
 8015ad2:	47b0      	blx	r6
 8015ad4:	2800      	cmp	r0, #0
 8015ad6:	dc06      	bgt.n	8015ae6 <__sflush_r+0xfe>
 8015ad8:	89a3      	ldrh	r3, [r4, #12]
 8015ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ade:	81a3      	strh	r3, [r4, #12]
 8015ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8015ae4:	e78e      	b.n	8015a04 <__sflush_r+0x1c>
 8015ae6:	4407      	add	r7, r0
 8015ae8:	eba8 0800 	sub.w	r8, r8, r0
 8015aec:	e7e9      	b.n	8015ac2 <__sflush_r+0xda>
 8015aee:	bf00      	nop
 8015af0:	20400001 	.word	0x20400001

08015af4 <_fflush_r>:
 8015af4:	b538      	push	{r3, r4, r5, lr}
 8015af6:	690b      	ldr	r3, [r1, #16]
 8015af8:	4605      	mov	r5, r0
 8015afa:	460c      	mov	r4, r1
 8015afc:	b1db      	cbz	r3, 8015b36 <_fflush_r+0x42>
 8015afe:	b118      	cbz	r0, 8015b08 <_fflush_r+0x14>
 8015b00:	6983      	ldr	r3, [r0, #24]
 8015b02:	b90b      	cbnz	r3, 8015b08 <_fflush_r+0x14>
 8015b04:	f7ff fa38 	bl	8014f78 <__sinit>
 8015b08:	4b0c      	ldr	r3, [pc, #48]	; (8015b3c <_fflush_r+0x48>)
 8015b0a:	429c      	cmp	r4, r3
 8015b0c:	d109      	bne.n	8015b22 <_fflush_r+0x2e>
 8015b0e:	686c      	ldr	r4, [r5, #4]
 8015b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b14:	b17b      	cbz	r3, 8015b36 <_fflush_r+0x42>
 8015b16:	4621      	mov	r1, r4
 8015b18:	4628      	mov	r0, r5
 8015b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b1e:	f7ff bf63 	b.w	80159e8 <__sflush_r>
 8015b22:	4b07      	ldr	r3, [pc, #28]	; (8015b40 <_fflush_r+0x4c>)
 8015b24:	429c      	cmp	r4, r3
 8015b26:	d101      	bne.n	8015b2c <_fflush_r+0x38>
 8015b28:	68ac      	ldr	r4, [r5, #8]
 8015b2a:	e7f1      	b.n	8015b10 <_fflush_r+0x1c>
 8015b2c:	4b05      	ldr	r3, [pc, #20]	; (8015b44 <_fflush_r+0x50>)
 8015b2e:	429c      	cmp	r4, r3
 8015b30:	bf08      	it	eq
 8015b32:	68ec      	ldreq	r4, [r5, #12]
 8015b34:	e7ec      	b.n	8015b10 <_fflush_r+0x1c>
 8015b36:	2000      	movs	r0, #0
 8015b38:	bd38      	pop	{r3, r4, r5, pc}
 8015b3a:	bf00      	nop
 8015b3c:	08018ecc 	.word	0x08018ecc
 8015b40:	08018eec 	.word	0x08018eec
 8015b44:	08018eac 	.word	0x08018eac

08015b48 <_lseek_r>:
 8015b48:	b538      	push	{r3, r4, r5, lr}
 8015b4a:	4c07      	ldr	r4, [pc, #28]	; (8015b68 <_lseek_r+0x20>)
 8015b4c:	4605      	mov	r5, r0
 8015b4e:	4608      	mov	r0, r1
 8015b50:	4611      	mov	r1, r2
 8015b52:	2200      	movs	r2, #0
 8015b54:	6022      	str	r2, [r4, #0]
 8015b56:	461a      	mov	r2, r3
 8015b58:	f7eb f840 	bl	8000bdc <_lseek>
 8015b5c:	1c43      	adds	r3, r0, #1
 8015b5e:	d102      	bne.n	8015b66 <_lseek_r+0x1e>
 8015b60:	6823      	ldr	r3, [r4, #0]
 8015b62:	b103      	cbz	r3, 8015b66 <_lseek_r+0x1e>
 8015b64:	602b      	str	r3, [r5, #0]
 8015b66:	bd38      	pop	{r3, r4, r5, pc}
 8015b68:	20008aa8 	.word	0x20008aa8

08015b6c <__swhatbuf_r>:
 8015b6c:	b570      	push	{r4, r5, r6, lr}
 8015b6e:	460e      	mov	r6, r1
 8015b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b74:	2900      	cmp	r1, #0
 8015b76:	b096      	sub	sp, #88	; 0x58
 8015b78:	4614      	mov	r4, r2
 8015b7a:	461d      	mov	r5, r3
 8015b7c:	da07      	bge.n	8015b8e <__swhatbuf_r+0x22>
 8015b7e:	2300      	movs	r3, #0
 8015b80:	602b      	str	r3, [r5, #0]
 8015b82:	89b3      	ldrh	r3, [r6, #12]
 8015b84:	061a      	lsls	r2, r3, #24
 8015b86:	d410      	bmi.n	8015baa <__swhatbuf_r+0x3e>
 8015b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015b8c:	e00e      	b.n	8015bac <__swhatbuf_r+0x40>
 8015b8e:	466a      	mov	r2, sp
 8015b90:	f000 f864 	bl	8015c5c <_fstat_r>
 8015b94:	2800      	cmp	r0, #0
 8015b96:	dbf2      	blt.n	8015b7e <__swhatbuf_r+0x12>
 8015b98:	9a01      	ldr	r2, [sp, #4]
 8015b9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015b9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015ba2:	425a      	negs	r2, r3
 8015ba4:	415a      	adcs	r2, r3
 8015ba6:	602a      	str	r2, [r5, #0]
 8015ba8:	e7ee      	b.n	8015b88 <__swhatbuf_r+0x1c>
 8015baa:	2340      	movs	r3, #64	; 0x40
 8015bac:	2000      	movs	r0, #0
 8015bae:	6023      	str	r3, [r4, #0]
 8015bb0:	b016      	add	sp, #88	; 0x58
 8015bb2:	bd70      	pop	{r4, r5, r6, pc}

08015bb4 <__smakebuf_r>:
 8015bb4:	898b      	ldrh	r3, [r1, #12]
 8015bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015bb8:	079d      	lsls	r5, r3, #30
 8015bba:	4606      	mov	r6, r0
 8015bbc:	460c      	mov	r4, r1
 8015bbe:	d507      	bpl.n	8015bd0 <__smakebuf_r+0x1c>
 8015bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015bc4:	6023      	str	r3, [r4, #0]
 8015bc6:	6123      	str	r3, [r4, #16]
 8015bc8:	2301      	movs	r3, #1
 8015bca:	6163      	str	r3, [r4, #20]
 8015bcc:	b002      	add	sp, #8
 8015bce:	bd70      	pop	{r4, r5, r6, pc}
 8015bd0:	ab01      	add	r3, sp, #4
 8015bd2:	466a      	mov	r2, sp
 8015bd4:	f7ff ffca 	bl	8015b6c <__swhatbuf_r>
 8015bd8:	9900      	ldr	r1, [sp, #0]
 8015bda:	4605      	mov	r5, r0
 8015bdc:	4630      	mov	r0, r6
 8015bde:	f7ff faab 	bl	8015138 <_malloc_r>
 8015be2:	b948      	cbnz	r0, 8015bf8 <__smakebuf_r+0x44>
 8015be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015be8:	059a      	lsls	r2, r3, #22
 8015bea:	d4ef      	bmi.n	8015bcc <__smakebuf_r+0x18>
 8015bec:	f023 0303 	bic.w	r3, r3, #3
 8015bf0:	f043 0302 	orr.w	r3, r3, #2
 8015bf4:	81a3      	strh	r3, [r4, #12]
 8015bf6:	e7e3      	b.n	8015bc0 <__smakebuf_r+0xc>
 8015bf8:	4b0d      	ldr	r3, [pc, #52]	; (8015c30 <__smakebuf_r+0x7c>)
 8015bfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8015bfc:	89a3      	ldrh	r3, [r4, #12]
 8015bfe:	6020      	str	r0, [r4, #0]
 8015c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c04:	81a3      	strh	r3, [r4, #12]
 8015c06:	9b00      	ldr	r3, [sp, #0]
 8015c08:	6163      	str	r3, [r4, #20]
 8015c0a:	9b01      	ldr	r3, [sp, #4]
 8015c0c:	6120      	str	r0, [r4, #16]
 8015c0e:	b15b      	cbz	r3, 8015c28 <__smakebuf_r+0x74>
 8015c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c14:	4630      	mov	r0, r6
 8015c16:	f000 f833 	bl	8015c80 <_isatty_r>
 8015c1a:	b128      	cbz	r0, 8015c28 <__smakebuf_r+0x74>
 8015c1c:	89a3      	ldrh	r3, [r4, #12]
 8015c1e:	f023 0303 	bic.w	r3, r3, #3
 8015c22:	f043 0301 	orr.w	r3, r3, #1
 8015c26:	81a3      	strh	r3, [r4, #12]
 8015c28:	89a3      	ldrh	r3, [r4, #12]
 8015c2a:	431d      	orrs	r5, r3
 8015c2c:	81a5      	strh	r5, [r4, #12]
 8015c2e:	e7cd      	b.n	8015bcc <__smakebuf_r+0x18>
 8015c30:	08014f41 	.word	0x08014f41

08015c34 <__malloc_lock>:
 8015c34:	4770      	bx	lr

08015c36 <__malloc_unlock>:
 8015c36:	4770      	bx	lr

08015c38 <_read_r>:
 8015c38:	b538      	push	{r3, r4, r5, lr}
 8015c3a:	4c07      	ldr	r4, [pc, #28]	; (8015c58 <_read_r+0x20>)
 8015c3c:	4605      	mov	r5, r0
 8015c3e:	4608      	mov	r0, r1
 8015c40:	4611      	mov	r1, r2
 8015c42:	2200      	movs	r2, #0
 8015c44:	6022      	str	r2, [r4, #0]
 8015c46:	461a      	mov	r2, r3
 8015c48:	f7ea ffa2 	bl	8000b90 <_read>
 8015c4c:	1c43      	adds	r3, r0, #1
 8015c4e:	d102      	bne.n	8015c56 <_read_r+0x1e>
 8015c50:	6823      	ldr	r3, [r4, #0]
 8015c52:	b103      	cbz	r3, 8015c56 <_read_r+0x1e>
 8015c54:	602b      	str	r3, [r5, #0]
 8015c56:	bd38      	pop	{r3, r4, r5, pc}
 8015c58:	20008aa8 	.word	0x20008aa8

08015c5c <_fstat_r>:
 8015c5c:	b538      	push	{r3, r4, r5, lr}
 8015c5e:	4c07      	ldr	r4, [pc, #28]	; (8015c7c <_fstat_r+0x20>)
 8015c60:	2300      	movs	r3, #0
 8015c62:	4605      	mov	r5, r0
 8015c64:	4608      	mov	r0, r1
 8015c66:	4611      	mov	r1, r2
 8015c68:	6023      	str	r3, [r4, #0]
 8015c6a:	f7ea ffb0 	bl	8000bce <_fstat>
 8015c6e:	1c43      	adds	r3, r0, #1
 8015c70:	d102      	bne.n	8015c78 <_fstat_r+0x1c>
 8015c72:	6823      	ldr	r3, [r4, #0]
 8015c74:	b103      	cbz	r3, 8015c78 <_fstat_r+0x1c>
 8015c76:	602b      	str	r3, [r5, #0]
 8015c78:	bd38      	pop	{r3, r4, r5, pc}
 8015c7a:	bf00      	nop
 8015c7c:	20008aa8 	.word	0x20008aa8

08015c80 <_isatty_r>:
 8015c80:	b538      	push	{r3, r4, r5, lr}
 8015c82:	4c06      	ldr	r4, [pc, #24]	; (8015c9c <_isatty_r+0x1c>)
 8015c84:	2300      	movs	r3, #0
 8015c86:	4605      	mov	r5, r0
 8015c88:	4608      	mov	r0, r1
 8015c8a:	6023      	str	r3, [r4, #0]
 8015c8c:	f7ea ffa4 	bl	8000bd8 <_isatty>
 8015c90:	1c43      	adds	r3, r0, #1
 8015c92:	d102      	bne.n	8015c9a <_isatty_r+0x1a>
 8015c94:	6823      	ldr	r3, [r4, #0]
 8015c96:	b103      	cbz	r3, 8015c9a <_isatty_r+0x1a>
 8015c98:	602b      	str	r3, [r5, #0]
 8015c9a:	bd38      	pop	{r3, r4, r5, pc}
 8015c9c:	20008aa8 	.word	0x20008aa8

08015ca0 <_init>:
 8015ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ca2:	bf00      	nop
 8015ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ca6:	bc08      	pop	{r3}
 8015ca8:	469e      	mov	lr, r3
 8015caa:	4770      	bx	lr

08015cac <_fini>:
 8015cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cae:	bf00      	nop
 8015cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015cb2:	bc08      	pop	{r3}
 8015cb4:	469e      	mov	lr, r3
 8015cb6:	4770      	bx	lr
