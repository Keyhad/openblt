
demoprog_discovery_stm32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015e0  0800818c  0800818c  0000818c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800976c  0800976c  0000976c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009784  08009784  0001000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009784  08009784  00009784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800978c  0800978c  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800978c  0800978c  0000978c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009790  08009790  00009790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009794  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  080097a0  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080097a0  000100bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007cbf  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001755  00000000  00000000  00017cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000648  00000000  00000000  00019450  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005e8  00000000  00000000  00019a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fe43  00000000  00000000  0001a080  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006ca3  00000000  00000000  00039ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c0643  00000000  00000000  00040b66  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001011a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ec0  00000000  00000000  00101224  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000027ab  00000000  00000000  001020e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800818c <__do_global_dtors_aux>:
 800818c:	b510      	push	{r4, lr}
 800818e:	4c05      	ldr	r4, [pc, #20]	; (80081a4 <__do_global_dtors_aux+0x18>)
 8008190:	7823      	ldrb	r3, [r4, #0]
 8008192:	b933      	cbnz	r3, 80081a2 <__do_global_dtors_aux+0x16>
 8008194:	4b04      	ldr	r3, [pc, #16]	; (80081a8 <__do_global_dtors_aux+0x1c>)
 8008196:	b113      	cbz	r3, 800819e <__do_global_dtors_aux+0x12>
 8008198:	4804      	ldr	r0, [pc, #16]	; (80081ac <__do_global_dtors_aux+0x20>)
 800819a:	f3af 8000 	nop.w
 800819e:	2301      	movs	r3, #1
 80081a0:	7023      	strb	r3, [r4, #0]
 80081a2:	bd10      	pop	{r4, pc}
 80081a4:	2000000c 	.word	0x2000000c
 80081a8:	00000000 	.word	0x00000000
 80081ac:	08009754 	.word	0x08009754

080081b0 <frame_dummy>:
 80081b0:	b508      	push	{r3, lr}
 80081b2:	4b03      	ldr	r3, [pc, #12]	; (80081c0 <frame_dummy+0x10>)
 80081b4:	b11b      	cbz	r3, 80081be <frame_dummy+0xe>
 80081b6:	4903      	ldr	r1, [pc, #12]	; (80081c4 <frame_dummy+0x14>)
 80081b8:	4803      	ldr	r0, [pc, #12]	; (80081c8 <frame_dummy+0x18>)
 80081ba:	f3af 8000 	nop.w
 80081be:	bd08      	pop	{r3, pc}
 80081c0:	00000000 	.word	0x00000000
 80081c4:	20000010 	.word	0x20000010
 80081c8:	08009754 	.word	0x08009754

080081cc <__aeabi_uldivmod>:
 80081cc:	b953      	cbnz	r3, 80081e4 <__aeabi_uldivmod+0x18>
 80081ce:	b94a      	cbnz	r2, 80081e4 <__aeabi_uldivmod+0x18>
 80081d0:	2900      	cmp	r1, #0
 80081d2:	bf08      	it	eq
 80081d4:	2800      	cmpeq	r0, #0
 80081d6:	bf1c      	itt	ne
 80081d8:	f04f 31ff 	movne.w	r1, #4294967295
 80081dc:	f04f 30ff 	movne.w	r0, #4294967295
 80081e0:	f000 b972 	b.w	80084c8 <__aeabi_idiv0>
 80081e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80081e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80081ec:	f000 f806 	bl	80081fc <__udivmoddi4>
 80081f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80081f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081f8:	b004      	add	sp, #16
 80081fa:	4770      	bx	lr

080081fc <__udivmoddi4>:
 80081fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	9e08      	ldr	r6, [sp, #32]
 8008202:	4604      	mov	r4, r0
 8008204:	4688      	mov	r8, r1
 8008206:	2b00      	cmp	r3, #0
 8008208:	d14b      	bne.n	80082a2 <__udivmoddi4+0xa6>
 800820a:	428a      	cmp	r2, r1
 800820c:	4615      	mov	r5, r2
 800820e:	d967      	bls.n	80082e0 <__udivmoddi4+0xe4>
 8008210:	fab2 f282 	clz	r2, r2
 8008214:	b14a      	cbz	r2, 800822a <__udivmoddi4+0x2e>
 8008216:	f1c2 0720 	rsb	r7, r2, #32
 800821a:	fa01 f302 	lsl.w	r3, r1, r2
 800821e:	fa20 f707 	lsr.w	r7, r0, r7
 8008222:	4095      	lsls	r5, r2
 8008224:	ea47 0803 	orr.w	r8, r7, r3
 8008228:	4094      	lsls	r4, r2
 800822a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800822e:	0c23      	lsrs	r3, r4, #16
 8008230:	fbb8 f7fe 	udiv	r7, r8, lr
 8008234:	fa1f fc85 	uxth.w	ip, r5
 8008238:	fb0e 8817 	mls	r8, lr, r7, r8
 800823c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008240:	fb07 f10c 	mul.w	r1, r7, ip
 8008244:	4299      	cmp	r1, r3
 8008246:	d909      	bls.n	800825c <__udivmoddi4+0x60>
 8008248:	18eb      	adds	r3, r5, r3
 800824a:	f107 30ff 	add.w	r0, r7, #4294967295
 800824e:	f080 811b 	bcs.w	8008488 <__udivmoddi4+0x28c>
 8008252:	4299      	cmp	r1, r3
 8008254:	f240 8118 	bls.w	8008488 <__udivmoddi4+0x28c>
 8008258:	3f02      	subs	r7, #2
 800825a:	442b      	add	r3, r5
 800825c:	1a5b      	subs	r3, r3, r1
 800825e:	b2a4      	uxth	r4, r4
 8008260:	fbb3 f0fe 	udiv	r0, r3, lr
 8008264:	fb0e 3310 	mls	r3, lr, r0, r3
 8008268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800826c:	fb00 fc0c 	mul.w	ip, r0, ip
 8008270:	45a4      	cmp	ip, r4
 8008272:	d909      	bls.n	8008288 <__udivmoddi4+0x8c>
 8008274:	192c      	adds	r4, r5, r4
 8008276:	f100 33ff 	add.w	r3, r0, #4294967295
 800827a:	f080 8107 	bcs.w	800848c <__udivmoddi4+0x290>
 800827e:	45a4      	cmp	ip, r4
 8008280:	f240 8104 	bls.w	800848c <__udivmoddi4+0x290>
 8008284:	3802      	subs	r0, #2
 8008286:	442c      	add	r4, r5
 8008288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800828c:	eba4 040c 	sub.w	r4, r4, ip
 8008290:	2700      	movs	r7, #0
 8008292:	b11e      	cbz	r6, 800829c <__udivmoddi4+0xa0>
 8008294:	40d4      	lsrs	r4, r2
 8008296:	2300      	movs	r3, #0
 8008298:	e9c6 4300 	strd	r4, r3, [r6]
 800829c:	4639      	mov	r1, r7
 800829e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a2:	428b      	cmp	r3, r1
 80082a4:	d909      	bls.n	80082ba <__udivmoddi4+0xbe>
 80082a6:	2e00      	cmp	r6, #0
 80082a8:	f000 80eb 	beq.w	8008482 <__udivmoddi4+0x286>
 80082ac:	2700      	movs	r7, #0
 80082ae:	e9c6 0100 	strd	r0, r1, [r6]
 80082b2:	4638      	mov	r0, r7
 80082b4:	4639      	mov	r1, r7
 80082b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ba:	fab3 f783 	clz	r7, r3
 80082be:	2f00      	cmp	r7, #0
 80082c0:	d147      	bne.n	8008352 <__udivmoddi4+0x156>
 80082c2:	428b      	cmp	r3, r1
 80082c4:	d302      	bcc.n	80082cc <__udivmoddi4+0xd0>
 80082c6:	4282      	cmp	r2, r0
 80082c8:	f200 80fa 	bhi.w	80084c0 <__udivmoddi4+0x2c4>
 80082cc:	1a84      	subs	r4, r0, r2
 80082ce:	eb61 0303 	sbc.w	r3, r1, r3
 80082d2:	2001      	movs	r0, #1
 80082d4:	4698      	mov	r8, r3
 80082d6:	2e00      	cmp	r6, #0
 80082d8:	d0e0      	beq.n	800829c <__udivmoddi4+0xa0>
 80082da:	e9c6 4800 	strd	r4, r8, [r6]
 80082de:	e7dd      	b.n	800829c <__udivmoddi4+0xa0>
 80082e0:	b902      	cbnz	r2, 80082e4 <__udivmoddi4+0xe8>
 80082e2:	deff      	udf	#255	; 0xff
 80082e4:	fab2 f282 	clz	r2, r2
 80082e8:	2a00      	cmp	r2, #0
 80082ea:	f040 808f 	bne.w	800840c <__udivmoddi4+0x210>
 80082ee:	1b49      	subs	r1, r1, r5
 80082f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80082f4:	fa1f f885 	uxth.w	r8, r5
 80082f8:	2701      	movs	r7, #1
 80082fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80082fe:	0c23      	lsrs	r3, r4, #16
 8008300:	fb0e 111c 	mls	r1, lr, ip, r1
 8008304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008308:	fb08 f10c 	mul.w	r1, r8, ip
 800830c:	4299      	cmp	r1, r3
 800830e:	d907      	bls.n	8008320 <__udivmoddi4+0x124>
 8008310:	18eb      	adds	r3, r5, r3
 8008312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008316:	d202      	bcs.n	800831e <__udivmoddi4+0x122>
 8008318:	4299      	cmp	r1, r3
 800831a:	f200 80cd 	bhi.w	80084b8 <__udivmoddi4+0x2bc>
 800831e:	4684      	mov	ip, r0
 8008320:	1a59      	subs	r1, r3, r1
 8008322:	b2a3      	uxth	r3, r4
 8008324:	fbb1 f0fe 	udiv	r0, r1, lr
 8008328:	fb0e 1410 	mls	r4, lr, r0, r1
 800832c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008330:	fb08 f800 	mul.w	r8, r8, r0
 8008334:	45a0      	cmp	r8, r4
 8008336:	d907      	bls.n	8008348 <__udivmoddi4+0x14c>
 8008338:	192c      	adds	r4, r5, r4
 800833a:	f100 33ff 	add.w	r3, r0, #4294967295
 800833e:	d202      	bcs.n	8008346 <__udivmoddi4+0x14a>
 8008340:	45a0      	cmp	r8, r4
 8008342:	f200 80b6 	bhi.w	80084b2 <__udivmoddi4+0x2b6>
 8008346:	4618      	mov	r0, r3
 8008348:	eba4 0408 	sub.w	r4, r4, r8
 800834c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008350:	e79f      	b.n	8008292 <__udivmoddi4+0x96>
 8008352:	f1c7 0c20 	rsb	ip, r7, #32
 8008356:	40bb      	lsls	r3, r7
 8008358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800835c:	ea4e 0e03 	orr.w	lr, lr, r3
 8008360:	fa01 f407 	lsl.w	r4, r1, r7
 8008364:	fa20 f50c 	lsr.w	r5, r0, ip
 8008368:	fa21 f30c 	lsr.w	r3, r1, ip
 800836c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008370:	4325      	orrs	r5, r4
 8008372:	fbb3 f9f8 	udiv	r9, r3, r8
 8008376:	0c2c      	lsrs	r4, r5, #16
 8008378:	fb08 3319 	mls	r3, r8, r9, r3
 800837c:	fa1f fa8e 	uxth.w	sl, lr
 8008380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008384:	fb09 f40a 	mul.w	r4, r9, sl
 8008388:	429c      	cmp	r4, r3
 800838a:	fa02 f207 	lsl.w	r2, r2, r7
 800838e:	fa00 f107 	lsl.w	r1, r0, r7
 8008392:	d90b      	bls.n	80083ac <__udivmoddi4+0x1b0>
 8008394:	eb1e 0303 	adds.w	r3, lr, r3
 8008398:	f109 30ff 	add.w	r0, r9, #4294967295
 800839c:	f080 8087 	bcs.w	80084ae <__udivmoddi4+0x2b2>
 80083a0:	429c      	cmp	r4, r3
 80083a2:	f240 8084 	bls.w	80084ae <__udivmoddi4+0x2b2>
 80083a6:	f1a9 0902 	sub.w	r9, r9, #2
 80083aa:	4473      	add	r3, lr
 80083ac:	1b1b      	subs	r3, r3, r4
 80083ae:	b2ad      	uxth	r5, r5
 80083b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80083b4:	fb08 3310 	mls	r3, r8, r0, r3
 80083b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80083bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80083c0:	45a2      	cmp	sl, r4
 80083c2:	d908      	bls.n	80083d6 <__udivmoddi4+0x1da>
 80083c4:	eb1e 0404 	adds.w	r4, lr, r4
 80083c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80083cc:	d26b      	bcs.n	80084a6 <__udivmoddi4+0x2aa>
 80083ce:	45a2      	cmp	sl, r4
 80083d0:	d969      	bls.n	80084a6 <__udivmoddi4+0x2aa>
 80083d2:	3802      	subs	r0, #2
 80083d4:	4474      	add	r4, lr
 80083d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80083da:	fba0 8902 	umull	r8, r9, r0, r2
 80083de:	eba4 040a 	sub.w	r4, r4, sl
 80083e2:	454c      	cmp	r4, r9
 80083e4:	46c2      	mov	sl, r8
 80083e6:	464b      	mov	r3, r9
 80083e8:	d354      	bcc.n	8008494 <__udivmoddi4+0x298>
 80083ea:	d051      	beq.n	8008490 <__udivmoddi4+0x294>
 80083ec:	2e00      	cmp	r6, #0
 80083ee:	d069      	beq.n	80084c4 <__udivmoddi4+0x2c8>
 80083f0:	ebb1 050a 	subs.w	r5, r1, sl
 80083f4:	eb64 0403 	sbc.w	r4, r4, r3
 80083f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80083fc:	40fd      	lsrs	r5, r7
 80083fe:	40fc      	lsrs	r4, r7
 8008400:	ea4c 0505 	orr.w	r5, ip, r5
 8008404:	e9c6 5400 	strd	r5, r4, [r6]
 8008408:	2700      	movs	r7, #0
 800840a:	e747      	b.n	800829c <__udivmoddi4+0xa0>
 800840c:	f1c2 0320 	rsb	r3, r2, #32
 8008410:	fa20 f703 	lsr.w	r7, r0, r3
 8008414:	4095      	lsls	r5, r2
 8008416:	fa01 f002 	lsl.w	r0, r1, r2
 800841a:	fa21 f303 	lsr.w	r3, r1, r3
 800841e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008422:	4338      	orrs	r0, r7
 8008424:	0c01      	lsrs	r1, r0, #16
 8008426:	fbb3 f7fe 	udiv	r7, r3, lr
 800842a:	fa1f f885 	uxth.w	r8, r5
 800842e:	fb0e 3317 	mls	r3, lr, r7, r3
 8008432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008436:	fb07 f308 	mul.w	r3, r7, r8
 800843a:	428b      	cmp	r3, r1
 800843c:	fa04 f402 	lsl.w	r4, r4, r2
 8008440:	d907      	bls.n	8008452 <__udivmoddi4+0x256>
 8008442:	1869      	adds	r1, r5, r1
 8008444:	f107 3cff 	add.w	ip, r7, #4294967295
 8008448:	d22f      	bcs.n	80084aa <__udivmoddi4+0x2ae>
 800844a:	428b      	cmp	r3, r1
 800844c:	d92d      	bls.n	80084aa <__udivmoddi4+0x2ae>
 800844e:	3f02      	subs	r7, #2
 8008450:	4429      	add	r1, r5
 8008452:	1acb      	subs	r3, r1, r3
 8008454:	b281      	uxth	r1, r0
 8008456:	fbb3 f0fe 	udiv	r0, r3, lr
 800845a:	fb0e 3310 	mls	r3, lr, r0, r3
 800845e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008462:	fb00 f308 	mul.w	r3, r0, r8
 8008466:	428b      	cmp	r3, r1
 8008468:	d907      	bls.n	800847a <__udivmoddi4+0x27e>
 800846a:	1869      	adds	r1, r5, r1
 800846c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008470:	d217      	bcs.n	80084a2 <__udivmoddi4+0x2a6>
 8008472:	428b      	cmp	r3, r1
 8008474:	d915      	bls.n	80084a2 <__udivmoddi4+0x2a6>
 8008476:	3802      	subs	r0, #2
 8008478:	4429      	add	r1, r5
 800847a:	1ac9      	subs	r1, r1, r3
 800847c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008480:	e73b      	b.n	80082fa <__udivmoddi4+0xfe>
 8008482:	4637      	mov	r7, r6
 8008484:	4630      	mov	r0, r6
 8008486:	e709      	b.n	800829c <__udivmoddi4+0xa0>
 8008488:	4607      	mov	r7, r0
 800848a:	e6e7      	b.n	800825c <__udivmoddi4+0x60>
 800848c:	4618      	mov	r0, r3
 800848e:	e6fb      	b.n	8008288 <__udivmoddi4+0x8c>
 8008490:	4541      	cmp	r1, r8
 8008492:	d2ab      	bcs.n	80083ec <__udivmoddi4+0x1f0>
 8008494:	ebb8 0a02 	subs.w	sl, r8, r2
 8008498:	eb69 020e 	sbc.w	r2, r9, lr
 800849c:	3801      	subs	r0, #1
 800849e:	4613      	mov	r3, r2
 80084a0:	e7a4      	b.n	80083ec <__udivmoddi4+0x1f0>
 80084a2:	4660      	mov	r0, ip
 80084a4:	e7e9      	b.n	800847a <__udivmoddi4+0x27e>
 80084a6:	4618      	mov	r0, r3
 80084a8:	e795      	b.n	80083d6 <__udivmoddi4+0x1da>
 80084aa:	4667      	mov	r7, ip
 80084ac:	e7d1      	b.n	8008452 <__udivmoddi4+0x256>
 80084ae:	4681      	mov	r9, r0
 80084b0:	e77c      	b.n	80083ac <__udivmoddi4+0x1b0>
 80084b2:	3802      	subs	r0, #2
 80084b4:	442c      	add	r4, r5
 80084b6:	e747      	b.n	8008348 <__udivmoddi4+0x14c>
 80084b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80084bc:	442b      	add	r3, r5
 80084be:	e72f      	b.n	8008320 <__udivmoddi4+0x124>
 80084c0:	4638      	mov	r0, r7
 80084c2:	e708      	b.n	80082d6 <__udivmoddi4+0xda>
 80084c4:	4637      	mov	r7, r6
 80084c6:	e6e9      	b.n	800829c <__udivmoddi4+0xa0>

080084c8 <__aeabi_idiv0>:
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop

080084cc <AppInit>:
**            software program initialization.
** \return    none.
**
****************************************************************************************/
void AppInit(void)
{
 80084cc:	b508      	push	{r3, lr}
  /* Initialize the timer driver. */
  TimerInit();
 80084ce:	f000 f90b 	bl	80086e8 <TimerInit>
  /* Initialize the led driver. */
  LedInit();
 80084d2:	f000 f893 	bl	80085fc <LedInit>
  /* initialize the bootloader interface */
  BootComInit();
 80084d6:	f000 f82b 	bl	8008530 <BootComInit>
} /*** end of AppInit ***/
 80084da:	bd08      	pop	{r3, pc}

080084dc <AppTask>:
**            continuously in the program loop.
** \return    none.
**
****************************************************************************************/
void AppTask(void)
{
 80084dc:	b508      	push	{r3, lr}
  /* Toggle LED with a fixed frequency. */
  LedToggle();
 80084de:	f000 f8b3 	bl	8008648 <LedToggle>
  /* check for bootloader activation request */
  BootComCheckActivationRequest();
 80084e2:	f000 f887 	bl	80085f4 <BootComCheckActivationRequest>
} /*** end of AppTask ***/
 80084e6:	bd08      	pop	{r3, pc}

080084e8 <BootComRs232Init>:
** \brief     Initializes the UART communication interface.
** \return    none.
**
****************************************************************************************/
static void BootComRs232Init(void)
{
 80084e8:	b508      	push	{r3, lr}
  /* Configure UART peripheral. */
  rs232Handle.Instance = USART6;
 80084ea:	4808      	ldr	r0, [pc, #32]	; (800850c <BootComRs232Init+0x24>)
 80084ec:	4b08      	ldr	r3, [pc, #32]	; (8008510 <BootComRs232Init+0x28>)
 80084ee:	6003      	str	r3, [r0, #0]
  rs232Handle.Init.BaudRate = BOOT_COM_RS232_BAUDRATE;
 80084f0:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80084f4:	6043      	str	r3, [r0, #4]
  rs232Handle.Init.WordLength = UART_WORDLENGTH_8B;
 80084f6:	2300      	movs	r3, #0
 80084f8:	6083      	str	r3, [r0, #8]
  rs232Handle.Init.StopBits = UART_STOPBITS_1;
 80084fa:	60c3      	str	r3, [r0, #12]
  rs232Handle.Init.Parity = UART_PARITY_NONE;
 80084fc:	6103      	str	r3, [r0, #16]
  rs232Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80084fe:	6183      	str	r3, [r0, #24]
  rs232Handle.Init.Mode = UART_MODE_TX_RX;
 8008500:	220c      	movs	r2, #12
 8008502:	6142      	str	r2, [r0, #20]
  rs232Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8008504:	61c3      	str	r3, [r0, #28]
  /* Initialize the UART peripheral. */
  HAL_UART_Init(&rs232Handle);
 8008506:	f001 f856 	bl	80095b6 <HAL_UART_Init>
} /*** end of BootComRs232Init ***/
 800850a:	bd08      	pop	{r3, pc}
 800850c:	20000028 	.word	0x20000028
 8008510:	40011400 	.word	0x40011400

08008514 <Rs232ReceiveByte>:
** \param     data Pointer to byte where the data is to be stored.
** \return    1 if a byte was received, 0 otherwise.
**
****************************************************************************************/
static unsigned char Rs232ReceiveByte(unsigned char *data)
{
 8008514:	b508      	push	{r3, lr}
  HAL_StatusTypeDef result;

  /* receive a byte in a non-blocking manner */
  result = HAL_UART_Receive(&rs232Handle, data, 1, 0);
 8008516:	2300      	movs	r3, #0
 8008518:	2201      	movs	r2, #1
 800851a:	4601      	mov	r1, r0
 800851c:	4803      	ldr	r0, [pc, #12]	; (800852c <Rs232ReceiveByte+0x18>)
 800851e:	f001 f879 	bl	8009614 <HAL_UART_Receive>
  /* process the result */
  if (result == HAL_OK)
 8008522:	b108      	cbz	r0, 8008528 <Rs232ReceiveByte+0x14>
  {
    /* success */
    return 1;
  }
  /* error occurred */
  return 0;
 8008524:	2000      	movs	r0, #0
} /*** end of Rs232ReceiveByte ***/
 8008526:	bd08      	pop	{r3, pc}
    return 1;
 8008528:	2001      	movs	r0, #1
 800852a:	e7fc      	b.n	8008526 <Rs232ReceiveByte+0x12>
 800852c:	20000028 	.word	0x20000028

08008530 <BootComInit>:
{
 8008530:	b508      	push	{r3, lr}
  BootComRs232Init();
 8008532:	f7ff ffd9 	bl	80084e8 <BootComRs232Init>
} /*** end of BootComInit ***/
 8008536:	bd08      	pop	{r3, pc}

08008538 <BootActivate>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008538:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800853c:	4905      	ldr	r1, [pc, #20]	; (8008554 <BootActivate+0x1c>)
 800853e:	68ca      	ldr	r2, [r1, #12]
 8008540:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008544:	4b04      	ldr	r3, [pc, #16]	; (8008558 <BootActivate+0x20>)
 8008546:	4313      	orrs	r3, r2
 8008548:	60cb      	str	r3, [r1, #12]
 800854a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800854e:	bf00      	nop
 8008550:	e7fd      	b.n	800854e <BootActivate+0x16>
 8008552:	bf00      	nop
 8008554:	e000ed00 	.word	0xe000ed00
 8008558:	05fa0004 	.word	0x05fa0004

0800855c <BootComRs232CheckActivationRequest>:
{
 800855c:	b508      	push	{r3, lr}
  if (xcpCtoRxInProgress == 0)
 800855e:	4b21      	ldr	r3, [pc, #132]	; (80085e4 <BootComRs232CheckActivationRequest+0x88>)
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	b9b3      	cbnz	r3, 8008592 <BootComRs232CheckActivationRequest+0x36>
    if (Rs232ReceiveByte(&xcpCtoReqPacket[0]) == 1)
 8008564:	4820      	ldr	r0, [pc, #128]	; (80085e8 <BootComRs232CheckActivationRequest+0x8c>)
 8008566:	f7ff ffd5 	bl	8008514 <Rs232ReceiveByte>
 800856a:	2801      	cmp	r0, #1
 800856c:	d000      	beq.n	8008570 <BootComRs232CheckActivationRequest+0x14>
} /*** end of BootComRs232CheckActivationRequest ***/
 800856e:	bd08      	pop	{r3, pc}
      if ( (xcpCtoReqPacket[0] > 0) &&
 8008570:	4b1d      	ldr	r3, [pc, #116]	; (80085e8 <BootComRs232CheckActivationRequest+0x8c>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	3b01      	subs	r3, #1
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2b3f      	cmp	r3, #63	; 0x3f
 800857a:	d8f8      	bhi.n	800856e <BootComRs232CheckActivationRequest+0x12>
        xcpCtoRxStartTime = TimerGet();
 800857c:	f000 f8b5 	bl	80086ea <TimerGet>
 8008580:	4b1a      	ldr	r3, [pc, #104]	; (80085ec <BootComRs232CheckActivationRequest+0x90>)
 8008582:	6018      	str	r0, [r3, #0]
        xcpCtoRxInProgress = 1;
 8008584:	4b17      	ldr	r3, [pc, #92]	; (80085e4 <BootComRs232CheckActivationRequest+0x88>)
 8008586:	2201      	movs	r2, #1
 8008588:	701a      	strb	r2, [r3, #0]
        xcpCtoRxLength = 0;
 800858a:	4b19      	ldr	r3, [pc, #100]	; (80085f0 <BootComRs232CheckActivationRequest+0x94>)
 800858c:	2200      	movs	r2, #0
 800858e:	701a      	strb	r2, [r3, #0]
 8008590:	e7ed      	b.n	800856e <BootComRs232CheckActivationRequest+0x12>
    if (Rs232ReceiveByte(&xcpCtoReqPacket[xcpCtoRxLength+1]) == 1)
 8008592:	4b17      	ldr	r3, [pc, #92]	; (80085f0 <BootComRs232CheckActivationRequest+0x94>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	3301      	adds	r3, #1
 8008598:	4813      	ldr	r0, [pc, #76]	; (80085e8 <BootComRs232CheckActivationRequest+0x8c>)
 800859a:	4418      	add	r0, r3
 800859c:	f7ff ffba 	bl	8008514 <Rs232ReceiveByte>
 80085a0:	2801      	cmp	r0, #1
 80085a2:	d113      	bne.n	80085cc <BootComRs232CheckActivationRequest+0x70>
      xcpCtoRxLength++;
 80085a4:	4a12      	ldr	r2, [pc, #72]	; (80085f0 <BootComRs232CheckActivationRequest+0x94>)
 80085a6:	7813      	ldrb	r3, [r2, #0]
 80085a8:	3301      	adds	r3, #1
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	7013      	strb	r3, [r2, #0]
      if (xcpCtoRxLength == xcpCtoReqPacket[0])
 80085ae:	4a0e      	ldr	r2, [pc, #56]	; (80085e8 <BootComRs232CheckActivationRequest+0x8c>)
 80085b0:	7812      	ldrb	r2, [r2, #0]
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d1db      	bne.n	800856e <BootComRs232CheckActivationRequest+0x12>
        xcpCtoRxInProgress = 0;
 80085b6:	4a0b      	ldr	r2, [pc, #44]	; (80085e4 <BootComRs232CheckActivationRequest+0x88>)
 80085b8:	2100      	movs	r1, #0
 80085ba:	7011      	strb	r1, [r2, #0]
        if ((xcpCtoReqPacket[1] == 0xff) && (xcpCtoRxLength == 2))
 80085bc:	4a0a      	ldr	r2, [pc, #40]	; (80085e8 <BootComRs232CheckActivationRequest+0x8c>)
 80085be:	7852      	ldrb	r2, [r2, #1]
 80085c0:	2aff      	cmp	r2, #255	; 0xff
 80085c2:	d1d4      	bne.n	800856e <BootComRs232CheckActivationRequest+0x12>
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d1d2      	bne.n	800856e <BootComRs232CheckActivationRequest+0x12>
          BootActivate();
 80085c8:	f7ff ffb6 	bl	8008538 <BootActivate>
      if (TimerGet() > (xcpCtoRxStartTime + RS232_CTO_RX_PACKET_TIMEOUT_MS))
 80085cc:	f000 f88d 	bl	80086ea <TimerGet>
 80085d0:	4b06      	ldr	r3, [pc, #24]	; (80085ec <BootComRs232CheckActivationRequest+0x90>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	3364      	adds	r3, #100	; 0x64
 80085d6:	4298      	cmp	r0, r3
 80085d8:	d9c9      	bls.n	800856e <BootComRs232CheckActivationRequest+0x12>
        xcpCtoRxInProgress = 0;
 80085da:	4b02      	ldr	r3, [pc, #8]	; (80085e4 <BootComRs232CheckActivationRequest+0x88>)
 80085dc:	2200      	movs	r2, #0
 80085de:	701a      	strb	r2, [r3, #0]
} /*** end of BootComRs232CheckActivationRequest ***/
 80085e0:	e7c5      	b.n	800856e <BootComRs232CheckActivationRequest+0x12>
 80085e2:	bf00      	nop
 80085e4:	200000a9 	.word	0x200000a9
 80085e8:	20000068 	.word	0x20000068
 80085ec:	200000ac 	.word	0x200000ac
 80085f0:	200000aa 	.word	0x200000aa

080085f4 <BootComCheckActivationRequest>:
{
 80085f4:	b508      	push	{r3, lr}
  BootComRs232CheckActivationRequest();
 80085f6:	f7ff ffb1 	bl	800855c <BootComRs232CheckActivationRequest>
} /*** end of BootComCheckActivationRequest ***/
 80085fa:	bd08      	pop	{r3, pc}

080085fc <LedInit>:
** \brief     Initializes the LED.
** \return    none.
**
****************************************************************************************/
void LedInit(void)
{
 80085fc:	b510      	push	{r4, lr}
  /* Note that the initialization of the LED GPIO pin is done in HAL_MspInit(). All that
   * is left to do here is to make sure the LED is turned off after initialization.
   */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80085fe:	2201      	movs	r2, #1
 8008600:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008604:	480e      	ldr	r0, [pc, #56]	; (8008640 <LedInit+0x44>)
 8008606:	f000 fb5b 	bl	8008cc0 <HAL_GPIO_WritePin>

  SET_LED3_ORANGE(GPIO_PIN_SET);
 800860a:	4c0e      	ldr	r4, [pc, #56]	; (8008644 <LedInit+0x48>)
 800860c:	2201      	movs	r2, #1
 800860e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008612:	4620      	mov	r0, r4
 8008614:	f000 fb54 	bl	8008cc0 <HAL_GPIO_WritePin>
  SET_LED4_GREEN(GPIO_PIN_SET);
 8008618:	2201      	movs	r2, #1
 800861a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800861e:	4620      	mov	r0, r4
 8008620:	f000 fb4e 	bl	8008cc0 <HAL_GPIO_WritePin>
  SET_LED5_RED(GPIO_PIN_SET);
 8008624:	2201      	movs	r2, #1
 8008626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800862a:	4620      	mov	r0, r4
 800862c:	f000 fb48 	bl	8008cc0 <HAL_GPIO_WritePin>
  SET_LED6_BLUE(GPIO_PIN_SET);
 8008630:	2201      	movs	r2, #1
 8008632:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008636:	4620      	mov	r0, r4
 8008638:	f000 fb42 	bl	8008cc0 <HAL_GPIO_WritePin>
} /*** end of LedInit ***/
 800863c:	bd10      	pop	{r4, pc}
 800863e:	bf00      	nop
 8008640:	40020800 	.word	0x40020800
 8008644:	40020c00 	.word	0x40020c00

08008648 <LedToggle>:
** \brief     Toggles the LED at a fixed time interval.
** \return    none.
**
****************************************************************************************/
void LedToggle(void)
{
 8008648:	b570      	push	{r4, r5, r6, lr}
  static unsigned char led_toggle_state = 0;
  static unsigned long timer_counter_last = 0;
  unsigned long timer_counter_now;

  /* check if toggle interval time passed */
  timer_counter_now = TimerGet();
 800864a:	f000 f84e 	bl	80086ea <TimerGet>
  if ( (timer_counter_now - timer_counter_last) < LED_TOGGLE_MS)
 800864e:	4b23      	ldr	r3, [pc, #140]	; (80086dc <LedToggle+0x94>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	1ac3      	subs	r3, r0, r3
 8008654:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008658:	d321      	bcc.n	800869e <LedToggle+0x56>
 800865a:	4604      	mov	r4, r0
    /* not yet time to toggle */
    return;
  }

  /* determine toggle action */
  if (led_toggle_state == 0)
 800865c:	4b20      	ldr	r3, [pc, #128]	; (80086e0 <LedToggle+0x98>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	b9f3      	cbnz	r3, 80086a0 <LedToggle+0x58>
  {
    led_toggle_state = 1;
 8008662:	2601      	movs	r6, #1
 8008664:	4b1e      	ldr	r3, [pc, #120]	; (80086e0 <LedToggle+0x98>)
 8008666:	701e      	strb	r6, [r3, #0]
    /* turn the LED on */
    SET_LED3_ORANGE(GPIO_PIN_RESET);
 8008668:	4d1e      	ldr	r5, [pc, #120]	; (80086e4 <LedToggle+0x9c>)
 800866a:	2200      	movs	r2, #0
 800866c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008670:	4628      	mov	r0, r5
 8008672:	f000 fb25 	bl	8008cc0 <HAL_GPIO_WritePin>
    SET_LED4_GREEN(GPIO_PIN_SET);
 8008676:	4632      	mov	r2, r6
 8008678:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800867c:	4628      	mov	r0, r5
 800867e:	f000 fb1f 	bl	8008cc0 <HAL_GPIO_WritePin>
    SET_LED5_RED(GPIO_PIN_RESET);
 8008682:	2200      	movs	r2, #0
 8008684:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008688:	4628      	mov	r0, r5
 800868a:	f000 fb19 	bl	8008cc0 <HAL_GPIO_WritePin>
    SET_LED6_BLUE(GPIO_PIN_SET);
 800868e:	4632      	mov	r2, r6
 8008690:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008694:	4628      	mov	r0, r5
 8008696:	f000 fb13 	bl	8008cc0 <HAL_GPIO_WritePin>
    SET_LED5_RED(GPIO_PIN_SET);
    SET_LED6_BLUE(GPIO_PIN_RESET);
  }

  /* store toggle time to determine next toggle interval */
  timer_counter_last = timer_counter_now;
 800869a:	4b10      	ldr	r3, [pc, #64]	; (80086dc <LedToggle+0x94>)
 800869c:	601c      	str	r4, [r3, #0]
} /*** end of LedToggle ***/
 800869e:	bd70      	pop	{r4, r5, r6, pc}
    led_toggle_state = 0;
 80086a0:	2600      	movs	r6, #0
 80086a2:	4b0f      	ldr	r3, [pc, #60]	; (80086e0 <LedToggle+0x98>)
 80086a4:	701e      	strb	r6, [r3, #0]
    SET_LED3_ORANGE(GPIO_PIN_SET);
 80086a6:	4d0f      	ldr	r5, [pc, #60]	; (80086e4 <LedToggle+0x9c>)
 80086a8:	2201      	movs	r2, #1
 80086aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80086ae:	4628      	mov	r0, r5
 80086b0:	f000 fb06 	bl	8008cc0 <HAL_GPIO_WritePin>
    SET_LED4_GREEN(GPIO_PIN_RESET);
 80086b4:	4632      	mov	r2, r6
 80086b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80086ba:	4628      	mov	r0, r5
 80086bc:	f000 fb00 	bl	8008cc0 <HAL_GPIO_WritePin>
    SET_LED5_RED(GPIO_PIN_SET);
 80086c0:	2201      	movs	r2, #1
 80086c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80086c6:	4628      	mov	r0, r5
 80086c8:	f000 fafa 	bl	8008cc0 <HAL_GPIO_WritePin>
    SET_LED6_BLUE(GPIO_PIN_RESET);
 80086cc:	4632      	mov	r2, r6
 80086ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80086d2:	4628      	mov	r0, r5
 80086d4:	f000 faf4 	bl	8008cc0 <HAL_GPIO_WritePin>
 80086d8:	e7df      	b.n	800869a <LedToggle+0x52>
 80086da:	bf00      	nop
 80086dc:	200000b4 	.word	0x200000b4
 80086e0:	200000b0 	.word	0x200000b0
 80086e4:	40020c00 	.word	0x40020c00

080086e8 <TimerInit>:
void TimerInit(void)
{
  /* The HAL initialization already configured the Systick interrupt to generate an
   * interrupt every 1 millisecond. Nothing more needs to be done here.
   */
} /*** end of TimerInit ***/
 80086e8:	4770      	bx	lr

080086ea <TimerGet>:
** \brief     Obtains the counter value of the millisecond timer.
** \return    Current value of the millisecond timer.
**
****************************************************************************************/
unsigned long TimerGet(void)
{
 80086ea:	b508      	push	{r3, lr}
  /* Read and return the tick counter value. */
  return HAL_GetTick();
 80086ec:	f000 f9a2 	bl	8008a34 <HAL_GetTick>
} /*** end of TimerGet ***/
 80086f0:	bd08      	pop	{r3, pc}
	...

080086f4 <VectorBase_Config>:
{
  /* The constant array with vectors of the vector table is declared externally in the
   * c-startup code.
   */
  extern const unsigned long g_pfnVectors[];

 80086f4:	4a01      	ldr	r2, [pc, #4]	; (80086fc <VectorBase_Config+0x8>)
 80086f6:	4b02      	ldr	r3, [pc, #8]	; (8008700 <VectorBase_Config+0xc>)
 80086f8:	609a      	str	r2, [r3, #8]
  /* Remap the vector table to where the vector table is located for this program. */
 80086fa:	4770      	bx	lr
 80086fc:	08008000 	.word	0x08008000
 8008700:	e000ed00 	.word	0xe000ed00

08008704 <MX_GPIO_Init>:

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 8008704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008706:	b08b      	sub	sp, #44	; 0x2c
static void MX_GPIO_Init(void)
 8008708:	2400      	movs	r4, #0
 800870a:	9405      	str	r4, [sp, #20]
 800870c:	9406      	str	r4, [sp, #24]
 800870e:	9407      	str	r4, [sp, #28]
 8008710:	9408      	str	r4, [sp, #32]
 8008712:	9409      	str	r4, [sp, #36]	; 0x24
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

 8008714:	9401      	str	r4, [sp, #4]
 8008716:	4b26      	ldr	r3, [pc, #152]	; (80087b0 <MX_GPIO_Init+0xac>)
 8008718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800871a:	f042 0204 	orr.w	r2, r2, #4
 800871e:	631a      	str	r2, [r3, #48]	; 0x30
 8008720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008722:	f002 0204 	and.w	r2, r2, #4
 8008726:	9201      	str	r2, [sp, #4]
 8008728:	9a01      	ldr	r2, [sp, #4]
  /* GPIO Ports Clock Enable */
 800872a:	9402      	str	r4, [sp, #8]
 800872c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800872e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008732:	631a      	str	r2, [r3, #48]	; 0x30
 8008734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008736:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800873a:	9202      	str	r2, [sp, #8]
 800873c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800873e:	9403      	str	r4, [sp, #12]
 8008740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008742:	f042 0208 	orr.w	r2, r2, #8
 8008746:	631a      	str	r2, [r3, #48]	; 0x30
 8008748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800874a:	f002 0208 	and.w	r2, r2, #8
 800874e:	9203      	str	r2, [sp, #12]
 8008750:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008752:	9404      	str	r4, [sp, #16]
 8008754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008756:	f042 0202 	orr.w	r2, r2, #2
 800875a:	631a      	str	r2, [r3, #48]	; 0x30
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	9304      	str	r3, [sp, #16]
 8008764:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
 8008766:	4f13      	ldr	r7, [pc, #76]	; (80087b4 <MX_GPIO_Init+0xb0>)
 8008768:	4622      	mov	r2, r4
 800876a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800876e:	4638      	mov	r0, r7
 8008770:	f000 faa6 	bl	8008cc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
 8008774:	4d10      	ldr	r5, [pc, #64]	; (80087b8 <MX_GPIO_Init+0xb4>)
 8008776:	4622      	mov	r2, r4
 8008778:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800877c:	4628      	mov	r0, r5
 800877e:	f000 fa9f 	bl	8008cc0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008786:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008788:	2601      	movs	r6, #1
 800878a:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800878c:	9407      	str	r4, [sp, #28]

 800878e:	9408      	str	r4, [sp, #32]
}
 8008790:	a905      	add	r1, sp, #20
 8008792:	4638      	mov	r0, r7
 8008794:	f000 f9b0 	bl	8008af8 <HAL_GPIO_Init>

/* USER CODE BEGIN 4 */

 8008798:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800879c:	9305      	str	r3, [sp, #20]
/* USER CODE END 4 */
 800879e:	9606      	str	r6, [sp, #24]

 80087a0:	9407      	str	r4, [sp, #28]
/**
 80087a2:	9408      	str	r4, [sp, #32]
  * @brief  This function is executed in case of error occurrence.
 80087a4:	a905      	add	r1, sp, #20
 80087a6:	4628      	mov	r0, r5
 80087a8:	f000 f9a6 	bl	8008af8 <HAL_GPIO_Init>
  * @retval None
  */
 80087ac:	b00b      	add	sp, #44	; 0x2c
 80087ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087b0:	40023800 	.word	0x40023800
 80087b4:	40020800 	.word	0x40020800
 80087b8:	40020c00 	.word	0x40020c00

080087bc <SystemClock_Config>:
  */
 80087bc:	b530      	push	{r4, r5, lr}
 80087be:	b095      	sub	sp, #84	; 0x54
void SystemClock_Config(void)
 80087c0:	2230      	movs	r2, #48	; 0x30
 80087c2:	2100      	movs	r1, #0
 80087c4:	a808      	add	r0, sp, #32
 80087c6:	f000 ffbd 	bl	8009744 <memset>
{
 80087ca:	2400      	movs	r4, #0
 80087cc:	9403      	str	r4, [sp, #12]
 80087ce:	9404      	str	r4, [sp, #16]
 80087d0:	9405      	str	r4, [sp, #20]
 80087d2:	9406      	str	r4, [sp, #24]
 80087d4:	9407      	str	r4, [sp, #28]
  /** Configure the main internal regulator output voltage
 80087d6:	9401      	str	r4, [sp, #4]
 80087d8:	4b1b      	ldr	r3, [pc, #108]	; (8008848 <SystemClock_Config+0x8c>)
 80087da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80087e0:	641a      	str	r2, [r3, #64]	; 0x40
 80087e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087e8:	9301      	str	r3, [sp, #4]
 80087ea:	9b01      	ldr	r3, [sp, #4]
  */
 80087ec:	9402      	str	r4, [sp, #8]
 80087ee:	4b17      	ldr	r3, [pc, #92]	; (800884c <SystemClock_Config+0x90>)
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087fe:	9302      	str	r3, [sp, #8]
 8008800:	9b02      	ldr	r3, [sp, #8]
  * in the RCC_OscInitTypeDef structure.
 8008802:	2301      	movs	r3, #1
 8008804:	9308      	str	r3, [sp, #32]
  */
 8008806:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800880a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800880c:	2502      	movs	r5, #2
 800880e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008810:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008814:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008816:	2304      	movs	r3, #4
 8008818:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800881a:	22a8      	movs	r2, #168	; 0xa8
 800881c:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 12;
 800881e:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 8008820:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008822:	a808      	add	r0, sp, #32
 8008824:	f000 fa52 	bl	8008ccc <HAL_RCC_OscConfig>
  /** Initializes the CPU, AHB and APB buses clocks
 8008828:	230f      	movs	r3, #15
 800882a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800882c:	9504      	str	r5, [sp, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 800882e:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008830:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008834:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800883a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800883c:	2105      	movs	r1, #5
 800883e:	a803      	add	r0, sp, #12
 8008840:	f000 fca6 	bl	8009190 <HAL_RCC_ClockConfig>
    Error_Handler();
 8008844:	b015      	add	sp, #84	; 0x54
 8008846:	bd30      	pop	{r4, r5, pc}
 8008848:	40023800 	.word	0x40023800
 800884c:	40007000 	.word	0x40007000

08008850 <main>:
  */
 8008850:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 1 */
 8008852:	f7ff ff4f 	bl	80086f4 <VectorBase_Config>

 8008856:	f000 f8c7 	bl	80089e8 <HAL_Init>

 800885a:	f7ff ffaf 	bl	80087bc <SystemClock_Config>

 800885e:	f7ff ff51 	bl	8008704 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
 8008862:	f7ff fe33 	bl	80084cc <AppInit>
  {
 8008866:	f7ff fe39 	bl	80084dc <AppTask>
 800886a:	e7fc      	b.n	8008866 <main+0x16>

0800886c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800886c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800886e:	2100      	movs	r1, #0
 8008870:	9100      	str	r1, [sp, #0]
 8008872:	4b0b      	ldr	r3, [pc, #44]	; (80088a0 <HAL_MspInit+0x34>)
 8008874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800887a:	645a      	str	r2, [r3, #68]	; 0x44
 800887c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800887e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008882:	9200      	str	r2, [sp, #0]
 8008884:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008886:	9101      	str	r1, [sp, #4]
 8008888:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800888a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800888e:	641a      	str	r2, [r3, #64]	; 0x40
 8008890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008896:	9301      	str	r3, [sp, #4]
 8008898:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800889a:	b002      	add	sp, #8
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	40023800 	.word	0x40023800

080088a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80088a4:	b500      	push	{lr}
 80088a6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088a8:	2300      	movs	r3, #0
 80088aa:	9303      	str	r3, [sp, #12]
 80088ac:	9304      	str	r3, [sp, #16]
 80088ae:	9305      	str	r3, [sp, #20]
 80088b0:	9306      	str	r3, [sp, #24]
 80088b2:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART6)
 80088b4:	6802      	ldr	r2, [r0, #0]
 80088b6:	4b15      	ldr	r3, [pc, #84]	; (800890c <HAL_UART_MspInit+0x68>)
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d002      	beq.n	80088c2 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80088bc:	b009      	add	sp, #36	; 0x24
 80088be:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART6_CLK_ENABLE();
 80088c2:	2100      	movs	r1, #0
 80088c4:	9101      	str	r1, [sp, #4]
 80088c6:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 80088ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088cc:	f042 0220 	orr.w	r2, r2, #32
 80088d0:	645a      	str	r2, [r3, #68]	; 0x44
 80088d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088d4:	f002 0220 	and.w	r2, r2, #32
 80088d8:	9201      	str	r2, [sp, #4]
 80088da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80088dc:	9102      	str	r1, [sp, #8]
 80088de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088e0:	f042 0204 	orr.w	r2, r2, #4
 80088e4:	631a      	str	r2, [r3, #48]	; 0x30
 80088e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e8:	f003 0304 	and.w	r3, r3, #4
 80088ec:	9302      	str	r3, [sp, #8]
 80088ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80088f0:	23c0      	movs	r3, #192	; 0xc0
 80088f2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088f4:	2302      	movs	r3, #2
 80088f6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088f8:	2303      	movs	r3, #3
 80088fa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80088fc:	2308      	movs	r3, #8
 80088fe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008900:	a903      	add	r1, sp, #12
 8008902:	4803      	ldr	r0, [pc, #12]	; (8008910 <HAL_UART_MspInit+0x6c>)
 8008904:	f000 f8f8 	bl	8008af8 <HAL_GPIO_Init>
}
 8008908:	e7d8      	b.n	80088bc <HAL_UART_MspInit+0x18>
 800890a:	bf00      	nop
 800890c:	40011400 	.word	0x40011400
 8008910:	40020800 	.word	0x40020800

08008914 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008914:	4770      	bx	lr

08008916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008916:	e7fe      	b.n	8008916 <HardFault_Handler>

08008918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008918:	e7fe      	b.n	8008918 <MemManage_Handler>

0800891a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800891a:	e7fe      	b.n	800891a <BusFault_Handler>

0800891c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800891c:	e7fe      	b.n	800891c <UsageFault_Handler>

0800891e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800891e:	4770      	bx	lr

08008920 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008920:	4770      	bx	lr

08008922 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008922:	4770      	bx	lr

08008924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008924:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008926:	f000 f879 	bl	8008a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800892a:	bd08      	pop	{r3, pc}

0800892c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800892c:	4b05      	ldr	r3, [pc, #20]	; (8008944 <SystemInit+0x18>)
 800892e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008932:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8008936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800893a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800893e:	609a      	str	r2, [r3, #8]
#endif
}
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	e000ed00 	.word	0xe000ed00

08008948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008980 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800894c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800894e:	e003      	b.n	8008958 <LoopCopyDataInit>

08008950 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008950:	4b0c      	ldr	r3, [pc, #48]	; (8008984 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008952:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008954:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008956:	3104      	adds	r1, #4

08008958 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008958:	480b      	ldr	r0, [pc, #44]	; (8008988 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800895a:	4b0c      	ldr	r3, [pc, #48]	; (800898c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800895c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800895e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008960:	d3f6      	bcc.n	8008950 <CopyDataInit>
  ldr  r2, =_sbss
 8008962:	4a0b      	ldr	r2, [pc, #44]	; (8008990 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008964:	e002      	b.n	800896c <LoopFillZerobss>

08008966 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008966:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008968:	f842 3b04 	str.w	r3, [r2], #4

0800896c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800896c:	4b09      	ldr	r3, [pc, #36]	; (8008994 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800896e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008970:	d3f9      	bcc.n	8008966 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008972:	f7ff ffdb 	bl	800892c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008976:	f000 fec1 	bl	80096fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800897a:	f7ff ff69 	bl	8008850 <main>
  bx  lr    
 800897e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008980:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008984:	08009794 	.word	0x08009794
  ldr  r0, =_sdata
 8008988:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800898c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8008990:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8008994:	200000bc 	.word	0x200000bc

08008998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008998:	e7fe      	b.n	8008998 <ADC_IRQHandler>
	...

0800899c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800899c:	b510      	push	{r4, lr}
 800899e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80089a0:	4b0e      	ldr	r3, [pc, #56]	; (80089dc <HAL_InitTick+0x40>)
 80089a2:	7818      	ldrb	r0, [r3, #0]
 80089a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80089a8:	fbb3 f3f0 	udiv	r3, r3, r0
 80089ac:	4a0c      	ldr	r2, [pc, #48]	; (80089e0 <HAL_InitTick+0x44>)
 80089ae:	6810      	ldr	r0, [r2, #0]
 80089b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80089b4:	f000 f88a 	bl	8008acc <HAL_SYSTICK_Config>
 80089b8:	b968      	cbnz	r0, 80089d6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80089ba:	2c0f      	cmp	r4, #15
 80089bc:	d901      	bls.n	80089c2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80089be:	2001      	movs	r0, #1
 80089c0:	e00a      	b.n	80089d8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80089c2:	2200      	movs	r2, #0
 80089c4:	4621      	mov	r1, r4
 80089c6:	f04f 30ff 	mov.w	r0, #4294967295
 80089ca:	f000 f84b 	bl	8008a64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80089ce:	4b05      	ldr	r3, [pc, #20]	; (80089e4 <HAL_InitTick+0x48>)
 80089d0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089d2:	2000      	movs	r0, #0
 80089d4:	e000      	b.n	80089d8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80089d6:	2001      	movs	r0, #1
}
 80089d8:	bd10      	pop	{r4, pc}
 80089da:	bf00      	nop
 80089dc:	20000004 	.word	0x20000004
 80089e0:	20000000 	.word	0x20000000
 80089e4:	20000008 	.word	0x20000008

080089e8 <HAL_Init>:
{
 80089e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80089ea:	4b0b      	ldr	r3, [pc, #44]	; (8008a18 <HAL_Init+0x30>)
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80089fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a02:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008a04:	2003      	movs	r0, #3
 8008a06:	f000 f81b 	bl	8008a40 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	f7ff ffc6 	bl	800899c <HAL_InitTick>
  HAL_MspInit();
 8008a10:	f7ff ff2c 	bl	800886c <HAL_MspInit>
}
 8008a14:	2000      	movs	r0, #0
 8008a16:	bd08      	pop	{r3, pc}
 8008a18:	40023c00 	.word	0x40023c00

08008a1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8008a1c:	4a03      	ldr	r2, [pc, #12]	; (8008a2c <HAL_IncTick+0x10>)
 8008a1e:	6811      	ldr	r1, [r2, #0]
 8008a20:	4b03      	ldr	r3, [pc, #12]	; (8008a30 <HAL_IncTick+0x14>)
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	440b      	add	r3, r1
 8008a26:	6013      	str	r3, [r2, #0]
}
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	200000b8 	.word	0x200000b8
 8008a30:	20000004 	.word	0x20000004

08008a34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008a34:	4b01      	ldr	r3, [pc, #4]	; (8008a3c <HAL_GetTick+0x8>)
 8008a36:	6818      	ldr	r0, [r3, #0]
}
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	200000b8 	.word	0x200000b8

08008a40 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a40:	4a07      	ldr	r2, [pc, #28]	; (8008a60 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008a42:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a44:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008a48:	041b      	lsls	r3, r3, #16
 8008a4a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008a4c:	0200      	lsls	r0, r0, #8
 8008a4e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a52:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8008a54:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8008a58:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8008a5c:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008a5e:	4770      	bx	lr
 8008a60:	e000ed00 	.word	0xe000ed00

08008a64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008a64:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a66:	4b17      	ldr	r3, [pc, #92]	; (8008ac4 <HAL_NVIC_SetPriority+0x60>)
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a6e:	f1c3 0407 	rsb	r4, r3, #7
 8008a72:	2c04      	cmp	r4, #4
 8008a74:	bf28      	it	cs
 8008a76:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a78:	1d1d      	adds	r5, r3, #4
 8008a7a:	2d06      	cmp	r5, #6
 8008a7c:	d918      	bls.n	8008ab0 <HAL_NVIC_SetPriority+0x4c>
 8008a7e:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a80:	f04f 35ff 	mov.w	r5, #4294967295
 8008a84:	fa05 f404 	lsl.w	r4, r5, r4
 8008a88:	ea21 0104 	bic.w	r1, r1, r4
 8008a8c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a8e:	fa05 f303 	lsl.w	r3, r5, r3
 8008a92:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a96:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	db0b      	blt.n	8008ab4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a9c:	0109      	lsls	r1, r1, #4
 8008a9e:	b2c9      	uxtb	r1, r1
 8008aa0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8008aa4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8008aa8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008aac:	bc30      	pop	{r4, r5}
 8008aae:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	e7e5      	b.n	8008a80 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ab4:	f000 000f 	and.w	r0, r0, #15
 8008ab8:	0109      	lsls	r1, r1, #4
 8008aba:	b2c9      	uxtb	r1, r1
 8008abc:	4b02      	ldr	r3, [pc, #8]	; (8008ac8 <HAL_NVIC_SetPriority+0x64>)
 8008abe:	5419      	strb	r1, [r3, r0]
 8008ac0:	e7f4      	b.n	8008aac <HAL_NVIC_SetPriority+0x48>
 8008ac2:	bf00      	nop
 8008ac4:	e000ed00 	.word	0xe000ed00
 8008ac8:	e000ed14 	.word	0xe000ed14

08008acc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008acc:	3801      	subs	r0, #1
 8008ace:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8008ad2:	d20a      	bcs.n	8008aea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008ad4:	4b06      	ldr	r3, [pc, #24]	; (8008af0 <HAL_SYSTICK_Config+0x24>)
 8008ad6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ad8:	4a06      	ldr	r2, [pc, #24]	; (8008af4 <HAL_SYSTICK_Config+0x28>)
 8008ada:	21f0      	movs	r1, #240	; 0xf0
 8008adc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008ae4:	2207      	movs	r2, #7
 8008ae6:	601a      	str	r2, [r3, #0]
 8008ae8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008aea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	e000e010 	.word	0xe000e010
 8008af4:	e000ed00 	.word	0xe000ed00

08008af8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008af8:	2300      	movs	r3, #0
 8008afa:	2b0f      	cmp	r3, #15
 8008afc:	f200 80d7 	bhi.w	8008cae <HAL_GPIO_Init+0x1b6>
{
 8008b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b02:	b083      	sub	sp, #12
 8008b04:	e039      	b.n	8008b7a <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008b06:	2207      	movs	r2, #7
 8008b08:	e000      	b.n	8008b0c <HAL_GPIO_Init+0x14>
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	40aa      	lsls	r2, r5
 8008b0e:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008b10:	3402      	adds	r4, #2
 8008b12:	4d67      	ldr	r5, [pc, #412]	; (8008cb0 <HAL_GPIO_Init+0x1b8>)
 8008b14:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008b18:	4a66      	ldr	r2, [pc, #408]	; (8008cb4 <HAL_GPIO_Init+0x1bc>)
 8008b1a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8008b1c:	43f2      	mvns	r2, r6
 8008b1e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008b22:	684f      	ldr	r7, [r1, #4]
 8008b24:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8008b28:	d001      	beq.n	8008b2e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8008b2a:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 8008b2e:	4c61      	ldr	r4, [pc, #388]	; (8008cb4 <HAL_GPIO_Init+0x1bc>)
 8008b30:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8008b32:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8008b34:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008b38:	684f      	ldr	r7, [r1, #4]
 8008b3a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8008b3e:	d001      	beq.n	8008b44 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8008b40:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 8008b44:	4c5b      	ldr	r4, [pc, #364]	; (8008cb4 <HAL_GPIO_Init+0x1bc>)
 8008b46:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008b48:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8008b4a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008b4e:	684f      	ldr	r7, [r1, #4]
 8008b50:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8008b54:	d001      	beq.n	8008b5a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8008b56:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 8008b5a:	4c56      	ldr	r4, [pc, #344]	; (8008cb4 <HAL_GPIO_Init+0x1bc>)
 8008b5c:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8008b5e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8008b60:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008b62:	684d      	ldr	r5, [r1, #4]
 8008b64:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8008b68:	d001      	beq.n	8008b6e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8008b6a:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 8008b6e:	4c51      	ldr	r4, [pc, #324]	; (8008cb4 <HAL_GPIO_Init+0x1bc>)
 8008b70:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b72:	3301      	adds	r3, #1
 8008b74:	2b0f      	cmp	r3, #15
 8008b76:	f200 8098 	bhi.w	8008caa <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b7e:	680c      	ldr	r4, [r1, #0]
 8008b80:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8008b84:	42b2      	cmp	r2, r6
 8008b86:	d1f4      	bne.n	8008b72 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008b88:	684c      	ldr	r4, [r1, #4]
 8008b8a:	1e65      	subs	r5, r4, #1
 8008b8c:	2d01      	cmp	r5, #1
 8008b8e:	d903      	bls.n	8008b98 <HAL_GPIO_Init+0xa0>
 8008b90:	2c11      	cmp	r4, #17
 8008b92:	d001      	beq.n	8008b98 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b94:	2c12      	cmp	r4, #18
 8008b96:	d112      	bne.n	8008bbe <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8008b98:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008b9a:	005f      	lsls	r7, r3, #1
 8008b9c:	2403      	movs	r4, #3
 8008b9e:	40bc      	lsls	r4, r7
 8008ba0:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008ba4:	68cc      	ldr	r4, [r1, #12]
 8008ba6:	40bc      	lsls	r4, r7
 8008ba8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8008baa:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8008bac:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008bae:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008bb2:	684c      	ldr	r4, [r1, #4]
 8008bb4:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8008bb8:	409a      	lsls	r2, r3
 8008bba:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8008bbc:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8008bbe:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008bc0:	005f      	lsls	r7, r3, #1
 8008bc2:	2203      	movs	r2, #3
 8008bc4:	40ba      	lsls	r2, r7
 8008bc6:	43d2      	mvns	r2, r2
 8008bc8:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008bca:	688d      	ldr	r5, [r1, #8]
 8008bcc:	40bd      	lsls	r5, r7
 8008bce:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8008bd0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008bd2:	684c      	ldr	r4, [r1, #4]
 8008bd4:	2c02      	cmp	r4, #2
 8008bd6:	d001      	beq.n	8008bdc <HAL_GPIO_Init+0xe4>
 8008bd8:	2c12      	cmp	r4, #18
 8008bda:	d113      	bne.n	8008c04 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8008bdc:	08dd      	lsrs	r5, r3, #3
 8008bde:	3508      	adds	r5, #8
 8008be0:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008be4:	f003 0407 	and.w	r4, r3, #7
 8008be8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008bec:	240f      	movs	r4, #15
 8008bee:	fa04 f40c 	lsl.w	r4, r4, ip
 8008bf2:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008bf6:	690c      	ldr	r4, [r1, #16]
 8008bf8:	fa04 f40c 	lsl.w	r4, r4, ip
 8008bfc:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8008c00:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8008c04:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008c06:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c08:	684c      	ldr	r4, [r1, #4]
 8008c0a:	f004 0403 	and.w	r4, r4, #3
 8008c0e:	40bc      	lsls	r4, r7
 8008c10:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8008c12:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008c14:	684a      	ldr	r2, [r1, #4]
 8008c16:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8008c1a:	d0aa      	beq.n	8008b72 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	9201      	str	r2, [sp, #4]
 8008c20:	4a25      	ldr	r2, [pc, #148]	; (8008cb8 <HAL_GPIO_Init+0x1c0>)
 8008c22:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8008c24:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8008c28:	6454      	str	r4, [r2, #68]	; 0x44
 8008c2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008c2c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008c30:	9201      	str	r2, [sp, #4]
 8008c32:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8008c34:	089c      	lsrs	r4, r3, #2
 8008c36:	1ca5      	adds	r5, r4, #2
 8008c38:	4a1d      	ldr	r2, [pc, #116]	; (8008cb0 <HAL_GPIO_Init+0x1b8>)
 8008c3a:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008c3e:	f003 0203 	and.w	r2, r3, #3
 8008c42:	0095      	lsls	r5, r2, #2
 8008c44:	220f      	movs	r2, #15
 8008c46:	40aa      	lsls	r2, r5
 8008c48:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008c4c:	4a1b      	ldr	r2, [pc, #108]	; (8008cbc <HAL_GPIO_Init+0x1c4>)
 8008c4e:	4290      	cmp	r0, r2
 8008c50:	f43f af5b 	beq.w	8008b0a <HAL_GPIO_Init+0x12>
 8008c54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c58:	4290      	cmp	r0, r2
 8008c5a:	d01a      	beq.n	8008c92 <HAL_GPIO_Init+0x19a>
 8008c5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c60:	4290      	cmp	r0, r2
 8008c62:	d018      	beq.n	8008c96 <HAL_GPIO_Init+0x19e>
 8008c64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c68:	4290      	cmp	r0, r2
 8008c6a:	d016      	beq.n	8008c9a <HAL_GPIO_Init+0x1a2>
 8008c6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c70:	4290      	cmp	r0, r2
 8008c72:	d014      	beq.n	8008c9e <HAL_GPIO_Init+0x1a6>
 8008c74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c78:	4290      	cmp	r0, r2
 8008c7a:	d012      	beq.n	8008ca2 <HAL_GPIO_Init+0x1aa>
 8008c7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c80:	4290      	cmp	r0, r2
 8008c82:	d010      	beq.n	8008ca6 <HAL_GPIO_Init+0x1ae>
 8008c84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c88:	4290      	cmp	r0, r2
 8008c8a:	f43f af3c 	beq.w	8008b06 <HAL_GPIO_Init+0xe>
 8008c8e:	2208      	movs	r2, #8
 8008c90:	e73c      	b.n	8008b0c <HAL_GPIO_Init+0x14>
 8008c92:	2201      	movs	r2, #1
 8008c94:	e73a      	b.n	8008b0c <HAL_GPIO_Init+0x14>
 8008c96:	2202      	movs	r2, #2
 8008c98:	e738      	b.n	8008b0c <HAL_GPIO_Init+0x14>
 8008c9a:	2203      	movs	r2, #3
 8008c9c:	e736      	b.n	8008b0c <HAL_GPIO_Init+0x14>
 8008c9e:	2204      	movs	r2, #4
 8008ca0:	e734      	b.n	8008b0c <HAL_GPIO_Init+0x14>
 8008ca2:	2205      	movs	r2, #5
 8008ca4:	e732      	b.n	8008b0c <HAL_GPIO_Init+0x14>
 8008ca6:	2206      	movs	r2, #6
 8008ca8:	e730      	b.n	8008b0c <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8008caa:	b003      	add	sp, #12
 8008cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cae:	4770      	bx	lr
 8008cb0:	40013800 	.word	0x40013800
 8008cb4:	40013c00 	.word	0x40013c00
 8008cb8:	40023800 	.word	0x40023800
 8008cbc:	40020000 	.word	0x40020000

08008cc0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008cc0:	b912      	cbnz	r2, 8008cc8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008cc2:	0409      	lsls	r1, r1, #16
 8008cc4:	6181      	str	r1, [r0, #24]
  }
}
 8008cc6:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8008cc8:	6181      	str	r1, [r0, #24]
 8008cca:	4770      	bx	lr

08008ccc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	f000 81e4 	beq.w	800909a <HAL_RCC_OscConfig+0x3ce>
{
 8008cd2:	b570      	push	{r4, r5, r6, lr}
 8008cd4:	b082      	sub	sp, #8
 8008cd6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cd8:	6803      	ldr	r3, [r0, #0]
 8008cda:	f013 0f01 	tst.w	r3, #1
 8008cde:	d03b      	beq.n	8008d58 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008ce0:	4ba7      	ldr	r3, [pc, #668]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	f003 030c 	and.w	r3, r3, #12
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	d02c      	beq.n	8008d46 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008cec:	4ba4      	ldr	r3, [pc, #656]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008cf4:	2b08      	cmp	r3, #8
 8008cf6:	d021      	beq.n	8008d3c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cf8:	6863      	ldr	r3, [r4, #4]
 8008cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cfe:	d04f      	beq.n	8008da0 <HAL_RCC_OscConfig+0xd4>
 8008d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d04:	d052      	beq.n	8008dac <HAL_RCC_OscConfig+0xe0>
 8008d06:	4b9e      	ldr	r3, [pc, #632]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008d0e:	601a      	str	r2, [r3, #0]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d16:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008d18:	6863      	ldr	r3, [r4, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d050      	beq.n	8008dc0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d1e:	f7ff fe89 	bl	8008a34 <HAL_GetTick>
 8008d22:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d24:	4b96      	ldr	r3, [pc, #600]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008d2c:	d114      	bne.n	8008d58 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d2e:	f7ff fe81 	bl	8008a34 <HAL_GetTick>
 8008d32:	1b40      	subs	r0, r0, r5
 8008d34:	2864      	cmp	r0, #100	; 0x64
 8008d36:	d9f5      	bls.n	8008d24 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8008d38:	2003      	movs	r0, #3
 8008d3a:	e1b3      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d3c:	4b90      	ldr	r3, [pc, #576]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8008d44:	d0d8      	beq.n	8008cf8 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d46:	4b8e      	ldr	r3, [pc, #568]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008d4e:	d003      	beq.n	8008d58 <HAL_RCC_OscConfig+0x8c>
 8008d50:	6863      	ldr	r3, [r4, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 81a3 	beq.w	800909e <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d58:	6823      	ldr	r3, [r4, #0]
 8008d5a:	f013 0f02 	tst.w	r3, #2
 8008d5e:	d055      	beq.n	8008e0c <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d60:	4b87      	ldr	r3, [pc, #540]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f013 0f0c 	tst.w	r3, #12
 8008d68:	d03e      	beq.n	8008de8 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d6a:	4b85      	ldr	r3, [pc, #532]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d72:	2b08      	cmp	r3, #8
 8008d74:	d033      	beq.n	8008dde <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d76:	68e3      	ldr	r3, [r4, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d068      	beq.n	8008e4e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d7c:	4b81      	ldr	r3, [pc, #516]	; (8008f84 <HAL_RCC_OscConfig+0x2b8>)
 8008d7e:	2201      	movs	r2, #1
 8008d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d82:	f7ff fe57 	bl	8008a34 <HAL_GetTick>
 8008d86:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d88:	4b7d      	ldr	r3, [pc, #500]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f013 0f02 	tst.w	r3, #2
 8008d90:	d154      	bne.n	8008e3c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d92:	f7ff fe4f 	bl	8008a34 <HAL_GetTick>
 8008d96:	1b40      	subs	r0, r0, r5
 8008d98:	2802      	cmp	r0, #2
 8008d9a:	d9f5      	bls.n	8008d88 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8008d9c:	2003      	movs	r0, #3
 8008d9e:	e181      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008da0:	4a77      	ldr	r2, [pc, #476]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008da2:	6813      	ldr	r3, [r2, #0]
 8008da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008da8:	6013      	str	r3, [r2, #0]
 8008daa:	e7b5      	b.n	8008d18 <HAL_RCC_OscConfig+0x4c>
 8008dac:	4b74      	ldr	r3, [pc, #464]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008dbc:	601a      	str	r2, [r3, #0]
 8008dbe:	e7ab      	b.n	8008d18 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8008dc0:	f7ff fe38 	bl	8008a34 <HAL_GetTick>
 8008dc4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008dc6:	4b6e      	ldr	r3, [pc, #440]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8008dce:	d0c3      	beq.n	8008d58 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008dd0:	f7ff fe30 	bl	8008a34 <HAL_GetTick>
 8008dd4:	1b40      	subs	r0, r0, r5
 8008dd6:	2864      	cmp	r0, #100	; 0x64
 8008dd8:	d9f5      	bls.n	8008dc6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8008dda:	2003      	movs	r0, #3
 8008ddc:	e162      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008dde:	4b68      	ldr	r3, [pc, #416]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8008de6:	d1c6      	bne.n	8008d76 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008de8:	4b65      	ldr	r3, [pc, #404]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f013 0f02 	tst.w	r3, #2
 8008df0:	d004      	beq.n	8008dfc <HAL_RCC_OscConfig+0x130>
 8008df2:	68e3      	ldr	r3, [r4, #12]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d001      	beq.n	8008dfc <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8008df8:	2001      	movs	r0, #1
 8008dfa:	e153      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dfc:	4a60      	ldr	r2, [pc, #384]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008dfe:	6813      	ldr	r3, [r2, #0]
 8008e00:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008e04:	6921      	ldr	r1, [r4, #16]
 8008e06:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008e0a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e0c:	6823      	ldr	r3, [r4, #0]
 8008e0e:	f013 0f08 	tst.w	r3, #8
 8008e12:	d040      	beq.n	8008e96 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008e14:	6963      	ldr	r3, [r4, #20]
 8008e16:	b363      	cbz	r3, 8008e72 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e18:	4b5b      	ldr	r3, [pc, #364]	; (8008f88 <HAL_RCC_OscConfig+0x2bc>)
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e1e:	f7ff fe09 	bl	8008a34 <HAL_GetTick>
 8008e22:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e24:	4b56      	ldr	r3, [pc, #344]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e28:	f013 0f02 	tst.w	r3, #2
 8008e2c:	d133      	bne.n	8008e96 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e2e:	f7ff fe01 	bl	8008a34 <HAL_GetTick>
 8008e32:	1b40      	subs	r0, r0, r5
 8008e34:	2802      	cmp	r0, #2
 8008e36:	d9f5      	bls.n	8008e24 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8008e38:	2003      	movs	r0, #3
 8008e3a:	e133      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e3c:	4a50      	ldr	r2, [pc, #320]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008e3e:	6813      	ldr	r3, [r2, #0]
 8008e40:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008e44:	6921      	ldr	r1, [r4, #16]
 8008e46:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008e4a:	6013      	str	r3, [r2, #0]
 8008e4c:	e7de      	b.n	8008e0c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8008e4e:	4b4d      	ldr	r3, [pc, #308]	; (8008f84 <HAL_RCC_OscConfig+0x2b8>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008e54:	f7ff fdee 	bl	8008a34 <HAL_GetTick>
 8008e58:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e5a:	4b49      	ldr	r3, [pc, #292]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f013 0f02 	tst.w	r3, #2
 8008e62:	d0d3      	beq.n	8008e0c <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e64:	f7ff fde6 	bl	8008a34 <HAL_GetTick>
 8008e68:	1b40      	subs	r0, r0, r5
 8008e6a:	2802      	cmp	r0, #2
 8008e6c:	d9f5      	bls.n	8008e5a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8008e6e:	2003      	movs	r0, #3
 8008e70:	e118      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e72:	4b45      	ldr	r3, [pc, #276]	; (8008f88 <HAL_RCC_OscConfig+0x2bc>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e78:	f7ff fddc 	bl	8008a34 <HAL_GetTick>
 8008e7c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e7e:	4b40      	ldr	r3, [pc, #256]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e82:	f013 0f02 	tst.w	r3, #2
 8008e86:	d006      	beq.n	8008e96 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e88:	f7ff fdd4 	bl	8008a34 <HAL_GetTick>
 8008e8c:	1b40      	subs	r0, r0, r5
 8008e8e:	2802      	cmp	r0, #2
 8008e90:	d9f5      	bls.n	8008e7e <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8008e92:	2003      	movs	r0, #3
 8008e94:	e106      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	f013 0f04 	tst.w	r3, #4
 8008e9c:	d079      	beq.n	8008f92 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e9e:	4b38      	ldr	r3, [pc, #224]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8008ea6:	d133      	bne.n	8008f10 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	9301      	str	r3, [sp, #4]
 8008eac:	4b34      	ldr	r3, [pc, #208]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008eb0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008eb4:	641a      	str	r2, [r3, #64]	; 0x40
 8008eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008ec0:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ec2:	4b32      	ldr	r3, [pc, #200]	; (8008f8c <HAL_RCC_OscConfig+0x2c0>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008eca:	d023      	beq.n	8008f14 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ecc:	68a3      	ldr	r3, [r4, #8]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d034      	beq.n	8008f3c <HAL_RCC_OscConfig+0x270>
 8008ed2:	2b05      	cmp	r3, #5
 8008ed4:	d038      	beq.n	8008f48 <HAL_RCC_OscConfig+0x27c>
 8008ed6:	4b2a      	ldr	r3, [pc, #168]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008ed8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008eda:	f022 0201 	bic.w	r2, r2, #1
 8008ede:	671a      	str	r2, [r3, #112]	; 0x70
 8008ee0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008ee2:	f022 0204 	bic.w	r2, r2, #4
 8008ee6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ee8:	68a3      	ldr	r3, [r4, #8]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d036      	beq.n	8008f5c <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eee:	f7ff fda1 	bl	8008a34 <HAL_GetTick>
 8008ef2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ef4:	4b22      	ldr	r3, [pc, #136]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef8:	f013 0f02 	tst.w	r3, #2
 8008efc:	d148      	bne.n	8008f90 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008efe:	f7ff fd99 	bl	8008a34 <HAL_GetTick>
 8008f02:	1b80      	subs	r0, r0, r6
 8008f04:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f08:	4298      	cmp	r0, r3
 8008f0a:	d9f3      	bls.n	8008ef4 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8008f0c:	2003      	movs	r0, #3
 8008f0e:	e0c9      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
    FlagStatus       pwrclkchanged = RESET;
 8008f10:	2500      	movs	r5, #0
 8008f12:	e7d6      	b.n	8008ec2 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f14:	4a1d      	ldr	r2, [pc, #116]	; (8008f8c <HAL_RCC_OscConfig+0x2c0>)
 8008f16:	6813      	ldr	r3, [r2, #0]
 8008f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f1c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8008f1e:	f7ff fd89 	bl	8008a34 <HAL_GetTick>
 8008f22:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f24:	4b19      	ldr	r3, [pc, #100]	; (8008f8c <HAL_RCC_OscConfig+0x2c0>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f413 7f80 	tst.w	r3, #256	; 0x100
 8008f2c:	d1ce      	bne.n	8008ecc <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f2e:	f7ff fd81 	bl	8008a34 <HAL_GetTick>
 8008f32:	1b80      	subs	r0, r0, r6
 8008f34:	2802      	cmp	r0, #2
 8008f36:	d9f5      	bls.n	8008f24 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8008f38:	2003      	movs	r0, #3
 8008f3a:	e0b3      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f3c:	4a10      	ldr	r2, [pc, #64]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008f3e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8008f40:	f043 0301 	orr.w	r3, r3, #1
 8008f44:	6713      	str	r3, [r2, #112]	; 0x70
 8008f46:	e7cf      	b.n	8008ee8 <HAL_RCC_OscConfig+0x21c>
 8008f48:	4b0d      	ldr	r3, [pc, #52]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008f4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f4c:	f042 0204 	orr.w	r2, r2, #4
 8008f50:	671a      	str	r2, [r3, #112]	; 0x70
 8008f52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f54:	f042 0201 	orr.w	r2, r2, #1
 8008f58:	671a      	str	r2, [r3, #112]	; 0x70
 8008f5a:	e7c5      	b.n	8008ee8 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f5c:	f7ff fd6a 	bl	8008a34 <HAL_GetTick>
 8008f60:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f62:	4b07      	ldr	r3, [pc, #28]	; (8008f80 <HAL_RCC_OscConfig+0x2b4>)
 8008f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f66:	f013 0f02 	tst.w	r3, #2
 8008f6a:	d011      	beq.n	8008f90 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f6c:	f7ff fd62 	bl	8008a34 <HAL_GetTick>
 8008f70:	1b80      	subs	r0, r0, r6
 8008f72:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f76:	4298      	cmp	r0, r3
 8008f78:	d9f3      	bls.n	8008f62 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8008f7a:	2003      	movs	r0, #3
 8008f7c:	e092      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
 8008f7e:	bf00      	nop
 8008f80:	40023800 	.word	0x40023800
 8008f84:	42470000 	.word	0x42470000
 8008f88:	42470e80 	.word	0x42470e80
 8008f8c:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f90:	b9ed      	cbnz	r5, 8008fce <HAL_RCC_OscConfig+0x302>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f92:	69a3      	ldr	r3, [r4, #24]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f000 8084 	beq.w	80090a2 <HAL_RCC_OscConfig+0x3d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f9a:	4a45      	ldr	r2, [pc, #276]	; (80090b0 <HAL_RCC_OscConfig+0x3e4>)
 8008f9c:	6892      	ldr	r2, [r2, #8]
 8008f9e:	f002 020c 	and.w	r2, r2, #12
 8008fa2:	2a08      	cmp	r2, #8
 8008fa4:	d051      	beq.n	800904a <HAL_RCC_OscConfig+0x37e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d017      	beq.n	8008fda <HAL_RCC_OscConfig+0x30e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008faa:	4b42      	ldr	r3, [pc, #264]	; (80090b4 <HAL_RCC_OscConfig+0x3e8>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fb0:	f7ff fd40 	bl	8008a34 <HAL_GetTick>
 8008fb4:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fb6:	4b3e      	ldr	r3, [pc, #248]	; (80090b0 <HAL_RCC_OscConfig+0x3e4>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008fbe:	d042      	beq.n	8009046 <HAL_RCC_OscConfig+0x37a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fc0:	f7ff fd38 	bl	8008a34 <HAL_GetTick>
 8008fc4:	1b00      	subs	r0, r0, r4
 8008fc6:	2802      	cmp	r0, #2
 8008fc8:	d9f5      	bls.n	8008fb6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8008fca:	2003      	movs	r0, #3
 8008fcc:	e06a      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008fce:	4a38      	ldr	r2, [pc, #224]	; (80090b0 <HAL_RCC_OscConfig+0x3e4>)
 8008fd0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8008fd8:	e7db      	b.n	8008f92 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8008fda:	4b36      	ldr	r3, [pc, #216]	; (80090b4 <HAL_RCC_OscConfig+0x3e8>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008fe0:	f7ff fd28 	bl	8008a34 <HAL_GetTick>
 8008fe4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fe6:	4b32      	ldr	r3, [pc, #200]	; (80090b0 <HAL_RCC_OscConfig+0x3e4>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008fee:	d006      	beq.n	8008ffe <HAL_RCC_OscConfig+0x332>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ff0:	f7ff fd20 	bl	8008a34 <HAL_GetTick>
 8008ff4:	1b40      	subs	r0, r0, r5
 8008ff6:	2802      	cmp	r0, #2
 8008ff8:	d9f5      	bls.n	8008fe6 <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 8008ffa:	2003      	movs	r0, #3
 8008ffc:	e052      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008ffe:	69e3      	ldr	r3, [r4, #28]
 8009000:	6a22      	ldr	r2, [r4, #32]
 8009002:	4313      	orrs	r3, r2
 8009004:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009006:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800900a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800900c:	0852      	lsrs	r2, r2, #1
 800900e:	3a01      	subs	r2, #1
 8009010:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009014:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009016:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800901a:	4a25      	ldr	r2, [pc, #148]	; (80090b0 <HAL_RCC_OscConfig+0x3e4>)
 800901c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800901e:	4b25      	ldr	r3, [pc, #148]	; (80090b4 <HAL_RCC_OscConfig+0x3e8>)
 8009020:	2201      	movs	r2, #1
 8009022:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009024:	f7ff fd06 	bl	8008a34 <HAL_GetTick>
 8009028:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800902a:	4b21      	ldr	r3, [pc, #132]	; (80090b0 <HAL_RCC_OscConfig+0x3e4>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009032:	d106      	bne.n	8009042 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009034:	f7ff fcfe 	bl	8008a34 <HAL_GetTick>
 8009038:	1b00      	subs	r0, r0, r4
 800903a:	2802      	cmp	r0, #2
 800903c:	d9f5      	bls.n	800902a <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 800903e:	2003      	movs	r0, #3
 8009040:	e030      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8009042:	2000      	movs	r0, #0
 8009044:	e02e      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
 8009046:	2000      	movs	r0, #0
 8009048:	e02c      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800904a:	2b01      	cmp	r3, #1
 800904c:	d02c      	beq.n	80090a8 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 800904e:	4b18      	ldr	r3, [pc, #96]	; (80090b0 <HAL_RCC_OscConfig+0x3e4>)
 8009050:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009052:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8009056:	69e2      	ldr	r2, [r4, #28]
 8009058:	4291      	cmp	r1, r2
 800905a:	d001      	beq.n	8009060 <HAL_RCC_OscConfig+0x394>
          return HAL_ERROR;
 800905c:	2001      	movs	r0, #1
 800905e:	e021      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009060:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009064:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009066:	428a      	cmp	r2, r1
 8009068:	d001      	beq.n	800906e <HAL_RCC_OscConfig+0x3a2>
          return HAL_ERROR;
 800906a:	2001      	movs	r0, #1
 800906c:	e01a      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800906e:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009070:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8009074:	401a      	ands	r2, r3
 8009076:	428a      	cmp	r2, r1
 8009078:	d001      	beq.n	800907e <HAL_RCC_OscConfig+0x3b2>
          return HAL_ERROR;
 800907a:	2001      	movs	r0, #1
 800907c:	e012      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800907e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009082:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009084:	428a      	cmp	r2, r1
 8009086:	d001      	beq.n	800908c <HAL_RCC_OscConfig+0x3c0>
          return HAL_ERROR;
 8009088:	2001      	movs	r0, #1
 800908a:	e00b      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800908c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8009090:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009092:	4293      	cmp	r3, r2
 8009094:	d00a      	beq.n	80090ac <HAL_RCC_OscConfig+0x3e0>
          return HAL_ERROR;
 8009096:	2001      	movs	r0, #1
 8009098:	e004      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
    return HAL_ERROR;
 800909a:	2001      	movs	r0, #1
}
 800909c:	4770      	bx	lr
        return HAL_ERROR;
 800909e:	2001      	movs	r0, #1
 80090a0:	e000      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 80090a2:	2000      	movs	r0, #0
}
 80090a4:	b002      	add	sp, #8
 80090a6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80090a8:	2001      	movs	r0, #1
 80090aa:	e7fb      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 80090ac:	2000      	movs	r0, #0
 80090ae:	e7f9      	b.n	80090a4 <HAL_RCC_OscConfig+0x3d8>
 80090b0:	40023800 	.word	0x40023800
 80090b4:	42470060 	.word	0x42470060

080090b8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80090b8:	4b32      	ldr	r3, [pc, #200]	; (8009184 <HAL_RCC_GetSysClockFreq+0xcc>)
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	f003 030c 	and.w	r3, r3, #12
 80090c0:	2b04      	cmp	r3, #4
 80090c2:	d05c      	beq.n	800917e <HAL_RCC_GetSysClockFreq+0xc6>
 80090c4:	2b08      	cmp	r3, #8
 80090c6:	d001      	beq.n	80090cc <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80090c8:	482f      	ldr	r0, [pc, #188]	; (8009188 <HAL_RCC_GetSysClockFreq+0xd0>)
 80090ca:	4770      	bx	lr
{
 80090cc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80090d0:	4b2c      	ldr	r3, [pc, #176]	; (8009184 <HAL_RCC_GetSysClockFreq+0xcc>)
 80090d2:	685a      	ldr	r2, [r3, #4]
 80090d4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80090de:	d02b      	beq.n	8009138 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80090e0:	4b28      	ldr	r3, [pc, #160]	; (8009184 <HAL_RCC_GetSysClockFreq+0xcc>)
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80090e8:	461e      	mov	r6, r3
 80090ea:	2700      	movs	r7, #0
 80090ec:	015c      	lsls	r4, r3, #5
 80090ee:	2500      	movs	r5, #0
 80090f0:	1ae4      	subs	r4, r4, r3
 80090f2:	eb65 0507 	sbc.w	r5, r5, r7
 80090f6:	01a9      	lsls	r1, r5, #6
 80090f8:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80090fc:	01a0      	lsls	r0, r4, #6
 80090fe:	1b00      	subs	r0, r0, r4
 8009100:	eb61 0105 	sbc.w	r1, r1, r5
 8009104:	00cb      	lsls	r3, r1, #3
 8009106:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800910a:	00c4      	lsls	r4, r0, #3
 800910c:	19a0      	adds	r0, r4, r6
 800910e:	eb43 0107 	adc.w	r1, r3, r7
 8009112:	024b      	lsls	r3, r1, #9
 8009114:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8009118:	0244      	lsls	r4, r0, #9
 800911a:	4620      	mov	r0, r4
 800911c:	4619      	mov	r1, r3
 800911e:	2300      	movs	r3, #0
 8009120:	f7ff f854 	bl	80081cc <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009124:	4b17      	ldr	r3, [pc, #92]	; (8009184 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800912c:	3301      	adds	r3, #1
 800912e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8009130:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8009134:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009138:	4b12      	ldr	r3, [pc, #72]	; (8009184 <HAL_RCC_GetSysClockFreq+0xcc>)
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8009140:	461e      	mov	r6, r3
 8009142:	2700      	movs	r7, #0
 8009144:	015c      	lsls	r4, r3, #5
 8009146:	2500      	movs	r5, #0
 8009148:	1ae4      	subs	r4, r4, r3
 800914a:	eb65 0507 	sbc.w	r5, r5, r7
 800914e:	01a9      	lsls	r1, r5, #6
 8009150:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8009154:	01a0      	lsls	r0, r4, #6
 8009156:	1b00      	subs	r0, r0, r4
 8009158:	eb61 0105 	sbc.w	r1, r1, r5
 800915c:	00cb      	lsls	r3, r1, #3
 800915e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8009162:	00c4      	lsls	r4, r0, #3
 8009164:	19a0      	adds	r0, r4, r6
 8009166:	eb43 0107 	adc.w	r1, r3, r7
 800916a:	028b      	lsls	r3, r1, #10
 800916c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8009170:	0284      	lsls	r4, r0, #10
 8009172:	4620      	mov	r0, r4
 8009174:	4619      	mov	r1, r3
 8009176:	2300      	movs	r3, #0
 8009178:	f7ff f828 	bl	80081cc <__aeabi_uldivmod>
 800917c:	e7d2      	b.n	8009124 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 800917e:	4803      	ldr	r0, [pc, #12]	; (800918c <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	40023800 	.word	0x40023800
 8009188:	00f42400 	.word	0x00f42400
 800918c:	007a1200 	.word	0x007a1200

08009190 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8009190:	2800      	cmp	r0, #0
 8009192:	f000 809e 	beq.w	80092d2 <HAL_RCC_ClockConfig+0x142>
{
 8009196:	b570      	push	{r4, r5, r6, lr}
 8009198:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800919a:	4b50      	ldr	r3, [pc, #320]	; (80092dc <HAL_RCC_ClockConfig+0x14c>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 030f 	and.w	r3, r3, #15
 80091a2:	428b      	cmp	r3, r1
 80091a4:	d209      	bcs.n	80091ba <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091a6:	b2cb      	uxtb	r3, r1
 80091a8:	4a4c      	ldr	r2, [pc, #304]	; (80092dc <HAL_RCC_ClockConfig+0x14c>)
 80091aa:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091ac:	6813      	ldr	r3, [r2, #0]
 80091ae:	f003 030f 	and.w	r3, r3, #15
 80091b2:	428b      	cmp	r3, r1
 80091b4:	d001      	beq.n	80091ba <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 80091b6:	2001      	movs	r0, #1
}
 80091b8:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	f013 0f02 	tst.w	r3, #2
 80091c0:	d017      	beq.n	80091f2 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091c2:	f013 0f04 	tst.w	r3, #4
 80091c6:	d004      	beq.n	80091d2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091c8:	4a45      	ldr	r2, [pc, #276]	; (80092e0 <HAL_RCC_ClockConfig+0x150>)
 80091ca:	6893      	ldr	r3, [r2, #8]
 80091cc:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80091d0:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	f013 0f08 	tst.w	r3, #8
 80091d8:	d004      	beq.n	80091e4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80091da:	4a41      	ldr	r2, [pc, #260]	; (80092e0 <HAL_RCC_ClockConfig+0x150>)
 80091dc:	6893      	ldr	r3, [r2, #8]
 80091de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80091e2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091e4:	4a3e      	ldr	r2, [pc, #248]	; (80092e0 <HAL_RCC_ClockConfig+0x150>)
 80091e6:	6893      	ldr	r3, [r2, #8]
 80091e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091ec:	68a0      	ldr	r0, [r4, #8]
 80091ee:	4303      	orrs	r3, r0
 80091f0:	6093      	str	r3, [r2, #8]
 80091f2:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	f013 0f01 	tst.w	r3, #1
 80091fa:	d032      	beq.n	8009262 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091fc:	6863      	ldr	r3, [r4, #4]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d021      	beq.n	8009246 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009202:	1e9a      	subs	r2, r3, #2
 8009204:	2a01      	cmp	r2, #1
 8009206:	d925      	bls.n	8009254 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009208:	4a35      	ldr	r2, [pc, #212]	; (80092e0 <HAL_RCC_ClockConfig+0x150>)
 800920a:	6812      	ldr	r2, [r2, #0]
 800920c:	f012 0f02 	tst.w	r2, #2
 8009210:	d061      	beq.n	80092d6 <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009212:	4933      	ldr	r1, [pc, #204]	; (80092e0 <HAL_RCC_ClockConfig+0x150>)
 8009214:	688a      	ldr	r2, [r1, #8]
 8009216:	f022 0203 	bic.w	r2, r2, #3
 800921a:	4313      	orrs	r3, r2
 800921c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800921e:	f7ff fc09 	bl	8008a34 <HAL_GetTick>
 8009222:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009224:	4b2e      	ldr	r3, [pc, #184]	; (80092e0 <HAL_RCC_ClockConfig+0x150>)
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	f003 030c 	and.w	r3, r3, #12
 800922c:	6862      	ldr	r2, [r4, #4]
 800922e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009232:	d016      	beq.n	8009262 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009234:	f7ff fbfe 	bl	8008a34 <HAL_GetTick>
 8009238:	1b80      	subs	r0, r0, r6
 800923a:	f241 3388 	movw	r3, #5000	; 0x1388
 800923e:	4298      	cmp	r0, r3
 8009240:	d9f0      	bls.n	8009224 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8009242:	2003      	movs	r0, #3
 8009244:	e7b8      	b.n	80091b8 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009246:	4a26      	ldr	r2, [pc, #152]	; (80092e0 <HAL_RCC_ClockConfig+0x150>)
 8009248:	6812      	ldr	r2, [r2, #0]
 800924a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800924e:	d1e0      	bne.n	8009212 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8009250:	2001      	movs	r0, #1
 8009252:	e7b1      	b.n	80091b8 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009254:	4a22      	ldr	r2, [pc, #136]	; (80092e0 <HAL_RCC_ClockConfig+0x150>)
 8009256:	6812      	ldr	r2, [r2, #0]
 8009258:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800925c:	d1d9      	bne.n	8009212 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800925e:	2001      	movs	r0, #1
 8009260:	e7aa      	b.n	80091b8 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009262:	4b1e      	ldr	r3, [pc, #120]	; (80092dc <HAL_RCC_ClockConfig+0x14c>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 030f 	and.w	r3, r3, #15
 800926a:	42ab      	cmp	r3, r5
 800926c:	d909      	bls.n	8009282 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800926e:	b2ea      	uxtb	r2, r5
 8009270:	4b1a      	ldr	r3, [pc, #104]	; (80092dc <HAL_RCC_ClockConfig+0x14c>)
 8009272:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 030f 	and.w	r3, r3, #15
 800927a:	42ab      	cmp	r3, r5
 800927c:	d001      	beq.n	8009282 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 800927e:	2001      	movs	r0, #1
 8009280:	e79a      	b.n	80091b8 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009282:	6823      	ldr	r3, [r4, #0]
 8009284:	f013 0f04 	tst.w	r3, #4
 8009288:	d006      	beq.n	8009298 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800928a:	4a15      	ldr	r2, [pc, #84]	; (80092e0 <HAL_RCC_ClockConfig+0x150>)
 800928c:	6893      	ldr	r3, [r2, #8]
 800928e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009292:	68e1      	ldr	r1, [r4, #12]
 8009294:	430b      	orrs	r3, r1
 8009296:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	f013 0f08 	tst.w	r3, #8
 800929e:	d007      	beq.n	80092b0 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80092a0:	4a0f      	ldr	r2, [pc, #60]	; (80092e0 <HAL_RCC_ClockConfig+0x150>)
 80092a2:	6893      	ldr	r3, [r2, #8]
 80092a4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80092a8:	6921      	ldr	r1, [r4, #16]
 80092aa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80092ae:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80092b0:	f7ff ff02 	bl	80090b8 <HAL_RCC_GetSysClockFreq>
 80092b4:	4b0a      	ldr	r3, [pc, #40]	; (80092e0 <HAL_RCC_ClockConfig+0x150>)
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80092bc:	4a09      	ldr	r2, [pc, #36]	; (80092e4 <HAL_RCC_ClockConfig+0x154>)
 80092be:	5cd3      	ldrb	r3, [r2, r3]
 80092c0:	40d8      	lsrs	r0, r3
 80092c2:	4b09      	ldr	r3, [pc, #36]	; (80092e8 <HAL_RCC_ClockConfig+0x158>)
 80092c4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80092c6:	4b09      	ldr	r3, [pc, #36]	; (80092ec <HAL_RCC_ClockConfig+0x15c>)
 80092c8:	6818      	ldr	r0, [r3, #0]
 80092ca:	f7ff fb67 	bl	800899c <HAL_InitTick>
  return HAL_OK;
 80092ce:	2000      	movs	r0, #0
 80092d0:	e772      	b.n	80091b8 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80092d2:	2001      	movs	r0, #1
}
 80092d4:	4770      	bx	lr
        return HAL_ERROR;
 80092d6:	2001      	movs	r0, #1
 80092d8:	e76e      	b.n	80091b8 <HAL_RCC_ClockConfig+0x28>
 80092da:	bf00      	nop
 80092dc:	40023c00 	.word	0x40023c00
 80092e0:	40023800 	.word	0x40023800
 80092e4:	0800976c 	.word	0x0800976c
 80092e8:	20000000 	.word	0x20000000
 80092ec:	20000008 	.word	0x20000008

080092f0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80092f0:	4b01      	ldr	r3, [pc, #4]	; (80092f8 <HAL_RCC_GetHCLKFreq+0x8>)
 80092f2:	6818      	ldr	r0, [r3, #0]
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	20000000 	.word	0x20000000

080092fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092fc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80092fe:	f7ff fff7 	bl	80092f0 <HAL_RCC_GetHCLKFreq>
 8009302:	4b04      	ldr	r3, [pc, #16]	; (8009314 <HAL_RCC_GetPCLK1Freq+0x18>)
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800930a:	4a03      	ldr	r2, [pc, #12]	; (8009318 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800930c:	5cd3      	ldrb	r3, [r2, r3]
}
 800930e:	40d8      	lsrs	r0, r3
 8009310:	bd08      	pop	{r3, pc}
 8009312:	bf00      	nop
 8009314:	40023800 	.word	0x40023800
 8009318:	0800977c 	.word	0x0800977c

0800931c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800931c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800931e:	f7ff ffe7 	bl	80092f0 <HAL_RCC_GetHCLKFreq>
 8009322:	4b04      	ldr	r3, [pc, #16]	; (8009334 <HAL_RCC_GetPCLK2Freq+0x18>)
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800932a:	4a03      	ldr	r2, [pc, #12]	; (8009338 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800932c:	5cd3      	ldrb	r3, [r2, r3]
}
 800932e:	40d8      	lsrs	r0, r3
 8009330:	bd08      	pop	{r3, pc}
 8009332:	bf00      	nop
 8009334:	40023800 	.word	0x40023800
 8009338:	0800977c 	.word	0x0800977c

0800933c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800933c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8009340:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009342:	6802      	ldr	r2, [r0, #0]
 8009344:	6913      	ldr	r3, [r2, #16]
 8009346:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800934a:	68c1      	ldr	r1, [r0, #12]
 800934c:	430b      	orrs	r3, r1
 800934e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009350:	6883      	ldr	r3, [r0, #8]
 8009352:	6902      	ldr	r2, [r0, #16]
 8009354:	4313      	orrs	r3, r2
 8009356:	6942      	ldr	r2, [r0, #20]
 8009358:	4313      	orrs	r3, r2
 800935a:	69c2      	ldr	r2, [r0, #28]
 800935c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800935e:	6801      	ldr	r1, [r0, #0]
 8009360:	68cb      	ldr	r3, [r1, #12]
 8009362:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009366:	f023 030c 	bic.w	r3, r3, #12
 800936a:	4313      	orrs	r3, r2
 800936c:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800936e:	6802      	ldr	r2, [r0, #0]
 8009370:	6953      	ldr	r3, [r2, #20]
 8009372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009376:	6981      	ldr	r1, [r0, #24]
 8009378:	430b      	orrs	r3, r1
 800937a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800937c:	69c3      	ldr	r3, [r0, #28]
 800937e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009382:	d03b      	beq.n	80093fc <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009384:	6803      	ldr	r3, [r0, #0]
 8009386:	4a71      	ldr	r2, [pc, #452]	; (800954c <UART_SetConfig+0x210>)
 8009388:	4293      	cmp	r3, r2
 800938a:	f000 80ab 	beq.w	80094e4 <UART_SetConfig+0x1a8>
 800938e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009392:	4293      	cmp	r3, r2
 8009394:	f000 80a6 	beq.w	80094e4 <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009398:	f7ff ffb0 	bl	80092fc <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800939c:	f04f 0900 	mov.w	r9, #0
 80093a0:	1806      	adds	r6, r0, r0
 80093a2:	eb49 0709 	adc.w	r7, r9, r9
 80093a6:	eb16 0b00 	adds.w	fp, r6, r0
 80093aa:	eb47 0c09 	adc.w	ip, r7, r9
 80093ae:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80093b2:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 80093b6:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 80093ba:	4693      	mov	fp, r2
 80093bc:	469c      	mov	ip, r3
 80093be:	6863      	ldr	r3, [r4, #4]
 80093c0:	009a      	lsls	r2, r3, #2
 80093c2:	0f9b      	lsrs	r3, r3, #30
 80093c4:	eb10 000b 	adds.w	r0, r0, fp
 80093c8:	eb49 010c 	adc.w	r1, r9, ip
 80093cc:	f7fe fefe 	bl	80081cc <__aeabi_uldivmod>
 80093d0:	4d5f      	ldr	r5, [pc, #380]	; (8009550 <UART_SetConfig+0x214>)
 80093d2:	fba5 3200 	umull	r3, r2, r5, r0
 80093d6:	0951      	lsrs	r1, r2, #5
 80093d8:	2264      	movs	r2, #100	; 0x64
 80093da:	fb02 0211 	mls	r2, r2, r1, r0
 80093de:	0113      	lsls	r3, r2, #4
 80093e0:	3332      	adds	r3, #50	; 0x32
 80093e2:	fba5 2303 	umull	r2, r3, r5, r3
 80093e6:	095b      	lsrs	r3, r3, #5
 80093e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80093ec:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80093f0:	f003 030f 	and.w	r3, r3, #15
 80093f4:	6821      	ldr	r1, [r4, #0]
 80093f6:	4413      	add	r3, r2
 80093f8:	608b      	str	r3, [r1, #8]
    }
  }
}
 80093fa:	e0a4      	b.n	8009546 <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80093fc:	6803      	ldr	r3, [r0, #0]
 80093fe:	4a53      	ldr	r2, [pc, #332]	; (800954c <UART_SetConfig+0x210>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d039      	beq.n	8009478 <UART_SetConfig+0x13c>
 8009404:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009408:	4293      	cmp	r3, r2
 800940a:	d035      	beq.n	8009478 <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 800940c:	f7ff ff76 	bl	80092fc <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009410:	4683      	mov	fp, r0
 8009412:	f04f 0c00 	mov.w	ip, #0
 8009416:	1806      	adds	r6, r0, r0
 8009418:	eb4c 070c 	adc.w	r7, ip, ip
 800941c:	eb16 0800 	adds.w	r8, r6, r0
 8009420:	eb47 090c 	adc.w	r9, r7, ip
 8009424:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009428:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800942c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009430:	4690      	mov	r8, r2
 8009432:	4699      	mov	r9, r3
 8009434:	6862      	ldr	r2, [r4, #4]
 8009436:	2100      	movs	r1, #0
 8009438:	1892      	adds	r2, r2, r2
 800943a:	eb41 0301 	adc.w	r3, r1, r1
 800943e:	eb1b 0008 	adds.w	r0, fp, r8
 8009442:	eb4c 0109 	adc.w	r1, ip, r9
 8009446:	f7fe fec1 	bl	80081cc <__aeabi_uldivmod>
 800944a:	4d41      	ldr	r5, [pc, #260]	; (8009550 <UART_SetConfig+0x214>)
 800944c:	fba5 3200 	umull	r3, r2, r5, r0
 8009450:	0951      	lsrs	r1, r2, #5
 8009452:	2264      	movs	r2, #100	; 0x64
 8009454:	fb02 0211 	mls	r2, r2, r1, r0
 8009458:	00d3      	lsls	r3, r2, #3
 800945a:	3332      	adds	r3, #50	; 0x32
 800945c:	fba5 2303 	umull	r2, r3, r5, r3
 8009460:	095b      	lsrs	r3, r3, #5
 8009462:	005a      	lsls	r2, r3, #1
 8009464:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8009468:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800946c:	f003 0307 	and.w	r3, r3, #7
 8009470:	6821      	ldr	r1, [r4, #0]
 8009472:	4413      	add	r3, r2
 8009474:	608b      	str	r3, [r1, #8]
 8009476:	e066      	b.n	8009546 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009478:	f7ff ff50 	bl	800931c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800947c:	4680      	mov	r8, r0
 800947e:	f04f 0900 	mov.w	r9, #0
 8009482:	1806      	adds	r6, r0, r0
 8009484:	eb49 0709 	adc.w	r7, r9, r9
 8009488:	eb16 0b00 	adds.w	fp, r6, r0
 800948c:	eb47 0c09 	adc.w	ip, r7, r9
 8009490:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8009494:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8009498:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 800949c:	4693      	mov	fp, r2
 800949e:	469c      	mov	ip, r3
 80094a0:	6862      	ldr	r2, [r4, #4]
 80094a2:	2100      	movs	r1, #0
 80094a4:	1892      	adds	r2, r2, r2
 80094a6:	eb41 0301 	adc.w	r3, r1, r1
 80094aa:	eb18 000b 	adds.w	r0, r8, fp
 80094ae:	eb49 010c 	adc.w	r1, r9, ip
 80094b2:	f7fe fe8b 	bl	80081cc <__aeabi_uldivmod>
 80094b6:	4d26      	ldr	r5, [pc, #152]	; (8009550 <UART_SetConfig+0x214>)
 80094b8:	fba5 3200 	umull	r3, r2, r5, r0
 80094bc:	0951      	lsrs	r1, r2, #5
 80094be:	2264      	movs	r2, #100	; 0x64
 80094c0:	fb02 0211 	mls	r2, r2, r1, r0
 80094c4:	00d3      	lsls	r3, r2, #3
 80094c6:	3332      	adds	r3, #50	; 0x32
 80094c8:	fba5 2303 	umull	r2, r3, r5, r3
 80094cc:	095b      	lsrs	r3, r3, #5
 80094ce:	005a      	lsls	r2, r3, #1
 80094d0:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80094d4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80094d8:	f003 0307 	and.w	r3, r3, #7
 80094dc:	6821      	ldr	r1, [r4, #0]
 80094de:	4413      	add	r3, r2
 80094e0:	608b      	str	r3, [r1, #8]
 80094e2:	e030      	b.n	8009546 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 80094e4:	f7ff ff1a 	bl	800931c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094e8:	f04f 0900 	mov.w	r9, #0
 80094ec:	1806      	adds	r6, r0, r0
 80094ee:	eb49 0709 	adc.w	r7, r9, r9
 80094f2:	eb16 0b00 	adds.w	fp, r6, r0
 80094f6:	eb47 0c09 	adc.w	ip, r7, r9
 80094fa:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80094fe:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8009502:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8009506:	4693      	mov	fp, r2
 8009508:	469c      	mov	ip, r3
 800950a:	6863      	ldr	r3, [r4, #4]
 800950c:	009a      	lsls	r2, r3, #2
 800950e:	0f9b      	lsrs	r3, r3, #30
 8009510:	eb10 000b 	adds.w	r0, r0, fp
 8009514:	eb49 010c 	adc.w	r1, r9, ip
 8009518:	f7fe fe58 	bl	80081cc <__aeabi_uldivmod>
 800951c:	4d0c      	ldr	r5, [pc, #48]	; (8009550 <UART_SetConfig+0x214>)
 800951e:	fba5 3200 	umull	r3, r2, r5, r0
 8009522:	0951      	lsrs	r1, r2, #5
 8009524:	2264      	movs	r2, #100	; 0x64
 8009526:	fb02 0211 	mls	r2, r2, r1, r0
 800952a:	0113      	lsls	r3, r2, #4
 800952c:	3332      	adds	r3, #50	; 0x32
 800952e:	fba5 2303 	umull	r2, r3, r5, r3
 8009532:	095b      	lsrs	r3, r3, #5
 8009534:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009538:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800953c:	f003 030f 	and.w	r3, r3, #15
 8009540:	6821      	ldr	r1, [r4, #0]
 8009542:	4413      	add	r3, r2
 8009544:	608b      	str	r3, [r1, #8]
}
 8009546:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 800954a:	bf00      	nop
 800954c:	40011000 	.word	0x40011000
 8009550:	51eb851f 	.word	0x51eb851f

08009554 <UART_WaitOnFlagUntilTimeout>:
{
 8009554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009558:	4605      	mov	r5, r0
 800955a:	460f      	mov	r7, r1
 800955c:	4616      	mov	r6, r2
 800955e:	4698      	mov	r8, r3
 8009560:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009562:	682b      	ldr	r3, [r5, #0]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	ea37 0303 	bics.w	r3, r7, r3
 800956a:	bf0c      	ite	eq
 800956c:	2301      	moveq	r3, #1
 800956e:	2300      	movne	r3, #0
 8009570:	42b3      	cmp	r3, r6
 8009572:	d11d      	bne.n	80095b0 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8009574:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009578:	d0f3      	beq.n	8009562 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800957a:	b12c      	cbz	r4, 8009588 <UART_WaitOnFlagUntilTimeout+0x34>
 800957c:	f7ff fa5a 	bl	8008a34 <HAL_GetTick>
 8009580:	eba0 0008 	sub.w	r0, r0, r8
 8009584:	42a0      	cmp	r0, r4
 8009586:	d9ec      	bls.n	8009562 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009588:	682a      	ldr	r2, [r5, #0]
 800958a:	68d3      	ldr	r3, [r2, #12]
 800958c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009590:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009592:	682a      	ldr	r2, [r5, #0]
 8009594:	6953      	ldr	r3, [r2, #20]
 8009596:	f023 0301 	bic.w	r3, r3, #1
 800959a:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800959c:	2320      	movs	r3, #32
 800959e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80095a2:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80095a6:	2300      	movs	r3, #0
 80095a8:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 80095ac:	2003      	movs	r0, #3
 80095ae:	e000      	b.n	80095b2 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 80095b0:	2000      	movs	r0, #0
}
 80095b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080095b6 <HAL_UART_Init>:
  if (huart == NULL)
 80095b6:	b358      	cbz	r0, 8009610 <HAL_UART_Init+0x5a>
{
 80095b8:	b510      	push	{r4, lr}
 80095ba:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80095bc:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80095c0:	b30b      	cbz	r3, 8009606 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80095c2:	2324      	movs	r3, #36	; 0x24
 80095c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80095c8:	6822      	ldr	r2, [r4, #0]
 80095ca:	68d3      	ldr	r3, [r2, #12]
 80095cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095d0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80095d2:	4620      	mov	r0, r4
 80095d4:	f7ff feb2 	bl	800933c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095d8:	6822      	ldr	r2, [r4, #0]
 80095da:	6913      	ldr	r3, [r2, #16]
 80095dc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80095e0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095e2:	6822      	ldr	r2, [r4, #0]
 80095e4:	6953      	ldr	r3, [r2, #20]
 80095e6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80095ea:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80095ec:	6822      	ldr	r2, [r4, #0]
 80095ee:	68d3      	ldr	r3, [r2, #12]
 80095f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80095f4:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095f6:	2000      	movs	r0, #0
 80095f8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80095fa:	2320      	movs	r3, #32
 80095fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009600:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8009604:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8009606:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800960a:	f7ff f94b 	bl	80088a4 <HAL_UART_MspInit>
 800960e:	e7d8      	b.n	80095c2 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8009610:	2001      	movs	r0, #1
}
 8009612:	4770      	bx	lr

08009614 <HAL_UART_Receive>:
{
 8009614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009618:	b083      	sub	sp, #12
 800961a:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800961c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8009620:	b2db      	uxtb	r3, r3
 8009622:	2b20      	cmp	r3, #32
 8009624:	d15c      	bne.n	80096e0 <HAL_UART_Receive+0xcc>
 8009626:	4604      	mov	r4, r0
 8009628:	460d      	mov	r5, r1
 800962a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800962c:	2900      	cmp	r1, #0
 800962e:	d05b      	beq.n	80096e8 <HAL_UART_Receive+0xd4>
 8009630:	2a00      	cmp	r2, #0
 8009632:	d05b      	beq.n	80096ec <HAL_UART_Receive+0xd8>
    __HAL_LOCK(huart);
 8009634:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8009638:	2b01      	cmp	r3, #1
 800963a:	d059      	beq.n	80096f0 <HAL_UART_Receive+0xdc>
 800963c:	2301      	movs	r3, #1
 800963e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009642:	f04f 0900 	mov.w	r9, #0
 8009646:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800964a:	2322      	movs	r3, #34	; 0x22
 800964c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8009650:	f7ff f9f0 	bl	8008a34 <HAL_GetTick>
 8009654:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8009656:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 800965a:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    __HAL_UNLOCK(huart);
 800965e:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->RxXferCount > 0U)
 8009662:	e01d      	b.n	80096a0 <HAL_UART_Receive+0x8c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009664:	9600      	str	r6, [sp, #0]
 8009666:	463b      	mov	r3, r7
 8009668:	2200      	movs	r2, #0
 800966a:	2120      	movs	r1, #32
 800966c:	4620      	mov	r0, r4
 800966e:	f7ff ff71 	bl	8009554 <UART_WaitOnFlagUntilTimeout>
 8009672:	2800      	cmp	r0, #0
 8009674:	d13e      	bne.n	80096f4 <HAL_UART_Receive+0xe0>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009676:	6923      	ldr	r3, [r4, #16]
 8009678:	b933      	cbnz	r3, 8009688 <HAL_UART_Receive+0x74>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800967a:	6823      	ldr	r3, [r4, #0]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009682:	f825 3b02 	strh.w	r3, [r5], #2
 8009686:	e00b      	b.n	80096a0 <HAL_UART_Receive+0x8c>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	b2db      	uxtb	r3, r3
 800968e:	f825 3b01 	strh.w	r3, [r5], #1
 8009692:	e005      	b.n	80096a0 <HAL_UART_Receive+0x8c>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009694:	6823      	ldr	r3, [r4, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800969c:	702b      	strb	r3, [r5, #0]
 800969e:	3501      	adds	r5, #1
    while (huart->RxXferCount > 0U)
 80096a0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	b1bb      	cbz	r3, 80096d6 <HAL_UART_Receive+0xc2>
      huart->RxXferCount--;
 80096a6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80096a8:	3b01      	subs	r3, #1
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80096ae:	68a3      	ldr	r3, [r4, #8]
 80096b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096b4:	d0d6      	beq.n	8009664 <HAL_UART_Receive+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80096b6:	9600      	str	r6, [sp, #0]
 80096b8:	463b      	mov	r3, r7
 80096ba:	2200      	movs	r2, #0
 80096bc:	2120      	movs	r1, #32
 80096be:	4620      	mov	r0, r4
 80096c0:	f7ff ff48 	bl	8009554 <UART_WaitOnFlagUntilTimeout>
 80096c4:	b9c0      	cbnz	r0, 80096f8 <HAL_UART_Receive+0xe4>
        if (huart->Init.Parity == UART_PARITY_NONE)
 80096c6:	6923      	ldr	r3, [r4, #16]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1e3      	bne.n	8009694 <HAL_UART_Receive+0x80>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80096cc:	6823      	ldr	r3, [r4, #0]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	702b      	strb	r3, [r5, #0]
 80096d2:	3501      	adds	r5, #1
 80096d4:	e7e4      	b.n	80096a0 <HAL_UART_Receive+0x8c>
    huart->RxState = HAL_UART_STATE_READY;
 80096d6:	2320      	movs	r3, #32
 80096d8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 80096dc:	2000      	movs	r0, #0
 80096de:	e000      	b.n	80096e2 <HAL_UART_Receive+0xce>
    return HAL_BUSY;
 80096e0:	2002      	movs	r0, #2
}
 80096e2:	b003      	add	sp, #12
 80096e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 80096e8:	2001      	movs	r0, #1
 80096ea:	e7fa      	b.n	80096e2 <HAL_UART_Receive+0xce>
 80096ec:	2001      	movs	r0, #1
 80096ee:	e7f8      	b.n	80096e2 <HAL_UART_Receive+0xce>
    __HAL_LOCK(huart);
 80096f0:	2002      	movs	r0, #2
 80096f2:	e7f6      	b.n	80096e2 <HAL_UART_Receive+0xce>
          return HAL_TIMEOUT;
 80096f4:	2003      	movs	r0, #3
 80096f6:	e7f4      	b.n	80096e2 <HAL_UART_Receive+0xce>
          return HAL_TIMEOUT;
 80096f8:	2003      	movs	r0, #3
 80096fa:	e7f2      	b.n	80096e2 <HAL_UART_Receive+0xce>

080096fc <__libc_init_array>:
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	4e0d      	ldr	r6, [pc, #52]	; (8009734 <__libc_init_array+0x38>)
 8009700:	4c0d      	ldr	r4, [pc, #52]	; (8009738 <__libc_init_array+0x3c>)
 8009702:	1ba4      	subs	r4, r4, r6
 8009704:	10a4      	asrs	r4, r4, #2
 8009706:	2500      	movs	r5, #0
 8009708:	42a5      	cmp	r5, r4
 800970a:	d109      	bne.n	8009720 <__libc_init_array+0x24>
 800970c:	4e0b      	ldr	r6, [pc, #44]	; (800973c <__libc_init_array+0x40>)
 800970e:	4c0c      	ldr	r4, [pc, #48]	; (8009740 <__libc_init_array+0x44>)
 8009710:	f000 f820 	bl	8009754 <_init>
 8009714:	1ba4      	subs	r4, r4, r6
 8009716:	10a4      	asrs	r4, r4, #2
 8009718:	2500      	movs	r5, #0
 800971a:	42a5      	cmp	r5, r4
 800971c:	d105      	bne.n	800972a <__libc_init_array+0x2e>
 800971e:	bd70      	pop	{r4, r5, r6, pc}
 8009720:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009724:	4798      	blx	r3
 8009726:	3501      	adds	r5, #1
 8009728:	e7ee      	b.n	8009708 <__libc_init_array+0xc>
 800972a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800972e:	4798      	blx	r3
 8009730:	3501      	adds	r5, #1
 8009732:	e7f2      	b.n	800971a <__libc_init_array+0x1e>
 8009734:	0800978c 	.word	0x0800978c
 8009738:	0800978c 	.word	0x0800978c
 800973c:	0800978c 	.word	0x0800978c
 8009740:	08009790 	.word	0x08009790

08009744 <memset>:
 8009744:	4402      	add	r2, r0
 8009746:	4603      	mov	r3, r0
 8009748:	4293      	cmp	r3, r2
 800974a:	d100      	bne.n	800974e <memset+0xa>
 800974c:	4770      	bx	lr
 800974e:	f803 1b01 	strb.w	r1, [r3], #1
 8009752:	e7f9      	b.n	8009748 <memset+0x4>

08009754 <_init>:
 8009754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009756:	bf00      	nop
 8009758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800975a:	bc08      	pop	{r3}
 800975c:	469e      	mov	lr, r3
 800975e:	4770      	bx	lr

08009760 <_fini>:
 8009760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009762:	bf00      	nop
 8009764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009766:	bc08      	pop	{r3}
 8009768:	469e      	mov	lr, r3
 800976a:	4770      	bx	lr
